/usr/bin/sort:
(__TEXT,__text) section
100002a10:	push	rbp
100002a11:	mov	rbp, rsp
100002a14:	push	r15
100002a16:	push	r14
100002a18:	push	r13
100002a1a:	push	r12
100002a1c:	push	rbx
100002a1d:	push	rax
100002a1e:	mov	rax, qword ptr [rip + 0x95eb] ## literal pool symbol address: ___mb_cur_max
100002a25:	cmp	dword ptr [rax], 0x1
100002a28:	jne	0x100002aef
100002a2e:	cmp	qword ptr [rip + 0xdeca], 0x0
100002a36:	jne	0x100002af9
100002a3c:	mov	edi, 0x60
100002a41:	call	0x100007912
100002a46:	mov	qword ptr [rip + 0xdeb3], rax
100002a4d:	xor	r15d, r15d
100002a50:	mov	qword ptr [rax + 8*r15], 0x0
100002a58:	lea	rax, [rip + 0x8a31]
100002a5f:	mov	edi, dword ptr [rax + 4*r15]
100002a63:	call	0x10000ae70 ## symbol stub for: _nl_langinfo
100002a68:	mov	r12, rax
100002a6b:	lea	rax, [rip + 0xdfbe]
100002a72:	cmp	byte ptr [rax], 0x0
100002a75:	je	0x100002a8b
100002a77:	lea	rdi, [rip + 0x8ab2] ## literal pool for: "month[%d]=%s\n"
100002a7e:	mov	esi, r15d
100002a81:	mov	rdx, r12
100002a84:	xor	eax, eax
100002a86:	call	0x10000ae8e ## symbol stub for: _printf
100002a8b:	cmp	byte ptr [r12], 0x0
100002a90:	je	0x100002ada
100002a92:	mov	rdi, r12
100002a95:	call	0x10000794d
100002a9a:	mov	rbx, rax
100002a9d:	mov	rdi, r12
100002aa0:	call	0x10000af72 ## symbol stub for: _strlen
100002aa5:	test	rax, rax
100002aa8:	je	0x100002acf
100002aaa:	mov	r12, rax
100002aad:	mov	r13d, 0x1
100002ab3:	xor	r14d, r14d
100002ab6:	movzx	edi, byte ptr [rbx + r14]
100002abb:	call	0x10000ad6e ## symbol stub for: ___toupper
100002ac0:	mov	byte ptr [rbx + r14], al
100002ac4:	mov	r14d, r13d
100002ac7:	inc	r13d
100002aca:	cmp	r12, r14
100002acd:	ja	0x100002ab6
100002acf:	mov	rax, qword ptr [rip + 0xde2a]
100002ad6:	mov	qword ptr [rax + 8*r15], rbx
100002ada:	inc	r15
100002add:	cmp	r15, 0xc
100002ae1:	je	0x100002af9
100002ae3:	mov	rax, qword ptr [rip + 0xde16]
100002aea:	jmp	0x100002a50
100002aef:	cmp	qword ptr [rip + 0xde11], 0x0
100002af7:	je	0x100002b08
100002af9:	add	rsp, 0x8
100002afd:	pop	rbx
100002afe:	pop	r12
100002b00:	pop	r13
100002b02:	pop	r14
100002b04:	pop	r15
100002b06:	pop	rbp
100002b07:	ret
100002b08:	mov	edi, 0x60
100002b0d:	call	0x100007912
100002b12:	mov	qword ptr [rip + 0xddef], rax
100002b19:	lea	rbx, [rip + 0x8970]
100002b20:	xor	r15d, r15d
100002b23:	mov	qword ptr [rax + 8*r15], 0x0
100002b2b:	mov	edi, dword ptr [rbx + 4*r15]
100002b2f:	call	0x10000ae70 ## symbol stub for: _nl_langinfo
100002b34:	mov	r13, rax
100002b37:	lea	rax, [rip + 0xdef2]
100002b3e:	cmp	byte ptr [rax], 0x0
100002b41:	je	0x100002b57
100002b43:	lea	rdi, [rip + 0x89e6] ## literal pool for: "month[%d]=%s\n"
100002b4a:	mov	esi, r15d
100002b4d:	mov	rdx, r13
100002b50:	xor	eax, eax
100002b52:	call	0x10000ae8e ## symbol stub for: _printf
100002b57:	cmp	byte ptr [r13], 0x0
100002b5c:	je	0x100002bd5
100002b5e:	mov	rdi, r13
100002b61:	call	0x10000af72 ## symbol stub for: _strlen
100002b66:	mov	r12, rax
100002b69:	lea	rdi, [4*rax + 0x4]
100002b71:	call	0x100007912
100002b76:	mov	r14, rax
100002b79:	mov	rdi, rax
100002b7c:	mov	rsi, r13
100002b7f:	mov	rdx, r12
100002b82:	call	0x10000ae3a ## symbol stub for: _mbstowcs
100002b87:	cmp	rax, -0x1
100002b8b:	je	0x100002bcd
100002b8d:	mov	dword ptr [r14 + 4*r12], 0x0
100002b95:	test	r12, r12
100002b98:	je	0x100002bb9
100002b9a:	mov	ebx, 0x1
100002b9f:	xor	r13d, r13d
100002ba2:	mov	edi, dword ptr [r14 + 4*r13]
100002ba6:	call	0x10000ad6e ## symbol stub for: ___toupper
100002bab:	mov	dword ptr [r14 + 4*r13], eax
100002baf:	mov	r13d, ebx
100002bb2:	inc	ebx
100002bb4:	cmp	r12, r13
100002bb7:	ja	0x100002ba2
100002bb9:	mov	rax, qword ptr [rip + 0xdd48]
100002bc0:	mov	qword ptr [rax + 8*r15], r14
100002bc4:	lea	rbx, [rip + 0x88c5]
100002bcb:	jmp	0x100002bd5
100002bcd:	mov	rdi, r14
100002bd0:	call	0x100007927
100002bd5:	inc	r15
100002bd8:	cmp	r15, 0xc
100002bdc:	je	0x100002af9
100002be2:	mov	rax, qword ptr [rip + 0xdd1f]
100002be9:	jmp	0x100002b23
100002bee:	push	rbp
100002bef:	mov	rbp, rsp
100002bf2:	mov	r8, rcx
100002bf5:	mov	rcx, rsi
100002bf8:	mov	rax, qword ptr [rip + 0x9411] ## literal pool symbol address: ___mb_cur_max
100002bff:	add	rcx, 0x8
100002c03:	cmp	dword ptr [rax], 0x1
100002c06:	jne	0x100002c11
100002c08:	lea	rsi, [rip + 0x892f] ## literal pool for: "%s%s%s"
100002c0f:	jmp	0x100002c18
100002c11:	lea	rsi, [rip + 0x892d] ## literal pool for: "%s%S%s"
100002c18:	xor	eax, eax
100002c1a:	pop	rbp
100002c1b:	jmp	0x10000adda ## symbol stub for: _fprintf
100002c20:	push	rbp
100002c21:	mov	rbp, rsp
100002c24:	lea	rax, [rdi + 0x8]
100002c28:	pop	rbp
100002c29:	ret
100002c2a:	push	rbp
100002c2b:	mov	rbp, rsp
100002c2e:	mov	rcx, qword ptr [rip + 0x93db] ## literal pool symbol address: ___mb_cur_max
100002c35:	mov	rdx, qword ptr [rdi]
100002c38:	lea	rax, [4*rdx]
100002c40:	cmp	dword ptr [rcx], 0x1
100002c43:	cmove	rax, rdx
100002c47:	pop	rbp
100002c48:	ret
100002c49:	push	rbp
100002c4a:	mov	rbp, rsp
100002c4d:	mov	rax, qword ptr [rip + 0x93bc] ## literal pool symbol address: ___mb_cur_max
100002c54:	mov	rcx, qword ptr [rdi]
100002c57:	cmp	dword ptr [rax], 0x1
100002c5a:	lea	rdx, [rcx + 0xa]
100002c5e:	lea	rax, [4*rcx + 0xc]
100002c66:	cmove	rax, rdx
100002c6a:	pop	rbp
100002c6b:	ret
100002c6c:	push	rbp
100002c6d:	mov	rbp, rsp
100002c70:	test	rdi, rdi
100002c73:	je	0x100002c98
100002c75:	cmp	qword ptr [rdi], rsi
100002c78:	jbe	0x100002c98
100002c7a:	mov	qword ptr [rdi], rsi
100002c7d:	mov	rax, qword ptr [rip + 0x938c] ## literal pool symbol address: ___mb_cur_max
100002c84:	cmp	dword ptr [rax], 0x1
100002c87:	jne	0x100002c90
100002c89:	mov	byte ptr [rdi + rsi + 0x8], 0x0
100002c8e:	jmp	0x100002c98
100002c90:	mov	dword ptr [rdi + 4*rsi + 0x8], 0x0
100002c98:	pop	rbp
100002c99:	ret
100002c9a:	push	rbp
100002c9b:	mov	rbp, rsp
100002c9e:	push	r14
100002ca0:	push	rbx
100002ca1:	mov	rbx, rdi
100002ca4:	mov	r14, qword ptr [rip + 0x9365] ## literal pool symbol address: ___mb_cur_max
100002cab:	cmp	dword ptr [r14], 0x1
100002caf:	lea	rax, [rdi + 0x9]
100002cb3:	lea	rdi, [4*rdi + 0xc]
100002cbb:	cmove	rdi, rax
100002cbf:	call	0x100007912
100002cc4:	mov	qword ptr [rax], rbx
100002cc7:	cmp	dword ptr [r14], 0x1
100002ccb:	jne	0x100002cd4
100002ccd:	mov	byte ptr [rax + rbx + 0x8], 0x0
100002cd2:	jmp	0x100002cdc
100002cd4:	mov	dword ptr [rax + 4*rbx + 0x8], 0x0
100002cdc:	pop	rbx
100002cdd:	pop	r14
100002cdf:	pop	rbp
100002ce0:	ret
100002ce1:	push	rbp
100002ce2:	mov	rbp, rsp
100002ce5:	push	r14
100002ce7:	push	rbx
100002ce8:	test	rdi, rdi
100002ceb:	je	0x100002d17
100002ced:	mov	rbx, rdi
100002cf0:	mov	rdi, qword ptr [rdi]
100002cf3:	call	0x100002c9a
100002cf8:	mov	r14, rax
100002cfb:	mov	rax, qword ptr [rip + 0x930e] ## literal pool symbol address: ___mb_cur_max
100002d02:	mov	rdi, r14
100002d05:	add	rdi, 0x8
100002d09:	cmp	dword ptr [rax], 0x1
100002d0c:	jne	0x100002d1c
100002d0e:	mov	rdx, qword ptr [rbx]
100002d11:	add	rbx, 0x8
100002d15:	jmp	0x100002d27
100002d17:	xor	r14d, r14d
100002d1a:	jmp	0x100002d2f
100002d1c:	mov	rdx, qword ptr [rbx]
100002d1f:	add	rbx, 0x8
100002d23:	shl	rdx, 0x2
100002d27:	mov	rsi, rbx
100002d2a:	call	0x10000ae52 ## symbol stub for: _memcpy
100002d2f:	mov	rax, r14
100002d32:	pop	rbx
100002d33:	pop	r14
100002d35:	pop	rbp
100002d36:	ret
100002d37:	push	rbp
100002d38:	mov	rbp, rsp
100002d3b:	push	r15
100002d3d:	push	r14
100002d3f:	push	rbx
100002d40:	push	rax
100002d41:	mov	rbx, rsi
100002d44:	test	rdi, rdi
100002d47:	je	0x100002d7d
100002d49:	mov	r15, rdi
100002d4c:	mov	rdi, rbx
100002d4f:	call	0x100002c9a
100002d54:	mov	r14, rax
100002d57:	mov	rax, qword ptr [rip + 0x92b2] ## literal pool symbol address: ___mb_cur_max
100002d5e:	cmp	dword ptr [rax], 0x1
100002d61:	jne	0x100002d87
100002d63:	test	rbx, rbx
100002d66:	je	0x100002d9d
100002d68:	xor	eax, eax
100002d6a:	mov	cl, byte ptr [r15 + 4*rax]
100002d6e:	mov	byte ptr [r14 + rax + 0x8], cl
100002d73:	inc	rax
100002d76:	cmp	rbx, rax
100002d79:	jne	0x100002d6a
100002d7b:	jmp	0x100002d9d
100002d7d:	test	rbx, rbx
100002d80:	je	0x100002dab
100002d82:	xor	r14d, r14d
100002d85:	jmp	0x100002d9d
100002d87:	mov	rdi, r14
100002d8a:	add	rdi, 0x8
100002d8e:	shl	rbx, 0x2
100002d92:	mov	rsi, r15
100002d95:	mov	rdx, rbx
100002d98:	call	0x10000ae52 ## symbol stub for: _memcpy
100002d9d:	mov	rax, r14
100002da0:	add	rsp, 0x8
100002da4:	pop	rbx
100002da5:	pop	r14
100002da7:	pop	r15
100002da9:	pop	rbp
100002daa:	ret
100002dab:	xor	edi, edi
100002dad:	add	rsp, 0x8
100002db1:	pop	rbx
100002db2:	pop	r14
100002db4:	pop	r15
100002db6:	pop	rbp
100002db7:	jmp	0x100002c9a
100002dbc:	push	rbp
100002dbd:	mov	rbp, rsp
100002dc0:	push	r15
100002dc2:	push	r14
100002dc4:	push	r13
100002dc6:	push	r12
100002dc8:	push	rbx
100002dc9:	sub	rsp, 0xa8
100002dd0:	mov	rbx, rsi
100002dd3:	mov	r15, rdi
100002dd6:	mov	rax, qword ptr [rip + 0x923b] ## literal pool symbol address: ___stack_chk_guard
100002ddd:	mov	rax, qword ptr [rax]
100002de0:	mov	qword ptr [rbp - 0x30], rax
100002de4:	mov	rdi, rsi
100002de7:	call	0x100002c9a
100002dec:	mov	r14, rax
100002def:	mov	qword ptr [rbp - 0xc0], r15
100002df6:	test	r15, r15
100002df9:	je	0x100002f37
100002dff:	mov	rax, qword ptr [rip + 0x920a] ## literal pool symbol address: ___mb_cur_max
100002e06:	mov	eax, dword ptr [rax]
100002e08:	cmp	eax, 0x1
100002e0b:	jne	0x100002e28
100002e0d:	mov	rdi, r14
100002e10:	add	rdi, 0x8
100002e14:	mov	rsi, qword ptr [rbp - 0xc0]
100002e1b:	mov	rdx, rbx
100002e1e:	call	0x10000ae52 ## symbol stub for: _memcpy
100002e23:	jmp	0x100002f37
100002e28:	xorps	xmm0, xmm0
100002e2b:	movaps	xmmword ptr [rbp - 0x40], xmm0
100002e2f:	movaps	xmmword ptr [rbp - 0x50], xmm0
100002e33:	movaps	xmmword ptr [rbp - 0x60], xmm0
100002e37:	movaps	xmmword ptr [rbp - 0x70], xmm0
100002e3b:	movaps	xmmword ptr [rbp - 0x80], xmm0
100002e3f:	movaps	xmmword ptr [rbp - 0x90], xmm0
100002e46:	movaps	xmmword ptr [rbp - 0xa0], xmm0
100002e4d:	movaps	xmmword ptr [rbp - 0xb0], xmm0
100002e54:	test	rbx, rbx
100002e57:	je	0x100002f28
100002e5d:	mov	qword ptr [rbp - 0xd0], r14
100002e64:	add	r14, 0x8
100002e68:	mov	qword ptr [rbp - 0xb8], r14
100002e6f:	mov	r12d, 0x1
100002e75:	xor	ecx, ecx
100002e77:	mov	qword ptr [rbp - 0xc8], rcx
100002e7e:	xor	r13d, r13d
100002e81:	cdqe
100002e83:	mov	r15, rbx
100002e86:	sub	rbx, r13
100002e89:	cmp	rbx, rax
100002e8c:	cmovae	rbx, rax
100002e90:	mov	rax, qword ptr [rbp - 0xc0]
100002e97:	lea	r14, [rax + r13]
100002e9b:	mov	rdi, r14
100002e9e:	mov	rsi, rbx
100002ea1:	lea	rdx, [rbp - 0xb0]
100002ea8:	call	0x10000ae2e ## symbol stub for: _mbrlen
100002ead:	mov	rbx, rax
100002eb0:	add	rax, 0x2
100002eb4:	cmp	rax, 0x2
100002eb8:	ja	0x100002ed1
100002eba:	movzx	eax, byte ptr [r14]
100002ebe:	mov	rcx, qword ptr [rbp - 0xb8]
100002ec5:	mov	dword ptr [rcx + 4*r12 - 0x4], eax
100002eca:	mov	ebx, 0x1
100002ecf:	jmp	0x100002efb
100002ed1:	mov	rax, qword ptr [rbp - 0xb8]
100002ed8:	mov	rcx, qword ptr [rbp - 0xc8]
100002edf:	lea	rdi, [rax + rcx]
100002ee3:	mov	rsi, r14
100002ee6:	mov	rdx, rbx
100002ee9:	lea	rcx, [rbp - 0xb0]
100002ef0:	call	0x10000ae34 ## symbol stub for: _mbrtowc
100002ef5:	cmp	rax, -0x2
100002ef9:	jae	0x100002f61
100002efb:	add	r13, rbx
100002efe:	cmp	r13, r15
100002f01:	jae	0x100002f1f
100002f03:	mov	rbx, r15
100002f06:	mov	rax, qword ptr [rip + 0x9103] ## literal pool symbol address: ___mb_cur_max
100002f0d:	mov	eax, dword ptr [rax]
100002f0f:	inc	r12
100002f12:	add	qword ptr [rbp - 0xc8], 0x4
100002f1a:	jmp	0x100002e81
100002f1f:	mov	r14, qword ptr [rbp - 0xd0]
100002f26:	jmp	0x100002f2b
100002f28:	xor	r12d, r12d
100002f2b:	mov	qword ptr [r14], r12
100002f2e:	mov	dword ptr [r14 + 4*r12 + 0x8], 0x0
100002f37:	mov	rax, qword ptr [rip + 0x90da] ## literal pool symbol address: ___stack_chk_guard
100002f3e:	mov	rax, qword ptr [rax]
100002f41:	cmp	rax, qword ptr [rbp - 0x30]
100002f45:	jne	0x100002f5c
100002f47:	mov	rax, r14
100002f4a:	add	rsp, 0xa8
100002f51:	pop	rbx
100002f52:	pop	r12
100002f54:	pop	r13
100002f56:	pop	r14
100002f58:	pop	r15
100002f5a:	pop	rbp
100002f5b:	ret
100002f5c:	call	0x10000ad68 ## symbol stub for: ___stack_chk_fail
100002f61:	call	0x10000a8e8
100002f66:	push	rbp
100002f67:	mov	rbp, rsp
100002f6a:	test	rdi, rdi
100002f6d:	je	0x100002f75
100002f6f:	pop	rbp
100002f70:	jmp	0x100007927
100002f75:	pop	rbp
100002f76:	ret
100002f77:	push	rbp
100002f78:	mov	rbp, rsp
100002f7b:	push	r14
100002f7d:	push	rbx
100002f7e:	mov	r14, rdi
100002f81:	mov	rbx, qword ptr [rsi]
100002f84:	mov	rax, qword ptr [rdi]
100002f87:	cmp	rbx, rax
100002f8a:	cmova	rbx, rax
100002f8e:	mov	qword ptr [rdi], rbx
100002f91:	mov	rax, qword ptr [rip + 0x9078] ## literal pool symbol address: ___mb_cur_max
100002f98:	add	rdi, 0x8
100002f9c:	cmp	dword ptr [rax], 0x1
100002f9f:	jne	0x100002fb8
100002fa1:	add	rsi, 0x8
100002fa5:	mov	rdx, rbx
100002fa8:	call	0x10000ae52 ## symbol stub for: _memcpy
100002fad:	mov	rax, qword ptr [r14]
100002fb0:	mov	byte ptr [r14 + rax + 0x8], 0x0
100002fb6:	jmp	0x100002fd5
100002fb8:	add	rsi, 0x8
100002fbc:	lea	rdx, [4*rbx + 0x4]
100002fc4:	call	0x10000ae52 ## symbol stub for: _memcpy
100002fc9:	mov	rax, qword ptr [r14]
100002fcc:	mov	dword ptr [r14 + 4*rax + 0x8], 0x0
100002fd5:	mov	rax, rbx
100002fd8:	pop	rbx
100002fd9:	pop	r14
100002fdb:	pop	rbp
100002fdc:	ret
100002fdd:	push	rbp
100002fde:	mov	rbp, rsp
100002fe1:	push	rbx
100002fe2:	push	rax
100002fe3:	mov	rax, rdx
100002fe6:	mov	rbx, rdi
100002fe9:	mov	rdx, qword ptr [rsi]
100002fec:	mov	rcx, qword ptr [rdi]
100002fef:	cmp	rdx, rcx
100002ff2:	cmova	rdx, rcx
100002ff6:	cmp	rdx, rax
100002ff9:	cmova	rdx, rax
100002ffd:	mov	qword ptr [rdi], rdx
100003000:	mov	rax, qword ptr [rip + 0x9009] ## literal pool symbol address: ___mb_cur_max
100003007:	add	rdi, 0x8
10000300b:	cmp	dword ptr [rax], 0x1
10000300e:	jne	0x100003023
100003010:	add	rsi, 0x8
100003014:	call	0x10000ae52 ## symbol stub for: _memcpy
100003019:	mov	rax, qword ptr [rbx]
10000301c:	mov	byte ptr [rbx + rax + 0x8], 0x0
100003021:	jmp	0x10000303f
100003023:	add	rsi, 0x8
100003027:	lea	rdx, [4*rdx + 0x4]
10000302f:	call	0x10000ae52 ## symbol stub for: _memcpy
100003034:	mov	rax, qword ptr [rbx]
100003037:	mov	dword ptr [rbx + 4*rax + 0x8], 0x0
10000303f:	mov	rax, rbx
100003042:	add	rsp, 0x8
100003046:	pop	rbx
100003047:	pop	rbp
100003048:	ret
100003049:	push	rbp
10000304a:	mov	rbp, rsp
10000304d:	push	rbx
10000304e:	push	rax
10000304f:	mov	rax, rdx
100003052:	mov	rbx, rdi
100003055:	mov	rdx, qword ptr [rsi]
100003058:	sub	rdx, rax
10000305b:	jbe	0x100003095
10000305d:	mov	rdi, qword ptr [rbx]
100003060:	cmp	rdx, rdi
100003063:	cmova	rdx, rdi
100003067:	cmp	rdx, rcx
10000306a:	cmova	rdx, rcx
10000306e:	mov	qword ptr [rbx], rdx
100003071:	mov	rcx, qword ptr [rip + 0x8f98] ## literal pool symbol address: ___mb_cur_max
100003078:	lea	rdi, [rbx + 0x8]
10000307c:	cmp	dword ptr [rcx], 0x1
10000307f:	jne	0x1000030a5
100003081:	lea	rsi, [rsi + rax + 0x8]
100003086:	call	0x10000ae52 ## symbol stub for: _memcpy
10000308b:	mov	rax, qword ptr [rbx]
10000308e:	mov	byte ptr [rbx + rax + 0x8], 0x0
100003093:	jmp	0x1000030be
100003095:	mov	dword ptr [rbx + 0x8], 0x0
10000309c:	mov	qword ptr [rbx], 0x0
1000030a3:	jmp	0x1000030be
1000030a5:	lea	rsi, [rsi + 4*rax + 0x8]
1000030aa:	shl	rdx, 0x2
1000030ae:	call	0x10000ae52 ## symbol stub for: _memcpy
1000030b3:	mov	rax, qword ptr [rbx]
1000030b6:	mov	dword ptr [rbx + 4*rax + 0x8], 0x0
1000030be:	mov	rax, rbx
1000030c1:	add	rsp, 0x8
1000030c5:	pop	rbx
1000030c6:	pop	rbp
1000030c7:	ret
1000030c8:	push	rbp
1000030c9:	mov	rbp, rsp
1000030cc:	push	r15
1000030ce:	push	r14
1000030d0:	push	r13
1000030d2:	push	r12
1000030d4:	push	rbx
1000030d5:	push	rax
1000030d6:	mov	r14, rsi
1000030d9:	mov	r15, rdi
1000030dc:	mov	rax, qword ptr [rip + 0x8f2d] ## literal pool symbol address: ___mb_cur_max
1000030e3:	cmp	dword ptr [rax], 0x1
1000030e6:	jne	0x10000311e
1000030e8:	mov	r12, qword ptr [r15]
1000030eb:	add	r15, 0x8
1000030ef:	test	dl, dl
1000030f1:	je	0x10000319b
1000030f7:	inc	r12
1000030fa:	mov	edx, 0x1
1000030ff:	mov	rdi, r15
100003102:	mov	rsi, r12
100003105:	mov	rcx, r14
100003108:	call	0x10000adf8 ## symbol stub for: _fwrite
10000310d:	mov	rbx, r12
100003110:	test	rax, rax
100003113:	jne	0x1000031dc
100003119:	call	0x10000a8fd
10000311e:	xor	eax, eax
100003120:	test	dl, dl
100003122:	mov	edi, 0xa
100003127:	cmovne	edi, eax
10000312a:	call	0x10000ad80 ## symbol stub for: _btowc
10000312f:	cmp	qword ptr [r15], 0x0
100003133:	je	0x1000031c4
100003139:	mov	dword ptr [rbp - 0x2c], eax
10000313c:	lea	r13, [rip + 0x837d]
100003143:	lea	r12, [rip + 0x8386]
10000314a:	xor	ebx, ebx
10000314c:	cmp	dword ptr [r15 + 4*rbx + 0x8], 0x0
100003152:	je	0x100003172
100003154:	lea	rdx, [r15 + 4*rbx + 0x8]
100003159:	mov	rdi, r14
10000315c:	mov	rsi, r12
10000315f:	xor	eax, eax
100003161:	call	0x10000adf2 ## symbol stub for: _fwprintf
100003166:	test	eax, eax
100003168:	jle	0x1000031ee
10000316e:	mov	ecx, eax
100003170:	jmp	0x10000318b
100003172:	mov	rdi, r14
100003175:	mov	rsi, r13
100003178:	xor	edx, edx
10000317a:	xor	eax, eax
10000317c:	call	0x10000adf2 ## symbol stub for: _fwprintf
100003181:	mov	ecx, 0x1
100003186:	cmp	eax, 0x1
100003189:	jne	0x1000031f3
10000318b:	add	rbx, rcx
10000318e:	cmp	rbx, qword ptr [r15]
100003191:	jb	0x10000314c
100003193:	inc	rbx
100003196:	mov	eax, dword ptr [rbp - 0x2c]
100003199:	jmp	0x1000031c9
10000319b:	mov	byte ptr [r15 + r12], 0xa
1000031a0:	lea	rbx, [r12 + 0x1]
1000031a5:	mov	edx, 0x1
1000031aa:	mov	rdi, r15
1000031ad:	mov	rsi, rbx
1000031b0:	mov	rcx, r14
1000031b3:	call	0x10000adf8 ## symbol stub for: _fwrite
1000031b8:	test	rax, rax
1000031bb:	je	0x1000031f8
1000031bd:	mov	byte ptr [r15 + r12], 0x0
1000031c2:	jmp	0x1000031dc
1000031c4:	mov	ebx, 0x1
1000031c9:	lea	rsi, [rip + 0x82f0]
1000031d0:	mov	rdi, r14
1000031d3:	mov	edx, eax
1000031d5:	xor	eax, eax
1000031d7:	call	0x10000adf2 ## symbol stub for: _fwprintf
1000031dc:	mov	rax, rbx
1000031df:	add	rsp, 0x8
1000031e3:	pop	rbx
1000031e4:	pop	r12
1000031e6:	pop	r13
1000031e8:	pop	r14
1000031ea:	pop	r15
1000031ec:	pop	rbp
1000031ed:	ret
1000031ee:	call	0x10000a92d
1000031f3:	call	0x10000a91d
1000031f8:	call	0x10000a90d
1000031fd:	push	rbp
1000031fe:	mov	rbp, rsp
100003201:	push	r15
100003203:	push	r14
100003205:	push	r13
100003207:	push	r12
100003209:	push	rbx
10000320a:	push	rax
10000320b:	mov	r13, rcx
10000320e:	mov	r15, rsi
100003211:	mov	r14, rdi
100003214:	test	dl, dl
100003216:	je	0x10000324a
100003218:	xor	edi, edi
10000321a:	call	0x10000ad80 ## symbol stub for: _btowc
10000321f:	mov	r12d, eax
100003222:	mov	qword ptr [r15], 0x0
100003229:	mov	rdi, r14
10000322c:	call	0x10000adaa ## symbol stub for: _feof
100003231:	test	eax, eax
100003233:	je	0x1000032d6
100003239:	xor	eax, eax
10000323b:	add	rsp, 0x8
10000323f:	pop	rbx
100003240:	pop	r12
100003242:	pop	r13
100003244:	pop	r14
100003246:	pop	r15
100003248:	pop	rbp
100003249:	ret
10000324a:	mov	edi, 0xa
10000324f:	call	0x10000ad80 ## symbol stub for: _btowc
100003254:	mov	r12d, eax
100003257:	mov	rax, qword ptr [rip + 0x8db2] ## literal pool symbol address: ___mb_cur_max
10000325e:	mov	eax, dword ptr [rax]
100003260:	cmp	eax, 0x2
100003263:	jl	0x10000329b
100003265:	mov	rdi, r14
100003268:	mov	rsi, r15
10000326b:	call	0x10000adce ## symbol stub for: _fgetwln
100003270:	test	rax, rax
100003273:	je	0x100003416
100003279:	mov	rsi, qword ptr [r15]
10000327c:	test	rsi, rsi
10000327f:	je	0x10000342b
100003285:	cmp	dword ptr [rax + 4*rsi - 0x4], r12d
10000328a:	jne	0x10000342d
100003290:	dec	rsi
100003293:	mov	qword ptr [r15], rsi
100003296:	jmp	0x10000342d
10000329b:	cmp	eax, 0x1
10000329e:	jne	0x100003222
1000032a0:	mov	rdi, r14
1000032a3:	mov	rsi, r15
1000032a6:	call	0x10000adc2 ## symbol stub for: _fgetln
1000032ab:	test	rax, rax
1000032ae:	je	0x100003432
1000032b4:	mov	rsi, qword ptr [r15]
1000032b7:	test	rsi, rsi
1000032ba:	je	0x10000346b
1000032c0:	cmp	byte ptr [rax + rsi - 0x1], 0xa
1000032c5:	jne	0x10000346d
1000032cb:	dec	rsi
1000032ce:	mov	qword ptr [r15], rsi
1000032d1:	jmp	0x10000346d
1000032d6:	mov	rax, qword ptr [r13 + 0x8]
1000032da:	cmp	rax, 0x3
1000032de:	jae	0x100003302
1000032e0:	lea	rcx, [rax + 0x100]
1000032e7:	mov	qword ptr [r13 + 0x8], rcx
1000032eb:	mov	rdi, qword ptr [r13]
1000032ef:	lea	rsi, [4*rax + 0x400]
1000032f7:	call	0x100007938
1000032fc:	mov	qword ptr [r13], rax
100003300:	jmp	0x100003306
100003302:	mov	rax, qword ptr [r13]
100003306:	mov	rcx, qword ptr [r15]
100003309:	mov	dword ptr [rax + 4*rcx], 0x0
100003310:	mov	rax, qword ptr [rip + 0x8cf9] ## literal pool symbol address: ___mb_cur_max
100003317:	mov	ebx, dword ptr [rax]
100003319:	mov	rdi, r14
10000331c:	call	0x10000adaa ## symbol stub for: _feof
100003321:	cmp	ebx, 0x1
100003324:	jne	0x10000339e
100003326:	test	eax, eax
100003328:	jne	0x100003451
10000332e:	mov	rdi, r14
100003331:	call	0x10000adbc ## symbol stub for: _fgetc
100003336:	cmp	eax, -0x1
100003339:	je	0x100003447
10000333f:	mov	ebx, eax
100003341:	cmp	eax, r12d
100003344:	je	0x100003451
10000334a:	mov	rdx, qword ptr [r15]
10000334d:	lea	rcx, [rdx + 0x1]
100003351:	mov	rax, qword ptr [r13 + 0x8]
100003355:	cmp	rcx, rax
100003358:	jae	0x100003360
10000335a:	mov	rax, qword ptr [r13]
10000335e:	jmp	0x100003387
100003360:	lea	rcx, [rax + 0x100]
100003367:	mov	qword ptr [r13 + 0x8], rcx
10000336b:	mov	rdi, qword ptr [r13]
10000336f:	lea	rsi, [4*rax + 0x400]
100003377:	call	0x100007938
10000337c:	mov	qword ptr [r13], rax
100003380:	mov	rdx, qword ptr [r15]
100003383:	lea	rcx, [rdx + 0x1]
100003387:	mov	dword ptr [rax + 4*rdx], ebx
10000338a:	mov	qword ptr [r15], rcx
10000338d:	mov	dword ptr [rax + 4*rcx], 0x0
100003394:	mov	rdi, r14
100003397:	call	0x10000adaa ## symbol stub for: _feof
10000339c:	jmp	0x100003326
10000339e:	test	eax, eax
1000033a0:	jne	0x100003451
1000033a6:	mov	rdi, r14
1000033a9:	call	0x10000adc8 ## symbol stub for: _fgetwc
1000033ae:	cmp	eax, -0x1
1000033b1:	je	0x100003447
1000033b7:	mov	ebx, eax
1000033b9:	cmp	eax, r12d
1000033bc:	je	0x100003451
1000033c2:	mov	rdx, qword ptr [r15]
1000033c5:	lea	rcx, [rdx + 0x1]
1000033c9:	mov	rax, qword ptr [r13 + 0x8]
1000033cd:	cmp	rcx, rax
1000033d0:	jae	0x1000033d8
1000033d2:	mov	rax, qword ptr [r13]
1000033d6:	jmp	0x1000033ff
1000033d8:	lea	rcx, [rax + 0x100]
1000033df:	mov	qword ptr [r13 + 0x8], rcx
1000033e3:	mov	rdi, qword ptr [r13]
1000033e7:	lea	rsi, [4*rax + 0x400]
1000033ef:	call	0x100007938
1000033f4:	mov	qword ptr [r13], rax
1000033f8:	mov	rdx, qword ptr [r15]
1000033fb:	lea	rcx, [rdx + 0x1]
1000033ff:	mov	dword ptr [rax + 4*rdx], ebx
100003402:	mov	qword ptr [r15], rcx
100003405:	mov	dword ptr [rax + 4*rcx], 0x0
10000340c:	mov	rdi, r14
10000340f:	call	0x10000adaa ## symbol stub for: _feof
100003414:	jmp	0x10000339e
100003416:	mov	rdi, r14
100003419:	call	0x10000adaa ## symbol stub for: _feof
10000341e:	test	eax, eax
100003420:	jne	0x100003239
100003426:	call	0x10000a93d
10000342b:	xor	esi, esi
10000342d:	mov	rdi, rax
100003430:	jmp	0x100003458
100003432:	mov	rdi, r14
100003435:	call	0x10000adaa ## symbol stub for: _feof
10000343a:	test	eax, eax
10000343c:	jne	0x100003239
100003442:	call	0x10000a94d
100003447:	cmp	qword ptr [r15], 0x0
10000344b:	je	0x100003239
100003451:	mov	rdi, qword ptr [r13]
100003455:	mov	rsi, qword ptr [r15]
100003458:	add	rsp, 0x8
10000345c:	pop	rbx
10000345d:	pop	r12
10000345f:	pop	r13
100003461:	pop	r14
100003463:	pop	r15
100003465:	pop	rbp
100003466:	jmp	0x100002d37
10000346b:	xor	esi, esi
10000346d:	mov	rdi, rax
100003470:	add	rsp, 0x8
100003474:	pop	rbx
100003475:	pop	r12
100003477:	pop	r13
100003479:	pop	r14
10000347b:	pop	r15
10000347d:	pop	rbp
10000347e:	jmp	0x100002dbc
100003483:	push	rbp
100003484:	mov	rbp, rsp
100003487:	push	r15
100003489:	push	r14
10000348b:	push	rbx
10000348c:	push	rax
10000348d:	mov	rbx, qword ptr [rdi]
100003490:	mov	r15, qword ptr [rsi]
100003493:	sub	rbx, rdx
100003496:	jbe	0x1000034ce
100003498:	mov	eax, 0x1
10000349d:	sub	r15, rdx
1000034a0:	jbe	0x10000350e
1000034a2:	cmp	r15, rbx
1000034a5:	mov	r14, rbx
1000034a8:	cmovb	r14, r15
1000034ac:	cmp	r14, rcx
1000034af:	cmova	r14, rcx
1000034b3:	mov	rax, qword ptr [rip + 0x8b56] ## literal pool symbol address: ___mb_cur_max
1000034ba:	cmp	dword ptr [rax], 0x1
1000034bd:	jne	0x1000034d5
1000034bf:	lea	rdi, [rdi + rdx + 0x8]
1000034c4:	lea	rsi, [rsi + rdx + 0x8]
1000034c9:	mov	rdx, r14
1000034cc:	jmp	0x1000034e7
1000034ce:	cmp	rdx, r15
1000034d1:	sbb	eax, eax
1000034d3:	jmp	0x10000350e
1000034d5:	lea	rdi, [rdi + 4*rdx + 0x8]
1000034da:	lea	rsi, [rsi + 4*rdx + 0x8]
1000034df:	lea	rdx, [4*r14]
1000034e7:	call	0x10000ae4c ## symbol stub for: _memcmp
1000034ec:	test	eax, eax
1000034ee:	jne	0x10000350e
1000034f0:	cmp	rbx, r15
1000034f3:	jae	0x1000034ff
1000034f5:	mov	eax, 0xffffffff
1000034fa:	cmp	rbx, r14
1000034fd:	jb	0x10000350e
1000034ff:	xor	eax, eax
100003501:	cmp	r15, r14
100003504:	jae	0x10000350e
100003506:	xor	eax, eax
100003508:	cmp	r15, rbx
10000350b:	setb	al
10000350e:	add	rsp, 0x8
100003512:	pop	rbx
100003513:	pop	r14
100003515:	pop	r15
100003517:	pop	rbp
100003518:	ret
100003519:	push	rbp
10000351a:	mov	rbp, rsp
10000351d:	push	r14
10000351f:	push	rbx
100003520:	mov	r14, qword ptr [rdi]
100003523:	mov	rbx, qword ptr [rsi]
100003526:	sub	r14, rdx
100003529:	sub	rbx, rdx
10000352c:	cmp	rbx, r14
10000352f:	mov	rcx, r14
100003532:	cmovb	rcx, rbx
100003536:	call	0x100003483
10000353b:	test	eax, eax
10000353d:	jne	0x100003551
10000353f:	mov	eax, 0xffffffff
100003544:	cmp	r14, rbx
100003547:	jb	0x100003551
100003549:	xor	eax, eax
10000354b:	cmp	rbx, r14
10000354e:	setb	al
100003551:	pop	rbx
100003552:	pop	r14
100003554:	pop	rbp
100003555:	ret
100003556:	push	rbp
100003557:	mov	rbp, rsp
10000355a:	test	rdx, rdx
10000355d:	je	0x10000359e
10000355f:	mov	rax, qword ptr [rip + 0x8aaa] ## literal pool symbol address: ___mb_cur_max
100003566:	mov	r8d, dword ptr [rax]
100003569:	xor	eax, eax
10000356b:	cmp	r8d, 0x1
10000356f:	setne	al
100003572:	lea	r9, [rax + 2*rax + 0x1]
100003577:	xor	ecx, ecx
100003579:	cmp	r8d, 0x1
10000357d:	jne	0x10000358a
10000357f:	movzx	eax, byte ptr [rdi + rcx]
100003583:	movzx	r10d, byte ptr [rsi + rcx]
100003588:	jmp	0x100003591
10000358a:	mov	eax, dword ptr [rdi + rcx]
10000358d:	mov	r10d, dword ptr [rsi + rcx]
100003591:	sub	eax, r10d
100003594:	jne	0x1000035a0
100003596:	add	rcx, r9
100003599:	dec	rdx
10000359c:	jne	0x100003579
10000359e:	xor	eax, eax
1000035a0:	pop	rbp
1000035a1:	ret
1000035a2:	push	rbp
1000035a3:	mov	rbp, rsp
1000035a6:	push	r15
1000035a8:	push	r14
1000035aa:	push	r13
1000035ac:	push	r12
1000035ae:	push	rbx
1000035af:	sub	rsp, 0x58
1000035b3:	mov	r9, qword ptr [rdi]
1000035b6:	mov	r8, qword ptr [rsi]
1000035b9:	sub	r9, rdx
1000035bc:	jbe	0x100003615
1000035be:	mov	ebx, 0x1
1000035c3:	sub	r8, rdx
1000035c6:	jbe	0x1000037ce
1000035cc:	mov	rax, qword ptr [rip + 0x8a3d] ## literal pool symbol address: ___mb_cur_max
1000035d3:	cmp	dword ptr [rax], 0x1
1000035d6:	jne	0x10000361f
1000035d8:	lea	r13, [rdi + rdx + 0x8]
1000035dd:	lea	r12, [rsi + rdx + 0x8]
1000035e2:	cmp	byte ptr [rip + 0xd423], 0x0
1000035e9:	je	0x1000037d8
1000035ef:	mov	rdi, r13
1000035f2:	mov	rsi, r12
1000035f5:	cmp	r9, r8
1000035f8:	jbe	0x1000038a3
1000035fe:	mov	rdx, r8
100003601:	call	0x10000ae4c ## symbol stub for: _memcmp
100003606:	test	eax, eax
100003608:	mov	ebx, 0x1
10000360d:	cmovne	ebx, eax
100003610:	jmp	0x1000038c7
100003615:	cmp	rdx, r8
100003618:	sbb	ebx, ebx
10000361a:	jmp	0x1000038c7
10000361f:	cmp	r9, r8
100003622:	mov	rcx, r9
100003625:	cmova	rcx, r8
100003629:	test	rcx, rcx
10000362c:	je	0x1000037bc
100003632:	lea	rbx, [rsi + 4*rdx + 0xc]
100003637:	lea	r10, [rsi + 4*rdx + 0x8]
10000363c:	lea	rsi, [rdi + 4*rdx + 0xc]
100003641:	lea	rdi, [rdi + 4*rdx + 0x8]
100003646:	mov	rdx, rcx
100003649:	neg	rdx
10000364c:	xor	r13d, r13d
10000364f:	cmp	r13, rcx
100003652:	jae	0x1000037bc
100003658:	lea	r14, [rbx + 4*r13]
10000365c:	lea	r15, [rsi + 4*r13]
100003660:	lea	r12, [r13 + 0x1]
100003664:	cmp	dword ptr [rdi + 4*r13], 0x0
100003669:	mov	eax, dword ptr [r10 + 4*r13]
10000366d:	jne	0x10000368f
10000366f:	test	eax, eax
100003671:	jne	0x1000038c2
100003677:	inc	r13
10000367a:	add	r14, 0x4
10000367e:	add	r15, 0x4
100003682:	inc	r12
100003685:	cmp	rcx, r13
100003688:	jne	0x100003664
10000368a:	jmp	0x1000037bc
10000368f:	test	eax, eax
100003691:	je	0x1000037ce
100003697:	mov	qword ptr [rbp - 0x70], rdx
10000369b:	mov	qword ptr [rbp - 0x50], rdi
10000369f:	mov	qword ptr [rbp - 0x78], rsi
1000036a3:	mov	qword ptr [rbp - 0x30], r10
1000036a7:	mov	qword ptr [rbp - 0x60], rbx
1000036ab:	mov	qword ptr [rbp - 0x68], rcx
1000036af:	mov	qword ptr [rbp - 0x38], r9
1000036b3:	mov	qword ptr [rbp - 0x40], r8
1000036b7:	lea	rbx, [r15 - 0x4]
1000036bb:	lea	rax, [r14 - 0x4]
1000036bf:	mov	qword ptr [rbp - 0x48], rax
1000036c3:	call	0x10000ad56 ## symbol stub for: ___error
1000036c8:	mov	dword ptr [rax], 0x0
1000036ce:	mov	qword ptr [rbp - 0x58], rbx
1000036d2:	mov	rdi, rbx
1000036d5:	mov	rsi, qword ptr [rbp - 0x48]
1000036d9:	call	0x10000afc6 ## symbol stub for: _wcscoll
1000036de:	mov	ebx, eax
1000036e0:	call	0x10000ad56 ## symbol stub for: ___error
1000036e5:	cmp	dword ptr [rax], 0x5c
1000036e8:	jne	0x10000375a
1000036ea:	call	0x10000ad56 ## symbol stub for: ___error
1000036ef:	mov	dword ptr [rax], 0x0
1000036f5:	mov	rdi, qword ptr [rbp - 0x58]
1000036f9:	mov	rsi, qword ptr [rbp - 0x48]
1000036fd:	call	0x10000afc0 ## symbol stub for: _wcscmp
100003702:	mov	ebx, eax
100003704:	call	0x10000ad56 ## symbol stub for: ___error
100003709:	cmp	dword ptr [rax], 0x0
10000370c:	je	0x10000375a
10000370e:	mov	rdi, qword ptr [rbp - 0x50]
100003712:	mov	ebx, dword ptr [rdi + 4*r13]
100003716:	mov	r10, qword ptr [rbp - 0x30]
10000371a:	mov	eax, dword ptr [r10 + 4*r13]
10000371e:	test	eax, eax
100003720:	sete	dl
100003723:	test	ebx, ebx
100003725:	mov	r8, qword ptr [rbp - 0x40]
100003729:	mov	r9, qword ptr [rbp - 0x38]
10000372d:	je	0x100003753
10000372f:	xor	esi, esi
100003731:	test	dl, 0x1
100003734:	jne	0x1000037ce
10000373a:	sub	ebx, eax
10000373c:	jne	0x10000376a
10000373e:	mov	ebx, dword ptr [r15 + rsi]
100003742:	mov	eax, dword ptr [r14 + rsi]
100003746:	test	eax, eax
100003748:	sete	dl
10000374b:	add	rsi, 0x4
10000374f:	test	ebx, ebx
100003751:	jne	0x100003731
100003753:	movzx	ebx, dl
100003756:	dec	ebx
100003758:	jmp	0x10000376a
10000375a:	mov	r8, qword ptr [rbp - 0x40]
10000375e:	mov	r9, qword ptr [rbp - 0x38]
100003762:	mov	r10, qword ptr [rbp - 0x30]
100003766:	mov	rdi, qword ptr [rbp - 0x50]
10000376a:	test	ebx, ebx
10000376c:	mov	rsi, qword ptr [rbp - 0x78]
100003770:	mov	rdx, qword ptr [rbp - 0x70]
100003774:	jne	0x1000038c7
10000377a:	mov	rcx, qword ptr [rbp - 0x68]
10000377e:	cmp	r13, rcx
100003781:	mov	rbx, qword ptr [rbp - 0x60]
100003785:	jae	0x1000037bc
100003787:	mov	r13, r12
10000378a:	cmp	dword ptr [rdi + 4*r13 - 0x4], 0x0
100003790:	mov	eax, dword ptr [r10 + 4*r13 - 0x4]
100003795:	je	0x1000037ab
100003797:	test	eax, eax
100003799:	je	0x1000037ce
10000379b:	lea	rax, [rdx + r13 + 0x1]
1000037a0:	inc	r13
1000037a3:	cmp	rax, 0x1
1000037a7:	jne	0x10000378a
1000037a9:	jmp	0x1000037bc
1000037ab:	test	eax, eax
1000037ad:	jne	0x1000038c2
1000037b3:	cmp	r13, rcx
1000037b6:	jb	0x10000364f
1000037bc:	xor	eax, eax
1000037be:	cmp	r9, r8
1000037c1:	seta	al
1000037c4:	mov	ebx, 0xffffffff
1000037c9:	jmp	0x1000038bd
1000037ce:	mov	ebx, 0x1
1000037d3:	jmp	0x1000038c7
1000037d8:	cmp	r9, r8
1000037db:	mov	r14, r9
1000037de:	cmova	r14, r8
1000037e2:	test	r14, r14
1000037e5:	je	0x100003891
1000037eb:	lea	rcx, [rdi + rdx + 0x9]
1000037f0:	lea	rdx, [r14 - 0x1]
1000037f4:	xor	r15d, r15d
1000037f7:	cmp	r15, r14
1000037fa:	jae	0x100003891
100003800:	cmp	byte ptr [r13 + r15], 0x0
100003806:	mov	al, byte ptr [r12 + r15]
10000380a:	jne	0x10000381e
10000380c:	test	al, al
10000380e:	jne	0x1000038c2
100003814:	inc	r15
100003817:	cmp	r14, r15
10000381a:	jne	0x100003800
10000381c:	jmp	0x100003891
10000381e:	test	al, al
100003820:	je	0x1000038c7
100003826:	mov	qword ptr [rbp - 0x30], rdx
10000382a:	mov	qword ptr [rbp - 0x48], rcx
10000382e:	mov	qword ptr [rbp - 0x38], r9
100003832:	mov	qword ptr [rbp - 0x40], r8
100003836:	lea	rdi, [r13 + r15]
10000383b:	lea	rsi, [r12 + r15]
10000383f:	call	0x10000af60 ## symbol stub for: _strcoll
100003844:	test	eax, eax
100003846:	jne	0x1000038d8
10000384c:	cmp	r15, r14
10000384f:	mov	r8, qword ptr [rbp - 0x40]
100003853:	mov	r9, qword ptr [rbp - 0x38]
100003857:	mov	rcx, qword ptr [rbp - 0x48]
10000385b:	mov	rdx, qword ptr [rbp - 0x30]
10000385f:	jae	0x100003891
100003861:	cmp	byte ptr [r12 + r15], 0x0
100003866:	je	0x1000038c7
100003868:	cmp	rdx, r15
10000386b:	je	0x100003891
10000386d:	lea	rax, [r15 + 0x1]
100003871:	cmp	byte ptr [rcx + r15], 0x0
100003876:	mov	r15, rax
100003879:	jne	0x100003861
10000387b:	cmp	byte ptr [r12 + rax], 0x0
100003880:	jne	0x1000038c2
100003882:	inc	rax
100003885:	mov	r15, rax
100003888:	cmp	rax, r14
10000388b:	jb	0x1000037f7
100003891:	xor	edx, edx
100003893:	cmp	r9, r8
100003896:	seta	dl
100003899:	mov	eax, 0xffffffff
10000389e:	cmovae	eax, edx
1000038a1:	jmp	0x1000038c9
1000038a3:	mov	rdx, r9
1000038a6:	mov	r14, r8
1000038a9:	mov	r15, r9
1000038ac:	call	0x10000ae4c ## symbol stub for: _memcmp
1000038b1:	xor	ebx, ebx
1000038b3:	cmp	eax, 0x1
1000038b6:	sbb	ebx, ebx
1000038b8:	or	ebx, eax
1000038ba:	cmp	r15, r14
1000038bd:	cmovae	ebx, eax
1000038c0:	jmp	0x1000038c7
1000038c2:	mov	ebx, 0xffffffff
1000038c7:	mov	eax, ebx
1000038c9:	add	rsp, 0x58
1000038cd:	pop	rbx
1000038ce:	pop	r12
1000038d0:	pop	r13
1000038d2:	pop	r14
1000038d4:	pop	r15
1000038d6:	pop	rbp
1000038d7:	ret
1000038d8:	mov	ebx, eax
1000038da:	jmp	0x1000038c7
1000038dc:	push	rbp
1000038dd:	mov	rbp, rsp
1000038e0:	push	r15
1000038e2:	push	r14
1000038e4:	push	r12
1000038e6:	push	rbx
1000038e7:	sub	rsp, 0x10
1000038eb:	mov	r14, rsi
1000038ee:	mov	rbx, rdi
1000038f1:	mov	rax, qword ptr [rip + 0x8718] ## literal pool symbol address: ___mb_cur_max
1000038f8:	cmp	dword ptr [rax], 0x1
1000038fb:	jne	0x100003946
1000038fd:	mov	rax, qword ptr [rbx]
100003900:	lea	r15, [rbx + rax + 0x8]
100003905:	mov	qword ptr [rbp - 0x28], 0x0
10000390d:	add	rbx, 0x7
100003911:	lea	r12, [rip + 0xcb10]
100003918:	movzx	edi, byte ptr [rbx + 0x1]
10000391c:	inc	rbx
10000391f:	call	qword ptr [r12]
100003923:	cmp	rbx, r15
100003926:	jae	0x10000392c
100003928:	test	eax, eax
10000392a:	jne	0x100003918
10000392c:	movzx	edi, byte ptr [rbx]
10000392f:	test	dil, dil
100003932:	js	0x1000039ae
100003934:	mov	rcx, qword ptr [rip + 0x86c5] ## literal pool symbol address: __DefaultRuneLocale
10000393b:	mov	eax, 0x40000
100003940:	and	eax, dword ptr [rcx + 4*rdi + 0x3c]
100003944:	jmp	0x1000039b8
100003946:	mov	rax, qword ptr [rbx]
100003949:	lea	r15, [rbx + 4*rax + 0x8]
10000394e:	mov	qword ptr [rbp - 0x28], 0x0
100003956:	add	rbx, 0x4
10000395a:	lea	r12, [rip + 0xcacf]
100003961:	mov	edi, dword ptr [rbx + 0x4]
100003964:	add	rbx, 0x4
100003968:	call	qword ptr [r12]
10000396c:	cmp	rbx, r15
10000396f:	jae	0x100003975
100003971:	test	eax, eax
100003973:	jne	0x100003961
100003975:	mov	edi, dword ptr [rbx]
100003977:	cmp	rdi, 0x7f
10000397b:	ja	0x10000398f
10000397d:	mov	rcx, qword ptr [rip + 0x867c] ## literal pool symbol address: __DefaultRuneLocale
100003984:	mov	eax, 0x40000
100003989:	and	eax, dword ptr [rcx + 4*rdi + 0x3c]
10000398d:	jmp	0x100003999
10000398f:	mov	esi, 0x40000
100003994:	call	0x10000ad5c ## symbol stub for: ___maskrune
100003999:	test	eax, eax
10000399b:	je	0x1000039d6
10000399d:	lea	r15, [rbp - 0x28]
1000039a1:	mov	rdi, rbx
1000039a4:	mov	rsi, r15
1000039a7:	call	0x10000afd2 ## symbol stub for: _wcstod
1000039ac:	jmp	0x1000039cb
1000039ae:	mov	esi, 0x40000
1000039b3:	call	0x10000ad5c ## symbol stub for: ___maskrune
1000039b8:	test	eax, eax
1000039ba:	je	0x1000039d6
1000039bc:	lea	r15, [rbp - 0x28]
1000039c0:	mov	rdi, rbx
1000039c3:	mov	rsi, r15
1000039c6:	call	0x10000af84 ## symbol stub for: _strtod
1000039cb:	cmp	qword ptr [r15], rbx
1000039ce:	je	0x1000039d6
1000039d0:	mov	byte ptr [r14], 0x0
1000039d4:	jmp	0x1000039dd
1000039d6:	mov	byte ptr [r14], 0x1
1000039da:	xorps	xmm0, xmm0
1000039dd:	add	rsp, 0x10
1000039e1:	pop	rbx
1000039e2:	pop	r12
1000039e4:	pop	r14
1000039e6:	pop	r15
1000039e8:	pop	rbp
1000039e9:	ret
1000039ea:	push	rbp
1000039eb:	mov	rbp, rsp
1000039ee:	push	r15
1000039f0:	push	r14
1000039f2:	push	rbx
1000039f3:	push	rax
1000039f4:	mov	rbx, rdi
1000039f7:	mov	rax, qword ptr [rip + 0x8612] ## literal pool symbol address: ___mb_cur_max
1000039fe:	cmp	dword ptr [rax], 0x1
100003a01:	jne	0x100003a54
100003a03:	mov	rax, qword ptr [rbx]
100003a06:	lea	r14, [rbx + rax + 0x8]
100003a0b:	add	rbx, 0x7
100003a0f:	lea	r15, [rip + 0xca12]
100003a16:	movzx	edi, byte ptr [rbx + 0x1]
100003a1a:	inc	rbx
100003a1d:	call	qword ptr [r15]
100003a20:	cmp	rbx, r14
100003a23:	jae	0x100003a29
100003a25:	test	eax, eax
100003a27:	jne	0x100003a16
100003a29:	mov	r14d, 0xb
100003a2f:	mov	r15, qword ptr [rip + 0xceca]
100003a36:	mov	rsi, qword ptr [r15 + 8*r14]
100003a3a:	test	rsi, rsi
100003a3d:	je	0x100003a4c
100003a3f:	mov	rdi, rbx
100003a42:	call	0x10000af7e ## symbol stub for: _strstr
100003a47:	cmp	rax, rbx
100003a4a:	je	0x100003aa9
100003a4c:	add	r14, -0x1
100003a50:	jb	0x100003a36
100003a52:	jmp	0x100003aa3
100003a54:	mov	rax, qword ptr [rbx]
100003a57:	lea	r14, [rbx + 4*rax + 0x8]
100003a5c:	add	rbx, 0x4
100003a60:	lea	r15, [rip + 0xc9c9]
100003a67:	mov	edi, dword ptr [rbx + 0x4]
100003a6a:	add	rbx, 0x4
100003a6e:	call	qword ptr [r15]
100003a71:	cmp	rbx, r14
100003a74:	jae	0x100003a7a
100003a76:	test	eax, eax
100003a78:	jne	0x100003a67
100003a7a:	mov	r14d, 0xb
100003a80:	mov	rax, qword ptr [rip + 0xce81]
100003a87:	mov	rsi, qword ptr [rax + 8*r14]
100003a8b:	test	rsi, rsi
100003a8e:	je	0x100003a9d
100003a90:	mov	rdi, rbx
100003a93:	call	0x10000afcc ## symbol stub for: _wcsstr
100003a98:	cmp	rax, rbx
100003a9b:	je	0x100003aa9
100003a9d:	add	r14, -0x1
100003aa1:	jb	0x100003a80
100003aa3:	mov	r14d, 0xffffffff
100003aa9:	mov	eax, r14d
100003aac:	add	rsp, 0x8
100003ab0:	pop	rbx
100003ab1:	pop	r14
100003ab3:	pop	r15
100003ab5:	pop	rbp
100003ab6:	ret
100003ab7:	push	rbp
100003ab8:	mov	rbp, rsp
100003abb:	push	r15
100003abd:	push	r14
100003abf:	push	r13
100003ac1:	push	r12
100003ac3:	push	rbx
100003ac4:	sub	rsp, 0x18
100003ac8:	mov	r12, rdi
100003acb:	mov	rax, qword ptr [rip + 0x853e] ## literal pool symbol address: ___mb_cur_max
100003ad2:	cmp	dword ptr [rax], 0x1
100003ad5:	jne	0x100003b3a
100003ad7:	lea	rax, [r12 + 0x8]
100003adc:	mov	r15, qword ptr [r12]
100003ae0:	lea	rcx, [r12 + r15 + 0x8]
100003ae5:	cmp	rcx, rax
100003ae8:	jbe	0x100003c3d
100003aee:	mov	qword ptr [rbp - 0x38], rcx
100003af2:	mov	qword ptr [rbp - 0x30], rax
100003af6:	mov	r14, r15
100003af9:	neg	r14
100003afc:	mov	ebx, 0x8
100003b01:	lea	r13, [rip + 0xc920]
100003b08:	movzx	edi, byte ptr [r12 + rbx]
100003b0d:	call	qword ptr [r13]
100003b11:	test	eax, eax
100003b13:	je	0x100003bce
100003b19:	lea	rax, [r14 + rbx + 0x1]
100003b1e:	inc	rbx
100003b21:	cmp	rax, 0x8
100003b25:	jne	0x100003b08
100003b27:	mov	rax, qword ptr [rbp - 0x38]
100003b2b:	mov	rbx, rax
100003b2e:	mov	r8, qword ptr [rip + 0x84db] ## literal pool symbol address: ___mb_cur_max
100003b35:	jmp	0x100003bdc
100003b3a:	mov	r13, qword ptr [r12]
100003b3e:	test	r13, r13
100003b41:	jle	0x100003c3d
100003b47:	lea	r15, [r12 + 0x8]
100003b4c:	lea	rax, [r12 + 4*r13 + 0x8]
100003b51:	mov	qword ptr [rbp - 0x30], rax
100003b55:	lea	r14, [r12 + 0x8]
100003b5a:	xor	ebx, ebx
100003b5c:	mov	edi, dword ptr [r14]
100003b5f:	lea	rax, [rip + 0xc8ca]
100003b66:	call	qword ptr [rax]
100003b68:	test	eax, eax
100003b6a:	je	0x100003b7b
100003b6c:	inc	rbx
100003b6f:	add	r14, 0x4
100003b73:	cmp	r13, rbx
100003b76:	jne	0x100003b5c
100003b78:	mov	rbx, r13
100003b7b:	mov	rdx, qword ptr [rip + 0x848e] ## literal pool symbol address: ___mb_cur_max
100003b82:	test	rbx, rbx
100003b85:	mov	rsi, qword ptr [rbp - 0x30]
100003b89:	je	0x100003c3d
100003b8f:	mov	rax, qword ptr [r12]
100003b93:	cmp	r14, rsi
100003b96:	jae	0x100003ba8
100003b98:	mov	ecx, dword ptr [r14]
100003b9b:	mov	dword ptr [r15], ecx
100003b9e:	add	r15, 0x4
100003ba2:	add	r14, 0x4
100003ba6:	jmp	0x100003b93
100003ba8:	test	r12, r12
100003bab:	je	0x100003c3d
100003bb1:	cmp	rax, rbx
100003bb4:	jb	0x100003c3d
100003bba:	sub	rax, rbx
100003bbd:	mov	qword ptr [r12], rax
100003bc1:	cmp	dword ptr [rdx], 0x1
100003bc4:	jne	0x100003c29
100003bc6:	mov	byte ptr [r12 + rax + 0x8], 0x0
100003bcc:	jmp	0x100003c3d
100003bce:	add	rbx, r12
100003bd1:	mov	r8, qword ptr [rip + 0x8438] ## literal pool symbol address: ___mb_cur_max
100003bd8:	mov	rax, qword ptr [rbp - 0x38]
100003bdc:	mov	rdi, qword ptr [rbp - 0x30]
100003be0:	cmp	rbx, rdi
100003be3:	je	0x100003c3d
100003be5:	mov	rsi, rdi
100003be8:	sub	rsi, rbx
100003beb:	add	rsi, qword ptr [r12]
100003bef:	cmp	rbx, rax
100003bf2:	jae	0x100003c13
100003bf4:	sub	r15, rbx
100003bf7:	lea	rcx, [r15 + r12 + 0x8]
100003bfc:	xor	edx, edx
100003bfe:	mov	al, byte ptr [rbx + rdx]
100003c01:	mov	byte ptr [r12 + rdx + 0x8], al
100003c06:	inc	rdx
100003c09:	cmp	rcx, rdx
100003c0c:	jne	0x100003bfe
100003c0e:	test	r12, r12
100003c11:	je	0x100003c3d
100003c13:	cmp	qword ptr [r12], rsi
100003c17:	jbe	0x100003c3d
100003c19:	mov	qword ptr [r12], rsi
100003c1d:	cmp	dword ptr [r8], 0x1
100003c21:	jne	0x100003c34
100003c23:	mov	byte ptr [rdi + rsi], 0x0
100003c27:	jmp	0x100003c3d
100003c29:	mov	dword ptr [r12 + 4*rax + 0x8], 0x0
100003c32:	jmp	0x100003c3d
100003c34:	mov	dword ptr [r12 + 4*rsi + 0x8], 0x0
100003c3d:	mov	rax, r12
100003c40:	add	rsp, 0x18
100003c44:	pop	rbx
100003c45:	pop	r12
100003c47:	pop	r13
100003c49:	pop	r14
100003c4b:	pop	r15
100003c4d:	pop	rbp
100003c4e:	ret
100003c4f:	push	rbp
100003c50:	mov	rbp, rsp
100003c53:	push	r15
100003c55:	push	r14
100003c57:	push	r13
100003c59:	push	r12
100003c5b:	push	rbx
100003c5c:	push	rax
100003c5d:	mov	rcx, rdi
100003c60:	mov	r13, qword ptr [rdi]
100003c63:	mov	rdx, qword ptr [rip + 0x83a6] ## literal pool symbol address: ___mb_cur_max
100003c6a:	cmp	dword ptr [rdx], 0x1
100003c6d:	mov	qword ptr [rbp - 0x30], rdi
100003c71:	jne	0x100003cd4
100003c73:	lea	rbx, [rcx + 0x8]
100003c77:	lea	rax, [rcx + r13 + 0x8]
100003c7c:	cmp	rax, rbx
100003c7f:	jbe	0x100003d40
100003c85:	xor	r15d, r15d
100003c88:	mov	r12, r13
100003c8b:	mov	r14b, byte ptr [rcx + r15 + 0x8]
100003c90:	movzx	edi, r14b
100003c94:	test	dil, dil
100003c97:	js	0x100003cad
100003c99:	mov	rax, qword ptr [rip + 0x8360] ## literal pool symbol address: __DefaultRuneLocale
100003ca0:	mov	eax, dword ptr [rax + 4*rdi + 0x3c]
100003ca4:	mov	edx, 0x40000
100003ca9:	and	eax, edx
100003cab:	jmp	0x100003cbb
100003cad:	mov	esi, 0x40000
100003cb2:	call	0x10000ad5c ## symbol stub for: ___maskrune
100003cb7:	mov	rcx, qword ptr [rbp - 0x30]
100003cbb:	test	eax, eax
100003cbd:	je	0x100003cc7
100003cbf:	mov	byte ptr [rbx], r14b
100003cc2:	inc	rbx
100003cc5:	jmp	0x100003cca
100003cc7:	dec	r12
100003cca:	inc	r15
100003ccd:	cmp	r13, r15
100003cd0:	jne	0x100003c8b
100003cd2:	jmp	0x100003d31
100003cd4:	test	r13, r13
100003cd7:	jle	0x100003d40
100003cd9:	lea	rbx, [rcx + 0x8]
100003cdd:	lea	r14, [rcx + 4*r13 + 0x8]
100003ce2:	mov	r12, r13
100003ce5:	mov	r13, rbx
100003ce8:	mov	r15d, dword ptr [rbx]
100003ceb:	cmp	r15, 0x7f
100003cef:	ja	0x100003d06
100003cf1:	mov	rax, qword ptr [rip + 0x8308] ## literal pool symbol address: __DefaultRuneLocale
100003cf8:	mov	eax, dword ptr [rax + 4*r15 + 0x3c]
100003cfd:	mov	edx, 0x40000
100003d02:	and	eax, edx
100003d04:	jmp	0x100003d17
100003d06:	mov	esi, 0x40000
100003d0b:	mov	edi, r15d
100003d0e:	call	0x10000ad5c ## symbol stub for: ___maskrune
100003d13:	mov	rcx, qword ptr [rbp - 0x30]
100003d17:	test	eax, eax
100003d19:	je	0x100003d25
100003d1b:	mov	dword ptr [r13], r15d
100003d1f:	add	r13, 0x4
100003d23:	jmp	0x100003d28
100003d25:	dec	r12
100003d28:	add	rbx, 0x4
100003d2c:	cmp	rbx, r14
100003d2f:	jb	0x100003ce8
100003d31:	mov	r13, r12
100003d34:	test	rcx, rcx
100003d37:	mov	rdx, qword ptr [rip + 0x82d2] ## literal pool symbol address: ___mb_cur_max
100003d3e:	je	0x100003d5e
100003d40:	cmp	qword ptr [rcx], r13
100003d43:	jbe	0x100003d5e
100003d45:	mov	qword ptr [rcx], r13
100003d48:	cmp	dword ptr [rdx], 0x1
100003d4b:	jne	0x100003d55
100003d4d:	mov	byte ptr [rcx + r13 + 0x8], 0x0
100003d53:	jmp	0x100003d5e
100003d55:	mov	dword ptr [rcx + 4*r13 + 0x8], 0x0
100003d5e:	mov	rax, rcx
100003d61:	add	rsp, 0x8
100003d65:	pop	rbx
100003d66:	pop	r12
100003d68:	pop	r13
100003d6a:	pop	r14
100003d6c:	pop	r15
100003d6e:	pop	rbp
100003d6f:	ret
100003d70:	push	rbp
100003d71:	mov	rbp, rsp
100003d74:	push	r15
100003d76:	push	r14
100003d78:	push	r13
100003d7a:	push	r12
100003d7c:	push	rbx
100003d7d:	sub	rsp, 0x18
100003d81:	mov	r14, rdi
100003d84:	mov	rdx, qword ptr [rdi]
100003d87:	mov	rcx, qword ptr [rip + 0x8282] ## literal pool symbol address: ___mb_cur_max
100003d8e:	cmp	dword ptr [rcx], 0x1
100003d91:	jne	0x100003e18
100003d97:	lea	r15, [r14 + 0x8]
100003d9b:	lea	rax, [r14 + rdx + 0x8]
100003da0:	cmp	rax, r15
100003da3:	jbe	0x100003e95
100003da9:	xor	r12d, r12d
100003dac:	mov	qword ptr [rbp - 0x30], rdx
100003db0:	mov	qword ptr [rbp - 0x38], rdx
100003db4:	mov	r13, r14
100003db7:	mov	r14b, byte ptr [r14 + r12 + 0x8]
100003dbc:	movzx	ebx, r14b
100003dc0:	test	bl, bl
100003dc2:	js	0x100003dd8
100003dc4:	mov	rax, qword ptr [rip + 0x8235] ## literal pool symbol address: __DefaultRuneLocale
100003dcb:	mov	eax, dword ptr [rax + 4*rbx + 0x3c]
100003dcf:	mov	ecx, 0x500
100003dd4:	and	eax, ecx
100003dd6:	jmp	0x100003de8
100003dd8:	mov	esi, 0x500
100003ddd:	mov	edi, ebx
100003ddf:	call	0x10000ad5c ## symbol stub for: ___maskrune
100003de4:	mov	rdx, qword ptr [rbp - 0x38]
100003de8:	test	eax, eax
100003dea:	jne	0x100003dff
100003dec:	mov	edi, ebx
100003dee:	lea	rax, [rip + 0xc633]
100003df5:	call	qword ptr [rax]
100003df7:	mov	rdx, qword ptr [rbp - 0x38]
100003dfb:	test	eax, eax
100003dfd:	je	0x100003e12
100003dff:	mov	byte ptr [r15], r14b
100003e02:	inc	r15
100003e05:	mov	r14, r13
100003e08:	inc	r12
100003e0b:	cmp	rdx, r12
100003e0e:	jne	0x100003db4
100003e10:	jmp	0x100003e85
100003e12:	dec	qword ptr [rbp - 0x30]
100003e16:	jmp	0x100003e05
100003e18:	test	rdx, rdx
100003e1b:	jle	0x100003e95
100003e1d:	lea	rbx, [r14 + 0x8]
100003e21:	lea	r12, [r14 + 4*rdx + 0x8]
100003e26:	mov	qword ptr [rbp - 0x30], rdx
100003e2a:	mov	r13, rbx
100003e2d:	mov	r15d, dword ptr [rbx]
100003e30:	cmp	r15, 0x7f
100003e34:	ja	0x100003e4b
100003e36:	mov	rax, qword ptr [rip + 0x81c3] ## literal pool symbol address: __DefaultRuneLocale
100003e3d:	mov	eax, dword ptr [rax + 4*r15 + 0x3c]
100003e42:	mov	ecx, 0x500
100003e47:	and	eax, ecx
100003e49:	jmp	0x100003e58
100003e4b:	mov	esi, 0x500
100003e50:	mov	edi, r15d
100003e53:	call	0x10000ad5c ## symbol stub for: ___maskrune
100003e58:	test	eax, eax
100003e5a:	jne	0x100003e6c
100003e5c:	mov	edi, r15d
100003e5f:	lea	rax, [rip + 0xc5ca]
100003e66:	call	qword ptr [rax]
100003e68:	test	eax, eax
100003e6a:	je	0x100003e7f
100003e6c:	mov	dword ptr [r13], r15d
100003e70:	add	r13, 0x4
100003e74:	add	rbx, 0x4
100003e78:	cmp	rbx, r12
100003e7b:	jb	0x100003e2d
100003e7d:	jmp	0x100003e85
100003e7f:	dec	qword ptr [rbp - 0x30]
100003e83:	jmp	0x100003e74
100003e85:	mov	rdx, qword ptr [rbp - 0x30]
100003e89:	test	r14, r14
100003e8c:	mov	rcx, qword ptr [rip + 0x817d] ## literal pool symbol address: ___mb_cur_max
100003e93:	je	0x100003eb3
100003e95:	cmp	qword ptr [r14], rdx
100003e98:	jbe	0x100003eb3
100003e9a:	mov	qword ptr [r14], rdx
100003e9d:	cmp	dword ptr [rcx], 0x1
100003ea0:	jne	0x100003eaa
100003ea2:	mov	byte ptr [r14 + rdx + 0x8], 0x0
100003ea8:	jmp	0x100003eb3
100003eaa:	mov	dword ptr [r14 + 4*rdx + 0x8], 0x0
100003eb3:	mov	rax, r14
100003eb6:	add	rsp, 0x18
100003eba:	pop	rbx
100003ebb:	pop	r12
100003ebd:	pop	r13
100003ebf:	pop	r14
100003ec1:	pop	r15
100003ec3:	pop	rbp
100003ec4:	ret
100003ec5:	push	rbp
100003ec6:	mov	rbp, rsp
100003ec9:	push	r15
100003ecb:	push	r14
100003ecd:	push	rbx
100003ece:	push	rax
100003ecf:	mov	r15, rdi
100003ed2:	mov	rax, qword ptr [rip + 0x8137] ## literal pool symbol address: ___mb_cur_max
100003ed9:	cmp	dword ptr [rax], 0x1
100003edc:	jne	0x100003f0b
100003ede:	lea	rax, [r15 + 0x8]
100003ee2:	mov	r14, qword ptr [r15]
100003ee5:	lea	rcx, [r15 + r14 + 0x8]
100003eea:	cmp	rcx, rax
100003eed:	jbe	0x100003f2e
100003eef:	xor	ebx, ebx
100003ef1:	movzx	edi, byte ptr [r15 + rbx + 0x8]
100003ef7:	call	0x10000ad6e ## symbol stub for: ___toupper
100003efc:	mov	byte ptr [r15 + rbx + 0x8], al
100003f01:	inc	rbx
100003f04:	cmp	r14, rbx
100003f07:	jne	0x100003ef1
100003f09:	jmp	0x100003f2e
100003f0b:	mov	rax, qword ptr [r15]
100003f0e:	test	rax, rax
100003f11:	jle	0x100003f2e
100003f13:	lea	r14, [r15 + 4*rax + 0x8]
100003f18:	lea	rbx, [r15 + 0x8]
100003f1c:	mov	edi, dword ptr [rbx]
100003f1e:	call	0x10000ad6e ## symbol stub for: ___toupper
100003f23:	mov	dword ptr [rbx], eax
100003f25:	add	rbx, 0x4
100003f29:	cmp	rbx, r14
100003f2c:	jb	0x100003f1c
100003f2e:	mov	rax, r15
100003f31:	add	rsp, 0x8
100003f35:	pop	rbx
100003f36:	pop	r14
100003f38:	pop	r15
100003f3a:	pop	rbp
100003f3b:	ret
100003f3c:	push	rbp
100003f3d:	mov	rbp, rsp
100003f40:	mov	rcx, rdi
100003f43:	mov	rax, qword ptr [rip + 0x80c6] ## literal pool symbol address: ___mb_cur_max
100003f4a:	inc	rdx
100003f4d:	add	rcx, 0x8
100003f51:	cmp	dword ptr [rax], 0x1
100003f54:	jne	0x100003f5f
100003f56:	lea	rdi, [rip + 0x75fd] ## literal pool for: "%s:%zu: disorder: %s"
100003f5d:	jmp	0x100003f66
100003f5f:	lea	rdi, [rip + 0x7609] ## literal pool for: "%s:%zu: disorder: %ls"
100003f66:	xor	eax, eax
100003f68:	pop	rbp
100003f69:	jmp	0x10000afba ## symbol stub for: _warnx
100003f6e:	nop
100003f6f:	nop
100003f70:	push	rbp
100003f71:	mov	rbp, rsp
100003f74:	push	r14
100003f76:	push	rbx
100003f77:	lea	rax, [rip + 0xcb12]
100003f7e:	cmp	byte ptr [rax], 0x0
100003f81:	mov	eax, 0x8
100003f86:	mov	ebx, 0x20
100003f8b:	cmove	rbx, rax
100003f8f:	imul	rbx, qword ptr [rip + 0xca69]
100003f97:	mov	rdi, rbx
100003f9a:	call	0x100007912
100003f9f:	mov	r14, rax
100003fa2:	mov	rdi, rax
100003fa5:	mov	rsi, rbx
100003fa8:	call	0x10000ad50 ## symbol stub for: ___bzero
100003fad:	mov	rax, r14
100003fb0:	pop	rbx
100003fb1:	pop	r14
100003fb3:	pop	rbp
100003fb4:	ret
100003fb5:	push	rbp
100003fb6:	mov	rbp, rsp
100003fb9:	lea	rax, [rip + 0xcad0]
100003fc0:	cmp	byte ptr [rax], 0x0
100003fc3:	mov	ecx, 0x8
100003fc8:	mov	eax, 0x20
100003fcd:	cmove	rax, rcx
100003fd1:	imul	rax, qword ptr [rip + 0xca27]
100003fd9:	pop	rbp
100003fda:	ret
100003fdb:	test	rsi, rsi
100003fde:	je	0x10000406c
100003fe4:	push	rbp
100003fe5:	mov	rbp, rsp
100003fe8:	push	r15
100003fea:	push	r14
100003fec:	push	r12
100003fee:	push	rbx
100003fef:	mov	r12, rsi
100003ff2:	mov	rsi, qword ptr [rip + 0xca07]
100003ff9:	lea	r15, [rip + 0xca90]
100004000:	mov	al, byte ptr [r15]
100004003:	test	al, al
100004005:	mov	edx, 0x8
10000400a:	mov	ecx, 0x20
10000400f:	cmove	rcx, rdx
100004013:	test	rsi, rsi
100004016:	je	0x100004056
100004018:	mov	r14, rdi
10000401b:	xor	ebx, ebx
10000401d:	imul	rcx, rbx
100004021:	mov	rdi, qword ptr [r12 + rcx]
100004025:	test	rdi, rdi
100004028:	je	0x10000403e
10000402a:	cmp	rdi, r14
10000402d:	je	0x10000403e
10000402f:	call	0x100002f66
100004034:	mov	rsi, qword ptr [rip + 0xc9c5]
10000403b:	mov	al, byte ptr [r15]
10000403e:	inc	rbx
100004041:	mov	ecx, 0x8
100004046:	test	al, al
100004048:	je	0x10000404f
10000404a:	mov	ecx, 0x20
10000404f:	cmp	rbx, rsi
100004052:	jb	0x10000401d
100004054:	jmp	0x100004058
100004056:	xor	esi, esi
100004058:	imul	rsi, rcx
10000405c:	mov	rdi, r12
10000405f:	call	0x10000ad50 ## symbol stub for: ___bzero
100004064:	pop	rbx
100004065:	pop	r12
100004067:	pop	r14
100004069:	pop	r15
10000406b:	pop	rbp
10000406c:	ret
10000406d:	push	rbp
10000406e:	mov	rbp, rsp
100004071:	lea	rax, [rip + 0xca18]
100004078:	cmp	byte ptr [rax], 0x0
10000407b:	mov	ecx, 0x8
100004080:	mov	eax, 0x20
100004085:	cmove	rax, rcx
100004089:	imul	rax, rsi
10000408d:	add	rax, rdi
100004090:	pop	rbp
100004091:	ret
100004092:	push	rbp
100004093:	mov	rbp, rsp
100004096:	push	r15
100004098:	push	r14
10000409a:	push	rbx
10000409b:	push	rax
10000409c:	test	rdi, rdi
10000409f:	je	0x1000040e3
1000040a1:	cmp	qword ptr [rip + 0xc958], rdx
1000040a8:	jbe	0x1000040e3
1000040aa:	mov	r14, rsi
1000040ad:	mov	r15, rdi
1000040b0:	lea	rax, [rip + 0xc9d9]
1000040b7:	cmp	byte ptr [rax], 0x0
1000040ba:	mov	eax, 0x8
1000040bf:	mov	ebx, 0x20
1000040c4:	cmove	rbx, rax
1000040c8:	imul	rbx, rdx
1000040cc:	mov	rdi, qword ptr [rdi + rbx]
1000040d0:	test	rdi, rdi
1000040d3:	je	0x1000040df
1000040d5:	cmp	rdi, r14
1000040d8:	je	0x1000040df
1000040da:	call	0x100002f66
1000040df:	mov	qword ptr [r15 + rbx], r14
1000040e3:	add	rsp, 0x8
1000040e7:	pop	rbx
1000040e8:	pop	r14
1000040ea:	pop	r15
1000040ec:	pop	rbp
1000040ed:	ret
1000040ee:	push	rbp
1000040ef:	mov	rbp, rsp
1000040f2:	push	r14
1000040f4:	push	rbx
1000040f5:	lea	rax, [rip + 0xc994]
1000040fc:	cmp	byte ptr [rax], 0x0
1000040ff:	mov	eax, 0x8
100004104:	mov	ebx, 0x20
100004109:	cmove	rbx, rax
10000410d:	imul	rbx, qword ptr [rip + 0xc8eb]
100004115:	add	rbx, 0x8
100004119:	mov	rdi, rbx
10000411c:	call	0x100007912
100004121:	mov	r14, rax
100004124:	mov	rdi, rax
100004127:	mov	rsi, rbx
10000412a:	call	0x10000ad50 ## symbol stub for: ___bzero
10000412f:	mov	rax, r14
100004132:	pop	rbx
100004133:	pop	r14
100004135:	pop	rbp
100004136:	ret
100004137:	push	rbp
100004138:	mov	rbp, rsp
10000413b:	push	r15
10000413d:	push	r14
10000413f:	push	r12
100004141:	push	rbx
100004142:	test	rdi, rdi
100004145:	je	0x1000041cd
10000414b:	mov	r12, rdi
10000414e:	mov	rax, qword ptr [rip + 0xc8ab]
100004155:	lea	r15, [rip + 0xc934]
10000415c:	cmp	byte ptr [r15], 0x0
100004160:	mov	ecx, 0x8
100004165:	mov	r14d, 0x20
10000416b:	cmove	r14, rcx
10000416f:	imul	r14, rax
100004173:	add	r14, 0x8
100004177:	mov	rdi, qword ptr [rdi]
10000417a:	test	rdi, rdi
10000417d:	je	0x10000418e
10000417f:	call	0x100002c49
100004184:	add	r14, rax
100004187:	mov	rax, qword ptr [rip + 0xc872]
10000418e:	test	rax, rax
100004191:	je	0x1000041d0
100004193:	xor	ebx, ebx
100004195:	cmp	byte ptr [r15], 0x0
100004199:	mov	ecx, 0x8
10000419e:	je	0x1000041a5
1000041a0:	mov	ecx, 0x20
1000041a5:	imul	rcx, rbx
1000041a9:	mov	rdi, qword ptr [r12 + rcx + 0x8]
1000041ae:	cmp	rdi, qword ptr [r12]
1000041b2:	je	0x1000041c3
1000041b4:	call	0x100002c49
1000041b9:	add	r14, rax
1000041bc:	mov	rax, qword ptr [rip + 0xc83d]
1000041c3:	inc	rbx
1000041c6:	cmp	rbx, rax
1000041c9:	jb	0x100004195
1000041cb:	jmp	0x1000041d0
1000041cd:	xor	r14d, r14d
1000041d0:	mov	rax, r14
1000041d3:	pop	rbx
1000041d4:	pop	r12
1000041d6:	pop	r14
1000041d8:	pop	r15
1000041da:	pop	rbp
1000041db:	ret
1000041dc:	push	rbp
1000041dd:	mov	rbp, rsp
1000041e0:	push	r15
1000041e2:	push	r14
1000041e4:	push	rbx
1000041e5:	push	rax
1000041e6:	test	rdi, rdi
1000041e9:	je	0x100004231
1000041eb:	mov	r14, rsi
1000041ee:	mov	rbx, rdi
1000041f1:	mov	rdi, qword ptr [rdi]
1000041f4:	lea	r15, [rbx + 0x8]
1000041f8:	mov	rsi, r15
1000041fb:	call	0x100003fdb
100004200:	mov	rdi, qword ptr [rbx]
100004203:	test	rdi, rdi
100004206:	je	0x100004219
100004208:	cmp	rdi, r14
10000420b:	je	0x100004231
10000420d:	call	0x100002f66
100004212:	mov	qword ptr [rbx], 0x0
100004219:	mov	qword ptr [rbx], r14
10000421c:	mov	rdi, r14
10000421f:	mov	rsi, r15
100004222:	add	rsp, 0x8
100004226:	pop	rbx
100004227:	pop	r14
100004229:	pop	r15
10000422b:	pop	rbp
10000422c:	jmp	0x100004271
100004231:	add	rsp, 0x8
100004235:	pop	rbx
100004236:	pop	r14
100004238:	pop	r15
10000423a:	pop	rbp
10000423b:	ret
10000423c:	push	rbp
10000423d:	mov	rbp, rsp
100004240:	push	rbx
100004241:	push	rax
100004242:	test	rdi, rdi
100004245:	je	0x10000426a
100004247:	mov	rbx, rdi
10000424a:	mov	rdi, qword ptr [rdi]
10000424d:	lea	rsi, [rbx + 0x8]
100004251:	call	0x100003fdb
100004256:	mov	rdi, qword ptr [rbx]
100004259:	test	rdi, rdi
10000425c:	je	0x10000426a
10000425e:	call	0x100002f66
100004263:	mov	qword ptr [rbx], 0x0
10000426a:	add	rsp, 0x8
10000426e:	pop	rbx
10000426f:	pop	rbp
100004270:	ret
100004271:	push	rbp
100004272:	mov	rbp, rsp
100004275:	push	r15
100004277:	push	r14
100004279:	push	r13
10000427b:	push	r12
10000427d:	push	rbx
10000427e:	sub	rsp, 0x28
100004282:	mov	r15, rsi
100004285:	mov	r12, rdi
100004288:	lea	rax, [rip + 0xc805]
10000428f:	cmp	byte ptr [rax + 0xa], 0x0
100004293:	je	0x10000449f
100004299:	cmp	qword ptr [rip + 0xc75f], 0x0
1000042a1:	je	0x100004545
1000042a7:	mov	r14d, 0x9
1000042ad:	xor	r13d, r13d
1000042b0:	mov	qword ptr [rbp - 0x40], r15
1000042b4:	mov	qword ptr [rbp - 0x48], r12
1000042b8:	mov	rbx, qword ptr [rip + 0xc751]
1000042bf:	test	r12, r12
1000042c2:	je	0x100004319
1000042c4:	test	rbx, rbx
1000042c7:	je	0x100004319
1000042c9:	xor	r15d, r15d
1000042cc:	mov	byte ptr [rbp - 0x2b], r15b
1000042d0:	mov	byte ptr [rbp - 0x29], r15b
1000042d4:	mov	rsi, qword ptr [rbx + r14 + 0x1f]
1000042d9:	mov	rdi, r12
1000042dc:	lea	rdx, [rbp - 0x2b]
1000042e0:	call	0x1000051a7
1000042e5:	cmp	byte ptr [rbp - 0x2b], r15b
1000042e9:	je	0x1000042f5
1000042eb:	mov	byte ptr [rbp - 0x29], 0x1
1000042ef:	mov	r15, qword ptr [rbp - 0x40]
1000042f3:	jmp	0x100004319
1000042f5:	mov	rsi, qword ptr [rbx + r14 + 0xf]
1000042fa:	movzx	ecx, byte ptr [rbx + r14 + 0x2f]
100004300:	mov	rdi, r12
100004303:	mov	rdx, rax
100004306:	lea	r8, [rbp - 0x29]
10000430a:	call	0x1000052a4
10000430f:	cmp	byte ptr [rbp - 0x29], 0x0
100004313:	mov	r15, qword ptr [rbp - 0x40]
100004317:	je	0x10000438d
100004319:	xor	edi, edi
10000431b:	call	0x100002c9a
100004320:	mov	r12, rax
100004323:	cmp	byte ptr [rbx + r14], 0x0
100004328:	je	0x100004334
10000432a:	mov	rdi, r12
10000432d:	call	0x100003d70
100004332:	jmp	0x100004344
100004334:	cmp	byte ptr [rbx + r14 + 0x3], 0x0
10000433a:	je	0x100004347
10000433c:	mov	rdi, r12
10000433f:	call	0x100003c4f
100004344:	mov	r12, rax
100004347:	cmp	byte ptr [rbx + r14 + 0x1], 0x0
10000434d:	jne	0x100004357
10000434f:	cmp	byte ptr [rbx + r14 + 0x4], 0x0
100004355:	je	0x100004362
100004357:	mov	rdi, r12
10000435a:	call	0x100003ec5
10000435f:	mov	r12, rax
100004362:	mov	rdi, r15
100004365:	mov	rsi, r12
100004368:	mov	rdx, r13
10000436b:	call	0x100004092
100004370:	inc	r13
100004373:	add	r14, 0x40
100004377:	cmp	r13, qword ptr [rip + 0xc682]
10000437e:	mov	r12, qword ptr [rbp - 0x48]
100004382:	jb	0x1000042b8
100004388:	jmp	0x100004545
10000438d:	mov	rcx, rax
100004390:	xor	eax, eax
100004392:	mov	byte ptr [rbp - 0x2a], al
100004395:	mov	byte ptr [rbp - 0x2c], al
100004398:	mov	rsi, qword ptr [rbx + r14 + 0x27]
10000439d:	test	rsi, rsi
1000043a0:	mov	qword ptr [rbp - 0x38], rcx
1000043a4:	je	0x1000043c3
1000043a6:	cmp	qword ptr [rbx + r14 + 0x17], 0x0
1000043ac:	je	0x1000043cf
1000043ae:	mov	rdi, r12
1000043b1:	lea	rdx, [rbp - 0x2a]
1000043b5:	call	0x1000051a7
1000043ba:	mov	rcx, qword ptr [rbp - 0x38]
1000043be:	mov	rdx, rax
1000043c1:	jmp	0x100004421
1000043c3:	mov	rdx, qword ptr [r12]
1000043c7:	inc	rdx
1000043ca:	jmp	0x100004463
1000043cf:	mov	rdi, r12
1000043d2:	inc	rsi
1000043d5:	lea	rdx, [rbp - 0x2a]
1000043d9:	call	0x1000051a7
1000043de:	test	rax, rax
1000043e1:	je	0x100004409
1000043e3:	mov	rdx, rax
1000043e6:	lea	rax, [rip + 0xc6a7]
1000043ed:	cmp	byte ptr [rax + 0xf], 0x0
1000043f1:	je	0x10000441d
1000043f3:	mov	eax, dword ptr [rax]
1000043f5:	mov	rcx, qword ptr [rip + 0x7c14] ## literal pool symbol address: ___mb_cur_max
1000043fc:	cmp	dword ptr [rcx], 0x1
1000043ff:	jne	0x10000440d
100004401:	movzx	ecx, byte ptr [r12 + rdx + 0x7]
100004407:	jmp	0x100004412
100004409:	xor	edx, edx
10000440b:	jmp	0x10000441d
10000440d:	mov	ecx, dword ptr [r12 + 4*rdx + 0x4]
100004412:	xor	esi, esi
100004414:	cmp	eax, ecx
100004416:	sete	sil
10000441a:	sub	rdx, rsi
10000441d:	mov	rcx, qword ptr [rbp - 0x38]
100004421:	cmp	byte ptr [rbp - 0x2a], 0x0
100004425:	mov	rax, qword ptr [r12]
100004429:	jne	0x10000445d
10000442b:	cmp	rdx, rax
10000442e:	jae	0x10000445d
100004430:	mov	rsi, qword ptr [rbx + r14 + 0x17]
100004435:	test	rsi, rsi
100004438:	je	0x100004463
10000443a:	movzx	ecx, byte ptr [rbx + r14 + 0x30]
100004440:	mov	rdi, r12
100004443:	lea	r8, [rbp - 0x2c]
100004447:	call	0x1000052a4
10000444c:	mov	rcx, qword ptr [rbp - 0x38]
100004450:	mov	rdx, rax
100004453:	cmp	rax, qword ptr [r12]
100004457:	adc	rdx, 0x0
10000445b:	jmp	0x100004463
10000445d:	inc	rax
100004460:	mov	rdx, rax
100004463:	mov	r15, rdx
100004466:	sub	r15, rcx
100004469:	mov	qword ptr [rbp - 0x50], rdx
10000446d:	jae	0x100004472
10000446f:	xor	r15d, r15d
100004472:	mov	rdi, r15
100004475:	call	0x100002c9a
10000447a:	mov	r12, rax
10000447d:	mov	rdx, qword ptr [rbp - 0x38]
100004481:	cmp	qword ptr [rbp - 0x50], rdx
100004485:	jbe	0x100004496
100004487:	mov	rdi, r12
10000448a:	mov	rsi, qword ptr [rbp - 0x48]
10000448e:	mov	rcx, r15
100004491:	call	0x100003049
100004496:	mov	r15, qword ptr [rbp - 0x40]
10000449a:	jmp	0x100004323
10000449f:	lea	rax, [rip + 0x7c82]
1000044a6:	mov	rbx, qword ptr [rax]
1000044a9:	cmp	byte ptr [rbx + 0x8], 0x0
1000044ad:	je	0x1000044cf
1000044af:	mov	r14, r12
1000044b2:	mov	rdi, r12
1000044b5:	call	0x100002ce1
1000044ba:	mov	rdi, rax
1000044bd:	call	0x100003ab7
1000044c2:	cmp	byte ptr [rbx + 0x9], 0x0
1000044c6:	je	0x1000044ea
1000044c8:	test	rax, rax
1000044cb:	jne	0x1000044e0
1000044cd:	jmp	0x1000044d8
1000044cf:	mov	r14, r12
1000044d2:	cmp	byte ptr [rbx + 0x9], 0x0
1000044d6:	je	0x1000044f7
1000044d8:	mov	rdi, r14
1000044db:	call	0x100002ce1
1000044e0:	mov	rdi, rax
1000044e3:	call	0x100003d70
1000044e8:	jmp	0x10000450d
1000044ea:	cmp	byte ptr [rbx + 0xc], 0x0
1000044ee:	je	0x10000450d
1000044f0:	test	rax, rax
1000044f3:	jne	0x100004505
1000044f5:	jmp	0x1000044fd
1000044f7:	cmp	byte ptr [rbx + 0xc], 0x0
1000044fb:	je	0x100004556
1000044fd:	mov	rdi, r14
100004500:	call	0x100002ce1
100004505:	mov	rdi, rax
100004508:	call	0x100003c4f
10000450d:	cmp	byte ptr [rbx + 0xa], 0x0
100004511:	jne	0x100004519
100004513:	cmp	byte ptr [rbx + 0xd], 0x0
100004517:	je	0x10000452e
100004519:	test	rax, rax
10000451c:	jne	0x100004526
10000451e:	mov	rdi, r14
100004521:	call	0x100002ce1
100004526:	mov	rdi, rax
100004529:	call	0x100003ec5
10000452e:	mov	rdi, r15
100004531:	test	rax, rax
100004534:	je	0x10000453b
100004536:	mov	rsi, rax
100004539:	jmp	0x10000453e
10000453b:	mov	rsi, r14
10000453e:	xor	edx, edx
100004540:	call	0x100004092
100004545:	xor	eax, eax
100004547:	add	rsp, 0x28
10000454b:	pop	rbx
10000454c:	pop	r12
10000454e:	pop	r13
100004550:	pop	r14
100004552:	pop	r15
100004554:	pop	rbp
100004555:	ret
100004556:	xor	eax, eax
100004558:	jmp	0x10000450d
10000455a:	push	rbp
10000455b:	mov	rbp, rsp
10000455e:	cmp	byte ptr [rdi + 0xe], 0x0
100004562:	je	0x10000456d
100004564:	lea	rax, [rip + 0x56]
10000456b:	jmp	0x1000045bf
10000456d:	cmp	byte ptr [rdi + 0x12], 0x0
100004571:	je	0x10000457c
100004573:	lea	rax, [rip + 0x53]
10000457a:	jmp	0x1000045bf
10000457c:	cmp	byte ptr [rdi + 0xb], 0x0
100004580:	je	0x10000458b
100004582:	lea	rax, [rip + 0x53]
100004589:	jmp	0x1000045bf
10000458b:	cmp	byte ptr [rdi + 0xd], 0x0
10000458f:	je	0x10000459a
100004591:	lea	rax, [rip + 0x3bc]
100004598:	jmp	0x1000045bf
10000459a:	cmp	byte ptr [rdi + 0x10], 0x0
10000459e:	je	0x1000045a9
1000045a0:	lea	rax, [rip + 0x4c0]
1000045a7:	jmp	0x1000045bf
1000045a9:	cmp	byte ptr [rdi + 0x11], 0x0
1000045ad:	lea	rcx, [rip + 0x694]
1000045b4:	lea	rax, [rip + 0x613]
1000045bb:	cmove	rax, rcx
1000045bf:	pop	rbp
1000045c0:	ret
1000045c1:	push	rbp
1000045c2:	mov	rbp, rsp
1000045c5:	xor	edx, edx
1000045c7:	pop	rbp
1000045c8:	jmp	0x10000535b
1000045cd:	push	rbp
1000045ce:	mov	rbp, rsp
1000045d1:	mov	edx, 0x1
1000045d6:	pop	rbp
1000045d7:	jmp	0x10000535b
1000045dc:	push	rbp
1000045dd:	mov	rbp, rsp
1000045e0:	push	r15
1000045e2:	push	r14
1000045e4:	push	r13
1000045e6:	push	r12
1000045e8:	push	rbx
1000045e9:	sub	rsp, 0x18
1000045ed:	mov	r14, rsi
1000045f0:	mov	r15, rdi
1000045f3:	lea	rax, [rip + 0xc436]
1000045fa:	cmp	byte ptr [rax], 0x0
1000045fd:	je	0x100004637
1000045ff:	mov	rbx, qword ptr [rip + 0x7a2a] ## literal pool symbol address: ___stdoutp
100004606:	mov	rdi, qword ptr [rbx]
100004609:	mov	rsi, qword ptr [r15]
10000460c:	lea	rdx, [rip + 0x6fc5] ## literal pool for: "; k1=<"
100004613:	lea	r12, [rip + 0x6f72] ## literal pool for: ">"
10000461a:	mov	rcx, r12
10000461d:	call	0x100002bee
100004622:	mov	rdi, qword ptr [rbx]
100004625:	mov	rsi, qword ptr [r14]
100004628:	lea	rdx, [rip + 0x6fbd] ## literal pool for: "; k2=<"
10000462f:	mov	rcx, r12
100004632:	call	0x100002bee
100004637:	xor	r13d, r13d
10000463a:	cmp	dword ptr [r15 + 0x8], 0x0
10000463f:	xorpd	xmm0, xmm0
100004643:	xorpd	xmm1, xmm1
100004647:	movsd	qword ptr [rbp - 0x40], xmm1
10000464c:	mov	esi, 0x0
100004651:	mov	r12d, 0x0
100004657:	jne	0x1000046a2
100004659:	call	0x10000ad56 ## symbol stub for: ___error
10000465e:	mov	dword ptr [rax], 0x0
100004664:	mov	rdi, qword ptr [r15]
100004667:	lea	rbx, [rbp - 0x2a]
10000466b:	mov	rsi, rbx
10000466e:	call	0x1000038dc
100004673:	movsd	qword ptr [rbp - 0x40], xmm0
100004678:	call	0x10000ad56 ## symbol stub for: ___error
10000467d:	mov	esi, dword ptr [rax]
10000467f:	cmp	byte ptr [rbx], 0x0
100004682:	je	0x10000468b
100004684:	mov	byte ptr [r15 + 0x19], 0x1
100004689:	jmp	0x10000469b
10000468b:	test	esi, esi
10000468d:	je	0x100004821
100004693:	mov	dword ptr [r15 + 0x8], 0xffffffff
10000469b:	mov	r12b, 0x1
10000469e:	xorpd	xmm0, xmm0
1000046a2:	cmp	dword ptr [r14 + 0x8], 0x0
1000046a7:	je	0x1000046ad
1000046a9:	xor	ebx, ebx
1000046ab:	jmp	0x100004701
1000046ad:	mov	r13d, esi
1000046b0:	call	0x10000ad56 ## symbol stub for: ___error
1000046b5:	mov	dword ptr [rax], 0x0
1000046bb:	mov	rdi, qword ptr [r14]
1000046be:	lea	rbx, [rbp - 0x29]
1000046c2:	mov	rsi, rbx
1000046c5:	call	0x1000038dc
1000046ca:	movsd	qword ptr [rbp - 0x38], xmm0
1000046cf:	call	0x10000ad56 ## symbol stub for: ___error
1000046d4:	mov	eax, dword ptr [rax]
1000046d6:	cmp	byte ptr [rbx], 0x0
1000046d9:	je	0x1000046e2
1000046db:	mov	byte ptr [r14 + 0x19], 0x1
1000046e0:	jmp	0x1000046f4
1000046e2:	test	eax, eax
1000046e4:	je	0x100004847
1000046ea:	mov	ecx, eax
1000046ec:	mov	dword ptr [r14 + 0x8], 0xffffffff
1000046f4:	mov	bl, 0x1
1000046f6:	movsd	xmm0, qword ptr [rbp - 0x38]
1000046fb:	mov	esi, r13d
1000046fe:	mov	r13d, eax
100004701:	cmp	dword ptr [r15 + 0x8], 0x1
100004706:	jne	0x100004765
100004708:	cmp	dword ptr [r14 + 0x8], 0x1
10000470d:	jne	0x100004765
10000470f:	cmp	byte ptr [r15 + 0x19], 0x0
100004714:	mov	cl, byte ptr [r14 + 0x19]
100004718:	jne	0x1000047c7
10000471e:	mov	eax, 0x1
100004723:	test	cl, cl
100004725:	jne	0x1000047d7
10000472b:	cmp	byte ptr [r15 + 0x18], 0x0
100004730:	mov	cl, byte ptr [r14 + 0x18]
100004734:	je	0x1000048ee
10000473a:	test	cl, cl
10000473c:	je	0x100004907
100004742:	movsd	xmm0, qword ptr [r15 + 0x10]
100004748:	movsd	xmm1, qword ptr [r14 + 0x10]
10000474e:	xor	ecx, ecx
100004750:	ucomisd	xmm0, xmm1
100004754:	seta	cl
100004757:	ucomisd	xmm1, xmm0
10000475b:	mov	eax, 0xffffffff
100004760:	cmovbe	eax, ecx
100004763:	jmp	0x1000047d7
100004765:	movsd	qword ptr [rbp - 0x38], xmm0
10000476a:	test	r12b, r12b
10000476d:	jne	0x100004792
10000476f:	call	0x10000ad56 ## symbol stub for: ___error
100004774:	mov	dword ptr [rax], 0x0
10000477a:	mov	rdi, qword ptr [r15]
10000477d:	lea	rsi, [rbp - 0x2a]
100004781:	call	0x1000038dc
100004786:	movsd	qword ptr [rbp - 0x40], xmm0
10000478b:	call	0x10000ad56 ## symbol stub for: ___error
100004790:	mov	esi, dword ptr [rax]
100004792:	test	bl, bl
100004794:	jne	0x1000047be
100004796:	mov	ebx, esi
100004798:	call	0x10000ad56 ## symbol stub for: ___error
10000479d:	mov	dword ptr [rax], 0x0
1000047a3:	mov	rdi, qword ptr [r14]
1000047a6:	lea	rsi, [rbp - 0x29]
1000047aa:	call	0x1000038dc
1000047af:	movsd	qword ptr [rbp - 0x38], xmm0
1000047b4:	call	0x10000ad56 ## symbol stub for: ___error
1000047b9:	mov	esi, ebx
1000047bb:	mov	r13d, dword ptr [rax]
1000047be:	cmp	byte ptr [rbp - 0x2a], 0x0
1000047c2:	mov	cl, byte ptr [rbp - 0x29]
1000047c5:	je	0x1000047ce
1000047c7:	cmp	cl, 0x1
1000047ca:	sbb	eax, eax
1000047cc:	jmp	0x1000047d7
1000047ce:	mov	eax, 0x1
1000047d3:	test	cl, cl
1000047d5:	je	0x1000047e6
1000047d7:	add	rsp, 0x18
1000047db:	pop	rbx
1000047dc:	pop	r12
1000047de:	pop	r13
1000047e0:	pop	r14
1000047e2:	pop	r15
1000047e4:	pop	rbp
1000047e5:	ret
1000047e6:	movsd	xmm0, qword ptr [rbp - 0x40]
1000047eb:	ucomisd	xmm0, xmm0
1000047ef:	jp	0x10000492a
1000047f5:	movsd	xmm1, qword ptr [rbp - 0x38]
1000047fa:	ucomisd	xmm1, xmm1
1000047fe:	jp	0x1000047d7
100004800:	cmp	esi, 0x22
100004803:	je	0x100004870
100004805:	cmp	r13d, 0x22
100004809:	je	0x100004870
10000480b:	mov	eax, 0xffffffff
100004810:	ucomisd	xmm1, xmm0
100004814:	ja	0x1000047d7
100004816:	xor	eax, eax
100004818:	ucomisd	xmm0, xmm1
10000481c:	seta	al
10000481f:	jmp	0x1000047d7
100004821:	movsd	xmm0, qword ptr [rbp - 0x40]
100004826:	ucomisd	xmm0, xmm0
10000482a:	movsd	qword ptr [r15 + 0x10], xmm0
100004830:	setp	byte ptr [r15 + 0x18]
100004835:	mov	dword ptr [r15 + 0x8], 0x1
10000483d:	mov	r12b, 0x1
100004840:	xor	esi, esi
100004842:	jmp	0x10000469e
100004847:	movsd	xmm0, qword ptr [rbp - 0x38]
10000484c:	ucomisd	xmm0, xmm0
100004850:	movsd	qword ptr [r14 + 0x10], xmm0
100004856:	setp	byte ptr [r14 + 0x18]
10000485b:	mov	dword ptr [r14 + 0x8], 0x1
100004863:	mov	bl, 0x1
100004865:	mov	esi, r13d
100004868:	xor	r13d, r13d
10000486b:	jmp	0x100004701
100004870:	cmp	r13d, 0x22
100004874:	sete	dl
100004877:	movsd	xmm0, qword ptr [rip + 0x6c61]
10000487f:	ucomisd	xmm0, xmm1
100004883:	setae	cl
100004886:	and	cl, dl
100004888:	ucomisd	xmm0, qword ptr [rbp - 0x40]
10000488d:	movsd	xmm2, qword ptr [rbp - 0x40]
100004892:	jb	0x1000048b5
100004894:	cmp	esi, 0x22
100004897:	jne	0x1000048b5
100004899:	ucomisd	xmm1, qword ptr [rip + 0x6c3f]
1000048a1:	not	cl
1000048a3:	seta	al
1000048a6:	or	al, cl
1000048a8:	movzx	eax, al
1000048ab:	and	eax, 0x1
1000048ae:	neg	eax
1000048b0:	jmp	0x1000047d7
1000048b5:	test	cl, cl
1000048b7:	jne	0x1000047d7
1000048bd:	cmp	r13d, 0x22
1000048c1:	sete	cl
1000048c4:	movsd	xmm0, qword ptr [rip + 0x6c1c]
1000048cc:	ucomisd	xmm1, xmm0
1000048d0:	setae	al
1000048d3:	and	al, cl
1000048d5:	ucomisd	xmm2, xmm0
1000048d9:	movapd	xmm0, xmm2
1000048dd:	jb	0x100004911
1000048df:	cmp	esi, 0x22
1000048e2:	jne	0x100004911
1000048e4:	xor	al, 0x1
1000048e6:	movzx	eax, al
1000048e9:	jmp	0x1000047d7
1000048ee:	test	cl, cl
1000048f0:	jne	0x1000047d7
1000048f6:	movsd	xmm0, qword ptr [r15 + 0x10]
1000048fc:	movsd	xmm1, qword ptr [r14 + 0x10]
100004902:	jmp	0x10000480b
100004907:	mov	eax, 0xffffffff
10000490c:	jmp	0x1000047d7
100004911:	ucomisd	xmm1, xmm0
100004915:	seta	cl
100004918:	or	cl, al
10000491a:	mov	eax, 0xffffffff
10000491f:	je	0x100004816
100004925:	jmp	0x1000047d7
10000492a:	mov	eax, 0xffffffff
10000492f:	movapd	xmm1, xmm0
100004933:	movsd	xmm0, qword ptr [rbp - 0x38]
100004938:	ucomisd	xmm0, xmm0
10000493c:	jnp	0x1000047d7
100004942:	xor	ecx, ecx
100004944:	ucomisd	xmm1, xmm0
100004948:	seta	cl
10000494b:	ucomisd	xmm0, xmm1
10000494f:	jmp	0x10000475b
100004954:	push	rbp
100004955:	mov	rbp, rsp
100004958:	push	r15
10000495a:	push	r14
10000495c:	push	r13
10000495e:	push	r12
100004960:	push	rbx
100004961:	push	rax
100004962:	mov	r14, rsi
100004965:	mov	r12, rdi
100004968:	lea	rax, [rip + 0xc0c1]
10000496f:	cmp	byte ptr [rax], 0x0
100004972:	je	0x1000049ad
100004974:	mov	rbx, qword ptr [rip + 0x76b5] ## literal pool symbol address: ___stdoutp
10000497b:	mov	rdi, qword ptr [rbx]
10000497e:	mov	rsi, qword ptr [r12]
100004982:	lea	rdx, [rip + 0x6c4f] ## literal pool for: "; k1=<"
100004989:	lea	r15, [rip + 0x6bfc] ## literal pool for: ">"
100004990:	mov	rcx, r15
100004993:	call	0x100002bee
100004998:	mov	rdi, qword ptr [rbx]
10000499b:	mov	rsi, qword ptr [r14]
10000499e:	lea	rdx, [rip + 0x6c47] ## literal pool for: "; k2=<"
1000049a5:	mov	rcx, r15
1000049a8:	call	0x100002bee
1000049ad:	mov	eax, dword ptr [r12 + 0x8]
1000049b2:	test	eax, eax
1000049b4:	je	0x1000049ba
1000049b6:	xor	edx, edx
1000049b8:	jmp	0x1000049d8
1000049ba:	mov	rdi, qword ptr [r12]
1000049be:	call	0x1000039ea
1000049c3:	mov	dword ptr [r12 + 0x10], eax
1000049c8:	mov	dword ptr [r12 + 0x8], 0x1
1000049d1:	mov	dl, 0x1
1000049d3:	mov	eax, 0x1
1000049d8:	mov	ecx, dword ptr [r14 + 0x8]
1000049dc:	xor	r15d, r15d
1000049df:	mov	r13d, 0x0
1000049e5:	test	ecx, ecx
1000049e7:	jne	0x100004a0e
1000049e9:	mov	rdi, qword ptr [r14]
1000049ec:	mov	ebx, edx
1000049ee:	call	0x1000039ea
1000049f3:	mov	edx, ebx
1000049f5:	mov	dword ptr [r14 + 0x10], eax
1000049f9:	mov	dword ptr [r14 + 0x8], 0x1
100004a01:	mov	eax, dword ptr [r12 + 0x8]
100004a06:	mov	r13b, 0x1
100004a09:	mov	ecx, 0x1
100004a0e:	cmp	eax, 0x1
100004a11:	jne	0x100004a1a
100004a13:	mov	r15d, dword ptr [r12 + 0x10]
100004a18:	mov	dl, 0x1
100004a1a:	xor	ebx, ebx
100004a1c:	cmp	ecx, 0x1
100004a1f:	jne	0x100004a28
100004a21:	mov	ebx, dword ptr [r14 + 0x10]
100004a25:	mov	r13b, 0x1
100004a28:	test	dl, dl
100004a2a:	jne	0x100004a38
100004a2c:	mov	rdi, qword ptr [r12]
100004a30:	call	0x1000039ea
100004a35:	mov	r15d, eax
100004a38:	test	r13b, r13b
100004a3b:	jne	0x100004a47
100004a3d:	mov	rdi, qword ptr [r14]
100004a40:	call	0x1000039ea
100004a45:	mov	ebx, eax
100004a47:	xor	ecx, ecx
100004a49:	xor	eax, eax
100004a4b:	cmp	r15d, ebx
100004a4e:	setge	al
100004a51:	lea	eax, [rax + rax - 0x1]
100004a55:	cmove	eax, ecx
100004a58:	add	rsp, 0x8
100004a5c:	pop	rbx
100004a5d:	pop	r12
100004a5f:	pop	r13
100004a61:	pop	r14
100004a63:	pop	r15
100004a65:	pop	rbp
100004a66:	ret
100004a67:	push	rbp
100004a68:	mov	rbp, rsp
100004a6b:	push	r15
100004a6d:	push	r14
100004a6f:	push	r13
100004a71:	push	r12
100004a73:	push	rbx
100004a74:	sub	rsp, 0xc8
100004a7b:	mov	r15, qword ptr [rdi]
100004a7e:	mov	r14, qword ptr [rsi]
100004a81:	lea	rax, [rip + 0xbfa8]
100004a88:	cmp	byte ptr [rax], 0x0
100004a8b:	je	0x100004ac5
100004a8d:	mov	rbx, qword ptr [rip + 0x759c] ## literal pool symbol address: ___stdoutp
100004a94:	mov	rdi, qword ptr [rbx]
100004a97:	lea	rdx, [rip + 0x6b3a] ## literal pool for: "; k1=<"
100004a9e:	lea	r12, [rip + 0x6ae7] ## literal pool for: ">"
100004aa5:	mov	rsi, r15
100004aa8:	mov	rcx, r12
100004aab:	call	0x100002bee
100004ab0:	mov	rdi, qword ptr [rbx]
100004ab3:	lea	rdx, [rip + 0x6b2b] ## literal pool for: ", k2=<"
100004aba:	mov	rsi, r14
100004abd:	mov	rcx, r12
100004ac0:	call	0x100002bee
100004ac5:	cmp	r15, r14
100004ac8:	je	0x100004b95
100004ace:	lea	rax, [rip + 0xbf5f]
100004ad5:	lea	r13, [rbp - 0xe8]
100004adc:	mov	ecx, 0x17
100004ae1:	mov	rdi, r13
100004ae4:	mov	rsi, rax
100004ae7:	rep		movsd	dword ptr es:[rdi], dword ptr [rsi]
100004ae9:	lea	r12, [rbp - 0x88]
100004af0:	mov	ecx, 0x17
100004af5:	mov	rdi, r12
100004af8:	mov	rsi, rax
100004afb:	rep		movsd	dword ptr es:[rdi], dword ptr [rsi]
100004afd:	mov	rdi, r15
100004b00:	call	0x100002c20
100004b05:	mov	rbx, rax
100004b08:	mov	rdi, r15
100004b0b:	call	0x100002c2a
100004b10:	mov	rdi, r13
100004b13:	mov	rsi, rbx
100004b16:	mov	edx, eax
100004b18:	call	0x10000ad4a ## symbol stub for: _CC_MD5_Update
100004b1d:	mov	rdi, r14
100004b20:	call	0x100002c20
100004b25:	mov	rbx, rax
100004b28:	mov	rdi, r14
100004b2b:	call	0x100002c2a
100004b30:	mov	rdi, r12
100004b33:	mov	rsi, rbx
100004b36:	mov	edx, eax
100004b38:	call	0x10000ad4a ## symbol stub for: _CC_MD5_Update
100004b3d:	xor	ebx, ebx
100004b3f:	mov	rdi, r13
100004b42:	xor	esi, esi
100004b44:	call	0x100005b30
100004b49:	mov	r13, rax
100004b4c:	mov	rdi, r12
100004b4f:	xor	esi, esi
100004b51:	call	0x100005b30
100004b56:	mov	r12, rax
100004b59:	test	r13, r13
100004b5c:	je	0x100004b99
100004b5e:	test	r12, r12
100004b61:	je	0x100004bad
100004b63:	mov	rdi, r13
100004b66:	mov	rsi, r12
100004b69:	call	0x10000af5a ## symbol stub for: _strcmp
100004b6e:	mov	ebx, eax
100004b70:	mov	rdi, r13
100004b73:	call	0x100007927
100004b78:	mov	rdi, r12
100004b7b:	call	0x100007927
100004b80:	test	ebx, ebx
100004b82:	jne	0x100004bba
100004b84:	mov	rdi, r15
100004b87:	mov	rsi, r14
100004b8a:	xor	edx, edx
100004b8c:	call	0x1000035a2
100004b91:	mov	ebx, eax
100004b93:	jmp	0x100004bba
100004b95:	xor	ebx, ebx
100004b97:	jmp	0x100004bba
100004b99:	test	r12, r12
100004b9c:	je	0x100004bba
100004b9e:	mov	rdi, r12
100004ba1:	call	0x100007927
100004ba6:	mov	ebx, 0xffffffff
100004bab:	jmp	0x100004bba
100004bad:	mov	rdi, r13
100004bb0:	call	0x100007927
100004bb5:	mov	ebx, 0x1
100004bba:	mov	eax, ebx
100004bbc:	add	rsp, 0xc8
100004bc3:	pop	rbx
100004bc4:	pop	r12
100004bc6:	pop	r13
100004bc8:	pop	r14
100004bca:	pop	r15
100004bcc:	pop	rbp
100004bcd:	ret
100004bce:	push	rbp
100004bcf:	mov	rbp, rsp
100004bd2:	push	r15
100004bd4:	push	r14
100004bd6:	push	r12
100004bd8:	push	rbx
100004bd9:	mov	rbx, qword ptr [rdi]
100004bdc:	mov	r14, qword ptr [rsi]
100004bdf:	lea	rax, [rip + 0xbe4a]
100004be6:	cmp	byte ptr [rax], 0x0
100004be9:	je	0x100004c25
100004beb:	mov	r12, qword ptr [rip + 0x743e] ## literal pool symbol address: ___stdoutp
100004bf2:	mov	rdi, qword ptr [r12]
100004bf6:	lea	rdx, [rip + 0x69db] ## literal pool for: "; k1=<"
100004bfd:	lea	r15, [rip + 0x6988] ## literal pool for: ">"
100004c04:	mov	rsi, rbx
100004c07:	mov	rcx, r15
100004c0a:	call	0x100002bee
100004c0f:	mov	rdi, qword ptr [r12]
100004c13:	lea	rdx, [rip + 0x69cb] ## literal pool for: ", k2=<"
100004c1a:	mov	rsi, r14
100004c1d:	mov	rcx, r15
100004c20:	call	0x100002bee
100004c25:	cmp	rbx, r14
100004c28:	je	0x100004c3d
100004c2a:	mov	rdi, rbx
100004c2d:	mov	rsi, r14
100004c30:	pop	rbx
100004c31:	pop	r12
100004c33:	pop	r14
100004c35:	pop	r15
100004c37:	pop	rbp
100004c38:	jmp	0x10000a46b
100004c3d:	xor	eax, eax
100004c3f:	pop	rbx
100004c40:	pop	r12
100004c42:	pop	r14
100004c44:	pop	r15
100004c46:	pop	rbp
100004c47:	ret
100004c48:	push	rbp
100004c49:	mov	rbp, rsp
100004c4c:	push	r15
100004c4e:	push	r14
100004c50:	push	r13
100004c52:	push	r12
100004c54:	push	rbx
100004c55:	push	rax
100004c56:	mov	r14, rdx
100004c59:	mov	r15, rsi
100004c5c:	mov	rbx, rdi
100004c5f:	lea	rax, [rip + 0xbdca]
100004c66:	cmp	byte ptr [rax], 0x0
100004c69:	je	0x100004ce3
100004c6b:	test	r14, r14
100004c6e:	je	0x100004c81
100004c70:	lea	rdi, [rip + 0x6954] ## literal pool for: "; offset=%d\n"
100004c77:	mov	esi, r14d
100004c7a:	xor	eax, eax
100004c7c:	call	0x10000ae8e ## symbol stub for: _printf
100004c81:	mov	r12, qword ptr [rip + 0x73a8] ## literal pool symbol address: ___stdoutp
100004c88:	mov	rdi, qword ptr [r12]
100004c8c:	mov	rsi, qword ptr [rbx]
100004c8f:	lea	rdx, [rip + 0x6942] ## literal pool for: "; k1=<"
100004c96:	lea	rcx, [rip + 0x68ef] ## literal pool for: ">"
100004c9d:	call	0x100002bee
100004ca2:	mov	rax, qword ptr [rbx]
100004ca5:	mov	rsi, qword ptr [rax]
100004ca8:	lea	r13, [rip + 0x6930] ## literal pool for: "(%zu)"
100004caf:	mov	rdi, r13
100004cb2:	xor	eax, eax
100004cb4:	call	0x10000ae8e ## symbol stub for: _printf
100004cb9:	mov	rdi, qword ptr [r12]
100004cbd:	mov	rsi, qword ptr [r15]
100004cc0:	lea	rdx, [rip + 0x691e] ## literal pool for: ", k2=<"
100004cc7:	lea	rcx, [rip + 0x68be] ## literal pool for: ">"
100004cce:	call	0x100002bee
100004cd3:	mov	rax, qword ptr [r15]
100004cd6:	mov	rsi, qword ptr [rax]
100004cd9:	mov	rdi, r13
100004cdc:	xor	eax, eax
100004cde:	call	0x10000ae8e ## symbol stub for: _printf
100004ce3:	mov	rdi, qword ptr [rbx]
100004ce6:	mov	rsi, qword ptr [r15]
100004ce9:	mov	rdx, r14
100004cec:	add	rsp, 0x8
100004cf0:	pop	rbx
100004cf1:	pop	r12
100004cf3:	pop	r13
100004cf5:	pop	r14
100004cf7:	pop	r15
100004cf9:	pop	rbp
100004cfa:	jmp	0x1000035a2
100004cff:	push	rbp
100004d00:	mov	rbp, rsp
100004d03:	push	r15
100004d05:	push	r14
100004d07:	push	r13
100004d09:	push	r12
100004d0b:	push	rbx
100004d0c:	push	rax
100004d0d:	cmp	qword ptr [rip + 0xbceb], 0x0
100004d15:	je	0x100004d84
100004d17:	mov	rax, rdx
100004d1a:	mov	r14, rsi
100004d1d:	mov	r15, rdi
100004d20:	xor	r13d, r13d
100004d23:	lea	r12, [rip + 0xbd66]
100004d2a:	xor	ebx, ebx
100004d2c:	cmp	byte ptr [r12], 0x0
100004d31:	mov	ecx, 0x8
100004d36:	je	0x100004d3d
100004d38:	mov	ecx, 0x20
100004d3d:	imul	rcx, rbx
100004d41:	lea	rsi, [r15 + rcx]
100004d45:	add	rcx, r14
100004d48:	mov	rdx, qword ptr [rip + 0xbcc1]
100004d4f:	cmp	byte ptr [rdx + r13 + 0xf], 0x0
100004d55:	mov	r8, qword ptr [rdx + r13]
100004d59:	je	0x100004d60
100004d5b:	mov	rdi, rcx
100004d5e:	jmp	0x100004d66
100004d60:	mov	rdi, rsi
100004d63:	mov	rsi, rcx
100004d66:	mov	rdx, rax
100004d69:	call	r8
100004d6c:	test	eax, eax
100004d6e:	jne	0x100004d86
100004d70:	inc	rbx
100004d73:	add	r13, 0x40
100004d77:	xor	eax, eax
100004d79:	cmp	rbx, qword ptr [rip + 0xbc80]
100004d80:	jb	0x100004d2c
100004d82:	jmp	0x100004d86
100004d84:	xor	eax, eax
100004d86:	add	rsp, 0x8
100004d8a:	pop	rbx
100004d8b:	pop	r12
100004d8d:	pop	r13
100004d8f:	pop	r14
100004d91:	pop	r15
100004d93:	pop	rbp
100004d94:	ret
100004d95:	push	rbp
100004d96:	mov	rbp, rsp
100004d99:	lea	rax, [rip + 0x7388]
100004da0:	mov	rax, qword ptr [rax]
100004da3:	cmp	byte ptr [rax + 0xf], 0x0
100004da7:	mov	rax, rdi
100004daa:	cmove	rax, rsi
100004dae:	cmovne	rdi, rsi
100004db2:	mov	rsi, rax
100004db5:	xor	edx, edx
100004db7:	pop	rbp
100004db8:	jmp	0x1000035a2
100004dbd:	push	rbp
100004dbe:	mov	rbp, rsp
100004dc1:	push	r15
100004dc3:	push	r14
100004dc5:	push	r13
100004dc7:	push	r12
100004dc9:	push	rbx
100004dca:	push	rax
100004dcb:	mov	r15, rsi
100004dce:	mov	r14, rdi
100004dd1:	call	0x100003f70
100004dd6:	mov	rbx, rax
100004dd9:	mov	rdi, r14
100004ddc:	mov	rsi, rax
100004ddf:	call	0x100004271
100004de4:	mov	rsi, qword ptr [r15]
100004de7:	mov	rdi, qword ptr [rsi]
100004dea:	add	rsi, 0x8
100004dee:	call	0x100004271
100004df3:	lea	r13, [rip + 0xbc36]
100004dfa:	cmp	byte ptr [r13], 0x0
100004dff:	je	0x100004e45
100004e01:	mov	r13, qword ptr [rip + 0x7228] ## literal pool symbol address: ___stdoutp
100004e08:	mov	rdi, qword ptr [r13]
100004e0c:	lea	rdx, [rip + 0x6772] ## literal pool for: "; s1=<"
100004e13:	lea	r12, [rip + 0x6772] ## literal pool for: ">"
100004e1a:	mov	rsi, r14
100004e1d:	mov	rcx, r12
100004e20:	call	0x100002bee
100004e25:	mov	rdi, qword ptr [r13]
100004e29:	lea	r13, [rip + 0xbc00]
100004e30:	mov	rax, qword ptr [r15]
100004e33:	mov	rsi, qword ptr [rax]
100004e36:	lea	rdx, [rip + 0x6751] ## literal pool for: ", s2=<"
100004e3d:	mov	rcx, r12
100004e40:	call	0x100002bee
100004e45:	mov	rsi, qword ptr [r15]
100004e48:	add	rsi, 0x8
100004e4c:	mov	rdi, rbx
100004e4f:	xor	edx, edx
100004e51:	call	0x100004cff
100004e56:	mov	r12d, eax
100004e59:	cmp	byte ptr [r13], 0x0
100004e5e:	je	0x100004e71
100004e60:	lea	rdi, [rip + 0x672e] ## literal pool for: "; cmp1=%d"
100004e67:	mov	esi, r12d
100004e6a:	xor	eax, eax
100004e6c:	call	0x10000ae8e ## symbol stub for: _printf
100004e71:	mov	rdi, r14
100004e74:	mov	rsi, rbx
100004e77:	call	0x100003fdb
100004e7c:	mov	rdi, rbx
100004e7f:	call	0x100007927
100004e84:	test	r12d, r12d
100004e87:	je	0x100004eac
100004e89:	cmp	byte ptr [r13], 0x0
100004e8e:	je	0x100004e9a
100004e90:	mov	edi, 0xa
100004e95:	call	0x10000aee8 ## symbol stub for: _putchar
100004e9a:	mov	eax, r12d
100004e9d:	add	rsp, 0x8
100004ea1:	pop	rbx
100004ea2:	pop	r12
100004ea4:	pop	r13
100004ea6:	pop	r14
100004ea8:	pop	r15
100004eaa:	pop	rbp
100004eab:	ret
100004eac:	lea	rax, [rip + 0xbbe1]
100004eb3:	xor	r12d, r12d
100004eb6:	cmp	byte ptr [rax + 0xc], 0x0
100004eba:	jne	0x100004e89
100004ebc:	cmp	byte ptr [rax + 0x10], 0x0
100004ec0:	je	0x100004e89
100004ec2:	mov	rax, qword ptr [r15]
100004ec5:	mov	rdi, qword ptr [rax]
100004ec8:	lea	rax, [rip + 0x7259]
100004ecf:	mov	rax, qword ptr [rax]
100004ed2:	cmp	byte ptr [rax + 0xf], 0x0
100004ed6:	mov	rsi, r14
100004ed9:	cmove	rsi, rdi
100004edd:	cmove	rdi, r14
100004ee1:	xor	edx, edx
100004ee3:	call	0x1000035a2
100004ee8:	mov	r12d, eax
100004eeb:	cmp	byte ptr [r13], 0x0
100004ef0:	je	0x100004e9a
100004ef2:	lea	rdi, [rip + 0x66a6] ## literal pool for: "; cmp2=%d"
100004ef9:	mov	esi, r12d
100004efc:	xor	eax, eax
100004efe:	call	0x10000ae8e ## symbol stub for: _printf
100004f03:	jmp	0x100004e89
100004f05:	push	rbp
100004f06:	mov	rbp, rsp
100004f09:	push	r15
100004f0b:	push	r14
100004f0d:	push	r13
100004f0f:	push	r12
100004f11:	push	rbx
100004f12:	push	rax
100004f13:	mov	rbx, rdx
100004f16:	mov	r14, rsi
100004f19:	mov	r15, rdi
100004f1c:	mov	rdi, qword ptr [rdi]
100004f1f:	add	rdi, 0x8
100004f23:	mov	rsi, qword ptr [rsi]
100004f26:	add	rsi, 0x8
100004f2a:	call	0x100004cff
100004f2f:	mov	r12d, eax
100004f32:	lea	rax, [rip + 0xbaf7]
100004f39:	cmp	byte ptr [rax], 0x0
100004f3c:	je	0x100004fa4
100004f3e:	test	rbx, rbx
100004f41:	je	0x100004f53
100004f43:	lea	rdi, [rip + 0x665f] ## literal pool for: "; offset=%d"
100004f4a:	mov	esi, ebx
100004f4c:	xor	eax, eax
100004f4e:	call	0x10000ae8e ## symbol stub for: _printf
100004f53:	mov	r13, qword ptr [rip + 0x70d6] ## literal pool symbol address: ___stdoutp
100004f5a:	mov	rdi, qword ptr [r13]
100004f5e:	mov	rax, qword ptr [r15]
100004f61:	mov	rsi, qword ptr [rax]
100004f64:	lea	rdx, [rip + 0x661a] ## literal pool for: "; s1=<"
100004f6b:	lea	rbx, [rip + 0x661a] ## literal pool for: ">"
100004f72:	mov	rcx, rbx
100004f75:	call	0x100002bee
100004f7a:	mov	rdi, qword ptr [r13]
100004f7e:	mov	rax, qword ptr [r14]
100004f81:	mov	rsi, qword ptr [rax]
100004f84:	lea	rdx, [rip + 0x6603] ## literal pool for: ", s2=<"
100004f8b:	mov	rcx, rbx
100004f8e:	call	0x100002bee
100004f93:	lea	rdi, [rip + 0x661b] ## literal pool for: "; cmp1=%d\n"
100004f9a:	mov	esi, r12d
100004f9d:	xor	eax, eax
100004f9f:	call	0x10000ae8e ## symbol stub for: _printf
100004fa4:	test	r12d, r12d
100004fa7:	je	0x100004fbb
100004fa9:	mov	eax, r12d
100004fac:	add	rsp, 0x8
100004fb0:	pop	rbx
100004fb1:	pop	r12
100004fb3:	pop	r13
100004fb5:	pop	r14
100004fb7:	pop	r15
100004fb9:	pop	rbp
100004fba:	ret
100004fbb:	lea	rax, [rip + 0xbad2]
100004fc2:	xor	r12d, r12d
100004fc5:	cmp	byte ptr [rax + 0xc], 0x0
100004fc9:	jne	0x100004fa9
100004fcb:	cmp	byte ptr [rax + 0x10], 0x0
100004fcf:	je	0x100004fa9
100004fd1:	mov	rax, qword ptr [r15]
100004fd4:	mov	rax, qword ptr [rax]
100004fd7:	mov	rcx, qword ptr [r14]
100004fda:	mov	rdi, qword ptr [rcx]
100004fdd:	lea	rcx, [rip + 0x7144]
100004fe4:	mov	rcx, qword ptr [rcx]
100004fe7:	cmp	byte ptr [rcx + 0xf], 0x0
100004feb:	mov	rsi, rax
100004fee:	cmove	rsi, rdi
100004ff2:	cmove	rdi, rax
100004ff6:	xor	edx, edx
100004ff8:	call	0x1000035a2
100004ffd:	mov	r12d, eax
100005000:	lea	rax, [rip + 0xba29]
100005007:	cmp	byte ptr [rax], 0x0
10000500a:	je	0x100004fa9
10000500c:	lea	rdi, [rip + 0x65ad] ## literal pool for: "; cmp2=%d\n"
100005013:	mov	esi, r12d
100005016:	xor	eax, eax
100005018:	call	0x10000ae8e ## symbol stub for: _printf
10000501d:	jmp	0x100004fa9
10000501f:	push	rbp
100005020:	mov	rbp, rsp
100005023:	xor	edx, edx
100005025:	pop	rbp
100005026:	jmp	0x100004f05
10000502b:	cmp	rdi, 0x14
10000502f:	ja	0x100005042
100005031:	push	rbp
100005032:	mov	rbp, rsp
100005035:	lea	rax, [rip + 0x7044]
10000503c:	mov	rax, qword ptr [rax + 8*rdi]
100005040:	pop	rbp
100005041:	ret
100005042:	lea	rax, [rip - 0x2a]
100005049:	ret
10000504a:	push	rbp
10000504b:	mov	rbp, rsp
10000504e:	mov	edx, 0x1
100005053:	pop	rbp
100005054:	jmp	0x100004f05
100005059:	push	rbp
10000505a:	mov	rbp, rsp
10000505d:	mov	edx, 0x2
100005062:	pop	rbp
100005063:	jmp	0x100004f05
100005068:	push	rbp
100005069:	mov	rbp, rsp
10000506c:	mov	edx, 0x3
100005071:	pop	rbp
100005072:	jmp	0x100004f05
100005077:	push	rbp
100005078:	mov	rbp, rsp
10000507b:	mov	edx, 0x4
100005080:	pop	rbp
100005081:	jmp	0x100004f05
100005086:	push	rbp
100005087:	mov	rbp, rsp
10000508a:	mov	edx, 0x5
10000508f:	pop	rbp
100005090:	jmp	0x100004f05
100005095:	push	rbp
100005096:	mov	rbp, rsp
100005099:	mov	edx, 0x6
10000509e:	pop	rbp
10000509f:	jmp	0x100004f05
1000050a4:	push	rbp
1000050a5:	mov	rbp, rsp
1000050a8:	mov	edx, 0x7
1000050ad:	pop	rbp
1000050ae:	jmp	0x100004f05
1000050b3:	push	rbp
1000050b4:	mov	rbp, rsp
1000050b7:	mov	edx, 0x8
1000050bc:	pop	rbp
1000050bd:	jmp	0x100004f05
1000050c2:	push	rbp
1000050c3:	mov	rbp, rsp
1000050c6:	mov	edx, 0x9
1000050cb:	pop	rbp
1000050cc:	jmp	0x100004f05
1000050d1:	push	rbp
1000050d2:	mov	rbp, rsp
1000050d5:	mov	edx, 0xa
1000050da:	pop	rbp
1000050db:	jmp	0x100004f05
1000050e0:	push	rbp
1000050e1:	mov	rbp, rsp
1000050e4:	mov	edx, 0xb
1000050e9:	pop	rbp
1000050ea:	jmp	0x100004f05
1000050ef:	push	rbp
1000050f0:	mov	rbp, rsp
1000050f3:	mov	edx, 0xc
1000050f8:	pop	rbp
1000050f9:	jmp	0x100004f05
1000050fe:	push	rbp
1000050ff:	mov	rbp, rsp
100005102:	mov	edx, 0xd
100005107:	pop	rbp
100005108:	jmp	0x100004f05
10000510d:	push	rbp
10000510e:	mov	rbp, rsp
100005111:	mov	edx, 0xe
100005116:	pop	rbp
100005117:	jmp	0x100004f05
10000511c:	push	rbp
10000511d:	mov	rbp, rsp
100005120:	mov	edx, 0xf
100005125:	pop	rbp
100005126:	jmp	0x100004f05
10000512b:	push	rbp
10000512c:	mov	rbp, rsp
10000512f:	mov	edx, 0x10
100005134:	pop	rbp
100005135:	jmp	0x100004f05
10000513a:	push	rbp
10000513b:	mov	rbp, rsp
10000513e:	mov	edx, 0x11
100005143:	pop	rbp
100005144:	jmp	0x100004f05
100005149:	push	rbp
10000514a:	mov	rbp, rsp
10000514d:	mov	edx, 0x12
100005152:	pop	rbp
100005153:	jmp	0x100004f05
100005158:	push	rbp
100005159:	mov	rbp, rsp
10000515c:	mov	edx, 0x13
100005161:	pop	rbp
100005162:	jmp	0x100004f05
100005167:	push	rbp
100005168:	mov	rbp, rsp
10000516b:	mov	edx, 0x14
100005170:	pop	rbp
100005171:	jmp	0x100004f05
100005176:	push	rbp
100005177:	mov	rbp, rsp
10000517a:	mov	rax, qword ptr [rdi]
10000517d:	mov	rax, qword ptr [rax]
100005180:	mov	rcx, qword ptr [rsi]
100005183:	mov	rdi, qword ptr [rcx]
100005186:	lea	rcx, [rip + 0x6f9b]
10000518d:	mov	rcx, qword ptr [rcx]
100005190:	cmp	byte ptr [rcx + 0xf], 0x0
100005194:	mov	rsi, rax
100005197:	cmove	rsi, rdi
10000519b:	cmove	rdi, rax
10000519f:	xor	edx, edx
1000051a1:	pop	rbp
1000051a2:	jmp	0x1000035a2
1000051a7:	push	rbp
1000051a8:	mov	rbp, rsp
1000051ab:	push	r15
1000051ad:	push	r14
1000051af:	push	r13
1000051b1:	push	r12
1000051b3:	push	rbx
1000051b4:	push	rax
1000051b5:	mov	r12, rdi
1000051b8:	cmp	rsi, 0x1
1000051bc:	ja	0x1000051cf
1000051be:	cmp	qword ptr [r12], 0x0
1000051c3:	jne	0x1000051c8
1000051c5:	mov	byte ptr [rdx], 0x1
1000051c8:	xor	ebx, ebx
1000051ca:	jmp	0x10000528d
1000051cf:	mov	r15, rsi
1000051d2:	lea	rsi, [rip + 0xb8bb]
1000051d9:	cmp	byte ptr [rsi + 0xf], 0x0
1000051dd:	mov	rax, qword ptr [r12]
1000051e1:	je	0x100005226
1000051e3:	test	rax, rax
1000051e6:	je	0x100005288
1000051ec:	mov	rcx, qword ptr [rip + 0x6e1d] ## literal pool symbol address: ___mb_cur_max
1000051f3:	mov	ecx, dword ptr [rcx]
1000051f5:	mov	edi, dword ptr [rsi]
1000051f7:	xor	ebx, ebx
1000051f9:	cmp	ecx, 0x1
1000051fc:	jne	0x100005206
1000051fe:	movzx	esi, byte ptr [r12 + rbx + 0x8]
100005204:	jmp	0x10000520b
100005206:	mov	esi, dword ptr [r12 + 4*rbx + 0x8]
10000520b:	cmp	esi, edi
10000520d:	jne	0x10000521c
10000520f:	dec	r15
100005212:	cmp	r15, 0x1
100005216:	jbe	0x10000529f
10000521c:	inc	rbx
10000521f:	cmp	rbx, rax
100005222:	jb	0x1000051f9
100005224:	jmp	0x10000528a
100005226:	test	rax, rax
100005229:	je	0x100005288
10000522b:	mov	qword ptr [rbp - 0x30], rdx
10000522f:	mov	cl, 0x1
100005231:	xor	ebx, ebx
100005233:	mov	r14, qword ptr [rip + 0x6dd6] ## literal pool symbol address: ___mb_cur_max
10000523a:	mov	r13d, ecx
10000523d:	lea	rax, [rip + 0xb1ec]
100005244:	mov	rax, qword ptr [rax]
100005247:	cmp	dword ptr [r14], 0x1
10000524b:	jne	0x100005255
10000524d:	movzx	edi, byte ptr [r12 + rbx + 0x8]
100005253:	jmp	0x10000525a
100005255:	mov	edi, dword ptr [r12 + 4*rbx + 0x8]
10000525a:	call	rax
10000525c:	test	eax, eax
10000525e:	setne	cl
100005261:	test	r13b, r13b
100005264:	jne	0x100005273
100005266:	test	eax, eax
100005268:	je	0x100005273
10000526a:	dec	r15
10000526d:	cmp	r15, 0x2
100005271:	jb	0x10000528d
100005273:	inc	rbx
100005276:	cmp	rbx, qword ptr [r12]
10000527a:	jb	0x10000523a
10000527c:	cmp	r15, 0x2
100005280:	mov	rdx, qword ptr [rbp - 0x30]
100005284:	jae	0x10000528a
100005286:	jmp	0x10000528d
100005288:	xor	ebx, ebx
10000528a:	mov	byte ptr [rdx], 0x1
10000528d:	mov	rax, rbx
100005290:	add	rsp, 0x8
100005294:	pop	rbx
100005295:	pop	r12
100005297:	pop	r13
100005299:	pop	r14
10000529b:	pop	r15
10000529d:	pop	rbp
10000529e:	ret
10000529f:	inc	rbx
1000052a2:	jmp	0x10000528d
1000052a4:	push	rbp
1000052a5:	mov	rbp, rsp
1000052a8:	push	r15
1000052aa:	push	r14
1000052ac:	push	r13
1000052ae:	push	r12
1000052b0:	push	rbx
1000052b1:	push	rax
1000052b2:	mov	r12, rdi
1000052b5:	test	rsi, rsi
1000052b8:	je	0x100005342
1000052be:	mov	rbx, rdx
1000052c1:	mov	r15, rsi
1000052c4:	test	cl, cl
1000052c6:	mov	qword ptr [rbp - 0x30], r8
1000052ca:	je	0x100005306
1000052cc:	cmp	qword ptr [r12], rbx
1000052d0:	jbe	0x100005306
1000052d2:	lea	r13, [rip + 0xb157]
1000052d9:	mov	r14, qword ptr [rip + 0x6d30] ## literal pool symbol address: ___mb_cur_max
1000052e0:	mov	rax, qword ptr [r13]
1000052e4:	cmp	dword ptr [r14], 0x1
1000052e8:	jne	0x1000052f2
1000052ea:	movzx	edi, byte ptr [r12 + rbx + 0x8]
1000052f0:	jmp	0x1000052f7
1000052f2:	mov	edi, dword ptr [r12 + 4*rbx + 0x8]
1000052f7:	call	rax
1000052f9:	test	eax, eax
1000052fb:	je	0x100005306
1000052fd:	inc	rbx
100005300:	cmp	rbx, qword ptr [r12]
100005304:	jb	0x1000052e0
100005306:	mov	rcx, qword ptr [r12]
10000530a:	cmp	rbx, rcx
10000530d:	setb	al
100005310:	cmp	r15, 0x2
100005314:	jb	0x100005335
100005316:	cmp	rbx, rcx
100005319:	jae	0x100005335
10000531b:	dec	r15
10000531e:	inc	rbx
100005321:	cmp	rbx, rcx
100005324:	setb	al
100005327:	cmp	r15, 0x2
10000532b:	jb	0x100005335
10000532d:	dec	r15
100005330:	cmp	rbx, rcx
100005333:	jb	0x10000531e
100005335:	test	al, al
100005337:	jne	0x100005349
100005339:	mov	rax, qword ptr [rbp - 0x30]
10000533d:	mov	byte ptr [rax], 0x1
100005340:	jmp	0x100005349
100005342:	mov	rbx, qword ptr [r12]
100005346:	inc	rbx
100005349:	mov	rax, rbx
10000534c:	add	rsp, 0x8
100005350:	pop	rbx
100005351:	pop	r12
100005353:	pop	r13
100005355:	pop	r14
100005357:	pop	r15
100005359:	pop	rbp
10000535a:	ret
10000535b:	push	rbp
10000535c:	mov	rbp, rsp
10000535f:	push	r15
100005361:	push	r14
100005363:	push	r13
100005365:	push	r12
100005367:	push	rbx
100005368:	sub	rsp, 0x898
10000536f:	mov	dword ptr [rbp - 0x880], edx
100005375:	mov	rbx, rsi
100005378:	mov	rax, qword ptr [rip + 0x6c99] ## literal pool symbol address: ___stack_chk_guard
10000537f:	mov	rax, qword ptr [rax]
100005382:	mov	qword ptr [rbp - 0x30], rax
100005386:	mov	r13, qword ptr [rdi]
100005389:	mov	r12, qword ptr [rsi]
10000538c:	xor	r14d, r14d
10000538f:	mov	dword ptr [rbp - 0x878], r14d
100005396:	mov	dword ptr [rbp - 0x87c], r14d
10000539d:	mov	qword ptr [rbp - 0x898], r14
1000053a4:	mov	qword ptr [rbp - 0x888], r14
1000053ab:	mov	qword ptr [rbp - 0x8a8], r14
1000053b2:	mov	qword ptr [rbp - 0x890], r14
1000053b9:	lea	rax, [rip + 0xb670]
1000053c0:	cmp	byte ptr [rax], 0x0
1000053c3:	je	0x10000540b
1000053c5:	mov	rax, qword ptr [rip + 0x6c64] ## literal pool symbol address: ___stdoutp
1000053cc:	mov	r15, rdi
1000053cf:	mov	rdi, qword ptr [rax]
1000053d2:	lea	rdx, [rip + 0x61ff] ## literal pool for: "; k1=<"
1000053d9:	lea	rcx, [rip + 0x61ac] ## literal pool for: ">"
1000053e0:	mov	rsi, r13
1000053e3:	call	0x100002bee
1000053e8:	mov	rax, qword ptr [rip + 0x6c41] ## literal pool symbol address: ___stdoutp
1000053ef:	mov	rdi, qword ptr [rax]
1000053f2:	lea	rdx, [rip + 0x61ec] ## literal pool for: ", k2=<"
1000053f9:	mov	rsi, r12
1000053fc:	lea	rcx, [rip + 0x6189] ## literal pool for: ">"
100005403:	call	0x100002bee
100005408:	mov	rdi, r15
10000540b:	cmp	r13, r12
10000540e:	je	0x1000057df
100005414:	mov	eax, dword ptr [rdi + 0x8]
100005417:	test	eax, eax
100005419:	je	0x100005422
10000541b:	xor	esi, esi
10000541d:	jmp	0x1000054b6
100005422:	lea	rax, [rbp - 0x872]
100005429:	mov	qword ptr [rsp], rax
10000542d:	lea	rsi, [rbp - 0x87c]
100005434:	lea	r14, [rbp - 0x660]
10000543b:	lea	rcx, [rbp - 0x888]
100005442:	lea	r8, [rbp - 0x240]
100005449:	lea	r9, [rbp - 0x890]
100005450:	mov	r15, rdi
100005453:	mov	rdi, r13
100005456:	mov	rdx, r14
100005459:	call	0x100005809
10000545e:	mov	rdi, r14
100005461:	xor	esi, esi
100005463:	mov	edx, 0xa
100005468:	call	0x10000afd8 ## symbol stub for: _wcstoull
10000546d:	mov	rdi, r15
100005470:	mov	qword ptr [r15 + 0x10], rax
100005474:	lea	rcx, [rbp - 0x890]
10000547b:	mov	rcx, qword ptr [rcx]
10000547e:	lea	rdx, [rbp - 0x888]
100005485:	or	rcx, qword ptr [rdx]
100005488:	jne	0x10000548e
10000548a:	mov	byte ptr [rdi + 0x19], 0x1
10000548e:	mov	cl, byte ptr [rbp - 0x872]
100005494:	mov	byte ptr [rdi + 0x18], cl
100005497:	xor	ecx, ecx
100005499:	cmp	rax, -0x1
10000549d:	setne	cl
1000054a0:	lea	eax, [rcx + rcx - 0x1]
1000054a4:	mov	dword ptr [rdi + 0x8], eax
1000054a7:	mov	ecx, dword ptr [rbp - 0x87c]
1000054ad:	shr	ecx, 0x1f
1000054b0:	mov	byte ptr [rdi + 0x1a], cl
1000054b3:	mov	sil, 0x1
1000054b6:	mov	ecx, dword ptr [rbx + 0x8]
1000054b9:	test	ecx, ecx
1000054bb:	je	0x1000054cb
1000054bd:	xor	r14d, r14d
1000054c0:	xor	r8d, r8d
1000054c3:	xor	r15d, r15d
1000054c6:	jmp	0x100005578
1000054cb:	mov	dword ptr [rbp - 0x89c], esi
1000054d1:	mov	qword ptr [rbp - 0x8b0], rdi
1000054d8:	lea	rax, [rbp - 0x871]
1000054df:	mov	qword ptr [rsp], rax
1000054e3:	lea	rsi, [rbp - 0x878]
1000054ea:	lea	r14, [rbp - 0x870]
1000054f1:	lea	rcx, [rbp - 0x898]
1000054f8:	lea	r8, [rbp - 0x450]
1000054ff:	lea	r15, [rbp - 0x8a8]
100005506:	mov	rdi, r12
100005509:	mov	rdx, r14
10000550c:	mov	r9, r15
10000550f:	call	0x100005809
100005514:	mov	rdi, r14
100005517:	xor	esi, esi
100005519:	mov	edx, 0xa
10000551e:	call	0x10000afd8 ## symbol stub for: _wcstoull
100005523:	mov	qword ptr [rbx + 0x10], rax
100005527:	lea	rcx, [rbp - 0x898]
10000552e:	mov	r8, qword ptr [rcx]
100005531:	mov	r14, qword ptr [r15]
100005534:	mov	rcx, r14
100005537:	or	rcx, r8
10000553a:	jne	0x100005540
10000553c:	mov	byte ptr [rbx + 0x19], 0x1
100005540:	mov	cl, byte ptr [rbp - 0x871]
100005546:	mov	byte ptr [rbx + 0x18], cl
100005549:	xor	ecx, ecx
10000554b:	cmp	rax, -0x1
10000554f:	setne	cl
100005552:	lea	ecx, [rcx + rcx - 0x1]
100005556:	mov	dword ptr [rbx + 0x8], ecx
100005559:	mov	eax, dword ptr [rbp - 0x878]
10000555f:	shr	eax, 0x1f
100005562:	mov	byte ptr [rbx + 0x1a], al
100005565:	mov	rdi, qword ptr [rbp - 0x8b0]
10000556c:	mov	eax, dword ptr [rdi + 0x8]
10000556f:	mov	r15b, 0x1
100005572:	mov	esi, dword ptr [rbp - 0x89c]
100005578:	cmp	eax, 0x1
10000557b:	jne	0x100005644
100005581:	cmp	ecx, 0x1
100005584:	jne	0x100005644
10000558a:	mov	r9, r14
10000558d:	mov	dl, byte ptr [rdi + 0x19]
100005590:	mov	cl, byte ptr [rbx + 0x19]
100005593:	test	dl, dl
100005595:	je	0x1000055a2
100005597:	xor	r14d, r14d
10000559a:	test	cl, cl
10000559c:	jne	0x1000057df
1000055a2:	mov	r10b, byte ptr [rdi + 0x1a]
1000055a6:	mov	al, byte ptr [rbx + 0x1a]
1000055a9:	test	r10b, r10b
1000055ac:	je	0x1000055bc
1000055ae:	mov	r14d, 0xffffffff
1000055b4:	test	al, al
1000055b6:	je	0x1000057df
1000055bc:	test	al, al
1000055be:	je	0x1000055cf
1000055c0:	mov	r14d, 0x1
1000055c6:	test	r10b, r10b
1000055c9:	je	0x1000057df
1000055cf:	test	dl, dl
1000055d1:	je	0x1000055d8
1000055d3:	movzx	eax, al
1000055d6:	jmp	0x1000055e4
1000055d8:	test	cl, cl
1000055da:	je	0x1000055ee
1000055dc:	xor	eax, eax
1000055de:	test	r10b, r10b
1000055e1:	sete	al
1000055e4:	lea	r14d, [rax + rax - 0x1]
1000055e9:	jmp	0x1000057df
1000055ee:	cmp	byte ptr [rbp - 0x880], 0x0
1000055f5:	je	0x100005615
1000055f7:	movsx	eax, byte ptr [rdi + 0x18]
1000055fb:	movsx	ecx, byte ptr [rbx + 0x18]
1000055ff:	sub	eax, ecx
100005601:	je	0x100005615
100005603:	mov	r14d, eax
100005606:	neg	r14d
100005609:	test	r10b, r10b
10000560c:	cmove	r14d, eax
100005610:	jmp	0x1000057df
100005615:	mov	rax, qword ptr [rdi + 0x10]
100005619:	mov	rdx, qword ptr [rbx + 0x10]
10000561d:	cmp	rax, rdx
100005620:	jae	0x100005628
100005622:	movzx	eax, r10b
100005626:	jmp	0x1000055e4
100005628:	xor	ecx, ecx
10000562a:	test	r10b, r10b
10000562d:	sete	bl
100005630:	cmp	rax, rdx
100005633:	mov	r14, r9
100005636:	jbe	0x100005644
100005638:	mov	cl, bl
10000563a:	lea	r14d, [rcx + rcx - 0x1]
10000563f:	jmp	0x1000057df
100005644:	test	sil, sil
100005647:	jne	0x100005685
100005649:	lea	rax, [rbp - 0x872]
100005650:	mov	qword ptr [rsp], rax
100005654:	lea	rsi, [rbp - 0x87c]
10000565b:	lea	rdx, [rbp - 0x660]
100005662:	lea	rcx, [rbp - 0x888]
100005669:	mov	rbx, r8
10000566c:	lea	r8, [rbp - 0x240]
100005673:	lea	r9, [rbp - 0x890]
10000567a:	mov	rdi, r13
10000567d:	call	0x100005809
100005682:	mov	r8, rbx
100005685:	test	r15b, r15b
100005688:	jne	0x1000056cc
10000568a:	lea	rax, [rbp - 0x871]
100005691:	mov	qword ptr [rsp], rax
100005695:	lea	rsi, [rbp - 0x878]
10000569c:	lea	rdx, [rbp - 0x870]
1000056a3:	lea	r14, [rbp - 0x898]
1000056aa:	lea	r8, [rbp - 0x450]
1000056b1:	lea	rbx, [rbp - 0x8a8]
1000056b8:	mov	rdi, r12
1000056bb:	mov	rcx, r14
1000056be:	mov	r9, rbx
1000056c1:	call	0x100005809
1000056c6:	mov	r8, qword ptr [r14]
1000056c9:	mov	r14, qword ptr [rbx]
1000056cc:	mov	rcx, qword ptr [rbp - 0x888]
1000056d3:	mov	rax, qword ptr [rbp - 0x890]
1000056da:	mov	rsi, rax
1000056dd:	neg	rsi
1000056e0:	mov	rdx, r14
1000056e3:	neg	rdx
1000056e6:	cmp	rcx, rsi
1000056e9:	jne	0x1000056f8
1000056eb:	cmp	r8, rdx
1000056ee:	jne	0x1000056f8
1000056f0:	xor	r14d, r14d
1000056f3:	jmp	0x1000057df
1000056f8:	mov	rdi, r14
1000056fb:	mov	ebx, dword ptr [rbp - 0x87c]
100005701:	mov	r15d, dword ptr [rbp - 0x878]
100005708:	test	ebx, ebx
10000570a:	jns	0x10000571b
10000570c:	mov	r14d, 0xffffffff
100005712:	test	r15d, r15d
100005715:	jns	0x1000057df
10000571b:	test	ebx, ebx
10000571d:	js	0x10000572e
10000571f:	mov	r14d, 0x1
100005725:	test	r15d, r15d
100005728:	js	0x1000057df
10000572e:	cmp	rcx, rsi
100005731:	jne	0x100005741
100005733:	shr	r15d, 0x1f
100005737:	lea	r14d, [r15 + r15 - 0x1]
10000573c:	jmp	0x1000057df
100005741:	cmp	r8, rdx
100005744:	jne	0x100005755
100005746:	not	ebx
100005748:	shr	ebx, 0x1f
10000574b:	lea	r14d, [rbx + rbx - 0x1]
100005750:	jmp	0x1000057df
100005755:	cmp	byte ptr [rbp - 0x880], 0x0
10000575c:	je	0x10000577e
10000575e:	movsx	edx, byte ptr [rbp - 0x872]
100005765:	movsx	esi, byte ptr [rbp - 0x871]
10000576c:	sub	edx, esi
10000576e:	je	0x10000577e
100005770:	mov	r14d, edx
100005773:	neg	r14d
100005776:	test	ebx, ebx
100005778:	cmovns	r14d, edx
10000577c:	jmp	0x1000057df
10000577e:	or	rax, rcx
100005781:	or	rax, r8
100005784:	or	rax, rdi
100005787:	je	0x1000056f0
10000578d:	mov	eax, 0xffffffff
100005792:	cmp	rcx, r8
100005795:	jb	0x1000057d2
100005797:	mov	eax, 0x1
10000579c:	ja	0x1000057d2
10000579e:	lea	rdi, [rbp - 0x660]
1000057a5:	lea	rsi, [rbp - 0x870]
1000057ac:	call	0x10000afc0 ## symbol stub for: _wcscmp
1000057b1:	test	eax, eax
1000057b3:	jne	0x1000057d2
1000057b5:	lea	rdi, [rbp - 0x240]
1000057bc:	lea	rsi, [rbp - 0x450]
1000057c3:	call	0x10000afc0 ## symbol stub for: _wcscmp
1000057c8:	mov	r14d, 0x0
1000057ce:	test	eax, eax
1000057d0:	je	0x1000057df
1000057d2:	mov	r14d, eax
1000057d5:	neg	r14d
1000057d8:	test	r15d, ebx
1000057db:	cmovns	r14d, eax
1000057df:	mov	rax, qword ptr [rip + 0x6832] ## literal pool symbol address: ___stack_chk_guard
1000057e6:	mov	rax, qword ptr [rax]
1000057e9:	cmp	rax, qword ptr [rbp - 0x30]
1000057ed:	jne	0x100005804
1000057ef:	mov	eax, r14d
1000057f2:	add	rsp, 0x898
1000057f9:	pop	rbx
1000057fa:	pop	r12
1000057fc:	pop	r13
1000057fe:	pop	r14
100005800:	pop	r15
100005802:	pop	rbp
100005803:	ret
100005804:	call	0x10000ad68 ## symbol stub for: ___stack_chk_fail
100005809:	push	rbp
10000580a:	mov	rbp, rsp
10000580d:	push	r15
10000580f:	push	r14
100005811:	push	r13
100005813:	push	r12
100005815:	push	rbx
100005816:	sub	rsp, 0x18
10000581a:	mov	r12, r9
10000581d:	mov	r13, r8
100005820:	mov	qword ptr [rbp - 0x38], rcx
100005824:	mov	qword ptr [rbp - 0x30], rdx
100005828:	mov	qword ptr [rbp - 0x40], rsi
10000582c:	mov	rbx, rdi
10000582f:	add	rbx, 0x8
100005833:	mov	dword ptr [r8], 0x0
10000583a:	mov	r14, qword ptr [rip + 0x67cf] ## literal pool symbol address: ___mb_cur_max
100005841:	mov	ecx, dword ptr [r14]
100005844:	lea	r15, [rip + 0xabe5]
10000584b:	mov	rax, qword ptr [r15]
10000584e:	cmp	ecx, 0x1
100005851:	jne	0x100005858
100005853:	movzx	edi, byte ptr [rbx]
100005856:	jmp	0x10000585a
100005858:	mov	edi, dword ptr [rbx]
10000585a:	call	rax
10000585c:	mov	ecx, dword ptr [r14]
10000585f:	test	eax, eax
100005861:	je	0x100005876
100005863:	xor	eax, eax
100005865:	cmp	ecx, 0x1
100005868:	setne	al
10000586b:	lea	rax, [rax + 2*rax]
10000586f:	lea	rbx, [rbx + rax + 0x1]
100005874:	jmp	0x10000584b
100005876:	cmp	ecx, 0x1
100005879:	jne	0x100005880
10000587b:	movzx	eax, byte ptr [rbx]
10000587e:	jmp	0x100005882
100005880:	mov	eax, dword ptr [rbx]
100005882:	mov	r9, qword ptr [rbp - 0x38]
100005886:	mov	r10, qword ptr [rbp - 0x30]
10000588a:	cmp	eax, dword ptr [rip + 0xaafc]
100005890:	jne	0x1000058b0
100005892:	mov	rax, qword ptr [rbp - 0x40]
100005896:	mov	dword ptr [rax], 0xffffffff
10000589c:	mov	ecx, dword ptr [r14]
10000589f:	xor	eax, eax
1000058a1:	cmp	ecx, 0x1
1000058a4:	setne	al
1000058a7:	lea	rax, [rax + 2*rax]
1000058ab:	lea	rbx, [rbx + rax + 0x1]
1000058b0:	xor	eax, eax
1000058b2:	cmp	ecx, 0x1
1000058b5:	setne	al
1000058b8:	lea	rdx, [rax + 2*rax + 0x1]
1000058bd:	mov	r8, qword ptr [rip + 0x673c] ## literal pool symbol address: __DefaultRuneLocale
1000058c4:	cmp	ecx, 0x1
1000058c7:	jne	0x1000058ce
1000058c9:	movzx	esi, byte ptr [rbx]
1000058cc:	jmp	0x1000058d9
1000058ce:	mov	esi, dword ptr [rbx]
1000058d0:	cmp	rsi, 0xff
1000058d7:	ja	0x1000058eb
1000058d9:	test	byte ptr [r8 + 4*rsi + 0x3d], 0x4
1000058df:	je	0x1000058eb
1000058e1:	cmp	esi, 0x30
1000058e4:	jne	0x1000058eb
1000058e6:	add	rbx, rdx
1000058e9:	jmp	0x1000058c4
1000058eb:	xor	edx, edx
1000058ed:	cmp	ecx, 0x1
1000058f0:	jne	0x1000058fb
1000058f2:	mov	dil, byte ptr [rbx]
1000058f5:	movzx	eax, dil
1000058f9:	jmp	0x1000058ff
1000058fb:	mov	edi, dword ptr [rbx]
1000058fd:	mov	eax, edi
1000058ff:	test	eax, eax
100005901:	je	0x100005994
100005907:	mov	rsi, qword ptr [r9]
10000590a:	cmp	rsi, 0x7f
10000590e:	ja	0x100005994
100005914:	cmp	ecx, 0x1
100005917:	jne	0x100005935
100005919:	movzx	eax, dil
10000591d:	test	byte ptr [r8 + 4*rax + 0x3d], 0x4
100005923:	jne	0x100005970
100005925:	mov	eax, dword ptr [rip + 0xb0dd]
10000592b:	test	eax, eax
10000592d:	je	0x100005994
10000592f:	movzx	esi, dil
100005933:	jmp	0x100005953
100005935:	mov	eax, dword ptr [rbx]
100005937:	cmp	rax, 0xff
10000593d:	ja	0x100005947
10000593f:	test	byte ptr [r8 + 4*rax + 0x3d], 0x4
100005945:	jne	0x100005970
100005947:	mov	eax, dword ptr [rip + 0xb0bb]
10000594d:	test	eax, eax
10000594f:	je	0x100005994
100005951:	mov	esi, dword ptr [rbx]
100005953:	cmp	esi, eax
100005955:	setne	al
100005958:	or	dl, al
10000595a:	test	dl, 0x1
10000595d:	jne	0x100005994
10000595f:	xor	eax, eax
100005961:	cmp	ecx, 0x1
100005964:	setne	al
100005967:	lea	rax, [rax + 2*rax + 0x1]
10000596c:	mov	dl, 0x1
10000596e:	jmp	0x10000598c
100005970:	mov	dword ptr [r10 + 4*rsi], eax
100005974:	mov	ecx, dword ptr [r14]
100005977:	xor	eax, eax
100005979:	cmp	ecx, 0x1
10000597c:	setne	al
10000597f:	lea	rax, [rax + 2*rax + 0x1]
100005984:	inc	rsi
100005987:	mov	qword ptr [r9], rsi
10000598a:	xor	edx, edx
10000598c:	add	rbx, rax
10000598f:	jmp	0x1000058ed
100005994:	mov	rax, qword ptr [r9]
100005997:	mov	dword ptr [r10 + 4*rax], 0x0
10000599f:	mov	ecx, dword ptr [r14]
1000059a2:	cmp	ecx, 0x1
1000059a5:	jne	0x1000059ac
1000059a7:	movzx	eax, byte ptr [rbx]
1000059aa:	jmp	0x1000059ae
1000059ac:	mov	eax, dword ptr [rbx]
1000059ae:	cmp	eax, dword ptr [rip + 0xa9d4]
1000059b4:	jne	0x100005a66
1000059ba:	xor	eax, eax
1000059bc:	cmp	ecx, 0x1
1000059bf:	setne	al
1000059c2:	lea	rax, [rax + 2*rax]
1000059c6:	lea	rbx, [rbx + rax + 0x1]
1000059cb:	cmp	ecx, 0x1
1000059ce:	jne	0x1000059d9
1000059d0:	mov	sil, byte ptr [rbx]
1000059d3:	movzx	eax, sil
1000059d7:	jmp	0x1000059e5
1000059d9:	mov	esi, dword ptr [rbx]
1000059db:	mov	eax, esi
1000059dd:	cmp	esi, 0xff
1000059e3:	ja	0x100005a2b
1000059e5:	mov	eax, eax
1000059e7:	test	byte ptr [r8 + 4*rax + 0x3d], 0x4
1000059ed:	je	0x100005a2b
1000059ef:	mov	rdx, qword ptr [r12]
1000059f3:	cmp	rdx, 0x80
1000059fa:	jae	0x100005a3f
1000059fc:	cmp	ecx, 0x1
1000059ff:	jne	0x100005a07
100005a01:	movzx	eax, sil
100005a05:	jmp	0x100005a09
100005a07:	mov	eax, dword ptr [rbx]
100005a09:	mov	dword ptr [r13 + 4*rdx], eax
100005a0e:	mov	ecx, dword ptr [r14]
100005a11:	xor	eax, eax
100005a13:	cmp	ecx, 0x1
100005a16:	setne	al
100005a19:	lea	rax, [rax + 2*rax]
100005a1d:	lea	rbx, [rbx + rax + 0x1]
100005a22:	inc	rdx
100005a25:	mov	qword ptr [r12], rdx
100005a29:	jmp	0x1000059cb
100005a2b:	mov	rdx, qword ptr [r12]
100005a2f:	mov	dword ptr [r13 + 4*rdx], 0x0
100005a38:	test	rdx, rdx
100005a3b:	jne	0x100005a48
100005a3d:	jmp	0x100005a66
100005a3f:	mov	dword ptr [r13 + 4*rdx], 0x0
100005a48:	dec	rdx
100005a4b:	cmp	dword ptr [r13 + 4*rdx], 0x30
100005a51:	jne	0x100005a66
100005a53:	mov	qword ptr [r12], rdx
100005a57:	mov	dword ptr [r13 + 4*rdx], 0x0
100005a60:	add	rdx, -0x1
100005a64:	jb	0x100005a4b
100005a66:	mov	rsi, qword ptr [rbp + 0x10]
100005a6a:	cmp	dword ptr [r14], 0x1
100005a6e:	jne	0x100005a75
100005a70:	movzx	ecx, byte ptr [rbx]
100005a73:	jmp	0x100005a77
100005a75:	mov	ecx, dword ptr [rbx]
100005a77:	mov	al, 0x1
100005a79:	cmp	ecx, 0x53
100005a7c:	jg	0x100005a9a
100005a7e:	add	ecx, -0x45
100005a81:	cmp	ecx, 0xb
100005a84:	ja	0x100005ab7
100005a86:	lea	rdx, [rip + 0x67]
100005a8d:	movsxd	rcx, dword ptr [rdx + 4*rcx]
100005a91:	add	rcx, rdx
100005a94:	jmp	rcx
100005a96:	mov	al, 0x6
100005a98:	jmp	0x100005acd
100005a9a:	cmp	ecx, 0x59
100005a9d:	jg	0x100005aad
100005a9f:	cmp	ecx, 0x54
100005aa2:	je	0x100005ac7
100005aa4:	cmp	ecx, 0x59
100005aa7:	jne	0x100005ab7
100005aa9:	mov	al, 0x8
100005aab:	jmp	0x100005acd
100005aad:	cmp	ecx, 0x5a
100005ab0:	je	0x100005acb
100005ab2:	cmp	ecx, 0x6b
100005ab5:	je	0x100005acd
100005ab7:	xor	eax, eax
100005ab9:	jmp	0x100005acd
100005abb:	mov	al, 0x3
100005abd:	jmp	0x100005acd
100005abf:	mov	al, 0x2
100005ac1:	jmp	0x100005acd
100005ac3:	mov	al, 0x5
100005ac5:	jmp	0x100005acd
100005ac7:	mov	al, 0x4
100005ac9:	jmp	0x100005acd
100005acb:	mov	al, 0x7
100005acd:	mov	byte ptr [rsi], al
100005acf:	mov	rax, qword ptr [r9]
100005ad2:	add	rax, qword ptr [r12]
100005ad6:	jne	0x100005ae2
100005ad8:	mov	rax, qword ptr [rbp - 0x40]
100005adc:	mov	dword ptr [rax], 0x0
100005ae2:	add	rsp, 0x18
100005ae6:	pop	rbx
100005ae7:	pop	r12
100005ae9:	pop	r13
100005aeb:	pop	r14
100005aed:	pop	r15
100005aef:	pop	rbp
100005af0:	ret
100005af1:	nop	dword ptr [rax]
100005af4:	movabs	byte ptr [-0x380000003c000001], al
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005aff:	inc	ebx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005b03:	inc	ebx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005b07:	inc	ebx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005b0c:	fcos
	.byte 0xff #bad opcode
100005b0f:	inc	ebx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005b13:	dec	ebx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005b17:	inc	ebx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005b1b:	inc	ebx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005b1f:	dec	edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005b23:	call	qword ptr [rax - 0x6f6f6f70]
100005b29:	nop
100005b2a:	nop
100005b2b:	nop
100005b2c:	nop
100005b2d:	nop
100005b2e:	nop
100005b2f:	nop
100005b30:	push	rbp
100005b31:	mov	rbp, rsp
100005b34:	push	r14
100005b36:	push	rbx
100005b37:	sub	rsp, 0x20
100005b3b:	mov	rbx, rsi
100005b3e:	mov	r14, rdi
100005b41:	mov	rax, qword ptr [rip + 0x64d0] ## literal pool symbol address: ___stack_chk_guard
100005b48:	mov	rax, qword ptr [rax]
100005b4b:	mov	qword ptr [rbp - 0x18], rax
100005b4f:	test	rsi, rsi
100005b52:	jne	0x100005b66
100005b54:	mov	edi, 0x21
100005b59:	call	0x10000ae28 ## symbol stub for: _malloc
100005b5e:	mov	rbx, rax
100005b61:	test	rax, rax
100005b64:	je	0x100005bc0
100005b66:	lea	rdi, [rbp - 0x30]
100005b6a:	mov	rsi, r14
100005b6d:	call	0x10000ad3e ## symbol stub for: _CC_MD5_Final
100005b72:	xor	eax, eax
100005b74:	lea	rdi, [rip + 0x5a85] ## literal pool for: "0123456789abcdef"
100005b7b:	movzx	edx, byte ptr [rbp + rax - 0x30]
100005b80:	mov	rsi, rdx
100005b83:	shr	rsi, 0x4
100005b87:	mov	cl, byte ptr [rsi + rdi]
100005b8a:	mov	byte ptr [rbx + 2*rax], cl
100005b8d:	and	edx, 0xf
100005b90:	mov	cl, byte ptr [rdx + rdi]
100005b93:	mov	byte ptr [rbx + 2*rax + 0x1], cl
100005b97:	inc	rax
100005b9a:	cmp	rax, 0x10
100005b9e:	jne	0x100005b7b
100005ba0:	mov	byte ptr [rbx + 0x20], 0x0
100005ba4:	mov	rax, qword ptr [rip + 0x646d] ## literal pool symbol address: ___stack_chk_guard
100005bab:	mov	rax, qword ptr [rax]
100005bae:	cmp	rax, qword ptr [rbp - 0x18]
100005bb2:	jne	0x100005bc4
100005bb4:	mov	rax, rbx
100005bb7:	add	rsp, 0x20
100005bbb:	pop	rbx
100005bbc:	pop	r14
100005bbe:	pop	rbp
100005bbf:	ret
100005bc0:	xor	ebx, ebx
100005bc2:	jmp	0x100005ba4
100005bc4:	call	0x10000ad68 ## symbol stub for: ___stack_chk_fail
100005bc9:	push	rbp
100005bca:	mov	rbp, rsp
100005bcd:	xor	edx, edx
100005bcf:	xor	ecx, ecx
100005bd1:	pop	rbp
100005bd2:	jmp	0x100005bd7
100005bd7:	push	rbp
100005bd8:	mov	rbp, rsp
100005bdb:	push	r15
100005bdd:	push	r14
100005bdf:	push	r13
100005be1:	push	r12
100005be3:	push	rbx
100005be4:	push	rax
100005be5:	mov	eax, 0x4078
100005bea:	call	0x100005d70
100005bef:	sub	rsp, rax
100005bf2:	pop	rax
100005bf3:	mov	rax, qword ptr [rip + 0x641e] ## literal pool symbol address: ___stack_chk_guard
100005bfa:	mov	rax, qword ptr [rax]
100005bfd:	mov	qword ptr [rbp - 0x30], rax
100005c01:	test	rcx, rcx
100005c04:	js	0x100005d05
100005c0a:	mov	r15, rcx
100005c0d:	mov	r12, rdx
100005c10:	mov	r13, rsi
100005c13:	mov	rbx, rdi
100005c16:	lea	rdi, [rbp - 0x40a0]
100005c1d:	call	0x10000ad44 ## symbol stub for: _CC_MD5_Init
100005c22:	xor	r14d, r14d
100005c25:	mov	rdi, rbx
100005c28:	xor	esi, esi
100005c2a:	xor	eax, eax
100005c2c:	call	0x10000ae76 ## symbol stub for: _open
100005c31:	test	eax, eax
100005c33:	js	0x100005d38
100005c39:	mov	ebx, eax
100005c3b:	test	r12, r12
100005c3e:	je	0x100005c6a
100005c40:	call	0x10000ad56 ## symbol stub for: ___error
100005c45:	mov	dword ptr [rax], 0x0
100005c4b:	mov	edi, ebx
100005c4d:	mov	rsi, r12
100005c50:	xor	edx, edx
100005c52:	call	0x10000ae22 ## symbol stub for: _lseek
100005c57:	cmp	rax, r12
100005c5a:	jne	0x100005d20
100005c60:	cmp	r12, -0x1
100005c64:	je	0x100005d12
100005c6a:	mov	dword ptr [rbp - 0x4034], ebx
100005c70:	mov	qword ptr [rbp - 0x4040], r13
100005c77:	mov	r14d, 0x4000
100005c7d:	lea	r12, [rbp - 0x4030]
100005c84:	mov	r13, r15
100005c87:	cmp	r13, r14
100005c8a:	mov	rdx, r13
100005c8d:	cmovg	rdx, r14
100005c91:	test	r15, r15
100005c94:	cmove	rdx, r14
100005c98:	mov	edi, dword ptr [rbp - 0x4034]
100005c9e:	mov	rsi, r12
100005ca1:	call	0x10000aefa ## symbol stub for: _read
100005ca6:	mov	rbx, rax
100005ca9:	test	ebx, ebx
100005cab:	jle	0x100005cce
100005cad:	lea	rdi, [rbp - 0x40a0]
100005cb4:	mov	rsi, r12
100005cb7:	mov	edx, ebx
100005cb9:	call	0x10000ad4a ## symbol stub for: _CC_MD5_Update
100005cbe:	movsxd	rax, ebx
100005cc1:	sub	r13, rax
100005cc4:	test	r15, r15
100005cc7:	je	0x100005c87
100005cc9:	test	r13, r13
100005ccc:	jg	0x100005c87
100005cce:	call	0x10000ad56 ## symbol stub for: ___error
100005cd3:	mov	r14d, dword ptr [rax]
100005cd6:	mov	edi, dword ptr [rbp - 0x4034]
100005cdc:	call	0x10000ad86 ## symbol stub for: _close
100005ce1:	call	0x10000ad56 ## symbol stub for: ___error
100005ce6:	mov	dword ptr [rax], r14d
100005ce9:	test	ebx, ebx
100005ceb:	js	0x100005d35
100005ced:	lea	rdi, [rbp - 0x40a0]
100005cf4:	mov	rsi, qword ptr [rbp - 0x4040]
100005cfb:	call	0x100005b30
100005d00:	mov	r14, rax
100005d03:	jmp	0x100005d38
100005d05:	call	0x10000ad56 ## symbol stub for: ___error
100005d0a:	mov	dword ptr [rax], 0x16
100005d10:	jmp	0x100005d35
100005d12:	call	0x10000ad56 ## symbol stub for: ___error
100005d17:	cmp	dword ptr [rax], 0x0
100005d1a:	je	0x100005c6a
100005d20:	call	0x10000ad56 ## symbol stub for: ___error
100005d25:	mov	edi, ebx
100005d27:	mov	ebx, dword ptr [rax]
100005d29:	call	0x10000ad86 ## symbol stub for: _close
100005d2e:	call	0x10000ad56 ## symbol stub for: ___error
100005d33:	mov	dword ptr [rax], ebx
100005d35:	xor	r14d, r14d
100005d38:	mov	rax, qword ptr [rip + 0x62d9] ## literal pool symbol address: ___stack_chk_guard
100005d3f:	mov	rax, qword ptr [rax]
100005d42:	cmp	rax, qword ptr [rbp - 0x30]
100005d46:	jne	0x100005d5d
100005d48:	mov	rax, r14
100005d4b:	add	rsp, 0x4078
100005d52:	pop	rbx
100005d53:	pop	r12
100005d55:	pop	r13
100005d57:	pop	r14
100005d59:	pop	r15
100005d5b:	pop	rbp
100005d5c:	ret
100005d5d:	call	0x10000ad68 ## symbol stub for: ___stack_chk_fail
100005d62:	nop	word ptr cs:[rax + rax]
100005d6c:	nop	dword ptr [rax]
100005d70:	push	rcx
100005d71:	push	rax
100005d72:	mov	rcx, qword ptr [rip + 0x628f] ## literal pool symbol address: ____chkstk_darwin
100005d79:	test	rcx, rcx
100005d7c:	jne	0x100005d85
100005d7e:	lea	rcx, [rip + 0xb]
100005d85:	call	rcx
100005d87:	pop	rax
100005d88:	pop	rcx
100005d89:	ret
100005d8a:	nop	word ptr [rax + rax]
100005d90:	cmp	rax, 0x1000
100005d96:	lea	rcx, [rsp + 0x18]
100005d9b:	jb	0x100005db4
100005d9d:	sub	rcx, 0x1000
100005da4:	test	byte ptr [rcx], cl
100005da6:	sub	rax, 0x1000
100005dac:	cmp	rax, 0x1000
100005db2:	ja	0x100005d9d
100005db4:	sub	rcx, rax
100005db7:	test	byte ptr [rcx], cl
100005db9:	ret
100005dba:	nop
100005dbb:	nop
100005dbc:	push	rbp
100005dbd:	mov	rbp, rsp
100005dc0:	mov	qword ptr [rip + 0xab45], 0x0
100005dcb:	mov	rax, qword ptr [rip + 0x627e] ## literal pool symbol address: _mach_task_self_
100005dd2:	mov	edi, dword ptr [rax]
100005dd4:	lea	rsi, [rip + 0xab3d]
100005ddb:	xor	edx, edx
100005ddd:	mov	ecx, 0x1
100005de2:	call	0x10000af24 ## symbol stub for: _semaphore_create
100005de7:	test	eax, eax
100005de9:	jne	0x100005ded
100005deb:	pop	rbp
100005dec:	ret
100005ded:	call	0x10000a95e
100005df2:	test	rdi, rdi
100005df5:	je	0x100005e60
100005df7:	push	rbp
100005df8:	mov	rbp, rsp
100005dfb:	push	r14
100005dfd:	push	rbx
100005dfe:	mov	r14, rdi
100005e01:	mov	edi, dword ptr [rip + 0xab11]
100005e07:	call	0x10000af36 ## symbol stub for: _semaphore_wait
100005e0c:	mov	edi, 0x18
100005e11:	call	0x100007912
100005e16:	mov	rbx, rax
100005e19:	mov	rdi, r14
100005e1c:	call	0x10000794d
100005e21:	mov	qword ptr [rbx], rax
100005e24:	mov	rax, qword ptr [rip + 0xaae5]
100005e2b:	mov	qword ptr [rbx + 0x8], rax
100005e2f:	test	rax, rax
100005e32:	je	0x100005e3f
100005e34:	mov	rcx, rbx
100005e37:	add	rcx, 0x8
100005e3b:	mov	qword ptr [rax + 0x10], rcx
100005e3f:	mov	qword ptr [rip + 0xaaca], rbx
100005e46:	lea	rax, [rip + 0xaac3]
100005e4d:	mov	qword ptr [rbx + 0x10], rax
100005e51:	mov	edi, dword ptr [rip + 0xaac1]
100005e57:	pop	rbx
100005e58:	pop	r14
100005e5a:	pop	rbp
100005e5b:	jmp	0x10000af30 ## symbol stub for: _semaphore_signal
100005e60:	ret
100005e61:	push	rbp
100005e62:	mov	rbp, rsp
100005e65:	push	rbx
100005e66:	push	rax
100005e67:	mov	edi, dword ptr [rip + 0xaaab]
100005e6d:	call	0x10000af36 ## symbol stub for: _semaphore_wait
100005e72:	mov	rbx, qword ptr [rip + 0xaa97]
100005e79:	test	rbx, rbx
100005e7c:	je	0x100005e91
100005e7e:	mov	rdi, qword ptr [rbx]
100005e81:	test	rdi, rdi
100005e84:	je	0x100005e8b
100005e86:	call	0x10000afa8 ## symbol stub for: _unlink
100005e8b:	mov	rbx, qword ptr [rbx + 0x8]
100005e8f:	jmp	0x100005e79
100005e91:	mov	edi, dword ptr [rip + 0xaa81]
100005e97:	add	rsp, 0x8
100005e9b:	pop	rbx
100005e9c:	pop	rbp
100005e9d:	jmp	0x10000af30 ## symbol stub for: _semaphore_signal
100005ea2:	push	rbp
100005ea3:	mov	rbp, rsp
100005ea6:	push	r14
100005ea8:	push	rbx
100005ea9:	mov	rdi, qword ptr [rip + 0xa4f8]
100005eb0:	call	0x10000af72 ## symbol stub for: _strlen
100005eb5:	lea	rdi, [rax + 0x2b]
100005eb9:	call	0x100007912
100005ebe:	mov	rbx, rax
100005ec1:	mov	r14, qword ptr [rip + 0xa4e0]
100005ec8:	call	0x10000ae10 ## symbol stub for: _getpid
100005ecd:	mov	r9, qword ptr [rip + 0xaa4c]
100005ed4:	lea	rcx, [r9 + 0x1]
100005ed8:	mov	qword ptr [rip + 0xaa41], rcx
100005edf:	lea	rsi, [rip + 0x573e] ## literal pool for: "%s/%s%d.%lu"
100005ee6:	lea	rcx, [rip + 0x572d] ## literal pool for: ".bsdsort."
100005eed:	mov	rdi, rbx
100005ef0:	mov	rdx, r14
100005ef3:	mov	r8d, eax
100005ef6:	xor	eax, eax
100005ef8:	call	0x10000af4e ## symbol stub for: _sprintf
100005efd:	mov	rdi, rbx
100005f00:	call	0x100005df2
100005f05:	mov	rax, rbx
100005f08:	pop	rbx
100005f09:	pop	r14
100005f0b:	pop	rbp
100005f0c:	ret
100005f0d:	test	rdi, rdi
100005f10:	je	0x100005f28
100005f12:	push	rbp
100005f13:	mov	rbp, rsp
100005f16:	xor	eax, eax
100005f18:	mov	qword ptr [rdi + 0x10], rax
100005f1c:	mov	qword ptr [rdi + 0x8], rax
100005f20:	mov	qword ptr [rdi], rax
100005f23:	mov	byte ptr [rdi + 0x18], sil
100005f27:	pop	rbp
100005f28:	ret
100005f29:	push	rbp
100005f2a:	mov	rbp, rsp
100005f2d:	push	r15
100005f2f:	push	r14
100005f31:	push	rbx
100005f32:	push	rax
100005f33:	test	rdi, rdi
100005f36:	je	0x100005f9f
100005f38:	mov	r14, rsi
100005f3b:	test	rsi, rsi
100005f3e:	je	0x100005f9f
100005f40:	mov	r15d, edx
100005f43:	mov	rbx, rdi
100005f46:	mov	rcx, qword ptr [rdi + 0x10]
100005f4a:	cmp	qword ptr [rdi + 0x8], rcx
100005f4e:	jae	0x100005f5a
100005f50:	mov	rax, qword ptr [rbx]
100005f53:	test	rax, rax
100005f56:	jne	0x100005f7d
100005f58:	jmp	0x100005f5d
100005f5a:	mov	rax, qword ptr [rbx]
100005f5d:	lea	rdx, [rcx + rcx]
100005f61:	lea	rcx, [rcx + rcx + 0x1]
100005f66:	mov	qword ptr [rbx + 0x10], rcx
100005f6a:	lea	rsi, [8*rdx + 0x8]
100005f72:	mov	rdi, rax
100005f75:	call	0x100007938
100005f7a:	mov	qword ptr [rbx], rax
100005f7d:	test	r15b, r15b
100005f80:	je	0x100005f90
100005f82:	mov	rdi, r14
100005f85:	call	0x10000794d
100005f8a:	mov	r14, rax
100005f8d:	mov	rax, qword ptr [rbx]
100005f90:	mov	rcx, qword ptr [rbx + 0x8]
100005f94:	mov	qword ptr [rax + 8*rcx], r14
100005f98:	inc	rcx
100005f9b:	mov	qword ptr [rbx + 0x8], rcx
100005f9f:	add	rsp, 0x8
100005fa3:	pop	rbx
100005fa4:	pop	r14
100005fa6:	pop	r15
100005fa8:	pop	rbp
100005fa9:	ret
100005faa:	push	rbp
100005fab:	mov	rbp, rsp
100005fae:	push	r15
100005fb0:	push	r14
100005fb2:	push	r13
100005fb4:	push	r12
100005fb6:	push	rbx
100005fb7:	push	rax
100005fb8:	test	rdi, rdi
100005fbb:	je	0x100005fec
100005fbd:	mov	r14, rdx
100005fc0:	test	rdx, rdx
100005fc3:	je	0x100005fec
100005fc5:	test	esi, esi
100005fc7:	jle	0x100005fec
100005fc9:	mov	r15, rdi
100005fcc:	mov	r12d, esi
100005fcf:	xor	ebx, ebx
100005fd1:	movzx	r13d, cl
100005fd5:	mov	rsi, qword ptr [r14 + 8*rbx]
100005fd9:	mov	rdi, r15
100005fdc:	mov	edx, r13d
100005fdf:	call	0x100005f29
100005fe4:	inc	rbx
100005fe7:	cmp	r12, rbx
100005fea:	jne	0x100005fd5
100005fec:	add	rsp, 0x8
100005ff0:	pop	rbx
100005ff1:	pop	r12
100005ff3:	pop	r13
100005ff5:	pop	r14
100005ff7:	pop	r15
100005ff9:	pop	rbp
100005ffa:	ret
100005ffb:	test	rdi, rdi
100005ffe:	je	0x10000607d
100006000:	push	rbp
100006001:	mov	rbp, rsp
100006004:	push	r14
100006006:	push	rbx
100006007:	mov	r14, rdi
10000600a:	mov	rdi, qword ptr [rdi]
10000600d:	test	rdi, rdi
100006010:	je	0x10000606a
100006012:	mov	rcx, qword ptr [r14 + 0x8]
100006016:	test	rcx, rcx
100006019:	je	0x10000605e
10000601b:	xor	ebx, ebx
10000601d:	mov	rax, qword ptr [rdi + 8*rbx]
100006021:	test	rax, rax
100006024:	je	0x100006056
100006026:	cmp	byte ptr [r14 + 0x18], 0x0
10000602b:	je	0x10000603c
10000602d:	mov	rdi, rax
100006030:	call	0x10000afa8 ## symbol stub for: _unlink
100006035:	mov	rax, qword ptr [r14]
100006038:	mov	rax, qword ptr [rax + 8*rbx]
10000603c:	mov	rdi, rax
10000603f:	call	0x100007927
100006044:	mov	rax, qword ptr [r14]
100006047:	mov	qword ptr [rax + 8*rbx], 0x0
10000604f:	mov	rdi, qword ptr [r14]
100006052:	mov	rcx, qword ptr [r14 + 0x8]
100006056:	inc	rbx
100006059:	cmp	rbx, rcx
10000605c:	jb	0x10000601d
10000605e:	call	0x100007927
100006063:	mov	qword ptr [r14], 0x0
10000606a:	xor	eax, eax
10000606c:	mov	qword ptr [r14 + 0x10], rax
100006070:	mov	qword ptr [r14 + 0x8], rax
100006074:	mov	byte ptr [r14 + 0x18], 0x0
100006079:	pop	rbx
10000607a:	pop	r14
10000607c:	pop	rbp
10000607d:	ret
10000607e:	test	rdi, rdi
100006081:	je	0x10000609d
100006083:	push	rbp
100006084:	mov	rbp, rsp
100006087:	xor	eax, eax
100006089:	mov	qword ptr [rdi + 0x18], rax
10000608d:	mov	qword ptr [rdi + 0x10], rax
100006091:	mov	qword ptr [rdi + 0x8], 0x28
100006099:	mov	qword ptr [rdi], rax
10000609c:	pop	rbp
10000609d:	ret
10000609e:	push	rbp
10000609f:	mov	rbp, rsp
1000060a2:	push	r15
1000060a4:	push	r14
1000060a6:	push	r12
1000060a8:	push	rbx
1000060a9:	test	rdi, rdi
1000060ac:	je	0x100006144
1000060b2:	mov	r14, rsi
1000060b5:	test	rsi, rsi
1000060b8:	je	0x100006144
1000060be:	mov	rbx, rdi
1000060c1:	mov	rdi, qword ptr [rdi]
1000060c4:	mov	r15, qword ptr [rbx + 0x10]
1000060c8:	mov	r12, qword ptr [rbx + 0x18]
1000060cc:	test	rdi, rdi
1000060cf:	je	0x1000060d6
1000060d1:	cmp	r15, r12
1000060d4:	jb	0x100006100
1000060d6:	lea	rsi, [8*r12 + 0x2008]
1000060de:	add	r12, 0x401
1000060e5:	call	0x100007938
1000060ea:	mov	qword ptr [rbx], rax
1000060ed:	mov	rax, r12
1000060f0:	sub	rax, qword ptr [rbx + 0x18]
1000060f4:	shl	rax, 0x3
1000060f8:	add	qword ptr [rbx + 0x8], rax
1000060fc:	mov	qword ptr [rbx + 0x18], r12
100006100:	call	0x1000040ee
100006105:	mov	rcx, qword ptr [rbx]
100006108:	mov	qword ptr [rcx + 8*r15], rax
10000610c:	mov	rax, qword ptr [rbx]
10000610f:	mov	rdi, qword ptr [rax + 8*r15]
100006113:	mov	rsi, r14
100006116:	call	0x1000041dc
10000611b:	mov	rax, qword ptr [rbx]
10000611e:	mov	rdi, qword ptr [rax + 8*r15]
100006122:	call	0x100004137
100006127:	movdqu	xmm0, xmmword ptr [rbx + 0x8]
10000612c:	movdqa	xmm1, xmmword ptr [rip + 0x53bc]
100006134:	pinsrq	xmm1, rax, 0x0
10000613b:	paddq	xmm1, xmm0
10000613f:	movdqu	xmmword ptr [rbx + 0x8], xmm1
100006144:	pop	rbx
100006145:	pop	r12
100006147:	pop	r14
100006149:	pop	r15
10000614b:	pop	rbp
10000614c:	ret
10000614d:	test	rdi, rdi
100006150:	je	0x1000061dc
100006156:	push	rbp
100006157:	mov	rbp, rsp
10000615a:	push	r15
10000615c:	push	r14
10000615e:	push	rbx
10000615f:	push	rax
100006160:	mov	r14, rdi
100006163:	mov	rdi, qword ptr [rdi]
100006166:	test	rdi, rdi
100006169:	je	0x1000061c0
10000616b:	mov	rax, qword ptr [r14 + 0x10]
10000616f:	test	rax, rax
100006172:	je	0x1000061b4
100006174:	mov	r15d, 0x1
10000617a:	mov	rbx, qword ptr [rdi + 8*r15 - 0x8]
10000617f:	test	rbx, rbx
100006182:	je	0x1000061a4
100006184:	mov	rdi, rbx
100006187:	call	0x10000423c
10000618c:	mov	rdi, rbx
10000618f:	call	0x100007927
100006194:	mov	rax, qword ptr [r14]
100006197:	mov	qword ptr [rax + 8*r15 - 0x8], 0x0
1000061a0:	mov	rax, qword ptr [r14 + 0x10]
1000061a4:	cmp	r15, rax
1000061a7:	jae	0x1000061b1
1000061a9:	mov	rdi, qword ptr [r14]
1000061ac:	inc	r15
1000061af:	jmp	0x10000617a
1000061b1:	mov	rdi, qword ptr [r14]
1000061b4:	call	0x100007927
1000061b9:	mov	qword ptr [r14], 0x0
1000061c0:	xor	eax, eax
1000061c2:	mov	qword ptr [r14 + 0x18], rax
1000061c6:	mov	qword ptr [r14 + 0x10], rax
1000061ca:	mov	qword ptr [r14 + 0x8], 0x28
1000061d2:	add	rsp, 0x8
1000061d6:	pop	rbx
1000061d7:	pop	r14
1000061d9:	pop	r15
1000061db:	pop	rbp
1000061dc:	ret
1000061dd:	push	rbp
1000061de:	mov	rbp, rsp
1000061e1:	push	r15
1000061e3:	push	r14
1000061e5:	push	r13
1000061e7:	push	r12
1000061e9:	push	rbx
1000061ea:	sub	rsp, 0x18
1000061ee:	test	rdi, rdi
1000061f1:	je	0x1000062b2
1000061f7:	mov	r13, rsi
1000061fa:	test	rsi, rsi
1000061fd:	je	0x1000062b2
100006203:	mov	r14, rdi
100006206:	lea	rsi, [rip + 0x5423] ## literal pool for: "w"
10000620d:	mov	rdi, r13
100006210:	call	0x100006310
100006215:	test	rax, rax
100006218:	je	0x10000630b
10000621e:	mov	r15, rax
100006221:	mov	rax, qword ptr [r14]
100006224:	test	rax, rax
100006227:	je	0x1000062a7
100006229:	lea	r12, [rip + 0xa864]
100006230:	cmp	byte ptr [r12 + 0xd], 0x0
100006236:	je	0x1000062c1
10000623c:	mov	rbx, r13
10000623f:	mov	qword ptr [rbp - 0x38], 0x0
100006247:	cmp	qword ptr [r14 + 0x10], 0x0
10000624c:	je	0x1000062a4
10000624e:	mov	r13d, 0x1
100006254:	xor	ecx, ecx
100006256:	mov	rax, qword ptr [rax + 8*r13 - 0x8]
10000625b:	mov	qword ptr [rbp - 0x30], rax
10000625f:	test	rcx, rcx
100006262:	je	0x100006279
100006264:	lea	rdi, [rbp - 0x38]
100006268:	lea	rsi, [rbp - 0x30]
10000626c:	call	0x10000501f
100006271:	test	eax, eax
100006273:	je	0x100006292
100006275:	mov	rax, qword ptr [rbp - 0x30]
100006279:	mov	rdi, qword ptr [rax]
10000627c:	movzx	edx, byte ptr [r12 + 0xe]
100006282:	mov	rsi, r15
100006285:	call	0x1000030c8
10000628a:	mov	rax, qword ptr [rbp - 0x30]
10000628e:	mov	qword ptr [rbp - 0x38], rax
100006292:	cmp	r13, qword ptr [r14 + 0x10]
100006296:	jae	0x1000062a4
100006298:	mov	rax, qword ptr [r14]
10000629b:	mov	rcx, qword ptr [rbp - 0x38]
10000629f:	inc	r13
1000062a2:	jmp	0x100006256
1000062a4:	mov	r13, rbx
1000062a7:	mov	rdi, r15
1000062aa:	mov	rsi, r13
1000062ad:	call	0x100006476
1000062b2:	add	rsp, 0x18
1000062b6:	pop	rbx
1000062b7:	pop	r12
1000062b9:	pop	r13
1000062bb:	pop	r14
1000062bd:	pop	r15
1000062bf:	pop	rbp
1000062c0:	ret
1000062c1:	cmp	qword ptr [r14 + 0x10], 0x0
1000062c6:	je	0x1000062a7
1000062c8:	mov	rax, qword ptr [rax]
1000062cb:	mov	rdi, qword ptr [rax]
1000062ce:	movzx	edx, byte ptr [r12 + 0xe]
1000062d4:	mov	rsi, r15
1000062d7:	call	0x1000030c8
1000062dc:	cmp	qword ptr [r14 + 0x10], 0x2
1000062e1:	jb	0x1000062a7
1000062e3:	mov	ebx, 0x1
1000062e8:	mov	rax, qword ptr [r14]
1000062eb:	mov	rax, qword ptr [rax + 8*rbx]
1000062ef:	mov	rdi, qword ptr [rax]
1000062f2:	movzx	edx, byte ptr [r12 + 0xe]
1000062f8:	mov	rsi, r15
1000062fb:	call	0x1000030c8
100006300:	inc	rbx
100006303:	cmp	rbx, qword ptr [r14 + 0x10]
100006307:	jb	0x1000062e8
100006309:	jmp	0x1000062a7
10000630b:	call	0x10000a96e
100006310:	push	rbp
100006311:	mov	rbp, rsp
100006314:	push	r15
100006316:	push	r14
100006318:	push	r13
10000631a:	push	r12
10000631c:	push	rbx
10000631d:	push	rax
10000631e:	mov	r15, rsi
100006321:	mov	rbx, rdi
100006324:	lea	rsi, [rip + 0x5311] ## literal pool for: "-"
10000632b:	call	0x10000af5a ## symbol stub for: _strcmp
100006330:	test	eax, eax
100006332:	je	0x100006355
100006334:	mov	rdi, rbx
100006337:	call	0x100006d3a
10000633c:	test	al, al
10000633e:	je	0x100006369
100006340:	cmp	byte ptr [r15], 0x77
100006344:	jne	0x100006394
100006346:	mov	edi, 0x36
10000634b:	call	0x10000afa2 ## symbol stub for: _umask
100006350:	mov	r14d, eax
100006353:	jmp	0x100006397
100006355:	test	r15, r15
100006358:	je	0x100006385
10000635a:	cmp	byte ptr [r15], 0x72
10000635e:	jne	0x100006385
100006360:	mov	rax, qword ptr [rip + 0x5cc1] ## literal pool symbol address: ___stdinp
100006367:	jmp	0x10000638c
100006369:	mov	rdi, rbx
10000636c:	mov	rsi, r15
10000636f:	call	0x10000add4 ## symbol stub for: _fopen
100006374:	mov	rbx, rax
100006377:	test	rax, rax
10000637a:	jne	0x10000645a
100006380:	jmp	0x100006409
100006385:	mov	rax, qword ptr [rip + 0x5ca4] ## literal pool symbol address: ___stdoutp
10000638c:	mov	rbx, qword ptr [rax]
10000638f:	jmp	0x10000645a
100006394:	xor	r14d, r14d
100006397:	cmp	qword ptr [rip + 0xa679], 0x0
10000639f:	je	0x1000063f6
1000063a1:	mov	rdi, rbx
1000063a4:	call	0x10000af72 ## symbol stub for: _strlen
1000063a9:	mov	r13, rax
1000063ac:	lea	rdi, [rax + 0x80]
1000063b3:	call	0x100007912
1000063b8:	mov	r12, rax
1000063bb:	mov	rax, qword ptr [rip + 0x5c6e] ## literal pool symbol address: ___stdoutp
1000063c2:	mov	rdi, qword ptr [rax]
1000063c5:	call	0x10000adb6 ## symbol stub for: _fflush
1000063ca:	mov	al, byte ptr [r15]
1000063cd:	cmp	al, 0x77
1000063cf:	je	0x10000640e
1000063d1:	cmp	al, 0x72
1000063d3:	jne	0x10000646c
1000063d9:	add	r13, 0x7f
1000063dd:	mov	r8, qword ptr [rip + 0xa634]
1000063e4:	lea	rdx, [rip + 0x5253] ## literal pool for: "cat %s | %s -d"
1000063eb:	mov	rdi, r12
1000063ee:	mov	rsi, r13
1000063f1:	mov	rcx, rbx
1000063f4:	jmp	0x100006429
1000063f6:	mov	rdi, rbx
1000063f9:	mov	rsi, r15
1000063fc:	call	0x10000add4 ## symbol stub for: _fopen
100006401:	mov	rbx, rax
100006404:	test	rax, rax
100006407:	jne	0x10000644b
100006409:	call	0x10000a97e
10000640e:	add	r13, 0x7f
100006412:	mov	rcx, qword ptr [rip + 0xa5ff]
100006419:	lea	rdx, [rip + 0x522d] ## literal pool for: "%s > %s"
100006420:	mov	rdi, r12
100006423:	mov	rsi, r13
100006426:	mov	r8, rbx
100006429:	xor	eax, eax
10000642b:	call	0x10000af48 ## symbol stub for: _snprintf
100006430:	mov	rdi, r12
100006433:	mov	rsi, r15
100006436:	call	0x10000ae88 ## symbol stub for: _popen
10000643b:	test	rax, rax
10000643e:	je	0x100006471
100006440:	mov	rbx, rax
100006443:	mov	rdi, r12
100006446:	call	0x100007927
10000644b:	cmp	byte ptr [r15], 0x77
10000644f:	jne	0x10000645a
100006451:	movzx	edi, r14w
100006455:	call	0x10000afa2 ## symbol stub for: _umask
10000645a:	mov	rax, rbx
10000645d:	add	rsp, 0x8
100006461:	pop	rbx
100006462:	pop	r12
100006464:	pop	r13
100006466:	pop	r14
100006468:	pop	r15
10000646a:	pop	rbp
10000646b:	ret
10000646c:	call	0x10000a98e
100006471:	call	0x10000a9ae
100006476:	push	rbp
100006477:	mov	rbp, rsp
10000647a:	push	rbx
10000647b:	push	rax
10000647c:	test	rdi, rdi
10000647f:	je	0x1000064be
100006481:	mov	rbx, rdi
100006484:	mov	rax, qword ptr [rip + 0x5b9d] ## literal pool symbol address: ___stdinp
10000648b:	cmp	qword ptr [rax], rdi
10000648e:	je	0x1000064be
100006490:	mov	rax, qword ptr [rip + 0x5b99] ## literal pool symbol address: ___stdoutp
100006497:	cmp	qword ptr [rax], rbx
10000649a:	je	0x1000064c5
10000649c:	mov	rdi, rsi
10000649f:	call	0x100006d3a
1000064a4:	test	al, al
1000064a6:	je	0x1000064d3
1000064a8:	cmp	qword ptr [rip + 0xa568], 0x0
1000064b0:	je	0x1000064d3
1000064b2:	mov	rdi, rbx
1000064b5:	call	0x10000ae7c ## symbol stub for: _pclose
1000064ba:	test	eax, eax
1000064bc:	js	0x1000064e1
1000064be:	add	rsp, 0x8
1000064c2:	pop	rbx
1000064c3:	pop	rbp
1000064c4:	ret
1000064c5:	mov	rdi, rbx
1000064c8:	add	rsp, 0x8
1000064cc:	pop	rbx
1000064cd:	pop	rbp
1000064ce:	jmp	0x10000adb6 ## symbol stub for: _fflush
1000064d3:	mov	rdi, rbx
1000064d6:	add	rsp, 0x8
1000064da:	pop	rbx
1000064db:	pop	rbp
1000064dc:	jmp	0x10000ada4 ## symbol stub for: _fclose
1000064e1:	call	0x10000a9be
1000064e6:	push	rbp
1000064e7:	mov	rbp, rsp
1000064ea:	push	r15
1000064ec:	push	r14
1000064ee:	push	r13
1000064f0:	push	r12
1000064f2:	push	rbx
1000064f3:	sub	rsp, 0x48
1000064f7:	mov	qword ptr [rbp - 0x40], rdi
1000064fb:	call	0x1000068ab
100006500:	test	rax, rax
100006503:	je	0x10000689c
100006509:	mov	rbx, rax
10000650c:	mov	rdi, rax
10000650f:	call	0x100006a57
100006514:	test	rax, rax
100006517:	je	0x1000066d8
10000651d:	mov	r15, rax
100006520:	call	0x100003f70
100006525:	mov	r13, rax
100006528:	mov	rdi, r15
10000652b:	mov	rsi, rax
10000652e:	call	0x100004271
100006533:	mov	rdi, rbx
100006536:	call	0x100006a57
10000653b:	test	rax, rax
10000653e:	je	0x1000066ef
100006544:	mov	r12, rax
100006547:	mov	qword ptr [rbp - 0x70], r15
10000654b:	mov	qword ptr [rbp - 0x48], rbx
10000654f:	call	0x100003f70
100006554:	mov	rbx, rax
100006557:	mov	rdi, r12
10000655a:	mov	rsi, rax
10000655d:	call	0x100004271
100006562:	mov	eax, 0x1
100006567:	mov	qword ptr [rbp - 0x50], rax
10000656b:	lea	rax, [rip + 0xa4be]
100006572:	cmp	byte ptr [rax], 0x0
100006575:	je	0x1000065b0
100006577:	mov	r14, qword ptr [rip + 0x5ab2] ## literal pool symbol address: ___stdoutp
10000657e:	mov	rdi, qword ptr [r14]
100006581:	mov	rsi, r12
100006584:	lea	rdx, [rip + 0x50a7] ## literal pool for: "s1=<"
10000658b:	lea	r15, [rip + 0x4ffa] ## literal pool for: ">"
100006592:	mov	rcx, r15
100006595:	call	0x100002bee
10000659a:	mov	rdi, qword ptr [r14]
10000659d:	mov	rsi, qword ptr [rbp - 0x70]
1000065a1:	lea	rdx, [rip + 0x508f] ## literal pool for: "s2=<"
1000065a8:	mov	rcx, r15
1000065ab:	call	0x100002bee
1000065b0:	mov	qword ptr [rbp - 0x58], r12
1000065b4:	mov	rdi, rbx
1000065b7:	mov	rsi, r13
1000065ba:	xor	edx, edx
1000065bc:	call	0x100004cff
1000065c1:	mov	r12d, eax
1000065c4:	lea	rax, [rip + 0xa465]
1000065cb:	cmp	byte ptr [rax], 0x0
1000065ce:	je	0x1000065e1
1000065d0:	lea	rdi, [rip + 0x4fbe] ## literal pool for: "; cmp1=%d"
1000065d7:	mov	esi, r12d
1000065da:	xor	eax, eax
1000065dc:	call	0x10000ae8e ## symbol stub for: _printf
1000065e1:	test	r12d, r12d
1000065e4:	mov	r15, qword ptr [rbp - 0x70]
1000065e8:	je	0x100006680
1000065ee:	lea	rax, [rip + 0xa43b]
1000065f5:	cmp	byte ptr [rax], 0x0
1000065f8:	je	0x100006604
1000065fa:	mov	edi, 0xa
1000065ff:	call	0x10000aee8 ## symbol stub for: _putchar
100006604:	lea	rax, [rip + 0xa489]
10000660b:	cmp	byte ptr [rax + 0xd], 0x0
10000660f:	setne	al
100006612:	test	r12d, r12d
100006615:	setle	cl
100006618:	test	r12d, r12d
10000661b:	js	0x100006719
100006621:	and	cl, al
100006623:	jne	0x100006719
100006629:	mov	rdi, r15
10000662c:	mov	rsi, r13
10000662f:	call	0x100003fdb
100006634:	mov	rdi, r13
100006637:	call	0x100007927
10000663c:	mov	rdi, r15
10000663f:	call	0x100002f66
100006644:	mov	rdi, qword ptr [rbp - 0x48]
100006648:	call	0x100006a57
10000664d:	test	rax, rax
100006650:	je	0x10000674c
100006656:	mov	r12, rax
100006659:	inc	qword ptr [rbp - 0x50]
10000665d:	call	0x100003f70
100006662:	mov	r13, rbx
100006665:	mov	rbx, rax
100006668:	mov	rdi, r12
10000666b:	mov	rsi, rax
10000666e:	call	0x100004271
100006673:	mov	rax, qword ptr [rbp - 0x58]
100006677:	mov	qword ptr [rbp - 0x70], rax
10000667b:	jmp	0x10000656b
100006680:	xor	r12d, r12d
100006683:	lea	rax, [rip + 0xa40a]
10000668a:	cmp	byte ptr [rax + 0x10], 0x0
10000668e:	je	0x1000065ee
100006694:	mov	rcx, rax
100006697:	mov	al, byte ptr [rax + 0xc]
10000669a:	or	al, byte ptr [rcx + 0xd]
10000669d:	jne	0x1000065ee
1000066a3:	mov	rdi, qword ptr [rbp - 0x58]
1000066a7:	mov	rsi, r15
1000066aa:	call	0x100004d95
1000066af:	mov	r12d, eax
1000066b2:	lea	rax, [rip + 0xa377]
1000066b9:	cmp	byte ptr [rax], 0x0
1000066bc:	je	0x100006604
1000066c2:	lea	rdi, [rip + 0x4ed6] ## literal pool for: "; cmp2=%d"
1000066c9:	mov	esi, r12d
1000066cc:	xor	eax, eax
1000066ce:	call	0x10000ae8e ## symbol stub for: _printf
1000066d3:	jmp	0x1000065ee
1000066d8:	mov	r14d, 0x1
1000066de:	xor	eax, eax
1000066e0:	mov	qword ptr [rbp - 0x38], rax
1000066e4:	xor	r13d, r13d
1000066e7:	xor	r12d, r12d
1000066ea:	jmp	0x100006802
1000066ef:	mov	eax, 0x1
1000066f4:	mov	qword ptr [rbp - 0x50], rax
1000066f8:	xor	r12d, r12d
1000066fb:	xor	eax, eax
1000066fd:	mov	qword ptr [rbp - 0x38], rax
100006701:	xor	eax, eax
100006703:	mov	qword ptr [rbp - 0x60], rax
100006707:	xor	eax, eax
100006709:	mov	qword ptr [rbp - 0x68], rax
10000670d:	mov	dword ptr [rbp - 0x2c], 0x0
100006714:	jmp	0x1000067aa
100006719:	mov	dword ptr [rbp - 0x2c], 0x1
100006720:	lea	rax, [rip + 0xa36d]
100006727:	cmp	byte ptr [rax + 0x9], 0x0
10000672b:	mov	qword ptr [rbp - 0x68], rbx
10000672f:	je	0x10000677a
100006731:	mov	eax, 0x1
100006736:	mov	qword ptr [rbp - 0x50], rax
10000673a:	xor	eax, eax
10000673c:	mov	qword ptr [rbp - 0x38], rax
100006740:	mov	r12, qword ptr [rbp - 0x58]
100006744:	xor	eax, eax
100006746:	mov	qword ptr [rbp - 0x60], rax
10000674a:	jmp	0x1000067a6
10000674c:	mov	eax, 0x1
100006751:	mov	qword ptr [rbp - 0x50], rax
100006755:	xor	r12d, r12d
100006758:	xor	eax, eax
10000675a:	mov	qword ptr [rbp - 0x38], rax
10000675e:	xor	eax, eax
100006760:	mov	qword ptr [rbp - 0x60], rax
100006764:	mov	r15, qword ptr [rbp - 0x58]
100006768:	mov	r13, rbx
10000676b:	xor	eax, eax
10000676d:	mov	qword ptr [rbp - 0x68], rax
100006771:	mov	dword ptr [rbp - 0x2c], 0x0
100006778:	jmp	0x1000067a6
10000677a:	mov	r12, qword ptr [rbp - 0x58]
10000677e:	mov	rdi, r12
100006781:	call	0x100002ce1
100006786:	mov	qword ptr [rbp - 0x60], rax
10000678a:	lea	rax, [rip + 0xa29f]
100006791:	cmp	byte ptr [rax], 0x0
100006794:	je	0x1000067a0
100006796:	mov	rdi, r15
100006799:	call	0x100002ce1
10000679e:	jmp	0x1000067a2
1000067a0:	xor	eax, eax
1000067a2:	mov	qword ptr [rbp - 0x38], rax
1000067a6:	mov	rbx, qword ptr [rbp - 0x48]
1000067aa:	test	r13, r13
1000067ad:	je	0x1000067c2
1000067af:	mov	rdi, r15
1000067b2:	mov	rsi, r13
1000067b5:	call	0x100003fdb
1000067ba:	mov	rdi, r13
1000067bd:	call	0x100007927
1000067c2:	mov	rdi, r15
1000067c5:	call	0x100002f66
1000067ca:	mov	r15, qword ptr [rbp - 0x68]
1000067ce:	test	r15, r15
1000067d1:	je	0x1000067e6
1000067d3:	mov	rdi, r12
1000067d6:	mov	rsi, r15
1000067d9:	call	0x100003fdb
1000067de:	mov	rdi, r15
1000067e1:	call	0x100007927
1000067e6:	test	r12, r12
1000067e9:	mov	r14, qword ptr [rbp - 0x50]
1000067ed:	mov	r15d, dword ptr [rbp - 0x2c]
1000067f1:	mov	r13, qword ptr [rbp - 0x60]
1000067f5:	je	0x1000067ff
1000067f7:	mov	rdi, r12
1000067fa:	call	0x100002f66
1000067ff:	mov	r12d, r15d
100006802:	cmp	qword ptr [rbp - 0x40], 0x0
100006807:	je	0x100006830
100006809:	mov	rax, qword ptr [rbp - 0x40]
10000680d:	cmp	byte ptr [rax], 0x0
100006810:	je	0x100006830
100006812:	lea	rsi, [rip + 0x4e23] ## literal pool for: "-"
100006819:	mov	rdi, qword ptr [rbp - 0x40]
10000681d:	call	0x10000af5a ## symbol stub for: _strcmp
100006822:	test	eax, eax
100006824:	jne	0x10000683d
100006826:	jmp	0x100006830
100006828:	mov	rdi, rax
10000682b:	call	0x100002f66
100006830:	mov	rdi, rbx
100006833:	call	0x100006a57
100006838:	test	rax, rax
10000683b:	jne	0x100006828
10000683d:	mov	rdi, rbx
100006840:	call	0x100006c90
100006845:	test	r13, r13
100006848:	je	0x100006886
10000684a:	mov	rdi, r13
10000684d:	mov	rsi, qword ptr [rbp - 0x40]
100006851:	mov	rdx, r14
100006854:	call	0x100003f3c
100006859:	mov	rbx, qword ptr [rbp - 0x38]
10000685d:	test	rbx, rbx
100006860:	je	0x10000687e
100006862:	mov	rdi, rbx
100006865:	mov	rsi, qword ptr [rbp - 0x40]
100006869:	mov	rdx, r14
10000686c:	call	0x100003f3c
100006871:	cmp	rbx, r13
100006874:	je	0x10000687e
100006876:	mov	rdi, rbx
100006879:	call	0x100002f66
10000687e:	mov	rdi, r13
100006881:	call	0x100002f66
100006886:	test	r12d, r12d
100006889:	jne	0x1000068a1
10000688b:	xor	eax, eax
10000688d:	add	rsp, 0x48
100006891:	pop	rbx
100006892:	pop	r12
100006894:	pop	r13
100006896:	pop	r14
100006898:	pop	r15
10000689a:	pop	rbp
10000689b:	ret
10000689c:	call	0x10000a9ce
1000068a1:	mov	edi, 0x1
1000068a6:	call	0x10000ad9e ## symbol stub for: _exit
1000068ab:	push	rbp
1000068ac:	mov	rbp, rsp
1000068af:	push	r15
1000068b1:	push	r14
1000068b3:	push	r12
1000068b5:	push	rbx
1000068b6:	sub	rsp, 0x90
1000068bd:	mov	r14, rdi
1000068c0:	test	rdi, rdi
1000068c3:	lea	r15, [rip + 0x4d72] ## literal pool for: "-"
1000068ca:	cmove	r14, r15
1000068ce:	mov	edi, 0x60
1000068d3:	call	0x100007912
1000068d8:	mov	rbx, rax
1000068db:	xor	eax, eax
1000068dd:	mov	qword ptr [rbx], rax
1000068e0:	mov	qword ptr [rbx + 0x8], rax
1000068e4:	mov	qword ptr [rbx + 0x10], rax
1000068e8:	mov	qword ptr [rbx + 0x18], rax
1000068ec:	mov	qword ptr [rbx + 0x20], rax
1000068f0:	mov	qword ptr [rbx + 0x28], rax
1000068f4:	mov	qword ptr [rbx + 0x30], rax
1000068f8:	mov	qword ptr [rbx + 0x38], rax
1000068fc:	mov	qword ptr [rbx + 0x40], rax
100006900:	mov	qword ptr [rbx + 0x48], rax
100006904:	mov	qword ptr [rbx + 0x50], rax
100006908:	mov	qword ptr [rbx + 0x58], rax
10000690c:	lea	rcx, [rip + 0xa181]
100006913:	cmp	byte ptr [rcx + 0xe], 0x0
100006917:	mov	ecx, 0xa
10000691c:	cmovne	ecx, eax
10000691f:	mov	byte ptr [rbx + 0x5c], cl
100006922:	mov	rdi, r14
100006925:	call	0x10000794d
10000692a:	mov	qword ptr [rbx + 0x18], rax
10000692e:	mov	rdi, r14
100006931:	mov	rsi, r15
100006934:	call	0x10000af5a ## symbol stub for: _strcmp
100006939:	test	eax, eax
10000693b:	je	0x1000069b4
10000693d:	cmp	qword ptr [rip + 0xa0d3], 0x0
100006945:	jne	0x1000069b4
100006947:	cmp	byte ptr [rip + 0xa0d2], 0x0
10000694e:	je	0x1000069b4
100006950:	mov	rdi, r14
100006953:	xor	esi, esi
100006955:	xor	eax, eax
100006957:	call	0x10000ae76 ## symbol stub for: _open
10000695c:	test	eax, eax
10000695e:	js	0x100006a4d
100006964:	mov	r15d, eax
100006967:	lea	rsi, [rbp - 0xb0]
10000696e:	mov	edi, eax
100006970:	call	0x10000adec ## symbol stub for: _fstat$INODE64
100006975:	test	eax, eax
100006977:	js	0x1000069ac
100006979:	mov	r12, qword ptr [rbp - 0x50]
10000697d:	xor	edi, edi
10000697f:	mov	rsi, r12
100006982:	mov	edx, 0x1
100006987:	xor	ecx, ecx
100006989:	mov	r8d, r15d
10000698c:	xor	r9d, r9d
10000698f:	call	0x10000ae64 ## symbol stub for: _mmap
100006994:	cmp	rax, -0x1
100006998:	je	0x1000069ac
10000699a:	mov	dword ptr [rbx + 0x58], r15d
10000699e:	mov	qword ptr [rbx + 0x28], rax
1000069a2:	mov	qword ptr [rbx + 0x48], r12
1000069a6:	mov	qword ptr [rbx + 0x30], rax
1000069aa:	jmp	0x1000069b4
1000069ac:	mov	edi, r15d
1000069af:	call	0x10000ad86 ## symbol stub for: _close
1000069b4:	cmp	qword ptr [rbx + 0x28], 0x0
1000069b9:	je	0x1000069ce
1000069bb:	mov	rax, rbx
1000069be:	add	rsp, 0x90
1000069c5:	pop	rbx
1000069c6:	pop	r12
1000069c8:	pop	r14
1000069ca:	pop	r15
1000069cc:	pop	rbp
1000069cd:	ret
1000069ce:	lea	rsi, [rip + 0x4c83] ## literal pool for: "r"
1000069d5:	mov	rdi, r14
1000069d8:	call	0x100006310
1000069dd:	mov	qword ptr [rbx + 0x10], rax
1000069e1:	test	rax, rax
1000069e4:	je	0x100006a52
1000069e6:	lea	rsi, [rip + 0x4c4f] ## literal pool for: "-"
1000069ed:	mov	rdi, r14
1000069f0:	call	0x10000af5a ## symbol stub for: _strcmp
1000069f5:	test	eax, eax
1000069f7:	je	0x1000069bb
1000069f9:	mov	qword ptr [rbx + 0x40], 0x1000
100006a01:	mov	edi, 0x1000
100006a06:	call	0x100007912
100006a0b:	mov	qword ptr [rbx + 0x20], rax
100006a0f:	xor	ecx, ecx
100006a11:	mov	qword ptr [rbx + 0x38], rcx
100006a15:	mov	qword ptr [rbx + 0x50], rcx
100006a19:	mov	rcx, qword ptr [rbx + 0x10]
100006a1d:	mov	rdx, qword ptr [rbx + 0x40]
100006a21:	mov	esi, 0x1
100006a26:	mov	rdi, rax
100006a29:	call	0x10000ade0 ## symbol stub for: _fread
100006a2e:	mov	qword ptr [rbx + 0x38], rax
100006a32:	test	rax, rax
100006a35:	jne	0x1000069bb
100006a37:	mov	rdi, qword ptr [rbx + 0x10]
100006a3b:	call	0x10000adb0 ## symbol stub for: _ferror
100006a40:	test	eax, eax
100006a42:	je	0x1000069bb
100006a48:	call	0x10000a9ee
100006a4d:	call	0x10000a9fe
100006a52:	call	0x10000a9de
100006a57:	push	rbp
100006a58:	mov	rbp, rsp
100006a5b:	push	r15
100006a5d:	push	r14
100006a5f:	push	r13
100006a61:	push	r12
100006a63:	push	rbx
100006a64:	push	rax
100006a65:	mov	r15, rdi
100006a68:	mov	rbx, qword ptr [rdi + 0x28]
100006a6c:	test	rbx, rbx
100006a6f:	je	0x100006abd
100006a71:	add	rbx, qword ptr [r15 + 0x48]
100006a75:	mov	r13, qword ptr [r15 + 0x30]
100006a79:	cmp	r13, rbx
100006a7c:	jae	0x100006bd9
100006a82:	mov	r14, rbx
100006a85:	sub	r14, r13
100006a88:	movsx	esi, byte ptr [r15 + 0x5c]
100006a8d:	mov	rdi, r13
100006a90:	mov	rdx, r14
100006a93:	call	0x10000ae46 ## symbol stub for: _memchr
100006a98:	test	rax, rax
100006a9b:	je	0x100006c00
100006aa1:	mov	r12, rax
100006aa4:	mov	rsi, rax
100006aa7:	sub	rsi, r13
100006aaa:	mov	rdi, r13
100006aad:	call	0x100002dbc
100006ab2:	inc	r12
100006ab5:	mov	rbx, r12
100006ab8:	jmp	0x100006c0b
100006abd:	mov	rdi, qword ptr [r15 + 0x10]
100006ac1:	mov	rax, qword ptr [rip + 0x5560] ## literal pool symbol address: ___stdinp
100006ac8:	cmp	rdi, qword ptr [rax]
100006acb:	je	0x100006be0
100006ad1:	mov	rax, qword ptr [r15 + 0x38]
100006ad5:	xor	ebx, ebx
100006ad7:	sub	rax, qword ptr [r15 + 0x50]
100006adb:	cmovb	rax, rbx
100006adf:	mov	r14, rax
100006ae2:	mov	rdx, rax
100006ae5:	sub	rdx, rbx
100006ae8:	jbe	0x100006b08
100006aea:	mov	rdi, qword ptr [r15 + 0x20]
100006aee:	add	rdi, qword ptr [r15 + 0x50]
100006af2:	add	rdi, rbx
100006af5:	movsx	esi, byte ptr [r15 + 0x5c]
100006afa:	call	0x10000ae46 ## symbol stub for: _memchr
100006aff:	test	rax, rax
100006b02:	jne	0x100006c11
100006b08:	mov	rdi, qword ptr [r15 + 0x10]
100006b0c:	call	0x10000adaa ## symbol stub for: _feof
100006b11:	test	eax, eax
100006b13:	jne	0x100006c35
100006b19:	mov	rbx, qword ptr [r15 + 0x38]
100006b1d:	cmp	rbx, qword ptr [r15 + 0x40]
100006b21:	jne	0x100006c86
100006b27:	cmp	r14, 0x801
100006b2e:	jb	0x100006b81
100006b30:	mov	rdi, qword ptr [r15 + 0x20]
100006b34:	mov	r12, qword ptr [r15 + 0x50]
100006b38:	lea	rsi, [rbx + 0x1000]
100006b3f:	mov	qword ptr [r15 + 0x40], rsi
100006b43:	call	0x100007938
100006b48:	mov	qword ptr [r15 + 0x20], rax
100006b4c:	add	rax, qword ptr [r15 + 0x38]
100006b50:	mov	rcx, qword ptr [r15 + 0x10]
100006b54:	mov	esi, 0x1
100006b59:	mov	edx, 0x1000
100006b5e:	mov	rdi, rax
100006b61:	call	0x10000ade0 ## symbol stub for: _fread
100006b66:	test	rax, rax
100006b69:	je	0x100006c16
100006b6f:	sub	rbx, r12
100006b72:	add	qword ptr [r15 + 0x38], rax
100006b76:	add	r14, rax
100006b79:	mov	rax, r14
100006b7c:	jmp	0x100006adf
100006b81:	test	r14, r14
100006b84:	je	0x100006ba2
100006b86:	mov	rsi, qword ptr [r15 + 0x50]
100006b8a:	test	rsi, rsi
100006b8d:	je	0x100006ba2
100006b8f:	mov	rdi, qword ptr [r15 + 0x20]
100006b93:	add	rsi, rdi
100006b96:	mov	rdx, r14
100006b99:	call	0x10000ae58 ## symbol stub for: _memmove
100006b9e:	mov	rbx, qword ptr [r15 + 0x40]
100006ba2:	mov	qword ptr [r15 + 0x50], 0x0
100006baa:	mov	rdi, qword ptr [r15 + 0x20]
100006bae:	add	rdi, r14
100006bb1:	sub	rbx, r14
100006bb4:	mov	rcx, qword ptr [r15 + 0x10]
100006bb8:	mov	esi, 0x1
100006bbd:	mov	rdx, rbx
100006bc0:	call	0x10000ade0 ## symbol stub for: _fread
100006bc5:	test	rax, rax
100006bc8:	je	0x100006c28
100006bca:	add	rax, r14
100006bcd:	mov	qword ptr [r15 + 0x38], rax
100006bd1:	mov	rbx, r14
100006bd4:	jmp	0x100006adf
100006bd9:	xor	eax, eax
100006bdb:	jmp	0x100006c77
100006be0:	lea	rsi, [rbp - 0x30]
100006be4:	mov	qword ptr [rsi], 0x0
100006beb:	lea	rax, [rip + 0x9ea2]
100006bf2:	movzx	edx, byte ptr [rax + 0xe]
100006bf6:	mov	rcx, r15
100006bf9:	call	0x1000031fd
100006bfe:	jmp	0x100006c77
100006c00:	mov	rdi, r13
100006c03:	mov	rsi, r14
100006c06:	call	0x100002dbc
100006c0b:	mov	qword ptr [r15 + 0x30], rbx
100006c0f:	jmp	0x100006c77
100006c11:	mov	rbx, rax
100006c14:	jmp	0x100006c3d
100006c16:	mov	rdi, qword ptr [r15 + 0x10]
100006c1a:	call	0x10000adb0 ## symbol stub for: _ferror
100006c1f:	test	eax, eax
100006c21:	je	0x100006c35
100006c23:	call	0x10000aa0e
100006c28:	mov	rdi, qword ptr [r15 + 0x10]
100006c2c:	call	0x10000adb0 ## symbol stub for: _ferror
100006c31:	test	eax, eax
100006c33:	jne	0x100006c8b
100006c35:	mov	rbx, qword ptr [r15 + 0x20]
100006c39:	add	rbx, qword ptr [r15 + 0x38]
100006c3d:	mov	rcx, qword ptr [r15 + 0x20]
100006c41:	mov	rdx, qword ptr [r15 + 0x50]
100006c45:	lea	rdi, [rcx + rdx]
100006c49:	xor	eax, eax
100006c4b:	cmp	rdi, rbx
100006c4e:	ja	0x100006c6d
100006c50:	test	r14, r14
100006c53:	je	0x100006c6d
100006c55:	cmp	rdx, qword ptr [r15 + 0x38]
100006c59:	jae	0x100006c6d
100006c5b:	mov	rsi, rbx
100006c5e:	sub	rsi, rcx
100006c61:	sub	rsi, rdx
100006c64:	call	0x100002dbc
100006c69:	mov	rcx, qword ptr [r15 + 0x20]
100006c6d:	sub	rbx, rcx
100006c70:	inc	rbx
100006c73:	mov	qword ptr [r15 + 0x50], rbx
100006c77:	add	rsp, 0x8
100006c7b:	pop	rbx
100006c7c:	pop	r12
100006c7e:	pop	r13
100006c80:	pop	r14
100006c82:	pop	r15
100006c84:	pop	rbp
100006c85:	ret
100006c86:	call	0x10000aa2e
100006c8b:	call	0x10000aa1e
100006c90:	test	rdi, rdi
100006c93:	je	0x100006d39
100006c99:	push	rbp
100006c9a:	mov	rbp, rsp
100006c9d:	push	rbx
100006c9e:	push	rax
100006c9f:	mov	rbx, rdi
100006ca2:	mov	rdi, qword ptr [rdi + 0x28]
100006ca6:	test	rdi, rdi
100006ca9:	je	0x100006cb4
100006cab:	mov	rsi, qword ptr [rbx + 0x48]
100006caf:	call	0x10000ae6a ## symbol stub for: _munmap
100006cb4:	mov	edi, dword ptr [rbx + 0x58]
100006cb7:	test	edi, edi
100006cb9:	je	0x100006cc0
100006cbb:	call	0x10000ad86 ## symbol stub for: _close
100006cc0:	mov	rdi, qword ptr [rbx + 0x20]
100006cc4:	test	rdi, rdi
100006cc7:	je	0x100006cce
100006cc9:	call	0x100007927
100006cce:	mov	rdi, qword ptr [rbx + 0x10]
100006cd2:	test	rdi, rdi
100006cd5:	je	0x100006cec
100006cd7:	mov	rax, qword ptr [rip + 0x534a] ## literal pool symbol address: ___stdinp
100006cde:	cmp	rdi, qword ptr [rax]
100006ce1:	je	0x100006cec
100006ce3:	mov	rsi, qword ptr [rbx + 0x18]
100006ce7:	call	0x100006476
100006cec:	mov	rdi, qword ptr [rbx + 0x18]
100006cf0:	test	rdi, rdi
100006cf3:	je	0x100006cfa
100006cf5:	call	0x100007927
100006cfa:	xor	eax, eax
100006cfc:	mov	qword ptr [rbx + 0x58], rax
100006d00:	mov	qword ptr [rbx + 0x50], rax
100006d04:	mov	qword ptr [rbx + 0x48], rax
100006d08:	mov	qword ptr [rbx + 0x40], rax
100006d0c:	mov	qword ptr [rbx + 0x38], rax
100006d10:	mov	qword ptr [rbx + 0x30], rax
100006d14:	mov	qword ptr [rbx + 0x28], rax
100006d18:	mov	qword ptr [rbx + 0x20], rax
100006d1c:	mov	qword ptr [rbx + 0x18], rax
100006d20:	mov	qword ptr [rbx + 0x10], rax
100006d24:	mov	qword ptr [rbx + 0x8], rax
100006d28:	mov	qword ptr [rbx], rax
100006d2b:	mov	rdi, rbx
100006d2e:	add	rsp, 0x8
100006d32:	pop	rbx
100006d33:	pop	rbp
100006d34:	jmp	0x100007927
100006d39:	ret
100006d3a:	push	rbp
100006d3b:	mov	rbp, rsp
100006d3e:	push	r14
100006d40:	push	rbx
100006d41:	test	rdi, rdi
100006d44:	je	0x100006d7e
100006d46:	mov	r14, rdi
100006d49:	mov	edi, dword ptr [rip + 0x9bc9]
100006d4f:	call	0x10000af36 ## symbol stub for: _semaphore_wait
100006d54:	mov	rbx, qword ptr [rip + 0x9bb5]
100006d5b:	test	rbx, rbx
100006d5e:	je	0x100006d7a
100006d60:	mov	rdi, qword ptr [rbx]
100006d63:	test	rdi, rdi
100006d66:	je	0x100006d74
100006d68:	mov	rsi, r14
100006d6b:	call	0x10000af5a ## symbol stub for: _strcmp
100006d70:	test	eax, eax
100006d72:	je	0x100006d82
100006d74:	mov	rbx, qword ptr [rbx + 0x8]
100006d78:	jmp	0x100006d5b
100006d7a:	xor	ebx, ebx
100006d7c:	jmp	0x100006d84
100006d7e:	xor	ebx, ebx
100006d80:	jmp	0x100006d8f
100006d82:	mov	bl, 0x1
100006d84:	mov	edi, dword ptr [rip + 0x9b8e]
100006d8a:	call	0x10000af30 ## symbol stub for: _semaphore_signal
100006d8f:	mov	eax, ebx
100006d91:	pop	rbx
100006d92:	pop	r14
100006d94:	pop	rbp
100006d95:	ret
100006d96:	push	rbp
100006d97:	mov	rbp, rsp
100006d9a:	push	r15
100006d9c:	push	r14
100006d9e:	push	r12
100006da0:	push	rbx
100006da1:	mov	r14, rdx
100006da4:	mov	r12, rsi
100006da7:	call	0x1000068ab
100006dac:	test	rax, rax
100006daf:	je	0x100006e17
100006db1:	mov	r15, rax
100006db4:	mov	rdi, r15
100006db7:	call	0x100006a57
100006dbc:	test	rax, rax
100006dbf:	je	0x100006e04
100006dc1:	mov	rdi, r12
100006dc4:	mov	rsi, rax
100006dc7:	call	0x10000609e
100006dcc:	mov	rax, qword ptr [r12 + 0x8]
100006dd1:	cmp	rax, qword ptr [rip + 0x95c8]
100006dd8:	jb	0x100006db4
100006dda:	call	0x100005ea2
100006ddf:	mov	rbx, rax
100006de2:	mov	rdi, r12
100006de5:	mov	rsi, rax
100006de8:	call	0x100006e1c
100006ded:	mov	rdi, r14
100006df0:	mov	rsi, rbx
100006df3:	xor	edx, edx
100006df5:	call	0x100005f29
100006dfa:	mov	rdi, r12
100006dfd:	call	0x10000614d
100006e02:	jmp	0x100006db4
100006e04:	mov	rdi, r15
100006e07:	call	0x100006c90
100006e0c:	xor	eax, eax
100006e0e:	pop	rbx
100006e0f:	pop	r12
100006e11:	pop	r14
100006e13:	pop	r15
100006e15:	pop	rbp
100006e16:	ret
100006e17:	call	0x10000aa43
100006e1c:	push	rbp
100006e1d:	mov	rbp, rsp
100006e20:	push	r14
100006e22:	push	rbx
100006e23:	mov	r14, rsi
100006e26:	mov	rbx, rdi
100006e29:	lea	rax, [rip + 0x9be0]
100006e30:	mov	rax, qword ptr [rax]
100006e33:	cmp	byte ptr [rax + 0xd], 0x0
100006e37:	jne	0x100006e5b
100006e39:	cmp	byte ptr [rax + 0x10], 0x0
100006e3d:	jne	0x100006e5b
100006e3f:	cmp	byte ptr [rax + 0x11], 0x0
100006e43:	jne	0x100006e5b
100006e45:	cmp	byte ptr [rax + 0xb], 0x0
100006e49:	jne	0x100006e5b
100006e4b:	cmp	byte ptr [rax + 0x12], 0x0
100006e4f:	jne	0x100006e5b
100006e51:	cmp	byte ptr [rax + 0xe], 0x0
100006e55:	je	0x100006f4d
100006e5b:	lea	rax, [rip + 0x9c32]
100006e62:	mov	eax, dword ptr [rax + 0x4]
100006e65:	cmp	eax, 0x4
100006e68:	je	0x100006f80
100006e6e:	lea	rcx, [rip + 0x9c1f]
100006e75:	cmp	byte ptr [rcx + 0xc], 0x0
100006e79:	je	0x100006e8e
100006e7b:	cmp	eax, 0x4
100006e7e:	je	0x100006e9e
100006e80:	cmp	eax, 0x2
100006e83:	je	0x100006e9e
100006e85:	test	eax, eax
100006e87:	je	0x100006e92
100006e89:	call	0x10000aa53
100006e8e:	test	eax, eax
100006e90:	jne	0x100006e9e
100006e92:	mov	dword ptr [rcx + 0x4], 0x2
100006e99:	mov	eax, 0x2
100006e9e:	lea	rcx, [rip + 0x9b8b]
100006ea5:	cmp	byte ptr [rcx], 0x0
100006ea8:	je	0x100006ef3
100006eaa:	cmp	eax, 0x3
100006ead:	lea	rcx, [rip + 0x47e5] ## literal pool for: "heapsort"
100006eb4:	lea	rdx, [rip + 0x47e7] ## literal pool for: "quicksort"
100006ebb:	cmove	rdx, rcx
100006ebf:	cmp	eax, 0x4
100006ec2:	lea	rcx, [rip + 0x47c6] ## literal pool for: "radixsort"
100006ec9:	cmovne	rcx, rdx
100006ecd:	cmp	eax, 0x2
100006ed0:	lea	rsi, [rip + 0x47ae] ## literal pool for: "mergesort"
100006ed7:	cmovne	rsi, rcx
100006edb:	lea	rdi, [rip + 0x4793] ## literal pool for: "sort_method=%s\n"
100006ee2:	xor	eax, eax
100006ee4:	call	0x10000ae8e ## symbol stub for: _printf
100006ee9:	lea	rax, [rip + 0x9ba4]
100006ef0:	mov	eax, dword ptr [rax + 0x4]
100006ef3:	dec	eax
100006ef5:	cmp	eax, 0x3
100006ef8:	ja	0x100006f13
100006efa:	lea	rcx, [rip + 0x87]
100006f01:	movsxd	rax, dword ptr [rcx + 4*rax]
100006f05:	add	rax, rcx
100006f08:	jmp	rax
100006f0a:	lea	rsi, [rip + 0x905]
100006f11:	jmp	0x100006f23
100006f13:	mov	rsi, qword ptr [rip + 0x513e] ## literal pool symbol address: _mergesort
100006f1a:	jmp	0x100006f23
100006f1c:	mov	rsi, qword ptr [rip + 0x5115] ## literal pool symbol address: _heapsort
100006f23:	mov	rdi, rbx
100006f26:	mov	rdx, r14
100006f29:	pop	rbx
100006f2a:	pop	r14
100006f2c:	pop	rbp
100006f2d:	jmp	0x10000746f
100006f32:	mov	rdi, qword ptr [rbx]
100006f35:	mov	rsi, qword ptr [rbx + 0x10]
100006f39:	call	0x100007962
100006f3e:	mov	rdi, rbx
100006f41:	mov	rsi, r14
100006f44:	pop	rbx
100006f45:	pop	r14
100006f47:	pop	rbp
100006f48:	jmp	0x1000061dd
100006f4d:	lea	rcx, [rip + 0x9b40]
100006f54:	mov	eax, dword ptr [rcx + 0x4]
100006f57:	test	eax, eax
100006f59:	jne	0x100006e6e
100006f5f:	lea	rdx, [rip + 0x9aa6]
100006f66:	cmp	byte ptr [rdx], 0x0
100006f69:	je	0x100006e6e
100006f6f:	mov	dword ptr [rcx + 0x4], 0x4
100006f76:	mov	eax, 0x4
100006f7b:	jmp	0x100006e9e
100006f80:	call	0x10000aa73
100006f85:	nop	dword ptr [rax]
	.byte 0x82 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100006f8b:	dec	dword ptr [rbx - 0x6b000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100006f93:	jmp	[rdx + 0x48ffffff]
100006f99:	test	edi, edi
100006f9b:	je	0x1000070d1
100006fa1:	mov	rdx, rsi
100006fa4:	test	rsi, rsi
100006fa7:	je	0x1000070d1
100006fad:	push	rbp
100006fae:	mov	rbp, rsp
100006fb1:	push	r15
100006fb3:	push	r14
100006fb5:	push	r13
100006fb7:	push	r12
100006fb9:	push	rbx
100006fba:	sub	rsp, 0x38
100006fbe:	mov	r12, rdi
100006fc1:	mov	r14, qword ptr [rdi + 0x8]
100006fc5:	cmp	r14, qword ptr [rip + 0x93e4]
100006fcc:	jae	0x100006fd7
100006fce:	mov	rsi, qword ptr [r12]
100006fd2:	jmp	0x1000070bb
100006fd7:	mov	qword ptr [rbp - 0x38], rdx
100006fdb:	pxor	xmm0, xmm0
100006fdf:	movdqa	xmmword ptr [rbp - 0x60], xmm0
100006fe4:	mov	qword ptr [rbp - 0x50], 0x0
100006fec:	mov	byte ptr [rbp - 0x48], 0x1
100006ff0:	test	r14, r14
100006ff3:	je	0x10000707b
100006ff9:	xor	r15d, r15d
100006ffc:	sub	r14, r15
100006fff:	call	0x100005ea2
100007004:	mov	rcx, qword ptr [rip + 0x93a5]
10000700b:	lea	rbx, [rcx - 0x1]
10000700f:	cmp	r14, rcx
100007012:	cmovb	rbx, r14
100007016:	lea	rsi, [8*r15]
10000701e:	add	rsi, qword ptr [r12]
100007022:	mov	rdi, rbx
100007025:	mov	qword ptr [rbp - 0x40], rax
100007029:	mov	rdx, rax
10000702c:	call	0x1000070d2
100007031:	mov	qword ptr [rbp - 0x30], rbx
100007035:	test	rbx, rbx
100007038:	je	0x10000705e
10000703a:	cmp	byte ptr [r12 + 0x18], 0x0
100007040:	je	0x10000705e
100007042:	mov	r13, qword ptr [rbp - 0x30]
100007046:	mov	r14, r15
100007049:	mov	rax, qword ptr [r12]
10000704d:	mov	rdi, qword ptr [rax + 8*r14]
100007051:	call	0x10000afa8 ## symbol stub for: _unlink
100007056:	inc	r14
100007059:	dec	r13
10000705c:	jne	0x100007049
10000705e:	lea	rdi, [rbp - 0x60]
100007062:	mov	rsi, qword ptr [rbp - 0x40]
100007066:	xor	edx, edx
100007068:	call	0x100005f29
10000706d:	add	r15, qword ptr [rbp - 0x30]
100007071:	mov	r14, qword ptr [r12 + 0x8]
100007076:	cmp	r14, r15
100007079:	ja	0x100006ffc
10000707b:	mov	byte ptr [r12 + 0x18], 0x0
100007081:	mov	rdi, r12
100007084:	call	0x100005ffb
100007089:	mov	rsi, qword ptr [rbp - 0x60]
10000708d:	mov	qword ptr [r12], rsi
100007091:	movdqu	xmm0, xmmword ptr [rbp - 0x58]
100007096:	movdqu	xmmword ptr [r12 + 0x8], xmm0
10000709d:	mov	al, byte ptr [rbp - 0x48]
1000070a0:	mov	byte ptr [r12 + 0x18], al
1000070a5:	movq	r14, xmm0
1000070aa:	cmp	r14, qword ptr [rip + 0x92ff]
1000070b1:	jae	0x100006fdb
1000070b7:	mov	rdx, qword ptr [rbp - 0x38]
1000070bb:	mov	rdi, r14
1000070be:	call	0x1000070d2
1000070c3:	add	rsp, 0x38
1000070c7:	pop	rbx
1000070c8:	pop	r12
1000070ca:	pop	r13
1000070cc:	pop	r14
1000070ce:	pop	r15
1000070d0:	pop	rbp
1000070d1:	ret
1000070d2:	push	rbp
1000070d3:	mov	rbp, rsp
1000070d6:	push	r15
1000070d8:	push	r14
1000070da:	push	r13
1000070dc:	push	r12
1000070de:	push	rbx
1000070df:	sub	rsp, 0x18
1000070e3:	test	rsi, rsi
1000070e6:	je	0x100007453
1000070ec:	test	rdx, rdx
1000070ef:	je	0x100007453
1000070f5:	mov	rbx, rsi
1000070f8:	mov	r12, rdi
1000070fb:	lea	rsi, [rip + 0x452e] ## literal pool for: "w"
100007102:	mov	qword ptr [rbp - 0x40], rdx
100007106:	mov	rdi, rdx
100007109:	call	0x100006310
10000710e:	mov	qword ptr [rbp - 0x30], rax
100007112:	test	rax, rax
100007115:	je	0x10000746a
10000711b:	lea	rdi, [8*r12 + 0x8]
100007123:	call	0x100007912
100007128:	mov	r13, rax
10000712b:	test	r12, r12
10000712e:	je	0x100007224
100007134:	xor	r15d, r15d
100007137:	test	r13, r13
10000713a:	je	0x1000071cf
100007140:	mov	r14, qword ptr [rbx + 8*r15]
100007144:	test	r14, r14
100007147:	je	0x1000071cf
10000714d:	mov	edi, 0x18
100007152:	call	0x100007912
100007157:	mov	qword ptr [r13 + 8*r15], rax
10000715c:	mov	qword ptr [rax + 0x10], r15
100007160:	mov	rdi, r14
100007163:	call	0x1000068ab
100007168:	mov	rcx, qword ptr [r13 + 8*r15]
10000716d:	mov	qword ptr [rcx], rax
100007170:	mov	rax, qword ptr [r13 + 8*r15]
100007175:	mov	rdi, qword ptr [rax]
100007178:	test	rdi, rdi
10000717b:	je	0x100007462
100007181:	call	0x100006a57
100007186:	test	rax, rax
100007189:	je	0x1000071af
10000718b:	mov	r14, rax
10000718e:	call	0x1000040ee
100007193:	mov	rcx, qword ptr [r13 + 8*r15]
100007198:	mov	qword ptr [rcx + 0x8], rax
10000719c:	mov	rax, qword ptr [r13 + 8*r15]
1000071a1:	mov	rdi, qword ptr [rax + 0x8]
1000071a5:	mov	rsi, r14
1000071a8:	call	0x1000041dc
1000071ad:	jmp	0x1000071cf
1000071af:	mov	rax, qword ptr [r13 + 8*r15]
1000071b4:	mov	rdi, qword ptr [rax]
1000071b7:	call	0x100006c90
1000071bc:	mov	rax, qword ptr [r13 + 8*r15]
1000071c1:	xor	ecx, ecx
1000071c3:	mov	qword ptr [rax], rcx
1000071c6:	mov	rax, qword ptr [r13 + 8*r15]
1000071cb:	mov	qword ptr [rax + 0x8], rcx
1000071cf:	inc	r15
1000071d2:	cmp	r12, r15
1000071d5:	jne	0x100007137
1000071db:	xor	r14d, r14d
1000071de:	test	r14, r14
1000071e1:	je	0x10000721c
1000071e3:	mov	rdi, qword ptr [r13 + 8*r14]
1000071e8:	mov	r15, r14
1000071eb:	lea	rbx, [r15 - 0x1]
1000071ef:	shr	rbx
1000071f2:	mov	rsi, qword ptr [r13 + 8*rbx]
1000071f7:	call	0x100007823
1000071fc:	test	eax, eax
1000071fe:	jns	0x10000721c
100007200:	mov	rdi, qword ptr [r13 + 8*r15]
100007205:	mov	rax, qword ptr [r13 + 8*rbx]
10000720a:	mov	qword ptr [r13 + 8*r15], rax
10000720f:	mov	qword ptr [r13 + 8*rbx], rdi
100007214:	mov	r15, rbx
100007217:	test	rbx, rbx
10000721a:	jne	0x1000071eb
10000721c:	inc	r14
10000721f:	cmp	r14, r12
100007222:	jne	0x1000071de
100007224:	mov	r14, qword ptr [r13]
100007228:	cmp	qword ptr [r14], 0x0
10000722c:	je	0x1000073b6
100007232:	xor	eax, eax
100007234:	mov	qword ptr [rbp - 0x38], rax
100007238:	test	r14, r14
10000723b:	je	0x1000072ce
100007241:	mov	rax, qword ptr [r14 + 0x8]
100007245:	test	rax, rax
100007248:	je	0x1000072ce
10000724e:	mov	rdi, qword ptr [rax]
100007251:	test	rdi, rdi
100007254:	je	0x1000072ce
100007256:	lea	rax, [rip + 0x9837]
10000725d:	cmp	byte ptr [rax + 0xd], 0x0
100007261:	je	0x1000072a3
100007263:	add	r14, 0x8
100007267:	mov	rbx, qword ptr [rbp - 0x38]
10000726b:	test	rbx, rbx
10000726e:	je	0x1000072b2
100007270:	mov	rdi, rbx
100007273:	mov	rsi, r14
100007276:	call	0x100004dbd
10000727b:	test	eax, eax
10000727d:	je	0x1000072ce
10000727f:	mov	rax, qword ptr [r14]
100007282:	mov	rdi, qword ptr [rax]
100007285:	lea	rax, [rip + 0x9808]
10000728c:	movzx	edx, byte ptr [rax + 0xe]
100007290:	mov	rsi, qword ptr [rbp - 0x30]
100007294:	call	0x1000030c8
100007299:	mov	rdi, rbx
10000729c:	call	0x100002f66
1000072a1:	jmp	0x1000072bf
1000072a3:	movzx	edx, byte ptr [rax + 0xe]
1000072a7:	mov	rsi, qword ptr [rbp - 0x30]
1000072ab:	call	0x1000030c8
1000072b0:	jmp	0x1000072ce
1000072b2:	movzx	edx, byte ptr [rax + 0xe]
1000072b6:	mov	rsi, qword ptr [rbp - 0x30]
1000072ba:	call	0x1000030c8
1000072bf:	mov	rax, qword ptr [r14]
1000072c2:	mov	rdi, qword ptr [rax]
1000072c5:	call	0x100002ce1
1000072ca:	mov	qword ptr [rbp - 0x38], rax
1000072ce:	mov	r15, qword ptr [r13]
1000072d2:	test	r15, r15
1000072d5:	je	0x100007339
1000072d7:	mov	rdi, qword ptr [r15]
1000072da:	test	rdi, rdi
1000072dd:	je	0x100007339
1000072df:	call	0x100006a57
1000072e4:	test	rax, rax
1000072e7:	je	0x10000730b
1000072e9:	mov	r14, rax
1000072ec:	mov	rdi, qword ptr [r15 + 0x8]
1000072f0:	test	rdi, rdi
1000072f3:	jne	0x100007301
1000072f5:	call	0x1000040ee
1000072fa:	mov	rdi, rax
1000072fd:	mov	qword ptr [r15 + 0x8], rax
100007301:	mov	rsi, r14
100007304:	call	0x1000041dc
100007309:	jmp	0x100007339
10000730b:	mov	rdi, qword ptr [r15]
10000730e:	call	0x100006c90
100007313:	mov	qword ptr [r15], 0x0
10000731a:	mov	rdi, qword ptr [r15 + 0x8]
10000731e:	test	rdi, rdi
100007321:	je	0x100007339
100007323:	call	0x10000423c
100007328:	mov	rdi, qword ptr [r15 + 0x8]
10000732c:	call	0x100007927
100007331:	mov	qword ptr [r15 + 0x8], 0x0
100007339:	cmp	r12, 0x2
10000733d:	jb	0x10000739a
10000733f:	mov	ebx, 0x1
100007344:	xor	r14d, r14d
100007347:	lea	r15, [rbx + 0x1]
10000734b:	cmp	r15, r12
10000734e:	jae	0x100007363
100007350:	mov	rdi, qword ptr [r13 + 8*rbx]
100007355:	mov	rsi, qword ptr [r13 + 8*rbx + 0x8]
10000735a:	call	0x100007823
10000735f:	test	eax, eax
100007361:	jg	0x100007366
100007363:	mov	r15, rbx
100007366:	mov	rdi, qword ptr [r13 + 8*r14]
10000736b:	mov	rsi, qword ptr [r13 + 8*r15]
100007370:	call	0x100007823
100007375:	test	eax, eax
100007377:	jle	0x10000739a
100007379:	mov	rax, qword ptr [r13 + 8*r14]
10000737e:	mov	rcx, qword ptr [r13 + 8*r15]
100007383:	mov	qword ptr [r13 + 8*r14], rcx
100007388:	mov	qword ptr [r13 + 8*r15], rax
10000738d:	lea	rbx, [r15 + r15 + 0x1]
100007392:	mov	r14, r15
100007395:	cmp	rbx, r12
100007398:	jb	0x100007347
10000739a:	mov	r14, qword ptr [r13]
10000739e:	cmp	qword ptr [r14], 0x0
1000073a2:	jne	0x100007238
1000073a8:	mov	rdi, qword ptr [rbp - 0x38]
1000073ac:	test	rdi, rdi
1000073af:	je	0x1000073b6
1000073b1:	call	0x100002f66
1000073b6:	test	r12, r12
1000073b9:	je	0x100007430
1000073bb:	xor	r14d, r14d
1000073be:	mov	rdi, qword ptr [r13 + 8*r14]
1000073c3:	test	rdi, rdi
1000073c6:	je	0x100007428
1000073c8:	mov	rax, qword ptr [rdi]
1000073cb:	test	rax, rax
1000073ce:	je	0x1000073e9
1000073d0:	mov	rdi, rax
1000073d3:	call	0x100006c90
1000073d8:	mov	rax, qword ptr [r13 + 8*r14]
1000073dd:	mov	qword ptr [rax], 0x0
1000073e4:	mov	rdi, qword ptr [r13 + 8*r14]
1000073e9:	mov	rax, qword ptr [rdi + 0x8]
1000073ed:	test	rax, rax
1000073f0:	je	0x10000741a
1000073f2:	mov	rdi, rax
1000073f5:	call	0x10000423c
1000073fa:	mov	rax, qword ptr [r13 + 8*r14]
1000073ff:	mov	rdi, qword ptr [rax + 0x8]
100007403:	call	0x100007927
100007408:	mov	rax, qword ptr [r13 + 8*r14]
10000740d:	mov	qword ptr [rax + 0x8], 0x0
100007415:	mov	rdi, qword ptr [r13 + 8*r14]
10000741a:	call	0x100007927
10000741f:	mov	qword ptr [r13 + 8*r14], 0x0
100007428:	inc	r14
10000742b:	cmp	r12, r14
10000742e:	jne	0x1000073be
100007430:	mov	rdi, r13
100007433:	call	0x100007927
100007438:	mov	rdi, qword ptr [rbp - 0x30]
10000743c:	mov	rsi, qword ptr [rbp - 0x40]
100007440:	add	rsp, 0x18
100007444:	pop	rbx
100007445:	pop	r12
100007447:	pop	r13
100007449:	pop	r14
10000744b:	pop	r15
10000744d:	pop	rbp
10000744e:	jmp	0x100006476
100007453:	add	rsp, 0x18
100007457:	pop	rbx
100007458:	pop	r12
10000745a:	pop	r13
10000745c:	pop	r14
10000745e:	pop	r15
100007460:	pop	rbp
100007461:	ret
100007462:	mov	rdi, r14
100007465:	call	0x10000aaa3
10000746a:	call	0x10000aa93
10000746f:	push	rbp
100007470:	mov	rbp, rsp
100007473:	push	r15
100007475:	push	r14
100007477:	push	r13
100007479:	push	r12
10000747b:	push	rbx
10000747c:	sub	rsp, 0x68
100007480:	mov	r12, rdx
100007483:	mov	r13, rsi
100007486:	mov	r15, rdi
100007489:	mov	rax, qword ptr [rip + 0x4b88] ## literal pool symbol address: ___stack_chk_guard
100007490:	mov	rax, qword ptr [rax]
100007493:	mov	qword ptr [rbp - 0x30], rax
100007497:	lea	r14, [rip + 0x8fa2]
10000749e:	mov	rbx, qword ptr [r14]
1000074a1:	mov	rsi, qword ptr [rdi + 0x10]
1000074a5:	cmp	rbx, 0x2
1000074a9:	jb	0x1000077c1
1000074af:	cmp	rsi, 0x270f
1000074b6:	jbe	0x1000077c1
1000074bc:	mov	qword ptr [rbp - 0x80], r12
1000074c0:	shl	rbx, 0x3
1000074c4:	mov	rdi, rbx
1000074c7:	call	0x100007912
1000074cc:	mov	r12, rax
1000074cf:	mov	rax, qword ptr [r15 + 0x10]
1000074d3:	mov	rcx, qword ptr [r14]
1000074d6:	xor	edx, edx
1000074d8:	div	rcx
1000074db:	mov	qword ptr [rip + 0x9446], r13
1000074e2:	test	rcx, rcx
1000074e5:	je	0x10000754b
1000074e7:	mov	r14, rax
1000074ea:	xor	r13d, r13d
1000074ed:	xor	ebx, ebx
1000074ef:	mov	edi, 0x28
1000074f4:	call	0x100007912
1000074f9:	mov	qword ptr [r12 + 8*rbx], rax
1000074fd:	lea	rcx, [8*r13]
100007505:	add	rcx, qword ptr [r15]
100007508:	mov	qword ptr [rax], rcx
10000750b:	mov	rcx, qword ptr [r12 + 8*rbx]
10000750f:	mov	qword ptr [rcx + 0x8], 0x0
100007517:	mov	qword ptr [rcx + 0x20], rbx
10000751b:	lea	rax, [rip + 0x8f1e]
100007522:	mov	rax, qword ptr [rax]
100007525:	lea	rsi, [rax - 0x1]
100007529:	mov	rdx, r14
10000752c:	cmp	rbx, rsi
10000752f:	jne	0x100007538
100007531:	mov	rdx, qword ptr [r15 + 0x10]
100007535:	sub	rdx, r13
100007538:	mov	qword ptr [rcx + 0x10], rdx
10000753c:	mov	qword ptr [rcx + 0x18], rdx
100007540:	add	r13, rdx
100007543:	inc	rbx
100007546:	cmp	rbx, rax
100007549:	jb	0x1000074ef
10000754b:	mov	r15, qword ptr [rip + 0x4afe] ## literal pool symbol address: _mach_task_self_
100007552:	mov	edi, dword ptr [r15]
100007555:	lea	rsi, [rip + 0x93d4]
10000755c:	xor	edx, edx
10000755e:	xor	ecx, ecx
100007560:	call	0x10000af24 ## symbol stub for: _semaphore_create
100007565:	test	eax, eax
100007567:	jne	0x100007811
10000756d:	lea	r14, [rip + 0x8ecc]
100007574:	cmp	qword ptr [r14], 0x0
100007578:	je	0x100007615
10000757e:	xor	r14d, r14d
100007581:	lea	r15, [rbp - 0x70]
100007585:	lea	rbx, [rip + 0x2f3]
10000758c:	lea	r13, [rbp - 0x88]
100007593:	mov	rdi, r15
100007596:	call	0x10000ae9a ## symbol stub for: _pthread_attr_init
10000759b:	mov	rdi, r15
10000759e:	mov	esi, 0x2
1000075a3:	call	0x10000aea0 ## symbol stub for: _pthread_attr_setdetachstate
1000075a8:	mov	rcx, qword ptr [r12 + 8*r14]
1000075ac:	mov	rdi, r13
1000075af:	mov	rsi, r15
1000075b2:	mov	rdx, rbx
1000075b5:	call	0x10000aebe ## symbol stub for: _pthread_create
1000075ba:	test	eax, eax
1000075bc:	jns	0x1000075d3
1000075be:	call	0x10000ad56 ## symbol stub for: ___error
1000075c3:	cmp	dword ptr [rax], 0x23
1000075c6:	jne	0x10000780c
1000075cc:	call	0x10000af1e ## symbol stub for: _sched_yield
1000075d1:	jmp	0x1000075a8
1000075d3:	mov	rdi, r15
1000075d6:	call	0x10000ae94 ## symbol stub for: _pthread_attr_destroy
1000075db:	inc	r14
1000075de:	lea	rax, [rip + 0x8e5b]
1000075e5:	mov	rax, qword ptr [rax]
1000075e8:	cmp	r14, rax
1000075eb:	jb	0x100007593
1000075ed:	test	rax, rax
1000075f0:	lea	r14, [rip + 0x8e49]
1000075f7:	mov	r15, qword ptr [rip + 0x4a52] ## literal pool symbol address: _mach_task_self_
1000075fe:	je	0x100007615
100007600:	xor	ebx, ebx
100007602:	mov	edi, dword ptr [rip + 0x9328]
100007608:	call	0x10000af36 ## symbol stub for: _semaphore_wait
10000760d:	inc	rbx
100007610:	cmp	rbx, qword ptr [r14]
100007613:	jb	0x100007602
100007615:	mov	edi, dword ptr [r15]
100007618:	mov	esi, dword ptr [rip + 0x9312]
10000761e:	call	0x10000af2a ## symbol stub for: _semaphore_destroy
100007623:	mov	r13, qword ptr [r14]
100007626:	lea	rsi, [rip + 0x4003] ## literal pool for: "w"
10000762d:	mov	rdi, qword ptr [rbp - 0x80]
100007631:	call	0x100006310
100007636:	mov	qword ptr [rbp - 0x78], rax
10000763a:	mov	qword ptr [rbp - 0x70], 0x0
100007642:	test	r13, r13
100007645:	je	0x10000777b
10000764b:	xor	r14d, r14d
10000764e:	test	r14, r14
100007651:	je	0x100007686
100007653:	mov	rdi, qword ptr [r12 + 8*r14]
100007657:	mov	r15, r14
10000765a:	lea	rbx, [r15 - 0x1]
10000765e:	shr	rbx
100007661:	mov	rsi, qword ptr [r12 + 8*rbx]
100007665:	call	0x1000078b6
10000766a:	test	eax, eax
10000766c:	jns	0x100007686
10000766e:	mov	rdi, qword ptr [r12 + 8*r15]
100007672:	mov	rax, qword ptr [r12 + 8*rbx]
100007676:	mov	qword ptr [r12 + 8*r15], rax
10000767a:	mov	qword ptr [r12 + 8*rbx], rdi
10000767e:	mov	r15, rbx
100007681:	test	rbx, rbx
100007684:	jne	0x10000765a
100007686:	inc	r14
100007689:	cmp	r14, r13
10000768c:	jne	0x10000764e
10000768e:	jmp	0x10000777b
100007693:	cmp	qword ptr [rbp - 0x78], 0x0
100007698:	je	0x100007704
10000769a:	test	r14, r14
10000769d:	je	0x100007704
10000769f:	mov	rsi, qword ptr [r14]
1000076a2:	mov	rax, qword ptr [rsi]
1000076a5:	mov	rdi, qword ptr [rax]
1000076a8:	test	rdi, rdi
1000076ab:	je	0x100007704
1000076ad:	lea	rax, [rip + 0x93e0]
1000076b4:	cmp	byte ptr [rax + 0xd], 0x0
1000076b8:	je	0x1000076f7
1000076ba:	cmp	qword ptr [rbp - 0x70], 0x0
1000076bf:	je	0x1000076de
1000076c1:	lea	rdi, [rbp - 0x70]
1000076c5:	call	0x10000501f
1000076ca:	test	eax, eax
1000076cc:	je	0x100007704
1000076ce:	mov	rax, qword ptr [r14]
1000076d1:	mov	rax, qword ptr [rax]
1000076d4:	mov	rdi, qword ptr [rax]
1000076d7:	lea	rax, [rip + 0x93b6]
1000076de:	movzx	edx, byte ptr [rax + 0xe]
1000076e2:	mov	rsi, qword ptr [rbp - 0x78]
1000076e6:	call	0x1000030c8
1000076eb:	mov	rax, qword ptr [r14]
1000076ee:	mov	rax, qword ptr [rax]
1000076f1:	mov	qword ptr [rbp - 0x70], rax
1000076f5:	jmp	0x100007704
1000076f7:	movzx	edx, byte ptr [rax + 0xe]
1000076fb:	mov	rsi, qword ptr [rbp - 0x78]
1000076ff:	call	0x1000030c8
100007704:	mov	rax, qword ptr [r12]
100007708:	test	rax, rax
10000770b:	je	0x100007721
10000770d:	mov	rcx, qword ptr [rax + 0x10]
100007711:	test	rcx, rcx
100007714:	je	0x100007721
100007716:	add	qword ptr [rax], 0x8
10000771a:	dec	rcx
10000771d:	mov	qword ptr [rax + 0x10], rcx
100007721:	cmp	r13, 0x2
100007725:	jb	0x10000777b
100007727:	mov	ebx, 0x1
10000772c:	xor	r15d, r15d
10000772f:	lea	r14, [rbx + 0x1]
100007733:	cmp	r14, r13
100007736:	jae	0x10000774a
100007738:	mov	rdi, qword ptr [r12 + 8*rbx]
10000773c:	mov	rsi, qword ptr [r12 + 8*rbx + 0x8]
100007741:	call	0x1000078b6
100007746:	test	eax, eax
100007748:	jg	0x10000774d
10000774a:	mov	r14, rbx
10000774d:	mov	rdi, qword ptr [r12 + 8*r15]
100007751:	mov	rsi, qword ptr [r12 + 8*r14]
100007755:	call	0x1000078b6
10000775a:	test	eax, eax
10000775c:	jle	0x10000777b
10000775e:	mov	rax, qword ptr [r12 + 8*r15]
100007762:	mov	rcx, qword ptr [r12 + 8*r14]
100007766:	mov	qword ptr [r12 + 8*r15], rcx
10000776a:	mov	qword ptr [r12 + 8*r14], rax
10000776e:	lea	rbx, [r14 + r14 + 0x1]
100007773:	mov	r15, r14
100007776:	cmp	rbx, r13
100007779:	jb	0x10000772f
10000777b:	mov	r14, qword ptr [r12]
10000777f:	cmp	qword ptr [r14 + 0x10], 0x0
100007784:	jne	0x100007693
10000778a:	mov	rdi, qword ptr [rbp - 0x78]
10000778e:	mov	rsi, qword ptr [rbp - 0x80]
100007792:	call	0x100006476
100007797:	lea	r14, [rip + 0x8ca2]
10000779e:	cmp	qword ptr [r14], 0x0
1000077a2:	je	0x1000077b7
1000077a4:	xor	ebx, ebx
1000077a6:	mov	rdi, qword ptr [r12 + 8*rbx]
1000077aa:	call	0x100007927
1000077af:	inc	rbx
1000077b2:	cmp	rbx, qword ptr [r14]
1000077b5:	jb	0x1000077a6
1000077b7:	mov	rdi, r12
1000077ba:	call	0x100007927
1000077bf:	jmp	0x1000077e8
1000077c1:	mov	qword ptr [r14], 0x1
1000077c8:	mov	rdi, qword ptr [r15]
1000077cb:	lea	rcx, [rip - 0x27b3]
1000077d2:	mov	edx, 0x8
1000077d7:	call	r13
1000077da:	mov	rdi, r15
1000077dd:	mov	rsi, r12
1000077e0:	call	0x1000061dd
1000077e5:	mov	qword ptr [r14], rbx
1000077e8:	mov	rax, qword ptr [rip + 0x4829] ## literal pool symbol address: ___stack_chk_guard
1000077ef:	mov	rax, qword ptr [rax]
1000077f2:	cmp	rax, qword ptr [rbp - 0x30]
1000077f6:	jne	0x100007807
1000077f8:	add	rsp, 0x68
1000077fc:	pop	rbx
1000077fd:	pop	r12
1000077ff:	pop	r13
100007801:	pop	r14
100007803:	pop	r15
100007805:	pop	rbp
100007806:	ret
100007807:	call	0x10000ad68 ## symbol stub for: ___stack_chk_fail
10000780c:	call	0x10000aac8
100007811:	call	0x10000aad8
100007816:	push	rbp
100007817:	mov	rbp, rsp
10000781a:	call	0x10000aef4 ## symbol stub for: _qsort
10000781f:	xor	eax, eax
100007821:	pop	rbp
100007822:	ret
100007823:	push	rbp
100007824:	mov	rbp, rsp
100007827:	push	r14
100007829:	push	rbx
10000782a:	cmp	rdi, rsi
10000782d:	je	0x100007867
10000782f:	mov	r14, rsi
100007832:	mov	rbx, rdi
100007835:	cmp	qword ptr [rdi], 0x0
100007839:	mov	rcx, qword ptr [rsi]
10000783c:	je	0x10000786b
10000783e:	test	rcx, rcx
100007841:	je	0x100007875
100007843:	lea	rdi, [rbx + 0x8]
100007847:	lea	rsi, [r14 + 0x8]
10000784b:	call	0x10000501f
100007850:	test	eax, eax
100007852:	jne	0x10000787a
100007854:	mov	rax, qword ptr [rbx + 0x10]
100007858:	xor	ecx, ecx
10000785a:	cmp	rax, qword ptr [r14 + 0x10]
10000785e:	setae	cl
100007861:	lea	eax, [rcx + rcx - 0x1]
100007865:	jmp	0x10000787a
100007867:	xor	eax, eax
100007869:	jmp	0x10000787a
10000786b:	xor	eax, eax
10000786d:	test	rcx, rcx
100007870:	setne	al
100007873:	jmp	0x10000787a
100007875:	mov	eax, 0xffffffff
10000787a:	pop	rbx
10000787b:	pop	r14
10000787d:	pop	rbp
10000787e:	ret
10000787f:	push	rbp
100007880:	mov	rbp, rsp
100007883:	push	rbx
100007884:	push	rax
100007885:	mov	rbx, rdi
100007888:	mov	rdi, qword ptr [rdi]
10000788b:	mov	rsi, qword ptr [rbx + 0x10]
10000788f:	lea	rcx, [rip - 0x2877]
100007896:	mov	edx, 0x8
10000789b:	call	qword ptr [rip + 0x9087]
1000078a1:	mov	edi, dword ptr [rip + 0x9089]
1000078a7:	call	0x10000af30 ## symbol stub for: _semaphore_signal
1000078ac:	mov	rax, rbx
1000078af:	add	rsp, 0x8
1000078b3:	pop	rbx
1000078b4:	pop	rbp
1000078b5:	ret
1000078b6:	push	rbp
1000078b7:	mov	rbp, rsp
1000078ba:	push	r14
1000078bc:	push	rbx
1000078bd:	cmp	rdi, rsi
1000078c0:	je	0x1000078fa
1000078c2:	mov	r14, rsi
1000078c5:	mov	rbx, rdi
1000078c8:	cmp	qword ptr [rdi + 0x10], 0x0
1000078cd:	mov	rcx, qword ptr [rsi + 0x10]
1000078d1:	je	0x1000078fe
1000078d3:	test	rcx, rcx
1000078d6:	je	0x100007908
1000078d8:	mov	rdi, qword ptr [rbx]
1000078db:	mov	rsi, qword ptr [r14]
1000078de:	call	0x10000501f
1000078e3:	test	eax, eax
1000078e5:	jne	0x10000790d
1000078e7:	mov	rax, qword ptr [rbx + 0x20]
1000078eb:	xor	ecx, ecx
1000078ed:	cmp	rax, qword ptr [r14 + 0x20]
1000078f1:	setae	cl
1000078f4:	lea	eax, [rcx + rcx - 0x1]
1000078f8:	jmp	0x10000790d
1000078fa:	xor	eax, eax
1000078fc:	jmp	0x10000790d
1000078fe:	xor	eax, eax
100007900:	test	rcx, rcx
100007903:	setne	al
100007906:	jmp	0x10000790d
100007908:	mov	eax, 0xffffffff
10000790d:	pop	rbx
10000790e:	pop	r14
100007910:	pop	rbp
100007911:	ret
100007912:	push	rbp
100007913:	mov	rbp, rsp
100007916:	call	0x10000ae28 ## symbol stub for: _malloc
10000791b:	test	rax, rax
10000791e:	je	0x100007922
100007920:	pop	rbp
100007921:	ret
100007922:	call	0x10000aae8
100007927:	push	rbp
100007928:	mov	rbp, rsp
10000792b:	test	rdi, rdi
10000792e:	je	0x100007936
100007930:	pop	rbp
100007931:	jmp	0x10000ade6 ## symbol stub for: _free
100007936:	pop	rbp
100007937:	ret
100007938:	push	rbp
100007939:	mov	rbp, rsp
10000793c:	call	0x10000af00 ## symbol stub for: _realloc
100007941:	test	rax, rax
100007944:	je	0x100007948
100007946:	pop	rbp
100007947:	ret
100007948:	call	0x10000aaf8
10000794d:	push	rbp
10000794e:	mov	rbp, rsp
100007951:	call	0x10000af6c ## symbol stub for: _strdup
100007956:	test	rax, rax
100007959:	je	0x10000795d
10000795b:	pop	rbp
10000795c:	ret
10000795d:	call	0x10000ab08
100007962:	push	rbp
100007963:	mov	rbp, rsp
100007966:	push	r15
100007968:	push	r14
10000796a:	push	r13
10000796c:	push	r12
10000796e:	push	rbx
10000796f:	sub	rsp, 0x68
100007973:	mov	r14, rsi
100007976:	mov	r15, rdi
100007979:	mov	rax, qword ptr [rip + 0x4698] ## literal pool symbol address: ___stack_chk_guard
100007980:	mov	rax, qword ptr [rax]
100007983:	mov	qword ptr [rbp - 0x30], rax
100007987:	lea	r12, [rip + 0x8ab2]
10000798e:	mov	rax, qword ptr [r12]
100007992:	cmp	rsi, 0x270f
100007999:	mov	qword ptr [rbp - 0x80], rax
10000799d:	ja	0x1000079a9
10000799f:	mov	qword ptr [r12], 0x1
1000079a7:	jmp	0x100007a01
1000079a9:	cmp	rax, 0x2
1000079ad:	jb	0x100007a01
1000079af:	lea	rbx, [rbp - 0x70]
1000079b3:	mov	rdi, rbx
1000079b6:	call	0x10000aee2 ## symbol stub for: _pthread_mutexattr_init
1000079bb:	lea	rdi, [rip + 0x8f76]
1000079c2:	mov	rsi, rbx
1000079c5:	call	0x10000aeca ## symbol stub for: _pthread_mutex_init
1000079ca:	lea	rdi, [rip + 0x8fa7]
1000079d1:	xor	esi, esi
1000079d3:	call	0x10000aeac ## symbol stub for: _pthread_cond_init
1000079d8:	mov	rdi, rbx
1000079db:	call	0x10000aedc ## symbol stub for: _pthread_mutexattr_destroy
1000079e0:	mov	rax, qword ptr [rip + 0x4669] ## literal pool symbol address: _mach_task_self_
1000079e7:	mov	edi, dword ptr [rax]
1000079e9:	lea	rsi, [rip + 0x9034]
1000079f0:	xor	edx, edx
1000079f2:	xor	ecx, ecx
1000079f4:	call	0x10000af24 ## symbol stub for: _semaphore_create
1000079f9:	test	eax, eax
1000079fb:	jne	0x100007eb5
100007a01:	mov	edi, 0x60
100007a06:	call	0x100007912
100007a0b:	mov	rbx, rax
100007a0e:	xor	r13d, r13d
100007a11:	mov	qword ptr [rax], r13
100007a14:	mov	qword ptr [rax + 0x8], r13
100007a18:	mov	qword ptr [rax + 0x10], r13
100007a1c:	mov	qword ptr [rax + 0x20], r13
100007a20:	mov	qword ptr [rax + 0x28], r13
100007a24:	mov	qword ptr [rax + 0x30], r13
100007a28:	mov	qword ptr [rax + 0x38], r13
100007a2c:	mov	qword ptr [rax + 0x40], r13
100007a30:	mov	qword ptr [rax + 0x48], r13
100007a34:	mov	qword ptr [rax + 0x18], r15
100007a38:	mov	qword ptr [rax + 0x50], r14
100007a3c:	mov	qword ptr [rax + 0x58], r14
100007a40:	mov	qword ptr [rip + 0x8f61], r14
100007a47:	lea	r14, [rip + 0x9046]
100007a4e:	lea	rax, [rip + 0x8fbb]
100007a55:	mov	rax, qword ptr [rax]
100007a58:	add	rax, 0xf
100007a5c:	lea	rcx, [rip + 0x46c5]
100007a63:	mov	rcx, qword ptr [rcx]
100007a66:	add	rcx, 0xf
100007a6a:	cmp	byte ptr [r14 + 0xa], 0x0
100007a6f:	cmovne	rcx, rax
100007a73:	mov	al, byte ptr [rcx]
100007a75:	mov	byte ptr [rip + 0x8f35], al
100007a7b:	movaps	xmm0, xmmword ptr [rip + 0x3a8e]
100007a82:	movups	xmmword ptr [rbx + 0x40], xmm0
100007a86:	mov	edi, 0x800
100007a8b:	call	0x100007912
100007a90:	mov	qword ptr [rbx], rax
100007a93:	mov	esi, 0x800
100007a98:	mov	rdi, rax
100007a9b:	call	0x10000ad50 ## symbol stub for: ___bzero
100007aa0:	mov	rdx, rbx
100007aa3:	cmp	qword ptr [rbx + 0x50], r13
100007aa7:	mov	qword ptr [rbp - 0x78], rbx
100007aab:	je	0x100007ac8
100007aad:	xor	ebx, ebx
100007aaf:	mov	rdi, qword ptr [rbp - 0x78]
100007ab3:	mov	rsi, rbx
100007ab6:	call	0x100007f36
100007abb:	mov	rdx, qword ptr [rbp - 0x78]
100007abf:	inc	rbx
100007ac2:	cmp	rbx, qword ptr [rdx + 0x50]
100007ac6:	jb	0x100007aaf
100007ac8:	mov	rsi, qword ptr [rdx + 0x20]
100007acc:	cmp	rsi, 0x1
100007ad0:	jbe	0x100007b1b
100007ad2:	lea	rax, [rip + 0x8f27]
100007ad9:	cmp	qword ptr [rax], 0x2
100007add:	jb	0x100007af0
100007adf:	mov	rax, qword ptr [rbp - 0x78]
100007ae3:	mov	rdi, qword ptr [rax + 0x8]
100007ae7:	lea	rcx, [rip - 0x2acf]
100007aee:	jmp	0x100007b0d
100007af0:	cmp	byte ptr [r14 + 0xc], 0x0
100007af5:	jne	0x100007b1b
100007af7:	cmp	byte ptr [r14 + 0x10], 0x0
100007afc:	je	0x100007b1b
100007afe:	mov	rax, qword ptr [rbp - 0x78]
100007b02:	mov	rdi, qword ptr [rax + 0x8]
100007b06:	lea	rcx, [rip - 0x2997]
100007b0d:	mov	edx, 0x8
100007b12:	call	0x10000ae5e ## symbol stub for: _mergesort
100007b17:	mov	rdx, qword ptr [rbp - 0x78]
100007b1b:	cmp	byte ptr [rip + 0x8e8e], 0x0
100007b22:	je	0x100007c6c
100007b28:	mov	rax, qword ptr [rdx + 0x48]
100007b2c:	test	rax, rax
100007b2f:	je	0x100007c08
100007b35:	mov	r15, -0x1
100007b3c:	xor	r14d, r14d
100007b3f:	lea	r13, [rax + r15]
100007b43:	mov	rcx, qword ptr [rdx]
100007b46:	mov	r12, qword ptr [rcx + 8*r13]
100007b4a:	test	r12, r12
100007b4d:	je	0x100007bf9
100007b53:	mov	rax, qword ptr [rdx + 0x18]
100007b57:	mov	qword ptr [r12 + 0x10], rax
100007b5c:	mov	rax, qword ptr [rdx + 0x40]
100007b60:	mov	qword ptr [r12 + 0x40], rax
100007b65:	mov	rax, qword ptr [r12 + 0x50]
100007b6a:	add	qword ptr [rdx + 0x40], rax
100007b6e:	mov	edi, 0x10
100007b73:	call	0x100007912
100007b78:	mov	rbx, rax
100007b7b:	mov	qword ptr [rax + 0x8], r12
100007b7f:	lea	r12, [rip + 0x88ba]
100007b86:	cmp	qword ptr [r12], 0x1
100007b8b:	jbe	0x100007bd5
100007b8d:	lea	rdi, [rip + 0x8da4]
100007b94:	call	0x10000aed0 ## symbol stub for: _pthread_mutex_lock
100007b99:	mov	rax, qword ptr [r12]
100007b9d:	mov	rcx, qword ptr [rip + 0x8e14]
100007ba4:	mov	qword ptr [rbx], rcx
100007ba7:	mov	qword ptr [rip + 0x8e0a], rbx
100007bae:	cmp	rax, 0x2
100007bb2:	jb	0x100007be6
100007bb4:	lea	rdi, [rip + 0x8dbd]
100007bbb:	call	0x10000aeb2 ## symbol stub for: _pthread_cond_signal
100007bc0:	cmp	qword ptr [r12], 0x2
100007bc5:	jb	0x100007be6
100007bc7:	lea	rdi, [rip + 0x8d6a]
100007bce:	call	0x10000aed6 ## symbol stub for: _pthread_mutex_unlock
100007bd3:	jmp	0x100007be6
100007bd5:	mov	rax, qword ptr [rip + 0x8ddc]
100007bdc:	mov	qword ptr [rbx], rax
100007bdf:	mov	qword ptr [rip + 0x8dd2], rbx
100007be6:	mov	rdx, qword ptr [rbp - 0x78]
100007bea:	mov	rax, qword ptr [rdx]
100007bed:	mov	qword ptr [rax + 8*r13], 0x0
100007bf5:	mov	rax, qword ptr [rdx + 0x48]
100007bf9:	inc	r14
100007bfc:	dec	r15
100007bff:	cmp	rax, r14
100007c02:	ja	0x100007b3f
100007c08:	mov	rbx, rdx
100007c0b:	mov	rdi, qword ptr [rdx + 0x40]
100007c0f:	shl	rdi, 0x3
100007c13:	add	rdi, qword ptr [rdx + 0x18]
100007c17:	mov	rsi, qword ptr [rdx + 0x8]
100007c1b:	mov	rdx, qword ptr [rdx + 0x20]
100007c1f:	shl	rdx, 0x3
100007c23:	call	0x10000ae52 ## symbol stub for: _memcpy
100007c28:	mov	rbx, qword ptr [rbx + 0x20]
100007c2c:	lea	rdi, [rip + 0x8d05]
100007c33:	call	0x10000aed0 ## symbol stub for: _pthread_mutex_lock
100007c38:	sub	qword ptr [rip + 0x8d69], rbx
100007c3f:	lea	r12, [rip + 0x87fa]
100007c46:	jne	0x100007c5b
100007c48:	cmp	qword ptr [r12], 0x2
100007c4d:	jb	0x100007c5b
100007c4f:	lea	rdi, [rip + 0x8d22]
100007c56:	call	0x10000aea6 ## symbol stub for: _pthread_cond_broadcast
100007c5b:	lea	rdi, [rip + 0x8cd6]
100007c62:	call	0x10000aed6 ## symbol stub for: _pthread_mutex_unlock
100007c67:	jmp	0x100007d95
100007c6c:	mov	rbx, rdx
100007c6f:	mov	rdi, qword ptr [rdx + 0x40]
100007c73:	shl	rdi, 0x3
100007c77:	add	rdi, qword ptr [rdx + 0x18]
100007c7b:	mov	rsi, qword ptr [rdx + 0x8]
100007c7f:	mov	rdx, qword ptr [rdx + 0x20]
100007c83:	shl	rdx, 0x3
100007c87:	call	0x10000ae52 ## symbol stub for: _memcpy
100007c8c:	mov	r14, qword ptr [rbx + 0x20]
100007c90:	add	qword ptr [rbx + 0x40], r14
100007c94:	lea	rdi, [rip + 0x8c9d]
100007c9b:	call	0x10000aed0 ## symbol stub for: _pthread_mutex_lock
100007ca0:	sub	qword ptr [rip + 0x8d01], r14
100007ca7:	jne	0x100007cbc
100007ca9:	cmp	qword ptr [r12], 0x2
100007cae:	jb	0x100007cbc
100007cb0:	lea	rdi, [rip + 0x8cc1]
100007cb7:	call	0x10000aea6 ## symbol stub for: _pthread_cond_broadcast
100007cbc:	lea	rdi, [rip + 0x8c75]
100007cc3:	call	0x10000aed6 ## symbol stub for: _pthread_mutex_unlock
100007cc8:	mov	rdx, qword ptr [rbp - 0x78]
100007ccc:	mov	rax, qword ptr [rdx + 0x48]
100007cd0:	test	rax, rax
100007cd3:	je	0x100007d95
100007cd9:	xor	r15d, r15d
100007cdc:	lea	r14, [rip + 0x8c55]
100007ce3:	mov	rcx, qword ptr [rdx]
100007ce6:	mov	rbx, qword ptr [rcx + 8*r15]
100007cea:	test	rbx, rbx
100007ced:	je	0x100007d89
100007cf3:	mov	rax, qword ptr [rdx + 0x18]
100007cf7:	mov	qword ptr [rbx + 0x10], rax
100007cfb:	mov	rax, qword ptr [rdx + 0x40]
100007cff:	mov	qword ptr [rbx + 0x40], rax
100007d03:	mov	rax, qword ptr [rbx + 0x50]
100007d07:	add	qword ptr [rdx + 0x40], rax
100007d0b:	mov	edi, 0x10
100007d10:	call	0x100007912
100007d15:	mov	r13, rax
100007d18:	mov	qword ptr [rax + 0x8], rbx
100007d1c:	cmp	qword ptr [r12], 0x1
100007d21:	jbe	0x100007d64
100007d23:	mov	rdi, r14
100007d26:	call	0x10000aed0 ## symbol stub for: _pthread_mutex_lock
100007d2b:	mov	rax, qword ptr [r12]
100007d2f:	mov	rcx, qword ptr [rip + 0x8c82]
100007d36:	mov	qword ptr [r13], rcx
100007d3a:	mov	qword ptr [rip + 0x8c77], r13
100007d41:	cmp	rax, 0x2
100007d45:	jb	0x100007d76
100007d47:	lea	rdi, [rip + 0x8c2a]
100007d4e:	call	0x10000aeb2 ## symbol stub for: _pthread_cond_signal
100007d53:	cmp	qword ptr [r12], 0x2
100007d58:	jb	0x100007d76
100007d5a:	mov	rdi, r14
100007d5d:	call	0x10000aed6 ## symbol stub for: _pthread_mutex_unlock
100007d62:	jmp	0x100007d76
100007d64:	mov	rax, qword ptr [rip + 0x8c4d]
100007d6b:	mov	qword ptr [r13], rax
100007d6f:	mov	qword ptr [rip + 0x8c42], r13
100007d76:	mov	rdx, qword ptr [rbp - 0x78]
100007d7a:	mov	rax, qword ptr [rdx]
100007d7d:	mov	qword ptr [rax + 8*r15], 0x0
100007d85:	mov	rax, qword ptr [rdx + 0x48]
100007d89:	inc	r15
100007d8c:	cmp	r15, rax
100007d8f:	jb	0x100007ce3
100007d95:	cmp	qword ptr [r12], 0x2
100007d9a:	jae	0x100007dd2
100007d9c:	mov	rdi, qword ptr [rip + 0x8c15]
100007da3:	test	rdi, rdi
100007da6:	je	0x100007e54
100007dac:	mov	rax, qword ptr [rdi]
100007daf:	mov	rbx, qword ptr [rdi + 0x8]
100007db3:	mov	qword ptr [rip + 0x8bfe], rax
100007dba:	call	0x100007927
100007dbf:	test	rbx, rbx
100007dc2:	je	0x100007e54
100007dc8:	mov	rdi, rbx
100007dcb:	call	0x100008108
100007dd0:	jmp	0x100007d9c
100007dd2:	xor	r13d, r13d
100007dd5:	lea	rbx, [rbp - 0x70]
100007dd9:	lea	r14, [rip + 0x28d]
100007de0:	lea	r15, [rbp - 0x88]
100007de7:	mov	rdi, rbx
100007dea:	call	0x10000ae9a ## symbol stub for: _pthread_attr_init
100007def:	mov	rdi, rbx
100007df2:	mov	esi, 0x2
100007df7:	call	0x10000aea0 ## symbol stub for: _pthread_attr_setdetachstate
100007dfc:	mov	rdi, r15
100007dff:	mov	rsi, rbx
100007e02:	mov	rdx, r14
100007e05:	xor	ecx, ecx
100007e07:	call	0x10000aebe ## symbol stub for: _pthread_create
100007e0c:	test	eax, eax
100007e0e:	jns	0x100007e25
100007e10:	call	0x10000ad56 ## symbol stub for: ___error
100007e15:	cmp	dword ptr [rax], 0x23
100007e18:	jne	0x100007eb0
100007e1e:	call	0x10000af1e ## symbol stub for: _sched_yield
100007e23:	jmp	0x100007dfc
100007e25:	mov	rdi, rbx
100007e28:	call	0x10000ae94 ## symbol stub for: _pthread_attr_destroy
100007e2d:	inc	r13
100007e30:	mov	rax, qword ptr [r12]
100007e34:	cmp	r13, rax
100007e37:	jb	0x100007de7
100007e39:	test	rax, rax
100007e3c:	je	0x100007e54
100007e3e:	xor	ebx, ebx
100007e40:	mov	edi, dword ptr [rip + 0x8bde]
100007e46:	call	0x10000af36 ## symbol stub for: _semaphore_wait
100007e4b:	inc	rbx
100007e4e:	cmp	rbx, qword ptr [r12]
100007e52:	jb	0x100007e40
100007e54:	mov	rdi, qword ptr [rbp - 0x78]
100007e58:	call	0x100007eba
100007e5d:	cmp	qword ptr [r12], 0x2
100007e62:	jb	0x100007e84
100007e64:	mov	rax, qword ptr [rip + 0x41e5] ## literal pool symbol address: _mach_task_self_
100007e6b:	mov	edi, dword ptr [rax]
100007e6d:	mov	esi, dword ptr [rip + 0x8bb1]
100007e73:	call	0x10000af2a ## symbol stub for: _semaphore_destroy
100007e78:	lea	rdi, [rip + 0x8ab9]
100007e7f:	call	0x10000aec4 ## symbol stub for: _pthread_mutex_destroy
100007e84:	mov	rax, qword ptr [rbp - 0x80]
100007e88:	mov	qword ptr [r12], rax
100007e8c:	mov	rax, qword ptr [rip + 0x4185] ## literal pool symbol address: ___stack_chk_guard
100007e93:	mov	rax, qword ptr [rax]
100007e96:	cmp	rax, qword ptr [rbp - 0x30]
100007e9a:	jne	0x100007eab
100007e9c:	add	rsp, 0x68
100007ea0:	pop	rbx
100007ea1:	pop	r12
100007ea3:	pop	r13
100007ea5:	pop	r14
100007ea7:	pop	r15
100007ea9:	pop	rbp
100007eaa:	ret
100007eab:	call	0x10000ad68 ## symbol stub for: ___stack_chk_fail
100007eb0:	call	0x10000ab18
100007eb5:	call	0x10000ab28
100007eba:	test	rdi, rdi
100007ebd:	je	0x100007f1b
100007ebf:	push	rbp
100007ec0:	mov	rbp, rsp
100007ec3:	push	r15
100007ec5:	push	r14
100007ec7:	push	rbx
100007ec8:	push	rax
100007ec9:	mov	r14, rdi
100007ecc:	mov	rdi, qword ptr [rdi + 0x8]
100007ed0:	test	rdi, rdi
100007ed3:	je	0x100007eda
100007ed5:	call	0x100007927
100007eda:	cmp	qword ptr [r14 + 0x30], 0x0
100007edf:	je	0x100007eea
100007ee1:	mov	rdi, qword ptr [r14 + 0x18]
100007ee5:	call	0x100007927
100007eea:	mov	rdi, qword ptr [r14]
100007eed:	test	rdi, rdi
100007ef0:	je	0x100007f24
100007ef2:	mov	r15, qword ptr [r14 + 0x48]
100007ef6:	test	r15, r15
100007ef9:	je	0x100007f1f
100007efb:	dec	r15
100007efe:	xor	ebx, ebx
100007f00:	mov	rdi, qword ptr [rdi + 8*rbx]
100007f04:	test	rdi, rdi
100007f07:	je	0x100007f0e
100007f09:	call	0x100007eba
100007f0e:	cmp	r15, rbx
100007f11:	je	0x100007f1c
100007f13:	inc	rbx
100007f16:	mov	rdi, qword ptr [r14]
100007f19:	jmp	0x100007f00
100007f1b:	ret
100007f1c:	mov	rdi, qword ptr [r14]
100007f1f:	call	0x100007927
100007f24:	mov	rdi, r14
100007f27:	add	rsp, 0x8
100007f2b:	pop	rbx
100007f2c:	pop	r14
100007f2e:	pop	r15
100007f30:	pop	rbp
100007f31:	jmp	0x100007927
100007f36:	push	rbp
100007f37:	mov	rbp, rsp
100007f3a:	push	r15
100007f3c:	push	r14
100007f3e:	push	r12
100007f40:	push	rbx
100007f41:	mov	r14, rdi
100007f44:	mov	rax, qword ptr [rdi + 0x18]
100007f48:	mov	rbx, qword ptr [rdi + 0x30]
100007f4c:	mov	r15, qword ptr [rax + 8*rsi]
100007f50:	lea	rdi, [r15 + 0x8]
100007f54:	xor	esi, esi
100007f56:	call	0x10000406d
100007f5b:	mov	rax, qword ptr [rax]
100007f5e:	cmp	qword ptr [rax], rbx
100007f61:	jbe	0x100007f76
100007f63:	mov	rcx, qword ptr [rip + 0x40a6] ## literal pool symbol address: ___mb_cur_max
100007f6a:	cmp	dword ptr [rcx], 0x1
100007f6d:	jne	0x100007fb5
100007f6f:	movzx	eax, byte ptr [rax + rbx + 0x8]
100007f74:	jmp	0x100007fba
100007f76:	mov	rax, qword ptr [r14 + 0x20]
100007f7a:	lea	rcx, [rax + 0x1]
100007f7e:	mov	qword ptr [r14 + 0x20], rcx
100007f82:	cmp	rcx, qword ptr [r14 + 0x28]
100007f86:	jbe	0x100008055
100007f8c:	lea	rcx, [rax + 0x81]
100007f93:	mov	qword ptr [r14 + 0x28], rcx
100007f97:	mov	rdi, qword ptr [r14 + 0x8]
100007f9b:	lea	rsi, [8*rax + 0x408]
100007fa3:	call	0x100007938
100007fa8:	mov	qword ptr [r14 + 0x8], rax
100007fac:	mov	rcx, qword ptr [r14 + 0x20]
100007fb0:	jmp	0x10000805f
100007fb5:	movzx	eax, byte ptr [rax + 4*rbx + 0x8]
100007fba:	mov	r12d, eax
100007fbd:	mov	rax, qword ptr [r14]
100007fc0:	mov	rbx, qword ptr [rax + 8*r12]
100007fc4:	test	rbx, rbx
100007fc7:	jne	0x10000801d
100007fc9:	mov	edi, 0x60
100007fce:	call	0x100007912
100007fd3:	mov	rbx, rax
100007fd6:	xor	eax, eax
100007fd8:	mov	qword ptr [rbx], rax
100007fdb:	mov	qword ptr [rbx + 0x8], rax
100007fdf:	mov	qword ptr [rbx + 0x10], rax
100007fe3:	mov	qword ptr [rbx + 0x18], rax
100007fe7:	mov	qword ptr [rbx + 0x20], rax
100007feb:	mov	qword ptr [rbx + 0x28], rax
100007fef:	mov	qword ptr [rbx + 0x30], rax
100007ff3:	mov	qword ptr [rbx + 0x38], rax
100007ff7:	mov	qword ptr [rbx + 0x40], rax
100007ffb:	mov	qword ptr [rbx + 0x48], rax
100007fff:	mov	qword ptr [rbx + 0x50], rax
100008003:	mov	qword ptr [rbx + 0x58], rax
100008007:	mov	rax, qword ptr [r14 + 0x30]
10000800b:	inc	rax
10000800e:	mov	qword ptr [rbx + 0x30], rax
100008012:	mov	rax, qword ptr [r14]
100008015:	mov	qword ptr [rax + 8*r12], rbx
100008019:	inc	qword ptr [r14 + 0x38]
10000801d:	mov	rax, qword ptr [rbx + 0x50]
100008021:	lea	rcx, [rax + 0x1]
100008025:	mov	qword ptr [rbx + 0x50], rcx
100008029:	cmp	rcx, qword ptr [rbx + 0x58]
10000802d:	jbe	0x10000805b
10000802f:	lea	rcx, [rax + 0x81]
100008036:	mov	qword ptr [rbx + 0x58], rcx
10000803a:	mov	rdi, qword ptr [rbx + 0x18]
10000803e:	lea	rsi, [8*rax + 0x408]
100008046:	call	0x100007938
10000804b:	mov	qword ptr [rbx + 0x18], rax
10000804f:	mov	rcx, qword ptr [rbx + 0x50]
100008053:	jmp	0x10000805f
100008055:	mov	rax, qword ptr [r14 + 0x8]
100008059:	jmp	0x10000805f
10000805b:	mov	rax, qword ptr [rbx + 0x18]
10000805f:	mov	qword ptr [rax + 8*rcx - 0x8], r15
100008064:	pop	rbx
100008065:	pop	r12
100008067:	pop	r14
100008069:	pop	r15
10000806b:	pop	rbp
10000806c:	ret
10000806d:	push	rbp
10000806e:	mov	rbp, rsp
100008071:	push	r15
100008073:	push	r14
100008075:	push	r13
100008077:	push	r12
100008079:	push	rbx
10000807a:	push	rax
10000807b:	mov	r14, rdi
10000807e:	lea	r12, [rip + 0x88b3]
100008085:	lea	r15, [rip + 0x88ec]
10000808c:	mov	rdi, r12
10000808f:	call	0x10000aed0 ## symbol stub for: _pthread_mutex_lock
100008094:	mov	rbx, qword ptr [rip + 0x891d]
10000809b:	test	rbx, rbx
10000809e:	jne	0x1000080b7
1000080a0:	cmp	qword ptr [rip + 0x8900], 0x0
1000080a8:	je	0x1000080e4
1000080aa:	mov	rdi, r15
1000080ad:	mov	rsi, r12
1000080b0:	call	0x10000aeb8 ## symbol stub for: _pthread_cond_wait
1000080b5:	jmp	0x100008094
1000080b7:	mov	rax, qword ptr [rbx]
1000080ba:	mov	r13, qword ptr [rbx + 0x8]
1000080be:	mov	qword ptr [rip + 0x88f3], rax
1000080c5:	mov	rdi, r12
1000080c8:	call	0x10000aed6 ## symbol stub for: _pthread_mutex_unlock
1000080cd:	mov	rdi, rbx
1000080d0:	call	0x100007927
1000080d5:	test	r13, r13
1000080d8:	je	0x1000080eb
1000080da:	mov	rdi, r13
1000080dd:	call	0x100008108
1000080e2:	jmp	0x10000808c
1000080e4:	xor	ebx, ebx
1000080e6:	xor	r13d, r13d
1000080e9:	jmp	0x1000080c5
1000080eb:	mov	edi, dword ptr [rip + 0x8933]
1000080f1:	call	0x10000af30 ## symbol stub for: _semaphore_signal
1000080f6:	mov	rax, r14
1000080f9:	add	rsp, 0x8
1000080fd:	pop	rbx
1000080fe:	pop	r12
100008100:	pop	r13
100008102:	pop	r14
100008104:	pop	r15
100008106:	pop	rbp
100008107:	ret
100008108:	push	rbp
100008109:	mov	rbp, rsp
10000810c:	push	r15
10000810e:	push	r14
100008110:	push	r13
100008112:	push	r12
100008114:	push	rbx
100008115:	push	rax
100008116:	mov	r12, rdi
100008119:	mov	rdi, qword ptr [rdi]
10000811c:	test	rdi, rdi
10000811f:	je	0x10000812e
100008121:	call	0x100007927
100008126:	mov	qword ptr [r12], 0x0
10000812e:	mov	rsi, qword ptr [r12 + 0x50]
100008133:	test	rsi, rsi
100008136:	je	0x100008507
10000813c:	cmp	rsi, 0x2
100008140:	je	0x10000817c
100008142:	cmp	rsi, 0x1
100008146:	jne	0x1000081c6
100008148:	mov	rax, qword ptr [r12 + 0x10]
10000814d:	mov	rcx, qword ptr [r12 + 0x18]
100008152:	mov	rcx, qword ptr [rcx]
100008155:	mov	rdx, qword ptr [r12 + 0x40]
10000815a:	mov	qword ptr [rax + 8*rdx], rcx
10000815e:	lea	rdi, [rip + 0x87d3]
100008165:	call	0x10000aed0 ## symbol stub for: _pthread_mutex_lock
10000816a:	dec	qword ptr [rip + 0x8837]
100008171:	je	0x1000084e2
100008177:	jmp	0x1000084fb
10000817c:	mov	rdi, qword ptr [r12 + 0x18]
100008181:	mov	rdx, qword ptr [r12 + 0x30]
100008186:	lea	rsi, [rdi + 0x8]
10000818a:	call	0x100004f05
10000818f:	mov	rcx, qword ptr [r12 + 0x18]
100008194:	test	eax, eax
100008196:	jle	0x100008328
10000819c:	mov	rdx, qword ptr [rcx + 0x8]
1000081a0:	lea	rax, [r12 + 0x10]
1000081a5:	mov	rsi, qword ptr [r12 + 0x10]
1000081aa:	mov	rdi, qword ptr [r12 + 0x40]
1000081af:	lea	rcx, [rdi + 0x1]
1000081b3:	mov	qword ptr [r12 + 0x40], rcx
1000081b8:	mov	qword ptr [rsi + 8*rdi], rdx
1000081bc:	mov	rdx, qword ptr [r12 + 0x18]
1000081c1:	jmp	0x100008350
1000081c6:	mov	rdi, qword ptr [r12 + 0x30]
1000081cb:	cmp	rsi, 0x41
1000081cf:	jb	0x100008291
1000081d5:	cmp	rdi, 0x10
1000081d9:	jae	0x100008291
1000081df:	lea	r14, [r12 + 0x50]
1000081e4:	mov	qword ptr [r12 + 0x58], rsi
1000081e9:	mov	rdi, qword ptr [r12 + 0x18]
1000081ee:	shl	rsi, 0x3
1000081f2:	call	0x100007938
1000081f7:	mov	qword ptr [r12 + 0x18], rax
1000081fc:	mov	qword ptr [r12 + 0x48], 0x100
100008205:	mov	edi, 0x800
10000820a:	call	0x100007912
10000820f:	mov	qword ptr [r12], rax
100008213:	mov	esi, 0x800
100008218:	mov	rdi, rax
10000821b:	call	0x10000ad50 ## symbol stub for: ___bzero
100008220:	mov	qword ptr [r12 + 0x38], 0x0
100008229:	mov	r15, qword ptr [r12 + 0x50]
10000822e:	test	r15, r15
100008231:	je	0x100008248
100008233:	xor	ebx, ebx
100008235:	mov	rdi, r12
100008238:	mov	rsi, rbx
10000823b:	call	0x100007f36
100008240:	inc	rbx
100008243:	cmp	r15, rbx
100008246:	jne	0x100008235
100008248:	mov	rdi, qword ptr [r12 + 0x18]
10000824d:	call	0x100007927
100008252:	xor	eax, eax
100008254:	mov	qword ptr [r12 + 0x18], rax
100008259:	mov	qword ptr [r14 + 0x8], rax
10000825d:	mov	qword ptr [r14], rax
100008260:	mov	rsi, qword ptr [r12 + 0x20]
100008265:	cmp	rsi, 0x2
100008269:	jb	0x1000083a2
10000826f:	lea	rax, [rip + 0x878a]
100008276:	cmp	qword ptr [rax], 0x2
10000827a:	jb	0x100008379
100008280:	mov	rdi, qword ptr [r12 + 0x8]
100008285:	lea	rcx, [rip - 0x326d]
10000828c:	jmp	0x100008398
100008291:	call	0x10000502b
100008296:	mov	r14, rax
100008299:	mov	rdi, qword ptr [r12 + 0x18]
10000829e:	mov	rsi, qword ptr [r12 + 0x50]
1000082a3:	mov	qword ptr [r12 + 0x8], rdi
1000082a8:	mov	qword ptr [r12 + 0x20], rsi
1000082ad:	mov	qword ptr [r12 + 0x28], rsi
1000082b2:	shl	rsi, 0x3
1000082b6:	call	0x100007938
1000082bb:	mov	qword ptr [r12 + 0x8], rax
1000082c0:	xor	ecx, ecx
1000082c2:	mov	qword ptr [r12 + 0x18], rcx
1000082c7:	mov	qword ptr [r12 + 0x38], rcx
1000082cc:	mov	qword ptr [r12 + 0x48], rcx
1000082d1:	mov	qword ptr [r12 + 0x50], rcx
1000082d6:	mov	qword ptr [r12 + 0x58], rcx
1000082db:	lea	rcx, [rip + 0x87b2]
1000082e2:	mov	bl, byte ptr [rcx + 0xc]
1000082e5:	mov	rsi, qword ptr [r12 + 0x20]
1000082ea:	mov	edx, 0x8
1000082ef:	mov	rdi, rax
1000082f2:	mov	rcx, r14
1000082f5:	call	0x10000ae5e ## symbol stub for: _mergesort
1000082fa:	test	bl, bl
1000082fc:	je	0x100008307
1000082fe:	cmp	eax, -0x1
100008301:	je	0x100008685
100008307:	mov	rdi, qword ptr [r12 + 0x40]
10000830c:	shl	rdi, 0x3
100008310:	add	rdi, qword ptr [r12 + 0x10]
100008315:	mov	rsi, qword ptr [r12 + 0x8]
10000831a:	mov	rdx, qword ptr [r12 + 0x20]
10000831f:	shl	rdx, 0x3
100008323:	jmp	0x1000084c3
100008328:	mov	rdx, qword ptr [rcx]
10000832b:	lea	rax, [r12 + 0x10]
100008330:	mov	rsi, qword ptr [r12 + 0x10]
100008335:	mov	rdi, qword ptr [r12 + 0x40]
10000833a:	lea	rcx, [rdi + 0x1]
10000833e:	mov	qword ptr [r12 + 0x40], rcx
100008343:	mov	qword ptr [rsi + 8*rdi], rdx
100008347:	mov	rdx, qword ptr [r12 + 0x18]
10000834c:	add	rdx, 0x8
100008350:	mov	rdx, qword ptr [rdx]
100008353:	mov	rax, qword ptr [rax]
100008356:	mov	qword ptr [rax + 8*rcx], rdx
10000835a:	lea	rdi, [rip + 0x85d7]
100008361:	call	0x10000aed0 ## symbol stub for: _pthread_mutex_lock
100008366:	add	qword ptr [rip + 0x863a], -0x2
10000836e:	je	0x1000084e2
100008374:	jmp	0x1000084fb
100008379:	lea	rax, [rip + 0x8714]
100008380:	cmp	byte ptr [rax + 0xc], 0x0
100008384:	jne	0x1000083a2
100008386:	cmp	byte ptr [rax + 0x10], 0x0
10000838a:	je	0x1000083a2
10000838c:	mov	rdi, qword ptr [r12 + 0x8]
100008391:	lea	rcx, [rip - 0x3222]
100008398:	mov	edx, 0x8
10000839d:	call	0x10000ae5e ## symbol stub for: _mergesort
1000083a2:	mov	rdi, qword ptr [r12 + 0x8]
1000083a7:	mov	rsi, qword ptr [r12 + 0x20]
1000083ac:	mov	qword ptr [r12 + 0x28], rsi
1000083b1:	shl	rsi, 0x3
1000083b5:	call	0x100007938
1000083ba:	mov	qword ptr [r12 + 0x8], rax
1000083bf:	cmp	byte ptr [rip + 0x85ea], 0x0
1000083c6:	je	0x10000851d
1000083cc:	mov	r15, qword ptr [r12 + 0x48]
1000083d1:	test	r15, r15
1000083d4:	je	0x1000084a9
1000083da:	lea	r14, [rip + 0x805f]
1000083e1:	mov	rax, qword ptr [r12]
1000083e5:	mov	rbx, qword ptr [rax + 8*r15 - 0x8]
1000083ea:	test	rbx, rbx
1000083ed:	je	0x10000849b
1000083f3:	mov	rax, qword ptr [r12 + 0x10]
1000083f8:	mov	qword ptr [rbx + 0x10], rax
1000083fc:	mov	rax, qword ptr [r12 + 0x40]
100008401:	mov	qword ptr [rbx + 0x40], rax
100008405:	mov	rax, qword ptr [rbx + 0x50]
100008409:	add	qword ptr [r12 + 0x40], rax
10000840e:	cmp	rax, 0x4
100008412:	ja	0x10000841e
100008414:	mov	rdi, rbx
100008417:	call	0x100008108
10000841c:	jmp	0x10000848e
10000841e:	mov	edi, 0x10
100008423:	call	0x100007912
100008428:	mov	r13, rax
10000842b:	mov	qword ptr [rax + 0x8], rbx
10000842f:	cmp	qword ptr [r14], 0x1
100008433:	jbe	0x10000847c
100008435:	lea	rdi, [rip + 0x84fc]
10000843c:	call	0x10000aed0 ## symbol stub for: _pthread_mutex_lock
100008441:	mov	rax, qword ptr [r14]
100008444:	mov	rcx, qword ptr [rip + 0x856d]
10000844b:	mov	qword ptr [r13], rcx
10000844f:	mov	qword ptr [rip + 0x8562], r13
100008456:	cmp	rax, 0x2
10000845a:	jb	0x10000848e
10000845c:	lea	rdi, [rip + 0x8515]
100008463:	call	0x10000aeb2 ## symbol stub for: _pthread_cond_signal
100008468:	cmp	qword ptr [r14], 0x2
10000846c:	jb	0x10000848e
10000846e:	lea	rdi, [rip + 0x84c3]
100008475:	call	0x10000aed6 ## symbol stub for: _pthread_mutex_unlock
10000847a:	jmp	0x10000848e
10000847c:	mov	rax, qword ptr [rip + 0x8535]
100008483:	mov	qword ptr [r13], rax
100008487:	mov	qword ptr [rip + 0x852a], r13
10000848e:	mov	rax, qword ptr [r12]
100008492:	mov	qword ptr [rax + 8*r15 - 0x8], 0x0
10000849b:	dec	r15
10000849e:	jne	0x1000083e1
1000084a4:	mov	rax, qword ptr [r12 + 0x8]
1000084a9:	mov	rdx, qword ptr [r12 + 0x20]
1000084ae:	mov	rdi, qword ptr [r12 + 0x40]
1000084b3:	shl	rdi, 0x3
1000084b7:	add	rdi, qword ptr [r12 + 0x10]
1000084bc:	shl	rdx, 0x3
1000084c0:	mov	rsi, rax
1000084c3:	call	0x10000ae52 ## symbol stub for: _memcpy
1000084c8:	mov	rbx, qword ptr [r12 + 0x20]
1000084cd:	lea	rdi, [rip + 0x8464]
1000084d4:	call	0x10000aed0 ## symbol stub for: _pthread_mutex_lock
1000084d9:	sub	qword ptr [rip + 0x84c8], rbx
1000084e0:	jne	0x1000084fb
1000084e2:	lea	rax, [rip + 0x7f57]
1000084e9:	cmp	qword ptr [rax], 0x2
1000084ed:	jb	0x1000084fb
1000084ef:	lea	rdi, [rip + 0x8482]
1000084f6:	call	0x10000aea6 ## symbol stub for: _pthread_cond_broadcast
1000084fb:	lea	rdi, [rip + 0x8436]
100008502:	call	0x10000aed6 ## symbol stub for: _pthread_mutex_unlock
100008507:	mov	rdi, r12
10000850a:	add	rsp, 0x8
10000850e:	pop	rbx
10000850f:	pop	r12
100008511:	pop	r13
100008513:	pop	r14
100008515:	pop	r15
100008517:	pop	rbp
100008518:	jmp	0x100007eba
10000851d:	lea	r14, [r12 + 0x20]
100008522:	mov	rdx, qword ptr [r12 + 0x20]
100008527:	mov	rdi, qword ptr [r12 + 0x40]
10000852c:	shl	rdi, 0x3
100008530:	add	rdi, qword ptr [r12 + 0x10]
100008535:	shl	rdx, 0x3
100008539:	mov	rsi, rax
10000853c:	call	0x10000ae52 ## symbol stub for: _memcpy
100008541:	mov	rbx, qword ptr [r12 + 0x20]
100008546:	add	qword ptr [r12 + 0x40], rbx
10000854b:	lea	rdi, [rip + 0x83e6]
100008552:	call	0x10000aed0 ## symbol stub for: _pthread_mutex_lock
100008557:	sub	qword ptr [rip + 0x844a], rbx
10000855e:	lea	rax, [rip + 0x7edb]
100008565:	jne	0x100008579
100008567:	cmp	qword ptr [rax], 0x2
10000856b:	jb	0x100008579
10000856d:	lea	rdi, [rip + 0x8404]
100008574:	call	0x10000aea6 ## symbol stub for: _pthread_cond_broadcast
100008579:	lea	rdi, [rip + 0x83b8]
100008580:	call	0x10000aed6 ## symbol stub for: _pthread_mutex_unlock
100008585:	mov	rdi, qword ptr [r12 + 0x8]
10000858a:	call	0x100007927
10000858f:	xor	eax, eax
100008591:	mov	qword ptr [r12 + 0x8], rax
100008596:	mov	qword ptr [r14 + 0x8], rax
10000859a:	mov	qword ptr [r14], rax
10000859d:	mov	r14, qword ptr [r12 + 0x48]
1000085a2:	test	r14, r14
1000085a5:	je	0x100008507
1000085ab:	xor	r15d, r15d
1000085ae:	mov	rax, qword ptr [r12]
1000085b2:	mov	rbx, qword ptr [rax + 8*r15]
1000085b6:	test	rbx, rbx
1000085b9:	je	0x100008674
1000085bf:	mov	rax, qword ptr [r12 + 0x10]
1000085c4:	mov	qword ptr [rbx + 0x10], rax
1000085c8:	mov	rax, qword ptr [r12 + 0x40]
1000085cd:	mov	qword ptr [rbx + 0x40], rax
1000085d1:	mov	rax, qword ptr [rbx + 0x50]
1000085d5:	add	qword ptr [r12 + 0x40], rax
1000085da:	cmp	rax, 0x4
1000085de:	ja	0x1000085ea
1000085e0:	mov	rdi, rbx
1000085e3:	call	0x100008108
1000085e8:	jmp	0x100008668
1000085ea:	mov	edi, 0x10
1000085ef:	call	0x100007912
1000085f4:	mov	r13, rax
1000085f7:	mov	qword ptr [rax + 0x8], rbx
1000085fb:	lea	rbx, [rip + 0x7e3e]
100008602:	cmp	qword ptr [rbx], 0x1
100008606:	jbe	0x100008656
100008608:	lea	rdi, [rip + 0x8329]
10000860f:	call	0x10000aed0 ## symbol stub for: _pthread_mutex_lock
100008614:	mov	rax, qword ptr [rbx]
100008617:	mov	rcx, qword ptr [rip + 0x839a]
10000861e:	mov	qword ptr [r13], rcx
100008622:	mov	qword ptr [rip + 0x838f], r13
100008629:	cmp	rax, 0x2
10000862d:	jb	0x100008668
10000862f:	lea	rdi, [rip + 0x8342]
100008636:	call	0x10000aeb2 ## symbol stub for: _pthread_cond_signal
10000863b:	lea	rax, [rip + 0x7dfe]
100008642:	cmp	qword ptr [rax], 0x2
100008646:	jb	0x100008668
100008648:	lea	rdi, [rip + 0x82e9]
10000864f:	call	0x10000aed6 ## symbol stub for: _pthread_mutex_unlock
100008654:	jmp	0x100008668
100008656:	mov	rax, qword ptr [rip + 0x835b]
10000865d:	mov	qword ptr [r13], rax
100008661:	mov	qword ptr [rip + 0x8350], r13
100008668:	mov	rax, qword ptr [r12]
10000866c:	mov	qword ptr [rax + 8*r15], 0x0
100008674:	inc	r15
100008677:	cmp	r14, r15
10000867a:	jne	0x1000085ae
100008680:	jmp	0x100008507
100008685:	call	0x10000ab38
10000868a:	nop
10000868b:	nop
10000868c:	push	rbp
10000868d:	mov	rbp, rsp
100008690:	push	r15
100008692:	push	r14
100008694:	push	r13
100008696:	push	r12
100008698:	push	rbx
100008699:	sub	rsp, 0x1b8
1000086a0:	mov	rax, qword ptr [rip + 0x3971] ## literal pool symbol address: ___stack_chk_guard
1000086a7:	mov	rax, qword ptr [rax]
1000086aa:	mov	qword ptr [rbp - 0x30], rax
1000086ae:	mov	qword ptr [rbp - 0x1d8], rdi
1000086b5:	mov	r15d, dword ptr [rdi]
1000086b8:	cmp	r15d, 0x2
1000086bc:	jl	0x1000088da
1000086c2:	mov	r12, rsi
1000086c5:	mov	r14d, 0x3
1000086cb:	mov	r13d, 0x1
1000086d1:	mov	qword ptr [rbp - 0x1e0], rsi
1000086d8:	mov	rbx, qword ptr [r12 + 8*r13]
1000086dc:	mov	rdi, rbx
1000086df:	call	0x10000af72 ## symbol stub for: _strlen
1000086e4:	cmp	rax, 0x2
1000086e8:	jb	0x1000088c8
1000086ee:	cmp	byte ptr [rbx], 0x2b
1000086f1:	jne	0x1000088c8
1000086f7:	mov	byte ptr [rbp - 0x140], 0x0
1000086fe:	xor	eax, eax
100008700:	mov	dword ptr [rbp - 0x1c8], eax
100008706:	mov	dword ptr [rbp - 0x1cc], eax
10000870c:	inc	rbx
10000870f:	mov	rdi, rbx
100008712:	lea	rsi, [rbp - 0x1c8]
100008719:	lea	rdx, [rbp - 0x1cc]
100008720:	lea	rcx, [rbp - 0x140]
100008727:	call	0x100008901
10000872c:	test	eax, eax
10000872e:	js	0x1000088be
100008734:	mov	r12d, dword ptr [rbp - 0x1c8]
10000873b:	inc	r12d
10000873e:	mov	dword ptr [rbp - 0x1c8], r12d
100008745:	mov	r15d, dword ptr [rbp - 0x1cc]
10000874c:	inc	r15d
10000874f:	mov	dword ptr [rbp - 0x1cc], r15d
100008756:	lea	rax, [r13 + 0x1]
10000875a:	mov	rcx, qword ptr [rbp - 0x1d8]
100008761:	movsxd	rcx, dword ptr [rcx]
100008764:	cmp	rax, rcx
100008767:	jge	0x100008875
10000876d:	mov	rax, qword ptr [rbp - 0x1e0]
100008774:	mov	rbx, qword ptr [rax + 8*r13 + 0x8]
100008779:	mov	rdi, rbx
10000877c:	call	0x10000af72 ## symbol stub for: _strlen
100008781:	cmp	rax, 0x2
100008785:	jb	0x100008875
10000878b:	cmp	byte ptr [rbx], 0x2d
10000878e:	jne	0x100008875
100008794:	mov	byte ptr [rbp - 0x1c0], 0x0
10000879b:	xor	eax, eax
10000879d:	mov	dword ptr [rbp - 0x1c4], eax
1000087a3:	mov	dword ptr [rbp - 0x1d0], eax
1000087a9:	inc	rbx
1000087ac:	mov	rdi, rbx
1000087af:	lea	rsi, [rbp - 0x1c4]
1000087b6:	lea	rdx, [rbp - 0x1d0]
1000087bd:	lea	rcx, [rbp - 0x1c0]
1000087c4:	call	0x100008901
1000087c9:	test	eax, eax
1000087cb:	js	0x100008875
1000087d1:	mov	r10d, dword ptr [rbp - 0x1d0]
1000087d8:	mov	r11d, dword ptr [rbp - 0x1c4]
1000087df:	test	r10d, r10d
1000087e2:	jle	0x1000087ee
1000087e4:	inc	r11d
1000087e7:	mov	dword ptr [rbp - 0x1c4], r11d
1000087ee:	mov	edx, 0x81
1000087f3:	lea	rdi, [rbp - 0xc0]
1000087fa:	xor	esi, esi
1000087fc:	lea	rcx, [rip + 0x3179] ## literal pool for: "-k%d.%d%s,%d.%d%s"
100008803:	mov	r8d, r12d
100008806:	mov	r9d, r15d
100008809:	mov	eax, 0x0
10000880e:	lea	rbx, [rbp - 0x1c0]
100008815:	push	rbx
100008816:	push	r10
100008818:	push	r11
10000881a:	lea	rbx, [rbp - 0x140]
100008821:	push	rbx
100008822:	call	0x10000ad62 ## symbol stub for: ___sprintf_chk
100008827:	add	rsp, 0x20
10000882b:	lea	rdi, [rbp - 0xc0]
100008832:	call	0x10000794d
100008837:	mov	r12, qword ptr [rbp - 0x1e0]
10000883e:	mov	qword ptr [r12 + 8*r13], rax
100008842:	mov	rax, qword ptr [rbp - 0x1d8]
100008849:	mov	eax, dword ptr [rax]
10000884b:	lea	ecx, [r13 + 0x2]
10000884f:	cmp	ecx, eax
100008851:	jge	0x100008868
100008853:	mov	rcx, r14
100008856:	lea	edx, [rcx - 0x1]
100008859:	mov	rsi, qword ptr [r12 + 8*rcx]
10000885d:	mov	qword ptr [r12 + 8*rdx], rsi
100008861:	inc	rcx
100008864:	cmp	eax, ecx
100008866:	jg	0x100008856
100008868:	dec	eax
10000886a:	mov	rcx, qword ptr [rbp - 0x1d8]
100008871:	mov	dword ptr [rcx], eax
100008873:	jmp	0x1000088be
100008875:	sub	rsp, 0x8
100008879:	mov	edx, 0x81
10000887e:	lea	rdi, [rbp - 0xc0]
100008885:	xor	esi, esi
100008887:	lea	rcx, [rip + 0x3100] ## literal pool for: "-k%d.%d%s"
10000888e:	mov	r8d, r12d
100008891:	mov	r9d, r15d
100008894:	xor	eax, eax
100008896:	lea	rbx, [rbp - 0x140]
10000889d:	push	rbx
10000889e:	call	0x10000ad62 ## symbol stub for: ___sprintf_chk
1000088a3:	add	rsp, 0x10
1000088a7:	lea	rdi, [rbp - 0xc0]
1000088ae:	call	0x10000794d
1000088b3:	mov	r12, qword ptr [rbp - 0x1e0]
1000088ba:	mov	qword ptr [r12 + 8*r13], rax
1000088be:	mov	rax, qword ptr [rbp - 0x1d8]
1000088c5:	mov	r15d, dword ptr [rax]
1000088c8:	inc	r13
1000088cb:	movsxd	rax, r15d
1000088ce:	inc	r14
1000088d1:	cmp	r13, rax
1000088d4:	jl	0x1000086d8
1000088da:	mov	rax, qword ptr [rip + 0x3737] ## literal pool symbol address: ___stack_chk_guard
1000088e1:	mov	rax, qword ptr [rax]
1000088e4:	cmp	rax, qword ptr [rbp - 0x30]
1000088e8:	jne	0x1000088fc
1000088ea:	add	rsp, 0x1b8
1000088f1:	pop	rbx
1000088f2:	pop	r12
1000088f4:	pop	r13
1000088f6:	pop	r14
1000088f8:	pop	r15
1000088fa:	pop	rbp
1000088fb:	ret
1000088fc:	call	0x10000ad68 ## symbol stub for: ___stack_chk_fail
100008901:	push	rbp
100008902:	mov	rbp, rsp
100008905:	push	r15
100008907:	push	r14
100008909:	push	r13
10000890b:	push	r12
10000890d:	push	rbx
10000890e:	sub	rsp, 0x78
100008912:	mov	r14, rcx
100008915:	mov	r13, rdx
100008918:	mov	rbx, rsi
10000891b:	mov	r15, rdi
10000891e:	mov	rax, qword ptr [rip + 0x36f3] ## literal pool symbol address: ___stack_chk_guard
100008925:	mov	rax, qword ptr [rax]
100008928:	mov	qword ptr [rbp - 0x30], rax
10000892c:	xor	eax, eax
10000892e:	mov	dword ptr [rsi], eax
100008930:	mov	dword ptr [rdx], eax
100008932:	lea	rsi, [rip + 0x31cf] ## literal pool for: "^([0-9]+)(\\.[0-9]+)?([A-Za-z]+)?$"
100008939:	lea	rdi, [rbp - 0xa0]
100008940:	mov	edx, 0x1
100008945:	call	0x10000af06 ## symbol stub for: _regcomp
10000894a:	mov	r12d, 0xffffffff
100008950:	test	eax, eax
100008952:	jne	0x100008aa6
100008958:	lea	rdi, [rbp - 0xa0]
10000895f:	lea	rcx, [rbp - 0x70]
100008963:	mov	edx, 0x4
100008968:	mov	rsi, r15
10000896b:	xor	r8d, r8d
10000896e:	call	0x10000af0c ## symbol stub for: _regexec
100008973:	mov	r12d, 0xffffffff
100008979:	test	eax, eax
10000897b:	jne	0x100008a9a
100008981:	mov	rax, qword ptr [rbp - 0x68]
100008985:	cmp	rax, qword ptr [rbp - 0x70]
100008989:	jle	0x100008a9a
10000898f:	mov	qword ptr [rbp - 0x80], r14
100008993:	mov	r14, qword ptr [rbp - 0x58]
100008997:	sub	r14, qword ptr [rbp - 0x60]
10000899b:	jle	0x100008a9a
1000089a1:	lea	rdi, [r14 + 0x1]
1000089a5:	call	0x100007912
1000089aa:	mov	r12, rax
1000089ad:	mov	rsi, qword ptr [rbp - 0x60]
1000089b1:	add	rsi, r15
1000089b4:	mov	rdi, rax
1000089b7:	mov	rdx, r14
1000089ba:	call	0x10000af78 ## symbol stub for: _strncpy
1000089bf:	mov	byte ptr [r12 + r14], 0x0
1000089c4:	call	0x10000ad56 ## symbol stub for: ___error
1000089c9:	mov	dword ptr [rax], 0x0
1000089cf:	mov	qword ptr [rbp - 0x78], r12
1000089d3:	mov	rdi, r12
1000089d6:	xor	esi, esi
1000089d8:	mov	edx, 0xa
1000089dd:	call	0x10000af96 ## symbol stub for: _strtoul
1000089e2:	mov	dword ptr [rbx], eax
1000089e4:	call	0x10000ad56 ## symbol stub for: ___error
1000089e9:	cmp	dword ptr [rax], 0x0
1000089ec:	jne	0x100008acd
1000089f2:	mov	rbx, qword ptr [rbp - 0x48]
1000089f6:	sub	rbx, qword ptr [rbp - 0x50]
1000089fa:	jle	0x100008a52
1000089fc:	lea	r12, [rbx - 0x1]
100008a00:	mov	rdi, rbx
100008a03:	call	0x100007912
100008a08:	mov	r14, rax
100008a0b:	mov	rax, qword ptr [rbp - 0x50]
100008a0f:	lea	rsi, [r15 + rax + 0x1]
100008a14:	mov	rdi, r14
100008a17:	mov	rdx, r12
100008a1a:	call	0x10000af78 ## symbol stub for: _strncpy
100008a1f:	mov	byte ptr [r14 + rbx - 0x1], 0x0
100008a25:	call	0x10000ad56 ## symbol stub for: ___error
100008a2a:	mov	dword ptr [rax], 0x0
100008a30:	mov	rdi, r14
100008a33:	xor	esi, esi
100008a35:	mov	edx, 0xa
100008a3a:	call	0x10000af96 ## symbol stub for: _strtoul
100008a3f:	mov	dword ptr [r13], eax
100008a43:	call	0x10000ad56 ## symbol stub for: ___error
100008a48:	cmp	dword ptr [rax], 0x0
100008a4b:	je	0x100008a55
100008a4d:	call	0x10000ab4f
100008a52:	xor	r14d, r14d
100008a55:	mov	rax, qword ptr [rbp - 0x40]
100008a59:	mov	rbx, qword ptr [rbp - 0x38]
100008a5d:	sub	rbx, rax
100008a60:	jle	0x100008a7c
100008a62:	add	r15, rax
100008a65:	mov	r12, qword ptr [rbp - 0x80]
100008a69:	mov	rdi, r12
100008a6c:	mov	rsi, r15
100008a6f:	mov	rdx, rbx
100008a72:	call	0x10000af78 ## symbol stub for: _strncpy
100008a77:	mov	byte ptr [r12 + rbx], 0x0
100008a7c:	test	r14, r14
100008a7f:	je	0x100008a89
100008a81:	mov	rdi, r14
100008a84:	call	0x100007927
100008a89:	xor	r12d, r12d
100008a8c:	mov	rdi, qword ptr [rbp - 0x78]
100008a90:	test	rdi, rdi
100008a93:	je	0x100008a9a
100008a95:	call	0x100007927
100008a9a:	lea	rdi, [rbp - 0xa0]
100008aa1:	call	0x10000af12 ## symbol stub for: _regfree
100008aa6:	mov	rax, qword ptr [rip + 0x356b] ## literal pool symbol address: ___stack_chk_guard
100008aad:	mov	rax, qword ptr [rax]
100008ab0:	cmp	rax, qword ptr [rbp - 0x30]
100008ab4:	jne	0x100008ac8
100008ab6:	mov	eax, r12d
100008ab9:	add	rsp, 0x78
100008abd:	pop	rbx
100008abe:	pop	r12
100008ac0:	pop	r13
100008ac2:	pop	r14
100008ac4:	pop	r15
100008ac6:	pop	rbp
100008ac7:	ret
100008ac8:	call	0x10000ad68 ## symbol stub for: ___stack_chk_fail
100008acd:	call	0x10000ab6b
100008ad2:	push	rbp
100008ad3:	mov	rbp, rsp
100008ad6:	push	r15
100008ad8:	push	r14
100008ada:	push	r13
100008adc:	push	r12
100008ade:	push	rbx
100008adf:	sub	rsp, 0x488
100008ae6:	mov	r14, rsi
100008ae9:	mov	rax, qword ptr [rip + 0x3528] ## literal pool symbol address: ___stack_chk_guard
100008af0:	mov	rax, qword ptr [rax]
100008af3:	mov	qword ptr [rbp - 0x30], rax
100008af7:	mov	dword ptr [rbp - 0x43c], edi
100008afd:	mov	word ptr [rbp - 0x44c], 0x0
100008b06:	mov	dword ptr [rbp - 0x450], 0x0
100008b10:	lea	rdi, [rip + 0x2b25] ## literal pool for: "-"
100008b17:	call	0x10000794d
100008b1c:	mov	r15, rax
100008b1f:	lea	rdi, [rip + 0x2e72] ## literal pool for: "GNUSORT_COMPATIBLE_BLANKS"
100008b26:	call	0x10000ae04 ## symbol stub for: _getenv
100008b2b:	test	rax, rax
100008b2e:	je	0x100008b4c
100008b30:	mov	rax, qword ptr [rip + 0x3509] ## literal pool symbol address: _isspace
100008b37:	mov	qword ptr [rip + 0x78ea], rax
100008b3e:	mov	rax, qword ptr [rip + 0x3503] ## literal pool symbol address: _iswspace
100008b45:	mov	qword ptr [rip + 0x78e4], rax
100008b4c:	call	0x100005dbc
100008b51:	movabs	rax, 0x4000000000
100008b5b:	lea	rsi, [rbp - 0x430]
100008b62:	mov	qword ptr [rsi + 0x8], rax
100008b66:	lea	rax, [rip + 0x1622]
100008b6d:	mov	qword ptr [rsi], rax
100008b70:	mov	edi, 0xf
100008b75:	xor	edx, edx
100008b77:	call	0x10000af42 ## symbol stub for: _sigaction
100008b7c:	test	eax, eax
100008b7e:	js	0x100008c44
100008b84:	lea	rsi, [rbp - 0x430]
100008b8b:	mov	edi, 0x1
100008b90:	xor	edx, edx
100008b92:	call	0x10000af42 ## symbol stub for: _sigaction
100008b97:	test	eax, eax
100008b99:	js	0x100008c44
100008b9f:	lea	rsi, [rbp - 0x430]
100008ba6:	mov	edi, 0x2
100008bab:	xor	edx, edx
100008bad:	call	0x10000af42 ## symbol stub for: _sigaction
100008bb2:	test	eax, eax
100008bb4:	js	0x100008c44
100008bba:	lea	rsi, [rbp - 0x430]
100008bc1:	mov	edi, 0x3
100008bc6:	xor	edx, edx
100008bc8:	call	0x10000af42 ## symbol stub for: _sigaction
100008bcd:	test	eax, eax
100008bcf:	js	0x100008c44
100008bd1:	lea	rsi, [rbp - 0x430]
100008bd8:	mov	edi, 0x6
100008bdd:	xor	edx, edx
100008bdf:	call	0x10000af42 ## symbol stub for: _sigaction
100008be4:	test	eax, eax
100008be6:	js	0x100008c44
100008be8:	lea	rsi, [rbp - 0x430]
100008bef:	mov	edi, 0xa
100008bf4:	xor	edx, edx
100008bf6:	call	0x10000af42 ## symbol stub for: _sigaction
100008bfb:	test	eax, eax
100008bfd:	js	0x100008c44
100008bff:	lea	rsi, [rbp - 0x430]
100008c06:	mov	edi, 0xb
100008c0b:	xor	edx, edx
100008c0d:	call	0x10000af42 ## symbol stub for: _sigaction
100008c12:	test	eax, eax
100008c14:	js	0x100008c44
100008c16:	lea	rsi, [rbp - 0x430]
100008c1d:	mov	edi, 0x1e
100008c22:	xor	edx, edx
100008c24:	call	0x10000af42 ## symbol stub for: _sigaction
100008c29:	test	eax, eax
100008c2b:	js	0x100008c44
100008c2d:	lea	rsi, [rbp - 0x430]
100008c34:	mov	edi, 0x1f
100008c39:	xor	edx, edx
100008c3b:	call	0x10000af42 ## symbol stub for: _sigaction
100008c40:	test	eax, eax
100008c42:	jns	0x100008c50
100008c44:	lea	rdi, [rip + 0x2edf] ## literal pool for: "sigaction"
100008c4b:	call	0x10000ae82 ## symbol stub for: _perror
100008c50:	mov	dword ptr [rip + 0x77de], 0x1
100008c5a:	mov	edi, 0xc8
100008c5f:	call	0x10000af9c ## symbol stub for: _sysconf
100008c64:	mov	rbx, rax
100008c67:	test	rax, rax
100008c6a:	jle	0x100009ddf
100008c70:	mov	edi, 0x1d
100008c75:	call	0x10000af9c ## symbol stub for: _sysconf
100008c7a:	mov	r12, rax
100008c7d:	test	rax, rax
100008c80:	jle	0x100009df5
100008c86:	mov	qword ptr [rbp - 0x438], r14
100008c8d:	mov	edi, 0x3a
100008c92:	call	0x10000af9c ## symbol stub for: _sysconf
100008c97:	mov	dword ptr [rip + 0x779b], eax
100008c9d:	test	eax, eax
100008c9f:	je	0x100008cb2
100008ca1:	cmp	eax, 0x21
100008ca4:	jb	0x100008cc2
100008ca6:	mov	eax, 0x20
100008cab:	mov	ecx, 0x20
100008cb0:	jmp	0x100008cbc
100008cb2:	mov	eax, 0x1
100008cb7:	mov	ecx, 0x1
100008cbc:	mov	dword ptr [rip + 0x7776], ecx
100008cc2:	imul	r12, rbx
100008cc6:	lea	rcx, [rip + 0x76cb]
100008ccd:	mov	qword ptr [rcx], r12
100008cd0:	shr	r12
100008cd3:	mov	ecx, 0x400
100008cd8:	cmp	r12, rcx
100008cdb:	cmovbe	r12, rcx
100008cdf:	mov	eax, eax
100008ce1:	mov	qword ptr [rip + 0x7758], rax
100008ce8:	lea	rax, [rip + 0x76b1]
100008cef:	mov	qword ptr [rax], r12
100008cf2:	lea	rsi, [rip + 0x29c6] ## literal pool for: ""
100008cf9:	xor	edi, edi
100008cfb:	call	0x10000af3c ## symbol stub for: _setlocale
100008d00:	call	0x10000ae1c ## symbol stub for: _localeconv
100008d05:	test	rax, rax
100008d08:	je	0x100008dde
100008d0e:	mov	rbx, rax
100008d11:	mov	rsi, qword ptr [rax]
100008d14:	test	rsi, rsi
100008d17:	je	0x100008d44
100008d19:	lea	rax, [rip + 0x7668]
100008d20:	mov	r14d, dword ptr [rax]
100008d23:	mov	rax, qword ptr [rip + 0x32e6] ## literal pool symbol address: ___mb_cur_max
100008d2a:	movsxd	rdx, dword ptr [rax]
100008d2d:	lea	r12, [rip + 0x7654]
100008d34:	mov	rdi, r12
100008d37:	call	0x10000ae40 ## symbol stub for: _mbtowc
100008d3c:	test	eax, eax
100008d3e:	jg	0x100008d44
100008d40:	mov	dword ptr [r12], r14d
100008d44:	mov	rsi, qword ptr [rbx + 0x8]
100008d48:	test	rsi, rsi
100008d4b:	je	0x100008d78
100008d4d:	lea	rax, [rip + 0x7cb4]
100008d54:	mov	r14d, dword ptr [rax]
100008d57:	mov	rax, qword ptr [rip + 0x32b2] ## literal pool symbol address: ___mb_cur_max
100008d5e:	movsxd	rdx, dword ptr [rax]
100008d61:	lea	r12, [rip + 0x7ca0]
100008d68:	mov	rdi, r12
100008d6b:	call	0x10000ae40 ## symbol stub for: _mbtowc
100008d70:	test	eax, eax
100008d72:	jg	0x100008d78
100008d74:	mov	dword ptr [r12], r14d
100008d78:	mov	rsi, qword ptr [rbx + 0x40]
100008d7c:	test	rsi, rsi
100008d7f:	je	0x100008dac
100008d81:	lea	rax, [rip + 0x7608]
100008d88:	mov	r14d, dword ptr [rax]
100008d8b:	mov	rax, qword ptr [rip + 0x327e] ## literal pool symbol address: ___mb_cur_max
100008d92:	movsxd	rdx, dword ptr [rax]
100008d95:	lea	r12, [rip + 0x75f4]
100008d9c:	mov	rdi, r12
100008d9f:	call	0x10000ae40 ## symbol stub for: _mbtowc
100008da4:	test	eax, eax
100008da6:	jg	0x100008dac
100008da8:	mov	dword ptr [r12], r14d
100008dac:	mov	rsi, qword ptr [rbx + 0x48]
100008db0:	test	rsi, rsi
100008db3:	je	0x100008dde
100008db5:	lea	rax, [rip + 0x75d0]
100008dbc:	mov	ebx, dword ptr [rax]
100008dbe:	mov	rax, qword ptr [rip + 0x324b] ## literal pool symbol address: ___mb_cur_max
100008dc5:	movsxd	rdx, dword ptr [rax]
100008dc8:	lea	r14, [rip + 0x75bd]
100008dcf:	mov	rdi, r14
100008dd2:	call	0x10000ae40 ## symbol stub for: _mbtowc
100008dd7:	test	eax, eax
100008dd9:	jg	0x100008dde
100008ddb:	mov	dword ptr [r14], ebx
100008dde:	lea	rdi, [rip + 0x2d6b] ## literal pool for: "GNUSORT_NUMERIC_COMPATIBILITY"
100008de5:	call	0x10000ae04 ## symbol stub for: _getenv
100008dea:	test	rax, rax
100008ded:	je	0x100008df6
100008def:	mov	byte ptr [rip + 0x7be2], 0x1
100008df6:	mov	edi, 0x1
100008dfb:	xor	esi, esi
100008dfd:	call	0x10000af3c ## symbol stub for: _setlocale
100008e02:	test	rax, rax
100008e05:	mov	r14, qword ptr [rbp - 0x438]
100008e0c:	je	0x100008e82
100008e0e:	mov	rdi, rax
100008e11:	call	0x10000794d
100008e16:	mov	rbx, rax
100008e19:	lea	rsi, [rip + 0x2d4e] ## literal pool for: "C"
100008e20:	mov	edi, 0x1
100008e25:	call	0x10000af3c ## symbol stub for: _setlocale
100008e2a:	test	rax, rax
100008e2d:	je	0x100008e3e
100008e2f:	mov	rdi, rax
100008e32:	mov	rsi, rbx
100008e35:	call	0x10000af5a ## symbol stub for: _strcmp
100008e3a:	test	eax, eax
100008e3c:	je	0x100008e63
100008e3e:	lea	rsi, [rip + 0x2d2b] ## literal pool for: "POSIX"
100008e45:	mov	edi, 0x1
100008e4a:	call	0x10000af3c ## symbol stub for: _setlocale
100008e4f:	test	rax, rax
100008e52:	je	0x100008e6d
100008e54:	mov	rdi, rax
100008e57:	mov	rsi, rbx
100008e5a:	call	0x10000af5a ## symbol stub for: _strcmp
100008e5f:	test	eax, eax
100008e61:	jne	0x100008e6d
100008e63:	lea	rax, [rip + 0x7ba2]
100008e6a:	mov	byte ptr [rax], 0x1
100008e6d:	mov	edi, 0x1
100008e72:	mov	rsi, rbx
100008e75:	call	0x10000af3c ## symbol stub for: _setlocale
100008e7a:	mov	rdi, rbx
100008e7d:	call	0x100007927
100008e82:	lea	rdi, [rip + 0x2ced] ## literal pool for: "TMPDIR"
100008e89:	call	0x10000ae04 ## symbol stub for: _getenv
100008e8e:	test	rax, rax
100008e91:	je	0x100008ea5
100008e93:	mov	rdi, rax
100008e96:	call	0x10000794d
100008e9b:	lea	rcx, [rip + 0x7506]
100008ea2:	mov	qword ptr [rcx], rax
100008ea5:	xor	eax, eax
100008ea7:	mov	qword ptr [rip + 0x7b22], rax
100008eae:	mov	qword ptr [rip + 0x7b13], rax
100008eb5:	mov	qword ptr [rip + 0x7b04], rax
100008ebc:	lea	rdi, [rip + 0x7afd]
100008ec3:	mov	qword ptr [rip + 0x7bca], rax
100008eca:	mov	qword ptr [rip + 0x7bcb], rax
100008ed1:	mov	dword ptr [rip + 0x7bc9], 0x0
100008edb:	call	0x10000455a
100008ee0:	mov	qword ptr [rip + 0x7ad9], rax
100008ee7:	lea	rbx, [rbp - 0x43c]
100008eee:	mov	rdi, rbx
100008ef1:	mov	rsi, r14
100008ef4:	call	0x10000868c
100008ef9:	mov	r12d, dword ptr [rbx]
100008efc:	lea	rdx, [rip + 0x2aaf] ## literal pool for: "bcCdfghik:Mmno:RrsS:t:T:uVz"
100008f03:	lea	rcx, [rip + 0x7546]
100008f0a:	mov	edi, r12d
100008f0d:	mov	rsi, r14
100008f10:	xor	r8d, r8d
100008f13:	call	0x10000ae0a ## symbol stub for: _getopt_long
100008f18:	cmp	eax, -0x1
100008f1b:	je	0x100009746
100008f21:	mov	r13d, eax
100008f24:	movsx	edi, r13b
100008f28:	lea	rsi, [rbp - 0x450]
100008f2f:	call	0x100009fac
100008f34:	lea	rdi, [rip + 0x7a85]
100008f3b:	mov	esi, r13d
100008f3e:	call	0x10000a00e
100008f43:	test	al, al
100008f45:	je	0x100008f77
100008f47:	mov	r12d, dword ptr [rbp - 0x43c]
100008f4e:	mov	edi, r12d
100008f51:	mov	rsi, r14
100008f54:	lea	rdx, [rip + 0x2a57] ## literal pool for: "bcCdfghik:Mmno:RrsS:t:T:uVz"
100008f5b:	lea	rcx, [rip + 0x74ee]
100008f62:	xor	r8d, r8d
100008f65:	call	0x10000ae0a ## symbol stub for: _getopt_long
100008f6a:	mov	r13d, eax
100008f6d:	cmp	eax, -0x1
100008f70:	jne	0x100008f24
100008f72:	jmp	0x100009746
100008f77:	lea	eax, [r13 - 0x53]
100008f7b:	cmp	eax, 0x3a
100008f7e:	ja	0x10000901f
100008f84:	lea	rcx, [rip + 0xf05]
100008f8b:	movsxd	rax, dword ptr [rcx + 4*rax]
100008f8f:	add	rax, rcx
100008f92:	jmp	rax
100008f94:	mov	r13, qword ptr [rip + 0x30c5] ## literal pool symbol address: _optarg
100008f9b:	mov	rbx, qword ptr [r13]
100008f9f:	test	rbx, rbx
100008fa2:	je	0x10000960d
100008fa8:	lea	r14, [rbp - 0x430]
100008faf:	mov	qword ptr [r14], 0x0
100008fb6:	call	0x10000ad56 ## symbol stub for: ___error
100008fbb:	mov	dword ptr [rax], 0x0
100008fc1:	mov	rdi, rbx
100008fc4:	mov	rsi, r14
100008fc7:	mov	edx, 0xa
100008fcc:	call	0x10000af90 ## symbol stub for: _strtoll
100008fd1:	mov	r12, rax
100008fd4:	call	0x10000ad56 ## symbol stub for: ___error
100008fd9:	cmp	dword ptr [rax], 0x0
100008fdc:	jne	0x10000971b
100008fe2:	mov	rax, qword ptr [rbp - 0x430]
100008fe9:	movsx	eax, byte ptr [rax]
100008fec:	cmp	eax, 0x53
100008fef:	lea	rbx, [rip + 0x73aa]
100008ff6:	jg	0x100009642
100008ffc:	lea	ecx, [rax - 0x45]
100008fff:	cmp	ecx, 0xb
100009002:	mov	r14, qword ptr [rbp - 0x438]
100009009:	ja	0x10000966a
10000900f:	lea	rax, [rip + 0xf66]
100009016:	movsxd	rcx, dword ptr [rax + 4*rcx]
10000901a:	add	rcx, rax
10000901d:	jmp	rcx
10000901f:	cmp	r13d, 0x43
100009023:	jne	0x100009e11
100009029:	mov	word ptr [rip + 0x7a6a], 0x101
100009032:	jmp	0x100008f47
100009037:	call	0x10000ad56 ## symbol stub for: ___error
10000903c:	mov	dword ptr [rax], 0x0
100009042:	mov	rax, qword ptr [rip + 0x3017] ## literal pool symbol address: _optarg
100009049:	mov	rdi, qword ptr [rax]
10000904c:	xor	esi, esi
10000904e:	mov	edx, 0xa
100009053:	call	0x10000af8a ## symbol stub for: _strtol
100009058:	mov	rbx, rax
10000905b:	call	0x10000ad56 ## symbol stub for: ___error
100009060:	cmp	dword ptr [rax], 0x0
100009063:	jne	0x100009e42
100009069:	cmp	rbx, 0x2
10000906d:	jl	0x100008f47
100009073:	inc	rbx
100009076:	lea	rax, [rip + 0x7333]
10000907d:	mov	qword ptr [rax], rbx
100009080:	jmp	0x100008f47
100009085:	mov	rax, qword ptr [rip + 0x2fd4] ## literal pool symbol address: _optarg
10000908c:	mov	rdi, qword ptr [rax]
10000908f:	call	0x10000af6c ## symbol stub for: _strdup
100009094:	mov	qword ptr [rip + 0x7855], rax
10000909b:	jmp	0x100008f47
1000090a0:	mov	byte ptr [rip + 0x79fb], 0x1
1000090a7:	jmp	0x100008f47
1000090ac:	mov	byte ptr [rip + 0x797d], 0x1
1000090b3:	jmp	0x100008f47
1000090b8:	mov	r14, qword ptr [rip + 0x2fa1] ## literal pool symbol address: _optarg
1000090bf:	mov	rbx, qword ptr [r14]
1000090c2:	mov	rdi, rbx
1000090c5:	call	0x10000af72 ## symbol stub for: _strlen
1000090ca:	cmp	rax, 0x2
1000090ce:	jb	0x1000090ef
1000090d0:	cmp	byte ptr [rbx], 0x5c
1000090d3:	jne	0x100009e35
1000090d9:	lea	rax, [rbx + 0x1]
1000090dd:	mov	qword ptr [r14], rax
1000090e0:	cmp	byte ptr [rbx + 0x1], 0x30
1000090e4:	mov	rbx, rax
1000090e7:	jne	0x1000090c2
1000090e9:	mov	byte ptr [rax], 0x0
1000090ec:	mov	rbx, qword ptr [r14]
1000090ef:	mov	byte ptr [rip + 0x79ad], 0x1
1000090f6:	movsx	edi, byte ptr [rbx]
1000090f9:	call	0x10000ad80 ## symbol stub for: _btowc
1000090fe:	mov	dword ptr [rip + 0x7990], eax
100009104:	cmp	eax, -0x1
100009107:	mov	r14, qword ptr [rbp - 0x438]
10000910e:	je	0x100009e47
100009114:	cmp	byte ptr [rip + 0x78bd], 0x0
10000911b:	jne	0x100008f47
100009121:	lea	rcx, [rip + 0x7260]
100009128:	cmp	dword ptr [rcx], eax
10000912a:	jne	0x100009132
10000912c:	mov	dword ptr [rcx], 0xffffffff
100009132:	lea	rcx, [rip + 0x78cf]
100009139:	cmp	dword ptr [rcx], eax
10000913b:	jne	0x100009143
10000913d:	mov	dword ptr [rcx], 0xffffffff
100009143:	lea	rcx, [rip + 0x7242]
10000914a:	cmp	dword ptr [rcx], eax
10000914c:	jne	0x100009154
10000914e:	mov	dword ptr [rcx], 0xffffffff
100009154:	lea	rcx, [rip + 0x7235]
10000915b:	cmp	dword ptr [rcx], eax
10000915d:	jne	0x100008f47
100009163:	mov	dword ptr [rcx], 0xffffffff
100009169:	jmp	0x100008f47
10000916e:	mov	dword ptr [rip + 0x7920], 0x1
100009178:	jmp	0x100008f47
10000917d:	mov	dword ptr [rip + 0x7911], 0x4
100009187:	jmp	0x100008f47
10000918c:	lea	rax, [rip + 0x788d]
100009193:	mov	byte ptr [rax], 0x1
100009196:	jmp	0x100008f47
10000919b:	mov	dword ptr [rip + 0x78f3], 0x2
1000091a5:	jmp	0x100008f47
1000091aa:	mov	rbx, qword ptr [rip + 0x2eaf] ## literal pool symbol address: _optarg
1000091b1:	mov	rdi, qword ptr [rbx]
1000091b4:	call	0x10000af72 ## symbol stub for: _strlen
1000091b9:	lea	rsi, [rax + 0x1]
1000091bd:	mov	rdi, r15
1000091c0:	call	0x100007938
1000091c5:	mov	r15, rax
1000091c8:	mov	rsi, qword ptr [rbx]
1000091cb:	mov	rdi, rax
1000091ce:	call	0x10000af66 ## symbol stub for: _strcpy
1000091d3:	jmp	0x100008f47
1000091d8:	mov	byte ptr [rip + 0x78c1], 0x1
1000091df:	jmp	0x100008f47
1000091e4:	mov	byte ptr [rip + 0x78b4], 0x1
1000091eb:	jmp	0x100008f47
1000091f0:	mov	word ptr [rip + 0x78a7], 0x101
1000091f9:	jmp	0x100008f47
1000091fe:	mov	rax, qword ptr [rip + 0x2e5b] ## literal pool symbol address: _optarg
100009205:	mov	r12, qword ptr [rax]
100009208:	test	r12, r12
10000920b:	je	0x100008f47
100009211:	lea	rsi, [rip + 0x27d8] ## literal pool for: "general-numeric"
100009218:	mov	rdi, r12
10000921b:	call	0x10000af5a ## symbol stub for: _strcmp
100009220:	test	eax, eax
100009222:	je	0x100009628
100009228:	lea	rsi, [rip + 0x27d1] ## literal pool for: "human-numeric"
10000922f:	mov	rdi, r12
100009232:	call	0x10000af5a ## symbol stub for: _strcmp
100009237:	test	eax, eax
100009239:	je	0x100009660
10000923f:	lea	rsi, [rip + 0x27c8] ## literal pool for: "numeric"
100009246:	mov	rdi, r12
100009249:	call	0x10000af5a ## symbol stub for: _strcmp
10000924e:	test	eax, eax
100009250:	je	0x1000096bb
100009256:	lea	rsi, [rip + 0x27b9] ## literal pool for: "month"
10000925d:	mov	rdi, r12
100009260:	call	0x10000af5a ## symbol stub for: _strcmp
100009265:	test	eax, eax
100009267:	je	0x1000096ed
10000926d:	lea	rsi, [rip + 0x27a8] ## literal pool for: "random"
100009274:	mov	rdi, r12
100009277:	call	0x10000af5a ## symbol stub for: _strcmp
10000927c:	test	eax, eax
10000927e:	jne	0x100009e4c
100009284:	mov	al, 0x1
100009286:	mov	byte ptr [rip + 0x7744], al
10000928c:	lea	rdi, [rip + 0x772d]
100009293:	mov	byte ptr [rip + 0x7750], al
100009299:	jmp	0x1000096d6
10000929e:	mov	al, 0x1
1000092a0:	mov	byte ptr [rip + 0x77fe], al
1000092a6:	mov	byte ptr [rip + 0x77f2], al
1000092ac:	lea	rbx, [rip + 0x774d]
1000092b3:	mov	rsi, qword ptr [rbx]
1000092b6:	inc	rsi
1000092b9:	mov	qword ptr [rbx], rsi
1000092bc:	lea	r14, [rip + 0x774d]
1000092c3:	mov	rdi, qword ptr [r14]
1000092c6:	shl	rsi, 0x6
1000092ca:	call	0x100007938
1000092cf:	mov	qword ptr [r14], rax
1000092d2:	mov	rcx, qword ptr [rbx]
1000092d5:	shl	rcx, 0x6
1000092d9:	xor	edx, edx
1000092db:	mov	qword ptr [rcx + rax - 0x8], rdx
1000092e0:	mov	qword ptr [rcx + rax - 0x10], rdx
1000092e5:	mov	qword ptr [rcx + rax - 0x18], rdx
1000092ea:	mov	qword ptr [rcx + rax - 0x20], rdx
1000092ef:	mov	qword ptr [rcx + rax - 0x28], rdx
1000092f4:	mov	qword ptr [rcx + rax - 0x30], rdx
1000092f9:	mov	qword ptr [rcx + rax - 0x38], rdx
1000092fe:	mov	qword ptr [rcx + rax - 0x40], rdx
100009303:	mov	rax, qword ptr [rip + 0x2d56] ## literal pool symbol address: _optarg
10000930a:	mov	r13, qword ptr [rax]
10000930d:	mov	rax, qword ptr [r14]
100009310:	mov	rcx, qword ptr [rbx]
100009313:	mov	word ptr [rbp - 0x42c], 0x0
10000931c:	mov	dword ptr [rbp - 0x430], 0x0
100009326:	test	r13, r13
100009329:	je	0x100009e73
10000932f:	cmp	byte ptr [r13], 0x0
100009334:	je	0x100009e73
10000933a:	shl	rcx, 0x6
10000933e:	lea	rbx, [rcx + rax - 0x40]
100009343:	mov	rdi, r13
100009346:	mov	esi, 0x2c
10000934b:	call	0x10000af54 ## symbol stub for: _strchr
100009350:	test	rax, rax
100009353:	je	0x1000095e3
100009359:	mov	r12, rax
10000935c:	mov	qword ptr [rbp - 0x448], rbx
100009363:	mov	rbx, rax
100009366:	sub	rbx, r13
100009369:	je	0x100009e73
10000936f:	lea	rdi, [rbx + 0x1]
100009373:	call	0x100007912
100009378:	mov	r14, rax
10000937b:	mov	rdi, rax
10000937e:	mov	rsi, r13
100009381:	mov	rdx, rbx
100009384:	call	0x10000af78 ## symbol stub for: _strncpy
100009389:	mov	byte ptr [r14 + rbx], 0x0
10000938e:	lea	rdx, [rbp - 0x430]
100009395:	mov	rdi, r14
100009398:	mov	rsi, qword ptr [rbp - 0x448]
10000939f:	xor	ecx, ecx
1000093a1:	call	0x10000a1a2
1000093a6:	mov	ebx, eax
1000093a8:	mov	rdi, r14
1000093ab:	call	0x100007927
1000093b0:	test	ebx, ebx
1000093b2:	js	0x100009e73
1000093b8:	inc	r12
1000093bb:	mov	rdi, r12
1000093be:	call	0x10000794d
1000093c3:	mov	r14, rax
1000093c6:	lea	rdx, [rbp - 0x430]
1000093cd:	mov	rdi, rax
1000093d0:	mov	rsi, qword ptr [rbp - 0x448]
1000093d7:	mov	ecx, 0x1
1000093dc:	call	0x10000a1a2
1000093e1:	mov	ebx, eax
1000093e3:	mov	rdi, r14
1000093e6:	call	0x100007927
1000093eb:	jmp	0x1000095f9
1000093f0:	mov	rax, qword ptr [rip + 0x2c69] ## literal pool symbol address: _optarg
1000093f7:	mov	rdi, qword ptr [rax]
1000093fa:	call	0x10000794d
1000093ff:	lea	rcx, [rip + 0x6fa2]
100009406:	jmp	0x1000095bb
10000940b:	mov	byte ptr [rip + 0x768a], 0x1
100009412:	mov	rax, qword ptr [rip + 0x2c47] ## literal pool symbol address: _optarg
100009419:	mov	rbx, qword ptr [rax]
10000941c:	test	rbx, rbx
10000941f:	je	0x100008f47
100009425:	lea	rsi, [rip + 0x25a2] ## literal pool for: "diagnose-first"
10000942c:	mov	rdi, rbx
10000942f:	call	0x10000af5a ## symbol stub for: _strcmp
100009434:	test	eax, eax
100009436:	je	0x100008f47
10000943c:	lea	rsi, [rip + 0x259a] ## literal pool for: "silent"
100009443:	mov	rdi, rbx
100009446:	call	0x10000af5a ## symbol stub for: _strcmp
10000944b:	test	eax, eax
10000944d:	je	0x10000961c
100009453:	lea	rsi, [rip + 0x258a] ## literal pool for: "quiet"
10000945a:	mov	rdi, rbx
10000945d:	call	0x10000af5a ## symbol stub for: _strcmp
100009462:	test	eax, eax
100009464:	je	0x10000961c
10000946a:	cmp	byte ptr [rbx], 0x0
10000946d:	je	0x100008f47
100009473:	jmp	0x100009e78
100009478:	mov	rax, qword ptr [rip + 0x2be1] ## literal pool symbol address: _optarg
10000947f:	mov	rdi, qword ptr [rax]
100009482:	call	0x10000ad7a ## symbol stub for: _atoi
100009487:	test	eax, eax
100009489:	mov	ecx, 0x1
10000948e:	cmovne	ecx, eax
100009491:	movsxd	rax, ecx
100009494:	mov	ecx, 0x400
100009499:	cmp	rax, rcx
10000949c:	cmovb	rcx, rax
1000094a0:	mov	qword ptr [rip + 0x6f99], rcx
1000094a7:	jmp	0x100008f47
1000094ac:	mov	dword ptr [rip + 0x75e2], 0x3
1000094b6:	jmp	0x100008f47
1000094bb:	mov	rax, qword ptr [rip + 0x2b9e] ## literal pool symbol address: _optarg
1000094c2:	mov	rbx, qword ptr [rax]
1000094c5:	xor	eax, eax
1000094c7:	mov	qword ptr [rbp - 0x430], rax
1000094ce:	mov	qword ptr [rbp - 0x4b0], rax
1000094d5:	test	rbx, rbx
1000094d8:	je	0x100008f47
1000094de:	lea	rsi, [rip + 0x2173] ## literal pool for: "r"
1000094e5:	mov	rdi, rbx
1000094e8:	call	0x10000add4 ## symbol stub for: _fopen
1000094ed:	test	rax, rax
1000094f0:	je	0x100009e54
1000094f6:	mov	r12, rax
1000094f9:	lea	rdi, [rbp - 0x430]
100009500:	lea	rsi, [rbp - 0x4b0]
100009507:	xor	edx, edx
100009509:	mov	rcx, r12
10000950c:	call	0x10000adfe ## symbol stub for: _getdelim
100009511:	cmp	rax, -0x1
100009515:	je	0x1000095c3
10000951b:	mov	rdi, qword ptr [rbp - 0x430]
100009522:	cmp	byte ptr [rdi], 0x0
100009525:	je	0x100009585
100009527:	mov	rax, qword ptr [rip + 0x73ca]
10000952e:	cmp	rax, -0x1
100009532:	jne	0x100009541
100009534:	mov	qword ptr [rip + 0x73b9], 0x0
10000953f:	xor	eax, eax
100009541:	lea	rcx, [rax + 0x1]
100009545:	mov	qword ptr [rip + 0x73ac], rcx
10000954c:	mov	rdi, qword ptr [rip + 0x748d]
100009553:	lea	rsi, [8*rax + 0x8]
10000955b:	call	0x100007938
100009560:	mov	qword ptr [rip + 0x7479], rax
100009567:	test	rax, rax
10000956a:	je	0x100009e3d
100009570:	mov	rcx, qword ptr [rbp - 0x430]
100009577:	mov	rdx, qword ptr [rip + 0x737a]
10000957e:	mov	qword ptr [rax + 8*rdx - 0x8], rcx
100009583:	jmp	0x10000958a
100009585:	call	0x10000ade6 ## symbol stub for: _free
10000958a:	xor	eax, eax
10000958c:	lea	rdi, [rbp - 0x430]
100009593:	mov	qword ptr [rdi], rax
100009596:	lea	rsi, [rbp - 0x4b0]
10000959d:	mov	qword ptr [rsi], rax
1000095a0:	jmp	0x100009507
1000095a5:	mov	rax, qword ptr [rip + 0x2ab4] ## literal pool symbol address: _optarg
1000095ac:	mov	rdi, qword ptr [rax]
1000095af:	call	0x10000af6c ## symbol stub for: _strdup
1000095b4:	lea	rcx, [rip + 0x745d]
1000095bb:	mov	qword ptr [rcx], rax
1000095be:	jmp	0x100008f47
1000095c3:	mov	rdi, r12
1000095c6:	call	0x10000adb0 ## symbol stub for: _ferror
1000095cb:	test	eax, eax
1000095cd:	jne	0x100009e5d
1000095d3:	mov	rdi, r12
1000095d6:	mov	rsi, rbx
1000095d9:	call	0x100006476
1000095de:	jmp	0x100008f47
1000095e3:	lea	rdx, [rbp - 0x430]
1000095ea:	mov	rdi, r13
1000095ed:	mov	rsi, rbx
1000095f0:	xor	ecx, ecx
1000095f2:	call	0x10000a1a2
1000095f7:	mov	ebx, eax
1000095f9:	test	ebx, ebx
1000095fb:	mov	r14, qword ptr [rbp - 0x438]
100009602:	jns	0x100008f47
100009608:	jmp	0x100009e73
10000960d:	lea	rbx, [rip + 0x6d8c]
100009614:	mov	r12, qword ptr [rbx]
100009617:	jmp	0x1000096b3
10000961c:	mov	byte ptr [rip + 0x747a], 0x1
100009623:	jmp	0x100008f47
100009628:	mov	al, 0x1
10000962a:	mov	byte ptr [rip + 0x739b], al
100009630:	lea	rdi, [rip + 0x7389]
100009637:	mov	byte ptr [rip + 0x7453], al
10000963d:	jmp	0x1000096d6
100009642:	lea	ecx, [rax - 0x59]
100009645:	cmp	ecx, 0x2
100009648:	mov	r14, qword ptr [rbp - 0x438]
10000964f:	jb	0x100009698
100009651:	cmp	eax, 0x54
100009654:	je	0x1000096a3
100009656:	cmp	eax, 0x62
100009659:	je	0x1000096b3
10000965b:	jmp	0x1000096ff
100009660:	mov	al, 0x1
100009662:	mov	byte ptr [rip + 0x736a], al
100009668:	jmp	0x1000096c3
10000966a:	test	eax, eax
10000966c:	je	0x1000096af
10000966e:	cmp	eax, 0x25
100009671:	jne	0x1000096ff
100009677:	imul	r12, qword ptr [rbx]
10000967b:	shr	r12, 0x2
10000967f:	movabs	rcx, 0x28f5c28f5c28f5c3
100009689:	mov	rax, r12
10000968c:	mul	rcx
10000968f:	mov	r12, rdx
100009692:	shr	r12, 0x2
100009696:	jmp	0x1000096b3
100009698:	xor	r12d, r12d
10000969b:	shl	r12, 0xa
10000969f:	shl	r12, 0xa
1000096a3:	shl	r12, 0xa
1000096a7:	shl	r12, 0xa
1000096ab:	shl	r12, 0xa
1000096af:	shl	r12, 0xa
1000096b3:	mov	qword ptr [rbx], r12
1000096b6:	jmp	0x100008f47
1000096bb:	mov	al, 0x1
1000096bd:	mov	byte ptr [rip + 0x730b], al
1000096c3:	lea	rdi, [rip + 0x72f6]
1000096ca:	mov	byte ptr [rip + 0x73c0], al
1000096d0:	mov	byte ptr [rip + 0x7312], al
1000096d6:	mov	byte ptr [rip + 0x73c8], al
1000096dc:	call	0x10000455a
1000096e1:	mov	qword ptr [rip + 0x72d8], rax
1000096e8:	jmp	0x100008f47
1000096ed:	call	0x100002a10
1000096f2:	mov	al, 0x1
1000096f4:	mov	byte ptr [rip + 0x72d3], al
1000096fa:	jmp	0x100009630
1000096ff:	mov	rdx, qword ptr [r13]
100009703:	lea	rsi, [rip + 0x1f4b] ## literal pool for: "%s"
10000970a:	mov	edi, 0x16
10000970f:	xor	eax, eax
100009711:	call	0x10000afb4 ## symbol stub for: _warnc
100009716:	jmp	0x100009614
10000971b:	mov	rsi, qword ptr [rip + 0x6cbe]
100009722:	lea	rdi, [rip + 0x1f2c] ## literal pool for: "%s"
100009729:	xor	eax, eax
10000972b:	call	0x10000afae ## symbol stub for: _warn
100009730:	lea	rbx, [rip + 0x6c69]
100009737:	mov	r12, qword ptr [rbx]
10000973a:	mov	r14, qword ptr [rbp - 0x438]
100009741:	jmp	0x1000096b3
100009746:	mov	rax, qword ptr [rip + 0x291b] ## literal pool symbol address: _optind
10000974d:	movsxd	rax, dword ptr [rax]
100009750:	sub	r12d, eax
100009753:	mov	dword ptr [rbp - 0x43c], r12d
10000975a:	mov	rcx, qword ptr [rip + 0x727f]
100009761:	test	rcx, rcx
100009764:	je	0x100009776
100009766:	mov	r12d, dword ptr [rip + 0x718b]
10000976d:	mov	dword ptr [rbp - 0x43c], r12d
100009774:	jmp	0x10000977a
100009776:	lea	rcx, [r14 + 8*rax]
10000977a:	mov	qword ptr [rbp - 0x448], rcx
100009781:	cmp	byte ptr [rip + 0x7314], 0x0
100009788:	je	0x100009797
10000978a:	cmp	byte ptr [rip + 0x730e], 0x0
100009791:	jne	0x100009e80
100009797:	lea	rax, [rip + 0x7262]
10000979e:	cmp	qword ptr [rax], 0x0
1000097a2:	jne	0x10000982e
1000097a8:	mov	r14d, 0x1
1000097ae:	lea	r13, [rip + 0x724b]
1000097b5:	mov	qword ptr [r13], r14
1000097b9:	lea	rbx, [rip + 0x7250]
1000097c0:	mov	rdi, qword ptr [rbx]
1000097c3:	mov	esi, 0x40
1000097c8:	call	0x100007938
1000097cd:	mov	qword ptr [rbx], rax
1000097d0:	xor	ecx, ecx
1000097d2:	mov	qword ptr [rax], rcx
1000097d5:	mov	qword ptr [rax + 0x8], rcx
1000097d9:	mov	qword ptr [rax + 0x10], rcx
1000097dd:	mov	qword ptr [rax + 0x18], rcx
1000097e1:	mov	qword ptr [rax + 0x20], rcx
1000097e5:	mov	qword ptr [rax + 0x28], rcx
1000097e9:	mov	qword ptr [rax + 0x30], rcx
1000097ed:	mov	qword ptr [rax + 0x38], rcx
1000097f1:	mov	rax, qword ptr [rbx]
1000097f4:	mov	qword ptr [rax + 0x18], r14
1000097f8:	mov	dl, byte ptr [rip + 0x71ca]
1000097fe:	mov	byte ptr [rax + 0x38], dl
100009801:	mov	byte ptr [rax + 0x39], dl
100009804:	mov	rdx, qword ptr [rip + 0x71c5]
10000980b:	mov	qword ptr [rax + 0x10], rdx
10000980f:	mov	rdx, qword ptr [rip + 0x71b2]
100009816:	mov	qword ptr [rax + 0x8], rdx
10000981a:	mov	rdx, qword ptr [rip + 0x719f]
100009821:	mov	qword ptr [rax], rdx
100009824:	cmp	qword ptr [r13], rcx
100009828:	je	0x100009904
10000982e:	xor	ebx, ebx
100009830:	xor	r14d, r14d
100009833:	lea	rax, [rip + 0x71d6]
10000983a:	mov	r13, qword ptr [rax]
10000983d:	lea	rdi, [r13 + rbx]
100009842:	test	r13, r13
100009845:	je	0x10000989f
100009847:	cmp	byte ptr [r13 + rbx + 0xd], 0x0
10000984d:	jne	0x1000098e3
100009853:	cmp	byte ptr [r13 + rbx + 0x11], 0x0
100009859:	jne	0x1000098e3
10000985f:	cmp	byte ptr [r13 + rbx + 0xe], 0x0
100009865:	jne	0x1000098e3
100009867:	cmp	byte ptr [r13 + rbx + 0xb], 0x0
10000986d:	jne	0x1000098e3
10000986f:	cmp	byte ptr [r13 + rbx + 0xf], 0x0
100009875:	jne	0x1000098e3
100009877:	cmp	byte ptr [r13 + rbx + 0x10], 0x0
10000987d:	jne	0x1000098e3
10000987f:	cmp	byte ptr [r13 + rbx + 0x12], 0x0
100009885:	jne	0x1000098e3
100009887:	cmp	byte ptr [r13 + rbx + 0x9], 0x0
10000988d:	jne	0x1000098e3
10000988f:	cmp	byte ptr [r13 + rbx + 0xa], 0x0
100009895:	jne	0x1000098e3
100009897:	cmp	byte ptr [r13 + rbx + 0xc], 0x0
10000989d:	jne	0x1000098e3
10000989f:	cmp	byte ptr [r13 + rbx + 0x38], 0x0
1000098a5:	jne	0x1000098e3
1000098a7:	cmp	byte ptr [r13 + rbx + 0x39], 0x0
1000098ad:	jne	0x1000098e3
1000098af:	mov	al, byte ptr [rip + 0x7113]
1000098b5:	mov	byte ptr [r13 + rbx + 0x38], al
1000098ba:	mov	byte ptr [r13 + rbx + 0x39], al
1000098bf:	mov	rax, qword ptr [rip + 0x70fa]
1000098c6:	mov	qword ptr [r13 + rbx], rax
1000098cb:	mov	rax, qword ptr [rip + 0x70f6]
1000098d2:	mov	qword ptr [r13 + rbx + 0x8], rax
1000098d7:	mov	rax, qword ptr [rip + 0x70f2]
1000098de:	mov	qword ptr [r13 + rbx + 0x10], rax
1000098e3:	call	0x10000455a
1000098e8:	mov	qword ptr [r13 + rbx], rax
1000098ed:	inc	r14
1000098f0:	add	rbx, 0x40
1000098f4:	lea	rax, [rip + 0x7105]
1000098fb:	cmp	r14, qword ptr [rax]
1000098fe:	jb	0x100009833
100009904:	cmp	byte ptr [rip + 0x7125], 0x0
10000990b:	je	0x1000099e6
100009911:	lea	rax, [rip + 0x6a88]
100009918:	mov	rsi, qword ptr [rax]
10000991b:	lea	rdi, [rip + 0x2128] ## literal pool for: "Memory to be used for sorting: %llu\n"
100009922:	xor	eax, eax
100009924:	call	0x10000ae8e ## symbol stub for: _printf
100009929:	mov	esi, dword ptr [rip + 0x6b09]
10000992f:	lea	rdi, [rip + 0x2139] ## literal pool for: "Number of CPUs: %d\n"
100009936:	xor	eax, eax
100009938:	call	0x10000ae8e ## symbol stub for: _printf
10000993d:	mov	qword ptr [rip + 0x6af8], 0x1
100009948:	mov	edi, 0x1
10000994d:	xor	esi, esi
10000994f:	call	0x10000af3c ## symbol stub for: _setlocale
100009954:	lea	rdi, [rip + 0x2128] ## literal pool for: "Using collate rules of %s locale\n"
10000995b:	mov	rsi, rax
10000995e:	xor	eax, eax
100009960:	call	0x10000ae8e ## symbol stub for: _printf
100009965:	lea	rax, [rip + 0x70a0]
10000996c:	cmp	byte ptr [rax], 0x0
10000996f:	je	0x10000997d
100009971:	lea	rdi, [rip + 0x23d0] ## literal pool for: "Byte sort is used"
100009978:	call	0x10000aeee ## symbol stub for: _puts
10000997d:	cmp	byte ptr [rip + 0x7064], 0x1
100009984:	jne	0x1000099e6
100009986:	lea	rax, [rip + 0x69fb]
10000998d:	mov	esi, dword ptr [rax]
10000998f:	lea	rdi, [rip + 0x210f] ## literal pool for: "Decimal Point: <%lc>\n"
100009996:	xor	eax, eax
100009998:	call	0x10000ae8e ## symbol stub for: _printf
10000999d:	lea	rax, [rip + 0x7064]
1000099a4:	mov	esi, dword ptr [rax]
1000099a6:	test	esi, esi
1000099a8:	je	0x1000099b8
1000099aa:	lea	rdi, [rip + 0x210a] ## literal pool for: "Thousands separator: <%lc>\n"
1000099b1:	xor	eax, eax
1000099b3:	call	0x10000ae8e ## symbol stub for: _printf
1000099b8:	lea	rax, [rip + 0x69d1]
1000099bf:	mov	esi, dword ptr [rax]
1000099c1:	lea	rdi, [rip + 0x210f] ## literal pool for: "Positive sign: <%lc>\n"
1000099c8:	xor	eax, eax
1000099ca:	call	0x10000ae8e ## symbol stub for: _printf
1000099cf:	lea	rax, [rip + 0x69b6]
1000099d6:	mov	esi, dword ptr [rax]
1000099d8:	lea	rdi, [rip + 0x210e] ## literal pool for: "Negative sign: <%lc>\n"
1000099df:	xor	eax, eax
1000099e1:	call	0x10000ae8e ## symbol stub for: _printf
1000099e6:	cmp	byte ptr [rip + 0x6ffc], 0x1
1000099ed:	mov	rbx, qword ptr [rbp - 0x448]
1000099f4:	jne	0x100009b1c
1000099fa:	mov	r14, qword ptr [rip + 0x6eef]
100009a01:	lea	rsi, [rip + 0x2327] ## literal pool for: "/dev/random"
100009a08:	mov	rdi, r14
100009a0b:	call	0x10000af5a ## symbol stub for: _strcmp
100009a10:	test	eax, eax
100009a12:	je	0x100009a52
100009a14:	lea	rdi, [rbp - 0x430]
100009a1b:	call	0x10000ad44 ## symbol stub for: _CC_MD5_Init
100009a20:	mov	rdi, qword ptr [rip + 0x6ec9]
100009a27:	xor	esi, esi
100009a29:	call	0x100005bc9
100009a2e:	test	rax, rax
100009a31:	je	0x100009e8a
100009a37:	mov	qword ptr [rip + 0x6fb2], rax
100009a3e:	mov	rdi, rax
100009a41:	call	0x10000af72 ## symbol stub for: _strlen
100009a46:	mov	qword ptr [rip + 0x6fab], rax
100009a4d:	jmp	0x100009af1
100009a52:	lea	rsi, [rip + 0x1bff] ## literal pool for: "r"
100009a59:	mov	rdi, r14
100009a5c:	call	0x100006310
100009a61:	mov	rbx, rax
100009a64:	xor	r14d, r14d
100009a67:	mov	rdi, rbx
100009a6a:	call	0x10000adaa ## symbol stub for: _feof
100009a6f:	test	eax, eax
100009a71:	jne	0x100009a9a
100009a73:	mov	rdi, rbx
100009a76:	call	0x10000adbc ## symbol stub for: _fgetc
100009a7b:	cmp	eax, -0x1
100009a7e:	je	0x100009a9a
100009a80:	mov	byte ptr [rbp + r14 - 0x430], al
100009a88:	inc	r14
100009a8b:	cmp	r14, 0x400
100009a92:	jne	0x100009a67
100009a94:	mov	r14d, 0x400
100009a9a:	mov	rsi, qword ptr [rip + 0x6e4f]
100009aa1:	mov	rdi, rbx
100009aa4:	call	0x100006476
100009aa9:	lea	rbx, [rbp - 0x4b0]
100009ab0:	mov	rdi, rbx
100009ab3:	call	0x10000ad44 ## symbol stub for: _CC_MD5_Init
100009ab8:	lea	rsi, [rbp - 0x430]
100009abf:	mov	rdi, rbx
100009ac2:	mov	edx, r14d
100009ac5:	call	0x10000ad4a ## symbol stub for: _CC_MD5_Update
100009aca:	mov	rdi, rbx
100009acd:	xor	esi, esi
100009acf:	call	0x100005b30
100009ad4:	mov	qword ptr [rip + 0x6f15], rax
100009adb:	mov	rdi, rax
100009ade:	call	0x10000af72 ## symbol stub for: _strlen
100009ae3:	mov	qword ptr [rip + 0x6f0e], rax
100009aea:	mov	rbx, qword ptr [rbp - 0x448]
100009af1:	lea	rdi, [rip + 0x6f3c]
100009af8:	call	0x10000ad44 ## symbol stub for: _CC_MD5_Init
100009afd:	mov	rdx, qword ptr [rip + 0x6ef4]
100009b04:	test	rdx, rdx
100009b07:	je	0x100009b1c
100009b09:	mov	rsi, qword ptr [rip + 0x6ee0]
100009b10:	lea	rdi, [rip + 0x6f1d]
100009b17:	call	0x10000ad4a ## symbol stub for: _CC_MD5_Update
100009b1c:	lea	rsi, [rip + 0x1b19] ## literal pool for: "-"
100009b23:	mov	rdi, r15
100009b26:	call	0x10000af5a ## symbol stub for: _strcmp
100009b2b:	xor	ecx, ecx
100009b2d:	mov	qword ptr [rbp - 0x438], rcx
100009b34:	test	eax, eax
100009b36:	je	0x100009be3
100009b3c:	test	r12d, r12d
100009b3f:	jle	0x100009be3
100009b45:	mov	r14d, 0x1
100009b4b:	cmovg	r14d, r12d
100009b4f:	xor	r13d, r13d
100009b52:	xor	eax, eax
100009b54:	mov	qword ptr [rbp - 0x438], rax
100009b5b:	mov	rdi, qword ptr [rbx + 8*r13]
100009b5f:	mov	rsi, r15
100009b62:	call	0x10000af5a ## symbol stub for: _strcmp
100009b67:	test	eax, eax
100009b69:	jne	0x100009bd7
100009b6b:	mov	rdi, r15
100009b6e:	call	0x10000794d
100009b73:	mov	qword ptr [rbp - 0x438], rax
100009b7a:	mov	rbx, r15
100009b7d:	mov	rdi, r15
100009b80:	call	0x10000af72 ## symbol stub for: _strlen
100009b85:	lea	rdi, [rax + 0x5]
100009b89:	call	0x100007912
100009b8e:	mov	r15, rax
100009b91:	mov	rdi, rax
100009b94:	mov	rsi, rbx
100009b97:	call	0x10000af66 ## symbol stub for: _strcpy
100009b9c:	mov	rdi, r15
100009b9f:	call	0x10000af72 ## symbol stub for: _strlen
100009ba4:	mov	dword ptr [r15 + rax], 0x706d742e
100009bac:	mov	byte ptr [r15 + rax + 0x4], 0x0
100009bb2:	mov	rdi, rbx
100009bb5:	call	0x100007927
100009bba:	mov	rdi, r15
100009bbd:	xor	esi, esi
100009bbf:	call	0x10000ad74 ## symbol stub for: _access
100009bc4:	test	eax, eax
100009bc6:	jns	0x100009b7a
100009bc8:	mov	rdi, r15
100009bcb:	call	0x100005df2
100009bd0:	mov	rbx, qword ptr [rbp - 0x448]
100009bd7:	inc	r13
100009bda:	cmp	r13, r14
100009bdd:	jne	0x100009b5b
100009be3:	test	r12d, r12d
100009be6:	jle	0x100009c01
100009be8:	lea	rsi, [rip + 0x1a4d] ## literal pool for: "-"
100009bef:	mov	rdi, r15
100009bf2:	call	0x10000af5a ## symbol stub for: _strcmp
100009bf7:	test	eax, eax
100009bf9:	je	0x100009c01
100009bfb:	cmp	byte ptr [r15], 0x0
100009bff:	jne	0x100009c0c
100009c01:	mov	qword ptr [rip + 0x6834], 0x1
100009c0c:	mov	cl, byte ptr [rip + 0x6e8a]
100009c12:	mov	al, byte ptr [rip + 0x6e87]
100009c18:	mov	edx, eax
100009c1a:	or	dl, cl
100009c1c:	je	0x100009c33
100009c1e:	test	cl, cl
100009c20:	je	0x100009c91
100009c22:	test	r12d, r12d
100009c25:	je	0x100009cdb
100009c2b:	mov	rdi, qword ptr [rbx]
100009c2e:	jmp	0x100009ce2
100009c33:	lea	rdi, [rbp - 0x430]
100009c3a:	call	0x10000607e
100009c3f:	lea	rdi, [rbp - 0x4b0]
100009c46:	mov	esi, 0x1
100009c4b:	call	0x100005f0d
100009c50:	test	r12d, r12d
100009c53:	jle	0x100009cf6
100009c59:	inc	r12d
100009c5c:	lea	r13, [rbp - 0x430]
100009c63:	lea	r14, [rbp - 0x4b0]
100009c6a:	mov	rdi, qword ptr [rbx]
100009c6d:	mov	rsi, r13
100009c70:	mov	rdx, r14
100009c73:	call	0x100006d96
100009c78:	add	rbx, 0x8
100009c7c:	dec	r12d
100009c7f:	cmp	r12d, 0x1
100009c83:	jg	0x100009c6a
100009c85:	mov	dword ptr [rbp - 0x43c], 0x0
100009c8f:	jmp	0x100009d10
100009c91:	test	al, al
100009c93:	je	0x100009dd7
100009c99:	lea	rax, [rbp - 0x430]
100009ca0:	mov	r13, rbx
100009ca3:	xor	r14d, r14d
100009ca6:	mov	rbx, rax
100009ca9:	mov	rdi, rax
100009cac:	xor	esi, esi
100009cae:	call	0x100005f0d
100009cb3:	mov	rdi, rbx
100009cb6:	mov	esi, r12d
100009cb9:	mov	rdx, r13
100009cbc:	mov	ecx, 0x1
100009cc1:	call	0x100005faa
100009cc6:	mov	rdi, rbx
100009cc9:	mov	rsi, r15
100009ccc:	call	0x100006f98
100009cd1:	mov	rdi, rbx
100009cd4:	call	0x100005ffb
100009cd9:	jmp	0x100009cea
100009cdb:	lea	rdi, [rip + 0x195a] ## literal pool for: "-"
100009ce2:	call	0x1000064e6
100009ce7:	mov	r14d, eax
100009cea:	mov	rbx, qword ptr [rbp - 0x438]
100009cf1:	jmp	0x100009d82
100009cf6:	lea	rdi, [rip + 0x193f] ## literal pool for: "-"
100009cfd:	lea	rsi, [rbp - 0x430]
100009d04:	lea	rdx, [rbp - 0x4b0]
100009d0b:	call	0x100006d96
100009d10:	cmp	qword ptr [rbp - 0x4a8], 0x0
100009d18:	mov	rbx, qword ptr [rbp - 0x438]
100009d1f:	je	0x100009d64
100009d21:	cmp	qword ptr [rbp - 0x420], 0x0
100009d29:	je	0x100009d53
100009d2b:	call	0x100005ea2
100009d30:	mov	r14, rax
100009d33:	lea	rdi, [rbp - 0x430]
100009d3a:	mov	rsi, rax
100009d3d:	call	0x100006e1c
100009d42:	lea	rdi, [rbp - 0x4b0]
100009d49:	mov	rsi, r14
100009d4c:	xor	edx, edx
100009d4e:	call	0x100005f29
100009d53:	lea	rdi, [rbp - 0x4b0]
100009d5a:	mov	rsi, r15
100009d5d:	call	0x100006f98
100009d62:	jmp	0x100009d73
100009d64:	lea	rdi, [rbp - 0x430]
100009d6b:	mov	rsi, r15
100009d6e:	call	0x100006e1c
100009d73:	lea	rdi, [rbp - 0x4b0]
100009d7a:	call	0x100005ffb
100009d7f:	xor	r14d, r14d
100009d82:	test	rbx, rbx
100009d85:	je	0x100009daa
100009d87:	mov	rdi, rbx
100009d8a:	call	0x10000afa8 ## symbol stub for: _unlink
100009d8f:	mov	rdi, r15
100009d92:	mov	rsi, rbx
100009d95:	call	0x10000af18 ## symbol stub for: _rename
100009d9a:	test	eax, eax
100009d9c:	js	0x100009e85
100009da2:	mov	rdi, rbx
100009da5:	call	0x100007927
100009daa:	mov	rdi, r15
100009dad:	call	0x100007927
100009db2:	mov	rax, qword ptr [rip + 0x225f] ## literal pool symbol address: ___stack_chk_guard
100009db9:	mov	rax, qword ptr [rax]
100009dbc:	cmp	rax, qword ptr [rbp - 0x30]
100009dc0:	jne	0x100009e0c
100009dc2:	mov	eax, r14d
100009dc5:	add	rsp, 0x488
100009dcc:	pop	rbx
100009dcd:	pop	r12
100009dcf:	pop	r13
100009dd1:	pop	r14
100009dd3:	pop	r15
100009dd5:	pop	rbp
100009dd6:	ret
100009dd7:	xor	r14d, r14d
100009dda:	jmp	0x100009cea
100009ddf:	lea	rdi, [rip + 0x1d4e] ## literal pool for: "sysconf pages"
100009de6:	call	0x10000ae82 ## symbol stub for: _perror
100009deb:	mov	ebx, 0x1
100009df0:	jmp	0x100008c70
100009df5:	lea	rdi, [rip + 0x1d46] ## literal pool for: "sysconf psize"
100009dfc:	call	0x10000ae82 ## symbol stub for: _perror
100009e01:	mov	r12d, 0x1000
100009e07:	jmp	0x100008c86
100009e0c:	call	0x10000ad68 ## symbol stub for: ___stack_chk_fail
100009e11:	mov	edi, 0x1
100009e16:	call	0x10000a139
100009e1b:	lea	rdi, [rip + 0x1c0e] ## literal pool for: "2.3-Apple (106)"
100009e22:	call	0x10000aeee ## symbol stub for: _puts
100009e27:	xor	edi, edi
100009e29:	call	0x10000ad9e ## symbol stub for: _exit
100009e2e:	xor	edi, edi
100009e30:	call	0x10000a139
100009e35:	mov	rdi, rbx
100009e38:	call	0x10000ac06
100009e3d:	call	0x10000ac21
100009e42:	call	0x10000ac31
100009e47:	call	0x10000abeb
100009e4c:	mov	rdi, r12
100009e4f:	call	0x10000a118
100009e54:	lea	rsi, [rip + 0x17fa] ## literal pool for: "%s"
100009e5b:	jmp	0x100009e64
100009e5d:	lea	rsi, [rip + 0x1ed7] ## literal pool for: "%s: getdelim"
100009e64:	mov	edi, 0x2
100009e69:	mov	rdx, rbx
100009e6c:	xor	eax, eax
100009e6e:	call	0x10000ad8c ## symbol stub for: _err
100009e73:	call	0x10000abc9
100009e78:	mov	rdi, rbx
100009e7b:	call	0x10000a118
100009e80:	call	0x10000aba7
100009e85:	call	0x10000ab87
100009e8a:	call	0x10000ab97
100009e8f:	nop
100009e90:	add	al, -0xf
	.byte 0xff #bad opcode
100009e93:	jmp	qword ptr [rax - 0xb]
	.byte 0xff #bad opcode
100009e97:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009e9f:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ea7:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009eaf:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009eb7:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ebf:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ec7:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ed0:	jnp	0x100009ec7
	.byte 0xff #bad opcode
100009ed3:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009edb:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ee3:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009eeb:	inc	dword ptr [rcx + 0xeffffff]
100009ef1:	hlt
	.byte 0xff #bad opcode
100009ef3:	inc	dword ptr [rcx + 0x54ffffff]
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
100009efb:	inc	dword ptr [rcx + 0x1affffff]
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
100009f03:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f0b:	inc	dword ptr [rcx + 0x48ffffff]
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
100009f13:	jmp	[rax]
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
100009f17:	jmp	qword ptr [rax - 0xd]
	.byte 0xff #bad opcode
100009f1b:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f23:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f2b:	call	qword ptr [rax]
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
100009f2f:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f37:	inc	dword ptr [rcx - 0x7e000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f3f:	inc	dword ptr [rcx + 0x6effffff]
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
100009f47:	call	[rsi + 0x2bffffff]
100009f4d:	idiv	bh
100009f4f:	jmp	qword ptr [rdi - 0x7400000f]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f57:	call	[rdx + 8*rsi]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f5c:	call	0xf6009f56
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
100009f63:	call	qword ptr [rip - 0x21000009]
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
100009f6b:	dec	dword ptr [rbx]
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
100009f6f:	call	[rsi + 8*rsi]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f74:	in	eax, dx
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f78:	cld
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
100009f7b:	call	[rdi]
100009f7d:	idiv	edi
100009f7f:	inc	dword ptr [rbx + 0x2bfffff7]
100009f85:	idiv	edi
100009f87:	inc	dword ptr [rbx - 0x7c000009]
100009f8d:	idiv	edi
100009f8f:	inc	dword ptr [rbx + 0x33fffff7]
100009f95:	idiv	edi
100009f97:	inc	dword ptr [rbx + 0x2ffffff7]
100009f9d:	idiv	edi
100009f9f:	inc	dword ptr [rbx - 0x7c000009]
100009fa5:	idiv	edi
100009fa7:	jmp	qword ptr [rbx]
100009fa9:	idiv	edi
100009fab:	call	qword ptr [rbp + 0x48]
100009fae:	mov	ebp, esp
100009fb0:	xor	ecx, ecx
100009fb2:	lea	r9, [rip + 0x1567]
100009fb9:	xor	r10d, r10d
100009fbc:	xor	edx, edx
100009fbe:	xor	r8d, r8d
100009fc1:	mov	al, byte ptr [rcx + r9]
100009fc5:	cmp	al, dil
100009fc8:	jne	0x100009fd8
100009fca:	test	dl, 0x1
100009fcd:	jne	0x100009ff4
100009fcf:	mov	byte ptr [rsi + rcx], 0x1
100009fd3:	mov	r10b, 0x1
100009fd6:	jmp	0x100009fe9
100009fd8:	cmp	byte ptr [rsi + rcx], 0x0
100009fdc:	je	0x100009fe9
100009fde:	test	r10b, 0x1
100009fe2:	jne	0x10000a000
100009fe4:	mov	dl, 0x1
100009fe6:	mov	r8d, ecx
100009fe9:	inc	rcx
100009fec:	cmp	rcx, 0x6
100009ff0:	jne	0x100009fc1
100009ff2:	pop	rbp
100009ff3:	ret
100009ff4:	movzx	esi, dil
100009ff8:	mov	edi, r8d
100009ffb:	call	0x10000ac46
10000a000:	movzx	eax, al
10000a003:	movzx	esi, dil
10000a007:	mov	edi, eax
10000a009:	call	0x10000ac74
10000a00e:	push	rbp
10000a00f:	mov	rbp, rsp
10000a012:	push	rbx
10000a013:	push	rax
10000a014:	mov	al, 0x1
10000a016:	test	rdi, rdi
10000a019:	je	0x10000a0ca
10000a01f:	mov	rbx, rdi
10000a022:	xor	eax, eax
10000a024:	cmp	esi, 0x61
10000a027:	jle	0x10000a04b
10000a029:	add	esi, -0x62
10000a02c:	cmp	esi, 0x10
10000a02f:	ja	0x10000a0ca
10000a035:	lea	rcx, [rip + 0x98]
10000a03c:	movsxd	rdx, dword ptr [rcx + 4*rsi]
10000a040:	add	rdx, rcx
10000a043:	jmp	rdx
10000a045:	mov	byte ptr [rbx + 0x8], 0x1
10000a049:	jmp	0x10000a0b6
10000a04b:	cmp	esi, 0x4d
10000a04e:	je	0x10000a099
10000a050:	cmp	esi, 0x52
10000a053:	je	0x10000a0ab
10000a055:	cmp	esi, 0x56
10000a058:	jne	0x10000a0ca
10000a05a:	mov	byte ptr [rbx + 0x11], 0x1
10000a05e:	jmp	0x10000a0b6
10000a060:	mov	byte ptr [rbx + 0x9], 0x1
10000a064:	jmp	0x10000a0b6
10000a066:	mov	byte ptr [rbx + 0xa], 0x1
10000a06a:	jmp	0x10000a0b6
10000a06c:	mov	al, 0x1
10000a06e:	mov	byte ptr [rbx + 0xb], al
10000a071:	jmp	0x10000a0a3
10000a073:	mov	al, 0x1
10000a075:	mov	byte ptr [rbx + 0x12], al
10000a078:	jmp	0x10000a085
10000a07a:	mov	byte ptr [rbx + 0xc], 0x1
10000a07e:	jmp	0x10000a0b6
10000a080:	mov	al, 0x1
10000a082:	mov	byte ptr [rbx + 0xe], al
10000a085:	mov	byte ptr [rip + 0x6a05], al
10000a08b:	mov	byte ptr [rip + 0x6957], al
10000a091:	jmp	0x10000a0b6
10000a093:	mov	byte ptr [rbx + 0xf], 0x1
10000a097:	jmp	0x10000a0b6
10000a099:	call	0x100002a10
10000a09e:	mov	al, 0x1
10000a0a0:	mov	byte ptr [rbx + 0xd], al
10000a0a3:	mov	byte ptr [rip + 0x69e7], al
10000a0a9:	jmp	0x10000a0b6
10000a0ab:	mov	al, 0x1
10000a0ad:	mov	byte ptr [rbx + 0x10], al
10000a0b0:	mov	byte ptr [rip + 0x6933], al
10000a0b6:	mov	byte ptr [rip + 0x69e7], 0x1
10000a0bd:	mov	rdi, rbx
10000a0c0:	call	0x10000455a
10000a0c5:	mov	qword ptr [rbx], rax
10000a0c8:	mov	al, 0x1
10000a0ca:	add	rsp, 0x8
10000a0ce:	pop	rbx
10000a0cf:	pop	rbp
10000a0d0:	ret
10000a0d1:	nop	dword ptr [rax]
10000a0d4:	jno	0x10000a0d5
	.byte 0xff #bad opcode
10000a0d7:	push	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0db:	dec	dword ptr [rdi + 8*rdi - 0x90001]
	.byte 0xff #bad opcode
10000a0e3:	call	qword ptr [rdx - 0x67000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0eb:	call	[rdi - 0x59000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0f3:	push	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0f7:	push	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0fb:	push	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0ff:	push	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a103:	jmp	[rdi + 8*rdi - 0x90001]
	.byte 0xff #bad opcode
10000a10b:	push	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a10f:	push	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a114:	mov	edi, 0x55ffffff
10000a119:	mov	rbp, rsp
10000a11c:	mov	rcx, rdi
10000a11f:	mov	rdx, qword ptr [rip + 0x62b2]
10000a126:	lea	rsi, [rip + 0x1bd1] ## literal pool for: "%s: %s"
10000a12d:	mov	edi, 0x2
10000a132:	xor	eax, eax
10000a134:	call	0x10000ad98 ## symbol stub for: _errx
10000a139:	push	rbp
10000a13a:	mov	rbp, rsp
10000a13d:	push	r15
10000a13f:	push	r14
10000a141:	push	rbx
10000a142:	push	rax
10000a143:	mov	r14d, edi
10000a146:	test	edi, edi
10000a148:	je	0x10000a153
10000a14a:	mov	rax, qword ptr [rip + 0x1ecf] ## literal pool symbol address: ___stderrp
10000a151:	jmp	0x10000a15a
10000a153:	mov	rax, qword ptr [rip + 0x1ed6] ## literal pool symbol address: ___stdoutp
10000a15a:	mov	rbx, qword ptr [rax]
10000a15d:	mov	r15, qword ptr [rip + 0x62bc]
10000a164:	call	0x10000ae16 ## symbol stub for: _getprogname
10000a169:	mov	rdi, rbx
10000a16c:	mov	rsi, r15
10000a16f:	mov	rdx, rax
10000a172:	xor	eax, eax
10000a174:	call	0x10000adda ## symbol stub for: _fprintf
10000a179:	test	r14b, r14b
10000a17c:	je	0x10000a188
10000a17e:	mov	edi, 0x2
10000a183:	call	0x10000ad9e ## symbol stub for: _exit
10000a188:	xor	edi, edi
10000a18a:	call	0x10000ad9e ## symbol stub for: _exit
10000a18f:	push	rbp
10000a190:	mov	rbp, rsp
10000a193:	call	0x100005e61
10000a198:	mov	edi, 0xffffffff
10000a19d:	call	0x10000ad9e ## symbol stub for: _exit
10000a1a2:	push	rbp
10000a1a3:	mov	rbp, rsp
10000a1a6:	push	r15
10000a1a8:	push	r14
10000a1aa:	push	r13
10000a1ac:	push	r12
10000a1ae:	push	rbx
10000a1af:	sub	rsp, 0x88
10000a1b6:	mov	r15d, ecx
10000a1b9:	mov	rbx, rdx
10000a1bc:	mov	r13, rsi
10000a1bf:	mov	r12, rdi
10000a1c2:	mov	rax, qword ptr [rip + 0x1e4f] ## literal pool symbol address: ___stack_chk_guard
10000a1c9:	mov	rax, qword ptr [rax]
10000a1cc:	mov	qword ptr [rbp - 0x30], rax
10000a1d0:	lea	rsi, [rip + 0x1b2e] ## literal pool for: "^([0-9]+)(\\.[0-9]+)?([bdfirMngRhV]+)?$"
10000a1d7:	lea	rdi, [rbp - 0xb0]
10000a1de:	mov	edx, 0x1
10000a1e3:	call	0x10000af06 ## symbol stub for: _regcomp
10000a1e8:	mov	r14d, 0xffffffff
10000a1ee:	test	eax, eax
10000a1f0:	jne	0x10000a411
10000a1f6:	lea	rdi, [rbp - 0xb0]
10000a1fd:	lea	rcx, [rbp - 0x70]
10000a201:	mov	edx, 0x4
10000a206:	mov	rsi, r12
10000a209:	xor	r8d, r8d
10000a20c:	call	0x10000af0c ## symbol stub for: _regexec
10000a211:	mov	r14d, 0xffffffff
10000a217:	test	eax, eax
10000a219:	jne	0x10000a405
10000a21f:	mov	rax, qword ptr [rbp - 0x68]
10000a223:	cmp	rax, qword ptr [rbp - 0x70]
10000a227:	jle	0x10000a405
10000a22d:	mov	qword ptr [rbp - 0x90], rbx
10000a234:	mov	dword ptr [rbp - 0x74], r15d
10000a238:	mov	r15, qword ptr [rbp - 0x58]
10000a23c:	sub	r15, qword ptr [rbp - 0x60]
10000a240:	jle	0x10000a405
10000a246:	lea	rdi, [r15 + 0x1]
10000a24a:	call	0x100007912
10000a24f:	mov	rbx, rax
10000a252:	mov	rsi, qword ptr [rbp - 0x60]
10000a256:	add	rsi, r12
10000a259:	mov	rdi, rax
10000a25c:	mov	rdx, r15
10000a25f:	call	0x10000af78 ## symbol stub for: _strncpy
10000a264:	mov	byte ptr [rbx + r15], 0x0
10000a269:	call	0x10000ad56 ## symbol stub for: ___error
10000a26e:	mov	dword ptr [rax], 0x0
10000a274:	mov	rdi, rbx
10000a277:	xor	esi, esi
10000a279:	mov	edx, 0xa
10000a27e:	call	0x10000af96 ## symbol stub for: _strtoul
10000a283:	cmp	byte ptr [rbp - 0x74], 0x0
10000a287:	mov	qword ptr [rbp - 0x80], rbx
10000a28b:	je	0x10000a2c4
10000a28d:	mov	qword ptr [r13 + 0x30], rax
10000a291:	call	0x10000ad56 ## symbol stub for: ___error
10000a296:	cmp	dword ptr [rax], 0x0
10000a299:	jne	0x10000a45c
10000a29f:	cmp	qword ptr [r13 + 0x30], 0x0
10000a2a4:	je	0x10000a436
10000a2aa:	mov	rax, qword ptr [rbp - 0x50]
10000a2ae:	mov	r14, qword ptr [rbp - 0x48]
10000a2b2:	cmp	r14, rax
10000a2b5:	jg	0x10000a2ee
10000a2b7:	mov	qword ptr [r13 + 0x20], 0x0
10000a2bf:	jmp	0x10000a355
10000a2c4:	mov	qword ptr [r13 + 0x28], rax
10000a2c8:	call	0x10000ad56 ## symbol stub for: ___error
10000a2cd:	cmp	dword ptr [rax], 0x0
10000a2d0:	jne	0x10000a461
10000a2d6:	cmp	qword ptr [r13 + 0x28], 0x0
10000a2db:	je	0x10000a43d
10000a2e1:	mov	rax, qword ptr [rbp - 0x50]
10000a2e5:	mov	r14, qword ptr [rbp - 0x48]
10000a2e9:	cmp	r14, rax
10000a2ec:	jle	0x10000a34d
10000a2ee:	sub	r14, rax
10000a2f1:	lea	r15, [r14 - 0x1]
10000a2f5:	mov	rdi, r14
10000a2f8:	call	0x100007912
10000a2fd:	mov	rdi, rax
10000a300:	mov	rax, qword ptr [rbp - 0x50]
10000a304:	lea	rsi, [r12 + rax + 0x1]
10000a309:	mov	rdx, r15
10000a30c:	mov	r15, rdi
10000a30f:	call	0x10000af78 ## symbol stub for: _strncpy
10000a314:	mov	byte ptr [r15 + r14 - 0x1], 0x0
10000a31a:	call	0x10000ad56 ## symbol stub for: ___error
10000a31f:	mov	dword ptr [rax], 0x0
10000a325:	mov	rdi, r15
10000a328:	xor	esi, esi
10000a32a:	mov	edx, 0xa
10000a32f:	call	0x10000af96 ## symbol stub for: _strtoul
10000a334:	cmp	byte ptr [rbp - 0x74], 0x0
10000a338:	je	0x10000a35a
10000a33a:	mov	qword ptr [r13 + 0x20], rax
10000a33e:	call	0x10000ad56 ## symbol stub for: ___error
10000a343:	cmp	dword ptr [rax], 0x0
10000a346:	je	0x10000a377
10000a348:	call	0x10000acb3
10000a34d:	mov	qword ptr [r13 + 0x18], 0x1
10000a355:	xor	r15d, r15d
10000a358:	jmp	0x10000a377
10000a35a:	mov	qword ptr [r13 + 0x18], rax
10000a35e:	call	0x10000ad56 ## symbol stub for: ___error
10000a363:	cmp	dword ptr [rax], 0x0
10000a366:	jne	0x10000a466
10000a36c:	cmp	qword ptr [r13 + 0x18], 0x0
10000a371:	je	0x10000a44a
10000a377:	mov	rbx, qword ptr [rbp - 0x40]
10000a37b:	xor	r14d, r14d
10000a37e:	cmp	rbx, qword ptr [rbp - 0x38]
10000a382:	jge	0x10000a3d4
10000a384:	mov	qword ptr [rbp - 0x88], r15
10000a38b:	mov	r15d, dword ptr [rbp - 0x74]
10000a38f:	movsx	edi, byte ptr [r12 + rbx]
10000a394:	mov	rsi, qword ptr [rbp - 0x90]
10000a39b:	call	0x100009fac
10000a3a0:	movsx	esi, byte ptr [r12 + rbx]
10000a3a5:	cmp	esi, 0x62
10000a3a8:	jne	0x10000a3b6
10000a3aa:	test	r15b, r15b
10000a3ad:	je	0x10000a3c4
10000a3af:	mov	byte ptr [r13 + 0x39], 0x1
10000a3b4:	jmp	0x10000a3c9
10000a3b6:	mov	rdi, r13
10000a3b9:	call	0x10000a00e
10000a3be:	test	al, al
10000a3c0:	jne	0x10000a3c9
10000a3c2:	jmp	0x10000a3da
10000a3c4:	mov	byte ptr [r13 + 0x38], 0x1
10000a3c9:	inc	rbx
10000a3cc:	cmp	rbx, qword ptr [rbp - 0x38]
10000a3d0:	jl	0x10000a38f
10000a3d2:	jmp	0x10000a3e0
10000a3d4:	mov	rbx, qword ptr [rbp - 0x80]
10000a3d8:	jmp	0x10000a3eb
10000a3da:	mov	r14d, 0xffffffff
10000a3e0:	mov	rbx, qword ptr [rbp - 0x80]
10000a3e4:	mov	r15, qword ptr [rbp - 0x88]
10000a3eb:	test	r15, r15
10000a3ee:	je	0x10000a3f8
10000a3f0:	mov	rdi, r15
10000a3f3:	call	0x100007927
10000a3f8:	test	rbx, rbx
10000a3fb:	je	0x10000a405
10000a3fd:	mov	rdi, rbx
10000a400:	call	0x100007927
10000a405:	lea	rdi, [rbp - 0xb0]
10000a40c:	call	0x10000af12 ## symbol stub for: _regfree
10000a411:	mov	rax, qword ptr [rip + 0x1c00] ## literal pool symbol address: ___stack_chk_guard
10000a418:	mov	rax, qword ptr [rax]
10000a41b:	cmp	rax, qword ptr [rbp - 0x30]
10000a41f:	jne	0x10000a457
10000a421:	mov	eax, r14d
10000a424:	add	rsp, 0x88
10000a42b:	pop	rbx
10000a42c:	pop	r12
10000a42e:	pop	r13
10000a430:	pop	r14
10000a432:	pop	r15
10000a434:	pop	rbp
10000a435:	ret
10000a436:	call	0x10000ac98
10000a43b:	jmp	0x10000a442
10000a43d:	call	0x10000ad0d
10000a442:	mov	r14d, 0xffffffff
10000a448:	jmp	0x10000a3f8
10000a44a:	call	0x10000acc8
10000a44f:	mov	r14d, 0xffffffff
10000a455:	jmp	0x10000a3eb
10000a457:	call	0x10000ad68 ## symbol stub for: ___stack_chk_fail
10000a45c:	call	0x10000acf8
10000a461:	call	0x10000ad28
10000a466:	call	0x10000ace3
10000a46b:	push	rbp
10000a46c:	mov	rbp, rsp
10000a46f:	push	r15
10000a471:	push	r14
10000a473:	push	r13
10000a475:	push	r12
10000a477:	push	rbx
10000a478:	sub	rsp, 0x28
10000a47c:	cmp	rdi, rsi
10000a47f:	je	0x10000a4d2
10000a481:	mov	rbx, rsi
10000a484:	mov	r15, rdi
10000a487:	xor	r13d, r13d
10000a48a:	xor	edx, edx
10000a48c:	call	0x100003519
10000a491:	test	eax, eax
10000a493:	je	0x10000a503
10000a495:	mov	r12d, eax
10000a498:	mov	rax, qword ptr [r15]
10000a49b:	mov	qword ptr [rbp - 0x38], rax
10000a49f:	mov	rdi, qword ptr [rbx]
10000a4a2:	mov	qword ptr [rbp - 0x48], rdi
10000a4a6:	test	rax, rax
10000a4a9:	je	0x10000a4e9
10000a4ab:	test	rdi, rdi
10000a4ae:	je	0x10000a4fd
10000a4b0:	lea	r9, [r15 + 0x8]
10000a4b4:	lea	r13, [rbx + 0x8]
10000a4b8:	mov	r11, qword ptr [rip + 0x1b51] ## literal pool symbol address: ___mb_cur_max
10000a4bf:	mov	esi, dword ptr [r11]
10000a4c2:	cmp	esi, 0x1
10000a4c5:	jne	0x10000a4d7
10000a4c7:	movzx	edx, byte ptr [r9]
10000a4cb:	movzx	r8d, byte ptr [r13]
10000a4d0:	jmp	0x10000a4de
10000a4d2:	xor	r13d, r13d
10000a4d5:	jmp	0x10000a503
10000a4d7:	mov	edx, dword ptr [r9]
10000a4da:	mov	r8d, dword ptr [r13]
10000a4de:	cmp	rax, 0x1
10000a4e2:	jne	0x10000a4f1
10000a4e4:	cmp	edx, 0x2e
10000a4e7:	jne	0x10000a4f1
10000a4e9:	mov	r13d, 0xffffffff
10000a4ef:	jmp	0x10000a503
10000a4f1:	cmp	rdi, 0x1
10000a4f5:	jne	0x10000a515
10000a4f7:	cmp	r8d, 0x2e
10000a4fb:	jne	0x10000a515
10000a4fd:	mov	r13d, 0x1
10000a503:	mov	eax, r13d
10000a506:	add	rsp, 0x28
10000a50a:	pop	rbx
10000a50b:	pop	r12
10000a50d:	pop	r13
10000a50f:	pop	r14
10000a511:	pop	r15
10000a513:	pop	rbp
10000a514:	ret
10000a515:	cmp	rax, 0x2
10000a519:	jne	0x10000a53d
10000a51b:	cmp	edx, 0x2e
10000a51e:	jne	0x10000a53d
10000a520:	lea	r10, [r9 + 0x1]
10000a524:	lea	rcx, [r15 + 0xc]
10000a528:	cmp	esi, 0x1
10000a52b:	cmove	rcx, r10
10000a52f:	jne	0x10000a536
10000a531:	movzx	ecx, byte ptr [rcx]
10000a534:	jmp	0x10000a538
10000a536:	mov	ecx, dword ptr [rcx]
10000a538:	cmp	ecx, 0x2e
10000a53b:	je	0x10000a4e9
10000a53d:	cmp	rdi, 0x2
10000a541:	jne	0x10000a55f
10000a543:	cmp	r8d, 0x2e
10000a547:	jne	0x10000a55f
10000a549:	lea	rdi, [r13 + 0x1]
10000a54d:	lea	rcx, [rbx + 0xc]
10000a551:	cmp	esi, 0x1
10000a554:	cmove	rcx, rdi
10000a558:	jne	0x10000a570
10000a55a:	movzx	ecx, byte ptr [rcx]
10000a55d:	jmp	0x10000a572
10000a55f:	cmp	edx, 0x2e
10000a562:	jne	0x10000a577
10000a564:	cmp	r8d, 0x2e
10000a568:	jne	0x10000a4e9
10000a56e:	jmp	0x10000a577
10000a570:	mov	ecx, dword ptr [rcx]
10000a572:	cmp	ecx, 0x2e
10000a575:	je	0x10000a4fd
10000a577:	cmp	edx, 0x2e
10000a57a:	je	0x10000a586
10000a57c:	cmp	r8d, 0x2e
10000a580:	je	0x10000a4fd
10000a586:	xor	r8d, 0x2e
10000a58a:	xor	edx, 0x2e
10000a58d:	lea	r10, [r9 + 0x1]
10000a591:	lea	r14, [r15 + 0xc]
10000a595:	lea	rcx, [r13 + 0x1]
10000a599:	mov	qword ptr [rbp - 0x40], rcx
10000a59d:	lea	rcx, [rbx + 0xc]
10000a5a1:	lea	rdi, [r9 + rax]
10000a5a5:	mov	qword ptr [rbp - 0x30], rdi
10000a5a9:	cmp	esi, 0x1
10000a5ac:	cmove	r14, r10
10000a5b0:	cmove	rcx, qword ptr [rbp - 0x40]
10000a5b5:	lea	rsi, [r15 + 4*rax + 0x8]
10000a5ba:	cmove	rsi, qword ptr [rbp - 0x30]
10000a5bf:	or	edx, r8d
10000a5c2:	cmovne	rcx, r13
10000a5c6:	mov	qword ptr [rbp - 0x30], rcx
10000a5ca:	cmovne	r14, r9
10000a5ce:	lea	rdx, [rbp - 0x38]
10000a5d2:	mov	rdi, r14
10000a5d5:	mov	r15, r11
10000a5d8:	call	0x10000a819
10000a5dd:	mov	rax, qword ptr [rbx]
10000a5e0:	add	r13, rax
10000a5e3:	cmp	dword ptr [r15], 0x1
10000a5e7:	lea	rsi, [rbx + 4*rax + 0x8]
10000a5ec:	cmove	rsi, r13
10000a5f0:	mov	r13, qword ptr [rbp - 0x30]
10000a5f4:	lea	r15, [rbp - 0x48]
10000a5f8:	mov	rdi, r13
10000a5fb:	mov	rdx, r15
10000a5fe:	call	0x10000a819
10000a603:	lea	rax, [rbp - 0x38]
10000a607:	mov	rbx, qword ptr [rax]
10000a60a:	mov	r15, qword ptr [r15]
10000a60d:	cmp	rbx, r15
10000a610:	jne	0x10000a628
10000a612:	mov	rdi, r14
10000a615:	mov	rsi, r13
10000a618:	mov	rdx, rbx
10000a61b:	call	0x100003556
10000a620:	test	eax, eax
10000a622:	je	0x10000a811
10000a628:	mov	rax, qword ptr [rip + 0x19e1] ## literal pool symbol address: ___mb_cur_max
10000a62f:	mov	r10d, dword ptr [rax]
10000a632:	lea	rcx, [r14 + rbx]
10000a636:	lea	rdx, [r13 + r15]
10000a63b:	xor	esi, esi
10000a63d:	cmp	r10d, 0x1
10000a641:	setne	sil
10000a645:	lea	r9, [r14 + 4*rbx]
10000a649:	cmove	r9, rcx
10000a64d:	lea	r8, [r13 + 4*r15]
10000a652:	cmove	r8, rdx
10000a656:	lea	r11, [rsi + 2*rsi + 0x1]
10000a65b:	mov	rsi, r13
10000a65e:	cmp	rsi, r8
10000a661:	jb	0x10000a66c
10000a663:	cmp	r14, r9
10000a666:	jae	0x10000a811
10000a66c:	cmp	r14, r9
10000a66f:	jae	0x10000a688
10000a671:	cmp	r10d, 0x1
10000a675:	jne	0x10000a67d
10000a677:	movzx	ecx, byte ptr [r14]
10000a67b:	jmp	0x10000a680
10000a67d:	mov	ecx, dword ptr [r14]
10000a680:	add	ecx, -0x30
10000a683:	cmp	ecx, 0x9
10000a686:	ja	0x10000a6b3
10000a688:	cmp	rsi, r8
10000a68b:	jae	0x10000a78c
10000a691:	cmp	r10d, 0x1
10000a695:	jne	0x10000a69e
10000a697:	mov	dl, byte ptr [rsi]
10000a699:	movzx	ecx, dl
10000a69c:	jmp	0x10000a6a2
10000a69e:	mov	edx, dword ptr [rsi]
10000a6a0:	mov	ecx, edx
10000a6a2:	add	ecx, -0x30
10000a6a5:	cmp	ecx, 0xa
10000a6a8:	jb	0x10000a78c
10000a6ae:	cmp	r14, r9
10000a6b1:	jae	0x10000a6cc
10000a6b3:	cmp	r10d, 0x1
10000a6b7:	jne	0x10000a6d9
10000a6b9:	movzx	ebx, byte ptr [r14]
10000a6bd:	xor	edi, edi
10000a6bf:	cmp	rsi, r8
10000a6c2:	jae	0x10000a758
10000a6c8:	mov	dl, byte ptr [rsi]
10000a6ca:	jmp	0x10000a6d4
10000a6cc:	xor	ebx, ebx
10000a6ce:	cmp	r10d, 0x1
10000a6d2:	jne	0x10000a6e8
10000a6d4:	movzx	edx, dl
10000a6d7:	jmp	0x10000a6ea
10000a6d9:	mov	ebx, dword ptr [r14]
10000a6dc:	xor	edi, edi
10000a6de:	mov	edx, 0x0
10000a6e3:	cmp	rsi, r8
10000a6e6:	jae	0x10000a6ed
10000a6e8:	mov	edx, dword ptr [rsi]
10000a6ea:	mov	dil, 0x1
10000a6ed:	mov	r13d, ebx
10000a6f0:	sub	r13d, edx
10000a6f3:	je	0x10000a76e
10000a6f5:	cmp	ebx, 0x7e
10000a6f8:	je	0x10000a4e9
10000a6fe:	cmp	edx, 0x7e
10000a701:	je	0x10000a4fd
10000a707:	lea	ecx, [rdx - 0x30]
10000a70a:	test	ebx, ebx
10000a70c:	je	0x10000a742
10000a70e:	lea	eax, [rbx - 0x30]
10000a711:	cmp	eax, 0x9
10000a714:	jbe	0x10000a742
10000a716:	test	edx, edx
10000a718:	je	0x10000a4fd
10000a71e:	cmp	ecx, 0xa
10000a721:	jb	0x10000a4fd
10000a727:	and	ebx, -0x21
10000a72a:	add	ebx, -0x41
10000a72d:	and	edx, -0x21
10000a730:	add	edx, -0x41
10000a733:	cmp	ebx, 0x19
10000a736:	ja	0x10000a75c
10000a738:	cmp	edx, 0x1a
10000a73b:	jb	0x10000a765
10000a73d:	jmp	0x10000a4e9
10000a742:	cmp	ecx, 0xa
10000a745:	setb	al
10000a748:	test	edx, edx
10000a74a:	sete	cl
10000a74d:	or	cl, al
10000a74f:	movzx	r13d, cl
10000a753:	dec	r13d
10000a756:	jmp	0x10000a765
10000a758:	xor	edx, edx
10000a75a:	jmp	0x10000a6ed
10000a75c:	cmp	edx, 0x1a
10000a75f:	jb	0x10000a4fd
10000a765:	test	r13d, r13d
10000a768:	jne	0x10000a503
10000a76e:	lea	rax, [r14 + r11]
10000a772:	cmp	r14, r9
10000a775:	cmovb	r14, rax
10000a779:	lea	rax, [rsi + r11]
10000a77d:	test	dil, dil
10000a780:	cmovne	rsi, rax
10000a784:	jmp	0x10000a66c
10000a789:	add	r14, r11
10000a78c:	cmp	r10d, 0x1
10000a790:	jne	0x10000a798
10000a792:	movzx	ecx, byte ptr [r14]
10000a796:	jmp	0x10000a79b
10000a798:	mov	ecx, dword ptr [r14]
10000a79b:	cmp	ecx, 0x30
10000a79e:	je	0x10000a789
10000a7a0:	jmp	0x10000a7a5
10000a7a2:	add	rsi, r11
10000a7a5:	cmp	r10d, 0x1
10000a7a9:	jne	0x10000a7b0
10000a7ab:	movzx	ecx, byte ptr [rsi]
10000a7ae:	jmp	0x10000a7b2
10000a7b0:	mov	ecx, dword ptr [rsi]
10000a7b2:	cmp	ecx, 0x30
10000a7b5:	je	0x10000a7a2
10000a7b7:	xor	r13d, r13d
10000a7ba:	cmp	r10d, 0x1
10000a7be:	jne	0x10000a7cc
10000a7c0:	movzx	edi, byte ptr [r14]
10000a7c4:	lea	eax, [rdi - 0x30]
10000a7c7:	movzx	edx, byte ptr [rsi]
10000a7ca:	jmp	0x10000a7d4
10000a7cc:	mov	edi, dword ptr [r14]
10000a7cf:	lea	eax, [rdi - 0x30]
10000a7d2:	mov	edx, dword ptr [rsi]
10000a7d4:	cmp	eax, 0xa
10000a7d7:	jae	0x10000a7f7
10000a7d9:	lea	eax, [rdx - 0x30]
10000a7dc:	cmp	eax, 0xa
10000a7df:	jae	0x10000a4fd
10000a7e5:	test	r13d, r13d
10000a7e8:	jne	0x10000a7ef
10000a7ea:	sub	edi, edx
10000a7ec:	mov	r13d, edi
10000a7ef:	add	r14, r11
10000a7f2:	add	rsi, r11
10000a7f5:	jmp	0x10000a7ba
10000a7f7:	add	edx, -0x30
10000a7fa:	cmp	edx, 0xa
10000a7fd:	jb	0x10000a4e9
10000a803:	test	r13d, r13d
10000a806:	je	0x10000a65e
10000a80c:	jmp	0x10000a503
10000a811:	mov	r13d, r12d
10000a814:	jmp	0x10000a503
10000a819:	push	rbp
10000a81a:	mov	rbp, rsp
10000a81d:	push	r15
10000a81f:	push	r14
10000a821:	push	rbx
10000a822:	mov	qword ptr [rdx], 0x0
10000a829:	xor	r8d, r8d
10000a82c:	cmp	rdi, rsi
10000a82f:	jae	0x10000a8dc
10000a835:	mov	rax, qword ptr [rip + 0x17d4] ## literal pool symbol address: ___mb_cur_max
10000a83c:	mov	r10d, dword ptr [rax]
10000a83f:	xor	eax, eax
10000a841:	cmp	r10d, 0x1
10000a845:	setne	al
10000a848:	lea	r9, [rax + 2*rax + 0x1]
10000a84d:	xor	r14d, r14d
10000a850:	xor	r11d, r11d
10000a853:	xor	ecx, ecx
10000a855:	cmp	r10d, 0x1
10000a859:	jne	0x10000a860
10000a85b:	movzx	ebx, byte ptr [rdi]
10000a85e:	jmp	0x10000a862
10000a860:	mov	ebx, dword ptr [rdi]
10000a862:	test	ebx, ebx
10000a864:	je	0x10000a8d4
10000a866:	test	r11b, 0x1
10000a86a:	jne	0x10000a885
10000a86c:	cmp	ebx, 0x2e
10000a86f:	jne	0x10000a8a0
10000a871:	mov	r11b, 0x1
10000a874:	test	r14b, 0x1
10000a878:	jne	0x10000a8c9
10000a87a:	mov	qword ptr [rdx], rcx
10000a87d:	mov	r11b, 0x1
10000a880:	mov	r14b, 0x1
10000a883:	jmp	0x10000a8c9
10000a885:	mov	eax, ebx
10000a887:	and	eax, -0x21
10000a88a:	add	eax, -0x41
10000a88d:	xor	r11d, r11d
10000a890:	cmp	eax, 0x19
10000a893:	movzx	eax, r14b
10000a897:	mov	r14d, eax
10000a89a:	cmova	r14d, r11d
10000a89e:	jmp	0x10000a8c2
10000a8a0:	mov	eax, ebx
10000a8a2:	and	eax, -0x21
10000a8a5:	add	eax, -0x41
10000a8a8:	lea	r15d, [rbx - 0x30]
10000a8ac:	cmp	eax, 0x19
10000a8af:	movzx	eax, r14b
10000a8b3:	mov	r14d, eax
10000a8b6:	cmova	r14d, r8d
10000a8ba:	cmp	r15d, 0x9
10000a8be:	cmovbe	r14d, eax
10000a8c2:	cmp	ebx, 0x7e
10000a8c5:	cmove	r14d, eax
10000a8c9:	add	rdi, r9
10000a8cc:	inc	rcx
10000a8cf:	cmp	rdi, rsi
10000a8d2:	jb	0x10000a855
10000a8d4:	test	r14b, 0x1
10000a8d8:	je	0x10000a8de
10000a8da:	jmp	0x10000a8e1
10000a8dc:	xor	ecx, ecx
10000a8de:	mov	qword ptr [rdx], rcx
10000a8e1:	pop	rbx
10000a8e2:	pop	r14
10000a8e4:	pop	r15
10000a8e6:	pop	rbp
10000a8e7:	ret
10000a8e8:	push	rbp
10000a8e9:	mov	rbp, rsp
10000a8ec:	lea	rsi, [rip + 0xc59] ## literal pool for: "mbrtowc error"
10000a8f3:	push	0x2
10000a8f5:	pop	rdi
10000a8f6:	xor	eax, eax
10000a8f8:	call	0x10000ad8c ## symbol stub for: _err
10000a8fd:	push	rbp
10000a8fe:	mov	rbp, rsp
10000a901:	push	0x2
10000a903:	pop	rdi
10000a904:	xor	esi, esi
10000a906:	xor	eax, eax
10000a908:	call	0x10000ad8c ## symbol stub for: _err
10000a90d:	push	rbp
10000a90e:	mov	rbp, rsp
10000a911:	push	0x2
10000a913:	pop	rdi
10000a914:	xor	esi, esi
10000a916:	xor	eax, eax
10000a918:	call	0x10000ad8c ## symbol stub for: _err
10000a91d:	push	rbp
10000a91e:	mov	rbp, rsp
10000a921:	push	0x2
10000a923:	pop	rdi
10000a924:	xor	esi, esi
10000a926:	xor	eax, eax
10000a928:	call	0x10000ad8c ## symbol stub for: _err
10000a92d:	push	rbp
10000a92e:	mov	rbp, rsp
10000a931:	push	0x2
10000a933:	pop	rdi
10000a934:	xor	esi, esi
10000a936:	xor	eax, eax
10000a938:	call	0x10000ad8c ## symbol stub for: _err
10000a93d:	push	rbp
10000a93e:	mov	rbp, rsp
10000a941:	push	0x2
10000a943:	pop	rdi
10000a944:	xor	esi, esi
10000a946:	xor	eax, eax
10000a948:	call	0x10000ad8c ## symbol stub for: _err
10000a94d:	push	rbp
10000a94e:	mov	rbp, rsp
10000a951:	push	0x2
10000a953:	pop	rdi
10000a954:	xor	esi, esi
10000a956:	xor	eax, eax
10000a958:	call	0x10000ad8c ## symbol stub for: _err
10000a95d:	nop
10000a95e:	push	rbp
10000a95f:	mov	rbp, rsp
10000a962:	push	0x2
10000a964:	pop	rdi
10000a965:	xor	esi, esi
10000a967:	xor	eax, eax
10000a969:	call	0x10000ad8c ## symbol stub for: _err
10000a96e:	push	rbp
10000a96f:	mov	rbp, rsp
10000a972:	push	0x2
10000a974:	pop	rdi
10000a975:	xor	esi, esi
10000a977:	xor	eax, eax
10000a979:	call	0x10000ad8c ## symbol stub for: _err
10000a97e:	push	rbp
10000a97f:	mov	rbp, rsp
10000a982:	push	0x2
10000a984:	pop	rdi
10000a985:	xor	esi, esi
10000a987:	xor	eax, eax
10000a989:	call	0x10000ad8c ## symbol stub for: _err
10000a98e:	push	rbp
10000a98f:	mov	rbp, rsp
10000a992:	lea	rax, [rip + 0x5a27]
10000a999:	mov	rdx, qword ptr [rax + 0x38]
10000a99d:	lea	rsi, [rip + 0xcb1] ## literal pool for: "%s"
10000a9a4:	push	0x2
10000a9a6:	pop	rdi
10000a9a7:	xor	eax, eax
10000a9a9:	call	0x10000ad8c ## symbol stub for: _err
10000a9ae:	push	rbp
10000a9af:	mov	rbp, rsp
10000a9b2:	push	0x2
10000a9b4:	pop	rdi
10000a9b5:	xor	esi, esi
10000a9b7:	xor	eax, eax
10000a9b9:	call	0x10000ad8c ## symbol stub for: _err
10000a9be:	push	rbp
10000a9bf:	mov	rbp, rsp
10000a9c2:	push	0x2
10000a9c4:	pop	rdi
10000a9c5:	xor	esi, esi
10000a9c7:	xor	eax, eax
10000a9c9:	call	0x10000ad8c ## symbol stub for: _err
10000a9ce:	push	rbp
10000a9cf:	mov	rbp, rsp
10000a9d2:	push	0x2
10000a9d4:	pop	rdi
10000a9d5:	xor	esi, esi
10000a9d7:	xor	eax, eax
10000a9d9:	call	0x10000ad8c ## symbol stub for: _err
10000a9de:	push	rbp
10000a9df:	mov	rbp, rsp
10000a9e2:	push	0x2
10000a9e4:	pop	rdi
10000a9e5:	xor	esi, esi
10000a9e7:	xor	eax, eax
10000a9e9:	call	0x10000ad8c ## symbol stub for: _err
10000a9ee:	push	rbp
10000a9ef:	mov	rbp, rsp
10000a9f2:	push	0x2
10000a9f4:	pop	rdi
10000a9f5:	xor	esi, esi
10000a9f7:	xor	eax, eax
10000a9f9:	call	0x10000ad8c ## symbol stub for: _err
10000a9fe:	push	rbp
10000a9ff:	mov	rbp, rsp
10000aa02:	push	0x2
10000aa04:	pop	rdi
10000aa05:	xor	esi, esi
10000aa07:	xor	eax, eax
10000aa09:	call	0x10000ad8c ## symbol stub for: _err
10000aa0e:	push	rbp
10000aa0f:	mov	rbp, rsp
10000aa12:	push	0x2
10000aa14:	pop	rdi
10000aa15:	xor	esi, esi
10000aa17:	xor	eax, eax
10000aa19:	call	0x10000ad8c ## symbol stub for: _err
10000aa1e:	push	rbp
10000aa1f:	mov	rbp, rsp
10000aa22:	push	0x2
10000aa24:	pop	rdi
10000aa25:	xor	esi, esi
10000aa27:	xor	eax, eax
10000aa29:	call	0x10000ad8c ## symbol stub for: _err
10000aa2e:	push	rbp
10000aa2f:	mov	rbp, rsp
10000aa32:	lea	rsi, [rip + 0xc21] ## literal pool for: "File read software error 1"
10000aa39:	push	0x2
10000aa3b:	pop	rdi
10000aa3c:	xor	eax, eax
10000aa3e:	call	0x10000ad8c ## symbol stub for: _err
10000aa43:	push	rbp
10000aa44:	mov	rbp, rsp
10000aa47:	push	0x2
10000aa49:	pop	rdi
10000aa4a:	xor	esi, esi
10000aa4c:	xor	eax, eax
10000aa4e:	call	0x10000ad8c ## symbol stub for: _err
10000aa53:	push	rbp
10000aa54:	mov	rbp, rsp
10000aa57:	lea	rax, [rip + 0x5962]
10000aa5e:	mov	rdx, qword ptr [rax + 0x50]
10000aa62:	lea	rsi, [rip + 0xbec] ## literal pool for: "%s"
10000aa69:	push	0x2
10000aa6b:	pop	rdi
10000aa6c:	xor	eax, eax
10000aa6e:	call	0x10000ad98 ## symbol stub for: _errx
10000aa73:	push	rbp
10000aa74:	mov	rbp, rsp
10000aa77:	lea	rax, [rip + 0x5942]
10000aa7e:	mov	rdx, qword ptr [rax + 0x48]
10000aa82:	lea	rsi, [rip + 0xbcc] ## literal pool for: "%s"
10000aa89:	push	0x2
10000aa8b:	pop	rdi
10000aa8c:	xor	eax, eax
10000aa8e:	call	0x10000ad8c ## symbol stub for: _err
10000aa93:	push	rbp
10000aa94:	mov	rbp, rsp
10000aa97:	push	0x2
10000aa99:	pop	rdi
10000aa9a:	xor	esi, esi
10000aa9c:	xor	eax, eax
10000aa9e:	call	0x10000ad8c ## symbol stub for: _err
10000aaa3:	push	rbp
10000aaa4:	mov	rbp, rsp
10000aaa7:	call	0x10000ae82 ## symbol stub for: _perror
10000aaac:	lea	rax, [rip + 0x590d]
10000aab3:	mov	rdx, qword ptr [rax + 0x40]
10000aab7:	lea	rsi, [rip + 0xb97] ## literal pool for: "%s"
10000aabe:	push	0x2
10000aac0:	pop	rdi
10000aac1:	xor	eax, eax
10000aac3:	call	0x10000ad8c ## symbol stub for: _err
10000aac8:	push	rbp
10000aac9:	mov	rbp, rsp
10000aacc:	push	0x2
10000aace:	pop	rdi
10000aacf:	xor	esi, esi
10000aad1:	xor	eax, eax
10000aad3:	call	0x10000ad8c ## symbol stub for: _err
10000aad8:	push	rbp
10000aad9:	mov	rbp, rsp
10000aadc:	push	0x2
10000aade:	pop	rdi
10000aadf:	xor	esi, esi
10000aae1:	xor	eax, eax
10000aae3:	call	0x10000ad8c ## symbol stub for: _err
10000aae8:	push	rbp
10000aae9:	mov	rbp, rsp
10000aaec:	push	0x2
10000aaee:	pop	rdi
10000aaef:	xor	esi, esi
10000aaf1:	xor	eax, eax
10000aaf3:	call	0x10000ad8c ## symbol stub for: _err
10000aaf8:	push	rbp
10000aaf9:	mov	rbp, rsp
10000aafc:	push	0x2
10000aafe:	pop	rdi
10000aaff:	xor	esi, esi
10000ab01:	xor	eax, eax
10000ab03:	call	0x10000ad8c ## symbol stub for: _err
10000ab08:	push	rbp
10000ab09:	mov	rbp, rsp
10000ab0c:	push	0x2
10000ab0e:	pop	rdi
10000ab0f:	xor	esi, esi
10000ab11:	xor	eax, eax
10000ab13:	call	0x10000ad8c ## symbol stub for: _err
10000ab18:	push	rbp
10000ab19:	mov	rbp, rsp
10000ab1c:	push	0x2
10000ab1e:	pop	rdi
10000ab1f:	xor	esi, esi
10000ab21:	xor	eax, eax
10000ab23:	call	0x10000ad8c ## symbol stub for: _err
10000ab28:	push	rbp
10000ab29:	mov	rbp, rsp
10000ab2c:	push	0x2
10000ab2e:	pop	rdi
10000ab2f:	xor	esi, esi
10000ab31:	xor	eax, eax
10000ab33:	call	0x10000ad8c ## symbol stub for: _err
10000ab38:	push	rbp
10000ab39:	mov	rbp, rsp
10000ab3c:	lea	rsi, [rip + 0xb69] ## literal pool for: "Radix sort error 3"
10000ab43:	push	0x2
10000ab45:	pop	rdi
10000ab46:	xor	eax, eax
10000ab48:	call	0x10000ad8c ## symbol stub for: _err
10000ab4d:	nop
10000ab4e:	nop
10000ab4f:	push	rbp
10000ab50:	mov	rbp, rsp
10000ab53:	mov	rdx, qword ptr [rip + 0x58be]
10000ab5a:	lea	rsi, [rip + 0xaf4] ## literal pool for: "%s"
10000ab61:	push	0x2
10000ab63:	pop	rdi
10000ab64:	xor	eax, eax
10000ab66:	call	0x10000ad98 ## symbol stub for: _errx
10000ab6b:	push	rbp
10000ab6c:	mov	rbp, rsp
10000ab6f:	mov	rdx, qword ptr [rip + 0x58a2]
10000ab76:	lea	rsi, [rip + 0xad8] ## literal pool for: "%s"
10000ab7d:	push	0x2
10000ab7f:	pop	rdi
10000ab80:	xor	eax, eax
10000ab82:	call	0x10000ad98 ## symbol stub for: _errx
10000ab87:	push	rbp
10000ab88:	mov	rbp, rsp
10000ab8b:	push	0x2
10000ab8d:	pop	rdi
10000ab8e:	xor	esi, esi
10000ab90:	xor	eax, eax
10000ab92:	call	0x10000ad8c ## symbol stub for: _err
10000ab97:	push	rbp
10000ab98:	mov	rbp, rsp
10000ab9b:	push	0x2
10000ab9d:	pop	rdi
10000ab9e:	xor	esi, esi
10000aba0:	xor	eax, eax
10000aba2:	call	0x10000ad8c ## symbol stub for: _err
10000aba7:	push	rbp
10000aba8:	mov	rbp, rsp
10000abab:	mov	r8, qword ptr [rip + 0x5816]
10000abb2:	lea	rsi, [rip + 0xe87] ## literal pool for: "%c:%c: %s"
10000abb9:	push	0x1
10000abbb:	pop	rdi
10000abbc:	push	0x6d
10000abbe:	pop	rdx
10000abbf:	push	0x63
10000abc1:	pop	rcx
10000abc2:	xor	eax, eax
10000abc4:	call	0x10000ad98 ## symbol stub for: _errx
10000abc9:	push	rbp
10000abca:	mov	rbp, rsp
10000abcd:	mov	rax, qword ptr [rip + 0x148c] ## literal pool symbol address: _optarg
10000abd4:	mov	rcx, qword ptr [rax]
10000abd7:	lea	rdx, [rip + 0xe0c] ## literal pool for: "-k %s"
10000abde:	push	0x2
10000abe0:	pop	rdi
10000abe1:	push	0x16
10000abe3:	pop	rsi
10000abe4:	xor	eax, eax
10000abe6:	call	0x10000ad92 ## symbol stub for: _errc
10000abeb:	push	rbp
10000abec:	mov	rbp, rsp
10000abef:	call	0x10000ad56 ## symbol stub for: ___error
10000abf4:	mov	dword ptr [rax], 0x16
10000abfa:	push	0x2
10000abfc:	pop	rdi
10000abfd:	xor	esi, esi
10000abff:	xor	eax, eax
10000ac01:	call	0x10000ad8c ## symbol stub for: _err
10000ac06:	push	rbp
10000ac07:	mov	rbp, rsp
10000ac0a:	mov	rcx, rdi
10000ac0d:	lea	rdx, [rip + 0xa41] ## literal pool for: "%s"
10000ac14:	push	0x2
10000ac16:	pop	rdi
10000ac17:	push	0x16
10000ac19:	pop	rsi
10000ac1a:	xor	eax, eax
10000ac1c:	call	0x10000ad92 ## symbol stub for: _errc
10000ac21:	push	rbp
10000ac22:	mov	rbp, rsp
10000ac25:	push	0x2
10000ac27:	pop	rdi
10000ac28:	xor	esi, esi
10000ac2a:	xor	eax, eax
10000ac2c:	call	0x10000ad8c ## symbol stub for: _err
10000ac31:	push	rbp
10000ac32:	mov	rbp, rsp
10000ac35:	lea	rsi, [rip + 0xde7] ## literal pool for: "--batch-size"
10000ac3c:	push	0x2
10000ac3e:	pop	rdi
10000ac3f:	xor	eax, eax
10000ac41:	call	0x10000ad8c ## symbol stub for: _err
10000ac46:	push	rbp
10000ac47:	mov	rbp, rsp
10000ac4a:	movsx	edx, sil
10000ac4e:	movsxd	rax, edi
10000ac51:	lea	rcx, [rip + 0x8c8]
10000ac58:	movsx	ecx, byte ptr [rax + rcx]
10000ac5c:	mov	r8, qword ptr [rip + 0x5765]
10000ac63:	lea	rsi, [rip + 0xdd6] ## literal pool for: "%c:%c: %s"
10000ac6a:	push	0x1
10000ac6c:	pop	rdi
10000ac6d:	xor	eax, eax
10000ac6f:	call	0x10000ad98 ## symbol stub for: _errx
10000ac74:	push	rbp
10000ac75:	mov	rbp, rsp
10000ac78:	movsx	edx, sil
10000ac7c:	movsx	ecx, dil
10000ac80:	mov	r8, qword ptr [rip + 0x5741]
10000ac87:	lea	rsi, [rip + 0xdb2] ## literal pool for: "%c:%c: %s"
10000ac8e:	push	0x1
10000ac90:	pop	rdi
10000ac91:	xor	eax, eax
10000ac93:	call	0x10000ad98 ## symbol stub for: _errx
10000ac98:	push	rbp
10000ac99:	mov	rbp, rsp
10000ac9c:	mov	rsi, qword ptr [rip + 0x5745]
10000aca3:	lea	rdi, [rip + 0x9ab] ## literal pool for: "%s"
10000acaa:	xor	eax, eax
10000acac:	call	0x10000afae ## symbol stub for: _warn
10000acb1:	pop	rbp
10000acb2:	ret
10000acb3:	push	rbp
10000acb4:	mov	rbp, rsp
10000acb7:	lea	rsi, [rip + 0x106e] ## literal pool for: "-k"
10000acbe:	push	0x2
10000acc0:	pop	rdi
10000acc1:	xor	eax, eax
10000acc3:	call	0x10000ad8c ## symbol stub for: _err
10000acc8:	push	rbp
10000acc9:	mov	rbp, rsp
10000accc:	mov	rsi, qword ptr [rip + 0x571d]
10000acd3:	lea	rdi, [rip + 0x97b] ## literal pool for: "%s"
10000acda:	xor	eax, eax
10000acdc:	call	0x10000afae ## symbol stub for: _warn
10000ace1:	pop	rbp
10000ace2:	ret
10000ace3:	push	rbp
10000ace4:	mov	rbp, rsp
10000ace7:	lea	rsi, [rip + 0x103e] ## literal pool for: "-k"
10000acee:	push	0x2
10000acf0:	pop	rdi
10000acf1:	xor	eax, eax
10000acf3:	call	0x10000ad8c ## symbol stub for: _err
10000acf8:	push	rbp
10000acf9:	mov	rbp, rsp
10000acfc:	lea	rsi, [rip + 0x1029] ## literal pool for: "-k"
10000ad03:	push	0x2
10000ad05:	pop	rdi
10000ad06:	xor	eax, eax
10000ad08:	call	0x10000ad8c ## symbol stub for: _err
10000ad0d:	push	rbp
10000ad0e:	mov	rbp, rsp
10000ad11:	mov	rsi, qword ptr [rip + 0x56d0]
10000ad18:	lea	rdi, [rip + 0x936] ## literal pool for: "%s"
10000ad1f:	xor	eax, eax
10000ad21:	call	0x10000afae ## symbol stub for: _warn
10000ad26:	pop	rbp
10000ad27:	ret
10000ad28:	push	rbp
10000ad29:	mov	rbp, rsp
10000ad2c:	lea	rsi, [rip + 0xff9] ## literal pool for: "-k"
10000ad33:	push	0x2
10000ad35:	pop	rdi
10000ad36:	xor	eax, eax
10000ad38:	call	0x10000ad8c ## symbol stub for: _err
