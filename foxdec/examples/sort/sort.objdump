/usr/bin/sort:
(__TEXT,__text) section
100002b1c:	push	rbp
100002b1d:	mov	rbp, rsp
100002b20:	push	r15
100002b22:	push	r14
100002b24:	push	r13
100002b26:	push	r12
100002b28:	push	rbx
100002b29:	push	rax
100002b2a:	mov	rax, qword ptr [rip + 0x94d7] ## literal pool symbol address: ___mb_cur_max
100002b31:	cmp	dword ptr [rax], 0x1
100002b34:	jne	0x100002bfb
100002b3a:	cmp	qword ptr [rip + 0xddb6], 0x0
100002b42:	jne	0x100002c05
100002b48:	mov	edi, 0x60
100002b4d:	call	0x1000078d3
100002b52:	mov	qword ptr [rip + 0xdd9f], rax
100002b59:	xor	r15d, r15d
100002b5c:	mov	qword ptr [rax + 8*r15], 0x0
100002b64:	lea	rax, [rip + 0x8975]
100002b6b:	mov	edi, dword ptr [rax + 4*r15]
100002b6f:	call	0x10000aec0 ## symbol stub for: _nl_langinfo
100002b74:	mov	r12, rax
100002b77:	lea	rax, [rip + 0xde9a]
100002b7e:	cmp	byte ptr [rax], 0x0
100002b81:	je	0x100002b97
100002b83:	lea	rdi, [rip + 0x89ec] ## literal pool for: "month[%d]=%s\n"
100002b8a:	mov	esi, r15d
100002b8d:	mov	rdx, r12
100002b90:	xor	eax, eax
100002b92:	call	0x10000aede ## symbol stub for: _printf
100002b97:	cmp	byte ptr [r12], 0x0
100002b9c:	je	0x100002be6
100002b9e:	mov	rdi, r12
100002ba1:	call	0x10000790e
100002ba6:	mov	rbx, rax
100002ba9:	mov	rdi, r12
100002bac:	call	0x10000afc2 ## symbol stub for: _strlen
100002bb1:	test	rax, rax
100002bb4:	je	0x100002bdb
100002bb6:	mov	r12, rax
100002bb9:	mov	r13d, 0x1
100002bbf:	xor	r14d, r14d
100002bc2:	movsx	edi, byte ptr [rbx + r14]
100002bc7:	call	0x10000adbe ## symbol stub for: ___toupper
100002bcc:	mov	byte ptr [rbx + r14], al
100002bd0:	mov	r14d, r13d
100002bd3:	inc	r13d
100002bd6:	cmp	r12, r14
100002bd9:	ja	0x100002bc2
100002bdb:	mov	rax, qword ptr [rip + 0xdd16]
100002be2:	mov	qword ptr [rax + 8*r15], rbx
100002be6:	inc	r15
100002be9:	cmp	r15, 0xc
100002bed:	je	0x100002c05
100002bef:	mov	rax, qword ptr [rip + 0xdd02]
100002bf6:	jmp	0x100002b5c
100002bfb:	cmp	qword ptr [rip + 0xdcfd], 0x0
100002c03:	je	0x100002c14
100002c05:	add	rsp, 0x8
100002c09:	pop	rbx
100002c0a:	pop	r12
100002c0c:	pop	r13
100002c0e:	pop	r14
100002c10:	pop	r15
100002c12:	pop	rbp
100002c13:	ret
100002c14:	mov	edi, 0x60
100002c19:	call	0x1000078d3
100002c1e:	mov	qword ptr [rip + 0xdcdb], rax
100002c25:	lea	rbx, [rip + 0x88b4]
100002c2c:	xor	r15d, r15d
100002c2f:	mov	qword ptr [rax + 8*r15], 0x0
100002c37:	mov	edi, dword ptr [rbx + 4*r15]
100002c3b:	call	0x10000aec0 ## symbol stub for: _nl_langinfo
100002c40:	mov	r13, rax
100002c43:	lea	rax, [rip + 0xddce]
100002c4a:	cmp	byte ptr [rax], 0x0
100002c4d:	je	0x100002c63
100002c4f:	lea	rdi, [rip + 0x8920] ## literal pool for: "month[%d]=%s\n"
100002c56:	mov	esi, r15d
100002c59:	mov	rdx, r13
100002c5c:	xor	eax, eax
100002c5e:	call	0x10000aede ## symbol stub for: _printf
100002c63:	cmp	byte ptr [r13], 0x0
100002c68:	je	0x100002ce1
100002c6a:	mov	rdi, r13
100002c6d:	call	0x10000afc2 ## symbol stub for: _strlen
100002c72:	mov	r12, rax
100002c75:	lea	rdi, [4*rax + 0x4]
100002c7d:	call	0x1000078d3
100002c82:	mov	r14, rax
100002c85:	mov	rdi, rax
100002c88:	mov	rsi, r13
100002c8b:	mov	rdx, r12
100002c8e:	call	0x10000ae8a ## symbol stub for: _mbstowcs
100002c93:	cmp	rax, -0x1
100002c97:	je	0x100002cd9
100002c99:	mov	dword ptr [r14 + 4*r12], 0x0
100002ca1:	test	r12, r12
100002ca4:	je	0x100002cc5
100002ca6:	mov	ebx, 0x1
100002cab:	xor	r13d, r13d
100002cae:	mov	edi, dword ptr [r14 + 4*r13]
100002cb2:	call	0x10000adbe ## symbol stub for: ___toupper
100002cb7:	mov	dword ptr [r14 + 4*r13], eax
100002cbb:	mov	r13d, ebx
100002cbe:	inc	ebx
100002cc0:	cmp	r12, r13
100002cc3:	ja	0x100002cae
100002cc5:	mov	rax, qword ptr [rip + 0xdc34]
100002ccc:	mov	qword ptr [rax + 8*r15], r14
100002cd0:	lea	rbx, [rip + 0x8809]
100002cd7:	jmp	0x100002ce1
100002cd9:	mov	rdi, r14
100002cdc:	call	0x1000078e8
100002ce1:	inc	r15
100002ce4:	cmp	r15, 0xc
100002ce8:	je	0x100002c05
100002cee:	mov	rax, qword ptr [rip + 0xdc0b]
100002cf5:	jmp	0x100002c2f
100002cfa:	push	rbp
100002cfb:	mov	rbp, rsp
100002cfe:	mov	r8, rcx
100002d01:	mov	rcx, rsi
100002d04:	mov	rax, qword ptr [rip + 0x92fd] ## literal pool symbol address: ___mb_cur_max
100002d0b:	cmp	dword ptr [rax], 0x1
100002d0e:	jne	0x100002d1d
100002d10:	add	rcx, 0x8
100002d14:	lea	rsi, [rip + 0x8869] ## literal pool for: "%s%s%s"
100002d1b:	jmp	0x100002d28
100002d1d:	add	rcx, 0x8
100002d21:	lea	rsi, [rip + 0x8863] ## literal pool for: "%s%S%s"
100002d28:	xor	eax, eax
100002d2a:	pop	rbp
100002d2b:	jmp	0x10000ae2a ## symbol stub for: _fprintf
100002d30:	push	rbp
100002d31:	mov	rbp, rsp
100002d34:	lea	rax, [rdi + 0x8]
100002d38:	pop	rbp
100002d39:	ret
100002d3a:	push	rbp
100002d3b:	mov	rbp, rsp
100002d3e:	mov	rcx, qword ptr [rip + 0x92c3] ## literal pool symbol address: ___mb_cur_max
100002d45:	mov	rdx, qword ptr [rdi]
100002d48:	lea	rax, [4*rdx]
100002d50:	cmp	dword ptr [rcx], 0x1
100002d53:	cmove	rax, rdx
100002d57:	pop	rbp
100002d58:	ret
100002d59:	push	rbp
100002d5a:	mov	rbp, rsp
100002d5d:	mov	rax, qword ptr [rip + 0x92a4] ## literal pool symbol address: ___mb_cur_max
100002d64:	mov	rcx, qword ptr [rdi]
100002d67:	cmp	dword ptr [rax], 0x1
100002d6a:	lea	rdx, [rcx + 0xa]
100002d6e:	lea	rax, [4*rcx + 0xc]
100002d76:	cmove	rax, rdx
100002d7a:	pop	rbp
100002d7b:	ret
100002d7c:	push	rbp
100002d7d:	mov	rbp, rsp
100002d80:	test	rdi, rdi
100002d83:	je	0x100002da8
100002d85:	cmp	qword ptr [rdi], rsi
100002d88:	jbe	0x100002da8
100002d8a:	mov	qword ptr [rdi], rsi
100002d8d:	mov	rax, qword ptr [rip + 0x9274] ## literal pool symbol address: ___mb_cur_max
100002d94:	cmp	dword ptr [rax], 0x1
100002d97:	jne	0x100002da0
100002d99:	mov	byte ptr [rdi + rsi + 0x8], 0x0
100002d9e:	jmp	0x100002da8
100002da0:	mov	dword ptr [rdi + 4*rsi + 0x8], 0x0
100002da8:	pop	rbp
100002da9:	ret
100002daa:	push	rbp
100002dab:	mov	rbp, rsp
100002dae:	push	r14
100002db0:	push	rbx
100002db1:	mov	rbx, rdi
100002db4:	mov	r14, qword ptr [rip + 0x924d] ## literal pool symbol address: ___mb_cur_max
100002dbb:	cmp	dword ptr [r14], 0x1
100002dbf:	lea	rax, [rdi + 0x9]
100002dc3:	lea	rdi, [4*rdi + 0xc]
100002dcb:	cmove	rdi, rax
100002dcf:	call	0x1000078d3
100002dd4:	mov	qword ptr [rax], rbx
100002dd7:	cmp	dword ptr [r14], 0x1
100002ddb:	jne	0x100002de4
100002ddd:	mov	byte ptr [rax + rbx + 0x8], 0x0
100002de2:	jmp	0x100002dec
100002de4:	mov	dword ptr [rax + 4*rbx + 0x8], 0x0
100002dec:	pop	rbx
100002ded:	pop	r14
100002def:	pop	rbp
100002df0:	ret
100002df1:	push	rbp
100002df2:	mov	rbp, rsp
100002df5:	push	r14
100002df7:	push	rbx
100002df8:	test	rdi, rdi
100002dfb:	je	0x100002e27
100002dfd:	mov	rbx, rdi
100002e00:	mov	rdi, qword ptr [rdi]
100002e03:	call	0x100002daa
100002e08:	mov	r14, rax
100002e0b:	mov	rax, qword ptr [rip + 0x91f6] ## literal pool symbol address: ___mb_cur_max
100002e12:	cmp	dword ptr [rax], 0x1
100002e15:	jne	0x100002e2c
100002e17:	mov	rdi, r14
100002e1a:	add	rdi, 0x8
100002e1e:	mov	rdx, qword ptr [rbx]
100002e21:	add	rbx, 0x8
100002e25:	jmp	0x100002e3e
100002e27:	xor	r14d, r14d
100002e2a:	jmp	0x100002e46
100002e2c:	mov	rdi, r14
100002e2f:	add	rdi, 0x8
100002e33:	mov	rdx, qword ptr [rbx]
100002e36:	add	rbx, 0x8
100002e3a:	shl	rdx, 0x2
100002e3e:	mov	rsi, rbx
100002e41:	call	0x10000aea2 ## symbol stub for: _memcpy
100002e46:	mov	rax, r14
100002e49:	pop	rbx
100002e4a:	pop	r14
100002e4c:	pop	rbp
100002e4d:	ret
100002e4e:	push	rbp
100002e4f:	mov	rbp, rsp
100002e52:	push	r15
100002e54:	push	r14
100002e56:	push	rbx
100002e57:	push	rax
100002e58:	mov	rbx, rsi
100002e5b:	test	rdi, rdi
100002e5e:	je	0x100002e94
100002e60:	mov	r15, rdi
100002e63:	mov	rdi, rbx
100002e66:	call	0x100002daa
100002e6b:	mov	r14, rax
100002e6e:	mov	rax, qword ptr [rip + 0x9193] ## literal pool symbol address: ___mb_cur_max
100002e75:	cmp	dword ptr [rax], 0x1
100002e78:	jne	0x100002e9e
100002e7a:	test	rbx, rbx
100002e7d:	je	0x100002eb4
100002e7f:	xor	eax, eax
100002e81:	mov	cl, byte ptr [r15 + 4*rax]
100002e85:	mov	byte ptr [r14 + rax + 0x8], cl
100002e8a:	inc	rax
100002e8d:	cmp	rbx, rax
100002e90:	jne	0x100002e81
100002e92:	jmp	0x100002eb4
100002e94:	test	rbx, rbx
100002e97:	je	0x100002ec2
100002e99:	xor	r14d, r14d
100002e9c:	jmp	0x100002eb4
100002e9e:	mov	rdi, r14
100002ea1:	add	rdi, 0x8
100002ea5:	shl	rbx, 0x2
100002ea9:	mov	rsi, r15
100002eac:	mov	rdx, rbx
100002eaf:	call	0x10000aea2 ## symbol stub for: _memcpy
100002eb4:	mov	rax, r14
100002eb7:	add	rsp, 0x8
100002ebb:	pop	rbx
100002ebc:	pop	r14
100002ebe:	pop	r15
100002ec0:	pop	rbp
100002ec1:	ret
100002ec2:	xor	edi, edi
100002ec4:	add	rsp, 0x8
100002ec8:	pop	rbx
100002ec9:	pop	r14
100002ecb:	pop	r15
100002ecd:	pop	rbp
100002ece:	jmp	0x100002daa
100002ed3:	push	rbp
100002ed4:	mov	rbp, rsp
100002ed7:	push	r15
100002ed9:	push	r14
100002edb:	push	r13
100002edd:	push	r12
100002edf:	push	rbx
100002ee0:	sub	rsp, 0xa8
100002ee7:	mov	rbx, rsi
100002eea:	mov	r15, rdi
100002eed:	mov	rax, qword ptr [rip + 0x911c] ## literal pool symbol address: ___stack_chk_guard
100002ef4:	mov	rax, qword ptr [rax]
100002ef7:	mov	qword ptr [rbp - 0x30], rax
100002efb:	mov	rdi, rsi
100002efe:	call	0x100002daa
100002f03:	mov	r14, rax
100002f06:	mov	qword ptr [rbp - 0xc0], r15
100002f0d:	test	r15, r15
100002f10:	je	0x10000304e
100002f16:	mov	rax, qword ptr [rip + 0x90eb] ## literal pool symbol address: ___mb_cur_max
100002f1d:	mov	eax, dword ptr [rax]
100002f1f:	cmp	eax, 0x1
100002f22:	jne	0x100002f3f
100002f24:	mov	rdi, r14
100002f27:	add	rdi, 0x8
100002f2b:	mov	rsi, qword ptr [rbp - 0xc0]
100002f32:	mov	rdx, rbx
100002f35:	call	0x10000aea2 ## symbol stub for: _memcpy
100002f3a:	jmp	0x10000304e
100002f3f:	xorps	xmm0, xmm0
100002f42:	movaps	xmmword ptr [rbp - 0x40], xmm0
100002f46:	movaps	xmmword ptr [rbp - 0x50], xmm0
100002f4a:	movaps	xmmword ptr [rbp - 0x60], xmm0
100002f4e:	movaps	xmmword ptr [rbp - 0x70], xmm0
100002f52:	movaps	xmmword ptr [rbp - 0x80], xmm0
100002f56:	movaps	xmmword ptr [rbp - 0x90], xmm0
100002f5d:	movaps	xmmword ptr [rbp - 0xa0], xmm0
100002f64:	movaps	xmmword ptr [rbp - 0xb0], xmm0
100002f6b:	test	rbx, rbx
100002f6e:	je	0x10000303f
100002f74:	mov	qword ptr [rbp - 0xd0], r14
100002f7b:	add	r14, 0x8
100002f7f:	mov	qword ptr [rbp - 0xb8], r14
100002f86:	mov	r12d, 0x1
100002f8c:	xor	ecx, ecx
100002f8e:	mov	qword ptr [rbp - 0xc8], rcx
100002f95:	xor	r13d, r13d
100002f98:	cdqe
100002f9a:	mov	r15, rbx
100002f9d:	sub	rbx, r13
100002fa0:	cmp	rbx, rax
100002fa3:	cmovae	rbx, rax
100002fa7:	mov	rax, qword ptr [rbp - 0xc0]
100002fae:	lea	r14, [rax + r13]
100002fb2:	mov	rdi, r14
100002fb5:	mov	rsi, rbx
100002fb8:	lea	rdx, [rbp - 0xb0]
100002fbf:	call	0x10000ae7e ## symbol stub for: _mbrlen
100002fc4:	mov	rbx, rax
100002fc7:	add	rax, 0x2
100002fcb:	cmp	rax, 0x2
100002fcf:	ja	0x100002fe8
100002fd1:	movzx	eax, byte ptr [r14]
100002fd5:	mov	rcx, qword ptr [rbp - 0xb8]
100002fdc:	mov	dword ptr [rcx + 4*r12 - 0x4], eax
100002fe1:	mov	ebx, 0x1
100002fe6:	jmp	0x100003012
100002fe8:	mov	rax, qword ptr [rbp - 0xb8]
100002fef:	mov	rcx, qword ptr [rbp - 0xc8]
100002ff6:	lea	rdi, [rax + rcx]
100002ffa:	mov	rsi, r14
100002ffd:	mov	rdx, rbx
100003000:	lea	rcx, [rbp - 0xb0]
100003007:	call	0x10000ae84 ## symbol stub for: _mbrtowc
10000300c:	cmp	rax, -0x2
100003010:	jae	0x100003073
100003012:	add	r13, rbx
100003015:	cmp	r13, r15
100003018:	jae	0x100003036
10000301a:	mov	rbx, r15
10000301d:	mov	rax, qword ptr [rip + 0x8fe4] ## literal pool symbol address: ___mb_cur_max
100003024:	mov	eax, dword ptr [rax]
100003026:	inc	r12
100003029:	add	qword ptr [rbp - 0xc8], 0x4
100003031:	jmp	0x100002f98
100003036:	mov	r14, qword ptr [rbp - 0xd0]
10000303d:	jmp	0x100003042
10000303f:	xor	r12d, r12d
100003042:	mov	qword ptr [r14], r12
100003045:	mov	dword ptr [r14 + 4*r12 + 0x8], 0x0
10000304e:	mov	rax, qword ptr [rip + 0x8fbb] ## literal pool symbol address: ___stack_chk_guard
100003055:	mov	rax, qword ptr [rax]
100003058:	cmp	rax, qword ptr [rbp - 0x30]
10000305c:	jne	0x100003078
10000305e:	mov	rax, r14
100003061:	add	rsp, 0xa8
100003068:	pop	rbx
100003069:	pop	r12
10000306b:	pop	r13
10000306d:	pop	r14
10000306f:	pop	r15
100003071:	pop	rbp
100003072:	ret
100003073:	call	0x10000a8d4
100003078:	call	0x10000adb8 ## symbol stub for: ___stack_chk_fail
10000307d:	push	rbp
10000307e:	mov	rbp, rsp
100003081:	test	rdi, rdi
100003084:	je	0x10000308c
100003086:	pop	rbp
100003087:	jmp	0x1000078e8
10000308c:	pop	rbp
10000308d:	ret
10000308e:	push	rbp
10000308f:	mov	rbp, rsp
100003092:	push	r14
100003094:	push	rbx
100003095:	mov	r14, rdi
100003098:	mov	rbx, qword ptr [rsi]
10000309b:	mov	rax, qword ptr [rdi]
10000309e:	cmp	rbx, rax
1000030a1:	cmova	rbx, rax
1000030a5:	mov	qword ptr [rdi], rbx
1000030a8:	mov	rax, qword ptr [rip + 0x8f59] ## literal pool symbol address: ___mb_cur_max
1000030af:	cmp	dword ptr [rax], 0x1
1000030b2:	jne	0x1000030cf
1000030b4:	lea	rdi, [r14 + 0x8]
1000030b8:	add	rsi, 0x8
1000030bc:	mov	rdx, rbx
1000030bf:	call	0x10000aea2 ## symbol stub for: _memcpy
1000030c4:	mov	rax, qword ptr [r14]
1000030c7:	mov	byte ptr [r14 + rax + 0x8], 0x0
1000030cd:	jmp	0x1000030f0
1000030cf:	lea	rdi, [r14 + 0x8]
1000030d3:	add	rsi, 0x8
1000030d7:	lea	rdx, [4*rbx + 0x4]
1000030df:	call	0x10000aea2 ## symbol stub for: _memcpy
1000030e4:	mov	rax, qword ptr [r14]
1000030e7:	mov	dword ptr [r14 + 4*rax + 0x8], 0x0
1000030f0:	mov	rax, rbx
1000030f3:	pop	rbx
1000030f4:	pop	r14
1000030f6:	pop	rbp
1000030f7:	ret
1000030f8:	push	rbp
1000030f9:	mov	rbp, rsp
1000030fc:	push	rbx
1000030fd:	push	rax
1000030fe:	mov	rax, rdx
100003101:	mov	rbx, rdi
100003104:	mov	rdx, qword ptr [rsi]
100003107:	mov	rcx, qword ptr [rdi]
10000310a:	cmp	rdx, rcx
10000310d:	cmova	rdx, rcx
100003111:	cmp	rdx, rax
100003114:	cmova	rdx, rax
100003118:	mov	qword ptr [rdi], rdx
10000311b:	mov	rax, qword ptr [rip + 0x8ee6] ## literal pool symbol address: ___mb_cur_max
100003122:	cmp	dword ptr [rax], 0x1
100003125:	jne	0x10000313e
100003127:	lea	rdi, [rbx + 0x8]
10000312b:	add	rsi, 0x8
10000312f:	call	0x10000aea2 ## symbol stub for: _memcpy
100003134:	mov	rax, qword ptr [rbx]
100003137:	mov	byte ptr [rbx + rax + 0x8], 0x0
10000313c:	jmp	0x10000315e
10000313e:	lea	rdi, [rbx + 0x8]
100003142:	add	rsi, 0x8
100003146:	lea	rdx, [4*rdx + 0x4]
10000314e:	call	0x10000aea2 ## symbol stub for: _memcpy
100003153:	mov	rax, qword ptr [rbx]
100003156:	mov	dword ptr [rbx + 4*rax + 0x8], 0x0
10000315e:	mov	rax, rbx
100003161:	add	rsp, 0x8
100003165:	pop	rbx
100003166:	pop	rbp
100003167:	ret
100003168:	push	rbp
100003169:	mov	rbp, rsp
10000316c:	push	rbx
10000316d:	push	rax
10000316e:	mov	rax, rdx
100003171:	mov	rbx, rdi
100003174:	mov	rdx, qword ptr [rsi]
100003177:	sub	rdx, rax
10000317a:	jbe	0x1000031b6
10000317c:	mov	rdi, qword ptr [rbx]
10000317f:	cmp	rdx, rdi
100003182:	cmova	rdx, rdi
100003186:	cmp	rdx, rcx
100003189:	cmova	rdx, rcx
10000318d:	mov	qword ptr [rbx], rdx
100003190:	mov	rcx, qword ptr [rip + 0x8e71] ## literal pool symbol address: ___mb_cur_max
100003197:	cmp	dword ptr [rcx], 0x1
10000319a:	jne	0x1000031c6
10000319c:	lea	rdi, [rbx + 0x8]
1000031a0:	add	rsi, rax
1000031a3:	add	rsi, 0x8
1000031a7:	call	0x10000aea2 ## symbol stub for: _memcpy
1000031ac:	mov	rax, qword ptr [rbx]
1000031af:	mov	byte ptr [rbx + rax + 0x8], 0x0
1000031b4:	jmp	0x1000031e6
1000031b6:	mov	dword ptr [rbx + 0x8], 0x0
1000031bd:	mov	qword ptr [rbx], 0x0
1000031c4:	jmp	0x1000031e6
1000031c6:	lea	rdi, [rbx + 0x8]
1000031ca:	lea	rsi, [rsi + 4*rax]
1000031ce:	add	rsi, 0x8
1000031d2:	shl	rdx, 0x2
1000031d6:	call	0x10000aea2 ## symbol stub for: _memcpy
1000031db:	mov	rax, qword ptr [rbx]
1000031de:	mov	dword ptr [rbx + 4*rax + 0x8], 0x0
1000031e6:	mov	rax, rbx
1000031e9:	add	rsp, 0x8
1000031ed:	pop	rbx
1000031ee:	pop	rbp
1000031ef:	ret
1000031f0:	push	rbp
1000031f1:	mov	rbp, rsp
1000031f4:	push	r15
1000031f6:	push	r14
1000031f8:	push	r13
1000031fa:	push	r12
1000031fc:	push	rbx
1000031fd:	push	rax
1000031fe:	mov	r14, rsi
100003201:	mov	r15, rdi
100003204:	mov	rax, qword ptr [rip + 0x8dfd] ## literal pool symbol address: ___mb_cur_max
10000320b:	cmp	dword ptr [rax], 0x1
10000320e:	jne	0x100003246
100003210:	mov	r12, qword ptr [r15]
100003213:	add	r15, 0x8
100003217:	test	dl, dl
100003219:	je	0x1000032c6
10000321f:	inc	r12
100003222:	mov	edx, 0x1
100003227:	mov	rdi, r15
10000322a:	mov	rsi, r12
10000322d:	mov	rcx, r14
100003230:	call	0x10000ae48 ## symbol stub for: _fwrite
100003235:	mov	rbx, r12
100003238:	test	rax, rax
10000323b:	jne	0x100003307
100003241:	call	0x10000a8e9
100003246:	xor	eax, eax
100003248:	test	dl, dl
10000324a:	mov	edi, 0xa
10000324f:	cmovne	edi, eax
100003252:	call	0x10000add0 ## symbol stub for: _btowc
100003257:	cmp	qword ptr [r15], 0x0
10000325b:	je	0x1000032ef
100003261:	mov	dword ptr [rbp - 0x2c], eax
100003264:	lea	r13, [rip + 0x82a5]
10000326b:	lea	r12, [rip + 0x82ae]
100003272:	xor	ebx, ebx
100003274:	cmp	dword ptr [r15 + 4*rbx + 0x8], 0x0
10000327a:	je	0x10000329d
10000327c:	lea	rdx, [r15 + 4*rbx]
100003280:	add	rdx, 0x8
100003284:	mov	rdi, r14
100003287:	mov	rsi, r12
10000328a:	xor	eax, eax
10000328c:	call	0x10000ae42 ## symbol stub for: _fwprintf
100003291:	test	eax, eax
100003293:	jle	0x100003319
100003299:	mov	ecx, eax
10000329b:	jmp	0x1000032b6
10000329d:	mov	rdi, r14
1000032a0:	mov	rsi, r13
1000032a3:	xor	edx, edx
1000032a5:	xor	eax, eax
1000032a7:	call	0x10000ae42 ## symbol stub for: _fwprintf
1000032ac:	mov	ecx, 0x1
1000032b1:	cmp	eax, 0x1
1000032b4:	jne	0x10000331e
1000032b6:	add	rbx, rcx
1000032b9:	cmp	rbx, qword ptr [r15]
1000032bc:	jb	0x100003274
1000032be:	inc	rbx
1000032c1:	mov	eax, dword ptr [rbp - 0x2c]
1000032c4:	jmp	0x1000032f4
1000032c6:	mov	byte ptr [r15 + r12], 0xa
1000032cb:	lea	rbx, [r12 + 0x1]
1000032d0:	mov	edx, 0x1
1000032d5:	mov	rdi, r15
1000032d8:	mov	rsi, rbx
1000032db:	mov	rcx, r14
1000032de:	call	0x10000ae48 ## symbol stub for: _fwrite
1000032e3:	test	rax, rax
1000032e6:	je	0x100003323
1000032e8:	mov	byte ptr [r15 + r12], 0x0
1000032ed:	jmp	0x100003307
1000032ef:	mov	ebx, 0x1
1000032f4:	lea	rsi, [rip + 0x8215]
1000032fb:	mov	rdi, r14
1000032fe:	mov	edx, eax
100003300:	xor	eax, eax
100003302:	call	0x10000ae42 ## symbol stub for: _fwprintf
100003307:	mov	rax, rbx
10000330a:	add	rsp, 0x8
10000330e:	pop	rbx
10000330f:	pop	r12
100003311:	pop	r13
100003313:	pop	r14
100003315:	pop	r15
100003317:	pop	rbp
100003318:	ret
100003319:	call	0x10000a919
10000331e:	call	0x10000a909
100003323:	call	0x10000a8f9
100003328:	push	rbp
100003329:	mov	rbp, rsp
10000332c:	push	r15
10000332e:	push	r14
100003330:	push	r13
100003332:	push	r12
100003334:	push	rbx
100003335:	push	rax
100003336:	mov	r13, rcx
100003339:	mov	ebx, edx
10000333b:	mov	r15, rsi
10000333e:	mov	r14, rdi
100003341:	test	bl, bl
100003343:	je	0x100003377
100003345:	xor	edi, edi
100003347:	call	0x10000add0 ## symbol stub for: _btowc
10000334c:	mov	r12d, eax
10000334f:	mov	qword ptr [r15], 0x0
100003356:	mov	rdi, r14
100003359:	call	0x10000adfa ## symbol stub for: _feof
10000335e:	test	eax, eax
100003360:	je	0x10000340b
100003366:	xor	eax, eax
100003368:	add	rsp, 0x8
10000336c:	pop	rbx
10000336d:	pop	r12
10000336f:	pop	r13
100003371:	pop	r14
100003373:	pop	r15
100003375:	pop	rbp
100003376:	ret
100003377:	mov	edi, 0xa
10000337c:	call	0x10000add0 ## symbol stub for: _btowc
100003381:	mov	r12d, eax
100003384:	mov	rax, qword ptr [rip + 0x8c7d] ## literal pool symbol address: ___mb_cur_max
10000338b:	mov	eax, dword ptr [rax]
10000338d:	cmp	eax, 0x2
100003390:	jl	0x1000033c8
100003392:	mov	rdi, r14
100003395:	mov	rsi, r15
100003398:	call	0x10000ae1e ## symbol stub for: _fgetwln
10000339d:	test	rax, rax
1000033a0:	je	0x10000354b
1000033a6:	mov	rsi, qword ptr [r15]
1000033a9:	test	rsi, rsi
1000033ac:	je	0x100003560
1000033b2:	cmp	dword ptr [rax + 4*rsi - 0x4], r12d
1000033b7:	jne	0x100003562
1000033bd:	dec	rsi
1000033c0:	mov	qword ptr [r15], rsi
1000033c3:	jmp	0x100003562
1000033c8:	cmp	eax, 0x1
1000033cb:	jne	0x10000334f
1000033cd:	test	bl, bl
1000033cf:	jne	0x10000334f
1000033d5:	mov	rdi, r14
1000033d8:	mov	rsi, r15
1000033db:	call	0x10000ae12 ## symbol stub for: _fgetln
1000033e0:	test	rax, rax
1000033e3:	je	0x100003567
1000033e9:	mov	rsi, qword ptr [r15]
1000033ec:	test	rsi, rsi
1000033ef:	je	0x1000035a0
1000033f5:	cmp	byte ptr [rax + rsi - 0x1], 0xa
1000033fa:	jne	0x1000035a2
100003400:	dec	rsi
100003403:	mov	qword ptr [r15], rsi
100003406:	jmp	0x1000035a2
10000340b:	mov	rax, qword ptr [r13 + 0x8]
10000340f:	cmp	rax, 0x3
100003413:	jae	0x100003437
100003415:	lea	rcx, [rax + 0x100]
10000341c:	mov	qword ptr [r13 + 0x8], rcx
100003420:	mov	rdi, qword ptr [r13]
100003424:	lea	rsi, [4*rax + 0x400]
10000342c:	call	0x1000078f9
100003431:	mov	qword ptr [r13], rax
100003435:	jmp	0x10000343b
100003437:	mov	rax, qword ptr [r13]
10000343b:	mov	rcx, qword ptr [r15]
10000343e:	mov	dword ptr [rax + 4*rcx], 0x0
100003445:	mov	rax, qword ptr [rip + 0x8bbc] ## literal pool symbol address: ___mb_cur_max
10000344c:	mov	ebx, dword ptr [rax]
10000344e:	mov	rdi, r14
100003451:	call	0x10000adfa ## symbol stub for: _feof
100003456:	cmp	ebx, 0x1
100003459:	jne	0x1000034d3
10000345b:	test	eax, eax
10000345d:	jne	0x100003586
100003463:	mov	rdi, r14
100003466:	call	0x10000ae0c ## symbol stub for: _fgetc
10000346b:	cmp	eax, -0x1
10000346e:	je	0x10000357c
100003474:	mov	ebx, eax
100003476:	cmp	eax, r12d
100003479:	je	0x100003586
10000347f:	mov	rdx, qword ptr [r15]
100003482:	lea	rcx, [rdx + 0x1]
100003486:	mov	rax, qword ptr [r13 + 0x8]
10000348a:	cmp	rcx, rax
10000348d:	jae	0x100003495
10000348f:	mov	rax, qword ptr [r13]
100003493:	jmp	0x1000034bc
100003495:	lea	rcx, [rax + 0x100]
10000349c:	mov	qword ptr [r13 + 0x8], rcx
1000034a0:	mov	rdi, qword ptr [r13]
1000034a4:	lea	rsi, [4*rax + 0x400]
1000034ac:	call	0x1000078f9
1000034b1:	mov	qword ptr [r13], rax
1000034b5:	mov	rdx, qword ptr [r15]
1000034b8:	lea	rcx, [rdx + 0x1]
1000034bc:	mov	dword ptr [rax + 4*rdx], ebx
1000034bf:	mov	qword ptr [r15], rcx
1000034c2:	mov	dword ptr [rax + 4*rcx], 0x0
1000034c9:	mov	rdi, r14
1000034cc:	call	0x10000adfa ## symbol stub for: _feof
1000034d1:	jmp	0x10000345b
1000034d3:	test	eax, eax
1000034d5:	jne	0x100003586
1000034db:	mov	rdi, r14
1000034de:	call	0x10000ae18 ## symbol stub for: _fgetwc
1000034e3:	cmp	eax, -0x1
1000034e6:	je	0x10000357c
1000034ec:	mov	ebx, eax
1000034ee:	cmp	eax, r12d
1000034f1:	je	0x100003586
1000034f7:	mov	rdx, qword ptr [r15]
1000034fa:	lea	rcx, [rdx + 0x1]
1000034fe:	mov	rax, qword ptr [r13 + 0x8]
100003502:	cmp	rcx, rax
100003505:	jae	0x10000350d
100003507:	mov	rax, qword ptr [r13]
10000350b:	jmp	0x100003534
10000350d:	lea	rcx, [rax + 0x100]
100003514:	mov	qword ptr [r13 + 0x8], rcx
100003518:	mov	rdi, qword ptr [r13]
10000351c:	lea	rsi, [4*rax + 0x400]
100003524:	call	0x1000078f9
100003529:	mov	qword ptr [r13], rax
10000352d:	mov	rdx, qword ptr [r15]
100003530:	lea	rcx, [rdx + 0x1]
100003534:	mov	dword ptr [rax + 4*rdx], ebx
100003537:	mov	qword ptr [r15], rcx
10000353a:	mov	dword ptr [rax + 4*rcx], 0x0
100003541:	mov	rdi, r14
100003544:	call	0x10000adfa ## symbol stub for: _feof
100003549:	jmp	0x1000034d3
10000354b:	mov	rdi, r14
10000354e:	call	0x10000adfa ## symbol stub for: _feof
100003553:	test	eax, eax
100003555:	jne	0x100003366
10000355b:	call	0x10000a929
100003560:	xor	esi, esi
100003562:	mov	rdi, rax
100003565:	jmp	0x10000358d
100003567:	mov	rdi, r14
10000356a:	call	0x10000adfa ## symbol stub for: _feof
10000356f:	test	eax, eax
100003571:	jne	0x100003366
100003577:	call	0x10000a939
10000357c:	cmp	qword ptr [r15], 0x0
100003580:	je	0x100003366
100003586:	mov	rdi, qword ptr [r13]
10000358a:	mov	rsi, qword ptr [r15]
10000358d:	add	rsp, 0x8
100003591:	pop	rbx
100003592:	pop	r12
100003594:	pop	r13
100003596:	pop	r14
100003598:	pop	r15
10000359a:	pop	rbp
10000359b:	jmp	0x100002e4e
1000035a0:	xor	esi, esi
1000035a2:	mov	rdi, rax
1000035a5:	add	rsp, 0x8
1000035a9:	pop	rbx
1000035aa:	pop	r12
1000035ac:	pop	r13
1000035ae:	pop	r14
1000035b0:	pop	r15
1000035b2:	pop	rbp
1000035b3:	jmp	0x100002ed3
1000035b8:	push	rbp
1000035b9:	mov	rbp, rsp
1000035bc:	push	r15
1000035be:	push	r14
1000035c0:	push	rbx
1000035c1:	push	rax
1000035c2:	mov	rbx, qword ptr [rdi]
1000035c5:	mov	r15, qword ptr [rsi]
1000035c8:	sub	rbx, rdx
1000035cb:	jbe	0x100003607
1000035cd:	mov	eax, 0x1
1000035d2:	sub	r15, rdx
1000035d5:	jbe	0x10000364d
1000035d7:	cmp	r15, rbx
1000035da:	mov	r14, rbx
1000035dd:	cmovb	r14, r15
1000035e1:	cmp	r14, rcx
1000035e4:	cmova	r14, rcx
1000035e8:	mov	rax, qword ptr [rip + 0x8a19] ## literal pool symbol address: ___mb_cur_max
1000035ef:	cmp	dword ptr [rax], 0x1
1000035f2:	jne	0x10000360e
1000035f4:	add	rdi, rdx
1000035f7:	add	rdi, 0x8
1000035fb:	add	rsi, rdx
1000035fe:	add	rsi, 0x8
100003602:	mov	rdx, r14
100003605:	jmp	0x100003626
100003607:	cmp	rdx, r15
10000360a:	sbb	eax, eax
10000360c:	jmp	0x10000364d
10000360e:	lea	rdi, [rdi + 4*rdx]
100003612:	add	rdi, 0x8
100003616:	lea	rsi, [rsi + 4*rdx]
10000361a:	add	rsi, 0x8
10000361e:	lea	rdx, [4*r14]
100003626:	call	0x10000ae9c ## symbol stub for: _memcmp
10000362b:	test	eax, eax
10000362d:	jne	0x10000364d
10000362f:	cmp	rbx, r15
100003632:	jae	0x10000363e
100003634:	mov	eax, 0xffffffff
100003639:	cmp	rbx, r14
10000363c:	jb	0x10000364d
10000363e:	xor	eax, eax
100003640:	cmp	r15, r14
100003643:	jae	0x10000364d
100003645:	xor	eax, eax
100003647:	cmp	r15, rbx
10000364a:	setb	al
10000364d:	add	rsp, 0x8
100003651:	pop	rbx
100003652:	pop	r14
100003654:	pop	r15
100003656:	pop	rbp
100003657:	ret
100003658:	push	rbp
100003659:	mov	rbp, rsp
10000365c:	push	r14
10000365e:	push	rbx
10000365f:	mov	r14, qword ptr [rdi]
100003662:	mov	rbx, qword ptr [rsi]
100003665:	sub	r14, rdx
100003668:	sub	rbx, rdx
10000366b:	cmp	rbx, r14
10000366e:	mov	rcx, r14
100003671:	cmovb	rcx, rbx
100003675:	call	0x1000035b8
10000367a:	test	eax, eax
10000367c:	jne	0x100003690
10000367e:	mov	eax, 0xffffffff
100003683:	cmp	r14, rbx
100003686:	jb	0x100003690
100003688:	xor	eax, eax
10000368a:	cmp	rbx, r14
10000368d:	setb	al
100003690:	pop	rbx
100003691:	pop	r14
100003693:	pop	rbp
100003694:	ret
100003695:	push	rbp
100003696:	mov	rbp, rsp
100003699:	test	rdx, rdx
10000369c:	je	0x1000036df
10000369e:	mov	rax, qword ptr [rip + 0x8963] ## literal pool symbol address: ___mb_cur_max
1000036a5:	mov	r8d, dword ptr [rax]
1000036a8:	xor	eax, eax
1000036aa:	cmp	r8d, 0x1
1000036ae:	setne	al
1000036b1:	lea	r9, [rax + 2*rax]
1000036b5:	inc	r9
1000036b8:	xor	ecx, ecx
1000036ba:	cmp	r8d, 0x1
1000036be:	jne	0x1000036cb
1000036c0:	movzx	eax, byte ptr [rdi + rcx]
1000036c4:	movzx	r10d, byte ptr [rsi + rcx]
1000036c9:	jmp	0x1000036d2
1000036cb:	mov	eax, dword ptr [rdi + rcx]
1000036ce:	mov	r10d, dword ptr [rsi + rcx]
1000036d2:	sub	eax, r10d
1000036d5:	jne	0x1000036e1
1000036d7:	add	rcx, r9
1000036da:	dec	rdx
1000036dd:	jne	0x1000036ba
1000036df:	xor	eax, eax
1000036e1:	pop	rbp
1000036e2:	ret
1000036e3:	push	rbp
1000036e4:	mov	rbp, rsp
1000036e7:	push	r15
1000036e9:	push	r14
1000036eb:	push	r13
1000036ed:	push	r12
1000036ef:	push	rbx
1000036f0:	sub	rsp, 0x48
1000036f4:	mov	r9, qword ptr [rdi]
1000036f7:	mov	r8, qword ptr [rsi]
1000036fa:	sub	r9, rdx
1000036fd:	jbe	0x10000375c
1000036ff:	mov	ebx, 0x1
100003704:	sub	r8, rdx
100003707:	jbe	0x100003905
10000370d:	mov	rax, qword ptr [rip + 0x88f4] ## literal pool symbol address: ___mb_cur_max
100003714:	cmp	dword ptr [rax], 0x1
100003717:	jne	0x100003766
100003719:	lea	r13, [rdi + rdx]
10000371d:	add	r13, 0x8
100003721:	lea	r12, [rsi + rdx]
100003725:	add	r12, 0x8
100003729:	cmp	byte ptr [rip + 0xd2c4], 0x0
100003730:	je	0x10000391b
100003736:	mov	rdi, r13
100003739:	mov	rsi, r12
10000373c:	cmp	r9, r8
10000373f:	jbe	0x1000039eb
100003745:	mov	rdx, r8
100003748:	call	0x10000ae9c ## symbol stub for: _memcmp
10000374d:	test	eax, eax
10000374f:	mov	ebx, 0x1
100003754:	cmovne	ebx, eax
100003757:	jmp	0x10000390a
10000375c:	cmp	rdx, r8
10000375f:	sbb	ebx, ebx
100003761:	jmp	0x10000390a
100003766:	cmp	r9, r8
100003769:	mov	rcx, r9
10000376c:	cmova	rcx, r8
100003770:	test	rcx, rcx
100003773:	je	0x1000038f3
100003779:	lea	rsi, [rsi + 4*rdx]
10000377d:	add	rsi, 0xc
100003781:	lea	rbx, [rdi + 4*rdx]
100003785:	add	rbx, 0xc
100003789:	lea	rdi, [rdi + 4*rdx]
10000378d:	add	rdi, 0x8
100003791:	mov	rdx, rcx
100003794:	neg	rdx
100003797:	xor	r13d, r13d
10000379a:	cmp	r13, rcx
10000379d:	jae	0x1000038f3
1000037a3:	lea	r14, [rsi + 4*r13]
1000037a7:	lea	r15, [rbx + 4*r13]
1000037ab:	lea	r12, [r13 + 0x1]
1000037af:	cmp	dword ptr [rdi + 4*r13], 0x0
1000037b4:	mov	eax, dword ptr [rsi + 4*r13 - 0x4]
1000037b9:	jne	0x1000037db
1000037bb:	test	eax, eax
1000037bd:	jne	0x100003a12
1000037c3:	inc	r13
1000037c6:	add	r14, 0x4
1000037ca:	add	r15, 0x4
1000037ce:	inc	r12
1000037d1:	cmp	rcx, r13
1000037d4:	jne	0x1000037af
1000037d6:	jmp	0x1000038f3
1000037db:	test	eax, eax
1000037dd:	je	0x100003905
1000037e3:	mov	qword ptr [rbp - 0x70], rdx
1000037e7:	mov	qword ptr [rbp - 0x50], rdi
1000037eb:	mov	qword ptr [rbp - 0x60], rbx
1000037ef:	mov	qword ptr [rbp - 0x30], rsi
1000037f3:	mov	qword ptr [rbp - 0x68], rcx
1000037f7:	mov	qword ptr [rbp - 0x38], r9
1000037fb:	mov	qword ptr [rbp - 0x40], r8
1000037ff:	lea	rbx, [r15 - 0x4]
100003803:	lea	rax, [r14 - 0x4]
100003807:	mov	qword ptr [rbp - 0x48], rax
10000380b:	call	0x10000ada6 ## symbol stub for: ___error
100003810:	mov	dword ptr [rax], 0x0
100003816:	mov	qword ptr [rbp - 0x58], rbx
10000381a:	mov	rdi, rbx
10000381d:	mov	rsi, qword ptr [rbp - 0x48]
100003821:	call	0x10000b016 ## symbol stub for: _wcscoll
100003826:	mov	ebx, eax
100003828:	call	0x10000ada6 ## symbol stub for: ___error
10000382d:	cmp	dword ptr [rax], 0x5c
100003830:	jne	0x100003897
100003832:	call	0x10000ada6 ## symbol stub for: ___error
100003837:	mov	dword ptr [rax], 0x0
10000383d:	mov	rdi, qword ptr [rbp - 0x58]
100003841:	mov	rsi, qword ptr [rbp - 0x48]
100003845:	call	0x10000b010 ## symbol stub for: _wcscmp
10000384a:	mov	ebx, eax
10000384c:	call	0x10000ada6 ## symbol stub for: ___error
100003851:	cmp	dword ptr [rax], 0x0
100003854:	je	0x100003897
100003856:	mov	rdi, qword ptr [rbp - 0x50]
10000385a:	mov	ebx, dword ptr [rdi + 4*r13]
10000385e:	mov	rsi, qword ptr [rbp - 0x30]
100003862:	mov	eax, dword ptr [rsi + 4*r13 - 0x4]
100003867:	test	ebx, ebx
100003869:	mov	r8, qword ptr [rbp - 0x40]
10000386d:	mov	r9, qword ptr [rbp - 0x38]
100003871:	je	0x100003891
100003873:	xor	edx, edx
100003875:	test	eax, eax
100003877:	je	0x100003905
10000387d:	sub	ebx, eax
10000387f:	jne	0x1000038a7
100003881:	mov	ebx, dword ptr [r15 + rdx]
100003885:	mov	eax, dword ptr [r14 + rdx]
100003889:	add	rdx, 0x4
10000388d:	test	ebx, ebx
10000388f:	jne	0x100003875
100003891:	neg	eax
100003893:	sbb	ebx, ebx
100003895:	jmp	0x1000038a7
100003897:	mov	r8, qword ptr [rbp - 0x40]
10000389b:	mov	r9, qword ptr [rbp - 0x38]
10000389f:	mov	rsi, qword ptr [rbp - 0x30]
1000038a3:	mov	rdi, qword ptr [rbp - 0x50]
1000038a7:	test	ebx, ebx
1000038a9:	mov	rdx, qword ptr [rbp - 0x70]
1000038ad:	jne	0x10000390a
1000038af:	mov	rcx, qword ptr [rbp - 0x68]
1000038b3:	cmp	r13, rcx
1000038b6:	mov	rbx, qword ptr [rbp - 0x60]
1000038ba:	jae	0x1000038f3
1000038bc:	mov	r13, r12
1000038bf:	cmp	dword ptr [rdi + 4*r13 - 0x4], 0x0
1000038c5:	mov	eax, dword ptr [rsi + 4*r13 - 0x8]
1000038ca:	je	0x1000038e2
1000038cc:	test	eax, eax
1000038ce:	je	0x100003905
1000038d0:	lea	rax, [rdx + r13]
1000038d4:	inc	rax
1000038d7:	inc	r13
1000038da:	cmp	rax, 0x1
1000038de:	jne	0x1000038bf
1000038e0:	jmp	0x1000038f3
1000038e2:	test	eax, eax
1000038e4:	jne	0x100003a12
1000038ea:	cmp	r13, rcx
1000038ed:	jb	0x10000379a
1000038f3:	xor	eax, eax
1000038f5:	cmp	r9, r8
1000038f8:	seta	al
1000038fb:	mov	ebx, 0xffffffff
100003900:	cmovae	ebx, eax
100003903:	jmp	0x10000390a
100003905:	mov	ebx, 0x1
10000390a:	mov	eax, ebx
10000390c:	add	rsp, 0x48
100003910:	pop	rbx
100003911:	pop	r12
100003913:	pop	r13
100003915:	pop	r14
100003917:	pop	r15
100003919:	pop	rbp
10000391a:	ret
10000391b:	cmp	r9, r8
10000391e:	mov	r14, r9
100003921:	cmova	r14, r8
100003925:	test	r14, r14
100003928:	je	0x1000039d6
10000392e:	lea	rcx, [rdi + rdx]
100003932:	add	rcx, 0x9
100003936:	lea	rdx, [r14 - 0x1]
10000393a:	xor	r15d, r15d
10000393d:	cmp	r15, r14
100003940:	jae	0x1000039d6
100003946:	cmp	byte ptr [r13 + r15], 0x0
10000394c:	mov	al, byte ptr [r12 + r15]
100003950:	jne	0x100003964
100003952:	test	al, al
100003954:	jne	0x100003a12
10000395a:	inc	r15
10000395d:	cmp	r14, r15
100003960:	jne	0x100003946
100003962:	jmp	0x1000039d6
100003964:	test	al, al
100003966:	je	0x10000390a
100003968:	mov	qword ptr [rbp - 0x30], rdx
10000396c:	mov	qword ptr [rbp - 0x48], rcx
100003970:	mov	qword ptr [rbp - 0x38], r9
100003974:	mov	qword ptr [rbp - 0x40], r8
100003978:	lea	rdi, [r15 + r13]
10000397c:	lea	rsi, [r12 + r15]
100003980:	call	0x10000afb0 ## symbol stub for: _strcoll
100003985:	test	eax, eax
100003987:	jne	0x100003a1c
10000398d:	cmp	r15, r14
100003990:	mov	r8, qword ptr [rbp - 0x40]
100003994:	mov	r9, qword ptr [rbp - 0x38]
100003998:	mov	rcx, qword ptr [rbp - 0x48]
10000399c:	mov	rdx, qword ptr [rbp - 0x30]
1000039a0:	jae	0x1000039d6
1000039a2:	cmp	byte ptr [r12 + r15], 0x0
1000039a7:	je	0x10000390a
1000039ad:	cmp	rdx, r15
1000039b0:	je	0x1000039d6
1000039b2:	lea	rax, [r15 + 0x1]
1000039b6:	cmp	byte ptr [rcx + r15], 0x0
1000039bb:	mov	r15, rax
1000039be:	jne	0x1000039a2
1000039c0:	cmp	byte ptr [r12 + rax], 0x0
1000039c5:	jne	0x100003a12
1000039c7:	inc	rax
1000039ca:	mov	r15, rax
1000039cd:	cmp	rax, r14
1000039d0:	jb	0x10000393d
1000039d6:	xor	edx, edx
1000039d8:	cmp	r9, r8
1000039db:	seta	dl
1000039de:	mov	eax, 0xffffffff
1000039e3:	cmovae	eax, edx
1000039e6:	jmp	0x10000390c
1000039eb:	mov	rdx, r9
1000039ee:	mov	r14, r8
1000039f1:	mov	r15, r9
1000039f4:	call	0x10000ae9c ## symbol stub for: _memcmp
1000039f9:	mov	ebx, eax
1000039fb:	cmp	r15, r14
1000039fe:	jae	0x10000390a
100003a04:	xor	eax, eax
100003a06:	cmp	ebx, 0x1
100003a09:	sbb	eax, eax
100003a0b:	or	ebx, eax
100003a0d:	jmp	0x10000390a
100003a12:	mov	ebx, 0xffffffff
100003a17:	jmp	0x10000390a
100003a1c:	mov	ebx, eax
100003a1e:	jmp	0x10000390a
100003a23:	push	rbp
100003a24:	mov	rbp, rsp
100003a27:	push	r15
100003a29:	push	r14
100003a2b:	push	r12
100003a2d:	push	rbx
100003a2e:	sub	rsp, 0x10
100003a32:	mov	r14, rsi
100003a35:	mov	rbx, rdi
100003a38:	mov	rax, qword ptr [rip + 0x85c9] ## literal pool symbol address: ___mb_cur_max
100003a3f:	cmp	dword ptr [rax], 0x1
100003a42:	jne	0x100003a90
100003a44:	mov	rax, qword ptr [rbx]
100003a47:	lea	r15, [rbx + rax]
100003a4b:	add	r15, 0x8
100003a4f:	mov	qword ptr [rbp - 0x28], 0x0
100003a57:	add	rbx, 0x7
100003a5b:	lea	r12, [rip + 0xc9c6]
100003a62:	movzx	edi, byte ptr [rbx + 0x1]
100003a66:	inc	rbx
100003a69:	call	qword ptr [r12]
100003a6d:	cmp	rbx, r15
100003a70:	jae	0x100003a76
100003a72:	test	eax, eax
100003a74:	jne	0x100003a62
100003a76:	movzx	edi, byte ptr [rbx]
100003a79:	test	dil, dil
100003a7c:	js	0x100003afb
100003a7e:	mov	rcx, qword ptr [rip + 0x857b] ## literal pool symbol address: __DefaultRuneLocale
100003a85:	mov	eax, 0x40000
100003a8a:	and	eax, dword ptr [rcx + 4*rdi + 0x3c]
100003a8e:	jmp	0x100003b05
100003a90:	mov	rax, qword ptr [rbx]
100003a93:	lea	r15, [rbx + 4*rax]
100003a97:	add	r15, 0x8
100003a9b:	mov	qword ptr [rbp - 0x28], 0x0
100003aa3:	add	rbx, 0x4
100003aa7:	lea	r12, [rip + 0xc982]
100003aae:	mov	edi, dword ptr [rbx + 0x4]
100003ab1:	add	rbx, 0x4
100003ab5:	call	qword ptr [r12]
100003ab9:	cmp	rbx, r15
100003abc:	jae	0x100003ac2
100003abe:	test	eax, eax
100003ac0:	jne	0x100003aae
100003ac2:	mov	edi, dword ptr [rbx]
100003ac4:	cmp	rdi, 0x7f
100003ac8:	ja	0x100003adc
100003aca:	mov	rcx, qword ptr [rip + 0x852f] ## literal pool symbol address: __DefaultRuneLocale
100003ad1:	mov	eax, 0x40000
100003ad6:	and	eax, dword ptr [rcx + 4*rdi + 0x3c]
100003ada:	jmp	0x100003ae6
100003adc:	mov	esi, 0x40000
100003ae1:	call	0x10000adac ## symbol stub for: ___maskrune
100003ae6:	test	eax, eax
100003ae8:	je	0x100003b23
100003aea:	lea	r15, [rbp - 0x28]
100003aee:	mov	rdi, rbx
100003af1:	mov	rsi, r15
100003af4:	call	0x10000b022 ## symbol stub for: _wcstod
100003af9:	jmp	0x100003b18
100003afb:	mov	esi, 0x40000
100003b00:	call	0x10000adac ## symbol stub for: ___maskrune
100003b05:	test	eax, eax
100003b07:	je	0x100003b23
100003b09:	lea	r15, [rbp - 0x28]
100003b0d:	mov	rdi, rbx
100003b10:	mov	rsi, r15
100003b13:	call	0x10000afd4 ## symbol stub for: _strtod
100003b18:	cmp	qword ptr [r15], rbx
100003b1b:	je	0x100003b23
100003b1d:	mov	byte ptr [r14], 0x0
100003b21:	jmp	0x100003b2a
100003b23:	mov	byte ptr [r14], 0x1
100003b27:	xorps	xmm0, xmm0
100003b2a:	add	rsp, 0x10
100003b2e:	pop	rbx
100003b2f:	pop	r12
100003b31:	pop	r14
100003b33:	pop	r15
100003b35:	pop	rbp
100003b36:	ret
100003b37:	push	rbp
100003b38:	mov	rbp, rsp
100003b3b:	push	r15
100003b3d:	push	r14
100003b3f:	push	rbx
100003b40:	push	rax
100003b41:	mov	rbx, rdi
100003b44:	mov	rax, qword ptr [rip + 0x84bd] ## literal pool symbol address: ___mb_cur_max
100003b4b:	cmp	dword ptr [rax], 0x1
100003b4e:	jne	0x100003ba4
100003b50:	mov	rax, qword ptr [rbx]
100003b53:	lea	r14, [rbx + rax]
100003b57:	add	r14, 0x8
100003b5b:	add	rbx, 0x7
100003b5f:	lea	r15, [rip + 0xc8c2]
100003b66:	movzx	edi, byte ptr [rbx + 0x1]
100003b6a:	inc	rbx
100003b6d:	call	qword ptr [r15]
100003b70:	cmp	rbx, r14
100003b73:	jae	0x100003b79
100003b75:	test	eax, eax
100003b77:	jne	0x100003b66
100003b79:	mov	r14d, 0xb
100003b7f:	mov	r15, qword ptr [rip + 0xcd72]
100003b86:	mov	rsi, qword ptr [r15 + 8*r14]
100003b8a:	test	rsi, rsi
100003b8d:	je	0x100003b9c
100003b8f:	mov	rdi, rbx
100003b92:	call	0x10000afce ## symbol stub for: _strstr
100003b97:	cmp	rax, rbx
100003b9a:	je	0x100003bfc
100003b9c:	add	r14, -0x1
100003ba0:	jb	0x100003b86
100003ba2:	jmp	0x100003bf6
100003ba4:	mov	rax, qword ptr [rbx]
100003ba7:	lea	r14, [rbx + 4*rax]
100003bab:	add	r14, 0x8
100003baf:	add	rbx, 0x4
100003bb3:	lea	r15, [rip + 0xc876]
100003bba:	mov	edi, dword ptr [rbx + 0x4]
100003bbd:	add	rbx, 0x4
100003bc1:	call	qword ptr [r15]
100003bc4:	cmp	rbx, r14
100003bc7:	jae	0x100003bcd
100003bc9:	test	eax, eax
100003bcb:	jne	0x100003bba
100003bcd:	mov	r14d, 0xb
100003bd3:	mov	rax, qword ptr [rip + 0xcd26]
100003bda:	mov	rsi, qword ptr [rax + 8*r14]
100003bde:	test	rsi, rsi
100003be1:	je	0x100003bf0
100003be3:	mov	rdi, rbx
100003be6:	call	0x10000b01c ## symbol stub for: _wcsstr
100003beb:	cmp	rax, rbx
100003bee:	je	0x100003bfc
100003bf0:	add	r14, -0x1
100003bf4:	jb	0x100003bd3
100003bf6:	mov	r14d, 0xffffffff
100003bfc:	mov	eax, r14d
100003bff:	add	rsp, 0x8
100003c03:	pop	rbx
100003c04:	pop	r14
100003c06:	pop	r15
100003c08:	pop	rbp
100003c09:	ret
100003c0a:	push	rbp
100003c0b:	mov	rbp, rsp
100003c0e:	push	r15
100003c10:	push	r14
100003c12:	push	r13
100003c14:	push	r12
100003c16:	push	rbx
100003c17:	sub	rsp, 0x18
100003c1b:	mov	r12, rdi
100003c1e:	mov	rax, qword ptr [rip + 0x83e3] ## literal pool symbol address: ___mb_cur_max
100003c25:	cmp	dword ptr [rax], 0x1
100003c28:	jne	0x100003c92
100003c2a:	lea	rax, [r12 + 0x8]
100003c2f:	mov	r15, qword ptr [r12]
100003c33:	lea	rcx, [r12 + r15]
100003c37:	add	rcx, 0x8
100003c3b:	cmp	rcx, rax
100003c3e:	jbe	0x100003d9b
100003c44:	mov	qword ptr [rbp - 0x38], rcx
100003c48:	mov	qword ptr [rbp - 0x30], rax
100003c4c:	mov	r14, r15
100003c4f:	neg	r14
100003c52:	mov	ebx, 0x8
100003c57:	lea	r13, [rip + 0xc7ca]
100003c5e:	movzx	edi, byte ptr [r12 + rbx]
100003c63:	call	qword ptr [r13]
100003c67:	test	eax, eax
100003c69:	je	0x100003d29
100003c6f:	lea	rax, [r14 + rbx]
100003c73:	inc	rax
100003c76:	inc	rbx
100003c79:	cmp	rax, 0x8
100003c7d:	jne	0x100003c5e
100003c7f:	mov	rax, qword ptr [rbp - 0x38]
100003c83:	mov	rbx, rax
100003c86:	mov	r8, qword ptr [rip + 0x837b] ## literal pool symbol address: ___mb_cur_max
100003c8d:	jmp	0x100003d37
100003c92:	mov	r13, qword ptr [r12]
100003c96:	test	r13, r13
100003c99:	jle	0x100003d9b
100003c9f:	lea	r15, [r12 + 0x8]
100003ca4:	lea	rax, [r12 + 4*r13]
100003ca8:	add	rax, 0x8
100003cac:	mov	qword ptr [rbp - 0x30], rax
100003cb0:	lea	r14, [r12 + 0x8]
100003cb5:	xor	ebx, ebx
100003cb7:	mov	edi, dword ptr [r14]
100003cba:	lea	rax, [rip + 0xc76f]
100003cc1:	call	qword ptr [rax]
100003cc3:	test	eax, eax
100003cc5:	je	0x100003cd6
100003cc7:	inc	rbx
100003cca:	add	r14, 0x4
100003cce:	cmp	r13, rbx
100003cd1:	jne	0x100003cb7
100003cd3:	mov	rbx, r13
100003cd6:	mov	rdx, qword ptr [rip + 0x832b] ## literal pool symbol address: ___mb_cur_max
100003cdd:	test	rbx, rbx
100003ce0:	mov	rsi, qword ptr [rbp - 0x30]
100003ce4:	je	0x100003d9b
100003cea:	mov	rax, qword ptr [r12]
100003cee:	cmp	r14, rsi
100003cf1:	jae	0x100003d03
100003cf3:	mov	ecx, dword ptr [r14]
100003cf6:	mov	dword ptr [r15], ecx
100003cf9:	add	r15, 0x4
100003cfd:	add	r14, 0x4
100003d01:	jmp	0x100003cee
100003d03:	test	r12, r12
100003d06:	je	0x100003d9b
100003d0c:	cmp	rax, rbx
100003d0f:	jb	0x100003d9b
100003d15:	sub	rax, rbx
100003d18:	mov	qword ptr [r12], rax
100003d1c:	cmp	dword ptr [rdx], 0x1
100003d1f:	jne	0x100003d87
100003d21:	mov	byte ptr [r12 + rax + 0x8], 0x0
100003d27:	jmp	0x100003d9b
100003d29:	add	rbx, r12
100003d2c:	mov	r8, qword ptr [rip + 0x82d5] ## literal pool symbol address: ___mb_cur_max
100003d33:	mov	rax, qword ptr [rbp - 0x38]
100003d37:	mov	rdi, qword ptr [rbp - 0x30]
100003d3b:	cmp	rbx, rdi
100003d3e:	je	0x100003d9b
100003d40:	mov	rsi, rdi
100003d43:	sub	rsi, rbx
100003d46:	add	rsi, qword ptr [r12]
100003d4a:	cmp	rbx, rax
100003d4d:	jae	0x100003d71
100003d4f:	sub	r15, rbx
100003d52:	lea	rcx, [r15 + r12]
100003d56:	add	rcx, 0x8
100003d5a:	xor	edx, edx
100003d5c:	mov	al, byte ptr [rbx + rdx]
100003d5f:	mov	byte ptr [r12 + rdx + 0x8], al
100003d64:	inc	rdx
100003d67:	cmp	rcx, rdx
100003d6a:	jne	0x100003d5c
100003d6c:	test	r12, r12
100003d6f:	je	0x100003d9b
100003d71:	cmp	qword ptr [r12], rsi
100003d75:	jbe	0x100003d9b
100003d77:	mov	qword ptr [r12], rsi
100003d7b:	cmp	dword ptr [r8], 0x1
100003d7f:	jne	0x100003d92
100003d81:	mov	byte ptr [rdi + rsi], 0x0
100003d85:	jmp	0x100003d9b
100003d87:	mov	dword ptr [r12 + 4*rax + 0x8], 0x0
100003d90:	jmp	0x100003d9b
100003d92:	mov	dword ptr [r12 + 4*rsi + 0x8], 0x0
100003d9b:	mov	rax, r12
100003d9e:	add	rsp, 0x18
100003da2:	pop	rbx
100003da3:	pop	r12
100003da5:	pop	r13
100003da7:	pop	r14
100003da9:	pop	r15
100003dab:	pop	rbp
100003dac:	ret
100003dad:	push	rbp
100003dae:	mov	rbp, rsp
100003db1:	push	r15
100003db3:	push	r14
100003db5:	push	r13
100003db7:	push	r12
100003db9:	push	rbx
100003dba:	push	rax
100003dbb:	mov	rcx, rdi
100003dbe:	mov	r13, qword ptr [rdi]
100003dc1:	mov	rdx, qword ptr [rip + 0x8240] ## literal pool symbol address: ___mb_cur_max
100003dc8:	cmp	dword ptr [rdx], 0x1
100003dcb:	mov	qword ptr [rbp - 0x30], rdi
100003dcf:	jne	0x100003e35
100003dd1:	lea	rbx, [rcx + 0x8]
100003dd5:	lea	rax, [rcx + r13]
100003dd9:	add	rax, 0x8
100003ddd:	cmp	rax, rbx
100003de0:	jbe	0x100003ea4
100003de6:	xor	r15d, r15d
100003de9:	mov	r12, r13
100003dec:	mov	r14b, byte ptr [rcx + r15 + 0x8]
100003df1:	movzx	edi, r14b
100003df5:	test	dil, dil
100003df8:	js	0x100003e0e
100003dfa:	mov	rax, qword ptr [rip + 0x81ff] ## literal pool symbol address: __DefaultRuneLocale
100003e01:	mov	eax, dword ptr [rax + 4*rdi + 0x3c]
100003e05:	mov	edx, 0x40000
100003e0a:	and	eax, edx
100003e0c:	jmp	0x100003e1c
100003e0e:	mov	esi, 0x40000
100003e13:	call	0x10000adac ## symbol stub for: ___maskrune
100003e18:	mov	rcx, qword ptr [rbp - 0x30]
100003e1c:	test	eax, eax
100003e1e:	je	0x100003e28
100003e20:	mov	byte ptr [rbx], r14b
100003e23:	inc	rbx
100003e26:	jmp	0x100003e2b
100003e28:	dec	r12
100003e2b:	inc	r15
100003e2e:	cmp	r13, r15
100003e31:	jne	0x100003dec
100003e33:	jmp	0x100003e95
100003e35:	test	r13, r13
100003e38:	jle	0x100003ea4
100003e3a:	lea	rbx, [rcx + 0x8]
100003e3e:	lea	r14, [rcx + 4*r13]
100003e42:	add	r14, 0x8
100003e46:	mov	r12, r13
100003e49:	mov	r13, rbx
100003e4c:	mov	r15d, dword ptr [rbx]
100003e4f:	cmp	r15, 0x7f
100003e53:	ja	0x100003e6a
100003e55:	mov	rax, qword ptr [rip + 0x81a4] ## literal pool symbol address: __DefaultRuneLocale
100003e5c:	mov	eax, dword ptr [rax + 4*r15 + 0x3c]
100003e61:	mov	edx, 0x40000
100003e66:	and	eax, edx
100003e68:	jmp	0x100003e7b
100003e6a:	mov	esi, 0x40000
100003e6f:	mov	edi, r15d
100003e72:	call	0x10000adac ## symbol stub for: ___maskrune
100003e77:	mov	rcx, qword ptr [rbp - 0x30]
100003e7b:	test	eax, eax
100003e7d:	je	0x100003e89
100003e7f:	mov	dword ptr [r13], r15d
100003e83:	add	r13, 0x4
100003e87:	jmp	0x100003e8c
100003e89:	dec	r12
100003e8c:	add	rbx, 0x4
100003e90:	cmp	rbx, r14
100003e93:	jb	0x100003e4c
100003e95:	mov	r13, r12
100003e98:	test	rcx, rcx
100003e9b:	mov	rdx, qword ptr [rip + 0x8166] ## literal pool symbol address: ___mb_cur_max
100003ea2:	je	0x100003ec2
100003ea4:	cmp	qword ptr [rcx], r13
100003ea7:	jbe	0x100003ec2
100003ea9:	mov	qword ptr [rcx], r13
100003eac:	cmp	dword ptr [rdx], 0x1
100003eaf:	jne	0x100003eb9
100003eb1:	mov	byte ptr [rcx + r13 + 0x8], 0x0
100003eb7:	jmp	0x100003ec2
100003eb9:	mov	dword ptr [rcx + 4*r13 + 0x8], 0x0
100003ec2:	mov	rax, rcx
100003ec5:	add	rsp, 0x8
100003ec9:	pop	rbx
100003eca:	pop	r12
100003ecc:	pop	r13
100003ece:	pop	r14
100003ed0:	pop	r15
100003ed2:	pop	rbp
100003ed3:	ret
100003ed4:	push	rbp
100003ed5:	mov	rbp, rsp
100003ed8:	push	r15
100003eda:	push	r14
100003edc:	push	r13
100003ede:	push	r12
100003ee0:	push	rbx
100003ee1:	sub	rsp, 0x18
100003ee5:	mov	r14, rdi
100003ee8:	mov	rdx, qword ptr [rdi]
100003eeb:	mov	rcx, qword ptr [rip + 0x8116] ## literal pool symbol address: ___mb_cur_max
100003ef2:	cmp	dword ptr [rcx], 0x1
100003ef5:	jne	0x100003f7f
100003efb:	lea	r15, [r14 + 0x8]
100003eff:	lea	rax, [r14 + rdx]
100003f03:	add	rax, 0x8
100003f07:	cmp	rax, r15
100003f0a:	jbe	0x100003fff
100003f10:	xor	r12d, r12d
100003f13:	mov	qword ptr [rbp - 0x30], rdx
100003f17:	mov	qword ptr [rbp - 0x38], rdx
100003f1b:	mov	r13, r14
100003f1e:	mov	r14b, byte ptr [r14 + r12 + 0x8]
100003f23:	movzx	ebx, r14b
100003f27:	test	bl, bl
100003f29:	js	0x100003f3f
100003f2b:	mov	rax, qword ptr [rip + 0x80ce] ## literal pool symbol address: __DefaultRuneLocale
100003f32:	mov	eax, dword ptr [rax + 4*rbx + 0x3c]
100003f36:	mov	ecx, 0x500
100003f3b:	and	eax, ecx
100003f3d:	jmp	0x100003f4f
100003f3f:	mov	esi, 0x500
100003f44:	mov	edi, ebx
100003f46:	call	0x10000adac ## symbol stub for: ___maskrune
100003f4b:	mov	rdx, qword ptr [rbp - 0x38]
100003f4f:	test	eax, eax
100003f51:	jne	0x100003f66
100003f53:	mov	edi, ebx
100003f55:	lea	rax, [rip + 0xc4cc]
100003f5c:	call	qword ptr [rax]
100003f5e:	mov	rdx, qword ptr [rbp - 0x38]
100003f62:	test	eax, eax
100003f64:	je	0x100003f79
100003f66:	mov	byte ptr [r15], r14b
100003f69:	inc	r15
100003f6c:	mov	r14, r13
100003f6f:	inc	r12
100003f72:	cmp	rdx, r12
100003f75:	jne	0x100003f1b
100003f77:	jmp	0x100003fef
100003f79:	dec	qword ptr [rbp - 0x30]
100003f7d:	jmp	0x100003f6c
100003f7f:	test	rdx, rdx
100003f82:	jle	0x100003fff
100003f84:	lea	rbx, [r14 + 0x8]
100003f88:	lea	r12, [r14 + 4*rdx]
100003f8c:	add	r12, 0x8
100003f90:	mov	qword ptr [rbp - 0x30], rdx
100003f94:	mov	r13, rbx
100003f97:	mov	r15d, dword ptr [rbx]
100003f9a:	cmp	r15, 0x7f
100003f9e:	ja	0x100003fb5
100003fa0:	mov	rax, qword ptr [rip + 0x8059] ## literal pool symbol address: __DefaultRuneLocale
100003fa7:	mov	eax, dword ptr [rax + 4*r15 + 0x3c]
100003fac:	mov	ecx, 0x500
100003fb1:	and	eax, ecx
100003fb3:	jmp	0x100003fc2
100003fb5:	mov	esi, 0x500
100003fba:	mov	edi, r15d
100003fbd:	call	0x10000adac ## symbol stub for: ___maskrune
100003fc2:	test	eax, eax
100003fc4:	jne	0x100003fd6
100003fc6:	mov	edi, r15d
100003fc9:	lea	rax, [rip + 0xc460]
100003fd0:	call	qword ptr [rax]
100003fd2:	test	eax, eax
100003fd4:	je	0x100003fe9
100003fd6:	mov	dword ptr [r13], r15d
100003fda:	add	r13, 0x4
100003fde:	add	rbx, 0x4
100003fe2:	cmp	rbx, r12
100003fe5:	jb	0x100003f97
100003fe7:	jmp	0x100003fef
100003fe9:	dec	qword ptr [rbp - 0x30]
100003fed:	jmp	0x100003fde
100003fef:	mov	rdx, qword ptr [rbp - 0x30]
100003ff3:	test	r14, r14
100003ff6:	mov	rcx, qword ptr [rip + 0x800b] ## literal pool symbol address: ___mb_cur_max
100003ffd:	je	0x10000401d
100003fff:	cmp	qword ptr [r14], rdx
100004002:	jbe	0x10000401d
100004004:	mov	qword ptr [r14], rdx
100004007:	cmp	dword ptr [rcx], 0x1
10000400a:	jne	0x100004014
10000400c:	mov	byte ptr [r14 + rdx + 0x8], 0x0
100004012:	jmp	0x10000401d
100004014:	mov	dword ptr [r14 + 4*rdx + 0x8], 0x0
10000401d:	mov	rax, r14
100004020:	add	rsp, 0x18
100004024:	pop	rbx
100004025:	pop	r12
100004027:	pop	r13
100004029:	pop	r14
10000402b:	pop	r15
10000402d:	pop	rbp
10000402e:	ret
10000402f:	push	rbp
100004030:	mov	rbp, rsp
100004033:	push	r15
100004035:	push	r14
100004037:	push	rbx
100004038:	push	rax
100004039:	mov	r15, rdi
10000403c:	mov	rax, qword ptr [rip + 0x7fc5] ## literal pool symbol address: ___mb_cur_max
100004043:	cmp	dword ptr [rax], 0x1
100004046:	jne	0x100004078
100004048:	lea	rax, [r15 + 0x8]
10000404c:	mov	r14, qword ptr [r15]
10000404f:	lea	rcx, [r15 + r14]
100004053:	add	rcx, 0x8
100004057:	cmp	rcx, rax
10000405a:	jbe	0x10000409e
10000405c:	xor	ebx, ebx
10000405e:	movzx	edi, byte ptr [r15 + rbx + 0x8]
100004064:	call	0x10000adbe ## symbol stub for: ___toupper
100004069:	mov	byte ptr [r15 + rbx + 0x8], al
10000406e:	inc	rbx
100004071:	cmp	r14, rbx
100004074:	jne	0x10000405e
100004076:	jmp	0x10000409e
100004078:	mov	rax, qword ptr [r15]
10000407b:	test	rax, rax
10000407e:	jle	0x10000409e
100004080:	lea	r14, [r15 + 4*rax]
100004084:	add	r14, 0x8
100004088:	lea	rbx, [r15 + 0x8]
10000408c:	mov	edi, dword ptr [rbx]
10000408e:	call	0x10000adbe ## symbol stub for: ___toupper
100004093:	mov	dword ptr [rbx], eax
100004095:	add	rbx, 0x4
100004099:	cmp	rbx, r14
10000409c:	jb	0x10000408c
10000409e:	mov	rax, r15
1000040a1:	add	rsp, 0x8
1000040a5:	pop	rbx
1000040a6:	pop	r14
1000040a8:	pop	r15
1000040aa:	pop	rbp
1000040ab:	ret
1000040ac:	push	rbp
1000040ad:	mov	rbp, rsp
1000040b0:	mov	rcx, rdi
1000040b3:	mov	rax, qword ptr [rip + 0x7f4e] ## literal pool symbol address: ___mb_cur_max
1000040ba:	inc	rdx
1000040bd:	cmp	dword ptr [rax], 0x1
1000040c0:	jne	0x1000040cf
1000040c2:	add	rcx, 0x8
1000040c6:	lea	rdi, [rip + 0x74d3] ## literal pool for: "%s:%zu: disorder: %s"
1000040cd:	jmp	0x1000040da
1000040cf:	add	rcx, 0x8
1000040d3:	lea	rdi, [rip + 0x74db] ## literal pool for: "%s:%zu: disorder: %ls"
1000040da:	xor	eax, eax
1000040dc:	pop	rbp
1000040dd:	jmp	0x10000b00a ## symbol stub for: _warnx
1000040e2:	nop
1000040e3:	nop
1000040e4:	push	rbp
1000040e5:	mov	rbp, rsp
1000040e8:	push	r14
1000040ea:	push	rbx
1000040eb:	lea	rax, [rip + 0xc986]
1000040f2:	cmp	byte ptr [rax], 0x0
1000040f5:	mov	eax, 0x8
1000040fa:	mov	ebx, 0x20
1000040ff:	cmove	rbx, rax
100004103:	imul	rbx, qword ptr [rip + 0xc8dd]
10000410b:	mov	rdi, rbx
10000410e:	call	0x1000078d3
100004113:	mov	r14, rax
100004116:	mov	rdi, rax
100004119:	mov	rsi, rbx
10000411c:	call	0x10000ada0 ## symbol stub for: ___bzero
100004121:	mov	rax, r14
100004124:	pop	rbx
100004125:	pop	r14
100004127:	pop	rbp
100004128:	ret
100004129:	push	rbp
10000412a:	mov	rbp, rsp
10000412d:	lea	rax, [rip + 0xc944]
100004134:	cmp	byte ptr [rax], 0x0
100004137:	mov	ecx, 0x8
10000413c:	mov	eax, 0x20
100004141:	cmove	rax, rcx
100004145:	imul	rax, qword ptr [rip + 0xc89b]
10000414d:	pop	rbp
10000414e:	ret
10000414f:	test	rsi, rsi
100004152:	je	0x1000041e5
100004158:	push	rbp
100004159:	mov	rbp, rsp
10000415c:	push	r15
10000415e:	push	r14
100004160:	push	r12
100004162:	push	rbx
100004163:	mov	r15, rsi
100004166:	mov	rax, qword ptr [rip + 0xc87b]
10000416d:	test	rax, rax
100004170:	je	0x1000041b7
100004172:	mov	r14, rdi
100004175:	xor	ebx, ebx
100004177:	lea	r12, [rip + 0xc8fa]
10000417e:	cmp	byte ptr [r12], 0x0
100004183:	mov	ecx, 0x8
100004188:	je	0x10000418f
10000418a:	mov	ecx, 0x20
10000418f:	imul	rcx, rbx
100004193:	mov	rdi, qword ptr [r15 + rcx]
100004197:	test	rdi, rdi
10000419a:	je	0x1000041ad
10000419c:	cmp	rdi, r14
10000419f:	je	0x1000041ad
1000041a1:	call	0x10000307d
1000041a6:	mov	rax, qword ptr [rip + 0xc83b]
1000041ad:	inc	rbx
1000041b0:	cmp	rbx, rax
1000041b3:	jb	0x10000417e
1000041b5:	jmp	0x1000041b9
1000041b7:	xor	eax, eax
1000041b9:	lea	rcx, [rip + 0xc8b8]
1000041c0:	cmp	byte ptr [rcx], 0x0
1000041c3:	mov	ecx, 0x8
1000041c8:	mov	esi, 0x20
1000041cd:	cmove	rsi, rcx
1000041d1:	imul	rsi, rax
1000041d5:	mov	rdi, r15
1000041d8:	call	0x10000ada0 ## symbol stub for: ___bzero
1000041dd:	pop	rbx
1000041de:	pop	r12
1000041e0:	pop	r14
1000041e2:	pop	r15
1000041e4:	pop	rbp
1000041e5:	ret
1000041e6:	push	rbp
1000041e7:	mov	rbp, rsp
1000041ea:	lea	rax, [rip + 0xc887]
1000041f1:	cmp	byte ptr [rax], 0x0
1000041f4:	mov	ecx, 0x8
1000041f9:	mov	eax, 0x20
1000041fe:	cmove	rax, rcx
100004202:	imul	rax, rsi
100004206:	add	rax, rdi
100004209:	pop	rbp
10000420a:	ret
10000420b:	push	rbp
10000420c:	mov	rbp, rsp
10000420f:	push	r15
100004211:	push	r14
100004213:	push	rbx
100004214:	push	rax
100004215:	test	rdi, rdi
100004218:	je	0x10000425c
10000421a:	cmp	qword ptr [rip + 0xc7c7], rdx
100004221:	jbe	0x10000425c
100004223:	mov	r14, rsi
100004226:	mov	r15, rdi
100004229:	lea	rax, [rip + 0xc848]
100004230:	cmp	byte ptr [rax], 0x0
100004233:	mov	eax, 0x8
100004238:	mov	ebx, 0x20
10000423d:	cmove	rbx, rax
100004241:	imul	rbx, rdx
100004245:	mov	rdi, qword ptr [rdi + rbx]
100004249:	test	rdi, rdi
10000424c:	je	0x100004258
10000424e:	cmp	rdi, r14
100004251:	je	0x100004258
100004253:	call	0x10000307d
100004258:	mov	qword ptr [r15 + rbx], r14
10000425c:	add	rsp, 0x8
100004260:	pop	rbx
100004261:	pop	r14
100004263:	pop	r15
100004265:	pop	rbp
100004266:	ret
100004267:	push	rbp
100004268:	mov	rbp, rsp
10000426b:	push	r14
10000426d:	push	rbx
10000426e:	lea	rax, [rip + 0xc803]
100004275:	cmp	byte ptr [rax], 0x0
100004278:	mov	eax, 0x8
10000427d:	mov	ebx, 0x20
100004282:	cmove	rbx, rax
100004286:	imul	rbx, qword ptr [rip + 0xc75a]
10000428e:	add	rbx, 0x8
100004292:	mov	rdi, rbx
100004295:	call	0x1000078d3
10000429a:	mov	r14, rax
10000429d:	mov	rdi, rax
1000042a0:	mov	rsi, rbx
1000042a3:	call	0x10000ada0 ## symbol stub for: ___bzero
1000042a8:	mov	rax, r14
1000042ab:	pop	rbx
1000042ac:	pop	r14
1000042ae:	pop	rbp
1000042af:	ret
1000042b0:	push	rbp
1000042b1:	mov	rbp, rsp
1000042b4:	push	r15
1000042b6:	push	r14
1000042b8:	push	r12
1000042ba:	push	rbx
1000042bb:	test	rdi, rdi
1000042be:	je	0x100004346
1000042c4:	mov	r12, rdi
1000042c7:	mov	rax, qword ptr [rip + 0xc71a]
1000042ce:	lea	r15, [rip + 0xc7a3]
1000042d5:	cmp	byte ptr [r15], 0x0
1000042d9:	mov	ecx, 0x8
1000042de:	mov	r14d, 0x20
1000042e4:	cmove	r14, rcx
1000042e8:	imul	r14, rax
1000042ec:	add	r14, 0x8
1000042f0:	mov	rdi, qword ptr [rdi]
1000042f3:	test	rdi, rdi
1000042f6:	je	0x100004307
1000042f8:	call	0x100002d59
1000042fd:	add	r14, rax
100004300:	mov	rax, qword ptr [rip + 0xc6e1]
100004307:	test	rax, rax
10000430a:	je	0x100004349
10000430c:	xor	ebx, ebx
10000430e:	cmp	byte ptr [r15], 0x0
100004312:	mov	ecx, 0x8
100004317:	je	0x10000431e
100004319:	mov	ecx, 0x20
10000431e:	imul	rcx, rbx
100004322:	mov	rdi, qword ptr [r12 + rcx + 0x8]
100004327:	cmp	rdi, qword ptr [r12]
10000432b:	je	0x10000433c
10000432d:	call	0x100002d59
100004332:	add	r14, rax
100004335:	mov	rax, qword ptr [rip + 0xc6ac]
10000433c:	inc	rbx
10000433f:	cmp	rbx, rax
100004342:	jb	0x10000430e
100004344:	jmp	0x100004349
100004346:	xor	r14d, r14d
100004349:	mov	rax, r14
10000434c:	pop	rbx
10000434d:	pop	r12
10000434f:	pop	r14
100004351:	pop	r15
100004353:	pop	rbp
100004354:	ret
100004355:	push	rbp
100004356:	mov	rbp, rsp
100004359:	push	r15
10000435b:	push	r14
10000435d:	push	rbx
10000435e:	push	rax
10000435f:	test	rdi, rdi
100004362:	je	0x1000043aa
100004364:	mov	r14, rsi
100004367:	mov	rbx, rdi
10000436a:	mov	rdi, qword ptr [rdi]
10000436d:	lea	r15, [rbx + 0x8]
100004371:	mov	rsi, r15
100004374:	call	0x10000414f
100004379:	mov	rdi, qword ptr [rbx]
10000437c:	test	rdi, rdi
10000437f:	je	0x100004392
100004381:	cmp	rdi, r14
100004384:	je	0x1000043aa
100004386:	call	0x10000307d
10000438b:	mov	qword ptr [rbx], 0x0
100004392:	mov	qword ptr [rbx], r14
100004395:	mov	rdi, r14
100004398:	mov	rsi, r15
10000439b:	add	rsp, 0x8
10000439f:	pop	rbx
1000043a0:	pop	r14
1000043a2:	pop	r15
1000043a4:	pop	rbp
1000043a5:	jmp	0x1000043ea
1000043aa:	add	rsp, 0x8
1000043ae:	pop	rbx
1000043af:	pop	r14
1000043b1:	pop	r15
1000043b3:	pop	rbp
1000043b4:	ret
1000043b5:	push	rbp
1000043b6:	mov	rbp, rsp
1000043b9:	push	rbx
1000043ba:	push	rax
1000043bb:	test	rdi, rdi
1000043be:	je	0x1000043e3
1000043c0:	mov	rbx, rdi
1000043c3:	mov	rdi, qword ptr [rdi]
1000043c6:	lea	rsi, [rbx + 0x8]
1000043ca:	call	0x10000414f
1000043cf:	mov	rdi, qword ptr [rbx]
1000043d2:	test	rdi, rdi
1000043d5:	je	0x1000043e3
1000043d7:	call	0x10000307d
1000043dc:	mov	qword ptr [rbx], 0x0
1000043e3:	add	rsp, 0x8
1000043e7:	pop	rbx
1000043e8:	pop	rbp
1000043e9:	ret
1000043ea:	push	rbp
1000043eb:	mov	rbp, rsp
1000043ee:	push	r15
1000043f0:	push	r14
1000043f2:	push	r13
1000043f4:	push	r12
1000043f6:	push	rbx
1000043f7:	sub	rsp, 0x28
1000043fb:	mov	r15, rsi
1000043fe:	mov	r12, rdi
100004401:	lea	rax, [rip + 0xc674]
100004408:	cmp	byte ptr [rax + 0xa], 0x0
10000440c:	je	0x100004620
100004412:	cmp	qword ptr [rip + 0xc5ce], 0x0
10000441a:	je	0x1000046c6
100004420:	mov	r14d, 0x9
100004426:	xor	r13d, r13d
100004429:	mov	qword ptr [rbp - 0x40], r15
10000442d:	mov	qword ptr [rbp - 0x48], r12
100004431:	mov	rbx, qword ptr [rip + 0xc5c0]
100004438:	test	r12, r12
10000443b:	je	0x100004492
10000443d:	test	rbx, rbx
100004440:	je	0x100004492
100004442:	xor	r15d, r15d
100004445:	mov	byte ptr [rbp - 0x2b], r15b
100004449:	mov	byte ptr [rbp - 0x29], r15b
10000444d:	mov	rsi, qword ptr [rbx + r14 + 0x1f]
100004452:	mov	rdi, r12
100004455:	lea	rdx, [rbp - 0x2b]
100004459:	call	0x1000053e7
10000445e:	cmp	byte ptr [rbp - 0x2b], r15b
100004462:	je	0x10000446e
100004464:	mov	byte ptr [rbp - 0x29], 0x1
100004468:	mov	r15, qword ptr [rbp - 0x40]
10000446c:	jmp	0x100004492
10000446e:	mov	rsi, qword ptr [rbx + r14 + 0xf]
100004473:	movzx	ecx, byte ptr [rbx + r14 + 0x2f]
100004479:	mov	rdi, r12
10000447c:	mov	rdx, rax
10000447f:	lea	r8, [rbp - 0x29]
100004483:	call	0x1000054e1
100004488:	cmp	byte ptr [rbp - 0x29], 0x0
10000448c:	mov	r15, qword ptr [rbp - 0x40]
100004490:	je	0x100004506
100004492:	xor	edi, edi
100004494:	call	0x100002daa
100004499:	mov	r12, rax
10000449c:	cmp	byte ptr [rbx + r14], 0x0
1000044a1:	je	0x1000044ad
1000044a3:	mov	rdi, r12
1000044a6:	call	0x100003ed4
1000044ab:	jmp	0x1000044bd
1000044ad:	cmp	byte ptr [rbx + r14 + 0x3], 0x0
1000044b3:	je	0x1000044c0
1000044b5:	mov	rdi, r12
1000044b8:	call	0x100003dad
1000044bd:	mov	r12, rax
1000044c0:	cmp	byte ptr [rbx + r14 + 0x1], 0x0
1000044c6:	jne	0x1000044d0
1000044c8:	cmp	byte ptr [rbx + r14 + 0x4], 0x0
1000044ce:	je	0x1000044db
1000044d0:	mov	rdi, r12
1000044d3:	call	0x10000402f
1000044d8:	mov	r12, rax
1000044db:	mov	rdi, r15
1000044de:	mov	rsi, r12
1000044e1:	mov	rdx, r13
1000044e4:	call	0x10000420b
1000044e9:	inc	r13
1000044ec:	add	r14, 0x40
1000044f0:	cmp	r13, qword ptr [rip + 0xc4f1]
1000044f7:	mov	r12, qword ptr [rbp - 0x48]
1000044fb:	jb	0x100004431
100004501:	jmp	0x1000046c6
100004506:	mov	rcx, rax
100004509:	xor	eax, eax
10000450b:	mov	byte ptr [rbp - 0x2a], al
10000450e:	mov	byte ptr [rbp - 0x2c], al
100004511:	mov	rsi, qword ptr [rbx + r14 + 0x27]
100004516:	test	rsi, rsi
100004519:	mov	qword ptr [rbp - 0x38], rcx
10000451d:	je	0x10000453c
10000451f:	cmp	qword ptr [rbx + r14 + 0x17], 0x0
100004525:	je	0x100004548
100004527:	mov	rdi, r12
10000452a:	lea	rdx, [rbp - 0x2a]
10000452e:	call	0x1000053e7
100004533:	mov	rcx, qword ptr [rbp - 0x38]
100004537:	mov	r8, rax
10000453a:	jmp	0x10000459f
10000453c:	mov	r8, qword ptr [r12]
100004540:	inc	r8
100004543:	jmp	0x1000045e4
100004548:	mov	rdi, r12
10000454b:	inc	rsi
10000454e:	lea	rdx, [rbp - 0x2a]
100004552:	call	0x1000053e7
100004557:	test	rax, rax
10000455a:	je	0x100004580
10000455c:	mov	r8, rax
10000455f:	lea	rax, [rip + 0xc516]
100004566:	cmp	byte ptr [rax + 0xf], 0x0
10000456a:	je	0x10000459b
10000456c:	mov	rax, qword ptr [rip + 0x7a95] ## literal pool symbol address: ___mb_cur_max
100004573:	cmp	dword ptr [rax], 0x1
100004576:	jne	0x100004585
100004578:	movzx	eax, byte ptr [r12 + r8 + 0x7]
10000457e:	jmp	0x10000458a
100004580:	xor	r8d, r8d
100004583:	jmp	0x10000459b
100004585:	mov	eax, dword ptr [r12 + 4*r8 + 0x4]
10000458a:	xor	ecx, ecx
10000458c:	lea	rdx, [rip + 0xc4e9]
100004593:	cmp	dword ptr [rdx], eax
100004595:	sete	cl
100004598:	sub	r8, rcx
10000459b:	mov	rcx, qword ptr [rbp - 0x38]
10000459f:	cmp	byte ptr [rbp - 0x2a], 0x0
1000045a3:	mov	rax, qword ptr [r12]
1000045a7:	jne	0x1000045de
1000045a9:	cmp	r8, rax
1000045ac:	jae	0x1000045de
1000045ae:	mov	rsi, qword ptr [rbx + r14 + 0x17]
1000045b3:	test	rsi, rsi
1000045b6:	je	0x1000045e4
1000045b8:	movzx	ecx, byte ptr [rbx + r14 + 0x30]
1000045be:	mov	rdi, r12
1000045c1:	mov	rdx, r8
1000045c4:	lea	r8, [rbp - 0x2c]
1000045c8:	call	0x1000054e1
1000045cd:	mov	rcx, qword ptr [rbp - 0x38]
1000045d1:	mov	r8, rax
1000045d4:	cmp	rax, qword ptr [r12]
1000045d8:	adc	r8, 0x0
1000045dc:	jmp	0x1000045e4
1000045de:	inc	rax
1000045e1:	mov	r8, rax
1000045e4:	mov	r15, r8
1000045e7:	sub	r15, rcx
1000045ea:	mov	qword ptr [rbp - 0x50], r8
1000045ee:	jae	0x1000045f3
1000045f0:	xor	r15d, r15d
1000045f3:	mov	rdi, r15
1000045f6:	call	0x100002daa
1000045fb:	mov	r12, rax
1000045fe:	mov	rdx, qword ptr [rbp - 0x38]
100004602:	cmp	qword ptr [rbp - 0x50], rdx
100004606:	jbe	0x100004617
100004608:	mov	rdi, r12
10000460b:	mov	rsi, qword ptr [rbp - 0x48]
10000460f:	mov	rcx, r15
100004612:	call	0x100003168
100004617:	mov	r15, qword ptr [rbp - 0x40]
10000461b:	jmp	0x10000449c
100004620:	lea	rax, [rip + 0x7af1]
100004627:	mov	rbx, qword ptr [rax]
10000462a:	cmp	byte ptr [rbx + 0x8], 0x0
10000462e:	je	0x100004650
100004630:	mov	r14, r12
100004633:	mov	rdi, r12
100004636:	call	0x100002df1
10000463b:	mov	rdi, rax
10000463e:	call	0x100003c0a
100004643:	cmp	byte ptr [rbx + 0x9], 0x0
100004647:	je	0x10000466b
100004649:	test	rax, rax
10000464c:	jne	0x100004661
10000464e:	jmp	0x100004659
100004650:	mov	r14, r12
100004653:	cmp	byte ptr [rbx + 0x9], 0x0
100004657:	je	0x100004678
100004659:	mov	rdi, r14
10000465c:	call	0x100002df1
100004661:	mov	rdi, rax
100004664:	call	0x100003ed4
100004669:	jmp	0x10000468e
10000466b:	cmp	byte ptr [rbx + 0xc], 0x0
10000466f:	je	0x10000468e
100004671:	test	rax, rax
100004674:	jne	0x100004686
100004676:	jmp	0x10000467e
100004678:	cmp	byte ptr [rbx + 0xc], 0x0
10000467c:	je	0x1000046d7
10000467e:	mov	rdi, r14
100004681:	call	0x100002df1
100004686:	mov	rdi, rax
100004689:	call	0x100003dad
10000468e:	cmp	byte ptr [rbx + 0xa], 0x0
100004692:	jne	0x10000469a
100004694:	cmp	byte ptr [rbx + 0xd], 0x0
100004698:	je	0x1000046af
10000469a:	test	rax, rax
10000469d:	jne	0x1000046a7
10000469f:	mov	rdi, r14
1000046a2:	call	0x100002df1
1000046a7:	mov	rdi, rax
1000046aa:	call	0x10000402f
1000046af:	mov	rdi, r15
1000046b2:	test	rax, rax
1000046b5:	je	0x1000046bc
1000046b7:	mov	rsi, rax
1000046ba:	jmp	0x1000046bf
1000046bc:	mov	rsi, r14
1000046bf:	xor	edx, edx
1000046c1:	call	0x10000420b
1000046c6:	xor	eax, eax
1000046c8:	add	rsp, 0x28
1000046cc:	pop	rbx
1000046cd:	pop	r12
1000046cf:	pop	r13
1000046d1:	pop	r14
1000046d3:	pop	r15
1000046d5:	pop	rbp
1000046d6:	ret
1000046d7:	xor	eax, eax
1000046d9:	jmp	0x10000468e
1000046db:	push	rbp
1000046dc:	mov	rbp, rsp
1000046df:	cmp	byte ptr [rdi + 0xe], 0x0
1000046e3:	je	0x1000046ee
1000046e5:	lea	rax, [rip + 0x56]
1000046ec:	jmp	0x100004740
1000046ee:	cmp	byte ptr [rdi + 0x12], 0x0
1000046f2:	je	0x1000046fd
1000046f4:	lea	rax, [rip + 0x53]
1000046fb:	jmp	0x100004740
1000046fd:	cmp	byte ptr [rdi + 0xb], 0x0
100004701:	je	0x10000470c
100004703:	lea	rax, [rip + 0x53]
10000470a:	jmp	0x100004740
10000470c:	cmp	byte ptr [rdi + 0xd], 0x0
100004710:	je	0x10000471b
100004712:	lea	rax, [rip + 0x3b6]
100004719:	jmp	0x100004740
10000471b:	cmp	byte ptr [rdi + 0x10], 0x0
10000471f:	je	0x10000472a
100004721:	lea	rax, [rip + 0x4b5]
100004728:	jmp	0x100004740
10000472a:	cmp	byte ptr [rdi + 0x11], 0x0
10000472e:	lea	rcx, [rip + 0x753]
100004735:	lea	rax, [rip + 0x6d2]
10000473c:	cmove	rax, rcx
100004740:	pop	rbp
100004741:	ret
100004742:	push	rbp
100004743:	mov	rbp, rsp
100004746:	xor	edx, edx
100004748:	pop	rbp
100004749:	jmp	0x100005598
10000474e:	push	rbp
10000474f:	mov	rbp, rsp
100004752:	mov	edx, 0x1
100004757:	pop	rbp
100004758:	jmp	0x100005598
10000475d:	push	rbp
10000475e:	mov	rbp, rsp
100004761:	push	r15
100004763:	push	r14
100004765:	push	r13
100004767:	push	r12
100004769:	push	rbx
10000476a:	sub	rsp, 0x28
10000476e:	mov	r14, rsi
100004771:	mov	rbx, rdi
100004774:	lea	rax, [rip + 0xc29d]
10000477b:	cmp	byte ptr [rax], 0x0
10000477e:	je	0x1000047ba
100004780:	mov	r12, qword ptr [rip + 0x78a1] ## literal pool symbol address: ___stdoutp
100004787:	mov	rdi, qword ptr [r12]
10000478b:	mov	rsi, qword ptr [rbx]
10000478e:	lea	rdx, [rip + 0x6e89] ## literal pool for: "; k1=<"
100004795:	lea	r15, [rip + 0x6e36] ## literal pool for: ">"
10000479c:	mov	rcx, r15
10000479f:	call	0x100002cfa
1000047a4:	mov	rdi, qword ptr [r12]
1000047a8:	mov	rsi, qword ptr [r14]
1000047ab:	lea	rdx, [rip + 0x6e80] ## literal pool for: "; k2=<"
1000047b2:	mov	rcx, r15
1000047b5:	call	0x100002cfa
1000047ba:	mov	r12d, dword ptr [rbx + 0x8]
1000047be:	xor	esi, esi
1000047c0:	xorpd	xmm0, xmm0
1000047c4:	xorpd	xmm1, xmm1
1000047c8:	movsd	qword ptr [rbp - 0x48], xmm1
1000047cd:	mov	r15d, 0x0
1000047d3:	test	r12d, r12d
1000047d6:	jne	0x100004843
1000047d8:	call	0x10000ada6 ## symbol stub for: ___error
1000047dd:	mov	dword ptr [rax], 0x0
1000047e3:	mov	rdi, qword ptr [rbx]
1000047e6:	lea	r15, [rbp - 0x2a]
1000047ea:	mov	rsi, r15
1000047ed:	call	0x100003a23
1000047f2:	movsd	qword ptr [rbp - 0x48], xmm0
1000047f7:	call	0x10000ada6 ## symbol stub for: ___error
1000047fc:	mov	eax, dword ptr [rax]
1000047fe:	cmp	byte ptr [r15], 0x0
100004802:	je	0x100004811
100004804:	mov	byte ptr [rbx + 0x19], 0x1
100004808:	xorpd	xmm0, xmm0
10000480c:	mov	r15d, eax
10000480f:	jmp	0x100004841
100004811:	test	eax, eax
100004813:	je	0x100004821
100004815:	mov	r15d, eax
100004818:	mov	dword ptr [rbx + 0x8], 0xffffffff
10000481f:	jmp	0x10000483d
100004821:	movsd	xmm0, qword ptr [rbp - 0x48]
100004826:	ucomisd	xmm0, xmm0
10000482a:	movsd	qword ptr [rbx + 0x10], xmm0
10000482f:	setp	byte ptr [rbx + 0x18]
100004833:	mov	dword ptr [rbx + 0x8], 0x1
10000483a:	xor	r15d, r15d
10000483d:	xorpd	xmm0, xmm0
100004841:	xor	esi, esi
100004843:	mov	r13d, dword ptr [r14 + 0x8]
100004847:	test	r13d, r13d
10000484a:	jne	0x10000489c
10000484c:	mov	dword ptr [rbp - 0x3c], r15d
100004850:	call	0x10000ada6 ## symbol stub for: ___error
100004855:	mov	dword ptr [rax], 0x0
10000485b:	mov	rdi, qword ptr [r14]
10000485e:	lea	r15, [rbp - 0x29]
100004862:	mov	rsi, r15
100004865:	call	0x100003a23
10000486a:	movsd	qword ptr [rbp - 0x38], xmm0
10000486f:	call	0x10000ada6 ## symbol stub for: ___error
100004874:	mov	esi, dword ptr [rax]
100004876:	cmp	byte ptr [r15], 0x0
10000487a:	je	0x100004883
10000487c:	mov	byte ptr [r14 + 0x19], 0x1
100004881:	jmp	0x100004893
100004883:	test	esi, esi
100004885:	je	0x1000049d4
10000488b:	mov	dword ptr [r14 + 0x8], 0xffffffff
100004893:	movsd	xmm0, qword ptr [rbp - 0x38]
100004898:	mov	r15d, dword ptr [rbp - 0x3c]
10000489c:	cmp	dword ptr [rbx + 0x8], 0x1
1000048a0:	jne	0x1000048bf
1000048a2:	cmp	dword ptr [r14 + 0x8], 0x1
1000048a7:	jne	0x1000048bf
1000048a9:	cmp	byte ptr [rbx + 0x19], 0x0
1000048ad:	je	0x100004989
1000048b3:	movsx	eax, byte ptr [r14 + 0x19]
1000048b8:	dec	eax
1000048ba:	jmp	0x100004a9a
1000048bf:	movsd	qword ptr [rbp - 0x38], xmm0
1000048c4:	test	r12d, r12d
1000048c7:	je	0x1000048f3
1000048c9:	mov	r15d, esi
1000048cc:	call	0x10000ada6 ## symbol stub for: ___error
1000048d1:	mov	dword ptr [rax], 0x0
1000048d7:	mov	rdi, qword ptr [rbx]
1000048da:	lea	rsi, [rbp - 0x2a]
1000048de:	call	0x100003a23
1000048e3:	movsd	qword ptr [rbp - 0x48], xmm0
1000048e8:	call	0x10000ada6 ## symbol stub for: ___error
1000048ed:	mov	esi, r15d
1000048f0:	mov	r15d, dword ptr [rax]
1000048f3:	test	r13d, r13d
1000048f6:	je	0x10000491b
1000048f8:	call	0x10000ada6 ## symbol stub for: ___error
1000048fd:	mov	dword ptr [rax], 0x0
100004903:	mov	rdi, qword ptr [r14]
100004906:	lea	rsi, [rbp - 0x29]
10000490a:	call	0x100003a23
10000490f:	movsd	qword ptr [rbp - 0x38], xmm0
100004914:	call	0x10000ada6 ## symbol stub for: ___error
100004919:	mov	esi, dword ptr [rax]
10000491b:	cmp	byte ptr [rbp - 0x2a], 0x0
10000491f:	movsx	ecx, byte ptr [rbp - 0x29]
100004923:	je	0x10000492e
100004925:	dec	ecx
100004927:	mov	eax, ecx
100004929:	jmp	0x100004a9a
10000492e:	mov	eax, 0x1
100004933:	test	cl, cl
100004935:	jne	0x100004a9a
10000493b:	movsd	xmm0, qword ptr [rbp - 0x48]
100004940:	ucomisd	xmm0, xmm0
100004944:	jp	0x100004aa9
10000494a:	movsd	xmm1, qword ptr [rbp - 0x38]
10000494f:	ucomisd	xmm1, xmm1
100004953:	jp	0x100004a9a
100004959:	cmp	r15d, 0x22
10000495d:	je	0x1000049f7
100004963:	cmp	esi, 0x22
100004966:	je	0x1000049f7
10000496c:	mov	eax, 0xffffffff
100004971:	ucomisd	xmm1, xmm0
100004975:	ja	0x100004a9a
10000497b:	xor	eax, eax
10000497d:	ucomisd	xmm0, xmm1
100004981:	seta	al
100004984:	jmp	0x100004a9a
100004989:	mov	eax, 0x1
10000498e:	cmp	byte ptr [r14 + 0x19], 0x0
100004993:	jne	0x100004a9a
100004999:	cmp	byte ptr [rbx + 0x18], 0x0
10000499d:	mov	cl, byte ptr [r14 + 0x18]
1000049a1:	je	0x100004a6b
1000049a7:	test	cl, cl
1000049a9:	je	0x100004a7f
1000049af:	movsd	xmm0, qword ptr [rbx + 0x10]
1000049b4:	movsd	xmm1, qword ptr [r14 + 0x10]
1000049ba:	xor	ecx, ecx
1000049bc:	ucomisd	xmm0, xmm1
1000049c0:	seta	cl
1000049c3:	ucomisd	xmm1, xmm0
1000049c7:	mov	eax, 0xffffffff
1000049cc:	cmovbe	eax, ecx
1000049cf:	jmp	0x100004a9a
1000049d4:	movsd	xmm0, qword ptr [rbp - 0x38]
1000049d9:	ucomisd	xmm0, xmm0
1000049dd:	movsd	qword ptr [r14 + 0x10], xmm0
1000049e3:	setp	byte ptr [r14 + 0x18]
1000049e8:	mov	dword ptr [r14 + 0x8], 0x1
1000049f0:	xor	esi, esi
1000049f2:	jmp	0x100004898
1000049f7:	cmp	esi, 0x22
1000049fa:	sete	dl
1000049fd:	movsd	xmm0, qword ptr [rip + 0x6b2b]
100004a05:	ucomisd	xmm0, xmm1
100004a09:	setae	cl
100004a0c:	and	cl, dl
100004a0e:	ucomisd	xmm0, qword ptr [rbp - 0x48]
100004a13:	movsd	xmm2, qword ptr [rbp - 0x48]
100004a18:	jb	0x100004a39
100004a1a:	cmp	r15d, 0x22
100004a1e:	jne	0x100004a39
100004a20:	ucomisd	xmm1, qword ptr [rip + 0x6b08]
100004a28:	not	cl
100004a2a:	seta	al
100004a2d:	or	al, cl
100004a2f:	movzx	eax, al
100004a32:	and	eax, 0x1
100004a35:	neg	eax
100004a37:	jmp	0x100004a9a
100004a39:	test	cl, cl
100004a3b:	jne	0x100004a9a
100004a3d:	cmp	esi, 0x22
100004a40:	sete	cl
100004a43:	movsd	xmm0, qword ptr [rip + 0x6aed]
100004a4b:	ucomisd	xmm1, xmm0
100004a4f:	setae	al
100004a52:	and	al, cl
100004a54:	ucomisd	xmm2, xmm0
100004a58:	movapd	xmm0, xmm2
100004a5c:	jb	0x100004a86
100004a5e:	cmp	r15d, 0x22
100004a62:	jne	0x100004a86
100004a64:	xor	al, 0x1
100004a66:	movzx	eax, al
100004a69:	jmp	0x100004a9a
100004a6b:	test	cl, cl
100004a6d:	jne	0x100004a9a
100004a6f:	movsd	xmm0, qword ptr [rbx + 0x10]
100004a74:	movsd	xmm1, qword ptr [r14 + 0x10]
100004a7a:	jmp	0x10000496c
100004a7f:	mov	eax, 0xffffffff
100004a84:	jmp	0x100004a9a
100004a86:	ucomisd	xmm1, xmm0
100004a8a:	seta	cl
100004a8d:	or	cl, al
100004a8f:	mov	eax, 0xffffffff
100004a94:	je	0x10000497b
100004a9a:	add	rsp, 0x28
100004a9e:	pop	rbx
100004a9f:	pop	r12
100004aa1:	pop	r13
100004aa3:	pop	r14
100004aa5:	pop	r15
100004aa7:	pop	rbp
100004aa8:	ret
100004aa9:	mov	eax, 0xffffffff
100004aae:	movapd	xmm1, xmm0
100004ab2:	movsd	xmm0, qword ptr [rbp - 0x38]
100004ab7:	ucomisd	xmm0, xmm0
100004abb:	jnp	0x100004a9a
100004abd:	xor	ecx, ecx
100004abf:	ucomisd	xmm1, xmm0
100004ac3:	seta	cl
100004ac6:	ucomisd	xmm0, xmm1
100004aca:	jmp	0x1000049c7
100004acf:	push	rbp
100004ad0:	mov	rbp, rsp
100004ad3:	push	r15
100004ad5:	push	r14
100004ad7:	push	r13
100004ad9:	push	r12
100004adb:	push	rbx
100004adc:	push	rax
100004add:	mov	r14, rsi
100004ae0:	mov	rbx, rdi
100004ae3:	lea	rax, [rip + 0xbf2e]
100004aea:	cmp	byte ptr [rax], 0x0
100004aed:	je	0x100004b29
100004aef:	mov	r12, qword ptr [rip + 0x7532] ## literal pool symbol address: ___stdoutp
100004af6:	mov	rdi, qword ptr [r12]
100004afa:	mov	rsi, qword ptr [rbx]
100004afd:	lea	rdx, [rip + 0x6b1a] ## literal pool for: "; k1=<"
100004b04:	lea	r15, [rip + 0x6ac7] ## literal pool for: ">"
100004b0b:	mov	rcx, r15
100004b0e:	call	0x100002cfa
100004b13:	mov	rdi, qword ptr [r12]
100004b17:	mov	rsi, qword ptr [r14]
100004b1a:	lea	rdx, [rip + 0x6b11] ## literal pool for: "; k2=<"
100004b21:	mov	rcx, r15
100004b24:	call	0x100002cfa
100004b29:	mov	ecx, dword ptr [rbx + 0x8]
100004b2c:	test	ecx, ecx
100004b2e:	sete	dl
100004b31:	jne	0x100004b50
100004b33:	mov	r15d, edx
100004b36:	mov	rdi, qword ptr [rbx]
100004b39:	call	0x100003b37
100004b3e:	mov	edx, r15d
100004b41:	mov	dword ptr [rbx + 0x10], eax
100004b44:	mov	dword ptr [rbx + 0x8], 0x1
100004b4b:	mov	ecx, 0x1
100004b50:	mov	eax, dword ptr [r14 + 0x8]
100004b54:	test	eax, eax
100004b56:	sete	r13b
100004b5a:	jne	0x100004b7e
100004b5c:	mov	r15d, edx
100004b5f:	mov	rdi, qword ptr [r14]
100004b62:	call	0x100003b37
100004b67:	mov	edx, r15d
100004b6a:	mov	dword ptr [r14 + 0x10], eax
100004b6e:	mov	dword ptr [r14 + 0x8], 0x1
100004b76:	mov	ecx, dword ptr [rbx + 0x8]
100004b79:	mov	eax, 0x1
100004b7e:	xor	r15d, r15d
100004b81:	mov	r12d, 0x0
100004b87:	cmp	ecx, 0x1
100004b8a:	jne	0x100004b92
100004b8c:	mov	r12d, dword ptr [rbx + 0x10]
100004b90:	mov	dl, 0x1
100004b92:	cmp	eax, 0x1
100004b95:	jne	0x100004b9e
100004b97:	mov	r15d, dword ptr [r14 + 0x10]
100004b9b:	mov	r13b, 0x1
100004b9e:	test	dl, dl
100004ba0:	jne	0x100004bad
100004ba2:	mov	rdi, qword ptr [rbx]
100004ba5:	call	0x100003b37
100004baa:	mov	r12d, eax
100004bad:	test	r13b, r13b
100004bb0:	jne	0x100004bbd
100004bb2:	mov	rdi, qword ptr [r14]
100004bb5:	call	0x100003b37
100004bba:	mov	r15d, eax
100004bbd:	xor	ecx, ecx
100004bbf:	xor	eax, eax
100004bc1:	cmp	r12d, r15d
100004bc4:	setge	al
100004bc7:	lea	eax, [rax + rax - 0x1]
100004bcb:	cmove	eax, ecx
100004bce:	add	rsp, 0x8
100004bd2:	pop	rbx
100004bd3:	pop	r12
100004bd5:	pop	r13
100004bd7:	pop	r14
100004bd9:	pop	r15
100004bdb:	pop	rbp
100004bdc:	ret
100004bdd:	push	rbp
100004bde:	mov	rbp, rsp
100004be1:	push	r15
100004be3:	push	r14
100004be5:	push	r13
100004be7:	push	r12
100004be9:	push	rbx
100004bea:	sub	rsp, 0xf8
100004bf1:	mov	r12, rsi
100004bf4:	mov	r14, rdi
100004bf7:	mov	rax, qword ptr [rip + 0x7412] ## literal pool symbol address: ___stack_chk_guard
100004bfe:	mov	rax, qword ptr [rax]
100004c01:	mov	qword ptr [rbp - 0x30], rax
100004c05:	mov	r13, qword ptr [rdi]
100004c08:	mov	rbx, qword ptr [rsi]
100004c0b:	lea	rax, [rip + 0xbe06]
100004c12:	cmp	byte ptr [rax], 0x0
100004c15:	je	0x100004c50
100004c17:	mov	r15, qword ptr [rip + 0x740a] ## literal pool symbol address: ___stdoutp
100004c1e:	mov	rdi, qword ptr [r15]
100004c21:	lea	rdx, [rip + 0x69f6] ## literal pool for: "; k1=<"
100004c28:	lea	rcx, [rip + 0x69a3] ## literal pool for: ">"
100004c2f:	mov	rsi, r13
100004c32:	call	0x100002cfa
100004c37:	mov	rdi, qword ptr [r15]
100004c3a:	lea	rdx, [rip + 0x69ea] ## literal pool for: ", k2=<"
100004c41:	mov	rsi, rbx
100004c44:	lea	rcx, [rip + 0x6987] ## literal pool for: ">"
100004c4b:	call	0x100002cfa
100004c50:	xor	eax, eax
100004c52:	cmp	r13, rbx
100004c55:	je	0x100004de7
100004c5b:	cmp	dword ptr [r14 + 0x8], 0x1
100004c60:	jne	0x100004ca6
100004c62:	cmp	dword ptr [r12 + 0x8], 0x1
100004c68:	jne	0x100004ca6
100004c6a:	mov	rcx, qword ptr [r14 + 0x10]
100004c6e:	bswap	rcx
100004c71:	mov	rdx, qword ptr [r12 + 0x10]
100004c76:	bswap	rdx
100004c79:	cmp	rcx, rdx
100004c7c:	jne	0x100004c92
100004c7e:	mov	ecx, dword ptr [r14 + 0x18]
100004c82:	mov	edx, dword ptr [r12 + 0x18]
100004c87:	bswap	ecx
100004c89:	bswap	edx
100004c8b:	xor	eax, eax
100004c8d:	cmp	rcx, rdx
100004c90:	je	0x100004c9e
100004c92:	xor	eax, eax
100004c94:	cmp	rcx, rdx
100004c97:	setae	al
100004c9a:	add	eax, eax
100004c9c:	dec	eax
100004c9e:	test	eax, eax
100004ca0:	jne	0x100004de7
100004ca6:	mov	qword ptr [rbp - 0x60], r12
100004caa:	lea	rax, [rip + 0xbd6b]
100004cb1:	movups	xmm0, xmmword ptr [rax + 0x4c]
100004cb5:	mov	qword ptr [rbp - 0x58], r14
100004cb9:	lea	r12, [rbp - 0x120]
100004cc0:	movups	xmmword ptr [r12 + 0x4c], xmm0
100004cc6:	movups	xmm1, xmmword ptr [rax + 0x40]
100004cca:	movaps	xmmword ptr [r12 + 0x40], xmm1
100004cd0:	movups	xmm2, xmmword ptr [rax]
100004cd3:	movups	xmm3, xmmword ptr [rax + 0x10]
100004cd7:	movups	xmm4, xmmword ptr [rax + 0x20]
100004cdb:	movups	xmm5, xmmword ptr [rax + 0x30]
100004cdf:	movaps	xmmword ptr [r12 + 0x30], xmm5
100004ce5:	movaps	xmmword ptr [r12 + 0x20], xmm4
100004ceb:	movaps	xmmword ptr [r12 + 0x10], xmm3
100004cf1:	movaps	xmmword ptr [r12], xmm2
100004cf6:	lea	r14, [rbp - 0xc0]
100004cfd:	movaps	xmmword ptr [r14], xmm2
100004d01:	movaps	xmmword ptr [r14 + 0x10], xmm3
100004d06:	movaps	xmmword ptr [r14 + 0x20], xmm4
100004d0b:	movaps	xmmword ptr [r14 + 0x30], xmm5
100004d10:	movaps	xmmword ptr [r14 + 0x40], xmm1
100004d15:	movups	xmmword ptr [r14 + 0x4c], xmm0
100004d1a:	mov	rdi, r13
100004d1d:	call	0x100002d30
100004d22:	mov	r15, rax
100004d25:	mov	rdi, r13
100004d28:	call	0x100002d3a
100004d2d:	mov	rdi, r12
100004d30:	mov	rsi, r15
100004d33:	mov	edx, eax
100004d35:	call	0x10000ad9a ## symbol stub for: _CC_MD5_Update
100004d3a:	mov	rdi, rbx
100004d3d:	call	0x100002d30
100004d42:	mov	r15, rax
100004d45:	mov	rdi, rbx
100004d48:	call	0x100002d3a
100004d4d:	mov	rdi, r14
100004d50:	mov	rsi, r15
100004d53:	mov	edx, eax
100004d55:	call	0x10000ad9a ## symbol stub for: _CC_MD5_Update
100004d5a:	lea	rdi, [rbp - 0x40]
100004d5e:	mov	rsi, r12
100004d61:	mov	rbx, qword ptr [rbp - 0x58]
100004d65:	call	0x10000ad8e ## symbol stub for: _CC_MD5_Final
100004d6a:	lea	rdi, [rbp - 0x50]
100004d6e:	mov	rsi, r14
100004d71:	call	0x10000ad8e ## symbol stub for: _CC_MD5_Final
100004d76:	cmp	dword ptr [rbx + 0x8], 0x0
100004d7a:	jne	0x100004d91
100004d7c:	mov	eax, dword ptr [rbp - 0x38]
100004d7f:	mov	dword ptr [rbx + 0x18], eax
100004d82:	mov	rax, qword ptr [rbp - 0x40]
100004d86:	mov	qword ptr [rbx + 0x10], rax
100004d8a:	mov	dword ptr [rbx + 0x8], 0x1
100004d91:	mov	rcx, qword ptr [rbp - 0x60]
100004d95:	cmp	dword ptr [rcx + 0x8], 0x0
100004d99:	jne	0x100004db0
100004d9b:	mov	eax, dword ptr [rbp - 0x48]
100004d9e:	mov	dword ptr [rcx + 0x18], eax
100004da1:	mov	rax, qword ptr [rbp - 0x50]
100004da5:	mov	qword ptr [rcx + 0x10], rax
100004da9:	mov	dword ptr [rcx + 0x8], 0x1
100004db0:	mov	rcx, qword ptr [rbp - 0x40]
100004db4:	bswap	rcx
100004db7:	mov	rdx, qword ptr [rbp - 0x50]
100004dbb:	bswap	rdx
100004dbe:	cmp	rcx, rdx
100004dc1:	jne	0x100004ddb
100004dc3:	mov	rcx, qword ptr [rbp - 0x38]
100004dc7:	mov	rdx, qword ptr [rbp - 0x48]
100004dcb:	bswap	rcx
100004dce:	bswap	rdx
100004dd1:	mov	eax, 0x0
100004dd6:	cmp	rcx, rdx
100004dd9:	je	0x100004de7
100004ddb:	xor	eax, eax
100004ddd:	cmp	rcx, rdx
100004de0:	setae	al
100004de3:	add	eax, eax
100004de5:	dec	eax
100004de7:	mov	rcx, qword ptr [rip + 0x7222] ## literal pool symbol address: ___stack_chk_guard
100004dee:	mov	rcx, qword ptr [rcx]
100004df1:	cmp	rcx, qword ptr [rbp - 0x30]
100004df5:	jne	0x100004e09
100004df7:	add	rsp, 0xf8
100004dfe:	pop	rbx
100004dff:	pop	r12
100004e01:	pop	r13
100004e03:	pop	r14
100004e05:	pop	r15
100004e07:	pop	rbp
100004e08:	ret
100004e09:	call	0x10000adb8 ## symbol stub for: ___stack_chk_fail
100004e0e:	push	rbp
100004e0f:	mov	rbp, rsp
100004e12:	push	r15
100004e14:	push	r14
100004e16:	push	r12
100004e18:	push	rbx
100004e19:	mov	rbx, qword ptr [rdi]
100004e1c:	mov	r14, qword ptr [rsi]
100004e1f:	lea	rax, [rip + 0xbbf2]
100004e26:	cmp	byte ptr [rax], 0x0
100004e29:	je	0x100004e65
100004e2b:	mov	r12, qword ptr [rip + 0x71f6] ## literal pool symbol address: ___stdoutp
100004e32:	mov	rdi, qword ptr [r12]
100004e36:	lea	rdx, [rip + 0x67e1] ## literal pool for: "; k1=<"
100004e3d:	lea	r15, [rip + 0x678e] ## literal pool for: ">"
100004e44:	mov	rsi, rbx
100004e47:	mov	rcx, r15
100004e4a:	call	0x100002cfa
100004e4f:	mov	rdi, qword ptr [r12]
100004e53:	lea	rdx, [rip + 0x67d1] ## literal pool for: ", k2=<"
100004e5a:	mov	rsi, r14
100004e5d:	mov	rcx, r15
100004e60:	call	0x100002cfa
100004e65:	cmp	rbx, r14
100004e68:	je	0x100004e7d
100004e6a:	mov	rdi, rbx
100004e6d:	mov	rsi, r14
100004e70:	pop	rbx
100004e71:	pop	r12
100004e73:	pop	r14
100004e75:	pop	r15
100004e77:	pop	rbp
100004e78:	jmp	0x10000a45d
100004e7d:	xor	eax, eax
100004e7f:	pop	rbx
100004e80:	pop	r12
100004e82:	pop	r14
100004e84:	pop	r15
100004e86:	pop	rbp
100004e87:	ret
100004e88:	push	rbp
100004e89:	mov	rbp, rsp
100004e8c:	push	r15
100004e8e:	push	r14
100004e90:	push	r13
100004e92:	push	r12
100004e94:	push	rbx
100004e95:	push	rax
100004e96:	mov	r14, rdx
100004e99:	mov	r15, rsi
100004e9c:	mov	rbx, rdi
100004e9f:	lea	rax, [rip + 0xbb72]
100004ea6:	cmp	byte ptr [rax], 0x0
100004ea9:	je	0x100004f23
100004eab:	test	r14, r14
100004eae:	je	0x100004ec1
100004eb0:	lea	rdi, [rip + 0x675a] ## literal pool for: "; offset=%d\n"
100004eb7:	mov	esi, r14d
100004eba:	xor	eax, eax
100004ebc:	call	0x10000aede ## symbol stub for: _printf
100004ec1:	mov	r12, qword ptr [rip + 0x7160] ## literal pool symbol address: ___stdoutp
100004ec8:	mov	rdi, qword ptr [r12]
100004ecc:	mov	rsi, qword ptr [rbx]
100004ecf:	lea	rdx, [rip + 0x6748] ## literal pool for: "; k1=<"
100004ed6:	lea	rcx, [rip + 0x66f5] ## literal pool for: ">"
100004edd:	call	0x100002cfa
100004ee2:	mov	rax, qword ptr [rbx]
100004ee5:	mov	rsi, qword ptr [rax]
100004ee8:	lea	r13, [rip + 0x6736] ## literal pool for: "(%zu)"
100004eef:	mov	rdi, r13
100004ef2:	xor	eax, eax
100004ef4:	call	0x10000aede ## symbol stub for: _printf
100004ef9:	mov	rdi, qword ptr [r12]
100004efd:	mov	rsi, qword ptr [r15]
100004f00:	lea	rdx, [rip + 0x6724] ## literal pool for: ", k2=<"
100004f07:	lea	rcx, [rip + 0x66c4] ## literal pool for: ">"
100004f0e:	call	0x100002cfa
100004f13:	mov	rax, qword ptr [r15]
100004f16:	mov	rsi, qword ptr [rax]
100004f19:	mov	rdi, r13
100004f1c:	xor	eax, eax
100004f1e:	call	0x10000aede ## symbol stub for: _printf
100004f23:	mov	rdi, qword ptr [rbx]
100004f26:	mov	rsi, qword ptr [r15]
100004f29:	mov	rdx, r14
100004f2c:	add	rsp, 0x8
100004f30:	pop	rbx
100004f31:	pop	r12
100004f33:	pop	r13
100004f35:	pop	r14
100004f37:	pop	r15
100004f39:	pop	rbp
100004f3a:	jmp	0x1000036e3
100004f3f:	push	rbp
100004f40:	mov	rbp, rsp
100004f43:	push	r15
100004f45:	push	r14
100004f47:	push	r13
100004f49:	push	r12
100004f4b:	push	rbx
100004f4c:	push	rax
100004f4d:	cmp	qword ptr [rip + 0xba93], 0x0
100004f55:	je	0x100004fc4
100004f57:	mov	rax, rdx
100004f5a:	mov	r14, rsi
100004f5d:	mov	r15, rdi
100004f60:	xor	r13d, r13d
100004f63:	lea	r12, [rip + 0xbb0e]
100004f6a:	xor	ebx, ebx
100004f6c:	cmp	byte ptr [r12], 0x0
100004f71:	mov	ecx, 0x8
100004f76:	je	0x100004f7d
100004f78:	mov	ecx, 0x20
100004f7d:	imul	rcx, rbx
100004f81:	lea	rsi, [r15 + rcx]
100004f85:	add	rcx, r14
100004f88:	mov	rdx, qword ptr [rip + 0xba69]
100004f8f:	cmp	byte ptr [rdx + r13 + 0xf], 0x0
100004f95:	mov	r8, qword ptr [rdx + r13]
100004f99:	je	0x100004fa0
100004f9b:	mov	rdi, rcx
100004f9e:	jmp	0x100004fa6
100004fa0:	mov	rdi, rsi
100004fa3:	mov	rsi, rcx
100004fa6:	mov	rdx, rax
100004fa9:	call	r8
100004fac:	test	eax, eax
100004fae:	jne	0x100004fc6
100004fb0:	inc	rbx
100004fb3:	add	r13, 0x40
100004fb7:	xor	eax, eax
100004fb9:	cmp	rbx, qword ptr [rip + 0xba28]
100004fc0:	jb	0x100004f6c
100004fc2:	jmp	0x100004fc6
100004fc4:	xor	eax, eax
100004fc6:	add	rsp, 0x8
100004fca:	pop	rbx
100004fcb:	pop	r12
100004fcd:	pop	r13
100004fcf:	pop	r14
100004fd1:	pop	r15
100004fd3:	pop	rbp
100004fd4:	ret
100004fd5:	push	rbp
100004fd6:	mov	rbp, rsp
100004fd9:	lea	rax, [rip + 0x7138]
100004fe0:	mov	rax, qword ptr [rax]
100004fe3:	cmp	byte ptr [rax + 0xf], 0x0
100004fe7:	mov	rax, rdi
100004fea:	cmove	rax, rsi
100004fee:	cmovne	rdi, rsi
100004ff2:	mov	rsi, rax
100004ff5:	xor	edx, edx
100004ff7:	pop	rbp
100004ff8:	jmp	0x1000036e3
100004ffd:	push	rbp
100004ffe:	mov	rbp, rsp
100005001:	push	r15
100005003:	push	r14
100005005:	push	r13
100005007:	push	r12
100005009:	push	rbx
10000500a:	push	rax
10000500b:	mov	r15, rsi
10000500e:	mov	r14, rdi
100005011:	call	0x1000040e4
100005016:	mov	rbx, rax
100005019:	mov	rdi, r14
10000501c:	mov	rsi, rax
10000501f:	call	0x1000043ea
100005024:	mov	rsi, qword ptr [r15]
100005027:	mov	rdi, qword ptr [rsi]
10000502a:	add	rsi, 0x8
10000502e:	call	0x1000043ea
100005033:	lea	r13, [rip + 0xb9de]
10000503a:	cmp	byte ptr [r13], 0x0
10000503f:	je	0x100005085
100005041:	mov	r13, qword ptr [rip + 0x6fe0] ## literal pool symbol address: ___stdoutp
100005048:	mov	rdi, qword ptr [r13]
10000504c:	lea	rdx, [rip + 0x6578] ## literal pool for: "; s1=<"
100005053:	lea	r12, [rip + 0x6578] ## literal pool for: ">"
10000505a:	mov	rsi, r14
10000505d:	mov	rcx, r12
100005060:	call	0x100002cfa
100005065:	mov	rdi, qword ptr [r13]
100005069:	lea	r13, [rip + 0xb9a8]
100005070:	mov	rax, qword ptr [r15]
100005073:	mov	rsi, qword ptr [rax]
100005076:	lea	rdx, [rip + 0x6557] ## literal pool for: ", s2=<"
10000507d:	mov	rcx, r12
100005080:	call	0x100002cfa
100005085:	mov	rsi, qword ptr [r15]
100005088:	add	rsi, 0x8
10000508c:	mov	rdi, rbx
10000508f:	xor	edx, edx
100005091:	call	0x100004f3f
100005096:	mov	r12d, eax
100005099:	cmp	byte ptr [r13], 0x0
10000509e:	je	0x1000050b1
1000050a0:	lea	rdi, [rip + 0x6534] ## literal pool for: "; cmp1=%d"
1000050a7:	mov	esi, r12d
1000050aa:	xor	eax, eax
1000050ac:	call	0x10000aede ## symbol stub for: _printf
1000050b1:	mov	rdi, r14
1000050b4:	mov	rsi, rbx
1000050b7:	call	0x10000414f
1000050bc:	mov	rdi, rbx
1000050bf:	call	0x1000078e8
1000050c4:	test	r12d, r12d
1000050c7:	je	0x1000050ec
1000050c9:	cmp	byte ptr [r13], 0x0
1000050ce:	je	0x1000050da
1000050d0:	mov	edi, 0xa
1000050d5:	call	0x10000af32 ## symbol stub for: _putchar
1000050da:	mov	eax, r12d
1000050dd:	add	rsp, 0x8
1000050e1:	pop	rbx
1000050e2:	pop	r12
1000050e4:	pop	r13
1000050e6:	pop	r14
1000050e8:	pop	r15
1000050ea:	pop	rbp
1000050eb:	ret
1000050ec:	lea	rax, [rip + 0xb989]
1000050f3:	xor	r12d, r12d
1000050f6:	cmp	byte ptr [rax + 0xc], 0x0
1000050fa:	jne	0x1000050c9
1000050fc:	cmp	byte ptr [rax + 0x10], 0x0
100005100:	je	0x1000050c9
100005102:	mov	rax, qword ptr [r15]
100005105:	mov	rdi, qword ptr [rax]
100005108:	lea	rax, [rip + 0x7009]
10000510f:	mov	rax, qword ptr [rax]
100005112:	cmp	byte ptr [rax + 0xf], 0x0
100005116:	mov	rsi, r14
100005119:	cmove	rsi, rdi
10000511d:	cmove	rdi, r14
100005121:	xor	edx, edx
100005123:	call	0x1000036e3
100005128:	mov	r12d, eax
10000512b:	cmp	byte ptr [r13], 0x0
100005130:	je	0x1000050da
100005132:	lea	rdi, [rip + 0x64ac] ## literal pool for: "; cmp2=%d"
100005139:	mov	esi, r12d
10000513c:	xor	eax, eax
10000513e:	call	0x10000aede ## symbol stub for: _printf
100005143:	jmp	0x1000050c9
100005145:	push	rbp
100005146:	mov	rbp, rsp
100005149:	push	r15
10000514b:	push	r14
10000514d:	push	r13
10000514f:	push	r12
100005151:	push	rbx
100005152:	push	rax
100005153:	mov	rbx, rdx
100005156:	mov	r14, rsi
100005159:	mov	r15, rdi
10000515c:	mov	rdi, qword ptr [rdi]
10000515f:	add	rdi, 0x8
100005163:	mov	rsi, qword ptr [rsi]
100005166:	add	rsi, 0x8
10000516a:	call	0x100004f3f
10000516f:	mov	r12d, eax
100005172:	lea	rax, [rip + 0xb89f]
100005179:	cmp	byte ptr [rax], 0x0
10000517c:	je	0x1000051e4
10000517e:	test	rbx, rbx
100005181:	je	0x100005193
100005183:	lea	rdi, [rip + 0x6465] ## literal pool for: "; offset=%d"
10000518a:	mov	esi, ebx
10000518c:	xor	eax, eax
10000518e:	call	0x10000aede ## symbol stub for: _printf
100005193:	mov	r13, qword ptr [rip + 0x6e8e] ## literal pool symbol address: ___stdoutp
10000519a:	mov	rdi, qword ptr [r13]
10000519e:	mov	rax, qword ptr [r15]
1000051a1:	mov	rsi, qword ptr [rax]
1000051a4:	lea	rdx, [rip + 0x6420] ## literal pool for: "; s1=<"
1000051ab:	lea	rbx, [rip + 0x6420] ## literal pool for: ">"
1000051b2:	mov	rcx, rbx
1000051b5:	call	0x100002cfa
1000051ba:	mov	rdi, qword ptr [r13]
1000051be:	mov	rax, qword ptr [r14]
1000051c1:	mov	rsi, qword ptr [rax]
1000051c4:	lea	rdx, [rip + 0x6409] ## literal pool for: ", s2=<"
1000051cb:	mov	rcx, rbx
1000051ce:	call	0x100002cfa
1000051d3:	lea	rdi, [rip + 0x6421] ## literal pool for: "; cmp1=%d\n"
1000051da:	mov	esi, r12d
1000051dd:	xor	eax, eax
1000051df:	call	0x10000aede ## symbol stub for: _printf
1000051e4:	test	r12d, r12d
1000051e7:	je	0x1000051fb
1000051e9:	mov	eax, r12d
1000051ec:	add	rsp, 0x8
1000051f0:	pop	rbx
1000051f1:	pop	r12
1000051f3:	pop	r13
1000051f5:	pop	r14
1000051f7:	pop	r15
1000051f9:	pop	rbp
1000051fa:	ret
1000051fb:	lea	rax, [rip + 0xb87a]
100005202:	xor	r12d, r12d
100005205:	cmp	byte ptr [rax + 0xc], 0x0
100005209:	jne	0x1000051e9
10000520b:	cmp	byte ptr [rax + 0x10], 0x0
10000520f:	je	0x1000051e9
100005211:	mov	rax, qword ptr [r15]
100005214:	mov	rax, qword ptr [rax]
100005217:	mov	rcx, qword ptr [r14]
10000521a:	mov	rdi, qword ptr [rcx]
10000521d:	lea	rcx, [rip + 0x6ef4]
100005224:	mov	rcx, qword ptr [rcx]
100005227:	cmp	byte ptr [rcx + 0xf], 0x0
10000522b:	mov	rsi, rax
10000522e:	cmove	rsi, rdi
100005232:	cmove	rdi, rax
100005236:	xor	edx, edx
100005238:	call	0x1000036e3
10000523d:	mov	r12d, eax
100005240:	lea	rax, [rip + 0xb7d1]
100005247:	cmp	byte ptr [rax], 0x0
10000524a:	je	0x1000051e9
10000524c:	lea	rdi, [rip + 0x63b3] ## literal pool for: "; cmp2=%d\n"
100005253:	mov	esi, r12d
100005256:	xor	eax, eax
100005258:	call	0x10000aede ## symbol stub for: _printf
10000525d:	jmp	0x1000051e9
10000525f:	push	rbp
100005260:	mov	rbp, rsp
100005263:	xor	edx, edx
100005265:	pop	rbp
100005266:	jmp	0x100005145
10000526b:	cmp	rdi, 0x14
10000526f:	ja	0x100005282
100005271:	push	rbp
100005272:	mov	rbp, rsp
100005275:	lea	rax, [rip + 0x6df4]
10000527c:	mov	rax, qword ptr [rax + 8*rdi]
100005280:	pop	rbp
100005281:	ret
100005282:	lea	rax, [rip - 0x2a]
100005289:	ret
10000528a:	push	rbp
10000528b:	mov	rbp, rsp
10000528e:	mov	edx, 0x1
100005293:	pop	rbp
100005294:	jmp	0x100005145
100005299:	push	rbp
10000529a:	mov	rbp, rsp
10000529d:	mov	edx, 0x2
1000052a2:	pop	rbp
1000052a3:	jmp	0x100005145
1000052a8:	push	rbp
1000052a9:	mov	rbp, rsp
1000052ac:	mov	edx, 0x3
1000052b1:	pop	rbp
1000052b2:	jmp	0x100005145
1000052b7:	push	rbp
1000052b8:	mov	rbp, rsp
1000052bb:	mov	edx, 0x4
1000052c0:	pop	rbp
1000052c1:	jmp	0x100005145
1000052c6:	push	rbp
1000052c7:	mov	rbp, rsp
1000052ca:	mov	edx, 0x5
1000052cf:	pop	rbp
1000052d0:	jmp	0x100005145
1000052d5:	push	rbp
1000052d6:	mov	rbp, rsp
1000052d9:	mov	edx, 0x6
1000052de:	pop	rbp
1000052df:	jmp	0x100005145
1000052e4:	push	rbp
1000052e5:	mov	rbp, rsp
1000052e8:	mov	edx, 0x7
1000052ed:	pop	rbp
1000052ee:	jmp	0x100005145
1000052f3:	push	rbp
1000052f4:	mov	rbp, rsp
1000052f7:	mov	edx, 0x8
1000052fc:	pop	rbp
1000052fd:	jmp	0x100005145
100005302:	push	rbp
100005303:	mov	rbp, rsp
100005306:	mov	edx, 0x9
10000530b:	pop	rbp
10000530c:	jmp	0x100005145
100005311:	push	rbp
100005312:	mov	rbp, rsp
100005315:	mov	edx, 0xa
10000531a:	pop	rbp
10000531b:	jmp	0x100005145
100005320:	push	rbp
100005321:	mov	rbp, rsp
100005324:	mov	edx, 0xb
100005329:	pop	rbp
10000532a:	jmp	0x100005145
10000532f:	push	rbp
100005330:	mov	rbp, rsp
100005333:	mov	edx, 0xc
100005338:	pop	rbp
100005339:	jmp	0x100005145
10000533e:	push	rbp
10000533f:	mov	rbp, rsp
100005342:	mov	edx, 0xd
100005347:	pop	rbp
100005348:	jmp	0x100005145
10000534d:	push	rbp
10000534e:	mov	rbp, rsp
100005351:	mov	edx, 0xe
100005356:	pop	rbp
100005357:	jmp	0x100005145
10000535c:	push	rbp
10000535d:	mov	rbp, rsp
100005360:	mov	edx, 0xf
100005365:	pop	rbp
100005366:	jmp	0x100005145
10000536b:	push	rbp
10000536c:	mov	rbp, rsp
10000536f:	mov	edx, 0x10
100005374:	pop	rbp
100005375:	jmp	0x100005145
10000537a:	push	rbp
10000537b:	mov	rbp, rsp
10000537e:	mov	edx, 0x11
100005383:	pop	rbp
100005384:	jmp	0x100005145
100005389:	push	rbp
10000538a:	mov	rbp, rsp
10000538d:	mov	edx, 0x12
100005392:	pop	rbp
100005393:	jmp	0x100005145
100005398:	push	rbp
100005399:	mov	rbp, rsp
10000539c:	mov	edx, 0x13
1000053a1:	pop	rbp
1000053a2:	jmp	0x100005145
1000053a7:	push	rbp
1000053a8:	mov	rbp, rsp
1000053ab:	mov	edx, 0x14
1000053b0:	pop	rbp
1000053b1:	jmp	0x100005145
1000053b6:	push	rbp
1000053b7:	mov	rbp, rsp
1000053ba:	mov	rax, qword ptr [rdi]
1000053bd:	mov	rax, qword ptr [rax]
1000053c0:	mov	rcx, qword ptr [rsi]
1000053c3:	mov	rdi, qword ptr [rcx]
1000053c6:	lea	rcx, [rip + 0x6d4b]
1000053cd:	mov	rcx, qword ptr [rcx]
1000053d0:	cmp	byte ptr [rcx + 0xf], 0x0
1000053d4:	mov	rsi, rax
1000053d7:	cmove	rsi, rdi
1000053db:	cmove	rdi, rax
1000053df:	xor	edx, edx
1000053e1:	pop	rbp
1000053e2:	jmp	0x1000036e3
1000053e7:	push	rbp
1000053e8:	mov	rbp, rsp
1000053eb:	push	r15
1000053ed:	push	r14
1000053ef:	push	r13
1000053f1:	push	r12
1000053f3:	push	rbx
1000053f4:	push	rax
1000053f5:	mov	r12, rdi
1000053f8:	cmp	rsi, 0x1
1000053fc:	ja	0x10000540f
1000053fe:	cmp	qword ptr [r12], 0x0
100005403:	jne	0x100005408
100005405:	mov	byte ptr [rdx], 0x1
100005408:	xor	ebx, ebx
10000540a:	jmp	0x1000054ca
10000540f:	mov	r15, rsi
100005412:	lea	rsi, [rip + 0xb663]
100005419:	cmp	byte ptr [rsi + 0xf], 0x0
10000541d:	mov	rax, qword ptr [r12]
100005421:	je	0x100005466
100005423:	test	rax, rax
100005426:	je	0x1000054c5
10000542c:	mov	rcx, qword ptr [rip + 0x6bd5] ## literal pool symbol address: ___mb_cur_max
100005433:	mov	ecx, dword ptr [rcx]
100005435:	mov	edi, dword ptr [rsi]
100005437:	xor	ebx, ebx
100005439:	cmp	ecx, 0x1
10000543c:	jne	0x100005446
10000543e:	movzx	esi, byte ptr [r12 + rbx + 0x8]
100005444:	jmp	0x10000544b
100005446:	mov	esi, dword ptr [r12 + 4*rbx + 0x8]
10000544b:	cmp	esi, edi
10000544d:	jne	0x10000545c
10000544f:	dec	r15
100005452:	cmp	r15, 0x1
100005456:	jbe	0x1000054dc
10000545c:	inc	rbx
10000545f:	cmp	rbx, rax
100005462:	jb	0x100005439
100005464:	jmp	0x1000054c7
100005466:	test	rax, rax
100005469:	je	0x1000054c5
10000546b:	mov	qword ptr [rbp - 0x30], rdx
10000546f:	mov	cl, 0x1
100005471:	xor	ebx, ebx
100005473:	mov	r14, qword ptr [rip + 0x6b8e] ## literal pool symbol address: ___mb_cur_max
10000547a:	mov	r13d, ecx
10000547d:	cmp	dword ptr [r14], 0x1
100005481:	jne	0x10000548b
100005483:	movzx	edi, byte ptr [r12 + rbx + 0x8]
100005489:	jmp	0x100005490
10000548b:	mov	edi, dword ptr [r12 + 4*rbx + 0x8]
100005490:	lea	rax, [rip + 0xaf99]
100005497:	call	qword ptr [rax]
100005499:	test	eax, eax
10000549b:	setne	cl
10000549e:	test	r13b, r13b
1000054a1:	jne	0x1000054b0
1000054a3:	test	eax, eax
1000054a5:	je	0x1000054b0
1000054a7:	dec	r15
1000054aa:	cmp	r15, 0x2
1000054ae:	jb	0x1000054ca
1000054b0:	inc	rbx
1000054b3:	cmp	rbx, qword ptr [r12]
1000054b7:	jb	0x10000547a
1000054b9:	cmp	r15, 0x2
1000054bd:	mov	rdx, qword ptr [rbp - 0x30]
1000054c1:	jae	0x1000054c7
1000054c3:	jmp	0x1000054ca
1000054c5:	xor	ebx, ebx
1000054c7:	mov	byte ptr [rdx], 0x1
1000054ca:	mov	rax, rbx
1000054cd:	add	rsp, 0x8
1000054d1:	pop	rbx
1000054d2:	pop	r12
1000054d4:	pop	r13
1000054d6:	pop	r14
1000054d8:	pop	r15
1000054da:	pop	rbp
1000054db:	ret
1000054dc:	inc	rbx
1000054df:	jmp	0x1000054ca
1000054e1:	push	rbp
1000054e2:	mov	rbp, rsp
1000054e5:	push	r15
1000054e7:	push	r14
1000054e9:	push	r13
1000054eb:	push	r12
1000054ed:	push	rbx
1000054ee:	push	rax
1000054ef:	mov	r12, rdi
1000054f2:	test	rsi, rsi
1000054f5:	je	0x100005572
1000054f7:	mov	rbx, rdx
1000054fa:	mov	r15, rsi
1000054fd:	test	cl, cl
1000054ff:	mov	qword ptr [rbp - 0x30], r8
100005503:	je	0x10000553d
100005505:	cmp	qword ptr [r12], rbx
100005509:	jbe	0x10000553d
10000550b:	lea	r13, [rip + 0xaf1e]
100005512:	mov	r14, qword ptr [rip + 0x6aef] ## literal pool symbol address: ___mb_cur_max
100005519:	cmp	dword ptr [r14], 0x1
10000551d:	jne	0x100005527
10000551f:	movzx	edi, byte ptr [r12 + rbx + 0x8]
100005525:	jmp	0x10000552c
100005527:	mov	edi, dword ptr [r12 + 4*rbx + 0x8]
10000552c:	call	qword ptr [r13]
100005530:	test	eax, eax
100005532:	je	0x10000553d
100005534:	inc	rbx
100005537:	cmp	rbx, qword ptr [r12]
10000553b:	jb	0x100005519
10000553d:	mov	rcx, qword ptr [r12]
100005541:	cmp	rbx, rcx
100005544:	setb	al
100005547:	cmp	r15, 0x2
10000554b:	jb	0x10000557b
10000554d:	cmp	rbx, rcx
100005550:	jae	0x10000557b
100005552:	dec	r15
100005555:	mov	rdx, qword ptr [rbp - 0x30]
100005559:	inc	rbx
10000555c:	cmp	rbx, rcx
10000555f:	setb	al
100005562:	cmp	r15, 0x2
100005566:	jb	0x10000557f
100005568:	dec	r15
10000556b:	cmp	rbx, rcx
10000556e:	jb	0x100005559
100005570:	jmp	0x10000557f
100005572:	mov	rbx, qword ptr [r12]
100005576:	inc	rbx
100005579:	jmp	0x100005586
10000557b:	mov	rdx, qword ptr [rbp - 0x30]
10000557f:	test	al, al
100005581:	jne	0x100005586
100005583:	mov	byte ptr [rdx], 0x1
100005586:	mov	rax, rbx
100005589:	add	rsp, 0x8
10000558d:	pop	rbx
10000558e:	pop	r12
100005590:	pop	r13
100005592:	pop	r14
100005594:	pop	r15
100005596:	pop	rbp
100005597:	ret
100005598:	push	rbp
100005599:	mov	rbp, rsp
10000559c:	push	r15
10000559e:	push	r14
1000055a0:	push	r13
1000055a2:	push	r12
1000055a4:	push	rbx
1000055a5:	sub	rsp, 0x898
1000055ac:	mov	dword ptr [rbp - 0x884], edx
1000055b2:	mov	rbx, rsi
1000055b5:	mov	rax, qword ptr [rip + 0x6a54] ## literal pool symbol address: ___stack_chk_guard
1000055bc:	mov	rax, qword ptr [rax]
1000055bf:	mov	qword ptr [rbp - 0x30], rax
1000055c3:	mov	r13, qword ptr [rdi]
1000055c6:	mov	r12, qword ptr [rsi]
1000055c9:	xor	r14d, r14d
1000055cc:	mov	dword ptr [rbp - 0x878], r14d
1000055d3:	mov	dword ptr [rbp - 0x87c], r14d
1000055da:	mov	qword ptr [rbp - 0x8a0], r14
1000055e1:	mov	qword ptr [rbp - 0x890], r14
1000055e8:	mov	qword ptr [rbp - 0x8a8], r14
1000055ef:	mov	qword ptr [rbp - 0x898], r14
1000055f6:	lea	rax, [rip + 0xb41b]
1000055fd:	cmp	byte ptr [rax], 0x0
100005600:	je	0x100005648
100005602:	mov	rax, qword ptr [rip + 0x6a1f] ## literal pool symbol address: ___stdoutp
100005609:	mov	r15, rdi
10000560c:	mov	rdi, qword ptr [rax]
10000560f:	lea	rdx, [rip + 0x6008] ## literal pool for: "; k1=<"
100005616:	lea	rcx, [rip + 0x5fb5] ## literal pool for: ">"
10000561d:	mov	rsi, r13
100005620:	call	0x100002cfa
100005625:	mov	rax, qword ptr [rip + 0x69fc] ## literal pool symbol address: ___stdoutp
10000562c:	mov	rdi, qword ptr [rax]
10000562f:	lea	rdx, [rip + 0x5ff5] ## literal pool for: ", k2=<"
100005636:	mov	rsi, r12
100005639:	lea	rcx, [rip + 0x5f92] ## literal pool for: ">"
100005640:	call	0x100002cfa
100005645:	mov	rdi, r15
100005648:	cmp	r13, r12
10000564b:	je	0x100005a2c
100005651:	mov	esi, dword ptr [rdi + 0x8]
100005654:	mov	eax, esi
100005656:	test	esi, esi
100005658:	jne	0x1000056fc
10000565e:	mov	dword ptr [rbp - 0x880], esi
100005664:	lea	rax, [rbp - 0x872]
10000566b:	mov	qword ptr [rsp], rax
10000566f:	lea	rsi, [rbp - 0x87c]
100005676:	lea	r14, [rbp - 0x660]
10000567d:	lea	rcx, [rbp - 0x890]
100005684:	lea	r8, [rbp - 0x240]
10000568b:	lea	r9, [rbp - 0x898]
100005692:	mov	r15, rdi
100005695:	mov	rdi, r13
100005698:	mov	rdx, r14
10000569b:	call	0x100005a56
1000056a0:	mov	rdi, r14
1000056a3:	xor	esi, esi
1000056a5:	mov	edx, 0xa
1000056aa:	call	0x10000b028 ## symbol stub for: _wcstoull
1000056af:	mov	rdi, r15
1000056b2:	mov	qword ptr [r15 + 0x10], rax
1000056b6:	lea	rcx, [rbp - 0x898]
1000056bd:	mov	rcx, qword ptr [rcx]
1000056c0:	lea	rdx, [rbp - 0x890]
1000056c7:	or	rcx, qword ptr [rdx]
1000056ca:	jne	0x1000056d0
1000056cc:	mov	byte ptr [rdi + 0x19], 0x1
1000056d0:	mov	cl, byte ptr [rbp - 0x872]
1000056d6:	mov	byte ptr [rdi + 0x18], cl
1000056d9:	xor	ecx, ecx
1000056db:	cmp	rax, -0x1
1000056df:	setne	cl
1000056e2:	lea	eax, [rcx + rcx]
1000056e5:	dec	eax
1000056e7:	mov	dword ptr [rdi + 0x8], eax
1000056ea:	mov	ecx, dword ptr [rbp - 0x87c]
1000056f0:	shr	ecx, 0x1f
1000056f3:	mov	byte ptr [rdi + 0x1a], cl
1000056f6:	mov	esi, dword ptr [rbp - 0x880]
1000056fc:	mov	r15d, dword ptr [rbx + 0x8]
100005700:	test	r15d, r15d
100005703:	je	0x100005713
100005705:	xor	r10d, r10d
100005708:	xor	r8d, r8d
10000570b:	mov	ecx, r15d
10000570e:	jmp	0x1000057c1
100005713:	mov	dword ptr [rbp - 0x880], esi
100005719:	mov	qword ptr [rbp - 0x8b0], rdi
100005720:	lea	rax, [rbp - 0x871]
100005727:	mov	qword ptr [rsp], rax
10000572b:	lea	rsi, [rbp - 0x878]
100005732:	lea	r14, [rbp - 0x870]
100005739:	lea	rcx, [rbp - 0x8a0]
100005740:	lea	r8, [rbp - 0x450]
100005747:	lea	r9, [rbp - 0x8a8]
10000574e:	mov	rdi, r12
100005751:	mov	rdx, r14
100005754:	call	0x100005a56
100005759:	mov	rdi, r14
10000575c:	xor	esi, esi
10000575e:	mov	edx, 0xa
100005763:	call	0x10000b028 ## symbol stub for: _wcstoull
100005768:	mov	qword ptr [rbx + 0x10], rax
10000576c:	lea	rcx, [rbp - 0x8a0]
100005773:	mov	r8, qword ptr [rcx]
100005776:	lea	rcx, [rbp - 0x8a8]
10000577d:	mov	r10, qword ptr [rcx]
100005780:	mov	rcx, r10
100005783:	or	rcx, r8
100005786:	jne	0x10000578c
100005788:	mov	byte ptr [rbx + 0x19], 0x1
10000578c:	mov	cl, byte ptr [rbp - 0x871]
100005792:	mov	byte ptr [rbx + 0x18], cl
100005795:	xor	ecx, ecx
100005797:	cmp	rax, -0x1
10000579b:	setne	cl
10000579e:	add	ecx, ecx
1000057a0:	dec	ecx
1000057a2:	mov	dword ptr [rbx + 0x8], ecx
1000057a5:	mov	eax, dword ptr [rbp - 0x878]
1000057ab:	shr	eax, 0x1f
1000057ae:	mov	byte ptr [rbx + 0x1a], al
1000057b1:	mov	rdi, qword ptr [rbp - 0x8b0]
1000057b8:	mov	eax, dword ptr [rdi + 0x8]
1000057bb:	mov	esi, dword ptr [rbp - 0x880]
1000057c1:	cmp	eax, 0x1
1000057c4:	jne	0x10000588b
1000057ca:	cmp	ecx, 0x1
1000057cd:	jne	0x10000588b
1000057d3:	mov	dl, byte ptr [rdi + 0x19]
1000057d6:	mov	cl, byte ptr [rbx + 0x19]
1000057d9:	test	dl, dl
1000057db:	je	0x1000057e8
1000057dd:	xor	r14d, r14d
1000057e0:	test	cl, cl
1000057e2:	jne	0x100005a2c
1000057e8:	mov	r9b, byte ptr [rdi + 0x1a]
1000057ec:	mov	al, byte ptr [rbx + 0x1a]
1000057ef:	test	r9b, r9b
1000057f2:	je	0x100005802
1000057f4:	mov	r14d, 0xffffffff
1000057fa:	test	al, al
1000057fc:	je	0x100005a2c
100005802:	test	al, al
100005804:	je	0x100005815
100005806:	mov	r14d, 0x1
10000580c:	test	r9b, r9b
10000580f:	je	0x100005a2c
100005815:	test	dl, dl
100005817:	je	0x10000581e
100005819:	movzx	eax, al
10000581c:	jmp	0x10000582a
10000581e:	test	cl, cl
100005820:	je	0x100005836
100005822:	xor	eax, eax
100005824:	test	r9b, r9b
100005827:	sete	al
10000582a:	lea	r14d, [rax + rax]
10000582e:	dec	r14d
100005831:	jmp	0x100005a2c
100005836:	cmp	byte ptr [rbp - 0x884], 0x0
10000583d:	je	0x10000585d
10000583f:	movsx	eax, byte ptr [rdi + 0x18]
100005843:	movsx	ecx, byte ptr [rbx + 0x18]
100005847:	sub	eax, ecx
100005849:	je	0x10000585d
10000584b:	mov	r14d, eax
10000584e:	neg	r14d
100005851:	test	r9b, r9b
100005854:	cmove	r14d, eax
100005858:	jmp	0x100005a2c
10000585d:	mov	rax, qword ptr [rdi + 0x10]
100005861:	mov	rdx, qword ptr [rbx + 0x10]
100005865:	cmp	rax, rdx
100005868:	jae	0x100005870
10000586a:	movzx	eax, r9b
10000586e:	jmp	0x10000582a
100005870:	xor	ecx, ecx
100005872:	test	r9b, r9b
100005875:	sete	bl
100005878:	cmp	rax, rdx
10000587b:	jbe	0x10000588b
10000587d:	mov	cl, bl
10000587f:	lea	r14d, [rcx + rcx]
100005883:	dec	r14d
100005886:	jmp	0x100005a2c
10000588b:	test	esi, esi
10000588d:	je	0x1000058d1
10000588f:	lea	rax, [rbp - 0x872]
100005896:	mov	qword ptr [rsp], rax
10000589a:	lea	rsi, [rbp - 0x87c]
1000058a1:	lea	rdx, [rbp - 0x660]
1000058a8:	lea	rcx, [rbp - 0x890]
1000058af:	mov	r14, r8
1000058b2:	lea	r8, [rbp - 0x240]
1000058b9:	lea	r9, [rbp - 0x898]
1000058c0:	mov	rdi, r13
1000058c3:	mov	rbx, r10
1000058c6:	call	0x100005a56
1000058cb:	mov	r10, rbx
1000058ce:	mov	r8, r14
1000058d1:	test	r15d, r15d
1000058d4:	je	0x100005918
1000058d6:	lea	rax, [rbp - 0x871]
1000058dd:	mov	qword ptr [rsp], rax
1000058e1:	lea	rsi, [rbp - 0x878]
1000058e8:	lea	rdx, [rbp - 0x870]
1000058ef:	lea	r14, [rbp - 0x8a0]
1000058f6:	lea	r8, [rbp - 0x450]
1000058fd:	lea	rbx, [rbp - 0x8a8]
100005904:	mov	rdi, r12
100005907:	mov	rcx, r14
10000590a:	mov	r9, rbx
10000590d:	call	0x100005a56
100005912:	mov	r8, qword ptr [r14]
100005915:	mov	r10, qword ptr [rbx]
100005918:	mov	rcx, qword ptr [rbp - 0x890]
10000591f:	mov	rax, qword ptr [rbp - 0x898]
100005926:	mov	rsi, rax
100005929:	neg	rsi
10000592c:	mov	rdx, r10
10000592f:	neg	rdx
100005932:	cmp	rcx, rsi
100005935:	jne	0x100005944
100005937:	cmp	r8, rdx
10000593a:	jne	0x100005944
10000593c:	xor	r14d, r14d
10000593f:	jmp	0x100005a2c
100005944:	mov	ebx, dword ptr [rbp - 0x87c]
10000594a:	mov	r15d, dword ptr [rbp - 0x878]
100005951:	test	ebx, ebx
100005953:	jns	0x100005964
100005955:	mov	r14d, 0xffffffff
10000595b:	test	r15d, r15d
10000595e:	jns	0x100005a2c
100005964:	test	ebx, ebx
100005966:	js	0x100005977
100005968:	mov	r14d, 0x1
10000596e:	test	r15d, r15d
100005971:	js	0x100005a2c
100005977:	cmp	rcx, rsi
10000597a:	jne	0x10000598c
10000597c:	shr	r15d, 0x1f
100005980:	lea	r14d, [r15 + r15]
100005984:	dec	r14d
100005987:	jmp	0x100005a2c
10000598c:	cmp	r8, rdx
10000598f:	jne	0x1000059a2
100005991:	not	ebx
100005993:	shr	ebx, 0x1f
100005996:	lea	r14d, [rbx + rbx]
10000599a:	dec	r14d
10000599d:	jmp	0x100005a2c
1000059a2:	cmp	byte ptr [rbp - 0x884], 0x0
1000059a9:	je	0x1000059cb
1000059ab:	movsx	edx, byte ptr [rbp - 0x872]
1000059b2:	movsx	esi, byte ptr [rbp - 0x871]
1000059b9:	sub	edx, esi
1000059bb:	je	0x1000059cb
1000059bd:	mov	r14d, edx
1000059c0:	neg	r14d
1000059c3:	test	ebx, ebx
1000059c5:	cmovns	r14d, edx
1000059c9:	jmp	0x100005a2c
1000059cb:	or	rax, rcx
1000059ce:	or	rax, r8
1000059d1:	or	rax, r10
1000059d4:	je	0x10000593c
1000059da:	mov	eax, 0xffffffff
1000059df:	cmp	rcx, r8
1000059e2:	jb	0x100005a1f
1000059e4:	mov	eax, 0x1
1000059e9:	ja	0x100005a1f
1000059eb:	lea	rdi, [rbp - 0x660]
1000059f2:	lea	rsi, [rbp - 0x870]
1000059f9:	call	0x10000b010 ## symbol stub for: _wcscmp
1000059fe:	test	eax, eax
100005a00:	jne	0x100005a1f
100005a02:	lea	rdi, [rbp - 0x240]
100005a09:	lea	rsi, [rbp - 0x450]
100005a10:	call	0x10000b010 ## symbol stub for: _wcscmp
100005a15:	mov	r14d, 0x0
100005a1b:	test	eax, eax
100005a1d:	je	0x100005a2c
100005a1f:	mov	r14d, eax
100005a22:	neg	r14d
100005a25:	test	r15d, ebx
100005a28:	cmovns	r14d, eax
100005a2c:	mov	rax, qword ptr [rip + 0x65dd] ## literal pool symbol address: ___stack_chk_guard
100005a33:	mov	rax, qword ptr [rax]
100005a36:	cmp	rax, qword ptr [rbp - 0x30]
100005a3a:	jne	0x100005a51
100005a3c:	mov	eax, r14d
100005a3f:	add	rsp, 0x898
100005a46:	pop	rbx
100005a47:	pop	r12
100005a49:	pop	r13
100005a4b:	pop	r14
100005a4d:	pop	r15
100005a4f:	pop	rbp
100005a50:	ret
100005a51:	call	0x10000adb8 ## symbol stub for: ___stack_chk_fail
100005a56:	push	rbp
100005a57:	mov	rbp, rsp
100005a5a:	push	r15
100005a5c:	push	r14
100005a5e:	push	r13
100005a60:	push	r12
100005a62:	push	rbx
100005a63:	sub	rsp, 0x18
100005a67:	mov	qword ptr [rbp - 0x38], r9
100005a6b:	mov	r13, r8
100005a6e:	mov	r12, rcx
100005a71:	mov	qword ptr [rbp - 0x30], rdx
100005a75:	mov	qword ptr [rbp - 0x40], rsi
100005a79:	mov	rbx, rdi
100005a7c:	add	rbx, 0x8
100005a80:	mov	dword ptr [r8], 0x0
100005a87:	mov	r14, qword ptr [rip + 0x657a] ## literal pool symbol address: ___mb_cur_max
100005a8e:	mov	ecx, dword ptr [r14]
100005a91:	lea	r15, [rip + 0xa998]
100005a98:	cmp	ecx, 0x1
100005a9b:	jne	0x100005aa2
100005a9d:	movzx	edi, byte ptr [rbx]
100005aa0:	jmp	0x100005aa4
100005aa2:	mov	edi, dword ptr [rbx]
100005aa4:	call	qword ptr [r15]
100005aa7:	mov	ecx, dword ptr [r14]
100005aaa:	test	eax, eax
100005aac:	je	0x100005ac2
100005aae:	xor	eax, eax
100005ab0:	cmp	ecx, 0x1
100005ab3:	setne	al
100005ab6:	lea	rax, [rax + 2*rax]
100005aba:	add	rbx, rax
100005abd:	inc	rbx
100005ac0:	jmp	0x100005a98
100005ac2:	cmp	ecx, 0x1
100005ac5:	jne	0x100005acc
100005ac7:	movzx	eax, byte ptr [rbx]
100005aca:	jmp	0x100005ace
100005acc:	mov	eax, dword ptr [rbx]
100005ace:	mov	r10, qword ptr [rbp - 0x30]
100005ad2:	cmp	eax, dword ptr [rip + 0xa8b4]
100005ad8:	jne	0x100005af9
100005ada:	mov	rax, qword ptr [rbp - 0x40]
100005ade:	mov	dword ptr [rax], 0xffffffff
100005ae4:	mov	ecx, dword ptr [r14]
100005ae7:	xor	eax, eax
100005ae9:	cmp	ecx, 0x1
100005aec:	setne	al
100005aef:	lea	rax, [rax + 2*rax]
100005af3:	add	rbx, rax
100005af6:	inc	rbx
100005af9:	xor	eax, eax
100005afb:	cmp	ecx, 0x1
100005afe:	setne	al
100005b01:	lea	rdx, [rax + 2*rax]
100005b05:	inc	rdx
100005b08:	mov	r8, qword ptr [rip + 0x64f1] ## literal pool symbol address: __DefaultRuneLocale
100005b0f:	cmp	ecx, 0x1
100005b12:	jne	0x100005b19
100005b14:	movzx	eax, byte ptr [rbx]
100005b17:	jmp	0x100005b23
100005b19:	mov	eax, dword ptr [rbx]
100005b1b:	cmp	rax, 0xff
100005b21:	ja	0x100005b35
100005b23:	test	byte ptr [r8 + 4*rax + 0x3d], 0x4
100005b29:	je	0x100005b35
100005b2b:	cmp	eax, 0x30
100005b2e:	jne	0x100005b35
100005b30:	add	rbx, rdx
100005b33:	jmp	0x100005b0f
100005b35:	xor	r9d, r9d
100005b38:	cmp	ecx, 0x1
100005b3b:	jne	0x100005b46
100005b3d:	mov	dil, byte ptr [rbx]
100005b40:	movzx	eax, dil
100005b44:	jmp	0x100005b4a
100005b46:	mov	edi, dword ptr [rbx]
100005b48:	mov	eax, edi
100005b4a:	mov	rsi, qword ptr [r12]
100005b4e:	test	eax, eax
100005b50:	je	0x100005bf3
100005b56:	cmp	rsi, 0x7f
100005b5a:	ja	0x100005bf3
100005b60:	cmp	ecx, 0x1
100005b63:	jne	0x100005b8b
100005b65:	movzx	eax, dil
100005b69:	test	byte ptr [r8 + 4*rax + 0x3d], 0x4
100005b6f:	jne	0x100005bcb
100005b71:	mov	eax, dword ptr [rip + 0xae79]
100005b77:	test	eax, eax
100005b79:	sete	dl
100005b7c:	or	r9b, dl
100005b7f:	test	r9b, 0x1
100005b83:	jne	0x100005bf3
100005b85:	movzx	edx, dil
100005b89:	jmp	0x100005bb3
100005b8b:	mov	eax, dword ptr [rbx]
100005b8d:	cmp	rax, 0xff
100005b93:	ja	0x100005b9d
100005b95:	test	byte ptr [r8 + 4*rax + 0x3d], 0x4
100005b9b:	jne	0x100005bcb
100005b9d:	mov	eax, dword ptr [rip + 0xae4d]
100005ba3:	test	eax, eax
100005ba5:	sete	dl
100005ba8:	or	r9b, dl
100005bab:	test	r9b, 0x1
100005baf:	jne	0x100005bf3
100005bb1:	mov	edx, dword ptr [rbx]
100005bb3:	cmp	edx, eax
100005bb5:	jne	0x100005bf3
100005bb7:	xor	eax, eax
100005bb9:	cmp	ecx, 0x1
100005bbc:	setne	al
100005bbf:	lea	rax, [rax + 2*rax]
100005bc3:	inc	rax
100005bc6:	mov	r9b, 0x1
100005bc9:	jmp	0x100005beb
100005bcb:	mov	dword ptr [r10 + 4*rsi], eax
100005bcf:	mov	ecx, dword ptr [r14]
100005bd2:	xor	eax, eax
100005bd4:	cmp	ecx, 0x1
100005bd7:	setne	al
100005bda:	lea	rax, [rax + 2*rax]
100005bde:	inc	rax
100005be1:	inc	rsi
100005be4:	mov	qword ptr [r12], rsi
100005be8:	xor	r9d, r9d
100005beb:	add	rbx, rax
100005bee:	jmp	0x100005b38
100005bf3:	mov	dword ptr [r10 + 4*rsi], 0x0
100005bfb:	mov	ecx, dword ptr [r14]
100005bfe:	cmp	ecx, 0x1
100005c01:	jne	0x100005c08
100005c03:	movzx	eax, byte ptr [rbx]
100005c06:	jmp	0x100005c0a
100005c08:	mov	eax, dword ptr [rbx]
100005c0a:	mov	rdi, qword ptr [rbp - 0x38]
100005c0e:	cmp	eax, dword ptr [rip + 0xa774]
100005c14:	jne	0x100005cc4
100005c1a:	xor	eax, eax
100005c1c:	cmp	ecx, 0x1
100005c1f:	setne	al
100005c22:	lea	rax, [rax + 2*rax]
100005c26:	add	rbx, rax
100005c29:	inc	rbx
100005c2c:	cmp	ecx, 0x1
100005c2f:	jne	0x100005c3a
100005c31:	mov	sil, byte ptr [rbx]
100005c34:	movzx	eax, sil
100005c38:	jmp	0x100005c46
100005c3a:	mov	esi, dword ptr [rbx]
100005c3c:	mov	eax, esi
100005c3e:	cmp	esi, 0xff
100005c44:	ja	0x100005c8b
100005c46:	mov	eax, eax
100005c48:	test	byte ptr [r8 + 4*rax + 0x3d], 0x4
100005c4e:	je	0x100005c8b
100005c50:	mov	rdx, qword ptr [rdi]
100005c53:	cmp	rdx, 0x80
100005c5a:	jae	0x100005c9e
100005c5c:	cmp	ecx, 0x1
100005c5f:	jne	0x100005c67
100005c61:	movzx	eax, sil
100005c65:	jmp	0x100005c69
100005c67:	mov	eax, dword ptr [rbx]
100005c69:	mov	dword ptr [r13 + 4*rdx], eax
100005c6e:	mov	ecx, dword ptr [r14]
100005c71:	xor	eax, eax
100005c73:	cmp	ecx, 0x1
100005c76:	setne	al
100005c79:	lea	rax, [rax + 2*rax]
100005c7d:	add	rbx, rax
100005c80:	inc	rbx
100005c83:	inc	rdx
100005c86:	mov	qword ptr [rdi], rdx
100005c89:	jmp	0x100005c2c
100005c8b:	mov	rdx, qword ptr [rdi]
100005c8e:	mov	dword ptr [r13 + 4*rdx], 0x0
100005c97:	test	rdx, rdx
100005c9a:	jne	0x100005ca7
100005c9c:	jmp	0x100005cc4
100005c9e:	mov	dword ptr [r13 + 4*rdx], 0x0
100005ca7:	dec	rdx
100005caa:	cmp	dword ptr [r13 + 4*rdx], 0x30
100005cb0:	jne	0x100005cc4
100005cb2:	mov	qword ptr [rdi], rdx
100005cb5:	mov	dword ptr [r13 + 4*rdx], 0x0
100005cbe:	add	rdx, -0x1
100005cc2:	jb	0x100005caa
100005cc4:	mov	rsi, qword ptr [rbp + 0x10]
100005cc8:	cmp	dword ptr [r14], 0x1
100005ccc:	jne	0x100005cd3
100005cce:	movzx	ecx, byte ptr [rbx]
100005cd1:	jmp	0x100005cd5
100005cd3:	mov	ecx, dword ptr [rbx]
100005cd5:	mov	al, 0x1
100005cd7:	cmp	ecx, 0x53
100005cda:	jg	0x100005cf8
100005cdc:	add	ecx, -0x45
100005cdf:	cmp	ecx, 0xb
100005ce2:	ja	0x100005d15
100005ce4:	lea	rdx, [rip + 0x65]
100005ceb:	movsxd	rcx, dword ptr [rdx + 4*rcx]
100005cef:	add	rcx, rdx
100005cf2:	jmp	rcx
100005cf4:	mov	al, 0x6
100005cf6:	jmp	0x100005d2b
100005cf8:	cmp	ecx, 0x59
100005cfb:	jg	0x100005d0b
100005cfd:	cmp	ecx, 0x54
100005d00:	je	0x100005d25
100005d02:	cmp	ecx, 0x59
100005d05:	jne	0x100005d15
100005d07:	mov	al, 0x8
100005d09:	jmp	0x100005d2b
100005d0b:	cmp	ecx, 0x5a
100005d0e:	je	0x100005d29
100005d10:	cmp	ecx, 0x6b
100005d13:	je	0x100005d2b
100005d15:	xor	eax, eax
100005d17:	jmp	0x100005d2b
100005d19:	mov	al, 0x3
100005d1b:	jmp	0x100005d2b
100005d1d:	mov	al, 0x2
100005d1f:	jmp	0x100005d2b
100005d21:	mov	al, 0x5
100005d23:	jmp	0x100005d2b
100005d25:	mov	al, 0x4
100005d27:	jmp	0x100005d2b
100005d29:	mov	al, 0x7
100005d2b:	mov	byte ptr [rsi], al
100005d2d:	mov	rax, qword ptr [r12]
100005d31:	add	rax, qword ptr [rdi]
100005d34:	jne	0x100005d40
100005d36:	mov	rax, qword ptr [rbp - 0x40]
100005d3a:	mov	dword ptr [rax], 0x0
100005d40:	add	rsp, 0x18
100005d44:	pop	rbx
100005d45:	pop	r12
100005d47:	pop	r13
100005d49:	pop	r14
100005d4b:	pop	r15
100005d4d:	pop	rbp
100005d4e:	ret
100005d4f:	nop
100005d50:	movsb	byte ptr es:[rdi], byte ptr [rsi]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005d53:	inc	ebp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005d57:	dec	ecx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005d5b:	inc	ebp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005d5f:	inc	ebp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005d63:	inc	ebp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xdb #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005d6b:	inc	ebp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005d6f:	dec	ebp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005d73:	inc	ebp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005d77:	inc	ebp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005d7b:	call	rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005d7f:	call	qword ptr [rbp + 0x48]
100005d82:	mov	ebp, esp
100005d84:	mov	ecx, edx
100005d86:	mov	rsi, rdi
100005d89:	mov	rax, qword ptr [rip + 0x62b8] ## literal pool symbol address: _mach_task_self_
100005d90:	mov	edi, dword ptr [rax]
100005d92:	xor	edx, edx
100005d94:	call	0x10000af6e ## symbol stub for: _semaphore_create
100005d99:	test	eax, eax
100005d9b:	jne	0x100005da1
100005d9d:	xor	eax, eax
100005d9f:	pop	rbp
100005da0:	ret
100005da1:	call	0x10000a94b
100005da6:	push	rbp
100005da7:	mov	rbp, rsp
100005daa:	mov	rax, qword ptr [rip + 0x6297] ## literal pool symbol address: _mach_task_self_
100005db1:	mov	eax, dword ptr [rax]
100005db3:	mov	esi, dword ptr [rdi]
100005db5:	mov	edi, eax
100005db7:	call	0x10000af74 ## symbol stub for: _semaphore_destroy
100005dbc:	xor	ecx, ecx
100005dbe:	test	eax, eax
100005dc0:	setne	cl
100005dc3:	mov	eax, ecx
100005dc5:	pop	rbp
100005dc6:	ret
100005dc7:	push	rbp
100005dc8:	mov	rbp, rsp
100005dcb:	mov	qword ptr [rip + 0xab32], 0x0
100005dd6:	lea	rdi, [rip + 0xab33]
100005ddd:	mov	edx, 0x1
100005de2:	pop	rbp
100005de3:	jmp	0x100005d80
100005de8:	test	rdi, rdi
100005deb:	je	0x100005e56
100005ded:	push	rbp
100005dee:	mov	rbp, rsp
100005df1:	push	r14
100005df3:	push	rbx
100005df4:	mov	r14, rdi
100005df7:	mov	edi, dword ptr [rip + 0xab13]
100005dfd:	call	0x10000af80 ## symbol stub for: _semaphore_wait
100005e02:	mov	edi, 0x18
100005e07:	call	0x1000078d3
100005e0c:	mov	rbx, rax
100005e0f:	mov	rdi, r14
100005e12:	call	0x10000790e
100005e17:	mov	qword ptr [rbx], rax
100005e1a:	mov	rax, qword ptr [rip + 0xaae7]
100005e21:	mov	qword ptr [rbx + 0x8], rax
100005e25:	test	rax, rax
100005e28:	je	0x100005e35
100005e2a:	mov	rcx, rbx
100005e2d:	add	rcx, 0x8
100005e31:	mov	qword ptr [rax + 0x10], rcx
100005e35:	mov	qword ptr [rip + 0xaacc], rbx
100005e3c:	lea	rax, [rip + 0xaac5]
100005e43:	mov	qword ptr [rbx + 0x10], rax
100005e47:	mov	edi, dword ptr [rip + 0xaac3]
100005e4d:	pop	rbx
100005e4e:	pop	r14
100005e50:	pop	rbp
100005e51:	jmp	0x10000af7a ## symbol stub for: _semaphore_signal
100005e56:	ret
100005e57:	push	rbp
100005e58:	mov	rbp, rsp
100005e5b:	push	rbx
100005e5c:	push	rax
100005e5d:	mov	edi, dword ptr [rip + 0xaaad]
100005e63:	call	0x10000af80 ## symbol stub for: _semaphore_wait
100005e68:	mov	rbx, qword ptr [rip + 0xaa99]
100005e6f:	test	rbx, rbx
100005e72:	je	0x100005e87
100005e74:	mov	rdi, qword ptr [rbx]
100005e77:	test	rdi, rdi
100005e7a:	je	0x100005e81
100005e7c:	call	0x10000aff8 ## symbol stub for: _unlink
100005e81:	mov	rbx, qword ptr [rbx + 0x8]
100005e85:	jmp	0x100005e6f
100005e87:	mov	edi, dword ptr [rip + 0xaa83]
100005e8d:	add	rsp, 0x8
100005e91:	pop	rbx
100005e92:	pop	rbp
100005e93:	jmp	0x10000af7a ## symbol stub for: _semaphore_signal
100005e98:	push	rbp
100005e99:	mov	rbp, rsp
100005e9c:	push	r14
100005e9e:	push	rbx
100005e9f:	mov	rdi, qword ptr [rip + 0xa502]
100005ea6:	call	0x10000afc2 ## symbol stub for: _strlen
100005eab:	lea	rdi, [rax + 0x2b]
100005eaf:	call	0x1000078d3
100005eb4:	mov	rbx, rax
100005eb7:	mov	r14, qword ptr [rip + 0xa4ea]
100005ebe:	call	0x10000ae66 ## symbol stub for: _getpid
100005ec3:	mov	r9, qword ptr [rip + 0xaa4e]
100005eca:	lea	rcx, [r9 + 0x1]
100005ece:	mov	qword ptr [rip + 0xaa43], rcx
100005ed5:	lea	rsi, [rip + 0x5770] ## literal pool for: "%s/%s%d.%lu"
100005edc:	lea	rcx, [rip + 0x575f] ## literal pool for: ".bsdsort."
100005ee3:	mov	rdi, rbx
100005ee6:	mov	rdx, r14
100005ee9:	mov	r8d, eax
100005eec:	xor	eax, eax
100005eee:	call	0x10000af98 ## symbol stub for: _sprintf
100005ef3:	mov	rdi, rbx
100005ef6:	call	0x100005de8
100005efb:	mov	rax, rbx
100005efe:	pop	rbx
100005eff:	pop	r14
100005f01:	pop	rbp
100005f02:	ret
100005f03:	test	rdi, rdi
100005f06:	je	0x100005f1f
100005f08:	push	rbp
100005f09:	mov	rbp, rsp
100005f0c:	xorps	xmm0, xmm0
100005f0f:	movups	xmmword ptr [rdi], xmm0
100005f12:	mov	qword ptr [rdi + 0x10], 0x0
100005f1a:	mov	byte ptr [rdi + 0x18], sil
100005f1e:	pop	rbp
100005f1f:	ret
100005f20:	push	rbp
100005f21:	mov	rbp, rsp
100005f24:	push	r15
100005f26:	push	r14
100005f28:	push	rbx
100005f29:	push	rax
100005f2a:	test	rdi, rdi
100005f2d:	je	0x100005f97
100005f2f:	mov	r14, rsi
100005f32:	test	rsi, rsi
100005f35:	je	0x100005f97
100005f37:	mov	r15d, edx
100005f3a:	mov	rbx, rdi
100005f3d:	mov	rcx, qword ptr [rdi + 0x10]
100005f41:	cmp	qword ptr [rdi + 0x8], rcx
100005f45:	jae	0x100005f51
100005f47:	mov	rax, qword ptr [rbx]
100005f4a:	test	rax, rax
100005f4d:	jne	0x100005f75
100005f4f:	jmp	0x100005f54
100005f51:	mov	rax, qword ptr [rbx]
100005f54:	lea	rdx, [rcx + rcx]
100005f58:	add	rcx, rcx
100005f5b:	inc	rcx
100005f5e:	mov	qword ptr [rbx + 0x10], rcx
100005f62:	lea	rsi, [8*rdx + 0x8]
100005f6a:	mov	rdi, rax
100005f6d:	call	0x1000078f9
100005f72:	mov	qword ptr [rbx], rax
100005f75:	test	r15b, r15b
100005f78:	je	0x100005f88
100005f7a:	mov	rdi, r14
100005f7d:	call	0x10000790e
100005f82:	mov	r14, rax
100005f85:	mov	rax, qword ptr [rbx]
100005f88:	mov	rcx, qword ptr [rbx + 0x8]
100005f8c:	mov	qword ptr [rax + 8*rcx], r14
100005f90:	inc	rcx
100005f93:	mov	qword ptr [rbx + 0x8], rcx
100005f97:	add	rsp, 0x8
100005f9b:	pop	rbx
100005f9c:	pop	r14
100005f9e:	pop	r15
100005fa0:	pop	rbp
100005fa1:	ret
100005fa2:	push	rbp
100005fa3:	mov	rbp, rsp
100005fa6:	push	r15
100005fa8:	push	r14
100005faa:	push	r13
100005fac:	push	r12
100005fae:	push	rbx
100005faf:	push	rax
100005fb0:	test	rdi, rdi
100005fb3:	je	0x100005fe4
100005fb5:	mov	r14, rdx
100005fb8:	test	rdx, rdx
100005fbb:	je	0x100005fe4
100005fbd:	test	esi, esi
100005fbf:	jle	0x100005fe4
100005fc1:	mov	r15, rdi
100005fc4:	mov	r12d, esi
100005fc7:	xor	ebx, ebx
100005fc9:	movzx	r13d, cl
100005fcd:	mov	rsi, qword ptr [r14 + 8*rbx]
100005fd1:	mov	rdi, r15
100005fd4:	mov	edx, r13d
100005fd7:	call	0x100005f20
100005fdc:	inc	rbx
100005fdf:	cmp	r12, rbx
100005fe2:	jne	0x100005fcd
100005fe4:	add	rsp, 0x8
100005fe8:	pop	rbx
100005fe9:	pop	r12
100005feb:	pop	r13
100005fed:	pop	r14
100005fef:	pop	r15
100005ff1:	pop	rbp
100005ff2:	ret
100005ff3:	test	rdi, rdi
100005ff6:	je	0x10000607c
100005ffc:	push	rbp
100005ffd:	mov	rbp, rsp
100006000:	push	r14
100006002:	push	rbx
100006003:	mov	r14, rdi
100006006:	mov	rdi, qword ptr [rdi]
100006009:	test	rdi, rdi
10000600c:	je	0x10000606b
10000600e:	mov	rax, qword ptr [r14 + 0x8]
100006012:	test	rax, rax
100006015:	je	0x10000605f
100006017:	mov	ebx, 0x1
10000601c:	mov	rdi, qword ptr [rdi + 8*rbx - 0x8]
100006021:	test	rdi, rdi
100006024:	je	0x10000604f
100006026:	cmp	byte ptr [r14 + 0x18], 0x0
10000602b:	je	0x10000603a
10000602d:	call	0x10000aff8 ## symbol stub for: _unlink
100006032:	mov	rax, qword ptr [r14]
100006035:	mov	rdi, qword ptr [rax + 8*rbx - 0x8]
10000603a:	call	0x1000078e8
10000603f:	mov	rax, qword ptr [r14]
100006042:	mov	qword ptr [rax + 8*rbx - 0x8], 0x0
10000604b:	mov	rax, qword ptr [r14 + 0x8]
10000604f:	cmp	rbx, rax
100006052:	jae	0x10000605c
100006054:	mov	rdi, qword ptr [r14]
100006057:	inc	rbx
10000605a:	jmp	0x10000601c
10000605c:	mov	rdi, qword ptr [r14]
10000605f:	call	0x1000078e8
100006064:	mov	qword ptr [r14], 0x0
10000606b:	xorps	xmm0, xmm0
10000606e:	movups	xmmword ptr [r14 + 0x8], xmm0
100006073:	mov	byte ptr [r14 + 0x18], 0x0
100006078:	pop	rbx
100006079:	pop	r14
10000607b:	pop	rbp
10000607c:	ret
10000607d:	test	rdi, rdi
100006080:	je	0x10000609d
100006082:	push	rbp
100006083:	mov	rbp, rsp
100006086:	xorps	xmm0, xmm0
100006089:	movups	xmmword ptr [rdi + 0x10], xmm0
10000608d:	mov	qword ptr [rdi + 0x8], 0x28
100006095:	mov	qword ptr [rdi], 0x0
10000609c:	pop	rbp
10000609d:	ret
10000609e:	push	rbp
10000609f:	mov	rbp, rsp
1000060a2:	push	r15
1000060a4:	push	r14
1000060a6:	push	r12
1000060a8:	push	rbx
1000060a9:	test	rdi, rdi
1000060ac:	je	0x100006144
1000060b2:	mov	r14, rsi
1000060b5:	test	rsi, rsi
1000060b8:	je	0x100006144
1000060be:	mov	rbx, rdi
1000060c1:	mov	rdi, qword ptr [rdi]
1000060c4:	mov	r15, qword ptr [rbx + 0x10]
1000060c8:	mov	r12, qword ptr [rbx + 0x18]
1000060cc:	test	rdi, rdi
1000060cf:	je	0x1000060d6
1000060d1:	cmp	r15, r12
1000060d4:	jb	0x100006100
1000060d6:	lea	rsi, [8*r12 + 0x2008]
1000060de:	add	r12, 0x401
1000060e5:	call	0x1000078f9
1000060ea:	mov	qword ptr [rbx], rax
1000060ed:	mov	rax, r12
1000060f0:	sub	rax, qword ptr [rbx + 0x18]
1000060f4:	shl	rax, 0x3
1000060f8:	add	qword ptr [rbx + 0x8], rax
1000060fc:	mov	qword ptr [rbx + 0x18], r12
100006100:	call	0x100004267
100006105:	mov	rcx, qword ptr [rbx]
100006108:	mov	qword ptr [rcx + 8*r15], rax
10000610c:	mov	rax, qword ptr [rbx]
10000610f:	mov	rdi, qword ptr [rax + 8*r15]
100006113:	mov	rsi, r14
100006116:	call	0x100004355
10000611b:	mov	rax, qword ptr [rbx]
10000611e:	mov	rdi, qword ptr [rax + 8*r15]
100006122:	call	0x1000042b0
100006127:	movdqu	xmm0, xmmword ptr [rbx + 0x8]
10000612c:	movdqa	xmm1, xmmword ptr [rip + 0x540c]
100006134:	pinsrq	xmm1, rax, 0x0
10000613b:	paddq	xmm1, xmm0
10000613f:	movdqu	xmmword ptr [rbx + 0x8], xmm1
100006144:	pop	rbx
100006145:	pop	r12
100006147:	pop	r14
100006149:	pop	r15
10000614b:	pop	rbp
10000614c:	ret
10000614d:	test	rdi, rdi
100006150:	je	0x1000061da
100006156:	push	rbp
100006157:	mov	rbp, rsp
10000615a:	push	r15
10000615c:	push	r14
10000615e:	push	rbx
10000615f:	push	rax
100006160:	mov	r14, rdi
100006163:	mov	rdi, qword ptr [rdi]
100006166:	test	rdi, rdi
100006169:	je	0x1000061c0
10000616b:	mov	rax, qword ptr [r14 + 0x10]
10000616f:	test	rax, rax
100006172:	je	0x1000061b4
100006174:	mov	r15d, 0x1
10000617a:	mov	rbx, qword ptr [rdi + 8*r15 - 0x8]
10000617f:	test	rbx, rbx
100006182:	je	0x1000061a4
100006184:	mov	rdi, rbx
100006187:	call	0x1000043b5
10000618c:	mov	rdi, rbx
10000618f:	call	0x1000078e8
100006194:	mov	rax, qword ptr [r14]
100006197:	mov	qword ptr [rax + 8*r15 - 0x8], 0x0
1000061a0:	mov	rax, qword ptr [r14 + 0x10]
1000061a4:	cmp	r15, rax
1000061a7:	jae	0x1000061b1
1000061a9:	mov	rdi, qword ptr [r14]
1000061ac:	inc	r15
1000061af:	jmp	0x10000617a
1000061b1:	mov	rdi, qword ptr [r14]
1000061b4:	call	0x1000078e8
1000061b9:	mov	qword ptr [r14], 0x0
1000061c0:	xorps	xmm0, xmm0
1000061c3:	movups	xmmword ptr [r14 + 0x10], xmm0
1000061c8:	mov	qword ptr [r14 + 0x8], 0x28
1000061d0:	add	rsp, 0x8
1000061d4:	pop	rbx
1000061d5:	pop	r14
1000061d7:	pop	r15
1000061d9:	pop	rbp
1000061da:	ret
1000061db:	push	rbp
1000061dc:	mov	rbp, rsp
1000061df:	push	r15
1000061e1:	push	r14
1000061e3:	push	r13
1000061e5:	push	r12
1000061e7:	push	rbx
1000061e8:	sub	rsp, 0x18
1000061ec:	test	rdi, rdi
1000061ef:	je	0x1000062b0
1000061f5:	mov	r13, rsi
1000061f8:	test	rsi, rsi
1000061fb:	je	0x1000062b0
100006201:	mov	r14, rdi
100006204:	lea	rsi, [rip + 0x544d] ## literal pool for: "w"
10000620b:	mov	rdi, r13
10000620e:	call	0x10000630e
100006213:	test	rax, rax
100006216:	je	0x100006309
10000621c:	mov	r15, rax
10000621f:	mov	rax, qword ptr [r14]
100006222:	test	rax, rax
100006225:	je	0x1000062a5
100006227:	lea	r12, [rip + 0xa84e]
10000622e:	cmp	byte ptr [r12 + 0xd], 0x0
100006234:	je	0x1000062bf
10000623a:	mov	rbx, r13
10000623d:	mov	qword ptr [rbp - 0x38], 0x0
100006245:	cmp	qword ptr [r14 + 0x10], 0x0
10000624a:	je	0x1000062a2
10000624c:	mov	r13d, 0x1
100006252:	xor	ecx, ecx
100006254:	mov	rax, qword ptr [rax + 8*r13 - 0x8]
100006259:	mov	qword ptr [rbp - 0x30], rax
10000625d:	test	rcx, rcx
100006260:	je	0x100006277
100006262:	lea	rdi, [rbp - 0x38]
100006266:	lea	rsi, [rbp - 0x30]
10000626a:	call	0x10000525f
10000626f:	test	eax, eax
100006271:	je	0x100006290
100006273:	mov	rax, qword ptr [rbp - 0x30]
100006277:	mov	rdi, qword ptr [rax]
10000627a:	movzx	edx, byte ptr [r12 + 0xe]
100006280:	mov	rsi, r15
100006283:	call	0x1000031f0
100006288:	mov	rax, qword ptr [rbp - 0x30]
10000628c:	mov	qword ptr [rbp - 0x38], rax
100006290:	cmp	r13, qword ptr [r14 + 0x10]
100006294:	jae	0x1000062a2
100006296:	mov	rax, qword ptr [r14]
100006299:	mov	rcx, qword ptr [rbp - 0x38]
10000629d:	inc	r13
1000062a0:	jmp	0x100006254
1000062a2:	mov	r13, rbx
1000062a5:	mov	rdi, r15
1000062a8:	mov	rsi, r13
1000062ab:	call	0x100006474
1000062b0:	add	rsp, 0x18
1000062b4:	pop	rbx
1000062b5:	pop	r12
1000062b7:	pop	r13
1000062b9:	pop	r14
1000062bb:	pop	r15
1000062bd:	pop	rbp
1000062be:	ret
1000062bf:	cmp	qword ptr [r14 + 0x10], 0x0
1000062c4:	je	0x1000062a5
1000062c6:	mov	rax, qword ptr [rax]
1000062c9:	mov	rdi, qword ptr [rax]
1000062cc:	movzx	edx, byte ptr [r12 + 0xe]
1000062d2:	mov	rsi, r15
1000062d5:	call	0x1000031f0
1000062da:	cmp	qword ptr [r14 + 0x10], 0x2
1000062df:	jb	0x1000062a5
1000062e1:	mov	ebx, 0x1
1000062e6:	mov	rax, qword ptr [r14]
1000062e9:	mov	rax, qword ptr [rax + 8*rbx]
1000062ed:	mov	rdi, qword ptr [rax]
1000062f0:	movzx	edx, byte ptr [r12 + 0xe]
1000062f6:	mov	rsi, r15
1000062f9:	call	0x1000031f0
1000062fe:	inc	rbx
100006301:	cmp	rbx, qword ptr [r14 + 0x10]
100006305:	jb	0x1000062e6
100006307:	jmp	0x1000062a5
100006309:	call	0x10000a95b
10000630e:	push	rbp
10000630f:	mov	rbp, rsp
100006312:	push	r15
100006314:	push	r14
100006316:	push	r13
100006318:	push	r12
10000631a:	push	rbx
10000631b:	push	rax
10000631c:	mov	r15, rsi
10000631f:	mov	rbx, rdi
100006322:	lea	rsi, [rip + 0x533b] ## literal pool for: "-"
100006329:	call	0x10000afaa ## symbol stub for: _strcmp
10000632e:	test	eax, eax
100006330:	je	0x100006353
100006332:	mov	rdi, rbx
100006335:	call	0x100006d12
10000633a:	test	al, al
10000633c:	je	0x100006367
10000633e:	cmp	byte ptr [r15], 0x77
100006342:	jne	0x100006392
100006344:	mov	edi, 0x36
100006349:	call	0x10000aff2 ## symbol stub for: _umask
10000634e:	mov	r14d, eax
100006351:	jmp	0x100006395
100006353:	test	r15, r15
100006356:	je	0x100006383
100006358:	cmp	byte ptr [r15], 0x72
10000635c:	jne	0x100006383
10000635e:	mov	rax, qword ptr [rip + 0x5cbb] ## literal pool symbol address: ___stdinp
100006365:	jmp	0x10000638a
100006367:	mov	rdi, rbx
10000636a:	mov	rsi, r15
10000636d:	call	0x10000ae24 ## symbol stub for: _fopen
100006372:	mov	rbx, rax
100006375:	test	rax, rax
100006378:	jne	0x100006458
10000637e:	jmp	0x100006407
100006383:	mov	rax, qword ptr [rip + 0x5c9e] ## literal pool symbol address: ___stdoutp
10000638a:	mov	rbx, qword ptr [rax]
10000638d:	jmp	0x100006458
100006392:	xor	r14d, r14d
100006395:	cmp	qword ptr [rip + 0xa663], 0x0
10000639d:	je	0x1000063f4
10000639f:	mov	rdi, rbx
1000063a2:	call	0x10000afc2 ## symbol stub for: _strlen
1000063a7:	mov	r13, rax
1000063aa:	lea	rdi, [rax + 0x80]
1000063b1:	call	0x1000078d3
1000063b6:	mov	r12, rax
1000063b9:	mov	rax, qword ptr [rip + 0x5c68] ## literal pool symbol address: ___stdoutp
1000063c0:	mov	rdi, qword ptr [rax]
1000063c3:	call	0x10000ae06 ## symbol stub for: _fflush
1000063c8:	mov	al, byte ptr [r15]
1000063cb:	cmp	al, 0x77
1000063cd:	je	0x10000640c
1000063cf:	cmp	al, 0x72
1000063d1:	jne	0x10000646f
1000063d7:	add	r13, 0x7f
1000063db:	mov	r8, qword ptr [rip + 0xa61e]
1000063e2:	lea	rdx, [rip + 0x527d] ## literal pool for: "cat %s | %s -d"
1000063e9:	mov	rdi, r12
1000063ec:	mov	rsi, r13
1000063ef:	mov	rcx, rbx
1000063f2:	jmp	0x100006427
1000063f4:	mov	rdi, rbx
1000063f7:	mov	rsi, r15
1000063fa:	call	0x10000ae24 ## symbol stub for: _fopen
1000063ff:	mov	rbx, rax
100006402:	test	rax, rax
100006405:	jne	0x100006449
100006407:	call	0x10000a96b
10000640c:	add	r13, 0x7f
100006410:	mov	rcx, qword ptr [rip + 0xa5e9]
100006417:	lea	rdx, [rip + 0x5257] ## literal pool for: "%s > %s"
10000641e:	mov	rdi, r12
100006421:	mov	rsi, r13
100006424:	mov	r8, rbx
100006427:	xor	eax, eax
100006429:	call	0x10000af92 ## symbol stub for: _snprintf
10000642e:	mov	rdi, r12
100006431:	mov	rsi, r15
100006434:	call	0x10000aed8 ## symbol stub for: _popen
100006439:	test	rax, rax
10000643c:	je	0x10000646a
10000643e:	mov	rbx, rax
100006441:	mov	rdi, r12
100006444:	call	0x1000078e8
100006449:	cmp	byte ptr [r15], 0x77
10000644d:	jne	0x100006458
10000644f:	movzx	edi, r14w
100006453:	call	0x10000aff2 ## symbol stub for: _umask
100006458:	mov	rax, rbx
10000645b:	add	rsp, 0x8
10000645f:	pop	rbx
100006460:	pop	r12
100006462:	pop	r13
100006464:	pop	r14
100006466:	pop	r15
100006468:	pop	rbp
100006469:	ret
10000646a:	call	0x10000a99b
10000646f:	call	0x10000a97b
100006474:	push	rbp
100006475:	mov	rbp, rsp
100006478:	push	rbx
100006479:	push	rax
10000647a:	test	rdi, rdi
10000647d:	je	0x1000064bc
10000647f:	mov	rbx, rdi
100006482:	mov	rax, qword ptr [rip + 0x5b97] ## literal pool symbol address: ___stdinp
100006489:	cmp	qword ptr [rax], rdi
10000648c:	je	0x1000064bc
10000648e:	mov	rax, qword ptr [rip + 0x5b93] ## literal pool symbol address: ___stdoutp
100006495:	cmp	qword ptr [rax], rbx
100006498:	je	0x1000064c3
10000649a:	mov	rdi, rsi
10000649d:	call	0x100006d12
1000064a2:	test	al, al
1000064a4:	je	0x1000064d1
1000064a6:	cmp	qword ptr [rip + 0xa552], 0x0
1000064ae:	je	0x1000064d1
1000064b0:	mov	rdi, rbx
1000064b3:	call	0x10000aecc ## symbol stub for: _pclose
1000064b8:	test	eax, eax
1000064ba:	js	0x1000064df
1000064bc:	add	rsp, 0x8
1000064c0:	pop	rbx
1000064c1:	pop	rbp
1000064c2:	ret
1000064c3:	mov	rdi, rbx
1000064c6:	add	rsp, 0x8
1000064ca:	pop	rbx
1000064cb:	pop	rbp
1000064cc:	jmp	0x10000ae06 ## symbol stub for: _fflush
1000064d1:	mov	rdi, rbx
1000064d4:	add	rsp, 0x8
1000064d8:	pop	rbx
1000064d9:	pop	rbp
1000064da:	jmp	0x10000adf4 ## symbol stub for: _fclose
1000064df:	call	0x10000a9ab
1000064e4:	push	rbp
1000064e5:	mov	rbp, rsp
1000064e8:	push	r15
1000064ea:	push	r14
1000064ec:	push	r13
1000064ee:	push	r12
1000064f0:	push	rbx
1000064f1:	sub	rsp, 0x48
1000064f5:	mov	qword ptr [rbp - 0x40], rdi
1000064f9:	call	0x1000068a9
1000064fe:	test	rax, rax
100006501:	je	0x10000689a
100006507:	mov	rbx, rax
10000650a:	mov	rdi, rax
10000650d:	call	0x100006a40
100006512:	test	rax, rax
100006515:	je	0x1000066d6
10000651b:	mov	r15, rax
10000651e:	call	0x1000040e4
100006523:	mov	r13, rax
100006526:	mov	rdi, r15
100006529:	mov	rsi, rax
10000652c:	call	0x1000043ea
100006531:	mov	rdi, rbx
100006534:	call	0x100006a40
100006539:	test	rax, rax
10000653c:	je	0x1000066ed
100006542:	mov	r12, rax
100006545:	mov	qword ptr [rbp - 0x70], r15
100006549:	mov	qword ptr [rbp - 0x48], rbx
10000654d:	call	0x1000040e4
100006552:	mov	rbx, rax
100006555:	mov	rdi, r12
100006558:	mov	rsi, rax
10000655b:	call	0x1000043ea
100006560:	mov	eax, 0x1
100006565:	mov	qword ptr [rbp - 0x50], rax
100006569:	lea	rax, [rip + 0xa4a8]
100006570:	cmp	byte ptr [rax], 0x0
100006573:	je	0x1000065ae
100006575:	mov	r14, qword ptr [rip + 0x5aac] ## literal pool symbol address: ___stdoutp
10000657c:	mov	rdi, qword ptr [r14]
10000657f:	mov	rsi, r12
100006582:	lea	rdx, [rip + 0x50d1] ## literal pool for: "s1=<"
100006589:	lea	r15, [rip + 0x5042] ## literal pool for: ">"
100006590:	mov	rcx, r15
100006593:	call	0x100002cfa
100006598:	mov	rdi, qword ptr [r14]
10000659b:	mov	rsi, qword ptr [rbp - 0x70]
10000659f:	lea	rdx, [rip + 0x50b9] ## literal pool for: "s2=<"
1000065a6:	mov	rcx, r15
1000065a9:	call	0x100002cfa
1000065ae:	mov	qword ptr [rbp - 0x58], r12
1000065b2:	mov	rdi, rbx
1000065b5:	mov	rsi, r13
1000065b8:	xor	edx, edx
1000065ba:	call	0x100004f3f
1000065bf:	mov	r12d, eax
1000065c2:	lea	rax, [rip + 0xa44f]
1000065c9:	cmp	byte ptr [rax], 0x0
1000065cc:	je	0x1000065df
1000065ce:	lea	rdi, [rip + 0x5006] ## literal pool for: "; cmp1=%d"
1000065d5:	mov	esi, r12d
1000065d8:	xor	eax, eax
1000065da:	call	0x10000aede ## symbol stub for: _printf
1000065df:	test	r12d, r12d
1000065e2:	mov	r15, qword ptr [rbp - 0x70]
1000065e6:	je	0x10000667e
1000065ec:	lea	rax, [rip + 0xa425]
1000065f3:	cmp	byte ptr [rax], 0x0
1000065f6:	je	0x100006602
1000065f8:	mov	edi, 0xa
1000065fd:	call	0x10000af32 ## symbol stub for: _putchar
100006602:	lea	rax, [rip + 0xa473]
100006609:	cmp	byte ptr [rax + 0xd], 0x0
10000660d:	setne	al
100006610:	test	r12d, r12d
100006613:	setle	cl
100006616:	test	r12d, r12d
100006619:	js	0x100006717
10000661f:	and	cl, al
100006621:	jne	0x100006717
100006627:	mov	rdi, r15
10000662a:	mov	rsi, r13
10000662d:	call	0x10000414f
100006632:	mov	rdi, r13
100006635:	call	0x1000078e8
10000663a:	mov	rdi, r15
10000663d:	call	0x10000307d
100006642:	mov	rdi, qword ptr [rbp - 0x48]
100006646:	call	0x100006a40
10000664b:	test	rax, rax
10000664e:	je	0x10000674a
100006654:	mov	r12, rax
100006657:	inc	qword ptr [rbp - 0x50]
10000665b:	call	0x1000040e4
100006660:	mov	r13, rbx
100006663:	mov	rbx, rax
100006666:	mov	rdi, r12
100006669:	mov	rsi, rax
10000666c:	call	0x1000043ea
100006671:	mov	rax, qword ptr [rbp - 0x58]
100006675:	mov	qword ptr [rbp - 0x70], rax
100006679:	jmp	0x100006569
10000667e:	xor	r12d, r12d
100006681:	lea	rax, [rip + 0xa3f4]
100006688:	cmp	byte ptr [rax + 0x10], 0x0
10000668c:	je	0x1000065ec
100006692:	mov	rcx, rax
100006695:	mov	al, byte ptr [rax + 0xc]
100006698:	or	al, byte ptr [rcx + 0xd]
10000669b:	jne	0x1000065ec
1000066a1:	mov	rdi, qword ptr [rbp - 0x58]
1000066a5:	mov	rsi, r15
1000066a8:	call	0x100004fd5
1000066ad:	mov	r12d, eax
1000066b0:	lea	rax, [rip + 0xa361]
1000066b7:	cmp	byte ptr [rax], 0x0
1000066ba:	je	0x100006602
1000066c0:	lea	rdi, [rip + 0x4f1e] ## literal pool for: "; cmp2=%d"
1000066c7:	mov	esi, r12d
1000066ca:	xor	eax, eax
1000066cc:	call	0x10000aede ## symbol stub for: _printf
1000066d1:	jmp	0x1000065ec
1000066d6:	mov	r14d, 0x1
1000066dc:	xor	eax, eax
1000066de:	mov	qword ptr [rbp - 0x38], rax
1000066e2:	xor	r13d, r13d
1000066e5:	xor	r12d, r12d
1000066e8:	jmp	0x100006800
1000066ed:	mov	eax, 0x1
1000066f2:	mov	qword ptr [rbp - 0x50], rax
1000066f6:	xor	r12d, r12d
1000066f9:	xor	eax, eax
1000066fb:	mov	qword ptr [rbp - 0x38], rax
1000066ff:	xor	eax, eax
100006701:	mov	qword ptr [rbp - 0x60], rax
100006705:	xor	eax, eax
100006707:	mov	qword ptr [rbp - 0x68], rax
10000670b:	mov	dword ptr [rbp - 0x2c], 0x0
100006712:	jmp	0x1000067a8
100006717:	mov	dword ptr [rbp - 0x2c], 0x1
10000671e:	lea	rax, [rip + 0xa357]
100006725:	cmp	byte ptr [rax + 0x9], 0x0
100006729:	mov	qword ptr [rbp - 0x68], rbx
10000672d:	je	0x100006778
10000672f:	mov	eax, 0x1
100006734:	mov	qword ptr [rbp - 0x50], rax
100006738:	xor	eax, eax
10000673a:	mov	qword ptr [rbp - 0x38], rax
10000673e:	mov	r12, qword ptr [rbp - 0x58]
100006742:	xor	eax, eax
100006744:	mov	qword ptr [rbp - 0x60], rax
100006748:	jmp	0x1000067a4
10000674a:	mov	eax, 0x1
10000674f:	mov	qword ptr [rbp - 0x50], rax
100006753:	xor	r12d, r12d
100006756:	xor	eax, eax
100006758:	mov	qword ptr [rbp - 0x38], rax
10000675c:	xor	eax, eax
10000675e:	mov	qword ptr [rbp - 0x60], rax
100006762:	mov	r15, qword ptr [rbp - 0x58]
100006766:	mov	r13, rbx
100006769:	xor	eax, eax
10000676b:	mov	qword ptr [rbp - 0x68], rax
10000676f:	mov	dword ptr [rbp - 0x2c], 0x0
100006776:	jmp	0x1000067a4
100006778:	mov	r12, qword ptr [rbp - 0x58]
10000677c:	mov	rdi, r12
10000677f:	call	0x100002df1
100006784:	mov	qword ptr [rbp - 0x60], rax
100006788:	lea	rax, [rip + 0xa289]
10000678f:	cmp	byte ptr [rax], 0x0
100006792:	je	0x10000679e
100006794:	mov	rdi, r15
100006797:	call	0x100002df1
10000679c:	jmp	0x1000067a0
10000679e:	xor	eax, eax
1000067a0:	mov	qword ptr [rbp - 0x38], rax
1000067a4:	mov	rbx, qword ptr [rbp - 0x48]
1000067a8:	test	r13, r13
1000067ab:	je	0x1000067c0
1000067ad:	mov	rdi, r15
1000067b0:	mov	rsi, r13
1000067b3:	call	0x10000414f
1000067b8:	mov	rdi, r13
1000067bb:	call	0x1000078e8
1000067c0:	mov	rdi, r15
1000067c3:	call	0x10000307d
1000067c8:	mov	r15, qword ptr [rbp - 0x68]
1000067cc:	test	r15, r15
1000067cf:	je	0x1000067e4
1000067d1:	mov	rdi, r12
1000067d4:	mov	rsi, r15
1000067d7:	call	0x10000414f
1000067dc:	mov	rdi, r15
1000067df:	call	0x1000078e8
1000067e4:	test	r12, r12
1000067e7:	mov	r14, qword ptr [rbp - 0x50]
1000067eb:	mov	r15d, dword ptr [rbp - 0x2c]
1000067ef:	mov	r13, qword ptr [rbp - 0x60]
1000067f3:	je	0x1000067fd
1000067f5:	mov	rdi, r12
1000067f8:	call	0x10000307d
1000067fd:	mov	r12d, r15d
100006800:	cmp	qword ptr [rbp - 0x40], 0x0
100006805:	je	0x10000682e
100006807:	mov	rax, qword ptr [rbp - 0x40]
10000680b:	cmp	byte ptr [rax], 0x0
10000680e:	je	0x10000682e
100006810:	lea	rsi, [rip + 0x4e4d] ## literal pool for: "-"
100006817:	mov	rdi, qword ptr [rbp - 0x40]
10000681b:	call	0x10000afaa ## symbol stub for: _strcmp
100006820:	test	eax, eax
100006822:	jne	0x10000683b
100006824:	jmp	0x10000682e
100006826:	mov	rdi, rax
100006829:	call	0x10000307d
10000682e:	mov	rdi, rbx
100006831:	call	0x100006a40
100006836:	test	rax, rax
100006839:	jne	0x100006826
10000683b:	mov	rdi, rbx
10000683e:	call	0x100006c7f
100006843:	test	r13, r13
100006846:	je	0x100006884
100006848:	mov	rdi, r13
10000684b:	mov	rsi, qword ptr [rbp - 0x40]
10000684f:	mov	rdx, r14
100006852:	call	0x1000040ac
100006857:	mov	rbx, qword ptr [rbp - 0x38]
10000685b:	test	rbx, rbx
10000685e:	je	0x10000687c
100006860:	mov	rdi, rbx
100006863:	mov	rsi, qword ptr [rbp - 0x40]
100006867:	mov	rdx, r14
10000686a:	call	0x1000040ac
10000686f:	cmp	rbx, r13
100006872:	je	0x10000687c
100006874:	mov	rdi, rbx
100006877:	call	0x10000307d
10000687c:	mov	rdi, r13
10000687f:	call	0x10000307d
100006884:	test	r12d, r12d
100006887:	jne	0x10000689f
100006889:	xor	eax, eax
10000688b:	add	rsp, 0x48
10000688f:	pop	rbx
100006890:	pop	r12
100006892:	pop	r13
100006894:	pop	r14
100006896:	pop	r15
100006898:	pop	rbp
100006899:	ret
10000689a:	call	0x10000a9bb
10000689f:	mov	edi, 0x1
1000068a4:	call	0x10000adee ## symbol stub for: _exit
1000068a9:	push	rbp
1000068aa:	mov	rbp, rsp
1000068ad:	push	r15
1000068af:	push	r14
1000068b1:	push	r12
1000068b3:	push	rbx
1000068b4:	sub	rsp, 0x90
1000068bb:	mov	r14, rdi
1000068be:	test	rdi, rdi
1000068c1:	lea	r15, [rip + 0x4d9c] ## literal pool for: "-"
1000068c8:	cmove	r14, r15
1000068cc:	mov	edi, 0x60
1000068d1:	call	0x1000078d3
1000068d6:	mov	rbx, rax
1000068d9:	xorps	xmm0, xmm0
1000068dc:	movups	xmmword ptr [rax], xmm0
1000068df:	movups	xmmword ptr [rax + 0x10], xmm0
1000068e3:	movups	xmmword ptr [rax + 0x20], xmm0
1000068e7:	movups	xmmword ptr [rax + 0x30], xmm0
1000068eb:	movups	xmmword ptr [rax + 0x40], xmm0
1000068ef:	movups	xmmword ptr [rax + 0x50], xmm0
1000068f3:	lea	rax, [rip + 0xa182]
1000068fa:	xor	ecx, ecx
1000068fc:	cmp	byte ptr [rax + 0xe], 0x0
100006900:	mov	eax, 0xa
100006905:	cmovne	eax, ecx
100006908:	mov	byte ptr [rbx + 0x5c], al
10000690b:	mov	rdi, r14
10000690e:	call	0x10000790e
100006913:	mov	qword ptr [rbx + 0x18], rax
100006917:	mov	rdi, r14
10000691a:	mov	rsi, r15
10000691d:	call	0x10000afaa ## symbol stub for: _strcmp
100006922:	test	eax, eax
100006924:	je	0x10000699d
100006926:	cmp	qword ptr [rip + 0xa0d2], 0x0
10000692e:	jne	0x10000699d
100006930:	cmp	byte ptr [rip + 0xa0d1], 0x0
100006937:	je	0x10000699d
100006939:	mov	rdi, r14
10000693c:	xor	esi, esi
10000693e:	xor	eax, eax
100006940:	call	0x10000aec6 ## symbol stub for: _open
100006945:	test	eax, eax
100006947:	js	0x100006a36
10000694d:	mov	r15d, eax
100006950:	lea	rsi, [rbp - 0xb0]
100006957:	mov	edi, eax
100006959:	call	0x10000ae3c ## symbol stub for: _fstat$INODE64
10000695e:	test	eax, eax
100006960:	js	0x100006995
100006962:	mov	r12, qword ptr [rbp - 0x50]
100006966:	xor	edi, edi
100006968:	mov	rsi, r12
10000696b:	mov	edx, 0x1
100006970:	xor	ecx, ecx
100006972:	mov	r8d, r15d
100006975:	xor	r9d, r9d
100006978:	call	0x10000aeb4 ## symbol stub for: _mmap
10000697d:	cmp	rax, -0x1
100006981:	je	0x100006995
100006983:	mov	dword ptr [rbx + 0x58], r15d
100006987:	mov	qword ptr [rbx + 0x28], rax
10000698b:	mov	qword ptr [rbx + 0x48], r12
10000698f:	mov	qword ptr [rbx + 0x30], rax
100006993:	jmp	0x10000699d
100006995:	mov	edi, r15d
100006998:	call	0x10000add6 ## symbol stub for: _close
10000699d:	cmp	qword ptr [rbx + 0x28], 0x0
1000069a2:	je	0x1000069b7
1000069a4:	mov	rax, rbx
1000069a7:	add	rsp, 0x90
1000069ae:	pop	rbx
1000069af:	pop	r12
1000069b1:	pop	r14
1000069b3:	pop	r15
1000069b5:	pop	rbp
1000069b6:	ret
1000069b7:	lea	rsi, [rip + 0x4cc2] ## literal pool for: "r"
1000069be:	mov	rdi, r14
1000069c1:	call	0x10000630e
1000069c6:	mov	qword ptr [rbx + 0x10], rax
1000069ca:	test	rax, rax
1000069cd:	je	0x100006a3b
1000069cf:	lea	rsi, [rip + 0x4c8e] ## literal pool for: "-"
1000069d6:	mov	rdi, r14
1000069d9:	call	0x10000afaa ## symbol stub for: _strcmp
1000069de:	test	eax, eax
1000069e0:	je	0x1000069a4
1000069e2:	mov	qword ptr [rbx + 0x40], 0x1000
1000069ea:	mov	edi, 0x1000
1000069ef:	call	0x1000078d3
1000069f4:	mov	qword ptr [rbx + 0x20], rax
1000069f8:	xor	ecx, ecx
1000069fa:	mov	qword ptr [rbx + 0x38], rcx
1000069fe:	mov	qword ptr [rbx + 0x50], rcx
100006a02:	mov	rcx, qword ptr [rbx + 0x10]
100006a06:	mov	rdx, qword ptr [rbx + 0x40]
100006a0a:	mov	esi, 0x1
100006a0f:	mov	rdi, rax
100006a12:	call	0x10000ae30 ## symbol stub for: _fread
100006a17:	mov	qword ptr [rbx + 0x38], rax
100006a1b:	test	rax, rax
100006a1e:	jne	0x1000069a4
100006a20:	mov	rdi, qword ptr [rbx + 0x10]
100006a24:	call	0x10000ae00 ## symbol stub for: _ferror
100006a29:	test	eax, eax
100006a2b:	je	0x1000069a4
100006a31:	call	0x10000a9db
100006a36:	call	0x10000a9eb
100006a3b:	call	0x10000a9cb
100006a40:	push	rbp
100006a41:	mov	rbp, rsp
100006a44:	push	r15
100006a46:	push	r14
100006a48:	push	r13
100006a4a:	push	r12
100006a4c:	push	rbx
100006a4d:	push	rax
100006a4e:	mov	r15, rdi
100006a51:	mov	rbx, qword ptr [rdi + 0x28]
100006a55:	test	rbx, rbx
100006a58:	je	0x100006aa6
100006a5a:	add	rbx, qword ptr [r15 + 0x48]
100006a5e:	mov	r13, qword ptr [r15 + 0x30]
100006a62:	cmp	r13, rbx
100006a65:	jae	0x100006bc2
100006a6b:	mov	r14, rbx
100006a6e:	sub	r14, r13
100006a71:	movsx	esi, byte ptr [r15 + 0x5c]
100006a76:	mov	rdi, r13
100006a79:	mov	rdx, r14
100006a7c:	call	0x10000ae96 ## symbol stub for: _memchr
100006a81:	test	rax, rax
100006a84:	je	0x100006be9
100006a8a:	mov	r12, rax
100006a8d:	mov	rsi, rax
100006a90:	sub	rsi, r13
100006a93:	mov	rdi, r13
100006a96:	call	0x100002ed3
100006a9b:	inc	r12
100006a9e:	mov	rbx, r12
100006aa1:	jmp	0x100006bf4
100006aa6:	mov	rdi, qword ptr [r15 + 0x10]
100006aaa:	mov	rax, qword ptr [rip + 0x556f] ## literal pool symbol address: ___stdinp
100006ab1:	cmp	rdi, qword ptr [rax]
100006ab4:	je	0x100006bc9
100006aba:	mov	rax, qword ptr [r15 + 0x38]
100006abe:	xor	ebx, ebx
100006ac0:	sub	rax, qword ptr [r15 + 0x50]
100006ac4:	cmovb	rax, rbx
100006ac8:	mov	r14, rax
100006acb:	mov	rdx, rax
100006ace:	sub	rdx, rbx
100006ad1:	jbe	0x100006af1
100006ad3:	mov	rdi, qword ptr [r15 + 0x20]
100006ad7:	add	rdi, qword ptr [r15 + 0x50]
100006adb:	add	rdi, rbx
100006ade:	movsx	esi, byte ptr [r15 + 0x5c]
100006ae3:	call	0x10000ae96 ## symbol stub for: _memchr
100006ae8:	test	rax, rax
100006aeb:	jne	0x100006bfa
100006af1:	mov	rdi, qword ptr [r15 + 0x10]
100006af5:	call	0x10000adfa ## symbol stub for: _feof
100006afa:	test	eax, eax
100006afc:	jne	0x100006c24
100006b02:	mov	rbx, qword ptr [r15 + 0x38]
100006b06:	cmp	rbx, qword ptr [r15 + 0x40]
100006b0a:	jne	0x100006c75
100006b10:	cmp	r14, 0x801
100006b17:	jb	0x100006b6a
100006b19:	mov	rdi, qword ptr [r15 + 0x20]
100006b1d:	mov	r12, qword ptr [r15 + 0x50]
100006b21:	lea	rsi, [rbx + 0x1000]
100006b28:	mov	qword ptr [r15 + 0x40], rsi
100006b2c:	call	0x1000078f9
100006b31:	mov	qword ptr [r15 + 0x20], rax
100006b35:	add	rax, qword ptr [r15 + 0x38]
100006b39:	mov	rcx, qword ptr [r15 + 0x10]
100006b3d:	mov	esi, 0x1
100006b42:	mov	edx, 0x1000
100006b47:	mov	rdi, rax
100006b4a:	call	0x10000ae30 ## symbol stub for: _fread
100006b4f:	test	rax, rax
100006b52:	je	0x100006c17
100006b58:	sub	rbx, r12
100006b5b:	add	qword ptr [r15 + 0x38], rax
100006b5f:	add	r14, rax
100006b62:	mov	rax, r14
100006b65:	jmp	0x100006ac8
100006b6a:	test	r14, r14
100006b6d:	je	0x100006b8b
100006b6f:	mov	rsi, qword ptr [r15 + 0x50]
100006b73:	test	rsi, rsi
100006b76:	je	0x100006b8b
100006b78:	mov	rdi, qword ptr [r15 + 0x20]
100006b7c:	add	rsi, rdi
100006b7f:	mov	rdx, r14
100006b82:	call	0x10000aea8 ## symbol stub for: _memmove
100006b87:	mov	rbx, qword ptr [r15 + 0x40]
100006b8b:	mov	qword ptr [r15 + 0x50], 0x0
100006b93:	mov	rdi, qword ptr [r15 + 0x20]
100006b97:	add	rdi, r14
100006b9a:	sub	rbx, r14
100006b9d:	mov	rcx, qword ptr [r15 + 0x10]
100006ba1:	mov	esi, 0x1
100006ba6:	mov	rdx, rbx
100006ba9:	call	0x10000ae30 ## symbol stub for: _fread
100006bae:	test	rax, rax
100006bb1:	je	0x100006c05
100006bb3:	add	rax, r14
100006bb6:	mov	qword ptr [r15 + 0x38], rax
100006bba:	mov	rbx, r14
100006bbd:	jmp	0x100006ac8
100006bc2:	xor	eax, eax
100006bc4:	jmp	0x100006c66
100006bc9:	lea	rsi, [rbp - 0x30]
100006bcd:	mov	qword ptr [rsi], 0x0
100006bd4:	lea	rax, [rip + 0x9ea1]
100006bdb:	movzx	edx, byte ptr [rax + 0xe]
100006bdf:	mov	rcx, r15
100006be2:	call	0x100003328
100006be7:	jmp	0x100006c66
100006be9:	mov	rdi, r13
100006bec:	mov	rsi, r14
100006bef:	call	0x100002ed3
100006bf4:	mov	qword ptr [r15 + 0x30], rbx
100006bf8:	jmp	0x100006c66
100006bfa:	mov	rbx, rax
100006bfd:	mov	r14d, 0x1
100006c03:	jmp	0x100006c2c
100006c05:	mov	rdi, qword ptr [r15 + 0x10]
100006c09:	call	0x10000ae00 ## symbol stub for: _ferror
100006c0e:	test	eax, eax
100006c10:	je	0x100006c24
100006c12:	call	0x10000aa0b
100006c17:	mov	rdi, qword ptr [r15 + 0x10]
100006c1b:	call	0x10000ae00 ## symbol stub for: _ferror
100006c20:	test	eax, eax
100006c22:	jne	0x100006c7a
100006c24:	mov	rbx, qword ptr [r15 + 0x20]
100006c28:	add	rbx, qword ptr [r15 + 0x38]
100006c2c:	mov	rcx, qword ptr [r15 + 0x20]
100006c30:	mov	rdx, qword ptr [r15 + 0x50]
100006c34:	lea	rdi, [rcx + rdx]
100006c38:	xor	eax, eax
100006c3a:	cmp	rdi, rbx
100006c3d:	ja	0x100006c5c
100006c3f:	test	r14, r14
100006c42:	je	0x100006c5c
100006c44:	cmp	rdx, qword ptr [r15 + 0x38]
100006c48:	jae	0x100006c5c
100006c4a:	mov	rsi, rbx
100006c4d:	sub	rsi, rcx
100006c50:	sub	rsi, rdx
100006c53:	call	0x100002ed3
100006c58:	mov	rcx, qword ptr [r15 + 0x20]
100006c5c:	sub	rbx, rcx
100006c5f:	inc	rbx
100006c62:	mov	qword ptr [r15 + 0x50], rbx
100006c66:	add	rsp, 0x8
100006c6a:	pop	rbx
100006c6b:	pop	r12
100006c6d:	pop	r13
100006c6f:	pop	r14
100006c71:	pop	r15
100006c73:	pop	rbp
100006c74:	ret
100006c75:	call	0x10000aa1b
100006c7a:	call	0x10000a9fb
100006c7f:	test	rdi, rdi
100006c82:	je	0x100006d11
100006c88:	push	rbp
100006c89:	mov	rbp, rsp
100006c8c:	push	rbx
100006c8d:	push	rax
100006c8e:	mov	rbx, rdi
100006c91:	mov	rdi, qword ptr [rdi + 0x28]
100006c95:	test	rdi, rdi
100006c98:	je	0x100006ca3
100006c9a:	mov	rsi, qword ptr [rbx + 0x48]
100006c9e:	call	0x10000aeba ## symbol stub for: _munmap
100006ca3:	mov	edi, dword ptr [rbx + 0x58]
100006ca6:	test	edi, edi
100006ca8:	je	0x100006caf
100006caa:	call	0x10000add6 ## symbol stub for: _close
100006caf:	mov	rdi, qword ptr [rbx + 0x20]
100006cb3:	test	rdi, rdi
100006cb6:	je	0x100006cbd
100006cb8:	call	0x1000078e8
100006cbd:	mov	rdi, qword ptr [rbx + 0x10]
100006cc1:	test	rdi, rdi
100006cc4:	je	0x100006cdb
100006cc6:	mov	rax, qword ptr [rip + 0x5353] ## literal pool symbol address: ___stdinp
100006ccd:	cmp	rdi, qword ptr [rax]
100006cd0:	je	0x100006cdb
100006cd2:	mov	rsi, qword ptr [rbx + 0x18]
100006cd6:	call	0x100006474
100006cdb:	mov	rdi, qword ptr [rbx + 0x18]
100006cdf:	test	rdi, rdi
100006ce2:	je	0x100006ce9
100006ce4:	call	0x1000078e8
100006ce9:	xorps	xmm0, xmm0
100006cec:	movups	xmmword ptr [rbx + 0x50], xmm0
100006cf0:	movups	xmmword ptr [rbx + 0x40], xmm0
100006cf4:	movups	xmmword ptr [rbx + 0x30], xmm0
100006cf8:	movups	xmmword ptr [rbx + 0x20], xmm0
100006cfc:	movups	xmmword ptr [rbx + 0x10], xmm0
100006d00:	movups	xmmword ptr [rbx], xmm0
100006d03:	mov	rdi, rbx
100006d06:	add	rsp, 0x8
100006d0a:	pop	rbx
100006d0b:	pop	rbp
100006d0c:	jmp	0x1000078e8
100006d11:	ret
100006d12:	push	rbp
100006d13:	mov	rbp, rsp
100006d16:	push	r14
100006d18:	push	rbx
100006d19:	test	rdi, rdi
100006d1c:	je	0x100006d56
100006d1e:	mov	r14, rdi
100006d21:	mov	edi, dword ptr [rip + 0x9be9]
100006d27:	call	0x10000af80 ## symbol stub for: _semaphore_wait
100006d2c:	mov	rbx, qword ptr [rip + 0x9bd5]
100006d33:	test	rbx, rbx
100006d36:	je	0x100006d52
100006d38:	mov	rdi, qword ptr [rbx]
100006d3b:	test	rdi, rdi
100006d3e:	je	0x100006d4c
100006d40:	mov	rsi, r14
100006d43:	call	0x10000afaa ## symbol stub for: _strcmp
100006d48:	test	eax, eax
100006d4a:	je	0x100006d5a
100006d4c:	mov	rbx, qword ptr [rbx + 0x8]
100006d50:	jmp	0x100006d33
100006d52:	xor	ebx, ebx
100006d54:	jmp	0x100006d5c
100006d56:	xor	ebx, ebx
100006d58:	jmp	0x100006d67
100006d5a:	mov	bl, 0x1
100006d5c:	mov	edi, dword ptr [rip + 0x9bae]
100006d62:	call	0x10000af7a ## symbol stub for: _semaphore_signal
100006d67:	mov	eax, ebx
100006d69:	pop	rbx
100006d6a:	pop	r14
100006d6c:	pop	rbp
100006d6d:	ret
100006d6e:	push	rbp
100006d6f:	mov	rbp, rsp
100006d72:	push	r15
100006d74:	push	r14
100006d76:	push	r12
100006d78:	push	rbx
100006d79:	mov	r14, rdx
100006d7c:	mov	r12, rsi
100006d7f:	call	0x1000068a9
100006d84:	test	rax, rax
100006d87:	je	0x100006def
100006d89:	mov	r15, rax
100006d8c:	mov	rdi, r15
100006d8f:	call	0x100006a40
100006d94:	test	rax, rax
100006d97:	je	0x100006ddc
100006d99:	mov	rdi, r12
100006d9c:	mov	rsi, rax
100006d9f:	call	0x10000609e
100006da4:	mov	rax, qword ptr [r12 + 0x8]
100006da9:	cmp	rax, qword ptr [rip + 0x95f0]
100006db0:	jb	0x100006d8c
100006db2:	call	0x100005e98
100006db7:	mov	rbx, rax
100006dba:	mov	rdi, r12
100006dbd:	mov	rsi, rax
100006dc0:	call	0x100006df4
100006dc5:	mov	rdi, r14
100006dc8:	mov	rsi, rbx
100006dcb:	xor	edx, edx
100006dcd:	call	0x100005f20
100006dd2:	mov	rdi, r12
100006dd5:	call	0x10000614d
100006dda:	jmp	0x100006d8c
100006ddc:	mov	rdi, r15
100006ddf:	call	0x100006c7f
100006de4:	xor	eax, eax
100006de6:	pop	rbx
100006de7:	pop	r12
100006de9:	pop	r14
100006deb:	pop	r15
100006ded:	pop	rbp
100006dee:	ret
100006def:	call	0x10000aa30
100006df4:	push	rbp
100006df5:	mov	rbp, rsp
100006df8:	push	r14
100006dfa:	push	rbx
100006dfb:	mov	r14, rsi
100006dfe:	mov	rbx, rdi
100006e01:	lea	rax, [rip + 0x9bf0]
100006e08:	mov	rax, qword ptr [rax]
100006e0b:	cmp	byte ptr [rax + 0xd], 0x0
100006e0f:	jne	0x100006e33
100006e11:	cmp	byte ptr [rax + 0x10], 0x0
100006e15:	jne	0x100006e33
100006e17:	cmp	byte ptr [rax + 0x11], 0x0
100006e1b:	jne	0x100006e33
100006e1d:	cmp	byte ptr [rax + 0xb], 0x0
100006e21:	jne	0x100006e33
100006e23:	cmp	byte ptr [rax + 0x12], 0x0
100006e27:	jne	0x100006e33
100006e29:	cmp	byte ptr [rax + 0xe], 0x0
100006e2d:	je	0x100006f25
100006e33:	lea	rax, [rip + 0x9c42]
100006e3a:	mov	eax, dword ptr [rax + 0x4]
100006e3d:	cmp	eax, 0x4
100006e40:	je	0x100006f58
100006e46:	lea	rcx, [rip + 0x9c2f]
100006e4d:	cmp	byte ptr [rcx + 0xc], 0x0
100006e51:	je	0x100006e66
100006e53:	cmp	eax, 0x4
100006e56:	je	0x100006e76
100006e58:	cmp	eax, 0x2
100006e5b:	je	0x100006e76
100006e5d:	test	eax, eax
100006e5f:	je	0x100006e6a
100006e61:	call	0x10000aa40
100006e66:	test	eax, eax
100006e68:	jne	0x100006e76
100006e6a:	mov	dword ptr [rcx + 0x4], 0x2
100006e71:	mov	eax, 0x2
100006e76:	lea	rcx, [rip + 0x9b9b]
100006e7d:	cmp	byte ptr [rcx], 0x0
100006e80:	je	0x100006ecb
100006e82:	cmp	eax, 0x3
100006e85:	lea	rcx, [rip + 0x4835] ## literal pool for: "heapsort"
100006e8c:	lea	rdx, [rip + 0x4837] ## literal pool for: "quicksort"
100006e93:	cmove	rdx, rcx
100006e97:	cmp	eax, 0x4
100006e9a:	lea	rcx, [rip + 0x4816] ## literal pool for: "radixsort"
100006ea1:	cmovne	rcx, rdx
100006ea5:	cmp	eax, 0x2
100006ea8:	lea	rsi, [rip + 0x47fe] ## literal pool for: "mergesort"
100006eaf:	cmovne	rsi, rcx
100006eb3:	lea	rdi, [rip + 0x47e3] ## literal pool for: "sort_method=%s\n"
100006eba:	xor	eax, eax
100006ebc:	call	0x10000aede ## symbol stub for: _printf
100006ec1:	lea	rax, [rip + 0x9bb4]
100006ec8:	mov	eax, dword ptr [rax + 0x4]
100006ecb:	dec	eax
100006ecd:	cmp	eax, 0x3
100006ed0:	ja	0x100006eeb
100006ed2:	lea	rcx, [rip + 0x87]
100006ed9:	movsxd	rax, dword ptr [rcx + 4*rax]
100006edd:	add	rax, rcx
100006ee0:	jmp	rax
100006ee2:	lea	rsi, [rip + 0x8ec]
100006ee9:	jmp	0x100006efb
100006eeb:	mov	rsi, qword ptr [rip + 0x515e] ## literal pool symbol address: _mergesort
100006ef2:	jmp	0x100006efb
100006ef4:	mov	rsi, qword ptr [rip + 0x5135] ## literal pool symbol address: _heapsort
100006efb:	mov	rdi, rbx
100006efe:	mov	rdx, r14
100006f01:	pop	rbx
100006f02:	pop	r14
100006f04:	pop	rbp
100006f05:	jmp	0x100007446
100006f0a:	mov	rdi, qword ptr [rbx]
100006f0d:	mov	rsi, qword ptr [rbx + 0x10]
100006f11:	call	0x100007923
100006f16:	mov	rdi, rbx
100006f19:	mov	rsi, r14
100006f1c:	pop	rbx
100006f1d:	pop	r14
100006f1f:	pop	rbp
100006f20:	jmp	0x1000061db
100006f25:	lea	rcx, [rip + 0x9b50]
100006f2c:	mov	eax, dword ptr [rcx + 0x4]
100006f2f:	test	eax, eax
100006f31:	jne	0x100006e46
100006f37:	lea	rdx, [rip + 0x9ab6]
100006f3e:	cmp	byte ptr [rdx], 0x0
100006f41:	je	0x100006e46
100006f47:	mov	dword ptr [rcx + 0x4], 0x4
100006f4e:	mov	eax, 0x4
100006f53:	jmp	0x100006e76
100006f58:	call	0x10000aa60
100006f5d:	nop	dword ptr [rax]
	.byte 0x82 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100006f63:	dec	dword ptr [rbx - 0x6b000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100006f6b:	jmp	[rdx + 0x48ffffff]
100006f71:	test	edi, edi
100006f73:	je	0x1000070a6
100006f79:	test	rsi, rsi
100006f7c:	je	0x1000070a6
100006f82:	push	rbp
100006f83:	mov	rbp, rsp
100006f86:	push	r15
100006f88:	push	r14
100006f8a:	push	r13
100006f8c:	push	r12
100006f8e:	push	rbx
100006f8f:	sub	rsp, 0x38
100006f93:	mov	r12, rdi
100006f96:	mov	qword ptr [rbp - 0x38], rsi
100006f9a:	mov	r14, qword ptr [rdi + 0x8]
100006f9e:	cmp	r14, qword ptr [rip + 0x940b]
100006fa5:	jae	0x100006fb0
100006fa7:	mov	rsi, qword ptr [r12]
100006fab:	jmp	0x10000708c
100006fb0:	pxor	xmm0, xmm0
100006fb4:	movdqa	xmmword ptr [rbp - 0x60], xmm0
100006fb9:	mov	qword ptr [rbp - 0x50], 0x0
100006fc1:	mov	byte ptr [rbp - 0x48], 0x1
100006fc5:	test	r14, r14
100006fc8:	je	0x100007050
100006fce:	xor	r15d, r15d
100006fd1:	sub	r14, r15
100006fd4:	call	0x100005e98
100006fd9:	mov	rcx, qword ptr [rip + 0x93d0]
100006fe0:	lea	rbx, [rcx - 0x1]
100006fe4:	cmp	r14, rcx
100006fe7:	cmovb	rbx, r14
100006feb:	lea	rsi, [8*r15]
100006ff3:	add	rsi, qword ptr [r12]
100006ff7:	mov	rdi, rbx
100006ffa:	mov	qword ptr [rbp - 0x40], rax
100006ffe:	mov	rdx, rax
100007001:	call	0x1000070a7
100007006:	mov	qword ptr [rbp - 0x30], rbx
10000700a:	test	rbx, rbx
10000700d:	je	0x100007033
10000700f:	cmp	byte ptr [r12 + 0x18], 0x0
100007015:	je	0x100007033
100007017:	mov	r14, r15
10000701a:	mov	r13, qword ptr [rbp - 0x30]
10000701e:	mov	rax, qword ptr [r12]
100007022:	mov	rdi, qword ptr [rax + 8*r14]
100007026:	call	0x10000aff8 ## symbol stub for: _unlink
10000702b:	inc	r14
10000702e:	dec	r13
100007031:	jne	0x10000701e
100007033:	lea	rdi, [rbp - 0x60]
100007037:	mov	rsi, qword ptr [rbp - 0x40]
10000703b:	xor	edx, edx
10000703d:	call	0x100005f20
100007042:	add	r15, qword ptr [rbp - 0x30]
100007046:	mov	r14, qword ptr [r12 + 0x8]
10000704b:	cmp	r14, r15
10000704e:	ja	0x100006fd1
100007050:	mov	byte ptr [r12 + 0x18], 0x0
100007056:	mov	rdi, r12
100007059:	call	0x100005ff3
10000705e:	mov	rsi, qword ptr [rbp - 0x60]
100007062:	mov	qword ptr [r12], rsi
100007066:	movdqu	xmm0, xmmword ptr [rbp - 0x58]
10000706b:	movdqu	xmmword ptr [r12 + 0x8], xmm0
100007072:	mov	al, byte ptr [rbp - 0x48]
100007075:	mov	byte ptr [r12 + 0x18], al
10000707a:	movq	r14, xmm0
10000707f:	cmp	r14, qword ptr [rip + 0x932a]
100007086:	jae	0x100006fb0
10000708c:	mov	rdi, r14
10000708f:	mov	rdx, qword ptr [rbp - 0x38]
100007093:	call	0x1000070a7
100007098:	add	rsp, 0x38
10000709c:	pop	rbx
10000709d:	pop	r12
10000709f:	pop	r13
1000070a1:	pop	r14
1000070a3:	pop	r15
1000070a5:	pop	rbp
1000070a6:	ret
1000070a7:	push	rbp
1000070a8:	mov	rbp, rsp
1000070ab:	push	r15
1000070ad:	push	r14
1000070af:	push	r13
1000070b1:	push	r12
1000070b3:	push	rbx
1000070b4:	sub	rsp, 0x18
1000070b8:	test	rsi, rsi
1000070bb:	je	0x10000742a
1000070c1:	test	rdx, rdx
1000070c4:	je	0x10000742a
1000070ca:	mov	rbx, rsi
1000070cd:	mov	r12, rdi
1000070d0:	lea	rsi, [rip + 0x4581] ## literal pool for: "w"
1000070d7:	mov	qword ptr [rbp - 0x40], rdx
1000070db:	mov	rdi, rdx
1000070de:	call	0x10000630e
1000070e3:	mov	qword ptr [rbp - 0x30], rax
1000070e7:	test	rax, rax
1000070ea:	je	0x100007441
1000070f0:	lea	rdi, [8*r12 + 0x8]
1000070f8:	call	0x1000078d3
1000070fd:	mov	r13, rax
100007100:	test	r12, r12
100007103:	je	0x1000071f9
100007109:	xor	r15d, r15d
10000710c:	test	r13, r13
10000710f:	je	0x1000071a4
100007115:	mov	r14, qword ptr [rbx + 8*r15]
100007119:	test	r14, r14
10000711c:	je	0x1000071a4
100007122:	mov	edi, 0x18
100007127:	call	0x1000078d3
10000712c:	mov	qword ptr [r13 + 8*r15], rax
100007131:	mov	qword ptr [rax + 0x10], r15
100007135:	mov	rdi, r14
100007138:	call	0x1000068a9
10000713d:	mov	rcx, qword ptr [r13 + 8*r15]
100007142:	mov	qword ptr [rcx], rax
100007145:	mov	rax, qword ptr [r13 + 8*r15]
10000714a:	mov	rdi, qword ptr [rax]
10000714d:	test	rdi, rdi
100007150:	je	0x100007439
100007156:	call	0x100006a40
10000715b:	test	rax, rax
10000715e:	je	0x100007184
100007160:	mov	r14, rax
100007163:	call	0x100004267
100007168:	mov	rcx, qword ptr [r13 + 8*r15]
10000716d:	mov	qword ptr [rcx + 0x8], rax
100007171:	mov	rax, qword ptr [r13 + 8*r15]
100007176:	mov	rdi, qword ptr [rax + 0x8]
10000717a:	mov	rsi, r14
10000717d:	call	0x100004355
100007182:	jmp	0x1000071a4
100007184:	mov	rax, qword ptr [r13 + 8*r15]
100007189:	mov	rdi, qword ptr [rax]
10000718c:	call	0x100006c7f
100007191:	mov	rax, qword ptr [r13 + 8*r15]
100007196:	xor	ecx, ecx
100007198:	mov	qword ptr [rax], rcx
10000719b:	mov	rax, qword ptr [r13 + 8*r15]
1000071a0:	mov	qword ptr [rax + 0x8], rcx
1000071a4:	inc	r15
1000071a7:	cmp	r12, r15
1000071aa:	jne	0x10000710c
1000071b0:	xor	r14d, r14d
1000071b3:	test	r14, r14
1000071b6:	je	0x1000071f1
1000071b8:	mov	rdi, qword ptr [r13 + 8*r14]
1000071bd:	mov	r15, r14
1000071c0:	lea	rbx, [r15 - 0x1]
1000071c4:	shr	rbx
1000071c7:	mov	rsi, qword ptr [r13 + 8*rbx]
1000071cc:	call	0x1000077e2
1000071d1:	test	eax, eax
1000071d3:	jns	0x1000071f1
1000071d5:	mov	rdi, qword ptr [r13 + 8*r15]
1000071da:	mov	rax, qword ptr [r13 + 8*rbx]
1000071df:	mov	qword ptr [r13 + 8*r15], rax
1000071e4:	mov	qword ptr [r13 + 8*rbx], rdi
1000071e9:	mov	r15, rbx
1000071ec:	test	rbx, rbx
1000071ef:	jne	0x1000071c0
1000071f1:	inc	r14
1000071f4:	cmp	r14, r12
1000071f7:	jne	0x1000071b3
1000071f9:	mov	r14, qword ptr [r13]
1000071fd:	cmp	qword ptr [r14], 0x0
100007201:	je	0x10000738d
100007207:	xor	eax, eax
100007209:	mov	qword ptr [rbp - 0x38], rax
10000720d:	test	r14, r14
100007210:	je	0x1000072a3
100007216:	mov	rax, qword ptr [r14 + 0x8]
10000721a:	test	rax, rax
10000721d:	je	0x1000072a3
100007223:	mov	rdi, qword ptr [rax]
100007226:	test	rdi, rdi
100007229:	je	0x1000072a3
10000722b:	lea	rax, [rip + 0x984a]
100007232:	cmp	byte ptr [rax + 0xd], 0x0
100007236:	je	0x100007278
100007238:	add	r14, 0x8
10000723c:	mov	rbx, qword ptr [rbp - 0x38]
100007240:	test	rbx, rbx
100007243:	je	0x100007287
100007245:	mov	rdi, rbx
100007248:	mov	rsi, r14
10000724b:	call	0x100004ffd
100007250:	test	eax, eax
100007252:	je	0x1000072a3
100007254:	mov	rax, qword ptr [r14]
100007257:	mov	rdi, qword ptr [rax]
10000725a:	lea	rax, [rip + 0x981b]
100007261:	movzx	edx, byte ptr [rax + 0xe]
100007265:	mov	rsi, qword ptr [rbp - 0x30]
100007269:	call	0x1000031f0
10000726e:	mov	rdi, rbx
100007271:	call	0x10000307d
100007276:	jmp	0x100007294
100007278:	movzx	edx, byte ptr [rax + 0xe]
10000727c:	mov	rsi, qword ptr [rbp - 0x30]
100007280:	call	0x1000031f0
100007285:	jmp	0x1000072a3
100007287:	movzx	edx, byte ptr [rax + 0xe]
10000728b:	mov	rsi, qword ptr [rbp - 0x30]
10000728f:	call	0x1000031f0
100007294:	mov	rax, qword ptr [r14]
100007297:	mov	rdi, qword ptr [rax]
10000729a:	call	0x100002df1
10000729f:	mov	qword ptr [rbp - 0x38], rax
1000072a3:	mov	r15, qword ptr [r13]
1000072a7:	test	r15, r15
1000072aa:	je	0x10000730e
1000072ac:	mov	rdi, qword ptr [r15]
1000072af:	test	rdi, rdi
1000072b2:	je	0x10000730e
1000072b4:	call	0x100006a40
1000072b9:	test	rax, rax
1000072bc:	je	0x1000072e0
1000072be:	mov	r14, rax
1000072c1:	mov	rdi, qword ptr [r15 + 0x8]
1000072c5:	test	rdi, rdi
1000072c8:	jne	0x1000072d6
1000072ca:	call	0x100004267
1000072cf:	mov	rdi, rax
1000072d2:	mov	qword ptr [r15 + 0x8], rax
1000072d6:	mov	rsi, r14
1000072d9:	call	0x100004355
1000072de:	jmp	0x10000730e
1000072e0:	mov	rdi, qword ptr [r15]
1000072e3:	call	0x100006c7f
1000072e8:	mov	qword ptr [r15], 0x0
1000072ef:	mov	rdi, qword ptr [r15 + 0x8]
1000072f3:	test	rdi, rdi
1000072f6:	je	0x10000730e
1000072f8:	call	0x1000043b5
1000072fd:	mov	rdi, qword ptr [r15 + 0x8]
100007301:	call	0x1000078e8
100007306:	mov	qword ptr [r15 + 0x8], 0x0
10000730e:	cmp	r12, 0x2
100007312:	jb	0x100007371
100007314:	mov	ebx, 0x1
100007319:	xor	r14d, r14d
10000731c:	lea	r15, [rbx + 0x1]
100007320:	cmp	r15, r12
100007323:	jae	0x100007338
100007325:	mov	rdi, qword ptr [r13 + 8*rbx]
10000732a:	mov	rsi, qword ptr [r13 + 8*rbx + 0x8]
10000732f:	call	0x1000077e2
100007334:	test	eax, eax
100007336:	jg	0x10000733b
100007338:	mov	r15, rbx
10000733b:	mov	rdi, qword ptr [r13 + 8*r14]
100007340:	mov	rsi, qword ptr [r13 + 8*r15]
100007345:	call	0x1000077e2
10000734a:	test	eax, eax
10000734c:	jle	0x100007371
10000734e:	mov	rax, qword ptr [r13 + 8*r14]
100007353:	mov	rcx, qword ptr [r13 + 8*r15]
100007358:	mov	qword ptr [r13 + 8*r14], rcx
10000735d:	mov	qword ptr [r13 + 8*r15], rax
100007362:	lea	rbx, [r15 + r15]
100007366:	inc	rbx
100007369:	mov	r14, r15
10000736c:	cmp	rbx, r12
10000736f:	jb	0x10000731c
100007371:	mov	r14, qword ptr [r13]
100007375:	cmp	qword ptr [r14], 0x0
100007379:	jne	0x10000720d
10000737f:	mov	rdi, qword ptr [rbp - 0x38]
100007383:	test	rdi, rdi
100007386:	je	0x10000738d
100007388:	call	0x10000307d
10000738d:	test	r12, r12
100007390:	je	0x100007407
100007392:	xor	r14d, r14d
100007395:	mov	rdi, qword ptr [r13 + 8*r14]
10000739a:	test	rdi, rdi
10000739d:	je	0x1000073ff
10000739f:	mov	rax, qword ptr [rdi]
1000073a2:	test	rax, rax
1000073a5:	je	0x1000073c0
1000073a7:	mov	rdi, rax
1000073aa:	call	0x100006c7f
1000073af:	mov	rax, qword ptr [r13 + 8*r14]
1000073b4:	mov	qword ptr [rax], 0x0
1000073bb:	mov	rdi, qword ptr [r13 + 8*r14]
1000073c0:	mov	rax, qword ptr [rdi + 0x8]
1000073c4:	test	rax, rax
1000073c7:	je	0x1000073f1
1000073c9:	mov	rdi, rax
1000073cc:	call	0x1000043b5
1000073d1:	mov	rax, qword ptr [r13 + 8*r14]
1000073d6:	mov	rdi, qword ptr [rax + 0x8]
1000073da:	call	0x1000078e8
1000073df:	mov	rax, qword ptr [r13 + 8*r14]
1000073e4:	mov	qword ptr [rax + 0x8], 0x0
1000073ec:	mov	rdi, qword ptr [r13 + 8*r14]
1000073f1:	call	0x1000078e8
1000073f6:	mov	qword ptr [r13 + 8*r14], 0x0
1000073ff:	inc	r14
100007402:	cmp	r12, r14
100007405:	jne	0x100007395
100007407:	mov	rdi, r13
10000740a:	call	0x1000078e8
10000740f:	mov	rdi, qword ptr [rbp - 0x30]
100007413:	mov	rsi, qword ptr [rbp - 0x40]
100007417:	add	rsp, 0x18
10000741b:	pop	rbx
10000741c:	pop	r12
10000741e:	pop	r13
100007420:	pop	r14
100007422:	pop	r15
100007424:	pop	rbp
100007425:	jmp	0x100006474
10000742a:	add	rsp, 0x18
10000742e:	pop	rbx
10000742f:	pop	r12
100007431:	pop	r13
100007433:	pop	r14
100007435:	pop	r15
100007437:	pop	rbp
100007438:	ret
100007439:	mov	rdi, r14
10000743c:	call	0x10000aa90
100007441:	call	0x10000aa80
100007446:	push	rbp
100007447:	mov	rbp, rsp
10000744a:	push	r15
10000744c:	push	r14
10000744e:	push	r13
100007450:	push	r12
100007452:	push	rbx
100007453:	sub	rsp, 0x68
100007457:	mov	r12, rdx
10000745a:	mov	r13, rsi
10000745d:	mov	r15, rdi
100007460:	mov	rax, qword ptr [rip + 0x4ba9] ## literal pool symbol address: ___stack_chk_guard
100007467:	mov	rax, qword ptr [rax]
10000746a:	mov	qword ptr [rbp - 0x30], rax
10000746e:	lea	r14, [rip + 0x8fcb]
100007475:	mov	rbx, qword ptr [r14]
100007478:	mov	rsi, qword ptr [rdi + 0x10]
10000747c:	cmp	rbx, 0x2
100007480:	jb	0x100007785
100007486:	cmp	rsi, 0x270f
10000748d:	jbe	0x100007785
100007493:	mov	qword ptr [rbp - 0x80], r12
100007497:	shl	rbx, 0x3
10000749b:	mov	rdi, rbx
10000749e:	call	0x1000078d3
1000074a3:	mov	r12, rax
1000074a6:	mov	rax, qword ptr [r15 + 0x10]
1000074aa:	mov	rcx, qword ptr [r14]
1000074ad:	xor	edx, edx
1000074af:	div	rcx
1000074b2:	mov	qword ptr [rip + 0x9467], r13
1000074b9:	test	rcx, rcx
1000074bc:	je	0x100007522
1000074be:	mov	r14, rax
1000074c1:	xor	r13d, r13d
1000074c4:	xor	ebx, ebx
1000074c6:	mov	edi, 0x28
1000074cb:	call	0x1000078d3
1000074d0:	mov	qword ptr [r12 + 8*rbx], rax
1000074d4:	lea	rcx, [8*r13]
1000074dc:	add	rcx, qword ptr [r15]
1000074df:	mov	qword ptr [rax], rcx
1000074e2:	mov	rcx, qword ptr [r12 + 8*rbx]
1000074e6:	mov	qword ptr [rcx + 0x8], 0x0
1000074ee:	mov	qword ptr [rcx + 0x20], rbx
1000074f2:	lea	rax, [rip + 0x8f47]
1000074f9:	mov	rax, qword ptr [rax]
1000074fc:	lea	rsi, [rax - 0x1]
100007500:	mov	rdx, r14
100007503:	cmp	rbx, rsi
100007506:	jne	0x10000750f
100007508:	mov	rdx, qword ptr [r15 + 0x10]
10000750c:	sub	rdx, r13
10000750f:	mov	qword ptr [rcx + 0x10], rdx
100007513:	mov	qword ptr [rcx + 0x18], rdx
100007517:	add	r13, rdx
10000751a:	inc	rbx
10000751d:	cmp	rbx, rax
100007520:	jb	0x1000074c6
100007522:	lea	rdi, [rip + 0x93ff]
100007529:	xor	edx, edx
10000752b:	call	0x100005d80
100007530:	lea	r14, [rip + 0x8f09]
100007537:	cmp	qword ptr [r14], 0x0
10000753b:	je	0x1000075d1
100007541:	xor	r14d, r14d
100007544:	lea	r15, [rbp - 0x70]
100007548:	lea	rbx, [rip + 0x2f0]
10000754f:	lea	r13, [rbp - 0x88]
100007556:	mov	rdi, r15
100007559:	call	0x10000aeea ## symbol stub for: _pthread_attr_init
10000755e:	mov	rdi, r15
100007561:	mov	esi, 0x2
100007566:	call	0x10000aef0 ## symbol stub for: _pthread_attr_setdetachstate
10000756b:	mov	rcx, qword ptr [r12 + 8*r14]
10000756f:	mov	rdi, r13
100007572:	mov	rsi, r15
100007575:	mov	rdx, rbx
100007578:	call	0x10000af0e ## symbol stub for: _pthread_create
10000757d:	test	eax, eax
10000757f:	jns	0x100007596
100007581:	call	0x10000ada6 ## symbol stub for: ___error
100007586:	cmp	dword ptr [rax], 0x23
100007589:	jne	0x1000077cb
10000758f:	call	0x10000af68 ## symbol stub for: _sched_yield
100007594:	jmp	0x10000756b
100007596:	mov	rdi, r15
100007599:	call	0x10000aee4 ## symbol stub for: _pthread_attr_destroy
10000759e:	inc	r14
1000075a1:	lea	rax, [rip + 0x8e98]
1000075a8:	mov	rax, qword ptr [rax]
1000075ab:	cmp	r14, rax
1000075ae:	jb	0x100007556
1000075b0:	test	rax, rax
1000075b3:	lea	r14, [rip + 0x8e86]
1000075ba:	je	0x1000075d1
1000075bc:	xor	ebx, ebx
1000075be:	mov	edi, dword ptr [rip + 0x9364]
1000075c4:	call	0x10000af80 ## symbol stub for: _semaphore_wait
1000075c9:	inc	rbx
1000075cc:	cmp	rbx, qword ptr [r14]
1000075cf:	jb	0x1000075be
1000075d1:	mov	rax, qword ptr [rip + 0x4a70] ## literal pool symbol address: _mach_task_self_
1000075d8:	mov	edi, dword ptr [rax]
1000075da:	mov	esi, dword ptr [rip + 0x9348]
1000075e0:	call	0x10000af74 ## symbol stub for: _semaphore_destroy
1000075e5:	mov	r13, qword ptr [r14]
1000075e8:	lea	rsi, [rip + 0x4069] ## literal pool for: "w"
1000075ef:	mov	rdi, qword ptr [rbp - 0x80]
1000075f3:	call	0x10000630e
1000075f8:	mov	qword ptr [rbp - 0x78], rax
1000075fc:	mov	qword ptr [rbp - 0x70], 0x0
100007604:	test	r13, r13
100007607:	je	0x10000773f
10000760d:	xor	r14d, r14d
100007610:	test	r14, r14
100007613:	je	0x100007648
100007615:	mov	rdi, qword ptr [r12 + 8*r14]
100007619:	mov	r15, r14
10000761c:	lea	rbx, [r15 - 0x1]
100007620:	shr	rbx
100007623:	mov	rsi, qword ptr [r12 + 8*rbx]
100007627:	call	0x100007876
10000762c:	test	eax, eax
10000762e:	jns	0x100007648
100007630:	mov	rdi, qword ptr [r12 + 8*r15]
100007634:	mov	rax, qword ptr [r12 + 8*rbx]
100007638:	mov	qword ptr [r12 + 8*r15], rax
10000763c:	mov	qword ptr [r12 + 8*rbx], rdi
100007640:	mov	r15, rbx
100007643:	test	rbx, rbx
100007646:	jne	0x10000761c
100007648:	inc	r14
10000764b:	cmp	r14, r13
10000764e:	jne	0x100007610
100007650:	jmp	0x10000773f
100007655:	cmp	qword ptr [rbp - 0x78], 0x0
10000765a:	je	0x1000076c6
10000765c:	test	r14, r14
10000765f:	je	0x1000076c6
100007661:	mov	rsi, qword ptr [r14]
100007664:	mov	rax, qword ptr [rsi]
100007667:	mov	rdi, qword ptr [rax]
10000766a:	test	rdi, rdi
10000766d:	je	0x1000076c6
10000766f:	lea	rax, [rip + 0x9406]
100007676:	cmp	byte ptr [rax + 0xd], 0x0
10000767a:	je	0x1000076b9
10000767c:	cmp	qword ptr [rbp - 0x70], 0x0
100007681:	je	0x1000076a0
100007683:	lea	rdi, [rbp - 0x70]
100007687:	call	0x10000525f
10000768c:	test	eax, eax
10000768e:	je	0x1000076c6
100007690:	mov	rax, qword ptr [r14]
100007693:	mov	rax, qword ptr [rax]
100007696:	mov	rdi, qword ptr [rax]
100007699:	lea	rax, [rip + 0x93dc]
1000076a0:	movzx	edx, byte ptr [rax + 0xe]
1000076a4:	mov	rsi, qword ptr [rbp - 0x78]
1000076a8:	call	0x1000031f0
1000076ad:	mov	rax, qword ptr [r14]
1000076b0:	mov	rax, qword ptr [rax]
1000076b3:	mov	qword ptr [rbp - 0x70], rax
1000076b7:	jmp	0x1000076c6
1000076b9:	movzx	edx, byte ptr [rax + 0xe]
1000076bd:	mov	rsi, qword ptr [rbp - 0x78]
1000076c1:	call	0x1000031f0
1000076c6:	mov	rax, qword ptr [r12]
1000076ca:	test	rax, rax
1000076cd:	je	0x1000076e3
1000076cf:	mov	rcx, qword ptr [rax + 0x10]
1000076d3:	test	rcx, rcx
1000076d6:	je	0x1000076e3
1000076d8:	add	qword ptr [rax], 0x8
1000076dc:	dec	rcx
1000076df:	mov	qword ptr [rax + 0x10], rcx
1000076e3:	cmp	r13, 0x2
1000076e7:	jb	0x10000773f
1000076e9:	mov	ebx, 0x1
1000076ee:	xor	r15d, r15d
1000076f1:	lea	r14, [rbx + 0x1]
1000076f5:	cmp	r14, r13
1000076f8:	jae	0x10000770c
1000076fa:	mov	rdi, qword ptr [r12 + 8*rbx]
1000076fe:	mov	rsi, qword ptr [r12 + 8*rbx + 0x8]
100007703:	call	0x100007876
100007708:	test	eax, eax
10000770a:	jg	0x10000770f
10000770c:	mov	r14, rbx
10000770f:	mov	rdi, qword ptr [r12 + 8*r15]
100007713:	mov	rsi, qword ptr [r12 + 8*r14]
100007717:	call	0x100007876
10000771c:	test	eax, eax
10000771e:	jle	0x10000773f
100007720:	mov	rax, qword ptr [r12 + 8*r15]
100007724:	mov	rcx, qword ptr [r12 + 8*r14]
100007728:	mov	qword ptr [r12 + 8*r15], rcx
10000772c:	mov	qword ptr [r12 + 8*r14], rax
100007730:	lea	rbx, [r14 + r14]
100007734:	inc	rbx
100007737:	mov	r15, r14
10000773a:	cmp	rbx, r13
10000773d:	jb	0x1000076f1
10000773f:	mov	r14, qword ptr [r12]
100007743:	cmp	qword ptr [r14 + 0x10], 0x0
100007748:	jne	0x100007655
10000774e:	mov	rdi, qword ptr [rbp - 0x78]
100007752:	mov	rsi, qword ptr [rbp - 0x80]
100007756:	call	0x100006474
10000775b:	lea	r14, [rip + 0x8cde]
100007762:	cmp	qword ptr [r14], 0x0
100007766:	je	0x10000777b
100007768:	xor	ebx, ebx
10000776a:	mov	rdi, qword ptr [r12 + 8*rbx]
10000776e:	call	0x1000078e8
100007773:	inc	rbx
100007776:	cmp	rbx, qword ptr [r14]
100007779:	jb	0x10000776a
10000777b:	mov	rdi, r12
10000777e:	call	0x1000078e8
100007783:	jmp	0x1000077ac
100007785:	mov	qword ptr [r14], 0x1
10000778c:	mov	rdi, qword ptr [r15]
10000778f:	lea	rcx, [rip - 0x2537]
100007796:	mov	edx, 0x8
10000779b:	call	r13
10000779e:	mov	rdi, r15
1000077a1:	mov	rsi, r12
1000077a4:	call	0x1000061db
1000077a9:	mov	qword ptr [r14], rbx
1000077ac:	mov	rax, qword ptr [rip + 0x485d] ## literal pool symbol address: ___stack_chk_guard
1000077b3:	mov	rax, qword ptr [rax]
1000077b6:	cmp	rax, qword ptr [rbp - 0x30]
1000077ba:	jne	0x1000077d0
1000077bc:	add	rsp, 0x68
1000077c0:	pop	rbx
1000077c1:	pop	r12
1000077c3:	pop	r13
1000077c5:	pop	r14
1000077c7:	pop	r15
1000077c9:	pop	rbp
1000077ca:	ret
1000077cb:	call	0x10000aab5
1000077d0:	call	0x10000adb8 ## symbol stub for: ___stack_chk_fail
1000077d5:	push	rbp
1000077d6:	mov	rbp, rsp
1000077d9:	call	0x10000af3e ## symbol stub for: _qsort
1000077de:	xor	eax, eax
1000077e0:	pop	rbp
1000077e1:	ret
1000077e2:	push	rbp
1000077e3:	mov	rbp, rsp
1000077e6:	push	r14
1000077e8:	push	rbx
1000077e9:	cmp	rdi, rsi
1000077ec:	je	0x100007827
1000077ee:	mov	r14, rsi
1000077f1:	mov	rbx, rdi
1000077f4:	cmp	qword ptr [rdi], 0x0
1000077f8:	mov	rcx, qword ptr [rsi]
1000077fb:	je	0x10000782b
1000077fd:	test	rcx, rcx
100007800:	je	0x100007835
100007802:	lea	rdi, [rbx + 0x8]
100007806:	lea	rsi, [r14 + 0x8]
10000780a:	call	0x10000525f
10000780f:	test	eax, eax
100007811:	jne	0x10000783a
100007813:	mov	rax, qword ptr [rbx + 0x10]
100007817:	xor	ecx, ecx
100007819:	cmp	rax, qword ptr [r14 + 0x10]
10000781d:	setae	cl
100007820:	lea	eax, [rcx + rcx]
100007823:	dec	eax
100007825:	jmp	0x10000783a
100007827:	xor	eax, eax
100007829:	jmp	0x10000783a
10000782b:	xor	eax, eax
10000782d:	test	rcx, rcx
100007830:	setne	al
100007833:	jmp	0x10000783a
100007835:	mov	eax, 0xffffffff
10000783a:	pop	rbx
10000783b:	pop	r14
10000783d:	pop	rbp
10000783e:	ret
10000783f:	push	rbp
100007840:	mov	rbp, rsp
100007843:	push	rbx
100007844:	push	rax
100007845:	mov	rbx, rdi
100007848:	mov	rdi, qword ptr [rdi]
10000784b:	mov	rsi, qword ptr [rbx + 0x10]
10000784f:	lea	rcx, [rip - 0x25f7]
100007856:	mov	edx, 0x8
10000785b:	call	qword ptr [rip + 0x90bf]
100007861:	mov	edi, dword ptr [rip + 0x90c1]
100007867:	call	0x10000af7a ## symbol stub for: _semaphore_signal
10000786c:	mov	rax, rbx
10000786f:	add	rsp, 0x8
100007873:	pop	rbx
100007874:	pop	rbp
100007875:	ret
100007876:	push	rbp
100007877:	mov	rbp, rsp
10000787a:	push	r14
10000787c:	push	rbx
10000787d:	cmp	rdi, rsi
100007880:	je	0x1000078bb
100007882:	mov	r14, rsi
100007885:	mov	rbx, rdi
100007888:	cmp	qword ptr [rdi + 0x10], 0x0
10000788d:	mov	rcx, qword ptr [rsi + 0x10]
100007891:	je	0x1000078bf
100007893:	test	rcx, rcx
100007896:	je	0x1000078c9
100007898:	mov	rdi, qword ptr [rbx]
10000789b:	mov	rsi, qword ptr [r14]
10000789e:	call	0x10000525f
1000078a3:	test	eax, eax
1000078a5:	jne	0x1000078ce
1000078a7:	mov	rax, qword ptr [rbx + 0x20]
1000078ab:	xor	ecx, ecx
1000078ad:	cmp	rax, qword ptr [r14 + 0x20]
1000078b1:	setae	cl
1000078b4:	lea	eax, [rcx + rcx]
1000078b7:	dec	eax
1000078b9:	jmp	0x1000078ce
1000078bb:	xor	eax, eax
1000078bd:	jmp	0x1000078ce
1000078bf:	xor	eax, eax
1000078c1:	test	rcx, rcx
1000078c4:	setne	al
1000078c7:	jmp	0x1000078ce
1000078c9:	mov	eax, 0xffffffff
1000078ce:	pop	rbx
1000078cf:	pop	r14
1000078d1:	pop	rbp
1000078d2:	ret
1000078d3:	push	rbp
1000078d4:	mov	rbp, rsp
1000078d7:	call	0x10000ae78 ## symbol stub for: _malloc
1000078dc:	test	rax, rax
1000078df:	je	0x1000078e3
1000078e1:	pop	rbp
1000078e2:	ret
1000078e3:	call	0x10000aac5
1000078e8:	push	rbp
1000078e9:	mov	rbp, rsp
1000078ec:	test	rdi, rdi
1000078ef:	je	0x1000078f7
1000078f1:	pop	rbp
1000078f2:	jmp	0x10000ae36 ## symbol stub for: _free
1000078f7:	pop	rbp
1000078f8:	ret
1000078f9:	push	rbp
1000078fa:	mov	rbp, rsp
1000078fd:	call	0x10000af4a ## symbol stub for: _realloc
100007902:	test	rax, rax
100007905:	je	0x100007909
100007907:	pop	rbp
100007908:	ret
100007909:	call	0x10000aad5
10000790e:	push	rbp
10000790f:	mov	rbp, rsp
100007912:	call	0x10000afbc ## symbol stub for: _strdup
100007917:	test	rax, rax
10000791a:	je	0x10000791e
10000791c:	pop	rbp
10000791d:	ret
10000791e:	call	0x10000aae5
100007923:	push	rbp
100007924:	mov	rbp, rsp
100007927:	push	r15
100007929:	push	r14
10000792b:	push	r13
10000792d:	push	r12
10000792f:	push	rbx
100007930:	sub	rsp, 0x68
100007934:	mov	rbx, rsi
100007937:	mov	r14, rdi
10000793a:	mov	rax, qword ptr [rip + 0x46cf] ## literal pool symbol address: ___stack_chk_guard
100007941:	mov	rax, qword ptr [rax]
100007944:	mov	qword ptr [rbp - 0x30], rax
100007948:	lea	r12, [rip + 0x8af1]
10000794f:	mov	rax, qword ptr [r12]
100007953:	cmp	rsi, 0x270f
10000795a:	mov	qword ptr [rbp - 0x80], rax
10000795e:	ja	0x10000796a
100007960:	mov	qword ptr [r12], 0x1
100007968:	jmp	0x1000079b1
10000796a:	cmp	rax, 0x2
10000796e:	jb	0x1000079b1
100007970:	lea	r15, [rbp - 0x70]
100007974:	mov	rdi, r15
100007977:	call	0x10000af2c ## symbol stub for: _pthread_mutexattr_init
10000797c:	lea	rdi, [rip + 0x8fad]
100007983:	mov	rsi, r15
100007986:	call	0x10000af14 ## symbol stub for: _pthread_mutex_init
10000798b:	lea	rdi, [rip + 0x8fde]
100007992:	xor	esi, esi
100007994:	call	0x10000aefc ## symbol stub for: _pthread_cond_init
100007999:	mov	rdi, r15
10000799c:	call	0x10000af26 ## symbol stub for: _pthread_mutexattr_destroy
1000079a1:	lea	rdi, [rip + 0x9064]
1000079a8:	xor	esi, esi
1000079aa:	xor	edx, edx
1000079ac:	call	0x100005d80
1000079b1:	mov	edi, 0x60
1000079b6:	call	0x1000078d3
1000079bb:	mov	r13, rax
1000079be:	xorps	xmm0, xmm0
1000079c1:	movups	xmmword ptr [rax + 0x10], xmm0
1000079c5:	movups	xmmword ptr [rax + 0x50], xmm0
1000079c9:	movups	xmmword ptr [rax], xmm0
1000079cc:	movups	xmmword ptr [rax + 0x20], xmm0
1000079d0:	movups	xmmword ptr [rax + 0x30], xmm0
1000079d4:	movups	xmmword ptr [rax + 0x40], xmm0
1000079d8:	mov	qword ptr [rax + 0x18], r14
1000079dc:	mov	qword ptr [rax + 0x50], rbx
1000079e0:	mov	qword ptr [rax + 0x58], rbx
1000079e4:	mov	qword ptr [rip + 0x8fb5], rbx
1000079eb:	lea	r14, [rip + 0x908a]
1000079f2:	lea	rax, [rip + 0x8fff]
1000079f9:	mov	rax, qword ptr [rax]
1000079fc:	add	rax, 0xf
100007a00:	lea	rcx, [rip + 0x4711]
100007a07:	mov	rcx, qword ptr [rcx]
100007a0a:	add	rcx, 0xf
100007a0e:	cmp	byte ptr [r14 + 0xa], 0x0
100007a13:	cmovne	rcx, rax
100007a17:	mov	al, byte ptr [rcx]
100007a19:	mov	byte ptr [rip + 0x8f89], al
100007a1f:	movaps	xmm0, xmmword ptr [rip + 0x3b3a]
100007a26:	movups	xmmword ptr [r13 + 0x40], xmm0
100007a2b:	mov	edi, 0x800
100007a30:	call	0x1000078d3
100007a35:	mov	qword ptr [r13], rax
100007a39:	mov	esi, 0x800
100007a3e:	mov	rdi, rax
100007a41:	call	0x10000ada0 ## symbol stub for: ___bzero
100007a46:	cmp	qword ptr [r13 + 0x50], 0x0
100007a4b:	je	0x100007a63
100007a4d:	xor	ebx, ebx
100007a4f:	mov	rdi, r13
100007a52:	mov	rsi, rbx
100007a55:	call	0x100007e8a
100007a5a:	inc	rbx
100007a5d:	cmp	rbx, qword ptr [r13 + 0x50]
100007a61:	jb	0x100007a4f
100007a63:	mov	rsi, qword ptr [r13 + 0x20]
100007a67:	cmp	rsi, 0x1
100007a6b:	jbe	0x100007aaa
100007a6d:	lea	rax, [rip + 0x8f74]
100007a74:	cmp	qword ptr [rax], 0x2
100007a78:	jb	0x100007a87
100007a7a:	mov	rdi, qword ptr [r13 + 0x8]
100007a7e:	lea	rcx, [rip - 0x2826]
100007a85:	jmp	0x100007aa0
100007a87:	cmp	byte ptr [r14 + 0xc], 0x0
100007a8c:	jne	0x100007aaa
100007a8e:	cmp	byte ptr [r14 + 0x10], 0x0
100007a93:	je	0x100007aaa
100007a95:	mov	rdi, qword ptr [r13 + 0x8]
100007a99:	lea	rcx, [rip - 0x26ea]
100007aa0:	mov	edx, 0x8
100007aa5:	call	0x10000aeae ## symbol stub for: _mergesort
100007aaa:	cmp	byte ptr [rip + 0x8ef7], 0x0
100007ab1:	mov	qword ptr [rbp - 0x78], r13
100007ab5:	je	0x100007bf1
100007abb:	mov	rax, qword ptr [r13 + 0x48]
100007abf:	test	rax, rax
100007ac2:	je	0x100007b8c
100007ac8:	mov	r15, -0x1
100007acf:	xor	r13d, r13d
100007ad2:	lea	r14, [rax + r15]
100007ad6:	mov	rdx, qword ptr [rbp - 0x78]
100007ada:	mov	rcx, qword ptr [rdx]
100007add:	mov	r12, qword ptr [rcx + 8*r14]
100007ae1:	test	r12, r12
100007ae4:	je	0x100007b7d
100007aea:	mov	rax, qword ptr [rdx + 0x18]
100007aee:	mov	qword ptr [r12 + 0x10], rax
100007af3:	mov	rax, qword ptr [rdx + 0x40]
100007af7:	mov	qword ptr [r12 + 0x40], rax
100007afc:	mov	rax, qword ptr [r12 + 0x50]
100007b01:	add	qword ptr [rdx + 0x40], rax
100007b05:	mov	edi, 0x10
100007b0a:	call	0x1000078d3
100007b0f:	mov	rbx, rax
100007b12:	mov	qword ptr [rax + 0x8], r12
100007b16:	lea	rax, [rip + 0x8923]
100007b1d:	cmp	qword ptr [rax], 0x2
100007b21:	jb	0x100007b59
100007b23:	lea	r12, [rip + 0x8e06]
100007b2a:	mov	rdi, r12
100007b2d:	call	0x10000af1a ## symbol stub for: _pthread_mutex_lock
100007b32:	mov	rax, qword ptr [rip + 0x8e77]
100007b39:	mov	qword ptr [rbx], rax
100007b3c:	mov	qword ptr [rip + 0x8e6d], rbx
100007b43:	lea	rdi, [rip + 0x8e26]
100007b4a:	call	0x10000af02 ## symbol stub for: _pthread_cond_signal
100007b4f:	mov	rdi, r12
100007b52:	call	0x10000af20 ## symbol stub for: _pthread_mutex_unlock
100007b57:	jmp	0x100007b6a
100007b59:	mov	rax, qword ptr [rip + 0x8e50]
100007b60:	mov	qword ptr [rbx], rax
100007b63:	mov	qword ptr [rip + 0x8e46], rbx
100007b6a:	mov	rcx, qword ptr [rbp - 0x78]
100007b6e:	mov	rax, qword ptr [rcx]
100007b71:	mov	qword ptr [rax + 8*r14], 0x0
100007b79:	mov	rax, qword ptr [rcx + 0x48]
100007b7d:	inc	r13
100007b80:	dec	r15
100007b83:	cmp	rax, r13
100007b86:	ja	0x100007ad2
100007b8c:	mov	r13, qword ptr [rbp - 0x78]
100007b90:	mov	rdi, qword ptr [r13 + 0x40]
100007b94:	shl	rdi, 0x3
100007b98:	add	rdi, qword ptr [r13 + 0x18]
100007b9c:	mov	rsi, qword ptr [r13 + 0x8]
100007ba0:	mov	rdx, qword ptr [r13 + 0x20]
100007ba4:	shl	rdx, 0x3
100007ba8:	call	0x10000aea2 ## symbol stub for: _memcpy
100007bad:	mov	rbx, qword ptr [r13 + 0x20]
100007bb1:	lea	rdi, [rip + 0x8d78]
100007bb8:	call	0x10000af1a ## symbol stub for: _pthread_mutex_lock
100007bbd:	sub	qword ptr [rip + 0x8ddc], rbx
100007bc4:	lea	r12, [rip + 0x8875]
100007bcb:	jne	0x100007be0
100007bcd:	cmp	qword ptr [r12], 0x2
100007bd2:	jb	0x100007be0
100007bd4:	lea	rdi, [rip + 0x8d95]
100007bdb:	call	0x10000aef6 ## symbol stub for: _pthread_cond_broadcast
100007be0:	lea	rdi, [rip + 0x8d49]
100007be7:	call	0x10000af20 ## symbol stub for: _pthread_mutex_unlock
100007bec:	jmp	0x100007d03
100007bf1:	mov	rdi, qword ptr [r13 + 0x40]
100007bf5:	shl	rdi, 0x3
100007bf9:	add	rdi, qword ptr [r13 + 0x18]
100007bfd:	mov	rsi, qword ptr [r13 + 0x8]
100007c01:	mov	rdx, qword ptr [r13 + 0x20]
100007c05:	shl	rdx, 0x3
100007c09:	call	0x10000aea2 ## symbol stub for: _memcpy
100007c0e:	mov	rbx, qword ptr [r13 + 0x20]
100007c12:	add	qword ptr [r13 + 0x40], rbx
100007c16:	lea	rdi, [rip + 0x8d13]
100007c1d:	call	0x10000af1a ## symbol stub for: _pthread_mutex_lock
100007c22:	sub	qword ptr [rip + 0x8d77], rbx
100007c29:	jne	0x100007c3e
100007c2b:	cmp	qword ptr [r12], 0x2
100007c30:	jb	0x100007c3e
100007c32:	lea	rdi, [rip + 0x8d37]
100007c39:	call	0x10000aef6 ## symbol stub for: _pthread_cond_broadcast
100007c3e:	lea	rdi, [rip + 0x8ceb]
100007c45:	call	0x10000af20 ## symbol stub for: _pthread_mutex_unlock
100007c4a:	mov	rax, qword ptr [r13 + 0x48]
100007c4e:	test	rax, rax
100007c51:	je	0x100007d03
100007c57:	xor	ebx, ebx
100007c59:	lea	r15, [rip + 0x8cd0]
100007c60:	mov	rcx, qword ptr [r13]
100007c64:	mov	r14, qword ptr [rcx + 8*rbx]
100007c68:	test	r14, r14
100007c6b:	je	0x100007cf7
100007c71:	mov	rax, qword ptr [r13 + 0x18]
100007c75:	mov	qword ptr [r14 + 0x10], rax
100007c79:	mov	rax, qword ptr [r13 + 0x40]
100007c7d:	mov	qword ptr [r14 + 0x40], rax
100007c81:	mov	rax, qword ptr [r14 + 0x50]
100007c85:	add	qword ptr [r13 + 0x40], rax
100007c89:	mov	edi, 0x10
100007c8e:	call	0x1000078d3
100007c93:	mov	r13, rax
100007c96:	mov	qword ptr [rax + 0x8], r14
100007c9a:	cmp	qword ptr [r12], 0x2
100007c9f:	jb	0x100007cd1
100007ca1:	mov	rdi, r15
100007ca4:	call	0x10000af1a ## symbol stub for: _pthread_mutex_lock
100007ca9:	mov	rax, qword ptr [rip + 0x8d00]
100007cb0:	mov	qword ptr [r13], rax
100007cb4:	mov	qword ptr [rip + 0x8cf5], r13
100007cbb:	lea	rdi, [rip + 0x8cae]
100007cc2:	call	0x10000af02 ## symbol stub for: _pthread_cond_signal
100007cc7:	mov	rdi, r15
100007cca:	call	0x10000af20 ## symbol stub for: _pthread_mutex_unlock
100007ccf:	jmp	0x100007ce3
100007cd1:	mov	rax, qword ptr [rip + 0x8cd8]
100007cd8:	mov	qword ptr [r13], rax
100007cdc:	mov	qword ptr [rip + 0x8ccd], r13
100007ce3:	mov	r13, qword ptr [rbp - 0x78]
100007ce7:	mov	rax, qword ptr [r13]
100007ceb:	mov	qword ptr [rax + 8*rbx], 0x0
100007cf3:	mov	rax, qword ptr [r13 + 0x48]
100007cf7:	inc	rbx
100007cfa:	cmp	rbx, rax
100007cfd:	jb	0x100007c60
100007d03:	cmp	qword ptr [r12], 0x2
100007d08:	jae	0x100007d40
100007d0a:	mov	rdi, qword ptr [rip + 0x8c9f]
100007d11:	test	rdi, rdi
100007d14:	je	0x100007dc2
100007d1a:	mov	rax, qword ptr [rdi]
100007d1d:	mov	rbx, qword ptr [rdi + 0x8]
100007d21:	mov	qword ptr [rip + 0x8c88], rax
100007d28:	call	0x1000078e8
100007d2d:	test	rbx, rbx
100007d30:	je	0x100007dc2
100007d36:	mov	rdi, rbx
100007d39:	call	0x1000080a7
100007d3e:	jmp	0x100007d0a
100007d40:	xor	r13d, r13d
100007d43:	lea	rbx, [rbp - 0x70]
100007d47:	lea	r14, [rip + 0x2be]
100007d4e:	lea	r15, [rbp - 0x88]
100007d55:	mov	rdi, rbx
100007d58:	call	0x10000aeea ## symbol stub for: _pthread_attr_init
100007d5d:	mov	rdi, rbx
100007d60:	mov	esi, 0x2
100007d65:	call	0x10000aef0 ## symbol stub for: _pthread_attr_setdetachstate
100007d6a:	mov	rdi, r15
100007d6d:	mov	rsi, rbx
100007d70:	mov	rdx, r14
100007d73:	xor	ecx, ecx
100007d75:	call	0x10000af0e ## symbol stub for: _pthread_create
100007d7a:	test	eax, eax
100007d7c:	jns	0x100007d8f
100007d7e:	call	0x10000ada6 ## symbol stub for: ___error
100007d83:	cmp	dword ptr [rax], 0x23
100007d86:	jne	0x100007e04
100007d88:	call	0x10000af68 ## symbol stub for: _sched_yield
100007d8d:	jmp	0x100007d6a
100007d8f:	mov	rdi, rbx
100007d92:	call	0x10000aee4 ## symbol stub for: _pthread_attr_destroy
100007d97:	inc	r13
100007d9a:	mov	rax, qword ptr [r12]
100007d9e:	cmp	r13, rax
100007da1:	jb	0x100007d55
100007da3:	test	rax, rax
100007da6:	mov	r13, qword ptr [rbp - 0x78]
100007daa:	je	0x100007dc2
100007dac:	xor	ebx, ebx
100007dae:	mov	edi, dword ptr [rip + 0x8c58]
100007db4:	call	0x10000af80 ## symbol stub for: _semaphore_wait
100007db9:	inc	rbx
100007dbc:	cmp	rbx, qword ptr [r12]
100007dc0:	jb	0x100007dae
100007dc2:	mov	rdi, r13
100007dc5:	call	0x100007e0e
100007dca:	cmp	qword ptr [r12], 0x2
100007dcf:	jb	0x100007ddd
100007dd1:	lea	rdi, [rip + 0x8c34]
100007dd8:	call	0x100005da6
100007ddd:	mov	rax, qword ptr [rbp - 0x80]
100007de1:	mov	qword ptr [r12], rax
100007de5:	mov	rax, qword ptr [rip + 0x4224] ## literal pool symbol address: ___stack_chk_guard
100007dec:	mov	rax, qword ptr [rax]
100007def:	cmp	rax, qword ptr [rbp - 0x30]
100007df3:	jne	0x100007e09
100007df5:	add	rsp, 0x68
100007df9:	pop	rbx
100007dfa:	pop	r12
100007dfc:	pop	r13
100007dfe:	pop	r14
100007e00:	pop	r15
100007e02:	pop	rbp
100007e03:	ret
100007e04:	call	0x10000aaf5
100007e09:	call	0x10000adb8 ## symbol stub for: ___stack_chk_fail
100007e0e:	test	rdi, rdi
100007e11:	je	0x100007e6f
100007e13:	push	rbp
100007e14:	mov	rbp, rsp
100007e17:	push	r15
100007e19:	push	r14
100007e1b:	push	rbx
100007e1c:	push	rax
100007e1d:	mov	r14, rdi
100007e20:	mov	rdi, qword ptr [rdi + 0x8]
100007e24:	test	rdi, rdi
100007e27:	je	0x100007e2e
100007e29:	call	0x1000078e8
100007e2e:	cmp	qword ptr [r14 + 0x30], 0x0
100007e33:	je	0x100007e3e
100007e35:	mov	rdi, qword ptr [r14 + 0x18]
100007e39:	call	0x1000078e8
100007e3e:	mov	rdi, qword ptr [r14]
100007e41:	test	rdi, rdi
100007e44:	je	0x100007e78
100007e46:	mov	r15, qword ptr [r14 + 0x48]
100007e4a:	test	r15, r15
100007e4d:	je	0x100007e73
100007e4f:	dec	r15
100007e52:	xor	ebx, ebx
100007e54:	mov	rdi, qword ptr [rdi + 8*rbx]
100007e58:	test	rdi, rdi
100007e5b:	je	0x100007e62
100007e5d:	call	0x100007e0e
100007e62:	cmp	r15, rbx
100007e65:	je	0x100007e70
100007e67:	inc	rbx
100007e6a:	mov	rdi, qword ptr [r14]
100007e6d:	jmp	0x100007e54
100007e6f:	ret
100007e70:	mov	rdi, qword ptr [r14]
100007e73:	call	0x1000078e8
100007e78:	mov	rdi, r14
100007e7b:	add	rsp, 0x8
100007e7f:	pop	rbx
100007e80:	pop	r14
100007e82:	pop	r15
100007e84:	pop	rbp
100007e85:	jmp	0x1000078e8
100007e8a:	push	rbp
100007e8b:	mov	rbp, rsp
100007e8e:	push	r15
100007e90:	push	r14
100007e92:	push	r13
100007e94:	push	r12
100007e96:	push	rbx
100007e97:	push	rax
100007e98:	mov	r14, rdi
100007e9b:	mov	rax, qword ptr [rdi + 0x18]
100007e9f:	mov	r12, qword ptr [rdi + 0x30]
100007ea3:	mov	rcx, qword ptr [rax + 8*rsi]
100007ea7:	mov	r15, qword ptr [rip + 0x415a] ## literal pool symbol address: ___mb_cur_max
100007eae:	mov	r13d, dword ptr [r15]
100007eb1:	xor	eax, eax
100007eb3:	cmp	r13d, 0x1
100007eb7:	setne	al
100007eba:	lea	rbx, [rax + 2*rax]
100007ebe:	inc	rbx
100007ec1:	mov	qword ptr [rbp - 0x30], rcx
100007ec5:	lea	rdi, [rcx + 0x8]
100007ec9:	xor	esi, esi
100007ecb:	call	0x1000041e6
100007ed0:	mov	rax, qword ptr [rax]
100007ed3:	mov	rcx, qword ptr [rax]
100007ed6:	imul	rcx, rbx
100007eda:	cmp	rcx, r12
100007edd:	jbe	0x100007efb
100007edf:	cmp	dword ptr [r15], 0x1
100007ee3:	jne	0x100007f3a
100007ee5:	cmp	r13d, 0x1
100007ee9:	setne	cl
100007eec:	add	cl, cl
100007eee:	mov	rdx, r12
100007ef1:	shr	rdx, cl
100007ef4:	movzx	eax, byte ptr [rax + rdx + 0x8]
100007ef9:	jmp	0x100007f4d
100007efb:	mov	rax, qword ptr [r14 + 0x20]
100007eff:	lea	rcx, [rax + 0x1]
100007f03:	mov	qword ptr [r14 + 0x20], rcx
100007f07:	cmp	rcx, qword ptr [r14 + 0x28]
100007f0b:	jbe	0x100007fea
100007f11:	lea	rcx, [rax + 0x81]
100007f18:	mov	qword ptr [r14 + 0x28], rcx
100007f1c:	mov	rdi, qword ptr [r14 + 0x8]
100007f20:	lea	rsi, [8*rax + 0x408]
100007f28:	call	0x1000078f9
100007f2d:	mov	qword ptr [r14 + 0x8], rax
100007f31:	mov	rcx, qword ptr [r14 + 0x20]
100007f35:	jmp	0x100007ff4
100007f3a:	cmp	r13d, 0x1
100007f3e:	setne	cl
100007f41:	add	cl, cl
100007f43:	mov	rdx, r12
100007f46:	shr	rdx, cl
100007f49:	mov	eax, dword ptr [rax + 4*rdx + 0x8]
100007f4d:	dec	rbx
100007f50:	and	r12, rbx
100007f53:	mov	edx, ebx
100007f55:	sub	edx, r12d
100007f58:	shl	edx, 0x3
100007f5b:	xor	ecx, ecx
100007f5d:	cmp	rbx, r12
100007f60:	cmova	ecx, edx
100007f63:	sar	eax, cl
100007f65:	movzx	r12d, al
100007f69:	mov	rax, qword ptr [r14]
100007f6c:	mov	rbx, qword ptr [rax + 8*r12]
100007f70:	test	rbx, rbx
100007f73:	jne	0x100007fb2
100007f75:	mov	edi, 0x60
100007f7a:	call	0x1000078d3
100007f7f:	mov	rbx, rax
100007f82:	xorps	xmm0, xmm0
100007f85:	movups	xmmword ptr [rax], xmm0
100007f88:	movups	xmmword ptr [rax + 0x10], xmm0
100007f8c:	movups	xmmword ptr [rax + 0x20], xmm0
100007f90:	movups	xmmword ptr [rax + 0x30], xmm0
100007f94:	movups	xmmword ptr [rax + 0x40], xmm0
100007f98:	movups	xmmword ptr [rax + 0x50], xmm0
100007f9c:	mov	rax, qword ptr [r14 + 0x30]
100007fa0:	inc	rax
100007fa3:	mov	qword ptr [rbx + 0x30], rax
100007fa7:	mov	rax, qword ptr [r14]
100007faa:	mov	qword ptr [rax + 8*r12], rbx
100007fae:	inc	qword ptr [r14 + 0x38]
100007fb2:	mov	rax, qword ptr [rbx + 0x50]
100007fb6:	lea	rcx, [rax + 0x1]
100007fba:	mov	qword ptr [rbx + 0x50], rcx
100007fbe:	cmp	rcx, qword ptr [rbx + 0x58]
100007fc2:	jbe	0x100007ff0
100007fc4:	lea	rcx, [rax + 0x81]
100007fcb:	mov	qword ptr [rbx + 0x58], rcx
100007fcf:	mov	rdi, qword ptr [rbx + 0x18]
100007fd3:	lea	rsi, [8*rax + 0x408]
100007fdb:	call	0x1000078f9
100007fe0:	mov	qword ptr [rbx + 0x18], rax
100007fe4:	mov	rcx, qword ptr [rbx + 0x50]
100007fe8:	jmp	0x100007ff4
100007fea:	mov	rax, qword ptr [r14 + 0x8]
100007fee:	jmp	0x100007ff4
100007ff0:	mov	rax, qword ptr [rbx + 0x18]
100007ff4:	mov	rdx, qword ptr [rbp - 0x30]
100007ff8:	mov	qword ptr [rax + 8*rcx - 0x8], rdx
100007ffd:	add	rsp, 0x8
100008001:	pop	rbx
100008002:	pop	r12
100008004:	pop	r13
100008006:	pop	r14
100008008:	pop	r15
10000800a:	pop	rbp
10000800b:	ret
10000800c:	push	rbp
10000800d:	mov	rbp, rsp
100008010:	push	r15
100008012:	push	r14
100008014:	push	r13
100008016:	push	r12
100008018:	push	rbx
100008019:	push	rax
10000801a:	mov	r14, rdi
10000801d:	lea	r12, [rip + 0x890c]
100008024:	lea	r15, [rip + 0x8945]
10000802b:	mov	rdi, r12
10000802e:	call	0x10000af1a ## symbol stub for: _pthread_mutex_lock
100008033:	mov	rbx, qword ptr [rip + 0x8976]
10000803a:	test	rbx, rbx
10000803d:	jne	0x100008056
10000803f:	cmp	qword ptr [rip + 0x8959], 0x0
100008047:	je	0x100008083
100008049:	mov	rdi, r15
10000804c:	mov	rsi, r12
10000804f:	call	0x10000af08 ## symbol stub for: _pthread_cond_wait
100008054:	jmp	0x100008033
100008056:	mov	rax, qword ptr [rbx]
100008059:	mov	r13, qword ptr [rbx + 0x8]
10000805d:	mov	qword ptr [rip + 0x894c], rax
100008064:	mov	rdi, r12
100008067:	call	0x10000af20 ## symbol stub for: _pthread_mutex_unlock
10000806c:	mov	rdi, rbx
10000806f:	call	0x1000078e8
100008074:	test	r13, r13
100008077:	je	0x10000808a
100008079:	mov	rdi, r13
10000807c:	call	0x1000080a7
100008081:	jmp	0x10000802b
100008083:	xor	ebx, ebx
100008085:	xor	r13d, r13d
100008088:	jmp	0x100008064
10000808a:	mov	edi, dword ptr [rip + 0x897c]
100008090:	call	0x10000af7a ## symbol stub for: _semaphore_signal
100008095:	mov	rax, r14
100008098:	add	rsp, 0x8
10000809c:	pop	rbx
10000809d:	pop	r12
10000809f:	pop	r13
1000080a1:	pop	r14
1000080a3:	pop	r15
1000080a5:	pop	rbp
1000080a6:	ret
1000080a7:	push	rbp
1000080a8:	mov	rbp, rsp
1000080ab:	push	r15
1000080ad:	push	r14
1000080af:	push	r13
1000080b1:	push	r12
1000080b3:	push	rbx
1000080b4:	push	rax
1000080b5:	mov	r12, rdi
1000080b8:	mov	rax, qword ptr [rip + 0x3f49] ## literal pool symbol address: ___mb_cur_max
1000080bf:	mov	ebx, dword ptr [rax]
1000080c1:	mov	rdi, qword ptr [rdi]
1000080c4:	test	rdi, rdi
1000080c7:	je	0x1000080d6
1000080c9:	call	0x1000078e8
1000080ce:	mov	qword ptr [r12], 0x0
1000080d6:	mov	rsi, qword ptr [r12 + 0x50]
1000080db:	test	rsi, rsi
1000080de:	je	0x1000084ba
1000080e4:	cmp	rsi, 0x2
1000080e8:	je	0x100008128
1000080ea:	cmp	rsi, 0x1
1000080ee:	jne	0x10000817d
1000080f4:	mov	rax, qword ptr [r12 + 0x10]
1000080f9:	mov	rcx, qword ptr [r12 + 0x18]
1000080fe:	mov	rcx, qword ptr [rcx]
100008101:	mov	rdx, qword ptr [r12 + 0x40]
100008106:	mov	qword ptr [rax + 8*rdx], rcx
10000810a:	lea	rdi, [rip + 0x881f]
100008111:	call	0x10000af1a ## symbol stub for: _pthread_mutex_lock
100008116:	dec	qword ptr [rip + 0x8883]
10000811d:	je	0x100008495
100008123:	jmp	0x1000084ae
100008128:	cmp	ebx, 0x1
10000812b:	setne	cl
10000812e:	mov	rdi, qword ptr [r12 + 0x18]
100008133:	mov	rdx, qword ptr [r12 + 0x30]
100008138:	lea	rsi, [rdi + 0x8]
10000813c:	add	cl, cl
10000813e:	shr	rdx, cl
100008141:	call	0x100005145
100008146:	mov	rcx, qword ptr [r12 + 0x18]
10000814b:	test	eax, eax
10000814d:	jle	0x1000082eb
100008153:	mov	rdx, qword ptr [rcx + 0x8]
100008157:	lea	rax, [r12 + 0x10]
10000815c:	mov	rsi, qword ptr [r12 + 0x10]
100008161:	mov	rdi, qword ptr [r12 + 0x40]
100008166:	lea	rcx, [rdi + 0x1]
10000816a:	mov	qword ptr [r12 + 0x40], rcx
10000816f:	mov	qword ptr [rsi + 8*rdi], rdx
100008173:	mov	rdx, qword ptr [r12 + 0x18]
100008178:	jmp	0x100008313
10000817d:	mov	rdi, qword ptr [r12 + 0x30]
100008182:	cmp	rsi, 0x41
100008186:	jb	0x10000824a
10000818c:	cmp	rdi, 0x10
100008190:	jae	0x10000824a
100008196:	lea	r14, [r12 + 0x50]
10000819b:	mov	qword ptr [r12 + 0x58], rsi
1000081a0:	mov	rdi, qword ptr [r12 + 0x18]
1000081a5:	shl	rsi, 0x3
1000081a9:	call	0x1000078f9
1000081ae:	mov	qword ptr [r12 + 0x18], rax
1000081b3:	mov	qword ptr [r12 + 0x48], 0x100
1000081bc:	mov	edi, 0x800
1000081c1:	call	0x1000078d3
1000081c6:	mov	qword ptr [r12], rax
1000081ca:	mov	esi, 0x800
1000081cf:	mov	rdi, rax
1000081d2:	call	0x10000ada0 ## symbol stub for: ___bzero
1000081d7:	mov	qword ptr [r12 + 0x38], 0x0
1000081e0:	mov	r15, qword ptr [r12 + 0x50]
1000081e5:	test	r15, r15
1000081e8:	je	0x1000081ff
1000081ea:	xor	ebx, ebx
1000081ec:	mov	rdi, r12
1000081ef:	mov	rsi, rbx
1000081f2:	call	0x100007e8a
1000081f7:	inc	rbx
1000081fa:	cmp	r15, rbx
1000081fd:	jne	0x1000081ec
1000081ff:	mov	rdi, qword ptr [r12 + 0x18]
100008204:	call	0x1000078e8
100008209:	mov	qword ptr [r12 + 0x18], 0x0
100008212:	xorps	xmm0, xmm0
100008215:	movups	xmmword ptr [r14], xmm0
100008219:	mov	rsi, qword ptr [r12 + 0x20]
10000821e:	cmp	rsi, 0x2
100008222:	jb	0x100008365
100008228:	lea	rax, [rip + 0x87b9]
10000822f:	cmp	qword ptr [rax], 0x2
100008233:	jb	0x10000833c
100008239:	mov	rdi, qword ptr [r12 + 0x8]
10000823e:	lea	rcx, [rip - 0x2fe6]
100008245:	jmp	0x10000835b
10000824a:	cmp	ebx, 0x1
10000824d:	setne	cl
100008250:	add	cl, cl
100008252:	shr	rdi, cl
100008255:	call	0x10000526b
10000825a:	mov	r14, rax
10000825d:	mov	rdi, qword ptr [r12 + 0x18]
100008262:	mov	rsi, qword ptr [r12 + 0x50]
100008267:	mov	qword ptr [r12 + 0x8], rdi
10000826c:	mov	qword ptr [r12 + 0x20], rsi
100008271:	mov	qword ptr [r12 + 0x28], rsi
100008276:	shl	rsi, 0x3
10000827a:	call	0x1000078f9
10000827f:	mov	qword ptr [r12 + 0x8], rax
100008284:	xor	ecx, ecx
100008286:	mov	qword ptr [r12 + 0x18], rcx
10000828b:	mov	qword ptr [r12 + 0x38], rcx
100008290:	xorps	xmm0, xmm0
100008293:	movups	xmmword ptr [r12 + 0x48], xmm0
100008299:	mov	qword ptr [r12 + 0x58], rcx
10000829e:	lea	rcx, [rip + 0x87d7]
1000082a5:	mov	bl, byte ptr [rcx + 0xc]
1000082a8:	mov	rsi, qword ptr [r12 + 0x20]
1000082ad:	mov	edx, 0x8
1000082b2:	mov	rdi, rax
1000082b5:	mov	rcx, r14
1000082b8:	call	0x10000aeae ## symbol stub for: _mergesort
1000082bd:	test	bl, bl
1000082bf:	je	0x1000082ca
1000082c1:	cmp	eax, -0x1
1000082c4:	je	0x100008623
1000082ca:	mov	rdi, qword ptr [r12 + 0x40]
1000082cf:	shl	rdi, 0x3
1000082d3:	add	rdi, qword ptr [r12 + 0x10]
1000082d8:	mov	rsi, qword ptr [r12 + 0x8]
1000082dd:	mov	rdx, qword ptr [r12 + 0x20]
1000082e2:	shl	rdx, 0x3
1000082e6:	jmp	0x100008476
1000082eb:	mov	rdx, qword ptr [rcx]
1000082ee:	lea	rax, [r12 + 0x10]
1000082f3:	mov	rsi, qword ptr [r12 + 0x10]
1000082f8:	mov	rdi, qword ptr [r12 + 0x40]
1000082fd:	lea	rcx, [rdi + 0x1]
100008301:	mov	qword ptr [r12 + 0x40], rcx
100008306:	mov	qword ptr [rsi + 8*rdi], rdx
10000830a:	mov	rdx, qword ptr [r12 + 0x18]
10000830f:	add	rdx, 0x8
100008313:	mov	rdx, qword ptr [rdx]
100008316:	mov	rax, qword ptr [rax]
100008319:	mov	qword ptr [rax + 8*rcx], rdx
10000831d:	lea	rdi, [rip + 0x860c]
100008324:	call	0x10000af1a ## symbol stub for: _pthread_mutex_lock
100008329:	add	qword ptr [rip + 0x866f], -0x2
100008331:	je	0x100008495
100008337:	jmp	0x1000084ae
10000833c:	lea	rax, [rip + 0x8739]
100008343:	cmp	byte ptr [rax + 0xc], 0x0
100008347:	jne	0x100008365
100008349:	cmp	byte ptr [rax + 0x10], 0x0
10000834d:	je	0x100008365
10000834f:	mov	rdi, qword ptr [r12 + 0x8]
100008354:	lea	rcx, [rip - 0x2fa5]
10000835b:	mov	edx, 0x8
100008360:	call	0x10000aeae ## symbol stub for: _mergesort
100008365:	mov	rdi, qword ptr [r12 + 0x8]
10000836a:	mov	rsi, qword ptr [r12 + 0x20]
10000836f:	mov	qword ptr [r12 + 0x28], rsi
100008374:	shl	rsi, 0x3
100008378:	call	0x1000078f9
10000837d:	mov	qword ptr [r12 + 0x8], rax
100008382:	cmp	byte ptr [rip + 0x861f], 0x0
100008389:	je	0x1000084d0
10000838f:	mov	r15, qword ptr [r12 + 0x48]
100008394:	test	r15, r15
100008397:	je	0x10000845c
10000839d:	lea	r14, [rip + 0x858c]
1000083a4:	mov	rax, qword ptr [r12]
1000083a8:	mov	rbx, qword ptr [rax + 8*r15 - 0x8]
1000083ad:	test	rbx, rbx
1000083b0:	je	0x10000844e
1000083b6:	mov	rax, qword ptr [r12 + 0x10]
1000083bb:	mov	qword ptr [rbx + 0x10], rax
1000083bf:	mov	rax, qword ptr [r12 + 0x40]
1000083c4:	mov	qword ptr [rbx + 0x40], rax
1000083c8:	mov	rax, qword ptr [rbx + 0x50]
1000083cc:	add	qword ptr [r12 + 0x40], rax
1000083d1:	cmp	rax, 0x4
1000083d5:	ja	0x1000083e1
1000083d7:	mov	rdi, rbx
1000083da:	call	0x1000080a7
1000083df:	jmp	0x100008441
1000083e1:	mov	edi, 0x10
1000083e6:	call	0x1000078d3
1000083eb:	mov	r13, rax
1000083ee:	mov	qword ptr [rax + 0x8], rbx
1000083f2:	lea	rax, [rip + 0x8047]
1000083f9:	cmp	qword ptr [rax], 0x2
1000083fd:	jb	0x10000842f
1000083ff:	mov	rdi, r14
100008402:	call	0x10000af1a ## symbol stub for: _pthread_mutex_lock
100008407:	mov	rax, qword ptr [rip + 0x85a2]
10000840e:	mov	qword ptr [r13], rax
100008412:	mov	qword ptr [rip + 0x8597], r13
100008419:	lea	rdi, [rip + 0x8550]
100008420:	call	0x10000af02 ## symbol stub for: _pthread_cond_signal
100008425:	mov	rdi, r14
100008428:	call	0x10000af20 ## symbol stub for: _pthread_mutex_unlock
10000842d:	jmp	0x100008441
10000842f:	mov	rax, qword ptr [rip + 0x857a]
100008436:	mov	qword ptr [r13], rax
10000843a:	mov	qword ptr [rip + 0x856f], r13
100008441:	mov	rax, qword ptr [r12]
100008445:	mov	qword ptr [rax + 8*r15 - 0x8], 0x0
10000844e:	dec	r15
100008451:	jne	0x1000083a4
100008457:	mov	rax, qword ptr [r12 + 0x8]
10000845c:	mov	rdx, qword ptr [r12 + 0x20]
100008461:	mov	rdi, qword ptr [r12 + 0x40]
100008466:	shl	rdi, 0x3
10000846a:	add	rdi, qword ptr [r12 + 0x10]
10000846f:	shl	rdx, 0x3
100008473:	mov	rsi, rax
100008476:	call	0x10000aea2 ## symbol stub for: _memcpy
10000847b:	mov	rbx, qword ptr [r12 + 0x20]
100008480:	lea	rdi, [rip + 0x84a9]
100008487:	call	0x10000af1a ## symbol stub for: _pthread_mutex_lock
10000848c:	sub	qword ptr [rip + 0x850d], rbx
100008493:	jne	0x1000084ae
100008495:	lea	rax, [rip + 0x7fa4]
10000849c:	cmp	qword ptr [rax], 0x2
1000084a0:	jb	0x1000084ae
1000084a2:	lea	rdi, [rip + 0x84c7]
1000084a9:	call	0x10000aef6 ## symbol stub for: _pthread_cond_broadcast
1000084ae:	lea	rdi, [rip + 0x847b]
1000084b5:	call	0x10000af20 ## symbol stub for: _pthread_mutex_unlock
1000084ba:	mov	rdi, r12
1000084bd:	add	rsp, 0x8
1000084c1:	pop	rbx
1000084c2:	pop	r12
1000084c4:	pop	r13
1000084c6:	pop	r14
1000084c8:	pop	r15
1000084ca:	pop	rbp
1000084cb:	jmp	0x100007e0e
1000084d0:	lea	r14, [r12 + 0x20]
1000084d5:	mov	rdx, qword ptr [r12 + 0x20]
1000084da:	mov	rdi, qword ptr [r12 + 0x40]
1000084df:	shl	rdi, 0x3
1000084e3:	add	rdi, qword ptr [r12 + 0x10]
1000084e8:	shl	rdx, 0x3
1000084ec:	mov	rsi, rax
1000084ef:	call	0x10000aea2 ## symbol stub for: _memcpy
1000084f4:	mov	rbx, qword ptr [r12 + 0x20]
1000084f9:	add	qword ptr [r12 + 0x40], rbx
1000084fe:	lea	rdi, [rip + 0x842b]
100008505:	call	0x10000af1a ## symbol stub for: _pthread_mutex_lock
10000850a:	sub	qword ptr [rip + 0x848f], rbx
100008511:	jne	0x10000852c
100008513:	lea	rax, [rip + 0x7f26]
10000851a:	cmp	qword ptr [rax], 0x2
10000851e:	jb	0x10000852c
100008520:	lea	rdi, [rip + 0x8449]
100008527:	call	0x10000aef6 ## symbol stub for: _pthread_cond_broadcast
10000852c:	lea	rdi, [rip + 0x83fd]
100008533:	call	0x10000af20 ## symbol stub for: _pthread_mutex_unlock
100008538:	mov	rdi, qword ptr [r12 + 0x8]
10000853d:	call	0x1000078e8
100008542:	mov	qword ptr [r12 + 0x8], 0x0
10000854b:	xorps	xmm0, xmm0
10000854e:	movups	xmmword ptr [r14], xmm0
100008552:	mov	r15, qword ptr [r12 + 0x48]
100008557:	test	r15, r15
10000855a:	je	0x1000084ba
100008560:	xor	r14d, r14d
100008563:	mov	rax, qword ptr [r12]
100008567:	mov	rbx, qword ptr [rax + 8*r14]
10000856b:	test	rbx, rbx
10000856e:	je	0x100008612
100008574:	mov	rax, qword ptr [r12 + 0x10]
100008579:	mov	qword ptr [rbx + 0x10], rax
10000857d:	mov	rax, qword ptr [r12 + 0x40]
100008582:	mov	qword ptr [rbx + 0x40], rax
100008586:	mov	rax, qword ptr [rbx + 0x50]
10000858a:	add	qword ptr [r12 + 0x40], rax
10000858f:	cmp	rax, 0x4
100008593:	ja	0x10000859f
100008595:	mov	rdi, rbx
100008598:	call	0x1000080a7
10000859d:	jmp	0x100008606
10000859f:	mov	edi, 0x10
1000085a4:	call	0x1000078d3
1000085a9:	mov	r13, rax
1000085ac:	mov	qword ptr [rax + 0x8], rbx
1000085b0:	lea	rax, [rip + 0x7e89]
1000085b7:	cmp	qword ptr [rax], 0x2
1000085bb:	jb	0x1000085f4
1000085bd:	lea	rbx, [rip + 0x836c]
1000085c4:	mov	rdi, rbx
1000085c7:	call	0x10000af1a ## symbol stub for: _pthread_mutex_lock
1000085cc:	mov	rax, qword ptr [rip + 0x83dd]
1000085d3:	mov	qword ptr [r13], rax
1000085d7:	mov	qword ptr [rip + 0x83d2], r13
1000085de:	lea	rdi, [rip + 0x838b]
1000085e5:	call	0x10000af02 ## symbol stub for: _pthread_cond_signal
1000085ea:	mov	rdi, rbx
1000085ed:	call	0x10000af20 ## symbol stub for: _pthread_mutex_unlock
1000085f2:	jmp	0x100008606
1000085f4:	mov	rax, qword ptr [rip + 0x83b5]
1000085fb:	mov	qword ptr [r13], rax
1000085ff:	mov	qword ptr [rip + 0x83aa], r13
100008606:	mov	rax, qword ptr [r12]
10000860a:	mov	qword ptr [rax + 8*r14], 0x0
100008612:	inc	r14
100008615:	cmp	r15, r14
100008618:	jne	0x100008563
10000861e:	jmp	0x1000084ba
100008623:	call	0x10000ab05
100008628:	push	rbp
100008629:	mov	rbp, rsp
10000862c:	push	r15
10000862e:	push	r14
100008630:	push	r13
100008632:	push	r12
100008634:	push	rbx
100008635:	sub	rsp, 0x1b8
10000863c:	mov	rax, qword ptr [rip + 0x39cd] ## literal pool symbol address: ___stack_chk_guard
100008643:	mov	rax, qword ptr [rax]
100008646:	mov	qword ptr [rbp - 0x30], rax
10000864a:	mov	qword ptr [rbp - 0x1d8], rdi
100008651:	mov	r15d, dword ptr [rdi]
100008654:	cmp	r15d, 0x2
100008658:	jl	0x100008873
10000865e:	mov	r12, rsi
100008661:	mov	r14d, 0x3
100008667:	mov	r13d, 0x1
10000866d:	mov	qword ptr [rbp - 0x1e0], rsi
100008674:	mov	rbx, qword ptr [r12 + 8*r13]
100008678:	mov	rdi, rbx
10000867b:	call	0x10000afc2 ## symbol stub for: _strlen
100008680:	cmp	rax, 0x2
100008684:	jb	0x100008861
10000868a:	cmp	byte ptr [rbx], 0x2b
10000868d:	jne	0x100008861
100008693:	mov	byte ptr [rbp - 0x140], 0x0
10000869a:	xor	eax, eax
10000869c:	mov	dword ptr [rbp - 0x1c8], eax
1000086a2:	mov	dword ptr [rbp - 0x1cc], eax
1000086a8:	inc	rbx
1000086ab:	mov	rdi, rbx
1000086ae:	lea	rsi, [rbp - 0x1c8]
1000086b5:	lea	rdx, [rbp - 0x1cc]
1000086bc:	lea	rcx, [rbp - 0x140]
1000086c3:	call	0x10000889a
1000086c8:	test	eax, eax
1000086ca:	js	0x100008857
1000086d0:	mov	r12d, dword ptr [rbp - 0x1c8]
1000086d7:	inc	r12d
1000086da:	mov	dword ptr [rbp - 0x1c8], r12d
1000086e1:	mov	r15d, dword ptr [rbp - 0x1cc]
1000086e8:	inc	r15d
1000086eb:	mov	dword ptr [rbp - 0x1cc], r15d
1000086f2:	lea	rax, [r13 + 0x1]
1000086f6:	mov	rcx, qword ptr [rbp - 0x1d8]
1000086fd:	movsxd	rcx, dword ptr [rcx]
100008700:	cmp	rax, rcx
100008703:	jge	0x10000880e
100008709:	mov	rax, qword ptr [rbp - 0x1e0]
100008710:	mov	rbx, qword ptr [rax + 8*r13 + 0x8]
100008715:	mov	rdi, rbx
100008718:	call	0x10000afc2 ## symbol stub for: _strlen
10000871d:	cmp	rax, 0x2
100008721:	jb	0x10000880e
100008727:	cmp	byte ptr [rbx], 0x2d
10000872a:	jne	0x10000880e
100008730:	mov	byte ptr [rbp - 0x1c0], 0x0
100008737:	xor	eax, eax
100008739:	mov	dword ptr [rbp - 0x1c4], eax
10000873f:	mov	dword ptr [rbp - 0x1d0], eax
100008745:	inc	rbx
100008748:	mov	rdi, rbx
10000874b:	lea	rsi, [rbp - 0x1c4]
100008752:	lea	rdx, [rbp - 0x1d0]
100008759:	lea	rcx, [rbp - 0x1c0]
100008760:	call	0x10000889a
100008765:	test	eax, eax
100008767:	js	0x10000880e
10000876d:	mov	r10d, dword ptr [rbp - 0x1d0]
100008774:	mov	r11d, dword ptr [rbp - 0x1c4]
10000877b:	test	r10d, r10d
10000877e:	jle	0x10000878a
100008780:	inc	r11d
100008783:	mov	dword ptr [rbp - 0x1c4], r11d
10000878a:	mov	edx, 0x81
10000878f:	lea	rdi, [rbp - 0xc0]
100008796:	xor	esi, esi
100008798:	lea	rcx, [rip + 0x3205] ## literal pool for: "-k%d.%d%s,%d.%d%s"
10000879f:	mov	r8d, r12d
1000087a2:	mov	r9d, r15d
1000087a5:	xor	eax, eax
1000087a7:	lea	rbx, [rbp - 0x1c0]
1000087ae:	push	rbx
1000087af:	push	r10
1000087b1:	push	r11
1000087b3:	lea	rbx, [rbp - 0x140]
1000087ba:	push	rbx
1000087bb:	call	0x10000adb2 ## symbol stub for: ___sprintf_chk
1000087c0:	add	rsp, 0x20
1000087c4:	lea	rdi, [rbp - 0xc0]
1000087cb:	call	0x10000790e
1000087d0:	mov	r12, qword ptr [rbp - 0x1e0]
1000087d7:	mov	qword ptr [r12 + 8*r13], rax
1000087db:	mov	rax, qword ptr [rbp - 0x1d8]
1000087e2:	mov	eax, dword ptr [rax]
1000087e4:	lea	ecx, [r13 + 0x2]
1000087e8:	cmp	ecx, eax
1000087ea:	jge	0x100008801
1000087ec:	mov	rcx, r14
1000087ef:	lea	edx, [rcx - 0x1]
1000087f2:	mov	rsi, qword ptr [r12 + 8*rcx]
1000087f6:	mov	qword ptr [r12 + 8*rdx], rsi
1000087fa:	inc	rcx
1000087fd:	cmp	eax, ecx
1000087ff:	jg	0x1000087ef
100008801:	dec	eax
100008803:	mov	rcx, qword ptr [rbp - 0x1d8]
10000880a:	mov	dword ptr [rcx], eax
10000880c:	jmp	0x100008857
10000880e:	sub	rsp, 0x8
100008812:	mov	edx, 0x81
100008817:	lea	rdi, [rbp - 0xc0]
10000881e:	xor	esi, esi
100008820:	lea	rcx, [rip + 0x318f] ## literal pool for: "-k%d.%d%s"
100008827:	mov	r8d, r12d
10000882a:	mov	r9d, r15d
10000882d:	xor	eax, eax
10000882f:	lea	rbx, [rbp - 0x140]
100008836:	push	rbx
100008837:	call	0x10000adb2 ## symbol stub for: ___sprintf_chk
10000883c:	add	rsp, 0x10
100008840:	lea	rdi, [rbp - 0xc0]
100008847:	call	0x10000790e
10000884c:	mov	r12, qword ptr [rbp - 0x1e0]
100008853:	mov	qword ptr [r12 + 8*r13], rax
100008857:	mov	rax, qword ptr [rbp - 0x1d8]
10000885e:	mov	r15d, dword ptr [rax]
100008861:	inc	r13
100008864:	movsxd	rax, r15d
100008867:	inc	r14
10000886a:	cmp	r13, rax
10000886d:	jl	0x100008674
100008873:	mov	rax, qword ptr [rip + 0x3796] ## literal pool symbol address: ___stack_chk_guard
10000887a:	mov	rax, qword ptr [rax]
10000887d:	cmp	rax, qword ptr [rbp - 0x30]
100008881:	jne	0x100008895
100008883:	add	rsp, 0x1b8
10000888a:	pop	rbx
10000888b:	pop	r12
10000888d:	pop	r13
10000888f:	pop	r14
100008891:	pop	r15
100008893:	pop	rbp
100008894:	ret
100008895:	call	0x10000adb8 ## symbol stub for: ___stack_chk_fail
10000889a:	push	rbp
10000889b:	mov	rbp, rsp
10000889e:	push	r15
1000088a0:	push	r14
1000088a2:	push	r13
1000088a4:	push	r12
1000088a6:	push	rbx
1000088a7:	sub	rsp, 0x78
1000088ab:	mov	r14, rcx
1000088ae:	mov	r13, rdx
1000088b1:	mov	rbx, rsi
1000088b4:	mov	r15, rdi
1000088b7:	mov	rax, qword ptr [rip + 0x3752] ## literal pool symbol address: ___stack_chk_guard
1000088be:	mov	rax, qword ptr [rax]
1000088c1:	mov	qword ptr [rbp - 0x30], rax
1000088c5:	xor	eax, eax
1000088c7:	mov	dword ptr [rsi], eax
1000088c9:	mov	dword ptr [rdx], eax
1000088cb:	lea	rsi, [rip + 0x325e] ## literal pool for: "^([0-9]+)(\\.[0-9]+)?([A-Za-z]+)?$"
1000088d2:	lea	rdi, [rbp - 0xa0]
1000088d9:	mov	edx, 0x1
1000088de:	call	0x10000af50 ## symbol stub for: _regcomp
1000088e3:	mov	r12d, 0xffffffff
1000088e9:	test	eax, eax
1000088eb:	jne	0x100008a41
1000088f1:	lea	rdi, [rbp - 0xa0]
1000088f8:	lea	rcx, [rbp - 0x70]
1000088fc:	mov	edx, 0x4
100008901:	mov	rsi, r15
100008904:	xor	r8d, r8d
100008907:	call	0x10000af56 ## symbol stub for: _regexec
10000890c:	mov	r12d, 0xffffffff
100008912:	test	eax, eax
100008914:	jne	0x100008a35
10000891a:	mov	rax, qword ptr [rbp - 0x68]
10000891e:	cmp	rax, qword ptr [rbp - 0x70]
100008922:	jle	0x100008a35
100008928:	mov	qword ptr [rbp - 0x80], r14
10000892c:	mov	r14, qword ptr [rbp - 0x58]
100008930:	sub	r14, qword ptr [rbp - 0x60]
100008934:	jle	0x100008a35
10000893a:	lea	rdi, [r14 + 0x1]
10000893e:	call	0x1000078d3
100008943:	mov	r12, rax
100008946:	mov	rsi, qword ptr [rbp - 0x60]
10000894a:	add	rsi, r15
10000894d:	mov	rdi, rax
100008950:	mov	rdx, r14
100008953:	call	0x10000afc8 ## symbol stub for: _strncpy
100008958:	mov	byte ptr [r12 + r14], 0x0
10000895d:	call	0x10000ada6 ## symbol stub for: ___error
100008962:	mov	dword ptr [rax], 0x0
100008968:	mov	qword ptr [rbp - 0x78], r12
10000896c:	mov	rdi, r12
10000896f:	xor	esi, esi
100008971:	mov	edx, 0xa
100008976:	call	0x10000afe6 ## symbol stub for: _strtoul
10000897b:	mov	dword ptr [rbx], eax
10000897d:	call	0x10000ada6 ## symbol stub for: ___error
100008982:	cmp	dword ptr [rax], 0x0
100008985:	jne	0x100008a68
10000898b:	mov	rbx, qword ptr [rbp - 0x48]
10000898f:	sub	rbx, qword ptr [rbp - 0x50]
100008993:	jle	0x1000089ed
100008995:	lea	r12, [rbx - 0x1]
100008999:	mov	rdi, rbx
10000899c:	call	0x1000078d3
1000089a1:	mov	r14, rax
1000089a4:	mov	rax, qword ptr [rbp - 0x50]
1000089a8:	lea	rsi, [r15 + rax]
1000089ac:	inc	rsi
1000089af:	mov	rdi, r14
1000089b2:	mov	rdx, r12
1000089b5:	call	0x10000afc8 ## symbol stub for: _strncpy
1000089ba:	mov	byte ptr [r14 + rbx - 0x1], 0x0
1000089c0:	call	0x10000ada6 ## symbol stub for: ___error
1000089c5:	mov	dword ptr [rax], 0x0
1000089cb:	mov	rdi, r14
1000089ce:	xor	esi, esi
1000089d0:	mov	edx, 0xa
1000089d5:	call	0x10000afe6 ## symbol stub for: _strtoul
1000089da:	mov	dword ptr [r13], eax
1000089de:	call	0x10000ada6 ## symbol stub for: ___error
1000089e3:	cmp	dword ptr [rax], 0x0
1000089e6:	je	0x1000089f0
1000089e8:	call	0x10000ab1d
1000089ed:	xor	r14d, r14d
1000089f0:	mov	rax, qword ptr [rbp - 0x40]
1000089f4:	mov	rbx, qword ptr [rbp - 0x38]
1000089f8:	sub	rbx, rax
1000089fb:	jle	0x100008a17
1000089fd:	add	r15, rax
100008a00:	mov	r12, qword ptr [rbp - 0x80]
100008a04:	mov	rdi, r12
100008a07:	mov	rsi, r15
100008a0a:	mov	rdx, rbx
100008a0d:	call	0x10000afc8 ## symbol stub for: _strncpy
100008a12:	mov	byte ptr [r12 + rbx], 0x0
100008a17:	test	r14, r14
100008a1a:	je	0x100008a24
100008a1c:	mov	rdi, r14
100008a1f:	call	0x1000078e8
100008a24:	xor	r12d, r12d
100008a27:	mov	rdi, qword ptr [rbp - 0x78]
100008a2b:	test	rdi, rdi
100008a2e:	je	0x100008a35
100008a30:	call	0x1000078e8
100008a35:	lea	rdi, [rbp - 0xa0]
100008a3c:	call	0x10000af5c ## symbol stub for: _regfree
100008a41:	mov	rax, qword ptr [rip + 0x35c8] ## literal pool symbol address: ___stack_chk_guard
100008a48:	mov	rax, qword ptr [rax]
100008a4b:	cmp	rax, qword ptr [rbp - 0x30]
100008a4f:	jne	0x100008a63
100008a51:	mov	eax, r12d
100008a54:	add	rsp, 0x78
100008a58:	pop	rbx
100008a59:	pop	r12
100008a5b:	pop	r13
100008a5d:	pop	r14
100008a5f:	pop	r15
100008a61:	pop	rbp
100008a62:	ret
100008a63:	call	0x10000adb8 ## symbol stub for: ___stack_chk_fail
100008a68:	call	0x10000ab39
100008a6d:	push	rbp
100008a6e:	mov	rbp, rsp
100008a71:	push	r15
100008a73:	push	r14
100008a75:	push	r13
100008a77:	push	r12
100008a79:	push	rbx
100008a7a:	sub	rsp, 0x178
100008a81:	mov	r13, rsi
100008a84:	mov	rax, qword ptr [rip + 0x3585] ## literal pool symbol address: ___stack_chk_guard
100008a8b:	mov	rax, qword ptr [rax]
100008a8e:	mov	qword ptr [rbp - 0x30], rax
100008a92:	mov	dword ptr [rbp - 0x6c], edi
100008a95:	mov	word ptr [rbp - 0x64], 0x0
100008a9b:	mov	dword ptr [rbp - 0x68], 0x0
100008aa2:	lea	rdi, [rip + 0x2bbb] ## literal pool for: "-"
100008aa9:	call	0x10000790e
100008aae:	mov	r15, rax
100008ab1:	lea	rdi, [rip + 0x2f08] ## literal pool for: "GNUSORT_COMPATIBLE_BLANKS"
100008ab8:	call	0x10000ae5a ## symbol stub for: _getenv
100008abd:	test	rax, rax
100008ac0:	je	0x100008ade
100008ac2:	mov	rax, qword ptr [rip + 0x356f] ## literal pool symbol address: _isspace
100008ac9:	mov	qword ptr [rip + 0x7958], rax
100008ad0:	mov	rax, qword ptr [rip + 0x3569] ## literal pool symbol address: _iswspace
100008ad7:	mov	qword ptr [rip + 0x7952], rax
100008ade:	call	0x100005dc7
100008ae3:	movabs	rax, 0x4000000000
100008aed:	lea	rsi, [rbp - 0x100]
100008af4:	mov	qword ptr [rsi + 0x8], rax
100008af8:	lea	rax, [rip + 0x1680]
100008aff:	mov	qword ptr [rsi], rax
100008b02:	mov	edi, 0xf
100008b07:	xor	edx, edx
100008b09:	call	0x10000af8c ## symbol stub for: _sigaction
100008b0e:	test	eax, eax
100008b10:	js	0x100008bd6
100008b16:	lea	rsi, [rbp - 0x100]
100008b1d:	mov	edi, 0x1
100008b22:	xor	edx, edx
100008b24:	call	0x10000af8c ## symbol stub for: _sigaction
100008b29:	test	eax, eax
100008b2b:	js	0x100008bd6
100008b31:	lea	rsi, [rbp - 0x100]
100008b38:	mov	edi, 0x2
100008b3d:	xor	edx, edx
100008b3f:	call	0x10000af8c ## symbol stub for: _sigaction
100008b44:	test	eax, eax
100008b46:	js	0x100008bd6
100008b4c:	lea	rsi, [rbp - 0x100]
100008b53:	mov	edi, 0x3
100008b58:	xor	edx, edx
100008b5a:	call	0x10000af8c ## symbol stub for: _sigaction
100008b5f:	test	eax, eax
100008b61:	js	0x100008bd6
100008b63:	lea	rsi, [rbp - 0x100]
100008b6a:	mov	edi, 0x6
100008b6f:	xor	edx, edx
100008b71:	call	0x10000af8c ## symbol stub for: _sigaction
100008b76:	test	eax, eax
100008b78:	js	0x100008bd6
100008b7a:	lea	rsi, [rbp - 0x100]
100008b81:	mov	edi, 0xa
100008b86:	xor	edx, edx
100008b88:	call	0x10000af8c ## symbol stub for: _sigaction
100008b8d:	test	eax, eax
100008b8f:	js	0x100008bd6
100008b91:	lea	rsi, [rbp - 0x100]
100008b98:	mov	edi, 0xb
100008b9d:	xor	edx, edx
100008b9f:	call	0x10000af8c ## symbol stub for: _sigaction
100008ba4:	test	eax, eax
100008ba6:	js	0x100008bd6
100008ba8:	lea	rsi, [rbp - 0x100]
100008baf:	mov	edi, 0x1e
100008bb4:	xor	edx, edx
100008bb6:	call	0x10000af8c ## symbol stub for: _sigaction
100008bbb:	test	eax, eax
100008bbd:	js	0x100008bd6
100008bbf:	lea	rsi, [rbp - 0x100]
100008bc6:	mov	edi, 0x1f
100008bcb:	xor	edx, edx
100008bcd:	call	0x10000af8c ## symbol stub for: _sigaction
100008bd2:	test	eax, eax
100008bd4:	jns	0x100008be2
100008bd6:	lea	rdi, [rip + 0x2f75] ## literal pool for: "sigaction"
100008bdd:	call	0x10000aed2 ## symbol stub for: _perror
100008be2:	mov	dword ptr [rip + 0x784c], 0x1
100008bec:	mov	edi, 0xc8
100008bf1:	call	0x10000afec ## symbol stub for: _sysconf
100008bf6:	mov	r14, rax
100008bf9:	test	rax, rax
100008bfc:	jle	0x100009ce4
100008c02:	mov	edi, 0x1d
100008c07:	call	0x10000afec ## symbol stub for: _sysconf
100008c0c:	mov	r12, rax
100008c0f:	test	rax, rax
100008c12:	jle	0x100009cfb
100008c18:	mov	edi, 0x3a
100008c1d:	call	0x10000afec ## symbol stub for: _sysconf
100008c22:	mov	dword ptr [rip + 0x7810], eax
100008c28:	test	eax, eax
100008c2a:	je	0x100008c3d
100008c2c:	cmp	eax, 0x21
100008c2f:	jb	0x100008c4d
100008c31:	mov	eax, 0x20
100008c36:	mov	ecx, 0x20
100008c3b:	jmp	0x100008c47
100008c3d:	mov	eax, 0x1
100008c42:	mov	ecx, 0x1
100008c47:	mov	dword ptr [rip + 0x77eb], ecx
100008c4d:	imul	r12, r14
100008c51:	lea	rcx, [rip + 0x7740]
100008c58:	mov	qword ptr [rcx], r12
100008c5b:	shr	r12
100008c5e:	mov	ecx, 0x400
100008c63:	cmp	r12, rcx
100008c66:	cmovbe	r12, rcx
100008c6a:	mov	eax, eax
100008c6c:	mov	qword ptr [rip + 0x77cd], rax
100008c73:	lea	rax, [rip + 0x7726]
100008c7a:	mov	qword ptr [rax], r12
100008c7d:	lea	rsi, [rip + 0x2a63] ## literal pool for: ""
100008c84:	xor	edi, edi
100008c86:	call	0x10000af86 ## symbol stub for: _setlocale
100008c8b:	call	0x10000ae72 ## symbol stub for: _localeconv
100008c90:	test	rax, rax
100008c93:	je	0x100008d66
100008c99:	mov	r14, rax
100008c9c:	mov	rsi, qword ptr [rax]
100008c9f:	test	rsi, rsi
100008ca2:	je	0x100008cce
100008ca4:	lea	rax, [rip + 0x76dd]
100008cab:	mov	ebx, dword ptr [rax]
100008cad:	mov	rax, qword ptr [rip + 0x3354] ## literal pool symbol address: ___mb_cur_max
100008cb4:	movsxd	rdx, dword ptr [rax]
100008cb7:	lea	r12, [rip + 0x76ca]
100008cbe:	mov	rdi, r12
100008cc1:	call	0x10000ae90 ## symbol stub for: _mbtowc
100008cc6:	test	eax, eax
100008cc8:	jg	0x100008cce
100008cca:	mov	dword ptr [r12], ebx
100008cce:	mov	rsi, qword ptr [r14 + 0x8]
100008cd2:	test	rsi, rsi
100008cd5:	je	0x100008d01
100008cd7:	lea	rax, [rip + 0x7d12]
100008cde:	mov	ebx, dword ptr [rax]
100008ce0:	mov	rax, qword ptr [rip + 0x3321] ## literal pool symbol address: ___mb_cur_max
100008ce7:	movsxd	rdx, dword ptr [rax]
100008cea:	lea	r12, [rip + 0x7cff]
100008cf1:	mov	rdi, r12
100008cf4:	call	0x10000ae90 ## symbol stub for: _mbtowc
100008cf9:	test	eax, eax
100008cfb:	jg	0x100008d01
100008cfd:	mov	dword ptr [r12], ebx
100008d01:	mov	rsi, qword ptr [r14 + 0x40]
100008d05:	test	rsi, rsi
100008d08:	je	0x100008d34
100008d0a:	lea	rax, [rip + 0x767f]
100008d11:	mov	ebx, dword ptr [rax]
100008d13:	mov	rax, qword ptr [rip + 0x32ee] ## literal pool symbol address: ___mb_cur_max
100008d1a:	movsxd	rdx, dword ptr [rax]
100008d1d:	lea	r12, [rip + 0x766c]
100008d24:	mov	rdi, r12
100008d27:	call	0x10000ae90 ## symbol stub for: _mbtowc
100008d2c:	test	eax, eax
100008d2e:	jg	0x100008d34
100008d30:	mov	dword ptr [r12], ebx
100008d34:	mov	rsi, qword ptr [r14 + 0x48]
100008d38:	test	rsi, rsi
100008d3b:	je	0x100008d66
100008d3d:	lea	rax, [rip + 0x7648]
100008d44:	mov	ebx, dword ptr [rax]
100008d46:	mov	rax, qword ptr [rip + 0x32bb] ## literal pool symbol address: ___mb_cur_max
100008d4d:	movsxd	rdx, dword ptr [rax]
100008d50:	lea	r14, [rip + 0x7635]
100008d57:	mov	rdi, r14
100008d5a:	call	0x10000ae90 ## symbol stub for: _mbtowc
100008d5f:	test	eax, eax
100008d61:	jg	0x100008d66
100008d63:	mov	dword ptr [r14], ebx
100008d66:	lea	rdi, [rip + 0x2e0b] ## literal pool for: "GNUSORT_NUMERIC_COMPATIBILITY"
100008d6d:	call	0x10000ae5a ## symbol stub for: _getenv
100008d72:	test	rax, rax
100008d75:	je	0x100008d7e
100008d77:	mov	byte ptr [rip + 0x7c52], 0x1
100008d7e:	mov	edi, 0x1
100008d83:	xor	esi, esi
100008d85:	call	0x10000af86 ## symbol stub for: _setlocale
100008d8a:	test	rax, rax
100008d8d:	je	0x100008e03
100008d8f:	mov	rdi, rax
100008d92:	call	0x10000790e
100008d97:	mov	r14, rax
100008d9a:	lea	rsi, [rip + 0x2df5] ## literal pool for: "C"
100008da1:	mov	edi, 0x1
100008da6:	call	0x10000af86 ## symbol stub for: _setlocale
100008dab:	test	rax, rax
100008dae:	je	0x100008dbf
100008db0:	mov	rdi, rax
100008db3:	mov	rsi, r14
100008db6:	call	0x10000afaa ## symbol stub for: _strcmp
100008dbb:	test	eax, eax
100008dbd:	je	0x100008de4
100008dbf:	lea	rsi, [rip + 0x2dd2] ## literal pool for: "POSIX"
100008dc6:	mov	edi, 0x1
100008dcb:	call	0x10000af86 ## symbol stub for: _setlocale
100008dd0:	test	rax, rax
100008dd3:	je	0x100008dee
100008dd5:	mov	rdi, rax
100008dd8:	mov	rsi, r14
100008ddb:	call	0x10000afaa ## symbol stub for: _strcmp
100008de0:	test	eax, eax
100008de2:	jne	0x100008dee
100008de4:	lea	rax, [rip + 0x7c09]
100008deb:	mov	byte ptr [rax], 0x1
100008dee:	mov	edi, 0x1
100008df3:	mov	rsi, r14
100008df6:	call	0x10000af86 ## symbol stub for: _setlocale
100008dfb:	mov	rdi, r14
100008dfe:	call	0x1000078e8
100008e03:	lea	rdi, [rip + 0x2d94] ## literal pool for: "TMPDIR"
100008e0a:	call	0x10000ae5a ## symbol stub for: _getenv
100008e0f:	test	rax, rax
100008e12:	je	0x100008e26
100008e14:	mov	rdi, rax
100008e17:	call	0x10000790e
100008e1c:	lea	rcx, [rip + 0x7585]
100008e23:	mov	qword ptr [rcx], rax
100008e26:	xorps	xmm0, xmm0
100008e29:	movups	xmmword ptr [rip + 0x7b88], xmm0
100008e30:	mov	qword ptr [rip + 0x7b8d], 0x0
100008e3b:	lea	rdi, [rip + 0x7b76]
100008e42:	movups	xmmword ptr [rip + 0x7c33], xmm0
100008e49:	mov	dword ptr [rip + 0x7c39], 0x0
100008e53:	call	0x1000046db
100008e58:	mov	qword ptr [rip + 0x7b59], rax
100008e5f:	lea	rbx, [rbp - 0x6c]
100008e63:	mov	rdi, rbx
100008e66:	mov	rsi, r13
100008e69:	call	0x100008628
100008e6e:	mov	r12d, dword ptr [rbx]
100008e71:	lea	rdx, [rip + 0x2b62] ## literal pool for: "bcCdfghik:Mmno:RrsS:t:T:uVz"
100008e78:	lea	rcx, [rip + 0x75d1]
100008e7f:	mov	edi, r12d
100008e82:	mov	rsi, r13
100008e85:	xor	r8d, r8d
100008e88:	call	0x10000ae60 ## symbol stub for: _getopt_long
100008e8d:	cmp	eax, -0x1
100008e90:	je	0x1000096bc
100008e96:	mov	ebx, eax
100008e98:	xor	eax, eax
100008e9a:	mov	qword ptr [rbp - 0x60], rax
100008e9e:	lea	r14, [rbp - 0x68]
100008ea2:	mov	qword ptr [rbp - 0x58], r13
100008ea6:	movsx	edi, bl
100008ea9:	mov	rsi, r14
100008eac:	call	0x100009f98
100008eb1:	lea	rdi, [rip + 0x7b00]
100008eb8:	mov	esi, ebx
100008eba:	call	0x100009ffa
100008ebf:	test	al, al
100008ec1:	je	0x100008eeb
100008ec3:	mov	edi, r12d
100008ec6:	mov	rsi, r13
100008ec9:	lea	rdx, [rip + 0x2b0a] ## literal pool for: "bcCdfghik:Mmno:RrsS:t:T:uVz"
100008ed0:	lea	rcx, [rip + 0x7579]
100008ed7:	xor	r8d, r8d
100008eda:	call	0x10000ae60 ## symbol stub for: _getopt_long
100008edf:	mov	ebx, eax
100008ee1:	cmp	eax, -0x1
100008ee4:	jne	0x100008ea6
100008ee6:	jmp	0x1000096c2
100008eeb:	lea	eax, [rbx - 0x53]
100008eee:	cmp	eax, 0x3a
100008ef1:	ja	0x100008f95
100008ef7:	lea	rcx, [rip + 0xf7e]
100008efe:	movsxd	rax, dword ptr [rcx + 4*rax]
100008f02:	add	rax, rcx
100008f05:	jmp	rax
100008f07:	mov	rax, qword ptr [rip + 0x314a] ## literal pool symbol address: _optarg
100008f0e:	mov	rbx, qword ptr [rax]
100008f11:	test	rbx, rbx
100008f14:	je	0x10000954c
100008f1a:	mov	r14d, r12d
100008f1d:	lea	r12, [rbp - 0x100]
100008f24:	mov	qword ptr [r12], 0x0
100008f2c:	call	0x10000ada6 ## symbol stub for: ___error
100008f31:	mov	dword ptr [rax], 0x0
100008f37:	mov	rdi, rbx
100008f3a:	mov	rsi, r12
100008f3d:	mov	edx, 0xa
100008f42:	call	0x10000afe0 ## symbol stub for: _strtoll
100008f47:	mov	r13, rax
100008f4a:	call	0x10000ada6 ## symbol stub for: ___error
100008f4f:	cmp	dword ptr [rax], 0x0
100008f52:	jne	0x100009672
100008f58:	mov	rax, qword ptr [rbp - 0x100]
100008f5f:	movsx	eax, byte ptr [rax]
100008f62:	cmp	eax, 0x53
100008f65:	lea	rbx, [rip + 0x7434]
100008f6c:	jg	0x1000095ac
100008f72:	lea	ecx, [rax - 0x45]
100008f75:	cmp	ecx, 0xb
100008f78:	mov	r12d, r14d
100008f7b:	ja	0x1000095d4
100008f81:	lea	rax, [rip + 0xfe0]
100008f88:	movsxd	rcx, dword ptr [rax + 4*rcx]
100008f8c:	add	rcx, rax
100008f8f:	lea	r14, [rbp - 0x68]
100008f93:	jmp	rcx
100008f95:	cmp	ebx, 0x43
100008f98:	jne	0x100009db7
100008f9e:	mov	word ptr [rip + 0x7add], 0x101
100008fa7:	jmp	0x100008ec3
100008fac:	mov	rax, qword ptr [rip + 0x30a5] ## literal pool symbol address: _optarg
100008fb3:	mov	rdi, qword ptr [rax]
100008fb6:	call	0x10000790e
100008fbb:	lea	rcx, [rip + 0x73e6]
100008fc2:	jmp	0x1000094d9
100008fc7:	mov	byte ptr [rip + 0x7ab6], 0x1
100008fce:	mov	rax, qword ptr [rip + 0x3083] ## literal pool symbol address: _optarg
100008fd5:	mov	rbx, qword ptr [rax]
100008fd8:	test	rbx, rbx
100008fdb:	je	0x100008ec3
100008fe1:	lea	rsi, [rip + 0x2a0e] ## literal pool for: "diagnose-first"
100008fe8:	mov	rdi, rbx
100008feb:	call	0x10000afaa ## symbol stub for: _strcmp
100008ff0:	test	eax, eax
100008ff2:	je	0x100008ec3
100008ff8:	lea	rsi, [rip + 0x2a06] ## literal pool for: "silent"
100008fff:	mov	rdi, rbx
100009002:	call	0x10000afaa ## symbol stub for: _strcmp
100009007:	test	eax, eax
100009009:	je	0x100009586
10000900f:	lea	rsi, [rip + 0x29f6] ## literal pool for: "quiet"
100009016:	mov	rdi, rbx
100009019:	call	0x10000afaa ## symbol stub for: _strcmp
10000901e:	test	eax, eax
100009020:	je	0x100009586
100009026:	cmp	byte ptr [rbx], 0x0
100009029:	je	0x100008ec3
10000902f:	jmp	0x100009e6c
100009034:	mov	dword ptr [rbp - 0x70], r12d
100009038:	mov	al, 0x1
10000903a:	mov	byte ptr [rip + 0x7a4c], al
100009040:	mov	byte ptr [rip + 0x7a40], al
100009046:	lea	r14, [rip + 0x799b]
10000904d:	mov	rsi, qword ptr [r14]
100009050:	inc	rsi
100009053:	mov	qword ptr [r14], rsi
100009056:	lea	r12, [rip + 0x799b]
10000905d:	mov	rdi, qword ptr [r12]
100009061:	shl	rsi, 0x6
100009065:	call	0x1000078f9
10000906a:	mov	qword ptr [r12], rax
10000906e:	mov	rcx, qword ptr [r14]
100009071:	shl	rcx, 0x6
100009075:	xorps	xmm0, xmm0
100009078:	movups	xmmword ptr [rcx + rax - 0x10], xmm0
10000907d:	movups	xmmword ptr [rcx + rax - 0x20], xmm0
100009082:	movups	xmmword ptr [rcx + rax - 0x30], xmm0
100009087:	movups	xmmword ptr [rcx + rax - 0x40], xmm0
10000908c:	mov	rax, qword ptr [rip + 0x2fc5] ## literal pool symbol address: _optarg
100009093:	mov	rbx, qword ptr [rax]
100009096:	mov	rax, qword ptr [r12]
10000909a:	mov	rcx, qword ptr [r14]
10000909d:	mov	word ptr [rbp - 0xfc], 0x0
1000090a6:	mov	dword ptr [rbp - 0x100], 0x0
1000090b0:	test	rbx, rbx
1000090b3:	je	0x100009da3
1000090b9:	cmp	byte ptr [rbx], 0x0
1000090bc:	je	0x100009da3
1000090c2:	shl	rcx, 0x6
1000090c6:	lea	r14, [rcx + rax]
1000090ca:	add	r14, -0x40
1000090ce:	mov	rdi, rbx
1000090d1:	mov	esi, 0x2c
1000090d6:	call	0x10000afa4 ## symbol stub for: _strchr
1000090db:	test	rax, rax
1000090de:	je	0x10000955b
1000090e4:	mov	qword ptr [rbp - 0x108], rax
1000090eb:	mov	r12, rax
1000090ee:	sub	r12, rbx
1000090f1:	je	0x100009da3
1000090f7:	lea	rdi, [r12 + 0x1]
1000090fc:	call	0x1000078d3
100009101:	mov	r13, rax
100009104:	mov	rdi, rax
100009107:	mov	rsi, rbx
10000910a:	mov	rdx, r12
10000910d:	call	0x10000afc8 ## symbol stub for: _strncpy
100009112:	mov	byte ptr [r13 + r12], 0x0
100009118:	lea	rdx, [rbp - 0x100]
10000911f:	mov	rdi, r13
100009122:	mov	rsi, r14
100009125:	xor	ecx, ecx
100009127:	call	0x10000a192
10000912c:	mov	ebx, eax
10000912e:	mov	rdi, r13
100009131:	mov	r13, qword ptr [rbp - 0x58]
100009135:	call	0x1000078e8
10000913a:	test	ebx, ebx
10000913c:	js	0x100009da3
100009142:	mov	rdi, qword ptr [rbp - 0x108]
100009149:	inc	rdi
10000914c:	call	0x10000790e
100009151:	mov	r12, rax
100009154:	lea	rdx, [rbp - 0x100]
10000915b:	mov	rdi, rax
10000915e:	mov	rsi, r14
100009161:	mov	ecx, 0x1
100009166:	call	0x10000a192
10000916b:	mov	ebx, eax
10000916d:	mov	rdi, r12
100009170:	call	0x1000078e8
100009175:	jmp	0x100009571
10000917a:	mov	byte ptr [rip + 0x7906], 0x1
100009181:	jmp	0x100008ec3
100009186:	mov	rbx, qword ptr [rip + 0x2ecb] ## literal pool symbol address: _optarg
10000918d:	mov	rdi, qword ptr [rbx]
100009190:	call	0x10000afc2 ## symbol stub for: _strlen
100009195:	lea	rsi, [rax + 0x1]
100009199:	mov	rdi, r15
10000919c:	call	0x1000078f9
1000091a1:	mov	r15, rax
1000091a4:	mov	rsi, qword ptr [rbx]
1000091a7:	mov	rdi, rax
1000091aa:	call	0x10000afb6 ## symbol stub for: _strcpy
1000091af:	jmp	0x100008ec3
1000091b4:	mov	byte ptr [rip + 0x78cd], 0x1
1000091bb:	jmp	0x100008ec3
1000091c0:	mov	r14, qword ptr [rip + 0x2e91] ## literal pool symbol address: _optarg
1000091c7:	mov	rbx, qword ptr [r14]
1000091ca:	mov	rdi, rbx
1000091cd:	call	0x10000afc2 ## symbol stub for: _strlen
1000091d2:	cmp	rax, 0x2
1000091d6:	jb	0x1000091f7
1000091d8:	cmp	byte ptr [rbx], 0x5c
1000091db:	jne	0x100009d96
1000091e1:	lea	rax, [rbx + 0x1]
1000091e5:	mov	qword ptr [r14], rax
1000091e8:	cmp	byte ptr [rbx + 0x1], 0x30
1000091ec:	mov	rbx, rax
1000091ef:	jne	0x1000091ca
1000091f1:	mov	byte ptr [rax], 0x0
1000091f4:	mov	rbx, qword ptr [r14]
1000091f7:	mov	byte ptr [rip + 0x788d], 0x1
1000091fe:	movsx	edi, byte ptr [rbx]
100009201:	call	0x10000add0 ## symbol stub for: _btowc
100009206:	mov	dword ptr [rip + 0x7870], eax
10000920c:	cmp	eax, -0x1
10000920f:	lea	r14, [rbp - 0x68]
100009213:	je	0x100009ddb
100009219:	cmp	byte ptr [rip + 0x77b0], 0x0
100009220:	jne	0x100008ec3
100009226:	lea	rcx, [rip + 0x715b]
10000922d:	cmp	dword ptr [rcx], eax
10000922f:	jne	0x100009237
100009231:	mov	dword ptr [rcx], 0xffffffff
100009237:	lea	rcx, [rip + 0x77b2]
10000923e:	cmp	dword ptr [rcx], eax
100009240:	jne	0x100009248
100009242:	mov	dword ptr [rcx], 0xffffffff
100009248:	lea	rcx, [rip + 0x713d]
10000924f:	cmp	dword ptr [rcx], eax
100009251:	jne	0x100009259
100009253:	mov	dword ptr [rcx], 0xffffffff
100009259:	lea	rcx, [rip + 0x7130]
100009260:	cmp	dword ptr [rcx], eax
100009262:	jne	0x100008ec3
100009268:	mov	dword ptr [rcx], 0xffffffff
10000926e:	jmp	0x100008ec3
100009273:	mov	word ptr [rip + 0x780c], 0x101
10000927c:	jmp	0x100008ec3
100009281:	mov	byte ptr [rip + 0x7802], 0x1
100009288:	jmp	0x100008ec3
10000928d:	mov	rax, qword ptr [rip + 0x2dc4] ## literal pool symbol address: _optarg
100009294:	mov	r13, qword ptr [rax]
100009297:	test	r13, r13
10000929a:	je	0x100009657
1000092a0:	lea	rsi, [rip + 0x2771] ## literal pool for: "general-numeric"
1000092a7:	mov	rdi, r13
1000092aa:	call	0x10000afaa ## symbol stub for: _strcmp
1000092af:	test	eax, eax
1000092b1:	je	0x100009592
1000092b7:	lea	rsi, [rip + 0x276a] ## literal pool for: "human-numeric"
1000092be:	mov	rdi, r13
1000092c1:	call	0x10000afaa ## symbol stub for: _strcmp
1000092c6:	test	eax, eax
1000092c8:	je	0x1000095ca
1000092ce:	lea	rsi, [rip + 0x2761] ## literal pool for: "numeric"
1000092d5:	mov	rdi, r13
1000092d8:	call	0x10000afaa ## symbol stub for: _strcmp
1000092dd:	test	eax, eax
1000092df:	je	0x10000962a
1000092e5:	lea	rsi, [rip + 0x2752] ## literal pool for: "month"
1000092ec:	mov	rdi, r13
1000092ef:	call	0x10000afaa ## symbol stub for: _strcmp
1000092f4:	test	eax, eax
1000092f6:	je	0x100009660
1000092fc:	lea	rsi, [rip + 0x2741] ## literal pool for: "random"
100009303:	mov	rdi, r13
100009306:	call	0x10000afaa ## symbol stub for: _strcmp
10000930b:	test	eax, eax
10000930d:	jne	0x100009e74
100009313:	mov	al, 0x1
100009315:	mov	byte ptr [rip + 0x76ad], al
10000931b:	lea	rdi, [rip + 0x7696]
100009322:	mov	byte ptr [rip + 0x7750], al
100009328:	mov	byte ptr [rip + 0x76b3], al
10000932e:	jmp	0x100009645
100009333:	mov	rax, qword ptr [rip + 0x2d1e] ## literal pool symbol address: _optarg
10000933a:	mov	rbx, qword ptr [rax]
10000933d:	xor	eax, eax
10000933f:	mov	qword ptr [rbp - 0x100], rax
100009346:	mov	qword ptr [rbp - 0x198], rax
10000934d:	test	rbx, rbx
100009350:	je	0x100008ec3
100009356:	lea	rsi, [rip + 0x2323] ## literal pool for: "r"
10000935d:	mov	rdi, rbx
100009360:	call	0x10000ae24 ## symbol stub for: _fopen
100009365:	test	rax, rax
100009368:	je	0x100009dfd
10000936e:	mov	r13, rax
100009371:	lea	rdi, [rbp - 0x100]
100009378:	lea	rsi, [rbp - 0x198]
10000937f:	xor	edx, edx
100009381:	mov	rcx, r13
100009384:	call	0x10000ae4e ## symbol stub for: _getdelim
100009389:	cmp	rax, -0x1
10000938d:	je	0x10000952c
100009393:	mov	rdi, qword ptr [rbp - 0x100]
10000939a:	cmp	byte ptr [rdi], 0x0
10000939d:	je	0x1000093fd
10000939f:	mov	rax, qword ptr [rip + 0x754a]
1000093a6:	cmp	rax, -0x1
1000093aa:	jne	0x1000093b9
1000093ac:	mov	qword ptr [rip + 0x7539], 0x0
1000093b7:	xor	eax, eax
1000093b9:	lea	rcx, [rax + 0x1]
1000093bd:	mov	qword ptr [rip + 0x752c], rcx
1000093c4:	mov	rdi, qword ptr [rip + 0x760d]
1000093cb:	lea	rsi, [8*rax + 0x8]
1000093d3:	call	0x1000078f9
1000093d8:	mov	qword ptr [rip + 0x75f9], rax
1000093df:	test	rax, rax
1000093e2:	je	0x100009d9e
1000093e8:	mov	rcx, qword ptr [rbp - 0x100]
1000093ef:	mov	rdx, qword ptr [rip + 0x74fa]
1000093f6:	mov	qword ptr [rax + 8*rdx - 0x8], rcx
1000093fb:	jmp	0x100009402
1000093fd:	call	0x10000ae36 ## symbol stub for: _free
100009402:	xor	eax, eax
100009404:	lea	rdi, [rbp - 0x100]
10000940b:	mov	qword ptr [rdi], rax
10000940e:	lea	rsi, [rbp - 0x198]
100009415:	mov	qword ptr [rsi], rax
100009418:	jmp	0x10000937f
10000941d:	call	0x10000ada6 ## symbol stub for: ___error
100009422:	mov	dword ptr [rax], 0x0
100009428:	mov	rax, qword ptr [rip + 0x2c29] ## literal pool symbol address: _optarg
10000942f:	mov	rdi, qword ptr [rax]
100009432:	xor	esi, esi
100009434:	mov	edx, 0xa
100009439:	call	0x10000afda ## symbol stub for: _strtol
10000943e:	mov	rbx, rax
100009441:	call	0x10000ada6 ## symbol stub for: ___error
100009446:	cmp	dword ptr [rax], 0x0
100009449:	jne	0x100009de0
10000944f:	cmp	rbx, 0x2
100009453:	jl	0x100008ec3
100009459:	inc	rbx
10000945c:	lea	rax, [rip + 0x6f4d]
100009463:	mov	qword ptr [rax], rbx
100009466:	jmp	0x100008ec3
10000946b:	mov	byte ptr [rip + 0x75a6], 0x1
100009472:	jmp	0x100008ec3
100009477:	mov	rax, qword ptr [rip + 0x2bda] ## literal pool symbol address: _optarg
10000947e:	mov	rdi, qword ptr [rax]
100009481:	call	0x10000adca ## symbol stub for: _atoi
100009486:	test	eax, eax
100009488:	mov	ecx, 0x1
10000948d:	cmovne	ecx, eax
100009490:	movsxd	rax, ecx
100009493:	mov	ecx, 0x400
100009498:	cmp	rax, rcx
10000949b:	cmovb	rcx, rax
10000949f:	mov	qword ptr [rip + 0x6f9a], rcx
1000094a6:	jmp	0x100008ec3
1000094ab:	mov	rax, qword ptr [rip + 0x2ba6] ## literal pool symbol address: _optarg
1000094b2:	mov	rdi, qword ptr [rax]
1000094b5:	call	0x10000afbc ## symbol stub for: _strdup
1000094ba:	mov	qword ptr [rbp - 0x60], rax
1000094be:	jmp	0x100008ec3
1000094c3:	mov	rax, qword ptr [rip + 0x2b8e] ## literal pool symbol address: _optarg
1000094ca:	mov	rdi, qword ptr [rax]
1000094cd:	call	0x10000afbc ## symbol stub for: _strdup
1000094d2:	lea	rcx, [rip + 0x7527]
1000094d9:	mov	qword ptr [rcx], rax
1000094dc:	jmp	0x100008ec3
1000094e1:	mov	dword ptr [rip + 0x7595], 0x2
1000094eb:	jmp	0x100008ec3
1000094f0:	mov	dword ptr [rip + 0x7586], 0x3
1000094fa:	jmp	0x100008ec3
1000094ff:	mov	dword ptr [rip + 0x7577], 0x4
100009509:	jmp	0x100008ec3
10000950e:	lea	rax, [rip + 0x74f3]
100009515:	mov	byte ptr [rax], 0x1
100009518:	jmp	0x100008ec3
10000951d:	mov	dword ptr [rip + 0x7559], 0x1
100009527:	jmp	0x100008ec3
10000952c:	mov	rdi, r13
10000952f:	call	0x10000ae00 ## symbol stub for: _ferror
100009534:	test	eax, eax
100009536:	jne	0x100009e06
10000953c:	mov	rdi, r13
10000953f:	mov	rsi, rbx
100009542:	call	0x100006474
100009547:	jmp	0x100009657
10000954c:	lea	rbx, [rip + 0x6e4d]
100009553:	mov	r13, qword ptr [rbx]
100009556:	jmp	0x100009625
10000955b:	lea	rdx, [rbp - 0x100]
100009562:	mov	rdi, rbx
100009565:	mov	rsi, r14
100009568:	xor	ecx, ecx
10000956a:	call	0x10000a192
10000956f:	mov	ebx, eax
100009571:	test	ebx, ebx
100009573:	mov	r12d, dword ptr [rbp - 0x70]
100009577:	lea	r14, [rbp - 0x68]
10000957b:	jns	0x100008ec3
100009581:	jmp	0x100009da3
100009586:	mov	byte ptr [rip + 0x74f8], 0x1
10000958d:	jmp	0x100008ec3
100009592:	mov	al, 0x1
100009594:	mov	byte ptr [rip + 0x7429], al
10000959a:	lea	rdi, [rip + 0x7417]
1000095a1:	mov	byte ptr [rip + 0x74d1], al
1000095a7:	jmp	0x100009645
1000095ac:	lea	ecx, [rax - 0x59]
1000095af:	cmp	ecx, 0x2
1000095b2:	mov	r12d, r14d
1000095b5:	jb	0x100009606
1000095b7:	cmp	eax, 0x54
1000095ba:	lea	r14, [rbp - 0x68]
1000095be:	je	0x100009615
1000095c0:	cmp	eax, 0x62
1000095c3:	je	0x100009625
1000095c5:	jmp	0x10000969a
1000095ca:	mov	al, 0x1
1000095cc:	mov	byte ptr [rip + 0x73f8], al
1000095d2:	jmp	0x100009632
1000095d4:	test	eax, eax
1000095d6:	lea	r14, [rbp - 0x68]
1000095da:	je	0x100009621
1000095dc:	cmp	eax, 0x25
1000095df:	jne	0x10000969a
1000095e5:	imul	r13, qword ptr [rbx]
1000095e9:	shr	r13, 0x2
1000095ed:	movabs	rcx, 0x28f5c28f5c28f5c3
1000095f7:	mov	rax, r13
1000095fa:	mul	rcx
1000095fd:	mov	r13, rdx
100009600:	shr	r13, 0x2
100009604:	jmp	0x100009625
100009606:	xor	r13d, r13d
100009609:	lea	r14, [rbp - 0x68]
10000960d:	shl	r13, 0xa
100009611:	shl	r13, 0xa
100009615:	shl	r13, 0xa
100009619:	shl	r13, 0xa
10000961d:	shl	r13, 0xa
100009621:	shl	r13, 0xa
100009625:	mov	qword ptr [rbx], r13
100009628:	jmp	0x100009657
10000962a:	mov	al, 0x1
10000962c:	mov	byte ptr [rip + 0x7394], al
100009632:	lea	rdi, [rip + 0x737f]
100009639:	mov	byte ptr [rip + 0x7439], al
10000963f:	mov	byte ptr [rip + 0x739b], al
100009645:	mov	byte ptr [rip + 0x7441], al
10000964b:	call	0x1000046db
100009650:	mov	qword ptr [rip + 0x7361], rax
100009657:	mov	r13, qword ptr [rbp - 0x58]
10000965b:	jmp	0x100008ec3
100009660:	call	0x100002b1c
100009665:	mov	al, 0x1
100009667:	mov	byte ptr [rip + 0x7358], al
10000966d:	jmp	0x10000959a
100009672:	mov	rsi, qword ptr [rip + 0x6d67]
100009679:	lea	rdi, [rip + 0x1ffd] ## literal pool for: "%s"
100009680:	xor	eax, eax
100009682:	call	0x10000affe ## symbol stub for: _warn
100009687:	lea	rbx, [rip + 0x6d12]
10000968e:	mov	r13, qword ptr [rbx]
100009691:	mov	r12d, r14d
100009694:	lea	r14, [rbp - 0x68]
100009698:	jmp	0x100009625
10000969a:	mov	rax, qword ptr [rip + 0x29b7] ## literal pool symbol address: _optarg
1000096a1:	mov	rdx, qword ptr [rax]
1000096a4:	lea	rsi, [rip + 0x1fd2] ## literal pool for: "%s"
1000096ab:	mov	edi, 0x16
1000096b0:	xor	eax, eax
1000096b2:	call	0x10000b004 ## symbol stub for: _warnc
1000096b7:	jmp	0x100009553
1000096bc:	xor	eax, eax
1000096be:	mov	qword ptr [rbp - 0x60], rax
1000096c2:	mov	rax, qword ptr [rip + 0x2997] ## literal pool symbol address: _optind
1000096c9:	movsxd	rax, dword ptr [rax]
1000096cc:	sub	r12d, eax
1000096cf:	mov	dword ptr [rbp - 0x6c], r12d
1000096d3:	mov	rcx, qword ptr [rip + 0x72fe]
1000096da:	test	rcx, rcx
1000096dd:	je	0x1000096ec
1000096df:	mov	r12d, dword ptr [rip + 0x720a]
1000096e6:	mov	dword ptr [rbp - 0x6c], r12d
1000096ea:	jmp	0x1000096f7
1000096ec:	lea	rcx, [8*rax]
1000096f4:	add	rcx, r13
1000096f7:	mov	qword ptr [rbp - 0x58], rcx
1000096fb:	mov	dword ptr [rbp - 0x70], r12d
1000096ff:	cmp	byte ptr [rip + 0x737e], 0x0
100009706:	je	0x100009715
100009708:	cmp	byte ptr [rip + 0x7378], 0x0
10000970f:	jne	0x100009da8
100009715:	lea	rax, [rip + 0x72cc]
10000971c:	cmp	qword ptr [rax], 0x0
100009720:	jne	0x10000978f
100009722:	mov	r14d, 0x1
100009728:	lea	r12, [rip + 0x72b9]
10000972f:	mov	qword ptr [r12], r14
100009733:	lea	rbx, [rip + 0x72be]
10000973a:	mov	rdi, qword ptr [rbx]
10000973d:	mov	esi, 0x40
100009742:	call	0x1000078f9
100009747:	mov	qword ptr [rbx], rax
10000974a:	xorps	xmm0, xmm0
10000974d:	movups	xmmword ptr [rax], xmm0
100009750:	movups	xmmword ptr [rax + 0x10], xmm0
100009754:	movups	xmmword ptr [rax + 0x20], xmm0
100009758:	movups	xmmword ptr [rax + 0x30], xmm0
10000975c:	mov	rax, qword ptr [rbx]
10000975f:	mov	qword ptr [rax + 0x18], r14
100009763:	mov	cl, byte ptr [rip + 0x7257]
100009769:	mov	byte ptr [rax + 0x38], cl
10000976c:	mov	byte ptr [rax + 0x39], cl
10000976f:	mov	rcx, qword ptr [rip + 0x7252]
100009776:	mov	qword ptr [rax + 0x10], rcx
10000977a:	movups	xmm0, xmmword ptr [rip + 0x7237]
100009781:	movups	xmmword ptr [rax], xmm0
100009784:	cmp	qword ptr [r12], 0x0
100009789:	je	0x100009854
10000978f:	xor	ebx, ebx
100009791:	lea	r13, [rip + 0x7260]
100009798:	xor	r12d, r12d
10000979b:	mov	r14, qword ptr [r13]
10000979f:	lea	rdi, [r14 + rbx]
1000097a3:	test	r14, r14
1000097a6:	je	0x1000097fc
1000097a8:	cmp	byte ptr [r14 + rbx + 0xd], 0x0
1000097ae:	jne	0x100009834
1000097b4:	cmp	byte ptr [r14 + rbx + 0x11], 0x0
1000097ba:	jne	0x100009834
1000097bc:	cmp	byte ptr [r14 + rbx + 0xe], 0x0
1000097c2:	jne	0x100009834
1000097c4:	cmp	byte ptr [r14 + rbx + 0xb], 0x0
1000097ca:	jne	0x100009834
1000097cc:	cmp	byte ptr [r14 + rbx + 0xf], 0x0
1000097d2:	jne	0x100009834
1000097d4:	cmp	byte ptr [r14 + rbx + 0x10], 0x0
1000097da:	jne	0x100009834
1000097dc:	cmp	byte ptr [r14 + rbx + 0x12], 0x0
1000097e2:	jne	0x100009834
1000097e4:	cmp	byte ptr [r14 + rbx + 0x9], 0x0
1000097ea:	jne	0x100009834
1000097ec:	cmp	byte ptr [r14 + rbx + 0xa], 0x0
1000097f2:	jne	0x100009834
1000097f4:	cmp	byte ptr [r14 + rbx + 0xc], 0x0
1000097fa:	jne	0x100009834
1000097fc:	cmp	byte ptr [r14 + rbx + 0x38], 0x0
100009802:	jne	0x100009834
100009804:	cmp	byte ptr [r14 + rbx + 0x39], 0x0
10000980a:	jne	0x100009834
10000980c:	mov	al, byte ptr [rip + 0x71ae]
100009812:	mov	byte ptr [r14 + rbx + 0x38], al
100009817:	mov	byte ptr [r14 + rbx + 0x39], al
10000981c:	movups	xmm0, xmmword ptr [rip + 0x7195]
100009823:	movups	xmmword ptr [r14 + rbx], xmm0
100009828:	mov	rax, qword ptr [rip + 0x7199]
10000982f:	mov	qword ptr [r14 + rbx + 0x10], rax
100009834:	call	0x1000046db
100009839:	mov	qword ptr [r14 + rbx], rax
10000983d:	inc	r12
100009840:	add	rbx, 0x40
100009844:	lea	rax, [rip + 0x719d]
10000984b:	cmp	r12, qword ptr [rax]
10000984e:	jb	0x10000979b
100009854:	cmp	byte ptr [rip + 0x71bd], 0x0
10000985b:	mov	r12d, dword ptr [rbp - 0x70]
10000985f:	je	0x10000993a
100009865:	lea	rax, [rip + 0x6b34]
10000986c:	mov	rsi, qword ptr [rax]
10000986f:	lea	rdi, [rip + 0x21fc] ## literal pool for: "Memory to be used for sorting: %llu\n"
100009876:	xor	eax, eax
100009878:	call	0x10000aede ## symbol stub for: _printf
10000987d:	mov	esi, dword ptr [rip + 0x6bb5]
100009883:	lea	rdi, [rip + 0x220d] ## literal pool for: "Number of CPUs: %d\n"
10000988a:	xor	eax, eax
10000988c:	call	0x10000aede ## symbol stub for: _printf
100009891:	mov	qword ptr [rip + 0x6ba4], 0x1
10000989c:	mov	edi, 0x1
1000098a1:	xor	esi, esi
1000098a3:	call	0x10000af86 ## symbol stub for: _setlocale
1000098a8:	lea	rdi, [rip + 0x21fc] ## literal pool for: "Using collate rules of %s locale\n"
1000098af:	mov	rsi, rax
1000098b2:	xor	eax, eax
1000098b4:	call	0x10000aede ## symbol stub for: _printf
1000098b9:	lea	rax, [rip + 0x7134]
1000098c0:	cmp	byte ptr [rax], 0x0
1000098c3:	je	0x1000098d1
1000098c5:	lea	rdi, [rip + 0x25a4] ## literal pool for: "Byte sort is used"
1000098cc:	call	0x10000af38 ## symbol stub for: _puts
1000098d1:	cmp	byte ptr [rip + 0x7108], 0x1
1000098d8:	jne	0x10000993a
1000098da:	lea	rax, [rip + 0x6aa7]
1000098e1:	mov	esi, dword ptr [rax]
1000098e3:	lea	rdi, [rip + 0x21e3] ## literal pool for: "Decimal Point: <%lc>\n"
1000098ea:	xor	eax, eax
1000098ec:	call	0x10000aede ## symbol stub for: _printf
1000098f1:	lea	rax, [rip + 0x70f8]
1000098f8:	mov	esi, dword ptr [rax]
1000098fa:	test	esi, esi
1000098fc:	je	0x10000990c
1000098fe:	lea	rdi, [rip + 0x21de] ## literal pool for: "Thousands separator: <%lc>\n"
100009905:	xor	eax, eax
100009907:	call	0x10000aede ## symbol stub for: _printf
10000990c:	lea	rax, [rip + 0x6a7d]
100009913:	mov	esi, dword ptr [rax]
100009915:	lea	rdi, [rip + 0x21e3] ## literal pool for: "Positive sign: <%lc>\n"
10000991c:	xor	eax, eax
10000991e:	call	0x10000aede ## symbol stub for: _printf
100009923:	lea	rax, [rip + 0x6a62]
10000992a:	mov	esi, dword ptr [rax]
10000992c:	lea	rdi, [rip + 0x21e2] ## literal pool for: "Negative sign: <%lc>\n"
100009933:	xor	eax, eax
100009935:	call	0x10000aede ## symbol stub for: _printf
10000993a:	cmp	byte ptr [rip + 0x70a0], 0x1
100009941:	mov	rbx, qword ptr [rbp - 0x58]
100009945:	jne	0x100009a95
10000994b:	mov	rdi, qword ptr [rbp - 0x60]
10000994f:	test	rdi, rdi
100009952:	je	0x100009a07
100009958:	mov	esi, 0x1000000
10000995d:	xor	eax, eax
10000995f:	call	0x10000aec6 ## symbol stub for: _open
100009964:	test	eax, eax
100009966:	js	0x100009de5
10000996c:	mov	ebx, eax
10000996e:	lea	rsi, [rbp - 0x100]
100009975:	mov	edi, eax
100009977:	call	0x10000ae3c ## symbol stub for: _fstat$INODE64
10000997c:	test	eax, eax
10000997e:	jne	0x100009df3
100009984:	movzx	eax, word ptr [rbp - 0xfc]
10000998b:	and	eax, 0xf000
100009990:	cmp	eax, 0x8000
100009995:	je	0x100009a24
10000999b:	movzx	eax, ax
10000999e:	cmp	eax, 0x2000
1000099a3:	jne	0x100009e17
1000099a9:	lea	rdi, [rip + 0x2476] ## literal pool for: "/dev/random"
1000099b0:	lea	rsi, [rbp - 0x198]
1000099b7:	call	0x10000af9e ## symbol stub for: _stat$INODE64
1000099bc:	test	eax, eax
1000099be:	js	0x100009e1c
1000099c4:	mov	eax, dword ptr [rbp - 0x100]
1000099ca:	cmp	eax, dword ptr [rbp - 0x198]
1000099d0:	jne	0x100009df8
1000099d6:	mov	rax, qword ptr [rbp - 0xf8]
1000099dd:	cmp	rax, qword ptr [rbp - 0x190]
1000099e4:	jne	0x100009df8
1000099ea:	lea	rdi, [rbp - 0x50]
1000099ee:	mov	r13d, 0x20
1000099f4:	mov	esi, 0x20
1000099f9:	call	0x10000ae54 ## symbol stub for: _getentropy
1000099fe:	test	eax, eax
100009a00:	jns	0x100009a6c
100009a02:	call	0x10000abb9
100009a07:	lea	rdi, [rbp - 0x50]
100009a0b:	mov	r13d, 0x20
100009a11:	mov	esi, 0x20
100009a16:	call	0x10000ae54 ## symbol stub for: _getentropy
100009a1b:	test	eax, eax
100009a1d:	jns	0x100009a73
100009a1f:	call	0x10000ab55
100009a24:	mov	rdx, qword ptr [rbp - 0xa0]
100009a2b:	cmp	rdx, 0x21
100009a2f:	jge	0x100009e21
100009a35:	test	rdx, rdx
100009a38:	jle	0x100009e39
100009a3e:	xorps	xmm0, xmm0
100009a41:	lea	rsi, [rbp - 0x50]
100009a45:	movaps	xmmword ptr [rsi + 0x10], xmm0
100009a49:	movaps	xmmword ptr [rsi], xmm0
100009a4c:	mov	edi, ebx
100009a4e:	call	0x10000af44 ## symbol stub for: _read
100009a53:	test	rax, rax
100009a56:	js	0x100009e3e
100009a5c:	mov	r13, rax
100009a5f:	cmp	rax, qword ptr [rbp - 0xa0]
100009a66:	jl	0x100009e55
100009a6c:	mov	edi, ebx
100009a6e:	call	0x10000add6 ## symbol stub for: _close
100009a73:	lea	rbx, [rip + 0x6fa2]
100009a7a:	mov	rdi, rbx
100009a7d:	call	0x10000ad94 ## symbol stub for: _CC_MD5_Init
100009a82:	lea	rsi, [rbp - 0x50]
100009a86:	mov	rdi, rbx
100009a89:	mov	edx, r13d
100009a8c:	call	0x10000ad9a ## symbol stub for: _CC_MD5_Update
100009a91:	mov	rbx, qword ptr [rbp - 0x58]
100009a95:	lea	rsi, [rip + 0x1bc8] ## literal pool for: "-"
100009a9c:	mov	rdi, r15
100009a9f:	call	0x10000afaa ## symbol stub for: _strcmp
100009aa4:	test	eax, eax
100009aa6:	je	0x100009b41
100009aac:	test	r12d, r12d
100009aaf:	jle	0x100009b75
100009ab5:	mov	r13d, r12d
100009ab8:	xor	r14d, r14d
100009abb:	xor	eax, eax
100009abd:	mov	qword ptr [rbp - 0x60], rax
100009ac1:	mov	rdi, qword ptr [rbx + 8*r14]
100009ac5:	mov	rsi, r15
100009ac8:	call	0x10000afaa ## symbol stub for: _strcmp
100009acd:	test	eax, eax
100009acf:	jne	0x100009b37
100009ad1:	mov	rdi, r15
100009ad4:	call	0x10000790e
100009ad9:	mov	qword ptr [rbp - 0x60], rax
100009add:	mov	rbx, r15
100009ae0:	mov	rdi, r15
100009ae3:	call	0x10000afc2 ## symbol stub for: _strlen
100009ae8:	lea	rdi, [rax + 0x5]
100009aec:	call	0x1000078d3
100009af1:	mov	r15, rax
100009af4:	mov	rdi, rax
100009af7:	mov	rsi, rbx
100009afa:	call	0x10000afb6 ## symbol stub for: _strcpy
100009aff:	mov	rdi, r15
100009b02:	call	0x10000afc2 ## symbol stub for: _strlen
100009b07:	mov	dword ptr [r15 + rax], 0x706d742e
100009b0f:	mov	byte ptr [r15 + rax + 0x4], 0x0
100009b15:	mov	rdi, rbx
100009b18:	call	0x1000078e8
100009b1d:	mov	rdi, r15
100009b20:	xor	esi, esi
100009b22:	call	0x10000adc4 ## symbol stub for: _access
100009b27:	test	eax, eax
100009b29:	jns	0x100009add
100009b2b:	mov	rdi, r15
100009b2e:	call	0x100005de8
100009b33:	mov	rbx, qword ptr [rbp - 0x58]
100009b37:	inc	r14
100009b3a:	cmp	r14, r13
100009b3d:	jne	0x100009ac1
100009b3f:	jmp	0x100009b47
100009b41:	xor	eax, eax
100009b43:	mov	qword ptr [rbp - 0x60], rax
100009b47:	test	r12d, r12d
100009b4a:	jle	0x100009b6d
100009b4c:	lea	rsi, [rip + 0x1b11] ## literal pool for: "-"
100009b53:	mov	rdi, r15
100009b56:	call	0x10000afaa ## symbol stub for: _strcmp
100009b5b:	test	eax, eax
100009b5d:	mov	r14, qword ptr [rbp - 0x60]
100009b61:	je	0x100009b7c
100009b63:	xor	ebx, ebx
100009b65:	cmp	byte ptr [r15], 0x0
100009b69:	jne	0x100009b89
100009b6b:	jmp	0x100009b7e
100009b6d:	mov	bl, 0x1
100009b6f:	mov	r14, qword ptr [rbp - 0x60]
100009b73:	jmp	0x100009b7e
100009b75:	mov	bl, 0x1
100009b77:	xor	r14d, r14d
100009b7a:	jmp	0x100009b7e
100009b7c:	xor	ebx, ebx
100009b7e:	mov	qword ptr [rip + 0x68b7], 0x1
100009b89:	mov	cl, byte ptr [rip + 0x6ef5]
100009b8f:	mov	al, byte ptr [rip + 0x6ef2]
100009b95:	mov	edx, eax
100009b97:	or	dl, cl
100009b99:	je	0x100009bb4
100009b9b:	test	cl, cl
100009b9d:	je	0x100009bf1
100009b9f:	test	r12d, r12d
100009ba2:	mov	rax, qword ptr [rbp - 0x58]
100009ba6:	je	0x100009cbc
100009bac:	mov	rdi, qword ptr [rax]
100009baf:	jmp	0x100009cc3
100009bb4:	lea	rdi, [rbp - 0x100]
100009bbb:	call	0x10000607d
100009bc0:	lea	rdi, [rbp - 0x198]
100009bc7:	mov	esi, 0x1
100009bcc:	call	0x100005f03
100009bd1:	test	bl, bl
100009bd3:	je	0x100009c30
100009bd5:	lea	rdi, [rip + 0x1a88] ## literal pool for: "-"
100009bdc:	lea	rsi, [rbp - 0x100]
100009be3:	lea	rdx, [rbp - 0x198]
100009bea:	call	0x100006d6e
100009bef:	jmp	0x100009c6f
100009bf1:	test	al, al
100009bf3:	mov	rbx, qword ptr [rbp - 0x58]
100009bf7:	je	0x100009d44
100009bfd:	lea	rdi, [rbp - 0x100]
100009c04:	xor	esi, esi
100009c06:	call	0x100005f03
100009c0b:	test	r12d, r12d
100009c0e:	je	0x100009d12
100009c14:	lea	rdi, [rbp - 0x100]
100009c1b:	mov	esi, r12d
100009c1e:	mov	rdx, rbx
100009c21:	mov	ecx, 0x1
100009c26:	call	0x100005fa2
100009c2b:	jmp	0x100009d2a
100009c30:	mov	qword ptr [rbp - 0x60], r14
100009c34:	inc	r12d
100009c37:	lea	r14, [rbp - 0x100]
100009c3e:	lea	r13, [rbp - 0x198]
100009c45:	mov	rbx, qword ptr [rbp - 0x58]
100009c49:	mov	rdi, qword ptr [rbx]
100009c4c:	mov	rsi, r14
100009c4f:	mov	rdx, r13
100009c52:	call	0x100006d6e
100009c57:	add	rbx, 0x8
100009c5b:	dec	r12d
100009c5e:	cmp	r12d, 0x1
100009c62:	jg	0x100009c49
100009c64:	mov	dword ptr [rbp - 0x6c], 0x0
100009c6b:	mov	r14, qword ptr [rbp - 0x60]
100009c6f:	cmp	qword ptr [rbp - 0x190], 0x0
100009c77:	je	0x100009ccc
100009c79:	cmp	qword ptr [rbp - 0xf0], 0x0
100009c81:	je	0x100009cab
100009c83:	call	0x100005e98
100009c88:	mov	rbx, rax
100009c8b:	lea	rdi, [rbp - 0x100]
100009c92:	mov	rsi, rax
100009c95:	call	0x100006df4
100009c9a:	lea	rdi, [rbp - 0x198]
100009ca1:	mov	rsi, rbx
100009ca4:	xor	edx, edx
100009ca6:	call	0x100005f20
100009cab:	lea	rdi, [rbp - 0x198]
100009cb2:	mov	rsi, r15
100009cb5:	call	0x100006f70
100009cba:	jmp	0x100009cdb
100009cbc:	lea	rdi, [rip + 0x19a1] ## literal pool for: "-"
100009cc3:	call	0x1000064e4
100009cc8:	mov	ebx, eax
100009cca:	jmp	0x100009d46
100009ccc:	lea	rdi, [rbp - 0x100]
100009cd3:	mov	rsi, r15
100009cd6:	call	0x100006df4
100009cdb:	lea	rdi, [rbp - 0x198]
100009ce2:	jmp	0x100009d3f
100009ce4:	lea	rdi, [rip + 0x1e71] ## literal pool for: "sysconf pages"
100009ceb:	call	0x10000aed2 ## symbol stub for: _perror
100009cf0:	mov	r14d, 0x1
100009cf6:	jmp	0x100008c02
100009cfb:	lea	rdi, [rip + 0x1e68] ## literal pool for: "sysconf psize"
100009d02:	call	0x10000aed2 ## symbol stub for: _perror
100009d07:	mov	r12d, 0x1000
100009d0d:	jmp	0x100008c18
100009d12:	lea	rsi, [rip + 0x194b] ## literal pool for: "-"
100009d19:	lea	rdi, [rbp - 0x100]
100009d20:	mov	edx, 0x1
100009d25:	call	0x100005f20
100009d2a:	lea	rbx, [rbp - 0x100]
100009d31:	mov	rdi, rbx
100009d34:	mov	rsi, r15
100009d37:	call	0x100006f70
100009d3c:	mov	rdi, rbx
100009d3f:	call	0x100005ff3
100009d44:	xor	ebx, ebx
100009d46:	test	r14, r14
100009d49:	je	0x100009d6a
100009d4b:	mov	rdi, r14
100009d4e:	call	0x10000aff8 ## symbol stub for: _unlink
100009d53:	mov	rdi, r15
100009d56:	mov	rsi, r14
100009d59:	call	0x10000af62 ## symbol stub for: _rename
100009d5e:	test	eax, eax
100009d60:	js	0x100009db2
100009d62:	mov	rdi, r14
100009d65:	call	0x1000078e8
100009d6a:	mov	rdi, r15
100009d6d:	call	0x1000078e8
100009d72:	mov	rax, qword ptr [rip + 0x2297] ## literal pool symbol address: ___stack_chk_guard
100009d79:	mov	rax, qword ptr [rax]
100009d7c:	cmp	rax, qword ptr [rbp - 0x30]
100009d80:	jne	0x100009dad
100009d82:	mov	eax, ebx
100009d84:	add	rsp, 0x178
100009d8b:	pop	rbx
100009d8c:	pop	r12
100009d8e:	pop	r13
100009d90:	pop	r14
100009d92:	pop	r15
100009d94:	pop	rbp
100009d95:	ret
100009d96:	mov	rdi, rbx
100009d99:	call	0x10000ac57
100009d9e:	call	0x10000ac72
100009da3:	call	0x10000ac1a
100009da8:	call	0x10000abf8
100009dad:	call	0x10000adb8 ## symbol stub for: ___stack_chk_fail
100009db2:	call	0x10000ab6a
100009db7:	mov	edi, 0x1
100009dbc:	call	0x10000a129
100009dc1:	xor	edi, edi
100009dc3:	call	0x10000a129
100009dc8:	lea	rdi, [rip + 0x1c89] ## literal pool for: "2.3-Apple (118)"
100009dcf:	call	0x10000af38 ## symbol stub for: _puts
100009dd4:	xor	edi, edi
100009dd6:	call	0x10000adee ## symbol stub for: _exit
100009ddb:	call	0x10000ac3c
100009de0:	call	0x10000ac82
100009de5:	lea	rsi, [rip + 0x1f83] ## literal pool for: "open: %s"
100009dec:	mov	edi, 0x42
100009df1:	jmp	0x100009e4a
100009df3:	call	0x10000abe3
100009df8:	call	0x10000abce
100009dfd:	lea	rsi, [rip + 0x1879] ## literal pool for: "%s"
100009e04:	jmp	0x100009e0d
100009e06:	lea	rsi, [rip + 0x1f4a] ## literal pool for: "%s: getdelim"
100009e0d:	mov	edi, 0x2
100009e12:	mov	rdx, rbx
100009e15:	jmp	0x100009e4e
100009e17:	call	0x10000ab7a
100009e1c:	call	0x10000aba4
100009e21:	lea	rsi, [rip + 0x1f86] ## literal pool for: "random seed is too large (%jd > %zu)!"
100009e28:	mov	ecx, 0x20
100009e2d:	mov	edi, 0x40
100009e32:	xor	eax, eax
100009e34:	call	0x10000ade8 ## symbol stub for: _errx
100009e39:	call	0x10000ab8f
100009e3e:	lea	rsi, [rip + 0x1fb2] ## literal pool for: "reading random seed file %s"
100009e45:	mov	edi, 0x46
100009e4a:	mov	rdx, qword ptr [rbp - 0x60]
100009e4e:	xor	eax, eax
100009e50:	call	0x10000addc ## symbol stub for: _err
100009e55:	lea	rsi, [rip + 0x1fb7] ## literal pool for: "short read from %s"
100009e5c:	mov	edi, 0x46
100009e61:	mov	rdx, qword ptr [rbp - 0x60]
100009e65:	xor	eax, eax
100009e67:	call	0x10000ade8 ## symbol stub for: _errx
100009e6c:	mov	rdi, rbx
100009e6f:	call	0x10000a108
100009e74:	mov	rdi, r13
100009e77:	call	0x10000a108
100009e7c:	mov	esi, eax
	.byte 0xff #bad opcode
100009e7f:	push	qword ptr [rax]
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009e84:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009e88:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009e8c:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009e90:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009e94:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009e98:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009e9c:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ea0:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ea4:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ea8:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009eac:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009eb0:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009eb4:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009eb8:	cmp	edi, edi
	.byte 0xff #bad opcode
100009ebb:	dec	dword ptr [rbx - 0xf]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ec0:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ec4:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ec8:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ecc:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ed0:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ed4:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ed8:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009edc:	mov	eax, 0x3bfffff1
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xfe #bad opcode
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ee8:	cmp	edi, edi
	.byte 0xff #bad opcode
100009eeb:	dec	dword ptr [rdx]
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ef0:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ef4:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009ef8:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009efc:	cmp	bl, dh
	.byte 0xff #bad opcode
100009eff:	inc	dword ptr [rbx + 8*rsi - 0x1]
100009f03:	push	rdi
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f08:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f0c:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f10:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f14:	cmp	edi, edi
	.byte 0xff #bad opcode
100009f17:	inc	dword ptr [rip + 0x3bfffff4]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f20:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f24:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f28:	cmp	edi, edi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f2c:	cmp	edi, edi
	.byte 0xff #bad opcode
100009f2f:	call	qword ptr [rcx]
100009f31:	hlt
	.byte 0xff #bad opcode
100009f33:	inc	dword ptr [rbp - 0x1]
	.byte 0xff #bad opcode
100009f37:	push	qword ptr [rdi - 0x5e00000c]
100009f3d:	cmc
	.byte 0xff #bad opcode
100009f3f:	dec	dword ptr [rdi + 8*rdi - 0x1]
	.byte 0xff #bad opcode
100009f44:	out	dx, eax
100009f45:	cmc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009f48:	sti
100009f49:	cmc
	.byte 0xff #bad opcode
100009f4b:	jmp	[rdi]
100009f4d:	idiv	bh
100009f4f:	inc	dword ptr [rdi - 0xa]
	.byte 0xff #bad opcode
100009f53:	jmp	qword ptr [rcx + 0x65fffff6]
100009f59:	idiv	bh
100009f5b:	push	qword ptr [rsi + 8*rsi - 0x1]
100009f5f:	inc	dword ptr [rbx - 0x6d00000a]
100009f65:	idiv	bh
100009f67:	jmp	qword ptr [rbp + 0x32fffff6]
100009f6d:	idiv	edi
100009f6f:	push	qword ptr [rcx + 0x32fffff6]
100009f75:	idiv	edi
100009f77:	push	qword ptr [rdx]
100009f79:	idiv	edi
100009f7b:	push	qword ptr [rdx]
100009f7d:	idiv	edi
	.byte 0xff #bad opcode
100009f80:	mov	ecx, 0x32fffff6
100009f85:	idiv	edi
100009f87:	push	qword ptr [rbp + 0x32fffff6]
100009f8d:	idiv	edi
100009f8f:	push	qword ptr [rdx]
100009f91:	idiv	edi
100009f93:	jmp	[rcx + 0x55fffff6]
100009f99:	mov	rbp, rsp
100009f9c:	xor	ecx, ecx
100009f9e:	lea	r9, [rip + 0x15cb]
100009fa5:	xor	r10d, r10d
100009fa8:	xor	edx, edx
100009faa:	xor	r8d, r8d
100009fad:	mov	al, byte ptr [rcx + r9]
100009fb1:	cmp	al, dil
100009fb4:	jne	0x100009fc4
100009fb6:	test	dl, 0x1
100009fb9:	jne	0x100009fe0
100009fbb:	mov	byte ptr [rsi + rcx], 0x1
100009fbf:	mov	r10b, 0x1
100009fc2:	jmp	0x100009fd5
100009fc4:	cmp	byte ptr [rsi + rcx], 0x0
100009fc8:	je	0x100009fd5
100009fca:	test	r10b, 0x1
100009fce:	jne	0x100009fec
100009fd0:	mov	dl, 0x1
100009fd2:	mov	r8d, ecx
100009fd5:	inc	rcx
100009fd8:	cmp	rcx, 0x6
100009fdc:	jne	0x100009fad
100009fde:	pop	rbp
100009fdf:	ret
100009fe0:	movzx	esi, dil
100009fe4:	mov	edi, r8d
100009fe7:	call	0x10000ac97
100009fec:	movzx	eax, al
100009fef:	movzx	esi, dil
100009ff3:	mov	edi, eax
100009ff5:	call	0x10000acc5
100009ffa:	push	rbp
100009ffb:	mov	rbp, rsp
100009ffe:	push	rbx
100009fff:	push	rax
10000a000:	mov	al, 0x1
10000a002:	test	rdi, rdi
10000a005:	je	0x10000a0bc
10000a00b:	mov	rbx, rdi
10000a00e:	xor	eax, eax
10000a010:	cmp	esi, 0x61
10000a013:	jle	0x10000a037
10000a015:	add	esi, -0x62
10000a018:	cmp	esi, 0x10
10000a01b:	ja	0x10000a0bc
10000a021:	lea	rcx, [rip + 0x9c]
10000a028:	movsxd	rdx, dword ptr [rcx + 4*rsi]
10000a02c:	add	rdx, rcx
10000a02f:	jmp	rdx
10000a031:	mov	byte ptr [rbx + 0x8], 0x1
10000a035:	jmp	0x10000a0a8
10000a037:	cmp	esi, 0x4d
10000a03a:	je	0x10000a085
10000a03c:	cmp	esi, 0x52
10000a03f:	je	0x10000a097
10000a041:	cmp	esi, 0x56
10000a044:	jne	0x10000a0bc
10000a046:	mov	byte ptr [rbx + 0x11], 0x1
10000a04a:	jmp	0x10000a0a8
10000a04c:	mov	byte ptr [rbx + 0x9], 0x1
10000a050:	jmp	0x10000a0a8
10000a052:	mov	byte ptr [rbx + 0xa], 0x1
10000a056:	jmp	0x10000a0a8
10000a058:	mov	al, 0x1
10000a05a:	mov	byte ptr [rbx + 0xb], al
10000a05d:	jmp	0x10000a08f
10000a05f:	mov	al, 0x1
10000a061:	mov	byte ptr [rbx + 0x12], al
10000a064:	jmp	0x10000a071
10000a066:	mov	byte ptr [rbx + 0xc], 0x1
10000a06a:	jmp	0x10000a0a8
10000a06c:	mov	al, 0x1
10000a06e:	mov	byte ptr [rbx + 0xe], al
10000a071:	mov	byte ptr [rip + 0x6a01], al
10000a077:	mov	byte ptr [rip + 0x6963], al
10000a07d:	jmp	0x10000a0a8
10000a07f:	mov	byte ptr [rbx + 0xf], 0x1
10000a083:	jmp	0x10000a0a8
10000a085:	call	0x100002b1c
10000a08a:	mov	al, 0x1
10000a08c:	mov	byte ptr [rbx + 0xd], al
10000a08f:	mov	byte ptr [rip + 0x69e3], al
10000a095:	jmp	0x10000a0a8
10000a097:	mov	al, 0x1
10000a099:	mov	byte ptr [rbx + 0x10], al
10000a09c:	mov	byte ptr [rip + 0x69d6], al
10000a0a2:	mov	byte ptr [rip + 0x6939], al
10000a0a8:	mov	byte ptr [rip + 0x69dd], 0x1
10000a0af:	mov	rdi, rbx
10000a0b2:	call	0x1000046db
10000a0b7:	mov	qword ptr [rbx], rax
10000a0ba:	mov	al, 0x1
10000a0bc:	add	rsp, 0x8
10000a0c0:	pop	rbx
10000a0c1:	pop	rbp
10000a0c2:	ret
10000a0c3:	nop
10000a0c4:	insd	dword ptr es:[rdi], dx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0c8:	clc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0cb:	dec	dword ptr [rax - 0x7000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0d3:	dec	dword ptr [rsi - 0x6b000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0db:	call	[rbx - 0x5d000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0e4:	clc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0e8:	clc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0ec:	clc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0f0:	clc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0f3:	jmp	[rax - 0x7000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a0fc:	clc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a100:	clc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000a104:	mov	ebx, 0x55ffffff
10000a109:	mov	rbp, rsp
10000a10c:	mov	rcx, rdi
10000a10f:	mov	rdx, qword ptr [rip + 0x62c2]
10000a116:	lea	rsi, [rip + 0x1c09] ## literal pool for: "%s: %s"
10000a11d:	mov	edi, 0x2
10000a122:	xor	eax, eax
10000a124:	call	0x10000ade8 ## symbol stub for: _errx
10000a129:	push	rbp
10000a12a:	mov	rbp, rsp
10000a12d:	push	r15
10000a12f:	push	r14
10000a131:	push	rbx
10000a132:	push	rax
10000a133:	mov	r14d, edi
10000a136:	test	edi, edi
10000a138:	je	0x10000a143
10000a13a:	mov	rax, qword ptr [rip + 0x1ed7] ## literal pool symbol address: ___stderrp
10000a141:	jmp	0x10000a14a
10000a143:	mov	rax, qword ptr [rip + 0x1ede] ## literal pool symbol address: ___stdoutp
10000a14a:	mov	rbx, qword ptr [rax]
10000a14d:	mov	r15, qword ptr [rip + 0x62cc]
10000a154:	call	0x10000ae6c ## symbol stub for: _getprogname
10000a159:	mov	rdi, rbx
10000a15c:	mov	rsi, r15
10000a15f:	mov	rdx, rax
10000a162:	xor	eax, eax
10000a164:	call	0x10000ae2a ## symbol stub for: _fprintf
10000a169:	test	r14b, r14b
10000a16c:	je	0x10000a178
10000a16e:	mov	edi, 0x2
10000a173:	call	0x10000adee ## symbol stub for: _exit
10000a178:	xor	edi, edi
10000a17a:	call	0x10000adee ## symbol stub for: _exit
10000a17f:	push	rbp
10000a180:	mov	rbp, rsp
10000a183:	call	0x100005e57
10000a188:	mov	edi, 0xffffffff
10000a18d:	call	0x10000adee ## symbol stub for: _exit
10000a192:	push	rbp
10000a193:	mov	rbp, rsp
10000a196:	push	r15
10000a198:	push	r14
10000a19a:	push	r13
10000a19c:	push	r12
10000a19e:	push	rbx
10000a19f:	sub	rsp, 0x88
10000a1a6:	mov	r15d, ecx
10000a1a9:	mov	rbx, rdx
10000a1ac:	mov	r13, rsi
10000a1af:	mov	r12, rdi
10000a1b2:	mov	rax, qword ptr [rip + 0x1e57] ## literal pool symbol address: ___stack_chk_guard
10000a1b9:	mov	rax, qword ptr [rax]
10000a1bc:	mov	qword ptr [rbp - 0x30], rax
10000a1c0:	lea	rsi, [rip + 0x1b66] ## literal pool for: "^([0-9]+)(\\.[0-9]+)?([bdfirMngRhV]+)?$"
10000a1c7:	lea	rdi, [rbp - 0xb0]
10000a1ce:	mov	edx, 0x1
10000a1d3:	call	0x10000af50 ## symbol stub for: _regcomp
10000a1d8:	mov	r14d, 0xffffffff
10000a1de:	test	eax, eax
10000a1e0:	jne	0x10000a403
10000a1e6:	lea	rdi, [rbp - 0xb0]
10000a1ed:	lea	rcx, [rbp - 0x70]
10000a1f1:	mov	edx, 0x4
10000a1f6:	mov	rsi, r12
10000a1f9:	xor	r8d, r8d
10000a1fc:	call	0x10000af56 ## symbol stub for: _regexec
10000a201:	mov	r14d, 0xffffffff
10000a207:	test	eax, eax
10000a209:	jne	0x10000a3f7
10000a20f:	mov	rax, qword ptr [rbp - 0x68]
10000a213:	cmp	rax, qword ptr [rbp - 0x70]
10000a217:	jle	0x10000a3f7
10000a21d:	mov	qword ptr [rbp - 0x90], rbx
10000a224:	mov	dword ptr [rbp - 0x74], r15d
10000a228:	mov	r15, qword ptr [rbp - 0x58]
10000a22c:	sub	r15, qword ptr [rbp - 0x60]
10000a230:	jle	0x10000a3f7
10000a236:	lea	rdi, [r15 + 0x1]
10000a23a:	call	0x1000078d3
10000a23f:	mov	rbx, rax
10000a242:	mov	rsi, qword ptr [rbp - 0x60]
10000a246:	add	rsi, r12
10000a249:	mov	rdi, rax
10000a24c:	mov	rdx, r15
10000a24f:	call	0x10000afc8 ## symbol stub for: _strncpy
10000a254:	mov	byte ptr [rbx + r15], 0x0
10000a259:	call	0x10000ada6 ## symbol stub for: ___error
10000a25e:	mov	dword ptr [rax], 0x0
10000a264:	mov	rdi, rbx
10000a267:	xor	esi, esi
10000a269:	mov	edx, 0xa
10000a26e:	call	0x10000afe6 ## symbol stub for: _strtoul
10000a273:	cmp	byte ptr [rbp - 0x74], 0x0
10000a277:	mov	qword ptr [rbp - 0x80], rbx
10000a27b:	je	0x10000a2b4
10000a27d:	mov	qword ptr [r13 + 0x30], rax
10000a281:	call	0x10000ada6 ## symbol stub for: ___error
10000a286:	cmp	dword ptr [rax], 0x0
10000a289:	jne	0x10000a44e
10000a28f:	cmp	qword ptr [r13 + 0x30], 0x0
10000a294:	je	0x10000a428
10000a29a:	mov	rax, qword ptr [rbp - 0x50]
10000a29e:	mov	r14, qword ptr [rbp - 0x48]
10000a2a2:	cmp	r14, rax
10000a2a5:	jg	0x10000a2de
10000a2a7:	mov	qword ptr [r13 + 0x20], 0x0
10000a2af:	jmp	0x10000a347
10000a2b4:	mov	qword ptr [r13 + 0x28], rax
10000a2b8:	call	0x10000ada6 ## symbol stub for: ___error
10000a2bd:	cmp	dword ptr [rax], 0x0
10000a2c0:	jne	0x10000a453
10000a2c6:	cmp	qword ptr [r13 + 0x28], 0x0
10000a2cb:	je	0x10000a42f
10000a2d1:	mov	rax, qword ptr [rbp - 0x50]
10000a2d5:	mov	r14, qword ptr [rbp - 0x48]
10000a2d9:	cmp	r14, rax
10000a2dc:	jle	0x10000a33f
10000a2de:	sub	r14, rax
10000a2e1:	lea	r15, [r14 - 0x1]
10000a2e5:	mov	rdi, r14
10000a2e8:	call	0x1000078d3
10000a2ed:	mov	rdi, rax
10000a2f0:	mov	rax, qword ptr [rbp - 0x50]
10000a2f4:	lea	rsi, [r12 + rax]
10000a2f8:	inc	rsi
10000a2fb:	mov	rdx, r15
10000a2fe:	mov	r15, rdi
10000a301:	call	0x10000afc8 ## symbol stub for: _strncpy
10000a306:	mov	byte ptr [r15 + r14 - 0x1], 0x0
10000a30c:	call	0x10000ada6 ## symbol stub for: ___error
10000a311:	mov	dword ptr [rax], 0x0
10000a317:	mov	rdi, r15
10000a31a:	xor	esi, esi
10000a31c:	mov	edx, 0xa
10000a321:	call	0x10000afe6 ## symbol stub for: _strtoul
10000a326:	cmp	byte ptr [rbp - 0x74], 0x0
10000a32a:	je	0x10000a34c
10000a32c:	mov	qword ptr [r13 + 0x20], rax
10000a330:	call	0x10000ada6 ## symbol stub for: ___error
10000a335:	cmp	dword ptr [rax], 0x0
10000a338:	je	0x10000a369
10000a33a:	call	0x10000ad04
10000a33f:	mov	qword ptr [r13 + 0x18], 0x1
10000a347:	xor	r15d, r15d
10000a34a:	jmp	0x10000a369
10000a34c:	mov	qword ptr [r13 + 0x18], rax
10000a350:	call	0x10000ada6 ## symbol stub for: ___error
10000a355:	cmp	dword ptr [rax], 0x0
10000a358:	jne	0x10000a458
10000a35e:	cmp	qword ptr [r13 + 0x18], 0x0
10000a363:	je	0x10000a43c
10000a369:	mov	rbx, qword ptr [rbp - 0x40]
10000a36d:	xor	r14d, r14d
10000a370:	cmp	rbx, qword ptr [rbp - 0x38]
10000a374:	jge	0x10000a3c6
10000a376:	mov	qword ptr [rbp - 0x88], r15
10000a37d:	mov	r15d, dword ptr [rbp - 0x74]
10000a381:	movsx	edi, byte ptr [r12 + rbx]
10000a386:	mov	rsi, qword ptr [rbp - 0x90]
10000a38d:	call	0x100009f98
10000a392:	movsx	esi, byte ptr [r12 + rbx]
10000a397:	cmp	esi, 0x62
10000a39a:	jne	0x10000a3a8
10000a39c:	test	r15b, r15b
10000a39f:	je	0x10000a3b6
10000a3a1:	mov	byte ptr [r13 + 0x39], 0x1
10000a3a6:	jmp	0x10000a3bb
10000a3a8:	mov	rdi, r13
10000a3ab:	call	0x100009ffa
10000a3b0:	test	al, al
10000a3b2:	jne	0x10000a3bb
10000a3b4:	jmp	0x10000a3cc
10000a3b6:	mov	byte ptr [r13 + 0x38], 0x1
10000a3bb:	inc	rbx
10000a3be:	cmp	rbx, qword ptr [rbp - 0x38]
10000a3c2:	jl	0x10000a381
10000a3c4:	jmp	0x10000a3d2
10000a3c6:	mov	rbx, qword ptr [rbp - 0x80]
10000a3ca:	jmp	0x10000a3dd
10000a3cc:	mov	r14d, 0xffffffff
10000a3d2:	mov	rbx, qword ptr [rbp - 0x80]
10000a3d6:	mov	r15, qword ptr [rbp - 0x88]
10000a3dd:	test	r15, r15
10000a3e0:	je	0x10000a3ea
10000a3e2:	mov	rdi, r15
10000a3e5:	call	0x1000078e8
10000a3ea:	test	rbx, rbx
10000a3ed:	je	0x10000a3f7
10000a3ef:	mov	rdi, rbx
10000a3f2:	call	0x1000078e8
10000a3f7:	lea	rdi, [rbp - 0xb0]
10000a3fe:	call	0x10000af5c ## symbol stub for: _regfree
10000a403:	mov	rax, qword ptr [rip + 0x1c06] ## literal pool symbol address: ___stack_chk_guard
10000a40a:	mov	rax, qword ptr [rax]
10000a40d:	cmp	rax, qword ptr [rbp - 0x30]
10000a411:	jne	0x10000a449
10000a413:	mov	eax, r14d
10000a416:	add	rsp, 0x88
10000a41d:	pop	rbx
10000a41e:	pop	r12
10000a420:	pop	r13
10000a422:	pop	r14
10000a424:	pop	r15
10000a426:	pop	rbp
10000a427:	ret
10000a428:	call	0x10000ace9
10000a42d:	jmp	0x10000a434
10000a42f:	call	0x10000ad5e
10000a434:	mov	r14d, 0xffffffff
10000a43a:	jmp	0x10000a3ea
10000a43c:	call	0x10000ad19
10000a441:	mov	r14d, 0xffffffff
10000a447:	jmp	0x10000a3dd
10000a449:	call	0x10000adb8 ## symbol stub for: ___stack_chk_fail
10000a44e:	call	0x10000ad49
10000a453:	call	0x10000ad79
10000a458:	call	0x10000ad34
10000a45d:	push	rbp
10000a45e:	mov	rbp, rsp
10000a461:	push	r15
10000a463:	push	r14
10000a465:	push	r13
10000a467:	push	r12
10000a469:	push	rbx
10000a46a:	sub	rsp, 0x28
10000a46e:	cmp	rdi, rsi
10000a471:	je	0x10000a4c4
10000a473:	mov	rbx, rsi
10000a476:	mov	r15, rdi
10000a479:	xor	r13d, r13d
10000a47c:	xor	edx, edx
10000a47e:	call	0x100003658
10000a483:	test	eax, eax
10000a485:	je	0x10000a4f5
10000a487:	mov	r12d, eax
10000a48a:	mov	rax, qword ptr [r15]
10000a48d:	mov	qword ptr [rbp - 0x38], rax
10000a491:	mov	rdi, qword ptr [rbx]
10000a494:	mov	qword ptr [rbp - 0x48], rdi
10000a498:	test	rax, rax
10000a49b:	je	0x10000a4db
10000a49d:	test	rdi, rdi
10000a4a0:	je	0x10000a4ef
10000a4a2:	lea	r9, [r15 + 0x8]
10000a4a6:	lea	r13, [rbx + 0x8]
10000a4aa:	mov	r11, qword ptr [rip + 0x1b57] ## literal pool symbol address: ___mb_cur_max
10000a4b1:	mov	esi, dword ptr [r11]
10000a4b4:	cmp	esi, 0x1
10000a4b7:	jne	0x10000a4c9
10000a4b9:	movzx	edx, byte ptr [r9]
10000a4bd:	movzx	r8d, byte ptr [r13]
10000a4c2:	jmp	0x10000a4d0
10000a4c4:	xor	r13d, r13d
10000a4c7:	jmp	0x10000a4f5
10000a4c9:	mov	edx, dword ptr [r9]
10000a4cc:	mov	r8d, dword ptr [r13]
10000a4d0:	cmp	rax, 0x1
10000a4d4:	jne	0x10000a4e3
10000a4d6:	cmp	edx, 0x2e
10000a4d9:	jne	0x10000a4e3
10000a4db:	mov	r13d, 0xffffffff
10000a4e1:	jmp	0x10000a4f5
10000a4e3:	cmp	rdi, 0x1
10000a4e7:	jne	0x10000a507
10000a4e9:	cmp	r8d, 0x2e
10000a4ed:	jne	0x10000a507
10000a4ef:	mov	r13d, 0x1
10000a4f5:	mov	eax, r13d
10000a4f8:	add	rsp, 0x28
10000a4fc:	pop	rbx
10000a4fd:	pop	r12
10000a4ff:	pop	r13
10000a501:	pop	r14
10000a503:	pop	r15
10000a505:	pop	rbp
10000a506:	ret
10000a507:	cmp	rax, 0x2
10000a50b:	jne	0x10000a52f
10000a50d:	cmp	edx, 0x2e
10000a510:	jne	0x10000a52f
10000a512:	lea	r10, [r9 + 0x1]
10000a516:	lea	rcx, [r15 + 0xc]
10000a51a:	cmp	esi, 0x1
10000a51d:	cmove	rcx, r10
10000a521:	jne	0x10000a528
10000a523:	movzx	ecx, byte ptr [rcx]
10000a526:	jmp	0x10000a52a
10000a528:	mov	ecx, dword ptr [rcx]
10000a52a:	cmp	ecx, 0x2e
10000a52d:	je	0x10000a4db
10000a52f:	cmp	rdi, 0x2
10000a533:	jne	0x10000a551
10000a535:	cmp	r8d, 0x2e
10000a539:	jne	0x10000a551
10000a53b:	lea	rdi, [r13 + 0x1]
10000a53f:	lea	rcx, [rbx + 0xc]
10000a543:	cmp	esi, 0x1
10000a546:	cmove	rcx, rdi
10000a54a:	jne	0x10000a562
10000a54c:	movzx	ecx, byte ptr [rcx]
10000a54f:	jmp	0x10000a564
10000a551:	cmp	edx, 0x2e
10000a554:	jne	0x10000a569
10000a556:	cmp	r8d, 0x2e
10000a55a:	jne	0x10000a4db
10000a560:	jmp	0x10000a569
10000a562:	mov	ecx, dword ptr [rcx]
10000a564:	cmp	ecx, 0x2e
10000a567:	je	0x10000a4ef
10000a569:	cmp	edx, 0x2e
10000a56c:	je	0x10000a578
10000a56e:	cmp	r8d, 0x2e
10000a572:	je	0x10000a4ef
10000a578:	xor	r8d, 0x2e
10000a57c:	xor	edx, 0x2e
10000a57f:	lea	r10, [r9 + 0x1]
10000a583:	lea	r14, [r15 + 0xc]
10000a587:	lea	rcx, [r13 + 0x1]
10000a58b:	mov	qword ptr [rbp - 0x40], rcx
10000a58f:	lea	rcx, [rbx + 0xc]
10000a593:	lea	rdi, [r9 + rax]
10000a597:	mov	qword ptr [rbp - 0x30], rdi
10000a59b:	cmp	esi, 0x1
10000a59e:	cmove	r14, r10
10000a5a2:	cmove	rcx, qword ptr [rbp - 0x40]
10000a5a7:	lea	rsi, [r15 + 4*rax + 0x8]
10000a5ac:	cmove	rsi, qword ptr [rbp - 0x30]
10000a5b1:	or	edx, r8d
10000a5b4:	cmovne	rcx, r13
10000a5b8:	mov	qword ptr [rbp - 0x30], rcx
10000a5bc:	cmovne	r14, r9
10000a5c0:	lea	rdx, [rbp - 0x38]
10000a5c4:	mov	rdi, r14
10000a5c7:	mov	r15, r11
10000a5ca:	call	0x10000a803
10000a5cf:	mov	rax, qword ptr [rbx]
10000a5d2:	add	r13, rax
10000a5d5:	cmp	dword ptr [r15], 0x1
10000a5d9:	lea	rsi, [rbx + 4*rax + 0x8]
10000a5de:	cmove	rsi, r13
10000a5e2:	mov	r13, qword ptr [rbp - 0x30]
10000a5e6:	lea	r15, [rbp - 0x48]
10000a5ea:	mov	rdi, r13
10000a5ed:	mov	rdx, r15
10000a5f0:	call	0x10000a803
10000a5f5:	lea	rax, [rbp - 0x38]
10000a5f9:	mov	rbx, qword ptr [rax]
10000a5fc:	mov	r15, qword ptr [r15]
10000a5ff:	cmp	rbx, r15
10000a602:	jne	0x10000a61a
10000a604:	mov	rdi, r14
10000a607:	mov	rsi, r13
10000a60a:	mov	rdx, rbx
10000a60d:	call	0x100003695
10000a612:	test	eax, eax
10000a614:	je	0x10000a7fb
10000a61a:	mov	rax, qword ptr [rip + 0x19e7] ## literal pool symbol address: ___mb_cur_max
10000a621:	mov	r10d, dword ptr [rax]
10000a624:	lea	rcx, [r14 + rbx]
10000a628:	lea	rdx, [r15 + r13]
10000a62c:	xor	esi, esi
10000a62e:	cmp	r10d, 0x1
10000a632:	setne	sil
10000a636:	lea	r9, [r14 + 4*rbx]
10000a63a:	cmove	r9, rcx
10000a63e:	lea	r8, [r13 + 4*r15]
10000a643:	cmove	r8, rdx
10000a647:	lea	r11, [rsi + 2*rsi]
10000a64b:	inc	r11
10000a64e:	mov	rsi, r13
10000a651:	cmp	rsi, r8
10000a654:	jb	0x10000a65f
10000a656:	cmp	r14, r9
10000a659:	jae	0x10000a7fb
10000a65f:	cmp	r14, r9
10000a662:	jae	0x10000a67b
10000a664:	cmp	r10d, 0x1
10000a668:	jne	0x10000a670
10000a66a:	movzx	ecx, byte ptr [r14]
10000a66e:	jmp	0x10000a673
10000a670:	mov	ecx, dword ptr [r14]
10000a673:	add	ecx, -0x30
10000a676:	cmp	ecx, 0x9
10000a679:	ja	0x10000a6a6
10000a67b:	cmp	rsi, r8
10000a67e:	jae	0x10000a776
10000a684:	cmp	r10d, 0x1
10000a688:	jne	0x10000a691
10000a68a:	mov	dl, byte ptr [rsi]
10000a68c:	movzx	ecx, dl
10000a68f:	jmp	0x10000a695
10000a691:	mov	edx, dword ptr [rsi]
10000a693:	mov	ecx, edx
10000a695:	add	ecx, -0x30
10000a698:	cmp	ecx, 0xa
10000a69b:	jb	0x10000a776
10000a6a1:	cmp	r14, r9
10000a6a4:	jae	0x10000a6bf
10000a6a6:	cmp	r10d, 0x1
10000a6aa:	jne	0x10000a6cc
10000a6ac:	movzx	ebx, byte ptr [r14]
10000a6b0:	xor	edi, edi
10000a6b2:	cmp	rsi, r8
10000a6b5:	jae	0x10000a742
10000a6bb:	mov	dl, byte ptr [rsi]
10000a6bd:	jmp	0x10000a6c7
10000a6bf:	xor	ebx, ebx
10000a6c1:	cmp	r10d, 0x1
10000a6c5:	jne	0x10000a6db
10000a6c7:	movzx	edx, dl
10000a6ca:	jmp	0x10000a6dd
10000a6cc:	mov	ebx, dword ptr [r14]
10000a6cf:	xor	edi, edi
10000a6d1:	mov	edx, 0x0
10000a6d6:	cmp	rsi, r8
10000a6d9:	jae	0x10000a6e0
10000a6db:	mov	edx, dword ptr [rsi]
10000a6dd:	mov	dil, 0x1
10000a6e0:	mov	r13d, ebx
10000a6e3:	sub	r13d, edx
10000a6e6:	je	0x10000a758
10000a6e8:	cmp	ebx, 0x7e
10000a6eb:	je	0x10000a4db
10000a6f1:	cmp	edx, 0x7e
10000a6f4:	je	0x10000a4ef
10000a6fa:	lea	ecx, [rdx - 0x30]
10000a6fd:	cmp	ecx, 0x9
10000a700:	seta	al
10000a703:	test	edx, edx
10000a705:	setne	cl
10000a708:	and	cl, al
10000a70a:	test	ebx, ebx
10000a70c:	je	0x10000a739
10000a70e:	lea	eax, [rbx - 0x30]
10000a711:	cmp	eax, 0x9
10000a714:	jbe	0x10000a739
10000a716:	test	cl, cl
10000a718:	je	0x10000a4ef
10000a71e:	and	ebx, -0x21
10000a721:	add	ebx, -0x41
10000a724:	and	edx, -0x21
10000a727:	add	edx, -0x41
10000a72a:	cmp	ebx, 0x19
10000a72d:	ja	0x10000a746
10000a72f:	cmp	edx, 0x1a
10000a732:	jb	0x10000a74f
10000a734:	jmp	0x10000a4db
10000a739:	movzx	r13d, cl
10000a73d:	neg	r13d
10000a740:	jmp	0x10000a74f
10000a742:	xor	edx, edx
10000a744:	jmp	0x10000a6e0
10000a746:	cmp	edx, 0x1a
10000a749:	jb	0x10000a4ef
10000a74f:	test	r13d, r13d
10000a752:	jne	0x10000a4f5
10000a758:	lea	rax, [r14 + r11]
10000a75c:	cmp	r14, r9
10000a75f:	cmovb	r14, rax
10000a763:	lea	rax, [rsi + r11]
10000a767:	test	dil, dil
10000a76a:	cmovne	rsi, rax
10000a76e:	jmp	0x10000a65f
10000a773:	add	r14, r11
10000a776:	cmp	r10d, 0x1
10000a77a:	jne	0x10000a782
10000a77c:	movzx	ecx, byte ptr [r14]
10000a780:	jmp	0x10000a785
10000a782:	mov	ecx, dword ptr [r14]
10000a785:	cmp	ecx, 0x30
10000a788:	je	0x10000a773
10000a78a:	jmp	0x10000a78f
10000a78c:	add	rsi, r11
10000a78f:	cmp	r10d, 0x1
10000a793:	jne	0x10000a79a
10000a795:	movzx	ecx, byte ptr [rsi]
10000a798:	jmp	0x10000a79c
10000a79a:	mov	ecx, dword ptr [rsi]
10000a79c:	cmp	ecx, 0x30
10000a79f:	je	0x10000a78c
10000a7a1:	xor	r13d, r13d
10000a7a4:	cmp	r10d, 0x1
10000a7a8:	jne	0x10000a7b6
10000a7aa:	movzx	edi, byte ptr [r14]
10000a7ae:	lea	eax, [rdi - 0x30]
10000a7b1:	movzx	edx, byte ptr [rsi]
10000a7b4:	jmp	0x10000a7be
10000a7b6:	mov	edi, dword ptr [r14]
10000a7b9:	lea	eax, [rdi - 0x30]
10000a7bc:	mov	edx, dword ptr [rsi]
10000a7be:	cmp	eax, 0xa
10000a7c1:	jae	0x10000a7e1
10000a7c3:	lea	eax, [rdx - 0x30]
10000a7c6:	cmp	eax, 0xa
10000a7c9:	jae	0x10000a4ef
10000a7cf:	test	r13d, r13d
10000a7d2:	jne	0x10000a7d9
10000a7d4:	sub	edi, edx
10000a7d6:	mov	r13d, edi
10000a7d9:	add	r14, r11
10000a7dc:	add	rsi, r11
10000a7df:	jmp	0x10000a7a4
10000a7e1:	add	edx, -0x30
10000a7e4:	cmp	edx, 0xa
10000a7e7:	jb	0x10000a4db
10000a7ed:	test	r13d, r13d
10000a7f0:	je	0x10000a651
10000a7f6:	jmp	0x10000a4f5
10000a7fb:	mov	r13d, r12d
10000a7fe:	jmp	0x10000a4f5
10000a803:	push	rbp
10000a804:	mov	rbp, rsp
10000a807:	push	r15
10000a809:	push	r14
10000a80b:	push	rbx
10000a80c:	mov	qword ptr [rdx], 0x0
10000a813:	xor	r8d, r8d
10000a816:	cmp	rdi, rsi
10000a819:	jae	0x10000a8c8
10000a81f:	mov	rax, qword ptr [rip + 0x17e2] ## literal pool symbol address: ___mb_cur_max
10000a826:	mov	r10d, dword ptr [rax]
10000a829:	xor	eax, eax
10000a82b:	cmp	r10d, 0x1
10000a82f:	setne	al
10000a832:	lea	r9, [rax + 2*rax]
10000a836:	inc	r9
10000a839:	xor	r14d, r14d
10000a83c:	xor	r11d, r11d
10000a83f:	xor	ecx, ecx
10000a841:	cmp	r10d, 0x1
10000a845:	jne	0x10000a84c
10000a847:	movzx	ebx, byte ptr [rdi]
10000a84a:	jmp	0x10000a84e
10000a84c:	mov	ebx, dword ptr [rdi]
10000a84e:	test	ebx, ebx
10000a850:	je	0x10000a8c0
10000a852:	test	r11b, 0x1
10000a856:	jne	0x10000a871
10000a858:	cmp	ebx, 0x2e
10000a85b:	jne	0x10000a88c
10000a85d:	mov	r11b, 0x1
10000a860:	test	r14b, 0x1
10000a864:	jne	0x10000a8b5
10000a866:	mov	qword ptr [rdx], rcx
10000a869:	mov	r11b, 0x1
10000a86c:	mov	r14b, 0x1
10000a86f:	jmp	0x10000a8b5
10000a871:	mov	eax, ebx
10000a873:	and	eax, -0x21
10000a876:	add	eax, -0x41
10000a879:	xor	r11d, r11d
10000a87c:	cmp	eax, 0x19
10000a87f:	movzx	eax, r14b
10000a883:	mov	r14d, eax
10000a886:	cmova	r14d, r11d
10000a88a:	jmp	0x10000a8ae
10000a88c:	mov	eax, ebx
10000a88e:	and	eax, -0x21
10000a891:	add	eax, -0x41
10000a894:	lea	r15d, [rbx - 0x30]
10000a898:	cmp	eax, 0x19
10000a89b:	movzx	eax, r14b
10000a89f:	mov	r14d, eax
10000a8a2:	cmova	r14d, r8d
10000a8a6:	cmp	r15d, 0x9
10000a8aa:	cmovbe	r14d, eax
10000a8ae:	cmp	ebx, 0x7e
10000a8b1:	cmove	r14d, eax
10000a8b5:	add	rdi, r9
10000a8b8:	inc	rcx
10000a8bb:	cmp	rdi, rsi
10000a8be:	jb	0x10000a841
10000a8c0:	test	r14b, 0x1
10000a8c4:	je	0x10000a8ca
10000a8c6:	jmp	0x10000a8cd
10000a8c8:	xor	ecx, ecx
10000a8ca:	mov	qword ptr [rdx], rcx
10000a8cd:	pop	rbx
10000a8ce:	pop	r14
10000a8d0:	pop	r15
10000a8d2:	pop	rbp
10000a8d3:	ret
10000a8d4:	push	rbp
10000a8d5:	mov	rbp, rsp
10000a8d8:	lea	rsi, [rip + 0xcb3] ## literal pool for: "mbrtowc error"
10000a8df:	push	0x2
10000a8e1:	pop	rdi
10000a8e2:	xor	eax, eax
10000a8e4:	call	0x10000addc ## symbol stub for: _err
10000a8e9:	push	rbp
10000a8ea:	mov	rbp, rsp
10000a8ed:	push	0x2
10000a8ef:	pop	rdi
10000a8f0:	xor	esi, esi
10000a8f2:	xor	eax, eax
10000a8f4:	call	0x10000addc ## symbol stub for: _err
10000a8f9:	push	rbp
10000a8fa:	mov	rbp, rsp
10000a8fd:	push	0x2
10000a8ff:	pop	rdi
10000a900:	xor	esi, esi
10000a902:	xor	eax, eax
10000a904:	call	0x10000addc ## symbol stub for: _err
10000a909:	push	rbp
10000a90a:	mov	rbp, rsp
10000a90d:	push	0x2
10000a90f:	pop	rdi
10000a910:	xor	esi, esi
10000a912:	xor	eax, eax
10000a914:	call	0x10000addc ## symbol stub for: _err
10000a919:	push	rbp
10000a91a:	mov	rbp, rsp
10000a91d:	push	0x2
10000a91f:	pop	rdi
10000a920:	xor	esi, esi
10000a922:	xor	eax, eax
10000a924:	call	0x10000addc ## symbol stub for: _err
10000a929:	push	rbp
10000a92a:	mov	rbp, rsp
10000a92d:	push	0x2
10000a92f:	pop	rdi
10000a930:	xor	esi, esi
10000a932:	xor	eax, eax
10000a934:	call	0x10000addc ## symbol stub for: _err
10000a939:	push	rbp
10000a93a:	mov	rbp, rsp
10000a93d:	push	0x2
10000a93f:	pop	rdi
10000a940:	xor	esi, esi
10000a942:	xor	eax, eax
10000a944:	call	0x10000addc ## symbol stub for: _err
10000a949:	nop
10000a94a:	nop
10000a94b:	push	rbp
10000a94c:	mov	rbp, rsp
10000a94f:	push	0x2
10000a951:	pop	rdi
10000a952:	xor	esi, esi
10000a954:	xor	eax, eax
10000a956:	call	0x10000addc ## symbol stub for: _err
10000a95b:	push	rbp
10000a95c:	mov	rbp, rsp
10000a95f:	push	0x2
10000a961:	pop	rdi
10000a962:	xor	esi, esi
10000a964:	xor	eax, eax
10000a966:	call	0x10000addc ## symbol stub for: _err
10000a96b:	push	rbp
10000a96c:	mov	rbp, rsp
10000a96f:	push	0x2
10000a971:	pop	rdi
10000a972:	xor	esi, esi
10000a974:	xor	eax, eax
10000a976:	call	0x10000addc ## symbol stub for: _err
10000a97b:	push	rbp
10000a97c:	mov	rbp, rsp
10000a97f:	lea	rax, [rip + 0x5a3a]
10000a986:	mov	rdx, qword ptr [rax + 0x38]
10000a98a:	lea	rsi, [rip + 0xcec] ## literal pool for: "%s"
10000a991:	push	0x2
10000a993:	pop	rdi
10000a994:	xor	eax, eax
10000a996:	call	0x10000addc ## symbol stub for: _err
10000a99b:	push	rbp
10000a99c:	mov	rbp, rsp
10000a99f:	push	0x2
10000a9a1:	pop	rdi
10000a9a2:	xor	esi, esi
10000a9a4:	xor	eax, eax
10000a9a6:	call	0x10000addc ## symbol stub for: _err
10000a9ab:	push	rbp
10000a9ac:	mov	rbp, rsp
10000a9af:	push	0x2
10000a9b1:	pop	rdi
10000a9b2:	xor	esi, esi
10000a9b4:	xor	eax, eax
10000a9b6:	call	0x10000addc ## symbol stub for: _err
10000a9bb:	push	rbp
10000a9bc:	mov	rbp, rsp
10000a9bf:	push	0x2
10000a9c1:	pop	rdi
10000a9c2:	xor	esi, esi
10000a9c4:	xor	eax, eax
10000a9c6:	call	0x10000addc ## symbol stub for: _err
10000a9cb:	push	rbp
10000a9cc:	mov	rbp, rsp
10000a9cf:	push	0x2
10000a9d1:	pop	rdi
10000a9d2:	xor	esi, esi
10000a9d4:	xor	eax, eax
10000a9d6:	call	0x10000addc ## symbol stub for: _err
10000a9db:	push	rbp
10000a9dc:	mov	rbp, rsp
10000a9df:	push	0x2
10000a9e1:	pop	rdi
10000a9e2:	xor	esi, esi
10000a9e4:	xor	eax, eax
10000a9e6:	call	0x10000addc ## symbol stub for: _err
10000a9eb:	push	rbp
10000a9ec:	mov	rbp, rsp
10000a9ef:	push	0x2
10000a9f1:	pop	rdi
10000a9f2:	xor	esi, esi
10000a9f4:	xor	eax, eax
10000a9f6:	call	0x10000addc ## symbol stub for: _err
10000a9fb:	push	rbp
10000a9fc:	mov	rbp, rsp
10000a9ff:	push	0x2
10000aa01:	pop	rdi
10000aa02:	xor	esi, esi
10000aa04:	xor	eax, eax
10000aa06:	call	0x10000addc ## symbol stub for: _err
10000aa0b:	push	rbp
10000aa0c:	mov	rbp, rsp
10000aa0f:	push	0x2
10000aa11:	pop	rdi
10000aa12:	xor	esi, esi
10000aa14:	xor	eax, eax
10000aa16:	call	0x10000addc ## symbol stub for: _err
10000aa1b:	push	rbp
10000aa1c:	mov	rbp, rsp
10000aa1f:	lea	rsi, [rip + 0xc5c] ## literal pool for: "File read software error 1"
10000aa26:	push	0x2
10000aa28:	pop	rdi
10000aa29:	xor	eax, eax
10000aa2b:	call	0x10000addc ## symbol stub for: _err
10000aa30:	push	rbp
10000aa31:	mov	rbp, rsp
10000aa34:	push	0x2
10000aa36:	pop	rdi
10000aa37:	xor	esi, esi
10000aa39:	xor	eax, eax
10000aa3b:	call	0x10000addc ## symbol stub for: _err
10000aa40:	push	rbp
10000aa41:	mov	rbp, rsp
10000aa44:	lea	rax, [rip + 0x5975]
10000aa4b:	mov	rdx, qword ptr [rax + 0x50]
10000aa4f:	lea	rsi, [rip + 0xc27] ## literal pool for: "%s"
10000aa56:	push	0x2
10000aa58:	pop	rdi
10000aa59:	xor	eax, eax
10000aa5b:	call	0x10000ade8 ## symbol stub for: _errx
10000aa60:	push	rbp
10000aa61:	mov	rbp, rsp
10000aa64:	lea	rax, [rip + 0x5955]
10000aa6b:	mov	rdx, qword ptr [rax + 0x48]
10000aa6f:	lea	rsi, [rip + 0xc07] ## literal pool for: "%s"
10000aa76:	push	0x2
10000aa78:	pop	rdi
10000aa79:	xor	eax, eax
10000aa7b:	call	0x10000addc ## symbol stub for: _err
10000aa80:	push	rbp
10000aa81:	mov	rbp, rsp
10000aa84:	push	0x2
10000aa86:	pop	rdi
10000aa87:	xor	esi, esi
10000aa89:	xor	eax, eax
10000aa8b:	call	0x10000addc ## symbol stub for: _err
10000aa90:	push	rbp
10000aa91:	mov	rbp, rsp
10000aa94:	call	0x10000aed2 ## symbol stub for: _perror
10000aa99:	lea	rax, [rip + 0x5920]
10000aaa0:	mov	rdx, qword ptr [rax + 0x40]
10000aaa4:	lea	rsi, [rip + 0xbd2] ## literal pool for: "%s"
10000aaab:	push	0x2
10000aaad:	pop	rdi
10000aaae:	xor	eax, eax
10000aab0:	call	0x10000addc ## symbol stub for: _err
10000aab5:	push	rbp
10000aab6:	mov	rbp, rsp
10000aab9:	push	0x2
10000aabb:	pop	rdi
10000aabc:	xor	esi, esi
10000aabe:	xor	eax, eax
10000aac0:	call	0x10000addc ## symbol stub for: _err
10000aac5:	push	rbp
10000aac6:	mov	rbp, rsp
10000aac9:	push	0x2
10000aacb:	pop	rdi
10000aacc:	xor	esi, esi
10000aace:	xor	eax, eax
10000aad0:	call	0x10000addc ## symbol stub for: _err
10000aad5:	push	rbp
10000aad6:	mov	rbp, rsp
10000aad9:	push	0x2
10000aadb:	pop	rdi
10000aadc:	xor	esi, esi
10000aade:	xor	eax, eax
10000aae0:	call	0x10000addc ## symbol stub for: _err
10000aae5:	push	rbp
10000aae6:	mov	rbp, rsp
10000aae9:	push	0x2
10000aaeb:	pop	rdi
10000aaec:	xor	esi, esi
10000aaee:	xor	eax, eax
10000aaf0:	call	0x10000addc ## symbol stub for: _err
10000aaf5:	push	rbp
10000aaf6:	mov	rbp, rsp
10000aaf9:	push	0x2
10000aafb:	pop	rdi
10000aafc:	xor	esi, esi
10000aafe:	xor	eax, eax
10000ab00:	call	0x10000addc ## symbol stub for: _err
10000ab05:	push	rbp
10000ab06:	mov	rbp, rsp
10000ab09:	lea	rsi, [rip + 0xbc4] ## literal pool for: "Radix sort error 3"
10000ab10:	push	0x2
10000ab12:	pop	rdi
10000ab13:	xor	eax, eax
10000ab15:	call	0x10000addc ## symbol stub for: _err
10000ab1a:	nop
10000ab1b:	nop
10000ab1c:	nop
10000ab1d:	push	rbp
10000ab1e:	mov	rbp, rsp
10000ab21:	mov	rdx, qword ptr [rip + 0x58f0]
10000ab28:	lea	rsi, [rip + 0xb4e] ## literal pool for: "%s"
10000ab2f:	push	0x2
10000ab31:	pop	rdi
10000ab32:	xor	eax, eax
10000ab34:	call	0x10000ade8 ## symbol stub for: _errx
10000ab39:	push	rbp
10000ab3a:	mov	rbp, rsp
10000ab3d:	mov	rdx, qword ptr [rip + 0x58d4]
10000ab44:	lea	rsi, [rip + 0xb32] ## literal pool for: "%s"
10000ab4b:	push	0x2
10000ab4d:	pop	rdi
10000ab4e:	xor	eax, eax
10000ab50:	call	0x10000ade8 ## symbol stub for: _errx
10000ab55:	push	rbp
10000ab56:	mov	rbp, rsp
10000ab59:	lea	rsi, [rip + 0x1204] ## literal pool for: "getentropy"
10000ab60:	push	0x46
10000ab62:	pop	rdi
10000ab63:	xor	eax, eax
10000ab65:	call	0x10000addc ## symbol stub for: _err
10000ab6a:	push	rbp
10000ab6b:	mov	rbp, rsp
10000ab6e:	push	0x2
10000ab70:	pop	rdi
10000ab71:	xor	esi, esi
10000ab73:	xor	eax, eax
10000ab75:	call	0x10000addc ## symbol stub for: _err
10000ab7a:	push	rbp
10000ab7b:	mov	rbp, rsp
10000ab7e:	lea	rsi, [rip + 0x11f9] ## literal pool for: "random seed isn't a regular file or /dev/random"
10000ab85:	push	0x40
10000ab87:	pop	rdi
10000ab88:	xor	eax, eax
10000ab8a:	call	0x10000addc ## symbol stub for: _err
10000ab8f:	push	rbp
10000ab90:	mov	rbp, rsp
10000ab93:	lea	rsi, [rip + 0x123a] ## literal pool for: "random seed is too small (0 bytes)"
10000ab9a:	push	0x40
10000ab9c:	pop	rdi
10000ab9d:	xor	eax, eax
10000ab9f:	call	0x10000ade8 ## symbol stub for: _errx
10000aba4:	push	rbp
10000aba5:	mov	rbp, rsp
10000aba8:	lea	rsi, [rip + 0x1283] ## literal pool for: "stat"
10000abaf:	push	0x46
10000abb1:	pop	rdi
10000abb2:	xor	eax, eax
10000abb4:	call	0x10000addc ## symbol stub for: _err
10000abb9:	push	rbp
10000abba:	mov	rbp, rsp
10000abbd:	lea	rsi, [rip + 0x11a0] ## literal pool for: "getentropy"
10000abc4:	push	0x46
10000abc6:	pop	rdi
10000abc7:	xor	eax, eax
10000abc9:	call	0x10000addc ## symbol stub for: _err
10000abce:	push	rbp
10000abcf:	mov	rbp, rsp
10000abd2:	lea	rsi, [rip + 0x125e] ## literal pool for: "random seed is a character device other than /dev/random"
10000abd9:	push	0x40
10000abdb:	pop	rdi
10000abdc:	xor	eax, eax
10000abde:	call	0x10000ade8 ## symbol stub for: _errx
10000abe3:	push	rbp
10000abe4:	mov	rbp, rsp
10000abe7:	lea	rsi, [rip + 0x118a] ## literal pool for: "fstat"
10000abee:	push	0x46
10000abf0:	pop	rdi
10000abf1:	xor	eax, eax
10000abf3:	call	0x10000addc ## symbol stub for: _err
10000abf8:	push	rbp
10000abf9:	mov	rbp, rsp
10000abfc:	mov	r8, qword ptr [rip + 0x57c5]
10000ac03:	lea	rsi, [rip + 0xe5e] ## literal pool for: "%c:%c: %s"
10000ac0a:	push	0x1
10000ac0c:	pop	rdi
10000ac0d:	push	0x6d
10000ac0f:	pop	rdx
10000ac10:	push	0x63
10000ac12:	pop	rcx
10000ac13:	xor	eax, eax
10000ac15:	call	0x10000ade8 ## symbol stub for: _errx
10000ac1a:	push	rbp
10000ac1b:	mov	rbp, rsp
10000ac1e:	mov	rax, qword ptr [rip + 0x1433] ## literal pool symbol address: _optarg
10000ac25:	mov	rcx, qword ptr [rax]
10000ac28:	lea	rdx, [rip + 0xde3] ## literal pool for: "-k %s"
10000ac2f:	push	0x2
10000ac31:	pop	rdi
10000ac32:	push	0x16
10000ac34:	pop	rsi
10000ac35:	xor	eax, eax
10000ac37:	call	0x10000ade2 ## symbol stub for: _errc
10000ac3c:	push	rbp
10000ac3d:	mov	rbp, rsp
10000ac40:	call	0x10000ada6 ## symbol stub for: ___error
10000ac45:	mov	dword ptr [rax], 0x16
10000ac4b:	push	0x2
10000ac4d:	pop	rdi
10000ac4e:	xor	esi, esi
10000ac50:	xor	eax, eax
10000ac52:	call	0x10000addc ## symbol stub for: _err
10000ac57:	push	rbp
10000ac58:	mov	rbp, rsp
10000ac5b:	mov	rcx, rdi
10000ac5e:	lea	rdx, [rip + 0xa18] ## literal pool for: "%s"
10000ac65:	push	0x2
10000ac67:	pop	rdi
10000ac68:	push	0x16
10000ac6a:	pop	rsi
10000ac6b:	xor	eax, eax
10000ac6d:	call	0x10000ade2 ## symbol stub for: _errc
10000ac72:	push	rbp
10000ac73:	mov	rbp, rsp
10000ac76:	push	0x2
10000ac78:	pop	rdi
10000ac79:	xor	esi, esi
10000ac7b:	xor	eax, eax
10000ac7d:	call	0x10000addc ## symbol stub for: _err
10000ac82:	push	rbp
10000ac83:	mov	rbp, rsp
10000ac86:	lea	rsi, [rip + 0xdbe] ## literal pool for: "--batch-size"
10000ac8d:	push	0x2
10000ac8f:	pop	rdi
10000ac90:	xor	eax, eax
10000ac92:	call	0x10000addc ## symbol stub for: _err
10000ac97:	push	rbp
10000ac98:	mov	rbp, rsp
10000ac9b:	movsx	edx, sil
10000ac9f:	movsxd	rax, edi
10000aca2:	lea	rcx, [rip + 0x8c7]
10000aca9:	movsx	ecx, byte ptr [rax + rcx]
10000acad:	mov	r8, qword ptr [rip + 0x5714]
10000acb4:	lea	rsi, [rip + 0xdad] ## literal pool for: "%c:%c: %s"
10000acbb:	push	0x1
10000acbd:	pop	rdi
10000acbe:	xor	eax, eax
10000acc0:	call	0x10000ade8 ## symbol stub for: _errx
10000acc5:	push	rbp
10000acc6:	mov	rbp, rsp
10000acc9:	movsx	edx, sil
10000accd:	movsx	ecx, dil
10000acd1:	mov	r8, qword ptr [rip + 0x56f0]
10000acd8:	lea	rsi, [rip + 0xd89] ## literal pool for: "%c:%c: %s"
10000acdf:	push	0x1
10000ace1:	pop	rdi
10000ace2:	xor	eax, eax
10000ace4:	call	0x10000ade8 ## symbol stub for: _errx
10000ace9:	push	rbp
10000acea:	mov	rbp, rsp
10000aced:	mov	rsi, qword ptr [rip + 0x56f4]
10000acf4:	lea	rdi, [rip + 0x982] ## literal pool for: "%s"
10000acfb:	xor	eax, eax
10000acfd:	call	0x10000affe ## symbol stub for: _warn
10000ad02:	pop	rbp
10000ad03:	ret
10000ad04:	push	rbp
10000ad05:	mov	rbp, rsp
10000ad08:	lea	rsi, [rip + 0x1045] ## literal pool for: "-k"
10000ad0f:	push	0x2
10000ad11:	pop	rdi
10000ad12:	xor	eax, eax
10000ad14:	call	0x10000addc ## symbol stub for: _err
10000ad19:	push	rbp
10000ad1a:	mov	rbp, rsp
10000ad1d:	mov	rsi, qword ptr [rip + 0x56cc]
10000ad24:	lea	rdi, [rip + 0x952] ## literal pool for: "%s"
10000ad2b:	xor	eax, eax
10000ad2d:	call	0x10000affe ## symbol stub for: _warn
10000ad32:	pop	rbp
10000ad33:	ret
10000ad34:	push	rbp
10000ad35:	mov	rbp, rsp
10000ad38:	lea	rsi, [rip + 0x1015] ## literal pool for: "-k"
10000ad3f:	push	0x2
10000ad41:	pop	rdi
10000ad42:	xor	eax, eax
10000ad44:	call	0x10000addc ## symbol stub for: _err
10000ad49:	push	rbp
10000ad4a:	mov	rbp, rsp
10000ad4d:	lea	rsi, [rip + 0x1000] ## literal pool for: "-k"
10000ad54:	push	0x2
10000ad56:	pop	rdi
10000ad57:	xor	eax, eax
10000ad59:	call	0x10000addc ## symbol stub for: _err
10000ad5e:	push	rbp
10000ad5f:	mov	rbp, rsp
10000ad62:	mov	rsi, qword ptr [rip + 0x567f]
10000ad69:	lea	rdi, [rip + 0x90d] ## literal pool for: "%s"
10000ad70:	xor	eax, eax
10000ad72:	call	0x10000affe ## symbol stub for: _warn
10000ad77:	pop	rbp
10000ad78:	ret
10000ad79:	push	rbp
10000ad7a:	mov	rbp, rsp
10000ad7d:	lea	rsi, [rip + 0xfd0] ## literal pool for: "-k"
10000ad84:	push	0x2
10000ad86:	pop	rdi
10000ad87:	xor	eax, eax
10000ad89:	call	0x10000addc ## symbol stub for: _err
