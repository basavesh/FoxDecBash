hexdump_x86_64:
(__TEXT,__text) section
100000b6c:	push	rbp
100000b6d:	mov	rbp, rsp
100000b70:	push	r15
100000b72:	push	r14
100000b74:	push	r13
100000b76:	push	r12
100000b78:	push	rbx
100000b79:	sub	rsp, 0x28
100000b7d:	mov	r14, rdi
100000b80:	mov	rax, qword ptr [rip + 0x3489] ## literal pool symbol address: ___stack_chk_guard
100000b87:	mov	rax, qword ptr [rax]
100000b8a:	mov	qword ptr [rbp - 0x30], rax
100000b8e:	mov	eax, dword ptr [rdi + 0x28]
100000b91:	test	eax, eax
100000b93:	jle	0x100000bda
100000b95:	dec	eax
100000b97:	mov	dword ptr [r14 + 0x28], eax
100000b9b:	lea	rbx, [rip + 0x2dfe] ## literal pool for: "**"
100000ba2:	mov	rax, qword ptr [r14 + 0x10]
100000ba6:	mov	byte ptr [rax], 0x73
100000ba9:	mov	rdi, qword ptr [r14 + 0x18]
100000bad:	mov	rsi, rbx
100000bb0:	xor	eax, eax
100000bb2:	call	0x10000354c ## symbol stub for: _printf
100000bb7:	mov	rax, qword ptr [rip + 0x3452] ## literal pool symbol address: ___stack_chk_guard
100000bbe:	mov	rax, qword ptr [rax]
100000bc1:	cmp	rax, qword ptr [rbp - 0x30]
100000bc5:	jne	0x100000db4
100000bcb:	add	rsp, 0x28
100000bcf:	pop	rbx
100000bd0:	pop	r12
100000bd2:	pop	r13
100000bd4:	pop	r14
100000bd6:	pop	r15
100000bd8:	pop	rbp
100000bd9:	ret
100000bda:	mov	rbx, rdx
100000bdd:	mov	r15, rsi
100000be0:	movzx	edi, byte ptr [rsi]
100000be3:	cmp	edi, 0xe
100000be6:	jae	0x100000bf6
100000be8:	mov	eax, 0x3f81
100000bed:	bt	eax, edi
100000bf0:	jb	0x100000c79
100000bf6:	lea	r12, [rip + 0x75fb]
100000bfd:	cmp	dword ptr [r12], 0x0
100000c02:	je	0x100000c72
100000c04:	mov	rax, qword ptr [rip + 0x33fd] ## literal pool symbol address: ___mb_cur_max
100000c0b:	cmp	dword ptr [rax], 0x2
100000c0e:	jl	0x100000c72
100000c10:	lea	r12, [r14 + 0x30]
100000c14:	xor	eax, eax
100000c16:	mov	qword ptr [rbp - 0x48], rax
100000c1a:	lea	r13, [rbp - 0x4e]
100000c1e:	lea	rdi, [rbp - 0x40]
100000c22:	mov	rsi, r15
100000c25:	mov	rdx, rbx
100000c28:	mov	rcx, r12
100000c2b:	call	0x100003546 ## symbol stub for: _mbrtowc
100000c30:	cmp	rax, -0x1
100000c34:	je	0x100000d4c
100000c3a:	test	rax, rax
100000c3d:	je	0x100000c8d
100000c3f:	cmp	r15, r13
100000c42:	jne	0x100000c4e
100000c44:	cmp	rax, -0x2
100000c48:	je	0x100000d49
100000c4e:	cmp	rax, -0x2
100000c52:	jne	0x100000c92
100000c54:	mov	rax, qword ptr [rip + 0x33ad] ## literal pool symbol address: ___mb_cur_max
100000c5b:	movsxd	rsi, dword ptr [rax]
100000c5e:	mov	rdi, r13
100000c61:	call	0x10000173e
100000c66:	mov	qword ptr [rbp - 0x48], rbx
100000c6a:	mov	rbx, rax
100000c6d:	mov	r15, r13
100000c70:	jmp	0x100000c1e
100000c72:	mov	dword ptr [rbp - 0x40], edi
100000c75:	xor	ebx, ebx
100000c77:	jmp	0x100000ca5
100000c79:	movsx	rax, dil
100000c7d:	lea	rcx, [rip + 0x34bc]
100000c84:	mov	rbx, qword ptr [rcx + 8*rax]
100000c88:	jmp	0x100000ba2
100000c8d:	mov	eax, 0x1
100000c92:	mov	rcx, qword ptr [rbp - 0x48]
100000c96:	lea	ebx, [rax + rcx]
100000c99:	dec	ebx
100000c9b:	mov	edi, dword ptr [rbp - 0x40]
100000c9e:	lea	r12, [rip + 0x7553]
100000ca5:	cmp	edi, 0x7f
100000ca8:	ja	0x100000cbe
100000caa:	mov	ecx, edi
100000cac:	mov	rdx, qword ptr [rip + 0x334d] ## literal pool symbol address: __DefaultRuneLocale
100000cb3:	mov	eax, 0x40000
100000cb8:	and	eax, dword ptr [rdx + 4*rcx + 0x3c]
100000cbc:	jmp	0x100000cc8
100000cbe:	mov	esi, 0x40000
100000cc3:	call	0x10000349e ## symbol stub for: ___maskrune
100000cc8:	test	eax, eax
100000cca:	je	0x100000d85
100000cd0:	cmp	dword ptr [r12], 0x0
100000cd5:	mov	rax, qword ptr [r14 + 0x10]
100000cd9:	je	0x100000d33
100000cdb:	mov	byte ptr [rax], 0x43
100000cde:	mov	rdi, qword ptr [r14 + 0x18]
100000ce2:	lea	rsi, [rip + 0x2cd2] ## literal pool for: "%3C"
100000ce9:	call	0x10000356a ## symbol stub for: _strcmp
100000cee:	test	eax, eax
100000cf0:	jne	0x100000daa
100000cf6:	mov	edi, dword ptr [rbp - 0x40]
100000cf9:	call	0x1000035a0 ## symbol stub for: _wcwidth
100000cfe:	test	eax, eax
100000d00:	js	0x100000daf
100000d06:	mov	esi, 0x3
100000d0b:	xor	ecx, ecx
100000d0d:	sub	esi, eax
100000d0f:	cmovs	esi, ecx
100000d12:	mov	ecx, dword ptr [rbp - 0x40]
100000d15:	lea	rdi, [rip + 0x2cd8] ## literal pool for: "%*s%C"
100000d1c:	lea	rdx, [rip + 0x2cd7] ## literal pool for: ""
100000d23:	xor	eax, eax
100000d25:	call	0x10000354c ## symbol stub for: _printf
100000d2a:	mov	dword ptr [r14 + 0x28], ebx
100000d2e:	jmp	0x100000bb7
100000d33:	mov	byte ptr [rax], 0x63
100000d36:	mov	rdi, qword ptr [r14 + 0x18]
100000d3a:	mov	esi, dword ptr [rbp - 0x40]
100000d3d:	xor	eax, eax
100000d3f:	call	0x10000354c ## symbol stub for: _printf
100000d44:	jmp	0x100000bb7
100000d49:	mov	r15, r13
100000d4c:	xorps	xmm0, xmm0
100000d4f:	movups	xmmword ptr [r12 + 0x70], xmm0
100000d55:	movups	xmmword ptr [r12 + 0x60], xmm0
100000d5b:	movups	xmmword ptr [r12 + 0x50], xmm0
100000d61:	movups	xmmword ptr [r12 + 0x40], xmm0
100000d67:	movups	xmmword ptr [r12 + 0x30], xmm0
100000d6d:	movups	xmmword ptr [r12 + 0x20], xmm0
100000d73:	movups	xmmword ptr [r12 + 0x10], xmm0
100000d79:	movups	xmmword ptr [r12], xmm0
100000d7e:	movzx	eax, byte ptr [r15]
100000d82:	mov	dword ptr [rbp - 0x40], eax
100000d85:	lea	rbx, [rbp - 0x3a]
100000d89:	movzx	r8d, byte ptr [r15]
100000d8d:	lea	rcx, [rip + 0x2c67] ## literal pool for: "%03o"
100000d94:	mov	edx, 0xa
100000d99:	mov	rdi, rbx
100000d9c:	xor	esi, esi
100000d9e:	xor	eax, eax
100000da0:	call	0x1000034a4 ## symbol stub for: ___sprintf_chk
100000da5:	jmp	0x100000ba2
100000daa:	call	0x100003326
100000daf:	call	0x100003303
100000db4:	call	0x1000034aa ## symbol stub for: ___stack_chk_fail
100000db9:	push	rbp
100000dba:	mov	rbp, rsp
100000dbd:	push	r14
100000dbf:	push	rbx
100000dc0:	mov	r14, rsi
100000dc3:	mov	rbx, rdi
100000dc6:	movzx	edi, byte ptr [rsi]
100000dc9:	cmp	rdi, 0x1f
100000dcd:	ja	0x100000df6
100000dcf:	mov	rax, qword ptr [rbx + 0x10]
100000dd3:	mov	byte ptr [rax], 0x73
100000dd6:	lea	rax, [rip + 0x741b]
100000ddd:	cmp	dword ptr [rax], 0x0
100000de0:	mov	al, byte ptr [r14]
100000de3:	mov	rdi, qword ptr [rbx + 0x18]
100000de7:	je	0x100000e10
100000de9:	cmp	al, 0xa
100000deb:	jne	0x100000e10
100000ded:	lea	rsi, [rip + 0x2c7f] ## literal pool for: "nl"
100000df4:	jmp	0x100000e44
100000df6:	cmp	dil, 0x7f
100000dfa:	jne	0x100000e20
100000dfc:	mov	rax, qword ptr [rbx + 0x10]
100000e00:	mov	byte ptr [rax], 0x73
100000e03:	mov	rdi, qword ptr [rbx + 0x18]
100000e07:	lea	rsi, [rip + 0x2c68] ## literal pool for: "del"
100000e0e:	jmp	0x100000e44
100000e10:	movzx	eax, al
100000e13:	lea	rcx, [rip + 0x3226]
100000e1a:	mov	rsi, qword ptr [rcx + 8*rax]
100000e1e:	jmp	0x100000e44
100000e20:	cmp	dil, 0x20
100000e24:	jne	0x100000e4f
100000e26:	lea	rax, [rip + 0x73cb]
100000e2d:	cmp	dword ptr [rax], 0x0
100000e30:	je	0x100000e4f
100000e32:	mov	rax, qword ptr [rbx + 0x10]
100000e36:	mov	byte ptr [rax], 0x73
100000e39:	mov	rdi, qword ptr [rbx + 0x18]
100000e3d:	lea	rsi, [rip + 0x2c36] ## literal pool for: " sp"
100000e44:	xor	eax, eax
100000e46:	pop	rbx
100000e47:	pop	r14
100000e49:	pop	rbp
100000e4a:	jmp	0x10000354c ## symbol stub for: _printf
100000e4f:	test	dil, dil
100000e52:	js	0x100000e66
100000e54:	mov	rcx, qword ptr [rip + 0x31a5] ## literal pool symbol address: __DefaultRuneLocale
100000e5b:	mov	eax, 0x40000
100000e60:	and	eax, dword ptr [rcx + 4*rdi + 0x3c]
100000e64:	jmp	0x100000e70
100000e66:	mov	esi, 0x40000
100000e6b:	call	0x10000349e ## symbol stub for: ___maskrune
100000e70:	mov	rcx, qword ptr [rbx + 0x10]
100000e74:	test	eax, eax
100000e76:	je	0x100000e7d
100000e78:	mov	byte ptr [rcx], 0x63
100000e7b:	jmp	0x100000e80
100000e7d:	mov	byte ptr [rcx], 0x78
100000e80:	mov	rdi, qword ptr [rbx + 0x18]
100000e84:	movzx	esi, byte ptr [r14]
100000e88:	xor	eax, eax
100000e8a:	pop	rbx
100000e8b:	pop	r14
100000e8d:	pop	rbp
100000e8e:	jmp	0x10000354c ## symbol stub for: _printf
100000e93:	nop
100000e94:	push	rbp
100000e95:	mov	rbp, rsp
100000e98:	push	r15
100000e9a:	push	r14
100000e9c:	push	r13
100000e9e:	push	r12
100000ea0:	push	rbx
100000ea1:	sub	rsp, 0x38
100000ea5:	call	0x1000012e8
100000eaa:	mov	qword ptr [rbp - 0x38], rax
100000eae:	test	rax, rax
100000eb1:	je	0x100001209
100000eb7:	lea	r14, [rip + 0x3ca]
100000ebe:	xor	r15d, r15d
100000ec1:	lea	rax, [rip + 0x7318]
100000ec8:	mov	rax, qword ptr [rax]
100000ecb:	test	rax, rax
100000ece:	je	0x1000011f7
100000ed4:	mov	rcx, qword ptr [rip + 0x72bd]
100000edb:	mov	qword ptr [rbp - 0x40], rcx
100000edf:	mov	rcx, qword ptr [rax + 0x8]
100000ee3:	test	rcx, rcx
100000ee6:	mov	qword ptr [rbp - 0x48], rax
100000eea:	je	0x1000011dc
100000ef0:	mov	rax, qword ptr [rbp - 0x40]
100000ef4:	mov	r13, qword ptr [rbp - 0x38]
100000ef8:	test	byte ptr [rcx + 0x10], 0x1
100000efc:	jne	0x1000011dc
100000f02:	mov	r12d, dword ptr [rcx + 0x14]
100000f06:	test	r12d, r12d
100000f09:	je	0x1000011d0
100000f0f:	mov	qword ptr [rbp - 0x50], rcx
100000f13:	mov	rbx, qword ptr [rcx + 0x8]
100000f17:	test	rbx, rbx
100000f1a:	je	0x1000011c3
100000f20:	mov	rcx, qword ptr [rip + 0x7279]
100000f27:	test	rcx, rcx
100000f2a:	je	0x100000f44
100000f2c:	cmp	rax, rcx
100000f2f:	jl	0x100000f44
100000f31:	movzx	eax, word ptr [rbx + 0x8]
100000f35:	test	eax, 0x402
100000f3a:	jne	0x100000f44
100000f3c:	mov	rdi, rbx
100000f3f:	call	0x1000015b3
100000f44:	cmp	r12d, 0x1
100000f48:	jne	0x100000f59
100000f4a:	mov	rax, qword ptr [rbx + 0x20]
100000f4e:	test	rax, rax
100000f51:	je	0x100000f59
100000f53:	mov	r15b, byte ptr [rax]
100000f56:	mov	byte ptr [rax], 0x0
100000f59:	mov	eax, dword ptr [rbx + 0x8]
100000f5c:	cmp	eax, 0x3f
100000f5f:	jg	0x100000f82
100000f61:	lea	ecx, [rax - 0x1]
100000f64:	cmp	ecx, 0x7
100000f67:	ja	0x100000fba
100000f69:	movsxd	rax, dword ptr [r14 + 4*rcx]
100000f6d:	add	rax, r14
100000f70:	jmp	rax
100000f72:	mov	rdi, qword ptr [rbx + 0x18]
100000f76:	mov	rsi, qword ptr [rip + 0x721b]
100000f7d:	jmp	0x10000117c
100000f82:	cmp	eax, 0xff
100000f87:	jle	0x100000ff8
100000f89:	cmp	eax, 0x100
100000f8e:	je	0x100001059
100000f94:	cmp	eax, 0x200
100000f99:	je	0x100001069
100000f9f:	cmp	eax, 0x400
100000fa4:	jne	0x100001183
100000faa:	mov	rsi, qword ptr [rbx + 0x18]
100000fae:	lea	rdi, [rip + 0x2ac9] ## literal pool for: "%s"
100000fb5:	jmp	0x10000117c
100000fba:	cmp	eax, 0x10
100000fbd:	je	0x1000010bf
100000fc3:	cmp	eax, 0x20
100000fc6:	jne	0x100001183
100000fcc:	mov	eax, dword ptr [rbx + 0xc]
100000fcf:	dec	eax
100000fd1:	cmp	eax, 0x7
100000fd4:	ja	0x100001183
100000fda:	lea	rcx, [rip + 0x2e7]
100000fe1:	movsxd	rax, dword ptr [rcx + 4*rax]
100000fe5:	add	rax, rcx
100000fe8:	jmp	rax
100000fea:	mov	rdi, qword ptr [rbx + 0x18]
100000fee:	movsx	rsi, byte ptr [r13]
100000ff3:	jmp	0x10000117c
100000ff8:	cmp	eax, 0x40
100000ffb:	je	0x100001095
100001001:	cmp	eax, 0x80
100001006:	jne	0x100001183
10000100c:	mov	rdi, qword ptr [rbx + 0x18]
100001010:	mov	rsi, r13
100001013:	jmp	0x10000117c
100001018:	mov	rdi, qword ptr [rbx + 0x18]
10000101c:	lea	rsi, [rip + 0x29d7] ## literal pool for: ""
100001023:	jmp	0x10000117c
100001028:	mov	rcx, qword ptr [rip + 0x7171]
10000102f:	test	rcx, rcx
100001032:	je	0x1000010e4
100001038:	sub	rcx, qword ptr [rip + 0x7159]
10000103f:	jmp	0x1000010fd
100001044:	mov	rdi, qword ptr [rbx + 0x18]
100001048:	movzx	esi, byte ptr [r13]
10000104d:	xor	eax, eax
10000104f:	call	0x10000354c ## symbol stub for: _printf
100001054:	jmp	0x100001183
100001059:	mov	rdi, rbx
10000105c:	mov	rsi, r13
10000105f:	call	0x100000db9
100001064:	jmp	0x100001183
100001069:	mov	eax, dword ptr [rbx + 0xc]
10000106c:	dec	eax
10000106e:	cmp	eax, 0x7
100001071:	ja	0x100001183
100001077:	lea	rcx, [rip + 0x22a]
10000107e:	movsxd	rax, dword ptr [rcx + 4*rax]
100001082:	add	rax, rcx
100001085:	jmp	rax
100001087:	mov	rdi, qword ptr [rbx + 0x18]
10000108b:	movzx	esi, byte ptr [r13]
100001090:	jmp	0x10000117c
100001095:	mov	dword ptr [rbp - 0x2c], r15d
100001099:	mov	r15, r14
10000109c:	mov	r14, qword ptr [rbx + 0x18]
1000010a0:	movzx	eax, byte ptr [r13]
1000010a5:	test	al, al
1000010a7:	js	0x10000110d
1000010a9:	mov	rcx, qword ptr [rip + 0x2f50] ## literal pool symbol address: __DefaultRuneLocale
1000010b0:	test	byte ptr [rcx + 4*rax + 0x3e], 0x4
1000010b5:	mov	ecx, 0x2e
1000010ba:	cmove	eax, ecx
1000010bd:	jmp	0x10000111e
1000010bf:	mov	eax, dword ptr [rbx + 0xc]
1000010c2:	cmp	eax, 0x10
1000010c5:	je	0x100001133
1000010c7:	cmp	eax, 0x8
1000010ca:	je	0x100001147
1000010cc:	cmp	eax, 0x4
1000010cf:	jne	0x100001183
1000010d5:	mov	rdi, qword ptr [rbx + 0x18]
1000010d9:	xorps	xmm0, xmm0
1000010dc:	cvtss2sd	xmm0, dword ptr [r13]
1000010e2:	jmp	0x100001151
1000010e4:	lea	rax, [rip + 0x70ed]
1000010eb:	movsxd	rcx, dword ptr [rax]
1000010ee:	mov	rax, qword ptr [rip + 0x70a3]
1000010f5:	cqo
1000010f7:	idiv	rcx
1000010fa:	sub	rcx, rdx
1000010fd:	mov	rdi, rbx
100001100:	mov	rsi, r13
100001103:	mov	rdx, rcx
100001106:	call	0x100000b6c
10000110b:	jmp	0x100001183
10000110d:	mov	esi, 0x40000
100001112:	mov	edi, eax
100001114:	call	0x10000349e ## symbol stub for: ___maskrune
100001119:	mov	eax, 0x2e
10000111e:	mov	rdi, r14
100001121:	mov	esi, eax
100001123:	xor	eax, eax
100001125:	call	0x10000354c ## symbol stub for: _printf
10000112a:	mov	r14, r15
10000112d:	mov	r15d, dword ptr [rbp - 0x2c]
100001131:	jmp	0x100001183
100001133:	fld	tbyte ptr [r13]
100001137:	mov	rdi, qword ptr [rbx + 0x18]
10000113b:	fstp	tbyte ptr [rsp]
10000113e:	xor	eax, eax
100001140:	call	0x10000354c ## symbol stub for: _printf
100001145:	jmp	0x100001183
100001147:	movsd	xmm0, qword ptr [r13]
10000114d:	mov	rdi, qword ptr [rbx + 0x18]
100001151:	mov	al, 0x1
100001153:	call	0x10000354c ## symbol stub for: _printf
100001158:	jmp	0x100001183
10000115a:	movzx	esi, word ptr [r13]
10000115f:	jmp	0x100001178
100001161:	mov	esi, dword ptr [r13]
100001165:	jmp	0x100001178
100001167:	mov	rsi, qword ptr [r13]
10000116b:	jmp	0x100001178
10000116d:	movsx	rsi, word ptr [r13]
100001172:	jmp	0x100001178
100001174:	movsxd	rsi, dword ptr [r13]
100001178:	mov	rdi, qword ptr [rbx + 0x18]
10000117c:	xor	eax, eax
10000117e:	call	0x10000354c ## symbol stub for: _printf
100001183:	cmp	r12d, 0x1
100001187:	jne	0x100001195
100001189:	mov	rax, qword ptr [rbx + 0x20]
10000118d:	test	rax, rax
100001190:	je	0x100001195
100001192:	mov	byte ptr [rax], r15b
100001195:	movsxd	rcx, dword ptr [rbx + 0xc]
100001199:	mov	rax, qword ptr [rip + 0x6ff8]
1000011a0:	add	rax, rcx
1000011a3:	mov	qword ptr [rip + 0x6fee], rax
1000011aa:	add	r13, rcx
1000011ad:	mov	rbx, qword ptr [rbx]
1000011b0:	jmp	0x100000f17
1000011b5:	movsx	esi, byte ptr [r13]
1000011ba:	mov	rdi, qword ptr [rbx + 0x18]
1000011be:	jmp	0x10000104d
1000011c3:	dec	r12d
1000011c6:	mov	rcx, qword ptr [rbp - 0x50]
1000011ca:	jne	0x100000f13
1000011d0:	mov	rcx, qword ptr [rcx]
1000011d3:	test	rcx, rcx
1000011d6:	jne	0x100000ef8
1000011dc:	mov	rax, qword ptr [rbp - 0x48]
1000011e0:	mov	rax, qword ptr [rax]
1000011e3:	mov	rcx, qword ptr [rbp - 0x40]
1000011e7:	mov	qword ptr [rip + 0x6faa], rcx
1000011ee:	test	rax, rax
1000011f1:	jne	0x100000edf
1000011f7:	call	0x1000012e8
1000011fc:	mov	qword ptr [rbp - 0x38], rax
100001200:	test	rax, rax
100001203:	jne	0x100000ec1
100001209:	lea	rax, [rip + 0x6ff0]
100001210:	mov	rax, qword ptr [rax]
100001213:	test	rax, rax
100001216:	je	0x100001277
100001218:	cmp	qword ptr [rip + 0x6f80], 0x0
100001220:	jne	0x100001235
100001222:	mov	rcx, qword ptr [rip + 0x6f6f]
100001229:	test	rcx, rcx
10000122c:	je	0x100001277
10000122e:	mov	qword ptr [rip + 0x6f6b], rcx
100001235:	mov	rbx, qword ptr [rax + 0x8]
100001239:	test	rbx, rbx
10000123c:	je	0x100001277
10000123e:	lea	r14, [rip + 0x2839] ## literal pool for: "%s"
100001245:	mov	eax, dword ptr [rbx + 0x8]
100001248:	cmp	eax, 0x400
10000124d:	je	0x100001261
10000124f:	cmp	eax, 0x1
100001252:	jne	0x10000126f
100001254:	mov	rdi, qword ptr [rbx + 0x18]
100001258:	mov	rsi, qword ptr [rip + 0x6f41]
10000125f:	jmp	0x100001268
100001261:	mov	rsi, qword ptr [rbx + 0x18]
100001265:	mov	rdi, r14
100001268:	xor	eax, eax
10000126a:	call	0x10000354c ## symbol stub for: _printf
10000126f:	mov	rbx, qword ptr [rbx]
100001272:	test	rbx, rbx
100001275:	jne	0x100001245
100001277:	add	rsp, 0x38
10000127b:	pop	rbx
10000127c:	pop	r12
10000127e:	pop	r13
100001280:	pop	r14
100001282:	pop	r15
100001284:	pop	rbp
100001285:	ret
100001286:	nop
	.byte 0xea #bad opcode
100001289:	cld
	.byte 0xff #bad opcode
10000128b:	call	qword ptr [rax - 0x4000003]
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100001293:	jmp	qword ptr [rax - 0x4000003]
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000129c:	sti
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000012a0:	sti
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000012a4:	mov	esp, 0xdffffffd
1000012a9:	std
	.byte 0xff #bad opcode
1000012ab:	push	qword ptr [rdx - 0x24000002]
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000012b4:	mov	ecx, 0xdbfffffe
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xdb #bad opcode
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xdb #bad opcode
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000012c4:	mov	edi, 0x22fffffe
1000012c9:	std
	.byte 0xff #bad opcode
1000012cb:	jmp	qword ptr [rbp - 0x44000002]
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
1000012d3:	jmp	[rsi + 8*rdi - 0x1440001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000012dc:	mov	ebx, 0xbbfffffe
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000012e4:	in	eax, dx
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
1000012e7:	call	qword ptr [rbp + 0x48]
1000012ea:	mov	ebp, esp
1000012ec:	push	r15
1000012ee:	push	r14
1000012f0:	push	r13
1000012f2:	push	r12
1000012f4:	push	rbx
1000012f5:	sub	rsp, 0x18
1000012f9:	mov	r15, qword ptr [rip + 0x6eb0]
100001300:	test	r15, r15
100001303:	je	0x10000132d
100001305:	mov	rax, qword ptr [rip + 0x6eac]
10000130c:	mov	qword ptr [rip + 0x6e9d], rax
100001313:	mov	qword ptr [rip + 0x6e9e], r15
10000131a:	lea	rax, [rip + 0x6eb7]
100001321:	movsxd	rbx, dword ptr [rax]
100001324:	add	qword ptr [rip + 0x6e6d], rbx
10000132b:	jmp	0x100001373
10000132d:	lea	rax, [rip + 0x6ea4]
100001334:	mov	ebx, dword ptr [rax]
100001336:	movsxd	r14, ebx
100001339:	mov	edi, 0x1
10000133e:	mov	rsi, r14
100001341:	call	0x1000034c2 ## symbol stub for: _calloc
100001346:	mov	qword ptr [rip + 0x6e63], rax
10000134d:	test	rax, rax
100001350:	je	0x1000015a9
100001356:	mov	edi, 0x1
10000135b:	mov	rsi, r14
10000135e:	call	0x1000034c2 ## symbol stub for: _calloc
100001363:	mov	qword ptr [rip + 0x6e4e], rax
10000136a:	test	rax, rax
10000136d:	je	0x1000015ae
100001373:	test	r15, r15
100001376:	setne	byte ptr [rbp - 0x29]
10000137a:	lea	r14, [rip + 0x6e03]
100001381:	mov	ecx, dword ptr [r14]
100001384:	test	ecx, ecx
100001386:	je	0x1000014b5
10000138c:	mov	qword ptr [rbp - 0x38], r15
100001390:	xor	r15d, r15d
100001393:	mov	r13, qword ptr [rip + 0x2c86] ## literal pool symbol address: ___stdinp
10000139a:	movsxd	r12, r15d
10000139d:	mov	al, byte ptr [rip + 0x6e05]
1000013a3:	test	al, 0x1
1000013a5:	jne	0x1000013b9
1000013a7:	xor	edi, edi
1000013a9:	call	0x100001629
1000013ae:	test	eax, eax
1000013b0:	je	0x1000014b8
1000013b6:	mov	ecx, dword ptr [r14]
1000013b9:	mov	rdi, qword ptr [rip + 0x6df0]
1000013c0:	add	rdi, r12
1000013c3:	cmp	ecx, ebx
1000013c5:	mov	eax, ebx
1000013c7:	cmovl	eax, ecx
1000013ca:	cmp	ecx, -0x1
1000013cd:	cmove	eax, ebx
1000013d0:	movsxd	rdx, eax
1000013d3:	mov	rcx, qword ptr [r13]
1000013d7:	mov	esi, 0x1
1000013dc:	call	0x1000034fe ## symbol stub for: _fread
1000013e1:	test	eax, eax
1000013e3:	jne	0x10000140e
1000013e5:	mov	rdi, qword ptr [r13]
1000013e9:	call	0x1000034e0 ## symbol stub for: _ferror
1000013ee:	test	eax, eax
1000013f0:	jne	0x100001407
1000013f2:	mov	byte ptr [rip + 0x6daf], 0x0
1000013f9:	mov	ecx, dword ptr [r14]
1000013fc:	xor	eax, eax
1000013fe:	test	ecx, ecx
100001400:	jne	0x1000013a3
100001402:	jmp	0x1000014b8
100001407:	call	0x100003381
10000140c:	jmp	0x1000013f2
10000140e:	mov	byte ptr [rip + 0x6d93], 0x1
100001415:	mov	ecx, dword ptr [r14]
100001418:	cmp	ecx, -0x1
10000141b:	je	0x100001424
10000141d:	sub	ecx, eax
10000141f:	mov	dword ptr [r14], ecx
100001422:	jmp	0x100001429
100001424:	mov	ecx, 0xffffffff
100001429:	sub	ebx, eax
10000142b:	je	0x100001432
10000142d:	add	r15d, eax
100001430:	jmp	0x1000014ab
100001432:	mov	ecx, dword ptr [rip + 0x6d48]
100001438:	cmp	qword ptr [rbp - 0x38], 0x0
10000143d:	je	0x100001591
100001443:	mov	eax, ecx
100001445:	and	eax, -0x3
100001448:	je	0x100001591
10000144e:	mov	rdi, qword ptr [rip + 0x6d5b]
100001455:	mov	rsi, qword ptr [rip + 0x6d5c]
10000145c:	lea	rax, [rip + 0x6d75]
100001463:	movsxd	rdx, dword ptr [rax]
100001466:	call	0x1000034bc ## symbol stub for: _bcmp
10000146b:	mov	ecx, dword ptr [rip + 0x6d0f]
100001471:	test	eax, eax
100001473:	jne	0x100001591
100001479:	cmp	ecx, 0x3
10000147c:	jne	0x10000148a
10000147e:	lea	rdi, [rip + 0x2628] ## literal pool for: "*"
100001485:	call	0x100003552 ## symbol stub for: _puts
10000148a:	lea	rax, [rip + 0x6d47]
100001491:	movsxd	rbx, dword ptr [rax]
100001494:	add	qword ptr [rip + 0x6cfd], rbx
10000149b:	mov	dword ptr [rip + 0x6cdb], 0x1
1000014a5:	mov	ecx, dword ptr [r14]
1000014a8:	xor	r15d, r15d
1000014ab:	test	ecx, ecx
1000014ad:	jne	0x10000139a
1000014b3:	jmp	0x1000014b8
1000014b5:	xor	r15d, r15d
1000014b8:	lea	rax, [rip + 0x6d39]
1000014bf:	cmp	dword ptr [rax], 0x0
1000014c2:	je	0x1000014db
1000014c4:	mov	rax, qword ptr [rip + 0x6ccd]
1000014cb:	lea	rcx, [rip + 0x6d1e]
1000014d2:	cmp	rax, qword ptr [rcx]
1000014d5:	jl	0x1000015a4
1000014db:	lea	rax, [rip + 0x6cf6]
1000014e2:	cmp	ebx, dword ptr [rax]
1000014e4:	jne	0x1000014ed
1000014e6:	xor	eax, eax
1000014e8:	jmp	0x100001582
1000014ed:	test	ebx, ebx
1000014ef:	sete	al
1000014f2:	cmp	dword ptr [rip + 0x6c87], 0x0
1000014f9:	setne	cl
1000014fc:	and	cl, al
1000014fe:	test	byte ptr [rbp - 0x29], cl
100001501:	je	0x100001537
100001503:	mov	rdi, qword ptr [rip + 0x6ca6]
10000150a:	mov	rsi, qword ptr [rip + 0x6ca7]
100001511:	movsxd	r15, r15d
100001514:	mov	rdx, r15
100001517:	call	0x1000034bc ## symbol stub for: _bcmp
10000151c:	test	eax, eax
10000151e:	jne	0x10000153a
100001520:	cmp	dword ptr [rip + 0x6c59], 0x1
100001527:	je	0x1000014e6
100001529:	lea	rdi, [rip + 0x257d] ## literal pool for: "*"
100001530:	call	0x100003552 ## symbol stub for: _puts
100001535:	jmp	0x1000014e6
100001537:	movsxd	r15, r15d
10000153a:	mov	rdi, qword ptr [rip + 0x6c6f]
100001541:	add	rdi, r15
100001544:	movsxd	rsi, ebx
100001547:	call	0x100003492 ## symbol stub for: ___bzero
10000154c:	add	r15, qword ptr [rip + 0x6c45]
100001553:	mov	qword ptr [rip + 0x6c46], r15
10000155a:	cmp	dword ptr [r14], 0x0
10000155e:	jne	0x10000157b
100001560:	mov	rax, qword ptr [rip + 0x2ab9] ## literal pool symbol address: ___stdinp
100001567:	mov	rdi, qword ptr [rax]
10000156a:	call	0x10000351c ## symbol stub for: _ftell
10000156f:	xor	edi, edi
100001571:	mov	rsi, rax
100001574:	xor	edx, edx
100001576:	call	0x10000353a ## symbol stub for: _lseek
10000157b:	mov	rax, qword ptr [rip + 0x6c2e]
100001582:	add	rsp, 0x18
100001586:	pop	rbx
100001587:	pop	r12
100001589:	pop	r13
10000158b:	pop	r14
10000158d:	pop	r15
10000158f:	pop	rbp
100001590:	ret
100001591:	dec	ecx
100001593:	cmp	ecx, 0x1
100001596:	ja	0x10000157b
100001598:	mov	dword ptr [rip + 0x6bde], 0x3
1000015a2:	jmp	0x10000157b
1000015a4:	call	0x10000336c
1000015a9:	call	0x10000334c
1000015ae:	call	0x10000335c
1000015b3:	push	rbp
1000015b4:	mov	rbp, rsp
1000015b7:	push	r15
1000015b9:	push	r14
1000015bb:	push	rbx
1000015bc:	push	rax
1000015bd:	mov	dword ptr [rdi + 0x8], 0x2
1000015c4:	mov	rax, qword ptr [rdi + 0x10]
1000015c8:	mov	byte ptr [rax], 0x73
1000015cb:	mov	rax, qword ptr [rdi + 0x10]
1000015cf:	mov	byte ptr [rax + 0x1], 0x0
1000015d3:	mov	rbx, qword ptr [rdi + 0x18]
1000015d7:	cmp	byte ptr [rbx], 0x25
1000015da:	lea	rbx, [rbx + 0x1]
1000015de:	jne	0x1000015d7
1000015e0:	mov	al, byte ptr [rbx]
1000015e2:	mov	r15, rbx
1000015e5:	test	al, al
1000015e7:	je	0x10000160e
1000015e9:	lea	r14, [rip + 0x2491] ## literal pool for: " -0+#"
1000015f0:	mov	r15, rbx
1000015f3:	movsx	esi, al
1000015f6:	mov	rdi, r14
1000015f9:	call	0x100003534 ## symbol stub for: _index
1000015fe:	test	rax, rax
100001601:	je	0x10000160e
100001603:	mov	al, byte ptr [r15 + 0x1]
100001607:	inc	r15
10000160a:	test	al, al
10000160c:	jne	0x1000015f3
10000160e:	xor	eax, eax
100001610:	mov	cl, byte ptr [r15 + rax]
100001614:	mov	byte ptr [rbx + rax], cl
100001617:	inc	rax
10000161a:	test	cl, cl
10000161c:	jne	0x100001610
10000161e:	add	rsp, 0x8
100001622:	pop	rbx
100001623:	pop	r14
100001625:	pop	r15
100001627:	pop	rbp
100001628:	ret
100001629:	push	rbp
10000162a:	mov	rbp, rsp
10000162d:	push	r15
10000162f:	push	r14
100001631:	push	r13
100001633:	push	r12
100001635:	push	rbx
100001636:	push	rax
100001637:	test	rdi, rdi
10000163a:	je	0x100001657
10000163c:	mov	qword ptr [rip + 0x6b7d], rdi
100001643:	mov	eax, 0x1
100001648:	add	rsp, 0x8
10000164c:	pop	rbx
10000164d:	pop	r12
10000164f:	pop	r13
100001651:	pop	r14
100001653:	pop	r15
100001655:	pop	rbp
100001656:	ret
100001657:	mov	rax, qword ptr [rip + 0x6b62]
10000165e:	lea	rbx, [rip + 0x6b8b]
100001665:	lea	r12, [rip + 0x243b] ## literal pool for: "stdin"
10000166c:	mov	r13, qword ptr [rip + 0x29ad] ## literal pool symbol address: ___stdinp
100001673:	lea	r15, [rip + 0x242b] ## literal pool for: "r"
10000167a:	lea	r14, [rip + 0x6b67]
100001681:	mov	rdi, qword ptr [rax]
100001684:	test	rdi, rdi
100001687:	je	0x1000016bb
100001689:	mov	rdx, qword ptr [r13]
10000168d:	mov	rsi, r15
100001690:	call	0x10000350a ## symbol stub for: _freopen
100001695:	test	rax, rax
100001698:	je	0x100001701
10000169a:	mov	dword ptr [rip + 0x6b24], 0x1
1000016a4:	cmp	qword ptr [rbx], 0x0
1000016a8:	je	0x1000016de
1000016aa:	mov	rax, qword ptr [rip + 0x6b0f]
1000016b1:	mov	rdi, qword ptr [rax]
1000016b4:	mov	esi, 0x1
1000016b9:	jmp	0x1000016d9
1000016bb:	mov	eax, dword ptr [rip + 0x6b07]
1000016c1:	lea	ecx, [rax + 0x1]
1000016c4:	mov	dword ptr [rip + 0x6afe], ecx
1000016ca:	test	eax, eax
1000016cc:	jne	0x100001737
1000016ce:	xor	esi, esi
1000016d0:	cmp	qword ptr [rbx], 0x0
1000016d4:	mov	rdi, r12
1000016d7:	je	0x1000016de
1000016d9:	call	0x1000017c9
1000016de:	mov	rax, qword ptr [rip + 0x6adb]
1000016e5:	cmp	qword ptr [rax], 0x0
1000016e9:	je	0x1000016f6
1000016eb:	add	rax, 0x8
1000016ef:	mov	qword ptr [rip + 0x6aca], rax
1000016f6:	cmp	qword ptr [rbx], 0x0
1000016fa:	jne	0x100001681
1000016fc:	jmp	0x100001643
100001701:	mov	rax, qword ptr [rip + 0x6ab8]
100001708:	mov	rsi, qword ptr [rax]
10000170b:	lea	rdi, [rip + 0x236c] ## literal pool for: "%s"
100001712:	xor	eax, eax
100001714:	call	0x100003594 ## symbol stub for: _warn
100001719:	mov	dword ptr [r14], 0x1
100001720:	mov	rax, qword ptr [rip + 0x6a99]
100001727:	add	rax, 0x8
10000172b:	mov	qword ptr [rip + 0x6a8e], rax
100001732:	jmp	0x100001681
100001737:	xor	eax, eax
100001739:	jmp	0x100001648
10000173e:	push	rbp
10000173f:	mov	rbp, rsp
100001742:	push	r15
100001744:	push	r14
100001746:	push	r12
100001748:	push	rbx
100001749:	lea	rax, [rip + 0x6a34]
100001750:	movsxd	rax, dword ptr [rax]
100001753:	cmp	rax, rsi
100001756:	mov	r15, rsi
100001759:	cmovb	r15, rax
10000175d:	cmp	rax, -0x1
100001761:	cmove	r15, rsi
100001765:	test	r15, r15
100001768:	je	0x1000017ba
10000176a:	mov	r14, rdi
10000176d:	xor	ebx, ebx
10000176f:	call	0x100003528 ## symbol stub for: _getchar
100001774:	cmp	eax, -0x1
100001777:	je	0x10000178a
100001779:	mov	byte ptr [r14 + rbx], al
10000177d:	inc	rbx
100001780:	cmp	r15, rbx
100001783:	jne	0x10000176f
100001785:	add	r14, rbx
100001788:	jmp	0x100001790
10000178a:	add	r14, rbx
10000178d:	mov	r15, rbx
100001790:	test	r15, r15
100001793:	je	0x1000017ba
100001795:	xor	ebx, ebx
100001797:	mov	r12, qword ptr [rip + 0x2882] ## literal pool symbol address: ___stdinp
10000179e:	movzx	edi, byte ptr [r14 + rbx - 0x1]
1000017a4:	mov	rsi, qword ptr [r12]
1000017a8:	call	0x10000358e ## symbol stub for: _ungetc
1000017ad:	dec	rbx
1000017b0:	mov	rax, r15
1000017b3:	add	rax, rbx
1000017b6:	jne	0x10000179e
1000017b8:	jmp	0x1000017bd
1000017ba:	xor	r15d, r15d
1000017bd:	mov	rax, r15
1000017c0:	pop	rbx
1000017c1:	pop	r12
1000017c3:	pop	r14
1000017c5:	pop	r15
1000017c7:	pop	rbp
1000017c8:	ret
1000017c9:	push	rbp
1000017ca:	mov	rbp, rsp
1000017cd:	push	r15
1000017cf:	push	r14
1000017d1:	push	rbx
1000017d2:	sub	rsp, 0x98
1000017d9:	mov	r14, rdi
1000017dc:	test	esi, esi
1000017de:	je	0x10000182b
1000017e0:	mov	rax, qword ptr [rip + 0x2839] ## literal pool symbol address: ___stdinp
1000017e7:	mov	rdi, qword ptr [rax]
1000017ea:	call	0x1000034ec ## symbol stub for: _fileno
1000017ef:	lea	rsi, [rbp - 0xa8]
1000017f6:	mov	edi, eax
1000017f8:	call	0x100003516 ## symbol stub for: _fstat$INODE64
1000017fd:	test	eax, eax
1000017ff:	jne	0x1000018ae
100001805:	movzx	eax, word ptr [rbp - 0xa4]
10000180c:	and	eax, 0xf000
100001811:	cmp	eax, 0x8000
100001816:	jne	0x10000182b
100001818:	lea	rax, [rip + 0x69d1]
10000181f:	mov	rcx, qword ptr [rax]
100001822:	mov	rax, qword ptr [rbp - 0x48]
100001826:	sub	rcx, rax
100001829:	jge	0x10000188f
10000182b:	mov	rax, qword ptr [rip + 0x27ee] ## literal pool symbol address: ___stdinp
100001832:	mov	rdi, qword ptr [rax]
100001835:	lea	r15, [rip + 0x69b4]
10000183c:	mov	rsi, qword ptr [r15]
10000183f:	xor	edx, edx
100001841:	call	0x100003510 ## symbol stub for: _fseeko
100001846:	test	eax, eax
100001848:	je	0x100001881
10000184a:	call	0x100003498 ## symbol stub for: ___error
10000184f:	cmp	dword ptr [rax], 0x1d
100001852:	jne	0x1000018ae
100001854:	mov	rcx, qword ptr [r15]
100001857:	xor	ebx, ebx
100001859:	test	rcx, rcx
10000185c:	jle	0x100001875
10000185e:	call	0x100003528 ## symbol stub for: _getchar
100001863:	mov	rcx, qword ptr [r15]
100001866:	cmp	eax, -0x1
100001869:	je	0x100001875
10000186b:	inc	rbx
10000186e:	cmp	rcx, rbx
100001871:	jg	0x10000185e
100001873:	mov	ebx, ebx
100001875:	add	qword ptr [rip + 0x691c], rbx
10000187c:	sub	rcx, rbx
10000187f:	jmp	0x100001896
100001881:	mov	rax, qword ptr [r15]
100001884:	add	qword ptr [rip + 0x690d], rax
10000188b:	xor	ecx, ecx
10000188d:	jmp	0x100001896
10000188f:	add	qword ptr [rip + 0x6902], rax
100001896:	lea	rax, [rip + 0x6953]
10000189d:	mov	qword ptr [rax], rcx
1000018a0:	add	rsp, 0x98
1000018a7:	pop	rbx
1000018a8:	pop	r14
1000018aa:	pop	r15
1000018ac:	pop	rbp
1000018ad:	ret
1000018ae:	lea	rsi, [rip + 0x21c9] ## literal pool for: "%s"
1000018b5:	mov	edi, 0x1
1000018ba:	mov	rdx, r14
1000018bd:	xor	eax, eax
1000018bf:	call	0x1000034c8 ## symbol stub for: _err
1000018c4:	push	rbp
1000018c5:	mov	rbp, rsp
1000018c8:	push	r14
1000018ca:	push	rbx
1000018cb:	sub	rsp, 0x10
1000018cf:	mov	rbx, rsi
1000018d2:	mov	r14d, edi
1000018d5:	mov	qword ptr [rbp - 0x18], rsi
1000018d9:	lea	rsi, [rip + 0x211a] ## literal pool for: ""
1000018e0:	xor	edi, edi
1000018e2:	call	0x10000355e ## symbol stub for: _setlocale
1000018e7:	mov	rdi, qword ptr [rbx]
1000018ea:	mov	esi, 0x6f
1000018ef:	call	0x100003558 ## symbol stub for: _rindex
1000018f4:	test	rax, rax
1000018f7:	je	0x10000191a
1000018f9:	lea	rsi, [rip + 0x21af] ## literal pool for: "od"
100001900:	mov	rdi, rax
100001903:	call	0x10000356a ## symbol stub for: _strcmp
100001908:	test	eax, eax
10000190a:	jne	0x10000191a
10000190c:	lea	rsi, [rbp - 0x18]
100001910:	mov	edi, r14d
100001913:	call	0x100001cf0
100001918:	jmp	0x100001926
10000191a:	lea	rsi, [rbp - 0x18]
10000191e:	mov	edi, r14d
100001921:	call	0x100001990
100001926:	mov	dword ptr [rip + 0x68a8], 0x0
100001930:	mov	rbx, qword ptr [rip + 0x68a9]
100001937:	test	rbx, rbx
10000193a:	jne	0x100001955
10000193c:	mov	rdi, qword ptr [rbp - 0x18]
100001940:	call	0x100001629
100001945:	call	0x100000e94
10000194a:	mov	edi, dword ptr [rip + 0x6898]
100001950:	call	0x1000034d4 ## symbol stub for: _exit
100001955:	mov	rdi, rbx
100001958:	call	0x100002b34
10000195d:	mov	dword ptr [rbx + 0x10], eax
100001960:	cmp	dword ptr [rip + 0x6872], eax
100001966:	jge	0x10000196e
100001968:	mov	dword ptr [rip + 0x686a], eax
10000196e:	mov	rbx, qword ptr [rbx]
100001971:	test	rbx, rbx
100001974:	jne	0x100001955
100001976:	mov	rbx, qword ptr [rip + 0x6863]
10000197d:	test	rbx, rbx
100001980:	je	0x10000193c
100001982:	mov	rdi, rbx
100001985:	call	0x100002cc8
10000198a:	mov	rbx, qword ptr [rbx]
10000198d:	jmp	0x10000197d
10000198f:	nop
100001990:	push	rbp
100001991:	mov	rbp, rsp
100001994:	push	r15
100001996:	push	r14
100001998:	push	r13
10000199a:	push	r12
10000199c:	push	rbx
10000199d:	sub	rsp, 0x18
1000019a1:	mov	r15d, edi
1000019a4:	mov	qword ptr [rbp - 0x38], rsi
1000019a8:	mov	rbx, qword ptr [rsi]
1000019ab:	mov	rdi, qword ptr [rbx]
1000019ae:	mov	esi, 0x68
1000019b3:	call	0x100003558 ## symbol stub for: _rindex
1000019b8:	mov	qword ptr [rbp - 0x30], rax
1000019bc:	test	rax, rax
1000019bf:	je	0x1000019f8
1000019c1:	lea	rsi, [rip + 0x20ea] ## literal pool for: "hd"
1000019c8:	mov	rdi, rax
1000019cb:	call	0x10000356a ## symbol stub for: _strcmp
1000019d0:	test	eax, eax
1000019d2:	jne	0x1000019f8
1000019d4:	lea	rdi, [rip + 0x20da] ## literal pool for: "\"%08.8_Ax\n\""
1000019db:	call	0x1000027ed
1000019e0:	lea	rdi, [rip + 0x20da] ## literal pool for: "\"%08.8_ax  \" 8/1 \"%02x \" \"  \" 8/1 \"%02x \" "
1000019e7:	call	0x1000027ed
1000019ec:	lea	rdi, [rip + 0x20f9] ## literal pool for: "\"  |\" 16/1 \"%_p\" \"|\\n\""
1000019f3:	call	0x1000027ed
1000019f8:	lea	r12, [rip + 0x2104] ## literal pool for: "bcCde:f:n:os:vx"
1000019ff:	lea	r14, [rip + 0x24e]
100001a06:	mov	edi, r15d
100001a09:	mov	rsi, rbx
100001a0c:	mov	rdx, r12
100001a0f:	call	0x10000352e ## symbol stub for: _getopt
100001a14:	cmp	eax, 0x61
100001a17:	jle	0x100001a44
100001a19:	add	eax, -0x62
100001a1c:	cmp	eax, 0x16
100001a1f:	ja	0x100001a06
100001a21:	movsxd	rax, dword ptr [r14 + 4*rax]
100001a25:	add	rax, r14
100001a28:	jmp	rax
100001a2a:	lea	rdi, [rip + 0x20e2] ## literal pool for: "\"%07.7_Ax\n\""
100001a31:	call	0x1000027ed
100001a36:	lea	rdi, [rip + 0x20e2] ## literal pool for: "\"%07.7_ax \" 16/1 \"%03o \" \"\\n\""
100001a3d:	call	0x1000027ed
100001a42:	jmp	0x100001a06
100001a44:	cmp	eax, 0x43
100001a47:	jne	0x100001b98
100001a4d:	lea	rdi, [rip + 0x2061] ## literal pool for: "\"%08.8_Ax\n\""
100001a54:	call	0x1000027ed
100001a59:	lea	rdi, [rip + 0x2061] ## literal pool for: "\"%08.8_ax  \" 8/1 \"%02x \" \"  \" 8/1 \"%02x \" "
100001a60:	call	0x1000027ed
100001a65:	lea	rdi, [rip + 0x2080] ## literal pool for: "\"  |\" 16/1 \"%_p\" \"|\\n\""
100001a6c:	call	0x1000027ed
100001a71:	jmp	0x100001a06
100001a73:	lea	rdi, [rip + 0x2099] ## literal pool for: "\"%07.7_Ax\n\""
100001a7a:	call	0x1000027ed
100001a7f:	lea	rdi, [rip + 0x20b7] ## literal pool for: "\"%07.7_ax \" 16/1 \"%3_c \" \"\\n\""
100001a86:	call	0x1000027ed
100001a8b:	jmp	0x100001a06
100001a90:	lea	rdi, [rip + 0x207c] ## literal pool for: "\"%07.7_Ax\n\""
100001a97:	call	0x1000027ed
100001a9c:	lea	rdi, [rip + 0x20b8] ## literal pool for: "\"%07.7_ax \" 8/2 \"  %05u \" \"\\n\""
100001aa3:	call	0x1000027ed
100001aa8:	jmp	0x100001a06
100001aad:	mov	rax, qword ptr [rip + 0x2574] ## literal pool symbol address: _optarg
100001ab4:	mov	rdi, qword ptr [rax]
100001ab7:	call	0x1000027ed
100001abc:	jmp	0x100001a06
100001ac1:	mov	rax, qword ptr [rip + 0x2560] ## literal pool symbol address: _optarg
100001ac8:	mov	rdi, qword ptr [rax]
100001acb:	call	0x1000026c0
100001ad0:	jmp	0x100001a06
100001ad5:	mov	rax, qword ptr [rip + 0x254c] ## literal pool symbol address: _optarg
100001adc:	mov	r13, qword ptr [rax]
100001adf:	mov	rdi, r13
100001ae2:	call	0x1000034b6 ## symbol stub for: _atoi
100001ae7:	lea	rcx, [rip + 0x6696]
100001aee:	mov	dword ptr [rcx], eax
100001af0:	test	eax, eax
100001af2:	jns	0x100001a06
100001af8:	jmp	0x100001c32
100001afd:	lea	rdi, [rip + 0x200f] ## literal pool for: "\"%07.7_Ax\n\""
100001b04:	call	0x1000027ed
100001b09:	lea	rdi, [rip + 0x207f] ## literal pool for: "\"%07.7_ax \" 8/2 \" %06o \" \"\\n\""
100001b10:	call	0x1000027ed
100001b15:	jmp	0x100001a06
100001b1a:	mov	rax, qword ptr [rip + 0x2507] ## literal pool symbol address: _optarg
100001b21:	mov	rdi, qword ptr [rax]
100001b24:	lea	rsi, [rbp - 0x30]
100001b28:	xor	edx, edx
100001b2a:	call	0x100003582 ## symbol stub for: _strtoll
100001b2f:	mov	qword ptr [rip + 0x66ba], rax
100001b36:	test	rax, rax
100001b39:	js	0x100001c48
100001b3f:	mov	rcx, qword ptr [rbp - 0x30]
100001b43:	movsx	ecx, byte ptr [rcx]
100001b46:	cmp	ecx, 0x6a
100001b49:	jg	0x100001bab
100001b4b:	cmp	ecx, 0x62
100001b4e:	je	0x100001bc9
100001b50:	cmp	ecx, 0x67
100001b53:	jne	0x100001a06
100001b59:	shl	rax, 0x1e
100001b5d:	mov	qword ptr [rip + 0x668c], rax
100001b64:	jmp	0x100001a06
100001b69:	lea	rax, [rip + 0x6610]
100001b70:	mov	dword ptr [rax], 0x0
100001b76:	jmp	0x100001a06
100001b7b:	lea	rdi, [rip + 0x1f91] ## literal pool for: "\"%07.7_Ax\n\""
100001b82:	call	0x1000027ed
100001b87:	lea	rdi, [rip + 0x2032] ## literal pool for: "\"%07.7_ax \" 8/2 \"   %04x \" \"\\n\""
100001b8e:	call	0x1000027ed
100001b93:	jmp	0x100001a06
100001b98:	cmp	eax, -0x1
100001b9b:	je	0x100001be9
100001b9d:	cmp	eax, 0x3f
100001ba0:	jne	0x100001a06
100001ba6:	jmp	0x100001c4d
100001bab:	cmp	ecx, 0x6b
100001bae:	je	0x100001bd9
100001bb0:	cmp	ecx, 0x6d
100001bb3:	jne	0x100001a06
100001bb9:	shl	rax, 0x14
100001bbd:	mov	qword ptr [rip + 0x662c], rax
100001bc4:	jmp	0x100001a06
100001bc9:	shl	rax, 0x9
100001bcd:	mov	qword ptr [rip + 0x661c], rax
100001bd4:	jmp	0x100001a06
100001bd9:	shl	rax, 0xa
100001bdd:	mov	qword ptr [rip + 0x660c], rax
100001be4:	jmp	0x100001a06
100001be9:	lea	rax, [rip + 0x65f0]
100001bf0:	cmp	qword ptr [rax], 0x0
100001bf4:	jne	0x100001c0e
100001bf6:	lea	rdi, [rip + 0x1f16] ## literal pool for: "\"%07.7_Ax\n\""
100001bfd:	call	0x1000027ed
100001c02:	lea	rdi, [rip + 0x1fd7] ## literal pool for: "\"%07.7_ax \" 16/1 \"%02x \" \"\\n\""
100001c09:	call	0x1000027ed
100001c0e:	mov	rax, qword ptr [rip + 0x241b] ## literal pool symbol address: _optind
100001c15:	movsxd	rax, dword ptr [rax]
100001c18:	shl	rax, 0x3
100001c1c:	mov	rcx, qword ptr [rbp - 0x38]
100001c20:	add	qword ptr [rcx], rax
100001c23:	add	rsp, 0x18
100001c27:	pop	rbx
100001c28:	pop	r12
100001c2a:	pop	r13
100001c2c:	pop	r14
100001c2e:	pop	r15
100001c30:	pop	rbp
100001c31:	ret
100001c32:	lea	rsi, [rip + 0x1f41] ## literal pool for: "%s: bad length value"
100001c39:	mov	edi, 0x1
100001c3e:	mov	rdx, r13
100001c41:	xor	eax, eax
100001c43:	call	0x1000034ce ## symbol stub for: _errx
100001c48:	call	0x1000033a2
100001c4d:	call	0x100001cb0
100001c52:	nop
	.byte 0xd6 #bad opcode
100001c55:	std
	.byte 0xff #bad opcode
100001c57:	call	[rdi]
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100001c5c:	cmp	al, -0x2
	.byte 0xff #bad opcode
100001c5f:	call	[rcx - 0x2]
	.byte 0xff #bad opcode
100001c63:	jmp	[rbp - 0x2]
	.byte 0xff #bad opcode
100001c67:	push	qword ptr [rdx - 0x4d000003]
100001c6d:	std
	.byte 0xff #bad opcode
100001c6f:	push	qword ptr [rdx - 0x4d000003]
100001c75:	std
	.byte 0xff #bad opcode
100001c77:	push	qword ptr [rdx - 0x4d000003]
100001c7d:	std
	.byte 0xff #bad opcode
100001c7f:	push	qword ptr [rdx - 0x7e000003]
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100001c87:	jmp	[rcx - 0x4d000002]
100001c8d:	std
	.byte 0xff #bad opcode
100001c8f:	push	qword ptr [rdx - 0x4d000003]
100001c95:	std
	.byte 0xff #bad opcode
100001c97:	inc	esi
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100001c9b:	push	qword ptr [rdx - 0x4d000003]
100001ca1:	std
	.byte 0xff #bad opcode
100001ca3:	call	qword ptr [rip - 0x4d000001]
100001ca9:	std
	.byte 0xff #bad opcode
100001cab:	jmp	qword ptr [rdi]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100001caf:	call	qword ptr [rbp + 0x48]
100001cb2:	mov	ebp, esp
100001cb4:	mov	rax, qword ptr [rip + 0x235d] ## literal pool symbol address: ___stderrp
100001cbb:	mov	rdi, qword ptr [rax]
100001cbe:	lea	rsi, [rip + 0x1f39] ## literal pool for: "%s\n%s\n%s\n%s\n"
100001cc5:	lea	rdx, [rip + 0x1f3f] ## literal pool for: "usage: hexdump [-bcCdovx] [-e fmt] [-f fmt_file] [-n length]"
100001ccc:	lea	r8, [rip + 0x1f99] ## literal pool for: "       hd      [-bcdovx]  [-e fmt] [-f fmt_file] [-n length]"
100001cd3:	lea	rcx, [rip + 0x1f6e] ## literal pool for: "               [-s skip] [file ...]"
100001cda:	mov	r9, rcx
100001cdd:	xor	eax, eax
100001cdf:	call	0x1000034f8 ## symbol stub for: _fprintf
100001ce4:	mov	edi, 0x1
100001ce9:	call	0x1000034d4 ## symbol stub for: _exit
100001cee:	nop
100001cef:	nop
100001cf0:	push	rbp
100001cf1:	mov	rbp, rsp
100001cf4:	push	r15
100001cf6:	push	r14
100001cf8:	push	r13
100001cfa:	push	r12
100001cfc:	push	rbx
100001cfd:	sub	rsp, 0x18
100001d01:	mov	rbx, rsi
100001d04:	mov	r15d, edi
100001d07:	lea	rdi, [rip + 0x1f9b] ## literal pool for: "\"%07.7_Ao\n\""
100001d0e:	call	0x1000027ed
100001d13:	lea	rdi, [rip + 0x1f9b] ## literal pool for: "\"%07.7_ao  \""
100001d1a:	call	0x1000027ed
100001d1f:	mov	dword ptr [rip + 0x64cf], 0x1
100001d29:	mov	qword ptr [rbp - 0x30], rbx
100001d2d:	mov	r14, qword ptr [rbx]
100001d30:	lea	r12, [rip + 0x1f8b] ## literal pool for: "A:aBbcDdeFfHhIij:LlN:Oost:vXx"
100001d37:	lea	r13, [rip + 0x4b2]
100001d3e:	mov	edi, r15d
100001d41:	mov	rsi, r14
100001d44:	mov	rdx, r12
100001d47:	call	0x10000352e ## symbol stub for: _getopt
100001d4c:	lea	ecx, [rax - 0x41]
100001d4f:	cmp	ecx, 0x37
100001d52:	ja	0x100001fdf
100001d58:	movsxd	rax, dword ptr [r13 + 4*rcx]
100001d5d:	add	rax, r13
100001d60:	jmp	rax
100001d62:	lea	rdi, [rip + 0x1fac] ## literal pool for: "dL"
100001d69:	call	0x1000022d0
100001d6e:	jmp	0x100001d3e
100001d70:	lea	rdi, [rip + 0x1f84] ## literal pool for: "o2"
100001d77:	call	0x1000022d0
100001d7c:	jmp	0x100001d3e
100001d7e:	lea	rdi, [rip + 0x1f84] ## literal pool for: "fD"
100001d85:	call	0x1000022d0
100001d8a:	jmp	0x100001d3e
100001d8c:	lea	rdi, [rip + 0x1f7c] ## literal pool for: "x4"
100001d93:	call	0x1000022d0
100001d98:	jmp	0x100001d3e
100001d9a:	lea	rdi, [rip + 0x1f71] ## literal pool for: "x2"
100001da1:	call	0x1000022d0
100001da6:	jmp	0x100001d3e
100001da8:	mov	rax, qword ptr [rip + 0x2279] ## literal pool symbol address: _optarg
100001daf:	mov	rdx, qword ptr [rax]
100001db2:	mov	al, byte ptr [rdx]
100001db4:	movsx	ecx, al
100001db7:	cmp	ecx, 0x6e
100001dba:	jg	0x100001f4d
100001dc0:	cmp	ecx, 0x64
100001dc3:	je	0x100001f5b
100001dc9:	cmp	ecx, 0x6e
100001dcc:	jne	0x1000021dc
100001dd2:	lea	rax, [rip + 0x6407]
100001dd9:	mov	rax, qword ptr [rax]
100001ddc:	mov	rcx, qword ptr [rax + 0x8]
100001de0:	lea	rdx, [rip + 0x63a1]
100001de7:	mov	qword ptr [rcx + 0x20], rdx
100001deb:	mov	rax, qword ptr [rax]
100001dee:	mov	rax, qword ptr [rax + 0x8]
100001df2:	lea	rcx, [rip + 0x6393]
100001df9:	mov	qword ptr [rax + 0x20], rcx
100001dfd:	jmp	0x100001d3e
100001e02:	lea	rdi, [rip + 0x1efd] ## literal pool for: "u4"
100001e09:	call	0x1000022d0
100001e0e:	jmp	0x100001d3e
100001e13:	mov	rax, qword ptr [rip + 0x220e] ## literal pool symbol address: _optarg
100001e1a:	mov	rbx, qword ptr [rax]
100001e1d:	mov	rdi, rbx
100001e20:	call	0x1000034b6 ## symbol stub for: _atoi
100001e25:	lea	rcx, [rip + 0x6358]
100001e2c:	mov	dword ptr [rcx], eax
100001e2e:	test	eax, eax
100001e30:	jg	0x100001d3e
100001e36:	jmp	0x1000021cb
100001e3b:	lea	rdi, [rip + 0x1f04] ## literal pool for: "o4"
100001e42:	call	0x1000022d0
100001e47:	jmp	0x100001d3e
100001e4c:	lea	rdi, [rip + 0x1ea6] ## literal pool for: "a"
100001e53:	call	0x1000022d0
100001e58:	jmp	0x100001d3e
100001e5d:	lea	rdi, [rip + 0x1e9a] ## literal pool for: "o1"
100001e64:	call	0x1000022d0
100001e69:	jmp	0x100001d3e
100001e6e:	lea	rdi, [rip + 0x1e8c] ## literal pool for: "c"
100001e75:	call	0x1000022d0
100001e7a:	jmp	0x100001d3e
100001e7f:	lea	rdi, [rip + 0x1e7d] ## literal pool for: "u2"
100001e86:	call	0x1000022d0
100001e8b:	jmp	0x100001d3e
100001e90:	lea	rdi, [rip + 0x1e75] ## literal pool for: "fF"
100001e97:	call	0x1000022d0
100001e9c:	jmp	0x100001d3e
100001ea1:	lea	rdi, [rip + 0x1e70] ## literal pool for: "dI"
100001ea8:	call	0x1000022d0
100001ead:	jmp	0x100001d3e
100001eb2:	call	0x100003498 ## symbol stub for: ___error
100001eb7:	mov	dword ptr [rax], 0x0
100001ebd:	mov	rax, qword ptr [rip + 0x2164] ## literal pool symbol address: _optarg
100001ec4:	mov	rdi, qword ptr [rax]
100001ec7:	lea	rsi, [rbp - 0x38]
100001ecb:	xor	edx, edx
100001ecd:	call	0x100003582 ## symbol stub for: _strtoll
100001ed2:	lea	rsi, [rip + 0x6317]
100001ed9:	mov	qword ptr [rsi], rax
100001edc:	mov	rbx, qword ptr [rbp - 0x38]
100001ee0:	mov	dl, byte ptr [rbx]
100001ee2:	mov	rcx, -0x1
100001ee9:	cmp	dl, 0x66
100001eec:	jle	0x100001f92
100001ef2:	cmp	dl, 0x67
100001ef5:	je	0x100001fa1
100001efb:	cmp	dl, 0x6b
100001efe:	je	0x100001fa7
100001f04:	cmp	dl, 0x6d
100001f07:	jne	0x100001fae
100001f0d:	shl	rax, 0x14
100001f11:	jmp	0x100001fab
100001f16:	lea	rdi, [rip + 0x1e2c] ## literal pool for: "d2"
100001f1d:	call	0x1000022d0
100001f22:	jmp	0x100001d3e
100001f27:	mov	rax, qword ptr [rip + 0x20fa] ## literal pool symbol address: _optarg
100001f2e:	mov	rdi, qword ptr [rax]
100001f31:	call	0x1000022d0
100001f36:	jmp	0x100001d3e
100001f3b:	lea	rax, [rip + 0x623e]
100001f42:	mov	dword ptr [rax], 0x0
100001f48:	jmp	0x100001d3e
100001f4d:	cmp	ecx, 0x78
100001f50:	je	0x100001f5b
100001f52:	cmp	ecx, 0x6f
100001f55:	jne	0x1000021dc
100001f5b:	lea	rdx, [rip + 0x627e]
100001f62:	mov	rcx, qword ptr [rdx]
100001f65:	mov	rcx, qword ptr [rcx + 0x8]
100001f69:	mov	rcx, qword ptr [rcx + 0x20]
100001f6d:	mov	byte ptr [rcx + 0x7], al
100001f70:	mov	rax, qword ptr [rip + 0x20b1] ## literal pool symbol address: _optarg
100001f77:	mov	rax, qword ptr [rax]
100001f7a:	mov	al, byte ptr [rax]
100001f7c:	mov	rcx, qword ptr [rdx]
100001f7f:	mov	rcx, qword ptr [rcx]
100001f82:	mov	rcx, qword ptr [rcx + 0x8]
100001f86:	mov	rcx, qword ptr [rcx + 0x20]
100001f8a:	mov	byte ptr [rcx + 0x7], al
100001f8d:	jmp	0x100001d3e
100001f92:	test	dl, dl
100001f94:	je	0x100001fb1
100001f96:	cmp	dl, 0x62
100001f99:	jne	0x100001fae
100001f9b:	shl	rax, 0x9
100001f9f:	jmp	0x100001fab
100001fa1:	shl	rax, 0x1e
100001fa5:	jmp	0x100001fab
100001fa7:	shl	rax, 0xa
100001fab:	mov	rcx, rax
100001fae:	mov	qword ptr [rsi], rcx
100001fb1:	call	0x100003498 ## symbol stub for: ___error
100001fb6:	cmp	dword ptr [rax], 0x0
100001fb9:	jne	0x100001fda
100001fbb:	lea	rax, [rip + 0x622e]
100001fc2:	cmp	qword ptr [rax], 0x0
100001fc6:	js	0x100001fda
100001fc8:	mov	rdi, rbx
100001fcb:	call	0x100003576 ## symbol stub for: _strlen
100001fd0:	cmp	rax, 0x2
100001fd4:	jb	0x100001d3e
100001fda:	call	0x1000033c1
100001fdf:	cmp	eax, -0x1
100001fe2:	jne	0x1000021c6
100001fe8:	lea	rax, [rip + 0x61f1]
100001fef:	mov	rax, qword ptr [rax]
100001ff2:	mov	rax, qword ptr [rax]
100001ff5:	cmp	qword ptr [rax], 0x0
100001ff9:	jne	0x100002007
100001ffb:	lea	rdi, [rip + 0x1d4a] ## literal pool for: "oS"
100002002:	call	0x1000022d0
100002007:	mov	rax, qword ptr [rip + 0x2022] ## literal pool symbol address: _optind
10000200e:	movsxd	rcx, dword ptr [rax]
100002011:	mov	rax, rcx
100002014:	shl	rax, 0x3
100002018:	mov	r13, qword ptr [rbp - 0x30]
10000201c:	add	rax, qword ptr [r13]
100002020:	mov	qword ptr [r13], rax
100002024:	sub	r15d, ecx
100002027:	je	0x100002171
10000202d:	cmp	r15d, 0x1
100002031:	jne	0x100002040
100002033:	mov	rdi, qword ptr [rax]
100002036:	cmp	byte ptr [rdi], 0x2b
100002039:	je	0x10000204d
10000203b:	jmp	0x100002171
100002040:	mov	rdi, qword ptr [rax + 0x8]
100002044:	movzx	eax, byte ptr [rdi]
100002047:	cmp	rax, 0x2b
10000204b:	jne	0x100002074
10000204d:	inc	rdi
100002050:	movzx	eax, byte ptr [rdi]
100002053:	cmp	rax, 0x30
100002057:	je	0x1000020a4
100002059:	cmp	al, 0x78
10000205b:	jne	0x1000020d1
10000205d:	movzx	ecx, byte ptr [rdi + 0x1]
100002061:	mov	rdx, qword ptr [rip + 0x1f98] ## literal pool symbol address: __DefaultRuneLocale
100002068:	test	byte ptr [rdx + 4*rcx + 0x3e], 0x1
10000206d:	je	0x1000020d1
10000206f:	inc	rdi
100002072:	jmp	0x1000020ae
100002074:	cmp	r15d, 0x2
100002078:	jl	0x100002171
10000207e:	mov	rcx, qword ptr [rip + 0x1f7b] ## literal pool symbol address: __DefaultRuneLocale
100002085:	test	byte ptr [rcx + 4*rax + 0x3d], 0x4
10000208a:	jne	0x100002050
10000208c:	cmp	al, 0x78
10000208e:	jne	0x100002171
100002094:	movzx	eax, byte ptr [rdi + 0x1]
100002098:	test	byte ptr [rcx + 4*rax + 0x3e], 0x1
10000209d:	jne	0x100002050
10000209f:	jmp	0x100002171
1000020a4:	cmp	byte ptr [rdi + 0x1], 0x78
1000020a8:	jne	0x1000020d1
1000020aa:	add	rdi, 0x2
1000020ae:	lea	rbx, [rdi - 0x1]
1000020b2:	mov	rcx, qword ptr [rip + 0x1f47] ## literal pool symbol address: __DefaultRuneLocale
1000020b9:	movzx	eax, byte ptr [rbx + 0x1]
1000020bd:	inc	rbx
1000020c0:	test	byte ptr [rcx + 4*rax + 0x3e], 0x1
1000020c5:	jne	0x1000020b9
1000020c7:	xor	ecx, ecx
1000020c9:	mov	r14d, 0x10
1000020cf:	jmp	0x1000020fa
1000020d1:	mov	rdx, qword ptr [rip + 0x1f28] ## literal pool symbol address: __DefaultRuneLocale
1000020d8:	mov	cl, 0x1
1000020da:	xor	r14d, r14d
1000020dd:	test	byte ptr [rdx + 4*rax + 0x3d], 0x4
1000020e2:	jne	0x1000020e9
1000020e4:	mov	rbx, rdi
1000020e7:	jmp	0x1000020fa
1000020e9:	mov	rbx, rdi
1000020ec:	movzx	eax, byte ptr [rbx + 0x1]
1000020f0:	inc	rbx
1000020f3:	test	byte ptr [rdx + 4*rax + 0x3d], 0x4
1000020f8:	jne	0x1000020ec
1000020fa:	cmp	rdi, rbx
1000020fd:	je	0x100002171
1000020ff:	cmp	al, 0x2e
100002101:	jne	0x100002118
100002103:	test	cl, cl
100002105:	je	0x100002171
100002107:	lea	r12, [rbx + 0x1]
10000210b:	mov	r14d, 0xa
100002111:	mov	edx, 0xa
100002116:	jmp	0x100002126
100002118:	test	cl, cl
10000211a:	mov	edx, 0x8
10000211f:	cmove	edx, r14d
100002123:	mov	r12, rbx
100002126:	lea	r15, [rbp - 0x40]
10000212a:	mov	rsi, r15
10000212d:	call	0x100003582 ## symbol stub for: _strtoll
100002132:	lea	rdx, [rip + 0x60b7]
100002139:	mov	qword ptr [rdx], rax
10000213c:	cmp	qword ptr [r15], rbx
10000213f:	jne	0x10000216a
100002141:	mov	cl, byte ptr [r12]
100002145:	cmp	cl, 0x62
100002148:	je	0x100002158
10000214a:	cmp	cl, 0x42
10000214d:	jne	0x100002166
10000214f:	shl	rax, 0xa
100002153:	mov	qword ptr [rdx], rax
100002156:	jmp	0x100002162
100002158:	shl	rax, 0x9
10000215c:	mov	qword ptr [rdx], rax
10000215f:	inc	r12
100002162:	mov	cl, byte ptr [r12]
100002166:	test	cl, cl
100002168:	je	0x100002180
10000216a:	mov	qword ptr [rdx], 0x0
100002171:	add	rsp, 0x18
100002175:	pop	rbx
100002176:	pop	r12
100002178:	pop	r13
10000217a:	pop	r14
10000217c:	pop	r15
10000217e:	pop	rbp
10000217f:	ret
100002180:	cmp	r14d, 0x10
100002184:	je	0x100002190
100002186:	cmp	r14d, 0xa
10000218a:	jne	0x1000021b8
10000218c:	mov	al, 0x64
10000218e:	jmp	0x100002192
100002190:	mov	al, 0x78
100002192:	lea	rdx, [rip + 0x6047]
100002199:	mov	rcx, qword ptr [rdx]
10000219c:	mov	rcx, qword ptr [rcx + 0x8]
1000021a0:	mov	rcx, qword ptr [rcx + 0x20]
1000021a4:	mov	byte ptr [rcx + 0x7], al
1000021a7:	mov	rcx, qword ptr [rdx]
1000021aa:	mov	rcx, qword ptr [rcx]
1000021ad:	mov	rcx, qword ptr [rcx + 0x8]
1000021b1:	mov	rcx, qword ptr [rcx + 0x20]
1000021b5:	mov	byte ptr [rcx + 0x7], al
1000021b8:	mov	rax, qword ptr [r13]
1000021bc:	mov	qword ptr [rax + 0x8], 0x0
1000021c4:	jmp	0x100002171
1000021c6:	call	0x100002640
1000021cb:	lea	rsi, [rip + 0x1b61] ## literal pool for: "%s: invalid length"
1000021d2:	mov	edi, 0x1
1000021d7:	mov	rdx, rbx
1000021da:	jmp	0x1000021e8
1000021dc:	lea	rsi, [rip + 0x1afd] ## literal pool for: "%s: invalid address base"
1000021e3:	mov	edi, 0x1
1000021e8:	xor	eax, eax
1000021ea:	call	0x1000034ce ## symbol stub for: _errx
1000021ef:	nop
1000021f0:	mov	eax, 0x80fffffb
1000021f5:	sti
	.byte 0xff #bad opcode
1000021f7:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000021fb:	call	qword ptr [rdx]
1000021fd:	cld
	.byte 0xff #bad opcode
1000021ff:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002203:	dec	dword ptr [rsi - 0x29000005]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000220b:	call	[rbx + 8*rdi - 0x48d0001]
	.byte 0xff #bad opcode
100002213:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002217:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000221b:	push	qword ptr [rdx - 0x5]
	.byte 0xff #bad opcode
10000221f:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002223:	jmp	qword ptr [rbx]
100002225:	cld
	.byte 0xff #bad opcode
100002227:	dec	dword ptr [rbx - 0x4]
	.byte 0xff #bad opcode
10000222b:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000222f:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002233:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002237:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000223b:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000223f:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002243:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002247:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000224b:	call	[rbx + 8*rdi - 0x290001]
	.byte 0xff #bad opcode
100002253:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002257:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000225b:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000225f:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002263:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002267:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000226b:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000226f:	call	[rsp + 8*rdi - 0x1]
100002273:	jmp	[rbp - 0x4]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002278:	jle	0x100002276
	.byte 0xff #bad opcode
10000227b:	dec	dword ptr [rdi - 0x71000004]
100002281:	sti
	.byte 0xff #bad opcode
100002283:	jmp	qword ptr [rax - 0x29000004]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000228b:	jmp	[rdx - 0x4e000005]
100002291:	cld
	.byte 0xff #bad opcode
100002293:	inc	edx
100002295:	cld
	.byte 0xff #bad opcode
100002297:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000229b:	push	qword ptr [rdx - 0x5]
	.byte 0xff #bad opcode
10000229f:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000022a3:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000022a7:	inc	dword ptr [rax - 0x29000005]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000022af:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000022b3:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000022b7:	jmp	qword ptr [rsi]
1000022b9:	std
	.byte 0xff #bad opcode
1000022bb:	push	qword ptr [rdi]
1000022bd:	std
	.byte 0xff #bad opcode
1000022bf:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000022c3:	dec	dword ptr [rbx - 0x3]
	.byte 0xff #bad opcode
1000022c7:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000022cb:	jmp	[rdx + 0x55fffffb]
1000022d1:	mov	rbp, rsp
1000022d4:	push	r15
1000022d6:	push	r14
1000022d8:	push	r13
1000022da:	push	r12
1000022dc:	push	rbx
1000022dd:	sub	rsp, 0x18
1000022e1:	mov	r15b, byte ptr [rdi]
1000022e4:	test	r15b, r15b
1000022e7:	je	0x1000025be
1000022ed:	movsx	r13d, r15b
1000022f1:	lea	r12, [rdi + 0x1]
1000022f5:	lea	eax, [r13 - 0x61]
1000022f9:	cmp	eax, 0x5
1000022fc:	ja	0x100002317
1000022fe:	lea	rcx, [rip + 0x323]
100002305:	movsxd	rax, dword ptr [rcx + 4*rax]
100002309:	add	rax, rcx
10000230c:	jmp	rax
10000230e:	lea	rdi, [rip + 0x1ab1] ## literal pool for: "16/1 \"%3_u \" \"\\n\""
100002315:	jmp	0x10000237d
100002317:	lea	eax, [r13 - 0x6f]
10000231b:	cmp	eax, 0x9
10000231e:	ja	0x1000025d2
100002324:	mov	ecx, 0x241
100002329:	bt	ecx, eax
10000232c:	jae	0x1000025d2
100002332:	movsx	eax, byte ptr [r12]
100002337:	cmp	eax, 0x4b
10000233a:	jg	0x100002359
10000233c:	cmp	eax, 0x43
10000233f:	je	0x10000242a
100002345:	cmp	eax, 0x49
100002348:	jne	0x1000023be
10000234a:	add	rdi, 0x2
10000234e:	mov	r14d, 0x4
100002354:	jmp	0x100002440
100002359:	cmp	eax, 0x4c
10000235c:	je	0x100002436
100002362:	cmp	eax, 0x53
100002365:	jne	0x1000023be
100002367:	add	rdi, 0x2
10000236b:	mov	r14d, 0x2
100002371:	jmp	0x100002440
100002376:	lea	rdi, [rip + 0x1a5b] ## literal pool for: "16/1 \"%3_c \" \"\\n\""
10000237d:	call	0x100002689
100002382:	jmp	0x1000025aa
100002387:	movsx	eax, byte ptr [r12]
10000238c:	cmp	eax, 0x44
10000238f:	je	0x1000024e7
100002395:	cmp	eax, 0x4c
100002398:	je	0x1000024f0
10000239e:	cmp	eax, 0x46
1000023a1:	jne	0x100002504
1000023a7:	add	rdi, 0x2
1000023ab:	mov	r9d, 0x6
1000023b1:	mov	ebx, 0x4
1000023b6:	mov	r12, rdi
1000023b9:	jmp	0x100002570
1000023be:	movzx	eax, al
1000023c1:	mov	r14d, 0x4
1000023c7:	mov	rcx, qword ptr [rip + 0x1c32] ## literal pool symbol address: __DefaultRuneLocale
1000023ce:	test	byte ptr [rcx + 4*rax + 0x3d], 0x4
1000023d3:	je	0x100002443
1000023d5:	call	0x100003498 ## symbol stub for: ___error
1000023da:	mov	dword ptr [rax], 0x0
1000023e0:	mov	rdi, r12
1000023e3:	lea	rsi, [rbp - 0x38]
1000023e7:	mov	edx, 0xa
1000023ec:	call	0x100003588 ## symbol stub for: _strtoul
1000023f1:	mov	r14, rax
1000023f4:	call	0x100003498 ## symbol stub for: ___error
1000023f9:	test	r14, r14
1000023fc:	je	0x1000025ed
100002402:	cmp	dword ptr [rax], 0x0
100002405:	jne	0x1000025ed
10000240b:	cmp	r14, 0x8
10000240f:	ja	0x100002603
100002415:	mov	eax, 0x116
10000241a:	bt	rax, r14
10000241e:	jae	0x100002603
100002424:	mov	r12, qword ptr [rbp - 0x38]
100002428:	jmp	0x100002443
10000242a:	add	rdi, 0x2
10000242e:	mov	r14d, 0x1
100002434:	jmp	0x100002440
100002436:	add	rdi, 0x2
10000243a:	mov	r14d, 0x8
100002440:	mov	r12, rdi
100002443:	lea	ecx, [8*r14]
10000244b:	mov	rax, -0x1
100002452:	shl	rax, cl
100002455:	not	rax
100002458:	xor	ecx, ecx
10000245a:	cmp	r15b, 0x78
10000245e:	sete	cl
100002461:	add	rcx, 0x3
100002465:	xor	esi, esi
100002467:	inc	esi
100002469:	shr	rax, cl
10000246c:	test	rax, rax
10000246f:	jne	0x100002467
100002471:	cmp	r15b, 0x75
100002475:	lea	rbx, [rip + 0x19e1] ## literal pool for: "0"
10000247c:	lea	r9, [rip + 0x1577] ## literal pool for: ""
100002483:	cmove	rbx, r9
100002487:	xor	ecx, ecx
100002489:	cmp	r15b, 0x64
10000248d:	cmove	rbx, r9
100002491:	sete	cl
100002494:	lea	r10d, [rcx + rsi]
100002498:	mov	eax, 0x10
10000249d:	xor	edx, edx
10000249f:	div	r14
1000024a2:	lea	r8d, [4*r14]
1000024aa:	sub	r8d, ecx
1000024ad:	sub	r8d, esi
1000024b0:	sub	rsp, 0x8
1000024b4:	lea	rdi, [rbp - 0x30]
1000024b8:	lea	rsi, [rip + 0x1983] ## literal pool for: "%lu/%lu \"%*s%%%s%d%c\" \"\\n\""
1000024bf:	mov	rdx, rax
1000024c2:	mov	rcx, r14
1000024c5:	xor	eax, eax
1000024c7:	push	r13
1000024c9:	push	r10
1000024cb:	push	rbx
1000024cc:	call	0x1000034b0 ## symbol stub for: _asprintf
1000024d1:	add	rsp, 0x20
1000024d5:	mov	rdi, qword ptr [rbp - 0x30]
1000024d9:	test	rdi, rdi
1000024dc:	jne	0x10000259c
1000024e2:	jmp	0x1000025cd
1000024e7:	add	rdi, 0x2
1000024eb:	mov	r12, rdi
1000024ee:	jmp	0x100002565
1000024f0:	add	rdi, 0x2
1000024f4:	mov	r12, rdi
1000024f7:	mov	r9d, 0x12
1000024fd:	mov	ebx, 0x10
100002502:	jmp	0x100002570
100002504:	movzx	eax, al
100002507:	mov	rcx, qword ptr [rip + 0x1af2] ## literal pool symbol address: __DefaultRuneLocale
10000250e:	test	byte ptr [rcx + 4*rax + 0x3d], 0x4
100002513:	je	0x100002565
100002515:	call	0x100003498 ## symbol stub for: ___error
10000251a:	mov	dword ptr [rax], 0x0
100002520:	mov	rdi, r12
100002523:	lea	rsi, [rbp - 0x38]
100002527:	mov	edx, 0xa
10000252c:	call	0x100003588 ## symbol stub for: _strtoul
100002531:	mov	rbx, rax
100002534:	call	0x100003498 ## symbol stub for: ___error
100002539:	test	rbx, rbx
10000253c:	je	0x1000025ed
100002542:	cmp	dword ptr [rax], 0x0
100002545:	jne	0x1000025ed
10000254b:	mov	r12, qword ptr [rbp - 0x38]
10000254f:	cmp	rbx, 0x4
100002553:	je	0x1000025b6
100002555:	cmp	rbx, 0x10
100002559:	je	0x1000024f7
10000255b:	cmp	rbx, 0x8
10000255f:	jne	0x100002614
100002565:	mov	r9d, 0xf
10000256b:	mov	ebx, 0x8
100002570:	mov	al, 0x10
100002572:	movzx	eax, al
100002575:	div	bl
100002577:	movzx	edx, al
10000257a:	lea	r8d, [r9 + 0x8]
10000257e:	lea	rdi, [rbp - 0x30]
100002582:	lea	rsi, [rip + 0x18fa] ## literal pool for: "%lu/%lu \" %%%d.%de \" \"\\n\""
100002589:	mov	rcx, rbx
10000258c:	xor	eax, eax
10000258e:	call	0x1000034b0 ## symbol stub for: _asprintf
100002593:	mov	rdi, qword ptr [rbp - 0x30]
100002597:	test	rdi, rdi
10000259a:	je	0x1000025e8
10000259c:	call	0x100002689
1000025a1:	mov	rdi, qword ptr [rbp - 0x30]
1000025a5:	call	0x100003504 ## symbol stub for: _free
1000025aa:	mov	r15b, byte ptr [r12]
1000025ae:	mov	rdi, r12
1000025b1:	jmp	0x1000022e4
1000025b6:	mov	r9d, 0x6
1000025bc:	jmp	0x100002570
1000025be:	add	rsp, 0x18
1000025c2:	pop	rbx
1000025c3:	pop	r12
1000025c5:	pop	r13
1000025c7:	pop	r14
1000025c9:	pop	r15
1000025cb:	pop	rbp
1000025cc:	ret
1000025cd:	call	0x1000033e0
1000025d2:	lea	rsi, [rip + 0x1811] ## literal pool for: "%c: unrecognised format character"
1000025d9:	mov	edi, 0x1
1000025de:	mov	edx, r13d
1000025e1:	xor	eax, eax
1000025e3:	call	0x1000034ce ## symbol stub for: _errx
1000025e8:	call	0x1000033f0
1000025ed:	lea	rsi, [rip + 0x1824] ## literal pool for: "%s: invalid size"
1000025f4:	mov	edi, 0x1
1000025f9:	mov	rdx, r12
1000025fc:	xor	eax, eax
1000025fe:	call	0x1000034ce ## symbol stub for: _errx
100002603:	lea	rsi, [rip + 0x181f] ## literal pool for: "unsupported int size %lu"
10000260a:	mov	edi, 0x1
10000260f:	mov	rdx, r14
100002612:	jmp	0x1000025fc
100002614:	lea	rsi, [rip + 0x1844] ## literal pool for: "unsupported floating point size %lu"
10000261b:	mov	edi, 0x1
100002620:	mov	rdx, rbx
100002623:	jmp	0x1000025fc
100002625:	nop	dword ptr [rax]
100002628:	out	0xfc, al
	.byte 0xff #bad opcode
10000262b:	jmp	[rdx + 0x4effffff]
100002631:	std
	.byte 0xff #bad opcode
100002633:	dec	dword ptr [rdx]
100002635:	std
	.byte 0xff #bad opcode
100002637:	jmp	[rdx + 0x5fffffff]
10000263d:	std
	.byte 0xff #bad opcode
10000263f:	call	qword ptr [rbp + 0x48]
100002642:	mov	ebp, esp
100002644:	push	rbx
100002645:	push	rax
100002646:	mov	rbx, qword ptr [rip + 0x19cb] ## literal pool symbol address: ___stderrp
10000264d:	mov	rcx, qword ptr [rbx]
100002650:	lea	rdi, [rip + 0x16f8] ## literal pool for: "usage: od [-aBbcDdeFfHhIiLlOosvXx] [-A base] [-j skip] [-N length] [-t type]\n"
100002657:	mov	esi, 0x4d
10000265c:	mov	edx, 0x1
100002661:	call	0x100003522 ## symbol stub for: _fwrite
100002666:	mov	rcx, qword ptr [rbx]
100002669:	lea	rdi, [rip + 0x172d] ## literal pool for: "          [[+]offset[.][Bb]] [file ...]\n"
100002670:	mov	esi, 0x28
100002675:	mov	edx, 0x1
10000267a:	call	0x100003522 ## symbol stub for: _fwrite
10000267f:	mov	edi, 0x1
100002684:	call	0x1000034d4 ## symbol stub for: _exit
100002689:	push	rbp
10000268a:	mov	rbp, rsp
10000268d:	push	rbx
10000268e:	push	rax
10000268f:	mov	rbx, rdi
100002692:	cmp	byte ptr [rip + 0x5b33], 0x1
100002699:	jne	0x1000026a7
10000269b:	lea	rdi, [rip + 0x176a] ## literal pool for: "\"         \""
1000026a2:	call	0x1000027ed
1000026a7:	mov	rdi, rbx
1000026aa:	call	0x1000027ed
1000026af:	mov	byte ptr [rip + 0x5b16], 0x1
1000026b6:	add	rsp, 0x8
1000026ba:	pop	rbx
1000026bb:	pop	rbp
1000026bc:	ret
1000026bd:	nop
1000026be:	nop
1000026bf:	nop
1000026c0:	push	rbp
1000026c1:	mov	rbp, rsp
1000026c4:	push	r15
1000026c6:	push	r14
1000026c8:	push	r13
1000026ca:	push	r12
1000026cc:	push	rbx
1000026cd:	sub	rsp, 0x818
1000026d4:	mov	rbx, rdi
1000026d7:	mov	rax, qword ptr [rip + 0x1932] ## literal pool symbol address: ___stack_chk_guard
1000026de:	mov	rax, qword ptr [rax]
1000026e1:	mov	qword ptr [rbp - 0x30], rax
1000026e5:	lea	rsi, [rip + 0x13b9] ## literal pool for: "r"
1000026ec:	call	0x1000034f2 ## symbol stub for: _fopen
1000026f1:	test	rax, rax
1000026f4:	je	0x1000027d2
1000026fa:	mov	r14, rax
1000026fd:	lea	r15, [rbp - 0x840]
100002704:	mov	rdi, r15
100002707:	mov	esi, 0x801
10000270c:	mov	rdx, rax
10000270f:	call	0x1000034e6 ## symbol stub for: _fgets
100002714:	test	rax, rax
100002717:	je	0x1000027a8
10000271d:	mov	r12, qword ptr [rip + 0x18dc] ## literal pool symbol address: __DefaultRuneLocale
100002724:	mov	r13d, 0x4000
10000272a:	mov	rdi, r15
10000272d:	mov	esi, 0xa
100002732:	call	0x100003534 ## symbol stub for: _index
100002737:	test	rax, rax
10000273a:	je	0x10000278e
10000273c:	mov	byte ptr [rax], 0x0
10000273f:	mov	al, byte ptr [rbp - 0x840]
100002745:	test	al, al
100002747:	je	0x100002793
100002749:	mov	rbx, r15
10000274c:	test	al, al
10000274e:	js	0x10000275d
100002750:	movzx	eax, al
100002753:	mov	eax, dword ptr [r12 + 4*rax + 0x3c]
100002758:	and	eax, r13d
10000275b:	jmp	0x10000276a
10000275d:	movzx	edi, al
100002760:	mov	esi, 0x4000
100002765:	call	0x10000349e ## symbol stub for: ___maskrune
10000276a:	test	eax, eax
10000276c:	je	0x10000277a
10000276e:	mov	al, byte ptr [rbx + 0x1]
100002771:	inc	rbx
100002774:	test	al, al
100002776:	jne	0x10000274c
100002778:	jmp	0x100002793
10000277a:	mov	al, byte ptr [rbx]
10000277c:	cmp	al, 0x23
10000277e:	je	0x100002793
100002780:	test	al, al
100002782:	je	0x100002793
100002784:	mov	rdi, rbx
100002787:	call	0x1000027ed
10000278c:	jmp	0x100002793
10000278e:	call	0x100003403
100002793:	mov	rdi, r15
100002796:	mov	esi, 0x801
10000279b:	mov	rdx, r14
10000279e:	call	0x1000034e6 ## symbol stub for: _fgets
1000027a3:	test	rax, rax
1000027a6:	jne	0x10000272a
1000027a8:	mov	rdi, r14
1000027ab:	call	0x1000034da ## symbol stub for: _fclose
1000027b0:	mov	rax, qword ptr [rip + 0x1859] ## literal pool symbol address: ___stack_chk_guard
1000027b7:	mov	rax, qword ptr [rax]
1000027ba:	cmp	rax, qword ptr [rbp - 0x30]
1000027be:	jne	0x1000027e8
1000027c0:	add	rsp, 0x818
1000027c7:	pop	rbx
1000027c8:	pop	r12
1000027ca:	pop	r13
1000027cc:	pop	r14
1000027ce:	pop	r15
1000027d0:	pop	rbp
1000027d1:	ret
1000027d2:	lea	rsi, [rip + 0x12a5] ## literal pool for: "%s"
1000027d9:	mov	edi, 0x1
1000027de:	mov	rdx, rbx
1000027e1:	xor	eax, eax
1000027e3:	call	0x1000034c8 ## symbol stub for: _err
1000027e8:	call	0x1000034aa ## symbol stub for: ___stack_chk_fail
1000027ed:	push	rbp
1000027ee:	mov	rbp, rsp
1000027f1:	push	r15
1000027f3:	push	r14
1000027f5:	push	r13
1000027f7:	push	r12
1000027f9:	push	rbx
1000027fa:	sub	rsp, 0x18
1000027fe:	mov	r13, rdi
100002801:	mov	edi, 0x1
100002806:	mov	esi, 0x18
10000280b:	call	0x1000034c2 ## symbol stub for: _calloc
100002810:	test	rax, rax
100002813:	je	0x100002a7d
100002819:	mov	r12, rax
10000281c:	lea	rax, [rip + 0x59bd]
100002823:	cmp	qword ptr [rax], 0x0
100002827:	je	0x100002830
100002829:	mov	rax, qword ptr [rip + 0x59a0]
100002830:	mov	qword ptr [rax], r12
100002833:	mov	qword ptr [rip + 0x5996], r12
10000283a:	add	r12, 0x8
10000283e:	mov	r14, qword ptr [rip + 0x17bb] ## literal pool symbol address: __DefaultRuneLocale
100002845:	mov	r15d, 0x4000
10000284b:	mov	qword ptr [rbp - 0x30], r13
10000284f:	dec	r13
100002852:	movzx	ebx, byte ptr [r13 + 0x1]
100002857:	test	bl, bl
100002859:	js	0x100002865
10000285b:	mov	eax, dword ptr [r14 + 4*rbx + 0x3c]
100002860:	and	eax, r15d
100002863:	jmp	0x100002871
100002865:	mov	esi, 0x4000
10000286a:	mov	edi, ebx
10000286c:	call	0x10000349e ## symbol stub for: ___maskrune
100002871:	inc	r13
100002874:	test	eax, eax
100002876:	jne	0x100002852
100002878:	test	bl, bl
10000287a:	je	0x100002a5b
100002880:	mov	edi, 0x1
100002885:	mov	esi, 0x28
10000288a:	call	0x1000034c2 ## symbol stub for: _calloc
10000288f:	test	rax, rax
100002892:	je	0x100002a73
100002898:	mov	qword ptr [r12], rax
10000289c:	mov	qword ptr [rbp - 0x38], rax
1000028a0:	mov	dword ptr [rax + 0x14], 0x1
1000028a7:	movzx	ebx, byte ptr [r13]
1000028ac:	mov	eax, dword ptr [r14 + 4*rbx + 0x3c]
1000028b1:	bt	eax, 0xa
1000028b5:	jb	0x1000028bf
1000028b7:	mov	r12, r13
1000028ba:	jmp	0x100002940
1000028bf:	mov	r12, r13
1000028c2:	jae	0x1000028db
1000028c4:	mov	r12, r13
1000028c7:	movzx	ebx, byte ptr [r12 + 0x1]
1000028cd:	inc	r12
1000028d0:	mov	eax, dword ptr [r14 + 4*rbx + 0x3c]
1000028d5:	bt	eax, 0xa
1000028d9:	jb	0x1000028c7
1000028db:	test	bl, bl
1000028dd:	js	0x1000028e6
1000028df:	and	eax, 0x4000
1000028e4:	jmp	0x1000028f3
1000028e6:	movzx	edi, bl
1000028e9:	mov	esi, 0x4000
1000028ee:	call	0x10000349e ## symbol stub for: ___maskrune
1000028f3:	cmp	bl, 0x2f
1000028f6:	je	0x100002900
1000028f8:	test	eax, eax
1000028fa:	je	0x100002a6a
100002900:	mov	rdi, r13
100002903:	call	0x1000034b6 ## symbol stub for: _atoi
100002908:	mov	rcx, qword ptr [rbp - 0x38]
10000290c:	mov	dword ptr [rcx + 0x14], eax
10000290f:	mov	dword ptr [rcx + 0x10], 0x2
100002916:	movzx	edi, byte ptr [r12 + 0x1]
10000291c:	test	dil, dil
10000291f:	js	0x10000292b
100002921:	mov	eax, dword ptr [r14 + 4*rdi + 0x3c]
100002926:	and	eax, r15d
100002929:	jmp	0x100002935
10000292b:	mov	esi, 0x4000
100002930:	call	0x10000349e ## symbol stub for: ___maskrune
100002935:	inc	r12
100002938:	test	eax, eax
10000293a:	jne	0x100002916
10000293c:	mov	bl, byte ptr [r12]
100002940:	cmp	bl, 0x2f
100002943:	jne	0x10000296f
100002945:	movzx	edi, byte ptr [r12 + 0x1]
10000294b:	test	dil, dil
10000294e:	js	0x10000295a
100002950:	mov	eax, dword ptr [r14 + 4*rdi + 0x3c]
100002955:	and	eax, r15d
100002958:	jmp	0x100002964
10000295a:	mov	esi, 0x4000
10000295f:	call	0x10000349e ## symbol stub for: ___maskrune
100002964:	inc	r12
100002967:	test	eax, eax
100002969:	jne	0x100002945
10000296b:	mov	bl, byte ptr [r12]
10000296f:	movzx	eax, bl
100002972:	mov	eax, dword ptr [r14 + 4*rax + 0x3c]
100002977:	bt	eax, 0xa
10000297b:	jb	0x100002982
10000297d:	mov	r13, r12
100002980:	jmp	0x1000029f5
100002982:	mov	r13, r12
100002985:	jae	0x10000299d
100002987:	mov	r13, r12
10000298a:	movzx	ebx, byte ptr [r13 + 0x1]
10000298f:	inc	r13
100002992:	mov	eax, dword ptr [r14 + 4*rbx + 0x3c]
100002997:	bt	eax, 0xa
10000299b:	jb	0x10000298a
10000299d:	test	bl, bl
10000299f:	js	0x1000029a8
1000029a1:	and	eax, 0x4000
1000029a6:	jmp	0x1000029b5
1000029a8:	movzx	edi, bl
1000029ab:	mov	esi, 0x4000
1000029b0:	call	0x10000349e ## symbol stub for: ___maskrune
1000029b5:	test	eax, eax
1000029b7:	je	0x100002a6a
1000029bd:	mov	rdi, r12
1000029c0:	call	0x1000034b6 ## symbol stub for: _atoi
1000029c5:	mov	rcx, qword ptr [rbp - 0x38]
1000029c9:	mov	dword ptr [rcx + 0x18], eax
1000029cc:	movzx	edi, byte ptr [r13 + 0x1]
1000029d1:	test	dil, dil
1000029d4:	js	0x1000029e0
1000029d6:	mov	eax, dword ptr [r14 + 4*rdi + 0x3c]
1000029db:	and	eax, r15d
1000029de:	jmp	0x1000029ea
1000029e0:	mov	esi, 0x4000
1000029e5:	call	0x10000349e ## symbol stub for: ___maskrune
1000029ea:	inc	r13
1000029ed:	test	eax, eax
1000029ef:	jne	0x1000029cc
1000029f1:	mov	bl, byte ptr [r13]
1000029f5:	cmp	bl, 0x22
1000029f8:	jne	0x100002a6a
1000029fa:	lea	r15, [r13 + 0x1]
1000029fe:	add	r13, 0x2
100002a02:	xor	ebx, ebx
100002a04:	mov	al, byte ptr [r13 - 0x1]
100002a08:	cmp	al, 0x22
100002a0a:	je	0x100002a18
100002a0c:	inc	r13
100002a0f:	inc	rbx
100002a12:	test	al, al
100002a14:	jne	0x100002a04
100002a16:	jmp	0x100002a6a
100002a18:	lea	rdi, [rbx + 0x1]
100002a1c:	call	0x100003540 ## symbol stub for: _malloc
100002a21:	mov	r12, qword ptr [rbp - 0x38]
100002a25:	mov	qword ptr [r12 + 0x20], rax
100002a2a:	test	rax, rax
100002a2d:	je	0x100002a78
100002a2f:	mov	rdi, rax
100002a32:	mov	rsi, r15
100002a35:	mov	rdx, rbx
100002a38:	call	0x10000357c ## symbol stub for: _strncpy
100002a3d:	mov	rax, qword ptr [r12 + 0x20]
100002a42:	mov	byte ptr [rax + rbx], 0x0
100002a46:	mov	rdi, qword ptr [r12 + 0x20]
100002a4b:	call	0x100002a9c
100002a50:	mov	r15d, 0x4000
100002a56:	jmp	0x10000284f
100002a5b:	add	rsp, 0x18
100002a5f:	pop	rbx
100002a60:	pop	r12
100002a62:	pop	r13
100002a64:	pop	r14
100002a66:	pop	r15
100002a68:	pop	rbp
100002a69:	ret
100002a6a:	mov	rdi, qword ptr [rbp - 0x30]
100002a6e:	call	0x100002a82
100002a73:	call	0x100003436
100002a78:	call	0x100003446
100002a7d:	call	0x100003426
100002a82:	push	rbp
100002a83:	mov	rbp, rsp
100002a86:	mov	rdx, rdi
100002a89:	lea	rsi, [rip + 0x1489] ## literal pool for: "\"%s\": bad format"
100002a90:	mov	edi, 0x1
100002a95:	xor	eax, eax
100002a97:	call	0x1000034ce ## symbol stub for: _errx
100002a9c:	push	rbp
100002a9d:	mov	rbp, rsp
100002aa0:	lea	rax, [rip + 0x69]
100002aa7:	mov	rcx, rdi
100002aaa:	mov	dl, byte ptr [rdi]
100002aac:	cmp	dl, 0x5c
100002aaf:	je	0x100002ab7
100002ab1:	test	dl, dl
100002ab3:	jne	0x100002b01
100002ab5:	jmp	0x100002b09
100002ab7:	mov	dl, byte ptr [rdi + 0x1]
100002aba:	movsx	esi, dl
100002abd:	cmp	esi, 0x6d
100002ac0:	jle	0x100002ad7
100002ac2:	add	esi, -0x6e
100002ac5:	cmp	esi, 0x8
100002ac8:	ja	0x100002afc
100002aca:	movsxd	rsi, dword ptr [rax + 4*rsi]
100002ace:	add	rsi, rax
100002ad1:	jmp	rsi
100002ad3:	mov	dl, 0xa
100002ad5:	jmp	0x100002afc
100002ad7:	cmp	esi, 0x61
100002ada:	je	0x100002af6
100002adc:	cmp	esi, 0x62
100002adf:	je	0x100002afa
100002ae1:	cmp	esi, 0x66
100002ae4:	jne	0x100002afc
100002ae6:	mov	dl, 0xc
100002ae8:	jmp	0x100002afc
100002aea:	mov	dl, 0xd
100002aec:	jmp	0x100002afc
100002aee:	mov	dl, 0x9
100002af0:	jmp	0x100002afc
100002af2:	mov	dl, 0xb
100002af4:	jmp	0x100002afc
100002af6:	mov	dl, 0x7
100002af8:	jmp	0x100002afc
100002afa:	mov	dl, 0x8
100002afc:	inc	rdi
100002aff:	mov	byte ptr [rcx], dl
100002b01:	inc	rdi
100002b04:	inc	rcx
100002b07:	jmp	0x100002aaa
100002b09:	mov	byte ptr [rcx], 0x0
100002b0c:	pop	rbp
100002b0d:	ret
100002b0e:	nop
100002b10:	ret
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002b14:	in	al, dx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002b18:	in	al, dx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002b1c:	in	al, dx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xda #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002b24:	in	al, dx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002b28:	fdivp	st(7), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002b2c:	in	al, dx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002b2f:	jmp	rdx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002b33:	call	qword ptr [rbp + 0x48]
100002b36:	mov	ebp, esp
100002b38:	push	r15
100002b3a:	push	r14
100002b3c:	push	r13
100002b3e:	push	r12
100002b40:	push	rbx
100002b41:	push	rax
100002b42:	mov	r13, qword ptr [rdi + 0x8]
100002b46:	xor	eax, eax
100002b48:	test	r13, r13
100002b4b:	je	0x100002c51
100002b51:	lea	r15, [rip + 0x13f2] ## literal pool for: "#-+ 0123456789"
100002b58:	mov	r12, qword ptr [rip + 0x14a1] ## literal pool symbol address: __DefaultRuneLocale
100002b5f:	mov	r14d, dword ptr [r13 + 0x18]
100002b63:	test	r14d, r14d
100002b66:	jne	0x100002c3c
100002b6c:	mov	dword ptr [rbp - 0x30], eax
100002b6f:	mov	rbx, qword ptr [r13 + 0x20]
100002b73:	xor	r14d, r14d
100002b76:	mov	dword ptr [rbp - 0x2c], 0x0
100002b7d:	mov	al, byte ptr [rbx]
100002b7f:	cmp	al, 0x25
100002b81:	je	0x100002b90
100002b83:	test	al, al
100002b85:	jne	0x100002c31
100002b8b:	jmp	0x100002c39
100002b90:	inc	rbx
100002b93:	movzx	esi, byte ptr [rbx]
100002b96:	mov	rdi, r15
100002b99:	call	0x100003534 ## symbol stub for: _index
100002b9e:	inc	rbx
100002ba1:	test	rax, rax
100002ba4:	jne	0x100002b93
100002ba6:	mov	al, byte ptr [rbx - 0x1]
100002ba9:	cmp	al, 0x2e
100002bab:	jne	0x100002bd4
100002bad:	movzx	eax, byte ptr [rbx]
100002bb0:	test	byte ptr [r12 + 4*rax + 0x3d], 0x4
100002bb6:	je	0x100002bd7
100002bb8:	mov	rdi, rbx
100002bbb:	call	0x1000034b6 ## symbol stub for: _atoi
100002bc0:	mov	dword ptr [rbp - 0x2c], eax
100002bc3:	movzx	eax, byte ptr [rbx + 0x1]
100002bc7:	inc	rbx
100002bca:	test	byte ptr [r12 + 4*rax + 0x3d], 0x4
100002bd0:	jne	0x100002bc3
100002bd2:	jmp	0x100002bd7
100002bd4:	dec	rbx
100002bd7:	cmp	al, 0x5e
100002bd9:	jle	0x100002bfa
100002bdb:	add	al, -0x5f
100002bdd:	cmp	al, 0x19
100002bdf:	ja	0x100002c31
100002be1:	movzx	eax, al
100002be4:	lea	rcx, [rip + 0x75]
100002beb:	movsxd	rax, dword ptr [rcx + 4*rax]
100002bef:	add	rax, rcx
100002bf2:	jmp	rax
100002bf4:	add	r14d, 0x4
100002bf8:	jmp	0x100002c31
100002bfa:	cmp	al, 0x45
100002bfc:	je	0x100002c08
100002bfe:	cmp	al, 0x47
100002c00:	je	0x100002c08
100002c02:	cmp	al, 0x58
100002c04:	je	0x100002bf4
100002c06:	jmp	0x100002c31
100002c08:	add	r14d, 0x8
100002c0c:	jmp	0x100002c31
100002c0e:	mov	al, byte ptr [rbx + 0x1]
100002c11:	inc	rbx
100002c14:	add	al, -0x63
100002c16:	cmp	al, 0x12
100002c18:	ja	0x100002c31
100002c1a:	movzx	eax, al
100002c1d:	mov	ecx, 0x42001
100002c22:	bt	rcx, rax
100002c26:	jae	0x100002c31
100002c28:	inc	r14d
100002c2b:	jmp	0x100002c31
100002c2d:	add	r14d, dword ptr [rbp - 0x2c]
100002c31:	inc	rbx
100002c34:	jmp	0x100002b7d
100002c39:	mov	eax, dword ptr [rbp - 0x30]
100002c3c:	imul	r14d, dword ptr [r13 + 0x14]
100002c41:	add	eax, r14d
100002c44:	mov	r13, qword ptr [r13]
100002c48:	test	r13, r13
100002c4b:	jne	0x100002b5f
100002c51:	add	rsp, 0x8
100002c55:	pop	rbx
100002c56:	pop	r12
100002c58:	pop	r13
100002c5a:	pop	r14
100002c5c:	pop	r15
100002c5e:	pop	rbp
100002c5f:	ret
100002c60:	scasb	al, byte ptr es:[rdi]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002c63:	call	rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002c67:	call	rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002c6b:	call	rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002c6f:	dec	eax
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002c73:	call	qword ptr [rdi + 8*rdi - 0x570001]
	.byte 0xff #bad opcode
100002c7b:	jmp	[rax - 0x57000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002c83:	call	rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002c87:	call	qword ptr [rdi + 8*rdi - 0x2e0001]
	.byte 0xff #bad opcode
100002c8f:	call	rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002c93:	call	rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002c97:	call	rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002c9b:	call	rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002c9f:	call	qword ptr [rdi + 8*rdi - 0x2e0001]
	.byte 0xff #bad opcode
100002ca7:	call	rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002cab:	call	rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002caf:	dec	ebp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002cb3:	call	rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002cb7:	call	qword ptr [rdi + 8*rdi - 0x2e0001]
	.byte 0xff #bad opcode
100002cbf:	call	rcx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002cc3:	call	qword ptr [rdi + 8*rdi + 0x4855ffff]
100002cca:	mov	ebp, esp
100002ccc:	push	r15
100002cce:	push	r14
100002cd0:	push	r13
100002cd2:	push	r12
100002cd4:	push	rbx
100002cd5:	sub	rsp, 0x38
100002cd9:	mov	qword ptr [rbp - 0x48], rdi
100002cdd:	mov	r13, qword ptr [rdi + 0x8]
100002ce1:	test	r13, r13
100002ce4:	je	0x1000031bf
100002cea:	xor	eax, eax
100002cec:	mov	qword ptr [rbp - 0x40], rax
100002cf0:	mov	rsi, qword ptr [rip + 0x1309] ## literal pool symbol address: __DefaultRuneLocale
100002cf7:	xor	r12d, r12d
100002cfa:	mov	r14, qword ptr [r13 + 0x20]
100002cfe:	cmp	byte ptr [r14], 0x0
100002d02:	je	0x1000030e2
100002d08:	lea	rbx, [r13 + 0x8]
100002d0c:	mov	dword ptr [rbp - 0x30], 0x0
100002d13:	mov	qword ptr [rbp - 0x58], rbx
100002d17:	mov	edi, 0x1
100002d1c:	mov	esi, 0xb0
100002d21:	call	0x1000034c2 ## symbol stub for: _calloc
100002d26:	test	rax, rax
100002d29:	je	0x1000031ce
100002d2f:	mov	r15, rax
100002d32:	cmp	qword ptr [rbx], 0x0
100002d36:	mov	rcx, r12
100002d39:	mov	rax, r12
100002d3c:	cmove	rax, rbx
100002d40:	mov	qword ptr [rax], r15
100002d43:	lea	r12, [r14 + 0x1]
100002d47:	mov	qword ptr [rbp - 0x38], r14
100002d4b:	mov	al, byte ptr [r14]
100002d4e:	test	al, al
100002d50:	je	0x1000030c8
100002d56:	cmp	al, 0x25
100002d58:	je	0x100002d62
100002d5a:	inc	r14
100002d5d:	inc	r12
100002d60:	jmp	0x100002d4b
100002d62:	cmp	dword ptr [r13 + 0x18], 0x0
100002d67:	lea	rbx, [rip + 0x11dc] ## literal pool for: "#-+ 0123456789"
100002d6e:	je	0x100002d96
100002d70:	movzx	esi, byte ptr [r14 + 0x1]
100002d75:	inc	r14
100002d78:	lea	rdi, [rip + 0x11ca] ## literal pool for: ".#-+ 0123456789"
100002d7f:	call	0x100003534 ## symbol stub for: _index
100002d84:	test	rax, rax
100002d87:	jne	0x100002d70
100002d89:	mov	al, byte ptr [r14]
100002d8c:	mov	ecx, 0x1
100002d91:	mov	r12, r14
100002d94:	jmp	0x100002df6
100002d96:	movzx	esi, byte ptr [r12]
100002d9b:	mov	rdi, rbx
100002d9e:	call	0x100003534 ## symbol stub for: _index
100002da3:	inc	r12
100002da6:	test	rax, rax
100002da9:	jne	0x100002d96
100002dab:	mov	al, byte ptr [r12 - 0x1]
100002db0:	xor	ecx, ecx
100002db2:	cmp	al, 0x2e
100002db4:	jne	0x100002df3
100002db6:	movzx	eax, byte ptr [r12]
100002dbb:	mov	rdx, qword ptr [rip + 0x123e] ## literal pool symbol address: __DefaultRuneLocale
100002dc2:	test	byte ptr [rdx + 4*rax + 0x3d], 0x4
100002dc7:	je	0x100002df6
100002dc9:	mov	rdi, r12
100002dcc:	call	0x1000034b6 ## symbol stub for: _atoi
100002dd1:	mov	qword ptr [rbp - 0x40], rax
100002dd5:	mov	rcx, qword ptr [rip + 0x1224] ## literal pool symbol address: __DefaultRuneLocale
100002ddc:	movzx	eax, byte ptr [r12 + 0x1]
100002de2:	inc	r12
100002de5:	test	byte ptr [rcx + 4*rax + 0x3d], 0x4
100002dea:	jne	0x100002ddc
100002dec:	mov	ecx, 0x2
100002df1:	jmp	0x100002df6
100002df3:	dec	r12
100002df6:	lea	r8, [r12 + 0x1]
100002dfb:	mov	byte ptr [rbp - 0x2b], al
100002dfe:	mov	byte ptr [rbp - 0x2a], 0x0
100002e02:	movsx	edx, al
100002e05:	cmp	edx, 0x5e
100002e08:	mov	qword ptr [rbp - 0x50], r13
100002e0c:	jle	0x100002e66
100002e0e:	add	edx, -0x5f
100002e11:	cmp	edx, 0x19
100002e14:	ja	0x1000031eb
100002e1a:	mov	esi, 0x20
100002e1f:	lea	rdi, [rip + 0x3f2]
100002e26:	movsxd	rdx, dword ptr [rdi + 4*rdx]
100002e2a:	add	rdx, rdi
100002e2d:	jmp	rdx
100002e2f:	lea	r8, [r12 + 0x2]
100002e34:	mov	al, byte ptr [r12 + 0x1]
100002e39:	cmp	al, 0x6d
100002e3b:	jg	0x100002f4c
100002e41:	cmp	al, 0x41
100002e43:	je	0x100002f8b
100002e49:	cmp	al, 0x61
100002e4b:	je	0x100002f97
100002e51:	cmp	al, 0x63
100002e53:	jne	0x100003206
100002e59:	mov	dword ptr [r15 + 0x8], 0x4
100002e61:	jmp	0x10000300b
100002e66:	cmp	edx, 0x45
100002e69:	je	0x100002eb8
100002e6b:	cmp	edx, 0x47
100002e6e:	je	0x100002eb8
100002e70:	cmp	edx, 0x58
100002e73:	jne	0x1000031eb
100002e79:	mov	esi, 0x200
100002e7e:	mov	dword ptr [r15 + 0x8], esi
100002e82:	mov	byte ptr [rbp - 0x29], 0x0
100002e86:	mov	byte ptr [rbp - 0x2a], al
100002e89:	mov	byte ptr [rbp - 0x2b], 0x71
100002e8d:	mov	eax, dword ptr [r13 + 0x18]
100002e91:	cmp	rax, 0x8
100002e95:	ja	0x1000031dd
100002e9b:	lea	rcx, [rip + 0x3f2]
100002ea2:	movsxd	rax, dword ptr [rcx + 4*rax]
100002ea6:	add	rax, rcx
100002ea9:	jmp	rax
100002eab:	mov	dword ptr [r15 + 0xc], 0x2
100002eb3:	jmp	0x10000301e
100002eb8:	mov	dword ptr [r15 + 0x8], 0x10
100002ec0:	mov	ecx, dword ptr [r13 + 0x18]
100002ec4:	rol	ecx, 0x1e
100002ec7:	cmp	ecx, 0x4
100002eca:	ja	0x1000031dd
100002ed0:	lea	rdx, [rip + 0x3a9]
100002ed7:	movsxd	rcx, dword ptr [rdx + 4*rcx]
100002edb:	add	rcx, rdx
100002ede:	jmp	rcx
100002ee0:	mov	dword ptr [r15 + 0xc], 0x8
100002ee8:	jmp	0x10000301e
100002eed:	mov	dword ptr [r15 + 0xc], 0x4
100002ef5:	jmp	0x10000301e
100002efa:	mov	byte ptr [rbp - 0x29], 0x0
100002efe:	mov	byte ptr [rbp - 0x2a], al
100002f01:	mov	byte ptr [rbp - 0x2b], 0x4c
100002f05:	mov	dword ptr [r15 + 0xc], 0x10
100002f0d:	jmp	0x10000301e
100002f12:	mov	dword ptr [r15 + 0x8], 0x8
100002f1a:	cmp	dword ptr [r13 + 0x18], 0x1
100002f1f:	jbe	0x100003016
100002f25:	jmp	0x1000031dd
100002f2a:	mov	dword ptr [r15 + 0x8], 0x80
100002f32:	cmp	ecx, 0x1
100002f35:	je	0x100002f71
100002f37:	cmp	ecx, 0x2
100002f3a:	je	0x100002f7e
100002f3c:	test	ecx, ecx
100002f3e:	mov	r14, r15
100002f41:	jne	0x100003021
100002f47:	jmp	0x100003201
100002f4c:	cmp	al, 0x6e
100002f4e:	je	0x100002fd7
100002f54:	cmp	al, 0x70
100002f56:	je	0x100002fff
100002f5c:	cmp	al, 0x75
100002f5e:	jne	0x100003206
100002f64:	mov	dword ptr [r15 + 0x8], 0x100
100002f6c:	jmp	0x10000300b
100002f71:	mov	eax, dword ptr [r13 + 0x18]
100002f75:	mov	dword ptr [r15 + 0xc], eax
100002f79:	jmp	0x10000301e
100002f7e:	mov	rax, qword ptr [rbp - 0x40]
100002f82:	mov	dword ptr [r15 + 0xc], eax
100002f86:	jmp	0x10000301e
100002f8b:	mov	qword ptr [rip + 0x526e], r13
100002f92:	or	byte ptr [r13 + 0x10], 0x1
100002f97:	mov	dword ptr [r15 + 0x8], 0x1
100002f9f:	mov	al, byte ptr [r12 + 0x2]
100002fa4:	lea	ecx, [rax - 0x64]
100002fa7:	cmp	cl, 0x14
100002faa:	ja	0x10000320e
100002fb0:	movzx	ecx, cl
100002fb3:	mov	edx, 0x100801
100002fb8:	bt	rdx, rcx
100002fbc:	jae	0x10000320e
100002fc2:	mov	r14, r15
100002fc5:	lea	r8, [r12 + 0x3]
100002fca:	mov	byte ptr [rbp - 0x2b], 0x71
100002fce:	mov	byte ptr [rbp - 0x2a], al
100002fd1:	mov	byte ptr [rbp - 0x29], 0x0
100002fd5:	jmp	0x100003021
100002fd7:	mov	qword ptr [rip + 0x5222], r13
100002fde:	mov	dword ptr [r13 + 0x10], 0x1
100002fe6:	mov	dword ptr [r15 + 0x8], 0x400
100002fee:	mov	byte ptr [rbp - 0x2b], 0x0
100002ff2:	lea	rax, [rip + 0xeb2] ## literal pool for: "\n"
100002ff9:	mov	qword ptr [rbp - 0x38], rax
100002ffd:	jmp	0x10000301e
100002fff:	mov	dword ptr [r15 + 0x8], 0x40
100003007:	mov	byte ptr [rbp - 0x2b], 0x63
10000300b:	cmp	dword ptr [r13 + 0x18], 0x1
100003010:	ja	0x1000031f9
100003016:	mov	dword ptr [r15 + 0xc], 0x1
10000301e:	mov	r14, r15
100003021:	mov	r13b, byte ptr [r8]
100003024:	mov	byte ptr [r12], 0x0
100003029:	mov	rbx, qword ptr [rbp - 0x38]
10000302d:	mov	rdi, rbx
100003030:	mov	r15, r8
100003033:	call	0x100003576 ## symbol stub for: _strlen
100003038:	lea	rsi, [rax + 0x2]
10000303c:	mov	edi, 0x1
100003041:	call	0x1000034c2 ## symbol stub for: _calloc
100003046:	mov	qword ptr [r14 + 0x18], rax
10000304a:	test	rax, rax
10000304d:	je	0x1000031d3
100003053:	mov	rdi, rax
100003056:	mov	rsi, rbx
100003059:	call	0x100003570 ## symbol stub for: _strcpy
10000305e:	mov	rdi, qword ptr [r14 + 0x18]
100003062:	lea	rsi, [rbp - 0x2b]
100003066:	call	0x100003564 ## symbol stub for: _strcat
10000306b:	mov	byte ptr [r15], r13b
10000306e:	sub	r12, rbx
100003071:	add	r12, qword ptr [r14 + 0x18]
100003075:	mov	qword ptr [r14 + 0x10], r12
100003079:	mov	rcx, r14
10000307c:	test	byte ptr [r14 + 0x8], 0x1
100003081:	mov	r14, r15
100003084:	jne	0x1000030a7
100003086:	mov	r13, qword ptr [rbp - 0x50]
10000308a:	cmp	dword ptr [r13 + 0x18], 0x0
10000308f:	mov	rbx, qword ptr [rbp - 0x58]
100003093:	je	0x1000030af
100003095:	cmp	dword ptr [rbp - 0x30], 0x0
100003099:	mov	dword ptr [rbp - 0x30], 0x1
1000030a0:	je	0x1000030af
1000030a2:	jmp	0x1000031d8
1000030a7:	mov	rbx, qword ptr [rbp - 0x58]
1000030ab:	mov	r13, qword ptr [rbp - 0x50]
1000030af:	cmp	byte ptr [r14], 0x0
1000030b3:	mov	r12, rcx
1000030b6:	jne	0x100002d17
1000030bc:	mov	r12, rcx
1000030bf:	mov	rsi, qword ptr [rip + 0xf3a] ## literal pool symbol address: __DefaultRuneLocale
1000030c6:	jmp	0x1000030e2
1000030c8:	mov	rax, qword ptr [rbp - 0x38]
1000030cc:	mov	qword ptr [r15 + 0x18], rax
1000030d0:	mov	dword ptr [r15 + 0x8], 0x400
1000030d8:	mov	rsi, qword ptr [rip + 0xf21] ## literal pool symbol address: __DefaultRuneLocale
1000030df:	mov	r12, rcx
1000030e2:	cmp	dword ptr [r13 + 0x18], 0x0
1000030e7:	jne	0x100003103
1000030e9:	mov	rax, qword ptr [r13 + 0x8]
1000030ed:	test	rax, rax
1000030f0:	je	0x100003103
1000030f2:	xor	ecx, ecx
1000030f4:	add	ecx, dword ptr [rax + 0xc]
1000030f7:	mov	rax, qword ptr [rax]
1000030fa:	test	rax, rax
1000030fd:	jne	0x1000030f4
1000030ff:	mov	dword ptr [r13 + 0x18], ecx
100003103:	mov	r13, qword ptr [r13]
100003107:	test	r13, r13
10000310a:	jne	0x100002cfa
100003110:	mov	rax, qword ptr [rbp - 0x48]
100003114:	mov	r12, qword ptr [rax + 0x8]
100003118:	test	r12, r12
10000311b:	je	0x1000031bf
100003121:	lea	r14, [rip + 0x50b0]
100003128:	mov	r15d, 0x4000
10000312e:	cmp	qword ptr [r12], 0x0
100003133:	jne	0x10000315a
100003135:	mov	eax, dword ptr [r14]
100003138:	mov	rcx, qword ptr [rbp - 0x48]
10000313c:	sub	eax, dword ptr [rcx + 0x10]
10000313f:	jle	0x10000315a
100003141:	test	byte ptr [r12 + 0x10], 0x2
100003147:	jne	0x10000315a
100003149:	mov	ecx, dword ptr [r12 + 0x18]
10000314e:	test	ecx, ecx
100003150:	je	0x10000315a
100003152:	cdq
100003153:	idiv	ecx
100003155:	add	dword ptr [r12 + 0x14], eax
10000315a:	cmp	dword ptr [r12 + 0x14], 0x2
100003160:	jl	0x1000031b2
100003162:	mov	rax, qword ptr [r12 + 0x8]
100003167:	mov	r13, rax
10000316a:	mov	rax, qword ptr [rax]
10000316d:	test	rax, rax
100003170:	jne	0x100003167
100003172:	mov	rbx, qword ptr [r13 + 0x18]
100003176:	mov	cl, byte ptr [rbx]
100003178:	test	cl, cl
10000317a:	je	0x1000031b2
10000317c:	dec	rbx
10000317f:	movzx	edi, cl
100003182:	test	cl, cl
100003184:	js	0x10000318f
100003186:	mov	eax, dword ptr [rsi + 4*rdi + 0x3c]
10000318a:	and	eax, r15d
10000318d:	jmp	0x1000031a0
10000318f:	mov	esi, 0x4000
100003194:	call	0x10000349e ## symbol stub for: ___maskrune
100003199:	mov	rsi, qword ptr [rip + 0xe60] ## literal pool symbol address: __DefaultRuneLocale
1000031a0:	mov	cl, byte ptr [rbx + 0x2]
1000031a3:	inc	rbx
1000031a6:	test	cl, cl
1000031a8:	jne	0x10000317f
1000031aa:	test	eax, eax
1000031ac:	je	0x1000031b2
1000031ae:	mov	qword ptr [r13 + 0x20], rbx
1000031b2:	mov	r12, qword ptr [r12]
1000031b6:	test	r12, r12
1000031b9:	jne	0x10000312e
1000031bf:	add	rsp, 0x38
1000031c3:	pop	rbx
1000031c4:	pop	r12
1000031c6:	pop	r13
1000031c8:	pop	r14
1000031ca:	pop	r15
1000031cc:	pop	rbp
1000031cd:	ret
1000031ce:	call	0x100003456
1000031d3:	call	0x100003466
1000031d8:	call	0x100003476
1000031dd:	mov	byte ptr [r12 + 0x1], 0x0
1000031e3:	mov	rdi, r12
1000031e6:	call	0x1000032b8
1000031eb:	mov	byte ptr [r12 + 0x1], 0x0
1000031f1:	mov	rdi, r12
1000031f4:	call	0x1000032e9
1000031f9:	mov	byte ptr [r12 + 0x2], 0x0
1000031ff:	jmp	0x1000031e3
100003201:	call	0x1000032d2
100003206:	mov	byte ptr [r12 + 0x2], 0x0
10000320c:	jmp	0x1000031f1
10000320e:	mov	byte ptr [r12 + 0x3], 0x0
100003214:	jmp	0x1000031f1
100003216:	nop
	.byte 0x17 #bad opcode
100003219:	cld
	.byte 0xff #bad opcode
10000321b:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000321f:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003223:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003228:	cli
100003229:	cld
	.byte 0xff #bad opcode
10000322b:	jmp	qword ptr [rsi - 0x4]
	.byte 0xff #bad opcode
10000322f:	jmp	qword ptr [rax - 0x5f000004]
100003235:	cld
	.byte 0xff #bad opcode
100003237:	jmp	qword ptr [rax - 0x2c000004]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000323f:	jmp	qword ptr [rsi - 0x4]
	.byte 0xff #bad opcode
100003243:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003247:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000324b:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000324f:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003253:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003257:	jmp	qword ptr [rcx - 0x4]
	.byte 0xff #bad opcode
10000325b:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000325f:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003263:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003267:	call	qword ptr [rdx]
100003269:	std
	.byte 0xff #bad opcode
10000326b:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000326f:	jmp	qword ptr [rcx - 0x4]
	.byte 0xff #bad opcode
100003273:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003277:	call	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000327b:	jmp	qword ptr [rcx - 0x4]
	.byte 0xff #bad opcode
10000327f:	jmp	qword ptr [rax - 0x4]
	.byte 0xff #bad opcode
100003283:	jmp	[rbp - 0x4]
	.byte 0xff #bad opcode
100003287:	jmp	qword ptr [rax - 0x4]
	.byte 0xff #bad opcode
10000328b:	call	[rbp - 0x1]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003290:	jp	0x10000328e
	.byte 0xff #bad opcode
100003293:	call	[rcx - 0x4]
	.byte 0xff #bad opcode
100003297:	inc	dword ptr [rdx + 0x17fffffd]
10000329d:	cld
	.byte 0xff #bad opcode
10000329f:	dec	dword ptr [rcx - 0x1]
	.byte 0xff #bad opcode
1000032a3:	call	[rcx - 0x4]
	.byte 0xff #bad opcode
1000032a7:	dec	dword ptr [rcx - 0x1]
	.byte 0xff #bad opcode
1000032ab:	dec	dword ptr [rcx - 0x1]
	.byte 0xff #bad opcode
1000032af:	dec	dword ptr [rcx - 0x1]
	.byte 0xff #bad opcode
1000032b3:	dec	dword ptr [rsp + 8*rdi - 0x1]
1000032b7:	call	qword ptr [rbp + 0x48]
1000032ba:	mov	ebp, esp
1000032bc:	mov	rdx, rdi
1000032bf:	lea	rsi, [rip + 0xc16] ## literal pool for: "%s: bad byte count"
1000032c6:	mov	edi, 0x1
1000032cb:	xor	eax, eax
1000032cd:	call	0x1000034ce ## symbol stub for: _errx
1000032d2:	push	rbp
1000032d3:	mov	rbp, rsp
1000032d6:	lea	rsi, [rip + 0xc12] ## literal pool for: "%%s: requires a precision or a byte count"
1000032dd:	mov	edi, 0x1
1000032e2:	xor	eax, eax
1000032e4:	call	0x1000034ce ## symbol stub for: _errx
1000032e9:	push	rbp
1000032ea:	mov	rbp, rsp
1000032ed:	mov	rdx, rdi
1000032f0:	lea	rsi, [rip + 0xc33] ## literal pool for: "%%%s: bad conversion character"
1000032f7:	mov	edi, 0x1
1000032fc:	xor	eax, eax
1000032fe:	call	0x1000034ce ## symbol stub for: _errx
100003303:	push	rbp
100003304:	mov	rbp, rsp
100003307:	lea	rdi, [rip + 0x6b1] ## literal pool for: "conv_c"
10000330e:	lea	rsi, [rip + 0x6b1] ## literal pool for: "conv.c"
100003315:	lea	rcx, [rip + 0x6cd] ## literal pool for: "width >= 0"
10000331c:	mov	edx, 0x85
100003321:	call	0x10000348c ## symbol stub for: ___assert_rtn
100003326:	push	rbp
100003327:	mov	rbp, rsp
10000332a:	lea	rdi, [rip + 0x68e] ## literal pool for: "conv_c"
100003331:	lea	rsi, [rip + 0x68e] ## literal pool for: "conv.c"
100003338:	lea	rcx, [rip + 0x68e] ## literal pool for: "strcmp(pr->fmt, \"%3C\") == 0"
10000333f:	mov	edx, 0x83
100003344:	call	0x10000348c ## symbol stub for: ___assert_rtn
100003349:	nop
10000334a:	nop
10000334b:	nop
10000334c:	push	rbp
10000334d:	mov	rbp, rsp
100003350:	push	0x1
100003352:	pop	rdi
100003353:	xor	esi, esi
100003355:	xor	eax, eax
100003357:	call	0x1000034c8 ## symbol stub for: _err
10000335c:	push	rbp
10000335d:	mov	rbp, rsp
100003360:	push	0x1
100003362:	pop	rdi
100003363:	xor	esi, esi
100003365:	xor	eax, eax
100003367:	call	0x1000034c8 ## symbol stub for: _err
10000336c:	push	rbp
10000336d:	mov	rbp, rsp
100003370:	lea	rsi, [rip + 0x710] ## literal pool for: "cannot skip past end of input"
100003377:	push	0x1
100003379:	pop	rdi
10000337a:	xor	eax, eax
10000337c:	call	0x1000034ce ## symbol stub for: _errx
100003381:	push	rbp
100003382:	mov	rbp, rsp
100003385:	mov	rax, qword ptr [rip + 0x4e34]
10000338c:	mov	rsi, qword ptr [rax - 0x8]
100003390:	lea	rdi, [rip + 0x6e7] ## literal pool for: "%s"
100003397:	xor	eax, eax
100003399:	pop	rbp
10000339a:	jmp	0x100003594 ## symbol stub for: _warn
10000339f:	nop
1000033a0:	nop
1000033a1:	nop
1000033a2:	push	rbp
1000033a3:	mov	rbp, rsp
1000033a6:	mov	rax, qword ptr [rip + 0xc7b] ## literal pool symbol address: _optarg
1000033ad:	mov	rdx, qword ptr [rax]
1000033b0:	lea	rsi, [rip + 0x7f6] ## literal pool for: "%s: bad skip value"
1000033b7:	push	0x1
1000033b9:	pop	rdi
1000033ba:	xor	eax, eax
1000033bc:	call	0x1000034ce ## symbol stub for: _errx
1000033c1:	push	rbp
1000033c2:	mov	rbp, rsp
1000033c5:	mov	rax, qword ptr [rip + 0xc5c] ## literal pool symbol address: _optarg
1000033cc:	mov	rdx, qword ptr [rax]
1000033cf:	lea	rsi, [rip + 0x945] ## literal pool for: "%s: invalid skip amount"
1000033d6:	push	0x1
1000033d8:	pop	rdi
1000033d9:	xor	eax, eax
1000033db:	call	0x1000034ce ## symbol stub for: _errx
1000033e0:	push	rbp
1000033e1:	mov	rbp, rsp
1000033e4:	push	0x1
1000033e6:	pop	rdi
1000033e7:	xor	esi, esi
1000033e9:	xor	eax, eax
1000033eb:	call	0x1000034c8 ## symbol stub for: _err
1000033f0:	push	rbp
1000033f1:	mov	rbp, rsp
1000033f4:	push	0x1
1000033f6:	pop	rdi
1000033f7:	xor	esi, esi
1000033f9:	xor	eax, eax
1000033fb:	call	0x1000034c8 ## symbol stub for: _err
100003400:	nop
100003401:	nop
100003402:	nop
100003403:	push	rbp
100003404:	mov	rbp, rsp
100003407:	lea	rdi, [rip + 0xa8f] ## literal pool for: "line too long"
10000340e:	xor	eax, eax
100003410:	call	0x10000359a ## symbol stub for: _warnx
100003415:	call	0x100003528 ## symbol stub for: _getchar
10000341a:	cmp	eax, 0xa
10000341d:	je	0x100003424
10000341f:	cmp	eax, -0x1
100003422:	jne	0x100003415
100003424:	pop	rbp
100003425:	ret
100003426:	push	rbp
100003427:	mov	rbp, rsp
10000342a:	push	0x1
10000342c:	pop	rdi
10000342d:	xor	esi, esi
10000342f:	xor	eax, eax
100003431:	call	0x1000034c8 ## symbol stub for: _err
100003436:	push	rbp
100003437:	mov	rbp, rsp
10000343a:	push	0x1
10000343c:	pop	rdi
10000343d:	xor	esi, esi
10000343f:	xor	eax, eax
100003441:	call	0x1000034c8 ## symbol stub for: _err
100003446:	push	rbp
100003447:	mov	rbp, rsp
10000344a:	push	0x1
10000344c:	pop	rdi
10000344d:	xor	esi, esi
10000344f:	xor	eax, eax
100003451:	call	0x1000034c8 ## symbol stub for: _err
100003456:	push	rbp
100003457:	mov	rbp, rsp
10000345a:	push	0x1
10000345c:	pop	rdi
10000345d:	xor	esi, esi
10000345f:	xor	eax, eax
100003461:	call	0x1000034c8 ## symbol stub for: _err
100003466:	push	rbp
100003467:	mov	rbp, rsp
10000346a:	push	0x1
10000346c:	pop	rdi
10000346d:	xor	esi, esi
10000346f:	xor	eax, eax
100003471:	call	0x1000034c8 ## symbol stub for: _err
100003476:	push	rbp
100003477:	mov	rbp, rsp
10000347a:	lea	rsi, [rip + 0xa2c] ## literal pool for: "byte count with multiple conversion characters"
100003481:	push	0x1
100003483:	pop	rdi
100003484:	xor	eax, eax
100003486:	call	0x1000034ce ## symbol stub for: _errx
