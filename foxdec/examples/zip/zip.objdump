/usr/bin/zip:
(__TEXT,__text) section
1000037b0:	push	rbp
1000037b1:	mov	rbp, rsp
1000037b4:	push	r15
1000037b6:	push	r14
1000037b8:	push	r13
1000037ba:	push	r12
1000037bc:	push	rbx
1000037bd:	push	rax
1000037be:	mov	eax, dword ptr [rip + 0x577ec]
1000037c4:	lea	ecx, [rax + 0x1]
1000037c7:	mov	dword ptr [rip + 0x577e3], ecx
1000037cd:	test	eax, eax
1000037cf:	jle	0x1000037db
1000037d1:	mov	edi, 0x5
1000037d6:	call	0x1000197b8 ## symbol stub for: _exit
1000037db:	mov	r15, rsi
1000037de:	mov	dword ptr [rbp - 0x2c], edi
1000037e1:	lea	rbx, [rip + 0x260e4]
1000037e8:	cmp	dword ptr [rbx], 0x0
1000037eb:	je	0x100003807
1000037ed:	lea	rax, [rip + 0x2773c]
1000037f4:	mov	rsi, qword ptr [rax]
1000037f7:	mov	edi, 0xa
1000037fc:	call	0x1000197f4 ## symbol stub for: _fputc
100003801:	mov	dword ptr [rbx], 0x0
100003807:	lea	rax, [rip + 0x25f52]
10000380e:	mov	rsi, qword ptr [rax]
100003811:	lea	r13, [rip + 0x260b8]
100003818:	test	rsi, rsi
10000381b:	je	0x100003836
10000381d:	cmp	dword ptr [r13], 0x0
100003822:	je	0x100003836
100003824:	mov	edi, 0xa
100003829:	call	0x1000197f4 ## symbol stub for: _fputc
10000382e:	mov	dword ptr [r13], 0x0
100003836:	test	r15, r15
100003839:	je	0x10000390c
10000383f:	movsxd	rax, dword ptr [rbp - 0x2c]
100003843:	lea	r12, [rax + 2*rax]
100003847:	lea	r14, [rip + 0x25a02]
10000384e:	test	byte ptr [r14 + 8*r12 + 0x10], 0x10
100003854:	je	0x100003880
100003856:	lea	rax, [rip + 0x276d3]
10000385d:	mov	rbx, qword ptr [rax]
100003860:	call	0x100019764 ## symbol stub for: ___error
100003865:	mov	edi, dword ptr [rax]
100003867:	call	0x10001991a ## symbol stub for: _strerror
10000386c:	lea	rsi, [rip + 0x17dad] ## literal pool for: "zip I/O error: %s"
100003873:	mov	rdi, rbx
100003876:	mov	rdx, rax
100003879:	xor	eax, eax
10000387b:	call	0x1000197ee ## symbol stub for: _fprintf
100003880:	lea	rbx, [rip + 0x276a9]
100003887:	mov	rdi, qword ptr [rbx]
10000388a:	call	0x1000197d6 ## symbol stub for: _fflush
10000388f:	mov	rdi, qword ptr [rbx]
100003892:	mov	rdx, qword ptr [r14 + 8*r12 + 0x8]
100003897:	lea	rsi, [rip + 0x17d94] ## literal pool for: "\nzip error: %s (%s)\n"
10000389e:	mov	rcx, r15
1000038a1:	xor	eax, eax
1000038a3:	call	0x1000197ee ## symbol stub for: _fprintf
1000038a8:	lea	rax, [rip + 0x25eb1]
1000038af:	mov	rbx, qword ptr [rax]
1000038b2:	test	rbx, rbx
1000038b5:	je	0x10000390c
1000038b7:	lea	r14, [r14 + 8*r12 + 0x10]
1000038bc:	test	byte ptr [r14], 0x10
1000038c0:	je	0x1000038ec
1000038c2:	call	0x100019764 ## symbol stub for: ___error
1000038c7:	mov	edi, dword ptr [rax]
1000038c9:	call	0x10001991a ## symbol stub for: _strerror
1000038ce:	lea	rsi, [rip + 0x17d72] ## literal pool for: "zip I/O error: %s\n"
1000038d5:	mov	rdi, rbx
1000038d8:	mov	rdx, rax
1000038db:	xor	eax, eax
1000038dd:	call	0x1000197ee ## symbol stub for: _fprintf
1000038e2:	lea	rax, [rip + 0x25e77]
1000038e9:	mov	rbx, qword ptr [rax]
1000038ec:	mov	rdx, qword ptr [r14 - 0x8]
1000038f0:	lea	rsi, [rip + 0x17d3b] ## literal pool for: "\nzip error: %s (%s)\n"
1000038f7:	mov	rdi, rbx
1000038fa:	mov	rcx, r15
1000038fd:	xor	eax, eax
1000038ff:	call	0x1000197ee ## symbol stub for: _fprintf
100003904:	mov	dword ptr [r13], 0x0
10000390c:	lea	rbx, [rip + 0x25edd]
100003913:	mov	rdx, qword ptr [rbx]
100003916:	test	rdx, rdx
100003919:	je	0x100003a55
10000391f:	lea	r14, [rip + 0x27632]
100003926:	cmp	rdx, qword ptr [r14]
100003929:	jne	0x100003a11
10000392f:	lea	rbx, [rip + 0x261ea]
100003936:	mov	r15, qword ptr [rbx]
100003939:	lea	rax, [rip + 0x275f0]
100003940:	mov	rdi, qword ptr [rax]
100003943:	lea	rsi, [rip + 0x17d10] ## literal pool for: "attempting to restore %s to its previous state\n"
10000394a:	xor	eax, eax
10000394c:	call	0x1000197ee ## symbol stub for: _fprintf
100003951:	lea	rax, [rip + 0x25e08]
100003958:	mov	rdi, qword ptr [rax]
10000395b:	test	rdi, rdi
10000395e:	je	0x100003971
100003960:	mov	rdx, qword ptr [r14]
100003963:	lea	rsi, [rip + 0x17cf0] ## literal pool for: "attempting to restore %s to its previous state\n"
10000396a:	xor	eax, eax
10000396c:	call	0x1000197ee ## symbol stub for: _fprintf
100003971:	lea	r13, [rip + 0x25e80]
100003978:	mov	rdi, qword ptr [r13]
10000397c:	mov	rsi, qword ptr [rbx]
10000397f:	xor	r12d, r12d
100003982:	xor	edx, edx
100003984:	call	0x10001980c ## symbol stub for: _fseeko
100003989:	mov	rsi, qword ptr [rbx]
10000398c:	lea	r14, [rip + 0x275a5]
100003993:	mov	qword ptr [r14], rsi
100003996:	lea	rax, [rip + 0x25f3b]
10000399d:	mov	rbx, qword ptr [rax]
1000039a0:	test	rbx, rbx
1000039a3:	je	0x1000039dc
1000039a5:	xor	r12d, r12d
1000039a8:	mov	rdi, rbx
1000039ab:	call	0x10000e4ec
1000039b0:	movzx	eax, word ptr [rbx + 0x28]
1000039b4:	movzx	ecx, word ptr [rbx + 0x2c]
1000039b8:	add	rcx, rax
1000039bb:	movzx	eax, word ptr [rbx + 0x2e]
1000039bf:	add	rax, rcx
1000039c2:	mov	rcx, qword ptr [r14]
1000039c5:	lea	rsi, [rcx + rax + 0x2e]
1000039ca:	mov	qword ptr [r14], rsi
1000039cd:	inc	r12
1000039d0:	mov	rbx, qword ptr [rbx + 0x98]
1000039d7:	test	rbx, rbx
1000039da:	jne	0x1000039a8
1000039dc:	sub	rsi, r15
1000039df:	lea	rax, [rip + 0x2755a]
1000039e6:	movzx	ecx, word ptr [rax]
1000039e9:	lea	rax, [rip + 0x25ef8]
1000039f0:	mov	r8, qword ptr [rax]
1000039f3:	mov	rdi, r12
1000039f6:	mov	rdx, r15
1000039f9:	call	0x10000ea0e
1000039fe:	mov	rdi, qword ptr [r13]
100003a02:	call	0x1000197be ## symbol stub for: _fclose
100003a07:	mov	qword ptr [r13], 0x0
100003a0f:	jmp	0x100003a55
100003a11:	lea	r14, [rip + 0x25e70]
100003a18:	mov	rdi, qword ptr [r14]
100003a1b:	test	rdi, rdi
100003a1e:	jne	0x100003a24
100003a20:	xor	eax, eax
100003a22:	jmp	0x100003a2c
100003a24:	call	0x1000197be ## symbol stub for: _fclose
100003a29:	mov	rax, qword ptr [r14]
100003a2c:	lea	rcx, [rip + 0x25dc5]
100003a33:	mov	rdi, qword ptr [rcx]
100003a36:	test	rdi, rdi
100003a39:	je	0x100003a45
100003a3b:	cmp	rdi, rax
100003a3e:	je	0x100003a45
100003a40:	call	0x1000197be ## symbol stub for: _fclose
100003a45:	mov	rdi, qword ptr [rbx]
100003a48:	call	0x1000121b4
100003a4d:	mov	rdi, qword ptr [rbx]
100003a50:	call	0x100019806 ## symbol stub for: _free
100003a55:	lea	rbx, [rip + 0x25d4c]
100003a5c:	mov	rdi, qword ptr [rbx]
100003a5f:	test	rdi, rdi
100003a62:	je	0x100003a70
100003a64:	call	0x100019806 ## symbol stub for: _free
100003a69:	mov	qword ptr [rbx], 0x0
100003a70:	lea	rbx, [rip + 0x25d39]
100003a77:	mov	rdi, qword ptr [rbx]
100003a7a:	test	rdi, rdi
100003a7d:	je	0x100003a8b
100003a7f:	call	0x100019806 ## symbol stub for: _free
100003a84:	mov	qword ptr [rbx], 0x0
100003a8b:	lea	rbx, [rip + 0x274c6]
100003a92:	mov	rdi, qword ptr [rbx]
100003a95:	test	rdi, rdi
100003a98:	je	0x100003aa6
100003a9a:	call	0x100019806 ## symbol stub for: _free
100003a9f:	mov	qword ptr [rbx], 0x0
100003aa6:	lea	rbx, [rip + 0x25d6b]
100003aad:	mov	rdi, qword ptr [rbx]
100003ab0:	test	rdi, rdi
100003ab3:	je	0x100003ac1
100003ab5:	call	0x100019806 ## symbol stub for: _free
100003aba:	mov	qword ptr [rbx], 0x0
100003ac1:	lea	rbx, [rip + 0x25e20]
100003ac8:	mov	rdi, qword ptr [rbx]
100003acb:	test	rdi, rdi
100003ace:	je	0x100003adc
100003ad0:	call	0x100019806 ## symbol stub for: _free
100003ad5:	mov	qword ptr [rbx], 0x0
100003adc:	call	0x100003ae9
100003ae1:	mov	edi, dword ptr [rbp - 0x2c]
100003ae4:	call	0x1000197b8 ## symbol stub for: _exit
100003ae9:	push	rbp
100003aea:	mov	rbp, rsp
100003aed:	push	r15
100003aef:	push	r14
100003af1:	push	rbx
100003af2:	push	rax
100003af3:	lea	rax, [rip + 0x25df6]
100003afa:	mov	rax, qword ptr [rax]
100003afd:	test	rax, rax
100003b00:	je	0x100003b0c
100003b02:	mov	rdi, rax
100003b05:	call	0x100011370
100003b0a:	jmp	0x100003afd
100003b0c:	lea	r15, [rip + 0x25dc5]
100003b13:	mov	rdi, qword ptr [r15]
100003b16:	test	rdi, rdi
100003b19:	je	0x100003bf4
100003b1f:	lea	r14, [rip + 0x27422]
100003b26:	mov	rax, qword ptr [rdi + 0x78]
100003b2a:	mov	rbx, qword ptr [rdi + 0x98]
100003b31:	test	rax, rax
100003b34:	je	0x100003b47
100003b36:	cmp	rax, qword ptr [rdi + 0x50]
100003b3a:	je	0x100003b47
100003b3c:	mov	rdi, rax
100003b3f:	call	0x100019806 ## symbol stub for: _free
100003b44:	mov	rdi, qword ptr [r15]
100003b47:	mov	rax, qword ptr [rdi + 0x50]
100003b4b:	test	rax, rax
100003b4e:	je	0x100003b5b
100003b50:	mov	rdi, rax
100003b53:	call	0x100019806 ## symbol stub for: _free
100003b58:	mov	rdi, qword ptr [r15]
100003b5b:	mov	rax, qword ptr [rdi + 0x70]
100003b5f:	test	rax, rax
100003b62:	je	0x100003b6f
100003b64:	mov	rdi, rax
100003b67:	call	0x100019806 ## symbol stub for: _free
100003b6c:	mov	rdi, qword ptr [r15]
100003b6f:	cmp	word ptr [rdi + 0x2c], 0x0
100003b74:	je	0x100003b90
100003b76:	mov	rax, qword ptr [rdi + 0x60]
100003b7a:	test	rax, rax
100003b7d:	je	0x100003b90
100003b7f:	cmp	rax, qword ptr [rdi + 0x58]
100003b83:	je	0x100003b90
100003b85:	mov	rdi, rax
100003b88:	call	0x100019806 ## symbol stub for: _free
100003b8d:	mov	rdi, qword ptr [r15]
100003b90:	cmp	word ptr [rdi + 0x2a], 0x0
100003b95:	je	0x100003bab
100003b97:	mov	rax, qword ptr [rdi + 0x58]
100003b9b:	test	rax, rax
100003b9e:	je	0x100003bab
100003ba0:	mov	rdi, rax
100003ba3:	call	0x100019806 ## symbol stub for: _free
100003ba8:	mov	rdi, qword ptr [r15]
100003bab:	cmp	word ptr [rdi + 0x2e], 0x0
100003bb0:	je	0x100003bc6
100003bb2:	mov	rax, qword ptr [rdi + 0x68]
100003bb6:	test	rax, rax
100003bb9:	je	0x100003bc6
100003bbb:	mov	rdi, rax
100003bbe:	call	0x100019806 ## symbol stub for: _free
100003bc3:	mov	rdi, qword ptr [r15]
100003bc6:	mov	rax, qword ptr [rdi + 0x80]
100003bcd:	test	rax, rax
100003bd0:	je	0x100003bdd
100003bd2:	mov	rdi, rax
100003bd5:	call	0x100019806 ## symbol stub for: _free
100003bda:	mov	rdi, qword ptr [r15]
100003bdd:	call	0x100019806 ## symbol stub for: _free
100003be2:	mov	qword ptr [r15], rbx
100003be5:	dec	qword ptr [r14]
100003be8:	mov	rdi, rbx
100003beb:	test	rbx, rbx
100003bee:	jne	0x100003b26
100003bf4:	lea	r14, [rip + 0x25cfd]
100003bfb:	mov	rdi, qword ptr [r14]
100003bfe:	test	rdi, rdi
100003c01:	je	0x100003c3d
100003c03:	lea	rbx, [rip + 0x25cf6]
100003c0a:	mov	ecx, dword ptr [rbx]
100003c0c:	sub	ecx, 0x1
100003c0f:	mov	dword ptr [rbx], ecx
100003c11:	jb	0x100003c31
100003c13:	mov	eax, ecx
100003c15:	shl	rax, 0x4
100003c19:	mov	rax, qword ptr [rdi + rax]
100003c1d:	test	rax, rax
100003c20:	je	0x100003c0c
100003c22:	mov	rdi, rax
100003c25:	call	0x100019806 ## symbol stub for: _free
100003c2a:	mov	ecx, dword ptr [rbx]
100003c2c:	mov	rdi, qword ptr [r14]
100003c2f:	jmp	0x100003c0c
100003c31:	call	0x100019806 ## symbol stub for: _free
100003c36:	mov	qword ptr [r14], 0x0
100003c3d:	lea	rax, [rip + 0x25b1c]
100003c44:	mov	rdi, qword ptr [rax]
100003c47:	add	rsp, 0x8
100003c4b:	test	rdi, rdi
100003c4e:	je	0x100003c5b
100003c50:	pop	rbx
100003c51:	pop	r14
100003c53:	pop	r15
100003c55:	pop	rbp
100003c56:	jmp	0x1000197be ## symbol stub for: _fclose
100003c5b:	pop	rbx
100003c5c:	pop	r14
100003c5e:	pop	r15
100003c60:	pop	rbp
100003c61:	ret
100003c62:	push	rbp
100003c63:	mov	rbp, rsp
100003c66:	mov	rsi, rdi
100003c69:	mov	edi, 0x5
100003c6e:	call	0x1000037b0
100003c73:	push	rbp
100003c74:	mov	rbp, rsp
100003c77:	push	r15
100003c79:	push	r14
100003c7b:	push	rbx
100003c7c:	push	rax
100003c7d:	mov	r14d, esi
100003c80:	mov	rbx, rdi
100003c83:	lea	rax, [rip + 0x257d2]
100003c8a:	cmp	dword ptr [rax], 0x0
100003c8d:	je	0x100003d0d
100003c8f:	test	rbx, rbx
100003c92:	je	0x100003cd1
100003c94:	cmp	byte ptr [rbx], 0x0
100003c97:	je	0x100003cb8
100003c99:	lea	rax, [rip + 0x27290]
100003ca0:	mov	rsi, qword ptr [rax]
100003ca3:	mov	rdi, rbx
100003ca6:	call	0x1000197fa ## symbol stub for: _fputs
100003cab:	lea	rax, [rip + 0x25c1a]
100003cb2:	mov	dword ptr [rax], 0x1
100003cb8:	test	r14d, r14d
100003cbb:	jne	0x100003cd6
100003cbd:	cmp	byte ptr [rbx], 0x0
100003cc0:	je	0x100003cfe
100003cc2:	lea	rax, [rip + 0x25c03]
100003cc9:	mov	dword ptr [rax], 0x1
100003ccf:	jmp	0x100003cfe
100003cd1:	test	r14d, r14d
100003cd4:	je	0x100003cfe
100003cd6:	lea	r15, [rip + 0x25bef]
100003cdd:	cmp	dword ptr [r15], 0x0
100003ce1:	je	0x100003cfe
100003ce3:	lea	rax, [rip + 0x27246]
100003cea:	mov	rsi, qword ptr [rax]
100003ced:	mov	edi, 0xa
100003cf2:	call	0x1000197f4 ## symbol stub for: _fputc
100003cf7:	mov	dword ptr [r15], 0x0
100003cfe:	lea	rax, [rip + 0x2722b]
100003d05:	mov	rdi, qword ptr [rax]
100003d08:	call	0x1000197d6 ## symbol stub for: _fflush
100003d0d:	lea	r15, [rip + 0x25a4c]
100003d14:	mov	rsi, qword ptr [r15]
100003d17:	test	rsi, rsi
100003d1a:	je	0x100003d54
100003d1c:	test	rbx, rbx
100003d1f:	je	0x100003d5f
100003d21:	cmp	byte ptr [rbx], 0x0
100003d24:	je	0x100003d3b
100003d26:	mov	rdi, rbx
100003d29:	call	0x1000197fa ## symbol stub for: _fputs
100003d2e:	lea	rax, [rip + 0x25b9b]
100003d35:	mov	dword ptr [rax], 0x1
100003d3b:	test	r14d, r14d
100003d3e:	jne	0x100003d64
100003d40:	cmp	byte ptr [rbx], 0x0
100003d43:	je	0x100003d83
100003d45:	lea	rax, [rip + 0x25b84]
100003d4c:	mov	dword ptr [rax], 0x1
100003d52:	jmp	0x100003d83
100003d54:	add	rsp, 0x8
100003d58:	pop	rbx
100003d59:	pop	r14
100003d5b:	pop	r15
100003d5d:	pop	rbp
100003d5e:	ret
100003d5f:	test	r14d, r14d
100003d62:	je	0x100003d83
100003d64:	lea	rbx, [rip + 0x25b65]
100003d6b:	cmp	dword ptr [rbx], 0x0
100003d6e:	je	0x100003d83
100003d70:	mov	rsi, qword ptr [r15]
100003d73:	mov	edi, 0xa
100003d78:	call	0x1000197f4 ## symbol stub for: _fputc
100003d7d:	mov	dword ptr [rbx], 0x0
100003d83:	mov	rdi, qword ptr [r15]
100003d86:	add	rsp, 0x8
100003d8a:	pop	rbx
100003d8b:	pop	r14
100003d8d:	pop	r15
100003d8f:	pop	rbp
100003d90:	jmp	0x1000197d6 ## symbol stub for: _fflush
100003d95:	push	rbp
100003d96:	mov	rbp, rsp
100003d99:	push	r15
100003d9b:	push	r14
100003d9d:	push	r12
100003d9f:	push	rbx
100003da0:	mov	r14, rsi
100003da3:	mov	r15, rdi
100003da6:	lea	rax, [rip + 0x256af]
100003dad:	cmp	dword ptr [rax], 0x0
100003db0:	je	0x100003e02
100003db2:	lea	r12, [rip + 0x25b13]
100003db9:	cmp	dword ptr [r12], 0x0
100003dbe:	je	0x100003dd4
100003dc0:	lea	rax, [rip + 0x27169]
100003dc7:	mov	rsi, qword ptr [rax]
100003dca:	mov	edi, 0xa
100003dcf:	call	0x1000197f4 ## symbol stub for: _fputc
100003dd4:	lea	rbx, [rip + 0x27155]
100003ddb:	mov	rdi, qword ptr [rbx]
100003dde:	lea	rsi, [rip + 0x178a5] ## literal pool for: "%s%s\n"
100003de5:	mov	rdx, r15
100003de8:	mov	rcx, r14
100003deb:	xor	eax, eax
100003ded:	call	0x1000197ee ## symbol stub for: _fprintf
100003df2:	mov	dword ptr [r12], 0x0
100003dfa:	mov	rdi, qword ptr [rbx]
100003dfd:	call	0x1000197d6 ## symbol stub for: _fflush
100003e02:	lea	rbx, [rip + 0x25957]
100003e09:	mov	rax, qword ptr [rbx]
100003e0c:	test	rax, rax
100003e0f:	je	0x100003e5e
100003e11:	lea	r12, [rip + 0x25ab8]
100003e18:	cmp	dword ptr [r12], 0x0
100003e1d:	je	0x100003e2f
100003e1f:	mov	edi, 0xa
100003e24:	mov	rsi, rax
100003e27:	call	0x1000197f4 ## symbol stub for: _fputc
100003e2c:	mov	rax, qword ptr [rbx]
100003e2f:	lea	rsi, [rip + 0x17854] ## literal pool for: "%s%s\n"
100003e36:	mov	rdi, rax
100003e39:	mov	rdx, r15
100003e3c:	mov	rcx, r14
100003e3f:	xor	eax, eax
100003e41:	call	0x1000197ee ## symbol stub for: _fprintf
100003e46:	mov	dword ptr [r12], 0x0
100003e4e:	mov	rdi, qword ptr [rbx]
100003e51:	pop	rbx
100003e52:	pop	r12
100003e54:	pop	r14
100003e56:	pop	r15
100003e58:	pop	rbp
100003e59:	jmp	0x1000197d6 ## symbol stub for: _fflush
100003e5e:	pop	rbx
100003e5f:	pop	r12
100003e61:	pop	r14
100003e63:	pop	r15
100003e65:	pop	rbp
100003e66:	ret
100003e67:	push	rbp
100003e68:	mov	rbp, rsp
100003e6b:	push	r15
100003e6d:	push	r14
100003e6f:	push	r12
100003e71:	push	rbx
100003e72:	mov	r14, rsi
100003e75:	mov	r15, rdi
100003e78:	lea	rax, [rip + 0x255dd]
100003e7f:	cmp	dword ptr [rax], 0x0
100003e82:	je	0x100003ed4
100003e84:	lea	r12, [rip + 0x25a41]
100003e8b:	cmp	dword ptr [r12], 0x0
100003e90:	je	0x100003ea6
100003e92:	lea	rax, [rip + 0x27097]
100003e99:	mov	rsi, qword ptr [rax]
100003e9c:	mov	edi, 0xa
100003ea1:	call	0x1000197f4 ## symbol stub for: _fputc
100003ea6:	lea	rbx, [rip + 0x27083]
100003ead:	mov	rdi, qword ptr [rbx]
100003eb0:	lea	rsi, [rip + 0x177d9] ## literal pool for: "\tzip warning: %s%s\n"
100003eb7:	mov	rdx, r15
100003eba:	mov	rcx, r14
100003ebd:	xor	eax, eax
100003ebf:	call	0x1000197ee ## symbol stub for: _fprintf
100003ec4:	mov	dword ptr [r12], 0x0
100003ecc:	mov	rdi, qword ptr [rbx]
100003ecf:	call	0x1000197d6 ## symbol stub for: _fflush
100003ed4:	lea	rbx, [rip + 0x25885]
100003edb:	mov	rax, qword ptr [rbx]
100003ede:	test	rax, rax
100003ee1:	je	0x100003f30
100003ee3:	lea	r12, [rip + 0x259e6]
100003eea:	cmp	dword ptr [r12], 0x0
100003eef:	je	0x100003f01
100003ef1:	mov	edi, 0xa
100003ef6:	mov	rsi, rax
100003ef9:	call	0x1000197f4 ## symbol stub for: _fputc
100003efe:	mov	rax, qword ptr [rbx]
100003f01:	lea	rsi, [rip + 0x17788] ## literal pool for: "\tzip warning: %s%s\n"
100003f08:	mov	rdi, rax
100003f0b:	mov	rdx, r15
100003f0e:	mov	rcx, r14
100003f11:	xor	eax, eax
100003f13:	call	0x1000197ee ## symbol stub for: _fprintf
100003f18:	mov	dword ptr [r12], 0x0
100003f20:	mov	rdi, qword ptr [rbx]
100003f23:	pop	rbx
100003f24:	pop	r12
100003f26:	pop	r14
100003f28:	pop	r15
100003f2a:	pop	rbp
100003f2b:	jmp	0x1000197d6 ## symbol stub for: _fflush
100003f30:	pop	rbx
100003f31:	pop	r12
100003f33:	pop	r14
100003f35:	pop	r15
100003f37:	pop	rbp
100003f38:	ret
100003f39:	push	rbp
100003f3a:	mov	rbp, rsp
100003f3d:	cmp	edi, 0x1
100003f40:	lea	rax, [rip + 0x1775d] ## literal pool for: "Verify password: "
100003f47:	lea	rdi, [rip + 0x17768] ## literal pool for: "Enter password: "
100003f4e:	cmove	rdi, rax
100003f52:	call	0x100016a1e
100003f57:	test	rax, rax
100003f5a:	je	0x100003f60
100003f5c:	xor	eax, eax
100003f5e:	pop	rbp
100003f5f:	ret
100003f60:	lea	rsi, [rip + 0x17760] ## literal pool for: "stderr is not a tty"
100003f67:	mov	edi, 0x10
100003f6c:	call	0x1000037b0
100003f71:	push	rbp
100003f72:	mov	rbp, rsp
100003f75:	push	r15
100003f77:	push	r14
100003f79:	push	rbx
100003f7a:	push	rax
100003f7b:	mov	rbx, rsi
100003f7e:	mov	r15, rdi
100003f81:	mov	rdi, rsi
100003f84:	mov	rsi, r15
100003f87:	call	0x1000121be
100003f8c:	test	eax, eax
100003f8e:	jne	0x100003fb2
100003f90:	lea	rax, [rip + 0x25889]
100003f97:	mov	esi, dword ptr [rax]
100003f99:	test	esi, esi
100003f9b:	je	0x100003fa5
100003f9d:	mov	rdi, rbx
100003fa0:	call	0x100012441
100003fa5:	xor	eax, eax
100003fa7:	add	rsp, 0x8
100003fab:	pop	rbx
100003fac:	pop	r14
100003fae:	pop	r15
100003fb0:	pop	rbp
100003fb1:	ret
100003fb2:	mov	r14d, eax
100003fb5:	lea	rdi, [rip + 0x1771f] ## literal pool for: "new zip file left as: "
100003fbc:	mov	rsi, r15
100003fbf:	call	0x100003e67
100003fc4:	lea	rbx, [rip + 0x25825]
100003fcb:	mov	rdi, qword ptr [rbx]
100003fce:	call	0x100019806 ## symbol stub for: _free
100003fd3:	mov	qword ptr [rbx], 0x0
100003fda:	lea	rsi, [rip + 0x17711] ## literal pool for: "was replacing split file"
100003fe1:	mov	edi, r14d
100003fe4:	call	0x1000037b0
100003fe9:	push	rbp
100003fea:	mov	rbp, rsp
100003fed:	xor	eax, eax
100003fef:	pop	rbp
100003ff0:	ret
100003ff1:	push	rbp
100003ff2:	mov	rbp, rsp
100003ff5:	push	r15
100003ff7:	push	r14
100003ff9:	push	r13
100003ffb:	push	r12
100003ffd:	push	rbx
100003ffe:	sub	rsp, 0x138
100004005:	mov	rax, qword ptr [rip + 0x20004] ## literal pool symbol address: ___stack_chk_guard
10000400c:	mov	rax, qword ptr [rax]
10000400f:	mov	qword ptr [rbp - 0x30], rax
100004013:	lea	rbx, [rbp - 0x110]
10000401a:	mov	dword ptr [rbx], edi
10000401c:	lea	r14, [rbp - 0x158]
100004023:	mov	qword ptr [r14], rsi
100004026:	xor	eax, eax
100004028:	mov	dword ptr [rbp - 0x11c], eax
10000402e:	mov	dword ptr [rbp - 0x10c], eax
100004034:	mov	dword ptr [rbp - 0x124], eax
10000403a:	mov	qword ptr [rbp - 0xb0], rax
100004041:	mov	dword ptr [rbp - 0xb4], eax
100004047:	mov	dword ptr [rbp - 0x148], eax
10000404d:	mov	dword ptr [rbp - 0x144], eax
100004053:	mov	qword ptr [rbp - 0xf0], rax
10000405a:	lea	rax, [rip + 0x25663]
100004061:	mov	dword ptr [rax], 0x1
100004067:	mov	rax, qword ptr [rip + 0x1ffba] ## literal pool symbol address: ___stdoutp
10000406e:	mov	rax, qword ptr [rax]
100004071:	lea	rcx, [rip + 0x26eb8]
100004078:	mov	qword ptr [rcx], rax
10000407b:	mov	rax, qword ptr [rip + 0x1ff9e] ## literal pool symbol address: ___stdinp
100004082:	mov	rax, qword ptr [rax]
100004085:	mov	qword ptr [rbp - 0x100], rax
10000408c:	call	0x100015cc6
100004091:	call	0x100019950 ## symbol stub for: _tzset
100004096:	mov	rdi, rbx
100004099:	mov	rsi, r14
10000409c:	call	0x1000160c9
1000040a1:	mov	eax, dword ptr [rbx]
1000040a3:	cmp	eax, 0x1
1000040a6:	jne	0x1000040c0
1000040a8:	mov	edi, 0x1
1000040ad:	call	0x100019836 ## symbol stub for: _isatty
1000040b2:	test	eax, eax
1000040b4:	jne	0x100008fd5
1000040ba:	mov	eax, dword ptr [rbp - 0x110]
1000040c0:	cmp	eax, 0x2
1000040c3:	jne	0x100004101
1000040c5:	mov	rax, qword ptr [rbp - 0x158]
1000040cc:	mov	rdi, qword ptr [rax + 0x8]
1000040d0:	lea	rsi, [rip + 0x1836f] ## literal pool for: "-v"
1000040d7:	call	0x10001990e ## symbol stub for: _strcmp
1000040dc:	test	eax, eax
1000040de:	jne	0x100004101
1000040e0:	mov	edi, 0x1
1000040e5:	call	0x100019836 ## symbol stub for: _isatty
1000040ea:	test	eax, eax
1000040ec:	jne	0x100008fe8
1000040f2:	xor	edi, edi
1000040f4:	call	0x100019836 ## symbol stub for: _isatty
1000040f9:	test	eax, eax
1000040fb:	jne	0x100008fe8
100004101:	lea	rdx, [rip + 0x18341] ## literal pool for: "ZIPOPT"
100004108:	lea	rcx, [rip + 0x18341] ## literal pool for: "ZIP"
10000410f:	lea	rdi, [rbp - 0x110]
100004116:	lea	r14, [rbp - 0x158]
10000411d:	mov	rsi, r14
100004120:	call	0x100015d6b
100004125:	lea	rax, [rip + 0x256c4]
10000412c:	xor	r12d, r12d
10000412f:	mov	qword ptr [rax], r12
100004132:	lea	rax, [rip + 0x26e1f]
100004139:	mov	qword ptr [rbp - 0x150], rax
100004140:	mov	qword ptr [rax], r12
100004143:	lea	rax, [rip + 0x256ae]
10000414a:	mov	qword ptr [rax], r12
10000414d:	lea	rbx, [rip + 0x5856]
100004154:	mov	edi, 0x2
100004159:	mov	rsi, rbx
10000415c:	call	0x1000198e4 ## symbol stub for: _signal
100004161:	mov	edi, 0xf
100004166:	mov	rsi, rbx
100004169:	call	0x1000198e4 ## symbol stub for: _signal
10000416e:	mov	edi, 0x6
100004173:	mov	rsi, rbx
100004176:	call	0x1000198e4 ## symbol stub for: _signal
10000417b:	mov	edi, 0xa
100004180:	mov	rsi, rbx
100004183:	call	0x1000198e4 ## symbol stub for: _signal
100004188:	mov	edi, 0x4
10000418d:	mov	rsi, rbx
100004190:	call	0x1000198e4 ## symbol stub for: _signal
100004195:	mov	edi, 0xb
10000419a:	mov	rsi, rbx
10000419d:	call	0x1000198e4 ## symbol stub for: _signal
1000041a2:	mov	rdi, qword ptr [r14]
1000041a5:	xor	esi, esi
1000041a7:	call	0x1000143b3
1000041ac:	lea	rdi, [rbp - 0xf0]
1000041b3:	mov	qword ptr [rdi], rax
1000041b6:	lea	rdx, [rbp - 0x10c]
1000041bd:	mov	dword ptr [rdx], r12d
1000041c0:	sub	rsp, 0x8
1000041c4:	lea	r13, [rbp - 0x144]
1000041cb:	lea	r15, [rbp - 0x148]
1000041d2:	lea	rsi, [rbp - 0x11c]
1000041d9:	lea	rcx, [rbp - 0x124]
1000041e0:	lea	r8, [rbp - 0xb0]
1000041e7:	lea	r9, [rbp - 0xb4]
1000041ee:	push	r12
1000041f0:	push	r13
1000041f2:	push	r15
1000041f4:	call	0x10001466b
1000041f9:	add	rsp, 0x20
1000041fd:	test	rax, rax
100004200:	je	0x100004f05
100004206:	lea	rbx, [rip + 0x25493]
10000420d:	lea	r14, [rip + 0x256e4]
100004214:	lea	r12, [rip + 0x255fd]
10000421b:	mov	ecx, 0x0
100004220:	mov	qword ptr [rbp - 0x108], rcx
100004227:	mov	ecx, 0x0
10000422c:	mov	qword ptr [rbp - 0xc0], rcx
100004233:	mov	dword ptr [rbp - 0xd8], 0x0
10000423d:	mov	dword ptr [rbp - 0xe8], 0x0
100004247:	mov	dword ptr [rbp - 0x120], 0x0
100004251:	mov	dword ptr [rbp - 0xf8], 0x0
10000425b:	mov	dword ptr [rbp - 0xa4], 0x0
100004265:	mov	dword ptr [rbp - 0x118], 0x0
10000426f:	mov	dword ptr [rbp - 0xe0], 0x0
100004279:	mov	dword ptr [rbp - 0xc4], 0x0
100004283:	mov	dword ptr [rbp - 0xa8], 0x0
10000428d:	lea	rcx, [rax - 0x30]
100004291:	cmp	rcx, 0x4a
100004295:	ja	0x1000042b8
100004297:	lea	rdx, [rip + 0x530a]
10000429e:	movsxd	rcx, dword ptr [rdx + 4*rcx]
1000042a2:	add	rcx, rdx
1000042a5:	jmp	rcx
1000042a7:	add	eax, -0x30
1000042aa:	lea	rcx, [rip + 0x2519f]
1000042b1:	mov	dword ptr [rcx], eax
1000042b3:	jmp	0x100004c0a
1000042b8:	lea	rcx, [rax - 0x105]
1000042bf:	cmp	rcx, 0x40
1000042c3:	ja	0x100004338
1000042c5:	lea	rdx, [rip + 0x5408]
1000042cc:	movsxd	rcx, dword ptr [rdx + 4*rcx]
1000042d0:	add	rcx, rdx
1000042d3:	jmp	rcx
1000042d5:	cmp	dword ptr [rbp - 0xb4], 0x0
1000042dc:	je	0x100004ba2
1000042e2:	lea	rax, [rip + 0x25423]
1000042e9:	jmp	0x100004c04
1000042ee:	cmp	rax, 0x141
1000042f4:	je	0x100006dfb
1000042fa:	cmp	dword ptr [rbp - 0x11c], 0x2
100004301:	jne	0x10000431d
100004303:	mov	rax, qword ptr [rbp - 0xf0]
10000430a:	mov	rdi, qword ptr [rax + 0x8]
10000430e:	call	0x100019920 ## symbol stub for: _strlen
100004313:	cmp	rax, 0x2
100004317:	je	0x100006dfb
10000431d:	lea	rax, [rip + 0x25138]
100004324:	mov	dword ptr [rax], 0x1
10000432a:	lea	rax, [rip + 0x2537b]
100004331:	inc	dword ptr [rax]
100004333:	jmp	0x100004c0a
100004338:	cmp	rax, 0xffff
10000433e:	jne	0x100008db2
100004344:	cmp	dword ptr [rbp - 0xc0], 0x0
10000434b:	jne	0x10000435d
10000434d:	cmp	dword ptr [rbx], 0x2
100004350:	je	0x10000435d
100004352:	cmp	qword ptr [r14], 0x0
100004356:	jne	0x10000435d
100004358:	call	0x100009df3
10000435d:	mov	r12, qword ptr [rbp - 0xb0]
100004364:	mov	rdi, r12
100004367:	lea	rsi, [rip + 0x1831f] ## literal pool for: "--"
10000436e:	call	0x10001990e ## symbol stub for: _strcmp
100004373:	or	eax, dword ptr [rbp - 0x120]
100004379:	je	0x100004c55
10000437f:	mov	rcx, qword ptr [rbp - 0xc0]
100004386:	lea	eax, [rcx - 0x3]
100004389:	cmp	eax, 0x2
10000438c:	jb	0x100004c74
100004392:	test	ecx, ecx
100004394:	je	0x100004d15
10000439a:	cmp	ecx, 0x6
10000439d:	jne	0x1000049ef
1000043a3:	mov	edi, 0x52
1000043a8:	mov	rsi, r12
1000043ab:	call	0x100009b90
1000043b0:	mov	rdi, qword ptr [rbp - 0xb0]
1000043b7:	call	0x100019806 ## symbol stub for: _free
1000043bc:	cmp	dword ptr [rbp - 0xc4], 0x0
1000043c3:	jne	0x1000043d1
1000043c5:	mov	eax, dword ptr [rbp - 0x10c]
1000043cb:	mov	dword ptr [rbp - 0xc4], eax
1000043d1:	mov	eax, 0x6
1000043d6:	jmp	0x100004cb6
1000043db:	cmp	dword ptr [rbx], 0x2
1000043de:	je	0x100008efa
1000043e4:	mov	dword ptr [rbx], 0x1
1000043ea:	jmp	0x100004c0a
1000043ef:	lea	rax, [rip + 0x252b2]
1000043f6:	jmp	0x100004bc4
1000043fb:	lea	rax, [rip + 0x25382]
100004402:	jmp	0x100004bc4
100004407:	lea	rcx, [rip + 0x25382]
10000440e:	mov	dword ptr [rcx], 0x1
100004414:	mov	rsi, qword ptr [rbp - 0xb0]
10000441b:	mov	edi, eax
10000441d:	call	0x100009b90
100004422:	jmp	0x100004b51
100004427:	lea	rax, [rip + 0x2501a]
10000442e:	jmp	0x100004c04
100004433:	mov	byte ptr [rip + 0x56b82], 0x1
10000443a:	jmp	0x100004c0a
10000443f:	mov	rsi, qword ptr [rbp - 0xb0]
100004446:	lea	rdi, [rip + 0x18187] ## literal pool for: "deflate"
10000444d:	xor	edx, edx
10000444f:	mov	ecx, 0x1
100004454:	call	0x1000165d3
100004459:	mov	ecx, 0x8
10000445e:	test	eax, eax
100004460:	jne	0x100004489
100004462:	mov	rsi, qword ptr [rbp - 0xb0]
100004469:	lea	rdi, [rip + 0x1729d] ## literal pool for: "store"
100004470:	xor	edx, edx
100004472:	mov	ecx, 0x1
100004477:	call	0x1000165d3
10000447c:	mov	ecx, 0x0
100004481:	test	eax, eax
100004483:	je	0x100008e67
100004489:	lea	rax, [rip + 0x24fbc]
100004490:	mov	dword ptr [rax], ecx
100004492:	jmp	0x100004b51
100004497:	lea	rax, [rip + 0x2521a]
10000449e:	jmp	0x100004bc4
1000044a3:	mov	r14, r15
1000044a6:	mov	r15, r13
1000044a9:	mov	r13, rbx
1000044ac:	mov	rbx, qword ptr [rbp - 0xb0]
1000044b3:	lea	rsi, [rip + 0x18048] ## literal pool for: "-"
1000044ba:	mov	rdi, rbx
1000044bd:	call	0x10001990e ## symbol stub for: _strcmp
1000044c2:	test	eax, eax
1000044c4:	je	0x100004b2d
1000044ca:	mov	rdi, rbx
1000044cd:	call	0x1000164cc
1000044d2:	lea	rcx, [rip + 0x253cf]
1000044d9:	mov	qword ptr [rcx], rax
1000044dc:	test	rax, rax
1000044df:	je	0x100004b2d
1000044e5:	cmp	rax, -0x1
1000044e9:	je	0x100008ec7
1000044ef:	mov	rbx, r13
1000044f2:	lea	rdx, [rip + 0x253ab]
1000044f9:	cmp	dword ptr [rdx], 0x0
1000044fc:	mov	r13, r15
1000044ff:	lea	r12, [rip + 0x25312]
100004506:	jne	0x10000450e
100004508:	mov	dword ptr [rdx], 0x1
10000450e:	cmp	rax, 0x3ff
100004514:	mov	r15, r14
100004517:	ja	0x100004cfd
10000451d:	shl	rax, 0x14
100004521:	mov	qword ptr [rcx], rax
100004524:	lea	r14, [rip + 0x253cd]
10000452b:	jmp	0x100004b51
100004530:	mov	eax, 0x1
100004535:	mov	qword ptr [rbp - 0x108], rax
10000453c:	jmp	0x100004c0a
100004541:	mov	byte ptr [rip + 0x56a88], 0x1
100004548:	jmp	0x100004c0a
10000454d:	lea	rax, [rip + 0x25234]
100004554:	mov	dword ptr [rax], 0x1
10000455a:	lea	rax, [rip + 0x25343]
100004561:	jmp	0x100004a61
100004566:	mov	dword ptr [rbp - 0x118], 0x1
100004570:	jmp	0x100004c0a
100004575:	mov	dword ptr [rbp - 0xe0], 0x1
10000457f:	jmp	0x100004c0a
100004584:	mov	rax, qword ptr [rbp - 0xb0]
10000458b:	lea	rcx, [rip + 0x24ede]
100004592:	jmp	0x100004a24
100004597:	lea	rax, [rip + 0x25312]
10000459e:	jmp	0x100004bc4
1000045a3:	cmp	dword ptr [rbp - 0xb4], 0x0
1000045aa:	je	0x100004b62
1000045b0:	lea	rax, [rip + 0x25161]
1000045b7:	jmp	0x100004c04
1000045bc:	mov	dword ptr [rbp - 0xf8], 0x1
1000045c6:	jmp	0x100004c0a
1000045cb:	cmp	dword ptr [rbp - 0xb4], 0x0
1000045d2:	je	0x100004b6b
1000045d8:	lea	rax, [rip + 0x24e89]
1000045df:	jmp	0x100004c04
1000045e4:	lea	rax, [rip + 0x24e61]
1000045eb:	xor	ecx, ecx
1000045ed:	mov	dword ptr [rax], ecx
1000045ef:	lea	rax, [rip + 0x24e5a]
1000045f6:	jmp	0x10000482c
1000045fb:	lea	rax, [rip + 0x250be]
100004602:	jmp	0x100004bc4
100004607:	cmp	dword ptr [rip + 0x24bfa], 0x1
10000460e:	jne	0x100008f06
100004614:	mov	dword ptr [rip + 0x24bea], 0x4
10000461e:	jmp	0x100004c0a
100004623:	mov	byte ptr [rip + 0x5699a], 0x1
10000462a:	jmp	0x100004c0a
10000462f:	mov	rdi, qword ptr [rbp - 0xb0]
100004636:	test	rdi, rdi
100004639:	je	0x100004b74
10000463f:	cmp	byte ptr [rdi], 0x0
100004642:	je	0x100004cc2
100004648:	call	0x1000164cc
10000464d:	lea	rcx, [rip + 0x250a4]
100004654:	mov	qword ptr [rcx], rax
100004657:	cmp	rax, -0x1
10000465b:	je	0x100008e2a
100004661:	cmp	rax, 0x3ff
100004667:	jg	0x100004cd2
10000466d:	shl	rax, 0x14
100004671:	mov	qword ptr [rcx], rax
100004674:	jmp	0x100004cde
100004679:	lea	rax, [rip + 0x25048]
100004680:	jmp	0x100004bc4
100004685:	cmp	dword ptr [rbp - 0xb4], 0x0
10000468c:	je	0x100004b87
100004692:	lea	rax, [rip + 0x2507b]
100004699:	jmp	0x100004c04
10000469e:	cmp	dword ptr [rbp - 0xb4], 0x0
1000046a5:	je	0x100004b90
1000046ab:	lea	rax, [rip + 0x250a6]
1000046b2:	jmp	0x100004c04
1000046b7:	mov	dword ptr [rbp - 0xa8], 0x1
1000046c1:	xor	eax, eax
1000046c3:	mov	qword ptr [rbp - 0x100], rax
1000046ca:	jmp	0x100004c0a
1000046cf:	lea	rax, [rip + 0x250d2]
1000046d6:	mov	rdi, qword ptr [rax]
1000046d9:	mov	dword ptr [rbp - 0xe8], 0x1
1000046e3:	test	rdi, rdi
1000046e6:	jne	0x100004b58
1000046ec:	jmp	0x100004c0a
1000046f1:	cmp	dword ptr [rbp - 0xb4], 0x0
1000046f8:	je	0x100004b99
1000046fe:	lea	rax, [rip + 0x25093]
100004705:	jmp	0x100004c04
10000470a:	mov	byte ptr [rip + 0x568af], 0x1
100004711:	jmp	0x100004c0a
100004716:	cmp	dword ptr [rbp - 0xb4], 0x0
10000471d:	je	0x100004bab
100004723:	lea	rax, [rip + 0x24fde]
10000472a:	jmp	0x100004c04
10000472f:	cmp	dword ptr [rbp - 0xb4], 0x0
100004736:	je	0x100004bb4
10000473c:	lea	rax, [rip + 0x25025]
100004743:	jmp	0x100004c04
100004748:	lea	rax, [rip + 0x25039]
10000474f:	jmp	0x100004bc4
100004754:	mov	rdi, qword ptr [rbp - 0xb0]
10000475b:	call	0x10000a72f
100004760:	mov	qword ptr [r12], rax
100004764:	mov	rdi, qword ptr [rbp - 0xb0]
10000476b:	call	0x100019806 ## symbol stub for: _free
100004770:	mov	dword ptr [rbp - 0xd8], 0x1
10000477a:	jmp	0x100004c0a
10000477f:	mov	dword ptr [rbp - 0xa4], 0x1
100004789:	jmp	0x100004c0a
10000478e:	lea	rax, [rip + 0x24cbf]
100004795:	jmp	0x100004c04
10000479a:	lea	rax, [rip + 0x24f6f]
1000047a1:	mov	dword ptr [rax], 0x0
1000047a7:	cmp	dword ptr [rbp - 0xb4], 0x0
1000047ae:	je	0x100004bd9
1000047b4:	lea	rax, [rip + 0x24f45]
1000047bb:	mov	qword ptr [rax], 0x0
1000047c2:	jmp	0x100004c0a
1000047c7:	cmp	dword ptr [rip + 0x24a3a], 0x1
1000047ce:	jne	0x100008f06
1000047d4:	mov	dword ptr [rip + 0x24a2a], 0x0
1000047de:	jmp	0x100004c0a
1000047e3:	cmp	dword ptr [rip + 0x24a1e], 0x1
1000047ea:	jne	0x100008f06
1000047f0:	mov	dword ptr [rip + 0x24a0e], 0x3
1000047fa:	jmp	0x100004c0a
1000047ff:	lea	rax, [rip + 0x24eaa]
100004806:	jmp	0x100004bc4
10000480b:	lea	rax, [rip + 0x24eb2]
100004812:	jmp	0x100004bc4
100004817:	lea	rax, [rip + 0x24f62]
10000481e:	mov	ecx, 0x1
100004823:	mov	dword ptr [rax], ecx
100004825:	lea	rax, [rip + 0x24f64]
10000482c:	mov	dword ptr [rax], ecx
10000482e:	jmp	0x100004c0a
100004833:	cmp	dword ptr [rbp - 0xb4], 0x0
10000483a:	je	0x100004bbd
100004840:	lea	rax, [rip + 0x24f55]
100004847:	jmp	0x100004a61
10000484c:	mov	rdi, qword ptr [rbp - 0xb0]
100004853:	lea	rsi, [rip + 0x17ce3] ## literal pool for: "%4d-%2d-%2d"
10000485a:	lea	rdx, [rbp - 0xa0]
100004861:	lea	rcx, [rbp - 0x140]
100004868:	lea	r8, [rbp - 0xd0]
10000486f:	xor	eax, eax
100004871:	call	0x1000198f6 ## symbol stub for: _sscanf
100004876:	cmp	eax, 0x3
100004879:	je	0x1000048ae
10000487b:	mov	rdi, qword ptr [rbp - 0xb0]
100004882:	lea	rsi, [rip + 0x17cc0] ## literal pool for: "%2d%2d%4d"
100004889:	lea	rdx, [rbp - 0x140]
100004890:	lea	rcx, [rbp - 0xd0]
100004897:	lea	r8, [rbp - 0xa0]
10000489e:	xor	eax, eax
1000048a0:	call	0x1000198f6 ## symbol stub for: _sscanf
1000048a5:	cmp	eax, 0x3
1000048a8:	jne	0x100008eee
1000048ae:	mov	esi, dword ptr [rbp - 0x140]
1000048b4:	lea	eax, [rsi - 0x1]
1000048b7:	cmp	eax, 0xb
1000048ba:	ja	0x100008eee
1000048c0:	mov	edx, dword ptr [rbp - 0xd0]
1000048c6:	lea	eax, [rdx - 0x1]
1000048c9:	cmp	eax, 0x1f
1000048cc:	jae	0x100008eee
1000048d2:	mov	edi, dword ptr [rbp - 0xa0]
1000048d8:	xor	ecx, ecx
1000048da:	xor	r8d, r8d
1000048dd:	xor	r9d, r9d
1000048e0:	call	0x100012027
1000048e5:	lea	rcx, [rip + 0x24ef4]
1000048ec:	jmp	0x100004b0c
1000048f1:	cmp	dword ptr [rbp - 0xb4], 0x0
1000048f8:	je	0x100004bcc
1000048fe:	lea	rax, [rip + 0x24e0b]
100004905:	jmp	0x100004c04
10000490a:	mov	rdi, qword ptr [rip + 0x566b7]
100004911:	test	rdi, rdi
100004914:	je	0x10000491b
100004916:	call	0x100019806 ## symbol stub for: _free
10000491b:	mov	rax, qword ptr [rbp - 0xb0]
100004922:	mov	qword ptr [rip + 0x5669f], rax
100004929:	jmp	0x100004c0a
10000492e:	mov	r14, r15
100004931:	mov	r15, r13
100004934:	mov	r13, rbx
100004937:	lea	rbx, [rip + 0x24e6a]
10000493e:	mov	rdi, qword ptr [rbx]
100004941:	test	rdi, rdi
100004944:	je	0x10000494b
100004946:	call	0x100019806 ## symbol stub for: _free
10000494b:	mov	rax, qword ptr [rbp - 0xb0]
100004952:	mov	qword ptr [rbx], rax
100004955:	mov	dword ptr [rbp - 0xe8], 0x0
10000495f:	jmp	0x1000049df
100004961:	lea	rax, [rip + 0x24d48]
100004968:	jmp	0x100004a61
10000496d:	lea	rax, [rip + 0x24d30]
100004974:	jmp	0x100004bc4
100004979:	lea	rax, [rip + 0x24f48]
100004980:	jmp	0x100004bc4
100004985:	lea	rax, [rip + 0x24ad0]
10000498c:	mov	dword ptr [rax], 0x0
100004992:	lea	rcx, [rip + 0x24d13]
100004999:	mov	eax, dword ptr [rcx]
10000499b:	test	eax, eax
10000499d:	je	0x100004c0a
1000049a3:	dec	eax
1000049a5:	mov	dword ptr [rcx], eax
1000049a7:	jmp	0x100004c0a
1000049ac:	lea	rax, [rip + 0x24d01]
1000049b3:	jmp	0x100004bc4
1000049b8:	mov	r14, r15
1000049bb:	mov	r15, r13
1000049be:	mov	r13, rbx
1000049c1:	lea	rbx, [rip + 0x24da8]
1000049c8:	mov	rdi, qword ptr [rbx]
1000049cb:	test	rdi, rdi
1000049ce:	je	0x1000049d5
1000049d0:	call	0x100019806 ## symbol stub for: _free
1000049d5:	mov	rax, qword ptr [rbp - 0xb0]
1000049dc:	mov	qword ptr [rbx], rax
1000049df:	mov	rbx, r13
1000049e2:	mov	r13, r15
1000049e5:	mov	r15, r14
1000049e8:	lea	r14, [rip + 0x24f09]
1000049ef:	lea	r12, [rip + 0x24e22]
1000049f6:	jmp	0x100004c0a
1000049fb:	cmp	dword ptr [rbx], 0x1
1000049fe:	je	0x100008efa
100004a04:	mov	dword ptr [rbx], 0x2
100004a0a:	jmp	0x100004c0a
100004a0f:	mov	byte ptr [rip + 0x5659e], 0x1
100004a16:	mov	rax, qword ptr [rbp - 0xb0]
100004a1d:	lea	rcx, [rip + 0x24d8c]
100004a24:	mov	qword ptr [rcx], rax
100004a27:	jmp	0x100004c0a
100004a2c:	mov	byte ptr [rip + 0x56585], 0x1
100004a33:	jmp	0x100004c0a
100004a38:	lea	rax, [rip + 0x24c7d]
100004a3f:	jmp	0x100004a61
100004a41:	lea	rax, [rip + 0x24c74]
100004a48:	jmp	0x100004bc4
100004a4d:	cmp	dword ptr [rbp - 0xb4], 0x0
100004a54:	je	0x100004bfd
100004a5a:	lea	rax, [rip + 0x249ff]
100004a61:	mov	dword ptr [rax], 0x2
100004a67:	jmp	0x100004c0a
100004a6c:	mov	rdi, qword ptr [rbp - 0xb0]
100004a73:	lea	rsi, [rip + 0x17ac3] ## literal pool for: "%4d-%2d-%2d"
100004a7a:	lea	rdx, [rbp - 0xa0]
100004a81:	lea	rcx, [rbp - 0x140]
100004a88:	lea	r8, [rbp - 0xd0]
100004a8f:	xor	eax, eax
100004a91:	call	0x1000198f6 ## symbol stub for: _sscanf
100004a96:	cmp	eax, 0x3
100004a99:	je	0x100004ace
100004a9b:	mov	rdi, qword ptr [rbp - 0xb0]
100004aa2:	lea	rsi, [rip + 0x17aa0] ## literal pool for: "%2d%2d%4d"
100004aa9:	lea	rdx, [rbp - 0x140]
100004ab0:	lea	rcx, [rbp - 0xd0]
100004ab7:	lea	r8, [rbp - 0xa0]
100004abe:	xor	eax, eax
100004ac0:	call	0x1000198f6 ## symbol stub for: _sscanf
100004ac5:	cmp	eax, 0x3
100004ac8:	jne	0x100008e21
100004ace:	mov	esi, dword ptr [rbp - 0x140]
100004ad4:	lea	eax, [rsi - 0x1]
100004ad7:	cmp	eax, 0xb
100004ada:	ja	0x100008e21
100004ae0:	mov	edx, dword ptr [rbp - 0xd0]
100004ae6:	lea	eax, [rdx - 0x1]
100004ae9:	cmp	eax, 0x1f
100004aec:	jae	0x100008e21
100004af2:	mov	edi, dword ptr [rbp - 0xa0]
100004af8:	xor	ecx, ecx
100004afa:	xor	r8d, r8d
100004afd:	xor	r9d, r9d
100004b00:	call	0x100012027
100004b05:	lea	rcx, [rip + 0x24cdc]
100004b0c:	mov	qword ptr [rcx], rax
100004b0f:	jmp	0x100004b51
100004b11:	cmp	dword ptr [rip + 0x246f0], 0x1
100004b18:	jne	0x100008f06
100004b1e:	mov	dword ptr [rip + 0x246e0], 0x2
100004b28:	jmp	0x100004c0a
100004b2d:	lea	rax, [rip + 0x24d70]
100004b34:	mov	dword ptr [rax], 0xffffffff
100004b3a:	mov	rbx, r13
100004b3d:	mov	r13, r15
100004b40:	mov	r15, r14
100004b43:	lea	r14, [rip + 0x24dae]
100004b4a:	lea	r12, [rip + 0x24cc7]
100004b51:	mov	rdi, qword ptr [rbp - 0xb0]
100004b58:	call	0x100019806 ## symbol stub for: _free
100004b5d:	jmp	0x100004c0a
100004b62:	lea	rax, [rip + 0x24baf]
100004b69:	jmp	0x100004bc4
100004b6b:	lea	rax, [rip + 0x248f6]
100004b72:	jmp	0x100004bc4
100004b74:	lea	rax, [rip + 0x24b7d]
100004b7b:	mov	qword ptr [rax], 0xa00000
100004b82:	jmp	0x100004cea
100004b87:	lea	rax, [rip + 0x24b86]
100004b8e:	jmp	0x100004bc4
100004b90:	lea	rax, [rip + 0x24bc1]
100004b97:	jmp	0x100004bc4
100004b99:	lea	rax, [rip + 0x24bf8]
100004ba0:	jmp	0x100004bc4
100004ba2:	lea	rax, [rip + 0x24b63]
100004ba9:	jmp	0x100004bc4
100004bab:	lea	rax, [rip + 0x24b56]
100004bb2:	jmp	0x100004bc4
100004bb4:	lea	rax, [rip + 0x24bad]
100004bbb:	jmp	0x100004bc4
100004bbd:	lea	rax, [rip + 0x24bd8]
100004bc4:	mov	dword ptr [rax], 0x1
100004bca:	jmp	0x100004c0a
100004bcc:	lea	rax, [rip + 0x24b3d]
100004bd3:	mov	dword ptr [rax], 0x1
100004bd9:	lea	rax, [rip + 0x24b20]
100004be0:	cmp	qword ptr [rax], 0x0
100004be4:	jne	0x100004cf1
100004bea:	lea	rcx, [rip + 0x24b07]
100004bf1:	mov	qword ptr [rcx], 0xa00000
100004bf8:	jmp	0x100004cf1
100004bfd:	lea	rax, [rip + 0x2485c]
100004c04:	mov	dword ptr [rax], 0x0
100004c0a:	sub	rsp, 0x8
100004c0e:	lea	rdi, [rbp - 0xf0]
100004c15:	lea	rsi, [rbp - 0x11c]
100004c1c:	lea	rdx, [rbp - 0x10c]
100004c23:	lea	rcx, [rbp - 0x124]
100004c2a:	lea	r8, [rbp - 0xb0]
100004c31:	lea	r9, [rbp - 0xb4]
100004c38:	push	0x0
100004c3a:	push	r13
100004c3c:	push	r15
100004c3e:	call	0x10001466b
100004c43:	add	rsp, 0x20
100004c47:	test	rax, rax
100004c4a:	jne	0x10000428d
100004c50:	jmp	0x100004f5d
100004c55:	mov	dword ptr [rbp - 0x120], 0x1
100004c5f:	cmp	dword ptr [rbp - 0xc0], 0x0
100004c66:	lea	r12, [rip + 0x24bab]
100004c6d:	jne	0x100004c0a
100004c6f:	jmp	0x100008e18
100004c74:	cmp	dword ptr [rbp - 0xa8], 0x1
100004c7b:	jne	0x100004c94
100004c7d:	mov	rdi, r12
100004c80:	lea	rsi, [rip + 0x1787b] ## literal pool for: "-"
100004c87:	call	0x10001990e ## symbol stub for: _strcmp
100004c8c:	test	eax, eax
100004c8e:	je	0x100008e44
100004c94:	mov	rdi, r12
100004c97:	call	0x100009f42
100004c9c:	cmp	dword ptr [rbp - 0xc0], 0x3
100004ca3:	jne	0x100004cb1
100004ca5:	mov	eax, dword ptr [rbp - 0x10c]
100004cab:	mov	dword ptr [rbp - 0xc4], eax
100004cb1:	mov	eax, 0x4
100004cb6:	mov	qword ptr [rbp - 0xc0], rax
100004cbd:	jmp	0x1000049ef
100004cc2:	lea	rax, [rip + 0x24a2f]
100004cc9:	mov	qword ptr [rax], 0xa00000
100004cd0:	jmp	0x100004ce5
100004cd2:	cmp	rax, 0x7fff
100004cd8:	jle	0x100008e4d
100004cde:	mov	rdi, qword ptr [rbp - 0xb0]
100004ce5:	call	0x100019806 ## symbol stub for: _free
100004cea:	lea	rax, [rip + 0x24a0f]
100004cf1:	mov	qword ptr [rax], -0x1
100004cf8:	jmp	0x100004c0a
100004cfd:	cmp	rax, 0xffff
100004d03:	lea	r14, [rip + 0x24bee]
100004d0a:	ja	0x100004b51
100004d10:	jmp	0x100008f12
100004d15:	mov	rdi, r12
100004d18:	lea	rsi, [rip + 0x177e3] ## literal pool for: "-"
100004d1f:	call	0x10001990e ## symbol stub for: _strcmp
100004d24:	test	eax, eax
100004d26:	je	0x100004d51
100004d28:	mov	rdi, r12
100004d2b:	call	0x10000a72f
100004d30:	lea	rcx, [rip + 0x26221]
100004d37:	mov	qword ptr [rcx], rax
100004d3a:	test	rax, rax
100004d3d:	je	0x100008e0c
100004d43:	mov	rdi, qword ptr [rbp - 0xb0]
100004d4a:	call	0x100019806 ## symbol stub for: _free
100004d4f:	jmp	0x100004d56
100004d51:	call	0x100009eda
100004d56:	cmp	dword ptr [rbp - 0xa4], 0x0
100004d5d:	je	0x100004da4
100004d5f:	lea	rax, [rip + 0x261ca]
100004d66:	mov	r12, r14
100004d69:	mov	r14, r15
100004d6c:	mov	r15, r13
100004d6f:	mov	r13, rbx
100004d72:	mov	rbx, rax
100004d75:	mov	rdi, qword ptr [rax]
100004d78:	lea	rax, [rip + 0x261d9]
100004d7f:	mov	rdx, qword ptr [rax]
100004d82:	lea	rsi, [rip + 0x17941] ## literal pool for: "sd: Zipfile name '%s'\n"
100004d89:	xor	eax, eax
100004d8b:	call	0x1000197ee ## symbol stub for: _fprintf
100004d90:	mov	rdi, qword ptr [rbx]
100004d93:	mov	rbx, r13
100004d96:	mov	r13, r15
100004d99:	mov	r15, r14
100004d9c:	mov	r14, r12
100004d9f:	call	0x1000197d6 ## symbol stub for: _fflush
100004da4:	lea	rax, [rip + 0x24a5d]
100004dab:	cmp	qword ptr [rax], 0x0
100004daf:	mov	r12d, dword ptr [rbp - 0xd8]
100004db6:	jne	0x100004e0a
100004db8:	mov	r14, r15
100004dbb:	mov	r15, r13
100004dbe:	mov	r13, rbx
100004dc1:	lea	rax, [rip + 0x26190]
100004dc8:	mov	rbx, qword ptr [rax]
100004dcb:	mov	rdi, rbx
100004dce:	call	0x100019920 ## symbol stub for: _strlen
100004dd3:	lea	rdi, [rax + 0x1]
100004dd7:	call	0x100019848 ## symbol stub for: _malloc
100004ddc:	lea	rcx, [rip + 0x24a25]
100004de3:	mov	qword ptr [rcx], rax
100004de6:	test	rax, rax
100004de9:	je	0x100008e0c
100004def:	mov	rdi, rax
100004df2:	mov	rsi, rbx
100004df5:	call	0x100019914 ## symbol stub for: _strcpy
100004dfa:	mov	rbx, r13
100004dfd:	mov	r13, r15
100004e00:	mov	r15, r14
100004e03:	lea	r14, [rip + 0x24aee]
100004e0a:	lea	rax, [rip + 0x24a07]
100004e11:	cmp	qword ptr [rax], 0x0
100004e15:	jne	0x100004e69
100004e17:	mov	r14, r15
100004e1a:	mov	r15, r13
100004e1d:	mov	r13, rbx
100004e20:	lea	rax, [rip + 0x26131]
100004e27:	mov	rbx, qword ptr [rax]
100004e2a:	mov	rdi, rbx
100004e2d:	call	0x100019920 ## symbol stub for: _strlen
100004e32:	lea	rdi, [rax + 0x1]
100004e36:	call	0x100019848 ## symbol stub for: _malloc
100004e3b:	lea	rcx, [rip + 0x249d6]
100004e42:	mov	qword ptr [rcx], rax
100004e45:	test	rax, rax
100004e48:	je	0x100008e0c
100004e4e:	mov	rdi, rax
100004e51:	mov	rsi, rbx
100004e54:	call	0x100019914 ## symbol stub for: _strcpy
100004e59:	mov	rbx, r13
100004e5c:	mov	r13, r15
100004e5f:	mov	r15, r14
100004e62:	lea	r14, [rip + 0x24a8f]
100004e69:	mov	dword ptr [rbp - 0xd8], r12d
100004e70:	mov	r12, rbx
100004e73:	mov	eax, 0x3
100004e78:	cmp	dword ptr [rbp - 0xa8], 0x0
100004e7f:	je	0x100004edf
100004e81:	mov	rax, qword ptr [rip + 0x1f198] ## literal pool symbol address: ___stdinp
100004e88:	mov	rdi, qword ptr [rax]
100004e8b:	call	0x100011290
100004e90:	mov	rbx, rax
100004e93:	mov	eax, 0x3
100004e98:	test	rbx, rbx
100004e9b:	je	0x100004edf
100004e9d:	cmp	dword ptr [r12], 0x2
100004ea2:	jne	0x100004eb3
100004ea4:	mov	edi, 0x52
100004ea9:	mov	rsi, rbx
100004eac:	call	0x100009b90
100004eb1:	jmp	0x100004ebb
100004eb3:	mov	rdi, rbx
100004eb6:	call	0x100009f42
100004ebb:	mov	rdi, rbx
100004ebe:	call	0x100019806 ## symbol stub for: _free
100004ec3:	mov	rax, qword ptr [rip + 0x1f156] ## literal pool symbol address: ___stdinp
100004eca:	mov	rdi, qword ptr [rax]
100004ecd:	call	0x100011290
100004ed2:	mov	rbx, rax
100004ed5:	test	rax, rax
100004ed8:	jne	0x100004e9d
100004eda:	mov	eax, 0x4
100004edf:	mov	rbx, r12
100004ee2:	cmp	dword ptr [r12], 0x2
100004ee7:	mov	ecx, 0x6
100004eec:	cmove	eax, ecx
100004eef:	mov	qword ptr [rbp - 0xc0], rax
100004ef6:	mov	dword ptr [rbp - 0xa8], 0x0
100004f00:	jmp	0x1000049ef
100004f05:	xor	eax, eax
100004f07:	mov	qword ptr [rbp - 0x108], rax
100004f0e:	xor	eax, eax
100004f10:	mov	qword ptr [rbp - 0xc0], rax
100004f17:	xor	r12d, r12d
100004f1a:	xor	ebx, ebx
100004f1c:	mov	dword ptr [rbp - 0xa4], 0x0
100004f26:	xor	r14d, r14d
100004f29:	mov	dword ptr [rbp - 0xe0], 0x0
100004f33:	mov	dword ptr [rbp - 0xc4], 0x0
100004f3d:	mov	dword ptr [rbp - 0xa8], 0x0
100004f47:	lea	r15, [rip + 0x25fe2]
100004f4e:	jmp	0x100005088
100004f53:	call	0x1000097d8
100004f58:	jmp	0x1000072d3
100004f5d:	cmp	dword ptr [rbp - 0xe8], 0x0
100004f64:	je	0x10000506d
100004f6a:	mov	edi, 0x51
100004f6f:	call	0x100019848 ## symbol stub for: _malloc
100004f74:	lea	r14, [rip + 0x2482d]
100004f7b:	mov	qword ptr [r14], rax
100004f7e:	test	rax, rax
100004f81:	lea	r15, [rip + 0x25fa8]
100004f88:	mov	r12d, dword ptr [rbp - 0xd8]
100004f8f:	je	0x10000917a
100004f95:	lea	rdi, [rip + 0x1671a] ## literal pool for: "Enter password: "
100004f9c:	mov	rsi, rax
100004f9f:	mov	edx, 0x51
100004fa4:	call	0x100016a1e
100004fa9:	test	rax, rax
100004fac:	je	0x10000905b
100004fb2:	mov	rax, qword ptr [r14]
100004fb5:	cmp	byte ptr [rax], 0x0
100004fb8:	je	0x100008fdc
100004fbe:	mov	edi, 0x51
100004fc3:	call	0x100019848 ## symbol stub for: _malloc
100004fc8:	test	rax, rax
100004fcb:	je	0x100009186
100004fd1:	mov	rbx, rax
100004fd4:	lea	rdi, [rip + 0x166c9] ## literal pool for: "Verify password: "
100004fdb:	mov	rsi, rax
100004fde:	mov	edx, 0x51
100004fe3:	call	0x100016a1e
100004fe8:	test	rax, rax
100004feb:	je	0x10000905b
100004ff1:	mov	rdi, qword ptr [r14]
100004ff4:	mov	rsi, rbx
100004ff7:	call	0x10001990e ## symbol stub for: _strcmp
100004ffc:	mov	r14d, eax
100004fff:	mov	rdi, rbx
100005002:	call	0x100019806 ## symbol stub for: _free
100005007:	test	r14d, r14d
10000500a:	mov	ebx, dword ptr [rbp - 0xf8]
100005010:	mov	r14d, dword ptr [rbp - 0x118]
100005017:	je	0x100005088
100005019:	lea	rsi, [rip + 0x17773] ## literal pool for: "password verification failed"
100005020:	jmp	0x100008deb
100005025:	xor	ebx, ebx
100005027:	lea	r14, [rip + 0x1f112]
10000502e:	mov	rdi, qword ptr [rbx + r14]
100005032:	call	0x1000198a2 ## symbol stub for: _puts
100005037:	add	rbx, 0x8
10000503b:	cmp	rbx, 0xa20
100005042:	jne	0x10000502e
100005044:	jmp	0x1000072d3
100005049:	xor	ebx, ebx
10000504b:	lea	r14, [rip + 0x2330e]
100005052:	mov	rdi, qword ptr [rbx + r14]
100005056:	call	0x1000198a2 ## symbol stub for: _puts
10000505b:	add	rbx, 0x8
10000505f:	cmp	rbx, 0x1b0
100005066:	jne	0x100005052
100005068:	jmp	0x1000072d3
10000506d:	lea	r15, [rip + 0x25ebc]
100005074:	mov	ebx, dword ptr [rbp - 0xf8]
10000507a:	mov	r14d, dword ptr [rbp - 0x118]
100005081:	mov	r12d, dword ptr [rbp - 0xd8]
100005088:	lea	rax, [rip + 0x24719]
10000508f:	mov	rax, qword ptr [rax]
100005092:	test	rax, rax
100005095:	je	0x1000050a0
100005097:	cmp	byte ptr [rax], 0x0
10000509a:	je	0x100008fdc
1000050a0:	cmp	dword ptr [rbp - 0xa4], 0x0
1000050a7:	je	0x1000050ca
1000050a9:	mov	rcx, qword ptr [r15]
1000050ac:	lea	rdi, [rip + 0x176fd] ## literal pool for: "sd: Command line read\n"
1000050b3:	mov	esi, 0x16
1000050b8:	mov	edx, 0x1
1000050bd:	call	0x10001981e ## symbol stub for: _fwrite
1000050c2:	mov	rdi, qword ptr [r15]
1000050c5:	call	0x1000197d6 ## symbol stub for: _fflush
1000050ca:	test	ebx, ebx
1000050cc:	jne	0x100008f4c
1000050d2:	test	r14d, r14d
1000050d5:	je	0x100005211
1000050db:	lea	rdi, [rip + 0x1cc7d] ## literal pool for: "available options:"
1000050e2:	call	0x1000198a2 ## symbol stub for: _puts
1000050e7:	lea	rbx, [rip + 0x176ef] ## literal pool for: " %-2s  %-18s %-4s %-3s %-30s\n"
1000050ee:	lea	rsi, [rip + 0x17706] ## literal pool for: "sh"
1000050f5:	lea	rdx, [rip + 0x17702] ## literal pool for: "long"
1000050fc:	lea	rcx, [rip + 0x17700] ## literal pool for: "val"
100005103:	lea	r8, [rip + 0x176fd] ## literal pool for: "neg"
10000510a:	lea	r9, [rip + 0x176fa] ## literal pool for: "description"
100005111:	mov	rdi, rbx
100005114:	xor	eax, eax
100005116:	call	0x100019890 ## symbol stub for: _printf
10000511b:	lea	rsi, [rip + 0x1756b] ## literal pool for: "--"
100005122:	lea	rdx, [rip + 0x176ee] ## literal pool for: "----"
100005129:	lea	rcx, [rip + 0x176ec] ## literal pool for: "---"
100005130:	lea	r9, [rip + 0x176e9] ## literal pool for: "-----------"
100005137:	mov	rdi, rbx
10000513a:	mov	r8, rcx
10000513d:	xor	eax, eax
10000513f:	call	0x100019890 ## symbol stub for: _printf
100005144:	cmp	qword ptr [rip + 0x233dc], 0x0
10000514c:	je	0x100005203
100005152:	lea	r14, [rip + 0x233b7]
100005159:	lea	r15, [rip + 0x176f6] ## literal pool for: "unk"
100005160:	lea	r13, [rip + 0x176d3] ## literal pool for: "%-4s "
100005167:	lea	r12, [rip + 0x15649] ## literal pool for: ""
10000516e:	lea	rbx, [rip + 0x176e5] ## literal pool for: "%-3s "
100005175:	mov	rsi, qword ptr [r14]
100005178:	mov	rdx, qword ptr [r14 + 0x8]
10000517c:	lea	rdi, [rip + 0x176a9] ## literal pool for: " %-2s  %-18s "
100005183:	xor	eax, eax
100005185:	call	0x100019890 ## symbol stub for: _printf
10000518a:	movsxd	rax, dword ptr [r14 + 0x10]
10000518e:	mov	rsi, r15
100005191:	cmp	rax, 0x5
100005195:	ja	0x1000051a2
100005197:	lea	rcx, [rip + 0x1f9c2]
10000519e:	mov	rsi, qword ptr [rcx + 8*rax]
1000051a2:	mov	rdi, r13
1000051a5:	xor	eax, eax
1000051a7:	call	0x100019890 ## symbol stub for: _printf
1000051ac:	mov	eax, dword ptr [r14 + 0x14]
1000051b0:	test	eax, eax
1000051b2:	mov	rsi, r15
1000051b5:	cmove	rsi, r12
1000051b9:	cmp	eax, 0x1
1000051bc:	lea	rax, [rip + 0x17644] ## literal pool for: "neg"
1000051c3:	cmove	rsi, rax
1000051c7:	mov	rdi, rbx
1000051ca:	xor	eax, eax
1000051cc:	call	0x100019890 ## symbol stub for: _printf
1000051d1:	mov	rsi, qword ptr [r14 + 0x20]
1000051d5:	test	rsi, rsi
1000051d8:	je	0x1000051ea
1000051da:	lea	rdi, [rip + 0x1767f] ## literal pool for: "%-30s\n"
1000051e1:	xor	eax, eax
1000051e3:	call	0x100019890 ## symbol stub for: _printf
1000051e8:	jmp	0x1000051f4
1000051ea:	mov	edi, 0xa
1000051ef:	call	0x10001989c ## symbol stub for: _putchar
1000051f4:	cmp	qword ptr [r14 + 0x40], 0x0
1000051f9:	lea	r14, [r14 + 0x28]
1000051fd:	jne	0x100005175
100005203:	xor	edi, edi
100005205:	call	0x1000099d8
10000520a:	xor	ebx, ebx
10000520c:	jmp	0x1000072dc
100005211:	mov	dword ptr [rbp - 0xd8], r12d
100005218:	lea	r13, [rip + 0x24551]
10000521f:	mov	r15, qword ptr [r13]
100005223:	test	r15, r15
100005226:	je	0x10000545b
10000522c:	xor	eax, eax
10000522e:	mov	rdi, r15
100005231:	mov	rbx, rax
100005234:	mov	esi, 0x2f
100005239:	call	0x100019932 ## symbol stub for: _strrchr
10000523e:	lea	rdi, [rax + 0x1]
100005242:	test	rax, rax
100005245:	jne	0x100005231
100005247:	test	rbx, rbx
10000524a:	cmove	rbx, r15
10000524e:	mov	rdi, rbx
100005251:	mov	esi, 0x2e
100005256:	call	0x100019932 ## symbol stub for: _strrchr
10000525b:	test	rax, rax
10000525e:	jne	0x1000052ab
100005260:	mov	rdi, r15
100005263:	call	0x100019920 ## symbol stub for: _strlen
100005268:	lea	rdi, [rax + 0x5]
10000526c:	call	0x100019848 ## symbol stub for: _malloc
100005271:	test	rax, rax
100005274:	je	0x10000926c
10000527a:	mov	r14, rax
10000527d:	mov	rdi, rax
100005280:	mov	rsi, r15
100005283:	call	0x100019914 ## symbol stub for: _strcpy
100005288:	mov	rdi, r14
10000528b:	call	0x100019920 ## symbol stub for: _strlen
100005290:	mov	dword ptr [r14 + rax], 0x676f6c2e
100005298:	mov	byte ptr [r14 + rax + 0x4], 0x0
10000529e:	mov	rdi, qword ptr [r13]
1000052a2:	call	0x100019806 ## symbol stub for: _free
1000052a7:	mov	qword ptr [r13], r14
1000052ab:	lea	rax, [rip + 0x244b6]
1000052b2:	cmp	dword ptr [rax], 0x0
1000052b5:	lea	rax, [rip + 0x175ba] ## literal pool for: "w"
1000052bc:	lea	rcx, [rip + 0x175b1] ## literal pool for: "a"
1000052c3:	cmove	rcx, rax
1000052c7:	lea	rbx, [rbp - 0xa0]
1000052ce:	mov	edx, 0xa
1000052d3:	mov	rdi, rbx
1000052d6:	xor	esi, esi
1000052d8:	xor	eax, eax
1000052da:	call	0x100019770 ## symbol stub for: ___sprintf_chk
1000052df:	mov	rdi, qword ptr [r13]
1000052e3:	mov	rsi, rbx
1000052e6:	call	0x1000197e8 ## symbol stub for: _fopen
1000052eb:	lea	r12, [rip + 0x2446e]
1000052f2:	mov	qword ptr [r12], rax
1000052f6:	test	rax, rax
1000052f9:	je	0x100009121
1000052ff:	lea	rbx, [rbp - 0x140]
100005306:	mov	rdi, rbx
100005309:	call	0x10001994a ## symbol stub for: _time
10000530e:	mov	rdi, rbx
100005311:	call	0x10001983c ## symbol stub for: _localtime
100005316:	mov	r14, rax
100005319:	mov	rcx, qword ptr [r12]
10000531d:	lea	rdi, [rip + 0x17570] ## literal pool for: "---------\n"
100005324:	mov	r13d, 0x1
10000532a:	mov	esi, 0xa
10000532f:	mov	edx, 0x1
100005334:	call	0x10001981e ## symbol stub for: _fwrite
100005339:	mov	rbx, qword ptr [r12]
10000533d:	mov	rdi, r14
100005340:	call	0x100019794 ## symbol stub for: _asctime
100005345:	lea	rsi, [rip + 0x17553] ## literal pool for: "Zip log opened %s"
10000534c:	mov	rdi, rbx
10000534f:	mov	rdx, rax
100005352:	xor	eax, eax
100005354:	call	0x1000197ee ## symbol stub for: _fprintf
100005359:	mov	rcx, qword ptr [r12]
10000535d:	lea	rdi, [rip + 0x1754d] ## literal pool for: "command line arguments:\n "
100005364:	mov	esi, 0x19
100005369:	mov	edx, 0x1
10000536e:	call	0x10001981e ## symbol stub for: _fwrite
100005373:	mov	rax, qword ptr [rbp - 0xf0]
10000537a:	mov	rbx, qword ptr [rax + 0x8]
10000537e:	test	rbx, rbx
100005381:	je	0x100005436
100005387:	mov	r14, qword ptr [rip + 0x1ec72] ## literal pool symbol address: __DefaultRuneLocale
10000538e:	mov	r15d, 0x4000
100005394:	mov	al, byte ptr [rbx]
100005396:	test	al, al
100005398:	je	0x100005409
10000539a:	mov	r12d, 0x1
1000053a0:	movsx	edi, al
1000053a3:	test	dil, dil
1000053a6:	js	0x1000053b4
1000053a8:	mov	eax, edi
1000053aa:	mov	eax, dword ptr [r14 + 4*rax + 0x3c]
1000053af:	and	eax, r15d
1000053b2:	jmp	0x1000053be
1000053b4:	mov	esi, 0x4000
1000053b9:	call	0x10001976a ## symbol stub for: ___maskrune
1000053be:	test	eax, eax
1000053c0:	jne	0x1000053e3
1000053c2:	mov	rax, qword ptr [rbp - 0xf0]
1000053c9:	mov	rbx, qword ptr [rax + 8*r13]
1000053cd:	mov	rdi, rbx
1000053d0:	call	0x100019920 ## symbol stub for: _strlen
1000053d5:	cmp	r12, rax
1000053d8:	jae	0x100005402
1000053da:	mov	al, byte ptr [rbx + r12]
1000053de:	inc	r12
1000053e1:	jmp	0x1000053a0
1000053e3:	lea	r12, [rip + 0x24376]
1000053ea:	mov	rdi, qword ptr [r12]
1000053ee:	mov	rax, qword ptr [rbp - 0xf0]
1000053f5:	mov	rdx, qword ptr [rax + 8*r13]
1000053f9:	lea	rsi, [rip + 0x174cb] ## literal pool for: "\"%s\" "
100005400:	jmp	0x100005417
100005402:	lea	r12, [rip + 0x24357]
100005409:	mov	rdi, qword ptr [r12]
10000540d:	lea	rsi, [rip + 0x174bd] ## literal pool for: "%s "
100005414:	mov	rdx, rbx
100005417:	xor	eax, eax
100005419:	call	0x1000197ee ## symbol stub for: _fprintf
10000541e:	mov	rax, qword ptr [rbp - 0xf0]
100005425:	mov	rbx, qword ptr [rax + 8*r13 + 0x8]
10000542a:	inc	r13
10000542d:	test	rbx, rbx
100005430:	jne	0x100005394
100005436:	mov	rcx, qword ptr [r12]
10000543a:	lea	rdi, [rip + 0x17494] ## literal pool for: "\n\n"
100005441:	mov	esi, 0x2
100005446:	mov	edx, 0x1
10000544b:	call	0x10001981e ## symbol stub for: _fwrite
100005450:	mov	rdi, qword ptr [r12]
100005454:	call	0x1000197d6 ## symbol stub for: _fflush
100005459:	jmp	0x100005468
10000545b:	lea	rax, [rip + 0x242f6]
100005462:	mov	dword ptr [rax], 0x0
100005468:	lea	rax, [rip + 0x24435]
10000546f:	cmp	dword ptr [rax], 0x0
100005472:	lea	r15, [rip + 0x2439f]
100005479:	lea	r13, [rip + 0x25ab0]
100005480:	je	0x1000054e6
100005482:	mov	rbx, qword ptr [r15]
100005485:	test	rbx, rbx
100005488:	je	0x1000054e6
10000548a:	mov	rdi, rbx
10000548d:	call	0x100019920 ## symbol stub for: _strlen
100005492:	cmp	eax, 0x4
100005495:	jl	0x100008fc9
10000549b:	movsxd	r14, eax
10000549e:	cmp	byte ptr [rbx + r14 - 0x4], 0x2e
1000054a4:	jne	0x100008fc9
1000054aa:	movsx	edi, byte ptr [rbx + r14 - 0x3]
1000054b0:	call	0x10001978e ## symbol stub for: ___toupper
1000054b5:	cmp	eax, 0x5a
1000054b8:	jne	0x100008fc9
1000054be:	movsx	edi, byte ptr [rbx + r14 - 0x2]
1000054c4:	call	0x10001978e ## symbol stub for: ___toupper
1000054c9:	cmp	eax, 0x49
1000054cc:	jne	0x100008fc9
1000054d2:	movsx	edi, byte ptr [rbx + r14 - 0x1]
1000054d8:	call	0x10001978e ## symbol stub for: ___toupper
1000054dd:	cmp	eax, 0x50
1000054e0:	jne	0x100008fc9
1000054e6:	lea	rax, [rip + 0x241bf]
1000054ed:	cmp	dword ptr [rax], 0x0
1000054f0:	je	0x10000550f
1000054f2:	lea	rax, [rip + 0x241ff]
1000054f9:	lea	rcx, [rip + 0x24200]
100005500:	mov	rcx, qword ptr [rcx]
100005503:	or	rcx, qword ptr [rax]
100005506:	jne	0x10000550f
100005508:	mov	qword ptr [rax], 0xa00000
10000550f:	lea	rax, [rip + 0x243ea]
100005516:	cmp	dword ptr [rax], 0x0
100005519:	mov	ebx, dword ptr [rbp - 0xd8]
10000551f:	je	0x100005533
100005521:	lea	rax, [rip + 0x243d0]
100005528:	cmp	qword ptr [rax], 0x0
10000552c:	jne	0x100005533
10000552e:	call	0x100009df3
100005533:	test	ebx, ebx
100005535:	je	0x100005557
100005537:	cmp	dword ptr [rbp - 0xc0], 0x3
10000553e:	jne	0x100005557
100005540:	lea	rax, [rip + 0x2424d]
100005547:	mov	dword ptr [rax], 0x1
10000554d:	mov	dword ptr [rip + 0x23cb1], 0x4
100005557:	test	ebx, ebx
100005559:	je	0x100005575
10000555b:	lea	rax, [rip + 0x242a6]
100005562:	mov	rdi, qword ptr [rax]
100005565:	mov	rsi, qword ptr [r15]
100005568:	call	0x100015d2c
10000556d:	test	eax, eax
10000556f:	je	0x100009138
100005575:	lea	r12, [rip + 0x24134]
10000557c:	mov	edx, dword ptr [r12]
100005580:	lea	rax, [rip + 0x241f9]
100005587:	mov	ecx, dword ptr [rax]
100005589:	test	edx, edx
10000558b:	je	0x100005595
10000558d:	test	ecx, ecx
10000558f:	jne	0x100009073
100005595:	mov	eax, dword ptr [rip + 0x23c6d]
10000559b:	cmp	eax, 0x4
10000559e:	jne	0x1000055b1
1000055a0:	lea	rsi, [rip + 0x241f5]
1000055a7:	mov	esi, dword ptr [rsi]
1000055a9:	or	esi, ebx
1000055ab:	je	0x10000907f
1000055b1:	test	ebx, ebx
1000055b3:	jne	0x1000055bd
1000055b5:	test	edx, edx
1000055b7:	jne	0x10000908b
1000055bd:	test	edx, edx
1000055bf:	je	0x1000055d1
1000055c1:	lea	rdx, [rip + 0x241cc]
1000055c8:	cmp	dword ptr [rdx], 0x0
1000055cb:	je	0x1000090aa
1000055d1:	test	ebx, ebx
1000055d3:	jne	0x1000055dd
1000055d5:	test	ecx, ecx
1000055d7:	jne	0x1000090b6
1000055dd:	test	ecx, ecx
1000055df:	je	0x1000055ec
1000055e1:	mov	ecx, eax
1000055e3:	and	ecx, -0x5
1000055e6:	je	0x1000090c2
1000055ec:	cmp	eax, 0x4
1000055ef:	jne	0x100005662
1000055f1:	cmp	dword ptr [rbp - 0xc0], 0x2
1000055f8:	jg	0x1000056b8
1000055fe:	call	0x100009eda
100005603:	lea	rdi, [rip + 0x16ef8] ## literal pool for: "-"
10000560a:	xor	esi, esi
10000560c:	call	0x100016b1a
100005611:	test	eax, eax
100005613:	je	0x10000563e
100005615:	cmp	eax, -0x1
100005618:	jne	0x1000091ea
10000561e:	lea	rdi, [rip + 0x17470] ## literal pool for: "name not matched: "
100005625:	lea	rsi, [rip + 0x16ed6] ## literal pool for: "-"
10000562c:	call	0x100003e67
100005631:	cmp	dword ptr [rbp - 0xe0], 0x0
100005638:	jne	0x100009284
10000563e:	cmp	dword ptr [rbp - 0xa8], 0x0
100005645:	jne	0x1000091f6
10000564b:	mov	eax, 0x4
100005650:	mov	qword ptr [rbp - 0xc0], rax
100005657:	xor	eax, eax
100005659:	mov	qword ptr [rbp - 0x100], rax
100005660:	jmp	0x1000056b8
100005662:	lea	rcx, [rip + 0x24037]
100005669:	cmp	dword ptr [rcx], 0x2
10000566c:	sete	cl
10000566f:	lea	rdx, [rip + 0x2428a]
100005676:	cmp	dword ptr [rdx], 0x0
100005679:	setne	dl
10000567c:	cmp	qword ptr [rip + 0x24004], 0x0
100005684:	jne	0x1000055f1
10000568a:	cmp	dword ptr [rbp - 0xc4], 0x0
100005691:	jne	0x1000055f1
100005697:	or	cl, dl
100005699:	je	0x1000055f1
10000569f:	cmp	dword ptr [rbp - 0xc0], 0x3
1000056a6:	jl	0x10000919e
1000056ac:	and	eax, -0x2
1000056af:	cmp	eax, 0x2
1000056b2:	jne	0x10000919e
1000056b8:	lea	rax, [rip + 0x25899]
1000056bf:	mov	rdi, qword ptr [rax]
1000056c2:	test	rdi, rdi
1000056c5:	je	0x100005710
1000056c7:	lea	rsi, [rip + 0x16e34] ## literal pool for: "-"
1000056ce:	call	0x10001990e ## symbol stub for: _strcmp
1000056d3:	test	eax, eax
1000056d5:	jne	0x100005710
1000056d7:	cmp	dword ptr [rbp - 0xa4], 0x0
1000056de:	je	0x100005703
1000056e0:	mov	rcx, qword ptr [r13]
1000056e4:	lea	rdi, [rip + 0x173d9] ## literal pool for: "sd: Zipping to stdout\n"
1000056eb:	mov	esi, 0x16
1000056f0:	mov	edx, 0x1
1000056f5:	call	0x10001981e ## symbol stub for: _fwrite
1000056fa:	mov	rdi, qword ptr [r13]
1000056fe:	call	0x1000197d6 ## symbol stub for: _fflush
100005703:	lea	rax, [rip + 0x24082]
10000570a:	mov	dword ptr [rax], 0x1
100005710:	lea	r14, [rip + 0x23d59]
100005717:	mov	rbx, qword ptr [r14]
10000571a:	test	rbx, rbx
10000571d:	je	0x1000090ce
100005723:	lea	rax, [rip + 0x23d26]
10000572a:	cmp	dword ptr [rax], 0x9
10000572d:	je	0x100005755
10000572f:	lea	rsi, [rip + 0x173b9] ## literal pool for: ";"
100005736:	mov	rdi, rbx
100005739:	call	0x10001990e ## symbol stub for: _strcmp
10000573e:	test	eax, eax
100005740:	je	0x100005755
100005742:	lea	rsi, [rip + 0x173a8] ## literal pool for: ":"
100005749:	mov	rdi, rbx
10000574c:	call	0x10001990e ## symbol stub for: _strcmp
100005751:	test	eax, eax
100005753:	jne	0x10000575c
100005755:	mov	qword ptr [r14], 0x0
10000575c:	mov	eax, dword ptr [rip + 0x23aa6]
100005762:	test	eax, eax
100005764:	jne	0x1000057ff
10000576a:	lea	rbx, [rip + 0x23cdb]
100005771:	lea	r15, [rip + 0x23f2c]
100005778:	lea	r14, [rip + 0x23f21]
10000577f:	cmp	byte ptr [rip + 0x5584a], 0x0
100005786:	jne	0x1000057af
100005788:	test	byte ptr [rip + 0x55829], 0x1
10000578f:	jne	0x1000057af
100005791:	lea	rax, [rip + 0x24010]
100005798:	cmp	qword ptr [rax], 0x0
10000579c:	jne	0x1000057af
10000579e:	cmp	dword ptr [rbx], -0x1
1000057a1:	jne	0x1000057af
1000057a3:	mov	eax, dword ptr [r14]
1000057a6:	or	eax, dword ptr [r15]
1000057a9:	je	0x100005865
1000057af:	lea	rdi, [rip + 0x1733d] ## literal pool for: "invalid option(s) used with -d; ignored."
1000057b6:	lea	rsi, [rip + 0x14ffa] ## literal pool for: ""
1000057bd:	call	0x100003e67
1000057c2:	mov	dword ptr [rbx], 0xffffffff
1000057c8:	xor	eax, eax
1000057ca:	mov	dword ptr [r15], eax
1000057cd:	mov	dword ptr [r14], eax
1000057d0:	lea	rbx, [rip + 0x23fd1]
1000057d7:	mov	rdi, qword ptr [rbx]
1000057da:	test	rdi, rdi
1000057dd:	je	0x1000057eb
1000057df:	call	0x100019806 ## symbol stub for: _free
1000057e4:	mov	qword ptr [rbx], 0x0
1000057eb:	xor	eax, eax
1000057ed:	mov	byte ptr [rip + 0x557c5], al
1000057f3:	mov	byte ptr [rip + 0x557d7], al
1000057f9:	mov	eax, dword ptr [rip + 0x23a09]
1000057ff:	cmp	eax, 0x4
100005802:	jne	0x100005865
100005804:	lea	rbx, [rip + 0x23c41]
10000580b:	lea	r15, [rip + 0x23e92]
100005812:	lea	r14, [rip + 0x23e87]
100005819:	cmp	byte ptr [rip + 0x557b0], 0x0
100005820:	jne	0x100005838
100005822:	test	byte ptr [rip + 0x5578f], 0x1
100005829:	jne	0x100005838
10000582b:	cmp	dword ptr [rbx], -0x1
10000582e:	jne	0x100005838
100005830:	mov	eax, dword ptr [r14]
100005833:	or	eax, dword ptr [r15]
100005836:	je	0x100005865
100005838:	lea	rdi, [rip + 0x172dd] ## literal pool for: "can't set method, move, recurse, or comments with copy mode."
10000583f:	lea	rsi, [rip + 0x14f71] ## literal pool for: ""
100005846:	call	0x100003e67
10000584b:	mov	dword ptr [rbx], 0xffffffff
100005851:	xor	eax, eax
100005853:	mov	dword ptr [r15], eax
100005856:	mov	dword ptr [r14], eax
100005859:	mov	byte ptr [rip + 0x55759], al
10000585f:	mov	byte ptr [rip + 0x5576b], al
100005865:	lea	rbx, [rip + 0x23f18]
10000586c:	cmp	dword ptr [rbx], 0x0
10000586f:	je	0x100005896
100005871:	lea	rax, [rip + 0x23e30]
100005878:	cmp	dword ptr [rax], 0x0
10000587b:	je	0x100005896
10000587d:	lea	rdi, [rip + 0x172d5] ## literal pool for: "can't use -y with -k, -y ignored"
100005884:	lea	rsi, [rip + 0x14f2c] ## literal pool for: ""
10000588b:	call	0x100003e67
100005890:	mov	dword ptr [rbx], 0x0
100005896:	mov	ecx, dword ptr [r12]
10000589a:	lea	rax, [rip + 0x23e17]
1000058a1:	mov	eax, dword ptr [rax]
1000058a3:	cmp	ecx, 0x1
1000058a6:	lea	rbx, [rip + 0x23ff7]
1000058ad:	jne	0x1000058c3
1000058af:	test	eax, eax
1000058b1:	je	0x1000058c3
1000058b3:	lea	rdi, [rip + 0x172c0] ## literal pool for: "can't use -F with -A, -F ignored"
1000058ba:	mov	r14d, dword ptr [rbp - 0xd8]
1000058c1:	jmp	0x1000058da
1000058c3:	cmp	ecx, 0x2
1000058c6:	mov	r14d, dword ptr [rbp - 0xd8]
1000058cd:	jne	0x1000058ee
1000058cf:	test	eax, eax
1000058d1:	je	0x1000058ee
1000058d3:	lea	rdi, [rip + 0x172c1] ## literal pool for: "can't use -FF with -A, -FF ignored"
1000058da:	lea	rsi, [rip + 0x14ed6] ## literal pool for: ""
1000058e1:	call	0x100003e67
1000058e6:	mov	dword ptr [r12], 0x0
1000058ee:	cmp	byte ptr [rip + 0x556cf], 0x1
1000058f5:	jne	0x10000591d
1000058f7:	lea	rax, [rip + 0x23e8e]
1000058fe:	cmp	dword ptr [rax], 0x0
100005901:	je	0x10000591d
100005903:	mov	byte ptr [rip + 0x556ba], 0x0
10000590a:	lea	rdi, [rip + 0x172ad] ## literal pool for: "can't use -T on stdout, -T ignored"
100005911:	lea	rsi, [rip + 0x14e9f] ## literal pool for: ""
100005918:	call	0x100003e67
10000591d:	cmp	dword ptr [rbx], 0x0
100005920:	je	0x10000594a
100005922:	lea	rax, [rip + 0x23d8f]
100005929:	mov	eax, dword ptr [rax]
10000592b:	or	eax, dword ptr [r12]
10000592f:	jne	0x10000914e
100005935:	lea	rax, [rip + 0x23e50]
10000593c:	mov	eax, dword ptr [rax]
10000593e:	or	eax, dword ptr [rbp - 0x108]
100005944:	jne	0x10000915a
10000594a:	mov	eax, dword ptr [rip + 0x238b8]
100005950:	xor	eax, 0x1
100005953:	or	eax, dword ptr [rbp - 0x108]
100005959:	setne	al
10000595c:	je	0x10000596e
10000595e:	lea	rcx, [rip + 0x23d4f]
100005965:	cmp	dword ptr [rcx], 0x0
100005968:	jne	0x1000090da
10000596e:	lea	rcx, [rip + 0x23e17]
100005975:	cmp	dword ptr [rcx], 0x0
100005978:	sete	cl
10000597b:	xor	al, 0x1
10000597d:	or	al, cl
10000597f:	je	0x1000090e6
100005985:	lea	rax, [rip + 0x23ad0]
10000598c:	cmp	dword ptr [rax], 0x0
10000598f:	je	0x1000059bb
100005991:	mov	eax, dword ptr [r12]
100005995:	cmp	eax, 0x2
100005998:	je	0x1000059a8
10000599a:	cmp	eax, 0x1
10000599d:	jne	0x1000059bb
10000599f:	lea	rdi, [rip + 0x17306] ## literal pool for: "Fix archive (-F) - assume mostly intact archive"
1000059a6:	jmp	0x1000059af
1000059a8:	lea	rdi, [rip + 0x1732d] ## literal pool for: "Fix archive (-FF) - salvage what can"
1000059af:	lea	rsi, [rip + 0x14e01] ## literal pool for: ""
1000059b6:	call	0x100003d95
1000059bb:	cmp	dword ptr [rbp - 0xa4], 0x0
1000059c2:	je	0x100005a4c
1000059c8:	mov	rcx, qword ptr [r13]
1000059cc:	lea	rdi, [rip + 0x1732e] ## literal pool for: "sd: Reading archive\n"
1000059d3:	mov	esi, 0x14
1000059d8:	mov	edx, 0x1
1000059dd:	call	0x10001981e ## symbol stub for: _fwrite
1000059e2:	mov	rdi, qword ptr [r13]
1000059e6:	call	0x1000197d6 ## symbol stub for: _fflush
1000059eb:	cmp	dword ptr [r12], 0x2
1000059f0:	jne	0x100005ad1
1000059f6:	mov	rcx, qword ptr [r13]
1000059fa:	lea	rdi, [rip + 0x17315] ## literal pool for: "sd: Open zip file and create temp file (-FF)\n"
100005a01:	mov	esi, 0x2d
100005a06:	mov	edx, 0x1
100005a0b:	call	0x10001981e ## symbol stub for: _fwrite
100005a10:	mov	rdi, qword ptr [r13]
100005a14:	call	0x1000197d6 ## symbol stub for: _fflush
100005a19:	lea	rax, [rip + 0x25518]
100005a20:	mov	qword ptr [rax], 0x0
100005a27:	mov	rcx, qword ptr [r13]
100005a2b:	lea	rdi, [rip + 0x17312] ## literal pool for: "sd: Creating new zip file (-FF)\n"
100005a32:	mov	esi, 0x20
100005a37:	mov	edx, 0x1
100005a3c:	call	0x10001981e ## symbol stub for: _fwrite
100005a41:	mov	rdi, qword ptr [r13]
100005a45:	call	0x1000197d6 ## symbol stub for: _fflush
100005a4a:	jmp	0x100005a61
100005a4c:	cmp	dword ptr [r12], 0x2
100005a51:	jne	0x100005ad1
100005a53:	lea	rax, [rip + 0x254de]
100005a5a:	mov	qword ptr [rax], 0x0
100005a61:	lea	rax, [rip + 0x23d48]
100005a68:	mov	rbx, qword ptr [rax]
100005a6b:	test	rbx, rbx
100005a6e:	je	0x100005b7e
100005a74:	mov	rdi, rbx
100005a77:	call	0x100019920 ## symbol stub for: _strlen
100005a7c:	lea	rdi, [rax + 0xc]
100005a80:	call	0x100019848 ## symbol stub for: _malloc
100005a85:	lea	r14, [rip + 0x23d64]
100005a8c:	mov	qword ptr [r14], rax
100005a8f:	test	rax, rax
100005a92:	je	0x100009192
100005a98:	mov	rdi, rax
100005a9b:	mov	rsi, rbx
100005a9e:	call	0x100019914 ## symbol stub for: _strcpy
100005aa3:	mov	rbx, qword ptr [r14]
100005aa6:	cmp	byte ptr [rbx], 0x0
100005aa9:	je	0x100005abe
100005aab:	mov	rdi, rbx
100005aae:	call	0x100019920 ## symbol stub for: _strlen
100005ab3:	cmp	byte ptr [rax + rbx - 0x1], 0x2f
100005ab8:	je	0x100005bf0
100005abe:	mov	rdi, rbx
100005ac1:	call	0x100019920 ## symbol stub for: _strlen
100005ac6:	mov	word ptr [rbx + rax], 0x2f
100005acc:	jmp	0x100005bf0
100005ad1:	call	0x10000aeeb
100005ad6:	test	eax, eax
100005ad8:	jne	0x100009100
100005ade:	mov	eax, dword ptr [rbx]
100005ae0:	cmp	eax, -0x1
100005ae3:	je	0x100005d0e
100005ae9:	or	eax, dword ptr [r12]
100005aed:	lea	r12, [rip + 0x23e0c]
100005af4:	jne	0x100005d1b
100005afa:	lea	rax, [rip + 0x23d27]
100005b01:	cmp	qword ptr [rax], 0x2
100005b05:	jb	0x100005d1b
100005b0b:	lea	r14, [rbp - 0xa0]
100005b12:	mov	qword ptr [r14], 0x0
100005b19:	lea	rax, [rip + 0x23ce8]
100005b20:	mov	rdi, qword ptr [rax]
100005b23:	xor	esi, esi
100005b25:	call	0x10001338c
100005b2a:	lea	r15, [rip + 0x23cdf]
100005b31:	mov	qword ptr [r15], rax
100005b34:	mov	rdi, rax
100005b37:	xor	esi, esi
100005b39:	mov	rdx, r14
100005b3c:	xor	ecx, ecx
100005b3e:	call	0x10001702d
100005b43:	test	rax, rax
100005b46:	je	0x100006d28
100005b4c:	mov	dword ptr [rbx], 0x1
100005b52:	mov	rax, qword ptr [rbp - 0xa0]
100005b59:	lea	rcx, [rip + 0x23d48]
100005b60:	mov	qword ptr [rcx], rax
100005b63:	mov	rdi, qword ptr [r15]
100005b66:	call	0x100019806 ## symbol stub for: _free
100005b6b:	mov	qword ptr [r15], 0x0
100005b72:	mov	r14d, dword ptr [rbp - 0xd8]
100005b79:	jmp	0x100005d1b
100005b7e:	lea	rax, [rip + 0x253d3]
100005b85:	mov	rbx, qword ptr [rax]
100005b88:	mov	rdi, rbx
100005b8b:	call	0x100019920 ## symbol stub for: _strlen
100005b90:	lea	rdi, [rax + 0xc]
100005b94:	call	0x100019848 ## symbol stub for: _malloc
100005b99:	lea	r15, [rip + 0x23c50]
100005ba0:	mov	qword ptr [r15], rax
100005ba3:	test	rax, rax
100005ba6:	je	0x100009192
100005bac:	mov	r14d, 0xffffffff
100005bb2:	mov	rdi, rax
100005bb5:	mov	rsi, rbx
100005bb8:	call	0x100019914 ## symbol stub for: _strcpy
100005bbd:	mov	rbx, qword ptr [r15]
100005bc0:	mov	rdi, rbx
100005bc3:	call	0x100019920 ## symbol stub for: _strlen
100005bc8:	mov	edx, eax
100005bca:	xor	ecx, ecx
100005bcc:	test	eax, eax
100005bce:	cmovs	rcx, rax
100005bd2:	test	edx, edx
100005bd4:	jle	0x100005be9
100005bd6:	lea	eax, [rdx + r14]
100005bda:	dec	rdx
100005bdd:	cmp	byte ptr [rbx + rax], 0x2f
100005be1:	jne	0x100005bd2
100005be3:	inc	rdx
100005be6:	mov	rcx, rdx
100005be9:	movsxd	rax, ecx
100005bec:	mov	byte ptr [rbx + rax], 0x0
100005bf0:	lea	r12, [rip + 0x23bf9]
100005bf7:	mov	rbx, qword ptr [r12]
100005bfb:	mov	rdi, rbx
100005bfe:	call	0x100019920 ## symbol stub for: _strlen
100005c03:	movabs	rcx, 0x585858585858697a
100005c0d:	mov	qword ptr [rbx + rax], rcx
100005c11:	mov	byte ptr [rbx + rax + 0x8], 0x0
100005c16:	mov	rdi, qword ptr [r12]
100005c1a:	call	0x100019860 ## symbol stub for: _mkstemp
100005c1f:	cmp	eax, -0x1
100005c22:	je	0x1000090f2
100005c28:	lea	rsi, [rip + 0x16c47] ## literal pool for: "w"
100005c2f:	mov	edi, eax
100005c31:	call	0x1000197c4 ## symbol stub for: _fdopen
100005c36:	mov	rbx, rax
100005c39:	lea	rax, [rip + 0x23bb8]
100005c40:	mov	qword ptr [rax], rbx
100005c43:	test	rbx, rbx
100005c46:	je	0x1000090f2
100005c4c:	mov	edi, 0x4000
100005c51:	call	0x100019848 ## symbol stub for: _malloc
100005c56:	test	rax, rax
100005c59:	je	0x1000091aa
100005c5f:	mov	ecx, 0x4000
100005c64:	mov	rdi, rbx
100005c67:	mov	rsi, rax
100005c6a:	xor	edx, edx
100005c6c:	call	0x1000198de ## symbol stub for: _setvbuf
100005c71:	call	0x10000aeeb
100005c76:	test	eax, eax
100005c78:	jne	0x100009100
100005c7e:	cmp	dword ptr [rbp - 0xa4], 0x0
100005c85:	je	0x100005caa
100005c87:	mov	rcx, qword ptr [r13]
100005c8b:	lea	rdi, [rip + 0x170f5] ## literal pool for: "sd: Writing central directory (-FF)\n"
100005c92:	mov	esi, 0x24
100005c97:	mov	edx, 0x1
100005c9c:	call	0x10001981e ## symbol stub for: _fwrite
100005ca1:	mov	rdi, qword ptr [r13]
100005ca5:	call	0x1000197d6 ## symbol stub for: _fflush
100005caa:	lea	r13, [rip + 0x25287]
100005cb1:	mov	r14, qword ptr [r13]
100005cb5:	lea	rax, [rip + 0x23c1c]
100005cbc:	mov	rbx, qword ptr [rax]
100005cbf:	xor	r15d, r15d
100005cc2:	test	rbx, rbx
100005cc5:	je	0x100005eda
100005ccb:	mov	rdi, rbx
100005cce:	call	0x10000e4ec
100005cd3:	test	eax, eax
100005cd5:	jne	0x100008df5
100005cdb:	movzx	eax, word ptr [rbx + 0x28]
100005cdf:	movzx	ecx, word ptr [rbx + 0x2c]
100005ce3:	add	rcx, rax
100005ce6:	movzx	eax, word ptr [rbx + 0x2e]
100005cea:	add	rax, rcx
100005ced:	mov	rcx, qword ptr [r13]
100005cf1:	lea	rsi, [rcx + rax + 0x2e]
100005cf6:	mov	qword ptr [r13], rsi
100005cfa:	inc	r15
100005cfd:	mov	rbx, qword ptr [rbx + 0x98]
100005d04:	test	rbx, rbx
100005d07:	jne	0x100005ccb
100005d09:	jmp	0x100005edd
100005d0e:	mov	dword ptr [rbx], 0x0
100005d14:	lea	r12, [rip + 0x23be5]
100005d1b:	lea	rax, [rip + 0x23ba6]
100005d22:	cmp	dword ptr [rax], 0x0
100005d25:	je	0x100005d4e
100005d27:	lea	rax, [rip + 0x23b7a]
100005d2e:	mov	rdi, qword ptr [rax]
100005d31:	test	rdi, rdi
100005d34:	je	0x100005d4e
100005d36:	xor	esi, esi
100005d38:	xor	edx, edx
100005d3a:	call	0x10001621a
100005d3f:	lea	rdi, [rip + 0x170e4] ## literal pool for: "splitsize = "
100005d46:	mov	rsi, rax
100005d49:	call	0x100003d95
100005d4e:	lea	rax, [rip + 0x23adb]
100005d55:	mov	qword ptr [rax], 0x0
100005d5c:	lea	rax, [rip + 0x23b7d]
100005d63:	cmp	dword ptr [rax], 0x0
100005d66:	jne	0x100005d8e
100005d68:	lea	rax, [rip + 0x23a2d]
100005d6f:	cmp	dword ptr [rax], 0x0
100005d72:	je	0x100005d8e
100005d74:	cmp	dword ptr [rbp - 0xc0], 0x3
100005d7b:	je	0x1000091ca
100005d81:	cmp	dword ptr [rip + 0x23480], 0x4
100005d88:	je	0x1000091ca
100005d8e:	lea	rax, [rip + 0x251b3]
100005d95:	cmp	qword ptr [rax], 0x0
100005d99:	jne	0x100005dc3
100005d9b:	cmp	dword ptr [rbp - 0x108], 0x0
100005da2:	jne	0x100005dad
100005da4:	cmp	dword ptr [rip + 0x2345d], 0x1
100005dab:	je	0x100005dc3
100005dad:	lea	rax, [rip + 0x251a4]
100005db4:	mov	rdi, qword ptr [rax]
100005db7:	lea	rsi, [rip + 0x17079] ## literal pool for: " not found or empty"
100005dbe:	call	0x100003e67
100005dc3:	test	r14d, r14d
100005dc6:	je	0x100005e13
100005dc8:	cmp	dword ptr [rbp - 0xc0], 0x3
100005dcf:	jne	0x100005e13
100005dd1:	lea	rax, [rip + 0x23b00]
100005dd8:	mov	rbx, qword ptr [rax]
100005ddb:	test	rbx, rbx
100005dde:	je	0x100005e13
100005de0:	lea	r14, [rip + 0x23671]
100005de7:	cmp	dword ptr [r12], 0x0
100005dec:	je	0x100005dfc
100005dee:	mov	rdi, qword ptr [rbx + 0x78]
100005df2:	mov	esi, dword ptr [r14]
100005df5:	call	0x1000115ce
100005dfa:	jmp	0x100005e01
100005dfc:	mov	eax, 0x1
100005e01:	mov	dword ptr [rbx + 0x88], eax
100005e07:	mov	rbx, qword ptr [rbx + 0x98]
100005e0e:	test	rbx, rbx
100005e11:	jne	0x100005de7
100005e13:	mov	rax, qword ptr [rip + 0x2386e]
100005e1a:	test	rax, rax
100005e1d:	je	0x100006149
100005e23:	cmp	dword ptr [rip + 0x233de], 0x4
100005e2a:	jne	0x100006074
100005e30:	cmp	dword ptr [rbp - 0xa4], 0x0
100005e37:	je	0x100005e6c
100005e39:	mov	rcx, qword ptr [r13]
100005e3d:	lea	rdi, [rip + 0x17007] ## literal pool for: "sd: Scanning archive entries\n"
100005e44:	mov	esi, 0x1d
100005e49:	mov	edx, 0x1
100005e4e:	call	0x10001981e ## symbol stub for: _fwrite
100005e53:	mov	rdi, qword ptr [r13]
100005e57:	call	0x1000197d6 ## symbol stub for: _fflush
100005e5c:	mov	rax, qword ptr [rip + 0x23825]
100005e63:	test	rax, rax
100005e66:	je	0x100006149
100005e6c:	lea	rbx, [rip + 0x235e5]
100005e73:	lea	r14, [rip + 0x16fef] ## literal pool for: "not in archive: "
100005e7a:	mov	rdi, qword ptr [rax]
100005e7d:	mov	esi, dword ptr [rbx]
100005e7f:	call	0x1000114ba
100005e84:	test	eax, eax
100005e86:	je	0x100005ea3
100005e88:	cmp	eax, -0x1
100005e8b:	jne	0x100008dfb
100005e91:	mov	rax, qword ptr [rip + 0x237f0]
100005e98:	mov	rsi, qword ptr [rax]
100005e9b:	mov	rdi, r14
100005e9e:	call	0x100003e67
100005ea3:	mov	rax, qword ptr [rip + 0x237de]
100005eaa:	mov	rdi, qword ptr [rax]
100005ead:	call	0x100019806 ## symbol stub for: _free
100005eb2:	mov	rdi, qword ptr [rip + 0x237cf]
100005eb9:	mov	rax, qword ptr [rdi + 0x8]
100005ebd:	mov	qword ptr [rip + 0x237c4], rax
100005ec4:	call	0x100019806 ## symbol stub for: _free
100005ec9:	mov	rax, qword ptr [rip + 0x237b8]
100005ed0:	test	rax, rax
100005ed3:	jne	0x100005e7a
100005ed5:	jmp	0x100006149
100005eda:	mov	rsi, r14
100005edd:	lea	rax, [rip + 0x25064]
100005ee4:	cmp	qword ptr [rax], 0x0
100005ee8:	jne	0x100005f01
100005eea:	lea	rdi, [rip + 0x16ebb] ## literal pool for: "zip file empty"
100005ef1:	lea	rsi, [rip + 0x148bf] ## literal pool for: ""
100005ef8:	call	0x100003e67
100005efd:	mov	rsi, qword ptr [r13]
100005f01:	sub	rsi, r14
100005f04:	lea	rax, [rip + 0x25035]
100005f0b:	movzx	ecx, word ptr [rax]
100005f0e:	lea	rax, [rip + 0x239d3]
100005f15:	mov	r8, qword ptr [rax]
100005f18:	mov	rdi, r15
100005f1b:	mov	rdx, r14
100005f1e:	call	0x10000ea0e
100005f23:	test	eax, eax
100005f25:	jne	0x100008df5
100005f2b:	lea	rax, [rip + 0x238c6]
100005f32:	mov	rdi, qword ptr [rax]
100005f35:	call	0x1000197be ## symbol stub for: _fclose
100005f3a:	test	eax, eax
100005f3c:	lea	r15, [rip + 0x238d5]
100005f43:	mov	rbx, qword ptr [rbp - 0x108]
100005f4a:	jne	0x1000091b3
100005f50:	lea	r14, [rip + 0x238a9]
100005f57:	mov	rdi, qword ptr [r14]
100005f5a:	test	rdi, rdi
100005f5d:	je	0x100005f6b
100005f5f:	call	0x1000197be ## symbol stub for: _fclose
100005f64:	mov	qword ptr [r14], 0x0
100005f6b:	lea	r14, [rip + 0x24fe6]
100005f72:	mov	rdi, qword ptr [r14]
100005f75:	lea	rsi, [rip + 0x16586] ## literal pool for: "-"
100005f7c:	call	0x10001990e ## symbol stub for: _strcmp
100005f81:	test	ebx, ebx
100005f83:	jne	0x100005fa9
100005f85:	test	eax, eax
100005f87:	je	0x100005fa9
100005f89:	mov	rdi, qword ptr [r15]
100005f8c:	mov	rsi, qword ptr [r12]
100005f90:	call	0x1000121be
100005f95:	mov	rsi, qword ptr [r12]
100005f99:	test	eax, eax
100005f9b:	jne	0x10000923f
100005fa1:	mov	rdi, rsi
100005fa4:	call	0x100019806 ## symbol stub for: _free
100005fa9:	mov	qword ptr [r12], 0x0
100005fb1:	lea	rax, [rip + 0x23868]
100005fb8:	mov	ebx, dword ptr [rax]
100005fba:	test	ebx, ebx
100005fbc:	je	0x100005fdb
100005fbe:	mov	rdi, qword ptr [r14]
100005fc1:	lea	rsi, [rip + 0x1653a] ## literal pool for: "-"
100005fc8:	call	0x10001990e ## symbol stub for: _strcmp
100005fcd:	test	eax, eax
100005fcf:	je	0x100005fdb
100005fd1:	mov	rdi, qword ptr [r15]
100005fd4:	mov	esi, ebx
100005fd6:	call	0x100012441
100005fdb:	lea	r14, [rip + 0x2377e]
100005fe2:	mov	rdi, qword ptr [r14]
100005fe5:	test	rdi, rdi
100005fe8:	je	0x1000072d3
100005fee:	lea	rax, [rip + 0x2373b]
100005ff5:	mov	rdx, qword ptr [rax]
100005ff8:	lea	rsi, [rip + 0x16de0] ## literal pool for: "\nTotal %ld entries ("
100005fff:	xor	eax, eax
100006001:	call	0x1000197ee ## symbol stub for: _fprintf
100006006:	mov	rdi, qword ptr [r14]
100006009:	lea	rax, [rip + 0x23740]
100006010:	mov	rsi, qword ptr [rax]
100006013:	call	0x10001631e
100006018:	mov	rcx, qword ptr [r14]
10000601b:	lea	rdi, [rip + 0x16dd2] ## literal pool for: " bytes)"
100006022:	mov	esi, 0x7
100006027:	mov	edx, 0x1
10000602c:	call	0x10001981e ## symbol stub for: _fwrite
100006031:	lea	rbx, [rbp - 0xa0]
100006038:	mov	rdi, rbx
10000603b:	call	0x10001994a ## symbol stub for: _time
100006040:	mov	rdi, rbx
100006043:	call	0x10001983c ## symbol stub for: _localtime
100006048:	mov	rbx, qword ptr [r14]
10000604b:	mov	rdi, rax
10000604e:	call	0x100019794 ## symbol stub for: _asctime
100006053:	lea	rsi, [rip + 0x16da2] ## literal pool for: "\nDone %s"
10000605a:	mov	rdi, rbx
10000605d:	mov	rdx, rax
100006060:	xor	eax, eax
100006062:	call	0x1000197ee ## symbol stub for: _fprintf
100006067:	mov	rdi, qword ptr [r14]
10000606a:	call	0x1000197d6 ## symbol stub for: _fflush
10000606f:	jmp	0x1000072d3
100006074:	cmp	dword ptr [rbp - 0xa4], 0x0
10000607b:	je	0x1000060b0
10000607d:	mov	rcx, qword ptr [r13]
100006081:	lea	rdi, [rip + 0x16df2] ## literal pool for: "sd: Scanning files\n"
100006088:	mov	esi, 0x13
10000608d:	mov	edx, 0x1
100006092:	call	0x10001981e ## symbol stub for: _fwrite
100006097:	mov	rdi, qword ptr [r13]
10000609b:	call	0x1000197d6 ## symbol stub for: _fflush
1000060a0:	mov	rax, qword ptr [rip + 0x235e1]
1000060a7:	test	rax, rax
1000060aa:	je	0x100006149
1000060b0:	lea	r14, [rip + 0x169de] ## literal pool for: "name not matched: "
1000060b7:	mov	ebx, 0x19
1000060bc:	lea	r15, [rip + 0x23395]
1000060c3:	mov	rdi, qword ptr [rax]
1000060c6:	xor	eax, eax
1000060c8:	mov	ecx, dword ptr [rip + 0x2313a]
1000060ce:	cmp	ecx, 0x4
1000060d1:	ja	0x1000060df
1000060d3:	bt	ebx, ecx
1000060d6:	jae	0x1000060df
1000060d8:	cmp	dword ptr [r15], 0x0
1000060dc:	setne	al
1000060df:	movzx	esi, al
1000060e2:	call	0x100016b1a
1000060e7:	test	eax, eax
1000060e9:	je	0x100006113
1000060eb:	cmp	eax, -0x1
1000060ee:	jne	0x100008dfb
1000060f4:	mov	rax, qword ptr [rip + 0x2358d]
1000060fb:	mov	rsi, qword ptr [rax]
1000060fe:	mov	rdi, r14
100006101:	call	0x100003e67
100006106:	cmp	dword ptr [rbp - 0xe0], 0x0
10000610d:	jne	0x100008ff4
100006113:	mov	rax, qword ptr [rip + 0x2356e]
10000611a:	mov	rdi, qword ptr [rax]
10000611d:	call	0x100019806 ## symbol stub for: _free
100006122:	mov	rdi, qword ptr [rip + 0x2355f]
100006129:	mov	rax, qword ptr [rdi + 0x8]
10000612d:	mov	qword ptr [rip + 0x23554], rax
100006134:	call	0x100019806 ## symbol stub for: _free
100006139:	mov	rax, qword ptr [rip + 0x23548]
100006140:	test	rax, rax
100006143:	jne	0x1000060c3
100006149:	lea	rax, [rip + 0x23550]
100006150:	cmp	dword ptr [rax], 0x2
100006153:	jne	0x1000061bf
100006155:	xor	eax, eax
100006157:	mov	ecx, dword ptr [rip + 0x230ab]
10000615d:	cmp	ecx, 0x4
100006160:	ja	0x100006179
100006162:	mov	edx, 0x19
100006167:	bt	edx, ecx
10000616a:	jae	0x100006179
10000616c:	lea	rax, [rip + 0x232e5]
100006173:	cmp	dword ptr [rax], 0x0
100006176:	setne	al
100006179:	movzx	esi, al
10000617c:	lea	rdi, [rip + 0x16d0b] ## literal pool for: "."
100006183:	call	0x100016b1a
100006188:	test	eax, eax
10000618a:	je	0x1000061bf
10000618c:	cmp	eax, -0x1
10000618f:	jne	0x100009278
100006195:	lea	rdi, [rip + 0x168f9] ## literal pool for: "name not matched: "
10000619c:	lea	rsi, [rip + 0x16ced] ## literal pool for: "current directory for -R"
1000061a3:	call	0x100003e67
1000061a8:	cmp	dword ptr [rbp - 0xe0], 0x0
1000061af:	mov	dword ptr [rbp - 0xe0], 0x0
1000061b9:	jne	0x1000092d9
1000061bf:	cmp	dword ptr [rbp - 0xa4], 0x0
1000061c6:	je	0x1000061eb
1000061c8:	mov	rcx, qword ptr [r13]
1000061cc:	lea	rdi, [rip + 0x16cd9] ## literal pool for: "sd: Applying filters\n"
1000061d3:	mov	esi, 0x15
1000061d8:	mov	edx, 0x1
1000061dd:	call	0x10001981e ## symbol stub for: _fwrite
1000061e2:	mov	rdi, qword ptr [r13]
1000061e6:	call	0x1000197d6 ## symbol stub for: _fflush
1000061eb:	cmp	dword ptr [rbp - 0xc4], 0x0
1000061f2:	jne	0x10000624d
1000061f4:	cmp	dword ptr [rbp - 0xc0], 0x4
1000061fb:	je	0x10000624d
1000061fd:	mov	eax, dword ptr [rip + 0x23005]
100006203:	and	eax, -0x2
100006206:	cmp	eax, 0x2
100006209:	jne	0x10000624d
10000620b:	lea	rax, [rip + 0x236c6]
100006212:	mov	rbx, qword ptr [rax]
100006215:	test	rbx, rbx
100006218:	je	0x10000624d
10000621a:	lea	r14, [rip + 0x23237]
100006221:	cmp	dword ptr [r12], 0x0
100006226:	je	0x100006236
100006228:	mov	rdi, qword ptr [rbx + 0x78]
10000622c:	mov	esi, dword ptr [r14]
10000622f:	call	0x1000115ce
100006234:	jmp	0x10000623b
100006236:	mov	eax, 0x1
10000623b:	mov	dword ptr [rbx + 0x88], eax
100006241:	mov	rbx, qword ptr [rbx + 0x98]
100006248:	test	rbx, rbx
10000624b:	jne	0x100006221
10000624d:	cmp	dword ptr [rbp - 0xa4], 0x0
100006254:	je	0x100006279
100006256:	mov	rcx, qword ptr [r13]
10000625a:	lea	rdi, [rip + 0x16c61] ## literal pool for: "sd: Checking dups\n"
100006261:	mov	esi, 0x12
100006266:	mov	edx, 0x1
10000626b:	call	0x10001981e ## symbol stub for: _fwrite
100006270:	mov	rdi, qword ptr [r13]
100006274:	call	0x1000197d6 ## symbol stub for: _fflush
100006279:	call	0x10001178c
10000627e:	test	eax, eax
100006280:	jne	0x10000910c
100006286:	lea	rax, [rip + 0x24cbb]
10000628d:	cmp	qword ptr [rax], 0x0
100006291:	je	0x1000062a2
100006293:	lea	rax, [rip + 0x24cc6]
10000629a:	mov	rdi, qword ptr [rax]
10000629d:	call	0x100019806 ## symbol stub for: _free
1000062a2:	lea	r12, [rip + 0x23507]
1000062a9:	xor	eax, eax
1000062ab:	mov	qword ptr [rbp - 0x118], rax
1000062b2:	cmp	qword ptr [r12], 0x0
1000062b7:	jne	0x10000631c
1000062b9:	lea	r15, [rip + 0x24c98]
1000062c0:	mov	r14, qword ptr [r15]
1000062c3:	mov	rdi, r14
1000062c6:	mov	esi, 0x2f
1000062cb:	call	0x100019932 ## symbol stub for: _strrchr
1000062d0:	test	rax, rax
1000062d3:	je	0x10000631c
1000062d5:	mov	rbx, rax
1000062d8:	sub	eax, r14d
1000062db:	shl	rax, 0x20
1000062df:	mov	ecx, 0xffffffff
1000062e4:	lea	rdi, [rax + rcx + 0x1]
1000062e9:	sar	rdi, 0x20
1000062ed:	call	0x100019848 ## symbol stub for: _malloc
1000062f2:	mov	qword ptr [r12], rax
1000062f6:	test	rax, rax
1000062f9:	je	0x100008e0c
1000062ff:	movsx	r14d, byte ptr [rbx]
100006303:	mov	byte ptr [rbx], 0x0
100006306:	mov	rdi, qword ptr [r12]
10000630a:	mov	rsi, qword ptr [r15]
10000630d:	call	0x100019914 ## symbol stub for: _strcpy
100006312:	mov	qword ptr [rbp - 0x118], r14
100006319:	mov	byte ptr [rbx], r14b
10000631c:	cmp	dword ptr [rbp - 0xa4], 0x0
100006323:	je	0x100006348
100006325:	mov	rcx, qword ptr [r13]
100006329:	lea	rdi, [rip + 0x16be2] ## literal pool for: "sd: Scanning files to update\n"
100006330:	mov	esi, 0x1d
100006335:	mov	edx, 0x1
10000633a:	call	0x10001981e ## symbol stub for: _fwrite
10000633f:	mov	rdi, qword ptr [r13]
100006343:	call	0x1000197d6 ## symbol stub for: _fflush
100006348:	lea	rax, [rip + 0x23481]
10000634f:	mov	dword ptr [rax], 0x0
100006355:	lea	r14, [rip + 0x2347c]
10000635c:	mov	qword ptr [r14], 0x0
100006363:	lea	rax, [rip + 0x2356e]
10000636a:	mov	qword ptr [rbp - 0xe8], rax
100006371:	mov	rbx, qword ptr [rax]
100006374:	movabs	r15, -0x70a3d70a3d70a3d7
10000637e:	test	rbx, rbx
100006381:	je	0x100006781
100006387:	mov	dword ptr [rbp - 0xa8], 0x1
100006391:	lea	r12, [rip + 0x23430]
100006398:	xor	eax, eax
10000639a:	mov	qword ptr [rbp - 0xf8], rax
1000063a1:	lea	rax, [rip + 0x230b4]
1000063a8:	cmp	dword ptr [rax], 0x0
1000063ab:	je	0x100006455
1000063b1:	cmp	qword ptr [r12], 0x0
1000063b6:	je	0x100006455
1000063bc:	mov	rax, qword ptr [r14]
1000063bf:	inc	rax
1000063c2:	mov	qword ptr [r14], rax
1000063c5:	imul	rax, r15
1000063c9:	ror	rax, 0x2
1000063cd:	movabs	rcx, 0x28f5c28f5c28f5c
1000063d7:	cmp	rax, rcx
1000063da:	ja	0x100006455
1000063dc:	xor	edi, edi
1000063de:	call	0x10001994a ## symbol stub for: _time
1000063e3:	mov	r13, rax
1000063e6:	sub	rax, qword ptr [r12]
1000063ea:	lea	rcx, [rip + 0x23097]
1000063f1:	cmp	rax, qword ptr [rcx]
1000063f4:	jle	0x100006455
1000063f6:	lea	rax, [rip + 0x233d3]
1000063fd:	cmp	dword ptr [rax], 0x0
100006400:	jne	0x10000642b
100006402:	lea	rax, [rip + 0x233c7]
100006409:	mov	dword ptr [rax], 0x1
10000640f:	lea	r15, [rip + 0x24b1a]
100006416:	mov	rsi, qword ptr [r15]
100006419:	mov	edi, 0x20
10000641e:	call	0x1000197f4 ## symbol stub for: _fputc
100006423:	mov	rdi, qword ptr [r15]
100006426:	call	0x1000197d6 ## symbol stub for: _fflush
10000642b:	mov	qword ptr [r12], r13
10000642f:	lea	r15, [rip + 0x24afa]
100006436:	mov	rsi, qword ptr [r15]
100006439:	mov	edi, 0x2e
10000643e:	call	0x1000197f4 ## symbol stub for: _fputc
100006443:	mov	rdi, qword ptr [r15]
100006446:	call	0x1000197d6 ## symbol stub for: _fflush
10000644b:	movabs	r15, -0x70a3d70a3d70a3d7
100006455:	mov	dword ptr [rbx + 0x90], 0x0
10000645f:	cmp	dword ptr [rbx + 0x88], 0x0
100006466:	je	0x10000649f
100006468:	mov	r13, qword ptr [rbx + 0x18]
10000646c:	mov	rax, qword ptr [rbx + 0x20]
100006470:	mov	qword ptr [rbp - 0xd0], rax
100006477:	mov	eax, dword ptr [rip + 0x22d8b]
10000647d:	cmp	eax, 0x4
100006480:	je	0x100006486
100006482:	test	eax, eax
100006484:	jne	0x1000064e7
100006486:	mov	rdi, rbx
100006489:	lea	rsi, [rbp - 0x140]
100006490:	call	0x10000f91a
100006495:	test	al, 0x1
100006497:	jne	0x1000064ae
100006499:	mov	rax, qword ptr [rbx + 0x8]
10000649d:	jmp	0x1000064ba
10000649f:	mov	dword ptr [rbp - 0xa8], 0x0
1000064a9:	jmp	0x10000668e
1000064ae:	lea	rdi, [rbp - 0x138]
1000064b5:	call	0x10001207e
1000064ba:	lea	rcx, [rip + 0x2331f]
1000064c1:	cmp	rax, qword ptr [rcx]
1000064c4:	jb	0x1000064d8
1000064c6:	lea	rcx, [rip + 0x2331b]
1000064cd:	mov	rcx, qword ptr [rcx]
1000064d0:	dec	rcx
1000064d3:	cmp	rcx, rax
1000064d6:	jae	0x100006504
1000064d8:	mov	dword ptr [rbx + 0x88], 0x0
1000064e2:	jmp	0x10000668e
1000064e7:	mov	r13, qword ptr [rbx + 0x50]
1000064eb:	test	r13, r13
1000064ee:	je	0x100006535
1000064f0:	mov	rdi, r13
1000064f3:	call	0x100019920 ## symbol stub for: _strlen
1000064f8:	cmp	byte ptr [rax + r13 - 0x1], 0x2f
1000064fe:	sete	r15b
100006502:	jmp	0x100006538
100006504:	lea	rax, [rip + 0x23225]
10000650b:	inc	qword ptr [rax]
10000650e:	mov	rax, qword ptr [rbp - 0xd0]
100006515:	mov	qword ptr [rbx + 0x20], rax
100006519:	cmp	r13, -0x3
10000651d:	ja	0x100006529
10000651f:	lea	rax, [rip + 0x2322a]
100006526:	add	qword ptr [rax], r13
100006529:	inc	qword ptr [rbp - 0xf8]
100006530:	jmp	0x10000668e
100006535:	xor	r15d, r15d
100006538:	mov	rdi, r13
10000653b:	xor	esi, esi
10000653d:	lea	rdx, [rbp - 0xd0]
100006544:	lea	rcx, [rbp - 0xa0]
10000654b:	call	0x10001702d
100006550:	mov	r13, rax
100006553:	test	rax, rax
100006556:	mov	eax, dword ptr [rbp - 0xa8]
10000655c:	mov	ecx, 0x0
100006561:	cmove	eax, ecx
100006564:	mov	dword ptr [rbp - 0xa8], eax
10000656a:	je	0x10000658a
10000656c:	lea	rax, [rip + 0x2326d]
100006573:	cmp	r13, qword ptr [rax]
100006576:	jb	0x10000658a
100006578:	lea	rax, [rip + 0x23269]
10000657f:	mov	rax, qword ptr [rax]
100006582:	dec	rax
100006585:	cmp	rax, r13
100006588:	jae	0x1000065cb
10000658a:	movzx	ecx, byte ptr [rip + 0x54a27]
100006591:	add	ecx, ecx
100006593:	xor	eax, eax
100006595:	mov	dword ptr [rbx + 0x88], ecx
10000659b:	test	r13, r13
10000659e:	je	0x1000065ff
1000065a0:	lea	rcx, [rip + 0x23239]
1000065a7:	cmp	r13, qword ptr [rcx]
1000065aa:	movabs	r15, -0x70a3d70a3d70a3d7
1000065b4:	jb	0x100006609
1000065b6:	lea	rax, [rip + 0x2322b]
1000065bd:	mov	rax, qword ptr [rax]
1000065c0:	dec	rax
1000065c3:	cmp	rax, r13
1000065c6:	setae	al
1000065c9:	jmp	0x100006609
1000065cb:	mov	eax, dword ptr [rip + 0x22c37]
1000065d1:	and	eax, -0x2
1000065d4:	cmp	eax, 0x2
1000065d7:	jne	0x1000066b7
1000065dd:	mov	rdi, rbx
1000065e0:	lea	rsi, [rbp - 0x140]
1000065e7:	call	0x10000f91a
1000065ec:	test	al, 0x1
1000065ee:	jne	0x1000066a3
1000065f4:	cmp	r13, qword ptr [rbx + 0x8]
1000065f8:	jbe	0x10000658a
1000065fa:	jmp	0x1000066b7
1000065ff:	movabs	r15, -0x70a3d70a3d70a3d7
100006609:	movzx	ecx, al
10000660c:	mov	dword ptr [rbx + 0x8c], ecx
100006612:	lea	rcx, [rip + 0x23093]
100006619:	cmp	dword ptr [rcx], 0x0
10000661c:	lea	rcx, [rip + 0x2490d]
100006623:	je	0x100006651
100006625:	mov	rdi, qword ptr [rcx]
100006628:	mov	rdx, qword ptr [rbx + 0x80]
10000662f:	test	al, al
100006631:	lea	rcx, [rip + 0x1691c] ## literal pool for: "missing or early"
100006638:	lea	rax, [rip + 0x1690a] ## literal pool for: "up to date"
10000663f:	cmovne	rcx, rax
100006643:	lea	rsi, [rip + 0x168e8] ## literal pool for: "zip diagnostic: %s %s\n"
10000664a:	xor	eax, eax
10000664c:	call	0x1000197ee ## symbol stub for: _fprintf
100006651:	lea	rax, [rip + 0x23108]
100006658:	mov	rdi, qword ptr [rax]
10000665b:	test	rdi, rdi
10000665e:	je	0x10000668e
100006660:	mov	rdx, qword ptr [rbx + 0x80]
100006667:	cmp	dword ptr [rbx + 0x8c], 0x0
10000666e:	lea	rcx, [rip + 0x168d4] ## literal pool for: "up to date"
100006675:	lea	rax, [rip + 0x168d8] ## literal pool for: "missing or early"
10000667c:	cmove	rcx, rax
100006680:	lea	rsi, [rip + 0x168ab] ## literal pool for: "zip diagnostic: %s %s\n"
100006687:	xor	eax, eax
100006689:	call	0x1000197ee ## symbol stub for: _fprintf
10000668e:	mov	rbx, qword ptr [rbx + 0x98]
100006695:	test	rbx, rbx
100006698:	jne	0x1000063a1
10000669e:	jmp	0x100006794
1000066a3:	mov	rax, qword ptr [rbp - 0x98]
1000066aa:	cmp	rax, qword ptr [rbp - 0x138]
1000066b1:	jle	0x10000658a
1000066b7:	lea	rax, [rip + 0x230c2]
1000066be:	cmp	dword ptr [rax], 0x0
1000066c1:	mov	rax, qword ptr [rbx + 0x8]
1000066c5:	je	0x1000066f9
1000066c7:	cmp	r13, rax
1000066ca:	jne	0x1000066f9
1000066cc:	mov	rax, qword ptr [rbp - 0xd0]
1000066d3:	cmp	rax, -0x1
1000066d7:	sete	cl
1000066da:	test	r15b, cl
1000066dd:	movabs	r15, -0x70a3d70a3d70a3d7
1000066e7:	jne	0x1000064d8
1000066ed:	cmp	rax, qword ptr [rbx + 0x20]
1000066f1:	je	0x1000064d8
1000066f7:	jmp	0x100006708
1000066f9:	cmp	r13, rax
1000066fc:	movabs	r15, -0x70a3d70a3d70a3d7
100006706:	jne	0x100006734
100006708:	mov	rdx, qword ptr [rbx + 0x20]
10000670c:	mov	rax, qword ptr [rbp - 0xd0]
100006713:	mov	rcx, rax
100006716:	not	rcx
100006719:	or	rcx, rdx
10000671c:	sete	cl
10000671f:	cmp	rax, rdx
100006722:	je	0x100006747
100006724:	test	cl, cl
100006726:	jne	0x100006747
100006728:	mov	dword ptr [rbp - 0xa8], 0x0
100006732:	jmp	0x100006751
100006734:	mov	dword ptr [rbp - 0xa8], 0x0
10000673e:	mov	rax, qword ptr [rbp - 0xd0]
100006745:	jmp	0x100006751
100006747:	mov	dword ptr [rbx + 0x90], 0x1
100006751:	lea	rcx, [rip + 0x22fd8]
100006758:	inc	qword ptr [rcx]
10000675b:	mov	ecx, 0x0
100006760:	cmp	rax, -0x3
100006764:	cmovbe	rcx, rax
100006768:	mov	qword ptr [rbx + 0x20], rcx
10000676c:	ja	0x100006529
100006772:	lea	rcx, [rip + 0x22fd7]
100006779:	add	qword ptr [rcx], rax
10000677c:	jmp	0x100006529
100006781:	mov	dword ptr [rbp - 0xa8], 0x1
10000678b:	xor	eax, eax
10000678d:	mov	qword ptr [rbp - 0xf8], rax
100006794:	cmp	dword ptr [rbp - 0xa4], 0x0
10000679b:	je	0x1000067c6
10000679d:	lea	rbx, [rip + 0x2478c]
1000067a4:	mov	rdi, qword ptr [rbx]
1000067a7:	lea	rax, [rip + 0x2477a]
1000067ae:	mov	edx, dword ptr [rax]
1000067b0:	lea	rsi, [rip + 0x167ae] ## literal pool for: "sd: fcount = %u\n"
1000067b7:	xor	eax, eax
1000067b9:	call	0x1000197ee ## symbol stub for: _fprintf
1000067be:	mov	rdi, qword ptr [rbx]
1000067c1:	call	0x1000197d6 ## symbol stub for: _fflush
1000067c6:	mov	qword ptr [r14], 0x0
1000067cd:	lea	rax, [rip + 0x22ffc]
1000067d4:	mov	dword ptr [rax], 0x0
1000067da:	lea	rax, [rip + 0x2310f]
1000067e1:	mov	r12, qword ptr [rax]
1000067e4:	test	r12, r12
1000067e7:	je	0x100006a14
1000067ed:	lea	r13, [rip + 0x22fd4]
1000067f4:	lea	rax, [rip + 0x22c61]
1000067fb:	cmp	dword ptr [rax], 0x0
1000067fe:	je	0x10000694a
100006804:	lea	rax, [rip + 0x22f81]
10000680b:	cmp	dword ptr [rax], 0x0
10000680e:	mov	rbx, qword ptr [r13]
100006812:	jne	0x1000068a8
100006818:	test	rbx, rbx
10000681b:	jne	0x1000068a8
100006821:	mov	rax, qword ptr [r14]
100006824:	imul	rax, r15
100006828:	ror	rax, 0x2
10000682c:	movabs	rcx, 0x28f5c28f5c28f5c
100006836:	cmp	rax, rcx
100006839:	ja	0x10000694a
10000683f:	xor	edi, edi
100006841:	call	0x10001994a ## symbol stub for: _time
100006846:	mov	rbx, rax
100006849:	lea	rcx, [rip + 0x22f70]
100006850:	sub	rax, qword ptr [rcx]
100006853:	lea	rcx, [rip + 0x22c26]
10000685a:	cmp	rax, qword ptr [rcx]
10000685d:	jle	0x1000068a4
10000685f:	lea	r15, [rip + 0x246ca]
100006866:	mov	rcx, qword ptr [r15]
100006869:	mov	esi, 0xf
10000686e:	mov	edx, 0x1
100006873:	lea	rdi, [rip + 0x166fc] ## literal pool for: "Scanning files "
10000687a:	call	0x10001981e ## symbol stub for: _fwrite
10000687f:	mov	rdi, qword ptr [r15]
100006882:	movabs	r15, -0x70a3d70a3d70a3d7
10000688c:	call	0x1000197d6 ## symbol stub for: _fflush
100006891:	lea	rax, [rip + 0x23034]
100006898:	mov	dword ptr [rax], 0x1
10000689e:	mov	qword ptr [r13], rbx
1000068a2:	jmp	0x1000068a8
1000068a4:	mov	rbx, qword ptr [r13]
1000068a8:	test	rbx, rbx
1000068ab:	je	0x10000694a
1000068b1:	mov	rax, qword ptr [r14]
1000068b4:	inc	rax
1000068b7:	mov	qword ptr [r14], rax
1000068ba:	imul	rax, r15
1000068be:	ror	rax, 0x2
1000068c2:	movabs	rcx, 0x28f5c28f5c28f5c
1000068cc:	cmp	rax, rcx
1000068cf:	ja	0x10000694a
1000068d1:	xor	edi, edi
1000068d3:	call	0x10001994a ## symbol stub for: _time
1000068d8:	mov	rbx, rax
1000068db:	sub	rax, qword ptr [r13]
1000068df:	lea	rcx, [rip + 0x22ba2]
1000068e6:	cmp	rax, qword ptr [rcx]
1000068e9:	jle	0x10000694a
1000068eb:	lea	rax, [rip + 0x22ede]
1000068f2:	cmp	dword ptr [rax], 0x0
1000068f5:	jne	0x10000692a
1000068f7:	lea	rax, [rip + 0x22ed2]
1000068fe:	mov	dword ptr [rax], 0x1
100006904:	lea	r15, [rip + 0x24625]
10000690b:	mov	rsi, qword ptr [r15]
10000690e:	mov	edi, 0x20
100006913:	call	0x1000197f4 ## symbol stub for: _fputc
100006918:	mov	rdi, qword ptr [r15]
10000691b:	movabs	r15, -0x70a3d70a3d70a3d7
100006925:	call	0x1000197d6 ## symbol stub for: _fflush
10000692a:	mov	qword ptr [r13], rbx
10000692e:	lea	rbx, [rip + 0x245fb]
100006935:	mov	rsi, qword ptr [rbx]
100006938:	mov	edi, 0x2e
10000693d:	call	0x1000197f4 ## symbol stub for: _fputc
100006942:	mov	rdi, qword ptr [rbx]
100006945:	call	0x1000197d6 ## symbol stub for: _fflush
10000694a:	mov	eax, dword ptr [rip + 0x228b8]
100006950:	test	eax, eax
100006952:	je	0x100006a00
100006958:	cmp	eax, 0x3
10000695b:	je	0x100006a00
100006961:	mov	rdi, qword ptr [r12]
100006965:	xor	esi, esi
100006967:	lea	rdx, [rbp - 0xd0]
10000696e:	xor	ecx, ecx
100006970:	call	0x10001702d
100006975:	test	rax, rax
100006978:	je	0x100006a00
10000697e:	mov	ecx, dword ptr [rip + 0x22884]
100006984:	test	ecx, ecx
100006986:	je	0x100006a00
100006988:	cmp	ecx, 0x3
10000698b:	je	0x100006a00
10000698d:	lea	rcx, [rip + 0x22e4c]
100006994:	cmp	rax, qword ptr [rcx]
100006997:	jb	0x100006a00
100006999:	lea	rcx, [rip + 0x22e48]
1000069a0:	mov	rcx, qword ptr [rcx]
1000069a3:	dec	rcx
1000069a6:	cmp	rcx, rax
1000069a9:	jb	0x100006a00
1000069ab:	mov	rdi, qword ptr [r12 + 0x10]
1000069b0:	lea	rax, [rip + 0x245a1]
1000069b7:	mov	rsi, qword ptr [rax]
1000069ba:	call	0x100015d2c
1000069bf:	lea	rcx, [rip + 0x22dc6]
1000069c6:	or	eax, dword ptr [rcx]
1000069c8:	je	0x100006a00
1000069ca:	lea	rax, [rip + 0x22d5f]
1000069d1:	inc	qword ptr [rax]
1000069d4:	mov	qword ptr [r12 + 0x28], 0x0
1000069dd:	mov	rax, qword ptr [rbp - 0xd0]
1000069e4:	cmp	rax, -0x3
1000069e8:	ja	0x1000069f9
1000069ea:	lea	rcx, [rip + 0x22d5f]
1000069f1:	add	qword ptr [rcx], rax
1000069f4:	mov	qword ptr [r12 + 0x28], rax
1000069f9:	mov	r12, qword ptr [r12 + 0x38]
1000069fe:	jmp	0x100006a0b
100006a00:	mov	rdi, r12
100006a03:	call	0x100011370
100006a08:	mov	r12, rax
100006a0b:	test	r12, r12
100006a0e:	jne	0x1000067f4
100006a14:	lea	rax, [rip + 0x22eb1]
100006a1b:	cmp	dword ptr [rax], 0x0
100006a1e:	lea	r13, [rip + 0x2450b]
100006a25:	je	0x100006a42
100006a27:	mov	rsi, qword ptr [r13]
100006a2b:	mov	edi, 0xa
100006a30:	call	0x1000197f4 ## symbol stub for: _fputc
100006a35:	lea	rax, [rip + 0x22e90]
100006a3c:	mov	dword ptr [rax], 0x0
100006a42:	lea	rax, [rip + 0x22d53]
100006a49:	cmp	dword ptr [rax], 0x0
100006a4c:	lea	rdx, [rip + 0x22c5d]
100006a53:	je	0x100006ae7
100006a59:	lea	rax, [rip + 0x229fc]
100006a60:	cmp	dword ptr [rax], 0x0
100006a63:	je	0x100007023
100006a69:	mov	rdi, qword ptr [r13]
100006a6d:	call	0x1000197d6 ## symbol stub for: _fflush
100006a72:	lea	rax, [rip + 0x229e3]
100006a79:	cmp	dword ptr [rax], 0x0
100006a7c:	je	0x100007023
100006a82:	lea	rax, [rip + 0x22d13]
100006a89:	mov	eax, dword ptr [rax]
100006a8b:	cmp	eax, 0x5
100006a8e:	ja	0x100007023
100006a94:	mov	ecx, 0x2a
100006a99:	bt	ecx, eax
100006a9c:	jae	0x100007023
100006aa2:	lea	rax, [rip + 0x22e23]
100006aa9:	cmp	dword ptr [rax], 0x0
100006aac:	je	0x100006ac5
100006aae:	mov	rsi, qword ptr [r13]
100006ab2:	mov	edi, 0xa
100006ab7:	mov	rbx, rax
100006aba:	call	0x1000197f4 ## symbol stub for: _fputc
100006abf:	mov	dword ptr [rbx], 0x0
100006ac5:	cmp	dword ptr [rbp - 0xc0], 0x3
100006acc:	jne	0x100006dcf
100006ad2:	mov	rcx, qword ptr [r13]
100006ad6:	lea	rdi, [rip + 0x164a9] ## literal pool for: "Archive contains:\n"
100006add:	mov	esi, 0x12
100006ae2:	jmp	0x100007010
100006ae7:	lea	rax, [rip + 0x22c92]
100006aee:	cmp	dword ptr [rax], 0x0
100006af1:	jne	0x100006b2d
100006af3:	cmp	qword ptr [rbp - 0xf8], 0x0
100006afb:	jne	0x100006b2d
100006afd:	lea	rax, [rip + 0x22dec]
100006b04:	cmp	qword ptr [rax], 0x0
100006b08:	jne	0x100006b2d
100006b0a:	lea	rax, [rip + 0x22dc7]
100006b11:	mov	rax, qword ptr [rax]
100006b14:	test	rax, rax
100006b17:	jne	0x100006d41
100006b1d:	lea	rcx, [rip + 0x22c6c]
100006b24:	cmp	dword ptr [rcx], 0x0
100006b27:	je	0x100006d41
100006b2d:	cmp	dword ptr [rbp - 0xa8], 0x0
100006b34:	je	0x100006b67
100006b36:	lea	rax, [rip + 0x22b77]
100006b3d:	cmp	dword ptr [rax], 0x0
100006b40:	je	0x100006b67
100006b42:	lea	rax, [rip + 0x243df]
100006b49:	cmp	qword ptr [rax], 0x0
100006b4d:	jne	0x100006b67
100006b4f:	lea	rdi, [rip + 0x164b4] ## literal pool for: "Archive is current"
100006b56:	lea	rsi, [rip + 0x13c5a] ## literal pool for: ""
100006b5d:	call	0x100003d95
100006b62:	jmp	0x1000072d3
100006b67:	mov	dword ptr [rbp - 0xa8], 0x0
100006b71:	cmp	dword ptr [rbp - 0x108], 0x0
100006b78:	je	0x100006ba1
100006b7a:	cmp	qword ptr [rbp - 0xf8], 0x0
100006b82:	jne	0x100006ba1
100006b84:	lea	rax, [rip + 0x243c5]
100006b8b:	mov	rax, qword ptr [rax]
100006b8e:	lea	rcx, [rip + 0x22d43]
100006b95:	or	rax, qword ptr [rcx]
100006b98:	setne	al
100006b9b:	mov	dword ptr [rbp - 0xa8], eax
100006ba1:	lea	rax, [rip + 0x22c00]
100006ba8:	cmp	qword ptr [rax], 0x0
100006bac:	je	0x100006bbd
100006bae:	call	0x100017559
100006bb3:	lea	rcx, [rip + 0x22d56]
100006bba:	mov	qword ptr [rcx], rax
100006bbd:	lea	rax, [rip + 0x22d14]
100006bc4:	mov	r12, qword ptr [rax]
100006bc7:	lea	r15, [rip + 0x22c5a]
100006bce:	lea	r14, [rip + 0x2437b]
100006bd5:	mov	rbx, qword ptr [r14]
100006bd8:	test	r12, r12
100006bdb:	je	0x100006bf2
100006bdd:	cmp	qword ptr [r15], 0x1
100006be1:	je	0x100006bf2
100006be3:	cmp	rbx, 0x4
100006be7:	jne	0x100006bf2
100006be9:	mov	qword ptr [r14], 0x0
100006bf0:	xor	ebx, ebx
100006bf2:	lea	rax, [rip + 0x2435f]
100006bf9:	mov	rdi, qword ptr [rax]
100006bfc:	lea	rsi, [rip + 0x158ff] ## literal pool for: "-"
100006c03:	call	0x10001990e ## symbol stub for: _strcmp
100006c08:	test	eax, eax
100006c0a:	je	0x100006c2b
100006c0c:	test	r12, r12
100006c0f:	jne	0x100006e40
100006c15:	test	byte ptr [rip + 0x54398], 0x1
100006c1c:	je	0x100006e40
100006c22:	test	rbx, rbx
100006c25:	jne	0x100006e40
100006c2b:	lea	rax, [rip + 0x22bee]
100006c32:	mov	dword ptr [rax], 0x0
100006c38:	cmp	byte ptr [rip + 0x5437d], 0x1
100006c3f:	jne	0x100006c48
100006c41:	mov	qword ptr [r14], 0x0
100006c48:	cmp	dword ptr [rbp - 0xa4], 0x0
100006c4f:	je	0x100006c74
100006c51:	mov	rcx, qword ptr [r13]
100006c55:	lea	rdi, [rip + 0x163c4] ## literal pool for: "sd: Open zip file and create temp file\n"
100006c5c:	mov	esi, 0x27
100006c61:	mov	edx, 0x1
100006c66:	call	0x10001981e ## symbol stub for: _fwrite
100006c6b:	mov	rdi, qword ptr [r13]
100006c6f:	call	0x1000197d6 ## symbol stub for: _fflush
100006c74:	lea	rax, [rip + 0x242bd]
100006c7b:	mov	qword ptr [rax], 0x0
100006c82:	lea	rax, [rip + 0x242cf]
100006c89:	mov	rbx, qword ptr [rax]
100006c8c:	lea	rsi, [rip + 0x1586f] ## literal pool for: "-"
100006c93:	mov	rdi, rbx
100006c96:	call	0x10001990e ## symbol stub for: _strcmp
100006c9b:	test	eax, eax
100006c9d:	je	0x100006e05
100006ca3:	cmp	byte ptr [rbp - 0xa8], 0x0
100006caa:	je	0x100006ec0
100006cb0:	cmp	qword ptr [r15], 0x2
100006cb4:	jae	0x1000093df
100006cba:	lea	rsi, [rip + 0x1635c] ## literal pool for: "r+"
100006cc1:	mov	rdi, rbx
100006cc4:	call	0x1000197e8 ## symbol stub for: _fopen
100006cc9:	lea	rcx, [rip + 0x22b28]
100006cd0:	mov	qword ptr [rcx], rax
100006cd3:	test	rax, rax
100006cd6:	je	0x100009554
100006cdc:	lea	rcx, [rip + 0x24275]
100006ce3:	mov	rcx, qword ptr [rcx]
100006ce6:	lea	rdx, [rip + 0x22b03]
100006ced:	mov	qword ptr [rdx], rcx
100006cf0:	lea	rbx, [rip + 0x22e29]
100006cf7:	mov	rsi, qword ptr [rbx]
100006cfa:	mov	rdi, rax
100006cfd:	xor	edx, edx
100006cff:	call	0x10001980c ## symbol stub for: _fseeko
100006d04:	test	eax, eax
100006d06:	jne	0x1000093eb
100006d0c:	mov	rax, qword ptr [rbx]
100006d0f:	lea	rcx, [rip + 0x22b82]
100006d16:	mov	qword ptr [rcx], rax
100006d19:	lea	rcx, [rip + 0x24218]
100006d20:	mov	qword ptr [rcx], rax
100006d23:	jmp	0x1000073e2
100006d28:	mov	rsi, qword ptr [r15]
100006d2b:	lea	rdi, [rip + 0x160d3] ## literal pool for: "Could not get info for input split: "
100006d32:	call	0x100003e67
100006d37:	mov	ebx, 0x12
100006d3c:	jmp	0x1000072dc
100006d41:	test	rax, rax
100006d44:	je	0x100006d8b
100006d46:	cmp	byte ptr [rip + 0x54283], 0x0
100006d4d:	jne	0x100006b2d
100006d53:	test	byte ptr [rip + 0x5425e], 0x1
100006d5a:	jne	0x100006b2d
100006d60:	test	byte ptr [rip + 0x54255], 0x1
100006d67:	jne	0x100006b2d
100006d6d:	test	byte ptr [rip + 0x5424c], 0x1
100006d74:	jne	0x100006b2d
100006d7a:	lea	rcx, [rip + 0x22937]
100006d81:	mov	ecx, dword ptr [rcx]
100006d83:	or	ecx, dword ptr [rdx]
100006d85:	jne	0x100006b2d
100006d8b:	cmp	byte ptr [rip + 0x54232], 0x1
100006d92:	jne	0x100006dae
100006d94:	test	rax, rax
100006d97:	jne	0x100008d8d
100006d9d:	lea	rcx, [rip + 0x241ac]
100006da4:	cmp	qword ptr [rcx], 0x0
100006da8:	jne	0x100008d8d
100006dae:	mov	ecx, dword ptr [rip + 0x22454]
100006db4:	and	ecx, -0x2
100006db7:	cmp	ecx, 0x2
100006dba:	jne	0x100009414
100006dc0:	mov	ebx, 0xc
100006dc5:	mov	edi, 0xc
100006dca:	jmp	0x1000072d7
100006dcf:	mov	eax, dword ptr [rip + 0x22433]
100006dd5:	cmp	eax, 0x3
100006dd8:	je	0x100006fe5
100006dde:	test	eax, eax
100006de0:	jne	0x100006ff7
100006de6:	mov	rcx, qword ptr [r13]
100006dea:	lea	rdi, [rip + 0x161a8] ## literal pool for: "Would Delete:\n"
100006df1:	mov	esi, 0xe
100006df6:	jmp	0x100007010
100006dfb:	call	0x10000984a
100006e00:	jmp	0x1000072d3
100006e05:	mov	rax, qword ptr [rip + 0x1d21c] ## literal pool symbol address: ___stdoutp
100006e0c:	mov	rax, qword ptr [rax]
100006e0f:	lea	rcx, [rip + 0x229e2]
100006e16:	mov	qword ptr [rcx], rax
100006e19:	mov	edi, 0x4
100006e1e:	call	0x100019848 ## symbol stub for: _malloc
100006e23:	lea	rcx, [rip + 0x229c6]
100006e2a:	mov	qword ptr [rcx], rax
100006e2d:	test	rax, rax
100006e30:	je	0x100009192
100006e36:	mov	word ptr [rax], 0x2d
100006e3b:	jmp	0x1000073e2
100006e40:	lea	rax, [rip + 0x15a2f] ## literal pool for: "w"
100006e47:	lea	rsi, [rip + 0x161cf] ## literal pool for: "r+"
100006e4e:	or	r12, rbx
100006e51:	cmove	rsi, rax
100006e55:	cmp	dword ptr [rbp - 0xd8], 0x0
100006e5c:	lea	rbx, [rip + 0x229b5]
100006e63:	mov	rdi, qword ptr [rbx]
100006e66:	cmovne	rsi, rax
100006e6a:	call	0x1000197e8 ## symbol stub for: _fopen
100006e6f:	test	rax, rax
100006e72:	je	0x100009568
100006e78:	mov	rdi, rax
100006e7b:	call	0x1000197be ## symbol stub for: _fclose
100006e80:	mov	rdi, qword ptr [rbx]
100006e83:	call	0x100012411
100006e88:	lea	rcx, [rip + 0x22991]
100006e8f:	mov	dword ptr [rcx], eax
100006e91:	lea	rax, [rip + 0x22a40]
100006e98:	cmp	qword ptr [rax], 0x0
100006e9c:	jne	0x100006c38
100006ea2:	cmp	qword ptr [r14], 0x0
100006ea6:	jne	0x100006c38
100006eac:	lea	rax, [rip + 0x22965]
100006eb3:	mov	rdi, qword ptr [rax]
100006eb6:	call	0x1000121b4
100006ebb:	jmp	0x100006c38
100006ec0:	cmp	dword ptr [rbp - 0xa4], 0x0
100006ec7:	je	0x100006eec
100006ec9:	mov	rcx, qword ptr [r13]
100006ecd:	lea	rdi, [rip + 0x1618e] ## literal pool for: "sd: Creating new zip file\n"
100006ed4:	mov	esi, 0x1a
100006ed9:	mov	edx, 0x1
100006ede:	call	0x10001981e ## symbol stub for: _fwrite
100006ee3:	mov	rdi, qword ptr [r13]
100006ee7:	call	0x1000197d6 ## symbol stub for: _fflush
100006eec:	cmp	qword ptr [r14], 0x0
100006ef0:	je	0x100006f6e
100006ef2:	lea	r15, [rip + 0x2290f]
100006ef9:	mov	rdi, qword ptr [r15]
100006efc:	xor	esi, esi
100006efe:	call	0x10001338c
100006f03:	lea	rbx, [rip + 0x22906]
100006f0a:	mov	qword ptr [rbx], rax
100006f0d:	lea	rsi, [rip + 0x1509c] ## literal pool for: "r"
100006f14:	mov	rdi, rax
100006f17:	call	0x1000197e8 ## symbol stub for: _fopen
100006f1c:	lea	r13, [rip + 0x228dd]
100006f23:	mov	qword ptr [r13], rax
100006f27:	test	rax, rax
100006f2a:	jne	0x100006f6e
100006f2c:	lea	r12, [rip + 0x1507d] ## literal pool for: "r"
100006f33:	xor	edi, edi
100006f35:	call	0x100013490
100006f3a:	test	eax, eax
100006f3c:	jne	0x1000092cd
100006f42:	mov	rdi, qword ptr [rbx]
100006f45:	call	0x100019806 ## symbol stub for: _free
100006f4a:	mov	rdi, qword ptr [r15]
100006f4d:	mov	esi, 0x1
100006f52:	call	0x10001338c
100006f57:	mov	qword ptr [rbx], rax
100006f5a:	mov	rdi, rax
100006f5d:	mov	rsi, r12
100006f60:	call	0x1000197e8 ## symbol stub for: _fopen
100006f65:	mov	qword ptr [r13], rax
100006f69:	test	rax, rax
100006f6c:	je	0x100006f33
100006f6e:	lea	rax, [rip + 0x2283b]
100006f75:	mov	rbx, qword ptr [rax]
100006f78:	test	rbx, rbx
100006f7b:	je	0x100007310
100006f81:	mov	rdi, rbx
100006f84:	call	0x100019920 ## symbol stub for: _strlen
100006f89:	lea	rdi, [rax + 0xc]
100006f8d:	call	0x100019848 ## symbol stub for: _malloc
100006f92:	lea	r15, [rip + 0x22857]
100006f99:	mov	qword ptr [r15], rax
100006f9c:	test	rax, rax
100006f9f:	je	0x100009192
100006fa5:	mov	rdi, rax
100006fa8:	mov	rsi, rbx
100006fab:	call	0x100019914 ## symbol stub for: _strcpy
100006fb0:	mov	rbx, qword ptr [r15]
100006fb3:	cmp	byte ptr [rbx], 0x0
100006fb6:	lea	r13, [rip + 0x23f73]
100006fbd:	je	0x100006fd2
100006fbf:	mov	rdi, rbx
100006fc2:	call	0x100019920 ## symbol stub for: _strlen
100006fc7:	cmp	byte ptr [rax + rbx - 0x1], 0x2f
100006fcc:	je	0x10000738b
100006fd2:	mov	rdi, rbx
100006fd5:	call	0x100019920 ## symbol stub for: _strlen
100006fda:	mov	word ptr [rbx + rax], 0x2f
100006fe0:	jmp	0x10000738b
100006fe5:	mov	rcx, qword ptr [r13]
100006fe9:	lea	rdi, [rip + 0x15fb8] ## literal pool for: "Would Freshen:\n"
100006ff0:	mov	esi, 0xf
100006ff5:	jmp	0x100007010
100006ff7:	mov	rcx, qword ptr [r13]
100006ffb:	cmp	eax, 0x4
100006ffe:	jne	0x100008da1
100007004:	lea	rdi, [rip + 0x15fad] ## literal pool for: "Would Copy:\n"
10000700b:	mov	esi, 0xc
100007010:	mov	edx, 0x1
100007015:	call	0x10001981e ## symbol stub for: _fwrite
10000701a:	mov	rdi, qword ptr [r13]
10000701e:	call	0x1000197d6 ## symbol stub for: _fflush
100007023:	lea	r14, [rip + 0x22736]
10000702a:	mov	rsi, qword ptr [r14]
10000702d:	test	rsi, rsi
100007030:	je	0x1000070c7
100007036:	lea	rbx, [rip + 0x22893]
10000703d:	cmp	dword ptr [rbx], 0x0
100007040:	je	0x100007052
100007042:	mov	edi, 0xa
100007047:	call	0x1000197f4 ## symbol stub for: _fputc
10000704c:	mov	dword ptr [rbx], 0x0
100007052:	cmp	dword ptr [rbp - 0xc0], 0x3
100007059:	jne	0x10000706c
10000705b:	mov	rcx, qword ptr [r14]
10000705e:	lea	rdi, [rip + 0x15f21] ## literal pool for: "Archive contains:\n"
100007065:	mov	esi, 0x12
10000706a:	jmp	0x1000070b5
10000706c:	mov	eax, dword ptr [rip + 0x22196]
100007072:	cmp	eax, 0x3
100007075:	je	0x10000708c
100007077:	test	eax, eax
100007079:	jne	0x10000709d
10000707b:	mov	rcx, qword ptr [r14]
10000707e:	lea	rdi, [rip + 0x15f14] ## literal pool for: "Would Delete:\n"
100007085:	mov	esi, 0xe
10000708a:	jmp	0x1000070b5
10000708c:	mov	rcx, qword ptr [r14]
10000708f:	lea	rdi, [rip + 0x15f12] ## literal pool for: "Would Freshen:\n"
100007096:	mov	esi, 0xf
10000709b:	jmp	0x1000070b5
10000709d:	mov	rcx, qword ptr [r14]
1000070a0:	cmp	eax, 0x4
1000070a3:	jne	0x100007304
1000070a9:	lea	rdi, [rip + 0x15f08] ## literal pool for: "Would Copy:\n"
1000070b0:	mov	esi, 0xc
1000070b5:	mov	edx, 0x1
1000070ba:	call	0x10001981e ## symbol stub for: _fwrite
1000070bf:	mov	rdi, qword ptr [r14]
1000070c2:	call	0x1000197d6 ## symbol stub for: _fflush
1000070c7:	lea	rax, [rip + 0x2280a]
1000070ce:	mov	rbx, qword ptr [rax]
1000070d1:	test	rbx, rbx
1000070d4:	mov	rax, qword ptr [rbp - 0xc0]
1000070db:	je	0x1000071ac
1000070e1:	xor	r15d, r15d
1000070e4:	xor	r13d, r13d
1000070e7:	xor	r14d, r14d
1000070ea:	cmp	eax, 0x3
1000070ed:	je	0x100007100
1000070ef:	cmp	dword ptr [rbx + 0x88], 0x0
1000070f6:	jne	0x100007100
1000070f8:	mov	r12, r13
1000070fb:	jmp	0x100007197
100007100:	mov	r12, qword ptr [rbx + 0x20]
100007104:	test	r12, r12
100007107:	cmovs	r12, r15
10000710b:	lea	rcx, [rip + 0x2234a]
100007112:	cmp	dword ptr [rcx], 0x0
100007115:	je	0x100007155
100007117:	lea	rax, [rip + 0x2267e]
10000711e:	mov	eax, dword ptr [rax]
100007120:	and	eax, -0x3
100007123:	cmp	eax, 0x1
100007126:	mov	rax, qword ptr [rbp - 0xc0]
10000712d:	jne	0x100007155
10000712f:	lea	rax, [rip + 0x23dfa]
100007136:	mov	rdi, qword ptr [rax]
100007139:	mov	rdx, qword ptr [rbx + 0x80]
100007140:	lea	rsi, [rip + 0x15e91] ## literal pool for: "  %s\n"
100007147:	xor	eax, eax
100007149:	call	0x1000197ee ## symbol stub for: _fprintf
10000714e:	mov	rax, qword ptr [rbp - 0xc0]
100007155:	inc	r14
100007158:	add	r12, r13
10000715b:	lea	rcx, [rip + 0x225fe]
100007162:	mov	rdi, qword ptr [rcx]
100007165:	test	rdi, rdi
100007168:	je	0x100007197
10000716a:	lea	rax, [rip + 0x2262b]
100007171:	mov	eax, dword ptr [rax]
100007173:	add	eax, -0x5
100007176:	cmp	eax, 0x2
100007179:	jb	0x100007190
10000717b:	mov	rdx, qword ptr [rbx + 0x80]
100007182:	lea	rsi, [rip + 0x15e4f] ## literal pool for: "  %s\n"
100007189:	xor	eax, eax
10000718b:	call	0x1000197ee ## symbol stub for: _fprintf
100007190:	mov	rax, qword ptr [rbp - 0xc0]
100007197:	mov	rbx, qword ptr [rbx + 0x98]
10000719e:	mov	r13, r12
1000071a1:	test	rbx, rbx
1000071a4:	jne	0x1000070ea
1000071aa:	jmp	0x1000071b2
1000071ac:	xor	r14d, r14d
1000071af:	xor	r12d, r12d
1000071b2:	lea	rax, [rip + 0x22737]
1000071b9:	mov	rbx, qword ptr [rax]
1000071bc:	test	rbx, rbx
1000071bf:	je	0x100007240
1000071c1:	lea	r15, [rip + 0x15e10] ## literal pool for: "  %s\n"
1000071c8:	mov	r13, qword ptr [rbx + 0x28]
1000071cc:	test	r13, r13
1000071cf:	mov	eax, 0x0
1000071d4:	cmovs	r13, rax
1000071d8:	lea	rax, [rip + 0x2227d]
1000071df:	cmp	dword ptr [rax], 0x0
1000071e2:	je	0x100007214
1000071e4:	lea	rax, [rip + 0x225b1]
1000071eb:	mov	eax, dword ptr [rax]
1000071ed:	cmp	eax, 0x5
1000071f0:	ja	0x100007214
1000071f2:	mov	ecx, 0x2a
1000071f7:	bt	ecx, eax
1000071fa:	jae	0x100007214
1000071fc:	lea	rax, [rip + 0x23d2d]
100007203:	mov	rdi, qword ptr [rax]
100007206:	mov	rdx, qword ptr [rbx + 0x18]
10000720a:	mov	rsi, r15
10000720d:	xor	eax, eax
10000720f:	call	0x1000197ee ## symbol stub for: _fprintf
100007214:	lea	rax, [rip + 0x22545]
10000721b:	mov	rdi, qword ptr [rax]
10000721e:	test	rdi, rdi
100007221:	je	0x100007231
100007223:	mov	rdx, qword ptr [rbx + 0x18]
100007227:	mov	rsi, r15
10000722a:	xor	eax, eax
10000722c:	call	0x1000197ee ## symbol stub for: _fprintf
100007231:	inc	r14
100007234:	add	r12, r13
100007237:	mov	rbx, qword ptr [rbx + 0x38]
10000723b:	test	rbx, rbx
10000723e:	jne	0x1000071c8
100007240:	lea	rax, [rip + 0x22215]
100007247:	cmp	dword ptr [rax], 0x0
10000724a:	lea	r13, [rip + 0x2250f]
100007251:	jne	0x10000725c
100007253:	mov	r15, qword ptr [r13]
100007257:	test	r15, r15
10000725a:	jne	0x1000072a1
10000725c:	lea	rax, [rip + 0x23ccd]
100007263:	mov	r15, qword ptr [rax]
100007266:	mov	rdi, r14
100007269:	xor	esi, esi
10000726b:	xor	edx, edx
10000726d:	call	0x10001621a
100007272:	mov	rbx, rax
100007275:	mov	rdi, r12
100007278:	xor	esi, esi
10000727a:	xor	edx, edx
10000727c:	call	0x10001621a
100007281:	lea	rsi, [rip + 0x15d56] ## literal pool for: "Total %s entries (%s bytes)\n"
100007288:	mov	rdi, r15
10000728b:	mov	rdx, rbx
10000728e:	mov	rcx, rax
100007291:	xor	eax, eax
100007293:	call	0x1000197ee ## symbol stub for: _fprintf
100007298:	mov	r15, qword ptr [r13]
10000729c:	test	r15, r15
10000729f:	je	0x1000072d3
1000072a1:	mov	rdi, r14
1000072a4:	xor	esi, esi
1000072a6:	xor	edx, edx
1000072a8:	call	0x10001621a
1000072ad:	mov	r14, rax
1000072b0:	mov	rdi, r12
1000072b3:	xor	esi, esi
1000072b5:	xor	edx, edx
1000072b7:	call	0x10001621a
1000072bc:	lea	rsi, [rip + 0x15d1b] ## literal pool for: "Total %s entries (%s bytes)\n"
1000072c3:	mov	rdi, r15
1000072c6:	mov	rdx, r14
1000072c9:	mov	rcx, rax
1000072cc:	xor	eax, eax
1000072ce:	call	0x1000197ee ## symbol stub for: _fprintf
1000072d3:	xor	ebx, ebx
1000072d5:	xor	edi, edi
1000072d7:	call	0x1000099d8
1000072dc:	mov	rax, qword ptr [rip + 0x1cd2d] ## literal pool symbol address: ___stack_chk_guard
1000072e3:	mov	rax, qword ptr [rax]
1000072e6:	cmp	rax, qword ptr [rbp - 0x30]
1000072ea:	jne	0x100008dad
1000072f0:	mov	eax, ebx
1000072f2:	add	rsp, 0x138
1000072f9:	pop	rbx
1000072fa:	pop	r12
1000072fc:	pop	r13
1000072fe:	pop	r14
100007300:	pop	r15
100007302:	pop	rbp
100007303:	ret
100007304:	lea	rdi, [rip + 0x15cba] ## literal pool for: "Would Add/Update:\n"
10000730b:	jmp	0x100007065
100007310:	lea	rax, [rip + 0x23c41]
100007317:	mov	rbx, qword ptr [rax]
10000731a:	mov	rdi, rbx
10000731d:	call	0x100019920 ## symbol stub for: _strlen
100007322:	lea	rdi, [rax + 0xc]
100007326:	call	0x100019848 ## symbol stub for: _malloc
10000732b:	lea	r12, [rip + 0x224be]
100007332:	mov	qword ptr [r12], rax
100007336:	test	rax, rax
100007339:	je	0x100009192
10000733f:	mov	r15d, 0xffffffff
100007345:	mov	rdi, rax
100007348:	mov	rsi, rbx
10000734b:	call	0x100019914 ## symbol stub for: _strcpy
100007350:	mov	rbx, qword ptr [r12]
100007354:	mov	rdi, rbx
100007357:	call	0x100019920 ## symbol stub for: _strlen
10000735c:	mov	edx, eax
10000735e:	xor	ecx, ecx
100007360:	test	eax, eax
100007362:	cmovs	rcx, rax
100007366:	lea	r13, [rip + 0x23bc3]
10000736d:	test	edx, edx
10000736f:	jle	0x100007384
100007371:	lea	eax, [rdx + r15]
100007375:	dec	rdx
100007378:	cmp	byte ptr [rbx + rax], 0x2f
10000737c:	jne	0x10000736d
10000737e:	inc	rdx
100007381:	mov	rcx, rdx
100007384:	movsxd	rax, ecx
100007387:	mov	byte ptr [rbx + rax], 0x0
10000738b:	lea	r15, [rip + 0x2245e]
100007392:	mov	rbx, qword ptr [r15]
100007395:	mov	rdi, rbx
100007398:	call	0x100019920 ## symbol stub for: _strlen
10000739d:	movabs	rcx, 0x585858585858697a
1000073a7:	mov	qword ptr [rbx + rax], rcx
1000073ab:	mov	byte ptr [rbx + rax + 0x8], 0x0
1000073b0:	mov	rdi, qword ptr [r15]
1000073b3:	call	0x100019860 ## symbol stub for: _mkstemp
1000073b8:	cmp	eax, -0x1
1000073bb:	je	0x10000939d
1000073c1:	lea	rsi, [rip + 0x154ae] ## literal pool for: "w"
1000073c8:	mov	edi, eax
1000073ca:	call	0x1000197c4 ## symbol stub for: _fdopen
1000073cf:	lea	rcx, [rip + 0x22422]
1000073d6:	mov	qword ptr [rcx], rax
1000073d9:	test	rax, rax
1000073dc:	je	0x10000939d
1000073e2:	mov	edi, 0x4000
1000073e7:	call	0x100019848 ## symbol stub for: _malloc
1000073ec:	test	rax, rax
1000073ef:	je	0x10000937a
1000073f5:	mov	r12, rax
1000073f8:	lea	rbx, [rip + 0x223f9]
1000073ff:	mov	rdi, qword ptr [rbx]
100007402:	mov	ecx, 0x4000
100007407:	mov	rsi, rax
10000740a:	xor	edx, edx
10000740c:	call	0x1000198de ## symbol stub for: _setvbuf
100007411:	lea	r15, [rip + 0x2204c]
100007418:	mov	dword ptr [r15], 0x1
10000741f:	mov	rdi, qword ptr [rbx]
100007422:	call	0x100010337
100007427:	test	eax, eax
100007429:	jne	0x10000743f
10000742b:	mov	dword ptr [r15], 0x0
100007432:	lea	rax, [rip + 0x2234f]
100007439:	mov	dword ptr [rax], 0x1
10000743f:	lea	rax, [rip + 0x23b12]
100007446:	mov	rdi, qword ptr [rax]
100007449:	lea	rsi, [rip + 0x150b2] ## literal pool for: "-"
100007450:	call	0x10001990e ## symbol stub for: _strcmp
100007455:	test	eax, eax
100007457:	sete	al
10000745a:	or	al, byte ptr [rbp - 0xa8]
100007460:	mov	qword ptr [rbp - 0xd8], r12
100007467:	je	0x100007475
100007469:	mov	r15, qword ptr [rbp - 0x118]
100007470:	jmp	0x100007537
100007475:	lea	rbx, [rip + 0x22384]
10000747c:	mov	rdi, qword ptr [rbx]
10000747f:	test	rdi, rdi
100007482:	mov	r15, qword ptr [rbp - 0x118]
100007489:	je	0x1000074a9
10000748b:	mov	rax, qword ptr [r14]
10000748e:	test	rax, rax
100007491:	je	0x1000074a9
100007493:	mov	rdi, rax
100007496:	call	0x1000124f3
10000749b:	test	eax, eax
10000749d:	jne	0x100009575
1000074a3:	mov	rdi, qword ptr [rbx]
1000074a6:	xor	r15d, r15d
1000074a9:	test	rdi, rdi
1000074ac:	je	0x1000074c9
1000074ae:	call	0x1000197be ## symbol stub for: _fclose
1000074b3:	mov	qword ptr [rbx], 0x0
1000074ba:	lea	rax, [rip + 0x2234f]
1000074c1:	mov	rdi, qword ptr [rax]
1000074c4:	call	0x100019806 ## symbol stub for: _free
1000074c9:	mov	rax, qword ptr [r14]
1000074cc:	lea	rcx, [rip + 0x23a65]
1000074d3:	mov	qword ptr [rcx], rax
1000074d6:	lea	rax, [rip + 0x223c7]
1000074dd:	cmp	dword ptr [rax], 0x0
1000074e0:	je	0x100007537
1000074e2:	cmp	dword ptr [rbp - 0xa4], 0x0
1000074e9:	je	0x10000750e
1000074eb:	mov	rcx, qword ptr [r13]
1000074ef:	lea	rdi, [rip + 0x15ba6] ## literal pool for: "sd: Adding spanning/splitting signature at top of archive\n"
1000074f6:	mov	esi, 0x3a
1000074fb:	mov	edx, 0x1
100007500:	call	0x10001981e ## symbol stub for: _fwrite
100007505:	mov	rdi, qword ptr [r13]
100007509:	call	0x1000197d6 ## symbol stub for: _fflush
10000750e:	lea	rdi, [rip + 0x2261b]
100007515:	mov	dword ptr [rdi], 0x8074b50
10000751b:	mov	esi, 0x1
100007520:	mov	edx, 0x4
100007525:	xor	ecx, ecx
100007527:	call	0x100012d64
10000752c:	lea	rax, [rip + 0x23a05]
100007533:	add	qword ptr [rax], 0x4
100007537:	lea	rax, [rip + 0x2239a]
10000753e:	mov	r12, qword ptr [rax]
100007541:	cmp	dword ptr [rbp - 0xa4], 0x0
100007548:	je	0x10000757c
10000754a:	test	r12, r12
10000754d:	je	0x10000757c
10000754f:	mov	rcx, qword ptr [r13]
100007553:	lea	rdi, [rip + 0x15b7d] ## literal pool for: "sd: Going through old zip file\n"
10000755a:	mov	esi, 0x1f
10000755f:	mov	edx, 0x1
100007564:	call	0x10001981e ## symbol stub for: _fwrite
100007569:	mov	rdi, qword ptr [r13]
10000756d:	call	0x1000197d6 ## symbol stub for: _fflush
100007572:	lea	rax, [rip + 0x2235f]
100007579:	mov	r12, qword ptr [rax]
10000757c:	test	r12, r12
10000757f:	je	0x10000813e
100007585:	lea	rax, [rip + 0x2234c]
10000758c:	mov	qword ptr [rbp - 0xe8], rax
100007593:	lea	r14, [rip + 0x221c6]
10000759a:	mov	dword ptr [rbp - 0xc0], 0x0
1000075a4:	cmp	dword ptr [r12 + 0x88], 0x1
1000075ad:	jne	0x10000763b
1000075b3:	mov	rax, qword ptr [r12 + 0x20]
1000075b8:	cmp	rax, -0x1
1000075bc:	mov	r13d, 0x0
1000075c2:	cmovne	r13, rax
1000075c6:	mov	ebx, dword ptr [rip + 0x21c3c]
1000075cc:	test	ebx, 0xfffffffb
1000075d2:	je	0x10000791e
1000075d8:	lea	rax, [rip + 0x220cd]
1000075df:	cmp	dword ptr [rax], 0x0
1000075e2:	jne	0x1000075fb
1000075e4:	lea	rax, [rip + 0x220c9]
1000075eb:	cmp	dword ptr [rax], 0x0
1000075ee:	je	0x1000075fb
1000075f0:	cmp	dword ptr [r12 + 0x90], 0x0
1000075f9:	jne	0x100007600
1000075fb:	call	0x10000a362
100007600:	lea	rax, [rip + 0x21e55]
100007607:	cmp	dword ptr [rax], 0x0
10000760a:	je	0x100007bae
100007610:	cmp	dword ptr [rip + 0x21bf1], 0x3
100007617:	jne	0x1000079d2
10000761d:	lea	rbx, [rip + 0x2390c]
100007624:	mov	rdi, qword ptr [rbx]
100007627:	mov	rdx, qword ptr [r12 + 0x80]
10000762f:	lea	rsi, [rip + 0x15ac1] ## literal pool for: "freshening: %s"
100007636:	jmp	0x100007b92
10000763b:	cmp	dword ptr [rip + 0x21bc6], 0x4
100007642:	je	0x100008087
100007648:	lea	rax, [rip + 0x22065]
10000764f:	cmp	dword ptr [rax], 0x0
100007652:	je	0x100007a1f
100007658:	lea	rax, [rip + 0x220b5]
10000765f:	cmp	dword ptr [rax], 0x0
100007662:	je	0x1000076f1
100007668:	lea	rax, [rip + 0x21ded]
10000766f:	cmp	dword ptr [rax], 0x0
100007672:	je	0x1000076ad
100007674:	mov	rdi, qword ptr [r13]
100007678:	lea	rax, [rip + 0x221b1]
10000767f:	mov	rdx, qword ptr [rax]
100007682:	inc	rdx
100007685:	lea	rax, [rip + 0x221c4]
10000768c:	mov	rcx, qword ptr [rax]
10000768f:	inc	rcx
100007692:	lea	rsi, [rip + 0x1a688] ## literal pool for: "%lu>%lu: "
100007699:	xor	eax, eax
10000769b:	call	0x1000197ee ## symbol stub for: _fprintf
1000076a0:	lea	rax, [rip + 0x22225]
1000076a7:	mov	dword ptr [rax], 0x1
1000076ad:	lea	rax, [rip + 0x220a4]
1000076b4:	cmp	dword ptr [rax], 0x0
1000076b7:	je	0x1000076f1
1000076b9:	mov	rdi, qword ptr [r14]
1000076bc:	lea	rax, [rip + 0x2216d]
1000076c3:	mov	rdx, qword ptr [rax]
1000076c6:	inc	rdx
1000076c9:	lea	rax, [rip + 0x22180]
1000076d0:	mov	rcx, qword ptr [rax]
1000076d3:	inc	rcx
1000076d6:	lea	rsi, [rip + 0x1a644] ## literal pool for: "%lu>%lu: "
1000076dd:	xor	eax, eax
1000076df:	call	0x1000197ee ## symbol stub for: _fprintf
1000076e4:	lea	rax, [rip + 0x221e5]
1000076eb:	mov	dword ptr [rax], 0x1
1000076f1:	lea	rax, [rip + 0x22010]
1000076f8:	cmp	dword ptr [rax], 0x0
1000076fb:	je	0x100007762
1000076fd:	lea	rax, [rip + 0x21d58]
100007704:	cmp	dword ptr [rax], 0x0
100007707:	je	0x100007730
100007709:	mov	rcx, qword ptr [r13]
10000770d:	mov	esi, 0x8
100007712:	mov	edx, 0x1
100007717:	lea	rdi, [rip + 0x1a62b] ## literal pool for: "   /    "
10000771e:	call	0x10001981e ## symbol stub for: _fwrite
100007723:	lea	rax, [rip + 0x221a2]
10000772a:	mov	dword ptr [rax], 0x1
100007730:	lea	rax, [rip + 0x22021]
100007737:	cmp	dword ptr [rax], 0x0
10000773a:	je	0x100007762
10000773c:	mov	rcx, qword ptr [r14]
10000773f:	mov	esi, 0x8
100007744:	mov	edx, 0x1
100007749:	lea	rdi, [rip + 0x1a5f9] ## literal pool for: "   /    "
100007750:	call	0x10001981e ## symbol stub for: _fwrite
100007755:	lea	rax, [rip + 0x22174]
10000775c:	mov	dword ptr [rax], 0x1
100007762:	lea	rax, [rip + 0x21fa3]
100007769:	cmp	dword ptr [rax], 0x0
10000776c:	je	0x1000077d3
10000776e:	lea	rax, [rip + 0x21ce7]
100007775:	cmp	dword ptr [rax], 0x0
100007778:	je	0x1000077a1
10000777a:	mov	rcx, qword ptr [r13]
10000777e:	mov	esi, 0xc
100007783:	mov	edx, 0x1
100007788:	lea	rdi, [rip + 0x1a5c3] ## literal pool for: "     /      "
10000778f:	call	0x10001981e ## symbol stub for: _fwrite
100007794:	lea	rax, [rip + 0x22131]
10000779b:	mov	dword ptr [rax], 0x1
1000077a1:	lea	rax, [rip + 0x21fb0]
1000077a8:	cmp	dword ptr [rax], 0x0
1000077ab:	je	0x1000077d3
1000077ad:	mov	rcx, qword ptr [r14]
1000077b0:	mov	esi, 0xc
1000077b5:	mov	edx, 0x1
1000077ba:	lea	rdi, [rip + 0x1a591] ## literal pool for: "     /      "
1000077c1:	call	0x10001981e ## symbol stub for: _fwrite
1000077c6:	lea	rax, [rip + 0x22103]
1000077cd:	mov	dword ptr [rax], 0x1
1000077d3:	lea	rax, [rip + 0x21c82]
1000077da:	cmp	dword ptr [rax], 0x0
1000077dd:	je	0x1000077e8
1000077df:	mov	rdi, qword ptr [r13]
1000077e3:	call	0x1000197d6 ## symbol stub for: _fflush
1000077e8:	lea	rax, [rip + 0x21f69]
1000077ef:	cmp	dword ptr [rax], 0x0
1000077f2:	je	0x1000077fc
1000077f4:	mov	rdi, qword ptr [r14]
1000077f7:	call	0x1000197d6 ## symbol stub for: _fflush
1000077fc:	lea	rax, [rip + 0x21c59]
100007803:	cmp	dword ptr [rax], 0x0
100007806:	je	0x10000788c
10000780c:	mov	rdi, qword ptr [r13]
100007810:	mov	rdx, qword ptr [r12 + 0x80]
100007818:	lea	rsi, [rip + 0x15a33] ## literal pool for: "deleting: %s"
10000781f:	xor	eax, eax
100007821:	call	0x1000197ee ## symbol stub for: _fprintf
100007826:	lea	rax, [rip + 0x21eeb]
10000782d:	cmp	dword ptr [rax], 0x0
100007830:	je	0x100007868
100007832:	mov	rcx, qword ptr [r13]
100007836:	mov	esi, 0x2
10000783b:	mov	edx, 0x1
100007840:	lea	rdi, [rip + 0x159a9] ## literal pool for: " ("
100007847:	call	0x10001981e ## symbol stub for: _fwrite
10000784c:	mov	rdi, qword ptr [r13]
100007850:	mov	rsi, qword ptr [r12 + 0x20]
100007855:	call	0x10001631e
10000785a:	mov	rsi, qword ptr [r13]
10000785e:	mov	edi, 0x29
100007863:	call	0x1000197f4 ## symbol stub for: _fputc
100007868:	mov	rdi, qword ptr [r13]
10000786c:	call	0x1000197d6 ## symbol stub for: _fflush
100007871:	mov	rsi, qword ptr [r13]
100007875:	mov	edi, 0xa
10000787a:	call	0x1000197f4 ## symbol stub for: _fputc
10000787f:	lea	rax, [rip + 0x22046]
100007886:	mov	dword ptr [rax], 0x0
10000788c:	lea	rax, [rip + 0x21ec5]
100007893:	cmp	dword ptr [rax], 0x0
100007896:	je	0x100007df9
10000789c:	mov	rbx, r15
10000789f:	mov	rdi, qword ptr [r14]
1000078a2:	mov	rdx, qword ptr [r12 + 0x80]
1000078aa:	lea	rsi, [rip + 0x159a1] ## literal pool for: "deleting: %s"
1000078b1:	xor	eax, eax
1000078b3:	call	0x1000197ee ## symbol stub for: _fprintf
1000078b8:	lea	rax, [rip + 0x21e59]
1000078bf:	cmp	dword ptr [rax], 0x0
1000078c2:	je	0x1000078f7
1000078c4:	mov	rcx, qword ptr [r14]
1000078c7:	mov	esi, 0x2
1000078cc:	mov	edx, 0x1
1000078d1:	lea	rdi, [rip + 0x15918] ## literal pool for: " ("
1000078d8:	call	0x10001981e ## symbol stub for: _fwrite
1000078dd:	mov	rdi, qword ptr [r14]
1000078e0:	mov	rsi, qword ptr [r12 + 0x20]
1000078e5:	call	0x10001631e
1000078ea:	mov	rsi, qword ptr [r14]
1000078ed:	mov	edi, 0x29
1000078f2:	call	0x1000197f4 ## symbol stub for: _fputc
1000078f7:	mov	rsi, qword ptr [r14]
1000078fa:	mov	edi, 0xa
1000078ff:	call	0x1000197f4 ## symbol stub for: _fputc
100007904:	mov	rdi, qword ptr [r14]
100007907:	call	0x1000197d6 ## symbol stub for: _fflush
10000790c:	lea	rax, [rip + 0x21fbd]
100007913:	mov	dword ptr [rax], 0x0
100007919:	jmp	0x100007dfc
10000791e:	call	0x10000a362
100007923:	cmp	ebx, 0x4
100007926:	jne	0x100007a52
10000792c:	lea	rax, [rip + 0x21d9d]
100007933:	mov	rcx, qword ptr [rax]
100007936:	lea	rdx, [rcx - 0x1]
10000793a:	mov	rax, qword ptr [r12 + 0x30]
10000793f:	cmp	rdx, rax
100007942:	lea	r13, [rip + 0x235e7]
100007949:	je	0x10000795b
10000794b:	lea	rcx, [rip + 0x21d7e]
100007952:	mov	qword ptr [rcx], 0x0
100007959:	xor	ecx, ecx
10000795b:	dec	rcx
10000795e:	lea	rdx, [rip + 0x21af7]
100007965:	mov	edx, dword ptr [rdx]
100007967:	cmp	rcx, rax
10000796a:	jne	0x100007e1b
100007970:	test	edx, edx
100007972:	je	0x1000079a4
100007974:	mov	rdi, qword ptr [r13]
100007978:	mov	rdx, qword ptr [r12 + 0x80]
100007980:	lea	rsi, [rip + 0x1584e] ## literal pool for: " skipping: %s"
100007987:	xor	eax, eax
100007989:	call	0x1000197ee ## symbol stub for: _fprintf
10000798e:	lea	rax, [rip + 0x21f37]
100007995:	mov	dword ptr [rax], 0x1
10000799b:	mov	rdi, qword ptr [r13]
10000799f:	call	0x1000197d6 ## symbol stub for: _fflush
1000079a4:	lea	rax, [rip + 0x21dad]
1000079ab:	cmp	dword ptr [rax], 0x0
1000079ae:	je	0x100007f0a
1000079b4:	mov	rdi, qword ptr [r14]
1000079b7:	mov	rdx, qword ptr [r12 + 0x80]
1000079bf:	lea	rsi, [rip + 0x1580f] ## literal pool for: " skipping: %s"
1000079c6:	xor	eax, eax
1000079c8:	call	0x1000197ee ## symbol stub for: _fprintf
1000079cd:	jmp	0x100007ef5
1000079d2:	lea	rax, [rip + 0x21cdb]
1000079d9:	cmp	dword ptr [rax], 0x0
1000079dc:	je	0x100007b79
1000079e2:	cmp	dword ptr [r12 + 0x90], 0x0
1000079eb:	je	0x100007b79
1000079f1:	lea	rax, [rip + 0x21cb4]
1000079f8:	cmp	dword ptr [rax], 0x0
1000079fb:	je	0x100007bae
100007a01:	lea	rbx, [rip + 0x23528]
100007a08:	mov	rdi, qword ptr [rbx]
100007a0b:	mov	rdx, qword ptr [r12 + 0x80]
100007a13:	lea	rsi, [rip + 0x156ec] ## literal pool for: "      ok: %s"
100007a1a:	jmp	0x100007b92
100007a1f:	mov	rbx, r15
100007a22:	lea	rax, [rip + 0x21d57]
100007a29:	cmp	dword ptr [rax], 0x0
100007a2c:	setne	al
100007a2f:	or	al, byte ptr [rbp - 0xa8]
100007a35:	jne	0x100007dfc
100007a3b:	mov	rdi, r12
100007a3e:	call	0x10000ed64
100007a43:	xor	ebx, ebx
100007a45:	test	eax, eax
100007a47:	je	0x100007dfc
100007a4d:	jmp	0x1000092e5
100007a52:	lea	rax, [rip + 0x21a03]
100007a59:	cmp	dword ptr [rax], 0x0
100007a5c:	lea	r13, [rip + 0x234cd]
100007a63:	je	0x100007ad8
100007a65:	mov	rdi, qword ptr [r13]
100007a69:	mov	rdx, qword ptr [r12 + 0x80]
100007a71:	lea	rsi, [rip + 0x157da] ## literal pool for: "deleting: %s"
100007a78:	xor	eax, eax
100007a7a:	call	0x1000197ee ## symbol stub for: _fprintf
100007a7f:	lea	rax, [rip + 0x21c92]
100007a86:	cmp	dword ptr [rax], 0x0
100007a89:	je	0x100007ac1
100007a8b:	mov	rcx, qword ptr [r13]
100007a8f:	mov	esi, 0x2
100007a94:	mov	edx, 0x1
100007a99:	lea	rdi, [rip + 0x15750] ## literal pool for: " ("
100007aa0:	call	0x10001981e ## symbol stub for: _fwrite
100007aa5:	mov	rdi, qword ptr [r13]
100007aa9:	mov	rsi, qword ptr [r12 + 0x20]
100007aae:	call	0x10001631e
100007ab3:	mov	rsi, qword ptr [r13]
100007ab7:	mov	edi, 0x29
100007abc:	call	0x1000197f4 ## symbol stub for: _fputc
100007ac1:	mov	rdi, qword ptr [r13]
100007ac5:	call	0x1000197d6 ## symbol stub for: _fflush
100007aca:	mov	rsi, qword ptr [r13]
100007ace:	mov	edi, 0xa
100007ad3:	call	0x1000197f4 ## symbol stub for: _fputc
100007ad8:	lea	rax, [rip + 0x21c79]
100007adf:	cmp	dword ptr [rax], 0x0
100007ae2:	je	0x100007b51
100007ae4:	mov	rdi, qword ptr [r14]
100007ae7:	mov	rdx, qword ptr [r12 + 0x80]
100007aef:	lea	rsi, [rip + 0x1575c] ## literal pool for: "deleting: %s"
100007af6:	xor	eax, eax
100007af8:	call	0x1000197ee ## symbol stub for: _fprintf
100007afd:	lea	rax, [rip + 0x21c14]
100007b04:	cmp	dword ptr [rax], 0x0
100007b07:	je	0x100007b3c
100007b09:	mov	rcx, qword ptr [r14]
100007b0c:	mov	esi, 0x2
100007b11:	mov	edx, 0x1
100007b16:	lea	rdi, [rip + 0x156d3] ## literal pool for: " ("
100007b1d:	call	0x10001981e ## symbol stub for: _fwrite
100007b22:	mov	rdi, qword ptr [r14]
100007b25:	mov	rsi, qword ptr [r12 + 0x20]
100007b2a:	call	0x10001631e
100007b2f:	mov	rsi, qword ptr [r14]
100007b32:	mov	edi, 0x29
100007b37:	call	0x1000197f4 ## symbol stub for: _fputc
100007b3c:	mov	rsi, qword ptr [r14]
100007b3f:	mov	edi, 0xa
100007b44:	call	0x1000197f4 ## symbol stub for: _fputc
100007b49:	mov	rdi, qword ptr [r14]
100007b4c:	call	0x1000197d6 ## symbol stub for: _fflush
100007b51:	lea	rax, [rip + 0x21bc8]
100007b58:	inc	qword ptr [rax]
100007b5b:	mov	rax, qword ptr [r12 + 0x18]
100007b60:	lea	rcx, [rip + 0x21bd9]
100007b67:	add	qword ptr [rcx], rax
100007b6a:	lea	rcx, [rip + 0x21bc7]
100007b71:	add	qword ptr [rcx], rax
100007b74:	jmp	0x100008087
100007b79:	lea	rbx, [rip + 0x233b0]
100007b80:	mov	rdi, qword ptr [rbx]
100007b83:	mov	rdx, qword ptr [r12 + 0x80]
100007b8b:	lea	rsi, [rip + 0x15581] ## literal pool for: "updating: %s"
100007b92:	xor	eax, eax
100007b94:	call	0x1000197ee ## symbol stub for: _fprintf
100007b99:	lea	rax, [rip + 0x21d2c]
100007ba0:	mov	dword ptr [rax], 0x1
100007ba6:	mov	rdi, qword ptr [rbx]
100007ba9:	call	0x1000197d6 ## symbol stub for: _fflush
100007bae:	lea	rax, [rip + 0x21ba3]
100007bb5:	cmp	dword ptr [rax], 0x0
100007bb8:	je	0x100007c40
100007bbe:	cmp	dword ptr [rip + 0x21643], 0x3
100007bc5:	jne	0x100007bdb
100007bc7:	mov	rdi, qword ptr [r14]
100007bca:	mov	rdx, qword ptr [r12 + 0x80]
100007bd2:	lea	rsi, [rip + 0x1551e] ## literal pool for: "freshening: %s"
100007bd9:	jmp	0x100007c24
100007bdb:	lea	rax, [rip + 0x21ad2]
100007be2:	cmp	dword ptr [rax], 0x0
100007be5:	je	0x100007c12
100007be7:	cmp	dword ptr [r12 + 0x90], 0x0
100007bf0:	je	0x100007c12
100007bf2:	lea	rax, [rip + 0x21ab3]
100007bf9:	cmp	dword ptr [rax], 0x0
100007bfc:	je	0x100007c40
100007bfe:	mov	rdi, qword ptr [r14]
100007c01:	mov	rdx, qword ptr [r12 + 0x80]
100007c09:	lea	rsi, [rip + 0x15510] ## literal pool for: " current: %s"
100007c10:	jmp	0x100007c24
100007c12:	mov	rdi, qword ptr [r14]
100007c15:	mov	rdx, qword ptr [r12 + 0x80]
100007c1d:	lea	rsi, [rip + 0x154ef] ## literal pool for: "updating: %s"
100007c24:	xor	eax, eax
100007c26:	call	0x1000197ee ## symbol stub for: _fprintf
100007c2b:	lea	rax, [rip + 0x21c9e]
100007c32:	mov	dword ptr [rax], 0x1
100007c38:	mov	rdi, qword ptr [r14]
100007c3b:	call	0x1000197d6 ## symbol stub for: _fflush
100007c40:	lea	rdi, [rbp - 0xa0]
100007c47:	mov	rsi, r12
100007c4a:	call	0x10000aa20
100007c4f:	test	eax, eax
100007c51:	je	0x100007c7d
100007c53:	mov	rsi, qword ptr [r12 + 0x80]
100007c5b:	lea	rdi, [rip + 0x154cb] ## literal pool for: "could not read local entry information: "
100007c62:	call	0x100003e67
100007c67:	movzx	eax, word ptr [r12 + 0x4]
100007c6d:	mov	word ptr [r12 + 0x3a], ax
100007c73:	mov	word ptr [r12 + 0x2a], 0x0
100007c7b:	jmp	0x100007cd4
100007c7d:	mov	rdi, qword ptr [rbp - 0xa0]
100007c84:	movzx	eax, word ptr [rdi + 0x3a]
100007c88:	mov	word ptr [r12 + 0x3a], ax
100007c8e:	movzx	eax, word ptr [rdi + 0x2a]
100007c92:	mov	word ptr [r12 + 0x2a], ax
100007c98:	mov	rax, qword ptr [rdi + 0x58]
100007c9c:	mov	qword ptr [r12 + 0x58], rax
100007ca1:	cmp	word ptr [rdi + 0x28], 0x0
100007ca6:	je	0x100007ccf
100007ca8:	mov	rdi, qword ptr [rdi + 0x70]
100007cac:	call	0x100019806 ## symbol stub for: _free
100007cb1:	mov	rdi, qword ptr [rbp - 0xa0]
100007cb8:	cmp	word ptr [rdi + 0x28], 0x0
100007cbd:	je	0x100007ccf
100007cbf:	mov	rdi, qword ptr [rdi + 0x50]
100007cc3:	call	0x100019806 ## symbol stub for: _free
100007cc8:	mov	rdi, qword ptr [rbp - 0xa0]
100007ccf:	call	0x100019806 ## symbol stub for: _free
100007cd4:	lea	rax, [rip + 0x219d9]
100007cdb:	cmp	dword ptr [rax], 0x0
100007cde:	je	0x100007ceb
100007ce0:	cmp	dword ptr [r12 + 0x90], 0x0
100007ce9:	jne	0x100007d09
100007ceb:	mov	rdi, r12
100007cee:	call	0x100010393
100007cf3:	mov	r15d, eax
100007cf6:	lea	eax, [r15 + 0x1]
100007cfa:	cmp	eax, 0x2
100007cfd:	jb	0x100007d09
100007cff:	cmp	r15d, 0x12
100007d03:	jne	0x100009202
100007d09:	lea	rax, [rip + 0x219a4]
100007d10:	cmp	dword ptr [rax], 0x0
100007d13:	je	0x100007d43
100007d15:	cmp	dword ptr [r12 + 0x90], 0x0
100007d1e:	je	0x100007d43
100007d20:	mov	rdi, r12
100007d23:	call	0x10000ed64
100007d28:	test	eax, eax
100007d2a:	jne	0x100009290
100007d30:	lea	rdi, [rip + 0x12a80] ## literal pool for: ""
100007d37:	mov	esi, 0x1
100007d3c:	call	0x100003c73
100007d41:	jmp	0x100007dc2
100007d43:	cmp	r15d, 0x12
100007d47:	je	0x100007d4f
100007d49:	cmp	r15d, -0x1
100007d4d:	jne	0x100007dc5
100007d4f:	lea	rdi, [rip + 0x12a61] ## literal pool for: ""
100007d56:	mov	esi, 0x1
100007d5b:	call	0x100003c73
100007d60:	mov	rax, r15
100007d63:	lea	r15, [r12 + 0x80]
100007d6b:	mov	rsi, qword ptr [r12 + 0x80]
100007d73:	cmp	eax, 0x12
100007d76:	je	0x10000811f
100007d7c:	lea	rdi, [rip + 0x1540e] ## literal pool for: "file and directory with the same name: "
100007d83:	call	0x100003e67
100007d88:	mov	rsi, qword ptr [r12 + 0x80]
100007d90:	lea	rdi, [rip + 0x15422] ## literal pool for: "will just copy entry over: "
100007d97:	call	0x100003e67
100007d9c:	mov	rdi, r12
100007d9f:	call	0x10000ed64
100007da4:	test	eax, eax
100007da6:	jne	0x10000929c
100007dac:	mov	dword ptr [r12 + 0x88], 0x0
100007db8:	mov	dword ptr [rbp - 0xc0], 0x1
100007dc2:	xor	r15d, r15d
100007dc5:	lea	rax, [rip + 0x21954]
100007dcc:	inc	qword ptr [rax]
100007dcf:	mov	rax, qword ptr [r12 + 0x20]
100007dd4:	lea	rcx, [rip + 0x21965]
100007ddb:	add	qword ptr [rcx], rax
100007dde:	lea	rax, [rip + 0x21953]
100007de5:	add	qword ptr [rax], r13
100007de8:	lea	rax, [r12 + 0x98]
100007df0:	lea	r13, [rip + 0x23139]
100007df7:	jmp	0x100007e07
100007df9:	mov	rbx, r15
100007dfc:	lea	rax, [r12 + 0x98]
100007e04:	mov	r15, rbx
100007e07:	mov	r12, qword ptr [r12 + 0x98]
100007e0f:	mov	qword ptr [rbp - 0xe8], rax
100007e16:	jmp	0x100008114
100007e1b:	test	edx, edx
100007e1d:	je	0x100007e91
100007e1f:	mov	rdi, qword ptr [r13]
100007e23:	mov	rdx, qword ptr [r12 + 0x80]
100007e2b:	lea	rsi, [rip + 0x153b1] ## literal pool for: " copying: %s"
100007e32:	xor	eax, eax
100007e34:	call	0x1000197ee ## symbol stub for: _fprintf
100007e39:	lea	rax, [rip + 0x218d8]
100007e40:	cmp	dword ptr [rax], 0x0
100007e43:	je	0x100007e7b
100007e45:	mov	rcx, qword ptr [r13]
100007e49:	mov	esi, 0x2
100007e4e:	mov	edx, 0x1
100007e53:	lea	rdi, [rip + 0x15396] ## literal pool for: " ("
100007e5a:	call	0x10001981e ## symbol stub for: _fwrite
100007e5f:	mov	rdi, qword ptr [r13]
100007e63:	mov	rsi, qword ptr [r12 + 0x20]
100007e68:	call	0x10001631e
100007e6d:	mov	rsi, qword ptr [r13]
100007e71:	mov	edi, 0x29
100007e76:	call	0x1000197f4 ## symbol stub for: _fputc
100007e7b:	lea	rax, [rip + 0x21a4a]
100007e82:	mov	dword ptr [rax], 0x1
100007e88:	mov	rdi, qword ptr [r13]
100007e8c:	call	0x1000197d6 ## symbol stub for: _fflush
100007e91:	lea	rax, [rip + 0x218c0]
100007e98:	cmp	dword ptr [rax], 0x0
100007e9b:	je	0x100007f0a
100007e9d:	mov	rdi, qword ptr [r14]
100007ea0:	mov	rdx, qword ptr [r12 + 0x80]
100007ea8:	lea	rsi, [rip + 0x15334] ## literal pool for: " copying: %s"
100007eaf:	xor	eax, eax
100007eb1:	call	0x1000197ee ## symbol stub for: _fprintf
100007eb6:	lea	rax, [rip + 0x2185b]
100007ebd:	cmp	dword ptr [rax], 0x0
100007ec0:	je	0x100007ef5
100007ec2:	mov	rcx, qword ptr [r14]
100007ec5:	mov	esi, 0x2
100007eca:	mov	edx, 0x1
100007ecf:	lea	rdi, [rip + 0x1531a] ## literal pool for: " ("
100007ed6:	call	0x10001981e ## symbol stub for: _fwrite
100007edb:	mov	rdi, qword ptr [r14]
100007ede:	mov	rsi, qword ptr [r12 + 0x20]
100007ee3:	call	0x10001631e
100007ee8:	mov	rsi, qword ptr [r14]
100007eeb:	mov	edi, 0x29
100007ef0:	call	0x1000197f4 ## symbol stub for: _fputc
100007ef5:	lea	rax, [rip + 0x219d4]
100007efc:	mov	dword ptr [rax], 0x1
100007f02:	mov	rdi, qword ptr [r14]
100007f05:	call	0x1000197d6 ## symbol stub for: _fflush
100007f0a:	lea	rax, [rip + 0x217bf]
100007f11:	mov	rax, qword ptr [rax]
100007f14:	dec	rax
100007f17:	cmp	rax, qword ptr [r12 + 0x30]
100007f1c:	jne	0x100007f2c
100007f1e:	mov	dword ptr [r12 + 0x88], 0x0
100007f2a:	jmp	0x100007fa3
100007f2c:	mov	rdi, r12
100007f2f:	call	0x10000ed64
100007f34:	mov	r15d, eax
100007f37:	test	eax, eax
100007f39:	je	0x100007fa3
100007f3b:	cmp	r15d, 0x9
100007f3f:	je	0x10000931a
100007f45:	lea	rax, [rip + 0x21764]
100007f4c:	cmp	dword ptr [rax], 0x1
100007f4f:	jne	0x100009326
100007f55:	lea	rax, [rip + 0x2189c]
100007f5c:	mov	rdi, qword ptr [rax]
100007f5f:	lea	rbx, [rip + 0x2192a]
100007f66:	mov	rsi, qword ptr [rbx]
100007f69:	xor	edx, edx
100007f6b:	call	0x10001980c ## symbol stub for: _fseeko
100007f70:	test	eax, eax
100007f72:	jne	0x10000936b
100007f78:	mov	rsi, qword ptr [r12 + 0x80]
100007f80:	lea	rdi, [rip + 0x152ba] ## literal pool for: "bad - skipping: "
100007f87:	call	0x100003e67
100007f8c:	mov	rax, qword ptr [rbx]
100007f8f:	lea	rcx, [rip + 0x22fa2]
100007f96:	mov	qword ptr [rcx], rax
100007f99:	lea	rcx, [rip + 0x218f8]
100007fa0:	mov	qword ptr [rcx], rax
100007fa3:	test	r15d, r15d
100007fa6:	je	0x100007fc1
100007fa8:	lea	rax, [rip + 0x21721]
100007faf:	cmp	qword ptr [rax], 0x0
100007fb3:	jne	0x100007fc1
100007fb5:	lea	rax, [rip + 0x216f4]
100007fbc:	cmp	dword ptr [rax], 0x1
100007fbf:	je	0x100008037
100007fc1:	lea	rax, [rip + 0x21494]
100007fc8:	cmp	dword ptr [rax], 0x0
100007fcb:	je	0x100007ffd
100007fcd:	lea	rax, [rip + 0x218f8]
100007fd4:	cmp	dword ptr [rax], 0x0
100007fd7:	je	0x100007ffd
100007fd9:	mov	rsi, qword ptr [r13]
100007fdd:	mov	edi, 0xa
100007fe2:	call	0x1000197f4 ## symbol stub for: _fputc
100007fe7:	lea	rax, [rip + 0x218de]
100007fee:	mov	dword ptr [rax], 0x0
100007ff4:	mov	rdi, qword ptr [r13]
100007ff8:	call	0x1000197d6 ## symbol stub for: _fflush
100007ffd:	lea	rax, [rip + 0x21754]
100008004:	cmp	dword ptr [rax], 0x0
100008007:	je	0x100008037
100008009:	lea	rax, [rip + 0x218c0]
100008010:	cmp	dword ptr [rax], 0x0
100008013:	je	0x100008037
100008015:	mov	rsi, qword ptr [r14]
100008018:	mov	edi, 0xa
10000801d:	call	0x1000197f4 ## symbol stub for: _fputc
100008022:	lea	rax, [rip + 0x218a7]
100008029:	mov	dword ptr [rax], 0x0
10000802f:	mov	rdi, qword ptr [r14]
100008032:	call	0x1000197d6 ## symbol stub for: _fflush
100008037:	lea	rax, [rip + 0x216e2]
10000803e:	inc	qword ptr [rax]
100008041:	mov	rax, qword ptr [r12 + 0x18]
100008046:	lea	rcx, [rip + 0x216f3]
10000804d:	test	r15d, r15d
100008050:	je	0x100008059
100008052:	lea	rcx, [rip + 0x216ef]
100008059:	add	qword ptr [rcx], rax
10000805c:	lea	rcx, [rip + 0x216d5]
100008063:	add	qword ptr [rcx], rax
100008066:	lea	rax, [r12 + 0x98]
10000806e:	test	r15d, r15d
100008071:	je	0x100007e07
100008077:	lea	rcx, [rip + 0x21632]
10000807e:	cmp	dword ptr [rcx], 0x1
100008081:	jne	0x100007e07
100008087:	mov	rdi, qword ptr [r12 + 0x70]
10000808c:	mov	rbx, qword ptr [r12 + 0x98]
100008094:	call	0x100019806 ## symbol stub for: _free
100008099:	mov	rdi, qword ptr [r12 + 0x78]
10000809e:	call	0x100019806 ## symbol stub for: _free
1000080a3:	mov	rdi, qword ptr [r12 + 0x80]
1000080ab:	call	0x100019806 ## symbol stub for: _free
1000080b0:	cmp	word ptr [r12 + 0x2a], 0x0
1000080b7:	je	0x1000080c8
1000080b9:	mov	rdi, qword ptr [r12 + 0x58]
1000080be:	test	rdi, rdi
1000080c1:	je	0x1000080c8
1000080c3:	call	0x100019806 ## symbol stub for: _free
1000080c8:	cmp	word ptr [r12 + 0x2c], 0x0
1000080cf:	je	0x1000080e2
1000080d1:	mov	rdi, qword ptr [r12 + 0x60]
1000080d6:	cmp	rdi, qword ptr [r12 + 0x58]
1000080db:	je	0x1000080e2
1000080dd:	call	0x100019806 ## symbol stub for: _free
1000080e2:	cmp	word ptr [r12 + 0x2e], 0x0
1000080e9:	je	0x1000080f5
1000080eb:	mov	rdi, qword ptr [r12 + 0x68]
1000080f0:	call	0x100019806 ## symbol stub for: _free
1000080f5:	mov	rdi, r12
1000080f8:	call	0x100019806 ## symbol stub for: _free
1000080fd:	mov	rax, qword ptr [rbp - 0xe8]
100008104:	mov	qword ptr [rax], rbx
100008107:	lea	rax, [rip + 0x22e3a]
10000810e:	dec	qword ptr [rax]
100008111:	mov	r12, rbx
100008114:	test	r12, r12
100008117:	jne	0x1000075a4
10000811d:	jmp	0x100008148
10000811f:	xor	edx, edx
100008121:	cmp	dword ptr [rbp - 0xe0], 0x0
100008128:	sete	dl
10000812b:	mov	rdi, rsi
10000812e:	mov	rsi, r15
100008131:	mov	rcx, r12
100008134:	call	0x10001968d
100008139:	jmp	0x100007d88
10000813e:	mov	dword ptr [rbp - 0xc0], 0x0
100008148:	cmp	dword ptr [rbp - 0xa4], 0x0
10000814f:	je	0x100008174
100008151:	mov	rcx, qword ptr [r13]
100008155:	lea	rdi, [rip + 0x15103] ## literal pool for: "sd: Zipping up new entries\n"
10000815c:	mov	esi, 0x1b
100008161:	mov	edx, 0x1
100008166:	call	0x10001981e ## symbol stub for: _fwrite
10000816b:	mov	rdi, qword ptr [r13]
10000816f:	call	0x1000197d6 ## symbol stub for: _fflush
100008174:	lea	rax, [rip + 0x21775]
10000817b:	mov	r13, qword ptr [rax]
10000817e:	test	r13, r13
100008181:	je	0x1000083ab
100008187:	mov	edi, 0xa0
10000818c:	call	0x100019848 ## symbol stub for: _malloc
100008191:	test	rax, rax
100008194:	je	0x100009011
10000819a:	mov	rbx, rax
10000819d:	xor	ecx, ecx
10000819f:	mov	qword ptr [rax + 0x98], rcx
1000081a6:	mov	rax, qword ptr [r13]
1000081aa:	mov	qword ptr [rbx + 0x50], rax
1000081ae:	movups	xmm0, xmmword ptr [r13 + 0x8]
1000081b3:	xorps	xmm1, xmm1
1000081b6:	movups	xmmword ptr [r13], xmm1
1000081bb:	movups	xmmword ptr [rbx + 0x70], xmm0
1000081bf:	mov	rax, qword ptr [r13 + 0x18]
1000081c3:	lea	r15, [rbx + 0x80]
1000081ca:	mov	qword ptr [rbx + 0x80], rax
1000081d1:	movups	xmmword ptr [r13 + 0x10], xmm1
1000081d6:	mov	word ptr [rbx + 0x2e], 0x0
1000081dc:	mov	dword ptr [rbx + 0x2a], 0x0
1000081e3:	mov	qword ptr [rbx + 0x58], rcx
1000081e7:	mov	qword ptr [rbx + 0x60], rcx
1000081eb:	mov	dword ptr [rbx + 0x88], 0x1
1000081f5:	mov	eax, dword ptr [r13 + 0x20]
1000081f9:	mov	dword ptr [rbx + 0x94], eax
1000081ff:	call	0x10000a362
100008204:	lea	rax, [rip + 0x21251]
10000820b:	cmp	dword ptr [rax], 0x0
10000820e:	je	0x100008240
100008210:	lea	r14, [rip + 0x22d19]
100008217:	mov	rdi, qword ptr [r14]
10000821a:	mov	rdx, qword ptr [r15]
10000821d:	lea	rsi, [rip + 0x15074] ## literal pool for: "  adding: %s"
100008224:	xor	eax, eax
100008226:	call	0x1000197ee ## symbol stub for: _fprintf
10000822b:	lea	rax, [rip + 0x2169a]
100008232:	mov	dword ptr [rax], 0x1
100008238:	mov	rdi, qword ptr [r14]
10000823b:	call	0x1000197d6 ## symbol stub for: _fflush
100008240:	lea	rax, [rip + 0x21511]
100008247:	cmp	dword ptr [rax], 0x0
10000824a:	je	0x10000827c
10000824c:	lea	r14, [rip + 0x2150d]
100008253:	mov	rdi, qword ptr [r14]
100008256:	mov	rdx, qword ptr [r15]
100008259:	lea	rsi, [rip + 0x15038] ## literal pool for: "  adding: %s"
100008260:	xor	eax, eax
100008262:	call	0x1000197ee ## symbol stub for: _fprintf
100008267:	lea	rax, [rip + 0x21662]
10000826e:	mov	dword ptr [rax], 0x1
100008274:	mov	rdi, qword ptr [r14]
100008277:	call	0x1000197d6 ## symbol stub for: _fflush
10000827c:	mov	r12, qword ptr [r13 + 0x28]
100008280:	mov	rdi, rbx
100008283:	call	0x100010393
100008288:	mov	r14d, eax
10000828b:	cmp	eax, -0x1
10000828e:	je	0x1000082a3
100008290:	test	r14d, r14d
100008293:	je	0x100008330
100008299:	cmp	r14d, 0x12
10000829d:	jne	0x10000901d
1000082a3:	lea	rdi, [rip + 0x1250d] ## literal pool for: ""
1000082aa:	mov	esi, 0x1
1000082af:	call	0x100003c73
1000082b4:	cmp	r14d, 0x12
1000082b8:	je	0x10000838a
1000082be:	mov	rsi, qword ptr [r15]
1000082c1:	lea	rdi, [rip + 0x14ec9] ## literal pool for: "file and directory with the same name: "
1000082c8:	call	0x100003e67
1000082cd:	lea	rax, [rip + 0x2144c]
1000082d4:	inc	qword ptr [rax]
1000082d7:	lea	rax, [rip + 0x2145a]
1000082de:	add	qword ptr [rax], r12
1000082e1:	lea	rax, [rip + 0x21440]
1000082e8:	inc	qword ptr [rax]
1000082eb:	lea	rax, [rip + 0x21456]
1000082f2:	add	qword ptr [rax], r12
1000082f5:	mov	rdi, qword ptr [rbx + 0x50]
1000082f9:	call	0x100019806 ## symbol stub for: _free
1000082fe:	mov	rdi, qword ptr [rbx + 0x70]
100008302:	call	0x100019806 ## symbol stub for: _free
100008307:	mov	rdi, qword ptr [rbx + 0x78]
10000830b:	call	0x100019806 ## symbol stub for: _free
100008310:	mov	rdi, qword ptr [rbx + 0x80]
100008317:	call	0x100019806 ## symbol stub for: _free
10000831c:	mov	rdi, rbx
10000831f:	call	0x100019806 ## symbol stub for: _free
100008324:	mov	dword ptr [rbp - 0xc0], 0x1
10000832e:	jmp	0x100008374
100008330:	lea	rax, [rip + 0x213e9]
100008337:	inc	qword ptr [rax]
10000833a:	mov	rax, qword ptr [rbx + 0x20]
10000833e:	lea	rcx, [rip + 0x213fb]
100008345:	add	qword ptr [rcx], rax
100008348:	lea	rax, [rip + 0x213e9]
10000834f:	add	qword ptr [rax], r12
100008352:	mov	rax, qword ptr [rbp - 0xe8]
100008359:	mov	qword ptr [rax], rbx
10000835c:	add	rbx, 0x98
100008363:	lea	rax, [rip + 0x22bde]
10000836a:	inc	qword ptr [rax]
10000836d:	mov	qword ptr [rbp - 0xe8], rbx
100008374:	mov	rdi, r13
100008377:	call	0x100011370
10000837c:	mov	r13, rax
10000837f:	test	rax, rax
100008382:	jne	0x100008187
100008388:	jmp	0x1000083ab
10000838a:	mov	rdx, rbx
10000838d:	add	rdx, 0x50
100008391:	xor	esi, esi
100008393:	cmp	dword ptr [rbp - 0xe0], 0x0
10000839a:	sete	sil
10000839e:	mov	rdi, r15
1000083a1:	call	0x1000195ef
1000083a6:	jmp	0x1000082cd
1000083ab:	lea	rbx, [rip + 0x213f6]
1000083b2:	mov	rdi, qword ptr [rbx]
1000083b5:	test	rdi, rdi
1000083b8:	je	0x1000083c6
1000083ba:	call	0x100019806 ## symbol stub for: _free
1000083bf:	mov	qword ptr [rbx], 0x0
1000083c6:	lea	rax, [rip + 0x2108f]
1000083cd:	cmp	dword ptr [rax], 0x0
1000083d0:	lea	r15, [rip + 0x21351]
1000083d7:	mov	rax, qword ptr [r15]
1000083da:	lea	r12, [rip + 0x22b4f]
1000083e1:	je	0x10000849f
1000083e7:	test	rax, rax
1000083ea:	je	0x10000849f
1000083f0:	mov	rcx, qword ptr [r12]
1000083f4:	lea	rdi, [rip + 0x14ec7] ## literal pool for: "\nzip warning: Not all files were readable\n"
1000083fb:	mov	esi, 0x2a
100008400:	mov	edx, 0x1
100008405:	call	0x10001981e ## symbol stub for: _fwrite
10000840a:	mov	rdi, qword ptr [r12]
10000840e:	lea	rax, [rip + 0x2131b]
100008415:	mov	rdx, qword ptr [rax]
100008418:	sub	rdx, qword ptr [r15]
10000841b:	lea	rsi, [rip + 0x14ecb] ## literal pool for: "  files/entries read:  %lu"
100008422:	xor	eax, eax
100008424:	call	0x1000197ee ## symbol stub for: _fprintf
100008429:	lea	rax, [rip + 0x21310]
100008430:	mov	rdi, qword ptr [rax]
100008433:	lea	rbx, [rbp - 0xa0]
10000843a:	mov	rsi, rbx
10000843d:	call	0x10001638a
100008442:	mov	rdi, qword ptr [r12]
100008446:	lea	rsi, [rip + 0x14ebb] ## literal pool for: " (%s bytes)"
10000844d:	mov	rdx, rbx
100008450:	xor	eax, eax
100008452:	call	0x1000197ee ## symbol stub for: _fprintf
100008457:	mov	rdi, qword ptr [r12]
10000845b:	mov	rdx, qword ptr [r15]
10000845e:	lea	rsi, [rip + 0x14eaf] ## literal pool for: "  skipped:  %lu"
100008465:	xor	eax, eax
100008467:	call	0x1000197ee ## symbol stub for: _fprintf
10000846c:	lea	rax, [rip + 0x212d5]
100008473:	mov	rdi, qword ptr [rax]
100008476:	mov	rsi, rbx
100008479:	call	0x10001638a
10000847e:	mov	rdi, qword ptr [r12]
100008482:	lea	rsi, [rip + 0x14e9b] ## literal pool for: " (%s bytes)\n"
100008489:	mov	rdx, rbx
10000848c:	xor	eax, eax
10000848e:	call	0x1000197ee ## symbol stub for: _fprintf
100008493:	mov	rdi, qword ptr [r12]
100008497:	call	0x1000197d6 ## symbol stub for: _fflush
10000849c:	mov	rax, qword ptr [r15]
10000849f:	lea	rcx, [rip + 0x212ba]
1000084a6:	mov	rcx, qword ptr [rcx]
1000084a9:	test	rcx, rcx
1000084ac:	je	0x100008560
1000084b2:	test	rax, rax
1000084b5:	je	0x100008560
1000084bb:	lea	rdi, [rip + 0x14e00] ## literal pool for: "\nzip warning: Not all files were readable\n"
1000084c2:	mov	esi, 0x2a
1000084c7:	mov	edx, 0x1
1000084cc:	call	0x10001981e ## symbol stub for: _fwrite
1000084d1:	lea	r13, [rip + 0x21288]
1000084d8:	mov	rdi, qword ptr [r13]
1000084dc:	lea	rax, [rip + 0x2124d]
1000084e3:	mov	rdx, qword ptr [rax]
1000084e6:	sub	rdx, qword ptr [r15]
1000084e9:	lea	rsi, [rip + 0x14dfd] ## literal pool for: "  files/entries read:  %lu"
1000084f0:	xor	eax, eax
1000084f2:	call	0x1000197ee ## symbol stub for: _fprintf
1000084f7:	lea	rax, [rip + 0x21242]
1000084fe:	mov	rdi, qword ptr [rax]
100008501:	lea	rbx, [rbp - 0xa0]
100008508:	mov	rsi, rbx
10000850b:	call	0x10001638a
100008510:	mov	rdi, qword ptr [r13]
100008514:	lea	r14, [rip + 0x14ded] ## literal pool for: " (%s bytes)"
10000851b:	mov	rsi, r14
10000851e:	mov	rdx, rbx
100008521:	xor	eax, eax
100008523:	call	0x1000197ee ## symbol stub for: _fprintf
100008528:	mov	rdi, qword ptr [r13]
10000852c:	mov	rdx, qword ptr [r15]
10000852f:	lea	rsi, [rip + 0x14dde] ## literal pool for: "  skipped:  %lu"
100008536:	xor	eax, eax
100008538:	call	0x1000197ee ## symbol stub for: _fprintf
10000853d:	lea	rax, [rip + 0x21204]
100008544:	mov	rdi, qword ptr [rax]
100008547:	mov	rsi, rbx
10000854a:	call	0x10001638a
10000854f:	mov	rdi, qword ptr [r13]
100008553:	mov	rsi, r14
100008556:	mov	rdx, rbx
100008559:	xor	eax, eax
10000855b:	call	0x1000197ee ## symbol stub for: _fprintf
100008560:	cmp	dword ptr [rbp - 0xa4], 0x0
100008567:	je	0x10000858c
100008569:	mov	rcx, qword ptr [r12]
10000856d:	lea	rdi, [rip + 0x14dbd] ## literal pool for: "sd: Get comment if any\n"
100008574:	mov	esi, 0x17
100008579:	mov	edx, 0x1
10000857e:	call	0x10001981e ## symbol stub for: _fwrite
100008583:	mov	rdi, qword ptr [r12]
100008587:	call	0x1000197d6 ## symbol stub for: _fflush
10000858c:	cmp	byte ptr [rip + 0x52a25], 0x1
100008593:	jne	0x1000086a2
100008599:	cmp	qword ptr [rbp - 0x100], 0x0
1000085a1:	jne	0x1000085c7
1000085a3:	mov	rax, qword ptr [rip + 0x1ba6e] ## literal pool symbol address: ___stderrp
1000085aa:	mov	rdi, qword ptr [rax]
1000085ad:	call	0x1000197e2 ## symbol stub for: _fileno
1000085b2:	lea	rsi, [rip + 0x139f7] ## literal pool for: "r"
1000085b9:	mov	edi, eax
1000085bb:	call	0x1000197c4 ## symbol stub for: _fdopen
1000085c0:	mov	qword ptr [rbp - 0x100], rax
1000085c7:	mov	edi, 0x101
1000085cc:	call	0x100019848 ## symbol stub for: _malloc
1000085d1:	test	rax, rax
1000085d4:	je	0x10000916e
1000085da:	mov	r15, rax
1000085dd:	lea	rax, [rip + 0x212f4]
1000085e4:	mov	rbx, qword ptr [rax]
1000085e7:	test	rbx, rbx
1000085ea:	je	0x10000869a
1000085f0:	lea	r14, [rip + 0x14d6c] ## literal pool for: "Enter comment for %s:\n"
1000085f7:	cmp	dword ptr [rbx + 0x88], 0x0
1000085fe:	je	0x10000868a
100008604:	lea	rax, [rip + 0x20e51]
10000860b:	cmp	dword ptr [rax], 0x0
10000860e:	je	0x100008625
100008610:	mov	rdi, qword ptr [r12]
100008614:	mov	rdx, qword ptr [rbx + 0x80]
10000861b:	mov	rsi, r14
10000861e:	xor	eax, eax
100008620:	call	0x1000197ee ## symbol stub for: _fprintf
100008625:	mov	rdi, r15
100008628:	mov	esi, 0x101
10000862d:	mov	rdx, qword ptr [rbp - 0x100]
100008634:	call	0x1000197dc ## symbol stub for: _fgets
100008639:	test	rax, rax
10000863c:	je	0x10000868a
10000863e:	mov	rdi, r15
100008641:	call	0x100019920 ## symbol stub for: _strlen
100008646:	mov	r12, rax
100008649:	lea	rdi, [rax + 0x1]
10000864d:	call	0x100019848 ## symbol stub for: _malloc
100008652:	test	rax, rax
100008655:	je	0x100009166
10000865b:	mov	r13, rax
10000865e:	mov	rdi, rax
100008661:	mov	rsi, r15
100008664:	call	0x100019914 ## symbol stub for: _strcpy
100008669:	cmp	byte ptr [r13 + r12 - 0x1], 0xa
10000866f:	jne	0x10000867a
100008671:	dec	r12
100008674:	mov	byte ptr [r13 + r12], 0x0
10000867a:	mov	qword ptr [rbx + 0x68], r13
10000867e:	mov	word ptr [rbx + 0x2e], r12w
100008683:	lea	r12, [rip + 0x228a6]
10000868a:	mov	rbx, qword ptr [rbx + 0x98]
100008691:	test	rbx, rbx
100008694:	jne	0x1000085f7
10000869a:	mov	rdi, r15
10000869d:	call	0x100019806 ## symbol stub for: _free
1000086a2:	cmp	byte ptr [rip + 0x52927], 0x1
1000086a9:	jne	0x1000088c3
1000086af:	cmp	qword ptr [rbp - 0x100], 0x0
1000086b7:	jne	0x1000086dd
1000086b9:	mov	rax, qword ptr [rip + 0x1b958] ## literal pool symbol address: ___stderrp
1000086c0:	mov	rdi, qword ptr [rax]
1000086c3:	call	0x1000197e2 ## symbol stub for: _fileno
1000086c8:	lea	rsi, [rip + 0x138e1] ## literal pool for: "r"
1000086cf:	mov	edi, eax
1000086d1:	call	0x1000197c4 ## symbol stub for: _fdopen
1000086d6:	mov	qword ptr [rbp - 0x100], rax
1000086dd:	mov	edi, 0x101
1000086e2:	call	0x100019848 ## symbol stub for: _malloc
1000086e7:	test	rax, rax
1000086ea:	je	0x10000916e
1000086f0:	mov	r15, rax
1000086f3:	lea	rax, [rip + 0x20d62]
1000086fa:	cmp	dword ptr [rax], 0x0
1000086fd:	lea	rbx, [rip + 0x2283c]
100008704:	je	0x10000875a
100008706:	cmp	word ptr [rbx], 0x0
10000870a:	je	0x10000875a
10000870c:	mov	rsi, qword ptr [r12]
100008710:	lea	rdi, [rip + 0x14c63] ## literal pool for: "current zip file comment is:\n"
100008717:	call	0x1000197fa ## symbol stub for: _fputs
10000871c:	lea	r14, [rip + 0x211c5]
100008723:	mov	rdi, qword ptr [r14]
100008726:	movzx	edx, word ptr [rbx]
100008729:	mov	rcx, qword ptr [r12]
10000872d:	mov	esi, 0x1
100008732:	call	0x10001981e ## symbol stub for: _fwrite
100008737:	mov	rdi, qword ptr [r14]
10000873a:	movzx	eax, word ptr [rbx]
10000873d:	cmp	byte ptr [rax + rdi - 0x1], 0xa
100008742:	je	0x100008755
100008744:	mov	rsi, qword ptr [r12]
100008748:	mov	edi, 0xa
10000874d:	call	0x100019896 ## symbol stub for: _putc
100008752:	mov	rdi, qword ptr [r14]
100008755:	call	0x100019806 ## symbol stub for: _free
10000875a:	mov	edi, 0x1
10000875f:	call	0x100019848 ## symbol stub for: _malloc
100008764:	lea	r13, [rip + 0x2117d]
10000876b:	mov	qword ptr [r13], rax
10000876f:	test	rax, rax
100008772:	je	0x1000093ac
100008778:	mov	byte ptr [rax], 0x0
10000877b:	lea	rax, [rip + 0x20cda]
100008782:	cmp	dword ptr [rax], 0x0
100008785:	je	0x10000879d
100008787:	lea	rax, [rip + 0x227a2]
10000878e:	mov	rsi, qword ptr [rax]
100008791:	lea	rdi, [rip + 0x14c1d] ## literal pool for: "enter new zip file comment (end with .):\n"
100008798:	call	0x1000197fa ## symbol stub for: _fputs
10000879d:	mov	rdi, r15
1000087a0:	mov	esi, 0x101
1000087a5:	mov	rdx, qword ptr [rbp - 0x100]
1000087ac:	call	0x1000197dc ## symbol stub for: _fgets
1000087b1:	test	rax, rax
1000087b4:	je	0x1000088a1
1000087ba:	lea	r14, [rip + 0x14c1e] ## literal pool for: ".\n"
1000087c1:	mov	rdi, r15
1000087c4:	mov	rsi, r14
1000087c7:	call	0x10001990e ## symbol stub for: _strcmp
1000087cc:	test	eax, eax
1000087ce:	je	0x1000088a1
1000087d4:	mov	rdi, r15
1000087d7:	call	0x100019920 ## symbol stub for: _strlen
1000087dc:	mov	rbx, rax
1000087df:	dec	eax
1000087e1:	cdqe
1000087e3:	cmp	byte ptr [r15 + rax], 0xa
1000087e8:	jne	0x1000087f6
1000087ea:	movsxd	rbx, ebx
1000087ed:	mov	byte ptr [r15 + rbx - 0x1], 0x0
1000087f3:	dec	rbx
1000087f6:	mov	r12, qword ptr [r13]
1000087fa:	cmp	byte ptr [r12], 0x0
1000087ff:	je	0x10000880f
100008801:	mov	rdi, r12
100008804:	call	0x100019920 ## symbol stub for: _strlen
100008809:	add	rax, 0x3
10000880d:	jmp	0x100008814
10000880f:	mov	eax, 0x1
100008814:	movsxd	rdi, ebx
100008817:	add	rdi, rax
10000881a:	call	0x100019848 ## symbol stub for: _malloc
10000881f:	test	rax, rax
100008822:	je	0x100009166
100008828:	mov	rbx, rax
10000882b:	cmp	byte ptr [r12], 0x0
100008830:	je	0x10000885d
100008832:	mov	rdi, rbx
100008835:	mov	rsi, r12
100008838:	call	0x100019914 ## symbol stub for: _strcpy
10000883d:	mov	rdi, rbx
100008840:	call	0x100019920 ## symbol stub for: _strlen
100008845:	mov	word ptr [rbx + rax], 0xa0d
10000884b:	mov	byte ptr [rbx + rax + 0x2], 0x0
100008850:	mov	rdi, rbx
100008853:	mov	rsi, r15
100008856:	call	0x100019902 ## symbol stub for: _strcat
10000885b:	jmp	0x100008877
10000885d:	cmp	byte ptr [r15], 0x0
100008861:	mov	rsi, r15
100008864:	lea	rax, [rip + 0x14b77] ## literal pool for: "\015\n"
10000886b:	cmove	rsi, rax
10000886f:	mov	rdi, rbx
100008872:	call	0x100019914 ## symbol stub for: _strcpy
100008877:	mov	rdi, qword ptr [r13]
10000887b:	call	0x100019806 ## symbol stub for: _free
100008880:	mov	qword ptr [r13], rbx
100008884:	mov	rdi, r15
100008887:	mov	esi, 0x101
10000888c:	mov	rdx, qword ptr [rbp - 0x100]
100008893:	call	0x1000197dc ## symbol stub for: _fgets
100008898:	test	rax, rax
10000889b:	jne	0x1000087c1
1000088a1:	mov	rdi, r15
1000088a4:	call	0x100019806 ## symbol stub for: _free
1000088a9:	mov	rdi, qword ptr [r13]
1000088ad:	call	0x100019920 ## symbol stub for: _strlen
1000088b2:	lea	rcx, [rip + 0x22687]
1000088b9:	mov	word ptr [rcx], ax
1000088bc:	lea	r12, [rip + 0x2266d]
1000088c3:	lea	rax, [rip + 0x20e46]
1000088ca:	cmp	dword ptr [rax], 0x0
1000088cd:	je	0x1000088ea
1000088cf:	mov	rsi, qword ptr [r12]
1000088d3:	mov	edi, 0xa
1000088d8:	call	0x100019896 ## symbol stub for: _putc
1000088dd:	lea	rax, [rip + 0x20fe8]
1000088e4:	mov	dword ptr [rax], 0x0
1000088ea:	cmp	dword ptr [rbp - 0xa4], 0x0
1000088f1:	je	0x100008916
1000088f3:	mov	rcx, qword ptr [r12]
1000088f7:	lea	rdi, [rip + 0x14ae7] ## literal pool for: "sd: Writing central directory\n"
1000088fe:	mov	esi, 0x1e
100008903:	mov	edx, 0x1
100008908:	call	0x10001981e ## symbol stub for: _fwrite
10000890d:	mov	rdi, qword ptr [r12]
100008911:	call	0x1000197d6 ## symbol stub for: _fflush
100008916:	lea	rax, [rip + 0x2261b]
10000891d:	mov	rax, qword ptr [rax]
100008920:	mov	qword ptr [rbp - 0x108], rax
100008927:	lea	rax, [rip + 0x20faa]
10000892e:	mov	rbx, qword ptr [rax]
100008931:	xor	r12d, r12d
100008934:	test	rbx, rbx
100008937:	je	0x1000089b0
100008939:	xor	r15d, r15d
10000893c:	xor	r13d, r13d
10000893f:	cmp	dword ptr [rbx + 0x88], 0x0
100008946:	je	0x100008989
100008948:	mov	rdi, rbx
10000894b:	call	0x10000e4ec
100008950:	test	eax, eax
100008952:	jne	0x100009067
100008958:	movzx	eax, word ptr [rbx + 0x28]
10000895c:	movzx	ecx, word ptr [rbx + 0x2c]
100008960:	add	rcx, rax
100008963:	movzx	eax, word ptr [rbx + 0x2e]
100008967:	add	rax, rcx
10000896a:	lea	rdx, [rip + 0x225c7]
100008971:	mov	rcx, qword ptr [rdx]
100008974:	lea	rax, [rcx + rax + 0x2e]
100008979:	mov	qword ptr [rdx], rax
10000897c:	add	r13, qword ptr [rbx + 0x20]
100008980:	add	r12, qword ptr [rbx + 0x18]
100008984:	inc	r15
100008987:	jmp	0x10000899d
100008989:	lea	rax, [rip + 0x20d24]
100008990:	mov	eax, dword ptr [rax]
100008992:	lea	rcx, [rip + 0x20de7]
100008999:	or	eax, dword ptr [rcx]
10000899b:	je	0x100008948
10000899d:	mov	rbx, qword ptr [rbx + 0x98]
1000089a4:	test	rbx, rbx
1000089a7:	jne	0x10000893f
1000089a9:	test	r15, r15
1000089ac:	jne	0x1000089c9
1000089ae:	jmp	0x1000089b3
1000089b0:	xor	r13d, r13d
1000089b3:	lea	rdi, [rip + 0x143f2] ## literal pool for: "zip file empty"
1000089ba:	lea	rsi, [rip + 0x11df6] ## literal pool for: ""
1000089c1:	call	0x100003e67
1000089c6:	xor	r15d, r15d
1000089c9:	lea	rax, [rip + 0x20cdc]
1000089d0:	cmp	dword ptr [rax], 0x0
1000089d3:	je	0x100008a45
1000089d5:	lea	rax, [rip + 0x22554]
1000089dc:	mov	rax, qword ptr [rax]
1000089df:	mov	qword ptr [rbp - 0xe0], rax
1000089e6:	lea	rbx, [rip + 0x13859] ## literal pool for: "u"
1000089ed:	mov	rdi, r13
1000089f0:	xor	esi, esi
1000089f2:	mov	rdx, rbx
1000089f5:	call	0x100016116
1000089fa:	mov	r14, rax
1000089fd:	mov	rdi, r12
100008a00:	xor	esi, esi
100008a02:	mov	rdx, rbx
100008a05:	call	0x100016116
100008a0a:	mov	rbx, rax
100008a0d:	mov	rdi, r13
100008a10:	mov	rsi, r12
100008a13:	call	0x100010362
100008a18:	lea	rsi, [rip + 0x149e5] ## literal pool for: "total bytes=%s, compressed=%s -> %d%% savings\n"
100008a1f:	mov	rdi, qword ptr [rbp - 0xe0]
100008a26:	mov	rdx, r14
100008a29:	mov	rcx, rbx
100008a2c:	mov	r8d, eax
100008a2f:	xor	eax, eax
100008a31:	call	0x1000197ee ## symbol stub for: _fprintf
100008a36:	lea	rax, [rip + 0x224f3]
100008a3d:	mov	rdi, qword ptr [rax]
100008a40:	call	0x1000197d6 ## symbol stub for: _fflush
100008a45:	lea	rax, [rip + 0x20d0c]
100008a4c:	cmp	dword ptr [rax], 0x0
100008a4f:	je	0x100008ac1
100008a51:	lea	rax, [rip + 0x20d08]
100008a58:	mov	rax, qword ptr [rax]
100008a5b:	mov	qword ptr [rbp - 0xe0], rax
100008a62:	lea	rbx, [rip + 0x137dd] ## literal pool for: "u"
100008a69:	mov	rdi, r13
100008a6c:	xor	esi, esi
100008a6e:	mov	rdx, rbx
100008a71:	call	0x100016116
100008a76:	mov	r14, rax
100008a79:	mov	rdi, r12
100008a7c:	xor	esi, esi
100008a7e:	mov	rdx, rbx
100008a81:	call	0x100016116
100008a86:	mov	rbx, rax
100008a89:	mov	rdi, r13
100008a8c:	mov	rsi, r12
100008a8f:	call	0x100010362
100008a94:	lea	rsi, [rip + 0x14969] ## literal pool for: "total bytes=%s, compressed=%s -> %d%% savings\n"
100008a9b:	mov	rdi, qword ptr [rbp - 0xe0]
100008aa2:	mov	rdx, r14
100008aa5:	mov	rcx, rbx
100008aa8:	mov	r8d, eax
100008aab:	xor	eax, eax
100008aad:	call	0x1000197ee ## symbol stub for: _fprintf
100008ab2:	lea	rax, [rip + 0x20ca7]
100008ab9:	mov	rdi, qword ptr [rax]
100008abc:	call	0x1000197d6 ## symbol stub for: _fflush
100008ac1:	lea	rax, [rip + 0x22470]
100008ac8:	mov	rbx, qword ptr [rax]
100008acb:	mov	r14, qword ptr [rbp - 0x108]
100008ad2:	sub	rbx, r14
100008ad5:	cmp	dword ptr [rbp - 0xa4], 0x0
100008adc:	lea	r12, [rip + 0x2244d]
100008ae3:	je	0x100008b08
100008ae5:	mov	rcx, qword ptr [r12]
100008ae9:	lea	rdi, [rip + 0x14943] ## literal pool for: "sd: Writing end of central directory\n"
100008af0:	mov	esi, 0x25
100008af5:	mov	edx, 0x1
100008afa:	call	0x10001981e ## symbol stub for: _fwrite
100008aff:	mov	rdi, qword ptr [r12]
100008b03:	call	0x1000197d6 ## symbol stub for: _fflush
100008b08:	lea	rax, [rip + 0x22431]
100008b0f:	movzx	ecx, word ptr [rax]
100008b12:	lea	rax, [rip + 0x20dcf]
100008b19:	mov	r8, qword ptr [rax]
100008b1c:	mov	rdi, r15
100008b1f:	mov	rsi, rbx
100008b22:	mov	rdx, r14
100008b25:	call	0x10000ea0e
100008b2a:	test	eax, eax
100008b2c:	lea	rbx, [rip + 0x20cc5]
100008b33:	jne	0x100009067
100008b39:	mov	rdi, qword ptr [rbx]
100008b3c:	call	0x1000197be ## symbol stub for: _fclose
100008b41:	test	eax, eax
100008b43:	lea	r15, [rip + 0x20cce]
100008b4a:	jne	0x100009386
100008b50:	mov	qword ptr [rbx], 0x0
100008b57:	lea	rbx, [rip + 0x20ca2]
100008b5e:	mov	rdi, qword ptr [rbx]
100008b61:	test	rdi, rdi
100008b64:	je	0x100008b72
100008b66:	call	0x1000197be ## symbol stub for: _fclose
100008b6b:	mov	qword ptr [rbx], 0x0
100008b72:	call	0x1000179f8
100008b77:	cmp	byte ptr [rip + 0x52446], 0x1
100008b7e:	jne	0x100008b8f
100008b80:	lea	rax, [rip + 0x20c69]
100008b87:	mov	rdi, qword ptr [rax]
100008b8a:	call	0x100009fdb
100008b8f:	lea	r14, [rip + 0x223c2]
100008b96:	mov	rdi, qword ptr [r14]
100008b99:	lea	rsi, [rip + 0x13962] ## literal pool for: "-"
100008ba0:	call	0x10001990e ## symbol stub for: _strcmp
100008ba5:	test	eax, eax
100008ba7:	sete	al
100008baa:	mov	ecx, dword ptr [rbp - 0xa8]
100008bb0:	or	cl, al
100008bb2:	jne	0x100008c0c
100008bb4:	cmp	dword ptr [rbp - 0xa4], 0x0
100008bbb:	je	0x100008be0
100008bbd:	mov	rcx, qword ptr [r12]
100008bc1:	lea	rdi, [rip + 0x14891] ## literal pool for: "sd: Replacing old zip file\n"
100008bc8:	mov	esi, 0x1b
100008bcd:	mov	edx, 0x1
100008bd2:	call	0x10001981e ## symbol stub for: _fwrite
100008bd7:	mov	rdi, qword ptr [r12]
100008bdb:	call	0x1000197d6 ## symbol stub for: _fflush
100008be0:	mov	rdi, qword ptr [r15]
100008be3:	lea	r15, [rip + 0x20c06]
100008bea:	mov	rsi, qword ptr [r15]
100008bed:	call	0x1000121be
100008bf2:	mov	rsi, qword ptr [r15]
100008bf5:	test	eax, eax
100008bf7:	jne	0x1000093bd
100008bfd:	mov	rdi, rsi
100008c00:	call	0x100019806 ## symbol stub for: _free
100008c05:	lea	r15, [rip + 0x20c0c]
100008c0c:	lea	rax, [rip + 0x20bdd]
100008c13:	mov	qword ptr [rax], 0x0
100008c1a:	lea	rax, [rip + 0x20bff]
100008c21:	mov	ebx, dword ptr [rax]
100008c23:	test	ebx, ebx
100008c25:	je	0x100008c44
100008c27:	mov	rdi, qword ptr [r14]
100008c2a:	lea	rsi, [rip + 0x138d1] ## literal pool for: "-"
100008c31:	call	0x10001990e ## symbol stub for: _strcmp
100008c36:	test	eax, eax
100008c38:	je	0x100008c44
100008c3a:	mov	rdi, qword ptr [r15]
100008c3d:	mov	esi, ebx
100008c3f:	call	0x100012441
100008c44:	mov	rdi, qword ptr [r14]
100008c47:	lea	rsi, [rip + 0x138b4] ## literal pool for: "-"
100008c4e:	call	0x10001990e ## symbol stub for: _strcmp
100008c53:	test	eax, eax
100008c55:	je	0x100008c83
100008c57:	cmp	dword ptr [rbp - 0xa4], 0x0
100008c5e:	je	0x100008c83
100008c60:	mov	rcx, qword ptr [r12]
100008c64:	lea	rdi, [rip + 0x1480a] ## literal pool for: "sd: Setting file type\n"
100008c6b:	mov	esi, 0x16
100008c70:	mov	edx, 0x1
100008c75:	call	0x10001981e ## symbol stub for: _fwrite
100008c7a:	mov	rdi, qword ptr [r12]
100008c7e:	call	0x1000197d6 ## symbol stub for: _fflush
100008c83:	lea	r12, [rip + 0x20ad6]
100008c8a:	mov	rdi, qword ptr [r12]
100008c8e:	test	rdi, rdi
100008c91:	mov	r15, qword ptr [rbp - 0xd8]
100008c98:	je	0x100008d6e
100008c9e:	lea	rax, [rip + 0x20a8b]
100008ca5:	mov	rdx, qword ptr [rax]
100008ca8:	lea	rsi, [rip + 0x14130] ## literal pool for: "\nTotal %ld entries ("
100008caf:	xor	eax, eax
100008cb1:	call	0x1000197ee ## symbol stub for: _fprintf
100008cb6:	lea	r14, [rip + 0x20a83]
100008cbd:	mov	rsi, qword ptr [r14]
100008cc0:	lea	rbx, [rip + 0x20a89]
100008cc7:	mov	rcx, qword ptr [r12]
100008ccb:	cmp	rsi, qword ptr [rbx]
100008cce:	jne	0x100008cd5
100008cd0:	mov	rdi, rcx
100008cd3:	jmp	0x100008d18
100008cd5:	lea	rdi, [rip + 0x147b0] ## literal pool for: "planned "
100008cdc:	mov	esi, 0x8
100008ce1:	mov	edx, 0x1
100008ce6:	call	0x10001981e ## symbol stub for: _fwrite
100008ceb:	mov	rdi, qword ptr [r12]
100008cef:	mov	rsi, qword ptr [rbx]
100008cf2:	call	0x10001631e
100008cf7:	mov	rcx, qword ptr [r12]
100008cfb:	lea	rdi, [rip + 0x14793] ## literal pool for: " bytes, actual "
100008d02:	mov	esi, 0xf
100008d07:	mov	edx, 0x1
100008d0c:	call	0x10001981e ## symbol stub for: _fwrite
100008d11:	mov	rdi, qword ptr [r12]
100008d15:	mov	rsi, qword ptr [r14]
100008d18:	call	0x10001631e
100008d1d:	mov	rcx, qword ptr [r12]
100008d21:	lea	rdi, [rip + 0x140cc] ## literal pool for: " bytes)"
100008d28:	mov	esi, 0x7
100008d2d:	mov	edx, 0x1
100008d32:	call	0x10001981e ## symbol stub for: _fwrite
100008d37:	lea	rbx, [rbp - 0xa0]
100008d3e:	mov	rdi, rbx
100008d41:	call	0x10001994a ## symbol stub for: _time
100008d46:	mov	rdi, rbx
100008d49:	call	0x10001983c ## symbol stub for: _localtime
100008d4e:	mov	rbx, qword ptr [r12]
100008d52:	mov	rdi, rax
100008d55:	call	0x100019794 ## symbol stub for: _asctime
100008d5a:	lea	rsi, [rip + 0x1409b] ## literal pool for: "\nDone %s"
100008d61:	mov	rdi, rbx
100008d64:	mov	rdx, rax
100008d67:	xor	eax, eax
100008d69:	call	0x1000197ee ## symbol stub for: _fprintf
100008d6e:	mov	rdi, r15
100008d71:	call	0x100019806 ## symbol stub for: _free
100008d76:	mov	eax, dword ptr [rbp - 0xc0]
100008d7c:	test	eax, eax
100008d7e:	mov	ebx, 0x12
100008d83:	cmove	ebx, eax
100008d86:	mov	edi, ebx
100008d88:	jmp	0x1000072d7
100008d8d:	lea	rax, [rip + 0x221c4]
100008d94:	mov	rdi, qword ptr [rax]
100008d97:	call	0x100009fdb
100008d9c:	jmp	0x1000072d3
100008da1:	lea	rdi, [rip + 0x1421d] ## literal pool for: "Would Add/Update:\n"
100008da8:	jmp	0x100006add
100008dad:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
100008db2:	lea	rbx, [rip + 0x20d77]
100008db9:	lea	rcx, [rip + 0x13959] ## literal pool for: "no such option ID: %ld"
100008dc0:	mov	edx, 0x13f1
100008dc5:	mov	rdi, rbx
100008dc8:	mov	esi, 0x0
100008dcd:	mov	r8, rax
100008dd0:	xor	eax, eax
100008dd2:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100008dd7:	mov	edi, 0x10
100008ddc:	mov	rsi, rbx
100008ddf:	call	0x1000037b0
100008de4:	lea	rsi, [rip + 0x136d4] ## literal pool for: "-mm not supported, Must_Match is -MM"
100008deb:	mov	edi, 0x10
100008df0:	call	0x1000037b0
100008df5:	mov	rsi, qword ptr [r12]
100008df9:	jmp	0x100008e05
100008dfb:	mov	rcx, qword ptr [rip + 0x20886]
100008e02:	mov	rsi, qword ptr [rcx]
100008e05:	mov	edi, eax
100008e07:	call	0x1000037b0
100008e0c:	lea	rsi, [rip + 0x1389e] ## literal pool for: "was processing arguments"
100008e13:	jmp	0x1000093b3
100008e18:	lea	rsi, [rip + 0x13871] ## literal pool for: "can't use -- before archive name"
100008e1f:	jmp	0x100008deb
100008e21:	lea	rsi, [rip + 0x1376b] ## literal pool for: "invalid date entered for -tt option - use mmddyyyy or yyyy-mm-dd"
100008e28:	jmp	0x100008deb
100008e2a:	mov	r8, qword ptr [rbp - 0xb0]
100008e31:	lea	rbx, [rip + 0x20cf8]
100008e38:	lea	rcx, [rip + 0x1362d] ## literal pool for: "option -ds (--dot-size) has bad size:  '%s'"
100008e3f:	jmp	0x100008f27
100008e44:	lea	rsi, [rip + 0x13896] ## literal pool for: "can't read input (-) and filenames (-@) both from stdin"
100008e4b:	jmp	0x100008deb
100008e4d:	mov	r8, qword ptr [rbp - 0xb0]
100008e54:	lea	rbx, [rip + 0x20cd5]
100008e5b:	lea	rcx, [rip + 0x13636] ## literal pool for: "dot size must be at least 32 KB:  '%s'"
100008e62:	jmp	0x100008f27
100008e67:	mov	rsi, qword ptr [rbp - 0xb0]
100008e6e:	lea	rdi, [rip + 0x13767] ## literal pool for: "bzip2"
100008e75:	xor	edx, edx
100008e77:	mov	ecx, 0x1
100008e7c:	call	0x1000165d3
100008e81:	test	eax, eax
100008e83:	jne	0x100009000
100008e89:	lea	rdi, [rip + 0x13777] ## literal pool for: "valid compression methods are:  store, deflate)"
100008e90:	lea	rsi, [rip + 0x11920] ## literal pool for: ""
100008e97:	call	0x100003e67
100008e9c:	mov	rsi, qword ptr [rbp - 0xb0]
100008ea3:	lea	rdi, [rip + 0x1378d] ## literal pool for: "unknown compression method found:  "
100008eaa:	call	0x100003e67
100008eaf:	mov	rdi, qword ptr [rbp - 0xb0]
100008eb6:	call	0x100019806 ## symbol stub for: _free
100008ebb:	lea	rsi, [rip + 0x13799] ## literal pool for: "Option -Z (--compression-method):  unknown method"
100008ec2:	jmp	0x100008deb
100008ec7:	mov	r8, qword ptr [rbp - 0xb0]
100008ece:	lea	rbx, [rip + 0x20c5b]
100008ed5:	lea	rcx, [rip + 0x13628] ## literal pool for: "bad split size:  '%s'"
100008edc:	mov	edx, 0x13f1
100008ee1:	mov	rdi, rbx
100008ee4:	mov	esi, 0x0
100008ee9:	jmp	0x100008dd0
100008eee:	lea	rsi, [rip + 0x1365e] ## literal pool for: "invalid date entered for -t option - use mmddyyyy or yyyy-mm-dd"
100008ef5:	jmp	0x100008deb
100008efa:	lea	rsi, [rip + 0x135e3] ## literal pool for: "do not specify both -r and -R"
100008f01:	jmp	0x100008deb
100008f06:	lea	rsi, [rip + 0x13547] ## literal pool for: "specify just one action"
100008f0d:	jmp	0x100008deb
100008f12:	mov	r8, qword ptr [rbp - 0xb0]
100008f19:	lea	rbx, [rip + 0x20c10]
100008f20:	lea	rcx, [rip + 0x135f3] ## literal pool for: "minimum split size is 64 KB:  '%s'"
100008f27:	mov	edx, 0x13f1
100008f2c:	mov	rdi, rbx
100008f2f:	mov	esi, 0x0
100008f34:	xor	eax, eax
100008f36:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100008f3b:	mov	rdi, qword ptr [rbp - 0xb0]
100008f42:	call	0x100019806 ## symbol stub for: _free
100008f47:	jmp	0x100008dd7
100008f4c:	mov	rcx, qword ptr [r15]
100008f4f:	lea	rdi, [rip + 0x13871] ## literal pool for: "command line:\n"
100008f56:	mov	esi, 0xe
100008f5b:	mov	edx, 0x1
100008f60:	call	0x10001981e ## symbol stub for: _fwrite
100008f65:	mov	rax, qword ptr [rbp - 0xf0]
100008f6c:	mov	rdx, qword ptr [rax]
100008f6f:	mov	rsi, qword ptr [r15]
100008f72:	test	rdx, rdx
100008f75:	je	0x100008fae
100008f77:	mov	ebx, 0x8
100008f7c:	lea	r14, [rip + 0x13853] ## literal pool for: "'%s'  "
100008f83:	mov	rdi, rsi
100008f86:	mov	rsi, r14
100008f89:	xor	eax, eax
100008f8b:	call	0x1000197ee ## symbol stub for: _fprintf
100008f90:	mov	rax, qword ptr [rbp - 0xf0]
100008f97:	mov	rdx, qword ptr [rax + rbx]
100008f9b:	add	rbx, 0x8
100008f9f:	lea	rax, [rip + 0x21f8a]
100008fa6:	mov	rsi, qword ptr [rax]
100008fa9:	test	rdx, rdx
100008fac:	jne	0x100008f83
100008fae:	mov	edi, 0xa
100008fb3:	call	0x1000197f4 ## symbol stub for: _fputc
100008fb8:	lea	rsi, [rip + 0x13163] ## literal pool for: "show command line"
100008fbf:	mov	edi, 0x9
100008fc4:	call	0x1000037b0
100008fc9:	lea	rsi, [rip + 0x13908] ## literal pool for: "archive name must end in .zip for splits"
100008fd0:	jmp	0x100008deb
100008fd5:	call	0x1000097d8
100008fda:	jmp	0x100008fed
100008fdc:	lea	rsi, [rip + 0x1376d] ## literal pool for: "zero length password not allowed"
100008fe3:	jmp	0x100008deb
100008fe8:	call	0x10000984a
100008fed:	xor	edi, edi
100008fef:	call	0x1000197b8 ## symbol stub for: _exit
100008ff4:	mov	rax, qword ptr [rip + 0x2068d]
100008ffb:	jmp	0x1000091d1
100009000:	lea	rsi, [rip + 0x135db] ## literal pool for: "Compression method bzip2 not enabled"
100009007:	mov	edi, 0x13
10000900c:	call	0x1000037b0
100009011:	lea	rsi, [rip + 0x14263] ## literal pool for: "was adding files to zip file"
100009018:	jmp	0x1000093b3
10000901d:	lea	rdi, [rip + 0x11793] ## literal pool for: ""
100009024:	mov	esi, 0x1
100009029:	call	0x100003c73
10000902e:	mov	r8, qword ptr [r15]
100009031:	lea	rbx, [rip + 0x20af8]
100009038:	lea	rcx, [rip + 0x14117] ## literal pool for: "was zipping %s"
10000903f:	mov	edx, 0x13f1
100009044:	mov	rdi, rbx
100009047:	mov	esi, 0x0
10000904c:	xor	eax, eax
10000904e:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100009053:	mov	edi, r14d
100009056:	jmp	0x100008ddc
10000905b:	lea	rsi, [rip + 0x12665] ## literal pool for: "stderr is not a tty"
100009062:	jmp	0x100008deb
100009067:	lea	rcx, [rip + 0x20782]
10000906e:	jmp	0x100008e02
100009073:	lea	rsi, [rip + 0x138b5] ## literal pool for: "can't use --diff (-DF) with fix (-F or -FF)"
10000907a:	jmp	0x100008deb
10000907f:	lea	rsi, [rip + 0x138d5] ## literal pool for: "-U (--copy) requires -O (--out)"
100009086:	jmp	0x100008deb
10000908b:	lea	rdi, [rip + 0x138e9] ## literal pool for: "fix options -F and -FF require --out:\n"
100009092:	lea	rsi, [rip + 0x13909] ## literal pool for: "                     zip -F indamagedarchive --out outfixedarchive"
100009099:	call	0x100003e67
10000909e:	lea	rsi, [rip + 0x13940] ## literal pool for: "fix options require --out"
1000090a5:	jmp	0x100008deb
1000090aa:	lea	rsi, [rip + 0x1394e] ## literal pool for: "no other actions allowed when fixing archive (-F or -FF)"
1000090b1:	jmp	0x100008deb
1000090b6:	lea	rsi, [rip + 0x1397b] ## literal pool for: "-DF (--diff) requires -O (--out)"
1000090bd:	jmp	0x100008deb
1000090c2:	lea	rsi, [rip + 0x13990] ## literal pool for: "can't use --diff (-DF) with -d or -U"
1000090c9:	jmp	0x100008deb
1000090ce:	lea	rsi, [rip + 0x13a06] ## literal pool for: "missing suffix list"
1000090d5:	jmp	0x100008deb
1000090da:	lea	rsi, [rip + 0x13b6d] ## literal pool for: "can't use -d, -f, -u, -U, or -g with filesync -FS\n"
1000090e1:	jmp	0x100008deb
1000090e6:	lea	rsi, [rip + 0x13b94] ## literal pool for: "can't use -d, -f, -u, -U, or -g on stdout\n"
1000090ed:	jmp	0x100008deb
1000090f2:	mov	rsi, qword ptr [r12]
1000090f6:	mov	edi, 0xa
1000090fb:	call	0x1000037b0
100009100:	lea	rcx, [rip + 0x21e51]
100009107:	jmp	0x100008e02
10000910c:	cmp	eax, 0x10
10000910f:	jne	0x1000091de
100009115:	lea	rsi, [rip + 0x13db9] ## literal pool for: "cannot repeat names in zip file"
10000911c:	jmp	0x100008deb
100009121:	mov	r8, qword ptr [r13]
100009125:	lea	rbx, [rip + 0x20a04]
10000912c:	lea	rcx, [rip + 0x13745] ## literal pool for: "could not open logfile '%s'"
100009133:	jmp	0x100008edc
100009138:	mov	r8, qword ptr [r15]
10000913b:	lea	rbx, [rip + 0x209ee]
100009142:	lea	rcx, [rip + 0x137b8] ## literal pool for: "--out path must be different than in path: %s"
100009149:	jmp	0x100008edc
10000914e:	lea	rsi, [rip + 0x13a8c] ## literal pool for: "can't create split archive while fixing or adjusting\n"
100009155:	jmp	0x100008deb
10000915a:	lea	rsi, [rip + 0x13ab6] ## literal pool for: "can't create split archive with -d or -g or on stdout\n"
100009161:	jmp	0x100008deb
100009166:	mov	rdi, r15
100009169:	call	0x100019806 ## symbol stub for: _free
10000916e:	lea	rsi, [rip + 0x141d4] ## literal pool for: "was reading comment lines"
100009175:	jmp	0x1000093b3
10000917a:	lea	rsi, [rip + 0x135af] ## literal pool for: "was getting encryption password"
100009181:	jmp	0x1000093b3
100009186:	lea	rsi, [rip + 0x135e4] ## literal pool for: "was verifying encryption password"
10000918d:	jmp	0x1000093b3
100009192:	lea	rsi, [rip + 0x13bcc] ## literal pool for: "allocating temp filename"
100009199:	jmp	0x1000093b3
10000919e:	lea	rsi, [rip + 0x138d9] ## literal pool for: "nothing to select from"
1000091a5:	jmp	0x100008deb
1000091aa:	mov	rsi, qword ptr [r12]
1000091ae:	jmp	0x1000093b3
1000091b3:	xor	eax, eax
1000091b5:	test	ebx, ebx
1000091b7:	setne	al
1000091ba:	lea	edi, [4*rax + 0xa]
1000091c1:	mov	rsi, qword ptr [r12]
1000091c5:	call	0x1000037b0
1000091ca:	lea	rax, [rip + 0x21d87]
1000091d1:	mov	rsi, qword ptr [rax]
1000091d4:	mov	edi, 0x12
1000091d9:	call	0x1000037b0
1000091de:	lea	rsi, [rip + 0x13d10] ## literal pool for: "was processing list of files"
1000091e5:	jmp	0x100008e05
1000091ea:	lea	rsi, [rip + 0x13311] ## literal pool for: "-"
1000091f1:	jmp	0x100008e05
1000091f6:	lea	rsi, [rip + 0x138ab] ## literal pool for: "can't use - and -@ together"
1000091fd:	jmp	0x100008deb
100009202:	lea	rdi, [rip + 0x115ae] ## literal pool for: ""
100009209:	mov	esi, 0x1
10000920e:	call	0x100003c73
100009213:	mov	r8, qword ptr [r12 + 0x50]
100009218:	lea	rbx, [rip + 0x20911]
10000921f:	lea	rcx, [rip + 0x13f30] ## literal pool for: "was zipping %s"
100009226:	mov	edx, 0x13f1
10000922b:	mov	rdi, rbx
10000922e:	mov	esi, 0x0
100009233:	xor	eax, eax
100009235:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000923a:	jmp	0x100009363
10000923f:	mov	ebx, eax
100009241:	lea	rdi, [rip + 0x12493] ## literal pool for: "new zip file left as: "
100009248:	call	0x100003e67
10000924d:	mov	rdi, qword ptr [r12]
100009251:	call	0x100019806 ## symbol stub for: _free
100009256:	mov	qword ptr [r12], 0x0
10000925e:	lea	rsi, [rip + 0x13b56] ## literal pool for: "was replacing the original zip file"
100009265:	mov	edi, ebx
100009267:	call	0x1000037b0
10000926c:	lea	rsi, [rip + 0x135f4] ## literal pool for: "logpath"
100009273:	jmp	0x1000093b3
100009278:	lea	rsi, [rip + 0x13c2a] ## literal pool for: "-R"
10000927f:	jmp	0x100008e05
100009284:	lea	rsi, [rip + 0x13277] ## literal pool for: "-"
10000928b:	jmp	0x1000091d4
100009290:	mov	ebx, eax
100009292:	mov	r8, qword ptr [r12 + 0x80]
10000929a:	jmp	0x1000092a1
10000929c:	mov	ebx, eax
10000929e:	mov	r8, qword ptr [r15]
1000092a1:	lea	r14, [rip + 0x20888]
1000092a8:	lea	rcx, [rip + 0x13eb6] ## literal pool for: "was copying %s"
1000092af:	mov	edx, 0x13f1
1000092b4:	mov	rdi, r14
1000092b7:	mov	esi, 0x0
1000092bc:	xor	eax, eax
1000092be:	call	0x100019770 ## symbol stub for: ___sprintf_chk
1000092c3:	mov	edi, ebx
1000092c5:	mov	rsi, r14
1000092c8:	call	0x1000037b0
1000092cd:	lea	rsi, [rip + 0x13da9] ## literal pool for: "could not open archive to read"
1000092d4:	jmp	0x100008fbf
1000092d9:	lea	rsi, [rip + 0x13bc9] ## literal pool for: "-R"
1000092e0:	jmp	0x1000091d4
1000092e5:	mov	r15d, eax
1000092e8:	mov	r8, qword ptr [r12 + 0x80]
1000092f0:	lea	rbx, [rip + 0x20839]
1000092f7:	lea	rcx, [rip + 0x13e67] ## literal pool for: "was copying %s"
1000092fe:	mov	edx, 0x13f1
100009303:	mov	rdi, rbx
100009306:	mov	esi, 0x0
10000930b:	xor	eax, eax
10000930d:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100009312:	mov	edi, r15d
100009315:	jmp	0x100008ddc
10000931a:	lea	rsi, [rip + 0x13ed2] ## literal pool for: "user requested abort"
100009321:	jmp	0x100008fbf
100009326:	mov	r8, qword ptr [r12 + 0x80]
10000932e:	lea	rbx, [rip + 0x207fb]
100009335:	lea	rcx, [rip + 0x13e29] ## literal pool for: "was copying %s"
10000933c:	mov	edx, 0x13f1
100009341:	mov	rdi, rbx
100009344:	mov	esi, 0x0
100009349:	xor	eax, eax
10000934b:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100009350:	lea	rdi, [rip + 0x13eb1] ## literal pool for: "(try -F to attempt to fix)"
100009357:	lea	rsi, [rip + 0x11459] ## literal pool for: ""
10000935e:	call	0x100003e67
100009363:	mov	edi, r15d
100009366:	jmp	0x100008ddc
10000936b:	lea	rsi, [rip + 0x13eb1] ## literal pool for: "could not seek in output file"
100009372:	mov	edi, r15d
100009375:	call	0x1000037b0
10000937a:	lea	rax, [rip + 0x2046f]
100009381:	mov	rsi, qword ptr [rax]
100009384:	jmp	0x1000093b3
100009386:	movzx	eax, byte ptr [rbp - 0xa8]
10000938d:	lea	edi, [4*rax + 0xa]
100009394:	lea	rax, [rip + 0x20455]
10000939b:	jmp	0x10000940c
10000939d:	lea	rax, [rip + 0x2044c]
1000093a4:	mov	rsi, qword ptr [rax]
1000093a7:	jmp	0x1000090f6
1000093ac:	lea	rsi, [rip + 0x13fe5] ## literal pool for: "was setting comments to null"
1000093b3:	mov	edi, 0x4
1000093b8:	call	0x1000037b0
1000093bd:	mov	ebx, eax
1000093bf:	lea	rdi, [rip + 0x12315] ## literal pool for: "new zip file left as: "
1000093c6:	call	0x100003e67
1000093cb:	mov	rdi, qword ptr [r15]
1000093ce:	call	0x100019806 ## symbol stub for: _free
1000093d3:	mov	qword ptr [r15], 0x0
1000093da:	jmp	0x10000925e
1000093df:	lea	rsi, [rip + 0x13c62] ## literal pool for: "cannot grow split archive"
1000093e6:	jmp	0x100008deb
1000093eb:	lea	rax, [rip + 0x20406]
1000093f2:	mov	rdi, qword ptr [rax]
1000093f5:	call	0x1000197d0 ## symbol stub for: _ferror
1000093fa:	xor	ecx, ecx
1000093fc:	test	eax, eax
1000093fe:	setne	cl
100009401:	lea	edi, [rcx + 8*rcx + 0x2]
100009405:	lea	rax, [rip + 0x21b4c]
10000940c:	mov	rsi, qword ptr [rax]
10000940f:	call	0x1000037b0
100009414:	test	rax, rax
100009417:	jne	0x10000944b
100009419:	cmp	byte ptr [rip + 0x51b9c], 0x0
100009420:	jne	0x100009554
100009426:	test	byte ptr [rip + 0x51b93], 0x1
10000942d:	jne	0x100009554
100009433:	lea	rax, [rip + 0x2027e]
10000943a:	mov	eax, dword ptr [rax]
10000943c:	lea	rcx, [rip + 0x2026d]
100009443:	or	eax, dword ptr [rcx]
100009445:	jne	0x100009554
10000944b:	cmp	dword ptr [rbp - 0xc4], 0x0
100009452:	jle	0x100009594
100009458:	lea	rax, [rip + 0x20241]
10000945f:	cmp	dword ptr [rax], 0x0
100009462:	je	0x100009594
100009468:	lea	rax, [rip + 0x20491]
10000946f:	cmp	dword ptr [rax], 0x0
100009472:	jne	0x100009594
100009478:	lea	rax, [rip + 0x206b1]
10000947f:	movabs	rcx, 0x70697a203a797274
100009489:	mov	qword ptr [rax], rcx
10000948c:	mov	byte ptr [rax + 0x8], 0x0
100009490:	cmp	dword ptr [rbp - 0xc4], 0x2
100009497:	jl	0x1000094de
100009499:	mov	r12d, dword ptr [rbp - 0xc4]
1000094a0:	mov	ebx, 0x1
1000094a5:	lea	r14, [rip + 0x20684]
1000094ac:	lea	r15, [rip + 0x13a7d] ## literal pool for: " "
1000094b3:	mov	edx, 0x13f1
1000094b8:	mov	rdi, r14
1000094bb:	mov	rsi, r15
1000094be:	call	0x10001977c ## symbol stub for: ___strcat_chk
1000094c3:	mov	rcx, qword ptr [rbp - 0xf0]
1000094ca:	mov	rsi, qword ptr [rcx + 8*rbx]
1000094ce:	mov	rdi, rax
1000094d1:	call	0x100019902 ## symbol stub for: _strcat
1000094d6:	inc	rbx
1000094d9:	cmp	r12, rbx
1000094dc:	jne	0x1000094b3
1000094de:	lea	rdi, [rip + 0x2064b]
1000094e5:	lea	rsi, [rip + 0x13b18] ## literal pool for: " . -i"
1000094ec:	mov	edx, 0x13f1
1000094f1:	call	0x10001977c ## symbol stub for: ___strcat_chk
1000094f6:	mov	eax, dword ptr [rbp - 0xc4]
1000094fc:	cmp	eax, dword ptr [rbp - 0x110]
100009502:	jge	0x10000954b
100009504:	movsxd	rbx, dword ptr [rbp - 0xc4]
10000950b:	lea	r14, [rip + 0x2061e]
100009512:	lea	r15, [rip + 0x13a17] ## literal pool for: " "
100009519:	mov	edx, 0x13f1
10000951e:	mov	rdi, r14
100009521:	mov	rsi, r15
100009524:	call	0x10001977c ## symbol stub for: ___strcat_chk
100009529:	mov	rcx, qword ptr [rbp - 0xf0]
100009530:	mov	rsi, qword ptr [rcx + 8*rbx]
100009534:	mov	rdi, rax
100009537:	call	0x100019902 ## symbol stub for: _strcat
10000953c:	inc	rbx
10000953f:	movsxd	rax, dword ptr [rbp - 0x110]
100009546:	cmp	rbx, rax
100009549:	jl	0x100009519
10000954b:	lea	rsi, [rip + 0x205de]
100009552:	jmp	0x10000959e
100009554:	lea	rax, [rip + 0x219fd]
10000955b:	mov	rsi, qword ptr [rax]
10000955e:	mov	edi, 0xd
100009563:	call	0x1000037b0
100009568:	mov	rsi, qword ptr [rbx]
10000956b:	mov	edi, 0xf
100009570:	call	0x1000037b0
100009575:	cmp	eax, 0xa
100009578:	jne	0x100009588
10000957a:	lea	rcx, [rip + 0x2026f]
100009581:	mov	qword ptr [rbp - 0x150], rcx
100009588:	mov	rcx, qword ptr [rbp - 0x150]
10000958f:	jmp	0x100008e02
100009594:	lea	rax, [rip + 0x219bd]
10000959b:	mov	rsi, qword ptr [rax]
10000959e:	mov	edi, 0xc
1000095a3:	call	0x1000037b0
1000095a8:	cmp	al, -0x50
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000095ac:	jmp	[rdi + 8*rdi - 0x530001]
	.byte 0xff #bad opcode
1000095b4:	jmp	[rdi + 8*rdi - 0x530001]
	.byte 0xff #bad opcode
1000095bc:	jmp	[rdi + 8*rdi - 0x530001]
	.byte 0xff #bad opcode
1000095c4:	jmp	[rdi + 8*rdi - 0x530001]
	.byte 0xff #bad opcode
1000095cc:	jmp	[rdi + 8*rdi - 0x7f501]
1000095d3:	dec	dword ptr [rdx]
1000095d5:	clc
	.byte 0xff #bad opcode
1000095d7:	dec	dword ptr [rdx]
1000095d9:	clc
	.byte 0xff #bad opcode
1000095db:	dec	dword ptr [rdx]
1000095dd:	clc
	.byte 0xff #bad opcode
1000095df:	dec	dword ptr [rdx]
1000095e1:	clc
	.byte 0xff #bad opcode
1000095e3:	jmp	[rbx + 0xfffffb9]
1000095e9:	mov	cl, -0x1
	.byte 0xff #bad opcode
1000095ec:	out	dx, eax
1000095ed:	scasb	al, byte ptr es:[rdi]
	.byte 0xff #bad opcode
1000095ef:	dec	dword ptr [rdx]
1000095f1:	clc
	.byte 0xff #bad opcode
1000095f3:	dec	dword ptr [rdx]
1000095f5:	clc
	.byte 0xff #bad opcode
1000095f7:	jmp	rsi
1000095f9:	mov	cl, -0x1
1000095fb:	dec	dword ptr [rdx]
1000095fd:	clc
	.byte 0xff #bad opcode
1000095ff:	call	qword ptr [rdi - 0x4e]
	.byte 0xff #bad opcode
100009603:	dec	dword ptr [rdx]
100009605:	clc
	.byte 0xff #bad opcode
100009607:	jmp	[rbx + 0xaffffb9]
10000960d:	clc
	.byte 0xff #bad opcode
10000960f:	dec	dword ptr [rbx + 0xaffffae]
100009615:	clc
	.byte 0xff #bad opcode
100009617:	jmp	qword ptr [rcx + 0xaffffba]
10000961d:	clc
	.byte 0xff #bad opcode
10000961f:	dec	dword ptr [rdx]
100009621:	clc
	.byte 0xff #bad opcode
100009623:	jmp	[rcx + 4*rsi - 0x4c790001]
	.byte 0xff #bad opcode
10000962b:	dec	dword ptr [rdx]
10000962d:	clc
	.byte 0xff #bad opcode
10000962f:	call	qword ptr [rbx - 0x4c]
	.byte 0xff #bad opcode
100009633:	dec	dword ptr [rdx]
100009635:	clc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009638:	jnp	0x1000095ea
	.byte 0xff #bad opcode
10000963b:	call	[rdi - 0x50]
	.byte 0xff #bad opcode
10000963f:	dec	dword ptr [rdx]
100009641:	clc
	.byte 0xff #bad opcode
100009643:	dec	dword ptr [rdx]
100009645:	clc
	.byte 0xff #bad opcode
100009647:	jmp	qword ptr [rbp + 0xaffffb4]
10000964d:	clc
	.byte 0xff #bad opcode
10000964f:	call	qword ptr [rdi + 0xaffffae]
100009655:	clc
	.byte 0xff #bad opcode
100009657:	dec	dword ptr [rdx]
100009659:	clc
	.byte 0xff #bad opcode
10000965b:	dec	dword ptr [rdx]
10000965d:	clc
	.byte 0xff #bad opcode
10000965f:	dec	dword ptr [rdx]
100009661:	clc
	.byte 0xff #bad opcode
100009663:	dec	dword ptr [rdx]
100009665:	clc
	.byte 0xff #bad opcode
100009667:	dec	dword ptr [rdx]
100009669:	clc
	.byte 0xff #bad opcode
10000966b:	dec	dword ptr [rdx]
10000966d:	clc
	.byte 0xff #bad opcode
10000966f:	jmp	qword ptr [rdi - 0x4c]
	.byte 0xff #bad opcode
100009673:	inc	dword ptr [rsp + 4*rsi - 0x4de00001]
	.byte 0xff #bad opcode
10000967b:	jmp	qword ptr [rdi]
10000967d:	mov	cl, -0x1
	.byte 0xff #bad opcode
100009680:	cmp	esi, dword ptr [rdx - 0x50770001]
	.byte 0xff #bad opcode
100009687:	jmp	[rbx + 0x5fffffb9]
10000968d:	scasb	al, byte ptr es:[rdi]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009690:	jg	0x100009640
	.byte 0xff #bad opcode
100009693:	inc	dword ptr [rdi - 0x52]
	.byte 0xff #bad opcode
100009697:	call	[rcx - 0x3a00004c]
10000969d:	mov	bl, -0x1
	.byte 0xff #bad opcode
1000096a0:	fsubr	qword ptr [rdi - 0x4e9d0001]
	.byte 0xff #bad opcode
1000096a7:	jmp	qword ptr [rdx - 0x4a]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000096ac:	fnsave	dword ptr [rbx - 0x51cc0001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000096b4:	sti
1000096b5:	scasb	al, byte ptr es:[rdi]
	.byte 0xff #bad opcode
1000096b7:	jmp	qword ptr [rdx + 4*rsi - 0x4a960001]
	.byte 0xff #bad opcode
1000096bf:	inc	dword ptr [rsi - 0x53]
	.byte 0xff #bad opcode
1000096c3:	dec	dword ptr [rdx]
1000096c5:	clc
	.byte 0xff #bad opcode
1000096c7:	jmp	[rsi + 4*rbp - 0x1]
1000096cb:	call	qword ptr [rbx - 0x52]
	.byte 0xff #bad opcode
1000096cf:	call	[rcx + 0x1ffffaf]
1000096d5:	lodsb	al, byte ptr [rsi]
	.byte 0xff #bad opcode
1000096d7:	inc	dword ptr [rdx - 0x50]
	.byte 0xff #bad opcode
1000096db:	inc	esi
1000096dd:	mov	al, -0x1
1000096df:	push	qword ptr [rax + 4*rsi - 0x1]
	.byte 0xff #bad opcode
1000096e4:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000096e8:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000096ec:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000096f0:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000096f4:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000096f8:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000096fc:	fdivrp	st(6), st
	.byte 0xff #bad opcode
1000096ff:	inc	dword ptr [rbx - 0x4f]
	.byte 0xff #bad opcode
100009703:	call	[rip + 0x5bffffb2]
100009709:	scasd	eax, dword ptr es:[rdi]
	.byte 0xff #bad opcode
10000970b:	dec	edi
10000970d:	scasb	al, byte ptr es:[rdi]
	.byte 0xff #bad opcode
10000970f:	push	qword ptr [rcx - 0x72000051]
100009715:	mov	dl, -0x1
100009717:	call	[rip - 0x27000050]
10000971d:	mov	dl, -0x1
10000971f:	call	qword ptr [rcx - 0x47]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009724:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009728:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000972c:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009730:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009734:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009738:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000973c:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009740:	fdivrp	st(6), st
	.byte 0xff #bad opcode
100009743:	call	[rbx - 0x50]
	.byte 0xff #bad opcode
100009747:	jmp	rsp
100009749:	mov	dl, -0x1
10000974b:	dec	edx
10000974d:	scasd	eax, dword ptr es:[rdi]
	.byte 0xff #bad opcode
10000974f:	jmp	qword ptr [rbx + 4*rsi - 0x1]
100009753:	call	qword ptr [rax]
100009755:	idiv	edi
100009757:	jmp	qword ptr [rcx + 0x27ffffae]
10000975d:	scasd	eax, dword ptr es:[rdi]
	.byte 0xff #bad opcode
10000975f:	push	qword ptr [rdi]
100009761:	mov	cl, -0x1
100009763:	inc	ebx
100009765:	scasb	al, byte ptr es:[rdi]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009768:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000976c:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009770:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009774:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009778:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000977c:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009780:	call	0xac009733
100009785:	mov	al, -0x1
100009787:	call	[rdi - 0x4f]
	.byte 0xff #bad opcode
10000978b:	call	qword ptr [rdx + 0x79ffffae]
100009791:	scasb	al, byte ptr es:[rdi]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009794:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100009798:	fdivrp	st(6), st
	.byte 0xff #bad opcode
10000979b:	jmp	qword ptr [rbp - 0x6700004e]
1000097a1:	mov	bl, -0x1
1000097a3:	push	qword ptr [rsi]
1000097a5:	mov	dl, -0x1
	.byte 0xff #bad opcode
1000097a8:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000097ac:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000097b0:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000097b4:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000097b8:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000097bc:	fdivrp	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000097c0:	fdivrp	st(6), st
	.byte 0xff #bad opcode
1000097c3:	call	[rdx]
1000097c5:	lodsb	al, byte ptr [rsi]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000097c8:	fdivrp	st(6), st
	.byte 0xff #bad opcode
1000097cb:	jmp	qword ptr [rbp - 0x21000051]
1000097d1:	idiv	bh
1000097d3:	push	rdi
1000097d5:	scasb	al, byte ptr es:[rdi]
	.byte 0xff #bad opcode
1000097d7:	call	qword ptr [rbp + 0x48]
1000097da:	mov	ebp, esp
1000097dc:	push	r15
1000097de:	push	r14
1000097e0:	push	r12
1000097e2:	push	rbx
1000097e3:	mov	rdi, qword ptr [rip + 0x1eae6]
1000097ea:	lea	rsi, [rip + 0x141ed] ## literal pool for: "zip"
1000097f1:	xor	eax, eax
1000097f3:	call	0x100019890 ## symbol stub for: _printf
1000097f8:	mov	edi, 0xa
1000097fd:	call	0x10001989c ## symbol stub for: _putchar
100009802:	lea	r15, [rip + 0x1a837]
100009809:	lea	r14, [rip + 0x141d2] ## literal pool for: "3.0"
100009810:	lea	r12, [rip + 0x141cf] ## literal pool for: "July 5th 2008"
100009817:	xor	ebx, ebx
100009819:	mov	rdi, qword ptr [rbx + r15]
10000981d:	mov	rsi, r14
100009820:	mov	rdx, r12
100009823:	xor	eax, eax
100009825:	call	0x100019890 ## symbol stub for: _printf
10000982a:	mov	edi, 0xa
10000982f:	call	0x10001989c ## symbol stub for: _putchar
100009834:	add	rbx, 0x8
100009838:	cmp	rbx, 0xa8
10000983f:	jne	0x100009819
100009841:	pop	rbx
100009842:	pop	r12
100009844:	pop	r14
100009846:	pop	r15
100009848:	pop	rbp
100009849:	ret
10000984a:	push	rbp
10000984b:	mov	rbp, rsp
10000984e:	push	r15
100009850:	push	r14
100009852:	push	r13
100009854:	push	r12
100009856:	push	rbx
100009857:	push	rax
100009858:	mov	rdi, qword ptr [rip + 0x1ea71]
10000985f:	lea	rsi, [rip + 0x14178] ## literal pool for: "zip"
100009866:	xor	eax, eax
100009868:	call	0x100019890 ## symbol stub for: _printf
10000986d:	mov	edi, 0xa
100009872:	call	0x10001989c ## symbol stub for: _putchar
100009877:	lea	r12, [rip + 0x1ea62]
10000987e:	lea	r14, [rip + 0x142df] ## literal pool for: "Zip"
100009885:	lea	r15, [rip + 0x14156] ## literal pool for: "3.0"
10000988c:	lea	r13, [rip + 0x14153] ## literal pool for: "July 5th 2008"
100009893:	xor	ebx, ebx
100009895:	mov	rdi, qword ptr [rbx + r12]
100009899:	mov	rsi, r14
10000989c:	mov	rdx, r15
10000989f:	mov	rcx, r13
1000098a2:	xor	eax, eax
1000098a4:	call	0x100019890 ## symbol stub for: _printf
1000098a9:	mov	edi, 0xa
1000098ae:	call	0x10001989c ## symbol stub for: _putchar
1000098b3:	add	rbx, 0x8
1000098b7:	cmp	rbx, 0x38
1000098bb:	jne	0x100009895
1000098bd:	call	0x100017531
1000098c2:	lea	rdi, [rip + 0x1429f] ## literal pool for: "Zip special compilation options:"
1000098c9:	call	0x1000198a2 ## symbol stub for: _puts
1000098ce:	lea	r14, [rip + 0x1a81b]
1000098d5:	lea	r15, [rip + 0x142ad] ## literal pool for: "\t%s\n"
1000098dc:	xor	ebx, ebx
1000098de:	mov	rsi, qword ptr [rbx + r14]
1000098e2:	mov	rdi, r15
1000098e5:	xor	eax, eax
1000098e7:	call	0x100019890 ## symbol stub for: _printf
1000098ec:	add	rbx, 0x8
1000098f0:	cmp	rbx, 0x30
1000098f4:	jne	0x1000098de
1000098f6:	lea	rdi, [rip + 0x14291] ## literal pool for: "\t[encryption, version %d.%d%s of %s] (modified for Zip 3)\n\n"
1000098fd:	lea	rcx, [rip + 0x10eb3] ## literal pool for: ""
100009904:	lea	r8, [rip + 0x142bf] ## literal pool for: "05 Jan 2007"
10000990b:	xor	ebx, ebx
10000990d:	mov	esi, 0x2
100009912:	mov	edx, 0x5b
100009917:	xor	eax, eax
100009919:	call	0x100019890 ## symbol stub for: _printf
10000991e:	lea	r14, [rip + 0x1e9fb]
100009925:	mov	rdi, qword ptr [rbx + r14]
100009929:	call	0x1000198a2 ## symbol stub for: _puts
10000992e:	add	rbx, 0x8
100009932:	cmp	rbx, 0x38
100009936:	jne	0x100009925
100009938:	lea	rdi, [rip + 0x14297] ## literal pool for: "\nZip environment options:"
10000993f:	call	0x1000198a2 ## symbol stub for: _puts
100009944:	mov	r15b, 0x1
100009947:	xor	eax, eax
100009949:	lea	r12, [rip + 0x1a7e0]
100009950:	lea	r13, [rip + 0x142a4] ## literal pool for: "[none]"
100009957:	lea	r14, [rip + 0x14292] ## literal pool for: "%16s:  %s\n"
10000995e:	mov	rbx, qword ptr [r12 + 8*rax]
100009962:	mov	rdi, rbx
100009965:	call	0x10001982a ## symbol stub for: _getenv
10000996a:	mov	rdx, r13
10000996d:	test	rax, rax
100009970:	je	0x10000997d
100009972:	cmp	byte ptr [rax], 0x0
100009975:	mov	rdx, r13
100009978:	je	0x10000997d
10000997a:	mov	rdx, rax
10000997d:	mov	rdi, r14
100009980:	mov	rsi, rbx
100009983:	xor	eax, eax
100009985:	call	0x100019890 ## symbol stub for: _printf
10000998a:	mov	eax, 0x1
10000998f:	test	r15b, 0x1
100009993:	mov	r15d, 0x0
100009999:	jne	0x10000995e
10000999b:	add	rsp, 0x8
10000999f:	pop	rbx
1000099a0:	pop	r12
1000099a2:	pop	r13
1000099a4:	pop	r14
1000099a6:	pop	r15
1000099a8:	pop	rbp
1000099a9:	ret
1000099aa:	push	rbp
1000099ab:	mov	rbp, rsp
1000099ae:	call	0x1000169b3
1000099b3:	lea	rax, [rip + 0x21576]
1000099ba:	mov	rsi, qword ptr [rax]
1000099bd:	mov	edi, 0xa
1000099c2:	call	0x100019896 ## symbol stub for: _putc
1000099c7:	lea	rsi, [rip + 0x14234] ## literal pool for: "aborting"
1000099ce:	mov	edi, 0x9
1000099d3:	call	0x1000037b0
1000099d8:	push	rbp
1000099d9:	mov	rbp, rsp
1000099dc:	push	r15
1000099de:	push	r14
1000099e0:	push	r13
1000099e2:	push	r12
1000099e4:	push	rbx
1000099e5:	sub	rsp, 0x28
1000099e9:	mov	r15d, edi
1000099ec:	lea	r14, [rip + 0x21565]
1000099f3:	cmp	byte ptr [rip + 0x515c6], 0x1
1000099fa:	jne	0x100009abb
100009a00:	mov	rdi, qword ptr [r14]
100009a03:	test	rdi, rdi
100009a06:	je	0x100009abb
100009a0c:	lea	rsi, [rip + 0x12aef] ## literal pool for: "-"
100009a13:	call	0x10001990e ## symbol stub for: _strcmp
100009a18:	test	eax, eax
100009a1a:	je	0x100009abb
100009a20:	lea	rax, [rip + 0x1feb1]
100009a27:	mov	rbx, qword ptr [rax]
100009a2a:	test	rbx, rbx
100009a2d:	je	0x100009a8f
100009a2f:	mov	dword ptr [rbp - 0x2c], r15d
100009a33:	lea	r12, [rbp - 0x40]
100009a37:	xor	r15d, r15d
100009a3a:	lea	r13, [rbp - 0x48]
100009a3e:	mov	rax, qword ptr [rbx + 0x70]
100009a42:	movzx	ecx, word ptr [rbx + 0x28]
100009a46:	cmp	byte ptr [rcx + rax - 0x1], 0x2f
100009a4b:	je	0x100009a71
100009a4d:	mov	rdi, rbx
100009a50:	mov	rsi, r13
100009a53:	call	0x10000f91a
100009a58:	test	al, 0x1
100009a5a:	jne	0x100009a62
100009a5c:	mov	rax, qword ptr [rbx + 0x8]
100009a60:	jmp	0x100009a6a
100009a62:	mov	rdi, r12
100009a65:	call	0x10001207e
100009a6a:	cmp	r15, rax
100009a6d:	cmovb	r15, rax
100009a71:	mov	rbx, qword ptr [rbx + 0x98]
100009a78:	test	rbx, rbx
100009a7b:	jne	0x100009a3e
100009a7d:	test	r15, r15
100009a80:	je	0x100009aa4
100009a82:	mov	rdi, qword ptr [r14]
100009a85:	mov	rsi, r15
100009a88:	call	0x100016fff
100009a8d:	jmp	0x100009ab7
100009a8f:	lea	rdi, [rip + 0x14175] ## literal pool for: "zip file is empty, can't make it as old as latest entry"
100009a96:	lea	rsi, [rip + 0x10d1a] ## literal pool for: ""
100009a9d:	call	0x100003e67
100009aa2:	jmp	0x100009abb
100009aa4:	lea	rdi, [rip + 0x14198] ## literal pool for: "zip file has only directories, can't make it as old as latest entry"
100009aab:	lea	rsi, [rip + 0x10d05] ## literal pool for: ""
100009ab2:	call	0x100003e67
100009ab7:	mov	r15d, dword ptr [rbp - 0x2c]
100009abb:	lea	rbx, [rip + 0x1fcee]
100009ac2:	mov	rdi, qword ptr [rbx]
100009ac5:	test	rdi, rdi
100009ac8:	je	0x100009ad6
100009aca:	call	0x100019806 ## symbol stub for: _free
100009acf:	mov	qword ptr [rbx], 0x0
100009ad6:	mov	rdi, qword ptr [r14]
100009ad9:	test	rdi, rdi
100009adc:	je	0x100009aea
100009ade:	call	0x100019806 ## symbol stub for: _free
100009ae3:	mov	qword ptr [r14], 0x0
100009aea:	lea	rbx, [rip + 0x1fd0f]
100009af1:	mov	rdi, qword ptr [rbx]
100009af4:	test	rdi, rdi
100009af7:	je	0x100009b05
100009af9:	call	0x1000197be ## symbol stub for: _fclose
100009afe:	mov	qword ptr [rbx], 0x0
100009b05:	lea	rbx, [rip + 0x1fcfc]
100009b0c:	mov	rdi, qword ptr [rbx]
100009b0f:	test	rdi, rdi
100009b12:	je	0x100009b20
100009b14:	call	0x100019806 ## symbol stub for: _free
100009b19:	mov	qword ptr [rbx], 0x0
100009b20:	lea	rbx, [rip + 0x1fcf1]
100009b27:	mov	rdi, qword ptr [rbx]
100009b2a:	test	rdi, rdi
100009b2d:	je	0x100009b3b
100009b2f:	call	0x100019806 ## symbol stub for: _free
100009b34:	mov	qword ptr [rbx], 0x0
100009b3b:	lea	rbx, [rip + 0x1fda6]
100009b42:	mov	rdi, qword ptr [rbx]
100009b45:	test	rdi, rdi
100009b48:	je	0x100009b56
100009b4a:	call	0x100019806 ## symbol stub for: _free
100009b4f:	mov	qword ptr [rbx], 0x0
100009b56:	lea	rax, [rip + 0x1fb47]
100009b5d:	cmp	dword ptr [rax], 0x0
100009b60:	je	0x100009b6b
100009b62:	call	0x10000faa9
100009b67:	test	eax, eax
100009b69:	jne	0x100009b82
100009b6b:	call	0x100003ae9
100009b70:	mov	eax, r15d
100009b73:	add	rsp, 0x28
100009b77:	pop	rbx
100009b78:	pop	r12
100009b7a:	pop	r13
100009b7c:	pop	r14
100009b7e:	pop	r15
100009b80:	pop	rbp
100009b81:	ret
100009b82:	lea	rsi, [rip + 0x140fe] ## literal pool for: "was deleting moved files and directories"
100009b89:	mov	edi, eax
100009b8b:	call	0x1000037b0
100009b90:	push	rbp
100009b91:	mov	rbp, rsp
100009b94:	push	r15
100009b96:	push	r14
100009b98:	push	r13
100009b9a:	push	r12
100009b9c:	push	rbx
100009b9d:	push	rax
100009b9e:	mov	r14d, edi
100009ba1:	lea	eax, [r14 - 0x52]
100009ba5:	cmp	eax, 0x26
100009ba8:	ja	0x100009d93
100009bae:	movabs	rcx, 0x4000800001
100009bb8:	bt	rcx, rax
100009bbc:	jae	0x100009d93
100009bc2:	mov	r15, rsi
100009bc5:	test	rsi, rsi
100009bc8:	je	0x100009d9c
100009bce:	cmp	byte ptr [r15], 0x40
100009bd2:	jne	0x100009cdd
100009bd8:	cmp	byte ptr [r15 + 0x1], 0x0
100009bdd:	je	0x100009dad
100009be3:	lea	rdi, [r15 + 0x1]
100009be7:	lea	rsi, [rip + 0x123c2] ## literal pool for: "r"
100009bee:	call	0x1000197e8 ## symbol stub for: _fopen
100009bf3:	test	rax, rax
100009bf6:	je	0x100009dbe
100009bfc:	mov	r12, rax
100009bff:	mov	rdi, rax
100009c02:	call	0x100011290
100009c07:	test	rax, rax
100009c0a:	je	0x100009cc7
100009c10:	mov	rbx, rax
100009c13:	lea	r13, [rip + 0x1fce6]
100009c1a:	mov	edi, 0x18
100009c1f:	call	0x100019848 ## symbol stub for: _malloc
100009c24:	test	rax, rax
100009c27:	je	0x100009d82
100009c2d:	mov	rcx, qword ptr [rip + 0x1fa44]
100009c34:	add	rcx, 0x10
100009c38:	cmp	qword ptr [rip + 0x1fa30], 0x0
100009c40:	lea	rdx, [rip + 0x1fa29]
100009c47:	cmove	rcx, rdx
100009c4b:	mov	qword ptr [rcx], rax
100009c4e:	mov	qword ptr [rip + 0x1fa23], rax
100009c55:	mov	rdi, rbx
100009c58:	xor	esi, esi
100009c5a:	xor	edx, edx
100009c5c:	call	0x100016ec0
100009c61:	mov	r15, rax
100009c64:	mov	rdi, rbx
100009c67:	call	0x100019806 ## symbol stub for: _free
100009c6c:	test	r15, r15
100009c6f:	je	0x100009c95
100009c71:	mov	rdi, r15
100009c74:	call	0x100016fcc
100009c79:	mov	rcx, qword ptr [rip + 0x1f9f8]
100009c80:	mov	qword ptr [rcx + 0x8], rax
100009c84:	mov	rdi, r15
100009c87:	call	0x100019806 ## symbol stub for: _free
100009c8c:	mov	rax, qword ptr [rip + 0x1f9e5]
100009c93:	jmp	0x100009ca4
100009c95:	mov	rax, qword ptr [rip + 0x1f9dc]
100009c9c:	mov	qword ptr [rax + 0x8], 0x0
100009ca4:	mov	byte ptr [rax], r14b
100009ca7:	inc	dword ptr [r13]
100009cab:	mov	qword ptr [rax + 0x10], 0x0
100009cb3:	mov	rdi, r12
100009cb6:	call	0x100011290
100009cbb:	mov	rbx, rax
100009cbe:	test	rax, rax
100009cc1:	jne	0x100009c1a
100009cc7:	mov	rdi, r12
100009cca:	add	rsp, 0x8
100009cce:	pop	rbx
100009ccf:	pop	r12
100009cd1:	pop	r13
100009cd3:	pop	r14
100009cd5:	pop	r15
100009cd7:	pop	rbp
100009cd8:	jmp	0x1000197be ## symbol stub for: _fclose
100009cdd:	mov	edi, 0x18
100009ce2:	call	0x100019848 ## symbol stub for: _malloc
100009ce7:	test	rax, rax
100009cea:	je	0x100009d82
100009cf0:	lea	rcx, [rip + 0x1f979]
100009cf7:	mov	rdx, qword ptr [rip + 0x1f97a]
100009cfe:	add	rdx, 0x10
100009d02:	cmp	qword ptr [rip + 0x1f966], 0x0
100009d0a:	cmove	rdx, rcx
100009d0e:	mov	qword ptr [rdx], rax
100009d11:	mov	qword ptr [rip + 0x1f960], rax
100009d18:	mov	rdi, r15
100009d1b:	xor	esi, esi
100009d1d:	xor	edx, edx
100009d1f:	call	0x100016ec0
100009d24:	test	rax, rax
100009d27:	je	0x100009d50
100009d29:	mov	rbx, rax
100009d2c:	mov	rdi, rax
100009d2f:	call	0x100016fcc
100009d34:	mov	rcx, qword ptr [rip + 0x1f93d]
100009d3b:	mov	qword ptr [rcx + 0x8], rax
100009d3f:	mov	rdi, rbx
100009d42:	call	0x100019806 ## symbol stub for: _free
100009d47:	mov	rax, qword ptr [rip + 0x1f92a]
100009d4e:	jmp	0x100009d5f
100009d50:	mov	rax, qword ptr [rip + 0x1f921]
100009d57:	mov	qword ptr [rax + 0x8], 0x0
100009d5f:	mov	byte ptr [rax], r14b
100009d62:	lea	rcx, [rip + 0x1fb97]
100009d69:	inc	dword ptr [rcx]
100009d6b:	mov	qword ptr [rax + 0x10], 0x0
100009d73:	add	rsp, 0x8
100009d77:	pop	rbx
100009d78:	pop	r12
100009d7a:	pop	r13
100009d7c:	pop	r14
100009d7e:	pop	r15
100009d80:	pop	rbp
100009d81:	ret
100009d82:	lea	rsi, [rip + 0x17e2e] ## literal pool for: "adding filter"
100009d89:	mov	edi, 0x4
100009d8e:	call	0x1000037b0
100009d93:	lea	rsi, [rip + 0x17dc1] ## literal pool for: "bad flag to add_filter"
100009d9a:	jmp	0x100009da3
100009d9c:	lea	rsi, [rip + 0x17dcf] ## literal pool for: "null pattern to add_filter"
100009da3:	mov	edi, 0x5
100009da8:	call	0x1000037b0
100009dad:	lea	rsi, [rip + 0x17dd9] ## literal pool for: "missing file after @"
100009db4:	mov	edi, 0x10
100009db9:	call	0x1000037b0
100009dbe:	lea	rbx, [rip + 0x1fd6b]
100009dc5:	lea	rcx, [rip + 0x17dd6] ## literal pool for: "%c pattern file '%s'"
100009dcc:	mov	edx, 0x13f1
100009dd1:	mov	rdi, rbx
100009dd4:	mov	esi, 0x0
100009dd9:	mov	r8d, r14d
100009ddc:	mov	r9, r15
100009ddf:	xor	eax, eax
100009de1:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100009de6:	mov	edi, 0x12
100009deb:	mov	rsi, rbx
100009dee:	call	0x1000037b0
100009df3:	push	rbp
100009df4:	mov	rbp, rsp
100009df7:	push	r15
100009df9:	push	r14
100009dfb:	push	r13
100009dfd:	push	r12
100009dff:	push	rbx
100009e00:	push	rax
100009e01:	lea	rax, [rip + 0x1faf8]
100009e08:	mov	edi, dword ptr [rax]
100009e0a:	test	edi, edi
100009e0c:	je	0x100009eac
100009e12:	inc	edi
100009e14:	shl	rdi, 0x4
100009e18:	call	0x100019848 ## symbol stub for: _malloc
100009e1d:	lea	r15, [rip + 0x1fad4]
100009e24:	mov	qword ptr [r15], rax
100009e27:	test	rax, rax
100009e2a:	je	0x100009ec9
100009e30:	mov	r12, qword ptr [rip + 0x1f839]
100009e37:	test	r12, r12
100009e3a:	je	0x100009eba
100009e3c:	mov	ebx, 0x8
100009e41:	mov	r13d, 0x1
100009e47:	lea	r14, [rip + 0x1fab6]
100009e4e:	movsx	eax, byte ptr [r12]
100009e53:	mov	rcx, r14
100009e56:	cmp	eax, 0x69
100009e59:	je	0x100009e67
100009e5b:	cmp	eax, 0x52
100009e5e:	jne	0x100009e69
100009e60:	lea	rcx, [rip + 0x1faa1]
100009e67:	inc	dword ptr [rcx]
100009e69:	mov	rcx, qword ptr [r15]
100009e6c:	mov	dword ptr [rcx + rbx], eax
100009e6f:	mov	rax, qword ptr [r12 + 0x8]
100009e74:	mov	qword ptr [rcx + rbx - 0x8], rax
100009e79:	mov	rdi, qword ptr [rip + 0x1f7f0]
100009e80:	mov	r12, qword ptr [rdi + 0x10]
100009e84:	call	0x100019806 ## symbol stub for: _free
100009e89:	mov	qword ptr [rip + 0x1f7e0], r12
100009e90:	lea	rax, [rip + 0x1fa69]
100009e97:	mov	eax, dword ptr [rax]
100009e99:	cmp	r13, rax
100009e9c:	jae	0x100009eba
100009e9e:	add	rbx, 0x10
100009ea2:	inc	r13
100009ea5:	test	r12, r12
100009ea8:	jne	0x100009e4e
100009eaa:	jmp	0x100009eba
100009eac:	lea	rax, [rip + 0x1fa45]
100009eb3:	mov	qword ptr [rax], 0x0
100009eba:	add	rsp, 0x8
100009ebe:	pop	rbx
100009ebf:	pop	r12
100009ec1:	pop	r13
100009ec3:	pop	r14
100009ec5:	pop	r15
100009ec7:	pop	rbp
100009ec8:	ret
100009ec9:	lea	rsi, [rip + 0x17cf5] ## literal pool for: "was creating pattern list"
100009ed0:	mov	edi, 0x4
100009ed5:	call	0x1000037b0
100009eda:	push	rbp
100009edb:	mov	rbp, rsp
100009ede:	mov	rax, qword ptr [rip + 0x1a133] ## literal pool symbol address: ___stderrp
100009ee5:	mov	rax, qword ptr [rax]
100009ee8:	lea	rcx, [rip + 0x21041]
100009eef:	mov	qword ptr [rcx], rax
100009ef2:	mov	edi, 0x1
100009ef7:	call	0x100019836 ## symbol stub for: _isatty
100009efc:	test	eax, eax
100009efe:	jne	0x100009f20
100009f00:	mov	edi, 0x4
100009f05:	call	0x100019848 ## symbol stub for: _malloc
100009f0a:	lea	rcx, [rip + 0x21047]
100009f11:	mov	qword ptr [rcx], rax
100009f14:	test	rax, rax
100009f17:	je	0x100009f31
100009f19:	mov	word ptr [rax], 0x2d
100009f1e:	pop	rbp
100009f1f:	ret
100009f20:	lea	rsi, [rip + 0x17cb8] ## literal pool for: "cannot write zip file to terminal"
100009f27:	mov	edi, 0x10
100009f2c:	call	0x1000037b0
100009f31:	lea	rsi, [rip + 0x12779] ## literal pool for: "was processing arguments"
100009f38:	mov	edi, 0x4
100009f3d:	call	0x1000037b0
100009f42:	push	rbp
100009f43:	mov	rbp, rsp
100009f46:	push	r15
100009f48:	push	r14
100009f4a:	push	rbx
100009f4b:	push	rax
100009f4c:	mov	r14, rdi
100009f4f:	mov	edi, 0x10
100009f54:	call	0x100019848 ## symbol stub for: _malloc
100009f59:	test	rax, rax
100009f5c:	je	0x100009fca
100009f5e:	mov	r15, rax
100009f61:	mov	rdi, r14
100009f64:	call	0x100019920 ## symbol stub for: _strlen
100009f69:	lea	rdi, [rax + 0x1]
100009f6d:	call	0x100019848 ## symbol stub for: _malloc
100009f72:	test	rax, rax
100009f75:	je	0x100009fca
100009f77:	mov	rbx, rax
100009f7a:	mov	rdi, rax
100009f7d:	mov	rsi, r14
100009f80:	call	0x100019914 ## symbol stub for: _strcpy
100009f85:	mov	qword ptr [r15 + 0x8], 0x0
100009f8d:	mov	qword ptr [r15], rbx
100009f90:	mov	rax, qword ptr [rip + 0x1f6f9]
100009f97:	add	rax, 0x8
100009f9b:	cmp	qword ptr [rip + 0x1f6e5], 0x0
100009fa3:	lea	rcx, [rip + 0x1f6de]
100009faa:	cmove	rax, rcx
100009fae:	mov	qword ptr [rax], r15
100009fb1:	mov	qword ptr [rip + 0x1f6d8], r15
100009fb8:	inc	qword ptr [rip + 0x1f6c1]
100009fbf:	add	rsp, 0x8
100009fc3:	pop	rbx
100009fc4:	pop	r14
100009fc6:	pop	r15
100009fc8:	pop	rbp
100009fc9:	ret
100009fca:	lea	rsi, [rip + 0x17c30] ## literal pool for: "adding file"
100009fd1:	mov	edi, 0x4
100009fd6:	call	0x1000037b0
100009fdb:	push	rbp
100009fdc:	mov	rbp, rsp
100009fdf:	push	r15
100009fe1:	push	r14
100009fe3:	push	r12
100009fe5:	push	rbx
100009fe6:	mov	eax, 0x1400
100009feb:	call	0x10000a6a0
100009ff0:	sub	rsp, rax
100009ff3:	mov	r14, rdi
100009ff6:	mov	rax, qword ptr [rip + 0x1a013] ## literal pool symbol address: ___stack_chk_guard
100009ffd:	mov	rax, qword ptr [rax]
10000a000:	mov	qword ptr [rbp - 0x28], rax
10000a004:	mov	rbx, qword ptr [rip + 0x50fbd]
10000a00b:	test	rbx, rbx
10000a00e:	je	0x10000a087
10000a010:	lea	rsi, [rip + 0x17bf6] ## literal pool for: "{}"
10000a017:	mov	rdi, rbx
10000a01a:	call	0x100019938 ## symbol stub for: _strstr
10000a01f:	test	rax, rax
10000a022:	jne	0x10000a2f6
10000a028:	lea	r8, [rbp - 0xfd0]
10000a02f:	mov	qword ptr [r8], rbx
10000a032:	mov	qword ptr [r8 + 0x8], r14
10000a036:	xor	r14d, r14d
10000a039:	mov	qword ptr [r8 + 0x10], r14
10000a03d:	lea	rdi, [rbp - 0x13c0]
10000a044:	mov	rsi, rbx
10000a047:	xor	edx, edx
10000a049:	xor	ecx, ecx
10000a04b:	xor	r9d, r9d
10000a04e:	call	0x10001988a ## symbol stub for: _posix_spawnp
10000a053:	mov	ebx, eax
10000a055:	mov	rdi, qword ptr [rip + 0x50f6c]
10000a05c:	call	0x100019806 ## symbol stub for: _free
10000a061:	mov	qword ptr [rip + 0x50f60], r14
10000a068:	mov	ecx, 0x1
10000a06d:	test	ebx, ebx
10000a06f:	jne	0x10000a228
10000a075:	mov	edi, dword ptr [rbp - 0x13c0]
10000a07b:	lea	rbx, [rbp - 0x1410]
10000a082:	jmp	0x10000a20f
10000a087:	lea	rax, [rip + 0x17b9a] ## literal pool for: "unzip"
10000a08e:	mov	qword ptr [rbp - 0x1410], rax
10000a095:	lea	rax, [rip + 0x17b92] ## literal pool for: "-t"
10000a09c:	mov	qword ptr [rbp - 0x1408], rax
10000a0a3:	lea	rax, [rip + 0x1f602]
10000a0aa:	mov	r12d, 0x2
10000a0b0:	cmp	dword ptr [rax], 0x0
10000a0b3:	jne	0x10000a0c9
10000a0b5:	lea	rax, [rip + 0x17b75] ## literal pool for: "-qq"
10000a0bc:	mov	qword ptr [rbp - 0x1400], rax
10000a0c3:	mov	r12d, 0x3
10000a0c9:	mov	dword ptr [rbp - 0x1414], 0x0
10000a0d3:	lea	rbx, [rbp - 0xfd0]
10000a0da:	mov	byte ptr [rbx], 0x0
10000a0dd:	lea	rsi, [rip + 0x17b44] ## literal pool for: "unzip"
10000a0e4:	mov	edx, 0xfa0
10000a0e9:	mov	ecx, 0xfa4
10000a0ee:	mov	rdi, rbx
10000a0f1:	call	0x100019788 ## symbol stub for: ___strncat_chk
10000a0f6:	lea	rsi, [rip + 0x17b74] ## literal pool for: " -v"
10000a0fd:	mov	edx, 0xfa4
10000a102:	mov	rdi, rbx
10000a105:	call	0x10001977c ## symbol stub for: ___strcat_chk
10000a10a:	lea	rsi, [rip + 0x11e9f] ## literal pool for: "r"
10000a111:	mov	rdi, rbx
10000a114:	call	0x100019884 ## symbol stub for: _popen
10000a119:	test	rax, rax
10000a11c:	je	0x10000a2b5
10000a122:	mov	rbx, rax
10000a125:	lea	rdi, [rbp - 0x13c0]
10000a12c:	mov	esi, 0x3e8
10000a131:	mov	rdx, rax
10000a134:	call	0x1000197dc ## symbol stub for: _fgets
10000a139:	test	rax, rax
10000a13c:	je	0x10000a17c
10000a13e:	lea	rsi, [rip + 0x17b66] ## literal pool for: "UnZip %f "
10000a145:	lea	rdi, [rbp - 0x13c0]
10000a14c:	lea	rdx, [rbp - 0x1414]
10000a153:	xor	eax, eax
10000a155:	call	0x1000198f6 ## symbol stub for: _sscanf
10000a15a:	test	eax, eax
10000a15c:	jle	0x10000a185
10000a15e:	lea	r15, [rbp - 0x13c0]
10000a165:	mov	rdi, r15
10000a168:	mov	esi, 0x3e8
10000a16d:	mov	rdx, rbx
10000a170:	call	0x1000197dc ## symbol stub for: _fgets
10000a175:	test	rax, rax
10000a178:	jne	0x10000a165
10000a17a:	jmp	0x10000a198
10000a17c:	lea	rdi, [rip + 0x17b03] ## literal pool for: "failed to get information from UnZip"
10000a183:	jmp	0x10000a18c
10000a185:	lea	rdi, [rip + 0x17b29] ## literal pool for: "unexpected output of UnZip -v"
10000a18c:	lea	rsi, [rip + 0x10624] ## literal pool for: ""
10000a193:	call	0x100003e67
10000a198:	mov	rdi, rbx
10000a19b:	call	0x100019878 ## symbol stub for: _pclose
10000a1a0:	movss	xmm0, dword ptr [rbp - 0x1414]
10000a1a8:	movss	xmm1, dword ptr [rip + 0xfb40]
10000a1b0:	ucomiss	xmm1, xmm0
10000a1b3:	jbe	0x10000a1c5
10000a1b5:	lea	rax, [rip + 0x1f5e8]
10000a1bc:	cmp	dword ptr [rax], 0x0
10000a1bf:	jne	0x10000a307
10000a1c5:	mov	eax, r12d
10000a1c8:	mov	qword ptr [rbp + 8*rax - 0x1410], r14
10000a1d0:	mov	qword ptr [rbp + 8*rax - 0x1408], 0x0
10000a1dc:	lea	r8, [rbp - 0x1410]
10000a1e3:	mov	rsi, qword ptr [r8]
10000a1e6:	lea	rdi, [rbp - 0xfd0]
10000a1ed:	xor	edx, edx
10000a1ef:	xor	ecx, ecx
10000a1f1:	xor	r9d, r9d
10000a1f4:	call	0x10001988a ## symbol stub for: _posix_spawnp
10000a1f9:	mov	ecx, 0x1
10000a1fe:	test	eax, eax
10000a200:	jne	0x10000a228
10000a202:	mov	edi, dword ptr [rbp - 0xfd0]
10000a208:	lea	rbx, [rbp - 0x13c0]
10000a20f:	mov	rsi, rbx
10000a212:	xor	edx, edx
10000a214:	call	0x100019968 ## symbol stub for: _waitpid
10000a219:	mov	eax, dword ptr [rbx]
10000a21b:	test	al, 0x7f
10000a21d:	movzx	eax, ah
10000a220:	mov	ecx, 0x1
10000a225:	cmove	ecx, eax
10000a228:	test	ecx, ecx
10000a22a:	jne	0x10000a2cb
10000a230:	lea	rax, [rip + 0x1f225]
10000a237:	cmp	dword ptr [rax], 0x0
10000a23a:	je	0x10000a266
10000a23c:	lea	rbx, [rip + 0x20ced]
10000a243:	mov	rdi, qword ptr [rbx]
10000a246:	lea	rax, [rip + 0x20d0b]
10000a24d:	mov	rdx, qword ptr [rax]
10000a250:	lea	rsi, [rip + 0x17a0b] ## literal pool for: "test of %s OK\n"
10000a257:	xor	eax, eax
10000a259:	call	0x1000197ee ## symbol stub for: _fprintf
10000a25e:	mov	rdi, qword ptr [rbx]
10000a261:	call	0x1000197d6 ## symbol stub for: _fflush
10000a266:	lea	rbx, [rip + 0x1f4f3]
10000a26d:	mov	rdi, qword ptr [rbx]
10000a270:	test	rdi, rdi
10000a273:	je	0x10000a295
10000a275:	lea	rax, [rip + 0x20cdc]
10000a27c:	mov	rdx, qword ptr [rax]
10000a27f:	lea	rsi, [rip + 0x179dc] ## literal pool for: "test of %s OK\n"
10000a286:	xor	eax, eax
10000a288:	call	0x1000197ee ## symbol stub for: _fprintf
10000a28d:	mov	rdi, qword ptr [rbx]
10000a290:	call	0x1000197d6 ## symbol stub for: _fflush
10000a295:	mov	rax, qword ptr [rip + 0x19d74] ## literal pool symbol address: ___stack_chk_guard
10000a29c:	mov	rax, qword ptr [rax]
10000a29f:	cmp	rax, qword ptr [rbp - 0x28]
10000a2a3:	jne	0x10000a2c6
10000a2a5:	add	rsp, 0x1400
10000a2ac:	pop	rbx
10000a2ad:	pop	r12
10000a2af:	pop	r14
10000a2b1:	pop	r15
10000a2b3:	pop	rbp
10000a2b4:	ret
10000a2b5:	lea	rdi, [rip + 0x179b9] ## literal pool for: "unzip pipe error"
10000a2bc:	call	0x10001987e ## symbol stub for: _perror
10000a2c1:	jmp	0x10000a1a0
10000a2c6:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
10000a2cb:	lea	rax, [rip + 0x20c5e]
10000a2d2:	mov	rdi, qword ptr [rax]
10000a2d5:	lea	rax, [rip + 0x20c7c]
10000a2dc:	mov	rdx, qword ptr [rax]
10000a2df:	lea	rsi, [rip + 0x1794f] ## literal pool for: "test of %s FAILED\n"
10000a2e6:	xor	eax, eax
10000a2e8:	call	0x1000197ee ## symbol stub for: _fprintf
10000a2ed:	lea	rsi, [rip + 0x17954] ## literal pool for: "original files unmodified"
10000a2f4:	jmp	0x10000a358
10000a2f6:	lea	rsi, [rip + 0x17913] ## literal pool for: "{} in -TT not supported"
10000a2fd:	mov	edi, 0x10
10000a302:	call	0x1000037b0
10000a307:	cvtss2sd	xmm0, xmm0
10000a30b:	lea	rcx, [rip + 0x179c1] ## literal pool for: "Found UnZip version %4.2f"
10000a312:	lea	r14, [rbp - 0x13c0]
10000a319:	mov	edx, 0x3e9
10000a31e:	mov	rdi, r14
10000a321:	mov	esi, 0x0
10000a326:	mov	al, 0x1
10000a328:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000a32d:	lea	rbx, [rip + 0x10483] ## literal pool for: ""
10000a334:	mov	rdi, r14
10000a337:	mov	rsi, rbx
10000a33a:	call	0x100003e67
10000a33f:	lea	rdi, [rip + 0x179a7] ## literal pool for: "Need UnZip 6.00 or later to test this Zip64 archive"
10000a346:	mov	rsi, rbx
10000a349:	call	0x100003e67
10000a34e:	lea	rax, [rip + 0x20c03]
10000a355:	mov	rsi, qword ptr [rax]
10000a358:	mov	edi, 0x8
10000a35d:	call	0x1000037b0
10000a362:	push	rbp
10000a363:	mov	rbp, rsp
10000a366:	push	r15
10000a368:	push	r14
10000a36a:	push	r12
10000a36c:	push	rbx
10000a36d:	sub	rsp, 0x70
10000a371:	mov	rax, qword ptr [rip + 0x19c98] ## literal pool symbol address: ___stack_chk_guard
10000a378:	mov	rax, qword ptr [rax]
10000a37b:	mov	qword ptr [rbp - 0x28], rax
10000a37f:	lea	r15, [rip + 0x1f546]
10000a386:	cmp	dword ptr [r15], 0x0
10000a38a:	je	0x10000a3a7
10000a38c:	lea	rax, [rip + 0x20b9d]
10000a393:	mov	rsi, qword ptr [rax]
10000a396:	mov	edi, 0xa
10000a39b:	call	0x1000197f4 ## symbol stub for: _fputc
10000a3a0:	mov	dword ptr [r15], 0x0
10000a3a7:	lea	r14, [rip + 0x1f522]
10000a3ae:	cmp	dword ptr [r14], 0x0
10000a3b2:	je	0x10000a3cf
10000a3b4:	lea	rax, [rip + 0x1f3a5]
10000a3bb:	mov	rsi, qword ptr [rax]
10000a3be:	mov	edi, 0xa
10000a3c3:	call	0x1000197f4 ## symbol stub for: _fputc
10000a3c8:	mov	dword ptr [r14], 0x0
10000a3cf:	lea	rax, [rip + 0x1f33e]
10000a3d6:	cmp	dword ptr [rax], 0x0
10000a3d9:	je	0x10000a469
10000a3df:	lea	rax, [rip + 0x1f076]
10000a3e6:	cmp	dword ptr [rax], 0x0
10000a3e9:	je	0x10000a424
10000a3eb:	lea	rax, [rip + 0x20b3e]
10000a3f2:	mov	rdi, qword ptr [rax]
10000a3f5:	lea	rax, [rip + 0x1f434]
10000a3fc:	mov	rdx, qword ptr [rax]
10000a3ff:	inc	rdx
10000a402:	lea	rax, [rip + 0x1f447]
10000a409:	mov	rcx, qword ptr [rax]
10000a40c:	inc	rcx
10000a40f:	lea	rsi, [rip + 0x1790b] ## literal pool for: "%lu>%lu: "
10000a416:	xor	eax, eax
10000a418:	call	0x1000197ee ## symbol stub for: _fprintf
10000a41d:	mov	dword ptr [r15], 0x1
10000a424:	lea	rax, [rip + 0x1f32d]
10000a42b:	cmp	dword ptr [rax], 0x0
10000a42e:	je	0x10000a469
10000a430:	lea	rax, [rip + 0x1f329]
10000a437:	mov	rdi, qword ptr [rax]
10000a43a:	lea	rax, [rip + 0x1f3ef]
10000a441:	mov	rdx, qword ptr [rax]
10000a444:	inc	rdx
10000a447:	lea	rax, [rip + 0x1f402]
10000a44e:	mov	rcx, qword ptr [rax]
10000a451:	inc	rcx
10000a454:	lea	rsi, [rip + 0x178c6] ## literal pool for: "%lu>%lu: "
10000a45b:	xor	eax, eax
10000a45d:	call	0x1000197ee ## symbol stub for: _fprintf
10000a462:	mov	dword ptr [r14], 0x1
10000a469:	lea	rax, [rip + 0x1f298]
10000a470:	cmp	dword ptr [rax], 0x0
10000a473:	je	0x10000a4fd
10000a479:	lea	rax, [rip + 0x1efdc]
10000a480:	cmp	dword ptr [rax], 0x0
10000a483:	je	0x10000a4bb
10000a485:	lea	rax, [rip + 0x20aa4]
10000a48c:	mov	rdi, qword ptr [rax]
10000a48f:	lea	rax, [rip + 0x1f28a]
10000a496:	mov	rdx, qword ptr [rax]
10000a499:	lea	rax, [rip + 0x1f290]
10000a4a0:	mov	rcx, qword ptr [rax]
10000a4a3:	sub	rcx, rdx
10000a4a6:	lea	rsi, [rip + 0x1787e] ## literal pool for: "%3ld/%3ld "
10000a4ad:	xor	eax, eax
10000a4af:	call	0x1000197ee ## symbol stub for: _fprintf
10000a4b4:	mov	dword ptr [r15], 0x1
10000a4bb:	lea	rax, [rip + 0x1f296]
10000a4c2:	cmp	dword ptr [rax], 0x0
10000a4c5:	je	0x10000a4fd
10000a4c7:	lea	rax, [rip + 0x1f292]
10000a4ce:	mov	rdi, qword ptr [rax]
10000a4d1:	lea	rax, [rip + 0x1f248]
10000a4d8:	mov	rdx, qword ptr [rax]
10000a4db:	lea	rax, [rip + 0x1f24e]
10000a4e2:	mov	rcx, qword ptr [rax]
10000a4e5:	sub	rcx, rdx
10000a4e8:	lea	rsi, [rip + 0x1783c] ## literal pool for: "%3ld/%3ld "
10000a4ef:	xor	eax, eax
10000a4f1:	call	0x1000197ee ## symbol stub for: _fprintf
10000a4f6:	mov	dword ptr [r14], 0x1
10000a4fd:	lea	rax, [rip + 0x1f208]
10000a504:	cmp	dword ptr [rax], 0x0
10000a507:	je	0x10000a647
10000a50d:	lea	rbx, [rip + 0x1f224]
10000a514:	mov	rdi, qword ptr [rbx]
10000a517:	lea	rsi, [rbp - 0x90]
10000a51e:	call	0x10001638a
10000a523:	lea	r12, [rip + 0x1ef32]
10000a52a:	cmp	dword ptr [r12], 0x0
10000a52f:	je	0x10000a557
10000a531:	lea	rax, [rip + 0x209f8]
10000a538:	mov	rdi, qword ptr [rax]
10000a53b:	lea	rsi, [rip + 0x177f4] ## literal pool for: "[%4s"
10000a542:	lea	rdx, [rbp - 0x90]
10000a549:	xor	eax, eax
10000a54b:	call	0x1000197ee ## symbol stub for: _fprintf
10000a550:	mov	dword ptr [r15], 0x1
10000a557:	lea	r15, [rip + 0x1f1fa]
10000a55e:	cmp	dword ptr [r15], 0x0
10000a562:	je	0x10000a58a
10000a564:	lea	rax, [rip + 0x1f1f5]
10000a56b:	mov	rdi, qword ptr [rax]
10000a56e:	lea	rsi, [rip + 0x177c1] ## literal pool for: "[%4s"
10000a575:	lea	rdx, [rbp - 0x90]
10000a57c:	xor	eax, eax
10000a57e:	call	0x1000197ee ## symbol stub for: _fprintf
10000a583:	mov	dword ptr [r14], 0x1
10000a58a:	lea	rax, [rip + 0x1f1bf]
10000a591:	mov	rcx, qword ptr [rax]
10000a594:	mov	rdi, qword ptr [rbx]
10000a597:	mov	rax, rcx
10000a59a:	sub	rax, rdi
10000a59d:	jae	0x10000a5ed
10000a59f:	sub	rdi, rcx
10000a5a2:	lea	rsi, [rbp - 0x90]
10000a5a9:	call	0x10001638a
10000a5ae:	cmp	dword ptr [r12], 0x0
10000a5b3:	je	0x10000a5d4
10000a5b5:	lea	rax, [rip + 0x20974]
10000a5bc:	mov	rdi, qword ptr [rax]
10000a5bf:	lea	rsi, [rip + 0x1777c] ## literal pool for: "-%4s] "
10000a5c6:	lea	rdx, [rbp - 0x90]
10000a5cd:	xor	eax, eax
10000a5cf:	call	0x1000197ee ## symbol stub for: _fprintf
10000a5d4:	cmp	dword ptr [r15], 0x0
10000a5d8:	je	0x10000a647
10000a5da:	lea	rax, [rip + 0x1f17f]
10000a5e1:	mov	rdi, qword ptr [rax]
10000a5e4:	lea	rsi, [rip + 0x17757] ## literal pool for: "-%4s] "
10000a5eb:	jmp	0x10000a639
10000a5ed:	lea	rsi, [rbp - 0x90]
10000a5f4:	mov	rdi, rax
10000a5f7:	call	0x10001638a
10000a5fc:	cmp	dword ptr [r12], 0x0
10000a601:	je	0x10000a622
10000a603:	lea	rax, [rip + 0x20926]
10000a60a:	mov	rdi, qword ptr [rax]
10000a60d:	lea	rsi, [rip + 0x17727] ## literal pool for: "/%4s] "
10000a614:	lea	rdx, [rbp - 0x90]
10000a61b:	xor	eax, eax
10000a61d:	call	0x1000197ee ## symbol stub for: _fprintf
10000a622:	cmp	dword ptr [r15], 0x0
10000a626:	je	0x10000a647
10000a628:	lea	rax, [rip + 0x1f131]
10000a62f:	mov	rdi, qword ptr [rax]
10000a632:	lea	rsi, [rip + 0x17702] ## literal pool for: "/%4s] "
10000a639:	lea	rdx, [rbp - 0x90]
10000a640:	xor	eax, eax
10000a642:	call	0x1000197ee ## symbol stub for: _fprintf
10000a647:	lea	rax, [rip + 0x1ee0e]
10000a64e:	cmp	dword ptr [rax], 0x0
10000a651:	je	0x10000a662
10000a653:	lea	rax, [rip + 0x208d6]
10000a65a:	mov	rdi, qword ptr [rax]
10000a65d:	call	0x1000197d6 ## symbol stub for: _fflush
10000a662:	lea	rax, [rip + 0x1f0ef]
10000a669:	cmp	dword ptr [rax], 0x0
10000a66c:	je	0x10000a67d
10000a66e:	lea	rax, [rip + 0x1f0eb]
10000a675:	mov	rdi, qword ptr [rax]
10000a678:	call	0x1000197d6 ## symbol stub for: _fflush
10000a67d:	mov	rax, qword ptr [rip + 0x1998c] ## literal pool symbol address: ___stack_chk_guard
10000a684:	mov	rax, qword ptr [rax]
10000a687:	cmp	rax, qword ptr [rbp - 0x28]
10000a68b:	jne	0x10000a69a
10000a68d:	add	rsp, 0x70
10000a691:	pop	rbx
10000a692:	pop	r12
10000a694:	pop	r14
10000a696:	pop	r15
10000a698:	pop	rbp
10000a699:	ret
10000a69a:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
10000a69f:	nop
10000a6a0:	push	rcx
10000a6a1:	push	rax
10000a6a2:	mov	rcx, qword ptr [rip + 0x1995f] ## literal pool symbol address: ____chkstk_darwin
10000a6a9:	test	rcx, rcx
10000a6ac:	jne	0x10000a6b5
10000a6ae:	lea	rcx, [rip + 0xb]
10000a6b5:	call	rcx
10000a6b7:	pop	rax
10000a6b8:	pop	rcx
10000a6b9:	ret
10000a6ba:	nop	word ptr [rax + rax]
10000a6c0:	cmp	rax, 0x1000
10000a6c6:	lea	rcx, [rsp + 0x18]
10000a6cb:	jb	0x10000a6e4
10000a6cd:	sub	rcx, 0x1000
10000a6d4:	test	byte ptr [rcx], cl
10000a6d6:	sub	rax, 0x1000
10000a6dc:	cmp	rax, 0x1000
10000a6e2:	ja	0x10000a6cd
10000a6e4:	sub	rcx, rax
10000a6e7:	test	byte ptr [rcx], cl
10000a6e9:	ret
10000a6ea:	push	rbp
10000a6eb:	mov	rbp, rsp
10000a6ee:	lea	rax, [rip + 0x20853]
10000a6f5:	mov	rdx, qword ptr [rax]
10000a6f8:	test	rdx, rdx
10000a6fb:	je	0x10000a71d
10000a6fd:	lea	rax, [rip + 0x2085c]
10000a704:	mov	rsi, qword ptr [rax]
10000a707:	lea	rcx, [rip + 0x13]
10000a70e:	call	0x100015c53
10000a713:	test	rax, rax
10000a716:	je	0x10000a71d
10000a718:	mov	rax, qword ptr [rax]
10000a71b:	jmp	0x10000a71f
10000a71d:	xor	eax, eax
10000a71f:	pop	rbp
10000a720:	ret
10000a721:	push	rbp
10000a722:	mov	rbp, rsp
10000a725:	mov	rsi, qword ptr [rsi + 0x78]
10000a729:	pop	rbp
10000a72a:	jmp	0x100015d2c
10000a72f:	push	rbp
10000a730:	mov	rbp, rsp
10000a733:	push	r14
10000a735:	push	rbx
10000a736:	mov	r14, rdi
10000a739:	call	0x100019920 ## symbol stub for: _strlen
10000a73e:	lea	rdi, [rax + 0x5]
10000a742:	call	0x100019848 ## symbol stub for: _malloc
10000a747:	mov	rbx, rax
10000a74a:	test	rax, rax
10000a74d:	je	0x10000a7a1
10000a74f:	mov	rdi, rbx
10000a752:	mov	rsi, r14
10000a755:	call	0x100019914 ## symbol stub for: _strcpy
10000a75a:	lea	rax, [rip + 0x1ef57]
10000a761:	cmp	dword ptr [rax], 0x0
10000a764:	jne	0x10000a7a1
10000a766:	mov	rdi, rbx
10000a769:	mov	esi, 0x2f
10000a76e:	call	0x100019932 ## symbol stub for: _strrchr
10000a773:	lea	rdi, [rax + 0x1]
10000a777:	test	rax, rax
10000a77a:	cmove	rdi, rbx
10000a77e:	mov	esi, 0x2e
10000a783:	call	0x100019932 ## symbol stub for: _strrchr
10000a788:	test	rax, rax
10000a78b:	jne	0x10000a7a1
10000a78d:	mov	rdi, rbx
10000a790:	call	0x100019920 ## symbol stub for: _strlen
10000a795:	mov	dword ptr [rbx + rax], 0x70697a2e
10000a79c:	mov	byte ptr [rbx + rax + 0x4], 0x0
10000a7a1:	mov	rax, rbx
10000a7a4:	pop	rbx
10000a7a5:	pop	r14
10000a7a7:	pop	rbp
10000a7a8:	ret
10000a7a9:	push	rbp
10000a7aa:	mov	rbp, rsp
10000a7ad:	test	rsi, rsi
10000a7b0:	je	0x10000a7d9
10000a7b2:	mov	rax, rsi
10000a7b5:	mov	ecx, edx
10000a7b7:	lea	rcx, [rsi + rcx - 0x4]
10000a7bc:	cmp	rcx, rsi
10000a7bf:	jbe	0x10000a7d9
10000a7c1:	movzx	edx, di
10000a7c4:	movzx	esi, word ptr [rax]
10000a7c7:	cmp	esi, edx
10000a7c9:	je	0x10000a7db
10000a7cb:	movzx	esi, word ptr [rax + 0x2]
10000a7cf:	lea	rax, [rsi + rax + 0x4]
10000a7d4:	cmp	rax, rcx
10000a7d7:	jb	0x10000a7c4
10000a7d9:	xor	eax, eax
10000a7db:	pop	rbp
10000a7dc:	ret
10000a7dd:	push	rbp
10000a7de:	mov	rbp, rsp
10000a7e1:	push	r15
10000a7e3:	push	r14
10000a7e5:	push	r13
10000a7e7:	push	r12
10000a7e9:	push	rbx
10000a7ea:	sub	rsp, 0x38
10000a7ee:	mov	r12, r8
10000a7f1:	mov	r13d, ecx
10000a7f4:	mov	r15, rdx
10000a7f7:	test	rdi, rdi
10000a7fa:	je	0x10000a8d2
10000a800:	mov	r14d, esi
10000a803:	mov	rbx, rdi
10000a806:	mov	edi, 0xffff
10000a80b:	call	0x100019848 ## symbol stub for: _malloc
10000a810:	test	rax, rax
10000a813:	mov	qword ptr [rbp - 0x50], r12
10000a817:	jne	0x10000a830
10000a819:	mov	r12, rax
10000a81c:	lea	rsi, [rip + 0x17554] ## literal pool for: "extra field copy"
10000a823:	mov	edi, 0x4
10000a828:	call	0x1000037b0
10000a82d:	mov	rax, r12
10000a830:	test	r14d, r14d
10000a833:	mov	qword ptr [rbp - 0x38], r15
10000a837:	je	0x10000a924
10000a83d:	mov	ecx, r14d
10000a840:	add	rcx, rbx
10000a843:	mov	qword ptr [rbp - 0x58], rcx
10000a847:	test	r15, r15
10000a84a:	sete	cl
10000a84d:	mov	qword ptr [rbp - 0x48], r13
10000a851:	mov	edx, r13d
10000a854:	mov	qword ptr [rbp - 0x40], rdx
10000a858:	lea	r13, [r15 + rdx - 0x4]
10000a85d:	cmp	r13, r15
10000a860:	setbe	dl
10000a863:	or	dl, cl
10000a865:	mov	byte ptr [rbp - 0x29], dl
10000a868:	xor	r14d, r14d
10000a86b:	movzx	r12d, word ptr [rbx + 0x2]
10000a870:	cmp	byte ptr [rbp - 0x29], 0x0
10000a874:	jne	0x10000a892
10000a876:	movzx	esi, word ptr [rbx]
10000a879:	mov	rcx, qword ptr [rbp - 0x38]
10000a87d:	movzx	edx, word ptr [rcx]
10000a880:	cmp	edx, esi
10000a882:	je	0x10000a8b9
10000a884:	movzx	edx, word ptr [rcx + 0x2]
10000a888:	lea	rcx, [rdx + rcx + 0x4]
10000a88d:	cmp	rcx, r13
10000a890:	jb	0x10000a87d
10000a892:	movzx	edi, r14w
10000a896:	add	rdi, rax
10000a899:	mov	dword ptr [rbp - 0x30], r14d
10000a89d:	mov	r14, r12
10000a8a0:	add	r14, 0x4
10000a8a4:	mov	r15, rax
10000a8a7:	mov	rsi, rbx
10000a8aa:	mov	rdx, r14
10000a8ad:	call	0x10001984e ## symbol stub for: _memcpy
10000a8b2:	mov	rax, r15
10000a8b5:	add	r14d, dword ptr [rbp - 0x30]
10000a8b9:	movzx	ecx, r12w
10000a8bd:	lea	rbx, [rcx + rbx + 0x4]
10000a8c2:	cmp	rbx, qword ptr [rbp - 0x58]
10000a8c6:	jb	0x10000a86b
10000a8c8:	mov	r13, qword ptr [rbp - 0x48]
10000a8cc:	mov	rdx, qword ptr [rbp - 0x40]
10000a8d0:	jmp	0x10000a92a
10000a8d2:	xor	r14d, r14d
10000a8d5:	test	r15, r15
10000a8d8:	je	0x10000a995
10000a8de:	mov	ebx, 0x0
10000a8e3:	test	r13d, r13d
10000a8e6:	je	0x10000a97f
10000a8ec:	mov	r14d, r13d
10000a8ef:	mov	rdi, r14
10000a8f2:	call	0x100019848 ## symbol stub for: _malloc
10000a8f7:	mov	rbx, rax
10000a8fa:	test	rax, rax
10000a8fd:	jne	0x10000a910
10000a8ff:	lea	rsi, [rip + 0x17471] ## literal pool for: "extra field copy"
10000a906:	mov	edi, 0x4
10000a90b:	call	0x1000037b0
10000a910:	mov	rdi, rbx
10000a913:	mov	rsi, r15
10000a916:	mov	rdx, r14
10000a919:	call	0x10001984e ## symbol stub for: _memcpy
10000a91e:	movzx	r14d, r13w
10000a922:	jmp	0x10000a97f
10000a924:	mov	edx, r13d
10000a927:	xor	r14d, r14d
10000a92a:	movzx	edi, r14w
10000a92e:	add	rdi, rax
10000a931:	mov	r12, rax
10000a934:	mov	rsi, qword ptr [rbp - 0x38]
10000a938:	call	0x10001984e ## symbol stub for: _memcpy
10000a93d:	add	r13d, r14d
10000a940:	movzx	r14d, r13w
10000a944:	mov	rdi, r14
10000a947:	call	0x100019848 ## symbol stub for: _malloc
10000a94c:	mov	rbx, rax
10000a94f:	test	rax, rax
10000a952:	jne	0x10000a965
10000a954:	lea	rsi, [rip + 0x1741c] ## literal pool for: "extra field copy"
10000a95b:	mov	edi, 0x4
10000a960:	call	0x1000037b0
10000a965:	mov	rdi, rbx
10000a968:	mov	rsi, r12
10000a96b:	mov	rdx, r14
10000a96e:	call	0x10001984e ## symbol stub for: _memcpy
10000a973:	mov	rdi, r12
10000a976:	call	0x100019806 ## symbol stub for: _free
10000a97b:	mov	r12, qword ptr [rbp - 0x50]
10000a97f:	mov	dword ptr [r12], r14d
10000a983:	mov	rax, rbx
10000a986:	add	rsp, 0x38
10000a98a:	pop	rbx
10000a98b:	pop	r12
10000a98d:	pop	r13
10000a98f:	pop	r14
10000a991:	pop	r15
10000a993:	pop	rbp
10000a994:	ret
10000a995:	xor	ebx, ebx
10000a997:	jmp	0x10000a97f
10000a999:	push	rbp
10000a99a:	mov	rbp, rsp
10000a99d:	push	r15
10000a99f:	push	r14
10000a9a1:	push	rbx
10000a9a2:	push	rax
10000a9a3:	mov	rbx, rdi
10000a9a6:	xor	esi, esi
10000a9a8:	mov	edx, 0x2
10000a9ad:	call	0x10001980c ## symbol stub for: _fseeko
10000a9b2:	mov	r14, -0x1
10000a9b9:	test	eax, eax
10000a9bb:	je	0x10000a9d3
10000a9bd:	mov	rdi, rbx
10000a9c0:	call	0x1000198d2 ## symbol stub for: _rewind
10000a9c5:	mov	rax, r14
10000a9c8:	add	rsp, 0x8
10000a9cc:	pop	rbx
10000a9cd:	pop	r14
10000a9cf:	pop	r15
10000a9d1:	pop	rbp
10000a9d2:	ret
10000a9d3:	mov	rdi, rbx
10000a9d6:	call	0x100019818 ## symbol stub for: _ftello
10000a9db:	test	rax, rax
10000a9de:	js	0x10000a9bd
10000a9e0:	mov	r15, rax
10000a9e3:	mov	rdi, rbx
10000a9e6:	mov	rsi, rax
10000a9e9:	xor	edx, edx
10000a9eb:	call	0x10001980c ## symbol stub for: _fseeko
10000a9f0:	test	eax, eax
10000a9f2:	jne	0x10000a9bd
10000a9f4:	lea	rdi, [rbp - 0x1c]
10000a9f8:	mov	esi, 0x1
10000a9fd:	mov	edx, 0x1
10000aa02:	mov	rcx, rbx
10000aa05:	call	0x100019800 ## symbol stub for: _fread
10000aa0a:	mov	rdi, rbx
10000aa0d:	call	0x1000197ca ## symbol stub for: _feof
10000aa12:	xor	r14d, r14d
10000aa15:	cmp	eax, 0x1
10000aa18:	sbb	r14, r14
10000aa1b:	or	r14, r15
10000aa1e:	jmp	0x10000a9bd
10000aa20:	push	rbp
10000aa21:	mov	rbp, rsp
10000aa24:	push	r15
10000aa26:	push	r14
10000aa28:	push	r13
10000aa2a:	push	r12
10000aa2c:	push	rbx
10000aa2d:	sub	rsp, 0x48
10000aa31:	mov	r13, rsi
10000aa34:	mov	qword ptr [rbp - 0x68], rdi
10000aa38:	mov	rax, qword ptr [rip + 0x195d1] ## literal pool symbol address: ___stack_chk_guard
10000aa3f:	mov	rax, qword ptr [rax]
10000aa42:	mov	qword ptr [rbp - 0x30], rax
10000aa46:	mov	r15, qword ptr [rsi + 0x30]
10000aa4a:	lea	rbx, [rip + 0x1eddf]
10000aa51:	lea	r14, [rip + 0x1eda8]
10000aa58:	cmp	r15, qword ptr [rbx]
10000aa5b:	je	0x10000aa71
10000aa5d:	mov	rdi, qword ptr [r14]
10000aa60:	test	rdi, rdi
10000aa63:	je	0x10000aa71
10000aa65:	call	0x1000197be ## symbol stub for: _fclose
10000aa6a:	mov	qword ptr [r14], 0x0
10000aa71:	mov	qword ptr [rbx], r15
10000aa74:	lea	r12, [rip + 0x1ed8d]
10000aa7b:	mov	rdi, qword ptr [r12]
10000aa7f:	mov	rsi, r15
10000aa82:	call	0x10001338c
10000aa87:	mov	rbx, rax
10000aa8a:	mov	rax, qword ptr [r14]
10000aa8d:	test	rax, rax
10000aa90:	jne	0x10000aaf2
10000aa92:	lea	rsi, [rip + 0x11517] ## literal pool for: "r"
10000aa99:	mov	rdi, rbx
10000aa9c:	call	0x1000197e8 ## symbol stub for: _fopen
10000aaa1:	mov	qword ptr [r14], rax
10000aaa4:	test	rax, rax
10000aaa7:	jne	0x10000aaf2
10000aaa9:	mov	qword ptr [rbp - 0x58], r13
10000aaad:	lea	r13, [rip + 0x114fc] ## literal pool for: "r"
10000aab4:	mov	rdi, r15
10000aab7:	call	0x100013490
10000aabc:	test	eax, eax
10000aabe:	jne	0x10000adb3
10000aac4:	mov	rdi, rbx
10000aac7:	call	0x100019806 ## symbol stub for: _free
10000aacc:	mov	rdi, qword ptr [r12]
10000aad0:	mov	rsi, r15
10000aad3:	call	0x10001338c
10000aad8:	mov	rbx, rax
10000aadb:	mov	rdi, rax
10000aade:	mov	rsi, r13
10000aae1:	call	0x1000197e8 ## symbol stub for: _fopen
10000aae6:	mov	qword ptr [r14], rax
10000aae9:	test	rax, rax
10000aaec:	je	0x10000aab4
10000aaee:	mov	r13, qword ptr [rbp - 0x58]
10000aaf2:	mov	rsi, qword ptr [r13 + 0x40]
10000aaf6:	mov	rdi, rax
10000aaf9:	xor	edx, edx
10000aafb:	call	0x10001980c ## symbol stub for: _fseeko
10000ab00:	mov	rdi, qword ptr [r14]
10000ab03:	test	eax, eax
10000ab05:	je	0x10000ab58
10000ab07:	call	0x1000197be ## symbol stub for: _fclose
10000ab0c:	mov	qword ptr [r14], 0x0
10000ab13:	call	0x100019764 ## symbol stub for: ___error
10000ab18:	mov	edi, dword ptr [rax]
10000ab1a:	call	0x10001991a ## symbol stub for: _strerror
10000ab1f:	lea	rdi, [rip + 0x17262] ## literal pool for: "reading archive fseek: "
10000ab26:	mov	rsi, rax
10000ab29:	call	0x100003e67
10000ab2e:	mov	ebx, 0xb
10000ab33:	mov	rax, qword ptr [rip + 0x194d6] ## literal pool symbol address: ___stack_chk_guard
10000ab3a:	mov	rax, qword ptr [rax]
10000ab3d:	cmp	rax, qword ptr [rbp - 0x30]
10000ab41:	jne	0x10000adfa
10000ab47:	mov	eax, ebx
10000ab49:	add	rsp, 0x48
10000ab4d:	pop	rbx
10000ab4e:	pop	r12
10000ab50:	pop	r13
10000ab52:	pop	r14
10000ab54:	pop	r15
10000ab56:	pop	rbp
10000ab57:	ret
10000ab58:	lea	rsi, [rip + 0x17241] ## literal pool for: "PK\003\004"
10000ab5f:	call	0x10000adff
10000ab64:	mov	rcx, qword ptr [r14]
10000ab67:	test	eax, eax
10000ab69:	je	0x10000ad4d
10000ab6f:	lea	rdi, [rbp - 0x50]
10000ab73:	mov	esi, 0x1a
10000ab78:	mov	edx, 0x1
10000ab7d:	call	0x100019800 ## symbol stub for: _fread
10000ab82:	cmp	rax, 0x1
10000ab86:	jne	0x10000ad76
10000ab8c:	mov	edi, 0xa0
10000ab91:	call	0x100019848 ## symbol stub for: _malloc
10000ab96:	test	rax, rax
10000ab99:	je	0x10000adbd
10000ab9f:	mov	r15, rax
10000aba2:	mov	qword ptr [rbp - 0x58], r13
10000aba6:	movzx	eax, word ptr [rbp - 0x50]
10000abaa:	mov	word ptr [r15 + 0x2], ax
10000abaf:	movzx	eax, word ptr [rbp - 0x4e]
10000abb3:	mov	word ptr [r15 + 0x3a], ax
10000abb8:	movzx	eax, word ptr [rbp - 0x4c]
10000abbc:	mov	word ptr [r15 + 0x6], ax
10000abc1:	mov	eax, dword ptr [rbp - 0x4a]
10000abc4:	mov	qword ptr [r15 + 0x8], rax
10000abc8:	mov	eax, dword ptr [rbp - 0x46]
10000abcb:	mov	qword ptr [r15 + 0x10], rax
10000abcf:	movzx	eax, word ptr [rbp - 0x3a]
10000abd3:	mov	word ptr [r15 + 0x28], ax
10000abd8:	movzx	ecx, word ptr [rbp - 0x38]
10000abdc:	mov	r12, rcx
10000abdf:	mov	word ptr [r15 + 0x2a], cx
10000abe4:	mov	qword ptr [rbp - 0x60], rax
10000abe8:	lea	rdi, [rax + 0x1]
10000abec:	xor	eax, eax
10000abee:	mov	qword ptr [r15 + 0x50], rax
10000abf2:	mov	qword ptr [r15 + 0x58], rax
10000abf6:	mov	qword ptr [r15 + 0x78], rax
10000abfa:	mov	qword ptr [r15 + 0x80], rax
10000ac01:	call	0x100019848 ## symbol stub for: _malloc
10000ac06:	mov	qword ptr [r15 + 0x70], rax
10000ac0a:	mov	ebx, 0x4
10000ac0f:	test	rax, rax
10000ac12:	je	0x10000ab33
10000ac18:	mov	r13, rax
10000ac1b:	test	r12w, r12w
10000ac1f:	je	0x10000ac36
10000ac21:	mov	rdi, r12
10000ac24:	call	0x100019848 ## symbol stub for: _malloc
10000ac29:	mov	qword ptr [r15 + 0x58], rax
10000ac2d:	test	rax, rax
10000ac30:	je	0x10000ab33
10000ac36:	mov	rcx, qword ptr [r14]
10000ac39:	mov	edx, 0x1
10000ac3e:	mov	rdi, r13
10000ac41:	mov	rsi, qword ptr [rbp - 0x60]
10000ac45:	call	0x100019800 ## symbol stub for: _fread
10000ac4a:	cmp	rax, 0x1
10000ac4e:	jne	0x10000ade2
10000ac54:	movzx	esi, word ptr [r15 + 0x2a]
10000ac59:	test	rsi, rsi
10000ac5c:	je	0x10000ac79
10000ac5e:	mov	rdi, qword ptr [r15 + 0x58]
10000ac62:	mov	rcx, qword ptr [r14]
10000ac65:	mov	edx, 0x1
10000ac6a:	call	0x100019800 ## symbol stub for: _fread
10000ac6f:	cmp	rax, 0x1
10000ac73:	jne	0x10000ade2
10000ac79:	mov	rax, qword ptr [r15 + 0x70]
10000ac7d:	mov	r14, qword ptr [rbp - 0x58]
10000ac81:	movzx	ecx, word ptr [r14 + 0x28]
10000ac86:	mov	byte ptr [rax + rcx], 0x0
10000ac8a:	movzx	edi, word ptr [r15 + 0x28]
10000ac8f:	inc	rdi
10000ac92:	call	0x100019848 ## symbol stub for: _malloc
10000ac97:	mov	qword ptr [r15 + 0x50], rax
10000ac9b:	test	rax, rax
10000ac9e:	je	0x10000ab33
10000aca4:	mov	rsi, qword ptr [r15 + 0x70]
10000aca8:	mov	rdi, rax
10000acab:	call	0x100019914 ## symbol stub for: _strcpy
10000acb0:	mov	rdi, r15
10000acb3:	call	0x10000ae72
10000acb8:	lea	rcx, [rip + 0x1eae1]
10000acbf:	mov	dword ptr [rcx], eax
10000acc1:	movzx	r8d, word ptr [r15 + 0x2]
10000acc6:	movzx	r9d, word ptr [r14 + 0x2]
10000accb:	cmp	r8w, r9w
10000accf:	je	0x10000acff
10000acd1:	lea	rbx, [rip + 0x1ee58]
10000acd8:	lea	rcx, [rip + 0x17102] ## literal pool for: "Local Version Needed (%d) does not match CD (%d): "
10000acdf:	mov	edx, 0x13f1
10000ace4:	mov	rdi, rbx
10000ace7:	mov	esi, 0x0
10000acec:	xor	eax, eax
10000acee:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000acf3:	mov	rsi, qword ptr [r14 + 0x70]
10000acf7:	mov	rdi, rbx
10000acfa:	call	0x100003e67
10000acff:	movzx	eax, word ptr [r15 + 0x3a]
10000ad04:	cmp	ax, word ptr [r14 + 0x4]
10000ad09:	je	0x10000ad1b
10000ad0b:	mov	rsi, qword ptr [r14 + 0x70]
10000ad0f:	lea	rdi, [rip + 0x170fe] ## literal pool for: "Local Entry Flag does not match CD: "
10000ad16:	call	0x100003e67
10000ad1b:	mov	rax, qword ptr [r15 + 0x10]
10000ad1f:	cmp	rax, qword ptr [r14 + 0x10]
10000ad23:	je	0x10000ad35
10000ad25:	mov	rsi, qword ptr [r14 + 0x70]
10000ad29:	lea	rdi, [rip + 0x17109] ## literal pool for: "Local Entry CRC does not match CD: "
10000ad30:	call	0x100003e67
10000ad35:	movups	xmm0, xmmword ptr [r14 + 0x18]
10000ad3a:	movups	xmmword ptr [r15 + 0x18], xmm0
10000ad3f:	mov	rax, qword ptr [rbp - 0x68]
10000ad43:	mov	qword ptr [rax], r15
10000ad46:	xor	ebx, ebx
10000ad48:	jmp	0x10000ab33
10000ad4d:	mov	rdi, rcx
10000ad50:	call	0x1000197be ## symbol stub for: _fclose
10000ad55:	mov	qword ptr [r14], 0x0
10000ad5c:	mov	rsi, qword ptr [r13 + 0x70]
10000ad60:	lea	rdi, [rip + 0x1703e] ## literal pool for: "Did not find entry for "
10000ad67:	call	0x100003e67
10000ad6c:	mov	ebx, 0x3
10000ad71:	jmp	0x10000ab33
10000ad76:	mov	rdi, qword ptr [r14]
10000ad79:	call	0x1000197d0 ## symbol stub for: _ferror
10000ad7e:	mov	ebx, eax
10000ad80:	call	0x100019764 ## symbol stub for: ___error
10000ad85:	mov	edi, dword ptr [rax]
10000ad87:	call	0x10001991a ## symbol stub for: _strerror
10000ad8c:	lea	rdi, [rip + 0x1702a] ## literal pool for: "reading local entry: "
10000ad93:	mov	rsi, rax
10000ad96:	call	0x100003e67
10000ad9b:	mov	rdi, qword ptr [r14]
10000ad9e:	call	0x1000197be ## symbol stub for: _fclose
10000ada3:	xor	eax, eax
10000ada5:	test	ebx, ebx
10000ada7:	setne	al
10000adaa:	lea	ebx, [rax + 8*rax + 0x2]
10000adae:	jmp	0x10000ab33
10000adb3:	mov	ebx, 0x9
10000adb8:	jmp	0x10000ab33
10000adbd:	lea	rdi, [rip + 0x1700f] ## literal pool for: "reading entry"
10000adc4:	lea	rsi, [rip + 0xf9ec] ## literal pool for: ""
10000adcb:	call	0x100003e67
10000add0:	mov	rdi, qword ptr [r14]
10000add3:	call	0x1000197be ## symbol stub for: _fclose
10000add8:	mov	ebx, 0x4
10000addd:	jmp	0x10000ab33
10000ade2:	mov	rdi, qword ptr [r14]
10000ade5:	call	0x1000197d0 ## symbol stub for: _ferror
10000adea:	xor	ecx, ecx
10000adec:	test	eax, eax
10000adee:	setne	cl
10000adf1:	lea	ebx, [rcx + 8*rcx + 0x2]
10000adf5:	jmp	0x10000ab33
10000adfa:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
10000adff:	push	rbp
10000ae00:	mov	rbp, rsp
10000ae03:	push	rbx
10000ae04:	push	rax
10000ae05:	mov	rcx, rdi
10000ae08:	mov	ebx, dword ptr [rsi]
10000ae0a:	mov	dword ptr [rbp - 0xc], ebx
10000ae0d:	cmp	bl, 0x50
10000ae10:	jne	0x10000ae16
10000ae12:	mov	byte ptr [rbp - 0xc], 0x50
10000ae16:	cmp	byte ptr [rbp - 0xb], 0x4b
10000ae1a:	jne	0x10000ae20
10000ae1c:	mov	byte ptr [rbp - 0xb], 0x4b
10000ae20:	lea	rdi, [rbp - 0x10]
10000ae24:	mov	esi, 0x1
10000ae29:	mov	edx, 0x4
10000ae2e:	call	0x100019800 ## symbol stub for: _fread
10000ae33:	mov	rcx, rax
10000ae36:	xor	eax, eax
10000ae38:	cmp	rcx, 0x4
10000ae3c:	jne	0x10000ae6b
10000ae3e:	cmp	bl, byte ptr [rbp - 0x10]
10000ae41:	jne	0x10000ae6b
10000ae43:	xor	eax, eax
10000ae45:	cmp	rax, 0x3
10000ae49:	je	0x10000ae66
10000ae4b:	lea	rcx, [rax + 0x1]
10000ae4f:	mov	dl, byte ptr [rbp + rax - 0xb]
10000ae53:	cmp	dl, byte ptr [rbp + rax - 0xf]
10000ae57:	mov	rax, rcx
10000ae5a:	je	0x10000ae45
10000ae5c:	xor	eax, eax
10000ae5e:	cmp	ecx, 0x4
10000ae61:	sete	al
10000ae64:	jmp	0x10000ae6b
10000ae66:	mov	eax, 0x1
10000ae6b:	add	rsp, 0x8
10000ae6f:	pop	rbx
10000ae70:	pop	rbp
10000ae71:	ret
10000ae72:	push	rbp
10000ae73:	mov	rbp, rsp
10000ae76:	lea	r8, [rip + 0x1e923]
10000ae7d:	mov	dword ptr [r8], 0x0
10000ae84:	mov	rcx, qword ptr [rdi + 0x58]
10000ae88:	xor	eax, eax
10000ae8a:	test	rcx, rcx
10000ae8d:	je	0x10000aee9
10000ae8f:	movzx	esi, word ptr [rdi + 0x2a]
10000ae93:	lea	rsi, [rcx + rsi - 0x4]
10000ae98:	cmp	rsi, rcx
10000ae9b:	jbe	0x10000aee9
10000ae9d:	cmp	word ptr [rcx], 0x1
10000aea1:	je	0x10000aeb3
10000aea3:	movzx	edx, word ptr [rcx + 0x2]
10000aea7:	lea	rcx, [rdx + rcx + 0x4]
10000aeac:	cmp	rcx, rsi
10000aeaf:	jb	0x10000ae9d
10000aeb1:	jmp	0x10000aee9
10000aeb3:	mov	dword ptr [r8], 0x1
10000aeba:	mov	edx, 0xffffffff
10000aebf:	cmp	qword ptr [rdi + 0x20], rdx
10000aec3:	jne	0x10000aed3
10000aec5:	mov	rax, qword ptr [rcx + 0x4]
10000aec9:	mov	qword ptr [rdi + 0x20], rax
10000aecd:	add	rcx, 0xc
10000aed1:	jmp	0x10000aed7
10000aed3:	add	rcx, 0x4
10000aed7:	mov	eax, 0x1
10000aedc:	cmp	qword ptr [rdi + 0x18], rdx
10000aee0:	jne	0x10000aee9
10000aee2:	mov	rcx, qword ptr [rcx]
10000aee5:	mov	qword ptr [rdi + 0x18], rcx
10000aee9:	pop	rbp
10000aeea:	ret
10000aeeb:	push	rbp
10000aeec:	mov	rbp, rsp
10000aeef:	push	r15
10000aef1:	push	r14
10000aef3:	push	r13
10000aef5:	push	r12
10000aef7:	push	rbx
10000aef8:	sub	rsp, 0xc8
10000aeff:	mov	rax, qword ptr [rip + 0x1910a] ## literal pool symbol address: ___stack_chk_guard
10000af06:	mov	rax, qword ptr [rax]
10000af09:	mov	qword ptr [rbp - 0x30], rax
10000af0d:	lea	rcx, [rip + 0x2003c]
10000af14:	xor	eax, eax
10000af16:	mov	qword ptr [rcx], rax
10000af19:	lea	rcx, [rip + 0x1e9b8]
10000af20:	mov	qword ptr [rcx], rax
10000af23:	lea	rcx, [rip + 0x2001e]
10000af2a:	mov	qword ptr [rcx], rax
10000af2d:	lea	r14, [rip + 0x2000c]
10000af34:	mov	word ptr [r14], 0x0
10000af3a:	lea	r15, [rip + 0x1e99f]
10000af41:	mov	dword ptr [r15], 0x0
10000af48:	lea	r13, [rip + 0x20009]
10000af4f:	mov	rbx, qword ptr [r13]
10000af53:	test	rbx, rbx
10000af56:	je	0x10000af90
10000af58:	cmp	byte ptr [rbx], 0x0
10000af5b:	je	0x10000af90
10000af5d:	lea	rsi, [rip + 0x1159e] ## literal pool for: "-"
10000af64:	mov	rdi, rbx
10000af67:	call	0x10001990e ## symbol stub for: _strcmp
10000af6c:	test	eax, eax
10000af6e:	je	0x10000af90
10000af70:	lea	rsi, [rip + 0x11039] ## literal pool for: "r"
10000af77:	mov	rdi, rbx
10000af7a:	call	0x1000197e8 ## symbol stub for: _fopen
10000af7f:	test	rax, rax
10000af82:	je	0x10000af90
10000af84:	mov	dword ptr [r15], 0x1
10000af8b:	mov	r12b, 0x1
10000af8e:	jmp	0x10000affa
10000af90:	lea	rax, [rip + 0x1e7f5]
10000af97:	cmp	dword ptr [rax], 0x0
10000af9a:	lea	rax, [rip + 0x1e70f]
10000afa1:	mov	ebx, dword ptr [rax]
10000afa3:	jne	0x10000b043
10000afa9:	cmp	ebx, 0x2
10000afac:	je	0x10000b043
10000afb2:	lea	rax, [rip + 0x1e84f]
10000afb9:	mov	rdi, qword ptr [rax]
10000afbc:	lea	rax, [rip + 0x1e855]
10000afc3:	mov	rsi, qword ptr [rax]
10000afc6:	call	0x10001990e ## symbol stub for: _strcmp
10000afcb:	test	eax, eax
10000afcd:	je	0x10000aff5
10000afcf:	cmp	ebx, 0x1
10000afd2:	jne	0x10000afe7
10000afd4:	lea	rdi, [rip + 0x16e82] ## literal pool for: "No .zip file found\n        "
10000afdb:	lea	rsi, [rip + 0x16e97] ## literal pool for: "(If all you have are splits (.z01, .z02, ...) and no .zip, try -FF)"
10000afe2:	call	0x100003e67
10000afe7:	mov	rsi, qword ptr [r13]
10000afeb:	mov	edi, 0x12
10000aff0:	call	0x1000037b0
10000aff5:	xor	r12d, r12d
10000aff8:	xor	eax, eax
10000affa:	lea	rbx, [rip + 0x1e6af]
10000b001:	cmp	dword ptr [rbx], 0x2
10000b004:	je	0x10000b04f
10000b006:	test	r12b, r12b
10000b009:	mov	r12d, 0x0
10000b00f:	je	0x10000b0e5
10000b015:	mov	rdi, rax
10000b018:	call	0x1000197be ## symbol stub for: _fclose
10000b01d:	cmp	dword ptr [rbx], 0x2
10000b020:	lea	rax, [rip + 0x1e691]
10000b027:	jne	0x10000b10e
10000b02d:	cmp	dword ptr [rax], 0x0
10000b030:	jne	0x10000b10e
10000b036:	mov	r12b, 0x1
10000b039:	call	0x10000c7ad
10000b03e:	mov	r14d, eax
10000b041:	jmp	0x10000b057
10000b043:	xor	r12d, r12d
10000b046:	cmp	ebx, 0x2
10000b049:	jne	0x10000b0e5
10000b04f:	call	0x10000c7ad
10000b054:	xor	r14d, r14d
10000b057:	test	r12b, r12b
10000b05a:	je	0x10000b0e2
10000b060:	lea	rax, [rip + 0x1e649]
10000b067:	cmp	dword ptr [rax], 0x2
10000b06a:	je	0x10000b0e2
10000b06c:	lea	rax, [rip + 0x1fed5]
10000b073:	mov	r15, qword ptr [rax]
10000b076:	test	r15, r15
10000b079:	je	0x10000b0e2
10000b07b:	mov	rax, r15
10000b07e:	shr	rax, 0x3d
10000b082:	mov	r12d, 0x4
10000b088:	jne	0x10000b0e5
10000b08a:	lea	rdi, [8*r15]
10000b092:	call	0x100019848 ## symbol stub for: _malloc
10000b097:	lea	rcx, [rip + 0x1fec2]
10000b09e:	mov	qword ptr [rcx], rax
10000b0a1:	test	rax, rax
10000b0a4:	je	0x10000b0e5
10000b0a6:	lea	rcx, [rip + 0x1e82b]
10000b0ad:	mov	rcx, qword ptr [rcx]
10000b0b0:	test	rcx, rcx
10000b0b3:	je	0x10000b0cb
10000b0b5:	mov	rdx, rax
10000b0b8:	mov	qword ptr [rdx], rcx
10000b0bb:	add	rdx, 0x8
10000b0bf:	mov	rcx, qword ptr [rcx + 0x98]
10000b0c6:	test	rcx, rcx
10000b0c9:	jne	0x10000b0b8
10000b0cb:	lea	rcx, [rip + 0x2b6a]
10000b0d2:	mov	edx, 0x8
10000b0d7:	mov	rdi, rax
10000b0da:	mov	rsi, r15
10000b0dd:	call	0x1000198a8 ## symbol stub for: _qsort
10000b0e2:	mov	r12d, r14d
10000b0e5:	mov	rax, qword ptr [rip + 0x18f24] ## literal pool symbol address: ___stack_chk_guard
10000b0ec:	mov	rax, qword ptr [rax]
10000b0ef:	cmp	rax, qword ptr [rbp - 0x30]
10000b0f3:	jne	0x10000bc05
10000b0f9:	mov	eax, r12d
10000b0fc:	add	rsp, 0xc8
10000b103:	pop	rbx
10000b104:	pop	r12
10000b106:	pop	r13
10000b108:	pop	r14
10000b10a:	pop	r15
10000b10c:	pop	rbp
10000b10d:	ret
10000b10e:	lea	r15, [rip + 0x1e6f3]
10000b115:	mov	rdi, qword ptr [r15]
10000b118:	lea	rsi, [rip + 0x10e91] ## literal pool for: "r"
10000b11f:	call	0x1000197e8 ## symbol stub for: _fopen
10000b124:	lea	r12, [rip + 0x1e6d5]
10000b12b:	mov	qword ptr [r12], rax
10000b12f:	test	rax, rax
10000b132:	je	0x10000b176
10000b134:	mov	rdi, rax
10000b137:	mov	rsi, -0x20000
10000b13e:	mov	edx, 0x2
10000b143:	call	0x10001980c ## symbol stub for: _fseeko
10000b148:	test	eax, eax
10000b14a:	je	0x10000b190
10000b14c:	mov	rdi, qword ptr [r12]
10000b150:	xor	esi, esi
10000b152:	xor	edx, edx
10000b154:	call	0x10001980c ## symbol stub for: _fseeko
10000b159:	test	eax, eax
10000b15b:	je	0x10000b19f
10000b15d:	mov	rdi, qword ptr [r12]
10000b161:	call	0x1000197be ## symbol stub for: _fclose
10000b166:	mov	qword ptr [r12], 0x0
10000b16e:	mov	rsi, qword ptr [r15]
10000b171:	jmp	0x10000b22e
10000b176:	mov	rsi, qword ptr [r15]
10000b179:	lea	rdi, [rip + 0x177da] ## literal pool for: "could not open input archive"
10000b180:	call	0x100003e67
10000b185:	mov	r14d, 0x12
10000b18b:	jmp	0x10000b4a7
10000b190:	mov	rdi, qword ptr [r12]
10000b194:	call	0x100019818 ## symbol stub for: _ftello
10000b199:	cmp	rax, -0x1
10000b19d:	je	0x10000b14c
10000b19f:	mov	rdi, qword ptr [r12]
10000b1a3:	lea	rsi, [rip + 0x1712f] ## literal pool for: "PK\005\006"
10000b1aa:	call	0x10000fd76
10000b1af:	mov	rdi, qword ptr [r12]
10000b1b3:	test	eax, eax
10000b1b5:	je	0x10000b245
10000b1bb:	call	0x100019818 ## symbol stub for: _ftello
10000b1c0:	mov	r15, rax
10000b1c3:	mov	rdi, qword ptr [r12]
10000b1c7:	lea	rsi, [rip + 0x1710b] ## literal pool for: "PK\005\006"
10000b1ce:	call	0x10000fd76
10000b1d3:	mov	rdi, qword ptr [r12]
10000b1d7:	test	eax, eax
10000b1d9:	je	0x10000b1fe
10000b1db:	lea	rbx, [rip + 0x170f7] ## literal pool for: "PK\005\006"
10000b1e2:	call	0x100019818 ## symbol stub for: _ftello
10000b1e7:	mov	r15, rax
10000b1ea:	mov	rdi, qword ptr [r12]
10000b1ee:	mov	rsi, rbx
10000b1f1:	call	0x10000fd76
10000b1f6:	mov	rdi, qword ptr [r12]
10000b1fa:	test	eax, eax
10000b1fc:	jne	0x10000b1e2
10000b1fe:	mov	rsi, r15
10000b201:	xor	edx, edx
10000b203:	call	0x10001980c ## symbol stub for: _fseeko
10000b208:	mov	rcx, qword ptr [r12]
10000b20c:	test	eax, eax
10000b20e:	je	0x10000b29b
10000b214:	mov	rdi, rcx
10000b217:	call	0x1000197be ## symbol stub for: _fclose
10000b21c:	mov	qword ptr [r12], 0x0
10000b224:	lea	rax, [rip + 0x1e5dd]
10000b22b:	mov	rsi, qword ptr [rax]
10000b22e:	lea	rdi, [rip + 0x17086] ## literal pool for: "unable to seek in input file "
10000b235:	call	0x100003e67
10000b23a:	mov	r14d, 0xb
10000b240:	jmp	0x10000b4a7
10000b245:	call	0x1000197be ## symbol stub for: _fclose
10000b24a:	mov	qword ptr [r12], 0x0
10000b252:	cmp	dword ptr [rbx], 0x1
10000b255:	jne	0x10000b46d
10000b25b:	lea	rdi, [rip + 0x17715] ## literal pool for: "bad archive - missing end signature"
10000b262:	lea	rbx, [rip + 0xf54e] ## literal pool for: ""
10000b269:	mov	rsi, rbx
10000b26c:	call	0x100003e67
10000b271:	lea	rdi, [rip + 0x17723] ## literal pool for: "(If downloaded, was binary mode used?  If not, the"
10000b278:	mov	rsi, rbx
10000b27b:	call	0x100003e67
10000b280:	lea	rdi, [rip + 0x17747] ## literal pool for: " archive may be scrambled and not recoverable)"
10000b287:	mov	rsi, rbx
10000b28a:	call	0x100003e67
10000b28f:	lea	rdi, [rip + 0x17767] ## literal pool for: "Can't use -F to fix (try -FF)"
10000b296:	jmp	0x10000b499
10000b29b:	lea	rbx, [rbp - 0x70]
10000b29f:	mov	esi, 0x1
10000b2a4:	mov	edx, 0x12
10000b2a9:	mov	rdi, rbx
10000b2ac:	call	0x100019800 ## symbol stub for: _fread
10000b2b1:	movzx	eax, word ptr [rbx]
10000b2b4:	lea	rcx, [rax + 0x1]
10000b2b8:	lea	rdx, [rip + 0x1e569]
10000b2bf:	mov	qword ptr [rdx], rcx
10000b2c2:	lea	rcx, [rip + 0x1e567]
10000b2c9:	mov	qword ptr [rcx], rax
10000b2cc:	movzx	eax, word ptr [rbx + 0x2]
10000b2d0:	mov	qword ptr [rbp - 0xb0], rax
10000b2d7:	mov	eax, dword ptr [rbx + 0x8]
10000b2da:	mov	qword ptr [rbp - 0xa8], rax
10000b2e1:	mov	eax, dword ptr [rbx + 0xc]
10000b2e4:	mov	qword ptr [rbp - 0xb8], rax
10000b2eb:	movzx	eax, word ptr [rbx + 0x6]
10000b2ef:	movzx	ebx, word ptr [rbx + 0x10]
10000b2f3:	mov	word ptr [r14], bx
10000b2f7:	test	bx, bx
10000b2fa:	mov	qword ptr [rbp - 0xc0], rax
10000b301:	je	0x10000b356
10000b303:	lea	rdi, [rbx + 0x1]
10000b307:	call	0x100019848 ## symbol stub for: _malloc
10000b30c:	lea	rcx, [rip + 0x1e5d5]
10000b313:	mov	qword ptr [rcx], rax
10000b316:	test	rax, rax
10000b319:	je	0x10000c6f1
10000b31f:	mov	rcx, qword ptr [r12]
10000b323:	mov	edx, 0x1
10000b328:	mov	rdi, rax
10000b32b:	mov	rsi, rbx
10000b32e:	call	0x100019800 ## symbol stub for: _fread
10000b333:	lea	rbx, [rip + 0x1e5ae]
10000b33a:	mov	rdi, qword ptr [rbx]
10000b33d:	cmp	rax, 0x1
10000b341:	jne	0x10000b4c5
10000b347:	movzx	eax, word ptr [r14]
10000b34b:	mov	byte ptr [rdi + rax], 0x0
10000b34f:	mov	rax, qword ptr [rbp - 0xc0]
10000b356:	test	rax, rax
10000b359:	je	0x10000b4af
10000b35f:	mov	r14d, 0x1
10000b365:	lea	rax, [rip + 0x1e4bc]
10000b36c:	cmp	qword ptr [rax], 0x1
10000b370:	jne	0x10000b4e8
10000b376:	cmp	r14, 0x1
10000b37a:	sete	al
10000b37d:	lea	rcx, [rip + 0x1e520]
10000b384:	cmp	dword ptr [rcx], 0x0
10000b387:	sete	cl
10000b38a:	test	al, cl
10000b38c:	jne	0x10000b3bb
10000b38e:	lea	rax, [rip + 0x1e407]
10000b395:	cmp	dword ptr [rax], 0x0
10000b398:	jne	0x10000b3bb
10000b39a:	lea	rax, [rip + 0x1e467]
10000b3a1:	mov	rdi, qword ptr [rax]
10000b3a4:	lea	rax, [rip + 0x1e46d]
10000b3ab:	mov	rsi, qword ptr [rax]
10000b3ae:	call	0x10001990e ## symbol stub for: _strcmp
10000b3b3:	test	eax, eax
10000b3b5:	je	0x10000b5f5
10000b3bb:	lea	rax, [rip + 0x1e2ee]
10000b3c2:	mov	ebx, dword ptr [rax]
10000b3c4:	cmp	ebx, 0x1
10000b3c7:	jne	0x10000b3ea
10000b3c9:	lea	rax, [rip + 0x1e438]
10000b3d0:	mov	rdi, qword ptr [rax]
10000b3d3:	lea	rax, [rip + 0x1e43e]
10000b3da:	mov	rsi, qword ptr [rax]
10000b3dd:	call	0x10001990e ## symbol stub for: _strcmp
10000b3e2:	test	eax, eax
10000b3e4:	je	0x10000b67a
10000b3ea:	cmp	ebx, 0x1
10000b3ed:	sete	al
10000b3f0:	cmp	r14, 0x1
10000b3f4:	sete	cl
10000b3f7:	test	cl, al
10000b3f9:	lea	rax, [rip + 0x1e2b8]
10000b400:	jne	0x10000b58b
10000b406:	cmp	dword ptr [rax], 0x0
10000b409:	jne	0x10000b58b
10000b40f:	xor	eax, eax
10000b411:	mov	qword ptr [rbp - 0xa8], rax
10000b418:	mov	rdi, qword ptr [r12]
10000b41c:	add	r15, -0x18
10000b420:	mov	rsi, r15
10000b423:	xor	edx, edx
10000b425:	call	0x10001980c ## symbol stub for: _fseeko
10000b42a:	mov	rdi, qword ptr [r12]
10000b42e:	test	eax, eax
10000b430:	je	0x10000b6a9
10000b436:	call	0x1000197be ## symbol stub for: _fclose
10000b43b:	mov	qword ptr [r12], 0x0
10000b443:	lea	rax, [rip + 0x1e266]
10000b44a:	mov	ebx, dword ptr [rax]
10000b44c:	call	0x100019764 ## symbol stub for: ___error
10000b451:	mov	edi, dword ptr [rax]
10000b453:	call	0x10001991a ## symbol stub for: _strerror
10000b458:	cmp	ebx, 0x1
10000b45b:	jne	0x10000b80e
10000b461:	lea	rdi, [rip + 0x1787e] ## literal pool for: "bad archive - could not seek back to Zip64 EOCDL: "
10000b468:	jmp	0x10000b65f
10000b46d:	lea	rdi, [rip + 0x175a7] ## literal pool for: "missing end signature--probably not a zip file (did you"
10000b474:	lea	rbx, [rip + 0xf33c] ## literal pool for: ""
10000b47b:	mov	rsi, rbx
10000b47e:	call	0x100003e67
10000b483:	lea	rdi, [rip + 0x175c9] ## literal pool for: "remember to use binary mode when you transferred it?)"
10000b48a:	mov	rsi, rbx
10000b48d:	call	0x100003e67
10000b492:	lea	rdi, [rip + 0x175f0] ## literal pool for: "(if you are trying to read a damaged archive try -F)"
10000b499:	mov	rsi, rbx
10000b49c:	call	0x100003e67
10000b4a1:	mov	r14d, 0x3
10000b4a7:	mov	r12b, 0x1
10000b4aa:	jmp	0x10000b057
10000b4af:	mov	rdi, qword ptr [r12]
10000b4b3:	call	0x1000197be ## symbol stub for: _fclose
10000b4b8:	mov	qword ptr [r12], 0x0
10000b4c0:	xor	r14d, r14d
10000b4c3:	jmp	0x10000b4a7
10000b4c5:	call	0x100019806 ## symbol stub for: _free
10000b4ca:	mov	qword ptr [rbx], 0x0
10000b4d1:	mov	rdi, qword ptr [r12]
10000b4d5:	call	0x1000197d0 ## symbol stub for: _ferror
10000b4da:	xor	ecx, ecx
10000b4dc:	test	eax, eax
10000b4de:	setne	cl
10000b4e1:	lea	r14d, [rcx + 8*rcx + 0x2]
10000b4e6:	jmp	0x10000b4a7
10000b4e8:	lea	rax, [rip + 0x1e319]
10000b4ef:	mov	rdi, qword ptr [rax]
10000b4f2:	call	0x100019920 ## symbol stub for: _strlen
10000b4f7:	lea	rcx, [rip + 0x1e1ba]
10000b4fe:	cmp	dword ptr [rcx], 0x0
10000b501:	je	0x10000b50f
10000b503:	lea	rdi, [rip + 0x175b4] ## literal pool for: "Adjusting split archives not yet supported"
10000b50a:	jmp	0x10000b66e
10000b50f:	cmp	eax, 0x4
10000b512:	jl	0x10000b562
10000b514:	mov	r14, qword ptr [r13]
10000b518:	movsxd	rbx, eax
10000b51b:	cmp	byte ptr [r14 + rbx - 0x4], 0x2e
10000b521:	jne	0x10000b562
10000b523:	movsx	edi, byte ptr [r14 + rbx - 0x3]
10000b529:	call	0x10001978e ## symbol stub for: ___toupper
10000b52e:	cmp	eax, 0x5a
10000b531:	jne	0x10000b562
10000b533:	movsx	edi, byte ptr [r14 + rbx - 0x2]
10000b539:	call	0x10001978e ## symbol stub for: ___toupper
10000b53e:	cmp	eax, 0x49
10000b541:	jne	0x10000b562
10000b543:	movsx	edi, byte ptr [r14 + rbx - 0x1]
10000b549:	call	0x10001978e ## symbol stub for: ___toupper
10000b54e:	cmp	eax, 0x50
10000b551:	jne	0x10000b562
10000b553:	lea	rax, [rip + 0x1e2ce]
10000b55a:	mov	r14, qword ptr [rax]
10000b55d:	jmp	0x10000b376
10000b562:	lea	rdi, [rip + 0x1136f] ## literal pool for: "archive name must end in .zip for splits"
10000b569:	lea	rsi, [rip + 0xf247] ## literal pool for: ""
10000b570:	call	0x100003e67
10000b575:	mov	rdi, qword ptr [r12]
10000b579:	call	0x1000197be ## symbol stub for: _fclose
10000b57e:	mov	qword ptr [r12], 0x0
10000b586:	jmp	0x10000b69e
10000b58b:	cmp	dword ptr [rbp - 0xb8], -0x1
10000b592:	mov	rax, qword ptr [rbp - 0xa8]
10000b599:	je	0x10000b612
10000b59b:	cmp	eax, -0x1
10000b59e:	je	0x10000b612
10000b5a0:	mov	rsi, r15
10000b5a3:	sub	rsi, rax
10000b5a6:	add	rsi, -0x50
10000b5aa:	mov	rdi, qword ptr [r12]
10000b5ae:	xor	edx, edx
10000b5b0:	call	0x10001980c ## symbol stub for: _fseeko
10000b5b5:	mov	rdi, qword ptr [r12]
10000b5b9:	test	eax, eax
10000b5bb:	je	0x10000b81d
10000b5c1:	call	0x1000197be ## symbol stub for: _fclose
10000b5c6:	mov	qword ptr [r12], 0x0
10000b5ce:	lea	rax, [rip + 0x1e0db]
10000b5d5:	mov	ebx, dword ptr [rax]
10000b5d7:	call	0x100019764 ## symbol stub for: ___error
10000b5dc:	mov	edi, dword ptr [rax]
10000b5de:	call	0x10001991a ## symbol stub for: _strerror
10000b5e3:	cmp	ebx, 0x1
10000b5e6:	jne	0x10000b80e
10000b5ec:	lea	rdi, [rip + 0x1754d] ## literal pool for: "could not seek back to start of central directory: "
10000b5f3:	jmp	0x10000b65f
10000b5f5:	mov	rdi, qword ptr [r12]
10000b5f9:	call	0x1000197be ## symbol stub for: _fclose
10000b5fe:	mov	qword ptr [r12], 0x0
10000b606:	lea	rdi, [rip + 0x174dc] ## literal pool for: "cannot update a split archive (use --out option)"
10000b60d:	jmp	0x10000b692
10000b612:	mov	rdi, qword ptr [r12]
10000b616:	lea	rsi, [r15 - 0x18]
10000b61a:	xor	edx, edx
10000b61c:	call	0x10001980c ## symbol stub for: _fseeko
10000b621:	mov	rdi, qword ptr [r12]
10000b625:	test	eax, eax
10000b627:	je	0x10000b84e
10000b62d:	call	0x1000197be ## symbol stub for: _fclose
10000b632:	mov	qword ptr [r12], 0x0
10000b63a:	lea	rax, [rip + 0x1e06f]
10000b641:	mov	ebx, dword ptr [rax]
10000b643:	call	0x100019764 ## symbol stub for: ___error
10000b648:	mov	edi, dword ptr [rax]
10000b64a:	call	0x10001991a ## symbol stub for: _strerror
10000b64f:	cmp	ebx, 0x1
10000b652:	jne	0x10000b80e
10000b658:	lea	rdi, [rip + 0x17559] ## literal pool for: "could not seek back to Zip64 EOCDL: "
10000b65f:	mov	rsi, rax
10000b662:	call	0x100003e67
10000b667:	lea	rdi, [rip + 0x17506] ## literal pool for: "(try -FF)"
10000b66e:	lea	rsi, [rip + 0xf142] ## literal pool for: ""
10000b675:	jmp	0x10000b49c
10000b67a:	mov	rdi, qword ptr [r12]
10000b67e:	call	0x1000197be ## symbol stub for: _fclose
10000b683:	mov	qword ptr [r12], 0x0
10000b68b:	lea	rdi, [rip + 0x17488] ## literal pool for: "must use --out when fixing an archive"
10000b692:	lea	rsi, [rip + 0xf11e] ## literal pool for: ""
10000b699:	call	0x100003e67
10000b69e:	mov	r14d, 0x10
10000b6a4:	jmp	0x10000b4a7
10000b6a9:	lea	rsi, [rip + 0x16ead] ## literal pool for: "PK\006\007"
10000b6b0:	call	0x10000adff
10000b6b5:	test	eax, eax
10000b6b7:	je	0x10000bca9
10000b6bd:	mov	rdi, qword ptr [r12]
10000b6c1:	call	0x100019818 ## symbol stub for: _ftello
10000b6c6:	mov	qword ptr [rbp - 0xc0], rax
10000b6cd:	mov	rcx, qword ptr [r12]
10000b6d1:	lea	rdi, [rbp - 0x70]
10000b6d5:	mov	esi, 0x10
10000b6da:	mov	edx, 0x1
10000b6df:	call	0x100019800 ## symbol stub for: _fread
10000b6e4:	mov	rdi, qword ptr [r12]
10000b6e8:	cmp	rax, 0x1
10000b6ec:	jne	0x10000b94e
10000b6f2:	lea	rsi, [rip + 0x16be0] ## literal pool for: "PK\005\006"
10000b6f9:	call	0x10000adff
10000b6fe:	test	eax, eax
10000b700:	je	0x10000b976
10000b706:	mov	r14d, dword ptr [rbp - 0x70]
10000b70a:	mov	eax, dword ptr [rbp - 0x64]
10000b70d:	mov	rcx, qword ptr [rbp - 0x6c]
10000b711:	add	rcx, qword ptr [rbp - 0xa8]
10000b718:	mov	qword ptr [rbp - 0xb8], rcx
10000b71f:	lea	rcx, [rip + 0x1e102]
10000b726:	mov	qword ptr [rcx], rax
10000b729:	dec	rax
10000b72c:	lea	rcx, [rip + 0x1e0fd]
10000b733:	mov	qword ptr [rcx], rax
10000b736:	cmp	r14, rax
10000b739:	je	0x10000b7cd
10000b73f:	mov	rdi, qword ptr [r12]
10000b743:	call	0x1000197be ## symbol stub for: _fclose
10000b748:	mov	qword ptr [r12], 0x0
10000b750:	lea	rax, [rip + 0x1e0b1]
10000b757:	mov	rdi, qword ptr [rax]
10000b75a:	mov	rsi, r14
10000b75d:	call	0x10001338c
10000b762:	mov	rbx, rax
10000b765:	lea	rsi, [rip + 0x10844] ## literal pool for: "r"
10000b76c:	mov	rdi, rax
10000b76f:	call	0x1000197e8 ## symbol stub for: _fopen
10000b774:	mov	qword ptr [r12], rax
10000b778:	test	rax, rax
10000b77b:	jne	0x10000b7c5
10000b77d:	lea	r15, [rip + 0x1082c] ## literal pool for: "r"
10000b784:	mov	rdi, r14
10000b787:	call	0x100013490
10000b78c:	test	eax, eax
10000b78e:	jne	0x10000c6bb
10000b794:	mov	rdi, rbx
10000b797:	call	0x100019806 ## symbol stub for: _free
10000b79c:	lea	rax, [rip + 0x1e065]
10000b7a3:	mov	rdi, qword ptr [rax]
10000b7a6:	mov	rsi, r14
10000b7a9:	call	0x10001338c
10000b7ae:	mov	rbx, rax
10000b7b1:	mov	rdi, rax
10000b7b4:	mov	rsi, r15
10000b7b7:	call	0x1000197e8 ## symbol stub for: _fopen
10000b7bc:	mov	qword ptr [r12], rax
10000b7c0:	test	rax, rax
10000b7c3:	je	0x10000b784
10000b7c5:	mov	rdi, rbx
10000b7c8:	call	0x100019806 ## symbol stub for: _free
10000b7cd:	lea	rax, [rip + 0x1e05c]
10000b7d4:	mov	qword ptr [rax], r14
10000b7d7:	mov	rdi, qword ptr [r12]
10000b7db:	mov	rsi, qword ptr [rbp - 0xb8]
10000b7e2:	xor	edx, edx
10000b7e4:	call	0x10001980c ## symbol stub for: _fseeko
10000b7e9:	mov	rdi, qword ptr [r12]
10000b7ed:	test	eax, eax
10000b7ef:	je	0x10000b9f3
10000b7f5:	call	0x1000197be ## symbol stub for: _fclose
10000b7fa:	mov	qword ptr [r12], 0x0
10000b802:	call	0x100019764 ## symbol stub for: ___error
10000b807:	mov	edi, dword ptr [rax]
10000b809:	call	0x10001991a ## symbol stub for: _strerror
10000b80e:	lea	rdi, [rip + 0x16573] ## literal pool for: "reading archive fseek: "
10000b815:	mov	rsi, rax
10000b818:	jmp	0x10000b49c
10000b81d:	lea	rsi, [rip + 0x16dbd] ## literal pool for: "PK\001\002"
10000b824:	call	0x10000fd76
10000b829:	test	eax, eax
10000b82b:	je	0x10000b99d
10000b831:	mov	rdi, qword ptr [r12]
10000b835:	call	0x100019818 ## symbol stub for: _ftello
10000b83a:	mov	rcx, qword ptr [rbp - 0xb8]
10000b841:	neg	rcx
10000b844:	lea	rax, [rax + rcx - 0x4]
10000b849:	jmp	0x10000b8f2
10000b84e:	lea	rsi, [rip + 0x16d08] ## literal pool for: "PK\006\007"
10000b855:	call	0x10000adff
10000b85a:	test	eax, eax
10000b85c:	je	0x10000b8f0
10000b862:	mov	rdi, qword ptr [r12]
10000b866:	call	0x100019818 ## symbol stub for: _ftello
10000b86b:	mov	rbx, rax
10000b86e:	mov	rcx, qword ptr [r12]
10000b872:	lea	rdi, [rbp - 0x70]
10000b876:	mov	esi, 0x10
10000b87b:	mov	edx, 0x1
10000b880:	call	0x100019800 ## symbol stub for: _fread
10000b885:	mov	rdi, qword ptr [r12]
10000b889:	cmp	rax, 0x1
10000b88d:	jne	0x10000b94e
10000b893:	lea	rsi, [rip + 0x16a3f] ## literal pool for: "PK\005\006"
10000b89a:	call	0x10000adff
10000b89f:	test	eax, eax
10000b8a1:	je	0x10000b976
10000b8a7:	mov	r14, qword ptr [rbp - 0x6c]
10000b8ab:	mov	eax, dword ptr [rbp - 0x64]
10000b8ae:	lea	rcx, [rip + 0x1df73]
10000b8b5:	mov	qword ptr [rcx], rax
10000b8b8:	cmp	rax, 0x1
10000b8bc:	jne	0x10000ba53
10000b8c2:	mov	rdi, qword ptr [r12]
10000b8c6:	mov	rsi, r14
10000b8c9:	xor	edx, edx
10000b8cb:	call	0x10001980c ## symbol stub for: _fseeko
10000b8d0:	mov	rdi, qword ptr [r12]
10000b8d4:	test	eax, eax
10000b8d6:	jne	0x10000b7f5
10000b8dc:	lea	rsi, [rip + 0x16c55] ## literal pool for: "PK\006\006"
10000b8e3:	call	0x10000adff
10000b8e8:	test	eax, eax
10000b8ea:	je	0x10000bc0a
10000b8f0:	xor	eax, eax
10000b8f2:	mov	qword ptr [rbp - 0xa8], rax
10000b8f9:	lea	rax, [rip + 0x1db5c]
10000b900:	cmp	dword ptr [rax], 0x0
10000b903:	je	0x10000b418
10000b909:	cmp	qword ptr [rbp - 0xa8], 0x0
10000b911:	je	0x10000b9bf
10000b917:	mov	rdi, qword ptr [rbp - 0xa8]
10000b91e:	xor	esi, esi
10000b920:	xor	edx, edx
10000b922:	call	0x100016116
10000b927:	lea	rdi, [rip + 0x1e202]
10000b92e:	lea	rcx, [rip + 0x17350] ## literal pool for: "Zip entry offsets appear off by %s bytes - correcting..."
10000b935:	mov	edx, 0x13f1
10000b93a:	mov	esi, 0x0
10000b93f:	mov	r8, rax
10000b942:	xor	eax, eax
10000b944:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000b949:	jmp	0x10000b9db
10000b94e:	call	0x1000197be ## symbol stub for: _fclose
10000b953:	mov	qword ptr [r12], 0x0
10000b95b:	call	0x100019764 ## symbol stub for: ___error
10000b960:	mov	edi, dword ptr [rax]
10000b962:	call	0x10001991a ## symbol stub for: _strerror
10000b967:	lea	rdi, [rip + 0x1726f] ## literal pool for: "reading archive: "
10000b96e:	mov	rsi, rax
10000b971:	jmp	0x10000b235
10000b976:	mov	rdi, qword ptr [r12]
10000b97a:	call	0x1000197be ## symbol stub for: _fclose
10000b97f:	mov	qword ptr [r12], 0x0
10000b987:	lea	rax, [rip + 0x1de7a]
10000b98e:	mov	rsi, qword ptr [rax]
10000b991:	lea	rdi, [rip + 0x17257] ## literal pool for: "unable to read EOCD after seek: "
10000b998:	jmp	0x10000b235
10000b99d:	lea	rdi, [rip + 0x171da] ## literal pool for: "central dir not where expected - could not adjust offsets"
10000b9a4:	lea	rbx, [rip + 0xee0c] ## literal pool for: ""
10000b9ab:	mov	rsi, rbx
10000b9ae:	call	0x100003e67
10000b9b3:	lea	rdi, [rip + 0x171ba] ## literal pool for: "(try -FF)"
10000b9ba:	jmp	0x10000b499
10000b9bf:	lea	rdi, [rip + 0x1e16a]
10000b9c6:	lea	rcx, [rip + 0x172f1] ## literal pool for: "Zip entry offsets do not need adjusting"
10000b9cd:	mov	edx, 0x13f1
10000b9d2:	xor	esi, esi
10000b9d4:	xor	eax, eax
10000b9d6:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000b9db:	lea	rdi, [rip + 0x1e14e]
10000b9e2:	lea	rsi, [rip + 0xedce] ## literal pool for: ""
10000b9e9:	call	0x100003d95
10000b9ee:	jmp	0x10000b418
10000b9f3:	lea	rsi, [rip + 0x16b3e] ## literal pool for: "PK\006\006"
10000b9fa:	call	0x10000adff
10000b9ff:	test	eax, eax
10000ba01:	je	0x10000ba69
10000ba03:	mov	rcx, qword ptr [r12]
10000ba07:	lea	rdi, [rbp - 0x70]
10000ba0b:	mov	esi, 0x1
10000ba10:	mov	edx, 0x34
10000ba15:	call	0x100019800 ## symbol stub for: _fread
10000ba1a:	cmp	rax, 0x33
10000ba1e:	ja	0x10000bac2
10000ba24:	lea	rax, [rip + 0x1dc85]
10000ba2b:	cmp	dword ptr [rax], 0x1
10000ba2e:	jne	0x10000bb8c
10000ba34:	lea	rdi, [rip + 0x173c3] ## literal pool for: "bad archive - Zip64 EOCDR bad or truncated"
10000ba3b:	lea	rsi, [rip + 0xed75] ## literal pool for: ""
10000ba42:	call	0x100003e67
10000ba47:	lea	rdi, [rip + 0x17126] ## literal pool for: "(try -FF)"
10000ba4e:	jmp	0x10000c726
10000ba53:	lea	rax, [rip + 0x1ddae]
10000ba5a:	mov	rsi, qword ptr [rax]
10000ba5d:	lea	rdi, [rip + 0x171ac] ## literal pool for: "Adjusting split archives not supported:  "
10000ba64:	jmp	0x10000b662
10000ba69:	mov	rsi, qword ptr [rbp - 0xc0]
10000ba70:	add	rsi, -0x54
10000ba74:	mov	rdi, qword ptr [r12]
10000ba78:	xor	edx, edx
10000ba7a:	call	0x10001980c ## symbol stub for: _fseeko
10000ba7f:	mov	rdi, qword ptr [r12]
10000ba83:	test	eax, eax
10000ba85:	je	0x10000bb98
10000ba8b:	call	0x1000197be ## symbol stub for: _fclose
10000ba90:	mov	qword ptr [r12], 0x0
10000ba98:	lea	rax, [rip + 0x1dc11]
10000ba9f:	mov	ebx, dword ptr [rax]
10000baa1:	call	0x100019764 ## symbol stub for: ___error
10000baa6:	mov	edi, dword ptr [rax]
10000baa8:	call	0x10001991a ## symbol stub for: _strerror
10000baad:	cmp	ebx, 0x1
10000bab0:	jne	0x10000b80e
10000bab6:	lea	rdi, [rip + 0x1725c] ## literal pool for: "bad archive - could not seek back to Zip64 EOCDR: "
10000babd:	jmp	0x10000b65f
10000bac2:	movzx	r9d, word ptr [rbp - 0x66]
10000bac7:	mov	eax, dword ptr [rbp - 0x60]
10000baca:	mov	qword ptr [rbp - 0xb0], rax
10000bad1:	mov	rax, qword ptr [rbp - 0x54]
10000bad5:	mov	qword ptr [rbp - 0xc0], rax
10000badc:	mov	rax, qword ptr [rbp - 0x44]
10000bae0:	add	rax, qword ptr [rbp - 0xa8]
10000bae7:	mov	qword ptr [rbp - 0xb8], rax
10000baee:	cmp	r9d, 0x2f
10000baf2:	jb	0x10000bca9
10000baf8:	mov	eax, r9d
10000bafb:	mov	r8d, 0xcccccccd
10000bb01:	imul	r8, rax
10000bb05:	shr	r8, 0x23
10000bb09:	lea	eax, [r8 + r8]
10000bb0d:	lea	eax, [rax + 4*rax]
10000bb10:	sub	r9d, eax
10000bb13:	lea	r14, [rip + 0x1e016]
10000bb1a:	lea	rcx, [rip + 0x1732b] ## literal pool for: "This archive requires version %d.%d"
10000bb21:	mov	edx, 0x13f1
10000bb26:	mov	rdi, r14
10000bb29:	mov	esi, 0x0
10000bb2e:	xor	eax, eax
10000bb30:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000bb35:	lea	rbx, [rip + 0xec7b] ## literal pool for: ""
10000bb3c:	mov	rdi, r14
10000bb3f:	mov	rsi, rbx
10000bb42:	call	0x100003e67
10000bb47:	lea	rdi, [rip + 0x17322] ## literal pool for: "Zip currently only supports up to version 4.6 archives"
10000bb4e:	mov	rsi, rbx
10000bb51:	call	0x100003e67
10000bb56:	lea	rdi, [rip + 0x1734a] ## literal pool for: "(up to 4.5 if bzip2 is not compiled in)"
10000bb5d:	mov	rsi, rbx
10000bb60:	call	0x100003e67
10000bb65:	lea	rax, [rip + 0x1db44]
10000bb6c:	mov	eax, dword ptr [rax]
10000bb6e:	cmp	eax, 0x2
10000bb71:	je	0x10000bc96
10000bb77:	cmp	eax, 0x1
10000bb7a:	jne	0x10000c71f
10000bb80:	lea	rdi, [rip + 0x17348] ## literal pool for: "If -F fails try -FF to try to salvage something"
10000bb87:	jmp	0x10000bc9d
10000bb8c:	lea	rdi, [rip + 0x17296] ## literal pool for: "Zip64 EOCD Record bad or truncated"
10000bb93:	jmp	0x10000c726
10000bb98:	call	0x10000fdeb
10000bb9d:	test	eax, eax
10000bb9f:	je	0x10000bc5f
10000bba5:	lea	rdi, [rip + 0x4f425]
10000bbac:	lea	rsi, [rip + 0x16985] ## literal pool for: "PK\006\006"
10000bbb3:	call	0x10000feb2
10000bbb8:	test	eax, eax
10000bbba:	je	0x10000bc5f
10000bbc0:	mov	rdi, qword ptr [r12]
10000bbc4:	call	0x100019818 ## symbol stub for: _ftello
10000bbc9:	sub	rax, qword ptr [rbp - 0xb8]
10000bbd0:	add	rax, -0x4
10000bbd4:	mov	qword ptr [rbp - 0xa8], rax
10000bbdb:	lea	rdi, [rip + 0x1716a] ## literal pool for: "Zip64 EOCDR not found where expected - compensating"
10000bbe2:	lea	rbx, [rip + 0xebce] ## literal pool for: ""
10000bbe9:	mov	rsi, rbx
10000bbec:	call	0x100003e67
10000bbf1:	lea	rdi, [rip + 0x17188] ## literal pool for: "(try -A to adjust offsets)"
10000bbf8:	mov	rsi, rbx
10000bbfb:	call	0x100003e67
10000bc00:	jmp	0x10000ba03
10000bc05:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
10000bc0a:	add	rbx, -0x54
10000bc0e:	mov	rdi, qword ptr [r12]
10000bc12:	mov	rsi, rbx
10000bc15:	xor	edx, edx
10000bc17:	call	0x10001980c ## symbol stub for: _fseeko
10000bc1c:	mov	rdi, qword ptr [r12]
10000bc20:	test	eax, eax
10000bc22:	je	0x10000c754
10000bc28:	call	0x1000197be ## symbol stub for: _fclose
10000bc2d:	mov	qword ptr [r12], 0x0
10000bc35:	lea	rax, [rip + 0x1da74]
10000bc3c:	mov	ebx, dword ptr [rax]
10000bc3e:	call	0x100019764 ## symbol stub for: ___error
10000bc43:	mov	edi, dword ptr [rax]
10000bc45:	call	0x10001991a ## symbol stub for: _strerror
10000bc4a:	cmp	ebx, 0x1
10000bc4d:	jne	0x10000b80e
10000bc53:	lea	rdi, [rip + 0x16fe0] ## literal pool for: "could not seek back to Zip64 EOCDR: "
10000bc5a:	jmp	0x10000b65f
10000bc5f:	mov	rdi, qword ptr [r12]
10000bc63:	call	0x1000197be ## symbol stub for: _fclose
10000bc68:	mov	qword ptr [r12], 0x0
10000bc70:	lea	rax, [rip + 0x1da39]
10000bc77:	cmp	dword ptr [rax], 0x1
10000bc7a:	lea	rax, [rip + 0x1db87]
10000bc81:	mov	rsi, qword ptr [rax]
10000bc84:	jne	0x10000c748
10000bc8a:	lea	rdi, [rip + 0x1710a] ## literal pool for: "bad archive - Zip64 EOCDR not found in split:  "
10000bc91:	jmp	0x10000b662
10000bc96:	lea	rdi, [rip + 0x17262] ## literal pool for: "Attempting to salvage what can"
10000bc9d:	lea	rsi, [rip + 0xeb13] ## literal pool for: ""
10000bca4:	call	0x100003e67
10000bca9:	mov	rax, qword ptr [rbp - 0xb8]
10000bcb0:	mov	rcx, rax
10000bcb3:	add	rcx, qword ptr [rbp - 0xa8]
10000bcba:	lea	rax, [rip + 0x1de5f]
10000bcc1:	mov	qword ptr [rbp - 0xb8], rcx
10000bcc8:	mov	qword ptr [rax], rcx
10000bccb:	lea	rax, [rip + 0x1f27e]
10000bcd2:	mov	qword ptr [rax], 0x0
10000bcd9:	lea	rax, [rip + 0x1db50]
10000bce0:	mov	rcx, qword ptr [rbp - 0xb0]
10000bce7:	cmp	qword ptr [rax], rcx
10000bcea:	je	0x10000bcfd
10000bcec:	mov	rdi, qword ptr [r12]
10000bcf0:	call	0x1000197be ## symbol stub for: _fclose
10000bcf5:	mov	qword ptr [r12], 0x0
10000bcfd:	lea	rax, [rip + 0x1db2c]
10000bd04:	mov	rsi, qword ptr [rbp - 0xb0]
10000bd0b:	mov	qword ptr [rax], rsi
10000bd0e:	lea	rax, [rip + 0x1db13]
10000bd15:	mov	rax, qword ptr [rax]
10000bd18:	cmp	rsi, rax
10000bd1b:	jae	0x10000c5ad
10000bd21:	mov	r14d, 0x1
10000bd27:	mov	dword ptr [rbp - 0xc8], 0x0
10000bd31:	mov	dword ptr [rbp - 0xc4], 0x0
10000bd3b:	dec	rax
10000bd3e:	lea	rcx, [rip + 0x1dac3]
10000bd45:	mov	rbx, qword ptr [rcx]
10000bd48:	cmp	rsi, rax
10000bd4b:	jne	0x10000bd7f
10000bd4d:	mov	rdi, rbx
10000bd50:	call	0x100019920 ## symbol stub for: _strlen
10000bd55:	lea	rdi, [rax + 0x1]
10000bd59:	call	0x100019848 ## symbol stub for: _malloc
10000bd5e:	mov	qword ptr [rbp - 0xb0], rax
10000bd65:	test	rax, rax
10000bd68:	je	0x10000c6e2
10000bd6e:	mov	rdi, qword ptr [rbp - 0xb0]
10000bd75:	mov	rsi, rbx
10000bd78:	call	0x100019914 ## symbol stub for: _strcpy
10000bd7d:	jmp	0x10000bd8e
10000bd7f:	mov	rdi, rbx
10000bd82:	call	0x10001338c
10000bd87:	mov	qword ptr [rbp - 0xb0], rax
10000bd8e:	mov	rax, qword ptr [r12]
10000bd92:	test	rax, rax
10000bd95:	je	0x10000c4c5
10000bd9b:	cmp	dword ptr [rbp - 0xc8], 0x0
10000bda2:	jne	0x10000bdd6
10000bda4:	test	r14d, r14d
10000bda7:	je	0x10000bdd6
10000bda9:	mov	rdi, rax
10000bdac:	mov	rsi, qword ptr [rbp - 0xb8]
10000bdb3:	xor	edx, edx
10000bdb5:	call	0x10001980c ## symbol stub for: _fseeko
10000bdba:	mov	ecx, eax
10000bdbc:	mov	rax, qword ptr [r12]
10000bdc0:	test	ecx, ecx
10000bdc2:	jne	0x10000c6fc
10000bdc8:	lea	rcx, [rip + 0x1db09]
10000bdcf:	mov	qword ptr [rbp - 0xd0], rcx
10000bdd6:	mov	rdi, rax
10000bdd9:	call	0x10000fdeb
10000bdde:	test	eax, eax
10000bde0:	je	0x10000c462
10000bde6:	lea	r14, [rip + 0x1d8c3]
10000bded:	lea	r15, [rip + 0x4f1dd]
10000bdf4:	mov	rdi, qword ptr [r12]
10000bdf8:	call	0x100019818 ## symbol stub for: _ftello
10000bdfd:	mov	rbx, rax
10000be00:	lea	rax, [rip + 0x1da31]
10000be07:	mov	qword ptr [rax], rbx
10000be0a:	mov	rdi, r15
10000be0d:	lea	rsi, [rip + 0x164c5] ## literal pool for: "PK\005\006"
10000be14:	call	0x10000feb2
10000be19:	test	eax, eax
10000be1b:	jne	0x10000c462
10000be21:	mov	rdi, r15
10000be24:	lea	rsi, [rip + 0x1670d] ## literal pool for: "PK\006\006"
10000be2b:	call	0x10000feb2
10000be30:	test	eax, eax
10000be32:	jne	0x10000c462
10000be38:	mov	rdi, r15
10000be3b:	lea	rsi, [rip + 0x1679f] ## literal pool for: "PK\001\002"
10000be42:	call	0x10000feb2
10000be47:	test	eax, eax
10000be49:	je	0x10000c0b1
10000be4f:	lea	rax, [rip + 0x1d856]
10000be56:	cmp	dword ptr [rax], 0x0
10000be59:	je	0x10000beaf
10000be5b:	cmp	dword ptr [r14], 0x1
10000be5f:	jne	0x10000beaf
10000be61:	lea	rax, [rip + 0x1f0c8]
10000be68:	mov	r14, qword ptr [rax]
10000be6b:	lea	rax, [rip + 0x1d9be]
10000be72:	mov	r15, qword ptr [rax]
10000be75:	add	rbx, -0x4
10000be79:	mov	rdi, rbx
10000be7c:	xor	esi, esi
10000be7e:	lea	rdx, [rip + 0x103c1] ## literal pool for: "u"
10000be85:	call	0x100016116
10000be8a:	mov	rdi, r14
10000be8d:	lea	rsi, [rip + 0x17134] ## literal pool for: "central directory header signature on disk %lu at %s\n"
10000be94:	mov	rdx, r15
10000be97:	lea	r15, [rip + 0x4f133]
10000be9e:	lea	r14, [rip + 0x1d80b]
10000bea5:	mov	rcx, rax
10000bea8:	xor	eax, eax
10000beaa:	call	0x1000197ee ## symbol stub for: _fprintf
10000beaf:	mov	rcx, qword ptr [r12]
10000beb3:	mov	esi, 0x2a
10000beb8:	mov	edx, 0x1
10000bebd:	lea	rdi, [rbp - 0x70]
10000bec1:	call	0x100019800 ## symbol stub for: _fread
10000bec6:	cmp	rax, 0x1
10000beca:	jne	0x10000c1cc
10000bed0:	mov	edi, 0xa0
10000bed5:	call	0x100019848 ## symbol stub for: _malloc
10000beda:	test	rax, rax
10000bedd:	je	0x10000c6c6
10000bee3:	mov	r15, rax
10000bee6:	movzx	eax, word ptr [rbp - 0x70]
10000beea:	mov	word ptr [r15], ax
10000beee:	movzx	ecx, word ptr [rbp - 0x6e]
10000bef2:	mov	word ptr [r15 + 0x2], cx
10000bef7:	movzx	ecx, word ptr [rbp - 0x6c]
10000befb:	mov	word ptr [r15 + 0x4], cx
10000bf00:	movzx	ecx, word ptr [rbp - 0x6a]
10000bf04:	mov	word ptr [r15 + 0x6], cx
10000bf09:	mov	ecx, dword ptr [rbp - 0x68]
10000bf0c:	mov	qword ptr [r15 + 0x8], rcx
10000bf10:	mov	ecx, dword ptr [rbp - 0x64]
10000bf13:	mov	qword ptr [r15 + 0x10], rcx
10000bf17:	mov	ecx, dword ptr [rbp - 0x60]
10000bf1a:	mov	qword ptr [r15 + 0x18], rcx
10000bf1e:	mov	ecx, dword ptr [rbp - 0x5c]
10000bf21:	mov	qword ptr [r15 + 0x20], rcx
10000bf25:	movzx	edx, word ptr [rbp - 0x58]
10000bf29:	mov	word ptr [r15 + 0x28], dx
10000bf2e:	movzx	ecx, word ptr [rbp - 0x56]
10000bf32:	mov	qword ptr [rbp - 0xe0], rcx
10000bf39:	mov	word ptr [r15 + 0x2c], cx
10000bf3e:	movzx	ecx, word ptr [rbp - 0x54]
10000bf42:	mov	qword ptr [rbp - 0xd8], rcx
10000bf49:	mov	word ptr [r15 + 0x2e], cx
10000bf4e:	movzx	ecx, word ptr [rbp - 0x52]
10000bf52:	mov	qword ptr [r15 + 0x30], rcx
10000bf56:	movzx	ecx, word ptr [rbp - 0x50]
10000bf5a:	mov	word ptr [r15 + 0x38], cx
10000bf5f:	mov	ecx, dword ptr [rbp - 0x4e]
10000bf62:	mov	qword ptr [r15 + 0x48], rcx
10000bf66:	mov	ecx, dword ptr [rbp - 0x4a]
10000bf69:	mov	qword ptr [r15 + 0x40], rcx
10000bf6d:	xor	ecx, ecx
10000bf6f:	cmp	eax, 0x100
10000bf74:	setb	cl
10000bf77:	mov	dword ptr [r15 + 0x94], ecx
10000bf7e:	mov	eax, 0x0
10000bf83:	mov	qword ptr [r15 + 0x50], rax
10000bf87:	mov	qword ptr [r15 + 0x58], rax
10000bf8b:	mov	qword ptr [r15 + 0x60], rax
10000bf8f:	mov	qword ptr [r15 + 0x68], rax
10000bf93:	mov	qword ptr [r15 + 0x70], rax
10000bf97:	mov	qword ptr [r15 + 0x78], rax
10000bf9b:	mov	qword ptr [r15 + 0x80], rax
10000bfa2:	test	dx, dx
10000bfa5:	je	0x10000c218
10000bfab:	mov	qword ptr [rbp - 0xe8], rdx
10000bfb2:	lea	rdi, [rdx + 0x1]
10000bfb6:	call	0x100019848 ## symbol stub for: _malloc
10000bfbb:	mov	qword ptr [r15 + 0x70], rax
10000bfbf:	mov	r14d, 0x4
10000bfc5:	test	rax, rax
10000bfc8:	je	0x10000b4a7
10000bfce:	mov	rbx, rax
10000bfd1:	cmp	word ptr [rbp - 0xe0], 0x0
10000bfd9:	je	0x10000bff4
10000bfdb:	mov	rdi, qword ptr [rbp - 0xe0]
10000bfe2:	call	0x100019848 ## symbol stub for: _malloc
10000bfe7:	mov	qword ptr [r15 + 0x60], rax
10000bfeb:	test	rax, rax
10000bfee:	je	0x10000b4a7
10000bff4:	cmp	word ptr [rbp - 0xd8], 0x0
10000bffc:	je	0x10000c017
10000bffe:	mov	rdi, qword ptr [rbp - 0xd8]
10000c005:	call	0x100019848 ## symbol stub for: _malloc
10000c00a:	mov	qword ptr [r15 + 0x68], rax
10000c00e:	test	rax, rax
10000c011:	je	0x10000b4a7
10000c017:	mov	rcx, qword ptr [r12]
10000c01b:	mov	edx, 0x1
10000c020:	mov	rdi, rbx
10000c023:	mov	rsi, qword ptr [rbp - 0xe8]
10000c02a:	call	0x100019800 ## symbol stub for: _fread
10000c02f:	cmp	rax, 0x1
10000c033:	jne	0x10000c081
10000c035:	movzx	esi, word ptr [r15 + 0x2c]
10000c03a:	test	rsi, rsi
10000c03d:	je	0x10000c057
10000c03f:	mov	rdi, qword ptr [r15 + 0x60]
10000c043:	mov	rcx, qword ptr [r12]
10000c047:	mov	edx, 0x1
10000c04c:	call	0x100019800 ## symbol stub for: _fread
10000c051:	cmp	rax, 0x1
10000c055:	jne	0x10000c081
10000c057:	movzx	esi, word ptr [r15 + 0x2e]
10000c05c:	test	rsi, rsi
10000c05f:	je	0x10000c29a
10000c065:	mov	rdi, qword ptr [r15 + 0x68]
10000c069:	mov	rcx, qword ptr [r12]
10000c06d:	mov	edx, 0x1
10000c072:	call	0x100019800 ## symbol stub for: _fread
10000c077:	cmp	rax, 0x1
10000c07b:	je	0x10000c29a
10000c081:	lea	rax, [rip + 0x1d628]
10000c088:	cmp	dword ptr [rax], 0x1
10000c08b:	jne	0x10000b4d1
10000c091:	call	0x100019764 ## symbol stub for: ___error
10000c096:	mov	edi, dword ptr [rax]
10000c098:	call	0x10001991a ## symbol stub for: _strerror
10000c09d:	lea	rdi, [rip + 0x165f3] ## literal pool for: "error reading entry:  "
10000c0a4:	mov	rsi, rax
10000c0a7:	call	0x100003e67
10000c0ac:	jmp	0x10000c263
10000c0b1:	cmp	dword ptr [r14], 0x1
10000c0b5:	jne	0x10000c62d
10000c0bb:	lea	r14, [rip + 0x1da6e]
10000c0c2:	movabs	rax, 0x6863726120646162
10000c0cc:	mov	qword ptr [r14], rax
10000c0cf:	movabs	rax, 0x6e75202d20657669
10000c0d9:	mov	qword ptr [r14 + 0x8], rax
10000c0dd:	movabs	rax, 0x6465746365707865
10000c0e7:	mov	qword ptr [r14 + 0x10], rax
10000c0eb:	movabs	rax, 0x7574616e67697320
10000c0f5:	mov	qword ptr [r14 + 0x18], rax
10000c0f9:	mov	dword ptr [r14 + 0x20], 0x206572
10000c101:	xor	ebx, ebx
10000c103:	lea	r14, [rbp - 0xa0]
10000c10a:	movsx	r8d, byte ptr [rbx + r15]
10000c10f:	mov	edx, 0x28
10000c114:	mov	rdi, r14
10000c117:	xor	esi, esi
10000c119:	lea	rcx, [rip + 0x16709] ## literal pool for: "%02x "
10000c120:	xor	eax, eax
10000c122:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000c127:	mov	edx, 0x13f1
10000c12c:	lea	rdi, [rip + 0x1d9fd]
10000c133:	mov	rsi, r14
10000c136:	call	0x10001977c ## symbol stub for: ___strcat_chk
10000c13b:	inc	rbx
10000c13e:	cmp	rbx, 0x4
10000c142:	jne	0x10000c10a
10000c144:	lea	rax, [rip + 0x1d6e5]
10000c14b:	mov	rbx, qword ptr [rax]
10000c14e:	lea	rax, [rip + 0x1d6e3]
10000c155:	mov	rdi, qword ptr [rax]
10000c158:	add	rdi, -0x4
10000c15c:	xor	esi, esi
10000c15e:	lea	rdx, [rip + 0x100e1] ## literal pool for: "u"
10000c165:	call	0x100016116
10000c16a:	mov	edx, 0x28
10000c16f:	mov	rdi, r14
10000c172:	xor	esi, esi
10000c174:	lea	rcx, [rip + 0x166b4] ## literal pool for: "on disk %lu at %s\n"
10000c17b:	mov	r8, rbx
10000c17e:	mov	r9, rax
10000c181:	xor	eax, eax
10000c183:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000c188:	mov	edx, 0x13f1
10000c18d:	lea	rbx, [rip + 0x1d99c]
10000c194:	mov	rdi, rbx
10000c197:	mov	rsi, r14
10000c19a:	call	0x10001977c ## symbol stub for: ___strcat_chk
10000c19f:	mov	rdi, rbx
10000c1a2:	lea	rbx, [rip + 0xe60e] ## literal pool for: ""
10000c1a9:	mov	rsi, rbx
10000c1ac:	call	0x100003e67
10000c1b1:	lea	rdi, [rip + 0x1668a] ## literal pool for: "skipping this signature..."
10000c1b8:	mov	rsi, rbx
10000c1bb:	call	0x100003e67
10000c1c0:	lea	r14, [rip + 0x1d4e9]
10000c1c7:	jmp	0x10000c284
10000c1cc:	call	0x100019764 ## symbol stub for: ___error
10000c1d1:	mov	edi, dword ptr [rax]
10000c1d3:	call	0x10001991a ## symbol stub for: _strerror
10000c1d8:	lea	rdi, [rip + 0x16436] ## literal pool for: "reading central directory: "
10000c1df:	mov	rsi, rax
10000c1e2:	call	0x100003e67
10000c1e7:	cmp	dword ptr [r14], 0x1
10000c1eb:	jne	0x10000b4d1
10000c1f1:	lea	rdi, [rip + 0x16439] ## literal pool for: "bad archive - error reading central directory"
10000c1f8:	lea	rbx, [rip + 0xe5b8] ## literal pool for: ""
10000c1ff:	mov	rsi, rbx
10000c202:	call	0x100003e67
10000c207:	lea	rdi, [rip + 0x16451] ## literal pool for: "skipping this entry..."
10000c20e:	mov	rsi, rbx
10000c211:	call	0x100003e67
10000c216:	jmp	0x10000c284
10000c218:	lea	rax, [rip + 0x1ed29]
10000c21f:	mov	r8, qword ptr [rax]
10000c222:	inc	r8
10000c225:	mov	edx, 0x13f1
10000c22a:	lea	rbx, [rip + 0x1d8ff]
10000c231:	mov	rdi, rbx
10000c234:	xor	esi, esi
10000c236:	lea	rcx, [rip + 0x16439] ## literal pool for: "%lu"
10000c23d:	xor	eax, eax
10000c23f:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000c244:	lea	rdi, [rip + 0x1642f] ## literal pool for: "zero-length name for entry #"
10000c24b:	mov	rsi, rbx
10000c24e:	call	0x100003e67
10000c253:	lea	rax, [rip + 0x1d456]
10000c25a:	cmp	dword ptr [rax], 0x1
10000c25d:	jne	0x10000b4a1
10000c263:	lea	rdi, [rip + 0x163f5] ## literal pool for: "skipping this entry..."
10000c26a:	lea	rsi, [rip + 0xe546] ## literal pool for: ""
10000c271:	call	0x100003e67
10000c276:	lea	r14, [rip + 0x1d433]
10000c27d:	lea	r15, [rip + 0x4ed4d]
10000c284:	mov	rdi, qword ptr [r12]
10000c288:	call	0x10000fdeb
10000c28d:	test	eax, eax
10000c28f:	jne	0x10000bdf4
10000c295:	jmp	0x10000c462
10000c29a:	mov	rax, qword ptr [r15 + 0x70]
10000c29e:	movzx	ecx, word ptr [r15 + 0x28]
10000c2a3:	mov	byte ptr [rax + rcx], 0x0
10000c2a7:	lea	rax, [rip + 0x1d4f2]
10000c2ae:	mov	dword ptr [rax], 0x0
10000c2b4:	mov	rax, qword ptr [r15 + 0x60]
10000c2b8:	test	rax, rax
10000c2bb:	je	0x10000c34c
10000c2c1:	movzx	ecx, word ptr [r15 + 0x2c]
10000c2c6:	lea	rcx, [rax + rcx - 0x4]
10000c2cb:	cmp	rcx, rax
10000c2ce:	jbe	0x10000c34c
10000c2d0:	cmp	word ptr [rax], 0x1
10000c2d4:	je	0x10000c2e6
10000c2d6:	movzx	edx, word ptr [rax + 0x2]
10000c2da:	lea	rax, [rdx + rax + 0x4]
10000c2df:	cmp	rax, rcx
10000c2e2:	jb	0x10000c2d0
10000c2e4:	jmp	0x10000c34c
10000c2e6:	lea	rcx, [rip + 0x1d4b3]
10000c2ed:	mov	dword ptr [rcx], 0x1
10000c2f3:	mov	ecx, 0xffffffff
10000c2f8:	cmp	qword ptr [r15 + 0x20], rcx
10000c2fc:	jne	0x10000c30c
10000c2fe:	mov	rcx, qword ptr [rax + 0x4]
10000c302:	mov	qword ptr [r15 + 0x20], rcx
10000c306:	add	rax, 0xc
10000c30a:	jmp	0x10000c310
10000c30c:	add	rax, 0x4
10000c310:	mov	ecx, 0xffffffff
10000c315:	cmp	qword ptr [r15 + 0x18], rcx
10000c319:	jne	0x10000c326
10000c31b:	mov	rcx, qword ptr [rax]
10000c31e:	mov	qword ptr [r15 + 0x18], rcx
10000c322:	add	rax, 0x8
10000c326:	mov	ecx, 0xffffffff
10000c32b:	cmp	qword ptr [r15 + 0x40], rcx
10000c32f:	jne	0x10000c33c
10000c331:	mov	rcx, qword ptr [rax]
10000c334:	mov	qword ptr [r15 + 0x40], rcx
10000c338:	add	rax, 0x8
10000c33c:	cmp	qword ptr [r15 + 0x30], 0xffff
10000c344:	jne	0x10000c34c
10000c346:	mov	eax, dword ptr [rax]
10000c348:	mov	qword ptr [r15 + 0x30], rax
10000c34c:	lea	rax, [rip + 0x1d35d]
10000c353:	cmp	dword ptr [rax], 0x1
10000c356:	sete	al
10000c359:	lea	rcx, [rip + 0x1d4c8]
10000c360:	cmp	qword ptr [rcx], 0x1
10000c364:	sete	cl
10000c367:	test	al, cl
10000c369:	jne	0x10000c377
10000c36b:	lea	rax, [rip + 0x1d346]
10000c372:	cmp	dword ptr [rax], 0x0
10000c375:	je	0x10000c382
10000c377:	mov	rax, qword ptr [rbp - 0xa8]
10000c37e:	add	qword ptr [r15 + 0x40], rax
10000c382:	cmp	qword ptr [r15 + 0x30], 0x0
10000c387:	jne	0x10000c3b6
10000c389:	mov	rax, qword ptr [r15 + 0x40]
10000c38d:	cmp	dword ptr [rbp - 0xc4], 0x0
10000c394:	mov	dword ptr [rbp - 0xc4], 0x1
10000c39e:	je	0x10000c3ac
10000c3a0:	lea	rcx, [rip + 0x1eba9]
10000c3a7:	cmp	rax, qword ptr [rcx]
10000c3aa:	jae	0x10000c3b6
10000c3ac:	lea	rcx, [rip + 0x1eb9d]
10000c3b3:	mov	qword ptr [rcx], rax
10000c3b6:	lea	rax, [rip + 0x1eb8b]
10000c3bd:	inc	qword ptr [rax]
10000c3c0:	mov	qword ptr [r15 + 0x88], 0x0
10000c3cb:	mov	rdi, qword ptr [r15 + 0x70]
10000c3cf:	call	0x100016fcc
10000c3d4:	mov	qword ptr [r15 + 0x78], rax
10000c3d8:	test	rax, rax
10000c3db:	je	0x10000b4a7
10000c3e1:	mov	rbx, rax
10000c3e4:	mov	qword ptr [r15 + 0x50], rax
10000c3e8:	mov	rdi, rax
10000c3eb:	call	0x100019920 ## symbol stub for: _strlen
10000c3f0:	lea	rdi, [rax + 0x1]
10000c3f4:	call	0x100019848 ## symbol stub for: _malloc
10000c3f9:	mov	qword ptr [r15 + 0x80], rax
10000c400:	test	rax, rax
10000c403:	je	0x10000c795
10000c409:	mov	rdi, rax
10000c40c:	mov	rsi, rbx
10000c40f:	call	0x100019914 ## symbol stub for: _strcpy
10000c414:	lea	rax, [rip + 0x1d291]
10000c41b:	cmp	dword ptr [rax], 0x0
10000c41e:	je	0x10000c434
10000c420:	lea	rax, [rip + 0x1d289]
10000c427:	cmp	dword ptr [rax], 0x0
10000c42a:	jne	0x10000c434
10000c42c:	mov	rdi, r15
10000c42f:	call	0x10000ff19
10000c434:	mov	rax, qword ptr [rbp - 0xd0]
10000c43b:	mov	qword ptr [rax], r15
10000c43e:	mov	rax, r15
10000c441:	add	rax, 0x98
10000c447:	mov	qword ptr [rbp - 0xd0], rax
10000c44e:	mov	qword ptr [r15 + 0x98], 0x0
10000c459:	mov	rdi, qword ptr [r12]
10000c45d:	jmp	0x10000bdd9
10000c462:	mov	rdi, qword ptr [r12]
10000c466:	call	0x1000197be ## symbol stub for: _fclose
10000c46b:	mov	qword ptr [r12], 0x0
10000c473:	mov	rdi, qword ptr [rbp - 0xb0]
10000c47a:	call	0x100019806 ## symbol stub for: _free
10000c47f:	lea	rdi, [rip + 0x4eb4b]
10000c486:	lea	rsi, [rip + 0x16154] ## literal pool for: "PK\001\002"
10000c48d:	call	0x10000feb2
10000c492:	xor	r14d, r14d
10000c495:	test	eax, eax
10000c497:	lea	rax, [rip + 0x1d392]
10000c49e:	je	0x10000c5ad
10000c4a4:	mov	rsi, qword ptr [rax]
10000c4a7:	inc	rsi
10000c4aa:	mov	qword ptr [rax], rsi
10000c4ad:	lea	rax, [rip + 0x1d374]
10000c4b4:	mov	rax, qword ptr [rax]
10000c4b7:	cmp	rsi, rax
10000c4ba:	jb	0x10000bd3b
10000c4c0:	jmp	0x10000c5ad
10000c4c5:	mov	rdi, qword ptr [rbp - 0xb0]
10000c4cc:	lea	rsi, [rip + 0xfadd] ## literal pool for: "r"
10000c4d3:	call	0x1000197e8 ## symbol stub for: _fopen
10000c4d8:	mov	qword ptr [r12], rax
10000c4dc:	test	rax, rax
10000c4df:	jne	0x10000bd9b
10000c4e5:	lea	rbx, [rip + 0x1d344]
10000c4ec:	mov	rdi, qword ptr [rbx]
10000c4ef:	call	0x100013490
10000c4f4:	cmp	eax, 0x9
10000c4f7:	je	0x10000c6a8
10000c4fd:	mov	r8, qword ptr [rbx]
10000c500:	cmp	eax, 0x3
10000c503:	je	0x10000c569
10000c505:	lea	rax, [rip + 0x1d31c]
10000c50c:	mov	rax, qword ptr [rax]
10000c50f:	dec	rax
10000c512:	cmp	r8, rax
10000c515:	jne	0x10000c54b
10000c517:	lea	rax, [rip + 0x1d2ea]
10000c51e:	mov	r15, qword ptr [rax]
10000c521:	mov	rdi, r15
10000c524:	call	0x100019920 ## symbol stub for: _strlen
10000c529:	lea	rdi, [rax + 0x1]
10000c52d:	call	0x100019848 ## symbol stub for: _malloc
10000c532:	test	rax, rax
10000c535:	je	0x10000c6d6
10000c53b:	mov	rbx, rax
10000c53e:	mov	rdi, rax
10000c541:	mov	rsi, r15
10000c544:	call	0x100019914 ## symbol stub for: _strcpy
10000c549:	jmp	0x10000c55a
10000c54b:	mov	rdi, qword ptr [r13]
10000c54f:	mov	rsi, r8
10000c552:	call	0x10001338c
10000c557:	mov	rbx, rax
10000c55a:	mov	qword ptr [rbp - 0xb0], rbx
10000c561:	mov	rdi, rbx
10000c564:	jmp	0x10000c4cc
10000c569:	mov	edx, 0x13f1
10000c56e:	lea	rbx, [rip + 0x1d5bb]
10000c575:	mov	rdi, rbx
10000c578:	xor	esi, esi
10000c57a:	lea	rcx, [rip + 0x15f86] ## literal pool for: "skipping disk %lu ...\n"
10000c581:	xor	eax, eax
10000c583:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000c588:	mov	rdi, rbx
10000c58b:	lea	rsi, [rip + 0xe225] ## literal pool for: ""
10000c592:	call	0x100003e67
10000c597:	mov	dword ptr [rbp - 0xc8], 0x1
10000c5a1:	lea	rax, [rip + 0x1d288]
10000c5a8:	jmp	0x10000c4a4
10000c5ad:	xor	r14d, r14d
10000c5b0:	lea	rax, [rip + 0x1e991]
10000c5b7:	mov	rcx, qword ptr [rbp - 0xc0]
10000c5be:	cmp	qword ptr [rax], rcx
10000c5c1:	je	0x10000b4a7
10000c5c7:	lea	r14, [rip + 0xfc78] ## literal pool for: "u"
10000c5ce:	mov	rdi, qword ptr [rbp - 0xc0]
10000c5d5:	xor	esi, esi
10000c5d7:	mov	rdx, r14
10000c5da:	call	0x100016116
10000c5df:	mov	rbx, rax
10000c5e2:	lea	rax, [rip + 0x1e95f]
10000c5e9:	mov	rdi, qword ptr [rax]
10000c5ec:	xor	esi, esi
10000c5ee:	mov	rdx, r14
10000c5f1:	call	0x100016116
10000c5f6:	lea	r14, [rip + 0x1d533]
10000c5fd:	lea	rcx, [rip + 0x16a22] ## literal pool for: "expected %s entries but found %s"
10000c604:	mov	edx, 0x13f1
10000c609:	mov	rdi, r14
10000c60c:	mov	esi, 0x0
10000c611:	mov	r8, rbx
10000c614:	mov	r9, rax
10000c617:	xor	eax, eax
10000c619:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000c61e:	lea	rsi, [rip + 0xe192] ## literal pool for: ""
10000c625:	mov	rdi, r14
10000c628:	jmp	0x10000b49c
10000c62d:	lea	rax, [rip + 0x1d1fc]
10000c634:	mov	r14, qword ptr [rax]
10000c637:	add	rbx, -0x4
10000c63b:	lea	rdx, [rip + 0xfc04] ## literal pool for: "u"
10000c642:	mov	rdi, rbx
10000c645:	xor	esi, esi
10000c647:	call	0x100016116
10000c64c:	lea	r15, [rip + 0x1d4dd]
10000c653:	lea	rcx, [rip + 0x16909] ## literal pool for: "unexpected signature on disk %lu at %s\n"
10000c65a:	mov	edx, 0x13f1
10000c65f:	mov	rdi, r15
10000c662:	mov	esi, 0x0
10000c667:	mov	r8, r14
10000c66a:	mov	r9, rax
10000c66d:	xor	eax, eax
10000c66f:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000c674:	lea	rbx, [rip + 0xe13c] ## literal pool for: ""
10000c67b:	mov	rdi, r15
10000c67e:	mov	rsi, rbx
10000c681:	call	0x100003e67
10000c686:	lea	rdi, [rip + 0x168fe] ## literal pool for: "archive not in correct format: "
10000c68d:	mov	rsi, qword ptr [rbp - 0xb0]
10000c694:	call	0x100003e67
10000c699:	lea	rdi, [rip + 0x1690b] ## literal pool for: "(try -F to attempt recovery)"
10000c6a0:	mov	rsi, rbx
10000c6a3:	jmp	0x10000c72d
10000c6a8:	lea	rdi, [rip + 0x15e1c] ## literal pool for: "could not find split: "
10000c6af:	mov	rsi, qword ptr [rbp - 0xb0]
10000c6b6:	call	0x100003e67
10000c6bb:	mov	r14d, 0x9
10000c6c1:	jmp	0x10000b4a7
10000c6c6:	lea	rdi, [rip + 0x15ec8] ## literal pool for: "reading central directory"
10000c6cd:	lea	rsi, [rip + 0xe0e3] ## literal pool for: ""
10000c6d4:	jmp	0x10000c6ec
10000c6d6:	lea	rdi, [rip + 0x16500] ## literal pool for: "reading archive: "
10000c6dd:	mov	rsi, r15
10000c6e0:	jmp	0x10000c6ec
10000c6e2:	lea	rdi, [rip + 0x164f4] ## literal pool for: "reading archive: "
10000c6e9:	mov	rsi, rbx
10000c6ec:	call	0x100003e67
10000c6f1:	mov	r14d, 0x4
10000c6f7:	jmp	0x10000b4a7
10000c6fc:	mov	rdi, rax
10000c6ff:	call	0x1000197be ## symbol stub for: _fclose
10000c704:	mov	qword ptr [r12], 0x0
10000c70c:	lea	rdi, [rip + 0x15ba8] ## literal pool for: "unable to seek in input file "
10000c713:	mov	rsi, qword ptr [rbp - 0xb0]
10000c71a:	jmp	0x10000b235
10000c71f:	lea	rdi, [rip + 0x167f8] ## literal pool for: "Try -F to attempt to read anyway"
10000c726:	lea	rsi, [rip + 0xe08a] ## literal pool for: ""
10000c72d:	call	0x100003e67
10000c732:	mov	rdi, qword ptr [r12]
10000c736:	call	0x1000197be ## symbol stub for: _fclose
10000c73b:	mov	qword ptr [r12], 0x0
10000c743:	jmp	0x10000b4a1
10000c748:	lea	rdi, [rip + 0x1667c] ## literal pool for: "Zip64 End Of Central Directory Record not found:  "
10000c74f:	jmp	0x10000b49c
10000c754:	call	0x10000fdeb
10000c759:	test	eax, eax
10000c75b:	je	0x10000c789
10000c75d:	lea	rdi, [rip + 0x4e86d]
10000c764:	lea	rsi, [rip + 0x15dcd] ## literal pool for: "PK\006\006"
10000c76b:	call	0x10000feb2
10000c770:	test	eax, eax
10000c772:	je	0x10000c789
10000c774:	mov	rdi, qword ptr [r12]
10000c778:	call	0x100019818 ## symbol stub for: _ftello
10000c77d:	sub	rax, r14
10000c780:	add	rax, -0x4
10000c784:	jmp	0x10000b8f2
10000c789:	lea	rdi, [rip + 0x164cf] ## literal pool for: "Could not determine offset of entries"
10000c790:	jmp	0x10000b9a4
10000c795:	lea	rdi, [rip + 0x16862] ## literal pool for: "could not allocate memory: scanzipf_reg"
10000c79c:	lea	rsi, [rip + 0xe014] ## literal pool for: ""
10000c7a3:	call	0x100003e67
10000c7a8:	jmp	0x10000b4a7
10000c7ad:	push	rbp
10000c7ae:	mov	rbp, rsp
10000c7b1:	push	r15
10000c7b3:	push	r14
10000c7b5:	push	r13
10000c7b7:	push	r12
10000c7b9:	push	rbx
10000c7ba:	sub	rsp, 0x88
10000c7c1:	mov	rax, qword ptr [rip + 0x17848] ## literal pool symbol address: ___stack_chk_guard
10000c7c8:	mov	rax, qword ptr [rax]
10000c7cb:	mov	qword ptr [rbp - 0x30], rax
10000c7cf:	lea	rax, [rip + 0x1d052]
10000c7d6:	mov	qword ptr [rax], 0xf4240
10000c7dd:	lea	rax, [rip + 0x1d024]
10000c7e4:	mov	rdi, qword ptr [rax]
10000c7e7:	call	0x100019920 ## symbol stub for: _strlen
10000c7ec:	mov	rbx, rax
10000c7ef:	cmp	ebx, 0x4
10000c7f2:	jl	0x10000c904
10000c7f8:	lea	rax, [rip + 0x1e759]
10000c7ff:	mov	r14, qword ptr [rax]
10000c802:	movsxd	r15, ebx
10000c805:	cmp	byte ptr [r14 + r15 - 0x4], 0x2e
10000c80b:	jne	0x10000c904
10000c811:	movsx	edi, byte ptr [r14 + r15 - 0x3]
10000c817:	call	0x10001978e ## symbol stub for: ___toupper
10000c81c:	cmp	eax, 0x5a
10000c81f:	jne	0x10000c904
10000c825:	mov	al, byte ptr [r14 + r15 - 0x2]
10000c82a:	add	al, -0x30
10000c82c:	cmp	al, 0x9
10000c82e:	ja	0x10000c904
10000c834:	mov	al, byte ptr [r14 + r15 - 0x1]
10000c839:	add	al, -0x30
10000c83b:	cmp	al, 0x9
10000c83d:	ja	0x10000c904
10000c843:	cmp	ebx, 0x4
10000c846:	je	0x10000c856
10000c848:	mov	al, byte ptr [r14 + r15]
10000c84c:	add	al, -0x30
10000c84e:	cmp	al, 0x9
10000c850:	ja	0x10000c904
10000c856:	lea	rbx, [rip + 0x1d2d3]
10000c85d:	movabs	rax, 0xa656469766f72
10000c867:	mov	qword ptr [rbx + 0x2d], rax
10000c86b:	movabs	rax, 0x766f7270206f7420
10000c875:	mov	qword ptr [rbx + 0x28], rax
10000c879:	movabs	rax, 0x6465656e202c6576
10000c883:	mov	qword ptr [rbx + 0x20], rax
10000c887:	movabs	rax, 0x6968637261207469
10000c891:	mov	qword ptr [rbx + 0x18], rax
10000c895:	movabs	rax, 0x6c70732073692078
10000c89f:	mov	qword ptr [rbx + 0x10], rax
10000c8a3:	movabs	rax, 0x6966206f74206576
10000c8ad:	mov	qword ptr [rbx + 0x8], rax
10000c8b1:	movabs	rax, 0x6968637261206669
10000c8bb:	mov	qword ptr [rbx], rax
10000c8be:	lea	rsi, [rip + 0x1596b] ## literal pool for: "      path of the last split with .zip extension,\n"
10000c8c5:	mov	edx, 0x13f1
10000c8ca:	mov	rdi, rbx
10000c8cd:	call	0x10001977c ## symbol stub for: ___strcat_chk
10000c8d2:	lea	rsi, [rip + 0x1598a] ## literal pool for: "      even if it doesn't exist (zip will ask for splits)"
10000c8d9:	mov	edx, 0x13f1
10000c8de:	mov	rdi, rbx
10000c8e1:	call	0x10001977c ## symbol stub for: ___strcat_chk
10000c8e6:	lea	rsi, [rip + 0xdeca] ## literal pool for: ""
10000c8ed:	mov	rdi, rbx
10000c8f0:	call	0x100003e67
10000c8f5:	mov	dword ptr [rbp - 0x94], 0x3
10000c8ff:	jmp	0x10000d888
10000c904:	lea	rbx, [rip + 0x1cefd]
10000c90b:	mov	rdi, qword ptr [rbx]
10000c90e:	lea	rsi, [rip + 0xf69b] ## literal pool for: "r"
10000c915:	call	0x1000197e8 ## symbol stub for: _fopen
10000c91a:	lea	r12, [rip + 0x1cedf]
10000c921:	mov	qword ptr [r12], rax
10000c925:	test	rax, rax
10000c928:	je	0x10000c9ed
10000c92e:	mov	rdi, rax
10000c931:	mov	rsi, -0x40000
10000c938:	mov	edx, 0x2
10000c93d:	call	0x10001980c ## symbol stub for: _fseeko
10000c942:	test	eax, eax
10000c944:	je	0x10000c970
10000c946:	mov	rdi, qword ptr [r12]
10000c94a:	xor	esi, esi
10000c94c:	xor	edx, edx
10000c94e:	call	0x10001980c ## symbol stub for: _fseeko
10000c953:	test	eax, eax
10000c955:	je	0x10000c970
10000c957:	mov	rdi, qword ptr [r12]
10000c95b:	call	0x1000197be ## symbol stub for: _fclose
10000c960:	mov	qword ptr [r12], 0x0
10000c968:	mov	rsi, qword ptr [rbx]
10000c96b:	jmp	0x10000d872
10000c970:	mov	rdi, qword ptr [r12]
10000c974:	lea	rsi, [rip + 0x1595e] ## literal pool for: "PK\005\006"
10000c97b:	call	0x10000fd76
10000c980:	test	eax, eax
10000c982:	je	0x10000d67e
10000c988:	mov	rdi, qword ptr [r12]
10000c98c:	call	0x100019818 ## symbol stub for: _ftello
10000c991:	mov	rbx, rax
10000c994:	mov	rdi, qword ptr [r12]
10000c998:	lea	rsi, [rip + 0x1593a] ## literal pool for: "PK\005\006"
10000c99f:	call	0x10000fd76
10000c9a4:	mov	rdi, qword ptr [r12]
10000c9a8:	test	eax, eax
10000c9aa:	je	0x10000c9cf
10000c9ac:	lea	r14, [rip + 0x15926] ## literal pool for: "PK\005\006"
10000c9b3:	call	0x100019818 ## symbol stub for: _ftello
10000c9b8:	mov	rbx, rax
10000c9bb:	mov	rdi, qword ptr [r12]
10000c9bf:	mov	rsi, r14
10000c9c2:	call	0x10000fd76
10000c9c7:	mov	rdi, qword ptr [r12]
10000c9cb:	test	eax, eax
10000c9cd:	jne	0x10000c9b3
10000c9cf:	mov	rsi, rbx
10000c9d2:	xor	edx, edx
10000c9d4:	call	0x10001980c ## symbol stub for: _fseeko
10000c9d9:	mov	rcx, qword ptr [r12]
10000c9dd:	test	eax, eax
10000c9df:	je	0x10000d6fc
10000c9e5:	mov	rdi, rcx
10000c9e8:	jmp	0x10000d85b
10000c9ed:	mov	rsi, qword ptr [rbx]
10000c9f0:	lea	rdi, [rip + 0x158a5] ## literal pool for: "could not open input archive: "
10000c9f7:	call	0x100003e67
10000c9fc:	lea	rax, [rip + 0x1ca59]
10000ca03:	cmp	dword ptr [rax], 0x0
10000ca06:	je	0x10000ca1e
10000ca08:	mov	rdi, qword ptr [r12]
10000ca0c:	test	rdi, rdi
10000ca0f:	je	0x10000ca1e
10000ca11:	call	0x1000197be ## symbol stub for: _fclose
10000ca16:	mov	qword ptr [r12], 0x0
10000ca1e:	lea	rdi, [rip + 0x15a8e] ## literal pool for: "Scanning for entries..."
10000ca25:	lea	rsi, [rip + 0xdd8b] ## literal pool for: ""
10000ca2c:	call	0x100003d95
10000ca31:	lea	rax, [rip + 0x1cdf8]
10000ca38:	mov	qword ptr [rax], 0x0
10000ca3f:	lea	rax, [rip + 0x1cde2]
10000ca46:	cmp	qword ptr [rax], 0x0
10000ca4a:	je	0x10000d66f
10000ca50:	xor	r15d, r15d
10000ca53:	mov	dword ptr [rbp - 0x98], 0x0
10000ca5d:	xor	esi, esi
10000ca5f:	mov	dword ptr [rbp - 0x94], r15d
10000ca66:	lea	r15, [rip + 0x1cd9b]
10000ca6d:	mov	rdi, qword ptr [r15]
10000ca70:	call	0x10001338c
10000ca75:	mov	rdi, rax
10000ca78:	mov	rax, qword ptr [r12]
10000ca7c:	test	rax, rax
10000ca7f:	mov	qword ptr [rbp - 0xa0], rdi
10000ca86:	jne	0x10000cb04
10000ca88:	lea	rsi, [rip + 0xf521] ## literal pool for: "r"
10000ca8f:	call	0x1000197e8 ## symbol stub for: _fopen
10000ca94:	mov	qword ptr [r12], rax
10000ca98:	test	rax, rax
10000ca9b:	jne	0x10000cb04
10000ca9d:	lea	r13, [rip + 0x1cd8c]
10000caa4:	mov	rbx, qword ptr [rbp - 0xa0]
10000caab:	mov	r14d, dword ptr [rbp - 0x98]
10000cab2:	mov	rdi, qword ptr [r13]
10000cab6:	call	0x100013490
10000cabb:	cmp	eax, 0x2
10000cabe:	je	0x10000d9cd
10000cac4:	cmp	eax, 0x3
10000cac7:	je	0x10000d624
10000cacd:	cmp	eax, 0x9
10000cad0:	je	0x10000d9ff
10000cad6:	mov	rdi, qword ptr [r15]
10000cad9:	mov	rsi, qword ptr [r13]
10000cadd:	call	0x10001338c
10000cae2:	mov	rbx, rax
10000cae5:	mov	rdi, rax
10000cae8:	lea	rsi, [rip + 0xf4c1] ## literal pool for: "r"
10000caef:	call	0x1000197e8 ## symbol stub for: _fopen
10000caf4:	mov	qword ptr [r12], rax
10000caf8:	test	rax, rax
10000cafb:	je	0x10000cab2
10000cafd:	mov	qword ptr [rbp - 0xa0], rbx
10000cb04:	mov	rdi, rax
10000cb07:	call	0x10000fdeb
10000cb0c:	test	eax, eax
10000cb0e:	lea	r14, [rbp - 0x90]
10000cb15:	mov	r15d, dword ptr [rbp - 0x94]
10000cb1c:	je	0x10000d5bd
10000cb22:	lea	r13, [rip + 0x1cd0f]
10000cb29:	mov	rdi, qword ptr [r12]
10000cb2d:	call	0x100019818 ## symbol stub for: _ftello
10000cb32:	mov	rbx, rax
10000cb35:	mov	r12, r13
10000cb38:	mov	qword ptr [r13], rax
10000cb3c:	lea	r13, [rip + 0x4e48e]
10000cb43:	mov	rdi, r13
10000cb46:	lea	rsi, [rip + 0x1578c] ## literal pool for: "PK\005\006"
10000cb4d:	call	0x10000feb2
10000cb52:	test	eax, eax
10000cb54:	jne	0x10000cf5c
10000cb5a:	mov	rdi, r13
10000cb5d:	lea	rsi, [rip + 0x159d4] ## literal pool for: "PK\006\006"
10000cb64:	call	0x10000feb2
10000cb69:	test	eax, eax
10000cb6b:	jne	0x10000cf98
10000cb71:	mov	rdi, r13
10000cb74:	lea	rsi, [rip + 0x159e2] ## literal pool for: "PK\006\007"
10000cb7b:	call	0x10000feb2
10000cb80:	test	eax, eax
10000cb82:	jne	0x10000cfd4
10000cb88:	mov	rdi, r13
10000cb8b:	lea	rsi, [rip + 0x1520e] ## literal pool for: "PK\003\004"
10000cb92:	call	0x10000feb2
10000cb97:	test	eax, eax
10000cb99:	jne	0x10000d047
10000cb9f:	mov	rdi, r13
10000cba2:	lea	rsi, [rip + 0x15a38] ## literal pool for: "PK\001\002"
10000cba9:	call	0x10000feb2
10000cbae:	test	eax, eax
10000cbb0:	je	0x10000d1a6
10000cbb6:	test	r15d, r15d
10000cbb9:	mov	r13, r12
10000cbbc:	lea	r12, [rip + 0x1cc3d]
10000cbc3:	jne	0x10000cc70
10000cbc9:	lea	rdi, [rip + 0x15a16] ## literal pool for: "Central Directory found..."
10000cbd0:	lea	rsi, [rip + 0xdbe0] ## literal pool for: ""
10000cbd7:	call	0x100003d95
10000cbdc:	lea	rax, [rip + 0x1e365]
10000cbe3:	mov	rbx, qword ptr [rax]
10000cbe6:	test	rbx, rbx
10000cbe9:	je	0x10000cc70
10000cbef:	mov	rax, rbx
10000cbf2:	shr	rax, 0x3d
10000cbf6:	mov	dword ptr [rbp - 0x94], 0x4
10000cc00:	jne	0x10000d888
10000cc06:	lea	rdi, [8*rbx]
10000cc0e:	call	0x100019848 ## symbol stub for: _malloc
10000cc13:	lea	rcx, [rip + 0x1e346]
10000cc1a:	mov	qword ptr [rcx], rax
10000cc1d:	test	rax, rax
10000cc20:	je	0x10000d888
10000cc26:	lea	rcx, [rip + 0x1ccab]
10000cc2d:	mov	rcx, qword ptr [rcx]
10000cc30:	test	rcx, rcx
10000cc33:	je	0x10000cc4b
10000cc35:	mov	rdx, rax
10000cc38:	mov	qword ptr [rdx], rcx
10000cc3b:	mov	rcx, qword ptr [rcx + 0x98]
10000cc42:	add	rdx, 0x8
10000cc46:	test	rcx, rcx
10000cc49:	jne	0x10000cc38
10000cc4b:	mov	edx, 0x8
10000cc50:	mov	rdi, rax
10000cc53:	mov	rsi, rbx
10000cc56:	lea	rcx, [rip + 0xfdf]
10000cc5d:	call	0x1000198a8 ## symbol stub for: _qsort
10000cc62:	lea	r13, [rip + 0x1cbcf]
10000cc69:	lea	r14, [rbp - 0x90]
10000cc70:	lea	rax, [rip + 0x1ca35]
10000cc77:	cmp	dword ptr [rax], 0x0
10000cc7a:	lea	rax, [rip + 0x1cbaf]
10000cc81:	je	0x10000ccce
10000cc83:	mov	rbx, qword ptr [rax]
10000cc86:	inc	rbx
10000cc89:	mov	rdi, qword ptr [r13]
10000cc8d:	add	rdi, -0x4
10000cc91:	xor	esi, esi
10000cc93:	lea	rdx, [rip + 0xf5ac] ## literal pool for: "u"
10000cc9a:	call	0x100016116
10000cc9f:	mov	edx, 0x13f1
10000cca4:	lea	r15, [rip + 0x1ce85]
10000ccab:	mov	rdi, r15
10000ccae:	xor	esi, esi
10000ccb0:	lea	rcx, [rip + 0x1594a] ## literal pool for: " Cen   (%2lu %6s): "
10000ccb7:	mov	r8, rbx
10000ccba:	mov	r9, rax
10000ccbd:	xor	eax, eax
10000ccbf:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000ccc4:	mov	rdi, r15
10000ccc7:	xor	esi, esi
10000ccc9:	call	0x100003c73
10000ccce:	mov	rcx, qword ptr [r12]
10000ccd2:	mov	esi, 0x2a
10000ccd7:	mov	edx, 0x1
10000ccdc:	lea	rdi, [rbp - 0x60]
10000cce0:	call	0x100019800 ## symbol stub for: _fread
10000cce5:	cmp	rax, 0x1
10000cce9:	jne	0x10000cea7
10000ccef:	mov	edi, 0xa0
10000ccf4:	call	0x100019848 ## symbol stub for: _malloc
10000ccf9:	test	rax, rax
10000ccfc:	je	0x10000d823
10000cd02:	mov	r14, rax
10000cd05:	movzx	eax, word ptr [rbp - 0x60]
10000cd09:	mov	word ptr [r14], ax
10000cd0d:	movzx	ecx, word ptr [rbp - 0x5e]
10000cd11:	mov	word ptr [r14 + 0x2], cx
10000cd16:	movzx	ecx, word ptr [rbp - 0x5c]
10000cd1a:	mov	word ptr [r14 + 0x4], cx
10000cd1f:	movzx	ecx, word ptr [rbp - 0x5a]
10000cd23:	mov	word ptr [r14 + 0x6], cx
10000cd28:	mov	ecx, dword ptr [rbp - 0x58]
10000cd2b:	mov	qword ptr [r14 + 0x8], rcx
10000cd2f:	mov	ecx, dword ptr [rbp - 0x54]
10000cd32:	mov	qword ptr [r14 + 0x10], rcx
10000cd36:	mov	ecx, dword ptr [rbp - 0x50]
10000cd39:	mov	qword ptr [r14 + 0x18], rcx
10000cd3d:	mov	ecx, dword ptr [rbp - 0x4c]
10000cd40:	mov	qword ptr [r14 + 0x20], rcx
10000cd44:	movzx	r13d, word ptr [rbp - 0x48]
10000cd49:	mov	word ptr [r14 + 0x28], r13w
10000cd4e:	movzx	r12d, word ptr [rbp - 0x46]
10000cd53:	mov	word ptr [r14 + 0x2c], r12w
10000cd58:	movzx	ebx, word ptr [rbp - 0x44]
10000cd5c:	mov	word ptr [r14 + 0x2e], bx
10000cd61:	movzx	ecx, word ptr [rbp - 0x42]
10000cd65:	mov	qword ptr [r14 + 0x30], rcx
10000cd69:	movzx	ecx, word ptr [rbp - 0x40]
10000cd6d:	mov	word ptr [r14 + 0x38], cx
10000cd72:	mov	ecx, dword ptr [rbp - 0x3e]
10000cd75:	mov	qword ptr [r14 + 0x48], rcx
10000cd79:	mov	ecx, dword ptr [rbp - 0x3a]
10000cd7c:	mov	qword ptr [r14 + 0x40], rcx
10000cd80:	xor	ecx, ecx
10000cd82:	cmp	eax, 0x100
10000cd87:	setb	cl
10000cd8a:	mov	dword ptr [r14 + 0x94], ecx
10000cd91:	mov	eax, 0x0
10000cd96:	mov	qword ptr [r14 + 0x50], rax
10000cd9a:	mov	qword ptr [r14 + 0x58], rax
10000cd9e:	mov	qword ptr [r14 + 0x60], rax
10000cda2:	mov	qword ptr [r14 + 0x68], rax
10000cda6:	mov	qword ptr [r14 + 0x70], rax
10000cdaa:	mov	qword ptr [r14 + 0x78], rax
10000cdae:	mov	qword ptr [r14 + 0x80], rax
10000cdb5:	test	r13w, r13w
10000cdb9:	je	0x10000ceda
10000cdbf:	lea	rdi, [r13 + 0x1]
10000cdc3:	call	0x100019848 ## symbol stub for: _malloc
10000cdc8:	mov	qword ptr [r14 + 0x70], rax
10000cdcc:	mov	dword ptr [rbp - 0x94], 0x4
10000cdd6:	test	rax, rax
10000cdd9:	je	0x10000d888
10000cddf:	mov	r15, rax
10000cde2:	test	r12w, r12w
10000cde6:	je	0x10000ce00
10000cde8:	inc	r12
10000cdeb:	mov	rdi, r12
10000cdee:	call	0x100019848 ## symbol stub for: _malloc
10000cdf3:	mov	qword ptr [r14 + 0x60], rax
10000cdf7:	test	rax, rax
10000cdfa:	je	0x10000d888
10000ce00:	test	bx, bx
10000ce03:	lea	r12, [rip + 0x1c9f6]
10000ce0a:	je	0x10000ce24
10000ce0c:	inc	rbx
10000ce0f:	mov	rdi, rbx
10000ce12:	call	0x100019848 ## symbol stub for: _malloc
10000ce17:	mov	qword ptr [r14 + 0x68], rax
10000ce1b:	test	rax, rax
10000ce1e:	je	0x10000d888
10000ce24:	mov	rcx, qword ptr [r12]
10000ce28:	mov	edx, 0x1
10000ce2d:	mov	rdi, r15
10000ce30:	mov	rsi, r13
10000ce33:	call	0x100019800 ## symbol stub for: _fread
10000ce38:	cmp	rax, 0x1
10000ce3c:	jne	0x10000ce8a
10000ce3e:	movzx	esi, word ptr [r14 + 0x2c]
10000ce43:	test	rsi, rsi
10000ce46:	je	0x10000ce60
10000ce48:	mov	rdi, qword ptr [r14 + 0x60]
10000ce4c:	mov	rcx, qword ptr [r12]
10000ce50:	mov	edx, 0x1
10000ce55:	call	0x100019800 ## symbol stub for: _fread
10000ce5a:	cmp	rax, 0x1
10000ce5e:	jne	0x10000ce8a
10000ce60:	movzx	esi, word ptr [r14 + 0x2e]
10000ce65:	test	rsi, rsi
10000ce68:	je	0x10000d38c
10000ce6e:	mov	rdi, qword ptr [r14 + 0x68]
10000ce72:	mov	rcx, qword ptr [r12]
10000ce76:	mov	edx, 0x1
10000ce7b:	call	0x100019800 ## symbol stub for: _fread
10000ce80:	cmp	rax, 0x1
10000ce84:	je	0x10000d38c
10000ce8a:	call	0x100019764 ## symbol stub for: ___error
10000ce8f:	mov	edi, dword ptr [rax]
10000ce91:	call	0x10001991a ## symbol stub for: _strerror
10000ce96:	lea	rdi, [rip + 0x157fa] ## literal pool for: "error reading entry:  "
10000ce9d:	mov	rsi, rax
10000cea0:	call	0x100003e67
10000cea5:	jmp	0x10000cf1c
10000cea7:	call	0x100019764 ## symbol stub for: ___error
10000ceac:	mov	edi, dword ptr [rax]
10000ceae:	call	0x10001991a ## symbol stub for: _strerror
10000ceb3:	lea	rdi, [rip + 0x1575b] ## literal pool for: "reading central directory: "
10000ceba:	mov	rsi, rax
10000cebd:	call	0x100003e67
10000cec2:	lea	rdi, [rip + 0x15768] ## literal pool for: "bad archive - error reading central directory"
10000cec9:	lea	rbx, [rip + 0xd8e7] ## literal pool for: ""
10000ced0:	mov	rsi, rbx
10000ced3:	call	0x100003e67
10000ced8:	jmp	0x10000cf31
10000ceda:	lea	rax, [rip + 0x1e067]
10000cee1:	mov	r8, qword ptr [rax]
10000cee4:	inc	r8
10000cee7:	mov	edx, 0x13f1
10000ceec:	lea	rbx, [rip + 0x1cc3d]
10000cef3:	mov	rdi, rbx
10000cef6:	xor	esi, esi
10000cef8:	lea	rcx, [rip + 0x15777] ## literal pool for: "%lu"
10000ceff:	xor	eax, eax
10000cf01:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000cf06:	lea	rdi, [rip + 0x1576d] ## literal pool for: "zero-length name for entry #"
10000cf0d:	mov	rsi, rbx
10000cf10:	call	0x100003e67
10000cf15:	lea	r12, [rip + 0x1c8e4]
10000cf1c:	lea	rbx, [rip + 0xd894] ## literal pool for: ""
10000cf23:	lea	r13, [rip + 0x1c90e]
10000cf2a:	lea	r14, [rbp - 0x90]
10000cf31:	lea	rdi, [rip + 0x15727] ## literal pool for: "skipping this entry..."
10000cf38:	mov	rsi, rbx
10000cf3b:	call	0x100003e67
10000cf40:	mov	rdi, qword ptr [r12]
10000cf44:	call	0x10000fdeb
10000cf49:	mov	r15d, 0x1
10000cf4f:	test	eax, eax
10000cf51:	jne	0x10000cb29
10000cf57:	jmp	0x10000d5bd
10000cf5c:	lea	rax, [rip + 0x1c8cd]
10000cf63:	mov	r14, qword ptr [rax]
10000cf66:	inc	r14
10000cf69:	add	rbx, -0x4
10000cf6d:	mov	rdi, rbx
10000cf70:	xor	esi, esi
10000cf72:	lea	rdx, [rip + 0xf2cd] ## literal pool for: "u"
10000cf79:	call	0x100016116
10000cf7e:	mov	edx, 0x13f1
10000cf83:	lea	rbx, [rip + 0x1cba6]
10000cf8a:	mov	rdi, rbx
10000cf8d:	xor	esi, esi
10000cf8f:	lea	rcx, [rip + 0x15588] ## literal pool for: "EOCDR found (%2lu %6s)..."
10000cf96:	jmp	0x10000d00e
10000cf98:	lea	rax, [rip + 0x1c891]
10000cf9f:	mov	r14, qword ptr [rax]
10000cfa2:	inc	r14
10000cfa5:	add	rbx, -0x4
10000cfa9:	mov	rdi, rbx
10000cfac:	xor	esi, esi
10000cfae:	lea	rdx, [rip + 0xf291] ## literal pool for: "u"
10000cfb5:	call	0x100016116
10000cfba:	mov	edx, 0x13f1
10000cfbf:	lea	rbx, [rip + 0x1cb6a]
10000cfc6:	mov	rdi, rbx
10000cfc9:	xor	esi, esi
10000cfcb:	lea	rcx, [rip + 0x1556b] ## literal pool for: "Zip64 EOCDR found (%2lu %6s)..."
10000cfd2:	jmp	0x10000d00e
10000cfd4:	lea	rax, [rip + 0x1c855]
10000cfdb:	mov	r14, qword ptr [rax]
10000cfde:	inc	r14
10000cfe1:	add	rbx, -0x4
10000cfe5:	mov	rdi, rbx
10000cfe8:	xor	esi, esi
10000cfea:	lea	rdx, [rip + 0xf255] ## literal pool for: "u"
10000cff1:	call	0x100016116
10000cff6:	mov	edx, 0x13f1
10000cffb:	lea	rbx, [rip + 0x1cb2e]
10000d002:	mov	rdi, rbx
10000d005:	xor	esi, esi
10000d007:	lea	rcx, [rip + 0x15554] ## literal pool for: "Zip64 EOCDL found (%2lu %6s)..."
10000d00e:	mov	r8, r14
10000d011:	lea	r14, [rbp - 0x90]
10000d018:	mov	r9, rax
10000d01b:	xor	eax, eax
10000d01d:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000d022:	mov	rdi, rbx
10000d025:	mov	esi, 0x1
10000d02a:	call	0x100003c73
10000d02f:	mov	r13, r12
10000d032:	lea	r12, [rip + 0x1c7c7]
10000d039:	mov	rdi, qword ptr [r12]
10000d03d:	call	0x10000fdeb
10000d042:	jmp	0x10000cf4f
10000d047:	lea	rax, [rip + 0x1c65e]
10000d04e:	cmp	dword ptr [rax], 0x0
10000d051:	lea	rax, [rip + 0x1c7d8]
10000d058:	je	0x10000d0a4
10000d05a:	mov	r14, qword ptr [rax]
10000d05d:	inc	r14
10000d060:	add	rbx, -0x4
10000d064:	mov	rdi, rbx
10000d067:	xor	esi, esi
10000d069:	lea	rdx, [rip + 0xf1d6] ## literal pool for: "u"
10000d070:	call	0x100016116
10000d075:	mov	edx, 0x13f1
10000d07a:	lea	rbx, [rip + 0x1caaf]
10000d081:	mov	rdi, rbx
10000d084:	xor	esi, esi
10000d086:	lea	rcx, [rip + 0x154f5] ## literal pool for: " Local (%2lu %6s):"
10000d08d:	mov	r8, r14
10000d090:	mov	r9, rax
10000d093:	xor	eax, eax
10000d095:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000d09a:	mov	rdi, rbx
10000d09d:	xor	esi, esi
10000d09f:	call	0x100003c73
10000d0a4:	mov	edi, 0xa0
10000d0a9:	call	0x100019848 ## symbol stub for: _malloc
10000d0ae:	test	rax, rax
10000d0b1:	je	0x10000d823
10000d0b7:	mov	rbx, rax
10000d0ba:	mov	dword ptr [rax + 0x94], 0x0
10000d0c4:	xor	eax, eax
10000d0c6:	mov	qword ptr [rbx], rax
10000d0c9:	mov	qword ptr [rbx + 0x8], rax
10000d0cd:	mov	qword ptr [rbx + 0x10], rax
10000d0d1:	mov	qword ptr [rbx + 0x18], rax
10000d0d5:	mov	qword ptr [rbx + 0x20], rax
10000d0d9:	mov	word ptr [rbx + 0x28], 0x0
10000d0df:	mov	qword ptr [rbx + 0x2c], rax
10000d0e3:	mov	qword ptr [rbx + 0x32], rax
10000d0e7:	mov	qword ptr [rbx + 0x40], rax
10000d0eb:	mov	qword ptr [rbx + 0x48], rax
10000d0ef:	mov	qword ptr [rbx + 0x50], rax
10000d0f3:	mov	qword ptr [rbx + 0x58], rax
10000d0f7:	mov	qword ptr [rbx + 0x60], rax
10000d0fb:	mov	qword ptr [rbx + 0x68], rax
10000d0ff:	mov	qword ptr [rbx + 0x70], rax
10000d103:	mov	qword ptr [rbx + 0x78], rax
10000d107:	mov	qword ptr [rbx + 0x80], rax
10000d10e:	mov	rdi, rbx
10000d111:	call	0x10000ed64
10000d116:	mov	r13d, eax
10000d119:	test	r15d, r15d
10000d11c:	je	0x10000d173
10000d11e:	lea	rax, [rip + 0x1c70b]
10000d125:	mov	r14, qword ptr [rax]
10000d128:	inc	r14
10000d12b:	mov	rdi, qword ptr [r12]
10000d12f:	add	rdi, -0x4
10000d133:	xor	esi, esi
10000d135:	lea	rdx, [rip + 0xf10a] ## literal pool for: "u"
10000d13c:	call	0x100016116
10000d141:	mov	edx, 0x13f1
10000d146:	lea	r15, [rip + 0x1c9e3]
10000d14d:	mov	rdi, r15
10000d150:	xor	esi, esi
10000d152:	lea	rcx, [rip + 0x15456] ## literal pool for: "Entry after central directory found (%2lu %6s)..."
10000d159:	mov	r8, r14
10000d15c:	mov	r9, rax
10000d15f:	xor	eax, eax
10000d161:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000d166:	mov	rdi, r15
10000d169:	mov	esi, 0x1
10000d16e:	call	0x100003c73
10000d173:	test	r13d, r13d
10000d176:	je	0x10000d2c1
10000d17c:	xor	r15d, r15d
10000d17f:	mov	dword ptr [rbp - 0x98], r13d
10000d186:	cmp	r13d, 0x2
10000d18a:	lea	r14, [rbp - 0x90]
10000d191:	mov	r13, r12
10000d194:	lea	r12, [rip + 0x1c665]
10000d19b:	jne	0x10000d039
10000d1a1:	jmp	0x10000d5bd
10000d1a6:	mov	rbx, r13
10000d1a9:	lea	rax, [rip + 0x1c728]
10000d1b0:	cmp	qword ptr [rax], 0x0
10000d1b4:	lea	r13, [rip + 0x1c975]
10000d1bb:	je	0x10000d330
10000d1c1:	mov	dword ptr [rbp - 0x94], r15d
10000d1c8:	movabs	rax, 0x7463657078656e75
10000d1d2:	mov	qword ptr [r13], rax
10000d1d6:	movabs	rax, 0x616e676973206465
10000d1e0:	mov	qword ptr [r13 + 0x8], rax
10000d1e4:	movabs	rax, 0x2065727574616e
10000d1ee:	mov	qword ptr [r13 + 0xe], rax
10000d1f2:	mov	r12, rbx
10000d1f5:	xor	ebx, ebx
10000d1f7:	mov	r15, r14
10000d1fa:	lea	r14, [rip + 0x15628] ## literal pool for: "%02x "
10000d201:	movsx	r8d, byte ptr [rbx + r12]
10000d206:	mov	edx, 0x28
10000d20b:	mov	rdi, r15
10000d20e:	xor	esi, esi
10000d210:	mov	rcx, r14
10000d213:	xor	eax, eax
10000d215:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000d21a:	mov	edx, 0x13f1
10000d21f:	mov	rdi, r13
10000d222:	mov	rsi, r15
10000d225:	call	0x10001977c ## symbol stub for: ___strcat_chk
10000d22a:	inc	rbx
10000d22d:	cmp	rbx, 0x4
10000d231:	jne	0x10000d201
10000d233:	lea	rax, [rip + 0x1c5f6]
10000d23a:	mov	rbx, qword ptr [rax]
10000d23d:	lea	r14, [rip + 0x1c5f4]
10000d244:	mov	rdi, qword ptr [r14]
10000d247:	add	rdi, -0x4
10000d24b:	xor	esi, esi
10000d24d:	lea	rdx, [rip + 0xeff2] ## literal pool for: "u"
10000d254:	call	0x100016116
10000d259:	mov	edx, 0x28
10000d25e:	mov	rdi, r15
10000d261:	xor	esi, esi
10000d263:	lea	rcx, [rip + 0x155c5] ## literal pool for: "on disk %lu at %s\n"
10000d26a:	mov	r8, rbx
10000d26d:	mov	r9, rax
10000d270:	xor	eax, eax
10000d272:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000d277:	mov	edx, 0x13f1
10000d27c:	mov	rdi, r13
10000d27f:	mov	rsi, r15
10000d282:	call	0x10001977c ## symbol stub for: ___strcat_chk
10000d287:	mov	rdi, r13
10000d28a:	mov	r13, r14
10000d28d:	lea	rbx, [rip + 0xd523] ## literal pool for: ""
10000d294:	mov	rsi, rbx
10000d297:	call	0x100003e67
10000d29c:	lea	rdi, [rip + 0x1559f] ## literal pool for: "skipping this signature..."
10000d2a3:	mov	rsi, rbx
10000d2a6:	call	0x100003e67
10000d2ab:	lea	r12, [rip + 0x1c54e]
10000d2b2:	mov	r14, r15
10000d2b5:	mov	r15d, dword ptr [rbp - 0x94]
10000d2bc:	jmp	0x10000d039
10000d2c1:	lea	rax, [rip + 0x1dc80]
10000d2c8:	inc	qword ptr [rax]
10000d2cb:	lea	rax, [rip + 0x1c45e]
10000d2d2:	inc	qword ptr [rax]
10000d2d5:	mov	rax, qword ptr [rbx + 0x18]
10000d2d9:	lea	rcx, [rip + 0x1c470]
10000d2e0:	add	qword ptr [rcx], rax
10000d2e3:	lea	rax, [rip + 0x1c5ee]
10000d2ea:	cmp	qword ptr [rax], 0x0
10000d2ee:	mov	rcx, qword ptr [rbp - 0xa8]
10000d2f5:	cmove	rcx, rax
10000d2f9:	mov	qword ptr [rcx], rbx
10000d2fc:	mov	rax, rbx
10000d2ff:	add	rax, 0x98
10000d305:	mov	qword ptr [rbp - 0xa8], rax
10000d30c:	mov	qword ptr [rbx + 0x98], 0x0
10000d317:	mov	dword ptr [rbp - 0x98], 0x0
10000d321:	xor	r15d, r15d
10000d324:	lea	r14, [rbp - 0x90]
10000d32b:	jmp	0x10000d02f
10000d330:	mov	rdi, rbx
10000d333:	lea	rsi, [rip + 0x1540a] ## literal pool for: "PK\007\010"
10000d33a:	call	0x10000feb2
10000d33f:	lea	r13, [rip + 0x1c7ea]
10000d346:	test	eax, eax
10000d348:	je	0x10000d1c1
10000d34e:	lea	rax, [rip + 0x1c4d3]
10000d355:	mov	rax, qword ptr [rax]
10000d358:	test	rax, rax
10000d35b:	lea	r13, [rip + 0x1c4d6]
10000d362:	je	0x10000d589
10000d368:	cmp	rax, 0x1
10000d36c:	lea	r12, [rip + 0x1c48d]
10000d373:	lea	rsi, [rip + 0xd43d] ## literal pool for: ""
10000d37a:	jne	0x10000d5a1
10000d380:	lea	rdi, [rip + 0x153c2] ## literal pool for: "  Found spanning marker, but did not expect split (multi-disk) archive..."
10000d387:	jmp	0x10000d5a8
10000d38c:	mov	rax, qword ptr [r14 + 0x70]
10000d390:	movzx	ecx, word ptr [r14 + 0x28]
10000d395:	mov	byte ptr [rax + rcx], 0x0
10000d399:	mov	rdi, qword ptr [r14 + 0x70]
10000d39d:	call	0x10000a6ea
10000d3a2:	test	rax, rax
10000d3a5:	je	0x10000d540
10000d3ab:	mov	r15, rax
10000d3ae:	mov	rax, qword ptr [rax + 0x8]
10000d3b2:	cmp	rax, qword ptr [r14 + 0x8]
10000d3b6:	jne	0x10000d540
10000d3bc:	lea	rax, [rip + 0x1c2e9]
10000d3c3:	cmp	dword ptr [rax], 0x0
10000d3c6:	je	0x10000d3f5
10000d3c8:	mov	r8, qword ptr [r14 + 0x70]
10000d3cc:	mov	edx, 0x13f1
10000d3d1:	lea	rbx, [rip + 0x1c758]
10000d3d8:	mov	rdi, rbx
10000d3db:	xor	esi, esi
10000d3dd:	lea	rcx, [rip + 0xfd2f] ## literal pool for: "updating: %s"
10000d3e4:	xor	eax, eax
10000d3e6:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000d3eb:	mov	rdi, rbx
10000d3ee:	xor	esi, esi
10000d3f0:	call	0x100003c73
10000d3f5:	mov	r8, qword ptr [r15 + 0x10]
10000d3f9:	mov	r9, qword ptr [r14 + 0x10]
10000d3fd:	cmp	r8, r9
10000d400:	lea	r13, [rip + 0x1c431]
10000d407:	je	0x10000d437
10000d409:	mov	edx, 0x13f1
10000d40e:	lea	rbx, [rip + 0x1c71b]
10000d415:	mov	rdi, rbx
10000d418:	xor	esi, esi
10000d41a:	lea	rcx, [rip + 0x1528d] ## literal pool for: "local (%lu) and cen (%lu) crc mismatch"
10000d421:	xor	eax, eax
10000d423:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000d428:	mov	rdi, rbx
10000d42b:	lea	rsi, [rip + 0xd385] ## literal pool for: ""
10000d432:	call	0x100003e67
10000d437:	movzx	eax, word ptr [r14]
10000d43b:	mov	word ptr [r15], ax
10000d43f:	movzx	eax, word ptr [r14 + 0x2c]
10000d444:	mov	word ptr [r15 + 0x2c], ax
10000d449:	movzx	eax, word ptr [r14 + 0x2e]
10000d44e:	mov	word ptr [r15 + 0x2e], ax
10000d453:	movups	xmm0, xmmword ptr [r14 + 0x60]
10000d458:	movups	xmmword ptr [r15 + 0x60], xmm0
10000d45d:	movzx	eax, word ptr [r14 + 0x38]
10000d462:	mov	word ptr [r15 + 0x38], ax
10000d467:	mov	rax, qword ptr [r14 + 0x48]
10000d46b:	mov	qword ptr [r15 + 0x48], rax
10000d46f:	mov	eax, dword ptr [r14 + 0x94]
10000d476:	mov	dword ptr [r15 + 0x94], eax
10000d47d:	lea	rax, [rip + 0x1c228]
10000d484:	cmp	dword ptr [rax], 0x0
10000d487:	lea	rbx, [rip + 0x1c36a]
10000d48e:	je	0x10000d498
10000d490:	mov	rdi, r15
10000d493:	call	0x10000ff19
10000d498:	mov	rdi, qword ptr [rbx]
10000d49b:	call	0x100019818 ## symbol stub for: _ftello
10000d4a0:	mov	rcx, rbx
10000d4a3:	mov	rbx, rax
10000d4a6:	mov	rdi, qword ptr [rcx]
10000d4a9:	mov	rsi, qword ptr [r15 + 0x40]
10000d4ad:	xor	edx, edx
10000d4af:	call	0x10001980c ## symbol stub for: _fseeko
10000d4b4:	test	eax, eax
10000d4b6:	jne	0x10000dbb0
10000d4bc:	mov	rdi, r15
10000d4bf:	mov	esi, 0x1
10000d4c4:	call	0x10000dc54
10000d4c9:	test	eax, eax
10000d4cb:	je	0x10000d4e0
10000d4cd:	lea	rdi, [rip + 0x15218] ## literal pool for: "Error rewriting local header"
10000d4d4:	lea	rsi, [rip + 0xd2dc] ## literal pool for: ""
10000d4db:	call	0x100003e67
10000d4e0:	lea	r15, [rip + 0x1c311]
10000d4e7:	mov	rdi, qword ptr [r15]
10000d4ea:	mov	rsi, rbx
10000d4ed:	xor	edx, edx
10000d4ef:	call	0x10001980c ## symbol stub for: _fseeko
10000d4f4:	test	eax, eax
10000d4f6:	lea	r14, [rbp - 0x90]
10000d4fd:	jne	0x10000dbd6
10000d503:	mov	rdi, qword ptr [r15]
10000d506:	call	0x100019818 ## symbol stub for: _ftello
10000d50b:	cmp	rbx, rax
10000d50e:	jne	0x10000dbfc
10000d514:	lea	rax, [rip + 0x1c191]
10000d51b:	cmp	dword ptr [rax], 0x0
10000d51e:	je	0x10000d5b2
10000d524:	mov	r15d, 0x1
10000d52a:	lea	rdi, [rip + 0xd286] ## literal pool for: ""
10000d531:	mov	esi, 0x1
10000d536:	call	0x100003c73
10000d53b:	jmp	0x10000d039
10000d540:	mov	r8, qword ptr [r14 + 0x70]
10000d544:	mov	edx, 0x13f1
10000d549:	lea	rbx, [rip + 0x1c5e0]
10000d550:	mov	rdi, rbx
10000d553:	xor	esi, esi
10000d555:	lea	rcx, [rip + 0x151d5] ## literal pool for: "no local entry: %s"
10000d55c:	xor	eax, eax
10000d55e:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000d563:	mov	r15d, 0x1
10000d569:	mov	rdi, rbx
10000d56c:	mov	esi, 0x1
10000d571:	call	0x100003c73
10000d576:	lea	r13, [rip + 0x1c2bb]
10000d57d:	lea	r14, [rbp - 0x90]
10000d584:	jmp	0x10000d039
10000d589:	lea	rdi, [rip + 0x1524f] ## literal pool for: "  Found spanning marker - could be split archive..."
10000d590:	lea	rsi, [rip + 0xd220] ## literal pool for: ""
10000d597:	call	0x100003d95
10000d59c:	jmp	0x10000d032
10000d5a1:	lea	rdi, [rip + 0x151eb] ## literal pool for: "  Found spanning marker - expected as this is split (multi-disk) archive..."
10000d5a8:	call	0x100003d95
10000d5ad:	jmp	0x10000d039
10000d5b2:	mov	r15d, 0x1
10000d5b8:	jmp	0x10000d039
10000d5bd:	mov	rdi, qword ptr [r12]
10000d5c1:	test	rdi, rdi
10000d5c4:	je	0x10000d5cb
10000d5c6:	call	0x1000197be ## symbol stub for: _fclose
10000d5cb:	mov	qword ptr [r12], 0x0
10000d5d3:	mov	rdi, qword ptr [rbp - 0xa0]
10000d5da:	call	0x100019806 ## symbol stub for: _free
10000d5df:	mov	r14d, dword ptr [rbp - 0x98]
10000d5e6:	cmp	r14d, 0x2
10000d5ea:	lea	r13, [rip + 0x1c23f]
10000d5f1:	je	0x10000d66f
10000d5f3:	mov	dword ptr [rbp - 0x98], r14d
10000d5fa:	mov	rsi, qword ptr [r13]
10000d5fe:	inc	rsi
10000d601:	mov	qword ptr [r13], rsi
10000d605:	mov	dword ptr [rbp - 0x94], 0x0
10000d60f:	lea	rax, [rip + 0x1c212]
10000d616:	cmp	rsi, qword ptr [rax]
10000d619:	jb	0x10000ca5f
10000d61f:	jmp	0x10000d888
10000d624:	lea	r15, [rip + 0xd18c] ## literal pool for: ""
10000d62b:	mov	rdi, r15
10000d62e:	mov	esi, 0x1
10000d633:	call	0x100003c73
10000d638:	mov	r8, qword ptr [r13]
10000d63c:	mov	edx, 0x13f1
10000d641:	lea	rbx, [rip + 0x1c4e8]
10000d648:	mov	rdi, rbx
10000d64b:	xor	esi, esi
10000d64d:	lea	rcx, [rip + 0x14eb3] ## literal pool for: "skipping disk %lu ...\n"
10000d654:	xor	eax, eax
10000d656:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000d65b:	mov	rdi, rbx
10000d65e:	mov	rsi, r15
10000d661:	call	0x100003e67
10000d666:	mov	r15d, dword ptr [rbp - 0x94]
10000d66d:	jmp	0x10000d5f3
10000d66f:	mov	dword ptr [rbp - 0x94], 0x0
10000d679:	jmp	0x10000d888
10000d67e:	lea	rbx, [rip + 0x1c4ab]
10000d685:	movabs	rax, 0xa657669686372
10000d68f:	mov	qword ptr [rbx + 0x2d], rax
10000d693:	movabs	rax, 0x6863726120736968
10000d69d:	mov	qword ptr [rbx + 0x28], rax
10000d6a1:	movabs	rax, 0x7420726568746965
10000d6ab:	mov	qword ptr [rbx + 0x20], rax
10000d6af:	movabs	rax, 0x202d206572757461
10000d6b9:	mov	qword ptr [rbx + 0x18], rax
10000d6bd:	movabs	rax, 0x6e67697320295244
10000d6c7:	mov	qword ptr [rbx + 0x10], rax
10000d6cb:	movabs	rax, 0x434f452820646e65
10000d6d5:	mov	qword ptr [rbx + 0x8], rax
10000d6d9:	movabs	rax, 0x20676e697373694d
10000d6e3:	mov	qword ptr [rbx], rax
10000d6e6:	lea	rsi, [rip + 0x14c26] ## literal pool for: "                     is not readable or the end is damaged"
10000d6ed:	mov	edx, 0x13f1
10000d6f2:	mov	rdi, rbx
10000d6f5:	call	0x10001977c ## symbol stub for: ___strcat_chk
10000d6fa:	jmp	0x10000d74f
10000d6fc:	lea	rdi, [rbp - 0x60]
10000d700:	mov	esi, 0x1
10000d705:	mov	edx, 0x12
10000d70a:	call	0x100019800 ## symbol stub for: _fread
10000d70f:	cmp	rax, 0x11
10000d713:	ja	0x10000d8c7
10000d719:	lea	rdx, [rip + 0xeb26] ## literal pool for: "u"
10000d720:	mov	rdi, rax
10000d723:	xor	esi, esi
10000d725:	call	0x100016116
10000d72a:	lea	rbx, [rip + 0x1c3ff]
10000d731:	lea	rcx, [rip + 0x14c16] ## literal pool for: "End record (EOCDR) only %s bytes - assume truncated"
10000d738:	mov	edx, 0x13f1
10000d73d:	mov	rdi, rbx
10000d740:	mov	esi, 0x0
10000d745:	mov	r8, rax
10000d748:	xor	eax, eax
10000d74a:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000d74f:	lea	rsi, [rip + 0xd061] ## literal pool for: ""
10000d756:	mov	rdi, rbx
10000d759:	call	0x100003e67
10000d75e:	lea	rax, [rip + 0x1c0c3]
10000d765:	cmp	qword ptr [rax], 0x0
10000d769:	je	0x10000d842
10000d76f:	lea	rax, [rip + 0x1bce6]
10000d776:	cmp	dword ptr [rax], 0x0
10000d779:	je	0x10000d8b4
10000d77f:	lea	rax, [rip + 0x1c0a2]
10000d786:	cmp	qword ptr [rax], 0xf4240
10000d78d:	jne	0x10000c9fc
10000d793:	lea	rdi, [rip + 0x14cd2] ## literal pool for: "Is this a single-disk archive?  (y/n): "
10000d79a:	xor	eax, eax
10000d79c:	call	0x100019890 ## symbol stub for: _printf
10000d7a1:	mov	rax, qword ptr [rip + 0x16880] ## literal pool symbol address: ___stdoutp
10000d7a8:	mov	rdi, qword ptr [rax]
10000d7ab:	call	0x1000197d6 ## symbol stub for: _fflush
10000d7b0:	mov	rax, qword ptr [rip + 0x16869] ## literal pool symbol address: ___stdinp
10000d7b7:	mov	rdx, qword ptr [rax]
10000d7ba:	lea	rbx, [rip + 0x1c36f]
10000d7c1:	mov	rdi, rbx
10000d7c4:	mov	esi, 0x64
10000d7c9:	call	0x1000197dc ## symbol stub for: _fgets
10000d7ce:	test	rax, rax
10000d7d1:	je	0x10000d7fc
10000d7d3:	mov	al, byte ptr [rbx]
10000d7d5:	or	al, 0x20
10000d7d7:	cmp	al, 0x79
10000d7d9:	jne	0x10000d7fc
10000d7db:	lea	rax, [rip + 0x1c046]
10000d7e2:	mov	qword ptr [rax], 0x1
10000d7e9:	lea	rdi, [rip + 0x14ca4] ## literal pool for: "  Assuming single-disk archive"
10000d7f0:	lea	rsi, [rip + 0xcfc0] ## literal pool for: ""
10000d7f7:	call	0x100003d95
10000d7fc:	lea	rax, [rip + 0x1c025]
10000d803:	cmp	qword ptr [rax], 0xf4240
10000d80a:	jne	0x10000c9fc
10000d810:	lea	rax, [rip + 0x1c011]
10000d817:	mov	qword ptr [rax], 0x186a0
10000d81e:	jmp	0x10000c9fc
10000d823:	lea	rdi, [rip + 0x14d6b] ## literal pool for: "reading central directory"
10000d82a:	lea	rsi, [rip + 0xcf86] ## literal pool for: ""
10000d831:	call	0x100003e67
10000d836:	mov	dword ptr [rbp - 0x94], 0x4
10000d840:	jmp	0x10000d888
10000d842:	mov	rdi, qword ptr [r12]
10000d846:	xor	esi, esi
10000d848:	xor	edx, edx
10000d84a:	call	0x10001980c ## symbol stub for: _fseeko
10000d84f:	mov	rdi, qword ptr [r12]
10000d853:	test	eax, eax
10000d855:	je	0x10000d980
10000d85b:	call	0x1000197be ## symbol stub for: _fclose
10000d860:	mov	qword ptr [r12], 0x0
10000d868:	lea	rax, [rip + 0x1bf99]
10000d86f:	mov	rsi, qword ptr [rax]
10000d872:	lea	rdi, [rip + 0x14a42] ## literal pool for: "unable to seek in input file "
10000d879:	call	0x100003e67
10000d87e:	mov	dword ptr [rbp - 0x94], 0xb
10000d888:	mov	rax, qword ptr [rip + 0x16781] ## literal pool symbol address: ___stack_chk_guard
10000d88f:	mov	rax, qword ptr [rax]
10000d892:	cmp	rax, qword ptr [rbp - 0x30]
10000d896:	jne	0x10000dc37
10000d89c:	mov	eax, dword ptr [rbp - 0x94]
10000d8a2:	add	rsp, 0x88
10000d8a9:	pop	rbx
10000d8aa:	pop	r12
10000d8ac:	pop	r13
10000d8ae:	pop	r14
10000d8b0:	pop	r15
10000d8b2:	pop	rbp
10000d8b3:	ret
10000d8b4:	lea	rax, [rip + 0x1bf6d]
10000d8bb:	mov	qword ptr [rax], 0x1
10000d8c2:	jmp	0x10000c9fc
10000d8c7:	movzx	ecx, word ptr [rbp - 0x60]
10000d8cb:	lea	rax, [rcx + 0x1]
10000d8cf:	lea	rdx, [rip + 0x1bf52]
10000d8d6:	mov	qword ptr [rdx], rax
10000d8d9:	lea	rdx, [rip + 0x1bf50]
10000d8e0:	mov	qword ptr [rdx], rcx
10000d8e3:	cmp	rcx, 0xffff
10000d8ea:	je	0x10000d91e
10000d8ec:	movzx	ecx, word ptr [rbp - 0x5e]
10000d8f0:	cmp	rcx, rax
10000d8f3:	jbe	0x10000d91e
10000d8f5:	lea	rdi, [rip + 0x14a86] ## literal pool for: "End record (EOCDR) has bad disk numbers - ignoring EOCDR"
10000d8fc:	lea	rsi, [rip + 0xceb4] ## literal pool for: ""
10000d903:	call	0x100003e67
10000d908:	lea	rax, [rip + 0x1bf19]
10000d90f:	mov	qword ptr [rax], 0x0
10000d916:	xor	r8d, r8d
10000d919:	jmp	0x10000db55
10000d91e:	movzx	ebx, word ptr [rbp - 0x50]
10000d922:	lea	r14, [rip + 0x1d617]
10000d929:	mov	word ptr [r14], bx
10000d92d:	test	bx, bx
10000d930:	je	0x10000db27
10000d936:	lea	rdi, [rbx + 0x1]
10000d93a:	call	0x100019848 ## symbol stub for: _malloc
10000d93f:	lea	r15, [rip + 0x1bfa2]
10000d946:	mov	qword ptr [r15], rax
10000d949:	test	rax, rax
10000d94c:	je	0x10000d836
10000d952:	mov	rcx, qword ptr [r12]
10000d956:	mov	edx, 0x1
10000d95b:	mov	rdi, rax
10000d95e:	mov	rsi, rbx
10000d961:	call	0x100019800 ## symbol stub for: _fread
10000d966:	mov	rdi, qword ptr [r15]
10000d969:	cmp	rax, 0x1
10000d96d:	jne	0x10000db08
10000d973:	movzx	eax, word ptr [r14]
10000d977:	mov	byte ptr [rdi + rax], 0x0
10000d97b:	jmp	0x10000db27
10000d980:	call	0x10000fdeb
10000d985:	test	eax, eax
10000d987:	je	0x10000d76f
10000d98d:	mov	rdi, qword ptr [r12]
10000d991:	call	0x100019818 ## symbol stub for: _ftello
10000d996:	lea	rbx, [rip + 0x1be9b]
10000d99d:	mov	qword ptr [rbx], rax
10000d9a0:	cmp	rax, 0x4
10000d9a4:	jne	0x10000da1d
10000d9a6:	lea	rdi, [rip + 0x4d624]
10000d9ad:	lea	rsi, [rip + 0x14ab3] ## literal pool for: "PK\003\003"
10000d9b4:	call	0x10000feb2
10000d9b9:	test	eax, eax
10000d9bb:	je	0x10000da21
10000d9bd:	mov	rdi, qword ptr [r12]
10000d9c1:	call	0x10000fdeb
10000d9c6:	test	eax, eax
10000d9c8:	setne	cl
10000d9cb:	jmp	0x10000da48
10000d9cd:	lea	rbx, [rip + 0xcde3] ## literal pool for: ""
10000d9d4:	mov	rdi, rbx
10000d9d7:	mov	esi, 0x1
10000d9dc:	call	0x100003c73
10000d9e1:	lea	rdi, [rip + 0x14afa] ## literal pool for: "user ended reading - closing archive"
10000d9e8:	mov	rsi, rbx
10000d9eb:	call	0x100003e67
10000d9f0:	mov	dword ptr [rbp - 0x94], 0x2
10000d9fa:	jmp	0x10000d888
10000d9ff:	lea	rdi, [rip + 0x14ac5] ## literal pool for: "could not find split: "
10000da06:	mov	rsi, rbx
10000da09:	call	0x100003e67
10000da0e:	mov	dword ptr [rbp - 0x94], 0x9
10000da18:	jmp	0x10000d888
10000da1d:	mov	cl, 0x1
10000da1f:	ja	0x10000da48
10000da21:	lea	rdi, [rip + 0x4d5a9]
10000da28:	lea	rsi, [rip + 0x14a38] ## literal pool for: "PK\003\003"
10000da2f:	call	0x10000feb2
10000da34:	mov	cl, 0x1
10000da36:	test	eax, eax
10000da38:	je	0x10000da48
10000da3a:	lea	rax, [rip + 0x1bde7]
10000da41:	mov	qword ptr [rax], 0x1869f
10000da48:	test	cl, cl
10000da4a:	je	0x10000d76f
10000da50:	lea	rax, [rip + 0x1bdd1]
10000da57:	cmp	qword ptr [rax], 0x0
10000da5b:	jne	0x10000d76f
10000da61:	mov	rdi, qword ptr [r12]
10000da65:	call	0x100019818 ## symbol stub for: _ftello
10000da6a:	mov	qword ptr [rbx], rax
10000da6d:	cmp	rax, 0x8
10000da71:	jne	0x10000d76f
10000da77:	lea	rdi, [rip + 0x4d553]
10000da7e:	lea	rsi, [rip + 0x1431b] ## literal pool for: "PK\003\004"
10000da85:	call	0x10000feb2
10000da8a:	test	eax, eax
10000da8c:	je	0x10000d76f
10000da92:	lea	rdi, [rip + 0x149d3] ## literal pool for: "Is this a single-disk archive?  (y/n): "
10000da99:	xor	eax, eax
10000da9b:	call	0x100019890 ## symbol stub for: _printf
10000daa0:	mov	rax, qword ptr [rip + 0x16581] ## literal pool symbol address: ___stdoutp
10000daa7:	mov	rdi, qword ptr [rax]
10000daaa:	call	0x1000197d6 ## symbol stub for: _fflush
10000daaf:	mov	rax, qword ptr [rip + 0x1656a] ## literal pool symbol address: ___stdinp
10000dab6:	mov	rdx, qword ptr [rax]
10000dab9:	lea	rbx, [rip + 0x1c070]
10000dac0:	mov	rdi, rbx
10000dac3:	mov	esi, 0x64
10000dac8:	call	0x1000197dc ## symbol stub for: _fgets
10000dacd:	test	rax, rax
10000dad0:	je	0x10000d76f
10000dad6:	mov	al, byte ptr [rbx]
10000dad8:	or	al, 0x20
10000dada:	cmp	al, 0x79
10000dadc:	jne	0x10000d76f
10000dae2:	lea	rax, [rip + 0x1bd3f]
10000dae9:	mov	qword ptr [rax], 0x1
10000daf0:	lea	rdi, [rip + 0x1499d] ## literal pool for: "  Assuming single-disk archive"
10000daf7:	lea	rsi, [rip + 0xccb9] ## literal pool for: ""
10000dafe:	call	0x100003d95
10000db03:	jmp	0x10000d76f
10000db08:	call	0x100019806 ## symbol stub for: _free
10000db0d:	mov	qword ptr [r15], 0x0
10000db14:	lea	rdi, [rip + 0x148a0] ## literal pool for: "zipfile comment truncated - ignoring"
10000db1b:	lea	rsi, [rip + 0xcc95] ## literal pool for: ""
10000db22:	call	0x100003e67
10000db27:	lea	rax, [rip + 0x1bcfa]
10000db2e:	mov	r8, qword ptr [rax]
10000db31:	cmp	r8, 0x1
10000db35:	jne	0x10000db55
10000db37:	lea	rdi, [rip + 0x1bff2]
10000db3e:	lea	rcx, [rip + 0x148ce] ## literal pool for: " Found end record (EOCDR) - says expect single disk archive"
10000db45:	mov	edx, 0x13f1
10000db4a:	xor	esi, esi
10000db4c:	xor	eax, eax
10000db4e:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000db53:	jmp	0x10000db74
10000db55:	lea	rdi, [rip + 0x1bfd4]
10000db5c:	lea	rcx, [rip + 0x1487d] ## literal pool for: " Found end record (EOCDR) - says expect %lu splits"
10000db63:	mov	edx, 0x13f1
10000db68:	mov	esi, 0x0
10000db6d:	xor	eax, eax
10000db6f:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000db74:	lea	rdi, [rip + 0x1bfb5]
10000db7b:	lea	rsi, [rip + 0xcc35] ## literal pool for: ""
10000db82:	call	0x100003d95
10000db87:	lea	rax, [rip + 0x1bd5a]
10000db8e:	cmp	qword ptr [rax], 0x0
10000db92:	je	0x10000d75e
10000db98:	lea	rdi, [rip + 0x148b0] ## literal pool for: "  Found archive comment"
10000db9f:	lea	rsi, [rip + 0xcc11] ## literal pool for: ""
10000dba6:	call	0x100003d95
10000dbab:	jmp	0x10000d75e
10000dbb0:	mov	rdi, qword ptr [r12]
10000dbb4:	call	0x1000197be ## symbol stub for: _fclose
10000dbb9:	mov	qword ptr [r12], 0x0
10000dbc1:	call	0x100019764 ## symbol stub for: ___error
10000dbc6:	mov	edi, dword ptr [rax]
10000dbc8:	call	0x10001991a ## symbol stub for: _strerror
10000dbcd:	lea	rdi, [rip + 0x14b01] ## literal pool for: "writing archive seek: "
10000dbd4:	jmp	0x10000dc20
10000dbd6:	mov	rdi, qword ptr [r12]
10000dbda:	call	0x1000197be ## symbol stub for: _fclose
10000dbdf:	mov	qword ptr [r12], 0x0
10000dbe7:	call	0x100019764 ## symbol stub for: ___error
10000dbec:	mov	edi, dword ptr [rax]
10000dbee:	call	0x10001991a ## symbol stub for: _strerror
10000dbf3:	lea	rdi, [rip + 0x14b0f] ## literal pool for: "write archive seek: "
10000dbfa:	jmp	0x10000dc20
10000dbfc:	mov	rdi, qword ptr [r12]
10000dc00:	call	0x1000197be ## symbol stub for: _fclose
10000dc05:	mov	qword ptr [r12], 0x0
10000dc0d:	call	0x100019764 ## symbol stub for: ___error
10000dc12:	mov	edi, dword ptr [rax]
10000dc14:	call	0x10001991a ## symbol stub for: _strerror
10000dc19:	lea	rdi, [rip + 0x14afe] ## literal pool for: "seek after local: "
10000dc20:	mov	rsi, rax
10000dc23:	call	0x100003e67
10000dc28:	mov	dword ptr [rbp - 0x94], 0xe
10000dc32:	jmp	0x10000d888
10000dc37:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
10000dc3c:	push	rbp
10000dc3d:	mov	rbp, rsp
10000dc40:	mov	rax, qword ptr [rdi]
10000dc43:	mov	rdi, qword ptr [rax + 0x70]
10000dc47:	mov	rax, qword ptr [rsi]
10000dc4a:	mov	rsi, qword ptr [rax + 0x70]
10000dc4e:	pop	rbp
10000dc4f:	jmp	0x100015d2c
10000dc54:	push	rbp
10000dc55:	mov	rbp, rsp
10000dc58:	push	r15
10000dc5a:	push	r14
10000dc5c:	push	r13
10000dc5e:	push	r12
10000dc60:	push	rbx
10000dc61:	sub	rsp, 0x38
10000dc65:	mov	ebx, esi
10000dc67:	mov	r15, rdi
10000dc6a:	xor	eax, eax
10000dc6c:	mov	qword ptr [rbp - 0x38], rax
10000dc70:	mov	qword ptr [rbp - 0x30], rax
10000dc74:	mov	qword ptr [rbp - 0x40], rax
10000dc78:	mov	rdi, qword ptr [rdi + 0x50]
10000dc7c:	lea	rsi, [rip + 0xe87f] ## literal pool for: "-"
10000dc83:	call	0x10001990e ## symbol stub for: _strcmp
10000dc88:	test	ebx, ebx
10000dc8a:	mov	dword ptr [rbp - 0x44], ebx
10000dc8d:	lea	r14, [rip + 0x1bb0c]
10000dc94:	je	0x10000dd59
10000dc9a:	mov	ebx, dword ptr [r14]
10000dc9d:	mov	dword ptr [r14], 0x0
10000dca4:	cmp	dword ptr [r15 + 0x1c], 0x0
10000dca9:	je	0x10000dd72
10000dcaf:	lea	rax, [rip + 0x1b7b2]
10000dcb6:	mov	ecx, dword ptr [rax]
10000dcb8:	mov	dword ptr [r14], 0x1
10000dcbf:	mov	eax, 0x1
10000dcc4:	test	ecx, ecx
10000dcc6:	jne	0x10000dcef
10000dcc8:	mov	rsi, qword ptr [r15 + 0x80]
10000dccf:	lea	rdi, [rip + 0x141e7] ## literal pool for: "Entry too big:"
10000dcd6:	call	0x100003e67
10000dcdb:	lea	rsi, [rip + 0x1421c] ## literal pool for: "Large entry support disabled with -fz- but entry needs"
10000dce2:	mov	edi, 0x6
10000dce7:	call	0x1000037b0
10000dcec:	mov	eax, dword ptr [r14]
10000dcef:	test	ebx, ebx
10000dcf1:	jne	0x10000dd34
10000dcf3:	cmp	eax, 0x1
10000dcf6:	jne	0x10000dd34
10000dcf8:	mov	rsi, qword ptr [r15 + 0x80]
10000dcff:	lea	rdi, [rip + 0x141b7] ## literal pool for: "Entry too big:"
10000dd06:	call	0x100003e67
10000dd0b:	lea	rax, [rip + 0x1b756]
10000dd12:	cmp	dword ptr [rax], 0x0
10000dd15:	lea	rax, [rip + 0x14219] ## literal pool for: "Compressed/stored entry unexpectedly large - do not use -fz-"
10000dd1c:	lea	rsi, [rip + 0x1424f] ## literal pool for: "Poor compression resulted in unexpectedly large entry - try -fz"
10000dd23:	cmove	rsi, rax
10000dd27:	mov	edi, 0x6
10000dd2c:	call	0x1000037b0
10000dd31:	mov	eax, dword ptr [r14]
10000dd34:	test	eax, eax
10000dd36:	je	0x10000dda1
10000dd38:	lea	rcx, [rip + 0x1ba65]
10000dd3f:	mov	dword ptr [rcx], 0x1
10000dd45:	cmp	word ptr [r15 + 0x2], 0x2c
10000dd4b:	ja	0x10000ddaa
10000dd4d:	mov	word ptr [r15 + 0x2], 0x2d
10000dd54:	mov	eax, dword ptr [r14]
10000dd57:	jmp	0x10000ddaa
10000dd59:	mov	dword ptr [r14], 0x0
10000dd60:	cmp	dword ptr [r15 + 0x1c], 0x0
10000dd65:	je	0x10000ddc0
10000dd67:	lea	rax, [rip + 0x1b6fa]
10000dd6e:	mov	ecx, dword ptr [rax]
10000dd70:	jmp	0x10000ddec
10000dd72:	test	eax, eax
10000dd74:	sete	al
10000dd77:	lea	rcx, [rip + 0x1b6ea]
10000dd7e:	mov	ecx, dword ptr [rcx]
10000dd80:	test	ecx, ecx
10000dd82:	setne	dl
10000dd85:	cmp	dword ptr [r15 + 0x24], 0x0
10000dd8a:	jne	0x10000dcb8
10000dd90:	cmp	ecx, 0x1
10000dd93:	je	0x10000dcb8
10000dd99:	and	al, dl
10000dd9b:	jne	0x10000dcb8
10000dda1:	mov	dword ptr [r14], 0x0
10000dda8:	xor	eax, eax
10000ddaa:	test	ebx, ebx
10000ddac:	je	0x10000de34
10000ddb2:	cmp	eax, 0x1
10000ddb5:	je	0x10000de34
10000ddb7:	mov	word ptr [r15 + 0x2], 0x14
10000ddbe:	jmp	0x10000de2f
10000ddc0:	test	eax, eax
10000ddc2:	sete	dl
10000ddc5:	lea	rax, [rip + 0x1b69c]
10000ddcc:	mov	ecx, dword ptr [rax]
10000ddce:	test	ecx, ecx
10000ddd0:	setne	sil
10000ddd4:	cmp	dword ptr [r15 + 0x24], 0x0
10000ddd9:	jne	0x10000ddec
10000dddb:	cmp	ecx, 0x1
10000ddde:	je	0x10000ddec
10000dde0:	xor	eax, eax
10000dde2:	mov	ebx, 0x0
10000dde7:	and	dl, sil
10000ddea:	je	0x10000de34
10000ddec:	test	ecx, ecx
10000ddee:	jne	0x10000de14
10000ddf0:	mov	rsi, qword ptr [r15 + 0x80]
10000ddf7:	lea	rdi, [rip + 0x140bf] ## literal pool for: "Entry too big:"
10000ddfe:	call	0x100003e67
10000de03:	lea	rsi, [rip + 0x140c2] ## literal pool for: "Large entry support disabled with -fz- but needed"
10000de0a:	mov	edi, 0x6
10000de0f:	call	0x1000037b0
10000de14:	mov	dword ptr [r14], 0x1
10000de1b:	mov	eax, 0x1
10000de20:	cmp	word ptr [r15 + 0x2], 0x2c
10000de26:	ja	0x10000de2f
10000de28:	mov	word ptr [r15 + 0x2], 0x2d
10000de2f:	mov	ebx, 0x1
10000de34:	or	eax, ebx
10000de36:	je	0x10000df24
10000de3c:	movzx	r12d, word ptr [r15 + 0x2a]
10000de41:	test	r12, r12
10000de44:	je	0x10000dee0
10000de4a:	mov	r13, qword ptr [r15 + 0x58]
10000de4e:	test	r13, r13
10000de51:	je	0x10000dee0
10000de57:	lea	rax, [r13 + r12 - 0x4]
10000de5c:	cmp	rax, r13
10000de5f:	jbe	0x10000de87
10000de61:	mov	rbx, r13
10000de64:	cmp	word ptr [rbx], 0x1
10000de68:	movzx	ecx, byte ptr [rbx + 0x2]
10000de6c:	je	0x10000e13b
10000de72:	movzx	edx, byte ptr [rbx + 0x3]
10000de76:	shl	rdx, 0x8
10000de7a:	or	rdx, rcx
10000de7d:	lea	rbx, [rbx + rdx + 0x4]
10000de82:	cmp	rbx, rax
10000de85:	jb	0x10000de64
10000de87:	lea	rdi, [r12 + 0x14]
10000de8c:	call	0x100019848 ## symbol stub for: _malloc
10000de91:	mov	rbx, rax
10000de94:	test	rax, rax
10000de97:	jne	0x10000deb3
10000de99:	lea	rsi, [rip + 0x151bf] ## literal pool for: "Zip64 Extra Field"
10000dea0:	mov	edi, 0x4
10000dea5:	call	0x1000037b0
10000deaa:	mov	r13, qword ptr [r15 + 0x58]
10000deae:	movzx	r12d, word ptr [r15 + 0x2a]
10000deb3:	mov	rdi, rbx
10000deb6:	mov	rsi, r13
10000deb9:	mov	rdx, r12
10000debc:	call	0x100019854 ## symbol stub for: _memmove
10000dec1:	mov	rdi, qword ptr [r15 + 0x58]
10000dec5:	call	0x100019806 ## symbol stub for: _free
10000deca:	mov	qword ptr [r15 + 0x58], rbx
10000dece:	movzx	eax, word ptr [r15 + 0x2a]
10000ded3:	add	rbx, rax
10000ded6:	add	eax, 0x14
10000ded9:	mov	word ptr [r15 + 0x2a], ax
10000dede:	jmp	0x10000df0e
10000dee0:	mov	edi, 0x14
10000dee5:	call	0x100019848 ## symbol stub for: _malloc
10000deea:	mov	rbx, rax
10000deed:	mov	qword ptr [r15 + 0x58], rax
10000def1:	test	rax, rax
10000def4:	jne	0x10000df07
10000def6:	lea	rsi, [rip + 0x1514a] ## literal pool for: "Zip64 local extra field"
10000defd:	mov	edi, 0x4
10000df02:	call	0x1000037b0
10000df07:	mov	word ptr [r15 + 0x2a], 0x14
10000df0e:	mov	dword ptr [rbx], 0x100001
10000df14:	mov	rax, qword ptr [r15 + 0x20]
10000df18:	mov	qword ptr [rbx + 0x4], rax
10000df1c:	mov	rax, qword ptr [r15 + 0x18]
10000df20:	mov	qword ptr [rbx + 0xc], rax
10000df24:	lea	rbx, [rbp - 0x38]
10000df28:	lea	r12, [rbp - 0x30]
10000df2c:	lea	r13, [rbp - 0x40]
10000df30:	mov	edi, 0x4034b50
10000df35:	mov	rsi, rbx
10000df38:	mov	rdx, r12
10000df3b:	mov	rcx, r13
10000df3e:	call	0x10000e1eb
10000df43:	movzx	edi, word ptr [r15 + 0x2]
10000df48:	mov	rsi, rbx
10000df4b:	mov	rdx, r12
10000df4e:	mov	rcx, r13
10000df51:	call	0x10000e266
10000df56:	movzx	edi, word ptr [r15 + 0x3a]
10000df5b:	mov	rsi, rbx
10000df5e:	mov	rdx, r12
10000df61:	mov	rcx, r13
10000df64:	call	0x10000e266
10000df69:	movzx	edi, word ptr [r15 + 0x6]
10000df6e:	mov	rsi, rbx
10000df71:	mov	rdx, r12
10000df74:	mov	rcx, r13
10000df77:	call	0x10000e266
10000df7c:	mov	rdi, qword ptr [r15 + 0x8]
10000df80:	mov	rsi, rbx
10000df83:	mov	rdx, r12
10000df86:	mov	rcx, r13
10000df89:	call	0x10000e1eb
10000df8e:	mov	rdi, qword ptr [r15 + 0x10]
10000df92:	mov	rsi, rbx
10000df95:	mov	rdx, r12
10000df98:	mov	rcx, r13
10000df9b:	call	0x10000e1eb
10000dfa0:	lea	rax, [rip + 0x1b7f9]
10000dfa7:	cmp	dword ptr [rax], 0x0
10000dfaa:	je	0x10000dfca
10000dfac:	mov	r12d, 0xffffffff
10000dfb2:	lea	rsi, [rbp - 0x38]
10000dfb6:	lea	rdx, [rbp - 0x30]
10000dfba:	lea	rcx, [rbp - 0x40]
10000dfbe:	mov	edi, 0xffffffff
10000dfc3:	call	0x10000e1eb
10000dfc8:	jmp	0x10000dfe3
10000dfca:	mov	rdi, qword ptr [r15 + 0x18]
10000dfce:	lea	rsi, [rbp - 0x38]
10000dfd2:	lea	rdx, [rbp - 0x30]
10000dfd6:	lea	rcx, [rbp - 0x40]
10000dfda:	call	0x10000e1eb
10000dfdf:	mov	r12, qword ptr [r15 + 0x20]
10000dfe3:	lea	rbx, [rbp - 0x38]
10000dfe7:	lea	r13, [rbp - 0x30]
10000dfeb:	lea	r14, [rbp - 0x40]
10000dfef:	mov	rdi, r12
10000dff2:	mov	rsi, rbx
10000dff5:	mov	rdx, r13
10000dff8:	mov	rcx, r14
10000dffb:	call	0x10000e1eb
10000e000:	movzx	edi, word ptr [r15 + 0x28]
10000e005:	mov	rsi, rbx
10000e008:	mov	rdx, r13
10000e00b:	mov	rcx, r14
10000e00e:	call	0x10000e266
10000e013:	movzx	edi, word ptr [r15 + 0x2a]
10000e018:	mov	rsi, rbx
10000e01b:	mov	rdx, r13
10000e01e:	mov	rcx, r14
10000e021:	call	0x10000e266
10000e026:	mov	rdi, qword ptr [r15 + 0x70]
10000e02a:	movzx	esi, word ptr [r15 + 0x28]
10000e02f:	mov	rdx, rbx
10000e032:	mov	rcx, r13
10000e035:	mov	r8, r14
10000e038:	call	0x10000e2e2
10000e03d:	movzx	esi, word ptr [r15 + 0x2a]
10000e042:	test	esi, esi
10000e044:	je	0x10000e05b
10000e046:	mov	rdi, qword ptr [r15 + 0x58]
10000e04a:	lea	rdx, [rbp - 0x38]
10000e04e:	lea	rcx, [rbp - 0x30]
10000e052:	lea	r8, [rbp - 0x40]
10000e056:	call	0x10000e2e2
10000e05b:	cmp	dword ptr [rbp - 0x44], 0x1
10000e05f:	jne	0x10000e0dd
10000e061:	lea	rax, [rip + 0x1b83c]
10000e068:	cmp	dword ptr [rax], 0x1
10000e06b:	mov	r14, qword ptr [rbp - 0x38]
10000e06f:	mov	r15, qword ptr [rbp - 0x30]
10000e073:	jne	0x10000e0fc
10000e079:	lea	r12, [rip + 0x1b808]
10000e080:	mov	rcx, qword ptr [r12]
10000e084:	mov	esi, 0x1
10000e089:	mov	rdi, r14
10000e08c:	mov	rdx, r15
10000e08f:	call	0x10001981e ## symbol stub for: _fwrite
10000e094:	mov	ebx, 0xa
10000e099:	cmp	rax, r15
10000e09c:	jne	0x10000e122
10000e0a2:	lea	rax, [rip + 0x1b79f]
10000e0a9:	mov	rdi, qword ptr [rax]
10000e0ac:	lea	rax, [rip + 0x1b79d]
10000e0b3:	cmp	rdi, qword ptr [rax]
10000e0b6:	je	0x10000e120
10000e0b8:	mov	rsi, qword ptr [r12]
10000e0bc:	lea	rbx, [rip + 0x1b7bd]
10000e0c3:	mov	rdx, qword ptr [rbx]
10000e0c6:	call	0x10001434b
10000e0cb:	mov	qword ptr [r12], 0x0
10000e0d3:	mov	rdi, qword ptr [rbx]
10000e0d6:	call	0x100019806 ## symbol stub for: _free
10000e0db:	jmp	0x10000e120
10000e0dd:	mov	r14, qword ptr [rbp - 0x38]
10000e0e1:	mov	r15, qword ptr [rbp - 0x30]
10000e0e5:	mov	esi, 0x1
10000e0ea:	mov	rdi, r14
10000e0ed:	mov	rdx, r15
10000e0f0:	mov	ecx, 0x1
10000e0f5:	call	0x100012d64
10000e0fa:	jmp	0x10000e116
10000e0fc:	lea	rax, [rip + 0x1b6f5]
10000e103:	mov	rcx, qword ptr [rax]
10000e106:	mov	esi, 0x1
10000e10b:	mov	rdi, r14
10000e10e:	mov	rdx, r15
10000e111:	call	0x10001981e ## symbol stub for: _fwrite
10000e116:	mov	ebx, 0xa
10000e11b:	cmp	rax, r15
10000e11e:	jne	0x10000e122
10000e120:	xor	ebx, ebx
10000e122:	mov	rdi, r14
10000e125:	call	0x100019806 ## symbol stub for: _free
10000e12a:	mov	eax, ebx
10000e12c:	add	rsp, 0x38
10000e130:	pop	rbx
10000e131:	pop	r12
10000e133:	pop	r13
10000e135:	pop	r14
10000e137:	pop	r15
10000e139:	pop	rbp
10000e13a:	ret
10000e13b:	movzx	r14d, byte ptr [rbx + 0x3]
10000e140:	shl	r14, 0x8
10000e144:	or	r14, rcx
10000e147:	cmp	r14d, 0x10
10000e14b:	je	0x10000df0e
10000e151:	sub	r12d, r14d
10000e154:	add	r12d, 0x10
10000e158:	movzx	edi, r12w
10000e15c:	call	0x100019848 ## symbol stub for: _malloc
10000e161:	test	rax, rax
10000e164:	jne	0x10000e181
10000e166:	lea	rsi, [rip + 0x14ef2] ## literal pool for: "Zip64 Extra Field"
10000e16d:	mov	edi, 0x4
10000e172:	mov	r13, rax
10000e175:	call	0x1000037b0
10000e17a:	mov	rax, r13
10000e17d:	mov	r13, qword ptr [r15 + 0x58]
10000e181:	mov	qword ptr [rbp - 0x50], rax
10000e185:	mov	rcx, rbx
10000e188:	sub	rcx, r13
10000e18b:	mov	qword ptr [rbp - 0x60], rcx
10000e18f:	movzx	edx, cx
10000e192:	mov	qword ptr [rbp - 0x58], rdx
10000e196:	mov	rdi, rax
10000e199:	mov	rsi, r13
10000e19c:	call	0x10001984e ## symbol stub for: _memcpy
10000e1a1:	mov	r13, qword ptr [rbp - 0x50]
10000e1a5:	add	r13, qword ptr [rbp - 0x58]
10000e1a9:	lea	rsi, [rbx + r14 + 0x4]
10000e1ae:	movzx	eax, word ptr [r15 + 0x2a]
10000e1b3:	mov	rcx, qword ptr [rbp - 0x60]
10000e1b7:	add	ecx, r14d
10000e1ba:	sub	eax, ecx
10000e1bc:	movzx	ebx, ax
10000e1bf:	mov	rdi, r13
10000e1c2:	mov	rdx, rbx
10000e1c5:	call	0x10001984e ## symbol stub for: _memcpy
10000e1ca:	mov	word ptr [r15 + 0x2a], r12w
10000e1cf:	mov	rdi, qword ptr [r15 + 0x58]
10000e1d3:	call	0x100019806 ## symbol stub for: _free
10000e1d8:	mov	rax, qword ptr [rbp - 0x50]
10000e1dc:	mov	qword ptr [r15 + 0x58], rax
10000e1e0:	add	r13, rbx
10000e1e3:	mov	rbx, r13
10000e1e6:	jmp	0x10000df0e
10000e1eb:	push	rbp
10000e1ec:	mov	rbp, rsp
10000e1ef:	push	r15
10000e1f1:	push	r14
10000e1f3:	push	rbx
10000e1f4:	push	rax
10000e1f5:	mov	r15, rdx
10000e1f8:	mov	rbx, rsi
10000e1fb:	mov	r14, rdi
10000e1fe:	mov	rdi, qword ptr [rsi]
10000e201:	test	rdi, rdi
10000e204:	je	0x10000e223
10000e206:	mov	rsi, qword ptr [rcx]
10000e209:	lea	rax, [rsi - 0x5]
10000e20d:	cmp	qword ptr [r15], rax
10000e210:	jbe	0x10000e24d
10000e212:	add	rsi, 0x400
10000e219:	mov	qword ptr [rcx], rsi
10000e21c:	call	0x1000198c6 ## symbol stub for: _realloc
10000e221:	jmp	0x10000e234
10000e223:	mov	qword ptr [rcx], 0x400
10000e22a:	mov	edi, 0x400
10000e22f:	call	0x100019848 ## symbol stub for: _malloc
10000e234:	mov	qword ptr [rbx], rax
10000e237:	test	rax, rax
10000e23a:	jne	0x10000e24d
10000e23c:	lea	rsi, [rip + 0x14e2e] ## literal pool for: "append_ulong_to_mem"
10000e243:	mov	edi, 0x4
10000e248:	call	0x1000037b0
10000e24d:	mov	rax, qword ptr [rbx]
10000e250:	mov	rcx, qword ptr [r15]
10000e253:	mov	dword ptr [rax + rcx], r14d
10000e257:	add	qword ptr [r15], 0x4
10000e25b:	add	rsp, 0x8
10000e25f:	pop	rbx
10000e260:	pop	r14
10000e262:	pop	r15
10000e264:	pop	rbp
10000e265:	ret
10000e266:	push	rbp
10000e267:	mov	rbp, rsp
10000e26a:	push	r15
10000e26c:	push	r14
10000e26e:	push	rbx
10000e26f:	push	rax
10000e270:	mov	r15, rdx
10000e273:	mov	rbx, rsi
10000e276:	mov	r14d, edi
10000e279:	mov	rdi, qword ptr [rsi]
10000e27c:	test	rdi, rdi
10000e27f:	je	0x10000e29e
10000e281:	mov	rsi, qword ptr [rcx]
10000e284:	lea	rax, [rsi - 0x3]
10000e288:	cmp	qword ptr [r15], rax
10000e28b:	jbe	0x10000e2c8
10000e28d:	add	rsi, 0x400
10000e294:	mov	qword ptr [rcx], rsi
10000e297:	call	0x1000198c6 ## symbol stub for: _realloc
10000e29c:	jmp	0x10000e2af
10000e29e:	mov	qword ptr [rcx], 0x400
10000e2a5:	mov	edi, 0x400
10000e2aa:	call	0x100019848 ## symbol stub for: _malloc
10000e2af:	mov	qword ptr [rbx], rax
10000e2b2:	test	rax, rax
10000e2b5:	jne	0x10000e2c8
10000e2b7:	lea	rsi, [rip + 0x14dc7] ## literal pool for: "append_ushort_to_mem"
10000e2be:	mov	edi, 0x4
10000e2c3:	call	0x1000037b0
10000e2c8:	mov	rax, qword ptr [rbx]
10000e2cb:	mov	rcx, qword ptr [r15]
10000e2ce:	mov	word ptr [rax + rcx], r14w
10000e2d3:	add	qword ptr [r15], 0x2
10000e2d7:	add	rsp, 0x8
10000e2db:	pop	rbx
10000e2dc:	pop	r14
10000e2de:	pop	r15
10000e2e0:	pop	rbp
10000e2e1:	ret
10000e2e2:	test	rdi, rdi
10000e2e5:	je	0x10000e38a
10000e2eb:	push	rbp
10000e2ec:	mov	rbp, rsp
10000e2ef:	push	r15
10000e2f1:	push	r14
10000e2f3:	push	r13
10000e2f5:	push	r12
10000e2f7:	push	rbx
10000e2f8:	push	rax
10000e2f9:	mov	r14, rcx
10000e2fc:	mov	r15, rdx
10000e2ff:	mov	r12d, esi
10000e302:	mov	r13, rdi
10000e305:	mov	edi, 0x400
10000e30a:	cmp	esi, edi
10000e30c:	cmova	edi, esi
10000e30f:	mov	ebx, esi
10000e311:	mov	rax, qword ptr [rdx]
10000e314:	test	rax, rax
10000e317:	je	0x10000e33b
10000e319:	mov	rcx, qword ptr [r14]
10000e31c:	add	rcx, rbx
10000e31f:	mov	rsi, qword ptr [r8]
10000e322:	lea	rdx, [rsi - 0x1]
10000e326:	cmp	rcx, rdx
10000e329:	jbe	0x10000e35c
10000e32b:	add	rsi, rdi
10000e32e:	mov	qword ptr [r8], rsi
10000e331:	mov	rdi, rax
10000e334:	call	0x1000198c6 ## symbol stub for: _realloc
10000e339:	jmp	0x10000e343
10000e33b:	mov	qword ptr [r8], rdi
10000e33e:	call	0x100019848 ## symbol stub for: _malloc
10000e343:	mov	qword ptr [r15], rax
10000e346:	test	rax, rax
10000e349:	jne	0x10000e35c
10000e34b:	lea	rsi, [rip + 0x14d48] ## literal pool for: "append_string_to_mem"
10000e352:	mov	edi, 0x4
10000e357:	call	0x1000037b0
10000e35c:	test	r12d, r12d
10000e35f:	je	0x10000e379
10000e361:	xor	eax, eax
10000e363:	mov	rcx, qword ptr [r15]
10000e366:	add	rcx, qword ptr [r14]
10000e369:	mov	dl, byte ptr [r13 + rax]
10000e36e:	mov	byte ptr [rax + rcx], dl
10000e371:	inc	rax
10000e374:	cmp	rbx, rax
10000e377:	jne	0x10000e363
10000e379:	add	qword ptr [r14], rbx
10000e37c:	add	rsp, 0x8
10000e380:	pop	rbx
10000e381:	pop	r12
10000e383:	pop	r13
10000e385:	pop	r14
10000e387:	pop	r15
10000e389:	pop	rbp
10000e38a:	ret
10000e38b:	push	rbp
10000e38c:	mov	rbp, rsp
10000e38f:	push	r15
10000e391:	push	r14
10000e393:	push	r12
10000e395:	push	rbx
10000e396:	sub	rsp, 0x20
10000e39a:	mov	rbx, rdi
10000e39d:	xor	eax, eax
10000e39f:	lea	r14, [rbp - 0x30]
10000e3a3:	mov	qword ptr [r14], rax
10000e3a6:	lea	r15, [rbp - 0x28]
10000e3aa:	mov	qword ptr [r15], rax
10000e3ad:	lea	r12, [rbp - 0x38]
10000e3b1:	mov	qword ptr [r12], rax
10000e3b5:	mov	edi, 0x8074b50
10000e3ba:	mov	rsi, r14
10000e3bd:	mov	rdx, r15
10000e3c0:	mov	rcx, r12
10000e3c3:	call	0x10000e1eb
10000e3c8:	mov	rdi, qword ptr [rbx + 0x10]
10000e3cc:	mov	rsi, r14
10000e3cf:	mov	rdx, r15
10000e3d2:	mov	rcx, r12
10000e3d5:	call	0x10000e1eb
10000e3da:	lea	rax, [rip + 0x1b3bf]
10000e3e1:	cmp	dword ptr [rax], 0x0
10000e3e4:	mov	rdi, qword ptr [rbx + 0x18]
10000e3e8:	lea	r14, [rbp - 0x30]
10000e3ec:	lea	r15, [rbp - 0x28]
10000e3f0:	lea	r12, [rbp - 0x38]
10000e3f4:	mov	rsi, r14
10000e3f7:	mov	rdx, r15
10000e3fa:	mov	rcx, r12
10000e3fd:	je	0x10000e418
10000e3ff:	call	0x10000e471
10000e404:	mov	rdi, qword ptr [rbx + 0x20]
10000e408:	mov	rsi, r14
10000e40b:	mov	rdx, r15
10000e40e:	mov	rcx, r12
10000e411:	call	0x10000e471
10000e416:	jmp	0x10000e42f
10000e418:	call	0x10000e1eb
10000e41d:	mov	rdi, qword ptr [rbx + 0x20]
10000e421:	mov	rsi, r14
10000e424:	mov	rdx, r15
10000e427:	mov	rcx, r12
10000e42a:	call	0x10000e1eb
10000e42f:	mov	rbx, qword ptr [rbp - 0x30]
10000e433:	mov	r14, qword ptr [rbp - 0x28]
10000e437:	mov	esi, 0x1
10000e43c:	mov	rdi, rbx
10000e43f:	mov	rdx, r14
10000e442:	mov	ecx, 0x3
10000e447:	call	0x100012d64
10000e44c:	mov	r15, rax
10000e44f:	mov	rdi, rbx
10000e452:	call	0x100019806 ## symbol stub for: _free
10000e457:	xor	ecx, ecx
10000e459:	cmp	r15, r14
10000e45c:	mov	eax, 0xa
10000e461:	cmove	eax, ecx
10000e464:	add	rsp, 0x20
10000e468:	pop	rbx
10000e469:	pop	r12
10000e46b:	pop	r14
10000e46d:	pop	r15
10000e46f:	pop	rbp
10000e470:	ret
10000e471:	push	rbp
10000e472:	mov	rbp, rsp
10000e475:	push	r15
10000e477:	push	r14
10000e479:	push	rbx
10000e47a:	push	rax
10000e47b:	mov	r15, rdx
10000e47e:	mov	rbx, rsi
10000e481:	mov	r14, rdi
10000e484:	mov	rdi, qword ptr [rsi]
10000e487:	test	rdi, rdi
10000e48a:	je	0x10000e4a9
10000e48c:	mov	rsi, qword ptr [rcx]
10000e48f:	lea	rax, [rsi - 0x9]
10000e493:	cmp	qword ptr [r15], rax
10000e496:	jbe	0x10000e4d3
10000e498:	add	rsi, 0x400
10000e49f:	mov	qword ptr [rcx], rsi
10000e4a2:	call	0x1000198c6 ## symbol stub for: _realloc
10000e4a7:	jmp	0x10000e4ba
10000e4a9:	mov	qword ptr [rcx], 0x400
10000e4b0:	mov	edi, 0x400
10000e4b5:	call	0x100019848 ## symbol stub for: _malloc
10000e4ba:	mov	qword ptr [rbx], rax
10000e4bd:	test	rax, rax
10000e4c0:	jne	0x10000e4d3
10000e4c2:	lea	rsi, [rip + 0x14be6] ## literal pool for: "append_int64_to_mem"
10000e4c9:	mov	edi, 0x4
10000e4ce:	call	0x1000037b0
10000e4d3:	mov	rax, qword ptr [rbx]
10000e4d6:	mov	rcx, qword ptr [r15]
10000e4d9:	mov	qword ptr [rax + rcx], r14
10000e4dd:	add	qword ptr [r15], 0x8
10000e4e1:	add	rsp, 0x8
10000e4e5:	pop	rbx
10000e4e6:	pop	r14
10000e4e8:	pop	r15
10000e4ea:	pop	rbp
10000e4eb:	ret
10000e4ec:	push	rbp
10000e4ed:	mov	rbp, rsp
10000e4f0:	push	r15
10000e4f2:	push	r14
10000e4f4:	push	r13
10000e4f6:	push	r12
10000e4f8:	push	rbx
10000e4f9:	sub	rsp, 0x48
10000e4fd:	mov	r14, rdi
10000e500:	xor	eax, eax
10000e502:	mov	qword ptr [rbp - 0x48], rax
10000e506:	mov	qword ptr [rbp - 0x40], rax
10000e50a:	mov	qword ptr [rbp - 0x50], rax
10000e50e:	movzx	r8d, word ptr [rdi + 0x28]
10000e513:	mov	r12, qword ptr [rdi + 0x40]
10000e517:	mov	rax, qword ptr [rdi + 0x18]
10000e51b:	mov	rcx, qword ptr [rdi + 0x20]
10000e51f:	mov	rdx, rcx
10000e522:	or	rdx, r12
10000e525:	shr	rdx, 0x20
10000e529:	jne	0x10000e54e
10000e52b:	mov	rdx, rax
10000e52e:	shr	rdx, 0x20
10000e532:	jne	0x10000e54e
10000e534:	cmp	qword ptr [r14 + 0x30], 0xffff
10000e53c:	ja	0x10000e54e
10000e53e:	lea	rdx, [rip + 0x1af23]
10000e545:	cmp	dword ptr [rdx], 0x1
10000e548:	jne	0x10000e719
10000e54e:	mov	rdx, rax
10000e551:	shr	rdx, 0x20
10000e555:	shr	rcx, 0x20
10000e559:	setne	bl
10000e55c:	lea	r9, [rip + 0x1af05]
10000e563:	mov	esi, dword ptr [r9]
10000e566:	cmp	esi, 0x1
10000e569:	sete	cl
10000e56c:	or	cl, bl
10000e56e:	test	rdx, rdx
10000e571:	movzx	edx, cl
10000e574:	lea	edi, [8*rdx + 0x4]
10000e57b:	lea	edx, [8*rdx + 0xc]
10000e582:	cmove	edx, edi
10000e585:	mov	rdi, r12
10000e588:	shr	rdi, 0x20
10000e58c:	lea	ebx, [rdx + 0x8]
10000e58f:	test	rdi, rdi
10000e592:	cmove	ebx, edx
10000e595:	or	rax, r12
10000e598:	shr	rax, 0x20
10000e59c:	setne	al
10000e59f:	lea	r13d, [rbx + 0x4]
10000e5a3:	cmp	qword ptr [r14 + 0x30], 0xffff
10000e5ab:	seta	dl
10000e5ae:	cmovbe	r13d, ebx
10000e5b2:	test	esi, esi
10000e5b4:	jne	0x10000e5d9
10000e5b6:	or	al, dl
10000e5b8:	or	cl, al
10000e5ba:	je	0x10000e5d9
10000e5bc:	lea	rdi, [rip + 0x14b00] ## literal pool for: "Large entry support disabled using -fz- but needed"
10000e5c3:	lea	rsi, [rip + 0xc1ed] ## literal pool for: ""
10000e5ca:	call	0x100003e67
10000e5cf:	mov	eax, 0x6
10000e5d4:	jmp	0x10000e920
10000e5d9:	mov	r15, qword ptr [r14 + 0x60]
10000e5dd:	test	r15, r15
10000e5e0:	je	0x10000e672
10000e5e6:	mov	qword ptr [rbp - 0x38], r12
10000e5ea:	movzx	r12d, word ptr [r14 + 0x2c]
10000e5ef:	lea	rax, [r15 + r12 - 0x4]
10000e5f4:	cmp	rax, r15
10000e5f7:	mov	word ptr [rbp - 0x2a], r8w
10000e5fc:	jbe	0x10000e624
10000e5fe:	mov	rbx, r15
10000e601:	cmp	word ptr [rbx], 0x1
10000e605:	movzx	ecx, byte ptr [rbx + 0x2]
10000e609:	je	0x10000e92f
10000e60f:	movzx	edx, byte ptr [rbx + 0x3]
10000e613:	shl	rdx, 0x8
10000e617:	or	rdx, rcx
10000e61a:	lea	rbx, [rbx + rdx + 0x4]
10000e61f:	cmp	rbx, rax
10000e622:	jb	0x10000e601
10000e624:	movzx	edi, r13w
10000e628:	add	rdi, r12
10000e62b:	call	0x100019848 ## symbol stub for: _malloc
10000e630:	test	rax, rax
10000e633:	je	0x10000ea04
10000e639:	mov	rbx, rax
10000e63c:	mov	rdi, rax
10000e63f:	mov	rsi, r15
10000e642:	mov	rdx, r12
10000e645:	call	0x100019854 ## symbol stub for: _memmove
10000e64a:	mov	rdi, qword ptr [r14 + 0x60]
10000e64e:	call	0x100019806 ## symbol stub for: _free
10000e653:	mov	qword ptr [r14 + 0x60], rbx
10000e657:	movzx	eax, word ptr [r14 + 0x2c]
10000e65c:	add	rbx, rax
10000e65f:	add	eax, r13d
10000e662:	mov	word ptr [r14 + 0x2c], ax
10000e667:	mov	r12, qword ptr [rbp - 0x38]
10000e66b:	movzx	r8d, word ptr [rbp - 0x2a]
10000e670:	jmp	0x10000e6a1
10000e672:	cmp	r13w, 0x4
10000e677:	je	0x10000e719
10000e67d:	mov	r15d, r8d
10000e680:	movzx	edi, r13w
10000e684:	call	0x100019848 ## symbol stub for: _malloc
10000e689:	mov	qword ptr [r14 + 0x60], rax
10000e68d:	test	rax, rax
10000e690:	je	0x10000ea04
10000e696:	mov	rbx, rax
10000e699:	mov	word ptr [r14 + 0x2c], r13w
10000e69e:	mov	r8d, r15d
10000e6a1:	lea	r9, [rip + 0x1adc0]
10000e6a8:	mov	word ptr [rbx], 0x1
10000e6ad:	add	r13b, -0x4
10000e6b1:	mov	byte ptr [rbx + 0x2], r13b
10000e6b5:	mov	byte ptr [rbx + 0x3], 0x0
10000e6b9:	mov	rcx, qword ptr [r14 + 0x20]
10000e6bd:	mov	rax, rcx
10000e6c0:	shr	rax, 0x20
10000e6c4:	jne	0x10000e6d0
10000e6c6:	mov	ax, 0x4
10000e6ca:	cmp	dword ptr [r9], 0x1
10000e6ce:	jne	0x10000e6d8
10000e6d0:	mov	qword ptr [rbx + 0x4], rcx
10000e6d4:	mov	ax, 0xc
10000e6d8:	mov	rcx, qword ptr [r14 + 0x18]
10000e6dc:	mov	rdx, rcx
10000e6df:	shr	rdx, 0x20
10000e6e3:	je	0x10000e6ef
10000e6e5:	movzx	eax, ax
10000e6e8:	mov	qword ptr [rbx + rax], rcx
10000e6ec:	add	eax, 0x8
10000e6ef:	mov	rcx, qword ptr [r14 + 0x40]
10000e6f3:	mov	rdx, rcx
10000e6f6:	shr	rdx, 0x20
10000e6fa:	je	0x10000e706
10000e6fc:	movzx	eax, ax
10000e6ff:	mov	qword ptr [rbx + rax], rcx
10000e703:	add	eax, 0x8
10000e706:	mov	rcx, qword ptr [r14 + 0x30]
10000e70a:	cmp	rcx, 0x10000
10000e711:	jb	0x10000e719
10000e713:	movzx	eax, ax
10000e716:	mov	dword ptr [rbx + rax], ecx
10000e719:	mov	word ptr [rbp - 0x2a], r8w
10000e71e:	mov	qword ptr [rbp - 0x38], r12
10000e722:	lea	r13, [rbp - 0x48]
10000e726:	lea	r15, [rbp - 0x40]
10000e72a:	lea	r12, [rbp - 0x50]
10000e72e:	mov	edi, 0x2014b50
10000e733:	mov	rsi, r13
10000e736:	mov	rdx, r15
10000e739:	mov	rcx, r12
10000e73c:	call	0x10000e1eb
10000e741:	movzx	edi, word ptr [r14]
10000e745:	mov	rsi, r13
10000e748:	mov	rdx, r15
10000e74b:	mov	rcx, r12
10000e74e:	call	0x10000e266
10000e753:	movzx	edi, word ptr [r14 + 0x2]
10000e758:	mov	rsi, r13
10000e75b:	mov	rdx, r15
10000e75e:	mov	rcx, r12
10000e761:	call	0x10000e266
10000e766:	movzx	edi, word ptr [r14 + 0x4]
10000e76b:	mov	rsi, r13
10000e76e:	mov	rdx, r15
10000e771:	mov	rcx, r12
10000e774:	call	0x10000e266
10000e779:	movzx	edi, word ptr [r14 + 0x6]
10000e77e:	mov	rsi, r13
10000e781:	mov	rdx, r15
10000e784:	mov	rcx, r12
10000e787:	call	0x10000e266
10000e78c:	mov	rdi, qword ptr [r14 + 0x8]
10000e790:	mov	rsi, r13
10000e793:	mov	rdx, r15
10000e796:	mov	rcx, r12
10000e799:	call	0x10000e1eb
10000e79e:	mov	rdi, qword ptr [r14 + 0x10]
10000e7a2:	mov	rsi, r13
10000e7a5:	mov	rdx, r15
10000e7a8:	mov	rcx, r12
10000e7ab:	call	0x10000e1eb
10000e7b0:	mov	rdi, qword ptr [r14 + 0x18]
10000e7b4:	mov	ebx, 0xffffffff
10000e7b9:	cmp	rdi, rbx
10000e7bc:	cmovae	rdi, rbx
10000e7c0:	mov	rsi, r13
10000e7c3:	mov	rdx, r15
10000e7c6:	mov	rcx, r12
10000e7c9:	call	0x10000e1eb
10000e7ce:	mov	rdi, qword ptr [r14 + 0x20]
10000e7d2:	mov	rax, rdi
10000e7d5:	shr	rax, 0x20
10000e7d9:	lea	rcx, [rip + 0x1ac88]
10000e7e0:	cmp	dword ptr [rcx], 0x1
10000e7e3:	cmove	rdi, rbx
10000e7e7:	test	rax, rax
10000e7ea:	cmovne	rdi, rbx
10000e7ee:	mov	rsi, r13
10000e7f1:	mov	rdx, r15
10000e7f4:	mov	rcx, r12
10000e7f7:	call	0x10000e1eb
10000e7fc:	movzx	edi, word ptr [rbp - 0x2a]
10000e800:	mov	rsi, r13
10000e803:	mov	rdx, r15
10000e806:	mov	rcx, r12
10000e809:	call	0x10000e266
10000e80e:	movzx	edi, word ptr [r14 + 0x2c]
10000e813:	mov	rsi, r13
10000e816:	mov	rdx, r15
10000e819:	mov	rcx, r12
10000e81c:	call	0x10000e266
10000e821:	movzx	edi, word ptr [r14 + 0x2e]
10000e826:	mov	rsi, r13
10000e829:	mov	rdx, r15
10000e82c:	mov	rcx, r12
10000e82f:	call	0x10000e266
10000e834:	mov	rax, qword ptr [r14 + 0x30]
10000e838:	cmp	rax, 0xffff
10000e83e:	mov	ecx, 0xffff
10000e843:	cmovb	ecx, eax
10000e846:	movzx	edi, cx
10000e849:	mov	rsi, r13
10000e84c:	mov	rdx, r15
10000e84f:	mov	rcx, r12
10000e852:	call	0x10000e266
10000e857:	movzx	edi, word ptr [r14 + 0x38]
10000e85c:	mov	rsi, r13
10000e85f:	mov	rdx, r15
10000e862:	mov	rcx, r12
10000e865:	call	0x10000e266
10000e86a:	mov	rdi, qword ptr [r14 + 0x48]
10000e86e:	mov	rsi, r13
10000e871:	mov	rdx, r15
10000e874:	mov	rcx, r12
10000e877:	call	0x10000e1eb
10000e87c:	mov	rax, qword ptr [rbp - 0x38]
10000e880:	cmp	rax, rbx
10000e883:	cmovb	rbx, rax
10000e887:	mov	rdi, rbx
10000e88a:	mov	rsi, r13
10000e88d:	mov	rdx, r15
10000e890:	mov	rcx, r12
10000e893:	call	0x10000e1eb
10000e898:	mov	rdi, qword ptr [r14 + 0x70]
10000e89c:	movzx	esi, word ptr [r14 + 0x28]
10000e8a1:	mov	rdx, r13
10000e8a4:	mov	rcx, r15
10000e8a7:	mov	r8, r12
10000e8aa:	call	0x10000e2e2
10000e8af:	movzx	esi, word ptr [r14 + 0x2c]
10000e8b4:	test	esi, esi
10000e8b6:	je	0x10000e8cd
10000e8b8:	mov	rdi, qword ptr [r14 + 0x60]
10000e8bc:	lea	rdx, [rbp - 0x48]
10000e8c0:	lea	rcx, [rbp - 0x40]
10000e8c4:	lea	r8, [rbp - 0x50]
10000e8c8:	call	0x10000e2e2
10000e8cd:	movzx	esi, word ptr [r14 + 0x2e]
10000e8d2:	test	esi, esi
10000e8d4:	je	0x10000e8eb
10000e8d6:	mov	rdi, qword ptr [r14 + 0x68]
10000e8da:	lea	rdx, [rbp - 0x48]
10000e8de:	lea	rcx, [rbp - 0x40]
10000e8e2:	lea	r8, [rbp - 0x50]
10000e8e6:	call	0x10000e2e2
10000e8eb:	mov	rbx, qword ptr [rbp - 0x48]
10000e8ef:	mov	r14, qword ptr [rbp - 0x40]
10000e8f3:	mov	esi, 0x1
10000e8f8:	mov	rdi, rbx
10000e8fb:	mov	rdx, r14
10000e8fe:	mov	ecx, 0x2
10000e903:	call	0x100012d64
10000e908:	mov	r15, rax
10000e90b:	mov	rdi, rbx
10000e90e:	call	0x100019806 ## symbol stub for: _free
10000e913:	xor	ecx, ecx
10000e915:	cmp	r15, r14
10000e918:	mov	eax, 0xa
10000e91d:	cmove	eax, ecx
10000e920:	add	rsp, 0x48
10000e924:	pop	rbx
10000e925:	pop	r12
10000e927:	pop	r13
10000e929:	pop	r14
10000e92b:	pop	r15
10000e92d:	pop	rbp
10000e92e:	ret
10000e92f:	movzx	eax, byte ptr [rbx + 0x3]
10000e933:	shl	rax, 0x8
10000e937:	lea	rax, [rax + rcx + 0x4]
10000e93c:	cmp	eax, r12d
10000e93f:	jne	0x10000e97a
10000e941:	cmp	r12w, r13w
10000e945:	mov	r12, qword ptr [rbp - 0x38]
10000e949:	je	0x10000e6a8
10000e94f:	movzx	edi, r13w
10000e953:	call	0x100019848 ## symbol stub for: _malloc
10000e958:	test	rax, rax
10000e95b:	je	0x10000ea04
10000e961:	mov	rbx, rax
10000e964:	mov	rdi, r15
10000e967:	call	0x100019806 ## symbol stub for: _free
10000e96c:	mov	qword ptr [r14 + 0x60], rbx
10000e970:	mov	word ptr [r14 + 0x2c], r13w
10000e975:	jmp	0x10000e66b
10000e97a:	mov	qword ptr [rbp - 0x68], rax
10000e97e:	movzx	ecx, ax
10000e981:	movzx	eax, r13w
10000e985:	add	eax, r12d
10000e988:	mov	qword ptr [rbp - 0x60], rcx
10000e98c:	sub	eax, ecx
10000e98e:	movsxd	rdi, eax
10000e991:	call	0x100019848 ## symbol stub for: _malloc
10000e996:	test	rax, rax
10000e999:	je	0x10000ea04
10000e99b:	mov	r12, rbx
10000e99e:	sub	r12, r15
10000e9a1:	mov	rdi, rax
10000e9a4:	mov	rsi, r15
10000e9a7:	mov	rdx, r12
10000e9aa:	mov	r15, rax
10000e9ad:	mov	qword ptr [rbp - 0x58], rax
10000e9b1:	call	0x10001984e ## symbol stub for: _memcpy
10000e9b6:	lea	rdi, [r15 + r12]
10000e9ba:	mov	rcx, qword ptr [rbp - 0x60]
10000e9be:	mov	rsi, rcx
10000e9c1:	add	rsi, rbx
10000e9c4:	movzx	r15d, word ptr [r14 + 0x2c]
10000e9c9:	mov	eax, r15d
10000e9cc:	sub	eax, ecx
10000e9ce:	movsxd	rdx, eax
10000e9d1:	sub	rdx, r12
10000e9d4:	call	0x10001984e ## symbol stub for: _memcpy
10000e9d9:	sub	r15d, dword ptr [rbp - 0x68]
10000e9dd:	movzx	ebx, r15w
10000e9e1:	mov	r12, qword ptr [rbp - 0x58]
10000e9e5:	add	rbx, r12
10000e9e8:	lea	eax, [r13 + r15]
10000e9ed:	mov	word ptr [r14 + 0x2c], ax
10000e9f2:	mov	rdi, qword ptr [r14 + 0x60]
10000e9f6:	call	0x100019806 ## symbol stub for: _free
10000e9fb:	mov	qword ptr [r14 + 0x60], r12
10000e9ff:	jmp	0x10000e667
10000ea04:	mov	eax, 0x4
10000ea09:	jmp	0x10000e920
10000ea0e:	push	rbp
10000ea0f:	mov	rbp, rsp
10000ea12:	push	r15
10000ea14:	push	r14
10000ea16:	push	r13
10000ea18:	push	r12
10000ea1a:	push	rbx
10000ea1b:	sub	rsp, 0x38
10000ea1f:	mov	qword ptr [rbp - 0x50], r8
10000ea23:	mov	r12, rcx
10000ea26:	mov	qword ptr [rbp - 0x48], rsi
10000ea2a:	mov	r15, rdi
10000ea2d:	xor	eax, eax
10000ea2f:	mov	qword ptr [rbp - 0x38], rax
10000ea33:	mov	qword ptr [rbp - 0x30], rax
10000ea37:	mov	qword ptr [rbp - 0x40], rax
10000ea3b:	lea	rbx, [rip + 0x1ae0e]
10000ea42:	mov	rax, qword ptr [rbx]
10000ea45:	lea	rcx, [rip + 0x1ae24]
10000ea4c:	mov	qword ptr [rcx], rax
10000ea4f:	lea	rax, [rip + 0x1ae42]
10000ea56:	mov	rax, qword ptr [rax]
10000ea59:	lea	rcx, [rip + 0x1ae18]
10000ea60:	mov	qword ptr [rcx], rax
10000ea63:	cmp	rdi, 0xffff
10000ea6a:	ja	0x10000ea86
10000ea6c:	or	rdx, qword ptr [rbp - 0x48]
10000ea70:	shr	rdx, 0x20
10000ea74:	jne	0x10000ea86
10000ea76:	lea	rax, [rip + 0x1ad27]
10000ea7d:	cmp	dword ptr [rax], 0x0
10000ea80:	je	0x10000ebc6
10000ea86:	lea	rbx, [rbp - 0x38]
10000ea8a:	lea	r13, [rbp - 0x30]
10000ea8e:	lea	r14, [rbp - 0x40]
10000ea92:	mov	edi, 0x6064b50
10000ea97:	mov	rsi, rbx
10000ea9a:	mov	rdx, r13
10000ea9d:	mov	rcx, r14
10000eaa0:	call	0x10000e1eb
10000eaa5:	mov	edi, 0x2c
10000eaaa:	mov	rsi, rbx
10000eaad:	mov	rdx, r13
10000eab0:	mov	rcx, r14
10000eab3:	call	0x10000e471
10000eab8:	mov	edi, 0x31e
10000eabd:	mov	rsi, rbx
10000eac0:	mov	rdx, r13
10000eac3:	mov	rcx, r14
10000eac6:	call	0x10000e266
10000eacb:	mov	edi, 0x2d
10000ead0:	mov	rsi, rbx
10000ead3:	mov	rdx, r13
10000ead6:	mov	rcx, r14
10000ead9:	call	0x10000e266
10000eade:	lea	rax, [rip + 0x1ad6b]
10000eae5:	mov	rdi, qword ptr [rax]
10000eae8:	mov	rsi, rbx
10000eaeb:	mov	rdx, r13
10000eaee:	mov	rcx, r14
10000eaf1:	call	0x10000e1eb
10000eaf6:	lea	rax, [rip + 0x1a993]
10000eafd:	mov	rdi, qword ptr [rax]
10000eb00:	mov	rsi, rbx
10000eb03:	mov	rdx, r13
10000eb06:	mov	rcx, r14
10000eb09:	call	0x10000e1eb
10000eb0e:	lea	rax, [rip + 0x1ad4b]
10000eb15:	mov	rdi, qword ptr [rax]
10000eb18:	mov	rsi, rbx
10000eb1b:	mov	rdx, r13
10000eb1e:	mov	rcx, r14
10000eb21:	call	0x10000e471
10000eb26:	mov	rdi, r15
10000eb29:	mov	rsi, rbx
10000eb2c:	mov	rdx, r13
10000eb2f:	mov	rcx, r14
10000eb32:	call	0x10000e471
10000eb37:	mov	rdi, qword ptr [rbp - 0x48]
10000eb3b:	mov	rsi, rbx
10000eb3e:	mov	rdx, r13
10000eb41:	mov	rcx, r14
10000eb44:	call	0x10000e471
10000eb49:	lea	rax, [rip + 0x1ad08]
10000eb50:	mov	rdi, qword ptr [rax]
10000eb53:	mov	rsi, rbx
10000eb56:	mov	rdx, r13
10000eb59:	mov	rcx, r14
10000eb5c:	call	0x10000e471
10000eb61:	mov	edi, 0x7064b50
10000eb66:	mov	rsi, rbx
10000eb69:	mov	rdx, r13
10000eb6c:	mov	rcx, r14
10000eb6f:	call	0x10000e1eb
10000eb74:	lea	rax, [rip + 0x1acf5]
10000eb7b:	mov	rdi, qword ptr [rax]
10000eb7e:	mov	rsi, rbx
10000eb81:	mov	rdx, r13
10000eb84:	mov	rcx, r14
10000eb87:	call	0x10000e1eb
10000eb8c:	lea	rax, [rip + 0x1ace5]
10000eb93:	mov	rdi, qword ptr [rax]
10000eb96:	mov	rsi, rbx
10000eb99:	mov	rdx, r13
10000eb9c:	mov	rcx, r14
10000eb9f:	call	0x10000e471
10000eba4:	lea	rax, [rip + 0x1aca5]
10000ebab:	mov	rdi, qword ptr [rax]
10000ebae:	inc	rdi
10000ebb1:	mov	rsi, rbx
10000ebb4:	mov	rdx, r13
10000ebb7:	lea	rbx, [rip + 0x1ac92]
10000ebbe:	mov	rcx, r14
10000ebc1:	call	0x10000e1eb
10000ebc6:	lea	r13, [rbp - 0x38]
10000ebca:	lea	r14, [rbp - 0x30]
10000ebce:	lea	r15, [rbp - 0x40]
10000ebd2:	mov	edi, 0x6054b50
10000ebd7:	mov	rsi, r13
10000ebda:	mov	rdx, r14
10000ebdd:	mov	rcx, r15
10000ebe0:	call	0x10000e1eb
10000ebe5:	mov	rax, qword ptr [rbx]
10000ebe8:	cmp	rax, 0xffff
10000ebee:	mov	ecx, 0xffff
10000ebf3:	cmovb	ecx, eax
10000ebf6:	movzx	edi, cx
10000ebf9:	mov	rsi, r13
10000ebfc:	mov	rdx, r14
10000ebff:	mov	rcx, r15
10000ec02:	call	0x10000e266
10000ec07:	lea	rcx, [rip + 0x1a882]
10000ec0e:	mov	rax, qword ptr [rcx]
10000ec11:	cmp	rax, -0x1
10000ec15:	mov	qword ptr [rbp - 0x58], r12
10000ec19:	je	0x10000ec29
10000ec1b:	mov	cx, 0xffff
10000ec1f:	cmp	rax, 0xfffe
10000ec25:	jbe	0x10000ec32
10000ec27:	jmp	0x10000ec34
10000ec29:	mov	qword ptr [rcx], 0x0
10000ec30:	xor	eax, eax
10000ec32:	mov	ecx, eax
10000ec34:	movzx	edi, cx
10000ec37:	lea	r13, [rbp - 0x38]
10000ec3b:	lea	r14, [rbp - 0x30]
10000ec3f:	lea	r15, [rbp - 0x40]
10000ec43:	mov	rsi, r13
10000ec46:	mov	rdx, r14
10000ec49:	mov	rcx, r15
10000ec4c:	call	0x10000e266
10000ec51:	lea	rax, [rip + 0x1ac08]
10000ec58:	mov	rdi, qword ptr [rax]
10000ec5b:	mov	r12d, 0xffff
10000ec61:	cmp	rdi, r12
10000ec64:	mov	ebx, 0xffff
10000ec69:	cmovae	edi, ebx
10000ec6c:	and	edi, ebx
10000ec6e:	mov	rsi, r13
10000ec71:	mov	rdx, r14
10000ec74:	mov	rcx, r15
10000ec77:	call	0x10000e266
10000ec7c:	lea	rax, [rip + 0x1abe5]
10000ec83:	mov	rdi, qword ptr [rax]
10000ec86:	cmp	rdi, r12
10000ec89:	cmovae	edi, ebx
10000ec8c:	and	edi, ebx
10000ec8e:	mov	rsi, r13
10000ec91:	mov	rdx, r14
10000ec94:	mov	rcx, r15
10000ec97:	call	0x10000e266
10000ec9c:	mov	r12d, 0xffffffff
10000eca2:	mov	rdi, qword ptr [rbp - 0x48]
10000eca6:	cmp	rdi, r12
10000eca9:	cmovae	rdi, r12
10000ecad:	mov	rsi, r13
10000ecb0:	mov	rdx, r14
10000ecb3:	mov	rcx, r15
10000ecb6:	call	0x10000e1eb
10000ecbb:	lea	rax, [rip + 0x1a7a6]
10000ecc2:	lea	rcx, [rip + 0x1ab8f]
10000ecc9:	mov	rdi, qword ptr [rcx]
10000eccc:	mov	rcx, rdi
10000eccf:	shr	rcx, 0x20
10000ecd3:	cmovne	rdi, r12
10000ecd7:	cmp	dword ptr [rax], 0x1
10000ecda:	cmove	rdi, r12
10000ecde:	mov	rsi, r13
10000ece1:	mov	rdx, r14
10000ece4:	mov	rcx, r15
10000ece7:	call	0x10000e1eb
10000ecec:	mov	r12, qword ptr [rbp - 0x58]
10000ecf0:	and	ebx, r12d
10000ecf3:	mov	edi, ebx
10000ecf5:	mov	rsi, r13
10000ecf8:	mov	rdx, r14
10000ecfb:	mov	rcx, r15
10000ecfe:	call	0x10000e266
10000ed03:	test	r12, r12
10000ed06:	je	0x10000ed20
10000ed08:	lea	rdx, [rbp - 0x38]
10000ed0c:	lea	rcx, [rbp - 0x30]
10000ed10:	lea	r8, [rbp - 0x40]
10000ed14:	mov	rdi, qword ptr [rbp - 0x50]
10000ed18:	mov	esi, r12d
10000ed1b:	call	0x10000e2e2
10000ed20:	mov	rbx, qword ptr [rbp - 0x38]
10000ed24:	mov	r14, qword ptr [rbp - 0x30]
10000ed28:	mov	esi, 0x1
10000ed2d:	mov	rdi, rbx
10000ed30:	mov	rdx, r14
10000ed33:	mov	ecx, 0x3
10000ed38:	call	0x100012d64
10000ed3d:	mov	r15, rax
10000ed40:	mov	rdi, rbx
10000ed43:	call	0x100019806 ## symbol stub for: _free
10000ed48:	xor	ecx, ecx
10000ed4a:	cmp	r15, r14
10000ed4d:	mov	eax, 0xa
10000ed52:	cmove	eax, ecx
10000ed55:	add	rsp, 0x38
10000ed59:	pop	rbx
10000ed5a:	pop	r12
10000ed5c:	pop	r13
10000ed5e:	pop	r14
10000ed60:	pop	r15
10000ed62:	pop	rbp
10000ed63:	ret
10000ed64:	push	rbp
10000ed65:	mov	rbp, rsp
10000ed68:	push	r15
10000ed6a:	push	r14
10000ed6c:	push	r13
10000ed6e:	push	r12
10000ed70:	push	rbx
10000ed71:	sub	rsp, 0x38
10000ed75:	mov	r15, rdi
10000ed78:	mov	rax, qword ptr [rip + 0x15291] ## literal pool symbol address: ___stack_chk_guard
10000ed7f:	mov	rax, qword ptr [rax]
10000ed82:	mov	qword ptr [rbp - 0x30], rax
10000ed86:	lea	rbx, [rip + 0x1a923]
10000ed8d:	cmp	dword ptr [rbx], 0x2
10000ed90:	jne	0x10000ee6a
10000ed96:	lea	r14, [rip + 0x1aa63]
10000ed9d:	mov	rcx, qword ptr [r14]
10000eda0:	lea	rdi, [rbp - 0x50]
10000eda4:	mov	esi, 0x1a
10000eda9:	mov	edx, 0x1
10000edae:	call	0x100019800 ## symbol stub for: _fread
10000edb3:	cmp	rax, 0x1
10000edb7:	jne	0x10000ef0c
10000edbd:	mov	edi, 0xa0
10000edc2:	call	0x100019848 ## symbol stub for: _malloc
10000edc7:	test	rax, rax
10000edca:	je	0x10000f01c
10000edd0:	mov	rsi, rax
10000edd3:	movzx	edx, byte ptr [rbp - 0x50]
10000edd7:	movzx	edi, byte ptr [rbp - 0x4f]
10000eddb:	mov	ecx, edi
10000eddd:	shl	ecx, 0x8
10000ede0:	or	ecx, edx
10000ede2:	mov	word ptr [rax + 0x2], cx
10000ede6:	movzx	edx, word ptr [rbp - 0x4e]
10000edea:	mov	word ptr [rax + 0x3a], dx
10000edee:	movzx	r8d, word ptr [rbp - 0x4c]
10000edf3:	mov	word ptr [rax + 0x6], r8w
10000edf8:	mov	edx, dword ptr [rbp - 0x4a]
10000edfb:	mov	qword ptr [rax + 0x8], rdx
10000edff:	mov	edx, dword ptr [rbp - 0x46]
10000ee02:	mov	qword ptr [rax + 0x10], rdx
10000ee06:	movzx	r12d, word ptr [rbp - 0x3a]
10000ee0b:	mov	word ptr [rax + 0x28], r12w
10000ee10:	movzx	r13d, word ptr [rbp - 0x38]
10000ee15:	mov	word ptr [rax + 0x2a], r13w
10000ee1a:	cmp	dword ptr [rbx], 0x2
10000ee1d:	mov	rbx, rax
10000ee20:	jne	0x10000f0c0
10000ee26:	mov	edx, dword ptr [rbp - 0x42]
10000ee29:	mov	qword ptr [rbx + 0x18], rdx
10000ee2d:	mov	edx, dword ptr [rbp - 0x3e]
10000ee30:	mov	qword ptr [rbx + 0x20], rdx
10000ee34:	movzx	edx, cx
10000ee37:	movzx	r9d, di
10000ee3b:	cmp	edx, 0x2900
10000ee41:	jb	0x10000f04b
10000ee47:	lea	r14, [rip + 0x1ace2]
10000ee4e:	lea	rcx, [rip + 0x1315d] ## literal pool for: "Illegal host system mapping in local header:  %d"
10000ee55:	mov	edx, 0x13f1
10000ee5a:	mov	rdi, r14
10000ee5d:	mov	esi, 0x0
10000ee62:	mov	r8d, r9d
10000ee65:	jmp	0x10000f08f
10000ee6a:	mov	r12, qword ptr [r15 + 0x30]
10000ee6e:	mov	qword ptr [rbp - 0x58], r15
10000ee72:	mov	r15, qword ptr [r15 + 0x40]
10000ee76:	lea	rbx, [rip + 0x1a9b3]
10000ee7d:	lea	r14, [rip + 0x1a97c]
10000ee84:	cmp	r12, qword ptr [rbx]
10000ee87:	je	0x10000ee9d
10000ee89:	mov	rdi, qword ptr [r14]
10000ee8c:	test	rdi, rdi
10000ee8f:	je	0x10000ee9d
10000ee91:	call	0x1000197be ## symbol stub for: _fclose
10000ee96:	mov	qword ptr [r14], 0x0
10000ee9d:	mov	qword ptr [rbx], r12
10000eea0:	lea	r13, [rip + 0x1a961]
10000eea7:	mov	rdi, qword ptr [r13]
10000eeab:	mov	rsi, r12
10000eeae:	call	0x10001338c
10000eeb3:	mov	rbx, rax
10000eeb6:	mov	rax, qword ptr [r14]
10000eeb9:	test	rax, rax
10000eebc:	je	0x10000ef51
10000eec2:	mov	rdi, rax
10000eec5:	mov	rsi, r15
10000eec8:	xor	edx, edx
10000eeca:	call	0x10001980c ## symbol stub for: _fseeko
10000eecf:	test	eax, eax
10000eed1:	je	0x10000efd2
10000eed7:	mov	rdi, qword ptr [r14]
10000eeda:	call	0x1000197be ## symbol stub for: _fclose
10000eedf:	mov	qword ptr [r14], 0x0
10000eee6:	call	0x100019764 ## symbol stub for: ___error
10000eeeb:	mov	edi, dword ptr [rax]
10000eeed:	call	0x10001991a ## symbol stub for: _strerror
10000eef2:	lea	rdi, [rip + 0x12e8f] ## literal pool for: "reading archive fseek: "
10000eef9:	mov	rsi, rax
10000eefc:	call	0x100003e67
10000ef01:	mov	r13d, 0xb
10000ef07:	jmp	0x10000f5f7
10000ef0c:	mov	rdi, qword ptr [r14]
10000ef0f:	call	0x1000197d0 ## symbol stub for: _ferror
10000ef14:	mov	r15d, eax
10000ef17:	call	0x100019764 ## symbol stub for: ___error
10000ef1c:	mov	edi, dword ptr [rax]
10000ef1e:	call	0x10001991a ## symbol stub for: _strerror
10000ef23:	lea	rdi, [rip + 0x12e93] ## literal pool for: "reading local entry: "
10000ef2a:	mov	rsi, rax
10000ef2d:	call	0x100003e67
10000ef32:	cmp	dword ptr [rbx], 0x2
10000ef35:	je	0x10000ef3f
10000ef37:	mov	rdi, qword ptr [r14]
10000ef3a:	call	0x1000197be ## symbol stub for: _fclose
10000ef3f:	xor	eax, eax
10000ef41:	test	r15d, r15d
10000ef44:	setne	al
10000ef47:	lea	r13d, [rax + 8*rax + 0x2]
10000ef4c:	jmp	0x10000f5f7
10000ef51:	lea	rsi, [rip + 0xd058] ## literal pool for: "r"
10000ef58:	mov	rdi, rbx
10000ef5b:	call	0x1000197e8 ## symbol stub for: _fopen
10000ef60:	mov	qword ptr [r14], rax
10000ef63:	test	rax, rax
10000ef66:	jne	0x10000eec2
10000ef6c:	lea	rax, [rip + 0x1a4e9]
10000ef73:	cmp	dword ptr [rax], 0x0
10000ef76:	jne	0x10000ef85
10000ef78:	mov	edi, 0x12
10000ef7d:	mov	rsi, rbx
10000ef80:	call	0x1000037b0
10000ef85:	mov	rdi, r12
10000ef88:	call	0x100013490
10000ef8d:	cmp	eax, 0x9
10000ef90:	je	0x10000f1e1
10000ef96:	cmp	eax, 0x3
10000ef99:	jne	0x10000efaf
10000ef9b:	lea	rax, [rip + 0x1a70e]
10000efa2:	mov	eax, dword ptr [rax]
10000efa4:	dec	eax
10000efa6:	cmp	eax, 0x2
10000efa9:	jb	0x10000f0b5
10000efaf:	mov	rdi, rbx
10000efb2:	call	0x100019806 ## symbol stub for: _free
10000efb7:	mov	rdi, qword ptr [r13]
10000efbb:	mov	rsi, r12
10000efbe:	call	0x10001338c
10000efc3:	mov	rbx, rax
10000efc6:	mov	rdi, rax
10000efc9:	lea	rsi, [rip + 0xcfe0] ## literal pool for: "r"
10000efd0:	jmp	0x10000ef5b
10000efd2:	lea	rbx, [rip + 0x1a6d7]
10000efd9:	cmp	dword ptr [rbx], 0x2
10000efdc:	mov	r15, qword ptr [rbp - 0x58]
10000efe0:	je	0x10000ed96
10000efe6:	mov	rdi, qword ptr [r14]
10000efe9:	lea	rsi, [rip + 0x12db0] ## literal pool for: "PK\003\004"
10000eff0:	call	0x10000adff
10000eff5:	test	eax, eax
10000eff7:	jne	0x10000ed96
10000effd:	mov	rdi, qword ptr [r14]
10000f000:	call	0x1000197be ## symbol stub for: _fclose
10000f005:	mov	qword ptr [r14], 0x0
10000f00c:	mov	rsi, qword ptr [r15 + 0x70]
10000f010:	lea	rdi, [rip + 0x12d8e] ## literal pool for: "Did not find entry for "
10000f017:	jmp	0x10000f0b0
10000f01c:	lea	rdi, [rip + 0x12db0] ## literal pool for: "reading entry"
10000f023:	lea	rsi, [rip + 0xb78d] ## literal pool for: ""
10000f02a:	call	0x100003e67
10000f02f:	mov	r13d, 0x4
10000f035:	cmp	dword ptr [rbx], 0x2
10000f038:	je	0x10000f5f7
10000f03e:	mov	rdi, qword ptr [r14]
10000f041:	call	0x1000197be ## symbol stub for: _fclose
10000f046:	jmp	0x10000f5f7
10000f04b:	sub	ecx, r9d
10000f04e:	cmp	cx, 0x65
10000f052:	jb	0x10000f068
10000f054:	movzx	r8d, cx
10000f058:	lea	r14, [rip + 0x1aad1]
10000f05f:	lea	rcx, [rip + 0x12f89] ## literal pool for: "Illegal PK version mapping in local header:  %d"
10000f066:	jmp	0x10000f082
10000f068:	movzx	ecx, r8w
10000f06c:	cmp	ecx, 0xc9
10000f072:	jb	0x10000f0c0
10000f074:	lea	r14, [rip + 0x1aab5]
10000f07b:	lea	rcx, [rip + 0x12f9d] ## literal pool for: "Unrecognized compression method in local header:  %d"
10000f082:	mov	edx, 0x13f1
10000f087:	mov	rdi, r14
10000f08a:	mov	esi, 0x0
10000f08f:	xor	eax, eax
10000f091:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000f096:	lea	rsi, [rip + 0xb71a] ## literal pool for: ""
10000f09d:	mov	rdi, r14
10000f0a0:	call	0x100003e67
10000f0a5:	mov	rsi, qword ptr [r15 + 0x70]
10000f0a9:	lea	rdi, [rip + 0x12f33] ## literal pool for: "Skipping:  "
10000f0b0:	call	0x100003e67
10000f0b5:	mov	r13d, 0x3
10000f0bb:	jmp	0x10000f5f7
10000f0c0:	mov	qword ptr [rbp - 0x60], rax
10000f0c4:	mov	qword ptr [rbp - 0x58], r15
10000f0c8:	lea	rdi, [r12 + 0x1]
10000f0cd:	xor	eax, eax
10000f0cf:	mov	qword ptr [rbx + 0x58], rax
10000f0d3:	mov	qword ptr [rbx + 0x50], rax
10000f0d7:	mov	qword ptr [rbx + 0x78], rax
10000f0db:	mov	qword ptr [rbx + 0x80], rax
10000f0e2:	call	0x100019848 ## symbol stub for: _malloc
10000f0e7:	mov	qword ptr [rbx + 0x70], rax
10000f0eb:	test	rax, rax
10000f0ee:	je	0x10000f5f1
10000f0f4:	mov	r15, rax
10000f0f7:	test	r13w, r13w
10000f0fb:	je	0x10000f112
10000f0fd:	mov	rdi, r13
10000f100:	call	0x100019848 ## symbol stub for: _malloc
10000f105:	mov	qword ptr [rbx + 0x58], rax
10000f109:	test	rax, rax
10000f10c:	je	0x10000f5f1
10000f112:	mov	rcx, qword ptr [r14]
10000f115:	mov	edx, 0x1
10000f11a:	mov	rdi, r15
10000f11d:	mov	rsi, r12
10000f120:	call	0x100019800 ## symbol stub for: _fread
10000f125:	cmp	rax, 0x1
10000f129:	jne	0x10000f1c8
10000f12f:	movzx	esi, word ptr [rbx + 0x2a]
10000f133:	test	rsi, rsi
10000f136:	je	0x10000f14f
10000f138:	mov	rdi, qword ptr [rbx + 0x58]
10000f13c:	mov	rcx, qword ptr [r14]
10000f13f:	mov	edx, 0x1
10000f144:	call	0x100019800 ## symbol stub for: _fread
10000f149:	cmp	rax, 0x1
10000f14d:	jne	0x10000f1c8
10000f14f:	mov	rax, qword ptr [rbx + 0x70]
10000f153:	movzx	ecx, word ptr [rbx + 0x28]
10000f157:	mov	byte ptr [rax + rcx], 0x0
10000f15b:	movzx	edi, word ptr [rbx + 0x28]
10000f15f:	inc	rdi
10000f162:	call	0x100019848 ## symbol stub for: _malloc
10000f167:	mov	qword ptr [rbx + 0x50], rax
10000f16b:	test	rax, rax
10000f16e:	je	0x10000f5f1
10000f174:	mov	rsi, qword ptr [rbx + 0x70]
10000f178:	mov	rdi, rax
10000f17b:	call	0x100019914 ## symbol stub for: _strcpy
10000f180:	mov	rdi, rbx
10000f183:	call	0x10000ae72
10000f188:	lea	r14, [rip + 0x1a611]
10000f18f:	mov	dword ptr [r14], eax
10000f192:	mov	word ptr [rbx], 0x0
10000f197:	lea	r15, [rip + 0x1a512]
10000f19e:	cmp	dword ptr [r15], 0x2
10000f1a2:	mov	r12, rbx
10000f1a5:	jne	0x10000f1ec
10000f1a7:	movzx	eax, word ptr [rbx + 0x3a]
10000f1ab:	mov	rcx, rbx
10000f1ae:	mov	rbx, qword ptr [rbp - 0x58]
10000f1b2:	mov	word ptr [rbx + 0x4], ax
10000f1b6:	movups	xmm0, xmmword ptr [rcx + 0x18]
10000f1ba:	movups	xmmword ptr [rbx + 0x18], xmm0
10000f1be:	mov	ecx, 0x2
10000f1c3:	jmp	0x10000f2fc
10000f1c8:	mov	rdi, qword ptr [r14]
10000f1cb:	call	0x1000197d0 ## symbol stub for: _ferror
10000f1d0:	xor	ecx, ecx
10000f1d2:	test	eax, eax
10000f1d4:	setne	cl
10000f1d7:	lea	r13d, [rcx + 8*rcx + 0x2]
10000f1dc:	jmp	0x10000f5f7
10000f1e1:	mov	r13d, 0x9
10000f1e7:	jmp	0x10000f5f7
10000f1ec:	mov	rcx, rbx
10000f1ef:	mov	rbx, qword ptr [rbp - 0x58]
10000f1f3:	movzx	eax, word ptr [rbx]
10000f1f6:	mov	word ptr [rcx], ax
10000f1f9:	movzx	eax, word ptr [rcx + 0x2]
10000f1fd:	cmp	ax, word ptr [rbx + 0x2]
10000f201:	je	0x10000f213
10000f203:	mov	rsi, qword ptr [rbx + 0x70]
10000f207:	lea	rdi, [rip + 0x12e46] ## literal pool for: "Local Version Needed To Extract does not match CD: "
10000f20e:	call	0x100003e67
10000f213:	movzx	eax, word ptr [r12 + 0x3a]
10000f219:	cmp	ax, word ptr [rbx + 0x4]
10000f21d:	je	0x10000f233
10000f21f:	mov	rsi, qword ptr [rbx + 0x70]
10000f223:	lea	rdi, [rip + 0x12bea] ## literal pool for: "Local Entry Flag does not match CD: "
10000f22a:	call	0x100003e67
10000f22f:	movzx	eax, word ptr [rbx + 0x4]
10000f233:	test	al, 0x8
10000f235:	jne	0x10000f252
10000f237:	mov	rax, qword ptr [r12 + 0x10]
10000f23c:	cmp	rax, qword ptr [rbx + 0x10]
10000f240:	je	0x10000f252
10000f242:	mov	rsi, qword ptr [rbx + 0x70]
10000f246:	lea	rdi, [rip + 0x12bec] ## literal pool for: "Local Entry CRC does not match CD: "
10000f24d:	call	0x100003e67
10000f252:	mov	ebx, dword ptr [r15]
10000f255:	mov	ecx, 0x3
10000f25a:	cmp	ebx, 0x3
10000f25d:	je	0x10000f292
10000f25f:	mov	rdi, qword ptr [r12 + 0x70]
10000f264:	mov	rax, qword ptr [rbp - 0x58]
10000f268:	mov	r15, qword ptr [rax + 0x70]
10000f26c:	mov	rsi, r15
10000f26f:	call	0x10001990e ## symbol stub for: _strcmp
10000f274:	mov	ecx, ebx
10000f276:	test	eax, eax
10000f278:	je	0x10000f292
10000f27a:	lea	rdi, [rip + 0x12e07] ## literal pool for: "Local Entry name does not match CD: "
10000f281:	mov	rsi, r15
10000f284:	call	0x100003e67
10000f289:	lea	rax, [rip + 0x1a420]
10000f290:	mov	ecx, dword ptr [rax]
10000f292:	mov	rbx, qword ptr [rbp - 0x58]
10000f296:	movups	xmm0, xmmword ptr [rbx + 0x18]
10000f29a:	movups	xmmword ptr [r12 + 0x18], xmm0
10000f2a0:	cmp	ecx, 0x3
10000f2a3:	jne	0x10000f2fc
10000f2a5:	mov	rdi, qword ptr [rbx + 0x70]
10000f2a9:	call	0x100019920 ## symbol stub for: _strlen
10000f2ae:	mov	word ptr [rbx + 0x28], ax
10000f2b2:	mov	r13, r12
10000f2b5:	mov	word ptr [r12 + 0x28], ax
10000f2bb:	mov	rdi, qword ptr [r12 + 0x70]
10000f2c0:	call	0x100019806 ## symbol stub for: _free
10000f2c5:	mov	r15, qword ptr [rbx + 0x70]
10000f2c9:	mov	rdi, r15
10000f2cc:	call	0x100019920 ## symbol stub for: _strlen
10000f2d1:	lea	rdi, [rax + 0x1]
10000f2d5:	call	0x100019848 ## symbol stub for: _malloc
10000f2da:	mov	qword ptr [r12 + 0x70], rax
10000f2df:	test	rax, rax
10000f2e2:	je	0x10000f5de
10000f2e8:	mov	rdi, rax
10000f2eb:	mov	rsi, r15
10000f2ee:	call	0x100019914 ## symbol stub for: _strcpy
10000f2f3:	lea	rax, [rip + 0x1a3b6]
10000f2fa:	mov	ecx, dword ptr [rax]
10000f2fc:	lea	rax, [rip + 0x1a54d]
10000f303:	mov	rax, qword ptr [rax]
10000f306:	mov	qword ptr [rbx + 0x30], rax
10000f30a:	lea	rax, [rip + 0x1a587]
10000f311:	mov	rax, qword ptr [rax]
10000f314:	mov	qword ptr [rbx + 0x40], rax
10000f318:	cmp	ecx, 0x2
10000f31b:	je	0x10000f34a
10000f31d:	movzx	eax, word ptr [rbx + 0x4]
10000f321:	test	al, 0x1
10000f323:	jne	0x10000f34a
10000f325:	and	eax, 0xfff7
10000f32a:	mov	word ptr [rbx + 0x4], ax
10000f32e:	mov	rdx, r12
10000f331:	mov	word ptr [r12 + 0x4], ax
10000f337:	movzx	eax, word ptr [r12 + 0x3a]
10000f33d:	and	eax, -0x9
10000f340:	mov	word ptr [r12 + 0x3a], ax
10000f346:	mov	word ptr [rbx + 0x3a], ax
10000f34a:	movzx	eax, word ptr [rbx + 0x3a]
10000f34e:	xor	edx, edx
10000f350:	cmp	dword ptr [r14], 0x0
10000f354:	setne	dl
10000f357:	xor	esi, esi
10000f359:	test	al, 0x8
10000f35b:	lea	rax, [8*rdx + 0x10]
10000f363:	cmovne	rsi, rax
10000f367:	mov	rdi, r12
10000f36a:	movzx	eax, word ptr [r12 + 0x28]
10000f370:	add	rax, qword ptr [rbx + 0x18]
10000f374:	movzx	edx, word ptr [r12 + 0x2a]
10000f37a:	add	rax, rsi
10000f37d:	add	rax, rdx
10000f380:	lea	r14, [rip + 0x1bbb1]
10000f387:	mov	rdx, qword ptr [r14]
10000f38a:	lea	rax, [rdx + rax + 0x1e]
10000f38f:	mov	qword ptr [r14], rax
10000f392:	cmp	ecx, 0x2
10000f395:	jne	0x10000f413
10000f397:	mov	r15, qword ptr [rdi + 0x70]
10000f39b:	mov	rdi, r15
10000f39e:	call	0x100019920 ## symbol stub for: _strlen
10000f3a3:	lea	rdi, [rax + 0x1]
10000f3a7:	call	0x100019848 ## symbol stub for: _malloc
10000f3ac:	mov	qword ptr [rbx + 0x80], rax
10000f3b3:	test	rax, rax
10000f3b6:	je	0x10000f5f1
10000f3bc:	mov	rdi, rax
10000f3bf:	mov	rsi, r15
10000f3c2:	call	0x100019914 ## symbol stub for: _strcpy
10000f3c7:	mov	r8, qword ptr [rbx + 0x80]
10000f3ce:	lea	r15, [rip + 0x1a75b]
10000f3d5:	lea	rcx, [rip + 0x12cea] ## literal pool for: " copying: %s "
10000f3dc:	mov	edx, 0x13f1
10000f3e1:	mov	rdi, r15
10000f3e4:	mov	esi, 0x0
10000f3e9:	xor	eax, eax
10000f3eb:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000f3f0:	mov	rdi, r15
10000f3f3:	xor	esi, esi
10000f3f5:	call	0x100003c73
10000f3fa:	lea	rax, [rip + 0x1a2af]
10000f401:	cmp	dword ptr [rax], 0x2
10000f404:	mov	rdi, r12
10000f407:	jne	0x10000f413
10000f409:	mov	rax, qword ptr [rdi + 0x10]
10000f40d:	mov	qword ptr [rbx + 0x10], rax
10000f411:	jmp	0x10000f41b
10000f413:	mov	rax, qword ptr [rbx + 0x10]
10000f417:	mov	qword ptr [rdi + 0x10], rax
10000f41b:	mov	rbx, rdi
10000f41e:	xor	esi, esi
10000f420:	call	0x10000dc54
10000f425:	mov	r13d, 0xa
10000f42b:	test	eax, eax
10000f42d:	jne	0x10000f5f7
10000f433:	lea	rax, [rip + 0x1a276]
10000f43a:	cmp	dword ptr [rax], 0x2
10000f43d:	jne	0x10000f44c
10000f43f:	mov	rdi, -0x2
10000f446:	test	byte ptr [rbx + 0x3a], 0x8
10000f44a:	jne	0x10000f450
10000f44c:	mov	rdi, qword ptr [rbx + 0x18]
10000f450:	add	qword ptr [rbp - 0x60], 0x50
10000f455:	call	0x1000124f3
10000f45a:	mov	r13d, eax
10000f45d:	cmp	eax, 0x9
10000f460:	jne	0x10000f4ae
10000f462:	cmp	word ptr [rbx + 0x2a], 0x0
10000f467:	je	0x10000f472
10000f469:	mov	rdi, qword ptr [rbx + 0x58]
10000f46d:	call	0x100019806 ## symbol stub for: _free
10000f472:	cmp	word ptr [rbx + 0x28], 0x0
10000f477:	je	0x10000f495
10000f479:	mov	rdi, qword ptr [rbx + 0x70]
10000f47d:	call	0x100019806 ## symbol stub for: _free
10000f482:	cmp	word ptr [rbx + 0x28], 0x0
10000f487:	je	0x10000f495
10000f489:	mov	rax, qword ptr [rbp - 0x60]
10000f48d:	mov	rdi, qword ptr [rax]
10000f490:	call	0x100019806 ## symbol stub for: _free
10000f495:	mov	rdi, rbx
10000f498:	call	0x100019806 ## symbol stub for: _free
10000f49d:	lea	rsi, [rip + 0x12c30] ## literal pool for: "Could not find split"
10000f4a4:	mov	edi, 0x9
10000f4a9:	call	0x1000037b0
10000f4ae:	lea	r15, [rip + 0x1a21b]
10000f4b5:	cmp	r13d, 0x2
10000f4b9:	je	0x10000f527
10000f4bb:	cmp	qword ptr [r15], 0x0
10000f4bf:	jne	0x10000f527
10000f4c1:	lea	r14, [rip + 0x1a1e8]
10000f4c8:	cmp	dword ptr [r14], 0x2
10000f4cc:	mov	rbx, qword ptr [rbp - 0x58]
10000f4d0:	movzx	eax, word ptr [rbx + 0x4]
10000f4d4:	jne	0x10000f61d
10000f4da:	test	al, 0x8
10000f4dc:	je	0x10000f629
10000f4e2:	lea	rax, [rip + 0x1a1ef]
10000f4e9:	cmp	dword ptr [rax], 0x0
10000f4ec:	je	0x10000f88c
10000f4f2:	lea	rax, [rip + 0x1a1e7]
10000f4f9:	mov	rax, qword ptr [rax]
10000f4fc:	mov	rcx, r12
10000f4ff:	mov	qword ptr [r12 + 0x10], rax
10000f504:	lea	rax, [rip + 0x1a1dd]
10000f50b:	mov	rax, qword ptr [rax]
10000f50e:	mov	qword ptr [r12 + 0x18], rax
10000f513:	lea	rax, [rip + 0x1a1d6]
10000f51a:	mov	rax, qword ptr [rax]
10000f51d:	mov	qword ptr [r12 + 0x20], rax
10000f522:	jmp	0x10000f621
10000f527:	mov	rax, qword ptr [rbp - 0x58]
10000f52b:	mov	rsi, qword ptr [rax + 0x80]
10000f532:	lea	rdi, [rip + 0x12bb0] ## literal pool for: "aborting: "
10000f539:	call	0x100003e67
10000f53e:	test	r13d, r13d
10000f541:	mov	eax, r13d
10000f544:	mov	r13d, 0x3
10000f54a:	cmovne	r13d, eax
10000f54e:	lea	rax, [rip + 0x1a15b]
10000f555:	cmp	dword ptr [rax], 0x2
10000f558:	jne	0x10000f5a1
10000f55a:	mov	qword ptr [r15], 0x0
10000f561:	lea	rax, [rip + 0x1a290]
10000f568:	mov	rdi, qword ptr [rax]
10000f56b:	lea	r15, [rip + 0x1a31e]
10000f572:	mov	rsi, qword ptr [r15]
10000f575:	xor	edx, edx
10000f577:	call	0x10001980c ## symbol stub for: _fseeko
10000f57c:	test	eax, eax
10000f57e:	je	0x10000f591
10000f580:	lea	rsi, [rip + 0x12b6d] ## literal pool for: "seek failed on output file"
10000f587:	mov	edi, 0xe
10000f58c:	call	0x1000037b0
10000f591:	mov	rax, qword ptr [r15]
10000f594:	lea	rcx, [rip + 0x1a2fd]
10000f59b:	mov	qword ptr [rcx], rax
10000f59e:	mov	qword ptr [r14], rax
10000f5a1:	cmp	word ptr [rbx + 0x2a], 0x0
10000f5a6:	je	0x10000f5b1
10000f5a8:	mov	rdi, qword ptr [rbx + 0x58]
10000f5ac:	call	0x100019806 ## symbol stub for: _free
10000f5b1:	cmp	word ptr [rbx + 0x28], 0x0
10000f5b6:	je	0x10000f5d4
10000f5b8:	mov	rdi, qword ptr [rbx + 0x70]
10000f5bc:	call	0x100019806 ## symbol stub for: _free
10000f5c1:	cmp	word ptr [rbx + 0x28], 0x0
10000f5c6:	je	0x10000f5d4
10000f5c8:	mov	rax, qword ptr [rbp - 0x60]
10000f5cc:	mov	rdi, qword ptr [rax]
10000f5cf:	call	0x100019806 ## symbol stub for: _free
10000f5d4:	mov	rdi, rbx
10000f5d7:	call	0x100019806 ## symbol stub for: _free
10000f5dc:	jmp	0x10000f5f7
10000f5de:	lea	rdi, [rip + 0x12ac8] ## literal pool for: "out of memory in zipcopy"
10000f5e5:	lea	rsi, [rip + 0xb1cb] ## literal pool for: ""
10000f5ec:	call	0x100003e67
10000f5f1:	mov	r13d, 0x4
10000f5f7:	mov	rax, qword ptr [rip + 0x14a12] ## literal pool symbol address: ___stack_chk_guard
10000f5fe:	mov	rax, qword ptr [rax]
10000f601:	cmp	rax, qword ptr [rbp - 0x30]
10000f605:	jne	0x10000f915
10000f60b:	mov	eax, r13d
10000f60e:	add	rsp, 0x38
10000f612:	pop	rbx
10000f613:	pop	r12
10000f615:	pop	r13
10000f617:	pop	r14
10000f619:	pop	r15
10000f61b:	pop	rbp
10000f61c:	ret
10000f61d:	test	al, 0x8
10000f61f:	je	0x10000f629
10000f621:	mov	rdi, r12
10000f624:	call	0x10000e38b
10000f629:	lea	rax, [rip + 0x1a274]
10000f630:	cmp	dword ptr [rax], 0x1
10000f633:	jne	0x10000f67a
10000f635:	lea	rax, [rip + 0x1a20c]
10000f63c:	mov	rdi, qword ptr [rax]
10000f63f:	lea	rax, [rip + 0x1a20a]
10000f646:	cmp	rdi, qword ptr [rax]
10000f649:	je	0x10000f67a
10000f64b:	lea	r14, [rip + 0x1a236]
10000f652:	mov	rsi, qword ptr [r14]
10000f655:	lea	r15, [rip + 0x1a224]
10000f65c:	mov	rdx, qword ptr [r15]
10000f65f:	call	0x10001434b
10000f664:	mov	qword ptr [r14], 0x0
10000f66b:	mov	rdi, qword ptr [r15]
10000f66e:	lea	r14, [rip + 0x1a03b]
10000f675:	call	0x100019806 ## symbol stub for: _free
10000f67a:	cmp	dword ptr [r14], 0x2
10000f67e:	jne	0x10000f774
10000f684:	mov	rdx, r12
10000f687:	movzx	eax, word ptr [r12 + 0x2]
10000f68d:	mov	word ptr [rbx + 0x2], ax
10000f691:	movzx	eax, word ptr [r12 + 0x6]
10000f697:	mov	word ptr [rbx + 0x6], ax
10000f69b:	movzx	eax, word ptr [r12 + 0x3a]
10000f6a1:	mov	word ptr [rbx + 0x3a], ax
10000f6a5:	mov	word ptr [rbx + 0x4], ax
10000f6a9:	movups	xmm0, xmmword ptr [r12 + 0x8]
10000f6af:	movups	xmm1, xmmword ptr [r12 + 0x18]
10000f6b5:	movups	xmmword ptr [rbx + 0x18], xmm1
10000f6b9:	movups	xmmword ptr [rbx + 0x8], xmm0
10000f6bd:	movzx	eax, word ptr [r12 + 0x28]
10000f6c3:	mov	word ptr [rbx + 0x28], ax
10000f6c7:	movzx	edi, word ptr [r12 + 0x2a]
10000f6cd:	mov	word ptr [rbx + 0x2a], di
10000f6d1:	mov	r14, qword ptr [r12 + 0x58]
10000f6d6:	mov	qword ptr [rbx + 0x58], r14
10000f6da:	mov	word ptr [rbx + 0x2c], di
10000f6de:	mov	qword ptr [rbx + 0x60], 0x0
10000f6e6:	test	rdi, rdi
10000f6e9:	je	0x10000f714
10000f6eb:	inc	rdi
10000f6ee:	call	0x100019848 ## symbol stub for: _malloc
10000f6f3:	mov	qword ptr [rbx + 0x60], rax
10000f6f7:	test	rax, rax
10000f6fa:	je	0x10000f5f1
10000f700:	mov	rdi, rax
10000f703:	mov	rsi, r14
10000f706:	call	0x100019914 ## symbol stub for: _strcpy
10000f70b:	mov	rdx, r12
10000f70e:	movzx	eax, word ptr [r12 + 0x28]
10000f714:	mov	dword ptr [rbp - 0x60], r13d
10000f718:	xor	ecx, ecx
10000f71a:	mov	word ptr [rbx + 0x2e], cx
10000f71e:	mov	word ptr [rbx + 0x38], cx
10000f722:	mov	qword ptr [rbx + 0x48], 0x0
10000f72a:	mov	rcx, qword ptr [rdx + 0x50]
10000f72e:	mov	qword ptr [rbx + 0x50], rcx
10000f732:	mov	r15, qword ptr [rdx + 0x70]
10000f736:	mov	qword ptr [rbx + 0x70], r15
10000f73a:	movzx	edi, ax
10000f73d:	inc	rdi
10000f740:	call	0x100019848 ## symbol stub for: _malloc
10000f745:	mov	qword ptr [rbx + 0x78], rax
10000f749:	mov	r13d, 0x4
10000f74f:	test	rax, rax
10000f752:	je	0x10000f5f7
10000f758:	mov	rdi, rax
10000f75b:	mov	rsi, r15
10000f75e:	call	0x100019914 ## symbol stub for: _strcpy
10000f763:	mov	rbx, qword ptr [rbp - 0x58]
10000f767:	lea	r14, [rip + 0x19f42]
10000f76e:	mov	r13d, dword ptr [rbp - 0x60]
10000f772:	jmp	0x10000f7b6
10000f774:	mov	r15, r12
10000f777:	cmp	word ptr [r12 + 0x2a], 0x0
10000f77e:	je	0x10000f789
10000f780:	mov	rdi, qword ptr [r15 + 0x58]
10000f784:	call	0x100019806 ## symbol stub for: _free
10000f789:	cmp	word ptr [r15 + 0x28], 0x0
10000f78f:	je	0x10000f7ae
10000f791:	mov	rdi, qword ptr [r15 + 0x70]
10000f795:	call	0x100019806 ## symbol stub for: _free
10000f79a:	cmp	word ptr [r15 + 0x28], 0x0
10000f7a0:	je	0x10000f7ae
10000f7a2:	mov	rax, qword ptr [rbp - 0x60]
10000f7a6:	mov	rdi, qword ptr [rax]
10000f7a9:	call	0x100019806 ## symbol stub for: _free
10000f7ae:	mov	rdi, r15
10000f7b1:	call	0x100019806 ## symbol stub for: _free
10000f7b6:	cmp	dword ptr [r14], 0x2
10000f7ba:	jne	0x10000f5f7
10000f7c0:	mov	rdi, qword ptr [rbx + 0x18]
10000f7c4:	lea	rdx, [rip + 0xca7b] ## literal pool for: "u"
10000f7cb:	xor	esi, esi
10000f7cd:	call	0x100016116
10000f7d2:	lea	rbx, [rip + 0x1a357]
10000f7d9:	lea	rcx, [rip + 0xdb28] ## literal pool for: " (%s bytes)"
10000f7e0:	mov	edx, 0x13f1
10000f7e5:	mov	rdi, rbx
10000f7e8:	mov	esi, 0x0
10000f7ed:	mov	r8, rax
10000f7f0:	xor	eax, eax
10000f7f2:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000f7f7:	mov	rdi, rbx
10000f7fa:	mov	esi, 0x1
10000f7ff:	call	0x100003c73
10000f804:	mov	eax, r13d
10000f807:	cmp	r13d, 0xb
10000f80b:	jne	0x10000f5f7
10000f811:	mov	rax, qword ptr [rbp - 0x58]
10000f815:	mov	rsi, qword ptr [rax + 0x80]
10000f81c:	lea	rdi, [rip + 0x12934] ## literal pool for: "entry truncated: "
10000f823:	call	0x100003e67
10000f828:	mov	rdi, qword ptr [r12 + 0x18]
10000f82d:	lea	r14, [rip + 0xca12] ## literal pool for: "u"
10000f834:	xor	esi, esi
10000f836:	mov	rdx, r14
10000f839:	call	0x100016116
10000f83e:	mov	rbx, rax
10000f841:	lea	rax, [rip + 0x1a078]
10000f848:	mov	rdi, qword ptr [rax]
10000f84b:	xor	esi, esi
10000f84d:	mov	rdx, r14
10000f850:	call	0x100016116
10000f855:	lea	r14, [rip + 0x1a2d4]
10000f85c:	lea	rcx, [rip + 0x12906] ## literal pool for: "expected compressed/stored size %s, actual %s"
10000f863:	mov	edx, 0x13f1
10000f868:	mov	rdi, r14
10000f86b:	mov	esi, 0x0
10000f870:	mov	r8, rbx
10000f873:	mov	r9, rax
10000f876:	xor	eax, eax
10000f878:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000f87d:	lea	rsi, [rip + 0xaf33] ## literal pool for: ""
10000f884:	mov	rdi, r14
10000f887:	jmp	0x10000eefc
10000f88c:	mov	rsi, qword ptr [rbx + 0x80]
10000f893:	lea	rdi, [rip + 0x12875] ## literal pool for: "no end of stream entry found: "
10000f89a:	call	0x100003e67
10000f89f:	lea	rdi, [rip + 0x12888] ## literal pool for: "rewinding and scanning for later entries"
10000f8a6:	lea	rsi, [rip + 0xaf0a] ## literal pool for: ""
10000f8ad:	call	0x100003e67
10000f8b2:	lea	rax, [rip + 0x19f3f]
10000f8b9:	mov	rdi, qword ptr [rax]
10000f8bc:	lea	rax, [rip + 0x19fcd]
10000f8c3:	mov	rsi, qword ptr [rax]
10000f8c6:	xor	edx, edx
10000f8c8:	call	0x10001980c ## symbol stub for: _fseeko
10000f8cd:	cmp	word ptr [r12 + 0x2a], 0x0
10000f8d4:	je	0x10000f8e0
10000f8d6:	mov	rdi, qword ptr [r12 + 0x58]
10000f8db:	call	0x100019806 ## symbol stub for: _free
10000f8e0:	cmp	word ptr [r12 + 0x28], 0x0
10000f8e7:	je	0x10000f908
10000f8e9:	mov	rdi, qword ptr [r12 + 0x70]
10000f8ee:	call	0x100019806 ## symbol stub for: _free
10000f8f3:	cmp	word ptr [r12 + 0x28], 0x0
10000f8fa:	je	0x10000f908
10000f8fc:	mov	rax, qword ptr [rbp - 0x60]
10000f900:	mov	rdi, qword ptr [rax]
10000f903:	call	0x100019806 ## symbol stub for: _free
10000f908:	mov	rdi, r12
10000f90b:	call	0x100019806 ## symbol stub for: _free
10000f910:	jmp	0x10000f0b5
10000f915:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
10000f91a:	push	rbp
10000f91b:	mov	rbp, rsp
10000f91e:	push	r14
10000f920:	push	rbx
10000f921:	mov	r14, rsi
10000f924:	mov	rbx, rdi
10000f927:	mov	rdi, qword ptr [rdi + 0x58]
10000f92b:	movzx	esi, word ptr [rbx + 0x2a]
10000f92f:	xor	edx, edx
10000f931:	mov	rcx, r14
10000f934:	call	0x10000f96f
10000f939:	test	eax, eax
10000f93b:	je	0x10000f942
10000f93d:	pop	rbx
10000f93e:	pop	r14
10000f940:	pop	rbp
10000f941:	ret
10000f942:	movzx	esi, word ptr [rbx + 0x2c]
10000f946:	test	rsi, rsi
10000f949:	je	0x10000f96b
10000f94b:	mov	rdi, qword ptr [rbx + 0x60]
10000f94f:	mov	eax, 0x0
10000f954:	cmp	rdi, qword ptr [rbx + 0x58]
10000f958:	je	0x10000f93d
10000f95a:	mov	edx, 0x1
10000f95f:	mov	rcx, r14
10000f962:	pop	rbx
10000f963:	pop	r14
10000f965:	pop	rbp
10000f966:	jmp	0x10000f96f
10000f96b:	xor	eax, eax
10000f96d:	jmp	0x10000f93d
10000f96f:	push	rbp
10000f970:	mov	rbp, rsp
10000f973:	xor	eax, eax
10000f975:	test	rdi, rdi
10000f978:	je	0x10000faa7
10000f97e:	cmp	rsi, 0x4
10000f982:	jb	0x10000faa7
10000f988:	xor	r9d, r9d
10000f98b:	xor	eax, eax
10000f98d:	movzx	r8d, word ptr [rdi + 0x2]
10000f992:	lea	r10, [rsi - 0x4]
10000f996:	cmp	r8, r10
10000f999:	ja	0x10000faa7
10000f99f:	movzx	r10d, word ptr [rdi]
10000f9a3:	cmp	r10d, 0x7855
10000f9aa:	je	0x10000fa0d
10000f9ac:	movzx	r10d, r10w
10000f9b0:	cmp	r10d, 0x5855
10000f9b7:	je	0x10000fa26
10000f9b9:	cmp	r10d, 0x5455
10000f9c0:	jne	0x10000fa91
10000f9c6:	and	eax, 0xffffff00
10000f9cb:	mov	r9d, 0x1
10000f9d1:	test	rcx, rcx
10000f9d4:	je	0x10000fa91
10000f9da:	test	r8, r8
10000f9dd:	je	0x10000fa91
10000f9e3:	movzx	r10d, byte ptr [rdi + 0x4]
10000f9e8:	or	eax, r10d
10000f9eb:	mov	r9d, 0x1
10000f9f1:	test	r10b, 0x1
10000f9f5:	je	0x10000fa4b
10000f9f7:	cmp	r8d, 0x5
10000f9fb:	jb	0x10000fa48
10000f9fd:	mov	r10d, dword ptr [rdi + 0x5]
10000fa01:	mov	qword ptr [rcx + 0x8], r10
10000fa05:	mov	r10d, 0x5
10000fa0b:	jmp	0x10000fa51
10000fa0d:	mov	r10d, eax
10000fa10:	and	r10d, 0xffffff00
10000fa17:	test	r9d, r9d
10000fa1a:	cmove	eax, r10d
10000fa1e:	mov	r9d, 0x1
10000fa24:	jmp	0x10000fa91
10000fa26:	test	r9d, r9d
10000fa29:	jne	0x10000fa91
10000fa2b:	cmp	r8d, 0x8
10000fa2f:	jb	0x10000fa91
10000fa31:	mov	r9d, dword ptr [rdi + 0x4]
10000fa35:	mov	qword ptr [rcx], r9
10000fa38:	mov	r9d, dword ptr [rdi + 0x8]
10000fa3c:	mov	qword ptr [rcx + 0x8], r9
10000fa40:	or	eax, 0x3
10000fa43:	xor	r9d, r9d
10000fa46:	jmp	0x10000fa91
10000fa48:	and	eax, -0x2
10000fa4b:	mov	r10d, 0x1
10000fa51:	test	edx, edx
10000fa53:	jne	0x10000fa91
10000fa55:	test	al, 0x2
10000fa57:	je	0x10000fa74
10000fa59:	mov	r11d, r10d
10000fa5c:	add	r11, 0x4
10000fa60:	cmp	r8, r11
10000fa63:	jae	0x10000fa6a
10000fa65:	and	eax, -0x3
10000fa68:	jmp	0x10000fa74
10000fa6a:	mov	r10d, dword ptr [rdi + r11]
10000fa6e:	mov	qword ptr [rcx], r10
10000fa71:	mov	r10d, r11d
10000fa74:	test	al, 0x4
10000fa76:	je	0x10000fa91
10000fa78:	mov	r10d, r10d
10000fa7b:	add	r10, 0x4
10000fa7f:	cmp	r8, r10
10000fa82:	jae	0x10000fa89
10000fa84:	and	eax, -0x5
10000fa87:	jmp	0x10000fa91
10000fa89:	mov	r10d, dword ptr [rdi + r10]
10000fa8d:	mov	qword ptr [rcx + 0x10], r10
10000fa91:	lea	rdi, [rdi + r8 + 0x4]
10000fa96:	add	r8, 0x4
10000fa9a:	sub	rsi, r8
10000fa9d:	cmp	rsi, 0x3
10000faa1:	ja	0x10000f98d
10000faa7:	pop	rbp
10000faa8:	ret
10000faa9:	push	rbp
10000faaa:	mov	rbp, rsp
10000faad:	push	r15
10000faaf:	push	r14
10000fab1:	push	r13
10000fab3:	push	r12
10000fab5:	push	rbx
10000fab6:	push	rax
10000fab7:	lea	rax, [rip + 0x19e1a]
10000fabe:	mov	rbx, qword ptr [rax]
10000fac1:	test	rbx, rbx
10000fac4:	je	0x10000fd1e
10000faca:	xor	r14d, r14d
10000facd:	lea	r13, [rip + 0x19bd8]
10000fad4:	lea	r15, [rip + 0x19979]
10000fadb:	xor	r12d, r12d
10000fade:	cmp	dword ptr [rbx + 0x88], 0x1
10000fae5:	je	0x10000faf4
10000fae7:	cmp	dword ptr [rbx + 0x8c], 0x0
10000faee:	je	0x10000fbd9
10000faf4:	mov	dword ptr [rbx + 0x88], 0x1
10000fafe:	mov	rax, qword ptr [rbx + 0x70]
10000fb02:	movzx	ecx, word ptr [rbx + 0x28]
10000fb06:	cmp	byte ptr [rcx + rax - 0x1], 0x2f
10000fb0b:	jne	0x10000fb15
10000fb0d:	inc	r12
10000fb10:	jmp	0x10000fbd9
10000fb15:	cmp	dword ptr [r13], 0x0
10000fb1a:	je	0x10000fb38
10000fb1c:	lea	rax, [rip + 0x1b40d]
10000fb23:	mov	rdi, qword ptr [rax]
10000fb26:	mov	rdx, qword ptr [rbx + 0x50]
10000fb2a:	lea	rsi, [rip + 0x12666] ## literal pool for: "zip diagnostic: deleting file %s\n"
10000fb31:	xor	eax, eax
10000fb33:	call	0x1000197ee ## symbol stub for: _fprintf
10000fb38:	mov	rdi, qword ptr [rbx + 0x50]
10000fb3c:	call	0x1000121b4
10000fb41:	test	eax, eax
10000fb43:	je	0x10000fb55
10000fb45:	mov	rsi, qword ptr [rbx + 0x50]
10000fb49:	lea	rdi, [rip + 0x12669] ## literal pool for: "error deleting "
10000fb50:	call	0x100003e67
10000fb55:	cmp	dword ptr [r15], 0x0
10000fb59:	jne	0x10000fbd9
10000fb5b:	mov	r13, qword ptr [rbx + 0x50]
10000fb5f:	mov	rdi, r13
10000fb62:	mov	esi, 0x2f
10000fb67:	call	0x100019932 ## symbol stub for: _strrchr
10000fb6c:	test	rax, rax
10000fb6f:	cmove	rax, r13
10000fb73:	mov	byte ptr [rax], r14b
10000fb76:	mov	r13, qword ptr [rbx + 0x70]
10000fb7a:	mov	rdi, r13
10000fb7d:	mov	esi, 0x2f
10000fb82:	call	0x100019932 ## symbol stub for: _strrchr
10000fb87:	test	rax, rax
10000fb8a:	cmove	rax, r13
10000fb8e:	mov	byte ptr [rax], r14b
10000fb91:	mov	r13, qword ptr [rbx + 0x70]
10000fb95:	mov	rdi, r13
10000fb98:	call	0x100019920 ## symbol stub for: _strlen
10000fb9d:	mov	word ptr [rbx + 0x28], ax
10000fba1:	mov	ecx, eax
10000fba3:	and	ecx, 0xffff
10000fba9:	je	0x10000fbca
10000fbab:	dec	ecx
10000fbad:	mov	byte ptr [r13 + rcx], 0x2f
10000fbb3:	mov	rax, qword ptr [rbx + 0x70]
10000fbb7:	movzx	ecx, word ptr [rbx + 0x28]
10000fbbb:	lea	edx, [rcx + 0x1]
10000fbbe:	mov	word ptr [rbx + 0x28], dx
10000fbc2:	mov	byte ptr [rax + rcx], 0x0
10000fbc6:	movzx	eax, word ptr [rbx + 0x28]
10000fbca:	cmp	ax, 0x1
10000fbce:	sbb	r12, -0x1
10000fbd2:	lea	r13, [rip + 0x19ad3]
10000fbd9:	mov	rbx, qword ptr [rbx + 0x98]
10000fbe0:	test	rbx, rbx
10000fbe3:	jne	0x10000fade
10000fbe9:	xor	r14d, r14d
10000fbec:	test	r12, r12
10000fbef:	je	0x10000fd49
10000fbf5:	shl	r12, 0x3
10000fbf9:	mov	rdi, r12
10000fbfc:	call	0x100019848 ## symbol stub for: _malloc
10000fc01:	test	rax, rax
10000fc04:	je	0x10000fd23
10000fc0a:	mov	r13, rax
10000fc0d:	lea	rax, [rip + 0x19cc4]
10000fc14:	mov	rbx, qword ptr [rax]
10000fc17:	test	rbx, rbx
10000fc1a:	je	0x10000fd2b
10000fc20:	xor	r15d, r15d
10000fc23:	cmp	dword ptr [rbx + 0x88], 0x0
10000fc2a:	je	0x10000fc64
10000fc2c:	movzx	eax, word ptr [rbx + 0x28]
10000fc30:	test	rax, rax
10000fc33:	je	0x10000fc64
10000fc35:	mov	rcx, qword ptr [rbx + 0x70]
10000fc39:	dec	eax
10000fc3b:	cmp	byte ptr [rcx + rax], 0x2f
10000fc3f:	jne	0x10000fc64
10000fc41:	test	r15, r15
10000fc44:	je	0x10000fc5c
10000fc46:	mov	rdi, qword ptr [rbx + 0x50]
10000fc4a:	mov	rax, qword ptr [r13 + 8*r15 - 0x8]
10000fc4f:	mov	rsi, qword ptr [rax + 0x50]
10000fc53:	call	0x10001990e ## symbol stub for: _strcmp
10000fc58:	test	eax, eax
10000fc5a:	je	0x10000fc64
10000fc5c:	mov	qword ptr [r13 + 8*r15], rbx
10000fc61:	inc	r15
10000fc64:	mov	rbx, qword ptr [rbx + 0x98]
10000fc6b:	test	rbx, rbx
10000fc6e:	jne	0x10000fc23
10000fc70:	lea	rcx, [rip + 0xe4]
10000fc77:	mov	edx, 0x8
10000fc7c:	mov	rdi, r13
10000fc7f:	mov	rsi, r15
10000fc82:	call	0x1000198a8 ## symbol stub for: _qsort
10000fc87:	test	r15, r15
10000fc8a:	je	0x10000fd41
10000fc90:	xor	r12d, r12d
10000fc93:	mov	rax, qword ptr [r13 + 8*r12]
10000fc98:	mov	rbx, qword ptr [rax + 0x50]
10000fc9c:	cmp	byte ptr [rbx], 0x0
10000fc9f:	je	0x10000fd10
10000fca1:	mov	rdi, rbx
10000fca4:	call	0x100019920 ## symbol stub for: _strlen
10000fca9:	cmp	byte ptr [rax + rbx - 0x1], 0x2f
10000fcae:	jne	0x10000fcb5
10000fcb0:	mov	byte ptr [rbx + rax - 0x1], 0x0
10000fcb5:	test	r12, r12
10000fcb8:	je	0x10000fcd5
10000fcba:	mov	rax, qword ptr [r13 + 8*r12 - 0x8]
10000fcbf:	mov	rcx, qword ptr [r13 + 8*r12]
10000fcc4:	mov	rdi, qword ptr [rcx + 0x50]
10000fcc8:	mov	rsi, qword ptr [rax + 0x50]
10000fccc:	call	0x10001990e ## symbol stub for: _strcmp
10000fcd1:	test	eax, eax
10000fcd3:	je	0x10000fd10
10000fcd5:	lea	rax, [rip + 0x199d0]
10000fcdc:	cmp	dword ptr [rax], 0x0
10000fcdf:	je	0x10000fd02
10000fce1:	lea	rax, [rip + 0x1b248]
10000fce8:	mov	rdi, qword ptr [rax]
10000fceb:	mov	rax, qword ptr [r13 + 8*r12]
10000fcf0:	mov	rdx, qword ptr [rax + 0x50]
10000fcf4:	lea	rsi, [rip + 0x124ce] ## literal pool for: "deleting directory %s (if empty)                \n"
10000fcfb:	xor	eax, eax
10000fcfd:	call	0x1000197ee ## symbol stub for: _fprintf
10000fd02:	mov	rax, qword ptr [r13 + 8*r12]
10000fd07:	mov	rdi, qword ptr [rax + 0x50]
10000fd0b:	call	0x100017527
10000fd10:	inc	r12
10000fd13:	cmp	r15, r12
10000fd16:	jne	0x10000fc93
10000fd1c:	jmp	0x10000fd41
10000fd1e:	xor	r14d, r14d
10000fd21:	jmp	0x10000fd49
10000fd23:	mov	r14d, 0x4
10000fd29:	jmp	0x10000fd49
10000fd2b:	lea	rcx, [rip + 0x29]
10000fd32:	mov	edx, 0x8
10000fd37:	mov	rdi, r13
10000fd3a:	xor	esi, esi
10000fd3c:	call	0x1000198a8 ## symbol stub for: _qsort
10000fd41:	mov	rdi, r13
10000fd44:	call	0x100019806 ## symbol stub for: _free
10000fd49:	mov	eax, r14d
10000fd4c:	add	rsp, 0x8
10000fd50:	pop	rbx
10000fd51:	pop	r12
10000fd53:	pop	r13
10000fd55:	pop	r14
10000fd57:	pop	r15
10000fd59:	pop	rbp
10000fd5a:	ret
10000fd5b:	push	rbp
10000fd5c:	mov	rbp, rsp
10000fd5f:	mov	rax, qword ptr [rsi]
10000fd62:	mov	rax, qword ptr [rax + 0x70]
10000fd66:	mov	rcx, qword ptr [rdi]
10000fd69:	mov	rsi, qword ptr [rcx + 0x70]
10000fd6d:	mov	rdi, rax
10000fd70:	pop	rbp
10000fd71:	jmp	0x100015d2c
10000fd76:	push	rbp
10000fd77:	mov	rbp, rsp
10000fd7a:	push	r15
10000fd7c:	push	r14
10000fd7e:	push	rbx
10000fd7f:	push	rax
10000fd80:	mov	r15, rdi
10000fd83:	mov	eax, dword ptr [rsi]
10000fd85:	mov	dword ptr [rbp - 0x1c], eax
10000fd88:	cmp	al, 0x50
10000fd8a:	jne	0x10000fd90
10000fd8c:	mov	byte ptr [rbp - 0x1c], 0x50
10000fd90:	cmp	byte ptr [rbp - 0x1b], 0x4b
10000fd94:	jne	0x10000fd9a
10000fd96:	mov	byte ptr [rbp - 0x1b], 0x4b
10000fd9a:	xor	r14d, r14d
10000fd9d:	lea	rbx, [rip + 0x4b22d]
10000fda4:	mov	rdi, r15
10000fda7:	call	0x1000197ca ## symbol stub for: _feof
10000fdac:	test	eax, eax
10000fdae:	jne	0x10000fddd
10000fdb0:	mov	rdi, r15
10000fdb3:	call	0x10000fdeb
10000fdb8:	test	eax, eax
10000fdba:	je	0x10000fddd
10000fdbc:	xor	eax, eax
10000fdbe:	mov	cl, byte ptr [rbp + rax - 0x1c]
10000fdc2:	cmp	cl, byte ptr [rax + rbx]
10000fdc5:	jne	0x10000fdd2
10000fdc7:	inc	rax
10000fdca:	cmp	rax, 0x4
10000fdce:	jne	0x10000fdbe
10000fdd0:	jmp	0x10000fdd7
10000fdd2:	cmp	eax, 0x4
10000fdd5:	jne	0x10000fda4
10000fdd7:	mov	r14d, 0x1
10000fddd:	mov	eax, r14d
10000fde0:	add	rsp, 0x8
10000fde4:	pop	rbx
10000fde5:	pop	r14
10000fde7:	pop	r15
10000fde9:	pop	rbp
10000fdea:	ret
10000fdeb:	push	rbp
10000fdec:	mov	rbp, rsp
10000fdef:	push	r15
10000fdf1:	push	r14
10000fdf3:	push	rbx
10000fdf4:	push	rax
10000fdf5:	mov	r15, rdi
10000fdf8:	call	0x100019824 ## symbol stub for: _getc
10000fdfd:	mov	ebx, eax
10000fdff:	xor	r14d, r14d
10000fe02:	cmp	ebx, 0x50
10000fe05:	je	0x10000fe11
10000fe07:	cmp	ebx, -0x1
10000fe0a:	jne	0x10000fe34
10000fe0c:	jmp	0x10000fea4
10000fe11:	mov	byte ptr [rip + 0x4b1b9], 0x50
10000fe18:	mov	rdi, r15
10000fe1b:	call	0x100019824 ## symbol stub for: _getc
10000fe20:	cmp	eax, 0x4b
10000fe23:	je	0x10000fe40
10000fe25:	cmp	eax, -0x1
10000fe28:	je	0x10000fea4
10000fe2a:	mov	edi, eax
10000fe2c:	mov	rsi, r15
10000fe2f:	call	0x100019956 ## symbol stub for: _ungetc
10000fe34:	mov	rdi, r15
10000fe37:	call	0x100019824 ## symbol stub for: _getc
10000fe3c:	mov	ebx, eax
10000fe3e:	jmp	0x10000fe02
10000fe40:	mov	byte ptr [rip + 0x4b18b], 0x4b
10000fe47:	mov	rdi, r15
10000fe4a:	call	0x100019824 ## symbol stub for: _getc
10000fe4f:	cmp	eax, 0x50
10000fe52:	je	0x10000fe81
10000fe54:	mov	ebx, eax
10000fe56:	cmp	eax, -0x1
10000fe59:	je	0x10000fea4
10000fe5b:	cmp	ebx, 0xf
10000fe5e:	jg	0x10000fe02
10000fe60:	mov	byte ptr [rip + 0x4b16d], bl
10000fe66:	mov	rdi, r15
10000fe69:	call	0x100019824 ## symbol stub for: _getc
10000fe6e:	cmp	eax, 0x50
10000fe71:	je	0x10000fe81
10000fe73:	mov	ebx, eax
10000fe75:	cmp	eax, -0x1
10000fe78:	je	0x10000fea4
10000fe7a:	cmp	ebx, 0xf
10000fe7d:	jg	0x10000fe02
10000fe7f:	jmp	0x10000fe98
10000fe81:	mov	ebx, 0x50
10000fe86:	mov	edi, 0x50
10000fe8b:	mov	rsi, r15
10000fe8e:	call	0x100019956 ## symbol stub for: _ungetc
10000fe93:	jmp	0x10000fe02
10000fe98:	mov	byte ptr [rip + 0x4b136], bl
10000fe9e:	mov	r14d, 0x1
10000fea4:	mov	eax, r14d
10000fea7:	add	rsp, 0x8
10000feab:	pop	rbx
10000feac:	pop	r14
10000feae:	pop	r15
10000feb0:	pop	rbp
10000feb1:	ret
10000feb2:	push	rbp
10000feb3:	mov	rbp, rsp
10000feb6:	mov	ecx, dword ptr [rdi]
10000feb8:	mov	dword ptr [rbp - 0x8], ecx
10000febb:	mov	eax, dword ptr [rsi]
10000febd:	mov	dword ptr [rbp - 0x4], eax
10000fec0:	cmp	cl, 0x50
10000fec3:	jne	0x10000fec9
10000fec5:	mov	byte ptr [rbp - 0x8], 0x50
10000fec9:	cmp	byte ptr [rbp - 0x7], 0x4b
10000fecd:	jne	0x10000fed3
10000fecf:	mov	byte ptr [rbp - 0x7], 0x4b
10000fed3:	mov	dl, byte ptr [rbp - 0x4]
10000fed6:	cmp	dl, 0x50
10000fed9:	jne	0x10000fedf
10000fedb:	mov	byte ptr [rbp - 0x4], 0x50
10000fedf:	cmp	byte ptr [rbp - 0x3], 0x4b
10000fee3:	jne	0x10000fee9
10000fee5:	mov	byte ptr [rbp - 0x3], 0x4b
10000fee9:	xor	eax, eax
10000feeb:	cmp	cl, dl
10000feed:	jne	0x10000ff17
10000feef:	xor	eax, eax
10000fef1:	cmp	rax, 0x3
10000fef5:	je	0x10000ff12
10000fef7:	lea	rcx, [rax + 0x1]
10000fefb:	mov	dl, byte ptr [rbp + rax - 0x7]
10000feff:	cmp	dl, byte ptr [rbp + rax - 0x3]
10000ff03:	mov	rax, rcx
10000ff06:	je	0x10000fef1
10000ff08:	xor	eax, eax
10000ff0a:	cmp	ecx, 0x4
10000ff0d:	sete	al
10000ff10:	jmp	0x10000ff17
10000ff12:	mov	eax, 0x1
10000ff17:	pop	rbp
10000ff18:	ret
10000ff19:	push	rbp
10000ff1a:	mov	rbp, rsp
10000ff1d:	push	r14
10000ff1f:	push	rbx
10000ff20:	sub	rsp, 0x10
10000ff24:	mov	rbx, rdi
10000ff27:	movzx	eax, word ptr [rdi]
10000ff2a:	cmp	eax, 0x1f00
10000ff2f:	jb	0x10000ff85
10000ff31:	mov	ecx, eax
10000ff33:	shr	ecx, 0x8
10000ff36:	movzx	eax, al
10000ff39:	imul	r8d, eax, 0xcd
10000ff40:	shr	r8d, 0xb
10000ff44:	lea	edx, [r8 + r8]
10000ff48:	lea	edx, [rdx + 4*rdx]
10000ff4b:	sub	al, dl
10000ff4d:	movzx	r9d, al
10000ff51:	mov	dword ptr [rsp], ecx
10000ff54:	lea	r14, [rip + 0x19bd5]
10000ff5b:	lea	rcx, [rip + 0x128fb] ## literal pool for: "made by version %d.%d on system type %d: "
10000ff62:	mov	edx, 0x13f1
10000ff67:	mov	rdi, r14
10000ff6a:	mov	esi, 0x0
10000ff6f:	xor	eax, eax
10000ff71:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000ff76:	mov	rsi, qword ptr [rbx + 0x80]
10000ff7d:	mov	rdi, r14
10000ff80:	call	0x100003e67
10000ff85:	movzx	eax, word ptr [rbx + 0x2]
10000ff89:	cmp	rax, 0x14
10000ff8d:	ja	0x10000ff9a
10000ff8f:	mov	ecx, 0x100c00
10000ff94:	bt	rcx, rax
10000ff98:	jb	0x10000ffec
10000ff9a:	movzx	ecx, al
10000ff9d:	imul	r8d, ecx, 0xcd
10000ffa4:	shr	r8d, 0xb
10000ffa8:	lea	edx, [r8 + r8]
10000ffac:	lea	edx, [rdx + 4*rdx]
10000ffaf:	sub	cl, dl
10000ffb1:	movzx	r9d, cl
10000ffb5:	shr	eax, 0x8
10000ffb8:	mov	dword ptr [rsp], eax
10000ffbb:	lea	r14, [rip + 0x19b6e]
10000ffc2:	lea	rcx, [rip + 0x128be] ## literal pool for: "needs unzip %d.%d on system type %d: "
10000ffc9:	mov	edx, 0x13f1
10000ffce:	mov	rdi, r14
10000ffd1:	mov	esi, 0x0
10000ffd6:	xor	eax, eax
10000ffd8:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10000ffdd:	mov	rsi, qword ptr [rbx + 0x80]
10000ffe4:	mov	rdi, r14
10000ffe7:	call	0x100003e67
10000ffec:	lea	rax, [rip + 0x196bd]
10000fff3:	cmp	dword ptr [rax], 0x2
10000fff6:	movzx	r9d, word ptr [rbx + 0x4]
10000fffb:	jne	0x100010008
10000fffd:	movzx	r8d, word ptr [rbx + 0x3a]
100010002:	cmp	r9w, r8w
100010006:	jne	0x100010044
100010008:	test	r9d, 0xfff0
10001000f:	je	0x100010076
100010011:	mov	eax, r9d
100010014:	and	eax, 0xff0f
100010019:	cmp	eax, 0x800
10001001e:	je	0x100010076
100010020:	lea	rdi, [rip + 0x19b09]
100010027:	lea	rcx, [rip + 0x128a8] ## literal pool for: "undefined bits used in flags = 0x%04x: "
10001002e:	mov	edx, 0x13f1
100010033:	mov	esi, 0x0
100010038:	mov	r8d, r9d
10001003b:	xor	eax, eax
10001003d:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100010042:	jmp	0x100010063
100010044:	lea	rdi, [rip + 0x19ae5]
10001004b:	lea	rcx, [rip + 0x1285b] ## literal pool for: "local flags = 0x%04x, central = 0x%04x: "
100010052:	mov	edx, 0x13f1
100010057:	mov	esi, 0x0
10001005c:	xor	eax, eax
10001005e:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100010063:	mov	rsi, qword ptr [rbx + 0x80]
10001006a:	lea	rdi, [rip + 0x19abf]
100010071:	call	0x100003e67
100010076:	movzx	r8d, word ptr [rbx + 0x6]
10001007b:	cmp	r8d, 0x9
10001007f:	jb	0x1000100b2
100010081:	lea	r14, [rip + 0x19aa8]
100010088:	lea	rcx, [rip + 0x1286f] ## literal pool for: "unknown compression method %u: "
10001008f:	mov	edx, 0x13f1
100010094:	mov	rdi, r14
100010097:	mov	esi, 0x0
10001009c:	xor	eax, eax
10001009e:	call	0x100019770 ## symbol stub for: ___sprintf_chk
1000100a3:	mov	rsi, qword ptr [rbx + 0x80]
1000100aa:	mov	rdi, r14
1000100ad:	call	0x100003e67
1000100b2:	mov	r8, qword ptr [rbx + 0x30]
1000100b6:	test	r8, r8
1000100b9:	je	0x1000100ec
1000100bb:	lea	r14, [rip + 0x19a6e]
1000100c2:	lea	rcx, [rip + 0x12855] ## literal pool for: "starts on disk %lu: "
1000100c9:	mov	edx, 0x13f1
1000100ce:	mov	rdi, r14
1000100d1:	mov	esi, 0x0
1000100d6:	xor	eax, eax
1000100d8:	call	0x100019770 ## symbol stub for: ___sprintf_chk
1000100dd:	mov	rsi, qword ptr [rbx + 0x80]
1000100e4:	mov	rdi, r14
1000100e7:	call	0x100003e67
1000100ec:	movzx	r8d, word ptr [rbx + 0x38]
1000100f1:	cmp	r8d, 0x3
1000100f5:	jae	0x100010100
1000100f7:	add	rsp, 0x10
1000100fb:	pop	rbx
1000100fc:	pop	r14
1000100fe:	pop	rbp
1000100ff:	ret
100010100:	lea	r14, [rip + 0x19a29]
100010107:	lea	rcx, [rip + 0x12825] ## literal pool for: "unknown internal attributes = 0x%04x: "
10001010e:	mov	edx, 0x13f1
100010113:	mov	rdi, r14
100010116:	mov	esi, 0x0
10001011b:	xor	eax, eax
10001011d:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100010122:	mov	rsi, qword ptr [rbx + 0x80]
100010129:	mov	rdi, r14
10001012c:	add	rsp, 0x10
100010130:	pop	rbx
100010131:	pop	r14
100010133:	pop	rbp
100010134:	jmp	0x100003e67
100010139:	push	rbp
10001013a:	mov	rbp, rsp
10001013d:	push	r15
10001013f:	push	r14
100010141:	push	r13
100010143:	push	r12
100010145:	push	rbx
100010146:	push	rax
100010147:	mov	edx, esi
100010149:	mov	r13, rdi
10001014c:	lea	rax, [rip + 0x19569]
100010153:	mov	eax, dword ptr [rax]
100010155:	cmp	eax, 0x1
100010158:	je	0x100010181
10001015a:	test	eax, eax
10001015c:	jne	0x1000101ac
10001015e:	mov	edi, dword ptr [rip + 0x4ae80]
100010164:	mov	edx, edx
100010166:	mov	rsi, r13
100010169:	call	0x1000198b4 ## symbol stub for: _read
10001016e:	mov	r14, rax
100010171:	inc	eax
100010173:	cmp	eax, 0x2
100010176:	jae	0x1000102e2
10001017c:	jmp	0x100010325
100010181:	shr	edx
100010183:	lea	r15, [r13 + rdx]
100010188:	mov	edi, dword ptr [rip + 0x4ae56]
10001018e:	mov	rsi, r15
100010191:	call	0x1000198b4 ## symbol stub for: _read
100010196:	mov	r12, rax
100010199:	inc	eax
10001019b:	cmp	eax, 0x2
10001019e:	jae	0x100010256
1000101a4:	mov	r14d, r12d
1000101a7:	jmp	0x100010325
1000101ac:	mov	edi, dword ptr [rip + 0x4ae32]
1000101b2:	dec	edx
1000101b4:	mov	rsi, r13
1000101b7:	call	0x1000198b4 ## symbol stub for: _read
1000101bc:	mov	r14, rax
1000101bf:	inc	eax
1000101c1:	cmp	eax, 0x2
1000101c4:	jb	0x100010325
1000101ca:	mov	ecx, dword ptr [rip + 0x4ae10]
1000101d0:	cmp	ecx, -0x1
1000101d3:	jne	0x1000101ed
1000101d5:	mov	rdi, r13
1000101d8:	mov	esi, r14d
1000101db:	call	0x1000160cf
1000101e0:	xor	ecx, ecx
1000101e2:	test	eax, eax
1000101e4:	sete	cl
1000101e7:	mov	dword ptr [rip + 0x4adf3], ecx
1000101ed:	cmp	ecx, 0x1
1000101f0:	je	0x1000102e2
1000101f6:	mov	eax, r14d
1000101f9:	mov	byte ptr [r13 + rax], 0xa
1000101ff:	xor	ecx, ecx
100010201:	mov	rbx, r13
100010204:	mov	esi, r14d
100010207:	mov	al, byte ptr [r13 + rcx]
10001020c:	lea	rdx, [rbx + 0x1]
100010210:	mov	byte ptr [rbx], al
100010212:	cmp	al, 0xd
100010214:	jne	0x100010229
100010216:	xor	eax, eax
100010218:	cmp	byte ptr [r13 + rcx + 0x1], 0xa
10001021e:	sete	al
100010221:	cmovne	rbx, rdx
100010225:	sub	esi, eax
100010227:	jmp	0x10001022c
100010229:	mov	rbx, rdx
10001022c:	inc	rcx
10001022f:	cmp	r14d, ecx
100010232:	jne	0x100010207
100010234:	test	esi, esi
100010236:	je	0x1000102c6
10001023c:	mov	eax, esi
10001023e:	sub	rbx, rax
100010241:	lea	eax, [rsi - 0x1]
100010244:	cmp	byte ptr [rbx + rax], 0x1a
100010248:	cmove	esi, eax
10001024b:	mov	r13, rbx
10001024e:	mov	r14d, esi
100010251:	jmp	0x1000102e2
100010256:	mov	ecx, dword ptr [rip + 0x4ad84]
10001025c:	cmp	ecx, -0x1
10001025f:	jne	0x100010279
100010261:	mov	rdi, r15
100010264:	mov	esi, r12d
100010267:	call	0x1000160cf
10001026c:	xor	ecx, ecx
10001026e:	test	eax, eax
100010270:	sete	cl
100010273:	mov	dword ptr [rip + 0x4ad67], ecx
100010279:	cmp	ecx, 0x1
10001027c:	jne	0x100010291
10001027e:	mov	edx, r12d
100010281:	mov	rdi, r13
100010284:	mov	rsi, r15
100010287:	call	0x10001984e ## symbol stub for: _memcpy
10001028c:	mov	r14d, r12d
10001028f:	jmp	0x1000102e2
100010291:	xor	eax, eax
100010293:	mov	r14d, r12d
100010296:	mov	cl, byte ptr [r15 + rax]
10001029a:	mov	byte ptr [r13], cl
10001029e:	cmp	cl, 0xa
1000102a1:	jne	0x1000102b3
1000102a3:	mov	word ptr [r13], 0xa0d
1000102aa:	add	r13, 0x2
1000102ae:	inc	r14d
1000102b1:	jmp	0x1000102b6
1000102b3:	inc	r13
1000102b6:	inc	rax
1000102b9:	cmp	r12d, eax
1000102bc:	jne	0x100010296
1000102be:	mov	eax, r14d
1000102c1:	sub	r13, rax
1000102c4:	jmp	0x1000102e2
1000102c6:	mov	edi, dword ptr [rip + 0x4ad18]
1000102cc:	mov	edx, 0x1
1000102d1:	mov	rsi, rbx
1000102d4:	call	0x1000198b4 ## symbol stub for: _read
1000102d9:	mov	r14d, 0x1
1000102df:	mov	r13, rbx
1000102e2:	mov	rdi, qword ptr [rip + 0x4ad07]
1000102e9:	mov	ebx, r14d
1000102ec:	mov	rsi, r13
1000102ef:	mov	rdx, rbx
1000102f2:	call	0x100017566
1000102f7:	mov	qword ptr [rip + 0x4acf2], rax
1000102fe:	mov	rax, qword ptr [rip + 0x4ace3]
100010305:	add	rbx, rax
100010308:	mov	qword ptr [rip + 0x4acd9], rbx
10001030f:	cmp	rbx, rax
100010312:	jge	0x100010325
100010314:	lea	rsi, [rip + 0x13006] ## literal pool for: "overflow in byte count"
10001031b:	mov	edi, 0x6
100010320:	call	0x1000037b0
100010325:	mov	eax, r14d
100010328:	add	rsp, 0x8
10001032c:	pop	rbx
10001032d:	pop	r12
10001032f:	pop	r13
100010331:	pop	r14
100010333:	pop	r15
100010335:	pop	rbp
100010336:	ret
100010337:	push	rbp
100010338:	mov	rbp, rsp
10001033b:	push	rbx
10001033c:	push	rax
10001033d:	mov	rbx, rdi
100010340:	call	0x100019818 ## symbol stub for: _ftello
100010345:	mov	rdi, rbx
100010348:	mov	rsi, rax
10001034b:	xor	edx, edx
10001034d:	call	0x10001980c ## symbol stub for: _fseeko
100010352:	xor	ecx, ecx
100010354:	test	eax, eax
100010356:	sete	cl
100010359:	mov	eax, ecx
10001035b:	add	rsp, 0x8
10001035f:	pop	rbx
100010360:	pop	rbp
100010361:	ret
100010362:	push	rbp
100010363:	mov	rbp, rsp
100010366:	test	rdi, rdi
100010369:	je	0x10001038f
10001036b:	mov	rax, rdi
10001036e:	sub	rax, rsi
100010371:	imul	rax, rax, 0xc8
100010378:	cqo
10001037a:	idiv	rdi
10001037d:	lea	rcx, [rax + 0x1]
100010381:	shr	rcx, 0x3f
100010385:	lea	rax, [rax + rcx + 0x1]
10001038a:	shr	rax
10001038d:	jmp	0x100010391
10001038f:	xor	eax, eax
100010391:	pop	rbp
100010392:	ret
100010393:	push	rbp
100010394:	mov	rbp, rsp
100010397:	push	r15
100010399:	push	r14
10001039b:	push	r13
10001039d:	push	r12
10001039f:	push	rbx
1000103a0:	sub	rsp, 0x78
1000103a4:	mov	r15, rdi
1000103a7:	lea	r14, [rbp - 0x68]
1000103ab:	mov	qword ptr [r14], 0x0
1000103b2:	lea	r12, [rbp - 0x40]
1000103b6:	mov	qword ptr [r12], -0x3
1000103be:	mov	rbx, qword ptr [rdi + 0x70]
1000103c2:	mov	rdi, rbx
1000103c5:	call	0x100019920 ## symbol stub for: _strlen
1000103ca:	mov	word ptr [r15 + 0x28], ax
1000103cf:	movzx	eax, ax
1000103d2:	xor	r13d, r13d
1000103d5:	cmp	byte ptr [rax + rbx - 0x1], 0x2f
1000103da:	sete	bl
1000103dd:	mov	dword ptr [rip + 0x4abf9], 0xffffffff
1000103e7:	mov	rdi, qword ptr [r15 + 0x50]
1000103eb:	lea	rcx, [rbp - 0x98]
1000103f2:	mov	rsi, r14
1000103f5:	mov	rdx, r12
1000103f8:	call	0x10001702d
1000103fd:	mov	r12d, 0x12
100010403:	test	rax, rax
100010406:	je	0x100011019
10001040c:	mov	rdx, qword ptr [rbp - 0x40]
100010410:	cmp	rdx, -0x3
100010414:	je	0x100011019
10001041a:	cmp	rdx, -0x2
10001041e:	jne	0x100010432
100010420:	mov	qword ptr [rbp - 0x40], 0x0
100010428:	mov	r13d, 0x1
10001042e:	xor	edx, edx
100010430:	jmp	0x10001044d
100010432:	mov	r13b, bl
100010435:	mov	ecx, dword ptr [rbp - 0x68]
100010438:	shr	ecx, 0x4
10001043b:	and	ecx, 0x1
10001043e:	mov	r12d, 0xffffffff
100010444:	cmp	ecx, r13d
100010447:	jne	0x100011019
10001044d:	mov	qword ptr [rbp - 0x58], rax
100010451:	lea	rcx, [rip + 0x192b8]
100010458:	cmp	dword ptr [rcx], 0x0
10001045b:	jne	0x10001046b
10001045d:	lea	rcx, [rip + 0x1929c]
100010464:	mov	qword ptr [rcx], -0x1
10001046b:	xor	ebx, ebx
10001046d:	cmp	rdx, -0x3
100010471:	cmovbe	rbx, rdx
100010475:	lea	rax, [rip + 0x18fe0]
10001047c:	cmp	dword ptr [rax], 0x0
10001047f:	lea	r14, [rip + 0x19292]
100010486:	mov	eax, dword ptr [r14]
100010489:	je	0x1000104e5
10001048b:	test	eax, eax
10001048d:	je	0x1000104e5
10001048f:	mov	r12, r15
100010492:	lea	r15, [rip + 0x1aa97]
100010499:	mov	rcx, qword ptr [r15]
10001049c:	lea	rdi, [rip + 0xcd4d] ## literal pool for: " ("
1000104a3:	mov	esi, 0x2
1000104a8:	mov	edx, 0x1
1000104ad:	call	0x10001981e ## symbol stub for: _fwrite
1000104b2:	mov	rdi, qword ptr [r15]
1000104b5:	mov	rsi, rbx
1000104b8:	call	0x10001631e
1000104bd:	mov	rsi, qword ptr [r15]
1000104c0:	mov	edi, 0x29
1000104c5:	call	0x1000197f4 ## symbol stub for: _fputc
1000104ca:	lea	rax, [rip + 0x193fb]
1000104d1:	mov	dword ptr [rax], 0x1
1000104d7:	mov	rdi, qword ptr [r15]
1000104da:	mov	r15, r12
1000104dd:	call	0x1000197d6 ## symbol stub for: _fflush
1000104e2:	mov	eax, dword ptr [r14]
1000104e5:	lea	rcx, [rip + 0x1926c]
1000104ec:	cmp	dword ptr [rcx], 0x0
1000104ef:	je	0x100010542
1000104f1:	test	eax, eax
1000104f3:	je	0x100010542
1000104f5:	lea	r14, [rip + 0x19264]
1000104fc:	mov	rcx, qword ptr [r14]
1000104ff:	lea	rdi, [rip + 0xccea] ## literal pool for: " ("
100010506:	mov	esi, 0x2
10001050b:	mov	edx, 0x1
100010510:	call	0x10001981e ## symbol stub for: _fwrite
100010515:	mov	rdi, qword ptr [r14]
100010518:	mov	rsi, rbx
10001051b:	call	0x10001631e
100010520:	mov	rsi, qword ptr [r14]
100010523:	mov	edi, 0x29
100010528:	call	0x1000197f4 ## symbol stub for: _fputc
10001052d:	lea	rax, [rip + 0x1939c]
100010534:	mov	dword ptr [rax], 0x1
10001053a:	mov	rdi, qword ptr [r14]
10001053d:	call	0x1000197d6 ## symbol stub for: _fflush
100010542:	mov	qword ptr [r15 + 0x20], rbx
100010546:	mov	word ptr [r15 + 0x38], 0xffff
10001054d:	mov	qword ptr [r15 + 0x48], 0x0
100010555:	lea	rax, [rip + 0x18f04]
10001055c:	cmp	dword ptr [rax], 0x2
10001055f:	jne	0x1000105ab
100010561:	movzx	ebx, word ptr [r15 + 0x2a]
100010566:	test	rbx, rbx
100010569:	je	0x1000105bc
10001056b:	mov	rdi, rbx
10001056e:	call	0x100019848 ## symbol stub for: _malloc
100010573:	mov	r14, rax
100010576:	test	rax, rax
100010579:	jne	0x100010591
10001057b:	lea	rsi, [rip + 0x12b74] ## literal pool for: "extra fields copy"
100010582:	mov	edi, 0x4
100010587:	call	0x1000037b0
10001058c:	movzx	ebx, word ptr [r15 + 0x2a]
100010591:	mov	rsi, qword ptr [r15 + 0x58]
100010595:	mov	rdi, r14
100010598:	mov	rdx, rbx
10001059b:	call	0x10001984e ## symbol stub for: _memcpy
1000105a0:	movzx	eax, word ptr [r15 + 0x2a]
1000105a5:	mov	qword ptr [rbp - 0x60], rax
1000105a9:	jmp	0x1000105c5
1000105ab:	xor	eax, eax
1000105ad:	mov	qword ptr [rbp - 0x60], rax
1000105b1:	xor	eax, eax
1000105b3:	mov	qword ptr [rbp - 0x50], rax
1000105b7:	xor	r14d, r14d
1000105ba:	jmp	0x100010615
1000105bc:	xor	eax, eax
1000105be:	mov	qword ptr [rbp - 0x60], rax
1000105c2:	xor	r14d, r14d
1000105c5:	movzx	ebx, word ptr [r15 + 0x2c]
1000105ca:	test	rbx, rbx
1000105cd:	je	0x10001060f
1000105cf:	mov	rdi, rbx
1000105d2:	call	0x100019848 ## symbol stub for: _malloc
1000105d7:	mov	r12, rax
1000105da:	test	rax, rax
1000105dd:	jne	0x1000105f5
1000105df:	lea	rsi, [rip + 0x12b10] ## literal pool for: "extra fields copy"
1000105e6:	mov	edi, 0x4
1000105eb:	call	0x1000037b0
1000105f0:	movzx	ebx, word ptr [r15 + 0x2c]
1000105f5:	mov	rsi, qword ptr [r15 + 0x60]
1000105f9:	mov	rdi, r12
1000105fc:	mov	rdx, rbx
1000105ff:	call	0x10001984e ## symbol stub for: _memcpy
100010604:	movzx	eax, word ptr [r15 + 0x2c]
100010609:	mov	qword ptr [rbp - 0x50], rax
10001060d:	jmp	0x100010618
10001060f:	xor	eax, eax
100010611:	mov	qword ptr [rbp - 0x50], rax
100010615:	xor	r12d, r12d
100010618:	cmp	word ptr [r15 + 0x2a], 0x0
10001061e:	je	0x100010629
100010620:	mov	rdi, qword ptr [r15 + 0x58]
100010624:	call	0x100019806 ## symbol stub for: _free
100010629:	mov	qword ptr [rbp - 0x70], r12
10001062d:	mov	qword ptr [rbp - 0x78], r14
100010631:	cmp	word ptr [r15 + 0x2c], 0x0
100010637:	je	0x100010648
100010639:	mov	rdi, qword ptr [r15 + 0x60]
10001063d:	cmp	qword ptr [r15 + 0x58], rdi
100010641:	je	0x100010648
100010643:	call	0x100019806 ## symbol stub for: _free
100010648:	mov	dword ptr [r15 + 0x2a], 0x0
100010650:	xor	r14d, r14d
100010653:	mov	qword ptr [r15 + 0x58], r14
100010657:	mov	qword ptr [r15 + 0x60], r14
10001065b:	lea	rax, [rip + 0x4a93e]
100010662:	mov	qword ptr [rax], r14
100010665:	lea	rax, [rip + 0x18e04]
10001066c:	mov	rcx, r15
10001066f:	mov	r15, qword ptr [rax]
100010672:	mov	qword ptr [rbp - 0x48], rcx
100010676:	mov	r12, qword ptr [rcx + 0x50]
10001067a:	test	r15, r15
10001067d:	mov	dword ptr [rbp - 0x30], r13d
100010681:	je	0x1000106fe
100010683:	mov	rdi, r12
100010686:	call	0x100019920 ## symbol stub for: _strlen
10001068b:	mov	r13, rax
10001068e:	mov	rdi, r15
100010691:	call	0x100019920 ## symbol stub for: _strlen
100010696:	lea	rax, [r15 + rax - 0x1]
10001069b:	cmp	rax, r15
10001069e:	jae	0x1000106a6
1000106a0:	mov	r13d, dword ptr [rbp - 0x30]
1000106a4:	jmp	0x100010708
1000106a6:	add	r13, r12
1000106a9:	mov	edx, 0x1
1000106ae:	mov	rdi, r13
1000106b1:	mov	cl, byte ptr [rax]
1000106b3:	mov	ebx, ecx
1000106b5:	and	bl, -0x2
1000106b8:	cmp	bl, 0x3a
1000106bb:	jne	0x1000106d3
1000106bd:	test	edx, edx
1000106bf:	jne	0x1000106a0
1000106c1:	dec	rax
1000106c4:	mov	rdi, r13
1000106c7:	mov	edx, 0x1
1000106cc:	cmp	rax, r15
1000106cf:	jae	0x1000106b1
1000106d1:	jmp	0x1000106a0
1000106d3:	dec	rdi
1000106d6:	xor	esi, esi
1000106d8:	cmp	rdi, r12
1000106db:	jb	0x1000106e7
1000106dd:	test	edx, edx
1000106df:	je	0x1000106e7
1000106e1:	cmp	cl, byte ptr [rdi]
1000106e3:	sete	sil
1000106e7:	movzx	edx, sil
1000106eb:	dec	rax
1000106ee:	cmp	rax, r15
1000106f1:	jae	0x1000106b1
1000106f3:	xor	r14d, r14d
1000106f6:	test	edx, edx
1000106f8:	mov	r13d, dword ptr [rbp - 0x30]
1000106fc:	jne	0x100010708
1000106fe:	lea	rax, [rip + 0x18d47]
100010705:	mov	r14d, dword ptr [rax]
100010708:	mov	dword ptr [rbp - 0x2c], r14d
10001070c:	lea	rsi, [rip + 0xbdef] ## literal pool for: "-"
100010713:	mov	rdi, r12
100010716:	call	0x10001990e ## symbol stub for: _strcmp
10001071b:	test	eax, eax
10001071d:	je	0x100010769
10001071f:	lea	rbx, [rip + 0x18d3a]
100010726:	cmp	dword ptr [rbx], 0x0
100010729:	mov	r15, qword ptr [rbp - 0x48]
10001072d:	mov	r14, qword ptr [rbp - 0x58]
100010731:	je	0x100010742
100010733:	lea	rsi, [rbp - 0x98]
10001073a:	mov	rdi, r15
10001073d:	call	0x1000173cf
100010742:	mov	rdi, qword ptr [rbp - 0x68]
100010746:	call	0x100012121
10001074b:	test	eax, eax
10001074d:	je	0x10001078b
10001074f:	mov	dword ptr [rip + 0x4a88b], 0xffffffff
100010759:	mov	dword ptr [rbp - 0x2c], 0x0
100010760:	mov	dword ptr [rbp - 0x34], 0x1
100010767:	jmp	0x1000107d0
100010769:	mov	dword ptr [rip + 0x4a871], 0x0
100010773:	mov	dword ptr [rbp - 0x34], 0x0
10001077a:	mov	r15, qword ptr [rbp - 0x48]
10001077e:	mov	r14, qword ptr [rbp - 0x58]
100010782:	lea	rbx, [rip + 0x18cd7]
100010789:	jmp	0x1000107d0
10001078b:	mov	dword ptr [rbp - 0x34], eax
10001078e:	test	r13d, r13d
100010791:	je	0x1000107ae
100010793:	mov	dword ptr [rip + 0x4a847], 0xffffffff
10001079d:	mov	dword ptr [rbp - 0x2c], 0x0
1000107a4:	mov	qword ptr [rbp - 0x40], 0x0
1000107ac:	jmp	0x1000107d0
1000107ae:	mov	rdi, qword ptr [r15 + 0x50]
1000107b2:	xor	esi, esi
1000107b4:	xor	eax, eax
1000107b6:	call	0x10001986c ## symbol stub for: _open
1000107bb:	mov	dword ptr [rip + 0x4a823], eax
1000107c1:	mov	r12d, 0x12
1000107c7:	cmp	eax, -0x1
1000107ca:	je	0x100011019
1000107d0:	mov	qword ptr [r15 + 0x8], r14
1000107d4:	cmp	dword ptr [rbx], 0x2
1000107d7:	jne	0x10001086e
1000107dd:	movzx	r12d, word ptr [rbp - 0x60]
1000107e2:	mov	rdx, qword ptr [r15 + 0x58]
1000107e6:	movzx	ecx, word ptr [r15 + 0x2a]
1000107eb:	lea	r14, [rbp - 0x7c]
1000107ef:	mov	r13, qword ptr [rbp - 0x78]
1000107f3:	mov	rdi, r13
1000107f6:	mov	esi, r12d
1000107f9:	mov	r8, r14
1000107fc:	call	0x10000a7dd
100010801:	mov	rbx, rax
100010804:	mov	rdi, qword ptr [r15 + 0x58]
100010808:	call	0x100019806 ## symbol stub for: _free
10001080d:	movzx	eax, word ptr [r14]
100010811:	mov	word ptr [r15 + 0x2a], ax
100010816:	mov	qword ptr [r15 + 0x58], rbx
10001081a:	movzx	esi, word ptr [rbp - 0x50]
10001081e:	mov	rdx, qword ptr [r15 + 0x60]
100010822:	movzx	ecx, word ptr [r15 + 0x2c]
100010827:	mov	rdi, qword ptr [rbp - 0x70]
10001082b:	mov	r8, r14
10001082e:	call	0x10000a7dd
100010833:	mov	rbx, rax
100010836:	mov	rdi, qword ptr [r15 + 0x60]
10001083a:	call	0x100019806 ## symbol stub for: _free
10001083f:	movzx	eax, word ptr [r14]
100010843:	mov	word ptr [r15 + 0x2c], ax
100010848:	mov	qword ptr [r15 + 0x60], rbx
10001084c:	test	r12w, r12w
100010850:	je	0x10001085a
100010852:	mov	rdi, r13
100010855:	call	0x100019806 ## symbol stub for: _free
10001085a:	cmp	word ptr [rbp - 0x50], 0x0
10001085f:	je	0x10001086a
100010861:	mov	rdi, qword ptr [rbp - 0x70]
100010865:	call	0x100019806 ## symbol stub for: _free
10001086a:	mov	r13d, dword ptr [rbp - 0x30]
10001086e:	mov	rax, qword ptr [rbp - 0x40]
100010872:	test	rax, rax
100010875:	je	0x10001088d
100010877:	mov	edx, dword ptr [rbp - 0x2c]
10001087a:	cmp	edx, -0x1
10001087d:	jne	0x100010896
10001087f:	mov	dword ptr [rbp - 0x2c], 0x8
100010886:	mov	edx, 0x8
10001088b:	jmp	0x100010896
10001088d:	mov	dword ptr [rbp - 0x2c], 0x0
100010894:	xor	edx, edx
100010896:	lea	rcx, [rip + 0x18e0b]
10001089d:	mov	ecx, dword ptr [rcx]
10001089f:	test	ecx, ecx
1000108a1:	mov	edi, 0x31e
1000108a6:	mov	esi, 0x14
1000108ab:	cmovne	edi, esi
1000108ae:	test	edx, edx
1000108b0:	mov	ebx, 0xa
1000108b5:	cmovne	ebx, esi
1000108b8:	xor	esi, esi
1000108ba:	test	r13d, r13d
1000108bd:	sete	sil
1000108c1:	shl	esi, 0x3
1000108c4:	mov	word ptr [r15], di
1000108c8:	mov	word ptr [r15 + 0x2], bx
1000108cd:	mov	qword ptr [r15 + 0x10], 0x0
1000108d5:	mov	word ptr [r15 + 0x4], si
1000108da:	lea	r14, [rip + 0x18ec7]
1000108e1:	test	r13d, r13d
1000108e4:	jne	0x100010903
1000108e6:	cmp	qword ptr [r14], 0x0
1000108ea:	je	0x100010903
1000108ec:	movzx	esi, si
1000108ef:	or	esi, 0x1
1000108f2:	mov	word ptr [r15 + 0x4], si
1000108f7:	mov	rdi, qword ptr [r15 + 0x8]
1000108fb:	shl	rdi, 0x10
1000108ff:	mov	qword ptr [r15 + 0x10], rdi
100010903:	lea	rbx, [r15 + 0x38]
100010907:	xor	edi, edi
100010909:	test	edx, edx
10001090b:	mov	word ptr [r15 + 0x3a], si
100010910:	mov	esi, 0x0
100010915:	cmove	rsi, rax
100010919:	mov	word ptr [r15 + 0x6], dx
10001091e:	test	rax, rax
100010921:	cmovs	rsi, rdi
100010925:	mov	qword ptr [r15 + 0x18], rsi
100010929:	cmp	rax, -0x1
10001092d:	cmovne	rdi, rax
100010931:	mov	qword ptr [r15 + 0x20], rdi
100010935:	mov	r13b, 0x1
100010938:	cmp	word ptr [r15 + 0x38], -0x1
10001093e:	jne	0x100010948
100010940:	mov	word ptr [rbx], 0x0
100010945:	xor	r13d, r13d
100010948:	mov	rdx, qword ptr [rbp - 0x68]
10001094c:	test	ecx, ecx
10001094e:	je	0x100010955
100010950:	movzx	eax, dl
100010953:	jmp	0x100010961
100010955:	movzx	eax, byte ptr [r15 + 0x49]
10001095a:	shl	rax, 0x8
10001095e:	or	rax, rdx
100010961:	mov	qword ptr [r15 + 0x48], rax
100010965:	mov	rdi, r15
100010968:	xor	esi, esi
10001096a:	call	0x10000dc54
10001096f:	test	eax, eax
100010971:	je	0x10001098f
100010973:	mov	r12d, eax
100010976:	mov	edi, dword ptr [rip + 0x4a668]
10001097c:	cmp	edi, -0x1
10001097f:	je	0x100011019
100010985:	call	0x1000197ac ## symbol stub for: _close
10001098a:	jmp	0x100011019
10001098f:	mov	qword ptr [rbp - 0x58], rbx
100010993:	movzx	eax, word ptr [r15 + 0x28]
100010998:	movzx	ecx, word ptr [r15 + 0x2a]
10001099d:	add	rcx, rax
1000109a0:	lea	rax, [rip + 0x18ee9]
1000109a7:	mov	rax, qword ptr [rax]
1000109aa:	mov	qword ptr [r15 + 0x40], rax
1000109ae:	lea	rax, [rip + 0x18e93]
1000109b5:	mov	rax, qword ptr [rax]
1000109b8:	mov	qword ptr [r15 + 0x30], rax
1000109bc:	lea	r12, [rip + 0x1a575]
1000109c3:	mov	rax, qword ptr [r12]
1000109c7:	lea	rax, [rax + rcx + 0x1e]
1000109cc:	mov	qword ptr [r12], rax
1000109d0:	cmp	dword ptr [rbp - 0x30], 0x0
1000109d4:	jne	0x1000109f1
1000109d6:	mov	rdi, qword ptr [r14]
1000109d9:	test	rdi, rdi
1000109dc:	je	0x1000109f1
1000109de:	mov	rsi, qword ptr [r15 + 0x10]
1000109e2:	call	0x10001673b
1000109e7:	add	qword ptr [r15 + 0x18], 0xc
1000109ec:	add	qword ptr [r12], 0xc
1000109f1:	lea	r14, [rip + 0x18e00]
1000109f8:	mov	rbx, qword ptr [r14]
1000109fb:	mov	rdi, rbx
1000109fe:	call	0x1000197d0 ## symbol stub for: _ferror
100010a03:	test	eax, eax
100010a05:	je	0x100010a2b
100010a07:	mov	edi, dword ptr [rip + 0x4a5d7]
100010a0d:	cmp	edi, -0x1
100010a10:	je	0x100010a17
100010a12:	call	0x1000197ac ## symbol stub for: _close
100010a17:	lea	rsi, [rip + 0x126ea] ## literal pool for: "unexpected error on zip file"
100010a1e:	mov	edi, 0xe
100010a23:	call	0x1000037b0
100010a28:	mov	rbx, qword ptr [r14]
100010a2b:	mov	rdi, rbx
100010a2e:	call	0x100019818 ## symbol stub for: _ftello
100010a33:	mov	rcx, r14
100010a36:	mov	r14, rax
100010a39:	mov	rbx, qword ptr [rcx]
100010a3c:	mov	rdi, rbx
100010a3f:	call	0x1000197d0 ## symbol stub for: _ferror
100010a44:	test	eax, eax
100010a46:	je	0x100010a50
100010a48:	mov	rdi, rbx
100010a4b:	call	0x1000197a6 ## symbol stub for: _clearerr
100010a50:	cmp	r14, -0x2
100010a54:	jg	0x100010aa9
100010a56:	lea	rax, [rip + 0x1a4d3]
100010a5d:	mov	r12, qword ptr [rax]
100010a60:	xor	edi, edi
100010a62:	xor	esi, esi
100010a64:	xor	edx, edx
100010a66:	call	0x100016116
100010a6b:	mov	rbx, rax
100010a6e:	mov	rdi, r14
100010a71:	xor	esi, esi
100010a73:	xor	edx, edx
100010a75:	call	0x100016116
100010a7a:	lea	rsi, [rip + 0x126a4] ## literal pool for: "last %s o %s\n"
100010a81:	mov	rdi, r12
100010a84:	lea	r12, [rip + 0x1a4ad]
100010a8b:	mov	rdx, rbx
100010a8e:	mov	rcx, rax
100010a91:	xor	eax, eax
100010a93:	call	0x1000197ee ## symbol stub for: _fprintf
100010a98:	lea	rsi, [rip + 0x12694] ## literal pool for: "seek wrap - zip file too big to write"
100010a9f:	mov	edi, 0x6
100010aa4:	call	0x1000037b0
100010aa9:	lea	rbx, [r15 + 0x4]
100010aad:	xor	eax, eax
100010aaf:	mov	qword ptr [rip + 0x4a532], rax
100010ab6:	xor	r14d, r14d
100010ab9:	mov	qword ptr [rip + 0x4a530], rax
100010ac0:	cmp	dword ptr [rbp - 0x30], 0x0
100010ac4:	mov	qword ptr [rbp - 0x48], rbx
100010ac8:	jne	0x100010d49
100010ace:	cmp	dword ptr [rbp - 0x2c], 0x0
100010ad2:	je	0x100010b72
100010ad8:	test	r13b, r13b
100010adb:	mov	rbx, qword ptr [rbp - 0x58]
100010adf:	jne	0x100010ae6
100010ae1:	mov	word ptr [rbx], 0xffff
100010ae6:	lea	rax, [rip - 0x9b4]
100010aed:	mov	qword ptr [rip + 0x1871c], rax
100010af4:	lea	rdi, [rip + 0x4a505]
100010afb:	mov	esi, 0x400
100010b00:	mov	edx, 0x1
100010b05:	call	0x10001929e
100010b0a:	lea	rsi, [rbp - 0x2c]
100010b0e:	mov	rdi, rbx
100010b11:	call	0x10001810e
100010b16:	lea	rax, [rip + 0x18933]
100010b1d:	mov	edi, dword ptr [rax]
100010b1f:	mov	rsi, qword ptr [rbp - 0x48]
100010b23:	call	0x100017680
100010b28:	call	0x100017bad
100010b2d:	cmp	word ptr [rbx], 0x0
100010b31:	mov	r14, rax
100010b34:	sete	dl
100010b37:	lea	rax, [rip + 0x18b7e]
100010b3e:	mov	eax, dword ptr [rax]
100010b40:	test	eax, eax
100010b42:	setne	cl
100010b45:	and	cl, dl
100010b47:	cmp	cl, 0x1
100010b4a:	jne	0x100010be6
100010b50:	cmp	dword ptr [rip + 0x4a489], 0x0
100010b57:	je	0x100010be6
100010b5d:	cmp	eax, 0x1
100010b60:	jne	0x100010c03
100010b66:	lea	rdi, [rip + 0x125ec] ## literal pool for: "has binary so -l ignored"
100010b6d:	jmp	0x100010d3d
100010b72:	mov	edi, 0x4000
100010b77:	call	0x100019848 ## symbol stub for: _malloc
100010b7c:	test	rax, rax
100010b7f:	je	0x100010c0f
100010b85:	mov	r13, rax
100010b88:	cmp	dword ptr [rbp - 0x34], 0x0
100010b8c:	je	0x100010c1a
100010b92:	mov	rdi, qword ptr [r15 + 0x50]
100010b96:	mov	edx, 0x4000
100010b9b:	mov	rsi, r13
100010b9e:	call	0x1000198c0 ## symbol stub for: _readlink
100010ba3:	mov	r12, rax
100010ba6:	mov	rdi, qword ptr [rip + 0x4a443]
100010bad:	mov	rsi, r13
100010bb0:	mov	rdx, rax
100010bb3:	call	0x100017566
100010bb8:	mov	qword ptr [rip + 0x4a431], rax
100010bbf:	mov	esi, 0x1
100010bc4:	mov	rdi, r13
100010bc7:	mov	rdx, r12
100010bca:	call	0x1000168c3
100010bcf:	mov	eax, eax
100010bd1:	cmp	r12, rax
100010bd4:	jne	0x1000111e6
100010bda:	mov	qword ptr [rip + 0x4a407], r12
100010be1:	jmp	0x10001118c
100010be6:	test	cl, cl
100010be8:	je	0x100010d49
100010bee:	cmp	eax, 0x1
100010bf1:	jne	0x100010d36
100010bf7:	lea	rdi, [rip + 0x1258e] ## literal pool for: "-l used on binary file - corrupted?"
100010bfe:	jmp	0x100010d3d
100010c03:	lea	rdi, [rip + 0x12568] ## literal pool for: "has binary so -ll ignored"
100010c0a:	jmp	0x100010d3d
100010c0f:	mov	r12d, 0x4
100010c15:	jmp	0x100011019
100010c1a:	mov	rdi, r13
100010c1d:	mov	esi, 0x4000
100010c22:	call	0x100010139
100010c27:	test	eax, eax
100010c29:	je	0x100011189
100010c2f:	mov	ebx, eax
100010c31:	lea	r14, [rip + 0x18ac8]
100010c38:	xor	r12d, r12d
100010c3b:	mov	edx, ebx
100010c3d:	mov	esi, 0x1
100010c42:	mov	rdi, r13
100010c45:	call	0x1000168c3
100010c4a:	cmp	eax, ebx
100010c4c:	jne	0x1000111d6
100010c52:	lea	rax, [rip + 0x18ab7]
100010c59:	cmp	dword ptr [rax], 0x0
100010c5c:	jne	0x100010d1a
100010c62:	lea	rax, [rip + 0x18a8f]
100010c69:	mov	rax, qword ptr [rax]
100010c6c:	test	rax, rax
100010c6f:	jle	0x100010cd0
100010c71:	lea	rcx, [rip + 0x187e4]
100010c78:	cmp	dword ptr [rcx], 0x0
100010c7b:	mov	rdx, qword ptr [r14]
100010c7e:	je	0x100010cb5
100010c80:	cmp	rdx, -0x1
100010c84:	jne	0x100010cb5
100010c86:	lea	rbx, [rip + 0x1a2a3]
100010c8d:	mov	rsi, qword ptr [rbx]
100010c90:	mov	edi, 0x20
100010c95:	call	0x100019896 ## symbol stub for: _putc
100010c9a:	mov	rdi, qword ptr [rbx]
100010c9d:	call	0x1000197d6 ## symbol stub for: _fflush
100010ca2:	mov	rdx, qword ptr [r14]
100010ca5:	inc	rdx
100010ca8:	mov	qword ptr [r14], rdx
100010cab:	lea	rax, [rip + 0x18a46]
100010cb2:	mov	rax, qword ptr [rax]
100010cb5:	lea	rcx, [rdx + 0x1]
100010cb9:	shl	rdx, 0xe
100010cbd:	add	rdx, 0x8000
100010cc4:	cmp	rax, rdx
100010cc7:	cmovle	rcx, r12
100010ccb:	mov	qword ptr [r14], rcx
100010cce:	jmp	0x100010cd3
100010cd0:	mov	rcx, qword ptr [r14]
100010cd3:	lea	rdx, [rip + 0x18782]
100010cda:	mov	edx, dword ptr [rdx]
100010cdc:	lea	rsi, [rip + 0x189c9]
100010ce3:	or	edx, dword ptr [rsi]
100010ce5:	je	0x100010d1a
100010ce7:	test	rax, rax
100010cea:	je	0x100010d1a
100010cec:	test	rcx, rcx
100010cef:	jne	0x100010d1a
100010cf1:	lea	rbx, [rip + 0x1a238]
100010cf8:	mov	rsi, qword ptr [rbx]
100010cfb:	mov	edi, 0x2e
100010d00:	call	0x100019896 ## symbol stub for: _putc
100010d05:	mov	rdi, qword ptr [rbx]
100010d08:	call	0x1000197d6 ## symbol stub for: _fflush
100010d0d:	lea	rax, [rip + 0x18bb8]
100010d14:	mov	dword ptr [rax], 0x1
100010d1a:	mov	rdi, r13
100010d1d:	mov	esi, 0x4000
100010d22:	call	0x100010139
100010d27:	mov	ebx, eax
100010d29:	test	eax, eax
100010d2b:	jne	0x100010c3b
100010d31:	jmp	0x10001118c
100010d36:	lea	rdi, [rip + 0x12473] ## literal pool for: "-ll used on binary file - corrupted?"
100010d3d:	lea	rsi, [rip + 0x9a73] ## literal pool for: ""
100010d44:	call	0x100003e67
100010d49:	mov	edi, dword ptr [rip + 0x4a295]
100010d4f:	mov	ebx, dword ptr [rbp - 0x30]
100010d52:	cmp	edi, -0x1
100010d55:	je	0x100010d5c
100010d57:	call	0x1000197ac ## symbol stub for: _close
100010d5c:	add	qword ptr [r12], r14
100010d60:	lea	rax, [rip + 0x18955]
100010d67:	cmp	dword ptr [rax], 0x0
100010d6a:	jne	0x100010d8f
100010d6c:	mov	rax, qword ptr [rbp - 0x40]
100010d70:	cmp	rax, -0x1
100010d74:	je	0x100010d8f
100010d76:	cmp	qword ptr [rip + 0x4a26b], rax
100010d7d:	je	0x100010d8f
100010d7f:	mov	rsi, qword ptr [r15 + 0x50]
100010d83:	lea	rdi, [rip + 0x12486] ## literal pool for: " file size changed while zipping "
100010d8a:	call	0x100003e67
100010d8f:	lea	rax, [r15 + 0x18]
100010d93:	test	ebx, ebx
100010d95:	je	0x100010e95
100010d9b:	mov	word ptr [r15 + 0x6], 0x0
100010da2:	xor	ecx, ecx
100010da4:	mov	qword ptr [rax + 0x8], rcx
100010da8:	mov	qword ptr [rax], rcx
100010dab:	mov	word ptr [r15 + 0x2], 0xa
100010db2:	and	byte ptr [r15 + 0x4], -0x9
100010db7:	and	byte ptr [r15 + 0x3a], -0x9
100010dbc:	cmp	word ptr [r15 + 0x2a], 0x0
100010dc2:	je	0x100010de5
100010dc4:	mov	rdi, qword ptr [r15 + 0x58]
100010dc8:	cmp	rdi, qword ptr [r15 + 0x60]
100010dcc:	je	0x100010dde
100010dce:	lea	rbx, [r15 + 0x58]
100010dd2:	call	0x100019806 ## symbol stub for: _free
100010dd7:	mov	qword ptr [rbx], 0x0
100010dde:	mov	word ptr [r15 + 0x2a], 0x0
100010de5:	lea	rax, [rip + 0x18670]
100010dec:	cmp	dword ptr [rax], 0x0
100010def:	je	0x100010f95
100010df5:	lea	rax, [rip + 0x188b0]
100010dfc:	cmp	dword ptr [rax], 0x0
100010dff:	je	0x100010e4a
100010e01:	lea	rax, [rip + 0x1a128]
100010e08:	mov	r12, qword ptr [rax]
100010e0b:	mov	rdi, qword ptr [rip + 0x4a1d6]
100010e12:	lea	r15, [rip + 0xb42d] ## literal pool for: "u"
100010e19:	xor	esi, esi
100010e1b:	mov	rdx, r15
100010e1e:	call	0x100016116
100010e23:	mov	rbx, rax
100010e26:	mov	rdi, r14
100010e29:	xor	esi, esi
100010e2b:	mov	rdx, r15
100010e2e:	call	0x100016116
100010e33:	lea	rsi, [rip + 0x1246a] ## literal pool for: "\t(in=%s) (out=%s)"
100010e3a:	mov	rdi, r12
100010e3d:	mov	rdx, rbx
100010e40:	mov	rcx, rax
100010e43:	xor	eax, eax
100010e45:	call	0x1000197ee ## symbol stub for: _fprintf
100010e4a:	cmp	dword ptr [rbp - 0x2c], 0x8
100010e4e:	lea	rbx, [rip + 0x1a0db]
100010e55:	mov	rdi, qword ptr [rbx]
100010e58:	jne	0x100010f60
100010e5e:	mov	rcx, qword ptr [rip + 0x4a183]
100010e65:	test	rcx, rcx
100010e68:	je	0x100010f70
100010e6e:	mov	rax, rcx
100010e71:	sub	rax, r14
100010e74:	imul	rax, rax, 0xc8
100010e7b:	cqo
100010e7d:	idiv	rcx
100010e80:	lea	rcx, [rax + 0x1]
100010e84:	shr	rcx, 0x3f
100010e88:	lea	rdx, [rax + rcx + 0x1]
100010e8d:	shr	rdx
100010e90:	jmp	0x100010f72
100010e95:	mov	rcx, qword ptr [rip + 0x4a154]
100010e9c:	mov	qword ptr [r15 + 0x10], rcx
100010ea0:	mov	qword ptr [r15 + 0x18], r14
100010ea4:	lea	rbx, [rip + 0x188fd]
100010eab:	cmp	qword ptr [rbx], 0x0
100010eaf:	je	0x100010eb8
100010eb1:	lea	rcx, [r14 + 0xc]
100010eb5:	mov	qword ptr [rax], rcx
100010eb8:	mov	rax, qword ptr [rip + 0x4a129]
100010ebf:	mov	qword ptr [r15 + 0x20], rax
100010ec3:	lea	rax, [rip + 0x188be]
100010eca:	cmp	dword ptr [rax], 0x0
100010ecd:	jne	0x100010eec
100010ecf:	lea	rax, [rip + 0x18922]
100010ed6:	mov	rdi, qword ptr [rax]
100010ed9:	mov	rsi, qword ptr [r15 + 0x40]
100010edd:	xor	edx, edx
100010edf:	call	0x10001980c ## symbol stub for: _fseeko
100010ee4:	test	eax, eax
100010ee6:	je	0x10001102b
100010eec:	mov	eax, dword ptr [rbp - 0x2c]
100010eef:	cmp	word ptr [r15 + 0x6], ax
100010ef4:	je	0x100010f05
100010ef6:	lea	rdi, [rip + 0x12335] ## literal pool for: "can't rewrite method"
100010efd:	call	0x100003c62
100010f02:	mov	eax, dword ptr [rbp - 0x2c]
100010f05:	mov	rbx, r12
100010f08:	test	eax, eax
100010f0a:	jne	0x100010f24
100010f0c:	cmp	qword ptr [rbp - 0x40], 0x0
100010f11:	jns	0x100010f24
100010f13:	lea	rsi, [rip + 0x1232d] ## literal pool for: "zip -0 not supported for I/O on pipes or devices"
100010f1a:	mov	edi, 0x10
100010f1f:	call	0x1000037b0
100010f24:	mov	rdi, r15
100010f27:	call	0x10000e38b
100010f2c:	mov	r12d, eax
100010f2f:	test	eax, eax
100010f31:	jne	0x100011019
100010f37:	lea	rax, [rip + 0x18862]
100010f3e:	xor	ecx, ecx
100010f40:	cmp	dword ptr [rax], 0x0
100010f43:	setne	cl
100010f46:	mov	rax, qword ptr [rbx]
100010f49:	lea	rax, [rax + 8*rcx + 0x10]
100010f4e:	mov	qword ptr [rbx], rax
100010f51:	movzx	eax, word ptr [r15 + 0x3a]
100010f56:	mov	word ptr [r15 + 0x4], ax
100010f5b:	jmp	0x100010dbc
100010f60:	lea	rsi, [rip + 0x12361] ## literal pool for: " (stored 0%%)\n"
100010f67:	xor	eax, eax
100010f69:	call	0x1000197ee ## symbol stub for: _fprintf
100010f6e:	jmp	0x100010f80
100010f70:	xor	edx, edx
100010f72:	lea	rsi, [rip + 0x1233d] ## literal pool for: " (deflated %d%%)\n"
100010f79:	xor	eax, eax
100010f7b:	call	0x1000197ee ## symbol stub for: _fprintf
100010f80:	lea	rax, [rip + 0x18945]
100010f87:	mov	dword ptr [rax], 0x0
100010f8d:	mov	rdi, qword ptr [rbx]
100010f90:	call	0x1000197d6 ## symbol stub for: _fflush
100010f95:	xor	r12d, r12d
100010f98:	lea	rax, [rip + 0x187b9]
100010f9f:	cmp	dword ptr [rax], 0x0
100010fa2:	je	0x100011019
100010fa4:	cmp	dword ptr [rbp - 0x2c], 0x8
100010fa8:	lea	rbx, [rip + 0x187b1]
100010faf:	mov	rdi, qword ptr [rbx]
100010fb2:	jne	0x100010fe4
100010fb4:	mov	rcx, qword ptr [rip + 0x4a02d]
100010fbb:	test	rcx, rcx
100010fbe:	je	0x100010ff4
100010fc0:	mov	rax, rcx
100010fc3:	sub	rax, r14
100010fc6:	imul	rax, rax, 0xc8
100010fcd:	cqo
100010fcf:	idiv	rcx
100010fd2:	lea	rcx, [rax + 0x1]
100010fd6:	shr	rcx, 0x3f
100010fda:	lea	rdx, [rax + rcx + 0x1]
100010fdf:	shr	rdx
100010fe2:	jmp	0x100010ff6
100010fe4:	lea	rsi, [rip + 0x122dd] ## literal pool for: " (stored 0%%)\n"
100010feb:	xor	eax, eax
100010fed:	call	0x1000197ee ## symbol stub for: _fprintf
100010ff2:	jmp	0x100011004
100010ff4:	xor	edx, edx
100010ff6:	lea	rsi, [rip + 0x122b9] ## literal pool for: " (deflated %d%%)\n"
100010ffd:	xor	eax, eax
100010fff:	call	0x1000197ee ## symbol stub for: _fprintf
100011004:	lea	rax, [rip + 0x188c5]
10001100b:	mov	dword ptr [rax], 0x0
100011011:	mov	rdi, qword ptr [rbx]
100011014:	call	0x1000197d6 ## symbol stub for: _fflush
100011019:	mov	eax, r12d
10001101c:	add	rsp, 0x78
100011020:	pop	rbx
100011021:	pop	r12
100011023:	pop	r13
100011025:	pop	r14
100011027:	pop	r15
100011029:	pop	rbp
10001102a:	ret
10001102b:	mov	rcx, rbx
10001102e:	lea	rbx, [rip + 0x1888b]
100011035:	lea	rax, [r14 + 0xc]
100011039:	cmp	qword ptr [rcx], 0x0
10001103d:	cmove	rax, r14
100011041:	cmp	qword ptr [rbx], rax
100011044:	je	0x100011095
100011046:	lea	rax, [rip + 0x19ee3]
10001104d:	mov	r12, qword ptr [rax]
100011050:	mov	rdi, r14
100011053:	xor	esi, esi
100011055:	xor	edx, edx
100011057:	call	0x100016116
10001105c:	mov	r13, rax
10001105f:	mov	rdi, qword ptr [rbx]
100011062:	xor	esi, esi
100011064:	xor	edx, edx
100011066:	call	0x100016116
10001106b:	lea	rsi, [rip + 0x12206] ## literal pool for: " s=%s, actual=%s "
100011072:	mov	rdi, r12
100011075:	lea	r12, [rip + 0x19ebc]
10001107c:	mov	rdx, r13
10001107f:	mov	rcx, rax
100011082:	xor	eax, eax
100011084:	call	0x1000197ee ## symbol stub for: _fprintf
100011089:	lea	rdi, [rip + 0x121fa] ## literal pool for: "incorrect compressed size"
100011090:	call	0x100003c62
100011095:	mov	eax, dword ptr [rbp - 0x2c]
100011098:	mov	word ptr [r15 + 0x6], ax
10001109d:	test	eax, eax
10001109f:	je	0x1000110ac
1000110a1:	cmp	eax, 0x8
1000110a4:	jne	0x1000110b5
1000110a6:	mov	ax, 0x14
1000110aa:	jmp	0x1000110b0
1000110ac:	mov	ax, 0xa
1000110b0:	mov	word ptr [r15 + 0x2], ax
1000110b5:	mov	r13, r12
1000110b8:	mov	rcx, qword ptr [rbp - 0x48]
1000110bc:	movzx	eax, word ptr [rcx]
1000110bf:	test	al, 0x1
1000110c1:	jne	0x1000110d0
1000110c3:	and	eax, 0xfff7
1000110c8:	mov	rbx, rcx
1000110cb:	mov	word ptr [rcx], ax
1000110ce:	jmp	0x1000110d3
1000110d0:	mov	rbx, rcx
1000110d3:	mov	word ptr [r15 + 0x3a], ax
1000110d8:	lea	rax, [rip + 0x187c5]
1000110df:	cmp	dword ptr [rax], 0x1
1000110e2:	jne	0x100011113
1000110e4:	lea	rax, [rip + 0x1879d]
1000110eb:	mov	rdi, qword ptr [rax]
1000110ee:	lea	rax, [rip + 0x18703]
1000110f5:	cmp	rdi, qword ptr [rax]
1000110f8:	je	0x100011113
1000110fa:	mov	rsi, qword ptr [r15 + 0x40]
1000110fe:	xor	edx, edx
100011100:	call	0x10001980c ## symbol stub for: _fseeko
100011105:	mov	r12d, 0xb
10001110b:	test	eax, eax
10001110d:	jne	0x100011019
100011113:	mov	rdi, r15
100011116:	mov	esi, 0x1
10001111b:	call	0x10000dc54
100011120:	mov	r12d, eax
100011123:	test	eax, eax
100011125:	jne	0x100011019
10001112b:	lea	rax, [rip + 0x186c6]
100011132:	mov	rdi, qword ptr [rax]
100011135:	lea	rax, [rip + 0x1875c]
10001113c:	mov	rsi, qword ptr [rax]
10001113f:	xor	edx, edx
100011141:	call	0x10001980c ## symbol stub for: _fseeko
100011146:	mov	r12d, 0xb
10001114c:	test	eax, eax
10001114e:	jne	0x100011019
100011154:	test	byte ptr [rbx], 0x1
100011157:	je	0x100010dbc
10001115d:	mov	rdi, r15
100011160:	call	0x10000e38b
100011165:	mov	r12d, eax
100011168:	test	eax, eax
10001116a:	jne	0x100011019
100011170:	lea	rax, [rip + 0x18629]
100011177:	cmp	dword ptr [rax], 0x0
10001117a:	mov	rbx, r13
10001117d:	mov	rax, qword ptr [r13]
100011181:	je	0x1000111f9
100011183:	add	rax, 0x18
100011187:	jmp	0x1000111fd
100011189:	xor	r12d, r12d
10001118c:	mov	rdi, r13
10001118f:	call	0x100019806 ## symbol stub for: _free
100011194:	mov	r14, qword ptr [rip + 0x49e4d]
10001119b:	mov	edi, dword ptr [rip + 0x49e43]
1000111a1:	cmp	r12, -0x1
1000111a5:	jne	0x1000111c7
1000111a7:	cmp	edi, -0x1
1000111aa:	mov	ebx, dword ptr [rbp - 0x30]
1000111ad:	lea	r12, [rip + 0x19d84]
1000111b4:	je	0x100010d52
1000111ba:	mov	rdi, r15
1000111bd:	call	0x100019700
1000111c2:	jmp	0x100010d49
1000111c7:	mov	ebx, dword ptr [rbp - 0x30]
1000111ca:	lea	r12, [rip + 0x19d67]
1000111d1:	jmp	0x100010d52
1000111d6:	mov	edi, dword ptr [rip + 0x49e08]
1000111dc:	cmp	edi, -0x1
1000111df:	je	0x1000111e6
1000111e1:	call	0x1000197ac ## symbol stub for: _close
1000111e6:	mov	rdi, r13
1000111e9:	call	0x100019806 ## symbol stub for: _free
1000111ee:	mov	r12d, 0xa
1000111f4:	jmp	0x100011019
1000111f9:	add	rax, 0x10
1000111fd:	mov	qword ptr [rbx], rax
100011200:	jmp	0x100010dbc
100011205:	push	rbp
100011206:	mov	rbp, rsp
100011209:	push	r15
10001120b:	push	r14
10001120d:	push	rbx
10001120e:	push	rax
10001120f:	mov	rbx, rsi
100011212:	mov	r14, rdi
100011215:	lea	r15, [rip + 0x185dc]
10001121c:	cmp	qword ptr [r15], 0x0
100011220:	jne	0x10001122e
100011222:	lea	rdi, [rip + 0x120ae] ## literal pool for: "output buffer too small for in-memory compression"
100011229:	call	0x100003c62
10001122e:	mov	edx, dword ptr [rbx]
100011230:	test	rdx, rdx
100011233:	je	0x10001125f
100011235:	mov	esi, 0x1
10001123a:	mov	rdi, r14
10001123d:	call	0x1000168c3
100011242:	mov	rdi, qword ptr [r15]
100011245:	call	0x1000197d0 ## symbol stub for: _ferror
10001124a:	test	eax, eax
10001124c:	je	0x10001125f
10001124e:	lea	rsi, [rip + 0x120b4] ## literal pool for: "write error on zip file"
100011255:	mov	edi, 0xe
10001125a:	call	0x1000037b0
10001125f:	mov	dword ptr [rbx], 0x0
100011265:	add	rsp, 0x8
100011269:	pop	rbx
10001126a:	pop	r14
10001126c:	pop	r15
10001126e:	pop	rbp
10001126f:	ret
100011270:	push	rbp
100011271:	mov	rbp, rsp
100011274:	lea	rax, [rip + 0x1857d]
10001127b:	mov	rdi, qword ptr [rax]
10001127e:	pop	rbp
10001127f:	jmp	0x100015850
100011284:	nop
100011285:	nop
100011286:	nop
100011287:	nop
100011288:	nop
100011289:	nop
10001128a:	nop
10001128b:	nop
10001128c:	nop
10001128d:	nop
10001128e:	nop
10001128f:	nop
100011290:	push	rbp
100011291:	mov	rbp, rsp
100011294:	push	r15
100011296:	push	r14
100011298:	push	r13
10001129a:	push	r12
10001129c:	push	rbx
10001129d:	push	rax
10001129e:	mov	eax, 0x2338
1000112a3:	call	0x10000a6a0
1000112a8:	sub	rsp, rax
1000112ab:	pop	rax
1000112ac:	mov	r13, rdi
1000112af:	mov	rax, qword ptr [rip + 0x12d5a] ## literal pool symbol address: ___stack_chk_guard
1000112b6:	mov	rax, qword ptr [rax]
1000112b9:	mov	qword ptr [rbp - 0x30], rax
1000112bd:	mov	rdi, r13
1000112c0:	call	0x100019824 ## symbol stub for: _getc
1000112c5:	cmp	eax, 0xa
1000112c8:	je	0x1000112bd
1000112ca:	cmp	eax, 0xd
1000112cd:	je	0x1000112bd
1000112cf:	cmp	eax, -0x1
1000112d2:	jne	0x1000112d9
1000112d4:	xor	r14d, r14d
1000112d7:	jmp	0x100011346
1000112d9:	lea	r15, [rbp - 0x2360]
1000112e0:	xor	r14d, r14d
1000112e3:	mov	r12d, 0x4801
1000112e9:	mov	rbx, r15
1000112ec:	mov	rcx, rbx
1000112ef:	sub	rcx, r15
1000112f2:	cmp	rcx, 0x2327
1000112f9:	jg	0x100011346
1000112fb:	mov	byte ptr [rbx], al
1000112fd:	inc	rbx
100011300:	mov	rdi, r13
100011303:	call	0x100019824 ## symbol stub for: _getc
100011308:	mov	ecx, eax
10001130a:	inc	ecx
10001130c:	cmp	ecx, 0xe
10001130f:	ja	0x1000112ec
100011311:	bt	r12d, ecx
100011315:	jae	0x1000112ec
100011317:	mov	byte ptr [rbx], 0x0
10001131a:	lea	rdi, [rbp - 0x2360]
100011321:	call	0x100019920 ## symbol stub for: _strlen
100011326:	lea	rdi, [rax + 0x1]
10001132a:	call	0x100019848 ## symbol stub for: _malloc
10001132f:	test	rax, rax
100011332:	je	0x1000112d4
100011334:	mov	r14, rax
100011337:	lea	rsi, [rbp - 0x2360]
10001133e:	mov	rdi, rax
100011341:	call	0x100019914 ## symbol stub for: _strcpy
100011346:	mov	rax, qword ptr [rip + 0x12cc3] ## literal pool symbol address: ___stack_chk_guard
10001134d:	mov	rax, qword ptr [rax]
100011350:	cmp	rax, qword ptr [rbp - 0x30]
100011354:	jne	0x10001136b
100011356:	mov	rax, r14
100011359:	add	rsp, 0x2338
100011360:	pop	rbx
100011361:	pop	r12
100011363:	pop	r13
100011365:	pop	r14
100011367:	pop	r15
100011369:	pop	rbp
10001136a:	ret
10001136b:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
100011370:	push	rbp
100011371:	mov	rbp, rsp
100011374:	push	r14
100011376:	push	rbx
100011377:	mov	rbx, rdi
10001137a:	mov	rax, qword ptr [rdi + 0x30]
10001137e:	mov	r14, qword ptr [rdi + 0x38]
100011382:	mov	qword ptr [rax], r14
100011385:	test	r14, r14
100011388:	je	0x100011392
10001138a:	mov	rax, qword ptr [rbx + 0x30]
10001138e:	mov	qword ptr [r14 + 0x30], rax
100011392:	mov	rdi, qword ptr [rbx]
100011395:	test	rdi, rdi
100011398:	je	0x10001139f
10001139a:	call	0x100019806 ## symbol stub for: _free
10001139f:	mov	rdi, qword ptr [rbx + 0x10]
1000113a3:	test	rdi, rdi
1000113a6:	je	0x1000113ad
1000113a8:	call	0x100019806 ## symbol stub for: _free
1000113ad:	mov	rdi, qword ptr [rbx + 0x8]
1000113b1:	test	rdi, rdi
1000113b4:	je	0x1000113bb
1000113b6:	call	0x100019806 ## symbol stub for: _free
1000113bb:	mov	rdi, rbx
1000113be:	call	0x100019806 ## symbol stub for: _free
1000113c3:	lea	rax, [rip + 0x19b5e]
1000113ca:	dec	qword ptr [rax]
1000113cd:	mov	rax, r14
1000113d0:	pop	rbx
1000113d1:	pop	r14
1000113d3:	pop	rbp
1000113d4:	ret
1000113d5:	push	rbp
1000113d6:	mov	rbp, rsp
1000113d9:	push	rbx
1000113da:	push	rax
1000113db:	mov	rbx, rdi
1000113de:	call	0x100019932 ## symbol stub for: _strrchr
1000113e3:	lea	rcx, [rax + 0x1]
1000113e7:	test	rax, rax
1000113ea:	cmove	rcx, rbx
1000113ee:	mov	rax, rcx
1000113f1:	add	rsp, 0x8
1000113f5:	pop	rbx
1000113f6:	pop	rbp
1000113f7:	ret
1000113f8:	push	rbp
1000113f9:	mov	rbp, rsp
1000113fc:	mov	rax, rdi
1000113ff:	mov	sil, byte ptr [rdi]
100011402:	mov	r10, rdi
100011405:	test	sil, sil
100011408:	je	0x1000114b4
10001140e:	lea	rdx, [rax + 0x1]
100011412:	xor	r9d, r9d
100011415:	movabs	r8, 0x28000000e4000405
10001141f:	mov	r10, rax
100011422:	mov	ecx, esi
100011424:	and	cl, -0x11
100011427:	add	cl, -0x2b
10001142a:	cmp	cl, 0x2
10001142d:	jb	0x100011441
10001142f:	lea	ecx, [rsi - 0x20]
100011432:	movzx	edi, cl
100011435:	cmp	dil, 0x3d
100011439:	ja	0x100011463
10001143b:	bt	r8, rdi
10001143f:	jae	0x10001144e
100011441:	mov	sil, byte ptr [rdx]
100011444:	inc	rdx
100011447:	test	sil, sil
10001144a:	jne	0x100011422
10001144c:	jmp	0x1000114b4
10001144e:	cmp	rdi, 0xe
100011452:	je	0x10001148d
100011454:	cmp	rdi, 0xf
100011458:	jne	0x100011463
10001145a:	mov	byte ptr [r10], 0x2f
10001145e:	inc	r10
100011461:	jmp	0x1000114a0
100011463:	cmp	sil, 0x7c
100011467:	je	0x100011441
100011469:	cmp	r9d, 0xb
10001146d:	jg	0x100011441
10001146f:	cmp	r9d, 0x8
100011473:	je	0x100011441
100011475:	inc	r9d
100011478:	lea	ecx, [rsi - 0x61]
10001147b:	cmp	cl, 0x1a
10001147e:	movzx	ecx, sil
100011482:	cmovb	ecx, edi
100011485:	mov	byte ptr [r10], cl
100011488:	inc	r10
10001148b:	jmp	0x100011441
10001148d:	test	r9d, r9d
100011490:	je	0x1000114a0
100011492:	cmp	r9d, 0x8
100011496:	jle	0x1000114a5
100011498:	mov	r9d, 0xc
10001149e:	jmp	0x100011441
1000114a0:	xor	r9d, r9d
1000114a3:	jmp	0x100011441
1000114a5:	mov	byte ptr [r10], 0x2e
1000114a9:	inc	r10
1000114ac:	mov	r9d, 0x9
1000114b2:	jmp	0x100011441
1000114b4:	mov	byte ptr [r10], 0x0
1000114b8:	pop	rbp
1000114b9:	ret
1000114ba:	push	rbp
1000114bb:	mov	rbp, rsp
1000114be:	push	r15
1000114c0:	push	r14
1000114c2:	push	r13
1000114c4:	push	r12
1000114c6:	push	rbx
1000114c7:	push	rax
1000114c8:	mov	r12d, esi
1000114cb:	mov	r14, rdi
1000114ce:	lea	rsi, [rip + 0xb02d] ## literal pool for: "-"
1000114d5:	call	0x10001990e ## symbol stub for: _strcmp
1000114da:	test	eax, eax
1000114dc:	je	0x1000115a7
1000114e2:	mov	rdi, r14
1000114e5:	xor	esi, esi
1000114e7:	xor	edx, edx
1000114e9:	call	0x100016ec0
1000114ee:	mov	r14, rax
1000114f1:	lea	rax, [rip + 0x183e0]
1000114f8:	mov	rbx, qword ptr [rax]
1000114fb:	mov	r13d, 0x1
100011501:	test	rbx, rbx
100011504:	je	0x100011598
10001150a:	lea	r15, [rip + 0x1819b]
100011511:	mov	rsi, qword ptr [rbx + 0x70]
100011515:	mov	rdi, r14
100011518:	mov	edx, r12d
10001151b:	call	0x100015908
100011520:	test	eax, eax
100011522:	je	0x100011588
100011524:	lea	rax, [rip + 0x183d5]
10001152b:	cmp	dword ptr [rax], 0x0
10001152e:	je	0x10001153e
100011530:	mov	rdi, qword ptr [rbx + 0x78]
100011534:	mov	esi, r12d
100011537:	call	0x1000115ce
10001153c:	jmp	0x100011543
10001153e:	mov	eax, 0x1
100011543:	mov	dword ptr [rbx + 0x88], eax
100011549:	cmp	dword ptr [r15], 0x0
10001154d:	je	0x100011585
10001154f:	lea	rcx, [rip + 0x199da]
100011556:	mov	rdi, qword ptr [rcx]
100011559:	lea	rdx, [rip + 0x11e2c] ## literal pool for: "ex"
100011560:	test	eax, eax
100011562:	je	0x10001156b
100011564:	lea	rdx, [rip + 0x11e1e] ## literal pool for: "in"
10001156b:	mov	rcx, qword ptr [rbx + 0x80]
100011572:	xor	r13d, r13d
100011575:	lea	rsi, [rip + 0x11def] ## literal pool for: "zip diagnostic: %scluding %s\n"
10001157c:	xor	eax, eax
10001157e:	call	0x1000197ee ## symbol stub for: _fprintf
100011583:	jmp	0x100011588
100011585:	xor	r13d, r13d
100011588:	mov	rbx, qword ptr [rbx + 0x98]
10001158f:	test	rbx, rbx
100011592:	jne	0x100011511
100011598:	mov	rdi, r14
10001159b:	call	0x100019806 ## symbol stub for: _free
1000115a0:	neg	r13d
1000115a3:	sbb	eax, eax
1000115a5:	jmp	0x1000115bf
1000115a7:	lea	rdi, [rip + 0x11d8a] ## literal pool for: "Cannot select stdin when selecting archive entries"
1000115ae:	lea	rsi, [rip + 0x9202] ## literal pool for: ""
1000115b5:	call	0x100003e67
1000115ba:	mov	eax, 0xffffffff
1000115bf:	add	rsp, 0x8
1000115c3:	pop	rbx
1000115c4:	pop	r12
1000115c6:	pop	r13
1000115c8:	pop	r14
1000115ca:	pop	r15
1000115cc:	pop	rbp
1000115cd:	ret
1000115ce:	push	rbp
1000115cf:	mov	rbp, rsp
1000115d2:	push	r15
1000115d4:	push	r14
1000115d6:	push	r13
1000115d8:	push	r12
1000115da:	push	rbx
1000115db:	sub	rsp, 0x18
1000115df:	mov	dword ptr [rbp - 0x3c], esi
1000115e2:	mov	qword ptr [rbp - 0x38], rdi
1000115e6:	lea	rax, [rip + 0x18313]
1000115ed:	cmp	dword ptr [rax], 0x0
1000115f0:	je	0x100011774
1000115f6:	lea	rax, [rip + 0x18307]
1000115fd:	xor	ecx, ecx
1000115ff:	cmp	dword ptr [rax], 0x0
100011602:	sete	cl
100011605:	mov	dword ptr [rbp - 0x30], ecx
100011608:	lea	rcx, [rip + 0x182f9]
10001160f:	xor	eax, eax
100011611:	cmp	dword ptr [rcx], 0x0
100011614:	sete	al
100011617:	xor	r14d, r14d
10001161a:	lea	rdx, [rip + 0x182d7]
100011621:	mov	ecx, eax
100011623:	mov	rax, qword ptr [rdx]
100011626:	mov	r13, r14
100011629:	shl	r13, 0x4
10001162d:	mov	rbx, qword ptr [rax + r13]
100011631:	cmp	byte ptr [rbx], 0x0
100011634:	je	0x100011685
100011636:	mov	dword ptr [rbp - 0x2c], ecx
100011639:	mov	ecx, dword ptr [rax + r13 + 0x8]
10001163e:	cmp	ecx, 0x69
100011641:	je	0x10001168c
100011643:	mov	rax, qword ptr [rbp - 0x38]
100011647:	cmp	ecx, 0x52
10001164a:	jne	0x100011706
100011650:	mov	eax, dword ptr [rbp - 0x2c]
100011653:	test	eax, eax
100011655:	jne	0x100011745
10001165b:	mov	rdi, rbx
10001165e:	mov	esi, 0x2f
100011663:	call	0x100019908 ## symbol stub for: _strchr
100011668:	xor	r15d, r15d
10001166b:	test	rax, rax
10001166e:	je	0x10001169c
100011670:	inc	r15d
100011673:	inc	rax
100011676:	mov	rdi, rax
100011679:	mov	esi, 0x2f
10001167e:	call	0x100019908 ## symbol stub for: _strchr
100011683:	jmp	0x10001166b
100011685:	mov	eax, ecx
100011687:	jmp	0x10001174c
10001168c:	mov	rax, qword ptr [rbp - 0x38]
100011690:	cmp	dword ptr [rbp - 0x30], 0x0
100011694:	jne	0x100011742
10001169a:	jmp	0x100011706
10001169c:	mov	r12, qword ptr [rbp - 0x38]
1000116a0:	mov	rdi, r12
1000116a3:	mov	esi, 0x2f
1000116a8:	call	0x100019908 ## symbol stub for: _strchr
1000116ad:	mov	rdi, rax
1000116b0:	mov	rax, r12
1000116b3:	test	rdi, rdi
1000116b6:	je	0x100011706
1000116b8:	dec	r15d
1000116bb:	inc	rdi
1000116be:	mov	esi, 0x2f
1000116c3:	call	0x100019908 ## symbol stub for: _strchr
1000116c8:	mov	rdi, rax
1000116cb:	test	rax, rax
1000116ce:	jne	0x1000116b8
1000116d0:	lea	ecx, [r15 + 0x1]
1000116d4:	mov	rax, qword ptr [rbp - 0x38]
1000116d8:	test	ecx, ecx
1000116da:	jg	0x100011706
1000116dc:	xor	r12d, r12d
1000116df:	mov	rax, qword ptr [rbp - 0x38]
1000116e3:	mov	rdi, rax
1000116e6:	mov	esi, 0x2f
1000116eb:	call	0x100019908 ## symbol stub for: _strchr
1000116f0:	test	rax, rax
1000116f3:	je	0x100011702
1000116f5:	inc	rax
1000116f8:	dec	r12d
1000116fb:	cmp	r15d, r12d
1000116fe:	jne	0x1000116e3
100011700:	jmp	0x100011706
100011702:	mov	rax, qword ptr [rbp - 0x38]
100011706:	mov	rdi, rbx
100011709:	mov	rsi, rax
10001170c:	mov	edx, dword ptr [rbp - 0x3c]
10001170f:	call	0x100015908
100011714:	test	eax, eax
100011716:	je	0x100011742
100011718:	lea	rdx, [rip + 0x181d9]
10001171f:	mov	rax, qword ptr [rdx]
100011722:	mov	ecx, dword ptr [rax + r13 + 0x8]
100011727:	mov	eax, 0x1
10001172c:	cmp	ecx, 0x52
10001172f:	je	0x10001174c
100011731:	cmp	ecx, 0x78
100011734:	je	0x10001177b
100011736:	mov	dword ptr [rbp - 0x30], 0x1
10001173d:	mov	eax, dword ptr [rbp - 0x2c]
100011740:	jmp	0x10001174c
100011742:	mov	eax, dword ptr [rbp - 0x2c]
100011745:	lea	rdx, [rip + 0x181ac]
10001174c:	inc	r14
10001174f:	lea	rcx, [rip + 0x181aa]
100011756:	mov	ecx, dword ptr [rcx]
100011758:	cmp	r14, rcx
10001175b:	jb	0x100011621
100011761:	cmp	dword ptr [rbp - 0x30], 0x0
100011765:	setne	cl
100011768:	test	eax, eax
10001176a:	setne	al
10001176d:	and	al, cl
10001176f:	movzx	eax, al
100011772:	jmp	0x10001177d
100011774:	mov	eax, 0x1
100011779:	jmp	0x10001177d
10001177b:	xor	eax, eax
10001177d:	add	rsp, 0x18
100011781:	pop	rbx
100011782:	pop	r12
100011784:	pop	r13
100011786:	pop	r14
100011788:	pop	r15
10001178a:	pop	rbp
10001178b:	ret
10001178c:	push	rbp
10001178d:	mov	rbp, rsp
100011790:	push	r15
100011792:	push	r14
100011794:	push	r13
100011796:	push	r12
100011798:	push	rbx
100011799:	push	rax
10001179a:	mov	eax, 0x1418
10001179f:	call	0x10000a6a0
1000117a4:	sub	rsp, rax
1000117a7:	pop	rax
1000117a8:	mov	rax, qword ptr [rip + 0x12861] ## literal pool symbol address: ___stack_chk_guard
1000117af:	mov	rax, qword ptr [rax]
1000117b2:	mov	qword ptr [rbp - 0x30], rax
1000117b6:	lea	r12, [rip + 0x1976b]
1000117bd:	mov	r14, qword ptr [r12]
1000117c1:	test	r14, r14
1000117c4:	je	0x100011920
1000117ca:	mov	rax, r14
1000117cd:	shr	rax, 0x3d
1000117d1:	mov	ebx, 0x4
1000117d6:	jne	0x100011922
1000117dc:	lea	rdi, [8*r14]
1000117e4:	call	0x100019848 ## symbol stub for: _malloc
1000117e9:	test	rax, rax
1000117ec:	je	0x100011922
1000117f2:	mov	r15, rax
1000117f5:	lea	rax, [rip + 0x180f4]
1000117fc:	mov	rax, qword ptr [rax]
1000117ff:	test	rax, rax
100011802:	je	0x100011817
100011804:	mov	rcx, r15
100011807:	mov	qword ptr [rcx], rax
10001180a:	mov	rax, qword ptr [rax + 0x38]
10001180e:	add	rcx, 0x8
100011812:	test	rax, rax
100011815:	jne	0x100011807
100011817:	lea	rcx, [rip + 0x231]
10001181e:	mov	edx, 0x8
100011823:	mov	rdi, r15
100011826:	mov	rsi, r14
100011829:	call	0x1000198a8 ## symbol stub for: _qsort
10001182e:	mov	r14, qword ptr [r12]
100011832:	dec	r14
100011835:	je	0x100011871
100011837:	mov	r13, r14
10001183a:	mov	rax, qword ptr [r15 + 8*r14 - 0x8]
10001183f:	mov	rbx, qword ptr [r15 + 8*r14]
100011843:	dec	r14
100011846:	mov	rdi, qword ptr [rax]
100011849:	mov	rsi, qword ptr [rbx]
10001184c:	call	0x10001990e ## symbol stub for: _strcmp
100011851:	test	eax, eax
100011853:	je	0x10001185e
100011855:	mov	qword ptr [r15 + 8*r13], rbx
100011859:	dec	r13
10001185c:	jmp	0x100011866
10001185e:	mov	rdi, rbx
100011861:	call	0x100011370
100011866:	test	r14, r14
100011869:	jne	0x10001183a
10001186b:	mov	rsi, qword ptr [r12]
10001186f:	jmp	0x100011879
100011871:	xor	r13d, r13d
100011874:	mov	esi, 0x1
100011879:	mov	rax, qword ptr [r15]
10001187c:	lea	rbx, [r15 + 8*r13]
100011880:	mov	qword ptr [rbp - 0x1440], r15
100011887:	mov	qword ptr [r15 + 8*r13], rax
10001188b:	lea	rcx, [rip + 0x1d3]
100011892:	mov	edx, 0x8
100011897:	mov	rdi, rbx
10001189a:	call	0x1000198a8 ## symbol stub for: _qsort
10001189f:	mov	r14, qword ptr [r12]
1000118a3:	cmp	r14, 0x2
1000118a7:	jb	0x100011914
1000118a9:	mov	rax, qword ptr [rbx]
1000118ac:	mov	r15, qword ptr [rbx + 0x8]
1000118b0:	mov	qword ptr [rbp - 0x1438], rax
1000118b7:	mov	rdi, qword ptr [rax + 0x8]
1000118bb:	mov	r12, qword ptr [r15 + 0x8]
1000118bf:	mov	rsi, r12
1000118c2:	call	0x10001990e ## symbol stub for: _strcmp
1000118c7:	test	eax, eax
1000118c9:	je	0x10001194a
1000118cb:	mov	rax, qword ptr [rbp - 0x1440]
1000118d2:	lea	rbx, [rax + 8*r13 + 0x8]
1000118d7:	add	r14, -0x2
1000118db:	test	r14, r14
1000118de:	je	0x100011914
1000118e0:	mov	r13, r15
1000118e3:	mov	r15, qword ptr [rbx + 0x8]
1000118e7:	add	rbx, 0x8
1000118eb:	mov	qword ptr [rbp - 0x1438], rbx
1000118f2:	mov	rbx, qword ptr [r15 + 0x8]
1000118f6:	mov	rdi, r12
1000118f9:	mov	rsi, rbx
1000118fc:	call	0x10001990e ## symbol stub for: _strcmp
100011901:	dec	r14
100011904:	mov	r12, rbx
100011907:	mov	rbx, qword ptr [rbp - 0x1438]
10001190e:	test	eax, eax
100011910:	jne	0x1000118db
100011912:	jmp	0x100011955
100011914:	mov	rdi, qword ptr [rbp - 0x1440]
10001191b:	call	0x100019806 ## symbol stub for: _free
100011920:	xor	ebx, ebx
100011922:	mov	rax, qword ptr [rip + 0x126e7] ## literal pool symbol address: ___stack_chk_guard
100011929:	mov	rax, qword ptr [rax]
10001192c:	cmp	rax, qword ptr [rbp - 0x30]
100011930:	jne	0x100011a4a
100011936:	mov	eax, ebx
100011938:	add	rsp, 0x1418
10001193f:	pop	rbx
100011940:	pop	r12
100011942:	pop	r13
100011944:	pop	r14
100011946:	pop	r15
100011948:	pop	rbp
100011949:	ret
10001194a:	mov	r13, qword ptr [rbp - 0x1438]
100011951:	add	rbx, 0x8
100011955:	mov	r8, qword ptr [r13]
100011959:	lea	r15, [rip + 0x181d0]
100011960:	lea	rcx, [rip + 0x11a28] ## literal pool for: "  first full name: %s\n"
100011967:	mov	edx, 0x13f1
10001196c:	mov	rdi, r15
10001196f:	mov	esi, 0x0
100011974:	xor	eax, eax
100011976:	call	0x100019770 ## symbol stub for: ___sprintf_chk
10001197b:	mov	rax, qword ptr [rbx]
10001197e:	mov	r8, qword ptr [rax]
100011981:	lea	rcx, [rip + 0x11a1e] ## literal pool for: " second full name: %s\n"
100011988:	lea	r14, [rbp - 0x1430]
10001198f:	mov	edx, 0x13f1
100011994:	mov	rdi, r14
100011997:	mov	esi, 0x0
10001199c:	xor	eax, eax
10001199e:	call	0x100019770 ## symbol stub for: ___sprintf_chk
1000119a3:	lea	r12, [rip + 0x11a13] ## literal pool for: "                     "
1000119aa:	mov	edx, 0x13f1
1000119af:	mov	rdi, r15
1000119b2:	mov	rsi, r12
1000119b5:	call	0x10001977c ## symbol stub for: ___strcat_chk
1000119ba:	mov	edx, 0x13f1
1000119bf:	mov	rdi, r15
1000119c2:	mov	rsi, r14
1000119c5:	call	0x10001977c ## symbol stub for: ___strcat_chk
1000119ca:	mov	rax, qword ptr [rbx]
1000119cd:	mov	r8, qword ptr [rax + 0x8]
1000119d1:	lea	rcx, [rip + 0x119fb] ## literal pool for: "name in zip file repeated: %s"
1000119d8:	mov	edx, 0x13f1
1000119dd:	mov	rdi, r14
1000119e0:	xor	esi, esi
1000119e2:	xor	eax, eax
1000119e4:	call	0x100019770 ## symbol stub for: ___sprintf_chk
1000119e9:	mov	edx, 0x13f1
1000119ee:	mov	rdi, r15
1000119f1:	mov	rsi, r12
1000119f4:	call	0x10001977c ## symbol stub for: ___strcat_chk
1000119f9:	mov	edx, 0x13f1
1000119fe:	mov	rdi, r15
100011a01:	mov	rsi, r14
100011a04:	call	0x10001977c ## symbol stub for: ___strcat_chk
100011a09:	lea	rax, [rip + 0x17a38]
100011a10:	cmp	dword ptr [rax], 0x0
100011a13:	jne	0x100011a2d
100011a15:	lea	rdi, [rip + 0x18114]
100011a1c:	lea	rsi, [rip + 0x119ce] ## literal pool for: "\n                     this may be a result of using -j"
100011a23:	mov	edx, 0x13f1
100011a28:	call	0x10001977c ## symbol stub for: ___strcat_chk
100011a2d:	lea	rdi, [rip + 0x180fc]
100011a34:	lea	rsi, [rip + 0x8d7c] ## literal pool for: ""
100011a3b:	call	0x100003e67
100011a40:	mov	ebx, 0x10
100011a45:	jmp	0x100011922
100011a4a:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
100011a4f:	push	rbp
100011a50:	mov	rbp, rsp
100011a53:	mov	rax, qword ptr [rdi]
100011a56:	mov	rdi, qword ptr [rax]
100011a59:	mov	rax, qword ptr [rsi]
100011a5c:	mov	rsi, qword ptr [rax]
100011a5f:	pop	rbp
100011a60:	jmp	0x10001990e ## symbol stub for: _strcmp
100011a65:	push	rbp
100011a66:	mov	rbp, rsp
100011a69:	mov	rax, qword ptr [rdi]
100011a6c:	mov	rdi, qword ptr [rax + 0x8]
100011a70:	mov	rax, qword ptr [rsi]
100011a73:	mov	rsi, qword ptr [rax + 0x8]
100011a77:	pop	rbp
100011a78:	jmp	0x10001990e ## symbol stub for: _strcmp
100011a7d:	push	rbp
100011a7e:	mov	rbp, rsp
100011a81:	push	r15
100011a83:	push	r14
100011a85:	push	r13
100011a87:	push	r12
100011a89:	push	rbx
100011a8a:	sub	rsp, 0xb8
100011a91:	mov	dword ptr [rbp - 0x38], edx
100011a94:	mov	r12d, esi
100011a97:	mov	r13, rdi
100011a9a:	lea	rax, [rip + 0x179bb]
100011aa1:	cmp	dword ptr [rax], 0x0
100011aa4:	je	0x100011b6b
100011aaa:	lea	rbx, [rip + 0x17d27]
100011ab1:	mov	rax, qword ptr [rbx]
100011ab4:	test	rax, rax
100011ab7:	jne	0x100011acd
100011ab9:	xor	edi, edi
100011abb:	call	0x10001994a ## symbol stub for: _time
100011ac0:	lea	rcx, [rip + 0x17cf9]
100011ac7:	mov	qword ptr [rcx], rax
100011aca:	mov	rax, qword ptr [rbx]
100011acd:	inc	rax
100011ad0:	mov	qword ptr [rbx], rax
100011ad3:	movabs	rcx, -0x70a3d70a3d70a3d7
100011add:	imul	rcx, rax
100011ae1:	ror	rcx, 0x2
100011ae5:	movabs	rax, 0x28f5c28f5c28f5c
100011aef:	cmp	rcx, rax
100011af2:	ja	0x100011b6b
100011af4:	xor	edi, edi
100011af6:	call	0x10001994a ## symbol stub for: _time
100011afb:	mov	r15, rax
100011afe:	lea	rax, [rip + 0x17cbb]
100011b05:	mov	rcx, r15
100011b08:	sub	rcx, qword ptr [rax]
100011b0b:	lea	rax, [rip + 0x1796e]
100011b12:	cmp	rcx, qword ptr [rax]
100011b15:	jle	0x100011b6b
100011b17:	lea	r14, [rip + 0x17caa]
100011b1e:	mov	rax, qword ptr [r14]
100011b21:	test	rax, rax
100011b24:	jne	0x100011b3a
100011b26:	lea	rdi, [rip + 0xb449] ## literal pool for: "Scanning files "
100011b2d:	xor	esi, esi
100011b2f:	call	0x100003c73
100011b34:	mov	qword ptr [r14], r15
100011b37:	mov	rax, r15
100011b3a:	mov	rcx, r15
100011b3d:	sub	rcx, rax
100011b40:	lea	rax, [rip + 0x17941]
100011b47:	cmp	rcx, qword ptr [rax]
100011b4a:	jle	0x100011b6b
100011b4c:	mov	qword ptr [r14], r15
100011b4f:	lea	rbx, [rip + 0x193da]
100011b56:	mov	rsi, qword ptr [rbx]
100011b59:	mov	edi, 0x2e
100011b5e:	call	0x1000197f4 ## symbol stub for: _fputc
100011b63:	mov	rdi, qword ptr [rbx]
100011b66:	call	0x1000197d6 ## symbol stub for: _fflush
100011b6b:	lea	rdx, [rbp - 0x3c]
100011b6f:	mov	rdi, r13
100011b72:	mov	esi, r12d
100011b75:	call	0x100016ec0
100011b7a:	mov	r15d, 0x4
100011b80:	test	rax, rax
100011b83:	je	0x100012012
100011b89:	mov	rbx, rax
100011b8c:	cmp	byte ptr [rax], 0x0
100011b8f:	je	0x100011bb6
100011b91:	mov	qword ptr [rbp - 0x48], r13
100011b95:	cmp	dword ptr [rbp - 0x3c], 0x0
100011b99:	lea	rax, [rip + 0x178a8]
100011ba0:	mov	r14d, dword ptr [rax]
100011ba3:	mov	qword ptr [rbp - 0x30], rbx
100011ba7:	jne	0x100011bea
100011ba9:	test	r14d, r14d
100011bac:	je	0x100011bea
100011bae:	xor	r14d, r14d
100011bb1:	jmp	0x100011c4b
100011bb6:	lea	rax, [rip + 0x1788b]
100011bbd:	cmp	dword ptr [rax], 0x0
100011bc0:	je	0x100011bda
100011bc2:	lea	rax, [rip + 0x17ad7]
100011bc9:	cmp	dword ptr [rax], 0x0
100011bcc:	jne	0x100011bda
100011bce:	lea	rdi, [rip + 0x11853] ## literal pool for: "empty name without -j or -r"
100011bd5:	call	0x100003c62
100011bda:	mov	rdi, rbx
100011bdd:	call	0x100019806 ## symbol stub for: _free
100011be2:	xor	r15d, r15d
100011be5:	jmp	0x100012012
100011bea:	lea	rcx, [rip + 0x17ab7]
100011bf1:	mov	edx, dword ptr [rcx]
100011bf3:	mov	dword ptr [rbp - 0x50], edx
100011bf6:	mov	dword ptr [rcx], 0x0
100011bfc:	mov	dword ptr [rax], 0x1
100011c02:	xor	r13d, r13d
100011c05:	mov	rdi, qword ptr [rbp - 0x48]
100011c09:	mov	esi, r12d
100011c0c:	xor	edx, edx
100011c0e:	call	0x100016ec0
100011c13:	test	rax, rax
100011c16:	je	0x100011c2e
100011c18:	mov	rbx, rax
100011c1b:	mov	rdi, rax
100011c1e:	call	0x100016fcc
100011c23:	mov	r13, rax
100011c26:	mov	rdi, rbx
100011c29:	call	0x100019806 ## symbol stub for: _free
100011c2e:	lea	rax, [rip + 0x17a73]
100011c35:	mov	ecx, dword ptr [rbp - 0x50]
100011c38:	mov	dword ptr [rax], ecx
100011c3a:	lea	rax, [rip + 0x17807]
100011c41:	mov	dword ptr [rax], r14d
100011c44:	mov	rbx, qword ptr [rbp - 0x30]
100011c48:	mov	r14, r13
100011c4b:	mov	rdi, rbx
100011c4e:	call	0x100016fcc
100011c53:	test	rax, rax
100011c56:	je	0x100012012
100011c5c:	mov	rbx, rax
100011c5f:	mov	rdi, rax
100011c62:	call	0x100019920 ## symbol stub for: _strlen
100011c67:	lea	rdi, [rax + 0x1]
100011c6b:	call	0x100019848 ## symbol stub for: _malloc
100011c70:	test	rax, rax
100011c73:	je	0x100012012
100011c79:	mov	r12, rax
100011c7c:	mov	rdi, rax
100011c7f:	mov	rsi, rbx
100011c82:	call	0x100019914 ## symbol stub for: _strcpy
100011c87:	test	r14, r14
100011c8a:	cmove	r14, rbx
100011c8e:	mov	rdi, rbx
100011c91:	call	0x10000a6ea
100011c96:	mov	r13, rax
100011c99:	lea	rax, [rip + 0x17c60]
100011ca0:	mov	eax, dword ptr [rax]
100011ca2:	test	r13, r13
100011ca5:	je	0x100011d17
100011ca7:	mov	qword ptr [rbp - 0x50], r12
100011cab:	test	eax, eax
100011cad:	je	0x100011cc2
100011caf:	mov	rdi, r14
100011cb2:	mov	esi, dword ptr [rbp - 0x38]
100011cb5:	call	0x1000115ce
100011cba:	test	eax, eax
100011cbc:	je	0x100011d9f
100011cc2:	mov	r12, r14
100011cc5:	mov	dword ptr [r13 + 0x88], 0x1
100011cd0:	mov	r14, qword ptr [rbp - 0x48]
100011cd4:	mov	rdi, r14
100011cd7:	call	0x100019920 ## symbol stub for: _strlen
100011cdc:	lea	rdi, [rax + 0x1]
100011ce0:	call	0x100019848 ## symbol stub for: _malloc
100011ce5:	mov	qword ptr [r13 + 0x50], rax
100011ce9:	test	rax, rax
100011cec:	je	0x100011d81
100011cf2:	mov	rdi, rax
100011cf5:	mov	rsi, r14
100011cf8:	call	0x100019914 ## symbol stub for: _strcpy
100011cfd:	mov	rax, qword ptr [rbp - 0x50]
100011d01:	mov	qword ptr [r13 + 0x80], rax
100011d08:	mov	eax, dword ptr [rbp - 0x3c]
100011d0b:	mov	dword ptr [r13 + 0x94], eax
100011d12:	jmp	0x100011dce
100011d17:	test	eax, eax
100011d19:	je	0x100011d2e
100011d1b:	mov	rdi, r14
100011d1e:	mov	esi, dword ptr [rbp - 0x38]
100011d21:	call	0x1000115ce
100011d26:	test	eax, eax
100011d28:	je	0x100011fcb
100011d2e:	mov	qword ptr [rbp - 0x38], r14
100011d32:	mov	ecx, dword ptr [rip + 0x174e0]
100011d38:	cmp	ecx, -0x1
100011d3b:	mov	r14, qword ptr [rbp - 0x48]
100011d3f:	jne	0x100011e07
100011d45:	lea	rax, [rip + 0x1920c]
100011d4c:	mov	r15, qword ptr [rax]
100011d4f:	lea	rsi, [rip + 0xa7ac] ## literal pool for: "-"
100011d56:	mov	rdi, r15
100011d59:	call	0x10001990e ## symbol stub for: _strcmp
100011d5e:	test	eax, eax
100011d60:	je	0x100011dff
100011d66:	lea	rsi, [rip + 0x49693]
100011d6d:	mov	rdi, r15
100011d70:	call	0x1000198fc ## symbol stub for: _stat$INODE64
100011d75:	xor	ecx, ecx
100011d77:	test	eax, eax
100011d79:	sete	cl
100011d7c:	jmp	0x100011e01
100011d81:	cmp	r12, rbx
100011d84:	je	0x100011d8e
100011d86:	mov	rdi, r12
100011d89:	call	0x100019806 ## symbol stub for: _free
100011d8e:	mov	rdi, qword ptr [rbp - 0x30]
100011d92:	call	0x100019806 ## symbol stub for: _free
100011d97:	mov	rdi, rbx
100011d9a:	jmp	0x10001200d
100011d9f:	mov	r12, r14
100011da2:	lea	rax, [rip + 0x17903]
100011da9:	cmp	dword ptr [rax], 0x0
100011dac:	mov	r14, qword ptr [rbp - 0x48]
100011db0:	je	0x100011dce
100011db2:	lea	rax, [rip + 0x19177]
100011db9:	mov	rdi, qword ptr [rax]
100011dbc:	lea	rsi, [rip + 0x11681] ## literal pool for: "excluding %s\n"
100011dc3:	mov	rdx, qword ptr [rbp - 0x50]
100011dc7:	xor	eax, eax
100011dc9:	call	0x1000197ee ## symbol stub for: _fprintf
100011dce:	mov	rdi, qword ptr [rbp - 0x30]
100011dd2:	call	0x100019806 ## symbol stub for: _free
100011dd7:	mov	rdi, rbx
100011dda:	call	0x100019806 ## symbol stub for: _free
100011ddf:	cmp	qword ptr [rip + 0x178b2], r14
100011de6:	mov	r14, r12
100011de9:	jne	0x100011fcb
100011def:	mov	rax, qword ptr [r13 + 0x50]
100011df3:	mov	qword ptr [rip + 0x1789e], rax
100011dfa:	jmp	0x100011fcb
100011dff:	xor	ecx, ecx
100011e01:	mov	dword ptr [rip + 0x17411], ecx
100011e07:	cmp	ecx, 0x1
100011e0a:	jne	0x100011f22
100011e10:	lea	rsi, [rip + 0x495e9]
100011e17:	lea	r15, [rbp - 0xe0]
100011e1e:	mov	edx, 0x90
100011e23:	mov	rdi, r15
100011e26:	call	0x10001984e ## symbol stub for: _memcpy
100011e2b:	mov	rdi, r14
100011e2e:	mov	rsi, r15
100011e31:	call	0x1000198fc ## symbol stub for: _stat$INODE64
100011e36:	test	eax, eax
100011e38:	jne	0x100011f22
100011e3e:	movzx	eax, word ptr [rip + 0x495bf]
100011e45:	cmp	ax, word ptr [rbp - 0xdc]
100011e4c:	jne	0x100011f22
100011e52:	mov	rax, qword ptr [rip + 0x495af]
100011e59:	cmp	rax, qword ptr [rbp - 0xd8]
100011e60:	jne	0x100011f22
100011e66:	mov	eax, dword ptr [rip + 0x49594]
100011e6c:	cmp	eax, dword ptr [rbp - 0xe0]
100011e72:	jne	0x100011f22
100011e78:	mov	eax, dword ptr [rip + 0x49592]
100011e7e:	cmp	eax, dword ptr [rbp - 0xd0]
100011e84:	jne	0x100011f22
100011e8a:	mov	eax, dword ptr [rip + 0x49584]
100011e90:	cmp	eax, dword ptr [rbp - 0xcc]
100011e96:	jne	0x100011f22
100011e9c:	mov	rax, qword ptr [rip + 0x495bd]
100011ea3:	cmp	rax, qword ptr [rbp - 0x80]
100011ea7:	jne	0x100011f22
100011ea9:	mov	rax, qword ptr [rip + 0x49580]
100011eb0:	cmp	rax, qword ptr [rbp - 0xb0]
100011eb7:	jne	0x100011f22
100011eb9:	mov	rax, qword ptr [rip + 0x49580]
100011ec0:	cmp	rax, qword ptr [rbp - 0xa0]
100011ec7:	jne	0x100011f22
100011ec9:	lea	rax, [rip + 0x177dc]
100011ed0:	cmp	dword ptr [rax], 0x0
100011ed3:	je	0x100011ef5
100011ed5:	lea	rax, [rip + 0x19054]
100011edc:	mov	rcx, qword ptr [rax]
100011edf:	lea	rdi, [rip + 0x1156c] ## literal pool for: "file matches zip file -- skipping\n"
100011ee6:	mov	esi, 0x22
100011eeb:	mov	edx, 0x1
100011ef0:	call	0x10001981e ## symbol stub for: _fwrite
100011ef5:	cmp	qword ptr [rbp - 0x38], rbx
100011ef9:	je	0x100011f03
100011efb:	mov	rdi, rbx
100011efe:	call	0x100019806 ## symbol stub for: _free
100011f03:	xor	r15d, r15d
100011f06:	mov	rax, qword ptr [rbp - 0x30]
100011f0a:	cmp	qword ptr [rbp - 0x38], rax
100011f0e:	je	0x100011f19
100011f10:	mov	rdi, qword ptr [rbp - 0x38]
100011f14:	call	0x100019806 ## symbol stub for: _free
100011f19:	mov	rbx, qword ptr [rbp - 0x30]
100011f1d:	jmp	0x100012002
100011f22:	mov	edi, 0x40
100011f27:	call	0x100019848 ## symbol stub for: _malloc
100011f2c:	mov	r15, rax
100011f2f:	test	rax, rax
100011f32:	je	0x100011fd8
100011f38:	lea	r13, [rip + 0x18fe9]
100011f3f:	cmp	qword ptr [r13], -0x1
100011f44:	je	0x100011fd8
100011f4a:	mov	rdi, qword ptr [rbp - 0x48]
100011f4e:	call	0x100019920 ## symbol stub for: _strlen
100011f53:	lea	rdi, [rax + 0x1]
100011f57:	call	0x100019848 ## symbol stub for: _malloc
100011f5c:	mov	qword ptr [r15], rax
100011f5f:	test	rax, rax
100011f62:	je	0x100011fd8
100011f64:	mov	rdi, rax
100011f67:	mov	r14, qword ptr [rbp - 0x48]
100011f6b:	mov	rsi, r14
100011f6e:	call	0x100019914 ## symbol stub for: _strcpy
100011f73:	mov	rax, qword ptr [rbp - 0x30]
100011f77:	mov	qword ptr [r15 + 0x8], rax
100011f7b:	mov	qword ptr [r15 + 0x10], rbx
100011f7f:	mov	qword ptr [r15 + 0x18], r12
100011f83:	mov	eax, dword ptr [rbp - 0x3c]
100011f86:	mov	dword ptr [r15 + 0x20], eax
100011f8a:	lea	rax, [rip + 0x17507]
100011f91:	mov	rcx, qword ptr [rax]
100011f94:	mov	qword ptr [rcx], r15
100011f97:	mov	rcx, qword ptr [rax]
100011f9a:	mov	qword ptr [r15 + 0x30], rcx
100011f9e:	mov	rcx, r15
100011fa1:	add	rcx, 0x38
100011fa5:	inc	qword ptr [r13]
100011fa9:	mov	qword ptr [r15 + 0x38], 0x0
100011fb1:	mov	qword ptr [rax], rcx
100011fb4:	cmp	qword ptr [rip + 0x176dd], r14
100011fbb:	jne	0x100011fc7
100011fbd:	mov	rax, qword ptr [r15]
100011fc0:	mov	qword ptr [rip + 0x176d1], rax
100011fc7:	mov	r14, qword ptr [rbp - 0x38]
100011fcb:	xor	r15d, r15d
100011fce:	cmp	r14, rbx
100011fd1:	je	0x100012012
100011fd3:	mov	rdi, r14
100011fd6:	jmp	0x10001200d
100011fd8:	test	r15, r15
100011fdb:	je	0x100011fe5
100011fdd:	mov	rdi, r15
100011fe0:	call	0x100019806 ## symbol stub for: _free
100011fe5:	mov	rdi, qword ptr [rbp - 0x38]
100011fe9:	cmp	rdi, rbx
100011fec:	je	0x100011ff3
100011fee:	call	0x100019806 ## symbol stub for: _free
100011ff3:	mov	rdi, qword ptr [rbp - 0x30]
100011ff7:	call	0x100019806 ## symbol stub for: _free
100011ffc:	mov	r15d, 0x4
100012002:	mov	rdi, rbx
100012005:	call	0x100019806 ## symbol stub for: _free
10001200a:	mov	rdi, r12
10001200d:	call	0x100019806 ## symbol stub for: _free
100012012:	mov	eax, r15d
100012015:	add	rsp, 0xb8
10001201c:	pop	rbx
10001201d:	pop	r12
10001201f:	pop	r13
100012021:	pop	r14
100012023:	pop	r15
100012025:	pop	rbp
100012026:	ret
100012027:	push	rbp
100012028:	mov	rbp, rsp
10001202b:	mov	eax, 0x210000
100012030:	cmp	edi, 0x7bc
100012036:	jl	0x10001207c
100012038:	mov	eax, edi
10001203a:	shl	rax, 0x19
10001203e:	movabs	rdi, -0xf78000000
100012048:	add	rdi, rax
10001204b:	movsxd	rax, esi
10001204e:	shl	rax, 0x15
100012052:	movsxd	rdx, edx
100012055:	shl	rdx, 0x10
100012059:	or	rdx, rax
10001205c:	or	rdx, rdi
10001205f:	movsxd	rax, ecx
100012062:	shl	rax, 0xb
100012066:	movsxd	rcx, r8d
100012069:	shl	rcx, 0x5
10001206d:	or	rcx, rax
100012070:	movsxd	rax, r9d
100012073:	shr	rax
100012076:	or	rax, rcx
100012079:	or	rax, rdx
10001207c:	pop	rbp
10001207d:	ret
10001207e:	push	rbp
10001207f:	mov	rbp, rsp
100012082:	sub	rsp, 0x10
100012086:	mov	rax, qword ptr [rdi]
100012089:	inc	rax
10001208c:	and	rax, -0x2
100012090:	lea	rdi, [rbp - 0x8]
100012094:	mov	qword ptr [rdi], rax
100012097:	call	0x10001983c ## symbol stub for: _localtime
10001209c:	mov	rcx, rax
10001209f:	test	rax, rax
1000120a2:	jne	0x1000120c1
1000120a4:	xor	edi, edi
1000120a6:	call	0x10001994a ## symbol stub for: _time
1000120ab:	inc	rax
1000120ae:	and	rax, -0x2
1000120b2:	lea	rdi, [rbp - 0x8]
1000120b6:	mov	qword ptr [rdi], rax
1000120b9:	call	0x10001983c ## symbol stub for: _localtime
1000120be:	mov	rcx, rax
1000120c1:	mov	edx, dword ptr [rcx + 0x14]
1000120c4:	mov	eax, 0x210000
1000120c9:	cmp	edx, 0x50
1000120cc:	jl	0x10001211b
1000120ce:	shl	rdx, 0x19
1000120d2:	movsxd	rax, dword ptr [rcx]
1000120d5:	movsxd	r8, dword ptr [rcx + 0x4]
1000120d9:	movsxd	rdi, dword ptr [rcx + 0x8]
1000120dd:	movsxd	rsi, dword ptr [rcx + 0xc]
1000120e1:	movsxd	rcx, dword ptr [rcx + 0x10]
1000120e5:	shl	rcx, 0x15
1000120e9:	movabs	r9, -0xa0000000
1000120f3:	add	r9, rdx
1000120f6:	add	rcx, 0x200000
1000120fd:	shl	rsi, 0x10
100012101:	shl	rdi, 0xb
100012105:	or	rdi, rsi
100012108:	or	rdi, rcx
10001210b:	shl	r8, 0x5
10001210f:	shr	rax
100012112:	or	rax, r8
100012115:	or	rax, r9
100012118:	or	rax, rdi
10001211b:	add	rsp, 0x10
10001211f:	pop	rbp
100012120:	ret
100012121:	push	rbp
100012122:	mov	rbp, rsp
100012125:	and	edi, 0xf0000000
10001212b:	xor	eax, eax
10001212d:	cmp	edi, 0xa0000000
100012133:	sete	al
100012136:	pop	rbp
100012137:	ret
100012138:	push	rbp
100012139:	mov	rbp, rsp
10001213c:	push	rbx
10001213d:	push	rax
10001213e:	mov	rbx, rdi
100012141:	xor	edi, edi
100012143:	call	0x10001994a ## symbol stub for: _time
100012148:	lea	rdi, [rbp - 0x10]
10001214c:	mov	qword ptr [rdi], rax
10001214f:	call	0x10001983c ## symbol stub for: _localtime
100012154:	mov	dword ptr [rax + 0x20], 0xffffffff
10001215b:	lea	ecx, [rbx + rbx]
10001215e:	mov	edx, ebx
100012160:	shr	edx, 0x5
100012163:	mov	esi, ebx
100012165:	shr	esi, 0xb
100012168:	mov	edi, ebx
10001216a:	shr	edi, 0x10
10001216d:	movd	xmm0, ecx
100012171:	pinsrd	xmm0, edx, 0x1
100012177:	pinsrd	xmm0, esi, 0x2
10001217d:	pinsrd	xmm0, edi, 0x3
100012183:	pand	xmm0, xmmword ptr [rip + 0x7b75]
10001218b:	movdqu	xmmword ptr [rax], xmm0
10001218f:	mov	ecx, ebx
100012191:	shr	ecx, 0x15
100012194:	and	ecx, 0xf
100012197:	dec	ecx
100012199:	mov	dword ptr [rax + 0x10], ecx
10001219c:	shr	ebx, 0x19
10001219f:	add	ebx, 0x50
1000121a2:	mov	dword ptr [rax + 0x14], ebx
1000121a5:	mov	rdi, rax
1000121a8:	call	0x100019866 ## symbol stub for: _mktime
1000121ad:	add	rsp, 0x8
1000121b1:	pop	rbx
1000121b2:	pop	rbp
1000121b3:	ret
1000121b4:	push	rbp
1000121b5:	mov	rbp, rsp
1000121b8:	pop	rbp
1000121b9:	jmp	0x10001995c ## symbol stub for: _unlink
1000121be:	push	rbp
1000121bf:	mov	rbp, rsp
1000121c2:	push	r15
1000121c4:	push	r14
1000121c6:	push	r13
1000121c8:	push	r12
1000121ca:	push	rbx
1000121cb:	sub	rsp, 0x98
1000121d2:	mov	r14, rsi
1000121d5:	mov	r15, rdi
1000121d8:	lea	rsi, [rbp - 0xb8]
1000121df:	call	0x100019842 ## symbol stub for: _lstat$INODE64
1000121e4:	test	eax, eax
1000121e6:	je	0x100012212
1000121e8:	mov	rdi, r14
1000121eb:	mov	rsi, r15
1000121ee:	call	0x1000198cc ## symbol stub for: _rename
1000121f3:	test	eax, eax
1000121f5:	je	0x1000122fb
1000121fb:	call	0x100019764 ## symbol stub for: ___error
100012200:	mov	rcx, rax
100012203:	mov	eax, 0xf
100012208:	cmp	dword ptr [rcx], 0x12
10001220b:	je	0x100012233
10001220d:	jmp	0x1000122fd
100012212:	cmp	word ptr [rbp - 0xb2], 0x1
10001221a:	ja	0x100012233
10001221c:	movzx	eax, word ptr [rbp - 0xb4]
100012223:	and	eax, 0xf000
100012228:	cmp	eax, 0xa000
10001222d:	jne	0x1000122db
100012233:	lea	rsi, [rip + 0x9d76] ## literal pool for: "r"
10001223a:	mov	rdi, r14
10001223d:	call	0x1000197e8 ## symbol stub for: _fopen
100012242:	test	rax, rax
100012245:	je	0x1000122aa
100012247:	mov	rbx, rax
10001224a:	lea	rsi, [rip + 0xa625] ## literal pool for: "w"
100012251:	mov	rdi, r15
100012254:	call	0x1000197e8 ## symbol stub for: _fopen
100012259:	test	rax, rax
10001225c:	je	0x1000122cc
10001225e:	mov	r13, rax
100012261:	mov	rdi, rbx
100012264:	mov	rsi, rax
100012267:	mov	rdx, -0x1
10001226e:	call	0x10001230f
100012273:	mov	r12d, eax
100012276:	mov	rdi, rbx
100012279:	call	0x1000197be ## symbol stub for: _fclose
10001227e:	mov	rdi, r13
100012281:	call	0x1000197be ## symbol stub for: _fclose
100012286:	or	eax, r12d
100012289:	je	0x1000122f3
10001228b:	mov	rdi, r15
10001228e:	call	0x10001995c ## symbol stub for: _unlink
100012293:	cmp	r12d, 0xa
100012297:	mov	ecx, 0xe
10001229c:	mov	eax, r12d
10001229f:	cmove	eax, ecx
1000122a2:	test	r12d, r12d
1000122a5:	cmove	eax, ecx
1000122a8:	jmp	0x1000122fd
1000122aa:	lea	rax, [rip + 0x18c7f]
1000122b1:	mov	rdi, qword ptr [rax]
1000122b4:	lea	rsi, [rip + 0x111ba] ## literal pool for: " replace: can't open %s\n"
1000122bb:	mov	rdx, r14
1000122be:	xor	eax, eax
1000122c0:	call	0x1000197ee ## symbol stub for: _fprintf
1000122c5:	mov	eax, 0xa
1000122ca:	jmp	0x1000122fd
1000122cc:	mov	rdi, rbx
1000122cf:	call	0x1000197be ## symbol stub for: _fclose
1000122d4:	mov	eax, 0xf
1000122d9:	jmp	0x1000122fd
1000122db:	mov	rdi, r15
1000122de:	call	0x10001995c ## symbol stub for: _unlink
1000122e3:	mov	ecx, eax
1000122e5:	mov	eax, 0xf
1000122ea:	test	ecx, ecx
1000122ec:	jne	0x1000122fd
1000122ee:	jmp	0x1000121e8
1000122f3:	mov	rdi, r14
1000122f6:	call	0x10001995c ## symbol stub for: _unlink
1000122fb:	xor	eax, eax
1000122fd:	add	rsp, 0x98
100012304:	pop	rbx
100012305:	pop	r12
100012307:	pop	r13
100012309:	pop	r14
10001230b:	pop	r15
10001230d:	pop	rbp
10001230e:	ret
10001230f:	push	rbp
100012310:	mov	rbp, rsp
100012313:	push	r15
100012315:	push	r14
100012317:	push	r13
100012319:	push	r12
10001231b:	push	rbx
10001231c:	sub	rsp, 0x18
100012320:	mov	r13, rdx
100012323:	mov	qword ptr [rbp - 0x38], rsi
100012327:	mov	qword ptr [rbp - 0x30], rdi
10001232b:	mov	edi, 0x4000
100012330:	call	0x100019848 ## symbol stub for: _malloc
100012335:	test	rax, rax
100012338:	je	0x1000123a6
10001233a:	mov	r15, rax
10001233d:	test	r13, r13
100012340:	je	0x1000123c9
100012346:	xor	r12d, r12d
100012349:	mov	r14d, 0x4000
10001234f:	mov	rdx, r13
100012352:	sub	rdx, r12
100012355:	cmp	rdx, r14
100012358:	cmovae	rdx, r14
10001235c:	cmp	r13, -0x1
100012360:	cmove	rdx, r14
100012364:	mov	esi, 0x1
100012369:	mov	rdi, r15
10001236c:	mov	rcx, qword ptr [rbp - 0x30]
100012370:	call	0x100019800 ## symbol stub for: _fread
100012375:	test	rax, rax
100012378:	je	0x1000123ad
10001237a:	mov	rbx, rax
10001237d:	mov	esi, 0x1
100012382:	mov	rdi, r15
100012385:	mov	rdx, rax
100012388:	mov	rcx, qword ptr [rbp - 0x38]
10001238c:	call	0x10001981e ## symbol stub for: _fwrite
100012391:	cmp	rax, rbx
100012394:	jne	0x1000123d5
100012396:	add	r12, rbx
100012399:	cmp	r13, -0x1
10001239d:	je	0x10001234f
10001239f:	cmp	r12, r13
1000123a2:	jb	0x10001234f
1000123a4:	jmp	0x1000123c9
1000123a6:	mov	eax, 0x4
1000123ab:	jmp	0x100012402
1000123ad:	mov	rdi, qword ptr [rbp - 0x30]
1000123b1:	call	0x1000197d0 ## symbol stub for: _ferror
1000123b6:	test	eax, eax
1000123b8:	je	0x1000123c9
1000123ba:	mov	rdi, r15
1000123bd:	call	0x100019806 ## symbol stub for: _free
1000123c2:	mov	eax, 0xb
1000123c7:	jmp	0x100012402
1000123c9:	mov	rdi, r15
1000123cc:	call	0x100019806 ## symbol stub for: _free
1000123d1:	xor	eax, eax
1000123d3:	jmp	0x100012402
1000123d5:	mov	rdi, r15
1000123d8:	call	0x100019806 ## symbol stub for: _free
1000123dd:	lea	rax, [rip + 0x18b4c]
1000123e4:	mov	rcx, qword ptr [rax]
1000123e7:	lea	rdi, [rip + 0x110a0] ## literal pool for: " fcopy: write error\n"
1000123ee:	mov	esi, 0x14
1000123f3:	mov	edx, 0x1
1000123f8:	call	0x10001981e ## symbol stub for: _fwrite
1000123fd:	mov	eax, 0xa
100012402:	add	rsp, 0x18
100012406:	pop	rbx
100012407:	pop	r12
100012409:	pop	r13
10001240b:	pop	r14
10001240d:	pop	r15
10001240f:	pop	rbp
100012410:	ret
100012411:	push	rbp
100012412:	mov	rbp, rsp
100012415:	push	rbx
100012416:	sub	rsp, 0x98
10001241d:	lea	rbx, [rbp - 0x98]
100012424:	mov	rsi, rbx
100012427:	call	0x1000198fc ## symbol stub for: _stat$INODE64
10001242c:	xor	ecx, ecx
10001242e:	test	eax, eax
100012430:	movzx	eax, word ptr [rbx + 0x4]
100012434:	cmovne	eax, ecx
100012437:	add	rsp, 0x98
10001243e:	pop	rbx
10001243f:	pop	rbp
100012440:	ret
100012441:	push	rbp
100012442:	mov	rbp, rsp
100012445:	movzx	esi, si
100012448:	pop	rbp
100012449:	jmp	0x1000197a0 ## symbol stub for: _chmod
10001244e:	push	rbp
10001244f:	mov	rbp, rsp
100012452:	push	r14
100012454:	push	rbx
100012455:	lea	rax, [rip + 0x17354]
10001245c:	mov	r14, qword ptr [rax]
10001245f:	test	r14, r14
100012462:	je	0x1000124ba
100012464:	mov	rdi, r14
100012467:	call	0x100019920 ## symbol stub for: _strlen
10001246c:	lea	rdi, [rax + 0xc]
100012470:	call	0x100019848 ## symbol stub for: _malloc
100012475:	test	rax, rax
100012478:	je	0x1000124e9
10001247a:	mov	rbx, rax
10001247d:	mov	rdi, rax
100012480:	mov	rsi, r14
100012483:	call	0x100019914 ## symbol stub for: _strcpy
100012488:	cmp	byte ptr [rbx], 0x0
10001248b:	je	0x1000124a3
10001248d:	mov	rdi, rbx
100012490:	call	0x100019920 ## symbol stub for: _strlen
100012495:	mov	r14, -0x1
10001249c:	cmp	byte ptr [rax + rbx - 0x1], 0x2f
1000124a1:	je	0x1000124d5
1000124a3:	mov	rdi, rbx
1000124a6:	call	0x100019920 ## symbol stub for: _strlen
1000124ab:	mov	word ptr [rbx + rax], 0x2f
1000124b1:	mov	r14, -0x1
1000124b8:	jmp	0x1000124d5
1000124ba:	mov	r14d, 0xc
1000124c0:	mov	edi, 0xc
1000124c5:	call	0x100019848 ## symbol stub for: _malloc
1000124ca:	test	rax, rax
1000124cd:	je	0x1000124e9
1000124cf:	mov	rbx, rax
1000124d2:	mov	byte ptr [rax], 0x0
1000124d5:	lea	rsi, [rip + 0xa8a2] ## literal pool for: "ziXXXXXX"
1000124dc:	mov	rdi, rbx
1000124df:	mov	rdx, r14
1000124e2:	call	0x10001977c ## symbol stub for: ___strcat_chk
1000124e7:	jmp	0x1000124eb
1000124e9:	xor	ebx, ebx
1000124eb:	mov	rax, rbx
1000124ee:	pop	rbx
1000124ef:	pop	r14
1000124f1:	pop	rbp
1000124f2:	ret
1000124f3:	push	rbp
1000124f4:	mov	rbp, rsp
1000124f7:	push	r15
1000124f9:	push	r14
1000124fb:	push	r13
1000124fd:	push	r12
1000124ff:	push	rbx
100012500:	sub	rsp, 0x38
100012504:	mov	qword ptr [rbp - 0x50], rdi
100012508:	mov	edi, 0x4000
10001250d:	call	0x100019848 ## symbol stub for: _malloc
100012512:	mov	ecx, 0x4
100012517:	test	rax, rax
10001251a:	je	0x100012d4a
100012520:	lea	rcx, [rip + 0x1726d]
100012527:	cmp	dword ptr [rcx], 0x0
10001252a:	je	0x100012546
10001252c:	lea	rcx, [rip + 0x171dd]
100012533:	cmp	dword ptr [rcx], 0x0
100012536:	jne	0x100012546
100012538:	lea	rcx, [rip + 0x171c1]
10001253f:	mov	qword ptr [rcx], -0x1
100012546:	lea	rcx, [rip + 0x17163]
10001254d:	cmp	qword ptr [rbp - 0x50], -0x2
100012552:	mov	qword ptr [rbp - 0x38], rax
100012556:	jne	0x100012586
100012558:	cmp	dword ptr [rcx], 0x2
10001255b:	jne	0x100012586
10001255d:	lea	rax, [rip + 0x1729c]
100012564:	mov	rdi, qword ptr [rax]
100012567:	call	0x100019818 ## symbol stub for: _ftello
10001256c:	mov	qword ptr [rbp - 0x58], rax
100012570:	xor	eax, eax
100012572:	mov	dword ptr [rbp - 0x30], eax
100012575:	lea	rcx, [rip + 0x1715c]
10001257c:	mov	dword ptr [rcx], eax
10001257e:	mov	byte ptr [rbp - 0x29], 0x1
100012582:	mov	al, 0x1
100012584:	jmp	0x1000125b0
100012586:	lea	rax, [rip + 0x1714b]
10001258d:	mov	dword ptr [rax], 0x0
100012593:	mov	rax, qword ptr [rbp - 0x50]
100012597:	cmp	rax, -0x1
10001259b:	sete	byte ptr [rbp - 0x29]
10001259f:	test	rax, rax
1000125a2:	je	0x100012c7d
1000125a8:	xor	eax, eax
1000125aa:	xor	ecx, ecx
1000125ac:	mov	qword ptr [rbp - 0x58], rcx
1000125b0:	mov	qword ptr [rbp - 0x60], rax
1000125b4:	xor	al, 0x1
1000125b6:	mov	byte ptr [rbp - 0x2a], al
1000125b9:	xor	eax, eax
1000125bb:	mov	qword ptr [rbp - 0x48], rax
1000125bf:	mov	r15, qword ptr [rbp - 0x50]
1000125c3:	mov	rax, qword ptr [rbp - 0x48]
1000125c7:	sub	r15, rax
1000125ca:	mov	qword ptr [rbp - 0x40], rax
1000125ce:	mov	eax, 0x4000
1000125d3:	cmp	r15, rax
1000125d6:	mov	r13d, 0x4000
1000125dc:	cmovb	r13, r15
1000125e0:	cmp	byte ptr [rbp - 0x29], 0x0
1000125e4:	cmovne	r13, rax
1000125e8:	lea	rbx, [rip + 0x17211]
1000125ef:	mov	rdi, qword ptr [rbx]
1000125f2:	call	0x100019818 ## symbol stub for: _ftello
1000125f7:	mov	r14, rax
1000125fa:	mov	rcx, qword ptr [rbx]
1000125fd:	mov	esi, 0x1
100012602:	mov	rdi, qword ptr [rbp - 0x38]
100012606:	mov	rdx, r13
100012609:	call	0x100019800 ## symbol stub for: _fread
10001260e:	test	rax, rax
100012611:	je	0x100012c46
100012617:	mov	r12, rax
10001261a:	cmp	byte ptr [rbp - 0x60], 0x0
10001261e:	je	0x10001282e
100012624:	xor	eax, eax
100012626:	lea	rcx, [rip + 0x170b3]
10001262d:	mov	qword ptr [rcx], rax
100012630:	lea	rcx, [rip + 0x170b1]
100012637:	mov	qword ptr [rcx], rax
10001263a:	lea	rcx, [rip + 0x170af]
100012641:	mov	qword ptr [rcx], rax
100012644:	mov	r13, qword ptr [rbp - 0x38]
100012648:	cmp	byte ptr [r13], 0x50
10001264d:	jne	0x100012788
100012653:	cmp	byte ptr [r13 + 0x1], 0x4b
100012658:	jne	0x100012788
10001265e:	cmp	byte ptr [r13 + 0x2], 0x7
100012663:	jne	0x100012788
100012669:	cmp	byte ptr [r13 + 0x3], 0x8
10001266e:	jne	0x100012788
100012674:	lea	rax, [rip + 0x1705d]
10001267b:	mov	dword ptr [rax], 0x0
100012681:	lea	rax, [rip + 0x17118]
100012688:	cmp	dword ptr [rax], 0x0
10001268b:	je	0x1000126d2
10001268d:	cmp	r12, 0x18
100012691:	jb	0x10001283e
100012697:	mov	eax, dword ptr [r13 + 0x4]
10001269b:	lea	rcx, [rip + 0x1703e]
1000126a2:	mov	qword ptr [rcx], rax
1000126a5:	mov	rax, qword ptr [r13 + 0x8]
1000126a9:	lea	rcx, [rip + 0x17038]
1000126b0:	mov	qword ptr [rcx], rax
1000126b3:	mov	rcx, qword ptr [r13 + 0x10]
1000126b7:	lea	rdx, [rip + 0x17032]
1000126be:	mov	qword ptr [rdx], rcx
1000126c1:	mov	rcx, r14
1000126c4:	sub	rcx, qword ptr [rbp - 0x58]
1000126c8:	cmp	rcx, rax
1000126cb:	jne	0x100012716
1000126cd:	jmp	0x100012847
1000126d2:	cmp	r12, 0x10
1000126d6:	jb	0x10001283e
1000126dc:	mov	eax, dword ptr [r13 + 0x4]
1000126e0:	lea	rcx, [rip + 0x16ff9]
1000126e7:	mov	qword ptr [rcx], rax
1000126ea:	mov	eax, dword ptr [r13 + 0x8]
1000126ee:	lea	rcx, [rip + 0x16ff3]
1000126f5:	mov	qword ptr [rcx], rax
1000126f8:	mov	ecx, dword ptr [r13 + 0xc]
1000126fc:	lea	rdx, [rip + 0x16fed]
100012703:	mov	qword ptr [rdx], rcx
100012706:	mov	rcx, r14
100012709:	sub	rcx, qword ptr [rbp - 0x58]
10001270d:	cmp	rcx, rax
100012710:	je	0x1000128a7
100012716:	lea	rax, [rip + 0x170e3]
10001271d:	mov	rdi, qword ptr [rax]
100012720:	add	r14, 0x4
100012724:	mov	rsi, r14
100012727:	xor	edx, edx
100012729:	call	0x10001980c ## symbol stub for: _fseeko
10001272e:	test	eax, eax
100012730:	je	0x100012743
100012732:	mov	edi, 0xb
100012737:	lea	rsi, [rip + 0x10d65] ## literal pool for: "seek failed reading descriptor"
10001273e:	call	0x1000037b0
100012743:	mov	esi, 0x1
100012748:	mov	edx, 0x4
10001274d:	mov	rdi, r13
100012750:	xor	ecx, ecx
100012752:	call	0x100012d64
100012757:	cmp	rax, 0x4
10001275b:	jne	0x100012c8d
100012761:	mov	rax, qword ptr [rbp - 0x40]
100012765:	add	rax, 0x4
100012769:	mov	qword ptr [rbp - 0x40], rax
10001276d:	cmp	rax, qword ptr [rbp - 0x50]
100012771:	setb	al
100012774:	or	al, byte ptr [rbp - 0x29]
100012777:	add	r15, -0x4
10001277b:	test	al, al
10001277d:	jne	0x1000125ce
100012783:	jmp	0x100012c7d
100012788:	cmp	r12, 0x1
10001278c:	mov	rax, r12
10001278f:	mov	ecx, 0x1
100012794:	cmovbe	rax, rcx
100012798:	xor	ebx, ebx
10001279a:	mov	r14, qword ptr [rbp - 0x40]
10001279e:	mov	ecx, 0x1
1000127a3:	mov	dl, byte ptr [rbp + rcx - 0x30]
1000127a7:	mov	byte ptr [rbp + rcx - 0x31], dl
1000127ab:	inc	rcx
1000127ae:	cmp	rcx, 0x4
1000127b2:	jne	0x1000127a3
1000127b4:	mov	cl, byte ptr [r13 + rbx]
1000127b9:	mov	byte ptr [rbp - 0x2d], cl
1000127bc:	cmp	byte ptr [rbp - 0x30], 0x50
1000127c0:	jne	0x1000127d3
1000127c2:	cmp	byte ptr [rbp - 0x2f], 0x4b
1000127c6:	jne	0x1000127d3
1000127c8:	cmp	cl, 0x8
1000127cb:	jne	0x1000127d3
1000127cd:	cmp	byte ptr [rbp - 0x2e], 0x7
1000127d1:	je	0x1000127e3
1000127d3:	inc	rbx
1000127d6:	cmp	rbx, rax
1000127d9:	jne	0x10001279e
1000127db:	mov	rbx, r12
1000127de:	jmp	0x100012905
1000127e3:	add	rbx, -0x3
1000127e7:	lea	rax, [rip + 0x17012]
1000127ee:	mov	rdi, qword ptr [rax]
1000127f1:	lea	rax, [rip + 0x170a0]
1000127f8:	mov	rsi, qword ptr [rax]
1000127fb:	add	rsi, rbx
1000127fe:	xor	edx, edx
100012800:	call	0x10001980c ## symbol stub for: _fseeko
100012805:	test	eax, eax
100012807:	je	0x10001281a
100012809:	mov	edi, 0xb
10001280e:	lea	rsi, [rip + 0x10c8e] ## literal pool for: "seek failed reading descriptor"
100012815:	call	0x1000037b0
10001281a:	lea	rax, [rip + 0x16fdf]
100012821:	mov	rdi, qword ptr [rax]
100012824:	call	0x100019818 ## symbol stub for: _ftello
100012829:	jmp	0x100012905
10001282e:	mov	r14, qword ptr [rbp - 0x48]
100012832:	mov	rbx, r12
100012835:	mov	r13, qword ptr [rbp - 0x38]
100012839:	jmp	0x100012905
10001283e:	mov	r14, qword ptr [rbp - 0x40]
100012842:	jmp	0x10001291b
100012847:	lea	rax, [rip + 0x16e8a]
10001284e:	mov	dword ptr [rax], 0x1
100012854:	lea	rbx, [rip + 0x16fa5]
10001285b:	mov	rdi, qword ptr [rbx]
10001285e:	call	0x100019818 ## symbol stub for: _ftello
100012863:	mov	rdi, qword ptr [rbx]
100012866:	add	r14, 0x18
10001286a:	mov	rsi, r14
10001286d:	xor	edx, edx
10001286f:	call	0x10001980c ## symbol stub for: _fseeko
100012874:	test	eax, eax
100012876:	mov	r14, qword ptr [rbp - 0x40]
10001287a:	je	0x10001288d
10001287c:	mov	edi, 0xb
100012881:	lea	rsi, [rip + 0x10c1b] ## literal pool for: "seek failed reading descriptor"
100012888:	call	0x1000037b0
10001288d:	lea	rax, [rip + 0x16f6c]
100012894:	mov	rdi, qword ptr [rax]
100012897:	call	0x100019818 ## symbol stub for: _ftello
10001289c:	mov	qword ptr [rbp - 0x58], rax
1000128a0:	mov	ebx, 0x18
1000128a5:	jmp	0x100012905
1000128a7:	lea	rax, [rip + 0x16e2a]
1000128ae:	mov	dword ptr [rax], 0x1
1000128b4:	lea	rbx, [rip + 0x16f45]
1000128bb:	mov	rdi, qword ptr [rbx]
1000128be:	call	0x100019818 ## symbol stub for: _ftello
1000128c3:	mov	rdi, qword ptr [rbx]
1000128c6:	add	r14, 0x10
1000128ca:	mov	rsi, r14
1000128cd:	xor	edx, edx
1000128cf:	call	0x10001980c ## symbol stub for: _fseeko
1000128d4:	test	eax, eax
1000128d6:	mov	r14, qword ptr [rbp - 0x40]
1000128da:	je	0x1000128ed
1000128dc:	mov	edi, 0xb
1000128e1:	lea	rsi, [rip + 0x10bbb] ## literal pool for: "seek failed reading descriptor"
1000128e8:	call	0x1000037b0
1000128ed:	lea	rax, [rip + 0x16f0c]
1000128f4:	mov	rdi, qword ptr [rax]
1000128f7:	call	0x100019818 ## symbol stub for: _ftello
1000128fc:	mov	qword ptr [rbp - 0x58], rax
100012900:	mov	ebx, 0x10
100012905:	lea	rax, [rip + 0x16dcc]
10001290c:	cmp	dword ptr [rax], 0x0
10001290f:	mov	r12, rbx
100012912:	mov	rax, r14
100012915:	mov	qword ptr [rbp - 0x48], r14
100012919:	jne	0x100012940
10001291b:	mov	esi, 0x1
100012920:	mov	rdi, r13
100012923:	mov	rdx, r12
100012926:	xor	ecx, ecx
100012928:	call	0x100012d64
10001292d:	cmp	rax, r12
100012930:	jne	0x100012c8d
100012936:	add	r14, r12
100012939:	mov	rax, r14
10001293c:	mov	qword ptr [rbp - 0x48], r14
100012940:	lea	rax, [rip + 0x16e4d]
100012947:	cmp	dword ptr [rax], 0x0
10001294a:	je	0x100012a2d
100012950:	lea	rax, [rip + 0x16db9]
100012957:	cmp	dword ptr [rax], 0x0
10001295a:	jne	0x100012a2d
100012960:	lea	rax, [rip + 0x16d91]
100012967:	mov	rcx, qword ptr [rax]
10001296a:	test	rcx, rcx
10001296d:	jle	0x1000129dc
10001296f:	lea	rax, [rip + 0x16ae6]
100012976:	cmp	dword ptr [rax], 0x0
100012979:	lea	rax, [rip + 0x16d80]
100012980:	mov	rax, qword ptr [rax]
100012983:	je	0x1000129c1
100012985:	cmp	rax, -0x1
100012989:	jne	0x1000129c1
10001298b:	lea	rbx, [rip + 0x1859e]
100012992:	mov	rsi, qword ptr [rbx]
100012995:	mov	edi, 0x20
10001299a:	call	0x100019896 ## symbol stub for: _putc
10001299f:	mov	rdi, qword ptr [rbx]
1000129a2:	call	0x1000197d6 ## symbol stub for: _fflush
1000129a7:	lea	rcx, [rip + 0x16d52]
1000129ae:	mov	rax, qword ptr [rcx]
1000129b1:	inc	rax
1000129b4:	mov	qword ptr [rcx], rax
1000129b7:	lea	rcx, [rip + 0x16d3a]
1000129be:	mov	rcx, qword ptr [rcx]
1000129c1:	add	rax, r12
1000129c4:	cmp	rcx, rax
1000129c7:	mov	edx, 0x0
1000129cc:	cmovle	rax, rdx
1000129d0:	lea	rdx, [rip + 0x16d29]
1000129d7:	mov	qword ptr [rdx], rax
1000129da:	jmp	0x1000129e6
1000129dc:	lea	rax, [rip + 0x16d1d]
1000129e3:	mov	rax, qword ptr [rax]
1000129e6:	lea	rdx, [rip + 0x16a6f]
1000129ed:	mov	edx, dword ptr [rdx]
1000129ef:	lea	rsi, [rip + 0x16cb6]
1000129f6:	or	edx, dword ptr [rsi]
1000129f8:	je	0x100012a2d
1000129fa:	test	rcx, rcx
1000129fd:	je	0x100012a2d
1000129ff:	test	rax, rax
100012a02:	jne	0x100012a2d
100012a04:	lea	rbx, [rip + 0x18525]
100012a0b:	mov	rsi, qword ptr [rbx]
100012a0e:	mov	edi, 0x2e
100012a13:	call	0x100019896 ## symbol stub for: _putc
100012a18:	mov	rdi, qword ptr [rbx]
100012a1b:	call	0x1000197d6 ## symbol stub for: _fflush
100012a20:	lea	rax, [rip + 0x16ea5]
100012a27:	mov	dword ptr [rax], 0x1
100012a2d:	lea	rax, [rip + 0x16ca4]
100012a34:	cmp	dword ptr [rax], 0x0
100012a37:	jne	0x100012c7d
100012a3d:	mov	rcx, qword ptr [rbp - 0x50]
100012a41:	cmp	rcx, -0x1
100012a45:	setne	al
100012a48:	cmp	qword ptr [rbp - 0x48], rcx
100012a4c:	setb	cl
100012a4f:	and	cl, al
100012a51:	test	byte ptr [rbp - 0x2a], cl
100012a54:	je	0x100012b42
100012a5a:	lea	rax, [rip + 0x16d9f]
100012a61:	mov	rdi, qword ptr [rax]
100012a64:	call	0x1000197ca ## symbol stub for: _feof
100012a69:	test	eax, eax
100012a6b:	je	0x100012b42
100012a71:	lea	rax, [rip + 0x16db8]
100012a78:	mov	rsi, qword ptr [rax]
100012a7b:	inc	rsi
100012a7e:	mov	qword ptr [rax], rsi
100012a81:	lea	rax, [rip + 0x16da0]
100012a88:	mov	rax, qword ptr [rax]
100012a8b:	cmp	rsi, rax
100012a8e:	jae	0x100012c7d
100012a94:	dec	rax
100012a97:	lea	rcx, [rip + 0x16d6a]
100012a9e:	mov	r14, qword ptr [rcx]
100012aa1:	cmp	rsi, rax
100012aa4:	jne	0x100012adb
100012aa6:	mov	rdi, r14
100012aa9:	call	0x100019920 ## symbol stub for: _strlen
100012aae:	lea	rdi, [rax + 0x1]
100012ab2:	call	0x100019848 ## symbol stub for: _malloc
100012ab7:	test	rax, rax
100012aba:	mov	r15, qword ptr [rbp - 0x38]
100012abe:	lea	r13, [rip + 0x16beb]
100012ac5:	je	0x100012cd6
100012acb:	mov	r12, rax
100012ace:	mov	rdi, rax
100012ad1:	mov	rsi, r14
100012ad4:	call	0x100019914 ## symbol stub for: _strcpy
100012ad9:	jmp	0x100012af1
100012adb:	mov	rdi, r14
100012ade:	call	0x10001338c
100012ae3:	mov	r12, rax
100012ae6:	mov	r15, qword ptr [rbp - 0x38]
100012aea:	lea	r13, [rip + 0x16bbf]
100012af1:	lea	rbx, [rip + 0x16d08]
100012af8:	mov	rdi, qword ptr [rbx]
100012afb:	call	0x1000197be ## symbol stub for: _fclose
100012b00:	mov	rdi, r12
100012b03:	lea	rsi, [rip + 0x94a6] ## literal pool for: "r"
100012b0a:	call	0x1000197e8 ## symbol stub for: _fopen
100012b0f:	mov	qword ptr [rbx], rax
100012b12:	mov	ebx, dword ptr [r13]
100012b16:	test	rax, rax
100012b19:	lea	r14, [rip + 0x16d10]
100012b20:	je	0x100012b5b
100012b22:	lea	rax, [rip + 0x16ba7]
100012b29:	mov	r14, qword ptr [rax]
100012b2c:	mov	rdi, r12
100012b2f:	call	0x100019806 ## symbol stub for: _free
100012b34:	cmp	ebx, 0x2
100012b37:	jne	0x100012b42
100012b39:	test	r14, r14
100012b3c:	jne	0x100012d5b
100012b42:	mov	rax, qword ptr [rbp - 0x48]
100012b46:	cmp	rax, qword ptr [rbp - 0x50]
100012b4a:	setb	al
100012b4d:	or	al, byte ptr [rbp - 0x29]
100012b50:	jne	0x1000125bf
100012b56:	jmp	0x100012c7d
100012b5b:	cmp	ebx, 0x1
100012b5e:	jne	0x100012b71
100012b60:	lea	rax, [rip + 0x16b69]
100012b67:	cmp	qword ptr [rax], 0x0
100012b6b:	jne	0x100012cbf
100012b71:	mov	rdi, qword ptr [r14]
100012b74:	call	0x100013490
100012b79:	cmp	eax, 0x2
100012b7c:	je	0x100012cec
100012b82:	cmp	eax, 0x9
100012b85:	je	0x100012d26
100012b8b:	cmp	dword ptr [r13], 0x2
100012b90:	jne	0x100012bb9
100012b92:	lea	rax, [rip + 0x16b37]
100012b99:	cmp	qword ptr [rax], 0x0
100012b9d:	je	0x100012bb9
100012b9f:	lea	rdi, [rip + 0x1091c] ## literal pool for: "skipping split file: "
100012ba6:	mov	rsi, r12
100012ba9:	call	0x100003e67
100012bae:	mov	rsi, qword ptr [r14]
100012bb1:	inc	rsi
100012bb4:	mov	qword ptr [r14], rsi
100012bb7:	jmp	0x100012bbc
100012bb9:	mov	rsi, qword ptr [r14]
100012bbc:	lea	rax, [rip + 0x16c65]
100012bc3:	mov	rax, qword ptr [rax]
100012bc6:	dec	rax
100012bc9:	cmp	rsi, rax
100012bcc:	jne	0x100012c09
100012bce:	lea	rax, [rip + 0x16c33]
100012bd5:	mov	r14, qword ptr [rax]
100012bd8:	mov	rdi, r14
100012bdb:	call	0x100019920 ## symbol stub for: _strlen
100012be0:	lea	rdi, [rax + 0x1]
100012be4:	call	0x100019848 ## symbol stub for: _malloc
100012be9:	test	rax, rax
100012bec:	je	0x100012cd6
100012bf2:	mov	r12, rax
100012bf5:	mov	rdi, rax
100012bf8:	mov	rsi, r14
100012bfb:	call	0x100019914 ## symbol stub for: _strcpy
100012c00:	lea	r14, [rip + 0x16c29]
100012c07:	jmp	0x100012c1b
100012c09:	lea	rax, [rip + 0x18348]
100012c10:	mov	rdi, qword ptr [rax]
100012c13:	call	0x10001338c
100012c18:	mov	r12, rax
100012c1b:	mov	rdi, r12
100012c1e:	lea	rsi, [rip + 0x938b] ## literal pool for: "r"
100012c25:	call	0x1000197e8 ## symbol stub for: _fopen
100012c2a:	lea	rcx, [rip + 0x16bcf]
100012c31:	mov	qword ptr [rcx], rax
100012c34:	mov	ebx, dword ptr [r13]
100012c38:	test	rax, rax
100012c3b:	je	0x100012b5b
100012c41:	jmp	0x100012b22
100012c46:	test	r13, r13
100012c49:	je	0x100012c57
100012c4b:	lea	rax, [rip + 0x16a5e]
100012c52:	cmp	dword ptr [rax], 0x2
100012c55:	je	0x100012c6a
100012c57:	lea	rax, [rip + 0x16ba2]
100012c5e:	mov	rdi, qword ptr [rax]
100012c61:	call	0x1000197d0 ## symbol stub for: _ferror
100012c66:	test	eax, eax
100012c68:	je	0x100012c7d
100012c6a:	mov	rdi, qword ptr [rbp - 0x38]
100012c6e:	call	0x100019806 ## symbol stub for: _free
100012c73:	mov	ecx, 0xb
100012c78:	jmp	0x100012d4a
100012c7d:	mov	rdi, qword ptr [rbp - 0x38]
100012c81:	call	0x100019806 ## symbol stub for: _free
100012c86:	xor	ecx, ecx
100012c88:	jmp	0x100012d4a
100012c8d:	mov	rdi, r13
100012c90:	call	0x100019806 ## symbol stub for: _free
100012c95:	lea	rax, [rip + 0x18294]
100012c9c:	mov	rcx, qword ptr [rax]
100012c9f:	lea	rdi, [rip + 0x107e8] ## literal pool for: " fcopy: write error\n"
100012ca6:	mov	esi, 0x14
100012cab:	mov	edx, 0x1
100012cb0:	call	0x10001981e ## symbol stub for: _fwrite
100012cb5:	mov	ecx, 0xa
100012cba:	jmp	0x100012d4a
100012cbf:	mov	rdi, r12
100012cc2:	call	0x100019806 ## symbol stub for: _free
100012cc7:	mov	rdi, r15
100012cca:	call	0x100019806 ## symbol stub for: _free
100012ccf:	mov	ecx, 0x3
100012cd4:	jmp	0x100012d4a
100012cd6:	lea	rdi, [rip + 0xff00] ## literal pool for: "reading archive: "
100012cdd:	mov	rsi, r14
100012ce0:	call	0x100003e67
100012ce5:	mov	ecx, 0x4
100012cea:	jmp	0x100012d4a
100012cec:	lea	r14, [rip + 0x7ac4] ## literal pool for: ""
100012cf3:	mov	rdi, r14
100012cf6:	mov	esi, 0x1
100012cfb:	call	0x100003c73
100012d00:	lea	rdi, [rip + 0xf7db] ## literal pool for: "user ended reading - closing archive"
100012d07:	mov	rsi, r14
100012d0a:	call	0x100003e67
100012d0f:	mov	rdi, r12
100012d12:	call	0x100019806 ## symbol stub for: _free
100012d17:	mov	rdi, r15
100012d1a:	call	0x100019806 ## symbol stub for: _free
100012d1f:	mov	ecx, 0x2
100012d24:	jmp	0x100012d4a
100012d26:	lea	rdi, [rip + 0xf79e] ## literal pool for: "could not find split: "
100012d2d:	mov	rsi, r12
100012d30:	call	0x100003e67
100012d35:	mov	rdi, r12
100012d38:	call	0x100019806 ## symbol stub for: _free
100012d3d:	mov	rdi, r15
100012d40:	call	0x100019806 ## symbol stub for: _free
100012d45:	mov	ecx, 0x9
100012d4a:	mov	eax, ecx
100012d4c:	add	rsp, 0x38
100012d50:	pop	rbx
100012d51:	pop	r12
100012d53:	pop	r13
100012d55:	pop	r14
100012d57:	pop	r15
100012d59:	pop	rbp
100012d5a:	ret
100012d5b:	mov	rdi, qword ptr [rbp - 0x38]
100012d5f:	jmp	0x100012cca
100012d64:	push	rbp
100012d65:	mov	rbp, rsp
100012d68:	push	r15
100012d6a:	push	r14
100012d6c:	push	r13
100012d6e:	push	r12
100012d70:	push	rbx
100012d71:	sub	rsp, 0x18
100012d75:	mov	r14d, ecx
100012d78:	mov	rbx, rdx
100012d7b:	mov	qword ptr [rbp - 0x38], rdi
100012d7f:	imul	rbx, rsi
100012d83:	cmp	ecx, 0x1
100012d86:	jne	0x100012dd4
100012d88:	lea	rax, [rip + 0x16b31]
100012d8f:	mov	qword ptr [rax], 0x0
100012d96:	lea	rax, [rip + 0x16a5b]
100012d9d:	mov	rax, qword ptr [rax]
100012da0:	lea	rcx, [rip + 0x16ae1]
100012da7:	mov	qword ptr [rcx], rax
100012daa:	lea	rax, [rip + 0x16a9f]
100012db1:	mov	rax, qword ptr [rax]
100012db4:	lea	rcx, [rip + 0x16a8d]
100012dbb:	mov	qword ptr [rcx], rax
100012dbe:	lea	rax, [rip + 0x16ad3]
100012dc5:	mov	rax, qword ptr [rax]
100012dc8:	lea	rcx, [rip + 0x16ac1]
100012dcf:	mov	qword ptr [rcx], rax
100012dd2:	jmp	0x100012dde
100012dd4:	lea	rax, [rip + 0x16abd]
100012ddb:	mov	rax, qword ptr [rax]
100012dde:	lea	rcx, [rip + 0x16ac3]
100012de5:	mov	rcx, qword ptr [rcx]
100012de8:	mov	rdi, rcx
100012deb:	sub	rdi, rax
100012dee:	test	rcx, rcx
100012df1:	cmove	rdi, rbx
100012df5:	lea	ecx, [r14 - 0x1]
100012df9:	xor	edx, edx
100012dfb:	mov	dword ptr [rbp - 0x2c], ecx
100012dfe:	cmp	ecx, 0x3
100012e01:	cmovae	rdx, rdi
100012e05:	cmp	rbx, rdi
100012e08:	cmovbe	rdx, rbx
100012e0c:	cmp	r14d, 0x2
100012e10:	jne	0x100012e4a
100012e12:	lea	rcx, [rip + 0x16677]
100012e19:	cmp	qword ptr [rcx], -0x1
100012e1d:	jne	0x100012e36
100012e1f:	lea	rdi, [rip + 0x16a2a]
100012e26:	mov	rdi, qword ptr [rdi]
100012e29:	mov	qword ptr [rcx], rdi
100012e2c:	lea	rcx, [rip + 0x16a25]
100012e33:	mov	qword ptr [rcx], rax
100012e36:	lea	rcx, [rip + 0x16a23]
100012e3d:	inc	qword ptr [rcx]
100012e40:	lea	rcx, [rip + 0x16a21]
100012e47:	inc	qword ptr [rcx]
100012e4a:	test	rdx, rdx
100012e4d:	je	0x100012e89
100012e4f:	lea	rax, [rip + 0x169a2]
100012e56:	mov	rcx, qword ptr [rax]
100012e59:	mov	rdi, qword ptr [rbp - 0x38]
100012e5d:	call	0x10001981e ## symbol stub for: _fwrite
100012e62:	mov	r13, rax
100012e65:	mov	r12, rbx
100012e68:	sub	r12, rax
100012e6b:	lea	rcx, [rip + 0x16a26]
100012e72:	add	rax, qword ptr [rcx]
100012e75:	mov	qword ptr [rcx], rax
100012e78:	test	r14d, r14d
100012e7b:	jne	0x100012e8f
100012e7d:	lea	rcx, [rip + 0x16a3c]
100012e84:	add	qword ptr [rcx], r13
100012e87:	jmp	0x100012e8f
100012e89:	xor	r13d, r13d
100012e8c:	mov	r12, rbx
100012e8f:	test	r12, r12
100012e92:	je	0x1000132c2
100012e98:	lea	rcx, [rip + 0x16a05]
100012e9f:	mov	ecx, dword ptr [rcx]
100012ea1:	test	ecx, ecx
100012ea3:	je	0x100012f65
100012ea9:	lea	rdx, [rip + 0x16a08]
100012eb0:	add	qword ptr [rdx], rax
100012eb3:	cmp	ecx, 0x1
100012eb6:	mov	qword ptr [rbp - 0x40], rbx
100012eba:	jne	0x100012ee9
100012ebc:	lea	rax, [rip + 0x16935]
100012ec3:	mov	rdi, qword ptr [rax]
100012ec6:	call	0x1000197d0 ## symbol stub for: _ferror
100012ecb:	test	eax, eax
100012ecd:	je	0x100012f34
100012ecf:	lea	rsi, [rip + 0x108c8] ## literal pool for: "Could not write split"
100012ed6:	mov	edi, 0xe
100012edb:	call	0x1000037b0
100012ee0:	lea	rax, [rip + 0x169bd]
100012ee7:	mov	ecx, dword ptr [rax]
100012ee9:	cmp	ecx, 0x2
100012eec:	jne	0x100012f2f
100012eee:	lea	rax, [rip + 0x16903]
100012ef5:	mov	rdi, qword ptr [rax]
100012ef8:	call	0x1000197d0 ## symbol stub for: _ferror
100012efd:	test	eax, eax
100012eff:	je	0x100012f92
100012f05:	lea	rax, [rip + 0x1698c]
100012f0c:	cmp	qword ptr [rax], 0xffff
100012f13:	ja	0x100012f92
100012f15:	lea	rsi, [rip + 0x10898] ## literal pool for: "Not enough space to write split"
100012f1c:	mov	edi, 0xe
100012f21:	call	0x1000037b0
100012f26:	lea	rax, [rip + 0x16977]
100012f2d:	mov	ecx, dword ptr [rax]
100012f2f:	cmp	ecx, 0x1
100012f32:	jne	0x100012f92
100012f34:	lea	rax, [rip + 0x1690d]
100012f3b:	mov	rax, qword ptr [rax]
100012f3e:	lea	rcx, [rip + 0x1690b]
100012f45:	mov	rdi, qword ptr [rcx]
100012f48:	cmp	rax, rdi
100012f4b:	jne	0x100012f9c
100012f4d:	lea	rcx, [rip + 0x1689c]
100012f54:	mov	rcx, qword ptr [rcx]
100012f57:	lea	rdx, [rip + 0x16922]
100012f5e:	mov	qword ptr [rdx], rcx
100012f61:	xor	ecx, ecx
100012f63:	jmp	0x100012fdd
100012f65:	lea	rax, [rip + 0x1688c]
100012f6c:	mov	rdi, qword ptr [rax]
100012f6f:	call	0x1000197d0 ## symbol stub for: _ferror
100012f74:	test	eax, eax
100012f76:	je	0x1000132c2
100012f7c:	lea	rsi, [rip + 0x10386] ## literal pool for: "write error on zip file"
100012f83:	mov	edi, 0xe
100012f88:	call	0x1000037b0
100012f8d:	jmp	0x1000132c2
100012f92:	lea	rax, [rip + 0x168b7]
100012f99:	mov	rdi, qword ptr [rax]
100012f9c:	lea	r14, [rip + 0x16855]
100012fa3:	mov	rsi, qword ptr [r14]
100012fa6:	lea	rbx, [rip + 0x16843]
100012fad:	mov	rdx, qword ptr [rbx]
100012fb0:	call	0x10001434b
100012fb5:	xor	r15d, r15d
100012fb8:	mov	qword ptr [r14], r15
100012fbb:	mov	rdi, qword ptr [rbx]
100012fbe:	call	0x100019806 ## symbol stub for: _free
100012fc3:	mov	qword ptr [rbx], r15
100012fc6:	lea	rax, [rip + 0x16883]
100012fcd:	mov	rax, qword ptr [rax]
100012fd0:	lea	rcx, [rip + 0x168cd]
100012fd7:	cmp	dword ptr [rcx], 0x2
100012fda:	sete	cl
100012fdd:	mov	r14, qword ptr [rbp - 0x38]
100012fe1:	lea	rdx, [rip + 0x16878]
100012fe8:	xor	esi, esi
100012fea:	mov	qword ptr [rdx], rsi
100012fed:	lea	rdx, [rip + 0x168a4]
100012ff4:	mov	qword ptr [rdx], rsi
100012ff7:	inc	rax
100012ffa:	lea	rdx, [rip + 0x1684f]
100013001:	mov	qword ptr [rdx], rax
100013004:	test	cl, cl
100013006:	je	0x100013030
100013008:	lea	rax, [rip + 0x168a1]
10001300f:	cmp	dword ptr [rax], 0x0
100013012:	je	0x100013030
100013014:	lea	rbx, [rip + 0x17f15]
10001301b:	mov	rsi, qword ptr [rbx]
10001301e:	mov	edi, 0x7
100013023:	call	0x100019896 ## symbol stub for: _putc
100013028:	mov	rdi, qword ptr [rbx]
10001302b:	call	0x1000197d6 ## symbol stub for: _fflush
100013030:	lea	r15, [rip + 0x167b9]
100013037:	lea	rax, [rip + 0x16866]
10001303e:	cmp	dword ptr [rax], 0x2
100013041:	jne	0x100013052
100013043:	lea	rax, [rip + 0x16806]
10001304a:	mov	rdi, qword ptr [rax]
10001304d:	call	0x100013d5e
100013052:	lea	rax, [rip + 0x16757]
100013059:	mov	rbx, qword ptr [rax]
10001305c:	test	rbx, rbx
10001305f:	je	0x1000130d1
100013061:	mov	rdi, rbx
100013064:	call	0x100019920 ## symbol stub for: _strlen
100013069:	lea	rdi, [rax + 0xc]
10001306d:	call	0x100019848 ## symbol stub for: _malloc
100013072:	mov	qword ptr [r15], rax
100013075:	test	rax, rax
100013078:	jne	0x100013098
10001307a:	mov	edi, 0x4
10001307f:	lea	rsi, [rip + 0x9cdf] ## literal pool for: "allocating temp filename"
100013086:	call	0x1000037b0
10001308b:	mov	rax, qword ptr [r15]
10001308e:	lea	rcx, [rip + 0x1671b]
100013095:	mov	rbx, qword ptr [rcx]
100013098:	mov	rdi, rax
10001309b:	mov	rsi, rbx
10001309e:	call	0x100019914 ## symbol stub for: _strcpy
1000130a3:	mov	rbx, qword ptr [r15]
1000130a6:	cmp	byte ptr [rbx], 0x0
1000130a9:	je	0x1000130be
1000130ab:	mov	rdi, rbx
1000130ae:	call	0x100019920 ## symbol stub for: _strlen
1000130b3:	cmp	byte ptr [rax + rbx - 0x1], 0x2f
1000130b8:	je	0x100013157
1000130be:	mov	rdi, rbx
1000130c1:	call	0x100019920 ## symbol stub for: _strlen
1000130c6:	mov	word ptr [rbx + rax], 0x2f
1000130cc:	jmp	0x100013157
1000130d1:	lea	rax, [rip + 0x17e80]
1000130d8:	mov	rbx, qword ptr [rax]
1000130db:	mov	rdi, rbx
1000130de:	call	0x100019920 ## symbol stub for: _strlen
1000130e3:	lea	rdi, [rax + 0xc]
1000130e7:	call	0x100019848 ## symbol stub for: _malloc
1000130ec:	mov	qword ptr [r15], rax
1000130ef:	test	rax, rax
1000130f2:	jne	0x100013112
1000130f4:	mov	edi, 0x4
1000130f9:	lea	rsi, [rip + 0x9c65] ## literal pool for: "allocating temp filename"
100013100:	call	0x1000037b0
100013105:	mov	rax, qword ptr [r15]
100013108:	lea	rcx, [rip + 0x17e49]
10001310f:	mov	rbx, qword ptr [rcx]
100013112:	mov	rdi, rax
100013115:	mov	rsi, rbx
100013118:	call	0x100019914 ## symbol stub for: _strcpy
10001311d:	mov	r14, qword ptr [r15]
100013120:	mov	rdi, r14
100013123:	call	0x100019920 ## symbol stub for: _strlen
100013128:	mov	ecx, eax
10001312a:	test	eax, eax
10001312c:	mov	edx, 0x0
100013131:	cmovns	rax, rdx
100013135:	test	ecx, ecx
100013137:	jle	0x10001314c
100013139:	lea	edx, [rcx - 0x1]
10001313c:	dec	rcx
10001313f:	cmp	byte ptr [r14 + rdx], 0x2f
100013144:	jne	0x100013135
100013146:	inc	rcx
100013149:	mov	rax, rcx
10001314c:	cdqe
10001314e:	mov	byte ptr [r14 + rax], 0x0
100013153:	mov	r14, qword ptr [rbp - 0x38]
100013157:	mov	rbx, qword ptr [r15]
10001315a:	mov	rdi, rbx
10001315d:	call	0x100019920 ## symbol stub for: _strlen
100013162:	movabs	rcx, 0x585858585858697a
10001316c:	mov	qword ptr [rbx + rax], rcx
100013170:	mov	byte ptr [rbx + rax + 0x8], 0x0
100013175:	mov	rdi, qword ptr [r15]
100013178:	call	0x100019860 ## symbol stub for: _mkstemp
10001317d:	mov	ebx, eax
10001317f:	cmp	eax, -0x1
100013182:	jne	0x100013191
100013184:	mov	rsi, qword ptr [r15]
100013187:	mov	edi, 0xa
10001318c:	call	0x1000037b0
100013191:	mov	edi, ebx
100013193:	lea	rsi, [rip + 0x96dc] ## literal pool for: "w"
10001319a:	call	0x1000197c4 ## symbol stub for: _fdopen
10001319f:	lea	rcx, [rip + 0x16652]
1000131a6:	mov	qword ptr [rcx], rax
1000131a9:	test	rax, rax
1000131ac:	jne	0x1000131c5
1000131ae:	mov	rsi, qword ptr [r15]
1000131b1:	mov	edi, 0xa
1000131b6:	call	0x1000037b0
1000131bb:	lea	rax, [rip + 0x16636]
1000131c2:	mov	rax, qword ptr [rax]
1000131c5:	lea	rdi, [r14 + r13]
1000131c9:	mov	esi, 0x1
1000131ce:	mov	rdx, r12
1000131d1:	mov	rcx, rax
1000131d4:	call	0x10001981e ## symbol stub for: _fwrite
1000131d9:	lea	rcx, [rip + 0x166b8]
1000131e0:	add	qword ptr [rcx], rax
1000131e3:	cmp	dword ptr [rbp - 0x2c], 0x3
1000131e7:	jb	0x1000131f3
1000131e9:	lea	rcx, [rip + 0x166d0]
1000131f0:	add	qword ptr [rcx], rax
1000131f3:	add	r13, rax
1000131f6:	cmp	r12, rax
1000131f9:	jbe	0x100013230
1000131fb:	lea	rax, [rip + 0x166a2]
100013202:	cmp	dword ptr [rax], 0x2
100013205:	jne	0x10001321f
100013207:	lea	rdi, [rip + 0x105c6] ## literal pool for: "Not enough room on disk"
10001320e:	lea	rsi, [rip + 0x75a2] ## literal pool for: ""
100013215:	call	0x100003e67
10001321a:	jmp	0x100013037
10001321f:	lea	rsi, [rip + 0x105ae] ## literal pool for: "Not enough room on disk"
100013226:	mov	edi, 0xe
10001322b:	call	0x1000037b0
100013230:	cmp	dword ptr [rbp - 0x2c], 0x2
100013234:	ja	0x1000132be
10001323a:	lea	rax, [rip + 0x16663]
100013241:	cmp	dword ptr [rax], 0x1
100013244:	lea	rbx, [rip + 0x1663d]
10001324b:	jne	0x100013282
10001324d:	mov	rsi, qword ptr [rbx]
100013250:	test	rsi, rsi
100013253:	je	0x100013282
100013255:	lea	rax, [rip + 0x165ec]
10001325c:	mov	rdi, qword ptr [rax]
10001325f:	lea	rax, [rip + 0x165ea]
100013266:	cmp	rdi, qword ptr [rax]
100013269:	je	0x100013282
10001326b:	lea	r14, [rip + 0x1660e]
100013272:	mov	rdx, qword ptr [r14]
100013275:	call	0x10001434b
10001327a:	mov	rdi, qword ptr [r14]
10001327d:	call	0x100019806 ## symbol stub for: _free
100013282:	mov	rax, qword ptr [r15]
100013285:	lea	rcx, [rip + 0x165f4]
10001328c:	mov	qword ptr [rcx], rax
10001328f:	lea	rax, [rip + 0x16562]
100013296:	mov	rax, qword ptr [rax]
100013299:	mov	qword ptr [rbx], rax
10001329c:	lea	rax, [rip + 0x165ed]
1000132a3:	mov	qword ptr [rax], 0x0
1000132aa:	lea	rax, [rip + 0x1659f]
1000132b1:	mov	rax, qword ptr [rax]
1000132b4:	lea	rcx, [rip + 0x1658d]
1000132bb:	mov	qword ptr [rcx], rax
1000132be:	mov	rbx, qword ptr [rbp - 0x40]
1000132c2:	lea	rax, [rip + 0x16447]
1000132c9:	cmp	dword ptr [rax], 0x0
1000132cc:	je	0x10001337a
1000132d2:	lea	r12, [rip + 0x1641f]
1000132d9:	mov	rcx, qword ptr [r12]
1000132dd:	lea	r14, [rip + 0x1641c]
1000132e4:	mov	rax, qword ptr [r14]
1000132e7:	test	rcx, rcx
1000132ea:	jle	0x100013340
1000132ec:	cmp	rax, -0x1
1000132f0:	jne	0x10001331a
1000132f2:	lea	r15, [rip + 0x17c37]
1000132f9:	mov	rsi, qword ptr [r15]
1000132fc:	mov	edi, 0x20
100013301:	call	0x100019896 ## symbol stub for: _putc
100013306:	mov	rdi, qword ptr [r15]
100013309:	call	0x1000197d6 ## symbol stub for: _fflush
10001330e:	mov	qword ptr [r14], 0x1
100013315:	mov	eax, 0x1
10001331a:	cmp	rbx, 0x3e8
100013321:	jbe	0x10001333c
100013323:	inc	rax
100013326:	mov	rcx, qword ptr [r12]
10001332a:	imul	rbx, rax
10001332e:	xor	edx, edx
100013330:	cmp	rcx, rbx
100013333:	cmovle	rax, rdx
100013337:	mov	qword ptr [r14], rax
10001333a:	jmp	0x100013340
10001333c:	mov	rcx, qword ptr [r12]
100013340:	test	rcx, rcx
100013343:	je	0x10001337a
100013345:	test	rax, rax
100013348:	jne	0x10001337a
10001334a:	mov	qword ptr [r14], 0x1
100013351:	lea	rbx, [rip + 0x17bd8]
100013358:	mov	rsi, qword ptr [rbx]
10001335b:	mov	edi, 0x2e
100013360:	call	0x100019896 ## symbol stub for: _putc
100013365:	mov	rdi, qword ptr [rbx]
100013368:	call	0x1000197d6 ## symbol stub for: _fflush
10001336d:	lea	rax, [rip + 0x16558]
100013374:	mov	dword ptr [rax], 0x1
10001337a:	mov	rax, r13
10001337d:	add	rsp, 0x18
100013381:	pop	rbx
100013382:	pop	r12
100013384:	pop	r13
100013386:	pop	r14
100013388:	pop	r15
10001338a:	pop	rbp
10001338b:	ret
10001338c:	push	rbp
10001338d:	mov	rbp, rsp
100013390:	push	r15
100013392:	push	r14
100013394:	push	r12
100013396:	push	rbx
100013397:	sub	rsp, 0x10
10001339b:	mov	rbx, rsi
10001339e:	mov	r14, rdi
1000133a1:	inc	rbx
1000133a4:	lea	rax, [rip + 0x1647d]
1000133ab:	cmp	rbx, qword ptr [rax]
1000133ae:	jne	0x1000133ea
1000133b0:	mov	rdi, r14
1000133b3:	call	0x100019920 ## symbol stub for: _strlen
1000133b8:	lea	rdi, [rax + 0x1]
1000133bc:	call	0x100019848 ## symbol stub for: _malloc
1000133c1:	mov	rbx, rax
1000133c4:	test	rax, rax
1000133c7:	jne	0x1000133da
1000133c9:	lea	rsi, [rip + 0x1038f] ## literal pool for: "base path"
1000133d0:	mov	edi, 0x4
1000133d5:	call	0x1000037b0
1000133da:	mov	rdi, rbx
1000133dd:	mov	rsi, r14
1000133e0:	call	0x100019914 ## symbol stub for: _strcpy
1000133e5:	jmp	0x100013480
1000133ea:	cmp	rbx, 0x186a0
1000133f1:	jb	0x100013404
1000133f3:	lea	rsi, [rip + 0x1036f] ## literal pool for: "More than 99999 splits needed"
1000133fa:	mov	edi, 0x6
1000133ff:	call	0x1000037b0
100013404:	lea	rcx, [rip + 0x1037c] ## literal pool for: "z%02lu"
10001340b:	lea	r15, [rbp - 0x26]
10001340f:	mov	edx, 0x6
100013414:	mov	rdi, r15
100013417:	mov	esi, 0x0
10001341c:	mov	r8, rbx
10001341f:	xor	eax, eax
100013421:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100013426:	mov	rdi, r14
100013429:	call	0x100019920 ## symbol stub for: _strlen
10001342e:	mov	rbx, rax
100013431:	add	eax, -0x3
100013434:	movsxd	r12, eax
100013437:	mov	rdi, r15
10001343a:	call	0x100019920 ## symbol stub for: _strlen
10001343f:	lea	eax, [rbx + rax - 0x2]
100013443:	movsxd	rdi, eax
100013446:	call	0x100019848 ## symbol stub for: _malloc
10001344b:	mov	rbx, rax
10001344e:	test	rax, rax
100013451:	jne	0x100013464
100013453:	lea	rsi, [rip + 0x1007e] ## literal pool for: "split path"
10001345a:	mov	edi, 0x4
10001345f:	call	0x1000037b0
100013464:	mov	rdi, rbx
100013467:	mov	rsi, r14
10001346a:	call	0x100019914 ## symbol stub for: _strcpy
10001346f:	mov	byte ptr [rbx + r12], 0x0
100013474:	lea	rsi, [rbp - 0x26]
100013478:	mov	rdi, rbx
10001347b:	call	0x100019902 ## symbol stub for: _strcat
100013480:	mov	rax, rbx
100013483:	add	rsp, 0x10
100013487:	pop	rbx
100013488:	pop	r12
10001348a:	pop	r14
10001348c:	pop	r15
10001348e:	pop	rbp
10001348f:	ret
100013490:	push	rbp
100013491:	mov	rbp, rsp
100013494:	push	r15
100013496:	push	r14
100013498:	push	r13
10001349a:	push	r12
10001349c:	push	rbx
10001349d:	push	rax
10001349e:	mov	eax, 0x1448
1000134a3:	call	0x10000a6a0
1000134a8:	sub	rsp, rax
1000134ab:	pop	rax
1000134ac:	mov	rsi, rdi
1000134af:	mov	rax, qword ptr [rip + 0x10b5a] ## literal pool symbol address: ___stack_chk_guard
1000134b6:	mov	rax, qword ptr [rax]
1000134b9:	mov	qword ptr [rbp - 0x30], rax
1000134bd:	lea	r14, [rip + 0x16344]
1000134c4:	mov	rdi, qword ptr [r14]
1000134c7:	mov	qword ptr [rbp - 0x1458], rsi
1000134ce:	call	0x10001338c
1000134d3:	mov	r15, rax
1000134d6:	mov	rbx, qword ptr [r14]
1000134d9:	mov	rdi, rbx
1000134dc:	call	0x100019920 ## symbol stub for: _strlen
1000134e1:	lea	rdi, [rax + 0x28]
1000134e5:	call	0x100019848 ## symbol stub for: _malloc
1000134ea:	mov	r12, rax
1000134ed:	test	rax, rax
1000134f0:	jne	0x100013506
1000134f2:	lea	rsi, [rip + 0xffdf] ## literal pool for: "split path"
1000134f9:	mov	edi, 0x4
1000134fe:	call	0x1000037b0
100013503:	mov	rbx, qword ptr [r14]
100013506:	mov	rdi, r12
100013509:	mov	rsi, rbx
10001350c:	call	0x100019914 ## symbol stub for: _strcpy
100013511:	mov	rdi, r12
100013514:	call	0x100019920 ## symbol stub for: _strlen
100013519:	inc	eax
10001351b:	movabs	rdx, 0x200000000801
100013525:	mov	ecx, eax
100013527:	add	ecx, -0x2
10001352a:	js	0x100013553
10001352c:	mov	ecx, ecx
10001352e:	mov	cl, byte ptr [r12 + rcx]
100013532:	dec	eax
100013534:	add	cl, -0x2f
100013537:	cmp	cl, 0x2d
10001353a:	ja	0x100013525
10001353c:	movzx	ecx, cl
10001353f:	bt	rdx, rcx
100013543:	jae	0x100013525
100013545:	movsxd	rcx, eax
100013548:	mov	rax, r12
10001354b:	add	rax, rcx
10001354e:	xor	r13d, r13d
100013551:	jmp	0x100013559
100013553:	mov	r13b, 0x1
100013556:	mov	rax, r12
100013559:	mov	byte ptr [rax], 0x0
10001355c:	mov	rbx, qword ptr [r14]
10001355f:	mov	rdi, rbx
100013562:	call	0x100019920 ## symbol stub for: _strlen
100013567:	lea	rdi, [rax + 0x1]
10001356b:	call	0x100019848 ## symbol stub for: _malloc
100013570:	mov	qword ptr [rbp - 0x1450], rax
100013577:	test	rax, rax
10001357a:	jne	0x100013590
10001357c:	lea	rsi, [rip + 0xff55] ## literal pool for: "split path"
100013583:	mov	edi, 0x4
100013588:	call	0x1000037b0
10001358d:	mov	rbx, qword ptr [r14]
100013590:	mov	rdi, rbx
100013593:	call	0x100019920 ## symbol stub for: _strlen
100013598:	mov	r14, rax
10001359b:	mov	rdi, r12
10001359e:	call	0x100019920 ## symbol stub for: _strlen
1000135a3:	cmp	r14, rax
1000135a6:	jne	0x1000135b4
1000135a8:	mov	rax, qword ptr [rbp - 0x1450]
1000135af:	mov	byte ptr [rax], 0x0
1000135b2:	jmp	0x1000135c6
1000135b4:	add	rbx, rax
1000135b7:	mov	rdi, qword ptr [rbp - 0x1450]
1000135be:	mov	rsi, rbx
1000135c1:	call	0x100019914 ## symbol stub for: _strcpy
1000135c6:	mov	rdi, r15
1000135c9:	call	0x100019920 ## symbol stub for: _strlen
1000135ce:	lea	rdi, [rax + 0x1]
1000135d2:	call	0x100019848 ## symbol stub for: _malloc
1000135d7:	mov	r14, rax
1000135da:	test	rax, rax
1000135dd:	lea	rbx, [rip + 0x16224]
1000135e4:	jne	0x1000135f7
1000135e6:	lea	rsi, [rip + 0xfeeb] ## literal pool for: "split path"
1000135ed:	mov	edi, 0x4
1000135f2:	call	0x1000037b0
1000135f7:	mov	rdi, qword ptr [rbx]
1000135fa:	call	0x100019920 ## symbol stub for: _strlen
1000135ff:	mov	rbx, rax
100013602:	mov	rdi, r12
100013605:	call	0x100019920 ## symbol stub for: _strlen
10001360a:	cmp	rbx, rax
10001360d:	jne	0x100013615
10001360f:	mov	byte ptr [r14], 0x0
100013613:	jmp	0x100013623
100013615:	mov	rsi, r15
100013618:	add	rsi, rax
10001361b:	mov	rdi, r14
10001361e:	call	0x100019914 ## symbol stub for: _strcpy
100013623:	mov	qword ptr [rbp - 0x1468], r14
10001362a:	movabs	rax, 0x6f74636572696420
100013634:	movabs	rcx, 0x746e657272756328
10001363e:	test	r13b, r13b
100013641:	je	0x100013655
100013643:	mov	qword ptr [r12 + 0x8], rax
100013648:	mov	qword ptr [r12], rcx
10001364c:	mov	dword ptr [r12 + 0x10], 0x297972
100013655:	lea	r14, [rip + 0x178d4]
10001365c:	mov	rcx, qword ptr [r14]
10001365f:	lea	rdi, [rip + 0xfe91] ## literal pool for: "\n\nCould not find:\n"
100013666:	mov	esi, 0x12
10001366b:	mov	edx, 0x1
100013670:	call	0x10001981e ## symbol stub for: _fwrite
100013675:	mov	rdi, qword ptr [r14]
100013678:	lea	rbx, [rip + 0x9959] ## literal pool for: "  %s\n"
10001367f:	mov	rsi, rbx
100013682:	mov	rdx, r15
100013685:	xor	eax, eax
100013687:	call	0x1000197ee ## symbol stub for: _fprintf
10001368c:	mov	rax, qword ptr [rbp - 0x1458]
100013693:	inc	rax
100013696:	mov	qword ptr [rbp - 0x1470], rax
10001369d:	mov	r13, qword ptr [rip + 0x1097c] ## literal pool symbol address: ___stdinp
1000136a4:	mov	dword ptr [rbp - 0x1444], 0x0
1000136ae:	mov	qword ptr [rbp - 0x1460], r12
1000136b5:	cmp	dword ptr [rbp - 0x1444], 0x0
1000136bc:	je	0x10001370e
1000136be:	mov	rcx, qword ptr [r14]
1000136c1:	mov	esi, 0x35
1000136c6:	mov	edx, 0x1
1000136cb:	lea	rdi, [rip + 0xfe38] ## literal pool for: "\nHit c      (change path to where this split file is)"
1000136d2:	call	0x10001981e ## symbol stub for: _fwrite
1000136d7:	mov	rcx, qword ptr [r14]
1000136da:	mov	esi, 0x22
1000136df:	mov	edx, 0x1
1000136e4:	lea	rdi, [rip + 0xfe55] ## literal pool for: "\n    q      (abort archive - quit)"
1000136eb:	call	0x10001981e ## symbol stub for: _fwrite
1000136f0:	mov	rcx, qword ptr [r14]
1000136f3:	mov	esi, 0x28
1000136f8:	mov	edx, 0x1
1000136fd:	lea	rdi, [rip + 0xfe5f] ## literal pool for: "\n or ENTER  (continue with this split): "
100013704:	call	0x10001981e ## symbol stub for: _fwrite
100013709:	jmp	0x10001381a
10001370e:	mov	r12, r15
100013711:	mov	r15, r13
100013714:	mov	r13, rbx
100013717:	lea	rax, [rip + 0x15f92]
10001371e:	mov	ebx, dword ptr [rax]
100013720:	cmp	ebx, 0x1
100013723:	jne	0x10001375c
100013725:	mov	rcx, qword ptr [r14]
100013728:	mov	esi, 0x35
10001372d:	mov	edx, 0x1
100013732:	lea	rdi, [rip + 0xfdd1] ## literal pool for: "\nHit c      (change path to where this split file is)"
100013739:	call	0x10001981e ## symbol stub for: _fwrite
10001373e:	mov	rcx, qword ptr [r14]
100013741:	mov	esi, 0x1d
100013746:	mov	edx, 0x1
10001374b:	lea	rdi, [rip + 0xfe3a] ## literal pool for: "\n    s      (skip this split)"
100013752:	call	0x10001981e ## symbol stub for: _fwrite
100013757:	mov	rcx, qword ptr [r14]
10001375a:	jmp	0x1000137db
10001375c:	mov	rcx, qword ptr [r14]
10001375f:	mov	esi, 0x35
100013764:	mov	edx, 0x1
100013769:	lea	rdi, [rip + 0xfd9a] ## literal pool for: "\nHit c      (change path to where this split file is)"
100013770:	call	0x10001981e ## symbol stub for: _fwrite
100013775:	mov	rcx, qword ptr [r14]
100013778:	cmp	ebx, 0x2
10001377b:	jne	0x1000137db
10001377d:	mov	esi, 0x1d
100013782:	mov	edx, 0x1
100013787:	lea	rdi, [rip + 0xfdfe] ## literal pool for: "\n    s      (skip this split)"
10001378e:	call	0x10001981e ## symbol stub for: _fwrite
100013793:	mov	rcx, qword ptr [r14]
100013796:	mov	esi, 0x22
10001379b:	mov	edx, 0x1
1000137a0:	lea	rdi, [rip + 0xfd99] ## literal pool for: "\n    q      (abort archive - quit)"
1000137a7:	call	0x10001981e ## symbol stub for: _fwrite
1000137ac:	mov	rcx, qword ptr [r14]
1000137af:	mov	esi, 0x2f
1000137b4:	mov	edx, 0x1
1000137b9:	lea	rdi, [rip + 0xfe17] ## literal pool for: "\n    e      (end this archive - no more splits)"
1000137c0:	call	0x10001981e ## symbol stub for: _fwrite
1000137c5:	mov	rcx, qword ptr [r14]
1000137c8:	mov	esi, 0x32
1000137cd:	mov	edx, 0x1
1000137d2:	lea	rdi, [rip + 0xfe2e] ## literal pool for: "\n    z      (look for .zip split - the last split)"
1000137d9:	jmp	0x1000137ec
1000137db:	mov	esi, 0x22
1000137e0:	mov	edx, 0x1
1000137e5:	lea	rdi, [rip + 0xfd54] ## literal pool for: "\n    q      (abort archive - quit)"
1000137ec:	call	0x10001981e ## symbol stub for: _fwrite
1000137f1:	mov	rcx, qword ptr [r14]
1000137f4:	mov	esi, 0x2c
1000137f9:	mov	edx, 0x1
1000137fe:	lea	rdi, [rip + 0xfda5] ## literal pool for: "\n or ENTER  (try reading this split again): "
100013805:	call	0x10001981e ## symbol stub for: _fwrite
10001380a:	mov	rbx, r13
10001380d:	mov	r13, r15
100013810:	mov	r15, r12
100013813:	mov	r12, qword ptr [rbp - 0x1460]
10001381a:	mov	rdi, qword ptr [r14]
10001381d:	call	0x1000197d6 ## symbol stub for: _fflush
100013822:	mov	rdx, qword ptr [r13]
100013826:	lea	rdi, [rbp - 0x1440]
10001382d:	mov	esi, 0x13aa
100013832:	call	0x1000197dc ## symbol stub for: _fgets
100013837:	xor	eax, eax
100013839:	mov	cl, byte ptr [rbp + rax - 0x1440]
100013840:	test	cl, cl
100013842:	je	0x100013858
100013844:	cmp	cl, 0xa
100013847:	je	0x10001384e
100013849:	inc	rax
10001384c:	jmp	0x100013839
10001384e:	mov	eax, eax
100013850:	mov	byte ptr [rbp + rax - 0x1440], 0x0
100013858:	movsx	edi, byte ptr [rbp - 0x1440]
10001385f:	call	0x10001978e ## symbol stub for: ___toupper
100013864:	cmp	eax, 0x51
100013867:	je	0x100013ccb
10001386d:	cmp	eax, 0x53
100013870:	jne	0x100013886
100013872:	lea	rax, [rip + 0x15e37]
100013879:	mov	eax, dword ptr [rax]
10001387b:	dec	eax
10001387d:	cmp	eax, 0x1
100013880:	jbe	0x100013cd2
100013886:	movsx	edi, byte ptr [rbp - 0x1440]
10001388d:	call	0x10001978e ## symbol stub for: ___toupper
100013892:	cmp	eax, 0x43
100013895:	jne	0x100013905
100013897:	mov	rcx, qword ptr [r14]
10001389a:	mov	esi, 0x43
10001389f:	mov	edx, 0x1
1000138a4:	lea	rdi, [rip + 0xfd8f] ## literal pool for: "\nEnter path where this split is (ENTER = same dir, . = current dir)"
1000138ab:	call	0x10001981e ## symbol stub for: _fwrite
1000138b0:	mov	rcx, qword ptr [r14]
1000138b3:	mov	esi, 0x3
1000138b8:	mov	edx, 0x1
1000138bd:	lea	rdi, [rip + 0xfdba] ## literal pool for: "\n: "
1000138c4:	call	0x10001981e ## symbol stub for: _fwrite
1000138c9:	mov	rdi, qword ptr [r14]
1000138cc:	call	0x1000197d6 ## symbol stub for: _fflush
1000138d1:	mov	rdx, qword ptr [r13]
1000138d5:	lea	rdi, [rbp - 0x1440]
1000138dc:	mov	esi, 0x13aa
1000138e1:	call	0x1000197dc ## symbol stub for: _fgets
1000138e6:	xor	eax, eax
1000138e8:	mov	cl, byte ptr [rbp + rax - 0x1440]
1000138ef:	test	cl, cl
1000138f1:	je	0x100013998
1000138f7:	cmp	cl, 0xa
1000138fa:	je	0x10001398e
100013900:	inc	rax
100013903:	jmp	0x1000138e8
100013905:	lea	rcx, [rip + 0x15da4]
10001390c:	mov	ecx, dword ptr [rcx]
10001390e:	cmp	eax, 0x45
100013911:	jne	0x10001391c
100013913:	cmp	ecx, 0x2
100013916:	je	0x100013d30
10001391c:	cmp	ecx, 0x2
10001391f:	jne	0x1000139bf
100013925:	movsx	edi, byte ptr [rbp - 0x1440]
10001392c:	call	0x10001978e ## symbol stub for: ___toupper
100013931:	cmp	eax, 0x5a
100013934:	jne	0x1000139bf
10001393a:	mov	rax, qword ptr [rbp - 0x1470]
100013941:	lea	rcx, [rip + 0x15ee0]
100013948:	mov	qword ptr [rcx], rax
10001394b:	mov	rdi, r15
10001394e:	call	0x100019806 ## symbol stub for: _free
100013953:	lea	rax, [rip + 0x15eae]
10001395a:	mov	rdi, qword ptr [rax]
10001395d:	mov	rsi, qword ptr [rbp - 0x1458]
100013964:	call	0x10001338c
100013969:	mov	r15, rax
10001396c:	mov	byte ptr [rbp - 0x1440], 0x0
100013973:	mov	edx, 0x13aa
100013978:	mov	ecx, 0x140e
10001397d:	lea	rdi, [rbp - 0x1440]
100013984:	mov	rsi, rax
100013987:	call	0x100019788 ## symbol stub for: ___strncat_chk
10001398c:	jmp	0x1000139bf
10001398e:	mov	eax, eax
100013990:	mov	byte ptr [rbp + rax - 0x1440], 0x0
100013998:	mov	dword ptr [rbp - 0x1444], 0x0
1000139a2:	cmp	byte ptr [rbp - 0x1440], 0x0
1000139a9:	jne	0x1000139bf
1000139ab:	mov	edx, 0x140e
1000139b0:	lea	rdi, [rbp - 0x1440]
1000139b7:	mov	rsi, r15
1000139ba:	call	0x100019782 ## symbol stub for: ___strcpy_chk
1000139bf:	lea	rdi, [rbp - 0x1440]
1000139c6:	call	0x100019920 ## symbol stub for: _strlen
1000139cb:	test	rax, rax
1000139ce:	jne	0x100013a16
1000139d0:	mov	rdi, r15
1000139d3:	lea	rsi, [rip + 0x85d6] ## literal pool for: "r"
1000139da:	call	0x1000197e8 ## symbol stub for: _fopen
1000139df:	test	rax, rax
1000139e2:	jne	0x100013cf0
1000139e8:	mov	rcx, qword ptr [r14]
1000139eb:	mov	esi, 0x18
1000139f0:	mov	edx, 0x1
1000139f5:	lea	rdi, [rip + 0xfc86] ## literal pool for: "\nCould not find or open\n"
1000139fc:	call	0x10001981e ## symbol stub for: _fwrite
100013a01:	mov	rdi, qword ptr [r14]
100013a04:	mov	rsi, rbx
100013a07:	mov	rdx, r15
100013a0a:	xor	eax, eax
100013a0c:	call	0x1000197ee ## symbol stub for: _fprintf
100013a11:	jmp	0x1000136b5
100013a16:	cmp	byte ptr [rbp - 0x1440], 0x2e
100013a1d:	jne	0x100013a2f
100013a1f:	cmp	byte ptr [rbp - 0x143f], 0x0
100013a26:	jne	0x100013a2f
100013a28:	mov	byte ptr [rbp - 0x1440], 0x0
100013a2f:	lea	rbx, [rbp - 0x1440]
100013a36:	mov	rdi, rbx
100013a39:	call	0x100019920 ## symbol stub for: _strlen
100013a3e:	test	eax, eax
100013a40:	movabs	rsi, 0x200000000801
100013a4a:	js	0x100013a93
100013a4c:	mov	ecx, eax
100013a4e:	mov	rax, rcx
100013a51:	shl	rax, 0x20
100013a55:	movabs	rdx, offset __mh_execute_header
100013a5f:	add	rax, rdx
100013a62:	inc	rcx
100013a65:	mov	dl, byte ptr [rbp + rcx - 0x1441]
100013a6c:	add	dl, -0x2f
100013a6f:	cmp	dl, 0x2d
100013a72:	ja	0x100013a81
100013a74:	movzx	edx, dl
100013a77:	bt	rsi, rdx
100013a7b:	jb	0x100013b20
100013a81:	movabs	rdx, -0x100000000
100013a8b:	add	rax, rdx
100013a8e:	dec	rcx
100013a91:	jg	0x100013a65
100013a93:	lea	rax, [rip + 0x15d6e]
100013a9a:	mov	rdi, qword ptr [rax]
100013a9d:	call	0x100019806 ## symbol stub for: _free
100013aa2:	movabs	rax, 0x6f74636572696420
100013aac:	mov	qword ptr [rbp - 0x1438], rax
100013ab3:	movabs	rax, 0x746e657272756328
100013abd:	mov	qword ptr [rbp - 0x1440], rax
100013ac4:	mov	dword ptr [rbp - 0x1430], 0x297972
100013ace:	mov	rbx, qword ptr [rbp - 0x1450]
100013ad5:	mov	rdi, rbx
100013ad8:	call	0x100019920 ## symbol stub for: _strlen
100013add:	lea	rdi, [rax + 0x28]
100013ae1:	call	0x100019848 ## symbol stub for: _malloc
100013ae6:	lea	rcx, [rip + 0x15d1b]
100013aed:	mov	qword ptr [rcx], rax
100013af0:	test	rax, rax
100013af3:	jne	0x100013b10
100013af5:	mov	edi, 0x4
100013afa:	lea	rsi, [rip + 0xf9d7] ## literal pool for: "split path"
100013b01:	call	0x1000037b0
100013b06:	lea	rax, [rip + 0x15cfb]
100013b0d:	mov	rax, qword ptr [rax]
100013b10:	mov	rdi, rax
100013b13:	mov	rsi, rbx
100013b16:	call	0x100019914 ## symbol stub for: _strcpy
100013b1b:	jmp	0x100013bd3
100013b20:	sar	rax, 0x20
100013b24:	mov	byte ptr [rbp + rax - 0x1440], 0x0
100013b2c:	lea	rax, [rip + 0x15cd5]
100013b33:	mov	rdi, qword ptr [rax]
100013b36:	call	0x100019806 ## symbol stub for: _free
100013b3b:	mov	rdi, rbx
100013b3e:	call	0x100019920 ## symbol stub for: _strlen
100013b43:	test	eax, eax
100013b45:	js	0x100013b5c
100013b47:	mov	ecx, eax
100013b49:	cmp	byte ptr [rbp + rcx - 0x1440], 0x2f
100013b51:	je	0x100013b65
100013b53:	lea	ecx, [rax - 0x1]
100013b56:	test	eax, eax
100013b58:	mov	eax, ecx
100013b5a:	jg	0x100013b47
100013b5c:	mov	byte ptr [rbp - 0x1440], 0x0
100013b63:	jmp	0x100013b71
100013b65:	inc	eax
100013b67:	cdqe
100013b69:	mov	byte ptr [rbp + rax - 0x1440], 0x0
100013b71:	mov	rdi, rbx
100013b74:	call	0x100019920 ## symbol stub for: _strlen
100013b79:	mov	rbx, rax
100013b7c:	mov	rdi, qword ptr [rbp - 0x1450]
100013b83:	call	0x100019920 ## symbol stub for: _strlen
100013b88:	lea	rdi, [rbx + rax + 0x28]
100013b8d:	call	0x100019848 ## symbol stub for: _malloc
100013b92:	lea	rbx, [rip + 0x15c6f]
100013b99:	mov	qword ptr [rbx], rax
100013b9c:	test	rax, rax
100013b9f:	jne	0x100013bb5
100013ba1:	mov	edi, 0x4
100013ba6:	lea	rsi, [rip + 0xf92b] ## literal pool for: "split path"
100013bad:	call	0x1000037b0
100013bb2:	mov	rax, qword ptr [rbx]
100013bb5:	mov	rdi, rax
100013bb8:	lea	rsi, [rbp - 0x1440]
100013bbf:	call	0x100019914 ## symbol stub for: _strcpy
100013bc4:	mov	rdi, qword ptr [rbx]
100013bc7:	mov	rsi, qword ptr [rbp - 0x1450]
100013bce:	call	0x100019902 ## symbol stub for: _strcat
100013bd3:	mov	rdi, r15
100013bd6:	call	0x100019806 ## symbol stub for: _free
100013bdb:	lea	rbx, [rip + 0x15c26]
100013be2:	mov	rdi, qword ptr [rbx]
100013be5:	mov	rsi, qword ptr [rbp - 0x1458]
100013bec:	call	0x10001338c
100013bf1:	mov	r15, rax
100013bf4:	mov	rdi, r12
100013bf7:	call	0x100019806 ## symbol stub for: _free
100013bfc:	mov	rbx, qword ptr [rbx]
100013bff:	mov	rdi, rbx
100013c02:	call	0x100019920 ## symbol stub for: _strlen
100013c07:	lea	rdi, [rax + 0x28]
100013c0b:	call	0x100019848 ## symbol stub for: _malloc
100013c10:	mov	r12, rax
100013c13:	test	rax, rax
100013c16:	jne	0x100013c33
100013c18:	mov	edi, 0x4
100013c1d:	lea	rsi, [rip + 0xf8b4] ## literal pool for: "split path"
100013c24:	call	0x1000037b0
100013c29:	lea	rax, [rip + 0x15bd8]
100013c30:	mov	rbx, qword ptr [rax]
100013c33:	mov	rdi, r12
100013c36:	mov	rsi, rbx
100013c39:	call	0x100019914 ## symbol stub for: _strcpy
100013c3e:	mov	rdi, r12
100013c41:	call	0x100019920 ## symbol stub for: _strlen
100013c46:	test	eax, eax
100013c48:	lea	rbx, [rip + 0x9389] ## literal pool for: "  %s\n"
100013c4f:	js	0x100013c6e
100013c51:	mov	ecx, eax
100013c53:	cmp	byte ptr [r12 + rcx], 0x2f
100013c58:	je	0x100013c65
100013c5a:	lea	ecx, [rax - 0x1]
100013c5d:	test	eax, eax
100013c5f:	mov	eax, ecx
100013c61:	jg	0x100013c51
100013c63:	jmp	0x100013c6e
100013c65:	inc	eax
100013c67:	cdqe
100013c69:	mov	byte ptr [r12 + rax], 0x0
100013c6e:	mov	rdi, r15
100013c71:	lea	rsi, [rip + 0x8338] ## literal pool for: "r"
100013c78:	call	0x1000197e8 ## symbol stub for: _fopen
100013c7d:	test	rax, rax
100013c80:	je	0x100013c9d
100013c82:	mov	rdi, rax
100013c85:	call	0x1000197be ## symbol stub for: _fclose
100013c8a:	mov	dword ptr [rbp - 0x1444], 0x1
100013c94:	lea	rsi, [rip + 0xfa00] ## literal pool for: "Found:  %s\n"
100013c9b:	jmp	0x100013cb9
100013c9d:	mov	rcx, qword ptr [r14]
100013ca0:	mov	esi, 0x18
100013ca5:	mov	edx, 0x1
100013caa:	lea	rdi, [rip + 0xf9d1] ## literal pool for: "\nCould not find or open\n"
100013cb1:	call	0x10001981e ## symbol stub for: _fwrite
100013cb6:	mov	rsi, rbx
100013cb9:	mov	rdi, qword ptr [r14]
100013cbc:	mov	rdx, r15
100013cbf:	xor	eax, eax
100013cc1:	call	0x1000197ee ## symbol stub for: _fprintf
100013cc6:	jmp	0x1000136ae
100013ccb:	mov	ebx, 0x9
100013cd0:	jmp	0x100013d35
100013cd2:	lea	rax, [rip + 0x15b57]
100013cd9:	mov	rax, qword ptr [rax]
100013cdc:	inc	rax
100013cdf:	lea	rcx, [rip + 0x159ea]
100013ce6:	mov	qword ptr [rcx], rax
100013ce9:	mov	ebx, 0x3
100013cee:	jmp	0x100013d35
100013cf0:	mov	rdi, rax
100013cf3:	call	0x1000197be ## symbol stub for: _fclose
100013cf8:	mov	rdi, qword ptr [r14]
100013cfb:	lea	rsi, [rip + 0xf9a5] ## literal pool for: "\nFound:  %s\n"
100013d02:	xor	ebx, ebx
100013d04:	mov	rdx, r15
100013d07:	xor	eax, eax
100013d09:	call	0x1000197ee ## symbol stub for: _fprintf
100013d0e:	mov	rdi, qword ptr [rbp - 0x1450]
100013d15:	call	0x100019806 ## symbol stub for: _free
100013d1a:	mov	rdi, r12
100013d1d:	call	0x100019806 ## symbol stub for: _free
100013d22:	mov	rdi, qword ptr [rbp - 0x1468]
100013d29:	call	0x100019806 ## symbol stub for: _free
100013d2e:	jmp	0x100013d35
100013d30:	mov	ebx, 0x2
100013d35:	mov	rax, qword ptr [rip + 0x102d4] ## literal pool symbol address: ___stack_chk_guard
100013d3c:	mov	rax, qword ptr [rax]
100013d3f:	cmp	rax, qword ptr [rbp - 0x30]
100013d43:	jne	0x100013d59
100013d45:	mov	eax, ebx
100013d47:	add	rsp, 0x1448
100013d4e:	pop	rbx
100013d4f:	pop	r12
100013d51:	pop	r13
100013d53:	pop	r14
100013d55:	pop	r15
100013d57:	pop	rbp
100013d58:	ret
100013d59:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
100013d5e:	push	rbp
100013d5f:	mov	rbp, rsp
100013d62:	push	r15
100013d64:	push	r14
100013d66:	push	r13
100013d68:	push	r12
100013d6a:	push	rbx
100013d6b:	sub	rsp, 0x448
100013d72:	mov	qword ptr [rbp - 0x468], rdi
100013d79:	mov	rax, qword ptr [rip + 0x10290] ## literal pool symbol address: ___stack_chk_guard
100013d80:	mov	rax, qword ptr [rax]
100013d83:	mov	qword ptr [rbp - 0x30], rax
100013d87:	lea	rbx, [rip + 0x15a8a]
100013d8e:	mov	r14, qword ptr [rbx]
100013d91:	mov	rdi, r14
100013d94:	call	0x100019920 ## symbol stub for: _strlen
100013d99:	lea	rdi, [rax + 0x28]
100013d9d:	call	0x100019848 ## symbol stub for: _malloc
100013da2:	mov	r13, rax
100013da5:	test	rax, rax
100013da8:	jne	0x100013dbe
100013daa:	lea	rsi, [rip + 0xf727] ## literal pool for: "split path"
100013db1:	mov	edi, 0x4
100013db6:	call	0x1000037b0
100013dbb:	mov	r14, qword ptr [rbx]
100013dbe:	movabs	rbx, -0x100000000
100013dc8:	movabs	r15, offset __mh_execute_header
100013dd2:	mov	rdi, r13
100013dd5:	mov	rsi, r14
100013dd8:	call	0x100019914 ## symbol stub for: _strcpy
100013ddd:	mov	rdi, r13
100013de0:	call	0x100019920 ## symbol stub for: _strlen
100013de5:	mov	r12, rax
100013de8:	movabs	rsi, 0x200000000801
100013df2:	test	r12d, r12d
100013df5:	js	0x100013e37
100013df7:	mov	ecx, r12d
100013dfa:	mov	rax, rcx
100013dfd:	shl	rax, 0x20
100013e01:	add	rax, r15
100013e04:	inc	rcx
100013e07:	lea	r15, [rip + 0x15a0a]
100013e0e:	mov	dl, byte ptr [r13 + rcx - 0x1]
100013e13:	add	dl, -0x2f
100013e16:	cmp	dl, 0x2d
100013e19:	ja	0x100013e24
100013e1b:	movzx	edx, dl
100013e1e:	bt	rsi, rdx
100013e22:	jb	0x100013e40
100013e24:	add	rax, rbx
100013e27:	dec	r12d
100013e2a:	dec	rcx
100013e2d:	jg	0x100013e0e
100013e2f:	mov	r12d, 0xffffffff
100013e35:	jmp	0x100013e4a
100013e37:	lea	r15, [rip + 0x159da]
100013e3e:	jmp	0x100013e4a
100013e40:	sar	rax, 0x20
100013e44:	mov	byte ptr [r13 + rax], 0x0
100013e4a:	mov	rbx, qword ptr [r15]
100013e4d:	mov	rdi, rbx
100013e50:	call	0x100019920 ## symbol stub for: _strlen
100013e55:	lea	rdi, [rax + 0x1]
100013e59:	call	0x100019848 ## symbol stub for: _malloc
100013e5e:	mov	r14, rax
100013e61:	test	rax, rax
100013e64:	jne	0x100013e7a
100013e66:	lea	rsi, [rip + 0xf66b] ## literal pool for: "split path"
100013e6d:	mov	edi, 0x4
100013e72:	call	0x1000037b0
100013e77:	mov	rbx, qword ptr [r15]
100013e7a:	mov	rdi, rbx
100013e7d:	call	0x100019920 ## symbol stub for: _strlen
100013e82:	mov	r15, rax
100013e85:	mov	rdi, r13
100013e88:	call	0x100019920 ## symbol stub for: _strlen
100013e8d:	cmp	r15, rax
100013e90:	jne	0x100013e98
100013e92:	mov	byte ptr [r14], 0x0
100013e96:	jmp	0x100013ea6
100013e98:	add	rbx, rax
100013e9b:	mov	rdi, r14
100013e9e:	mov	rsi, rbx
100013ea1:	call	0x100019914 ## symbol stub for: _strcpy
100013ea6:	movabs	rbx, -0x100000000
100013eb0:	mov	rdx, qword ptr [rbp - 0x468]
100013eb7:	test	r12d, r12d
100013eba:	lea	r15, [rip + 0x15957]
100013ec1:	jns	0x100013ee7
100013ec3:	movabs	rax, 0x6f74636572696420
100013ecd:	mov	qword ptr [r13 + 0x8], rax
100013ed1:	movabs	rax, 0x746e657272756328
100013edb:	mov	qword ptr [r13], rax
100013edf:	mov	dword ptr [r13 + 0x10], 0x297972
100013ee7:	inc	edx
100013ee9:	lea	rax, [rip + 0x159dc]
100013ef0:	cmp	dword ptr [rax], 0x0
100013ef3:	je	0x100013f0f
100013ef5:	lea	rax, [rip + 0x17034]
100013efc:	mov	rsi, qword ptr [rax]
100013eff:	mov	edi, 0xa
100013f04:	mov	r12, rdx
100013f07:	call	0x1000197f4 ## symbol stub for: _fputc
100013f0c:	mov	rdx, r12
100013f0f:	lea	r12, [rip + 0x1701a]
100013f16:	mov	rdi, qword ptr [r12]
100013f1a:	lea	rsi, [rip + 0xf793] ## literal pool for: "\nOpening disk %d\n"
100013f21:	xor	eax, eax
100013f23:	call	0x1000197ee ## symbol stub for: _fprintf
100013f28:	mov	rcx, qword ptr [r12]
100013f2c:	lea	rdi, [rip + 0xf793] ## literal pool for: "Hit ENTER to write to default path of\n"
100013f33:	mov	esi, 0x26
100013f38:	mov	edx, 0x1
100013f3d:	call	0x10001981e ## symbol stub for: _fwrite
100013f42:	mov	rdi, qword ptr [r12]
100013f46:	lea	rsi, [rip + 0x908b] ## literal pool for: "  %s\n"
100013f4d:	mov	rdx, r13
100013f50:	xor	eax, eax
100013f52:	call	0x1000197ee ## symbol stub for: _fprintf
100013f57:	mov	rcx, qword ptr [r12]
100013f5b:	lea	rdi, [rip + 0xf78b] ## literal pool for: "or enter a new directory path (. for cur dir) and hit ENTER\n"
100013f62:	mov	esi, 0x3c
100013f67:	mov	edx, 0x1
100013f6c:	call	0x10001981e ## symbol stub for: _fwrite
100013f71:	lea	r12, [rip + 0x16fb8]
100013f78:	mov	rcx, qword ptr [r12]
100013f7c:	mov	esi, 0x22
100013f81:	mov	edx, 0x1
100013f86:	lea	rdi, [rip + 0xf79d] ## literal pool for: "\nPath (or hit ENTER to continue): "
100013f8d:	call	0x10001981e ## symbol stub for: _fwrite
100013f92:	mov	rdi, qword ptr [r12]
100013f96:	call	0x1000197d6 ## symbol stub for: _fflush
100013f9b:	mov	rax, qword ptr [rip + 0x1007e] ## literal pool symbol address: ___stdinp
100013fa2:	mov	rdx, qword ptr [rax]
100013fa5:	lea	r12, [rbp - 0x460]
100013fac:	mov	rdi, r12
100013faf:	mov	esi, 0x400
100013fb4:	call	0x1000197dc ## symbol stub for: _fgets
100013fb9:	xor	eax, eax
100013fbb:	mov	cl, byte ptr [rbp + rax - 0x460]
100013fc2:	test	cl, cl
100013fc4:	je	0x100013fda
100013fc6:	cmp	cl, 0xa
100013fc9:	je	0x100013fd0
100013fcb:	inc	rax
100013fce:	jmp	0x100013fbb
100013fd0:	mov	eax, eax
100013fd2:	mov	byte ptr [rbp + rax - 0x460], 0x0
100013fda:	mov	rdi, r12
100013fdd:	call	0x100019920 ## symbol stub for: _strlen
100013fe2:	test	rax, rax
100013fe5:	je	0x100014251
100013feb:	cmp	byte ptr [rbp - 0x460], 0x2e
100013ff2:	jne	0x100014004
100013ff4:	cmp	byte ptr [rbp - 0x45f], 0x0
100013ffb:	jne	0x100014004
100013ffd:	mov	byte ptr [rbp - 0x460], 0x0
100014004:	mov	rdi, r12
100014007:	call	0x100019920 ## symbol stub for: _strlen
10001400c:	test	eax, eax
10001400e:	movabs	rsi, 0x200000000801
100014018:	js	0x100014053
10001401a:	mov	ecx, eax
10001401c:	mov	rax, rcx
10001401f:	shl	rax, 0x20
100014023:	movabs	rdx, offset __mh_execute_header
10001402d:	add	rax, rdx
100014030:	inc	rcx
100014033:	mov	dl, byte ptr [rbp + rcx - 0x461]
10001403a:	add	dl, -0x2f
10001403d:	cmp	dl, 0x2d
100014040:	ja	0x10001404b
100014042:	movzx	edx, dl
100014045:	bt	rsi, rdx
100014049:	jb	0x1000140c4
10001404b:	add	rax, rbx
10001404e:	dec	rcx
100014051:	jg	0x100014033
100014053:	mov	rdi, qword ptr [r15]
100014056:	call	0x100019806 ## symbol stub for: _free
10001405b:	movabs	rax, 0x6f74636572696420
100014065:	mov	qword ptr [rbp - 0x458], rax
10001406c:	movabs	rax, 0x746e657272756328
100014076:	mov	qword ptr [rbp - 0x460], rax
10001407d:	mov	dword ptr [rbp - 0x450], 0x297972
100014087:	mov	rdi, r14
10001408a:	call	0x100019920 ## symbol stub for: _strlen
10001408f:	lea	rdi, [rax + 0x28]
100014093:	call	0x100019848 ## symbol stub for: _malloc
100014098:	mov	qword ptr [r15], rax
10001409b:	test	rax, rax
10001409e:	jne	0x1000140b4
1000140a0:	mov	edi, 0x4
1000140a5:	lea	rsi, [rip + 0xf42c] ## literal pool for: "split path"
1000140ac:	call	0x1000037b0
1000140b1:	mov	rax, qword ptr [r15]
1000140b4:	mov	rdi, rax
1000140b7:	mov	rsi, r14
1000140ba:	call	0x100019914 ## symbol stub for: _strcpy
1000140bf:	jmp	0x10001415d
1000140c4:	sar	rax, 0x20
1000140c8:	mov	byte ptr [rbp + rax - 0x460], 0x0
1000140d0:	mov	rdi, qword ptr [r15]
1000140d3:	call	0x100019806 ## symbol stub for: _free
1000140d8:	mov	rdi, r12
1000140db:	call	0x100019920 ## symbol stub for: _strlen
1000140e0:	test	eax, eax
1000140e2:	js	0x1000140f9
1000140e4:	mov	ecx, eax
1000140e6:	cmp	byte ptr [rbp + rcx - 0x460], 0x2f
1000140ee:	je	0x100014102
1000140f0:	lea	ecx, [rax - 0x1]
1000140f3:	test	eax, eax
1000140f5:	mov	eax, ecx
1000140f7:	jg	0x1000140e4
1000140f9:	mov	byte ptr [rbp - 0x460], 0x0
100014100:	jmp	0x10001410e
100014102:	inc	eax
100014104:	cdqe
100014106:	mov	byte ptr [rbp + rax - 0x460], 0x0
10001410e:	mov	rdi, r12
100014111:	call	0x100019920 ## symbol stub for: _strlen
100014116:	mov	rbx, rax
100014119:	mov	rdi, r14
10001411c:	call	0x100019920 ## symbol stub for: _strlen
100014121:	lea	rdi, [rbx + rax + 0x28]
100014126:	call	0x100019848 ## symbol stub for: _malloc
10001412b:	mov	qword ptr [r15], rax
10001412e:	test	rax, rax
100014131:	jne	0x100014147
100014133:	mov	edi, 0x4
100014138:	lea	rsi, [rip + 0xf399] ## literal pool for: "split path"
10001413f:	call	0x1000037b0
100014144:	mov	rax, qword ptr [r15]
100014147:	mov	rdi, rax
10001414a:	mov	rsi, r12
10001414d:	call	0x100019914 ## symbol stub for: _strcpy
100014152:	mov	rdi, qword ptr [r15]
100014155:	mov	rsi, r14
100014158:	call	0x100019902 ## symbol stub for: _strcat
10001415d:	lea	rax, [rip + 0x16dcc]
100014164:	mov	rdi, qword ptr [rax]
100014167:	lea	rsi, [rip + 0xf5df] ## literal pool for: "Writing to:\n  %s\n"
10001416e:	mov	rdx, r12
100014171:	xor	eax, eax
100014173:	call	0x1000197ee ## symbol stub for: _fprintf
100014178:	mov	rdi, r14
10001417b:	call	0x100019806 ## symbol stub for: _free
100014180:	mov	rdi, r13
100014183:	call	0x100019806 ## symbol stub for: _free
100014188:	mov	rbx, qword ptr [r15]
10001418b:	mov	rdi, rbx
10001418e:	call	0x100019920 ## symbol stub for: _strlen
100014193:	lea	rdi, [rax + 0x28]
100014197:	call	0x100019848 ## symbol stub for: _malloc
10001419c:	mov	r13, rax
10001419f:	test	rax, rax
1000141a2:	jne	0x1000141b8
1000141a4:	mov	edi, 0x4
1000141a9:	lea	rsi, [rip + 0xf328] ## literal pool for: "split path"
1000141b0:	call	0x1000037b0
1000141b5:	mov	rbx, qword ptr [r15]
1000141b8:	mov	rdi, r13
1000141bb:	mov	rsi, rbx
1000141be:	call	0x100019914 ## symbol stub for: _strcpy
1000141c3:	mov	rdi, r13
1000141c6:	call	0x100019920 ## symbol stub for: _strlen
1000141cb:	test	eax, eax
1000141cd:	movabs	rbx, -0x100000000
1000141d7:	js	0x1000141f8
1000141d9:	mov	ecx, eax
1000141db:	cmp	byte ptr [r13 + rcx], 0x2f
1000141e1:	je	0x1000141ee
1000141e3:	lea	ecx, [rax - 0x1]
1000141e6:	test	eax, eax
1000141e8:	mov	eax, ecx
1000141ea:	jg	0x1000141d9
1000141ec:	jmp	0x1000141f8
1000141ee:	inc	eax
1000141f0:	cdqe
1000141f2:	mov	byte ptr [r13 + rax], 0x0
1000141f8:	mov	r15, qword ptr [r15]
1000141fb:	mov	rdi, r15
1000141fe:	call	0x100019920 ## symbol stub for: _strlen
100014203:	lea	rdi, [rax + 0x1]
100014207:	call	0x100019848 ## symbol stub for: _malloc
10001420c:	mov	r14, rax
10001420f:	test	rax, rax
100014212:	jne	0x10001422f
100014214:	mov	edi, 0x4
100014219:	lea	rsi, [rip + 0xf2b8] ## literal pool for: "split path"
100014220:	call	0x1000037b0
100014225:	lea	rax, [rip + 0x155ec]
10001422c:	mov	r15, qword ptr [rax]
10001422f:	mov	rdi, r13
100014232:	call	0x100019920 ## symbol stub for: _strlen
100014237:	add	r15, rax
10001423a:	mov	rdi, r14
10001423d:	mov	rsi, r15
100014240:	call	0x100019914 ## symbol stub for: _strcpy
100014245:	lea	r15, [rip + 0x155cc]
10001424c:	jmp	0x100013f71
100014251:	mov	rdi, r13
100014254:	call	0x100019806 ## symbol stub for: _free
100014259:	mov	rdi, r14
10001425c:	call	0x100019806 ## symbol stub for: _free
100014261:	mov	rax, qword ptr [rip + 0xfda8] ## literal pool symbol address: ___stack_chk_guard
100014268:	mov	rax, qword ptr [rax]
10001426b:	cmp	rax, qword ptr [rbp - 0x30]
10001426f:	jne	0x100014288
100014271:	mov	eax, 0x1
100014276:	add	rsp, 0x448
10001427d:	pop	rbx
10001427e:	pop	r12
100014280:	pop	r13
100014282:	pop	r14
100014284:	pop	r15
100014286:	pop	rbp
100014287:	ret
100014288:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
10001428d:	push	rbp
10001428e:	mov	rbp, rsp
100014291:	push	r15
100014293:	push	r14
100014295:	push	r12
100014297:	push	rbx
100014298:	sub	rsp, 0x10
10001429c:	mov	rbx, rsi
10001429f:	mov	r14, rdi
1000142a2:	inc	rbx
1000142a5:	cmp	rbx, 0x186a0
1000142ac:	jb	0x1000142bf
1000142ae:	lea	rsi, [rip + 0xf4b4] ## literal pool for: "More than 99999 splits needed"
1000142b5:	mov	edi, 0x6
1000142ba:	call	0x1000037b0
1000142bf:	lea	rcx, [rip + 0xf4c1] ## literal pool for: "z%02lu"
1000142c6:	lea	r15, [rbp - 0x26]
1000142ca:	mov	edx, 0x6
1000142cf:	mov	rdi, r15
1000142d2:	mov	esi, 0x0
1000142d7:	mov	r8, rbx
1000142da:	xor	eax, eax
1000142dc:	call	0x100019770 ## symbol stub for: ___sprintf_chk
1000142e1:	mov	rdi, r14
1000142e4:	call	0x100019920 ## symbol stub for: _strlen
1000142e9:	mov	rbx, rax
1000142ec:	add	eax, -0x3
1000142ef:	movsxd	r12, eax
1000142f2:	mov	rdi, r15
1000142f5:	call	0x100019920 ## symbol stub for: _strlen
1000142fa:	lea	eax, [rbx + rax - 0x2]
1000142fe:	movsxd	rdi, eax
100014301:	call	0x100019848 ## symbol stub for: _malloc
100014306:	mov	rbx, rax
100014309:	test	rax, rax
10001430c:	jne	0x10001431f
10001430e:	lea	rsi, [rip + 0xf1c3] ## literal pool for: "split path"
100014315:	mov	edi, 0x4
10001431a:	call	0x1000037b0
10001431f:	mov	rdi, rbx
100014322:	mov	rsi, r14
100014325:	call	0x100019914 ## symbol stub for: _strcpy
10001432a:	mov	byte ptr [rbx + r12], 0x0
10001432f:	lea	rsi, [rbp - 0x26]
100014333:	mov	rdi, rbx
100014336:	call	0x100019902 ## symbol stub for: _strcat
10001433b:	mov	rax, rbx
10001433e:	add	rsp, 0x10
100014342:	pop	rbx
100014343:	pop	r12
100014345:	pop	r14
100014347:	pop	r15
100014349:	pop	rbp
10001434a:	ret
10001434b:	push	rbp
10001434c:	mov	rbp, rsp
10001434f:	push	r15
100014351:	push	r14
100014353:	push	rbx
100014354:	push	rax
100014355:	mov	r14, rdx
100014358:	mov	r15, rsi
10001435b:	mov	rsi, rdi
10001435e:	lea	rax, [rip + 0x154b3]
100014365:	mov	rdi, qword ptr [rax]
100014368:	call	0x10001428d
10001436d:	mov	rbx, rax
100014370:	lea	rax, [rip + 0x15551]
100014377:	cmp	dword ptr [rax], 0x0
10001437a:	je	0x10001438b
10001437c:	lea	rdi, [rip + 0xf40b] ## literal pool for: "\tClosing split "
100014383:	mov	rsi, rbx
100014386:	call	0x100003d95
10001438b:	mov	rdi, r15
10001438e:	call	0x1000197be ## symbol stub for: _fclose
100014393:	mov	rdi, r14
100014396:	mov	rsi, rbx
100014399:	call	0x100003f71
10001439e:	mov	rdi, rbx
1000143a1:	call	0x100003fe9
1000143a6:	xor	eax, eax
1000143a8:	add	rsp, 0x8
1000143ac:	pop	rbx
1000143ad:	pop	r14
1000143af:	pop	r15
1000143b1:	pop	rbp
1000143b2:	ret
1000143b3:	push	rbp
1000143b4:	mov	rbp, rsp
1000143b7:	push	r15
1000143b9:	push	r14
1000143bb:	push	r13
1000143bd:	push	r12
1000143bf:	push	rbx
1000143c0:	push	rax
1000143c1:	xor	r12d, r12d
1000143c4:	test	rdi, rdi
1000143c7:	je	0x1000144a4
1000143cd:	mov	r14d, esi
1000143d0:	mov	r15, rdi
1000143d3:	mov	rbx, qword ptr [rdi]
1000143d6:	movsxd	r13, esi
1000143d9:	test	rbx, rbx
1000143dc:	je	0x1000143fe
1000143de:	xor	r12d, r12d
1000143e1:	test	r14d, r14d
1000143e4:	je	0x1000143eb
1000143e6:	cmp	r12, r13
1000143e9:	jge	0x1000143fe
1000143eb:	lea	rax, [r12 + 0x1]
1000143f0:	cmp	qword ptr [r15 + 8*r12 + 0x8], 0x0
1000143f6:	mov	r12, rax
1000143f9:	jne	0x1000143e1
1000143fb:	mov	r12d, eax
1000143fe:	mov	eax, r12d
100014401:	lea	rdi, [8*rax + 0x8]
100014409:	call	0x100019848 ## symbol stub for: _malloc
10001440e:	mov	r12, rax
100014411:	test	rax, rax
100014414:	jne	0x10001442a
100014416:	lea	rsi, [rip + 0xf3cf] ## literal pool for: "ca"
10001441d:	mov	edi, 0x4
100014422:	call	0x1000037b0
100014427:	mov	rbx, qword ptr [r15]
10001442a:	test	rbx, rbx
10001442d:	je	0x100014499
10001442f:	mov	qword ptr [rbp - 0x30], r13
100014433:	xor	r13d, r13d
100014436:	test	r14d, r14d
100014439:	je	0x100014441
10001443b:	cmp	r13, qword ptr [rbp - 0x30]
10001443f:	jge	0x10001449c
100014441:	mov	rdi, rbx
100014444:	call	0x100019920 ## symbol stub for: _strlen
100014449:	lea	rdi, [rax + 0x1]
10001444d:	call	0x100019848 ## symbol stub for: _malloc
100014452:	mov	qword ptr [r12 + 8*r13], rax
100014456:	test	rax, rax
100014459:	jne	0x10001447c
10001445b:	mov	rdi, r12
10001445e:	call	0x1000144b6
100014463:	mov	edi, 0x4
100014468:	lea	rsi, [rip + 0xf37d] ## literal pool for: "ca"
10001446f:	call	0x1000037b0
100014474:	mov	rax, qword ptr [r12 + 8*r13]
100014478:	mov	rbx, qword ptr [r15 + 8*r13]
10001447c:	mov	rdi, rax
10001447f:	mov	rsi, rbx
100014482:	call	0x100019914 ## symbol stub for: _strcpy
100014487:	mov	rbx, qword ptr [r15 + 8*r13 + 0x8]
10001448c:	inc	r13
10001448f:	test	rbx, rbx
100014492:	jne	0x100014436
100014494:	mov	r13d, r13d
100014497:	jmp	0x10001449c
100014499:	xor	r13d, r13d
10001449c:	mov	qword ptr [r12 + 8*r13], 0x0
1000144a4:	mov	rax, r12
1000144a7:	add	rsp, 0x8
1000144ab:	pop	rbx
1000144ac:	pop	r12
1000144ae:	pop	r13
1000144b0:	pop	r14
1000144b2:	pop	r15
1000144b4:	pop	rbp
1000144b5:	ret
1000144b6:	push	rbp
1000144b7:	mov	rbp, rsp
1000144ba:	push	r14
1000144bc:	push	rbx
1000144bd:	test	rdi, rdi
1000144c0:	je	0x1000144e8
1000144c2:	mov	r14, rdi
1000144c5:	mov	rdi, qword ptr [rdi]
1000144c8:	xor	ebx, ebx
1000144ca:	test	rdi, rdi
1000144cd:	je	0x1000144de
1000144cf:	call	0x100019806 ## symbol stub for: _free
1000144d4:	mov	rdi, qword ptr [r14 + 8*rbx + 0x8]
1000144d9:	inc	rbx
1000144dc:	jmp	0x1000144ca
1000144de:	mov	rdi, r14
1000144e1:	call	0x100019806 ## symbol stub for: _free
1000144e6:	jmp	0x1000144ea
1000144e8:	xor	ebx, ebx
1000144ea:	mov	eax, ebx
1000144ec:	pop	rbx
1000144ed:	pop	r14
1000144ef:	pop	rbp
1000144f0:	ret
1000144f1:	push	rbp
1000144f2:	mov	rbp, rsp
1000144f5:	push	r15
1000144f7:	push	r14
1000144f9:	push	r13
1000144fb:	push	r12
1000144fd:	push	rbx
1000144fe:	sub	rsp, 0x18
100014502:	test	rdi, rdi
100014505:	je	0x10001452d
100014507:	mov	r13, rsi
10001450a:	mov	rbx, rdi
10001450d:	mov	r12, qword ptr [rdi]
100014510:	test	r12, r12
100014513:	je	0x100014535
100014515:	mov	r15d, 0xffffffff
10001451b:	mov	rax, r12
10001451e:	inc	r15d
100014521:	cmp	qword ptr [rax], 0x0
100014525:	lea	rax, [rax + 0x8]
100014529:	jne	0x10001451e
10001452b:	jmp	0x100014538
10001452d:	xor	r15d, r15d
100014530:	jmp	0x100014659
100014535:	xor	r15d, r15d
100014538:	test	r13, r13
10001453b:	je	0x100014659
100014541:	mov	dword ptr [rbp - 0x38], edx
100014544:	mov	dword ptr [rbp - 0x2c], ecx
100014547:	mov	eax, r15d
10001454a:	lea	rdi, [8*rax + 0x10]
100014552:	call	0x100019848 ## symbol stub for: _malloc
100014557:	mov	r14, rax
10001455a:	test	rax, rax
10001455d:	jne	0x100014570
10001455f:	lea	rsi, [rip + 0xf289] ## literal pool for: "ia"
100014566:	mov	edi, 0x4
10001456b:	call	0x1000037b0
100014570:	test	r12, r12
100014573:	mov	qword ptr [rbp - 0x40], rbx
100014577:	mov	r15, r13
10001457a:	je	0x1000145b7
10001457c:	xor	r13d, r13d
10001457f:	mov	ecx, dword ptr [rbp - 0x38]
100014582:	test	ecx, ecx
100014584:	jle	0x1000145ba
100014586:	mov	rax, qword ptr [r12]
10001458a:	mov	edx, 0x0
10001458f:	test	rax, rax
100014592:	je	0x1000145bc
100014594:	mov	ecx, ecx
100014596:	xor	edx, edx
100014598:	lea	r13, [rdx + 0x1]
10001459c:	mov	qword ptr [r14 + 8*rdx], rax
1000145a0:	cmp	r13, rcx
1000145a3:	jae	0x1000145b2
1000145a5:	mov	rax, qword ptr [r12 + 8*rdx + 0x8]
1000145aa:	mov	rdx, r13
1000145ad:	test	rax, rax
1000145b0:	jne	0x100014598
1000145b2:	mov	edx, r13d
1000145b5:	jmp	0x1000145bc
1000145b7:	xor	r13d, r13d
1000145ba:	xor	edx, edx
1000145bc:	mov	qword ptr [rbp - 0x38], rdx
1000145c0:	mov	rdi, r15
1000145c3:	call	0x100019920 ## symbol stub for: _strlen
1000145c8:	lea	rdi, [rax + 0x1]
1000145cc:	call	0x100019848 ## symbol stub for: _malloc
1000145d1:	mov	rbx, rax
1000145d4:	test	rax, rax
1000145d7:	jne	0x1000145ea
1000145d9:	lea	rsi, [rip + 0xf20f] ## literal pool for: "ia"
1000145e0:	mov	edi, 0x4
1000145e5:	call	0x1000037b0
1000145ea:	mov	rdi, rbx
1000145ed:	mov	rsi, r15
1000145f0:	call	0x100019914 ## symbol stub for: _strcpy
1000145f5:	mov	rax, qword ptr [rbp - 0x38]
1000145f9:	lea	r15d, [rax + 0x1]
1000145fd:	mov	eax, eax
1000145ff:	mov	qword ptr [r14 + 8*rax], rbx
100014603:	test	r12, r12
100014606:	je	0x100014638
100014608:	mov	rcx, qword ptr [r12 + 8*r13]
10001460c:	test	rcx, rcx
10001460f:	mov	ebx, dword ptr [rbp - 0x2c]
100014612:	je	0x10001463b
100014614:	lea	rsi, [r12 + 8*r13]
100014618:	lea	rdi, [r14 + 8*rax]
10001461c:	mov	edx, 0x1
100014621:	mov	qword ptr [rdi + 8*rdx], rcx
100014625:	mov	rcx, qword ptr [rsi + 8*rdx]
100014629:	inc	rdx
10001462c:	test	rcx, rcx
10001462f:	jne	0x100014621
100014631:	add	eax, edx
100014633:	mov	r15d, eax
100014636:	jmp	0x10001463b
100014638:	mov	ebx, dword ptr [rbp - 0x2c]
10001463b:	movsxd	rax, r15d
10001463e:	mov	qword ptr [r14 + 8*rax], 0x0
100014646:	test	ebx, ebx
100014648:	je	0x100014652
10001464a:	mov	rdi, r12
10001464d:	call	0x100019806 ## symbol stub for: _free
100014652:	mov	rax, qword ptr [rbp - 0x40]
100014656:	mov	qword ptr [rax], r14
100014659:	mov	eax, r15d
10001465c:	add	rsp, 0x18
100014660:	pop	rbx
100014661:	pop	r12
100014663:	pop	r13
100014665:	pop	r14
100014667:	pop	r15
100014669:	pop	rbp
10001466a:	ret
10001466b:	push	rbp
10001466c:	mov	rbp, rsp
10001466f:	push	r15
100014671:	push	r14
100014673:	push	r13
100014675:	push	r12
100014677:	push	rbx
100014678:	sub	rsp, 0x78
10001467c:	mov	qword ptr [r8], 0x0
100014683:	test	rdi, rdi
100014686:	je	0x1000146be
100014688:	mov	rax, qword ptr [rdi]
10001468b:	mov	qword ptr [rbp - 0x60], rax
10001468f:	test	rax, rax
100014692:	je	0x1000146be
100014694:	mov	ebx, dword ptr [rbp + 0x20]
100014697:	mov	r14d, 0xffffffff
10001469d:	inc	r14d
1000146a0:	cmp	qword ptr [rax], 0x0
1000146a4:	lea	rax, [rax + 0x8]
1000146a8:	jne	0x10001469d
1000146aa:	test	r14d, r14d
1000146ad:	je	0x1000146b9
1000146af:	test	ebx, ebx
1000146b1:	jne	0x1000146d5
1000146b3:	cmp	r14d, 0x1
1000146b7:	jne	0x1000146d5
1000146b9:	mov	dword ptr [rsi], r14d
1000146bc:	jmp	0x1000146c4
1000146be:	mov	dword ptr [rsi], 0x0
1000146c4:	xor	eax, eax
1000146c6:	add	rsp, 0x78
1000146ca:	pop	rbx
1000146cb:	pop	r12
1000146cd:	pop	r13
1000146cf:	pop	r14
1000146d1:	pop	r15
1000146d3:	pop	rbp
1000146d4:	ret
1000146d5:	mov	qword ptr [rbp - 0x38], r8
1000146d9:	mov	qword ptr [rbp - 0x88], rdi
1000146e0:	mov	qword ptr [rbp - 0x98], rsi
1000146e7:	mov	qword ptr [rbp - 0x78], r9
1000146eb:	mov	dword ptr [r9], 0x0
1000146f2:	mov	qword ptr [rbp - 0x90], rdx
1000146f9:	mov	r13d, dword ptr [rdx]
1000146fc:	mov	qword ptr [rbp - 0xa0], rcx
100014703:	mov	r12d, dword ptr [rcx]
100014706:	xor	eax, eax
100014708:	cmp	r12d, -0x7
10001470c:	sete	cl
10001470f:	cmp	r13d, -0x1
100014713:	je	0x100014741
100014715:	mov	edx, r13d
100014718:	or	edx, ebx
10001471a:	je	0x100014741
10001471c:	mov	rdx, qword ptr [rbp + 0x10]
100014720:	mov	edx, dword ptr [rdx]
100014722:	mov	rsi, qword ptr [rbp + 0x18]
100014726:	movsxd	rsi, dword ptr [rsi]
100014729:	cmp	rsi, -0x1
10001472d:	je	0x100014756
10001472f:	lea	rdi, [rsi + 4*rsi]
100014733:	lea	rsi, [rip + 0x13dd6]
10001473a:	mov	rsi, qword ptr [rsi + 8*rdi + 0x18]
10001473f:	jmp	0x100014758
100014741:	mov	rdx, qword ptr [rbp + 0x18]
100014745:	mov	dword ptr [rdx], 0xffffffff
10001474b:	mov	r12d, 0xfffffffe
100014751:	mov	edx, 0xffffffff
100014756:	xor	esi, esi
100014758:	mov	qword ptr [rbp - 0x30], rsi
10001475c:	mov	al, cl
10001475e:	mov	rbx, r13
100014761:	test	eax, eax
100014763:	jne	0x100015070
100014769:	cmp	dword ptr [rip + 0x14aac], 0x0
100014770:	mov	r13, rbx
100014773:	je	0x1000147f9
100014779:	cmp	r12d, -0x4
10001477d:	setb	al
100014780:	cmp	r12d, -0x6
100014784:	setne	cl
100014787:	test	al, cl
100014789:	jne	0x100014811
10001478f:	test	edx, edx
100014791:	js	0x100014811
100014793:	mov	rbx, qword ptr [rbp - 0x60]
100014797:	mov	r10d, edx
10001479a:	cmp	qword ptr [rbx + 8*r10], 0x0
10001479f:	je	0x100014811
1000147a1:	mov	r8d, r12d
1000147a4:	and	r8d, -0x3
1000147a8:	cmp	edx, r13d
1000147ab:	jge	0x100014804
1000147ad:	xor	r9d, r9d
1000147b0:	cmp	r8d, -0x3
1000147b4:	sete	r9b
1000147b8:	add	r9d, r13d
1000147bb:	movsxd	rdi, r9d
1000147be:	mov	ecx, edx
1000147c0:	mov	r11, qword ptr [rbx + 8*r10]
1000147c4:	mov	rax, r10
1000147c7:	cmp	edx, r9d
1000147ca:	jge	0x1000147e8
1000147cc:	mov	rsi, qword ptr [rbx + 8*rax + 0x8]
1000147d1:	mov	qword ptr [rbx + 8*rax], rsi
1000147d5:	lea	rsi, [rax + 0x1]
1000147d9:	mov	rbx, qword ptr [rbp - 0x60]
1000147dd:	mov	rax, rsi
1000147e0:	cmp	rdi, rsi
1000147e3:	jne	0x1000147cc
1000147e5:	mov	rax, rdi
1000147e8:	mov	qword ptr [rbx + 8*rax], r11
1000147ec:	inc	ecx
1000147ee:	cmp	ecx, r13d
1000147f1:	je	0x100014804
1000147f3:	mov	rbx, qword ptr [rbp - 0x60]
1000147f7:	jmp	0x1000147c0
1000147f9:	cmp	r12d, -0x5
1000147fd:	jne	0x100014811
1000147ff:	jmp	0x1000148e8
100014804:	xor	eax, eax
100014806:	cmp	r8d, -0x3
10001480a:	sete	al
10001480d:	lea	edx, [rax + rdx + 0x1]
100014811:	cmp	r12d, -0x6
100014815:	je	0x1000148e8
10001481b:	mov	eax, r12d
10001481e:	and	eax, -0x2
100014821:	cmp	eax, -0x4
100014824:	jne	0x1000148c8
10001482a:	xor	eax, eax
10001482c:	cmp	r12d, -0x3
100014830:	sete	al
100014833:	mov	esi, r12d
100014836:	mov	ecx, 0xfffffffc
10001483b:	cmove	esi, ecx
10001483e:	mov	ecx, r13d
100014841:	add	ecx, eax
100014843:	lea	r13d, [r13 + rax + 0x1]
100014848:	mov	rbx, r13
10001484b:	movsxd	r13, ecx
10001484e:	mov	r15, qword ptr [rbp - 0x60]
100014852:	mov	rdi, qword ptr [r15 + 8*r13 + 0x8]
100014857:	test	rdi, rdi
10001485a:	je	0x100014861
10001485c:	inc	r13
10001485f:	jmp	0x1000148ab
100014861:	mov	eax, esi
100014863:	and	eax, -0x2
100014866:	cmp	eax, -0x4
100014869:	jne	0x1000148e2
10001486b:	test	edx, edx
10001486d:	js	0x1000148e2
10001486f:	mov	r12, rsi
100014872:	lea	rdi, [rbp - 0x60]
100014876:	lea	rsi, [rip + 0x7b93] ## literal pool for: "@"
10001487d:	mov	ecx, 0x1
100014882:	mov	rbx, rdx
100014885:	call	0x1000144f1
10001488a:	mov	rdx, rbx
10001488d:	mov	r14d, eax
100014890:	lea	ebx, [r13 + 0x2]
100014894:	inc	edx
100014896:	mov	r15, qword ptr [rbp - 0x60]
10001489a:	mov	rdi, qword ptr [r15 + 8*r13 + 0x10]
10001489f:	test	rdi, rdi
1000148a2:	je	0x1000148e2
1000148a4:	add	r13, 0x2
1000148a8:	mov	rsi, r12
1000148ab:	mov	al, byte ptr [rdi]
1000148ad:	cmp	al, 0x40
1000148af:	jne	0x1000148da
1000148b1:	xor	eax, eax
1000148b3:	mov	r12d, 0xfffffffa
1000148b9:	cmp	byte ptr [rdi + 0x1], 0x0
1000148bd:	je	0x100014761
1000148c3:	jmp	0x100015018
1000148c8:	cmp	r12d, -0x2
1000148cc:	je	0x1000148e8
1000148ce:	cmp	r12d, -0x1
1000148d2:	jne	0x1000148ee
1000148d4:	add	r13d, 0x2
1000148d8:	jmp	0x1000148eb
1000148da:	cmp	al, 0x2d
1000148dc:	jne	0x100015018
1000148e2:	mov	r13, rbx
1000148e5:	dec	r13d
1000148e8:	inc	r13d
1000148eb:	xor	r12d, r12d
1000148ee:	cmp	r13d, r14d
1000148f1:	jg	0x100015213
1000148f7:	mov	rsi, qword ptr [rbp - 0x60]
1000148fb:	movsxd	rax, r13d
1000148fe:	mov	rdi, qword ptr [rsi + 8*rax]
100014902:	test	rdi, rdi
100014905:	jne	0x100014940
100014907:	test	edx, edx
100014909:	js	0x100014927
10001490b:	mov	eax, edx
10001490d:	cmp	qword ptr [rsi + 8*rax], 0x0
100014912:	je	0x100014927
100014914:	xor	eax, eax
100014916:	cmp	r12d, -0x5
10001491a:	sete	al
10001491d:	mov	ecx, edx
10001491f:	add	ecx, eax
100014921:	mov	edx, r13d
100014924:	mov	r13d, ecx
100014927:	cmp	r13d, r14d
10001492a:	jg	0x100015134
100014930:	movsxd	rax, r13d
100014933:	mov	rdi, qword ptr [rsi + 8*rax]
100014937:	test	rdi, rdi
10001493a:	je	0x100015134
100014940:	test	edx, edx
100014942:	js	0x100014951
100014944:	mov	eax, edx
100014946:	cmp	qword ptr [rsi + 8*rax], 0x0
10001494b:	je	0x10001513f
100014951:	cmp	byte ptr [rdi], 0x2d
100014954:	jne	0x100014963
100014956:	mov	al, byte ptr [rdi + 0x1]
100014959:	cmp	al, 0x2d
10001495b:	je	0x100014971
10001495d:	test	al, al
10001495f:	je	0x1000149a0
100014961:	jmp	0x1000149ca
100014963:	cmp	dword ptr [rip + 0x148b2], 0x0
10001496a:	jne	0x1000149b7
10001496c:	jmp	0x1000151c2
100014971:	cmp	byte ptr [rdi + 0x2], 0x0
100014975:	jne	0x100015271
10001497b:	cmp	dword ptr [rip + 0x1489e], 0x0
100014982:	je	0x1000149a0
100014984:	test	edx, edx
100014986:	cmovg	r13d, edx
10001498a:	dec	r13d
10001498d:	mov	rbx, r13
100014990:	mov	eax, 0x1
100014995:	mov	r12d, 0xfffffff9
10001499b:	jmp	0x100014761
1000149a0:	mov	rax, qword ptr [rbp + 0x18]
1000149a4:	mov	dword ptr [rax], 0xffffffff
1000149aa:	cmp	dword ptr [rip + 0x1486b], 0x0
1000149b1:	je	0x10001521b
1000149b7:	test	edx, edx
1000149b9:	cmovs	edx, r13d
1000149bd:	inc	r13d
1000149c0:	mov	rbx, r13
1000149c3:	xor	eax, eax
1000149c5:	jmp	0x100014761
1000149ca:	movsxd	r9, r12d
1000149cd:	mov	rax, qword ptr [rbp - 0x38]
1000149d1:	mov	qword ptr [rax], 0x0
1000149d8:	movsx	r8d, byte ptr [rdi + r9 + 0x1]
1000149de:	test	r8d, r8d
1000149e1:	je	0x100014a90
1000149e7:	inc	r9
1000149ea:	lea	rax, [rip + 0x13b1f]
1000149f1:	cmp	qword ptr [rax + 0x18], 0x0
1000149f6:	je	0x100014aad
1000149fc:	lea	r15, [rdi + 0x1]
100014a00:	add	rax, 0x40
100014a04:	mov	ecx, 0xffffffff
100014a09:	xor	r10d, r10d
100014a0c:	mov	ebx, ecx
100014a0e:	mov	rcx, qword ptr [rax - 0x40]
100014a12:	test	rcx, rcx
100014a15:	je	0x100014a36
100014a17:	cmp	byte ptr [rcx], r8b
100014a1a:	jne	0x100014a36
100014a1c:	mov	r11b, byte ptr [rcx + 0x1]
100014a20:	mov	ecx, r10d
100014a23:	test	r11b, r11b
100014a26:	je	0x100014a38
100014a28:	mov	ecx, ebx
100014a2a:	cmp	r11b, byte ptr [rdi + r9 + 0x1]
100014a2f:	jne	0x100014a38
100014a31:	jmp	0x100014b02
100014a36:	mov	ecx, ebx
100014a38:	inc	r10d
100014a3b:	cmp	qword ptr [rax], 0x0
100014a3f:	lea	rax, [rax + 0x28]
100014a43:	jne	0x100014a0c
100014a45:	mov	r10d, ecx
100014a48:	test	r10d, r10d
100014a4b:	lea	rbx, [rip + 0x46a3e]
100014a52:	js	0x100014abc
100014a54:	movsxd	rax, r9d
100014a57:	mov	r12, r15
100014a5a:	cmp	byte ptr [r15 + rax], 0x2d
100014a5f:	mov	r15d, r10d
100014a62:	jne	0x100014b77
100014a68:	lea	rax, [r15 + 4*r15]
100014a6c:	lea	rcx, [rip + 0x13a9d]
100014a73:	cmp	dword ptr [rcx + 8*rax + 0x14], 0x0
100014a78:	je	0x100014b0e
100014a7e:	mov	rax, qword ptr [rbp - 0x78]
100014a82:	mov	dword ptr [rax], 0x1
100014a88:	inc	r9d
100014a8b:	jmp	0x100014b77
100014a90:	mov	rax, qword ptr [rbp + 0x18]
100014a94:	mov	dword ptr [rax], 0xffffffff
100014a9a:	xor	eax, eax
100014a9c:	mov	qword ptr [rbp - 0x30], rax
100014aa0:	mov	r12d, 0xfffffffe
100014aa6:	xor	eax, eax
100014aa8:	jmp	0x10001475e
100014aad:	mov	r12, r9
100014ab0:	mov	r15, rdx
100014ab3:	lea	rbx, [rip + 0x469d6]
100014aba:	jmp	0x100014ac2
100014abc:	mov	r12, r9
100014abf:	mov	r15, rdx
100014ac2:	mov	edx, 0x17a1
100014ac7:	mov	rdi, rbx
100014aca:	xor	esi, esi
100014acc:	lea	rcx, [rip + 0x533d]
100014ad3:	xor	eax, eax
100014ad5:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100014ada:	cmp	dword ptr [rbp + 0x20], 0x0
100014ade:	jg	0x1000156eb
100014ae4:	mov	edi, 0x10
100014ae9:	mov	rsi, rbx
100014aec:	call	0x1000037b0
100014af1:	xor	eax, eax
100014af3:	mov	qword ptr [rbp - 0x30], rax
100014af7:	mov	rdx, r15
100014afa:	mov	r9, r12
100014afd:	jmp	0x100015002
100014b02:	add	r12d, 0x2
100014b06:	mov	r9d, r12d
100014b09:	jmp	0x100014a48
100014b0e:	lea	rcx, [rip + 0x139fb]
100014b15:	cmp	dword ptr [rcx + 8*rax + 0x10], 0x0
100014b1a:	jne	0x100014b77
100014b1c:	mov	qword ptr [rbp - 0x30], rdi
100014b20:	mov	qword ptr [rbp - 0x70], rsi
100014b24:	mov	qword ptr [rbp - 0x40], r9
100014b28:	mov	qword ptr [rbp - 0x50], r13
100014b2c:	mov	r13, rdx
100014b2f:	mov	rdi, rbx
100014b32:	lea	rsi, [rip + 0x5217]
100014b39:	mov	ebx, r10d
100014b3c:	mov	edx, r10d
100014b3f:	xor	ecx, ecx
100014b41:	call	0x100015780
100014b46:	cmp	dword ptr [rbp + 0x20], 0x0
100014b4a:	jg	0x1000156eb
100014b50:	mov	edi, 0x10
100014b55:	lea	rsi, [rip + 0x46934]
100014b5c:	call	0x1000037b0
100014b61:	mov	rdx, r13
100014b64:	mov	r13, qword ptr [rbp - 0x50]
100014b68:	mov	r9, qword ptr [rbp - 0x40]
100014b6c:	mov	rsi, qword ptr [rbp - 0x70]
100014b70:	mov	r10d, ebx
100014b73:	mov	rdi, qword ptr [rbp - 0x30]
100014b77:	lea	rbx, [r15 + 4*r15]
100014b7b:	lea	rax, [rip + 0x1398e]
100014b82:	mov	eax, dword ptr [rax + 8*rbx + 0x10]
100014b86:	dec	eax
100014b88:	cmp	eax, 0x4
100014b8b:	ja	0x100014fdb
100014b91:	lea	rcx, [rip + 0xbd4]
100014b98:	movsxd	rax, dword ptr [rcx + 4*rax]
100014b9c:	add	rax, rcx
100014b9f:	jmp	rax
100014ba1:	movsxd	rax, r9d
100014ba4:	mov	cl, byte ptr [rax + rdi + 0x1]
100014ba8:	test	cl, cl
100014baa:	je	0x100014e2b
100014bb0:	mov	qword ptr [rbp - 0x30], rbx
100014bb4:	mov	r12d, r10d
100014bb7:	mov	r15, rdx
100014bba:	mov	edx, 0x1
100014bbf:	cmp	cl, 0x3d
100014bc2:	jne	0x100014bc9
100014bc4:	mov	edx, 0x2
100014bc9:	add	rdi, rax
100014bcc:	add	rdi, rdx
100014bcf:	mov	rbx, rdi
100014bd2:	call	0x100019920 ## symbol stub for: _strlen
100014bd7:	lea	rdi, [rax + 0x1]
100014bdb:	call	0x100019848 ## symbol stub for: _malloc
100014be0:	mov	rcx, qword ptr [rbp - 0x38]
100014be4:	mov	qword ptr [rcx], rax
100014be7:	test	rax, rax
100014bea:	jne	0x100014c04
100014bec:	mov	edi, 0x4
100014bf1:	lea	rsi, [rip + 0xec10] ## literal pool for: "gso"
100014bf8:	call	0x1000037b0
100014bfd:	mov	rax, qword ptr [rbp - 0x38]
100014c01:	mov	rax, qword ptr [rax]
100014c04:	mov	rdi, rax
100014c07:	mov	rsi, rbx
100014c0a:	call	0x100019914 ## symbol stub for: _strcpy
100014c0f:	mov	r9d, 0xfffffffe
100014c15:	mov	rdx, r15
100014c18:	mov	r10d, r12d
100014c1b:	jmp	0x100014fd7
100014c20:	mov	qword ptr [rbp - 0x30], rbx
100014c24:	mov	dword ptr [rbp - 0x48], r10d
100014c28:	mov	r15, rsi
100014c2b:	mov	r12, r13
100014c2e:	mov	qword ptr [rbp - 0x58], rdx
100014c32:	mov	rsi, r9
100014c35:	movsxd	rax, r9d
100014c38:	mov	dl, byte ptr [rax + rdi + 0x1]
100014c3c:	test	dl, dl
100014c3e:	je	0x100014efd
100014c44:	mov	rbx, rdi
100014c47:	mov	ecx, 0x1
100014c4c:	cmp	dl, 0x3d
100014c4f:	jne	0x100014c56
100014c51:	mov	ecx, 0x2
100014c56:	add	esi, ecx
100014c58:	movsxd	rdx, esi
100014c5b:	cmp	byte ptr [rbx + rdx], 0x0
100014c5f:	je	0x100014caa
100014c61:	add	rbx, rax
100014c64:	mov	r15d, ecx
100014c67:	add	r15, rbx
100014c6a:	mov	rdi, r15
100014c6d:	call	0x100019920 ## symbol stub for: _strlen
100014c72:	lea	rdi, [rax + 0x1]
100014c76:	call	0x100019848 ## symbol stub for: _malloc
100014c7b:	mov	rcx, qword ptr [rbp - 0x38]
100014c7f:	mov	qword ptr [rcx], rax
100014c82:	test	rax, rax
100014c85:	jne	0x100014c9f
100014c87:	mov	edi, 0x4
100014c8c:	lea	rsi, [rip + 0xeb75] ## literal pool for: "gso"
100014c93:	call	0x1000037b0
100014c98:	mov	rax, qword ptr [rbp - 0x38]
100014c9c:	mov	rax, qword ptr [rax]
100014c9f:	mov	rdi, rax
100014ca2:	mov	rsi, r15
100014ca5:	call	0x100019914 ## symbol stub for: _strcpy
100014caa:	mov	rdx, qword ptr [rbp - 0x58]
100014cae:	mov	r13, r12
100014cb1:	mov	r9d, 0xfffffffe
100014cb7:	jmp	0x100014fd3
100014cbc:	mov	qword ptr [rbp - 0x30], rbx
100014cc0:	mov	dword ptr [rbp - 0x48], r10d
100014cc4:	mov	qword ptr [rbp - 0x50], r13
100014cc8:	mov	r13, rdx
100014ccb:	movsxd	r15, r9d
100014cce:	cmp	byte ptr [rdi + r15 + 0x1], 0x0
100014cd4:	je	0x100014eb8
100014cda:	lea	rax, [r15 + 0x1]
100014cde:	mov	qword ptr [rbp - 0x40], rax
100014ce2:	mov	edi, 0x2
100014ce7:	call	0x100019848 ## symbol stub for: _malloc
100014cec:	mov	rbx, qword ptr [rbp - 0x38]
100014cf0:	mov	qword ptr [rbx], rax
100014cf3:	test	rax, rax
100014cf6:	jne	0x100014d0c
100014cf8:	mov	edi, 0x4
100014cfd:	lea	rsi, [rip + 0xeb04] ## literal pool for: "gso"
100014d04:	call	0x1000037b0
100014d09:	mov	rax, qword ptr [rbx]
100014d0c:	mov	cl, byte ptr [r12 + r15]
100014d10:	mov	byte ptr [rax], cl
100014d12:	mov	rax, qword ptr [rbx]
100014d15:	mov	byte ptr [rax + 0x1], 0x0
100014d19:	mov	rdx, r13
100014d1c:	mov	r13, qword ptr [rbp - 0x50]
100014d20:	mov	r9, qword ptr [rbp - 0x40]
100014d24:	jmp	0x100014fd3
100014d29:	mov	qword ptr [rbp - 0x30], rbx
100014d2d:	mov	dword ptr [rbp - 0x48], r10d
100014d31:	mov	qword ptr [rbp - 0x50], r13
100014d35:	mov	qword ptr [rbp - 0x58], rdx
100014d39:	mov	r13, r9
100014d3c:	movsxd	rax, r9d
100014d3f:	lea	rcx, [r12 + rax]
100014d43:	mov	al, byte ptr [r12 + rax]
100014d47:	cmp	al, 0x2d
100014d49:	je	0x100014d52
100014d4b:	mov	r12, rcx
100014d4e:	cmp	al, 0x2b
100014d50:	jne	0x100014d59
100014d52:	lea	r12, [rcx + 0x1]
100014d56:	mov	al, byte ptr [rcx + 0x1]
100014d59:	mov	qword ptr [rbp - 0x40], rcx
100014d5d:	test	al, al
100014d5f:	js	0x100014d85
100014d61:	mov	r15, r12
100014d64:	mov	rcx, qword ptr [rip + 0xf295] ## literal pool symbol address: __DefaultRuneLocale
100014d6b:	movzx	eax, al
100014d6e:	test	byte ptr [rcx + 4*rax + 0x3d], 0x4
100014d73:	je	0x100014d80
100014d75:	mov	al, byte ptr [r15 + 0x1]
100014d79:	inc	r15
100014d7c:	test	al, al
100014d7e:	jns	0x100014d6b
100014d80:	cmp	r15, r12
100014d83:	jne	0x100014dbb
100014d85:	lea	rdi, [rip + 0x46704]
100014d8c:	lea	rsi, [rip + 0x505d]
100014d93:	mov	edx, dword ptr [rbp - 0x48]
100014d96:	xor	ecx, ecx
100014d98:	call	0x100015780
100014d9d:	cmp	dword ptr [rbp + 0x20], 0x0
100014da1:	jg	0x1000156eb
100014da7:	mov	edi, 0x10
100014dac:	lea	rsi, [rip + 0x466dd]
100014db3:	call	0x1000037b0
100014db8:	mov	r15, r12
100014dbb:	sub	r15, qword ptr [rbp - 0x40]
100014dbf:	mov	r12, r15
100014dc2:	shl	r12, 0x20
100014dc6:	movabs	rax, offset __mh_execute_header
100014dd0:	lea	rdi, [r12 + rax]
100014dd4:	sar	rdi, 0x20
100014dd8:	call	0x100019848 ## symbol stub for: _malloc
100014ddd:	mov	rbx, qword ptr [rbp - 0x38]
100014de1:	mov	qword ptr [rbx], rax
100014de4:	test	rax, rax
100014de7:	jne	0x100014dfd
100014de9:	mov	edi, 0x4
100014dee:	lea	rsi, [rip + 0xea13] ## literal pool for: "gso"
100014df5:	call	0x1000037b0
100014dfa:	mov	rax, qword ptr [rbx]
100014dfd:	add	r13d, r15d
100014e00:	sar	r12, 0x20
100014e04:	mov	rdi, rax
100014e07:	mov	rsi, qword ptr [rbp - 0x40]
100014e0b:	mov	rdx, r12
100014e0e:	call	0x10001992c ## symbol stub for: _strncpy
100014e13:	mov	r9, r13
100014e16:	mov	rax, qword ptr [rbx]
100014e19:	mov	byte ptr [rax + r12], 0x0
100014e1e:	mov	rdx, qword ptr [rbp - 0x58]
100014e22:	mov	r13, qword ptr [rbp - 0x50]
100014e26:	jmp	0x100014fd3
100014e2b:	mov	dword ptr [rbp - 0x48], r10d
100014e2f:	mov	qword ptr [rbp - 0x58], rdx
100014e33:	mov	qword ptr [rbp - 0x50], r13
100014e37:	movsxd	r12, r13d
100014e3a:	mov	rdi, qword ptr [rsi + 8*r12 + 0x8]
100014e3f:	test	rdi, rdi
100014e42:	je	0x100014f82
100014e48:	mov	r13, rsi
100014e4b:	lea	rax, [rip + 0x136be]
100014e52:	lea	r15, [rax + 8*rbx + 0x10]
100014e57:	inc	r12
100014e5a:	call	0x100019920 ## symbol stub for: _strlen
100014e5f:	lea	rdi, [rax + 0x1]
100014e63:	call	0x100019848 ## symbol stub for: _malloc
100014e68:	mov	rcx, qword ptr [rbp - 0x38]
100014e6c:	mov	qword ptr [rcx], rax
100014e6f:	test	rax, rax
100014e72:	jne	0x100014e8c
100014e74:	mov	edi, 0x4
100014e79:	lea	rsi, [rip + 0xe988] ## literal pool for: "gso"
100014e80:	call	0x1000037b0
100014e85:	mov	rax, qword ptr [rbp - 0x38]
100014e89:	mov	rax, qword ptr [rax]
100014e8c:	mov	rsi, qword ptr [r13 + 8*r12]
100014e91:	mov	rdi, rax
100014e94:	call	0x100019914 ## symbol stub for: _strcpy
100014e99:	xor	r9d, r9d
100014e9c:	cmp	dword ptr [r15], 0x3
100014ea0:	setne	r9b
100014ea4:	add	r9d, r9d
100014ea7:	or	r9d, -0x3
100014eab:	mov	rdx, qword ptr [rbp - 0x58]
100014eaf:	mov	r13, qword ptr [rbp - 0x50]
100014eb3:	jmp	0x100014fc3
100014eb8:	mov	rbx, r9
100014ebb:	lea	rdi, [rip + 0x465ce]
100014ec2:	lea	rsi, [rip + 0x4ef7]
100014ec9:	mov	edx, dword ptr [rbp - 0x48]
100014ecc:	xor	ecx, ecx
100014ece:	call	0x100015780
100014ed3:	cmp	dword ptr [rbp + 0x20], 0x0
100014ed7:	jg	0x1000156eb
100014edd:	mov	edi, 0x10
100014ee2:	lea	rsi, [rip + 0x465a7]
100014ee9:	call	0x1000037b0
100014eee:	mov	rdx, r13
100014ef1:	mov	r13, qword ptr [rbp - 0x50]
100014ef5:	mov	r9, rbx
100014ef8:	jmp	0x100014fd3
100014efd:	movsxd	rax, r12d
100014f00:	mov	qword ptr [rbp - 0x40], rax
100014f04:	mov	rdi, qword ptr [r15 + 8*rax + 0x8]
100014f09:	test	rdi, rdi
100014f0c:	je	0x100014fc9
100014f12:	cmp	byte ptr [rdi], 0x2d
100014f15:	mov	rdx, qword ptr [rbp - 0x58]
100014f19:	mov	r13, r12
100014f1c:	mov	r9, rsi
100014f1f:	mov	r10d, dword ptr [rbp - 0x48]
100014f23:	mov	rbx, qword ptr [rbp - 0x30]
100014f27:	je	0x100014fdb
100014f2d:	inc	qword ptr [rbp - 0x40]
100014f31:	call	0x100019920 ## symbol stub for: _strlen
100014f36:	lea	rdi, [rax + 0x1]
100014f3a:	call	0x100019848 ## symbol stub for: _malloc
100014f3f:	mov	rcx, qword ptr [rbp - 0x38]
100014f43:	mov	qword ptr [rcx], rax
100014f46:	test	rax, rax
100014f49:	jne	0x100014f63
100014f4b:	mov	edi, 0x4
100014f50:	lea	rsi, [rip + 0xe8b1] ## literal pool for: "gso"
100014f57:	call	0x1000037b0
100014f5c:	mov	rax, qword ptr [rbp - 0x38]
100014f60:	mov	rax, qword ptr [rax]
100014f63:	mov	rcx, qword ptr [rbp - 0x40]
100014f67:	mov	rsi, qword ptr [r15 + 8*rcx]
100014f6b:	mov	rdi, rax
100014f6e:	call	0x100019914 ## symbol stub for: _strcpy
100014f73:	mov	r9d, 0xffffffff
100014f79:	mov	rdx, qword ptr [rbp - 0x58]
100014f7d:	mov	r13, r12
100014f80:	jmp	0x100014fd3
100014f82:	mov	r15, r9
100014f85:	lea	rdi, [rip + 0x46504]
100014f8c:	lea	rsi, [rip + 0x4ddd]
100014f93:	mov	edx, dword ptr [rbp - 0x48]
100014f96:	xor	ecx, ecx
100014f98:	call	0x100015780
100014f9d:	cmp	dword ptr [rbp + 0x20], 0x0
100014fa1:	jg	0x1000156eb
100014fa7:	mov	edi, 0x10
100014fac:	lea	rsi, [rip + 0x464dd]
100014fb3:	call	0x1000037b0
100014fb8:	mov	rdx, qword ptr [rbp - 0x58]
100014fbc:	mov	r13, qword ptr [rbp - 0x50]
100014fc0:	mov	r9, r15
100014fc3:	mov	r10d, dword ptr [rbp - 0x48]
100014fc7:	jmp	0x100014fdb
100014fc9:	mov	rdx, qword ptr [rbp - 0x58]
100014fcd:	mov	r13, r12
100014fd0:	mov	r9, rsi
100014fd3:	mov	r10d, dword ptr [rbp - 0x48]
100014fd7:	mov	rbx, qword ptr [rbp - 0x30]
100014fdb:	mov	rax, qword ptr [rbp + 0x18]
100014fdf:	mov	dword ptr [rax], r10d
100014fe2:	lea	rax, [rip + 0x13527]
100014fe9:	mov	rcx, qword ptr [rax + 8*rbx + 0x18]
100014fee:	mov	rax, rcx
100014ff1:	mov	qword ptr [rbp - 0x30], rcx
100014ff5:	cmp	rcx, 0xfffe
100014ffc:	je	0x1000156fe
100015002:	xor	eax, eax
100015004:	mov	r12d, 0xfffffffe
10001500a:	test	r9d, r9d
10001500d:	je	0x10001475e
100015013:	jmp	0x1000150f9
100015018:	mov	qword ptr [rbp - 0x40], rsi
10001501c:	mov	qword ptr [rbp - 0x58], rdx
100015020:	call	0x100019920 ## symbol stub for: _strlen
100015025:	lea	rdi, [rax + 0x1]
100015029:	call	0x100019848 ## symbol stub for: _malloc
10001502e:	mov	r12, qword ptr [rbp - 0x38]
100015032:	mov	qword ptr [r12], rax
100015036:	test	rax, rax
100015039:	jne	0x100015054
10001503b:	lea	rsi, [rip + 0xe7b0] ## literal pool for: "go"
100015042:	mov	edi, 0x4
100015047:	call	0x1000037b0
10001504c:	mov	rax, qword ptr [r12]
100015050:	mov	r15, qword ptr [rbp - 0x60]
100015054:	mov	rsi, qword ptr [r15 + 8*r13]
100015058:	mov	rdi, rax
10001505b:	call	0x100019914 ## symbol stub for: _strcpy
100015060:	mov	rdx, qword ptr [rbp - 0x58]
100015064:	mov	r13, rbx
100015067:	mov	r9, qword ptr [rbp - 0x40]
10001506b:	jmp	0x1000150f9
100015070:	lea	r15d, [rbx + 0x1]
100015074:	cmp	ebx, r14d
100015077:	jge	0x1000150ed
100015079:	mov	rax, qword ptr [rbp - 0x60]
10001507d:	movsxd	rcx, r15d
100015080:	mov	rbx, qword ptr [rax + 8*rcx]
100015084:	test	rbx, rbx
100015087:	je	0x1000150ed
100015089:	mov	qword ptr [rbp - 0x58], rdx
10001508d:	mov	rdi, rbx
100015090:	call	0x100019920 ## symbol stub for: _strlen
100015095:	lea	rdi, [rax + 0x1]
100015099:	call	0x100019848 ## symbol stub for: _malloc
10001509e:	mov	r13, qword ptr [rbp - 0x38]
1000150a2:	mov	qword ptr [r13], rax
1000150a6:	test	rax, rax
1000150a9:	jne	0x1000150c0
1000150ab:	lea	rsi, [rip + 0xe740] ## literal pool for: "go"
1000150b2:	mov	edi, 0x4
1000150b7:	call	0x1000037b0
1000150bc:	mov	rax, qword ptr [r13]
1000150c0:	mov	rdi, rax
1000150c3:	mov	rsi, rbx
1000150c6:	call	0x100019914 ## symbol stub for: _strcpy
1000150cb:	mov	rax, qword ptr [rbp + 0x18]
1000150cf:	mov	dword ptr [rax], 0xffffffff
1000150d5:	mov	eax, 0xffff
1000150da:	mov	qword ptr [rbp - 0x30], rax
1000150de:	mov	r9d, r12d
1000150e1:	mov	eax, r15d
1000150e4:	mov	rdx, qword ptr [rbp - 0x58]
1000150e8:	mov	r13, rax
1000150eb:	jmp	0x1000150f9
1000150ed:	xor	eax, eax
1000150ef:	mov	qword ptr [rbp - 0x30], rax
1000150f3:	mov	r9d, r12d
1000150f6:	mov	r13d, r15d
1000150f9:	mov	rax, qword ptr [rbp - 0x60]
1000150fd:	mov	rcx, qword ptr [rbp - 0x88]
100015104:	mov	qword ptr [rcx], rax
100015107:	mov	rax, qword ptr [rbp - 0x98]
10001510e:	mov	dword ptr [rax], r14d
100015111:	mov	rax, qword ptr [rbp + 0x10]
100015115:	mov	dword ptr [rax], edx
100015117:	mov	rax, qword ptr [rbp - 0x90]
10001511e:	mov	dword ptr [rax], r13d
100015121:	mov	rax, qword ptr [rbp - 0xa0]
100015128:	mov	dword ptr [rax], r9d
10001512b:	mov	rax, qword ptr [rbp - 0x30]
10001512f:	jmp	0x1000146c6
100015134:	mov	r9d, r12d
100015137:	xor	eax, eax
100015139:	mov	qword ptr [rbp - 0x30], rax
10001513d:	jmp	0x1000150f9
10001513f:	xor	eax, eax
100015141:	cmp	r12d, -0x5
100015145:	sete	al
100015148:	add	r13d, eax
10001514b:	cmp	r13d, r14d
10001514e:	jg	0x10001520d
100015154:	movsxd	r15, r13d
100015157:	mov	rdi, qword ptr [rsi + 8*r15]
10001515b:	test	rdi, rdi
10001515e:	je	0x10001520d
100015164:	mov	r12, rdx
100015167:	mov	rbx, rsi
10001516a:	call	0x100019920 ## symbol stub for: _strlen
10001516f:	lea	rdi, [rax + 0x1]
100015173:	call	0x100019848 ## symbol stub for: _malloc
100015178:	mov	rcx, rbx
10001517b:	mov	rbx, qword ptr [rbp - 0x38]
10001517f:	mov	qword ptr [rbx], rax
100015182:	test	rax, rax
100015185:	jne	0x10001519f
100015187:	lea	rsi, [rip + 0xe664] ## literal pool for: "go"
10001518e:	mov	edi, 0x4
100015193:	call	0x1000037b0
100015198:	mov	rax, qword ptr [rbx]
10001519b:	mov	rcx, qword ptr [rbp - 0x60]
10001519f:	mov	rsi, qword ptr [rcx + 8*r15]
1000151a3:	mov	rdi, rax
1000151a6:	call	0x100019914 ## symbol stub for: _strcpy
1000151ab:	mov	eax, 0xffff
1000151b0:	mov	qword ptr [rbp - 0x30], rax
1000151b4:	mov	r9d, 0xfffffffb
1000151ba:	mov	rdx, r12
1000151bd:	jmp	0x1000150f9
1000151c2:	mov	r15, rdx
1000151c5:	mov	r12, rdi
1000151c8:	call	0x100019920 ## symbol stub for: _strlen
1000151cd:	lea	rdi, [rax + 0x1]
1000151d1:	call	0x100019848 ## symbol stub for: _malloc
1000151d6:	mov	rbx, qword ptr [rbp - 0x38]
1000151da:	mov	qword ptr [rbx], rax
1000151dd:	test	rax, rax
1000151e0:	jne	0x1000151f6
1000151e2:	lea	rsi, [rip + 0xe609] ## literal pool for: "go"
1000151e9:	mov	edi, 0x4
1000151ee:	call	0x1000037b0
1000151f3:	mov	rax, qword ptr [rbx]
1000151f6:	mov	rdi, rax
1000151f9:	mov	rsi, r12
1000151fc:	call	0x100019914 ## symbol stub for: _strcpy
100015201:	mov	rax, qword ptr [rbp + 0x18]
100015205:	mov	dword ptr [rax], 0xffffffff
10001520b:	jmp	0x10001525a
10001520d:	xor	eax, eax
10001520f:	mov	qword ptr [rbp - 0x30], rax
100015213:	mov	r9d, r12d
100015216:	jmp	0x1000150f9
10001521b:	mov	r15, rdx
10001521e:	mov	r12, rdi
100015221:	call	0x100019920 ## symbol stub for: _strlen
100015226:	lea	rdi, [rax + 0x1]
10001522a:	call	0x100019848 ## symbol stub for: _malloc
10001522f:	mov	rbx, qword ptr [rbp - 0x38]
100015233:	mov	qword ptr [rbx], rax
100015236:	test	rax, rax
100015239:	jne	0x10001524f
10001523b:	lea	rsi, [rip + 0xe5b0] ## literal pool for: "go"
100015242:	mov	edi, 0x4
100015247:	call	0x1000037b0
10001524c:	mov	rax, qword ptr [rbx]
10001524f:	mov	rdi, rax
100015252:	mov	rsi, r12
100015255:	call	0x100019914 ## symbol stub for: _strcpy
10001525a:	mov	eax, 0xffff
10001525f:	mov	qword ptr [rbp - 0x30], rax
100015263:	mov	r9d, 0xfffffffb
100015269:	mov	rdx, r15
10001526c:	jmp	0x1000150f9
100015271:	mov	qword ptr [rbp - 0x50], r13
100015275:	movsxd	rbx, r13d
100015278:	mov	rax, qword ptr [rbp - 0x38]
10001527c:	mov	qword ptr [rax], 0x0
100015283:	mov	r13, qword ptr [rsi + 8*rbx]
100015287:	test	r13, r13
10001528a:	je	0x10001531a
100015290:	mov	qword ptr [rbp - 0x70], rsi
100015294:	mov	qword ptr [rbp - 0x58], rdx
100015298:	mov	rdi, r13
10001529b:	call	0x100019920 ## symbol stub for: _strlen
1000152a0:	lea	rdi, [rax + 0x1]
1000152a4:	call	0x100019848 ## symbol stub for: _malloc
1000152a9:	test	rax, rax
1000152ac:	jne	0x1000152cd
1000152ae:	lea	rsi, [rip + 0xe540] ## literal pool for: "glo"
1000152b5:	mov	edi, 0x4
1000152ba:	mov	r15, rax
1000152bd:	call	0x1000037b0
1000152c2:	mov	rax, qword ptr [rbp - 0x70]
1000152c6:	mov	r13, qword ptr [rax + 8*rbx]
1000152ca:	mov	rax, r15
1000152cd:	mov	qword ptr [rbp - 0x80], rbx
1000152d1:	mov	rdi, rax
1000152d4:	mov	rsi, r13
1000152d7:	mov	rbx, rax
1000152da:	call	0x100019914 ## symbol stub for: _strcpy
1000152df:	lea	r15, [rbx + 0x2]
1000152e3:	mov	rax, qword ptr [rbp - 0x38]
1000152e7:	mov	qword ptr [rax], 0x0
1000152ee:	mov	qword ptr [rbp - 0x48], rbx
1000152f2:	mov	rsi, rbx
1000152f5:	add	rsi, 0x3
1000152f9:	mov	rax, r15
1000152fc:	mov	rcx, r15
1000152ff:	mov	rbx, qword ptr [rbp - 0x78]
100015303:	mov	dl, byte ptr [rsi - 0x1]
100015306:	test	dl, dl
100015308:	je	0x100015336
10001530a:	cmp	dl, 0x3d
10001530d:	je	0x10001533a
10001530f:	mov	rax, rcx
100015312:	inc	rcx
100015315:	inc	rsi
100015318:	jmp	0x100015303
10001531a:	mov	rax, qword ptr [rbp + 0x18]
10001531e:	mov	dword ptr [rax], 0xffffffff
100015324:	xor	eax, eax
100015326:	mov	qword ptr [rbp - 0x30], rax
10001532a:	mov	r9d, r12d
10001532d:	mov	r13, qword ptr [rbp - 0x50]
100015331:	jmp	0x1000150f9
100015336:	xor	esi, esi
100015338:	jmp	0x10001533e
10001533a:	mov	byte ptr [rsi - 0x1], 0x0
10001533e:	mov	qword ptr [rbp - 0x30], r15
100015342:	cmp	byte ptr [rax], 0x2d
100015345:	mov	qword ptr [rbp - 0x68], rsi
100015349:	jne	0x100015356
10001534b:	mov	dword ptr [rbx], 0x1
100015351:	mov	byte ptr [rax], 0x0
100015354:	jmp	0x10001535c
100015356:	mov	dword ptr [rbx], 0x0
10001535c:	lea	rax, [rip + 0x131ad]
100015363:	cmp	qword ptr [rax + 0x18], 0x0
100015368:	je	0x100015431
10001536e:	lea	rbx, [rax + 0x40]
100015372:	mov	dword ptr [rbp - 0x40], 0xffffffff
100015379:	xor	r13d, r13d
10001537c:	mov	r12, qword ptr [rbx - 0x38]
100015380:	test	r12, r12
100015383:	je	0x10001540b
100015389:	mov	rdi, r12
10001538c:	mov	r15, qword ptr [rbp - 0x30]
100015390:	mov	rsi, r15
100015393:	call	0x10001990e ## symbol stub for: _strcmp
100015398:	test	eax, eax
10001539a:	je	0x100015487
1000153a0:	mov	rdi, r15
1000153a3:	call	0x100019920 ## symbol stub for: _strlen
1000153a8:	mov	rdi, r12
1000153ab:	mov	rsi, r15
1000153ae:	mov	rdx, rax
1000153b1:	call	0x100019926 ## symbol stub for: _strncmp
1000153b6:	test	eax, eax
1000153b8:	jne	0x10001540b
1000153ba:	cmp	dword ptr [rbp - 0x40], 0x0
1000153be:	mov	dword ptr [rbp - 0x40], r13d
1000153c2:	lea	r15, [rip + 0x460c7]
1000153c9:	js	0x10001540b
1000153cb:	mov	edx, 0x17a1
1000153d0:	mov	rdi, r15
1000153d3:	xor	esi, esi
1000153d5:	lea	rcx, [rip + 0x4934]
1000153dc:	mov	r8, qword ptr [rbp - 0x30]
1000153e0:	xor	eax, eax
1000153e2:	call	0x100019770 ## symbol stub for: ___sprintf_chk
1000153e7:	mov	rdi, qword ptr [rbp - 0x48]
1000153eb:	call	0x100019806 ## symbol stub for: _free
1000153f0:	cmp	dword ptr [rbp + 0x20], 0x0
1000153f4:	jg	0x1000156eb
1000153fa:	mov	edi, 0x10
1000153ff:	mov	rsi, r15
100015402:	call	0x1000037b0
100015407:	mov	dword ptr [rbp - 0x40], r13d
10001540b:	inc	r13d
10001540e:	cmp	qword ptr [rbx], 0x0
100015412:	lea	rbx, [rbx + 0x28]
100015416:	jne	0x10001537c
10001541c:	mov	r13d, dword ptr [rbp - 0x40]
100015420:	cmp	r13d, -0x1
100015424:	lea	rax, [rip + 0x130e5]
10001542b:	mov	rbx, qword ptr [rbp - 0x78]
10001542f:	jne	0x100015492
100015431:	lea	rdi, [rip + 0x46058]
100015438:	lea	rcx, [rip + 0x48f1]
10001543f:	mov	edx, 0x17a1
100015444:	mov	esi, 0x0
100015449:	mov	r8, qword ptr [rbp - 0x30]
10001544d:	xor	eax, eax
10001544f:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100015454:	mov	rdi, qword ptr [rbp - 0x48]
100015458:	call	0x100019806 ## symbol stub for: _free
10001545d:	cmp	dword ptr [rbp + 0x20], 0x0
100015461:	jg	0x1000156eb
100015467:	lea	rsi, [rip + 0x46022]
10001546e:	mov	edi, 0x10
100015473:	call	0x1000037b0
100015478:	mov	r13d, 0xffffffff
10001547e:	lea	rax, [rip + 0x1308b]
100015485:	jmp	0x100015492
100015487:	lea	rax, [rip + 0x13082]
10001548e:	mov	rbx, qword ptr [rbp - 0x78]
100015492:	mov	r12, qword ptr [rbp - 0x48]
100015496:	cmp	dword ptr [rbx], 0x0
100015499:	mov	dword ptr [rbp - 0x40], r13d
10001549d:	movsxd	r15, r13d
1000154a0:	mov	r13, qword ptr [rbp - 0x50]
1000154a4:	je	0x1000154c3
1000154a6:	lea	rax, [r15 + 4*r15]
1000154aa:	lea	rcx, [rip + 0x1305f]
1000154b1:	cmp	dword ptr [rcx + 8*rax + 0x14], 0x0
1000154b6:	lea	rax, [rip + 0x13053]
1000154bd:	je	0x1000155a4
1000154c3:	lea	rdx, [r15 + 4*r15]
1000154c7:	mov	eax, dword ptr [rax + 8*rdx + 0x10]
1000154cb:	lea	ecx, [rax - 0x3]
1000154ce:	cmp	ecx, 0x3
1000154d1:	mov	qword ptr [rbp - 0x30], rdx
1000154d5:	jb	0x100015545
1000154d7:	cmp	eax, 0x1
1000154da:	je	0x100015545
1000154dc:	mov	r15d, 0xfffffffe
1000154e2:	cmp	eax, 0x2
1000154e5:	jne	0x100015673
1000154eb:	cmp	qword ptr [rbp - 0x68], 0x0
1000154f0:	je	0x10001571f
1000154f6:	mov	rdi, qword ptr [rbp - 0x68]
1000154fa:	call	0x100019920 ## symbol stub for: _strlen
1000154ff:	lea	rdi, [rax + 0x1]
100015503:	call	0x100019848 ## symbol stub for: _malloc
100015508:	mov	rcx, qword ptr [rbp - 0x38]
10001550c:	mov	qword ptr [rcx], rax
10001550f:	test	rax, rax
100015512:	jne	0x100015534
100015514:	mov	rdi, r12
100015517:	call	0x100019806 ## symbol stub for: _free
10001551c:	lea	rsi, [rip + 0xe2d2] ## literal pool for: "glo"
100015523:	mov	edi, 0x4
100015528:	call	0x1000037b0
10001552d:	mov	rax, qword ptr [rbp - 0x38]
100015531:	mov	rax, qword ptr [rax]
100015534:	mov	rdi, rax
100015537:	mov	rsi, qword ptr [rbp - 0x68]
10001553b:	call	0x100019914 ## symbol stub for: _strcpy
100015540:	jmp	0x10001571f
100015545:	mov	rdi, qword ptr [rbp - 0x68]
100015549:	test	rdi, rdi
10001554c:	je	0x1000155ee
100015552:	mov	rbx, r12
100015555:	mov	r12, rdi
100015558:	call	0x100019920 ## symbol stub for: _strlen
10001555d:	lea	rdi, [rax + 0x1]
100015561:	call	0x100019848 ## symbol stub for: _malloc
100015566:	mov	r15, qword ptr [rbp - 0x38]
10001556a:	mov	qword ptr [r15], rax
10001556d:	test	rax, rax
100015570:	jne	0x10001558e
100015572:	mov	rdi, rbx
100015575:	call	0x100019806 ## symbol stub for: _free
10001557a:	lea	rsi, [rip + 0xe274] ## literal pool for: "glo"
100015581:	mov	edi, 0x4
100015586:	call	0x1000037b0
10001558b:	mov	rax, qword ptr [r15]
10001558e:	mov	rdi, rax
100015591:	mov	rsi, r12
100015594:	call	0x100019914 ## symbol stub for: _strcpy
100015599:	mov	r15d, 0xfffffffe
10001559f:	jmp	0x100015726
1000155a4:	lea	rdi, [rip + 0x45ee5]
1000155ab:	lea	rsi, [rip + 0x479e]
1000155b2:	mov	edx, dword ptr [rbp - 0x40]
1000155b5:	mov	ecx, 0x1
1000155ba:	call	0x100015780
1000155bf:	mov	rdi, r12
1000155c2:	call	0x100019806 ## symbol stub for: _free
1000155c7:	cmp	dword ptr [rbp + 0x20], 0x0
1000155cb:	jg	0x1000156eb
1000155d1:	lea	rsi, [rip + 0x45eb8]
1000155d8:	mov	edi, 0x10
1000155dd:	call	0x1000037b0
1000155e2:	lea	rax, [rip + 0x12f27]
1000155e9:	jmp	0x1000154c3
1000155ee:	mov	rax, qword ptr [rbp - 0x70]
1000155f2:	mov	rbx, qword ptr [rbp - 0x80]
1000155f6:	mov	rdi, qword ptr [rax + 8*rbx + 0x8]
1000155fb:	test	rdi, rdi
1000155fe:	je	0x1000156c2
100015604:	lea	rax, [rip + 0x12f05]
10001560b:	lea	r15, [rax + 8*rdx + 0x10]
100015610:	inc	rbx
100015613:	call	0x100019920 ## symbol stub for: _strlen
100015618:	lea	rdi, [rax + 0x1]
10001561c:	call	0x100019848 ## symbol stub for: _malloc
100015621:	mov	rcx, qword ptr [rbp - 0x38]
100015625:	mov	qword ptr [rcx], rax
100015628:	test	rax, rax
10001562b:	jne	0x10001564d
10001562d:	mov	rdi, r12
100015630:	call	0x100019806 ## symbol stub for: _free
100015635:	lea	rsi, [rip + 0xe1b9] ## literal pool for: "glo"
10001563c:	mov	edi, 0x4
100015641:	call	0x1000037b0
100015646:	mov	rax, qword ptr [rbp - 0x38]
10001564a:	mov	rax, qword ptr [rax]
10001564d:	mov	rcx, qword ptr [rbp - 0x70]
100015651:	mov	rsi, qword ptr [rcx + 8*rbx]
100015655:	mov	rdi, rax
100015658:	call	0x100019914 ## symbol stub for: _strcpy
10001565d:	xor	ebx, ebx
10001565f:	cmp	dword ptr [r15], 0x3
100015663:	setne	bl
100015666:	add	ebx, ebx
100015668:	or	ebx, -0x3
10001566b:	mov	r15, rbx
10001566e:	jmp	0x10001571f
100015673:	cmp	qword ptr [rbp - 0x68], 0x0
100015678:	je	0x10001571f
10001567e:	test	eax, eax
100015680:	jne	0x10001571f
100015686:	lea	rdi, [rip + 0x45e03]
10001568d:	lea	rsi, [rip + 0x46fc]
100015694:	mov	edx, dword ptr [rbp - 0x40]
100015697:	mov	ecx, 0x1
10001569c:	call	0x100015780
1000156a1:	mov	rdi, r12
1000156a4:	call	0x100019806 ## symbol stub for: _free
1000156a9:	cmp	dword ptr [rbp + 0x20], 0x0
1000156ad:	jg	0x1000156eb
1000156af:	lea	rsi, [rip + 0x45dda]
1000156b6:	mov	edi, 0x10
1000156bb:	call	0x1000037b0
1000156c0:	jmp	0x10001571f
1000156c2:	lea	rdi, [rip + 0x45dc7]
1000156c9:	lea	rsi, [rip + 0x46a0]
1000156d0:	mov	edx, dword ptr [rbp - 0x40]
1000156d3:	mov	ecx, 0x1
1000156d8:	call	0x100015780
1000156dd:	mov	rdi, r12
1000156e0:	call	0x100019806 ## symbol stub for: _free
1000156e5:	cmp	dword ptr [rbp + 0x20], 0x0
1000156e9:	jle	0x100015708
1000156eb:	lea	rdi, [rip + 0x45d9e]
1000156f2:	lea	rsi, [rip + 0x50be] ## literal pool for: ""
1000156f9:	call	0x100003e67
1000156fe:	mov	eax, 0xfffe
100015703:	jmp	0x1000146c6
100015708:	lea	rsi, [rip + 0x45d81]
10001570f:	mov	edi, 0x10
100015714:	call	0x1000037b0
100015719:	mov	r15d, 0xfffffffe
10001571f:	mov	r13, qword ptr [rbp - 0x50]
100015723:	mov	rbx, r12
100015726:	mov	rdi, rbx
100015729:	call	0x100019806 ## symbol stub for: _free
10001572e:	mov	rax, qword ptr [rbp + 0x18]
100015732:	mov	ecx, dword ptr [rbp - 0x40]
100015735:	mov	dword ptr [rax], ecx
100015737:	lea	rax, [rip + 0x12dd2]
10001573e:	mov	rcx, qword ptr [rbp - 0x30]
100015742:	mov	rdx, qword ptr [rax + 8*rcx + 0x18]
100015747:	mov	eax, 0xfffe
10001574c:	mov	rcx, rdx
10001574f:	mov	qword ptr [rbp - 0x30], rdx
100015753:	cmp	rdx, 0xfffe
10001575a:	mov	rdx, qword ptr [rbp - 0x58]
10001575e:	mov	r9, r15
100015761:	je	0x1000146c6
100015767:	jmp	0x1000150f9
10001576c:	xor	eax, 0xb4fffff4
100015771:	hlt
	.byte 0xff #bad opcode
100015773:	push	qword ptr [rip + 0x50fffff4]
100015779:	cmc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10001577c:	mov	ebp, 0x55fffff5
100015781:	mov	rbp, rsp
100015784:	push	r14
100015786:	push	rbx
100015787:	sub	rsp, 0x40
10001578b:	mov	r14, rsi
10001578e:	mov	rbx, rdi
100015791:	mov	rax, qword ptr [rip + 0xe878] ## literal pool symbol address: ___stack_chk_guard
100015798:	mov	rax, qword ptr [rax]
10001579b:	mov	qword ptr [rbp - 0x18], rax
10001579f:	movsxd	rax, edx
1000157a2:	lea	rax, [rax + 4*rax]
1000157a6:	lea	rdx, [rip + 0x12d63]
1000157ad:	lea	rsi, [rdx + 8*rax]
1000157b1:	mov	r9, qword ptr [rsi + 0x20]
1000157b5:	test	r9, r9
1000157b8:	je	0x1000157cb
1000157ba:	cmp	byte ptr [r9], 0x0
1000157be:	je	0x1000157cb
1000157c0:	test	ecx, ecx
1000157c2:	je	0x1000157f7
1000157c4:	mov	r8, qword ptr [rdx + 8*rax + 0x8]
1000157c9:	jmp	0x1000157fa
1000157cb:	test	ecx, ecx
1000157cd:	je	0x1000157d6
1000157cf:	mov	r8, qword ptr [rdx + 8*rax + 0x8]
1000157d4:	jmp	0x1000157d9
1000157d6:	mov	r8, qword ptr [rsi]
1000157d9:	lea	rcx, [rip + 0xe023] ## literal pool for: "'%s'"
1000157e0:	lea	rdi, [rbp - 0x50]
1000157e4:	mov	edx, 0x32
1000157e9:	mov	esi, 0x0
1000157ee:	xor	eax, eax
1000157f0:	call	0x100019770 ## symbol stub for: ___sprintf_chk
1000157f5:	jmp	0x100015816
1000157f7:	mov	r8, qword ptr [rsi]
1000157fa:	lea	rcx, [rip + 0xdff8] ## literal pool for: "'%s' (%s)"
100015801:	lea	rdi, [rbp - 0x50]
100015805:	mov	edx, 0x32
10001580a:	mov	esi, 0x0
10001580f:	xor	eax, eax
100015811:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100015816:	lea	rdx, [rbp - 0x50]
10001581a:	mov	rdi, rbx
10001581d:	mov	rsi, r14
100015820:	xor	eax, eax
100015822:	call	0x1000198ea ## symbol stub for: _sprintf
100015827:	mov	rax, qword ptr [rip + 0xe7e2] ## literal pool symbol address: ___stack_chk_guard
10001582e:	mov	rax, qword ptr [rax]
100015831:	cmp	rax, qword ptr [rbp - 0x18]
100015835:	jne	0x100015840
100015837:	add	rsp, 0x40
10001583b:	pop	rbx
10001583c:	pop	r14
10001583e:	pop	rbp
10001583f:	ret
100015840:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
100015845:	nop	word ptr cs:[rax + rax]
10001584f:	nop
100015850:	push	rbp
100015851:	mov	rbp, rsp
100015854:	push	r15
100015856:	push	r14
100015858:	push	rbx
100015859:	push	rax
10001585a:	test	rdi, rdi
10001585d:	je	0x1000158b8
10001585f:	mov	rbx, rdi
100015862:	mov	rsi, -0x1
100015869:	mov	edx, 0x1
10001586e:	call	0x10001980c ## symbol stub for: _fseeko
100015873:	xor	r14d, r14d
100015876:	test	eax, eax
100015878:	jne	0x1000158be
10001587a:	mov	rdi, rbx
10001587d:	call	0x100019818 ## symbol stub for: _ftello
100015882:	cmp	rax, -0x1
100015886:	je	0x1000158be
100015888:	mov	r15, rax
10001588b:	mov	esi, 0x1
100015890:	mov	rdi, rbx
100015893:	mov	edx, 0x1
100015898:	call	0x10001980c ## symbol stub for: _fseeko
10001589d:	test	eax, eax
10001589f:	jne	0x1000158be
1000158a1:	mov	rdi, rbx
1000158a4:	call	0x100019818 ## symbol stub for: _ftello
1000158a9:	inc	r15
1000158ac:	xor	r14d, r14d
1000158af:	cmp	rax, r15
1000158b2:	sete	r14b
1000158b6:	jmp	0x1000158be
1000158b8:	mov	r14d, 0x1
1000158be:	mov	eax, r14d
1000158c1:	add	rsp, 0x8
1000158c5:	pop	rbx
1000158c6:	pop	r14
1000158c8:	pop	r15
1000158ca:	pop	rbp
1000158cb:	ret
1000158cc:	push	rbp
1000158cd:	mov	rbp, rsp
1000158d0:	mov	rax, rdi
1000158d3:	mov	cl, byte ptr [rax]
1000158d5:	cmp	cl, 0x5a
1000158d8:	jle	0x1000158ea
1000158da:	cmp	cl, 0x5c
1000158dd:	jne	0x1000158fa
1000158df:	cmp	byte ptr [rax + 0x1], 0x0
1000158e3:	je	0x1000158ff
1000158e5:	inc	rax
1000158e8:	jmp	0x1000158ff
1000158ea:	test	cl, cl
1000158ec:	je	0x100015904
1000158ee:	cmp	cl, 0x2a
1000158f1:	je	0x100015906
1000158f3:	cmp	cl, 0x3f
1000158f6:	jne	0x1000158ff
1000158f8:	jmp	0x100015906
1000158fa:	cmp	cl, 0x5b
1000158fd:	je	0x100015906
1000158ff:	inc	rax
100015902:	jmp	0x1000158d3
100015904:	xor	eax, eax
100015906:	pop	rbp
100015907:	ret
100015908:	push	rbp
100015909:	mov	rbp, rsp
10001590c:	call	0x10001591d
100015911:	xor	ecx, ecx
100015913:	cmp	eax, 0x1
100015916:	sete	cl
100015919:	mov	eax, ecx
10001591b:	pop	rbp
10001591c:	ret
10001591d:	push	rbp
10001591e:	mov	rbp, rsp
100015921:	push	r15
100015923:	push	r14
100015925:	push	r13
100015927:	push	r12
100015929:	push	rbx
10001592a:	sub	rsp, 0x18
10001592e:	mov	dword ptr [rbp - 0x30], edx
100015931:	mov	r15, rsi
100015934:	mov	r12, rdi
100015937:	lea	rax, [rip + 0x13d8a]
10001593e:	lea	rcx, [rip + 0x13d7b]
100015945:	mov	r10d, dword ptr [rcx]
100015948:	test	r10d, r10d
10001594b:	sete	cl
10001594e:	lea	rdx, [rip + 0x13d6f]
100015955:	cmp	dword ptr [rdx], 0x0
100015958:	mov	r11d, dword ptr [rax]
10001595b:	setne	dl
10001595e:	and	dl, cl
100015960:	xor	dl, 0x1
100015963:	mov	byte ptr [rbp - 0x29], dl
100015966:	mov	dword ptr [rbp - 0x38], r10d
10001596a:	mov	dword ptr [rbp - 0x34], r11d
10001596e:	mov	r13, r12
100015971:	inc	r12
100015974:	mov	al, byte ptr [r13]
100015978:	cmp	al, 0x3f
10001597a:	je	0x100015a22
100015980:	test	al, al
100015982:	je	0x100015b96
100015988:	cmp	al, 0x2a
10001598a:	jne	0x100015a45
100015990:	test	r10d, r10d
100015993:	jne	0x100015a45
100015999:	test	r11d, r11d
10001599c:	je	0x100015bab
1000159a2:	mov	r14b, byte ptr [r12]
1000159a6:	cmp	r14b, 0x2a
1000159aa:	je	0x100015ba4
1000159b0:	mov	cl, byte ptr [r15]
1000159b3:	test	cl, cl
1000159b5:	sete	al
1000159b8:	cmp	cl, 0x2f
1000159bb:	setne	cl
1000159be:	cmp	al, cl
1000159c0:	je	0x1000159ee
1000159c2:	mov	rdi, r12
1000159c5:	mov	rsi, r15
1000159c8:	mov	edx, dword ptr [rbp - 0x30]
1000159cb:	call	0x10001591d
1000159d0:	test	eax, eax
1000159d2:	jne	0x100015be9
1000159d8:	mov	cl, byte ptr [r15 + 0x1]
1000159dc:	inc	r15
1000159df:	test	cl, cl
1000159e1:	sete	al
1000159e4:	cmp	cl, 0x2f
1000159e7:	setne	cl
1000159ea:	xor	cl, al
1000159ec:	jne	0x1000159c2
1000159ee:	cmp	r14b, 0x2f
1000159f2:	mov	r10d, dword ptr [rbp - 0x38]
1000159f6:	mov	r11d, dword ptr [rbp - 0x34]
1000159fa:	mov	dl, byte ptr [rbp - 0x29]
1000159fd:	je	0x10001596e
100015a03:	mov	ebx, 0x2
100015a08:	cmp	r14b, 0x5c
100015a0c:	jne	0x100015c35
100015a12:	cmp	byte ptr [r13 + 0x2], 0x2f
100015a17:	je	0x10001596e
100015a1d:	jmp	0x100015c24
100015a22:	mov	al, byte ptr [r15]
100015a25:	test	r11d, r11d
100015a28:	je	0x100015ab8
100015a2e:	xor	ebx, ebx
100015a30:	test	al, al
100015a32:	je	0x100015c24
100015a38:	cmp	al, 0x2f
100015a3a:	jne	0x100015af7
100015a40:	jmp	0x100015c24
100015a45:	cmp	al, 0x5b
100015a47:	setne	cl
100015a4a:	or	cl, dl
100015a4c:	jne	0x100015ac1
100015a4e:	mov	r9b, byte ptr [r15]
100015a51:	xor	ebx, ebx
100015a53:	test	r9b, r9b
100015a56:	je	0x100015c24
100015a5c:	mov	r8b, byte ptr [r12]
100015a60:	cmp	r8b, 0x21
100015a64:	sete	al
100015a67:	cmp	r8b, 0x5e
100015a6b:	sete	cl
100015a6e:	or	cl, al
100015a70:	movzx	eax, cl
100015a73:	mov	cl, byte ptr [r12 + rax]
100015a77:	test	cl, cl
100015a79:	je	0x100015c24
100015a7f:	mov	rdx, r12
100015a82:	add	rdx, rax
100015a85:	lea	r12, [r13 + rax + 0x2]
100015a8a:	xor	esi, esi
100015a8c:	mov	eax, ecx
100015a8e:	test	esi, esi
100015a90:	mov	esi, 0x0
100015a95:	je	0x100015aa7
100015a97:	mov	al, byte ptr [r12]
100015a9b:	inc	r12
100015a9e:	test	al, al
100015aa0:	jne	0x100015a8e
100015aa2:	jmp	0x100015c22
100015aa7:	mov	esi, 0x1
100015aac:	cmp	al, 0x5c
100015aae:	je	0x100015a97
100015ab0:	cmp	al, 0x5d
100015ab2:	je	0x100015aff
100015ab4:	xor	esi, esi
100015ab6:	jmp	0x100015a97
100015ab8:	test	al, al
100015aba:	jne	0x100015af7
100015abc:	jmp	0x100015c22
100015ac1:	cmp	al, 0x5c
100015ac3:	jne	0x100015add
100015ac5:	test	r10d, r10d
100015ac8:	jne	0x100015add
100015aca:	mov	al, byte ptr [r13 + 0x1]
100015ace:	test	al, al
100015ad0:	je	0x100015c22
100015ad6:	add	r13, 0x2
100015ada:	mov	r12, r13
100015add:	mov	cl, byte ptr [r15]
100015ae0:	cmp	dword ptr [rbp - 0x30], 0x0
100015ae4:	je	0x100015aef
100015ae6:	cmp	al, cl
100015ae8:	je	0x100015af7
100015aea:	jmp	0x100015c22
100015aef:	cmp	cl, al
100015af1:	jne	0x100015c22
100015af7:	inc	r15
100015afa:	jmp	0x10001596e
100015aff:	lea	rsi, [r12 - 0x1]
100015b04:	cmp	rdx, rsi
100015b07:	jae	0x100015b5d
100015b09:	xor	ebx, ebx
100015b0b:	cmp	cl, 0x2d
100015b0e:	sete	bl
100015b11:	xor	edi, edi
100015b13:	test	ebx, ebx
100015b15:	jne	0x100015b29
100015b17:	mov	al, byte ptr [rdx]
100015b19:	cmp	al, 0x5c
100015b1b:	je	0x100015b50
100015b1d:	cmp	al, 0x2d
100015b1f:	jne	0x100015b29
100015b21:	movzx	edi, byte ptr [rdx - 0x1]
100015b25:	xor	ebx, ebx
100015b27:	jmp	0x100015b55
100015b29:	xor	ebx, ebx
100015b2b:	cmp	byte ptr [rdx + 0x1], 0x2d
100015b2f:	je	0x100015b4c
100015b31:	test	dil, dil
100015b34:	movzx	eax, byte ptr [rdx]
100015b37:	cmove	edi, eax
100015b3a:	cmp	al, dil
100015b3d:	jb	0x100015b4c
100015b3f:	cmp	r9b, dil
100015b42:	je	0x100015b78
100015b44:	inc	dil
100015b47:	cmp	dil, al
100015b4a:	jbe	0x100015b3f
100015b4c:	xor	edi, edi
100015b4e:	jmp	0x100015b55
100015b50:	mov	ebx, 0x1
100015b55:	inc	rdx
100015b58:	cmp	rdx, rsi
100015b5b:	jb	0x100015b13
100015b5d:	cmp	r8b, 0x5e
100015b61:	je	0x100015b6d
100015b63:	cmp	r8b, 0x21
100015b67:	jne	0x100015c22
100015b6d:	inc	r15
100015b70:	mov	dl, byte ptr [rbp - 0x29]
100015b73:	jmp	0x10001596e
100015b78:	xor	ebx, ebx
100015b7a:	cmp	r8b, 0x21
100015b7e:	je	0x100015c24
100015b84:	cmp	r8b, 0x5e
100015b88:	mov	dl, byte ptr [rbp - 0x29]
100015b8b:	jne	0x100015af7
100015b91:	jmp	0x100015c24
100015b96:	xor	ebx, ebx
100015b98:	cmp	byte ptr [r15], 0x0
100015b9c:	sete	bl
100015b9f:	jmp	0x100015c24
100015ba4:	add	r13, 0x2
100015ba8:	mov	r12, r13
100015bab:	cmp	byte ptr [r12], 0x0
100015bb0:	je	0x100015bed
100015bb2:	mov	rdi, r12
100015bb5:	call	0x1000158cc
100015bba:	test	rax, rax
100015bbd:	je	0x100015bf4
100015bbf:	mov	ebx, 0x2
100015bc4:	cmp	byte ptr [r15], 0x0
100015bc8:	je	0x100015c24
100015bca:	mov	rdi, r12
100015bcd:	mov	rsi, r15
100015bd0:	mov	edx, dword ptr [rbp - 0x30]
100015bd3:	call	0x10001591d
100015bd8:	test	eax, eax
100015bda:	jne	0x100015be9
100015bdc:	cmp	byte ptr [r15 + 0x1], 0x0
100015be1:	lea	r15, [r15 + 0x1]
100015be5:	jne	0x100015bca
100015be7:	jmp	0x100015c24
100015be9:	mov	ebx, eax
100015beb:	jmp	0x100015c24
100015bed:	mov	ebx, 0x1
100015bf2:	jmp	0x100015c24
100015bf4:	mov	rdi, r15
100015bf7:	call	0x100019920 ## symbol stub for: _strlen
100015bfc:	mov	rbx, rax
100015bff:	mov	rdi, r12
100015c02:	call	0x100019920 ## symbol stub for: _strlen
100015c07:	sub	rbx, rax
100015c0a:	js	0x100015c22
100015c0c:	add	r15, rbx
100015c0f:	cmp	dword ptr [rbp - 0x30], 0x0
100015c13:	je	0x100015c3f
100015c15:	mov	rdi, r12
100015c18:	mov	rsi, r15
100015c1b:	call	0x10001990e ## symbol stub for: _strcmp
100015c20:	jmp	0x100015c4a
100015c22:	xor	ebx, ebx
100015c24:	mov	eax, ebx
100015c26:	add	rsp, 0x18
100015c2a:	pop	rbx
100015c2b:	pop	r12
100015c2d:	pop	r13
100015c2f:	pop	r14
100015c31:	pop	r15
100015c33:	pop	rbp
100015c34:	ret
100015c35:	test	r14b, r14b
100015c38:	jne	0x100015c24
100015c3a:	movzx	ebx, al
100015c3d:	jmp	0x100015c24
100015c3f:	mov	rdi, r12
100015c42:	mov	rsi, r15
100015c45:	call	0x100015d2c
100015c4a:	xor	ebx, ebx
100015c4c:	test	eax, eax
100015c4e:	jmp	0x100015b9c
100015c53:	push	rbp
100015c54:	mov	rbp, rsp
100015c57:	push	r15
100015c59:	push	r14
100015c5b:	push	r13
100015c5d:	push	r12
100015c5f:	push	rbx
100015c60:	push	rax
100015c61:	dec	rdx
100015c64:	js	0x100015cb2
100015c66:	mov	r14, rcx
100015c69:	mov	r12, rsi
100015c6c:	mov	r15, rdi
100015c6f:	lea	r13, [rsi + 8*rdx]
100015c73:	mov	rax, r13
100015c76:	sub	rax, r12
100015c79:	shr	rax
100015c7c:	movabs	rcx, 0x3fffffff8
100015c86:	and	rax, rcx
100015c89:	lea	rbx, [r12 + rax]
100015c8d:	mov	rsi, qword ptr [r12 + rax]
100015c91:	mov	rdi, r15
100015c94:	call	r14
100015c97:	test	eax, eax
100015c99:	js	0x100015ca6
100015c9b:	je	0x100015cb4
100015c9d:	add	rbx, 0x8
100015ca1:	mov	r12, rbx
100015ca4:	jmp	0x100015cad
100015ca6:	add	rbx, -0x8
100015caa:	mov	r13, rbx
100015cad:	cmp	r13, r12
100015cb0:	jae	0x100015c73
100015cb2:	xor	ebx, ebx
100015cb4:	mov	rax, rbx
100015cb7:	add	rsp, 0x8
100015cbb:	pop	rbx
100015cbc:	pop	r12
100015cbe:	pop	r13
100015cc0:	pop	r14
100015cc2:	pop	r15
100015cc4:	pop	rbp
100015cc5:	ret
100015cc6:	push	rbp
100015cc7:	mov	rbp, rsp
100015cca:	movdqa	xmm0, xmmword ptr [rip + 0x415e]
100015cd2:	xor	edx, edx
100015cd4:	lea	rax, [rip + 0x13c45]
100015cdb:	lea	rcx, [rip + 0x13d3e]
100015ce2:	movdqa	xmm1, xmmword ptr [rip + 0x4156]
100015cea:	movdqa	xmmword ptr [rax + rdx], xmm0
100015cef:	movdqa	xmmword ptr [rcx + rdx], xmm0
100015cf4:	add	rdx, 0x10
100015cf8:	paddb	xmm0, xmm1
100015cfc:	cmp	rdx, 0x100
100015d03:	jne	0x100015cea
100015d05:	xor	edx, edx
100015d07:	lea	esi, [rdx + 0x41]
100015d0a:	mov	byte ptr [rcx + rdx + 0x61], sil
100015d0f:	inc	rdx
100015d12:	cmp	rdx, 0x1a
100015d16:	jne	0x100015d07
100015d18:	xor	ecx, ecx
100015d1a:	lea	edx, [rcx + 0x61]
100015d1d:	mov	byte ptr [rax + rcx + 0x41], dl
100015d21:	inc	rcx
100015d24:	cmp	rcx, 0x1a
100015d28:	jne	0x100015d1a
100015d2a:	pop	rbp
100015d2b:	ret
100015d2c:	push	rbp
100015d2d:	mov	rbp, rsp
100015d30:	movzx	ecx, byte ptr [rdi]
100015d33:	movzx	edx, byte ptr [rsi]
100015d36:	mov	eax, ecx
100015d38:	sub	eax, edx
100015d3a:	test	edx, edx
100015d3c:	je	0x100015d69
100015d3e:	test	cl, cl
100015d40:	je	0x100015d69
100015d42:	test	eax, eax
100015d44:	jne	0x100015d69
100015d46:	mov	ecx, 0x1
100015d4b:	movzx	edx, byte ptr [rdi + rcx]
100015d4f:	movzx	r8d, byte ptr [rsi + rcx]
100015d54:	mov	eax, edx
100015d56:	sub	eax, r8d
100015d59:	test	r8d, r8d
100015d5c:	je	0x100015d69
100015d5e:	test	dl, dl
100015d60:	je	0x100015d69
100015d62:	inc	rcx
100015d65:	test	eax, eax
100015d67:	je	0x100015d4b
100015d69:	pop	rbp
100015d6a:	ret
100015d6b:	push	rbp
100015d6c:	mov	rbp, rsp
100015d6f:	push	r15
100015d71:	push	r14
100015d73:	push	r13
100015d75:	push	r12
100015d77:	push	rbx
100015d78:	sub	rsp, 0x18
100015d7c:	mov	r12, rcx
100015d7f:	mov	r15, rsi
100015d82:	mov	qword ptr [rbp - 0x38], rdi
100015d86:	mov	rdi, rdx
100015d89:	call	0x10001982a ## symbol stub for: _getenv
100015d8e:	test	rax, rax
100015d91:	je	0x100015dd1
100015d93:	mov	r13, rax
100015d96:	dec	r13
100015d99:	mov	r14, qword ptr [rip + 0xe260] ## literal pool symbol address: __DefaultRuneLocale
100015da0:	mov	ebx, 0x4000
100015da5:	movzx	edi, byte ptr [r13 + 0x1]
100015daa:	test	dil, dil
100015dad:	js	0x100015db8
100015daf:	mov	eax, dword ptr [r14 + 4*rdi + 0x3c]
100015db4:	and	eax, ebx
100015db6:	jmp	0x100015dc2
100015db8:	mov	esi, 0x4000
100015dbd:	call	0x10001976a ## symbol stub for: ___maskrune
100015dc2:	inc	r13
100015dc5:	test	eax, eax
100015dc7:	jne	0x100015da5
100015dc9:	mov	al, byte ptr [r13]
100015dcd:	test	al, al
100015dcf:	jne	0x100015e24
100015dd1:	mov	rdi, r12
100015dd4:	call	0x10001982a ## symbol stub for: _getenv
100015dd9:	test	rax, rax
100015ddc:	je	0x1000160ba
100015de2:	mov	r13, rax
100015de5:	dec	r13
100015de8:	mov	r14, qword ptr [rip + 0xe211] ## literal pool symbol address: __DefaultRuneLocale
100015def:	mov	ebx, 0x4000
100015df4:	movzx	edi, byte ptr [r13 + 0x1]
100015df9:	test	dil, dil
100015dfc:	js	0x100015e07
100015dfe:	mov	eax, dword ptr [r14 + 4*rdi + 0x3c]
100015e03:	and	eax, ebx
100015e05:	jmp	0x100015e11
100015e07:	mov	esi, 0x4000
100015e0c:	call	0x10001976a ## symbol stub for: ___maskrune
100015e11:	inc	r13
100015e14:	test	eax, eax
100015e16:	jne	0x100015df4
100015e18:	mov	al, byte ptr [r13]
100015e1c:	test	al, al
100015e1e:	je	0x1000160ba
100015e24:	xor	r14d, r14d
100015e27:	mov	r12d, 0x4000
100015e2d:	mov	rbx, r13
100015e30:	lea	ecx, [r14 + 0x1]
100015e34:	mov	dword ptr [rbp - 0x2c], ecx
100015e37:	cmp	al, 0x22
100015e39:	je	0x100015e80
100015e3b:	test	al, al
100015e3d:	je	0x100015ee4
100015e43:	test	al, al
100015e45:	js	0x100015e5a
100015e47:	movzx	eax, al
100015e4a:	mov	rcx, qword ptr [rip + 0xe1af] ## literal pool symbol address: __DefaultRuneLocale
100015e51:	mov	eax, dword ptr [rcx + 4*rax + 0x3c]
100015e55:	and	eax, r12d
100015e58:	jmp	0x100015e67
100015e5a:	movzx	edi, al
100015e5d:	mov	esi, 0x4000
100015e62:	call	0x10001976a ## symbol stub for: ___maskrune
100015e67:	test	eax, eax
100015e69:	jne	0x100015ea1
100015e6b:	mov	al, byte ptr [rbx + 0x1]
100015e6e:	inc	rbx
100015e71:	jmp	0x100015e3b
100015e73:	cmp	byte ptr [rax + 0x2], 0x0
100015e77:	je	0x100015e80
100015e79:	add	rax, 0x2
100015e7d:	mov	rbx, rax
100015e80:	mov	rax, rbx
100015e83:	inc	rbx
100015e86:	mov	cl, byte ptr [rax + 0x1]
100015e89:	cmp	cl, 0x5c
100015e8c:	je	0x100015e73
100015e8e:	test	cl, cl
100015e90:	je	0x100015e97
100015e92:	cmp	cl, 0x22
100015e95:	jne	0x100015e80
100015e97:	add	rax, 0x2
100015e9b:	test	cl, cl
100015e9d:	cmovne	rbx, rax
100015ea1:	mov	al, byte ptr [rbx]
100015ea3:	test	al, al
100015ea5:	je	0x100015ee4
100015ea7:	test	al, al
100015ea9:	js	0x100015ebe
100015eab:	movzx	eax, al
100015eae:	mov	rcx, qword ptr [rip + 0xe14b] ## literal pool symbol address: __DefaultRuneLocale
100015eb5:	mov	eax, dword ptr [rcx + 4*rax + 0x3c]
100015eb9:	and	eax, r12d
100015ebc:	jmp	0x100015ecb
100015ebe:	movzx	edi, al
100015ec1:	mov	esi, 0x4000
100015ec6:	call	0x10001976a ## symbol stub for: ___maskrune
100015ecb:	test	eax, eax
100015ecd:	je	0x100015ed7
100015ecf:	mov	al, byte ptr [rbx + 0x1]
100015ed2:	inc	rbx
100015ed5:	jmp	0x100015ea3
100015ed7:	mov	al, byte ptr [rbx]
100015ed9:	mov	ecx, dword ptr [rbp - 0x2c]
100015edc:	mov	r14d, ecx
100015edf:	jmp	0x100015e30
100015ee4:	mov	rbx, r14
100015ee7:	mov	rdi, r13
100015eea:	call	0x100019920 ## symbol stub for: _strlen
100015eef:	lea	rdi, [rax + 0x1]
100015ef3:	call	0x100019848 ## symbol stub for: _malloc
100015ef8:	mov	r12, rax
100015efb:	test	rax, rax
100015efe:	jne	0x100015f11
100015f00:	lea	rsi, [rip + 0xd905] ## literal pool for: "Can't get memory for arguments"
100015f07:	mov	edi, 0x4
100015f0c:	call	0x1000037b0
100015f11:	mov	rdi, r12
100015f14:	mov	rsi, r13
100015f17:	call	0x100019914 ## symbol stub for: _strcpy
100015f1c:	mov	r14, qword ptr [rbp - 0x38]
100015f20:	mov	eax, dword ptr [r14]
100015f23:	lea	eax, [rbx + rax + 0x2]
100015f27:	movsxd	rdi, eax
100015f2a:	shl	rdi, 0x3
100015f2e:	call	0x100019848 ## symbol stub for: _malloc
100015f33:	mov	rbx, rax
100015f36:	test	rax, rax
100015f39:	jne	0x100015f54
100015f3b:	mov	rdi, r12
100015f3e:	call	0x100019806 ## symbol stub for: _free
100015f43:	lea	rsi, [rip + 0xd8c2] ## literal pool for: "Can't get memory for arguments"
100015f4a:	mov	edi, 0x4
100015f4f:	call	0x1000037b0
100015f54:	mov	rax, qword ptr [r15]
100015f57:	lea	rcx, [rax + 0x8]
100015f5b:	mov	qword ptr [r15], rcx
100015f5e:	mov	rax, qword ptr [rax]
100015f61:	mov	r13, rbx
100015f64:	add	r13, 0x8
100015f68:	mov	qword ptr [rbx], rax
100015f6b:	cmp	byte ptr [r12], 0x22
100015f70:	jne	0x100015fa4
100015f72:	mov	qword ptr [rbp - 0x40], rbx
100015f76:	inc	r12
100015f79:	mov	qword ptr [r13], r12
100015f7d:	add	r13, 0x8
100015f81:	mov	r14, r12
100015f84:	mov	al, byte ptr [r14]
100015f87:	cmp	al, 0x5c
100015f89:	je	0x100015f95
100015f8b:	test	al, al
100015f8d:	je	0x100015ff3
100015f8f:	cmp	al, 0x22
100015f91:	jne	0x100015f9f
100015f93:	jmp	0x100015fec
100015f95:	cmp	byte ptr [r14 + 0x1], 0x0
100015f9a:	je	0x100015f9f
100015f9c:	inc	r14
100015f9f:	inc	r14
100015fa2:	jmp	0x100015f84
100015fa4:	mov	qword ptr [r13], r12
100015fa8:	add	r13, 0x8
100015fac:	movzx	edi, byte ptr [r12]
100015fb1:	test	rdi, rdi
100015fb4:	je	0x10001607d
100015fba:	test	dil, dil
100015fbd:	js	0x100015fd3
100015fbf:	mov	rax, qword ptr [rip + 0xe03a] ## literal pool symbol address: __DefaultRuneLocale
100015fc6:	mov	eax, dword ptr [rax + 4*rdi + 0x3c]
100015fca:	mov	ecx, 0x4000
100015fcf:	and	eax, ecx
100015fd1:	jmp	0x100015fdd
100015fd3:	mov	esi, 0x4000
100015fd8:	call	0x10001976a ## symbol stub for: ___maskrune
100015fdd:	inc	r12
100015fe0:	test	eax, eax
100015fe2:	je	0x100015fac
100015fe4:	mov	byte ptr [r12 - 0x1], 0x0
100015fea:	jmp	0x10001603e
100015fec:	mov	byte ptr [r14], 0x0
100015ff0:	inc	r14
100015ff3:	mov	rdi, r12
100015ff6:	mov	esi, 0x5c
100015ffb:	call	0x100019908 ## symbol stub for: _strchr
100016000:	test	rax, rax
100016003:	je	0x100016033
100016005:	mov	rbx, rax
100016008:	lea	r12, [rbx + 0x1]
10001600c:	mov	rdi, rbx
10001600f:	mov	rsi, r12
100016012:	call	0x100019914 ## symbol stub for: _strcpy
100016017:	cmp	byte ptr [rbx], 0x0
10001601a:	cmove	r12, rbx
10001601e:	mov	rdi, r12
100016021:	mov	esi, 0x5c
100016026:	call	0x100019908 ## symbol stub for: _strchr
10001602b:	mov	rbx, rax
10001602e:	test	rax, rax
100016031:	jne	0x100016008
100016033:	mov	r12, r14
100016036:	mov	r14, qword ptr [rbp - 0x38]
10001603a:	mov	rbx, qword ptr [rbp - 0x40]
10001603e:	mov	al, byte ptr [r12]
100016042:	test	al, al
100016044:	je	0x10001607d
100016046:	movzx	edi, al
100016049:	test	al, al
10001604b:	js	0x100016061
10001604d:	mov	rax, qword ptr [rip + 0xdfac] ## literal pool symbol address: __DefaultRuneLocale
100016054:	mov	eax, dword ptr [rax + 4*rdi + 0x3c]
100016058:	mov	ecx, 0x4000
10001605d:	and	eax, ecx
10001605f:	jmp	0x10001606b
100016061:	mov	esi, 0x4000
100016066:	call	0x10001976a ## symbol stub for: ___maskrune
10001606b:	test	eax, eax
10001606d:	je	0x100015f6b
100016073:	mov	al, byte ptr [r12 + 0x1]
100016078:	inc	r12
10001607b:	jmp	0x100016042
10001607d:	mov	eax, dword ptr [r14]
100016080:	mov	esi, dword ptr [rbp - 0x2c]
100016083:	add	esi, eax
100016085:	dec	eax
100016087:	mov	dword ptr [r14], eax
10001608a:	je	0x1000160ac
10001608c:	mov	rcx, qword ptr [r15]
10001608f:	lea	rdx, [rcx + 0x8]
100016093:	mov	qword ptr [r15], rdx
100016096:	mov	rcx, qword ptr [rcx]
100016099:	mov	qword ptr [r13], rcx
10001609d:	add	r13, 0x8
1000160a1:	dec	eax
1000160a3:	jne	0x10001608c
1000160a5:	mov	dword ptr [r14], 0x0
1000160ac:	mov	qword ptr [r13], 0x0
1000160b4:	mov	qword ptr [r15], rbx
1000160b7:	mov	dword ptr [r14], esi
1000160ba:	add	rsp, 0x18
1000160be:	pop	rbx
1000160bf:	pop	r12
1000160c1:	pop	r13
1000160c3:	pop	r14
1000160c5:	pop	r15
1000160c7:	pop	rbp
1000160c8:	ret
1000160c9:	push	rbp
1000160ca:	mov	rbp, rsp
1000160cd:	pop	rbp
1000160ce:	ret
1000160cf:	push	rbp
1000160d0:	mov	rbp, rsp
1000160d3:	test	esi, esi
1000160d5:	je	0x100016112
1000160d7:	mov	r8d, esi
1000160da:	xor	edx, edx
1000160dc:	xor	r9d, r9d
1000160df:	mov	cl, byte ptr [rdi + rdx]
1000160e2:	mov	esi, 0x1
1000160e7:	cmp	cl, 0x1f
1000160ea:	ja	0x100016103
1000160ec:	xor	eax, eax
1000160ee:	cmp	cl, 0x7
1000160f1:	jb	0x100016114
1000160f3:	cmp	cl, 0x1b
1000160f6:	ja	0x100016114
1000160f8:	add	cl, -0xe
1000160fb:	mov	esi, r9d
1000160fe:	cmp	cl, 0xc
100016101:	jb	0x100016114
100016103:	inc	rdx
100016106:	mov	r9d, esi
100016109:	mov	eax, esi
10001610b:	cmp	r8, rdx
10001610e:	jne	0x1000160df
100016110:	jmp	0x100016114
100016112:	xor	eax, eax
100016114:	pop	rbp
100016115:	ret
100016116:	push	rbp
100016117:	mov	rbp, rsp
10001611a:	push	r15
10001611c:	push	r14
10001611e:	push	rbx
10001611f:	push	rax
100016120:	mov	rbx, rdx
100016123:	mov	r14, rdi
100016126:	mov	byte ptr [rip + 0x13104], 0x0
10001612d:	cmp	rsi, -0x2
100016131:	je	0x100016153
100016133:	test	rsi, rsi
100016136:	je	0x100016182
100016138:	lea	rdi, [rip + 0x130f1]
10001613f:	cmp	rsi, -0x1
100016143:	jne	0x10001614c
100016145:	lea	rsi, [rip + 0xd6df] ## literal pool for: "16"
10001614c:	mov	edx, 0x10
100016151:	jmp	0x10001617d
100016153:	lea	r15, [rip + 0x130d6]
10001615a:	lea	rsi, [rip + 0x6d2d] ## literal pool for: "."
100016161:	mov	edx, 0x10
100016166:	mov	rdi, r15
100016169:	call	0x10001977c ## symbol stub for: ___strcat_chk
10001616e:	lea	rsi, [rip + 0xd6b6] ## literal pool for: "16"
100016175:	mov	edx, 0x10
10001617a:	mov	rdi, r15
10001617d:	call	0x10001977c ## symbol stub for: ___strcat_chk
100016182:	lea	rdi, [rip + 0x130a7]
100016189:	lea	rsi, [rip + 0x5bb0] ## literal pool for: "ll"
100016190:	mov	edx, 0x10
100016195:	call	0x10001977c ## symbol stub for: ___strcat_chk
10001619a:	lea	rdi, [rip + 0x1308f]
1000161a1:	test	rbx, rbx
1000161a4:	je	0x1000161b0
1000161a6:	mov	edx, 0x10
1000161ab:	mov	rsi, rbx
1000161ae:	jmp	0x1000161bc
1000161b0:	lea	rsi, [rip + 0x56b4] ## literal pool for: "d"
1000161b7:	mov	edx, 0x10
1000161bc:	call	0x10001977c ## symbol stub for: ___strcat_chk
1000161c1:	mov	eax, dword ptr [rip + 0x46ad9]
1000161c7:	lea	ecx, [rax + 0x1]
1000161ca:	lea	edx, [rax + 0x4]
1000161cd:	test	ecx, ecx
1000161cf:	cmovns	edx, ecx
1000161d2:	and	edx, -0x4
1000161d5:	neg	edx
1000161d7:	lea	eax, [rax + rdx + 0x1]
1000161db:	mov	dword ptr [rip + 0x46abf], eax
1000161e1:	lea	rax, [rax + 2*rax]
1000161e5:	lea	rbx, [rip + 0x46a54]
1000161ec:	lea	rdi, [rbx + 8*rax]
1000161f0:	lea	rsi, [rip + 0x13039]
1000161f7:	mov	rdx, r14
1000161fa:	xor	eax, eax
1000161fc:	call	0x1000198ea ## symbol stub for: _sprintf
100016201:	mov	eax, dword ptr [rip + 0x46a99]
100016207:	lea	rax, [rax + 2*rax]
10001620b:	lea	rax, [rbx + 8*rax]
10001620f:	add	rsp, 0x8
100016213:	pop	rbx
100016214:	pop	r14
100016216:	pop	r15
100016218:	pop	rbp
100016219:	ret
10001621a:	push	rbp
10001621b:	mov	rbp, rsp
10001621e:	push	r15
100016220:	push	r14
100016222:	push	rbx
100016223:	push	rax
100016224:	mov	rbx, rdx
100016227:	mov	r14, rdi
10001622a:	mov	byte ptr [rip + 0x13010], 0x0
100016231:	cmp	rsi, -0x2
100016235:	je	0x100016257
100016237:	test	rsi, rsi
10001623a:	je	0x100016286
10001623c:	lea	rdi, [rip + 0x12ffd]
100016243:	cmp	rsi, -0x1
100016247:	jne	0x100016250
100016249:	lea	rsi, [rip + 0xd5db] ## literal pool for: "16"
100016250:	mov	edx, 0x10
100016255:	jmp	0x100016281
100016257:	lea	r15, [rip + 0x12fe2]
10001625e:	lea	rsi, [rip + 0x6c29] ## literal pool for: "."
100016265:	mov	edx, 0x10
10001626a:	mov	rdi, r15
10001626d:	call	0x10001977c ## symbol stub for: ___strcat_chk
100016272:	lea	rsi, [rip + 0xd5b2] ## literal pool for: "16"
100016279:	mov	edx, 0x10
10001627e:	mov	rdi, r15
100016281:	call	0x10001977c ## symbol stub for: ___strcat_chk
100016286:	lea	rdi, [rip + 0x12fb3]
10001628d:	lea	rsi, [rip + 0x5aac] ## literal pool for: "ll"
100016294:	mov	edx, 0x10
100016299:	call	0x10001977c ## symbol stub for: ___strcat_chk
10001629e:	lea	rdi, [rip + 0x12f9b]
1000162a5:	test	rbx, rbx
1000162a8:	je	0x1000162b4
1000162aa:	mov	edx, 0x10
1000162af:	mov	rsi, rbx
1000162b2:	jmp	0x1000162c0
1000162b4:	lea	rsi, [rip + 0x5f8b] ## literal pool for: "u"
1000162bb:	mov	edx, 0x10
1000162c0:	call	0x10001977c ## symbol stub for: ___strcat_chk
1000162c5:	mov	eax, dword ptr [rip + 0x46a45]
1000162cb:	lea	ecx, [rax + 0x1]
1000162ce:	lea	edx, [rax + 0x4]
1000162d1:	test	ecx, ecx
1000162d3:	cmovns	edx, ecx
1000162d6:	and	edx, -0x4
1000162d9:	neg	edx
1000162db:	lea	eax, [rax + rdx + 0x1]
1000162df:	mov	dword ptr [rip + 0x46a2b], eax
1000162e5:	lea	rax, [rax + 2*rax]
1000162e9:	lea	rbx, [rip + 0x469c0]
1000162f0:	lea	rdi, [rbx + 8*rax]
1000162f4:	lea	rsi, [rip + 0x12f45]
1000162fb:	mov	rdx, r14
1000162fe:	xor	eax, eax
100016300:	call	0x1000198ea ## symbol stub for: _sprintf
100016305:	mov	eax, dword ptr [rip + 0x46a05]
10001630b:	lea	rax, [rax + 2*rax]
10001630f:	lea	rax, [rbx + 8*rax]
100016313:	add	rsp, 0x8
100016317:	pop	rbx
100016318:	pop	r14
10001631a:	pop	r15
10001631c:	pop	rbp
10001631d:	ret
10001631e:	push	rbp
10001631f:	mov	rbp, rsp
100016322:	push	rbx
100016323:	sub	rsp, 0x78
100016327:	mov	rax, rsi
10001632a:	mov	rbx, rdi
10001632d:	mov	rcx, qword ptr [rip + 0xdcdc] ## literal pool symbol address: ___stack_chk_guard
100016334:	mov	rcx, qword ptr [rcx]
100016337:	mov	qword ptr [rbp - 0x10], rcx
10001633b:	lea	rsi, [rbp - 0x80]
10001633f:	mov	rdi, rax
100016342:	call	0x10001638a
100016347:	lea	rdi, [rbp - 0x7d]
10001634b:	xor	eax, eax
10001634d:	cmp	byte ptr [rbp + rax - 0x80], 0x20
100016352:	jne	0x10001635f
100016354:	inc	rax
100016357:	cmp	rax, 0x3
10001635b:	jne	0x10001634d
10001635d:	jmp	0x100016364
10001635f:	lea	rdi, [rbp + rax - 0x80]
100016364:	mov	rsi, rbx
100016367:	call	0x1000197fa ## symbol stub for: _fputs
10001636c:	mov	rax, qword ptr [rip + 0xdc9d] ## literal pool symbol address: ___stack_chk_guard
100016373:	mov	rax, qword ptr [rax]
100016376:	cmp	rax, qword ptr [rbp - 0x10]
10001637a:	jne	0x100016385
10001637c:	xor	eax, eax
10001637e:	add	rsp, 0x78
100016382:	pop	rbx
100016383:	pop	rbp
100016384:	ret
100016385:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
10001638a:	push	rbp
10001638b:	mov	rbp, rsp
10001638e:	mov	byte ptr [rsi], 0x0
100016391:	xor	r8d, r8d
100016394:	cmp	rdi, 0x2800
10001639b:	jb	0x1000163b8
10001639d:	xor	r8d, r8d
1000163a0:	mov	rcx, rdi
1000163a3:	shr	rcx, 0xa
1000163a7:	inc	r8d
1000163aa:	cmp	rdi, 0x9fffff
1000163b1:	mov	rdi, rcx
1000163b4:	ja	0x1000163a3
1000163b6:	jmp	0x1000163bb
1000163b8:	mov	rcx, rdi
1000163bb:	mov	byte ptr [rbp - 0x1], 0x20
1000163bf:	mov	word ptr [rbp - 0x3], 0x2020
1000163c5:	mov	byte ptr [rbp - 0x4], 0x30
1000163c9:	cmp	rcx, 0x3e7
1000163d0:	jbe	0x10001641a
1000163d2:	lea	rax, [rcx + rcx]
1000163d6:	lea	rdi, [rax + 4*rax]
1000163da:	shr	rdi, 0xa
1000163de:	movabs	rdx, -0x3333333333333333
1000163e8:	mov	rax, rdi
1000163eb:	mul	rdx
1000163ee:	inc	r8d
1000163f1:	shr	edx, 0x2
1000163f4:	and	edx, -0x2
1000163f7:	lea	eax, [rdx + 4*rdx]
1000163fa:	sub	edi, eax
1000163fc:	or	dil, 0x30
100016400:	mov	byte ptr [rbp - 0x4], dil
100016404:	mov	byte ptr [rbp - 0x3], 0x2e
100016408:	shr	rcx, 0xa
10001640c:	add	cl, 0x30
10001640f:	mov	byte ptr [rbp - 0x2], cl
100016412:	mov	r9d, 0x3
100016418:	jmp	0x100016464
10001641a:	mov	r9d, 0x1
100016420:	test	rcx, rcx
100016423:	je	0x100016464
100016425:	xor	edi, edi
100016427:	movabs	r10, -0x3333333333333333
100016431:	mov	rax, rcx
100016434:	mul	r10
100016437:	shr	rdx, 0x3
10001643b:	lea	eax, [rdx + rdx]
10001643e:	lea	r11d, [rax + 4*rax]
100016442:	mov	eax, ecx
100016444:	sub	eax, r11d
100016447:	or	al, 0x30
100016449:	mov	byte ptr [rbp + rdi - 0x4], al
10001644d:	inc	rdi
100016450:	cmp	rcx, 0x9
100016454:	mov	rcx, rdx
100016457:	ja	0x100016431
100016459:	test	edi, edi
10001645b:	je	0x100016464
10001645d:	test	edi, edi
10001645f:	jle	0x1000164b1
100016461:	mov	r9d, edi
100016464:	lea	eax, [r9 - 0x1]
100016468:	mov	ecx, eax
10001646a:	mov	cl, byte ptr [rbp + rcx - 0x4]
10001646e:	mov	byte ptr [rsi], cl
100016470:	inc	rsi
100016473:	add	eax, -0x1
100016476:	jb	0x100016468
100016478:	cmp	r8d, 0x4
10001647c:	ja	0x100016497
10001647e:	mov	al, 0x4b
100016480:	mov	ecx, r8d
100016483:	lea	rdx, [rip + 0x2e]
10001648a:	movsxd	rcx, dword ptr [rdx + 4*rcx]
10001648e:	add	rcx, rdx
100016491:	jmp	rcx
100016493:	mov	al, 0x4d
100016495:	jmp	0x1000164a1
100016497:	mov	al, 0x3f
100016499:	jmp	0x1000164a1
10001649b:	mov	al, 0x47
10001649d:	jmp	0x1000164a1
10001649f:	mov	al, 0x54
1000164a1:	mov	byte ptr [rsi], al
1000164a3:	inc	rsi
1000164a6:	inc	r9d
1000164a9:	mov	byte ptr [rsi], 0x0
1000164ac:	mov	eax, r9d
1000164af:	pop	rbp
1000164b0:	ret
1000164b1:	xor	r9d, r9d
1000164b4:	jmp	0x100016478
1000164b6:	nop
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000164bc:	jmp	0xdc0164c0
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000164c3:	jmp	rbx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000164c7:	jmp	rdi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000164cb:	call	qword ptr [rbp + 0x48]
1000164ce:	mov	ebp, esp
1000164d0:	push	r15
1000164d2:	push	r14
1000164d4:	push	r12
1000164d6:	push	rbx
1000164d7:	test	rdi, rdi
1000164da:	je	0x1000164f1
1000164dc:	mov	r12, rdi
1000164df:	mov	bl, byte ptr [rdi]
1000164e1:	lea	eax, [rbx - 0x30]
1000164e4:	cmp	al, 0xa
1000164e6:	jb	0x100016501
1000164e8:	lea	rdi, [rip + 0xd36c] ## literal pool for: "Unable to read number (must start with digit): "
1000164ef:	jmp	0x100016516
1000164f1:	lea	rdi, [rip + 0xd336] ## literal pool for: "Unable to read empty number in ReadNumString"
1000164f8:	lea	rsi, [rip + 0x42b8] ## literal pool for: ""
1000164ff:	jmp	0x100016519
100016501:	mov	rdi, r12
100016504:	call	0x100019920 ## symbol stub for: _strlen
100016509:	cmp	rax, 0x9
10001650d:	jb	0x100016531
10001650f:	lea	rdi, [rip + 0xd375] ## literal pool for: "Number too long to read (8 characters max): "
100016516:	mov	rsi, r12
100016519:	call	0x100003e67
10001651e:	mov	r14, -0x1
100016525:	mov	rax, r14
100016528:	pop	rbx
100016529:	pop	r12
10001652b:	pop	r14
10001652d:	pop	r15
10001652f:	pop	rbp
100016530:	ret
100016531:	mov	rdi, r12
100016534:	call	0x10001979a ## symbol stub for: _atoi
100016539:	movsxd	r15, eax
10001653c:	mov	eax, 0x1
100016541:	mov	rcx, qword ptr [rip + 0xdab8] ## literal pool symbol address: __DefaultRuneLocale
100016548:	test	bl, bl
10001654a:	js	0x100016566
10001654c:	movzx	edx, bl
10001654f:	test	byte ptr [rcx + 4*rdx + 0x3d], 0x4
100016554:	je	0x100016566
100016556:	mov	bl, byte ptr [r12 + rax]
10001655a:	inc	rax
10001655d:	test	bl, bl
10001655f:	jne	0x100016548
100016561:	mov	r14, r15
100016564:	jmp	0x100016525
100016566:	mov	eax, eax
100016568:	mov	r14, -0x1
10001656f:	cmp	byte ptr [r12 + rax], 0x0
100016574:	jne	0x100016525
100016576:	movsx	edi, bl
100016579:	call	0x10001978e ## symbol stub for: ___toupper
10001657e:	shl	eax, 0x18
100016581:	cmp	eax, 0x4cffffff
100016586:	jg	0x10001659d
100016588:	cmp	eax, 0x47000000
10001658d:	je	0x1000165b6
10001658f:	mov	ecx, 0x400
100016594:	cmp	eax, 0x4b000000
100016599:	je	0x1000165c7
10001659b:	jmp	0x100016525
10001659d:	cmp	eax, 0x54000000
1000165a2:	je	0x1000165bd
1000165a4:	cmp	eax, 0x4d000000
1000165a9:	jne	0x100016525
1000165af:	mov	ecx, 0x100000
1000165b4:	jmp	0x1000165c7
1000165b6:	mov	ecx, 0x40000000
1000165bb:	jmp	0x1000165c7
1000165bd:	movabs	rcx, 0x10000000000
1000165c7:	imul	rcx, r15
1000165cb:	mov	r14, rcx
1000165ce:	jmp	0x100016525
1000165d3:	push	rbp
1000165d4:	mov	rbp, rsp
1000165d7:	push	r15
1000165d9:	push	r14
1000165db:	push	r13
1000165dd:	push	r12
1000165df:	push	rbx
1000165e0:	push	rax
1000165e1:	mov	r12d, edx
1000165e4:	mov	r13, rsi
1000165e7:	mov	dl, byte ptr [rdi]
1000165e9:	xor	eax, eax
1000165eb:	test	dl, dl
1000165ed:	je	0x10001663d
1000165ef:	mov	rbx, rdi
1000165f2:	mov	dword ptr [rbp - 0x2c], ecx
1000165f5:	xor	r14d, r14d
1000165f8:	mov	cl, byte ptr [r13 + r14]
1000165fd:	test	cl, cl
1000165ff:	je	0x100016633
100016601:	test	r12d, r12d
100016604:	je	0x10001660c
100016606:	cmp	dl, cl
100016608:	je	0x100016627
10001660a:	jmp	0x100016651
10001660c:	movsx	edi, dl
10001660f:	call	0x10001978e ## symbol stub for: ___toupper
100016614:	mov	r15d, eax
100016617:	movsx	edi, byte ptr [r13 + r14]
10001661d:	call	0x10001978e ## symbol stub for: ___toupper
100016622:	cmp	r15d, eax
100016625:	jne	0x100016651
100016627:	mov	dl, byte ptr [rbx + r14 + 0x1]
10001662c:	inc	r14
10001662f:	test	dl, dl
100016631:	jne	0x1000165f8
100016633:	add	r13, r14
100016636:	xor	eax, eax
100016638:	mov	ecx, dword ptr [rbp - 0x2c]
10001663b:	jmp	0x100016640
10001663d:	xor	r14d, r14d
100016640:	cmp	r14d, ecx
100016643:	jl	0x100016653
100016645:	xor	eax, eax
100016647:	cmp	byte ptr [r13], 0x0
10001664c:	sete	al
10001664f:	jmp	0x100016653
100016651:	xor	eax, eax
100016653:	add	rsp, 0x8
100016657:	pop	rbx
100016658:	pop	r12
10001665a:	pop	r13
10001665c:	pop	r14
10001665e:	pop	r15
100016660:	pop	rbp
100016661:	ret
100016662:	push	rbp
100016663:	mov	rbp, rsp
100016666:	mov	eax, 0xfffd
10001666b:	and	eax, dword ptr [rip + 0x466df]
100016671:	lea	ecx, [rax + 0x2]
100016674:	xor	eax, 0x3
100016677:	imul	eax, ecx
10001667a:	movzx	eax, ah
10001667d:	pop	rbp
10001667e:	ret
10001667f:	push	rbp
100016680:	mov	rbp, rsp
100016683:	mov	eax, edi
100016685:	lea	rcx, [rip + 0x13284]
10001668c:	mov	rcx, qword ptr [rcx]
10001668f:	mov	rdx, qword ptr [rip + 0x4669a]
100016696:	mov	esi, edx
100016698:	xor	esi, edi
10001669a:	movzx	esi, sil
10001669e:	shr	rdx, 0x8
1000166a2:	xor	rdx, qword ptr [rcx + 8*rsi]
1000166a6:	mov	qword ptr [rip + 0x46683], rdx
1000166ad:	mov	r8d, 0xff
1000166b3:	and	rdx, r8
1000166b6:	add	rdx, qword ptr [rip + 0x46683]
1000166bd:	imul	rdx, rdx, 0x8088405
1000166c4:	inc	rdx
1000166c7:	mov	qword ptr [rip + 0x46672], rdx
1000166ce:	mov	rsi, qword ptr [rip + 0x4667b]
1000166d5:	shr	edx, 0x18
1000166d8:	mov	edi, esi
1000166da:	xor	edi, edx
1000166dc:	and	rdi, r8
1000166df:	shr	rsi, 0x8
1000166e3:	xor	rsi, qword ptr [rcx + 8*rdi]
1000166e7:	mov	qword ptr [rip + 0x46662], rsi
1000166ee:	pop	rbp
1000166ef:	ret
1000166f0:	push	rbp
1000166f1:	mov	rbp, rsp
1000166f4:	push	rbx
1000166f5:	push	rax
1000166f6:	mov	qword ptr [rip + 0x4662f], 0x12345678
100016701:	mov	qword ptr [rip + 0x46634], 0x23456789
10001670c:	mov	qword ptr [rip + 0x46639], 0x34567890
100016717:	mov	al, byte ptr [rdi]
100016719:	test	al, al
10001671b:	je	0x100016734
10001671d:	mov	rbx, rdi
100016720:	inc	rbx
100016723:	movsx	edi, al
100016726:	call	0x10001667f
10001672b:	mov	al, byte ptr [rbx]
10001672d:	inc	rbx
100016730:	test	al, al
100016732:	jne	0x100016723
100016734:	add	rsp, 0x8
100016738:	pop	rbx
100016739:	pop	rbp
10001673a:	ret
10001673b:	push	rbp
10001673c:	mov	rbp, rsp
10001673f:	push	r15
100016741:	push	r14
100016743:	push	r13
100016745:	push	r12
100016747:	push	rbx
100016748:	sub	rsp, 0x28
10001674c:	mov	r12, rsi
10001674f:	mov	rbx, rdi
100016752:	mov	rax, qword ptr [rip + 0xd8b7] ## literal pool symbol address: ___stack_chk_guard
100016759:	mov	rax, qword ptr [rax]
10001675c:	mov	qword ptr [rbp - 0x30], rax
100016760:	mov	eax, dword ptr [rip + 0x465ba]
100016766:	lea	ecx, [rax + 0x1]
100016769:	mov	dword ptr [rip + 0x465b1], ecx
10001676f:	test	eax, eax
100016771:	jne	0x10001678c
100016773:	xor	edi, edi
100016775:	call	0x10001994a ## symbol stub for: _time
10001677a:	mov	r15, rax
10001677d:	call	0x100019830 ## symbol stub for: _getpid
100016782:	xor	eax, r15d
100016785:	mov	edi, eax
100016787:	call	0x1000198f0 ## symbol stub for: _srand
10001678c:	mov	qword ptr [rbp - 0x48], rbx
100016790:	mov	rdi, rbx
100016793:	call	0x1000166f0
100016798:	xor	ebx, ebx
10001679a:	mov	r13d, 0xfffd
1000167a0:	call	0x1000198ae ## symbol stub for: _rand
1000167a5:	mov	r15d, eax
1000167a8:	shr	r15d, 0x7
1000167ac:	movzx	edi, r15b
1000167b0:	mov	r14d, dword ptr [rip + 0x46599]
1000167b7:	and	r14d, r13d
1000167ba:	lea	eax, [r14 + 0x2]
1000167be:	xor	r14d, 0x3
1000167c2:	imul	r14d, eax
1000167c6:	shr	r14d, 0x8
1000167ca:	call	0x10001667f
1000167cf:	xor	r14d, r15d
1000167d2:	mov	byte ptr [rbp + rbx - 0x3c], r14b
1000167d7:	inc	rbx
1000167da:	cmp	rbx, 0xa
1000167de:	jne	0x1000167a0
1000167e0:	mov	rdi, qword ptr [rbp - 0x48]
1000167e4:	call	0x1000166f0
1000167e9:	mov	r15d, 0xfffd
1000167ef:	mov	ebx, dword ptr [rip + 0x4655b]
1000167f5:	and	ebx, r15d
1000167f8:	lea	eax, [rbx + 0x2]
1000167fb:	xor	ebx, 0x3
1000167fe:	imul	ebx, eax
100016801:	shr	ebx, 0x8
100016804:	xor	r13d, r13d
100016807:	movzx	r14d, byte ptr [rbp + r13 - 0x3c]
10001680d:	mov	edi, r14d
100016810:	call	0x10001667f
100016815:	xor	ebx, r14d
100016818:	mov	byte ptr [rbp + r13 - 0x3c], bl
10001681d:	inc	r13
100016820:	mov	ebx, dword ptr [rip + 0x4652a]
100016826:	and	ebx, r15d
100016829:	lea	eax, [rbx + 0x2]
10001682c:	xor	ebx, 0x3
10001682f:	imul	ebx, eax
100016832:	shr	ebx, 0x8
100016835:	cmp	r13, 0xa
100016839:	jne	0x100016807
10001683b:	mov	r14, r12
10001683e:	shr	r14, 0x10
100016842:	mov	r15d, 0xff
100016848:	mov	edi, r14d
10001684b:	and	edi, r15d
10001684e:	call	0x10001667f
100016853:	xor	ebx, r14d
100016856:	lea	r14, [rbp - 0x3c]
10001685a:	mov	byte ptr [r14 + 0xa], bl
10001685e:	mov	ebx, 0xfffd
100016863:	and	ebx, dword ptr [rip + 0x464e7]
100016869:	lea	eax, [rbx + 0x2]
10001686c:	xor	ebx, 0x3
10001686f:	imul	ebx, eax
100016872:	shr	ebx, 0x8
100016875:	shr	r12, 0x18
100016879:	and	r15d, r12d
10001687c:	mov	edi, r15d
10001687f:	call	0x10001667f
100016884:	xor	ebx, r12d
100016887:	mov	byte ptr [r14 + 0xb], bl
10001688b:	mov	esi, 0x1
100016890:	mov	edx, 0xc
100016895:	mov	rdi, r14
100016898:	xor	ecx, ecx
10001689a:	call	0x100012d64
10001689f:	mov	rax, qword ptr [rip + 0xd76a] ## literal pool symbol address: ___stack_chk_guard
1000168a6:	mov	rax, qword ptr [rax]
1000168a9:	cmp	rax, qword ptr [rbp - 0x30]
1000168ad:	jne	0x1000168be
1000168af:	add	rsp, 0x28
1000168b3:	pop	rbx
1000168b4:	pop	r12
1000168b6:	pop	r13
1000168b8:	pop	r14
1000168ba:	pop	r15
1000168bc:	pop	rbp
1000168bd:	ret
1000168be:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
1000168c3:	push	rbp
1000168c4:	mov	rbp, rsp
1000168c7:	push	r15
1000168c9:	push	r14
1000168cb:	push	r13
1000168cd:	push	r12
1000168cf:	push	rbx
1000168d0:	sub	rsp, 0x18
1000168d4:	mov	qword ptr [rbp - 0x38], rdx
1000168d8:	mov	qword ptr [rbp - 0x30], rsi
1000168dc:	mov	r13, rdi
1000168df:	lea	rax, [rip + 0x12ec2]
1000168e6:	cmp	qword ptr [rax], 0x0
1000168ea:	je	0x100016934
1000168ec:	mov	r12, qword ptr [rbp - 0x38]
1000168f0:	imul	r12, qword ptr [rbp - 0x30]
1000168f5:	test	r12, r12
1000168f8:	je	0x100016934
1000168fa:	xor	ebx, ebx
1000168fc:	mov	r14d, 0xfffd
100016902:	mov	r15d, dword ptr [rip + 0x46447]
100016909:	and	r15d, r14d
10001690c:	lea	eax, [r15 + 0x2]
100016910:	xor	r15d, 0x3
100016914:	imul	r15d, eax
100016918:	shr	r15d, 0x8
10001691c:	movsx	edi, byte ptr [r13 + rbx]
100016922:	call	0x10001667f
100016927:	xor	byte ptr [r13 + rbx], r15b
10001692c:	inc	rbx
10001692f:	cmp	r12, rbx
100016932:	jne	0x100016902
100016934:	mov	rdi, r13
100016937:	mov	rsi, qword ptr [rbp - 0x30]
10001693b:	mov	rdx, qword ptr [rbp - 0x38]
10001693f:	xor	ecx, ecx
100016941:	add	rsp, 0x18
100016945:	pop	rbx
100016946:	pop	r12
100016948:	pop	r13
10001694a:	pop	r14
10001694c:	pop	r15
10001694e:	pop	rbp
10001694f:	jmp	0x100012d64
100016954:	push	rbp
100016955:	mov	rbp, rsp
100016958:	push	r14
10001695a:	push	rbx
10001695b:	sub	rsp, 0x50
10001695f:	mov	ebx, edi
100016961:	mov	rax, qword ptr [rip + 0xd6a8] ## literal pool symbol address: ___stack_chk_guard
100016968:	mov	rax, qword ptr [rax]
10001696b:	mov	qword ptr [rbp - 0x18], rax
10001696f:	mov	dword ptr [rip + 0x12b2b], edi
100016975:	lea	r14, [rbp - 0x60]
100016979:	mov	rsi, r14
10001697c:	call	0x10001993e ## symbol stub for: _tcgetattr
100016981:	and	byte ptr [r14 + 0x18], -0x9
100016986:	mov	edi, ebx
100016988:	mov	esi, 0x2
10001698d:	mov	rdx, r14
100016990:	call	0x100019944 ## symbol stub for: _tcsetattr
100016995:	mov	rax, qword ptr [rip + 0xd674] ## literal pool symbol address: ___stack_chk_guard
10001699c:	mov	rax, qword ptr [rax]
10001699f:	cmp	rax, qword ptr [rbp - 0x18]
1000169a3:	jne	0x1000169ae
1000169a5:	add	rsp, 0x50
1000169a9:	pop	rbx
1000169aa:	pop	r14
1000169ac:	pop	rbp
1000169ad:	ret
1000169ae:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
1000169b3:	push	rbp
1000169b4:	mov	rbp, rsp
1000169b7:	push	rbx
1000169b8:	sub	rsp, 0x58
1000169bc:	mov	rax, qword ptr [rip + 0xd64d] ## literal pool symbol address: ___stack_chk_guard
1000169c3:	mov	rax, qword ptr [rax]
1000169c6:	mov	qword ptr [rbp - 0x10], rax
1000169ca:	mov	edi, dword ptr [rip + 0x12ad0]
1000169d0:	cmp	edi, -0x1
1000169d3:	je	0x100016a02
1000169d5:	lea	rbx, [rbp - 0x58]
1000169d9:	mov	rsi, rbx
1000169dc:	call	0x10001993e ## symbol stub for: _tcgetattr
1000169e1:	or	byte ptr [rbx + 0x18], 0x8
1000169e5:	mov	edi, dword ptr [rip + 0x12ab5]
1000169eb:	mov	esi, 0x2
1000169f0:	mov	rdx, rbx
1000169f3:	call	0x100019944 ## symbol stub for: _tcsetattr
1000169f8:	mov	dword ptr [rip + 0x12a9e], 0xffffffff
100016a02:	mov	rax, qword ptr [rip + 0xd607] ## literal pool symbol address: ___stack_chk_guard
100016a09:	mov	rax, qword ptr [rax]
100016a0c:	cmp	rax, qword ptr [rbp - 0x10]
100016a10:	jne	0x100016a19
100016a12:	add	rsp, 0x58
100016a16:	pop	rbx
100016a17:	pop	rbp
100016a18:	ret
100016a19:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
100016a1e:	push	rbp
100016a1f:	mov	rbp, rsp
100016a22:	push	r15
100016a24:	push	r14
100016a26:	push	r13
100016a28:	push	r12
100016a2a:	push	rbx
100016a2b:	sub	rsp, 0x18
100016a2f:	mov	r12d, edx
100016a32:	mov	r14, rsi
100016a35:	mov	qword ptr [rbp - 0x38], rdi
100016a39:	lea	rdi, [rip + 0xd0f5] ## literal pool for: "/dev/tty"
100016a40:	xor	esi, esi
100016a42:	xor	eax, eax
100016a44:	call	0x10001986c ## symbol stub for: _open
100016a49:	cmp	eax, -0x1
100016a4c:	je	0x100016b05
100016a52:	mov	ebx, eax
100016a54:	lea	rdi, [rip + 0x3d5c] ## literal pool for: ""
100016a5b:	mov	r15, qword ptr [rip + 0xd5b6] ## literal pool symbol address: ___stderrp
100016a62:	lea	r13, [rbp - 0x29]
100016a66:	mov	rsi, qword ptr [r15]
100016a69:	call	0x1000197fa ## symbol stub for: _fputs
100016a6e:	mov	rsi, qword ptr [r15]
100016a71:	mov	rdi, qword ptr [rbp - 0x38]
100016a75:	call	0x1000197fa ## symbol stub for: _fputs
100016a7a:	mov	rdi, qword ptr [r15]
100016a7d:	call	0x1000197d6 ## symbol stub for: _fflush
100016a82:	mov	edi, ebx
100016a84:	call	0x100016954
100016a89:	xor	r15d, r15d
100016a8c:	mov	edx, 0x1
100016a91:	mov	edi, ebx
100016a93:	mov	rsi, r13
100016a96:	call	0x1000198b4 ## symbol stub for: _read
100016a9b:	mov	al, byte ptr [rbp - 0x29]
100016a9e:	cmp	r15d, r12d
100016aa1:	jge	0x100016aad
100016aa3:	movsxd	rcx, r15d
100016aa6:	inc	r15d
100016aa9:	mov	byte ptr [r14 + rcx], al
100016aad:	cmp	al, 0xa
100016aaf:	jne	0x100016a8c
100016ab1:	call	0x1000169b3
100016ab6:	mov	rax, qword ptr [rip + 0xd55b] ## literal pool symbol address: ___stderrp
100016abd:	mov	rsi, qword ptr [rax]
100016ac0:	mov	edi, 0xa
100016ac5:	call	0x100019896 ## symbol stub for: _putc
100016aca:	mov	rax, qword ptr [rip + 0xd547] ## literal pool symbol address: ___stderrp
100016ad1:	mov	rdi, qword ptr [rax]
100016ad4:	call	0x1000197d6 ## symbol stub for: _fflush
100016ad9:	movsxd	rax, r15d
100016adc:	mov	r15, qword ptr [rip + 0xd535] ## literal pool symbol address: ___stderrp
100016ae3:	cmp	byte ptr [rax + r14 - 0x1], 0xa
100016ae9:	lea	rdi, [rip + 0xd04e] ## literal pool for: "(line too long--try again)\n"
100016af0:	jne	0x100016a66
100016af6:	mov	byte ptr [r14 + rax - 0x1], 0x0
100016afc:	mov	edi, ebx
100016afe:	call	0x1000197ac ## symbol stub for: _close
100016b03:	jmp	0x100016b08
100016b05:	xor	r14d, r14d
100016b08:	mov	rax, r14
100016b0b:	add	rsp, 0x18
100016b0f:	pop	rbx
100016b10:	pop	r12
100016b12:	pop	r13
100016b14:	pop	r14
100016b16:	pop	r15
100016b18:	pop	rbp
100016b19:	ret
100016b1a:	push	rbp
100016b1b:	mov	rbp, rsp
100016b1e:	push	r15
100016b20:	push	r14
100016b22:	push	r13
100016b24:	push	r12
100016b26:	push	rbx
100016b27:	sub	rsp, 0xa8
100016b2e:	mov	r13d, esi
100016b31:	mov	r12, rdi
100016b34:	lea	rsi, [rip + 0x59c7] ## literal pool for: "-"
100016b3b:	call	0x10001990e ## symbol stub for: _strcmp
100016b40:	test	eax, eax
100016b42:	je	0x100016b61
100016b44:	lea	rax, [rip + 0x12c39]
100016b4b:	cmp	dword ptr [rax], 0x0
100016b4e:	je	0x100016b76
100016b50:	lea	rsi, [rbp - 0xc8]
100016b57:	mov	rdi, r12
100016b5a:	call	0x100019842 ## symbol stub for: _lstat$INODE64
100016b5f:	jmp	0x100016b85
100016b61:	mov	rdi, r12
100016b64:	xor	esi, esi
100016b66:	mov	edx, r13d
100016b69:	call	0x100011a7d
100016b6e:	mov	r14d, eax
100016b71:	jmp	0x100016e98
100016b76:	lea	rsi, [rbp - 0xc8]
100016b7d:	mov	rdi, r12
100016b80:	call	0x1000198fc ## symbol stub for: _stat$INODE64
100016b85:	test	eax, eax
100016b87:	je	0x100016c4d
100016b8d:	mov	rdi, r12
100016b90:	xor	edx, edx
100016b92:	call	0x100016ec0
100016b97:	mov	r15, rax
100016b9a:	lea	rax, [rip + 0x12d37]
100016ba1:	mov	rbx, qword ptr [rax]
100016ba4:	mov	r12d, 0x1
100016baa:	test	rbx, rbx
100016bad:	je	0x100016c3a
100016bb3:	lea	r14, [rip + 0x12af2]
100016bba:	mov	rsi, qword ptr [rbx + 0x70]
100016bbe:	mov	rdi, r15
100016bc1:	mov	edx, r13d
100016bc4:	call	0x100015908
100016bc9:	test	eax, eax
100016bcb:	je	0x100016c2e
100016bcd:	lea	rax, [rip + 0x12d2c]
100016bd4:	cmp	dword ptr [rax], 0x0
100016bd7:	je	0x100016be7
100016bd9:	mov	rdi, qword ptr [rbx + 0x78]
100016bdd:	mov	esi, r13d
100016be0:	call	0x1000115ce
100016be5:	jmp	0x100016bec
100016be7:	mov	eax, 0x1
100016bec:	mov	dword ptr [rbx + 0x88], eax
100016bf2:	cmp	dword ptr [r14], 0x0
100016bf6:	je	0x100016c2b
100016bf8:	lea	rcx, [rip + 0x14331]
100016bff:	mov	rdi, qword ptr [rcx]
100016c02:	lea	rdx, [rip + 0xc783] ## literal pool for: "ex"
100016c09:	test	eax, eax
100016c0b:	je	0x100016c14
100016c0d:	lea	rdx, [rip + 0xc775] ## literal pool for: "in"
100016c14:	mov	rcx, qword ptr [rbx + 0x50]
100016c18:	xor	r12d, r12d
100016c1b:	lea	rsi, [rip + 0xc749] ## literal pool for: "zip diagnostic: %scluding %s\n"
100016c22:	xor	eax, eax
100016c24:	call	0x1000197ee ## symbol stub for: _fprintf
100016c29:	jmp	0x100016c2e
100016c2b:	xor	r12d, r12d
100016c2e:	mov	rbx, qword ptr [rbx + 0x98]
100016c35:	test	rbx, rbx
100016c38:	jne	0x100016bba
100016c3a:	mov	rdi, r15
100016c3d:	call	0x100019806 ## symbol stub for: _free
100016c42:	neg	r12d
100016c45:	sbb	r14d, r14d
100016c48:	jmp	0x100016e98
100016c4d:	movzx	eax, word ptr [rbp - 0xc4]
100016c54:	test	ax, ax
100016c57:	js	0x100016d45
100016c5d:	mov	ecx, eax
100016c5f:	and	ecx, 0xa000
100016c65:	cmp	ecx, 0xa000
100016c6b:	je	0x100016d45
100016c71:	bt	eax, 0xe
100016c75:	jb	0x100016c8d
100016c77:	bt	eax, 0xc
100016c7b:	jb	0x100016d1a
100016c81:	lea	rdi, [rip + 0xcf20] ## literal pool for: "ignoring special file: "
100016c88:	jmp	0x100016e8d
100016c8d:	mov	rdi, r12
100016c90:	call	0x100019920 ## symbol stub for: _strlen
100016c95:	lea	rdi, [rax + 0x2]
100016c99:	call	0x100019848 ## symbol stub for: _malloc
100016c9e:	mov	r14d, 0x4
100016ca4:	test	rax, rax
100016ca7:	je	0x100016e98
100016cad:	mov	rbx, rax
100016cb0:	lea	rsi, [rip + 0x61d7] ## literal pool for: "."
100016cb7:	mov	rdi, r12
100016cba:	call	0x10001990e ## symbol stub for: _strcmp
100016cbf:	test	eax, eax
100016cc1:	je	0x100016d62
100016cc7:	mov	rdi, rbx
100016cca:	mov	rsi, r12
100016ccd:	call	0x100019914 ## symbol stub for: _strcpy
100016cd2:	mov	rdi, rbx
100016cd5:	call	0x100019920 ## symbol stub for: _strlen
100016cda:	cmp	byte ptr [rbx + rax - 0x1], 0x2f
100016cdf:	je	0x100016ce7
100016ce1:	mov	word ptr [rbx + rax], 0x2f
100016ce7:	lea	rax, [rip + 0x12766]
100016cee:	cmp	dword ptr [rax], 0x0
100016cf1:	je	0x100016d65
100016cf3:	mov	rdi, rbx
100016cf6:	mov	esi, 0x1
100016cfb:	mov	edx, r13d
100016cfe:	call	0x100011a7d
100016d03:	test	eax, eax
100016d05:	je	0x100016d65
100016d07:	mov	r15d, eax
100016d0a:	mov	rdi, rbx
100016d0d:	call	0x100019806 ## symbol stub for: _free
100016d12:	mov	r14d, r15d
100016d15:	jmp	0x100016e98
100016d1a:	lea	rax, [rip + 0x12a77]
100016d21:	cmp	dword ptr [rax], 0x0
100016d24:	je	0x100016e86
100016d2a:	lea	rax, [rip + 0x1272b]
100016d31:	cmp	dword ptr [rax], 0x0
100016d34:	je	0x100016d45
100016d36:	lea	rdi, [rip + 0xce20] ## literal pool for: "Reading FIFO (Named Pipe): "
100016d3d:	mov	rsi, r12
100016d40:	call	0x100003e67
100016d45:	mov	rdi, r12
100016d48:	xor	esi, esi
100016d4a:	mov	edx, r13d
100016d4d:	call	0x100011a7d
100016d52:	mov	r14d, eax
100016d55:	test	eax, eax
100016d57:	jne	0x100016e98
100016d5d:	jmp	0x100016e95
100016d62:	mov	byte ptr [rbx], 0x0
100016d65:	mov	qword ptr [rbp - 0x38], rbx
100016d69:	lea	rax, [rip + 0x12930]
100016d70:	cmp	dword ptr [rax], 0x0
100016d73:	je	0x100016e7b
100016d79:	mov	rdi, r12
100016d7c:	call	0x100019872 ## symbol stub for: _opendir$INODE64
100016d81:	test	rax, rax
100016d84:	je	0x100016e7b
100016d8a:	mov	r15, rax
100016d8d:	mov	rdi, rax
100016d90:	call	0x1000198ba ## symbol stub for: _readdir$INODE64
100016d95:	test	rax, rax
100016d98:	je	0x100016e73
100016d9e:	mov	rbx, rax
100016da1:	lea	r12, [rip + 0x60e6] ## literal pool for: "."
100016da8:	mov	qword ptr [rbp - 0x30], r15
100016dac:	add	rbx, 0x15
100016db0:	mov	rdi, rbx
100016db3:	mov	rsi, r12
100016db6:	call	0x10001990e ## symbol stub for: _strcmp
100016dbb:	test	eax, eax
100016dbd:	je	0x100016e5f
100016dc3:	mov	rdi, rbx
100016dc6:	lea	rsi, [rip + 0xcd8d] ## literal pool for: ".."
100016dcd:	call	0x10001990e ## symbol stub for: _strcmp
100016dd2:	test	eax, eax
100016dd4:	je	0x100016e5f
100016dda:	mov	r15, qword ptr [rbp - 0x38]
100016dde:	mov	rdi, r15
100016de1:	call	0x100019920 ## symbol stub for: _strlen
100016de6:	mov	r12, rax
100016de9:	mov	rdi, rbx
100016dec:	call	0x100019920 ## symbol stub for: _strlen
100016df1:	lea	rdi, [r12 + rax + 0x1]
100016df6:	call	0x100019848 ## symbol stub for: _malloc
100016dfb:	test	rax, rax
100016dfe:	je	0x100016ead
100016e04:	mov	r12, rax
100016e07:	mov	rdi, rax
100016e0a:	mov	rsi, r15
100016e0d:	call	0x100019914 ## symbol stub for: _strcpy
100016e12:	mov	rdi, r12
100016e15:	mov	rsi, rbx
100016e18:	call	0x100019902 ## symbol stub for: _strcat
100016e1d:	mov	rdi, r12
100016e20:	mov	esi, r13d
100016e23:	call	0x100016b1a
100016e28:	test	eax, eax
100016e2a:	je	0x100016e4c
100016e2c:	cmp	eax, -0x1
100016e2f:	jne	0x100016e42
100016e31:	lea	rdi, [rip + 0x5c5d] ## literal pool for: "name not matched: "
100016e38:	mov	rsi, r12
100016e3b:	call	0x100003e67
100016e40:	jmp	0x100016e4c
100016e42:	mov	edi, eax
100016e44:	mov	rsi, r12
100016e47:	call	0x1000037b0
100016e4c:	mov	rdi, r12
100016e4f:	call	0x100019806 ## symbol stub for: _free
100016e54:	mov	r15, qword ptr [rbp - 0x30]
100016e58:	lea	r12, [rip + 0x602f] ## literal pool for: "."
100016e5f:	mov	rdi, r15
100016e62:	call	0x1000198ba ## symbol stub for: _readdir$INODE64
100016e67:	mov	rbx, rax
100016e6a:	test	rax, rax
100016e6d:	jne	0x100016dac
100016e73:	mov	rdi, r15
100016e76:	call	0x1000197b2 ## symbol stub for: _closedir
100016e7b:	mov	rdi, qword ptr [rbp - 0x38]
100016e7f:	call	0x100019806 ## symbol stub for: _free
100016e84:	jmp	0x100016e95
100016e86:	lea	rdi, [rip + 0xccec] ## literal pool for: "ignoring FIFO (Named Pipe) - use -FI to read: "
100016e8d:	mov	rsi, r12
100016e90:	call	0x100003e67
100016e95:	xor	r14d, r14d
100016e98:	mov	eax, r14d
100016e9b:	add	rsp, 0xa8
100016ea2:	pop	rbx
100016ea3:	pop	r12
100016ea5:	pop	r13
100016ea7:	pop	r14
100016ea9:	pop	r15
100016eab:	pop	rbp
100016eac:	ret
100016ead:	mov	rdi, qword ptr [rbp - 0x30]
100016eb1:	call	0x1000197b2 ## symbol stub for: _closedir
100016eb6:	mov	rdi, r15
100016eb9:	call	0x100019806 ## symbol stub for: _free
100016ebe:	jmp	0x100016e98
100016ec0:	push	rbp
100016ec1:	mov	rbp, rsp
100016ec4:	push	r15
100016ec6:	push	r14
100016ec8:	push	r13
100016eca:	push	r12
100016ecc:	push	rbx
100016ecd:	push	rax
100016ece:	mov	r14, rdx
100016ed1:	mov	rbx, rdi
100016ed4:	lea	r13, [rip + 0x127cd]
100016edb:	mov	r12d, dword ptr [r13]
100016edf:	lea	rsi, [rip + 0xccda] ## literal pool for: "//"
100016ee6:	mov	edx, 0x2
100016eeb:	call	0x100019926 ## symbol stub for: _strncmp
100016ef0:	test	eax, eax
100016ef2:	je	0x100016f8a
100016ef8:	dec	rbx
100016efb:	mov	al, byte ptr [rbx + 0x1]
100016efe:	inc	rbx
100016f01:	cmp	al, 0x2f
100016f03:	je	0x100016efb
100016f05:	cmp	al, 0x2e
100016f07:	jne	0x100016f1e
100016f09:	cmp	byte ptr [rbx + 0x1], 0x2f
100016f0d:	jne	0x100016f1e
100016f0f:	lea	r15, [rbx + 0x2]
100016f13:	cmp	byte ptr [rbx + 0x2], 0x2e
100016f17:	mov	rbx, r15
100016f1a:	je	0x100016f09
100016f1c:	jmp	0x100016f21
100016f1e:	mov	r15, rbx
100016f21:	lea	rax, [rip + 0x12520]
100016f28:	cmp	dword ptr [rax], 0x0
100016f2b:	jne	0x100016f3d
100016f2d:	mov	rdi, r15
100016f30:	mov	esi, 0x2f
100016f35:	call	0x1000113d5
100016f3a:	mov	r15, rax
100016f3d:	mov	rdi, r15
100016f40:	call	0x100019920 ## symbol stub for: _strlen
100016f45:	lea	rdi, [rax + 0x1]
100016f49:	call	0x100019848 ## symbol stub for: _malloc
100016f4e:	mov	rbx, rax
100016f51:	test	rax, rax
100016f54:	je	0x100016f78
100016f56:	mov	rdi, rbx
100016f59:	mov	rsi, r15
100016f5c:	call	0x100019914 ## symbol stub for: _strcpy
100016f61:	cmp	dword ptr [r13], 0x0
100016f66:	je	0x100016f70
100016f68:	mov	rdi, rbx
100016f6b:	call	0x1000113f8
100016f70:	test	r14, r14
100016f73:	je	0x100016f78
100016f75:	mov	dword ptr [r14], r12d
100016f78:	mov	rax, rbx
100016f7b:	add	rsp, 0x8
100016f7f:	pop	rbx
100016f80:	pop	r12
100016f82:	pop	r13
100016f84:	pop	r14
100016f86:	pop	r15
100016f88:	pop	rbp
100016f89:	ret
100016f8a:	mov	al, byte ptr [rbx + 0x2]
100016f8d:	test	al, al
100016f8f:	je	0x100016ef8
100016f95:	cmp	al, 0x2f
100016f97:	je	0x100016ef8
100016f9d:	add	rbx, 0x3
100016fa1:	test	al, al
100016fa3:	je	0x100016fc5
100016fa5:	cmp	al, 0x2f
100016fa7:	je	0x100016fb4
100016fa9:	mov	al, byte ptr [rbx]
100016fab:	inc	rbx
100016fae:	jmp	0x100016fa1
100016fb0:	test	al, al
100016fb2:	je	0x100016fbd
100016fb4:	mov	al, byte ptr [rbx]
100016fb6:	inc	rbx
100016fb9:	cmp	al, 0x2f
100016fbb:	jne	0x100016fb0
100016fbd:	test	al, al
100016fbf:	jne	0x100016ef8
100016fc5:	xor	ebx, ebx
100016fc7:	jmp	0x100016ef8
100016fcc:	push	rbp
100016fcd:	mov	rbp, rsp
100016fd0:	push	r14
100016fd2:	push	rbx
100016fd3:	mov	r14, rdi
100016fd6:	call	0x100019920 ## symbol stub for: _strlen
100016fdb:	lea	rdi, [rax + 0x1]
100016fdf:	call	0x100019848 ## symbol stub for: _malloc
100016fe4:	mov	rbx, rax
100016fe7:	test	rax, rax
100016fea:	je	0x100016ff7
100016fec:	mov	rdi, rbx
100016fef:	mov	rsi, r14
100016ff2:	call	0x100019914 ## symbol stub for: _strcpy
100016ff7:	mov	rax, rbx
100016ffa:	pop	rbx
100016ffb:	pop	r14
100016ffd:	pop	rbp
100016ffe:	ret
100016fff:	push	rbp
100017000:	mov	rbp, rsp
100017003:	push	rbx
100017004:	sub	rsp, 0x18
100017008:	mov	rbx, rdi
10001700b:	mov	rdi, rsi
10001700e:	call	0x100012138
100017013:	lea	rsi, [rbp - 0x18]
100017017:	mov	qword ptr [rsi + 0x8], rax
10001701b:	mov	qword ptr [rsi], rax
10001701e:	mov	rdi, rbx
100017021:	call	0x100019962 ## symbol stub for: _utime
100017026:	add	rsp, 0x18
10001702a:	pop	rbx
10001702b:	pop	rbp
10001702c:	ret
10001702d:	push	rbp
10001702e:	mov	rbp, rsp
100017031:	push	r15
100017033:	push	r14
100017035:	push	r13
100017037:	push	r12
100017039:	push	rbx
10001703a:	sub	rsp, 0x98
100017041:	mov	r12, rcx
100017044:	mov	r15, rsi
100017047:	lea	rax, [rip + 0x1264a]
10001704e:	cmp	qword ptr [rax], rdi
100017051:	je	0x1000170f3
100017057:	mov	rbx, rdi
10001705a:	mov	qword ptr [rbp - 0x30], rdx
10001705e:	call	0x100019920 ## symbol stub for: _strlen
100017063:	mov	r14, rax
100017066:	shl	r14, 0x20
10001706a:	movabs	rdi, offset __mh_execute_header
100017074:	add	rdi, r14
100017077:	sar	rdi, 0x20
10001707b:	call	0x100019848 ## symbol stub for: _malloc
100017080:	mov	r13, rax
100017083:	test	rax, rax
100017086:	jne	0x100017099
100017088:	lea	rsi, [rip + 0xcb34] ## literal pool for: "filetime"
10001708f:	mov	edi, 0x4
100017094:	call	0x1000037b0
100017099:	mov	rdi, r13
10001709c:	mov	rsi, rbx
10001709f:	call	0x100019914 ## symbol stub for: _strcpy
1000170a4:	movabs	rax, -0x100000000
1000170ae:	add	r14, rax
1000170b1:	sar	r14, 0x20
1000170b5:	cmp	byte ptr [r13 + r14], 0x2f
1000170bb:	jne	0x1000170c3
1000170bd:	mov	byte ptr [r13 + r14], 0x0
1000170c3:	lea	rsi, [rip + 0x5438] ## literal pool for: "-"
1000170ca:	mov	rdi, rbx
1000170cd:	call	0x10001990e ## symbol stub for: _strcmp
1000170d2:	test	eax, eax
1000170d4:	je	0x100017125
1000170d6:	lea	rax, [rip + 0x126a7]
1000170dd:	cmp	dword ptr [rax], 0x0
1000170e0:	je	0x10001715c
1000170e2:	lea	rsi, [rbp - 0xc0]
1000170e9:	mov	rdi, r13
1000170ec:	call	0x100019842 ## symbol stub for: _lstat$INODE64
1000170f1:	jmp	0x10001716b
1000170f3:	test	r15, r15
1000170f6:	je	0x1000170ff
1000170f8:	mov	qword ptr [r15], 0x0
1000170ff:	test	rdx, rdx
100017102:	je	0x10001710b
100017104:	mov	qword ptr [rdx], -0x2
10001710b:	test	r12, r12
10001710e:	je	0x100017177
100017110:	xor	eax, eax
100017112:	mov	qword ptr [r12 + 0x10], rax
100017117:	mov	qword ptr [r12 + 0x8], rax
10001711c:	mov	qword ptr [r12], rax
100017120:	jmp	0x100017215
100017125:	mov	rax, qword ptr [rip + 0xcef4] ## literal pool symbol address: ___stdinp
10001712c:	mov	rdi, qword ptr [rax]
10001712f:	call	0x1000197e2 ## symbol stub for: _fileno
100017134:	lea	rsi, [rbp - 0xc0]
10001713b:	mov	edi, eax
10001713d:	call	0x100019812 ## symbol stub for: _fstat$INODE64
100017142:	test	eax, eax
100017144:	je	0x10001717e
100017146:	mov	rdi, r13
100017149:	call	0x100019806 ## symbol stub for: _free
10001714e:	lea	rdi, [rip + 0xca77] ## literal pool for: "fstat(stdin)"
100017155:	call	0x100003c62
10001715a:	jmp	0x10001717e
10001715c:	lea	rsi, [rbp - 0xc0]
100017163:	mov	rdi, r13
100017166:	call	0x1000198fc ## symbol stub for: _stat$INODE64
10001716b:	test	eax, eax
10001716d:	je	0x10001717e
10001716f:	mov	rdi, r13
100017172:	call	0x100019806 ## symbol stub for: _free
100017177:	xor	eax, eax
100017179:	jmp	0x100017215
10001717e:	mov	rdi, r13
100017181:	call	0x100019806 ## symbol stub for: _free
100017186:	test	r15, r15
100017189:	je	0x1000171bc
10001718b:	movzx	ecx, word ptr [rbp - 0xbc]
100017192:	mov	rdx, rcx
100017195:	shl	rdx, 0x10
100017199:	xor	eax, eax
10001719b:	test	cl, -0x80
10001719e:	sete	al
1000171a1:	or	rax, rdx
1000171a4:	mov	qword ptr [r15], rax
1000171a7:	and	ecx, 0xf000
1000171ad:	cmp	ecx, 0x4000
1000171b3:	jne	0x1000171bc
1000171b5:	or	rax, 0x10
1000171b9:	mov	qword ptr [r15], rax
1000171bc:	mov	rdx, qword ptr [rbp - 0x30]
1000171c0:	test	rdx, rdx
1000171c3:	je	0x1000171e8
1000171c5:	movzx	ecx, word ptr [rbp - 0xbc]
1000171cc:	and	ecx, 0xf000
1000171d2:	mov	rax, -0x1
1000171d9:	cmp	ecx, 0x8000
1000171df:	jne	0x1000171e5
1000171e1:	mov	rax, qword ptr [rbp - 0x60]
1000171e5:	mov	qword ptr [rdx], rax
1000171e8:	test	r12, r12
1000171eb:	je	0x100017209
1000171ed:	mov	rax, qword ptr [rbp - 0xa0]
1000171f4:	mov	qword ptr [r12], rax
1000171f8:	mov	rax, qword ptr [rbp - 0x90]
1000171ff:	mov	qword ptr [r12 + 0x8], rax
100017204:	mov	qword ptr [r12 + 0x10], rax
100017209:	lea	rdi, [rbp - 0x90]
100017210:	call	0x10001207e
100017215:	add	rsp, 0x98
10001721c:	pop	rbx
10001721d:	pop	r12
10001721f:	pop	r13
100017221:	pop	r14
100017223:	pop	r15
100017225:	pop	rbp
100017226:	ret
100017227:	push	rbp
100017228:	mov	rbp, rsp
10001722b:	push	r15
10001722d:	push	r14
10001722f:	push	r13
100017231:	push	r12
100017233:	push	rbx
100017234:	push	rax
100017235:	mov	qword ptr [rbp - 0x30], rsi
100017239:	mov	rbx, rdi
10001723c:	movzx	r13d, word ptr [rdi + 0x2a]
100017241:	lea	r12, [r13 + 0xf]
100017245:	mov	rdi, r12
100017248:	call	0x100019848 ## symbol stub for: _malloc
10001724d:	mov	r14d, 0x4
100017253:	test	rax, rax
100017256:	je	0x1000173bd
10001725c:	mov	r15, rax
10001725f:	mov	rdi, r12
100017262:	call	0x100019848 ## symbol stub for: _malloc
100017267:	test	rax, rax
10001726a:	je	0x1000173bd
100017270:	mov	r12, rax
100017273:	test	r13w, r13w
100017277:	je	0x100017288
100017279:	mov	rsi, qword ptr [rbx + 0x58]
10001727d:	mov	rdi, r15
100017280:	mov	rdx, r13
100017283:	call	0x10001984e ## symbol stub for: _memcpy
100017288:	movzx	edx, word ptr [rbx + 0x2c]
10001728c:	test	rdx, rdx
10001728f:	je	0x10001729d
100017291:	mov	rsi, qword ptr [rbx + 0x60]
100017295:	mov	rdi, r12
100017298:	call	0x10001984e ## symbol stub for: _memcpy
10001729d:	mov	rdi, qword ptr [rbx + 0x58]
1000172a1:	call	0x100019806 ## symbol stub for: _free
1000172a6:	mov	qword ptr [rbx + 0x58], r15
1000172aa:	mov	rdi, qword ptr [rbx + 0x60]
1000172ae:	call	0x100019806 ## symbol stub for: _free
1000172b3:	mov	qword ptr [rbx + 0x60], r12
1000172b7:	mov	rax, qword ptr [rbx + 0x58]
1000172bb:	movzx	ecx, word ptr [rbx + 0x2a]
1000172bf:	mov	byte ptr [rax + rcx], 0x75
1000172c3:	mov	rax, qword ptr [rbx + 0x58]
1000172c7:	movzx	ecx, word ptr [rbx + 0x2a]
1000172cb:	mov	byte ptr [rcx + rax + 0x1], 0x78
1000172d0:	mov	rax, qword ptr [rbx + 0x58]
1000172d4:	movzx	ecx, word ptr [rbx + 0x2a]
1000172d8:	mov	byte ptr [rcx + rax + 0x2], 0xb
1000172dd:	mov	rax, qword ptr [rbx + 0x58]
1000172e1:	movzx	ecx, word ptr [rbx + 0x2a]
1000172e5:	mov	byte ptr [rcx + rax + 0x3], 0x0
1000172ea:	mov	rax, qword ptr [rbx + 0x58]
1000172ee:	movzx	ecx, word ptr [rbx + 0x2a]
1000172f2:	mov	byte ptr [rcx + rax + 0x4], 0x1
1000172f7:	mov	rax, qword ptr [rbx + 0x58]
1000172fb:	movzx	ecx, word ptr [rbx + 0x2a]
1000172ff:	mov	r8b, 0x4
100017302:	mov	byte ptr [rcx + rax + 0x5], r8b
100017307:	mov	rdx, qword ptr [rbp - 0x30]
10001730b:	mov	eax, dword ptr [rdx + 0x10]
10001730e:	mov	rcx, qword ptr [rbx + 0x58]
100017312:	movzx	esi, word ptr [rbx + 0x2a]
100017316:	mov	byte ptr [rsi + rcx + 0x6], al
10001731a:	mov	rcx, qword ptr [rbx + 0x58]
10001731e:	movzx	esi, word ptr [rbx + 0x2a]
100017322:	mov	byte ptr [rsi + rcx + 0x7], ah
100017326:	mov	ecx, eax
100017328:	shr	ecx, 0x10
10001732b:	mov	rsi, qword ptr [rbx + 0x58]
10001732f:	movzx	edi, word ptr [rbx + 0x2a]
100017333:	mov	byte ptr [rdi + rsi + 0x8], cl
100017337:	shr	eax, 0x18
10001733a:	mov	rcx, qword ptr [rbx + 0x58]
10001733e:	movzx	esi, word ptr [rbx + 0x2a]
100017342:	mov	byte ptr [rsi + rcx + 0x9], al
100017346:	mov	rax, qword ptr [rbx + 0x58]
10001734a:	movzx	ecx, word ptr [rbx + 0x2a]
10001734e:	mov	byte ptr [rcx + rax + 0xa], r8b
100017353:	mov	eax, dword ptr [rdx + 0x14]
100017356:	mov	rcx, qword ptr [rbx + 0x58]
10001735a:	movzx	edx, word ptr [rbx + 0x2a]
10001735e:	mov	byte ptr [rdx + rcx + 0xb], al
100017362:	mov	rcx, qword ptr [rbx + 0x58]
100017366:	movzx	edx, word ptr [rbx + 0x2a]
10001736a:	mov	byte ptr [rdx + rcx + 0xc], ah
10001736e:	mov	ecx, eax
100017370:	shr	ecx, 0x10
100017373:	mov	rdx, qword ptr [rbx + 0x58]
100017377:	movzx	esi, word ptr [rbx + 0x2a]
10001737b:	mov	byte ptr [rsi + rdx + 0xd], cl
10001737f:	shr	eax, 0x18
100017382:	mov	rcx, qword ptr [rbx + 0x58]
100017386:	movzx	edx, word ptr [rbx + 0x2a]
10001738a:	mov	byte ptr [rdx + rcx + 0xe], al
10001738e:	mov	rax, qword ptr [rbx + 0x58]
100017392:	mov	rcx, qword ptr [rbx + 0x60]
100017396:	movzx	edx, word ptr [rbx + 0x2c]
10001739a:	movzx	esi, word ptr [rbx + 0x2a]
10001739e:	mov	rdi, qword ptr [rax + rsi]
1000173a2:	mov	rax, qword ptr [rax + rsi + 0x7]
1000173a7:	mov	qword ptr [rcx + rdx + 0x7], rax
1000173ac:	mov	qword ptr [rcx + rdx], rdi
1000173b0:	add	word ptr [rbx + 0x2a], 0xf
1000173b5:	add	word ptr [rbx + 0x2c], 0xf
1000173ba:	xor	r14d, r14d
1000173bd:	mov	eax, r14d
1000173c0:	add	rsp, 0x8
1000173c4:	pop	rbx
1000173c5:	pop	r12
1000173c7:	pop	r13
1000173c9:	pop	r14
1000173cb:	pop	r15
1000173cd:	pop	rbp
1000173ce:	ret
1000173cf:	push	rbp
1000173d0:	mov	rbp, rsp
1000173d3:	push	r15
1000173d5:	push	r14
1000173d7:	push	r12
1000173d9:	push	rbx
1000173da:	sub	rsp, 0x90
1000173e1:	mov	r14, rdi
1000173e4:	mov	r12, qword ptr [rdi + 0x50]
1000173e8:	mov	rdi, r12
1000173eb:	call	0x100019920 ## symbol stub for: _strlen
1000173f0:	mov	rbx, rax
1000173f3:	shl	rbx, 0x20
1000173f7:	movabs	rdi, offset __mh_execute_header
100017401:	add	rdi, rbx
100017404:	sar	rdi, 0x20
100017408:	call	0x100019848 ## symbol stub for: _malloc
10001740d:	mov	r15, rax
100017410:	test	rax, rax
100017413:	jne	0x10001742a
100017415:	lea	rsi, [rip + 0xc7bd] ## literal pool for: "set_extra_field"
10001741c:	mov	edi, 0x4
100017421:	call	0x1000037b0
100017426:	mov	r12, qword ptr [r14 + 0x50]
10001742a:	mov	rdi, r15
10001742d:	mov	rsi, r12
100017430:	call	0x100019914 ## symbol stub for: _strcpy
100017435:	movabs	rax, -0x100000000
10001743f:	add	rbx, rax
100017442:	sar	rbx, 0x20
100017446:	cmp	byte ptr [r15 + rbx], 0x2f
10001744b:	jne	0x100017452
10001744d:	mov	byte ptr [r15 + rbx], 0x0
100017452:	lea	rax, [rip + 0x1232b]
100017459:	cmp	dword ptr [rax], 0x0
10001745c:	je	0x10001746f
10001745e:	lea	rsi, [rbp - 0xb0]
100017465:	mov	rdi, r15
100017468:	call	0x100019842 ## symbol stub for: _lstat$INODE64
10001746d:	jmp	0x10001747e
10001746f:	lea	rsi, [rbp - 0xb0]
100017476:	mov	rdi, r15
100017479:	call	0x1000198fc ## symbol stub for: _stat$INODE64
10001747e:	mov	rdi, r15
100017481:	test	eax, eax
100017483:	je	0x100017494
100017485:	call	0x100019806 ## symbol stub for: _free
10001748a:	mov	ebx, 0x12
10001748f:	jmp	0x100017515
100017494:	call	0x100019806 ## symbol stub for: _free
100017499:	mov	edi, 0xd
10001749e:	call	0x100019848 ## symbol stub for: _malloc
1000174a3:	mov	qword ptr [r14 + 0x58], rax
1000174a7:	mov	ebx, 0x4
1000174ac:	test	rax, rax
1000174af:	je	0x100017515
1000174b1:	mov	r15, rax
1000174b4:	mov	edi, 0x9
1000174b9:	call	0x100019848 ## symbol stub for: _malloc
1000174be:	mov	qword ptr [r14 + 0x60], rax
1000174c2:	test	rax, rax
1000174c5:	je	0x100017515
1000174c7:	mov	dword ptr [r15], 0x95455
1000174ce:	mov	byte ptr [r15 + 0x4], 0x3
1000174d3:	lea	rsi, [rbp - 0xb0]
1000174da:	mov	ecx, dword ptr [rsi + 0x30]
1000174dd:	mov	dword ptr [r15 + 0x5], ecx
1000174e1:	mov	ecx, dword ptr [rsi + 0x20]
1000174e4:	mov	dword ptr [r15 + 0x9], ecx
1000174e8:	mov	word ptr [r14 + 0x2a], 0xd
1000174ef:	mov	cl, byte ptr [r15 + 0x8]
1000174f3:	mov	byte ptr [rax + 0x8], cl
1000174f6:	mov	rcx, qword ptr [r15]
1000174f9:	mov	qword ptr [rax], rcx
1000174fc:	mov	rax, qword ptr [r14 + 0x60]
100017500:	mov	byte ptr [rax + 0x2], 0x5
100017504:	mov	word ptr [r14 + 0x2c], 0x9
10001750b:	mov	rdi, r14
10001750e:	call	0x100017227
100017513:	xor	ebx, ebx
100017515:	mov	eax, ebx
100017517:	add	rsp, 0x90
10001751e:	pop	rbx
10001751f:	pop	r12
100017521:	pop	r14
100017523:	pop	r15
100017525:	pop	rbp
100017526:	ret
100017527:	push	rbp
100017528:	mov	rbp, rsp
10001752b:	pop	rbp
10001752c:	jmp	0x1000198d8 ## symbol stub for: _rmdir
100017531:	push	rbp
100017532:	mov	rbp, rsp
100017535:	lea	rdi, [rip + 0xc6ad] ## literal pool for: "Compiled with %s for Unix (%s)%s.\n\n"
10001753c:	lea	rsi, [rip + 0xc6ca] ## literal pool for: "gcc Apple LLVM 12.0.5 (clang-1205.0.19.59.6) [+internal-os, ptrauth-isa=deployment-target-based]"
100017543:	lea	rdx, [rip + 0xc724] ## literal pool for: "Mac OS X"
10001754a:	lea	rcx, [rip + 0xc726] ## literal pool for: " on Jun 17 2021"
100017551:	xor	eax, eax
100017553:	pop	rbp
100017554:	jmp	0x100019890 ## symbol stub for: _printf
100017559:	push	rbp
10001755a:	mov	rbp, rsp
10001755d:	lea	rax, [rip + 0x28ec]
100017564:	pop	rbp
100017565:	ret
100017566:	test	rsi, rsi
100017569:	je	0x10001767d
10001756f:	push	rbp
100017570:	mov	rbp, rsp
100017573:	mov	rax, rdi
100017576:	mov	r8d, 0xffffffff
10001757c:	xor	rax, r8
10001757f:	cmp	rdx, 0x8
100017583:	jb	0x10001764f
100017589:	mov	r9d, 0xff
10001758f:	lea	r10, [rip + 0x28ba]
100017596:	movzx	edi, byte ptr [rsi]
100017599:	mov	rcx, rax
10001759c:	and	rcx, r9
10001759f:	xor	rcx, rdi
1000175a2:	shr	rax, 0x8
1000175a6:	xor	rax, qword ptr [r10 + 8*rcx]
1000175aa:	movzx	ecx, byte ptr [rsi + 0x1]
1000175ae:	mov	rdi, rax
1000175b1:	and	rdi, r9
1000175b4:	xor	rdi, rcx
1000175b7:	shr	rax, 0x8
1000175bb:	xor	rax, qword ptr [r10 + 8*rdi]
1000175bf:	movzx	ecx, byte ptr [rsi + 0x2]
1000175c3:	mov	rdi, rax
1000175c6:	and	rdi, r9
1000175c9:	xor	rdi, rcx
1000175cc:	shr	rax, 0x8
1000175d0:	xor	rax, qword ptr [r10 + 8*rdi]
1000175d4:	movzx	ecx, byte ptr [rsi + 0x3]
1000175d8:	mov	rdi, rax
1000175db:	and	rdi, r9
1000175de:	xor	rdi, rcx
1000175e1:	shr	rax, 0x8
1000175e5:	xor	rax, qword ptr [r10 + 8*rdi]
1000175e9:	movzx	ecx, byte ptr [rsi + 0x4]
1000175ed:	mov	rdi, rax
1000175f0:	and	rdi, r9
1000175f3:	xor	rdi, rcx
1000175f6:	shr	rax, 0x8
1000175fa:	xor	rax, qword ptr [r10 + 8*rdi]
1000175fe:	movzx	ecx, byte ptr [rsi + 0x5]
100017602:	mov	rdi, rax
100017605:	and	rdi, r9
100017608:	xor	rdi, rcx
10001760b:	shr	rax, 0x8
10001760f:	xor	rax, qword ptr [r10 + 8*rdi]
100017613:	movzx	ecx, byte ptr [rsi + 0x6]
100017617:	mov	rdi, rax
10001761a:	and	rdi, r9
10001761d:	xor	rdi, rcx
100017620:	shr	rax, 0x8
100017624:	xor	rax, qword ptr [r10 + 8*rdi]
100017628:	movzx	ecx, byte ptr [rsi + 0x7]
10001762c:	add	rsi, 0x8
100017630:	mov	rdi, rax
100017633:	and	rdi, r9
100017636:	xor	rdi, rcx
100017639:	shr	rax, 0x8
10001763d:	xor	rax, qword ptr [r10 + 8*rdi]
100017641:	add	rdx, -0x8
100017645:	cmp	rdx, 0x7
100017649:	ja	0x100017596
10001764f:	test	rdx, rdx
100017652:	je	0x100017678
100017654:	xor	ecx, ecx
100017656:	lea	r9, [rip + 0x27f3]
10001765d:	movzx	r10d, byte ptr [rsi + rcx]
100017662:	movzx	edi, al
100017665:	xor	rdi, r10
100017668:	shr	rax, 0x8
10001766c:	xor	rax, qword ptr [r9 + 8*rdi]
100017670:	inc	rcx
100017673:	cmp	rdx, rcx
100017676:	jne	0x10001765d
100017678:	xor	rax, r8
10001767b:	pop	rbp
10001767c:	ret
10001767d:	xor	eax, eax
10001767f:	ret
100017680:	push	rbp
100017681:	mov	rbp, rsp
100017684:	push	r15
100017686:	push	r14
100017688:	push	r12
10001768a:	push	rbx
10001768b:	mov	r14, rsi
10001768e:	mov	r15d, edi
100017691:	lea	eax, [r15 - 0x1]
100017695:	cmp	eax, 0x9
100017698:	jb	0x1000176a6
10001769a:	lea	rdi, [rip + 0xc5e6] ## literal pool for: "bad pack level"
1000176a1:	call	0x100003c62
1000176a6:	mov	byte ptr [rip + 0x456ab], 0x0
1000176ad:	lea	rax, [rip + 0x438ec]
1000176b4:	cmp	qword ptr [rax], 0x0
1000176b8:	jne	0x1000176c8
1000176ba:	mov	byte ptr [rip + 0x45697], 0x1
1000176c1:	mov	qword ptr [rax], 0x10000
1000176c8:	movsxd	rbx, r15d
1000176cb:	lea	r12, [rip + 0x2f8e]
1000176d2:	lea	rdi, [rip + 0x138a7]
1000176d9:	mov	esi, 0x10000
1000176de:	call	0x10001975e ## symbol stub for: ___bzero
1000176e3:	movzx	eax, word ptr [r12 + 8*rbx + 0x2]
1000176e9:	mov	dword ptr [rip + 0x4566d], eax
1000176ef:	movzx	eax, word ptr [r12 + 8*rbx]
1000176f4:	lea	rcx, [rip + 0x13875]
1000176fb:	mov	dword ptr [rcx], eax
1000176fd:	movzx	eax, word ptr [r12 + 8*rbx + 0x4]
100017703:	lea	rcx, [rip + 0x2387e]
10001770a:	mov	dword ptr [rcx], eax
10001770c:	movzx	eax, word ptr [r12 + 8*rbx + 0x6]
100017712:	lea	rcx, [rip + 0x2386b]
100017719:	mov	dword ptr [rcx], eax
10001771b:	mov	ax, 0x4
10001771f:	cmp	r15d, 0x3
100017723:	jl	0x10001772f
100017725:	mov	ax, 0x2
100017729:	cmp	r15d, 0x8
10001772d:	jl	0x100017733
10001772f:	or	word ptr [r14], ax
100017733:	lea	rax, [rip + 0x3385a]
10001773a:	mov	dword ptr [rax], 0x0
100017740:	lea	rax, [rip + 0x13821]
100017747:	mov	qword ptr [rax], 0x0
10001774e:	lea	rax, [rip + 0x11abb]
100017755:	lea	rbx, [rip + 0x33844]
10001775c:	mov	rdi, rbx
10001775f:	mov	esi, 0x10000
100017764:	call	qword ptr [rax]
100017766:	mov	dword ptr [rip + 0x455f4], eax
10001776c:	lea	ecx, [rax + 0x1]
10001776f:	cmp	ecx, 0x1
100017772:	ja	0x100017787
100017774:	mov	byte ptr [rip + 0x455e9], 0x1
10001777b:	mov	dword ptr [rip + 0x455db], 0x0
100017785:	jmp	0x1000177ac
100017787:	mov	byte ptr [rip + 0x455d6], 0x0
10001778e:	cmp	eax, 0x105
100017793:	ja	0x10001779a
100017795:	call	0x1000177b5
10001779a:	movzx	eax, byte ptr [rbx]
10001779d:	shl	eax, 0x5
1000177a0:	movzx	ecx, byte ptr [rbx + 0x1]
1000177a4:	xor	ecx, eax
1000177a6:	mov	dword ptr [rip + 0x455bc], ecx
1000177ac:	pop	rbx
1000177ad:	pop	r12
1000177af:	pop	r14
1000177b1:	pop	r15
1000177b3:	pop	rbp
1000177b4:	ret
1000177b5:	push	rbp
1000177b6:	mov	rbp, rsp
1000177b9:	push	r15
1000177bb:	push	r14
1000177bd:	push	r13
1000177bf:	push	r12
1000177c1:	push	rbx
1000177c2:	push	rax
1000177c3:	mov	eax, dword ptr [rip + 0x45597]
1000177c9:	lea	r13, [rip + 0x337c4]
1000177d0:	lea	rcx, [rip + 0x337c9]
1000177d7:	add	rcx, 0x8000
1000177de:	mov	qword ptr [rbp - 0x30], rcx
1000177e2:	lea	r14, [rip + 0x13797]
1000177e9:	lea	r12, [rip + 0x237a0]
1000177f0:	lea	rcx, [rip + 0x437a9]
1000177f7:	mov	ebx, dword ptr [rcx]
1000177f9:	sub	ebx, eax
1000177fb:	mov	r15d, dword ptr [r13]
1000177ff:	sub	ebx, r15d
100017802:	cmp	ebx, -0x1
100017805:	je	0x100017939
10001780b:	cmp	r15d, 0xfefa
100017812:	jb	0x100017990
100017818:	test	byte ptr [rip + 0x45539], 0x1
10001781f:	je	0x100017990
100017825:	mov	edx, 0x8000
10001782a:	lea	rdi, [rip + 0x3376f]
100017831:	mov	rsi, qword ptr [rbp - 0x30]
100017835:	call	0x10001984e ## symbol stub for: _memcpy
10001783a:	movdqa	xmm1, xmmword ptr [rip + 0x2e0e]
100017842:	lea	rax, [rip + 0x23737]
100017849:	mov	ecx, 0xffff8000
10001784e:	add	dword ptr [rax], ecx
100017850:	add	r15d, ecx
100017853:	mov	dword ptr [r13], r15d
100017857:	lea	rax, [rip + 0x1370a]
10001785e:	add	qword ptr [rax], -0x8000
100017865:	xor	eax, eax
100017867:	movdqa	xmm0, xmmword ptr [r14 + 2*rax]
10001786d:	psubusw	xmm0, xmm1
100017871:	movdqa	xmmword ptr [r14 + 2*rax], xmm0
100017877:	add	rax, 0x8
10001787b:	cmp	rax, 0x8000
100017881:	jne	0x100017867
100017883:	xor	eax, eax
100017885:	lea	r15, [rip + 0x11e74]
10001788c:	movdqa	xmm0, xmmword ptr [r12 + 2*rax]
100017892:	psubusw	xmm0, xmm1
100017896:	movdqa	xmmword ptr [r12 + 2*rax], xmm0
10001789c:	add	rax, 0x8
1000178a0:	cmp	rax, 0x8000
1000178a6:	jne	0x10001788c
1000178a8:	lea	rax, [rip + 0x11e49]
1000178af:	mov	rax, qword ptr [rax]
1000178b2:	test	rax, rax
1000178b5:	jle	0x100017940
1000178bb:	lea	rcx, [rip + 0x11e4e]
1000178c2:	cmp	dword ptr [rcx], 0x0
1000178c5:	lea	r15, [rip + 0x11e34]
1000178cc:	jne	0x100017940
1000178ce:	lea	rcx, [rip + 0x11b87]
1000178d5:	cmp	dword ptr [rcx], 0x0
1000178d8:	mov	rdx, qword ptr [r15]
1000178db:	je	0x100017919
1000178dd:	cmp	rdx, -0x1
1000178e1:	jne	0x100017919
1000178e3:	lea	rax, [rip + 0x13646]
1000178ea:	mov	rsi, qword ptr [rax]
1000178ed:	mov	edi, 0x20
1000178f2:	call	0x100019896 ## symbol stub for: _putc
1000178f7:	lea	rax, [rip + 0x13632]
1000178fe:	mov	rdi, qword ptr [rax]
100017901:	call	0x1000197d6 ## symbol stub for: _fflush
100017906:	mov	rdx, qword ptr [r15]
100017909:	inc	rdx
10001790c:	mov	qword ptr [r15], rdx
10001790f:	lea	rax, [rip + 0x11de2]
100017916:	mov	rax, qword ptr [rax]
100017919:	lea	rcx, [rdx + 0x1]
10001791d:	shl	rdx, 0xf
100017921:	add	rdx, 0x10000
100017928:	cmp	rax, rdx
10001792b:	mov	edx, 0x0
100017930:	cmovle	rcx, rdx
100017934:	mov	qword ptr [r15], rcx
100017937:	jmp	0x100017943
100017939:	mov	ebx, 0xfffffffe
10001793e:	jmp	0x100017990
100017940:	mov	rcx, qword ptr [r15]
100017943:	add	ebx, 0x8000
100017949:	lea	rdx, [rip + 0x11b0c]
100017950:	mov	edx, dword ptr [rdx]
100017952:	lea	rsi, [rip + 0x11d53]
100017959:	or	edx, dword ptr [rsi]
10001795b:	je	0x100017990
10001795d:	test	rax, rax
100017960:	je	0x100017990
100017962:	test	rcx, rcx
100017965:	jne	0x100017990
100017967:	lea	r15, [rip + 0x135c2]
10001796e:	mov	rsi, qword ptr [r15]
100017971:	mov	edi, 0x2e
100017976:	call	0x100019896 ## symbol stub for: _putc
10001797b:	mov	rdi, qword ptr [r15]
10001797e:	call	0x1000197d6 ## symbol stub for: _fflush
100017983:	lea	rax, [rip + 0x11f42]
10001798a:	mov	dword ptr [rax], 0x1
100017990:	cmp	byte ptr [rip + 0x453cd], 0x0
100017997:	jne	0x1000179e9
100017999:	mov	eax, dword ptr [r13]
10001799d:	add	rax, qword ptr [rip + 0xc68c]
1000179a4:	mov	edi, dword ptr [rip + 0x453b6]
1000179aa:	add	rdi, rax
1000179ad:	mov	esi, ebx
1000179af:	lea	rax, [rip + 0x1185a]
1000179b6:	call	qword ptr [rax]
1000179b8:	lea	ecx, [rax + 0x1]
1000179bb:	cmp	ecx, 0x1
1000179be:	jbe	0x1000179e2
1000179c0:	add	eax, dword ptr [rip + 0x4539a]
1000179c6:	mov	dword ptr [rip + 0x45394], eax
1000179cc:	cmp	eax, 0x105
1000179d1:	ja	0x1000179e9
1000179d3:	test	byte ptr [rip + 0x4538a], 0x1
1000179da:	je	0x1000177f0
1000179e0:	jmp	0x1000179e9
1000179e2:	mov	byte ptr [rip + 0x4537b], 0x1
1000179e9:	add	rsp, 0x8
1000179ed:	pop	rbx
1000179ee:	pop	r12
1000179f0:	pop	r13
1000179f2:	pop	r14
1000179f4:	pop	r15
1000179f6:	pop	rbp
1000179f7:	ret
1000179f8:	push	rbp
1000179f9:	mov	rbp, rsp
1000179fc:	pop	rbp
1000179fd:	ret
1000179fe:	push	rbp
1000179ff:	mov	rbp, rsp
100017a02:	push	r15
100017a04:	push	r14
100017a06:	push	r13
100017a08:	push	r12
100017a0a:	push	rbx
100017a0b:	lea	rax, [rip + 0x23572]
100017a12:	mov	edx, dword ptr [rax]
100017a14:	lea	rax, [rip + 0x33579]
100017a1b:	mov	ecx, dword ptr [rax]
100017a1d:	lea	r9, [rip + 0x3357c]
100017a24:	lea	r10, [r9 + rcx]
100017a28:	lea	rax, [rip + 0x33561]
100017a2f:	movsxd	rax, dword ptr [rax]
100017a32:	xor	esi, esi
100017a34:	lea	r8, [r9 + rcx + 0x102]
100017a3c:	mov	r13d, ecx
100017a3f:	sub	r13d, 0x7efa
100017a46:	cmovb	r13d, esi
100017a4a:	mov	r15b, byte ptr [rax + r10 - 0x1]
100017a4f:	mov	r12b, byte ptr [rax + r10]
100017a53:	lea	rsi, [rip + 0x13516]
100017a5a:	mov	ecx, edx
100017a5c:	shr	ecx, 0x2
100017a5f:	cmp	eax, dword ptr [rsi]
100017a61:	cmovb	ecx, edx
100017a64:	lea	rdx, [rip + 0x2351d]
100017a6b:	mov	edx, dword ptr [rdx]
100017a6d:	mov	dword ptr [rbp - 0x2c], edx
100017a70:	lea	r14, [rip + 0x23519]
100017a77:	mov	esi, edi
100017a79:	lea	rbx, [rsi + r9]
100017a7d:	movsxd	rdx, eax
100017a80:	cmp	byte ptr [rdx + rbx], r12b
100017a84:	jne	0x100017b86
100017a8a:	cmp	byte ptr [rdx + rbx - 0x1], r15b
100017a8f:	jne	0x100017b86
100017a95:	mov	dl, byte ptr [rbx]
100017a97:	cmp	dl, byte ptr [r10]
100017a9a:	jne	0x100017b86
100017aa0:	mov	dl, byte ptr [rbx + 0x1]
100017aa3:	cmp	dl, byte ptr [r10 + 0x1]
100017aa7:	jne	0x100017b86
100017aad:	lea	rsi, [r9 + rsi + 0xa]
100017ab2:	xor	ebx, ebx
100017ab4:	mov	dl, byte ptr [r10 + rbx + 0x3]
100017ab9:	cmp	dl, byte ptr [rsi + rbx - 0x7]
100017abd:	jne	0x100017b26
100017abf:	mov	dl, byte ptr [r10 + rbx + 0x4]
100017ac4:	cmp	dl, byte ptr [rsi + rbx - 0x6]
100017ac8:	jne	0x100017b2d
100017aca:	mov	dl, byte ptr [r10 + rbx + 0x5]
100017acf:	cmp	dl, byte ptr [rsi + rbx - 0x5]
100017ad3:	jne	0x100017b34
100017ad5:	mov	dl, byte ptr [r10 + rbx + 0x6]
100017ada:	cmp	dl, byte ptr [rsi + rbx - 0x4]
100017ade:	jne	0x100017b3b
100017ae0:	mov	dl, byte ptr [r10 + rbx + 0x7]
100017ae5:	cmp	dl, byte ptr [rsi + rbx - 0x3]
100017ae9:	jne	0x100017b42
100017aeb:	mov	dl, byte ptr [r10 + rbx + 0x8]
100017af0:	cmp	dl, byte ptr [rsi + rbx - 0x2]
100017af4:	jne	0x100017b49
100017af6:	mov	dl, byte ptr [r10 + rbx + 0x9]
100017afb:	cmp	dl, byte ptr [rsi + rbx - 0x1]
100017aff:	jne	0x100017b50
100017b01:	lea	rdx, [rbx + 0x2]
100017b05:	lea	r11, [rbx + 0x8]
100017b09:	cmp	rdx, 0xf9
100017b10:	ja	0x100017b1f
100017b12:	mov	dl, byte ptr [rsi + rbx]
100017b15:	cmp	byte ptr [r10 + rbx + 0xa], dl
100017b1a:	mov	rbx, r11
100017b1d:	je	0x100017ab4
100017b1f:	lea	rsi, [r10 + r11 + 0x2]
100017b24:	jmp	0x100017b55
100017b26:	lea	rsi, [r10 + rbx + 0x3]
100017b2b:	jmp	0x100017b55
100017b2d:	lea	rsi, [r10 + rbx + 0x4]
100017b32:	jmp	0x100017b55
100017b34:	lea	rsi, [r10 + rbx + 0x5]
100017b39:	jmp	0x100017b55
100017b3b:	lea	rsi, [r10 + rbx + 0x6]
100017b40:	jmp	0x100017b55
100017b42:	lea	rsi, [r10 + rbx + 0x7]
100017b47:	jmp	0x100017b55
100017b49:	lea	rsi, [r10 + rbx + 0x8]
100017b4e:	jmp	0x100017b55
100017b50:	lea	rsi, [r10 + rbx + 0x9]
100017b55:	sub	rsi, r8
100017b58:	lea	ebx, [rsi + 0x102]
100017b5e:	cmp	ebx, eax
100017b60:	jle	0x100017b86
100017b62:	lea	rax, [rip + 0x23417]
100017b69:	mov	dword ptr [rax], edi
100017b6b:	cmp	ebx, dword ptr [rbp - 0x2c]
100017b6e:	jge	0x100017ba9
100017b70:	add	esi, 0x101
100017b76:	movsxd	rax, esi
100017b79:	mov	r15b, byte ptr [r10 + rax]
100017b7d:	movsxd	rax, ebx
100017b80:	mov	r12b, byte ptr [r10 + rax]
100017b84:	mov	eax, ebx
100017b86:	and	edi, 0x7fff
100017b8c:	movzx	edi, word ptr [r14 + 2*rdi]
100017b91:	cmp	r13d, edi
100017b94:	jae	0x100017b9e
100017b96:	dec	ecx
100017b98:	jne	0x100017a77
100017b9e:	pop	rbx
100017b9f:	pop	r12
100017ba1:	pop	r13
100017ba3:	pop	r14
100017ba5:	pop	r15
100017ba7:	pop	rbp
100017ba8:	ret
100017ba9:	mov	eax, ebx
100017bab:	jmp	0x100017b9e
100017bad:	push	rbp
100017bae:	mov	rbp, rsp
100017bb1:	push	r15
100017bb3:	push	r14
100017bb5:	push	r13
100017bb7:	push	r12
100017bb9:	push	rbx
100017bba:	push	rax
100017bbb:	lea	rax, [rip + 0x1188e]
100017bc2:	cmp	dword ptr [rax], 0x4
100017bc5:	jge	0x100017df2
100017bcb:	lea	rax, [rip + 0x333be]
100017bd2:	mov	dword ptr [rax], 0x2
100017bd8:	mov	r8d, dword ptr [rip + 0x45181]
100017bdf:	test	r8d, r8d
100017be2:	je	0x1000180ce
100017be8:	lea	rbx, [rip + 0x333a5]
100017bef:	lea	r13, [rip + 0x333aa]
100017bf6:	lea	r15, [rip + 0x13383]
100017bfd:	lea	rcx, [rip + 0x2338c]
100017c04:	xor	r14d, r14d
100017c07:	cmp	r8d, 0x2
100017c0b:	jbe	0x100017c47
100017c0d:	mov	eax, dword ptr [rip + 0x45155]
100017c13:	shl	eax, 0x5
100017c16:	mov	edi, dword ptr [rbx]
100017c18:	lea	edx, [rdi + 0x2]
100017c1b:	movzx	edx, byte ptr [r13 + rdx]
100017c21:	and	eax, 0x7fe0
100017c26:	xor	eax, edx
100017c28:	mov	dword ptr [rip + 0x4513a], eax
100017c2e:	movzx	r14d, word ptr [r15 + 2*rax]
100017c33:	mov	edx, edi
100017c35:	and	edx, 0x7fff
100017c3b:	mov	word ptr [rcx + 2*rdx], r14w
100017c40:	mov	word ptr [r15 + 2*rax], di
100017c45:	jmp	0x100017c49
100017c47:	mov	edi, dword ptr [rbx]
100017c49:	test	r14d, r14d
100017c4c:	je	0x100017d2d
100017c52:	mov	eax, edi
100017c54:	sub	eax, r14d
100017c57:	cmp	eax, 0x7efa
100017c5c:	ja	0x100017d2d
100017c62:	mov	r12, rbx
100017c65:	lea	rax, [rip + 0x2331c]
100017c6c:	cmp	dword ptr [rax], r8d
100017c6f:	jbe	0x100017c7b
100017c71:	lea	rax, [rip + 0x23310]
100017c78:	mov	dword ptr [rax], r8d
100017c7b:	mov	edi, r14d
100017c7e:	call	0x1000179fe
100017c83:	mov	ebx, eax
100017c85:	mov	eax, dword ptr [rip + 0x450d5]
100017c8b:	cmp	ebx, eax
100017c8d:	cmova	ebx, eax
100017c90:	mov	edi, dword ptr [r12]
100017c94:	cmp	ebx, 0x3
100017c97:	jb	0x100017d2a
100017c9d:	lea	rax, [rip + 0x232dc]
100017ca4:	sub	edi, dword ptr [rax]
100017ca6:	lea	esi, [rbx - 0x3]
100017ca9:	call	0x100019118
100017cae:	mov	r8d, dword ptr [rip + 0x450ab]
100017cb5:	sub	r8d, ebx
100017cb8:	mov	dword ptr [rip + 0x450a1], r8d
100017cbf:	cmp	r8d, 0x3
100017cc3:	jb	0x100017dc4
100017cc9:	cmp	ebx, dword ptr [rip + 0x4508d]
100017ccf:	ja	0x100017dc4
100017cd5:	dec	ebx
100017cd7:	mov	edx, dword ptr [r12]
100017cdb:	mov	esi, dword ptr [rip + 0x45087]
100017ce1:	inc	edx
100017ce3:	lea	rcx, [rip + 0x232a6]
100017cea:	shl	esi, 0x5
100017ced:	lea	edi, [rdx + 0x2]
100017cf0:	movzx	edi, byte ptr [r13 + rdi]
100017cf6:	and	esi, 0x7fe0
100017cfc:	xor	esi, edi
100017cfe:	movzx	r14d, word ptr [r15 + 2*rsi]
100017d03:	mov	edi, edx
100017d05:	and	edi, 0x7fff
100017d0b:	mov	word ptr [rcx + 2*rdi], r14w
100017d10:	mov	word ptr [r15 + 2*rsi], dx
100017d15:	inc	edx
100017d17:	dec	ebx
100017d19:	jne	0x100017cea
100017d1b:	mov	dword ptr [rip + 0x45047], esi
100017d21:	mov	rbx, r12
100017d24:	mov	dword ptr [r12], edx
100017d28:	jmp	0x100017d5a
100017d2a:	mov	rbx, r12
100017d2d:	mov	eax, edi
100017d2f:	movzx	esi, byte ptr [r13 + rax]
100017d35:	xor	edi, edi
100017d37:	call	0x100019118
100017d3c:	mov	r8d, dword ptr [rip + 0x4501d]
100017d43:	dec	r8d
100017d46:	mov	dword ptr [rip + 0x45013], r8d
100017d4d:	mov	edx, dword ptr [rbx]
100017d4f:	inc	edx
100017d51:	mov	dword ptr [rbx], edx
100017d53:	lea	rcx, [rip + 0x23236]
100017d5a:	test	eax, eax
100017d5c:	je	0x100017d9a
100017d5e:	lea	r12, [rip + 0x13203]
100017d65:	mov	rax, qword ptr [r12]
100017d69:	mov	edi, eax
100017d6b:	add	rdi, r13
100017d6e:	test	rax, rax
100017d71:	mov	ecx, 0x0
100017d76:	cmovs	rdi, rcx
100017d7a:	mov	esi, edx
100017d7c:	sub	rsi, rax
100017d7f:	xor	edx, edx
100017d81:	call	0x1000184c5
100017d86:	lea	rcx, [rip + 0x23203]
100017d8d:	mov	eax, dword ptr [rbx]
100017d8f:	mov	qword ptr [r12], rax
100017d93:	mov	r8d, dword ptr [rip + 0x44fc6]
100017d9a:	cmp	r8d, 0x105
100017da1:	ja	0x100017db6
100017da3:	call	0x1000177b5
100017da8:	lea	rcx, [rip + 0x231e1]
100017daf:	mov	r8d, dword ptr [rip + 0x44faa]
100017db6:	test	r8d, r8d
100017db9:	jne	0x100017c07
100017dbf:	jmp	0x1000180ce
100017dc4:	mov	esi, dword ptr [r12]
100017dc8:	lea	edx, [rsi + rbx]
100017dcb:	mov	dword ptr [r12], edx
100017dcf:	movzx	edi, byte ptr [r13 + rdx]
100017dd5:	shl	edi, 0x5
100017dd8:	lea	esi, [rsi + rbx + 0x1]
100017ddc:	mov	rbx, r12
100017ddf:	movzx	esi, byte ptr [r13 + rsi]
100017de5:	xor	esi, edi
100017de7:	mov	dword ptr [rip + 0x44f7b], esi
100017ded:	jmp	0x100017d53
100017df2:	mov	r8d, dword ptr [rip + 0x44f67]
100017df9:	test	r8d, r8d
100017dfc:	je	0x1000180ce
100017e02:	mov	r14d, 0x2
100017e08:	lea	rbx, [rip + 0x33185]
100017e0f:	lea	r13, [rip + 0x1316a]
100017e16:	xor	eax, eax
100017e18:	mov	qword ptr [rbp - 0x30], rax
100017e1c:	xor	r12d, r12d
100017e1f:	cmp	r8d, 0x3
100017e23:	jb	0x100017e69
100017e25:	mov	eax, dword ptr [rip + 0x44f3d]
100017e2b:	shl	eax, 0x5
100017e2e:	mov	edx, dword ptr [rbx]
100017e30:	lea	esi, [rdx + 0x2]
100017e33:	lea	rcx, [rip + 0x33166]
100017e3a:	movzx	esi, byte ptr [rcx + rsi]
100017e3e:	and	eax, 0x7fe0
100017e43:	xor	eax, esi
100017e45:	mov	dword ptr [rip + 0x44f1d], eax
100017e4b:	movzx	r12d, word ptr [r13 + 2*rax]
100017e51:	mov	word ptr [r13 + 2*rax], dx
100017e57:	and	edx, 0x7fff
100017e5d:	lea	rax, [rip + 0x2312c]
100017e64:	mov	word ptr [rax + 2*rdx], r12w
100017e69:	lea	rax, [rip + 0x33120]
100017e70:	mov	dword ptr [rax], r14d
100017e73:	lea	rax, [rip + 0x23106]
100017e7a:	mov	r15d, dword ptr [rax]
100017e7d:	test	r12d, r12d
100017e80:	je	0x100017ee9
100017e82:	cmp	r14d, dword ptr [rip + 0x44ed3]
100017e89:	jae	0x100017ee9
100017e8b:	mov	eax, dword ptr [rbx]
100017e8d:	sub	eax, r12d
100017e90:	cmp	eax, 0x7efa
100017e95:	ja	0x100017ee9
100017e97:	lea	rax, [rip + 0x230ea]
100017e9e:	cmp	dword ptr [rax], r8d
100017ea1:	jbe	0x100017ead
100017ea3:	lea	rax, [rip + 0x230de]
100017eaa:	mov	dword ptr [rax], r8d
100017ead:	mov	edi, r12d
100017eb0:	call	0x1000179fe
100017eb5:	mov	r14d, eax
100017eb8:	mov	r8d, dword ptr [rip + 0x44ea1]
100017ebf:	cmp	eax, r8d
100017ec2:	cmova	r14d, r8d
100017ec6:	cmp	r14d, 0x3
100017eca:	jne	0x100017eef
100017ecc:	mov	eax, dword ptr [rbx]
100017ece:	lea	rcx, [rip + 0x230ab]
100017ed5:	sub	eax, dword ptr [rcx]
100017ed7:	xor	r14d, r14d
100017eda:	cmp	eax, 0x1000
100017edf:	seta	r14b
100017ee3:	xor	r14d, 0x3
100017ee7:	jmp	0x100017eef
100017ee9:	mov	r14d, 0x2
100017eef:	lea	rax, [rip + 0x3309a]
100017ef6:	mov	esi, dword ptr [rax]
100017ef8:	cmp	esi, 0x3
100017efb:	jb	0x100018008
100017f01:	cmp	r14d, esi
100017f04:	ja	0x100018008
100017f0a:	mov	eax, dword ptr [rbx]
100017f0c:	mov	r14, rbx
100017f0f:	lea	ebx, [rax + r8 - 0x3]
100017f14:	not	r15d
100017f17:	add	r15d, eax
100017f1a:	add	esi, -0x3
100017f1d:	mov	edi, r15d
100017f20:	call	0x100019118
100017f25:	lea	rcx, [rip + 0x33064]
100017f2c:	mov	esi, dword ptr [rcx]
100017f2e:	mov	r8d, dword ptr [rip + 0x44e2b]
100017f35:	sub	r8d, esi
100017f38:	inc	r8d
100017f3b:	mov	dword ptr [rip + 0x44e1e], r8d
100017f42:	add	esi, -0x2
100017f45:	mov	dword ptr [rcx], esi
100017f47:	mov	edx, dword ptr [r14]
100017f4a:	inc	edx
100017f4c:	lea	r9, [rip + 0x3304d]
100017f53:	lea	r10, [rip + 0x23036]
100017f5a:	cmp	edx, ebx
100017f5c:	ja	0x100017f96
100017f5e:	mov	edi, dword ptr [rip + 0x44e04]
100017f64:	shl	edi, 0x5
100017f67:	lea	ecx, [rdx + 0x2]
100017f6a:	movzx	ecx, byte ptr [r9 + rcx]
100017f6f:	and	edi, 0x7fe0
100017f75:	xor	edi, ecx
100017f77:	mov	dword ptr [rip + 0x44deb], edi
100017f7d:	movzx	r12d, word ptr [r13 + 2*rdi]
100017f83:	mov	ecx, edx
100017f85:	and	ecx, 0x7fff
100017f8b:	mov	word ptr [r10 + 2*rcx], r12w
100017f90:	mov	word ptr [r13 + 2*rdi], dx
100017f96:	inc	edx
100017f98:	dec	esi
100017f9a:	jne	0x100017f5a
100017f9c:	lea	rcx, [rip + 0x32fed]
100017fa3:	mov	dword ptr [rcx], 0x0
100017fa9:	lea	rbx, [rip + 0x32fe4]
100017fb0:	mov	dword ptr [rbx], edx
100017fb2:	mov	r14d, 0x2
100017fb8:	mov	r15b, 0x1
100017fbb:	test	eax, eax
100017fbd:	je	0x10001805d
100017fc3:	lea	r15, [rip + 0x12f9e]
100017fca:	mov	rax, qword ptr [r15]
100017fcd:	mov	edi, eax
100017fcf:	add	rdi, qword ptr [rip + 0xc05a]
100017fd6:	xor	esi, esi
100017fd8:	test	rax, rax
100017fdb:	mov	ecx, 0x0
100017fe0:	mov	qword ptr [rbp - 0x30], rcx
100017fe4:	cmovs	rdi, rsi
100017fe8:	mov	esi, edx
100017fea:	sub	rsi, rax
100017fed:	xor	edx, edx
100017fef:	call	0x1000184c5
100017ff4:	mov	eax, dword ptr [rbx]
100017ff6:	mov	qword ptr [r15], rax
100017ff9:	mov	r15b, 0x1
100017ffc:	mov	r8d, dword ptr [rip + 0x44d5d]
100018003:	jmp	0x100018095
100018008:	mov	eax, dword ptr [rbx]
10001800a:	cmp	dword ptr [rbp - 0x30], 0x0
10001800e:	je	0x100018065
100018010:	dec	eax
100018012:	lea	rbx, [rip + 0x32f87]
100018019:	movzx	esi, byte ptr [rbx + rax]
10001801d:	xor	edi, edi
10001801f:	call	0x100019118
100018024:	test	eax, eax
100018026:	je	0x10001806b
100018028:	lea	r15, [rip + 0x12f39]
10001802f:	mov	rax, qword ptr [r15]
100018032:	mov	edi, eax
100018034:	add	rdi, rbx
100018037:	test	rax, rax
10001803a:	mov	ecx, 0x0
10001803f:	cmovs	rdi, rcx
100018043:	lea	rbx, [rip + 0x32f4a]
10001804a:	mov	esi, dword ptr [rbx]
10001804c:	sub	rsi, rax
10001804f:	xor	edx, edx
100018051:	call	0x1000184c5
100018056:	mov	eax, dword ptr [rbx]
100018058:	mov	qword ptr [r15], rax
10001805b:	jmp	0x100018074
10001805d:	xor	eax, eax
10001805f:	mov	qword ptr [rbp - 0x30], rax
100018063:	jmp	0x100018095
100018065:	inc	eax
100018067:	mov	dword ptr [rbx], eax
100018069:	jmp	0x10001807f
10001806b:	lea	rbx, [rip + 0x32f22]
100018072:	mov	eax, dword ptr [rbx]
100018074:	inc	eax
100018076:	mov	dword ptr [rbx], eax
100018078:	mov	r8d, dword ptr [rip + 0x44ce1]
10001807f:	dec	r8d
100018082:	mov	dword ptr [rip + 0x44cd7], r8d
100018089:	mov	eax, 0x1
10001808e:	mov	qword ptr [rbp - 0x30], rax
100018092:	xor	r15d, r15d
100018095:	cmp	r8d, 0x105
10001809c:	ja	0x1000180aa
10001809e:	call	0x1000177b5
1000180a3:	mov	r8d, dword ptr [rip + 0x44cb6]
1000180aa:	test	r8d, r8d
1000180ad:	jne	0x100017e1f
1000180b3:	test	r15b, r15b
1000180b6:	jne	0x1000180ce
1000180b8:	mov	eax, dword ptr [rbx]
1000180ba:	dec	eax
1000180bc:	lea	rcx, [rip + 0x32edd]
1000180c3:	movzx	esi, byte ptr [rcx + rax]
1000180c7:	xor	edi, edi
1000180c9:	call	0x100019118
1000180ce:	lea	rax, [rip + 0x12e93]
1000180d5:	mov	rax, qword ptr [rax]
1000180d8:	mov	ecx, eax
1000180da:	add	rcx, qword ptr [rip + 0xbf4f]
1000180e1:	xor	edi, edi
1000180e3:	test	rax, rax
1000180e6:	cmovns	rdi, rcx
1000180ea:	lea	rcx, [rip + 0x32ea3]
1000180f1:	mov	esi, dword ptr [rcx]
1000180f3:	sub	rsi, rax
1000180f6:	mov	edx, 0x1
1000180fb:	add	rsp, 0x8
1000180ff:	pop	rbx
100018100:	pop	r12
100018102:	pop	r13
100018104:	pop	r14
100018106:	pop	r15
100018108:	pop	rbp
100018109:	jmp	0x1000184c5
10001810e:	push	rbp
10001810f:	mov	rbp, rsp
100018112:	push	r15
100018114:	push	r14
100018116:	push	r13
100018118:	push	r12
10001811a:	push	rbx
10001811b:	push	rax
10001811c:	mov	qword ptr [rip + 0x44c4d], rdi
100018123:	mov	qword ptr [rip + 0x44c4e], rsi
10001812a:	xor	r15d, r15d
10001812d:	mov	qword ptr [rip + 0x44c4c], r15
100018134:	mov	qword ptr [rip + 0x44c4d], r15
10001813b:	cmp	word ptr [rip + 0x44c4f], 0x0
100018143:	je	0x100018154
100018145:	add	rsp, 0x8
100018149:	pop	rbx
10001814a:	pop	r12
10001814c:	pop	r13
10001814e:	pop	r14
100018150:	pop	r15
100018152:	pop	rbp
100018153:	ret
100018154:	lea	r12, [rip + 0x44cb5]
10001815b:	lea	r13, [rip + 0x1134e]
100018162:	xor	r14d, r14d
100018165:	mov	dword ptr [r12 + 4*r14], r15d
100018169:	mov	ecx, dword ptr [r13 + 4*r14]
10001816e:	cmp	ecx, 0x1f
100018171:	je	0x1000181a9
100018173:	mov	ebx, 0x1
100018178:	shl	ebx, cl
10001817a:	movsxd	rdi, r15d
10001817d:	test	ebx, ebx
10001817f:	mov	eax, 0x1
100018184:	cmovle	ebx, eax
100018187:	lea	rax, [rip + 0x44d02]
10001818e:	add	rdi, rax
100018191:	mov	esi, r14d
100018194:	mov	rdx, rbx
100018197:	call	0x10001985a ## symbol stub for: _memset
10001819c:	neg	ebx
10001819e:	xor	eax, eax
1000181a0:	dec	eax
1000181a2:	cmp	ebx, eax
1000181a4:	jne	0x1000181a0
1000181a6:	sub	r15d, eax
1000181a9:	inc	r14
1000181ac:	cmp	r14, 0x1c
1000181b0:	jne	0x100018165
1000181b2:	movsxd	rax, r15d
1000181b5:	lea	rcx, [rip + 0x44cd4]
1000181bc:	mov	byte ptr [rax + rcx - 0x1], 0x1c
1000181c1:	xor	r14d, r14d
1000181c4:	lea	r15, [rip + 0x44dc5]
1000181cb:	lea	r12, [rip + 0x1135e]
1000181d2:	xor	r13d, r13d
1000181d5:	mov	dword ptr [r15 + 4*r14], r13d
1000181d9:	mov	ecx, dword ptr [r12 + 4*r14]
1000181dd:	cmp	ecx, 0x1f
1000181e0:	je	0x100018218
1000181e2:	mov	ebx, 0x1
1000181e7:	shl	ebx, cl
1000181e9:	movsxd	rdi, r13d
1000181ec:	test	ebx, ebx
1000181ee:	mov	eax, 0x1
1000181f3:	cmovle	ebx, eax
1000181f6:	lea	rax, [rip + 0x44e13]
1000181fd:	add	rdi, rax
100018200:	mov	esi, r14d
100018203:	mov	rdx, rbx
100018206:	call	0x10001985a ## symbol stub for: _memset
10001820b:	neg	ebx
10001820d:	xor	eax, eax
10001820f:	dec	eax
100018211:	cmp	ebx, eax
100018213:	jne	0x10001820f
100018215:	sub	r13d, eax
100018218:	inc	r14
10001821b:	cmp	r14, 0x10
10001821f:	jne	0x1000181d5
100018221:	sar	r13d, 0x7
100018225:	mov	r14d, 0x10
10001822b:	mov	eax, r13d
10001822e:	shl	eax, 0x7
100018231:	mov	dword ptr [r15 + 4*r14], eax
100018235:	mov	ecx, dword ptr [r12 + 4*r14]
100018239:	cmp	ecx, 0x26
10001823c:	je	0x10001827c
10001823e:	add	cl, -0x7
100018241:	mov	ebx, 0x1
100018246:	shl	ebx, cl
100018248:	movsxd	rax, r13d
10001824b:	test	ebx, ebx
10001824d:	mov	ecx, 0x1
100018252:	cmovle	ebx, ecx
100018255:	lea	rcx, [rip + 0x44db4]
10001825c:	lea	rdi, [rax + rcx + 0x100]
100018264:	mov	esi, r14d
100018267:	mov	rdx, rbx
10001826a:	call	0x10001985a ## symbol stub for: _memset
10001826f:	neg	ebx
100018271:	xor	eax, eax
100018273:	dec	eax
100018275:	cmp	ebx, eax
100018277:	jne	0x100018273
100018279:	sub	r13d, eax
10001827c:	inc	r14
10001827f:	cmp	r14, 0x1e
100018283:	jne	0x10001822b
100018285:	xorps	xmm0, xmm0
100018288:	movaps	xmmword ptr [rip + 0x44f91], xmm0
10001828f:	movaps	xmmword ptr [rip + 0x44f7a], xmm0
100018296:	xor	ecx, ecx
100018298:	lea	rax, [rip + 0x44f91]
10001829f:	mov	word ptr [rax + 4*rcx + 0x2], 0x8
1000182a6:	inc	rcx
1000182a9:	cmp	rcx, 0x90
1000182b0:	jne	0x10001829f
1000182b2:	mov	word ptr [rip + 0x44f65], 0x90
1000182bb:	xor	ecx, ecx
1000182bd:	mov	word ptr [rax + 4*rcx + 0x242], 0x9
1000182c7:	inc	rcx
1000182ca:	cmp	rcx, 0x70
1000182ce:	jne	0x1000182bd
1000182d0:	mov	word ptr [rip + 0x44f49], 0x70
1000182d9:	xor	ecx, ecx
1000182db:	mov	word ptr [rax + 4*rcx + 0x402], 0x7
1000182e5:	inc	rcx
1000182e8:	cmp	rcx, 0x18
1000182ec:	jne	0x1000182db
1000182ee:	mov	dword ptr [rip + 0x44f26], 0x980018
1000182f8:	mov	ax, 0x8
1000182fc:	mov	word ptr [rip + 0x4538f], ax
100018303:	lea	rdi, [rip + 0x44f26]
10001830a:	mov	word ptr [rip + 0x45385], ax
100018311:	mov	word ptr [rip + 0x45382], ax
100018318:	mov	word ptr [rip + 0x4537f], ax
10001831f:	mov	word ptr [rip + 0x4537c], ax
100018326:	mov	word ptr [rip + 0x45379], ax
10001832d:	mov	word ptr [rip + 0x45376], ax
100018334:	mov	word ptr [rip + 0x45373], ax
10001833b:	mov	esi, 0x11f
100018340:	call	0x100018391
100018345:	xor	eax, eax
100018347:	lea	rcx, [rip + 0x44a42]
10001834e:	mov	word ptr [rcx + 4*rax + 0x2], 0x5
100018355:	mov	edx, 0x6
10001835a:	mov	esi, eax
10001835c:	xor	ebx, ebx
10001835e:	mov	edi, esi
100018360:	and	edi, 0x1
100018363:	or	edi, ebx
100018365:	shr	esi
100018367:	lea	ebx, [rdi + rdi]
10001836a:	dec	edx
10001836c:	cmp	edx, 0x1
10001836f:	ja	0x10001835e
100018371:	mov	word ptr [rcx + 4*rax], di
100018375:	inc	rax
100018378:	cmp	rax, 0x1e
10001837c:	jne	0x10001834e
10001837e:	add	rsp, 0x8
100018382:	pop	rbx
100018383:	pop	r12
100018385:	pop	r13
100018387:	pop	r14
100018389:	pop	r15
10001838b:	pop	rbp
10001838c:	jmp	0x100018439
100018391:	push	rbp
100018392:	mov	rbp, rsp
100018395:	sub	rsp, 0x30
100018399:	mov	rax, qword ptr [rip + 0xbc70] ## literal pool symbol address: ___stack_chk_guard
1000183a0:	mov	rax, qword ptr [rax]
1000183a3:	mov	qword ptr [rbp - 0x8], rax
1000183a7:	xor	eax, eax
1000183a9:	lea	r8, [rip + 0x44e60]
1000183b0:	xor	edx, edx
1000183b2:	and	edx, 0xfffe
1000183b8:	movzx	ecx, word ptr [rax + r8]
1000183bd:	add	ecx, edx
1000183bf:	add	ecx, ecx
1000183c1:	mov	word ptr [rbp + rax - 0x2e], cx
1000183c6:	add	rax, 0x2
1000183ca:	mov	edx, ecx
1000183cc:	cmp	rax, 0x1e
1000183d0:	jne	0x1000183b2
1000183d2:	test	esi, esi
1000183d4:	js	0x10001841e
1000183d6:	inc	esi
1000183d8:	xor	r8d, r8d
1000183db:	movzx	ecx, word ptr [rdi + 4*r8 + 0x2]
1000183e1:	test	ecx, ecx
1000183e3:	je	0x100018416
1000183e5:	mov	r9d, ecx
1000183e8:	movzx	eax, word ptr [rbp + 2*r9 - 0x30]
1000183ee:	lea	edx, [rax + 0x1]
1000183f1:	mov	word ptr [rbp + 2*r9 - 0x30], dx
1000183f7:	inc	ecx
1000183f9:	xor	r9d, r9d
1000183fc:	mov	edx, eax
1000183fe:	and	edx, 0x1
100018401:	or	edx, r9d
100018404:	shr	eax
100018406:	lea	r9d, [rdx + rdx]
10001840a:	dec	ecx
10001840c:	cmp	ecx, 0x1
10001840f:	jg	0x1000183fc
100018411:	mov	word ptr [rdi + 4*r8], dx
100018416:	inc	r8
100018419:	cmp	r8, rsi
10001841c:	jne	0x1000183db
10001841e:	mov	rax, qword ptr [rip + 0xbbeb] ## literal pool symbol address: ___stack_chk_guard
100018425:	mov	rax, qword ptr [rax]
100018428:	cmp	rax, qword ptr [rbp - 0x8]
10001842c:	jne	0x100018434
10001842e:	add	rsp, 0x30
100018432:	pop	rbp
100018433:	ret
100018434:	call	0x100019776 ## symbol stub for: ___stack_chk_fail
100018439:	push	rbp
10001843a:	mov	rbp, rsp
10001843d:	xor	eax, eax
10001843f:	lea	rcx, [rip + 0x4629a]
100018446:	mov	word ptr [rax + rcx], 0x0
10001844c:	add	rax, 0x4
100018450:	cmp	rax, 0x478
100018456:	jne	0x100018446
100018458:	xor	eax, eax
10001845a:	lea	rcx, [rip + 0x46b7f]
100018461:	mov	word ptr [rax + rcx], 0x0
100018467:	add	rax, 0x4
10001846b:	cmp	rax, 0x78
10001846f:	jne	0x100018461
100018471:	xor	eax, eax
100018473:	lea	rcx, [rip + 0x5eca6]
10001847a:	mov	word ptr [rax + rcx], 0x0
100018480:	add	rax, 0x4
100018484:	cmp	rax, 0x4c
100018488:	jne	0x10001847a
10001848a:	mov	word ptr [rip + 0x4664d], 0x1
100018493:	xor	eax, eax
100018495:	mov	qword ptr [rip + 0x46234], rax
10001849c:	mov	qword ptr [rip + 0x46225], rax
1000184a3:	mov	dword ptr [rip + 0x46217], eax
1000184a9:	mov	dword ptr [rip + 0x5ec41], eax
1000184af:	mov	dword ptr [rip + 0x4ec2b], eax
1000184b5:	mov	byte ptr [rip + 0x451f4], 0x0
1000184bc:	mov	byte ptr [rip + 0x5ec31], 0x1
1000184c3:	pop	rbp
1000184c4:	ret
1000184c5:	push	rbp
1000184c6:	mov	rbp, rsp
1000184c9:	push	r15
1000184cb:	push	r14
1000184cd:	push	r13
1000184cf:	push	r12
1000184d1:	push	rbx
1000184d2:	sub	rsp, 0x18
1000184d6:	mov	ebx, edx
1000184d8:	mov	r15, rsi
1000184db:	mov	qword ptr [rbp - 0x38], rdi
1000184df:	mov	al, byte ptr [rip + 0x451cb]
1000184e5:	mov	ecx, dword ptr [rip + 0x461d5]
1000184eb:	lea	rdx, [rip + 0x451ce]
1000184f2:	mov	byte ptr [rcx + rdx], al
1000184f5:	mov	rax, qword ptr [rip + 0x44874]
1000184fc:	cmp	word ptr [rax], -0x1
100018500:	jne	0x100018565
100018502:	mov	edx, 0xf3ffc07f
100018507:	xor	esi, esi
100018509:	lea	rcx, [rip + 0x461d0]
100018510:	test	dl, 0x1
100018513:	je	0x10001851c
100018515:	cmp	word ptr [rsi + rcx], 0x0
10001851a:	jne	0x100018560
10001851c:	shr	rdx
10001851f:	add	rsi, 0x4
100018523:	cmp	rsi, 0x80
10001852a:	jne	0x100018510
10001852c:	mov	word ptr [rax], 0x1
100018531:	movzx	edx, word ptr [rip + 0x461d0]
100018538:	or	dx, word ptr [rip + 0x461c5]
10001853f:	or	dx, word ptr [rip + 0x461ce]
100018546:	jne	0x100018565
100018548:	mov	edx, 0x20
10001854d:	cmp	word ptr [rcx + 4*rdx], 0x0
100018552:	jne	0x100018565
100018554:	inc	rdx
100018557:	cmp	rdx, 0x100
10001855e:	jne	0x10001854d
100018560:	mov	word ptr [rax], 0x0
100018565:	lea	rdi, [rip + 0x1103c]
10001856c:	call	0x10001888a
100018571:	lea	rdi, [rip + 0x11058]
100018578:	call	0x10001888a
10001857d:	mov	esi, dword ptr [rip + 0x11049]
100018583:	lea	rdi, [rip + 0x46156]
10001858a:	call	0x100019390
10001858f:	mov	esi, dword ptr [rip + 0x1105f]
100018595:	lea	rdi, [rip + 0x46a44]
10001859c:	call	0x100019390
1000185a1:	lea	rdi, [rip + 0x11050]
1000185a8:	call	0x10001888a
1000185ad:	mov	r14d, 0x12
1000185b3:	lea	rcx, [rip + 0x20f6]
1000185ba:	lea	rdx, [rip + 0x5eb5f]
1000185c1:	mov	qword ptr [rbp - 0x30], rbx
1000185c5:	mov	eax, r14d
1000185c8:	movzx	eax, byte ptr [rax + rcx]
1000185cc:	cmp	word ptr [rdx + 4*rax + 0x2], 0x0
1000185d2:	jne	0x1000185ec
1000185d4:	lea	eax, [r14 - 0x1]
1000185d8:	cmp	r14d, 0x3
1000185dc:	mov	r14d, eax
1000185df:	ja	0x1000185c5
1000185e1:	mov	rbx, r15
1000185e4:	mov	r14d, 0x2
1000185ea:	jmp	0x1000185ef
1000185ec:	mov	rbx, r15
1000185ef:	lea	eax, [r14 + 2*r14 + 0x11]
1000185f4:	cdqe
1000185f6:	mov	rcx, qword ptr [rip + 0x460cb]
1000185fd:	lea	rdx, [rcx + rax]
100018601:	lea	r15, [rcx + rax + 0xa]
100018606:	shr	r15, 0x3
10001860a:	mov	r12, qword ptr [rip + 0x460bf]
100018611:	add	r12, 0xa
100018615:	shr	r12, 0x3
100018619:	cmp	r12, r15
10001861c:	mov	r13, r12
10001861f:	cmova	r13, r15
100018623:	mov	qword ptr [rip + 0x4609e], rdx
10001862a:	mov	rax, qword ptr [rip + 0x4474f]
100018631:	or	rax, qword ptr [rip + 0x44750]
100018638:	jne	0x10001869f
10001863a:	cmp	qword ptr [rip + 0x44736], 0x0
100018642:	je	0x10001869f
100018644:	cmp	dword ptr [rbp - 0x30], 0x0
100018648:	je	0x10001869f
10001864a:	cmp	r13, rbx
10001864d:	jb	0x10001869f
10001864f:	call	0x100011270
100018654:	test	eax, eax
100018656:	je	0x10001869f
100018658:	lea	rax, [rip + 0x11129]
10001865f:	cmp	dword ptr [rax], 0x0
100018662:	jne	0x10001869f
100018664:	mov	rdi, qword ptr [rbp - 0x38]
100018668:	test	rdi, rdi
10001866b:	jne	0x10001867d
10001866d:	lea	rdi, [rip + 0xb622] ## literal pool for: "block vanished"
100018674:	call	0x100003c62
100018679:	mov	rdi, qword ptr [rbp - 0x38]
10001867d:	mov	esi, ebx
10001867f:	xor	edx, edx
100018681:	call	0x100018c90
100018686:	mov	qword ptr [rip + 0x446fb], rbx
10001868d:	mov	rax, qword ptr [rip + 0x446e4]
100018694:	mov	dword ptr [rax], 0x0
10001869a:	jmp	0x1000187f0
10001869f:	mov	rax, qword ptr [rbp - 0x38]
1000186a3:	test	rax, rax
1000186a6:	je	0x10001870b
1000186a8:	mov	rcx, rbx
1000186ab:	add	rbx, 0x4
1000186af:	cmp	rbx, r13
1000186b2:	ja	0x10001870b
1000186b4:	mov	r14, qword ptr [rbp - 0x30]
1000186b8:	mov	edi, r14d
1000186bb:	mov	r12, rcx
1000186be:	mov	esi, 0x3
1000186c3:	mov	r15, rax
1000186c6:	call	0x100018e37
1000186cb:	mov	rax, qword ptr [rip + 0x446ae]
1000186d2:	add	rax, 0xa
1000186d6:	add	rbx, qword ptr [rip + 0x446ab]
1000186dd:	shr	rax, 0x3
1000186e1:	add	rbx, rax
1000186e4:	mov	qword ptr [rip + 0x4469d], rbx
1000186eb:	mov	qword ptr [rip + 0x4468a], 0x0
1000186f6:	mov	rdi, r15
1000186f9:	mov	esi, r12d
1000186fc:	mov	edx, 0x1
100018701:	call	0x100018c90
100018706:	jmp	0x100018846
10001870b:	cmp	r12, r15
10001870e:	jbe	0x1000187f6
100018714:	mov	rax, qword ptr [rbp - 0x30]
100018718:	lea	edi, [rax + 0x4]
10001871b:	mov	esi, 0x3
100018720:	call	0x100018e37
100018725:	mov	r12d, dword ptr [rip + 0x10ea0]
10001872c:	mov	ebx, dword ptr [rip + 0x10ec2]
100018732:	lea	edi, [r12 - 0x100]
10001873a:	mov	esi, 0x5
10001873f:	call	0x100018e37
100018744:	mov	dword ptr [rbp - 0x38], ebx
100018747:	mov	edi, ebx
100018749:	mov	esi, 0x5
10001874e:	call	0x100018e37
100018753:	lea	edi, [r14 - 0x3]
100018757:	mov	esi, 0x4
10001875c:	call	0x100018e37
100018761:	test	r14d, r14d
100018764:	lea	r13, [rip + 0x1f45]
10001876b:	lea	r15, [rip + 0x5e9ae]
100018772:	js	0x100018796
100018774:	inc	r14d
100018777:	xor	ebx, ebx
100018779:	movzx	eax, byte ptr [rbx + r13]
10001877e:	movzx	edi, word ptr [r15 + 4*rax + 0x2]
100018784:	mov	esi, 0x3
100018789:	call	0x100018e37
10001878e:	inc	rbx
100018791:	cmp	r14, rbx
100018794:	jne	0x100018779
100018796:	lea	r13, [rip + 0x45f43]
10001879d:	mov	rdi, r13
1000187a0:	mov	esi, r12d
1000187a3:	call	0x100019477
1000187a8:	lea	rbx, [rip + 0x46831]
1000187af:	mov	rdi, rbx
1000187b2:	mov	esi, dword ptr [rbp - 0x38]
1000187b5:	call	0x100019477
1000187ba:	mov	rdi, r13
1000187bd:	mov	rsi, rbx
1000187c0:	call	0x100018ee0
1000187c5:	mov	rax, qword ptr [rip + 0x45efc]
1000187cc:	mov	rcx, qword ptr [rip + 0x445ad]
1000187d3:	lea	rax, [rax + rcx + 0x3]
1000187d8:	mov	rcx, rax
1000187db:	shr	rcx, 0x3
1000187df:	add	qword ptr [rip + 0x445a2], rcx
1000187e6:	and	eax, 0x7
1000187e9:	mov	qword ptr [rip + 0x44590], rax
1000187f0:	mov	r14, qword ptr [rbp - 0x30]
1000187f4:	jmp	0x100018846
1000187f6:	mov	r14, qword ptr [rbp - 0x30]
1000187fa:	lea	edi, [r14 + 0x2]
1000187fe:	mov	esi, 0x3
100018803:	call	0x100018e37
100018808:	lea	rdi, [rip + 0x44a21]
10001880f:	lea	rsi, [rip + 0x4457a]
100018816:	call	0x100018ee0
10001881b:	mov	rax, qword ptr [rip + 0x45eae]
100018822:	mov	rcx, qword ptr [rip + 0x44557]
100018829:	lea	rax, [rax + rcx + 0x3]
10001882e:	mov	rcx, rax
100018831:	shr	rcx, 0x3
100018835:	add	qword ptr [rip + 0x4454c], rcx
10001883c:	and	eax, 0x7
10001883f:	mov	qword ptr [rip + 0x4453a], rax
100018846:	call	0x100018439
10001884b:	test	r14d, r14d
10001884e:	je	0x100018869
100018850:	call	0x100019046
100018855:	mov	rax, qword ptr [rip + 0x44524]
10001885c:	add	rax, 0x7
100018860:	mov	qword ptr [rip + 0x44519], rax
100018867:	jmp	0x100018870
100018869:	mov	rax, qword ptr [rip + 0x44510]
100018870:	shr	rax, 0x3
100018874:	add	rax, qword ptr [rip + 0x4450d]
10001887b:	add	rsp, 0x18
10001887f:	pop	rbx
100018880:	pop	r12
100018882:	pop	r13
100018884:	pop	r14
100018886:	pop	r15
100018888:	pop	rbp
100018889:	ret
10001888a:	push	rbp
10001888b:	mov	rbp, rsp
10001888e:	push	r15
100018890:	push	r14
100018892:	push	r13
100018894:	push	r12
100018896:	push	rbx
100018897:	sub	rsp, 0x28
10001889b:	mov	r12, qword ptr [rdi]
10001889e:	mov	r10, qword ptr [rdi + 0x8]
1000188a2:	mov	r13d, dword ptr [rdi + 0x1c]
1000188a6:	mov	dword ptr [rip + 0x5e90c], 0x0
1000188b0:	mov	dword ptr [rip + 0x5e906], 0x23d
1000188ba:	xor	r9d, r9d
1000188bd:	test	r13d, r13d
1000188c0:	mov	qword ptr [rbp - 0x48], rdi
1000188c4:	mov	eax, 0xffffffff
1000188c9:	jle	0x100018928
1000188cb:	xor	edx, edx
1000188cd:	lea	r8, [rip + 0x5e8fc]
1000188d4:	lea	rsi, [rip + 0x5f1f5]
1000188db:	xor	ebx, ebx
1000188dd:	cmp	word ptr [r12 + 4*rbx], 0x0
1000188e3:	je	0x1000188fd
1000188e5:	movsxd	rcx, edx
1000188e8:	inc	edx
1000188ea:	mov	dword ptr [rip + 0x5e8cc], edx
1000188f0:	mov	dword ptr [r8 + 4*rcx + 0x4], ebx
1000188f5:	mov	byte ptr [rbx + rsi], 0x0
1000188f9:	mov	eax, ebx
1000188fb:	jmp	0x100018905
1000188fd:	mov	word ptr [r12 + 4*rbx + 0x2], 0x0
100018905:	inc	rbx
100018908:	cmp	r13, rbx
10001890b:	jne	0x1000188dd
10001890d:	cmp	edx, 0x1
100018910:	jle	0x10001892a
100018912:	mov	qword ptr [rbp - 0x38], rax
100018916:	mov	dword ptr [rdi + 0x24], eax
100018919:	mov	ebx, edx
10001891b:	shr	ebx
10001891d:	jne	0x1000189aa
100018923:	jmp	0x1000189c4
100018928:	xor	edx, edx
10001892a:	mov	r8, qword ptr [rip + 0x45d97]
100018931:	movsxd	rcx, edx
100018934:	mov	edx, 0x2
100018939:	sub	rdx, rcx
10001893c:	lea	rsi, [rip + 0x5e88d]
100018943:	lea	rbx, [rsi + 4*rcx + 0x4]
100018948:	lea	r11, [rip + 0x5f181]
10001894f:	xor	esi, esi
100018951:	lea	ecx, [rax + 0x1]
100018954:	cmp	eax, 0x2
100018957:	cmovl	eax, ecx
10001895a:	cmovge	ecx, r9d
10001895e:	mov	dword ptr [rbx + 4*rsi], ecx
100018961:	movsxd	rcx, ecx
100018964:	mov	word ptr [r12 + 4*rcx], 0x1
10001896b:	mov	byte ptr [rcx + r11], 0x0
100018970:	test	r10, r10
100018973:	je	0x100018982
100018975:	movzx	ecx, word ptr [r10 + 4*rcx + 0x2]
10001897b:	sub	qword ptr [rip + 0x45d4e], rcx
100018982:	inc	rsi
100018985:	cmp	rdx, rsi
100018988:	jne	0x100018951
10001898a:	mov	dword ptr [rip + 0x5e828], 0x2
100018994:	sub	r8, rsi
100018997:	mov	qword ptr [rip + 0x45d2a], r8
10001899e:	mov	qword ptr [rbp - 0x38], rax
1000189a2:	mov	dword ptr [rdi + 0x24], eax
1000189a5:	mov	ebx, 0x1
1000189aa:	mov	rdi, r12
1000189ad:	mov	esi, ebx
1000189af:	call	0x1000192cb
1000189b4:	lea	eax, [rbx - 0x1]
1000189b7:	cmp	ebx, 0x1
1000189ba:	mov	ebx, eax
1000189bc:	jg	0x1000189aa
1000189be:	mov	edx, dword ptr [rip + 0x5e7f8]
1000189c4:	movsxd	rbx, r13d
1000189c7:	mov	r15, rbx
1000189ca:	movsxd	r14, dword ptr [rip + 0x5e803]
1000189d1:	lea	eax, [rdx - 0x1]
1000189d4:	mov	dword ptr [rip + 0x5e7e2], eax
1000189da:	movsxd	rax, edx
1000189dd:	lea	r13, [rip + 0x5e7ec]
1000189e4:	mov	eax, dword ptr [r13 + 4*rax]
1000189e9:	mov	dword ptr [rip + 0x5e7e5], eax
1000189ef:	mov	rdi, r12
1000189f2:	mov	esi, 0x1
1000189f7:	call	0x1000192cb
1000189fc:	movsxd	rax, dword ptr [rip + 0x5e7d1]
100018a03:	movsxd	rcx, dword ptr [rip + 0x5e7b6]
100018a0a:	mov	dword ptr [r13 + 4*rcx - 0x4], r14d
100018a0f:	lea	rdx, [rcx - 0x2]
100018a13:	mov	dword ptr [rip + 0x5e7a7], edx
100018a19:	mov	dword ptr [r13 + 4*rcx - 0x8], eax
100018a1e:	movzx	ecx, word ptr [r12 + 4*rax]
100018a23:	add	cx, word ptr [r12 + 4*r14]
100018a28:	mov	word ptr [r12 + 4*rbx], cx
100018a2d:	lea	rsi, [rip + 0x5f09c]
100018a34:	movzx	ecx, byte ptr [r14 + rsi]
100018a39:	movzx	edx, byte ptr [rax + rsi]
100018a3d:	cmp	cl, dl
100018a3f:	cmovb	ecx, edx
100018a42:	inc	cl
100018a44:	mov	byte ptr [rbx + rsi], cl
100018a47:	mov	word ptr [r12 + 4*rax + 0x2], bx
100018a4d:	mov	word ptr [r12 + 4*r14 + 0x2], bx
100018a53:	inc	r15
100018a56:	mov	dword ptr [rip + 0x5e778], ebx
100018a5c:	mov	rdi, r12
100018a5f:	mov	esi, 0x1
100018a64:	call	0x1000192cb
100018a69:	mov	edx, dword ptr [rip + 0x5e74d]
100018a6f:	mov	rbx, r15
100018a72:	cmp	edx, 0x1
100018a75:	jg	0x1000189ca
100018a7b:	movsxd	rdi, dword ptr [rip + 0x5e752]
100018a82:	movsxd	rsi, dword ptr [rip + 0x5e737]
100018a89:	lea	rax, [rsi - 0x1]
100018a8d:	mov	dword ptr [rip + 0x5e72d], eax
100018a93:	lea	rdx, [rip + 0x5e736]
100018a9a:	mov	dword ptr [rdx + 4*rsi - 0x4], edi
100018a9e:	mov	rbx, qword ptr [rbp - 0x48]
100018aa2:	mov	r14, qword ptr [rbx]
100018aa5:	mov	rcx, qword ptr [rbx + 0x8]
100018aa9:	mov	qword ptr [rbp - 0x40], rcx
100018aad:	mov	rcx, qword ptr [rbx + 0x10]
100018ab1:	mov	qword ptr [rbp - 0x50], rcx
100018ab5:	mov	ecx, dword ptr [rbx + 0x18]
100018ab8:	mov	dword ptr [rbp - 0x2c], ecx
100018abb:	mov	ecx, dword ptr [rbx + 0x24]
100018abe:	movsxd	r11, dword ptr [rbx + 0x20]
100018ac2:	xorps	xmm0, xmm0
100018ac5:	movaps	xmmword ptr [rip + 0x44754], xmm0
100018acc:	movaps	xmmword ptr [rip + 0x4473d], xmm0
100018ad3:	mov	word ptr [r14 + 4*rdi + 0x2], 0x0
100018adb:	cmp	rsi, 0x23c
100018ae2:	jg	0x100018c76
100018ae8:	mov	rdi, rdx
100018aeb:	mov	r13d, 0x23d
100018af1:	sub	r13d, esi
100018af4:	lea	r15, [rdx + 4*rax + 0x4]
100018af9:	xor	esi, esi
100018afb:	xor	edi, edi
100018afd:	movsxd	r8, dword ptr [r15 + 4*rsi]
100018b01:	movzx	eax, word ptr [r14 + 4*r8 + 0x2]
100018b07:	movzx	ebx, word ptr [r14 + 4*rax + 0x2]
100018b0d:	xor	r9d, r9d
100018b10:	cmp	r11d, ebx
100018b13:	setle	al
100018b16:	jg	0x100018b1d
100018b18:	mov	ebx, r11d
100018b1b:	jmp	0x100018b1f
100018b1d:	inc	ebx
100018b1f:	mov	r9b, al
100018b22:	mov	word ptr [r14 + 4*r8 + 0x2], bx
100018b28:	cmp	r8d, ecx
100018b2b:	jg	0x100018b88
100018b2d:	movsxd	rax, ebx
100018b30:	lea	rdx, [rip + 0x446d9]
100018b37:	inc	word ptr [rdx + 2*rax]
100018b3b:	xor	eax, eax
100018b3d:	cmp	r8d, dword ptr [rbp - 0x2c]
100018b41:	jl	0x100018b52
100018b43:	mov	eax, r8d
100018b46:	sub	eax, dword ptr [rbp - 0x2c]
100018b49:	cdqe
100018b4b:	mov	rdx, qword ptr [rbp - 0x50]
100018b4f:	mov	eax, dword ptr [rdx + 4*rax]
100018b52:	movzx	r10d, word ptr [r14 + 4*r8]
100018b57:	add	ebx, eax
100018b59:	movsxd	rbx, ebx
100018b5c:	imul	rbx, r10
100018b60:	add	qword ptr [rip + 0x45b61], rbx
100018b67:	cmp	qword ptr [rbp - 0x40], 0x0
100018b6c:	je	0x100018b88
100018b6e:	mov	rdx, qword ptr [rbp - 0x40]
100018b72:	movzx	ebx, word ptr [rdx + 4*r8 + 0x2]
100018b78:	cdqe
100018b7a:	add	rax, rbx
100018b7d:	imul	rax, r10
100018b81:	add	qword ptr [rip + 0x45b48], rax
100018b88:	add	edi, r9d
100018b8b:	inc	rsi
100018b8e:	cmp	r13d, esi
100018b91:	jne	0x100018afd
100018b97:	test	edi, edi
100018b99:	lea	r10, [rip + 0x5e630]
100018ba0:	lea	r15, [rip + 0x44669]
100018ba7:	je	0x100018c76
100018bad:	mov	rax, r11
100018bb0:	shl	rax, 0x20
100018bb4:	movabs	r9, offset __mh_execute_header
100018bbe:	add	r9, rax
100018bc1:	lea	r8, [r15 + 2*r11]
100018bc5:	movabs	rbx, -0x100000000
100018bcf:	mov	rsi, r8
100018bd2:	mov	rax, r9
100018bd5:	add	rax, rbx
100018bd8:	movzx	edx, word ptr [rsi - 0x2]
100018bdc:	add	rsi, -0x2
100018be0:	test	dx, dx
100018be3:	je	0x100018bd5
100018be5:	dec	edx
100018be7:	mov	word ptr [rsi], dx
100018bea:	sar	rax, 0x1f
100018bee:	add	word ptr [rax + r15], 0x2
100018bf4:	movzx	eax, word ptr [r15 + 2*r11]
100018bf9:	dec	eax
100018bfb:	mov	word ptr [r15 + 2*r11], ax
100018c00:	lea	edx, [rdi - 0x2]
100018c03:	cmp	edi, 0x2
100018c06:	mov	edi, edx
100018c08:	jg	0x100018bcf
100018c0a:	test	r11d, r11d
100018c0d:	je	0x100018c76
100018c0f:	mov	esi, 0x23d
100018c14:	movzx	edi, ax
100018c17:	movsxd	rax, esi
100018c1a:	lea	rdx, [r10 + 4*rax - 0x4]
100018c1f:	xor	ebx, ebx
100018c21:	test	edi, edi
100018c23:	je	0x100018c61
100018c25:	movsxd	rax, dword ptr [rdx + 4*rbx]
100018c29:	dec	rbx
100018c2c:	cmp	eax, ecx
100018c2e:	jg	0x100018c21
100018c30:	mov	esi, esi
100018c32:	add	rsi, rbx
100018c35:	movzx	edx, word ptr [r14 + 4*rax + 0x2]
100018c3b:	cmp	dx, r11w
100018c3f:	je	0x100018c5d
100018c41:	mov	rbx, r11
100018c44:	sub	rbx, rdx
100018c47:	movzx	edx, word ptr [r14 + 4*rax]
100018c4c:	imul	rdx, rbx
100018c50:	add	qword ptr [rip + 0x45a71], rdx
100018c57:	mov	word ptr [r14 + 4*rax + 0x2], r11w
100018c5d:	dec	edi
100018c5f:	jmp	0x100018c17
100018c61:	lea	rdx, [r11 - 0x1]
100018c65:	test	edx, edx
100018c67:	je	0x100018c76
100018c69:	mov	esi, esi
100018c6b:	movzx	eax, word ptr [r15 + 2*r11 - 0x2]
100018c71:	mov	r11, rdx
100018c74:	jmp	0x100018c14
100018c76:	mov	rdi, r12
100018c79:	mov	rsi, qword ptr [rbp - 0x38]
100018c7d:	add	rsp, 0x28
100018c81:	pop	rbx
100018c82:	pop	r12
100018c84:	pop	r13
100018c86:	pop	r14
100018c88:	pop	r15
100018c8a:	pop	rbp
100018c8b:	jmp	0x100018391
100018c90:	push	rbp
100018c91:	mov	rbp, rsp
100018c94:	push	r15
100018c96:	push	r14
100018c98:	push	r12
100018c9a:	push	rbx
100018c9b:	mov	r14d, edx
100018c9e:	mov	r12d, esi
100018ca1:	mov	r15, rdi
100018ca4:	call	0x100019046
100018ca9:	test	r14d, r14d
100018cac:	je	0x100018d57
100018cb2:	mov	ecx, dword ptr [rip + 0x5e44c]
100018cb8:	mov	eax, dword ptr [rip + 0x5e442]
100018cbe:	dec	eax
100018cc0:	cmp	ecx, eax
100018cc2:	jb	0x100018ce5
100018cc4:	mov	rdi, qword ptr [rip + 0x5e42d]
100018ccb:	lea	rsi, [rip + 0x5e432]
100018cd2:	call	0x100011205
100018cd7:	mov	ecx, dword ptr [rip + 0x5e427]
100018cdd:	mov	eax, dword ptr [rip + 0x5e41d]
100018ce3:	dec	eax
100018ce5:	mov	rdi, qword ptr [rip + 0x5e40c]
100018cec:	lea	edx, [rcx + 0x1]
100018cef:	mov	dword ptr [rip + 0x5e40f], edx
100018cf5:	mov	ecx, ecx
100018cf7:	mov	rbx, r12
100018cfa:	mov	byte ptr [rdi + rcx], bl
100018cfd:	mov	ecx, dword ptr [rip + 0x5e401]
100018d03:	lea	edx, [rcx + 0x1]
100018d06:	mov	dword ptr [rip + 0x5e3f8], edx
100018d0c:	mov	byte ptr [rdi + rcx], bh
100018d0f:	mov	ecx, dword ptr [rip + 0x5e3ef]
100018d15:	cmp	ecx, eax
100018d17:	jb	0x100018d32
100018d19:	lea	rsi, [rip + 0x5e3e4]
100018d20:	call	0x100011205
100018d25:	mov	rdi, qword ptr [rip + 0x5e3cc]
100018d2c:	mov	ecx, dword ptr [rip + 0x5e3d2]
100018d32:	mov	rax, r12
100018d35:	not	eax
100018d37:	lea	edx, [rcx + 0x1]
100018d3a:	mov	dword ptr [rip + 0x5e3c4], edx
100018d40:	mov	ecx, ecx
100018d42:	mov	byte ptr [rdi + rcx], al
100018d45:	mov	ecx, dword ptr [rip + 0x5e3b9]
100018d4b:	lea	edx, [rcx + 0x1]
100018d4e:	mov	dword ptr [rip + 0x5e3b0], edx
100018d54:	mov	byte ptr [rdi + rcx], ah
100018d57:	cmp	dword ptr [rip + 0x5e3aa], 0x0
100018d5e:	je	0x100018dd1
100018d60:	mov	rdi, qword ptr [rip + 0x5e391]
100018d67:	lea	rsi, [rip + 0x5e396]
100018d6e:	call	0x100011205
100018d73:	lea	rax, [rip + 0x10a2e]
100018d7a:	cmp	qword ptr [rax], 0x0
100018d7e:	je	0x100018df7
100018d80:	test	r12d, r12d
100018d83:	je	0x100018e2e
100018d89:	lea	r14, [rip + 0x5e374]
100018d90:	mov	edx, dword ptr [rip + 0x5e36a]
100018d96:	cmp	r12d, edx
100018d99:	cmovb	edx, r12d
100018d9d:	mov	dword ptr [rip + 0x5e361], edx
100018da3:	mov	rdi, qword ptr [rip + 0x5e34e]
100018daa:	mov	rsi, r15
100018dad:	call	0x10001984e ## symbol stub for: _memcpy
100018db2:	mov	ebx, dword ptr [rip + 0x5e34c]
100018db8:	add	r15, rbx
100018dbb:	mov	rdi, qword ptr [rip + 0x5e336]
100018dc2:	mov	rsi, r14
100018dc5:	call	0x100011205
100018dca:	sub	r12d, ebx
100018dcd:	jne	0x100018d90
100018dcf:	jmp	0x100018e2e
100018dd1:	mov	edi, dword ptr [rip + 0x5e32d]
100018dd7:	lea	eax, [rdi + r12]
100018ddb:	cmp	eax, dword ptr [rip + 0x5e31f]
100018de1:	jbe	0x100018e15
100018de3:	lea	rdi, [rip + 0xa4ed] ## literal pool for: "output buffer too small for in-memory compression"
100018dea:	pop	rbx
100018deb:	pop	r12
100018ded:	pop	r14
100018def:	pop	r15
100018df1:	pop	rbp
100018df2:	jmp	0x100003c62
100018df7:	mov	dword ptr [rip + 0x5e306], r12d
100018dfe:	lea	rsi, [rip + 0x5e2ff]
100018e05:	mov	rdi, r15
100018e08:	pop	rbx
100018e09:	pop	r12
100018e0b:	pop	r14
100018e0d:	pop	r15
100018e0f:	pop	rbp
100018e10:	jmp	0x100011205
100018e15:	add	rdi, qword ptr [rip + 0x5e2dc]
100018e1c:	mov	edx, r12d
100018e1f:	mov	rsi, r15
100018e22:	call	0x10001984e ## symbol stub for: _memcpy
100018e27:	add	dword ptr [rip + 0x5e2d6], r12d
100018e2e:	pop	rbx
100018e2f:	pop	r12
100018e31:	pop	r14
100018e33:	pop	r15
100018e35:	pop	rbp
100018e36:	ret
100018e37:	push	rbp
100018e38:	mov	rbp, rsp
100018e3b:	push	r14
100018e3d:	push	rbx
100018e3e:	mov	ecx, dword ptr [rip + 0x5e2cc]
100018e44:	mov	eax, edi
100018e46:	shl	eax, cl
100018e48:	or	eax, dword ptr [rip + 0x5e2be]
100018e4e:	mov	dword ptr [rip + 0x5e2b8], eax
100018e54:	add	ecx, esi
100018e56:	mov	dword ptr [rip + 0x5e2b4], ecx
100018e5c:	cmp	ecx, 0x11
100018e5f:	jl	0x100018edb
100018e61:	mov	r14d, edi
100018e64:	mov	ebx, esi
100018e66:	mov	edx, dword ptr [rip + 0x5e298]
100018e6c:	mov	esi, dword ptr [rip + 0x5e28e]
100018e72:	dec	esi
100018e74:	cmp	edx, esi
100018e76:	jb	0x100018e9d
100018e78:	mov	rdi, qword ptr [rip + 0x5e279]
100018e7f:	lea	rsi, [rip + 0x5e27e]
100018e86:	call	0x100011205
100018e8b:	mov	eax, dword ptr [rip + 0x5e27b]
100018e91:	mov	edx, dword ptr [rip + 0x5e26d]
100018e97:	mov	ecx, dword ptr [rip + 0x5e273]
100018e9d:	mov	rsi, qword ptr [rip + 0x5e254]
100018ea4:	lea	edi, [rdx + 0x1]
100018ea7:	mov	dword ptr [rip + 0x5e257], edi
100018ead:	mov	edx, edx
100018eaf:	mov	byte ptr [rsi + rdx], al
100018eb2:	mov	edx, dword ptr [rip + 0x5e24c]
100018eb8:	lea	edi, [rdx + 0x1]
100018ebb:	mov	dword ptr [rip + 0x5e243], edi
100018ec1:	mov	byte ptr [rsi + rdx], ah
100018ec4:	add	ecx, -0x10
100018ec7:	mov	dword ptr [rip + 0x5e243], ecx
100018ecd:	sub	ebx, ecx
100018ecf:	mov	ecx, ebx
100018ed1:	shr	r14d, cl
100018ed4:	mov	dword ptr [rip + 0x5e231], r14d
100018edb:	pop	rbx
100018edc:	pop	r14
100018ede:	pop	rbp
100018edf:	ret
100018ee0:	push	rbp
100018ee1:	mov	rbp, rsp
100018ee4:	push	r15
100018ee6:	push	r14
100018ee8:	push	r13
100018eea:	push	r12
100018eec:	push	rbx
100018eed:	sub	rsp, 0x18
100018ef1:	mov	qword ptr [rbp - 0x38], rsi
100018ef5:	mov	r15, rdi
100018ef8:	cmp	dword ptr [rip + 0x4e1e1], 0x0
100018eff:	je	0x100019023
100018f05:	xor	r12d, r12d
100018f08:	lea	r13, [rip + 0x461d1]
100018f0f:	mov	dword ptr [rbp - 0x30], 0x0
100018f16:	mov	dword ptr [rbp - 0x2c], 0x0
100018f1d:	xor	r14d, r14d
100018f20:	test	r12b, 0x7
100018f24:	jne	0x100018f3b
100018f26:	mov	ecx, dword ptr [rbp - 0x2c]
100018f29:	mov	eax, ecx
100018f2b:	inc	ecx
100018f2d:	mov	dword ptr [rbp - 0x2c], ecx
100018f30:	lea	rcx, [rip + 0x44789]
100018f37:	mov	r14b, byte ptr [rax + rcx]
100018f3b:	movzx	ebx, byte ptr [r12 + r13]
100018f40:	inc	r12
100018f43:	test	r14b, 0x1
100018f47:	jne	0x100018f5e
100018f49:	movzx	edi, word ptr [r15 + 4*rbx]
100018f4e:	movzx	esi, word ptr [r15 + 4*rbx + 0x2]
100018f54:	call	0x100018e37
100018f59:	jmp	0x100019011
100018f5e:	lea	rax, [rip + 0x43f2b]
100018f65:	movzx	r13d, byte ptr [rbx + rax]
100018f6a:	movzx	edi, word ptr [r15 + 4*r13 + 0x404]
100018f73:	movzx	esi, word ptr [r15 + 4*r13 + 0x406]
100018f7c:	call	0x100018e37
100018f81:	lea	rax, [rip + 0x10528]
100018f88:	mov	esi, dword ptr [rax + 4*r13]
100018f8c:	test	esi, esi
100018f8e:	je	0x100018fa2
100018f90:	lea	rax, [rip + 0x43e79]
100018f97:	sub	ebx, dword ptr [rax + 4*r13]
100018f9b:	mov	edi, ebx
100018f9d:	call	0x100018e37
100018fa2:	mov	ecx, dword ptr [rbp - 0x30]
100018fa5:	mov	eax, ecx
100018fa7:	inc	ecx
100018fa9:	mov	dword ptr [rbp - 0x30], ecx
100018fac:	lea	rcx, [rip + 0x4e13d]
100018fb3:	movzx	r13d, word ptr [rcx + 2*rax]
100018fb8:	mov	eax, r13d
100018fbb:	shr	eax, 0x7
100018fbe:	mov	ecx, 0x100
100018fc3:	add	eax, ecx
100018fc5:	cmp	r13d, ecx
100018fc8:	cmovb	eax, r13d
100018fcc:	lea	rcx, [rip + 0x4403d]
100018fd3:	movzx	ebx, byte ptr [rax + rcx]
100018fd7:	mov	rax, qword ptr [rbp - 0x38]
100018fdb:	movzx	edi, word ptr [rax + 4*rbx]
100018fdf:	movzx	esi, word ptr [rax + 4*rbx + 0x2]
100018fe4:	call	0x100018e37
100018fe9:	lea	rax, [rip + 0x10540]
100018ff0:	mov	esi, dword ptr [rax + 4*rbx]
100018ff3:	test	esi, esi
100018ff5:	je	0x10001900a
100018ff7:	lea	rax, [rip + 0x43f92]
100018ffe:	sub	r13d, dword ptr [rax + 4*rbx]
100019002:	mov	edi, r13d
100019005:	call	0x100018e37
10001900a:	lea	r13, [rip + 0x460cf]
100019011:	shr	r14b
100019014:	mov	eax, dword ptr [rip + 0x4e0c6]
10001901a:	cmp	r12, rax
10001901d:	jb	0x100018f20
100019023:	movzx	edi, word ptr [r15 + 0x400]
10001902b:	movzx	esi, word ptr [r15 + 0x402]
100019033:	add	rsp, 0x18
100019037:	pop	rbx
100019038:	pop	r12
10001903a:	pop	r13
10001903c:	pop	r14
10001903e:	pop	r15
100019040:	pop	rbp
100019041:	jmp	0x100018e37
100019046:	push	rbp
100019047:	mov	rbp, rsp
10001904a:	mov	eax, dword ptr [rip + 0x5e0c0]
100019050:	cmp	eax, 0x9
100019053:	jl	0x1000190a6
100019055:	mov	edx, dword ptr [rip + 0x5e0a9]
10001905b:	mov	eax, dword ptr [rip + 0x5e09f]
100019061:	dec	eax
100019063:	cmp	edx, eax
100019065:	jb	0x100019080
100019067:	mov	rdi, qword ptr [rip + 0x5e08a]
10001906e:	lea	rsi, [rip + 0x5e08f]
100019075:	call	0x100011205
10001907a:	mov	edx, dword ptr [rip + 0x5e084]
100019080:	mov	eax, dword ptr [rip + 0x5e086]
100019086:	mov	rcx, qword ptr [rip + 0x5e06b]
10001908d:	lea	esi, [rdx + 0x1]
100019090:	mov	dword ptr [rip + 0x5e06e], esi
100019096:	mov	edx, edx
100019098:	mov	byte ptr [rcx + rdx], al
10001909b:	shr	eax, 0x8
10001909e:	mov	edx, dword ptr [rip + 0x5e060]
1000190a4:	jmp	0x1000190de
1000190a6:	test	eax, eax
1000190a8:	jle	0x1000190ec
1000190aa:	mov	edx, dword ptr [rip + 0x5e054]
1000190b0:	cmp	edx, dword ptr [rip + 0x5e04a]
1000190b6:	jb	0x1000190d1
1000190b8:	mov	rdi, qword ptr [rip + 0x5e039]
1000190bf:	lea	rsi, [rip + 0x5e03e]
1000190c6:	call	0x100011205
1000190cb:	mov	edx, dword ptr [rip + 0x5e033]
1000190d1:	mov	eax, dword ptr [rip + 0x5e035]
1000190d7:	mov	rcx, qword ptr [rip + 0x5e01a]
1000190de:	lea	esi, [rdx + 0x1]
1000190e1:	mov	dword ptr [rip + 0x5e01d], esi
1000190e7:	mov	edx, edx
1000190e9:	mov	byte ptr [rcx + rdx], al
1000190ec:	cmp	dword ptr [rip + 0x5e015], 0x0
1000190f3:	je	0x100019108
1000190f5:	mov	rdi, qword ptr [rip + 0x5dffc]
1000190fc:	lea	rsi, [rip + 0x5e001]
100019103:	call	0x100011205
100019108:	xor	eax, eax
10001910a:	mov	dword ptr [rip + 0x5dffc], eax
100019110:	mov	dword ptr [rip + 0x5dffa], eax
100019116:	pop	rbp
100019117:	ret
100019118:	push	rbp
100019119:	mov	rbp, rsp
10001911c:	mov	eax, dword ptr [rip + 0x4dfbe]
100019122:	lea	r10d, [rax + 0x1]
100019126:	mov	dword ptr [rip + 0x4dfb3], r10d
10001912d:	lea	rdx, [rip + 0x45fac]
100019134:	mov	byte ptr [rax + rdx], sil
100019138:	movsxd	rax, esi
10001913b:	test	edi, edi
10001913d:	je	0x1000191af
10001913f:	lea	rdx, [rip + 0x43d4a]
100019146:	movzx	eax, byte ptr [rax + rdx]
10001914a:	lea	rdx, [rip + 0x4558f]
100019151:	inc	word ptr [rdx + 4*rax + 0x404]
100019159:	lea	eax, [rdi - 0x1]
10001915c:	movsxd	rdx, eax
10001915f:	sar	eax, 0x7
100019162:	add	eax, 0x100
100019167:	cmp	edi, 0x101
10001916d:	cmovl	rax, rdx
100019171:	lea	rsi, [rip + 0x43e98]
100019178:	movzx	eax, byte ptr [rax + rsi]
10001917c:	lea	rsi, [rip + 0x45e5d]
100019183:	inc	word ptr [rsi + 4*rax]
100019187:	mov	eax, dword ptr [rip + 0x5df63]
10001918d:	lea	esi, [rax + 0x1]
100019190:	mov	dword ptr [rip + 0x5df5a], esi
100019196:	lea	rsi, [rip + 0x4df53]
10001919d:	mov	word ptr [rsi + 2*rax], dx
1000191a1:	mov	al, byte ptr [rip + 0x5df4d]
1000191a7:	or	byte ptr [rip + 0x44503], al
1000191ad:	jmp	0x1000191c0
1000191af:	lea	rdx, [rip + 0x4552a]
1000191b6:	inc	word ptr [rdx + 4*rax]
1000191ba:	mov	al, byte ptr [rip + 0x5df34]
1000191c0:	add	al, al
1000191c2:	mov	byte ptr [rip + 0x5df2c], al
1000191c8:	test	r10b, 0x7
1000191cc:	jne	0x1000191fb
1000191ce:	mov	al, byte ptr [rip + 0x444dc]
1000191d4:	mov	edx, dword ptr [rip + 0x454e6]
1000191da:	lea	esi, [rdx + 0x1]
1000191dd:	mov	dword ptr [rip + 0x454dd], esi
1000191e3:	lea	rsi, [rip + 0x444d6]
1000191ea:	mov	byte ptr [rdx + rsi], al
1000191ed:	mov	byte ptr [rip + 0x444bc], 0x0
1000191f4:	mov	byte ptr [rip + 0x5def9], 0x1
1000191fb:	test	r10d, 0xfff
100019202:	jne	0x10001927e
100019204:	lea	rax, [rip + 0x10245]
10001920b:	cmp	dword ptr [rax], 0x2
10001920e:	jle	0x10001927e
100019210:	mov	edx, r10d
100019213:	shl	rdx, 0x3
100019217:	lea	rax, [rip + 0x31d76]
10001921e:	mov	r9d, dword ptr [rax]
100019221:	lea	rax, [rip + 0x11d40]
100019228:	mov	r8, qword ptr [rax]
10001922b:	xor	edi, edi
10001922d:	lea	r11, [rip + 0x45dac]
100019234:	lea	rsi, [rip + 0x102f5]
10001923b:	movzx	ecx, word ptr [rdi + r11]
100019240:	movsxd	rax, dword ptr [rdi + rsi]
100019244:	add	rax, 0x5
100019248:	imul	rax, rcx
10001924c:	add	rdx, rax
10001924f:	add	rdi, 0x4
100019253:	cmp	rdi, 0x78
100019257:	jne	0x10001923b
100019259:	mov	edi, dword ptr [rip + 0x5de91]
10001925f:	mov	eax, r10d
100019262:	shr	eax
100019264:	cmp	edi, eax
100019266:	jae	0x100019284
100019268:	sub	r9, r8
10001926b:	shr	rdx, 0x3
10001926f:	shr	r9
100019272:	mov	eax, 0x1
100019277:	cmp	rdx, r9
10001927a:	jae	0x100019284
10001927c:	jmp	0x10001929c
10001927e:	mov	edi, dword ptr [rip + 0x5de6c]
100019284:	cmp	r10d, 0x7fff
10001928b:	sete	al
10001928e:	cmp	edi, 0x8000
100019294:	sete	cl
100019297:	or	cl, al
100019299:	movzx	eax, cl
10001929c:	pop	rbp
10001929d:	ret
10001929e:	push	rbp
10001929f:	mov	rbp, rsp
1000192a2:	mov	qword ptr [rip + 0x5de4f], rdi
1000192a9:	mov	dword ptr [rip + 0x5de51], esi
1000192af:	xor	eax, eax
1000192b1:	mov	dword ptr [rip + 0x5de4d], eax
1000192b7:	mov	dword ptr [rip + 0x5de4b], edx
1000192bd:	mov	dword ptr [rip + 0x5de49], eax
1000192c3:	mov	dword ptr [rip + 0x5de47], eax
1000192c9:	pop	rbp
1000192ca:	ret
1000192cb:	push	rbp
1000192cc:	mov	rbp, rsp
1000192cf:	push	r15
1000192d1:	push	r14
1000192d3:	push	r13
1000192d5:	push	r12
1000192d7:	push	rbx
1000192d8:	movsxd	rax, esi
1000192db:	lea	r14, [rip + 0x5deee]
1000192e2:	mov	edx, dword ptr [r14 + 4*rax]
1000192e6:	lea	ecx, [rax + rax]
1000192e9:	mov	r15d, dword ptr [rip + 0x5decc]
1000192f0:	cmp	ecx, r15d
1000192f3:	jg	0x100019381
1000192f9:	mov	dword ptr [rbp - 0x2c], edx
1000192fc:	movsxd	r9, edx
1000192ff:	movzx	r11d, word ptr [rdi + 4*r9]
100019304:	lea	r10, [rip + 0x5e7c5]
10001930b:	cmp	ecx, r15d
10001930e:	jge	0x100019336
100019310:	mov	edx, ecx
100019312:	or	edx, 0x1
100019315:	movsxd	r12, edx
100019318:	movsxd	rbx, dword ptr [r14 + 4*r12]
10001931c:	movsxd	rax, ecx
10001931f:	movsxd	r13, dword ptr [r14 + 4*rax]
100019323:	movzx	r8d, word ptr [rdi + 4*r13]
100019328:	cmp	word ptr [rdi + 4*rbx], r8w
10001932d:	jae	0x100019368
10001932f:	mov	rax, r12
100019332:	mov	ebx, edx
100019334:	jmp	0x10001933b
100019336:	movsxd	rax, ecx
100019339:	mov	ebx, ecx
10001933b:	mov	eax, dword ptr [r14 + 4*rax]
10001933f:	movsxd	rcx, eax
100019342:	cmp	r11w, word ptr [rdi + 4*rcx]
100019347:	jb	0x100019379
100019349:	jne	0x100019355
10001934b:	mov	dl, byte ptr [r9 + r10]
10001934f:	cmp	dl, byte ptr [rcx + r10]
100019353:	jbe	0x100019379
100019355:	movsxd	rcx, esi
100019358:	mov	dword ptr [r14 + 4*rcx], eax
10001935c:	lea	ecx, [rbx + rbx]
10001935f:	mov	esi, ebx
100019361:	cmp	ecx, r15d
100019364:	jle	0x10001930b
100019366:	jmp	0x10001937b
100019368:	jne	0x100019339
10001936a:	mov	r8b, byte ptr [rbx + r10]
10001936e:	mov	ebx, ecx
100019370:	cmp	r8b, byte ptr [r13 + r10]
100019375:	jbe	0x10001932f
100019377:	jmp	0x10001933b
100019379:	mov	ebx, esi
10001937b:	movsxd	rax, ebx
10001937e:	mov	edx, dword ptr [rbp - 0x2c]
100019381:	mov	dword ptr [r14 + 4*rax], edx
100019385:	pop	rbx
100019386:	pop	r12
100019388:	pop	r13
10001938a:	pop	r14
10001938c:	pop	r15
10001938e:	pop	rbp
10001938f:	ret
100019390:	push	rbp
100019391:	mov	rbp, rsp
100019394:	push	r14
100019396:	push	rbx
100019397:	movzx	r11d, word ptr [rdi + 0x2]
10001939c:	lea	eax, [rsi + 0x1]
10001939f:	movsxd	rcx, eax
1000193a2:	mov	word ptr [rdi + 4*rcx + 0x2], 0xffff
1000193a9:	test	esi, esi
1000193ab:	js	0x100019472
1000193b1:	xor	ecx, ecx
1000193b3:	test	r11w, r11w
1000193b7:	mov	edx, 0x8a
1000193bc:	mov	esi, 0x7
1000193c1:	cmove	esi, edx
1000193c4:	sete	cl
1000193c7:	mov	r10d, 0x4
1000193cd:	sub	r10d, ecx
1000193d0:	mov	r9d, eax
1000193d3:	mov	ebx, 0xffffffff
1000193d8:	xor	r14d, r14d
1000193db:	lea	r8, [rip + 0x5dd3e]
1000193e2:	xor	edx, edx
1000193e4:	mov	eax, r11d
1000193e7:	movzx	r11d, word ptr [rdi + 4*r14 + 0x6]
1000193ed:	inc	r14
1000193f0:	lea	ecx, [rdx + 0x1]
1000193f3:	cmp	ecx, esi
1000193f5:	jge	0x100019400
1000193f7:	cmp	eax, r11d
1000193fa:	jne	0x100019400
1000193fc:	mov	eax, ebx
1000193fe:	jmp	0x100019465
100019400:	cmp	ecx, r10d
100019403:	jge	0x10001940e
100019405:	mov	edx, eax
100019407:	add	word ptr [r8 + 4*rdx], cx
10001940c:	jmp	0x10001943b
10001940e:	test	eax, eax
100019410:	je	0x100019426
100019412:	cmp	eax, ebx
100019414:	je	0x10001941d
100019416:	mov	ecx, eax
100019418:	inc	word ptr [r8 + 4*rcx]
10001941d:	inc	word ptr [rip + 0x5dd3c]
100019424:	jmp	0x10001943b
100019426:	cmp	edx, 0x9
100019429:	jg	0x100019434
10001942b:	inc	word ptr [rip + 0x5dd32]
100019432:	jmp	0x10001943b
100019434:	inc	word ptr [rip + 0x5dd2d]
10001943b:	xor	ecx, ecx
10001943d:	test	r11w, r11w
100019441:	je	0x10001945a
100019443:	xor	esi, esi
100019445:	cmp	eax, r11d
100019448:	sete	sil
10001944c:	mov	r10d, 0x4
100019452:	sub	r10d, esi
100019455:	xor	esi, 0x7
100019458:	jmp	0x100019465
10001945a:	mov	r10d, 0x3
100019460:	mov	esi, 0x8a
100019465:	mov	edx, ecx
100019467:	mov	ebx, eax
100019469:	cmp	r9, r14
10001946c:	jne	0x1000193e4
100019472:	pop	rbx
100019473:	pop	r14
100019475:	pop	rbp
100019476:	ret
100019477:	push	rbp
100019478:	mov	rbp, rsp
10001947b:	push	r15
10001947d:	push	r14
10001947f:	push	r13
100019481:	push	r12
100019483:	push	rbx
100019484:	sub	rsp, 0x18
100019488:	test	esi, esi
10001948a:	js	0x1000195dc
100019490:	movzx	ecx, word ptr [rdi + 0x2]
100019494:	xor	edx, edx
100019496:	test	cx, cx
100019499:	mov	ebx, 0x8a
10001949e:	mov	eax, 0x7
1000194a3:	cmove	eax, ebx
1000194a6:	sete	dl
1000194a9:	mov	r8d, 0x4
1000194af:	sub	r8d, edx
1000194b2:	inc	esi
1000194b4:	mov	edx, 0xffffffff
1000194b9:	xor	r13d, r13d
1000194bc:	lea	r14, [rip + 0x5dc5d]
1000194c3:	xor	r15d, r15d
1000194c6:	mov	qword ptr [rbp - 0x40], rsi
1000194ca:	mov	qword ptr [rbp - 0x38], rdi
1000194ce:	mov	r12d, ecx
1000194d1:	movzx	ecx, word ptr [rdi + 4*r13 + 0x6]
1000194d7:	inc	r13
1000194da:	lea	ebx, [r15 + 0x1]
1000194de:	cmp	ebx, eax
1000194e0:	jge	0x1000194ef
1000194e2:	cmp	r12d, ecx
1000194e5:	jne	0x1000194ef
1000194e7:	mov	r12d, edx
1000194ea:	jmp	0x1000195cd
1000194ef:	cmp	ebx, r8d
1000194f2:	mov	dword ptr [rbp - 0x2c], ecx
1000194f5:	jge	0x100019513
1000194f7:	mov	r15d, r12d
1000194fa:	movzx	edi, word ptr [r14 + 4*r15]
1000194ff:	movzx	esi, word ptr [r14 + 4*r15 + 0x2]
100019505:	call	0x100018e37
10001950a:	dec	ebx
10001950c:	jne	0x1000194fa
10001950e:	jmp	0x10001959a
100019513:	test	r12d, r12d
100019516:	je	0x100019550
100019518:	cmp	r12d, edx
10001951b:	je	0x100019533
10001951d:	mov	eax, r12d
100019520:	movzx	edi, word ptr [r14 + 4*rax]
100019525:	movzx	esi, word ptr [r14 + 4*rax + 0x2]
10001952b:	call	0x100018e37
100019530:	mov	ebx, r15d
100019533:	movzx	edi, word ptr [rip + 0x5dc26]
10001953a:	movzx	esi, word ptr [rip + 0x5dc21]
100019541:	call	0x100018e37
100019546:	add	ebx, -0x3
100019549:	mov	esi, 0x2
10001954e:	jmp	0x100019593
100019550:	cmp	r15d, 0x9
100019554:	jg	0x100019574
100019556:	movzx	edi, word ptr [rip + 0x5dc07]
10001955d:	movzx	esi, word ptr [rip + 0x5dc02]
100019564:	call	0x100018e37
100019569:	add	r15d, -0x2
10001956d:	mov	esi, 0x3
100019572:	jmp	0x100019590
100019574:	movzx	edi, word ptr [rip + 0x5dbed]
10001957b:	movzx	esi, word ptr [rip + 0x5dbe8]
100019582:	call	0x100018e37
100019587:	add	r15d, -0xa
10001958b:	mov	esi, 0x7
100019590:	mov	ebx, r15d
100019593:	mov	edi, ebx
100019595:	call	0x100018e37
10001959a:	xor	ebx, ebx
10001959c:	mov	ecx, dword ptr [rbp - 0x2c]
10001959f:	test	cx, cx
1000195a2:	je	0x1000195ba
1000195a4:	xor	eax, eax
1000195a6:	cmp	r12d, ecx
1000195a9:	sete	al
1000195ac:	mov	r8d, 0x4
1000195b2:	sub	r8d, eax
1000195b5:	xor	eax, 0x7
1000195b8:	jmp	0x1000195c5
1000195ba:	mov	r8d, 0x3
1000195c0:	mov	eax, 0x8a
1000195c5:	mov	rsi, qword ptr [rbp - 0x40]
1000195c9:	mov	rdi, qword ptr [rbp - 0x38]
1000195cd:	mov	r15d, ebx
1000195d0:	mov	edx, r12d
1000195d3:	cmp	r13, rsi
1000195d6:	jne	0x1000194ce
1000195dc:	add	rsp, 0x18
1000195e0:	pop	rbx
1000195e1:	pop	r12
1000195e3:	pop	r13
1000195e5:	pop	r14
1000195e7:	pop	r15
1000195e9:	pop	rbp
1000195ea:	ret
1000195eb:	nop
1000195ec:	nop
1000195ed:	nop
1000195ee:	nop
1000195ef:	push	rbp
1000195f0:	mov	rbp, rsp
1000195f3:	push	r15
1000195f5:	push	r14
1000195f7:	push	r12
1000195f9:	push	rbx
1000195fa:	mov	r14, rdx
1000195fd:	mov	r15d, esi
100019600:	mov	r12, rdi
100019603:	lea	rdi, [rip + 0x3c9b] ## literal pool for: "zip warning"
10001960a:	call	0x10001987e ## symbol stub for: _perror
10001960f:	lea	rax, [rip + 0x1014a]
100019616:	mov	rbx, qword ptr [rax]
100019619:	test	rbx, rbx
10001961c:	je	0x10001963e
10001961e:	call	0x100019764 ## symbol stub for: ___error
100019623:	mov	edi, dword ptr [rax]
100019625:	call	0x10001991a ## symbol stub for: _strerror
10001962a:	lea	rsi, [rip + 0x3c80] ## literal pool for: "zip warning: %s\n"
100019631:	mov	rdi, rbx
100019634:	mov	rdx, rax
100019637:	xor	eax, eax
100019639:	call	0x1000197ee ## symbol stub for: _fprintf
10001963e:	mov	rsi, qword ptr [r12]
100019642:	lea	rdi, [rip + 0x3b2b] ## literal pool for: "could not open for reading: "
100019649:	call	0x100003e67
10001964e:	test	r15b, 0x1
100019652:	je	0x10001965d
100019654:	pop	rbx
100019655:	pop	r12
100019657:	pop	r14
100019659:	pop	r15
10001965b:	pop	rbp
10001965c:	ret
10001965d:	mov	r8, qword ptr [r14]
100019660:	lea	rbx, [rip + 0x104c9]
100019667:	lea	rcx, [rip + 0x3ae8] ## literal pool for: "was zipping %s"
10001966e:	mov	edx, 0x13f1
100019673:	mov	rdi, rbx
100019676:	mov	esi, 0x0
10001967b:	xor	eax, eax
10001967d:	call	0x100019770 ## symbol stub for: ___sprintf_chk
100019682:	push	0x12
100019684:	pop	rdi
100019685:	mov	rsi, rbx
100019688:	call	0x1000037b0
10001968d:	push	rbp
10001968e:	mov	rbp, rsp
100019691:	push	r15
100019693:	push	r14
100019695:	push	rbx
100019696:	push	rax
100019697:	mov	r14, rcx
10001969a:	mov	r15d, edx
10001969d:	mov	rbx, rsi
1000196a0:	call	0x10001987e ## symbol stub for: _perror
1000196a5:	mov	rsi, qword ptr [rbx]
1000196a8:	lea	rdi, [rip + 0x3ac5] ## literal pool for: "could not open for reading: "
1000196af:	call	0x100003e67
1000196b4:	test	r15b, 0x1
1000196b8:	je	0x1000196c5
1000196ba:	add	rsp, 0x8
1000196be:	pop	rbx
1000196bf:	pop	r14
1000196c1:	pop	r15
1000196c3:	pop	rbp
1000196c4:	ret
1000196c5:	mov	r8, qword ptr [r14 + 0x50]
1000196c9:	lea	rbx, [rip + 0x10460]
1000196d0:	lea	rcx, [rip + 0x3a7f] ## literal pool for: "was zipping %s"
1000196d7:	mov	edx, 0x13f1
1000196dc:	mov	rdi, rbx
1000196df:	mov	esi, 0x0
1000196e4:	xor	eax, eax
1000196e6:	call	0x100019770 ## symbol stub for: ___sprintf_chk
1000196eb:	push	0x12
1000196ed:	pop	rdi
1000196ee:	mov	rsi, rbx
1000196f1:	call	0x1000037b0
1000196f6:	nop	word ptr cs:[rax + rax]
100019700:	push	rbp
100019701:	mov	rbp, rsp
100019704:	push	r14
100019706:	push	rbx
100019707:	mov	r14, rdi
10001970a:	lea	rdi, [rip + 0x9ac4] ## literal pool for: "\nzip warning"
100019711:	call	0x10001987e ## symbol stub for: _perror
100019716:	lea	rax, [rip + 0x10043]
10001971d:	mov	rbx, qword ptr [rax]
100019720:	test	rbx, rbx
100019723:	je	0x100019745
100019725:	call	0x100019764 ## symbol stub for: ___error
10001972a:	mov	edi, dword ptr [rax]
10001972c:	call	0x10001991a ## symbol stub for: _strerror
100019731:	lea	rsi, [rip + 0x9aaa] ## literal pool for: "\nzip warning: %s\n"
100019738:	mov	rdi, rbx
10001973b:	mov	rdx, rax
10001973e:	xor	eax, eax
100019740:	call	0x1000197ee ## symbol stub for: _fprintf
100019745:	mov	rsi, qword ptr [r14 + 0x80]
10001974c:	lea	rdi, [rip + 0x9aa1] ## literal pool for: "could not read input file: "
100019753:	call	0x100003e67
100019758:	pop	rbx
100019759:	pop	r14
10001975b:	pop	rbp
10001975c:	ret
