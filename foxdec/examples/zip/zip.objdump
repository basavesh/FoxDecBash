zip_x86_64:
(__TEXT,__text) section
100002e30:	push	rbp
100002e31:	mov	rbp, rsp
100002e34:	push	r15
100002e36:	push	r14
100002e38:	push	r13
100002e3a:	push	r12
100002e3c:	push	rbx
100002e3d:	push	rax
100002e3e:	mov	eax, dword ptr [rip + 0x5816c]
100002e44:	lea	ecx, [rax + 0x1]
100002e47:	mov	dword ptr [rip + 0x58163], ecx
100002e4d:	test	eax, eax
100002e4f:	jle	0x100002e5b
100002e51:	mov	edi, 0x5
100002e56:	call	0x1000196c8 ## symbol stub for: _exit
100002e5b:	mov	r15, rsi
100002e5e:	mov	dword ptr [rbp - 0x2c], edi
100002e61:	lea	rbx, [rip + 0x26a64]
100002e68:	cmp	dword ptr [rbx], 0x0
100002e6b:	je	0x100002e87
100002e6d:	lea	rax, [rip + 0x280bc]
100002e74:	mov	rsi, qword ptr [rax]
100002e77:	mov	edi, 0xa
100002e7c:	call	0x100019704 ## symbol stub for: _fputc
100002e81:	mov	dword ptr [rbx], 0x0
100002e87:	lea	rax, [rip + 0x268d2]
100002e8e:	mov	rsi, qword ptr [rax]
100002e91:	lea	r13, [rip + 0x26a38]
100002e98:	test	rsi, rsi
100002e9b:	je	0x100002eb6
100002e9d:	cmp	dword ptr [r13], 0x0
100002ea2:	je	0x100002eb6
100002ea4:	mov	edi, 0xa
100002ea9:	call	0x100019704 ## symbol stub for: _fputc
100002eae:	mov	dword ptr [r13], 0x0
100002eb6:	test	r15, r15
100002eb9:	je	0x100002f8f
100002ebf:	movsxd	rax, dword ptr [rbp - 0x2c]
100002ec3:	lea	r12, [rax + 2*rax]
100002ec7:	lea	r14, [rip + 0x26382]
100002ece:	test	byte ptr [r14 + 8*r12 + 0x10], 0x10
100002ed4:	je	0x100002f00
100002ed6:	lea	rax, [rip + 0x28053]
100002edd:	mov	rbx, qword ptr [rax]
100002ee0:	call	0x100019674 ## symbol stub for: ___error
100002ee5:	mov	edi, dword ptr [rax]
100002ee7:	call	0x10001982a ## symbol stub for: _strerror
100002eec:	lea	rsi, [rip + 0x1872d] ## literal pool for: "zip I/O error: %s"
100002ef3:	mov	rdi, rbx
100002ef6:	mov	rdx, rax
100002ef9:	xor	eax, eax
100002efb:	call	0x1000196fe ## symbol stub for: _fprintf
100002f00:	lea	rbx, [rip + 0x28029]
100002f07:	mov	rdi, qword ptr [rbx]
100002f0a:	call	0x1000196e6 ## symbol stub for: _fflush
100002f0f:	mov	rdi, qword ptr [rbx]
100002f12:	mov	rdx, qword ptr [r14 + 8*r12 + 0x8]
100002f17:	lea	rsi, [rip + 0x18714] ## literal pool for: "\nzip error: %s (%s)\n"
100002f1e:	mov	rcx, r15
100002f21:	xor	eax, eax
100002f23:	call	0x1000196fe ## symbol stub for: _fprintf
100002f28:	lea	rax, [rip + 0x26831]
100002f2f:	mov	rbx, qword ptr [rax]
100002f32:	test	rbx, rbx
100002f35:	je	0x100002f8f
100002f37:	lea	r14, [r14 + 8*r12]
100002f3b:	add	r14, 0x10
100002f3f:	test	byte ptr [r14], 0x10
100002f43:	je	0x100002f6f
100002f45:	call	0x100019674 ## symbol stub for: ___error
100002f4a:	mov	edi, dword ptr [rax]
100002f4c:	call	0x10001982a ## symbol stub for: _strerror
100002f51:	lea	rsi, [rip + 0x186ef] ## literal pool for: "zip I/O error: %s\n"
100002f58:	mov	rdi, rbx
100002f5b:	mov	rdx, rax
100002f5e:	xor	eax, eax
100002f60:	call	0x1000196fe ## symbol stub for: _fprintf
100002f65:	lea	rax, [rip + 0x267f4]
100002f6c:	mov	rbx, qword ptr [rax]
100002f6f:	mov	rdx, qword ptr [r14 - 0x8]
100002f73:	lea	rsi, [rip + 0x186b8] ## literal pool for: "\nzip error: %s (%s)\n"
100002f7a:	mov	rdi, rbx
100002f7d:	mov	rcx, r15
100002f80:	xor	eax, eax
100002f82:	call	0x1000196fe ## symbol stub for: _fprintf
100002f87:	mov	dword ptr [r13], 0x0
100002f8f:	lea	rbx, [rip + 0x2685a]
100002f96:	mov	rdx, qword ptr [rbx]
100002f99:	test	rdx, rdx
100002f9c:	je	0x1000030db
100002fa2:	lea	r14, [rip + 0x27faf]
100002fa9:	cmp	rdx, qword ptr [r14]
100002fac:	jne	0x100003097
100002fb2:	lea	rbx, [rip + 0x26b67]
100002fb9:	mov	r15, qword ptr [rbx]
100002fbc:	lea	rax, [rip + 0x27f6d]
100002fc3:	mov	rdi, qword ptr [rax]
100002fc6:	lea	rsi, [rip + 0x1868d] ## literal pool for: "attempting to restore %s to its previous state\n"
100002fcd:	xor	eax, eax
100002fcf:	call	0x1000196fe ## symbol stub for: _fprintf
100002fd4:	lea	rax, [rip + 0x26785]
100002fdb:	mov	rdi, qword ptr [rax]
100002fde:	test	rdi, rdi
100002fe1:	je	0x100002ff4
100002fe3:	mov	rdx, qword ptr [r14]
100002fe6:	lea	rsi, [rip + 0x1866d] ## literal pool for: "attempting to restore %s to its previous state\n"
100002fed:	xor	eax, eax
100002fef:	call	0x1000196fe ## symbol stub for: _fprintf
100002ff4:	lea	r13, [rip + 0x267fd]
100002ffb:	mov	rdi, qword ptr [r13]
100002fff:	mov	rsi, qword ptr [rbx]
100003002:	xor	r12d, r12d
100003005:	xor	edx, edx
100003007:	call	0x10001971c ## symbol stub for: _fseeko
10000300c:	mov	rsi, qword ptr [rbx]
10000300f:	lea	r14, [rip + 0x27f22]
100003016:	mov	qword ptr [r14], rsi
100003019:	lea	rax, [rip + 0x268b8]
100003020:	mov	rbx, qword ptr [rax]
100003023:	test	rbx, rbx
100003026:	je	0x100003062
100003028:	xor	r12d, r12d
10000302b:	mov	rdi, rbx
10000302e:	call	0x10000d930
100003033:	movzx	eax, word ptr [rbx + 0x28]
100003037:	movzx	ecx, word ptr [rbx + 0x2c]
10000303b:	add	rcx, rax
10000303e:	movzx	eax, word ptr [rbx + 0x2e]
100003042:	add	rax, rcx
100003045:	mov	rcx, qword ptr [r14]
100003048:	lea	rsi, [rcx + rax]
10000304c:	add	rsi, 0x2e
100003050:	mov	qword ptr [r14], rsi
100003053:	inc	r12
100003056:	mov	rbx, qword ptr [rbx + 0x98]
10000305d:	test	rbx, rbx
100003060:	jne	0x10000302b
100003062:	sub	rsi, r15
100003065:	lea	rax, [rip + 0x27ed4]
10000306c:	movzx	ecx, word ptr [rax]
10000306f:	lea	rax, [rip + 0x26872]
100003076:	mov	r8, qword ptr [rax]
100003079:	mov	rdi, r12
10000307c:	mov	rdx, r15
10000307f:	call	0x10000de58
100003084:	mov	rdi, qword ptr [r13]
100003088:	call	0x1000196ce ## symbol stub for: _fclose
10000308d:	mov	qword ptr [r13], 0x0
100003095:	jmp	0x1000030db
100003097:	lea	r14, [rip + 0x267ea]
10000309e:	mov	rdi, qword ptr [r14]
1000030a1:	test	rdi, rdi
1000030a4:	jne	0x1000030aa
1000030a6:	xor	eax, eax
1000030a8:	jmp	0x1000030b2
1000030aa:	call	0x1000196ce ## symbol stub for: _fclose
1000030af:	mov	rax, qword ptr [r14]
1000030b2:	lea	rcx, [rip + 0x2673f]
1000030b9:	mov	rdi, qword ptr [rcx]
1000030bc:	test	rdi, rdi
1000030bf:	je	0x1000030cb
1000030c1:	cmp	rdi, rax
1000030c4:	je	0x1000030cb
1000030c6:	call	0x1000196ce ## symbol stub for: _fclose
1000030cb:	mov	rdi, qword ptr [rbx]
1000030ce:	call	0x10001160a
1000030d3:	mov	rdi, qword ptr [rbx]
1000030d6:	call	0x100019716 ## symbol stub for: _free
1000030db:	lea	rbx, [rip + 0x266c6]
1000030e2:	mov	rdi, qword ptr [rbx]
1000030e5:	test	rdi, rdi
1000030e8:	je	0x1000030f6
1000030ea:	call	0x100019716 ## symbol stub for: _free
1000030ef:	mov	qword ptr [rbx], 0x0
1000030f6:	lea	rbx, [rip + 0x266b3]
1000030fd:	mov	rdi, qword ptr [rbx]
100003100:	test	rdi, rdi
100003103:	je	0x100003111
100003105:	call	0x100019716 ## symbol stub for: _free
10000310a:	mov	qword ptr [rbx], 0x0
100003111:	lea	rbx, [rip + 0x27e40]
100003118:	mov	rdi, qword ptr [rbx]
10000311b:	test	rdi, rdi
10000311e:	je	0x10000312c
100003120:	call	0x100019716 ## symbol stub for: _free
100003125:	mov	qword ptr [rbx], 0x0
10000312c:	lea	rbx, [rip + 0x266e5]
100003133:	mov	rdi, qword ptr [rbx]
100003136:	test	rdi, rdi
100003139:	je	0x100003147
10000313b:	call	0x100019716 ## symbol stub for: _free
100003140:	mov	qword ptr [rbx], 0x0
100003147:	lea	rbx, [rip + 0x2679a]
10000314e:	mov	rdi, qword ptr [rbx]
100003151:	test	rdi, rdi
100003154:	je	0x100003162
100003156:	call	0x100019716 ## symbol stub for: _free
10000315b:	mov	qword ptr [rbx], 0x0
100003162:	call	0x10000316f
100003167:	mov	edi, dword ptr [rbp - 0x2c]
10000316a:	call	0x1000196c8 ## symbol stub for: _exit
10000316f:	push	rbp
100003170:	mov	rbp, rsp
100003173:	push	r15
100003175:	push	r14
100003177:	push	rbx
100003178:	push	rax
100003179:	lea	rax, [rip + 0x26770]
100003180:	mov	rax, qword ptr [rax]
100003183:	test	rax, rax
100003186:	je	0x100003192
100003188:	mov	rdi, rax
10000318b:	call	0x1000107a9
100003190:	jmp	0x100003183
100003192:	lea	r15, [rip + 0x2673f]
100003199:	mov	rdi, qword ptr [r15]
10000319c:	test	rdi, rdi
10000319f:	je	0x10000327a
1000031a5:	lea	r14, [rip + 0x27d9c]
1000031ac:	mov	rax, qword ptr [rdi + 0x78]
1000031b0:	mov	rbx, qword ptr [rdi + 0x98]
1000031b7:	test	rax, rax
1000031ba:	je	0x1000031cd
1000031bc:	cmp	rax, qword ptr [rdi + 0x50]
1000031c0:	je	0x1000031cd
1000031c2:	mov	rdi, rax
1000031c5:	call	0x100019716 ## symbol stub for: _free
1000031ca:	mov	rdi, qword ptr [r15]
1000031cd:	mov	rax, qword ptr [rdi + 0x50]
1000031d1:	test	rax, rax
1000031d4:	je	0x1000031e1
1000031d6:	mov	rdi, rax
1000031d9:	call	0x100019716 ## symbol stub for: _free
1000031de:	mov	rdi, qword ptr [r15]
1000031e1:	mov	rax, qword ptr [rdi + 0x70]
1000031e5:	test	rax, rax
1000031e8:	je	0x1000031f5
1000031ea:	mov	rdi, rax
1000031ed:	call	0x100019716 ## symbol stub for: _free
1000031f2:	mov	rdi, qword ptr [r15]
1000031f5:	cmp	word ptr [rdi + 0x2c], 0x0
1000031fa:	je	0x100003216
1000031fc:	mov	rax, qword ptr [rdi + 0x60]
100003200:	test	rax, rax
100003203:	je	0x100003216
100003205:	cmp	rax, qword ptr [rdi + 0x58]
100003209:	je	0x100003216
10000320b:	mov	rdi, rax
10000320e:	call	0x100019716 ## symbol stub for: _free
100003213:	mov	rdi, qword ptr [r15]
100003216:	cmp	word ptr [rdi + 0x2a], 0x0
10000321b:	je	0x100003231
10000321d:	mov	rax, qword ptr [rdi + 0x58]
100003221:	test	rax, rax
100003224:	je	0x100003231
100003226:	mov	rdi, rax
100003229:	call	0x100019716 ## symbol stub for: _free
10000322e:	mov	rdi, qword ptr [r15]
100003231:	cmp	word ptr [rdi + 0x2e], 0x0
100003236:	je	0x10000324c
100003238:	mov	rax, qword ptr [rdi + 0x68]
10000323c:	test	rax, rax
10000323f:	je	0x10000324c
100003241:	mov	rdi, rax
100003244:	call	0x100019716 ## symbol stub for: _free
100003249:	mov	rdi, qword ptr [r15]
10000324c:	mov	rax, qword ptr [rdi + 0x80]
100003253:	test	rax, rax
100003256:	je	0x100003263
100003258:	mov	rdi, rax
10000325b:	call	0x100019716 ## symbol stub for: _free
100003260:	mov	rdi, qword ptr [r15]
100003263:	call	0x100019716 ## symbol stub for: _free
100003268:	mov	qword ptr [r15], rbx
10000326b:	dec	qword ptr [r14]
10000326e:	mov	rdi, rbx
100003271:	test	rbx, rbx
100003274:	jne	0x1000031ac
10000327a:	lea	r14, [rip + 0x26677]
100003281:	mov	rdi, qword ptr [r14]
100003284:	test	rdi, rdi
100003287:	je	0x1000032ca
100003289:	lea	rbx, [rip + 0x26670]
100003290:	mov	eax, dword ptr [rbx]
100003292:	sub	eax, 0x1
100003295:	mov	dword ptr [rbx], eax
100003297:	jb	0x1000032be
100003299:	mov	ecx, eax
10000329b:	shl	rcx, 0x4
10000329f:	mov	rdi, qword ptr [rdi + rcx]
1000032a3:	test	rdi, rdi
1000032a6:	je	0x1000032af
1000032a8:	call	0x100019716 ## symbol stub for: _free
1000032ad:	mov	eax, dword ptr [rbx]
1000032af:	sub	eax, 0x1
1000032b2:	mov	dword ptr [rbx], eax
1000032b4:	jb	0x1000032bb
1000032b6:	mov	rdi, qword ptr [r14]
1000032b9:	jmp	0x100003299
1000032bb:	mov	rdi, qword ptr [r14]
1000032be:	call	0x100019716 ## symbol stub for: _free
1000032c3:	mov	qword ptr [r14], 0x0
1000032ca:	lea	rax, [rip + 0x2648f]
1000032d1:	mov	rdi, qword ptr [rax]
1000032d4:	add	rsp, 0x8
1000032d8:	test	rdi, rdi
1000032db:	je	0x1000032e8
1000032dd:	pop	rbx
1000032de:	pop	r14
1000032e0:	pop	r15
1000032e2:	pop	rbp
1000032e3:	jmp	0x1000196ce ## symbol stub for: _fclose
1000032e8:	pop	rbx
1000032e9:	pop	r14
1000032eb:	pop	r15
1000032ed:	pop	rbp
1000032ee:	ret
1000032ef:	push	rbp
1000032f0:	mov	rbp, rsp
1000032f3:	mov	rsi, rdi
1000032f6:	mov	edi, 0x5
1000032fb:	call	0x100002e30
100003300:	push	rbp
100003301:	mov	rbp, rsp
100003304:	push	r15
100003306:	push	r14
100003308:	push	rbx
100003309:	push	rax
10000330a:	mov	r14d, esi
10000330d:	mov	rbx, rdi
100003310:	lea	rax, [rip + 0x26145]
100003317:	cmp	dword ptr [rax], 0x0
10000331a:	je	0x10000339a
10000331c:	test	rbx, rbx
10000331f:	je	0x10000335e
100003321:	cmp	byte ptr [rbx], 0x0
100003324:	je	0x100003345
100003326:	lea	rax, [rip + 0x27c03]
10000332d:	mov	rsi, qword ptr [rax]
100003330:	mov	rdi, rbx
100003333:	call	0x10001970a ## symbol stub for: _fputs
100003338:	lea	rax, [rip + 0x2658d]
10000333f:	mov	dword ptr [rax], 0x1
100003345:	test	r14d, r14d
100003348:	jne	0x100003363
10000334a:	cmp	byte ptr [rbx], 0x0
10000334d:	je	0x10000338b
10000334f:	lea	rax, [rip + 0x26576]
100003356:	mov	dword ptr [rax], 0x1
10000335c:	jmp	0x10000338b
10000335e:	test	r14d, r14d
100003361:	je	0x10000338b
100003363:	lea	r15, [rip + 0x26562]
10000336a:	cmp	dword ptr [r15], 0x0
10000336e:	je	0x10000338b
100003370:	lea	rax, [rip + 0x27bb9]
100003377:	mov	rsi, qword ptr [rax]
10000337a:	mov	edi, 0xa
10000337f:	call	0x100019704 ## symbol stub for: _fputc
100003384:	mov	dword ptr [r15], 0x0
10000338b:	lea	rax, [rip + 0x27b9e]
100003392:	mov	rdi, qword ptr [rax]
100003395:	call	0x1000196e6 ## symbol stub for: _fflush
10000339a:	lea	r15, [rip + 0x263bf]
1000033a1:	mov	rsi, qword ptr [r15]
1000033a4:	test	rsi, rsi
1000033a7:	je	0x1000033e1
1000033a9:	test	rbx, rbx
1000033ac:	je	0x1000033ec
1000033ae:	cmp	byte ptr [rbx], 0x0
1000033b1:	je	0x1000033c8
1000033b3:	mov	rdi, rbx
1000033b6:	call	0x10001970a ## symbol stub for: _fputs
1000033bb:	lea	rax, [rip + 0x2650e]
1000033c2:	mov	dword ptr [rax], 0x1
1000033c8:	test	r14d, r14d
1000033cb:	jne	0x1000033f1
1000033cd:	cmp	byte ptr [rbx], 0x0
1000033d0:	je	0x100003410
1000033d2:	lea	rax, [rip + 0x264f7]
1000033d9:	mov	dword ptr [rax], 0x1
1000033df:	jmp	0x100003410
1000033e1:	add	rsp, 0x8
1000033e5:	pop	rbx
1000033e6:	pop	r14
1000033e8:	pop	r15
1000033ea:	pop	rbp
1000033eb:	ret
1000033ec:	test	r14d, r14d
1000033ef:	je	0x100003410
1000033f1:	lea	rbx, [rip + 0x264d8]
1000033f8:	cmp	dword ptr [rbx], 0x0
1000033fb:	je	0x100003410
1000033fd:	mov	rsi, qword ptr [r15]
100003400:	mov	edi, 0xa
100003405:	call	0x100019704 ## symbol stub for: _fputc
10000340a:	mov	dword ptr [rbx], 0x0
100003410:	mov	rdi, qword ptr [r15]
100003413:	add	rsp, 0x8
100003417:	pop	rbx
100003418:	pop	r14
10000341a:	pop	r15
10000341c:	pop	rbp
10000341d:	jmp	0x1000196e6 ## symbol stub for: _fflush
100003422:	push	rbp
100003423:	mov	rbp, rsp
100003426:	push	r15
100003428:	push	r14
10000342a:	push	r12
10000342c:	push	rbx
10000342d:	mov	r14, rsi
100003430:	mov	r15, rdi
100003433:	lea	rax, [rip + 0x26022]
10000343a:	cmp	dword ptr [rax], 0x0
10000343d:	je	0x10000348f
10000343f:	lea	r12, [rip + 0x26486]
100003446:	cmp	dword ptr [r12], 0x0
10000344b:	je	0x100003461
10000344d:	lea	rax, [rip + 0x27adc]
100003454:	mov	rsi, qword ptr [rax]
100003457:	mov	edi, 0xa
10000345c:	call	0x100019704 ## symbol stub for: _fputc
100003461:	lea	rbx, [rip + 0x27ac8]
100003468:	mov	rdi, qword ptr [rbx]
10000346b:	lea	rsi, [rip + 0x18218] ## literal pool for: "%s%s\n"
100003472:	mov	rdx, r15
100003475:	mov	rcx, r14
100003478:	xor	eax, eax
10000347a:	call	0x1000196fe ## symbol stub for: _fprintf
10000347f:	mov	dword ptr [r12], 0x0
100003487:	mov	rdi, qword ptr [rbx]
10000348a:	call	0x1000196e6 ## symbol stub for: _fflush
10000348f:	lea	rbx, [rip + 0x262ca]
100003496:	mov	rax, qword ptr [rbx]
100003499:	test	rax, rax
10000349c:	je	0x1000034eb
10000349e:	lea	r12, [rip + 0x2642b]
1000034a5:	cmp	dword ptr [r12], 0x0
1000034aa:	je	0x1000034bc
1000034ac:	mov	edi, 0xa
1000034b1:	mov	rsi, rax
1000034b4:	call	0x100019704 ## symbol stub for: _fputc
1000034b9:	mov	rax, qword ptr [rbx]
1000034bc:	lea	rsi, [rip + 0x181c7] ## literal pool for: "%s%s\n"
1000034c3:	mov	rdi, rax
1000034c6:	mov	rdx, r15
1000034c9:	mov	rcx, r14
1000034cc:	xor	eax, eax
1000034ce:	call	0x1000196fe ## symbol stub for: _fprintf
1000034d3:	mov	dword ptr [r12], 0x0
1000034db:	mov	rdi, qword ptr [rbx]
1000034de:	pop	rbx
1000034df:	pop	r12
1000034e1:	pop	r14
1000034e3:	pop	r15
1000034e5:	pop	rbp
1000034e6:	jmp	0x1000196e6 ## symbol stub for: _fflush
1000034eb:	pop	rbx
1000034ec:	pop	r12
1000034ee:	pop	r14
1000034f0:	pop	r15
1000034f2:	pop	rbp
1000034f3:	ret
1000034f4:	push	rbp
1000034f5:	mov	rbp, rsp
1000034f8:	push	r15
1000034fa:	push	r14
1000034fc:	push	r12
1000034fe:	push	rbx
1000034ff:	mov	r14, rsi
100003502:	mov	r15, rdi
100003505:	lea	rax, [rip + 0x25f50]
10000350c:	cmp	dword ptr [rax], 0x0
10000350f:	je	0x100003561
100003511:	lea	r12, [rip + 0x263b4]
100003518:	cmp	dword ptr [r12], 0x0
10000351d:	je	0x100003533
10000351f:	lea	rax, [rip + 0x27a0a]
100003526:	mov	rsi, qword ptr [rax]
100003529:	mov	edi, 0xa
10000352e:	call	0x100019704 ## symbol stub for: _fputc
100003533:	lea	rbx, [rip + 0x279f6]
10000353a:	mov	rdi, qword ptr [rbx]
10000353d:	lea	rsi, [rip + 0x1814c] ## literal pool for: "\tzip warning: %s%s\n"
100003544:	mov	rdx, r15
100003547:	mov	rcx, r14
10000354a:	xor	eax, eax
10000354c:	call	0x1000196fe ## symbol stub for: _fprintf
100003551:	mov	dword ptr [r12], 0x0
100003559:	mov	rdi, qword ptr [rbx]
10000355c:	call	0x1000196e6 ## symbol stub for: _fflush
100003561:	lea	rbx, [rip + 0x261f8]
100003568:	mov	rax, qword ptr [rbx]
10000356b:	test	rax, rax
10000356e:	je	0x1000035bd
100003570:	lea	r12, [rip + 0x26359]
100003577:	cmp	dword ptr [r12], 0x0
10000357c:	je	0x10000358e
10000357e:	mov	edi, 0xa
100003583:	mov	rsi, rax
100003586:	call	0x100019704 ## symbol stub for: _fputc
10000358b:	mov	rax, qword ptr [rbx]
10000358e:	lea	rsi, [rip + 0x180fb] ## literal pool for: "\tzip warning: %s%s\n"
100003595:	mov	rdi, rax
100003598:	mov	rdx, r15
10000359b:	mov	rcx, r14
10000359e:	xor	eax, eax
1000035a0:	call	0x1000196fe ## symbol stub for: _fprintf
1000035a5:	mov	dword ptr [r12], 0x0
1000035ad:	mov	rdi, qword ptr [rbx]
1000035b0:	pop	rbx
1000035b1:	pop	r12
1000035b3:	pop	r14
1000035b5:	pop	r15
1000035b7:	pop	rbp
1000035b8:	jmp	0x1000196e6 ## symbol stub for: _fflush
1000035bd:	pop	rbx
1000035be:	pop	r12
1000035c0:	pop	r14
1000035c2:	pop	r15
1000035c4:	pop	rbp
1000035c5:	ret
1000035c6:	push	rbp
1000035c7:	mov	rbp, rsp
1000035ca:	cmp	edi, 0x1
1000035cd:	lea	rax, [rip + 0x180d0] ## literal pool for: "Verify password: "
1000035d4:	lea	rdi, [rip + 0x180db] ## literal pool for: "Enter password: "
1000035db:	cmove	rdi, rax
1000035df:	call	0x100016398
1000035e4:	test	rax, rax
1000035e7:	je	0x1000035ed
1000035e9:	xor	eax, eax
1000035eb:	pop	rbp
1000035ec:	ret
1000035ed:	lea	rsi, [rip + 0x180d3] ## literal pool for: "stderr is not a tty"
1000035f4:	mov	edi, 0x10
1000035f9:	call	0x100002e30
1000035fe:	push	rbp
1000035ff:	mov	rbp, rsp
100003602:	push	r15
100003604:	push	r14
100003606:	push	rbx
100003607:	push	rax
100003608:	mov	rbx, rsi
10000360b:	mov	r15, rdi
10000360e:	mov	rdi, rsi
100003611:	mov	rsi, r15
100003614:	call	0x100011614
100003619:	test	eax, eax
10000361b:	jne	0x10000363f
10000361d:	lea	rax, [rip + 0x261fc]
100003624:	mov	esi, dword ptr [rax]
100003626:	test	esi, esi
100003628:	je	0x100003632
10000362a:	mov	rdi, rbx
10000362d:	call	0x100011897
100003632:	xor	eax, eax
100003634:	add	rsp, 0x8
100003638:	pop	rbx
100003639:	pop	r14
10000363b:	pop	r15
10000363d:	pop	rbp
10000363e:	ret
10000363f:	mov	r14d, eax
100003642:	lea	rdi, [rip + 0x18092] ## literal pool for: "new zip file left as: "
100003649:	mov	rsi, r15
10000364c:	call	0x1000034f4
100003651:	lea	rbx, [rip + 0x26198]
100003658:	mov	rdi, qword ptr [rbx]
10000365b:	call	0x100019716 ## symbol stub for: _free
100003660:	mov	qword ptr [rbx], 0x0
100003667:	lea	rsi, [rip + 0x18084] ## literal pool for: "was replacing split file"
10000366e:	mov	edi, r14d
100003671:	call	0x100002e30
100003676:	push	rbp
100003677:	mov	rbp, rsp
10000367a:	xor	eax, eax
10000367c:	pop	rbp
10000367d:	ret
10000367e:	push	rbp
10000367f:	mov	rbp, rsp
100003682:	push	r15
100003684:	push	r14
100003686:	push	r13
100003688:	push	r12
10000368a:	push	rbx
10000368b:	sub	rsp, 0x138
100003692:	mov	rax, qword ptr [rip + 0x20977] ## literal pool symbol address: ___stack_chk_guard
100003699:	mov	rax, qword ptr [rax]
10000369c:	mov	qword ptr [rbp - 0x30], rax
1000036a0:	lea	rbx, [rbp - 0x118]
1000036a7:	mov	dword ptr [rbx], edi
1000036a9:	lea	r14, [rbp - 0x158]
1000036b0:	mov	qword ptr [r14], rsi
1000036b3:	xor	eax, eax
1000036b5:	mov	dword ptr [rbp - 0x11c], eax
1000036bb:	mov	dword ptr [rbp - 0x114], eax
1000036c1:	mov	dword ptr [rbp - 0x124], eax
1000036c7:	mov	qword ptr [rbp - 0xb0], rax
1000036ce:	mov	dword ptr [rbp - 0xb8], eax
1000036d4:	mov	dword ptr [rbp - 0x148], eax
1000036da:	mov	dword ptr [rbp - 0x144], eax
1000036e0:	mov	qword ptr [rbp - 0xd0], rax
1000036e7:	lea	rax, [rip + 0x25fd6]
1000036ee:	mov	dword ptr [rax], 0x1
1000036f4:	mov	rax, qword ptr [rip + 0x2092d] ## literal pool symbol address: ___stdoutp
1000036fb:	mov	rax, qword ptr [rax]
1000036fe:	lea	rcx, [rip + 0x2782b]
100003705:	mov	qword ptr [rcx], rax
100003708:	mov	rax, qword ptr [rip + 0x20911] ## literal pool symbol address: ___stdinp
10000370f:	mov	rax, qword ptr [rax]
100003712:	mov	qword ptr [rbp - 0x100], rax
100003719:	call	0x1000150d6
10000371e:	call	0x100019860 ## symbol stub for: _tzset
100003723:	mov	rdi, rbx
100003726:	mov	rsi, r14
100003729:	call	0x100015a33
10000372e:	mov	eax, dword ptr [rbx]
100003730:	cmp	eax, 0x1
100003733:	jne	0x10000374d
100003735:	mov	edi, 0x1
10000373a:	call	0x100019746 ## symbol stub for: _isatty
10000373f:	test	eax, eax
100003741:	jne	0x1000083e1
100003747:	mov	eax, dword ptr [rbp - 0x118]
10000374d:	cmp	eax, 0x2
100003750:	jne	0x10000378e
100003752:	mov	rax, qword ptr [rbp - 0x158]
100003759:	mov	rdi, qword ptr [rax + 0x8]
10000375d:	lea	rsi, [rip + 0x18ce2] ## literal pool for: "-v"
100003764:	call	0x10001981e ## symbol stub for: _strcmp
100003769:	test	eax, eax
10000376b:	jne	0x10000378e
10000376d:	mov	edi, 0x1
100003772:	call	0x100019746 ## symbol stub for: _isatty
100003777:	test	eax, eax
100003779:	jne	0x10000840c
10000377f:	xor	edi, edi
100003781:	call	0x100019746 ## symbol stub for: _isatty
100003786:	test	eax, eax
100003788:	jne	0x10000840c
10000378e:	lea	rdx, [rip + 0x18cb4] ## literal pool for: "ZIPOPT"
100003795:	lea	rcx, [rip + 0x18cb4] ## literal pool for: "ZIP"
10000379c:	lea	rdi, [rbp - 0x118]
1000037a3:	lea	r14, [rbp - 0x158]
1000037aa:	mov	rsi, r14
1000037ad:	call	0x1000156c4
1000037b2:	lea	rax, [rip + 0x26037]
1000037b9:	xor	r12d, r12d
1000037bc:	mov	qword ptr [rax], r12
1000037bf:	lea	rax, [rip + 0x27792]
1000037c6:	mov	qword ptr [rbp - 0x150], rax
1000037cd:	mov	qword ptr [rax], r12
1000037d0:	lea	rax, [rip + 0x26021]
1000037d7:	mov	qword ptr [rax], r12
1000037da:	lea	rbx, [rip + 0x56dd]
1000037e1:	mov	edi, 0x2
1000037e6:	mov	rsi, rbx
1000037e9:	call	0x1000197f4 ## symbol stub for: _signal
1000037ee:	mov	edi, 0xf
1000037f3:	mov	rsi, rbx
1000037f6:	call	0x1000197f4 ## symbol stub for: _signal
1000037fb:	mov	edi, 0x6
100003800:	mov	rsi, rbx
100003803:	call	0x1000197f4 ## symbol stub for: _signal
100003808:	mov	edi, 0xa
10000380d:	mov	rsi, rbx
100003810:	call	0x1000197f4 ## symbol stub for: _signal
100003815:	mov	edi, 0x4
10000381a:	mov	rsi, rbx
10000381d:	call	0x1000197f4 ## symbol stub for: _signal
100003822:	mov	edi, 0xb
100003827:	mov	rsi, rbx
10000382a:	call	0x1000197f4 ## symbol stub for: _signal
10000382f:	mov	rdi, qword ptr [r14]
100003832:	xor	esi, esi
100003834:	call	0x1000137b5
100003839:	lea	rdi, [rbp - 0xd0]
100003840:	mov	qword ptr [rdi], rax
100003843:	lea	rdx, [rbp - 0x114]
10000384a:	mov	dword ptr [rdx], r12d
10000384d:	sub	rsp, 0x8
100003851:	lea	r13, [rbp - 0x144]
100003858:	lea	r15, [rbp - 0x148]
10000385f:	lea	rsi, [rbp - 0x11c]
100003866:	lea	rcx, [rbp - 0x124]
10000386d:	lea	r8, [rbp - 0xb0]
100003874:	lea	r9, [rbp - 0xb8]
10000387b:	push	r12
10000387d:	push	r13
10000387f:	push	r15
100003881:	call	0x100013a58
100003886:	add	rsp, 0x20
10000388a:	test	rax, rax
10000388d:	je	0x1000045db
100003893:	lea	r12, [rip + 0x534e]
10000389a:	lea	rbx, [rbp - 0xd0]
1000038a1:	lea	r14, [rip + 0x5214]
1000038a8:	mov	ecx, 0x0
1000038ad:	mov	qword ptr [rbp - 0x108], rcx
1000038b4:	xor	ecx, ecx
1000038b6:	mov	qword ptr [rbp - 0xc0], rcx
1000038bd:	mov	dword ptr [rbp - 0x110], 0x0
1000038c7:	mov	dword ptr [rbp - 0xb4], 0x0
1000038d1:	mov	dword ptr [rbp - 0x120], 0x0
1000038db:	mov	dword ptr [rbp - 0xd8], 0x0
1000038e5:	mov	dword ptr [rbp - 0xa4], 0x0
1000038ef:	mov	dword ptr [rbp - 0xf8], 0x0
1000038f9:	mov	dword ptr [rbp - 0xf0], 0x0
100003903:	mov	dword ptr [rbp - 0xc4], 0x0
10000390d:	mov	dword ptr [rbp - 0xe0], 0x0
100003917:	lea	rcx, [rax - 0x30]
10000391b:	cmp	rcx, 0x4a
10000391f:	ja	0x10000393b
100003921:	movsxd	rcx, dword ptr [r14 + 4*rcx]
100003925:	add	rcx, r14
100003928:	jmp	rcx
10000392a:	add	eax, -0x30
10000392d:	lea	rcx, [rip + 0x25b1c]
100003934:	mov	dword ptr [rcx], eax
100003936:	jmp	0x10000425e
10000393b:	lea	rcx, [rax - 0x105]
100003942:	cmp	rcx, 0x40
100003946:	ja	0x1000039b4
100003948:	movsxd	rcx, dword ptr [r12 + 4*rcx]
10000394c:	add	rcx, r12
10000394f:	jmp	rcx
100003951:	cmp	dword ptr [rbp - 0xb8], 0x0
100003958:	je	0x1000041e9
10000395e:	lea	rax, [rip + 0x25da7]
100003965:	jmp	0x1000041b4
10000396a:	cmp	rax, 0x141
100003970:	je	0x1000062aa
100003976:	cmp	dword ptr [rbp - 0x11c], 0x2
10000397d:	jne	0x100003999
10000397f:	mov	rax, qword ptr [rbp - 0xd0]
100003986:	mov	rdi, qword ptr [rax + 0x8]
10000398a:	call	0x100019830 ## symbol stub for: _strlen
10000398f:	cmp	rax, 0x2
100003993:	je	0x1000062aa
100003999:	lea	rax, [rip + 0x25abc]
1000039a0:	mov	dword ptr [rax], 0x1
1000039a6:	lea	rax, [rip + 0x25cff]
1000039ad:	inc	dword ptr [rax]
1000039af:	jmp	0x10000425e
1000039b4:	cmp	rax, 0xffff
1000039ba:	jne	0x100008430
1000039c0:	cmp	dword ptr [rbp - 0xc0], 0x0
1000039c7:	jne	0x1000039e7
1000039c9:	lea	rax, [rip + 0x25cd0]
1000039d0:	cmp	dword ptr [rax], 0x2
1000039d3:	je	0x1000039e7
1000039d5:	lea	rax, [rip + 0x25f1c]
1000039dc:	cmp	qword ptr [rax], 0x0
1000039e0:	jne	0x1000039e7
1000039e2:	call	0x100009304
1000039e7:	mov	r12, qword ptr [rbp - 0xb0]
1000039ee:	mov	rdi, r12
1000039f1:	lea	rsi, [rip + 0x18c95] ## literal pool for: "--"
1000039f8:	call	0x10001981e ## symbol stub for: _strcmp
1000039fd:	or	eax, dword ptr [rbp - 0x120]
100003a03:	je	0x1000042a5
100003a09:	mov	rcx, qword ptr [rbp - 0xc0]
100003a10:	lea	eax, [rcx - 0x3]
100003a13:	cmp	eax, 0x2
100003a16:	jb	0x1000042cb
100003a1c:	test	ecx, ecx
100003a1e:	je	0x100004365
100003a24:	cmp	ecx, 0x6
100003a27:	jne	0x100004500
100003a2d:	mov	edi, 0x52
100003a32:	mov	rsi, r12
100003a35:	call	0x1000090a4
100003a3a:	mov	rdi, qword ptr [rbp - 0xb0]
100003a41:	call	0x100019716 ## symbol stub for: _free
100003a46:	cmp	dword ptr [rbp - 0xc4], 0x0
100003a4d:	jne	0x100003a5b
100003a4f:	mov	eax, dword ptr [rbp - 0x114]
100003a55:	mov	dword ptr [rbp - 0xc4], eax
100003a5b:	mov	eax, 0x6
100003a60:	jmp	0x10000430d
100003a65:	lea	rax, [rip + 0x25c34]
100003a6c:	cmp	dword ptr [rax], 0x2
100003a6f:	jne	0x100004258
100003a75:	jmp	0x1000083f4
100003a7a:	mov	rbx, qword ptr [rbp - 0xb0]
100003a81:	lea	rsi, [rip + 0x18a7a] ## literal pool for: "-"
100003a88:	mov	rdi, rbx
100003a8b:	call	0x10001981e ## symbol stub for: _strcmp
100003a90:	test	eax, eax
100003a92:	je	0x100004181
100003a98:	mov	rdi, rbx
100003a9b:	call	0x100015e38
100003aa0:	lea	rcx, [rip + 0x25e01]
100003aa7:	mov	qword ptr [rcx], rax
100003aaa:	test	rax, rax
100003aad:	je	0x100004181
100003ab3:	cmp	rax, -0x1
100003ab7:	je	0x100008707
100003abd:	lea	rdx, [rip + 0x25de0]
100003ac4:	cmp	dword ptr [rdx], 0x0
100003ac7:	lea	r12, [rip + 0x511a]
100003ace:	lea	rbx, [rbp - 0xd0]
100003ad5:	jne	0x100003add
100003ad7:	mov	dword ptr [rdx], 0x1
100003add:	cmp	rax, 0x3ff
100003ae3:	ja	0x100004354
100003ae9:	shl	rax, 0x14
100003aed:	jmp	0x100003f20
100003af2:	mov	rdi, qword ptr [rbp - 0xb0]
100003af9:	lea	rsi, [rip + 0x18a3d] ## literal pool for: "%4d-%2d-%2d"
100003b00:	lea	rdx, [rbp - 0xa0]
100003b07:	lea	rcx, [rbp - 0x140]
100003b0e:	lea	r8, [rbp - 0xe8]
100003b15:	xor	eax, eax
100003b17:	call	0x100019806 ## symbol stub for: _sscanf
100003b1c:	cmp	eax, 0x3
100003b1f:	je	0x100003b54
100003b21:	mov	rdi, qword ptr [rbp - 0xb0]
100003b28:	lea	rsi, [rip + 0x18a1a] ## literal pool for: "%2d%2d%4d"
100003b2f:	lea	rdx, [rbp - 0x140]
100003b36:	lea	rcx, [rbp - 0xe8]
100003b3d:	lea	r8, [rbp - 0xa0]
100003b44:	xor	eax, eax
100003b46:	call	0x100019806 ## symbol stub for: _sscanf
100003b4b:	cmp	eax, 0x3
100003b4e:	jne	0x100008450
100003b54:	mov	esi, dword ptr [rbp - 0x140]
100003b5a:	lea	eax, [rsi - 0x1]
100003b5d:	cmp	eax, 0xb
100003b60:	ja	0x100008450
100003b66:	mov	edx, dword ptr [rbp - 0xe8]
100003b6c:	lea	eax, [rdx - 0x1]
100003b6f:	cmp	eax, 0x1f
100003b72:	jae	0x100008450
100003b78:	mov	edi, dword ptr [rbp - 0xa0]
100003b7e:	xor	ecx, ecx
100003b80:	xor	r8d, r8d
100003b83:	xor	r9d, r9d
100003b86:	call	0x10001147d
100003b8b:	lea	rcx, [rip + 0x25c4e]
100003b92:	jmp	0x100003f20
100003b97:	cmp	dword ptr [rip + 0x2566a], 0x1
100003b9e:	jne	0x100008336
100003ba4:	mov	dword ptr [rip + 0x2565a], 0x4
100003bae:	jmp	0x10000425e
100003bb3:	mov	byte ptr [rip + 0x57406], 0x1
100003bba:	jmp	0x10000425e
100003bbf:	lea	rax, [rip + 0x25aea]
100003bc6:	jmp	0x100004258
100003bcb:	cmp	dword ptr [rip + 0x25636], 0x1
100003bd2:	jne	0x100008336
100003bd8:	mov	dword ptr [rip + 0x25626], 0x3
100003be2:	jmp	0x10000425e
100003be7:	mov	rsi, qword ptr [rbp - 0xb0]
100003bee:	lea	rdi, [rip + 0x189df] ## literal pool for: "deflate"
100003bf5:	xor	edx, edx
100003bf7:	mov	ecx, 0x1
100003bfc:	call	0x100015f3f
100003c01:	mov	ecx, 0x8
100003c06:	test	eax, eax
100003c08:	jne	0x100003c31
100003c0a:	mov	rsi, qword ptr [rbp - 0xb0]
100003c11:	lea	rdi, [rip + 0x17af5] ## literal pool for: "store"
100003c18:	xor	edx, edx
100003c1a:	mov	ecx, 0x1
100003c1f:	call	0x100015f3f
100003c24:	mov	ecx, 0x0
100003c29:	test	eax, eax
100003c2b:	je	0x10000864a
100003c31:	lea	rax, [rip + 0x25814]
100003c38:	mov	dword ptr [rax], ecx
100003c3a:	jmp	0x10000419c
100003c3f:	lea	rax, [rip + 0x25802]
100003c46:	jmp	0x1000041b4
100003c4b:	lea	rax, [rip + 0x257fa]
100003c52:	xor	ecx, ecx
100003c54:	mov	dword ptr [rax], ecx
100003c56:	lea	rax, [rip + 0x257f3]
100003c5d:	jmp	0x100004109
100003c62:	lea	rcx, [rip + 0x25b27]
100003c69:	mov	dword ptr [rcx], 0x1
100003c6f:	mov	rsi, qword ptr [rbp - 0xb0]
100003c76:	mov	edi, eax
100003c78:	call	0x1000090a4
100003c7d:	jmp	0x10000419c
100003c82:	mov	byte ptr [rip + 0x57347], 0x1
100003c89:	jmp	0x10000425e
100003c8e:	mov	dword ptr [rbp - 0xe0], 0x1
100003c98:	xor	eax, eax
100003c9a:	mov	qword ptr [rbp - 0x100], rax
100003ca1:	jmp	0x10000425e
100003ca6:	lea	rax, [rip + 0x257a7]
100003cad:	jmp	0x1000041b4
100003cb2:	lea	rbx, [rip + 0x25aef]
100003cb9:	mov	rdi, qword ptr [rbx]
100003cbc:	test	rdi, rdi
100003cbf:	je	0x100003cc6
100003cc1:	call	0x100019716 ## symbol stub for: _free
100003cc6:	mov	rax, qword ptr [rbp - 0xb0]
100003ccd:	mov	qword ptr [rbx], rax
100003cd0:	mov	dword ptr [rbp - 0xb4], 0x0
100003cda:	jmp	0x100004500
100003cdf:	lea	rax, [rip + 0x259ba]
100003ce6:	cmp	dword ptr [rax], 0x1
100003ce9:	jne	0x10000406d
100003cef:	jmp	0x1000083f4
100003cf4:	mov	byte ptr [rip + 0x572bd], 0x1
100003cfb:	jmp	0x10000425e
100003d00:	mov	rax, qword ptr [rbp - 0xb0]
100003d07:	lea	rcx, [rip + 0x25762]
100003d0e:	jmp	0x100003d87
100003d10:	lea	rax, [rip + 0x259a1]
100003d17:	jmp	0x100004258
100003d1c:	mov	rdi, qword ptr [rbp - 0xb0]
100003d23:	call	0x100009c3f
100003d28:	lea	rcx, [rip + 0x25ae9]
100003d2f:	mov	qword ptr [rcx], rax
100003d32:	mov	rdi, qword ptr [rbp - 0xb0]
100003d39:	call	0x100019716 ## symbol stub for: _free
100003d3e:	mov	dword ptr [rbp - 0x110], 0x1
100003d48:	jmp	0x10000425e
100003d4d:	cmp	dword ptr [rbp - 0xb8], 0x0
100003d54:	je	0x1000041ad
100003d5a:	lea	rax, [rip + 0x256ff]
100003d61:	jmp	0x10000406d
100003d66:	mov	byte ptr [rip + 0x5724f], 0x1
100003d6d:	jmp	0x10000425e
100003d72:	mov	byte ptr [rip + 0x5723b], 0x1
100003d79:	mov	rax, qword ptr [rbp - 0xb0]
100003d80:	lea	rcx, [rip + 0x25a29]
100003d87:	mov	qword ptr [rcx], rax
100003d8a:	jmp	0x10000425e
100003d8f:	cmp	dword ptr [rip + 0x25472], 0x1
100003d96:	jne	0x100008336
100003d9c:	mov	dword ptr [rip + 0x25462], 0x0
100003da6:	jmp	0x10000425e
100003dab:	lea	rax, [rip + 0x259f6]
100003db2:	mov	rdi, qword ptr [rax]
100003db5:	mov	dword ptr [rbp - 0xb4], 0x1
100003dbf:	test	rdi, rdi
100003dc2:	jne	0x1000041a3
100003dc8:	jmp	0x10000425e
100003dcd:	lea	rax, [rip + 0x258d0]
100003dd4:	jmp	0x100004258
100003dd9:	mov	eax, 0x1
100003dde:	mov	qword ptr [rbp - 0x108], rax
100003de5:	jmp	0x10000425e
100003dea:	lea	rax, [rip + 0x258b7]
100003df1:	jmp	0x100004258
100003df6:	mov	byte ptr [rip + 0x571c7], 0x1
100003dfd:	jmp	0x10000425e
100003e02:	mov	dword ptr [rbp - 0xf8], 0x1
100003e0c:	jmp	0x10000425e
100003e11:	lea	rax, [rip + 0x258a4]
100003e18:	jmp	0x100004258
100003e1d:	cmp	dword ptr [rbp - 0xb8], 0x0
100003e24:	je	0x1000041bf
100003e2a:	lea	rax, [rip + 0x25927]
100003e31:	jmp	0x1000041b4
100003e36:	lea	rbx, [rip + 0x25933]
100003e3d:	mov	rdi, qword ptr [rbx]
100003e40:	test	rdi, rdi
100003e43:	je	0x100003e4a
100003e45:	call	0x100019716 ## symbol stub for: _free
100003e4a:	mov	rax, qword ptr [rbp - 0xb0]
100003e51:	mov	qword ptr [rbx], rax
100003e54:	jmp	0x100004500
100003e59:	lea	rax, [rip + 0x2585c]
100003e60:	jmp	0x10000406d
100003e65:	mov	dword ptr [rbp - 0xf0], 0x1
100003e6f:	jmp	0x10000425e
100003e74:	lea	rax, [rip + 0x25849]
100003e7b:	jmp	0x100004258
100003e80:	mov	rdi, qword ptr [rbp - 0xb0]
100003e87:	lea	rsi, [rip + 0x186af] ## literal pool for: "%4d-%2d-%2d"
100003e8e:	lea	rdx, [rbp - 0xa0]
100003e95:	lea	rcx, [rbp - 0x140]
100003e9c:	lea	r8, [rbp - 0xe8]
100003ea3:	xor	eax, eax
100003ea5:	call	0x100019806 ## symbol stub for: _sscanf
100003eaa:	cmp	eax, 0x3
100003ead:	je	0x100003ee2
100003eaf:	mov	rdi, qword ptr [rbp - 0xb0]
100003eb6:	lea	rsi, [rip + 0x1868c] ## literal pool for: "%2d%2d%4d"
100003ebd:	lea	rdx, [rbp - 0x140]
100003ec4:	lea	rcx, [rbp - 0xe8]
100003ecb:	lea	r8, [rbp - 0xa0]
100003ed2:	xor	eax, eax
100003ed4:	call	0x100019806 ## symbol stub for: _sscanf
100003ed9:	cmp	eax, 0x3
100003edc:	jne	0x10000845c
100003ee2:	mov	esi, dword ptr [rbp - 0x140]
100003ee8:	lea	eax, [rsi - 0x1]
100003eeb:	cmp	eax, 0xb
100003eee:	ja	0x10000845c
100003ef4:	mov	edx, dword ptr [rbp - 0xe8]
100003efa:	lea	eax, [rdx - 0x1]
100003efd:	cmp	eax, 0x1f
100003f00:	jae	0x10000845c
100003f06:	mov	edi, dword ptr [rbp - 0xa0]
100003f0c:	xor	ecx, ecx
100003f0e:	xor	r8d, r8d
100003f11:	xor	r9d, r9d
100003f14:	call	0x10001147d
100003f19:	lea	rcx, [rip + 0x258c8]
100003f20:	mov	qword ptr [rcx], rax
100003f23:	jmp	0x10000419c
100003f28:	mov	rdi, qword ptr [rip + 0x57099]
100003f2f:	test	rdi, rdi
100003f32:	je	0x100003f39
100003f34:	call	0x100019716 ## symbol stub for: _free
100003f39:	mov	rax, qword ptr [rbp - 0xb0]
100003f40:	mov	qword ptr [rip + 0x57081], rax
100003f47:	jmp	0x10000425e
100003f4c:	cmp	dword ptr [rip + 0x252b5], 0x1
100003f53:	jne	0x100008336
100003f59:	mov	dword ptr [rip + 0x252a5], 0x2
100003f63:	jmp	0x10000425e
100003f68:	cmp	dword ptr [rbp - 0xb8], 0x0
100003f6f:	je	0x1000041cb
100003f75:	lea	rax, [rip + 0x2579c]
100003f7c:	jmp	0x1000041b4
100003f81:	lea	rax, [rip + 0x25728]
100003f88:	jmp	0x10000406d
100003f8d:	cmp	dword ptr [rbp - 0xb8], 0x0
100003f94:	je	0x1000041d7
100003f9a:	lea	rax, [rip + 0x257f7]
100003fa1:	jmp	0x1000041b4
100003fa6:	lea	rax, [rip + 0x25707]
100003fad:	jmp	0x100004258
100003fb2:	lea	rax, [rip + 0x254a3]
100003fb9:	mov	dword ptr [rax], 0x0
100003fbf:	lea	rcx, [rip + 0x256e6]
100003fc6:	mov	eax, dword ptr [rcx]
100003fc8:	test	eax, eax
100003fca:	je	0x10000425e
100003fd0:	dec	eax
100003fd2:	mov	dword ptr [rcx], eax
100003fd4:	jmp	0x10000425e
100003fd9:	lea	rax, [rip + 0x257a4]
100003fe0:	jmp	0x100004258
100003fe5:	lea	rax, [rip + 0x25724]
100003fec:	mov	dword ptr [rax], 0x0
100003ff2:	cmp	dword ptr [rbp - 0xb8], 0x0
100003ff9:	je	0x100004211
100003fff:	lea	rax, [rip + 0x256fa]
100004006:	mov	qword ptr [rax], 0x0
10000400d:	jmp	0x10000425e
100004012:	lea	rax, [rip + 0x2576f]
100004019:	jmp	0x100004258
10000401e:	cmp	dword ptr [rbp - 0xb8], 0x0
100004025:	je	0x1000041f2
10000402b:	lea	rax, [rip + 0x25736]
100004032:	jmp	0x1000041b4
100004037:	lea	rax, [rip + 0x25872]
10000403e:	jmp	0x100004258
100004043:	cmp	dword ptr [rbp - 0xb8], 0x0
10000404a:	je	0x1000041e0
100004050:	lea	rax, [rip + 0x25745]
100004057:	jmp	0x10000406d
100004059:	lea	rax, [rip + 0x25728]
100004060:	mov	dword ptr [rax], 0x1
100004066:	lea	rax, [rip + 0x25837]
10000406d:	mov	dword ptr [rax], 0x2
100004073:	jmp	0x10000425e
100004078:	cmp	dword ptr [rbp - 0xb8], 0x0
10000407f:	je	0x1000041fb
100004085:	lea	rax, [rip + 0x2567c]
10000408c:	jmp	0x1000041b4
100004091:	cmp	dword ptr [rbp - 0xb8], 0x0
100004098:	je	0x100004204
10000409e:	lea	rax, [rip + 0x2566b]
1000040a5:	jmp	0x1000041b4
1000040aa:	mov	rdi, qword ptr [rbp - 0xb0]
1000040b1:	test	rdi, rdi
1000040b4:	je	0x100004235
1000040ba:	cmp	byte ptr [rdi], 0x0
1000040bd:	je	0x100004319
1000040c3:	call	0x100015e38
1000040c8:	lea	rcx, [rip + 0x25629]
1000040cf:	mov	qword ptr [rcx], rax
1000040d2:	cmp	rax, -0x1
1000040d6:	je	0x100008630
1000040dc:	cmp	rax, 0x3ff
1000040e2:	jg	0x100004329
1000040e8:	shl	rax, 0x14
1000040ec:	mov	qword ptr [rcx], rax
1000040ef:	jmp	0x100004335
1000040f4:	lea	rax, [rip + 0x25685]
1000040fb:	mov	ecx, 0x1
100004100:	mov	dword ptr [rax], ecx
100004102:	lea	rax, [rip + 0x25687]
100004109:	mov	dword ptr [rax], ecx
10000410b:	jmp	0x10000425e
100004110:	cmp	dword ptr [rbp - 0xb8], 0x0
100004117:	je	0x100004248
10000411d:	lea	rax, [rip + 0x255f0]
100004124:	jmp	0x1000041b4
100004129:	mov	dword ptr [rbp - 0xa4], 0x1
100004133:	jmp	0x10000425e
100004138:	mov	dword ptr [rbp - 0xd8], 0x1
100004142:	jmp	0x10000425e
100004147:	lea	rax, [rip + 0x25572]
10000414e:	jmp	0x100004258
100004153:	lea	rax, [rip + 0x2576e]
10000415a:	jmp	0x100004258
10000415f:	lea	rax, [rip + 0x25562]
100004166:	jmp	0x100004258
10000416b:	cmp	dword ptr [rbp - 0xb8], 0x0
100004172:	je	0x100004251
100004178:	lea	rax, [rip + 0x252e9]
10000417f:	jmp	0x1000041b4
100004181:	lea	rax, [rip + 0x2571c]
100004188:	mov	dword ptr [rax], 0xffffffff
10000418e:	lea	r12, [rip + 0x4a53]
100004195:	lea	rbx, [rbp - 0xd0]
10000419c:	mov	rdi, qword ptr [rbp - 0xb0]
1000041a3:	call	0x100019716 ## symbol stub for: _free
1000041a8:	jmp	0x10000425e
1000041ad:	lea	rax, [rip + 0x252ac]
1000041b4:	mov	dword ptr [rax], 0x0
1000041ba:	jmp	0x10000425e
1000041bf:	lea	rax, [rip + 0x25592]
1000041c6:	jmp	0x100004258
1000041cb:	lea	rax, [rip + 0x25546]
1000041d2:	jmp	0x100004258
1000041d7:	lea	rax, [rip + 0x255ba]
1000041de:	jmp	0x100004258
1000041e0:	lea	rax, [rip + 0x255b5]
1000041e7:	jmp	0x100004258
1000041e9:	lea	rax, [rip + 0x2551c]
1000041f0:	jmp	0x100004258
1000041f2:	lea	rax, [rip + 0x2556f]
1000041f9:	jmp	0x100004258
1000041fb:	lea	rax, [rip + 0x25506]
100004202:	jmp	0x100004258
100004204:	lea	rax, [rip + 0x25505]
10000420b:	mov	dword ptr [rax], 0x1
100004211:	lea	rax, [rip + 0x254e8]
100004218:	cmp	qword ptr [rax], 0x0
10000421c:	jne	0x100004348
100004222:	lea	rcx, [rip + 0x254cf]
100004229:	mov	qword ptr [rcx], 0xa00000
100004230:	jmp	0x100004348
100004235:	lea	rax, [rip + 0x254bc]
10000423c:	mov	qword ptr [rax], 0xa00000
100004243:	jmp	0x100004341
100004248:	lea	rax, [rip + 0x254c5]
10000424f:	jmp	0x100004258
100004251:	lea	rax, [rip + 0x25210]
100004258:	mov	dword ptr [rax], 0x1
10000425e:	sub	rsp, 0x8
100004262:	mov	rdi, rbx
100004265:	lea	rsi, [rbp - 0x11c]
10000426c:	lea	rdx, [rbp - 0x114]
100004273:	lea	rcx, [rbp - 0x124]
10000427a:	lea	r8, [rbp - 0xb0]
100004281:	lea	r9, [rbp - 0xb8]
100004288:	push	0x0
10000428a:	push	r13
10000428c:	push	r15
10000428e:	call	0x100013a58
100004293:	add	rsp, 0x20
100004297:	test	rax, rax
10000429a:	jne	0x100003917
1000042a0:	jmp	0x100004513
1000042a5:	mov	dword ptr [rbp - 0x120], 0x1
1000042af:	cmp	dword ptr [rbp - 0xc0], 0x0
1000042b6:	lea	r12, [rip + 0x492b]
1000042bd:	lea	rbx, [rbp - 0xd0]
1000042c4:	jne	0x10000425e
1000042c6:	jmp	0x1000086aa
1000042cb:	cmp	dword ptr [rbp - 0xe0], 0x1
1000042d2:	jne	0x1000042eb
1000042d4:	mov	rdi, r12
1000042d7:	lea	rsi, [rip + 0x18224] ## literal pool for: "-"
1000042de:	call	0x10001981e ## symbol stub for: _strcmp
1000042e3:	test	eax, eax
1000042e5:	je	0x100008813
1000042eb:	mov	rdi, r12
1000042ee:	call	0x100009453
1000042f3:	cmp	dword ptr [rbp - 0xc0], 0x3
1000042fa:	jne	0x100004308
1000042fc:	mov	eax, dword ptr [rbp - 0x114]
100004302:	mov	dword ptr [rbp - 0xc4], eax
100004308:	mov	eax, 0x4
10000430d:	mov	qword ptr [rbp - 0xc0], rax
100004314:	jmp	0x100004500
100004319:	lea	rax, [rip + 0x253d8]
100004320:	mov	qword ptr [rax], 0xa00000
100004327:	jmp	0x10000433c
100004329:	cmp	rax, 0x7fff
10000432f:	jle	0x10000875e
100004335:	mov	rdi, qword ptr [rbp - 0xb0]
10000433c:	call	0x100019716 ## symbol stub for: _free
100004341:	lea	rax, [rip + 0x253b8]
100004348:	mov	qword ptr [rax], -0x1
10000434f:	jmp	0x10000425e
100004354:	cmp	rax, 0xffff
10000435a:	ja	0x10000419c
100004360:	jmp	0x10000879e
100004365:	mov	rdi, r12
100004368:	lea	rsi, [rip + 0x18193] ## literal pool for: "-"
10000436f:	call	0x10001981e ## symbol stub for: _strcmp
100004374:	test	eax, eax
100004376:	je	0x1000043a1
100004378:	mov	rdi, r12
10000437b:	call	0x100009c3f
100004380:	lea	rcx, [rip + 0x26bd1]
100004387:	mov	qword ptr [rcx], rax
10000438a:	test	rax, rax
10000438d:	je	0x1000086fb
100004393:	mov	rdi, qword ptr [rbp - 0xb0]
10000439a:	call	0x100019716 ## symbol stub for: _free
10000439f:	jmp	0x1000043a6
1000043a1:	call	0x1000093eb
1000043a6:	cmp	dword ptr [rbp - 0xa4], 0x0
1000043ad:	lea	r12, [rip + 0x252ec]
1000043b4:	je	0x1000043ea
1000043b6:	lea	rax, [rip + 0x26b73]
1000043bd:	mov	rbx, r12
1000043c0:	mov	r12, rax
1000043c3:	mov	rdi, qword ptr [rax]
1000043c6:	lea	rax, [rip + 0x26b8b]
1000043cd:	mov	rdx, qword ptr [rax]
1000043d0:	lea	rsi, [rip + 0x182f3] ## literal pool for: "sd: Zipfile name '%s'\n"
1000043d7:	xor	eax, eax
1000043d9:	call	0x1000196fe ## symbol stub for: _fprintf
1000043de:	mov	rdi, qword ptr [r12]
1000043e2:	mov	r12, rbx
1000043e5:	call	0x1000196e6 ## symbol stub for: _fflush
1000043ea:	lea	rax, [rip + 0x25417]
1000043f1:	cmp	qword ptr [rax], 0x0
1000043f5:	jne	0x100004430
1000043f7:	lea	rax, [rip + 0x26b5a]
1000043fe:	mov	rbx, qword ptr [rax]
100004401:	mov	rdi, rbx
100004404:	call	0x100019830 ## symbol stub for: _strlen
100004409:	lea	rdi, [rax + 0x1]
10000440d:	call	0x100019758 ## symbol stub for: _malloc
100004412:	lea	rcx, [rip + 0x253ef]
100004419:	mov	qword ptr [rcx], rax
10000441c:	test	rax, rax
10000441f:	je	0x1000086fb
100004425:	mov	rdi, rax
100004428:	mov	rsi, rbx
10000442b:	call	0x100019824 ## symbol stub for: _strcpy
100004430:	lea	rax, [rip + 0x253e1]
100004437:	cmp	qword ptr [rax], 0x0
10000443b:	jne	0x100004476
10000443d:	lea	rax, [rip + 0x26b14]
100004444:	mov	rbx, qword ptr [rax]
100004447:	mov	rdi, rbx
10000444a:	call	0x100019830 ## symbol stub for: _strlen
10000444f:	lea	rdi, [rax + 0x1]
100004453:	call	0x100019758 ## symbol stub for: _malloc
100004458:	lea	rcx, [rip + 0x253b9]
10000445f:	mov	qword ptr [rcx], rax
100004462:	test	rax, rax
100004465:	je	0x1000086fb
10000446b:	mov	rdi, rax
10000446e:	mov	rsi, rbx
100004471:	call	0x100019824 ## symbol stub for: _strcpy
100004476:	mov	eax, 0x3
10000447b:	cmp	dword ptr [rbp - 0xe0], 0x0
100004482:	je	0x1000044e2
100004484:	mov	rax, qword ptr [rip + 0x1fb95] ## literal pool symbol address: ___stdinp
10000448b:	mov	rdi, qword ptr [rax]
10000448e:	call	0x1000106d0
100004493:	mov	rbx, rax
100004496:	mov	eax, 0x3
10000449b:	test	rbx, rbx
10000449e:	je	0x1000044e2
1000044a0:	cmp	dword ptr [r12], 0x2
1000044a5:	jne	0x1000044b6
1000044a7:	mov	edi, 0x52
1000044ac:	mov	rsi, rbx
1000044af:	call	0x1000090a4
1000044b4:	jmp	0x1000044be
1000044b6:	mov	rdi, rbx
1000044b9:	call	0x100009453
1000044be:	mov	rdi, rbx
1000044c1:	call	0x100019716 ## symbol stub for: _free
1000044c6:	mov	rax, qword ptr [rip + 0x1fb53] ## literal pool symbol address: ___stdinp
1000044cd:	mov	rdi, qword ptr [rax]
1000044d0:	call	0x1000106d0
1000044d5:	mov	rbx, rax
1000044d8:	test	rax, rax
1000044db:	jne	0x1000044a0
1000044dd:	mov	eax, 0x4
1000044e2:	cmp	dword ptr [r12], 0x2
1000044e7:	mov	ecx, 0x6
1000044ec:	cmove	eax, ecx
1000044ef:	mov	qword ptr [rbp - 0xc0], rax
1000044f6:	mov	dword ptr [rbp - 0xe0], 0x0
100004500:	lea	r12, [rip + 0x46e1]
100004507:	lea	rbx, [rbp - 0xd0]
10000450e:	jmp	0x10000425e
100004513:	cmp	dword ptr [rbp - 0xb4], 0x0
10000451a:	je	0x100004626
100004520:	mov	edi, 0x51
100004525:	call	0x100019758 ## symbol stub for: _malloc
10000452a:	lea	r14, [rip + 0x25277]
100004531:	mov	qword ptr [r14], rax
100004534:	test	rax, rax
100004537:	lea	r15, [rip + 0x269f2]
10000453e:	mov	r12d, dword ptr [rbp - 0xd8]
100004545:	je	0x100008418
10000454b:	lea	rdi, [rip + 0x17164] ## literal pool for: "Enter password: "
100004552:	mov	rsi, rax
100004555:	mov	edx, 0x51
10000455a:	call	0x100016398
10000455f:	test	rax, rax
100004562:	je	0x1000083c1
100004568:	mov	rax, qword ptr [r14]
10000456b:	cmp	byte ptr [rax], 0x0
10000456e:	je	0x10000832a
100004574:	mov	edi, 0x51
100004579:	call	0x100019758 ## symbol stub for: _malloc
10000457e:	test	rax, rax
100004581:	je	0x100008424
100004587:	mov	rbx, rax
10000458a:	lea	rdi, [rip + 0x17113] ## literal pool for: "Verify password: "
100004591:	mov	rsi, rax
100004594:	mov	edx, 0x51
100004599:	call	0x100016398
10000459e:	test	rax, rax
1000045a1:	je	0x1000083c1
1000045a7:	mov	rdi, qword ptr [r14]
1000045aa:	mov	rsi, rbx
1000045ad:	call	0x10001981e ## symbol stub for: _strcmp
1000045b2:	mov	r14d, eax
1000045b5:	mov	rdi, rbx
1000045b8:	call	0x100019716 ## symbol stub for: _free
1000045bd:	test	r14d, r14d
1000045c0:	mov	r14d, dword ptr [rbp - 0x110]
1000045c7:	mov	ebx, dword ptr [rbp - 0xf8]
1000045cd:	je	0x100004641
1000045cf:	lea	rsi, [rip + 0x181bd] ## literal pool for: "password verification failed"
1000045d6:	jmp	0x1000088f2
1000045db:	xor	eax, eax
1000045dd:	mov	qword ptr [rbp - 0x108], rax
1000045e4:	xor	eax, eax
1000045e6:	mov	qword ptr [rbp - 0xc0], rax
1000045ed:	xor	r14d, r14d
1000045f0:	xor	r12d, r12d
1000045f3:	mov	dword ptr [rbp - 0xa4], 0x0
1000045fd:	xor	ebx, ebx
1000045ff:	mov	dword ptr [rbp - 0xf0], 0x0
100004609:	mov	dword ptr [rbp - 0xc4], 0x0
100004613:	mov	dword ptr [rbp - 0xe0], 0x0
10000461d:	lea	r15, [rip + 0x2690c]
100004624:	jmp	0x100004641
100004626:	lea	r15, [rip + 0x26903]
10000462d:	mov	r14d, dword ptr [rbp - 0x110]
100004634:	mov	ebx, dword ptr [rbp - 0xf8]
10000463a:	mov	r12d, dword ptr [rbp - 0xd8]
100004641:	lea	rax, [rip + 0x25160]
100004648:	mov	rax, qword ptr [rax]
10000464b:	test	rax, rax
10000464e:	je	0x100004659
100004650:	cmp	byte ptr [rax], 0x0
100004653:	je	0x10000832a
100004659:	cmp	dword ptr [rbp - 0xa4], 0x0
100004660:	je	0x100004683
100004662:	mov	rcx, qword ptr [r15]
100004665:	lea	rdi, [rip + 0x18144] ## literal pool for: "sd: Command line read\n"
10000466c:	mov	esi, 0x16
100004671:	mov	edx, 0x1
100004676:	call	0x10001972e ## symbol stub for: _fwrite
10000467b:	mov	rdi, qword ptr [r15]
10000467e:	call	0x1000196e6 ## symbol stub for: _fflush
100004683:	test	r12d, r12d
100004686:	jne	0x100008342
10000468c:	test	ebx, ebx
10000468e:	je	0x1000047ca
100004694:	lea	rdi, [rip + 0x1d6c4] ## literal pool for: "available options:"
10000469b:	call	0x1000197b2 ## symbol stub for: _puts
1000046a0:	lea	rbx, [rip + 0x18136] ## literal pool for: " %-2s  %-18s %-4s %-3s %-30s\n"
1000046a7:	lea	rsi, [rip + 0x1814d] ## literal pool for: "sh"
1000046ae:	lea	rdx, [rip + 0x18149] ## literal pool for: "long"
1000046b5:	lea	rcx, [rip + 0x18147] ## literal pool for: "val"
1000046bc:	lea	r8, [rip + 0x18144] ## literal pool for: "neg"
1000046c3:	lea	r9, [rip + 0x18141] ## literal pool for: "description"
1000046ca:	mov	rdi, rbx
1000046cd:	xor	eax, eax
1000046cf:	call	0x1000197a0 ## symbol stub for: _printf
1000046d4:	lea	rsi, [rip + 0x17fb2] ## literal pool for: "--"
1000046db:	lea	rdx, [rip + 0x18135] ## literal pool for: "----"
1000046e2:	lea	rcx, [rip + 0x18133] ## literal pool for: "---"
1000046e9:	lea	r9, [rip + 0x18130] ## literal pool for: "-----------"
1000046f0:	mov	rdi, rbx
1000046f3:	mov	r8, rcx
1000046f6:	xor	eax, eax
1000046f8:	call	0x1000197a0 ## symbol stub for: _printf
1000046fd:	cmp	qword ptr [rip + 0x23e23], 0x0
100004705:	je	0x1000047bc
10000470b:	lea	r14, [rip + 0x23dfe]
100004712:	lea	r15, [rip + 0x1813d] ## literal pool for: "unk"
100004719:	lea	r13, [rip + 0x1811a] ## literal pool for: "%-4s "
100004720:	lea	r12, [rip + 0x16090] ## literal pool for: ""
100004727:	lea	rbx, [rip + 0x1812c] ## literal pool for: "%-3s "
10000472e:	mov	rsi, qword ptr [r14]
100004731:	mov	rdx, qword ptr [r14 + 0x8]
100004735:	lea	rdi, [rip + 0x180f0] ## literal pool for: " %-2s  %-18s "
10000473c:	xor	eax, eax
10000473e:	call	0x1000197a0 ## symbol stub for: _printf
100004743:	movsxd	rax, dword ptr [r14 + 0x10]
100004747:	mov	rsi, r15
10000474a:	cmp	rax, 0x5
10000474e:	ja	0x10000475b
100004750:	lea	rcx, [rip + 0x20409]
100004757:	mov	rsi, qword ptr [rcx + 8*rax]
10000475b:	mov	rdi, r13
10000475e:	xor	eax, eax
100004760:	call	0x1000197a0 ## symbol stub for: _printf
100004765:	mov	eax, dword ptr [r14 + 0x14]
100004769:	test	eax, eax
10000476b:	mov	rsi, r15
10000476e:	cmove	rsi, r12
100004772:	cmp	eax, 0x1
100004775:	lea	rax, [rip + 0x1808b] ## literal pool for: "neg"
10000477c:	cmove	rsi, rax
100004780:	mov	rdi, rbx
100004783:	xor	eax, eax
100004785:	call	0x1000197a0 ## symbol stub for: _printf
10000478a:	mov	rsi, qword ptr [r14 + 0x20]
10000478e:	test	rsi, rsi
100004791:	je	0x1000047a3
100004793:	lea	rdi, [rip + 0x180c6] ## literal pool for: "%-30s\n"
10000479a:	xor	eax, eax
10000479c:	call	0x1000197a0 ## symbol stub for: _printf
1000047a1:	jmp	0x1000047ad
1000047a3:	mov	edi, 0xa
1000047a8:	call	0x1000197ac ## symbol stub for: _putchar
1000047ad:	cmp	qword ptr [r14 + 0x40], 0x0
1000047b2:	lea	r14, [r14 + 0x28]
1000047b6:	jne	0x10000472e
1000047bc:	xor	edi, edi
1000047be:	call	0x100008eec
1000047c3:	xor	ebx, ebx
1000047c5:	jmp	0x1000068b9
1000047ca:	lea	r13, [rip + 0x24f9f]
1000047d1:	mov	r15, qword ptr [r13]
1000047d5:	test	r15, r15
1000047d8:	mov	dword ptr [rbp - 0x110], r14d
1000047df:	je	0x100004a14
1000047e5:	xor	eax, eax
1000047e7:	mov	rdi, r15
1000047ea:	mov	rbx, rax
1000047ed:	mov	esi, 0x2f
1000047f2:	call	0x100019842 ## symbol stub for: _strrchr
1000047f7:	lea	rdi, [rax + 0x1]
1000047fb:	test	rax, rax
1000047fe:	jne	0x1000047ea
100004800:	test	rbx, rbx
100004803:	cmove	rbx, r15
100004807:	mov	rdi, rbx
10000480a:	mov	esi, 0x2e
10000480f:	call	0x100019842 ## symbol stub for: _strrchr
100004814:	test	rax, rax
100004817:	jne	0x100004864
100004819:	mov	rdi, r15
10000481c:	call	0x100019830 ## symbol stub for: _strlen
100004821:	lea	rdi, [rax + 0x5]
100004825:	call	0x100019758 ## symbol stub for: _malloc
10000482a:	test	rax, rax
10000482d:	je	0x1000086e3
100004833:	mov	r14, rax
100004836:	mov	rdi, rax
100004839:	mov	rsi, r15
10000483c:	call	0x100019824 ## symbol stub for: _strcpy
100004841:	mov	rdi, r14
100004844:	call	0x100019830 ## symbol stub for: _strlen
100004849:	mov	dword ptr [r14 + rax], 0x676f6c2e
100004851:	mov	byte ptr [r14 + rax + 0x4], 0x0
100004857:	mov	rdi, qword ptr [r13]
10000485b:	call	0x100019716 ## symbol stub for: _free
100004860:	mov	qword ptr [r13], r14
100004864:	lea	rax, [rip + 0x24efd]
10000486b:	cmp	dword ptr [rax], 0x0
10000486e:	lea	rax, [rip + 0x18001] ## literal pool for: "w"
100004875:	lea	rcx, [rip + 0x17ff8] ## literal pool for: "a"
10000487c:	cmove	rcx, rax
100004880:	lea	rbx, [rbp - 0xa0]
100004887:	mov	edx, 0xa
10000488c:	mov	rdi, rbx
10000488f:	xor	esi, esi
100004891:	xor	eax, eax
100004893:	call	0x100019680 ## symbol stub for: ___sprintf_chk
100004898:	mov	rdi, qword ptr [r13]
10000489c:	mov	rsi, rbx
10000489f:	call	0x1000196f8 ## symbol stub for: _fopen
1000048a4:	lea	r12, [rip + 0x24eb5]
1000048ab:	mov	qword ptr [r12], rax
1000048af:	test	rax, rax
1000048b2:	je	0x100008527
1000048b8:	lea	rbx, [rbp - 0x140]
1000048bf:	mov	rdi, rbx
1000048c2:	call	0x10001985a ## symbol stub for: _time
1000048c7:	mov	rdi, rbx
1000048ca:	call	0x10001974c ## symbol stub for: _localtime
1000048cf:	mov	r14, rax
1000048d2:	mov	rcx, qword ptr [r12]
1000048d6:	lea	rdi, [rip + 0x17fb7] ## literal pool for: "---------\n"
1000048dd:	mov	r13d, 0x1
1000048e3:	mov	esi, 0xa
1000048e8:	mov	edx, 0x1
1000048ed:	call	0x10001972e ## symbol stub for: _fwrite
1000048f2:	mov	rbx, qword ptr [r12]
1000048f6:	mov	rdi, r14
1000048f9:	call	0x1000196a4 ## symbol stub for: _asctime
1000048fe:	lea	rsi, [rip + 0x17f9a] ## literal pool for: "Zip log opened %s"
100004905:	mov	rdi, rbx
100004908:	mov	rdx, rax
10000490b:	xor	eax, eax
10000490d:	call	0x1000196fe ## symbol stub for: _fprintf
100004912:	mov	rcx, qword ptr [r12]
100004916:	lea	rdi, [rip + 0x17f94] ## literal pool for: "command line arguments:\n "
10000491d:	mov	esi, 0x19
100004922:	mov	edx, 0x1
100004927:	call	0x10001972e ## symbol stub for: _fwrite
10000492c:	mov	rax, qword ptr [rbp - 0xd0]
100004933:	mov	rbx, qword ptr [rax + 0x8]
100004937:	test	rbx, rbx
10000493a:	je	0x1000049ef
100004940:	mov	r14, qword ptr [rip + 0x1f6b9] ## literal pool symbol address: __DefaultRuneLocale
100004947:	mov	r15d, 0x4000
10000494d:	mov	al, byte ptr [rbx]
10000494f:	test	al, al
100004951:	je	0x1000049c2
100004953:	mov	r12d, 0x1
100004959:	movsx	edi, al
10000495c:	test	dil, dil
10000495f:	js	0x10000496d
100004961:	mov	eax, edi
100004963:	mov	eax, dword ptr [r14 + 4*rax + 0x3c]
100004968:	and	eax, r15d
10000496b:	jmp	0x100004977
10000496d:	mov	esi, 0x4000
100004972:	call	0x10001967a ## symbol stub for: ___maskrune
100004977:	test	eax, eax
100004979:	jne	0x10000499c
10000497b:	mov	rax, qword ptr [rbp - 0xd0]
100004982:	mov	rbx, qword ptr [rax + 8*r13]
100004986:	mov	rdi, rbx
100004989:	call	0x100019830 ## symbol stub for: _strlen
10000498e:	cmp	r12, rax
100004991:	jae	0x1000049bb
100004993:	mov	al, byte ptr [rbx + r12]
100004997:	inc	r12
10000499a:	jmp	0x100004959
10000499c:	lea	r12, [rip + 0x24dbd]
1000049a3:	mov	rdi, qword ptr [r12]
1000049a7:	mov	rax, qword ptr [rbp - 0xd0]
1000049ae:	mov	rdx, qword ptr [rax + 8*r13]
1000049b2:	lea	rsi, [rip + 0x17f12] ## literal pool for: "\"%s\" "
1000049b9:	jmp	0x1000049d0
1000049bb:	lea	r12, [rip + 0x24d9e]
1000049c2:	mov	rdi, qword ptr [r12]
1000049c6:	lea	rsi, [rip + 0x17f04] ## literal pool for: "%s "
1000049cd:	mov	rdx, rbx
1000049d0:	xor	eax, eax
1000049d2:	call	0x1000196fe ## symbol stub for: _fprintf
1000049d7:	mov	rax, qword ptr [rbp - 0xd0]
1000049de:	mov	rbx, qword ptr [rax + 8*r13 + 0x8]
1000049e3:	inc	r13
1000049e6:	test	rbx, rbx
1000049e9:	jne	0x10000494d
1000049ef:	mov	rcx, qword ptr [r12]
1000049f3:	lea	rdi, [rip + 0x17edb] ## literal pool for: "\n\n"
1000049fa:	mov	esi, 0x2
1000049ff:	mov	edx, 0x1
100004a04:	call	0x10001972e ## symbol stub for: _fwrite
100004a09:	mov	rdi, qword ptr [r12]
100004a0d:	call	0x1000196e6 ## symbol stub for: _fflush
100004a12:	jmp	0x100004a21
100004a14:	lea	rax, [rip + 0x24d3d]
100004a1b:	mov	dword ptr [rax], 0x0
100004a21:	lea	rax, [rip + 0x24e7c]
100004a28:	cmp	dword ptr [rax], 0x0
100004a2b:	lea	r15, [rip + 0x24de6]
100004a32:	lea	r13, [rip + 0x264f7]
100004a39:	je	0x100004a9f
100004a3b:	mov	rbx, qword ptr [r15]
100004a3e:	test	rbx, rbx
100004a41:	je	0x100004a9f
100004a43:	mov	rdi, rbx
100004a46:	call	0x100019830 ## symbol stub for: _strlen
100004a4b:	cmp	eax, 0x4
100004a4e:	jl	0x1000083b5
100004a54:	movsxd	r14, eax
100004a57:	cmp	byte ptr [rbx + r14 - 0x4], 0x2e
100004a5d:	jne	0x1000083b5
100004a63:	movsx	edi, byte ptr [rbx + r14 - 0x3]
100004a69:	call	0x10001969e ## symbol stub for: ___toupper
100004a6e:	cmp	eax, 0x5a
100004a71:	jne	0x1000083b5
100004a77:	movsx	edi, byte ptr [rbx + r14 - 0x2]
100004a7d:	call	0x10001969e ## symbol stub for: ___toupper
100004a82:	cmp	eax, 0x49
100004a85:	jne	0x1000083b5
100004a8b:	movsx	edi, byte ptr [rbx + r14 - 0x1]
100004a91:	call	0x10001969e ## symbol stub for: ___toupper
100004a96:	cmp	eax, 0x50
100004a99:	jne	0x1000083b5
100004a9f:	lea	rax, [rip + 0x24c06]
100004aa6:	cmp	dword ptr [rax], 0x0
100004aa9:	je	0x100004ac8
100004aab:	lea	rax, [rip + 0x24c46]
100004ab2:	lea	rcx, [rip + 0x24c47]
100004ab9:	mov	rcx, qword ptr [rcx]
100004abc:	or	rcx, qword ptr [rax]
100004abf:	jne	0x100004ac8
100004ac1:	mov	qword ptr [rax], 0xa00000
100004ac8:	lea	rax, [rip + 0x24e31]
100004acf:	cmp	dword ptr [rax], 0x0
100004ad2:	mov	ebx, dword ptr [rbp - 0x110]
100004ad8:	je	0x100004aec
100004ada:	lea	rax, [rip + 0x24e17]
100004ae1:	cmp	qword ptr [rax], 0x0
100004ae5:	jne	0x100004aec
100004ae7:	call	0x100009304
100004aec:	test	ebx, ebx
100004aee:	je	0x100004b10
100004af0:	cmp	dword ptr [rbp - 0xc0], 0x3
100004af7:	jne	0x100004b10
100004af9:	lea	rax, [rip + 0x24c94]
100004b00:	mov	dword ptr [rax], 0x1
100004b06:	mov	dword ptr [rip + 0x246f8], 0x4
100004b10:	test	ebx, ebx
100004b12:	je	0x100004b2e
100004b14:	lea	rax, [rip + 0x24ced]
100004b1b:	mov	rdi, qword ptr [rax]
100004b1e:	mov	rsi, qword ptr [r15]
100004b21:	call	0x100015685
100004b26:	test	eax, eax
100004b28:	je	0x10000853e
100004b2e:	lea	r12, [rip + 0x24b7b]
100004b35:	mov	edx, dword ptr [r12]
100004b39:	lea	rax, [rip + 0x24c40]
100004b40:	mov	ecx, dword ptr [rax]
100004b42:	test	edx, edx
100004b44:	je	0x100004b4e
100004b46:	test	ecx, ecx
100004b48:	jne	0x100008468
100004b4e:	mov	eax, dword ptr [rip + 0x246b4]
100004b54:	cmp	eax, 0x4
100004b57:	jne	0x100004b6a
100004b59:	lea	rsi, [rip + 0x24c3c]
100004b60:	mov	esi, dword ptr [rsi]
100004b62:	or	esi, ebx
100004b64:	je	0x100008474
100004b6a:	test	ebx, ebx
100004b6c:	jne	0x100004b76
100004b6e:	test	edx, edx
100004b70:	jne	0x100008480
100004b76:	test	edx, edx
100004b78:	je	0x100004b8a
100004b7a:	lea	rdx, [rip + 0x24c13]
100004b81:	cmp	dword ptr [rdx], 0x0
100004b84:	je	0x10000849f
100004b8a:	test	ebx, ebx
100004b8c:	jne	0x100004b96
100004b8e:	test	ecx, ecx
100004b90:	jne	0x1000084ab
100004b96:	test	ecx, ecx
100004b98:	je	0x100004ba5
100004b9a:	mov	ecx, eax
100004b9c:	and	ecx, -0x5
100004b9f:	je	0x1000084b7
100004ba5:	cmp	eax, 0x4
100004ba8:	je	0x100004bf8
100004baa:	lea	rcx, [rip + 0x24aef]
100004bb1:	cmp	dword ptr [rcx], 0x2
100004bb4:	sete	cl
100004bb7:	lea	rdx, [rip + 0x24d42]
100004bbe:	cmp	dword ptr [rdx], 0x0
100004bc1:	setne	dl
100004bc4:	cmp	qword ptr [rip + 0x24abc], 0x0
100004bcc:	jne	0x100004bf8
100004bce:	cmp	dword ptr [rbp - 0xc4], 0x0
100004bd5:	jne	0x100004bf8
100004bd7:	or	cl, dl
100004bd9:	je	0x100004bf8
100004bdb:	cmp	dword ptr [rbp - 0xc0], 0x3
100004be2:	jl	0x100004bec
100004be4:	and	eax, -0x2
100004be7:	cmp	eax, 0x2
100004bea:	je	0x100004c63
100004bec:	lea	rsi, [rip + 0x17e8b] ## literal pool for: "nothing to select from"
100004bf3:	jmp	0x1000088f2
100004bf8:	cmp	dword ptr [rbp - 0xc0], 0x2
100004bff:	jg	0x100004c63
100004c01:	call	0x1000093eb
100004c06:	lea	rdi, [rip + 0x178f5] ## literal pool for: "-"
100004c0d:	xor	esi, esi
100004c0f:	call	0x100016494
100004c14:	test	eax, eax
100004c16:	je	0x100004c41
100004c18:	cmp	eax, -0x1
100004c1b:	jne	0x10000873a
100004c21:	lea	rdi, [rip + 0x17e6d] ## literal pool for: "name not matched: "
100004c28:	lea	rsi, [rip + 0x178d3] ## literal pool for: "-"
100004c2f:	call	0x1000034f4
100004c34:	cmp	dword ptr [rbp - 0xf0], 0x0
100004c3b:	jne	0x100008746
100004c41:	cmp	dword ptr [rbp - 0xe0], 0x0
100004c48:	jne	0x1000085f3
100004c4e:	mov	eax, 0x4
100004c53:	mov	qword ptr [rbp - 0xc0], rax
100004c5a:	xor	eax, eax
100004c5c:	mov	qword ptr [rbp - 0x100], rax
100004c63:	lea	rax, [rip + 0x262ee]
100004c6a:	mov	rdi, qword ptr [rax]
100004c6d:	test	rdi, rdi
100004c70:	je	0x100004cbb
100004c72:	lea	rsi, [rip + 0x17889] ## literal pool for: "-"
100004c79:	call	0x10001981e ## symbol stub for: _strcmp
100004c7e:	test	eax, eax
100004c80:	jne	0x100004cbb
100004c82:	cmp	dword ptr [rbp - 0xa4], 0x0
100004c89:	je	0x100004cae
100004c8b:	mov	rcx, qword ptr [r13]
100004c8f:	lea	rdi, [rip + 0x17e2e] ## literal pool for: "sd: Zipping to stdout\n"
100004c96:	mov	esi, 0x16
100004c9b:	mov	edx, 0x1
100004ca0:	call	0x10001972e ## symbol stub for: _fwrite
100004ca5:	mov	rdi, qword ptr [r13]
100004ca9:	call	0x1000196e6 ## symbol stub for: _fflush
100004cae:	lea	rax, [rip + 0x24ad7]
100004cb5:	mov	dword ptr [rax], 0x1
100004cbb:	lea	r14, [rip + 0x247ae]
100004cc2:	mov	rbx, qword ptr [r14]
100004cc5:	test	rbx, rbx
100004cc8:	je	0x1000084c3
100004cce:	lea	rax, [rip + 0x2477b]
100004cd5:	cmp	dword ptr [rax], 0x9
100004cd8:	je	0x100004d00
100004cda:	lea	rsi, [rip + 0x17e0e] ## literal pool for: ";"
100004ce1:	mov	rdi, rbx
100004ce4:	call	0x10001981e ## symbol stub for: _strcmp
100004ce9:	test	eax, eax
100004ceb:	je	0x100004d00
100004ced:	lea	rsi, [rip + 0x17dfd] ## literal pool for: ":"
100004cf4:	mov	rdi, rbx
100004cf7:	call	0x10001981e ## symbol stub for: _strcmp
100004cfc:	test	eax, eax
100004cfe:	jne	0x100004d07
100004d00:	mov	qword ptr [r14], 0x0
100004d07:	mov	eax, dword ptr [rip + 0x244fb]
100004d0d:	test	eax, eax
100004d0f:	jne	0x100004daa
100004d15:	lea	rbx, [rip + 0x24730]
100004d1c:	lea	r15, [rip + 0x24981]
100004d23:	lea	r14, [rip + 0x24976]
100004d2a:	cmp	byte ptr [rip + 0x5629f], 0x0
100004d31:	jne	0x100004d5a
100004d33:	test	byte ptr [rip + 0x5627e], 0x1
100004d3a:	jne	0x100004d5a
100004d3c:	lea	rax, [rip + 0x24a65]
100004d43:	cmp	qword ptr [rax], 0x0
100004d47:	jne	0x100004d5a
100004d49:	cmp	dword ptr [rbx], -0x1
100004d4c:	jne	0x100004d5a
100004d4e:	mov	eax, dword ptr [r14]
100004d51:	or	eax, dword ptr [r15]
100004d54:	je	0x100004e10
100004d5a:	lea	rdi, [rip + 0x17d92] ## literal pool for: "invalid option(s) used with -d; ignored."
100004d61:	lea	rsi, [rip + 0x15a4f] ## literal pool for: ""
100004d68:	call	0x1000034f4
100004d6d:	mov	dword ptr [rbx], 0xffffffff
100004d73:	xor	eax, eax
100004d75:	mov	dword ptr [r15], eax
100004d78:	mov	dword ptr [r14], eax
100004d7b:	lea	rbx, [rip + 0x24a26]
100004d82:	mov	rdi, qword ptr [rbx]
100004d85:	test	rdi, rdi
100004d88:	je	0x100004d96
100004d8a:	call	0x100019716 ## symbol stub for: _free
100004d8f:	mov	qword ptr [rbx], 0x0
100004d96:	xor	eax, eax
100004d98:	mov	byte ptr [rip + 0x5621a], al
100004d9e:	mov	byte ptr [rip + 0x5622c], al
100004da4:	mov	eax, dword ptr [rip + 0x2445e]
100004daa:	cmp	eax, 0x4
100004dad:	jne	0x100004e10
100004daf:	lea	rbx, [rip + 0x24696]
100004db6:	lea	r15, [rip + 0x248e7]
100004dbd:	lea	r14, [rip + 0x248dc]
100004dc4:	cmp	byte ptr [rip + 0x56205], 0x0
100004dcb:	jne	0x100004de3
100004dcd:	test	byte ptr [rip + 0x561e4], 0x1
100004dd4:	jne	0x100004de3
100004dd6:	cmp	dword ptr [rbx], -0x1
100004dd9:	jne	0x100004de3
100004ddb:	mov	eax, dword ptr [r14]
100004dde:	or	eax, dword ptr [r15]
100004de1:	je	0x100004e10
100004de3:	lea	rdi, [rip + 0x17d32] ## literal pool for: "can't set method, move, recurse, or comments with copy mode."
100004dea:	lea	rsi, [rip + 0x159c6] ## literal pool for: ""
100004df1:	call	0x1000034f4
100004df6:	mov	dword ptr [rbx], 0xffffffff
100004dfc:	xor	eax, eax
100004dfe:	mov	dword ptr [r15], eax
100004e01:	mov	dword ptr [r14], eax
100004e04:	mov	byte ptr [rip + 0x561ae], al
100004e0a:	mov	byte ptr [rip + 0x561c0], al
100004e10:	lea	rbx, [rip + 0x2496d]
100004e17:	cmp	dword ptr [rbx], 0x0
100004e1a:	je	0x100004e41
100004e1c:	lea	rax, [rip + 0x24885]
100004e23:	cmp	dword ptr [rax], 0x0
100004e26:	je	0x100004e41
100004e28:	lea	rdi, [rip + 0x17d2a] ## literal pool for: "can't use -y with -k, -y ignored"
100004e2f:	lea	rsi, [rip + 0x15981] ## literal pool for: ""
100004e36:	call	0x1000034f4
100004e3b:	mov	dword ptr [rbx], 0x0
100004e41:	mov	ecx, dword ptr [r12]
100004e45:	lea	r14, [rip + 0x2486c]
100004e4c:	mov	eax, dword ptr [r14]
100004e4f:	cmp	ecx, 0x1
100004e52:	lea	r13, [rip + 0x24a4b]
100004e59:	jne	0x100004e68
100004e5b:	test	eax, eax
100004e5d:	je	0x100004e68
100004e5f:	lea	rdi, [rip + 0x17d14] ## literal pool for: "can't use -F with -A, -F ignored"
100004e66:	jmp	0x100004e78
100004e68:	cmp	ecx, 0x2
100004e6b:	jne	0x100004e8c
100004e6d:	test	eax, eax
100004e6f:	je	0x100004e8c
100004e71:	lea	rdi, [rip + 0x17d23] ## literal pool for: "can't use -FF with -A, -FF ignored"
100004e78:	lea	rsi, [rip + 0x15938] ## literal pool for: ""
100004e7f:	call	0x1000034f4
100004e84:	mov	dword ptr [r12], 0x0
100004e8c:	lea	rbx, [rip + 0x248f9]
100004e93:	cmp	byte ptr [rip + 0x5612a], 0x1
100004e9a:	jne	0x100004ebb
100004e9c:	cmp	dword ptr [rbx], 0x0
100004e9f:	je	0x100004ebb
100004ea1:	mov	byte ptr [rip + 0x5611c], 0x0
100004ea8:	lea	rdi, [rip + 0x17d0f] ## literal pool for: "can't use -T on stdout, -T ignored"
100004eaf:	lea	rsi, [rip + 0x15901] ## literal pool for: ""
100004eb6:	call	0x1000034f4
100004ebb:	cmp	dword ptr [r13], 0x0
100004ec0:	je	0x100004edd
100004ec2:	mov	eax, dword ptr [r14]
100004ec5:	or	eax, dword ptr [r12]
100004ec9:	jne	0x100008554
100004ecf:	mov	eax, dword ptr [rbx]
100004ed1:	or	eax, dword ptr [rbp - 0x108]
100004ed7:	jne	0x100008560
100004edd:	mov	eax, dword ptr [rip + 0x24325]
100004ee3:	xor	eax, 0x1
100004ee6:	or	eax, dword ptr [rbp - 0x108]
100004eec:	setne	al
100004eef:	je	0x100004f01
100004ef1:	lea	rcx, [rip + 0x247bc]
100004ef8:	cmp	dword ptr [rcx], 0x0
100004efb:	jne	0x1000084cf
100004f01:	cmp	dword ptr [rbx], 0x0
100004f04:	sete	cl
100004f07:	xor	al, 0x1
100004f09:	or	al, cl
100004f0b:	je	0x1000084db
100004f11:	lea	rax, [rip + 0x24544]
100004f18:	cmp	dword ptr [rax], 0x0
100004f1b:	je	0x100004f47
100004f1d:	mov	eax, dword ptr [r12]
100004f21:	cmp	eax, 0x2
100004f24:	je	0x100004f34
100004f26:	cmp	eax, 0x1
100004f29:	jne	0x100004f47
100004f2b:	lea	rdi, [rip + 0x17d7a] ## literal pool for: "Fix archive (-F) - assume mostly intact archive"
100004f32:	jmp	0x100004f3b
100004f34:	lea	rdi, [rip + 0x17da1] ## literal pool for: "Fix archive (-FF) - salvage what can"
100004f3b:	lea	rsi, [rip + 0x15875] ## literal pool for: ""
100004f42:	call	0x100003422
100004f47:	cmp	dword ptr [rbp - 0xa4], 0x0
100004f4e:	je	0x100004fe0
100004f54:	lea	rbx, [rip + 0x25fd5]
100004f5b:	mov	rcx, qword ptr [rbx]
100004f5e:	lea	rdi, [rip + 0x17d9c] ## literal pool for: "sd: Reading archive\n"
100004f65:	mov	esi, 0x14
100004f6a:	mov	edx, 0x1
100004f6f:	call	0x10001972e ## symbol stub for: _fwrite
100004f74:	mov	rdi, qword ptr [rbx]
100004f77:	call	0x1000196e6 ## symbol stub for: _fflush
100004f7c:	cmp	dword ptr [r12], 0x2
100004f81:	jne	0x100005070
100004f87:	lea	r15, [rip + 0x25fa2]
100004f8e:	mov	rcx, qword ptr [r15]
100004f91:	lea	rdi, [rip + 0x17d7e] ## literal pool for: "sd: Open zip file and create temp file (-FF)\n"
100004f98:	mov	esi, 0x2d
100004f9d:	mov	edx, 0x1
100004fa2:	call	0x10001972e ## symbol stub for: _fwrite
100004fa7:	mov	rdi, qword ptr [r15]
100004faa:	call	0x1000196e6 ## symbol stub for: _fflush
100004faf:	lea	rax, [rip + 0x25f82]
100004fb6:	mov	qword ptr [rax], 0x0
100004fbd:	mov	rcx, qword ptr [r15]
100004fc0:	lea	rdi, [rip + 0x17d7d] ## literal pool for: "sd: Creating new zip file (-FF)\n"
100004fc7:	mov	esi, 0x20
100004fcc:	mov	edx, 0x1
100004fd1:	call	0x10001972e ## symbol stub for: _fwrite
100004fd6:	mov	rdi, qword ptr [r15]
100004fd9:	call	0x1000196e6 ## symbol stub for: _fflush
100004fde:	jmp	0x100005000
100004fe0:	cmp	dword ptr [r12], 0x2
100004fe5:	jne	0x100005070
100004feb:	lea	rax, [rip + 0x25f46]
100004ff2:	mov	qword ptr [rax], 0x0
100004ff9:	lea	r15, [rip + 0x25f30]
100005000:	lea	rax, [rip + 0x247a9]
100005007:	mov	rbx, qword ptr [rax]
10000500a:	test	rbx, rbx
10000500d:	je	0x10000511a
100005013:	mov	rdi, rbx
100005016:	call	0x100019830 ## symbol stub for: _strlen
10000501b:	lea	rdi, [rax + 0xc]
10000501f:	call	0x100019758 ## symbol stub for: _malloc
100005024:	lea	r14, [rip + 0x247c5]
10000502b:	mov	qword ptr [r14], rax
10000502e:	test	rax, rax
100005031:	je	0x100008580
100005037:	mov	rdi, rax
10000503a:	mov	rsi, rbx
10000503d:	call	0x100019824 ## symbol stub for: _strcpy
100005042:	mov	rbx, qword ptr [r14]
100005045:	cmp	byte ptr [rbx], 0x0
100005048:	je	0x10000505d
10000504a:	mov	rdi, rbx
10000504d:	call	0x100019830 ## symbol stub for: _strlen
100005052:	cmp	byte ptr [rax + rbx - 0x1], 0x2f
100005057:	je	0x100005187
10000505d:	mov	rdi, rbx
100005060:	call	0x100019830 ## symbol stub for: _strlen
100005065:	mov	word ptr [rbx + rax], 0x2f
10000506b:	jmp	0x100005187
100005070:	call	0x10000a401
100005075:	test	eax, eax
100005077:	jne	0x1000084f5
10000507d:	mov	eax, dword ptr [r13]
100005081:	cmp	eax, -0x1
100005084:	je	0x1000052a6
10000508a:	or	eax, dword ptr [r12]
10000508e:	lea	r12, [rip + 0x2486b]
100005095:	jne	0x1000052b5
10000509b:	lea	rax, [rip + 0x24786]
1000050a2:	cmp	qword ptr [rax], 0x2
1000050a6:	jb	0x1000052b5
1000050ac:	lea	r14, [rbp - 0xa0]
1000050b3:	mov	qword ptr [r14], 0x0
1000050ba:	lea	rax, [rip + 0x24747]
1000050c1:	mov	rdi, qword ptr [rax]
1000050c4:	xor	esi, esi
1000050c6:	call	0x1000127e1
1000050cb:	lea	r15, [rip + 0x2473e]
1000050d2:	mov	qword ptr [r15], rax
1000050d5:	mov	rdi, rax
1000050d8:	xor	esi, esi
1000050da:	mov	rdx, r14
1000050dd:	xor	ecx, ecx
1000050df:	call	0x1000169ab
1000050e4:	test	rax, rax
1000050e7:	je	0x1000062b4
1000050ed:	mov	dword ptr [r13], 0x1
1000050f5:	mov	rax, qword ptr [rbp - 0xa0]
1000050fc:	lea	rcx, [rip + 0x247a5]
100005103:	mov	qword ptr [rcx], rax
100005106:	mov	rdi, qword ptr [r15]
100005109:	call	0x100019716 ## symbol stub for: _free
10000510e:	mov	qword ptr [r15], 0x0
100005115:	jmp	0x1000052b5
10000511a:	lea	rax, [rip + 0x25e37]
100005121:	mov	rbx, qword ptr [rax]
100005124:	mov	rdi, rbx
100005127:	call	0x100019830 ## symbol stub for: _strlen
10000512c:	lea	rdi, [rax + 0xc]
100005130:	call	0x100019758 ## symbol stub for: _malloc
100005135:	lea	r14, [rip + 0x246b4]
10000513c:	mov	qword ptr [r14], rax
10000513f:	test	rax, rax
100005142:	je	0x100008580
100005148:	mov	rdi, rax
10000514b:	mov	rsi, rbx
10000514e:	call	0x100019824 ## symbol stub for: _strcpy
100005153:	mov	rbx, qword ptr [r14]
100005156:	mov	rdi, rbx
100005159:	call	0x100019830 ## symbol stub for: _strlen
10000515e:	mov	edx, eax
100005160:	xor	ecx, ecx
100005162:	test	eax, eax
100005164:	cmovs	rcx, rax
100005168:	test	edx, edx
10000516a:	jle	0x100005180
10000516c:	lea	rax, [rdx - 0x1]
100005170:	cmp	byte ptr [rbx + rdx - 0x1], 0x2f
100005175:	mov	rdx, rax
100005178:	jne	0x100005168
10000517a:	inc	rax
10000517d:	mov	rcx, rax
100005180:	movsxd	rax, ecx
100005183:	mov	byte ptr [rbx + rax], 0x0
100005187:	lea	r12, [rip + 0x24662]
10000518e:	mov	rbx, qword ptr [r12]
100005192:	mov	rdi, rbx
100005195:	call	0x100019830 ## symbol stub for: _strlen
10000519a:	movabs	rcx, 0x585858585858697a
1000051a4:	mov	qword ptr [rbx + rax], rcx
1000051a8:	mov	byte ptr [rbx + rax + 0x8], 0x0
1000051ad:	mov	rdi, qword ptr [r12]
1000051b1:	call	0x100019770 ## symbol stub for: _mkstemp
1000051b6:	cmp	eax, -0x1
1000051b9:	je	0x1000084e7
1000051bf:	lea	rsi, [rip + 0x176b0] ## literal pool for: "w"
1000051c6:	mov	edi, eax
1000051c8:	call	0x1000196d4 ## symbol stub for: _fdopen
1000051cd:	mov	rbx, rax
1000051d0:	lea	rax, [rip + 0x24621]
1000051d7:	mov	qword ptr [rax], rbx
1000051da:	test	rbx, rbx
1000051dd:	je	0x1000084e7
1000051e3:	mov	edi, 0x4000
1000051e8:	call	0x100019758 ## symbol stub for: _malloc
1000051ed:	test	rax, rax
1000051f0:	je	0x10000858c
1000051f6:	mov	ecx, 0x4000
1000051fb:	mov	rdi, rbx
1000051fe:	mov	rsi, rax
100005201:	xor	edx, edx
100005203:	call	0x1000197ee ## symbol stub for: _setvbuf
100005208:	call	0x10000a401
10000520d:	test	eax, eax
10000520f:	jne	0x1000084f5
100005215:	cmp	dword ptr [rbp - 0xa4], 0x0
10000521c:	je	0x10000523f
10000521e:	mov	rcx, qword ptr [r15]
100005221:	lea	rdi, [rip + 0x17b5f] ## literal pool for: "sd: Writing central directory (-FF)\n"
100005228:	mov	esi, 0x24
10000522d:	mov	edx, 0x1
100005232:	call	0x10001972e ## symbol stub for: _fwrite
100005237:	mov	rdi, qword ptr [r15]
10000523a:	call	0x1000196e6 ## symbol stub for: _fflush
10000523f:	lea	r13, [rip + 0x25cf2]
100005246:	mov	r14, qword ptr [r13]
10000524a:	lea	rax, [rip + 0x24687]
100005251:	mov	rbx, qword ptr [rax]
100005254:	xor	r15d, r15d
100005257:	test	rbx, rbx
10000525a:	je	0x100005486
100005260:	mov	rdi, rbx
100005263:	call	0x10000d930
100005268:	test	eax, eax
10000526a:	jne	0x100008310
100005270:	movzx	eax, word ptr [rbx + 0x28]
100005274:	movzx	ecx, word ptr [rbx + 0x2c]
100005278:	add	rcx, rax
10000527b:	movzx	eax, word ptr [rbx + 0x2e]
10000527f:	add	rax, rcx
100005282:	mov	rcx, qword ptr [r13]
100005286:	lea	rsi, [rcx + rax]
10000528a:	add	rsi, 0x2e
10000528e:	mov	qword ptr [r13], rsi
100005292:	inc	r15
100005295:	mov	rbx, qword ptr [rbx + 0x98]
10000529c:	test	rbx, rbx
10000529f:	jne	0x100005260
1000052a1:	jmp	0x100005489
1000052a6:	mov	dword ptr [r13], 0x0
1000052ae:	lea	r12, [rip + 0x2464b]
1000052b5:	lea	rax, [rip + 0x2460c]
1000052bc:	cmp	dword ptr [rax], 0x0
1000052bf:	je	0x1000052e8
1000052c1:	lea	rax, [rip + 0x245e0]
1000052c8:	mov	rdi, qword ptr [rax]
1000052cb:	test	rdi, rdi
1000052ce:	je	0x1000052e8
1000052d0:	xor	esi, esi
1000052d2:	xor	edx, edx
1000052d4:	call	0x100015b84
1000052d9:	lea	rdi, [rip + 0x17b4a] ## literal pool for: "splitsize = "
1000052e0:	mov	rsi, rax
1000052e3:	call	0x100003422
1000052e8:	lea	rax, [rip + 0x24541]
1000052ef:	mov	qword ptr [rax], 0x0
1000052f6:	lea	rax, [rip + 0x245e3]
1000052fd:	cmp	dword ptr [rax], 0x0
100005300:	lea	r13, [rip + 0x25c29]
100005307:	jne	0x10000532f
100005309:	lea	rax, [rip + 0x2448c]
100005310:	cmp	dword ptr [rax], 0x0
100005313:	je	0x10000532f
100005315:	cmp	dword ptr [rbp - 0xc0], 0x3
10000531c:	je	0x1000086ef
100005322:	cmp	dword ptr [rip + 0x23edf], 0x4
100005329:	je	0x1000086ef
10000532f:	lea	rax, [rip + 0x25c12]
100005336:	cmp	qword ptr [rax], 0x0
10000533a:	jne	0x100005364
10000533c:	cmp	dword ptr [rbp - 0x108], 0x0
100005343:	jne	0x10000534e
100005345:	cmp	dword ptr [rip + 0x23ebc], 0x1
10000534c:	je	0x100005364
10000534e:	lea	rax, [rip + 0x25c03]
100005355:	mov	rdi, qword ptr [rax]
100005358:	lea	rsi, [rip + 0x17ad8] ## literal pool for: " not found or empty"
10000535f:	call	0x1000034f4
100005364:	lea	rax, [rip + 0x2456d]
10000536b:	mov	qword ptr [rbp - 0xe0], rax
100005372:	mov	rbx, qword ptr [rax]
100005375:	test	rbx, rbx
100005378:	je	0x1000053bf
10000537a:	cmp	dword ptr [rbp - 0x110], 0x0
100005381:	je	0x1000053bf
100005383:	cmp	dword ptr [rbp - 0xc0], 0x3
10000538a:	jne	0x1000053bf
10000538c:	lea	r14, [rip + 0x240c5]
100005393:	cmp	dword ptr [r12], 0x0
100005398:	je	0x1000053a8
10000539a:	mov	rdi, qword ptr [rbx + 0x78]
10000539e:	mov	esi, dword ptr [r14]
1000053a1:	call	0x100010a07
1000053a6:	jmp	0x1000053ad
1000053a8:	mov	eax, 0x1
1000053ad:	mov	dword ptr [rbx + 0x88], eax
1000053b3:	mov	rbx, qword ptr [rbx + 0x98]
1000053ba:	test	rbx, rbx
1000053bd:	jne	0x100005393
1000053bf:	mov	rax, qword ptr [rip + 0x242c2]
1000053c6:	test	rax, rax
1000053c9:	je	0x1000056f5
1000053cf:	cmp	dword ptr [rip + 0x23e32], 0x4
1000053d6:	jne	0x100005620
1000053dc:	cmp	dword ptr [rbp - 0xa4], 0x0
1000053e3:	je	0x100005418
1000053e5:	mov	rcx, qword ptr [r13]
1000053e9:	lea	rdi, [rip + 0x17a5b] ## literal pool for: "sd: Scanning archive entries\n"
1000053f0:	mov	esi, 0x1d
1000053f5:	mov	edx, 0x1
1000053fa:	call	0x10001972e ## symbol stub for: _fwrite
1000053ff:	mov	rdi, qword ptr [r13]
100005403:	call	0x1000196e6 ## symbol stub for: _fflush
100005408:	mov	rax, qword ptr [rip + 0x24279]
10000540f:	test	rax, rax
100005412:	je	0x1000056f5
100005418:	lea	rbx, [rip + 0x24039]
10000541f:	lea	r14, [rip + 0x17a43] ## literal pool for: "not in archive: "
100005426:	mov	rdi, qword ptr [rax]
100005429:	mov	esi, dword ptr [rbx]
10000542b:	call	0x1000108f3
100005430:	test	eax, eax
100005432:	je	0x10000544f
100005434:	cmp	eax, -0x1
100005437:	jne	0x100008319
10000543d:	mov	rax, qword ptr [rip + 0x24244]
100005444:	mov	rsi, qword ptr [rax]
100005447:	mov	rdi, r14
10000544a:	call	0x1000034f4
10000544f:	mov	rax, qword ptr [rip + 0x24232]
100005456:	mov	rdi, qword ptr [rax]
100005459:	call	0x100019716 ## symbol stub for: _free
10000545e:	mov	rdi, qword ptr [rip + 0x24223]
100005465:	mov	rax, qword ptr [rdi + 0x8]
100005469:	mov	qword ptr [rip + 0x24218], rax
100005470:	call	0x100019716 ## symbol stub for: _free
100005475:	mov	rax, qword ptr [rip + 0x2420c]
10000547c:	test	rax, rax
10000547f:	jne	0x100005426
100005481:	jmp	0x1000056f5
100005486:	mov	rsi, r14
100005489:	lea	rax, [rip + 0x25ab8]
100005490:	cmp	qword ptr [rax], 0x0
100005494:	jne	0x1000054ad
100005496:	lea	rdi, [rip + 0x1790f] ## literal pool for: "zip file empty"
10000549d:	lea	rsi, [rip + 0x15313] ## literal pool for: ""
1000054a4:	call	0x1000034f4
1000054a9:	mov	rsi, qword ptr [r13]
1000054ad:	sub	rsi, r14
1000054b0:	lea	rax, [rip + 0x25a89]
1000054b7:	movzx	ecx, word ptr [rax]
1000054ba:	lea	rax, [rip + 0x24427]
1000054c1:	mov	r8, qword ptr [rax]
1000054c4:	mov	rdi, r15
1000054c7:	mov	rdx, r14
1000054ca:	call	0x10000de58
1000054cf:	test	eax, eax
1000054d1:	jne	0x100008310
1000054d7:	lea	rax, [rip + 0x2431a]
1000054de:	mov	rdi, qword ptr [rax]
1000054e1:	call	0x1000196ce ## symbol stub for: _fclose
1000054e6:	test	eax, eax
1000054e8:	lea	r15, [rip + 0x24329]
1000054ef:	mov	rbx, qword ptr [rbp - 0x108]
1000054f6:	jne	0x100008595
1000054fc:	lea	r14, [rip + 0x242fd]
100005503:	mov	rdi, qword ptr [r14]
100005506:	test	rdi, rdi
100005509:	je	0x100005517
10000550b:	call	0x1000196ce ## symbol stub for: _fclose
100005510:	mov	qword ptr [r14], 0x0
100005517:	lea	r14, [rip + 0x25a3a]
10000551e:	mov	rdi, qword ptr [r14]
100005521:	lea	rsi, [rip + 0x16fda] ## literal pool for: "-"
100005528:	call	0x10001981e ## symbol stub for: _strcmp
10000552d:	test	ebx, ebx
10000552f:	jne	0x100005555
100005531:	test	eax, eax
100005533:	je	0x100005555
100005535:	mov	rdi, qword ptr [r15]
100005538:	mov	rsi, qword ptr [r12]
10000553c:	call	0x100011614
100005541:	mov	rsi, qword ptr [r12]
100005545:	test	eax, eax
100005547:	jne	0x1000086b6
10000554d:	mov	rdi, rsi
100005550:	call	0x100019716 ## symbol stub for: _free
100005555:	mov	qword ptr [r12], 0x0
10000555d:	lea	rax, [rip + 0x242bc]
100005564:	mov	ebx, dword ptr [rax]
100005566:	test	ebx, ebx
100005568:	je	0x100005587
10000556a:	mov	rdi, qword ptr [r14]
10000556d:	lea	rsi, [rip + 0x16f8e] ## literal pool for: "-"
100005574:	call	0x10001981e ## symbol stub for: _strcmp
100005579:	test	eax, eax
10000557b:	je	0x100005587
10000557d:	mov	rdi, qword ptr [r15]
100005580:	mov	esi, ebx
100005582:	call	0x100011897
100005587:	lea	r14, [rip + 0x241d2]
10000558e:	mov	rdi, qword ptr [r14]
100005591:	test	rdi, rdi
100005594:	je	0x1000068b0
10000559a:	lea	rax, [rip + 0x2418f]
1000055a1:	mov	rdx, qword ptr [rax]
1000055a4:	lea	rsi, [rip + 0x17834] ## literal pool for: "\nTotal %ld entries ("
1000055ab:	xor	eax, eax
1000055ad:	call	0x1000196fe ## symbol stub for: _fprintf
1000055b2:	mov	rdi, qword ptr [r14]
1000055b5:	lea	rax, [rip + 0x24194]
1000055bc:	mov	rsi, qword ptr [rax]
1000055bf:	call	0x100015c88
1000055c4:	mov	rcx, qword ptr [r14]
1000055c7:	lea	rdi, [rip + 0x17826] ## literal pool for: " bytes)"
1000055ce:	mov	esi, 0x7
1000055d3:	mov	edx, 0x1
1000055d8:	call	0x10001972e ## symbol stub for: _fwrite
1000055dd:	lea	rbx, [rbp - 0xa0]
1000055e4:	mov	rdi, rbx
1000055e7:	call	0x10001985a ## symbol stub for: _time
1000055ec:	mov	rdi, rbx
1000055ef:	call	0x10001974c ## symbol stub for: _localtime
1000055f4:	mov	rbx, qword ptr [r14]
1000055f7:	mov	rdi, rax
1000055fa:	call	0x1000196a4 ## symbol stub for: _asctime
1000055ff:	lea	rsi, [rip + 0x177f6] ## literal pool for: "\nDone %s"
100005606:	mov	rdi, rbx
100005609:	mov	rdx, rax
10000560c:	xor	eax, eax
10000560e:	call	0x1000196fe ## symbol stub for: _fprintf
100005613:	mov	rdi, qword ptr [r14]
100005616:	call	0x1000196e6 ## symbol stub for: _fflush
10000561b:	jmp	0x1000068b0
100005620:	cmp	dword ptr [rbp - 0xa4], 0x0
100005627:	je	0x10000565c
100005629:	mov	rcx, qword ptr [r13]
10000562d:	lea	rdi, [rip + 0x17846] ## literal pool for: "sd: Scanning files\n"
100005634:	mov	esi, 0x13
100005639:	mov	edx, 0x1
10000563e:	call	0x10001972e ## symbol stub for: _fwrite
100005643:	mov	rdi, qword ptr [r13]
100005647:	call	0x1000196e6 ## symbol stub for: _fflush
10000564c:	mov	rax, qword ptr [rip + 0x24035]
100005653:	test	rax, rax
100005656:	je	0x1000056f5
10000565c:	lea	r14, [rip + 0x17432] ## literal pool for: "name not matched: "
100005663:	mov	ebx, 0x19
100005668:	lea	r15, [rip + 0x23de9]
10000566f:	xor	ecx, ecx
100005671:	mov	edx, dword ptr [rip + 0x23b91]
100005677:	cmp	edx, 0x4
10000567a:	ja	0x100005688
10000567c:	bt	ebx, edx
10000567f:	jae	0x100005688
100005681:	cmp	dword ptr [r15], 0x0
100005685:	setne	cl
100005688:	mov	rdi, qword ptr [rax]
10000568b:	movzx	esi, cl
10000568e:	call	0x100016494
100005693:	test	eax, eax
100005695:	je	0x1000056bf
100005697:	cmp	eax, -0x1
10000569a:	jne	0x100008319
1000056a0:	mov	rax, qword ptr [rip + 0x23fe1]
1000056a7:	mov	rsi, qword ptr [rax]
1000056aa:	mov	rdi, r14
1000056ad:	call	0x1000034f4
1000056b2:	cmp	dword ptr [rbp - 0xf0], 0x0
1000056b9:	jne	0x1000083cd
1000056bf:	mov	rax, qword ptr [rip + 0x23fc2]
1000056c6:	mov	rdi, qword ptr [rax]
1000056c9:	call	0x100019716 ## symbol stub for: _free
1000056ce:	mov	rdi, qword ptr [rip + 0x23fb3]
1000056d5:	mov	rax, qword ptr [rdi + 0x8]
1000056d9:	mov	qword ptr [rip + 0x23fa8], rax
1000056e0:	call	0x100019716 ## symbol stub for: _free
1000056e5:	mov	rax, qword ptr [rip + 0x23f9c]
1000056ec:	test	rax, rax
1000056ef:	jne	0x10000566f
1000056f5:	lea	rax, [rip + 0x23fa4]
1000056fc:	cmp	dword ptr [rax], 0x2
1000056ff:	jne	0x10000576b
100005701:	xor	eax, eax
100005703:	mov	ecx, dword ptr [rip + 0x23aff]
100005709:	cmp	ecx, 0x4
10000570c:	ja	0x100005725
10000570e:	mov	edx, 0x19
100005713:	bt	edx, ecx
100005716:	jae	0x100005725
100005718:	lea	rax, [rip + 0x23d39]
10000571f:	cmp	dword ptr [rax], 0x0
100005722:	setne	al
100005725:	movzx	esi, al
100005728:	lea	rdi, [rip + 0x1775f] ## literal pool for: "."
10000572f:	call	0x100016494
100005734:	test	eax, eax
100005736:	je	0x10000576b
100005738:	cmp	eax, -0x1
10000573b:	jne	0x100008786
100005741:	lea	rdi, [rip + 0x1734d] ## literal pool for: "name not matched: "
100005748:	lea	rsi, [rip + 0x17741] ## literal pool for: "current directory for -R"
10000574f:	call	0x1000034f4
100005754:	cmp	dword ptr [rbp - 0xf0], 0x0
10000575b:	mov	dword ptr [rbp - 0xf0], 0x0
100005765:	jne	0x100008792
10000576b:	cmp	dword ptr [rbp - 0xa4], 0x0
100005772:	je	0x100005797
100005774:	mov	rcx, qword ptr [r13]
100005778:	lea	rdi, [rip + 0x1772d] ## literal pool for: "sd: Applying filters\n"
10000577f:	mov	esi, 0x15
100005784:	mov	edx, 0x1
100005789:	call	0x10001972e ## symbol stub for: _fwrite
10000578e:	mov	rdi, qword ptr [r13]
100005792:	call	0x1000196e6 ## symbol stub for: _fflush
100005797:	cmp	dword ptr [rbp - 0xc4], 0x0
10000579e:	jne	0x1000057f9
1000057a0:	cmp	dword ptr [rbp - 0xc0], 0x4
1000057a7:	je	0x1000057f9
1000057a9:	mov	eax, dword ptr [rip + 0x23a59]
1000057af:	and	eax, -0x2
1000057b2:	cmp	eax, 0x2
1000057b5:	jne	0x1000057f9
1000057b7:	lea	rax, [rip + 0x2411a]
1000057be:	mov	rbx, qword ptr [rax]
1000057c1:	test	rbx, rbx
1000057c4:	je	0x1000057f9
1000057c6:	lea	r14, [rip + 0x23c8b]
1000057cd:	cmp	dword ptr [r12], 0x0
1000057d2:	je	0x1000057e2
1000057d4:	mov	rdi, qword ptr [rbx + 0x78]
1000057d8:	mov	esi, dword ptr [r14]
1000057db:	call	0x100010a07
1000057e0:	jmp	0x1000057e7
1000057e2:	mov	eax, 0x1
1000057e7:	mov	dword ptr [rbx + 0x88], eax
1000057ed:	mov	rbx, qword ptr [rbx + 0x98]
1000057f4:	test	rbx, rbx
1000057f7:	jne	0x1000057cd
1000057f9:	cmp	dword ptr [rbp - 0xa4], 0x0
100005800:	je	0x100005825
100005802:	mov	rcx, qword ptr [r13]
100005806:	lea	rdi, [rip + 0x176b5] ## literal pool for: "sd: Checking dups\n"
10000580d:	mov	esi, 0x12
100005812:	mov	edx, 0x1
100005817:	call	0x10001972e ## symbol stub for: _fwrite
10000581c:	mov	rdi, qword ptr [r13]
100005820:	call	0x1000196e6 ## symbol stub for: _fflush
100005825:	call	0x100010be1
10000582a:	test	eax, eax
10000582c:	jne	0x100008506
100005832:	lea	rax, [rip + 0x2570f]
100005839:	cmp	qword ptr [rax], 0x0
10000583d:	je	0x10000584e
10000583f:	lea	rax, [rip + 0x2571a]
100005846:	mov	rdi, qword ptr [rax]
100005849:	call	0x100019716 ## symbol stub for: _free
10000584e:	lea	r12, [rip + 0x23f5b]
100005855:	xor	eax, eax
100005857:	mov	qword ptr [rbp - 0xd8], rax
10000585e:	cmp	qword ptr [r12], 0x0
100005863:	jne	0x1000058bb
100005865:	lea	r15, [rip + 0x256ec]
10000586c:	mov	r14, qword ptr [r15]
10000586f:	mov	rdi, r14
100005872:	mov	esi, 0x2f
100005877:	call	0x100019842 ## symbol stub for: _strrchr
10000587c:	test	rax, rax
10000587f:	je	0x1000058bb
100005881:	mov	rbx, rax
100005884:	sub	eax, r14d
100005887:	inc	eax
100005889:	movsxd	rdi, eax
10000588c:	call	0x100019758 ## symbol stub for: _malloc
100005891:	mov	qword ptr [r12], rax
100005895:	test	rax, rax
100005898:	je	0x1000086fb
10000589e:	movsx	r14d, byte ptr [rbx]
1000058a2:	mov	byte ptr [rbx], 0x0
1000058a5:	mov	rdi, qword ptr [r12]
1000058a9:	mov	rsi, qword ptr [r15]
1000058ac:	call	0x100019824 ## symbol stub for: _strcpy
1000058b1:	mov	qword ptr [rbp - 0xd8], r14
1000058b8:	mov	byte ptr [rbx], r14b
1000058bb:	cmp	dword ptr [rbp - 0xa4], 0x0
1000058c2:	je	0x1000058e7
1000058c4:	mov	rcx, qword ptr [r13]
1000058c8:	lea	rdi, [rip + 0x17643] ## literal pool for: "sd: Scanning files to update\n"
1000058cf:	mov	esi, 0x1d
1000058d4:	mov	edx, 0x1
1000058d9:	call	0x10001972e ## symbol stub for: _fwrite
1000058de:	mov	rdi, qword ptr [r13]
1000058e2:	call	0x1000196e6 ## symbol stub for: _fflush
1000058e7:	lea	rax, [rip + 0x23ee2]
1000058ee:	mov	dword ptr [rax], 0x0
1000058f4:	lea	r14, [rip + 0x23edd]
1000058fb:	mov	qword ptr [r14], 0x0
100005902:	lea	rax, [rip + 0x23fcf]
100005909:	mov	rbx, qword ptr [rax]
10000590c:	test	rbx, rbx
10000590f:	lea	r15, [rip + 0x23e76]
100005916:	je	0x100005d11
10000591c:	mov	dword ptr [rbp - 0xb4], 0x1
100005926:	lea	r12, [rip + 0x23e9b]
10000592d:	xor	eax, eax
10000592f:	mov	qword ptr [rbp - 0xf8], rax
100005936:	lea	rax, [rip + 0x23b1f]
10000593d:	cmp	dword ptr [rax], 0x0
100005940:	je	0x1000059f1
100005946:	cmp	qword ptr [r12], 0x0
10000594b:	je	0x1000059f1
100005951:	mov	rax, qword ptr [r14]
100005954:	inc	rax
100005957:	mov	qword ptr [r14], rax
10000595a:	movabs	rcx, -0x70a3d70a3d70a3d7
100005964:	imul	rax, rcx
100005968:	ror	rax, 0x2
10000596c:	movabs	rcx, 0x28f5c28f5c28f5c
100005976:	cmp	rax, rcx
100005979:	ja	0x1000059f1
10000597b:	xor	edi, edi
10000597d:	call	0x10001985a ## symbol stub for: _time
100005982:	mov	r13, rax
100005985:	sub	rax, qword ptr [r12]
100005989:	lea	rcx, [rip + 0x23af8]
100005990:	cmp	rax, qword ptr [rcx]
100005993:	jle	0x1000059f1
100005995:	lea	rax, [rip + 0x23e34]
10000599c:	cmp	dword ptr [rax], 0x0
10000599f:	jne	0x1000059ca
1000059a1:	lea	rax, [rip + 0x23e28]
1000059a8:	mov	dword ptr [rax], 0x1
1000059ae:	lea	r15, [rip + 0x2557b]
1000059b5:	mov	rsi, qword ptr [r15]
1000059b8:	mov	edi, 0x20
1000059bd:	call	0x100019704 ## symbol stub for: _fputc
1000059c2:	mov	rdi, qword ptr [r15]
1000059c5:	call	0x1000196e6 ## symbol stub for: _fflush
1000059ca:	mov	qword ptr [r12], r13
1000059ce:	lea	r15, [rip + 0x2555b]
1000059d5:	mov	rsi, qword ptr [r15]
1000059d8:	mov	edi, 0x2e
1000059dd:	call	0x100019704 ## symbol stub for: _fputc
1000059e2:	mov	rdi, qword ptr [r15]
1000059e5:	call	0x1000196e6 ## symbol stub for: _fflush
1000059ea:	lea	r15, [rip + 0x23d9b]
1000059f1:	mov	dword ptr [rbx + 0x90], 0x0
1000059fb:	cmp	dword ptr [rbx + 0x88], 0x0
100005a02:	je	0x100005a3b
100005a04:	mov	r13, qword ptr [rbx + 0x18]
100005a08:	mov	rax, qword ptr [rbx + 0x20]
100005a0c:	mov	qword ptr [rbp - 0xe8], rax
100005a13:	mov	eax, dword ptr [rip + 0x237ef]
100005a19:	cmp	eax, 0x4
100005a1c:	je	0x100005a22
100005a1e:	test	eax, eax
100005a20:	jne	0x100005a83
100005a22:	mov	rdi, rbx
100005a25:	lea	rsi, [rbp - 0x140]
100005a2c:	call	0x10000ed53
100005a31:	test	al, 0x1
100005a33:	jne	0x100005a4a
100005a35:	mov	rax, qword ptr [rbx + 0x8]
100005a39:	jmp	0x100005a56
100005a3b:	mov	dword ptr [rbp - 0xb4], 0x0
100005a45:	jmp	0x100005c24
100005a4a:	lea	rdi, [rbp - 0x138]
100005a51:	call	0x1000114d4
100005a56:	lea	rcx, [rip + 0x23d83]
100005a5d:	cmp	rax, qword ptr [rcx]
100005a60:	jb	0x100005a74
100005a62:	lea	rcx, [rip + 0x23d7f]
100005a69:	mov	rcx, qword ptr [rcx]
100005a6c:	dec	rcx
100005a6f:	cmp	rcx, rax
100005a72:	jae	0x100005aa0
100005a74:	mov	dword ptr [rbx + 0x88], 0x0
100005a7e:	jmp	0x100005c24
100005a83:	mov	r13, qword ptr [rbx + 0x50]
100005a87:	test	r13, r13
100005a8a:	je	0x100005ad1
100005a8c:	mov	rdi, r13
100005a8f:	call	0x100019830 ## symbol stub for: _strlen
100005a94:	cmp	byte ptr [rax + r13 - 0x1], 0x2f
100005a9a:	sete	r15b
100005a9e:	jmp	0x100005ad4
100005aa0:	lea	rax, [rip + 0x23c89]
100005aa7:	inc	qword ptr [rax]
100005aaa:	mov	rax, qword ptr [rbp - 0xe8]
100005ab1:	mov	qword ptr [rbx + 0x20], rax
100005ab5:	cmp	r13, -0x3
100005ab9:	ja	0x100005ac5
100005abb:	lea	rax, [rip + 0x23c8e]
100005ac2:	add	qword ptr [rax], r13
100005ac5:	inc	qword ptr [rbp - 0xf8]
100005acc:	jmp	0x100005c24
100005ad1:	xor	r15d, r15d
100005ad4:	mov	rdi, r13
100005ad7:	xor	esi, esi
100005ad9:	lea	rdx, [rbp - 0xe8]
100005ae0:	lea	rcx, [rbp - 0xa0]
100005ae7:	call	0x1000169ab
100005aec:	mov	r13, rax
100005aef:	test	rax, rax
100005af2:	mov	eax, dword ptr [rbp - 0xb4]
100005af8:	mov	ecx, 0x0
100005afd:	cmove	eax, ecx
100005b00:	mov	dword ptr [rbp - 0xb4], eax
100005b06:	je	0x100005b26
100005b08:	lea	rax, [rip + 0x23cd1]
100005b0f:	cmp	r13, qword ptr [rax]
100005b12:	jb	0x100005b26
100005b14:	lea	rax, [rip + 0x23ccd]
100005b1b:	mov	rax, qword ptr [rax]
100005b1e:	dec	rax
100005b21:	cmp	rax, r13
100005b24:	jae	0x100005b64
100005b26:	movzx	ecx, byte ptr [rip + 0x5548b]
100005b2d:	add	ecx, ecx
100005b2f:	xor	eax, eax
100005b31:	mov	dword ptr [rbx + 0x88], ecx
100005b37:	test	r13, r13
100005b3a:	je	0x100005b98
100005b3c:	lea	rcx, [rip + 0x23c9d]
100005b43:	cmp	r13, qword ptr [rcx]
100005b46:	lea	r15, [rip + 0x23c3f]
100005b4d:	jb	0x100005b9f
100005b4f:	lea	rax, [rip + 0x23c92]
100005b56:	mov	rax, qword ptr [rax]
100005b59:	dec	rax
100005b5c:	cmp	rax, r13
100005b5f:	setae	al
100005b62:	jmp	0x100005b9f
100005b64:	mov	eax, dword ptr [rip + 0x2369e]
100005b6a:	and	eax, -0x2
100005b6d:	cmp	eax, 0x2
100005b70:	jne	0x100005c4d
100005b76:	mov	rdi, rbx
100005b79:	lea	rsi, [rbp - 0x140]
100005b80:	call	0x10000ed53
100005b85:	test	al, 0x1
100005b87:	jne	0x100005c39
100005b8d:	cmp	r13, qword ptr [rbx + 0x8]
100005b91:	jbe	0x100005b26
100005b93:	jmp	0x100005c4d
100005b98:	lea	r15, [rip + 0x23bed]
100005b9f:	movzx	ecx, al
100005ba2:	mov	dword ptr [rbx + 0x8c], ecx
100005ba8:	lea	rcx, [rip + 0x23afd]
100005baf:	cmp	dword ptr [rcx], 0x0
100005bb2:	lea	rcx, [rip + 0x25377]
100005bb9:	je	0x100005be7
100005bbb:	mov	rdi, qword ptr [rcx]
100005bbe:	mov	rdx, qword ptr [rbx + 0x80]
100005bc5:	test	al, al
100005bc7:	lea	rcx, [rip + 0x17386] ## literal pool for: "missing or early"
100005bce:	lea	rax, [rip + 0x17374] ## literal pool for: "up to date"
100005bd5:	cmovne	rcx, rax
100005bd9:	lea	rsi, [rip + 0x17352] ## literal pool for: "zip diagnostic: %s %s\n"
100005be0:	xor	eax, eax
100005be2:	call	0x1000196fe ## symbol stub for: _fprintf
100005be7:	lea	rax, [rip + 0x23b72]
100005bee:	mov	rdi, qword ptr [rax]
100005bf1:	test	rdi, rdi
100005bf4:	je	0x100005c24
100005bf6:	mov	rdx, qword ptr [rbx + 0x80]
100005bfd:	cmp	dword ptr [rbx + 0x8c], 0x0
100005c04:	lea	rcx, [rip + 0x1733e] ## literal pool for: "up to date"
100005c0b:	lea	rax, [rip + 0x17342] ## literal pool for: "missing or early"
100005c12:	cmove	rcx, rax
100005c16:	lea	rsi, [rip + 0x17315] ## literal pool for: "zip diagnostic: %s %s\n"
100005c1d:	xor	eax, eax
100005c1f:	call	0x1000196fe ## symbol stub for: _fprintf
100005c24:	mov	rbx, qword ptr [rbx + 0x98]
100005c2b:	test	rbx, rbx
100005c2e:	jne	0x100005936
100005c34:	jmp	0x100005d24
100005c39:	mov	rax, qword ptr [rbp - 0x98]
100005c40:	cmp	rax, qword ptr [rbp - 0x138]
100005c47:	jle	0x100005b26
100005c4d:	lea	rax, [rip + 0x23b2c]
100005c54:	cmp	dword ptr [rax], 0x0
100005c57:	mov	rax, qword ptr [rbx + 0x8]
100005c5b:	je	0x100005c8c
100005c5d:	cmp	r13, rax
100005c60:	jne	0x100005c8c
100005c62:	mov	rax, qword ptr [rbp - 0xe8]
100005c69:	cmp	rax, -0x1
100005c6d:	sete	cl
100005c70:	test	r15b, cl
100005c73:	lea	r15, [rip + 0x23b12]
100005c7a:	jne	0x100005a74
100005c80:	cmp	rax, qword ptr [rbx + 0x20]
100005c84:	je	0x100005a74
100005c8a:	jmp	0x100005c98
100005c8c:	cmp	r13, rax
100005c8f:	lea	r15, [rip + 0x23af6]
100005c96:	jne	0x100005cc4
100005c98:	mov	rdx, qword ptr [rbx + 0x20]
100005c9c:	mov	rax, qword ptr [rbp - 0xe8]
100005ca3:	mov	rcx, rax
100005ca6:	not	rcx
100005ca9:	or	rcx, rdx
100005cac:	sete	cl
100005caf:	cmp	rax, rdx
100005cb2:	je	0x100005cd7
100005cb4:	test	cl, cl
100005cb6:	jne	0x100005cd7
100005cb8:	mov	dword ptr [rbp - 0xb4], 0x0
100005cc2:	jmp	0x100005ce1
100005cc4:	mov	dword ptr [rbp - 0xb4], 0x0
100005cce:	mov	rax, qword ptr [rbp - 0xe8]
100005cd5:	jmp	0x100005ce1
100005cd7:	mov	dword ptr [rbx + 0x90], 0x1
100005ce1:	lea	rcx, [rip + 0x23a48]
100005ce8:	inc	qword ptr [rcx]
100005ceb:	mov	ecx, 0x0
100005cf0:	cmp	rax, -0x3
100005cf4:	cmovbe	rcx, rax
100005cf8:	mov	qword ptr [rbx + 0x20], rcx
100005cfc:	ja	0x100005ac5
100005d02:	lea	rcx, [rip + 0x23a47]
100005d09:	add	qword ptr [rcx], rax
100005d0c:	jmp	0x100005ac5
100005d11:	mov	dword ptr [rbp - 0xb4], 0x1
100005d1b:	xor	eax, eax
100005d1d:	mov	qword ptr [rbp - 0xf8], rax
100005d24:	cmp	dword ptr [rbp - 0xa4], 0x0
100005d2b:	je	0x100005d56
100005d2d:	lea	rbx, [rip + 0x251fc]
100005d34:	mov	rdi, qword ptr [rbx]
100005d37:	lea	rax, [rip + 0x251ea]
100005d3e:	mov	edx, dword ptr [rax]
100005d40:	lea	rsi, [rip + 0x1721e] ## literal pool for: "sd: fcount = %u\n"
100005d47:	xor	eax, eax
100005d49:	call	0x1000196fe ## symbol stub for: _fprintf
100005d4e:	mov	rdi, qword ptr [rbx]
100005d51:	call	0x1000196e6 ## symbol stub for: _fflush
100005d56:	mov	qword ptr [r14], 0x0
100005d5d:	lea	rax, [rip + 0x23a6c]
100005d64:	mov	dword ptr [rax], 0x0
100005d6a:	lea	rax, [rip + 0x23b7f]
100005d71:	mov	r12, qword ptr [rax]
100005d74:	test	r12, r12
100005d77:	je	0x100005fa2
100005d7d:	lea	r13, [rip + 0x23a44]
100005d84:	lea	rax, [rip + 0x236d1]
100005d8b:	cmp	dword ptr [rax], 0x0
100005d8e:	je	0x100005ee2
100005d94:	cmp	dword ptr [r15], 0x0
100005d98:	mov	rbx, qword ptr [r13]
100005d9c:	jne	0x100005e39
100005da2:	test	rbx, rbx
100005da5:	jne	0x100005e39
100005dab:	mov	rax, qword ptr [r14]
100005dae:	movabs	rcx, -0x70a3d70a3d70a3d7
100005db8:	imul	rax, rcx
100005dbc:	ror	rax, 0x2
100005dc0:	movabs	rcx, 0x28f5c28f5c28f5c
100005dca:	cmp	rax, rcx
100005dcd:	ja	0x100005ee2
100005dd3:	xor	edi, edi
100005dd5:	call	0x10001985a ## symbol stub for: _time
100005dda:	mov	rbx, rax
100005ddd:	lea	rcx, [rip + 0x239dc]
100005de4:	sub	rax, qword ptr [rcx]
100005de7:	lea	rcx, [rip + 0x23692]
100005dee:	cmp	rax, qword ptr [rcx]
100005df1:	jle	0x100005e35
100005df3:	lea	r15, [rip + 0x25136]
100005dfa:	mov	rcx, qword ptr [r15]
100005dfd:	mov	esi, 0xf
100005e02:	mov	edx, 0x1
100005e07:	lea	rdi, [rip + 0x17168] ## literal pool for: "Scanning files "
100005e0e:	call	0x10001972e ## symbol stub for: _fwrite
100005e13:	mov	rdi, qword ptr [r15]
100005e16:	lea	r15, [rip + 0x2396f]
100005e1d:	call	0x1000196e6 ## symbol stub for: _fflush
100005e22:	lea	rax, [rip + 0x23aa3]
100005e29:	mov	dword ptr [rax], 0x1
100005e2f:	mov	qword ptr [r13], rbx
100005e33:	jmp	0x100005e39
100005e35:	mov	rbx, qword ptr [r13]
100005e39:	test	rbx, rbx
100005e3c:	je	0x100005ee2
100005e42:	mov	rax, qword ptr [r14]
100005e45:	inc	rax
100005e48:	mov	qword ptr [r14], rax
100005e4b:	movabs	rcx, -0x70a3d70a3d70a3d7
100005e55:	imul	rax, rcx
100005e59:	ror	rax, 0x2
100005e5d:	movabs	rcx, 0x28f5c28f5c28f5c
100005e67:	cmp	rax, rcx
100005e6a:	ja	0x100005ee2
100005e6c:	xor	edi, edi
100005e6e:	call	0x10001985a ## symbol stub for: _time
100005e73:	mov	rbx, rax
100005e76:	sub	rax, qword ptr [r13]
100005e7a:	lea	rcx, [rip + 0x23607]
100005e81:	cmp	rax, qword ptr [rcx]
100005e84:	jle	0x100005ee2
100005e86:	lea	rax, [rip + 0x23943]
100005e8d:	cmp	dword ptr [rax], 0x0
100005e90:	jne	0x100005ec2
100005e92:	lea	rax, [rip + 0x23937]
100005e99:	mov	dword ptr [rax], 0x1
100005e9f:	lea	r15, [rip + 0x2508a]
100005ea6:	mov	rsi, qword ptr [r15]
100005ea9:	mov	edi, 0x20
100005eae:	call	0x100019704 ## symbol stub for: _fputc
100005eb3:	mov	rdi, qword ptr [r15]
100005eb6:	lea	r15, [rip + 0x238cf]
100005ebd:	call	0x1000196e6 ## symbol stub for: _fflush
100005ec2:	mov	qword ptr [r13], rbx
100005ec6:	lea	rbx, [rip + 0x25063]
100005ecd:	mov	rsi, qword ptr [rbx]
100005ed0:	mov	edi, 0x2e
100005ed5:	call	0x100019704 ## symbol stub for: _fputc
100005eda:	mov	rdi, qword ptr [rbx]
100005edd:	call	0x1000196e6 ## symbol stub for: _fflush
100005ee2:	mov	eax, dword ptr [rip + 0x23320]
100005ee8:	test	eax, eax
100005eea:	je	0x100005f8e
100005ef0:	cmp	eax, 0x3
100005ef3:	je	0x100005f8e
100005ef9:	mov	rdi, qword ptr [r12]
100005efd:	xor	esi, esi
100005eff:	lea	rdx, [rbp - 0xe8]
100005f06:	xor	ecx, ecx
100005f08:	call	0x1000169ab
100005f0d:	test	rax, rax
100005f10:	je	0x100005f8e
100005f12:	mov	ecx, dword ptr [rip + 0x232f0]
100005f18:	test	ecx, ecx
100005f1a:	je	0x100005f8e
100005f1c:	cmp	ecx, 0x3
100005f1f:	je	0x100005f8e
100005f21:	lea	rcx, [rip + 0x238b8]
100005f28:	cmp	rax, qword ptr [rcx]
100005f2b:	jb	0x100005f8e
100005f2d:	lea	rcx, [rip + 0x238b4]
100005f34:	mov	rcx, qword ptr [rcx]
100005f37:	dec	rcx
100005f3a:	cmp	rcx, rax
100005f3d:	jb	0x100005f8e
100005f3f:	mov	rdi, qword ptr [r12 + 0x10]
100005f44:	lea	rax, [rip + 0x2500d]
100005f4b:	mov	rsi, qword ptr [rax]
100005f4e:	call	0x100015685
100005f53:	or	eax, dword ptr [r15]
100005f56:	je	0x100005f8e
100005f58:	lea	rax, [rip + 0x237d1]
100005f5f:	inc	qword ptr [rax]
100005f62:	mov	qword ptr [r12 + 0x28], 0x0
100005f6b:	mov	rax, qword ptr [rbp - 0xe8]
100005f72:	cmp	rax, -0x3
100005f76:	ja	0x100005f87
100005f78:	lea	rcx, [rip + 0x237d1]
100005f7f:	add	qword ptr [rcx], rax
100005f82:	mov	qword ptr [r12 + 0x28], rax
100005f87:	mov	r12, qword ptr [r12 + 0x38]
100005f8c:	jmp	0x100005f99
100005f8e:	mov	rdi, r12
100005f91:	call	0x1000107a9
100005f96:	mov	r12, rax
100005f99:	test	r12, r12
100005f9c:	jne	0x100005d84
100005fa2:	lea	rbx, [rip + 0x23923]
100005fa9:	cmp	dword ptr [rbx], 0x0
100005fac:	lea	r13, [rip + 0x24f7d]
100005fb3:	je	0x100005fc9
100005fb5:	mov	rsi, qword ptr [r13]
100005fb9:	mov	edi, 0xa
100005fbe:	call	0x100019704 ## symbol stub for: _fputc
100005fc3:	mov	dword ptr [rbx], 0x0
100005fc9:	lea	rax, [rip + 0x237cc]
100005fd0:	cmp	dword ptr [rax], 0x0
100005fd3:	lea	rdx, [rip + 0x236d6]
100005fda:	lea	rsi, [rip + 0x236d7]
100005fe1:	je	0x100006062
100005fe3:	lea	rax, [rip + 0x23472]
100005fea:	cmp	dword ptr [rax], 0x0
100005fed:	je	0x1000065f8
100005ff3:	mov	rdi, qword ptr [r13]
100005ff7:	call	0x1000196e6 ## symbol stub for: _fflush
100005ffc:	lea	rax, [rip + 0x23459]
100006003:	cmp	dword ptr [rax], 0x0
100006006:	je	0x1000065f8
10000600c:	lea	rax, [rip + 0x23789]
100006013:	mov	eax, dword ptr [rax]
100006015:	cmp	eax, 0x5
100006018:	ja	0x1000065f8
10000601e:	mov	ecx, 0x2a
100006023:	bt	ecx, eax
100006026:	jae	0x1000065f8
10000602c:	cmp	dword ptr [rbx], 0x0
10000602f:	je	0x100006045
100006031:	mov	rsi, qword ptr [r13]
100006035:	mov	edi, 0xa
10000603a:	call	0x100019704 ## symbol stub for: _fputc
10000603f:	mov	dword ptr [rbx], 0x0
100006045:	cmp	dword ptr [rbp - 0xc0], 0x3
10000604c:	jne	0x100006354
100006052:	mov	rcx, qword ptr [r13]
100006056:	lea	rdi, [rip + 0x16f29] ## literal pool for: "Archive contains:\n"
10000605d:	jmp	0x1000065e0
100006062:	lea	rax, [rip + 0x23717]
100006069:	cmp	dword ptr [rax], 0x0
10000606c:	mov	rdi, qword ptr [rbp - 0xf8]
100006073:	jne	0x1000060aa
100006075:	test	rdi, rdi
100006078:	jne	0x1000060aa
10000607a:	lea	rax, [rip + 0x2386f]
100006081:	cmp	qword ptr [rax], 0x0
100006085:	jne	0x1000060aa
100006087:	lea	rax, [rip + 0x2384a]
10000608e:	mov	rax, qword ptr [rax]
100006091:	test	rax, rax
100006094:	jne	0x1000062cd
10000609a:	lea	rcx, [rip + 0x236ef]
1000060a1:	cmp	dword ptr [rcx], 0x0
1000060a4:	je	0x1000062cd
1000060aa:	cmp	dword ptr [rbp - 0xb4], 0x0
1000060b1:	je	0x1000060e4
1000060b3:	lea	rax, [rip + 0x235fa]
1000060ba:	cmp	dword ptr [rax], 0x0
1000060bd:	je	0x1000060e4
1000060bf:	lea	rax, [rip + 0x24e62]
1000060c6:	cmp	qword ptr [rax], 0x0
1000060ca:	jne	0x1000060e4
1000060cc:	lea	rdi, [rip + 0x16f37] ## literal pool for: "Archive is current"
1000060d3:	lea	rsi, [rip + 0x146dd] ## literal pool for: ""
1000060da:	call	0x100003422
1000060df:	jmp	0x1000068b0
1000060e4:	mov	dword ptr [rbp - 0xb4], 0x0
1000060ee:	cmp	dword ptr [rbp - 0x108], 0x0
1000060f5:	je	0x100006119
1000060f7:	test	rdi, rdi
1000060fa:	jne	0x100006119
1000060fc:	lea	rax, [rip + 0x24e4d]
100006103:	mov	rax, qword ptr [rax]
100006106:	lea	rcx, [rip + 0x237cb]
10000610d:	or	rax, qword ptr [rcx]
100006110:	setne	al
100006113:	mov	dword ptr [rbp - 0xb4], eax
100006119:	lea	rax, [rip + 0x23688]
100006120:	cmp	qword ptr [rax], 0x0
100006124:	je	0x100006135
100006126:	call	0x100016ed5
10000612b:	lea	rcx, [rip + 0x237de]
100006132:	mov	qword ptr [rcx], rax
100006135:	lea	rax, [rip + 0x2379c]
10000613c:	mov	r12, qword ptr [rax]
10000613f:	lea	r15, [rip + 0x236e2]
100006146:	lea	r14, [rip + 0x24e03]
10000614d:	mov	rbx, qword ptr [r14]
100006150:	test	r12, r12
100006153:	je	0x10000616a
100006155:	cmp	qword ptr [r15], 0x1
100006159:	je	0x10000616a
10000615b:	cmp	rbx, 0x4
10000615f:	jne	0x10000616a
100006161:	mov	qword ptr [r14], 0x0
100006168:	xor	ebx, ebx
10000616a:	lea	rax, [rip + 0x24de7]
100006171:	mov	rdi, qword ptr [rax]
100006174:	lea	rsi, [rip + 0x16387] ## literal pool for: "-"
10000617b:	call	0x10001981e ## symbol stub for: _strcmp
100006180:	test	eax, eax
100006182:	je	0x1000061a3
100006184:	test	r12, r12
100006187:	jne	0x10000640c
10000618d:	test	byte ptr [rip + 0x54e20], 0x1
100006194:	je	0x10000640c
10000619a:	test	rbx, rbx
10000619d:	jne	0x10000640c
1000061a3:	lea	rax, [rip + 0x23676]
1000061aa:	mov	dword ptr [rax], 0x0
1000061b0:	cmp	byte ptr [rip + 0x54e05], 0x1
1000061b7:	jne	0x1000061c0
1000061b9:	mov	qword ptr [r14], 0x0
1000061c0:	cmp	dword ptr [rbp - 0xa4], 0x0
1000061c7:	je	0x1000061ec
1000061c9:	mov	rcx, qword ptr [r13]
1000061cd:	lea	rdi, [rip + 0x16e4c] ## literal pool for: "sd: Open zip file and create temp file\n"
1000061d4:	mov	esi, 0x27
1000061d9:	mov	edx, 0x1
1000061de:	call	0x10001972e ## symbol stub for: _fwrite
1000061e3:	mov	rdi, qword ptr [r13]
1000061e7:	call	0x1000196e6 ## symbol stub for: _fflush
1000061ec:	lea	rax, [rip + 0x24d45]
1000061f3:	mov	qword ptr [rax], 0x0
1000061fa:	lea	rax, [rip + 0x24d57]
100006201:	mov	rbx, qword ptr [rax]
100006204:	lea	rsi, [rip + 0x162f7] ## literal pool for: "-"
10000620b:	mov	rdi, rbx
10000620e:	call	0x10001981e ## symbol stub for: _strcmp
100006213:	test	eax, eax
100006215:	je	0x100006389
10000621b:	cmp	byte ptr [rbp - 0xb4], 0x0
100006222:	je	0x10000648c
100006228:	cmp	qword ptr [r15], 0x2
10000622c:	jae	0x1000088eb
100006232:	lea	rsi, [rip + 0x16de4] ## literal pool for: "r+"
100006239:	mov	rdi, rbx
10000623c:	call	0x1000196f8 ## symbol stub for: _fopen
100006241:	lea	rcx, [rip + 0x235b0]
100006248:	mov	qword ptr [rcx], rax
10000624b:	lea	rcx, [rip + 0x24d06]
100006252:	mov	rsi, qword ptr [rcx]
100006255:	test	rax, rax
100006258:	je	0x100008ab1
10000625e:	lea	rcx, [rip + 0x2358b]
100006265:	mov	qword ptr [rcx], rsi
100006268:	lea	rbx, [rip + 0x238b1]
10000626f:	mov	rsi, qword ptr [rbx]
100006272:	mov	rdi, rax
100006275:	xor	edx, edx
100006277:	call	0x10001971c ## symbol stub for: _fseeko
10000627c:	test	eax, eax
10000627e:	jne	0x1000088fc
100006284:	mov	rax, qword ptr [rbx]
100006287:	lea	rcx, [rip + 0x2360a]
10000628e:	mov	qword ptr [rcx], rax
100006291:	lea	rcx, [rip + 0x24ca0]
100006298:	mov	qword ptr [rcx], rax
10000629b:	jmp	0x1000069ac
1000062a0:	call	0x100008cec
1000062a5:	jmp	0x1000068b0
1000062aa:	call	0x100008d5e
1000062af:	jmp	0x1000068b0
1000062b4:	mov	rsi, qword ptr [r15]
1000062b7:	lea	rdi, [rip + 0x16b47] ## literal pool for: "Could not get info for input split: "
1000062be:	call	0x1000034f4
1000062c3:	mov	ebx, 0x12
1000062c8:	jmp	0x1000068b9
1000062cd:	test	rax, rax
1000062d0:	je	0x100006310
1000062d2:	cmp	byte ptr [rip + 0x54cf7], 0x0
1000062d9:	jne	0x1000060aa
1000062df:	test	byte ptr [rip + 0x54cd2], 0x1
1000062e6:	jne	0x1000060aa
1000062ec:	test	byte ptr [rip + 0x54cc9], 0x1
1000062f3:	jne	0x1000060aa
1000062f9:	test	byte ptr [rip + 0x54cc0], 0x1
100006300:	jne	0x1000060aa
100006306:	mov	ecx, dword ptr [rsi]
100006308:	or	ecx, dword ptr [rdx]
10000630a:	jne	0x1000060aa
100006310:	cmp	byte ptr [rip + 0x54cad], 0x1
100006317:	jne	0x100006333
100006319:	test	rax, rax
10000631c:	jne	0x1000082fc
100006322:	lea	rcx, [rip + 0x24c27]
100006329:	cmp	qword ptr [rcx], 0x0
10000632d:	jne	0x1000082fc
100006333:	mov	ecx, dword ptr [rip + 0x22ecf]
100006339:	and	ecx, -0x2
10000633c:	cmp	ecx, 0x2
10000633f:	jne	0x100008927
100006345:	mov	ebx, 0xc
10000634a:	mov	edi, 0xc
10000634f:	jmp	0x1000068b4
100006354:	mov	eax, dword ptr [rip + 0x22eae]
10000635a:	cmp	eax, 0x4
10000635d:	je	0x1000065b1
100006363:	cmp	eax, 0x3
100006366:	je	0x1000065c3
10000636c:	test	eax, eax
10000636e:	jne	0x1000065d5
100006374:	mov	rcx, qword ptr [r13]
100006378:	lea	rdi, [rip + 0x16c1a] ## literal pool for: "Would Delete:\n"
10000637f:	mov	esi, 0xe
100006384:	jmp	0x1000065e5
100006389:	mov	rax, qword ptr [rip + 0x1dc98] ## literal pool symbol address: ___stdoutp
100006390:	mov	rax, qword ptr [rax]
100006393:	lea	rcx, [rip + 0x2345e]
10000639a:	mov	qword ptr [rcx], rax
10000639d:	mov	edi, 0x4
1000063a2:	call	0x100019758 ## symbol stub for: _malloc
1000063a7:	lea	rcx, [rip + 0x23442]
1000063ae:	mov	qword ptr [rcx], rax
1000063b1:	test	rax, rax
1000063b4:	je	0x100008580
1000063ba:	mov	word ptr [rax], 0x2d
1000063bf:	jmp	0x1000069ac
1000063c4:	xor	ebx, ebx
1000063c6:	lea	r14, [rip + 0x21f93]
1000063cd:	mov	rdi, qword ptr [rbx + r14]
1000063d1:	call	0x1000197b2 ## symbol stub for: _puts
1000063d6:	add	rbx, 0x8
1000063da:	cmp	rbx, 0x1b0
1000063e1:	jne	0x1000063cd
1000063e3:	jmp	0x1000068b0
1000063e8:	xor	ebx, ebx
1000063ea:	lea	r14, [rip + 0x1dd4f]
1000063f1:	mov	rdi, qword ptr [rbx + r14]
1000063f5:	call	0x1000197b2 ## symbol stub for: _puts
1000063fa:	add	rbx, 0x8
1000063fe:	cmp	rbx, 0xa20
100006405:	jne	0x1000063f1
100006407:	jmp	0x1000068b0
10000640c:	lea	rax, [rip + 0x16463] ## literal pool for: "w"
100006413:	lea	rsi, [rip + 0x16c03] ## literal pool for: "r+"
10000641a:	or	r12, rbx
10000641d:	cmove	rsi, rax
100006421:	cmp	dword ptr [rbp - 0x110], 0x0
100006428:	lea	rbx, [rip + 0x233e9]
10000642f:	mov	rdi, qword ptr [rbx]
100006432:	cmovne	rsi, rax
100006436:	call	0x1000196f8 ## symbol stub for: _fopen
10000643b:	test	rax, rax
10000643e:	je	0x100008a67
100006444:	mov	rdi, rax
100006447:	call	0x1000196ce ## symbol stub for: _fclose
10000644c:	mov	rdi, qword ptr [rbx]
10000644f:	call	0x100011867
100006454:	lea	rcx, [rip + 0x233c5]
10000645b:	mov	dword ptr [rcx], eax
10000645d:	lea	rax, [rip + 0x23474]
100006464:	cmp	qword ptr [rax], 0x0
100006468:	jne	0x1000061b0
10000646e:	cmp	qword ptr [r14], 0x0
100006472:	jne	0x1000061b0
100006478:	lea	rax, [rip + 0x23399]
10000647f:	mov	rdi, qword ptr [rax]
100006482:	call	0x10001160a
100006487:	jmp	0x1000061b0
10000648c:	cmp	dword ptr [rbp - 0xa4], 0x0
100006493:	je	0x1000064b8
100006495:	mov	rcx, qword ptr [r13]
100006499:	lea	rdi, [rip + 0x16bc2] ## literal pool for: "sd: Creating new zip file\n"
1000064a0:	mov	esi, 0x1a
1000064a5:	mov	edx, 0x1
1000064aa:	call	0x10001972e ## symbol stub for: _fwrite
1000064af:	mov	rdi, qword ptr [r13]
1000064b3:	call	0x1000196e6 ## symbol stub for: _fflush
1000064b8:	cmp	qword ptr [r14], 0x0
1000064bc:	je	0x10000653a
1000064be:	lea	r15, [rip + 0x23343]
1000064c5:	mov	rdi, qword ptr [r15]
1000064c8:	xor	esi, esi
1000064ca:	call	0x1000127e1
1000064cf:	lea	rbx, [rip + 0x2333a]
1000064d6:	mov	qword ptr [rbx], rax
1000064d9:	lea	rsi, [rip + 0x15ad0] ## literal pool for: "r"
1000064e0:	mov	rdi, rax
1000064e3:	call	0x1000196f8 ## symbol stub for: _fopen
1000064e8:	lea	r13, [rip + 0x23311]
1000064ef:	mov	qword ptr [r13], rax
1000064f3:	test	rax, rax
1000064f6:	jne	0x10000653a
1000064f8:	lea	r12, [rip + 0x15ab1] ## literal pool for: "r"
1000064ff:	xor	edi, edi
100006501:	call	0x1000128e3
100006506:	test	eax, eax
100006508:	jne	0x100008752
10000650e:	mov	rdi, qword ptr [rbx]
100006511:	call	0x100019716 ## symbol stub for: _free
100006516:	mov	rdi, qword ptr [r15]
100006519:	mov	esi, 0x1
10000651e:	call	0x1000127e1
100006523:	mov	qword ptr [rbx], rax
100006526:	mov	rdi, rax
100006529:	mov	rsi, r12
10000652c:	call	0x1000196f8 ## symbol stub for: _fopen
100006531:	mov	qword ptr [r13], rax
100006535:	test	rax, rax
100006538:	je	0x1000064ff
10000653a:	lea	rax, [rip + 0x2326f]
100006541:	mov	rbx, qword ptr [rax]
100006544:	test	rbx, rbx
100006547:	je	0x1000068e1
10000654d:	mov	rdi, rbx
100006550:	call	0x100019830 ## symbol stub for: _strlen
100006555:	lea	rdi, [rax + 0xc]
100006559:	call	0x100019758 ## symbol stub for: _malloc
10000655e:	lea	r15, [rip + 0x2328b]
100006565:	mov	qword ptr [r15], rax
100006568:	test	rax, rax
10000656b:	je	0x100008580
100006571:	mov	rdi, rax
100006574:	mov	rsi, rbx
100006577:	call	0x100019824 ## symbol stub for: _strcpy
10000657c:	mov	rbx, qword ptr [r15]
10000657f:	cmp	byte ptr [rbx], 0x0
100006582:	lea	r13, [rip + 0x249a7]
100006589:	je	0x10000659e
10000658b:	mov	rdi, rbx
10000658e:	call	0x100019830 ## symbol stub for: _strlen
100006593:	cmp	byte ptr [rax + rbx - 0x1], 0x2f
100006598:	je	0x100006955
10000659e:	mov	rdi, rbx
1000065a1:	call	0x100019830 ## symbol stub for: _strlen
1000065a6:	mov	word ptr [rbx + rax], 0x2f
1000065ac:	jmp	0x100006955
1000065b1:	mov	rcx, qword ptr [r13]
1000065b5:	lea	rdi, [rip + 0x169fc] ## literal pool for: "Would Copy:\n"
1000065bc:	mov	esi, 0xc
1000065c1:	jmp	0x1000065e5
1000065c3:	mov	rcx, qword ptr [r13]
1000065c7:	lea	rdi, [rip + 0x169da] ## literal pool for: "Would Freshen:\n"
1000065ce:	mov	esi, 0xf
1000065d3:	jmp	0x1000065e5
1000065d5:	mov	rcx, qword ptr [r13]
1000065d9:	lea	rdi, [rip + 0x169e5] ## literal pool for: "Would Add/Update:\n"
1000065e0:	mov	esi, 0x12
1000065e5:	mov	edx, 0x1
1000065ea:	call	0x10001972e ## symbol stub for: _fwrite
1000065ef:	mov	rdi, qword ptr [r13]
1000065f3:	call	0x1000196e6 ## symbol stub for: _fflush
1000065f8:	lea	r14, [rip + 0x23161]
1000065ff:	mov	rsi, qword ptr [r14]
100006602:	test	rsi, rsi
100006605:	je	0x1000066a4
10000660b:	lea	rbx, [rip + 0x232be]
100006612:	cmp	dword ptr [rbx], 0x0
100006615:	je	0x100006627
100006617:	mov	edi, 0xa
10000661c:	call	0x100019704 ## symbol stub for: _fputc
100006621:	mov	dword ptr [rbx], 0x0
100006627:	cmp	dword ptr [rbp - 0xc0], 0x3
10000662e:	jne	0x10000663c
100006630:	mov	rcx, qword ptr [r14]
100006633:	lea	rdi, [rip + 0x1694c] ## literal pool for: "Archive contains:\n"
10000663a:	jmp	0x10000668d
10000663c:	mov	eax, dword ptr [rip + 0x22bc6]
100006642:	cmp	eax, 0x4
100006645:	je	0x100006661
100006647:	cmp	eax, 0x3
10000664a:	je	0x100006672
10000664c:	test	eax, eax
10000664e:	jne	0x100006683
100006650:	mov	rcx, qword ptr [r14]
100006653:	lea	rdi, [rip + 0x1693f] ## literal pool for: "Would Delete:\n"
10000665a:	mov	esi, 0xe
10000665f:	jmp	0x100006692
100006661:	mov	rcx, qword ptr [r14]
100006664:	lea	rdi, [rip + 0x1694d] ## literal pool for: "Would Copy:\n"
10000666b:	mov	esi, 0xc
100006670:	jmp	0x100006692
100006672:	mov	rcx, qword ptr [r14]
100006675:	lea	rdi, [rip + 0x1692c] ## literal pool for: "Would Freshen:\n"
10000667c:	mov	esi, 0xf
100006681:	jmp	0x100006692
100006683:	mov	rcx, qword ptr [r14]
100006686:	lea	rdi, [rip + 0x16938] ## literal pool for: "Would Add/Update:\n"
10000668d:	mov	esi, 0x12
100006692:	mov	edx, 0x1
100006697:	call	0x10001972e ## symbol stub for: _fwrite
10000669c:	mov	rdi, qword ptr [r14]
10000669f:	call	0x1000196e6 ## symbol stub for: _fflush
1000066a4:	lea	rax, [rip + 0x2322d]
1000066ab:	mov	rbx, qword ptr [rax]
1000066ae:	test	rbx, rbx
1000066b1:	mov	rax, qword ptr [rbp - 0xc0]
1000066b8:	je	0x100006789
1000066be:	xor	r15d, r15d
1000066c1:	xor	r13d, r13d
1000066c4:	xor	r14d, r14d
1000066c7:	cmp	eax, 0x3
1000066ca:	je	0x1000066dd
1000066cc:	cmp	dword ptr [rbx + 0x88], 0x0
1000066d3:	jne	0x1000066dd
1000066d5:	mov	r12, r13
1000066d8:	jmp	0x100006774
1000066dd:	mov	r12, qword ptr [rbx + 0x20]
1000066e1:	test	r12, r12
1000066e4:	cmovs	r12, r15
1000066e8:	lea	rcx, [rip + 0x22d6d]
1000066ef:	cmp	dword ptr [rcx], 0x0
1000066f2:	je	0x100006732
1000066f4:	lea	rax, [rip + 0x230a1]
1000066fb:	mov	eax, dword ptr [rax]
1000066fd:	and	eax, -0x3
100006700:	cmp	eax, 0x1
100006703:	mov	rax, qword ptr [rbp - 0xc0]
10000670a:	jne	0x100006732
10000670c:	lea	rax, [rip + 0x2481d]
100006713:	mov	rdi, qword ptr [rax]
100006716:	mov	rdx, qword ptr [rbx + 0x80]
10000671d:	lea	rsi, [rip + 0x168b4] ## literal pool for: "  %s\n"
100006724:	xor	eax, eax
100006726:	call	0x1000196fe ## symbol stub for: _fprintf
10000672b:	mov	rax, qword ptr [rbp - 0xc0]
100006732:	inc	r14
100006735:	add	r12, r13
100006738:	lea	rcx, [rip + 0x23021]
10000673f:	mov	rdi, qword ptr [rcx]
100006742:	test	rdi, rdi
100006745:	je	0x100006774
100006747:	lea	rax, [rip + 0x2304e]
10000674e:	mov	eax, dword ptr [rax]
100006750:	add	eax, -0x5
100006753:	cmp	eax, 0x2
100006756:	jb	0x10000676d
100006758:	mov	rdx, qword ptr [rbx + 0x80]
10000675f:	lea	rsi, [rip + 0x16872] ## literal pool for: "  %s\n"
100006766:	xor	eax, eax
100006768:	call	0x1000196fe ## symbol stub for: _fprintf
10000676d:	mov	rax, qword ptr [rbp - 0xc0]
100006774:	mov	rbx, qword ptr [rbx + 0x98]
10000677b:	mov	r13, r12
10000677e:	test	rbx, rbx
100006781:	jne	0x1000066c7
100006787:	jmp	0x10000678f
100006789:	xor	r14d, r14d
10000678c:	xor	r12d, r12d
10000678f:	lea	rax, [rip + 0x2315a]
100006796:	mov	rbx, qword ptr [rax]
100006799:	test	rbx, rbx
10000679c:	je	0x10000681d
10000679e:	lea	r15, [rip + 0x16833] ## literal pool for: "  %s\n"
1000067a5:	mov	r13, qword ptr [rbx + 0x28]
1000067a9:	test	r13, r13
1000067ac:	mov	eax, 0x0
1000067b1:	cmovs	r13, rax
1000067b5:	lea	rax, [rip + 0x22ca0]
1000067bc:	cmp	dword ptr [rax], 0x0
1000067bf:	je	0x1000067f1
1000067c1:	lea	rax, [rip + 0x22fd4]
1000067c8:	mov	eax, dword ptr [rax]
1000067ca:	cmp	eax, 0x5
1000067cd:	ja	0x1000067f1
1000067cf:	mov	ecx, 0x2a
1000067d4:	bt	ecx, eax
1000067d7:	jae	0x1000067f1
1000067d9:	lea	rax, [rip + 0x24750]
1000067e0:	mov	rdi, qword ptr [rax]
1000067e3:	mov	rdx, qword ptr [rbx + 0x18]
1000067e7:	mov	rsi, r15
1000067ea:	xor	eax, eax
1000067ec:	call	0x1000196fe ## symbol stub for: _fprintf
1000067f1:	lea	rax, [rip + 0x22f68]
1000067f8:	mov	rdi, qword ptr [rax]
1000067fb:	test	rdi, rdi
1000067fe:	je	0x10000680e
100006800:	mov	rdx, qword ptr [rbx + 0x18]
100006804:	mov	rsi, r15
100006807:	xor	eax, eax
100006809:	call	0x1000196fe ## symbol stub for: _fprintf
10000680e:	inc	r14
100006811:	add	r12, r13
100006814:	mov	rbx, qword ptr [rbx + 0x38]
100006818:	test	rbx, rbx
10000681b:	jne	0x1000067a5
10000681d:	lea	rax, [rip + 0x22c38]
100006824:	cmp	dword ptr [rax], 0x0
100006827:	lea	r13, [rip + 0x22f32]
10000682e:	jne	0x100006839
100006830:	mov	r15, qword ptr [r13]
100006834:	test	r15, r15
100006837:	jne	0x10000687e
100006839:	lea	rax, [rip + 0x246f0]
100006840:	mov	r15, qword ptr [rax]
100006843:	mov	rdi, r14
100006846:	xor	esi, esi
100006848:	xor	edx, edx
10000684a:	call	0x100015b84
10000684f:	mov	rbx, rax
100006852:	mov	rdi, r12
100006855:	xor	esi, esi
100006857:	xor	edx, edx
100006859:	call	0x100015b84
10000685e:	lea	rsi, [rip + 0x16779] ## literal pool for: "Total %s entries (%s bytes)\n"
100006865:	mov	rdi, r15
100006868:	mov	rdx, rbx
10000686b:	mov	rcx, rax
10000686e:	xor	eax, eax
100006870:	call	0x1000196fe ## symbol stub for: _fprintf
100006875:	mov	r15, qword ptr [r13]
100006879:	test	r15, r15
10000687c:	je	0x1000068b0
10000687e:	mov	rdi, r14
100006881:	xor	esi, esi
100006883:	xor	edx, edx
100006885:	call	0x100015b84
10000688a:	mov	r14, rax
10000688d:	mov	rdi, r12
100006890:	xor	esi, esi
100006892:	xor	edx, edx
100006894:	call	0x100015b84
100006899:	lea	rsi, [rip + 0x1673e] ## literal pool for: "Total %s entries (%s bytes)\n"
1000068a0:	mov	rdi, r15
1000068a3:	mov	rdx, r14
1000068a6:	mov	rcx, rax
1000068a9:	xor	eax, eax
1000068ab:	call	0x1000196fe ## symbol stub for: _fprintf
1000068b0:	xor	ebx, ebx
1000068b2:	xor	edi, edi
1000068b4:	call	0x100008eec
1000068b9:	mov	rax, qword ptr [rip + 0x1d750] ## literal pool symbol address: ___stack_chk_guard
1000068c0:	mov	rax, qword ptr [rax]
1000068c3:	cmp	rax, qword ptr [rbp - 0x30]
1000068c7:	jne	0x100008325
1000068cd:	mov	eax, ebx
1000068cf:	add	rsp, 0x138
1000068d6:	pop	rbx
1000068d7:	pop	r12
1000068d9:	pop	r13
1000068db:	pop	r14
1000068dd:	pop	r15
1000068df:	pop	rbp
1000068e0:	ret
1000068e1:	lea	rax, [rip + 0x24670]
1000068e8:	mov	rbx, qword ptr [rax]
1000068eb:	mov	rdi, rbx
1000068ee:	call	0x100019830 ## symbol stub for: _strlen
1000068f3:	lea	rdi, [rax + 0xc]
1000068f7:	call	0x100019758 ## symbol stub for: _malloc
1000068fc:	lea	r15, [rip + 0x22eed]
100006903:	mov	qword ptr [r15], rax
100006906:	test	rax, rax
100006909:	je	0x100008580
10000690f:	mov	rdi, rax
100006912:	mov	rsi, rbx
100006915:	call	0x100019824 ## symbol stub for: _strcpy
10000691a:	mov	rbx, qword ptr [r15]
10000691d:	mov	rdi, rbx
100006920:	call	0x100019830 ## symbol stub for: _strlen
100006925:	mov	edx, eax
100006927:	xor	ecx, ecx
100006929:	test	eax, eax
10000692b:	cmovs	rcx, rax
10000692f:	lea	r13, [rip + 0x245fa]
100006936:	test	edx, edx
100006938:	jle	0x10000694e
10000693a:	lea	rax, [rdx - 0x1]
10000693e:	cmp	byte ptr [rbx + rdx - 0x1], 0x2f
100006943:	mov	rdx, rax
100006946:	jne	0x100006936
100006948:	inc	rax
10000694b:	mov	rcx, rax
10000694e:	movsxd	rax, ecx
100006951:	mov	byte ptr [rbx + rax], 0x0
100006955:	lea	r15, [rip + 0x22e94]
10000695c:	mov	rbx, qword ptr [r15]
10000695f:	mov	rdi, rbx
100006962:	call	0x100019830 ## symbol stub for: _strlen
100006967:	movabs	rcx, 0x585858585858697a
100006971:	mov	qword ptr [rbx + rax], rcx
100006975:	mov	byte ptr [rbx + rax + 0x8], 0x0
10000697a:	mov	rdi, qword ptr [r15]
10000697d:	call	0x100019770 ## symbol stub for: _mkstemp
100006982:	cmp	eax, -0x1
100006985:	je	0x100008845
10000698b:	lea	rsi, [rip + 0x15ee4] ## literal pool for: "w"
100006992:	mov	edi, eax
100006994:	call	0x1000196d4 ## symbol stub for: _fdopen
100006999:	lea	rcx, [rip + 0x22e58]
1000069a0:	mov	qword ptr [rcx], rax
1000069a3:	test	rax, rax
1000069a6:	je	0x100008845
1000069ac:	mov	edi, 0x4000
1000069b1:	call	0x100019758 ## symbol stub for: _malloc
1000069b6:	test	rax, rax
1000069b9:	je	0x10000881f
1000069bf:	lea	rbx, [rip + 0x22e32]
1000069c6:	mov	rdi, qword ptr [rbx]
1000069c9:	mov	ecx, 0x4000
1000069ce:	mov	qword ptr [rbp - 0x110], rax
1000069d5:	mov	rsi, rax
1000069d8:	xor	edx, edx
1000069da:	call	0x1000197ee ## symbol stub for: _setvbuf
1000069df:	lea	r15, [rip + 0x22a7e]
1000069e6:	mov	dword ptr [r15], 0x1
1000069ed:	mov	rdi, qword ptr [rbx]
1000069f0:	call	0x10000f75c
1000069f5:	test	eax, eax
1000069f7:	jne	0x100006a0d
1000069f9:	mov	dword ptr [r15], 0x0
100006a00:	lea	rax, [rip + 0x22d81]
100006a07:	mov	dword ptr [rax], 0x1
100006a0d:	lea	rax, [rip + 0x24544]
100006a14:	mov	rdi, qword ptr [rax]
100006a17:	lea	rsi, [rip + 0x15ae4] ## literal pool for: "-"
100006a1e:	call	0x10001981e ## symbol stub for: _strcmp
100006a23:	test	eax, eax
100006a25:	sete	al
100006a28:	or	al, byte ptr [rbp - 0xb4]
100006a2e:	jne	0x100006afe
100006a34:	lea	r15, [rip + 0x22dc5]
100006a3b:	mov	rdi, qword ptr [r15]
100006a3e:	test	rdi, rdi
100006a41:	je	0x100006a70
100006a43:	mov	rax, qword ptr [r14]
100006a46:	test	rax, rax
100006a49:	lea	rbx, [rip + 0x22e54]
100006a50:	je	0x100006a77
100006a52:	mov	rdi, rax
100006a55:	call	0x100011949
100006a5a:	test	eax, eax
100006a5c:	jne	0x100008a74
100006a62:	mov	rdi, qword ptr [r15]
100006a65:	xor	eax, eax
100006a67:	mov	qword ptr [rbp - 0xd8], rax
100006a6e:	jmp	0x100006a77
100006a70:	lea	rbx, [rip + 0x22e2d]
100006a77:	test	rdi, rdi
100006a7a:	je	0x100006a97
100006a7c:	call	0x1000196ce ## symbol stub for: _fclose
100006a81:	mov	qword ptr [r15], 0x0
100006a88:	lea	rax, [rip + 0x22d81]
100006a8f:	mov	rdi, qword ptr [rax]
100006a92:	call	0x100019716 ## symbol stub for: _free
100006a97:	mov	rax, qword ptr [r14]
100006a9a:	lea	rcx, [rip + 0x24497]
100006aa1:	mov	qword ptr [rcx], rax
100006aa4:	cmp	dword ptr [rbx], 0x0
100006aa7:	je	0x100006afe
100006aa9:	cmp	dword ptr [rbp - 0xa4], 0x0
100006ab0:	je	0x100006ad5
100006ab2:	mov	rcx, qword ptr [r13]
100006ab6:	lea	rdi, [rip + 0x165df] ## literal pool for: "sd: Adding spanning/splitting signature at top of archive\n"
100006abd:	mov	esi, 0x3a
100006ac2:	mov	edx, 0x1
100006ac7:	call	0x10001972e ## symbol stub for: _fwrite
100006acc:	mov	rdi, qword ptr [r13]
100006ad0:	call	0x1000196e6 ## symbol stub for: _fflush
100006ad5:	lea	rdi, [rip + 0x23054]
100006adc:	mov	dword ptr [rdi], 0x8074b50
100006ae2:	mov	esi, 0x1
100006ae7:	mov	edx, 0x4
100006aec:	xor	ecx, ecx
100006aee:	call	0x1000121b7
100006af3:	lea	rax, [rip + 0x2443e]
100006afa:	add	qword ptr [rax], 0x4
100006afe:	lea	rax, [rip + 0x22dd3]
100006b05:	mov	r15, qword ptr [rax]
100006b08:	cmp	dword ptr [rbp - 0xa4], 0x0
100006b0f:	je	0x100006b43
100006b11:	test	r15, r15
100006b14:	je	0x100006b43
100006b16:	mov	rcx, qword ptr [r13]
100006b1a:	lea	rdi, [rip + 0x165b6] ## literal pool for: "sd: Going through old zip file\n"
100006b21:	mov	esi, 0x1f
100006b26:	mov	edx, 0x1
100006b2b:	call	0x10001972e ## symbol stub for: _fwrite
100006b30:	mov	rdi, qword ptr [r13]
100006b34:	call	0x1000196e6 ## symbol stub for: _fflush
100006b39:	lea	rax, [rip + 0x22d98]
100006b40:	mov	r15, qword ptr [rax]
100006b43:	test	r15, r15
100006b46:	je	0x1000076a9
100006b4c:	lea	rax, [rip + 0x22d85]
100006b53:	mov	qword ptr [rbp - 0xe0], rax
100006b5a:	lea	r14, [rip + 0x22bff]
100006b61:	mov	dword ptr [rbp - 0xc0], 0x0
100006b6b:	cmp	dword ptr [r15 + 0x88], 0x1
100006b73:	jne	0x100006c0c
100006b79:	mov	rax, qword ptr [r15 + 0x20]
100006b7d:	cmp	rax, -0x1
100006b81:	mov	r13d, 0x0
100006b87:	cmovne	r13, rax
100006b8b:	mov	ebx, dword ptr [rip + 0x22677]
100006b91:	test	ebx, 0xfffffffb
100006b97:	lea	r12, [rip + 0x22b12]
100006b9e:	je	0x100006ecf
100006ba4:	lea	rax, [rip + 0x22b01]
100006bab:	cmp	dword ptr [rax], 0x0
100006bae:	jne	0x100006bc6
100006bb0:	lea	rax, [rip + 0x22afd]
100006bb7:	cmp	dword ptr [rax], 0x0
100006bba:	je	0x100006bc6
100006bbc:	cmp	dword ptr [r15 + 0x90], 0x0
100006bc4:	jne	0x100006bcb
100006bc6:	call	0x100009870
100006bcb:	lea	rax, [rip + 0x2288a]
100006bd2:	cmp	dword ptr [rax], 0x0
100006bd5:	mov	rbx, qword ptr [rbp - 0xd8]
100006bdc:	je	0x100007163
100006be2:	cmp	dword ptr [rip + 0x2261f], 0x3
100006be9:	jne	0x100006f80
100006bef:	lea	rbx, [rip + 0x2433a]
100006bf6:	mov	rdi, qword ptr [rbx]
100006bf9:	mov	rdx, qword ptr [r15 + 0x80]
100006c00:	lea	rsi, [rip + 0x164f0] ## literal pool for: "freshening: %s"
100006c07:	jmp	0x100007140
100006c0c:	cmp	dword ptr [rip + 0x225f5], 0x4
100006c13:	je	0x1000075dd
100006c19:	lea	rax, [rip + 0x22a94]
100006c20:	cmp	dword ptr [rax], 0x0
100006c23:	lea	rbx, [rip + 0x22ca2]
100006c2a:	je	0x100006fcb
100006c30:	lea	rax, [rip + 0x22add]
100006c37:	cmp	dword ptr [rax], 0x0
100006c3a:	je	0x100006cc2
100006c40:	lea	rax, [rip + 0x22815]
100006c47:	cmp	dword ptr [rax], 0x0
100006c4a:	je	0x100006c7e
100006c4c:	mov	rdi, qword ptr [r13]
100006c50:	lea	rax, [rip + 0x22bd9]
100006c57:	mov	rdx, qword ptr [rax]
100006c5a:	inc	rdx
100006c5d:	lea	rax, [rip + 0x22bec]
100006c64:	mov	rcx, qword ptr [rax]
100006c67:	inc	rcx
100006c6a:	lea	rsi, [rip + 0x1b0b0] ## literal pool for: "%lu>%lu: "
100006c71:	xor	eax, eax
100006c73:	call	0x1000196fe ## symbol stub for: _fprintf
100006c78:	mov	dword ptr [rbx], 0x1
100006c7e:	lea	rax, [rip + 0x22ad3]
100006c85:	cmp	dword ptr [rax], 0x0
100006c88:	je	0x100006cc2
100006c8a:	mov	rdi, qword ptr [r14]
100006c8d:	lea	rax, [rip + 0x22b9c]
100006c94:	mov	rdx, qword ptr [rax]
100006c97:	inc	rdx
100006c9a:	lea	rax, [rip + 0x22baf]
100006ca1:	mov	rcx, qword ptr [rax]
100006ca4:	inc	rcx
100006ca7:	lea	rsi, [rip + 0x1b073] ## literal pool for: "%lu>%lu: "
100006cae:	xor	eax, eax
100006cb0:	call	0x1000196fe ## symbol stub for: _fprintf
100006cb5:	lea	rax, [rip + 0x22c14]
100006cbc:	mov	dword ptr [rax], 0x1
100006cc2:	lea	rax, [rip + 0x22a3f]
100006cc9:	cmp	dword ptr [rax], 0x0
100006ccc:	je	0x100006d2c
100006cce:	lea	rax, [rip + 0x22787]
100006cd5:	cmp	dword ptr [rax], 0x0
100006cd8:	je	0x100006cfa
100006cda:	mov	rcx, qword ptr [r13]
100006cde:	mov	esi, 0x8
100006ce3:	mov	edx, 0x1
100006ce8:	lea	rdi, [rip + 0x1b05a] ## literal pool for: "   /    "
100006cef:	call	0x10001972e ## symbol stub for: _fwrite
100006cf4:	mov	dword ptr [rbx], 0x1
100006cfa:	lea	rax, [rip + 0x22a57]
100006d01:	cmp	dword ptr [rax], 0x0
100006d04:	je	0x100006d2c
100006d06:	mov	rcx, qword ptr [r14]
100006d09:	mov	esi, 0x8
100006d0e:	mov	edx, 0x1
100006d13:	lea	rdi, [rip + 0x1b02f] ## literal pool for: "   /    "
100006d1a:	call	0x10001972e ## symbol stub for: _fwrite
100006d1f:	lea	rax, [rip + 0x22baa]
100006d26:	mov	dword ptr [rax], 0x1
100006d2c:	lea	rax, [rip + 0x229d9]
100006d33:	cmp	dword ptr [rax], 0x0
100006d36:	je	0x100006d96
100006d38:	lea	rax, [rip + 0x2271d]
100006d3f:	cmp	dword ptr [rax], 0x0
100006d42:	je	0x100006d64
100006d44:	mov	rcx, qword ptr [r13]
100006d48:	mov	esi, 0xc
100006d4d:	mov	edx, 0x1
100006d52:	lea	rdi, [rip + 0x1aff9] ## literal pool for: "     /      "
100006d59:	call	0x10001972e ## symbol stub for: _fwrite
100006d5e:	mov	dword ptr [rbx], 0x1
100006d64:	lea	rax, [rip + 0x229ed]
100006d6b:	cmp	dword ptr [rax], 0x0
100006d6e:	je	0x100006d96
100006d70:	mov	rcx, qword ptr [r14]
100006d73:	mov	esi, 0xc
100006d78:	mov	edx, 0x1
100006d7d:	lea	rdi, [rip + 0x1afce] ## literal pool for: "     /      "
100006d84:	call	0x10001972e ## symbol stub for: _fwrite
100006d89:	lea	rax, [rip + 0x22b40]
100006d90:	mov	dword ptr [rax], 0x1
100006d96:	lea	rax, [rip + 0x226bf]
100006d9d:	cmp	dword ptr [rax], 0x0
100006da0:	je	0x100006dab
100006da2:	mov	rdi, qword ptr [r13]
100006da6:	call	0x1000196e6 ## symbol stub for: _fflush
100006dab:	lea	rax, [rip + 0x229a6]
100006db2:	cmp	dword ptr [rax], 0x0
100006db5:	je	0x100006dbf
100006db7:	mov	rdi, qword ptr [r14]
100006dba:	call	0x1000196e6 ## symbol stub for: _fflush
100006dbf:	lea	rax, [rip + 0x22696]
100006dc6:	cmp	dword ptr [rax], 0x0
100006dc9:	je	0x100006e42
100006dcb:	mov	rdi, qword ptr [r13]
100006dcf:	mov	rdx, qword ptr [r15 + 0x80]
100006dd6:	lea	rsi, [rip + 0x16475] ## literal pool for: "deleting: %s"
100006ddd:	xor	eax, eax
100006ddf:	call	0x1000196fe ## symbol stub for: _fprintf
100006de4:	lea	rax, [rip + 0x2292d]
100006deb:	cmp	dword ptr [rax], 0x0
100006dee:	je	0x100006e25
100006df0:	mov	rcx, qword ptr [r13]
100006df4:	mov	esi, 0x2
100006df9:	mov	edx, 0x1
100006dfe:	lea	rdi, [rip + 0x163eb] ## literal pool for: " ("
100006e05:	call	0x10001972e ## symbol stub for: _fwrite
100006e0a:	mov	rdi, qword ptr [r13]
100006e0e:	mov	rsi, qword ptr [r15 + 0x20]
100006e12:	call	0x100015c88
100006e17:	mov	rsi, qword ptr [r13]
100006e1b:	mov	edi, 0x29
100006e20:	call	0x100019704 ## symbol stub for: _fputc
100006e25:	mov	rdi, qword ptr [r13]
100006e29:	call	0x1000196e6 ## symbol stub for: _fflush
100006e2e:	mov	rsi, qword ptr [r13]
100006e32:	mov	edi, 0xa
100006e37:	call	0x100019704 ## symbol stub for: _fputc
100006e3c:	mov	dword ptr [rbx], 0x0
100006e42:	lea	rax, [rip + 0x2290f]
100006e49:	cmp	dword ptr [rax], 0x0
100006e4c:	je	0x100007385
100006e52:	mov	rdi, qword ptr [r14]
100006e55:	mov	rdx, qword ptr [r15 + 0x80]
100006e5c:	lea	rsi, [rip + 0x163ef] ## literal pool for: "deleting: %s"
100006e63:	xor	eax, eax
100006e65:	call	0x1000196fe ## symbol stub for: _fprintf
100006e6a:	lea	rax, [rip + 0x228a7]
100006e71:	cmp	dword ptr [rax], 0x0
100006e74:	je	0x100006ea8
100006e76:	mov	rcx, qword ptr [r14]
100006e79:	mov	esi, 0x2
100006e7e:	mov	edx, 0x1
100006e83:	lea	rdi, [rip + 0x16366] ## literal pool for: " ("
100006e8a:	call	0x10001972e ## symbol stub for: _fwrite
100006e8f:	mov	rdi, qword ptr [r14]
100006e92:	mov	rsi, qword ptr [r15 + 0x20]
100006e96:	call	0x100015c88
100006e9b:	mov	rsi, qword ptr [r14]
100006e9e:	mov	edi, 0x29
100006ea3:	call	0x100019704 ## symbol stub for: _fputc
100006ea8:	mov	rsi, qword ptr [r14]
100006eab:	mov	edi, 0xa
100006eb0:	call	0x100019704 ## symbol stub for: _fputc
100006eb5:	mov	rdi, qword ptr [r14]
100006eb8:	call	0x1000196e6 ## symbol stub for: _fflush
100006ebd:	lea	rax, [rip + 0x22a0c]
100006ec4:	mov	dword ptr [rax], 0x0
100006eca:	jmp	0x100007385
100006ecf:	call	0x100009870
100006ed4:	cmp	ebx, 0x4
100006ed7:	jne	0x100007006
100006edd:	lea	rax, [rip + 0x227ec]
100006ee4:	mov	rcx, qword ptr [rax]
100006ee7:	lea	rdx, [rcx - 0x1]
100006eeb:	mov	rax, qword ptr [r15 + 0x30]
100006eef:	cmp	rdx, rax
100006ef2:	lea	r13, [rip + 0x24037]
100006ef9:	lea	rbx, [rip + 0x229cc]
100006f00:	je	0x100006f12
100006f02:	lea	rcx, [rip + 0x227c7]
100006f09:	mov	qword ptr [rcx], 0x0
100006f10:	xor	ecx, ecx
100006f12:	dec	rcx
100006f15:	lea	rdx, [rip + 0x22540]
100006f1c:	mov	edx, dword ptr [rdx]
100006f1e:	cmp	rcx, rax
100006f21:	jne	0x10000739f
100006f27:	test	edx, edx
100006f29:	je	0x100006f53
100006f2b:	mov	rdi, qword ptr [r13]
100006f2f:	mov	rdx, qword ptr [r15 + 0x80]
100006f36:	lea	rsi, [rip + 0x16298] ## literal pool for: " skipping: %s"
100006f3d:	xor	eax, eax
100006f3f:	call	0x1000196fe ## symbol stub for: _fprintf
100006f44:	mov	dword ptr [rbx], 0x1
100006f4a:	mov	rdi, qword ptr [r13]
100006f4e:	call	0x1000196e6 ## symbol stub for: _fflush
100006f53:	lea	rax, [rip + 0x227fe]
100006f5a:	cmp	dword ptr [rax], 0x0
100006f5d:	je	0x100007483
100006f63:	mov	rdi, qword ptr [r14]
100006f66:	mov	rdx, qword ptr [r15 + 0x80]
100006f6d:	lea	rsi, [rip + 0x16261] ## literal pool for: " skipping: %s"
100006f74:	xor	eax, eax
100006f76:	call	0x1000196fe ## symbol stub for: _fprintf
100006f7b:	jmp	0x10000746e
100006f80:	lea	rax, [rip + 0x2272d]
100006f87:	cmp	dword ptr [rax], 0x0
100006f8a:	je	0x100007128
100006f90:	cmp	dword ptr [r15 + 0x90], 0x0
100006f98:	je	0x100007128
100006f9e:	lea	rax, [rip + 0x22707]
100006fa5:	cmp	dword ptr [rax], 0x0
100006fa8:	je	0x100007163
100006fae:	lea	rbx, [rip + 0x23f7b]
100006fb5:	mov	rdi, qword ptr [rbx]
100006fb8:	mov	rdx, qword ptr [r15 + 0x80]
100006fbf:	lea	rsi, [rip + 0x16140] ## literal pool for: "      ok: %s"
100006fc6:	jmp	0x100007140
100006fcb:	lea	rax, [rip + 0x227ae]
100006fd2:	cmp	dword ptr [rax], 0x0
100006fd5:	setne	al
100006fd8:	or	al, byte ptr [rbp - 0xb4]
100006fde:	jne	0x100007385
100006fe4:	mov	rdi, r15
100006fe7:	call	0x10000e1ae
100006fec:	mov	r12d, eax
100006fef:	xor	eax, eax
100006ff1:	mov	qword ptr [rbp - 0xd8], rax
100006ff8:	test	r12d, r12d
100006ffb:	je	0x100007385
100007001:	jmp	0x100008602
100007006:	lea	rax, [rip + 0x2244f]
10000700d:	cmp	dword ptr [rax], 0x0
100007010:	lea	r13, [rip + 0x23f19]
100007017:	je	0x10000708a
100007019:	mov	rdi, qword ptr [r13]
10000701d:	mov	rdx, qword ptr [r15 + 0x80]
100007024:	lea	rsi, [rip + 0x16227] ## literal pool for: "deleting: %s"
10000702b:	xor	eax, eax
10000702d:	call	0x1000196fe ## symbol stub for: _fprintf
100007032:	lea	rax, [rip + 0x226df]
100007039:	cmp	dword ptr [rax], 0x0
10000703c:	je	0x100007073
10000703e:	mov	rcx, qword ptr [r13]
100007042:	mov	esi, 0x2
100007047:	mov	edx, 0x1
10000704c:	lea	rdi, [rip + 0x1619d] ## literal pool for: " ("
100007053:	call	0x10001972e ## symbol stub for: _fwrite
100007058:	mov	rdi, qword ptr [r13]
10000705c:	mov	rsi, qword ptr [r15 + 0x20]
100007060:	call	0x100015c88
100007065:	mov	rsi, qword ptr [r13]
100007069:	mov	edi, 0x29
10000706e:	call	0x100019704 ## symbol stub for: _fputc
100007073:	mov	rdi, qword ptr [r13]
100007077:	call	0x1000196e6 ## symbol stub for: _fflush
10000707c:	mov	rsi, qword ptr [r13]
100007080:	mov	edi, 0xa
100007085:	call	0x100019704 ## symbol stub for: _fputc
10000708a:	lea	rax, [rip + 0x226c7]
100007091:	cmp	dword ptr [rax], 0x0
100007094:	je	0x100007101
100007096:	mov	rdi, qword ptr [r14]
100007099:	mov	rdx, qword ptr [r15 + 0x80]
1000070a0:	lea	rsi, [rip + 0x161ab] ## literal pool for: "deleting: %s"
1000070a7:	xor	eax, eax
1000070a9:	call	0x1000196fe ## symbol stub for: _fprintf
1000070ae:	lea	rax, [rip + 0x22663]
1000070b5:	cmp	dword ptr [rax], 0x0
1000070b8:	je	0x1000070ec
1000070ba:	mov	rcx, qword ptr [r14]
1000070bd:	mov	esi, 0x2
1000070c2:	mov	edx, 0x1
1000070c7:	lea	rdi, [rip + 0x16122] ## literal pool for: " ("
1000070ce:	call	0x10001972e ## symbol stub for: _fwrite
1000070d3:	mov	rdi, qword ptr [r14]
1000070d6:	mov	rsi, qword ptr [r15 + 0x20]
1000070da:	call	0x100015c88
1000070df:	mov	rsi, qword ptr [r14]
1000070e2:	mov	edi, 0x29
1000070e7:	call	0x100019704 ## symbol stub for: _fputc
1000070ec:	mov	rsi, qword ptr [r14]
1000070ef:	mov	edi, 0xa
1000070f4:	call	0x100019704 ## symbol stub for: _fputc
1000070f9:	mov	rdi, qword ptr [r14]
1000070fc:	call	0x1000196e6 ## symbol stub for: _fflush
100007101:	lea	rax, [rip + 0x22618]
100007108:	inc	qword ptr [rax]
10000710b:	mov	rax, qword ptr [r15 + 0x18]
10000710f:	lea	rcx, [rip + 0x2262a]
100007116:	add	qword ptr [rcx], rax
100007119:	lea	rcx, [rip + 0x22618]
100007120:	add	qword ptr [rcx], rax
100007123:	jmp	0x1000075dd
100007128:	lea	rbx, [rip + 0x23e01]
10000712f:	mov	rdi, qword ptr [rbx]
100007132:	mov	rdx, qword ptr [r15 + 0x80]
100007139:	lea	rsi, [rip + 0x15fd3] ## literal pool for: "updating: %s"
100007140:	xor	eax, eax
100007142:	call	0x1000196fe ## symbol stub for: _fprintf
100007147:	lea	rax, [rip + 0x2277e]
10000714e:	mov	dword ptr [rax], 0x1
100007154:	mov	rdi, qword ptr [rbx]
100007157:	mov	rbx, qword ptr [rbp - 0xd8]
10000715e:	call	0x1000196e6 ## symbol stub for: _fflush
100007163:	lea	rax, [rip + 0x225ee]
10000716a:	cmp	dword ptr [rax], 0x0
10000716d:	je	0x1000071ed
10000716f:	cmp	dword ptr [rip + 0x22092], 0x3
100007176:	jne	0x10000718b
100007178:	mov	rdi, qword ptr [r14]
10000717b:	mov	rdx, qword ptr [r15 + 0x80]
100007182:	lea	rsi, [rip + 0x15f6e] ## literal pool for: "freshening: %s"
100007189:	jmp	0x1000071d1
10000718b:	lea	rax, [rip + 0x22522]
100007192:	cmp	dword ptr [rax], 0x0
100007195:	je	0x1000071c0
100007197:	cmp	dword ptr [r15 + 0x90], 0x0
10000719f:	je	0x1000071c0
1000071a1:	lea	rax, [rip + 0x22504]
1000071a8:	cmp	dword ptr [rax], 0x0
1000071ab:	je	0x1000071ed
1000071ad:	mov	rdi, qword ptr [r14]
1000071b0:	mov	rdx, qword ptr [r15 + 0x80]
1000071b7:	lea	rsi, [rip + 0x15f62] ## literal pool for: " current: %s"
1000071be:	jmp	0x1000071d1
1000071c0:	mov	rdi, qword ptr [r14]
1000071c3:	mov	rdx, qword ptr [r15 + 0x80]
1000071ca:	lea	rsi, [rip + 0x15f42] ## literal pool for: "updating: %s"
1000071d1:	xor	eax, eax
1000071d3:	call	0x1000196fe ## symbol stub for: _fprintf
1000071d8:	lea	rax, [rip + 0x226f1]
1000071df:	mov	dword ptr [rax], 0x1
1000071e5:	mov	rdi, qword ptr [r14]
1000071e8:	call	0x1000196e6 ## symbol stub for: _fflush
1000071ed:	lea	rdi, [rbp - 0xa0]
1000071f4:	mov	rsi, r15
1000071f7:	call	0x100009f39
1000071fc:	test	eax, eax
1000071fe:	je	0x100007226
100007200:	mov	rsi, qword ptr [r15 + 0x80]
100007207:	lea	rdi, [rip + 0x15f1f] ## literal pool for: "could not read local entry information: "
10000720e:	call	0x1000034f4
100007213:	movzx	eax, word ptr [r15 + 0x4]
100007218:	mov	word ptr [r15 + 0x3a], ax
10000721d:	mov	word ptr [r15 + 0x2a], 0x0
100007224:	jmp	0x10000727a
100007226:	mov	rdi, qword ptr [rbp - 0xa0]
10000722d:	movzx	eax, word ptr [rdi + 0x3a]
100007231:	mov	word ptr [r15 + 0x3a], ax
100007236:	movzx	eax, word ptr [rdi + 0x2a]
10000723a:	mov	word ptr [r15 + 0x2a], ax
10000723f:	mov	rax, qword ptr [rdi + 0x58]
100007243:	mov	qword ptr [r15 + 0x58], rax
100007247:	cmp	word ptr [rdi + 0x28], 0x0
10000724c:	je	0x100007275
10000724e:	mov	rdi, qword ptr [rdi + 0x70]
100007252:	call	0x100019716 ## symbol stub for: _free
100007257:	mov	rdi, qword ptr [rbp - 0xa0]
10000725e:	cmp	word ptr [rdi + 0x28], 0x0
100007263:	je	0x100007275
100007265:	mov	rdi, qword ptr [rdi + 0x50]
100007269:	call	0x100019716 ## symbol stub for: _free
10000726e:	mov	rdi, qword ptr [rbp - 0xa0]
100007275:	call	0x100019716 ## symbol stub for: _free
10000727a:	lea	rax, [rip + 0x22433]
100007281:	cmp	dword ptr [rax], 0x0
100007284:	je	0x100007290
100007286:	cmp	dword ptr [r15 + 0x90], 0x0
10000728e:	jne	0x1000072ab
100007290:	mov	rdi, r15
100007293:	call	0x10000f7b9
100007298:	mov	ebx, eax
10000729a:	lea	eax, [rbx + 0x1]
10000729d:	cmp	eax, 0x2
1000072a0:	jb	0x1000072ab
1000072a2:	cmp	ebx, 0x12
1000072a5:	jne	0x1000087d5
1000072ab:	lea	rax, [rip + 0x22402]
1000072b2:	cmp	dword ptr [rax], 0x0
1000072b5:	je	0x1000072e4
1000072b7:	cmp	dword ptr [r15 + 0x90], 0x0
1000072bf:	je	0x1000072e4
1000072c1:	mov	rdi, r15
1000072c4:	call	0x10000e1ae
1000072c9:	test	eax, eax
1000072cb:	jne	0x1000085ff
1000072d1:	lea	rdi, [rip + 0x134df] ## literal pool for: ""
1000072d8:	mov	esi, 0x1
1000072dd:	call	0x100003300
1000072e2:	jmp	0x100007353
1000072e4:	cmp	ebx, 0x12
1000072e7:	je	0x1000072ee
1000072e9:	cmp	ebx, -0x1
1000072ec:	jne	0x100007355
1000072ee:	lea	rdi, [rip + 0x134c2] ## literal pool for: ""
1000072f5:	mov	esi, 0x1
1000072fa:	call	0x100003300
1000072ff:	mov	rsi, qword ptr [r15 + 0x80]
100007306:	cmp	ebx, 0x12
100007309:	je	0x100007683
10000730f:	lea	rdi, [rip + 0x15e7b] ## literal pool for: "file and directory with the same name: "
100007316:	call	0x1000034f4
10000731b:	mov	rsi, qword ptr [r15 + 0x80]
100007322:	lea	rdi, [rip + 0x15e90] ## literal pool for: "will just copy entry over: "
100007329:	call	0x1000034f4
10000732e:	mov	rdi, r15
100007331:	call	0x10000e1ae
100007336:	test	eax, eax
100007338:	jne	0x1000085ff
10000733e:	mov	dword ptr [r15 + 0x88], 0x0
100007349:	mov	dword ptr [rbp - 0xc0], 0x1
100007353:	xor	ebx, ebx
100007355:	mov	qword ptr [rbp - 0xd8], rbx
10000735c:	lea	rax, [rip + 0x223bd]
100007363:	inc	qword ptr [rax]
100007366:	mov	rax, qword ptr [r15 + 0x20]
10000736a:	lea	rcx, [rip + 0x223cf]
100007371:	add	qword ptr [rcx], rax
100007374:	lea	rax, [rip + 0x223bd]
10000737b:	add	qword ptr [rax], r13
10000737e:	lea	r13, [rip + 0x23bab]
100007385:	mov	rbx, qword ptr [r15 + 0x98]
10000738c:	add	r15, 0x98
100007393:	mov	qword ptr [rbp - 0xe0], r15
10000739a:	jmp	0x10000765c
10000739f:	test	edx, edx
1000073a1:	je	0x10000740c
1000073a3:	mov	rdi, qword ptr [r13]
1000073a7:	mov	rdx, qword ptr [r15 + 0x80]
1000073ae:	lea	rsi, [rip + 0x15e2e] ## literal pool for: " copying: %s"
1000073b5:	xor	eax, eax
1000073b7:	call	0x1000196fe ## symbol stub for: _fprintf
1000073bc:	lea	rax, [rip + 0x22355]
1000073c3:	cmp	dword ptr [rax], 0x0
1000073c6:	je	0x1000073fd
1000073c8:	mov	rcx, qword ptr [r13]
1000073cc:	mov	esi, 0x2
1000073d1:	mov	edx, 0x1
1000073d6:	lea	rdi, [rip + 0x15e13] ## literal pool for: " ("
1000073dd:	call	0x10001972e ## symbol stub for: _fwrite
1000073e2:	mov	rdi, qword ptr [r13]
1000073e6:	mov	rsi, qword ptr [r15 + 0x20]
1000073ea:	call	0x100015c88
1000073ef:	mov	rsi, qword ptr [r13]
1000073f3:	mov	edi, 0x29
1000073f8:	call	0x100019704 ## symbol stub for: _fputc
1000073fd:	mov	dword ptr [rbx], 0x1
100007403:	mov	rdi, qword ptr [r13]
100007407:	call	0x1000196e6 ## symbol stub for: _fflush
10000740c:	lea	rax, [rip + 0x22345]
100007413:	cmp	dword ptr [rax], 0x0
100007416:	je	0x100007483
100007418:	mov	rdi, qword ptr [r14]
10000741b:	mov	rdx, qword ptr [r15 + 0x80]
100007422:	lea	rsi, [rip + 0x15dba] ## literal pool for: " copying: %s"
100007429:	xor	eax, eax
10000742b:	call	0x1000196fe ## symbol stub for: _fprintf
100007430:	lea	rax, [rip + 0x222e1]
100007437:	cmp	dword ptr [rax], 0x0
10000743a:	je	0x10000746e
10000743c:	mov	rcx, qword ptr [r14]
10000743f:	mov	esi, 0x2
100007444:	mov	edx, 0x1
100007449:	lea	rdi, [rip + 0x15da0] ## literal pool for: " ("
100007450:	call	0x10001972e ## symbol stub for: _fwrite
100007455:	mov	rdi, qword ptr [r14]
100007458:	mov	rsi, qword ptr [r15 + 0x20]
10000745c:	call	0x100015c88
100007461:	mov	rsi, qword ptr [r14]
100007464:	mov	edi, 0x29
100007469:	call	0x100019704 ## symbol stub for: _fputc
10000746e:	lea	rax, [rip + 0x2245b]
100007475:	mov	dword ptr [rax], 0x1
10000747b:	mov	rdi, qword ptr [r14]
10000747e:	call	0x1000196e6 ## symbol stub for: _fflush
100007483:	lea	rax, [rip + 0x22246]
10000748a:	mov	rax, qword ptr [rax]
10000748d:	dec	rax
100007490:	cmp	rax, qword ptr [r15 + 0x30]
100007494:	jne	0x1000074a3
100007496:	mov	dword ptr [r15 + 0x88], 0x0
1000074a1:	jmp	0x10000751e
1000074a3:	mov	rdi, r15
1000074a6:	call	0x10000e1ae
1000074ab:	test	eax, eax
1000074ad:	mov	qword ptr [rbp - 0xd8], rax
1000074b4:	je	0x10000751e
1000074b6:	cmp	eax, 0x9
1000074b9:	je	0x100008887
1000074bf:	cmp	dword ptr [r12], 0x1
1000074c4:	jne	0x100008893
1000074ca:	lea	rax, [rip + 0x22327]
1000074d1:	mov	rdi, qword ptr [rax]
1000074d4:	lea	rbx, [rip + 0x223b5]
1000074db:	mov	rsi, qword ptr [rbx]
1000074de:	xor	edx, edx
1000074e0:	call	0x10001971c ## symbol stub for: _fseeko
1000074e5:	test	eax, eax
1000074e7:	jne	0x1000088d8
1000074ed:	mov	rsi, qword ptr [r15 + 0x80]
1000074f4:	lea	rdi, [rip + 0x15d46] ## literal pool for: "bad - skipping: "
1000074fb:	call	0x1000034f4
100007500:	mov	rax, qword ptr [rbx]
100007503:	lea	rcx, [rip + 0x23a2e]
10000750a:	mov	qword ptr [rcx], rax
10000750d:	lea	rcx, [rip + 0x22384]
100007514:	mov	qword ptr [rcx], rax
100007517:	lea	rbx, [rip + 0x223ae]
10000751e:	cmp	dword ptr [rbp - 0xd8], 0x0
100007525:	je	0x10000753b
100007527:	lea	rax, [rip + 0x221a2]
10000752e:	cmp	qword ptr [rax], 0x0
100007532:	jne	0x10000753b
100007534:	cmp	dword ptr [r12], 0x1
100007539:	je	0x1000075a3
10000753b:	lea	rax, [rip + 0x21f1a]
100007542:	cmp	dword ptr [rax], 0x0
100007545:	je	0x100007569
100007547:	cmp	dword ptr [rbx], 0x0
10000754a:	je	0x100007569
10000754c:	mov	rsi, qword ptr [r13]
100007550:	mov	edi, 0xa
100007555:	call	0x100019704 ## symbol stub for: _fputc
10000755a:	mov	dword ptr [rbx], 0x0
100007560:	mov	rdi, qword ptr [r13]
100007564:	call	0x1000196e6 ## symbol stub for: _fflush
100007569:	lea	rax, [rip + 0x221e8]
100007570:	cmp	dword ptr [rax], 0x0
100007573:	je	0x1000075a3
100007575:	lea	rax, [rip + 0x22354]
10000757c:	cmp	dword ptr [rax], 0x0
10000757f:	je	0x1000075a3
100007581:	mov	rsi, qword ptr [r14]
100007584:	mov	edi, 0xa
100007589:	call	0x100019704 ## symbol stub for: _fputc
10000758e:	lea	rax, [rip + 0x2233b]
100007595:	mov	dword ptr [rax], 0x0
10000759b:	mov	rdi, qword ptr [r14]
10000759e:	call	0x1000196e6 ## symbol stub for: _fflush
1000075a3:	lea	rax, [rip + 0x22176]
1000075aa:	inc	qword ptr [rax]
1000075ad:	mov	rax, qword ptr [r15 + 0x18]
1000075b1:	cmp	dword ptr [rbp - 0xd8], 0x0
1000075b8:	je	0x10000766a
1000075be:	lea	rcx, [rip + 0x22183]
1000075c5:	add	qword ptr [rcx], rax
1000075c8:	lea	rcx, [rip + 0x22169]
1000075cf:	add	qword ptr [rcx], rax
1000075d2:	cmp	dword ptr [r12], 0x1
1000075d7:	jne	0x100007385
1000075dd:	mov	rdi, qword ptr [r15 + 0x70]
1000075e1:	mov	rbx, qword ptr [r15 + 0x98]
1000075e8:	call	0x100019716 ## symbol stub for: _free
1000075ed:	mov	rdi, qword ptr [r15 + 0x78]
1000075f1:	call	0x100019716 ## symbol stub for: _free
1000075f6:	mov	rdi, qword ptr [r15 + 0x80]
1000075fd:	call	0x100019716 ## symbol stub for: _free
100007602:	cmp	word ptr [r15 + 0x2a], 0x0
100007608:	je	0x100007618
10000760a:	mov	rdi, qword ptr [r15 + 0x58]
10000760e:	test	rdi, rdi
100007611:	je	0x100007618
100007613:	call	0x100019716 ## symbol stub for: _free
100007618:	cmp	word ptr [r15 + 0x2c], 0x0
10000761e:	je	0x10000762f
100007620:	mov	rdi, qword ptr [r15 + 0x60]
100007624:	cmp	rdi, qword ptr [r15 + 0x58]
100007628:	je	0x10000762f
10000762a:	call	0x100019716 ## symbol stub for: _free
10000762f:	cmp	word ptr [r15 + 0x2e], 0x0
100007635:	je	0x100007640
100007637:	mov	rdi, qword ptr [r15 + 0x68]
10000763b:	call	0x100019716 ## symbol stub for: _free
100007640:	mov	rdi, r15
100007643:	call	0x100019716 ## symbol stub for: _free
100007648:	mov	rax, qword ptr [rbp - 0xe0]
10000764f:	mov	qword ptr [rax], rbx
100007652:	lea	rax, [rip + 0x238ef]
100007659:	dec	qword ptr [rax]
10000765c:	mov	r15, rbx
10000765f:	test	rbx, rbx
100007662:	jne	0x100006b6b
100007668:	jmp	0x1000076b3
10000766a:	lea	rcx, [rip + 0x220cf]
100007671:	add	qword ptr [rcx], rax
100007674:	lea	rcx, [rip + 0x220bd]
10000767b:	add	qword ptr [rcx], rax
10000767e:	jmp	0x100007385
100007683:	lea	rax, [r15 + 0x80]
10000768a:	xor	edx, edx
10000768c:	cmp	dword ptr [rbp - 0xf0], 0x0
100007693:	sete	dl
100007696:	mov	rdi, rsi
100007699:	mov	rsi, rax
10000769c:	mov	rcx, r15
10000769f:	call	0x1000195a8
1000076a4:	jmp	0x10000731b
1000076a9:	mov	dword ptr [rbp - 0xc0], 0x0
1000076b3:	cmp	dword ptr [rbp - 0xa4], 0x0
1000076ba:	je	0x1000076df
1000076bc:	mov	rcx, qword ptr [r13]
1000076c0:	lea	rdi, [rip + 0x15b98] ## literal pool for: "sd: Zipping up new entries\n"
1000076c7:	mov	esi, 0x1b
1000076cc:	mov	edx, 0x1
1000076d1:	call	0x10001972e ## symbol stub for: _fwrite
1000076d6:	mov	rdi, qword ptr [r13]
1000076da:	call	0x1000196e6 ## symbol stub for: _fflush
1000076df:	lea	rax, [rip + 0x2220a]
1000076e6:	mov	r13, qword ptr [rax]
1000076e9:	test	r13, r13
1000076ec:	je	0x100007914
1000076f2:	mov	edi, 0xa0
1000076f7:	call	0x100019758 ## symbol stub for: _malloc
1000076fc:	test	rax, rax
1000076ff:	je	0x1000083e8
100007705:	mov	rbx, rax
100007708:	mov	qword ptr [rax + 0x98], 0x0
100007713:	mov	rax, qword ptr [r13]
100007717:	mov	qword ptr [rbx + 0x50], rax
10000771b:	movups	xmm0, xmmword ptr [r13 + 0x8]
100007720:	xorps	xmm1, xmm1
100007723:	movups	xmmword ptr [r13], xmm1
100007728:	movups	xmmword ptr [rbx + 0x70], xmm0
10000772c:	mov	rax, qword ptr [r13 + 0x18]
100007730:	lea	r15, [rbx + 0x80]
100007737:	mov	qword ptr [rbx + 0x80], rax
10000773e:	movups	xmmword ptr [r13 + 0x10], xmm1
100007743:	mov	word ptr [rbx + 0x2e], 0x0
100007749:	mov	dword ptr [rbx + 0x2a], 0x0
100007750:	movups	xmmword ptr [rbx + 0x58], xmm1
100007754:	mov	dword ptr [rbx + 0x88], 0x1
10000775e:	mov	eax, dword ptr [r13 + 0x20]
100007762:	mov	dword ptr [rbx + 0x94], eax
100007768:	call	0x100009870
10000776d:	lea	rax, [rip + 0x21ce8]
100007774:	cmp	dword ptr [rax], 0x0
100007777:	je	0x1000077a9
100007779:	lea	r14, [rip + 0x237b0]
100007780:	mov	rdi, qword ptr [r14]
100007783:	mov	rdx, qword ptr [r15]
100007786:	lea	rsi, [rip + 0x15b0b] ## literal pool for: "  adding: %s"
10000778d:	xor	eax, eax
10000778f:	call	0x1000196fe ## symbol stub for: _fprintf
100007794:	lea	rax, [rip + 0x22131]
10000779b:	mov	dword ptr [rax], 0x1
1000077a1:	mov	rdi, qword ptr [r14]
1000077a4:	call	0x1000196e6 ## symbol stub for: _fflush
1000077a9:	lea	rax, [rip + 0x21fa8]
1000077b0:	cmp	dword ptr [rax], 0x0
1000077b3:	je	0x1000077e5
1000077b5:	lea	r14, [rip + 0x21fa4]
1000077bc:	mov	rdi, qword ptr [r14]
1000077bf:	mov	rdx, qword ptr [r15]
1000077c2:	lea	rsi, [rip + 0x15acf] ## literal pool for: "  adding: %s"
1000077c9:	xor	eax, eax
1000077cb:	call	0x1000196fe ## symbol stub for: _fprintf
1000077d0:	lea	rax, [rip + 0x220f9]
1000077d7:	mov	dword ptr [rax], 0x1
1000077dd:	mov	rdi, qword ptr [r14]
1000077e0:	call	0x1000196e6 ## symbol stub for: _fflush
1000077e5:	mov	r12, qword ptr [r13 + 0x28]
1000077e9:	mov	rdi, rbx
1000077ec:	call	0x10000f7b9
1000077f1:	mov	r14d, eax
1000077f4:	cmp	eax, -0x1
1000077f7:	je	0x10000780c
1000077f9:	test	r14d, r14d
1000077fc:	je	0x100007899
100007802:	cmp	r14d, 0x12
100007806:	jne	0x1000085ac
10000780c:	lea	rdi, [rip + 0x12fa4] ## literal pool for: ""
100007813:	mov	esi, 0x1
100007818:	call	0x100003300
10000781d:	cmp	r14d, 0x12
100007821:	je	0x1000078f3
100007827:	mov	rsi, qword ptr [r15]
10000782a:	lea	rdi, [rip + 0x15960] ## literal pool for: "file and directory with the same name: "
100007831:	call	0x1000034f4
100007836:	lea	rax, [rip + 0x21ee3]
10000783d:	inc	qword ptr [rax]
100007840:	lea	rax, [rip + 0x21ef1]
100007847:	add	qword ptr [rax], r12
10000784a:	lea	rax, [rip + 0x21ed7]
100007851:	inc	qword ptr [rax]
100007854:	lea	rax, [rip + 0x21eed]
10000785b:	add	qword ptr [rax], r12
10000785e:	mov	rdi, qword ptr [rbx + 0x50]
100007862:	call	0x100019716 ## symbol stub for: _free
100007867:	mov	rdi, qword ptr [rbx + 0x70]
10000786b:	call	0x100019716 ## symbol stub for: _free
100007870:	mov	rdi, qword ptr [rbx + 0x78]
100007874:	call	0x100019716 ## symbol stub for: _free
100007879:	mov	rdi, qword ptr [rbx + 0x80]
100007880:	call	0x100019716 ## symbol stub for: _free
100007885:	mov	rdi, rbx
100007888:	call	0x100019716 ## symbol stub for: _free
10000788d:	mov	dword ptr [rbp - 0xc0], 0x1
100007897:	jmp	0x1000078dd
100007899:	lea	rax, [rip + 0x21e80]
1000078a0:	inc	qword ptr [rax]
1000078a3:	mov	rax, qword ptr [rbx + 0x20]
1000078a7:	lea	rcx, [rip + 0x21e92]
1000078ae:	add	qword ptr [rcx], rax
1000078b1:	lea	rax, [rip + 0x21e80]
1000078b8:	add	qword ptr [rax], r12
1000078bb:	mov	rax, qword ptr [rbp - 0xe0]
1000078c2:	mov	qword ptr [rax], rbx
1000078c5:	add	rbx, 0x98
1000078cc:	lea	rax, [rip + 0x23675]
1000078d3:	inc	qword ptr [rax]
1000078d6:	mov	qword ptr [rbp - 0xe0], rbx
1000078dd:	mov	rdi, r13
1000078e0:	call	0x1000107a9
1000078e5:	mov	r13, rax
1000078e8:	test	rax, rax
1000078eb:	jne	0x1000076f2
1000078f1:	jmp	0x100007914
1000078f3:	mov	rdx, rbx
1000078f6:	add	rdx, 0x50
1000078fa:	xor	esi, esi
1000078fc:	cmp	dword ptr [rbp - 0xf0], 0x0
100007903:	sete	sil
100007907:	mov	rdi, r15
10000790a:	call	0x10001950d
10000790f:	jmp	0x100007836
100007914:	lea	rbx, [rip + 0x21e8d]
10000791b:	mov	rdi, qword ptr [rbx]
10000791e:	test	rdi, rdi
100007921:	je	0x10000792f
100007923:	call	0x100019716 ## symbol stub for: _free
100007928:	mov	qword ptr [rbx], 0x0
10000792f:	lea	rax, [rip + 0x21b26]
100007936:	cmp	dword ptr [rax], 0x0
100007939:	lea	r15, [rip + 0x21de8]
100007940:	mov	rax, qword ptr [r15]
100007943:	lea	r12, [rip + 0x235e6]
10000794a:	je	0x100007a08
100007950:	test	rax, rax
100007953:	je	0x100007a08
100007959:	mov	rcx, qword ptr [r12]
10000795d:	lea	rdi, [rip + 0x1595e] ## literal pool for: "\nzip warning: Not all files were readable\n"
100007964:	mov	esi, 0x2a
100007969:	mov	edx, 0x1
10000796e:	call	0x10001972e ## symbol stub for: _fwrite
100007973:	mov	rdi, qword ptr [r12]
100007977:	lea	rax, [rip + 0x21db2]
10000797e:	mov	rdx, qword ptr [rax]
100007981:	sub	rdx, qword ptr [r15]
100007984:	lea	rsi, [rip + 0x15962] ## literal pool for: "  files/entries read:  %lu"
10000798b:	xor	eax, eax
10000798d:	call	0x1000196fe ## symbol stub for: _fprintf
100007992:	lea	rax, [rip + 0x21da7]
100007999:	mov	rdi, qword ptr [rax]
10000799c:	lea	rbx, [rbp - 0xa0]
1000079a3:	mov	rsi, rbx
1000079a6:	call	0x100015cf7
1000079ab:	mov	rdi, qword ptr [r12]
1000079af:	lea	rsi, [rip + 0x15952] ## literal pool for: " (%s bytes)"
1000079b6:	mov	rdx, rbx
1000079b9:	xor	eax, eax
1000079bb:	call	0x1000196fe ## symbol stub for: _fprintf
1000079c0:	mov	rdi, qword ptr [r12]
1000079c4:	mov	rdx, qword ptr [r15]
1000079c7:	lea	rsi, [rip + 0x15946] ## literal pool for: "  skipped:  %lu"
1000079ce:	xor	eax, eax
1000079d0:	call	0x1000196fe ## symbol stub for: _fprintf
1000079d5:	lea	rax, [rip + 0x21d6c]
1000079dc:	mov	rdi, qword ptr [rax]
1000079df:	mov	rsi, rbx
1000079e2:	call	0x100015cf7
1000079e7:	mov	rdi, qword ptr [r12]
1000079eb:	lea	rsi, [rip + 0x15932] ## literal pool for: " (%s bytes)\n"
1000079f2:	mov	rdx, rbx
1000079f5:	xor	eax, eax
1000079f7:	call	0x1000196fe ## symbol stub for: _fprintf
1000079fc:	mov	rdi, qword ptr [r12]
100007a00:	call	0x1000196e6 ## symbol stub for: _fflush
100007a05:	mov	rax, qword ptr [r15]
100007a08:	lea	rcx, [rip + 0x21d51]
100007a0f:	mov	rcx, qword ptr [rcx]
100007a12:	test	rcx, rcx
100007a15:	je	0x100007ac9
100007a1b:	test	rax, rax
100007a1e:	je	0x100007ac9
100007a24:	lea	rdi, [rip + 0x15897] ## literal pool for: "\nzip warning: Not all files were readable\n"
100007a2b:	mov	esi, 0x2a
100007a30:	mov	edx, 0x1
100007a35:	call	0x10001972e ## symbol stub for: _fwrite
100007a3a:	lea	r13, [rip + 0x21d1f]
100007a41:	mov	rdi, qword ptr [r13]
100007a45:	lea	rax, [rip + 0x21ce4]
100007a4c:	mov	rdx, qword ptr [rax]
100007a4f:	sub	rdx, qword ptr [r15]
100007a52:	lea	rsi, [rip + 0x15894] ## literal pool for: "  files/entries read:  %lu"
100007a59:	xor	eax, eax
100007a5b:	call	0x1000196fe ## symbol stub for: _fprintf
100007a60:	lea	rax, [rip + 0x21cd9]
100007a67:	mov	rdi, qword ptr [rax]
100007a6a:	lea	rbx, [rbp - 0xa0]
100007a71:	mov	rsi, rbx
100007a74:	call	0x100015cf7
100007a79:	mov	rdi, qword ptr [r13]
100007a7d:	lea	r14, [rip + 0x15884] ## literal pool for: " (%s bytes)"
100007a84:	mov	rsi, r14
100007a87:	mov	rdx, rbx
100007a8a:	xor	eax, eax
100007a8c:	call	0x1000196fe ## symbol stub for: _fprintf
100007a91:	mov	rdi, qword ptr [r13]
100007a95:	mov	rdx, qword ptr [r15]
100007a98:	lea	rsi, [rip + 0x15875] ## literal pool for: "  skipped:  %lu"
100007a9f:	xor	eax, eax
100007aa1:	call	0x1000196fe ## symbol stub for: _fprintf
100007aa6:	lea	rax, [rip + 0x21c9b]
100007aad:	mov	rdi, qword ptr [rax]
100007ab0:	mov	rsi, rbx
100007ab3:	call	0x100015cf7
100007ab8:	mov	rdi, qword ptr [r13]
100007abc:	mov	rsi, r14
100007abf:	mov	rdx, rbx
100007ac2:	xor	eax, eax
100007ac4:	call	0x1000196fe ## symbol stub for: _fprintf
100007ac9:	cmp	dword ptr [rbp - 0xa4], 0x0
100007ad0:	lea	rbx, [rip + 0x21df5]
100007ad7:	je	0x100007afc
100007ad9:	mov	rcx, qword ptr [r12]
100007add:	lea	rdi, [rip + 0x1584d] ## literal pool for: "sd: Get comment if any\n"
100007ae4:	mov	esi, 0x17
100007ae9:	mov	edx, 0x1
100007aee:	call	0x10001972e ## symbol stub for: _fwrite
100007af3:	mov	rdi, qword ptr [r12]
100007af7:	call	0x1000196e6 ## symbol stub for: _fflush
100007afc:	cmp	byte ptr [rip + 0x534b5], 0x1
100007b03:	jne	0x100007c19
100007b09:	cmp	qword ptr [rbp - 0x100], 0x0
100007b11:	jne	0x100007b37
100007b13:	mov	rax, qword ptr [rip + 0x1c4fe] ## literal pool symbol address: ___stderrp
100007b1a:	mov	rdi, qword ptr [rax]
100007b1d:	call	0x1000196f2 ## symbol stub for: _fileno
100007b22:	lea	rsi, [rip + 0x14487] ## literal pool for: "r"
100007b29:	mov	edi, eax
100007b2b:	call	0x1000196d4 ## symbol stub for: _fdopen
100007b30:	mov	qword ptr [rbp - 0x100], rax
100007b37:	mov	edi, 0x101
100007b3c:	call	0x100019758 ## symbol stub for: _malloc
100007b41:	test	rax, rax
100007b44:	je	0x100008574
100007b4a:	mov	r15, rax
100007b4d:	lea	rax, [rip + 0x21d84]
100007b54:	mov	rbx, qword ptr [rax]
100007b57:	test	rbx, rbx
100007b5a:	je	0x100007c0a
100007b60:	lea	r14, [rip + 0x157fc] ## literal pool for: "Enter comment for %s:\n"
100007b67:	cmp	dword ptr [rbx + 0x88], 0x0
100007b6e:	je	0x100007bfa
100007b74:	lea	rax, [rip + 0x218e1]
100007b7b:	cmp	dword ptr [rax], 0x0
100007b7e:	je	0x100007b95
100007b80:	mov	rdi, qword ptr [r12]
100007b84:	mov	rdx, qword ptr [rbx + 0x80]
100007b8b:	mov	rsi, r14
100007b8e:	xor	eax, eax
100007b90:	call	0x1000196fe ## symbol stub for: _fprintf
100007b95:	mov	rdi, r15
100007b98:	mov	esi, 0x101
100007b9d:	mov	rdx, qword ptr [rbp - 0x100]
100007ba4:	call	0x1000196ec ## symbol stub for: _fgets
100007ba9:	test	rax, rax
100007bac:	je	0x100007bfa
100007bae:	mov	rdi, r15
100007bb1:	call	0x100019830 ## symbol stub for: _strlen
100007bb6:	mov	r12, rax
100007bb9:	lea	rdi, [rax + 0x1]
100007bbd:	call	0x100019758 ## symbol stub for: _malloc
100007bc2:	test	rax, rax
100007bc5:	je	0x10000856c
100007bcb:	mov	r13, rax
100007bce:	mov	rdi, rax
100007bd1:	mov	rsi, r15
100007bd4:	call	0x100019824 ## symbol stub for: _strcpy
100007bd9:	cmp	byte ptr [r13 + r12 - 0x1], 0xa
100007bdf:	jne	0x100007bea
100007be1:	dec	r12
100007be4:	mov	byte ptr [r13 + r12], 0x0
100007bea:	mov	qword ptr [rbx + 0x68], r13
100007bee:	mov	word ptr [rbx + 0x2e], r12w
100007bf3:	lea	r12, [rip + 0x23336]
100007bfa:	mov	rbx, qword ptr [rbx + 0x98]
100007c01:	test	rbx, rbx
100007c04:	jne	0x100007b67
100007c0a:	mov	rdi, r15
100007c0d:	call	0x100019716 ## symbol stub for: _free
100007c12:	lea	rbx, [rip + 0x21cb3]
100007c19:	cmp	byte ptr [rip + 0x533b0], 0x1
100007c20:	jne	0x100007e41
100007c26:	cmp	qword ptr [rbp - 0x100], 0x0
100007c2e:	jne	0x100007c54
100007c30:	mov	rax, qword ptr [rip + 0x1c3e1] ## literal pool symbol address: ___stderrp
100007c37:	mov	rdi, qword ptr [rax]
100007c3a:	call	0x1000196f2 ## symbol stub for: _fileno
100007c3f:	lea	rsi, [rip + 0x1436a] ## literal pool for: "r"
100007c46:	mov	edi, eax
100007c48:	call	0x1000196d4 ## symbol stub for: _fdopen
100007c4d:	mov	qword ptr [rbp - 0x100], rax
100007c54:	mov	edi, 0x101
100007c59:	call	0x100019758 ## symbol stub for: _malloc
100007c5e:	test	rax, rax
100007c61:	je	0x100008574
100007c67:	mov	r15, rax
100007c6a:	lea	rax, [rip + 0x217eb]
100007c71:	cmp	dword ptr [rax], 0x0
100007c74:	lea	rbx, [rip + 0x232c5]
100007c7b:	je	0x100007cd1
100007c7d:	cmp	word ptr [rbx], 0x0
100007c81:	je	0x100007cd1
100007c83:	mov	rsi, qword ptr [r12]
100007c87:	lea	rdi, [rip + 0x156ec] ## literal pool for: "current zip file comment is:\n"
100007c8e:	call	0x10001970a ## symbol stub for: _fputs
100007c93:	lea	r14, [rip + 0x21c4e]
100007c9a:	mov	rdi, qword ptr [r14]
100007c9d:	movzx	edx, word ptr [rbx]
100007ca0:	mov	rcx, qword ptr [r12]
100007ca4:	mov	esi, 0x1
100007ca9:	call	0x10001972e ## symbol stub for: _fwrite
100007cae:	mov	rdi, qword ptr [r14]
100007cb1:	movzx	eax, word ptr [rbx]
100007cb4:	cmp	byte ptr [rax + rdi - 0x1], 0xa
100007cb9:	je	0x100007ccc
100007cbb:	mov	rsi, qword ptr [r12]
100007cbf:	mov	edi, 0xa
100007cc4:	call	0x1000197a6 ## symbol stub for: _putc
100007cc9:	mov	rdi, qword ptr [r14]
100007ccc:	call	0x100019716 ## symbol stub for: _free
100007cd1:	mov	edi, 0x1
100007cd6:	call	0x100019758 ## symbol stub for: _malloc
100007cdb:	lea	r13, [rip + 0x21c06]
100007ce2:	mov	qword ptr [r13], rax
100007ce6:	test	rax, rax
100007ce9:	je	0x100008854
100007cef:	mov	byte ptr [rax], 0x0
100007cf2:	lea	rax, [rip + 0x21763]
100007cf9:	cmp	dword ptr [rax], 0x0
100007cfc:	je	0x100007d14
100007cfe:	lea	rax, [rip + 0x2322b]
100007d05:	mov	rsi, qword ptr [rax]
100007d08:	lea	rdi, [rip + 0x156a6] ## literal pool for: "enter new zip file comment (end with .):\n"
100007d0f:	call	0x10001970a ## symbol stub for: _fputs
100007d14:	mov	rdi, r15
100007d17:	mov	esi, 0x101
100007d1c:	mov	rdx, qword ptr [rbp - 0x100]
100007d23:	call	0x1000196ec ## symbol stub for: _fgets
100007d28:	test	rax, rax
100007d2b:	je	0x100007e18
100007d31:	lea	r14, [rip + 0x156a7] ## literal pool for: ".\n"
100007d38:	mov	rdi, r15
100007d3b:	mov	rsi, r14
100007d3e:	call	0x10001981e ## symbol stub for: _strcmp
100007d43:	test	eax, eax
100007d45:	je	0x100007e18
100007d4b:	mov	rdi, r15
100007d4e:	call	0x100019830 ## symbol stub for: _strlen
100007d53:	mov	rbx, rax
100007d56:	dec	eax
100007d58:	cdqe
100007d5a:	cmp	byte ptr [r15 + rax], 0xa
100007d5f:	jne	0x100007d6d
100007d61:	movsxd	rbx, ebx
100007d64:	mov	byte ptr [r15 + rbx - 0x1], 0x0
100007d6a:	dec	rbx
100007d6d:	mov	r12, qword ptr [r13]
100007d71:	cmp	byte ptr [r12], 0x0
100007d76:	je	0x100007d86
100007d78:	mov	rdi, r12
100007d7b:	call	0x100019830 ## symbol stub for: _strlen
100007d80:	add	rax, 0x3
100007d84:	jmp	0x100007d8b
100007d86:	mov	eax, 0x1
100007d8b:	movsxd	rdi, ebx
100007d8e:	add	rdi, rax
100007d91:	call	0x100019758 ## symbol stub for: _malloc
100007d96:	test	rax, rax
100007d99:	je	0x10000856c
100007d9f:	mov	rbx, rax
100007da2:	cmp	byte ptr [r12], 0x0
100007da7:	je	0x100007dd4
100007da9:	mov	rdi, rbx
100007dac:	mov	rsi, r12
100007daf:	call	0x100019824 ## symbol stub for: _strcpy
100007db4:	mov	rdi, rbx
100007db7:	call	0x100019830 ## symbol stub for: _strlen
100007dbc:	mov	word ptr [rbx + rax], 0xa0d
100007dc2:	mov	byte ptr [rbx + rax + 0x2], 0x0
100007dc7:	mov	rdi, rbx
100007dca:	mov	rsi, r15
100007dcd:	call	0x100019812 ## symbol stub for: _strcat
100007dd2:	jmp	0x100007dee
100007dd4:	cmp	byte ptr [r15], 0x0
100007dd8:	mov	rsi, r15
100007ddb:	lea	rax, [rip + 0x15600] ## literal pool for: "\015\n"
100007de2:	cmove	rsi, rax
100007de6:	mov	rdi, rbx
100007de9:	call	0x100019824 ## symbol stub for: _strcpy
100007dee:	mov	rdi, qword ptr [r13]
100007df2:	call	0x100019716 ## symbol stub for: _free
100007df7:	mov	qword ptr [r13], rbx
100007dfb:	mov	rdi, r15
100007dfe:	mov	esi, 0x101
100007e03:	mov	rdx, qword ptr [rbp - 0x100]
100007e0a:	call	0x1000196ec ## symbol stub for: _fgets
100007e0f:	test	rax, rax
100007e12:	jne	0x100007d38
100007e18:	mov	rdi, r15
100007e1b:	call	0x100019716 ## symbol stub for: _free
100007e20:	mov	rdi, qword ptr [r13]
100007e24:	call	0x100019830 ## symbol stub for: _strlen
100007e29:	lea	rcx, [rip + 0x23110]
100007e30:	mov	word ptr [rcx], ax
100007e33:	lea	r12, [rip + 0x230f6]
100007e3a:	lea	rbx, [rip + 0x21a8b]
100007e41:	lea	rax, [rip + 0x218c8]
100007e48:	cmp	dword ptr [rax], 0x0
100007e4b:	je	0x100007e61
100007e4d:	mov	rsi, qword ptr [r12]
100007e51:	mov	edi, 0xa
100007e56:	call	0x1000197a6 ## symbol stub for: _putc
100007e5b:	mov	dword ptr [rbx], 0x0
100007e61:	cmp	dword ptr [rbp - 0xa4], 0x0
100007e68:	je	0x100007e8d
100007e6a:	mov	rcx, qword ptr [r12]
100007e6e:	lea	rdi, [rip + 0x15570] ## literal pool for: "sd: Writing central directory\n"
100007e75:	mov	esi, 0x1e
100007e7a:	mov	edx, 0x1
100007e7f:	call	0x10001972e ## symbol stub for: _fwrite
100007e84:	mov	rdi, qword ptr [r12]
100007e88:	call	0x1000196e6 ## symbol stub for: _fflush
100007e8d:	lea	rax, [rip + 0x230a4]
100007e94:	mov	rax, qword ptr [rax]
100007e97:	mov	qword ptr [rbp - 0x108], rax
100007e9e:	lea	rax, [rip + 0x21a33]
100007ea5:	mov	rbx, qword ptr [rax]
100007ea8:	xor	r12d, r12d
100007eab:	test	rbx, rbx
100007eae:	je	0x100007f29
100007eb0:	xor	r15d, r15d
100007eb3:	xor	r13d, r13d
100007eb6:	cmp	dword ptr [rbx + 0x88], 0x0
100007ebd:	je	0x100007f02
100007ebf:	mov	rdi, rbx
100007ec2:	call	0x10000d930
100007ec7:	test	eax, eax
100007ec9:	jne	0x100008400
100007ecf:	movzx	eax, word ptr [rbx + 0x28]
100007ed3:	movzx	ecx, word ptr [rbx + 0x2c]
100007ed7:	add	rcx, rax
100007eda:	movzx	eax, word ptr [rbx + 0x2e]
100007ede:	add	rax, rcx
100007ee1:	lea	rdx, [rip + 0x23050]
100007ee8:	mov	rcx, qword ptr [rdx]
100007eeb:	add	rax, rcx
100007eee:	add	rax, 0x2e
100007ef2:	mov	qword ptr [rdx], rax
100007ef5:	add	r13, qword ptr [rbx + 0x20]
100007ef9:	add	r12, qword ptr [rbx + 0x18]
100007efd:	inc	r15
100007f00:	jmp	0x100007f16
100007f02:	lea	rax, [rip + 0x217ab]
100007f09:	mov	eax, dword ptr [rax]
100007f0b:	lea	rcx, [rip + 0x2186e]
100007f12:	or	eax, dword ptr [rcx]
100007f14:	je	0x100007ebf
100007f16:	mov	rbx, qword ptr [rbx + 0x98]
100007f1d:	test	rbx, rbx
100007f20:	jne	0x100007eb6
100007f22:	test	r15, r15
100007f25:	jne	0x100007f42
100007f27:	jmp	0x100007f2c
100007f29:	xor	r13d, r13d
100007f2c:	lea	rdi, [rip + 0x14e79] ## literal pool for: "zip file empty"
100007f33:	lea	rsi, [rip + 0x1287d] ## literal pool for: ""
100007f3a:	call	0x1000034f4
100007f3f:	xor	r15d, r15d
100007f42:	lea	rax, [rip + 0x21763]
100007f49:	cmp	dword ptr [rax], 0x0
100007f4c:	je	0x100007fbe
100007f4e:	lea	rax, [rip + 0x22fdb]
100007f55:	mov	rax, qword ptr [rax]
100007f58:	mov	qword ptr [rbp - 0xf0], rax
100007f5f:	lea	rbx, [rip + 0x142e0] ## literal pool for: "u"
100007f66:	mov	rdi, r13
100007f69:	xor	esi, esi
100007f6b:	mov	rdx, rbx
100007f6e:	call	0x100015a80
100007f73:	mov	r14, rax
100007f76:	mov	rdi, r12
100007f79:	xor	esi, esi
100007f7b:	mov	rdx, rbx
100007f7e:	call	0x100015a80
100007f83:	mov	rbx, rax
100007f86:	mov	rdi, r13
100007f89:	mov	rsi, r12
100007f8c:	call	0x10000f787
100007f91:	lea	rsi, [rip + 0x1546c] ## literal pool for: "total bytes=%s, compressed=%s -> %d%% savings\n"
100007f98:	mov	rdi, qword ptr [rbp - 0xf0]
100007f9f:	mov	rdx, r14
100007fa2:	mov	rcx, rbx
100007fa5:	mov	r8d, eax
100007fa8:	xor	eax, eax
100007faa:	call	0x1000196fe ## symbol stub for: _fprintf
100007faf:	lea	rax, [rip + 0x22f7a]
100007fb6:	mov	rdi, qword ptr [rax]
100007fb9:	call	0x1000196e6 ## symbol stub for: _fflush
100007fbe:	lea	rax, [rip + 0x21793]
100007fc5:	cmp	dword ptr [rax], 0x0
100007fc8:	je	0x10000803a
100007fca:	lea	rax, [rip + 0x2178f]
100007fd1:	mov	rax, qword ptr [rax]
100007fd4:	mov	qword ptr [rbp - 0xf0], rax
100007fdb:	lea	rbx, [rip + 0x14264] ## literal pool for: "u"
100007fe2:	mov	rdi, r13
100007fe5:	xor	esi, esi
100007fe7:	mov	rdx, rbx
100007fea:	call	0x100015a80
100007fef:	mov	r14, rax
100007ff2:	mov	rdi, r12
100007ff5:	xor	esi, esi
100007ff7:	mov	rdx, rbx
100007ffa:	call	0x100015a80
100007fff:	mov	rbx, rax
100008002:	mov	rdi, r13
100008005:	mov	rsi, r12
100008008:	call	0x10000f787
10000800d:	lea	rsi, [rip + 0x153f0] ## literal pool for: "total bytes=%s, compressed=%s -> %d%% savings\n"
100008014:	mov	rdi, qword ptr [rbp - 0xf0]
10000801b:	mov	rdx, r14
10000801e:	mov	rcx, rbx
100008021:	mov	r8d, eax
100008024:	xor	eax, eax
100008026:	call	0x1000196fe ## symbol stub for: _fprintf
10000802b:	lea	rax, [rip + 0x2172e]
100008032:	mov	rdi, qword ptr [rax]
100008035:	call	0x1000196e6 ## symbol stub for: _fflush
10000803a:	lea	rax, [rip + 0x22ef7]
100008041:	mov	rbx, qword ptr [rax]
100008044:	mov	r14, qword ptr [rbp - 0x108]
10000804b:	sub	rbx, r14
10000804e:	cmp	dword ptr [rbp - 0xa4], 0x0
100008055:	lea	r12, [rip + 0x22ed4]
10000805c:	je	0x100008081
10000805e:	mov	rcx, qword ptr [r12]
100008062:	lea	rdi, [rip + 0x153ca] ## literal pool for: "sd: Writing end of central directory\n"
100008069:	mov	esi, 0x25
10000806e:	mov	edx, 0x1
100008073:	call	0x10001972e ## symbol stub for: _fwrite
100008078:	mov	rdi, qword ptr [r12]
10000807c:	call	0x1000196e6 ## symbol stub for: _fflush
100008081:	lea	rax, [rip + 0x22eb8]
100008088:	movzx	ecx, word ptr [rax]
10000808b:	lea	rax, [rip + 0x21856]
100008092:	mov	r8, qword ptr [rax]
100008095:	mov	rdi, r15
100008098:	mov	rsi, rbx
10000809b:	mov	rdx, r14
10000809e:	call	0x10000de58
1000080a3:	test	eax, eax
1000080a5:	lea	rbx, [rip + 0x2174c]
1000080ac:	jne	0x100008400
1000080b2:	mov	rdi, qword ptr [rbx]
1000080b5:	call	0x1000196ce ## symbol stub for: _fclose
1000080ba:	test	eax, eax
1000080bc:	lea	r15, [rip + 0x21755]
1000080c3:	jne	0x10000882b
1000080c9:	mov	qword ptr [rbx], 0x0
1000080d0:	lea	rbx, [rip + 0x21729]
1000080d7:	mov	rdi, qword ptr [rbx]
1000080da:	test	rdi, rdi
1000080dd:	je	0x1000080eb
1000080df:	call	0x1000196ce ## symbol stub for: _fclose
1000080e4:	mov	qword ptr [rbx], 0x0
1000080eb:	call	0x100017374
1000080f0:	cmp	byte ptr [rip + 0x52ecd], 0x1
1000080f7:	jne	0x100008108
1000080f9:	lea	rax, [rip + 0x216f0]
100008100:	mov	rdi, qword ptr [rax]
100008103:	call	0x1000094ec
100008108:	lea	r14, [rip + 0x22e49]
10000810f:	mov	rdi, qword ptr [r14]
100008112:	lea	rsi, [rip + 0x143e9] ## literal pool for: "-"
100008119:	call	0x10001981e ## symbol stub for: _strcmp
10000811e:	test	eax, eax
100008120:	sete	al
100008123:	mov	ecx, dword ptr [rbp - 0xb4]
100008129:	or	cl, al
10000812b:	jne	0x100008185
10000812d:	cmp	dword ptr [rbp - 0xa4], 0x0
100008134:	je	0x100008159
100008136:	mov	rcx, qword ptr [r12]
10000813a:	lea	rdi, [rip + 0x15318] ## literal pool for: "sd: Replacing old zip file\n"
100008141:	mov	esi, 0x1b
100008146:	mov	edx, 0x1
10000814b:	call	0x10001972e ## symbol stub for: _fwrite
100008150:	mov	rdi, qword ptr [r12]
100008154:	call	0x1000196e6 ## symbol stub for: _fflush
100008159:	mov	rdi, qword ptr [r15]
10000815c:	lea	r15, [rip + 0x2168d]
100008163:	mov	rsi, qword ptr [r15]
100008166:	call	0x100011614
10000816b:	mov	rsi, qword ptr [r15]
10000816e:	test	eax, eax
100008170:	jne	0x100008865
100008176:	mov	rdi, rsi
100008179:	call	0x100019716 ## symbol stub for: _free
10000817e:	lea	r15, [rip + 0x21693]
100008185:	lea	rax, [rip + 0x21664]
10000818c:	mov	qword ptr [rax], 0x0
100008193:	lea	rax, [rip + 0x21686]
10000819a:	mov	ebx, dword ptr [rax]
10000819c:	test	ebx, ebx
10000819e:	je	0x1000081bd
1000081a0:	mov	rdi, qword ptr [r14]
1000081a3:	lea	rsi, [rip + 0x14358] ## literal pool for: "-"
1000081aa:	call	0x10001981e ## symbol stub for: _strcmp
1000081af:	test	eax, eax
1000081b1:	je	0x1000081bd
1000081b3:	mov	rdi, qword ptr [r15]
1000081b6:	mov	esi, ebx
1000081b8:	call	0x100011897
1000081bd:	mov	rdi, qword ptr [r14]
1000081c0:	lea	rsi, [rip + 0x1433b] ## literal pool for: "-"
1000081c7:	call	0x10001981e ## symbol stub for: _strcmp
1000081cc:	test	eax, eax
1000081ce:	je	0x1000081fc
1000081d0:	cmp	dword ptr [rbp - 0xa4], 0x0
1000081d7:	je	0x1000081fc
1000081d9:	mov	rcx, qword ptr [r12]
1000081dd:	lea	rdi, [rip + 0x15291] ## literal pool for: "sd: Setting file type\n"
1000081e4:	mov	esi, 0x16
1000081e9:	mov	edx, 0x1
1000081ee:	call	0x10001972e ## symbol stub for: _fwrite
1000081f3:	mov	rdi, qword ptr [r12]
1000081f7:	call	0x1000196e6 ## symbol stub for: _fflush
1000081fc:	lea	r15, [rip + 0x2155d]
100008203:	mov	rdi, qword ptr [r15]
100008206:	test	rdi, rdi
100008209:	je	0x1000082d9
10000820f:	lea	rax, [rip + 0x2151a]
100008216:	mov	rdx, qword ptr [rax]
100008219:	lea	rsi, [rip + 0x14bbf] ## literal pool for: "\nTotal %ld entries ("
100008220:	xor	eax, eax
100008222:	call	0x1000196fe ## symbol stub for: _fprintf
100008227:	lea	r14, [rip + 0x21512]
10000822e:	mov	rsi, qword ptr [r14]
100008231:	lea	rbx, [rip + 0x21518]
100008238:	mov	rcx, qword ptr [r15]
10000823b:	cmp	rsi, qword ptr [rbx]
10000823e:	jne	0x100008245
100008240:	mov	rdi, rcx
100008243:	jmp	0x100008285
100008245:	lea	rdi, [rip + 0x15240] ## literal pool for: "planned "
10000824c:	mov	esi, 0x8
100008251:	mov	edx, 0x1
100008256:	call	0x10001972e ## symbol stub for: _fwrite
10000825b:	mov	rdi, qword ptr [r15]
10000825e:	mov	rsi, qword ptr [rbx]
100008261:	call	0x100015c88
100008266:	mov	rcx, qword ptr [r15]
100008269:	lea	rdi, [rip + 0x15225] ## literal pool for: " bytes, actual "
100008270:	mov	esi, 0xf
100008275:	mov	edx, 0x1
10000827a:	call	0x10001972e ## symbol stub for: _fwrite
10000827f:	mov	rdi, qword ptr [r15]
100008282:	mov	rsi, qword ptr [r14]
100008285:	call	0x100015c88
10000828a:	mov	rcx, qword ptr [r15]
10000828d:	lea	rdi, [rip + 0x14b60] ## literal pool for: " bytes)"
100008294:	mov	esi, 0x7
100008299:	mov	edx, 0x1
10000829e:	call	0x10001972e ## symbol stub for: _fwrite
1000082a3:	lea	rbx, [rbp - 0xa0]
1000082aa:	mov	rdi, rbx
1000082ad:	call	0x10001985a ## symbol stub for: _time
1000082b2:	mov	rdi, rbx
1000082b5:	call	0x10001974c ## symbol stub for: _localtime
1000082ba:	mov	rbx, qword ptr [r15]
1000082bd:	mov	rdi, rax
1000082c0:	call	0x1000196a4 ## symbol stub for: _asctime
1000082c5:	lea	rsi, [rip + 0x14b30] ## literal pool for: "\nDone %s"
1000082cc:	mov	rdi, rbx
1000082cf:	mov	rdx, rax
1000082d2:	xor	eax, eax
1000082d4:	call	0x1000196fe ## symbol stub for: _fprintf
1000082d9:	mov	rdi, qword ptr [rbp - 0x110]
1000082e0:	call	0x100019716 ## symbol stub for: _free
1000082e5:	mov	eax, dword ptr [rbp - 0xc0]
1000082eb:	test	eax, eax
1000082ed:	mov	ebx, 0x12
1000082f2:	cmove	ebx, eax
1000082f5:	mov	edi, ebx
1000082f7:	jmp	0x1000068b4
1000082fc:	lea	rax, [rip + 0x22c55]
100008303:	mov	rdi, qword ptr [rax]
100008306:	call	0x1000094ec
10000830b:	jmp	0x1000068b0
100008310:	mov	rsi, qword ptr [r12]
100008314:	jmp	0x1000084ff
100008319:	mov	rcx, qword ptr [rip + 0x21368]
100008320:	jmp	0x1000084fc
100008325:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
10000832a:	lea	rsi, [rip + 0x1441f] ## literal pool for: "zero length password not allowed"
100008331:	jmp	0x1000088f2
100008336:	lea	rsi, [rip + 0x14117] ## literal pool for: "specify just one action"
10000833d:	jmp	0x1000088f2
100008342:	mov	rcx, qword ptr [r15]
100008345:	lea	rdi, [rip + 0x1447b] ## literal pool for: "command line:\n"
10000834c:	mov	esi, 0xe
100008351:	mov	edx, 0x1
100008356:	call	0x10001972e ## symbol stub for: _fwrite
10000835b:	mov	rax, qword ptr [rbp - 0xd0]
100008362:	mov	rdx, qword ptr [rax]
100008365:	test	rdx, rdx
100008368:	je	0x100008397
10000836a:	mov	ebx, 0x8
10000836f:	lea	r14, [rip + 0x14460] ## literal pool for: "'%s'  "
100008376:	mov	rdi, qword ptr [r15]
100008379:	mov	rsi, r14
10000837c:	xor	eax, eax
10000837e:	call	0x1000196fe ## symbol stub for: _fprintf
100008383:	mov	rax, qword ptr [rbp - 0xd0]
10000838a:	mov	rdx, qword ptr [rax + rbx]
10000838e:	add	rbx, 0x8
100008392:	test	rdx, rdx
100008395:	jne	0x100008376
100008397:	mov	rsi, qword ptr [r15]
10000839a:	mov	edi, 0xa
10000839f:	call	0x100019704 ## symbol stub for: _fputc
1000083a4:	lea	rsi, [rip + 0x13d77] ## literal pool for: "show command line"
1000083ab:	mov	edi, 0x9
1000083b0:	call	0x100002e30
1000083b5:	lea	rsi, [rip + 0x1451c] ## literal pool for: "archive name must end in .zip for splits"
1000083bc:	jmp	0x1000088f2
1000083c1:	lea	rsi, [rip + 0x132ff] ## literal pool for: "stderr is not a tty"
1000083c8:	jmp	0x1000088f2
1000083cd:	mov	rax, qword ptr [rip + 0x212b4]
1000083d4:	mov	rsi, qword ptr [rax]
1000083d7:	mov	edi, 0x12
1000083dc:	call	0x100002e30
1000083e1:	call	0x100008cec
1000083e6:	jmp	0x100008411
1000083e8:	lea	rsi, [rip + 0x14e8c] ## literal pool for: "was adding files to zip file"
1000083ef:	jmp	0x10000885b
1000083f4:	lea	rsi, [rip + 0x140e9] ## literal pool for: "do not specify both -r and -R"
1000083fb:	jmp	0x1000088f2
100008400:	lea	rcx, [rip + 0x213e9]
100008407:	jmp	0x1000084fc
10000840c:	call	0x100008d5e
100008411:	xor	edi, edi
100008413:	call	0x1000196c8 ## symbol stub for: _exit
100008418:	lea	rsi, [rip + 0x14311] ## literal pool for: "was getting encryption password"
10000841f:	jmp	0x10000885b
100008424:	lea	rsi, [rip + 0x14346] ## literal pool for: "was verifying encryption password"
10000842b:	jmp	0x10000885b
100008430:	lea	rbx, [rip + 0x216f9]
100008437:	lea	rcx, [rip + 0x142db] ## literal pool for: "no such option ID: %ld"
10000843e:	mov	edx, 0x13f1
100008443:	mov	rdi, rbx
100008446:	xor	esi, esi
100008448:	mov	r8, rax
10000844b:	jmp	0x100008726
100008450:	lea	rsi, [rip + 0x140fc] ## literal pool for: "invalid date entered for -t option - use mmddyyyy or yyyy-mm-dd"
100008457:	jmp	0x1000088f2
10000845c:	lea	rsi, [rip + 0x14130] ## literal pool for: "invalid date entered for -tt option - use mmddyyyy or yyyy-mm-dd"
100008463:	jmp	0x1000088f2
100008468:	lea	rsi, [rip + 0x144c0] ## literal pool for: "can't use --diff (-DF) with fix (-F or -FF)"
10000846f:	jmp	0x1000088f2
100008474:	lea	rsi, [rip + 0x144e0] ## literal pool for: "-U (--copy) requires -O (--out)"
10000847b:	jmp	0x1000088f2
100008480:	lea	rdi, [rip + 0x144f4] ## literal pool for: "fix options -F and -FF require --out:\n"
100008487:	lea	rsi, [rip + 0x14514] ## literal pool for: "                     zip -F indamagedarchive --out outfixedarchive"
10000848e:	call	0x1000034f4
100008493:	lea	rsi, [rip + 0x1454b] ## literal pool for: "fix options require --out"
10000849a:	jmp	0x1000088f2
10000849f:	lea	rsi, [rip + 0x14559] ## literal pool for: "no other actions allowed when fixing archive (-F or -FF)"
1000084a6:	jmp	0x1000088f2
1000084ab:	lea	rsi, [rip + 0x14586] ## literal pool for: "-DF (--diff) requires -O (--out)"
1000084b2:	jmp	0x1000088f2
1000084b7:	lea	rsi, [rip + 0x1459b] ## literal pool for: "can't use --diff (-DF) with -d or -U"
1000084be:	jmp	0x1000088f2
1000084c3:	lea	rsi, [rip + 0x14611] ## literal pool for: "missing suffix list"
1000084ca:	jmp	0x1000088f2
1000084cf:	lea	rsi, [rip + 0x14778] ## literal pool for: "can't use -d, -f, -u, -U, or -g with filesync -FS\n"
1000084d6:	jmp	0x1000088f2
1000084db:	lea	rsi, [rip + 0x1479f] ## literal pool for: "can't use -d, -f, -u, -U, or -g on stdout\n"
1000084e2:	jmp	0x1000088f2
1000084e7:	mov	rsi, qword ptr [r12]
1000084eb:	mov	edi, 0xa
1000084f0:	call	0x100002e30
1000084f5:	lea	rcx, [rip + 0x22a5c]
1000084fc:	mov	rsi, qword ptr [rcx]
1000084ff:	mov	edi, eax
100008501:	call	0x100002e30
100008506:	cmp	eax, 0x10
100008509:	jne	0x1000085e7
10000850f:	lea	rsi, [rip + 0x149bf] ## literal pool for: "cannot repeat names in zip file"
100008516:	jmp	0x1000088f2
10000851b:	lea	rsi, [rip + 0x13f9d] ## literal pool for: "-mm not supported, Must_Match is -MM"
100008522:	jmp	0x1000088f2
100008527:	mov	r8, qword ptr [r13]
10000852b:	lea	rbx, [rip + 0x215fe]
100008532:	lea	rcx, [rip + 0x1433f] ## literal pool for: "could not open logfile '%s'"
100008539:	jmp	0x10000871c
10000853e:	mov	r8, qword ptr [r15]
100008541:	lea	rbx, [rip + 0x215e8]
100008548:	lea	rcx, [rip + 0x143b2] ## literal pool for: "--out path must be different than in path: %s"
10000854f:	jmp	0x10000871c
100008554:	lea	rsi, [rip + 0x14686] ## literal pool for: "can't create split archive while fixing or adjusting\n"
10000855b:	jmp	0x1000088f2
100008560:	lea	rsi, [rip + 0x146b0] ## literal pool for: "can't create split archive with -d or -g or on stdout\n"
100008567:	jmp	0x1000088f2
10000856c:	mov	rdi, r15
10000856f:	call	0x100019716 ## symbol stub for: _free
100008574:	lea	rsi, [rip + 0x14dce] ## literal pool for: "was reading comment lines"
10000857b:	jmp	0x10000885b
100008580:	lea	rsi, [rip + 0x147de] ## literal pool for: "allocating temp filename"
100008587:	jmp	0x10000885b
10000858c:	mov	rsi, qword ptr [r12]
100008590:	jmp	0x10000885b
100008595:	xor	eax, eax
100008597:	test	ebx, ebx
100008599:	setne	al
10000859c:	lea	edi, [4*rax + 0xa]
1000085a3:	mov	rsi, qword ptr [r12]
1000085a7:	call	0x100002e30
1000085ac:	lea	rdi, [rip + 0x12204] ## literal pool for: ""
1000085b3:	mov	esi, 0x1
1000085b8:	call	0x100003300
1000085bd:	mov	r8, qword ptr [r15]
1000085c0:	lea	rbx, [rip + 0x21569]
1000085c7:	lea	rcx, [rip + 0x14b88] ## literal pool for: "was zipping %s"
1000085ce:	mov	edx, 0x13f1
1000085d3:	mov	rdi, rbx
1000085d6:	xor	esi, esi
1000085d8:	xor	eax, eax
1000085da:	call	0x100019680 ## symbol stub for: ___sprintf_chk
1000085df:	mov	edi, r14d
1000085e2:	jmp	0x100008732
1000085e7:	lea	rsi, [rip + 0x14907] ## literal pool for: "was processing list of files"
1000085ee:	jmp	0x1000084ff
1000085f3:	lea	rsi, [rip + 0x144ae] ## literal pool for: "can't use - and -@ together"
1000085fa:	jmp	0x1000088f2
1000085ff:	mov	r12d, eax
100008602:	mov	r8, qword ptr [r15 + 0x80]
100008609:	lea	rbx, [rip + 0x21520]
100008610:	lea	rcx, [rip + 0x14b4e] ## literal pool for: "was copying %s"
100008617:	mov	edx, 0x13f1
10000861c:	mov	rdi, rbx
10000861f:	xor	esi, esi
100008621:	xor	eax, eax
100008623:	call	0x100019680 ## symbol stub for: ___sprintf_chk
100008628:	mov	edi, r12d
10000862b:	jmp	0x100008732
100008630:	mov	r8, qword ptr [rbp - 0xb0]
100008637:	lea	rbx, [rip + 0x214f2]
10000863e:	lea	rcx, [rip + 0x13e27] ## literal pool for: "option -ds (--dot-size) has bad size:  '%s'"
100008645:	jmp	0x1000087b3
10000864a:	mov	rsi, qword ptr [rbp - 0xb0]
100008651:	lea	rdi, [rip + 0x13f84] ## literal pool for: "bzip2"
100008658:	xor	edx, edx
10000865a:	mov	ecx, 0x1
10000865f:	call	0x100015f3f
100008664:	test	eax, eax
100008666:	jne	0x100008775
10000866c:	lea	rdi, [rip + 0x13f94] ## literal pool for: "valid compression methods are:  store, deflate)"
100008673:	lea	rsi, [rip + 0x1213d] ## literal pool for: ""
10000867a:	call	0x1000034f4
10000867f:	mov	rsi, qword ptr [rbp - 0xb0]
100008686:	lea	rdi, [rip + 0x13faa] ## literal pool for: "unknown compression method found:  "
10000868d:	call	0x1000034f4
100008692:	mov	rdi, qword ptr [rbp - 0xb0]
100008699:	call	0x100019716 ## symbol stub for: _free
10000869e:	lea	rsi, [rip + 0x13fb6] ## literal pool for: "Option -Z (--compression-method):  unknown method"
1000086a5:	jmp	0x1000088f2
1000086aa:	lea	rsi, [rip + 0x13fdf] ## literal pool for: "can't use -- before archive name"
1000086b1:	jmp	0x1000088f2
1000086b6:	mov	ebx, eax
1000086b8:	lea	rdi, [rip + 0x1301c] ## literal pool for: "new zip file left as: "
1000086bf:	call	0x1000034f4
1000086c4:	mov	rdi, qword ptr [r12]
1000086c8:	call	0x100019716 ## symbol stub for: _free
1000086cd:	mov	qword ptr [r12], 0x0
1000086d5:	lea	rsi, [rip + 0x146df] ## literal pool for: "was replacing the original zip file"
1000086dc:	mov	edi, ebx
1000086de:	call	0x100002e30
1000086e3:	lea	rsi, [rip + 0x1417d] ## literal pool for: "logpath"
1000086ea:	jmp	0x10000885b
1000086ef:	lea	rax, [rip + 0x22862]
1000086f6:	jmp	0x1000083d4
1000086fb:	lea	rsi, [rip + 0x13faf] ## literal pool for: "was processing arguments"
100008702:	jmp	0x10000885b
100008707:	mov	r8, qword ptr [rbp - 0xb0]
10000870e:	lea	rbx, [rip + 0x2141b]
100008715:	lea	rcx, [rip + 0x13de8] ## literal pool for: "bad split size:  '%s'"
10000871c:	mov	edx, 0x13f1
100008721:	mov	rdi, rbx
100008724:	xor	esi, esi
100008726:	xor	eax, eax
100008728:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000872d:	mov	edi, 0x10
100008732:	mov	rsi, rbx
100008735:	call	0x100002e30
10000873a:	lea	rsi, [rip + 0x13dc1] ## literal pool for: "-"
100008741:	jmp	0x1000084ff
100008746:	lea	rsi, [rip + 0x13db5] ## literal pool for: "-"
10000874d:	jmp	0x1000083d7
100008752:	lea	rsi, [rip + 0x14924] ## literal pool for: "could not open archive to read"
100008759:	jmp	0x1000083ab
10000875e:	mov	r8, qword ptr [rbp - 0xb0]
100008765:	lea	rbx, [rip + 0x213c4]
10000876c:	lea	rcx, [rip + 0x13d25] ## literal pool for: "dot size must be at least 32 KB:  '%s'"
100008773:	jmp	0x1000087b3
100008775:	lea	rsi, [rip + 0x13e66] ## literal pool for: "Compression method bzip2 not enabled"
10000877c:	mov	edi, 0x13
100008781:	call	0x100002e30
100008786:	lea	rsi, [rip + 0x1471c] ## literal pool for: "-R"
10000878d:	jmp	0x1000084ff
100008792:	lea	rsi, [rip + 0x14710] ## literal pool for: "-R"
100008799:	jmp	0x1000083d7
10000879e:	mov	r8, qword ptr [rbp - 0xb0]
1000087a5:	lea	rbx, [rip + 0x21384]
1000087ac:	lea	rcx, [rip + 0x13d67] ## literal pool for: "minimum split size is 64 KB:  '%s'"
1000087b3:	mov	edx, 0x13f1
1000087b8:	mov	rdi, rbx
1000087bb:	xor	esi, esi
1000087bd:	xor	eax, eax
1000087bf:	call	0x100019680 ## symbol stub for: ___sprintf_chk
1000087c4:	mov	rdi, qword ptr [rbp - 0xb0]
1000087cb:	call	0x100019716 ## symbol stub for: _free
1000087d0:	jmp	0x10000872d
1000087d5:	lea	rdi, [rip + 0x11fdb] ## literal pool for: ""
1000087dc:	mov	esi, 0x1
1000087e1:	call	0x100003300
1000087e6:	mov	r8, qword ptr [r15 + 0x50]
1000087ea:	lea	r14, [rip + 0x2133f]
1000087f1:	lea	rcx, [rip + 0x1495e] ## literal pool for: "was zipping %s"
1000087f8:	mov	edx, 0x13f1
1000087fd:	mov	rdi, r14
100008800:	xor	esi, esi
100008802:	xor	eax, eax
100008804:	call	0x100019680 ## symbol stub for: ___sprintf_chk
100008809:	mov	edi, ebx
10000880b:	mov	rsi, r14
10000880e:	call	0x100002e30
100008813:	lea	rsi, [rip + 0x13ec7] ## literal pool for: "can't read input (-) and filenames (-@) both from stdin"
10000881a:	jmp	0x1000088f2
10000881f:	lea	rax, [rip + 0x20fca]
100008826:	mov	rsi, qword ptr [rax]
100008829:	jmp	0x10000885b
10000882b:	movzx	eax, byte ptr [rbp - 0xb4]
100008832:	lea	edi, [4*rax + 0xa]
100008839:	lea	rax, [rip + 0x20fb0]
100008840:	jmp	0x10000891f
100008845:	lea	rax, [rip + 0x20fa4]
10000884c:	mov	rsi, qword ptr [rax]
10000884f:	jmp	0x1000084eb
100008854:	lea	rsi, [rip + 0x14b3d] ## literal pool for: "was setting comments to null"
10000885b:	mov	edi, 0x4
100008860:	call	0x100002e30
100008865:	mov	ebx, eax
100008867:	lea	rdi, [rip + 0x12e6d] ## literal pool for: "new zip file left as: "
10000886e:	call	0x1000034f4
100008873:	mov	rdi, qword ptr [r15]
100008876:	call	0x100019716 ## symbol stub for: _free
10000887b:	mov	qword ptr [r15], 0x0
100008882:	jmp	0x1000086d5
100008887:	lea	rsi, [rip + 0x14965] ## literal pool for: "user requested abort"
10000888e:	jmp	0x1000083ab
100008893:	mov	r8, qword ptr [r15 + 0x80]
10000889a:	lea	rbx, [rip + 0x2128f]
1000088a1:	lea	rcx, [rip + 0x148bd] ## literal pool for: "was copying %s"
1000088a8:	mov	edx, 0x13f1
1000088ad:	mov	rdi, rbx
1000088b0:	xor	esi, esi
1000088b2:	xor	eax, eax
1000088b4:	call	0x100019680 ## symbol stub for: ___sprintf_chk
1000088b9:	lea	rdi, [rip + 0x14948] ## literal pool for: "(try -F to attempt to fix)"
1000088c0:	lea	rsi, [rip + 0x11ef0] ## literal pool for: ""
1000088c7:	call	0x1000034f4
1000088cc:	mov	rdi, qword ptr [rbp - 0xd8]
1000088d3:	jmp	0x100008732
1000088d8:	lea	rsi, [rip + 0x14944] ## literal pool for: "could not seek in output file"
1000088df:	mov	rdi, qword ptr [rbp - 0xd8]
1000088e6:	call	0x100002e30
1000088eb:	lea	rsi, [rip + 0x14756] ## literal pool for: "cannot grow split archive"
1000088f2:	mov	edi, 0x10
1000088f7:	call	0x100002e30
1000088fc:	lea	rax, [rip + 0x20ef5]
100008903:	mov	rdi, qword ptr [rax]
100008906:	call	0x1000196e0 ## symbol stub for: _ferror
10000890b:	xor	ecx, ecx
10000890d:	test	eax, eax
10000890f:	setne	cl
100008912:	lea	edi, [rcx + 8*rcx]
100008915:	add	edi, 0x2
100008918:	lea	rax, [rip + 0x22639]
10000891f:	mov	rsi, qword ptr [rax]
100008922:	call	0x100002e30
100008927:	test	rax, rax
10000892a:	jne	0x10000895e
10000892c:	cmp	byte ptr [rip + 0x52689], 0x0
100008933:	jne	0x100008aa7
100008939:	test	byte ptr [rip + 0x52680], 0x1
100008940:	jne	0x100008aa7
100008946:	lea	rax, [rip + 0x20d6b]
10000894d:	mov	eax, dword ptr [rax]
10000894f:	lea	rcx, [rip + 0x20d5a]
100008956:	or	eax, dword ptr [rcx]
100008958:	jne	0x100008aa7
10000895e:	cmp	dword ptr [rbp - 0xc4], 0x0
100008965:	jle	0x100008a93
10000896b:	lea	rax, [rip + 0x20d2e]
100008972:	cmp	dword ptr [rax], 0x0
100008975:	je	0x100008a93
10000897b:	lea	rax, [rip + 0x20f7e]
100008982:	cmp	dword ptr [rax], 0x0
100008985:	jne	0x100008a93
10000898b:	lea	rax, [rip + 0x2119e]
100008992:	movabs	rcx, 0x70697a203a797274
10000899c:	mov	qword ptr [rax], rcx
10000899f:	mov	byte ptr [rax + 0x8], 0x0
1000089a3:	cmp	dword ptr [rbp - 0xc4], 0x2
1000089aa:	jl	0x1000089f1
1000089ac:	mov	r12d, dword ptr [rbp - 0xc4]
1000089b3:	mov	ebx, 0x1
1000089b8:	lea	r14, [rip + 0x21171]
1000089bf:	lea	r15, [rip + 0x1456a] ## literal pool for: " "
1000089c6:	mov	edx, 0x13f1
1000089cb:	mov	rdi, r14
1000089ce:	mov	rsi, r15
1000089d1:	call	0x10001968c ## symbol stub for: ___strcat_chk
1000089d6:	mov	rcx, qword ptr [rbp - 0xd0]
1000089dd:	mov	rsi, qword ptr [rcx + 8*rbx]
1000089e1:	mov	rdi, rax
1000089e4:	call	0x100019812 ## symbol stub for: _strcat
1000089e9:	inc	rbx
1000089ec:	cmp	r12, rbx
1000089ef:	jne	0x1000089c6
1000089f1:	lea	rdi, [rip + 0x21138]
1000089f8:	lea	rsi, [rip + 0x14605] ## literal pool for: " . -i"
1000089ff:	mov	edx, 0x13f1
100008a04:	call	0x10001968c ## symbol stub for: ___strcat_chk
100008a09:	mov	eax, dword ptr [rbp - 0xc4]
100008a0f:	cmp	eax, dword ptr [rbp - 0x118]
100008a15:	jge	0x100008a5e
100008a17:	movsxd	rbx, dword ptr [rbp - 0xc4]
100008a1e:	lea	r14, [rip + 0x2110b]
100008a25:	lea	r15, [rip + 0x14504] ## literal pool for: " "
100008a2c:	mov	edx, 0x13f1
100008a31:	mov	rdi, r14
100008a34:	mov	rsi, r15
100008a37:	call	0x10001968c ## symbol stub for: ___strcat_chk
100008a3c:	mov	rcx, qword ptr [rbp - 0xd0]
100008a43:	mov	rsi, qword ptr [rcx + 8*rbx]
100008a47:	mov	rdi, rax
100008a4a:	call	0x100019812 ## symbol stub for: _strcat
100008a4f:	inc	rbx
100008a52:	movsxd	rax, dword ptr [rbp - 0x118]
100008a59:	cmp	rbx, rax
100008a5c:	jl	0x100008a2c
100008a5e:	lea	rsi, [rip + 0x210cb]
100008a65:	jmp	0x100008a9d
100008a67:	mov	rsi, qword ptr [rbx]
100008a6a:	mov	edi, 0xf
100008a6f:	call	0x100002e30
100008a74:	cmp	eax, 0xa
100008a77:	jne	0x100008a87
100008a79:	lea	rcx, [rip + 0x20d70]
100008a80:	mov	qword ptr [rbp - 0x150], rcx
100008a87:	mov	rcx, qword ptr [rbp - 0x150]
100008a8e:	jmp	0x1000084fc
100008a93:	lea	rax, [rip + 0x224be]
100008a9a:	mov	rsi, qword ptr [rax]
100008a9d:	mov	edi, 0xc
100008aa2:	call	0x100002e30
100008aa7:	lea	rax, [rip + 0x224aa]
100008aae:	mov	rsi, qword ptr [rax]
100008ab1:	mov	edi, 0xd
100008ab6:	call	0x100002e30
100008abb:	nop
	.byte 0x8f #bad opcode
100008abd:	mov	cl, -0x1
100008abf:	jmp	[rsi - 0x52]
	.byte 0xff #bad opcode
100008ac3:	jmp	[rsi - 0x52]
	.byte 0xff #bad opcode
100008ac7:	jmp	[rsi - 0x52]
	.byte 0xff #bad opcode
100008acb:	jmp	[rsi - 0x52]
	.byte 0xff #bad opcode
100008acf:	jmp	[rsi - 0x52]
	.byte 0xff #bad opcode
100008ad3:	jmp	[rsi - 0x52]
	.byte 0xff #bad opcode
100008ad7:	jmp	[rsi - 0x52]
	.byte 0xff #bad opcode
100008adb:	jmp	[rsi - 0x52]
	.byte 0xff #bad opcode
100008adf:	jmp	[rsi - 0x52]
	.byte 0xff #bad opcode
100008ae3:	push	qword ptr [rcx + 8*rdi - 0x1]
100008ae7:	push	qword ptr [rcx + 8*rdi - 0x1]
100008aeb:	push	qword ptr [rcx + 8*rdi - 0x1]
100008aef:	push	qword ptr [rcx + 8*rdi - 0x1]
100008af3:	push	qword ptr [rcx + 8*rdi - 0x1]
100008af7:	jmp	rsp
100008af9:	xlatb
	.byte 0xff #bad opcode
100008afb:	call	rdx
100008afd:	mov	cl, -0x1
100008aff:	call	qword ptr [rdx + 4*rsi - 0x1]
100008b03:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b07:	push	qword ptr [rcx + 8*rdi - 0x1]
	.byte 0xff #bad opcode
	.byte 0xea #bad opcode
100008b0d:	mov	cl, -0x1
100008b0f:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b13:	inc	dword ptr [rbx]
100008b15:	mov	cl, -0x1
100008b17:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b1b:	jmp	rsp
100008b1d:	xlatb
	.byte 0xff #bad opcode
100008b1f:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b23:	jmp	[rdx + 0x74ffffb2]
100008b29:	stc
	.byte 0xff #bad opcode
100008b2b:	dec	dword ptr [rax]
100008b2d:	fcos
100008b2f:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b33:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b37:	jmp	qword ptr [rax - 0x4e]
	.byte 0xff #bad opcode
100008b3b:	push	rsi
100008b3d:	mov	cl, -0x1
100008b3f:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b43:	jmp	qword ptr [rbx]
100008b45:	mov	dl, -0x1
100008b47:	push	qword ptr [rcx + 8*rdi - 0x1]
	.byte 0xff #bad opcode
100008b4c:	cmp	dh, byte ptr [rbx - 0x4f240001]
	.byte 0xff #bad opcode
100008b53:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b57:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b5b:	call	qword ptr [rcx + 0x74ffffb2]
100008b61:	stc
	.byte 0xff #bad opcode
100008b63:	jmp	[rbx]
100008b65:	mov	cl, -0x1
100008b67:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b6b:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b6f:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b73:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b77:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b7b:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b7f:	push	qword ptr [rcx + 8*rdi - 0x1]
100008b83:	push	qword ptr [rsi + 0x38ffffb2]
100008b89:	mov	dl, -0x1
100008b8b:	call	rbx
100008b8d:	mov	dl, -0x1
	.byte 0xff #bad opcode
100008b90:	out	dx, eax
100008b91:	mov	dl, -0x1
100008b93:	dec	dword ptr [rdi]
100008b95:	mov	cl, -0x1
100008b97:	call	[rip - 0x1b00004d]
100008b9d:	xlatb
	.byte 0xff #bad opcode
100008b9f:	jmp	qword ptr [rsi - 0x7c00004f]
100008ba5:	mov	cl, -0x1
100008ba7:	jmp	[rsi]
100008ba9:	mov	bl, -0x1
100008bab:	call	qword ptr [rbp - 0x4d]
	.byte 0xff #bad opcode
100008baf:	call	qword ptr [rcx]
100008bb1:	mov	bl, -0x1
100008bb3:	inc	dword ptr [rdx + 4*rsi - 0x1]
100008bb7:	push	rdi
100008bb9:	mov	al, -0x1
100008bbb:	jmp	qword ptr [rdx - 0x9000049]
100008bc1:	mov	ah, -0x1
100008bc3:	jmp	[rcx - 0x41000051]
100008bc9:	scasd	eax, dword ptr es:[rdi]
	.byte 0xff #bad opcode
100008bcb:	push	qword ptr [rsi]
100008bcd:	mov	al, -0x1
100008bcf:	call	qword ptr [rax - 0x5100004c]
100008bd5:	scasb	al, byte ptr es:[rdi]
	.byte 0xff #bad opcode
100008bd7:	push	qword ptr [rcx + 8*rdi - 0x1]
100008bdb:	push	qword ptr [rbx + 0x1dffffb1]
100008be1:	mov	ch, -0x1
100008be3:	inc	esi
100008be5:	mov	cl, -0x1
100008be7:	jmp	[rcx - 0x53]
	.byte 0xff #bad opcode
100008beb:	call	qword ptr [rax - 0x200004c]
100008bf1:	mov	bl, -0x1
100008bf3:	jmp	[rdx]
100008bf5:	mov	ah, -0x1
100008bf7:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008bfb:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008bff:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c03:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c07:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c0b:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c0f:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c13:	dec	dword ptr [4*rsi - 0x4b560001]
	.byte 0xff #bad opcode
100008c1b:	inc	edx
100008c1d:	mov	ah, -0x1
100008c1f:	inc	dword ptr [rax + 0x28ffffb3]
100008c25:	mov	ch, -0x1
100008c27:	call	[rcx - 0x5a00004d]
100008c2d:	mov	bl, -0x1
	.byte 0xff #bad opcode
100008c30:	mov	esi, 0xffffb3
100008c35:	fdivr	st, st(7)
100008c37:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c3b:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c3f:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c43:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c47:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c4b:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c4f:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c53:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c57:	push	qword ptr [rsi]
100008c59:	mov	ah, -0x1
100008c5b:	dec	dword ptr [rsi - 0x4e]
	.byte 0xff #bad opcode
100008c5f:	push	qword ptr [rip + 0x71ffffb2]
100008c65:	mov	dl, -0x1
100008c67:	push	qword ptr [rbx]
100008c69:	stc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100008c6c:	jge	0x100008c20
	.byte 0xff #bad opcode
100008c6f:	call	[rdi - 0x4b]
	.byte 0xff #bad opcode
100008c73:	dec	dword ptr [rdx + 4*rsi - 0x4bb00001]
	.byte 0xff #bad opcode
100008c7b:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c7f:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c83:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c87:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c8b:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c8f:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008c93:	call	qword ptr [rax - 0x4b]
	.byte 0xff #bad opcode
100008c97:	inc	dword ptr [rcx - 0x4b]
	.byte 0xff #bad opcode
100008c9b:	call	[rbx - 0x4c]
	.byte 0xff #bad opcode
100008c9f:	call	[rdx]
100008ca1:	mov	dl, -0x1
100008ca3:	push	qword ptr [rcx - 0x4c]
	.byte 0xff #bad opcode
100008ca7:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008cab:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008caf:	jmp	[rbx - 0x4b]
	.byte 0xff #bad opcode
100008cb3:	call	[rax + 0x40ffffb2]
100008cb9:	mov	bl, -0x1
100008cbb:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008cbf:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008cc3:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008cc7:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008ccb:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008ccf:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008cd3:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008cd7:	inc	dword ptr [rdx + 0x48ffffad]
100008cdd:	clc
	.byte 0xff #bad opcode
100008cdf:	push	qword ptr [rdi - 0x4b]
	.byte 0xff #bad opcode
100008ce3:	dec	dword ptr [rax - 0x8]
	.byte 0xff #bad opcode
100008ce7:	inc	dword ptr [rbx + 0x55ffffb5]
100008ced:	mov	rbp, rsp
100008cf0:	push	r15
100008cf2:	push	r14
100008cf4:	push	r12
100008cf6:	push	rbx
100008cf7:	mov	rdi, qword ptr [rip + 0x1f5d2]
100008cfe:	lea	rsi, [rip + 0x14cd9] ## literal pool for: "zip"
100008d05:	xor	eax, eax
100008d07:	call	0x1000197a0 ## symbol stub for: _printf
100008d0c:	mov	edi, 0xa
100008d11:	call	0x1000197ac ## symbol stub for: _putchar
100008d16:	lea	r15, [rip + 0x1b323]
100008d1d:	lea	r14, [rip + 0x14cbe] ## literal pool for: "3.0"
100008d24:	lea	r12, [rip + 0x14cbb] ## literal pool for: "July 5th 2008"
100008d2b:	xor	ebx, ebx
100008d2d:	mov	rdi, qword ptr [rbx + r15]
100008d31:	mov	rsi, r14
100008d34:	mov	rdx, r12
100008d37:	xor	eax, eax
100008d39:	call	0x1000197a0 ## symbol stub for: _printf
100008d3e:	mov	edi, 0xa
100008d43:	call	0x1000197ac ## symbol stub for: _putchar
100008d48:	add	rbx, 0x8
100008d4c:	cmp	rbx, 0xa8
100008d53:	jne	0x100008d2d
100008d55:	pop	rbx
100008d56:	pop	r12
100008d58:	pop	r14
100008d5a:	pop	r15
100008d5c:	pop	rbp
100008d5d:	ret
100008d5e:	push	rbp
100008d5f:	mov	rbp, rsp
100008d62:	push	r15
100008d64:	push	r14
100008d66:	push	r13
100008d68:	push	r12
100008d6a:	push	rbx
100008d6b:	push	rax
100008d6c:	mov	rdi, qword ptr [rip + 0x1f55d]
100008d73:	lea	rsi, [rip + 0x14c64] ## literal pool for: "zip"
100008d7a:	xor	eax, eax
100008d7c:	call	0x1000197a0 ## symbol stub for: _printf
100008d81:	mov	edi, 0xa
100008d86:	call	0x1000197ac ## symbol stub for: _putchar
100008d8b:	lea	r12, [rip + 0x1f54e]
100008d92:	lea	r14, [rip + 0x14dcb] ## literal pool for: "Zip"
100008d99:	lea	r15, [rip + 0x14c42] ## literal pool for: "3.0"
100008da0:	lea	r13, [rip + 0x14c3f] ## literal pool for: "July 5th 2008"
100008da7:	xor	ebx, ebx
100008da9:	mov	rdi, qword ptr [rbx + r12]
100008dad:	mov	rsi, r14
100008db0:	mov	rdx, r15
100008db3:	mov	rcx, r13
100008db6:	xor	eax, eax
100008db8:	call	0x1000197a0 ## symbol stub for: _printf
100008dbd:	mov	edi, 0xa
100008dc2:	call	0x1000197ac ## symbol stub for: _putchar
100008dc7:	add	rbx, 0x8
100008dcb:	cmp	rbx, 0x38
100008dcf:	jne	0x100008da9
100008dd1:	call	0x100016ead
100008dd6:	lea	rdi, [rip + 0x14d8b] ## literal pool for: "Zip special compilation options:"
100008ddd:	call	0x1000197b2 ## symbol stub for: _puts
100008de2:	lea	r14, [rip + 0x1b307]
100008de9:	lea	r15, [rip + 0x14d99] ## literal pool for: "\t%s\n"
100008df0:	xor	ebx, ebx
100008df2:	mov	rsi, qword ptr [rbx + r14]
100008df6:	mov	rdi, r15
100008df9:	xor	eax, eax
100008dfb:	call	0x1000197a0 ## symbol stub for: _printf
100008e00:	add	rbx, 0x8
100008e04:	cmp	rbx, 0x30
100008e08:	jne	0x100008df2
100008e0a:	lea	rdi, [rip + 0x14d7d] ## literal pool for: "\t[encryption, version %d.%d%s of %s] (modified for Zip 3)\n\n"
100008e11:	lea	rcx, [rip + 0x1199f] ## literal pool for: ""
100008e18:	lea	r8, [rip + 0x14dab] ## literal pool for: "05 Jan 2007"
100008e1f:	xor	ebx, ebx
100008e21:	mov	esi, 0x2
100008e26:	mov	edx, 0x5b
100008e2b:	xor	eax, eax
100008e2d:	call	0x1000197a0 ## symbol stub for: _printf
100008e32:	lea	r14, [rip + 0x1f4e7]
100008e39:	mov	rdi, qword ptr [rbx + r14]
100008e3d:	call	0x1000197b2 ## symbol stub for: _puts
100008e42:	add	rbx, 0x8
100008e46:	cmp	rbx, 0x38
100008e4a:	jne	0x100008e39
100008e4c:	lea	rdi, [rip + 0x14d83] ## literal pool for: "\nZip environment options:"
100008e53:	call	0x1000197b2 ## symbol stub for: _puts
100008e58:	mov	r15b, 0x1
100008e5b:	xor	eax, eax
100008e5d:	lea	r12, [rip + 0x1b2cc]
100008e64:	lea	r13, [rip + 0x14d90] ## literal pool for: "[none]"
100008e6b:	lea	r14, [rip + 0x14d7e] ## literal pool for: "%16s:  %s\n"
100008e72:	mov	rbx, qword ptr [r12 + 8*rax]
100008e76:	mov	rdi, rbx
100008e79:	call	0x10001973a ## symbol stub for: _getenv
100008e7e:	mov	rdx, r13
100008e81:	test	rax, rax
100008e84:	je	0x100008e91
100008e86:	cmp	byte ptr [rax], 0x0
100008e89:	mov	rdx, r13
100008e8c:	je	0x100008e91
100008e8e:	mov	rdx, rax
100008e91:	mov	rdi, r14
100008e94:	mov	rsi, rbx
100008e97:	xor	eax, eax
100008e99:	call	0x1000197a0 ## symbol stub for: _printf
100008e9e:	mov	eax, 0x1
100008ea3:	test	r15b, 0x1
100008ea7:	mov	r15d, 0x0
100008ead:	jne	0x100008e72
100008eaf:	add	rsp, 0x8
100008eb3:	pop	rbx
100008eb4:	pop	r12
100008eb6:	pop	r13
100008eb8:	pop	r14
100008eba:	pop	r15
100008ebc:	pop	rbp
100008ebd:	ret
100008ebe:	push	rbp
100008ebf:	mov	rbp, rsp
100008ec2:	call	0x10001632d
100008ec7:	lea	rax, [rip + 0x22062]
100008ece:	mov	rsi, qword ptr [rax]
100008ed1:	mov	edi, 0xa
100008ed6:	call	0x1000197a6 ## symbol stub for: _putc
100008edb:	lea	rsi, [rip + 0x14d20] ## literal pool for: "aborting"
100008ee2:	mov	edi, 0x9
100008ee7:	call	0x100002e30
100008eec:	push	rbp
100008eed:	mov	rbp, rsp
100008ef0:	push	r15
100008ef2:	push	r14
100008ef4:	push	r13
100008ef6:	push	r12
100008ef8:	push	rbx
100008ef9:	sub	rsp, 0x28
100008efd:	mov	r15d, edi
100008f00:	lea	r14, [rip + 0x22051]
100008f07:	cmp	byte ptr [rip + 0x520b2], 0x1
100008f0e:	jne	0x100008fcf
100008f14:	mov	rdi, qword ptr [r14]
100008f17:	test	rdi, rdi
100008f1a:	je	0x100008fcf
100008f20:	lea	rsi, [rip + 0x135db] ## literal pool for: "-"
100008f27:	call	0x10001981e ## symbol stub for: _strcmp
100008f2c:	test	eax, eax
100008f2e:	je	0x100008fcf
100008f34:	lea	rax, [rip + 0x2099d]
100008f3b:	mov	rbx, qword ptr [rax]
100008f3e:	test	rbx, rbx
100008f41:	je	0x100008fa3
100008f43:	mov	dword ptr [rbp - 0x2c], r15d
100008f47:	lea	r12, [rbp - 0x40]
100008f4b:	xor	r15d, r15d
100008f4e:	lea	r13, [rbp - 0x48]
100008f52:	mov	rax, qword ptr [rbx + 0x70]
100008f56:	movzx	ecx, word ptr [rbx + 0x28]
100008f5a:	cmp	byte ptr [rcx + rax - 0x1], 0x2f
100008f5f:	je	0x100008f85
100008f61:	mov	rdi, rbx
100008f64:	mov	rsi, r13
100008f67:	call	0x10000ed53
100008f6c:	test	al, 0x1
100008f6e:	jne	0x100008f76
100008f70:	mov	rax, qword ptr [rbx + 0x8]
100008f74:	jmp	0x100008f7e
100008f76:	mov	rdi, r12
100008f79:	call	0x1000114d4
100008f7e:	cmp	r15, rax
100008f81:	cmovb	r15, rax
100008f85:	mov	rbx, qword ptr [rbx + 0x98]
100008f8c:	test	rbx, rbx
100008f8f:	jne	0x100008f52
100008f91:	test	r15, r15
100008f94:	je	0x100008fb8
100008f96:	mov	rdi, qword ptr [r14]
100008f99:	mov	rsi, r15
100008f9c:	call	0x10001697d
100008fa1:	jmp	0x100008fcb
100008fa3:	lea	rdi, [rip + 0x14c61] ## literal pool for: "zip file is empty, can't make it as old as latest entry"
100008faa:	lea	rsi, [rip + 0x11806] ## literal pool for: ""
100008fb1:	call	0x1000034f4
100008fb6:	jmp	0x100008fcf
100008fb8:	lea	rdi, [rip + 0x14c84] ## literal pool for: "zip file has only directories, can't make it as old as latest entry"
100008fbf:	lea	rsi, [rip + 0x117f1] ## literal pool for: ""
100008fc6:	call	0x1000034f4
100008fcb:	mov	r15d, dword ptr [rbp - 0x2c]
100008fcf:	lea	rbx, [rip + 0x207da]
100008fd6:	mov	rdi, qword ptr [rbx]
100008fd9:	test	rdi, rdi
100008fdc:	je	0x100008fea
100008fde:	call	0x100019716 ## symbol stub for: _free
100008fe3:	mov	qword ptr [rbx], 0x0
100008fea:	mov	rdi, qword ptr [r14]
100008fed:	test	rdi, rdi
100008ff0:	je	0x100008ffe
100008ff2:	call	0x100019716 ## symbol stub for: _free
100008ff7:	mov	qword ptr [r14], 0x0
100008ffe:	lea	rbx, [rip + 0x207fb]
100009005:	mov	rdi, qword ptr [rbx]
100009008:	test	rdi, rdi
10000900b:	je	0x100009019
10000900d:	call	0x1000196ce ## symbol stub for: _fclose
100009012:	mov	qword ptr [rbx], 0x0
100009019:	lea	rbx, [rip + 0x207e8]
100009020:	mov	rdi, qword ptr [rbx]
100009023:	test	rdi, rdi
100009026:	je	0x100009034
100009028:	call	0x100019716 ## symbol stub for: _free
10000902d:	mov	qword ptr [rbx], 0x0
100009034:	lea	rbx, [rip + 0x207dd]
10000903b:	mov	rdi, qword ptr [rbx]
10000903e:	test	rdi, rdi
100009041:	je	0x10000904f
100009043:	call	0x100019716 ## symbol stub for: _free
100009048:	mov	qword ptr [rbx], 0x0
10000904f:	lea	rbx, [rip + 0x20892]
100009056:	mov	rdi, qword ptr [rbx]
100009059:	test	rdi, rdi
10000905c:	je	0x10000906a
10000905e:	call	0x100019716 ## symbol stub for: _free
100009063:	mov	qword ptr [rbx], 0x0
10000906a:	lea	rax, [rip + 0x20633]
100009071:	cmp	dword ptr [rax], 0x0
100009074:	je	0x10000907f
100009076:	call	0x10000eee4
10000907b:	test	eax, eax
10000907d:	jne	0x100009096
10000907f:	call	0x10000316f
100009084:	mov	eax, r15d
100009087:	add	rsp, 0x28
10000908b:	pop	rbx
10000908c:	pop	r12
10000908e:	pop	r13
100009090:	pop	r14
100009092:	pop	r15
100009094:	pop	rbp
100009095:	ret
100009096:	lea	rsi, [rip + 0x14bea] ## literal pool for: "was deleting moved files and directories"
10000909d:	mov	edi, eax
10000909f:	call	0x100002e30
1000090a4:	push	rbp
1000090a5:	mov	rbp, rsp
1000090a8:	push	r15
1000090aa:	push	r14
1000090ac:	push	r13
1000090ae:	push	r12
1000090b0:	push	rbx
1000090b1:	push	rax
1000090b2:	mov	r14d, edi
1000090b5:	lea	eax, [r14 - 0x52]
1000090b9:	cmp	eax, 0x26
1000090bc:	ja	0x1000092f3
1000090c2:	movabs	rcx, 0x4000800001
1000090cc:	bt	rcx, rax
1000090d0:	jae	0x1000092f3
1000090d6:	mov	r15, rsi
1000090d9:	test	rsi, rsi
1000090dc:	je	0x1000092a7
1000090e2:	cmp	byte ptr [r15], 0x40
1000090e6:	jne	0x1000091f1
1000090ec:	cmp	byte ptr [r15 + 0x1], 0x0
1000090f1:	je	0x1000092b0
1000090f7:	lea	rdi, [r15 + 0x1]
1000090fb:	lea	rsi, [rip + 0x12eae] ## literal pool for: "r"
100009102:	call	0x1000196f8 ## symbol stub for: _fopen
100009107:	test	rax, rax
10000910a:	je	0x1000092c1
100009110:	mov	r12, rax
100009113:	mov	rdi, rax
100009116:	call	0x1000106d0
10000911b:	test	rax, rax
10000911e:	je	0x1000091db
100009124:	mov	rbx, rax
100009127:	lea	r13, [rip + 0x207d2]
10000912e:	mov	edi, 0x18
100009133:	call	0x100019758 ## symbol stub for: _malloc
100009138:	test	rax, rax
10000913b:	je	0x100009296
100009141:	mov	rcx, qword ptr [rip + 0x20530]
100009148:	add	rcx, 0x10
10000914c:	cmp	qword ptr [rip + 0x2051c], 0x0
100009154:	lea	rdx, [rip + 0x20515]
10000915b:	cmove	rcx, rdx
10000915f:	mov	qword ptr [rcx], rax
100009162:	mov	qword ptr [rip + 0x2050f], rax
100009169:	mov	rdi, rbx
10000916c:	xor	esi, esi
10000916e:	xor	edx, edx
100009170:	call	0x10001683e
100009175:	mov	r15, rax
100009178:	mov	rdi, rbx
10000917b:	call	0x100019716 ## symbol stub for: _free
100009180:	test	r15, r15
100009183:	je	0x1000091a9
100009185:	mov	rdi, r15
100009188:	call	0x10001694a
10000918d:	mov	rcx, qword ptr [rip + 0x204e4]
100009194:	mov	qword ptr [rcx + 0x8], rax
100009198:	mov	rdi, r15
10000919b:	call	0x100019716 ## symbol stub for: _free
1000091a0:	mov	rax, qword ptr [rip + 0x204d1]
1000091a7:	jmp	0x1000091b8
1000091a9:	mov	rax, qword ptr [rip + 0x204c8]
1000091b0:	mov	qword ptr [rax + 0x8], 0x0
1000091b8:	mov	byte ptr [rax], r14b
1000091bb:	inc	dword ptr [r13]
1000091bf:	mov	qword ptr [rax + 0x10], 0x0
1000091c7:	mov	rdi, r12
1000091ca:	call	0x1000106d0
1000091cf:	mov	rbx, rax
1000091d2:	test	rax, rax
1000091d5:	jne	0x10000912e
1000091db:	mov	rdi, r12
1000091de:	add	rsp, 0x8
1000091e2:	pop	rbx
1000091e3:	pop	r12
1000091e5:	pop	r13
1000091e7:	pop	r14
1000091e9:	pop	r15
1000091eb:	pop	rbp
1000091ec:	jmp	0x1000196ce ## symbol stub for: _fclose
1000091f1:	mov	edi, 0x18
1000091f6:	call	0x100019758 ## symbol stub for: _malloc
1000091fb:	test	rax, rax
1000091fe:	je	0x100009296
100009204:	lea	rcx, [rip + 0x20465]
10000920b:	mov	rdx, qword ptr [rip + 0x20466]
100009212:	add	rdx, 0x10
100009216:	cmp	qword ptr [rip + 0x20452], 0x0
10000921e:	cmove	rdx, rcx
100009222:	mov	qword ptr [rdx], rax
100009225:	mov	qword ptr [rip + 0x2044c], rax
10000922c:	mov	rdi, r15
10000922f:	xor	esi, esi
100009231:	xor	edx, edx
100009233:	call	0x10001683e
100009238:	test	rax, rax
10000923b:	je	0x100009264
10000923d:	mov	rbx, rax
100009240:	mov	rdi, rax
100009243:	call	0x10001694a
100009248:	mov	rcx, qword ptr [rip + 0x20429]
10000924f:	mov	qword ptr [rcx + 0x8], rax
100009253:	mov	rdi, rbx
100009256:	call	0x100019716 ## symbol stub for: _free
10000925b:	mov	rax, qword ptr [rip + 0x20416]
100009262:	jmp	0x100009273
100009264:	mov	rax, qword ptr [rip + 0x2040d]
10000926b:	mov	qword ptr [rax + 0x8], 0x0
100009273:	mov	byte ptr [rax], r14b
100009276:	lea	rcx, [rip + 0x20683]
10000927d:	inc	dword ptr [rcx]
10000927f:	mov	qword ptr [rax + 0x10], 0x0
100009287:	add	rsp, 0x8
10000928b:	pop	rbx
10000928c:	pop	r12
10000928e:	pop	r13
100009290:	pop	r14
100009292:	pop	r15
100009294:	pop	rbp
100009295:	ret
100009296:	lea	rsi, [rip + 0x1891a] ## literal pool for: "adding filter"
10000929d:	mov	edi, 0x4
1000092a2:	call	0x100002e30
1000092a7:	lea	rsi, [rip + 0x188c4] ## literal pool for: "null pattern to add_filter"
1000092ae:	jmp	0x1000092fa
1000092b0:	lea	rsi, [rip + 0x188d6] ## literal pool for: "missing file after @"
1000092b7:	mov	edi, 0x10
1000092bc:	call	0x100002e30
1000092c1:	lea	rbx, [rip + 0x20868]
1000092c8:	lea	rcx, [rip + 0x188d3] ## literal pool for: "%c pattern file '%s'"
1000092cf:	mov	edx, 0x13f1
1000092d4:	mov	rdi, rbx
1000092d7:	xor	esi, esi
1000092d9:	mov	r8d, r14d
1000092dc:	mov	r9, r15
1000092df:	xor	eax, eax
1000092e1:	call	0x100019680 ## symbol stub for: ___sprintf_chk
1000092e6:	mov	edi, 0x12
1000092eb:	mov	rsi, rbx
1000092ee:	call	0x100002e30
1000092f3:	lea	rsi, [rip + 0x18861] ## literal pool for: "bad flag to add_filter"
1000092fa:	mov	edi, 0x5
1000092ff:	call	0x100002e30
100009304:	push	rbp
100009305:	mov	rbp, rsp
100009308:	push	r15
10000930a:	push	r14
10000930c:	push	r13
10000930e:	push	r12
100009310:	push	rbx
100009311:	push	rax
100009312:	lea	rax, [rip + 0x205e7]
100009319:	mov	edi, dword ptr [rax]
10000931b:	test	edi, edi
10000931d:	je	0x1000093bd
100009323:	inc	edi
100009325:	shl	rdi, 0x4
100009329:	call	0x100019758 ## symbol stub for: _malloc
10000932e:	lea	r15, [rip + 0x205c3]
100009335:	mov	qword ptr [r15], rax
100009338:	test	rax, rax
10000933b:	je	0x1000093da
100009341:	mov	r12, qword ptr [rip + 0x20328]
100009348:	test	r12, r12
10000934b:	je	0x1000093cb
10000934d:	mov	ebx, 0x8
100009352:	mov	r13d, 0x1
100009358:	lea	r14, [rip + 0x205a5]
10000935f:	movsx	eax, byte ptr [r12]
100009364:	mov	rcx, r14
100009367:	cmp	eax, 0x69
10000936a:	je	0x100009378
10000936c:	cmp	eax, 0x52
10000936f:	jne	0x10000937a
100009371:	lea	rcx, [rip + 0x20590]
100009378:	inc	dword ptr [rcx]
10000937a:	mov	rcx, qword ptr [r15]
10000937d:	mov	dword ptr [rcx + rbx], eax
100009380:	mov	rax, qword ptr [r12 + 0x8]
100009385:	mov	qword ptr [rcx + rbx - 0x8], rax
10000938a:	mov	rdi, qword ptr [rip + 0x202df]
100009391:	mov	r12, qword ptr [rdi + 0x10]
100009395:	call	0x100019716 ## symbol stub for: _free
10000939a:	mov	qword ptr [rip + 0x202cf], r12
1000093a1:	lea	rax, [rip + 0x20558]
1000093a8:	mov	eax, dword ptr [rax]
1000093aa:	cmp	r13, rax
1000093ad:	jae	0x1000093cb
1000093af:	add	rbx, 0x10
1000093b3:	inc	r13
1000093b6:	test	r12, r12
1000093b9:	jne	0x10000935f
1000093bb:	jmp	0x1000093cb
1000093bd:	lea	rax, [rip + 0x20534]
1000093c4:	mov	qword ptr [rax], 0x0
1000093cb:	add	rsp, 0x8
1000093cf:	pop	rbx
1000093d0:	pop	r12
1000093d2:	pop	r13
1000093d4:	pop	r14
1000093d6:	pop	r15
1000093d8:	pop	rbp
1000093d9:	ret
1000093da:	lea	rsi, [rip + 0x187e4] ## literal pool for: "was creating pattern list"
1000093e1:	mov	edi, 0x4
1000093e6:	call	0x100002e30
1000093eb:	push	rbp
1000093ec:	mov	rbp, rsp
1000093ef:	mov	rax, qword ptr [rip + 0x1ac22] ## literal pool symbol address: ___stderrp
1000093f6:	mov	rax, qword ptr [rax]
1000093f9:	lea	rcx, [rip + 0x21b30]
100009400:	mov	qword ptr [rcx], rax
100009403:	mov	edi, 0x1
100009408:	call	0x100019746 ## symbol stub for: _isatty
10000940d:	test	eax, eax
10000940f:	jne	0x100009431
100009411:	mov	edi, 0x4
100009416:	call	0x100019758 ## symbol stub for: _malloc
10000941b:	lea	rcx, [rip + 0x21b36]
100009422:	mov	qword ptr [rcx], rax
100009425:	test	rax, rax
100009428:	je	0x100009442
10000942a:	mov	word ptr [rax], 0x2d
10000942f:	pop	rbp
100009430:	ret
100009431:	lea	rsi, [rip + 0x187a7] ## literal pool for: "cannot write zip file to terminal"
100009438:	mov	edi, 0x10
10000943d:	call	0x100002e30
100009442:	lea	rsi, [rip + 0x13268] ## literal pool for: "was processing arguments"
100009449:	mov	edi, 0x4
10000944e:	call	0x100002e30
100009453:	push	rbp
100009454:	mov	rbp, rsp
100009457:	push	r15
100009459:	push	r14
10000945b:	push	rbx
10000945c:	push	rax
10000945d:	mov	r14, rdi
100009460:	mov	edi, 0x10
100009465:	call	0x100019758 ## symbol stub for: _malloc
10000946a:	test	rax, rax
10000946d:	je	0x1000094db
10000946f:	mov	r15, rax
100009472:	mov	rdi, r14
100009475:	call	0x100019830 ## symbol stub for: _strlen
10000947a:	lea	rdi, [rax + 0x1]
10000947e:	call	0x100019758 ## symbol stub for: _malloc
100009483:	test	rax, rax
100009486:	je	0x1000094db
100009488:	mov	rbx, rax
10000948b:	mov	rdi, rax
10000948e:	mov	rsi, r14
100009491:	call	0x100019824 ## symbol stub for: _strcpy
100009496:	mov	qword ptr [r15 + 0x8], 0x0
10000949e:	mov	qword ptr [r15], rbx
1000094a1:	mov	rax, qword ptr [rip + 0x201e8]
1000094a8:	add	rax, 0x8
1000094ac:	cmp	qword ptr [rip + 0x201d4], 0x0
1000094b4:	lea	rcx, [rip + 0x201cd]
1000094bb:	cmove	rax, rcx
1000094bf:	mov	qword ptr [rax], r15
1000094c2:	mov	qword ptr [rip + 0x201c7], r15
1000094c9:	inc	qword ptr [rip + 0x201b0]
1000094d0:	add	rsp, 0x8
1000094d4:	pop	rbx
1000094d5:	pop	r14
1000094d7:	pop	r15
1000094d9:	pop	rbp
1000094da:	ret
1000094db:	lea	rsi, [rip + 0x1871f] ## literal pool for: "adding file"
1000094e2:	mov	edi, 0x4
1000094e7:	call	0x100002e30
1000094ec:	push	rbp
1000094ed:	mov	rbp, rsp
1000094f0:	push	r15
1000094f2:	push	r14
1000094f4:	push	r12
1000094f6:	push	rbx
1000094f7:	mov	eax, 0x1400
1000094fc:	call	0x100009bb0
100009501:	sub	rsp, rax
100009504:	mov	r14, rdi
100009507:	mov	rax, qword ptr [rip + 0x1ab02] ## literal pool symbol address: ___stack_chk_guard
10000950e:	mov	rax, qword ptr [rax]
100009511:	mov	qword ptr [rbp - 0x28], rax
100009515:	mov	rbx, qword ptr [rip + 0x51aac]
10000951c:	test	rbx, rbx
10000951f:	je	0x100009598
100009521:	lea	rsi, [rip + 0x186e5] ## literal pool for: "{}"
100009528:	mov	rdi, rbx
10000952b:	call	0x100019848 ## symbol stub for: _strstr
100009530:	test	rax, rax
100009533:	jne	0x100009807
100009539:	lea	r8, [rbp - 0xfd0]
100009540:	mov	qword ptr [r8], rbx
100009543:	mov	qword ptr [r8 + 0x8], r14
100009547:	xor	r14d, r14d
10000954a:	mov	qword ptr [r8 + 0x10], r14
10000954e:	lea	rdi, [rbp - 0x13c0]
100009555:	mov	rsi, rbx
100009558:	xor	edx, edx
10000955a:	xor	ecx, ecx
10000955c:	xor	r9d, r9d
10000955f:	call	0x10001979a ## symbol stub for: _posix_spawnp
100009564:	mov	ebx, eax
100009566:	mov	rdi, qword ptr [rip + 0x51a5b]
10000956d:	call	0x100019716 ## symbol stub for: _free
100009572:	mov	qword ptr [rip + 0x51a4f], r14
100009579:	mov	ecx, 0x1
10000957e:	test	ebx, ebx
100009580:	jne	0x100009739
100009586:	mov	edi, dword ptr [rbp - 0x13c0]
10000958c:	lea	rbx, [rbp - 0x1410]
100009593:	jmp	0x100009720
100009598:	lea	rax, [rip + 0x18689] ## literal pool for: "unzip"
10000959f:	mov	qword ptr [rbp - 0x1410], rax
1000095a6:	lea	rax, [rip + 0x18681] ## literal pool for: "-t"
1000095ad:	mov	qword ptr [rbp - 0x1408], rax
1000095b4:	lea	rax, [rip + 0x200f1]
1000095bb:	mov	r12d, 0x2
1000095c1:	cmp	dword ptr [rax], 0x0
1000095c4:	jne	0x1000095da
1000095c6:	lea	rax, [rip + 0x18664] ## literal pool for: "-qq"
1000095cd:	mov	qword ptr [rbp - 0x1400], rax
1000095d4:	mov	r12d, 0x3
1000095da:	mov	dword ptr [rbp - 0x1414], 0x0
1000095e4:	lea	rbx, [rbp - 0xfd0]
1000095eb:	mov	byte ptr [rbx], 0x0
1000095ee:	lea	rsi, [rip + 0x18633] ## literal pool for: "unzip"
1000095f5:	mov	edx, 0xfa0
1000095fa:	mov	ecx, 0xfa4
1000095ff:	mov	rdi, rbx
100009602:	call	0x100019698 ## symbol stub for: ___strncat_chk
100009607:	lea	rsi, [rip + 0x18663] ## literal pool for: " -v"
10000960e:	mov	edx, 0xfa4
100009613:	mov	rdi, rbx
100009616:	call	0x10001968c ## symbol stub for: ___strcat_chk
10000961b:	lea	rsi, [rip + 0x1298e] ## literal pool for: "r"
100009622:	mov	rdi, rbx
100009625:	call	0x100019794 ## symbol stub for: _popen
10000962a:	test	rax, rax
10000962d:	je	0x1000097c6
100009633:	mov	rbx, rax
100009636:	lea	rdi, [rbp - 0x13c0]
10000963d:	mov	esi, 0x3e8
100009642:	mov	rdx, rax
100009645:	call	0x1000196ec ## symbol stub for: _fgets
10000964a:	test	rax, rax
10000964d:	je	0x10000968d
10000964f:	lea	rsi, [rip + 0x18655] ## literal pool for: "UnZip %f "
100009656:	lea	rdi, [rbp - 0x13c0]
10000965d:	lea	rdx, [rbp - 0x1414]
100009664:	xor	eax, eax
100009666:	call	0x100019806 ## symbol stub for: _sscanf
10000966b:	test	eax, eax
10000966d:	jle	0x100009696
10000966f:	lea	r15, [rbp - 0x13c0]
100009676:	mov	rdi, r15
100009679:	mov	esi, 0x3e8
10000967e:	mov	rdx, rbx
100009681:	call	0x1000196ec ## symbol stub for: _fgets
100009686:	test	rax, rax
100009689:	jne	0x100009676
10000968b:	jmp	0x1000096a9
10000968d:	lea	rdi, [rip + 0x185f2] ## literal pool for: "failed to get information from UnZip"
100009694:	jmp	0x10000969d
100009696:	lea	rdi, [rip + 0x18618] ## literal pool for: "unexpected output of UnZip -v"
10000969d:	lea	rsi, [rip + 0x11113] ## literal pool for: ""
1000096a4:	call	0x1000034f4
1000096a9:	mov	rdi, rbx
1000096ac:	call	0x100019788 ## symbol stub for: _pclose
1000096b1:	movss	xmm0, dword ptr [rbp - 0x1414]
1000096b9:	movss	xmm1, dword ptr [rip + 0x1053f]
1000096c1:	ucomiss	xmm1, xmm0
1000096c4:	jbe	0x1000096d6
1000096c6:	lea	rax, [rip + 0x200d7]
1000096cd:	cmp	dword ptr [rax], 0x0
1000096d0:	jne	0x100009818
1000096d6:	mov	eax, r12d
1000096d9:	mov	qword ptr [rbp + 8*rax - 0x1410], r14
1000096e1:	mov	qword ptr [rbp + 8*rax - 0x1408], 0x0
1000096ed:	lea	r8, [rbp - 0x1410]
1000096f4:	mov	rsi, qword ptr [r8]
1000096f7:	lea	rdi, [rbp - 0xfd0]
1000096fe:	xor	edx, edx
100009700:	xor	ecx, ecx
100009702:	xor	r9d, r9d
100009705:	call	0x10001979a ## symbol stub for: _posix_spawnp
10000970a:	mov	ecx, 0x1
10000970f:	test	eax, eax
100009711:	jne	0x100009739
100009713:	mov	edi, dword ptr [rbp - 0xfd0]
100009719:	lea	rbx, [rbp - 0x13c0]
100009720:	mov	rsi, rbx
100009723:	xor	edx, edx
100009725:	call	0x100019878 ## symbol stub for: _waitpid
10000972a:	mov	eax, dword ptr [rbx]
10000972c:	test	al, 0x7f
10000972e:	movzx	eax, ah
100009731:	mov	ecx, 0x1
100009736:	cmove	ecx, eax
100009739:	test	ecx, ecx
10000973b:	jne	0x1000097d7
100009741:	lea	rax, [rip + 0x1fd14]
100009748:	cmp	dword ptr [rax], 0x0
10000974b:	je	0x100009777
10000974d:	lea	rbx, [rip + 0x217dc]
100009754:	mov	rdi, qword ptr [rbx]
100009757:	lea	rax, [rip + 0x217fa]
10000975e:	mov	rdx, qword ptr [rax]
100009761:	lea	rsi, [rip + 0x184fa] ## literal pool for: "test of %s OK\n"
100009768:	xor	eax, eax
10000976a:	call	0x1000196fe ## symbol stub for: _fprintf
10000976f:	mov	rdi, qword ptr [rbx]
100009772:	call	0x1000196e6 ## symbol stub for: _fflush
100009777:	lea	rbx, [rip + 0x1ffe2]
10000977e:	mov	rdi, qword ptr [rbx]
100009781:	test	rdi, rdi
100009784:	je	0x1000097a6
100009786:	lea	rax, [rip + 0x217cb]
10000978d:	mov	rdx, qword ptr [rax]
100009790:	lea	rsi, [rip + 0x184cb] ## literal pool for: "test of %s OK\n"
100009797:	xor	eax, eax
100009799:	call	0x1000196fe ## symbol stub for: _fprintf
10000979e:	mov	rdi, qword ptr [rbx]
1000097a1:	call	0x1000196e6 ## symbol stub for: _fflush
1000097a6:	mov	rax, qword ptr [rip + 0x1a863] ## literal pool symbol address: ___stack_chk_guard
1000097ad:	mov	rax, qword ptr [rax]
1000097b0:	cmp	rax, qword ptr [rbp - 0x28]
1000097b4:	jne	0x100009802
1000097b6:	add	rsp, 0x1400
1000097bd:	pop	rbx
1000097be:	pop	r12
1000097c0:	pop	r14
1000097c2:	pop	r15
1000097c4:	pop	rbp
1000097c5:	ret
1000097c6:	lea	rdi, [rip + 0x184a8] ## literal pool for: "unzip pipe error"
1000097cd:	call	0x10001978e ## symbol stub for: _perror
1000097d2:	jmp	0x1000096b1
1000097d7:	lea	rax, [rip + 0x21752]
1000097de:	mov	rdi, qword ptr [rax]
1000097e1:	lea	rax, [rip + 0x21770]
1000097e8:	mov	rdx, qword ptr [rax]
1000097eb:	lea	rsi, [rip + 0x18443] ## literal pool for: "test of %s FAILED\n"
1000097f2:	xor	eax, eax
1000097f4:	call	0x1000196fe ## symbol stub for: _fprintf
1000097f9:	lea	rsi, [rip + 0x18448] ## literal pool for: "original files unmodified"
100009800:	jmp	0x100009866
100009802:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
100009807:	lea	rsi, [rip + 0x18402] ## literal pool for: "{} in -TT not supported"
10000980e:	mov	edi, 0x10
100009813:	call	0x100002e30
100009818:	cvtss2sd	xmm0, xmm0
10000981c:	lea	rcx, [rip + 0x184b0] ## literal pool for: "Found UnZip version %4.2f"
100009823:	lea	r14, [rbp - 0x13c0]
10000982a:	mov	edx, 0x3e9
10000982f:	mov	rdi, r14
100009832:	xor	esi, esi
100009834:	mov	al, 0x1
100009836:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000983b:	lea	rbx, [rip + 0x10f75] ## literal pool for: ""
100009842:	mov	rdi, r14
100009845:	mov	rsi, rbx
100009848:	call	0x1000034f4
10000984d:	lea	rdi, [rip + 0x18499] ## literal pool for: "Need UnZip 6.00 or later to test this Zip64 archive"
100009854:	mov	rsi, rbx
100009857:	call	0x1000034f4
10000985c:	lea	rax, [rip + 0x216f5]
100009863:	mov	rsi, qword ptr [rax]
100009866:	mov	edi, 0x8
10000986b:	call	0x100002e30
100009870:	push	rbp
100009871:	mov	rbp, rsp
100009874:	push	r15
100009876:	push	r14
100009878:	push	r12
10000987a:	push	rbx
10000987b:	sub	rsp, 0x70
10000987f:	mov	rax, qword ptr [rip + 0x1a78a] ## literal pool symbol address: ___stack_chk_guard
100009886:	mov	rax, qword ptr [rax]
100009889:	mov	qword ptr [rbp - 0x28], rax
10000988d:	lea	r15, [rip + 0x20038]
100009894:	cmp	dword ptr [r15], 0x0
100009898:	je	0x1000098b5
10000989a:	lea	rax, [rip + 0x2168f]
1000098a1:	mov	rsi, qword ptr [rax]
1000098a4:	mov	edi, 0xa
1000098a9:	call	0x100019704 ## symbol stub for: _fputc
1000098ae:	mov	dword ptr [r15], 0x0
1000098b5:	lea	r14, [rip + 0x20014]
1000098bc:	cmp	dword ptr [r14], 0x0
1000098c0:	je	0x1000098dd
1000098c2:	lea	rax, [rip + 0x1fe97]
1000098c9:	mov	rsi, qword ptr [rax]
1000098cc:	mov	edi, 0xa
1000098d1:	call	0x100019704 ## symbol stub for: _fputc
1000098d6:	mov	dword ptr [r14], 0x0
1000098dd:	lea	rax, [rip + 0x1fe30]
1000098e4:	cmp	dword ptr [rax], 0x0
1000098e7:	je	0x100009977
1000098ed:	lea	rax, [rip + 0x1fb68]
1000098f4:	cmp	dword ptr [rax], 0x0
1000098f7:	je	0x100009932
1000098f9:	lea	rax, [rip + 0x21630]
100009900:	mov	rdi, qword ptr [rax]
100009903:	lea	rax, [rip + 0x1ff26]
10000990a:	mov	rdx, qword ptr [rax]
10000990d:	inc	rdx
100009910:	lea	rax, [rip + 0x1ff39]
100009917:	mov	rcx, qword ptr [rax]
10000991a:	inc	rcx
10000991d:	lea	rsi, [rip + 0x183fd] ## literal pool for: "%lu>%lu: "
100009924:	xor	eax, eax
100009926:	call	0x1000196fe ## symbol stub for: _fprintf
10000992b:	mov	dword ptr [r15], 0x1
100009932:	lea	rax, [rip + 0x1fe1f]
100009939:	cmp	dword ptr [rax], 0x0
10000993c:	je	0x100009977
10000993e:	lea	rax, [rip + 0x1fe1b]
100009945:	mov	rdi, qword ptr [rax]
100009948:	lea	rax, [rip + 0x1fee1]
10000994f:	mov	rdx, qword ptr [rax]
100009952:	inc	rdx
100009955:	lea	rax, [rip + 0x1fef4]
10000995c:	mov	rcx, qword ptr [rax]
10000995f:	inc	rcx
100009962:	lea	rsi, [rip + 0x183b8] ## literal pool for: "%lu>%lu: "
100009969:	xor	eax, eax
10000996b:	call	0x1000196fe ## symbol stub for: _fprintf
100009970:	mov	dword ptr [r14], 0x1
100009977:	lea	rax, [rip + 0x1fd8a]
10000997e:	cmp	dword ptr [rax], 0x0
100009981:	je	0x100009a0b
100009987:	lea	rax, [rip + 0x1face]
10000998e:	cmp	dword ptr [rax], 0x0
100009991:	je	0x1000099c9
100009993:	lea	rax, [rip + 0x21596]
10000999a:	mov	rdi, qword ptr [rax]
10000999d:	lea	rax, [rip + 0x1fd7c]
1000099a4:	mov	rdx, qword ptr [rax]
1000099a7:	lea	rax, [rip + 0x1fd82]
1000099ae:	mov	rcx, qword ptr [rax]
1000099b1:	sub	rcx, rdx
1000099b4:	lea	rsi, [rip + 0x18370] ## literal pool for: "%3ld/%3ld "
1000099bb:	xor	eax, eax
1000099bd:	call	0x1000196fe ## symbol stub for: _fprintf
1000099c2:	mov	dword ptr [r15], 0x1
1000099c9:	lea	rax, [rip + 0x1fd88]
1000099d0:	cmp	dword ptr [rax], 0x0
1000099d3:	je	0x100009a0b
1000099d5:	lea	rax, [rip + 0x1fd84]
1000099dc:	mov	rdi, qword ptr [rax]
1000099df:	lea	rax, [rip + 0x1fd3a]
1000099e6:	mov	rdx, qword ptr [rax]
1000099e9:	lea	rax, [rip + 0x1fd40]
1000099f0:	mov	rcx, qword ptr [rax]
1000099f3:	sub	rcx, rdx
1000099f6:	lea	rsi, [rip + 0x1832e] ## literal pool for: "%3ld/%3ld "
1000099fd:	xor	eax, eax
1000099ff:	call	0x1000196fe ## symbol stub for: _fprintf
100009a04:	mov	dword ptr [r14], 0x1
100009a0b:	lea	rax, [rip + 0x1fcfa]
100009a12:	cmp	dword ptr [rax], 0x0
100009a15:	je	0x100009b55
100009a1b:	lea	rbx, [rip + 0x1fd16]
100009a22:	mov	rdi, qword ptr [rbx]
100009a25:	lea	rsi, [rbp - 0x90]
100009a2c:	call	0x100015cf7
100009a31:	lea	r12, [rip + 0x1fa24]
100009a38:	cmp	dword ptr [r12], 0x0
100009a3d:	je	0x100009a65
100009a3f:	lea	rax, [rip + 0x214ea]
100009a46:	mov	rdi, qword ptr [rax]
100009a49:	lea	rsi, [rip + 0x182e6] ## literal pool for: "[%4s"
100009a50:	lea	rdx, [rbp - 0x90]
100009a57:	xor	eax, eax
100009a59:	call	0x1000196fe ## symbol stub for: _fprintf
100009a5e:	mov	dword ptr [r15], 0x1
100009a65:	lea	r15, [rip + 0x1fcec]
100009a6c:	cmp	dword ptr [r15], 0x0
100009a70:	je	0x100009a98
100009a72:	lea	rax, [rip + 0x1fce7]
100009a79:	mov	rdi, qword ptr [rax]
100009a7c:	lea	rsi, [rip + 0x182b3] ## literal pool for: "[%4s"
100009a83:	lea	rdx, [rbp - 0x90]
100009a8a:	xor	eax, eax
100009a8c:	call	0x1000196fe ## symbol stub for: _fprintf
100009a91:	mov	dword ptr [r14], 0x1
100009a98:	lea	rax, [rip + 0x1fcb1]
100009a9f:	mov	rcx, qword ptr [rax]
100009aa2:	mov	rdi, qword ptr [rbx]
100009aa5:	mov	rax, rcx
100009aa8:	sub	rax, rdi
100009aab:	jae	0x100009afb
100009aad:	sub	rdi, rcx
100009ab0:	lea	rsi, [rbp - 0x90]
100009ab7:	call	0x100015cf7
100009abc:	cmp	dword ptr [r12], 0x0
100009ac1:	je	0x100009ae2
100009ac3:	lea	rax, [rip + 0x21466]
100009aca:	mov	rdi, qword ptr [rax]
100009acd:	lea	rsi, [rip + 0x1826e] ## literal pool for: "-%4s] "
100009ad4:	lea	rdx, [rbp - 0x90]
100009adb:	xor	eax, eax
100009add:	call	0x1000196fe ## symbol stub for: _fprintf
100009ae2:	cmp	dword ptr [r15], 0x0
100009ae6:	je	0x100009b55
100009ae8:	lea	rax, [rip + 0x1fc71]
100009aef:	mov	rdi, qword ptr [rax]
100009af2:	lea	rsi, [rip + 0x18249] ## literal pool for: "-%4s] "
100009af9:	jmp	0x100009b47
100009afb:	lea	rsi, [rbp - 0x90]
100009b02:	mov	rdi, rax
100009b05:	call	0x100015cf7
100009b0a:	cmp	dword ptr [r12], 0x0
100009b0f:	je	0x100009b30
100009b11:	lea	rax, [rip + 0x21418]
100009b18:	mov	rdi, qword ptr [rax]
100009b1b:	lea	rsi, [rip + 0x18219] ## literal pool for: "/%4s] "
100009b22:	lea	rdx, [rbp - 0x90]
100009b29:	xor	eax, eax
100009b2b:	call	0x1000196fe ## symbol stub for: _fprintf
100009b30:	cmp	dword ptr [r15], 0x0
100009b34:	je	0x100009b55
100009b36:	lea	rax, [rip + 0x1fc23]
100009b3d:	mov	rdi, qword ptr [rax]
100009b40:	lea	rsi, [rip + 0x181f4] ## literal pool for: "/%4s] "
100009b47:	lea	rdx, [rbp - 0x90]
100009b4e:	xor	eax, eax
100009b50:	call	0x1000196fe ## symbol stub for: _fprintf
100009b55:	lea	rax, [rip + 0x1f900]
100009b5c:	cmp	dword ptr [rax], 0x0
100009b5f:	je	0x100009b70
100009b61:	lea	rax, [rip + 0x213c8]
100009b68:	mov	rdi, qword ptr [rax]
100009b6b:	call	0x1000196e6 ## symbol stub for: _fflush
100009b70:	lea	rax, [rip + 0x1fbe1]
100009b77:	cmp	dword ptr [rax], 0x0
100009b7a:	je	0x100009b8b
100009b7c:	lea	rax, [rip + 0x1fbdd]
100009b83:	mov	rdi, qword ptr [rax]
100009b86:	call	0x1000196e6 ## symbol stub for: _fflush
100009b8b:	mov	rax, qword ptr [rip + 0x1a47e] ## literal pool symbol address: ___stack_chk_guard
100009b92:	mov	rax, qword ptr [rax]
100009b95:	cmp	rax, qword ptr [rbp - 0x28]
100009b99:	jne	0x100009ba8
100009b9b:	add	rsp, 0x70
100009b9f:	pop	rbx
100009ba0:	pop	r12
100009ba2:	pop	r14
100009ba4:	pop	r15
100009ba6:	pop	rbp
100009ba7:	ret
100009ba8:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
100009bad:	nop
100009bae:	nop
100009baf:	nop
100009bb0:	push	rcx
100009bb1:	push	rax
100009bb2:	mov	rcx, qword ptr [rip + 0x1a44f] ## literal pool symbol address: ____chkstk_darwin
100009bb9:	test	rcx, rcx
100009bbc:	jne	0x100009bc5
100009bbe:	lea	rcx, [rip + 0xb]
100009bc5:	call	rcx
100009bc7:	pop	rax
100009bc8:	pop	rcx
100009bc9:	ret
100009bca:	nop	word ptr [rax + rax]
100009bd0:	cmp	rax, 0x1000
100009bd6:	lea	rcx, [rsp + 0x18]
100009bdb:	jb	0x100009bf4
100009bdd:	sub	rcx, 0x1000
100009be4:	test	byte ptr [rcx], cl
100009be6:	sub	rax, 0x1000
100009bec:	cmp	rax, 0x1000
100009bf2:	ja	0x100009bdd
100009bf4:	sub	rcx, rax
100009bf7:	test	byte ptr [rcx], cl
100009bf9:	ret
100009bfa:	push	rbp
100009bfb:	mov	rbp, rsp
100009bfe:	lea	rax, [rip + 0x21343]
100009c05:	mov	rdx, qword ptr [rax]
100009c08:	test	rdx, rdx
100009c0b:	je	0x100009c2d
100009c0d:	lea	rax, [rip + 0x2134c]
100009c14:	mov	rsi, qword ptr [rax]
100009c17:	lea	rcx, [rip + 0x13]
100009c1e:	call	0x100015063
100009c23:	test	rax, rax
100009c26:	je	0x100009c2d
100009c28:	mov	rax, qword ptr [rax]
100009c2b:	jmp	0x100009c2f
100009c2d:	xor	eax, eax
100009c2f:	pop	rbp
100009c30:	ret
100009c31:	push	rbp
100009c32:	mov	rbp, rsp
100009c35:	mov	rsi, qword ptr [rsi + 0x78]
100009c39:	pop	rbp
100009c3a:	jmp	0x100015685
100009c3f:	push	rbp
100009c40:	mov	rbp, rsp
100009c43:	push	r14
100009c45:	push	rbx
100009c46:	mov	r14, rdi
100009c49:	call	0x100019830 ## symbol stub for: _strlen
100009c4e:	lea	rdi, [rax + 0x5]
100009c52:	call	0x100019758 ## symbol stub for: _malloc
100009c57:	mov	rbx, rax
100009c5a:	test	rax, rax
100009c5d:	je	0x100009cb1
100009c5f:	mov	rdi, rbx
100009c62:	mov	rsi, r14
100009c65:	call	0x100019824 ## symbol stub for: _strcpy
100009c6a:	lea	rax, [rip + 0x1fa47]
100009c71:	cmp	dword ptr [rax], 0x0
100009c74:	jne	0x100009cb1
100009c76:	mov	rdi, rbx
100009c79:	mov	esi, 0x2f
100009c7e:	call	0x100019842 ## symbol stub for: _strrchr
100009c83:	lea	rdi, [rax + 0x1]
100009c87:	test	rax, rax
100009c8a:	cmove	rdi, rbx
100009c8e:	mov	esi, 0x2e
100009c93:	call	0x100019842 ## symbol stub for: _strrchr
100009c98:	test	rax, rax
100009c9b:	jne	0x100009cb1
100009c9d:	mov	rdi, rbx
100009ca0:	call	0x100019830 ## symbol stub for: _strlen
100009ca5:	mov	dword ptr [rbx + rax], 0x70697a2e
100009cac:	mov	byte ptr [rbx + rax + 0x4], 0x0
100009cb1:	mov	rax, rbx
100009cb4:	pop	rbx
100009cb5:	pop	r14
100009cb7:	pop	rbp
100009cb8:	ret
100009cb9:	push	rbp
100009cba:	mov	rbp, rsp
100009cbd:	test	rsi, rsi
100009cc0:	je	0x100009ced
100009cc2:	mov	rax, rsi
100009cc5:	mov	ecx, edx
100009cc7:	add	rcx, rsi
100009cca:	add	rcx, -0x4
100009cce:	cmp	rcx, rsi
100009cd1:	jbe	0x100009ced
100009cd3:	movzx	edx, di
100009cd6:	movzx	esi, word ptr [rax]
100009cd9:	cmp	esi, edx
100009cdb:	je	0x100009cef
100009cdd:	movzx	esi, word ptr [rax + 0x2]
100009ce1:	add	rax, rsi
100009ce4:	add	rax, 0x4
100009ce8:	cmp	rax, rcx
100009ceb:	jb	0x100009cd6
100009ced:	xor	eax, eax
100009cef:	pop	rbp
100009cf0:	ret
100009cf1:	push	rbp
100009cf2:	mov	rbp, rsp
100009cf5:	push	r15
100009cf7:	push	r14
100009cf9:	push	r13
100009cfb:	push	r12
100009cfd:	push	rbx
100009cfe:	sub	rsp, 0x38
100009d02:	mov	r12, r8
100009d05:	mov	r13d, ecx
100009d08:	mov	r15, rdx
100009d0b:	test	rdi, rdi
100009d0e:	je	0x100009deb
100009d14:	mov	r14d, esi
100009d17:	mov	rbx, rdi
100009d1a:	mov	edi, 0xffff
100009d1f:	call	0x100019758 ## symbol stub for: _malloc
100009d24:	test	rax, rax
100009d27:	mov	qword ptr [rbp - 0x50], r12
100009d2b:	jne	0x100009d44
100009d2d:	mov	r12, rax
100009d30:	lea	rsi, [rip + 0x18040] ## literal pool for: "extra field copy"
100009d37:	mov	edi, 0x4
100009d3c:	call	0x100002e30
100009d41:	mov	rax, r12
100009d44:	test	r14d, r14d
100009d47:	mov	qword ptr [rbp - 0x38], r15
100009d4b:	je	0x100009e3d
100009d51:	mov	ecx, r14d
100009d54:	add	rcx, rbx
100009d57:	mov	qword ptr [rbp - 0x58], rcx
100009d5b:	test	r15, r15
100009d5e:	sete	cl
100009d61:	mov	qword ptr [rbp - 0x48], r13
100009d65:	mov	edx, r13d
100009d68:	mov	qword ptr [rbp - 0x40], rdx
100009d6c:	lea	r13, [r15 + rdx]
100009d70:	add	r13, -0x4
100009d74:	cmp	r13, r15
100009d77:	setbe	dl
100009d7a:	or	dl, cl
100009d7c:	mov	byte ptr [rbp - 0x29], dl
100009d7f:	xor	r14d, r14d
100009d82:	movzx	r12d, word ptr [rbx + 0x2]
100009d87:	cmp	byte ptr [rbp - 0x29], 0x0
100009d8b:	jne	0x100009dab
100009d8d:	movzx	esi, word ptr [rbx]
100009d90:	mov	rcx, qword ptr [rbp - 0x38]
100009d94:	movzx	edx, word ptr [rcx]
100009d97:	cmp	edx, esi
100009d99:	je	0x100009dd0
100009d9b:	movzx	edx, word ptr [rcx + 0x2]
100009d9f:	add	rcx, rdx
100009da2:	add	rcx, 0x4
100009da6:	cmp	rcx, r13
100009da9:	jb	0x100009d94
100009dab:	movzx	edi, r14w
100009daf:	add	rdi, rax
100009db2:	mov	dword ptr [rbp - 0x30], r14d
100009db6:	lea	r14, [r12 + 0x4]
100009dbb:	mov	r15, rax
100009dbe:	mov	rsi, rbx
100009dc1:	mov	rdx, r14
100009dc4:	call	0x10001975e ## symbol stub for: _memcpy
100009dc9:	mov	rax, r15
100009dcc:	add	r14d, dword ptr [rbp - 0x30]
100009dd0:	movzx	ecx, r12w
100009dd4:	add	rbx, rcx
100009dd7:	add	rbx, 0x4
100009ddb:	cmp	rbx, qword ptr [rbp - 0x58]
100009ddf:	jb	0x100009d82
100009de1:	mov	r13, qword ptr [rbp - 0x48]
100009de5:	mov	rdx, qword ptr [rbp - 0x40]
100009de9:	jmp	0x100009e43
100009deb:	xor	r14d, r14d
100009dee:	test	r15, r15
100009df1:	je	0x100009eae
100009df7:	mov	ebx, 0x0
100009dfc:	test	r13d, r13d
100009dff:	je	0x100009e98
100009e05:	mov	r14d, r13d
100009e08:	mov	rdi, r14
100009e0b:	call	0x100019758 ## symbol stub for: _malloc
100009e10:	mov	rbx, rax
100009e13:	test	rax, rax
100009e16:	jne	0x100009e29
100009e18:	lea	rsi, [rip + 0x17f58] ## literal pool for: "extra field copy"
100009e1f:	mov	edi, 0x4
100009e24:	call	0x100002e30
100009e29:	mov	rdi, rbx
100009e2c:	mov	rsi, r15
100009e2f:	mov	rdx, r14
100009e32:	call	0x10001975e ## symbol stub for: _memcpy
100009e37:	movzx	r14d, r13w
100009e3b:	jmp	0x100009e98
100009e3d:	mov	edx, r13d
100009e40:	xor	r14d, r14d
100009e43:	movzx	edi, r14w
100009e47:	add	rdi, rax
100009e4a:	mov	r12, rax
100009e4d:	mov	rsi, qword ptr [rbp - 0x38]
100009e51:	call	0x10001975e ## symbol stub for: _memcpy
100009e56:	add	r13d, r14d
100009e59:	movzx	r14d, r13w
100009e5d:	mov	rdi, r14
100009e60:	call	0x100019758 ## symbol stub for: _malloc
100009e65:	mov	rbx, rax
100009e68:	test	rax, rax
100009e6b:	jne	0x100009e7e
100009e6d:	lea	rsi, [rip + 0x17f03] ## literal pool for: "extra field copy"
100009e74:	mov	edi, 0x4
100009e79:	call	0x100002e30
100009e7e:	mov	rdi, rbx
100009e81:	mov	rsi, r12
100009e84:	mov	rdx, r14
100009e87:	call	0x10001975e ## symbol stub for: _memcpy
100009e8c:	mov	rdi, r12
100009e8f:	call	0x100019716 ## symbol stub for: _free
100009e94:	mov	r12, qword ptr [rbp - 0x50]
100009e98:	mov	dword ptr [r12], r14d
100009e9c:	mov	rax, rbx
100009e9f:	add	rsp, 0x38
100009ea3:	pop	rbx
100009ea4:	pop	r12
100009ea6:	pop	r13
100009ea8:	pop	r14
100009eaa:	pop	r15
100009eac:	pop	rbp
100009ead:	ret
100009eae:	xor	ebx, ebx
100009eb0:	jmp	0x100009e98
100009eb2:	push	rbp
100009eb3:	mov	rbp, rsp
100009eb6:	push	r15
100009eb8:	push	r14
100009eba:	push	rbx
100009ebb:	push	rax
100009ebc:	mov	rbx, rdi
100009ebf:	xor	esi, esi
100009ec1:	mov	edx, 0x2
100009ec6:	call	0x10001971c ## symbol stub for: _fseeko
100009ecb:	mov	r14, -0x1
100009ed2:	test	eax, eax
100009ed4:	je	0x100009eec
100009ed6:	mov	rdi, rbx
100009ed9:	call	0x1000197e2 ## symbol stub for: _rewind
100009ede:	mov	rax, r14
100009ee1:	add	rsp, 0x8
100009ee5:	pop	rbx
100009ee6:	pop	r14
100009ee8:	pop	r15
100009eea:	pop	rbp
100009eeb:	ret
100009eec:	mov	rdi, rbx
100009eef:	call	0x100019728 ## symbol stub for: _ftello
100009ef4:	test	rax, rax
100009ef7:	js	0x100009ed6
100009ef9:	mov	r15, rax
100009efc:	mov	rdi, rbx
100009eff:	mov	rsi, rax
100009f02:	xor	edx, edx
100009f04:	call	0x10001971c ## symbol stub for: _fseeko
100009f09:	test	eax, eax
100009f0b:	jne	0x100009ed6
100009f0d:	lea	rdi, [rbp - 0x1c]
100009f11:	mov	esi, 0x1
100009f16:	mov	edx, 0x1
100009f1b:	mov	rcx, rbx
100009f1e:	call	0x100019710 ## symbol stub for: _fread
100009f23:	mov	rdi, rbx
100009f26:	call	0x1000196da ## symbol stub for: _feof
100009f2b:	xor	r14d, r14d
100009f2e:	cmp	eax, 0x1
100009f31:	sbb	r14, r14
100009f34:	or	r14, r15
100009f37:	jmp	0x100009ed6
100009f39:	push	rbp
100009f3a:	mov	rbp, rsp
100009f3d:	push	r15
100009f3f:	push	r14
100009f41:	push	r13
100009f43:	push	r12
100009f45:	push	rbx
100009f46:	sub	rsp, 0x48
100009f4a:	mov	r13, rsi
100009f4d:	mov	qword ptr [rbp - 0x68], rdi
100009f51:	mov	rax, qword ptr [rip + 0x1a0b8] ## literal pool symbol address: ___stack_chk_guard
100009f58:	mov	rax, qword ptr [rax]
100009f5b:	mov	qword ptr [rbp - 0x30], rax
100009f5f:	mov	r15, qword ptr [rsi + 0x30]
100009f63:	lea	rbx, [rip + 0x1f8c6]
100009f6a:	lea	r14, [rip + 0x1f88f]
100009f71:	cmp	r15, qword ptr [rbx]
100009f74:	je	0x100009f8a
100009f76:	mov	rdi, qword ptr [r14]
100009f79:	test	rdi, rdi
100009f7c:	je	0x100009f8a
100009f7e:	call	0x1000196ce ## symbol stub for: _fclose
100009f83:	mov	qword ptr [r14], 0x0
100009f8a:	mov	qword ptr [rbx], r15
100009f8d:	lea	r12, [rip + 0x1f874]
100009f94:	mov	rdi, qword ptr [r12]
100009f98:	mov	rsi, r15
100009f9b:	call	0x1000127e1
100009fa0:	mov	rbx, rax
100009fa3:	mov	rax, qword ptr [r14]
100009fa6:	test	rax, rax
100009fa9:	jne	0x10000a00b
100009fab:	lea	rsi, [rip + 0x11ffe] ## literal pool for: "r"
100009fb2:	mov	rdi, rbx
100009fb5:	call	0x1000196f8 ## symbol stub for: _fopen
100009fba:	mov	qword ptr [r14], rax
100009fbd:	test	rax, rax
100009fc0:	jne	0x10000a00b
100009fc2:	mov	qword ptr [rbp - 0x58], r13
100009fc6:	lea	r13, [rip + 0x11fe3] ## literal pool for: "r"
100009fcd:	mov	rdi, r15
100009fd0:	call	0x1000128e3
100009fd5:	test	eax, eax
100009fd7:	jne	0x10000a2c3
100009fdd:	mov	rdi, rbx
100009fe0:	call	0x100019716 ## symbol stub for: _free
100009fe5:	mov	rdi, qword ptr [r12]
100009fe9:	mov	rsi, r15
100009fec:	call	0x1000127e1
100009ff1:	mov	rbx, rax
100009ff4:	mov	rdi, rax
100009ff7:	mov	rsi, r13
100009ffa:	call	0x1000196f8 ## symbol stub for: _fopen
100009fff:	mov	qword ptr [r14], rax
10000a002:	test	rax, rax
10000a005:	je	0x100009fcd
10000a007:	mov	r13, qword ptr [rbp - 0x58]
10000a00b:	mov	rsi, qword ptr [r13 + 0x40]
10000a00f:	mov	rdi, rax
10000a012:	xor	edx, edx
10000a014:	call	0x10001971c ## symbol stub for: _fseeko
10000a019:	mov	rdi, qword ptr [r14]
10000a01c:	test	eax, eax
10000a01e:	je	0x10000a071
10000a020:	call	0x1000196ce ## symbol stub for: _fclose
10000a025:	mov	qword ptr [r14], 0x0
10000a02c:	call	0x100019674 ## symbol stub for: ___error
10000a031:	mov	edi, dword ptr [rax]
10000a033:	call	0x10001982a ## symbol stub for: _strerror
10000a038:	lea	rdi, [rip + 0x17d49] ## literal pool for: "reading archive fseek: "
10000a03f:	mov	rsi, rax
10000a042:	call	0x1000034f4
10000a047:	mov	ebx, 0xb
10000a04c:	mov	rax, qword ptr [rip + 0x19fbd] ## literal pool symbol address: ___stack_chk_guard
10000a053:	mov	rax, qword ptr [rax]
10000a056:	cmp	rax, qword ptr [rbp - 0x30]
10000a05a:	jne	0x10000a30c
10000a060:	mov	eax, ebx
10000a062:	add	rsp, 0x48
10000a066:	pop	rbx
10000a067:	pop	r12
10000a069:	pop	r13
10000a06b:	pop	r14
10000a06d:	pop	r15
10000a06f:	pop	rbp
10000a070:	ret
10000a071:	lea	rsi, [rip + 0x17d28] ## literal pool for: "PK\003\004"
10000a078:	call	0x10000a311
10000a07d:	mov	rcx, qword ptr [r14]
10000a080:	test	eax, eax
10000a082:	je	0x10000a25b
10000a088:	lea	rdi, [rbp - 0x50]
10000a08c:	mov	esi, 0x1a
10000a091:	mov	edx, 0x1
10000a096:	call	0x100019710 ## symbol stub for: _fread
10000a09b:	cmp	rax, 0x1
10000a09f:	jne	0x10000a284
10000a0a5:	mov	edi, 0xa0
10000a0aa:	call	0x100019758 ## symbol stub for: _malloc
10000a0af:	test	rax, rax
10000a0b2:	je	0x10000a2cd
10000a0b8:	mov	r15, rax
10000a0bb:	mov	qword ptr [rbp - 0x58], r13
10000a0bf:	movzx	eax, word ptr [rbp - 0x50]
10000a0c3:	mov	word ptr [r15 + 0x2], ax
10000a0c8:	movzx	eax, word ptr [rbp - 0x4e]
10000a0cc:	mov	word ptr [r15 + 0x3a], ax
10000a0d1:	movzx	eax, word ptr [rbp - 0x4c]
10000a0d5:	mov	word ptr [r15 + 0x6], ax
10000a0da:	mov	eax, dword ptr [rbp - 0x4a]
10000a0dd:	mov	qword ptr [r15 + 0x8], rax
10000a0e1:	mov	eax, dword ptr [rbp - 0x46]
10000a0e4:	mov	qword ptr [r15 + 0x10], rax
10000a0e8:	movzx	eax, word ptr [rbp - 0x3a]
10000a0ec:	mov	word ptr [r15 + 0x28], ax
10000a0f1:	movzx	ecx, word ptr [rbp - 0x38]
10000a0f5:	mov	r12, rcx
10000a0f8:	mov	word ptr [r15 + 0x2a], cx
10000a0fd:	mov	qword ptr [rbp - 0x60], rax
10000a101:	lea	rdi, [rax + 0x1]
10000a105:	xorps	xmm0, xmm0
10000a108:	movups	xmmword ptr [r15 + 0x50], xmm0
10000a10d:	movups	xmmword ptr [r15 + 0x78], xmm0
10000a112:	call	0x100019758 ## symbol stub for: _malloc
10000a117:	mov	qword ptr [r15 + 0x70], rax
10000a11b:	mov	ebx, 0x4
10000a120:	test	rax, rax
10000a123:	je	0x10000a04c
10000a129:	mov	r13, rax
10000a12c:	test	r12w, r12w
10000a130:	je	0x10000a147
10000a132:	mov	rdi, r12
10000a135:	call	0x100019758 ## symbol stub for: _malloc
10000a13a:	mov	qword ptr [r15 + 0x58], rax
10000a13e:	test	rax, rax
10000a141:	je	0x10000a04c
10000a147:	mov	rcx, qword ptr [r14]
10000a14a:	mov	edx, 0x1
10000a14f:	mov	rdi, r13
10000a152:	mov	rsi, qword ptr [rbp - 0x60]
10000a156:	call	0x100019710 ## symbol stub for: _fread
10000a15b:	cmp	rax, 0x1
10000a15f:	jne	0x10000a2f2
10000a165:	movzx	esi, word ptr [r15 + 0x2a]
10000a16a:	test	rsi, rsi
10000a16d:	je	0x10000a18a
10000a16f:	mov	rdi, qword ptr [r15 + 0x58]
10000a173:	mov	rcx, qword ptr [r14]
10000a176:	mov	edx, 0x1
10000a17b:	call	0x100019710 ## symbol stub for: _fread
10000a180:	cmp	rax, 0x1
10000a184:	jne	0x10000a2f2
10000a18a:	mov	rax, qword ptr [r15 + 0x70]
10000a18e:	mov	r14, qword ptr [rbp - 0x58]
10000a192:	movzx	ecx, word ptr [r14 + 0x28]
10000a197:	mov	byte ptr [rax + rcx], 0x0
10000a19b:	movzx	edi, word ptr [r15 + 0x28]
10000a1a0:	inc	rdi
10000a1a3:	call	0x100019758 ## symbol stub for: _malloc
10000a1a8:	mov	qword ptr [r15 + 0x50], rax
10000a1ac:	test	rax, rax
10000a1af:	je	0x10000a04c
10000a1b5:	mov	rsi, qword ptr [r15 + 0x70]
10000a1b9:	mov	rdi, rax
10000a1bc:	call	0x100019824 ## symbol stub for: _strcpy
10000a1c1:	mov	rdi, r15
10000a1c4:	call	0x10000a384
10000a1c9:	lea	rcx, [rip + 0x1f5d0]
10000a1d0:	mov	dword ptr [rcx], eax
10000a1d2:	movzx	r8d, word ptr [r15 + 0x2]
10000a1d7:	movzx	r9d, word ptr [r14 + 0x2]
10000a1dc:	cmp	r8w, r9w
10000a1e0:	je	0x10000a20d
10000a1e2:	lea	rbx, [rip + 0x1f947]
10000a1e9:	lea	rcx, [rip + 0x17bf1] ## literal pool for: "Local Version Needed (%d) does not match CD (%d): "
10000a1f0:	mov	edx, 0x13f1
10000a1f5:	mov	rdi, rbx
10000a1f8:	xor	esi, esi
10000a1fa:	xor	eax, eax
10000a1fc:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000a201:	mov	rsi, qword ptr [r14 + 0x70]
10000a205:	mov	rdi, rbx
10000a208:	call	0x1000034f4
10000a20d:	movzx	eax, word ptr [r15 + 0x3a]
10000a212:	cmp	ax, word ptr [r14 + 0x4]
10000a217:	je	0x10000a229
10000a219:	mov	rsi, qword ptr [r14 + 0x70]
10000a21d:	lea	rdi, [rip + 0x17bf0] ## literal pool for: "Local Entry Flag does not match CD: "
10000a224:	call	0x1000034f4
10000a229:	mov	rax, qword ptr [r15 + 0x10]
10000a22d:	cmp	rax, qword ptr [r14 + 0x10]
10000a231:	je	0x10000a243
10000a233:	mov	rsi, qword ptr [r14 + 0x70]
10000a237:	lea	rdi, [rip + 0x17bfb] ## literal pool for: "Local Entry CRC does not match CD: "
10000a23e:	call	0x1000034f4
10000a243:	movups	xmm0, xmmword ptr [r14 + 0x18]
10000a248:	movups	xmmword ptr [r15 + 0x18], xmm0
10000a24d:	mov	rax, qword ptr [rbp - 0x68]
10000a251:	mov	qword ptr [rax], r15
10000a254:	xor	ebx, ebx
10000a256:	jmp	0x10000a04c
10000a25b:	mov	rdi, rcx
10000a25e:	call	0x1000196ce ## symbol stub for: _fclose
10000a263:	mov	qword ptr [r14], 0x0
10000a26a:	mov	rsi, qword ptr [r13 + 0x70]
10000a26e:	lea	rdi, [rip + 0x17b30] ## literal pool for: "Did not find entry for "
10000a275:	call	0x1000034f4
10000a27a:	mov	ebx, 0x3
10000a27f:	jmp	0x10000a04c
10000a284:	mov	rdi, qword ptr [r14]
10000a287:	call	0x1000196e0 ## symbol stub for: _ferror
10000a28c:	mov	ebx, eax
10000a28e:	call	0x100019674 ## symbol stub for: ___error
10000a293:	mov	edi, dword ptr [rax]
10000a295:	call	0x10001982a ## symbol stub for: _strerror
10000a29a:	lea	rdi, [rip + 0x17b1c] ## literal pool for: "reading local entry: "
10000a2a1:	mov	rsi, rax
10000a2a4:	call	0x1000034f4
10000a2a9:	mov	rdi, qword ptr [r14]
10000a2ac:	call	0x1000196ce ## symbol stub for: _fclose
10000a2b1:	xor	eax, eax
10000a2b3:	test	ebx, ebx
10000a2b5:	setne	al
10000a2b8:	lea	ebx, [rax + 8*rax]
10000a2bb:	add	ebx, 0x2
10000a2be:	jmp	0x10000a04c
10000a2c3:	mov	ebx, 0x9
10000a2c8:	jmp	0x10000a04c
10000a2cd:	lea	rdi, [rip + 0x17aff] ## literal pool for: "reading entry"
10000a2d4:	lea	rsi, [rip + 0x104dc] ## literal pool for: ""
10000a2db:	call	0x1000034f4
10000a2e0:	mov	rdi, qword ptr [r14]
10000a2e3:	call	0x1000196ce ## symbol stub for: _fclose
10000a2e8:	mov	ebx, 0x4
10000a2ed:	jmp	0x10000a04c
10000a2f2:	mov	rdi, qword ptr [r14]
10000a2f5:	call	0x1000196e0 ## symbol stub for: _ferror
10000a2fa:	xor	ecx, ecx
10000a2fc:	test	eax, eax
10000a2fe:	setne	cl
10000a301:	lea	ebx, [rcx + 8*rcx]
10000a304:	add	ebx, 0x2
10000a307:	jmp	0x10000a04c
10000a30c:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
10000a311:	push	rbp
10000a312:	mov	rbp, rsp
10000a315:	push	rbx
10000a316:	push	rax
10000a317:	mov	rcx, rdi
10000a31a:	mov	ebx, dword ptr [rsi]
10000a31c:	mov	dword ptr [rbp - 0xc], ebx
10000a31f:	cmp	bl, 0x50
10000a322:	jne	0x10000a328
10000a324:	mov	byte ptr [rbp - 0xc], 0x50
10000a328:	cmp	byte ptr [rbp - 0xb], 0x4b
10000a32c:	jne	0x10000a332
10000a32e:	mov	byte ptr [rbp - 0xb], 0x4b
10000a332:	lea	rdi, [rbp - 0x10]
10000a336:	mov	esi, 0x1
10000a33b:	mov	edx, 0x4
10000a340:	call	0x100019710 ## symbol stub for: _fread
10000a345:	mov	rcx, rax
10000a348:	xor	eax, eax
10000a34a:	cmp	rcx, 0x4
10000a34e:	jne	0x10000a37d
10000a350:	cmp	bl, byte ptr [rbp - 0x10]
10000a353:	jne	0x10000a37d
10000a355:	xor	eax, eax
10000a357:	cmp	rax, 0x3
10000a35b:	je	0x10000a378
10000a35d:	lea	rcx, [rax + 0x1]
10000a361:	mov	dl, byte ptr [rbp + rax - 0xb]
10000a365:	cmp	dl, byte ptr [rbp + rax - 0xf]
10000a369:	mov	rax, rcx
10000a36c:	je	0x10000a357
10000a36e:	xor	eax, eax
10000a370:	cmp	ecx, 0x4
10000a373:	sete	al
10000a376:	jmp	0x10000a37d
10000a378:	mov	eax, 0x1
10000a37d:	add	rsp, 0x8
10000a381:	pop	rbx
10000a382:	pop	rbp
10000a383:	ret
10000a384:	push	rbp
10000a385:	mov	rbp, rsp
10000a388:	lea	r8, [rip + 0x1f411]
10000a38f:	mov	dword ptr [r8], 0x0
10000a396:	mov	rcx, qword ptr [rdi + 0x58]
10000a39a:	xor	eax, eax
10000a39c:	test	rcx, rcx
10000a39f:	je	0x10000a3ff
10000a3a1:	movzx	esi, word ptr [rdi + 0x2a]
10000a3a5:	add	rsi, rcx
10000a3a8:	add	rsi, -0x4
10000a3ac:	cmp	rsi, rcx
10000a3af:	jbe	0x10000a3ff
10000a3b1:	cmp	word ptr [rcx], 0x1
10000a3b5:	je	0x10000a3c9
10000a3b7:	movzx	edx, word ptr [rcx + 0x2]
10000a3bb:	add	rcx, rdx
10000a3be:	add	rcx, 0x4
10000a3c2:	cmp	rcx, rsi
10000a3c5:	jb	0x10000a3b1
10000a3c7:	jmp	0x10000a3ff
10000a3c9:	mov	dword ptr [r8], 0x1
10000a3d0:	mov	edx, 0xffffffff
10000a3d5:	cmp	qword ptr [rdi + 0x20], rdx
10000a3d9:	jne	0x10000a3e9
10000a3db:	mov	rax, qword ptr [rcx + 0x4]
10000a3df:	mov	qword ptr [rdi + 0x20], rax
10000a3e3:	add	rcx, 0xc
10000a3e7:	jmp	0x10000a3ed
10000a3e9:	add	rcx, 0x4
10000a3ed:	mov	eax, 0x1
10000a3f2:	cmp	qword ptr [rdi + 0x18], rdx
10000a3f6:	jne	0x10000a3ff
10000a3f8:	mov	rcx, qword ptr [rcx]
10000a3fb:	mov	qword ptr [rdi + 0x18], rcx
10000a3ff:	pop	rbp
10000a400:	ret
10000a401:	push	rbp
10000a402:	mov	rbp, rsp
10000a405:	push	r15
10000a407:	push	r14
10000a409:	push	r13
10000a40b:	push	r12
10000a40d:	push	rbx
10000a40e:	sub	rsp, 0xc8
10000a415:	mov	rax, qword ptr [rip + 0x19bf4] ## literal pool symbol address: ___stack_chk_guard
10000a41c:	mov	rax, qword ptr [rax]
10000a41f:	mov	qword ptr [rbp - 0x30], rax
10000a423:	lea	rcx, [rip + 0x20b26]
10000a42a:	xor	eax, eax
10000a42c:	mov	qword ptr [rcx], rax
10000a42f:	lea	rcx, [rip + 0x1f4a2]
10000a436:	mov	qword ptr [rcx], rax
10000a439:	lea	rcx, [rip + 0x20b08]
10000a440:	mov	qword ptr [rcx], rax
10000a443:	lea	r14, [rip + 0x20af6]
10000a44a:	mov	word ptr [r14], 0x0
10000a450:	lea	r15, [rip + 0x1f489]
10000a457:	mov	dword ptr [r15], 0x0
10000a45e:	lea	r13, [rip + 0x20af3]
10000a465:	mov	rbx, qword ptr [r13]
10000a469:	test	rbx, rbx
10000a46c:	je	0x10000a4a6
10000a46e:	cmp	byte ptr [rbx], 0x0
10000a471:	je	0x10000a4a6
10000a473:	lea	rsi, [rip + 0x12088] ## literal pool for: "-"
10000a47a:	mov	rdi, rbx
10000a47d:	call	0x10001981e ## symbol stub for: _strcmp
10000a482:	test	eax, eax
10000a484:	je	0x10000a4a6
10000a486:	lea	rsi, [rip + 0x11b23] ## literal pool for: "r"
10000a48d:	mov	rdi, rbx
10000a490:	call	0x1000196f8 ## symbol stub for: _fopen
10000a495:	test	rax, rax
10000a498:	je	0x10000a4a6
10000a49a:	mov	dword ptr [r15], 0x1
10000a4a1:	mov	r12b, 0x1
10000a4a4:	jmp	0x10000a510
10000a4a6:	lea	rax, [rip + 0x1f2df]
10000a4ad:	cmp	dword ptr [rax], 0x0
10000a4b0:	lea	rax, [rip + 0x1f1f9]
10000a4b7:	mov	ebx, dword ptr [rax]
10000a4b9:	jne	0x10000a559
10000a4bf:	cmp	ebx, 0x2
10000a4c2:	je	0x10000a559
10000a4c8:	lea	rax, [rip + 0x1f339]
10000a4cf:	mov	rdi, qword ptr [rax]
10000a4d2:	lea	rax, [rip + 0x1f33f]
10000a4d9:	mov	rsi, qword ptr [rax]
10000a4dc:	call	0x10001981e ## symbol stub for: _strcmp
10000a4e1:	test	eax, eax
10000a4e3:	je	0x10000a50b
10000a4e5:	cmp	ebx, 0x1
10000a4e8:	jne	0x10000a4fd
10000a4ea:	lea	rdi, [rip + 0x1796c] ## literal pool for: "No .zip file found\n        "
10000a4f1:	lea	rsi, [rip + 0x17981] ## literal pool for: "(If all you have are splits (.z01, .z02, ...) and no .zip, try -FF)"
10000a4f8:	call	0x1000034f4
10000a4fd:	mov	rsi, qword ptr [r13]
10000a501:	mov	edi, 0x12
10000a506:	call	0x100002e30
10000a50b:	xor	r12d, r12d
10000a50e:	xor	eax, eax
10000a510:	lea	rbx, [rip + 0x1f199]
10000a517:	cmp	dword ptr [rbx], 0x2
10000a51a:	je	0x10000a565
10000a51c:	test	r12b, r12b
10000a51f:	mov	r12d, 0x0
10000a525:	je	0x10000a5fb
10000a52b:	mov	rdi, rax
10000a52e:	call	0x1000196ce ## symbol stub for: _fclose
10000a533:	cmp	dword ptr [rbx], 0x2
10000a536:	lea	rax, [rip + 0x1f17b]
10000a53d:	jne	0x10000a624
10000a543:	cmp	dword ptr [rax], 0x0
10000a546:	jne	0x10000a624
10000a54c:	mov	r12b, 0x1
10000a54f:	call	0x10000bca0
10000a554:	mov	r14d, eax
10000a557:	jmp	0x10000a56d
10000a559:	xor	r12d, r12d
10000a55c:	cmp	ebx, 0x2
10000a55f:	jne	0x10000a5fb
10000a565:	call	0x10000bca0
10000a56a:	xor	r14d, r14d
10000a56d:	test	r12b, r12b
10000a570:	je	0x10000a5f8
10000a576:	lea	rax, [rip + 0x1f133]
10000a57d:	cmp	dword ptr [rax], 0x2
10000a580:	je	0x10000a5f8
10000a582:	lea	rax, [rip + 0x209bf]
10000a589:	mov	r15, qword ptr [rax]
10000a58c:	test	r15, r15
10000a58f:	je	0x10000a5f8
10000a591:	mov	rax, r15
10000a594:	shr	rax, 0x3d
10000a598:	mov	r12d, 0x4
10000a59e:	jne	0x10000a5fb
10000a5a0:	lea	rdi, [8*r15]
10000a5a8:	call	0x100019758 ## symbol stub for: _malloc
10000a5ad:	lea	rcx, [rip + 0x209ac]
10000a5b4:	mov	qword ptr [rcx], rax
10000a5b7:	test	rax, rax
10000a5ba:	je	0x10000a5fb
10000a5bc:	lea	rcx, [rip + 0x1f315]
10000a5c3:	mov	rcx, qword ptr [rcx]
10000a5c6:	test	rcx, rcx
10000a5c9:	je	0x10000a5e1
10000a5cb:	mov	rdx, rax
10000a5ce:	mov	qword ptr [rdx], rcx
10000a5d1:	add	rdx, 0x8
10000a5d5:	mov	rcx, qword ptr [rcx + 0x98]
10000a5dc:	test	rcx, rcx
10000a5df:	jne	0x10000a5ce
10000a5e1:	lea	rcx, [rip + 0x2a90]
10000a5e8:	mov	edx, 0x8
10000a5ed:	mov	rdi, rax
10000a5f0:	mov	rsi, r15
10000a5f3:	call	0x1000197b8 ## symbol stub for: _qsort
10000a5f8:	mov	r12d, r14d
10000a5fb:	mov	rax, qword ptr [rip + 0x19a0e] ## literal pool symbol address: ___stack_chk_guard
10000a602:	mov	rax, qword ptr [rax]
10000a605:	cmp	rax, qword ptr [rbp - 0x30]
10000a609:	jne	0x10000b11a
10000a60f:	mov	eax, r12d
10000a612:	add	rsp, 0xc8
10000a619:	pop	rbx
10000a61a:	pop	r12
10000a61c:	pop	r13
10000a61e:	pop	r14
10000a620:	pop	r15
10000a622:	pop	rbp
10000a623:	ret
10000a624:	lea	r15, [rip + 0x1f1dd]
10000a62b:	mov	rdi, qword ptr [r15]
10000a62e:	lea	rsi, [rip + 0x1197b] ## literal pool for: "r"
10000a635:	call	0x1000196f8 ## symbol stub for: _fopen
10000a63a:	lea	r12, [rip + 0x1f1bf]
10000a641:	mov	qword ptr [r12], rax
10000a645:	test	rax, rax
10000a648:	je	0x10000a68c
10000a64a:	mov	rdi, rax
10000a64d:	mov	rsi, -0x20000
10000a654:	mov	edx, 0x2
10000a659:	call	0x10001971c ## symbol stub for: _fseeko
10000a65e:	test	eax, eax
10000a660:	je	0x10000a6a6
10000a662:	mov	rdi, qword ptr [r12]
10000a666:	xor	esi, esi
10000a668:	xor	edx, edx
10000a66a:	call	0x10001971c ## symbol stub for: _fseeko
10000a66f:	test	eax, eax
10000a671:	je	0x10000a6b5
10000a673:	mov	rdi, qword ptr [r12]
10000a677:	call	0x1000196ce ## symbol stub for: _fclose
10000a67c:	mov	qword ptr [r12], 0x0
10000a684:	mov	rsi, qword ptr [r15]
10000a687:	jmp	0x10000a744
10000a68c:	mov	rsi, qword ptr [r15]
10000a68f:	lea	rdi, [rip + 0x182c4] ## literal pool for: "could not open input archive"
10000a696:	call	0x1000034f4
10000a69b:	mov	r14d, 0x12
10000a6a1:	jmp	0x10000a9bd
10000a6a6:	mov	rdi, qword ptr [r12]
10000a6aa:	call	0x100019728 ## symbol stub for: _ftello
10000a6af:	cmp	rax, -0x1
10000a6b3:	je	0x10000a662
10000a6b5:	mov	rdi, qword ptr [r12]
10000a6b9:	lea	rsi, [rip + 0x17c19] ## literal pool for: "PK\005\006"
10000a6c0:	call	0x10000f1b1
10000a6c5:	mov	rdi, qword ptr [r12]
10000a6c9:	test	eax, eax
10000a6cb:	je	0x10000a75b
10000a6d1:	call	0x100019728 ## symbol stub for: _ftello
10000a6d6:	mov	r15, rax
10000a6d9:	mov	rdi, qword ptr [r12]
10000a6dd:	lea	rsi, [rip + 0x17bf5] ## literal pool for: "PK\005\006"
10000a6e4:	call	0x10000f1b1
10000a6e9:	test	eax, eax
10000a6eb:	je	0x10000a710
10000a6ed:	lea	rbx, [rip + 0x17be5] ## literal pool for: "PK\005\006"
10000a6f4:	mov	rdi, qword ptr [r12]
10000a6f8:	call	0x100019728 ## symbol stub for: _ftello
10000a6fd:	mov	r15, rax
10000a700:	mov	rdi, qword ptr [r12]
10000a704:	mov	rsi, rbx
10000a707:	call	0x10000f1b1
10000a70c:	test	eax, eax
10000a70e:	jne	0x10000a6f4
10000a710:	mov	rdi, qword ptr [r12]
10000a714:	mov	rsi, r15
10000a717:	xor	edx, edx
10000a719:	call	0x10001971c ## symbol stub for: _fseeko
10000a71e:	mov	rcx, qword ptr [r12]
10000a722:	test	eax, eax
10000a724:	je	0x10000a7b1
10000a72a:	mov	rdi, rcx
10000a72d:	call	0x1000196ce ## symbol stub for: _fclose
10000a732:	mov	qword ptr [r12], 0x0
10000a73a:	lea	rax, [rip + 0x1f0c7]
10000a741:	mov	rsi, qword ptr [rax]
10000a744:	lea	rdi, [rip + 0x17b70] ## literal pool for: "unable to seek in input file "
10000a74b:	call	0x1000034f4
10000a750:	mov	r14d, 0xb
10000a756:	jmp	0x10000a9bd
10000a75b:	call	0x1000196ce ## symbol stub for: _fclose
10000a760:	mov	qword ptr [r12], 0x0
10000a768:	cmp	dword ptr [rbx], 0x1
10000a76b:	jne	0x10000a983
10000a771:	lea	rdi, [rip + 0x181ff] ## literal pool for: "bad archive - missing end signature"
10000a778:	lea	rbx, [rip + 0x10038] ## literal pool for: ""
10000a77f:	mov	rsi, rbx
10000a782:	call	0x1000034f4
10000a787:	lea	rdi, [rip + 0x1820d] ## literal pool for: "(If downloaded, was binary mode used?  If not, the"
10000a78e:	mov	rsi, rbx
10000a791:	call	0x1000034f4
10000a796:	lea	rdi, [rip + 0x18231] ## literal pool for: " archive may be scrambled and not recoverable)"
10000a79d:	mov	rsi, rbx
10000a7a0:	call	0x1000034f4
10000a7a5:	lea	rdi, [rip + 0x18251] ## literal pool for: "Can't use -F to fix (try -FF)"
10000a7ac:	jmp	0x10000a9af
10000a7b1:	lea	rbx, [rbp - 0x70]
10000a7b5:	mov	esi, 0x1
10000a7ba:	mov	edx, 0x12
10000a7bf:	mov	rdi, rbx
10000a7c2:	call	0x100019710 ## symbol stub for: _fread
10000a7c7:	movzx	eax, word ptr [rbx]
10000a7ca:	lea	rcx, [rax + 0x1]
10000a7ce:	lea	rdx, [rip + 0x1f053]
10000a7d5:	mov	qword ptr [rdx], rcx
10000a7d8:	lea	rcx, [rip + 0x1f051]
10000a7df:	mov	qword ptr [rcx], rax
10000a7e2:	movzx	eax, word ptr [rbx + 0x2]
10000a7e6:	mov	qword ptr [rbp - 0xb0], rax
10000a7ed:	mov	eax, dword ptr [rbx + 0x8]
10000a7f0:	mov	qword ptr [rbp - 0xa8], rax
10000a7f7:	mov	eax, dword ptr [rbx + 0xc]
10000a7fa:	mov	qword ptr [rbp - 0xb8], rax
10000a801:	movzx	eax, word ptr [rbx + 0x6]
10000a805:	movzx	ebx, word ptr [rbx + 0x10]
10000a809:	mov	word ptr [r14], bx
10000a80d:	test	bx, bx
10000a810:	mov	qword ptr [rbp - 0xc0], rax
10000a817:	je	0x10000a86c
10000a819:	lea	rdi, [rbx + 0x1]
10000a81d:	call	0x100019758 ## symbol stub for: _malloc
10000a822:	lea	rcx, [rip + 0x1f0bf]
10000a829:	mov	qword ptr [rcx], rax
10000a82c:	test	rax, rax
10000a82f:	je	0x10000bbe4
10000a835:	mov	rcx, qword ptr [r12]
10000a839:	mov	edx, 0x1
10000a83e:	mov	rdi, rax
10000a841:	mov	rsi, rbx
10000a844:	call	0x100019710 ## symbol stub for: _fread
10000a849:	lea	rbx, [rip + 0x1f098]
10000a850:	mov	rdi, qword ptr [rbx]
10000a853:	cmp	rax, 0x1
10000a857:	jne	0x10000a9db
10000a85d:	movzx	eax, word ptr [r14]
10000a861:	mov	byte ptr [rdi + rax], 0x0
10000a865:	mov	rax, qword ptr [rbp - 0xc0]
10000a86c:	test	rax, rax
10000a86f:	je	0x10000a9c5
10000a875:	mov	r14d, 0x1
10000a87b:	lea	rax, [rip + 0x1efa6]
10000a882:	cmp	qword ptr [rax], 0x1
10000a886:	jne	0x10000aa01
10000a88c:	cmp	r14, 0x1
10000a890:	sete	al
10000a893:	lea	rcx, [rip + 0x1f00a]
10000a89a:	cmp	dword ptr [rcx], 0x0
10000a89d:	sete	cl
10000a8a0:	test	al, cl
10000a8a2:	jne	0x10000a8d1
10000a8a4:	lea	rax, [rip + 0x1eef1]
10000a8ab:	cmp	dword ptr [rax], 0x0
10000a8ae:	jne	0x10000a8d1
10000a8b0:	lea	rax, [rip + 0x1ef51]
10000a8b7:	mov	rdi, qword ptr [rax]
10000a8ba:	lea	rax, [rip + 0x1ef57]
10000a8c1:	mov	rsi, qword ptr [rax]
10000a8c4:	call	0x10001981e ## symbol stub for: _strcmp
10000a8c9:	test	eax, eax
10000a8cb:	je	0x10000ab0e
10000a8d1:	lea	rax, [rip + 0x1edd8]
10000a8d8:	mov	ebx, dword ptr [rax]
10000a8da:	cmp	ebx, 0x1
10000a8dd:	jne	0x10000a900
10000a8df:	lea	rax, [rip + 0x1ef22]
10000a8e6:	mov	rdi, qword ptr [rax]
10000a8e9:	lea	rax, [rip + 0x1ef28]
10000a8f0:	mov	rsi, qword ptr [rax]
10000a8f3:	call	0x10001981e ## symbol stub for: _strcmp
10000a8f8:	test	eax, eax
10000a8fa:	je	0x10000ab93
10000a900:	cmp	ebx, 0x1
10000a903:	sete	al
10000a906:	cmp	r14, 0x1
10000a90a:	sete	cl
10000a90d:	test	cl, al
10000a90f:	lea	rax, [rip + 0x1eda2]
10000a916:	jne	0x10000aaa4
10000a91c:	cmp	dword ptr [rax], 0x0
10000a91f:	jne	0x10000aaa4
10000a925:	xor	eax, eax
10000a927:	mov	qword ptr [rbp - 0xa8], rax
10000a92e:	mov	rdi, qword ptr [r12]
10000a932:	add	r15, -0x18
10000a936:	mov	rsi, r15
10000a939:	xor	edx, edx
10000a93b:	call	0x10001971c ## symbol stub for: _fseeko
10000a940:	mov	rdi, qword ptr [r12]
10000a944:	test	eax, eax
10000a946:	je	0x10000abc2
10000a94c:	call	0x1000196ce ## symbol stub for: _fclose
10000a951:	mov	qword ptr [r12], 0x0
10000a959:	lea	rax, [rip + 0x1ed50]
10000a960:	mov	ebx, dword ptr [rax]
10000a962:	call	0x100019674 ## symbol stub for: ___error
10000a967:	mov	edi, dword ptr [rax]
10000a969:	call	0x10001982a ## symbol stub for: _strerror
10000a96e:	cmp	ebx, 0x1
10000a971:	jne	0x10000ad27
10000a977:	lea	rdi, [rip + 0x18368] ## literal pool for: "bad archive - could not seek back to Zip64 EOCDL: "
10000a97e:	jmp	0x10000ab78
10000a983:	lea	rdi, [rip + 0x18091] ## literal pool for: "missing end signature--probably not a zip file (did you"
10000a98a:	lea	rbx, [rip + 0xfe26] ## literal pool for: ""
10000a991:	mov	rsi, rbx
10000a994:	call	0x1000034f4
10000a999:	lea	rdi, [rip + 0x180b3] ## literal pool for: "remember to use binary mode when you transferred it?)"
10000a9a0:	mov	rsi, rbx
10000a9a3:	call	0x1000034f4
10000a9a8:	lea	rdi, [rip + 0x180da] ## literal pool for: "(if you are trying to read a damaged archive try -F)"
10000a9af:	mov	rsi, rbx
10000a9b2:	call	0x1000034f4
10000a9b7:	mov	r14d, 0x3
10000a9bd:	mov	r12b, 0x1
10000a9c0:	jmp	0x10000a56d
10000a9c5:	mov	rdi, qword ptr [r12]
10000a9c9:	call	0x1000196ce ## symbol stub for: _fclose
10000a9ce:	mov	qword ptr [r12], 0x0
10000a9d6:	xor	r14d, r14d
10000a9d9:	jmp	0x10000a9bd
10000a9db:	call	0x100019716 ## symbol stub for: _free
10000a9e0:	mov	qword ptr [rbx], 0x0
10000a9e7:	mov	rdi, qword ptr [r12]
10000a9eb:	call	0x1000196e0 ## symbol stub for: _ferror
10000a9f0:	xor	ecx, ecx
10000a9f2:	test	eax, eax
10000a9f4:	setne	cl
10000a9f7:	lea	r14d, [rcx + 8*rcx]
10000a9fb:	add	r14d, 0x2
10000a9ff:	jmp	0x10000a9bd
10000aa01:	lea	rax, [rip + 0x1ee00]
10000aa08:	mov	rdi, qword ptr [rax]
10000aa0b:	call	0x100019830 ## symbol stub for: _strlen
10000aa10:	lea	rcx, [rip + 0x1eca1]
10000aa17:	cmp	dword ptr [rcx], 0x0
10000aa1a:	je	0x10000aa28
10000aa1c:	lea	rdi, [rip + 0x1809b] ## literal pool for: "Adjusting split archives not yet supported"
10000aa23:	jmp	0x10000ab87
10000aa28:	cmp	eax, 0x4
10000aa2b:	jl	0x10000aa7b
10000aa2d:	mov	r14, qword ptr [r13]
10000aa31:	movsxd	rbx, eax
10000aa34:	cmp	byte ptr [r14 + rbx - 0x4], 0x2e
10000aa3a:	jne	0x10000aa7b
10000aa3c:	movsx	edi, byte ptr [r14 + rbx - 0x3]
10000aa42:	call	0x10001969e ## symbol stub for: ___toupper
10000aa47:	cmp	eax, 0x5a
10000aa4a:	jne	0x10000aa7b
10000aa4c:	movsx	edi, byte ptr [r14 + rbx - 0x2]
10000aa52:	call	0x10001969e ## symbol stub for: ___toupper
10000aa57:	cmp	eax, 0x49
10000aa5a:	jne	0x10000aa7b
10000aa5c:	movsx	edi, byte ptr [r14 + rbx - 0x1]
10000aa62:	call	0x10001969e ## symbol stub for: ___toupper
10000aa67:	cmp	eax, 0x50
10000aa6a:	jne	0x10000aa7b
10000aa6c:	lea	rax, [rip + 0x1edb5]
10000aa73:	mov	r14, qword ptr [rax]
10000aa76:	jmp	0x10000a88c
10000aa7b:	lea	rdi, [rip + 0x11e56] ## literal pool for: "archive name must end in .zip for splits"
10000aa82:	lea	rsi, [rip + 0xfd2e] ## literal pool for: ""
10000aa89:	call	0x1000034f4
10000aa8e:	mov	rdi, qword ptr [r12]
10000aa92:	call	0x1000196ce ## symbol stub for: _fclose
10000aa97:	mov	qword ptr [r12], 0x0
10000aa9f:	jmp	0x10000abb7
10000aaa4:	cmp	dword ptr [rbp - 0xb8], -0x1
10000aaab:	mov	rax, qword ptr [rbp - 0xa8]
10000aab2:	je	0x10000ab2b
10000aab4:	cmp	eax, -0x1
10000aab7:	je	0x10000ab2b
10000aab9:	mov	rsi, r15
10000aabc:	sub	rsi, rax
10000aabf:	add	rsi, -0x50
10000aac3:	mov	rdi, qword ptr [r12]
10000aac7:	xor	edx, edx
10000aac9:	call	0x10001971c ## symbol stub for: _fseeko
10000aace:	mov	rdi, qword ptr [r12]
10000aad2:	test	eax, eax
10000aad4:	je	0x10000ad36
10000aada:	call	0x1000196ce ## symbol stub for: _fclose
10000aadf:	mov	qword ptr [r12], 0x0
10000aae7:	lea	rax, [rip + 0x1ebc2]
10000aaee:	mov	ebx, dword ptr [rax]
10000aaf0:	call	0x100019674 ## symbol stub for: ___error
10000aaf5:	mov	edi, dword ptr [rax]
10000aaf7:	call	0x10001982a ## symbol stub for: _strerror
10000aafc:	cmp	ebx, 0x1
10000aaff:	jne	0x10000ad27
10000ab05:	lea	rdi, [rip + 0x18034] ## literal pool for: "could not seek back to start of central directory: "
10000ab0c:	jmp	0x10000ab78
10000ab0e:	mov	rdi, qword ptr [r12]
10000ab12:	call	0x1000196ce ## symbol stub for: _fclose
10000ab17:	mov	qword ptr [r12], 0x0
10000ab1f:	lea	rdi, [rip + 0x17fc3] ## literal pool for: "cannot update a split archive (use --out option)"
10000ab26:	jmp	0x10000abab
10000ab2b:	mov	rdi, qword ptr [r12]
10000ab2f:	lea	rsi, [r15 - 0x18]
10000ab33:	xor	edx, edx
10000ab35:	call	0x10001971c ## symbol stub for: _fseeko
10000ab3a:	mov	rdi, qword ptr [r12]
10000ab3e:	test	eax, eax
10000ab40:	je	0x10000ad69
10000ab46:	call	0x1000196ce ## symbol stub for: _fclose
10000ab4b:	mov	qword ptr [r12], 0x0
10000ab53:	lea	rax, [rip + 0x1eb56]
10000ab5a:	mov	ebx, dword ptr [rax]
10000ab5c:	call	0x100019674 ## symbol stub for: ___error
10000ab61:	mov	edi, dword ptr [rax]
10000ab63:	call	0x10001982a ## symbol stub for: _strerror
10000ab68:	cmp	ebx, 0x1
10000ab6b:	jne	0x10000ad27
10000ab71:	lea	rdi, [rip + 0x18040] ## literal pool for: "could not seek back to Zip64 EOCDL: "
10000ab78:	mov	rsi, rax
10000ab7b:	call	0x1000034f4
10000ab80:	lea	rdi, [rip + 0x17fed] ## literal pool for: "(try -FF)"
10000ab87:	lea	rsi, [rip + 0xfc29] ## literal pool for: ""
10000ab8e:	jmp	0x10000a9b2
10000ab93:	mov	rdi, qword ptr [r12]
10000ab97:	call	0x1000196ce ## symbol stub for: _fclose
10000ab9c:	mov	qword ptr [r12], 0x0
10000aba4:	lea	rdi, [rip + 0x17f6f] ## literal pool for: "must use --out when fixing an archive"
10000abab:	lea	rsi, [rip + 0xfc05] ## literal pool for: ""
10000abb2:	call	0x1000034f4
10000abb7:	mov	r14d, 0x10
10000abbd:	jmp	0x10000a9bd
10000abc2:	lea	rsi, [rip + 0x17994] ## literal pool for: "PK\006\007"
10000abc9:	call	0x10000a311
10000abce:	test	eax, eax
10000abd0:	je	0x10000b1be
10000abd6:	mov	rdi, qword ptr [r12]
10000abda:	call	0x100019728 ## symbol stub for: _ftello
10000abdf:	mov	qword ptr [rbp - 0xc0], rax
10000abe6:	mov	rcx, qword ptr [r12]
10000abea:	lea	rdi, [rbp - 0x70]
10000abee:	mov	esi, 0x10
10000abf3:	mov	edx, 0x1
10000abf8:	call	0x100019710 ## symbol stub for: _fread
10000abfd:	mov	rdi, qword ptr [r12]
10000ac01:	cmp	rax, 0x1
10000ac05:	jne	0x10000ae66
10000ac0b:	lea	rsi, [rip + 0x176c7] ## literal pool for: "PK\005\006"
10000ac12:	call	0x10000a311
10000ac17:	test	eax, eax
10000ac19:	je	0x10000ae8e
10000ac1f:	mov	r14d, dword ptr [rbp - 0x70]
10000ac23:	mov	eax, dword ptr [rbp - 0x64]
10000ac26:	mov	rcx, qword ptr [rbp - 0x6c]
10000ac2a:	add	rcx, qword ptr [rbp - 0xa8]
10000ac31:	mov	qword ptr [rbp - 0xb8], rcx
10000ac38:	lea	rcx, [rip + 0x1ebe9]
10000ac3f:	mov	qword ptr [rcx], rax
10000ac42:	dec	rax
10000ac45:	lea	rcx, [rip + 0x1ebe4]
10000ac4c:	mov	qword ptr [rcx], rax
10000ac4f:	cmp	r14, rax
10000ac52:	je	0x10000ace6
10000ac58:	mov	rdi, qword ptr [r12]
10000ac5c:	call	0x1000196ce ## symbol stub for: _fclose
10000ac61:	mov	qword ptr [r12], 0x0
10000ac69:	lea	rax, [rip + 0x1eb98]
10000ac70:	mov	rdi, qword ptr [rax]
10000ac73:	mov	rsi, r14
10000ac76:	call	0x1000127e1
10000ac7b:	mov	rbx, rax
10000ac7e:	lea	rsi, [rip + 0x1132b] ## literal pool for: "r"
10000ac85:	mov	rdi, rax
10000ac88:	call	0x1000196f8 ## symbol stub for: _fopen
10000ac8d:	mov	qword ptr [r12], rax
10000ac91:	test	rax, rax
10000ac94:	jne	0x10000acde
10000ac96:	lea	r15, [rip + 0x11313] ## literal pool for: "r"
10000ac9d:	mov	rdi, r14
10000aca0:	call	0x1000128e3
10000aca5:	test	eax, eax
10000aca7:	jne	0x10000bbae
10000acad:	mov	rdi, rbx
10000acb0:	call	0x100019716 ## symbol stub for: _free
10000acb5:	lea	rax, [rip + 0x1eb4c]
10000acbc:	mov	rdi, qword ptr [rax]
10000acbf:	mov	rsi, r14
10000acc2:	call	0x1000127e1
10000acc7:	mov	rbx, rax
10000acca:	mov	rdi, rax
10000accd:	mov	rsi, r15
10000acd0:	call	0x1000196f8 ## symbol stub for: _fopen
10000acd5:	mov	qword ptr [r12], rax
10000acd9:	test	rax, rax
10000acdc:	je	0x10000ac9d
10000acde:	mov	rdi, rbx
10000ace1:	call	0x100019716 ## symbol stub for: _free
10000ace6:	lea	rax, [rip + 0x1eb43]
10000aced:	mov	qword ptr [rax], r14
10000acf0:	mov	rdi, qword ptr [r12]
10000acf4:	mov	rsi, qword ptr [rbp - 0xb8]
10000acfb:	xor	edx, edx
10000acfd:	call	0x10001971c ## symbol stub for: _fseeko
10000ad02:	mov	rdi, qword ptr [r12]
10000ad06:	test	eax, eax
10000ad08:	je	0x10000af0b
10000ad0e:	call	0x1000196ce ## symbol stub for: _fclose
10000ad13:	mov	qword ptr [r12], 0x0
10000ad1b:	call	0x100019674 ## symbol stub for: ___error
10000ad20:	mov	edi, dword ptr [rax]
10000ad22:	call	0x10001982a ## symbol stub for: _strerror
10000ad27:	lea	rdi, [rip + 0x1705a] ## literal pool for: "reading archive fseek: "
10000ad2e:	mov	rsi, rax
10000ad31:	jmp	0x10000a9b2
10000ad36:	lea	rsi, [rip + 0x178a4] ## literal pool for: "PK\001\002"
10000ad3d:	call	0x10000f1b1
10000ad42:	test	eax, eax
10000ad44:	je	0x10000aeb5
10000ad4a:	mov	rdi, qword ptr [r12]
10000ad4e:	call	0x100019728 ## symbol stub for: _ftello
10000ad53:	mov	rcx, qword ptr [rbp - 0xb8]
10000ad5a:	neg	rcx
10000ad5d:	add	rax, rcx
10000ad60:	add	rax, -0x4
10000ad64:	jmp	0x10000ae0d
10000ad69:	lea	rsi, [rip + 0x177ed] ## literal pool for: "PK\006\007"
10000ad70:	call	0x10000a311
10000ad75:	test	eax, eax
10000ad77:	je	0x10000ae0b
10000ad7d:	mov	rdi, qword ptr [r12]
10000ad81:	call	0x100019728 ## symbol stub for: _ftello
10000ad86:	mov	rbx, rax
10000ad89:	mov	rcx, qword ptr [r12]
10000ad8d:	lea	rdi, [rbp - 0x70]
10000ad91:	mov	esi, 0x10
10000ad96:	mov	edx, 0x1
10000ad9b:	call	0x100019710 ## symbol stub for: _fread
10000ada0:	mov	rdi, qword ptr [r12]
10000ada4:	cmp	rax, 0x1
10000ada8:	jne	0x10000ae66
10000adae:	lea	rsi, [rip + 0x17524] ## literal pool for: "PK\005\006"
10000adb5:	call	0x10000a311
10000adba:	test	eax, eax
10000adbc:	je	0x10000ae8e
10000adc2:	mov	r14, qword ptr [rbp - 0x6c]
10000adc6:	mov	eax, dword ptr [rbp - 0x64]
10000adc9:	lea	rcx, [rip + 0x1ea58]
10000add0:	mov	qword ptr [rcx], rax
10000add3:	cmp	rax, 0x1
10000add7:	jne	0x10000af6b
10000addd:	mov	rdi, qword ptr [r12]
10000ade1:	mov	rsi, r14
10000ade4:	xor	edx, edx
10000ade6:	call	0x10001971c ## symbol stub for: _fseeko
10000adeb:	mov	rdi, qword ptr [r12]
10000adef:	test	eax, eax
10000adf1:	jne	0x10000ad0e
10000adf7:	lea	rsi, [rip + 0x1773a] ## literal pool for: "PK\006\006"
10000adfe:	call	0x10000a311
10000ae03:	test	eax, eax
10000ae05:	je	0x10000b11f
10000ae0b:	xor	eax, eax
10000ae0d:	mov	qword ptr [rbp - 0xa8], rax
10000ae14:	lea	rax, [rip + 0x1e641]
10000ae1b:	cmp	dword ptr [rax], 0x0
10000ae1e:	je	0x10000a92e
10000ae24:	cmp	qword ptr [rbp - 0xa8], 0x0
10000ae2c:	je	0x10000aed7
10000ae32:	mov	rdi, qword ptr [rbp - 0xa8]
10000ae39:	xor	esi, esi
10000ae3b:	xor	edx, edx
10000ae3d:	call	0x100015a80
10000ae42:	lea	rdi, [rip + 0x1ece7]
10000ae49:	lea	rcx, [rip + 0x17e35] ## literal pool for: "Zip entry offsets appear off by %s bytes - correcting..."
10000ae50:	mov	edx, 0x13f1
10000ae55:	xor	esi, esi
10000ae57:	mov	r8, rax
10000ae5a:	xor	eax, eax
10000ae5c:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000ae61:	jmp	0x10000aef3
10000ae66:	call	0x1000196ce ## symbol stub for: _fclose
10000ae6b:	mov	qword ptr [r12], 0x0
10000ae73:	call	0x100019674 ## symbol stub for: ___error
10000ae78:	mov	edi, dword ptr [rax]
10000ae7a:	call	0x10001982a ## symbol stub for: _strerror
10000ae7f:	lea	rdi, [rip + 0x17d57] ## literal pool for: "reading archive: "
10000ae86:	mov	rsi, rax
10000ae89:	jmp	0x10000a74b
10000ae8e:	mov	rdi, qword ptr [r12]
10000ae92:	call	0x1000196ce ## symbol stub for: _fclose
10000ae97:	mov	qword ptr [r12], 0x0
10000ae9f:	lea	rax, [rip + 0x1e962]
10000aea6:	mov	rsi, qword ptr [rax]
10000aea9:	lea	rdi, [rip + 0x17d3f] ## literal pool for: "unable to read EOCD after seek: "
10000aeb0:	jmp	0x10000a74b
10000aeb5:	lea	rdi, [rip + 0x17cc2] ## literal pool for: "central dir not where expected - could not adjust offsets"
10000aebc:	lea	rbx, [rip + 0xf8f4] ## literal pool for: ""
10000aec3:	mov	rsi, rbx
10000aec6:	call	0x1000034f4
10000aecb:	lea	rdi, [rip + 0x17ca2] ## literal pool for: "(try -FF)"
10000aed2:	jmp	0x10000a9af
10000aed7:	lea	rdi, [rip + 0x1ec52]
10000aede:	lea	rcx, [rip + 0x17dd9] ## literal pool for: "Zip entry offsets do not need adjusting"
10000aee5:	mov	edx, 0x13f1
10000aeea:	xor	esi, esi
10000aeec:	xor	eax, eax
10000aeee:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000aef3:	lea	rdi, [rip + 0x1ec36]
10000aefa:	lea	rsi, [rip + 0xf8b6] ## literal pool for: ""
10000af01:	call	0x100003422
10000af06:	jmp	0x10000a92e
10000af0b:	lea	rsi, [rip + 0x17626] ## literal pool for: "PK\006\006"
10000af12:	call	0x10000a311
10000af17:	test	eax, eax
10000af19:	je	0x10000af81
10000af1b:	mov	rcx, qword ptr [r12]
10000af1f:	lea	rdi, [rbp - 0x70]
10000af23:	mov	esi, 0x1
10000af28:	mov	edx, 0x34
10000af2d:	call	0x100019710 ## symbol stub for: _fread
10000af32:	cmp	rax, 0x33
10000af36:	ja	0x10000afda
10000af3c:	lea	rax, [rip + 0x1e76d]
10000af43:	cmp	dword ptr [rax], 0x1
10000af46:	jne	0x10000b0a1
10000af4c:	lea	rdi, [rip + 0x17eab] ## literal pool for: "bad archive - Zip64 EOCDR bad or truncated"
10000af53:	lea	rsi, [rip + 0xf85d] ## literal pool for: ""
10000af5a:	call	0x1000034f4
10000af5f:	lea	rdi, [rip + 0x17c0e] ## literal pool for: "(try -FF)"
10000af66:	jmp	0x10000bc19
10000af6b:	lea	rax, [rip + 0x1e896]
10000af72:	mov	rsi, qword ptr [rax]
10000af75:	lea	rdi, [rip + 0x17c94] ## literal pool for: "Adjusting split archives not supported:  "
10000af7c:	jmp	0x10000ab7b
10000af81:	mov	rsi, qword ptr [rbp - 0xc0]
10000af88:	add	rsi, -0x54
10000af8c:	mov	rdi, qword ptr [r12]
10000af90:	xor	edx, edx
10000af92:	call	0x10001971c ## symbol stub for: _fseeko
10000af97:	mov	rdi, qword ptr [r12]
10000af9b:	test	eax, eax
10000af9d:	je	0x10000b0ad
10000afa3:	call	0x1000196ce ## symbol stub for: _fclose
10000afa8:	mov	qword ptr [r12], 0x0
10000afb0:	lea	rax, [rip + 0x1e6f9]
10000afb7:	mov	ebx, dword ptr [rax]
10000afb9:	call	0x100019674 ## symbol stub for: ___error
10000afbe:	mov	edi, dword ptr [rax]
10000afc0:	call	0x10001982a ## symbol stub for: _strerror
10000afc5:	cmp	ebx, 0x1
10000afc8:	jne	0x10000ad27
10000afce:	lea	rdi, [rip + 0x17d44] ## literal pool for: "bad archive - could not seek back to Zip64 EOCDR: "
10000afd5:	jmp	0x10000ab78
10000afda:	movzx	r9d, word ptr [rbp - 0x66]
10000afdf:	mov	eax, dword ptr [rbp - 0x60]
10000afe2:	mov	qword ptr [rbp - 0xb0], rax
10000afe9:	mov	rax, qword ptr [rbp - 0x54]
10000afed:	mov	qword ptr [rbp - 0xc0], rax
10000aff4:	mov	rax, qword ptr [rbp - 0x44]
10000aff8:	add	rax, qword ptr [rbp - 0xa8]
10000afff:	mov	qword ptr [rbp - 0xb8], rax
10000b006:	cmp	r9d, 0x2f
10000b00a:	jb	0x10000b1be
10000b010:	mov	eax, r9d
10000b013:	mov	r8d, 0xcccccccd
10000b019:	imul	r8, rax
10000b01d:	shr	r8, 0x23
10000b021:	lea	eax, [r8 + r8]
10000b025:	lea	eax, [rax + 4*rax]
10000b028:	sub	r9d, eax
10000b02b:	lea	r14, [rip + 0x1eafe]
10000b032:	lea	rcx, [rip + 0x17e13] ## literal pool for: "This archive requires version %d.%d"
10000b039:	mov	edx, 0x13f1
10000b03e:	mov	rdi, r14
10000b041:	xor	esi, esi
10000b043:	xor	eax, eax
10000b045:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000b04a:	lea	rbx, [rip + 0xf766] ## literal pool for: ""
10000b051:	mov	rdi, r14
10000b054:	mov	rsi, rbx
10000b057:	call	0x1000034f4
10000b05c:	lea	rdi, [rip + 0x17e0d] ## literal pool for: "Zip currently only supports up to version 4.6 archives"
10000b063:	mov	rsi, rbx
10000b066:	call	0x1000034f4
10000b06b:	lea	rdi, [rip + 0x17e35] ## literal pool for: "(up to 4.5 if bzip2 is not compiled in)"
10000b072:	mov	rsi, rbx
10000b075:	call	0x1000034f4
10000b07a:	lea	rax, [rip + 0x1e62f]
10000b081:	mov	eax, dword ptr [rax]
10000b083:	cmp	eax, 0x2
10000b086:	je	0x10000b1ab
10000b08c:	cmp	eax, 0x1
10000b08f:	jne	0x10000bc12
10000b095:	lea	rdi, [rip + 0x17e33] ## literal pool for: "If -F fails try -FF to try to salvage something"
10000b09c:	jmp	0x10000b1b2
10000b0a1:	lea	rdi, [rip + 0x17d81] ## literal pool for: "Zip64 EOCD Record bad or truncated"
10000b0a8:	jmp	0x10000bc19
10000b0ad:	call	0x10000f226
10000b0b2:	test	eax, eax
10000b0b4:	je	0x10000b174
10000b0ba:	lea	rdi, [rip + 0x4ff10]
10000b0c1:	lea	rsi, [rip + 0x17470] ## literal pool for: "PK\006\006"
10000b0c8:	call	0x10000f2ed
10000b0cd:	test	eax, eax
10000b0cf:	je	0x10000b174
10000b0d5:	mov	rdi, qword ptr [r12]
10000b0d9:	call	0x100019728 ## symbol stub for: _ftello
10000b0de:	sub	rax, qword ptr [rbp - 0xb8]
10000b0e5:	add	rax, -0x4
10000b0e9:	mov	qword ptr [rbp - 0xa8], rax
10000b0f0:	lea	rdi, [rip + 0x17c55] ## literal pool for: "Zip64 EOCDR not found where expected - compensating"
10000b0f7:	lea	rbx, [rip + 0xf6b9] ## literal pool for: ""
10000b0fe:	mov	rsi, rbx
10000b101:	call	0x1000034f4
10000b106:	lea	rdi, [rip + 0x17c73] ## literal pool for: "(try -A to adjust offsets)"
10000b10d:	mov	rsi, rbx
10000b110:	call	0x1000034f4
10000b115:	jmp	0x10000af1b
10000b11a:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
10000b11f:	add	rbx, -0x54
10000b123:	mov	rdi, qword ptr [r12]
10000b127:	mov	rsi, rbx
10000b12a:	xor	edx, edx
10000b12c:	call	0x10001971c ## symbol stub for: _fseeko
10000b131:	mov	rdi, qword ptr [r12]
10000b135:	test	eax, eax
10000b137:	je	0x10000bc47
10000b13d:	call	0x1000196ce ## symbol stub for: _fclose
10000b142:	mov	qword ptr [r12], 0x0
10000b14a:	lea	rax, [rip + 0x1e55f]
10000b151:	mov	ebx, dword ptr [rax]
10000b153:	call	0x100019674 ## symbol stub for: ___error
10000b158:	mov	edi, dword ptr [rax]
10000b15a:	call	0x10001982a ## symbol stub for: _strerror
10000b15f:	cmp	ebx, 0x1
10000b162:	jne	0x10000ad27
10000b168:	lea	rdi, [rip + 0x17acb] ## literal pool for: "could not seek back to Zip64 EOCDR: "
10000b16f:	jmp	0x10000ab78
10000b174:	mov	rdi, qword ptr [r12]
10000b178:	call	0x1000196ce ## symbol stub for: _fclose
10000b17d:	mov	qword ptr [r12], 0x0
10000b185:	lea	rax, [rip + 0x1e524]
10000b18c:	cmp	dword ptr [rax], 0x1
10000b18f:	lea	rax, [rip + 0x1e672]
10000b196:	mov	rsi, qword ptr [rax]
10000b199:	jne	0x10000bc3b
10000b19f:	lea	rdi, [rip + 0x17bf5] ## literal pool for: "bad archive - Zip64 EOCDR not found in split:  "
10000b1a6:	jmp	0x10000ab7b
10000b1ab:	lea	rdi, [rip + 0x17d4d] ## literal pool for: "Attempting to salvage what can"
10000b1b2:	lea	rsi, [rip + 0xf5fe] ## literal pool for: ""
10000b1b9:	call	0x1000034f4
10000b1be:	mov	rax, qword ptr [rbp - 0xb8]
10000b1c5:	mov	rcx, rax
10000b1c8:	add	rcx, qword ptr [rbp - 0xa8]
10000b1cf:	lea	rax, [rip + 0x1e94a]
10000b1d6:	mov	qword ptr [rbp - 0xb8], rcx
10000b1dd:	mov	qword ptr [rax], rcx
10000b1e0:	lea	rax, [rip + 0x1fd69]
10000b1e7:	mov	qword ptr [rax], 0x0
10000b1ee:	lea	rax, [rip + 0x1e63b]
10000b1f5:	mov	rcx, qword ptr [rbp - 0xb0]
10000b1fc:	cmp	qword ptr [rax], rcx
10000b1ff:	je	0x10000b212
10000b201:	mov	rdi, qword ptr [r12]
10000b205:	call	0x1000196ce ## symbol stub for: _fclose
10000b20a:	mov	qword ptr [r12], 0x0
10000b212:	lea	rax, [rip + 0x1e617]
10000b219:	mov	rsi, qword ptr [rbp - 0xb0]
10000b220:	mov	qword ptr [rax], rsi
10000b223:	lea	rax, [rip + 0x1e5fe]
10000b22a:	mov	rax, qword ptr [rax]
10000b22d:	cmp	rsi, rax
10000b230:	jae	0x10000baa6
10000b236:	mov	r14d, 0x1
10000b23c:	mov	dword ptr [rbp - 0xc8], 0x0
10000b246:	mov	dword ptr [rbp - 0xc4], 0x0
10000b250:	dec	rax
10000b253:	lea	rcx, [rip + 0x1e5ae]
10000b25a:	mov	rbx, qword ptr [rcx]
10000b25d:	cmp	rsi, rax
10000b260:	jne	0x10000b294
10000b262:	mov	rdi, rbx
10000b265:	call	0x100019830 ## symbol stub for: _strlen
10000b26a:	lea	rdi, [rax + 0x1]
10000b26e:	call	0x100019758 ## symbol stub for: _malloc
10000b273:	mov	qword ptr [rbp - 0xb0], rax
10000b27a:	test	rax, rax
10000b27d:	je	0x10000bbd5
10000b283:	mov	rdi, qword ptr [rbp - 0xb0]
10000b28a:	mov	rsi, rbx
10000b28d:	call	0x100019824 ## symbol stub for: _strcpy
10000b292:	jmp	0x10000b2a3
10000b294:	mov	rdi, rbx
10000b297:	call	0x1000127e1
10000b29c:	mov	qword ptr [rbp - 0xb0], rax
10000b2a3:	mov	rax, qword ptr [r12]
10000b2a7:	test	rax, rax
10000b2aa:	je	0x10000b9b7
10000b2b0:	cmp	dword ptr [rbp - 0xc8], 0x0
10000b2b7:	jne	0x10000b2eb
10000b2b9:	test	r14d, r14d
10000b2bc:	je	0x10000b2eb
10000b2be:	mov	rdi, rax
10000b2c1:	mov	rsi, qword ptr [rbp - 0xb8]
10000b2c8:	xor	edx, edx
10000b2ca:	call	0x10001971c ## symbol stub for: _fseeko
10000b2cf:	mov	ecx, eax
10000b2d1:	mov	rax, qword ptr [r12]
10000b2d5:	test	ecx, ecx
10000b2d7:	jne	0x10000bbef
10000b2dd:	lea	rcx, [rip + 0x1e5f4]
10000b2e4:	mov	qword ptr [rbp - 0xd0], rcx
10000b2eb:	mov	rdi, rax
10000b2ee:	call	0x10000f226
10000b2f3:	test	eax, eax
10000b2f5:	je	0x10000b954
10000b2fb:	lea	r14, [rip + 0x1e3ae]
10000b302:	lea	r15, [rip + 0x4fcc8]
10000b309:	mov	rdi, qword ptr [r12]
10000b30d:	call	0x100019728 ## symbol stub for: _ftello
10000b312:	mov	rbx, rax
10000b315:	lea	rax, [rip + 0x1e51c]
10000b31c:	mov	qword ptr [rax], rbx
10000b31f:	mov	rdi, r15
10000b322:	lea	rsi, [rip + 0x16fb0] ## literal pool for: "PK\005\006"
10000b329:	call	0x10000f2ed
10000b32e:	test	eax, eax
10000b330:	jne	0x10000b954
10000b336:	mov	rdi, r15
10000b339:	lea	rsi, [rip + 0x171f8] ## literal pool for: "PK\006\006"
10000b340:	call	0x10000f2ed
10000b345:	test	eax, eax
10000b347:	jne	0x10000b954
10000b34d:	mov	rdi, r15
10000b350:	lea	rsi, [rip + 0x1728a] ## literal pool for: "PK\001\002"
10000b357:	call	0x10000f2ed
10000b35c:	test	eax, eax
10000b35e:	je	0x10000b5bf
10000b364:	lea	rax, [rip + 0x1e341]
10000b36b:	cmp	dword ptr [rax], 0x0
10000b36e:	je	0x10000b3c4
10000b370:	cmp	dword ptr [r14], 0x1
10000b374:	jne	0x10000b3c4
10000b376:	lea	rax, [rip + 0x1fbb3]
10000b37d:	mov	r14, qword ptr [rax]
10000b380:	lea	rax, [rip + 0x1e4a9]
10000b387:	mov	r15, qword ptr [rax]
10000b38a:	add	rbx, -0x4
10000b38e:	mov	rdi, rbx
10000b391:	xor	esi, esi
10000b393:	lea	rdx, [rip + 0x10eac] ## literal pool for: "u"
10000b39a:	call	0x100015a80
10000b39f:	mov	rdi, r14
10000b3a2:	lea	rsi, [rip + 0x17c1f] ## literal pool for: "central directory header signature on disk %lu at %s\n"
10000b3a9:	mov	rdx, r15
10000b3ac:	lea	r15, [rip + 0x4fc1e]
10000b3b3:	lea	r14, [rip + 0x1e2f6]
10000b3ba:	mov	rcx, rax
10000b3bd:	xor	eax, eax
10000b3bf:	call	0x1000196fe ## symbol stub for: _fprintf
10000b3c4:	mov	rcx, qword ptr [r12]
10000b3c8:	mov	esi, 0x2a
10000b3cd:	mov	edx, 0x1
10000b3d2:	lea	rdi, [rbp - 0x70]
10000b3d6:	call	0x100019710 ## symbol stub for: _fread
10000b3db:	cmp	rax, 0x1
10000b3df:	jne	0x10000b6ba
10000b3e5:	mov	edi, 0xa0
10000b3ea:	call	0x100019758 ## symbol stub for: _malloc
10000b3ef:	test	rax, rax
10000b3f2:	je	0x10000bbb9
10000b3f8:	mov	r15, rax
10000b3fb:	movzx	eax, word ptr [rbp - 0x70]
10000b3ff:	mov	word ptr [r15], ax
10000b403:	movzx	ecx, word ptr [rbp - 0x6e]
10000b407:	mov	word ptr [r15 + 0x2], cx
10000b40c:	movzx	ecx, word ptr [rbp - 0x6c]
10000b410:	mov	word ptr [r15 + 0x4], cx
10000b415:	movzx	ecx, word ptr [rbp - 0x6a]
10000b419:	mov	word ptr [r15 + 0x6], cx
10000b41e:	mov	ecx, dword ptr [rbp - 0x68]
10000b421:	mov	qword ptr [r15 + 0x8], rcx
10000b425:	mov	ecx, dword ptr [rbp - 0x64]
10000b428:	mov	qword ptr [r15 + 0x10], rcx
10000b42c:	mov	ecx, dword ptr [rbp - 0x60]
10000b42f:	mov	qword ptr [r15 + 0x18], rcx
10000b433:	mov	ecx, dword ptr [rbp - 0x5c]
10000b436:	mov	qword ptr [r15 + 0x20], rcx
10000b43a:	movzx	edx, word ptr [rbp - 0x58]
10000b43e:	mov	word ptr [r15 + 0x28], dx
10000b443:	movzx	ecx, word ptr [rbp - 0x56]
10000b447:	mov	qword ptr [rbp - 0xe0], rcx
10000b44e:	mov	word ptr [r15 + 0x2c], cx
10000b453:	movzx	ecx, word ptr [rbp - 0x54]
10000b457:	mov	qword ptr [rbp - 0xd8], rcx
10000b45e:	mov	word ptr [r15 + 0x2e], cx
10000b463:	movzx	ecx, word ptr [rbp - 0x52]
10000b467:	mov	qword ptr [r15 + 0x30], rcx
10000b46b:	movzx	ecx, word ptr [rbp - 0x50]
10000b46f:	mov	word ptr [r15 + 0x38], cx
10000b474:	mov	ecx, dword ptr [rbp - 0x4e]
10000b477:	mov	qword ptr [r15 + 0x48], rcx
10000b47b:	mov	ecx, dword ptr [rbp - 0x4a]
10000b47e:	mov	qword ptr [r15 + 0x40], rcx
10000b482:	xor	ecx, ecx
10000b484:	cmp	eax, 0x100
10000b489:	setb	cl
10000b48c:	mov	dword ptr [r15 + 0x94], ecx
10000b493:	xorps	xmm0, xmm0
10000b496:	movups	xmmword ptr [r15 + 0x50], xmm0
10000b49b:	movups	xmmword ptr [r15 + 0x60], xmm0
10000b4a0:	movups	xmmword ptr [r15 + 0x70], xmm0
10000b4a5:	mov	qword ptr [r15 + 0x80], 0x0
10000b4b0:	test	dx, dx
10000b4b3:	je	0x10000b706
10000b4b9:	mov	qword ptr [rbp - 0xe8], rdx
10000b4c0:	lea	rdi, [rdx + 0x1]
10000b4c4:	call	0x100019758 ## symbol stub for: _malloc
10000b4c9:	mov	qword ptr [r15 + 0x70], rax
10000b4cd:	mov	r14d, 0x4
10000b4d3:	test	rax, rax
10000b4d6:	je	0x10000a9bd
10000b4dc:	mov	rbx, rax
10000b4df:	cmp	word ptr [rbp - 0xe0], 0x0
10000b4e7:	je	0x10000b502
10000b4e9:	mov	rdi, qword ptr [rbp - 0xe0]
10000b4f0:	call	0x100019758 ## symbol stub for: _malloc
10000b4f5:	mov	qword ptr [r15 + 0x60], rax
10000b4f9:	test	rax, rax
10000b4fc:	je	0x10000a9bd
10000b502:	cmp	word ptr [rbp - 0xd8], 0x0
10000b50a:	je	0x10000b525
10000b50c:	mov	rdi, qword ptr [rbp - 0xd8]
10000b513:	call	0x100019758 ## symbol stub for: _malloc
10000b518:	mov	qword ptr [r15 + 0x68], rax
10000b51c:	test	rax, rax
10000b51f:	je	0x10000a9bd
10000b525:	mov	rcx, qword ptr [r12]
10000b529:	mov	edx, 0x1
10000b52e:	mov	rdi, rbx
10000b531:	mov	rsi, qword ptr [rbp - 0xe8]
10000b538:	call	0x100019710 ## symbol stub for: _fread
10000b53d:	cmp	rax, 0x1
10000b541:	jne	0x10000b58f
10000b543:	movzx	esi, word ptr [r15 + 0x2c]
10000b548:	test	rsi, rsi
10000b54b:	je	0x10000b565
10000b54d:	mov	rdi, qword ptr [r15 + 0x60]
10000b551:	mov	rcx, qword ptr [r12]
10000b555:	mov	edx, 0x1
10000b55a:	call	0x100019710 ## symbol stub for: _fread
10000b55f:	cmp	rax, 0x1
10000b563:	jne	0x10000b58f
10000b565:	movzx	esi, word ptr [r15 + 0x2e]
10000b56a:	test	rsi, rsi
10000b56d:	je	0x10000b788
10000b573:	mov	rdi, qword ptr [r15 + 0x68]
10000b577:	mov	rcx, qword ptr [r12]
10000b57b:	mov	edx, 0x1
10000b580:	call	0x100019710 ## symbol stub for: _fread
10000b585:	cmp	rax, 0x1
10000b589:	je	0x10000b788
10000b58f:	lea	rax, [rip + 0x1e11a]
10000b596:	cmp	dword ptr [rax], 0x1
10000b599:	jne	0x10000a9e7
10000b59f:	call	0x100019674 ## symbol stub for: ___error
10000b5a4:	mov	edi, dword ptr [rax]
10000b5a6:	call	0x10001982a ## symbol stub for: _strerror
10000b5ab:	lea	rdi, [rip + 0x170e5] ## literal pool for: "error reading entry:  "
10000b5b2:	mov	rsi, rax
10000b5b5:	call	0x1000034f4
10000b5ba:	jmp	0x10000b751
10000b5bf:	cmp	dword ptr [r14], 0x1
10000b5c3:	jne	0x10000bb23
10000b5c9:	movups	xmm0, xmmword ptr [rip + 0x1796f] ## literal pool for: "bad archive - unexpected signature "
10000b5d0:	lea	r14, [rip + 0x1e559]
10000b5d7:	movaps	xmmword ptr [r14], xmm0
10000b5db:	movups	xmm0, xmmword ptr [rip + 0x1796d] ## literal pool for: "expected signature "
10000b5e2:	movaps	xmmword ptr [r14 + 0x10], xmm0
10000b5e7:	mov	dword ptr [r14 + 0x20], 0x206572
10000b5ef:	xor	ebx, ebx
10000b5f1:	lea	r14, [rbp - 0xa0]
10000b5f8:	movsx	r8d, byte ptr [rbx + r15]
10000b5fd:	mov	edx, 0x28
10000b602:	mov	rdi, r14
10000b605:	xor	esi, esi
10000b607:	lea	rcx, [rip + 0x1721b] ## literal pool for: "%02x "
10000b60e:	xor	eax, eax
10000b610:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000b615:	mov	edx, 0x13f1
10000b61a:	lea	rdi, [rip + 0x1e50f]
10000b621:	mov	rsi, r14
10000b624:	call	0x10001968c ## symbol stub for: ___strcat_chk
10000b629:	inc	rbx
10000b62c:	cmp	rbx, 0x4
10000b630:	jne	0x10000b5f8
10000b632:	lea	rax, [rip + 0x1e1f7]
10000b639:	mov	rbx, qword ptr [rax]
10000b63c:	lea	rax, [rip + 0x1e1f5]
10000b643:	mov	rdi, qword ptr [rax]
10000b646:	add	rdi, -0x4
10000b64a:	xor	esi, esi
10000b64c:	lea	rdx, [rip + 0x10bf3] ## literal pool for: "u"
10000b653:	call	0x100015a80
10000b658:	mov	edx, 0x28
10000b65d:	mov	rdi, r14
10000b660:	xor	esi, esi
10000b662:	lea	rcx, [rip + 0x171c6] ## literal pool for: "on disk %lu at %s\n"
10000b669:	mov	r8, rbx
10000b66c:	mov	r9, rax
10000b66f:	xor	eax, eax
10000b671:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000b676:	mov	edx, 0x13f1
10000b67b:	lea	rbx, [rip + 0x1e4ae]
10000b682:	mov	rdi, rbx
10000b685:	mov	rsi, r14
10000b688:	call	0x10001968c ## symbol stub for: ___strcat_chk
10000b68d:	mov	rdi, rbx
10000b690:	lea	rbx, [rip + 0xf120] ## literal pool for: ""
10000b697:	mov	rsi, rbx
10000b69a:	call	0x1000034f4
10000b69f:	lea	rdi, [rip + 0x1719c] ## literal pool for: "skipping this signature..."
10000b6a6:	mov	rsi, rbx
10000b6a9:	call	0x1000034f4
10000b6ae:	lea	r14, [rip + 0x1dffb]
10000b6b5:	jmp	0x10000b772
10000b6ba:	call	0x100019674 ## symbol stub for: ___error
10000b6bf:	mov	edi, dword ptr [rax]
10000b6c1:	call	0x10001982a ## symbol stub for: _strerror
10000b6c6:	lea	rdi, [rip + 0x16f48] ## literal pool for: "reading central directory: "
10000b6cd:	mov	rsi, rax
10000b6d0:	call	0x1000034f4
10000b6d5:	cmp	dword ptr [r14], 0x1
10000b6d9:	jne	0x10000a9e7
10000b6df:	lea	rdi, [rip + 0x16f4b] ## literal pool for: "bad archive - error reading central directory"
10000b6e6:	lea	rbx, [rip + 0xf0ca] ## literal pool for: ""
10000b6ed:	mov	rsi, rbx
10000b6f0:	call	0x1000034f4
10000b6f5:	lea	rdi, [rip + 0x16f63] ## literal pool for: "skipping this entry..."
10000b6fc:	mov	rsi, rbx
10000b6ff:	call	0x1000034f4
10000b704:	jmp	0x10000b772
10000b706:	lea	rax, [rip + 0x1f83b]
10000b70d:	mov	r8, qword ptr [rax]
10000b710:	inc	r8
10000b713:	mov	edx, 0x13f1
10000b718:	lea	rbx, [rip + 0x1e411]
10000b71f:	mov	rdi, rbx
10000b722:	xor	esi, esi
10000b724:	lea	rcx, [rip + 0x16f4b] ## literal pool for: "%lu"
10000b72b:	xor	eax, eax
10000b72d:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000b732:	lea	rdi, [rip + 0x16f41] ## literal pool for: "zero-length name for entry #"
10000b739:	mov	rsi, rbx
10000b73c:	call	0x1000034f4
10000b741:	lea	rax, [rip + 0x1df68]
10000b748:	cmp	dword ptr [rax], 0x1
10000b74b:	jne	0x10000a9b7
10000b751:	lea	rdi, [rip + 0x16f07] ## literal pool for: "skipping this entry..."
10000b758:	lea	rsi, [rip + 0xf058] ## literal pool for: ""
10000b75f:	call	0x1000034f4
10000b764:	lea	r14, [rip + 0x1df45]
10000b76b:	lea	r15, [rip + 0x4f85f]
10000b772:	mov	rdi, qword ptr [r12]
10000b776:	call	0x10000f226
10000b77b:	test	eax, eax
10000b77d:	jne	0x10000b309
10000b783:	jmp	0x10000b954
10000b788:	mov	rax, qword ptr [r15 + 0x70]
10000b78c:	movzx	ecx, word ptr [r15 + 0x28]
10000b791:	mov	byte ptr [rax + rcx], 0x0
10000b795:	lea	rax, [rip + 0x1e004]
10000b79c:	mov	dword ptr [rax], 0x0
10000b7a2:	mov	rax, qword ptr [r15 + 0x60]
10000b7a6:	test	rax, rax
10000b7a9:	je	0x10000b83e
10000b7af:	movzx	ecx, word ptr [r15 + 0x2c]
10000b7b4:	add	rcx, rax
10000b7b7:	add	rcx, -0x4
10000b7bb:	cmp	rcx, rax
10000b7be:	jbe	0x10000b83e
10000b7c0:	cmp	word ptr [rax], 0x1
10000b7c4:	je	0x10000b7d8
10000b7c6:	movzx	edx, word ptr [rax + 0x2]
10000b7ca:	add	rax, rdx
10000b7cd:	add	rax, 0x4
10000b7d1:	cmp	rax, rcx
10000b7d4:	jb	0x10000b7c0
10000b7d6:	jmp	0x10000b83e
10000b7d8:	lea	rcx, [rip + 0x1dfc1]
10000b7df:	mov	dword ptr [rcx], 0x1
10000b7e5:	mov	ecx, 0xffffffff
10000b7ea:	cmp	qword ptr [r15 + 0x20], rcx
10000b7ee:	jne	0x10000b7fe
10000b7f0:	mov	rcx, qword ptr [rax + 0x4]
10000b7f4:	mov	qword ptr [r15 + 0x20], rcx
10000b7f8:	add	rax, 0xc
10000b7fc:	jmp	0x10000b802
10000b7fe:	add	rax, 0x4
10000b802:	mov	ecx, 0xffffffff
10000b807:	cmp	qword ptr [r15 + 0x18], rcx
10000b80b:	jne	0x10000b818
10000b80d:	mov	rcx, qword ptr [rax]
10000b810:	mov	qword ptr [r15 + 0x18], rcx
10000b814:	add	rax, 0x8
10000b818:	mov	ecx, 0xffffffff
10000b81d:	cmp	qword ptr [r15 + 0x40], rcx
10000b821:	jne	0x10000b82e
10000b823:	mov	rcx, qword ptr [rax]
10000b826:	mov	qword ptr [r15 + 0x40], rcx
10000b82a:	add	rax, 0x8
10000b82e:	cmp	qword ptr [r15 + 0x30], 0xffff
10000b836:	jne	0x10000b83e
10000b838:	mov	eax, dword ptr [rax]
10000b83a:	mov	qword ptr [r15 + 0x30], rax
10000b83e:	lea	rax, [rip + 0x1de6b]
10000b845:	cmp	dword ptr [rax], 0x1
10000b848:	sete	al
10000b84b:	lea	rcx, [rip + 0x1dfd6]
10000b852:	cmp	qword ptr [rcx], 0x1
10000b856:	sete	cl
10000b859:	test	al, cl
10000b85b:	jne	0x10000b869
10000b85d:	lea	rax, [rip + 0x1de54]
10000b864:	cmp	dword ptr [rax], 0x0
10000b867:	je	0x10000b874
10000b869:	mov	rax, qword ptr [rbp - 0xa8]
10000b870:	add	qword ptr [r15 + 0x40], rax
10000b874:	cmp	qword ptr [r15 + 0x30], 0x0
10000b879:	jne	0x10000b8a8
10000b87b:	mov	rax, qword ptr [r15 + 0x40]
10000b87f:	cmp	dword ptr [rbp - 0xc4], 0x0
10000b886:	mov	dword ptr [rbp - 0xc4], 0x1
10000b890:	je	0x10000b89e
10000b892:	lea	rcx, [rip + 0x1f6b7]
10000b899:	cmp	rax, qword ptr [rcx]
10000b89c:	jae	0x10000b8a8
10000b89e:	lea	rcx, [rip + 0x1f6ab]
10000b8a5:	mov	qword ptr [rcx], rax
10000b8a8:	lea	rax, [rip + 0x1f699]
10000b8af:	inc	qword ptr [rax]
10000b8b2:	mov	qword ptr [r15 + 0x88], 0x0
10000b8bd:	mov	rdi, qword ptr [r15 + 0x70]
10000b8c1:	call	0x10001694a
10000b8c6:	mov	qword ptr [r15 + 0x78], rax
10000b8ca:	test	rax, rax
10000b8cd:	je	0x10000a9bd
10000b8d3:	mov	rbx, rax
10000b8d6:	mov	qword ptr [r15 + 0x50], rax
10000b8da:	mov	rdi, rax
10000b8dd:	call	0x100019830 ## symbol stub for: _strlen
10000b8e2:	lea	rdi, [rax + 0x1]
10000b8e6:	call	0x100019758 ## symbol stub for: _malloc
10000b8eb:	mov	qword ptr [r15 + 0x80], rax
10000b8f2:	test	rax, rax
10000b8f5:	je	0x10000bc88
10000b8fb:	mov	rdi, rax
10000b8fe:	mov	rsi, rbx
10000b901:	call	0x100019824 ## symbol stub for: _strcpy
10000b906:	lea	rax, [rip + 0x1dd9f]
10000b90d:	cmp	dword ptr [rax], 0x0
10000b910:	je	0x10000b926
10000b912:	lea	rax, [rip + 0x1dd97]
10000b919:	cmp	dword ptr [rax], 0x0
10000b91c:	jne	0x10000b926
10000b91e:	mov	rdi, r15
10000b921:	call	0x10000f354
10000b926:	mov	rax, qword ptr [rbp - 0xd0]
10000b92d:	mov	qword ptr [rax], r15
10000b930:	mov	rax, r15
10000b933:	add	rax, 0x98
10000b939:	mov	qword ptr [rbp - 0xd0], rax
10000b940:	mov	qword ptr [r15 + 0x98], 0x0
10000b94b:	mov	rdi, qword ptr [r12]
10000b94f:	jmp	0x10000b2ee
10000b954:	mov	rdi, qword ptr [r12]
10000b958:	call	0x1000196ce ## symbol stub for: _fclose
10000b95d:	mov	qword ptr [r12], 0x0
10000b965:	mov	rdi, qword ptr [rbp - 0xb0]
10000b96c:	call	0x100019716 ## symbol stub for: _free
10000b971:	lea	rdi, [rip + 0x4f659]
10000b978:	lea	rsi, [rip + 0x16c62] ## literal pool for: "PK\001\002"
10000b97f:	call	0x10000f2ed
10000b984:	xor	r14d, r14d
10000b987:	test	eax, eax
10000b989:	je	0x10000baa6
10000b98f:	lea	rax, [rip + 0x1de9a]
10000b996:	mov	rsi, qword ptr [rax]
10000b999:	inc	rsi
10000b99c:	mov	qword ptr [rax], rsi
10000b99f:	lea	rax, [rip + 0x1de82]
10000b9a6:	mov	rax, qword ptr [rax]
10000b9a9:	cmp	rsi, rax
10000b9ac:	jb	0x10000b250
10000b9b2:	jmp	0x10000baa6
10000b9b7:	mov	rdi, qword ptr [rbp - 0xb0]
10000b9be:	lea	rsi, [rip + 0x105eb] ## literal pool for: "r"
10000b9c5:	call	0x1000196f8 ## symbol stub for: _fopen
10000b9ca:	mov	qword ptr [r12], rax
10000b9ce:	test	rax, rax
10000b9d1:	jne	0x10000b2b0
10000b9d7:	lea	rax, [rip + 0x1de52]
10000b9de:	mov	rdi, qword ptr [rax]
10000b9e1:	call	0x1000128e3
10000b9e6:	cmp	eax, 0x3
10000b9e9:	je	0x10000ba5f
10000b9eb:	cmp	eax, 0x9
10000b9ee:	je	0x10000bb9b
10000b9f4:	lea	rax, [rip + 0x1de35]
10000b9fb:	mov	rsi, qword ptr [rax]
10000b9fe:	lea	rax, [rip + 0x1de23]
10000ba05:	mov	rax, qword ptr [rax]
10000ba08:	dec	rax
10000ba0b:	cmp	rsi, rax
10000ba0e:	jne	0x10000ba44
10000ba10:	lea	rax, [rip + 0x1ddf1]
10000ba17:	mov	r15, qword ptr [rax]
10000ba1a:	mov	rdi, r15
10000ba1d:	call	0x100019830 ## symbol stub for: _strlen
10000ba22:	lea	rdi, [rax + 0x1]
10000ba26:	call	0x100019758 ## symbol stub for: _malloc
10000ba2b:	test	rax, rax
10000ba2e:	je	0x10000bbc9
10000ba34:	mov	rbx, rax
10000ba37:	mov	rdi, rax
10000ba3a:	mov	rsi, r15
10000ba3d:	call	0x100019824 ## symbol stub for: _strcpy
10000ba42:	jmp	0x10000ba50
10000ba44:	mov	rdi, qword ptr [r13]
10000ba48:	call	0x1000127e1
10000ba4d:	mov	rbx, rax
10000ba50:	mov	qword ptr [rbp - 0xb0], rbx
10000ba57:	mov	rdi, rbx
10000ba5a:	jmp	0x10000b9be
10000ba5f:	lea	rax, [rip + 0x1ddca]
10000ba66:	mov	r8, qword ptr [rax]
10000ba69:	mov	edx, 0x13f1
10000ba6e:	lea	rbx, [rip + 0x1e0bb]
10000ba75:	mov	rdi, rbx
10000ba78:	xor	esi, esi
10000ba7a:	lea	rcx, [rip + 0x16a86] ## literal pool for: "skipping disk %lu ...\n"
10000ba81:	xor	eax, eax
10000ba83:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000ba88:	mov	rdi, rbx
10000ba8b:	lea	rsi, [rip + 0xed25] ## literal pool for: ""
10000ba92:	call	0x1000034f4
10000ba97:	mov	dword ptr [rbp - 0xc8], 0x1
10000baa1:	jmp	0x10000b98f
10000baa6:	xor	r14d, r14d
10000baa9:	lea	rax, [rip + 0x1f498]
10000bab0:	mov	rcx, qword ptr [rbp - 0xc0]
10000bab7:	cmp	qword ptr [rax], rcx
10000baba:	je	0x10000a9bd
10000bac0:	lea	r14, [rip + 0x1077f] ## literal pool for: "u"
10000bac7:	mov	rdi, qword ptr [rbp - 0xc0]
10000bace:	xor	esi, esi
10000bad0:	mov	rdx, r14
10000bad3:	call	0x100015a80
10000bad8:	mov	rbx, rax
10000badb:	lea	rax, [rip + 0x1f466]
10000bae2:	mov	rdi, qword ptr [rax]
10000bae5:	xor	esi, esi
10000bae7:	mov	rdx, r14
10000baea:	call	0x100015a80
10000baef:	lea	r14, [rip + 0x1e03a]
10000baf6:	lea	rcx, [rip + 0x17529] ## literal pool for: "expected %s entries but found %s"
10000bafd:	mov	edx, 0x13f1
10000bb02:	mov	rdi, r14
10000bb05:	xor	esi, esi
10000bb07:	mov	r8, rbx
10000bb0a:	mov	r9, rax
10000bb0d:	xor	eax, eax
10000bb0f:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000bb14:	lea	rsi, [rip + 0xec9c] ## literal pool for: ""
10000bb1b:	mov	rdi, r14
10000bb1e:	jmp	0x10000a9b2
10000bb23:	lea	rax, [rip + 0x1dd06]
10000bb2a:	mov	r14, qword ptr [rax]
10000bb2d:	add	rbx, -0x4
10000bb31:	lea	rdx, [rip + 0x1070e] ## literal pool for: "u"
10000bb38:	mov	rdi, rbx
10000bb3b:	xor	esi, esi
10000bb3d:	call	0x100015a80
10000bb42:	lea	r15, [rip + 0x1dfe7]
10000bb49:	lea	rcx, [rip + 0x17413] ## literal pool for: "unexpected signature on disk %lu at %s\n"
10000bb50:	mov	edx, 0x13f1
10000bb55:	mov	rdi, r15
10000bb58:	xor	esi, esi
10000bb5a:	mov	r8, r14
10000bb5d:	mov	r9, rax
10000bb60:	xor	eax, eax
10000bb62:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000bb67:	lea	rbx, [rip + 0xec49] ## literal pool for: ""
10000bb6e:	mov	rdi, r15
10000bb71:	mov	rsi, rbx
10000bb74:	call	0x1000034f4
10000bb79:	lea	rdi, [rip + 0x1740b] ## literal pool for: "archive not in correct format: "
10000bb80:	mov	rsi, qword ptr [rbp - 0xb0]
10000bb87:	call	0x1000034f4
10000bb8c:	lea	rdi, [rip + 0x17418] ## literal pool for: "(try -F to attempt recovery)"
10000bb93:	mov	rsi, rbx
10000bb96:	jmp	0x10000bc20
10000bb9b:	lea	rdi, [rip + 0x16929] ## literal pool for: "could not find split: "
10000bba2:	mov	rsi, qword ptr [rbp - 0xb0]
10000bba9:	call	0x1000034f4
10000bbae:	mov	r14d, 0x9
10000bbb4:	jmp	0x10000a9bd
10000bbb9:	lea	rdi, [rip + 0x169d5] ## literal pool for: "reading central directory"
10000bbc0:	lea	rsi, [rip + 0xebf0] ## literal pool for: ""
10000bbc7:	jmp	0x10000bbdf
10000bbc9:	lea	rdi, [rip + 0x1700d] ## literal pool for: "reading archive: "
10000bbd0:	mov	rsi, r15
10000bbd3:	jmp	0x10000bbdf
10000bbd5:	lea	rdi, [rip + 0x17001] ## literal pool for: "reading archive: "
10000bbdc:	mov	rsi, rbx
10000bbdf:	call	0x1000034f4
10000bbe4:	mov	r14d, 0x4
10000bbea:	jmp	0x10000a9bd
10000bbef:	mov	rdi, rax
10000bbf2:	call	0x1000196ce ## symbol stub for: _fclose
10000bbf7:	mov	qword ptr [r12], 0x0
10000bbff:	lea	rdi, [rip + 0x166b5] ## literal pool for: "unable to seek in input file "
10000bc06:	mov	rsi, qword ptr [rbp - 0xb0]
10000bc0d:	jmp	0x10000a74b
10000bc12:	lea	rdi, [rip + 0x17305] ## literal pool for: "Try -F to attempt to read anyway"
10000bc19:	lea	rsi, [rip + 0xeb97] ## literal pool for: ""
10000bc20:	call	0x1000034f4
10000bc25:	mov	rdi, qword ptr [r12]
10000bc29:	call	0x1000196ce ## symbol stub for: _fclose
10000bc2e:	mov	qword ptr [r12], 0x0
10000bc36:	jmp	0x10000a9b7
10000bc3b:	lea	rdi, [rip + 0x17189] ## literal pool for: "Zip64 End Of Central Directory Record not found:  "
10000bc42:	jmp	0x10000a9b2
10000bc47:	call	0x10000f226
10000bc4c:	test	eax, eax
10000bc4e:	je	0x10000bc7c
10000bc50:	lea	rdi, [rip + 0x4f37a]
10000bc57:	lea	rsi, [rip + 0x168da] ## literal pool for: "PK\006\006"
10000bc5e:	call	0x10000f2ed
10000bc63:	test	eax, eax
10000bc65:	je	0x10000bc7c
10000bc67:	mov	rdi, qword ptr [r12]
10000bc6b:	call	0x100019728 ## symbol stub for: _ftello
10000bc70:	sub	rax, r14
10000bc73:	add	rax, -0x4
10000bc77:	jmp	0x10000ae0d
10000bc7c:	lea	rdi, [rip + 0x16fdc] ## literal pool for: "Could not determine offset of entries"
10000bc83:	jmp	0x10000aebc
10000bc88:	lea	rdi, [rip + 0x1736f] ## literal pool for: "could not allocate memory: scanzipf_reg"
10000bc8f:	lea	rsi, [rip + 0xeb21] ## literal pool for: ""
10000bc96:	call	0x1000034f4
10000bc9b:	jmp	0x10000a9bd
10000bca0:	push	rbp
10000bca1:	mov	rbp, rsp
10000bca4:	push	r15
10000bca6:	push	r14
10000bca8:	push	r13
10000bcaa:	push	r12
10000bcac:	push	rbx
10000bcad:	sub	rsp, 0x88
10000bcb4:	mov	rax, qword ptr [rip + 0x18355] ## literal pool symbol address: ___stack_chk_guard
10000bcbb:	mov	rax, qword ptr [rax]
10000bcbe:	mov	qword ptr [rbp - 0x30], rax
10000bcc2:	lea	rax, [rip + 0x1db5f]
10000bcc9:	mov	qword ptr [rax], 0xf4240
10000bcd0:	lea	r13, [rip + 0x1db31]
10000bcd7:	mov	rdi, qword ptr [r13]
10000bcdb:	call	0x100019830 ## symbol stub for: _strlen
10000bce0:	mov	rbx, rax
10000bce3:	cmp	ebx, 0x4
10000bce6:	jl	0x10000bdc1
10000bcec:	lea	rax, [rip + 0x1f265]
10000bcf3:	mov	r14, qword ptr [rax]
10000bcf6:	movsxd	r15, ebx
10000bcf9:	cmp	byte ptr [r14 + r15 - 0x4], 0x2e
10000bcff:	jne	0x10000bdc1
10000bd05:	movsx	edi, byte ptr [r14 + r15 - 0x3]
10000bd0b:	call	0x10001969e ## symbol stub for: ___toupper
10000bd10:	cmp	eax, 0x5a
10000bd13:	jne	0x10000bdc1
10000bd19:	mov	al, byte ptr [r14 + r15 - 0x2]
10000bd1e:	add	al, -0x30
10000bd20:	cmp	al, 0x9
10000bd22:	ja	0x10000bdc1
10000bd28:	mov	al, byte ptr [r14 + r15 - 0x1]
10000bd2d:	add	al, -0x30
10000bd2f:	cmp	al, 0x9
10000bd31:	ja	0x10000bdc1
10000bd37:	cmp	ebx, 0x4
10000bd3a:	je	0x10000bd46
10000bd3c:	mov	al, byte ptr [r14 + r15]
10000bd40:	add	al, -0x30
10000bd42:	cmp	al, 0x9
10000bd44:	ja	0x10000bdc1
10000bd46:	movups	xmm0, xmmword ptr [rip + 0x164ce] ## literal pool for: "ve, need to provide\n"
10000bd4d:	lea	rbx, [rip + 0x1dddc]
10000bd54:	movaps	xmmword ptr [rbx + 0x20], xmm0
10000bd58:	movups	xmm0, xmmword ptr [rip + 0x164ac] ## literal pool for: "x is split archive, need to provide\n"
10000bd5f:	movaps	xmmword ptr [rbx + 0x10], xmm0
10000bd63:	movups	xmm0, xmmword ptr [rip + 0x16491] ## literal pool for: "if archive to fix is split archive, need to provide\n"
10000bd6a:	movaps	xmmword ptr [rbx], xmm0
10000bd6d:	movabs	rax, 0xa656469766f72
10000bd77:	mov	qword ptr [rbx + 0x2d], rax
10000bd7b:	lea	rsi, [rip + 0x164ae] ## literal pool for: "      path of the last split with .zip extension,\n"
10000bd82:	mov	edx, 0x13f1
10000bd87:	mov	rdi, rbx
10000bd8a:	call	0x10001968c ## symbol stub for: ___strcat_chk
10000bd8f:	lea	rsi, [rip + 0x164cd] ## literal pool for: "      even if it doesn't exist (zip will ask for splits)"
10000bd96:	mov	edx, 0x13f1
10000bd9b:	mov	rdi, rbx
10000bd9e:	call	0x10001968c ## symbol stub for: ___strcat_chk
10000bda3:	lea	rsi, [rip + 0xea0d] ## literal pool for: ""
10000bdaa:	mov	rdi, rbx
10000bdad:	call	0x1000034f4
10000bdb2:	mov	dword ptr [rbp - 0x94], 0x3
10000bdbc:	jmp	0x10000ccb8
10000bdc1:	mov	rdi, qword ptr [r13]
10000bdc5:	lea	rsi, [rip + 0x101e4] ## literal pool for: "r"
10000bdcc:	call	0x1000196f8 ## symbol stub for: _fopen
10000bdd1:	lea	r12, [rip + 0x1da28]
10000bdd8:	mov	qword ptr [r12], rax
10000bddc:	test	rax, rax
10000bddf:	je	0x10000be94
10000bde5:	mov	rdi, rax
10000bde8:	mov	rsi, -0x40000
10000bdef:	mov	edx, 0x2
10000bdf4:	call	0x10001971c ## symbol stub for: _fseeko
10000bdf9:	test	eax, eax
10000bdfb:	je	0x10000be17
10000bdfd:	mov	rdi, qword ptr [r12]
10000be01:	xor	esi, esi
10000be03:	xor	edx, edx
10000be05:	call	0x10001971c ## symbol stub for: _fseeko
10000be0a:	test	eax, eax
10000be0c:	je	0x10000be17
10000be0e:	mov	rdi, qword ptr [r12]
10000be12:	jmp	0x10000cc72
10000be17:	mov	rdi, qword ptr [r12]
10000be1b:	lea	rsi, [rip + 0x164b7] ## literal pool for: "PK\005\006"
10000be22:	call	0x10000f1b1
10000be27:	test	eax, eax
10000be29:	je	0x10000caea
10000be2f:	mov	rdi, qword ptr [r12]
10000be33:	call	0x100019728 ## symbol stub for: _ftello
10000be38:	mov	rbx, rax
10000be3b:	mov	rdi, qword ptr [r12]
10000be3f:	lea	rsi, [rip + 0x16493] ## literal pool for: "PK\005\006"
10000be46:	call	0x10000f1b1
10000be4b:	test	eax, eax
10000be4d:	je	0x10000be72
10000be4f:	lea	r14, [rip + 0x16483] ## literal pool for: "PK\005\006"
10000be56:	mov	rdi, qword ptr [r12]
10000be5a:	call	0x100019728 ## symbol stub for: _ftello
10000be5f:	mov	rbx, rax
10000be62:	mov	rdi, qword ptr [r12]
10000be66:	mov	rsi, r14
10000be69:	call	0x10000f1b1
10000be6e:	test	eax, eax
10000be70:	jne	0x10000be56
10000be72:	mov	rdi, qword ptr [r12]
10000be76:	mov	rsi, rbx
10000be79:	xor	edx, edx
10000be7b:	call	0x10001971c ## symbol stub for: _fseeko
10000be80:	mov	rcx, qword ptr [r12]
10000be84:	test	eax, eax
10000be86:	je	0x10000cb35
10000be8c:	mov	rdi, rcx
10000be8f:	jmp	0x10000cc72
10000be94:	mov	rsi, qword ptr [r13]
10000be98:	lea	rdi, [rip + 0x163fd] ## literal pool for: "could not open input archive: "
10000be9f:	call	0x1000034f4
10000bea4:	lea	rax, [rip + 0x1d5b1]
10000beab:	cmp	dword ptr [rax], 0x0
10000beae:	je	0x10000bec6
10000beb0:	mov	rdi, qword ptr [r12]
10000beb4:	test	rdi, rdi
10000beb7:	je	0x10000bec6
10000beb9:	call	0x1000196ce ## symbol stub for: _fclose
10000bebe:	mov	qword ptr [r12], 0x0
10000bec6:	lea	rdi, [rip + 0x165e6] ## literal pool for: "Scanning for entries..."
10000becd:	lea	rsi, [rip + 0xe8e3] ## literal pool for: ""
10000bed4:	call	0x100003422
10000bed9:	lea	rax, [rip + 0x1d950]
10000bee0:	mov	qword ptr [rax], 0x0
10000bee7:	lea	rax, [rip + 0x1d93a]
10000beee:	cmp	qword ptr [rax], 0x0
10000bef2:	je	0x10000cadb
10000bef8:	xor	r15d, r15d
10000befb:	mov	dword ptr [rbp - 0x98], 0x0
10000bf05:	xor	esi, esi
10000bf07:	mov	rdi, qword ptr [r13]
10000bf0b:	call	0x1000127e1
10000bf10:	mov	rdi, rax
10000bf13:	lea	rbx, [rip + 0x1d8e6]
10000bf1a:	mov	rax, qword ptr [rbx]
10000bf1d:	test	rax, rax
10000bf20:	mov	qword ptr [rbp - 0xa0], rdi
10000bf27:	jne	0x10000bf41
10000bf29:	lea	rsi, [rip + 0x10080] ## literal pool for: "r"
10000bf30:	call	0x1000196f8 ## symbol stub for: _fopen
10000bf35:	mov	qword ptr [rbx], rax
10000bf38:	test	rax, rax
10000bf3b:	je	0x10000ca14
10000bf41:	lea	r12, [rbp - 0x90]
10000bf48:	mov	rdi, rax
10000bf4b:	call	0x10000f226
10000bf50:	test	eax, eax
10000bf52:	je	0x10000c9b8
10000bf58:	lea	r14, [rip + 0x4f072]
10000bf5f:	mov	rdi, qword ptr [rbx]
10000bf62:	call	0x100019728 ## symbol stub for: _ftello
10000bf67:	mov	rbx, rax
10000bf6a:	lea	rax, [rip + 0x1d8c7]
10000bf71:	mov	qword ptr [rax], rbx
10000bf74:	mov	rdi, r14
10000bf77:	lea	rsi, [rip + 0x1635b] ## literal pool for: "PK\005\006"
10000bf7e:	call	0x10000f2ed
10000bf83:	test	eax, eax
10000bf85:	jne	0x10000c3a6
10000bf8b:	mov	rdi, r14
10000bf8e:	lea	rsi, [rip + 0x165a3] ## literal pool for: "PK\006\006"
10000bf95:	call	0x10000f2ed
10000bf9a:	test	eax, eax
10000bf9c:	jne	0x10000c3e2
10000bfa2:	mov	rdi, r14
10000bfa5:	lea	rsi, [rip + 0x165b1] ## literal pool for: "PK\006\007"
10000bfac:	call	0x10000f2ed
10000bfb1:	test	eax, eax
10000bfb3:	jne	0x10000c41e
10000bfb9:	mov	rdi, r14
10000bfbc:	lea	rsi, [rip + 0x15ddd] ## literal pool for: "PK\003\004"
10000bfc3:	call	0x10000f2ed
10000bfc8:	test	eax, eax
10000bfca:	jne	0x10000c48d
10000bfd0:	mov	rdi, r14
10000bfd3:	lea	rsi, [rip + 0x16607] ## literal pool for: "PK\001\002"
10000bfda:	call	0x10000f2ed
10000bfdf:	test	eax, eax
10000bfe1:	je	0x10000c5db
10000bfe7:	test	r15d, r15d
10000bfea:	lea	r15, [rip + 0xe7c6] ## literal pool for: ""
10000bff1:	jne	0x10000c0a1
10000bff7:	lea	rdi, [rip + 0x165e8] ## literal pool for: "Central Directory found..."
10000bffe:	mov	rsi, r15
10000c001:	call	0x100003422
10000c006:	lea	rax, [rip + 0x1ef3b]
10000c00d:	mov	rbx, qword ptr [rax]
10000c010:	test	rbx, rbx
10000c013:	je	0x10000c0a1
10000c019:	mov	rax, rbx
10000c01c:	shr	rax, 0x3d
10000c020:	mov	dword ptr [rbp - 0x94], 0x4
10000c02a:	jne	0x10000ccb8
10000c030:	lea	rdi, [8*rbx]
10000c038:	call	0x100019758 ## symbol stub for: _malloc
10000c03d:	lea	rcx, [rip + 0x1ef1c]
10000c044:	mov	qword ptr [rcx], rax
10000c047:	test	rax, rax
10000c04a:	je	0x10000ccb8
10000c050:	lea	rcx, [rip + 0x1d881]
10000c057:	mov	rcx, qword ptr [rcx]
10000c05a:	test	rcx, rcx
10000c05d:	je	0x10000c075
10000c05f:	mov	rdx, rax
10000c062:	mov	qword ptr [rdx], rcx
10000c065:	mov	rcx, qword ptr [rcx + 0x98]
10000c06c:	add	rdx, 0x8
10000c070:	test	rcx, rcx
10000c073:	jne	0x10000c062
10000c075:	mov	edx, 0x8
10000c07a:	mov	rdi, rax
10000c07d:	mov	rsi, rbx
10000c080:	lea	rcx, [rip + 0xff1]
10000c087:	call	0x1000197b8 ## symbol stub for: _qsort
10000c08c:	lea	r15, [rip + 0xe724] ## literal pool for: ""
10000c093:	lea	r14, [rip + 0x4ef37]
10000c09a:	lea	r12, [rbp - 0x90]
10000c0a1:	lea	rax, [rip + 0x1d604]
10000c0a8:	cmp	dword ptr [rax], 0x0
10000c0ab:	je	0x10000c112
10000c0ad:	lea	rax, [rip + 0x1d77c]
10000c0b4:	mov	rbx, qword ptr [rax]
10000c0b7:	inc	rbx
10000c0ba:	lea	rax, [rip + 0x1d777]
10000c0c1:	mov	rdi, qword ptr [rax]
10000c0c4:	add	rdi, -0x4
10000c0c8:	xor	esi, esi
10000c0ca:	lea	rdx, [rip + 0x10175] ## literal pool for: "u"
10000c0d1:	call	0x100015a80
10000c0d6:	mov	edx, 0x13f1
10000c0db:	mov	r14, r13
10000c0de:	lea	r13, [rip + 0x1da4b]
10000c0e5:	mov	rdi, r13
10000c0e8:	xor	esi, esi
10000c0ea:	lea	rcx, [rip + 0x16510] ## literal pool for: " Cen   (%2lu %6s): "
10000c0f1:	mov	r8, rbx
10000c0f4:	mov	r9, rax
10000c0f7:	xor	eax, eax
10000c0f9:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000c0fe:	mov	rdi, r13
10000c101:	mov	r13, r14
10000c104:	lea	r14, [rip + 0x4eec6]
10000c10b:	xor	esi, esi
10000c10d:	call	0x100003300
10000c112:	lea	rbx, [rip + 0x1d6e7]
10000c119:	mov	rcx, qword ptr [rbx]
10000c11c:	mov	esi, 0x2a
10000c121:	mov	edx, 0x1
10000c126:	lea	rdi, [rbp - 0x60]
10000c12a:	call	0x100019710 ## symbol stub for: _fread
10000c12f:	cmp	rax, 0x1
10000c133:	jne	0x10000c2f9
10000c139:	mov	edi, 0xa0
10000c13e:	call	0x100019758 ## symbol stub for: _malloc
10000c143:	test	rax, rax
10000c146:	je	0x10000cc9b
10000c14c:	mov	r14, rax
10000c14f:	movzx	eax, word ptr [rbp - 0x60]
10000c153:	mov	word ptr [r14], ax
10000c157:	movzx	ecx, word ptr [rbp - 0x5e]
10000c15b:	mov	word ptr [r14 + 0x2], cx
10000c160:	movzx	ecx, word ptr [rbp - 0x5c]
10000c164:	mov	word ptr [r14 + 0x4], cx
10000c169:	movzx	ecx, word ptr [rbp - 0x5a]
10000c16d:	mov	word ptr [r14 + 0x6], cx
10000c172:	mov	ecx, dword ptr [rbp - 0x58]
10000c175:	mov	qword ptr [r14 + 0x8], rcx
10000c179:	mov	ecx, dword ptr [rbp - 0x54]
10000c17c:	mov	qword ptr [r14 + 0x10], rcx
10000c180:	mov	ecx, dword ptr [rbp - 0x50]
10000c183:	mov	qword ptr [r14 + 0x18], rcx
10000c187:	mov	ecx, dword ptr [rbp - 0x4c]
10000c18a:	mov	qword ptr [r14 + 0x20], rcx
10000c18e:	movzx	r12d, word ptr [rbp - 0x48]
10000c193:	mov	word ptr [r14 + 0x28], r12w
10000c198:	movzx	r13d, word ptr [rbp - 0x46]
10000c19d:	mov	word ptr [r14 + 0x2c], r13w
10000c1a2:	movzx	ebx, word ptr [rbp - 0x44]
10000c1a6:	mov	word ptr [r14 + 0x2e], bx
10000c1ab:	movzx	ecx, word ptr [rbp - 0x42]
10000c1af:	mov	qword ptr [r14 + 0x30], rcx
10000c1b3:	movzx	ecx, word ptr [rbp - 0x40]
10000c1b7:	mov	word ptr [r14 + 0x38], cx
10000c1bc:	mov	ecx, dword ptr [rbp - 0x3e]
10000c1bf:	mov	qword ptr [r14 + 0x48], rcx
10000c1c3:	mov	ecx, dword ptr [rbp - 0x3a]
10000c1c6:	mov	qword ptr [r14 + 0x40], rcx
10000c1ca:	xor	ecx, ecx
10000c1cc:	cmp	eax, 0x100
10000c1d1:	setb	cl
10000c1d4:	mov	dword ptr [r14 + 0x94], ecx
10000c1db:	xorps	xmm0, xmm0
10000c1de:	movups	xmmword ptr [r14 + 0x50], xmm0
10000c1e3:	movups	xmmword ptr [r14 + 0x60], xmm0
10000c1e8:	movups	xmmword ptr [r14 + 0x70], xmm0
10000c1ed:	mov	qword ptr [r14 + 0x80], 0x0
10000c1f8:	test	r12w, r12w
10000c1fc:	je	0x10000c325
10000c202:	lea	rdi, [r12 + 0x1]
10000c207:	call	0x100019758 ## symbol stub for: _malloc
10000c20c:	mov	qword ptr [r14 + 0x70], rax
10000c210:	test	rax, rax
10000c213:	je	0x10000ccae
10000c219:	mov	r15, rax
10000c21c:	mov	dword ptr [rbp - 0x94], 0x4
10000c226:	test	r13w, r13w
10000c22a:	je	0x10000c244
10000c22c:	inc	r13
10000c22f:	mov	rdi, r13
10000c232:	call	0x100019758 ## symbol stub for: _malloc
10000c237:	mov	qword ptr [r14 + 0x60], rax
10000c23b:	test	rax, rax
10000c23e:	je	0x10000ccb8
10000c244:	test	bx, bx
10000c247:	lea	r13, [rip + 0x1d5ba]
10000c24e:	je	0x10000c268
10000c250:	inc	rbx
10000c253:	mov	rdi, rbx
10000c256:	call	0x100019758 ## symbol stub for: _malloc
10000c25b:	mov	qword ptr [r14 + 0x68], rax
10000c25f:	test	rax, rax
10000c262:	je	0x10000ccb8
10000c268:	lea	rax, [rip + 0x1d591]
10000c26f:	mov	rcx, qword ptr [rax]
10000c272:	mov	edx, 0x1
10000c277:	mov	rdi, r15
10000c27a:	mov	rsi, r12
10000c27d:	mov	rbx, rax
10000c280:	call	0x100019710 ## symbol stub for: _fread
10000c285:	cmp	rax, 0x1
10000c289:	jne	0x10000c2d5
10000c28b:	movzx	esi, word ptr [r14 + 0x2c]
10000c290:	test	rsi, rsi
10000c293:	je	0x10000c2ac
10000c295:	mov	rdi, qword ptr [r14 + 0x60]
10000c299:	mov	rcx, qword ptr [rbx]
10000c29c:	mov	edx, 0x1
10000c2a1:	call	0x100019710 ## symbol stub for: _fread
10000c2a6:	cmp	rax, 0x1
10000c2aa:	jne	0x10000c2d5
10000c2ac:	movzx	esi, word ptr [r14 + 0x2e]
10000c2b1:	test	rsi, rsi
10000c2b4:	je	0x10000c793
10000c2ba:	mov	rdi, qword ptr [r14 + 0x68]
10000c2be:	mov	rcx, qword ptr [rbx]
10000c2c1:	mov	edx, 0x1
10000c2c6:	call	0x100019710 ## symbol stub for: _fread
10000c2cb:	cmp	rax, 0x1
10000c2cf:	je	0x10000c793
10000c2d5:	call	0x100019674 ## symbol stub for: ___error
10000c2da:	mov	edi, dword ptr [rax]
10000c2dc:	call	0x10001982a ## symbol stub for: _strerror
10000c2e1:	lea	rdi, [rip + 0x163af] ## literal pool for: "error reading entry:  "
10000c2e8:	mov	rsi, rax
10000c2eb:	call	0x1000034f4
10000c2f0:	lea	r15, [rip + 0xe4c0] ## literal pool for: ""
10000c2f7:	jmp	0x10000c36e
10000c2f9:	call	0x100019674 ## symbol stub for: ___error
10000c2fe:	mov	edi, dword ptr [rax]
10000c300:	call	0x10001982a ## symbol stub for: _strerror
10000c305:	lea	rdi, [rip + 0x16309] ## literal pool for: "reading central directory: "
10000c30c:	mov	rsi, rax
10000c30f:	call	0x1000034f4
10000c314:	lea	rdi, [rip + 0x16316] ## literal pool for: "bad archive - error reading central directory"
10000c31b:	mov	rsi, r15
10000c31e:	call	0x1000034f4
10000c323:	jmp	0x10000c37c
10000c325:	lea	rax, [rip + 0x1ec1c]
10000c32c:	mov	r8, qword ptr [rax]
10000c32f:	inc	r8
10000c332:	mov	edx, 0x13f1
10000c337:	lea	rbx, [rip + 0x1d7f2]
10000c33e:	mov	rdi, rbx
10000c341:	xor	esi, esi
10000c343:	lea	rcx, [rip + 0x1632c] ## literal pool for: "%lu"
10000c34a:	xor	eax, eax
10000c34c:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000c351:	lea	rdi, [rip + 0x16322] ## literal pool for: "zero-length name for entry #"
10000c358:	mov	rsi, rbx
10000c35b:	call	0x1000034f4
10000c360:	lea	r13, [rip + 0x1d4a1]
10000c367:	lea	rbx, [rip + 0x1d492]
10000c36e:	lea	r14, [rip + 0x4ec5c]
10000c375:	lea	r12, [rbp - 0x90]
10000c37c:	lea	rdi, [rip + 0x162dc] ## literal pool for: "skipping this entry..."
10000c383:	mov	rsi, r15
10000c386:	call	0x1000034f4
10000c38b:	mov	rdi, qword ptr [rbx]
10000c38e:	call	0x10000f226
10000c393:	mov	r15d, 0x1
10000c399:	test	eax, eax
10000c39b:	jne	0x10000bf5f
10000c3a1:	jmp	0x10000c9b8
10000c3a6:	lea	rax, [rip + 0x1d483]
10000c3ad:	mov	r14, qword ptr [rax]
10000c3b0:	inc	r14
10000c3b3:	add	rbx, -0x4
10000c3b7:	mov	rdi, rbx
10000c3ba:	xor	esi, esi
10000c3bc:	lea	rdx, [rip + 0xfe83] ## literal pool for: "u"
10000c3c3:	call	0x100015a80
10000c3c8:	mov	edx, 0x13f1
10000c3cd:	lea	rbx, [rip + 0x1d75c]
10000c3d4:	mov	rdi, rbx
10000c3d7:	xor	esi, esi
10000c3d9:	lea	rcx, [rip + 0x1613e] ## literal pool for: "EOCDR found (%2lu %6s)..."
10000c3e0:	jmp	0x10000c458
10000c3e2:	lea	rax, [rip + 0x1d447]
10000c3e9:	mov	r14, qword ptr [rax]
10000c3ec:	inc	r14
10000c3ef:	add	rbx, -0x4
10000c3f3:	mov	rdi, rbx
10000c3f6:	xor	esi, esi
10000c3f8:	lea	rdx, [rip + 0xfe47] ## literal pool for: "u"
10000c3ff:	call	0x100015a80
10000c404:	mov	edx, 0x13f1
10000c409:	lea	rbx, [rip + 0x1d720]
10000c410:	mov	rdi, rbx
10000c413:	xor	esi, esi
10000c415:	lea	rcx, [rip + 0x16121] ## literal pool for: "Zip64 EOCDR found (%2lu %6s)..."
10000c41c:	jmp	0x10000c458
10000c41e:	lea	rax, [rip + 0x1d40b]
10000c425:	mov	r14, qword ptr [rax]
10000c428:	inc	r14
10000c42b:	add	rbx, -0x4
10000c42f:	mov	rdi, rbx
10000c432:	xor	esi, esi
10000c434:	lea	rdx, [rip + 0xfe0b] ## literal pool for: "u"
10000c43b:	call	0x100015a80
10000c440:	mov	edx, 0x13f1
10000c445:	lea	rbx, [rip + 0x1d6e4]
10000c44c:	mov	rdi, rbx
10000c44f:	xor	esi, esi
10000c451:	lea	rcx, [rip + 0x1610a] ## literal pool for: "Zip64 EOCDL found (%2lu %6s)..."
10000c458:	mov	r8, r14
10000c45b:	lea	r14, [rip + 0x4eb6f]
10000c462:	mov	r9, rax
10000c465:	xor	eax, eax
10000c467:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000c46c:	mov	rdi, rbx
10000c46f:	mov	esi, 0x1
10000c474:	call	0x100003300
10000c479:	lea	rbx, [rip + 0x1d380]
10000c480:	mov	rdi, qword ptr [rbx]
10000c483:	call	0x10000f226
10000c488:	jmp	0x10000c399
10000c48d:	lea	rax, [rip + 0x1d218]
10000c494:	cmp	dword ptr [rax], 0x0
10000c497:	je	0x10000c4f1
10000c499:	lea	rax, [rip + 0x1d390]
10000c4a0:	mov	r14, qword ptr [rax]
10000c4a3:	inc	r14
10000c4a6:	add	rbx, -0x4
10000c4aa:	mov	rdi, rbx
10000c4ad:	xor	esi, esi
10000c4af:	lea	rdx, [rip + 0xfd90] ## literal pool for: "u"
10000c4b6:	call	0x100015a80
10000c4bb:	mov	edx, 0x13f1
10000c4c0:	lea	rbx, [rip + 0x1d669]
10000c4c7:	mov	rdi, rbx
10000c4ca:	xor	esi, esi
10000c4cc:	lea	rcx, [rip + 0x160af] ## literal pool for: " Local (%2lu %6s):"
10000c4d3:	mov	r8, r14
10000c4d6:	lea	r14, [rip + 0x4eaf4]
10000c4dd:	mov	r9, rax
10000c4e0:	xor	eax, eax
10000c4e2:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000c4e7:	mov	rdi, rbx
10000c4ea:	xor	esi, esi
10000c4ec:	call	0x100003300
10000c4f1:	mov	edi, 0xa0
10000c4f6:	call	0x100019758 ## symbol stub for: _malloc
10000c4fb:	test	rax, rax
10000c4fe:	je	0x10000cc9b
10000c504:	mov	rbx, rax
10000c507:	mov	dword ptr [rax + 0x94], 0x0
10000c511:	xorps	xmm0, xmm0
10000c514:	movups	xmmword ptr [rax], xmm0
10000c517:	movups	xmmword ptr [rax + 0x10], xmm0
10000c51b:	movups	xmmword ptr [rax + 0x1a], xmm0
10000c51f:	xor	eax, eax
10000c521:	mov	qword ptr [rbx + 0x2c], rax
10000c525:	mov	qword ptr [rbx + 0x32], rax
10000c529:	movups	xmmword ptr [rbx + 0x40], xmm0
10000c52d:	movups	xmmword ptr [rbx + 0x50], xmm0
10000c531:	movups	xmmword ptr [rbx + 0x60], xmm0
10000c535:	movups	xmmword ptr [rbx + 0x70], xmm0
10000c539:	mov	qword ptr [rbx + 0x80], rax
10000c540:	mov	rdi, rbx
10000c543:	call	0x10000e1ae
10000c548:	test	r15d, r15d
10000c54b:	lea	r15, [rip + 0x1d5de]
10000c552:	mov	dword ptr [rbp - 0x98], eax
10000c558:	je	0x10000c5bb
10000c55a:	lea	rax, [rip + 0x1d2cf]
10000c561:	mov	r14, qword ptr [rax]
10000c564:	inc	r14
10000c567:	lea	rax, [rip + 0x1d2ca]
10000c56e:	mov	rdi, qword ptr [rax]
10000c571:	add	rdi, -0x4
10000c575:	xor	esi, esi
10000c577:	lea	rdx, [rip + 0xfcc8] ## literal pool for: "u"
10000c57e:	call	0x100015a80
10000c583:	mov	edx, 0x13f1
10000c588:	mov	rdi, r15
10000c58b:	xor	esi, esi
10000c58d:	lea	rcx, [rip + 0x1601b] ## literal pool for: "Entry after central directory found (%2lu %6s)..."
10000c594:	mov	r8, r14
10000c597:	lea	r14, [rip + 0x4ea33]
10000c59e:	mov	r9, rax
10000c5a1:	xor	eax, eax
10000c5a3:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000c5a8:	mov	rdi, r15
10000c5ab:	mov	esi, 0x1
10000c5b0:	call	0x100003300
10000c5b5:	mov	eax, dword ptr [rbp - 0x98]
10000c5bb:	test	eax, eax
10000c5bd:	je	0x10000c6e4
10000c5c3:	xor	r15d, r15d
10000c5c6:	cmp	eax, 0x2
10000c5c9:	lea	rbx, [rip + 0x1d230]
10000c5d0:	jne	0x10000c480
10000c5d6:	jmp	0x10000c9b8
10000c5db:	lea	rax, [rip + 0x1d2f6]
10000c5e2:	cmp	qword ptr [rax], 0x0
10000c5e6:	je	0x10000c74c
10000c5ec:	mov	dword ptr [rbp - 0x94], r15d
10000c5f3:	movups	xmm0, xmmword ptr [rip + 0x16219] ## literal pool for: "unexpected signature "
10000c5fa:	lea	r13, [rip + 0x1d52f]
10000c601:	movaps	xmmword ptr [r13], xmm0
10000c606:	movabs	rax, 0x2065727574616e
10000c610:	mov	qword ptr [r13 + 0xe], rax
10000c614:	xor	ebx, ebx
10000c616:	mov	r15, r12
10000c619:	lea	r12, [rip + 0x16209] ## literal pool for: "%02x "
10000c620:	movsx	r8d, byte ptr [rbx + r14]
10000c625:	mov	edx, 0x28
10000c62a:	mov	rdi, r15
10000c62d:	xor	esi, esi
10000c62f:	mov	rcx, r12
10000c632:	xor	eax, eax
10000c634:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000c639:	mov	edx, 0x13f1
10000c63e:	mov	rdi, r13
10000c641:	mov	rsi, r15
10000c644:	call	0x10001968c ## symbol stub for: ___strcat_chk
10000c649:	inc	rbx
10000c64c:	cmp	rbx, 0x4
10000c650:	jne	0x10000c620
10000c652:	lea	rax, [rip + 0x1d1d7]
10000c659:	mov	rbx, qword ptr [rax]
10000c65c:	lea	rax, [rip + 0x1d1d5]
10000c663:	mov	rdi, qword ptr [rax]
10000c666:	add	rdi, -0x4
10000c66a:	xor	esi, esi
10000c66c:	lea	rdx, [rip + 0xfbd3] ## literal pool for: "u"
10000c673:	call	0x100015a80
10000c678:	mov	edx, 0x28
10000c67d:	mov	rdi, r15
10000c680:	xor	esi, esi
10000c682:	lea	rcx, [rip + 0x161a6] ## literal pool for: "on disk %lu at %s\n"
10000c689:	mov	r8, rbx
10000c68c:	mov	r9, rax
10000c68f:	xor	eax, eax
10000c691:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000c696:	mov	edx, 0x13f1
10000c69b:	mov	rdi, r13
10000c69e:	mov	rsi, r15
10000c6a1:	call	0x10001968c ## symbol stub for: ___strcat_chk
10000c6a6:	mov	rdi, r13
10000c6a9:	lea	rbx, [rip + 0xe107] ## literal pool for: ""
10000c6b0:	mov	rsi, rbx
10000c6b3:	call	0x1000034f4
10000c6b8:	lea	rdi, [rip + 0x16183] ## literal pool for: "skipping this signature..."
10000c6bf:	mov	rsi, rbx
10000c6c2:	call	0x1000034f4
10000c6c7:	lea	r13, [rip + 0x1d13a]
10000c6ce:	mov	r12, r15
10000c6d1:	lea	rbx, [rip + 0x1d128]
10000c6d8:	mov	r15d, dword ptr [rbp - 0x94]
10000c6df:	jmp	0x10000c480
10000c6e4:	lea	rax, [rip + 0x1e85d]
10000c6eb:	inc	qword ptr [rax]
10000c6ee:	lea	rax, [rip + 0x1d03b]
10000c6f5:	inc	qword ptr [rax]
10000c6f8:	mov	rax, qword ptr [rbx + 0x18]
10000c6fc:	lea	rcx, [rip + 0x1d04d]
10000c703:	add	qword ptr [rcx], rax
10000c706:	lea	rax, [rip + 0x1d1cb]
10000c70d:	cmp	qword ptr [rax], 0x0
10000c711:	mov	rcx, qword ptr [rbp - 0xa8]
10000c718:	cmove	rcx, rax
10000c71c:	mov	qword ptr [rcx], rbx
10000c71f:	mov	rax, rbx
10000c722:	add	rax, 0x98
10000c728:	mov	qword ptr [rbp - 0xa8], rax
10000c72f:	mov	qword ptr [rbx + 0x98], 0x0
10000c73a:	mov	dword ptr [rbp - 0x98], 0x0
10000c744:	xor	r15d, r15d
10000c747:	jmp	0x10000c479
10000c74c:	mov	rdi, r14
10000c74f:	lea	rsi, [rip + 0x15fee] ## literal pool for: "PK\007\010"
10000c756:	call	0x10000f2ed
10000c75b:	test	eax, eax
10000c75d:	je	0x10000c5ec
10000c763:	lea	rax, [rip + 0x1d0be]
10000c76a:	mov	rax, qword ptr [rax]
10000c76d:	test	rax, rax
10000c770:	lea	rbx, [rip + 0x1d089]
10000c777:	je	0x10000c997
10000c77d:	cmp	rax, 0x1
10000c781:	jne	0x10000c9a0
10000c787:	lea	rdi, [rip + 0x15fbb] ## literal pool for: "  Found spanning marker, but did not expect split (multi-disk) archive..."
10000c78e:	jmp	0x10000c9a7
10000c793:	mov	rax, qword ptr [r14 + 0x70]
10000c797:	movzx	ecx, word ptr [r14 + 0x28]
10000c79c:	mov	byte ptr [rax + rcx], 0x0
10000c7a0:	mov	rdi, qword ptr [r14 + 0x70]
10000c7a4:	call	0x100009bfa
10000c7a9:	test	rax, rax
10000c7ac:	je	0x10000c94e
10000c7b2:	mov	r15, rax
10000c7b5:	mov	rax, qword ptr [rax + 0x8]
10000c7b9:	cmp	rax, qword ptr [r14 + 0x8]
10000c7bd:	jne	0x10000c94e
10000c7c3:	lea	rax, [rip + 0x1cee2]
10000c7ca:	cmp	dword ptr [rax], 0x0
10000c7cd:	lea	r12, [rbp - 0x90]
10000c7d4:	je	0x10000c803
10000c7d6:	mov	r8, qword ptr [r14 + 0x70]
10000c7da:	mov	edx, 0x13f1
10000c7df:	lea	rbx, [rip + 0x1d34a]
10000c7e6:	mov	rdi, rbx
10000c7e9:	xor	esi, esi
10000c7eb:	lea	rcx, [rip + 0x10921] ## literal pool for: "updating: %s"
10000c7f2:	xor	eax, eax
10000c7f4:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000c7f9:	mov	rdi, rbx
10000c7fc:	xor	esi, esi
10000c7fe:	call	0x100003300
10000c803:	mov	r8, qword ptr [r15 + 0x10]
10000c807:	mov	r9, qword ptr [r14 + 0x10]
10000c80b:	cmp	r8, r9
10000c80e:	je	0x10000c83e
10000c810:	mov	edx, 0x13f1
10000c815:	lea	rbx, [rip + 0x1d314]
10000c81c:	mov	rdi, rbx
10000c81f:	xor	esi, esi
10000c821:	lea	rcx, [rip + 0x15e86] ## literal pool for: "local (%lu) and cen (%lu) crc mismatch"
10000c828:	xor	eax, eax
10000c82a:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000c82f:	mov	rdi, rbx
10000c832:	lea	rsi, [rip + 0xdf7e] ## literal pool for: ""
10000c839:	call	0x1000034f4
10000c83e:	movzx	eax, word ptr [r14]
10000c842:	mov	word ptr [r15], ax
10000c846:	movzx	eax, word ptr [r14 + 0x2c]
10000c84b:	mov	word ptr [r15 + 0x2c], ax
10000c850:	movzx	eax, word ptr [r14 + 0x2e]
10000c855:	mov	word ptr [r15 + 0x2e], ax
10000c85a:	movups	xmm0, xmmword ptr [r14 + 0x60]
10000c85f:	movups	xmmword ptr [r15 + 0x60], xmm0
10000c864:	movzx	eax, word ptr [r14 + 0x38]
10000c869:	mov	word ptr [r15 + 0x38], ax
10000c86e:	mov	rax, qword ptr [r14 + 0x48]
10000c872:	mov	qword ptr [r15 + 0x48], rax
10000c876:	mov	eax, dword ptr [r14 + 0x94]
10000c87d:	mov	dword ptr [r15 + 0x94], eax
10000c884:	lea	rax, [rip + 0x1ce21]
10000c88b:	cmp	dword ptr [rax], 0x0
10000c88e:	lea	rbx, [rip + 0x1cf63]
10000c895:	je	0x10000c89f
10000c897:	mov	rdi, r15
10000c89a:	call	0x10000f354
10000c89f:	mov	rdi, qword ptr [rbx]
10000c8a2:	call	0x100019728 ## symbol stub for: _ftello
10000c8a7:	mov	rcx, rbx
10000c8aa:	mov	rbx, rax
10000c8ad:	mov	rdi, qword ptr [rcx]
10000c8b0:	mov	rsi, qword ptr [r15 + 0x40]
10000c8b4:	xor	edx, edx
10000c8b6:	call	0x10001971c ## symbol stub for: _fseeko
10000c8bb:	test	eax, eax
10000c8bd:	jne	0x10000cfdd
10000c8c3:	mov	rdi, r15
10000c8c6:	mov	esi, 0x1
10000c8cb:	call	0x10000d090
10000c8d0:	test	eax, eax
10000c8d2:	lea	rsi, [rip + 0xdede] ## literal pool for: ""
10000c8d9:	je	0x10000c8e7
10000c8db:	lea	rdi, [rip + 0x15e0a] ## literal pool for: "Error rewriting local header"
10000c8e2:	call	0x1000034f4
10000c8e7:	lea	r15, [rip + 0x1cf0a]
10000c8ee:	mov	rdi, qword ptr [r15]
10000c8f1:	mov	rsi, rbx
10000c8f4:	xor	edx, edx
10000c8f6:	call	0x10001971c ## symbol stub for: _fseeko
10000c8fb:	test	eax, eax
10000c8fd:	lea	r14, [rip + 0x4e6cd]
10000c904:	jne	0x10000d008
10000c90a:	mov	rdi, qword ptr [r15]
10000c90d:	call	0x100019728 ## symbol stub for: _ftello
10000c912:	cmp	rbx, rax
10000c915:	jne	0x10000d033
10000c91b:	lea	rax, [rip + 0x1cd8a]
10000c922:	cmp	dword ptr [rax], 0x0
10000c925:	lea	rbx, [rip + 0x1ced4]
10000c92c:	mov	r15d, 0x1
10000c932:	je	0x10000c480
10000c938:	lea	rdi, [rip + 0xde78] ## literal pool for: ""
10000c93f:	mov	esi, 0x1
10000c944:	call	0x100003300
10000c949:	jmp	0x10000c480
10000c94e:	mov	r8, qword ptr [r14 + 0x70]
10000c952:	mov	edx, 0x13f1
10000c957:	lea	rbx, [rip + 0x1d1d2]
10000c95e:	mov	rdi, rbx
10000c961:	xor	esi, esi
10000c963:	lea	rcx, [rip + 0x15dc7] ## literal pool for: "no local entry: %s"
10000c96a:	xor	eax, eax
10000c96c:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000c971:	mov	r15d, 0x1
10000c977:	mov	rdi, rbx
10000c97a:	mov	esi, 0x1
10000c97f:	call	0x100003300
10000c984:	lea	r14, [rip + 0x4e646]
10000c98b:	lea	r12, [rbp - 0x90]
10000c992:	jmp	0x10000c479
10000c997:	lea	rdi, [rip + 0x15e41] ## literal pool for: "  Found spanning marker - could be split archive..."
10000c99e:	jmp	0x10000c9a7
10000c9a0:	lea	rdi, [rip + 0x15dec] ## literal pool for: "  Found spanning marker - expected as this is split (multi-disk) archive..."
10000c9a7:	lea	rsi, [rip + 0xde09] ## literal pool for: ""
10000c9ae:	call	0x100003422
10000c9b3:	jmp	0x10000c480
10000c9b8:	mov	rdi, qword ptr [rbx]
10000c9bb:	test	rdi, rdi
10000c9be:	je	0x10000c9c5
10000c9c0:	call	0x1000196ce ## symbol stub for: _fclose
10000c9c5:	mov	qword ptr [rbx], 0x0
10000c9cc:	mov	rdi, qword ptr [rbp - 0xa0]
10000c9d3:	call	0x100019716 ## symbol stub for: _free
10000c9d8:	cmp	dword ptr [rbp - 0x98], 0x2
10000c9df:	lea	r14, [rip + 0x1ce4a]
10000c9e6:	je	0x10000cadb
10000c9ec:	mov	rsi, qword ptr [r14]
10000c9ef:	inc	rsi
10000c9f2:	mov	qword ptr [r14], rsi
10000c9f5:	mov	dword ptr [rbp - 0x94], 0x0
10000c9ff:	lea	rax, [rip + 0x1ce22]
10000ca06:	cmp	rsi, qword ptr [rax]
10000ca09:	jb	0x10000bf07
10000ca0f:	jmp	0x10000ccb8
10000ca14:	mov	dword ptr [rbp - 0x94], r15d
10000ca1b:	mov	r15, rbx
10000ca1e:	lea	r14, [rip + 0x1ce0b]
10000ca25:	mov	rbx, qword ptr [rbp - 0xa0]
10000ca2c:	mov	rdi, qword ptr [r14]
10000ca2f:	call	0x1000128e3
10000ca34:	cmp	eax, 0x2
10000ca37:	je	0x10000cdfd
10000ca3d:	cmp	eax, 0x3
10000ca40:	je	0x10000ca8e
10000ca42:	cmp	eax, 0x9
10000ca45:	je	0x10000ce2f
10000ca4b:	mov	rdi, qword ptr [r13]
10000ca4f:	mov	rsi, qword ptr [r14]
10000ca52:	call	0x1000127e1
10000ca57:	mov	rbx, rax
10000ca5a:	mov	rdi, rax
10000ca5d:	lea	rsi, [rip + 0xf54c] ## literal pool for: "r"
10000ca64:	call	0x1000196f8 ## symbol stub for: _fopen
10000ca69:	mov	qword ptr [r15], rax
10000ca6c:	test	rax, rax
10000ca6f:	lea	r12, [rbp - 0x90]
10000ca76:	je	0x10000ca2c
10000ca78:	mov	qword ptr [rbp - 0xa0], rbx
10000ca7f:	mov	rbx, r15
10000ca82:	mov	r15d, dword ptr [rbp - 0x94]
10000ca89:	jmp	0x10000bf48
10000ca8e:	lea	r12, [rip + 0xdd22] ## literal pool for: ""
10000ca95:	mov	rdi, r12
10000ca98:	mov	esi, 0x1
10000ca9d:	call	0x100003300
10000caa2:	mov	r8, qword ptr [r14]
10000caa5:	mov	edx, 0x13f1
10000caaa:	lea	rbx, [rip + 0x1d07f]
10000cab1:	mov	rdi, rbx
10000cab4:	xor	esi, esi
10000cab6:	lea	rcx, [rip + 0x15a4a] ## literal pool for: "skipping disk %lu ...\n"
10000cabd:	xor	eax, eax
10000cabf:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000cac4:	mov	rdi, rbx
10000cac7:	mov	rsi, r12
10000caca:	call	0x1000034f4
10000cacf:	mov	r15d, dword ptr [rbp - 0x94]
10000cad6:	jmp	0x10000c9ec
10000cadb:	mov	dword ptr [rbp - 0x94], 0x0
10000cae5:	jmp	0x10000ccb8
10000caea:	movups	xmm0, xmmword ptr [rip + 0x1580d] ## literal pool for: "either this archive\n"
10000caf1:	lea	rbx, [rip + 0x1d038]
10000caf8:	movaps	xmmword ptr [rbx + 0x20], xmm0
10000cafc:	movups	xmm0, xmmword ptr [rip + 0x157eb] ## literal pool for: "DR) signature - either this archive\n"
10000cb03:	movaps	xmmword ptr [rbx + 0x10], xmm0
10000cb07:	movups	xmm0, xmmword ptr [rip + 0x157d0] ## literal pool for: "Missing end (EOCDR) signature - either this archive\n"
10000cb0e:	movaps	xmmword ptr [rbx], xmm0
10000cb11:	movabs	rax, 0xa657669686372
10000cb1b:	mov	qword ptr [rbx + 0x2d], rax
10000cb1f:	lea	rsi, [rip + 0x157ed] ## literal pool for: "                     is not readable or the end is damaged"
10000cb26:	mov	edx, 0x13f1
10000cb2b:	mov	rdi, rbx
10000cb2e:	call	0x10001968c ## symbol stub for: ___strcat_chk
10000cb33:	jmp	0x10000cb85
10000cb35:	lea	rdi, [rbp - 0x60]
10000cb39:	mov	esi, 0x1
10000cb3e:	mov	edx, 0x12
10000cb43:	call	0x100019710 ## symbol stub for: _fread
10000cb48:	cmp	rax, 0x11
10000cb4c:	ja	0x10000ccf7
10000cb52:	lea	rdx, [rip + 0xf6ed] ## literal pool for: "u"
10000cb59:	mov	rdi, rax
10000cb5c:	xor	esi, esi
10000cb5e:	call	0x100015a80
10000cb63:	lea	rbx, [rip + 0x1cfc6]
10000cb6a:	lea	rcx, [rip + 0x157dd] ## literal pool for: "End record (EOCDR) only %s bytes - assume truncated"
10000cb71:	mov	edx, 0x13f1
10000cb76:	mov	rdi, rbx
10000cb79:	xor	esi, esi
10000cb7b:	mov	r8, rax
10000cb7e:	xor	eax, eax
10000cb80:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000cb85:	lea	rsi, [rip + 0xdc2b] ## literal pool for: ""
10000cb8c:	mov	rdi, rbx
10000cb8f:	call	0x1000034f4
10000cb94:	lea	rax, [rip + 0x1cc8d]
10000cb9b:	cmp	qword ptr [rax], 0x0
10000cb9f:	je	0x10000cc59
10000cba5:	lea	rax, [rip + 0x1c8b0]
10000cbac:	cmp	dword ptr [rax], 0x0
10000cbaf:	je	0x10000cce4
10000cbb5:	lea	rax, [rip + 0x1cc6c]
10000cbbc:	cmp	qword ptr [rax], 0xf4240
10000cbc3:	jne	0x10000bea4
10000cbc9:	lea	rdi, [rip + 0x1589c] ## literal pool for: "Is this a single-disk archive?  (y/n): "
10000cbd0:	xor	eax, eax
10000cbd2:	call	0x1000197a0 ## symbol stub for: _printf
10000cbd7:	mov	rax, qword ptr [rip + 0x1744a] ## literal pool symbol address: ___stdoutp
10000cbde:	mov	rdi, qword ptr [rax]
10000cbe1:	call	0x1000196e6 ## symbol stub for: _fflush
10000cbe6:	mov	rax, qword ptr [rip + 0x17433] ## literal pool symbol address: ___stdinp
10000cbed:	mov	rdx, qword ptr [rax]
10000cbf0:	lea	rbx, [rip + 0x1cf39]
10000cbf7:	mov	rdi, rbx
10000cbfa:	mov	esi, 0x64
10000cbff:	call	0x1000196ec ## symbol stub for: _fgets
10000cc04:	test	rax, rax
10000cc07:	je	0x10000cc32
10000cc09:	mov	al, byte ptr [rbx]
10000cc0b:	or	al, 0x20
10000cc0d:	cmp	al, 0x79
10000cc0f:	jne	0x10000cc32
10000cc11:	lea	rax, [rip + 0x1cc10]
10000cc18:	mov	qword ptr [rax], 0x1
10000cc1f:	lea	rdi, [rip + 0x1586e] ## literal pool for: "  Assuming single-disk archive"
10000cc26:	lea	rsi, [rip + 0xdb8a] ## literal pool for: ""
10000cc2d:	call	0x100003422
10000cc32:	lea	rax, [rip + 0x1cbef]
10000cc39:	cmp	qword ptr [rax], 0xf4240
10000cc40:	jne	0x10000bea4
10000cc46:	lea	rax, [rip + 0x1cbdb]
10000cc4d:	mov	qword ptr [rax], 0x186a0
10000cc54:	jmp	0x10000bea4
10000cc59:	mov	rdi, qword ptr [r12]
10000cc5d:	xor	esi, esi
10000cc5f:	xor	edx, edx
10000cc61:	call	0x10001971c ## symbol stub for: _fseeko
10000cc66:	mov	rdi, qword ptr [r12]
10000cc6a:	test	eax, eax
10000cc6c:	je	0x10000cdb0
10000cc72:	call	0x1000196ce ## symbol stub for: _fclose
10000cc77:	mov	qword ptr [r12], 0x0
10000cc7f:	mov	rsi, qword ptr [r13]
10000cc83:	lea	rdi, [rip + 0x15631] ## literal pool for: "unable to seek in input file "
10000cc8a:	call	0x1000034f4
10000cc8f:	mov	dword ptr [rbp - 0x94], 0xb
10000cc99:	jmp	0x10000ccb8
10000cc9b:	lea	rdi, [rip + 0x158f3] ## literal pool for: "reading central directory"
10000cca2:	lea	rsi, [rip + 0xdb0e] ## literal pool for: ""
10000cca9:	call	0x1000034f4
10000ccae:	mov	dword ptr [rbp - 0x94], 0x4
10000ccb8:	mov	rax, qword ptr [rip + 0x17351] ## literal pool symbol address: ___stack_chk_guard
10000ccbf:	mov	rax, qword ptr [rax]
10000ccc2:	cmp	rax, qword ptr [rbp - 0x30]
10000ccc6:	jne	0x10000d073
10000cccc:	mov	eax, dword ptr [rbp - 0x94]
10000ccd2:	add	rsp, 0x88
10000ccd9:	pop	rbx
10000ccda:	pop	r12
10000ccdc:	pop	r13
10000ccde:	pop	r14
10000cce0:	pop	r15
10000cce2:	pop	rbp
10000cce3:	ret
10000cce4:	lea	rax, [rip + 0x1cb3d]
10000cceb:	mov	qword ptr [rax], 0x1
10000ccf2:	jmp	0x10000bea4
10000ccf7:	movzx	ecx, word ptr [rbp - 0x60]
10000ccfb:	lea	rax, [rcx + 0x1]
10000ccff:	lea	rdx, [rip + 0x1cb22]
10000cd06:	mov	qword ptr [rdx], rax
10000cd09:	lea	rdx, [rip + 0x1cb20]
10000cd10:	mov	qword ptr [rdx], rcx
10000cd13:	cmp	rcx, 0xffff
10000cd1a:	je	0x10000cd4e
10000cd1c:	movzx	ecx, word ptr [rbp - 0x5e]
10000cd20:	cmp	rcx, rax
10000cd23:	jbe	0x10000cd4e
10000cd25:	lea	rdi, [rip + 0x15656] ## literal pool for: "End record (EOCDR) has bad disk numbers - ignoring EOCDR"
10000cd2c:	lea	rsi, [rip + 0xda84] ## literal pool for: ""
10000cd33:	call	0x1000034f4
10000cd38:	lea	rax, [rip + 0x1cae9]
10000cd3f:	mov	qword ptr [rax], 0x0
10000cd46:	xor	r8d, r8d
10000cd49:	jmp	0x10000cf85
10000cd4e:	movzx	ebx, word ptr [rbp - 0x50]
10000cd52:	lea	r14, [rip + 0x1e1e7]
10000cd59:	mov	word ptr [r14], bx
10000cd5d:	test	bx, bx
10000cd60:	je	0x10000cf57
10000cd66:	lea	rdi, [rbx + 0x1]
10000cd6a:	call	0x100019758 ## symbol stub for: _malloc
10000cd6f:	lea	r15, [rip + 0x1cb72]
10000cd76:	mov	qword ptr [r15], rax
10000cd79:	test	rax, rax
10000cd7c:	je	0x10000ccae
10000cd82:	mov	rcx, qword ptr [r12]
10000cd86:	mov	edx, 0x1
10000cd8b:	mov	rdi, rax
10000cd8e:	mov	rsi, rbx
10000cd91:	call	0x100019710 ## symbol stub for: _fread
10000cd96:	mov	rdi, qword ptr [r15]
10000cd99:	cmp	rax, 0x1
10000cd9d:	jne	0x10000cf38
10000cda3:	movzx	eax, word ptr [r14]
10000cda7:	mov	byte ptr [rdi + rax], 0x0
10000cdab:	jmp	0x10000cf57
10000cdb0:	call	0x10000f226
10000cdb5:	test	eax, eax
10000cdb7:	je	0x10000cba5
10000cdbd:	mov	rdi, qword ptr [r12]
10000cdc1:	call	0x100019728 ## symbol stub for: _ftello
10000cdc6:	lea	rbx, [rip + 0x1ca6b]
10000cdcd:	mov	qword ptr [rbx], rax
10000cdd0:	cmp	rax, 0x4
10000cdd4:	jne	0x10000ce4d
10000cdd6:	lea	rdi, [rip + 0x4e1f4]
10000cddd:	lea	rsi, [rip + 0x15683] ## literal pool for: "PK\003\003"
10000cde4:	call	0x10000f2ed
10000cde9:	test	eax, eax
10000cdeb:	je	0x10000ce51
10000cded:	mov	rdi, qword ptr [r12]
10000cdf1:	call	0x10000f226
10000cdf6:	test	eax, eax
10000cdf8:	setne	cl
10000cdfb:	jmp	0x10000ce78
10000cdfd:	lea	rbx, [rip + 0xd9b3] ## literal pool for: ""
10000ce04:	mov	rdi, rbx
10000ce07:	mov	esi, 0x1
10000ce0c:	call	0x100003300
10000ce11:	lea	rdi, [rip + 0x156ca] ## literal pool for: "user ended reading - closing archive"
10000ce18:	mov	rsi, rbx
10000ce1b:	call	0x1000034f4
10000ce20:	mov	dword ptr [rbp - 0x94], 0x2
10000ce2a:	jmp	0x10000ccb8
10000ce2f:	lea	rdi, [rip + 0x15695] ## literal pool for: "could not find split: "
10000ce36:	mov	rsi, rbx
10000ce39:	call	0x1000034f4
10000ce3e:	mov	dword ptr [rbp - 0x94], 0x9
10000ce48:	jmp	0x10000ccb8
10000ce4d:	mov	cl, 0x1
10000ce4f:	ja	0x10000ce78
10000ce51:	lea	rdi, [rip + 0x4e179]
10000ce58:	lea	rsi, [rip + 0x15608] ## literal pool for: "PK\003\003"
10000ce5f:	call	0x10000f2ed
10000ce64:	mov	cl, 0x1
10000ce66:	test	eax, eax
10000ce68:	je	0x10000ce78
10000ce6a:	lea	rax, [rip + 0x1c9b7]
10000ce71:	mov	qword ptr [rax], 0x1869f
10000ce78:	test	cl, cl
10000ce7a:	je	0x10000cba5
10000ce80:	lea	rax, [rip + 0x1c9a1]
10000ce87:	cmp	qword ptr [rax], 0x0
10000ce8b:	jne	0x10000cba5
10000ce91:	mov	rdi, qword ptr [r12]
10000ce95:	call	0x100019728 ## symbol stub for: _ftello
10000ce9a:	mov	qword ptr [rbx], rax
10000ce9d:	cmp	rax, 0x8
10000cea1:	jne	0x10000cba5
10000cea7:	lea	rdi, [rip + 0x4e123]
10000ceae:	lea	rsi, [rip + 0x14eeb] ## literal pool for: "PK\003\004"
10000ceb5:	call	0x10000f2ed
10000ceba:	test	eax, eax
10000cebc:	je	0x10000cba5
10000cec2:	lea	rdi, [rip + 0x155a3] ## literal pool for: "Is this a single-disk archive?  (y/n): "
10000cec9:	xor	eax, eax
10000cecb:	call	0x1000197a0 ## symbol stub for: _printf
10000ced0:	mov	rax, qword ptr [rip + 0x17151] ## literal pool symbol address: ___stdoutp
10000ced7:	mov	rdi, qword ptr [rax]
10000ceda:	call	0x1000196e6 ## symbol stub for: _fflush
10000cedf:	mov	rax, qword ptr [rip + 0x1713a] ## literal pool symbol address: ___stdinp
10000cee6:	mov	rdx, qword ptr [rax]
10000cee9:	lea	rbx, [rip + 0x1cc40]
10000cef0:	mov	rdi, rbx
10000cef3:	mov	esi, 0x64
10000cef8:	call	0x1000196ec ## symbol stub for: _fgets
10000cefd:	test	rax, rax
10000cf00:	je	0x10000cba5
10000cf06:	mov	al, byte ptr [rbx]
10000cf08:	or	al, 0x20
10000cf0a:	cmp	al, 0x79
10000cf0c:	jne	0x10000cba5
10000cf12:	lea	rax, [rip + 0x1c90f]
10000cf19:	mov	qword ptr [rax], 0x1
10000cf20:	lea	rdi, [rip + 0x1556d] ## literal pool for: "  Assuming single-disk archive"
10000cf27:	lea	rsi, [rip + 0xd889] ## literal pool for: ""
10000cf2e:	call	0x100003422
10000cf33:	jmp	0x10000cba5
10000cf38:	call	0x100019716 ## symbol stub for: _free
10000cf3d:	mov	qword ptr [r15], 0x0
10000cf44:	lea	rdi, [rip + 0x15470] ## literal pool for: "zipfile comment truncated - ignoring"
10000cf4b:	lea	rsi, [rip + 0xd865] ## literal pool for: ""
10000cf52:	call	0x1000034f4
10000cf57:	lea	rax, [rip + 0x1c8ca]
10000cf5e:	mov	r8, qword ptr [rax]
10000cf61:	cmp	r8, 0x1
10000cf65:	jne	0x10000cf85
10000cf67:	lea	rdi, [rip + 0x1cbc2]
10000cf6e:	lea	rcx, [rip + 0x1549e] ## literal pool for: " Found end record (EOCDR) - says expect single disk archive"
10000cf75:	mov	edx, 0x13f1
10000cf7a:	xor	esi, esi
10000cf7c:	xor	eax, eax
10000cf7e:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000cf83:	jmp	0x10000cfa1
10000cf85:	lea	rdi, [rip + 0x1cba4]
10000cf8c:	lea	rcx, [rip + 0x1544d] ## literal pool for: " Found end record (EOCDR) - says expect %lu splits"
10000cf93:	mov	edx, 0x13f1
10000cf98:	xor	esi, esi
10000cf9a:	xor	eax, eax
10000cf9c:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000cfa1:	lea	rdi, [rip + 0x1cb88]
10000cfa8:	lea	rsi, [rip + 0xd808] ## literal pool for: ""
10000cfaf:	call	0x100003422
10000cfb4:	lea	rax, [rip + 0x1c92d]
10000cfbb:	cmp	qword ptr [rax], 0x0
10000cfbf:	je	0x10000cb94
10000cfc5:	lea	rdi, [rip + 0x15483] ## literal pool for: "  Found archive comment"
10000cfcc:	lea	rsi, [rip + 0xd7e4] ## literal pool for: ""
10000cfd3:	call	0x100003422
10000cfd8:	jmp	0x10000cb94
10000cfdd:	lea	rbx, [rip + 0x1c81c]
10000cfe4:	mov	rdi, qword ptr [rbx]
10000cfe7:	call	0x1000196ce ## symbol stub for: _fclose
10000cfec:	mov	qword ptr [rbx], 0x0
10000cff3:	call	0x100019674 ## symbol stub for: ___error
10000cff8:	mov	edi, dword ptr [rax]
10000cffa:	call	0x10001982a ## symbol stub for: _strerror
10000cfff:	lea	rdi, [rip + 0x156cf] ## literal pool for: "writing archive seek: "
10000d006:	jmp	0x10000d05c
10000d008:	lea	rbx, [rip + 0x1c7f1]
10000d00f:	mov	rdi, qword ptr [rbx]
10000d012:	call	0x1000196ce ## symbol stub for: _fclose
10000d017:	mov	qword ptr [rbx], 0x0
10000d01e:	call	0x100019674 ## symbol stub for: ___error
10000d023:	mov	edi, dword ptr [rax]
10000d025:	call	0x10001982a ## symbol stub for: _strerror
10000d02a:	lea	rdi, [rip + 0x156d8] ## literal pool for: "write archive seek: "
10000d031:	jmp	0x10000d05c
10000d033:	lea	rbx, [rip + 0x1c7c6]
10000d03a:	mov	rdi, qword ptr [rbx]
10000d03d:	call	0x1000196ce ## symbol stub for: _fclose
10000d042:	mov	qword ptr [rbx], 0x0
10000d049:	call	0x100019674 ## symbol stub for: ___error
10000d04e:	mov	edi, dword ptr [rax]
10000d050:	call	0x10001982a ## symbol stub for: _strerror
10000d055:	lea	rdi, [rip + 0x156c2] ## literal pool for: "seek after local: "
10000d05c:	mov	rsi, rax
10000d05f:	call	0x1000034f4
10000d064:	mov	dword ptr [rbp - 0x94], 0xe
10000d06e:	jmp	0x10000ccb8
10000d073:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
10000d078:	push	rbp
10000d079:	mov	rbp, rsp
10000d07c:	mov	rax, qword ptr [rdi]
10000d07f:	mov	rdi, qword ptr [rax + 0x70]
10000d083:	mov	rax, qword ptr [rsi]
10000d086:	mov	rsi, qword ptr [rax + 0x70]
10000d08a:	pop	rbp
10000d08b:	jmp	0x100015685
10000d090:	push	rbp
10000d091:	mov	rbp, rsp
10000d094:	push	r15
10000d096:	push	r14
10000d098:	push	r13
10000d09a:	push	r12
10000d09c:	push	rbx
10000d09d:	sub	rsp, 0x38
10000d0a1:	mov	ebx, esi
10000d0a3:	mov	r15, rdi
10000d0a6:	xor	eax, eax
10000d0a8:	mov	qword ptr [rbp - 0x38], rax
10000d0ac:	mov	qword ptr [rbp - 0x30], rax
10000d0b0:	mov	qword ptr [rbp - 0x40], rax
10000d0b4:	mov	rdi, qword ptr [rdi + 0x50]
10000d0b8:	lea	rsi, [rip + 0xf443] ## literal pool for: "-"
10000d0bf:	call	0x10001981e ## symbol stub for: _strcmp
10000d0c4:	test	ebx, ebx
10000d0c6:	mov	dword ptr [rbp - 0x44], ebx
10000d0c9:	lea	r14, [rip + 0x1c6d0]
10000d0d0:	je	0x10000d195
10000d0d6:	mov	ebx, dword ptr [r14]
10000d0d9:	mov	dword ptr [r14], 0x0
10000d0e0:	cmp	dword ptr [r15 + 0x1c], 0x0
10000d0e5:	je	0x10000d1ae
10000d0eb:	lea	rax, [rip + 0x1c376]
10000d0f2:	mov	ecx, dword ptr [rax]
10000d0f4:	mov	dword ptr [r14], 0x1
10000d0fb:	mov	eax, 0x1
10000d100:	test	ecx, ecx
10000d102:	jne	0x10000d12b
10000d104:	mov	rsi, qword ptr [r15 + 0x80]
10000d10b:	lea	rdi, [rip + 0x14dab] ## literal pool for: "Entry too big:"
10000d112:	call	0x1000034f4
10000d117:	lea	rsi, [rip + 0x14de0] ## literal pool for: "Large entry support disabled with -fz- but entry needs"
10000d11e:	mov	edi, 0x6
10000d123:	call	0x100002e30
10000d128:	mov	eax, dword ptr [r14]
10000d12b:	test	ebx, ebx
10000d12d:	jne	0x10000d170
10000d12f:	cmp	eax, 0x1
10000d132:	jne	0x10000d170
10000d134:	mov	rsi, qword ptr [r15 + 0x80]
10000d13b:	lea	rdi, [rip + 0x14d7b] ## literal pool for: "Entry too big:"
10000d142:	call	0x1000034f4
10000d147:	lea	rax, [rip + 0x1c31a]
10000d14e:	cmp	dword ptr [rax], 0x0
10000d151:	lea	rax, [rip + 0x14ddd] ## literal pool for: "Compressed/stored entry unexpectedly large - do not use -fz-"
10000d158:	lea	rsi, [rip + 0x14e13] ## literal pool for: "Poor compression resulted in unexpectedly large entry - try -fz"
10000d15f:	cmove	rsi, rax
10000d163:	mov	edi, 0x6
10000d168:	call	0x100002e30
10000d16d:	mov	eax, dword ptr [r14]
10000d170:	test	eax, eax
10000d172:	je	0x10000d1dd
10000d174:	lea	rcx, [rip + 0x1c629]
10000d17b:	mov	dword ptr [rcx], 0x1
10000d181:	cmp	word ptr [r15 + 0x2], 0x2c
10000d187:	ja	0x10000d1e6
10000d189:	mov	word ptr [r15 + 0x2], 0x2d
10000d190:	mov	eax, dword ptr [r14]
10000d193:	jmp	0x10000d1e6
10000d195:	mov	dword ptr [r14], 0x0
10000d19c:	cmp	dword ptr [r15 + 0x1c], 0x0
10000d1a1:	je	0x10000d1fc
10000d1a3:	lea	rax, [rip + 0x1c2be]
10000d1aa:	mov	ecx, dword ptr [rax]
10000d1ac:	jmp	0x10000d228
10000d1ae:	test	eax, eax
10000d1b0:	sete	al
10000d1b3:	lea	rcx, [rip + 0x1c2ae]
10000d1ba:	mov	ecx, dword ptr [rcx]
10000d1bc:	test	ecx, ecx
10000d1be:	setne	dl
10000d1c1:	cmp	dword ptr [r15 + 0x24], 0x0
10000d1c6:	jne	0x10000d0f4
10000d1cc:	cmp	ecx, 0x1
10000d1cf:	je	0x10000d0f4
10000d1d5:	and	al, dl
10000d1d7:	jne	0x10000d0f4
10000d1dd:	mov	dword ptr [r14], 0x0
10000d1e4:	xor	eax, eax
10000d1e6:	test	ebx, ebx
10000d1e8:	je	0x10000d270
10000d1ee:	cmp	eax, 0x1
10000d1f1:	je	0x10000d270
10000d1f3:	mov	word ptr [r15 + 0x2], 0x14
10000d1fa:	jmp	0x10000d26b
10000d1fc:	test	eax, eax
10000d1fe:	sete	dl
10000d201:	lea	rax, [rip + 0x1c260]
10000d208:	mov	ecx, dword ptr [rax]
10000d20a:	test	ecx, ecx
10000d20c:	setne	sil
10000d210:	cmp	dword ptr [r15 + 0x24], 0x0
10000d215:	jne	0x10000d228
10000d217:	cmp	ecx, 0x1
10000d21a:	je	0x10000d228
10000d21c:	xor	eax, eax
10000d21e:	mov	ebx, 0x0
10000d223:	and	dl, sil
10000d226:	je	0x10000d270
10000d228:	test	ecx, ecx
10000d22a:	jne	0x10000d250
10000d22c:	mov	rsi, qword ptr [r15 + 0x80]
10000d233:	lea	rdi, [rip + 0x14c83] ## literal pool for: "Entry too big:"
10000d23a:	call	0x1000034f4
10000d23f:	lea	rsi, [rip + 0x14c86] ## literal pool for: "Large entry support disabled with -fz- but needed"
10000d246:	mov	edi, 0x6
10000d24b:	call	0x100002e30
10000d250:	mov	dword ptr [r14], 0x1
10000d257:	mov	eax, 0x1
10000d25c:	cmp	word ptr [r15 + 0x2], 0x2c
10000d262:	ja	0x10000d26b
10000d264:	mov	word ptr [r15 + 0x2], 0x2d
10000d26b:	mov	ebx, 0x1
10000d270:	or	eax, ebx
10000d272:	je	0x10000d365
10000d278:	movzx	r12d, word ptr [r15 + 0x2a]
10000d27d:	test	r12, r12
10000d280:	je	0x10000d321
10000d286:	mov	r13, qword ptr [r15 + 0x58]
10000d28a:	test	r13, r13
10000d28d:	je	0x10000d321
10000d293:	lea	rax, [r12 + r13]
10000d297:	add	rax, -0x4
10000d29b:	cmp	rax, r13
10000d29e:	jbe	0x10000d2c8
10000d2a0:	mov	rbx, r13
10000d2a3:	cmp	word ptr [rbx], 0x1
10000d2a7:	movzx	ecx, byte ptr [rbx + 0x2]
10000d2ab:	je	0x10000d57c
10000d2b1:	movzx	edx, byte ptr [rbx + 0x3]
10000d2b5:	shl	rdx, 0x8
10000d2b9:	or	rdx, rcx
10000d2bc:	add	rbx, rdx
10000d2bf:	add	rbx, 0x4
10000d2c3:	cmp	rbx, rax
10000d2c6:	jb	0x10000d2a3
10000d2c8:	lea	rdi, [r12 + 0x14]
10000d2cd:	call	0x100019758 ## symbol stub for: _malloc
10000d2d2:	mov	rbx, rax
10000d2d5:	test	rax, rax
10000d2d8:	jne	0x10000d2f4
10000d2da:	lea	rsi, [rip + 0x15d7e] ## literal pool for: "Zip64 Extra Field"
10000d2e1:	mov	edi, 0x4
10000d2e6:	call	0x100002e30
10000d2eb:	mov	r13, qword ptr [r15 + 0x58]
10000d2ef:	movzx	r12d, word ptr [r15 + 0x2a]
10000d2f4:	mov	rdi, rbx
10000d2f7:	mov	rsi, r13
10000d2fa:	mov	rdx, r12
10000d2fd:	call	0x100019764 ## symbol stub for: _memmove
10000d302:	mov	rdi, qword ptr [r15 + 0x58]
10000d306:	call	0x100019716 ## symbol stub for: _free
10000d30b:	mov	qword ptr [r15 + 0x58], rbx
10000d30f:	movzx	eax, word ptr [r15 + 0x2a]
10000d314:	add	rbx, rax
10000d317:	add	eax, 0x14
10000d31a:	mov	word ptr [r15 + 0x2a], ax
10000d31f:	jmp	0x10000d34f
10000d321:	mov	edi, 0x14
10000d326:	call	0x100019758 ## symbol stub for: _malloc
10000d32b:	mov	rbx, rax
10000d32e:	mov	qword ptr [r15 + 0x58], rax
10000d332:	test	rax, rax
10000d335:	jne	0x10000d348
10000d337:	lea	rsi, [rip + 0x15d09] ## literal pool for: "Zip64 local extra field"
10000d33e:	mov	edi, 0x4
10000d343:	call	0x100002e30
10000d348:	mov	word ptr [r15 + 0x2a], 0x14
10000d34f:	mov	dword ptr [rbx], 0x100001
10000d355:	mov	rax, qword ptr [r15 + 0x20]
10000d359:	mov	qword ptr [rbx + 0x4], rax
10000d35d:	mov	rax, qword ptr [r15 + 0x18]
10000d361:	mov	qword ptr [rbx + 0xc], rax
10000d365:	lea	rbx, [rbp - 0x38]
10000d369:	lea	r12, [rbp - 0x30]
10000d36d:	lea	r13, [rbp - 0x40]
10000d371:	mov	edi, 0x4034b50
10000d376:	mov	rsi, rbx
10000d379:	mov	rdx, r12
10000d37c:	mov	rcx, r13
10000d37f:	call	0x10000d62f
10000d384:	movzx	edi, word ptr [r15 + 0x2]
10000d389:	mov	rsi, rbx
10000d38c:	mov	rdx, r12
10000d38f:	mov	rcx, r13
10000d392:	call	0x10000d6aa
10000d397:	movzx	edi, word ptr [r15 + 0x3a]
10000d39c:	mov	rsi, rbx
10000d39f:	mov	rdx, r12
10000d3a2:	mov	rcx, r13
10000d3a5:	call	0x10000d6aa
10000d3aa:	movzx	edi, word ptr [r15 + 0x6]
10000d3af:	mov	rsi, rbx
10000d3b2:	mov	rdx, r12
10000d3b5:	mov	rcx, r13
10000d3b8:	call	0x10000d6aa
10000d3bd:	mov	rdi, qword ptr [r15 + 0x8]
10000d3c1:	mov	rsi, rbx
10000d3c4:	mov	rdx, r12
10000d3c7:	mov	rcx, r13
10000d3ca:	call	0x10000d62f
10000d3cf:	mov	rdi, qword ptr [r15 + 0x10]
10000d3d3:	mov	rsi, rbx
10000d3d6:	mov	rdx, r12
10000d3d9:	mov	rcx, r13
10000d3dc:	call	0x10000d62f
10000d3e1:	lea	rax, [rip + 0x1c3b8]
10000d3e8:	cmp	dword ptr [rax], 0x0
10000d3eb:	je	0x10000d40b
10000d3ed:	mov	r12d, 0xffffffff
10000d3f3:	lea	rsi, [rbp - 0x38]
10000d3f7:	lea	rdx, [rbp - 0x30]
10000d3fb:	lea	rcx, [rbp - 0x40]
10000d3ff:	mov	edi, 0xffffffff
10000d404:	call	0x10000d62f
10000d409:	jmp	0x10000d424
10000d40b:	mov	rdi, qword ptr [r15 + 0x18]
10000d40f:	lea	rsi, [rbp - 0x38]
10000d413:	lea	rdx, [rbp - 0x30]
10000d417:	lea	rcx, [rbp - 0x40]
10000d41b:	call	0x10000d62f
10000d420:	mov	r12, qword ptr [r15 + 0x20]
10000d424:	lea	rbx, [rbp - 0x38]
10000d428:	lea	r13, [rbp - 0x30]
10000d42c:	lea	r14, [rbp - 0x40]
10000d430:	mov	rdi, r12
10000d433:	mov	rsi, rbx
10000d436:	mov	rdx, r13
10000d439:	mov	rcx, r14
10000d43c:	call	0x10000d62f
10000d441:	movzx	edi, word ptr [r15 + 0x28]
10000d446:	mov	rsi, rbx
10000d449:	mov	rdx, r13
10000d44c:	mov	rcx, r14
10000d44f:	call	0x10000d6aa
10000d454:	movzx	edi, word ptr [r15 + 0x2a]
10000d459:	mov	rsi, rbx
10000d45c:	mov	rdx, r13
10000d45f:	mov	rcx, r14
10000d462:	call	0x10000d6aa
10000d467:	mov	rdi, qword ptr [r15 + 0x70]
10000d46b:	movzx	esi, word ptr [r15 + 0x28]
10000d470:	mov	rdx, rbx
10000d473:	mov	rcx, r13
10000d476:	mov	r8, r14
10000d479:	call	0x10000d726
10000d47e:	movzx	esi, word ptr [r15 + 0x2a]
10000d483:	test	esi, esi
10000d485:	je	0x10000d49c
10000d487:	mov	rdi, qword ptr [r15 + 0x58]
10000d48b:	lea	rdx, [rbp - 0x38]
10000d48f:	lea	rcx, [rbp - 0x30]
10000d493:	lea	r8, [rbp - 0x40]
10000d497:	call	0x10000d726
10000d49c:	cmp	dword ptr [rbp - 0x44], 0x1
10000d4a0:	jne	0x10000d51e
10000d4a2:	lea	rax, [rip + 0x1c3fb]
10000d4a9:	cmp	dword ptr [rax], 0x1
10000d4ac:	mov	r14, qword ptr [rbp - 0x38]
10000d4b0:	mov	r15, qword ptr [rbp - 0x30]
10000d4b4:	jne	0x10000d53d
10000d4ba:	lea	r12, [rip + 0x1c3c7]
10000d4c1:	mov	rcx, qword ptr [r12]
10000d4c5:	mov	esi, 0x1
10000d4ca:	mov	rdi, r14
10000d4cd:	mov	rdx, r15
10000d4d0:	call	0x10001972e ## symbol stub for: _fwrite
10000d4d5:	mov	ebx, 0xa
10000d4da:	cmp	rax, r15
10000d4dd:	jne	0x10000d563
10000d4e3:	lea	rax, [rip + 0x1c35e]
10000d4ea:	mov	rdi, qword ptr [rax]
10000d4ed:	lea	rax, [rip + 0x1c35c]
10000d4f4:	cmp	rdi, qword ptr [rax]
10000d4f7:	je	0x10000d561
10000d4f9:	mov	rsi, qword ptr [r12]
10000d4fd:	lea	rbx, [rip + 0x1c37c]
10000d504:	mov	rdx, qword ptr [rbx]
10000d507:	call	0x10001374d
10000d50c:	mov	qword ptr [r12], 0x0
10000d514:	mov	rdi, qword ptr [rbx]
10000d517:	call	0x100019716 ## symbol stub for: _free
10000d51c:	jmp	0x10000d561
10000d51e:	mov	r14, qword ptr [rbp - 0x38]
10000d522:	mov	r15, qword ptr [rbp - 0x30]
10000d526:	mov	esi, 0x1
10000d52b:	mov	rdi, r14
10000d52e:	mov	rdx, r15
10000d531:	mov	ecx, 0x1
10000d536:	call	0x1000121b7
10000d53b:	jmp	0x10000d557
10000d53d:	lea	rax, [rip + 0x1c2b4]
10000d544:	mov	rcx, qword ptr [rax]
10000d547:	mov	esi, 0x1
10000d54c:	mov	rdi, r14
10000d54f:	mov	rdx, r15
10000d552:	call	0x10001972e ## symbol stub for: _fwrite
10000d557:	mov	ebx, 0xa
10000d55c:	cmp	rax, r15
10000d55f:	jne	0x10000d563
10000d561:	xor	ebx, ebx
10000d563:	mov	rdi, r14
10000d566:	call	0x100019716 ## symbol stub for: _free
10000d56b:	mov	eax, ebx
10000d56d:	add	rsp, 0x38
10000d571:	pop	rbx
10000d572:	pop	r12
10000d574:	pop	r13
10000d576:	pop	r14
10000d578:	pop	r15
10000d57a:	pop	rbp
10000d57b:	ret
10000d57c:	movzx	r14d, byte ptr [rbx + 0x3]
10000d581:	shl	r14, 0x8
10000d585:	or	r14, rcx
10000d588:	cmp	r14d, 0x10
10000d58c:	je	0x10000d34f
10000d592:	sub	r12d, r14d
10000d595:	add	r12d, 0x10
10000d599:	movzx	edi, r12w
10000d59d:	call	0x100019758 ## symbol stub for: _malloc
10000d5a2:	test	rax, rax
10000d5a5:	jne	0x10000d5c2
10000d5a7:	lea	rsi, [rip + 0x15ab1] ## literal pool for: "Zip64 Extra Field"
10000d5ae:	mov	edi, 0x4
10000d5b3:	mov	r13, rax
10000d5b6:	call	0x100002e30
10000d5bb:	mov	rax, r13
10000d5be:	mov	r13, qword ptr [r15 + 0x58]
10000d5c2:	mov	qword ptr [rbp - 0x50], rax
10000d5c6:	mov	rcx, rbx
10000d5c9:	sub	rcx, r13
10000d5cc:	mov	qword ptr [rbp - 0x60], rcx
10000d5d0:	movzx	edx, cx
10000d5d3:	mov	qword ptr [rbp - 0x58], rdx
10000d5d7:	mov	rdi, rax
10000d5da:	mov	rsi, r13
10000d5dd:	call	0x10001975e ## symbol stub for: _memcpy
10000d5e2:	mov	r13, qword ptr [rbp - 0x50]
10000d5e6:	add	r13, qword ptr [rbp - 0x58]
10000d5ea:	lea	rsi, [rbx + r14]
10000d5ee:	add	rsi, 0x4
10000d5f2:	movzx	eax, word ptr [r15 + 0x2a]
10000d5f7:	mov	rcx, qword ptr [rbp - 0x60]
10000d5fb:	add	ecx, r14d
10000d5fe:	sub	eax, ecx
10000d600:	movzx	ebx, ax
10000d603:	mov	rdi, r13
10000d606:	mov	rdx, rbx
10000d609:	call	0x10001975e ## symbol stub for: _memcpy
10000d60e:	mov	word ptr [r15 + 0x2a], r12w
10000d613:	mov	rdi, qword ptr [r15 + 0x58]
10000d617:	call	0x100019716 ## symbol stub for: _free
10000d61c:	mov	rax, qword ptr [rbp - 0x50]
10000d620:	mov	qword ptr [r15 + 0x58], rax
10000d624:	add	r13, rbx
10000d627:	mov	rbx, r13
10000d62a:	jmp	0x10000d34f
10000d62f:	push	rbp
10000d630:	mov	rbp, rsp
10000d633:	push	r15
10000d635:	push	r14
10000d637:	push	rbx
10000d638:	push	rax
10000d639:	mov	r15, rdx
10000d63c:	mov	rbx, rsi
10000d63f:	mov	r14, rdi
10000d642:	mov	rdi, qword ptr [rsi]
10000d645:	test	rdi, rdi
10000d648:	je	0x10000d667
10000d64a:	mov	rsi, qword ptr [rcx]
10000d64d:	lea	rax, [rsi - 0x5]
10000d651:	cmp	qword ptr [r15], rax
10000d654:	jbe	0x10000d691
10000d656:	add	rsi, 0x400
10000d65d:	mov	qword ptr [rcx], rsi
10000d660:	call	0x1000197d6 ## symbol stub for: _realloc
10000d665:	jmp	0x10000d678
10000d667:	mov	qword ptr [rcx], 0x400
10000d66e:	mov	edi, 0x400
10000d673:	call	0x100019758 ## symbol stub for: _malloc
10000d678:	mov	qword ptr [rbx], rax
10000d67b:	test	rax, rax
10000d67e:	jne	0x10000d691
10000d680:	lea	rsi, [rip + 0x159ea] ## literal pool for: "append_ulong_to_mem"
10000d687:	mov	edi, 0x4
10000d68c:	call	0x100002e30
10000d691:	mov	rax, qword ptr [rbx]
10000d694:	mov	rcx, qword ptr [r15]
10000d697:	mov	dword ptr [rax + rcx], r14d
10000d69b:	add	qword ptr [r15], 0x4
10000d69f:	add	rsp, 0x8
10000d6a3:	pop	rbx
10000d6a4:	pop	r14
10000d6a6:	pop	r15
10000d6a8:	pop	rbp
10000d6a9:	ret
10000d6aa:	push	rbp
10000d6ab:	mov	rbp, rsp
10000d6ae:	push	r15
10000d6b0:	push	r14
10000d6b2:	push	rbx
10000d6b3:	push	rax
10000d6b4:	mov	r15, rdx
10000d6b7:	mov	rbx, rsi
10000d6ba:	mov	r14d, edi
10000d6bd:	mov	rdi, qword ptr [rsi]
10000d6c0:	test	rdi, rdi
10000d6c3:	je	0x10000d6e2
10000d6c5:	mov	rsi, qword ptr [rcx]
10000d6c8:	lea	rax, [rsi - 0x3]
10000d6cc:	cmp	qword ptr [r15], rax
10000d6cf:	jbe	0x10000d70c
10000d6d1:	add	rsi, 0x400
10000d6d8:	mov	qword ptr [rcx], rsi
10000d6db:	call	0x1000197d6 ## symbol stub for: _realloc
10000d6e0:	jmp	0x10000d6f3
10000d6e2:	mov	qword ptr [rcx], 0x400
10000d6e9:	mov	edi, 0x400
10000d6ee:	call	0x100019758 ## symbol stub for: _malloc
10000d6f3:	mov	qword ptr [rbx], rax
10000d6f6:	test	rax, rax
10000d6f9:	jne	0x10000d70c
10000d6fb:	lea	rsi, [rip + 0x15983] ## literal pool for: "append_ushort_to_mem"
10000d702:	mov	edi, 0x4
10000d707:	call	0x100002e30
10000d70c:	mov	rax, qword ptr [rbx]
10000d70f:	mov	rcx, qword ptr [r15]
10000d712:	mov	word ptr [rax + rcx], r14w
10000d717:	add	qword ptr [r15], 0x2
10000d71b:	add	rsp, 0x8
10000d71f:	pop	rbx
10000d720:	pop	r14
10000d722:	pop	r15
10000d724:	pop	rbp
10000d725:	ret
10000d726:	test	rdi, rdi
10000d729:	je	0x10000d7ce
10000d72f:	push	rbp
10000d730:	mov	rbp, rsp
10000d733:	push	r15
10000d735:	push	r14
10000d737:	push	r13
10000d739:	push	r12
10000d73b:	push	rbx
10000d73c:	push	rax
10000d73d:	mov	r14, rcx
10000d740:	mov	r15, rdx
10000d743:	mov	r12d, esi
10000d746:	mov	r13, rdi
10000d749:	mov	edi, 0x400
10000d74e:	cmp	esi, edi
10000d750:	cmova	edi, esi
10000d753:	mov	ebx, esi
10000d755:	mov	rax, qword ptr [rdx]
10000d758:	test	rax, rax
10000d75b:	je	0x10000d77f
10000d75d:	mov	rcx, qword ptr [r14]
10000d760:	add	rcx, rbx
10000d763:	mov	rsi, qword ptr [r8]
10000d766:	lea	rdx, [rsi - 0x1]
10000d76a:	cmp	rcx, rdx
10000d76d:	jbe	0x10000d7a0
10000d76f:	add	rsi, rdi
10000d772:	mov	qword ptr [r8], rsi
10000d775:	mov	rdi, rax
10000d778:	call	0x1000197d6 ## symbol stub for: _realloc
10000d77d:	jmp	0x10000d787
10000d77f:	mov	qword ptr [r8], rdi
10000d782:	call	0x100019758 ## symbol stub for: _malloc
10000d787:	mov	qword ptr [r15], rax
10000d78a:	test	rax, rax
10000d78d:	jne	0x10000d7a0
10000d78f:	lea	rsi, [rip + 0x15904] ## literal pool for: "append_string_to_mem"
10000d796:	mov	edi, 0x4
10000d79b:	call	0x100002e30
10000d7a0:	test	r12d, r12d
10000d7a3:	je	0x10000d7bd
10000d7a5:	xor	eax, eax
10000d7a7:	mov	rcx, qword ptr [r15]
10000d7aa:	add	rcx, qword ptr [r14]
10000d7ad:	mov	dl, byte ptr [r13 + rax]
10000d7b2:	mov	byte ptr [rax + rcx], dl
10000d7b5:	inc	rax
10000d7b8:	cmp	rbx, rax
10000d7bb:	jne	0x10000d7a7
10000d7bd:	add	qword ptr [r14], rbx
10000d7c0:	add	rsp, 0x8
10000d7c4:	pop	rbx
10000d7c5:	pop	r12
10000d7c7:	pop	r13
10000d7c9:	pop	r14
10000d7cb:	pop	r15
10000d7cd:	pop	rbp
10000d7ce:	ret
10000d7cf:	push	rbp
10000d7d0:	mov	rbp, rsp
10000d7d3:	push	r15
10000d7d5:	push	r14
10000d7d7:	push	r12
10000d7d9:	push	rbx
10000d7da:	sub	rsp, 0x20
10000d7de:	mov	rbx, rdi
10000d7e1:	xor	eax, eax
10000d7e3:	lea	r14, [rbp - 0x30]
10000d7e7:	mov	qword ptr [r14], rax
10000d7ea:	lea	r15, [rbp - 0x28]
10000d7ee:	mov	qword ptr [r15], rax
10000d7f1:	lea	r12, [rbp - 0x38]
10000d7f5:	mov	qword ptr [r12], rax
10000d7f9:	mov	edi, 0x8074b50
10000d7fe:	mov	rsi, r14
10000d801:	mov	rdx, r15
10000d804:	mov	rcx, r12
10000d807:	call	0x10000d62f
10000d80c:	mov	rdi, qword ptr [rbx + 0x10]
10000d810:	mov	rsi, r14
10000d813:	mov	rdx, r15
10000d816:	mov	rcx, r12
10000d819:	call	0x10000d62f
10000d81e:	lea	rax, [rip + 0x1bf7b]
10000d825:	cmp	dword ptr [rax], 0x0
10000d828:	mov	rdi, qword ptr [rbx + 0x18]
10000d82c:	lea	r14, [rbp - 0x30]
10000d830:	lea	r15, [rbp - 0x28]
10000d834:	lea	r12, [rbp - 0x38]
10000d838:	mov	rsi, r14
10000d83b:	mov	rdx, r15
10000d83e:	mov	rcx, r12
10000d841:	je	0x10000d85c
10000d843:	call	0x10000d8b5
10000d848:	mov	rdi, qword ptr [rbx + 0x20]
10000d84c:	mov	rsi, r14
10000d84f:	mov	rdx, r15
10000d852:	mov	rcx, r12
10000d855:	call	0x10000d8b5
10000d85a:	jmp	0x10000d873
10000d85c:	call	0x10000d62f
10000d861:	mov	rdi, qword ptr [rbx + 0x20]
10000d865:	mov	rsi, r14
10000d868:	mov	rdx, r15
10000d86b:	mov	rcx, r12
10000d86e:	call	0x10000d62f
10000d873:	mov	rbx, qword ptr [rbp - 0x30]
10000d877:	mov	r14, qword ptr [rbp - 0x28]
10000d87b:	mov	esi, 0x1
10000d880:	mov	rdi, rbx
10000d883:	mov	rdx, r14
10000d886:	mov	ecx, 0x3
10000d88b:	call	0x1000121b7
10000d890:	mov	r15, rax
10000d893:	mov	rdi, rbx
10000d896:	call	0x100019716 ## symbol stub for: _free
10000d89b:	xor	ecx, ecx
10000d89d:	cmp	r15, r14
10000d8a0:	mov	eax, 0xa
10000d8a5:	cmove	eax, ecx
10000d8a8:	add	rsp, 0x20
10000d8ac:	pop	rbx
10000d8ad:	pop	r12
10000d8af:	pop	r14
10000d8b1:	pop	r15
10000d8b3:	pop	rbp
10000d8b4:	ret
10000d8b5:	push	rbp
10000d8b6:	mov	rbp, rsp
10000d8b9:	push	r15
10000d8bb:	push	r14
10000d8bd:	push	rbx
10000d8be:	push	rax
10000d8bf:	mov	r15, rdx
10000d8c2:	mov	rbx, rsi
10000d8c5:	mov	r14, rdi
10000d8c8:	mov	rdi, qword ptr [rsi]
10000d8cb:	test	rdi, rdi
10000d8ce:	je	0x10000d8ed
10000d8d0:	mov	rsi, qword ptr [rcx]
10000d8d3:	lea	rax, [rsi - 0x9]
10000d8d7:	cmp	qword ptr [r15], rax
10000d8da:	jbe	0x10000d917
10000d8dc:	add	rsi, 0x400
10000d8e3:	mov	qword ptr [rcx], rsi
10000d8e6:	call	0x1000197d6 ## symbol stub for: _realloc
10000d8eb:	jmp	0x10000d8fe
10000d8ed:	mov	qword ptr [rcx], 0x400
10000d8f4:	mov	edi, 0x400
10000d8f9:	call	0x100019758 ## symbol stub for: _malloc
10000d8fe:	mov	qword ptr [rbx], rax
10000d901:	test	rax, rax
10000d904:	jne	0x10000d917
10000d906:	lea	rsi, [rip + 0x157a2] ## literal pool for: "append_int64_to_mem"
10000d90d:	mov	edi, 0x4
10000d912:	call	0x100002e30
10000d917:	mov	rax, qword ptr [rbx]
10000d91a:	mov	rcx, qword ptr [r15]
10000d91d:	mov	qword ptr [rax + rcx], r14
10000d921:	add	qword ptr [r15], 0x8
10000d925:	add	rsp, 0x8
10000d929:	pop	rbx
10000d92a:	pop	r14
10000d92c:	pop	r15
10000d92e:	pop	rbp
10000d92f:	ret
10000d930:	push	rbp
10000d931:	mov	rbp, rsp
10000d934:	push	r15
10000d936:	push	r14
10000d938:	push	r13
10000d93a:	push	r12
10000d93c:	push	rbx
10000d93d:	sub	rsp, 0x48
10000d941:	mov	r14, rdi
10000d944:	xor	eax, eax
10000d946:	mov	qword ptr [rbp - 0x48], rax
10000d94a:	mov	qword ptr [rbp - 0x40], rax
10000d94e:	mov	qword ptr [rbp - 0x50], rax
10000d952:	movzx	r8d, word ptr [rdi + 0x28]
10000d957:	mov	r12, qword ptr [rdi + 0x40]
10000d95b:	mov	rax, qword ptr [rdi + 0x18]
10000d95f:	mov	rcx, qword ptr [rdi + 0x20]
10000d963:	mov	rdx, rcx
10000d966:	or	rdx, r12
10000d969:	shr	rdx, 0x20
10000d96d:	jne	0x10000d992
10000d96f:	mov	rdx, rax
10000d972:	shr	rdx, 0x20
10000d976:	jne	0x10000d992
10000d978:	cmp	qword ptr [r14 + 0x30], 0xffff
10000d980:	ja	0x10000d992
10000d982:	lea	rdx, [rip + 0x1badf]
10000d989:	cmp	dword ptr [rdx], 0x1
10000d98c:	jne	0x10000db62
10000d992:	mov	rdx, rax
10000d995:	shr	rdx, 0x20
10000d999:	shr	rcx, 0x20
10000d99d:	setne	bl
10000d9a0:	lea	r9, [rip + 0x1bac1]
10000d9a7:	mov	esi, dword ptr [r9]
10000d9aa:	cmp	esi, 0x1
10000d9ad:	sete	cl
10000d9b0:	or	cl, bl
10000d9b2:	test	rdx, rdx
10000d9b5:	movzx	edx, cl
10000d9b8:	lea	edi, [8*rdx + 0x4]
10000d9bf:	lea	edx, [8*rdx + 0xc]
10000d9c6:	cmove	edx, edi
10000d9c9:	mov	rdi, r12
10000d9cc:	shr	rdi, 0x20
10000d9d0:	lea	ebx, [rdx + 0x8]
10000d9d3:	test	rdi, rdi
10000d9d6:	cmove	ebx, edx
10000d9d9:	or	rax, r12
10000d9dc:	shr	rax, 0x20
10000d9e0:	setne	al
10000d9e3:	lea	r13d, [rbx + 0x4]
10000d9e7:	cmp	qword ptr [r14 + 0x30], 0xffff
10000d9ef:	seta	dl
10000d9f2:	cmovbe	r13d, ebx
10000d9f6:	test	esi, esi
10000d9f8:	jne	0x10000da1d
10000d9fa:	or	al, dl
10000d9fc:	or	cl, al
10000d9fe:	je	0x10000da1d
10000da00:	lea	rdi, [rip + 0x156bc] ## literal pool for: "Large entry support disabled using -fz- but needed"
10000da07:	lea	rsi, [rip + 0xcda9] ## literal pool for: ""
10000da0e:	call	0x1000034f4
10000da13:	mov	eax, 0x6
10000da18:	jmp	0x10000dd69
10000da1d:	mov	r15, qword ptr [r14 + 0x60]
10000da21:	test	r15, r15
10000da24:	je	0x10000dabb
10000da2a:	mov	qword ptr [rbp - 0x38], r12
10000da2e:	movzx	r12d, word ptr [r14 + 0x2c]
10000da33:	lea	rax, [r15 + r12]
10000da37:	add	rax, -0x4
10000da3b:	cmp	rax, r15
10000da3e:	mov	word ptr [rbp - 0x2a], r8w
10000da43:	jbe	0x10000da6d
10000da45:	mov	rbx, r15
10000da48:	cmp	word ptr [rbx], 0x1
10000da4c:	movzx	ecx, byte ptr [rbx + 0x2]
10000da50:	je	0x10000dd78
10000da56:	movzx	edx, byte ptr [rbx + 0x3]
10000da5a:	shl	rdx, 0x8
10000da5e:	or	rdx, rcx
10000da61:	add	rbx, rdx
10000da64:	add	rbx, 0x4
10000da68:	cmp	rbx, rax
10000da6b:	jb	0x10000da48
10000da6d:	movzx	edi, r13w
10000da71:	add	rdi, r12
10000da74:	call	0x100019758 ## symbol stub for: _malloc
10000da79:	test	rax, rax
10000da7c:	je	0x10000de4e
10000da82:	mov	rbx, rax
10000da85:	mov	rdi, rax
10000da88:	mov	rsi, r15
10000da8b:	mov	rdx, r12
10000da8e:	call	0x100019764 ## symbol stub for: _memmove
10000da93:	mov	rdi, qword ptr [r14 + 0x60]
10000da97:	call	0x100019716 ## symbol stub for: _free
10000da9c:	mov	qword ptr [r14 + 0x60], rbx
10000daa0:	movzx	eax, word ptr [r14 + 0x2c]
10000daa5:	add	rbx, rax
10000daa8:	add	eax, r13d
10000daab:	mov	word ptr [r14 + 0x2c], ax
10000dab0:	mov	r12, qword ptr [rbp - 0x38]
10000dab4:	movzx	r8d, word ptr [rbp - 0x2a]
10000dab9:	jmp	0x10000daea
10000dabb:	cmp	r13w, 0x4
10000dac0:	je	0x10000db62
10000dac6:	mov	r15d, r8d
10000dac9:	movzx	edi, r13w
10000dacd:	call	0x100019758 ## symbol stub for: _malloc
10000dad2:	mov	qword ptr [r14 + 0x60], rax
10000dad6:	test	rax, rax
10000dad9:	je	0x10000de4e
10000dadf:	mov	rbx, rax
10000dae2:	mov	word ptr [r14 + 0x2c], r13w
10000dae7:	mov	r8d, r15d
10000daea:	lea	r9, [rip + 0x1b977]
10000daf1:	mov	word ptr [rbx], 0x1
10000daf6:	add	r13b, -0x4
10000dafa:	mov	byte ptr [rbx + 0x2], r13b
10000dafe:	mov	byte ptr [rbx + 0x3], 0x0
10000db02:	mov	rcx, qword ptr [r14 + 0x20]
10000db06:	mov	rax, rcx
10000db09:	shr	rax, 0x20
10000db0d:	jne	0x10000db19
10000db0f:	mov	ax, 0x4
10000db13:	cmp	dword ptr [r9], 0x1
10000db17:	jne	0x10000db21
10000db19:	mov	qword ptr [rbx + 0x4], rcx
10000db1d:	mov	ax, 0xc
10000db21:	mov	rcx, qword ptr [r14 + 0x18]
10000db25:	mov	rdx, rcx
10000db28:	shr	rdx, 0x20
10000db2c:	je	0x10000db38
10000db2e:	movzx	eax, ax
10000db31:	mov	qword ptr [rbx + rax], rcx
10000db35:	add	eax, 0x8
10000db38:	mov	rcx, qword ptr [r14 + 0x40]
10000db3c:	mov	rdx, rcx
10000db3f:	shr	rdx, 0x20
10000db43:	je	0x10000db4f
10000db45:	movzx	eax, ax
10000db48:	mov	qword ptr [rbx + rax], rcx
10000db4c:	add	eax, 0x8
10000db4f:	mov	rcx, qword ptr [r14 + 0x30]
10000db53:	cmp	rcx, 0x10000
10000db5a:	jb	0x10000db62
10000db5c:	movzx	eax, ax
10000db5f:	mov	dword ptr [rbx + rax], ecx
10000db62:	mov	word ptr [rbp - 0x2a], r8w
10000db67:	mov	qword ptr [rbp - 0x38], r12
10000db6b:	lea	r13, [rbp - 0x48]
10000db6f:	lea	r15, [rbp - 0x40]
10000db73:	lea	r12, [rbp - 0x50]
10000db77:	mov	edi, 0x2014b50
10000db7c:	mov	rsi, r13
10000db7f:	mov	rdx, r15
10000db82:	mov	rcx, r12
10000db85:	call	0x10000d62f
10000db8a:	movzx	edi, word ptr [r14]
10000db8e:	mov	rsi, r13
10000db91:	mov	rdx, r15
10000db94:	mov	rcx, r12
10000db97:	call	0x10000d6aa
10000db9c:	movzx	edi, word ptr [r14 + 0x2]
10000dba1:	mov	rsi, r13
10000dba4:	mov	rdx, r15
10000dba7:	mov	rcx, r12
10000dbaa:	call	0x10000d6aa
10000dbaf:	movzx	edi, word ptr [r14 + 0x4]
10000dbb4:	mov	rsi, r13
10000dbb7:	mov	rdx, r15
10000dbba:	mov	rcx, r12
10000dbbd:	call	0x10000d6aa
10000dbc2:	movzx	edi, word ptr [r14 + 0x6]
10000dbc7:	mov	rsi, r13
10000dbca:	mov	rdx, r15
10000dbcd:	mov	rcx, r12
10000dbd0:	call	0x10000d6aa
10000dbd5:	mov	rdi, qword ptr [r14 + 0x8]
10000dbd9:	mov	rsi, r13
10000dbdc:	mov	rdx, r15
10000dbdf:	mov	rcx, r12
10000dbe2:	call	0x10000d62f
10000dbe7:	mov	rdi, qword ptr [r14 + 0x10]
10000dbeb:	mov	rsi, r13
10000dbee:	mov	rdx, r15
10000dbf1:	mov	rcx, r12
10000dbf4:	call	0x10000d62f
10000dbf9:	mov	rdi, qword ptr [r14 + 0x18]
10000dbfd:	mov	ebx, 0xffffffff
10000dc02:	cmp	rdi, rbx
10000dc05:	cmovae	rdi, rbx
10000dc09:	mov	rsi, r13
10000dc0c:	mov	rdx, r15
10000dc0f:	mov	rcx, r12
10000dc12:	call	0x10000d62f
10000dc17:	mov	rdi, qword ptr [r14 + 0x20]
10000dc1b:	mov	rax, rdi
10000dc1e:	shr	rax, 0x20
10000dc22:	lea	rcx, [rip + 0x1b83f]
10000dc29:	cmp	dword ptr [rcx], 0x1
10000dc2c:	cmove	rdi, rbx
10000dc30:	test	rax, rax
10000dc33:	cmovne	rdi, rbx
10000dc37:	mov	rsi, r13
10000dc3a:	mov	rdx, r15
10000dc3d:	mov	rcx, r12
10000dc40:	call	0x10000d62f
10000dc45:	movzx	edi, word ptr [rbp - 0x2a]
10000dc49:	mov	rsi, r13
10000dc4c:	mov	rdx, r15
10000dc4f:	mov	rcx, r12
10000dc52:	call	0x10000d6aa
10000dc57:	movzx	edi, word ptr [r14 + 0x2c]
10000dc5c:	mov	rsi, r13
10000dc5f:	mov	rdx, r15
10000dc62:	mov	rcx, r12
10000dc65:	call	0x10000d6aa
10000dc6a:	movzx	edi, word ptr [r14 + 0x2e]
10000dc6f:	mov	rsi, r13
10000dc72:	mov	rdx, r15
10000dc75:	mov	rcx, r12
10000dc78:	call	0x10000d6aa
10000dc7d:	mov	rax, qword ptr [r14 + 0x30]
10000dc81:	cmp	rax, 0xffff
10000dc87:	mov	ecx, 0xffff
10000dc8c:	cmovb	ecx, eax
10000dc8f:	movzx	edi, cx
10000dc92:	mov	rsi, r13
10000dc95:	mov	rdx, r15
10000dc98:	mov	rcx, r12
10000dc9b:	call	0x10000d6aa
10000dca0:	movzx	edi, word ptr [r14 + 0x38]
10000dca5:	mov	rsi, r13
10000dca8:	mov	rdx, r15
10000dcab:	mov	rcx, r12
10000dcae:	call	0x10000d6aa
10000dcb3:	mov	rdi, qword ptr [r14 + 0x48]
10000dcb7:	mov	rsi, r13
10000dcba:	mov	rdx, r15
10000dcbd:	mov	rcx, r12
10000dcc0:	call	0x10000d62f
10000dcc5:	mov	rax, qword ptr [rbp - 0x38]
10000dcc9:	cmp	rax, rbx
10000dccc:	cmovb	rbx, rax
10000dcd0:	mov	rdi, rbx
10000dcd3:	mov	rsi, r13
10000dcd6:	mov	rdx, r15
10000dcd9:	mov	rcx, r12
10000dcdc:	call	0x10000d62f
10000dce1:	mov	rdi, qword ptr [r14 + 0x70]
10000dce5:	movzx	esi, word ptr [r14 + 0x28]
10000dcea:	mov	rdx, r13
10000dced:	mov	rcx, r15
10000dcf0:	mov	r8, r12
10000dcf3:	call	0x10000d726
10000dcf8:	movzx	esi, word ptr [r14 + 0x2c]
10000dcfd:	test	esi, esi
10000dcff:	je	0x10000dd16
10000dd01:	mov	rdi, qword ptr [r14 + 0x60]
10000dd05:	lea	rdx, [rbp - 0x48]
10000dd09:	lea	rcx, [rbp - 0x40]
10000dd0d:	lea	r8, [rbp - 0x50]
10000dd11:	call	0x10000d726
10000dd16:	movzx	esi, word ptr [r14 + 0x2e]
10000dd1b:	test	esi, esi
10000dd1d:	je	0x10000dd34
10000dd1f:	mov	rdi, qword ptr [r14 + 0x68]
10000dd23:	lea	rdx, [rbp - 0x48]
10000dd27:	lea	rcx, [rbp - 0x40]
10000dd2b:	lea	r8, [rbp - 0x50]
10000dd2f:	call	0x10000d726
10000dd34:	mov	rbx, qword ptr [rbp - 0x48]
10000dd38:	mov	r14, qword ptr [rbp - 0x40]
10000dd3c:	mov	esi, 0x1
10000dd41:	mov	rdi, rbx
10000dd44:	mov	rdx, r14
10000dd47:	mov	ecx, 0x2
10000dd4c:	call	0x1000121b7
10000dd51:	mov	r15, rax
10000dd54:	mov	rdi, rbx
10000dd57:	call	0x100019716 ## symbol stub for: _free
10000dd5c:	xor	ecx, ecx
10000dd5e:	cmp	r15, r14
10000dd61:	mov	eax, 0xa
10000dd66:	cmove	eax, ecx
10000dd69:	add	rsp, 0x48
10000dd6d:	pop	rbx
10000dd6e:	pop	r12
10000dd70:	pop	r13
10000dd72:	pop	r14
10000dd74:	pop	r15
10000dd76:	pop	rbp
10000dd77:	ret
10000dd78:	movzx	eax, byte ptr [rbx + 0x3]
10000dd7c:	shl	rax, 0x8
10000dd80:	add	rax, rcx
10000dd83:	add	rax, 0x4
10000dd87:	cmp	eax, r12d
10000dd8a:	jne	0x10000ddc5
10000dd8c:	cmp	r12w, r13w
10000dd90:	mov	r12, qword ptr [rbp - 0x38]
10000dd94:	je	0x10000daf1
10000dd9a:	movzx	edi, r13w
10000dd9e:	call	0x100019758 ## symbol stub for: _malloc
10000dda3:	test	rax, rax
10000dda6:	je	0x10000de4e
10000ddac:	mov	rbx, rax
10000ddaf:	mov	rdi, r15
10000ddb2:	call	0x100019716 ## symbol stub for: _free
10000ddb7:	mov	qword ptr [r14 + 0x60], rbx
10000ddbb:	mov	word ptr [r14 + 0x2c], r13w
10000ddc0:	jmp	0x10000dab4
10000ddc5:	mov	qword ptr [rbp - 0x68], rax
10000ddc9:	movzx	ecx, ax
10000ddcc:	movzx	eax, r13w
10000ddd0:	add	eax, r12d
10000ddd3:	mov	qword ptr [rbp - 0x60], rcx
10000ddd7:	sub	eax, ecx
10000ddd9:	movsxd	rdi, eax
10000dddc:	call	0x100019758 ## symbol stub for: _malloc
10000dde1:	test	rax, rax
10000dde4:	je	0x10000de4e
10000dde6:	mov	r12, rbx
10000dde9:	sub	r12, r15
10000ddec:	mov	rdi, rax
10000ddef:	mov	rsi, r15
10000ddf2:	mov	rdx, r12
10000ddf5:	mov	r15, rax
10000ddf8:	mov	qword ptr [rbp - 0x58], rax
10000ddfc:	call	0x10001975e ## symbol stub for: _memcpy
10000de01:	lea	rdi, [r15 + r12]
10000de05:	mov	rcx, qword ptr [rbp - 0x60]
10000de09:	mov	rsi, rcx
10000de0c:	add	rsi, rbx
10000de0f:	movzx	r15d, word ptr [r14 + 0x2c]
10000de14:	mov	eax, r15d
10000de17:	sub	eax, ecx
10000de19:	movsxd	rdx, eax
10000de1c:	sub	rdx, r12
10000de1f:	call	0x10001975e ## symbol stub for: _memcpy
10000de24:	sub	r15d, dword ptr [rbp - 0x68]
10000de28:	movzx	ebx, r15w
10000de2c:	mov	r12, qword ptr [rbp - 0x58]
10000de30:	add	rbx, r12
10000de33:	lea	eax, [r15 + r13]
10000de37:	mov	word ptr [r14 + 0x2c], ax
10000de3c:	mov	rdi, qword ptr [r14 + 0x60]
10000de40:	call	0x100019716 ## symbol stub for: _free
10000de45:	mov	qword ptr [r14 + 0x60], r12
10000de49:	jmp	0x10000dab0
10000de4e:	mov	eax, 0x4
10000de53:	jmp	0x10000dd69
10000de58:	push	rbp
10000de59:	mov	rbp, rsp
10000de5c:	push	r15
10000de5e:	push	r14
10000de60:	push	r13
10000de62:	push	r12
10000de64:	push	rbx
10000de65:	sub	rsp, 0x38
10000de69:	mov	qword ptr [rbp - 0x50], r8
10000de6d:	mov	r12, rcx
10000de70:	mov	qword ptr [rbp - 0x48], rsi
10000de74:	mov	r15, rdi
10000de77:	xor	eax, eax
10000de79:	mov	qword ptr [rbp - 0x38], rax
10000de7d:	mov	qword ptr [rbp - 0x30], rax
10000de81:	mov	qword ptr [rbp - 0x40], rax
10000de85:	lea	rbx, [rip + 0x1b9c4]
10000de8c:	mov	rax, qword ptr [rbx]
10000de8f:	lea	rcx, [rip + 0x1b9da]
10000de96:	mov	qword ptr [rcx], rax
10000de99:	lea	rax, [rip + 0x1b9f8]
10000dea0:	mov	rax, qword ptr [rax]
10000dea3:	lea	rcx, [rip + 0x1b9ce]
10000deaa:	mov	qword ptr [rcx], rax
10000dead:	cmp	rdi, 0xffff
10000deb4:	ja	0x10000ded0
10000deb6:	or	rdx, qword ptr [rbp - 0x48]
10000deba:	shr	rdx, 0x20
10000debe:	jne	0x10000ded0
10000dec0:	lea	rax, [rip + 0x1b8dd]
10000dec7:	cmp	dword ptr [rax], 0x0
10000deca:	je	0x10000e010
10000ded0:	lea	rbx, [rbp - 0x38]
10000ded4:	lea	r13, [rbp - 0x30]
10000ded8:	lea	r14, [rbp - 0x40]
10000dedc:	mov	edi, 0x6064b50
10000dee1:	mov	rsi, rbx
10000dee4:	mov	rdx, r13
10000dee7:	mov	rcx, r14
10000deea:	call	0x10000d62f
10000deef:	mov	edi, 0x2c
10000def4:	mov	rsi, rbx
10000def7:	mov	rdx, r13
10000defa:	mov	rcx, r14
10000defd:	call	0x10000d8b5
10000df02:	mov	edi, 0x31e
10000df07:	mov	rsi, rbx
10000df0a:	mov	rdx, r13
10000df0d:	mov	rcx, r14
10000df10:	call	0x10000d6aa
10000df15:	mov	edi, 0x2d
10000df1a:	mov	rsi, rbx
10000df1d:	mov	rdx, r13
10000df20:	mov	rcx, r14
10000df23:	call	0x10000d6aa
10000df28:	lea	rax, [rip + 0x1b921]
10000df2f:	mov	rdi, qword ptr [rax]
10000df32:	mov	rsi, rbx
10000df35:	mov	rdx, r13
10000df38:	mov	rcx, r14
10000df3b:	call	0x10000d62f
10000df40:	lea	rax, [rip + 0x1b549]
10000df47:	mov	rdi, qword ptr [rax]
10000df4a:	mov	rsi, rbx
10000df4d:	mov	rdx, r13
10000df50:	mov	rcx, r14
10000df53:	call	0x10000d62f
10000df58:	lea	rax, [rip + 0x1b901]
10000df5f:	mov	rdi, qword ptr [rax]
10000df62:	mov	rsi, rbx
10000df65:	mov	rdx, r13
10000df68:	mov	rcx, r14
10000df6b:	call	0x10000d8b5
10000df70:	mov	rdi, r15
10000df73:	mov	rsi, rbx
10000df76:	mov	rdx, r13
10000df79:	mov	rcx, r14
10000df7c:	call	0x10000d8b5
10000df81:	mov	rdi, qword ptr [rbp - 0x48]
10000df85:	mov	rsi, rbx
10000df88:	mov	rdx, r13
10000df8b:	mov	rcx, r14
10000df8e:	call	0x10000d8b5
10000df93:	lea	rax, [rip + 0x1b8be]
10000df9a:	mov	rdi, qword ptr [rax]
10000df9d:	mov	rsi, rbx
10000dfa0:	mov	rdx, r13
10000dfa3:	mov	rcx, r14
10000dfa6:	call	0x10000d8b5
10000dfab:	mov	edi, 0x7064b50
10000dfb0:	mov	rsi, rbx
10000dfb3:	mov	rdx, r13
10000dfb6:	mov	rcx, r14
10000dfb9:	call	0x10000d62f
10000dfbe:	lea	rax, [rip + 0x1b8ab]
10000dfc5:	mov	rdi, qword ptr [rax]
10000dfc8:	mov	rsi, rbx
10000dfcb:	mov	rdx, r13
10000dfce:	mov	rcx, r14
10000dfd1:	call	0x10000d62f
10000dfd6:	lea	rax, [rip + 0x1b89b]
10000dfdd:	mov	rdi, qword ptr [rax]
10000dfe0:	mov	rsi, rbx
10000dfe3:	mov	rdx, r13
10000dfe6:	mov	rcx, r14
10000dfe9:	call	0x10000d8b5
10000dfee:	lea	rax, [rip + 0x1b85b]
10000dff5:	mov	rdi, qword ptr [rax]
10000dff8:	inc	rdi
10000dffb:	mov	rsi, rbx
10000dffe:	mov	rdx, r13
10000e001:	lea	rbx, [rip + 0x1b848]
10000e008:	mov	rcx, r14
10000e00b:	call	0x10000d62f
10000e010:	lea	r13, [rbp - 0x38]
10000e014:	lea	r14, [rbp - 0x30]
10000e018:	lea	r15, [rbp - 0x40]
10000e01c:	mov	edi, 0x6054b50
10000e021:	mov	rsi, r13
10000e024:	mov	rdx, r14
10000e027:	mov	rcx, r15
10000e02a:	call	0x10000d62f
10000e02f:	mov	rax, qword ptr [rbx]
10000e032:	cmp	rax, 0xffff
10000e038:	mov	ecx, 0xffff
10000e03d:	cmovb	ecx, eax
10000e040:	movzx	edi, cx
10000e043:	mov	rsi, r13
10000e046:	mov	rdx, r14
10000e049:	mov	rcx, r15
10000e04c:	call	0x10000d6aa
10000e051:	lea	rcx, [rip + 0x1b438]
10000e058:	mov	rax, qword ptr [rcx]
10000e05b:	cmp	rax, -0x1
10000e05f:	mov	qword ptr [rbp - 0x58], r12
10000e063:	je	0x10000e073
10000e065:	mov	cx, 0xffff
10000e069:	cmp	rax, 0xfffe
10000e06f:	jbe	0x10000e07c
10000e071:	jmp	0x10000e07e
10000e073:	mov	qword ptr [rcx], 0x0
10000e07a:	xor	eax, eax
10000e07c:	mov	ecx, eax
10000e07e:	movzx	edi, cx
10000e081:	lea	r13, [rbp - 0x38]
10000e085:	lea	r14, [rbp - 0x30]
10000e089:	lea	r15, [rbp - 0x40]
10000e08d:	mov	rsi, r13
10000e090:	mov	rdx, r14
10000e093:	mov	rcx, r15
10000e096:	call	0x10000d6aa
10000e09b:	lea	rax, [rip + 0x1b7be]
10000e0a2:	mov	rdi, qword ptr [rax]
10000e0a5:	mov	r12d, 0xffff
10000e0ab:	cmp	rdi, r12
10000e0ae:	mov	ebx, 0xffff
10000e0b3:	cmovae	edi, ebx
10000e0b6:	and	edi, ebx
10000e0b8:	mov	rsi, r13
10000e0bb:	mov	rdx, r14
10000e0be:	mov	rcx, r15
10000e0c1:	call	0x10000d6aa
10000e0c6:	lea	rax, [rip + 0x1b79b]
10000e0cd:	mov	rdi, qword ptr [rax]
10000e0d0:	cmp	rdi, r12
10000e0d3:	cmovae	edi, ebx
10000e0d6:	and	edi, ebx
10000e0d8:	mov	rsi, r13
10000e0db:	mov	rdx, r14
10000e0de:	mov	rcx, r15
10000e0e1:	call	0x10000d6aa
10000e0e6:	mov	r12d, 0xffffffff
10000e0ec:	mov	rdi, qword ptr [rbp - 0x48]
10000e0f0:	cmp	rdi, r12
10000e0f3:	cmovae	rdi, r12
10000e0f7:	mov	rsi, r13
10000e0fa:	mov	rdx, r14
10000e0fd:	mov	rcx, r15
10000e100:	call	0x10000d62f
10000e105:	lea	rax, [rip + 0x1b35c]
10000e10c:	lea	rcx, [rip + 0x1b745]
10000e113:	mov	rdi, qword ptr [rcx]
10000e116:	mov	rcx, rdi
10000e119:	shr	rcx, 0x20
10000e11d:	cmovne	rdi, r12
10000e121:	cmp	dword ptr [rax], 0x1
10000e124:	cmove	rdi, r12
10000e128:	mov	rsi, r13
10000e12b:	mov	rdx, r14
10000e12e:	mov	rcx, r15
10000e131:	call	0x10000d62f
10000e136:	mov	r12, qword ptr [rbp - 0x58]
10000e13a:	and	ebx, r12d
10000e13d:	mov	edi, ebx
10000e13f:	mov	rsi, r13
10000e142:	mov	rdx, r14
10000e145:	mov	rcx, r15
10000e148:	call	0x10000d6aa
10000e14d:	test	r12, r12
10000e150:	je	0x10000e16a
10000e152:	lea	rdx, [rbp - 0x38]
10000e156:	lea	rcx, [rbp - 0x30]
10000e15a:	lea	r8, [rbp - 0x40]
10000e15e:	mov	rdi, qword ptr [rbp - 0x50]
10000e162:	mov	esi, r12d
10000e165:	call	0x10000d726
10000e16a:	mov	rbx, qword ptr [rbp - 0x38]
10000e16e:	mov	r14, qword ptr [rbp - 0x30]
10000e172:	mov	esi, 0x1
10000e177:	mov	rdi, rbx
10000e17a:	mov	rdx, r14
10000e17d:	mov	ecx, 0x3
10000e182:	call	0x1000121b7
10000e187:	mov	r15, rax
10000e18a:	mov	rdi, rbx
10000e18d:	call	0x100019716 ## symbol stub for: _free
10000e192:	xor	ecx, ecx
10000e194:	cmp	r15, r14
10000e197:	mov	eax, 0xa
10000e19c:	cmove	eax, ecx
10000e19f:	add	rsp, 0x38
10000e1a3:	pop	rbx
10000e1a4:	pop	r12
10000e1a6:	pop	r13
10000e1a8:	pop	r14
10000e1aa:	pop	r15
10000e1ac:	pop	rbp
10000e1ad:	ret
10000e1ae:	push	rbp
10000e1af:	mov	rbp, rsp
10000e1b2:	push	r15
10000e1b4:	push	r14
10000e1b6:	push	r13
10000e1b8:	push	r12
10000e1ba:	push	rbx
10000e1bb:	sub	rsp, 0x38
10000e1bf:	mov	r15, rdi
10000e1c2:	mov	rax, qword ptr [rip + 0x15e47] ## literal pool symbol address: ___stack_chk_guard
10000e1c9:	mov	rax, qword ptr [rax]
10000e1cc:	mov	qword ptr [rbp - 0x30], rax
10000e1d0:	lea	rbx, [rip + 0x1b4d9]
10000e1d7:	cmp	dword ptr [rbx], 0x2
10000e1da:	jne	0x10000e2b1
10000e1e0:	lea	r14, [rip + 0x1b619]
10000e1e7:	mov	rcx, qword ptr [r14]
10000e1ea:	lea	rdi, [rbp - 0x50]
10000e1ee:	mov	esi, 0x1a
10000e1f3:	mov	edx, 0x1
10000e1f8:	call	0x100019710 ## symbol stub for: _fread
10000e1fd:	cmp	rax, 0x1
10000e201:	jne	0x10000e353
10000e207:	mov	edi, 0xa0
10000e20c:	call	0x100019758 ## symbol stub for: _malloc
10000e211:	test	rax, rax
10000e214:	je	0x10000e466
10000e21a:	mov	rsi, rax
10000e21d:	movzx	edx, byte ptr [rbp - 0x50]
10000e221:	movzx	edi, byte ptr [rbp - 0x4f]
10000e225:	mov	ecx, edi
10000e227:	shl	ecx, 0x8
10000e22a:	or	ecx, edx
10000e22c:	mov	word ptr [rax + 0x2], cx
10000e230:	movzx	edx, word ptr [rbp - 0x4e]
10000e234:	mov	word ptr [rax + 0x3a], dx
10000e238:	movzx	r8d, word ptr [rbp - 0x4c]
10000e23d:	mov	word ptr [rax + 0x6], r8w
10000e242:	mov	edx, dword ptr [rbp - 0x4a]
10000e245:	mov	qword ptr [rax + 0x8], rdx
10000e249:	mov	edx, dword ptr [rbp - 0x46]
10000e24c:	mov	qword ptr [rax + 0x10], rdx
10000e250:	movzx	r12d, word ptr [rbp - 0x3a]
10000e255:	mov	word ptr [rax + 0x28], r12w
10000e25a:	movzx	r13d, word ptr [rbp - 0x38]
10000e25f:	mov	word ptr [rax + 0x2a], r13w
10000e264:	cmp	dword ptr [rbx], 0x2
10000e267:	mov	rbx, rax
10000e26a:	jne	0x10000e507
10000e270:	mov	edx, dword ptr [rbp - 0x42]
10000e273:	mov	qword ptr [rbx + 0x18], rdx
10000e277:	mov	edx, dword ptr [rbp - 0x3e]
10000e27a:	mov	qword ptr [rbx + 0x20], rdx
10000e27e:	movzx	edx, cx
10000e281:	movzx	r9d, di
10000e285:	cmp	edx, 0x2900
10000e28b:	jb	0x10000e495
10000e291:	lea	r14, [rip + 0x1b898]
10000e298:	lea	rcx, [rip + 0x13d13] ## literal pool for: "Illegal host system mapping in local header:  %d"
10000e29f:	mov	edx, 0x13f1
10000e2a4:	mov	rdi, r14
10000e2a7:	xor	esi, esi
10000e2a9:	mov	r8d, r9d
10000e2ac:	jmp	0x10000e4d6
10000e2b1:	mov	r12, qword ptr [r15 + 0x30]
10000e2b5:	mov	qword ptr [rbp - 0x58], r15
10000e2b9:	mov	r15, qword ptr [r15 + 0x40]
10000e2bd:	lea	rbx, [rip + 0x1b56c]
10000e2c4:	lea	r14, [rip + 0x1b535]
10000e2cb:	cmp	r12, qword ptr [rbx]
10000e2ce:	je	0x10000e2e4
10000e2d0:	mov	rdi, qword ptr [r14]
10000e2d3:	test	rdi, rdi
10000e2d6:	je	0x10000e2e4
10000e2d8:	call	0x1000196ce ## symbol stub for: _fclose
10000e2dd:	mov	qword ptr [r14], 0x0
10000e2e4:	mov	qword ptr [rbx], r12
10000e2e7:	lea	r13, [rip + 0x1b51a]
10000e2ee:	mov	rdi, qword ptr [r13]
10000e2f2:	mov	rsi, r12
10000e2f5:	call	0x1000127e1
10000e2fa:	mov	rbx, rax
10000e2fd:	mov	rax, qword ptr [r14]
10000e300:	test	rax, rax
10000e303:	je	0x10000e39b
10000e309:	mov	rdi, rax
10000e30c:	mov	rsi, r15
10000e30f:	xor	edx, edx
10000e311:	call	0x10001971c ## symbol stub for: _fseeko
10000e316:	test	eax, eax
10000e318:	je	0x10000e41c
10000e31e:	mov	rdi, qword ptr [r14]
10000e321:	call	0x1000196ce ## symbol stub for: _fclose
10000e326:	mov	qword ptr [r14], 0x0
10000e32d:	call	0x100019674 ## symbol stub for: ___error
10000e332:	mov	edi, dword ptr [rax]
10000e334:	call	0x10001982a ## symbol stub for: _strerror
10000e339:	lea	rdi, [rip + 0x13a48] ## literal pool for: "reading archive fseek: "
10000e340:	mov	rsi, rax
10000e343:	call	0x1000034f4
10000e348:	mov	r13d, 0xb
10000e34e:	jmp	0x10000ea36
10000e353:	mov	rdi, qword ptr [r14]
10000e356:	call	0x1000196e0 ## symbol stub for: _ferror
10000e35b:	mov	r15d, eax
10000e35e:	call	0x100019674 ## symbol stub for: ___error
10000e363:	mov	edi, dword ptr [rax]
10000e365:	call	0x10001982a ## symbol stub for: _strerror
10000e36a:	lea	rdi, [rip + 0x13a4c] ## literal pool for: "reading local entry: "
10000e371:	mov	rsi, rax
10000e374:	call	0x1000034f4
10000e379:	cmp	dword ptr [rbx], 0x2
10000e37c:	je	0x10000e386
10000e37e:	mov	rdi, qword ptr [r14]
10000e381:	call	0x1000196ce ## symbol stub for: _fclose
10000e386:	xor	eax, eax
10000e388:	test	r15d, r15d
10000e38b:	setne	al
10000e38e:	lea	r13d, [rax + 8*rax]
10000e392:	add	r13d, 0x2
10000e396:	jmp	0x10000ea36
10000e39b:	lea	rsi, [rip + 0xdc0e] ## literal pool for: "r"
10000e3a2:	mov	rdi, rbx
10000e3a5:	call	0x1000196f8 ## symbol stub for: _fopen
10000e3aa:	mov	qword ptr [r14], rax
10000e3ad:	test	rax, rax
10000e3b0:	jne	0x10000e309
10000e3b6:	lea	rax, [rip + 0x1b09f]
10000e3bd:	cmp	dword ptr [rax], 0x0
10000e3c0:	jne	0x10000e3cf
10000e3c2:	mov	edi, 0x12
10000e3c7:	mov	rsi, rbx
10000e3ca:	call	0x100002e30
10000e3cf:	mov	rdi, r12
10000e3d2:	call	0x1000128e3
10000e3d7:	cmp	eax, 0x9
10000e3da:	je	0x10000e621
10000e3e0:	cmp	eax, 0x3
10000e3e3:	jne	0x10000e3f9
10000e3e5:	lea	rax, [rip + 0x1b2c4]
10000e3ec:	mov	eax, dword ptr [rax]
10000e3ee:	dec	eax
10000e3f0:	cmp	eax, 0x2
10000e3f3:	jb	0x10000e4fc
10000e3f9:	mov	rdi, rbx
10000e3fc:	call	0x100019716 ## symbol stub for: _free
10000e401:	mov	rdi, qword ptr [r13]
10000e405:	mov	rsi, r12
10000e408:	call	0x1000127e1
10000e40d:	mov	rbx, rax
10000e410:	mov	rdi, rax
10000e413:	lea	rsi, [rip + 0xdb96] ## literal pool for: "r"
10000e41a:	jmp	0x10000e3a5
10000e41c:	lea	rbx, [rip + 0x1b28d]
10000e423:	cmp	dword ptr [rbx], 0x2
10000e426:	mov	r15, qword ptr [rbp - 0x58]
10000e42a:	je	0x10000e1e0
10000e430:	mov	rdi, qword ptr [r14]
10000e433:	lea	rsi, [rip + 0x13966] ## literal pool for: "PK\003\004"
10000e43a:	call	0x10000a311
10000e43f:	test	eax, eax
10000e441:	jne	0x10000e1e0
10000e447:	mov	rdi, qword ptr [r14]
10000e44a:	call	0x1000196ce ## symbol stub for: _fclose
10000e44f:	mov	qword ptr [r14], 0x0
10000e456:	mov	rsi, qword ptr [r15 + 0x70]
10000e45a:	lea	rdi, [rip + 0x13944] ## literal pool for: "Did not find entry for "
10000e461:	jmp	0x10000e4f7
10000e466:	lea	rdi, [rip + 0x13966] ## literal pool for: "reading entry"
10000e46d:	lea	rsi, [rip + 0xc343] ## literal pool for: ""
10000e474:	call	0x1000034f4
10000e479:	mov	r13d, 0x4
10000e47f:	cmp	dword ptr [rbx], 0x2
10000e482:	je	0x10000ea36
10000e488:	mov	rdi, qword ptr [r14]
10000e48b:	call	0x1000196ce ## symbol stub for: _fclose
10000e490:	jmp	0x10000ea36
10000e495:	sub	ecx, r9d
10000e498:	cmp	cx, 0x65
10000e49c:	jb	0x10000e4b2
10000e49e:	movzx	r8d, cx
10000e4a2:	lea	r14, [rip + 0x1b687]
10000e4a9:	lea	rcx, [rip + 0x13b3f] ## literal pool for: "Illegal PK version mapping in local header:  %d"
10000e4b0:	jmp	0x10000e4cc
10000e4b2:	movzx	ecx, r8w
10000e4b6:	cmp	ecx, 0xc9
10000e4bc:	jb	0x10000e507
10000e4be:	lea	r14, [rip + 0x1b66b]
10000e4c5:	lea	rcx, [rip + 0x13b53] ## literal pool for: "Unrecognized compression method in local header:  %d"
10000e4cc:	mov	edx, 0x13f1
10000e4d1:	mov	rdi, r14
10000e4d4:	xor	esi, esi
10000e4d6:	xor	eax, eax
10000e4d8:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000e4dd:	lea	rsi, [rip + 0xc2d3] ## literal pool for: ""
10000e4e4:	mov	rdi, r14
10000e4e7:	call	0x1000034f4
10000e4ec:	mov	rsi, qword ptr [r15 + 0x70]
10000e4f0:	lea	rdi, [rip + 0x13aec] ## literal pool for: "Skipping:  "
10000e4f7:	call	0x1000034f4
10000e4fc:	mov	r13d, 0x3
10000e502:	jmp	0x10000ea36
10000e507:	mov	qword ptr [rbp - 0x60], rax
10000e50b:	mov	qword ptr [rbp - 0x58], r15
10000e50f:	lea	rdi, [r12 + 0x1]
10000e514:	xorps	xmm0, xmm0
10000e517:	movups	xmmword ptr [rbx + 0x50], xmm0
10000e51b:	movups	xmmword ptr [rbx + 0x78], xmm0
10000e51f:	call	0x100019758 ## symbol stub for: _malloc
10000e524:	mov	qword ptr [rbx + 0x70], rax
10000e528:	test	rax, rax
10000e52b:	je	0x10000ea30
10000e531:	mov	r15, rax
10000e534:	test	r13w, r13w
10000e538:	je	0x10000e54f
10000e53a:	mov	rdi, r13
10000e53d:	call	0x100019758 ## symbol stub for: _malloc
10000e542:	mov	qword ptr [rbx + 0x58], rax
10000e546:	test	rax, rax
10000e549:	je	0x10000ea30
10000e54f:	mov	rcx, qword ptr [r14]
10000e552:	mov	edx, 0x1
10000e557:	mov	rdi, r15
10000e55a:	mov	rsi, r12
10000e55d:	call	0x100019710 ## symbol stub for: _fread
10000e562:	cmp	rax, 0x1
10000e566:	jne	0x10000e605
10000e56c:	movzx	esi, word ptr [rbx + 0x2a]
10000e570:	test	rsi, rsi
10000e573:	je	0x10000e58c
10000e575:	mov	rdi, qword ptr [rbx + 0x58]
10000e579:	mov	rcx, qword ptr [r14]
10000e57c:	mov	edx, 0x1
10000e581:	call	0x100019710 ## symbol stub for: _fread
10000e586:	cmp	rax, 0x1
10000e58a:	jne	0x10000e605
10000e58c:	mov	rax, qword ptr [rbx + 0x70]
10000e590:	movzx	ecx, word ptr [rbx + 0x28]
10000e594:	mov	byte ptr [rax + rcx], 0x0
10000e598:	movzx	edi, word ptr [rbx + 0x28]
10000e59c:	inc	rdi
10000e59f:	call	0x100019758 ## symbol stub for: _malloc
10000e5a4:	mov	qword ptr [rbx + 0x50], rax
10000e5a8:	test	rax, rax
10000e5ab:	je	0x10000ea30
10000e5b1:	mov	rsi, qword ptr [rbx + 0x70]
10000e5b5:	mov	rdi, rax
10000e5b8:	call	0x100019824 ## symbol stub for: _strcpy
10000e5bd:	mov	rdi, rbx
10000e5c0:	call	0x10000a384
10000e5c5:	lea	r14, [rip + 0x1b1d4]
10000e5cc:	mov	dword ptr [r14], eax
10000e5cf:	mov	word ptr [rbx], 0x0
10000e5d4:	lea	r15, [rip + 0x1b0d5]
10000e5db:	cmp	dword ptr [r15], 0x2
10000e5df:	mov	r12, rbx
10000e5e2:	jne	0x10000e62c
10000e5e4:	movzx	eax, word ptr [rbx + 0x3a]
10000e5e8:	mov	rcx, rbx
10000e5eb:	mov	rbx, qword ptr [rbp - 0x58]
10000e5ef:	mov	word ptr [rbx + 0x4], ax
10000e5f3:	movups	xmm0, xmmword ptr [rcx + 0x18]
10000e5f7:	movups	xmmword ptr [rbx + 0x18], xmm0
10000e5fb:	mov	ecx, 0x2
10000e600:	jmp	0x10000e73c
10000e605:	mov	rdi, qword ptr [r14]
10000e608:	call	0x1000196e0 ## symbol stub for: _ferror
10000e60d:	xor	ecx, ecx
10000e60f:	test	eax, eax
10000e611:	setne	cl
10000e614:	lea	r13d, [rcx + 8*rcx]
10000e618:	add	r13d, 0x2
10000e61c:	jmp	0x10000ea36
10000e621:	mov	r13d, 0x9
10000e627:	jmp	0x10000ea36
10000e62c:	mov	rcx, rbx
10000e62f:	mov	rbx, qword ptr [rbp - 0x58]
10000e633:	movzx	eax, word ptr [rbx]
10000e636:	mov	word ptr [rcx], ax
10000e639:	movzx	eax, word ptr [rcx + 0x2]
10000e63d:	cmp	ax, word ptr [rbx + 0x2]
10000e641:	je	0x10000e653
10000e643:	mov	rsi, qword ptr [rbx + 0x70]
10000e647:	lea	rdi, [rip + 0x13a06] ## literal pool for: "Local Version Needed To Extract does not match CD: "
10000e64e:	call	0x1000034f4
10000e653:	movzx	eax, word ptr [r12 + 0x3a]
10000e659:	cmp	ax, word ptr [rbx + 0x4]
10000e65d:	je	0x10000e673
10000e65f:	mov	rsi, qword ptr [rbx + 0x70]
10000e663:	lea	rdi, [rip + 0x137aa] ## literal pool for: "Local Entry Flag does not match CD: "
10000e66a:	call	0x1000034f4
10000e66f:	movzx	eax, word ptr [rbx + 0x4]
10000e673:	test	al, 0x8
10000e675:	jne	0x10000e692
10000e677:	mov	rax, qword ptr [r12 + 0x10]
10000e67c:	cmp	rax, qword ptr [rbx + 0x10]
10000e680:	je	0x10000e692
10000e682:	mov	rsi, qword ptr [rbx + 0x70]
10000e686:	lea	rdi, [rip + 0x137ac] ## literal pool for: "Local Entry CRC does not match CD: "
10000e68d:	call	0x1000034f4
10000e692:	mov	ebx, dword ptr [r15]
10000e695:	mov	ecx, 0x3
10000e69a:	cmp	ebx, 0x3
10000e69d:	je	0x10000e6d2
10000e69f:	mov	rdi, qword ptr [r12 + 0x70]
10000e6a4:	mov	rax, qword ptr [rbp - 0x58]
10000e6a8:	mov	r15, qword ptr [rax + 0x70]
10000e6ac:	mov	rsi, r15
10000e6af:	call	0x10001981e ## symbol stub for: _strcmp
10000e6b4:	mov	ecx, ebx
10000e6b6:	test	eax, eax
10000e6b8:	je	0x10000e6d2
10000e6ba:	lea	rdi, [rip + 0x139c7] ## literal pool for: "Local Entry name does not match CD: "
10000e6c1:	mov	rsi, r15
10000e6c4:	call	0x1000034f4
10000e6c9:	lea	rax, [rip + 0x1afe0]
10000e6d0:	mov	ecx, dword ptr [rax]
10000e6d2:	mov	rbx, qword ptr [rbp - 0x58]
10000e6d6:	movups	xmm0, xmmword ptr [rbx + 0x18]
10000e6da:	movups	xmmword ptr [r12 + 0x18], xmm0
10000e6e0:	cmp	ecx, 0x3
10000e6e3:	jne	0x10000e73c
10000e6e5:	mov	rdi, qword ptr [rbx + 0x70]
10000e6e9:	call	0x100019830 ## symbol stub for: _strlen
10000e6ee:	mov	word ptr [rbx + 0x28], ax
10000e6f2:	mov	r13, r12
10000e6f5:	mov	word ptr [r12 + 0x28], ax
10000e6fb:	mov	rdi, qword ptr [r12 + 0x70]
10000e700:	call	0x100019716 ## symbol stub for: _free
10000e705:	mov	r15, qword ptr [rbx + 0x70]
10000e709:	mov	rdi, r15
10000e70c:	call	0x100019830 ## symbol stub for: _strlen
10000e711:	lea	rdi, [rax + 0x1]
10000e715:	call	0x100019758 ## symbol stub for: _malloc
10000e71a:	mov	qword ptr [r12 + 0x70], rax
10000e71f:	test	rax, rax
10000e722:	je	0x10000ea1d
10000e728:	mov	rdi, rax
10000e72b:	mov	rsi, r15
10000e72e:	call	0x100019824 ## symbol stub for: _strcpy
10000e733:	lea	rax, [rip + 0x1af76]
10000e73a:	mov	ecx, dword ptr [rax]
10000e73c:	lea	rax, [rip + 0x1b10d]
10000e743:	mov	rax, qword ptr [rax]
10000e746:	mov	qword ptr [rbx + 0x30], rax
10000e74a:	lea	rax, [rip + 0x1b147]
10000e751:	mov	rax, qword ptr [rax]
10000e754:	mov	qword ptr [rbx + 0x40], rax
10000e758:	cmp	ecx, 0x2
10000e75b:	je	0x10000e78a
10000e75d:	movzx	eax, word ptr [rbx + 0x4]
10000e761:	test	al, 0x1
10000e763:	jne	0x10000e78a
10000e765:	and	eax, 0xfff7
10000e76a:	mov	word ptr [rbx + 0x4], ax
10000e76e:	mov	rdx, r12
10000e771:	mov	word ptr [r12 + 0x4], ax
10000e777:	movzx	eax, word ptr [r12 + 0x3a]
10000e77d:	and	eax, -0x9
10000e780:	mov	word ptr [r12 + 0x3a], ax
10000e786:	mov	word ptr [rbx + 0x3a], ax
10000e78a:	movzx	eax, word ptr [rbx + 0x3a]
10000e78e:	xor	edx, edx
10000e790:	cmp	dword ptr [r14], 0x0
10000e794:	setne	dl
10000e797:	xor	esi, esi
10000e799:	test	al, 0x8
10000e79b:	lea	rax, [8*rdx + 0x10]
10000e7a3:	cmovne	rsi, rax
10000e7a7:	mov	rdi, r12
10000e7aa:	movzx	eax, word ptr [r12 + 0x28]
10000e7b0:	add	rax, qword ptr [rbx + 0x18]
10000e7b4:	movzx	edx, word ptr [r12 + 0x2a]
10000e7ba:	add	rax, rsi
10000e7bd:	add	rax, rdx
10000e7c0:	lea	r15, [rip + 0x1c771]
10000e7c7:	mov	rdx, qword ptr [r15]
10000e7ca:	add	rax, rdx
10000e7cd:	add	rax, 0x1e
10000e7d1:	mov	qword ptr [r15], rax
10000e7d4:	cmp	ecx, 0x2
10000e7d7:	jne	0x10000e852
10000e7d9:	mov	r14, qword ptr [rdi + 0x70]
10000e7dd:	mov	rdi, r14
10000e7e0:	call	0x100019830 ## symbol stub for: _strlen
10000e7e5:	lea	rdi, [rax + 0x1]
10000e7e9:	call	0x100019758 ## symbol stub for: _malloc
10000e7ee:	mov	qword ptr [rbx + 0x80], rax
10000e7f5:	test	rax, rax
10000e7f8:	je	0x10000ea30
10000e7fe:	mov	rdi, rax
10000e801:	mov	rsi, r14
10000e804:	call	0x100019824 ## symbol stub for: _strcpy
10000e809:	mov	r8, qword ptr [rbx + 0x80]
10000e810:	lea	r14, [rip + 0x1b319]
10000e817:	lea	rcx, [rip + 0x138a8] ## literal pool for: " copying: %s "
10000e81e:	mov	edx, 0x13f1
10000e823:	mov	rdi, r14
10000e826:	xor	esi, esi
10000e828:	xor	eax, eax
10000e82a:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000e82f:	mov	rdi, r14
10000e832:	xor	esi, esi
10000e834:	call	0x100003300
10000e839:	lea	rax, [rip + 0x1ae70]
10000e840:	cmp	dword ptr [rax], 0x2
10000e843:	mov	rdi, r12
10000e846:	jne	0x10000e852
10000e848:	mov	rax, qword ptr [rdi + 0x10]
10000e84c:	mov	qword ptr [rbx + 0x10], rax
10000e850:	jmp	0x10000e85a
10000e852:	mov	rax, qword ptr [rbx + 0x10]
10000e856:	mov	qword ptr [rdi + 0x10], rax
10000e85a:	mov	rbx, rdi
10000e85d:	xor	esi, esi
10000e85f:	call	0x10000d090
10000e864:	mov	r13d, 0xa
10000e86a:	test	eax, eax
10000e86c:	jne	0x10000ea36
10000e872:	lea	rax, [rip + 0x1ae37]
10000e879:	cmp	dword ptr [rax], 0x2
10000e87c:	jne	0x10000e88b
10000e87e:	mov	rdi, -0x2
10000e885:	test	byte ptr [rbx + 0x3a], 0x8
10000e889:	jne	0x10000e88f
10000e88b:	mov	rdi, qword ptr [rbx + 0x18]
10000e88f:	add	qword ptr [rbp - 0x60], 0x50
10000e894:	call	0x100011949
10000e899:	mov	r13d, eax
10000e89c:	cmp	eax, 0x9
10000e89f:	jne	0x10000e8ed
10000e8a1:	cmp	word ptr [rbx + 0x2a], 0x0
10000e8a6:	je	0x10000e8b1
10000e8a8:	mov	rdi, qword ptr [rbx + 0x58]
10000e8ac:	call	0x100019716 ## symbol stub for: _free
10000e8b1:	cmp	word ptr [rbx + 0x28], 0x0
10000e8b6:	je	0x10000e8d4
10000e8b8:	mov	rdi, qword ptr [rbx + 0x70]
10000e8bc:	call	0x100019716 ## symbol stub for: _free
10000e8c1:	cmp	word ptr [rbx + 0x28], 0x0
10000e8c6:	je	0x10000e8d4
10000e8c8:	mov	rax, qword ptr [rbp - 0x60]
10000e8cc:	mov	rdi, qword ptr [rax]
10000e8cf:	call	0x100019716 ## symbol stub for: _free
10000e8d4:	mov	rdi, rbx
10000e8d7:	call	0x100019716 ## symbol stub for: _free
10000e8dc:	lea	rsi, [rip + 0x137f1] ## literal pool for: "Could not find split"
10000e8e3:	mov	edi, 0x9
10000e8e8:	call	0x100002e30
10000e8ed:	lea	r14, [rip + 0x1addc]
10000e8f4:	cmp	r13d, 0x2
10000e8f8:	je	0x10000e966
10000e8fa:	cmp	qword ptr [r14], 0x0
10000e8fe:	jne	0x10000e966
10000e900:	lea	r14, [rip + 0x1ada9]
10000e907:	cmp	dword ptr [r14], 0x2
10000e90b:	mov	rbx, qword ptr [rbp - 0x58]
10000e90f:	movzx	eax, word ptr [rbx + 0x4]
10000e913:	jne	0x10000ea5c
10000e919:	test	al, 0x8
10000e91b:	je	0x10000ea68
10000e921:	lea	rax, [rip + 0x1adb0]
10000e928:	cmp	dword ptr [rax], 0x0
10000e92b:	je	0x10000ecc5
10000e931:	lea	rax, [rip + 0x1ada8]
10000e938:	mov	rax, qword ptr [rax]
10000e93b:	mov	rcx, r12
10000e93e:	mov	qword ptr [r12 + 0x10], rax
10000e943:	lea	rax, [rip + 0x1ad9e]
10000e94a:	mov	rax, qword ptr [rax]
10000e94d:	mov	qword ptr [r12 + 0x18], rax
10000e952:	lea	rax, [rip + 0x1ad97]
10000e959:	mov	rax, qword ptr [rax]
10000e95c:	mov	qword ptr [r12 + 0x20], rax
10000e961:	jmp	0x10000ea60
10000e966:	mov	rax, qword ptr [rbp - 0x58]
10000e96a:	mov	rsi, qword ptr [rax + 0x80]
10000e971:	lea	rdi, [rip + 0x13771] ## literal pool for: "aborting: "
10000e978:	call	0x1000034f4
10000e97d:	test	r13d, r13d
10000e980:	mov	eax, r13d
10000e983:	mov	r13d, 0x3
10000e989:	cmovne	r13d, eax
10000e98d:	lea	rax, [rip + 0x1ad1c]
10000e994:	cmp	dword ptr [rax], 0x2
10000e997:	jne	0x10000e9e0
10000e999:	mov	qword ptr [r14], 0x0
10000e9a0:	lea	rax, [rip + 0x1ae51]
10000e9a7:	mov	rdi, qword ptr [rax]
10000e9aa:	lea	r14, [rip + 0x1aedf]
10000e9b1:	mov	rsi, qword ptr [r14]
10000e9b4:	xor	edx, edx
10000e9b6:	call	0x10001971c ## symbol stub for: _fseeko
10000e9bb:	test	eax, eax
10000e9bd:	je	0x10000e9d0
10000e9bf:	lea	rsi, [rip + 0x1372e] ## literal pool for: "seek failed on output file"
10000e9c6:	mov	edi, 0xe
10000e9cb:	call	0x100002e30
10000e9d0:	mov	rax, qword ptr [r14]
10000e9d3:	lea	rcx, [rip + 0x1aebe]
10000e9da:	mov	qword ptr [rcx], rax
10000e9dd:	mov	qword ptr [r15], rax
10000e9e0:	cmp	word ptr [rbx + 0x2a], 0x0
10000e9e5:	je	0x10000e9f0
10000e9e7:	mov	rdi, qword ptr [rbx + 0x58]
10000e9eb:	call	0x100019716 ## symbol stub for: _free
10000e9f0:	cmp	word ptr [rbx + 0x28], 0x0
10000e9f5:	je	0x10000ea13
10000e9f7:	mov	rdi, qword ptr [rbx + 0x70]
10000e9fb:	call	0x100019716 ## symbol stub for: _free
10000ea00:	cmp	word ptr [rbx + 0x28], 0x0
10000ea05:	je	0x10000ea13
10000ea07:	mov	rax, qword ptr [rbp - 0x60]
10000ea0b:	mov	rdi, qword ptr [rax]
10000ea0e:	call	0x100019716 ## symbol stub for: _free
10000ea13:	mov	rdi, rbx
10000ea16:	call	0x100019716 ## symbol stub for: _free
10000ea1b:	jmp	0x10000ea36
10000ea1d:	lea	rdi, [rip + 0x13689] ## literal pool for: "out of memory in zipcopy"
10000ea24:	lea	rsi, [rip + 0xbd8c] ## literal pool for: ""
10000ea2b:	call	0x1000034f4
10000ea30:	mov	r13d, 0x4
10000ea36:	mov	rax, qword ptr [rip + 0x155d3] ## literal pool symbol address: ___stack_chk_guard
10000ea3d:	mov	rax, qword ptr [rax]
10000ea40:	cmp	rax, qword ptr [rbp - 0x30]
10000ea44:	jne	0x10000ed4e
10000ea4a:	mov	eax, r13d
10000ea4d:	add	rsp, 0x38
10000ea51:	pop	rbx
10000ea52:	pop	r12
10000ea54:	pop	r13
10000ea56:	pop	r14
10000ea58:	pop	r15
10000ea5a:	pop	rbp
10000ea5b:	ret
10000ea5c:	test	al, 0x8
10000ea5e:	je	0x10000ea68
10000ea60:	mov	rdi, r12
10000ea63:	call	0x10000d7cf
10000ea68:	lea	rax, [rip + 0x1ae35]
10000ea6f:	cmp	dword ptr [rax], 0x1
10000ea72:	jne	0x10000eab9
10000ea74:	lea	rax, [rip + 0x1adcd]
10000ea7b:	mov	rdi, qword ptr [rax]
10000ea7e:	lea	rax, [rip + 0x1adcb]
10000ea85:	cmp	rdi, qword ptr [rax]
10000ea88:	je	0x10000eab9
10000ea8a:	lea	r14, [rip + 0x1adf7]
10000ea91:	mov	rsi, qword ptr [r14]
10000ea94:	lea	r15, [rip + 0x1ade5]
10000ea9b:	mov	rdx, qword ptr [r15]
10000ea9e:	call	0x10001374d
10000eaa3:	mov	qword ptr [r14], 0x0
10000eaaa:	mov	rdi, qword ptr [r15]
10000eaad:	lea	r14, [rip + 0x1abfc]
10000eab4:	call	0x100019716 ## symbol stub for: _free
10000eab9:	cmp	dword ptr [r14], 0x2
10000eabd:	jne	0x10000ebb3
10000eac3:	mov	rdx, r12
10000eac6:	movzx	eax, word ptr [r12 + 0x2]
10000eacc:	mov	word ptr [rbx + 0x2], ax
10000ead0:	movzx	eax, word ptr [r12 + 0x6]
10000ead6:	mov	word ptr [rbx + 0x6], ax
10000eada:	movups	xmm0, xmmword ptr [r12 + 0x8]
10000eae0:	movups	xmmword ptr [rbx + 0x8], xmm0
10000eae4:	movzx	eax, word ptr [r12 + 0x3a]
10000eaea:	mov	word ptr [rbx + 0x3a], ax
10000eaee:	mov	word ptr [rbx + 0x4], ax
10000eaf2:	movups	xmm0, xmmword ptr [r12 + 0x18]
10000eaf8:	movups	xmmword ptr [rbx + 0x18], xmm0
10000eafc:	movzx	eax, word ptr [r12 + 0x28]
10000eb02:	mov	word ptr [rbx + 0x28], ax
10000eb06:	movzx	edi, word ptr [r12 + 0x2a]
10000eb0c:	mov	word ptr [rbx + 0x2a], di
10000eb10:	mov	r14, qword ptr [r12 + 0x58]
10000eb15:	mov	qword ptr [rbx + 0x58], r14
10000eb19:	mov	word ptr [rbx + 0x2c], di
10000eb1d:	mov	qword ptr [rbx + 0x60], 0x0
10000eb25:	test	rdi, rdi
10000eb28:	je	0x10000eb53
10000eb2a:	inc	rdi
10000eb2d:	call	0x100019758 ## symbol stub for: _malloc
10000eb32:	mov	qword ptr [rbx + 0x60], rax
10000eb36:	test	rax, rax
10000eb39:	je	0x10000ea30
10000eb3f:	mov	rdi, rax
10000eb42:	mov	rsi, r14
10000eb45:	call	0x100019824 ## symbol stub for: _strcpy
10000eb4a:	mov	rdx, r12
10000eb4d:	movzx	eax, word ptr [r12 + 0x28]
10000eb53:	mov	dword ptr [rbp - 0x60], r13d
10000eb57:	xor	ecx, ecx
10000eb59:	mov	word ptr [rbx + 0x2e], cx
10000eb5d:	mov	word ptr [rbx + 0x38], cx
10000eb61:	mov	qword ptr [rbx + 0x48], 0x0
10000eb69:	mov	rcx, qword ptr [rdx + 0x50]
10000eb6d:	mov	qword ptr [rbx + 0x50], rcx
10000eb71:	mov	r15, qword ptr [rdx + 0x70]
10000eb75:	mov	qword ptr [rbx + 0x70], r15
10000eb79:	movzx	edi, ax
10000eb7c:	inc	rdi
10000eb7f:	call	0x100019758 ## symbol stub for: _malloc
10000eb84:	mov	qword ptr [rbx + 0x78], rax
10000eb88:	mov	r13d, 0x4
10000eb8e:	test	rax, rax
10000eb91:	je	0x10000ea36
10000eb97:	mov	rdi, rax
10000eb9a:	mov	rsi, r15
10000eb9d:	call	0x100019824 ## symbol stub for: _strcpy
10000eba2:	mov	rbx, qword ptr [rbp - 0x58]
10000eba6:	lea	r14, [rip + 0x1ab03]
10000ebad:	mov	r13d, dword ptr [rbp - 0x60]
10000ebb1:	jmp	0x10000ebf5
10000ebb3:	mov	r15, r12
10000ebb6:	cmp	word ptr [r12 + 0x2a], 0x0
10000ebbd:	je	0x10000ebc8
10000ebbf:	mov	rdi, qword ptr [r15 + 0x58]
10000ebc3:	call	0x100019716 ## symbol stub for: _free
10000ebc8:	cmp	word ptr [r15 + 0x28], 0x0
10000ebce:	je	0x10000ebed
10000ebd0:	mov	rdi, qword ptr [r15 + 0x70]
10000ebd4:	call	0x100019716 ## symbol stub for: _free
10000ebd9:	cmp	word ptr [r15 + 0x28], 0x0
10000ebdf:	je	0x10000ebed
10000ebe1:	mov	rax, qword ptr [rbp - 0x60]
10000ebe5:	mov	rdi, qword ptr [rax]
10000ebe8:	call	0x100019716 ## symbol stub for: _free
10000ebed:	mov	rdi, r15
10000ebf0:	call	0x100019716 ## symbol stub for: _free
10000ebf5:	cmp	dword ptr [r14], 0x2
10000ebf9:	jne	0x10000ea36
10000ebff:	mov	rdi, qword ptr [rbx + 0x18]
10000ec03:	lea	rdx, [rip + 0xd63c] ## literal pool for: "u"
10000ec0a:	xor	esi, esi
10000ec0c:	call	0x100015a80
10000ec11:	lea	rbx, [rip + 0x1af18]
10000ec18:	lea	rcx, [rip + 0xe6e9] ## literal pool for: " (%s bytes)"
10000ec1f:	mov	edx, 0x13f1
10000ec24:	mov	rdi, rbx
10000ec27:	xor	esi, esi
10000ec29:	mov	r8, rax
10000ec2c:	xor	eax, eax
10000ec2e:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000ec33:	mov	rdi, rbx
10000ec36:	mov	esi, 0x1
10000ec3b:	call	0x100003300
10000ec40:	mov	eax, r13d
10000ec43:	cmp	r13d, 0xb
10000ec47:	jne	0x10000ea36
10000ec4d:	mov	rax, qword ptr [rbp - 0x58]
10000ec51:	mov	rsi, qword ptr [rax + 0x80]
10000ec58:	lea	rdi, [rip + 0x134f8] ## literal pool for: "entry truncated: "
10000ec5f:	call	0x1000034f4
10000ec64:	mov	rdi, qword ptr [r12 + 0x18]
10000ec69:	lea	r14, [rip + 0xd5d6] ## literal pool for: "u"
10000ec70:	xor	esi, esi
10000ec72:	mov	rdx, r14
10000ec75:	call	0x100015a80
10000ec7a:	mov	rbx, rax
10000ec7d:	lea	rax, [rip + 0x1ac3c]
10000ec84:	mov	rdi, qword ptr [rax]
10000ec87:	xor	esi, esi
10000ec89:	mov	rdx, r14
10000ec8c:	call	0x100015a80
10000ec91:	lea	r14, [rip + 0x1ae98]
10000ec98:	lea	rcx, [rip + 0x134ca] ## literal pool for: "expected compressed/stored size %s, actual %s"
10000ec9f:	mov	edx, 0x13f1
10000eca4:	mov	rdi, r14
10000eca7:	xor	esi, esi
10000eca9:	mov	r8, rbx
10000ecac:	mov	r9, rax
10000ecaf:	xor	eax, eax
10000ecb1:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000ecb6:	lea	rsi, [rip + 0xbafa] ## literal pool for: ""
10000ecbd:	mov	rdi, r14
10000ecc0:	jmp	0x10000e343
10000ecc5:	mov	rsi, qword ptr [rbx + 0x80]
10000eccc:	lea	rdi, [rip + 0x1343c] ## literal pool for: "no end of stream entry found: "
10000ecd3:	call	0x1000034f4
10000ecd8:	lea	rdi, [rip + 0x1344f] ## literal pool for: "rewinding and scanning for later entries"
10000ecdf:	lea	rsi, [rip + 0xbad1] ## literal pool for: ""
10000ece6:	call	0x1000034f4
10000eceb:	lea	rax, [rip + 0x1ab06]
10000ecf2:	mov	rdi, qword ptr [rax]
10000ecf5:	lea	rax, [rip + 0x1ab94]
10000ecfc:	mov	rsi, qword ptr [rax]
10000ecff:	xor	edx, edx
10000ed01:	call	0x10001971c ## symbol stub for: _fseeko
10000ed06:	cmp	word ptr [r12 + 0x2a], 0x0
10000ed0d:	je	0x10000ed19
10000ed0f:	mov	rdi, qword ptr [r12 + 0x58]
10000ed14:	call	0x100019716 ## symbol stub for: _free
10000ed19:	cmp	word ptr [r12 + 0x28], 0x0
10000ed20:	je	0x10000ed41
10000ed22:	mov	rdi, qword ptr [r12 + 0x70]
10000ed27:	call	0x100019716 ## symbol stub for: _free
10000ed2c:	cmp	word ptr [r12 + 0x28], 0x0
10000ed33:	je	0x10000ed41
10000ed35:	mov	rax, qword ptr [rbp - 0x60]
10000ed39:	mov	rdi, qword ptr [rax]
10000ed3c:	call	0x100019716 ## symbol stub for: _free
10000ed41:	mov	rdi, r12
10000ed44:	call	0x100019716 ## symbol stub for: _free
10000ed49:	jmp	0x10000e4fc
10000ed4e:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
10000ed53:	push	rbp
10000ed54:	mov	rbp, rsp
10000ed57:	push	r14
10000ed59:	push	rbx
10000ed5a:	mov	r14, rsi
10000ed5d:	mov	rbx, rdi
10000ed60:	mov	rdi, qword ptr [rdi + 0x58]
10000ed64:	movzx	esi, word ptr [rbx + 0x2a]
10000ed68:	xor	edx, edx
10000ed6a:	mov	rcx, r14
10000ed6d:	call	0x10000eda8
10000ed72:	test	eax, eax
10000ed74:	je	0x10000ed7b
10000ed76:	pop	rbx
10000ed77:	pop	r14
10000ed79:	pop	rbp
10000ed7a:	ret
10000ed7b:	movzx	esi, word ptr [rbx + 0x2c]
10000ed7f:	test	rsi, rsi
10000ed82:	je	0x10000eda4
10000ed84:	mov	rdi, qword ptr [rbx + 0x60]
10000ed88:	mov	eax, 0x0
10000ed8d:	cmp	rdi, qword ptr [rbx + 0x58]
10000ed91:	je	0x10000ed76
10000ed93:	mov	edx, 0x1
10000ed98:	mov	rcx, r14
10000ed9b:	pop	rbx
10000ed9c:	pop	r14
10000ed9e:	pop	rbp
10000ed9f:	jmp	0x10000eda8
10000eda4:	xor	eax, eax
10000eda6:	jmp	0x10000ed76
10000eda8:	push	rbp
10000eda9:	mov	rbp, rsp
10000edac:	xor	eax, eax
10000edae:	test	rdi, rdi
10000edb1:	je	0x10000eee2
10000edb7:	cmp	rsi, 0x4
10000edbb:	jb	0x10000eee2
10000edc1:	xor	r9d, r9d
10000edc4:	xor	eax, eax
10000edc6:	movzx	r8d, word ptr [rdi + 0x2]
10000edcb:	lea	r10, [rsi - 0x4]
10000edcf:	cmp	r8, r10
10000edd2:	ja	0x10000eee2
10000edd8:	movzx	r10d, word ptr [rdi]
10000eddc:	cmp	r10d, 0x7855
10000ede3:	je	0x10000ee46
10000ede5:	movzx	r10d, r10w
10000ede9:	cmp	r10d, 0x5855
10000edf0:	je	0x10000ee5f
10000edf2:	cmp	r10d, 0x5455
10000edf9:	jne	0x10000eeca
10000edff:	and	eax, 0xffffff00
10000ee04:	mov	r9d, 0x1
10000ee0a:	test	rcx, rcx
10000ee0d:	je	0x10000eeca
10000ee13:	test	r8, r8
10000ee16:	je	0x10000eeca
10000ee1c:	movzx	r10d, byte ptr [rdi + 0x4]
10000ee21:	or	eax, r10d
10000ee24:	mov	r9d, 0x1
10000ee2a:	test	r10b, 0x1
10000ee2e:	je	0x10000ee84
10000ee30:	cmp	r8d, 0x5
10000ee34:	jb	0x10000ee81
10000ee36:	mov	r10d, dword ptr [rdi + 0x5]
10000ee3a:	mov	qword ptr [rcx + 0x8], r10
10000ee3e:	mov	r10d, 0x5
10000ee44:	jmp	0x10000ee8a
10000ee46:	mov	r10d, eax
10000ee49:	and	r10d, 0xffffff00
10000ee50:	test	r9d, r9d
10000ee53:	cmove	eax, r10d
10000ee57:	mov	r9d, 0x1
10000ee5d:	jmp	0x10000eeca
10000ee5f:	test	r9d, r9d
10000ee62:	jne	0x10000eeca
10000ee64:	cmp	r8d, 0x8
10000ee68:	jb	0x10000eeca
10000ee6a:	mov	r9d, dword ptr [rdi + 0x4]
10000ee6e:	mov	qword ptr [rcx], r9
10000ee71:	mov	r9d, dword ptr [rdi + 0x8]
10000ee75:	mov	qword ptr [rcx + 0x8], r9
10000ee79:	or	eax, 0x3
10000ee7c:	xor	r9d, r9d
10000ee7f:	jmp	0x10000eeca
10000ee81:	and	eax, -0x2
10000ee84:	mov	r10d, 0x1
10000ee8a:	test	edx, edx
10000ee8c:	jne	0x10000eeca
10000ee8e:	test	al, 0x2
10000ee90:	je	0x10000eead
10000ee92:	mov	r11d, r10d
10000ee95:	add	r11, 0x4
10000ee99:	cmp	r8, r11
10000ee9c:	jae	0x10000eea3
10000ee9e:	and	eax, -0x3
10000eea1:	jmp	0x10000eead
10000eea3:	mov	r10d, dword ptr [rdi + r11]
10000eea7:	mov	qword ptr [rcx], r10
10000eeaa:	mov	r10d, r11d
10000eead:	test	al, 0x4
10000eeaf:	je	0x10000eeca
10000eeb1:	mov	r10d, r10d
10000eeb4:	add	r10, 0x4
10000eeb8:	cmp	r8, r10
10000eebb:	jae	0x10000eec2
10000eebd:	and	eax, -0x5
10000eec0:	jmp	0x10000eeca
10000eec2:	mov	r10d, dword ptr [rdi + r10]
10000eec6:	mov	qword ptr [rcx + 0x10], r10
10000eeca:	add	rdi, r8
10000eecd:	add	rdi, 0x4
10000eed1:	add	r8, 0x4
10000eed5:	sub	rsi, r8
10000eed8:	cmp	rsi, 0x3
10000eedc:	ja	0x10000edc6
10000eee2:	pop	rbp
10000eee3:	ret
10000eee4:	push	rbp
10000eee5:	mov	rbp, rsp
10000eee8:	push	r15
10000eeea:	push	r14
10000eeec:	push	r13
10000eeee:	push	r12
10000eef0:	push	rbx
10000eef1:	push	rax
10000eef2:	lea	rax, [rip + 0x1a9df]
10000eef9:	mov	rbx, qword ptr [rax]
10000eefc:	test	rbx, rbx
10000eeff:	je	0x10000f159
10000ef05:	xor	r14d, r14d
10000ef08:	lea	r13, [rip + 0x1a79d]
10000ef0f:	lea	r15, [rip + 0x1a53e]
10000ef16:	xor	r12d, r12d
10000ef19:	cmp	dword ptr [rbx + 0x88], 0x1
10000ef20:	je	0x10000ef2f
10000ef22:	cmp	dword ptr [rbx + 0x8c], 0x0
10000ef29:	je	0x10000f014
10000ef2f:	mov	dword ptr [rbx + 0x88], 0x1
10000ef39:	mov	rax, qword ptr [rbx + 0x70]
10000ef3d:	movzx	ecx, word ptr [rbx + 0x28]
10000ef41:	cmp	byte ptr [rcx + rax - 0x1], 0x2f
10000ef46:	jne	0x10000ef50
10000ef48:	inc	r12
10000ef4b:	jmp	0x10000f014
10000ef50:	cmp	dword ptr [r13], 0x0
10000ef55:	je	0x10000ef73
10000ef57:	lea	rax, [rip + 0x1bfd2]
10000ef5e:	mov	rdi, qword ptr [rax]
10000ef61:	mov	rdx, qword ptr [rbx + 0x50]
10000ef65:	lea	rsi, [rip + 0x1322b] ## literal pool for: "zip diagnostic: deleting file %s\n"
10000ef6c:	xor	eax, eax
10000ef6e:	call	0x1000196fe ## symbol stub for: _fprintf
10000ef73:	mov	rdi, qword ptr [rbx + 0x50]
10000ef77:	call	0x10001160a
10000ef7c:	test	eax, eax
10000ef7e:	je	0x10000ef90
10000ef80:	mov	rsi, qword ptr [rbx + 0x50]
10000ef84:	lea	rdi, [rip + 0x1322e] ## literal pool for: "error deleting "
10000ef8b:	call	0x1000034f4
10000ef90:	cmp	dword ptr [r15], 0x0
10000ef94:	jne	0x10000f014
10000ef96:	mov	r13, qword ptr [rbx + 0x50]
10000ef9a:	mov	rdi, r13
10000ef9d:	mov	esi, 0x2f
10000efa2:	call	0x100019842 ## symbol stub for: _strrchr
10000efa7:	test	rax, rax
10000efaa:	cmove	rax, r13
10000efae:	mov	byte ptr [rax], r14b
10000efb1:	mov	r13, qword ptr [rbx + 0x70]
10000efb5:	mov	rdi, r13
10000efb8:	mov	esi, 0x2f
10000efbd:	call	0x100019842 ## symbol stub for: _strrchr
10000efc2:	test	rax, rax
10000efc5:	cmove	rax, r13
10000efc9:	mov	byte ptr [rax], r14b
10000efcc:	mov	r13, qword ptr [rbx + 0x70]
10000efd0:	mov	rdi, r13
10000efd3:	call	0x100019830 ## symbol stub for: _strlen
10000efd8:	mov	word ptr [rbx + 0x28], ax
10000efdc:	mov	ecx, eax
10000efde:	and	ecx, 0xffff
10000efe4:	je	0x10000f005
10000efe6:	dec	ecx
10000efe8:	mov	byte ptr [r13 + rcx], 0x2f
10000efee:	mov	rax, qword ptr [rbx + 0x70]
10000eff2:	movzx	ecx, word ptr [rbx + 0x28]
10000eff6:	lea	edx, [rcx + 0x1]
10000eff9:	mov	word ptr [rbx + 0x28], dx
10000effd:	mov	byte ptr [rax + rcx], 0x0
10000f001:	movzx	eax, word ptr [rbx + 0x28]
10000f005:	cmp	ax, 0x1
10000f009:	sbb	r12, -0x1
10000f00d:	lea	r13, [rip + 0x1a698]
10000f014:	mov	rbx, qword ptr [rbx + 0x98]
10000f01b:	test	rbx, rbx
10000f01e:	jne	0x10000ef19
10000f024:	xor	r14d, r14d
10000f027:	test	r12, r12
10000f02a:	je	0x10000f184
10000f030:	shl	r12, 0x3
10000f034:	mov	rdi, r12
10000f037:	call	0x100019758 ## symbol stub for: _malloc
10000f03c:	test	rax, rax
10000f03f:	je	0x10000f15e
10000f045:	mov	r13, rax
10000f048:	lea	rax, [rip + 0x1a889]
10000f04f:	mov	rbx, qword ptr [rax]
10000f052:	test	rbx, rbx
10000f055:	je	0x10000f166
10000f05b:	xor	r15d, r15d
10000f05e:	cmp	dword ptr [rbx + 0x88], 0x0
10000f065:	je	0x10000f09f
10000f067:	movzx	eax, word ptr [rbx + 0x28]
10000f06b:	test	rax, rax
10000f06e:	je	0x10000f09f
10000f070:	mov	rcx, qword ptr [rbx + 0x70]
10000f074:	dec	eax
10000f076:	cmp	byte ptr [rcx + rax], 0x2f
10000f07a:	jne	0x10000f09f
10000f07c:	test	r15, r15
10000f07f:	je	0x10000f097
10000f081:	mov	rdi, qword ptr [rbx + 0x50]
10000f085:	mov	rax, qword ptr [r13 + 8*r15 - 0x8]
10000f08a:	mov	rsi, qword ptr [rax + 0x50]
10000f08e:	call	0x10001981e ## symbol stub for: _strcmp
10000f093:	test	eax, eax
10000f095:	je	0x10000f09f
10000f097:	mov	qword ptr [r13 + 8*r15], rbx
10000f09c:	inc	r15
10000f09f:	mov	rbx, qword ptr [rbx + 0x98]
10000f0a6:	test	rbx, rbx
10000f0a9:	jne	0x10000f05e
10000f0ab:	lea	rcx, [rip + 0xe4]
10000f0b2:	mov	edx, 0x8
10000f0b7:	mov	rdi, r13
10000f0ba:	mov	rsi, r15
10000f0bd:	call	0x1000197b8 ## symbol stub for: _qsort
10000f0c2:	test	r15, r15
10000f0c5:	je	0x10000f17c
10000f0cb:	xor	r12d, r12d
10000f0ce:	mov	rax, qword ptr [r13 + 8*r12]
10000f0d3:	mov	rbx, qword ptr [rax + 0x50]
10000f0d7:	cmp	byte ptr [rbx], 0x0
10000f0da:	je	0x10000f14b
10000f0dc:	mov	rdi, rbx
10000f0df:	call	0x100019830 ## symbol stub for: _strlen
10000f0e4:	cmp	byte ptr [rax + rbx - 0x1], 0x2f
10000f0e9:	jne	0x10000f0f0
10000f0eb:	mov	byte ptr [rbx + rax - 0x1], 0x0
10000f0f0:	test	r12, r12
10000f0f3:	je	0x10000f110
10000f0f5:	mov	rax, qword ptr [r13 + 8*r12 - 0x8]
10000f0fa:	mov	rcx, qword ptr [r13 + 8*r12]
10000f0ff:	mov	rdi, qword ptr [rcx + 0x50]
10000f103:	mov	rsi, qword ptr [rax + 0x50]
10000f107:	call	0x10001981e ## symbol stub for: _strcmp
10000f10c:	test	eax, eax
10000f10e:	je	0x10000f14b
10000f110:	lea	rax, [rip + 0x1a595]
10000f117:	cmp	dword ptr [rax], 0x0
10000f11a:	je	0x10000f13d
10000f11c:	lea	rax, [rip + 0x1be0d]
10000f123:	mov	rdi, qword ptr [rax]
10000f126:	mov	rax, qword ptr [r13 + 8*r12]
10000f12b:	mov	rdx, qword ptr [rax + 0x50]
10000f12f:	lea	rsi, [rip + 0x13093] ## literal pool for: "deleting directory %s (if empty)                \n"
10000f136:	xor	eax, eax
10000f138:	call	0x1000196fe ## symbol stub for: _fprintf
10000f13d:	mov	rax, qword ptr [r13 + 8*r12]
10000f142:	mov	rdi, qword ptr [rax + 0x50]
10000f146:	call	0x100016ea3
10000f14b:	inc	r12
10000f14e:	cmp	r15, r12
10000f151:	jne	0x10000f0ce
10000f157:	jmp	0x10000f17c
10000f159:	xor	r14d, r14d
10000f15c:	jmp	0x10000f184
10000f15e:	mov	r14d, 0x4
10000f164:	jmp	0x10000f184
10000f166:	lea	rcx, [rip + 0x29]
10000f16d:	mov	edx, 0x8
10000f172:	mov	rdi, r13
10000f175:	xor	esi, esi
10000f177:	call	0x1000197b8 ## symbol stub for: _qsort
10000f17c:	mov	rdi, r13
10000f17f:	call	0x100019716 ## symbol stub for: _free
10000f184:	mov	eax, r14d
10000f187:	add	rsp, 0x8
10000f18b:	pop	rbx
10000f18c:	pop	r12
10000f18e:	pop	r13
10000f190:	pop	r14
10000f192:	pop	r15
10000f194:	pop	rbp
10000f195:	ret
10000f196:	push	rbp
10000f197:	mov	rbp, rsp
10000f19a:	mov	rax, qword ptr [rsi]
10000f19d:	mov	rax, qword ptr [rax + 0x70]
10000f1a1:	mov	rcx, qword ptr [rdi]
10000f1a4:	mov	rsi, qword ptr [rcx + 0x70]
10000f1a8:	mov	rdi, rax
10000f1ab:	pop	rbp
10000f1ac:	jmp	0x100015685
10000f1b1:	push	rbp
10000f1b2:	mov	rbp, rsp
10000f1b5:	push	r15
10000f1b7:	push	r14
10000f1b9:	push	rbx
10000f1ba:	push	rax
10000f1bb:	mov	r15, rdi
10000f1be:	mov	eax, dword ptr [rsi]
10000f1c0:	mov	dword ptr [rbp - 0x1c], eax
10000f1c3:	cmp	al, 0x50
10000f1c5:	jne	0x10000f1cb
10000f1c7:	mov	byte ptr [rbp - 0x1c], 0x50
10000f1cb:	cmp	byte ptr [rbp - 0x1b], 0x4b
10000f1cf:	jne	0x10000f1d5
10000f1d1:	mov	byte ptr [rbp - 0x1b], 0x4b
10000f1d5:	xor	r14d, r14d
10000f1d8:	lea	rbx, [rip + 0x4bdf2]
10000f1df:	mov	rdi, r15
10000f1e2:	call	0x1000196da ## symbol stub for: _feof
10000f1e7:	test	eax, eax
10000f1e9:	jne	0x10000f218
10000f1eb:	mov	rdi, r15
10000f1ee:	call	0x10000f226
10000f1f3:	test	eax, eax
10000f1f5:	je	0x10000f218
10000f1f7:	xor	eax, eax
10000f1f9:	mov	cl, byte ptr [rbp + rax - 0x1c]
10000f1fd:	cmp	cl, byte ptr [rax + rbx]
10000f200:	jne	0x10000f20d
10000f202:	inc	rax
10000f205:	cmp	rax, 0x4
10000f209:	jne	0x10000f1f9
10000f20b:	jmp	0x10000f212
10000f20d:	cmp	eax, 0x4
10000f210:	jne	0x10000f1df
10000f212:	mov	r14d, 0x1
10000f218:	mov	eax, r14d
10000f21b:	add	rsp, 0x8
10000f21f:	pop	rbx
10000f220:	pop	r14
10000f222:	pop	r15
10000f224:	pop	rbp
10000f225:	ret
10000f226:	push	rbp
10000f227:	mov	rbp, rsp
10000f22a:	push	r15
10000f22c:	push	r14
10000f22e:	push	rbx
10000f22f:	push	rax
10000f230:	mov	r15, rdi
10000f233:	call	0x100019734 ## symbol stub for: _getc
10000f238:	mov	ebx, eax
10000f23a:	xor	r14d, r14d
10000f23d:	cmp	ebx, 0x50
10000f240:	je	0x10000f24c
10000f242:	cmp	ebx, -0x1
10000f245:	jne	0x10000f26f
10000f247:	jmp	0x10000f2df
10000f24c:	mov	byte ptr [rip + 0x4bd7e], 0x50
10000f253:	mov	rdi, r15
10000f256:	call	0x100019734 ## symbol stub for: _getc
10000f25b:	cmp	eax, 0x4b
10000f25e:	je	0x10000f27b
10000f260:	cmp	eax, -0x1
10000f263:	je	0x10000f2df
10000f265:	mov	edi, eax
10000f267:	mov	rsi, r15
10000f26a:	call	0x100019866 ## symbol stub for: _ungetc
10000f26f:	mov	rdi, r15
10000f272:	call	0x100019734 ## symbol stub for: _getc
10000f277:	mov	ebx, eax
10000f279:	jmp	0x10000f23d
10000f27b:	mov	byte ptr [rip + 0x4bd50], 0x4b
10000f282:	mov	rdi, r15
10000f285:	call	0x100019734 ## symbol stub for: _getc
10000f28a:	cmp	eax, 0x50
10000f28d:	je	0x10000f2bc
10000f28f:	mov	ebx, eax
10000f291:	cmp	eax, -0x1
10000f294:	je	0x10000f2df
10000f296:	cmp	ebx, 0xf
10000f299:	jg	0x10000f23d
10000f29b:	mov	byte ptr [rip + 0x4bd32], bl
10000f2a1:	mov	rdi, r15
10000f2a4:	call	0x100019734 ## symbol stub for: _getc
10000f2a9:	cmp	eax, 0x50
10000f2ac:	je	0x10000f2bc
10000f2ae:	mov	ebx, eax
10000f2b0:	cmp	eax, -0x1
10000f2b3:	je	0x10000f2df
10000f2b5:	cmp	ebx, 0xf
10000f2b8:	jg	0x10000f23d
10000f2ba:	jmp	0x10000f2d3
10000f2bc:	mov	ebx, 0x50
10000f2c1:	mov	edi, 0x50
10000f2c6:	mov	rsi, r15
10000f2c9:	call	0x100019866 ## symbol stub for: _ungetc
10000f2ce:	jmp	0x10000f23d
10000f2d3:	mov	byte ptr [rip + 0x4bcfb], bl
10000f2d9:	mov	r14d, 0x1
10000f2df:	mov	eax, r14d
10000f2e2:	add	rsp, 0x8
10000f2e6:	pop	rbx
10000f2e7:	pop	r14
10000f2e9:	pop	r15
10000f2eb:	pop	rbp
10000f2ec:	ret
10000f2ed:	push	rbp
10000f2ee:	mov	rbp, rsp
10000f2f1:	mov	ecx, dword ptr [rdi]
10000f2f3:	mov	dword ptr [rbp - 0x8], ecx
10000f2f6:	mov	eax, dword ptr [rsi]
10000f2f8:	mov	dword ptr [rbp - 0x4], eax
10000f2fb:	cmp	cl, 0x50
10000f2fe:	jne	0x10000f304
10000f300:	mov	byte ptr [rbp - 0x8], 0x50
10000f304:	cmp	byte ptr [rbp - 0x7], 0x4b
10000f308:	jne	0x10000f30e
10000f30a:	mov	byte ptr [rbp - 0x7], 0x4b
10000f30e:	mov	dl, byte ptr [rbp - 0x4]
10000f311:	cmp	dl, 0x50
10000f314:	jne	0x10000f31a
10000f316:	mov	byte ptr [rbp - 0x4], 0x50
10000f31a:	cmp	byte ptr [rbp - 0x3], 0x4b
10000f31e:	jne	0x10000f324
10000f320:	mov	byte ptr [rbp - 0x3], 0x4b
10000f324:	xor	eax, eax
10000f326:	cmp	cl, dl
10000f328:	jne	0x10000f352
10000f32a:	xor	eax, eax
10000f32c:	cmp	rax, 0x3
10000f330:	je	0x10000f34d
10000f332:	lea	rcx, [rax + 0x1]
10000f336:	mov	dl, byte ptr [rbp + rax - 0x7]
10000f33a:	cmp	dl, byte ptr [rbp + rax - 0x3]
10000f33e:	mov	rax, rcx
10000f341:	je	0x10000f32c
10000f343:	xor	eax, eax
10000f345:	cmp	ecx, 0x4
10000f348:	sete	al
10000f34b:	jmp	0x10000f352
10000f34d:	mov	eax, 0x1
10000f352:	pop	rbp
10000f353:	ret
10000f354:	push	rbp
10000f355:	mov	rbp, rsp
10000f358:	push	r14
10000f35a:	push	rbx
10000f35b:	sub	rsp, 0x10
10000f35f:	mov	rbx, rdi
10000f362:	movzx	eax, word ptr [rdi]
10000f365:	cmp	eax, 0x1f00
10000f36a:	jb	0x10000f3bd
10000f36c:	mov	ecx, eax
10000f36e:	shr	ecx, 0x8
10000f371:	movzx	eax, al
10000f374:	imul	r8d, eax, 0xcd
10000f37b:	shr	r8d, 0xb
10000f37f:	lea	edx, [r8 + r8]
10000f383:	lea	edx, [rdx + 4*rdx]
10000f386:	sub	al, dl
10000f388:	movzx	r9d, al
10000f38c:	mov	dword ptr [rsp], ecx
10000f38f:	lea	r14, [rip + 0x1a79a]
10000f396:	lea	rcx, [rip + 0x134c0] ## literal pool for: "made by version %d.%d on system type %d: "
10000f39d:	mov	edx, 0x13f1
10000f3a2:	mov	rdi, r14
10000f3a5:	xor	esi, esi
10000f3a7:	xor	eax, eax
10000f3a9:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000f3ae:	mov	rsi, qword ptr [rbx + 0x80]
10000f3b5:	mov	rdi, r14
10000f3b8:	call	0x1000034f4
10000f3bd:	movzx	eax, word ptr [rbx + 0x2]
10000f3c1:	cmp	rax, 0x14
10000f3c5:	ja	0x10000f3d2
10000f3c7:	mov	ecx, 0x100c00
10000f3cc:	bt	rcx, rax
10000f3d0:	jb	0x10000f421
10000f3d2:	movzx	ecx, al
10000f3d5:	imul	r8d, ecx, 0xcd
10000f3dc:	shr	r8d, 0xb
10000f3e0:	lea	edx, [r8 + r8]
10000f3e4:	lea	edx, [rdx + 4*rdx]
10000f3e7:	sub	cl, dl
10000f3e9:	movzx	r9d, cl
10000f3ed:	shr	eax, 0x8
10000f3f0:	mov	dword ptr [rsp], eax
10000f3f3:	lea	r14, [rip + 0x1a736]
10000f3fa:	lea	rcx, [rip + 0x13486] ## literal pool for: "needs unzip %d.%d on system type %d: "
10000f401:	mov	edx, 0x13f1
10000f406:	mov	rdi, r14
10000f409:	xor	esi, esi
10000f40b:	xor	eax, eax
10000f40d:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000f412:	mov	rsi, qword ptr [rbx + 0x80]
10000f419:	mov	rdi, r14
10000f41c:	call	0x1000034f4
10000f421:	lea	rax, [rip + 0x1a288]
10000f428:	cmp	dword ptr [rax], 0x2
10000f42b:	movzx	r9d, word ptr [rbx + 0x4]
10000f430:	jne	0x10000f43d
10000f432:	movzx	r8d, word ptr [rbx + 0x3a]
10000f437:	cmp	r9w, r8w
10000f43b:	jne	0x10000f476
10000f43d:	test	r9d, 0xfff0
10000f444:	je	0x10000f4a5
10000f446:	mov	eax, r9d
10000f449:	and	eax, 0xff0f
10000f44e:	cmp	eax, 0x800
10000f453:	je	0x10000f4a5
10000f455:	lea	rdi, [rip + 0x1a6d4]
10000f45c:	lea	rcx, [rip + 0x13473] ## literal pool for: "undefined bits used in flags = 0x%04x: "
10000f463:	mov	edx, 0x13f1
10000f468:	xor	esi, esi
10000f46a:	mov	r8d, r9d
10000f46d:	xor	eax, eax
10000f46f:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000f474:	jmp	0x10000f492
10000f476:	lea	rdi, [rip + 0x1a6b3]
10000f47d:	lea	rcx, [rip + 0x13429] ## literal pool for: "local flags = 0x%04x, central = 0x%04x: "
10000f484:	mov	edx, 0x13f1
10000f489:	xor	esi, esi
10000f48b:	xor	eax, eax
10000f48d:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000f492:	mov	rsi, qword ptr [rbx + 0x80]
10000f499:	lea	rdi, [rip + 0x1a690]
10000f4a0:	call	0x1000034f4
10000f4a5:	movzx	r8d, word ptr [rbx + 0x6]
10000f4aa:	cmp	r8d, 0x9
10000f4ae:	jb	0x10000f4de
10000f4b0:	lea	r14, [rip + 0x1a679]
10000f4b7:	lea	rcx, [rip + 0x13440] ## literal pool for: "unknown compression method %u: "
10000f4be:	mov	edx, 0x13f1
10000f4c3:	mov	rdi, r14
10000f4c6:	xor	esi, esi
10000f4c8:	xor	eax, eax
10000f4ca:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000f4cf:	mov	rsi, qword ptr [rbx + 0x80]
10000f4d6:	mov	rdi, r14
10000f4d9:	call	0x1000034f4
10000f4de:	mov	r8, qword ptr [rbx + 0x30]
10000f4e2:	test	r8, r8
10000f4e5:	je	0x10000f515
10000f4e7:	lea	r14, [rip + 0x1a642]
10000f4ee:	lea	rcx, [rip + 0x13429] ## literal pool for: "starts on disk %lu: "
10000f4f5:	mov	edx, 0x13f1
10000f4fa:	mov	rdi, r14
10000f4fd:	xor	esi, esi
10000f4ff:	xor	eax, eax
10000f501:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000f506:	mov	rsi, qword ptr [rbx + 0x80]
10000f50d:	mov	rdi, r14
10000f510:	call	0x1000034f4
10000f515:	movzx	r8d, word ptr [rbx + 0x38]
10000f51a:	cmp	r8d, 0x3
10000f51e:	jae	0x10000f529
10000f520:	add	rsp, 0x10
10000f524:	pop	rbx
10000f525:	pop	r14
10000f527:	pop	rbp
10000f528:	ret
10000f529:	lea	r14, [rip + 0x1a600]
10000f530:	lea	rcx, [rip + 0x133fc] ## literal pool for: "unknown internal attributes = 0x%04x: "
10000f537:	mov	edx, 0x13f1
10000f53c:	mov	rdi, r14
10000f53f:	xor	esi, esi
10000f541:	xor	eax, eax
10000f543:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10000f548:	mov	rsi, qword ptr [rbx + 0x80]
10000f54f:	mov	rdi, r14
10000f552:	add	rsp, 0x10
10000f556:	pop	rbx
10000f557:	pop	r14
10000f559:	pop	rbp
10000f55a:	jmp	0x1000034f4
10000f55f:	push	rbp
10000f560:	mov	rbp, rsp
10000f563:	push	r15
10000f565:	push	r14
10000f567:	push	r13
10000f569:	push	r12
10000f56b:	push	rbx
10000f56c:	push	rax
10000f56d:	mov	edx, esi
10000f56f:	mov	r13, rdi
10000f572:	lea	rax, [rip + 0x1a143]
10000f579:	mov	eax, dword ptr [rax]
10000f57b:	cmp	eax, 0x1
10000f57e:	je	0x10000f5a7
10000f580:	test	eax, eax
10000f582:	jne	0x10000f5d1
10000f584:	mov	edi, dword ptr [rip + 0x4ba5a]
10000f58a:	mov	edx, edx
10000f58c:	mov	rsi, r13
10000f58f:	call	0x1000197c4 ## symbol stub for: _read
10000f594:	mov	r14, rax
10000f597:	inc	eax
10000f599:	cmp	eax, 0x2
10000f59c:	jae	0x10000f707
10000f5a2:	jmp	0x10000f74a
10000f5a7:	shr	edx
10000f5a9:	lea	r15, [rdx + r13]
10000f5ad:	mov	edi, dword ptr [rip + 0x4ba31]
10000f5b3:	mov	rsi, r15
10000f5b6:	call	0x1000197c4 ## symbol stub for: _read
10000f5bb:	mov	r12, rax
10000f5be:	inc	eax
10000f5c0:	cmp	eax, 0x2
10000f5c3:	jae	0x10000f67b
10000f5c9:	mov	r14d, r12d
10000f5cc:	jmp	0x10000f74a
10000f5d1:	mov	edi, dword ptr [rip + 0x4ba0d]
10000f5d7:	dec	edx
10000f5d9:	mov	rsi, r13
10000f5dc:	call	0x1000197c4 ## symbol stub for: _read
10000f5e1:	mov	r14, rax
10000f5e4:	inc	eax
10000f5e6:	cmp	eax, 0x2
10000f5e9:	jb	0x10000f74a
10000f5ef:	mov	ecx, dword ptr [rip + 0x4b9eb]
10000f5f5:	cmp	ecx, -0x1
10000f5f8:	jne	0x10000f612
10000f5fa:	mov	rdi, r13
10000f5fd:	mov	esi, r14d
10000f600:	call	0x100015a39
10000f605:	xor	ecx, ecx
10000f607:	test	eax, eax
10000f609:	sete	cl
10000f60c:	mov	dword ptr [rip + 0x4b9ce], ecx
10000f612:	cmp	ecx, 0x1
10000f615:	je	0x10000f707
10000f61b:	mov	eax, r14d
10000f61e:	mov	byte ptr [r13 + rax], 0xa
10000f624:	xor	ecx, ecx
10000f626:	mov	rbx, r13
10000f629:	mov	esi, r14d
10000f62c:	mov	al, byte ptr [r13 + rcx]
10000f631:	lea	rdx, [rbx + 0x1]
10000f635:	mov	byte ptr [rbx], al
10000f637:	cmp	al, 0xd
10000f639:	jne	0x10000f64e
10000f63b:	xor	eax, eax
10000f63d:	cmp	byte ptr [r13 + rcx + 0x1], 0xa
10000f643:	sete	al
10000f646:	cmovne	rbx, rdx
10000f64a:	sub	esi, eax
10000f64c:	jmp	0x10000f651
10000f64e:	mov	rbx, rdx
10000f651:	inc	rcx
10000f654:	cmp	r14d, ecx
10000f657:	jne	0x10000f62c
10000f659:	test	esi, esi
10000f65b:	je	0x10000f6eb
10000f661:	mov	eax, esi
10000f663:	sub	rbx, rax
10000f666:	lea	eax, [rsi - 0x1]
10000f669:	cmp	byte ptr [rbx + rax], 0x1a
10000f66d:	cmove	esi, eax
10000f670:	mov	r13, rbx
10000f673:	mov	r14d, esi
10000f676:	jmp	0x10000f707
10000f67b:	mov	ecx, dword ptr [rip + 0x4b95f]
10000f681:	cmp	ecx, -0x1
10000f684:	jne	0x10000f69e
10000f686:	mov	rdi, r15
10000f689:	mov	esi, r12d
10000f68c:	call	0x100015a39
10000f691:	xor	ecx, ecx
10000f693:	test	eax, eax
10000f695:	sete	cl
10000f698:	mov	dword ptr [rip + 0x4b942], ecx
10000f69e:	cmp	ecx, 0x1
10000f6a1:	jne	0x10000f6b6
10000f6a3:	mov	edx, r12d
10000f6a6:	mov	rdi, r13
10000f6a9:	mov	rsi, r15
10000f6ac:	call	0x10001975e ## symbol stub for: _memcpy
10000f6b1:	mov	r14d, r12d
10000f6b4:	jmp	0x10000f707
10000f6b6:	xor	eax, eax
10000f6b8:	mov	r14d, r12d
10000f6bb:	mov	cl, byte ptr [r15 + rax]
10000f6bf:	mov	byte ptr [r13], cl
10000f6c3:	cmp	cl, 0xa
10000f6c6:	jne	0x10000f6d8
10000f6c8:	mov	word ptr [r13], 0xa0d
10000f6cf:	add	r13, 0x2
10000f6d3:	inc	r14d
10000f6d6:	jmp	0x10000f6db
10000f6d8:	inc	r13
10000f6db:	inc	rax
10000f6de:	cmp	r12d, eax
10000f6e1:	jne	0x10000f6bb
10000f6e3:	mov	eax, r14d
10000f6e6:	sub	r13, rax
10000f6e9:	jmp	0x10000f707
10000f6eb:	mov	edi, dword ptr [rip + 0x4b8f3]
10000f6f1:	mov	edx, 0x1
10000f6f6:	mov	rsi, rbx
10000f6f9:	call	0x1000197c4 ## symbol stub for: _read
10000f6fe:	mov	r14d, 0x1
10000f704:	mov	r13, rbx
10000f707:	mov	rdi, qword ptr [rip + 0x4b8e2]
10000f70e:	mov	ebx, r14d
10000f711:	mov	rsi, r13
10000f714:	mov	rdx, rbx
10000f717:	call	0x100016ee2
10000f71c:	mov	qword ptr [rip + 0x4b8cd], rax
10000f723:	mov	rax, qword ptr [rip + 0x4b8be]
10000f72a:	add	rbx, rax
10000f72d:	mov	qword ptr [rip + 0x4b8b4], rbx
10000f734:	cmp	rbx, rax
10000f737:	jge	0x10000f74a
10000f739:	lea	rsi, [rip + 0x13be1] ## literal pool for: "overflow in byte count"
10000f740:	mov	edi, 0x6
10000f745:	call	0x100002e30
10000f74a:	mov	eax, r14d
10000f74d:	add	rsp, 0x8
10000f751:	pop	rbx
10000f752:	pop	r12
10000f754:	pop	r13
10000f756:	pop	r14
10000f758:	pop	r15
10000f75a:	pop	rbp
10000f75b:	ret
10000f75c:	push	rbp
10000f75d:	mov	rbp, rsp
10000f760:	push	rbx
10000f761:	push	rax
10000f762:	mov	rbx, rdi
10000f765:	call	0x100019728 ## symbol stub for: _ftello
10000f76a:	mov	rdi, rbx
10000f76d:	mov	rsi, rax
10000f770:	xor	edx, edx
10000f772:	call	0x10001971c ## symbol stub for: _fseeko
10000f777:	xor	ecx, ecx
10000f779:	test	eax, eax
10000f77b:	sete	cl
10000f77e:	mov	eax, ecx
10000f780:	add	rsp, 0x8
10000f784:	pop	rbx
10000f785:	pop	rbp
10000f786:	ret
10000f787:	push	rbp
10000f788:	mov	rbp, rsp
10000f78b:	test	rdi, rdi
10000f78e:	je	0x10000f7b5
10000f790:	mov	rax, rdi
10000f793:	sub	rax, rsi
10000f796:	imul	rax, rax, 0xc8
10000f79d:	cqo
10000f79f:	idiv	rdi
10000f7a2:	lea	rcx, [rax + 0x1]
10000f7a6:	shr	rcx, 0x3f
10000f7aa:	add	rax, rcx
10000f7ad:	inc	rax
10000f7b0:	shr	rax
10000f7b3:	jmp	0x10000f7b7
10000f7b5:	xor	eax, eax
10000f7b7:	pop	rbp
10000f7b8:	ret
10000f7b9:	push	rbp
10000f7ba:	mov	rbp, rsp
10000f7bd:	push	r15
10000f7bf:	push	r14
10000f7c1:	push	r13
10000f7c3:	push	r12
10000f7c5:	push	rbx
10000f7c6:	sub	rsp, 0x68
10000f7ca:	mov	r15, rdi
10000f7cd:	lea	r14, [rbp - 0x68]
10000f7d1:	mov	qword ptr [r14], 0x0
10000f7d8:	lea	r12, [rbp - 0x48]
10000f7dc:	mov	qword ptr [r12], -0x3
10000f7e4:	mov	rbx, qword ptr [rdi + 0x70]
10000f7e8:	mov	rdi, rbx
10000f7eb:	call	0x100019830 ## symbol stub for: _strlen
10000f7f0:	mov	word ptr [r15 + 0x28], ax
10000f7f5:	movzx	eax, ax
10000f7f8:	xor	r13d, r13d
10000f7fb:	cmp	byte ptr [rax + rbx - 0x1], 0x2f
10000f800:	sete	bl
10000f803:	mov	dword ptr [rip + 0x4b7d3], 0xffffffff
10000f80d:	mov	rdi, qword ptr [r15 + 0x50]
10000f811:	lea	rcx, [rbp - 0x90]
10000f818:	mov	rsi, r14
10000f81b:	mov	rdx, r12
10000f81e:	call	0x1000169ab
10000f823:	mov	r12d, 0x12
10000f829:	test	rax, rax
10000f82c:	je	0x100010456
10000f832:	mov	r14, rax
10000f835:	mov	rax, qword ptr [rbp - 0x48]
10000f839:	cmp	rax, -0x3
10000f83d:	je	0x100010456
10000f843:	cmp	rax, -0x2
10000f847:	jne	0x10000f85b
10000f849:	mov	qword ptr [rbp - 0x48], 0x0
10000f851:	mov	r13d, 0x1
10000f857:	xor	eax, eax
10000f859:	jmp	0x10000f876
10000f85b:	mov	r13b, bl
10000f85e:	mov	ecx, dword ptr [rbp - 0x68]
10000f861:	shr	ecx, 0x4
10000f864:	and	ecx, 0x1
10000f867:	mov	r12d, 0xffffffff
10000f86d:	cmp	ecx, r13d
10000f870:	jne	0x100010456
10000f876:	lea	rcx, [rip + 0x19e93]
10000f87d:	cmp	dword ptr [rcx], 0x0
10000f880:	jne	0x10000f890
10000f882:	lea	rcx, [rip + 0x19e77]
10000f889:	mov	qword ptr [rcx], -0x1
10000f890:	xor	ebx, ebx
10000f892:	cmp	rax, -0x3
10000f896:	cmovbe	rbx, rax
10000f89a:	lea	rax, [rip + 0x19bbb]
10000f8a1:	cmp	dword ptr [rax], 0x0
10000f8a4:	lea	r12, [rip + 0x19e6d]
10000f8ab:	mov	eax, dword ptr [r12]
10000f8af:	mov	dword ptr [rbp - 0x30], r13d
10000f8b3:	je	0x10000f912
10000f8b5:	test	eax, eax
10000f8b7:	je	0x10000f912
10000f8b9:	lea	r13, [rip + 0x1b670]
10000f8c0:	mov	rcx, qword ptr [r13]
10000f8c4:	lea	rdi, [rip + 0xd925] ## literal pool for: " ("
10000f8cb:	mov	esi, 0x2
10000f8d0:	mov	edx, 0x1
10000f8d5:	call	0x10001972e ## symbol stub for: _fwrite
10000f8da:	mov	rdi, qword ptr [r13]
10000f8de:	mov	rsi, rbx
10000f8e1:	call	0x100015c88
10000f8e6:	mov	rsi, qword ptr [r13]
10000f8ea:	mov	edi, 0x29
10000f8ef:	call	0x100019704 ## symbol stub for: _fputc
10000f8f4:	lea	rax, [rip + 0x19fd1]
10000f8fb:	mov	dword ptr [rax], 0x1
10000f901:	mov	rdi, qword ptr [r13]
10000f905:	mov	r13d, dword ptr [rbp - 0x30]
10000f909:	call	0x1000196e6 ## symbol stub for: _fflush
10000f90e:	mov	eax, dword ptr [r12]
10000f912:	lea	rcx, [rip + 0x19e3f]
10000f919:	cmp	dword ptr [rcx], 0x0
10000f91c:	je	0x10000f973
10000f91e:	test	eax, eax
10000f920:	je	0x10000f973
10000f922:	lea	r12, [rip + 0x19e37]
10000f929:	mov	rcx, qword ptr [r12]
10000f92d:	lea	rdi, [rip + 0xd8bc] ## literal pool for: " ("
10000f934:	mov	esi, 0x2
10000f939:	mov	edx, 0x1
10000f93e:	call	0x10001972e ## symbol stub for: _fwrite
10000f943:	mov	rdi, qword ptr [r12]
10000f947:	mov	rsi, rbx
10000f94a:	call	0x100015c88
10000f94f:	mov	rsi, qword ptr [r12]
10000f953:	mov	edi, 0x29
10000f958:	call	0x100019704 ## symbol stub for: _fputc
10000f95d:	lea	rax, [rip + 0x19f6c]
10000f964:	mov	dword ptr [rax], 0x1
10000f96a:	mov	rdi, qword ptr [r12]
10000f96e:	call	0x1000196e6 ## symbol stub for: _fflush
10000f973:	mov	qword ptr [r15 + 0x20], rbx
10000f977:	mov	word ptr [r15 + 0x38], 0xffff
10000f97e:	mov	qword ptr [r15 + 0x48], 0x0
10000f986:	lea	rax, [rip + 0x19ad3]
10000f98d:	cmp	dword ptr [rax], 0x2
10000f990:	jne	0x10000f9dc
10000f992:	movzx	ebx, word ptr [r15 + 0x2a]
10000f997:	test	rbx, rbx
10000f99a:	je	0x10000f9ed
10000f99c:	mov	rdi, rbx
10000f99f:	call	0x100019758 ## symbol stub for: _malloc
10000f9a4:	mov	r12, rax
10000f9a7:	test	rax, rax
10000f9aa:	jne	0x10000f9c2
10000f9ac:	lea	rsi, [rip + 0x13743] ## literal pool for: "extra fields copy"
10000f9b3:	mov	edi, 0x4
10000f9b8:	call	0x100002e30
10000f9bd:	movzx	ebx, word ptr [r15 + 0x2a]
10000f9c2:	mov	rsi, qword ptr [r15 + 0x58]
10000f9c6:	mov	rdi, r12
10000f9c9:	mov	rdx, rbx
10000f9cc:	call	0x10001975e ## symbol stub for: _memcpy
10000f9d1:	movzx	eax, word ptr [r15 + 0x2a]
10000f9d6:	mov	qword ptr [rbp - 0x60], rax
10000f9da:	jmp	0x10000f9f6
10000f9dc:	xor	eax, eax
10000f9de:	mov	qword ptr [rbp - 0x60], rax
10000f9e2:	xor	eax, eax
10000f9e4:	mov	qword ptr [rbp - 0x40], rax
10000f9e8:	xor	r12d, r12d
10000f9eb:	jmp	0x10000fa4d
10000f9ed:	xor	eax, eax
10000f9ef:	mov	qword ptr [rbp - 0x60], rax
10000f9f3:	xor	r12d, r12d
10000f9f6:	movzx	ebx, word ptr [r15 + 0x2c]
10000f9fb:	test	rbx, rbx
10000f9fe:	je	0x10000fa47
10000fa00:	mov	rdi, rbx
10000fa03:	call	0x100019758 ## symbol stub for: _malloc
10000fa08:	test	rax, rax
10000fa0b:	jne	0x10000fa29
10000fa0d:	lea	rsi, [rip + 0x136e2] ## literal pool for: "extra fields copy"
10000fa14:	mov	rbx, rax
10000fa17:	mov	edi, 0x4
10000fa1c:	call	0x100002e30
10000fa21:	mov	rax, rbx
10000fa24:	movzx	ebx, word ptr [r15 + 0x2c]
10000fa29:	mov	rsi, qword ptr [r15 + 0x60]
10000fa2d:	mov	qword ptr [rbp - 0x58], rax
10000fa31:	mov	rdi, rax
10000fa34:	mov	rdx, rbx
10000fa37:	call	0x10001975e ## symbol stub for: _memcpy
10000fa3c:	movzx	eax, word ptr [r15 + 0x2c]
10000fa41:	mov	qword ptr [rbp - 0x40], rax
10000fa45:	jmp	0x10000fa53
10000fa47:	xor	eax, eax
10000fa49:	mov	qword ptr [rbp - 0x40], rax
10000fa4d:	xor	eax, eax
10000fa4f:	mov	qword ptr [rbp - 0x58], rax
10000fa53:	cmp	word ptr [r15 + 0x2a], 0x0
10000fa59:	je	0x10000fa64
10000fa5b:	mov	rdi, qword ptr [r15 + 0x58]
10000fa5f:	call	0x100019716 ## symbol stub for: _free
10000fa64:	mov	qword ptr [rbp - 0x70], r12
10000fa68:	mov	qword ptr [rbp - 0x50], r14
10000fa6c:	cmp	word ptr [r15 + 0x2c], 0x0
10000fa72:	je	0x10000fa83
10000fa74:	mov	rdi, qword ptr [r15 + 0x60]
10000fa78:	cmp	qword ptr [r15 + 0x58], rdi
10000fa7c:	je	0x10000fa83
10000fa7e:	call	0x100019716 ## symbol stub for: _free
10000fa83:	mov	dword ptr [r15 + 0x2a], 0x0
10000fa8b:	xorps	xmm0, xmm0
10000fa8e:	movups	xmmword ptr [r15 + 0x58], xmm0
10000fa93:	lea	rax, [rip + 0x4b506]
10000fa9a:	mov	qword ptr [rax], 0x0
10000faa1:	lea	rax, [rip + 0x199c8]
10000faa8:	mov	r14, qword ptr [rax]
10000faab:	mov	r12, qword ptr [r15 + 0x50]
10000faaf:	test	r14, r14
10000fab2:	je	0x10000fb32
10000fab4:	mov	rdi, r12
10000fab7:	call	0x100019830 ## symbol stub for: _strlen
10000fabc:	mov	r13, rax
10000fabf:	mov	rdi, r14
10000fac2:	call	0x100019830 ## symbol stub for: _strlen
10000fac7:	lea	rcx, [r14 + rax]
10000facb:	dec	rcx
10000face:	xor	r8d, r8d
10000fad1:	cmp	rcx, r14
10000fad4:	jae	0x10000fadc
10000fad6:	mov	r13d, dword ptr [rbp - 0x30]
10000fada:	jmp	0x10000fb3c
10000fadc:	add	r13, r12
10000fadf:	mov	esi, 0x1
10000fae4:	mov	rdx, r13
10000fae7:	mov	bl, byte ptr [rcx]
10000fae9:	mov	eax, ebx
10000faeb:	and	al, -0x2
10000faed:	cmp	al, 0x3a
10000faef:	jne	0x10000fb07
10000faf1:	test	esi, esi
10000faf3:	jne	0x10000fad6
10000faf5:	dec	rcx
10000faf8:	mov	rdx, r13
10000fafb:	mov	esi, 0x1
10000fb00:	cmp	rcx, r14
10000fb03:	jae	0x10000fae7
10000fb05:	jmp	0x10000fad6
10000fb07:	dec	rdx
10000fb0a:	xor	edi, edi
10000fb0c:	cmp	rdx, r12
10000fb0f:	jb	0x10000fb1b
10000fb11:	test	esi, esi
10000fb13:	je	0x10000fb1b
10000fb15:	cmp	bl, byte ptr [rdx]
10000fb17:	sete	dil
10000fb1b:	movzx	esi, dil
10000fb1f:	dec	rcx
10000fb22:	cmp	rcx, r14
10000fb25:	jae	0x10000fae7
10000fb27:	xor	r8d, r8d
10000fb2a:	test	esi, esi
10000fb2c:	mov	r13d, dword ptr [rbp - 0x30]
10000fb30:	jne	0x10000fb3c
10000fb32:	lea	rax, [rip + 0x19913]
10000fb39:	mov	r8d, dword ptr [rax]
10000fb3c:	mov	dword ptr [rbp - 0x2c], r8d
10000fb40:	lea	rsi, [rip + 0xc9bb] ## literal pool for: "-"
10000fb47:	mov	rdi, r12
10000fb4a:	call	0x10001981e ## symbol stub for: _strcmp
10000fb4f:	test	eax, eax
10000fb51:	je	0x10000fb99
10000fb53:	lea	rbx, [rip + 0x19906]
10000fb5a:	cmp	dword ptr [rbx], 0x0
10000fb5d:	mov	r14, qword ptr [rbp - 0x50]
10000fb61:	je	0x10000fb72
10000fb63:	lea	rsi, [rbp - 0x90]
10000fb6a:	mov	rdi, r15
10000fb6d:	call	0x100016d4b
10000fb72:	mov	rdi, qword ptr [rbp - 0x68]
10000fb76:	call	0x100011577
10000fb7b:	test	eax, eax
10000fb7d:	je	0x10000fbb7
10000fb7f:	mov	dword ptr [rip + 0x4b45b], 0xffffffff
10000fb89:	mov	dword ptr [rbp - 0x2c], 0x0
10000fb90:	mov	dword ptr [rbp - 0x34], 0x1
10000fb97:	jmp	0x10000fbfc
10000fb99:	mov	dword ptr [rip + 0x4b441], 0x0
10000fba3:	mov	dword ptr [rbp - 0x34], 0x0
10000fbaa:	mov	r14, qword ptr [rbp - 0x50]
10000fbae:	lea	rbx, [rip + 0x198ab]
10000fbb5:	jmp	0x10000fbfc
10000fbb7:	mov	dword ptr [rbp - 0x34], eax
10000fbba:	test	r13d, r13d
10000fbbd:	je	0x10000fbda
10000fbbf:	mov	dword ptr [rip + 0x4b41b], 0xffffffff
10000fbc9:	mov	dword ptr [rbp - 0x2c], 0x0
10000fbd0:	mov	qword ptr [rbp - 0x48], 0x0
10000fbd8:	jmp	0x10000fbfc
10000fbda:	mov	rdi, qword ptr [r15 + 0x50]
10000fbde:	xor	esi, esi
10000fbe0:	xor	eax, eax
10000fbe2:	call	0x10001977c ## symbol stub for: _open
10000fbe7:	mov	dword ptr [rip + 0x4b3f7], eax
10000fbed:	mov	r12d, 0x12
10000fbf3:	cmp	eax, -0x1
10000fbf6:	je	0x100010456
10000fbfc:	mov	qword ptr [r15 + 0x8], r14
10000fc00:	cmp	dword ptr [rbx], 0x2
10000fc03:	jne	0x10000fc9a
10000fc09:	movzx	r12d, word ptr [rbp - 0x60]
10000fc0e:	mov	rdx, qword ptr [r15 + 0x58]
10000fc12:	movzx	ecx, word ptr [r15 + 0x2a]
10000fc17:	lea	r14, [rbp - 0x74]
10000fc1b:	mov	r13, qword ptr [rbp - 0x70]
10000fc1f:	mov	rdi, r13
10000fc22:	mov	esi, r12d
10000fc25:	mov	r8, r14
10000fc28:	call	0x100009cf1
10000fc2d:	mov	rbx, rax
10000fc30:	mov	rdi, qword ptr [r15 + 0x58]
10000fc34:	call	0x100019716 ## symbol stub for: _free
10000fc39:	movzx	eax, word ptr [r14]
10000fc3d:	mov	word ptr [r15 + 0x2a], ax
10000fc42:	mov	qword ptr [r15 + 0x58], rbx
10000fc46:	movzx	esi, word ptr [rbp - 0x40]
10000fc4a:	mov	rdx, qword ptr [r15 + 0x60]
10000fc4e:	movzx	ecx, word ptr [r15 + 0x2c]
10000fc53:	mov	rdi, qword ptr [rbp - 0x58]
10000fc57:	mov	r8, r14
10000fc5a:	call	0x100009cf1
10000fc5f:	mov	rbx, rax
10000fc62:	mov	rdi, qword ptr [r15 + 0x60]
10000fc66:	call	0x100019716 ## symbol stub for: _free
10000fc6b:	movzx	eax, word ptr [r14]
10000fc6f:	mov	word ptr [r15 + 0x2c], ax
10000fc74:	mov	qword ptr [r15 + 0x60], rbx
10000fc78:	test	r12w, r12w
10000fc7c:	je	0x10000fc86
10000fc7e:	mov	rdi, r13
10000fc81:	call	0x100019716 ## symbol stub for: _free
10000fc86:	cmp	word ptr [rbp - 0x40], 0x0
10000fc8b:	je	0x10000fc96
10000fc8d:	mov	rdi, qword ptr [rbp - 0x58]
10000fc91:	call	0x100019716 ## symbol stub for: _free
10000fc96:	mov	r13d, dword ptr [rbp - 0x30]
10000fc9a:	mov	rax, qword ptr [rbp - 0x48]
10000fc9e:	test	rax, rax
10000fca1:	je	0x10000fcb9
10000fca3:	mov	edx, dword ptr [rbp - 0x2c]
10000fca6:	cmp	edx, -0x1
10000fca9:	jne	0x10000fcc2
10000fcab:	mov	dword ptr [rbp - 0x2c], 0x8
10000fcb2:	mov	edx, 0x8
10000fcb7:	jmp	0x10000fcc2
10000fcb9:	mov	dword ptr [rbp - 0x2c], 0x0
10000fcc0:	xor	edx, edx
10000fcc2:	lea	rcx, [rip + 0x199df]
10000fcc9:	mov	ecx, dword ptr [rcx]
10000fccb:	test	ecx, ecx
10000fccd:	mov	esi, 0x31e
10000fcd2:	mov	edi, 0x14
10000fcd7:	cmovne	esi, edi
10000fcda:	test	edx, edx
10000fcdc:	mov	ebx, 0xa
10000fce1:	cmovne	ebx, edi
10000fce4:	mov	word ptr [r15], si
10000fce8:	mov	word ptr [r15 + 0x2], bx
10000fced:	mov	qword ptr [r15 + 0x10], 0x0
10000fcf5:	test	r13d, r13d
10000fcf8:	je	0x10000fd05
10000fcfa:	mov	word ptr [r15 + 0x4], 0x0
10000fd01:	xor	esi, esi
10000fd03:	jmp	0x10000fd36
10000fd05:	mov	word ptr [r15 + 0x4], 0x8
10000fd0c:	lea	rsi, [rip + 0x19a95]
10000fd13:	cmp	qword ptr [rsi], 0x0
10000fd17:	je	0x10000fd32
10000fd19:	mov	word ptr [r15 + 0x4], 0x9
10000fd20:	mov	rsi, qword ptr [r15 + 0x8]
10000fd24:	shl	rsi, 0x10
10000fd28:	mov	qword ptr [r15 + 0x10], rsi
10000fd2c:	mov	si, 0x9
10000fd30:	jmp	0x10000fd36
10000fd32:	mov	si, 0x8
10000fd36:	xor	edi, edi
10000fd38:	test	edx, edx
10000fd3a:	mov	word ptr [r15 + 0x3a], si
10000fd3f:	mov	esi, 0x0
10000fd44:	cmove	rsi, rax
10000fd48:	lea	rbx, [r15 + 0x38]
10000fd4c:	test	rax, rax
10000fd4f:	cmovs	rsi, rdi
10000fd53:	mov	word ptr [r15 + 0x6], dx
10000fd58:	cmp	rax, -0x1
10000fd5c:	cmovne	rdi, rax
10000fd60:	mov	qword ptr [r15 + 0x18], rsi
10000fd64:	mov	qword ptr [r15 + 0x20], rdi
10000fd68:	movzx	r13d, word ptr [r15 + 0x38]
10000fd6d:	cmp	r13w, -0x1
10000fd72:	jne	0x10000fd79
10000fd74:	mov	word ptr [rbx], 0x0
10000fd79:	mov	rdx, qword ptr [rbp - 0x68]
10000fd7d:	test	ecx, ecx
10000fd7f:	je	0x10000fd86
10000fd81:	movzx	eax, dl
10000fd84:	jmp	0x10000fd92
10000fd86:	movzx	eax, byte ptr [r15 + 0x49]
10000fd8b:	shl	rax, 0x8
10000fd8f:	or	rax, rdx
10000fd92:	mov	qword ptr [r15 + 0x48], rax
10000fd96:	mov	rdi, r15
10000fd99:	xor	esi, esi
10000fd9b:	call	0x10000d090
10000fda0:	test	eax, eax
10000fda2:	je	0x10000fdc0
10000fda4:	mov	r12d, eax
10000fda7:	mov	edi, dword ptr [rip + 0x4b237]
10000fdad:	cmp	edi, -0x1
10000fdb0:	je	0x100010456
10000fdb6:	call	0x1000196bc ## symbol stub for: _close
10000fdbb:	jmp	0x100010456
10000fdc0:	mov	qword ptr [rbp - 0x40], rbx
10000fdc4:	movzx	eax, word ptr [r15 + 0x28]
10000fdc9:	movzx	ecx, word ptr [r15 + 0x2a]
10000fdce:	add	rcx, rax
10000fdd1:	lea	rax, [rip + 0x19ab8]
10000fdd8:	mov	rax, qword ptr [rax]
10000fddb:	mov	qword ptr [r15 + 0x40], rax
10000fddf:	lea	rax, [rip + 0x19a62]
10000fde6:	mov	rax, qword ptr [rax]
10000fde9:	mov	qword ptr [r15 + 0x30], rax
10000fded:	lea	r12, [rip + 0x1b144]
10000fdf4:	mov	rax, qword ptr [r12]
10000fdf8:	add	rax, rcx
10000fdfb:	add	rax, 0x1e
10000fdff:	mov	qword ptr [r12], rax
10000fe03:	lea	rax, [rip + 0x1999e]
10000fe0a:	cmp	dword ptr [rbp - 0x30], 0x0
10000fe0e:	jne	0x10000fe2b
10000fe10:	mov	rdi, qword ptr [rax]
10000fe13:	test	rdi, rdi
10000fe16:	je	0x10000fe2b
10000fe18:	mov	rsi, qword ptr [r15 + 0x10]
10000fe1c:	call	0x1000160af
10000fe21:	add	qword ptr [r15 + 0x18], 0xc
10000fe26:	add	qword ptr [r12], 0xc
10000fe2b:	lea	r14, [rip + 0x199c6]
10000fe32:	mov	rbx, qword ptr [r14]
10000fe35:	mov	rdi, rbx
10000fe38:	call	0x1000196e0 ## symbol stub for: _ferror
10000fe3d:	test	eax, eax
10000fe3f:	je	0x10000fe65
10000fe41:	mov	edi, dword ptr [rip + 0x4b19d]
10000fe47:	cmp	edi, -0x1
10000fe4a:	je	0x10000fe51
10000fe4c:	call	0x1000196bc ## symbol stub for: _close
10000fe51:	lea	rsi, [rip + 0x132b0] ## literal pool for: "unexpected error on zip file"
10000fe58:	mov	edi, 0xe
10000fe5d:	call	0x100002e30
10000fe62:	mov	rbx, qword ptr [r14]
10000fe65:	mov	rdi, rbx
10000fe68:	call	0x100019728 ## symbol stub for: _ftello
10000fe6d:	mov	rcx, r14
10000fe70:	mov	r14, rax
10000fe73:	mov	rbx, qword ptr [rcx]
10000fe76:	mov	rdi, rbx
10000fe79:	call	0x1000196e0 ## symbol stub for: _ferror
10000fe7e:	test	eax, eax
10000fe80:	je	0x10000fe8a
10000fe82:	mov	rdi, rbx
10000fe85:	call	0x1000196b6 ## symbol stub for: _clearerr
10000fe8a:	cmp	r14, -0x2
10000fe8e:	jg	0x10000fee3
10000fe90:	lea	rax, [rip + 0x1b099]
10000fe97:	mov	r12, qword ptr [rax]
10000fe9a:	xor	edi, edi
10000fe9c:	xor	esi, esi
10000fe9e:	xor	edx, edx
10000fea0:	call	0x100015a80
10000fea5:	mov	rbx, rax
10000fea8:	mov	rdi, r14
10000feab:	xor	esi, esi
10000fead:	xor	edx, edx
10000feaf:	call	0x100015a80
10000feb4:	lea	rsi, [rip + 0x1326a] ## literal pool for: "last %s o %s\n"
10000febb:	mov	rdi, r12
10000febe:	lea	r12, [rip + 0x1b073]
10000fec5:	mov	rdx, rbx
10000fec8:	mov	rcx, rax
10000fecb:	xor	eax, eax
10000fecd:	call	0x1000196fe ## symbol stub for: _fprintf
10000fed2:	lea	rsi, [rip + 0x1325a] ## literal pool for: "seek wrap - zip file too big to write"
10000fed9:	mov	edi, 0x6
10000fede:	call	0x100002e30
10000fee3:	lea	rbx, [r15 + 0x4]
10000fee7:	xor	eax, eax
10000fee9:	mov	qword ptr [rip + 0x4b0f8], rax
10000fef0:	xor	r14d, r14d
10000fef3:	mov	qword ptr [rip + 0x4b0f6], rax
10000fefa:	cmp	dword ptr [rbp - 0x30], 0x0
10000fefe:	mov	qword ptr [rbp - 0x50], rbx
10000ff02:	jne	0x100010185
10000ff08:	cmp	dword ptr [rbp - 0x2c], 0x0
10000ff0c:	je	0x10000ffae
10000ff12:	cmp	r13w, -0x1
10000ff17:	mov	rbx, qword ptr [rbp - 0x40]
10000ff1b:	jne	0x10000ff22
10000ff1d:	mov	word ptr [rbx], 0xffff
10000ff22:	lea	rax, [rip - 0x9ca]
10000ff29:	mov	qword ptr [rip + 0x192e0], rax
10000ff30:	lea	rdi, [rip + 0x4b0c9]
10000ff37:	mov	esi, 0x400
10000ff3c:	mov	edx, 0x1
10000ff41:	call	0x1000191b1
10000ff46:	lea	rsi, [rbp - 0x2c]
10000ff4a:	mov	rdi, rbx
10000ff4d:	call	0x100017ab2
10000ff52:	lea	rax, [rip + 0x194f7]
10000ff59:	mov	edi, dword ptr [rax]
10000ff5b:	mov	rsi, qword ptr [rbp - 0x50]
10000ff5f:	call	0x100016ffc
10000ff64:	call	0x100017546
10000ff69:	cmp	word ptr [rbx], 0x0
10000ff6d:	mov	r14, rax
10000ff70:	sete	dl
10000ff73:	lea	rax, [rip + 0x19742]
10000ff7a:	mov	eax, dword ptr [rax]
10000ff7c:	test	eax, eax
10000ff7e:	setne	cl
10000ff81:	and	cl, dl
10000ff83:	cmp	cl, 0x1
10000ff86:	jne	0x100010022
10000ff8c:	cmp	dword ptr [rip + 0x4b04d], 0x0
10000ff93:	je	0x100010022
10000ff99:	cmp	eax, 0x1
10000ff9c:	jne	0x10001003f
10000ffa2:	lea	rdi, [rip + 0x131b0] ## literal pool for: "has binary so -l ignored"
10000ffa9:	jmp	0x100010179
10000ffae:	mov	edi, 0x4000
10000ffb3:	call	0x100019758 ## symbol stub for: _malloc
10000ffb8:	test	rax, rax
10000ffbb:	je	0x10001004b
10000ffc1:	mov	r13, rax
10000ffc4:	cmp	dword ptr [rbp - 0x34], 0x0
10000ffc8:	je	0x100010056
10000ffce:	mov	rdi, qword ptr [r15 + 0x50]
10000ffd2:	mov	edx, 0x4000
10000ffd7:	mov	rsi, r13
10000ffda:	call	0x1000197d0 ## symbol stub for: _readlink
10000ffdf:	mov	r12, rax
10000ffe2:	mov	rdi, qword ptr [rip + 0x4b007]
10000ffe9:	mov	rsi, r13
10000ffec:	mov	rdx, rax
10000ffef:	call	0x100016ee2
10000fff4:	mov	qword ptr [rip + 0x4aff5], rax
10000fffb:	mov	esi, 0x1
100010000:	mov	rdi, r13
100010003:	mov	rdx, r12
100010006:	call	0x10001623d
10001000b:	mov	eax, eax
10001000d:	cmp	r12, rax
100010010:	jne	0x100010623
100010016:	mov	qword ptr [rip + 0x4afcb], r12
10001001d:	jmp	0x1000105c9
100010022:	test	cl, cl
100010024:	je	0x100010185
10001002a:	cmp	eax, 0x1
10001002d:	jne	0x100010172
100010033:	lea	rdi, [rip + 0x13152] ## literal pool for: "-l used on binary file - corrupted?"
10001003a:	jmp	0x100010179
10001003f:	lea	rdi, [rip + 0x1312c] ## literal pool for: "has binary so -ll ignored"
100010046:	jmp	0x100010179
10001004b:	mov	r12d, 0x4
100010051:	jmp	0x100010456
100010056:	mov	rdi, r13
100010059:	mov	esi, 0x4000
10001005e:	call	0x10000f55f
100010063:	test	eax, eax
100010065:	je	0x1000105c6
10001006b:	mov	ebx, eax
10001006d:	lea	r14, [rip + 0x1968c]
100010074:	xor	r12d, r12d
100010077:	mov	edx, ebx
100010079:	mov	esi, 0x1
10001007e:	mov	rdi, r13
100010081:	call	0x10001623d
100010086:	cmp	eax, ebx
100010088:	jne	0x100010613
10001008e:	lea	rax, [rip + 0x1967b]
100010095:	cmp	dword ptr [rax], 0x0
100010098:	jne	0x100010156
10001009e:	lea	rax, [rip + 0x19653]
1000100a5:	mov	rax, qword ptr [rax]
1000100a8:	test	rax, rax
1000100ab:	jle	0x10001010c
1000100ad:	lea	rcx, [rip + 0x193a8]
1000100b4:	cmp	dword ptr [rcx], 0x0
1000100b7:	mov	rdx, qword ptr [r14]
1000100ba:	je	0x1000100f1
1000100bc:	cmp	rdx, -0x1
1000100c0:	jne	0x1000100f1
1000100c2:	lea	rbx, [rip + 0x1ae67]
1000100c9:	mov	rsi, qword ptr [rbx]
1000100cc:	mov	edi, 0x20
1000100d1:	call	0x1000197a6 ## symbol stub for: _putc
1000100d6:	mov	rdi, qword ptr [rbx]
1000100d9:	call	0x1000196e6 ## symbol stub for: _fflush
1000100de:	mov	rdx, qword ptr [r14]
1000100e1:	inc	rdx
1000100e4:	mov	qword ptr [r14], rdx
1000100e7:	lea	rax, [rip + 0x1960a]
1000100ee:	mov	rax, qword ptr [rax]
1000100f1:	lea	rcx, [rdx + 0x1]
1000100f5:	shl	rdx, 0xe
1000100f9:	add	rdx, 0x8000
100010100:	cmp	rax, rdx
100010103:	cmovle	rcx, r12
100010107:	mov	qword ptr [r14], rcx
10001010a:	jmp	0x10001010f
10001010c:	mov	rcx, qword ptr [r14]
10001010f:	lea	rdx, [rip + 0x19346]
100010116:	mov	edx, dword ptr [rdx]
100010118:	lea	rsi, [rip + 0x1958d]
10001011f:	or	edx, dword ptr [rsi]
100010121:	je	0x100010156
100010123:	test	rax, rax
100010126:	je	0x100010156
100010128:	test	rcx, rcx
10001012b:	jne	0x100010156
10001012d:	lea	rbx, [rip + 0x1adfc]
100010134:	mov	rsi, qword ptr [rbx]
100010137:	mov	edi, 0x2e
10001013c:	call	0x1000197a6 ## symbol stub for: _putc
100010141:	mov	rdi, qword ptr [rbx]
100010144:	call	0x1000196e6 ## symbol stub for: _fflush
100010149:	lea	rax, [rip + 0x1977c]
100010150:	mov	dword ptr [rax], 0x1
100010156:	mov	rdi, r13
100010159:	mov	esi, 0x4000
10001015e:	call	0x10000f55f
100010163:	mov	ebx, eax
100010165:	test	eax, eax
100010167:	jne	0x100010077
10001016d:	jmp	0x1000105c9
100010172:	lea	rdi, [rip + 0x13037] ## literal pool for: "-ll used on binary file - corrupted?"
100010179:	lea	rsi, [rip + 0xa637] ## literal pool for: ""
100010180:	call	0x1000034f4
100010185:	mov	edi, dword ptr [rip + 0x4ae59]
10001018b:	mov	ebx, dword ptr [rbp - 0x30]
10001018e:	cmp	edi, -0x1
100010191:	je	0x100010198
100010193:	call	0x1000196bc ## symbol stub for: _close
100010198:	add	qword ptr [r12], r14
10001019c:	lea	rax, [rip + 0x19519]
1000101a3:	cmp	dword ptr [rax], 0x0
1000101a6:	jne	0x1000101cb
1000101a8:	mov	rax, qword ptr [rbp - 0x48]
1000101ac:	cmp	rax, -0x1
1000101b0:	je	0x1000101cb
1000101b2:	cmp	qword ptr [rip + 0x4ae2f], rax
1000101b9:	je	0x1000101cb
1000101bb:	mov	rsi, qword ptr [r15 + 0x50]
1000101bf:	lea	rdi, [rip + 0x1304a] ## literal pool for: " file size changed while zipping "
1000101c6:	call	0x1000034f4
1000101cb:	lea	rax, [r15 + 0x18]
1000101cf:	test	ebx, ebx
1000101d1:	je	0x1000102d0
1000101d7:	mov	word ptr [r15 + 0x6], 0x0
1000101de:	xorps	xmm0, xmm0
1000101e1:	movups	xmmword ptr [rax], xmm0
1000101e4:	mov	word ptr [r15 + 0x2], 0xa
1000101eb:	and	byte ptr [r15 + 0x4], -0x9
1000101f0:	and	byte ptr [r15 + 0x3a], -0x9
1000101f5:	cmp	word ptr [r15 + 0x2a], 0x0
1000101fb:	je	0x10001021e
1000101fd:	mov	rdi, qword ptr [r15 + 0x58]
100010201:	cmp	rdi, qword ptr [r15 + 0x60]
100010205:	je	0x100010217
100010207:	lea	rbx, [r15 + 0x58]
10001020b:	call	0x100019716 ## symbol stub for: _free
100010210:	mov	qword ptr [rbx], 0x0
100010217:	mov	word ptr [r15 + 0x2a], 0x0
10001021e:	lea	rax, [rip + 0x19237]
100010225:	cmp	dword ptr [rax], 0x0
100010228:	je	0x1000103d0
10001022e:	lea	rax, [rip + 0x19477]
100010235:	cmp	dword ptr [rax], 0x0
100010238:	je	0x100010283
10001023a:	lea	rax, [rip + 0x1acef]
100010241:	mov	r12, qword ptr [rax]
100010244:	mov	rdi, qword ptr [rip + 0x4ad9d]
10001024b:	lea	r15, [rip + 0xbff4] ## literal pool for: "u"
100010252:	xor	esi, esi
100010254:	mov	rdx, r15
100010257:	call	0x100015a80
10001025c:	mov	rbx, rax
10001025f:	mov	rdi, r14
100010262:	xor	esi, esi
100010264:	mov	rdx, r15
100010267:	call	0x100015a80
10001026c:	lea	rsi, [rip + 0x13031] ## literal pool for: "\t(in=%s) (out=%s)"
100010273:	mov	rdi, r12
100010276:	mov	rdx, rbx
100010279:	mov	rcx, rax
10001027c:	xor	eax, eax
10001027e:	call	0x1000196fe ## symbol stub for: _fprintf
100010283:	cmp	dword ptr [rbp - 0x2c], 0x8
100010287:	lea	rbx, [rip + 0x1aca2]
10001028e:	mov	rdi, qword ptr [rbx]
100010291:	jne	0x10001039b
100010297:	mov	rcx, qword ptr [rip + 0x4ad4a]
10001029e:	test	rcx, rcx
1000102a1:	je	0x1000103ab
1000102a7:	mov	rax, rcx
1000102aa:	sub	rax, r14
1000102ad:	imul	rax, rax, 0xc8
1000102b4:	cqo
1000102b6:	idiv	rcx
1000102b9:	lea	rcx, [rax + 0x1]
1000102bd:	shr	rcx, 0x3f
1000102c1:	lea	rdx, [rax + rcx]
1000102c5:	inc	rdx
1000102c8:	shr	rdx
1000102cb:	jmp	0x1000103ad
1000102d0:	mov	rcx, qword ptr [rip + 0x4ad19]
1000102d7:	mov	qword ptr [r15 + 0x10], rcx
1000102db:	mov	qword ptr [r15 + 0x18], r14
1000102df:	lea	rbx, [rip + 0x194c2]
1000102e6:	cmp	qword ptr [rbx], 0x0
1000102ea:	je	0x1000102f3
1000102ec:	lea	rcx, [r14 + 0xc]
1000102f0:	mov	qword ptr [rax], rcx
1000102f3:	mov	rax, qword ptr [rip + 0x4acee]
1000102fa:	mov	qword ptr [r15 + 0x20], rax
1000102fe:	lea	rax, [rip + 0x19483]
100010305:	cmp	dword ptr [rax], 0x0
100010308:	jne	0x100010327
10001030a:	lea	rax, [rip + 0x194e7]
100010311:	mov	rdi, qword ptr [rax]
100010314:	mov	rsi, qword ptr [r15 + 0x40]
100010318:	xor	edx, edx
10001031a:	call	0x10001971c ## symbol stub for: _fseeko
10001031f:	test	eax, eax
100010321:	je	0x100010468
100010327:	mov	eax, dword ptr [rbp - 0x2c]
10001032a:	cmp	word ptr [r15 + 0x6], ax
10001032f:	je	0x100010340
100010331:	lea	rdi, [rip + 0x12efa] ## literal pool for: "can't rewrite method"
100010338:	call	0x1000032ef
10001033d:	mov	eax, dword ptr [rbp - 0x2c]
100010340:	mov	rbx, r12
100010343:	test	eax, eax
100010345:	jne	0x10001035f
100010347:	cmp	qword ptr [rbp - 0x48], 0x0
10001034c:	jns	0x10001035f
10001034e:	lea	rsi, [rip + 0x12ef2] ## literal pool for: "zip -0 not supported for I/O on pipes or devices"
100010355:	mov	edi, 0x10
10001035a:	call	0x100002e30
10001035f:	mov	rdi, r15
100010362:	call	0x10000d7cf
100010367:	mov	r12d, eax
10001036a:	test	eax, eax
10001036c:	jne	0x100010456
100010372:	lea	rax, [rip + 0x19427]
100010379:	xor	ecx, ecx
10001037b:	cmp	dword ptr [rax], 0x0
10001037e:	setne	cl
100010381:	mov	rax, qword ptr [rbx]
100010384:	lea	rax, [rax + 8*rcx + 0x10]
100010389:	mov	qword ptr [rbx], rax
10001038c:	movzx	eax, word ptr [r15 + 0x3a]
100010391:	mov	word ptr [r15 + 0x4], ax
100010396:	jmp	0x1000101f5
10001039b:	lea	rsi, [rip + 0x12f26] ## literal pool for: " (stored 0%%)\n"
1000103a2:	xor	eax, eax
1000103a4:	call	0x1000196fe ## symbol stub for: _fprintf
1000103a9:	jmp	0x1000103bb
1000103ab:	xor	edx, edx
1000103ad:	lea	rsi, [rip + 0x12f02] ## literal pool for: " (deflated %d%%)\n"
1000103b4:	xor	eax, eax
1000103b6:	call	0x1000196fe ## symbol stub for: _fprintf
1000103bb:	lea	rax, [rip + 0x1950a]
1000103c2:	mov	dword ptr [rax], 0x0
1000103c8:	mov	rdi, qword ptr [rbx]
1000103cb:	call	0x1000196e6 ## symbol stub for: _fflush
1000103d0:	xor	r12d, r12d
1000103d3:	lea	rax, [rip + 0x1937e]
1000103da:	cmp	dword ptr [rax], 0x0
1000103dd:	je	0x100010456
1000103df:	cmp	dword ptr [rbp - 0x2c], 0x8
1000103e3:	lea	rbx, [rip + 0x19376]
1000103ea:	mov	rdi, qword ptr [rbx]
1000103ed:	jne	0x100010421
1000103ef:	mov	rcx, qword ptr [rip + 0x4abf2]
1000103f6:	test	rcx, rcx
1000103f9:	je	0x100010431
1000103fb:	mov	rax, rcx
1000103fe:	sub	rax, r14
100010401:	imul	rax, rax, 0xc8
100010408:	cqo
10001040a:	idiv	rcx
10001040d:	lea	rcx, [rax + 0x1]
100010411:	shr	rcx, 0x3f
100010415:	lea	rdx, [rax + rcx]
100010419:	inc	rdx
10001041c:	shr	rdx
10001041f:	jmp	0x100010433
100010421:	lea	rsi, [rip + 0x12ea0] ## literal pool for: " (stored 0%%)\n"
100010428:	xor	eax, eax
10001042a:	call	0x1000196fe ## symbol stub for: _fprintf
10001042f:	jmp	0x100010441
100010431:	xor	edx, edx
100010433:	lea	rsi, [rip + 0x12e7c] ## literal pool for: " (deflated %d%%)\n"
10001043a:	xor	eax, eax
10001043c:	call	0x1000196fe ## symbol stub for: _fprintf
100010441:	lea	rax, [rip + 0x19488]
100010448:	mov	dword ptr [rax], 0x0
10001044e:	mov	rdi, qword ptr [rbx]
100010451:	call	0x1000196e6 ## symbol stub for: _fflush
100010456:	mov	eax, r12d
100010459:	add	rsp, 0x68
10001045d:	pop	rbx
10001045e:	pop	r12
100010460:	pop	r13
100010462:	pop	r14
100010464:	pop	r15
100010466:	pop	rbp
100010467:	ret
100010468:	mov	rcx, rbx
10001046b:	lea	rbx, [rip + 0x1944e]
100010472:	lea	rax, [r14 + 0xc]
100010476:	cmp	qword ptr [rcx], 0x0
10001047a:	cmove	rax, r14
10001047e:	cmp	qword ptr [rbx], rax
100010481:	je	0x1000104d2
100010483:	lea	rax, [rip + 0x1aaa6]
10001048a:	mov	r12, qword ptr [rax]
10001048d:	mov	rdi, r14
100010490:	xor	esi, esi
100010492:	xor	edx, edx
100010494:	call	0x100015a80
100010499:	mov	r13, rax
10001049c:	mov	rdi, qword ptr [rbx]
10001049f:	xor	esi, esi
1000104a1:	xor	edx, edx
1000104a3:	call	0x100015a80
1000104a8:	lea	rsi, [rip + 0x12dc9] ## literal pool for: " s=%s, actual=%s "
1000104af:	mov	rdi, r12
1000104b2:	lea	r12, [rip + 0x1aa7f]
1000104b9:	mov	rdx, r13
1000104bc:	mov	rcx, rax
1000104bf:	xor	eax, eax
1000104c1:	call	0x1000196fe ## symbol stub for: _fprintf
1000104c6:	lea	rdi, [rip + 0x12dbd] ## literal pool for: "incorrect compressed size"
1000104cd:	call	0x1000032ef
1000104d2:	mov	eax, dword ptr [rbp - 0x2c]
1000104d5:	mov	word ptr [r15 + 0x6], ax
1000104da:	test	eax, eax
1000104dc:	je	0x1000104e9
1000104de:	cmp	eax, 0x8
1000104e1:	jne	0x1000104f2
1000104e3:	mov	ax, 0x14
1000104e7:	jmp	0x1000104ed
1000104e9:	mov	ax, 0xa
1000104ed:	mov	word ptr [r15 + 0x2], ax
1000104f2:	mov	r13, r12
1000104f5:	mov	rcx, qword ptr [rbp - 0x50]
1000104f9:	movzx	eax, word ptr [rcx]
1000104fc:	test	al, 0x1
1000104fe:	jne	0x10001050d
100010500:	and	eax, 0xfff7
100010505:	mov	rbx, rcx
100010508:	mov	word ptr [rcx], ax
10001050b:	jmp	0x100010510
10001050d:	mov	rbx, rcx
100010510:	mov	word ptr [r15 + 0x3a], ax
100010515:	lea	rax, [rip + 0x19388]
10001051c:	cmp	dword ptr [rax], 0x1
10001051f:	jne	0x100010550
100010521:	lea	rax, [rip + 0x19360]
100010528:	mov	rdi, qword ptr [rax]
10001052b:	lea	rax, [rip + 0x192c6]
100010532:	cmp	rdi, qword ptr [rax]
100010535:	je	0x100010550
100010537:	mov	rsi, qword ptr [r15 + 0x40]
10001053b:	xor	edx, edx
10001053d:	call	0x10001971c ## symbol stub for: _fseeko
100010542:	mov	r12d, 0xb
100010548:	test	eax, eax
10001054a:	jne	0x100010456
100010550:	mov	rdi, r15
100010553:	mov	esi, 0x1
100010558:	call	0x10000d090
10001055d:	mov	r12d, eax
100010560:	test	eax, eax
100010562:	jne	0x100010456
100010568:	lea	rax, [rip + 0x19289]
10001056f:	mov	rdi, qword ptr [rax]
100010572:	lea	rax, [rip + 0x1931f]
100010579:	mov	rsi, qword ptr [rax]
10001057c:	xor	edx, edx
10001057e:	call	0x10001971c ## symbol stub for: _fseeko
100010583:	mov	r12d, 0xb
100010589:	test	eax, eax
10001058b:	jne	0x100010456
100010591:	test	byte ptr [rbx], 0x1
100010594:	je	0x1000101f5
10001059a:	mov	rdi, r15
10001059d:	call	0x10000d7cf
1000105a2:	mov	r12d, eax
1000105a5:	test	eax, eax
1000105a7:	jne	0x100010456
1000105ad:	lea	rax, [rip + 0x191ec]
1000105b4:	cmp	dword ptr [rax], 0x0
1000105b7:	mov	rbx, r13
1000105ba:	mov	rax, qword ptr [r13]
1000105be:	je	0x100010636
1000105c0:	add	rax, 0x18
1000105c4:	jmp	0x10001063a
1000105c6:	xor	r12d, r12d
1000105c9:	mov	rdi, r13
1000105cc:	call	0x100019716 ## symbol stub for: _free
1000105d1:	mov	r14, qword ptr [rip + 0x4aa10]
1000105d8:	mov	edi, dword ptr [rip + 0x4aa06]
1000105de:	cmp	r12, -0x1
1000105e2:	jne	0x100010604
1000105e4:	cmp	edi, -0x1
1000105e7:	mov	ebx, dword ptr [rbp - 0x30]
1000105ea:	lea	r12, [rip + 0x1a947]
1000105f1:	je	0x10001018e
1000105f7:	mov	rdi, r15
1000105fa:	call	0x100019610
1000105ff:	jmp	0x100010185
100010604:	mov	ebx, dword ptr [rbp - 0x30]
100010607:	lea	r12, [rip + 0x1a92a]
10001060e:	jmp	0x10001018e
100010613:	mov	edi, dword ptr [rip + 0x4a9cb]
100010619:	cmp	edi, -0x1
10001061c:	je	0x100010623
10001061e:	call	0x1000196bc ## symbol stub for: _close
100010623:	mov	rdi, r13
100010626:	call	0x100019716 ## symbol stub for: _free
10001062b:	mov	r12d, 0xa
100010631:	jmp	0x100010456
100010636:	add	rax, 0x10
10001063a:	mov	qword ptr [rbx], rax
10001063d:	jmp	0x1000101f5
100010642:	push	rbp
100010643:	mov	rbp, rsp
100010646:	push	r15
100010648:	push	r14
10001064a:	push	rbx
10001064b:	push	rax
10001064c:	mov	rbx, rsi
10001064f:	mov	r14, rdi
100010652:	lea	r15, [rip + 0x1919f]
100010659:	cmp	qword ptr [r15], 0x0
10001065d:	jne	0x10001066b
10001065f:	lea	rdi, [rip + 0x12c71] ## literal pool for: "output buffer too small for in-memory compression"
100010666:	call	0x1000032ef
10001066b:	mov	edx, dword ptr [rbx]
10001066d:	test	rdx, rdx
100010670:	je	0x10001069c
100010672:	mov	esi, 0x1
100010677:	mov	rdi, r14
10001067a:	call	0x10001623d
10001067f:	mov	rdi, qword ptr [r15]
100010682:	call	0x1000196e0 ## symbol stub for: _ferror
100010687:	test	eax, eax
100010689:	je	0x10001069c
10001068b:	lea	rsi, [rip + 0x12c77] ## literal pool for: "write error on zip file"
100010692:	mov	edi, 0xe
100010697:	call	0x100002e30
10001069c:	mov	dword ptr [rbx], 0x0
1000106a2:	add	rsp, 0x8
1000106a6:	pop	rbx
1000106a7:	pop	r14
1000106a9:	pop	r15
1000106ab:	pop	rbp
1000106ac:	ret
1000106ad:	push	rbp
1000106ae:	mov	rbp, rsp
1000106b1:	lea	rax, [rip + 0x19140]
1000106b8:	mov	rdi, qword ptr [rax]
1000106bb:	pop	rbp
1000106bc:	jmp	0x100014c80
1000106c1:	nop
1000106c2:	nop
1000106c3:	nop
1000106c4:	nop
1000106c5:	nop
1000106c6:	nop
1000106c7:	nop
1000106c8:	nop
1000106c9:	nop
1000106ca:	nop
1000106cb:	nop
1000106cc:	nop
1000106cd:	nop
1000106ce:	nop
1000106cf:	nop
1000106d0:	push	rbp
1000106d1:	mov	rbp, rsp
1000106d4:	push	r15
1000106d6:	push	r14
1000106d8:	push	r12
1000106da:	push	rbx
1000106db:	mov	eax, 0x2340
1000106e0:	call	0x100009bb0
1000106e5:	sub	rsp, rax
1000106e8:	mov	rbx, rdi
1000106eb:	mov	rax, qword ptr [rip + 0x1391e] ## literal pool symbol address: ___stack_chk_guard
1000106f2:	mov	rax, qword ptr [rax]
1000106f5:	mov	qword ptr [rbp - 0x28], rax
1000106f9:	mov	rdi, rbx
1000106fc:	call	0x100019734 ## symbol stub for: _getc
100010701:	cmp	eax, 0xa
100010704:	je	0x1000106f9
100010706:	cmp	eax, 0xd
100010709:	je	0x1000106f9
10001070b:	cmp	eax, -0x1
10001070e:	je	0x10001077e
100010710:	xor	r14d, r14d
100010713:	mov	r12d, 0x4801
100010719:	xor	r15d, r15d
10001071c:	cmp	r15, 0x2327
100010723:	jg	0x100010781
100010725:	mov	byte ptr [rbp + r15 - 0x2360], al
10001072d:	mov	rdi, rbx
100010730:	call	0x100019734 ## symbol stub for: _getc
100010735:	inc	r15
100010738:	mov	ecx, eax
10001073a:	inc	ecx
10001073c:	cmp	ecx, 0xe
10001073f:	ja	0x10001071c
100010741:	bt	r12d, ecx
100010745:	jae	0x10001071c
100010747:	mov	byte ptr [rbp + r15 - 0x2360], 0x0
100010750:	lea	rdi, [rbp - 0x2360]
100010757:	call	0x100019830 ## symbol stub for: _strlen
10001075c:	lea	rdi, [rax + 0x1]
100010760:	call	0x100019758 ## symbol stub for: _malloc
100010765:	test	rax, rax
100010768:	je	0x10001077e
10001076a:	mov	r14, rax
10001076d:	lea	rsi, [rbp - 0x2360]
100010774:	mov	rdi, rax
100010777:	call	0x100019824 ## symbol stub for: _strcpy
10001077c:	jmp	0x100010781
10001077e:	xor	r14d, r14d
100010781:	mov	rax, qword ptr [rip + 0x13888] ## literal pool symbol address: ___stack_chk_guard
100010788:	mov	rax, qword ptr [rax]
10001078b:	cmp	rax, qword ptr [rbp - 0x28]
10001078f:	jne	0x1000107a4
100010791:	mov	rax, r14
100010794:	add	rsp, 0x2340
10001079b:	pop	rbx
10001079c:	pop	r12
10001079e:	pop	r14
1000107a0:	pop	r15
1000107a2:	pop	rbp
1000107a3:	ret
1000107a4:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
1000107a9:	push	rbp
1000107aa:	mov	rbp, rsp
1000107ad:	push	r14
1000107af:	push	rbx
1000107b0:	mov	rbx, rdi
1000107b3:	mov	rax, qword ptr [rdi + 0x30]
1000107b7:	mov	r14, qword ptr [rdi + 0x38]
1000107bb:	mov	qword ptr [rax], r14
1000107be:	test	r14, r14
1000107c1:	je	0x1000107cb
1000107c3:	mov	rax, qword ptr [rbx + 0x30]
1000107c7:	mov	qword ptr [r14 + 0x30], rax
1000107cb:	mov	rdi, qword ptr [rbx]
1000107ce:	test	rdi, rdi
1000107d1:	je	0x1000107d8
1000107d3:	call	0x100019716 ## symbol stub for: _free
1000107d8:	mov	rdi, qword ptr [rbx + 0x10]
1000107dc:	test	rdi, rdi
1000107df:	je	0x1000107e6
1000107e1:	call	0x100019716 ## symbol stub for: _free
1000107e6:	mov	rdi, qword ptr [rbx + 0x8]
1000107ea:	test	rdi, rdi
1000107ed:	je	0x1000107f4
1000107ef:	call	0x100019716 ## symbol stub for: _free
1000107f4:	mov	rdi, rbx
1000107f7:	call	0x100019716 ## symbol stub for: _free
1000107fc:	lea	rax, [rip + 0x1a725]
100010803:	dec	qword ptr [rax]
100010806:	mov	rax, r14
100010809:	pop	rbx
10001080a:	pop	r14
10001080c:	pop	rbp
10001080d:	ret
10001080e:	push	rbp
10001080f:	mov	rbp, rsp
100010812:	push	rbx
100010813:	push	rax
100010814:	mov	rbx, rdi
100010817:	call	0x100019842 ## symbol stub for: _strrchr
10001081c:	lea	rcx, [rax + 0x1]
100010820:	test	rax, rax
100010823:	cmove	rcx, rbx
100010827:	mov	rax, rcx
10001082a:	add	rsp, 0x8
10001082e:	pop	rbx
10001082f:	pop	rbp
100010830:	ret
100010831:	push	rbp
100010832:	mov	rbp, rsp
100010835:	mov	rax, rdi
100010838:	mov	sil, byte ptr [rdi]
10001083b:	mov	r10, rdi
10001083e:	test	sil, sil
100010841:	je	0x1000108ed
100010847:	lea	rdx, [rax + 0x1]
10001084b:	xor	r9d, r9d
10001084e:	movabs	r8, 0x28000000e4000405
100010858:	mov	r10, rax
10001085b:	mov	ecx, esi
10001085d:	and	cl, -0x11
100010860:	add	cl, -0x2b
100010863:	cmp	cl, 0x2
100010866:	jb	0x10001087a
100010868:	lea	ecx, [rsi - 0x20]
10001086b:	movzx	edi, cl
10001086e:	cmp	dil, 0x3d
100010872:	ja	0x10001089c
100010874:	bt	r8, rdi
100010878:	jae	0x100010887
10001087a:	mov	sil, byte ptr [rdx]
10001087d:	inc	rdx
100010880:	test	sil, sil
100010883:	jne	0x10001085b
100010885:	jmp	0x1000108ed
100010887:	cmp	rdi, 0xe
10001088b:	je	0x1000108c6
10001088d:	cmp	rdi, 0xf
100010891:	jne	0x10001089c
100010893:	mov	byte ptr [r10], 0x2f
100010897:	inc	r10
10001089a:	jmp	0x1000108d9
10001089c:	cmp	sil, 0x7c
1000108a0:	je	0x10001087a
1000108a2:	cmp	r9d, 0xb
1000108a6:	jg	0x10001087a
1000108a8:	cmp	r9d, 0x8
1000108ac:	je	0x10001087a
1000108ae:	inc	r9d
1000108b1:	lea	ecx, [rsi - 0x61]
1000108b4:	cmp	cl, 0x1a
1000108b7:	movzx	ecx, sil
1000108bb:	cmovb	ecx, edi
1000108be:	mov	byte ptr [r10], cl
1000108c1:	inc	r10
1000108c4:	jmp	0x10001087a
1000108c6:	test	r9d, r9d
1000108c9:	je	0x1000108d9
1000108cb:	cmp	r9d, 0x8
1000108cf:	jle	0x1000108de
1000108d1:	mov	r9d, 0xc
1000108d7:	jmp	0x10001087a
1000108d9:	xor	r9d, r9d
1000108dc:	jmp	0x10001087a
1000108de:	mov	byte ptr [r10], 0x2e
1000108e2:	inc	r10
1000108e5:	mov	r9d, 0x9
1000108eb:	jmp	0x10001087a
1000108ed:	mov	byte ptr [r10], 0x0
1000108f1:	pop	rbp
1000108f2:	ret
1000108f3:	push	rbp
1000108f4:	mov	rbp, rsp
1000108f7:	push	r15
1000108f9:	push	r14
1000108fb:	push	r13
1000108fd:	push	r12
1000108ff:	push	rbx
100010900:	push	rax
100010901:	mov	r12d, esi
100010904:	mov	r14, rdi
100010907:	lea	rsi, [rip + 0xbbf4] ## literal pool for: "-"
10001090e:	call	0x10001981e ## symbol stub for: _strcmp
100010913:	test	eax, eax
100010915:	je	0x1000109e0
10001091b:	mov	rdi, r14
10001091e:	xor	esi, esi
100010920:	xor	edx, edx
100010922:	call	0x10001683e
100010927:	mov	r14, rax
10001092a:	lea	rax, [rip + 0x18fa7]
100010931:	mov	rbx, qword ptr [rax]
100010934:	mov	r13d, 0x1
10001093a:	test	rbx, rbx
10001093d:	je	0x1000109d1
100010943:	lea	r15, [rip + 0x18d62]
10001094a:	mov	rsi, qword ptr [rbx + 0x70]
10001094e:	mov	rdi, r14
100010951:	mov	edx, r12d
100010954:	call	0x100014d38
100010959:	test	eax, eax
10001095b:	je	0x1000109c1
10001095d:	lea	rax, [rip + 0x18f9c]
100010964:	cmp	dword ptr [rax], 0x0
100010967:	je	0x100010977
100010969:	mov	rdi, qword ptr [rbx + 0x78]
10001096d:	mov	esi, r12d
100010970:	call	0x100010a07
100010975:	jmp	0x10001097c
100010977:	mov	eax, 0x1
10001097c:	mov	dword ptr [rbx + 0x88], eax
100010982:	cmp	dword ptr [r15], 0x0
100010986:	je	0x1000109be
100010988:	lea	rdx, [rip + 0x129fd] ## literal pool for: "ex"
10001098f:	test	eax, eax
100010991:	je	0x10001099a
100010993:	lea	rdx, [rip + 0x129ef] ## literal pool for: "in"
10001099a:	lea	rax, [rip + 0x1a58f]
1000109a1:	mov	rdi, qword ptr [rax]
1000109a4:	mov	rcx, qword ptr [rbx + 0x80]
1000109ab:	xor	r13d, r13d
1000109ae:	lea	rsi, [rip + 0x129b6] ## literal pool for: "zip diagnostic: %scluding %s\n"
1000109b5:	xor	eax, eax
1000109b7:	call	0x1000196fe ## symbol stub for: _fprintf
1000109bc:	jmp	0x1000109c1
1000109be:	xor	r13d, r13d
1000109c1:	mov	rbx, qword ptr [rbx + 0x98]
1000109c8:	test	rbx, rbx
1000109cb:	jne	0x10001094a
1000109d1:	mov	rdi, r14
1000109d4:	call	0x100019716 ## symbol stub for: _free
1000109d9:	neg	r13d
1000109dc:	sbb	eax, eax
1000109de:	jmp	0x1000109f8
1000109e0:	lea	rdi, [rip + 0x12951] ## literal pool for: "Cannot select stdin when selecting archive entries"
1000109e7:	lea	rsi, [rip + 0x9dc9] ## literal pool for: ""
1000109ee:	call	0x1000034f4
1000109f3:	mov	eax, 0xffffffff
1000109f8:	add	rsp, 0x8
1000109fc:	pop	rbx
1000109fd:	pop	r12
1000109ff:	pop	r13
100010a01:	pop	r14
100010a03:	pop	r15
100010a05:	pop	rbp
100010a06:	ret
100010a07:	push	rbp
100010a08:	mov	rbp, rsp
100010a0b:	push	r15
100010a0d:	push	r14
100010a0f:	push	r13
100010a11:	push	r12
100010a13:	push	rbx
100010a14:	sub	rsp, 0x28
100010a18:	mov	dword ptr [rbp - 0x3c], esi
100010a1b:	mov	qword ptr [rbp - 0x38], rdi
100010a1f:	lea	r12, [rip + 0x18eda]
100010a26:	cmp	dword ptr [r12], 0x0
100010a2b:	je	0x100010bc9
100010a31:	lea	rax, [rip + 0x18ecc]
100010a38:	xor	ecx, ecx
100010a3a:	cmp	dword ptr [rax], 0x0
100010a3d:	sete	cl
100010a40:	mov	dword ptr [rbp - 0x30], ecx
100010a43:	lea	rcx, [rip + 0x18ebe]
100010a4a:	xor	eax, eax
100010a4c:	cmp	dword ptr [rcx], 0x0
100010a4f:	sete	al
100010a52:	xor	r14d, r14d
100010a55:	lea	rdx, [rip + 0x18e9c]
100010a5c:	mov	ecx, eax
100010a5e:	mov	rax, qword ptr [rdx]
100010a61:	mov	r15, r14
100010a64:	shl	r15, 0x4
100010a68:	mov	rsi, qword ptr [rax + r15]
100010a6c:	cmp	byte ptr [rsi], 0x0
100010a6f:	je	0x100010ac5
100010a71:	mov	eax, dword ptr [rax + r15 + 0x8]
100010a76:	cmp	eax, 0x69
100010a79:	mov	dword ptr [rbp - 0x2c], ecx
100010a7c:	mov	qword ptr [rbp - 0x48], rsi
100010a80:	je	0x100010acc
100010a82:	mov	rsi, qword ptr [rbp - 0x38]
100010a86:	cmp	eax, 0x52
100010a89:	jne	0x100010b62
100010a8f:	mov	eax, dword ptr [rbp - 0x2c]
100010a92:	test	eax, eax
100010a94:	jne	0x100010b9f
100010a9a:	mov	rdi, qword ptr [rbp - 0x48]
100010a9e:	mov	esi, 0x2f
100010aa3:	call	0x100019818 ## symbol stub for: _strchr
100010aa8:	xor	r13d, r13d
100010aab:	test	rax, rax
100010aae:	je	0x100010adf
100010ab0:	inc	r13d
100010ab3:	inc	rax
100010ab6:	mov	rdi, rax
100010ab9:	mov	esi, 0x2f
100010abe:	call	0x100019818 ## symbol stub for: _strchr
100010ac3:	jmp	0x100010aab
100010ac5:	mov	eax, ecx
100010ac7:	jmp	0x100010ba6
100010acc:	mov	rsi, qword ptr [rbp - 0x38]
100010ad0:	cmp	dword ptr [rbp - 0x30], 0x0
100010ad4:	jne	0x100010b9c
100010ada:	jmp	0x100010b62
100010adf:	mov	r12, qword ptr [rbp - 0x38]
100010ae3:	mov	rdi, r12
100010ae6:	mov	esi, 0x2f
100010aeb:	call	0x100019818 ## symbol stub for: _strchr
100010af0:	mov	rbx, rax
100010af3:	mov	rsi, r12
100010af6:	test	rax, rax
100010af9:	lea	r12, [rip + 0x18e00]
100010b00:	je	0x100010b62
100010b02:	dec	r13d
100010b05:	inc	rax
100010b08:	mov	rdi, rax
100010b0b:	mov	esi, 0x2f
100010b10:	call	0x100019818 ## symbol stub for: _strchr
100010b15:	test	rax, rax
100010b18:	jne	0x100010b02
100010b1a:	lea	eax, [r13 + 0x1]
100010b1e:	mov	rsi, qword ptr [rbp - 0x38]
100010b22:	test	eax, eax
100010b24:	jg	0x100010b62
100010b26:	mov	rsi, qword ptr [rbp - 0x38]
100010b2a:	test	rbx, rbx
100010b2d:	je	0x100010b62
100010b2f:	xor	r12d, r12d
100010b32:	inc	rbx
100010b35:	dec	r12d
100010b38:	cmp	r13d, r12d
100010b3b:	je	0x100010b58
100010b3d:	mov	rdi, rbx
100010b40:	mov	esi, 0x2f
100010b45:	call	0x100019818 ## symbol stub for: _strchr
100010b4a:	mov	rbx, rax
100010b4d:	test	rax, rax
100010b50:	jne	0x100010b32
100010b52:	mov	rsi, qword ptr [rbp - 0x38]
100010b56:	jmp	0x100010b5b
100010b58:	mov	rsi, rbx
100010b5b:	lea	r12, [rip + 0x18d9e]
100010b62:	mov	rdi, qword ptr [rbp - 0x48]
100010b66:	mov	edx, dword ptr [rbp - 0x3c]
100010b69:	call	0x100014d38
100010b6e:	test	eax, eax
100010b70:	je	0x100010b9c
100010b72:	lea	rdx, [rip + 0x18d7f]
100010b79:	mov	rax, qword ptr [rdx]
100010b7c:	mov	ecx, dword ptr [rax + r15 + 0x8]
100010b81:	mov	eax, 0x1
100010b86:	cmp	ecx, 0x52
100010b89:	je	0x100010ba6
100010b8b:	cmp	ecx, 0x78
100010b8e:	je	0x100010bdd
100010b90:	mov	dword ptr [rbp - 0x30], 0x1
100010b97:	mov	eax, dword ptr [rbp - 0x2c]
100010b9a:	jmp	0x100010ba6
100010b9c:	mov	eax, dword ptr [rbp - 0x2c]
100010b9f:	lea	rdx, [rip + 0x18d52]
100010ba6:	inc	r14
100010ba9:	mov	ecx, dword ptr [r12]
100010bad:	cmp	r14, rcx
100010bb0:	jb	0x100010a5c
100010bb6:	cmp	dword ptr [rbp - 0x30], 0x0
100010bba:	setne	cl
100010bbd:	test	eax, eax
100010bbf:	setne	al
100010bc2:	and	al, cl
100010bc4:	movzx	eax, al
100010bc7:	jmp	0x100010bce
100010bc9:	mov	eax, 0x1
100010bce:	add	rsp, 0x28
100010bd2:	pop	rbx
100010bd3:	pop	r12
100010bd5:	pop	r13
100010bd7:	pop	r14
100010bd9:	pop	r15
100010bdb:	pop	rbp
100010bdc:	ret
100010bdd:	xor	eax, eax
100010bdf:	jmp	0x100010bce
100010be1:	push	rbp
100010be2:	mov	rbp, rsp
100010be5:	push	r15
100010be7:	push	r14
100010be9:	push	r13
100010beb:	push	r12
100010bed:	push	rbx
100010bee:	push	rax
100010bef:	mov	eax, 0x1418
100010bf4:	call	0x100009bb0
100010bf9:	sub	rsp, rax
100010bfc:	pop	rax
100010bfd:	mov	rax, qword ptr [rip + 0x1340c] ## literal pool symbol address: ___stack_chk_guard
100010c04:	mov	rax, qword ptr [rax]
100010c07:	mov	qword ptr [rbp - 0x30], rax
100010c0b:	lea	r12, [rip + 0x1a316]
100010c12:	mov	r14, qword ptr [r12]
100010c16:	test	r14, r14
100010c19:	je	0x100010d7c
100010c1f:	mov	rax, r14
100010c22:	shr	rax, 0x3d
100010c26:	mov	ebx, 0x4
100010c2b:	jne	0x100010d7e
100010c31:	lea	rdi, [8*r14]
100010c39:	call	0x100019758 ## symbol stub for: _malloc
100010c3e:	test	rax, rax
100010c41:	je	0x100010d7e
100010c47:	mov	r15, rax
100010c4a:	lea	rax, [rip + 0x18c9f]
100010c51:	mov	rax, qword ptr [rax]
100010c54:	test	rax, rax
100010c57:	je	0x100010c6c
100010c59:	mov	rcx, r15
100010c5c:	mov	qword ptr [rcx], rax
100010c5f:	mov	rax, qword ptr [rax + 0x38]
100010c63:	add	rcx, 0x8
100010c67:	test	rax, rax
100010c6a:	jne	0x100010c5c
100010c6c:	lea	rcx, [rip + 0x232]
100010c73:	mov	edx, 0x8
100010c78:	mov	rdi, r15
100010c7b:	mov	rsi, r14
100010c7e:	call	0x1000197b8 ## symbol stub for: _qsort
100010c83:	mov	r14, qword ptr [r12]
100010c87:	dec	r14
100010c8a:	je	0x100010cc6
100010c8c:	mov	r13, r14
100010c8f:	mov	rax, qword ptr [r15 + 8*r14 - 0x8]
100010c94:	mov	rbx, qword ptr [r15 + 8*r14]
100010c98:	dec	r14
100010c9b:	mov	rdi, qword ptr [rax]
100010c9e:	mov	rsi, qword ptr [rbx]
100010ca1:	call	0x10001981e ## symbol stub for: _strcmp
100010ca6:	test	eax, eax
100010ca8:	je	0x100010cb3
100010caa:	mov	qword ptr [r15 + 8*r13], rbx
100010cae:	dec	r13
100010cb1:	jmp	0x100010cbb
100010cb3:	mov	rdi, rbx
100010cb6:	call	0x1000107a9
100010cbb:	test	r14, r14
100010cbe:	jne	0x100010c8f
100010cc0:	mov	rsi, qword ptr [r12]
100010cc4:	jmp	0x100010cce
100010cc6:	xor	r13d, r13d
100010cc9:	mov	esi, 0x1
100010cce:	mov	rax, qword ptr [r15]
100010cd1:	lea	rbx, [r15 + 8*r13]
100010cd5:	mov	qword ptr [rbp - 0x1440], r15
100010cdc:	mov	qword ptr [r15 + 8*r13], rax
100010ce0:	lea	rcx, [rip + 0x1d4]
100010ce7:	mov	edx, 0x8
100010cec:	mov	rdi, rbx
100010cef:	call	0x1000197b8 ## symbol stub for: _qsort
100010cf4:	mov	r14, qword ptr [r12]
100010cf8:	cmp	r14, 0x2
100010cfc:	jb	0x100010d70
100010cfe:	mov	rax, qword ptr [rbx]
100010d01:	mov	r15, qword ptr [rbx + 0x8]
100010d05:	mov	qword ptr [rbp - 0x1438], rax
100010d0c:	mov	rdi, qword ptr [rax + 0x8]
100010d10:	mov	r12, qword ptr [r15 + 0x8]
100010d14:	mov	rsi, r12
100010d17:	call	0x10001981e ## symbol stub for: _strcmp
100010d1c:	test	eax, eax
100010d1e:	je	0x100010da6
100010d24:	mov	rax, qword ptr [rbp - 0x1440]
100010d2b:	lea	rbx, [rax + 8*r13]
100010d2f:	add	rbx, 0x8
100010d33:	add	r14, -0x2
100010d37:	test	r14, r14
100010d3a:	je	0x100010d70
100010d3c:	mov	r13, r15
100010d3f:	mov	r15, qword ptr [rbx + 0x8]
100010d43:	add	rbx, 0x8
100010d47:	mov	qword ptr [rbp - 0x1438], rbx
100010d4e:	mov	rbx, qword ptr [r15 + 0x8]
100010d52:	mov	rdi, r12
100010d55:	mov	rsi, rbx
100010d58:	call	0x10001981e ## symbol stub for: _strcmp
100010d5d:	dec	r14
100010d60:	mov	r12, rbx
100010d63:	mov	rbx, qword ptr [rbp - 0x1438]
100010d6a:	test	eax, eax
100010d6c:	jne	0x100010d37
100010d6e:	jmp	0x100010db1
100010d70:	mov	rdi, qword ptr [rbp - 0x1440]
100010d77:	call	0x100019716 ## symbol stub for: _free
100010d7c:	xor	ebx, ebx
100010d7e:	mov	rax, qword ptr [rip + 0x1328b] ## literal pool symbol address: ___stack_chk_guard
100010d85:	mov	rax, qword ptr [rax]
100010d88:	cmp	rax, qword ptr [rbp - 0x30]
100010d8c:	jne	0x100010ea0
100010d92:	mov	eax, ebx
100010d94:	add	rsp, 0x1418
100010d9b:	pop	rbx
100010d9c:	pop	r12
100010d9e:	pop	r13
100010da0:	pop	r14
100010da2:	pop	r15
100010da4:	pop	rbp
100010da5:	ret
100010da6:	mov	r13, qword ptr [rbp - 0x1438]
100010dad:	add	rbx, 0x8
100010db1:	mov	r8, qword ptr [r13]
100010db5:	lea	r15, [rip + 0x18d74]
100010dbc:	lea	rcx, [rip + 0x125cc] ## literal pool for: "  first full name: %s\n"
100010dc3:	mov	edx, 0x13f1
100010dc8:	mov	rdi, r15
100010dcb:	xor	esi, esi
100010dcd:	xor	eax, eax
100010dcf:	call	0x100019680 ## symbol stub for: ___sprintf_chk
100010dd4:	mov	rax, qword ptr [rbx]
100010dd7:	mov	r8, qword ptr [rax]
100010dda:	lea	rcx, [rip + 0x125c5] ## literal pool for: " second full name: %s\n"
100010de1:	lea	r14, [rbp - 0x1430]
100010de8:	mov	edx, 0x13f1
100010ded:	mov	rdi, r14
100010df0:	xor	esi, esi
100010df2:	xor	eax, eax
100010df4:	call	0x100019680 ## symbol stub for: ___sprintf_chk
100010df9:	lea	r12, [rip + 0x125bd] ## literal pool for: "                     "
100010e00:	mov	edx, 0x13f1
100010e05:	mov	rdi, r15
100010e08:	mov	rsi, r12
100010e0b:	call	0x10001968c ## symbol stub for: ___strcat_chk
100010e10:	mov	edx, 0x13f1
100010e15:	mov	rdi, r15
100010e18:	mov	rsi, r14
100010e1b:	call	0x10001968c ## symbol stub for: ___strcat_chk
100010e20:	mov	rax, qword ptr [rbx]
100010e23:	mov	r8, qword ptr [rax + 0x8]
100010e27:	lea	rcx, [rip + 0x125a5] ## literal pool for: "name in zip file repeated: %s"
100010e2e:	mov	edx, 0x13f1
100010e33:	mov	rdi, r14
100010e36:	xor	esi, esi
100010e38:	xor	eax, eax
100010e3a:	call	0x100019680 ## symbol stub for: ___sprintf_chk
100010e3f:	mov	edx, 0x13f1
100010e44:	mov	rdi, r15
100010e47:	mov	rsi, r12
100010e4a:	call	0x10001968c ## symbol stub for: ___strcat_chk
100010e4f:	mov	edx, 0x13f1
100010e54:	mov	rdi, r15
100010e57:	mov	rsi, r14
100010e5a:	call	0x10001968c ## symbol stub for: ___strcat_chk
100010e5f:	lea	rax, [rip + 0x185e2]
100010e66:	cmp	dword ptr [rax], 0x0
100010e69:	jne	0x100010e83
100010e6b:	lea	rdi, [rip + 0x18cbe]
100010e72:	lea	rsi, [rip + 0x12578] ## literal pool for: "\n                     this may be a result of using -j"
100010e79:	mov	edx, 0x13f1
100010e7e:	call	0x10001968c ## symbol stub for: ___strcat_chk
100010e83:	lea	rdi, [rip + 0x18ca6]
100010e8a:	lea	rsi, [rip + 0x9926] ## literal pool for: ""
100010e91:	call	0x1000034f4
100010e96:	mov	ebx, 0x10
100010e9b:	jmp	0x100010d7e
100010ea0:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
100010ea5:	push	rbp
100010ea6:	mov	rbp, rsp
100010ea9:	mov	rax, qword ptr [rdi]
100010eac:	mov	rdi, qword ptr [rax]
100010eaf:	mov	rax, qword ptr [rsi]
100010eb2:	mov	rsi, qword ptr [rax]
100010eb5:	pop	rbp
100010eb6:	jmp	0x10001981e ## symbol stub for: _strcmp
100010ebb:	push	rbp
100010ebc:	mov	rbp, rsp
100010ebf:	mov	rax, qword ptr [rdi]
100010ec2:	mov	rdi, qword ptr [rax + 0x8]
100010ec6:	mov	rax, qword ptr [rsi]
100010ec9:	mov	rsi, qword ptr [rax + 0x8]
100010ecd:	pop	rbp
100010ece:	jmp	0x10001981e ## symbol stub for: _strcmp
100010ed3:	push	rbp
100010ed4:	mov	rbp, rsp
100010ed7:	push	r15
100010ed9:	push	r14
100010edb:	push	r13
100010edd:	push	r12
100010edf:	push	rbx
100010ee0:	sub	rsp, 0xb8
100010ee7:	mov	dword ptr [rbp - 0x38], edx
100010eea:	mov	r12d, esi
100010eed:	mov	r13, rdi
100010ef0:	lea	rax, [rip + 0x18565]
100010ef7:	cmp	dword ptr [rax], 0x0
100010efa:	je	0x100010fc1
100010f00:	lea	rbx, [rip + 0x188d1]
100010f07:	mov	rax, qword ptr [rbx]
100010f0a:	test	rax, rax
100010f0d:	jne	0x100010f23
100010f0f:	xor	edi, edi
100010f11:	call	0x10001985a ## symbol stub for: _time
100010f16:	lea	rcx, [rip + 0x188a3]
100010f1d:	mov	qword ptr [rcx], rax
100010f20:	mov	rax, qword ptr [rbx]
100010f23:	inc	rax
100010f26:	mov	qword ptr [rbx], rax
100010f29:	movabs	rcx, -0x70a3d70a3d70a3d7
100010f33:	imul	rcx, rax
100010f37:	ror	rcx, 0x2
100010f3b:	movabs	rax, 0x28f5c28f5c28f5c
100010f45:	cmp	rcx, rax
100010f48:	ja	0x100010fc1
100010f4a:	xor	edi, edi
100010f4c:	call	0x10001985a ## symbol stub for: _time
100010f51:	mov	r15, rax
100010f54:	lea	rax, [rip + 0x18865]
100010f5b:	mov	rcx, r15
100010f5e:	sub	rcx, qword ptr [rax]
100010f61:	lea	rax, [rip + 0x18518]
100010f68:	cmp	rcx, qword ptr [rax]
100010f6b:	jle	0x100010fc1
100010f6d:	lea	r14, [rip + 0x18854]
100010f74:	mov	rax, qword ptr [r14]
100010f77:	test	rax, rax
100010f7a:	jne	0x100010f90
100010f7c:	lea	rdi, [rip + 0xbff3] ## literal pool for: "Scanning files "
100010f83:	xor	esi, esi
100010f85:	call	0x100003300
100010f8a:	mov	qword ptr [r14], r15
100010f8d:	mov	rax, r15
100010f90:	mov	rcx, r15
100010f93:	sub	rcx, rax
100010f96:	lea	rax, [rip + 0x184eb]
100010f9d:	cmp	rcx, qword ptr [rax]
100010fa0:	jle	0x100010fc1
100010fa2:	mov	qword ptr [r14], r15
100010fa5:	lea	rbx, [rip + 0x19f84]
100010fac:	mov	rsi, qword ptr [rbx]
100010faf:	mov	edi, 0x2e
100010fb4:	call	0x100019704 ## symbol stub for: _fputc
100010fb9:	mov	rdi, qword ptr [rbx]
100010fbc:	call	0x1000196e6 ## symbol stub for: _fflush
100010fc1:	lea	rdx, [rbp - 0x3c]
100010fc5:	mov	rdi, r13
100010fc8:	mov	esi, r12d
100010fcb:	call	0x10001683e
100010fd0:	mov	r15d, 0x4
100010fd6:	test	rax, rax
100010fd9:	je	0x100011468
100010fdf:	mov	rbx, rax
100010fe2:	cmp	byte ptr [rax], 0x0
100010fe5:	je	0x10001100c
100010fe7:	mov	qword ptr [rbp - 0x48], r13
100010feb:	cmp	dword ptr [rbp - 0x3c], 0x0
100010fef:	lea	rax, [rip + 0x18452]
100010ff6:	mov	r14d, dword ptr [rax]
100010ff9:	mov	qword ptr [rbp - 0x30], rbx
100010ffd:	jne	0x100011040
100010fff:	test	r14d, r14d
100011002:	je	0x100011040
100011004:	xor	r14d, r14d
100011007:	jmp	0x1000110a1
10001100c:	lea	rax, [rip + 0x18435]
100011013:	cmp	dword ptr [rax], 0x0
100011016:	je	0x100011030
100011018:	lea	rax, [rip + 0x18681]
10001101f:	cmp	dword ptr [rax], 0x0
100011022:	jne	0x100011030
100011024:	lea	rdi, [rip + 0x123fd] ## literal pool for: "empty name without -j or -r"
10001102b:	call	0x1000032ef
100011030:	mov	rdi, rbx
100011033:	call	0x100019716 ## symbol stub for: _free
100011038:	xor	r15d, r15d
10001103b:	jmp	0x100011468
100011040:	lea	rcx, [rip + 0x18661]
100011047:	mov	edx, dword ptr [rcx]
100011049:	mov	dword ptr [rbp - 0x50], edx
10001104c:	mov	dword ptr [rcx], 0x0
100011052:	mov	dword ptr [rax], 0x1
100011058:	xor	r13d, r13d
10001105b:	mov	rdi, qword ptr [rbp - 0x48]
10001105f:	mov	esi, r12d
100011062:	xor	edx, edx
100011064:	call	0x10001683e
100011069:	test	rax, rax
10001106c:	je	0x100011084
10001106e:	mov	rbx, rax
100011071:	mov	rdi, rax
100011074:	call	0x10001694a
100011079:	mov	r13, rax
10001107c:	mov	rdi, rbx
10001107f:	call	0x100019716 ## symbol stub for: _free
100011084:	lea	rax, [rip + 0x1861d]
10001108b:	mov	ecx, dword ptr [rbp - 0x50]
10001108e:	mov	dword ptr [rax], ecx
100011090:	lea	rax, [rip + 0x183b1]
100011097:	mov	dword ptr [rax], r14d
10001109a:	mov	rbx, qword ptr [rbp - 0x30]
10001109e:	mov	r14, r13
1000110a1:	mov	rdi, rbx
1000110a4:	call	0x10001694a
1000110a9:	test	rax, rax
1000110ac:	je	0x100011468
1000110b2:	mov	rbx, rax
1000110b5:	mov	rdi, rax
1000110b8:	call	0x100019830 ## symbol stub for: _strlen
1000110bd:	lea	rdi, [rax + 0x1]
1000110c1:	call	0x100019758 ## symbol stub for: _malloc
1000110c6:	test	rax, rax
1000110c9:	je	0x100011468
1000110cf:	mov	r12, rax
1000110d2:	mov	rdi, rax
1000110d5:	mov	rsi, rbx
1000110d8:	call	0x100019824 ## symbol stub for: _strcpy
1000110dd:	test	r14, r14
1000110e0:	cmove	r14, rbx
1000110e4:	mov	rdi, rbx
1000110e7:	call	0x100009bfa
1000110ec:	mov	r13, rax
1000110ef:	lea	rax, [rip + 0x1880a]
1000110f6:	mov	eax, dword ptr [rax]
1000110f8:	test	r13, r13
1000110fb:	je	0x10001116d
1000110fd:	mov	qword ptr [rbp - 0x50], r12
100011101:	test	eax, eax
100011103:	je	0x100011118
100011105:	mov	rdi, r14
100011108:	mov	esi, dword ptr [rbp - 0x38]
10001110b:	call	0x100010a07
100011110:	test	eax, eax
100011112:	je	0x1000111f5
100011118:	mov	r12, r14
10001111b:	mov	dword ptr [r13 + 0x88], 0x1
100011126:	mov	r14, qword ptr [rbp - 0x48]
10001112a:	mov	rdi, r14
10001112d:	call	0x100019830 ## symbol stub for: _strlen
100011132:	lea	rdi, [rax + 0x1]
100011136:	call	0x100019758 ## symbol stub for: _malloc
10001113b:	mov	qword ptr [r13 + 0x50], rax
10001113f:	test	rax, rax
100011142:	je	0x1000111d7
100011148:	mov	rdi, rax
10001114b:	mov	rsi, r14
10001114e:	call	0x100019824 ## symbol stub for: _strcpy
100011153:	mov	rax, qword ptr [rbp - 0x50]
100011157:	mov	qword ptr [r13 + 0x80], rax
10001115e:	mov	eax, dword ptr [rbp - 0x3c]
100011161:	mov	dword ptr [r13 + 0x94], eax
100011168:	jmp	0x100011224
10001116d:	test	eax, eax
10001116f:	je	0x100011184
100011171:	mov	rdi, r14
100011174:	mov	esi, dword ptr [rbp - 0x38]
100011177:	call	0x100010a07
10001117c:	test	eax, eax
10001117e:	je	0x100011421
100011184:	mov	qword ptr [rbp - 0x38], r14
100011188:	mov	ecx, dword ptr [rip + 0x1808a]
10001118e:	cmp	ecx, -0x1
100011191:	mov	r14, qword ptr [rbp - 0x48]
100011195:	jne	0x10001125d
10001119b:	lea	rax, [rip + 0x19db6]
1000111a2:	mov	r15, qword ptr [rax]
1000111a5:	lea	rsi, [rip + 0xb356] ## literal pool for: "-"
1000111ac:	mov	rdi, r15
1000111af:	call	0x10001981e ## symbol stub for: _strcmp
1000111b4:	test	eax, eax
1000111b6:	je	0x100011255
1000111bc:	lea	rsi, [rip + 0x4a23d]
1000111c3:	mov	rdi, r15
1000111c6:	call	0x10001980c ## symbol stub for: _stat$INODE64
1000111cb:	xor	ecx, ecx
1000111cd:	test	eax, eax
1000111cf:	sete	cl
1000111d2:	jmp	0x100011257
1000111d7:	cmp	r12, rbx
1000111da:	je	0x1000111e4
1000111dc:	mov	rdi, r12
1000111df:	call	0x100019716 ## symbol stub for: _free
1000111e4:	mov	rdi, qword ptr [rbp - 0x30]
1000111e8:	call	0x100019716 ## symbol stub for: _free
1000111ed:	mov	rdi, rbx
1000111f0:	jmp	0x100011463
1000111f5:	mov	r12, r14
1000111f8:	lea	rax, [rip + 0x184ad]
1000111ff:	cmp	dword ptr [rax], 0x0
100011202:	mov	r14, qword ptr [rbp - 0x48]
100011206:	je	0x100011224
100011208:	lea	rax, [rip + 0x19d21]
10001120f:	mov	rdi, qword ptr [rax]
100011212:	lea	rsi, [rip + 0x1222b] ## literal pool for: "excluding %s\n"
100011219:	mov	rdx, qword ptr [rbp - 0x50]
10001121d:	xor	eax, eax
10001121f:	call	0x1000196fe ## symbol stub for: _fprintf
100011224:	mov	rdi, qword ptr [rbp - 0x30]
100011228:	call	0x100019716 ## symbol stub for: _free
10001122d:	mov	rdi, rbx
100011230:	call	0x100019716 ## symbol stub for: _free
100011235:	cmp	qword ptr [rip + 0x1845c], r14
10001123c:	mov	r14, r12
10001123f:	jne	0x100011421
100011245:	mov	rax, qword ptr [r13 + 0x50]
100011249:	mov	qword ptr [rip + 0x18448], rax
100011250:	jmp	0x100011421
100011255:	xor	ecx, ecx
100011257:	mov	dword ptr [rip + 0x17fbb], ecx
10001125d:	cmp	ecx, 0x1
100011260:	jne	0x100011378
100011266:	lea	rsi, [rip + 0x4a193]
10001126d:	lea	r15, [rbp - 0xe0]
100011274:	mov	edx, 0x90
100011279:	mov	rdi, r15
10001127c:	call	0x10001975e ## symbol stub for: _memcpy
100011281:	mov	rdi, r14
100011284:	mov	rsi, r15
100011287:	call	0x10001980c ## symbol stub for: _stat$INODE64
10001128c:	test	eax, eax
10001128e:	jne	0x100011378
100011294:	movzx	eax, word ptr [rip + 0x4a169]
10001129b:	cmp	ax, word ptr [rbp - 0xdc]
1000112a2:	jne	0x100011378
1000112a8:	mov	rax, qword ptr [rip + 0x4a159]
1000112af:	cmp	rax, qword ptr [rbp - 0xd8]
1000112b6:	jne	0x100011378
1000112bc:	mov	eax, dword ptr [rip + 0x4a13e]
1000112c2:	cmp	eax, dword ptr [rbp - 0xe0]
1000112c8:	jne	0x100011378
1000112ce:	mov	eax, dword ptr [rip + 0x4a13c]
1000112d4:	cmp	eax, dword ptr [rbp - 0xd0]
1000112da:	jne	0x100011378
1000112e0:	mov	eax, dword ptr [rip + 0x4a12e]
1000112e6:	cmp	eax, dword ptr [rbp - 0xcc]
1000112ec:	jne	0x100011378
1000112f2:	mov	rax, qword ptr [rip + 0x4a167]
1000112f9:	cmp	rax, qword ptr [rbp - 0x80]
1000112fd:	jne	0x100011378
1000112ff:	mov	rax, qword ptr [rip + 0x4a12a]
100011306:	cmp	rax, qword ptr [rbp - 0xb0]
10001130d:	jne	0x100011378
10001130f:	mov	rax, qword ptr [rip + 0x4a12a]
100011316:	cmp	rax, qword ptr [rbp - 0xa0]
10001131d:	jne	0x100011378
10001131f:	lea	rax, [rip + 0x18386]
100011326:	cmp	dword ptr [rax], 0x0
100011329:	je	0x10001134b
10001132b:	lea	rax, [rip + 0x19bfe]
100011332:	mov	rcx, qword ptr [rax]
100011335:	lea	rdi, [rip + 0x12116] ## literal pool for: "file matches zip file -- skipping\n"
10001133c:	mov	esi, 0x22
100011341:	mov	edx, 0x1
100011346:	call	0x10001972e ## symbol stub for: _fwrite
10001134b:	cmp	qword ptr [rbp - 0x38], rbx
10001134f:	je	0x100011359
100011351:	mov	rdi, rbx
100011354:	call	0x100019716 ## symbol stub for: _free
100011359:	xor	r15d, r15d
10001135c:	mov	rax, qword ptr [rbp - 0x30]
100011360:	cmp	qword ptr [rbp - 0x38], rax
100011364:	je	0x10001136f
100011366:	mov	rdi, qword ptr [rbp - 0x38]
10001136a:	call	0x100019716 ## symbol stub for: _free
10001136f:	mov	rbx, qword ptr [rbp - 0x30]
100011373:	jmp	0x100011458
100011378:	mov	edi, 0x40
10001137d:	call	0x100019758 ## symbol stub for: _malloc
100011382:	mov	r15, rax
100011385:	test	rax, rax
100011388:	je	0x10001142e
10001138e:	lea	r13, [rip + 0x19b93]
100011395:	cmp	qword ptr [r13], -0x1
10001139a:	je	0x10001142e
1000113a0:	mov	rdi, qword ptr [rbp - 0x48]
1000113a4:	call	0x100019830 ## symbol stub for: _strlen
1000113a9:	lea	rdi, [rax + 0x1]
1000113ad:	call	0x100019758 ## symbol stub for: _malloc
1000113b2:	mov	qword ptr [r15], rax
1000113b5:	test	rax, rax
1000113b8:	je	0x10001142e
1000113ba:	mov	rdi, rax
1000113bd:	mov	r14, qword ptr [rbp - 0x48]
1000113c1:	mov	rsi, r14
1000113c4:	call	0x100019824 ## symbol stub for: _strcpy
1000113c9:	mov	rax, qword ptr [rbp - 0x30]
1000113cd:	mov	qword ptr [r15 + 0x8], rax
1000113d1:	mov	qword ptr [r15 + 0x10], rbx
1000113d5:	mov	qword ptr [r15 + 0x18], r12
1000113d9:	mov	eax, dword ptr [rbp - 0x3c]
1000113dc:	mov	dword ptr [r15 + 0x20], eax
1000113e0:	lea	rax, [rip + 0x180b1]
1000113e7:	mov	rcx, qword ptr [rax]
1000113ea:	mov	qword ptr [rcx], r15
1000113ed:	mov	rcx, qword ptr [rax]
1000113f0:	mov	qword ptr [r15 + 0x30], rcx
1000113f4:	mov	rcx, r15
1000113f7:	add	rcx, 0x38
1000113fb:	inc	qword ptr [r13]
1000113ff:	mov	qword ptr [r15 + 0x38], 0x0
100011407:	mov	qword ptr [rax], rcx
10001140a:	cmp	qword ptr [rip + 0x18287], r14
100011411:	jne	0x10001141d
100011413:	mov	rax, qword ptr [r15]
100011416:	mov	qword ptr [rip + 0x1827b], rax
10001141d:	mov	r14, qword ptr [rbp - 0x38]
100011421:	xor	r15d, r15d
100011424:	cmp	r14, rbx
100011427:	je	0x100011468
100011429:	mov	rdi, r14
10001142c:	jmp	0x100011463
10001142e:	test	r15, r15
100011431:	je	0x10001143b
100011433:	mov	rdi, r15
100011436:	call	0x100019716 ## symbol stub for: _free
10001143b:	mov	rdi, qword ptr [rbp - 0x38]
10001143f:	cmp	rdi, rbx
100011442:	je	0x100011449
100011444:	call	0x100019716 ## symbol stub for: _free
100011449:	mov	rdi, qword ptr [rbp - 0x30]
10001144d:	call	0x100019716 ## symbol stub for: _free
100011452:	mov	r15d, 0x4
100011458:	mov	rdi, rbx
10001145b:	call	0x100019716 ## symbol stub for: _free
100011460:	mov	rdi, r12
100011463:	call	0x100019716 ## symbol stub for: _free
100011468:	mov	eax, r15d
10001146b:	add	rsp, 0xb8
100011472:	pop	rbx
100011473:	pop	r12
100011475:	pop	r13
100011477:	pop	r14
100011479:	pop	r15
10001147b:	pop	rbp
10001147c:	ret
10001147d:	push	rbp
10001147e:	mov	rbp, rsp
100011481:	mov	eax, 0x210000
100011486:	cmp	edi, 0x7bc
10001148c:	jl	0x1000114d2
10001148e:	mov	eax, edi
100011490:	shl	rax, 0x19
100011494:	movabs	rdi, -0xf78000000
10001149e:	add	rdi, rax
1000114a1:	movsxd	rax, esi
1000114a4:	shl	rax, 0x15
1000114a8:	movsxd	rdx, edx
1000114ab:	shl	rdx, 0x10
1000114af:	or	rdx, rax
1000114b2:	or	rdx, rdi
1000114b5:	movsxd	rax, ecx
1000114b8:	shl	rax, 0xb
1000114bc:	movsxd	rcx, r8d
1000114bf:	shl	rcx, 0x5
1000114c3:	or	rcx, rax
1000114c6:	movsxd	rax, r9d
1000114c9:	shr	rax
1000114cc:	or	rax, rcx
1000114cf:	or	rax, rdx
1000114d2:	pop	rbp
1000114d3:	ret
1000114d4:	push	rbp
1000114d5:	mov	rbp, rsp
1000114d8:	sub	rsp, 0x10
1000114dc:	mov	rax, qword ptr [rdi]
1000114df:	inc	rax
1000114e2:	and	rax, -0x2
1000114e6:	lea	rdi, [rbp - 0x8]
1000114ea:	mov	qword ptr [rdi], rax
1000114ed:	call	0x10001974c ## symbol stub for: _localtime
1000114f2:	mov	rcx, rax
1000114f5:	test	rax, rax
1000114f8:	jne	0x100011517
1000114fa:	xor	edi, edi
1000114fc:	call	0x10001985a ## symbol stub for: _time
100011501:	inc	rax
100011504:	and	rax, -0x2
100011508:	lea	rdi, [rbp - 0x8]
10001150c:	mov	qword ptr [rdi], rax
10001150f:	call	0x10001974c ## symbol stub for: _localtime
100011514:	mov	rcx, rax
100011517:	mov	edx, dword ptr [rcx + 0x14]
10001151a:	mov	eax, 0x210000
10001151f:	cmp	edx, 0x50
100011522:	jl	0x100011571
100011524:	shl	rdx, 0x19
100011528:	movsxd	rax, dword ptr [rcx]
10001152b:	movsxd	r8, dword ptr [rcx + 0x4]
10001152f:	movsxd	rdi, dword ptr [rcx + 0x8]
100011533:	movsxd	rsi, dword ptr [rcx + 0xc]
100011537:	movsxd	rcx, dword ptr [rcx + 0x10]
10001153b:	shl	rcx, 0x15
10001153f:	movabs	r9, -0xa0000000
100011549:	add	r9, rdx
10001154c:	add	rcx, 0x200000
100011553:	shl	rsi, 0x10
100011557:	shl	rdi, 0xb
10001155b:	or	rdi, rsi
10001155e:	or	rdi, rcx
100011561:	shl	r8, 0x5
100011565:	shr	rax
100011568:	or	rax, r8
10001156b:	or	rax, r9
10001156e:	or	rax, rdi
100011571:	add	rsp, 0x10
100011575:	pop	rbp
100011576:	ret
100011577:	push	rbp
100011578:	mov	rbp, rsp
10001157b:	and	edi, 0xf0000000
100011581:	xor	eax, eax
100011583:	cmp	edi, 0xa0000000
100011589:	sete	al
10001158c:	pop	rbp
10001158d:	ret
10001158e:	push	rbp
10001158f:	mov	rbp, rsp
100011592:	push	rbx
100011593:	push	rax
100011594:	mov	rbx, rdi
100011597:	xor	edi, edi
100011599:	call	0x10001985a ## symbol stub for: _time
10001159e:	lea	rdi, [rbp - 0x10]
1000115a2:	mov	qword ptr [rdi], rax
1000115a5:	call	0x10001974c ## symbol stub for: _localtime
1000115aa:	mov	dword ptr [rax + 0x20], 0xffffffff
1000115b1:	lea	ecx, [rbx + rbx]
1000115b4:	mov	edx, ebx
1000115b6:	shr	edx, 0x5
1000115b9:	mov	esi, ebx
1000115bb:	shr	esi, 0xb
1000115be:	mov	edi, ebx
1000115c0:	shr	edi, 0x10
1000115c3:	movd	xmm0, ecx
1000115c7:	pinsrd	xmm0, edx, 0x1
1000115cd:	pinsrd	xmm0, esi, 0x2
1000115d3:	pinsrd	xmm0, edi, 0x3
1000115d9:	pand	xmm0, xmmword ptr [rip + 0x862f]
1000115e1:	movdqu	xmmword ptr [rax], xmm0
1000115e5:	mov	ecx, ebx
1000115e7:	shr	ecx, 0x15
1000115ea:	and	ecx, 0xf
1000115ed:	dec	ecx
1000115ef:	mov	dword ptr [rax + 0x10], ecx
1000115f2:	shr	ebx, 0x19
1000115f5:	add	ebx, 0x50
1000115f8:	mov	dword ptr [rax + 0x14], ebx
1000115fb:	mov	rdi, rax
1000115fe:	call	0x100019776 ## symbol stub for: _mktime
100011603:	add	rsp, 0x8
100011607:	pop	rbx
100011608:	pop	rbp
100011609:	ret
10001160a:	push	rbp
10001160b:	mov	rbp, rsp
10001160e:	pop	rbp
10001160f:	jmp	0x10001986c ## symbol stub for: _unlink
100011614:	push	rbp
100011615:	mov	rbp, rsp
100011618:	push	r15
10001161a:	push	r14
10001161c:	push	r13
10001161e:	push	r12
100011620:	push	rbx
100011621:	sub	rsp, 0x98
100011628:	mov	r14, rsi
10001162b:	mov	r15, rdi
10001162e:	lea	rsi, [rbp - 0xb8]
100011635:	call	0x100019752 ## symbol stub for: _lstat$INODE64
10001163a:	test	eax, eax
10001163c:	je	0x100011668
10001163e:	mov	rdi, r14
100011641:	mov	rsi, r15
100011644:	call	0x1000197dc ## symbol stub for: _rename
100011649:	test	eax, eax
10001164b:	je	0x100011751
100011651:	call	0x100019674 ## symbol stub for: ___error
100011656:	mov	rcx, rax
100011659:	mov	eax, 0xf
10001165e:	cmp	dword ptr [rcx], 0x12
100011661:	je	0x100011689
100011663:	jmp	0x100011753
100011668:	cmp	word ptr [rbp - 0xb2], 0x1
100011670:	ja	0x100011689
100011672:	movzx	eax, word ptr [rbp - 0xb4]
100011679:	and	eax, 0xf000
10001167e:	cmp	eax, 0xa000
100011683:	jne	0x100011731
100011689:	lea	rsi, [rip + 0xa920] ## literal pool for: "r"
100011690:	mov	rdi, r14
100011693:	call	0x1000196f8 ## symbol stub for: _fopen
100011698:	test	rax, rax
10001169b:	je	0x100011700
10001169d:	mov	rbx, rax
1000116a0:	lea	rsi, [rip + 0xb1cf] ## literal pool for: "w"
1000116a7:	mov	rdi, r15
1000116aa:	call	0x1000196f8 ## symbol stub for: _fopen
1000116af:	test	rax, rax
1000116b2:	je	0x100011722
1000116b4:	mov	r13, rax
1000116b7:	mov	rdi, rbx
1000116ba:	mov	rsi, rax
1000116bd:	mov	rdx, -0x1
1000116c4:	call	0x100011765
1000116c9:	mov	r12d, eax
1000116cc:	mov	rdi, rbx
1000116cf:	call	0x1000196ce ## symbol stub for: _fclose
1000116d4:	mov	rdi, r13
1000116d7:	call	0x1000196ce ## symbol stub for: _fclose
1000116dc:	or	eax, r12d
1000116df:	je	0x100011749
1000116e1:	mov	rdi, r15
1000116e4:	call	0x10001986c ## symbol stub for: _unlink
1000116e9:	cmp	r12d, 0xa
1000116ed:	mov	ecx, 0xe
1000116f2:	mov	eax, r12d
1000116f5:	cmove	eax, ecx
1000116f8:	test	r12d, r12d
1000116fb:	cmove	eax, ecx
1000116fe:	jmp	0x100011753
100011700:	lea	rax, [rip + 0x19829]
100011707:	mov	rdi, qword ptr [rax]
10001170a:	lea	rsi, [rip + 0x11d64] ## literal pool for: " replace: can't open %s\n"
100011711:	mov	rdx, r14
100011714:	xor	eax, eax
100011716:	call	0x1000196fe ## symbol stub for: _fprintf
10001171b:	mov	eax, 0xa
100011720:	jmp	0x100011753
100011722:	mov	rdi, rbx
100011725:	call	0x1000196ce ## symbol stub for: _fclose
10001172a:	mov	eax, 0xf
10001172f:	jmp	0x100011753
100011731:	mov	rdi, r15
100011734:	call	0x10001986c ## symbol stub for: _unlink
100011739:	mov	ecx, eax
10001173b:	mov	eax, 0xf
100011740:	test	ecx, ecx
100011742:	jne	0x100011753
100011744:	jmp	0x10001163e
100011749:	mov	rdi, r14
10001174c:	call	0x10001986c ## symbol stub for: _unlink
100011751:	xor	eax, eax
100011753:	add	rsp, 0x98
10001175a:	pop	rbx
10001175b:	pop	r12
10001175d:	pop	r13
10001175f:	pop	r14
100011761:	pop	r15
100011763:	pop	rbp
100011764:	ret
100011765:	push	rbp
100011766:	mov	rbp, rsp
100011769:	push	r15
10001176b:	push	r14
10001176d:	push	r13
10001176f:	push	r12
100011771:	push	rbx
100011772:	sub	rsp, 0x18
100011776:	mov	r13, rdx
100011779:	mov	qword ptr [rbp - 0x38], rsi
10001177d:	mov	qword ptr [rbp - 0x30], rdi
100011781:	mov	edi, 0x4000
100011786:	call	0x100019758 ## symbol stub for: _malloc
10001178b:	test	rax, rax
10001178e:	je	0x1000117fc
100011790:	mov	r15, rax
100011793:	test	r13, r13
100011796:	je	0x10001181f
10001179c:	xor	r12d, r12d
10001179f:	mov	r14d, 0x4000
1000117a5:	mov	rdx, r13
1000117a8:	sub	rdx, r12
1000117ab:	cmp	rdx, r14
1000117ae:	cmovae	rdx, r14
1000117b2:	cmp	r13, -0x1
1000117b6:	cmove	rdx, r14
1000117ba:	mov	esi, 0x1
1000117bf:	mov	rdi, r15
1000117c2:	mov	rcx, qword ptr [rbp - 0x30]
1000117c6:	call	0x100019710 ## symbol stub for: _fread
1000117cb:	test	rax, rax
1000117ce:	je	0x100011803
1000117d0:	mov	rbx, rax
1000117d3:	mov	esi, 0x1
1000117d8:	mov	rdi, r15
1000117db:	mov	rdx, rax
1000117de:	mov	rcx, qword ptr [rbp - 0x38]
1000117e2:	call	0x10001972e ## symbol stub for: _fwrite
1000117e7:	cmp	rax, rbx
1000117ea:	jne	0x10001182b
1000117ec:	add	r12, rbx
1000117ef:	cmp	r13, -0x1
1000117f3:	je	0x1000117a5
1000117f5:	cmp	r12, r13
1000117f8:	jb	0x1000117a5
1000117fa:	jmp	0x10001181f
1000117fc:	mov	eax, 0x4
100011801:	jmp	0x100011858
100011803:	mov	rdi, qword ptr [rbp - 0x30]
100011807:	call	0x1000196e0 ## symbol stub for: _ferror
10001180c:	test	eax, eax
10001180e:	je	0x10001181f
100011810:	mov	rdi, r15
100011813:	call	0x100019716 ## symbol stub for: _free
100011818:	mov	eax, 0xb
10001181d:	jmp	0x100011858
10001181f:	mov	rdi, r15
100011822:	call	0x100019716 ## symbol stub for: _free
100011827:	xor	eax, eax
100011829:	jmp	0x100011858
10001182b:	mov	rdi, r15
10001182e:	call	0x100019716 ## symbol stub for: _free
100011833:	lea	rax, [rip + 0x196f6]
10001183a:	mov	rcx, qword ptr [rax]
10001183d:	lea	rdi, [rip + 0x11c4a] ## literal pool for: " fcopy: write error\n"
100011844:	mov	esi, 0x14
100011849:	mov	edx, 0x1
10001184e:	call	0x10001972e ## symbol stub for: _fwrite
100011853:	mov	eax, 0xa
100011858:	add	rsp, 0x18
10001185c:	pop	rbx
10001185d:	pop	r12
10001185f:	pop	r13
100011861:	pop	r14
100011863:	pop	r15
100011865:	pop	rbp
100011866:	ret
100011867:	push	rbp
100011868:	mov	rbp, rsp
10001186b:	push	rbx
10001186c:	sub	rsp, 0x98
100011873:	lea	rbx, [rbp - 0x98]
10001187a:	mov	rsi, rbx
10001187d:	call	0x10001980c ## symbol stub for: _stat$INODE64
100011882:	xor	ecx, ecx
100011884:	test	eax, eax
100011886:	movzx	eax, word ptr [rbx + 0x4]
10001188a:	cmovne	eax, ecx
10001188d:	add	rsp, 0x98
100011894:	pop	rbx
100011895:	pop	rbp
100011896:	ret
100011897:	push	rbp
100011898:	mov	rbp, rsp
10001189b:	movzx	esi, si
10001189e:	pop	rbp
10001189f:	jmp	0x1000196b0 ## symbol stub for: _chmod
1000118a4:	push	rbp
1000118a5:	mov	rbp, rsp
1000118a8:	push	r14
1000118aa:	push	rbx
1000118ab:	lea	rax, [rip + 0x17efe]
1000118b2:	mov	r14, qword ptr [rax]
1000118b5:	test	r14, r14
1000118b8:	je	0x100011910
1000118ba:	mov	rdi, r14
1000118bd:	call	0x100019830 ## symbol stub for: _strlen
1000118c2:	lea	rdi, [rax + 0xc]
1000118c6:	call	0x100019758 ## symbol stub for: _malloc
1000118cb:	test	rax, rax
1000118ce:	je	0x10001193f
1000118d0:	mov	rbx, rax
1000118d3:	mov	rdi, rax
1000118d6:	mov	rsi, r14
1000118d9:	call	0x100019824 ## symbol stub for: _strcpy
1000118de:	cmp	byte ptr [rbx], 0x0
1000118e1:	je	0x1000118f9
1000118e3:	mov	rdi, rbx
1000118e6:	call	0x100019830 ## symbol stub for: _strlen
1000118eb:	mov	r14, -0x1
1000118f2:	cmp	byte ptr [rax + rbx - 0x1], 0x2f
1000118f7:	je	0x10001192b
1000118f9:	mov	rdi, rbx
1000118fc:	call	0x100019830 ## symbol stub for: _strlen
100011901:	mov	word ptr [rbx + rax], 0x2f
100011907:	mov	r14, -0x1
10001190e:	jmp	0x10001192b
100011910:	mov	r14d, 0xc
100011916:	mov	edi, 0xc
10001191b:	call	0x100019758 ## symbol stub for: _malloc
100011920:	test	rax, rax
100011923:	je	0x10001193f
100011925:	mov	rbx, rax
100011928:	mov	byte ptr [rax], 0x0
10001192b:	lea	rsi, [rip + 0xb44c] ## literal pool for: "ziXXXXXX"
100011932:	mov	rdi, rbx
100011935:	mov	rdx, r14
100011938:	call	0x10001968c ## symbol stub for: ___strcat_chk
10001193d:	jmp	0x100011941
10001193f:	xor	ebx, ebx
100011941:	mov	rax, rbx
100011944:	pop	rbx
100011945:	pop	r14
100011947:	pop	rbp
100011948:	ret
100011949:	push	rbp
10001194a:	mov	rbp, rsp
10001194d:	push	r15
10001194f:	push	r14
100011951:	push	r13
100011953:	push	r12
100011955:	push	rbx
100011956:	sub	rsp, 0x38
10001195a:	mov	rbx, rdi
10001195d:	mov	edi, 0x4000
100011962:	call	0x100019758 ## symbol stub for: _malloc
100011967:	mov	ecx, 0x4
10001196c:	test	rax, rax
10001196f:	je	0x100012110
100011975:	lea	rcx, [rip + 0x17e18]
10001197c:	cmp	dword ptr [rcx], 0x0
10001197f:	je	0x10001199b
100011981:	lea	rcx, [rip + 0x17d88]
100011988:	cmp	dword ptr [rcx], 0x0
10001198b:	jne	0x10001199b
10001198d:	lea	rcx, [rip + 0x17d6c]
100011994:	mov	qword ptr [rcx], -0x1
10001199b:	lea	rcx, [rip + 0x17d0e]
1000119a2:	mov	r14d, dword ptr [rcx]
1000119a5:	cmp	r14d, 0x2
1000119a9:	sete	cl
1000119ac:	cmp	rbx, -0x2
1000119b0:	sete	dl
1000119b3:	and	dl, cl
1000119b5:	mov	byte ptr [rbp - 0x2b], dl
1000119b8:	cmp	dl, 0x1
1000119bb:	mov	qword ptr [rbp - 0x38], rax
1000119bf:	mov	qword ptr [rbp - 0x50], rbx
1000119c3:	jne	0x1000119ec
1000119c5:	lea	rax, [rip + 0x17e34]
1000119cc:	mov	rdi, qword ptr [rax]
1000119cf:	call	0x100019728 ## symbol stub for: _ftello
1000119d4:	mov	qword ptr [rbp - 0x58], rax
1000119d8:	xor	eax, eax
1000119da:	mov	dword ptr [rbp - 0x30], eax
1000119dd:	lea	rcx, [rip + 0x17cf4]
1000119e4:	mov	dword ptr [rcx], eax
1000119e6:	mov	byte ptr [rbp - 0x29], 0x1
1000119ea:	jmp	0x100011a14
1000119ec:	lea	rax, [rip + 0x17ce5]
1000119f3:	mov	dword ptr [rax], 0x0
1000119f9:	cmp	rbx, -0x1
1000119fd:	sete	byte ptr [rbp - 0x29]
100011a01:	test	rbx, rbx
100011a04:	je	0x1000120d6
100011a0a:	xor	eax, eax
100011a0c:	mov	qword ptr [rbp - 0x58], rax
100011a10:	mov	rbx, qword ptr [rbp - 0x50]
100011a14:	cmp	rbx, -0x2
100011a18:	setne	al
100011a1b:	cmp	r14d, 0x2
100011a1f:	setne	cl
100011a22:	or	cl, al
100011a24:	mov	byte ptr [rbp - 0x2a], cl
100011a27:	xor	eax, eax
100011a29:	mov	qword ptr [rbp - 0x48], rax
100011a2d:	mov	r15, qword ptr [rbp - 0x50]
100011a31:	mov	rax, qword ptr [rbp - 0x48]
100011a35:	sub	r15, rax
100011a38:	mov	qword ptr [rbp - 0x40], rax
100011a3c:	mov	eax, 0x4000
100011a41:	cmp	r15, rax
100011a44:	mov	r13d, 0x4000
100011a4a:	cmovb	r13, r15
100011a4e:	cmp	byte ptr [rbp - 0x29], 0x0
100011a52:	cmovne	r13, rax
100011a56:	lea	rbx, [rip + 0x17da3]
100011a5d:	mov	rdi, qword ptr [rbx]
100011a60:	call	0x100019728 ## symbol stub for: _ftello
100011a65:	mov	r14, rax
100011a68:	mov	rcx, qword ptr [rbx]
100011a6b:	mov	esi, 0x1
100011a70:	mov	rdi, qword ptr [rbp - 0x38]
100011a74:	mov	rdx, r13
100011a77:	call	0x100019710 ## symbol stub for: _fread
100011a7c:	test	rax, rax
100011a7f:	je	0x1000120a2
100011a85:	mov	r12, rax
100011a88:	cmp	byte ptr [rbp - 0x2b], 0x0
100011a8c:	je	0x100011c9b
100011a92:	xor	eax, eax
100011a94:	lea	rcx, [rip + 0x17c45]
100011a9b:	mov	qword ptr [rcx], rax
100011a9e:	lea	rcx, [rip + 0x17c43]
100011aa5:	mov	qword ptr [rcx], rax
100011aa8:	lea	rcx, [rip + 0x17c41]
100011aaf:	mov	qword ptr [rcx], rax
100011ab2:	mov	r13, qword ptr [rbp - 0x38]
100011ab6:	cmp	byte ptr [r13], 0x50
100011abb:	jne	0x100011bf6
100011ac1:	cmp	byte ptr [r13 + 0x1], 0x4b
100011ac6:	jne	0x100011bf6
100011acc:	cmp	byte ptr [r13 + 0x2], 0x7
100011ad1:	jne	0x100011bf6
100011ad7:	cmp	byte ptr [r13 + 0x3], 0x8
100011adc:	jne	0x100011bf6
100011ae2:	lea	rax, [rip + 0x17bef]
100011ae9:	mov	dword ptr [rax], 0x0
100011aef:	lea	rax, [rip + 0x17caa]
100011af6:	cmp	dword ptr [rax], 0x0
100011af9:	je	0x100011b40
100011afb:	cmp	r12, 0x18
100011aff:	jb	0x100011cab
100011b05:	mov	eax, dword ptr [r13 + 0x4]
100011b09:	lea	rcx, [rip + 0x17bd0]
100011b10:	mov	qword ptr [rcx], rax
100011b13:	mov	rax, qword ptr [r13 + 0x8]
100011b17:	lea	rcx, [rip + 0x17bca]
100011b1e:	mov	qword ptr [rcx], rax
100011b21:	mov	rcx, qword ptr [r13 + 0x10]
100011b25:	lea	rdx, [rip + 0x17bc4]
100011b2c:	mov	qword ptr [rdx], rcx
100011b2f:	mov	rcx, r14
100011b32:	sub	rcx, qword ptr [rbp - 0x58]
100011b36:	cmp	rcx, rax
100011b39:	jne	0x100011b84
100011b3b:	jmp	0x100011cb4
100011b40:	cmp	r12, 0x10
100011b44:	jb	0x100011cab
100011b4a:	mov	eax, dword ptr [r13 + 0x4]
100011b4e:	lea	rcx, [rip + 0x17b8b]
100011b55:	mov	qword ptr [rcx], rax
100011b58:	mov	eax, dword ptr [r13 + 0x8]
100011b5c:	lea	rcx, [rip + 0x17b85]
100011b63:	mov	qword ptr [rcx], rax
100011b66:	mov	ecx, dword ptr [r13 + 0xc]
100011b6a:	lea	rdx, [rip + 0x17b7f]
100011b71:	mov	qword ptr [rdx], rcx
100011b74:	mov	rcx, r14
100011b77:	sub	rcx, qword ptr [rbp - 0x58]
100011b7b:	cmp	rcx, rax
100011b7e:	je	0x100011d14
100011b84:	lea	rax, [rip + 0x17c75]
100011b8b:	mov	rdi, qword ptr [rax]
100011b8e:	add	r14, 0x4
100011b92:	mov	rsi, r14
100011b95:	xor	edx, edx
100011b97:	call	0x10001971c ## symbol stub for: _fseeko
100011b9c:	test	eax, eax
100011b9e:	je	0x100011bb1
100011ba0:	mov	edi, 0xb
100011ba5:	lea	rsi, [rip + 0x118f7] ## literal pool for: "seek failed reading descriptor"
100011bac:	call	0x100002e30
100011bb1:	mov	esi, 0x1
100011bb6:	mov	edx, 0x4
100011bbb:	mov	rdi, r13
100011bbe:	xor	ecx, ecx
100011bc0:	call	0x1000121b7
100011bc5:	cmp	rax, 0x4
100011bc9:	jne	0x1000120e3
100011bcf:	mov	rax, qword ptr [rbp - 0x40]
100011bd3:	add	rax, 0x4
100011bd7:	mov	qword ptr [rbp - 0x40], rax
100011bdb:	cmp	rax, -0x2
100011bdf:	setb	al
100011be2:	or	al, byte ptr [rbp - 0x29]
100011be5:	add	r15, -0x4
100011be9:	test	al, al
100011beb:	jne	0x100011a3c
100011bf1:	jmp	0x1000120d6
100011bf6:	test	r12, r12
100011bf9:	mov	rax, r12
100011bfc:	mov	ecx, 0x1
100011c01:	cmove	rax, rcx
100011c05:	xor	ebx, ebx
100011c07:	mov	r14, qword ptr [rbp - 0x40]
100011c0b:	mov	ecx, 0x1
100011c10:	mov	dl, byte ptr [rbp + rcx - 0x30]
100011c14:	mov	byte ptr [rbp + rcx - 0x31], dl
100011c18:	inc	rcx
100011c1b:	cmp	rcx, 0x4
100011c1f:	jne	0x100011c10
100011c21:	mov	cl, byte ptr [r13 + rbx]
100011c26:	mov	byte ptr [rbp - 0x2d], cl
100011c29:	cmp	byte ptr [rbp - 0x30], 0x50
100011c2d:	jne	0x100011c40
100011c2f:	cmp	byte ptr [rbp - 0x2f], 0x4b
100011c33:	jne	0x100011c40
100011c35:	cmp	cl, 0x8
100011c38:	jne	0x100011c40
100011c3a:	cmp	byte ptr [rbp - 0x2e], 0x7
100011c3e:	je	0x100011c50
100011c40:	inc	rbx
100011c43:	cmp	rbx, rax
100011c46:	jne	0x100011c0b
100011c48:	mov	rbx, r12
100011c4b:	jmp	0x100011d72
100011c50:	add	rbx, -0x3
100011c54:	lea	rax, [rip + 0x17ba5]
100011c5b:	mov	rdi, qword ptr [rax]
100011c5e:	lea	rax, [rip + 0x17c33]
100011c65:	mov	rsi, qword ptr [rax]
100011c68:	add	rsi, rbx
100011c6b:	xor	edx, edx
100011c6d:	call	0x10001971c ## symbol stub for: _fseeko
100011c72:	test	eax, eax
100011c74:	je	0x100011c87
100011c76:	mov	edi, 0xb
100011c7b:	lea	rsi, [rip + 0x11821] ## literal pool for: "seek failed reading descriptor"
100011c82:	call	0x100002e30
100011c87:	lea	rax, [rip + 0x17b72]
100011c8e:	mov	rdi, qword ptr [rax]
100011c91:	call	0x100019728 ## symbol stub for: _ftello
100011c96:	jmp	0x100011d72
100011c9b:	mov	r14, qword ptr [rbp - 0x48]
100011c9f:	mov	rbx, r12
100011ca2:	mov	r13, qword ptr [rbp - 0x38]
100011ca6:	jmp	0x100011d72
100011cab:	mov	r14, qword ptr [rbp - 0x40]
100011caf:	jmp	0x100011d88
100011cb4:	lea	rax, [rip + 0x17a1d]
100011cbb:	mov	dword ptr [rax], 0x1
100011cc1:	lea	rbx, [rip + 0x17b38]
100011cc8:	mov	rdi, qword ptr [rbx]
100011ccb:	call	0x100019728 ## symbol stub for: _ftello
100011cd0:	mov	rdi, qword ptr [rbx]
100011cd3:	add	r14, 0x18
100011cd7:	mov	rsi, r14
100011cda:	xor	edx, edx
100011cdc:	call	0x10001971c ## symbol stub for: _fseeko
100011ce1:	test	eax, eax
100011ce3:	mov	r14, qword ptr [rbp - 0x40]
100011ce7:	je	0x100011cfa
100011ce9:	mov	edi, 0xb
100011cee:	lea	rsi, [rip + 0x117ae] ## literal pool for: "seek failed reading descriptor"
100011cf5:	call	0x100002e30
100011cfa:	lea	rax, [rip + 0x17aff]
100011d01:	mov	rdi, qword ptr [rax]
100011d04:	call	0x100019728 ## symbol stub for: _ftello
100011d09:	mov	qword ptr [rbp - 0x58], rax
100011d0d:	mov	ebx, 0x18
100011d12:	jmp	0x100011d72
100011d14:	lea	rax, [rip + 0x179bd]
100011d1b:	mov	dword ptr [rax], 0x1
100011d21:	lea	rbx, [rip + 0x17ad8]
100011d28:	mov	rdi, qword ptr [rbx]
100011d2b:	call	0x100019728 ## symbol stub for: _ftello
100011d30:	mov	rdi, qword ptr [rbx]
100011d33:	add	r14, 0x10
100011d37:	mov	rsi, r14
100011d3a:	xor	edx, edx
100011d3c:	call	0x10001971c ## symbol stub for: _fseeko
100011d41:	test	eax, eax
100011d43:	mov	r14, qword ptr [rbp - 0x40]
100011d47:	je	0x100011d5a
100011d49:	mov	edi, 0xb
100011d4e:	lea	rsi, [rip + 0x1174e] ## literal pool for: "seek failed reading descriptor"
100011d55:	call	0x100002e30
100011d5a:	lea	rax, [rip + 0x17a9f]
100011d61:	mov	rdi, qword ptr [rax]
100011d64:	call	0x100019728 ## symbol stub for: _ftello
100011d69:	mov	qword ptr [rbp - 0x58], rax
100011d6d:	mov	ebx, 0x10
100011d72:	lea	rax, [rip + 0x1795f]
100011d79:	cmp	dword ptr [rax], 0x0
100011d7c:	mov	r12, rbx
100011d7f:	mov	rax, r14
100011d82:	mov	qword ptr [rbp - 0x48], r14
100011d86:	jne	0x100011dad
100011d88:	mov	esi, 0x1
100011d8d:	mov	rdi, r13
100011d90:	mov	rdx, r12
100011d93:	xor	ecx, ecx
100011d95:	call	0x1000121b7
100011d9a:	cmp	rax, r12
100011d9d:	jne	0x1000120e3
100011da3:	add	r14, r12
100011da6:	mov	rax, r14
100011da9:	mov	qword ptr [rbp - 0x48], r14
100011dad:	lea	rax, [rip + 0x179e0]
100011db4:	cmp	dword ptr [rax], 0x0
100011db7:	je	0x100011e9a
100011dbd:	lea	rax, [rip + 0x1794c]
100011dc4:	cmp	dword ptr [rax], 0x0
100011dc7:	jne	0x100011e9a
100011dcd:	lea	rax, [rip + 0x17924]
100011dd4:	mov	rcx, qword ptr [rax]
100011dd7:	test	rcx, rcx
100011dda:	jle	0x100011e49
100011ddc:	lea	rax, [rip + 0x17679]
100011de3:	cmp	dword ptr [rax], 0x0
100011de6:	lea	rax, [rip + 0x17913]
100011ded:	mov	rax, qword ptr [rax]
100011df0:	je	0x100011e2e
100011df2:	cmp	rax, -0x1
100011df6:	jne	0x100011e2e
100011df8:	lea	rbx, [rip + 0x19131]
100011dff:	mov	rsi, qword ptr [rbx]
100011e02:	mov	edi, 0x20
100011e07:	call	0x1000197a6 ## symbol stub for: _putc
100011e0c:	mov	rdi, qword ptr [rbx]
100011e0f:	call	0x1000196e6 ## symbol stub for: _fflush
100011e14:	lea	rcx, [rip + 0x178e5]
100011e1b:	mov	rax, qword ptr [rcx]
100011e1e:	inc	rax
100011e21:	mov	qword ptr [rcx], rax
100011e24:	lea	rcx, [rip + 0x178cd]
100011e2b:	mov	rcx, qword ptr [rcx]
100011e2e:	add	rax, r12
100011e31:	cmp	rcx, rax
100011e34:	mov	edx, 0x0
100011e39:	cmovle	rax, rdx
100011e3d:	lea	rdx, [rip + 0x178bc]
100011e44:	mov	qword ptr [rdx], rax
100011e47:	jmp	0x100011e53
100011e49:	lea	rax, [rip + 0x178b0]
100011e50:	mov	rax, qword ptr [rax]
100011e53:	lea	rdx, [rip + 0x17602]
100011e5a:	mov	edx, dword ptr [rdx]
100011e5c:	lea	rsi, [rip + 0x17849]
100011e63:	or	edx, dword ptr [rsi]
100011e65:	je	0x100011e9a
100011e67:	test	rcx, rcx
100011e6a:	je	0x100011e9a
100011e6c:	test	rax, rax
100011e6f:	jne	0x100011e9a
100011e71:	lea	rbx, [rip + 0x190b8]
100011e78:	mov	rsi, qword ptr [rbx]
100011e7b:	mov	edi, 0x2e
100011e80:	call	0x1000197a6 ## symbol stub for: _putc
100011e85:	mov	rdi, qword ptr [rbx]
100011e88:	call	0x1000196e6 ## symbol stub for: _fflush
100011e8d:	lea	rax, [rip + 0x17a38]
100011e94:	mov	dword ptr [rax], 0x1
100011e9a:	lea	rax, [rip + 0x17837]
100011ea1:	cmp	dword ptr [rax], 0x0
100011ea4:	jne	0x1000120d6
100011eaa:	mov	r15, qword ptr [rbp - 0x50]
100011eae:	cmp	r15, -0x1
100011eb2:	setne	al
100011eb5:	cmp	qword ptr [rbp - 0x48], r15
100011eb9:	setb	cl
100011ebc:	and	cl, al
100011ebe:	test	byte ptr [rbp - 0x2a], cl
100011ec1:	je	0x100011f9d
100011ec7:	lea	rax, [rip + 0x17932]
100011ece:	mov	rdi, qword ptr [rax]
100011ed1:	call	0x1000196da ## symbol stub for: _feof
100011ed6:	test	eax, eax
100011ed8:	je	0x100011f9d
100011ede:	lea	rax, [rip + 0x1794b]
100011ee5:	mov	rsi, qword ptr [rax]
100011ee8:	inc	rsi
100011eeb:	mov	qword ptr [rax], rsi
100011eee:	lea	rax, [rip + 0x17933]
100011ef5:	mov	rax, qword ptr [rax]
100011ef8:	cmp	rsi, rax
100011efb:	jae	0x1000120d6
100011f01:	dec	rax
100011f04:	lea	rcx, [rip + 0x178fd]
100011f0b:	mov	r14, qword ptr [rcx]
100011f0e:	cmp	rsi, rax
100011f11:	jne	0x100011f3d
100011f13:	mov	rdi, r14
100011f16:	call	0x100019830 ## symbol stub for: _strlen
100011f1b:	lea	rdi, [rax + 0x1]
100011f1f:	call	0x100019758 ## symbol stub for: _malloc
100011f24:	test	rax, rax
100011f27:	je	0x10001219e
100011f2d:	mov	r12, rax
100011f30:	mov	rdi, rax
100011f33:	mov	rsi, r14
100011f36:	call	0x100019824 ## symbol stub for: _strcpy
100011f3b:	jmp	0x100011f48
100011f3d:	mov	rdi, r14
100011f40:	call	0x1000127e1
100011f45:	mov	r12, rax
100011f48:	mov	r15, qword ptr [rbp - 0x50]
100011f4c:	lea	r13, [rip + 0x1775d]
100011f53:	lea	r14, [rip + 0x178a6]
100011f5a:	mov	rdi, qword ptr [r14]
100011f5d:	call	0x1000196ce ## symbol stub for: _fclose
100011f62:	mov	rdi, r12
100011f65:	lea	rsi, [rip + 0xa044] ## literal pool for: "r"
100011f6c:	call	0x1000196f8 ## symbol stub for: _fopen
100011f71:	mov	qword ptr [r14], rax
100011f74:	test	rax, rax
100011f77:	je	0x100011fb2
100011f79:	mov	ebx, dword ptr [r13]
100011f7d:	lea	rax, [rip + 0x1774c]
100011f84:	mov	r14, qword ptr [rax]
100011f87:	mov	rdi, r12
100011f8a:	call	0x100019716 ## symbol stub for: _free
100011f8f:	cmp	ebx, 0x2
100011f92:	jne	0x100011f9d
100011f94:	test	r14, r14
100011f97:	jne	0x100012129
100011f9d:	cmp	qword ptr [rbp - 0x48], r15
100011fa1:	setb	al
100011fa4:	or	al, byte ptr [rbp - 0x29]
100011fa7:	jne	0x100011a2d
100011fad:	jmp	0x1000120d6
100011fb2:	lea	rbx, [rip + 0x17877]
100011fb9:	cmp	dword ptr [r13], 0x1
100011fbe:	jne	0x100011fd1
100011fc0:	lea	rax, [rip + 0x17709]
100011fc7:	cmp	qword ptr [rax], 0x0
100011fcb:	jne	0x100012121
100011fd1:	mov	rdi, qword ptr [rbx]
100011fd4:	call	0x1000128e3
100011fd9:	cmp	eax, 0x2
100011fdc:	je	0x100012139
100011fe2:	cmp	eax, 0x9
100011fe5:	je	0x100012174
100011feb:	cmp	dword ptr [r13], 0x2
100011ff0:	jne	0x100012019
100011ff2:	lea	rax, [rip + 0x176d7]
100011ff9:	cmp	qword ptr [rax], 0x0
100011ffd:	je	0x100012019
100011fff:	lea	rdi, [rip + 0x114bc] ## literal pool for: "skipping split file: "
100012006:	mov	rsi, r12
100012009:	call	0x1000034f4
10001200e:	mov	rsi, qword ptr [rbx]
100012011:	inc	rsi
100012014:	mov	qword ptr [rbx], rsi
100012017:	jmp	0x10001201c
100012019:	mov	rsi, qword ptr [rbx]
10001201c:	lea	rax, [rip + 0x17805]
100012023:	mov	rax, qword ptr [rax]
100012026:	dec	rax
100012029:	cmp	rsi, rax
10001202c:	jne	0x100012069
10001202e:	lea	rax, [rip + 0x177d3]
100012035:	mov	r14, qword ptr [rax]
100012038:	mov	rdi, r14
10001203b:	call	0x100019830 ## symbol stub for: _strlen
100012040:	lea	rdi, [rax + 0x1]
100012044:	call	0x100019758 ## symbol stub for: _malloc
100012049:	test	rax, rax
10001204c:	je	0x10001219e
100012052:	mov	r12, rax
100012055:	mov	rdi, rax
100012058:	mov	rsi, r14
10001205b:	call	0x100019824 ## symbol stub for: _strcpy
100012060:	lea	rbx, [rip + 0x177c9]
100012067:	jmp	0x10001207b
100012069:	lea	rax, [rip + 0x18ee8]
100012070:	mov	rdi, qword ptr [rax]
100012073:	call	0x1000127e1
100012078:	mov	r12, rax
10001207b:	mov	rdi, r12
10001207e:	lea	rsi, [rip + 0x9f2b] ## literal pool for: "r"
100012085:	call	0x1000196f8 ## symbol stub for: _fopen
10001208a:	lea	rcx, [rip + 0x1776f]
100012091:	mov	qword ptr [rcx], rax
100012094:	test	rax, rax
100012097:	je	0x100011fb9
10001209d:	jmp	0x100011f79
1000120a2:	test	r13, r13
1000120a5:	je	0x1000120b3
1000120a7:	lea	rax, [rip + 0x17602]
1000120ae:	cmp	dword ptr [rax], 0x2
1000120b1:	je	0x1000120c6
1000120b3:	lea	rax, [rip + 0x17746]
1000120ba:	mov	rdi, qword ptr [rax]
1000120bd:	call	0x1000196e0 ## symbol stub for: _ferror
1000120c2:	test	eax, eax
1000120c4:	je	0x1000120d6
1000120c6:	mov	rdi, qword ptr [rbp - 0x38]
1000120ca:	call	0x100019716 ## symbol stub for: _free
1000120cf:	mov	ecx, 0xb
1000120d4:	jmp	0x100012110
1000120d6:	mov	rdi, qword ptr [rbp - 0x38]
1000120da:	call	0x100019716 ## symbol stub for: _free
1000120df:	xor	ecx, ecx
1000120e1:	jmp	0x100012110
1000120e3:	mov	rdi, r13
1000120e6:	call	0x100019716 ## symbol stub for: _free
1000120eb:	lea	rax, [rip + 0x18e3e]
1000120f2:	mov	rcx, qword ptr [rax]
1000120f5:	lea	rdi, [rip + 0x11392] ## literal pool for: " fcopy: write error\n"
1000120fc:	mov	esi, 0x14
100012101:	mov	edx, 0x1
100012106:	call	0x10001972e ## symbol stub for: _fwrite
10001210b:	mov	ecx, 0xa
100012110:	mov	eax, ecx
100012112:	add	rsp, 0x38
100012116:	pop	rbx
100012117:	pop	r12
100012119:	pop	r13
10001211b:	pop	r14
10001211d:	pop	r15
10001211f:	pop	rbp
100012120:	ret
100012121:	mov	rdi, r12
100012124:	call	0x100019716 ## symbol stub for: _free
100012129:	mov	rdi, qword ptr [rbp - 0x38]
10001212d:	call	0x100019716 ## symbol stub for: _free
100012132:	mov	ecx, 0x3
100012137:	jmp	0x100012110
100012139:	lea	r14, [rip + 0x8677] ## literal pool for: ""
100012140:	mov	rdi, r14
100012143:	mov	esi, 0x1
100012148:	call	0x100003300
10001214d:	lea	rdi, [rip + 0x1038e] ## literal pool for: "user ended reading - closing archive"
100012154:	mov	rsi, r14
100012157:	call	0x1000034f4
10001215c:	mov	rdi, r12
10001215f:	call	0x100019716 ## symbol stub for: _free
100012164:	mov	rdi, qword ptr [rbp - 0x38]
100012168:	call	0x100019716 ## symbol stub for: _free
10001216d:	mov	ecx, 0x2
100012172:	jmp	0x100012110
100012174:	lea	rdi, [rip + 0x10350] ## literal pool for: "could not find split: "
10001217b:	mov	rsi, r12
10001217e:	call	0x1000034f4
100012183:	mov	rdi, r12
100012186:	call	0x100019716 ## symbol stub for: _free
10001218b:	mov	rdi, qword ptr [rbp - 0x38]
10001218f:	call	0x100019716 ## symbol stub for: _free
100012194:	mov	ecx, 0x9
100012199:	jmp	0x100012110
10001219e:	lea	rdi, [rip + 0x10a38] ## literal pool for: "reading archive: "
1000121a5:	mov	rsi, r14
1000121a8:	call	0x1000034f4
1000121ad:	mov	ecx, 0x4
1000121b2:	jmp	0x100012110
1000121b7:	push	rbp
1000121b8:	mov	rbp, rsp
1000121bb:	push	r15
1000121bd:	push	r14
1000121bf:	push	r13
1000121c1:	push	r12
1000121c3:	push	rbx
1000121c4:	sub	rsp, 0x18
1000121c8:	mov	r14d, ecx
1000121cb:	mov	rbx, rdx
1000121ce:	mov	qword ptr [rbp - 0x38], rdi
1000121d2:	imul	rbx, rsi
1000121d6:	cmp	ecx, 0x1
1000121d9:	jne	0x100012227
1000121db:	lea	rax, [rip + 0x176de]
1000121e2:	mov	qword ptr [rax], 0x0
1000121e9:	lea	rax, [rip + 0x17608]
1000121f0:	mov	rax, qword ptr [rax]
1000121f3:	lea	rcx, [rip + 0x1768e]
1000121fa:	mov	qword ptr [rcx], rax
1000121fd:	lea	rax, [rip + 0x1764c]
100012204:	mov	rax, qword ptr [rax]
100012207:	lea	rcx, [rip + 0x1763a]
10001220e:	mov	qword ptr [rcx], rax
100012211:	lea	rax, [rip + 0x17680]
100012218:	mov	rax, qword ptr [rax]
10001221b:	lea	rcx, [rip + 0x1766e]
100012222:	mov	qword ptr [rcx], rax
100012225:	jmp	0x100012231
100012227:	lea	rax, [rip + 0x1766a]
10001222e:	mov	rax, qword ptr [rax]
100012231:	lea	rcx, [rip + 0x17670]
100012238:	mov	rcx, qword ptr [rcx]
10001223b:	mov	rdi, rcx
10001223e:	sub	rdi, rax
100012241:	test	rcx, rcx
100012244:	cmove	rdi, rbx
100012248:	lea	ecx, [r14 - 0x1]
10001224c:	xor	edx, edx
10001224e:	mov	dword ptr [rbp - 0x2c], ecx
100012251:	cmp	ecx, 0x3
100012254:	cmovae	rdx, rdi
100012258:	cmp	rbx, rdi
10001225b:	cmovbe	rdx, rbx
10001225f:	cmp	r14d, 0x2
100012263:	jne	0x10001229d
100012265:	lea	rcx, [rip + 0x17224]
10001226c:	cmp	qword ptr [rcx], -0x1
100012270:	jne	0x100012289
100012272:	lea	rdi, [rip + 0x175d7]
100012279:	mov	rdi, qword ptr [rdi]
10001227c:	mov	qword ptr [rcx], rdi
10001227f:	lea	rcx, [rip + 0x175d2]
100012286:	mov	qword ptr [rcx], rax
100012289:	lea	rcx, [rip + 0x175d0]
100012290:	inc	qword ptr [rcx]
100012293:	lea	rcx, [rip + 0x175ce]
10001229a:	inc	qword ptr [rcx]
10001229d:	test	rdx, rdx
1000122a0:	je	0x1000122dc
1000122a2:	lea	rax, [rip + 0x1754f]
1000122a9:	mov	rcx, qword ptr [rax]
1000122ac:	mov	rdi, qword ptr [rbp - 0x38]
1000122b0:	call	0x10001972e ## symbol stub for: _fwrite
1000122b5:	mov	r13, rax
1000122b8:	mov	r12, rbx
1000122bb:	sub	r12, rax
1000122be:	lea	rcx, [rip + 0x175d3]
1000122c5:	add	rax, qword ptr [rcx]
1000122c8:	mov	qword ptr [rcx], rax
1000122cb:	test	r14d, r14d
1000122ce:	jne	0x1000122e2
1000122d0:	lea	rcx, [rip + 0x175e9]
1000122d7:	add	qword ptr [rcx], r13
1000122da:	jmp	0x1000122e2
1000122dc:	xor	r13d, r13d
1000122df:	mov	r12, rbx
1000122e2:	test	r12, r12
1000122e5:	je	0x100012717
1000122eb:	lea	rcx, [rip + 0x175b2]
1000122f2:	mov	ecx, dword ptr [rcx]
1000122f4:	test	ecx, ecx
1000122f6:	je	0x1000123b8
1000122fc:	lea	rdx, [rip + 0x175b5]
100012303:	add	qword ptr [rdx], rax
100012306:	cmp	ecx, 0x1
100012309:	mov	qword ptr [rbp - 0x40], rbx
10001230d:	jne	0x10001233c
10001230f:	lea	rax, [rip + 0x174e2]
100012316:	mov	rdi, qword ptr [rax]
100012319:	call	0x1000196e0 ## symbol stub for: _ferror
10001231e:	test	eax, eax
100012320:	je	0x100012387
100012322:	lea	rsi, [rip + 0x11475] ## literal pool for: "Could not write split"
100012329:	mov	edi, 0xe
10001232e:	call	0x100002e30
100012333:	lea	rax, [rip + 0x1756a]
10001233a:	mov	ecx, dword ptr [rax]
10001233c:	cmp	ecx, 0x2
10001233f:	jne	0x100012382
100012341:	lea	rax, [rip + 0x174b0]
100012348:	mov	rdi, qword ptr [rax]
10001234b:	call	0x1000196e0 ## symbol stub for: _ferror
100012350:	test	eax, eax
100012352:	je	0x1000123e5
100012358:	lea	rax, [rip + 0x17539]
10001235f:	cmp	qword ptr [rax], 0xffff
100012366:	ja	0x1000123e5
100012368:	lea	rsi, [rip + 0x11445] ## literal pool for: "Not enough space to write split"
10001236f:	mov	edi, 0xe
100012374:	call	0x100002e30
100012379:	lea	rax, [rip + 0x17524]
100012380:	mov	ecx, dword ptr [rax]
100012382:	cmp	ecx, 0x1
100012385:	jne	0x1000123e5
100012387:	lea	rax, [rip + 0x174ba]
10001238e:	mov	rax, qword ptr [rax]
100012391:	lea	rcx, [rip + 0x174b8]
100012398:	mov	rdi, qword ptr [rcx]
10001239b:	cmp	rax, rdi
10001239e:	jne	0x1000123ef
1000123a0:	lea	rcx, [rip + 0x17449]
1000123a7:	mov	rcx, qword ptr [rcx]
1000123aa:	lea	rdx, [rip + 0x174cf]
1000123b1:	mov	qword ptr [rdx], rcx
1000123b4:	xor	ecx, ecx
1000123b6:	jmp	0x100012430
1000123b8:	lea	rax, [rip + 0x17439]
1000123bf:	mov	rdi, qword ptr [rax]
1000123c2:	call	0x1000196e0 ## symbol stub for: _ferror
1000123c7:	test	eax, eax
1000123c9:	je	0x100012717
1000123cf:	lea	rsi, [rip + 0x10f33] ## literal pool for: "write error on zip file"
1000123d6:	mov	edi, 0xe
1000123db:	call	0x100002e30
1000123e0:	jmp	0x100012717
1000123e5:	lea	rax, [rip + 0x17464]
1000123ec:	mov	rdi, qword ptr [rax]
1000123ef:	lea	r14, [rip + 0x17402]
1000123f6:	mov	rsi, qword ptr [r14]
1000123f9:	lea	rbx, [rip + 0x173f0]
100012400:	mov	rdx, qword ptr [rbx]
100012403:	call	0x10001374d
100012408:	xor	r15d, r15d
10001240b:	mov	qword ptr [r14], r15
10001240e:	mov	rdi, qword ptr [rbx]
100012411:	call	0x100019716 ## symbol stub for: _free
100012416:	mov	qword ptr [rbx], r15
100012419:	lea	rax, [rip + 0x17430]
100012420:	mov	rax, qword ptr [rax]
100012423:	lea	rcx, [rip + 0x1747a]
10001242a:	cmp	dword ptr [rcx], 0x2
10001242d:	sete	cl
100012430:	mov	r14, qword ptr [rbp - 0x38]
100012434:	lea	rdx, [rip + 0x17425]
10001243b:	xor	esi, esi
10001243d:	mov	qword ptr [rdx], rsi
100012440:	lea	rdx, [rip + 0x17451]
100012447:	mov	qword ptr [rdx], rsi
10001244a:	inc	rax
10001244d:	lea	rdx, [rip + 0x173fc]
100012454:	mov	qword ptr [rdx], rax
100012457:	test	cl, cl
100012459:	je	0x100012483
10001245b:	lea	rax, [rip + 0x1744e]
100012462:	cmp	dword ptr [rax], 0x0
100012465:	je	0x100012483
100012467:	lea	rbx, [rip + 0x18ac2]
10001246e:	mov	rsi, qword ptr [rbx]
100012471:	mov	edi, 0x7
100012476:	call	0x1000197a6 ## symbol stub for: _putc
10001247b:	mov	rdi, qword ptr [rbx]
10001247e:	call	0x1000196e6 ## symbol stub for: _fflush
100012483:	lea	r15, [rip + 0x17366]
10001248a:	lea	rax, [rip + 0x17413]
100012491:	cmp	dword ptr [rax], 0x2
100012494:	jne	0x1000124a5
100012496:	lea	rax, [rip + 0x173b3]
10001249d:	mov	rdi, qword ptr [rax]
1000124a0:	call	0x10001318a
1000124a5:	lea	rax, [rip + 0x17304]
1000124ac:	mov	rbx, qword ptr [rax]
1000124af:	test	rbx, rbx
1000124b2:	je	0x100012524
1000124b4:	mov	rdi, rbx
1000124b7:	call	0x100019830 ## symbol stub for: _strlen
1000124bc:	lea	rdi, [rax + 0xc]
1000124c0:	call	0x100019758 ## symbol stub for: _malloc
1000124c5:	mov	qword ptr [r15], rax
1000124c8:	test	rax, rax
1000124cb:	jne	0x1000124eb
1000124cd:	mov	edi, 0x4
1000124d2:	lea	rsi, [rip + 0xa88c] ## literal pool for: "allocating temp filename"
1000124d9:	call	0x100002e30
1000124de:	mov	rax, qword ptr [r15]
1000124e1:	lea	rcx, [rip + 0x172c8]
1000124e8:	mov	rbx, qword ptr [rcx]
1000124eb:	mov	rdi, rax
1000124ee:	mov	rsi, rbx
1000124f1:	call	0x100019824 ## symbol stub for: _strcpy
1000124f6:	mov	rbx, qword ptr [r15]
1000124f9:	cmp	byte ptr [rbx], 0x0
1000124fc:	je	0x100012511
1000124fe:	mov	rdi, rbx
100012501:	call	0x100019830 ## symbol stub for: _strlen
100012506:	cmp	byte ptr [rax + rbx - 0x1], 0x2f
10001250b:	je	0x1000125ac
100012511:	mov	rdi, rbx
100012514:	call	0x100019830 ## symbol stub for: _strlen
100012519:	mov	word ptr [rbx + rax], 0x2f
10001251f:	jmp	0x1000125ac
100012524:	lea	rax, [rip + 0x18a2d]
10001252b:	mov	rbx, qword ptr [rax]
10001252e:	mov	rdi, rbx
100012531:	call	0x100019830 ## symbol stub for: _strlen
100012536:	lea	rdi, [rax + 0xc]
10001253a:	call	0x100019758 ## symbol stub for: _malloc
10001253f:	mov	qword ptr [r15], rax
100012542:	test	rax, rax
100012545:	jne	0x100012565
100012547:	mov	edi, 0x4
10001254c:	lea	rsi, [rip + 0xa812] ## literal pool for: "allocating temp filename"
100012553:	call	0x100002e30
100012558:	mov	rax, qword ptr [r15]
10001255b:	lea	rcx, [rip + 0x189f6]
100012562:	mov	rbx, qword ptr [rcx]
100012565:	mov	rdi, rax
100012568:	mov	rsi, rbx
10001256b:	call	0x100019824 ## symbol stub for: _strcpy
100012570:	mov	r14, qword ptr [r15]
100012573:	mov	rdi, r14
100012576:	call	0x100019830 ## symbol stub for: _strlen
10001257b:	mov	ecx, eax
10001257d:	test	eax, eax
10001257f:	mov	edx, 0x0
100012584:	cmovns	rax, rdx
100012588:	test	ecx, ecx
10001258a:	jle	0x1000125a1
10001258c:	lea	rdx, [rcx - 0x1]
100012590:	cmp	byte ptr [r14 + rcx - 0x1], 0x2f
100012596:	mov	rcx, rdx
100012599:	jne	0x100012588
10001259b:	inc	rdx
10001259e:	mov	rax, rdx
1000125a1:	cdqe
1000125a3:	mov	byte ptr [r14 + rax], 0x0
1000125a8:	mov	r14, qword ptr [rbp - 0x38]
1000125ac:	mov	rbx, qword ptr [r15]
1000125af:	mov	rdi, rbx
1000125b2:	call	0x100019830 ## symbol stub for: _strlen
1000125b7:	movabs	rcx, 0x585858585858697a
1000125c1:	mov	qword ptr [rbx + rax], rcx
1000125c5:	mov	byte ptr [rbx + rax + 0x8], 0x0
1000125ca:	mov	rdi, qword ptr [r15]
1000125cd:	call	0x100019770 ## symbol stub for: _mkstemp
1000125d2:	mov	ebx, eax
1000125d4:	cmp	eax, -0x1
1000125d7:	jne	0x1000125e6
1000125d9:	mov	rsi, qword ptr [r15]
1000125dc:	mov	edi, 0xa
1000125e1:	call	0x100002e30
1000125e6:	mov	edi, ebx
1000125e8:	lea	rsi, [rip + 0xa287] ## literal pool for: "w"
1000125ef:	call	0x1000196d4 ## symbol stub for: _fdopen
1000125f4:	lea	rcx, [rip + 0x171fd]
1000125fb:	mov	qword ptr [rcx], rax
1000125fe:	test	rax, rax
100012601:	jne	0x10001261a
100012603:	mov	rsi, qword ptr [r15]
100012606:	mov	edi, 0xa
10001260b:	call	0x100002e30
100012610:	lea	rax, [rip + 0x171e1]
100012617:	mov	rax, qword ptr [rax]
10001261a:	lea	rdi, [r14 + r13]
10001261e:	mov	esi, 0x1
100012623:	mov	rdx, r12
100012626:	mov	rcx, rax
100012629:	call	0x10001972e ## symbol stub for: _fwrite
10001262e:	lea	rcx, [rip + 0x17263]
100012635:	add	qword ptr [rcx], rax
100012638:	cmp	dword ptr [rbp - 0x2c], 0x3
10001263c:	jb	0x100012648
10001263e:	lea	rcx, [rip + 0x1727b]
100012645:	add	qword ptr [rcx], rax
100012648:	add	r13, rax
10001264b:	cmp	r12, rax
10001264e:	jbe	0x100012685
100012650:	lea	rax, [rip + 0x1724d]
100012657:	cmp	dword ptr [rax], 0x2
10001265a:	jne	0x100012674
10001265c:	lea	rdi, [rip + 0x11171] ## literal pool for: "Not enough room on disk"
100012663:	lea	rsi, [rip + 0x814d] ## literal pool for: ""
10001266a:	call	0x1000034f4
10001266f:	jmp	0x10001248a
100012674:	lea	rsi, [rip + 0x11159] ## literal pool for: "Not enough room on disk"
10001267b:	mov	edi, 0xe
100012680:	call	0x100002e30
100012685:	cmp	dword ptr [rbp - 0x2c], 0x2
100012689:	ja	0x100012713
10001268f:	lea	rax, [rip + 0x1720e]
100012696:	cmp	dword ptr [rax], 0x1
100012699:	lea	rbx, [rip + 0x171e8]
1000126a0:	jne	0x1000126d7
1000126a2:	mov	rsi, qword ptr [rbx]
1000126a5:	test	rsi, rsi
1000126a8:	je	0x1000126d7
1000126aa:	lea	rax, [rip + 0x17197]
1000126b1:	mov	rdi, qword ptr [rax]
1000126b4:	lea	rax, [rip + 0x17195]
1000126bb:	cmp	rdi, qword ptr [rax]
1000126be:	je	0x1000126d7
1000126c0:	lea	r14, [rip + 0x171b9]
1000126c7:	mov	rdx, qword ptr [r14]
1000126ca:	call	0x10001374d
1000126cf:	mov	rdi, qword ptr [r14]
1000126d2:	call	0x100019716 ## symbol stub for: _free
1000126d7:	mov	rax, qword ptr [r15]
1000126da:	lea	rcx, [rip + 0x1719f]
1000126e1:	mov	qword ptr [rcx], rax
1000126e4:	lea	rax, [rip + 0x1710d]
1000126eb:	mov	rax, qword ptr [rax]
1000126ee:	mov	qword ptr [rbx], rax
1000126f1:	lea	rax, [rip + 0x17198]
1000126f8:	mov	qword ptr [rax], 0x0
1000126ff:	lea	rax, [rip + 0x1714a]
100012706:	mov	rax, qword ptr [rax]
100012709:	lea	rcx, [rip + 0x17138]
100012710:	mov	qword ptr [rcx], rax
100012713:	mov	rbx, qword ptr [rbp - 0x40]
100012717:	lea	rax, [rip + 0x16ff2]
10001271e:	cmp	dword ptr [rax], 0x0
100012721:	je	0x1000127cf
100012727:	lea	r12, [rip + 0x16fca]
10001272e:	mov	rcx, qword ptr [r12]
100012732:	lea	r14, [rip + 0x16fc7]
100012739:	mov	rax, qword ptr [r14]
10001273c:	test	rcx, rcx
10001273f:	jle	0x100012795
100012741:	cmp	rax, -0x1
100012745:	jne	0x10001276f
100012747:	lea	r15, [rip + 0x187e2]
10001274e:	mov	rsi, qword ptr [r15]
100012751:	mov	edi, 0x20
100012756:	call	0x1000197a6 ## symbol stub for: _putc
10001275b:	mov	rdi, qword ptr [r15]
10001275e:	call	0x1000196e6 ## symbol stub for: _fflush
100012763:	mov	qword ptr [r14], 0x1
10001276a:	mov	eax, 0x1
10001276f:	cmp	rbx, 0x3e8
100012776:	jbe	0x100012791
100012778:	inc	rax
10001277b:	mov	rcx, qword ptr [r12]
10001277f:	imul	rbx, rax
100012783:	xor	edx, edx
100012785:	cmp	rcx, rbx
100012788:	cmovle	rax, rdx
10001278c:	mov	qword ptr [r14], rax
10001278f:	jmp	0x100012795
100012791:	mov	rcx, qword ptr [r12]
100012795:	test	rcx, rcx
100012798:	je	0x1000127cf
10001279a:	test	rax, rax
10001279d:	jne	0x1000127cf
10001279f:	mov	qword ptr [r14], 0x1
1000127a6:	lea	rbx, [rip + 0x18783]
1000127ad:	mov	rsi, qword ptr [rbx]
1000127b0:	mov	edi, 0x2e
1000127b5:	call	0x1000197a6 ## symbol stub for: _putc
1000127ba:	mov	rdi, qword ptr [rbx]
1000127bd:	call	0x1000196e6 ## symbol stub for: _fflush
1000127c2:	lea	rax, [rip + 0x17103]
1000127c9:	mov	dword ptr [rax], 0x1
1000127cf:	mov	rax, r13
1000127d2:	add	rsp, 0x18
1000127d6:	pop	rbx
1000127d7:	pop	r12
1000127d9:	pop	r13
1000127db:	pop	r14
1000127dd:	pop	r15
1000127df:	pop	rbp
1000127e0:	ret
1000127e1:	push	rbp
1000127e2:	mov	rbp, rsp
1000127e5:	push	r15
1000127e7:	push	r14
1000127e9:	push	r12
1000127eb:	push	rbx
1000127ec:	sub	rsp, 0x10
1000127f0:	mov	rbx, rsi
1000127f3:	mov	r14, rdi
1000127f6:	inc	rbx
1000127f9:	lea	rax, [rip + 0x17028]
100012800:	cmp	rbx, qword ptr [rax]
100012803:	jne	0x10001283f
100012805:	mov	rdi, r14
100012808:	call	0x100019830 ## symbol stub for: _strlen
10001280d:	lea	rdi, [rax + 0x1]
100012811:	call	0x100019758 ## symbol stub for: _malloc
100012816:	mov	rbx, rax
100012819:	test	rax, rax
10001281c:	jne	0x10001282f
10001281e:	lea	rsi, [rip + 0x10f3a] ## literal pool for: "base path"
100012825:	mov	edi, 0x4
10001282a:	call	0x100002e30
10001282f:	mov	rdi, rbx
100012832:	mov	rsi, r14
100012835:	call	0x100019824 ## symbol stub for: _strcpy
10001283a:	jmp	0x1000128d3
10001283f:	cmp	rbx, 0x186a0
100012846:	jb	0x100012859
100012848:	lea	rsi, [rip + 0x10f1a] ## literal pool for: "More than 99999 splits needed"
10001284f:	mov	edi, 0x6
100012854:	call	0x100002e30
100012859:	lea	rcx, [rip + 0x10f27] ## literal pool for: "z%02lu"
100012860:	lea	r15, [rbp - 0x26]
100012864:	mov	edx, 0x6
100012869:	mov	rdi, r15
10001286c:	xor	esi, esi
10001286e:	mov	r8, rbx
100012871:	xor	eax, eax
100012873:	call	0x100019680 ## symbol stub for: ___sprintf_chk
100012878:	mov	rdi, r14
10001287b:	call	0x100019830 ## symbol stub for: _strlen
100012880:	mov	rbx, rax
100012883:	add	eax, -0x3
100012886:	movsxd	r12, eax
100012889:	mov	rdi, r15
10001288c:	call	0x100019830 ## symbol stub for: _strlen
100012891:	add	eax, ebx
100012893:	add	eax, -0x2
100012896:	movsxd	rdi, eax
100012899:	call	0x100019758 ## symbol stub for: _malloc
10001289e:	mov	rbx, rax
1000128a1:	test	rax, rax
1000128a4:	jne	0x1000128b7
1000128a6:	lea	rsi, [rip + 0x10c2b] ## literal pool for: "split path"
1000128ad:	mov	edi, 0x4
1000128b2:	call	0x100002e30
1000128b7:	mov	rdi, rbx
1000128ba:	mov	rsi, r14
1000128bd:	call	0x100019824 ## symbol stub for: _strcpy
1000128c2:	mov	byte ptr [rbx + r12], 0x0
1000128c7:	lea	rsi, [rbp - 0x26]
1000128cb:	mov	rdi, rbx
1000128ce:	call	0x100019812 ## symbol stub for: _strcat
1000128d3:	mov	rax, rbx
1000128d6:	add	rsp, 0x10
1000128da:	pop	rbx
1000128db:	pop	r12
1000128dd:	pop	r14
1000128df:	pop	r15
1000128e1:	pop	rbp
1000128e2:	ret
1000128e3:	push	rbp
1000128e4:	mov	rbp, rsp
1000128e7:	push	r15
1000128e9:	push	r14
1000128eb:	push	r13
1000128ed:	push	r12
1000128ef:	push	rbx
1000128f0:	push	rax
1000128f1:	mov	eax, 0x1448
1000128f6:	call	0x100009bb0
1000128fb:	sub	rsp, rax
1000128fe:	pop	rax
1000128ff:	mov	rsi, rdi
100012902:	mov	rax, qword ptr [rip + 0x11707] ## literal pool symbol address: ___stack_chk_guard
100012909:	mov	rax, qword ptr [rax]
10001290c:	mov	qword ptr [rbp - 0x30], rax
100012910:	lea	r14, [rip + 0x16ef1]
100012917:	mov	rdi, qword ptr [r14]
10001291a:	mov	qword ptr [rbp - 0x1458], rsi
100012921:	call	0x1000127e1
100012926:	mov	r12, rax
100012929:	mov	rbx, qword ptr [r14]
10001292c:	mov	rdi, rbx
10001292f:	call	0x100019830 ## symbol stub for: _strlen
100012934:	lea	rdi, [rax + 0x28]
100012938:	call	0x100019758 ## symbol stub for: _malloc
10001293d:	mov	r15, rax
100012940:	test	rax, rax
100012943:	jne	0x100012959
100012945:	lea	rsi, [rip + 0x10b8c] ## literal pool for: "split path"
10001294c:	mov	edi, 0x4
100012951:	call	0x100002e30
100012956:	mov	rbx, qword ptr [r14]
100012959:	mov	rdi, r15
10001295c:	mov	rsi, rbx
10001295f:	call	0x100019824 ## symbol stub for: _strcpy
100012964:	mov	rdi, r15
100012967:	call	0x100019830 ## symbol stub for: _strlen
10001296c:	inc	eax
10001296e:	movabs	rdx, 0x200000000801
100012978:	mov	ebx, eax
10001297a:	add	ebx, -0x2
10001297d:	js	0x1000129a3
10001297f:	mov	ecx, ebx
100012981:	mov	cl, byte ptr [r15 + rcx]
100012985:	dec	eax
100012987:	add	cl, -0x2f
10001298a:	cmp	cl, 0x2d
10001298d:	ja	0x100012978
10001298f:	movzx	ecx, cl
100012992:	bt	rdx, rcx
100012996:	jae	0x100012978
100012998:	movsxd	rcx, eax
10001299b:	mov	rax, r15
10001299e:	add	rax, rcx
1000129a1:	jmp	0x1000129a6
1000129a3:	mov	rax, r15
1000129a6:	mov	byte ptr [rax], 0x0
1000129a9:	mov	r13, qword ptr [r14]
1000129ac:	mov	rdi, r13
1000129af:	call	0x100019830 ## symbol stub for: _strlen
1000129b4:	lea	rdi, [rax + 0x1]
1000129b8:	call	0x100019758 ## symbol stub for: _malloc
1000129bd:	mov	qword ptr [rbp - 0x1450], rax
1000129c4:	test	rax, rax
1000129c7:	jne	0x1000129dd
1000129c9:	lea	rsi, [rip + 0x10b08] ## literal pool for: "split path"
1000129d0:	mov	edi, 0x4
1000129d5:	call	0x100002e30
1000129da:	mov	r13, qword ptr [r14]
1000129dd:	mov	rdi, r13
1000129e0:	call	0x100019830 ## symbol stub for: _strlen
1000129e5:	mov	r14, rax
1000129e8:	mov	rdi, r15
1000129eb:	call	0x100019830 ## symbol stub for: _strlen
1000129f0:	cmp	r14, rax
1000129f3:	jne	0x100012a01
1000129f5:	mov	rax, qword ptr [rbp - 0x1450]
1000129fc:	mov	byte ptr [rax], 0x0
1000129ff:	jmp	0x100012a13
100012a01:	add	r13, rax
100012a04:	mov	rdi, qword ptr [rbp - 0x1450]
100012a0b:	mov	rsi, r13
100012a0e:	call	0x100019824 ## symbol stub for: _strcpy
100012a13:	mov	rdi, r12
100012a16:	call	0x100019830 ## symbol stub for: _strlen
100012a1b:	lea	rdi, [rax + 0x1]
100012a1f:	call	0x100019758 ## symbol stub for: _malloc
100012a24:	mov	r13, rax
100012a27:	test	rax, rax
100012a2a:	lea	r14, [rip + 0x16dd7]
100012a31:	jne	0x100012a44
100012a33:	lea	rsi, [rip + 0x10a9e] ## literal pool for: "split path"
100012a3a:	mov	edi, 0x4
100012a3f:	call	0x100002e30
100012a44:	mov	rdi, qword ptr [r14]
100012a47:	call	0x100019830 ## symbol stub for: _strlen
100012a4c:	mov	r14, rax
100012a4f:	mov	rdi, r15
100012a52:	call	0x100019830 ## symbol stub for: _strlen
100012a57:	cmp	r14, rax
100012a5a:	jne	0x100012a63
100012a5c:	mov	byte ptr [r13], 0x0
100012a61:	jmp	0x100012a71
100012a63:	mov	rsi, r12
100012a66:	add	rsi, rax
100012a69:	mov	rdi, r13
100012a6c:	call	0x100019824 ## symbol stub for: _strcpy
100012a71:	mov	qword ptr [rbp - 0x1460], r13
100012a78:	test	ebx, ebx
100012a7a:	jns	0x100012a8f
100012a7c:	movups	xmm0, xmmword ptr [rip + 0x10a60] ## literal pool for: "(current directory)"
100012a83:	movups	xmmword ptr [r15], xmm0
100012a87:	mov	dword ptr [r15 + 0x10], 0x297972
100012a8f:	lea	r14, [rip + 0x1849a]
100012a96:	mov	rcx, qword ptr [r14]
100012a99:	lea	rdi, [rip + 0x10a57] ## literal pool for: "\n\nCould not find:\n"
100012aa0:	mov	esi, 0x12
100012aa5:	mov	edx, 0x1
100012aaa:	call	0x10001972e ## symbol stub for: _fwrite
100012aaf:	mov	rdi, qword ptr [r14]
100012ab2:	lea	rsi, [rip + 0xa51f] ## literal pool for: "  %s\n"
100012ab9:	mov	rdx, r12
100012abc:	xor	eax, eax
100012abe:	call	0x1000196fe ## symbol stub for: _fprintf
100012ac3:	mov	r13, qword ptr [rbp - 0x1458]
100012aca:	lea	rax, [r13 + 0x1]
100012ace:	mov	qword ptr [rbp - 0x1468], rax
100012ad5:	lea	rbx, [rip + 0x94d4] ## literal pool for: "r"
100012adc:	mov	dword ptr [rbp - 0x1444], 0x0
100012ae6:	mov	r13d, dword ptr [rbp - 0x1444]
100012aed:	test	r13d, r13d
100012af0:	je	0x100012b3d
100012af2:	mov	rcx, qword ptr [r14]
100012af5:	mov	esi, 0x35
100012afa:	mov	edx, 0x1
100012aff:	lea	rdi, [rip + 0x10a04] ## literal pool for: "\nHit c      (change path to where this split file is)"
100012b06:	call	0x10001972e ## symbol stub for: _fwrite
100012b0b:	mov	rcx, qword ptr [r14]
100012b0e:	mov	esi, 0x22
100012b13:	mov	edx, 0x1
100012b18:	lea	rdi, [rip + 0x10a21] ## literal pool for: "\n    q      (abort archive - quit)"
100012b1f:	call	0x10001972e ## symbol stub for: _fwrite
100012b24:	mov	rcx, qword ptr [r14]
100012b27:	mov	esi, 0x28
100012b2c:	mov	edx, 0x1
100012b31:	lea	rdi, [rip + 0x10a2b] ## literal pool for: "\n or ENTER  (continue with this split): "
100012b38:	jmp	0x100012c46
100012b3d:	lea	rax, [rip + 0x16b6c]
100012b44:	mov	eax, dword ptr [rax]
100012b46:	cmp	eax, 0x2
100012b49:	je	0x100012b86
100012b4b:	cmp	eax, 0x1
100012b4e:	jne	0x100012c00
100012b54:	mov	rcx, qword ptr [r14]
100012b57:	mov	esi, 0x35
100012b5c:	mov	edx, 0x1
100012b61:	lea	rdi, [rip + 0x109a2] ## literal pool for: "\nHit c      (change path to where this split file is)"
100012b68:	call	0x10001972e ## symbol stub for: _fwrite
100012b6d:	mov	rcx, qword ptr [r14]
100012b70:	mov	esi, 0x1d
100012b75:	mov	edx, 0x1
100012b7a:	lea	rdi, [rip + 0x10a0b] ## literal pool for: "\n    s      (skip this split)"
100012b81:	jmp	0x100012c14
100012b86:	mov	rcx, qword ptr [r14]
100012b89:	mov	esi, 0x35
100012b8e:	mov	edx, 0x1
100012b93:	lea	rdi, [rip + 0x10970] ## literal pool for: "\nHit c      (change path to where this split file is)"
100012b9a:	call	0x10001972e ## symbol stub for: _fwrite
100012b9f:	mov	rcx, qword ptr [r14]
100012ba2:	mov	esi, 0x1d
100012ba7:	mov	edx, 0x1
100012bac:	lea	rdi, [rip + 0x109d9] ## literal pool for: "\n    s      (skip this split)"
100012bb3:	call	0x10001972e ## symbol stub for: _fwrite
100012bb8:	mov	rcx, qword ptr [r14]
100012bbb:	mov	esi, 0x22
100012bc0:	mov	edx, 0x1
100012bc5:	lea	rdi, [rip + 0x10974] ## literal pool for: "\n    q      (abort archive - quit)"
100012bcc:	call	0x10001972e ## symbol stub for: _fwrite
100012bd1:	mov	rcx, qword ptr [r14]
100012bd4:	mov	esi, 0x2f
100012bd9:	mov	edx, 0x1
100012bde:	lea	rdi, [rip + 0x109f2] ## literal pool for: "\n    e      (end this archive - no more splits)"
100012be5:	call	0x10001972e ## symbol stub for: _fwrite
100012bea:	mov	rcx, qword ptr [r14]
100012bed:	mov	esi, 0x32
100012bf2:	mov	edx, 0x1
100012bf7:	lea	rdi, [rip + 0x10a09] ## literal pool for: "\n    z      (look for .zip split - the last split)"
100012bfe:	jmp	0x100012c2d
100012c00:	mov	rcx, qword ptr [r14]
100012c03:	mov	esi, 0x35
100012c08:	mov	edx, 0x1
100012c0d:	lea	rdi, [rip + 0x108f6] ## literal pool for: "\nHit c      (change path to where this split file is)"
100012c14:	call	0x10001972e ## symbol stub for: _fwrite
100012c19:	mov	rcx, qword ptr [r14]
100012c1c:	mov	esi, 0x22
100012c21:	mov	edx, 0x1
100012c26:	lea	rdi, [rip + 0x10913] ## literal pool for: "\n    q      (abort archive - quit)"
100012c2d:	call	0x10001972e ## symbol stub for: _fwrite
100012c32:	mov	rcx, qword ptr [r14]
100012c35:	mov	esi, 0x2c
100012c3a:	mov	edx, 0x1
100012c3f:	lea	rdi, [rip + 0x10964] ## literal pool for: "\n or ENTER  (try reading this split again): "
100012c46:	call	0x10001972e ## symbol stub for: _fwrite
100012c4b:	mov	rdi, qword ptr [r14]
100012c4e:	call	0x1000196e6 ## symbol stub for: _fflush
100012c53:	mov	rax, qword ptr [rip + 0x113c6] ## literal pool symbol address: ___stdinp
100012c5a:	mov	rdx, qword ptr [rax]
100012c5d:	lea	rdi, [rbp - 0x1440]
100012c64:	mov	esi, 0x13aa
100012c69:	call	0x1000196ec ## symbol stub for: _fgets
100012c6e:	xor	eax, eax
100012c70:	mov	cl, byte ptr [rbp + rax - 0x1440]
100012c77:	test	cl, cl
100012c79:	je	0x100012c8f
100012c7b:	cmp	cl, 0xa
100012c7e:	je	0x100012c85
100012c80:	inc	rax
100012c83:	jmp	0x100012c70
100012c85:	mov	eax, eax
100012c87:	mov	byte ptr [rbp + rax - 0x1440], 0x0
100012c8f:	movsx	edi, byte ptr [rbp - 0x1440]
100012c96:	call	0x10001969e ## symbol stub for: ___toupper
100012c9b:	cmp	eax, 0x51
100012c9e:	je	0x1000130f7
100012ca4:	cmp	eax, 0x53
100012ca7:	jne	0x100012cbd
100012ca9:	lea	rax, [rip + 0x16a00]
100012cb0:	mov	eax, dword ptr [rax]
100012cb2:	dec	eax
100012cb4:	cmp	eax, 0x1
100012cb7:	jbe	0x1000130fe
100012cbd:	movsx	edi, byte ptr [rbp - 0x1440]
100012cc4:	call	0x10001969e ## symbol stub for: ___toupper
100012cc9:	cmp	eax, 0x43
100012ccc:	jne	0x100012d45
100012cce:	mov	rcx, qword ptr [r14]
100012cd1:	mov	esi, 0x43
100012cd6:	mov	edx, 0x1
100012cdb:	lea	rdi, [rip + 0x10958] ## literal pool for: "\nEnter path where this split is (ENTER = same dir, . = current dir)"
100012ce2:	call	0x10001972e ## symbol stub for: _fwrite
100012ce7:	mov	rcx, qword ptr [r14]
100012cea:	mov	esi, 0x3
100012cef:	mov	edx, 0x1
100012cf4:	lea	rdi, [rip + 0x10983] ## literal pool for: "\n: "
100012cfb:	call	0x10001972e ## symbol stub for: _fwrite
100012d00:	mov	rdi, qword ptr [r14]
100012d03:	call	0x1000196e6 ## symbol stub for: _fflush
100012d08:	mov	rax, qword ptr [rip + 0x11311] ## literal pool symbol address: ___stdinp
100012d0f:	mov	rdx, qword ptr [rax]
100012d12:	lea	rbx, [rbp - 0x1440]
100012d19:	mov	rdi, rbx
100012d1c:	mov	esi, 0x13aa
100012d21:	call	0x1000196ec ## symbol stub for: _fgets
100012d26:	xor	eax, eax
100012d28:	mov	cl, byte ptr [rbp + rax - 0x1440]
100012d2f:	test	cl, cl
100012d31:	je	0x100012dd8
100012d37:	cmp	cl, 0xa
100012d3a:	je	0x100012dce
100012d40:	inc	rax
100012d43:	jmp	0x100012d28
100012d45:	lea	rcx, [rip + 0x16964]
100012d4c:	mov	ecx, dword ptr [rcx]
100012d4e:	cmp	eax, 0x45
100012d51:	jne	0x100012d5c
100012d53:	cmp	ecx, 0x2
100012d56:	je	0x10001315c
100012d5c:	cmp	ecx, 0x2
100012d5f:	jne	0x100012dfc
100012d65:	movsx	edi, byte ptr [rbp - 0x1440]
100012d6c:	call	0x10001969e ## symbol stub for: ___toupper
100012d71:	cmp	eax, 0x5a
100012d74:	jne	0x100012dfc
100012d7a:	mov	rax, qword ptr [rbp - 0x1468]
100012d81:	lea	rcx, [rip + 0x16aa0]
100012d88:	mov	qword ptr [rcx], rax
100012d8b:	mov	rdi, r12
100012d8e:	call	0x100019716 ## symbol stub for: _free
100012d93:	lea	rax, [rip + 0x16a6e]
100012d9a:	mov	rdi, qword ptr [rax]
100012d9d:	mov	rsi, qword ptr [rbp - 0x1458]
100012da4:	call	0x1000127e1
100012da9:	mov	r12, rax
100012dac:	mov	byte ptr [rbp - 0x1440], 0x0
100012db3:	mov	edx, 0x13aa
100012db8:	mov	ecx, 0x140e
100012dbd:	lea	rdi, [rbp - 0x1440]
100012dc4:	mov	rsi, rax
100012dc7:	call	0x100019698 ## symbol stub for: ___strncat_chk
100012dcc:	jmp	0x100012dfc
100012dce:	mov	eax, eax
100012dd0:	mov	byte ptr [rbp + rax - 0x1440], 0x0
100012dd8:	mov	al, byte ptr [rbp - 0x1440]
100012dde:	test	al, al
100012de0:	jne	0x100012e4c
100012de2:	mov	edx, 0x140e
100012de7:	mov	rdi, rbx
100012dea:	mov	rsi, r12
100012ded:	call	0x100019692 ## symbol stub for: ___strcpy_chk
100012df2:	xor	r13d, r13d
100012df5:	lea	rbx, [rip + 0x91b4] ## literal pool for: "r"
100012dfc:	mov	al, byte ptr [rbp - 0x1440]
100012e02:	test	al, al
100012e04:	jne	0x100012e4f
100012e06:	mov	rdi, r12
100012e09:	mov	rsi, rbx
100012e0c:	call	0x1000196f8 ## symbol stub for: _fopen
100012e11:	test	rax, rax
100012e14:	jne	0x10001311c
100012e1a:	mov	rcx, qword ptr [r14]
100012e1d:	mov	esi, 0x18
100012e22:	mov	edx, 0x1
100012e27:	lea	rdi, [rip + 0x10854] ## literal pool for: "\nCould not find or open\n"
100012e2e:	call	0x10001972e ## symbol stub for: _fwrite
100012e33:	mov	rdi, qword ptr [r14]
100012e36:	lea	rsi, [rip + 0xa19b] ## literal pool for: "  %s\n"
100012e3d:	mov	rdx, r12
100012e40:	xor	eax, eax
100012e42:	call	0x1000196fe ## symbol stub for: _fprintf
100012e47:	jmp	0x100012aed
100012e4c:	xor	r13d, r13d
100012e4f:	cmp	al, 0x2e
100012e51:	movabs	rbx, -0x100000000
100012e5b:	jne	0x100012e6d
100012e5d:	cmp	byte ptr [rbp - 0x143f], 0x0
100012e64:	jne	0x100012e6d
100012e66:	mov	byte ptr [rbp - 0x1440], 0x0
100012e6d:	lea	rdi, [rbp - 0x1440]
100012e74:	call	0x100019830 ## symbol stub for: _strlen
100012e79:	test	eax, eax
100012e7b:	movabs	rsi, 0x200000000801
100012e85:	mov	dword ptr [rbp - 0x1444], r13d
100012e8c:	js	0x100012ecb
100012e8e:	mov	ecx, eax
100012e90:	mov	rax, rcx
100012e93:	shl	rax, 0x20
100012e97:	movabs	rdx, offset __mh_execute_header
100012ea1:	add	rax, rdx
100012ea4:	inc	rcx
100012ea7:	mov	dl, byte ptr [rbp + rcx - 0x1441]
100012eae:	add	dl, -0x2f
100012eb1:	cmp	dl, 0x2d
100012eb4:	ja	0x100012ec3
100012eb6:	movzx	edx, dl
100012eb9:	bt	rsi, rdx
100012ebd:	jb	0x100012f46
100012ec3:	add	rax, rbx
100012ec6:	dec	rcx
100012ec9:	jg	0x100012ea7
100012ecb:	lea	r13, [rip + 0x16936]
100012ed2:	mov	rdi, qword ptr [r13]
100012ed6:	call	0x100019716 ## symbol stub for: _free
100012edb:	movups	xmm0, xmmword ptr [rip + 0x10601] ## literal pool for: "(current directory)"
100012ee2:	movaps	xmmword ptr [rbp - 0x1440], xmm0
100012ee9:	mov	dword ptr [rbp - 0x1430], 0x297972
100012ef3:	mov	rbx, qword ptr [rbp - 0x1450]
100012efa:	mov	rdi, rbx
100012efd:	call	0x100019830 ## symbol stub for: _strlen
100012f02:	lea	rdi, [rax + 0x28]
100012f06:	call	0x100019758 ## symbol stub for: _malloc
100012f0b:	mov	qword ptr [r13], rax
100012f0f:	test	rax, rax
100012f12:	jne	0x100012f2f
100012f14:	mov	edi, 0x4
100012f19:	lea	rsi, [rip + 0x105b8] ## literal pool for: "split path"
100012f20:	call	0x100002e30
100012f25:	lea	rax, [rip + 0x168dc]
100012f2c:	mov	rax, qword ptr [rax]
100012f2f:	mov	rdi, rax
100012f32:	mov	rsi, rbx
100012f35:	call	0x100019824 ## symbol stub for: _strcpy
100012f3a:	lea	rbx, [rip + 0x168c7]
100012f41:	jmp	0x100013003
100012f46:	sar	rax, 0x20
100012f4a:	mov	byte ptr [rbp + rax - 0x1440], 0x0
100012f52:	lea	rax, [rip + 0x168af]
100012f59:	mov	rdi, qword ptr [rax]
100012f5c:	call	0x100019716 ## symbol stub for: _free
100012f61:	lea	rdi, [rbp - 0x1440]
100012f68:	call	0x100019830 ## symbol stub for: _strlen
100012f6d:	test	eax, eax
100012f6f:	js	0x100012f86
100012f71:	mov	ecx, eax
100012f73:	cmp	byte ptr [rbp + rcx - 0x1440], 0x2f
100012f7b:	je	0x100012f8f
100012f7d:	lea	ecx, [rax - 0x1]
100012f80:	test	eax, eax
100012f82:	mov	eax, ecx
100012f84:	jg	0x100012f71
100012f86:	mov	byte ptr [rbp - 0x1440], 0x0
100012f8d:	jmp	0x100012f9b
100012f8f:	inc	eax
100012f91:	cdqe
100012f93:	mov	byte ptr [rbp + rax - 0x1440], 0x0
100012f9b:	lea	rdi, [rbp - 0x1440]
100012fa2:	call	0x100019830 ## symbol stub for: _strlen
100012fa7:	mov	rbx, rax
100012faa:	mov	r13, qword ptr [rbp - 0x1450]
100012fb1:	mov	rdi, r13
100012fb4:	call	0x100019830 ## symbol stub for: _strlen
100012fb9:	lea	rdi, [rbx + rax]
100012fbd:	add	rdi, 0x28
100012fc1:	call	0x100019758 ## symbol stub for: _malloc
100012fc6:	lea	rbx, [rip + 0x1683b]
100012fcd:	mov	qword ptr [rbx], rax
100012fd0:	test	rax, rax
100012fd3:	jne	0x100012fe9
100012fd5:	mov	edi, 0x4
100012fda:	lea	rsi, [rip + 0x104f7] ## literal pool for: "split path"
100012fe1:	call	0x100002e30
100012fe6:	mov	rax, qword ptr [rbx]
100012fe9:	mov	rdi, rax
100012fec:	lea	rsi, [rbp - 0x1440]
100012ff3:	call	0x100019824 ## symbol stub for: _strcpy
100012ff8:	mov	rdi, qword ptr [rbx]
100012ffb:	mov	rsi, r13
100012ffe:	call	0x100019812 ## symbol stub for: _strcat
100013003:	mov	r13, qword ptr [rbp - 0x1458]
10001300a:	mov	rdi, r12
10001300d:	call	0x100019716 ## symbol stub for: _free
100013012:	mov	rdi, qword ptr [rbx]
100013015:	mov	rsi, r13
100013018:	call	0x1000127e1
10001301d:	mov	r12, rax
100013020:	mov	rdi, r15
100013023:	call	0x100019716 ## symbol stub for: _free
100013028:	mov	rbx, qword ptr [rbx]
10001302b:	mov	rdi, rbx
10001302e:	call	0x100019830 ## symbol stub for: _strlen
100013033:	lea	rdi, [rax + 0x28]
100013037:	call	0x100019758 ## symbol stub for: _malloc
10001303c:	mov	r15, rax
10001303f:	test	rax, rax
100013042:	jne	0x10001305f
100013044:	mov	edi, 0x4
100013049:	lea	rsi, [rip + 0x10488] ## literal pool for: "split path"
100013050:	call	0x100002e30
100013055:	lea	rax, [rip + 0x167ac]
10001305c:	mov	rbx, qword ptr [rax]
10001305f:	mov	rdi, r15
100013062:	mov	rsi, rbx
100013065:	call	0x100019824 ## symbol stub for: _strcpy
10001306a:	mov	rdi, r15
10001306d:	call	0x100019830 ## symbol stub for: _strlen
100013072:	test	eax, eax
100013074:	lea	rbx, [rip + 0x8f35] ## literal pool for: "r"
10001307b:	js	0x10001309a
10001307d:	mov	ecx, eax
10001307f:	cmp	byte ptr [r15 + rcx], 0x2f
100013084:	je	0x100013091
100013086:	lea	ecx, [rax - 0x1]
100013089:	test	eax, eax
10001308b:	mov	eax, ecx
10001308d:	jg	0x10001307d
10001308f:	jmp	0x10001309a
100013091:	inc	eax
100013093:	cdqe
100013095:	mov	byte ptr [r15 + rax], 0x0
10001309a:	mov	rdi, r12
10001309d:	mov	rsi, rbx
1000130a0:	call	0x1000196f8 ## symbol stub for: _fopen
1000130a5:	test	rax, rax
1000130a8:	je	0x1000130c5
1000130aa:	mov	rdi, rax
1000130ad:	call	0x1000196ce ## symbol stub for: _fclose
1000130b2:	mov	dword ptr [rbp - 0x1444], 0x1
1000130bc:	lea	rsi, [rip + 0x105d8] ## literal pool for: "Found:  %s\n"
1000130c3:	jmp	0x1000130e5
1000130c5:	mov	rcx, qword ptr [r14]
1000130c8:	mov	esi, 0x18
1000130cd:	mov	edx, 0x1
1000130d2:	lea	rdi, [rip + 0x105a9] ## literal pool for: "\nCould not find or open\n"
1000130d9:	call	0x10001972e ## symbol stub for: _fwrite
1000130de:	lea	rsi, [rip + 0x9ef3] ## literal pool for: "  %s\n"
1000130e5:	mov	rdi, qword ptr [r14]
1000130e8:	mov	rdx, r12
1000130eb:	xor	eax, eax
1000130ed:	call	0x1000196fe ## symbol stub for: _fprintf
1000130f2:	jmp	0x100012ae6
1000130f7:	mov	ebx, 0x9
1000130fc:	jmp	0x100013161
1000130fe:	lea	rax, [rip + 0x1672b]
100013105:	mov	rax, qword ptr [rax]
100013108:	inc	rax
10001310b:	lea	rcx, [rip + 0x165be]
100013112:	mov	qword ptr [rcx], rax
100013115:	mov	ebx, 0x3
10001311a:	jmp	0x100013161
10001311c:	mov	rdi, rax
10001311f:	call	0x1000196ce ## symbol stub for: _fclose
100013124:	mov	rdi, qword ptr [r14]
100013127:	lea	rsi, [rip + 0x10579] ## literal pool for: "\nFound:  %s\n"
10001312e:	xor	ebx, ebx
100013130:	mov	rdx, r12
100013133:	xor	eax, eax
100013135:	call	0x1000196fe ## symbol stub for: _fprintf
10001313a:	mov	rdi, qword ptr [rbp - 0x1450]
100013141:	call	0x100019716 ## symbol stub for: _free
100013146:	mov	rdi, r15
100013149:	call	0x100019716 ## symbol stub for: _free
10001314e:	mov	rdi, qword ptr [rbp - 0x1460]
100013155:	call	0x100019716 ## symbol stub for: _free
10001315a:	jmp	0x100013161
10001315c:	mov	ebx, 0x2
100013161:	mov	rax, qword ptr [rip + 0x10ea8] ## literal pool symbol address: ___stack_chk_guard
100013168:	mov	rax, qword ptr [rax]
10001316b:	cmp	rax, qword ptr [rbp - 0x30]
10001316f:	jne	0x100013185
100013171:	mov	eax, ebx
100013173:	add	rsp, 0x1448
10001317a:	pop	rbx
10001317b:	pop	r12
10001317d:	pop	r13
10001317f:	pop	r14
100013181:	pop	r15
100013183:	pop	rbp
100013184:	ret
100013185:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
10001318a:	push	rbp
10001318b:	mov	rbp, rsp
10001318e:	push	r15
100013190:	push	r14
100013192:	push	r13
100013194:	push	r12
100013196:	push	rbx
100013197:	sub	rsp, 0x448
10001319e:	mov	qword ptr [rbp - 0x468], rdi
1000131a5:	mov	rax, qword ptr [rip + 0x10e64] ## literal pool symbol address: ___stack_chk_guard
1000131ac:	mov	rax, qword ptr [rax]
1000131af:	mov	qword ptr [rbp - 0x30], rax
1000131b3:	lea	rbx, [rip + 0x1665e]
1000131ba:	mov	r14, qword ptr [rbx]
1000131bd:	mov	rdi, r14
1000131c0:	call	0x100019830 ## symbol stub for: _strlen
1000131c5:	lea	rdi, [rax + 0x28]
1000131c9:	call	0x100019758 ## symbol stub for: _malloc
1000131ce:	mov	r13, rax
1000131d1:	test	rax, rax
1000131d4:	jne	0x1000131ea
1000131d6:	lea	rsi, [rip + 0x102fb] ## literal pool for: "split path"
1000131dd:	mov	edi, 0x4
1000131e2:	call	0x100002e30
1000131e7:	mov	r14, qword ptr [rbx]
1000131ea:	movabs	rbx, -0x100000000
1000131f4:	movabs	r15, offset __mh_execute_header
1000131fe:	mov	rdi, r13
100013201:	mov	rsi, r14
100013204:	call	0x100019824 ## symbol stub for: _strcpy
100013209:	mov	rdi, r13
10001320c:	call	0x100019830 ## symbol stub for: _strlen
100013211:	mov	r12, rax
100013214:	movabs	rsi, 0x200000000801
10001321e:	test	r12d, r12d
100013221:	js	0x10001326f
100013223:	mov	ecx, r12d
100013226:	mov	rax, rcx
100013229:	shl	rax, 0x20
10001322d:	add	rax, r15
100013230:	inc	rcx
100013233:	lea	r15, [rip + 0x165de]
10001323a:	mov	dl, byte ptr [r13 + rcx - 0x1]
10001323f:	add	dl, -0x2f
100013242:	cmp	dl, 0x2d
100013245:	ja	0x100013250
100013247:	movzx	edx, dl
10001324a:	bt	rsi, rdx
10001324e:	jb	0x100013263
100013250:	add	rax, rbx
100013253:	dec	r12d
100013256:	dec	rcx
100013259:	jg	0x10001323a
10001325b:	mov	r12d, 0xffffffff
100013261:	jmp	0x100013276
100013263:	sar	rax, 0x20
100013267:	mov	byte ptr [r13 + rax], 0x0
10001326d:	jmp	0x100013276
10001326f:	lea	r15, [rip + 0x165a2]
100013276:	mov	rbx, qword ptr [r15]
100013279:	mov	rdi, rbx
10001327c:	call	0x100019830 ## symbol stub for: _strlen
100013281:	lea	rdi, [rax + 0x1]
100013285:	call	0x100019758 ## symbol stub for: _malloc
10001328a:	mov	r14, rax
10001328d:	test	rax, rax
100013290:	jne	0x1000132a6
100013292:	lea	rsi, [rip + 0x1023f] ## literal pool for: "split path"
100013299:	mov	edi, 0x4
10001329e:	call	0x100002e30
1000132a3:	mov	rbx, qword ptr [r15]
1000132a6:	mov	rdi, rbx
1000132a9:	call	0x100019830 ## symbol stub for: _strlen
1000132ae:	mov	r15, rax
1000132b1:	mov	rdi, r13
1000132b4:	call	0x100019830 ## symbol stub for: _strlen
1000132b9:	cmp	r15, rax
1000132bc:	jne	0x1000132c4
1000132be:	mov	byte ptr [r14], 0x0
1000132c2:	jmp	0x1000132d2
1000132c4:	add	rbx, rax
1000132c7:	mov	rdi, r14
1000132ca:	mov	rsi, rbx
1000132cd:	call	0x100019824 ## symbol stub for: _strcpy
1000132d2:	movabs	rbx, -0x100000000
1000132dc:	mov	rdx, qword ptr [rbp - 0x468]
1000132e3:	test	r12d, r12d
1000132e6:	lea	r15, [rip + 0x1652b]
1000132ed:	jns	0x100013303
1000132ef:	movups	xmm0, xmmword ptr [rip + 0x101ed] ## literal pool for: "(current directory)"
1000132f6:	movups	xmmword ptr [r13], xmm0
1000132fb:	mov	dword ptr [r13 + 0x10], 0x297972
100013303:	inc	edx
100013305:	lea	rax, [rip + 0x165c0]
10001330c:	cmp	dword ptr [rax], 0x0
10001330f:	je	0x10001332b
100013311:	lea	rax, [rip + 0x17c18]
100013318:	mov	rsi, qword ptr [rax]
10001331b:	mov	edi, 0xa
100013320:	mov	r12, rdx
100013323:	call	0x100019704 ## symbol stub for: _fputc
100013328:	mov	rdx, r12
10001332b:	lea	r12, [rip + 0x17bfe]
100013332:	mov	rdi, qword ptr [r12]
100013336:	lea	rsi, [rip + 0x10377] ## literal pool for: "\nOpening disk %d\n"
10001333d:	xor	eax, eax
10001333f:	call	0x1000196fe ## symbol stub for: _fprintf
100013344:	mov	rcx, qword ptr [r12]
100013348:	lea	rdi, [rip + 0x10377] ## literal pool for: "Hit ENTER to write to default path of\n"
10001334f:	mov	esi, 0x26
100013354:	mov	edx, 0x1
100013359:	call	0x10001972e ## symbol stub for: _fwrite
10001335e:	mov	rdi, qword ptr [r12]
100013362:	lea	rsi, [rip + 0x9c6f] ## literal pool for: "  %s\n"
100013369:	mov	rdx, r13
10001336c:	xor	eax, eax
10001336e:	call	0x1000196fe ## symbol stub for: _fprintf
100013373:	mov	rcx, qword ptr [r12]
100013377:	lea	rdi, [rip + 0x1036f] ## literal pool for: "or enter a new directory path (. for cur dir) and hit ENTER\n"
10001337e:	mov	esi, 0x3c
100013383:	mov	edx, 0x1
100013388:	call	0x10001972e ## symbol stub for: _fwrite
10001338d:	lea	r12, [rip + 0x17b9c]
100013394:	mov	rcx, qword ptr [r12]
100013398:	mov	esi, 0x22
10001339d:	mov	edx, 0x1
1000133a2:	lea	rdi, [rip + 0x10381] ## literal pool for: "\nPath (or hit ENTER to continue): "
1000133a9:	call	0x10001972e ## symbol stub for: _fwrite
1000133ae:	mov	rdi, qword ptr [r12]
1000133b2:	call	0x1000196e6 ## symbol stub for: _fflush
1000133b7:	mov	rax, qword ptr [rip + 0x10c62] ## literal pool symbol address: ___stdinp
1000133be:	mov	rdx, qword ptr [rax]
1000133c1:	lea	r12, [rbp - 0x460]
1000133c8:	mov	rdi, r12
1000133cb:	mov	esi, 0x400
1000133d0:	call	0x1000196ec ## symbol stub for: _fgets
1000133d5:	xor	eax, eax
1000133d7:	mov	cl, byte ptr [rbp + rax - 0x460]
1000133de:	test	cl, cl
1000133e0:	je	0x1000133f6
1000133e2:	cmp	cl, 0xa
1000133e5:	je	0x1000133ec
1000133e7:	inc	rax
1000133ea:	jmp	0x1000133d7
1000133ec:	mov	eax, eax
1000133ee:	mov	byte ptr [rbp + rax - 0x460], 0x0
1000133f6:	mov	al, byte ptr [rbp - 0x460]
1000133fc:	cmp	al, 0x2e
1000133fe:	je	0x100013409
100013400:	test	al, al
100013402:	jne	0x100013419
100013404:	jmp	0x100013655
100013409:	cmp	byte ptr [rbp - 0x45f], 0x0
100013410:	jne	0x100013419
100013412:	mov	byte ptr [rbp - 0x460], 0x0
100013419:	mov	rdi, r12
10001341c:	call	0x100019830 ## symbol stub for: _strlen
100013421:	test	eax, eax
100013423:	movabs	rsi, 0x200000000801
10001342d:	js	0x100013468
10001342f:	mov	ecx, eax
100013431:	mov	rax, rcx
100013434:	shl	rax, 0x20
100013438:	movabs	rdx, offset __mh_execute_header
100013442:	add	rax, rdx
100013445:	inc	rcx
100013448:	mov	dl, byte ptr [rbp + rcx - 0x461]
10001344f:	add	dl, -0x2f
100013452:	cmp	dl, 0x2d
100013455:	ja	0x100013460
100013457:	movzx	edx, dl
10001345a:	bt	rsi, rdx
10001345e:	jb	0x1000134c5
100013460:	add	rax, rbx
100013463:	dec	rcx
100013466:	jg	0x100013448
100013468:	mov	rdi, qword ptr [r15]
10001346b:	call	0x100019716 ## symbol stub for: _free
100013470:	movups	xmm0, xmmword ptr [rip + 0x1006c] ## literal pool for: "(current directory)"
100013477:	movaps	xmmword ptr [rbp - 0x460], xmm0
10001347e:	mov	dword ptr [rbp - 0x450], 0x297972
100013488:	mov	rdi, r14
10001348b:	call	0x100019830 ## symbol stub for: _strlen
100013490:	lea	rdi, [rax + 0x28]
100013494:	call	0x100019758 ## symbol stub for: _malloc
100013499:	mov	qword ptr [r15], rax
10001349c:	test	rax, rax
10001349f:	jne	0x1000134b5
1000134a1:	mov	edi, 0x4
1000134a6:	lea	rsi, [rip + 0x1002b] ## literal pool for: "split path"
1000134ad:	call	0x100002e30
1000134b2:	mov	rax, qword ptr [r15]
1000134b5:	mov	rdi, rax
1000134b8:	mov	rsi, r14
1000134bb:	call	0x100019824 ## symbol stub for: _strcpy
1000134c0:	jmp	0x100013561
1000134c5:	sar	rax, 0x20
1000134c9:	mov	byte ptr [rbp + rax - 0x460], 0x0
1000134d1:	mov	rdi, qword ptr [r15]
1000134d4:	call	0x100019716 ## symbol stub for: _free
1000134d9:	mov	rdi, r12
1000134dc:	call	0x100019830 ## symbol stub for: _strlen
1000134e1:	test	eax, eax
1000134e3:	js	0x1000134fa
1000134e5:	mov	ecx, eax
1000134e7:	cmp	byte ptr [rbp + rcx - 0x460], 0x2f
1000134ef:	je	0x100013503
1000134f1:	lea	ecx, [rax - 0x1]
1000134f4:	test	eax, eax
1000134f6:	mov	eax, ecx
1000134f8:	jg	0x1000134e5
1000134fa:	mov	byte ptr [rbp - 0x460], 0x0
100013501:	jmp	0x10001350f
100013503:	inc	eax
100013505:	cdqe
100013507:	mov	byte ptr [rbp + rax - 0x460], 0x0
10001350f:	mov	rdi, r12
100013512:	call	0x100019830 ## symbol stub for: _strlen
100013517:	mov	rbx, rax
10001351a:	mov	rdi, r14
10001351d:	call	0x100019830 ## symbol stub for: _strlen
100013522:	lea	rdi, [rbx + rax]
100013526:	add	rdi, 0x28
10001352a:	call	0x100019758 ## symbol stub for: _malloc
10001352f:	mov	qword ptr [r15], rax
100013532:	test	rax, rax
100013535:	jne	0x10001354b
100013537:	mov	edi, 0x4
10001353c:	lea	rsi, [rip + 0xff95] ## literal pool for: "split path"
100013543:	call	0x100002e30
100013548:	mov	rax, qword ptr [r15]
10001354b:	mov	rdi, rax
10001354e:	mov	rsi, r12
100013551:	call	0x100019824 ## symbol stub for: _strcpy
100013556:	mov	rdi, qword ptr [r15]
100013559:	mov	rsi, r14
10001355c:	call	0x100019812 ## symbol stub for: _strcat
100013561:	lea	rax, [rip + 0x179c8]
100013568:	mov	rdi, qword ptr [rax]
10001356b:	lea	rsi, [rip + 0x101db] ## literal pool for: "Writing to:\n  %s\n"
100013572:	mov	rdx, r12
100013575:	xor	eax, eax
100013577:	call	0x1000196fe ## symbol stub for: _fprintf
10001357c:	mov	rdi, r14
10001357f:	call	0x100019716 ## symbol stub for: _free
100013584:	mov	rdi, r13
100013587:	call	0x100019716 ## symbol stub for: _free
10001358c:	mov	rbx, qword ptr [r15]
10001358f:	mov	rdi, rbx
100013592:	call	0x100019830 ## symbol stub for: _strlen
100013597:	lea	rdi, [rax + 0x28]
10001359b:	call	0x100019758 ## symbol stub for: _malloc
1000135a0:	mov	r13, rax
1000135a3:	test	rax, rax
1000135a6:	jne	0x1000135bc
1000135a8:	mov	edi, 0x4
1000135ad:	lea	rsi, [rip + 0xff24] ## literal pool for: "split path"
1000135b4:	call	0x100002e30
1000135b9:	mov	rbx, qword ptr [r15]
1000135bc:	mov	rdi, r13
1000135bf:	mov	rsi, rbx
1000135c2:	call	0x100019824 ## symbol stub for: _strcpy
1000135c7:	mov	rdi, r13
1000135ca:	call	0x100019830 ## symbol stub for: _strlen
1000135cf:	test	eax, eax
1000135d1:	movabs	rbx, -0x100000000
1000135db:	js	0x1000135fc
1000135dd:	mov	ecx, eax
1000135df:	cmp	byte ptr [r13 + rcx], 0x2f
1000135e5:	je	0x1000135f2
1000135e7:	lea	ecx, [rax - 0x1]
1000135ea:	test	eax, eax
1000135ec:	mov	eax, ecx
1000135ee:	jg	0x1000135dd
1000135f0:	jmp	0x1000135fc
1000135f2:	inc	eax
1000135f4:	cdqe
1000135f6:	mov	byte ptr [r13 + rax], 0x0
1000135fc:	mov	r15, qword ptr [r15]
1000135ff:	mov	rdi, r15
100013602:	call	0x100019830 ## symbol stub for: _strlen
100013607:	lea	rdi, [rax + 0x1]
10001360b:	call	0x100019758 ## symbol stub for: _malloc
100013610:	mov	r14, rax
100013613:	test	rax, rax
100013616:	jne	0x100013633
100013618:	mov	edi, 0x4
10001361d:	lea	rsi, [rip + 0xfeb4] ## literal pool for: "split path"
100013624:	call	0x100002e30
100013629:	lea	rax, [rip + 0x161e8]
100013630:	mov	r15, qword ptr [rax]
100013633:	mov	rdi, r13
100013636:	call	0x100019830 ## symbol stub for: _strlen
10001363b:	add	r15, rax
10001363e:	mov	rdi, r14
100013641:	mov	rsi, r15
100013644:	call	0x100019824 ## symbol stub for: _strcpy
100013649:	lea	r15, [rip + 0x161c8]
100013650:	jmp	0x10001338d
100013655:	mov	rdi, r13
100013658:	call	0x100019716 ## symbol stub for: _free
10001365d:	mov	rdi, r14
100013660:	call	0x100019716 ## symbol stub for: _free
100013665:	mov	rax, qword ptr [rip + 0x109a4] ## literal pool symbol address: ___stack_chk_guard
10001366c:	mov	rax, qword ptr [rax]
10001366f:	cmp	rax, qword ptr [rbp - 0x30]
100013673:	jne	0x10001368c
100013675:	mov	eax, 0x1
10001367a:	add	rsp, 0x448
100013681:	pop	rbx
100013682:	pop	r12
100013684:	pop	r13
100013686:	pop	r14
100013688:	pop	r15
10001368a:	pop	rbp
10001368b:	ret
10001368c:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
100013691:	push	rbp
100013692:	mov	rbp, rsp
100013695:	push	r15
100013697:	push	r14
100013699:	push	r12
10001369b:	push	rbx
10001369c:	sub	rsp, 0x10
1000136a0:	mov	rbx, rsi
1000136a3:	mov	r14, rdi
1000136a6:	inc	rbx
1000136a9:	cmp	rbx, 0x186a0
1000136b0:	jb	0x1000136c3
1000136b2:	lea	rsi, [rip + 0x100b0] ## literal pool for: "More than 99999 splits needed"
1000136b9:	mov	edi, 0x6
1000136be:	call	0x100002e30
1000136c3:	lea	rcx, [rip + 0x100bd] ## literal pool for: "z%02lu"
1000136ca:	lea	r15, [rbp - 0x26]
1000136ce:	mov	edx, 0x6
1000136d3:	mov	rdi, r15
1000136d6:	xor	esi, esi
1000136d8:	mov	r8, rbx
1000136db:	xor	eax, eax
1000136dd:	call	0x100019680 ## symbol stub for: ___sprintf_chk
1000136e2:	mov	rdi, r14
1000136e5:	call	0x100019830 ## symbol stub for: _strlen
1000136ea:	mov	rbx, rax
1000136ed:	add	eax, -0x3
1000136f0:	movsxd	r12, eax
1000136f3:	mov	rdi, r15
1000136f6:	call	0x100019830 ## symbol stub for: _strlen
1000136fb:	add	eax, ebx
1000136fd:	add	eax, -0x2
100013700:	movsxd	rdi, eax
100013703:	call	0x100019758 ## symbol stub for: _malloc
100013708:	mov	rbx, rax
10001370b:	test	rax, rax
10001370e:	jne	0x100013721
100013710:	lea	rsi, [rip + 0xfdc1] ## literal pool for: "split path"
100013717:	mov	edi, 0x4
10001371c:	call	0x100002e30
100013721:	mov	rdi, rbx
100013724:	mov	rsi, r14
100013727:	call	0x100019824 ## symbol stub for: _strcpy
10001372c:	mov	byte ptr [rbx + r12], 0x0
100013731:	lea	rsi, [rbp - 0x26]
100013735:	mov	rdi, rbx
100013738:	call	0x100019812 ## symbol stub for: _strcat
10001373d:	mov	rax, rbx
100013740:	add	rsp, 0x10
100013744:	pop	rbx
100013745:	pop	r12
100013747:	pop	r14
100013749:	pop	r15
10001374b:	pop	rbp
10001374c:	ret
10001374d:	push	rbp
10001374e:	mov	rbp, rsp
100013751:	push	r15
100013753:	push	r14
100013755:	push	rbx
100013756:	push	rax
100013757:	mov	r14, rdx
10001375a:	mov	r15, rsi
10001375d:	mov	rsi, rdi
100013760:	lea	rax, [rip + 0x160b1]
100013767:	mov	rdi, qword ptr [rax]
10001376a:	call	0x100013691
10001376f:	mov	rbx, rax
100013772:	lea	rax, [rip + 0x1614f]
100013779:	cmp	dword ptr [rax], 0x0
10001377c:	je	0x10001378d
10001377e:	lea	rdi, [rip + 0x10009] ## literal pool for: "\tClosing split "
100013785:	mov	rsi, rbx
100013788:	call	0x100003422
10001378d:	mov	rdi, r15
100013790:	call	0x1000196ce ## symbol stub for: _fclose
100013795:	mov	rdi, r14
100013798:	mov	rsi, rbx
10001379b:	call	0x1000035fe
1000137a0:	mov	rdi, rbx
1000137a3:	call	0x100003676
1000137a8:	xor	eax, eax
1000137aa:	add	rsp, 0x8
1000137ae:	pop	rbx
1000137af:	pop	r14
1000137b1:	pop	r15
1000137b3:	pop	rbp
1000137b4:	ret
1000137b5:	push	rbp
1000137b6:	mov	rbp, rsp
1000137b9:	push	r15
1000137bb:	push	r14
1000137bd:	push	r13
1000137bf:	push	r12
1000137c1:	push	rbx
1000137c2:	push	rax
1000137c3:	xor	r12d, r12d
1000137c6:	test	rdi, rdi
1000137c9:	je	0x1000138a6
1000137cf:	mov	r14d, esi
1000137d2:	mov	r15, rdi
1000137d5:	mov	rbx, qword ptr [rdi]
1000137d8:	movsxd	r13, esi
1000137db:	test	rbx, rbx
1000137de:	je	0x100013800
1000137e0:	xor	r12d, r12d
1000137e3:	test	r14d, r14d
1000137e6:	je	0x1000137ed
1000137e8:	cmp	r12, r13
1000137eb:	jge	0x100013800
1000137ed:	lea	rax, [r12 + 0x1]
1000137f2:	cmp	qword ptr [r15 + 8*r12 + 0x8], 0x0
1000137f8:	mov	r12, rax
1000137fb:	jne	0x1000137e3
1000137fd:	mov	r12d, eax
100013800:	mov	eax, r12d
100013803:	lea	rdi, [8*rax + 0x8]
10001380b:	call	0x100019758 ## symbol stub for: _malloc
100013810:	mov	r12, rax
100013813:	test	rax, rax
100013816:	jne	0x10001382c
100013818:	lea	rsi, [rip + 0xffcd] ## literal pool for: "ca"
10001381f:	mov	edi, 0x4
100013824:	call	0x100002e30
100013829:	mov	rbx, qword ptr [r15]
10001382c:	test	rbx, rbx
10001382f:	je	0x10001389b
100013831:	mov	qword ptr [rbp - 0x30], r13
100013835:	xor	r13d, r13d
100013838:	test	r14d, r14d
10001383b:	je	0x100013843
10001383d:	cmp	r13, qword ptr [rbp - 0x30]
100013841:	jge	0x10001389e
100013843:	mov	rdi, rbx
100013846:	call	0x100019830 ## symbol stub for: _strlen
10001384b:	lea	rdi, [rax + 0x1]
10001384f:	call	0x100019758 ## symbol stub for: _malloc
100013854:	mov	qword ptr [r12 + 8*r13], rax
100013858:	test	rax, rax
10001385b:	jne	0x10001387e
10001385d:	mov	rdi, r12
100013860:	call	0x1000138b8
100013865:	mov	edi, 0x4
10001386a:	lea	rsi, [rip + 0xff7b] ## literal pool for: "ca"
100013871:	call	0x100002e30
100013876:	mov	rax, qword ptr [r12 + 8*r13]
10001387a:	mov	rbx, qword ptr [r15 + 8*r13]
10001387e:	mov	rdi, rax
100013881:	mov	rsi, rbx
100013884:	call	0x100019824 ## symbol stub for: _strcpy
100013889:	mov	rbx, qword ptr [r15 + 8*r13 + 0x8]
10001388e:	inc	r13
100013891:	test	rbx, rbx
100013894:	jne	0x100013838
100013896:	mov	r13d, r13d
100013899:	jmp	0x10001389e
10001389b:	xor	r13d, r13d
10001389e:	mov	qword ptr [r12 + 8*r13], 0x0
1000138a6:	mov	rax, r12
1000138a9:	add	rsp, 0x8
1000138ad:	pop	rbx
1000138ae:	pop	r12
1000138b0:	pop	r13
1000138b2:	pop	r14
1000138b4:	pop	r15
1000138b6:	pop	rbp
1000138b7:	ret
1000138b8:	push	rbp
1000138b9:	mov	rbp, rsp
1000138bc:	push	r14
1000138be:	push	rbx
1000138bf:	test	rdi, rdi
1000138c2:	je	0x1000138ea
1000138c4:	mov	r14, rdi
1000138c7:	mov	rdi, qword ptr [rdi]
1000138ca:	xor	ebx, ebx
1000138cc:	test	rdi, rdi
1000138cf:	je	0x1000138e0
1000138d1:	call	0x100019716 ## symbol stub for: _free
1000138d6:	mov	rdi, qword ptr [r14 + 8*rbx + 0x8]
1000138db:	inc	rbx
1000138de:	jmp	0x1000138cc
1000138e0:	mov	rdi, r14
1000138e3:	call	0x100019716 ## symbol stub for: _free
1000138e8:	jmp	0x1000138ec
1000138ea:	xor	ebx, ebx
1000138ec:	mov	eax, ebx
1000138ee:	pop	rbx
1000138ef:	pop	r14
1000138f1:	pop	rbp
1000138f2:	ret
1000138f3:	push	rbp
1000138f4:	mov	rbp, rsp
1000138f7:	push	r15
1000138f9:	push	r14
1000138fb:	push	r13
1000138fd:	push	r12
1000138ff:	push	rbx
100013900:	sub	rsp, 0x18
100013904:	test	rdi, rdi
100013907:	je	0x10001392c
100013909:	mov	r15, rdi
10001390c:	mov	r12, qword ptr [rdi]
10001390f:	test	r12, r12
100013912:	je	0x100013934
100013914:	mov	r14d, 0xffffffff
10001391a:	mov	rax, r12
10001391d:	inc	r14d
100013920:	cmp	qword ptr [rax], 0x0
100013924:	lea	rax, [rax + 0x8]
100013928:	jne	0x10001391d
10001392a:	jmp	0x100013937
10001392c:	xor	r14d, r14d
10001392f:	jmp	0x100013a46
100013934:	xor	r14d, r14d
100013937:	test	rsi, rsi
10001393a:	je	0x100013a46
100013940:	mov	dword ptr [rbp - 0x38], edx
100013943:	mov	qword ptr [rbp - 0x30], rsi
100013947:	mov	dword ptr [rbp - 0x34], ecx
10001394a:	mov	eax, r14d
10001394d:	lea	rdi, [8*rax + 0x10]
100013955:	call	0x100019758 ## symbol stub for: _malloc
10001395a:	mov	rbx, rax
10001395d:	test	rax, rax
100013960:	jne	0x100013973
100013962:	lea	rsi, [rip + 0xfe86] ## literal pool for: "ia"
100013969:	mov	edi, 0x4
10001396e:	call	0x100002e30
100013973:	xor	r13d, r13d
100013976:	test	r12, r12
100013979:	je	0x1000139af
10001397b:	mov	ecx, dword ptr [rbp - 0x38]
10001397e:	test	ecx, ecx
100013980:	jle	0x1000139af
100013982:	mov	rax, qword ptr [r12]
100013986:	test	rax, rax
100013989:	mov	r14, qword ptr [rbp - 0x30]
10001398d:	je	0x1000139b3
10001398f:	mov	ecx, ecx
100013991:	xor	edx, edx
100013993:	lea	r13, [rdx + 0x1]
100013997:	mov	qword ptr [rbx + 8*rdx], rax
10001399b:	cmp	r13, rcx
10001399e:	jae	0x1000139b3
1000139a0:	mov	rax, qword ptr [r12 + 8*rdx + 0x8]
1000139a5:	mov	rdx, r13
1000139a8:	test	rax, rax
1000139ab:	jne	0x100013993
1000139ad:	jmp	0x1000139b3
1000139af:	mov	r14, qword ptr [rbp - 0x30]
1000139b3:	mov	qword ptr [rbp - 0x30], r15
1000139b7:	mov	rdi, r14
1000139ba:	call	0x100019830 ## symbol stub for: _strlen
1000139bf:	lea	rdi, [rax + 0x1]
1000139c3:	call	0x100019758 ## symbol stub for: _malloc
1000139c8:	mov	r15, rax
1000139cb:	test	rax, rax
1000139ce:	jne	0x1000139e1
1000139d0:	lea	rsi, [rip + 0xfe18] ## literal pool for: "ia"
1000139d7:	mov	edi, 0x4
1000139dc:	call	0x100002e30
1000139e1:	mov	rdi, r15
1000139e4:	mov	rsi, r14
1000139e7:	call	0x100019824 ## symbol stub for: _strcpy
1000139ec:	lea	r14d, [r13 + 0x1]
1000139f0:	mov	eax, r13d
1000139f3:	mov	qword ptr [rbx + 8*rax], r15
1000139f7:	test	r12, r12
1000139fa:	je	0x100013a25
1000139fc:	mov	rcx, qword ptr [r12 + 8*rax]
100013a00:	test	rcx, rcx
100013a03:	mov	r15, qword ptr [rbp - 0x30]
100013a07:	mov	edx, dword ptr [rbp - 0x34]
100013a0a:	je	0x100013a2c
100013a0c:	mov	qword ptr [rbx + 8*rax + 0x8], rcx
100013a11:	mov	rcx, qword ptr [r12 + 8*rax + 0x8]
100013a16:	inc	rax
100013a19:	test	rcx, rcx
100013a1c:	jne	0x100013a0c
100013a1e:	inc	eax
100013a20:	mov	r14d, eax
100013a23:	jmp	0x100013a2c
100013a25:	mov	r15, qword ptr [rbp - 0x30]
100013a29:	mov	edx, dword ptr [rbp - 0x34]
100013a2c:	movsxd	rax, r14d
100013a2f:	mov	qword ptr [rbx + 8*rax], 0x0
100013a37:	test	edx, edx
100013a39:	je	0x100013a43
100013a3b:	mov	rdi, r12
100013a3e:	call	0x100019716 ## symbol stub for: _free
100013a43:	mov	qword ptr [r15], rbx
100013a46:	mov	eax, r14d
100013a49:	add	rsp, 0x18
100013a4d:	pop	rbx
100013a4e:	pop	r12
100013a50:	pop	r13
100013a52:	pop	r14
100013a54:	pop	r15
100013a56:	pop	rbp
100013a57:	ret
100013a58:	push	rbp
100013a59:	mov	rbp, rsp
100013a5c:	push	r15
100013a5e:	push	r14
100013a60:	push	r13
100013a62:	push	r12
100013a64:	push	rbx
100013a65:	sub	rsp, 0x78
100013a69:	mov	qword ptr [r8], 0x0
100013a70:	test	rdi, rdi
100013a73:	je	0x100013ab3
100013a75:	mov	rax, qword ptr [rdi]
100013a78:	mov	qword ptr [rbp - 0x58], rax
100013a7c:	test	rax, rax
100013a7f:	je	0x100013ab3
100013a81:	mov	ebx, dword ptr [rbp + 0x20]
100013a84:	mov	r11, qword ptr [rbp + 0x18]
100013a88:	mov	r10, qword ptr [rbp + 0x10]
100013a8c:	mov	r14d, 0xffffffff
100013a92:	inc	r14d
100013a95:	cmp	qword ptr [rax], 0x0
100013a99:	lea	rax, [rax + 0x8]
100013a9d:	jne	0x100013a92
100013a9f:	test	r14d, r14d
100013aa2:	je	0x100013aae
100013aa4:	test	ebx, ebx
100013aa6:	jne	0x100013aca
100013aa8:	cmp	r14d, 0x1
100013aac:	jne	0x100013aca
100013aae:	mov	dword ptr [rsi], r14d
100013ab1:	jmp	0x100013ab9
100013ab3:	mov	dword ptr [rsi], 0x0
100013ab9:	xor	eax, eax
100013abb:	add	rsp, 0x78
100013abf:	pop	rbx
100013ac0:	pop	r12
100013ac2:	pop	r13
100013ac4:	pop	r14
100013ac6:	pop	r15
100013ac8:	pop	rbp
100013ac9:	ret
100013aca:	mov	qword ptr [rbp - 0x40], r8
100013ace:	mov	qword ptr [rbp - 0x80], rdi
100013ad2:	mov	qword ptr [rbp - 0x90], rsi
100013ad9:	mov	qword ptr [rbp - 0x68], r9
100013add:	mov	dword ptr [r9], 0x0
100013ae4:	mov	qword ptr [rbp - 0x88], rdx
100013aeb:	mov	r12d, dword ptr [rdx]
100013aee:	mov	qword ptr [rbp - 0x98], rcx
100013af5:	mov	r13d, dword ptr [rcx]
100013af8:	xor	eax, eax
100013afa:	cmp	r13d, -0x7
100013afe:	sete	cl
100013b01:	cmp	r12d, -0x1
100013b05:	je	0x100013b2c
100013b07:	mov	edx, r12d
100013b0a:	or	edx, ebx
100013b0c:	je	0x100013b2c
100013b0e:	mov	edi, dword ptr [r10]
100013b11:	movsxd	rdx, dword ptr [r11]
100013b14:	cmp	rdx, -0x1
100013b18:	je	0x100013b46
100013b1a:	lea	rdx, [rdx + 4*rdx]
100013b1e:	lea	rsi, [rip + 0x149eb]
100013b25:	mov	rdx, qword ptr [rsi + 8*rdx + 0x18]
100013b2a:	jmp	0x100013b48
100013b2c:	mov	dword ptr [r11], 0xffffffff
100013b33:	mov	r13d, 0xfffffffe
100013b39:	mov	edx, 0xffffffff
100013b3e:	xor	esi, esi
100013b40:	mov	qword ptr [rbp - 0x30], rsi
100013b44:	jmp	0x100013b4f
100013b46:	xor	edx, edx
100013b48:	mov	qword ptr [rbp - 0x30], rdx
100013b4c:	mov	rdx, rdi
100013b4f:	mov	al, cl
100013b51:	test	eax, eax
100013b53:	jne	0x100014498
100013b59:	cmp	dword ptr [rip + 0x156bc], 0x0
100013b60:	je	0x100013c10
100013b66:	cmp	r13d, -0x4
100013b6a:	setb	al
100013b6d:	cmp	r13d, -0x6
100013b71:	setne	cl
100013b74:	test	al, cl
100013b76:	jne	0x100013c28
100013b7c:	test	edx, edx
100013b7e:	js	0x100013c28
100013b84:	mov	rbx, qword ptr [rbp - 0x58]
100013b88:	mov	esi, edx
100013b8a:	mov	r11, qword ptr [rbx + 8*rsi]
100013b8e:	test	r11, r11
100013b91:	je	0x100013c28
100013b97:	mov	r8d, r13d
100013b9a:	and	r8d, -0x3
100013b9e:	cmp	edx, r12d
100013ba1:	jge	0x100013c1b
100013ba3:	xor	r10d, r10d
100013ba6:	cmp	r8d, -0x3
100013baa:	sete	r10b
100013bae:	add	r10d, r12d
100013bb1:	movsxd	rdi, r10d
100013bb4:	lea	r9, [rsi + 0x1]
100013bb8:	mov	ecx, edx
100013bba:	cmp	edx, r10d
100013bbd:	jge	0x100013bf8
100013bbf:	mov	r15, rdx
100013bc2:	mov	rax, qword ptr [rbx + 8*rsi + 0x8]
100013bc7:	mov	qword ptr [rbx + 8*rsi], rax
100013bcb:	cmp	r9, rdi
100013bce:	je	0x100013bec
100013bd0:	mov	rbx, r9
100013bd3:	mov	rax, qword ptr [rbp - 0x58]
100013bd7:	mov	rdx, qword ptr [rax + 8*rbx + 0x8]
100013bdc:	mov	qword ptr [rax + 8*rbx], rdx
100013be0:	lea	rax, [rbx + 0x1]
100013be4:	mov	rbx, rax
100013be7:	cmp	rdi, rax
100013bea:	jne	0x100013bd3
100013bec:	mov	rbx, qword ptr [rbp - 0x58]
100013bf0:	mov	rax, rdi
100013bf3:	mov	rdx, r15
100013bf6:	jmp	0x100013bfb
100013bf8:	mov	rax, rsi
100013bfb:	mov	qword ptr [rbx + 8*rax], r11
100013bff:	inc	ecx
100013c01:	cmp	ecx, r12d
100013c04:	je	0x100013c1b
100013c06:	mov	rbx, qword ptr [rbp - 0x58]
100013c0a:	mov	r11, qword ptr [rbx + 8*rsi]
100013c0e:	jmp	0x100013bba
100013c10:	cmp	r13d, -0x5
100013c14:	jne	0x100013c28
100013c16:	jmp	0x100013ccf
100013c1b:	xor	eax, eax
100013c1d:	cmp	r8d, -0x3
100013c21:	sete	al
100013c24:	add	edx, eax
100013c26:	inc	edx
100013c28:	cmp	r13d, -0x6
100013c2c:	je	0x100013ccf
100013c32:	mov	eax, r13d
100013c35:	and	eax, -0x2
100013c38:	cmp	eax, -0x4
100013c3b:	jne	0x100013d26
100013c41:	xor	eax, eax
100013c43:	cmp	r13d, -0x3
100013c47:	sete	al
100013c4a:	mov	ecx, r12d
100013c4d:	add	ecx, eax
100013c4f:	add	r12d, eax
100013c52:	inc	r12d
100013c55:	movsxd	rbx, ecx
100013c58:	lea	rcx, [rbx + 0x1]
100013c5c:	mov	r15, qword ptr [rbp - 0x58]
100013c60:	mov	rdi, qword ptr [r15 + 8*rbx + 0x8]
100013c65:	test	edx, edx
100013c67:	js	0x100013ca2
100013c69:	test	rdi, rdi
100013c6c:	jne	0x100013ca2
100013c6e:	lea	rdi, [rbp - 0x58]
100013c72:	lea	rsi, [rip + 0x8797] ## literal pool for: "@"
100013c79:	mov	r14, rdx
100013c7c:	mov	ecx, 0x1
100013c81:	call	0x1000138f3
100013c86:	mov	rdx, r14
100013c89:	mov	r14d, eax
100013c8c:	lea	r12d, [rbx + 0x2]
100013c90:	inc	edx
100013c92:	mov	r15, qword ptr [rbp - 0x58]
100013c96:	mov	rdi, qword ptr [r15 + 8*rbx + 0x10]
100013c9b:	add	rbx, 0x2
100013c9f:	mov	rcx, rbx
100013ca2:	test	rdi, rdi
100013ca5:	je	0x100013ccc
100013ca7:	mov	al, byte ptr [rdi]
100013ca9:	cmp	al, 0x40
100013cab:	jne	0x100013cc4
100013cad:	xor	eax, eax
100013caf:	mov	r13d, 0xfffffffa
100013cb5:	cmp	byte ptr [rdi + 0x1], 0x0
100013cb9:	je	0x100013b51
100013cbf:	jmp	0x100014440
100013cc4:	cmp	al, 0x2d
100013cc6:	jne	0x100014440
100013ccc:	dec	r12d
100013ccf:	inc	r12d
100013cd2:	xor	r13d, r13d
100013cd5:	cmp	r12d, r14d
100013cd8:	jg	0x100014573
100013cde:	mov	r10, qword ptr [rbp - 0x58]
100013ce2:	mov	qword ptr [rbp - 0x38], r12
100013ce6:	movsxd	rax, r12d
100013ce9:	mov	r12, qword ptr [r10 + 8*rax]
100013ced:	test	r12, r12
100013cf0:	je	0x100013cf8
100013cf2:	mov	r15, qword ptr [rbp + 0x18]
100013cf6:	jmp	0x100013d5d
100013cf8:	test	edx, edx
100013cfa:	mov	r15, qword ptr [rbp + 0x18]
100013cfe:	js	0x100013d38
100013d00:	mov	eax, edx
100013d02:	cmp	qword ptr [r10 + 8*rax], 0x0
100013d07:	mov	rbx, qword ptr [rbp + 0x10]
100013d0b:	mov	r12, qword ptr [rbp - 0x38]
100013d0f:	je	0x100013d40
100013d11:	xor	eax, eax
100013d13:	cmp	r13d, -0x5
100013d17:	sete	al
100013d1a:	mov	ecx, edx
100013d1c:	add	ecx, eax
100013d1e:	mov	edx, r12d
100013d21:	mov	r12d, ecx
100013d24:	jmp	0x100013d40
100013d26:	cmp	r13d, -0x2
100013d2a:	je	0x100013ccf
100013d2c:	cmp	r13d, -0x1
100013d30:	jne	0x100013cd5
100013d32:	add	r12d, 0x2
100013d36:	jmp	0x100013cd2
100013d38:	mov	rbx, qword ptr [rbp + 0x10]
100013d3c:	mov	r12, qword ptr [rbp - 0x38]
100013d40:	cmp	r12d, r14d
100013d43:	jg	0x1000145c3
100013d49:	mov	qword ptr [rbp - 0x38], r12
100013d4d:	movsxd	rax, r12d
100013d50:	mov	r12, qword ptr [r10 + 8*rax]
100013d54:	test	r12, r12
100013d57:	je	0x1000145d1
100013d5d:	test	edx, edx
100013d5f:	js	0x100013d6e
100013d61:	mov	eax, edx
100013d63:	cmp	qword ptr [r10 + 8*rax], 0x0
100013d68:	je	0x100014554
100013d6e:	cmp	byte ptr [r12], 0x2d
100013d73:	jne	0x100013e5c
100013d79:	mov	al, byte ptr [r12 + 0x1]
100013d7e:	cmp	al, 0x2d
100013d80:	je	0x100013e6a
100013d86:	test	al, al
100013d88:	je	0x100013e9c
100013d8e:	movsxd	r9, r13d
100013d91:	mov	rax, qword ptr [rbp - 0x40]
100013d95:	mov	qword ptr [rax], 0x0
100013d9c:	movsx	r8d, byte ptr [r12 + r9 + 0x1]
100013da2:	test	r8d, r8d
100013da5:	je	0x100013ec4
100013dab:	inc	r9
100013dae:	lea	rsi, [rip + 0x1475b]
100013db5:	cmp	qword ptr [rsi + 0x18], 0x0
100013dba:	mov	qword ptr [rbp - 0x48], rdx
100013dbe:	je	0x100013ee2
100013dc4:	lea	rdi, [r12 + 0x1]
100013dc9:	lea	rax, [rsi + 0x40]
100013dcd:	mov	ecx, 0xffffffff
100013dd2:	xor	r11d, r11d
100013dd5:	mov	r15d, dword ptr [rbp + 0x20]
100013dd9:	mov	edx, ecx
100013ddb:	mov	rcx, qword ptr [rax - 0x40]
100013ddf:	test	rcx, rcx
100013de2:	je	0x100013e01
100013de4:	cmp	byte ptr [rcx], r8b
100013de7:	jne	0x100013e01
100013de9:	mov	bl, byte ptr [rcx + 0x1]
100013dec:	mov	ecx, r11d
100013def:	test	bl, bl
100013df1:	je	0x100013e03
100013df3:	mov	ecx, edx
100013df5:	cmp	bl, byte ptr [r12 + r9 + 0x1]
100013dfa:	jne	0x100013e03
100013dfc:	jmp	0x100013f40
100013e01:	mov	ecx, edx
100013e03:	inc	r11d
100013e06:	cmp	qword ptr [rax], 0x0
100013e0a:	lea	rax, [rax + 0x28]
100013e0e:	jne	0x100013dd9
100013e10:	mov	r11d, ecx
100013e13:	test	r11d, r11d
100013e16:	mov	rdx, qword ptr [rbp - 0x48]
100013e1a:	lea	r13, [rip + 0x4766f]
100013e21:	js	0x100013ef3
100013e27:	movsxd	rax, r9d
100013e2a:	cmp	byte ptr [rdi + rax], 0x2d
100013e2e:	mov	ebx, r11d
100013e31:	mov	dword ptr [rbp - 0x30], r11d
100013e35:	jne	0x100013fa9
100013e3b:	lea	rax, [rbx + 4*rbx]
100013e3f:	cmp	dword ptr [rsi + 8*rax + 0x14], 0x0
100013e44:	je	0x100013f4c
100013e4a:	mov	rax, qword ptr [rbp - 0x68]
100013e4e:	mov	dword ptr [rax], 0x1
100013e54:	inc	r9d
100013e57:	jmp	0x100013fa9
100013e5c:	cmp	dword ptr [rip + 0x153b9], 0x0
100013e63:	jne	0x100013eb0
100013e65:	jmp	0x100014578
100013e6a:	cmp	byte ptr [r12 + 0x2], 0x0
100013e70:	jne	0x1000146b3
100013e76:	cmp	dword ptr [rip + 0x153a3], 0x0
100013e7d:	je	0x100013e9c
100013e7f:	test	edx, edx
100013e81:	mov	r12, qword ptr [rbp - 0x38]
100013e85:	cmovg	r12d, edx
100013e89:	dec	r12d
100013e8c:	mov	eax, 0x1
100013e91:	mov	r13d, 0xfffffff9
100013e97:	jmp	0x100013b51
100013e9c:	mov	dword ptr [r15], 0xffffffff
100013ea3:	cmp	dword ptr [rip + 0x15372], 0x0
100013eaa:	je	0x1000145e0
100013eb0:	test	edx, edx
100013eb2:	mov	r12, qword ptr [rbp - 0x38]
100013eb6:	cmovs	edx, r12d
100013eba:	inc	r12d
100013ebd:	xor	eax, eax
100013ebf:	jmp	0x100013b51
100013ec4:	mov	dword ptr [r15], 0xffffffff
100013ecb:	xor	eax, eax
100013ecd:	mov	qword ptr [rbp - 0x30], rax
100013ed1:	mov	r13d, 0xfffffffe
100013ed7:	xor	eax, eax
100013ed9:	mov	r12, qword ptr [rbp - 0x38]
100013edd:	jmp	0x100013b51
100013ee2:	mov	qword ptr [rbp - 0x60], r9
100013ee6:	mov	r15d, dword ptr [rbp + 0x20]
100013eea:	lea	r13, [rip + 0x4759f]
100013ef1:	jmp	0x100013ef7
100013ef3:	mov	qword ptr [rbp - 0x60], r9
100013ef7:	mov	edx, 0x17a1
100013efc:	mov	rdi, r13
100013eff:	xor	esi, esi
100013f01:	lea	rcx, [rip + 0x5e18]
100013f08:	xor	eax, eax
100013f0a:	call	0x100019680 ## symbol stub for: ___sprintf_chk
100013f0f:	test	r15d, r15d
100013f12:	mov	rbx, qword ptr [rbp + 0x10]
100013f16:	mov	r12, qword ptr [rbp - 0x38]
100013f1a:	jg	0x100014b1b
100013f20:	mov	edi, 0x10
100013f25:	mov	rsi, r13
100013f28:	call	0x100002e30
100013f2d:	xor	eax, eax
100013f2f:	mov	qword ptr [rbp - 0x30], rax
100013f33:	mov	rdx, qword ptr [rbp - 0x48]
100013f37:	mov	r9, qword ptr [rbp - 0x60]
100013f3b:	jmp	0x10001434e
100013f40:	add	r13d, 0x2
100013f44:	mov	r9d, r13d
100013f47:	jmp	0x100013e13
100013f4c:	mov	qword ptr [rbp - 0x60], rdi
100013f50:	mov	r13, r10
100013f53:	mov	r15, r9
100013f56:	cmp	dword ptr [rsi + 8*rax + 0x10], 0x0
100013f5b:	jne	0x100013f90
100013f5d:	lea	rdi, [rip + 0x4752c]
100013f64:	lea	rsi, [rip + 0x5cf5]
100013f6b:	mov	edx, dword ptr [rbp - 0x30]
100013f6e:	xor	ecx, ecx
100013f70:	call	0x100014bb8
100013f75:	cmp	dword ptr [rbp + 0x20], 0x0
100013f79:	jg	0x100014b1b
100013f7f:	mov	edi, 0x10
100013f84:	lea	rsi, [rip + 0x47505]
100013f8b:	call	0x100002e30
100013f90:	mov	rdx, qword ptr [rbp - 0x48]
100013f94:	lea	rsi, [rip + 0x14575]
100013f9b:	mov	r9, r15
100013f9e:	mov	r10, r13
100013fa1:	mov	r11d, dword ptr [rbp - 0x30]
100013fa5:	mov	rdi, qword ptr [rbp - 0x60]
100013fa9:	lea	r8, [rbx + 4*rbx]
100013fad:	mov	eax, dword ptr [rsi + 8*r8 + 0x10]
100013fb2:	dec	eax
100013fb4:	cmp	eax, 0x4
100013fb7:	ja	0x100014053
100013fbd:	lea	rcx, [rip + 0xbe0]
100013fc4:	movsxd	rax, dword ptr [rcx + 4*rax]
100013fc8:	add	rax, rcx
100013fcb:	jmp	rax
100013fcd:	mov	r13, r8
100013fd0:	movsxd	rax, r9d
100013fd3:	mov	dl, byte ptr [rax + r12 + 0x1]
100013fd8:	test	dl, dl
100013fda:	je	0x10001424e
100013fe0:	mov	ecx, 0x1
100013fe5:	cmp	dl, 0x3d
100013fe8:	jne	0x100013fef
100013fea:	mov	ecx, 0x2
100013fef:	add	r12, rax
100013ff2:	add	r12, rcx
100013ff5:	mov	rdi, r12
100013ff8:	call	0x100019830 ## symbol stub for: _strlen
100013ffd:	lea	rdi, [rax + 0x1]
100014001:	call	0x100019758 ## symbol stub for: _malloc
100014006:	mov	rcx, qword ptr [rbp - 0x40]
10001400a:	mov	qword ptr [rcx], rax
10001400d:	test	rax, rax
100014010:	jne	0x10001402a
100014012:	mov	edi, 0x4
100014017:	lea	rsi, [rip + 0xf7ea] ## literal pool for: "gso"
10001401e:	call	0x100002e30
100014023:	mov	rax, qword ptr [rbp - 0x40]
100014027:	mov	rax, qword ptr [rax]
10001402a:	mov	rdi, rax
10001402d:	mov	rsi, r12
100014030:	call	0x100019824 ## symbol stub for: _strcpy
100014035:	mov	r9d, 0xfffffffe
10001403b:	mov	rbx, qword ptr [rbp + 0x10]
10001403f:	mov	rdx, qword ptr [rbp - 0x48]
100014043:	mov	r12, qword ptr [rbp - 0x38]
100014047:	mov	r11d, dword ptr [rbp - 0x30]
10001404b:	mov	r8, r13
10001404e:	jmp	0x100014327
100014053:	mov	rbx, qword ptr [rbp + 0x10]
100014057:	mov	r12, qword ptr [rbp - 0x38]
10001405b:	jmp	0x100014327
100014060:	mov	qword ptr [rbp - 0x50], r8
100014064:	mov	rsi, r9
100014067:	movsxd	rax, r9d
10001406a:	mov	dl, byte ptr [rax + r12 + 0x1]
10001406f:	test	dl, dl
100014071:	je	0x100014364
100014077:	mov	ecx, 0x1
10001407c:	cmp	dl, 0x3d
10001407f:	jne	0x100014086
100014081:	mov	ecx, 0x2
100014086:	add	esi, ecx
100014088:	movsxd	rdx, esi
10001408b:	cmp	byte ptr [r12 + rdx], 0x0
100014090:	je	0x1000140da
100014092:	add	r12, rax
100014095:	mov	ebx, ecx
100014097:	add	rbx, r12
10001409a:	mov	rdi, rbx
10001409d:	call	0x100019830 ## symbol stub for: _strlen
1000140a2:	lea	rdi, [rax + 0x1]
1000140a6:	call	0x100019758 ## symbol stub for: _malloc
1000140ab:	mov	rcx, qword ptr [rbp - 0x40]
1000140af:	mov	qword ptr [rcx], rax
1000140b2:	test	rax, rax
1000140b5:	jne	0x1000140cf
1000140b7:	mov	edi, 0x4
1000140bc:	lea	rsi, [rip + 0xf745] ## literal pool for: "gso"
1000140c3:	call	0x100002e30
1000140c8:	mov	rax, qword ptr [rbp - 0x40]
1000140cc:	mov	rax, qword ptr [rax]
1000140cf:	mov	rdi, rax
1000140d2:	mov	rsi, rbx
1000140d5:	call	0x100019824 ## symbol stub for: _strcpy
1000140da:	mov	rbx, qword ptr [rbp + 0x10]
1000140de:	mov	rdx, qword ptr [rbp - 0x48]
1000140e2:	mov	r12, qword ptr [rbp - 0x38]
1000140e6:	mov	r9d, 0xfffffffe
1000140ec:	jmp	0x10001431f
1000140f1:	mov	qword ptr [rbp - 0x50], r8
1000140f5:	movsxd	rbx, r9d
1000140f8:	cmp	byte ptr [r12 + rbx + 0x1], 0x0
1000140fe:	je	0x1000142da
100014104:	mov	r13, rdi
100014107:	lea	r15, [rbx + 0x1]
10001410b:	mov	edi, 0x2
100014110:	call	0x100019758 ## symbol stub for: _malloc
100014115:	mov	rcx, qword ptr [rbp - 0x40]
100014119:	mov	qword ptr [rcx], rax
10001411c:	test	rax, rax
10001411f:	jne	0x100014139
100014121:	mov	edi, 0x4
100014126:	lea	rsi, [rip + 0xf6db] ## literal pool for: "gso"
10001412d:	call	0x100002e30
100014132:	mov	rax, qword ptr [rbp - 0x40]
100014136:	mov	rax, qword ptr [rax]
100014139:	mov	cl, byte ptr [r13 + rbx]
10001413e:	mov	byte ptr [rax], cl
100014140:	mov	rax, qword ptr [rbp - 0x40]
100014144:	mov	rax, qword ptr [rax]
100014147:	mov	byte ptr [rax + 0x1], 0x0
10001414b:	jmp	0x100014310
100014150:	mov	qword ptr [rbp - 0x50], r8
100014154:	mov	qword ptr [rbp - 0x60], r9
100014158:	movsxd	rax, r9d
10001415b:	lea	rcx, [rdi + rax]
10001415f:	mov	al, byte ptr [rdi + rax]
100014162:	cmp	al, 0x2d
100014164:	je	0x10001416d
100014166:	mov	r12, rcx
100014169:	cmp	al, 0x2b
10001416b:	jne	0x100014174
10001416d:	lea	r12, [rcx + 0x1]
100014171:	mov	al, byte ptr [rcx + 0x1]
100014174:	mov	qword ptr [rbp - 0x70], rcx
100014178:	test	al, al
10001417a:	js	0x1000141a0
10001417c:	mov	r15, r12
10001417f:	mov	rcx, qword ptr [rip + 0xfe7a] ## literal pool symbol address: __DefaultRuneLocale
100014186:	movzx	eax, al
100014189:	test	byte ptr [rcx + 4*rax + 0x3d], 0x4
10001418e:	je	0x10001419b
100014190:	mov	al, byte ptr [r15 + 0x1]
100014194:	inc	r15
100014197:	test	al, al
100014199:	jns	0x100014186
10001419b:	cmp	r15, r12
10001419e:	jne	0x1000141d6
1000141a0:	lea	rdi, [rip + 0x472e9]
1000141a7:	lea	rsi, [rip + 0x5b52]
1000141ae:	mov	edx, dword ptr [rbp - 0x30]
1000141b1:	xor	ecx, ecx
1000141b3:	call	0x100014bb8
1000141b8:	cmp	dword ptr [rbp + 0x20], 0x0
1000141bc:	jg	0x100014b1b
1000141c2:	mov	edi, 0x10
1000141c7:	lea	rsi, [rip + 0x472c2]
1000141ce:	call	0x100002e30
1000141d3:	mov	r15, r12
1000141d6:	sub	r15, qword ptr [rbp - 0x70]
1000141da:	mov	r12, r15
1000141dd:	shl	r12, 0x20
1000141e1:	movabs	rax, offset __mh_execute_header
1000141eb:	lea	rdi, [r12 + rax]
1000141ef:	sar	rdi, 0x20
1000141f3:	call	0x100019758 ## symbol stub for: _malloc
1000141f8:	mov	rbx, qword ptr [rbp - 0x40]
1000141fc:	mov	qword ptr [rbx], rax
1000141ff:	test	rax, rax
100014202:	jne	0x100014218
100014204:	mov	edi, 0x4
100014209:	lea	rsi, [rip + 0xf5f8] ## literal pool for: "gso"
100014210:	call	0x100002e30
100014215:	mov	rax, qword ptr [rbx]
100014218:	mov	r13, qword ptr [rbp - 0x60]
10001421c:	add	r13d, r15d
10001421f:	sar	r12, 0x20
100014223:	mov	rdi, rax
100014226:	mov	rsi, qword ptr [rbp - 0x70]
10001422a:	mov	rdx, r12
10001422d:	call	0x10001983c ## symbol stub for: _strncpy
100014232:	mov	r9, r13
100014235:	mov	rax, qword ptr [rbx]
100014238:	mov	byte ptr [rax + r12], 0x0
10001423d:	mov	rbx, qword ptr [rbp + 0x10]
100014241:	mov	rdx, qword ptr [rbp - 0x48]
100014245:	mov	r12, qword ptr [rbp - 0x38]
100014249:	jmp	0x10001431f
10001424e:	movsxd	rbx, dword ptr [rbp - 0x38]
100014252:	mov	rdi, qword ptr [r10 + 8*rbx + 0x8]
100014257:	test	rdi, rdi
10001425a:	je	0x1000143e2
100014260:	mov	r12, r10
100014263:	inc	rbx
100014266:	call	0x100019830 ## symbol stub for: _strlen
10001426b:	lea	rdi, [rax + 0x1]
10001426f:	call	0x100019758 ## symbol stub for: _malloc
100014274:	mov	rcx, qword ptr [rbp - 0x40]
100014278:	mov	qword ptr [rcx], rax
10001427b:	test	rax, rax
10001427e:	jne	0x100014298
100014280:	mov	edi, 0x4
100014285:	lea	rsi, [rip + 0xf57c] ## literal pool for: "gso"
10001428c:	call	0x100002e30
100014291:	mov	rax, qword ptr [rbp - 0x40]
100014295:	mov	rax, qword ptr [rax]
100014298:	lea	rcx, [rip + 0x14271]
10001429f:	lea	r15, [rcx + 8*r13]
1000142a3:	add	r15, 0x10
1000142a7:	mov	rsi, qword ptr [r12 + 8*rbx]
1000142ab:	mov	rdi, rax
1000142ae:	call	0x100019824 ## symbol stub for: _strcpy
1000142b3:	mov	r8, r13
1000142b6:	xor	r9d, r9d
1000142b9:	cmp	dword ptr [r15], 0x3
1000142bd:	setne	r9b
1000142c1:	add	r9d, r9d
1000142c4:	or	r9d, -0x3
1000142c8:	mov	rbx, qword ptr [rbp + 0x10]
1000142cc:	mov	rdx, qword ptr [rbp - 0x48]
1000142d0:	mov	r12, qword ptr [rbp - 0x38]
1000142d4:	mov	r11d, dword ptr [rbp - 0x30]
1000142d8:	jmp	0x100014327
1000142da:	mov	r15, r9
1000142dd:	lea	rdi, [rip + 0x471ac]
1000142e4:	lea	rsi, [rip + 0x59e5]
1000142eb:	mov	edx, dword ptr [rbp - 0x30]
1000142ee:	xor	ecx, ecx
1000142f0:	call	0x100014bb8
1000142f5:	cmp	dword ptr [rbp + 0x20], 0x0
1000142f9:	jg	0x100014b1b
1000142ff:	mov	edi, 0x10
100014304:	lea	rsi, [rip + 0x47185]
10001430b:	call	0x100002e30
100014310:	mov	rbx, qword ptr [rbp + 0x10]
100014314:	mov	rdx, qword ptr [rbp - 0x48]
100014318:	mov	r12, qword ptr [rbp - 0x38]
10001431c:	mov	r9, r15
10001431f:	mov	r11d, dword ptr [rbp - 0x30]
100014323:	mov	r8, qword ptr [rbp - 0x50]
100014327:	mov	rax, qword ptr [rbp + 0x18]
10001432b:	mov	dword ptr [rax], r11d
10001432e:	lea	rax, [rip + 0x141db]
100014335:	mov	rcx, qword ptr [rax + 8*r8 + 0x18]
10001433a:	mov	rax, rcx
10001433d:	mov	qword ptr [rbp - 0x30], rcx
100014341:	cmp	rcx, 0xfffe
100014348:	je	0x100014b2e
10001434e:	xor	eax, eax
100014350:	mov	r13d, 0xfffffffe
100014356:	test	r9d, r9d
100014359:	je	0x100013b51
10001435f:	jmp	0x100014520
100014364:	mov	r13, r10
100014367:	movsxd	r15, dword ptr [rbp - 0x38]
10001436b:	mov	rdi, qword ptr [r10 + 8*r15 + 0x8]
100014370:	test	rdi, rdi
100014373:	je	0x10001442c
100014379:	cmp	byte ptr [rdi], 0x2d
10001437c:	mov	rbx, qword ptr [rbp + 0x10]
100014380:	mov	rdx, qword ptr [rbp - 0x48]
100014384:	mov	r12, qword ptr [rbp - 0x38]
100014388:	mov	r9, rsi
10001438b:	mov	r11d, dword ptr [rbp - 0x30]
10001438f:	mov	r8, qword ptr [rbp - 0x50]
100014393:	je	0x100014327
100014395:	inc	r15
100014398:	call	0x100019830 ## symbol stub for: _strlen
10001439d:	lea	rdi, [rax + 0x1]
1000143a1:	call	0x100019758 ## symbol stub for: _malloc
1000143a6:	mov	rcx, qword ptr [rbp - 0x40]
1000143aa:	mov	qword ptr [rcx], rax
1000143ad:	test	rax, rax
1000143b0:	jne	0x1000143ca
1000143b2:	mov	edi, 0x4
1000143b7:	lea	rsi, [rip + 0xf44a] ## literal pool for: "gso"
1000143be:	call	0x100002e30
1000143c3:	mov	rax, qword ptr [rbp - 0x40]
1000143c7:	mov	rax, qword ptr [rax]
1000143ca:	mov	rsi, qword ptr [r13 + 8*r15]
1000143cf:	mov	rdi, rax
1000143d2:	call	0x100019824 ## symbol stub for: _strcpy
1000143d7:	mov	r9d, 0xffffffff
1000143dd:	jmp	0x10001423d
1000143e2:	mov	r15, r9
1000143e5:	lea	rdi, [rip + 0x470a4]
1000143ec:	lea	rsi, [rip + 0x588d]
1000143f3:	mov	edx, dword ptr [rbp - 0x30]
1000143f6:	xor	ecx, ecx
1000143f8:	call	0x100014bb8
1000143fd:	cmp	dword ptr [rbp + 0x20], 0x0
100014401:	jg	0x100014b1b
100014407:	mov	edi, 0x10
10001440c:	lea	rsi, [rip + 0x4707d]
100014413:	call	0x100002e30
100014418:	mov	rbx, qword ptr [rbp + 0x10]
10001441c:	mov	rdx, qword ptr [rbp - 0x48]
100014420:	mov	r12, qword ptr [rbp - 0x38]
100014424:	mov	r9, r15
100014427:	jmp	0x100014047
10001442c:	mov	rbx, qword ptr [rbp + 0x10]
100014430:	mov	rdx, qword ptr [rbp - 0x48]
100014434:	mov	r12, qword ptr [rbp - 0x38]
100014438:	mov	r9, rsi
10001443b:	jmp	0x10001431f
100014440:	mov	r13, rcx
100014443:	mov	qword ptr [rbp - 0x48], rdx
100014447:	call	0x100019830 ## symbol stub for: _strlen
10001444c:	lea	rdi, [rax + 0x1]
100014450:	call	0x100019758 ## symbol stub for: _malloc
100014455:	mov	rbx, qword ptr [rbp - 0x40]
100014459:	mov	qword ptr [rbx], rax
10001445c:	test	rax, rax
10001445f:	jne	0x100014479
100014461:	lea	rsi, [rip + 0xf38a] ## literal pool for: "go"
100014468:	mov	edi, 0x4
10001446d:	call	0x100002e30
100014472:	mov	rax, qword ptr [rbx]
100014475:	mov	r15, qword ptr [rbp - 0x58]
100014479:	mov	rsi, qword ptr [r15 + 8*r13]
10001447d:	mov	rdi, rax
100014480:	call	0x100019824 ## symbol stub for: _strcpy
100014485:	mov	r9d, 0xfffffffc
10001448b:	mov	rbx, qword ptr [rbp + 0x10]
10001448f:	mov	rdx, qword ptr [rbp - 0x48]
100014493:	jmp	0x100014520
100014498:	lea	r15d, [r12 + 0x1]
10001449d:	cmp	r12d, r14d
1000144a0:	jge	0x100014510
1000144a2:	mov	rax, qword ptr [rbp - 0x58]
1000144a6:	movsxd	rcx, r15d
1000144a9:	mov	r12, qword ptr [rax + 8*rcx]
1000144ad:	test	r12, r12
1000144b0:	je	0x100014510
1000144b2:	mov	qword ptr [rbp - 0x48], rdx
1000144b6:	mov	rdi, r12
1000144b9:	call	0x100019830 ## symbol stub for: _strlen
1000144be:	lea	rdi, [rax + 0x1]
1000144c2:	call	0x100019758 ## symbol stub for: _malloc
1000144c7:	mov	rbx, qword ptr [rbp - 0x40]
1000144cb:	mov	qword ptr [rbx], rax
1000144ce:	test	rax, rax
1000144d1:	jne	0x1000144e7
1000144d3:	lea	rsi, [rip + 0xf318] ## literal pool for: "go"
1000144da:	mov	edi, 0x4
1000144df:	call	0x100002e30
1000144e4:	mov	rax, qword ptr [rbx]
1000144e7:	mov	rdi, rax
1000144ea:	mov	rsi, r12
1000144ed:	call	0x100019824 ## symbol stub for: _strcpy
1000144f2:	mov	rax, qword ptr [rbp + 0x18]
1000144f6:	mov	dword ptr [rax], 0xffffffff
1000144fc:	mov	eax, 0xffff
100014501:	mov	qword ptr [rbp - 0x30], rax
100014505:	mov	r9d, r13d
100014508:	mov	r12d, r15d
10001450b:	jmp	0x10001448b
100014510:	xor	eax, eax
100014512:	mov	qword ptr [rbp - 0x30], rax
100014516:	mov	r9d, r13d
100014519:	mov	r12d, r15d
10001451c:	mov	rbx, qword ptr [rbp + 0x10]
100014520:	mov	rax, qword ptr [rbp - 0x58]
100014524:	mov	rcx, qword ptr [rbp - 0x80]
100014528:	mov	qword ptr [rcx], rax
10001452b:	mov	rax, qword ptr [rbp - 0x90]
100014532:	mov	dword ptr [rax], r14d
100014535:	mov	dword ptr [rbx], edx
100014537:	mov	rax, qword ptr [rbp - 0x88]
10001453e:	mov	dword ptr [rax], r12d
100014541:	mov	rax, qword ptr [rbp - 0x98]
100014548:	mov	dword ptr [rax], r9d
10001454b:	mov	rax, qword ptr [rbp - 0x30]
10001454f:	jmp	0x100013abb
100014554:	xor	eax, eax
100014556:	cmp	r13d, -0x5
10001455a:	sete	al
10001455d:	mov	r12, qword ptr [rbp - 0x38]
100014561:	add	r12d, eax
100014564:	cmp	r12d, r14d
100014567:	jle	0x10001463e
10001456d:	xor	eax, eax
10001456f:	mov	qword ptr [rbp - 0x30], rax
100014573:	mov	r9d, r13d
100014576:	jmp	0x10001451c
100014578:	mov	r15, rdx
10001457b:	mov	rdi, r12
10001457e:	call	0x100019830 ## symbol stub for: _strlen
100014583:	lea	rdi, [rax + 0x1]
100014587:	call	0x100019758 ## symbol stub for: _malloc
10001458c:	mov	rbx, qword ptr [rbp - 0x40]
100014590:	mov	qword ptr [rbx], rax
100014593:	test	rax, rax
100014596:	jne	0x1000145ac
100014598:	lea	rsi, [rip + 0xf253] ## literal pool for: "go"
10001459f:	mov	edi, 0x4
1000145a4:	call	0x100002e30
1000145a9:	mov	rax, qword ptr [rbx]
1000145ac:	mov	rdi, rax
1000145af:	mov	rsi, r12
1000145b2:	call	0x100019824 ## symbol stub for: _strcpy
1000145b7:	mov	rax, qword ptr [rbp + 0x18]
1000145bb:	mov	dword ptr [rax], 0xffffffff
1000145c1:	jmp	0x10001461f
1000145c3:	mov	r9d, r13d
1000145c6:	xor	eax, eax
1000145c8:	mov	qword ptr [rbp - 0x30], rax
1000145cc:	jmp	0x100014520
1000145d1:	mov	r9d, r13d
1000145d4:	xor	eax, eax
1000145d6:	mov	qword ptr [rbp - 0x30], rax
1000145da:	mov	rbx, qword ptr [rbp + 0x10]
1000145de:	jmp	0x100014635
1000145e0:	mov	r15, rdx
1000145e3:	mov	rdi, r12
1000145e6:	call	0x100019830 ## symbol stub for: _strlen
1000145eb:	lea	rdi, [rax + 0x1]
1000145ef:	call	0x100019758 ## symbol stub for: _malloc
1000145f4:	mov	rbx, qword ptr [rbp - 0x40]
1000145f8:	mov	qword ptr [rbx], rax
1000145fb:	test	rax, rax
1000145fe:	jne	0x100014614
100014600:	lea	rsi, [rip + 0xf1eb] ## literal pool for: "go"
100014607:	mov	edi, 0x4
10001460c:	call	0x100002e30
100014611:	mov	rax, qword ptr [rbx]
100014614:	mov	rdi, rax
100014617:	mov	rsi, r12
10001461a:	call	0x100019824 ## symbol stub for: _strcpy
10001461f:	mov	eax, 0xffff
100014624:	mov	qword ptr [rbp - 0x30], rax
100014628:	mov	r9d, 0xfffffffb
10001462e:	mov	rbx, qword ptr [rbp + 0x10]
100014632:	mov	rdx, r15
100014635:	mov	r12, qword ptr [rbp - 0x38]
100014639:	jmp	0x100014520
10001463e:	movsxd	r15, r12d
100014641:	mov	rdi, qword ptr [r10 + 8*r15]
100014645:	test	rdi, rdi
100014648:	mov	rbx, qword ptr [rbp + 0x10]
10001464c:	je	0x100014751
100014652:	mov	qword ptr [rbp - 0x38], r12
100014656:	mov	r12, rdx
100014659:	mov	r13, r10
10001465c:	call	0x100019830 ## symbol stub for: _strlen
100014661:	lea	rdi, [rax + 0x1]
100014665:	call	0x100019758 ## symbol stub for: _malloc
10001466a:	mov	rcx, r13
10001466d:	mov	r13, qword ptr [rbp - 0x40]
100014671:	mov	qword ptr [r13], rax
100014675:	test	rax, rax
100014678:	jne	0x100014693
10001467a:	lea	rsi, [rip + 0xf171] ## literal pool for: "go"
100014681:	mov	edi, 0x4
100014686:	call	0x100002e30
10001468b:	mov	rax, qword ptr [r13]
10001468f:	mov	rcx, qword ptr [rbp - 0x58]
100014693:	mov	rsi, qword ptr [rcx + 8*r15]
100014697:	mov	rdi, rax
10001469a:	call	0x100019824 ## symbol stub for: _strcpy
10001469f:	mov	eax, 0xffff
1000146a4:	mov	qword ptr [rbp - 0x30], rax
1000146a8:	mov	r9d, 0xfffffffb
1000146ae:	mov	rdx, r12
1000146b1:	jmp	0x100014635
1000146b3:	movsxd	rcx, dword ptr [rbp - 0x38]
1000146b7:	mov	rax, qword ptr [rbp - 0x40]
1000146bb:	mov	qword ptr [rax], 0x0
1000146c2:	mov	r12, qword ptr [r10 + 8*rcx]
1000146c6:	test	r12, r12
1000146c9:	je	0x10001475f
1000146cf:	mov	qword ptr [rbp - 0x78], rcx
1000146d3:	mov	qword ptr [rbp - 0x70], r10
1000146d7:	mov	qword ptr [rbp - 0x48], rdx
1000146db:	mov	rdi, r12
1000146de:	call	0x100019830 ## symbol stub for: _strlen
1000146e3:	lea	rdi, [rax + 0x1]
1000146e7:	call	0x100019758 ## symbol stub for: _malloc
1000146ec:	mov	rbx, rax
1000146ef:	test	rax, rax
1000146f2:	jne	0x100014711
1000146f4:	lea	rsi, [rip + 0xf0fa] ## literal pool for: "glo"
1000146fb:	mov	edi, 0x4
100014700:	call	0x100002e30
100014705:	mov	rax, qword ptr [rbp - 0x70]
100014709:	mov	rcx, qword ptr [rbp - 0x78]
10001470d:	mov	r12, qword ptr [rax + 8*rcx]
100014711:	mov	rdi, rbx
100014714:	mov	rsi, r12
100014717:	call	0x100019824 ## symbol stub for: _strcpy
10001471c:	lea	r8, [rbx + 0x2]
100014720:	mov	r13, qword ptr [rbp - 0x40]
100014724:	mov	qword ptr [r13], 0x0
10001472c:	mov	qword ptr [rbp - 0x60], rbx
100014730:	add	rbx, 0x3
100014734:	mov	rax, r8
100014737:	mov	rcx, r8
10001473a:	mov	dl, byte ptr [rbx - 0x1]
10001473d:	test	dl, dl
10001473f:	je	0x100014774
100014741:	cmp	dl, 0x3d
100014744:	je	0x100014778
100014746:	mov	rax, rcx
100014749:	inc	rcx
10001474c:	inc	rbx
10001474f:	jmp	0x10001473a
100014751:	xor	eax, eax
100014753:	mov	qword ptr [rbp - 0x30], rax
100014757:	mov	r9d, r13d
10001475a:	jmp	0x100014520
10001475f:	mov	dword ptr [r15], 0xffffffff
100014766:	xor	eax, eax
100014768:	mov	qword ptr [rbp - 0x30], rax
10001476c:	mov	r9d, r13d
10001476f:	jmp	0x1000145da
100014774:	xor	ebx, ebx
100014776:	jmp	0x10001477c
100014778:	mov	byte ptr [rbx - 0x1], 0x0
10001477c:	cmp	byte ptr [rax], 0x2d
10001477f:	jne	0x100014790
100014781:	mov	rcx, qword ptr [rbp - 0x68]
100014785:	mov	dword ptr [rcx], 0x1
10001478b:	mov	byte ptr [rax], 0x0
10001478e:	jmp	0x10001479a
100014790:	mov	rax, qword ptr [rbp - 0x68]
100014794:	mov	dword ptr [rax], 0x0
10001479a:	lea	rax, [rip + 0x13d6f]
1000147a1:	cmp	qword ptr [rax + 0x18], 0x0
1000147a6:	mov	qword ptr [rbp - 0x50], rbx
1000147aa:	je	0x10001487a
1000147b0:	lea	rax, [rip + 0x13d59]
1000147b7:	lea	r15, [rax + 0x40]
1000147bb:	mov	edx, 0xffffffff
1000147c0:	xor	r13d, r13d
1000147c3:	mov	r12, qword ptr [r15 - 0x38]
1000147c7:	test	r12, r12
1000147ca:	je	0x10001485c
1000147d0:	mov	dword ptr [rbp - 0x30], edx
1000147d3:	mov	rdi, r12
1000147d6:	mov	rsi, r8
1000147d9:	mov	rbx, r8
1000147dc:	call	0x10001981e ## symbol stub for: _strcmp
1000147e1:	test	eax, eax
1000147e3:	je	0x1000148c1
1000147e9:	mov	rdi, rbx
1000147ec:	call	0x100019830 ## symbol stub for: _strlen
1000147f1:	mov	rdi, r12
1000147f4:	mov	r12, rbx
1000147f7:	mov	rsi, rbx
1000147fa:	mov	rdx, rax
1000147fd:	call	0x100019836 ## symbol stub for: _strncmp
100014802:	test	eax, eax
100014804:	je	0x10001480b
100014806:	mov	edx, dword ptr [rbp - 0x30]
100014809:	jmp	0x100014859
10001480b:	cmp	dword ptr [rbp - 0x30], 0x0
10001480f:	mov	edx, r13d
100014812:	mov	r8, r12
100014815:	lea	rbx, [rip + 0x46c74]
10001481c:	js	0x10001485c
10001481e:	mov	edx, 0x17a1
100014823:	mov	rdi, rbx
100014826:	xor	esi, esi
100014828:	lea	rcx, [rip + 0x53f1]
10001482f:	xor	eax, eax
100014831:	call	0x100019680 ## symbol stub for: ___sprintf_chk
100014836:	mov	rdi, qword ptr [rbp - 0x60]
10001483a:	call	0x100019716 ## symbol stub for: _free
10001483f:	cmp	dword ptr [rbp + 0x20], 0x0
100014843:	jg	0x100014b1b
100014849:	mov	edi, 0x10
10001484e:	mov	rsi, rbx
100014851:	call	0x100002e30
100014856:	mov	edx, r13d
100014859:	mov	r8, r12
10001485c:	inc	r13d
10001485f:	cmp	qword ptr [r15], 0x0
100014863:	lea	r15, [r15 + 0x28]
100014867:	jne	0x1000147c3
10001486d:	cmp	edx, -0x1
100014870:	mov	r15, qword ptr [rbp + 0x18]
100014874:	mov	r13, qword ptr [rbp - 0x40]
100014878:	jne	0x1000148cc
10001487a:	lea	rdi, [rip + 0x46c0f]
100014881:	lea	rcx, [rip + 0x53b8]
100014888:	mov	edx, 0x17a1
10001488d:	xor	esi, esi
10001488f:	xor	eax, eax
100014891:	call	0x100019680 ## symbol stub for: ___sprintf_chk
100014896:	mov	rdi, qword ptr [rbp - 0x60]
10001489a:	call	0x100019716 ## symbol stub for: _free
10001489f:	cmp	dword ptr [rbp + 0x20], 0x0
1000148a3:	jg	0x100014b1b
1000148a9:	lea	rsi, [rip + 0x46be0]
1000148b0:	mov	edi, 0x10
1000148b5:	call	0x100002e30
1000148ba:	mov	edx, 0xffffffff
1000148bf:	jmp	0x1000148cc
1000148c1:	mov	edx, r13d
1000148c4:	mov	r15, qword ptr [rbp + 0x18]
1000148c8:	mov	r13, qword ptr [rbp - 0x40]
1000148cc:	mov	r12, qword ptr [rbp - 0x60]
1000148d0:	mov	rax, qword ptr [rbp - 0x68]
1000148d4:	cmp	dword ptr [rax], 0x0
1000148d7:	movsxd	rbx, edx
1000148da:	mov	dword ptr [rbp - 0x30], edx
1000148dd:	je	0x1000148f5
1000148df:	lea	rax, [rbx + 4*rbx]
1000148e3:	lea	rcx, [rip + 0x13c26]
1000148ea:	cmp	dword ptr [rcx + 8*rax + 0x14], 0x0
1000148ef:	je	0x1000149db
1000148f5:	lea	rcx, [rbx + 4*rbx]
1000148f9:	lea	rax, [rip + 0x13c10]
100014900:	mov	qword ptr [rbp - 0x68], rcx
100014904:	mov	eax, dword ptr [rax + 8*rcx + 0x10]
100014908:	lea	ecx, [rax - 0x3]
10001490b:	cmp	ecx, 0x3
10001490e:	jb	0x100014980
100014910:	cmp	eax, 0x1
100014913:	je	0x100014980
100014915:	cmp	eax, 0x2
100014918:	mov	rcx, qword ptr [rbp - 0x50]
10001491c:	mov	r13d, 0xfffffffe
100014922:	jne	0x100014aa5
100014928:	test	rcx, rcx
10001492b:	je	0x100014b4f
100014931:	mov	rdi, qword ptr [rbp - 0x50]
100014935:	call	0x100019830 ## symbol stub for: _strlen
10001493a:	lea	rdi, [rax + 0x1]
10001493e:	call	0x100019758 ## symbol stub for: _malloc
100014943:	mov	rcx, qword ptr [rbp - 0x40]
100014947:	mov	qword ptr [rcx], rax
10001494a:	test	rax, rax
10001494d:	jne	0x10001496f
10001494f:	mov	rdi, r12
100014952:	call	0x100019716 ## symbol stub for: _free
100014957:	lea	rsi, [rip + 0xee97] ## literal pool for: "glo"
10001495e:	mov	edi, 0x4
100014963:	call	0x100002e30
100014968:	mov	rax, qword ptr [rbp - 0x40]
10001496c:	mov	rax, qword ptr [rax]
10001496f:	mov	rdi, rax
100014972:	mov	rsi, qword ptr [rbp - 0x50]
100014976:	call	0x100019824 ## symbol stub for: _strcpy
10001497b:	jmp	0x100014b4f
100014980:	mov	rdi, qword ptr [rbp - 0x50]
100014984:	test	rdi, rdi
100014987:	je	0x100014a1b
10001498d:	mov	rbx, r12
100014990:	call	0x100019830 ## symbol stub for: _strlen
100014995:	lea	rdi, [rax + 0x1]
100014999:	call	0x100019758 ## symbol stub for: _malloc
10001499e:	mov	qword ptr [r13], rax
1000149a2:	test	rax, rax
1000149a5:	jne	0x1000149c4
1000149a7:	mov	rdi, rbx
1000149aa:	call	0x100019716 ## symbol stub for: _free
1000149af:	lea	rsi, [rip + 0xee3f] ## literal pool for: "glo"
1000149b6:	mov	edi, 0x4
1000149bb:	call	0x100002e30
1000149c0:	mov	rax, qword ptr [r13]
1000149c4:	mov	rdi, rax
1000149c7:	mov	rsi, qword ptr [rbp - 0x50]
1000149cb:	call	0x100019824 ## symbol stub for: _strcpy
1000149d0:	mov	r13d, 0xfffffffe
1000149d6:	jmp	0x100014b56
1000149db:	lea	rdi, [rip + 0x46aae]
1000149e2:	lea	rsi, [rip + 0x5277]
1000149e9:	mov	ecx, 0x1
1000149ee:	call	0x100014bb8
1000149f3:	mov	rdi, r12
1000149f6:	call	0x100019716 ## symbol stub for: _free
1000149fb:	cmp	dword ptr [rbp + 0x20], 0x0
1000149ff:	jg	0x100014b1b
100014a05:	lea	rsi, [rip + 0x46a84]
100014a0c:	mov	edi, 0x10
100014a11:	call	0x100002e30
100014a16:	jmp	0x1000148f5
100014a1b:	mov	rax, qword ptr [rbp - 0x70]
100014a1f:	mov	rbx, qword ptr [rbp - 0x78]
100014a23:	mov	rdi, qword ptr [rax + 8*rbx + 0x8]
100014a28:	test	rdi, rdi
100014a2b:	je	0x100014af2
100014a31:	lea	rax, [rip + 0x13ad8]
100014a38:	mov	rcx, qword ptr [rbp - 0x68]
100014a3c:	lea	r15, [rax + 8*rcx]
100014a40:	add	r15, 0x10
100014a44:	inc	rbx
100014a47:	call	0x100019830 ## symbol stub for: _strlen
100014a4c:	lea	rdi, [rax + 0x1]
100014a50:	call	0x100019758 ## symbol stub for: _malloc
100014a55:	mov	qword ptr [r13], rax
100014a59:	test	rax, rax
100014a5c:	jne	0x100014a7e
100014a5e:	mov	rdi, r12
100014a61:	call	0x100019716 ## symbol stub for: _free
100014a66:	lea	rsi, [rip + 0xed88] ## literal pool for: "glo"
100014a6d:	mov	edi, 0x4
100014a72:	call	0x100002e30
100014a77:	mov	rax, qword ptr [rbp - 0x40]
100014a7b:	mov	rax, qword ptr [rax]
100014a7e:	mov	rcx, qword ptr [rbp - 0x70]
100014a82:	mov	rsi, qword ptr [rcx + 8*rbx]
100014a86:	mov	rdi, rax
100014a89:	call	0x100019824 ## symbol stub for: _strcpy
100014a8e:	xor	r13d, r13d
100014a91:	cmp	dword ptr [r15], 0x3
100014a95:	setne	r13b
100014a99:	add	r13d, r13d
100014a9c:	or	r13d, -0x3
100014aa0:	jmp	0x100014b4f
100014aa5:	test	rcx, rcx
100014aa8:	je	0x100014b4f
100014aae:	test	eax, eax
100014ab0:	jne	0x100014b4f
100014ab6:	lea	rdi, [rip + 0x469d3]
100014abd:	lea	rsi, [rip + 0x51dc]
100014ac4:	mov	edx, dword ptr [rbp - 0x30]
100014ac7:	mov	ecx, 0x1
100014acc:	call	0x100014bb8
100014ad1:	mov	rdi, r12
100014ad4:	call	0x100019716 ## symbol stub for: _free
100014ad9:	cmp	dword ptr [rbp + 0x20], 0x0
100014add:	jg	0x100014b1b
100014adf:	lea	rsi, [rip + 0x469aa]
100014ae6:	mov	edi, 0x10
100014aeb:	call	0x100002e30
100014af0:	jmp	0x100014b4f
100014af2:	lea	rdi, [rip + 0x46997]
100014af9:	lea	rsi, [rip + 0x5180]
100014b00:	mov	edx, dword ptr [rbp - 0x30]
100014b03:	mov	ecx, 0x1
100014b08:	call	0x100014bb8
100014b0d:	mov	rdi, r12
100014b10:	call	0x100019716 ## symbol stub for: _free
100014b15:	cmp	dword ptr [rbp + 0x20], 0x0
100014b19:	jle	0x100014b38
100014b1b:	lea	rdi, [rip + 0x4696e]
100014b22:	lea	rsi, [rip + 0x5c8e] ## literal pool for: ""
100014b29:	call	0x1000034f4
100014b2e:	mov	eax, 0xfffe
100014b33:	jmp	0x100013abb
100014b38:	lea	rsi, [rip + 0x46951]
100014b3f:	mov	edi, 0x10
100014b44:	call	0x100002e30
100014b49:	mov	r13d, 0xfffffffe
100014b4f:	mov	r15, qword ptr [rbp + 0x18]
100014b53:	mov	rbx, r12
100014b56:	mov	rdi, rbx
100014b59:	call	0x100019716 ## symbol stub for: _free
100014b5e:	mov	eax, dword ptr [rbp - 0x30]
100014b61:	mov	dword ptr [r15], eax
100014b64:	lea	rax, [rip + 0x139a5]
100014b6b:	mov	rcx, qword ptr [rbp - 0x68]
100014b6f:	mov	rdx, qword ptr [rax + 8*rcx + 0x18]
100014b74:	mov	eax, 0xfffe
100014b79:	mov	rcx, rdx
100014b7c:	mov	qword ptr [rbp - 0x30], rdx
100014b80:	cmp	rdx, 0xfffe
100014b87:	mov	rbx, qword ptr [rbp + 0x10]
100014b8b:	mov	rdx, qword ptr [rbp - 0x48]
100014b8f:	mov	r12, qword ptr [rbp - 0x38]
100014b93:	mov	r9, r13
100014b96:	je	0x100013abb
100014b9c:	jmp	0x100014520
100014ba1:	nop	dword ptr [rax]
100014ba4:	sub	esp, esi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100014ba8:	mov	esp, 0x29fffff4
100014bad:	hlt
	.byte 0xff #bad opcode
100014baf:	dec	dword ptr [rbp - 0xb]
	.byte 0xff #bad opcode
100014bb3:	jmp	[rbp + 8*rsi + 0x4855ffff]
100014bba:	mov	ebp, esp
100014bbc:	push	r14
100014bbe:	push	rbx
100014bbf:	sub	rsp, 0x40
100014bc3:	mov	r14, rsi
100014bc6:	mov	rbx, rdi
100014bc9:	mov	rax, qword ptr [rip + 0xf440] ## literal pool symbol address: ___stack_chk_guard
100014bd0:	mov	rax, qword ptr [rax]
100014bd3:	mov	qword ptr [rbp - 0x18], rax
100014bd7:	movsxd	rax, edx
100014bda:	lea	rax, [rax + 4*rax]
100014bde:	lea	rdx, [rip + 0x1392b]
100014be5:	lea	rsi, [rdx + 8*rax]
100014be9:	mov	r9, qword ptr [rsi + 0x20]
100014bed:	test	r9, r9
100014bf0:	je	0x100014c03
100014bf2:	cmp	byte ptr [r9], 0x0
100014bf6:	je	0x100014c03
100014bf8:	test	ecx, ecx
100014bfa:	je	0x100014c2c
100014bfc:	mov	r8, qword ptr [rdx + 8*rax + 0x8]
100014c01:	jmp	0x100014c2f
100014c03:	test	ecx, ecx
100014c05:	je	0x100014c0e
100014c07:	mov	r8, qword ptr [rdx + 8*rax + 0x8]
100014c0c:	jmp	0x100014c11
100014c0e:	mov	r8, qword ptr [rsi]
100014c11:	lea	rcx, [rip + 0xebeb] ## literal pool for: "'%s'"
100014c18:	lea	rdi, [rbp - 0x50]
100014c1c:	mov	edx, 0x32
100014c21:	xor	esi, esi
100014c23:	xor	eax, eax
100014c25:	call	0x100019680 ## symbol stub for: ___sprintf_chk
100014c2a:	jmp	0x100014c48
100014c2c:	mov	r8, qword ptr [rsi]
100014c2f:	lea	rcx, [rip + 0xebc3] ## literal pool for: "'%s' (%s)"
100014c36:	lea	rdi, [rbp - 0x50]
100014c3a:	mov	edx, 0x32
100014c3f:	xor	esi, esi
100014c41:	xor	eax, eax
100014c43:	call	0x100019680 ## symbol stub for: ___sprintf_chk
100014c48:	lea	rdx, [rbp - 0x50]
100014c4c:	mov	rdi, rbx
100014c4f:	mov	rsi, r14
100014c52:	xor	eax, eax
100014c54:	call	0x1000197fa ## symbol stub for: _sprintf
100014c59:	mov	rax, qword ptr [rip + 0xf3b0] ## literal pool symbol address: ___stack_chk_guard
100014c60:	mov	rax, qword ptr [rax]
100014c63:	cmp	rax, qword ptr [rbp - 0x18]
100014c67:	jne	0x100014c72
100014c69:	add	rsp, 0x40
100014c6d:	pop	rbx
100014c6e:	pop	r14
100014c70:	pop	rbp
100014c71:	ret
100014c72:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
100014c77:	nop	word ptr [rax + rax]
100014c80:	push	rbp
100014c81:	mov	rbp, rsp
100014c84:	push	r15
100014c86:	push	r14
100014c88:	push	rbx
100014c89:	push	rax
100014c8a:	test	rdi, rdi
100014c8d:	je	0x100014ce8
100014c8f:	mov	rbx, rdi
100014c92:	mov	rsi, -0x1
100014c99:	mov	edx, 0x1
100014c9e:	call	0x10001971c ## symbol stub for: _fseeko
100014ca3:	xor	r14d, r14d
100014ca6:	test	eax, eax
100014ca8:	jne	0x100014cee
100014caa:	mov	rdi, rbx
100014cad:	call	0x100019728 ## symbol stub for: _ftello
100014cb2:	cmp	rax, -0x1
100014cb6:	je	0x100014cee
100014cb8:	mov	r15, rax
100014cbb:	mov	esi, 0x1
100014cc0:	mov	rdi, rbx
100014cc3:	mov	edx, 0x1
100014cc8:	call	0x10001971c ## symbol stub for: _fseeko
100014ccd:	test	eax, eax
100014ccf:	jne	0x100014cee
100014cd1:	mov	rdi, rbx
100014cd4:	call	0x100019728 ## symbol stub for: _ftello
100014cd9:	inc	r15
100014cdc:	xor	r14d, r14d
100014cdf:	cmp	rax, r15
100014ce2:	sete	r14b
100014ce6:	jmp	0x100014cee
100014ce8:	mov	r14d, 0x1
100014cee:	mov	eax, r14d
100014cf1:	add	rsp, 0x8
100014cf5:	pop	rbx
100014cf6:	pop	r14
100014cf8:	pop	r15
100014cfa:	pop	rbp
100014cfb:	ret
100014cfc:	push	rbp
100014cfd:	mov	rbp, rsp
100014d00:	mov	rax, rdi
100014d03:	mov	cl, byte ptr [rax]
100014d05:	cmp	cl, 0x5a
100014d08:	jle	0x100014d1a
100014d0a:	cmp	cl, 0x5c
100014d0d:	jne	0x100014d2a
100014d0f:	cmp	byte ptr [rax + 0x1], 0x0
100014d13:	je	0x100014d2f
100014d15:	inc	rax
100014d18:	jmp	0x100014d2f
100014d1a:	test	cl, cl
100014d1c:	je	0x100014d34
100014d1e:	cmp	cl, 0x2a
100014d21:	je	0x100014d36
100014d23:	cmp	cl, 0x3f
100014d26:	jne	0x100014d2f
100014d28:	jmp	0x100014d36
100014d2a:	cmp	cl, 0x5b
100014d2d:	je	0x100014d36
100014d2f:	inc	rax
100014d32:	jmp	0x100014d03
100014d34:	xor	eax, eax
100014d36:	pop	rbp
100014d37:	ret
100014d38:	push	rbp
100014d39:	mov	rbp, rsp
100014d3c:	call	0x100014d4d
100014d41:	xor	ecx, ecx
100014d43:	cmp	eax, 0x1
100014d46:	sete	cl
100014d49:	mov	eax, ecx
100014d4b:	pop	rbp
100014d4c:	ret
100014d4d:	push	rbp
100014d4e:	mov	rbp, rsp
100014d51:	push	r15
100014d53:	push	r14
100014d55:	push	r13
100014d57:	push	r12
100014d59:	push	rbx
100014d5a:	sub	rsp, 0x18
100014d5e:	mov	dword ptr [rbp - 0x30], edx
100014d61:	mov	r15, rsi
100014d64:	mov	r12, rdi
100014d67:	lea	rax, [rip + 0x1495a]
100014d6e:	lea	rcx, [rip + 0x1494b]
100014d75:	mov	ecx, dword ptr [rcx]
100014d77:	mov	dword ptr [rbp - 0x34], ecx
100014d7a:	test	ecx, ecx
100014d7c:	sete	cl
100014d7f:	lea	rdx, [rip + 0x1493e]
100014d86:	cmp	dword ptr [rdx], 0x0
100014d89:	mov	r10d, dword ptr [rax]
100014d8c:	setne	r11b
100014d90:	and	r11b, cl
100014d93:	xor	r11b, 0x1
100014d97:	mov	r13, r12
100014d9a:	inc	r12
100014d9d:	mov	al, byte ptr [r13]
100014da1:	cmp	al, 0x3f
100014da3:	je	0x100014e04
100014da5:	test	al, al
100014da7:	je	0x100014fa5
100014dad:	cmp	al, 0x2a
100014daf:	jne	0x100014e27
100014db1:	cmp	dword ptr [rbp - 0x34], 0x0
100014db5:	jne	0x100014e27
100014db7:	test	r10d, r10d
100014dba:	je	0x100014fba
100014dc0:	mov	r14b, byte ptr [r12]
100014dc4:	cmp	r14b, 0x2a
100014dc8:	je	0x100014fb3
100014dce:	mov	byte ptr [rbp - 0x29], r11b
100014dd2:	mov	dword ptr [rbp - 0x38], r10d
100014dd6:	mov	al, byte ptr [r15]
100014dd9:	test	al, al
100014ddb:	je	0x100014eab
100014de1:	cmp	al, 0x2f
100014de3:	je	0x100014eab
100014de9:	mov	rdi, r12
100014dec:	mov	rsi, r15
100014def:	mov	edx, dword ptr [rbp - 0x30]
100014df2:	call	0x100014d4d
100014df7:	test	eax, eax
100014df9:	jne	0x100014ff8
100014dff:	inc	r15
100014e02:	jmp	0x100014dd6
100014e04:	mov	al, byte ptr [r15]
100014e07:	test	r10d, r10d
100014e0a:	je	0x100014ea2
100014e10:	xor	ebx, ebx
100014e12:	test	al, al
100014e14:	je	0x10001503e
100014e1a:	cmp	al, 0x2f
100014e1c:	jne	0x100014f13
100014e22:	jmp	0x10001503e
100014e27:	cmp	al, 0x5b
100014e29:	setne	cl
100014e2c:	or	cl, r11b
100014e2f:	jne	0x100014edc
100014e35:	mov	r9b, byte ptr [r15]
100014e38:	xor	ebx, ebx
100014e3a:	test	r9b, r9b
100014e3d:	je	0x10001503e
100014e43:	mov	r8b, byte ptr [r12]
100014e47:	cmp	r8b, 0x21
100014e4b:	sete	al
100014e4e:	cmp	r8b, 0x5e
100014e52:	sete	cl
100014e55:	or	cl, al
100014e57:	movzx	eax, cl
100014e5a:	mov	cl, byte ptr [r12 + rax]
100014e5e:	test	cl, cl
100014e60:	je	0x10001503e
100014e66:	mov	rdx, r12
100014e69:	add	rdx, rax
100014e6c:	lea	r12, [rax + r13]
100014e70:	add	r12, 0x2
100014e74:	xor	esi, esi
100014e76:	mov	eax, ecx
100014e78:	test	esi, esi
100014e7a:	mov	esi, 0x0
100014e7f:	je	0x100014e91
100014e81:	mov	al, byte ptr [r12]
100014e85:	inc	r12
100014e88:	test	al, al
100014e8a:	jne	0x100014e78
100014e8c:	jmp	0x10001503c
100014e91:	mov	esi, 0x1
100014e96:	cmp	al, 0x5c
100014e98:	je	0x100014e81
100014e9a:	cmp	al, 0x5d
100014e9c:	je	0x100014f1b
100014e9e:	xor	esi, esi
100014ea0:	jmp	0x100014e81
100014ea2:	test	al, al
100014ea4:	jne	0x100014f13
100014ea6:	jmp	0x10001503c
100014eab:	cmp	r14b, 0x2f
100014eaf:	mov	r10d, dword ptr [rbp - 0x38]
100014eb3:	mov	r11b, byte ptr [rbp - 0x29]
100014eb7:	je	0x100014d97
100014ebd:	mov	ebx, 0x2
100014ec2:	cmp	r14b, 0x5c
100014ec6:	jne	0x100015003
100014ecc:	cmp	byte ptr [r13 + 0x2], 0x2f
100014ed1:	je	0x100014d97
100014ed7:	jmp	0x10001503e
100014edc:	cmp	al, 0x5c
100014ede:	jne	0x100014ef9
100014ee0:	cmp	dword ptr [rbp - 0x34], 0x0
100014ee4:	jne	0x100014ef9
100014ee6:	mov	al, byte ptr [r13 + 0x1]
100014eea:	test	al, al
100014eec:	je	0x10001503c
100014ef2:	add	r13, 0x2
100014ef6:	mov	r12, r13
100014ef9:	mov	cl, byte ptr [r15]
100014efc:	cmp	dword ptr [rbp - 0x30], 0x0
100014f00:	je	0x100014f0b
100014f02:	cmp	al, cl
100014f04:	je	0x100014f13
100014f06:	jmp	0x10001503c
100014f0b:	cmp	cl, al
100014f0d:	jne	0x10001503c
100014f13:	inc	r15
100014f16:	jmp	0x100014d97
100014f1b:	lea	rsi, [r12 - 0x1]
100014f20:	cmp	rdx, rsi
100014f23:	jae	0x100014f79
100014f25:	xor	ebx, ebx
100014f27:	cmp	cl, 0x2d
100014f2a:	sete	bl
100014f2d:	xor	edi, edi
100014f2f:	test	ebx, ebx
100014f31:	jne	0x100014f45
100014f33:	mov	al, byte ptr [rdx]
100014f35:	cmp	al, 0x5c
100014f37:	je	0x100014f6c
100014f39:	cmp	al, 0x2d
100014f3b:	jne	0x100014f45
100014f3d:	movzx	edi, byte ptr [rdx - 0x1]
100014f41:	xor	ebx, ebx
100014f43:	jmp	0x100014f71
100014f45:	xor	ebx, ebx
100014f47:	cmp	byte ptr [rdx + 0x1], 0x2d
100014f4b:	je	0x100014f68
100014f4d:	test	dil, dil
100014f50:	movzx	eax, byte ptr [rdx]
100014f53:	cmove	edi, eax
100014f56:	cmp	al, dil
100014f59:	jb	0x100014f68
100014f5b:	cmp	r9b, dil
100014f5e:	je	0x100014f8a
100014f60:	inc	dil
100014f63:	cmp	dil, al
100014f66:	jbe	0x100014f5b
100014f68:	xor	edi, edi
100014f6a:	jmp	0x100014f71
100014f6c:	mov	ebx, 0x1
100014f71:	inc	rdx
100014f74:	cmp	rdx, rsi
100014f77:	jb	0x100014f2f
100014f79:	cmp	r8b, 0x5e
100014f7d:	je	0x100014f13
100014f7f:	cmp	r8b, 0x21
100014f83:	je	0x100014f13
100014f85:	jmp	0x10001503c
100014f8a:	xor	ebx, ebx
100014f8c:	cmp	r8b, 0x21
100014f90:	je	0x10001503e
100014f96:	cmp	r8b, 0x5e
100014f9a:	jne	0x100014f13
100014fa0:	jmp	0x10001503e
100014fa5:	xor	ebx, ebx
100014fa7:	cmp	byte ptr [r15], 0x0
100014fab:	sete	bl
100014fae:	jmp	0x10001503e
100014fb3:	add	r13, 0x2
100014fb7:	mov	r12, r13
100014fba:	cmp	byte ptr [r12], 0x0
100014fbf:	je	0x100014ffc
100014fc1:	mov	rdi, r12
100014fc4:	call	0x100014cfc
100014fc9:	test	rax, rax
100014fcc:	je	0x10001500e
100014fce:	mov	ebx, 0x2
100014fd3:	cmp	byte ptr [r15], 0x0
100014fd7:	je	0x10001503e
100014fd9:	mov	rdi, r12
100014fdc:	mov	rsi, r15
100014fdf:	mov	edx, dword ptr [rbp - 0x30]
100014fe2:	call	0x100014d4d
100014fe7:	test	eax, eax
100014fe9:	jne	0x100014ff8
100014feb:	cmp	byte ptr [r15 + 0x1], 0x0
100014ff0:	lea	r15, [r15 + 0x1]
100014ff4:	jne	0x100014fd9
100014ff6:	jmp	0x10001503e
100014ff8:	mov	ebx, eax
100014ffa:	jmp	0x10001503e
100014ffc:	mov	ebx, 0x1
100015001:	jmp	0x10001503e
100015003:	test	r14b, r14b
100015006:	jne	0x10001503e
100015008:	xor	ebx, ebx
10001500a:	test	al, al
10001500c:	jmp	0x100014fab
10001500e:	mov	rdi, r15
100015011:	call	0x100019830 ## symbol stub for: _strlen
100015016:	mov	rbx, rax
100015019:	mov	rdi, r12
10001501c:	call	0x100019830 ## symbol stub for: _strlen
100015021:	sub	rbx, rax
100015024:	js	0x10001503c
100015026:	add	r15, rbx
100015029:	cmp	dword ptr [rbp - 0x30], 0x0
10001502d:	je	0x10001504f
10001502f:	mov	rdi, r12
100015032:	mov	rsi, r15
100015035:	call	0x10001981e ## symbol stub for: _strcmp
10001503a:	jmp	0x10001505a
10001503c:	xor	ebx, ebx
10001503e:	mov	eax, ebx
100015040:	add	rsp, 0x18
100015044:	pop	rbx
100015045:	pop	r12
100015047:	pop	r13
100015049:	pop	r14
10001504b:	pop	r15
10001504d:	pop	rbp
10001504e:	ret
10001504f:	mov	rdi, r12
100015052:	mov	rsi, r15
100015055:	call	0x100015685
10001505a:	xor	ebx, ebx
10001505c:	test	eax, eax
10001505e:	jmp	0x100014fab
100015063:	push	rbp
100015064:	mov	rbp, rsp
100015067:	push	r15
100015069:	push	r14
10001506b:	push	r13
10001506d:	push	r12
10001506f:	push	rbx
100015070:	push	rax
100015071:	dec	rdx
100015074:	js	0x1000150c2
100015076:	mov	r14, rcx
100015079:	mov	r12, rsi
10001507c:	mov	r15, rdi
10001507f:	lea	r13, [rsi + 8*rdx]
100015083:	mov	rax, r13
100015086:	sub	rax, r12
100015089:	shr	rax
10001508c:	movabs	rcx, 0x3fffffff8
100015096:	and	rax, rcx
100015099:	lea	rbx, [r12 + rax]
10001509d:	mov	rsi, qword ptr [r12 + rax]
1000150a1:	mov	rdi, r15
1000150a4:	call	r14
1000150a7:	test	eax, eax
1000150a9:	js	0x1000150b6
1000150ab:	je	0x1000150c4
1000150ad:	add	rbx, 0x8
1000150b1:	mov	r12, rbx
1000150b4:	jmp	0x1000150bd
1000150b6:	add	rbx, -0x8
1000150ba:	mov	r13, rbx
1000150bd:	cmp	r13, r12
1000150c0:	jae	0x100015083
1000150c2:	xor	ebx, ebx
1000150c4:	mov	rax, rbx
1000150c7:	add	rsp, 0x8
1000150cb:	pop	rbx
1000150cc:	pop	r12
1000150ce:	pop	r13
1000150d0:	pop	r14
1000150d2:	pop	r15
1000150d4:	pop	rbp
1000150d5:	ret
1000150d6:	push	rbp
1000150d7:	mov	rbp, rsp
1000150da:	movdqa	xmm0, xmmword ptr [rip + 0x4c5e]
1000150e2:	xor	edx, edx
1000150e4:	lea	rax, [rip + 0x14835]
1000150eb:	lea	rcx, [rip + 0x1492e]
1000150f2:	movdqa	xmm1, xmmword ptr [rip + 0x4c56]
1000150fa:	movdqa	xmmword ptr [rax + rdx], xmm0
1000150ff:	movdqa	xmmword ptr [rcx + rdx], xmm0
100015104:	add	rdx, 0x10
100015108:	paddb	xmm0, xmm1
10001510c:	cmp	rdx, 0x100
100015113:	jne	0x1000150fa
100015115:	xor	edx, edx
100015117:	movdqa	xmm8, xmmword ptr [rip + 0x4c40]
100015120:	movdqa	xmm9, xmmword ptr [rip + 0x4c47]
100015129:	movdqa	xmm10, xmmword ptr [rip + 0x4c4e]
100015132:	movdqa	xmm11, xmmword ptr [rip + 0x4c55]
10001513b:	movdqa	xmm12, xmmword ptr [rip + 0x4c5c]
100015144:	movdqa	xmm13, xmmword ptr [rip + 0x4c63]
10001514d:	movdqa	xmm6, xmmword ptr [rip + 0x4c6b]
100015155:	movdqa	xmm7, xmmword ptr [rip + 0x4c73]
10001515d:	movdqa	xmm0, xmmword ptr [rip + 0x4c7b]
100015165:	movdqa	xmm4, xmmword ptr [rip + 0x4c83]
10001516d:	movq	xmm2, rdx
100015172:	pshufd	xmm2, xmm2, 0x44
100015177:	movdqa	xmm3, xmm2
10001517b:	por	xmm3, xmm7
10001517f:	pxor	xmm3, xmm0
100015183:	movdqa	xmm1, xmm4
100015187:	pcmpgtd	xmm1, xmm3
10001518b:	pcmpeqd	xmm3, xmm4
10001518f:	pshufd	xmm5, xmm3, 0xf5
100015194:	pand	xmm5, xmm1
100015198:	pshufd	xmm3, xmm1, 0xf5
10001519d:	por	xmm3, xmm5
1000151a1:	movd	esi, xmm3
1000151a5:	test	sil, 0x1
1000151a9:	je	0x1000151b3
1000151ab:	lea	esi, [rdx + 0x41]
1000151ae:	mov	byte ptr [rcx + rdx + 0x61], sil
1000151b3:	pextrb	esi, xmm3, 0x8
1000151b9:	test	sil, 0x1
1000151bd:	je	0x1000151c7
1000151bf:	lea	esi, [rdx + 0x42]
1000151c2:	mov	byte ptr [rcx + rdx + 0x62], sil
1000151c7:	movdqa	xmm1, xmm2
1000151cb:	por	xmm1, xmm6
1000151cf:	pxor	xmm1, xmm0
1000151d3:	movdqa	xmm3, xmm4
1000151d7:	pcmpgtd	xmm3, xmm1
1000151db:	pcmpeqd	xmm1, xmm4
1000151df:	pshufd	xmm1, xmm1, 0xf5
1000151e4:	pand	xmm1, xmm3
1000151e8:	pshufd	xmm3, xmm3, 0xf5
1000151ed:	por	xmm3, xmm1
1000151f1:	movd	esi, xmm3
1000151f5:	test	sil, 0x1
1000151f9:	je	0x100015203
1000151fb:	lea	esi, [rdx + 0x43]
1000151fe:	mov	byte ptr [rcx + rdx + 0x63], sil
100015203:	pextrb	esi, xmm3, 0x8
100015209:	test	sil, 0x1
10001520d:	je	0x100015217
10001520f:	lea	esi, [rdx + 0x44]
100015212:	mov	byte ptr [rcx + rdx + 0x64], sil
100015217:	movdqa	xmm1, xmm2
10001521b:	por	xmm1, xmm13
100015220:	pxor	xmm1, xmm0
100015224:	movdqa	xmm3, xmm4
100015228:	pcmpgtd	xmm3, xmm1
10001522c:	pcmpeqd	xmm1, xmm4
100015230:	pshufd	xmm1, xmm1, 0xf5
100015235:	pand	xmm1, xmm3
100015239:	pshufd	xmm3, xmm3, 0xf5
10001523e:	por	xmm3, xmm1
100015242:	movd	esi, xmm3
100015246:	test	sil, 0x1
10001524a:	je	0x100015254
10001524c:	lea	esi, [rdx + 0x45]
10001524f:	mov	byte ptr [rcx + rdx + 0x65], sil
100015254:	pextrb	esi, xmm3, 0x8
10001525a:	test	sil, 0x1
10001525e:	je	0x100015268
100015260:	lea	esi, [rdx + 0x46]
100015263:	mov	byte ptr [rcx + rdx + 0x66], sil
100015268:	movdqa	xmm1, xmm2
10001526c:	por	xmm1, xmm12
100015271:	pxor	xmm1, xmm0
100015275:	movdqa	xmm3, xmm4
100015279:	pcmpgtd	xmm3, xmm1
10001527d:	pcmpeqd	xmm1, xmm4
100015281:	pshufd	xmm1, xmm1, 0xf5
100015286:	pand	xmm1, xmm3
10001528a:	pshufd	xmm3, xmm3, 0xf5
10001528f:	por	xmm3, xmm1
100015293:	movd	esi, xmm3
100015297:	test	sil, 0x1
10001529b:	je	0x1000152a5
10001529d:	lea	esi, [rdx + 0x47]
1000152a0:	mov	byte ptr [rcx + rdx + 0x67], sil
1000152a5:	pextrb	esi, xmm3, 0x8
1000152ab:	test	sil, 0x1
1000152af:	je	0x1000152b9
1000152b1:	lea	esi, [rdx + 0x48]
1000152b4:	mov	byte ptr [rcx + rdx + 0x68], sil
1000152b9:	movdqa	xmm1, xmm2
1000152bd:	por	xmm1, xmm11
1000152c2:	pxor	xmm1, xmm0
1000152c6:	movdqa	xmm3, xmm4
1000152ca:	pcmpgtd	xmm3, xmm1
1000152ce:	pcmpeqd	xmm1, xmm4
1000152d2:	pshufd	xmm1, xmm1, 0xf5
1000152d7:	pand	xmm1, xmm3
1000152db:	pshufd	xmm3, xmm3, 0xf5
1000152e0:	por	xmm3, xmm1
1000152e4:	movd	esi, xmm3
1000152e8:	test	sil, 0x1
1000152ec:	je	0x1000152f6
1000152ee:	lea	esi, [rdx + 0x49]
1000152f1:	mov	byte ptr [rcx + rdx + 0x69], sil
1000152f6:	pextrb	esi, xmm3, 0x8
1000152fc:	test	sil, 0x1
100015300:	je	0x10001530a
100015302:	lea	esi, [rdx + 0x4a]
100015305:	mov	byte ptr [rcx + rdx + 0x6a], sil
10001530a:	movdqa	xmm1, xmm2
10001530e:	por	xmm1, xmm10
100015313:	pxor	xmm1, xmm0
100015317:	movdqa	xmm3, xmm4
10001531b:	pcmpgtd	xmm3, xmm1
10001531f:	pcmpeqd	xmm1, xmm4
100015323:	pshufd	xmm1, xmm1, 0xf5
100015328:	pand	xmm1, xmm3
10001532c:	pshufd	xmm3, xmm3, 0xf5
100015331:	por	xmm3, xmm1
100015335:	movd	esi, xmm3
100015339:	test	sil, 0x1
10001533d:	je	0x100015347
10001533f:	lea	esi, [rdx + 0x4b]
100015342:	mov	byte ptr [rcx + rdx + 0x6b], sil
100015347:	pextrb	esi, xmm3, 0x8
10001534d:	test	sil, 0x1
100015351:	je	0x10001535b
100015353:	lea	esi, [rdx + 0x4c]
100015356:	mov	byte ptr [rcx + rdx + 0x6c], sil
10001535b:	movdqa	xmm1, xmm2
10001535f:	por	xmm1, xmm9
100015364:	pxor	xmm1, xmm0
100015368:	movdqa	xmm3, xmm4
10001536c:	pcmpgtd	xmm3, xmm1
100015370:	pcmpeqd	xmm1, xmm4
100015374:	pshufd	xmm1, xmm1, 0xf5
100015379:	pand	xmm1, xmm3
10001537d:	pshufd	xmm3, xmm3, 0xf5
100015382:	por	xmm3, xmm1
100015386:	movd	esi, xmm3
10001538a:	test	sil, 0x1
10001538e:	je	0x100015398
100015390:	lea	esi, [rdx + 0x4d]
100015393:	mov	byte ptr [rcx + rdx + 0x6d], sil
100015398:	pextrb	esi, xmm3, 0x8
10001539e:	test	sil, 0x1
1000153a2:	je	0x1000153ac
1000153a4:	lea	esi, [rdx + 0x4e]
1000153a7:	mov	byte ptr [rcx + rdx + 0x6e], sil
1000153ac:	por	xmm2, xmm8
1000153b1:	pxor	xmm2, xmm0
1000153b5:	movdqa	xmm1, xmm4
1000153b9:	pcmpgtd	xmm1, xmm2
1000153bd:	pcmpeqd	xmm2, xmm4
1000153c1:	pshufd	xmm3, xmm2, 0xf5
1000153c6:	pand	xmm3, xmm1
1000153ca:	pshufd	xmm2, xmm1, 0xf5
1000153cf:	por	xmm2, xmm3
1000153d3:	movd	esi, xmm2
1000153d7:	test	sil, 0x1
1000153db:	je	0x1000153e5
1000153dd:	lea	esi, [rdx + 0x4f]
1000153e0:	mov	byte ptr [rcx + rdx + 0x6f], sil
1000153e5:	pextrb	esi, xmm2, 0x8
1000153eb:	test	sil, 0x1
1000153ef:	je	0x1000153f9
1000153f1:	lea	esi, [rdx + 0x50]
1000153f4:	mov	byte ptr [rcx + rdx + 0x70], sil
1000153f9:	add	rdx, 0x10
1000153fd:	cmp	rdx, 0x20
100015401:	jne	0x10001516d
100015407:	xor	ecx, ecx
100015409:	movq	xmm1, rcx
10001540e:	pshufd	xmm2, xmm1, 0x44
100015413:	movdqa	xmm1, xmm2
100015417:	por	xmm1, xmm7
10001541b:	pxor	xmm1, xmm0
10001541f:	movdqa	xmm3, xmm4
100015423:	pcmpgtd	xmm3, xmm1
100015427:	pcmpeqd	xmm1, xmm4
10001542b:	pshufd	xmm1, xmm1, 0xf5
100015430:	pand	xmm1, xmm3
100015434:	pshufd	xmm3, xmm3, 0xf5
100015439:	por	xmm3, xmm1
10001543d:	movd	edx, xmm3
100015441:	test	dl, 0x1
100015444:	je	0x10001544d
100015446:	lea	edx, [rcx + 0x61]
100015449:	mov	byte ptr [rax + rcx + 0x41], dl
10001544d:	pextrb	edx, xmm3, 0x8
100015453:	test	dl, 0x1
100015456:	je	0x10001545f
100015458:	lea	edx, [rcx + 0x62]
10001545b:	mov	byte ptr [rax + rcx + 0x42], dl
10001545f:	movdqa	xmm1, xmm2
100015463:	por	xmm1, xmm6
100015467:	pxor	xmm1, xmm0
10001546b:	movdqa	xmm3, xmm4
10001546f:	pcmpgtd	xmm3, xmm1
100015473:	pcmpeqd	xmm1, xmm4
100015477:	pshufd	xmm1, xmm1, 0xf5
10001547c:	pand	xmm1, xmm3
100015480:	pshufd	xmm3, xmm3, 0xf5
100015485:	por	xmm3, xmm1
100015489:	movd	edx, xmm3
10001548d:	test	dl, 0x1
100015490:	je	0x100015499
100015492:	lea	edx, [rcx + 0x63]
100015495:	mov	byte ptr [rax + rcx + 0x43], dl
100015499:	pextrb	edx, xmm3, 0x8
10001549f:	test	dl, 0x1
1000154a2:	je	0x1000154ab
1000154a4:	lea	edx, [rcx + 0x64]
1000154a7:	mov	byte ptr [rax + rcx + 0x44], dl
1000154ab:	movdqa	xmm1, xmm2
1000154af:	por	xmm1, xmm13
1000154b4:	pxor	xmm1, xmm0
1000154b8:	movdqa	xmm3, xmm4
1000154bc:	pcmpgtd	xmm3, xmm1
1000154c0:	pcmpeqd	xmm1, xmm4
1000154c4:	pshufd	xmm1, xmm1, 0xf5
1000154c9:	pand	xmm1, xmm3
1000154cd:	pshufd	xmm3, xmm3, 0xf5
1000154d2:	por	xmm3, xmm1
1000154d6:	movd	edx, xmm3
1000154da:	test	dl, 0x1
1000154dd:	je	0x1000154e6
1000154df:	lea	edx, [rcx + 0x65]
1000154e2:	mov	byte ptr [rax + rcx + 0x45], dl
1000154e6:	pextrb	edx, xmm3, 0x8
1000154ec:	test	dl, 0x1
1000154ef:	je	0x1000154f8
1000154f1:	lea	edx, [rcx + 0x66]
1000154f4:	mov	byte ptr [rax + rcx + 0x46], dl
1000154f8:	movdqa	xmm1, xmm2
1000154fc:	por	xmm1, xmm12
100015501:	pxor	xmm1, xmm0
100015505:	movdqa	xmm3, xmm4
100015509:	pcmpgtd	xmm3, xmm1
10001550d:	pcmpeqd	xmm1, xmm4
100015511:	pshufd	xmm1, xmm1, 0xf5
100015516:	pand	xmm1, xmm3
10001551a:	pshufd	xmm3, xmm3, 0xf5
10001551f:	por	xmm3, xmm1
100015523:	movd	edx, xmm3
100015527:	test	dl, 0x1
10001552a:	je	0x100015533
10001552c:	lea	edx, [rcx + 0x67]
10001552f:	mov	byte ptr [rax + rcx + 0x47], dl
100015533:	pextrb	edx, xmm3, 0x8
100015539:	test	dl, 0x1
10001553c:	je	0x100015545
10001553e:	lea	edx, [rcx + 0x68]
100015541:	mov	byte ptr [rax + rcx + 0x48], dl
100015545:	movdqa	xmm1, xmm2
100015549:	por	xmm1, xmm11
10001554e:	pxor	xmm1, xmm0
100015552:	movdqa	xmm3, xmm4
100015556:	pcmpgtd	xmm3, xmm1
10001555a:	pcmpeqd	xmm1, xmm4
10001555e:	pshufd	xmm1, xmm1, 0xf5
100015563:	pand	xmm1, xmm3
100015567:	pshufd	xmm3, xmm3, 0xf5
10001556c:	por	xmm3, xmm1
100015570:	movd	edx, xmm3
100015574:	test	dl, 0x1
100015577:	je	0x100015580
100015579:	lea	edx, [rcx + 0x69]
10001557c:	mov	byte ptr [rax + rcx + 0x49], dl
100015580:	pextrb	edx, xmm3, 0x8
100015586:	test	dl, 0x1
100015589:	je	0x100015592
10001558b:	lea	edx, [rcx + 0x6a]
10001558e:	mov	byte ptr [rax + rcx + 0x4a], dl
100015592:	movdqa	xmm1, xmm2
100015596:	por	xmm1, xmm10
10001559b:	pxor	xmm1, xmm0
10001559f:	movdqa	xmm3, xmm4
1000155a3:	pcmpgtd	xmm3, xmm1
1000155a7:	pcmpeqd	xmm1, xmm4
1000155ab:	pshufd	xmm1, xmm1, 0xf5
1000155b0:	pand	xmm1, xmm3
1000155b4:	pshufd	xmm3, xmm3, 0xf5
1000155b9:	por	xmm3, xmm1
1000155bd:	movd	edx, xmm3
1000155c1:	test	dl, 0x1
1000155c4:	je	0x1000155cd
1000155c6:	lea	edx, [rcx + 0x6b]
1000155c9:	mov	byte ptr [rax + rcx + 0x4b], dl
1000155cd:	pextrb	edx, xmm3, 0x8
1000155d3:	test	dl, 0x1
1000155d6:	je	0x1000155df
1000155d8:	lea	edx, [rcx + 0x6c]
1000155db:	mov	byte ptr [rax + rcx + 0x4c], dl
1000155df:	movdqa	xmm1, xmm2
1000155e3:	por	xmm1, xmm9
1000155e8:	pxor	xmm1, xmm0
1000155ec:	movdqa	xmm3, xmm4
1000155f0:	pcmpgtd	xmm3, xmm1
1000155f4:	pcmpeqd	xmm1, xmm4
1000155f8:	pshufd	xmm1, xmm1, 0xf5
1000155fd:	pand	xmm1, xmm3
100015601:	pshufd	xmm3, xmm3, 0xf5
100015606:	por	xmm3, xmm1
10001560a:	movd	edx, xmm3
10001560e:	test	dl, 0x1
100015611:	je	0x10001561a
100015613:	lea	edx, [rcx + 0x6d]
100015616:	mov	byte ptr [rax + rcx + 0x4d], dl
10001561a:	pextrb	edx, xmm3, 0x8
100015620:	test	dl, 0x1
100015623:	je	0x10001562c
100015625:	lea	edx, [rcx + 0x6e]
100015628:	mov	byte ptr [rax + rcx + 0x4e], dl
10001562c:	por	xmm2, xmm8
100015631:	pxor	xmm2, xmm0
100015635:	movdqa	xmm1, xmm4
100015639:	pcmpgtd	xmm1, xmm2
10001563d:	pcmpeqd	xmm2, xmm4
100015641:	pshufd	xmm3, xmm2, 0xf5
100015646:	pand	xmm3, xmm1
10001564a:	pshufd	xmm2, xmm1, 0xf5
10001564f:	por	xmm2, xmm3
100015653:	movd	edx, xmm2
100015657:	test	dl, 0x1
10001565a:	je	0x100015663
10001565c:	lea	edx, [rcx + 0x6f]
10001565f:	mov	byte ptr [rax + rcx + 0x4f], dl
100015663:	pextrb	edx, xmm2, 0x8
100015669:	test	dl, 0x1
10001566c:	je	0x100015675
10001566e:	lea	edx, [rcx + 0x70]
100015671:	mov	byte ptr [rax + rcx + 0x50], dl
100015675:	add	rcx, 0x10
100015679:	cmp	rcx, 0x20
10001567d:	jne	0x100015409
100015683:	pop	rbp
100015684:	ret
100015685:	push	rbp
100015686:	mov	rbp, rsp
100015689:	movzx	ecx, byte ptr [rdi]
10001568c:	movzx	edx, byte ptr [rsi]
10001568f:	mov	eax, ecx
100015691:	sub	eax, edx
100015693:	test	edx, edx
100015695:	je	0x1000156c2
100015697:	test	cl, cl
100015699:	je	0x1000156c2
10001569b:	test	eax, eax
10001569d:	jne	0x1000156c2
10001569f:	mov	ecx, 0x1
1000156a4:	movzx	edx, byte ptr [rdi + rcx]
1000156a8:	movzx	r8d, byte ptr [rsi + rcx]
1000156ad:	mov	eax, edx
1000156af:	sub	eax, r8d
1000156b2:	test	r8d, r8d
1000156b5:	je	0x1000156c2
1000156b7:	test	dl, dl
1000156b9:	je	0x1000156c2
1000156bb:	inc	rcx
1000156be:	test	eax, eax
1000156c0:	je	0x1000156a4
1000156c2:	pop	rbp
1000156c3:	ret
1000156c4:	push	rbp
1000156c5:	mov	rbp, rsp
1000156c8:	push	r15
1000156ca:	push	r14
1000156cc:	push	r13
1000156ce:	push	r12
1000156d0:	push	rbx
1000156d1:	sub	rsp, 0x18
1000156d5:	mov	r12, rcx
1000156d8:	mov	r15, rsi
1000156db:	mov	qword ptr [rbp - 0x38], rdi
1000156df:	mov	rdi, rdx
1000156e2:	call	0x10001973a ## symbol stub for: _getenv
1000156e7:	test	rax, rax
1000156ea:	je	0x10001572a
1000156ec:	mov	r13, rax
1000156ef:	dec	r13
1000156f2:	mov	r14, qword ptr [rip + 0xe907] ## literal pool symbol address: __DefaultRuneLocale
1000156f9:	mov	ebx, 0x4000
1000156fe:	movzx	edi, byte ptr [r13 + 0x1]
100015703:	test	dil, dil
100015706:	js	0x100015711
100015708:	mov	eax, dword ptr [r14 + 4*rdi + 0x3c]
10001570d:	and	eax, ebx
10001570f:	jmp	0x10001571b
100015711:	mov	esi, 0x4000
100015716:	call	0x10001967a ## symbol stub for: ___maskrune
10001571b:	inc	r13
10001571e:	test	eax, eax
100015720:	jne	0x1000156fe
100015722:	mov	al, byte ptr [r13]
100015726:	test	al, al
100015728:	jne	0x10001577d
10001572a:	mov	rdi, r12
10001572d:	call	0x10001973a ## symbol stub for: _getenv
100015732:	test	rax, rax
100015735:	je	0x100015a24
10001573b:	mov	r13, rax
10001573e:	dec	r13
100015741:	mov	r14, qword ptr [rip + 0xe8b8] ## literal pool symbol address: __DefaultRuneLocale
100015748:	mov	ebx, 0x4000
10001574d:	movzx	edi, byte ptr [r13 + 0x1]
100015752:	test	dil, dil
100015755:	js	0x100015760
100015757:	mov	eax, dword ptr [r14 + 4*rdi + 0x3c]
10001575c:	and	eax, ebx
10001575e:	jmp	0x10001576a
100015760:	mov	esi, 0x4000
100015765:	call	0x10001967a ## symbol stub for: ___maskrune
10001576a:	inc	r13
10001576d:	test	eax, eax
10001576f:	jne	0x10001574d
100015771:	mov	al, byte ptr [r13]
100015775:	test	al, al
100015777:	je	0x100015a24
10001577d:	xor	r14d, r14d
100015780:	mov	r12d, 0x4000
100015786:	mov	rbx, r13
100015789:	lea	ecx, [r14 + 0x1]
10001578d:	mov	dword ptr [rbp - 0x2c], ecx
100015790:	cmp	al, 0x22
100015792:	je	0x1000157d9
100015794:	test	al, al
100015796:	je	0x10001583a
10001579c:	test	al, al
10001579e:	js	0x1000157b3
1000157a0:	movzx	eax, al
1000157a3:	mov	rcx, qword ptr [rip + 0xe856] ## literal pool symbol address: __DefaultRuneLocale
1000157aa:	mov	eax, dword ptr [rcx + 4*rax + 0x3c]
1000157ae:	and	eax, r12d
1000157b1:	jmp	0x1000157c0
1000157b3:	movzx	edi, al
1000157b6:	mov	esi, 0x4000
1000157bb:	call	0x10001967a ## symbol stub for: ___maskrune
1000157c0:	test	eax, eax
1000157c2:	jne	0x1000157fa
1000157c4:	mov	al, byte ptr [rbx + 0x1]
1000157c7:	inc	rbx
1000157ca:	jmp	0x100015794
1000157cc:	cmp	byte ptr [rax + 0x2], 0x0
1000157d0:	je	0x1000157d9
1000157d2:	add	rax, 0x2
1000157d6:	mov	rbx, rax
1000157d9:	mov	rax, rbx
1000157dc:	inc	rbx
1000157df:	mov	cl, byte ptr [rax + 0x1]
1000157e2:	cmp	cl, 0x5c
1000157e5:	je	0x1000157cc
1000157e7:	test	cl, cl
1000157e9:	je	0x1000157f0
1000157eb:	cmp	cl, 0x22
1000157ee:	jne	0x1000157d9
1000157f0:	add	rax, 0x2
1000157f4:	test	cl, cl
1000157f6:	cmovne	rbx, rax
1000157fa:	mov	al, byte ptr [rbx]
1000157fc:	test	al, al
1000157fe:	je	0x10001583a
100015800:	movzx	edi, al
100015803:	test	al, al
100015805:	js	0x100015817
100015807:	mov	rax, qword ptr [rip + 0xe7f2] ## literal pool symbol address: __DefaultRuneLocale
10001580e:	mov	eax, dword ptr [rax + 4*rdi + 0x3c]
100015812:	and	eax, r12d
100015815:	jmp	0x100015821
100015817:	mov	esi, 0x4000
10001581c:	call	0x10001967a ## symbol stub for: ___maskrune
100015821:	test	eax, eax
100015823:	je	0x10001582d
100015825:	mov	al, byte ptr [rbx + 0x1]
100015828:	inc	rbx
10001582b:	jmp	0x1000157fc
10001582d:	mov	al, byte ptr [rbx]
10001582f:	mov	ecx, dword ptr [rbp - 0x2c]
100015832:	mov	r14d, ecx
100015835:	jmp	0x100015789
10001583a:	mov	rbx, r14
10001583d:	mov	rdi, r13
100015840:	call	0x100019830 ## symbol stub for: _strlen
100015845:	lea	rdi, [rax + 0x1]
100015849:	call	0x100019758 ## symbol stub for: _malloc
10001584e:	mov	r12, rax
100015851:	test	rax, rax
100015854:	jne	0x100015867
100015856:	lea	rsi, [rip + 0xdfaf] ## literal pool for: "Can't get memory for arguments"
10001585d:	mov	edi, 0x4
100015862:	call	0x100002e30
100015867:	mov	rdi, r12
10001586a:	mov	rsi, r13
10001586d:	call	0x100019824 ## symbol stub for: _strcpy
100015872:	mov	r14, qword ptr [rbp - 0x38]
100015876:	mov	eax, dword ptr [r14]
100015879:	add	eax, ebx
10001587b:	add	eax, 0x2
10001587e:	movsxd	rdi, eax
100015881:	shl	rdi, 0x3
100015885:	call	0x100019758 ## symbol stub for: _malloc
10001588a:	mov	rbx, rax
10001588d:	test	rax, rax
100015890:	jne	0x1000158ab
100015892:	mov	rdi, r12
100015895:	call	0x100019716 ## symbol stub for: _free
10001589a:	lea	rsi, [rip + 0xdf6b] ## literal pool for: "Can't get memory for arguments"
1000158a1:	mov	edi, 0x4
1000158a6:	call	0x100002e30
1000158ab:	mov	rax, qword ptr [r15]
1000158ae:	lea	rcx, [rax + 0x8]
1000158b2:	mov	qword ptr [r15], rcx
1000158b5:	mov	rax, qword ptr [rax]
1000158b8:	mov	r13, rbx
1000158bb:	add	r13, 0x8
1000158bf:	mov	qword ptr [rbx], rax
1000158c2:	cmp	byte ptr [r12], 0x22
1000158c7:	jne	0x1000158f7
1000158c9:	mov	qword ptr [rbp - 0x40], rbx
1000158cd:	inc	r12
1000158d0:	mov	qword ptr [r13], r12
1000158d4:	mov	r14, r12
1000158d7:	mov	al, byte ptr [r14]
1000158da:	cmp	al, 0x5c
1000158dc:	je	0x1000158e8
1000158de:	test	al, al
1000158e0:	je	0x10001594d
1000158e2:	cmp	al, 0x22
1000158e4:	jne	0x1000158f2
1000158e6:	jmp	0x100015946
1000158e8:	cmp	byte ptr [r14 + 0x1], 0x0
1000158ed:	je	0x1000158f2
1000158ef:	inc	r14
1000158f2:	inc	r14
1000158f5:	jmp	0x1000158d7
1000158f7:	mov	qword ptr [r13], r12
1000158fb:	mov	al, byte ptr [r12]
1000158ff:	test	al, al
100015901:	je	0x1000159e3
100015907:	inc	r12
10001590a:	test	al, al
10001590c:	js	0x100015925
10001590e:	movzx	eax, al
100015911:	mov	rcx, qword ptr [rip + 0xe6e8] ## literal pool symbol address: __DefaultRuneLocale
100015918:	mov	eax, dword ptr [rcx + 4*rax + 0x3c]
10001591c:	mov	ecx, 0x4000
100015921:	and	eax, ecx
100015923:	jmp	0x100015932
100015925:	movzx	edi, al
100015928:	mov	esi, 0x4000
10001592d:	call	0x10001967a ## symbol stub for: ___maskrune
100015932:	test	eax, eax
100015934:	jne	0x10001599a
100015936:	mov	al, byte ptr [r12]
10001593a:	inc	r12
10001593d:	test	al, al
10001593f:	jne	0x10001590a
100015941:	jmp	0x1000159e3
100015946:	mov	byte ptr [r14], 0x0
10001594a:	inc	r14
10001594d:	mov	rdi, r12
100015950:	mov	esi, 0x5c
100015955:	call	0x100019818 ## symbol stub for: _strchr
10001595a:	test	rax, rax
10001595d:	je	0x10001598d
10001595f:	mov	rbx, rax
100015962:	lea	r12, [rbx + 0x1]
100015966:	mov	rdi, rbx
100015969:	mov	rsi, r12
10001596c:	call	0x100019824 ## symbol stub for: _strcpy
100015971:	cmp	byte ptr [rbx], 0x0
100015974:	cmove	r12, rbx
100015978:	mov	rdi, r12
10001597b:	mov	esi, 0x5c
100015980:	call	0x100019818 ## symbol stub for: _strchr
100015985:	mov	rbx, rax
100015988:	test	rax, rax
10001598b:	jne	0x100015962
10001598d:	mov	r12, r14
100015990:	mov	r14, qword ptr [rbp - 0x38]
100015994:	mov	rbx, qword ptr [rbp - 0x40]
100015998:	jmp	0x1000159a0
10001599a:	mov	byte ptr [r12 - 0x1], 0x0
1000159a0:	mov	al, byte ptr [r12]
1000159a4:	add	r13, 0x8
1000159a8:	test	al, al
1000159aa:	je	0x1000159e7
1000159ac:	movzx	edi, al
1000159af:	test	al, al
1000159b1:	js	0x1000159c7
1000159b3:	mov	rax, qword ptr [rip + 0xe646] ## literal pool symbol address: __DefaultRuneLocale
1000159ba:	mov	eax, dword ptr [rax + 4*rdi + 0x3c]
1000159be:	mov	ecx, 0x4000
1000159c3:	and	eax, ecx
1000159c5:	jmp	0x1000159d1
1000159c7:	mov	esi, 0x4000
1000159cc:	call	0x10001967a ## symbol stub for: ___maskrune
1000159d1:	test	eax, eax
1000159d3:	je	0x1000158c2
1000159d9:	mov	al, byte ptr [r12 + 0x1]
1000159de:	inc	r12
1000159e1:	jmp	0x1000159a8
1000159e3:	add	r13, 0x8
1000159e7:	mov	eax, dword ptr [r14]
1000159ea:	mov	esi, dword ptr [rbp - 0x2c]
1000159ed:	add	esi, eax
1000159ef:	dec	eax
1000159f1:	mov	dword ptr [r14], eax
1000159f4:	je	0x100015a16
1000159f6:	mov	rcx, qword ptr [r15]
1000159f9:	lea	rdx, [rcx + 0x8]
1000159fd:	mov	qword ptr [r15], rdx
100015a00:	mov	rcx, qword ptr [rcx]
100015a03:	mov	qword ptr [r13], rcx
100015a07:	add	r13, 0x8
100015a0b:	dec	eax
100015a0d:	jne	0x1000159f6
100015a0f:	mov	dword ptr [r14], 0x0
100015a16:	mov	qword ptr [r13], 0x0
100015a1e:	mov	qword ptr [r15], rbx
100015a21:	mov	dword ptr [r14], esi
100015a24:	add	rsp, 0x18
100015a28:	pop	rbx
100015a29:	pop	r12
100015a2b:	pop	r13
100015a2d:	pop	r14
100015a2f:	pop	r15
100015a31:	pop	rbp
100015a32:	ret
100015a33:	push	rbp
100015a34:	mov	rbp, rsp
100015a37:	pop	rbp
100015a38:	ret
100015a39:	push	rbp
100015a3a:	mov	rbp, rsp
100015a3d:	test	esi, esi
100015a3f:	je	0x100015a7c
100015a41:	mov	r8d, esi
100015a44:	xor	edx, edx
100015a46:	xor	r9d, r9d
100015a49:	mov	cl, byte ptr [rdi + rdx]
100015a4c:	mov	esi, 0x1
100015a51:	cmp	cl, 0x1f
100015a54:	ja	0x100015a6d
100015a56:	xor	eax, eax
100015a58:	cmp	cl, 0x7
100015a5b:	jb	0x100015a7e
100015a5d:	cmp	cl, 0x1b
100015a60:	ja	0x100015a7e
100015a62:	add	cl, -0xe
100015a65:	mov	esi, r9d
100015a68:	cmp	cl, 0xc
100015a6b:	jb	0x100015a7e
100015a6d:	inc	rdx
100015a70:	mov	r9d, esi
100015a73:	mov	eax, esi
100015a75:	cmp	r8, rdx
100015a78:	jne	0x100015a49
100015a7a:	jmp	0x100015a7e
100015a7c:	xor	eax, eax
100015a7e:	pop	rbp
100015a7f:	ret
100015a80:	push	rbp
100015a81:	mov	rbp, rsp
100015a84:	push	r15
100015a86:	push	r14
100015a88:	push	rbx
100015a89:	push	rax
100015a8a:	mov	rbx, rdx
100015a8d:	mov	r14, rdi
100015a90:	mov	byte ptr [rip + 0x1379a], 0x0
100015a97:	cmp	rsi, -0x2
100015a9b:	je	0x100015abd
100015a9d:	test	rsi, rsi
100015aa0:	je	0x100015aec
100015aa2:	lea	rdi, [rip + 0x13787]
100015aa9:	cmp	rsi, -0x1
100015aad:	jne	0x100015ab6
100015aaf:	lea	rsi, [rip + 0xdd75] ## literal pool for: "16"
100015ab6:	mov	edx, 0x10
100015abb:	jmp	0x100015ae7
100015abd:	lea	r15, [rip + 0x1376c]
100015ac4:	lea	rsi, [rip + 0x73c3] ## literal pool for: "."
100015acb:	mov	edx, 0x10
100015ad0:	mov	rdi, r15
100015ad3:	call	0x10001968c ## symbol stub for: ___strcat_chk
100015ad8:	lea	rsi, [rip + 0xdd4c] ## literal pool for: "16"
100015adf:	mov	edx, 0x10
100015ae4:	mov	rdi, r15
100015ae7:	call	0x10001968c ## symbol stub for: ___strcat_chk
100015aec:	lea	rdi, [rip + 0x1373d]
100015af3:	lea	rsi, [rip + 0x6246] ## literal pool for: "ll"
100015afa:	mov	edx, 0x10
100015aff:	call	0x10001968c ## symbol stub for: ___strcat_chk
100015b04:	lea	rdi, [rip + 0x13725]
100015b0b:	test	rbx, rbx
100015b0e:	je	0x100015b1a
100015b10:	mov	edx, 0x10
100015b15:	mov	rsi, rbx
100015b18:	jmp	0x100015b26
100015b1a:	lea	rsi, [rip + 0x5d4a] ## literal pool for: "d"
100015b21:	mov	edx, 0x10
100015b26:	call	0x10001968c ## symbol stub for: ___strcat_chk
100015b2b:	mov	eax, dword ptr [rip + 0x4716f]
100015b31:	lea	ecx, [rax + 0x1]
100015b34:	lea	edx, [rax + 0x4]
100015b37:	test	ecx, ecx
100015b39:	cmovns	edx, ecx
100015b3c:	and	edx, -0x4
100015b3f:	neg	edx
100015b41:	add	eax, edx
100015b43:	inc	eax
100015b45:	mov	dword ptr [rip + 0x47155], eax
100015b4b:	lea	rax, [rax + 2*rax]
100015b4f:	lea	rbx, [rip + 0x470ea]
100015b56:	lea	rdi, [rbx + 8*rax]
100015b5a:	lea	rsi, [rip + 0x136cf]
100015b61:	mov	rdx, r14
100015b64:	xor	eax, eax
100015b66:	call	0x1000197fa ## symbol stub for: _sprintf
100015b6b:	mov	eax, dword ptr [rip + 0x4712f]
100015b71:	lea	rax, [rax + 2*rax]
100015b75:	lea	rax, [rbx + 8*rax]
100015b79:	add	rsp, 0x8
100015b7d:	pop	rbx
100015b7e:	pop	r14
100015b80:	pop	r15
100015b82:	pop	rbp
100015b83:	ret
100015b84:	push	rbp
100015b85:	mov	rbp, rsp
100015b88:	push	r15
100015b8a:	push	r14
100015b8c:	push	rbx
100015b8d:	push	rax
100015b8e:	mov	rbx, rdx
100015b91:	mov	r14, rdi
100015b94:	mov	byte ptr [rip + 0x136a6], 0x0
100015b9b:	cmp	rsi, -0x2
100015b9f:	je	0x100015bc1
100015ba1:	test	rsi, rsi
100015ba4:	je	0x100015bf0
100015ba6:	lea	rdi, [rip + 0x13693]
100015bad:	cmp	rsi, -0x1
100015bb1:	jne	0x100015bba
100015bb3:	lea	rsi, [rip + 0xdc71] ## literal pool for: "16"
100015bba:	mov	edx, 0x10
100015bbf:	jmp	0x100015beb
100015bc1:	lea	r15, [rip + 0x13678]
100015bc8:	lea	rsi, [rip + 0x72bf] ## literal pool for: "."
100015bcf:	mov	edx, 0x10
100015bd4:	mov	rdi, r15
100015bd7:	call	0x10001968c ## symbol stub for: ___strcat_chk
100015bdc:	lea	rsi, [rip + 0xdc48] ## literal pool for: "16"
100015be3:	mov	edx, 0x10
100015be8:	mov	rdi, r15
100015beb:	call	0x10001968c ## symbol stub for: ___strcat_chk
100015bf0:	lea	rdi, [rip + 0x13649]
100015bf7:	lea	rsi, [rip + 0x6142] ## literal pool for: "ll"
100015bfe:	mov	edx, 0x10
100015c03:	call	0x10001968c ## symbol stub for: ___strcat_chk
100015c08:	lea	rdi, [rip + 0x13631]
100015c0f:	test	rbx, rbx
100015c12:	je	0x100015c1e
100015c14:	mov	edx, 0x10
100015c19:	mov	rsi, rbx
100015c1c:	jmp	0x100015c2a
100015c1e:	lea	rsi, [rip + 0x6621] ## literal pool for: "u"
100015c25:	mov	edx, 0x10
100015c2a:	call	0x10001968c ## symbol stub for: ___strcat_chk
100015c2f:	mov	eax, dword ptr [rip + 0x470db]
100015c35:	lea	ecx, [rax + 0x1]
100015c38:	lea	edx, [rax + 0x4]
100015c3b:	test	ecx, ecx
100015c3d:	cmovns	edx, ecx
100015c40:	and	edx, -0x4
100015c43:	neg	edx
100015c45:	add	eax, edx
100015c47:	inc	eax
100015c49:	mov	dword ptr [rip + 0x470c1], eax
100015c4f:	lea	rax, [rax + 2*rax]
100015c53:	lea	rbx, [rip + 0x47056]
100015c5a:	lea	rdi, [rbx + 8*rax]
100015c5e:	lea	rsi, [rip + 0x135db]
100015c65:	mov	rdx, r14
100015c68:	xor	eax, eax
100015c6a:	call	0x1000197fa ## symbol stub for: _sprintf
100015c6f:	mov	eax, dword ptr [rip + 0x4709b]
100015c75:	lea	rax, [rax + 2*rax]
100015c79:	lea	rax, [rbx + 8*rax]
100015c7d:	add	rsp, 0x8
100015c81:	pop	rbx
100015c82:	pop	r14
100015c84:	pop	r15
100015c86:	pop	rbp
100015c87:	ret
100015c88:	push	rbp
100015c89:	mov	rbp, rsp
100015c8c:	push	rbx
100015c8d:	sub	rsp, 0x78
100015c91:	mov	rax, rsi
100015c94:	mov	rbx, rdi
100015c97:	mov	rcx, qword ptr [rip + 0xe372] ## literal pool symbol address: ___stack_chk_guard
100015c9e:	mov	rcx, qword ptr [rcx]
100015ca1:	mov	qword ptr [rbp - 0x10], rcx
100015ca5:	lea	rsi, [rbp - 0x80]
100015ca9:	mov	rdi, rax
100015cac:	call	0x100015cf7
100015cb1:	lea	rdi, [rbp - 0x7d]
100015cb5:	xor	eax, eax
100015cb7:	cmp	byte ptr [rbp + rax - 0x80], 0x20
100015cbc:	jne	0x100015cc9
100015cbe:	inc	rax
100015cc1:	cmp	rax, 0x3
100015cc5:	jne	0x100015cb7
100015cc7:	jmp	0x100015cd1
100015cc9:	lea	rdi, [rax + rbp]
100015ccd:	add	rdi, -0x80
100015cd1:	mov	rsi, rbx
100015cd4:	call	0x10001970a ## symbol stub for: _fputs
100015cd9:	mov	rax, qword ptr [rip + 0xe330] ## literal pool symbol address: ___stack_chk_guard
100015ce0:	mov	rax, qword ptr [rax]
100015ce3:	cmp	rax, qword ptr [rbp - 0x10]
100015ce7:	jne	0x100015cf2
100015ce9:	xor	eax, eax
100015ceb:	add	rsp, 0x78
100015cef:	pop	rbx
100015cf0:	pop	rbp
100015cf1:	ret
100015cf2:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
100015cf7:	push	rbp
100015cf8:	mov	rbp, rsp
100015cfb:	mov	byte ptr [rsi], 0x0
100015cfe:	xor	r8d, r8d
100015d01:	cmp	rdi, 0x2800
100015d08:	jb	0x100015d25
100015d0a:	xor	r8d, r8d
100015d0d:	mov	rcx, rdi
100015d10:	shr	rcx, 0xa
100015d14:	inc	r8d
100015d17:	cmp	rdi, 0x9fffff
100015d1e:	mov	rdi, rcx
100015d21:	ja	0x100015d10
100015d23:	jmp	0x100015d28
100015d25:	mov	rcx, rdi
100015d28:	mov	byte ptr [rbp - 0x1], 0x20
100015d2c:	mov	word ptr [rbp - 0x3], 0x2020
100015d32:	mov	byte ptr [rbp - 0x4], 0x30
100015d36:	cmp	rcx, 0x3e7
100015d3d:	jbe	0x100015d87
100015d3f:	lea	rax, [rcx + rcx]
100015d43:	lea	rdi, [rax + 4*rax]
100015d47:	shr	rdi, 0xa
100015d4b:	movabs	rdx, -0x3333333333333333
100015d55:	mov	rax, rdi
100015d58:	mul	rdx
100015d5b:	inc	r8d
100015d5e:	shr	edx, 0x2
100015d61:	and	edx, -0x2
100015d64:	lea	eax, [rdx + 4*rdx]
100015d67:	sub	edi, eax
100015d69:	or	dil, 0x30
100015d6d:	mov	byte ptr [rbp - 0x4], dil
100015d71:	mov	byte ptr [rbp - 0x3], 0x2e
100015d75:	shr	rcx, 0xa
100015d79:	add	cl, 0x30
100015d7c:	mov	byte ptr [rbp - 0x2], cl
100015d7f:	mov	r9d, 0x3
100015d85:	jmp	0x100015dd1
100015d87:	mov	r9d, 0x1
100015d8d:	test	rcx, rcx
100015d90:	je	0x100015dd1
100015d92:	xor	edi, edi
100015d94:	movabs	r10, -0x3333333333333333
100015d9e:	mov	rax, rcx
100015da1:	mul	r10
100015da4:	shr	rdx, 0x3
100015da8:	lea	eax, [rdx + rdx]
100015dab:	lea	r11d, [rax + 4*rax]
100015daf:	mov	eax, ecx
100015db1:	sub	eax, r11d
100015db4:	or	al, 0x30
100015db6:	mov	byte ptr [rbp + rdi - 0x4], al
100015dba:	inc	rdi
100015dbd:	cmp	rcx, 0x9
100015dc1:	mov	rcx, rdx
100015dc4:	ja	0x100015d9e
100015dc6:	test	edi, edi
100015dc8:	je	0x100015dd1
100015dca:	test	edi, edi
100015dcc:	jle	0x100015e1e
100015dce:	mov	r9d, edi
100015dd1:	lea	eax, [r9 - 0x1]
100015dd5:	mov	ecx, eax
100015dd7:	mov	cl, byte ptr [rbp + rcx - 0x4]
100015ddb:	mov	byte ptr [rsi], cl
100015ddd:	inc	rsi
100015de0:	add	eax, -0x1
100015de3:	jb	0x100015dd5
100015de5:	cmp	r8d, 0x4
100015de9:	ja	0x100015e04
100015deb:	mov	al, 0x4b
100015ded:	mov	ecx, r8d
100015df0:	lea	rdx, [rip + 0x2d]
100015df7:	movsxd	rcx, dword ptr [rdx + 4*rcx]
100015dfb:	add	rcx, rdx
100015dfe:	jmp	rcx
100015e00:	mov	al, 0x4d
100015e02:	jmp	0x100015e0e
100015e04:	mov	al, 0x3f
100015e06:	jmp	0x100015e0e
100015e08:	mov	al, 0x47
100015e0a:	jmp	0x100015e0e
100015e0c:	mov	al, 0x54
100015e0e:	mov	byte ptr [rsi], al
100015e10:	inc	rsi
100015e13:	inc	r9d
100015e16:	mov	byte ptr [rsi], 0x0
100015e19:	mov	eax, r9d
100015e1c:	pop	rbp
100015e1d:	ret
100015e1e:	xor	r9d, r9d
100015e21:	jmp	0x100015de5
100015e23:	nop
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xea #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100015e2c:	fdiv	st(7), st
	.byte 0xff #bad opcode
100015e2f:	jmp	rsp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100015e34:	call	0x156015e38
100015e39:	mov	rbp, rsp
100015e3c:	push	r15
100015e3e:	push	r14
100015e40:	push	r12
100015e42:	push	rbx
100015e43:	test	rdi, rdi
100015e46:	je	0x100015e5d
100015e48:	mov	r12, rdi
100015e4b:	mov	bl, byte ptr [rdi]
100015e4d:	lea	eax, [rbx - 0x30]
100015e50:	cmp	al, 0xa
100015e52:	jb	0x100015e6d
100015e54:	lea	rdi, [rip + 0xda00] ## literal pool for: "Unable to read number (must start with digit): "
100015e5b:	jmp	0x100015e82
100015e5d:	lea	rdi, [rip + 0xd9ca] ## literal pool for: "Unable to read empty number in ReadNumString"
100015e64:	lea	rsi, [rip + 0x494c] ## literal pool for: ""
100015e6b:	jmp	0x100015e85
100015e6d:	mov	rdi, r12
100015e70:	call	0x100019830 ## symbol stub for: _strlen
100015e75:	cmp	rax, 0x9
100015e79:	jb	0x100015e9d
100015e7b:	lea	rdi, [rip + 0xda09] ## literal pool for: "Number too long to read (8 characters max): "
100015e82:	mov	rsi, r12
100015e85:	call	0x1000034f4
100015e8a:	mov	r14, -0x1
100015e91:	mov	rax, r14
100015e94:	pop	rbx
100015e95:	pop	r12
100015e97:	pop	r14
100015e99:	pop	r15
100015e9b:	pop	rbp
100015e9c:	ret
100015e9d:	mov	rdi, r12
100015ea0:	call	0x1000196aa ## symbol stub for: _atoi
100015ea5:	movsxd	r15, eax
100015ea8:	mov	eax, 0x1
100015ead:	mov	rcx, qword ptr [rip + 0xe14c] ## literal pool symbol address: __DefaultRuneLocale
100015eb4:	test	bl, bl
100015eb6:	js	0x100015ed2
100015eb8:	movzx	edx, bl
100015ebb:	test	byte ptr [rcx + 4*rdx + 0x3d], 0x4
100015ec0:	je	0x100015ed2
100015ec2:	mov	bl, byte ptr [r12 + rax]
100015ec6:	inc	rax
100015ec9:	test	bl, bl
100015ecb:	jne	0x100015eb4
100015ecd:	mov	r14, r15
100015ed0:	jmp	0x100015e91
100015ed2:	mov	eax, eax
100015ed4:	mov	r14, -0x1
100015edb:	cmp	byte ptr [r12 + rax], 0x0
100015ee0:	jne	0x100015e91
100015ee2:	movsx	edi, bl
100015ee5:	call	0x10001969e ## symbol stub for: ___toupper
100015eea:	shl	eax, 0x18
100015eed:	cmp	eax, 0x4cffffff
100015ef2:	jg	0x100015f09
100015ef4:	cmp	eax, 0x47000000
100015ef9:	je	0x100015f22
100015efb:	mov	ecx, 0x400
100015f00:	cmp	eax, 0x4b000000
100015f05:	je	0x100015f33
100015f07:	jmp	0x100015e91
100015f09:	cmp	eax, 0x54000000
100015f0e:	je	0x100015f29
100015f10:	cmp	eax, 0x4d000000
100015f15:	jne	0x100015e91
100015f1b:	mov	ecx, 0x100000
100015f20:	jmp	0x100015f33
100015f22:	mov	ecx, 0x40000000
100015f27:	jmp	0x100015f33
100015f29:	movabs	rcx, 0x10000000000
100015f33:	imul	rcx, r15
100015f37:	mov	r14, rcx
100015f3a:	jmp	0x100015e91
100015f3f:	push	rbp
100015f40:	mov	rbp, rsp
100015f43:	push	r15
100015f45:	push	r14
100015f47:	push	r13
100015f49:	push	r12
100015f4b:	push	rbx
100015f4c:	sub	rsp, 0x18
100015f50:	mov	r13, rsi
100015f53:	mov	bl, byte ptr [rdi]
100015f55:	xor	eax, eax
100015f57:	test	bl, bl
100015f59:	je	0x100015fb1
100015f5b:	mov	dword ptr [rbp - 0x2c], ecx
100015f5e:	xor	r12d, r12d
100015f61:	mov	qword ptr [rbp - 0x38], rdi
100015f65:	movsx	r15d, byte ptr [r13 + r12]
100015f6b:	test	r15d, r15d
100015f6e:	je	0x100015fa7
100015f70:	test	edx, edx
100015f72:	je	0x100015f7b
100015f74:	cmp	bl, r15b
100015f77:	je	0x100015f9b
100015f79:	jmp	0x100015fc5
100015f7b:	movsx	edi, bl
100015f7e:	mov	ebx, edx
100015f80:	call	0x10001969e ## symbol stub for: ___toupper
100015f85:	mov	r14d, eax
100015f88:	mov	edi, r15d
100015f8b:	call	0x10001969e ## symbol stub for: ___toupper
100015f90:	mov	rdi, qword ptr [rbp - 0x38]
100015f94:	mov	edx, ebx
100015f96:	cmp	r14d, eax
100015f99:	jne	0x100015fc5
100015f9b:	mov	bl, byte ptr [rdi + r12 + 0x1]
100015fa0:	inc	r12
100015fa3:	test	bl, bl
100015fa5:	jne	0x100015f65
100015fa7:	add	r13, r12
100015faa:	xor	eax, eax
100015fac:	mov	ecx, dword ptr [rbp - 0x2c]
100015faf:	jmp	0x100015fb4
100015fb1:	xor	r12d, r12d
100015fb4:	cmp	r12d, ecx
100015fb7:	jl	0x100015fc7
100015fb9:	xor	eax, eax
100015fbb:	cmp	byte ptr [r13], 0x0
100015fc0:	sete	al
100015fc3:	jmp	0x100015fc7
100015fc5:	xor	eax, eax
100015fc7:	add	rsp, 0x18
100015fcb:	pop	rbx
100015fcc:	pop	r12
100015fce:	pop	r13
100015fd0:	pop	r14
100015fd2:	pop	r15
100015fd4:	pop	rbp
100015fd5:	ret
100015fd6:	push	rbp
100015fd7:	mov	rbp, rsp
100015fda:	mov	eax, 0xfffd
100015fdf:	and	eax, dword ptr [rip + 0x46d6b]
100015fe5:	lea	ecx, [rax + 0x2]
100015fe8:	xor	eax, 0x3
100015feb:	imul	eax, ecx
100015fee:	movzx	eax, ah
100015ff1:	pop	rbp
100015ff2:	ret
100015ff3:	push	rbp
100015ff4:	mov	rbp, rsp
100015ff7:	mov	eax, edi
100015ff9:	lea	rcx, [rip + 0x13910]
100016000:	mov	rcx, qword ptr [rcx]
100016003:	mov	rdx, qword ptr [rip + 0x46d26]
10001600a:	mov	esi, edx
10001600c:	xor	esi, edi
10001600e:	movzx	esi, sil
100016012:	shr	rdx, 0x8
100016016:	xor	rdx, qword ptr [rcx + 8*rsi]
10001601a:	mov	qword ptr [rip + 0x46d0f], rdx
100016021:	mov	r8d, 0xff
100016027:	and	rdx, r8
10001602a:	add	rdx, qword ptr [rip + 0x46d0f]
100016031:	imul	rdx, rdx, 0x8088405
100016038:	inc	rdx
10001603b:	mov	qword ptr [rip + 0x46cfe], rdx
100016042:	mov	rsi, qword ptr [rip + 0x46d07]
100016049:	shr	edx, 0x18
10001604c:	mov	edi, esi
10001604e:	xor	edi, edx
100016050:	and	rdi, r8
100016053:	shr	rsi, 0x8
100016057:	xor	rsi, qword ptr [rcx + 8*rdi]
10001605b:	mov	qword ptr [rip + 0x46cee], rsi
100016062:	pop	rbp
100016063:	ret
100016064:	push	rbp
100016065:	mov	rbp, rsp
100016068:	push	rbx
100016069:	push	rax
10001606a:	mov	qword ptr [rip + 0x46cbb], 0x12345678
100016075:	mov	qword ptr [rip + 0x46cc0], 0x23456789
100016080:	mov	qword ptr [rip + 0x46cc5], 0x34567890
10001608b:	mov	al, byte ptr [rdi]
10001608d:	test	al, al
10001608f:	je	0x1000160a8
100016091:	mov	rbx, rdi
100016094:	inc	rbx
100016097:	movsx	edi, al
10001609a:	call	0x100015ff3
10001609f:	mov	al, byte ptr [rbx]
1000160a1:	inc	rbx
1000160a4:	test	al, al
1000160a6:	jne	0x100016097
1000160a8:	add	rsp, 0x8
1000160ac:	pop	rbx
1000160ad:	pop	rbp
1000160ae:	ret
1000160af:	push	rbp
1000160b0:	mov	rbp, rsp
1000160b3:	push	r15
1000160b5:	push	r14
1000160b7:	push	r13
1000160b9:	push	r12
1000160bb:	push	rbx
1000160bc:	sub	rsp, 0x28
1000160c0:	mov	r12, rsi
1000160c3:	mov	rbx, rdi
1000160c6:	mov	rax, qword ptr [rip + 0xdf43] ## literal pool symbol address: ___stack_chk_guard
1000160cd:	mov	rax, qword ptr [rax]
1000160d0:	mov	qword ptr [rbp - 0x30], rax
1000160d4:	mov	eax, dword ptr [rip + 0x46c46]
1000160da:	lea	ecx, [rax + 0x1]
1000160dd:	mov	dword ptr [rip + 0x46c3d], ecx
1000160e3:	test	eax, eax
1000160e5:	jne	0x100016100
1000160e7:	xor	edi, edi
1000160e9:	call	0x10001985a ## symbol stub for: _time
1000160ee:	mov	r15, rax
1000160f1:	call	0x100019740 ## symbol stub for: _getpid
1000160f6:	xor	eax, r15d
1000160f9:	mov	edi, eax
1000160fb:	call	0x100019800 ## symbol stub for: _srand
100016100:	mov	qword ptr [rbp - 0x48], rbx
100016104:	mov	rdi, rbx
100016107:	call	0x100016064
10001610c:	xor	ebx, ebx
10001610e:	mov	r13d, 0xfffd
100016114:	call	0x1000197be ## symbol stub for: _rand
100016119:	mov	r15d, eax
10001611c:	shr	r15d, 0x7
100016120:	movzx	edi, r15b
100016124:	mov	r14d, dword ptr [rip + 0x46c25]
10001612b:	and	r14d, r13d
10001612e:	lea	eax, [r14 + 0x2]
100016132:	xor	r14d, 0x3
100016136:	imul	r14d, eax
10001613a:	shr	r14d, 0x8
10001613e:	call	0x100015ff3
100016143:	xor	r14d, r15d
100016146:	mov	byte ptr [rbp + rbx - 0x3c], r14b
10001614b:	inc	rbx
10001614e:	cmp	rbx, 0xa
100016152:	jne	0x100016114
100016154:	mov	rdi, qword ptr [rbp - 0x48]
100016158:	call	0x100016064
10001615d:	xor	r13d, r13d
100016160:	mov	r15d, 0xfffd
100016166:	mov	ebx, dword ptr [rip + 0x46be4]
10001616c:	and	ebx, r15d
10001616f:	lea	eax, [rbx + 0x2]
100016172:	xor	ebx, 0x3
100016175:	imul	ebx, eax
100016178:	shr	ebx, 0x8
10001617b:	movzx	r14d, byte ptr [rbp + r13 - 0x3c]
100016181:	mov	edi, r14d
100016184:	call	0x100015ff3
100016189:	xor	ebx, r14d
10001618c:	mov	byte ptr [rbp + r13 - 0x3c], bl
100016191:	inc	r13
100016194:	cmp	r13, 0xa
100016198:	jne	0x100016166
10001619a:	mov	r13d, 0xfffd
1000161a0:	mov	ebx, dword ptr [rip + 0x46baa]
1000161a6:	and	ebx, r13d
1000161a9:	lea	eax, [rbx + 0x2]
1000161ac:	xor	ebx, 0x3
1000161af:	imul	ebx, eax
1000161b2:	shr	ebx, 0x8
1000161b5:	mov	r14, r12
1000161b8:	shr	r14, 0x10
1000161bc:	mov	r15d, 0xff
1000161c2:	mov	edi, r14d
1000161c5:	and	edi, r15d
1000161c8:	call	0x100015ff3
1000161cd:	xor	ebx, r14d
1000161d0:	lea	r14, [rbp - 0x3c]
1000161d4:	mov	byte ptr [r14 + 0xa], bl
1000161d8:	and	r13d, dword ptr [rip + 0x46b71]
1000161df:	lea	eax, [r13 + 0x2]
1000161e3:	xor	r13d, 0x3
1000161e7:	imul	r13d, eax
1000161eb:	shr	r13d, 0x8
1000161ef:	shr	r12, 0x18
1000161f3:	and	r15d, r12d
1000161f6:	mov	edi, r15d
1000161f9:	call	0x100015ff3
1000161fe:	xor	r13d, r12d
100016201:	mov	byte ptr [r14 + 0xb], r13b
100016205:	mov	esi, 0x1
10001620a:	mov	edx, 0xc
10001620f:	mov	rdi, r14
100016212:	xor	ecx, ecx
100016214:	call	0x1000121b7
100016219:	mov	rax, qword ptr [rip + 0xddf0] ## literal pool symbol address: ___stack_chk_guard
100016220:	mov	rax, qword ptr [rax]
100016223:	cmp	rax, qword ptr [rbp - 0x30]
100016227:	jne	0x100016238
100016229:	add	rsp, 0x28
10001622d:	pop	rbx
10001622e:	pop	r12
100016230:	pop	r13
100016232:	pop	r14
100016234:	pop	r15
100016236:	pop	rbp
100016237:	ret
100016238:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
10001623d:	push	rbp
10001623e:	mov	rbp, rsp
100016241:	push	r15
100016243:	push	r14
100016245:	push	r13
100016247:	push	r12
100016249:	push	rbx
10001624a:	sub	rsp, 0x18
10001624e:	mov	qword ptr [rbp - 0x38], rdx
100016252:	mov	qword ptr [rbp - 0x30], rsi
100016256:	mov	r13, rdi
100016259:	lea	rax, [rip + 0x13548]
100016260:	cmp	qword ptr [rax], 0x0
100016264:	je	0x1000162ae
100016266:	mov	r12, qword ptr [rbp - 0x38]
10001626a:	imul	r12, qword ptr [rbp - 0x30]
10001626f:	test	r12, r12
100016272:	je	0x1000162ae
100016274:	xor	ebx, ebx
100016276:	mov	r14d, 0xfffd
10001627c:	mov	r15d, dword ptr [rip + 0x46acd]
100016283:	and	r15d, r14d
100016286:	lea	eax, [r15 + 0x2]
10001628a:	xor	r15d, 0x3
10001628e:	imul	r15d, eax
100016292:	shr	r15d, 0x8
100016296:	movsx	edi, byte ptr [r13 + rbx]
10001629c:	call	0x100015ff3
1000162a1:	xor	byte ptr [r13 + rbx], r15b
1000162a6:	inc	rbx
1000162a9:	cmp	r12, rbx
1000162ac:	jne	0x10001627c
1000162ae:	mov	rdi, r13
1000162b1:	mov	rsi, qword ptr [rbp - 0x30]
1000162b5:	mov	rdx, qword ptr [rbp - 0x38]
1000162b9:	xor	ecx, ecx
1000162bb:	add	rsp, 0x18
1000162bf:	pop	rbx
1000162c0:	pop	r12
1000162c2:	pop	r13
1000162c4:	pop	r14
1000162c6:	pop	r15
1000162c8:	pop	rbp
1000162c9:	jmp	0x1000121b7
1000162ce:	push	rbp
1000162cf:	mov	rbp, rsp
1000162d2:	push	r14
1000162d4:	push	rbx
1000162d5:	sub	rsp, 0x50
1000162d9:	mov	ebx, edi
1000162db:	mov	rax, qword ptr [rip + 0xdd2e] ## literal pool symbol address: ___stack_chk_guard
1000162e2:	mov	rax, qword ptr [rax]
1000162e5:	mov	qword ptr [rbp - 0x18], rax
1000162e9:	mov	dword ptr [rip + 0x131b1], edi
1000162ef:	lea	r14, [rbp - 0x60]
1000162f3:	mov	rsi, r14
1000162f6:	call	0x10001984e ## symbol stub for: _tcgetattr
1000162fb:	and	byte ptr [r14 + 0x18], -0x9
100016300:	mov	edi, ebx
100016302:	mov	esi, 0x2
100016307:	mov	rdx, r14
10001630a:	call	0x100019854 ## symbol stub for: _tcsetattr
10001630f:	mov	rax, qword ptr [rip + 0xdcfa] ## literal pool symbol address: ___stack_chk_guard
100016316:	mov	rax, qword ptr [rax]
100016319:	cmp	rax, qword ptr [rbp - 0x18]
10001631d:	jne	0x100016328
10001631f:	add	rsp, 0x50
100016323:	pop	rbx
100016324:	pop	r14
100016326:	pop	rbp
100016327:	ret
100016328:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
10001632d:	push	rbp
10001632e:	mov	rbp, rsp
100016331:	push	rbx
100016332:	sub	rsp, 0x58
100016336:	mov	rax, qword ptr [rip + 0xdcd3] ## literal pool symbol address: ___stack_chk_guard
10001633d:	mov	rax, qword ptr [rax]
100016340:	mov	qword ptr [rbp - 0x10], rax
100016344:	mov	edi, dword ptr [rip + 0x13156]
10001634a:	cmp	edi, -0x1
10001634d:	je	0x10001637c
10001634f:	lea	rbx, [rbp - 0x58]
100016353:	mov	rsi, rbx
100016356:	call	0x10001984e ## symbol stub for: _tcgetattr
10001635b:	or	byte ptr [rbx + 0x18], 0x8
10001635f:	mov	edi, dword ptr [rip + 0x1313b]
100016365:	mov	esi, 0x2
10001636a:	mov	rdx, rbx
10001636d:	call	0x100019854 ## symbol stub for: _tcsetattr
100016372:	mov	dword ptr [rip + 0x13124], 0xffffffff
10001637c:	mov	rax, qword ptr [rip + 0xdc8d] ## literal pool symbol address: ___stack_chk_guard
100016383:	mov	rax, qword ptr [rax]
100016386:	cmp	rax, qword ptr [rbp - 0x10]
10001638a:	jne	0x100016393
10001638c:	add	rsp, 0x58
100016390:	pop	rbx
100016391:	pop	rbp
100016392:	ret
100016393:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
100016398:	push	rbp
100016399:	mov	rbp, rsp
10001639c:	push	r15
10001639e:	push	r14
1000163a0:	push	r13
1000163a2:	push	r12
1000163a4:	push	rbx
1000163a5:	sub	rsp, 0x18
1000163a9:	mov	r12d, edx
1000163ac:	mov	r14, rsi
1000163af:	mov	qword ptr [rbp - 0x38], rdi
1000163b3:	lea	rdi, [rip + 0xd77b] ## literal pool for: "/dev/tty"
1000163ba:	xor	esi, esi
1000163bc:	xor	eax, eax
1000163be:	call	0x10001977c ## symbol stub for: _open
1000163c3:	cmp	eax, -0x1
1000163c6:	je	0x10001647f
1000163cc:	mov	ebx, eax
1000163ce:	lea	rdi, [rip + 0x43e2] ## literal pool for: ""
1000163d5:	mov	r15, qword ptr [rip + 0xdc3c] ## literal pool symbol address: ___stderrp
1000163dc:	lea	r13, [rbp - 0x29]
1000163e0:	mov	rsi, qword ptr [r15]
1000163e3:	call	0x10001970a ## symbol stub for: _fputs
1000163e8:	mov	rsi, qword ptr [r15]
1000163eb:	mov	rdi, qword ptr [rbp - 0x38]
1000163ef:	call	0x10001970a ## symbol stub for: _fputs
1000163f4:	mov	rdi, qword ptr [r15]
1000163f7:	call	0x1000196e6 ## symbol stub for: _fflush
1000163fc:	mov	edi, ebx
1000163fe:	call	0x1000162ce
100016403:	xor	r15d, r15d
100016406:	mov	edx, 0x1
10001640b:	mov	edi, ebx
10001640d:	mov	rsi, r13
100016410:	call	0x1000197c4 ## symbol stub for: _read
100016415:	mov	al, byte ptr [rbp - 0x29]
100016418:	cmp	r15d, r12d
10001641b:	jge	0x100016427
10001641d:	movsxd	rcx, r15d
100016420:	inc	r15d
100016423:	mov	byte ptr [r14 + rcx], al
100016427:	cmp	al, 0xa
100016429:	jne	0x100016406
10001642b:	call	0x10001632d
100016430:	mov	rax, qword ptr [rip + 0xdbe1] ## literal pool symbol address: ___stderrp
100016437:	mov	rsi, qword ptr [rax]
10001643a:	mov	edi, 0xa
10001643f:	call	0x1000197a6 ## symbol stub for: _putc
100016444:	mov	rax, qword ptr [rip + 0xdbcd] ## literal pool symbol address: ___stderrp
10001644b:	mov	rdi, qword ptr [rax]
10001644e:	call	0x1000196e6 ## symbol stub for: _fflush
100016453:	movsxd	rax, r15d
100016456:	mov	r15, qword ptr [rip + 0xdbbb] ## literal pool symbol address: ___stderrp
10001645d:	cmp	byte ptr [rax + r14 - 0x1], 0xa
100016463:	lea	rdi, [rip + 0xd6d4] ## literal pool for: "(line too long--try again)\n"
10001646a:	jne	0x1000163e0
100016470:	mov	byte ptr [r14 + rax - 0x1], 0x0
100016476:	mov	edi, ebx
100016478:	call	0x1000196bc ## symbol stub for: _close
10001647d:	jmp	0x100016482
10001647f:	xor	r14d, r14d
100016482:	mov	rax, r14
100016485:	add	rsp, 0x18
100016489:	pop	rbx
10001648a:	pop	r12
10001648c:	pop	r13
10001648e:	pop	r14
100016490:	pop	r15
100016492:	pop	rbp
100016493:	ret
100016494:	push	rbp
100016495:	mov	rbp, rsp
100016498:	push	r15
10001649a:	push	r14
10001649c:	push	r13
10001649e:	push	r12
1000164a0:	push	rbx
1000164a1:	sub	rsp, 0xa8
1000164a8:	mov	r13d, esi
1000164ab:	mov	r12, rdi
1000164ae:	lea	rsi, [rip + 0x604d] ## literal pool for: "-"
1000164b5:	call	0x10001981e ## symbol stub for: _strcmp
1000164ba:	test	eax, eax
1000164bc:	je	0x1000164db
1000164be:	lea	rax, [rip + 0x132bf]
1000164c5:	cmp	dword ptr [rax], 0x0
1000164c8:	je	0x1000164f0
1000164ca:	lea	rsi, [rbp - 0xc8]
1000164d1:	mov	rdi, r12
1000164d4:	call	0x100019752 ## symbol stub for: _lstat$INODE64
1000164d9:	jmp	0x1000164ff
1000164db:	mov	rdi, r12
1000164de:	xor	esi, esi
1000164e0:	mov	edx, r13d
1000164e3:	call	0x100010ed3
1000164e8:	mov	r14d, eax
1000164eb:	jmp	0x100016816
1000164f0:	lea	rsi, [rbp - 0xc8]
1000164f7:	mov	rdi, r12
1000164fa:	call	0x10001980c ## symbol stub for: _stat$INODE64
1000164ff:	test	eax, eax
100016501:	je	0x1000165c9
100016507:	mov	rdi, r12
10001650a:	xor	esi, esi
10001650c:	xor	edx, edx
10001650e:	call	0x10001683e
100016513:	mov	r15, rax
100016516:	lea	rax, [rip + 0x133bb]
10001651d:	mov	rbx, qword ptr [rax]
100016520:	mov	r12d, 0x1
100016526:	test	rbx, rbx
100016529:	je	0x1000165b6
10001652f:	lea	r14, [rip + 0x13176]
100016536:	mov	rsi, qword ptr [rbx + 0x70]
10001653a:	mov	rdi, r15
10001653d:	mov	edx, r13d
100016540:	call	0x100014d38
100016545:	test	eax, eax
100016547:	je	0x1000165aa
100016549:	lea	rax, [rip + 0x133b0]
100016550:	cmp	dword ptr [rax], 0x0
100016553:	je	0x100016563
100016555:	mov	rdi, qword ptr [rbx + 0x78]
100016559:	mov	esi, r13d
10001655c:	call	0x100010a07
100016561:	jmp	0x100016568
100016563:	mov	eax, 0x1
100016568:	mov	dword ptr [rbx + 0x88], eax
10001656e:	cmp	dword ptr [r14], 0x0
100016572:	je	0x1000165a7
100016574:	lea	rdx, [rip + 0xce11] ## literal pool for: "ex"
10001657b:	test	eax, eax
10001657d:	je	0x100016586
10001657f:	lea	rdx, [rip + 0xce03] ## literal pool for: "in"
100016586:	lea	rax, [rip + 0x149a3]
10001658d:	mov	rdi, qword ptr [rax]
100016590:	mov	rcx, qword ptr [rbx + 0x50]
100016594:	xor	r12d, r12d
100016597:	lea	rsi, [rip + 0xcdcd] ## literal pool for: "zip diagnostic: %scluding %s\n"
10001659e:	xor	eax, eax
1000165a0:	call	0x1000196fe ## symbol stub for: _fprintf
1000165a5:	jmp	0x1000165aa
1000165a7:	xor	r12d, r12d
1000165aa:	mov	rbx, qword ptr [rbx + 0x98]
1000165b1:	test	rbx, rbx
1000165b4:	jne	0x100016536
1000165b6:	mov	rdi, r15
1000165b9:	call	0x100019716 ## symbol stub for: _free
1000165be:	neg	r12d
1000165c1:	sbb	r14d, r14d
1000165c4:	jmp	0x100016816
1000165c9:	movzx	eax, word ptr [rbp - 0xc4]
1000165d0:	test	ax, ax
1000165d3:	js	0x1000166c1
1000165d9:	mov	ecx, eax
1000165db:	and	ecx, 0xa000
1000165e1:	cmp	ecx, 0xa000
1000165e7:	je	0x1000166c1
1000165ed:	bt	eax, 0xe
1000165f1:	jb	0x100016609
1000165f3:	bt	eax, 0xc
1000165f7:	jb	0x100016696
1000165fd:	lea	rdi, [rip + 0xd5a4] ## literal pool for: "ignoring special file: "
100016604:	jmp	0x10001680b
100016609:	mov	rdi, r12
10001660c:	call	0x100019830 ## symbol stub for: _strlen
100016611:	lea	rdi, [rax + 0x2]
100016615:	call	0x100019758 ## symbol stub for: _malloc
10001661a:	mov	r14d, 0x4
100016620:	test	rax, rax
100016623:	je	0x100016816
100016629:	mov	rbx, rax
10001662c:	lea	rsi, [rip + 0x685b] ## literal pool for: "."
100016633:	mov	rdi, r12
100016636:	call	0x10001981e ## symbol stub for: _strcmp
10001663b:	test	eax, eax
10001663d:	je	0x1000166de
100016643:	mov	rdi, rbx
100016646:	mov	rsi, r12
100016649:	call	0x100019824 ## symbol stub for: _strcpy
10001664e:	mov	rdi, rbx
100016651:	call	0x100019830 ## symbol stub for: _strlen
100016656:	cmp	byte ptr [rbx + rax - 0x1], 0x2f
10001665b:	je	0x100016663
10001665d:	mov	word ptr [rbx + rax], 0x2f
100016663:	lea	rax, [rip + 0x12dea]
10001666a:	cmp	dword ptr [rax], 0x0
10001666d:	je	0x1000166e1
10001666f:	mov	rdi, rbx
100016672:	mov	esi, 0x1
100016677:	mov	edx, r13d
10001667a:	call	0x100010ed3
10001667f:	test	eax, eax
100016681:	je	0x1000166e1
100016683:	mov	r15d, eax
100016686:	mov	rdi, rbx
100016689:	call	0x100019716 ## symbol stub for: _free
10001668e:	mov	r14d, r15d
100016691:	jmp	0x100016816
100016696:	lea	rax, [rip + 0x130fb]
10001669d:	cmp	dword ptr [rax], 0x0
1000166a0:	je	0x100016804
1000166a6:	lea	rax, [rip + 0x12daf]
1000166ad:	cmp	dword ptr [rax], 0x0
1000166b0:	je	0x1000166c1
1000166b2:	lea	rdi, [rip + 0xd4a4] ## literal pool for: "Reading FIFO (Named Pipe): "
1000166b9:	mov	rsi, r12
1000166bc:	call	0x1000034f4
1000166c1:	mov	rdi, r12
1000166c4:	xor	esi, esi
1000166c6:	mov	edx, r13d
1000166c9:	call	0x100010ed3
1000166ce:	mov	r14d, eax
1000166d1:	test	eax, eax
1000166d3:	jne	0x100016816
1000166d9:	jmp	0x100016813
1000166de:	mov	byte ptr [rbx], 0x0
1000166e1:	mov	qword ptr [rbp - 0x38], rbx
1000166e5:	lea	rax, [rip + 0x12fb4]
1000166ec:	cmp	dword ptr [rax], 0x0
1000166ef:	je	0x1000167f9
1000166f5:	mov	rdi, r12
1000166f8:	call	0x100019782 ## symbol stub for: _opendir$INODE64
1000166fd:	test	rax, rax
100016700:	je	0x1000167f9
100016706:	mov	r15, rax
100016709:	mov	rdi, rax
10001670c:	call	0x1000197ca ## symbol stub for: _readdir$INODE64
100016711:	test	rax, rax
100016714:	je	0x1000167f1
10001671a:	mov	rbx, rax
10001671d:	lea	r12, [rip + 0x676a] ## literal pool for: "."
100016724:	mov	qword ptr [rbp - 0x30], r15
100016728:	add	rbx, 0x15
10001672c:	mov	rdi, rbx
10001672f:	mov	rsi, r12
100016732:	call	0x10001981e ## symbol stub for: _strcmp
100016737:	test	eax, eax
100016739:	je	0x1000167dd
10001673f:	mov	rdi, rbx
100016742:	lea	rsi, [rip + 0xd411] ## literal pool for: ".."
100016749:	call	0x10001981e ## symbol stub for: _strcmp
10001674e:	test	eax, eax
100016750:	je	0x1000167dd
100016756:	mov	r15, qword ptr [rbp - 0x38]
10001675a:	mov	rdi, r15
10001675d:	call	0x100019830 ## symbol stub for: _strlen
100016762:	mov	r12, rax
100016765:	mov	rdi, rbx
100016768:	call	0x100019830 ## symbol stub for: _strlen
10001676d:	lea	rdi, [r12 + rax]
100016771:	inc	rdi
100016774:	call	0x100019758 ## symbol stub for: _malloc
100016779:	test	rax, rax
10001677c:	je	0x10001682b
100016782:	mov	r12, rax
100016785:	mov	rdi, rax
100016788:	mov	rsi, r15
10001678b:	call	0x100019824 ## symbol stub for: _strcpy
100016790:	mov	rdi, r12
100016793:	mov	rsi, rbx
100016796:	call	0x100019812 ## symbol stub for: _strcat
10001679b:	mov	rdi, r12
10001679e:	mov	esi, r13d
1000167a1:	call	0x100016494
1000167a6:	test	eax, eax
1000167a8:	je	0x1000167ca
1000167aa:	cmp	eax, -0x1
1000167ad:	jne	0x1000167c0
1000167af:	lea	rdi, [rip + 0x62df] ## literal pool for: "name not matched: "
1000167b6:	mov	rsi, r12
1000167b9:	call	0x1000034f4
1000167be:	jmp	0x1000167ca
1000167c0:	mov	edi, eax
1000167c2:	mov	rsi, r12
1000167c5:	call	0x100002e30
1000167ca:	mov	rdi, r12
1000167cd:	call	0x100019716 ## symbol stub for: _free
1000167d2:	mov	r15, qword ptr [rbp - 0x30]
1000167d6:	lea	r12, [rip + 0x66b1] ## literal pool for: "."
1000167dd:	mov	rdi, r15
1000167e0:	call	0x1000197ca ## symbol stub for: _readdir$INODE64
1000167e5:	mov	rbx, rax
1000167e8:	test	rax, rax
1000167eb:	jne	0x100016728
1000167f1:	mov	rdi, r15
1000167f4:	call	0x1000196c2 ## symbol stub for: _closedir
1000167f9:	mov	rdi, qword ptr [rbp - 0x38]
1000167fd:	call	0x100019716 ## symbol stub for: _free
100016802:	jmp	0x100016813
100016804:	lea	rdi, [rip + 0xd36e] ## literal pool for: "ignoring FIFO (Named Pipe) - use -FI to read: "
10001680b:	mov	rsi, r12
10001680e:	call	0x1000034f4
100016813:	xor	r14d, r14d
100016816:	mov	eax, r14d
100016819:	add	rsp, 0xa8
100016820:	pop	rbx
100016821:	pop	r12
100016823:	pop	r13
100016825:	pop	r14
100016827:	pop	r15
100016829:	pop	rbp
10001682a:	ret
10001682b:	mov	rdi, qword ptr [rbp - 0x30]
10001682f:	call	0x1000196c2 ## symbol stub for: _closedir
100016834:	mov	rdi, r15
100016837:	call	0x100019716 ## symbol stub for: _free
10001683c:	jmp	0x100016816
10001683e:	push	rbp
10001683f:	mov	rbp, rsp
100016842:	push	r15
100016844:	push	r14
100016846:	push	r13
100016848:	push	r12
10001684a:	push	rbx
10001684b:	push	rax
10001684c:	mov	r14, rdx
10001684f:	mov	rbx, rdi
100016852:	lea	r13, [rip + 0x12e4f]
100016859:	mov	r12d, dword ptr [r13]
10001685d:	lea	rsi, [rip + 0xd35c] ## literal pool for: "//"
100016864:	mov	edx, 0x2
100016869:	call	0x100019836 ## symbol stub for: _strncmp
10001686e:	test	eax, eax
100016870:	je	0x100016908
100016876:	dec	rbx
100016879:	mov	al, byte ptr [rbx + 0x1]
10001687c:	inc	rbx
10001687f:	cmp	al, 0x2f
100016881:	je	0x100016879
100016883:	cmp	al, 0x2e
100016885:	jne	0x10001689c
100016887:	cmp	byte ptr [rbx + 0x1], 0x2f
10001688b:	jne	0x10001689c
10001688d:	lea	r15, [rbx + 0x2]
100016891:	cmp	byte ptr [rbx + 0x2], 0x2e
100016895:	mov	rbx, r15
100016898:	je	0x100016887
10001689a:	jmp	0x10001689f
10001689c:	mov	r15, rbx
10001689f:	lea	rax, [rip + 0x12ba2]
1000168a6:	cmp	dword ptr [rax], 0x0
1000168a9:	jne	0x1000168bb
1000168ab:	mov	rdi, r15
1000168ae:	mov	esi, 0x2f
1000168b3:	call	0x10001080e
1000168b8:	mov	r15, rax
1000168bb:	mov	rdi, r15
1000168be:	call	0x100019830 ## symbol stub for: _strlen
1000168c3:	lea	rdi, [rax + 0x1]
1000168c7:	call	0x100019758 ## symbol stub for: _malloc
1000168cc:	mov	rbx, rax
1000168cf:	test	rax, rax
1000168d2:	je	0x1000168f6
1000168d4:	mov	rdi, rbx
1000168d7:	mov	rsi, r15
1000168da:	call	0x100019824 ## symbol stub for: _strcpy
1000168df:	cmp	dword ptr [r13], 0x0
1000168e4:	je	0x1000168ee
1000168e6:	mov	rdi, rbx
1000168e9:	call	0x100010831
1000168ee:	test	r14, r14
1000168f1:	je	0x1000168f6
1000168f3:	mov	dword ptr [r14], r12d
1000168f6:	mov	rax, rbx
1000168f9:	add	rsp, 0x8
1000168fd:	pop	rbx
1000168fe:	pop	r12
100016900:	pop	r13
100016902:	pop	r14
100016904:	pop	r15
100016906:	pop	rbp
100016907:	ret
100016908:	mov	al, byte ptr [rbx + 0x2]
10001690b:	test	al, al
10001690d:	je	0x100016876
100016913:	cmp	al, 0x2f
100016915:	je	0x100016876
10001691b:	add	rbx, 0x3
10001691f:	test	al, al
100016921:	je	0x100016943
100016923:	cmp	al, 0x2f
100016925:	je	0x10001692e
100016927:	mov	al, byte ptr [rbx]
100016929:	inc	rbx
10001692c:	jmp	0x10001691f
10001692e:	mov	al, byte ptr [rbx]
100016930:	inc	rbx
100016933:	cmp	al, 0x2f
100016935:	je	0x10001693b
100016937:	test	al, al
100016939:	jne	0x10001692e
10001693b:	test	al, al
10001693d:	jne	0x100016876
100016943:	xor	ebx, ebx
100016945:	jmp	0x100016876
10001694a:	push	rbp
10001694b:	mov	rbp, rsp
10001694e:	push	r14
100016950:	push	rbx
100016951:	mov	r14, rdi
100016954:	call	0x100019830 ## symbol stub for: _strlen
100016959:	lea	rdi, [rax + 0x1]
10001695d:	call	0x100019758 ## symbol stub for: _malloc
100016962:	mov	rbx, rax
100016965:	test	rax, rax
100016968:	je	0x100016975
10001696a:	mov	rdi, rbx
10001696d:	mov	rsi, r14
100016970:	call	0x100019824 ## symbol stub for: _strcpy
100016975:	mov	rax, rbx
100016978:	pop	rbx
100016979:	pop	r14
10001697b:	pop	rbp
10001697c:	ret
10001697d:	push	rbp
10001697e:	mov	rbp, rsp
100016981:	push	rbx
100016982:	sub	rsp, 0x18
100016986:	mov	rbx, rdi
100016989:	mov	rdi, rsi
10001698c:	call	0x10001158e
100016991:	lea	rsi, [rbp - 0x18]
100016995:	mov	qword ptr [rsi + 0x8], rax
100016999:	mov	qword ptr [rsi], rax
10001699c:	mov	rdi, rbx
10001699f:	call	0x100019872 ## symbol stub for: _utime
1000169a4:	add	rsp, 0x18
1000169a8:	pop	rbx
1000169a9:	pop	rbp
1000169aa:	ret
1000169ab:	push	rbp
1000169ac:	mov	rbp, rsp
1000169af:	push	r15
1000169b1:	push	r14
1000169b3:	push	r13
1000169b5:	push	r12
1000169b7:	push	rbx
1000169b8:	sub	rsp, 0x98
1000169bf:	mov	r12, rcx
1000169c2:	mov	r15, rsi
1000169c5:	lea	rax, [rip + 0x12ccc]
1000169cc:	cmp	qword ptr [rax], rdi
1000169cf:	je	0x100016a71
1000169d5:	mov	rbx, rdi
1000169d8:	mov	qword ptr [rbp - 0x30], rdx
1000169dc:	call	0x100019830 ## symbol stub for: _strlen
1000169e1:	mov	r14, rax
1000169e4:	shl	r14, 0x20
1000169e8:	movabs	rdi, offset __mh_execute_header
1000169f2:	add	rdi, r14
1000169f5:	sar	rdi, 0x20
1000169f9:	call	0x100019758 ## symbol stub for: _malloc
1000169fe:	mov	r13, rax
100016a01:	test	rax, rax
100016a04:	jne	0x100016a17
100016a06:	lea	rsi, [rip + 0xd1b6] ## literal pool for: "filetime"
100016a0d:	mov	edi, 0x4
100016a12:	call	0x100002e30
100016a17:	mov	rdi, r13
100016a1a:	mov	rsi, rbx
100016a1d:	call	0x100019824 ## symbol stub for: _strcpy
100016a22:	movabs	rax, -0x100000000
100016a2c:	add	r14, rax
100016a2f:	sar	r14, 0x20
100016a33:	cmp	byte ptr [r13 + r14], 0x2f
100016a39:	jne	0x100016a41
100016a3b:	mov	byte ptr [r13 + r14], 0x0
100016a41:	lea	rsi, [rip + 0x5aba] ## literal pool for: "-"
100016a48:	mov	rdi, rbx
100016a4b:	call	0x10001981e ## symbol stub for: _strcmp
100016a50:	test	eax, eax
100016a52:	je	0x100016aa1
100016a54:	lea	rax, [rip + 0x12d29]
100016a5b:	cmp	dword ptr [rax], 0x0
100016a5e:	je	0x100016ad8
100016a60:	lea	rsi, [rbp - 0xc0]
100016a67:	mov	rdi, r13
100016a6a:	call	0x100019752 ## symbol stub for: _lstat$INODE64
100016a6f:	jmp	0x100016ae7
100016a71:	test	r15, r15
100016a74:	je	0x100016a7d
100016a76:	mov	qword ptr [r15], 0x0
100016a7d:	test	rdx, rdx
100016a80:	je	0x100016a89
100016a82:	mov	qword ptr [rdx], -0x2
100016a89:	test	r12, r12
100016a8c:	je	0x100016af3
100016a8e:	xorps	xmm0, xmm0
100016a91:	movups	xmmword ptr [r12], xmm0
100016a96:	mov	qword ptr [r12 + 0x10], 0x0
100016a9f:	jmp	0x100016af3
100016aa1:	mov	rax, qword ptr [rip + 0xd578] ## literal pool symbol address: ___stdinp
100016aa8:	mov	rdi, qword ptr [rax]
100016aab:	call	0x1000196f2 ## symbol stub for: _fileno
100016ab0:	lea	rsi, [rbp - 0xc0]
100016ab7:	mov	edi, eax
100016ab9:	call	0x100019722 ## symbol stub for: _fstat$INODE64
100016abe:	test	eax, eax
100016ac0:	je	0x100016afa
100016ac2:	mov	rdi, r13
100016ac5:	call	0x100019716 ## symbol stub for: _free
100016aca:	lea	rdi, [rip + 0xd0fb] ## literal pool for: "fstat(stdin)"
100016ad1:	call	0x1000032ef
100016ad6:	jmp	0x100016afa
100016ad8:	lea	rsi, [rbp - 0xc0]
100016adf:	mov	rdi, r13
100016ae2:	call	0x10001980c ## symbol stub for: _stat$INODE64
100016ae7:	test	eax, eax
100016ae9:	je	0x100016afa
100016aeb:	mov	rdi, r13
100016aee:	call	0x100019716 ## symbol stub for: _free
100016af3:	xor	eax, eax
100016af5:	jmp	0x100016b91
100016afa:	mov	rdi, r13
100016afd:	call	0x100019716 ## symbol stub for: _free
100016b02:	test	r15, r15
100016b05:	je	0x100016b38
100016b07:	movzx	ecx, word ptr [rbp - 0xbc]
100016b0e:	mov	rdx, rcx
100016b11:	shl	rdx, 0x10
100016b15:	xor	eax, eax
100016b17:	test	cl, -0x80
100016b1a:	sete	al
100016b1d:	or	rax, rdx
100016b20:	mov	qword ptr [r15], rax
100016b23:	and	ecx, 0xf000
100016b29:	cmp	ecx, 0x4000
100016b2f:	jne	0x100016b38
100016b31:	or	rax, 0x10
100016b35:	mov	qword ptr [r15], rax
100016b38:	mov	rdx, qword ptr [rbp - 0x30]
100016b3c:	test	rdx, rdx
100016b3f:	je	0x100016b64
100016b41:	movzx	ecx, word ptr [rbp - 0xbc]
100016b48:	and	ecx, 0xf000
100016b4e:	mov	rax, -0x1
100016b55:	cmp	ecx, 0x8000
100016b5b:	jne	0x100016b61
100016b5d:	mov	rax, qword ptr [rbp - 0x60]
100016b61:	mov	qword ptr [rdx], rax
100016b64:	test	r12, r12
100016b67:	je	0x100016b85
100016b69:	mov	rax, qword ptr [rbp - 0xa0]
100016b70:	mov	qword ptr [r12], rax
100016b74:	mov	rax, qword ptr [rbp - 0x90]
100016b7b:	mov	qword ptr [r12 + 0x8], rax
100016b80:	mov	qword ptr [r12 + 0x10], rax
100016b85:	lea	rdi, [rbp - 0x90]
100016b8c:	call	0x1000114d4
100016b91:	add	rsp, 0x98
100016b98:	pop	rbx
100016b99:	pop	r12
100016b9b:	pop	r13
100016b9d:	pop	r14
100016b9f:	pop	r15
100016ba1:	pop	rbp
100016ba2:	ret
100016ba3:	push	rbp
100016ba4:	mov	rbp, rsp
100016ba7:	push	r15
100016ba9:	push	r14
100016bab:	push	r13
100016bad:	push	r12
100016baf:	push	rbx
100016bb0:	push	rax
100016bb1:	mov	qword ptr [rbp - 0x30], rsi
100016bb5:	mov	rbx, rdi
100016bb8:	movzx	r13d, word ptr [rdi + 0x2a]
100016bbd:	lea	r12, [r13 + 0xf]
100016bc1:	mov	rdi, r12
100016bc4:	call	0x100019758 ## symbol stub for: _malloc
100016bc9:	mov	r14d, 0x4
100016bcf:	test	rax, rax
100016bd2:	je	0x100016d39
100016bd8:	mov	r15, rax
100016bdb:	mov	rdi, r12
100016bde:	call	0x100019758 ## symbol stub for: _malloc
100016be3:	test	rax, rax
100016be6:	je	0x100016d39
100016bec:	mov	r12, rax
100016bef:	test	r13w, r13w
100016bf3:	je	0x100016c04
100016bf5:	mov	rsi, qword ptr [rbx + 0x58]
100016bf9:	mov	rdi, r15
100016bfc:	mov	rdx, r13
100016bff:	call	0x10001975e ## symbol stub for: _memcpy
100016c04:	movzx	edx, word ptr [rbx + 0x2c]
100016c08:	test	rdx, rdx
100016c0b:	je	0x100016c19
100016c0d:	mov	rsi, qword ptr [rbx + 0x60]
100016c11:	mov	rdi, r12
100016c14:	call	0x10001975e ## symbol stub for: _memcpy
100016c19:	mov	rdi, qword ptr [rbx + 0x58]
100016c1d:	call	0x100019716 ## symbol stub for: _free
100016c22:	mov	qword ptr [rbx + 0x58], r15
100016c26:	mov	rdi, qword ptr [rbx + 0x60]
100016c2a:	call	0x100019716 ## symbol stub for: _free
100016c2f:	mov	qword ptr [rbx + 0x60], r12
100016c33:	mov	rax, qword ptr [rbx + 0x58]
100016c37:	movzx	ecx, word ptr [rbx + 0x2a]
100016c3b:	mov	byte ptr [rax + rcx], 0x75
100016c3f:	mov	rax, qword ptr [rbx + 0x58]
100016c43:	movzx	ecx, word ptr [rbx + 0x2a]
100016c47:	mov	byte ptr [rcx + rax + 0x1], 0x78
100016c4c:	mov	rax, qword ptr [rbx + 0x58]
100016c50:	movzx	ecx, word ptr [rbx + 0x2a]
100016c54:	mov	byte ptr [rcx + rax + 0x2], 0xb
100016c59:	mov	rax, qword ptr [rbx + 0x58]
100016c5d:	movzx	ecx, word ptr [rbx + 0x2a]
100016c61:	mov	byte ptr [rcx + rax + 0x3], 0x0
100016c66:	mov	rax, qword ptr [rbx + 0x58]
100016c6a:	movzx	ecx, word ptr [rbx + 0x2a]
100016c6e:	mov	byte ptr [rcx + rax + 0x4], 0x1
100016c73:	mov	rax, qword ptr [rbx + 0x58]
100016c77:	movzx	ecx, word ptr [rbx + 0x2a]
100016c7b:	mov	r8b, 0x4
100016c7e:	mov	byte ptr [rcx + rax + 0x5], r8b
100016c83:	mov	rdx, qword ptr [rbp - 0x30]
100016c87:	mov	eax, dword ptr [rdx + 0x10]
100016c8a:	mov	rcx, qword ptr [rbx + 0x58]
100016c8e:	movzx	esi, word ptr [rbx + 0x2a]
100016c92:	mov	byte ptr [rsi + rcx + 0x6], al
100016c96:	mov	rcx, qword ptr [rbx + 0x58]
100016c9a:	movzx	esi, word ptr [rbx + 0x2a]
100016c9e:	mov	byte ptr [rsi + rcx + 0x7], ah
100016ca2:	mov	ecx, eax
100016ca4:	shr	ecx, 0x10
100016ca7:	mov	rsi, qword ptr [rbx + 0x58]
100016cab:	movzx	edi, word ptr [rbx + 0x2a]
100016caf:	mov	byte ptr [rdi + rsi + 0x8], cl
100016cb3:	shr	eax, 0x18
100016cb6:	mov	rcx, qword ptr [rbx + 0x58]
100016cba:	movzx	esi, word ptr [rbx + 0x2a]
100016cbe:	mov	byte ptr [rsi + rcx + 0x9], al
100016cc2:	mov	rax, qword ptr [rbx + 0x58]
100016cc6:	movzx	ecx, word ptr [rbx + 0x2a]
100016cca:	mov	byte ptr [rcx + rax + 0xa], r8b
100016ccf:	mov	eax, dword ptr [rdx + 0x14]
100016cd2:	mov	rcx, qword ptr [rbx + 0x58]
100016cd6:	movzx	edx, word ptr [rbx + 0x2a]
100016cda:	mov	byte ptr [rdx + rcx + 0xb], al
100016cde:	mov	rcx, qword ptr [rbx + 0x58]
100016ce2:	movzx	edx, word ptr [rbx + 0x2a]
100016ce6:	mov	byte ptr [rdx + rcx + 0xc], ah
100016cea:	mov	ecx, eax
100016cec:	shr	ecx, 0x10
100016cef:	mov	rdx, qword ptr [rbx + 0x58]
100016cf3:	movzx	esi, word ptr [rbx + 0x2a]
100016cf7:	mov	byte ptr [rsi + rdx + 0xd], cl
100016cfb:	shr	eax, 0x18
100016cfe:	mov	rcx, qword ptr [rbx + 0x58]
100016d02:	movzx	edx, word ptr [rbx + 0x2a]
100016d06:	mov	byte ptr [rdx + rcx + 0xe], al
100016d0a:	mov	rax, qword ptr [rbx + 0x58]
100016d0e:	mov	rcx, qword ptr [rbx + 0x60]
100016d12:	movzx	edx, word ptr [rbx + 0x2c]
100016d16:	movzx	esi, word ptr [rbx + 0x2a]
100016d1a:	mov	rdi, qword ptr [rax + rsi]
100016d1e:	mov	rax, qword ptr [rax + rsi + 0x7]
100016d23:	mov	qword ptr [rcx + rdx + 0x7], rax
100016d28:	mov	qword ptr [rcx + rdx], rdi
100016d2c:	add	word ptr [rbx + 0x2a], 0xf
100016d31:	add	word ptr [rbx + 0x2c], 0xf
100016d36:	xor	r14d, r14d
100016d39:	mov	eax, r14d
100016d3c:	add	rsp, 0x8
100016d40:	pop	rbx
100016d41:	pop	r12
100016d43:	pop	r13
100016d45:	pop	r14
100016d47:	pop	r15
100016d49:	pop	rbp
100016d4a:	ret
100016d4b:	push	rbp
100016d4c:	mov	rbp, rsp
100016d4f:	push	r15
100016d51:	push	r14
100016d53:	push	r12
100016d55:	push	rbx
100016d56:	sub	rsp, 0x90
100016d5d:	mov	r14, rdi
100016d60:	mov	r12, qword ptr [rdi + 0x50]
100016d64:	mov	rdi, r12
100016d67:	call	0x100019830 ## symbol stub for: _strlen
100016d6c:	mov	rbx, rax
100016d6f:	shl	rbx, 0x20
100016d73:	movabs	rdi, offset __mh_execute_header
100016d7d:	add	rdi, rbx
100016d80:	sar	rdi, 0x20
100016d84:	call	0x100019758 ## symbol stub for: _malloc
100016d89:	mov	r15, rax
100016d8c:	test	rax, rax
100016d8f:	jne	0x100016da6
100016d91:	lea	rsi, [rip + 0xce41] ## literal pool for: "set_extra_field"
100016d98:	mov	edi, 0x4
100016d9d:	call	0x100002e30
100016da2:	mov	r12, qword ptr [r14 + 0x50]
100016da6:	mov	rdi, r15
100016da9:	mov	rsi, r12
100016dac:	call	0x100019824 ## symbol stub for: _strcpy
100016db1:	movabs	rax, -0x100000000
100016dbb:	add	rbx, rax
100016dbe:	sar	rbx, 0x20
100016dc2:	cmp	byte ptr [r15 + rbx], 0x2f
100016dc7:	jne	0x100016dce
100016dc9:	mov	byte ptr [r15 + rbx], 0x0
100016dce:	lea	rax, [rip + 0x129af]
100016dd5:	cmp	dword ptr [rax], 0x0
100016dd8:	je	0x100016deb
100016dda:	lea	rsi, [rbp - 0xb0]
100016de1:	mov	rdi, r15
100016de4:	call	0x100019752 ## symbol stub for: _lstat$INODE64
100016de9:	jmp	0x100016dfa
100016deb:	lea	rsi, [rbp - 0xb0]
100016df2:	mov	rdi, r15
100016df5:	call	0x10001980c ## symbol stub for: _stat$INODE64
100016dfa:	mov	rdi, r15
100016dfd:	test	eax, eax
100016dff:	je	0x100016e10
100016e01:	call	0x100019716 ## symbol stub for: _free
100016e06:	mov	ebx, 0x12
100016e0b:	jmp	0x100016e91
100016e10:	call	0x100019716 ## symbol stub for: _free
100016e15:	mov	edi, 0xd
100016e1a:	call	0x100019758 ## symbol stub for: _malloc
100016e1f:	mov	qword ptr [r14 + 0x58], rax
100016e23:	mov	ebx, 0x4
100016e28:	test	rax, rax
100016e2b:	je	0x100016e91
100016e2d:	mov	r15, rax
100016e30:	mov	edi, 0x9
100016e35:	call	0x100019758 ## symbol stub for: _malloc
100016e3a:	mov	qword ptr [r14 + 0x60], rax
100016e3e:	test	rax, rax
100016e41:	je	0x100016e91
100016e43:	mov	dword ptr [r15], 0x95455
100016e4a:	mov	byte ptr [r15 + 0x4], 0x3
100016e4f:	lea	rsi, [rbp - 0xb0]
100016e56:	mov	ecx, dword ptr [rsi + 0x30]
100016e59:	mov	dword ptr [r15 + 0x5], ecx
100016e5d:	mov	ecx, dword ptr [rsi + 0x20]
100016e60:	mov	dword ptr [r15 + 0x9], ecx
100016e64:	mov	word ptr [r14 + 0x2a], 0xd
100016e6b:	mov	cl, byte ptr [r15 + 0x8]
100016e6f:	mov	byte ptr [rax + 0x8], cl
100016e72:	mov	rcx, qword ptr [r15]
100016e75:	mov	qword ptr [rax], rcx
100016e78:	mov	rax, qword ptr [r14 + 0x60]
100016e7c:	mov	byte ptr [rax + 0x2], 0x5
100016e80:	mov	word ptr [r14 + 0x2c], 0x9
100016e87:	mov	rdi, r14
100016e8a:	call	0x100016ba3
100016e8f:	xor	ebx, ebx
100016e91:	mov	eax, ebx
100016e93:	add	rsp, 0x90
100016e9a:	pop	rbx
100016e9b:	pop	r12
100016e9d:	pop	r14
100016e9f:	pop	r15
100016ea1:	pop	rbp
100016ea2:	ret
100016ea3:	push	rbp
100016ea4:	mov	rbp, rsp
100016ea7:	pop	rbp
100016ea8:	jmp	0x1000197e8 ## symbol stub for: _rmdir
100016ead:	push	rbp
100016eae:	mov	rbp, rsp
100016eb1:	lea	rdi, [rip + 0xcd31] ## literal pool for: "Compiled with %s for Unix (%s)%s.\n\n"
100016eb8:	lea	rsi, [rip + 0xcd4e] ## literal pool for: "gcc Apple LLVM 13.0.0 (clang-1300.0.29.10) [+internal-os, ptrauth-isa=deployment-target-based]"
100016ebf:	lea	rdx, [rip + 0xcda6] ## literal pool for: "Mac OS X"
100016ec6:	lea	rcx, [rip + 0xcda8] ## literal pool for: " on Nov 13 2021"
100016ecd:	xor	eax, eax
100016ecf:	pop	rbp
100016ed0:	jmp	0x1000197a0 ## symbol stub for: _printf
100016ed5:	push	rbp
100016ed6:	mov	rbp, rsp
100016ed9:	lea	rax, [rip + 0x2f20]
100016ee0:	pop	rbp
100016ee1:	ret
100016ee2:	test	rsi, rsi
100016ee5:	je	0x100016ff9
100016eeb:	push	rbp
100016eec:	mov	rbp, rsp
100016eef:	mov	rax, rdi
100016ef2:	mov	r8d, 0xffffffff
100016ef8:	xor	rax, r8
100016efb:	cmp	rdx, 0x8
100016eff:	jb	0x100016fcb
100016f05:	mov	r9d, 0xff
100016f0b:	lea	r10, [rip + 0x2eee]
100016f12:	movzx	edi, byte ptr [rsi]
100016f15:	mov	rcx, rax
100016f18:	and	rcx, r9
100016f1b:	xor	rcx, rdi
100016f1e:	shr	rax, 0x8
100016f22:	xor	rax, qword ptr [r10 + 8*rcx]
100016f26:	movzx	ecx, byte ptr [rsi + 0x1]
100016f2a:	mov	rdi, rax
100016f2d:	and	rdi, r9
100016f30:	xor	rdi, rcx
100016f33:	shr	rax, 0x8
100016f37:	xor	rax, qword ptr [r10 + 8*rdi]
100016f3b:	movzx	ecx, byte ptr [rsi + 0x2]
100016f3f:	mov	rdi, rax
100016f42:	and	rdi, r9
100016f45:	xor	rdi, rcx
100016f48:	shr	rax, 0x8
100016f4c:	xor	rax, qword ptr [r10 + 8*rdi]
100016f50:	movzx	ecx, byte ptr [rsi + 0x3]
100016f54:	mov	rdi, rax
100016f57:	and	rdi, r9
100016f5a:	xor	rdi, rcx
100016f5d:	shr	rax, 0x8
100016f61:	xor	rax, qword ptr [r10 + 8*rdi]
100016f65:	movzx	ecx, byte ptr [rsi + 0x4]
100016f69:	mov	rdi, rax
100016f6c:	and	rdi, r9
100016f6f:	xor	rdi, rcx
100016f72:	shr	rax, 0x8
100016f76:	xor	rax, qword ptr [r10 + 8*rdi]
100016f7a:	movzx	ecx, byte ptr [rsi + 0x5]
100016f7e:	mov	rdi, rax
100016f81:	and	rdi, r9
100016f84:	xor	rdi, rcx
100016f87:	shr	rax, 0x8
100016f8b:	xor	rax, qword ptr [r10 + 8*rdi]
100016f8f:	movzx	ecx, byte ptr [rsi + 0x6]
100016f93:	mov	rdi, rax
100016f96:	and	rdi, r9
100016f99:	xor	rdi, rcx
100016f9c:	shr	rax, 0x8
100016fa0:	xor	rax, qword ptr [r10 + 8*rdi]
100016fa4:	movzx	ecx, byte ptr [rsi + 0x7]
100016fa8:	add	rsi, 0x8
100016fac:	mov	rdi, rax
100016faf:	and	rdi, r9
100016fb2:	xor	rdi, rcx
100016fb5:	shr	rax, 0x8
100016fb9:	xor	rax, qword ptr [r10 + 8*rdi]
100016fbd:	add	rdx, -0x8
100016fc1:	cmp	rdx, 0x7
100016fc5:	ja	0x100016f12
100016fcb:	test	rdx, rdx
100016fce:	je	0x100016ff4
100016fd0:	xor	ecx, ecx
100016fd2:	lea	r9, [rip + 0x2e27]
100016fd9:	movzx	r10d, byte ptr [rsi + rcx]
100016fde:	movzx	edi, al
100016fe1:	xor	rdi, r10
100016fe4:	shr	rax, 0x8
100016fe8:	xor	rax, qword ptr [r9 + 8*rdi]
100016fec:	inc	rcx
100016fef:	cmp	rdx, rcx
100016ff2:	jne	0x100016fd9
100016ff4:	xor	rax, r8
100016ff7:	pop	rbp
100016ff8:	ret
100016ff9:	xor	eax, eax
100016ffb:	ret
100016ffc:	push	rbp
100016ffd:	mov	rbp, rsp
100017000:	push	r15
100017002:	push	r14
100017004:	push	r12
100017006:	push	rbx
100017007:	mov	r14, rsi
10001700a:	mov	r15d, edi
10001700d:	lea	eax, [r15 - 0x1]
100017011:	cmp	eax, 0x9
100017014:	jb	0x100017022
100017016:	lea	rdi, [rip + 0xcc68] ## literal pool for: "bad pack level"
10001701d:	call	0x1000032ef
100017022:	mov	byte ptr [rip + 0x45d2f], 0x0
100017029:	lea	rax, [rip + 0x43f70]
100017030:	cmp	qword ptr [rax], 0x0
100017034:	jne	0x100017044
100017036:	mov	byte ptr [rip + 0x45d1b], 0x1
10001703d:	mov	qword ptr [rax], 0x10000
100017044:	movsxd	rbx, r15d
100017047:	lea	r12, [rip + 0x35c2]
10001704e:	lea	rdi, [rip + 0x13f2b]
100017055:	mov	esi, 0x10000
10001705a:	call	0x10001966e ## symbol stub for: ___bzero
10001705f:	movzx	eax, word ptr [r12 + 8*rbx + 0x2]
100017065:	mov	dword ptr [rip + 0x45cf1], eax
10001706b:	movzx	eax, word ptr [r12 + 8*rbx]
100017070:	lea	rcx, [rip + 0x13ef9]
100017077:	mov	dword ptr [rcx], eax
100017079:	movzx	eax, word ptr [r12 + 8*rbx + 0x4]
10001707f:	lea	rcx, [rip + 0x23f02]
100017086:	mov	dword ptr [rcx], eax
100017088:	movzx	eax, word ptr [r12 + 8*rbx + 0x6]
10001708e:	lea	rcx, [rip + 0x23eef]
100017095:	mov	dword ptr [rcx], eax
100017097:	mov	ax, 0x4
10001709b:	cmp	r15d, 0x3
10001709f:	jl	0x1000170ab
1000170a1:	mov	ax, 0x2
1000170a5:	cmp	r15d, 0x8
1000170a9:	jl	0x1000170af
1000170ab:	or	word ptr [r14], ax
1000170af:	lea	rax, [rip + 0x33ede]
1000170b6:	mov	dword ptr [rax], 0x0
1000170bc:	lea	rax, [rip + 0x13ea5]
1000170c3:	mov	qword ptr [rax], 0x0
1000170ca:	lea	rax, [rip + 0x1213f]
1000170d1:	lea	rbx, [rip + 0x33ec8]
1000170d8:	mov	rdi, rbx
1000170db:	mov	esi, 0x10000
1000170e0:	call	qword ptr [rax]
1000170e2:	mov	dword ptr [rip + 0x45c78], eax
1000170e8:	lea	ecx, [rax + 0x1]
1000170eb:	cmp	ecx, 0x1
1000170ee:	ja	0x100017103
1000170f0:	mov	byte ptr [rip + 0x45c6d], 0x1
1000170f7:	mov	dword ptr [rip + 0x45c5f], 0x0
100017101:	jmp	0x100017128
100017103:	mov	byte ptr [rip + 0x45c5a], 0x0
10001710a:	cmp	eax, 0x105
10001710f:	ja	0x100017116
100017111:	call	0x100017131
100017116:	movzx	eax, byte ptr [rbx]
100017119:	shl	eax, 0x5
10001711c:	movzx	ecx, byte ptr [rbx + 0x1]
100017120:	xor	ecx, eax
100017122:	mov	dword ptr [rip + 0x45c40], ecx
100017128:	pop	rbx
100017129:	pop	r12
10001712b:	pop	r14
10001712d:	pop	r15
10001712f:	pop	rbp
100017130:	ret
100017131:	push	rbp
100017132:	mov	rbp, rsp
100017135:	push	r15
100017137:	push	r14
100017139:	push	r13
10001713b:	push	r12
10001713d:	push	rbx
10001713e:	push	rax
10001713f:	mov	eax, dword ptr [rip + 0x45c1b]
100017145:	lea	r13, [rip + 0x33e48]
10001714c:	lea	rcx, [rip + 0x33e4d]
100017153:	add	rcx, 0x8000
10001715a:	mov	qword ptr [rbp - 0x30], rcx
10001715e:	lea	r14, [rip + 0x13e1b]
100017165:	lea	r12, [rip + 0x23e24]
10001716c:	lea	rcx, [rip + 0x43e2d]
100017173:	mov	ebx, dword ptr [rcx]
100017175:	sub	ebx, eax
100017177:	mov	r15d, dword ptr [r13]
10001717b:	sub	ebx, r15d
10001717e:	cmp	ebx, -0x1
100017181:	je	0x1000172b5
100017187:	cmp	r15d, 0xfefa
10001718e:	jb	0x10001730c
100017194:	test	byte ptr [rip + 0x45bbd], 0x1
10001719b:	je	0x10001730c
1000171a1:	mov	edx, 0x8000
1000171a6:	lea	rdi, [rip + 0x33df3]
1000171ad:	mov	rsi, qword ptr [rbp - 0x30]
1000171b1:	call	0x10001975e ## symbol stub for: _memcpy
1000171b6:	movdqa	xmm1, xmmword ptr [rip + 0x3442]
1000171be:	lea	rax, [rip + 0x23dbb]
1000171c5:	mov	ecx, 0xffff8000
1000171ca:	add	dword ptr [rax], ecx
1000171cc:	add	r15d, ecx
1000171cf:	mov	dword ptr [r13], r15d
1000171d3:	lea	rax, [rip + 0x13d8e]
1000171da:	add	qword ptr [rax], -0x8000
1000171e1:	xor	eax, eax
1000171e3:	movdqa	xmm0, xmmword ptr [r14 + 2*rax]
1000171e9:	psubusw	xmm0, xmm1
1000171ed:	movdqa	xmmword ptr [r14 + 2*rax], xmm0
1000171f3:	add	rax, 0x8
1000171f7:	cmp	rax, 0x8000
1000171fd:	jne	0x1000171e3
1000171ff:	xor	eax, eax
100017201:	lea	r15, [rip + 0x124f8]
100017208:	movdqa	xmm0, xmmword ptr [r12 + 2*rax]
10001720e:	psubusw	xmm0, xmm1
100017212:	movdqa	xmmword ptr [r12 + 2*rax], xmm0
100017218:	add	rax, 0x8
10001721c:	cmp	rax, 0x8000
100017222:	jne	0x100017208
100017224:	lea	rax, [rip + 0x124cd]
10001722b:	mov	rax, qword ptr [rax]
10001722e:	test	rax, rax
100017231:	jle	0x1000172bc
100017237:	lea	rcx, [rip + 0x124d2]
10001723e:	cmp	dword ptr [rcx], 0x0
100017241:	lea	r15, [rip + 0x124b8]
100017248:	jne	0x1000172bc
10001724a:	lea	rcx, [rip + 0x1220b]
100017251:	cmp	dword ptr [rcx], 0x0
100017254:	mov	rdx, qword ptr [r15]
100017257:	je	0x100017295
100017259:	cmp	rdx, -0x1
10001725d:	jne	0x100017295
10001725f:	lea	rax, [rip + 0x13cca]
100017266:	mov	rsi, qword ptr [rax]
100017269:	mov	edi, 0x20
10001726e:	call	0x1000197a6 ## symbol stub for: _putc
100017273:	lea	rax, [rip + 0x13cb6]
10001727a:	mov	rdi, qword ptr [rax]
10001727d:	call	0x1000196e6 ## symbol stub for: _fflush
100017282:	mov	rdx, qword ptr [r15]
100017285:	inc	rdx
100017288:	mov	qword ptr [r15], rdx
10001728b:	lea	rax, [rip + 0x12466]
100017292:	mov	rax, qword ptr [rax]
100017295:	lea	rcx, [rdx + 0x1]
100017299:	shl	rdx, 0xf
10001729d:	add	rdx, 0x10000
1000172a4:	cmp	rax, rdx
1000172a7:	mov	edx, 0x0
1000172ac:	cmovle	rcx, rdx
1000172b0:	mov	qword ptr [r15], rcx
1000172b3:	jmp	0x1000172bf
1000172b5:	mov	ebx, 0xfffffffe
1000172ba:	jmp	0x10001730c
1000172bc:	mov	rcx, qword ptr [r15]
1000172bf:	add	ebx, 0x8000
1000172c5:	lea	rdx, [rip + 0x12190]
1000172cc:	mov	edx, dword ptr [rdx]
1000172ce:	lea	rsi, [rip + 0x123d7]
1000172d5:	or	edx, dword ptr [rsi]
1000172d7:	je	0x10001730c
1000172d9:	test	rax, rax
1000172dc:	je	0x10001730c
1000172de:	test	rcx, rcx
1000172e1:	jne	0x10001730c
1000172e3:	lea	r15, [rip + 0x13c46]
1000172ea:	mov	rsi, qword ptr [r15]
1000172ed:	mov	edi, 0x2e
1000172f2:	call	0x1000197a6 ## symbol stub for: _putc
1000172f7:	mov	rdi, qword ptr [r15]
1000172fa:	call	0x1000196e6 ## symbol stub for: _fflush
1000172ff:	lea	rax, [rip + 0x125c6]
100017306:	mov	dword ptr [rax], 0x1
10001730c:	cmp	byte ptr [rip + 0x45a51], 0x0
100017313:	jne	0x100017365
100017315:	mov	eax, dword ptr [r13]
100017319:	add	rax, qword ptr [rip + 0xcd10]
100017320:	mov	edi, dword ptr [rip + 0x45a3a]
100017326:	add	rdi, rax
100017329:	mov	esi, ebx
10001732b:	lea	rax, [rip + 0x11ede]
100017332:	call	qword ptr [rax]
100017334:	lea	ecx, [rax + 0x1]
100017337:	cmp	ecx, 0x1
10001733a:	jbe	0x10001735e
10001733c:	add	eax, dword ptr [rip + 0x45a1e]
100017342:	mov	dword ptr [rip + 0x45a18], eax
100017348:	cmp	eax, 0x105
10001734d:	ja	0x100017365
10001734f:	test	byte ptr [rip + 0x45a0e], 0x1
100017356:	je	0x10001716c
10001735c:	jmp	0x100017365
10001735e:	mov	byte ptr [rip + 0x459ff], 0x1
100017365:	add	rsp, 0x8
100017369:	pop	rbx
10001736a:	pop	r12
10001736c:	pop	r13
10001736e:	pop	r14
100017370:	pop	r15
100017372:	pop	rbp
100017373:	ret
100017374:	push	rbp
100017375:	mov	rbp, rsp
100017378:	pop	rbp
100017379:	ret
10001737a:	push	rbp
10001737b:	mov	rbp, rsp
10001737e:	push	r15
100017380:	push	r14
100017382:	push	r13
100017384:	push	r12
100017386:	push	rbx
100017387:	lea	rax, [rip + 0x23bf6]
10001738e:	mov	edx, dword ptr [rax]
100017390:	lea	rax, [rip + 0x33bfd]
100017397:	mov	ecx, dword ptr [rax]
100017399:	lea	r9, [rip + 0x33c00]
1000173a0:	lea	r10, [r9 + rcx]
1000173a4:	lea	rax, [rip + 0x33be5]
1000173ab:	movsxd	rax, dword ptr [rax]
1000173ae:	xor	esi, esi
1000173b0:	lea	r8, [r9 + rcx]
1000173b4:	add	r8, 0x102
1000173bb:	mov	r13d, ecx
1000173be:	sub	r13d, 0x7efa
1000173c5:	cmovb	r13d, esi
1000173c9:	mov	r15b, byte ptr [rax + r10 - 0x1]
1000173ce:	mov	r12b, byte ptr [rax + r10]
1000173d2:	lea	rsi, [rip + 0x13b97]
1000173d9:	mov	ecx, edx
1000173db:	shr	ecx, 0x2
1000173de:	cmp	eax, dword ptr [rsi]
1000173e0:	cmovb	ecx, edx
1000173e3:	lea	rdx, [rip + 0x23b9e]
1000173ea:	mov	edx, dword ptr [rdx]
1000173ec:	mov	dword ptr [rbp - 0x2c], edx
1000173ef:	lea	r14, [rip + 0x23b9a]
1000173f6:	mov	esi, edi
1000173f8:	lea	rbx, [rsi + r9]
1000173fc:	movsxd	rdx, eax
1000173ff:	cmp	byte ptr [rdx + rbx], r12b
100017403:	jne	0x10001751f
100017409:	cmp	byte ptr [rdx + rbx - 0x1], r15b
10001740e:	jne	0x10001751f
100017414:	mov	dl, byte ptr [rbx]
100017416:	cmp	dl, byte ptr [r10]
100017419:	jne	0x10001751f
10001741f:	mov	dl, byte ptr [rbx + 0x1]
100017422:	cmp	dl, byte ptr [r10 + 0x1]
100017426:	jne	0x10001751f
10001742c:	add	rsi, r9
10001742f:	add	rsi, 0xa
100017433:	xor	ebx, ebx
100017435:	mov	dl, byte ptr [r10 + rbx + 0x3]
10001743a:	cmp	dl, byte ptr [rsi + rbx - 0x7]
10001743e:	jne	0x1000174aa
100017440:	mov	dl, byte ptr [r10 + rbx + 0x4]
100017445:	cmp	dl, byte ptr [rsi + rbx - 0x6]
100017449:	jne	0x1000174b4
10001744b:	mov	dl, byte ptr [r10 + rbx + 0x5]
100017450:	cmp	dl, byte ptr [rsi + rbx - 0x5]
100017454:	jne	0x1000174be
100017456:	mov	dl, byte ptr [r10 + rbx + 0x6]
10001745b:	cmp	dl, byte ptr [rsi + rbx - 0x4]
10001745f:	jne	0x1000174c8
100017461:	mov	dl, byte ptr [r10 + rbx + 0x7]
100017466:	cmp	dl, byte ptr [rsi + rbx - 0x3]
10001746a:	jne	0x1000174d2
10001746c:	mov	dl, byte ptr [r10 + rbx + 0x8]
100017471:	cmp	dl, byte ptr [rsi + rbx - 0x2]
100017475:	jne	0x1000174dc
100017477:	mov	dl, byte ptr [r10 + rbx + 0x9]
10001747c:	cmp	dl, byte ptr [rsi + rbx - 0x1]
100017480:	jne	0x1000174e6
100017482:	lea	rdx, [rbx + 0x2]
100017486:	lea	r11, [rbx + 0x8]
10001748a:	cmp	rdx, 0xf9
100017491:	ja	0x1000174a0
100017493:	mov	dl, byte ptr [rsi + rbx]
100017496:	cmp	byte ptr [r10 + rbx + 0xa], dl
10001749b:	mov	rbx, r11
10001749e:	je	0x100017435
1000174a0:	lea	rsi, [r10 + r11]
1000174a4:	add	rsi, 0x2
1000174a8:	jmp	0x1000174ee
1000174aa:	lea	rsi, [r10 + rbx]
1000174ae:	add	rsi, 0x3
1000174b2:	jmp	0x1000174ee
1000174b4:	lea	rsi, [r10 + rbx]
1000174b8:	add	rsi, 0x4
1000174bc:	jmp	0x1000174ee
1000174be:	lea	rsi, [r10 + rbx]
1000174c2:	add	rsi, 0x5
1000174c6:	jmp	0x1000174ee
1000174c8:	lea	rsi, [r10 + rbx]
1000174cc:	add	rsi, 0x6
1000174d0:	jmp	0x1000174ee
1000174d2:	lea	rsi, [r10 + rbx]
1000174d6:	add	rsi, 0x7
1000174da:	jmp	0x1000174ee
1000174dc:	lea	rsi, [r10 + rbx]
1000174e0:	add	rsi, 0x8
1000174e4:	jmp	0x1000174ee
1000174e6:	lea	rsi, [r10 + rbx]
1000174ea:	add	rsi, 0x9
1000174ee:	sub	rsi, r8
1000174f1:	lea	ebx, [rsi + 0x102]
1000174f7:	cmp	ebx, eax
1000174f9:	jle	0x10001751f
1000174fb:	lea	rax, [rip + 0x23a7e]
100017502:	mov	dword ptr [rax], edi
100017504:	cmp	ebx, dword ptr [rbp - 0x2c]
100017507:	jge	0x100017542
100017509:	add	esi, 0x101
10001750f:	movsxd	rax, esi
100017512:	mov	r15b, byte ptr [r10 + rax]
100017516:	movsxd	rax, ebx
100017519:	mov	r12b, byte ptr [r10 + rax]
10001751d:	mov	eax, ebx
10001751f:	dec	ecx
100017521:	je	0x100017537
100017523:	and	edi, 0x7fff
100017529:	movzx	edi, word ptr [r14 + 2*rdi]
10001752e:	cmp	r13d, edi
100017531:	jb	0x1000173f6
100017537:	pop	rbx
100017538:	pop	r12
10001753a:	pop	r13
10001753c:	pop	r14
10001753e:	pop	r15
100017540:	pop	rbp
100017541:	ret
100017542:	mov	eax, ebx
100017544:	jmp	0x100017537
100017546:	push	rbp
100017547:	mov	rbp, rsp
10001754a:	push	r15
10001754c:	push	r14
10001754e:	push	r13
100017550:	push	r12
100017552:	push	rbx
100017553:	push	rax
100017554:	lea	rax, [rip + 0x11ef5]
10001755b:	cmp	dword ptr [rax], 0x4
10001755e:	jge	0x100017794
100017564:	lea	rax, [rip + 0x33a25]
10001756b:	mov	dword ptr [rax], 0x2
100017571:	mov	r8d, dword ptr [rip + 0x457e8]
100017578:	test	r8d, r8d
10001757b:	je	0x100017a72
100017581:	lea	r12, [rip + 0x33a0c]
100017588:	lea	rdi, [rip + 0x33a11]
10001758f:	lea	r15, [rip + 0x139ea]
100017596:	lea	rcx, [rip + 0x239f3]
10001759d:	xor	r14d, r14d
1000175a0:	cmp	r8d, 0x3
1000175a4:	jb	0x1000175dc
1000175a6:	mov	eax, dword ptr [rip + 0x457bc]
1000175ac:	shl	eax, 0x5
1000175af:	mov	edx, dword ptr [r12]
1000175b3:	lea	esi, [rdx + 0x2]
1000175b6:	movzx	esi, byte ptr [rdi + rsi]
1000175ba:	and	eax, 0x7fe0
1000175bf:	xor	eax, esi
1000175c1:	mov	dword ptr [rip + 0x457a1], eax
1000175c7:	movzx	r14d, word ptr [r15 + 2*rax]
1000175cc:	mov	word ptr [r15 + 2*rax], dx
1000175d1:	and	edx, 0x7fff
1000175d7:	mov	word ptr [rcx + 2*rdx], r14w
1000175dc:	mov	r13, rcx
1000175df:	test	r14d, r14d
1000175e2:	je	0x1000176c5
1000175e8:	mov	eax, dword ptr [r12]
1000175ec:	sub	eax, r14d
1000175ef:	cmp	eax, 0x7efa
1000175f4:	ja	0x1000176c5
1000175fa:	lea	rax, [rip + 0x23987]
100017601:	cmp	dword ptr [rax], r8d
100017604:	jbe	0x100017610
100017606:	lea	rax, [rip + 0x2397b]
10001760d:	mov	dword ptr [rax], r8d
100017610:	mov	edi, r14d
100017613:	call	0x10001737a
100017618:	mov	ebx, eax
10001761a:	mov	eax, dword ptr [rip + 0x45740]
100017620:	cmp	ebx, eax
100017622:	cmova	ebx, eax
100017625:	cmp	ebx, 0x3
100017628:	lea	rdi, [rip + 0x33971]
10001762f:	jb	0x1000176c5
100017635:	mov	edi, dword ptr [r12]
100017639:	lea	rax, [rip + 0x23940]
100017640:	sub	edi, dword ptr [rax]
100017642:	lea	esi, [rbx - 0x3]
100017645:	call	0x10001902b
10001764a:	mov	r8d, dword ptr [rip + 0x4570f]
100017651:	sub	r8d, ebx
100017654:	mov	dword ptr [rip + 0x45705], r8d
10001765b:	cmp	r8d, 0x3
10001765f:	jb	0x100017766
100017665:	cmp	ebx, dword ptr [rip + 0x456f1]
10001766b:	ja	0x100017766
100017671:	dec	ebx
100017673:	mov	edx, dword ptr [r12]
100017677:	mov	esi, dword ptr [rip + 0x456eb]
10001767d:	inc	edx
10001767f:	mov	rcx, r13
100017682:	lea	r9, [rip + 0x33917]
100017689:	shl	esi, 0x5
10001768c:	lea	edi, [rdx + 0x2]
10001768f:	movzx	edi, byte ptr [r9 + rdi]
100017694:	and	esi, 0x7fe0
10001769a:	xor	esi, edi
10001769c:	movzx	r14d, word ptr [r15 + 2*rsi]
1000176a1:	mov	edi, edx
1000176a3:	and	edi, 0x7fff
1000176a9:	mov	word ptr [rcx + 2*rdi], r14w
1000176ae:	mov	word ptr [r15 + 2*rsi], dx
1000176b3:	inc	edx
1000176b5:	dec	ebx
1000176b7:	jne	0x100017689
1000176b9:	mov	dword ptr [rip + 0x456a9], esi
1000176bf:	mov	dword ptr [r12], edx
1000176c3:	jmp	0x1000176f2
1000176c5:	mov	eax, dword ptr [r12]
1000176c9:	movzx	esi, byte ptr [rdi + rax]
1000176cd:	xor	edi, edi
1000176cf:	call	0x10001902b
1000176d4:	mov	r8d, dword ptr [rip + 0x45685]
1000176db:	dec	r8d
1000176de:	mov	dword ptr [rip + 0x4567b], r8d
1000176e5:	mov	edx, dword ptr [r12]
1000176e9:	inc	edx
1000176eb:	mov	dword ptr [r12], edx
1000176ef:	mov	rcx, r13
1000176f2:	test	eax, eax
1000176f4:	je	0x100017732
1000176f6:	lea	rbx, [rip + 0x1386b]
1000176fd:	mov	rax, qword ptr [rbx]
100017700:	mov	edi, eax
100017702:	add	rdi, qword ptr [rip + 0xc927]
100017709:	test	rax, rax
10001770c:	mov	ecx, 0x0
100017711:	cmovs	rdi, rcx
100017715:	mov	esi, edx
100017717:	sub	rsi, rax
10001771a:	xor	edx, edx
10001771c:	call	0x1000183c6
100017721:	mov	rcx, r13
100017724:	mov	eax, dword ptr [r12]
100017728:	mov	qword ptr [rbx], rax
10001772b:	mov	r8d, dword ptr [rip + 0x4562e]
100017732:	cmp	r8d, 0x105
100017739:	lea	rdi, [rip + 0x33860]
100017740:	ja	0x100017758
100017742:	call	0x100017131
100017747:	lea	rdi, [rip + 0x33852]
10001774e:	mov	rcx, r13
100017751:	mov	r8d, dword ptr [rip + 0x45608]
100017758:	test	r8d, r8d
10001775b:	jne	0x1000175a0
100017761:	jmp	0x100017a72
100017766:	mov	esi, dword ptr [r12]
10001776a:	lea	edx, [rsi + rbx]
10001776d:	mov	dword ptr [r12], edx
100017771:	lea	rcx, [rip + 0x33828]
100017778:	movzx	edi, byte ptr [rcx + rdx]
10001777c:	shl	edi, 0x5
10001777f:	add	esi, ebx
100017781:	inc	esi
100017783:	movzx	esi, byte ptr [rcx + rsi]
100017787:	xor	esi, edi
100017789:	mov	dword ptr [rip + 0x455d9], esi
10001778f:	jmp	0x1000176ef
100017794:	mov	r8d, dword ptr [rip + 0x455c5]
10001779b:	test	r8d, r8d
10001779e:	je	0x100017a72
1000177a4:	mov	r14d, 0x2
1000177aa:	lea	rbx, [rip + 0x337e3]
1000177b1:	lea	r13, [rip + 0x137c8]
1000177b8:	xor	eax, eax
1000177ba:	mov	qword ptr [rbp - 0x30], rax
1000177be:	xor	r12d, r12d
1000177c1:	cmp	r8d, 0x3
1000177c5:	jb	0x10001780b
1000177c7:	mov	eax, dword ptr [rip + 0x4559b]
1000177cd:	shl	eax, 0x5
1000177d0:	mov	edx, dword ptr [rbx]
1000177d2:	lea	esi, [rdx + 0x2]
1000177d5:	lea	rcx, [rip + 0x337c4]
1000177dc:	movzx	esi, byte ptr [rcx + rsi]
1000177e0:	and	eax, 0x7fe0
1000177e5:	xor	eax, esi
1000177e7:	mov	dword ptr [rip + 0x4557b], eax
1000177ed:	movzx	r12d, word ptr [r13 + 2*rax]
1000177f3:	mov	word ptr [r13 + 2*rax], dx
1000177f9:	and	edx, 0x7fff
1000177ff:	lea	rax, [rip + 0x2378a]
100017806:	mov	word ptr [rax + 2*rdx], r12w
10001780b:	lea	rax, [rip + 0x3377e]
100017812:	mov	dword ptr [rax], r14d
100017815:	lea	rax, [rip + 0x23764]
10001781c:	mov	r15d, dword ptr [rax]
10001781f:	test	r12d, r12d
100017822:	je	0x10001788b
100017824:	cmp	r14d, dword ptr [rip + 0x45531]
10001782b:	jae	0x10001788b
10001782d:	mov	eax, dword ptr [rbx]
10001782f:	sub	eax, r12d
100017832:	cmp	eax, 0x7efa
100017837:	ja	0x10001788b
100017839:	lea	rax, [rip + 0x23748]
100017840:	cmp	dword ptr [rax], r8d
100017843:	jbe	0x10001784f
100017845:	lea	rax, [rip + 0x2373c]
10001784c:	mov	dword ptr [rax], r8d
10001784f:	mov	edi, r12d
100017852:	call	0x10001737a
100017857:	mov	r14d, eax
10001785a:	mov	r8d, dword ptr [rip + 0x454ff]
100017861:	cmp	eax, r8d
100017864:	cmova	r14d, r8d
100017868:	cmp	r14d, 0x3
10001786c:	jne	0x100017891
10001786e:	mov	eax, dword ptr [rbx]
100017870:	lea	rcx, [rip + 0x23709]
100017877:	sub	eax, dword ptr [rcx]
100017879:	xor	r14d, r14d
10001787c:	cmp	eax, 0x1000
100017881:	seta	r14b
100017885:	xor	r14d, 0x3
100017889:	jmp	0x100017891
10001788b:	mov	r14d, 0x2
100017891:	lea	rax, [rip + 0x336f8]
100017898:	mov	esi, dword ptr [rax]
10001789a:	cmp	esi, 0x3
10001789d:	jb	0x1000179ac
1000178a3:	cmp	r14d, esi
1000178a6:	ja	0x1000179ac
1000178ac:	mov	eax, dword ptr [rbx]
1000178ae:	mov	r14, rbx
1000178b1:	lea	ebx, [rax + r8]
1000178b5:	add	ebx, -0x3
1000178b8:	not	r15d
1000178bb:	add	r15d, eax
1000178be:	add	esi, -0x3
1000178c1:	mov	edi, r15d
1000178c4:	call	0x10001902b
1000178c9:	lea	rcx, [rip + 0x336c0]
1000178d0:	mov	esi, dword ptr [rcx]
1000178d2:	mov	r8d, dword ptr [rip + 0x45487]
1000178d9:	sub	r8d, esi
1000178dc:	inc	r8d
1000178df:	mov	dword ptr [rip + 0x4547a], r8d
1000178e6:	add	esi, -0x2
1000178e9:	mov	dword ptr [rcx], esi
1000178eb:	mov	edx, dword ptr [r14]
1000178ee:	inc	edx
1000178f0:	lea	r9, [rip + 0x336a9]
1000178f7:	lea	r10, [rip + 0x23692]
1000178fe:	cmp	edx, ebx
100017900:	ja	0x10001793a
100017902:	mov	edi, dword ptr [rip + 0x45460]
100017908:	shl	edi, 0x5
10001790b:	lea	ecx, [rdx + 0x2]
10001790e:	movzx	ecx, byte ptr [r9 + rcx]
100017913:	and	edi, 0x7fe0
100017919:	xor	edi, ecx
10001791b:	mov	dword ptr [rip + 0x45447], edi
100017921:	movzx	r12d, word ptr [r13 + 2*rdi]
100017927:	mov	ecx, edx
100017929:	and	ecx, 0x7fff
10001792f:	mov	word ptr [r10 + 2*rcx], r12w
100017934:	mov	word ptr [r13 + 2*rdi], dx
10001793a:	inc	edx
10001793c:	dec	esi
10001793e:	jne	0x1000178fe
100017940:	lea	rcx, [rip + 0x33649]
100017947:	mov	dword ptr [rcx], 0x0
10001794d:	lea	rbx, [rip + 0x33640]
100017954:	mov	dword ptr [rbx], edx
100017956:	mov	r14d, 0x2
10001795c:	mov	r15b, 0x1
10001795f:	test	eax, eax
100017961:	je	0x100017a01
100017967:	lea	r15, [rip + 0x135fa]
10001796e:	mov	rax, qword ptr [r15]
100017971:	mov	edi, eax
100017973:	add	rdi, qword ptr [rip + 0xc6b6]
10001797a:	xor	esi, esi
10001797c:	test	rax, rax
10001797f:	mov	ecx, 0x0
100017984:	mov	qword ptr [rbp - 0x30], rcx
100017988:	cmovs	rdi, rsi
10001798c:	mov	esi, edx
10001798e:	sub	rsi, rax
100017991:	xor	edx, edx
100017993:	call	0x1000183c6
100017998:	mov	eax, dword ptr [rbx]
10001799a:	mov	qword ptr [r15], rax
10001799d:	mov	r15b, 0x1
1000179a0:	mov	r8d, dword ptr [rip + 0x453b9]
1000179a7:	jmp	0x100017a39
1000179ac:	mov	eax, dword ptr [rbx]
1000179ae:	cmp	dword ptr [rbp - 0x30], 0x0
1000179b2:	je	0x100017a09
1000179b4:	dec	eax
1000179b6:	lea	rbx, [rip + 0x335e3]
1000179bd:	movzx	esi, byte ptr [rbx + rax]
1000179c1:	xor	edi, edi
1000179c3:	call	0x10001902b
1000179c8:	test	eax, eax
1000179ca:	je	0x100017a0f
1000179cc:	lea	r15, [rip + 0x13595]
1000179d3:	mov	rax, qword ptr [r15]
1000179d6:	mov	edi, eax
1000179d8:	add	rdi, rbx
1000179db:	test	rax, rax
1000179de:	mov	ecx, 0x0
1000179e3:	cmovs	rdi, rcx
1000179e7:	lea	rbx, [rip + 0x335a6]
1000179ee:	mov	esi, dword ptr [rbx]
1000179f0:	sub	rsi, rax
1000179f3:	xor	edx, edx
1000179f5:	call	0x1000183c6
1000179fa:	mov	eax, dword ptr [rbx]
1000179fc:	mov	qword ptr [r15], rax
1000179ff:	jmp	0x100017a18
100017a01:	xor	eax, eax
100017a03:	mov	qword ptr [rbp - 0x30], rax
100017a07:	jmp	0x100017a39
100017a09:	inc	eax
100017a0b:	mov	dword ptr [rbx], eax
100017a0d:	jmp	0x100017a23
100017a0f:	lea	rbx, [rip + 0x3357e]
100017a16:	mov	eax, dword ptr [rbx]
100017a18:	inc	eax
100017a1a:	mov	dword ptr [rbx], eax
100017a1c:	mov	r8d, dword ptr [rip + 0x4533d]
100017a23:	dec	r8d
100017a26:	mov	dword ptr [rip + 0x45333], r8d
100017a2d:	mov	eax, 0x1
100017a32:	mov	qword ptr [rbp - 0x30], rax
100017a36:	xor	r15d, r15d
100017a39:	cmp	r8d, 0x105
100017a40:	ja	0x100017a4e
100017a42:	call	0x100017131
100017a47:	mov	r8d, dword ptr [rip + 0x45312]
100017a4e:	test	r8d, r8d
100017a51:	jne	0x1000177c1
100017a57:	test	r15b, r15b
100017a5a:	jne	0x100017a72
100017a5c:	mov	eax, dword ptr [rbx]
100017a5e:	dec	eax
100017a60:	lea	rcx, [rip + 0x33539]
100017a67:	movzx	esi, byte ptr [rcx + rax]
100017a6b:	xor	edi, edi
100017a6d:	call	0x10001902b
100017a72:	lea	rax, [rip + 0x134ef]
100017a79:	mov	rax, qword ptr [rax]
100017a7c:	mov	ecx, eax
100017a7e:	add	rcx, qword ptr [rip + 0xc5ab]
100017a85:	xor	edi, edi
100017a87:	test	rax, rax
100017a8a:	cmovns	rdi, rcx
100017a8e:	lea	rcx, [rip + 0x334ff]
100017a95:	mov	esi, dword ptr [rcx]
100017a97:	sub	rsi, rax
100017a9a:	mov	edx, 0x1
100017a9f:	add	rsp, 0x8
100017aa3:	pop	rbx
100017aa4:	pop	r12
100017aa6:	pop	r13
100017aa8:	pop	r14
100017aaa:	pop	r15
100017aac:	pop	rbp
100017aad:	jmp	0x1000183c6
100017ab2:	push	rbp
100017ab3:	mov	rbp, rsp
100017ab6:	push	r15
100017ab8:	push	r14
100017aba:	push	r13
100017abc:	push	r12
100017abe:	push	rbx
100017abf:	push	rax
100017ac0:	mov	qword ptr [rip + 0x452a9], rdi
100017ac7:	mov	qword ptr [rip + 0x452aa], rsi
100017ace:	xor	eax, eax
100017ad0:	mov	qword ptr [rip + 0x452a9], rax
100017ad7:	mov	qword ptr [rip + 0x452aa], rax
100017ade:	cmp	word ptr [rip + 0x452ac], 0x0
100017ae6:	je	0x100017af7
100017ae8:	add	rsp, 0x8
100017aec:	pop	rbx
100017aed:	pop	r12
100017aef:	pop	r13
100017af1:	pop	r14
100017af3:	pop	r15
100017af5:	pop	rbp
100017af6:	ret
100017af7:	lea	r15, [rip + 0x45312]
100017afe:	lea	r13, [rip + 0x119ab]
100017b05:	xor	r14d, r14d
100017b08:	mov	dword ptr [r15 + 4*r14], eax
100017b0c:	mov	ecx, dword ptr [r13 + 4*r14]
100017b11:	cmp	ecx, 0x1f
100017b14:	je	0x100017bb1
100017b1a:	mov	ebx, 0x1
100017b1f:	shl	ebx, cl
100017b21:	movsxd	r12, eax
100017b24:	lea	rax, [rip + 0x45365]
100017b2b:	lea	rdi, [rax + r12]
100017b2f:	test	ebx, ebx
100017b31:	mov	eax, 0x1
100017b36:	cmovle	ebx, eax
100017b39:	mov	esi, r14d
100017b3c:	mov	rdx, rbx
100017b3f:	call	0x10001976a ## symbol stub for: _memset
100017b44:	pcmpeqd	xmm4, xmm4
100017b48:	lea	eax, [rbx + 0x1]
100017b4b:	and	eax, -0x2
100017b4e:	dec	ebx
100017b50:	movd	xmm0, ebx
100017b54:	pshufd	xmm0, xmm0, 0x50
100017b59:	movq	xmm1, r12
100017b5e:	mov	ecx, 0x2
100017b63:	movdqa	xmm2, xmm1
100017b67:	psubq	xmm1, xmm4
100017b6b:	mov	edx, ecx
100017b6d:	add	ecx, -0x2
100017b70:	add	edx, eax
100017b72:	add	edx, -0x2
100017b75:	cmp	edx, 0x2
100017b78:	jne	0x100017b63
100017b7a:	neg	ecx
100017b7c:	movd	xmm3, ecx
100017b80:	pshufd	xmm3, xmm3, 0x50
100017b85:	por	xmm3, xmmword ptr [rip + 0x2ad3]
100017b8d:	pminud	xmm0, xmm3
100017b92:	pcmpeqd	xmm0, xmm3
100017b96:	pxor	xmm0, xmm4
100017b9a:	pmovsxdq	xmm0, xmm0
100017b9f:	blendvpd	xmm1, xmm2, xmm0
100017ba4:	pshufd	xmm0, xmm1, 0xee
100017ba9:	paddq	xmm0, xmm1
100017bad:	movd	eax, xmm0
100017bb1:	inc	r14
100017bb4:	cmp	r14, 0x1c
100017bb8:	jne	0x100017b08
100017bbe:	cdqe
100017bc0:	lea	rcx, [rip + 0x452c9]
100017bc7:	mov	byte ptr [rax + rcx - 0x1], 0x1c
100017bcc:	xor	r14d, r14d
100017bcf:	lea	r15, [rip + 0x453ba]
100017bd6:	lea	r12, [rip + 0x11953]
100017bdd:	xor	eax, eax
100017bdf:	mov	dword ptr [r15 + 4*r14], eax
100017be3:	mov	ecx, dword ptr [r12 + 4*r14]
100017be7:	cmp	ecx, 0x1f
100017bea:	je	0x100017c87
100017bf0:	mov	ebx, 0x1
100017bf5:	shl	ebx, cl
100017bf7:	movsxd	r13, eax
100017bfa:	lea	rax, [rip + 0x4540f]
100017c01:	lea	rdi, [rax + r13]
100017c05:	test	ebx, ebx
100017c07:	mov	eax, 0x1
100017c0c:	cmovle	ebx, eax
100017c0f:	mov	esi, r14d
100017c12:	mov	rdx, rbx
100017c15:	call	0x10001976a ## symbol stub for: _memset
100017c1a:	pcmpeqd	xmm4, xmm4
100017c1e:	lea	eax, [rbx + 0x1]
100017c21:	and	eax, -0x2
100017c24:	dec	ebx
100017c26:	movd	xmm0, ebx
100017c2a:	pshufd	xmm0, xmm0, 0x50
100017c2f:	movq	xmm1, r13
100017c34:	mov	ecx, 0x2
100017c39:	movdqa	xmm2, xmm1
100017c3d:	psubq	xmm1, xmm4
100017c41:	mov	edx, ecx
100017c43:	add	ecx, -0x2
100017c46:	add	edx, eax
100017c48:	add	edx, -0x2
100017c4b:	cmp	edx, 0x2
100017c4e:	jne	0x100017c39
100017c50:	neg	ecx
100017c52:	movd	xmm3, ecx
100017c56:	pshufd	xmm3, xmm3, 0x50
100017c5b:	por	xmm3, xmmword ptr [rip + 0x29fd]
100017c63:	pminud	xmm0, xmm3
100017c68:	pcmpeqd	xmm0, xmm3
100017c6c:	pxor	xmm0, xmm4
100017c70:	pmovsxdq	xmm0, xmm0
100017c75:	blendvpd	xmm1, xmm2, xmm0
100017c7a:	pshufd	xmm0, xmm1, 0xee
100017c7f:	paddq	xmm0, xmm1
100017c83:	movd	eax, xmm0
100017c87:	inc	r14
100017c8a:	cmp	r14, 0x10
100017c8e:	jne	0x100017bdf
100017c94:	sar	eax, 0x7
100017c97:	mov	r14d, 0x10
100017c9d:	mov	ecx, eax
100017c9f:	shl	ecx, 0x7
100017ca2:	mov	dword ptr [r15 + 4*r14], ecx
100017ca6:	mov	ecx, dword ptr [r12 + 4*r14]
100017caa:	cmp	ecx, 0x26
100017cad:	je	0x100017d54
100017cb3:	add	cl, -0x7
100017cb6:	mov	ebx, 0x1
100017cbb:	shl	ebx, cl
100017cbd:	movsxd	r13, eax
100017cc0:	lea	rax, [rip + 0x45349]
100017cc7:	lea	rdi, [rax + r13]
100017ccb:	add	rdi, 0x100
100017cd2:	test	ebx, ebx
100017cd4:	mov	eax, 0x1
100017cd9:	cmovle	ebx, eax
100017cdc:	mov	esi, r14d
100017cdf:	mov	rdx, rbx
100017ce2:	call	0x10001976a ## symbol stub for: _memset
100017ce7:	pcmpeqd	xmm4, xmm4
100017ceb:	lea	eax, [rbx + 0x1]
100017cee:	and	eax, -0x2
100017cf1:	dec	ebx
100017cf3:	movd	xmm0, ebx
100017cf7:	pshufd	xmm0, xmm0, 0x50
100017cfc:	movq	xmm1, r13
100017d01:	mov	ecx, 0x2
100017d06:	movdqa	xmm2, xmm1
100017d0a:	psubq	xmm1, xmm4
100017d0e:	mov	edx, ecx
100017d10:	add	ecx, -0x2
100017d13:	add	edx, eax
100017d15:	add	edx, -0x2
100017d18:	cmp	edx, 0x2
100017d1b:	jne	0x100017d06
100017d1d:	neg	ecx
100017d1f:	movd	xmm3, ecx
100017d23:	pshufd	xmm3, xmm3, 0x50
100017d28:	por	xmm3, xmmword ptr [rip + 0x2930]
100017d30:	pminud	xmm0, xmm3
100017d35:	pcmpeqd	xmm0, xmm3
100017d39:	pxor	xmm0, xmm4
100017d3d:	pmovsxdq	xmm0, xmm0
100017d42:	blendvpd	xmm1, xmm2, xmm0
100017d47:	pshufd	xmm0, xmm1, 0xee
100017d4c:	paddq	xmm0, xmm1
100017d50:	movd	eax, xmm0
100017d54:	inc	r14
100017d57:	cmp	r14, 0x1e
100017d5b:	jne	0x100017c9d
100017d61:	pxor	xmm0, xmm0
100017d65:	movdqa	xmmword ptr [rip + 0x454b3], xmm0
100017d6d:	movdqa	xmmword ptr [rip + 0x4549b], xmm0
100017d75:	xor	ecx, ecx
100017d77:	lea	rax, [rip + 0x454b2]
100017d7e:	mov	word ptr [rax + 4*rcx + 0x2], 0x8
100017d85:	inc	rcx
100017d88:	cmp	rcx, 0x90
100017d8f:	jne	0x100017d7e
100017d91:	mov	word ptr [rip + 0x45486], 0x90
100017d9a:	xor	ecx, ecx
100017d9c:	mov	word ptr [rax + 4*rcx + 0x242], 0x9
100017da6:	inc	rcx
100017da9:	cmp	rcx, 0x70
100017dad:	jne	0x100017d9c
100017daf:	mov	word ptr [rip + 0x4546a], 0x70
100017db8:	xor	ecx, ecx
100017dba:	mov	word ptr [rax + 4*rcx + 0x402], 0x7
100017dc4:	inc	rcx
100017dc7:	cmp	rcx, 0x18
100017dcb:	jne	0x100017dba
100017dcd:	mov	word ptr [rip + 0x45448], 0x18
100017dd6:	xor	ecx, ecx
100017dd8:	mov	word ptr [rax + 4*rcx + 0x462], 0x8
100017de2:	inc	rcx
100017de5:	cmp	rcx, 0x8
100017de9:	jne	0x100017dd8
100017deb:	mov	word ptr [rip + 0x4542c], 0x98
100017df4:	lea	rdi, [rip + 0x45435]
100017dfb:	mov	esi, 0x11f
100017e00:	call	0x100017e51
100017e05:	xor	eax, eax
100017e07:	lea	rcx, [rip + 0x44f82]
100017e0e:	mov	word ptr [rcx + 4*rax + 0x2], 0x5
100017e15:	mov	edx, 0x6
100017e1a:	mov	esi, eax
100017e1c:	xor	ebx, ebx
100017e1e:	mov	edi, esi
100017e20:	and	edi, 0x1
100017e23:	or	edi, ebx
100017e25:	shr	esi
100017e27:	lea	ebx, [rdi + rdi]
100017e2a:	dec	edx
100017e2c:	cmp	edx, 0x1
100017e2f:	ja	0x100017e1e
100017e31:	mov	word ptr [rcx + 4*rax], di
100017e35:	inc	rax
100017e38:	cmp	rax, 0x1e
100017e3c:	jne	0x100017e0e
100017e3e:	add	rsp, 0x8
100017e42:	pop	rbx
100017e43:	pop	r12
100017e45:	pop	r13
100017e47:	pop	r14
100017e49:	pop	r15
100017e4b:	pop	rbp
100017e4c:	jmp	0x100017ef9
100017e51:	push	rbp
100017e52:	mov	rbp, rsp
100017e55:	sub	rsp, 0x30
100017e59:	mov	rax, qword ptr [rip + 0xc1b0] ## literal pool symbol address: ___stack_chk_guard
100017e60:	mov	rax, qword ptr [rax]
100017e63:	mov	qword ptr [rbp - 0x8], rax
100017e67:	xor	eax, eax
100017e69:	lea	r8, [rip + 0x453a0]
100017e70:	xor	edx, edx
100017e72:	and	edx, 0xfffe
100017e78:	movzx	ecx, word ptr [rax + r8]
100017e7d:	add	ecx, edx
100017e7f:	add	ecx, ecx
100017e81:	mov	word ptr [rbp + rax - 0x2e], cx
100017e86:	add	rax, 0x2
100017e8a:	mov	edx, ecx
100017e8c:	cmp	rax, 0x1e
100017e90:	jne	0x100017e72
100017e92:	test	esi, esi
100017e94:	js	0x100017ede
100017e96:	inc	esi
100017e98:	xor	r8d, r8d
100017e9b:	movzx	ecx, word ptr [rdi + 4*r8 + 0x2]
100017ea1:	test	ecx, ecx
100017ea3:	je	0x100017ed6
100017ea5:	mov	r9d, ecx
100017ea8:	movzx	eax, word ptr [rbp + 2*r9 - 0x30]
100017eae:	lea	edx, [rax + 0x1]
100017eb1:	mov	word ptr [rbp + 2*r9 - 0x30], dx
100017eb7:	inc	ecx
100017eb9:	xor	r9d, r9d
100017ebc:	mov	edx, eax
100017ebe:	and	edx, 0x1
100017ec1:	or	edx, r9d
100017ec4:	shr	eax
100017ec6:	lea	r9d, [rdx + rdx]
100017eca:	dec	ecx
100017ecc:	cmp	ecx, 0x1
100017ecf:	jg	0x100017ebc
100017ed1:	mov	word ptr [rdi + 4*r8], dx
100017ed6:	inc	r8
100017ed9:	cmp	r8, rsi
100017edc:	jne	0x100017e9b
100017ede:	mov	rax, qword ptr [rip + 0xc12b] ## literal pool symbol address: ___stack_chk_guard
100017ee5:	mov	rax, qword ptr [rax]
100017ee8:	cmp	rax, qword ptr [rbp - 0x8]
100017eec:	jne	0x100017ef4
100017eee:	add	rsp, 0x30
100017ef2:	pop	rbp
100017ef3:	ret
100017ef4:	call	0x100019686 ## symbol stub for: ___stack_chk_fail
100017ef9:	push	rbp
100017efa:	mov	rbp, rsp
100017efd:	movdqa	xmm2, xmmword ptr [rip + 0x1e9b]
100017f05:	movdqa	xmm3, xmmword ptr [rip + 0x1ea3]
100017f0d:	movdqa	xmm4, xmmword ptr [rip + 0x1eab]
100017f15:	movdqa	xmm5, xmmword ptr [rip + 0x1eb3]
100017f1d:	mov	eax, 0x7
100017f22:	movdqa	xmm8, xmmword ptr [rip + 0x1eb5]
100017f2b:	movdqa	xmm0, xmmword ptr [rip + 0x273d]
100017f33:	lea	rcx, [rip + 0x467a6]
100017f3a:	movdqa	xmm9, xmmword ptr [rip + 0x273d]
100017f43:	movdqa	xmm7, xmm5
100017f47:	pxor	xmm7, xmm8
100017f4c:	movdqa	xmm6, xmm0
100017f50:	pcmpgtd	xmm6, xmm7
100017f54:	pcmpeqd	xmm7, xmm0
100017f58:	pshufd	xmm1, xmm7, 0xf5
100017f5d:	pand	xmm1, xmm6
100017f61:	pshufd	xmm7, xmm6, 0xf5
100017f66:	por	xmm7, xmm1
100017f6a:	movd	edx, xmm7
100017f6e:	test	dl, 0x1
100017f71:	je	0x100017f7a
100017f73:	mov	word ptr [rcx + 4*rax - 0x1c], 0x0
100017f7a:	pextrb	edx, xmm7, 0x8
100017f80:	test	dl, 0x1
100017f83:	je	0x100017f8c
100017f85:	mov	word ptr [rcx + 4*rax - 0x18], 0x0
100017f8c:	movdqa	xmm1, xmm4
100017f90:	pxor	xmm1, xmm8
100017f95:	movdqa	xmm6, xmm0
100017f99:	pcmpgtd	xmm6, xmm1
100017f9d:	pcmpeqd	xmm1, xmm0
100017fa1:	pshufd	xmm1, xmm1, 0xf5
100017fa6:	pand	xmm1, xmm6
100017faa:	pshufd	xmm7, xmm6, 0xf5
100017faf:	por	xmm7, xmm1
100017fb3:	pextrb	edx, xmm7, 0x0
100017fb9:	test	dl, 0x1
100017fbc:	je	0x100017fc5
100017fbe:	mov	word ptr [rcx + 4*rax - 0x14], 0x0
100017fc5:	pextrb	edx, xmm7, 0x8
100017fcb:	test	dl, 0x1
100017fce:	je	0x100017fd7
100017fd0:	mov	word ptr [rcx + 4*rax - 0x10], 0x0
100017fd7:	movdqa	xmm1, xmm3
100017fdb:	pxor	xmm1, xmm8
100017fe0:	movdqa	xmm6, xmm0
100017fe4:	pcmpgtd	xmm6, xmm1
100017fe8:	pcmpeqd	xmm1, xmm0
100017fec:	pshufd	xmm1, xmm1, 0xf5
100017ff1:	pand	xmm1, xmm6
100017ff5:	pshufd	xmm7, xmm6, 0xf5
100017ffa:	por	xmm7, xmm1
100017ffe:	pextrb	edx, xmm7, 0x0
100018004:	test	dl, 0x1
100018007:	je	0x100018010
100018009:	mov	word ptr [rcx + 4*rax - 0xc], 0x0
100018010:	pextrb	edx, xmm7, 0x8
100018016:	test	dl, 0x1
100018019:	je	0x100018022
10001801b:	mov	word ptr [rcx + 4*rax - 0x8], 0x0
100018022:	movdqa	xmm1, xmm2
100018026:	pxor	xmm1, xmm8
10001802b:	movdqa	xmm6, xmm0
10001802f:	pcmpgtd	xmm6, xmm1
100018033:	pcmpeqd	xmm1, xmm0
100018037:	pshufd	xmm1, xmm1, 0xf5
10001803c:	pand	xmm1, xmm6
100018040:	pshufd	xmm7, xmm6, 0xf5
100018045:	por	xmm7, xmm1
100018049:	pextrb	edx, xmm7, 0x0
10001804f:	test	dl, 0x1
100018052:	je	0x10001805b
100018054:	mov	word ptr [rcx + 4*rax - 0x4], 0x0
10001805b:	pextrb	edx, xmm7, 0x8
100018061:	test	dl, 0x1
100018064:	je	0x10001806c
100018066:	mov	word ptr [rcx + 4*rax], 0x0
10001806c:	paddq	xmm5, xmm9
100018071:	paddq	xmm4, xmm9
100018076:	paddq	xmm3, xmm9
10001807b:	paddq	xmm2, xmm9
100018080:	add	rax, 0x8
100018084:	cmp	rax, 0x127
10001808a:	jne	0x100017f43
100018090:	movdqa	xmm2, xmmword ptr [rip + 0x1d08]
100018098:	movdqa	xmm3, xmmword ptr [rip + 0x1d10]
1000180a0:	movdqa	xmm4, xmmword ptr [rip + 0x1d18]
1000180a8:	movdqa	xmm5, xmmword ptr [rip + 0x1d20]
1000180b0:	xor	eax, eax
1000180b2:	movdqa	xmm6, xmmword ptr [rip + 0x25d6]
1000180ba:	lea	rcx, [rip + 0x46f1f]
1000180c1:	movdqa	xmm0, xmm5
1000180c5:	pxor	xmm0, xmm8
1000180ca:	movdqa	xmm1, xmm6
1000180ce:	pcmpgtd	xmm1, xmm0
1000180d2:	pcmpeqd	xmm0, xmm6
1000180d6:	pshufd	xmm0, xmm0, 0xf5
1000180db:	pand	xmm0, xmm1
1000180df:	pshufd	xmm7, xmm1, 0xf5
1000180e4:	por	xmm7, xmm0
1000180e8:	movd	edx, xmm7
1000180ec:	test	dl, 0x1
1000180ef:	je	0x1000180f7
1000180f1:	mov	word ptr [rcx + 4*rax], 0x0
1000180f7:	pextrb	edx, xmm7, 0x8
1000180fd:	test	dl, 0x1
100018100:	je	0x100018109
100018102:	mov	word ptr [rcx + 4*rax + 0x4], 0x0
100018109:	movdqa	xmm0, xmm4
10001810d:	pxor	xmm0, xmm8
100018112:	movdqa	xmm1, xmm6
100018116:	pcmpgtd	xmm1, xmm0
10001811a:	pcmpeqd	xmm0, xmm6
10001811e:	pshufd	xmm0, xmm0, 0xf5
100018123:	pand	xmm0, xmm1
100018127:	pshufd	xmm7, xmm1, 0xf5
10001812c:	por	xmm7, xmm0
100018130:	pextrb	edx, xmm7, 0x0
100018136:	test	dl, 0x1
100018139:	je	0x100018142
10001813b:	mov	word ptr [rcx + 4*rax + 0x8], 0x0
100018142:	pextrb	edx, xmm7, 0x8
100018148:	test	dl, 0x1
10001814b:	je	0x100018154
10001814d:	mov	word ptr [rcx + 4*rax + 0xc], 0x0
100018154:	movdqa	xmm0, xmm3
100018158:	pxor	xmm0, xmm8
10001815d:	movdqa	xmm1, xmm6
100018161:	pcmpgtd	xmm1, xmm0
100018165:	pcmpeqd	xmm0, xmm6
100018169:	pshufd	xmm0, xmm0, 0xf5
10001816e:	pand	xmm0, xmm1
100018172:	pshufd	xmm7, xmm1, 0xf5
100018177:	por	xmm7, xmm0
10001817b:	pextrb	edx, xmm7, 0x0
100018181:	test	dl, 0x1
100018184:	je	0x10001818d
100018186:	mov	word ptr [rcx + 4*rax + 0x10], 0x0
10001818d:	pextrb	edx, xmm7, 0x8
100018193:	test	dl, 0x1
100018196:	je	0x10001819f
100018198:	mov	word ptr [rcx + 4*rax + 0x14], 0x0
10001819f:	movdqa	xmm0, xmm2
1000181a3:	pxor	xmm0, xmm8
1000181a8:	movdqa	xmm1, xmm6
1000181ac:	pcmpgtd	xmm1, xmm0
1000181b0:	pcmpeqd	xmm0, xmm6
1000181b4:	pshufd	xmm0, xmm0, 0xf5
1000181b9:	pand	xmm0, xmm1
1000181bd:	pshufd	xmm7, xmm1, 0xf5
1000181c2:	por	xmm7, xmm0
1000181c6:	pextrb	edx, xmm7, 0x0
1000181cc:	test	dl, 0x1
1000181cf:	je	0x1000181d8
1000181d1:	mov	word ptr [rcx + 4*rax + 0x18], 0x0
1000181d8:	pextrb	edx, xmm7, 0x8
1000181de:	test	dl, 0x1
1000181e1:	je	0x1000181ea
1000181e3:	mov	word ptr [rcx + 4*rax + 0x1c], 0x0
1000181ea:	add	rax, 0x8
1000181ee:	paddq	xmm5, xmm9
1000181f3:	paddq	xmm4, xmm9
1000181f8:	paddq	xmm3, xmm9
1000181fd:	paddq	xmm2, xmm9
100018202:	cmp	rax, 0x20
100018206:	jne	0x1000180c1
10001820c:	movdqa	xmm2, xmmword ptr [rip + 0x1b8c]
100018214:	movdqa	xmm3, xmmword ptr [rip + 0x1b94]
10001821c:	movdqa	xmm4, xmmword ptr [rip + 0x1b9c]
100018224:	movdqa	xmm5, xmmword ptr [rip + 0x1ba4]
10001822c:	mov	eax, 0x7
100018231:	movdqa	xmm6, xmmword ptr [rip + 0x2467]
100018239:	lea	rcx, [rip + 0x5eee0]
100018240:	movdqa	xmm0, xmm5
100018244:	pxor	xmm0, xmm8
100018249:	movdqa	xmm1, xmm6
10001824d:	pcmpgtd	xmm1, xmm0
100018251:	pcmpeqd	xmm0, xmm6
100018255:	pshufd	xmm0, xmm0, 0xf5
10001825a:	pand	xmm0, xmm1
10001825e:	pshufd	xmm7, xmm1, 0xf5
100018263:	por	xmm7, xmm0
100018267:	movd	edx, xmm7
10001826b:	test	dl, 0x1
10001826e:	je	0x100018277
100018270:	mov	word ptr [rcx + 4*rax - 0x1c], 0x0
100018277:	pextrb	edx, xmm7, 0x8
10001827d:	test	dl, 0x1
100018280:	je	0x100018289
100018282:	mov	word ptr [rcx + 4*rax - 0x18], 0x0
100018289:	movdqa	xmm0, xmm4
10001828d:	pxor	xmm0, xmm8
100018292:	movdqa	xmm1, xmm6
100018296:	pcmpgtd	xmm1, xmm0
10001829a:	pcmpeqd	xmm0, xmm6
10001829e:	pshufd	xmm0, xmm0, 0xf5
1000182a3:	pand	xmm0, xmm1
1000182a7:	pshufd	xmm7, xmm1, 0xf5
1000182ac:	por	xmm7, xmm0
1000182b0:	pextrb	edx, xmm7, 0x0
1000182b6:	test	dl, 0x1
1000182b9:	je	0x1000182c2
1000182bb:	mov	word ptr [rcx + 4*rax - 0x14], 0x0
1000182c2:	pextrb	edx, xmm7, 0x8
1000182c8:	test	dl, 0x1
1000182cb:	je	0x1000182d4
1000182cd:	mov	word ptr [rcx + 4*rax - 0x10], 0x0
1000182d4:	movdqa	xmm0, xmm3
1000182d8:	pxor	xmm0, xmm8
1000182dd:	movdqa	xmm1, xmm6
1000182e1:	pcmpgtd	xmm1, xmm0
1000182e5:	pcmpeqd	xmm0, xmm6
1000182e9:	pshufd	xmm0, xmm0, 0xf5
1000182ee:	pand	xmm0, xmm1
1000182f2:	pshufd	xmm7, xmm1, 0xf5
1000182f7:	por	xmm7, xmm0
1000182fb:	pextrb	edx, xmm7, 0x0
100018301:	test	dl, 0x1
100018304:	je	0x10001830d
100018306:	mov	word ptr [rcx + 4*rax - 0xc], 0x0
10001830d:	pextrb	edx, xmm7, 0x8
100018313:	test	dl, 0x1
100018316:	je	0x10001831f
100018318:	mov	word ptr [rcx + 4*rax - 0x8], 0x0
10001831f:	movdqa	xmm0, xmm2
100018323:	pxor	xmm0, xmm8
100018328:	movdqa	xmm1, xmm6
10001832c:	pcmpgtd	xmm1, xmm0
100018330:	pcmpeqd	xmm0, xmm6
100018334:	pshufd	xmm0, xmm0, 0xf5
100018339:	pand	xmm0, xmm1
10001833d:	pshufd	xmm7, xmm1, 0xf5
100018342:	por	xmm7, xmm0
100018346:	pextrb	edx, xmm7, 0x0
10001834c:	test	dl, 0x1
10001834f:	je	0x100018358
100018351:	mov	word ptr [rcx + 4*rax - 0x4], 0x0
100018358:	pextrb	edx, xmm7, 0x8
10001835e:	test	dl, 0x1
100018361:	je	0x100018369
100018363:	mov	word ptr [rcx + 4*rax], 0x0
100018369:	paddq	xmm5, xmm9
10001836e:	paddq	xmm4, xmm9
100018373:	paddq	xmm3, xmm9
100018378:	paddq	xmm2, xmm9
10001837d:	add	rax, 0x8
100018381:	cmp	rax, 0x1f
100018385:	jne	0x100018240
10001838b:	mov	word ptr [rip + 0x4674c], 0x1
100018394:	xor	eax, eax
100018396:	mov	qword ptr [rip + 0x46333], rax
10001839d:	mov	qword ptr [rip + 0x46324], rax
1000183a4:	mov	dword ptr [rip + 0x46316], eax
1000183aa:	mov	dword ptr [rip + 0x5ed40], eax
1000183b0:	mov	dword ptr [rip + 0x4ed2a], eax
1000183b6:	mov	byte ptr [rip + 0x452f3], 0x0
1000183bd:	mov	byte ptr [rip + 0x5ed30], 0x1
1000183c4:	pop	rbp
1000183c5:	ret
1000183c6:	push	rbp
1000183c7:	mov	rbp, rsp
1000183ca:	push	r15
1000183cc:	push	r14
1000183ce:	push	r13
1000183d0:	push	r12
1000183d2:	push	rbx
1000183d3:	sub	rsp, 0x18
1000183d7:	mov	ebx, edx
1000183d9:	mov	r15, rsi
1000183dc:	mov	qword ptr [rbp - 0x38], rdi
1000183e0:	mov	al, byte ptr [rip + 0x452ca]
1000183e6:	mov	ecx, dword ptr [rip + 0x462d4]
1000183ec:	lea	rdx, [rip + 0x452cd]
1000183f3:	mov	byte ptr [rcx + rdx], al
1000183f6:	mov	rax, qword ptr [rip + 0x44973]
1000183fd:	cmp	word ptr [rax], -0x1
100018401:	jne	0x100018466
100018403:	mov	edx, 0xf3ffc07f
100018408:	xor	esi, esi
10001840a:	lea	rcx, [rip + 0x462cf]
100018411:	test	dl, 0x1
100018414:	je	0x10001841d
100018416:	cmp	word ptr [rsi + rcx], 0x0
10001841b:	jne	0x100018461
10001841d:	shr	rdx
100018420:	add	rsi, 0x4
100018424:	cmp	rsi, 0x80
10001842b:	jne	0x100018411
10001842d:	mov	word ptr [rax], 0x1
100018432:	movzx	edx, word ptr [rip + 0x462cf]
100018439:	or	dx, word ptr [rip + 0x462c4]
100018440:	or	dx, word ptr [rip + 0x462cd]
100018447:	jne	0x100018466
100018449:	mov	edx, 0x20
10001844e:	cmp	word ptr [rcx + 4*rdx], 0x0
100018453:	jne	0x100018466
100018455:	inc	rdx
100018458:	cmp	rdx, 0x100
10001845f:	jne	0x10001844e
100018461:	mov	word ptr [rax], 0x0
100018466:	lea	rdi, [rip + 0x1113b]
10001846d:	call	0x100018794
100018472:	lea	rdi, [rip + 0x11157]
100018479:	call	0x100018794
10001847e:	mov	esi, dword ptr [rip + 0x11148]
100018484:	lea	rdi, [rip + 0x46255]
10001848b:	call	0x1000192a3
100018490:	mov	esi, dword ptr [rip + 0x1115e]
100018496:	lea	rdi, [rip + 0x46b43]
10001849d:	call	0x1000192a3
1000184a2:	lea	rdi, [rip + 0x1114f]
1000184a9:	call	0x100018794
1000184ae:	mov	r14d, 0x12
1000184b4:	lea	rcx, [rip + 0x21f5]
1000184bb:	lea	rdx, [rip + 0x5ec5e]
1000184c2:	mov	qword ptr [rbp - 0x30], rbx
1000184c6:	mov	eax, r14d
1000184c9:	movzx	eax, byte ptr [rax + rcx]
1000184cd:	cmp	word ptr [rdx + 4*rax + 0x2], 0x0
1000184d3:	jne	0x1000184ed
1000184d5:	lea	eax, [r14 - 0x1]
1000184d9:	cmp	r14d, 0x3
1000184dd:	mov	r14d, eax
1000184e0:	ja	0x1000184c6
1000184e2:	mov	rbx, r15
1000184e5:	mov	r14d, 0x2
1000184eb:	jmp	0x1000184f0
1000184ed:	mov	rbx, r15
1000184f0:	lea	eax, [r14 + 2*r14]
1000184f4:	add	eax, 0x11
1000184f7:	cdqe
1000184f9:	mov	rcx, qword ptr [rip + 0x461c8]
100018500:	lea	rdx, [rcx + rax]
100018504:	lea	r15, [rcx + rax]
100018508:	add	r15, 0xa
10001850c:	shr	r15, 0x3
100018510:	mov	r12, qword ptr [rip + 0x461b9]
100018517:	add	r12, 0xa
10001851b:	shr	r12, 0x3
10001851f:	cmp	r12, r15
100018522:	mov	r13, r12
100018525:	cmova	r13, r15
100018529:	mov	qword ptr [rip + 0x46198], rdx
100018530:	mov	rax, qword ptr [rip + 0x44849]
100018537:	or	rax, qword ptr [rip + 0x4484a]
10001853e:	jne	0x1000185a5
100018540:	cmp	qword ptr [rip + 0x44830], 0x0
100018548:	je	0x1000185a5
10001854a:	cmp	dword ptr [rbp - 0x30], 0x0
10001854e:	je	0x1000185a5
100018550:	cmp	r13, rbx
100018553:	jb	0x1000185a5
100018555:	call	0x1000106ad
10001855a:	test	eax, eax
10001855c:	je	0x1000185a5
10001855e:	lea	rax, [rip + 0x11223]
100018565:	cmp	dword ptr [rax], 0x0
100018568:	jne	0x1000185a5
10001856a:	mov	rdi, qword ptr [rbp - 0x38]
10001856e:	test	rdi, rdi
100018571:	jne	0x100018583
100018573:	lea	rdi, [rip + 0xb71a] ## literal pool for: "block vanished"
10001857a:	call	0x1000032ef
10001857f:	mov	rdi, qword ptr [rbp - 0x38]
100018583:	mov	esi, ebx
100018585:	xor	edx, edx
100018587:	call	0x100018ba3
10001858c:	mov	qword ptr [rip + 0x447f5], rbx
100018593:	mov	rax, qword ptr [rip + 0x447de]
10001859a:	mov	dword ptr [rax], 0x0
1000185a0:	jmp	0x1000186f8
1000185a5:	mov	rax, qword ptr [rbp - 0x38]
1000185a9:	test	rax, rax
1000185ac:	je	0x100018611
1000185ae:	mov	rcx, rbx
1000185b1:	add	rbx, 0x4
1000185b5:	cmp	rbx, r13
1000185b8:	ja	0x100018611
1000185ba:	mov	r14, qword ptr [rbp - 0x30]
1000185be:	mov	edi, r14d
1000185c1:	mov	r12, rcx
1000185c4:	mov	esi, 0x3
1000185c9:	mov	r15, rax
1000185cc:	call	0x100018d4a
1000185d1:	mov	rax, qword ptr [rip + 0x447a8]
1000185d8:	add	rax, 0xa
1000185dc:	add	rbx, qword ptr [rip + 0x447a5]
1000185e3:	shr	rax, 0x3
1000185e7:	add	rbx, rax
1000185ea:	mov	qword ptr [rip + 0x44797], rbx
1000185f1:	mov	qword ptr [rip + 0x44784], 0x0
1000185fc:	mov	rdi, r15
1000185ff:	mov	esi, r12d
100018602:	mov	edx, 0x1
100018607:	call	0x100018ba3
10001860c:	jmp	0x100018750
100018611:	cmp	r12, r15
100018614:	jbe	0x1000186fe
10001861a:	mov	rax, qword ptr [rbp - 0x30]
10001861e:	lea	edi, [rax + 0x4]
100018621:	mov	esi, 0x3
100018626:	call	0x100018d4a
10001862b:	mov	r12d, dword ptr [rip + 0x10f9a]
100018632:	mov	ebx, dword ptr [rip + 0x10fbc]
100018638:	lea	edi, [r12 - 0x100]
100018640:	mov	esi, 0x5
100018645:	call	0x100018d4a
10001864a:	mov	dword ptr [rbp - 0x38], ebx
10001864d:	mov	edi, ebx
10001864f:	mov	esi, 0x5
100018654:	call	0x100018d4a
100018659:	lea	edi, [r14 - 0x3]
10001865d:	mov	esi, 0x4
100018662:	call	0x100018d4a
100018667:	test	r14d, r14d
10001866a:	lea	r13, [rip + 0x203f]
100018671:	lea	r15, [rip + 0x5eaa8]
100018678:	js	0x10001869c
10001867a:	inc	r14d
10001867d:	xor	ebx, ebx
10001867f:	movzx	eax, byte ptr [rbx + r13]
100018684:	movzx	edi, word ptr [r15 + 4*rax + 0x2]
10001868a:	mov	esi, 0x3
10001868f:	call	0x100018d4a
100018694:	inc	rbx
100018697:	cmp	r14, rbx
10001869a:	jne	0x10001867f
10001869c:	lea	r13, [rip + 0x4603d]
1000186a3:	mov	rdi, r13
1000186a6:	mov	esi, r12d
1000186a9:	call	0x10001938a
1000186ae:	lea	rbx, [rip + 0x4692b]
1000186b5:	mov	rdi, rbx
1000186b8:	mov	esi, dword ptr [rbp - 0x38]
1000186bb:	call	0x10001938a
1000186c0:	mov	rdi, r13
1000186c3:	mov	rsi, rbx
1000186c6:	call	0x100018df3
1000186cb:	mov	rax, qword ptr [rip + 0x45ff6]
1000186d2:	mov	rcx, qword ptr [rip + 0x446a7]
1000186d9:	add	rax, rcx
1000186dc:	add	rax, 0x3
1000186e0:	mov	rcx, rax
1000186e3:	shr	rcx, 0x3
1000186e7:	add	qword ptr [rip + 0x4469a], rcx
1000186ee:	and	eax, 0x7
1000186f1:	mov	qword ptr [rip + 0x44688], rax
1000186f8:	mov	r14, qword ptr [rbp - 0x30]
1000186fc:	jmp	0x100018750
1000186fe:	mov	r14, qword ptr [rbp - 0x30]
100018702:	lea	edi, [r14 + 0x2]
100018706:	mov	esi, 0x3
10001870b:	call	0x100018d4a
100018710:	lea	rdi, [rip + 0x44b19]
100018717:	lea	rsi, [rip + 0x44672]
10001871e:	call	0x100018df3
100018723:	mov	rax, qword ptr [rip + 0x45fa6]
10001872a:	mov	rcx, qword ptr [rip + 0x4464f]
100018731:	add	rax, rcx
100018734:	add	rax, 0x3
100018738:	mov	rcx, rax
10001873b:	shr	rcx, 0x3
10001873f:	add	qword ptr [rip + 0x44642], rcx
100018746:	and	eax, 0x7
100018749:	mov	qword ptr [rip + 0x44630], rax
100018750:	call	0x100017ef9
100018755:	test	r14d, r14d
100018758:	je	0x100018773
10001875a:	call	0x100018f59
10001875f:	mov	rax, qword ptr [rip + 0x4461a]
100018766:	add	rax, 0x7
10001876a:	mov	qword ptr [rip + 0x4460f], rax
100018771:	jmp	0x10001877a
100018773:	mov	rax, qword ptr [rip + 0x44606]
10001877a:	shr	rax, 0x3
10001877e:	add	rax, qword ptr [rip + 0x44603]
100018785:	add	rsp, 0x18
100018789:	pop	rbx
10001878a:	pop	r12
10001878c:	pop	r13
10001878e:	pop	r14
100018790:	pop	r15
100018792:	pop	rbp
100018793:	ret
100018794:	push	rbp
100018795:	mov	rbp, rsp
100018798:	push	r15
10001879a:	push	r14
10001879c:	push	r13
10001879e:	push	r12
1000187a0:	push	rbx
1000187a1:	sub	rsp, 0x28
1000187a5:	mov	r12, qword ptr [rdi]
1000187a8:	mov	rax, qword ptr [rdi + 0x8]
1000187ac:	mov	r13d, dword ptr [rdi + 0x1c]
1000187b0:	mov	dword ptr [rip + 0x5ea02], 0x0
1000187ba:	mov	dword ptr [rip + 0x5e9fc], 0x23d
1000187c4:	xor	r9d, r9d
1000187c7:	test	r13d, r13d
1000187ca:	mov	qword ptr [rbp - 0x38], rdi
1000187ce:	mov	r14d, 0xffffffff
1000187d4:	jle	0x100018829
1000187d6:	xor	ebx, ebx
1000187d8:	lea	r8, [rip + 0x5e9f1]
1000187df:	lea	rsi, [rip + 0x5f2ea]
1000187e6:	xor	edx, edx
1000187e8:	cmp	word ptr [r12 + 4*rdx], 0x0
1000187ee:	je	0x100018809
1000187f0:	movsxd	rcx, ebx
1000187f3:	inc	ebx
1000187f5:	mov	dword ptr [rip + 0x5e9c1], ebx
1000187fb:	mov	dword ptr [r8 + 4*rcx + 0x4], edx
100018800:	mov	byte ptr [rdx + rsi], 0x0
100018804:	mov	r14d, edx
100018807:	jmp	0x100018811
100018809:	mov	word ptr [r12 + 4*rdx + 0x2], 0x0
100018811:	inc	rdx
100018814:	cmp	r13, rdx
100018817:	jne	0x1000187e8
100018819:	cmp	ebx, 0x1
10001881c:	jle	0x10001882b
10001881e:	mov	dword ptr [rdi + 0x24], r14d
100018822:	shr	ebx
100018824:	jmp	0x1000188ad
100018829:	xor	ebx, ebx
10001882b:	mov	r8, qword ptr [rip + 0x45e96]
100018832:	movsxd	rcx, ebx
100018835:	mov	esi, 0x2
10001883a:	sub	rsi, rcx
10001883d:	lea	rdx, [rip + 0x5e98c]
100018844:	lea	rbx, [rdx + 4*rcx]
100018848:	add	rbx, 0x4
10001884c:	lea	r10, [rip + 0x5f27d]
100018853:	xor	edx, edx
100018855:	lea	ecx, [r14 + 0x1]
100018859:	cmp	r14d, 0x2
10001885d:	cmovl	r14d, ecx
100018861:	cmovge	ecx, r9d
100018865:	mov	dword ptr [rbx + 4*rdx], ecx
100018868:	movsxd	rcx, ecx
10001886b:	mov	word ptr [r12 + 4*rcx], 0x1
100018872:	mov	byte ptr [rcx + r10], 0x0
100018877:	test	rax, rax
10001887a:	je	0x100018888
10001887c:	movzx	ecx, word ptr [rax + 4*rcx + 0x2]
100018881:	sub	qword ptr [rip + 0x45e48], rcx
100018888:	inc	rdx
10001888b:	cmp	rsi, rdx
10001888e:	jne	0x100018855
100018890:	mov	dword ptr [rip + 0x5e922], 0x2
10001889a:	sub	r8, rdx
10001889d:	mov	qword ptr [rip + 0x45e24], r8
1000188a4:	mov	dword ptr [rdi + 0x24], r14d
1000188a8:	mov	ebx, 0x1
1000188ad:	mov	rdi, r12
1000188b0:	mov	esi, ebx
1000188b2:	call	0x1000191de
1000188b7:	lea	eax, [rbx - 0x1]
1000188ba:	cmp	ebx, 0x1
1000188bd:	mov	ebx, eax
1000188bf:	jg	0x1000188ad
1000188c1:	mov	qword ptr [rbp - 0x48], r14
1000188c5:	mov	eax, dword ptr [rip + 0x5e8f1]
1000188cb:	movsxd	rbx, r13d
1000188ce:	mov	r15, rbx
1000188d1:	movsxd	r14, dword ptr [rip + 0x5e8fc]
1000188d8:	lea	ecx, [rax - 0x1]
1000188db:	mov	dword ptr [rip + 0x5e8db], ecx
1000188e1:	cdqe
1000188e3:	lea	r13, [rip + 0x5e8e6]
1000188ea:	mov	eax, dword ptr [r13 + 4*rax]
1000188ef:	mov	dword ptr [rip + 0x5e8df], eax
1000188f5:	mov	rdi, r12
1000188f8:	mov	esi, 0x1
1000188fd:	call	0x1000191de
100018902:	movsxd	rax, dword ptr [rip + 0x5e8cb]
100018909:	movsxd	rcx, dword ptr [rip + 0x5e8b0]
100018910:	mov	dword ptr [r13 + 4*rcx - 0x4], r14d
100018915:	lea	rdx, [rcx - 0x2]
100018919:	mov	dword ptr [rip + 0x5e8a1], edx
10001891f:	mov	dword ptr [r13 + 4*rcx - 0x8], eax
100018924:	movzx	ecx, word ptr [r12 + 4*rax]
100018929:	add	cx, word ptr [r12 + 4*r14]
10001892e:	mov	word ptr [r12 + 4*rbx], cx
100018933:	lea	rsi, [rip + 0x5f196]
10001893a:	movzx	ecx, byte ptr [r14 + rsi]
10001893f:	movzx	edx, byte ptr [rax + rsi]
100018943:	cmp	cl, dl
100018945:	cmovb	ecx, edx
100018948:	inc	cl
10001894a:	mov	byte ptr [rbx + rsi], cl
10001894d:	mov	word ptr [r12 + 4*rax + 0x2], bx
100018953:	mov	word ptr [r12 + 4*r14 + 0x2], bx
100018959:	inc	r15
10001895c:	mov	dword ptr [rip + 0x5e872], ebx
100018962:	mov	rdi, r12
100018965:	mov	esi, 0x1
10001896a:	call	0x1000191de
10001896f:	mov	eax, dword ptr [rip + 0x5e847]
100018975:	mov	rbx, r15
100018978:	cmp	eax, 0x1
10001897b:	jg	0x1000188d1
100018981:	movsxd	rdx, dword ptr [rip + 0x5e84c]
100018988:	movsxd	rsi, dword ptr [rip + 0x5e831]
10001898f:	lea	rax, [rsi - 0x1]
100018993:	mov	dword ptr [rip + 0x5e827], eax
100018999:	lea	rbx, [rip + 0x5e830]
1000189a0:	mov	dword ptr [rbx + 4*rsi - 0x4], edx
1000189a4:	mov	rdi, qword ptr [rbp - 0x38]
1000189a8:	mov	r14, qword ptr [rdi]
1000189ab:	mov	rcx, qword ptr [rdi + 0x8]
1000189af:	mov	qword ptr [rbp - 0x40], rcx
1000189b3:	mov	rcx, qword ptr [rdi + 0x10]
1000189b7:	mov	qword ptr [rbp - 0x50], rcx
1000189bb:	mov	ecx, dword ptr [rdi + 0x18]
1000189be:	mov	dword ptr [rbp - 0x2c], ecx
1000189c1:	mov	ecx, dword ptr [rdi + 0x24]
1000189c4:	movsxd	r15, dword ptr [rdi + 0x20]
1000189c8:	xorps	xmm0, xmm0
1000189cb:	movaps	xmmword ptr [rip + 0x4484e], xmm0
1000189d2:	movaps	xmmword ptr [rip + 0x44837], xmm0
1000189d9:	mov	word ptr [r14 + 4*rdx + 0x2], 0x0
1000189e1:	cmp	rsi, 0x23c
1000189e8:	jg	0x100018b89
1000189ee:	mov	rdx, rbx
1000189f1:	mov	r13d, 0x23d
1000189f7:	sub	r13d, esi
1000189fa:	lea	rax, [rbx + 4*rax]
1000189fe:	add	rax, 0x4
100018a02:	mov	qword ptr [rbp - 0x38], rax
100018a06:	xor	esi, esi
100018a08:	xor	edi, edi
100018a0a:	mov	rax, qword ptr [rbp - 0x38]
100018a0e:	movsxd	rbx, dword ptr [rax + 4*rsi]
100018a12:	movzx	eax, word ptr [r14 + 4*rbx + 0x2]
100018a18:	movzx	r10d, word ptr [r14 + 4*rax + 0x2]
100018a1e:	xor	r9d, r9d
100018a21:	cmp	r15d, r10d
100018a24:	setle	r8b
100018a28:	jg	0x100018a2f
100018a2a:	mov	r10d, r15d
100018a2d:	jmp	0x100018a32
100018a2f:	inc	r10d
100018a32:	mov	word ptr [r14 + 4*rbx + 0x2], r10w
100018a38:	cmp	ebx, ecx
100018a3a:	jg	0x100018a95
100018a3c:	movsxd	rax, r10d
100018a3f:	lea	rdx, [rip + 0x447ca]
100018a46:	inc	word ptr [rdx + 2*rax]
100018a4a:	xor	eax, eax
100018a4c:	cmp	ebx, dword ptr [rbp - 0x2c]
100018a4f:	jl	0x100018a5f
100018a51:	mov	eax, ebx
100018a53:	sub	eax, dword ptr [rbp - 0x2c]
100018a56:	cdqe
100018a58:	mov	rdx, qword ptr [rbp - 0x50]
100018a5c:	mov	eax, dword ptr [rdx + 4*rax]
100018a5f:	movzx	r11d, word ptr [r14 + 4*rbx]
100018a64:	add	r10d, eax
100018a67:	movsxd	rdx, r10d
100018a6a:	imul	rdx, r11
100018a6e:	add	qword ptr [rip + 0x45c53], rdx
100018a75:	cmp	qword ptr [rbp - 0x40], 0x0
100018a7a:	je	0x100018a95
100018a7c:	mov	rdx, qword ptr [rbp - 0x40]
100018a80:	movzx	edx, word ptr [rdx + 4*rbx + 0x2]
100018a85:	cdqe
100018a87:	add	rax, rdx
100018a8a:	imul	rax, r11
100018a8e:	add	qword ptr [rip + 0x45c3b], rax
100018a95:	mov	r9b, r8b
100018a98:	add	edi, r9d
100018a9b:	inc	rsi
100018a9e:	cmp	r13d, esi
100018aa1:	jne	0x100018a0a
100018aa7:	test	edi, edi
100018aa9:	lea	r10, [rip + 0x5e720]
100018ab0:	lea	r11, [rip + 0x44759]
100018ab7:	je	0x100018b89
100018abd:	mov	rax, r15
100018ac0:	shl	rax, 0x20
100018ac4:	movabs	r9, offset __mh_execute_header
100018ace:	add	r9, rax
100018ad1:	lea	r8, [r11 + 2*r15]
100018ad5:	movabs	rbx, -0x100000000
100018adf:	mov	rsi, r8
100018ae2:	mov	rax, r9
100018ae5:	add	rax, rbx
100018ae8:	movzx	edx, word ptr [rsi - 0x2]
100018aec:	add	rsi, -0x2
100018af0:	test	dx, dx
100018af3:	je	0x100018ae5
100018af5:	dec	edx
100018af7:	mov	word ptr [rsi], dx
100018afa:	sar	rax, 0x1f
100018afe:	add	word ptr [rax + r11], 0x2
100018b04:	movzx	eax, word ptr [r11 + 2*r15]
100018b09:	dec	eax
100018b0b:	mov	word ptr [r11 + 2*r15], ax
100018b10:	lea	edx, [rdi - 0x2]
100018b13:	cmp	edi, 0x2
100018b16:	mov	edi, edx
100018b18:	jg	0x100018adf
100018b1a:	test	r15d, r15d
100018b1d:	je	0x100018b89
100018b1f:	mov	esi, 0x23d
100018b24:	movzx	edi, ax
100018b27:	movsxd	rax, esi
100018b2a:	lea	rdx, [r10 + 4*rax]
100018b2e:	add	rdx, -0x4
100018b32:	xor	ebx, ebx
100018b34:	test	edi, edi
100018b36:	je	0x100018b74
100018b38:	movsxd	rax, dword ptr [rdx + 4*rbx]
100018b3c:	dec	rbx
100018b3f:	cmp	eax, ecx
100018b41:	jg	0x100018b34
100018b43:	mov	esi, esi
100018b45:	add	rsi, rbx
100018b48:	movzx	edx, word ptr [r14 + 4*rax + 0x2]
100018b4e:	cmp	dx, r15w
100018b52:	je	0x100018b70
100018b54:	mov	rbx, r15
100018b57:	sub	rbx, rdx
100018b5a:	movzx	edx, word ptr [r14 + 4*rax]
100018b5f:	imul	rdx, rbx
100018b63:	add	qword ptr [rip + 0x45b5e], rdx
100018b6a:	mov	word ptr [r14 + 4*rax + 0x2], r15w
100018b70:	dec	edi
100018b72:	jmp	0x100018b27
100018b74:	lea	rdx, [r15 - 0x1]
100018b78:	test	edx, edx
100018b7a:	je	0x100018b89
100018b7c:	mov	esi, esi
100018b7e:	movzx	eax, word ptr [r11 + 2*r15 - 0x2]
100018b84:	mov	r15, rdx
100018b87:	jmp	0x100018b24
100018b89:	mov	rdi, r12
100018b8c:	mov	rsi, qword ptr [rbp - 0x48]
100018b90:	add	rsp, 0x28
100018b94:	pop	rbx
100018b95:	pop	r12
100018b97:	pop	r13
100018b99:	pop	r14
100018b9b:	pop	r15
100018b9d:	pop	rbp
100018b9e:	jmp	0x100017e51
100018ba3:	push	rbp
100018ba4:	mov	rbp, rsp
100018ba7:	push	r15
100018ba9:	push	r14
100018bab:	push	r12
100018bad:	push	rbx
100018bae:	mov	r14d, edx
100018bb1:	mov	r12d, esi
100018bb4:	mov	r15, rdi
100018bb7:	call	0x100018f59
100018bbc:	test	r14d, r14d
100018bbf:	je	0x100018c6a
100018bc5:	mov	ecx, dword ptr [rip + 0x5e539]
100018bcb:	mov	eax, dword ptr [rip + 0x5e52f]
100018bd1:	dec	eax
100018bd3:	cmp	ecx, eax
100018bd5:	jb	0x100018bf8
100018bd7:	mov	rdi, qword ptr [rip + 0x5e51a]
100018bde:	lea	rsi, [rip + 0x5e51f]
100018be5:	call	0x100010642
100018bea:	mov	ecx, dword ptr [rip + 0x5e514]
100018bf0:	mov	eax, dword ptr [rip + 0x5e50a]
100018bf6:	dec	eax
100018bf8:	mov	rdi, qword ptr [rip + 0x5e4f9]
100018bff:	lea	edx, [rcx + 0x1]
100018c02:	mov	dword ptr [rip + 0x5e4fc], edx
100018c08:	mov	ecx, ecx
100018c0a:	mov	rbx, r12
100018c0d:	mov	byte ptr [rdi + rcx], bl
100018c10:	mov	ecx, dword ptr [rip + 0x5e4ee]
100018c16:	lea	edx, [rcx + 0x1]
100018c19:	mov	dword ptr [rip + 0x5e4e5], edx
100018c1f:	mov	byte ptr [rdi + rcx], bh
100018c22:	mov	ecx, dword ptr [rip + 0x5e4dc]
100018c28:	cmp	ecx, eax
100018c2a:	jb	0x100018c45
100018c2c:	lea	rsi, [rip + 0x5e4d1]
100018c33:	call	0x100010642
100018c38:	mov	rdi, qword ptr [rip + 0x5e4b9]
100018c3f:	mov	ecx, dword ptr [rip + 0x5e4bf]
100018c45:	mov	rax, r12
100018c48:	not	eax
100018c4a:	lea	edx, [rcx + 0x1]
100018c4d:	mov	dword ptr [rip + 0x5e4b1], edx
100018c53:	mov	ecx, ecx
100018c55:	mov	byte ptr [rdi + rcx], al
100018c58:	mov	ecx, dword ptr [rip + 0x5e4a6]
100018c5e:	lea	edx, [rcx + 0x1]
100018c61:	mov	dword ptr [rip + 0x5e49d], edx
100018c67:	mov	byte ptr [rdi + rcx], ah
100018c6a:	cmp	dword ptr [rip + 0x5e497], 0x0
100018c71:	je	0x100018ce4
100018c73:	mov	rdi, qword ptr [rip + 0x5e47e]
100018c7a:	lea	rsi, [rip + 0x5e483]
100018c81:	call	0x100010642
100018c86:	lea	rax, [rip + 0x10b1b]
100018c8d:	cmp	qword ptr [rax], 0x0
100018c91:	je	0x100018d0a
100018c93:	test	r12d, r12d
100018c96:	je	0x100018d41
100018c9c:	lea	r14, [rip + 0x5e461]
100018ca3:	mov	edx, dword ptr [rip + 0x5e457]
100018ca9:	cmp	r12d, edx
100018cac:	cmovb	edx, r12d
100018cb0:	mov	dword ptr [rip + 0x5e44e], edx
100018cb6:	mov	rdi, qword ptr [rip + 0x5e43b]
100018cbd:	mov	rsi, r15
100018cc0:	call	0x10001975e ## symbol stub for: _memcpy
100018cc5:	mov	ebx, dword ptr [rip + 0x5e439]
100018ccb:	add	r15, rbx
100018cce:	mov	rdi, qword ptr [rip + 0x5e423]
100018cd5:	mov	rsi, r14
100018cd8:	call	0x100010642
100018cdd:	sub	r12d, ebx
100018ce0:	jne	0x100018ca3
100018ce2:	jmp	0x100018d41
100018ce4:	mov	edi, dword ptr [rip + 0x5e41a]
100018cea:	lea	eax, [rdi + r12]
100018cee:	cmp	eax, dword ptr [rip + 0x5e40c]
100018cf4:	jbe	0x100018d28
100018cf6:	lea	rdi, [rip + 0xa5da] ## literal pool for: "output buffer too small for in-memory compression"
100018cfd:	pop	rbx
100018cfe:	pop	r12
100018d00:	pop	r14
100018d02:	pop	r15
100018d04:	pop	rbp
100018d05:	jmp	0x1000032ef
100018d0a:	mov	dword ptr [rip + 0x5e3f3], r12d
100018d11:	lea	rsi, [rip + 0x5e3ec]
100018d18:	mov	rdi, r15
100018d1b:	pop	rbx
100018d1c:	pop	r12
100018d1e:	pop	r14
100018d20:	pop	r15
100018d22:	pop	rbp
100018d23:	jmp	0x100010642
100018d28:	add	rdi, qword ptr [rip + 0x5e3c9]
100018d2f:	mov	edx, r12d
100018d32:	mov	rsi, r15
100018d35:	call	0x10001975e ## symbol stub for: _memcpy
100018d3a:	add	dword ptr [rip + 0x5e3c3], r12d
100018d41:	pop	rbx
100018d42:	pop	r12
100018d44:	pop	r14
100018d46:	pop	r15
100018d48:	pop	rbp
100018d49:	ret
100018d4a:	push	rbp
100018d4b:	mov	rbp, rsp
100018d4e:	push	r14
100018d50:	push	rbx
100018d51:	mov	ecx, dword ptr [rip + 0x5e3b9]
100018d57:	mov	eax, edi
100018d59:	shl	eax, cl
100018d5b:	or	eax, dword ptr [rip + 0x5e3ab]
100018d61:	mov	dword ptr [rip + 0x5e3a5], eax
100018d67:	add	ecx, esi
100018d69:	mov	dword ptr [rip + 0x5e3a1], ecx
100018d6f:	cmp	ecx, 0x11
100018d72:	jl	0x100018dee
100018d74:	mov	r14d, edi
100018d77:	mov	ebx, esi
100018d79:	mov	edx, dword ptr [rip + 0x5e385]
100018d7f:	mov	esi, dword ptr [rip + 0x5e37b]
100018d85:	dec	esi
100018d87:	cmp	edx, esi
100018d89:	jb	0x100018db0
100018d8b:	mov	rdi, qword ptr [rip + 0x5e366]
100018d92:	lea	rsi, [rip + 0x5e36b]
100018d99:	call	0x100010642
100018d9e:	mov	eax, dword ptr [rip + 0x5e368]
100018da4:	mov	edx, dword ptr [rip + 0x5e35a]
100018daa:	mov	ecx, dword ptr [rip + 0x5e360]
100018db0:	mov	rsi, qword ptr [rip + 0x5e341]
100018db7:	lea	edi, [rdx + 0x1]
100018dba:	mov	dword ptr [rip + 0x5e344], edi
100018dc0:	mov	edx, edx
100018dc2:	mov	byte ptr [rsi + rdx], al
100018dc5:	mov	edx, dword ptr [rip + 0x5e339]
100018dcb:	lea	edi, [rdx + 0x1]
100018dce:	mov	dword ptr [rip + 0x5e330], edi
100018dd4:	mov	byte ptr [rsi + rdx], ah
100018dd7:	add	ecx, -0x10
100018dda:	mov	dword ptr [rip + 0x5e330], ecx
100018de0:	sub	ebx, ecx
100018de2:	mov	ecx, ebx
100018de4:	shr	r14d, cl
100018de7:	mov	dword ptr [rip + 0x5e31e], r14d
100018dee:	pop	rbx
100018def:	pop	r14
100018df1:	pop	rbp
100018df2:	ret
100018df3:	push	rbp
100018df4:	mov	rbp, rsp
100018df7:	push	r15
100018df9:	push	r14
100018dfb:	push	r13
100018dfd:	push	r12
100018dff:	push	rbx
100018e00:	sub	rsp, 0x18
100018e04:	mov	qword ptr [rbp - 0x38], rsi
100018e08:	mov	r15, rdi
100018e0b:	cmp	dword ptr [rip + 0x4e2ce], 0x0
100018e12:	je	0x100018f36
100018e18:	xor	r12d, r12d
100018e1b:	lea	r13, [rip + 0x462be]
100018e22:	mov	dword ptr [rbp - 0x30], 0x0
100018e29:	mov	dword ptr [rbp - 0x2c], 0x0
100018e30:	xor	r14d, r14d
100018e33:	test	r12b, 0x7
100018e37:	jne	0x100018e4e
100018e39:	mov	ecx, dword ptr [rbp - 0x2c]
100018e3c:	mov	eax, ecx
100018e3e:	inc	ecx
100018e40:	mov	dword ptr [rbp - 0x2c], ecx
100018e43:	lea	rcx, [rip + 0x44876]
100018e4a:	mov	r14b, byte ptr [rax + rcx]
100018e4e:	movzx	ebx, byte ptr [r12 + r13]
100018e53:	inc	r12
100018e56:	test	r14b, 0x1
100018e5a:	jne	0x100018e71
100018e5c:	movzx	edi, word ptr [r15 + 4*rbx]
100018e61:	movzx	esi, word ptr [r15 + 4*rbx + 0x2]
100018e67:	call	0x100018d4a
100018e6c:	jmp	0x100018f24
100018e71:	lea	rax, [rip + 0x44018]
100018e78:	movzx	r13d, byte ptr [rbx + rax]
100018e7d:	movzx	edi, word ptr [r15 + 4*r13 + 0x404]
100018e86:	movzx	esi, word ptr [r15 + 4*r13 + 0x406]
100018e8f:	call	0x100018d4a
100018e94:	lea	rax, [rip + 0x10615]
100018e9b:	mov	esi, dword ptr [rax + 4*r13]
100018e9f:	test	esi, esi
100018ea1:	je	0x100018eb5
100018ea3:	lea	rax, [rip + 0x43f66]
100018eaa:	sub	ebx, dword ptr [rax + 4*r13]
100018eae:	mov	edi, ebx
100018eb0:	call	0x100018d4a
100018eb5:	mov	ecx, dword ptr [rbp - 0x30]
100018eb8:	mov	eax, ecx
100018eba:	inc	ecx
100018ebc:	mov	dword ptr [rbp - 0x30], ecx
100018ebf:	lea	rcx, [rip + 0x4e22a]
100018ec6:	movzx	r13d, word ptr [rcx + 2*rax]
100018ecb:	mov	eax, r13d
100018ece:	shr	eax, 0x7
100018ed1:	mov	ecx, 0x100
100018ed6:	add	eax, ecx
100018ed8:	cmp	r13d, ecx
100018edb:	cmovb	eax, r13d
100018edf:	lea	rcx, [rip + 0x4412a]
100018ee6:	movzx	ebx, byte ptr [rax + rcx]
100018eea:	mov	rax, qword ptr [rbp - 0x38]
100018eee:	movzx	edi, word ptr [rax + 4*rbx]
100018ef2:	movzx	esi, word ptr [rax + 4*rbx + 0x2]
100018ef7:	call	0x100018d4a
100018efc:	lea	rax, [rip + 0x1062d]
100018f03:	mov	esi, dword ptr [rax + 4*rbx]
100018f06:	test	esi, esi
100018f08:	je	0x100018f1d
100018f0a:	lea	rax, [rip + 0x4407f]
100018f11:	sub	r13d, dword ptr [rax + 4*rbx]
100018f15:	mov	edi, r13d
100018f18:	call	0x100018d4a
100018f1d:	lea	r13, [rip + 0x461bc]
100018f24:	shr	r14b
100018f27:	mov	eax, dword ptr [rip + 0x4e1b3]
100018f2d:	cmp	r12, rax
100018f30:	jb	0x100018e33
100018f36:	movzx	edi, word ptr [r15 + 0x400]
100018f3e:	movzx	esi, word ptr [r15 + 0x402]
100018f46:	add	rsp, 0x18
100018f4a:	pop	rbx
100018f4b:	pop	r12
100018f4d:	pop	r13
100018f4f:	pop	r14
100018f51:	pop	r15
100018f53:	pop	rbp
100018f54:	jmp	0x100018d4a
100018f59:	push	rbp
100018f5a:	mov	rbp, rsp
100018f5d:	mov	eax, dword ptr [rip + 0x5e1ad]
100018f63:	cmp	eax, 0x9
100018f66:	jl	0x100018fb9
100018f68:	mov	edx, dword ptr [rip + 0x5e196]
100018f6e:	mov	eax, dword ptr [rip + 0x5e18c]
100018f74:	dec	eax
100018f76:	cmp	edx, eax
100018f78:	jb	0x100018f93
100018f7a:	mov	rdi, qword ptr [rip + 0x5e177]
100018f81:	lea	rsi, [rip + 0x5e17c]
100018f88:	call	0x100010642
100018f8d:	mov	edx, dword ptr [rip + 0x5e171]
100018f93:	mov	eax, dword ptr [rip + 0x5e173]
100018f99:	mov	rcx, qword ptr [rip + 0x5e158]
100018fa0:	lea	esi, [rdx + 0x1]
100018fa3:	mov	dword ptr [rip + 0x5e15b], esi
100018fa9:	mov	edx, edx
100018fab:	mov	byte ptr [rcx + rdx], al
100018fae:	shr	eax, 0x8
100018fb1:	mov	edx, dword ptr [rip + 0x5e14d]
100018fb7:	jmp	0x100018ff1
100018fb9:	test	eax, eax
100018fbb:	jle	0x100018fff
100018fbd:	mov	edx, dword ptr [rip + 0x5e141]
100018fc3:	cmp	edx, dword ptr [rip + 0x5e137]
100018fc9:	jb	0x100018fe4
100018fcb:	mov	rdi, qword ptr [rip + 0x5e126]
100018fd2:	lea	rsi, [rip + 0x5e12b]
100018fd9:	call	0x100010642
100018fde:	mov	edx, dword ptr [rip + 0x5e120]
100018fe4:	mov	eax, dword ptr [rip + 0x5e122]
100018fea:	mov	rcx, qword ptr [rip + 0x5e107]
100018ff1:	lea	esi, [rdx + 0x1]
100018ff4:	mov	dword ptr [rip + 0x5e10a], esi
100018ffa:	mov	edx, edx
100018ffc:	mov	byte ptr [rcx + rdx], al
100018fff:	cmp	dword ptr [rip + 0x5e102], 0x0
100019006:	je	0x10001901b
100019008:	mov	rdi, qword ptr [rip + 0x5e0e9]
10001900f:	lea	rsi, [rip + 0x5e0ee]
100019016:	call	0x100010642
10001901b:	xor	eax, eax
10001901d:	mov	dword ptr [rip + 0x5e0e9], eax
100019023:	mov	dword ptr [rip + 0x5e0e7], eax
100019029:	pop	rbp
10001902a:	ret
10001902b:	push	rbp
10001902c:	mov	rbp, rsp
10001902f:	mov	eax, dword ptr [rip + 0x4e0ab]
100019035:	lea	r10d, [rax + 0x1]
100019039:	mov	dword ptr [rip + 0x4e0a0], r10d
100019040:	lea	rdx, [rip + 0x46099]
100019047:	mov	byte ptr [rax + rdx], sil
10001904b:	movsxd	rax, esi
10001904e:	test	edi, edi
100019050:	je	0x1000190c2
100019052:	lea	rdx, [rip + 0x43e37]
100019059:	movzx	eax, byte ptr [rax + rdx]
10001905d:	lea	rdx, [rip + 0x4567c]
100019064:	inc	word ptr [rdx + 4*rax + 0x404]
10001906c:	lea	eax, [rdi - 0x1]
10001906f:	movsxd	rdx, eax
100019072:	sar	eax, 0x7
100019075:	add	eax, 0x100
10001907a:	cmp	edi, 0x101
100019080:	cmovl	rax, rdx
100019084:	lea	rsi, [rip + 0x43f85]
10001908b:	movzx	eax, byte ptr [rax + rsi]
10001908f:	lea	rsi, [rip + 0x45f4a]
100019096:	inc	word ptr [rsi + 4*rax]
10001909a:	mov	eax, dword ptr [rip + 0x5e050]
1000190a0:	lea	esi, [rax + 0x1]
1000190a3:	mov	dword ptr [rip + 0x5e047], esi
1000190a9:	lea	rsi, [rip + 0x4e040]
1000190b0:	mov	word ptr [rsi + 2*rax], dx
1000190b4:	mov	al, byte ptr [rip + 0x5e03a]
1000190ba:	or	byte ptr [rip + 0x445f0], al
1000190c0:	jmp	0x1000190d3
1000190c2:	lea	rdx, [rip + 0x45617]
1000190c9:	inc	word ptr [rdx + 4*rax]
1000190cd:	mov	al, byte ptr [rip + 0x5e021]
1000190d3:	add	al, al
1000190d5:	mov	byte ptr [rip + 0x5e019], al
1000190db:	test	r10b, 0x7
1000190df:	jne	0x10001910e
1000190e1:	mov	al, byte ptr [rip + 0x445c9]
1000190e7:	mov	edx, dword ptr [rip + 0x455d3]
1000190ed:	lea	esi, [rdx + 0x1]
1000190f0:	mov	dword ptr [rip + 0x455ca], esi
1000190f6:	lea	rsi, [rip + 0x445c3]
1000190fd:	mov	byte ptr [rdx + rsi], al
100019100:	mov	byte ptr [rip + 0x445a9], 0x0
100019107:	mov	byte ptr [rip + 0x5dfe6], 0x1
10001910e:	test	r10d, 0xfff
100019115:	jne	0x100019191
100019117:	lea	rax, [rip + 0x10332]
10001911e:	cmp	dword ptr [rax], 0x2
100019121:	jle	0x100019191
100019123:	mov	edx, r10d
100019126:	shl	rdx, 0x3
10001912a:	lea	rax, [rip + 0x31e63]
100019131:	mov	r9d, dword ptr [rax]
100019134:	lea	rax, [rip + 0x11e2d]
10001913b:	mov	r8, qword ptr [rax]
10001913e:	xor	edi, edi
100019140:	lea	r11, [rip + 0x45e99]
100019147:	lea	rsi, [rip + 0x103e2]
10001914e:	movzx	ecx, word ptr [rdi + r11]
100019153:	movsxd	rax, dword ptr [rdi + rsi]
100019157:	add	rax, 0x5
10001915b:	imul	rax, rcx
10001915f:	add	rdx, rax
100019162:	add	rdi, 0x4
100019166:	cmp	rdi, 0x78
10001916a:	jne	0x10001914e
10001916c:	mov	edi, dword ptr [rip + 0x5df7e]
100019172:	mov	eax, r10d
100019175:	shr	eax
100019177:	cmp	edi, eax
100019179:	jae	0x100019197
10001917b:	sub	r9, r8
10001917e:	shr	rdx, 0x3
100019182:	shr	r9
100019185:	mov	eax, 0x1
10001918a:	cmp	rdx, r9
10001918d:	jae	0x100019197
10001918f:	jmp	0x1000191af
100019191:	mov	edi, dword ptr [rip + 0x5df59]
100019197:	cmp	r10d, 0x7fff
10001919e:	sete	al
1000191a1:	cmp	edi, 0x8000
1000191a7:	sete	cl
1000191aa:	or	cl, al
1000191ac:	movzx	eax, cl
1000191af:	pop	rbp
1000191b0:	ret
1000191b1:	push	rbp
1000191b2:	mov	rbp, rsp
1000191b5:	mov	qword ptr [rip + 0x5df3c], rdi
1000191bc:	mov	dword ptr [rip + 0x5df3e], esi
1000191c2:	xor	eax, eax
1000191c4:	mov	dword ptr [rip + 0x5df3a], eax
1000191ca:	mov	dword ptr [rip + 0x5df38], edx
1000191d0:	mov	dword ptr [rip + 0x5df36], eax
1000191d6:	mov	dword ptr [rip + 0x5df34], eax
1000191dc:	pop	rbp
1000191dd:	ret
1000191de:	push	rbp
1000191df:	mov	rbp, rsp
1000191e2:	push	r15
1000191e4:	push	r14
1000191e6:	push	r13
1000191e8:	push	r12
1000191ea:	push	rbx
1000191eb:	movsxd	rax, esi
1000191ee:	lea	r14, [rip + 0x5dfdb]
1000191f5:	mov	edx, dword ptr [r14 + 4*rax]
1000191f9:	lea	ecx, [rax + rax]
1000191fc:	mov	r15d, dword ptr [rip + 0x5dfb9]
100019203:	cmp	ecx, r15d
100019206:	jg	0x100019294
10001920c:	mov	dword ptr [rbp - 0x2c], edx
10001920f:	movsxd	r9, edx
100019212:	movzx	r11d, word ptr [rdi + 4*r9]
100019217:	lea	r10, [rip + 0x5e8b2]
10001921e:	cmp	ecx, r15d
100019221:	jge	0x100019249
100019223:	mov	edx, ecx
100019225:	or	edx, 0x1
100019228:	movsxd	r12, edx
10001922b:	movsxd	rbx, dword ptr [r14 + 4*r12]
10001922f:	movsxd	rax, ecx
100019232:	movsxd	r13, dword ptr [r14 + 4*rax]
100019236:	movzx	r8d, word ptr [rdi + 4*r13]
10001923b:	cmp	word ptr [rdi + 4*rbx], r8w
100019240:	jae	0x10001927b
100019242:	mov	rax, r12
100019245:	mov	ebx, edx
100019247:	jmp	0x10001924e
100019249:	movsxd	rax, ecx
10001924c:	mov	ebx, ecx
10001924e:	mov	eax, dword ptr [r14 + 4*rax]
100019252:	movsxd	rcx, eax
100019255:	cmp	r11w, word ptr [rdi + 4*rcx]
10001925a:	jb	0x10001928c
10001925c:	jne	0x100019268
10001925e:	mov	dl, byte ptr [r9 + r10]
100019262:	cmp	dl, byte ptr [rcx + r10]
100019266:	jbe	0x10001928c
100019268:	movsxd	rcx, esi
10001926b:	mov	dword ptr [r14 + 4*rcx], eax
10001926f:	lea	ecx, [rbx + rbx]
100019272:	mov	esi, ebx
100019274:	cmp	ecx, r15d
100019277:	jle	0x10001921e
100019279:	jmp	0x10001928e
10001927b:	jne	0x10001924c
10001927d:	mov	r8b, byte ptr [rbx + r10]
100019281:	mov	ebx, ecx
100019283:	cmp	r8b, byte ptr [r13 + r10]
100019288:	jbe	0x100019242
10001928a:	jmp	0x10001924e
10001928c:	mov	ebx, esi
10001928e:	movsxd	rax, ebx
100019291:	mov	edx, dword ptr [rbp - 0x2c]
100019294:	mov	dword ptr [r14 + 4*rax], edx
100019298:	pop	rbx
100019299:	pop	r12
10001929b:	pop	r13
10001929d:	pop	r14
10001929f:	pop	r15
1000192a1:	pop	rbp
1000192a2:	ret
1000192a3:	push	rbp
1000192a4:	mov	rbp, rsp
1000192a7:	push	r14
1000192a9:	push	rbx
1000192aa:	movzx	r11d, word ptr [rdi + 0x2]
1000192af:	lea	eax, [rsi + 0x1]
1000192b2:	movsxd	rcx, eax
1000192b5:	mov	word ptr [rdi + 4*rcx + 0x2], 0xffff
1000192bc:	test	esi, esi
1000192be:	js	0x100019385
1000192c4:	xor	ecx, ecx
1000192c6:	test	r11w, r11w
1000192ca:	mov	edx, 0x8a
1000192cf:	mov	esi, 0x7
1000192d4:	cmove	esi, edx
1000192d7:	sete	cl
1000192da:	mov	r10d, 0x4
1000192e0:	sub	r10d, ecx
1000192e3:	mov	r9d, eax
1000192e6:	mov	ebx, 0xffffffff
1000192eb:	xor	r14d, r14d
1000192ee:	lea	r8, [rip + 0x5de2b]
1000192f5:	xor	edx, edx
1000192f7:	mov	eax, r11d
1000192fa:	movzx	r11d, word ptr [rdi + 4*r14 + 0x6]
100019300:	inc	r14
100019303:	lea	ecx, [rdx + 0x1]
100019306:	cmp	ecx, esi
100019308:	jge	0x100019313
10001930a:	cmp	eax, r11d
10001930d:	jne	0x100019313
10001930f:	mov	eax, ebx
100019311:	jmp	0x100019378
100019313:	cmp	ecx, r10d
100019316:	jge	0x100019321
100019318:	mov	edx, eax
10001931a:	add	word ptr [r8 + 4*rdx], cx
10001931f:	jmp	0x10001934e
100019321:	test	eax, eax
100019323:	je	0x100019339
100019325:	cmp	eax, ebx
100019327:	je	0x100019330
100019329:	mov	ecx, eax
10001932b:	inc	word ptr [r8 + 4*rcx]
100019330:	inc	word ptr [rip + 0x5de29]
100019337:	jmp	0x10001934e
100019339:	cmp	edx, 0x9
10001933c:	jg	0x100019347
10001933e:	inc	word ptr [rip + 0x5de1f]
100019345:	jmp	0x10001934e
100019347:	inc	word ptr [rip + 0x5de1a]
10001934e:	xor	ecx, ecx
100019350:	test	r11w, r11w
100019354:	je	0x10001936d
100019356:	xor	esi, esi
100019358:	cmp	eax, r11d
10001935b:	sete	sil
10001935f:	mov	r10d, 0x4
100019365:	sub	r10d, esi
100019368:	xor	esi, 0x7
10001936b:	jmp	0x100019378
10001936d:	mov	r10d, 0x3
100019373:	mov	esi, 0x8a
100019378:	mov	edx, ecx
10001937a:	mov	ebx, eax
10001937c:	cmp	r9, r14
10001937f:	jne	0x1000192f7
100019385:	pop	rbx
100019386:	pop	r14
100019388:	pop	rbp
100019389:	ret
10001938a:	push	rbp
10001938b:	mov	rbp, rsp
10001938e:	push	r15
100019390:	push	r14
100019392:	push	r13
100019394:	push	r12
100019396:	push	rbx
100019397:	sub	rsp, 0x18
10001939b:	test	esi, esi
10001939d:	js	0x1000194ef
1000193a3:	movzx	ecx, word ptr [rdi + 0x2]
1000193a7:	xor	edx, edx
1000193a9:	test	cx, cx
1000193ac:	mov	ebx, 0x8a
1000193b1:	mov	eax, 0x7
1000193b6:	cmove	eax, ebx
1000193b9:	sete	dl
1000193bc:	mov	r8d, 0x4
1000193c2:	sub	r8d, edx
1000193c5:	inc	esi
1000193c7:	mov	edx, 0xffffffff
1000193cc:	xor	r13d, r13d
1000193cf:	lea	r14, [rip + 0x5dd4a]
1000193d6:	xor	r15d, r15d
1000193d9:	mov	qword ptr [rbp - 0x40], rsi
1000193dd:	mov	qword ptr [rbp - 0x38], rdi
1000193e1:	mov	r12d, ecx
1000193e4:	movzx	ecx, word ptr [rdi + 4*r13 + 0x6]
1000193ea:	inc	r13
1000193ed:	lea	ebx, [r15 + 0x1]
1000193f1:	cmp	ebx, eax
1000193f3:	jge	0x100019402
1000193f5:	cmp	r12d, ecx
1000193f8:	jne	0x100019402
1000193fa:	mov	r12d, edx
1000193fd:	jmp	0x1000194e0
100019402:	cmp	ebx, r8d
100019405:	mov	dword ptr [rbp - 0x2c], ecx
100019408:	jge	0x100019426
10001940a:	mov	r15d, r12d
10001940d:	movzx	edi, word ptr [r14 + 4*r15]
100019412:	movzx	esi, word ptr [r14 + 4*r15 + 0x2]
100019418:	call	0x100018d4a
10001941d:	dec	ebx
10001941f:	jne	0x10001940d
100019421:	jmp	0x1000194ad
100019426:	test	r12d, r12d
100019429:	je	0x100019463
10001942b:	cmp	r12d, edx
10001942e:	je	0x100019446
100019430:	mov	eax, r12d
100019433:	movzx	edi, word ptr [r14 + 4*rax]
100019438:	movzx	esi, word ptr [r14 + 4*rax + 0x2]
10001943e:	call	0x100018d4a
100019443:	mov	ebx, r15d
100019446:	movzx	edi, word ptr [rip + 0x5dd13]
10001944d:	movzx	esi, word ptr [rip + 0x5dd0e]
100019454:	call	0x100018d4a
100019459:	add	ebx, -0x3
10001945c:	mov	esi, 0x2
100019461:	jmp	0x1000194a6
100019463:	cmp	r15d, 0x9
100019467:	jg	0x100019487
100019469:	movzx	edi, word ptr [rip + 0x5dcf4]
100019470:	movzx	esi, word ptr [rip + 0x5dcef]
100019477:	call	0x100018d4a
10001947c:	add	r15d, -0x2
100019480:	mov	esi, 0x3
100019485:	jmp	0x1000194a3
100019487:	movzx	edi, word ptr [rip + 0x5dcda]
10001948e:	movzx	esi, word ptr [rip + 0x5dcd5]
100019495:	call	0x100018d4a
10001949a:	add	r15d, -0xa
10001949e:	mov	esi, 0x7
1000194a3:	mov	ebx, r15d
1000194a6:	mov	edi, ebx
1000194a8:	call	0x100018d4a
1000194ad:	xor	ebx, ebx
1000194af:	mov	ecx, dword ptr [rbp - 0x2c]
1000194b2:	test	cx, cx
1000194b5:	je	0x1000194cd
1000194b7:	xor	eax, eax
1000194b9:	cmp	r12d, ecx
1000194bc:	sete	al
1000194bf:	mov	r8d, 0x4
1000194c5:	sub	r8d, eax
1000194c8:	xor	eax, 0x7
1000194cb:	jmp	0x1000194d8
1000194cd:	mov	r8d, 0x3
1000194d3:	mov	eax, 0x8a
1000194d8:	mov	rsi, qword ptr [rbp - 0x40]
1000194dc:	mov	rdi, qword ptr [rbp - 0x38]
1000194e0:	mov	r15d, ebx
1000194e3:	mov	edx, r12d
1000194e6:	cmp	r13, rsi
1000194e9:	jne	0x1000193e1
1000194ef:	add	rsp, 0x18
1000194f3:	pop	rbx
1000194f4:	pop	r12
1000194f6:	pop	r13
1000194f8:	pop	r14
1000194fa:	pop	r15
1000194fc:	pop	rbp
1000194fd:	ret
1000194fe:	nop
1000194ff:	nop
100019500:	nop
100019501:	nop
100019502:	nop
100019503:	nop
100019504:	nop
100019505:	nop
100019506:	nop
100019507:	nop
100019508:	nop
100019509:	nop
10001950a:	nop
10001950b:	nop
10001950c:	nop
10001950d:	push	rbp
10001950e:	mov	rbp, rsp
100019511:	push	r15
100019513:	push	r14
100019515:	push	r12
100019517:	push	rbx
100019518:	mov	r14, rdx
10001951b:	mov	r15d, esi
10001951e:	mov	r12, rdi
100019521:	lea	rdi, [rip + 0x3d7d] ## literal pool for: "zip warning"
100019528:	call	0x10001978e ## symbol stub for: _perror
10001952d:	lea	rax, [rip + 0x1022c]
100019534:	mov	rbx, qword ptr [rax]
100019537:	test	rbx, rbx
10001953a:	je	0x10001955c
10001953c:	call	0x100019674 ## symbol stub for: ___error
100019541:	mov	edi, dword ptr [rax]
100019543:	call	0x10001982a ## symbol stub for: _strerror
100019548:	lea	rsi, [rip + 0x3d62] ## literal pool for: "zip warning: %s\n"
10001954f:	mov	rdi, rbx
100019552:	mov	rdx, rax
100019555:	xor	eax, eax
100019557:	call	0x1000196fe ## symbol stub for: _fprintf
10001955c:	mov	rsi, qword ptr [r12]
100019560:	lea	rdi, [rip + 0x3c0d] ## literal pool for: "could not open for reading: "
100019567:	call	0x1000034f4
10001956c:	test	r15b, 0x1
100019570:	je	0x10001957b
100019572:	pop	rbx
100019573:	pop	r12
100019575:	pop	r14
100019577:	pop	r15
100019579:	pop	rbp
10001957a:	ret
10001957b:	mov	r8, qword ptr [r14]
10001957e:	lea	rbx, [rip + 0x105ab]
100019585:	lea	rcx, [rip + 0x3bca] ## literal pool for: "was zipping %s"
10001958c:	mov	edx, 0x13f1
100019591:	mov	rdi, rbx
100019594:	xor	esi, esi
100019596:	xor	eax, eax
100019598:	call	0x100019680 ## symbol stub for: ___sprintf_chk
10001959d:	push	0x12
10001959f:	pop	rdi
1000195a0:	mov	rsi, rbx
1000195a3:	call	0x100002e30
1000195a8:	push	rbp
1000195a9:	mov	rbp, rsp
1000195ac:	push	r15
1000195ae:	push	r14
1000195b0:	push	rbx
1000195b1:	push	rax
1000195b2:	mov	r14, rcx
1000195b5:	mov	r15d, edx
1000195b8:	mov	rbx, rsi
1000195bb:	call	0x10001978e ## symbol stub for: _perror
1000195c0:	mov	rsi, qword ptr [rbx]
1000195c3:	lea	rdi, [rip + 0x3baa] ## literal pool for: "could not open for reading: "
1000195ca:	call	0x1000034f4
1000195cf:	test	r15b, 0x1
1000195d3:	je	0x1000195e0
1000195d5:	add	rsp, 0x8
1000195d9:	pop	rbx
1000195da:	pop	r14
1000195dc:	pop	r15
1000195de:	pop	rbp
1000195df:	ret
1000195e0:	mov	r8, qword ptr [r14 + 0x50]
1000195e4:	lea	rbx, [rip + 0x10545]
1000195eb:	lea	rcx, [rip + 0x3b64] ## literal pool for: "was zipping %s"
1000195f2:	mov	edx, 0x13f1
1000195f7:	mov	rdi, rbx
1000195fa:	xor	esi, esi
1000195fc:	xor	eax, eax
1000195fe:	call	0x100019680 ## symbol stub for: ___sprintf_chk
100019603:	push	0x12
100019605:	pop	rdi
100019606:	mov	rsi, rbx
100019609:	call	0x100002e30
10001960e:	nop
100019610:	push	rbp
100019611:	mov	rbp, rsp
100019614:	push	r14
100019616:	push	rbx
100019617:	mov	r14, rdi
10001961a:	lea	rdi, [rip + 0x9bb4] ## literal pool for: "\nzip warning"
100019621:	call	0x10001978e ## symbol stub for: _perror
100019626:	lea	rax, [rip + 0x10133]
10001962d:	mov	rbx, qword ptr [rax]
100019630:	test	rbx, rbx
100019633:	je	0x100019655
100019635:	call	0x100019674 ## symbol stub for: ___error
10001963a:	mov	edi, dword ptr [rax]
10001963c:	call	0x10001982a ## symbol stub for: _strerror
100019641:	lea	rsi, [rip + 0x9b9a] ## literal pool for: "\nzip warning: %s\n"
100019648:	mov	rdi, rbx
10001964b:	mov	rdx, rax
10001964e:	xor	eax, eax
100019650:	call	0x1000196fe ## symbol stub for: _fprintf
100019655:	mov	rsi, qword ptr [r14 + 0x80]
10001965c:	lea	rdi, [rip + 0x9b91] ## literal pool for: "could not read input file: "
100019663:	call	0x1000034f4
100019668:	pop	rbx
100019669:	pop	r14
10001966b:	pop	rbp
10001966c:	ret
