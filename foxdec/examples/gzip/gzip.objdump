gzip_x86_64:
(__TEXT,__text) section
10000221c:	push	rbp
10000221d:	mov	rbp, rsp
100002220:	push	r14
100002222:	push	rbx
100002223:	sub	rsp, 0xd0
10000222a:	mov	r14d, edi
10000222d:	mov	rax, qword ptr [rip + 0x5dd4] ## literal pool symbol address: ___stack_chk_guard
100002234:	mov	rax, qword ptr [rax]
100002237:	mov	qword ptr [rbp - 0x18], rax
10000223b:	test	rsi, rsi
10000223e:	je	0x100002261
100002240:	mov	rbx, rsi
100002243:	mov	rcx, qword ptr [rsi + 0x8]
100002247:	cmp	rcx, -0x2
10000224b:	je	0x100002270
10000224d:	cmp	rcx, -0x1
100002251:	jne	0x100002284
100002253:	mov	rdx, qword ptr [rbx + 0x18]
100002257:	xor	esi, esi
100002259:	cmp	rdx, -0x1
10000225d:	jne	0x100002297
10000225f:	jmp	0x100002263
100002261:	xor	esi, esi
100002263:	mov	edi, r14d
100002266:	call	0x10000656a ## symbol stub for: _futimes
10000226b:	jmp	0x100002398
100002270:	mov	rdx, qword ptr [rbx + 0x18]
100002274:	mov	sil, 0x1
100002277:	xor	eax, eax
100002279:	cmp	rdx, -0x2
10000227d:	jne	0x100002297
10000227f:	jmp	0x100002398
100002284:	cmp	rcx, 0x3b9ac9ff
10000228b:	ja	0x100002388
100002291:	mov	rdx, qword ptr [rbx + 0x18]
100002295:	xor	esi, esi
100002297:	lea	rax, [rdx - 0x3b9aca00]
10000229e:	cmp	rax, -0x3b9aca03
1000022a4:	jbe	0x100002388
1000022aa:	mov	rax, qword ptr [rbx]
1000022ad:	mov	qword ptr [rbp - 0x40], rax
1000022b1:	movsxd	rax, ecx
1000022b4:	imul	rax, rax, 0x10624dd3
1000022bb:	mov	rdi, rax
1000022be:	shr	rdi, 0x3f
1000022c2:	sar	rax, 0x26
1000022c6:	add	eax, edi
1000022c8:	mov	dword ptr [rbp - 0x38], eax
1000022cb:	mov	rax, qword ptr [rbx + 0x10]
1000022cf:	mov	qword ptr [rbp - 0x30], rax
1000022d3:	movsxd	rax, edx
1000022d6:	imul	rax, rax, 0x10624dd3
1000022dd:	mov	rdi, rax
1000022e0:	shr	rdi, 0x3f
1000022e4:	sar	rax, 0x26
1000022e8:	add	eax, edi
1000022ea:	mov	dword ptr [rbp - 0x28], eax
1000022ed:	cmp	rdx, -0x2
1000022f1:	setne	al
1000022f4:	not	sil
1000022f7:	test	sil, al
1000022fa:	jne	0x1000023b4
100002300:	lea	rsi, [rbp - 0xe0]
100002307:	mov	edi, r14d
10000230a:	call	0x10000654c ## symbol stub for: _fstat$INODE64
10000230f:	cmp	eax, -0x1
100002312:	je	0x100002393
100002314:	mov	rcx, qword ptr [rbx + 0x8]
100002318:	cmp	rcx, -0x2
10000231c:	jne	0x10000234a
10000231e:	mov	rax, qword ptr [rbp - 0xc0]
100002325:	mov	qword ptr [rbp - 0x40], rax
100002329:	movabs	rax, 0x20c49ba5e353f7cf
100002333:	imul	qword ptr [rbp - 0xb8]
10000233a:	mov	rax, rdx
10000233d:	shr	rax, 0x3f
100002341:	shr	rdx, 0x7
100002345:	add	edx, eax
100002347:	mov	dword ptr [rbp - 0x38], edx
10000234a:	mov	rdx, qword ptr [rbx + 0x18]
10000234e:	cmp	rdx, -0x2
100002352:	jne	0x1000023b4
100002354:	mov	rax, qword ptr [rbp - 0xb0]
10000235b:	mov	qword ptr [rbp - 0x30], rax
10000235f:	movabs	rax, 0x20c49ba5e353f7cf
100002369:	imul	qword ptr [rbp - 0xa8]
100002370:	mov	rax, rdx
100002373:	shr	rax, 0x3f
100002377:	shr	rdx, 0x7
10000237b:	add	edx, eax
10000237d:	mov	dword ptr [rbp - 0x28], edx
100002380:	cmp	rcx, -0x1
100002384:	jne	0x1000023c0
100002386:	jmp	0x1000023c9
100002388:	call	0x100006480 ## symbol stub for: ___error
10000238d:	mov	dword ptr [rax], 0x16
100002393:	mov	eax, 0xffffffff
100002398:	mov	rcx, qword ptr [rip + 0x5c69] ## literal pool symbol address: ___stack_chk_guard
10000239f:	mov	rcx, qword ptr [rcx]
1000023a2:	cmp	rcx, qword ptr [rbp - 0x18]
1000023a6:	jne	0x100002407
1000023a8:	add	rsp, 0xd0
1000023af:	pop	rbx
1000023b0:	pop	r14
1000023b2:	pop	rbp
1000023b3:	ret
1000023b4:	cmp	rcx, -0x1
1000023b8:	je	0x1000023c9
1000023ba:	cmp	rdx, -0x1
1000023be:	je	0x1000023c9
1000023c0:	lea	rsi, [rbp - 0x40]
1000023c4:	jmp	0x100002263
1000023c9:	lea	rdi, [rbp - 0x50]
1000023cd:	xor	esi, esi
1000023cf:	call	0x100006588 ## symbol stub for: _gettimeofday
1000023d4:	cmp	eax, -0x1
1000023d7:	je	0x100002393
1000023d9:	cmp	qword ptr [rbx + 0x8], -0x1
1000023de:	jne	0x1000023e8
1000023e0:	movups	xmm0, xmmword ptr [rbp - 0x50]
1000023e4:	movaps	xmmword ptr [rbp - 0x40], xmm0
1000023e8:	lea	rsi, [rbp - 0x40]
1000023ec:	cmp	qword ptr [rbx + 0x18], -0x1
1000023f1:	jne	0x100002263
1000023f7:	lea	rax, [rbp - 0x30]
1000023fb:	movups	xmm0, xmmword ptr [rbp - 0x50]
1000023ff:	movups	xmmword ptr [rax], xmm0
100002402:	jmp	0x100002263
100002407:	call	0x100006492 ## symbol stub for: ___stack_chk_fail
10000240c:	push	rbp
10000240d:	mov	rbp, rsp
100002410:	push	r15
100002412:	push	r14
100002414:	push	r13
100002416:	push	r12
100002418:	push	rbx
100002419:	sub	rsp, 0xb8
100002420:	mov	r12, rsi
100002423:	mov	r15d, edi
100002426:	call	0x100006582 ## symbol stub for: _getprogname
10000242b:	mov	qword ptr [rbp - 0x38], rax
10000242f:	lea	rdi, [rip + 0x4b52] ## literal pool for: "GZIP"
100002436:	call	0x100006576 ## symbol stub for: _getenv
10000243b:	test	rax, rax
10000243e:	je	0x100002552
100002444:	mov	rbx, rax
100002447:	xor	edx, edx
100002449:	mov	cl, byte ptr [rax]
10000244b:	cmp	cl, 0x9
10000244e:	je	0x100002455
100002450:	cmp	cl, 0x20
100002453:	jne	0x10000245a
100002455:	inc	rax
100002458:	jmp	0x100002449
10000245a:	test	cl, cl
10000245c:	je	0x100002476
10000245e:	inc	edx
100002460:	cmp	cl, 0x9
100002463:	je	0x100002449
100002465:	cmp	cl, 0x20
100002468:	je	0x100002449
10000246a:	test	cl, cl
10000246c:	je	0x10000247e
10000246e:	mov	cl, byte ptr [rax + 0x1]
100002471:	inc	rax
100002474:	jmp	0x100002460
100002476:	test	edx, edx
100002478:	je	0x100002552
10000247e:	add	edx, r15d
100002481:	mov	dword ptr [rbp - 0x30], edx
100002484:	movsxd	rax, edx
100002487:	lea	rdi, [8*rax + 0x8]
10000248f:	call	0x1000065c4 ## symbol stub for: _malloc
100002494:	test	rax, rax
100002497:	je	0x100002a78
10000249d:	mov	r13, rax
1000024a0:	mov	rax, qword ptr [r12]
1000024a4:	mov	qword ptr [r13], rax
1000024a8:	mov	r15d, 0x1
1000024ae:	mov	rax, rbx
1000024b1:	mov	r14, r15
1000024b4:	inc	rbx
1000024b7:	mov	rdi, rax
1000024ba:	mov	r15d, dword ptr [rbp - 0x30]
1000024be:	mov	cl, byte ptr [rdi]
1000024c0:	cmp	cl, 0x9
1000024c3:	je	0x1000024ca
1000024c5:	cmp	cl, 0x20
1000024c8:	jne	0x1000024d5
1000024ca:	inc	rdi
1000024cd:	inc	rax
1000024d0:	inc	rbx
1000024d3:	jmp	0x1000024be
1000024d5:	test	cl, cl
1000024d7:	je	0x10000251d
1000024d9:	lea	r15, [r14 + 0x1]
1000024dd:	mov	qword ptr [r13 + 8*r14], rdi
1000024e2:	xor	esi, esi
1000024e4:	mov	al, byte ptr [rbx - 0x1]
1000024e7:	cmp	al, 0x9
1000024e9:	je	0x1000024fb
1000024eb:	cmp	al, 0x20
1000024ed:	je	0x1000024fb
1000024ef:	inc	rbx
1000024f2:	inc	rsi
1000024f5:	test	al, al
1000024f7:	jne	0x1000024e4
1000024f9:	jmp	0x100002516
1000024fb:	call	0x100006618 ## symbol stub for: _strndup
100002500:	mov	qword ptr [r13 + 8*r14], rax
100002505:	test	rax, rax
100002508:	jne	0x1000024ae
10000250a:	lea	rdi, [rip + 0x4bca] ## literal pool for: "strndup"
100002511:	jmp	0x100002a7f
100002516:	mov	r14, r15
100002519:	mov	r15d, dword ptr [rbp - 0x30]
10000251d:	mov	rax, qword ptr [r12 + 0x8]
100002522:	test	rax, rax
100002525:	je	0x100002543
100002527:	movsxd	r14, r14d
10000252a:	add	r12, 0x10
10000252e:	mov	qword ptr [r13 + 8*r14], rax
100002533:	inc	r14
100002536:	mov	rax, qword ptr [r12]
10000253a:	add	r12, 0x8
10000253e:	test	rax, rax
100002541:	jne	0x10000252e
100002543:	movsxd	rax, r14d
100002546:	mov	qword ptr [r13 + 8*rax], 0x0
10000254f:	mov	r12, r13
100002552:	lea	rsi, [rip + 0x5e3]
100002559:	mov	edi, 0x2
10000255e:	call	0x1000065ee ## symbol stub for: _signal
100002563:	lea	rsi, [rip + 0x4a23] ## literal pool for: "gunzip"
10000256a:	mov	rdi, qword ptr [rbp - 0x38]
10000256e:	call	0x100006600 ## symbol stub for: _strcmp
100002573:	test	eax, eax
100002575:	je	0x1000025a6
100002577:	lea	rsi, [rip + 0x4a16] ## literal pool for: "zcat"
10000257e:	mov	rdi, qword ptr [rbp - 0x38]
100002582:	call	0x100006600 ## symbol stub for: _strcmp
100002587:	test	eax, eax
100002589:	je	0x10000259f
10000258b:	lea	rsi, [rip + 0x4a07] ## literal pool for: "gzcat"
100002592:	mov	rdi, qword ptr [rbp - 0x38]
100002596:	call	0x100006600 ## symbol stub for: _strcmp
10000259b:	test	eax, eax
10000259d:	jne	0x1000025ad
10000259f:	mov	byte ptr [rip + 0x6126], 0x1
1000025a6:	mov	byte ptr [rip + 0x611b], 0x1
1000025ad:	lea	rsi, [rip + 0x49e0] ## literal pool for: "zcat"
1000025b4:	mov	rdi, qword ptr [rbp - 0x38]
1000025b8:	call	0x100006600 ## symbol stub for: _strcmp
1000025bd:	test	eax, eax
1000025bf:	jne	0x1000025c8
1000025c1:	mov	byte ptr [rip + 0x6105], 0x1
1000025c8:	lea	r13, [rip + 0x49d0] ## literal pool for: "123456789acdfhklLNnqrS:tVv"
1000025cf:	lea	rbx, [rip + 0x5cea]
1000025d6:	lea	r14, [rip + 0x4eb]
1000025dd:	mov	dword ptr [rbp - 0x30], r15d
1000025e1:	mov	edi, r15d
1000025e4:	mov	rsi, r12
1000025e7:	mov	rdx, r13
1000025ea:	mov	rcx, rbx
1000025ed:	xor	r8d, r8d
1000025f0:	call	0x10000657c ## symbol stub for: _getopt_long
1000025f5:	cmp	eax, 0x52
1000025f8:	jg	0x100002616
1000025fa:	cmp	eax, 0x4b
1000025fd:	jg	0x100002645
1000025ff:	lea	ecx, [rax - 0x31]
100002602:	cmp	ecx, 0x9
100002605:	jae	0x100002754
10000260b:	add	eax, -0x30
10000260e:	mov	dword ptr [rip + 0x5f4c], eax
100002614:	jmp	0x1000025e1
100002616:	lea	ecx, [rax - 0x61]
100002619:	cmp	ecx, 0x15
10000261c:	ja	0x10000265e
10000261e:	movsxd	rax, dword ptr [r14 + 4*rcx]
100002622:	add	rax, r14
100002625:	jmp	rax
100002627:	mov	rax, qword ptr [rip + 0x59e2] ## literal pool symbol address: ___stderrp
10000262e:	mov	rdi, qword ptr [rax]
100002631:	lea	rsi, [rip + 0x4982] ## literal pool for: "%s: option --ascii ignored on this system\n"
100002638:	mov	rdx, qword ptr [rbp - 0x38]
10000263c:	xor	eax, eax
10000263e:	call	0x10000652e ## symbol stub for: _fprintf
100002643:	jmp	0x1000025e1
100002645:	cmp	eax, 0x4e
100002648:	jne	0x10000277f
10000264e:	mov	byte ptr [rip + 0x6087], 0x0
100002655:	mov	byte ptr [rip + 0x6084], 0x1
10000265c:	jmp	0x1000025e1
10000265e:	cmp	eax, 0x53
100002661:	jne	0x100002789
100002667:	mov	rax, qword ptr [rip + 0x59ba] ## literal pool symbol address: _optarg
10000266e:	mov	r15, qword ptr [rax]
100002671:	mov	rdi, r15
100002674:	call	0x100006612 ## symbol stub for: _strlen
100002679:	test	eax, eax
10000267b:	je	0x100002733
100002681:	cmp	eax, 0x1f
100002684:	jge	0x100002798
10000268a:	mov	qword ptr [rip + 0x5edf], r15
100002691:	mov	dword ptr [rip + 0x5ee1], eax
100002697:	mov	r15d, dword ptr [rbp - 0x30]
10000269b:	jmp	0x1000025e1
1000026a0:	mov	byte ptr [rip + 0x6025], 0x1
1000026a7:	jmp	0x1000025e1
1000026ac:	mov	byte ptr [rip + 0x6015], 0x1
1000026b3:	jmp	0x1000025e1
1000026b8:	mov	byte ptr [rip + 0x6015], 0x1
1000026bf:	jmp	0x1000025e1
1000026c4:	mov	byte ptr [rip + 0x600d], 0x1
1000026cb:	jmp	0x1000025e1
1000026d0:	mov	al, 0x1
1000026d2:	mov	byte ptr [rip + 0x5ff8], al
1000026d8:	mov	byte ptr [rip + 0x5fea], al
1000026de:	jmp	0x1000025e1
1000026e3:	mov	byte ptr [rip + 0x5ff2], 0x1
1000026ea:	mov	byte ptr [rip + 0x5fef], 0x0
1000026f1:	jmp	0x1000025e1
1000026f6:	mov	byte ptr [rip + 0x5fe7], 0x1
1000026fd:	jmp	0x1000025e1
100002702:	mov	byte ptr [rip + 0x5fdf], 0x1
100002709:	jmp	0x1000025e1
10000270e:	mov	al, 0x1
100002710:	mov	byte ptr [rip + 0x5fb6], al
100002716:	mov	byte ptr [rip + 0x5fd0], al
10000271c:	mov	byte ptr [rip + 0x5fa6], al
100002722:	jmp	0x1000025e1
100002727:	mov	byte ptr [rip + 0x5fc2], 0x1
10000272e:	jmp	0x1000025e1
100002733:	lea	rax, [rip + 0x48cc] ## literal pool for: ""
10000273a:	mov	qword ptr [rip + 0x5f67], rax
100002741:	mov	dword ptr [rip + 0x5f65], 0x0
10000274b:	mov	r15d, dword ptr [rbp - 0x30]
10000274f:	jmp	0x1000025e1
100002754:	cmp	eax, -0x1
100002757:	jne	0x100002793
100002759:	mov	rax, qword ptr [rip + 0x58d0] ## literal pool symbol address: _optind
100002760:	movsxd	rax, dword ptr [rax]
100002763:	sub	r15d, eax
100002766:	jne	0x1000027ae
100002768:	cmp	byte ptr [rip + 0x5f59], 0x1
10000276f:	jne	0x100002a86
100002775:	call	0x100002c11
10000277a:	jmp	0x100002a8b
10000277f:	cmp	eax, 0x4c
100002782:	jne	0x100002793
100002784:	call	0x100002b85
100002789:	cmp	eax, 0x56
10000278c:	jne	0x100002793
10000278e:	call	0x100002b5b
100002793:	call	0x100002bc9
100002798:	lea	rsi, [rip + 0x4846] ## literal pool for: "incorrect suffix: '%s': too long"
10000279f:	mov	edi, 0x1
1000027a4:	mov	rdx, r15
1000027a7:	xor	eax, eax
1000027a9:	call	0x1000064e0 ## symbol stub for: _errx
1000027ae:	lea	r12, [r12 + 8*rax]
1000027b2:	mov	rbx, qword ptr [r12]
1000027b6:	mov	r14d, r15d
1000027b9:	cmp	byte ptr [rbx], 0x2d
1000027bc:	jne	0x1000027c8
1000027be:	cmp	byte ptr [rbx + 0x1], 0x0
1000027c2:	je	0x100002a0f
1000027c8:	cmp	byte ptr [rip + 0x5efe], 0x1
1000027cf:	mov	qword ptr [rbp - 0x30], r12
1000027d3:	mov	qword ptr [rbp - 0x38], rbx
1000027d7:	jne	0x10000284d
1000027d9:	lea	rdi, [rip + 0x4eb3] ## literal pool for: "bin/zcat"
1000027e0:	lea	rsi, [rip + 0x4eb5] ## literal pool for: "Unix2003"
1000027e7:	call	0x1000064b6 ## symbol stub for: _compat_mode
1000027ec:	test	al, al
1000027ee:	je	0x10000284d
1000027f0:	mov	rdi, rbx
1000027f3:	mov	esi, 0x2e
1000027f8:	call	0x10000661e ## symbol stub for: _strrchr
1000027fd:	test	rax, rax
100002800:	je	0x100002815
100002802:	mov	rdi, rax
100002805:	lea	rsi, [rip + 0x48c1] ## literal pool for: ".Z"
10000280c:	call	0x100006600 ## symbol stub for: _strcmp
100002811:	test	eax, eax
100002813:	je	0x10000284d
100002815:	mov	rdi, rbx
100002818:	call	0x100006612 ## symbol stub for: _strlen
10000281d:	mov	r12, rax
100002820:	lea	rdi, [rax + 0x3]
100002824:	call	0x1000065c4 ## symbol stub for: _malloc
100002829:	mov	r13, rax
10000282c:	mov	rdi, rax
10000282f:	mov	rsi, rbx
100002832:	mov	rdx, r12
100002835:	call	0x1000065ca ## symbol stub for: _memcpy
10000283a:	mov	word ptr [r13 + r12], 0x5a2e
100002842:	mov	byte ptr [r13 + r12 + 0x2], 0x0
100002848:	mov	r12, r13
10000284b:	jmp	0x100002853
10000284d:	xor	r13d, r13d
100002850:	mov	r12, rbx
100002853:	mov	rdi, r12
100002856:	lea	rsi, [rbp - 0xe0]
10000285d:	call	0x1000065fa ## symbol stub for: _stat$INODE64
100002862:	test	eax, eax
100002864:	jne	0x100002897
100002866:	cmp	byte ptr [rip + 0x5e67], 0x0
10000286d:	jne	0x100002947
100002873:	test	byte ptr [rip + 0x5e52], 0x1
10000287a:	jne	0x100002947
100002880:	mov	rdi, r12
100002883:	lea	rsi, [rbp - 0xe0]
10000288a:	call	0x1000065ac ## symbol stub for: _lstat$INODE64
10000288f:	test	eax, eax
100002891:	je	0x100002947
100002897:	test	r13, r13
10000289a:	jne	0x10000290a
10000289c:	test	byte ptr [rip + 0x5e25], 0x1
1000028a3:	je	0x10000290a
1000028a5:	call	0x100006480 ## symbol stub for: ___error
1000028aa:	cmp	dword ptr [rax], 0x2
1000028ad:	jne	0x10000290a
1000028af:	mov	rdi, r12
1000028b2:	call	0x100006612 ## symbol stub for: _strlen
1000028b7:	mov	r15, rax
1000028ba:	movsxd	rbx, dword ptr [rip + 0x5cb7]
1000028c1:	lea	rdi, [rax + rbx]
1000028c5:	inc	rdi
1000028c8:	call	0x1000065c4 ## symbol stub for: _malloc
1000028cd:	test	rax, rax
1000028d0:	je	0x100002a78
1000028d6:	mov	r13, rax
1000028d9:	mov	rdi, rax
1000028dc:	mov	rsi, r12
1000028df:	mov	rdx, r15
1000028e2:	call	0x1000065ca ## symbol stub for: _memcpy
1000028e7:	mov	rdi, r13
1000028ea:	add	rdi, r15
1000028ed:	mov	rsi, qword ptr [rip + 0x5c7c]
1000028f4:	inc	rbx
1000028f7:	mov	rdx, rbx
1000028fa:	call	0x1000065ca ## symbol stub for: _memcpy
1000028ff:	mov	r12, r13
100002902:	mov	r15d, r14d
100002905:	jmp	0x100002853
10000290a:	lea	rdi, [rip + 0x4d94] ## literal pool for: "can't stat: %s (%s)"
100002911:	mov	rsi, qword ptr [rbp - 0x38]
100002915:	mov	rdx, r12
100002918:	xor	eax, eax
10000291a:	call	0x10000325e
10000291f:	mov	r12, qword ptr [rbp - 0x30]
100002923:	test	r13, r13
100002926:	je	0x100002930
100002928:	mov	rdi, r13
10000292b:	call	0x100006540 ## symbol stub for: _free
100002930:	mov	rbx, qword ptr [r12 + 0x8]
100002935:	add	r12, 0x8
100002939:	test	rbx, rbx
10000293c:	jne	0x1000027b9
100002942:	jmp	0x100002a96
100002947:	movzx	eax, word ptr [rbp - 0xdc]
10000294e:	and	eax, 0xf000
100002953:	cmp	eax, 0x8000
100002958:	je	0x100002a2c
10000295e:	movzx	eax, ax
100002961:	cmp	eax, 0x4000
100002966:	jne	0x100002a40
10000296c:	cmp	byte ptr [rip + 0x5d75], 0x1
100002973:	jne	0x100002a49
100002979:	mov	qword ptr [rbp - 0x50], r12
10000297d:	mov	qword ptr [rbp - 0x48], 0x0
100002985:	lea	rdi, [rbp - 0x50]
100002989:	mov	esi, 0x14
10000298e:	xor	edx, edx
100002990:	call	0x100006558 ## symbol stub for: _fts_open$INODE64
100002995:	test	rax, rax
100002998:	je	0x100002a5f
10000299e:	mov	r15, rax
1000029a1:	mov	rdi, rax
1000029a4:	call	0x10000655e ## symbol stub for: _fts_read$INODE64
1000029a9:	test	rax, rax
1000029ac:	mov	r12, qword ptr [rbp - 0x30]
1000029b0:	je	0x1000029ff
1000029b2:	mov	ecx, dword ptr [rax + 0x58]
1000029b5:	add	ecx, -0x4
1000029b8:	cmp	cx, 0x6
1000029bc:	ja	0x1000029f2
1000029be:	movzx	ecx, cx
1000029c1:	lea	rdx, [rip + 0x158]
1000029c8:	movsxd	rcx, dword ptr [rdx + 4*rcx]
1000029cc:	add	rcx, rdx
1000029cf:	jmp	rcx
1000029d1:	mov	rsi, qword ptr [rax + 0x30]
1000029d5:	lea	rdi, [rip + 0x4bca] ## literal pool for: "%s"
1000029dc:	xor	eax, eax
1000029de:	call	0x10000325e
1000029e3:	jmp	0x1000029f2
1000029e5:	mov	rdi, qword ptr [rax + 0x30]
1000029e9:	mov	rsi, qword ptr [rax + 0x60]
1000029ed:	call	0x10000549a
1000029f2:	mov	rdi, r15
1000029f5:	call	0x10000655e ## symbol stub for: _fts_read$INODE64
1000029fa:	test	rax, rax
1000029fd:	jne	0x1000029b2
1000029ff:	mov	rdi, r15
100002a02:	call	0x100006552 ## symbol stub for: _fts_close$INODE64
100002a07:	mov	r15d, r14d
100002a0a:	jmp	0x100002923
100002a0f:	cmp	byte ptr [rip + 0x5cb2], 0x1
100002a16:	jne	0x100002a22
100002a18:	call	0x100002c11
100002a1d:	jmp	0x100002930
100002a22:	call	0x100002ea0
100002a27:	jmp	0x100002930
100002a2c:	mov	rdi, r12
100002a2f:	lea	rsi, [rbp - 0xe0]
100002a36:	call	0x10000549a
100002a3b:	jmp	0x10000291f
100002a40:	lea	rdi, [rip + 0x4c84] ## literal pool for: "%s is not a regular file"
100002a47:	jmp	0x100002a50
100002a49:	lea	rdi, [rip + 0x4c69] ## literal pool for: "%s is a directory"
100002a50:	mov	rsi, r12
100002a53:	xor	eax, eax
100002a55:	call	0x100003193
100002a5a:	jmp	0x10000291f
100002a5f:	lea	rdi, [rip + 0x4c7e] ## literal pool for: "couldn't fts_open %s"
100002a66:	mov	rsi, r12
100002a69:	xor	eax, eax
100002a6b:	call	0x100006642 ## symbol stub for: _warn
100002a70:	mov	r15d, r14d
100002a73:	jmp	0x10000291f
100002a78:	lea	rdi, [rip + 0x4655] ## literal pool for: "malloc"
100002a7f:	xor	eax, eax
100002a81:	call	0x100003102
100002a86:	call	0x100002ea0
100002a8b:	mov	edi, dword ptr [rip + 0x5c63]
100002a91:	call	0x1000064e6 ## symbol stub for: _exit
100002a96:	cmp	r15d, 0x2
100002a9a:	jl	0x100002a8b
100002a9c:	test	byte ptr [rip + 0x5c2d], 0x1
100002aa3:	je	0x100002a8b
100002aa5:	test	byte ptr [rip + 0x5c38], 0x1
100002aac:	jne	0x100002a8b
100002aae:	lea	rdx, [rip + 0x4552] ## literal pool for: "(totals)"
100002ab5:	mov	edi, 0xffffffff
100002aba:	xor	esi, esi
100002abc:	xor	ecx, ecx
100002abe:	call	0x100002f77
100002ac3:	jmp	0x100002a8b
100002ac5:	nop	dword ptr [rax]
100002ac8:	pop	rdi
100002ac9:	sti
	.byte 0xff #bad opcode
100002acb:	dec	ebx
100002acd:	cld
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002ad0:	fdivr	st, st(3)
	.byte 0xff #bad opcode
100002ad3:	jmp	rsp
100002ad5:	sti
	.byte 0xff #bad opcode
100002ad7:	dec	ebx
100002ad9:	cld
	.byte 0xff #bad opcode
100002adb:	push	rax
100002add:	sti
	.byte 0xff #bad opcode
100002adf:	dec	ebx
100002ae1:	cld
	.byte 0xff #bad opcode
100002ae3:	dec	ebx
100002ae5:	cld
	.byte 0xff #bad opcode
100002ae7:	dec	ebx
100002ae9:	cld
	.byte 0xff #bad opcode
100002aeb:	dec	ebx
100002aed:	cld
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002af0:	cld
100002af1:	sti
	.byte 0xff #bad opcode
100002af3:	dec	dword ptr [rax]
100002af5:	cld
	.byte 0xff #bad opcode
100002af7:	dec	ebx
100002af9:	cld
	.byte 0xff #bad opcode
100002afb:	call	[rbx]
100002afd:	cld
	.byte 0xff #bad opcode
100002aff:	dec	ebx
100002b01:	cld
	.byte 0xff #bad opcode
100002b03:	dec	ebx
100002b05:	cld
	.byte 0xff #bad opcode
100002b07:	jmp	[rsi]
100002b09:	cld
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002b0c:	cmp	bh, ah
	.byte 0xff #bad opcode
100002b0f:	dec	ebx
100002b11:	cld
	.byte 0xff #bad opcode
100002b13:	inc	dword ptr [rsi - 0x4]
	.byte 0xff #bad opcode
100002b17:	dec	ebx
100002b19:	cld
	.byte 0xff #bad opcode
100002b1b:	call	[rdi - 0x4]
	.byte 0xff #bad opcode
100002b1f:	push	qword ptr [rcx - 0x2d000002]
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100002b27:	call	rdx
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100002b2b:	push	qword ptr [rcx - 0x3a000002]
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100002b33:	call	rdx
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100002b37:	push	qword ptr [rcx + 0x55fffffe]
100002b3d:	mov	rbp, rsp
100002b40:	mov	rdi, qword ptr [rip + 0x5bb1]
100002b47:	test	rdi, rdi
100002b4a:	je	0x100002b51
100002b4c:	call	0x100006630 ## symbol stub for: _unlink
100002b51:	mov	edi, 0x2
100002b56:	call	0x10000649e ## symbol stub for: __exit
100002b5b:	push	rbp
100002b5c:	mov	rbp, rsp
100002b5f:	mov	rax, qword ptr [rip + 0x54aa] ## literal pool symbol address: ___stderrp
100002b66:	mov	rdi, qword ptr [rax]
100002b69:	lea	rsi, [rip + 0x4f95] ## literal pool for: "%s\n"
100002b70:	lea	rdx, [rip + 0x3eb9]
100002b77:	xor	eax, eax
100002b79:	call	0x10000652e ## symbol stub for: _fprintf
100002b7e:	xor	edi, edi
100002b80:	call	0x1000064e6 ## symbol stub for: _exit
100002b85:	push	rbp
100002b86:	mov	rbp, rsp
100002b89:	push	rbx
100002b8a:	push	rax
100002b8b:	mov	rbx, qword ptr [rip + 0x547e] ## literal pool symbol address: ___stderrp
100002b92:	mov	rdi, qword ptr [rbx]
100002b95:	lea	rsi, [rip + 0x535e] ## literal pool for: "%s (based on FreeBSD gzip 20150113)\n"
100002b9c:	lea	rdx, [rip + 0x3e8d]
100002ba3:	xor	eax, eax
100002ba5:	call	0x10000652e ## symbol stub for: _fprintf
100002baa:	mov	rdi, qword ptr [rbx]
100002bad:	lea	rsi, [rip + 0x4f51] ## literal pool for: "%s\n"
100002bb4:	lea	rdx, [rip + 0x3e95]
100002bbb:	xor	eax, eax
100002bbd:	call	0x10000652e ## symbol stub for: _fprintf
100002bc2:	xor	edi, edi
100002bc4:	call	0x1000064e6 ## symbol stub for: _exit
100002bc9:	push	rbp
100002bca:	mov	rbp, rsp
100002bcd:	push	rbx
100002bce:	push	rax
100002bcf:	mov	rbx, qword ptr [rip + 0x543a] ## literal pool symbol address: ___stderrp
100002bd6:	mov	rdi, qword ptr [rbx]
100002bd9:	lea	rsi, [rip + 0x4f25] ## literal pool for: "%s\n"
100002be0:	lea	rdx, [rip + 0x3e49]
100002be7:	xor	eax, eax
100002be9:	call	0x10000652e ## symbol stub for: _fprintf
100002bee:	mov	rbx, qword ptr [rbx]
100002bf1:	call	0x100006582 ## symbol stub for: _getprogname
100002bf6:	lea	rsi, [rip + 0x4f0c] ## literal pool for: "usage: %s [-123456789acdfhklLNnqrtVv] [-S .suffix] [<file> [<file> ...]]\n -1 --fast            fastest (worst) compression\n -2 .. -8             set compression level\n -9 --best            best (slowest) compression\n -c --stdout          write to stdout, keep original files\n    --to-stdout\n -d --decompress      uncompress files\n    --uncompress\n -f --force           force overwriting & compress links\n -h --help            display this help\n -k --keep            don't delete input files during operation\n -l --list            list compressed file contents\n -N --name            save or restore original file name and time stamp\n -n --no-name         don't save original file name or time stamp\n -q --quiet           output no warnings\n -r --recursive       recursively compress files in directories\n -S .suf              use suffix .suf instead of .gz\n    --suffix .suf\n -t --test            test compressed file\n -V --version         display program version\n -v --verbose         print extra statistics\n"
100002bfd:	mov	rdi, rbx
100002c00:	mov	rdx, rax
100002c03:	xor	eax, eax
100002c05:	call	0x10000652e ## symbol stub for: _fprintf
100002c0a:	xor	edi, edi
100002c0c:	call	0x1000064e6 ## symbol stub for: _exit
100002c11:	push	rbp
100002c12:	mov	rbp, rsp
100002c15:	push	r14
100002c17:	push	rbx
100002c18:	sub	rsp, 0xa0
100002c1f:	mov	al, byte ptr [rip + 0x5aab]
100002c25:	cmp	byte ptr [rip + 0x5aa8], 0x0
100002c2c:	jne	0x100002c50
100002c2e:	test	al, 0x1
100002c30:	jne	0x100002c50
100002c32:	xor	edi, edi
100002c34:	call	0x1000065a0 ## symbol stub for: _isatty
100002c39:	test	eax, eax
100002c3b:	je	0x100002c7e
100002c3d:	lea	rdi, [rip + 0x449f] ## literal pool for: "standard input is a terminal -- ignoring"
100002c44:	xor	eax, eax
100002c46:	call	0x100003193
100002c4b:	jmp	0x100002cdf
100002c50:	test	al, 0x1
100002c52:	je	0x100002c87
100002c54:	lea	rsi, [rbp - 0xa8]
100002c5b:	xor	edi, edi
100002c5d:	call	0x10000654c ## symbol stub for: _fstat$INODE64
100002c62:	test	eax, eax
100002c64:	js	0x100002cd1
100002c66:	mov	rcx, qword ptr [rbp - 0x78]
100002c6a:	mov	rsi, qword ptr [rbp - 0x48]
100002c6e:	lea	rdx, [rip + 0x439b] ## literal pool for: "stdout"
100002c75:	xor	edi, edi
100002c77:	call	0x100002f77
100002c7c:	jmp	0x100002cdf
100002c7e:	cmp	byte ptr [rip + 0x5a4b], 0x0
100002c85:	jne	0x100002c54
100002c87:	mov	r14d, 0x4
100002c8d:	lea	rbx, [rbp - 0x14]
100002c91:	xor	edi, edi
100002c93:	mov	rsi, rbx
100002c96:	mov	rdx, r14
100002c99:	call	0x1000065e8 ## symbol stub for: _read
100002c9e:	cmp	rax, -0x1
100002ca2:	je	0x100002cc8
100002ca4:	test	rax, rax
100002ca7:	je	0x100002cb4
100002ca9:	add	rbx, rax
100002cac:	sub	r14, rax
100002caf:	jne	0x100002c91
100002cb1:	xor	r14d, r14d
100002cb4:	mov	eax, 0x4
100002cb9:	sub	rax, r14
100002cbc:	cmp	rax, 0x4
100002cc0:	je	0x100002ceb
100002cc2:	cmp	rax, -0x1
100002cc6:	jne	0x100002d33
100002cc8:	lea	rdi, [rip + 0x4443] ## literal pool for: "can't read stdin"
100002ccf:	jmp	0x100002cd8
100002cd1:	lea	rdi, [rip + 0x4434] ## literal pool for: "fstat"
100002cd8:	xor	eax, eax
100002cda:	call	0x10000325e
100002cdf:	add	rsp, 0xa0
100002ce6:	pop	rbx
100002ce7:	pop	r14
100002ce9:	pop	rbp
100002cea:	ret
100002ceb:	lea	rdi, [rbp - 0x14]
100002cef:	call	0x100003329
100002cf4:	cmp	eax, 0x4
100002cf7:	ja	0x100002d3f
100002cf9:	mov	eax, eax
100002cfb:	lea	rcx, [rip + 0x18a]
100002d02:	movsxd	rax, dword ptr [rcx + 4*rax]
100002d06:	add	rax, rcx
100002d09:	jmp	rax
100002d0b:	lea	r9, [rip + 0x444c] ## literal pool for: "(stdin)"
100002d12:	lea	rdx, [rbp - 0x14]
100002d16:	lea	r8, [rbp - 0xa8]
100002d1d:	mov	ecx, 0x4
100002d22:	xor	edi, edi
100002d24:	mov	esi, 0x1
100002d29:	call	0x1000034a3
100002d2e:	jmp	0x100002e02
100002d33:	lea	rdi, [rip + 0x43e9] ## literal pool for: "(stdin): unexpected end of file"
100002d3a:	jmp	0x100002c44
100002d3f:	cmp	byte ptr [rip + 0x598e], 0x0
100002d46:	je	0x100002e71
100002d4c:	lea	rdi, [rbp - 0x14]
100002d50:	lea	rdx, [rbp - 0xa8]
100002d57:	mov	esi, 0x4
100002d5c:	xor	ecx, ecx
100002d5e:	call	0x100003399
100002d63:	jmp	0x100002e02
100002d68:	lea	rdx, [rbp - 0x14]
100002d6c:	lea	r8, [rbp - 0xa8]
100002d73:	mov	ecx, 0x4
100002d78:	xor	edi, edi
100002d7a:	mov	esi, 0x1
100002d7f:	call	0x100003c24
100002d84:	jmp	0x100002e02
100002d86:	xor	edi, edi
100002d88:	call	0x100003f14
100002d8d:	test	rax, rax
100002d90:	je	0x100002e7d
100002d96:	mov	r14, rax
100002d99:	mov	rax, qword ptr [rip + 0x5280] ## literal pool symbol address: ___stdoutp
100002da0:	mov	rsi, qword ptr [rax]
100002da3:	lea	rdx, [rbp - 0x14]
100002da7:	lea	r8, [rbp - 0xa8]
100002dae:	mov	ecx, 0x4
100002db3:	mov	rdi, r14
100002db6:	call	0x100003fa4
100002dbb:	mov	rbx, rax
100002dbe:	mov	rdi, r14
100002dc1:	call	0x1000064fe ## symbol stub for: _fclose
100002dc6:	jmp	0x100002e05
100002dc8:	lea	rdx, [rbp - 0x14]
100002dcc:	lea	r8, [rbp - 0xa8]
100002dd3:	mov	ecx, 0x4
100002dd8:	xor	edi, edi
100002dda:	mov	esi, 0x1
100002ddf:	call	0x10000408c
100002de4:	jmp	0x100002e02
100002de6:	lea	rdx, [rbp - 0x14]
100002dea:	lea	r8, [rbp - 0xa8]
100002df1:	mov	ecx, 0x4
100002df6:	xor	edi, edi
100002df8:	mov	esi, 0x1
100002dfd:	call	0x100004512
100002e02:	mov	rbx, rax
100002e05:	mov	dl, byte ptr [rip + 0x58e5]
100002e0b:	mov	al, byte ptr [rip + 0x58db]
100002e11:	cmp	rbx, -0x1
100002e15:	je	0x100002e45
100002e17:	test	dl, 0x1
100002e1a:	je	0x100002e45
100002e1c:	test	al, 0x1
100002e1e:	jne	0x100002e45
100002e20:	mov	rcx, qword ptr [rbp - 0xa8]
100002e27:	cmp	rcx, -0x1
100002e2b:	je	0x100002e45
100002e2d:	xor	edi, edi
100002e2f:	xor	esi, esi
100002e31:	mov	rdx, rbx
100002e34:	call	0x100004844
100002e39:	mov	dl, byte ptr [rip + 0x58b1]
100002e3f:	mov	al, byte ptr [rip + 0x58a7]
100002e45:	test	dl, 0x1
100002e48:	je	0x100002cdf
100002e4e:	test	al, 0x1
100002e50:	je	0x100002cdf
100002e56:	xor	esi, esi
100002e58:	cmp	rbx, -0x1
100002e5c:	setne	sil
100002e60:	lea	rdi, [rip + 0x42f7] ## literal pool for: "(stdin)"
100002e67:	call	0x1000048ed
100002e6c:	jmp	0x100002cdf
100002e71:	lea	rdi, [rip + 0x42cb] ## literal pool for: "unknown compression format"
100002e78:	jmp	0x100002c44
100002e7d:	lea	rdi, [rip + 0x42e2] ## literal pool for: "zopen of stdin"
100002e84:	jmp	0x100002c44
100002e89:	nop	dword ptr [rax]
100002e8c:	jg	0x100002e8c
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002e90:	fdiv	st(6), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002e94:	cli
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100002e98:	cmp	al, -0x1
	.byte 0xff #bad opcode
100002e9b:	call	[rdx - 0x1]
	.byte 0xff #bad opcode
100002e9f:	call	qword ptr [rbp + 0x48]
100002ea2:	mov	ebp, esp
100002ea4:	sub	rsp, 0xa0
100002eab:	cmp	byte ptr [rip + 0x5822], 0x0
100002eb2:	jne	0x100002ed5
100002eb4:	mov	edi, 0x1
100002eb9:	call	0x1000065a0 ## symbol stub for: _isatty
100002ebe:	test	eax, eax
100002ec0:	je	0x100002ed5
100002ec2:	lea	rdi, [rip + 0x4724] ## literal pool for: "standard output is a terminal -- ignoring"
100002ec9:	xor	eax, eax
100002ecb:	call	0x100003193
100002ed0:	jmp	0x100002f6e
100002ed5:	lea	rsi, [rbp - 0x98]
100002edc:	xor	edi, edi
100002ede:	call	0x10000654c ## symbol stub for: _fstat$INODE64
100002ee3:	test	eax, eax
100002ee5:	js	0x100002f00
100002ee7:	movzx	eax, word ptr [rbp - 0x94]
100002eee:	and	eax, 0xf000
100002ef3:	cmp	eax, 0x8000
100002ef8:	jne	0x100002f09
100002efa:	mov	r8, qword ptr [rbp - 0x68]
100002efe:	jmp	0x100002f19
100002f00:	lea	rdi, [rip + 0x4710] ## literal pool for: "Can't stat stdin"
100002f07:	jmp	0x100002f67
100002f09:	xor	edi, edi
100002f0b:	call	0x100006624 ## symbol stub for: _time
100002f10:	mov	r8, rax
100002f13:	cmp	rax, -0x1
100002f17:	je	0x100002f60
100002f19:	lea	rcx, [rip + 0x40e6] ## literal pool for: ""
100002f20:	lea	rdx, [rbp - 0x8]
100002f24:	xor	edi, edi
100002f26:	mov	esi, 0x1
100002f2b:	call	0x100005087
100002f30:	cmp	rax, -0x1
100002f34:	je	0x100002f6e
100002f36:	test	byte ptr [rip + 0x57b3], 0x1
100002f3d:	je	0x100002f6e
100002f3f:	test	byte ptr [rip + 0x57a6], 0x1
100002f46:	jne	0x100002f6e
100002f48:	mov	rcx, qword ptr [rbp - 0x8]
100002f4c:	cmp	rcx, -0x1
100002f50:	je	0x100002f6e
100002f52:	xor	edi, edi
100002f54:	xor	esi, esi
100002f56:	mov	rdx, rax
100002f59:	call	0x100004844
100002f5e:	jmp	0x100002f6e
100002f60:	lea	rdi, [rip + 0x46c1] ## literal pool for: "time"
100002f67:	xor	eax, eax
100002f69:	call	0x10000325e
100002f6e:	add	rsp, 0xa0
100002f75:	pop	rbp
100002f76:	ret
100002f77:	push	rbp
100002f78:	mov	rbp, rsp
100002f7b:	push	r15
100002f7d:	push	r14
100002f7f:	push	r12
100002f81:	push	rbx
100002f82:	sub	rsp, 0x20
100002f86:	mov	r14, rdx
100002f89:	mov	r15, rsi
100002f8c:	mov	ebx, edi
100002f8e:	mov	rax, qword ptr [rip + 0x5073] ## literal pool symbol address: ___stack_chk_guard
100002f95:	mov	rax, qword ptr [rax]
100002f98:	mov	qword ptr [rbp - 0x28], rax
100002f9c:	mov	qword ptr [rbp - 0x38], rcx
100002fa0:	cmp	byte ptr [rip + 0x5789], 0x0
100002fa7:	jne	0x100002fd5
100002fa9:	cmp	byte ptr [rip + 0x5740], 0x1
100002fb0:	jne	0x100002fc0
100002fb2:	lea	rdi, [rip + 0x4acf] ## literal pool for: "method  crc     date  time  "
100002fb9:	xor	eax, eax
100002fbb:	call	0x1000065dc ## symbol stub for: _printf
100002fc0:	cmp	byte ptr [rip + 0x571d], 0x0
100002fc7:	jne	0x100002fd5
100002fc9:	lea	rdi, [rip + 0x4f4f] ## literal pool for: "  compressed uncompressed  ratio uncompressed_name"
100002fd0:	call	0x1000065e2 ## symbol stub for: _puts
100002fd5:	mov	byte ptr [rip + 0x5754], 0x1
100002fdc:	cmp	ebx, -0x1
100002fdf:	je	0x100003028
100002fe1:	mov	edi, ebx
100002fe3:	mov	rsi, -0x8
100002fea:	mov	edx, 0x2
100002fef:	call	0x1000065a6 ## symbol stub for: _lseek
100002ff4:	cmp	rax, -0x1
100002ff8:	je	0x10000304f
100002ffa:	lea	rsi, [rbp - 0x30]
100002ffe:	mov	edx, 0x8
100003003:	mov	edi, ebx
100003005:	call	0x1000065e8 ## symbol stub for: _read
10000300a:	cmp	rax, 0x8
10000300e:	je	0x100003053
100003010:	lea	rdi, [rip + 0x4a8e] ## literal pool for: "read of uncompressed size"
100003017:	xor	ebx, ebx
100003019:	cmp	rax, -0x1
10000301d:	jne	0x10000305c
10000301f:	xor	eax, eax
100003021:	call	0x10000325e
100003026:	jmp	0x100003063
100003028:	mov	rbx, qword ptr [rip + 0x5709]
10000302f:	mov	r15, qword ptr [rip + 0x570a]
100003036:	cmp	byte ptr [rip + 0x56b3], 0x1
10000303d:	jne	0x100003098
10000303f:	lea	rdi, [rip + 0x4a79] ## literal pool for: "                            "
100003046:	xor	eax, eax
100003048:	call	0x1000065dc ## symbol stub for: _printf
10000304d:	jmp	0x100003098
10000304f:	xor	ebx, ebx
100003051:	jmp	0x100003063
100003053:	mov	r12d, dword ptr [rbp - 0x30]
100003057:	mov	ebx, dword ptr [rbp - 0x2c]
10000305a:	jmp	0x100003066
10000305c:	xor	eax, eax
10000305e:	call	0x100003193
100003063:	xor	r12d, r12d
100003066:	cmp	byte ptr [rip + 0x5683], 0x0
10000306d:	je	0x100003098
10000306f:	lea	rdi, [rbp - 0x38]
100003073:	call	0x1000064c2 ## symbol stub for: _ctime
100003078:	mov	byte ptr [rax + 0x10], 0x0
10000307c:	lea	rcx, [rax + 0x4]
100003080:	lea	rdi, [rip + 0x4a55] ## literal pool for: "%5s %08x %11s "
100003087:	lea	rsi, [rip + 0x4a5d] ## literal pool for: "defla"
10000308e:	mov	edx, r12d
100003091:	xor	eax, eax
100003093:	call	0x1000065dc ## symbol stub for: _printf
100003098:	add	qword ptr [rip + 0x5699], rbx
10000309f:	add	qword ptr [rip + 0x569a], r15
1000030a6:	lea	rdi, [rip + 0x4a44] ## literal pool for: "%12llu %12llu "
1000030ad:	mov	rsi, r15
1000030b0:	mov	rdx, rbx
1000030b3:	xor	eax, eax
1000030b5:	call	0x1000065dc ## symbol stub for: _printf
1000030ba:	mov	rax, qword ptr [rip + 0x4f5f] ## literal pool symbol address: ___stdoutp
1000030c1:	mov	rdx, qword ptr [rax]
1000030c4:	mov	rdi, rbx
1000030c7:	mov	rsi, r15
1000030ca:	call	0x100004fb3
1000030cf:	lea	rdi, [rip + 0x4a2a] ## literal pool for: " %s\n"
1000030d6:	mov	rsi, r14
1000030d9:	xor	eax, eax
1000030db:	call	0x1000065dc ## symbol stub for: _printf
1000030e0:	mov	rax, qword ptr [rip + 0x4f21] ## literal pool symbol address: ___stack_chk_guard
1000030e7:	mov	rax, qword ptr [rax]
1000030ea:	cmp	rax, qword ptr [rbp - 0x28]
1000030ee:	jne	0x1000030fd
1000030f0:	add	rsp, 0x20
1000030f4:	pop	rbx
1000030f5:	pop	r12
1000030f7:	pop	r14
1000030f9:	pop	r15
1000030fb:	pop	rbp
1000030fc:	ret
1000030fd:	call	0x100006492 ## symbol stub for: ___stack_chk_fail
100003102:	push	rbp
100003103:	mov	rbp, rsp
100003106:	sub	rsp, 0xd0
10000310d:	test	al, al
10000310f:	je	0x100003131
100003111:	movaps	xmmword ptr [rbp - 0x80], xmm0
100003115:	movaps	xmmword ptr [rbp - 0x70], xmm1
100003119:	movaps	xmmword ptr [rbp - 0x60], xmm2
10000311d:	movaps	xmmword ptr [rbp - 0x50], xmm3
100003121:	movaps	xmmword ptr [rbp - 0x40], xmm4
100003125:	movaps	xmmword ptr [rbp - 0x30], xmm5
100003129:	movaps	xmmword ptr [rbp - 0x20], xmm6
10000312d:	movaps	xmmword ptr [rbp - 0x10], xmm7
100003131:	mov	qword ptr [rbp - 0xa8], rsi
100003138:	mov	qword ptr [rbp - 0xa0], rdx
10000313f:	mov	qword ptr [rbp - 0x98], rcx
100003146:	mov	qword ptr [rbp - 0x90], r8
10000314d:	mov	qword ptr [rbp - 0x88], r9
100003154:	cmp	byte ptr [rip + 0x5589], 0x0
10000315b:	jne	0x100003189
10000315d:	lea	rax, [rbp - 0xb0]
100003164:	lea	rsi, [rbp - 0xd0]
10000316b:	mov	qword ptr [rsi + 0x10], rax
10000316f:	lea	rax, [rbp + 0x10]
100003173:	mov	qword ptr [rsi + 0x8], rax
100003177:	movabs	rax, 0x3000000008
100003181:	mov	qword ptr [rsi], rax
100003184:	call	0x100006636 ## symbol stub for: _vwarn
100003189:	mov	edi, 0x2
10000318e:	call	0x1000064e6 ## symbol stub for: _exit
100003193:	push	rbp
100003194:	mov	rbp, rsp
100003197:	sub	rsp, 0xd0
10000319e:	test	al, al
1000031a0:	je	0x1000031c8
1000031a2:	movaps	xmmword ptr [rbp - 0xa0], xmm0
1000031a9:	movaps	xmmword ptr [rbp - 0x90], xmm1
1000031b0:	movaps	xmmword ptr [rbp - 0x80], xmm2
1000031b4:	movaps	xmmword ptr [rbp - 0x70], xmm3
1000031b8:	movaps	xmmword ptr [rbp - 0x60], xmm4
1000031bc:	movaps	xmmword ptr [rbp - 0x50], xmm5
1000031c0:	movaps	xmmword ptr [rbp - 0x40], xmm6
1000031c4:	movaps	xmmword ptr [rbp - 0x30], xmm7
1000031c8:	mov	qword ptr [rbp - 0xc8], rsi
1000031cf:	mov	qword ptr [rbp - 0xc0], rdx
1000031d6:	mov	qword ptr [rbp - 0xb8], rcx
1000031dd:	mov	qword ptr [rbp - 0xb0], r8
1000031e4:	mov	qword ptr [rbp - 0xa8], r9
1000031eb:	mov	rax, qword ptr [rip + 0x4e16] ## literal pool symbol address: ___stack_chk_guard
1000031f2:	mov	rax, qword ptr [rax]
1000031f5:	mov	qword ptr [rbp - 0x8], rax
1000031f9:	cmp	byte ptr [rip + 0x54e4], 0x0
100003200:	je	0x10000322e
100003202:	cmp	dword ptr [rip + 0x54eb], 0x0
100003209:	jne	0x100003215
10000320b:	mov	dword ptr [rip + 0x54df], 0x1
100003215:	mov	rax, qword ptr [rip + 0x4dec] ## literal pool symbol address: ___stack_chk_guard
10000321c:	mov	rax, qword ptr [rax]
10000321f:	cmp	rax, qword ptr [rbp - 0x8]
100003223:	jne	0x100003259
100003225:	add	rsp, 0xd0
10000322c:	pop	rbp
10000322d:	ret
10000322e:	lea	rax, [rbp - 0xd0]
100003235:	lea	rsi, [rbp - 0x20]
100003239:	mov	qword ptr [rsi + 0x10], rax
10000323d:	lea	rax, [rbp + 0x10]
100003241:	mov	qword ptr [rsi + 0x8], rax
100003245:	movabs	rax, 0x3000000008
10000324f:	mov	qword ptr [rsi], rax
100003252:	call	0x10000663c ## symbol stub for: _vwarnx
100003257:	jmp	0x100003202
100003259:	call	0x100006492 ## symbol stub for: ___stack_chk_fail
10000325e:	push	rbp
10000325f:	mov	rbp, rsp
100003262:	sub	rsp, 0xd0
100003269:	test	al, al
10000326b:	je	0x100003293
10000326d:	movaps	xmmword ptr [rbp - 0xa0], xmm0
100003274:	movaps	xmmword ptr [rbp - 0x90], xmm1
10000327b:	movaps	xmmword ptr [rbp - 0x80], xmm2
10000327f:	movaps	xmmword ptr [rbp - 0x70], xmm3
100003283:	movaps	xmmword ptr [rbp - 0x60], xmm4
100003287:	movaps	xmmword ptr [rbp - 0x50], xmm5
10000328b:	movaps	xmmword ptr [rbp - 0x40], xmm6
10000328f:	movaps	xmmword ptr [rbp - 0x30], xmm7
100003293:	mov	qword ptr [rbp - 0xc8], rsi
10000329a:	mov	qword ptr [rbp - 0xc0], rdx
1000032a1:	mov	qword ptr [rbp - 0xb8], rcx
1000032a8:	mov	qword ptr [rbp - 0xb0], r8
1000032af:	mov	qword ptr [rbp - 0xa8], r9
1000032b6:	mov	rax, qword ptr [rip + 0x4d4b] ## literal pool symbol address: ___stack_chk_guard
1000032bd:	mov	rax, qword ptr [rax]
1000032c0:	mov	qword ptr [rbp - 0x8], rax
1000032c4:	cmp	byte ptr [rip + 0x5419], 0x0
1000032cb:	je	0x1000032f9
1000032cd:	cmp	dword ptr [rip + 0x5420], 0x0
1000032d4:	jne	0x1000032e0
1000032d6:	mov	dword ptr [rip + 0x5414], 0x1
1000032e0:	mov	rax, qword ptr [rip + 0x4d21] ## literal pool symbol address: ___stack_chk_guard
1000032e7:	mov	rax, qword ptr [rax]
1000032ea:	cmp	rax, qword ptr [rbp - 0x8]
1000032ee:	jne	0x100003324
1000032f0:	add	rsp, 0xd0
1000032f7:	pop	rbp
1000032f8:	ret
1000032f9:	lea	rax, [rbp - 0xd0]
100003300:	lea	rsi, [rbp - 0x20]
100003304:	mov	qword ptr [rsi + 0x10], rax
100003308:	lea	rax, [rbp + 0x10]
10000330c:	mov	qword ptr [rsi + 0x8], rax
100003310:	movabs	rax, 0x3000000008
10000331a:	mov	qword ptr [rsi], rax
10000331d:	call	0x100006636 ## symbol stub for: _vwarn
100003322:	jmp	0x1000032cd
100003324:	call	0x100006492 ## symbol stub for: ___stack_chk_fail
100003329:	push	rbp
10000332a:	mov	rbp, rsp
10000332d:	cmp	byte ptr [rdi], 0x1f
100003330:	jne	0x100003341
100003332:	mov	cl, byte ptr [rdi + 0x1]
100003335:	xor	eax, eax
100003337:	cmp	cl, -0x75
10000333a:	je	0x100003397
10000333c:	cmp	cl, -0x62
10000333f:	je	0x100003397
100003341:	movzx	eax, word ptr [rdi]
100003344:	xor	eax, 0x5a42
100003349:	movzx	ecx, byte ptr [rdi + 0x2]
10000334d:	xor	ecx, 0x68
100003350:	or	cx, ax
100003353:	jne	0x100003365
100003355:	mov	cl, byte ptr [rdi + 0x3]
100003358:	add	cl, -0x30
10000335b:	mov	eax, 0x1
100003360:	cmp	cl, 0xa
100003363:	jb	0x100003397
100003365:	movzx	eax, word ptr [rdi]
100003368:	cmp	eax, 0x9d1f
10000336d:	je	0x10000338b
10000336f:	movzx	eax, word ptr [rdi]
100003372:	cmp	eax, 0x1e1f
100003377:	je	0x100003392
100003379:	xor	eax, eax
10000337b:	cmp	dword ptr [rdi], 0x587a37fd
100003381:	setne	al
100003384:	add	eax, eax
100003386:	add	eax, 0x4
100003389:	jmp	0x100003397
10000338b:	mov	eax, 0x2
100003390:	jmp	0x100003397
100003392:	mov	eax, 0x3
100003397:	pop	rbp
100003398:	ret
100003399:	push	rbp
10000339a:	mov	rbp, rsp
10000339d:	push	r15
10000339f:	push	r14
1000033a1:	push	r13
1000033a3:	push	r12
1000033a5:	push	rbx
1000033a6:	sub	rsp, 0x10008
1000033ad:	mov	r15d, ecx
1000033b0:	mov	r14, rdx
1000033b3:	mov	r13, rsi
1000033b6:	mov	rsi, rdi
1000033b9:	mov	rax, qword ptr [rip + 0x4c48] ## literal pool symbol address: ___stack_chk_guard
1000033c0:	mov	rax, qword ptr [rax]
1000033c3:	mov	qword ptr [rbp - 0x30], rax
1000033c7:	mov	edi, 0x1
1000033cc:	mov	rdx, r13
1000033cf:	call	0x100006648 ## symbol stub for: _write
1000033d4:	cmp	rax, -0x1
1000033d8:	je	0x100003439
1000033da:	cmp	rax, r13
1000033dd:	jne	0x100003439
1000033df:	lea	rsi, [rbp - 0x10030]
1000033e6:	mov	edx, 0x10000
1000033eb:	mov	edi, r15d
1000033ee:	call	0x1000065e8 ## symbol stub for: _read
1000033f3:	test	rax, rax
1000033f6:	je	0x100003471
1000033f8:	mov	rbx, rax
1000033fb:	lea	r12, [rbp - 0x10030]
100003402:	test	rbx, rbx
100003405:	js	0x100003450
100003407:	mov	edi, 0x1
10000340c:	mov	rsi, r12
10000340f:	mov	rdx, rbx
100003412:	call	0x100006648 ## symbol stub for: _write
100003417:	cmp	rax, rbx
10000341a:	jne	0x100003463
10000341c:	add	r13, rbx
10000341f:	mov	edx, 0x10000
100003424:	mov	edi, r15d
100003427:	mov	rsi, r12
10000342a:	call	0x1000065e8 ## symbol stub for: _read
10000342f:	mov	rbx, rax
100003432:	test	rax, rax
100003435:	jne	0x100003402
100003437:	jmp	0x100003471
100003439:	lea	rdi, [rip + 0x3d35] ## literal pool for: "write to stdout"
100003440:	xor	eax, eax
100003442:	call	0x10000325e
100003447:	mov	r13, -0x1
10000344e:	jmp	0x100003479
100003450:	lea	rdi, [rip + 0x3d2e] ## literal pool for: "read from fd %d"
100003457:	mov	esi, r15d
10000345a:	xor	eax, eax
10000345c:	call	0x10000325e
100003461:	jmp	0x100003471
100003463:	lea	rdi, [rip + 0x3d0b] ## literal pool for: "write to stdout"
10000346a:	xor	eax, eax
10000346c:	call	0x10000325e
100003471:	test	r14, r14
100003474:	je	0x100003479
100003476:	mov	qword ptr [r14], r13
100003479:	mov	rax, qword ptr [rip + 0x4b88] ## literal pool symbol address: ___stack_chk_guard
100003480:	mov	rax, qword ptr [rax]
100003483:	cmp	rax, qword ptr [rbp - 0x30]
100003487:	jne	0x10000349e
100003489:	mov	rax, r13
10000348c:	add	rsp, 0x10008
100003493:	pop	rbx
100003494:	pop	r12
100003496:	pop	r13
100003498:	pop	r14
10000349a:	pop	r15
10000349c:	pop	rbp
10000349d:	ret
10000349e:	call	0x100006492 ## symbol stub for: ___stack_chk_fail
1000034a3:	push	rbp
1000034a4:	mov	rbp, rsp
1000034a7:	push	r15
1000034a9:	push	r14
1000034ab:	push	r13
1000034ad:	push	r12
1000034af:	push	rbx
1000034b0:	sub	rsp, 0xc8
1000034b7:	mov	r13, r9
1000034ba:	mov	r15, r8
1000034bd:	mov	r12, rcx
1000034c0:	mov	r14, rdx
1000034c3:	mov	dword ptr [rbp - 0x6c], esi
1000034c6:	mov	dword ptr [rbp - 0x70], edi
1000034c9:	mov	edi, 0x10000
1000034ce:	call	0x1000065c4 ## symbol stub for: _malloc
1000034d3:	test	rax, rax
1000034d6:	je	0x100003bba
1000034dc:	mov	rbx, rax
1000034df:	mov	qword ptr [rbp - 0xe8], r13
1000034e6:	mov	qword ptr [rbp - 0xf0], r15
1000034ed:	mov	edi, 0x10000
1000034f2:	call	0x1000065c4 ## symbol stub for: _malloc
1000034f7:	test	rax, rax
1000034fa:	je	0x100003bba
100003500:	mov	r15, rax
100003503:	xorps	xmm0, xmm0
100003506:	lea	rax, [rbp - 0xe0]
10000350d:	movaps	xmmword ptr [rax], xmm0
100003510:	movaps	xmmword ptr [rax + 0x20], xmm0
100003514:	movaps	xmmword ptr [rax + 0x10], xmm0
100003518:	movaps	xmmword ptr [rax + 0x50], xmm0
10000351c:	movaps	xmmword ptr [rax + 0x60], xmm0
100003520:	movaps	xmmword ptr [rax + 0x40], xmm0
100003524:	movaps	xmmword ptr [rax + 0x30], xmm0
100003528:	mov	qword ptr [rbp - 0x68], r12
10000352c:	mov	dword ptr [rax + 0x8], r12d
100003530:	mov	qword ptr [rax], r14
100003533:	mov	dword ptr [rax + 0x20], 0x10000
10000353a:	mov	qword ptr [rbp - 0x60], rbx
10000353e:	mov	qword ptr [rax + 0x18], rbx
100003542:	mov	qword ptr [rax + 0x50], 0x0
10000354a:	mov	dword ptr [rbp - 0x48], 0xfffffffe
100003551:	lea	rbx, [rip + 0x670]
100003558:	xor	r12d, r12d
10000355b:	mov	dword ptr [rbp - 0x3c], 0x0
100003562:	mov	dword ptr [rbp - 0x2c], 0x0
100003569:	xor	r13d, r13d
10000356c:	xor	eax, eax
10000356e:	mov	qword ptr [rbp - 0x58], rax
100003572:	xor	eax, eax
100003574:	mov	qword ptr [rbp - 0x50], rax
100003578:	xor	r14d, r14d
10000357b:	xor	eax, eax
10000357d:	mov	qword ptr [rbp - 0x38], rax
100003581:	mov	eax, r13d
100003584:	mov	ecx, dword ptr [rbp - 0xd8]
10000358a:	mov	r13d, eax
10000358d:	test	ecx, ecx
10000358f:	sete	al
100003592:	test	r14d, r14d
100003595:	setne	dl
100003598:	test	r13d, r13d
10000359b:	jne	0x10000360f
10000359d:	or	dl, al
10000359f:	je	0x10000360f
1000035a1:	xor	r13d, r13d
1000035a4:	mov	eax, 0x0
1000035a9:	test	ecx, ecx
1000035ab:	je	0x1000035c9
1000035ad:	mov	rsi, qword ptr [rbp - 0xe0]
1000035b4:	mov	edx, ecx
1000035b6:	mov	ecx, 0x10000
1000035bb:	mov	rdi, r15
1000035be:	call	0x10000648c ## symbol stub for: ___memmove_chk
1000035c3:	mov	eax, dword ptr [rbp - 0xd8]
1000035c9:	mov	qword ptr [rbp - 0xe0], r15
1000035d0:	mov	esi, eax
1000035d2:	add	rsi, r15
1000035d5:	mov	edx, 0x10000
1000035da:	sub	edx, eax
1000035dc:	mov	edi, dword ptr [rbp - 0x70]
1000035df:	call	0x1000065e8 ## symbol stub for: _read
1000035e4:	test	rax, rax
1000035e7:	je	0x1000035f4
1000035e9:	cmp	rax, -0x1
1000035ed:	jne	0x1000035fa
1000035ef:	jmp	0x100003a8f
1000035f4:	mov	r13d, 0x1
1000035fa:	mov	ecx, dword ptr [rbp - 0xd8]
100003600:	add	ecx, eax
100003602:	mov	dword ptr [rbp - 0xd8], ecx
100003608:	add	qword ptr [rbp - 0x68], rax
10000360c:	xor	r14d, r14d
10000360f:	test	ecx, ecx
100003611:	je	0x100003a56
100003617:	mov	eax, r12d
10000361a:	cmp	r12d, 0xf
10000361e:	ja	0x100003581
100003624:	movsxd	rax, dword ptr [rbx + 4*rax]
100003628:	add	rax, rbx
10000362b:	jmp	rax
10000362d:	cmp	ecx, 0x3
100003630:	ja	0x10000390a
100003636:	mov	r14d, 0x1
10000363c:	mov	r12d, 0xe
100003642:	jmp	0x100003659
100003644:	cmp	ecx, 0x3
100003647:	ja	0x10000394d
10000364d:	mov	r14d, 0x1
100003653:	mov	r12d, 0xf
100003659:	test	r13d, r13d
10000365c:	mov	r13d, 0x0
100003662:	je	0x10000358d
100003668:	jmp	0x100003a77
10000366d:	lea	rdi, [rbp - 0xe0]
100003674:	mov	esi, 0x4
100003679:	call	0x10000658e ## symbol stub for: _inflate
10000367e:	mov	esi, eax
100003680:	cmp	eax, -0x5
100003683:	jne	0x10000398b
100003689:	test	r13d, r13d
10000368c:	jne	0x1000039b7
100003692:	xor	eax, eax
100003694:	mov	dword ptr [rbp - 0x48], 0xfffffffb
10000369b:	mov	r12d, 0xd
1000036a1:	cmp	dword ptr [rbp - 0xc0], 0x0
1000036a8:	jne	0x100003584
1000036ae:	jmp	0x1000039b7
1000036b3:	mov	rax, qword ptr [rbp - 0xe0]
1000036ba:	cmp	byte ptr [rax], 0x1f
1000036bd:	jne	0x100003af1
1000036c3:	inc	rax
1000036c6:	mov	qword ptr [rbp - 0xe0], rax
1000036cd:	dec	ecx
1000036cf:	mov	dword ptr [rbp - 0xd8], ecx
1000036d5:	xor	eax, eax
1000036d7:	mov	qword ptr [rbp - 0x50], rax
1000036db:	xor	edi, edi
1000036dd:	xor	esi, esi
1000036df:	xor	edx, edx
1000036e1:	call	0x1000064bc ## symbol stub for: _crc32
1000036e6:	mov	qword ptr [rbp - 0x58], rax
1000036ea:	mov	r12d, 0x1
1000036f0:	jmp	0x100003581
1000036f5:	mov	rax, qword ptr [rbp - 0xe0]
1000036fc:	mov	dl, byte ptr [rax]
1000036fe:	cmp	dl, -0x75
100003701:	je	0x10000370c
100003703:	cmp	dl, -0x62
100003706:	jne	0x100003b83
10000370c:	inc	rax
10000370f:	mov	qword ptr [rbp - 0xe0], rax
100003716:	dec	ecx
100003718:	mov	dword ptr [rbp - 0xd8], ecx
10000371e:	mov	r12d, 0x2
100003724:	jmp	0x100003581
100003729:	mov	rax, qword ptr [rbp - 0xe0]
100003730:	cmp	byte ptr [rax], 0x8
100003733:	jne	0x100003b1d
100003739:	inc	rax
10000373c:	mov	qword ptr [rbp - 0xe0], rax
100003743:	dec	ecx
100003745:	mov	dword ptr [rbp - 0xd8], ecx
10000374b:	mov	r12d, 0x3
100003751:	jmp	0x100003581
100003756:	mov	rax, qword ptr [rbp - 0xe0]
10000375d:	movzx	edx, byte ptr [rax]
100003760:	mov	dword ptr [rbp - 0x3c], edx
100003763:	inc	rax
100003766:	mov	qword ptr [rbp - 0xe0], rax
10000376d:	dec	ecx
10000376f:	mov	dword ptr [rbp - 0xd8], ecx
100003775:	mov	dword ptr [rbp - 0x2c], 0x6
10000377c:	mov	r12d, 0x4
100003782:	jmp	0x100003581
100003787:	mov	r12d, 0x5
10000378d:	cmp	dword ptr [rbp - 0x2c], 0x0
100003791:	jle	0x100003581
100003797:	inc	qword ptr [rbp - 0xe0]
10000379e:	dec	dword ptr [rbp - 0x2c]
1000037a1:	dec	ecx
1000037a3:	mov	dword ptr [rbp - 0xd8], ecx
1000037a9:	mov	r12d, 0x4
1000037af:	jmp	0x100003581
1000037b4:	mov	r12d, 0x8
1000037ba:	test	byte ptr [rbp - 0x3c], 0x4
1000037be:	je	0x100003581
1000037c4:	mov	rax, qword ptr [rbp - 0xe0]
1000037cb:	movzx	edx, byte ptr [rax]
1000037ce:	mov	dword ptr [rbp - 0x2c], edx
1000037d1:	inc	rax
1000037d4:	mov	qword ptr [rbp - 0xe0], rax
1000037db:	dec	ecx
1000037dd:	mov	dword ptr [rbp - 0xd8], ecx
1000037e3:	mov	r12d, 0x6
1000037e9:	jmp	0x100003581
1000037ee:	mov	rax, qword ptr [rbp - 0xe0]
1000037f5:	movzx	edx, byte ptr [rax]
1000037f8:	shl	edx, 0x8
1000037fb:	or	dword ptr [rbp - 0x2c], edx
1000037fe:	inc	rax
100003801:	mov	qword ptr [rbp - 0xe0], rax
100003808:	jmp	0x100003824
10000380a:	mov	r12d, 0x8
100003810:	cmp	dword ptr [rbp - 0x2c], 0x0
100003814:	jle	0x100003581
10000381a:	inc	qword ptr [rbp - 0xe0]
100003821:	dec	dword ptr [rbp - 0x2c]
100003824:	dec	ecx
100003826:	mov	dword ptr [rbp - 0xd8], ecx
10000382c:	mov	r12d, 0x7
100003832:	jmp	0x100003581
100003837:	mov	r12d, 0x9
10000383d:	test	byte ptr [rbp - 0x3c], 0x8
100003841:	je	0x100003581
100003847:	mov	rax, qword ptr [rbp - 0xe0]
10000384e:	xor	r12d, r12d
100003851:	cmp	byte ptr [rax], 0x0
100003854:	sete	r12b
100003858:	or	r12d, 0x8
10000385c:	jmp	0x100003882
10000385e:	mov	r12d, 0xa
100003864:	test	byte ptr [rbp - 0x3c], 0x10
100003868:	je	0x100003581
10000386e:	mov	rax, qword ptr [rbp - 0xe0]
100003875:	cmp	byte ptr [rax], 0x1
100003878:	mov	r12d, 0x9
10000387e:	adc	r12d, 0x0
100003882:	inc	rax
100003885:	mov	qword ptr [rbp - 0xe0], rax
10000388c:	dec	ecx
10000388e:	mov	dword ptr [rbp - 0xd8], ecx
100003894:	jmp	0x100003581
100003899:	mov	eax, dword ptr [rbp - 0x3c]
10000389c:	and	eax, 0x2
10000389f:	mov	dword ptr [rbp - 0x2c], eax
1000038a2:	mov	r12d, 0xb
1000038a8:	jmp	0x100003581
1000038ad:	mov	r12d, 0xc
1000038b3:	cmp	dword ptr [rbp - 0x2c], 0x0
1000038b7:	jle	0x100003581
1000038bd:	inc	qword ptr [rbp - 0xe0]
1000038c4:	dec	dword ptr [rbp - 0x2c]
1000038c7:	dec	ecx
1000038c9:	mov	dword ptr [rbp - 0xd8], ecx
1000038cf:	mov	r12d, 0xb
1000038d5:	jmp	0x100003581
1000038da:	lea	rdi, [rbp - 0xe0]
1000038e1:	mov	esi, 0xfffffff1
1000038e6:	lea	rdx, [rip + 0x3952] ## literal pool for: "1.2.11"
1000038ed:	mov	ecx, 0x70
1000038f2:	call	0x10000659a ## symbol stub for: _inflateInit2_
1000038f7:	mov	r12d, 0xd
1000038fd:	test	eax, eax
1000038ff:	je	0x100003581
100003905:	jmp	0x100003b26
10000390a:	mov	rax, qword ptr [rbp - 0xe0]
100003911:	mov	edx, dword ptr [rax]
100003913:	cmp	rdx, qword ptr [rbp - 0x58]
100003917:	jne	0x100003b2f
10000391d:	add	ecx, -0x4
100003920:	mov	dword ptr [rbp - 0xd8], ecx
100003926:	add	rax, 0x4
10000392a:	mov	qword ptr [rbp - 0xe0], rax
100003931:	mov	r12d, 0xf
100003937:	test	r13d, r13d
10000393a:	je	0x100003581
100003940:	test	ecx, ecx
100003942:	jne	0x100003581
100003948:	jmp	0x100003aab
10000394d:	mov	rax, qword ptr [rbp - 0xe0]
100003954:	mov	edx, dword ptr [rax]
100003956:	mov	esi, dword ptr [rbp - 0x50]
100003959:	cmp	rdx, rsi
10000395c:	jne	0x100003b3b
100003962:	add	ecx, -0x4
100003965:	mov	dword ptr [rbp - 0xd8], ecx
10000396b:	add	rax, 0x4
10000396f:	mov	qword ptr [rbp - 0xe0], rax
100003976:	mov	r12d, 0x0
10000397c:	cmp	dword ptr [rbp - 0x48], 0x0
100003980:	jns	0x100003581
100003986:	jmp	0x100003b47
10000398b:	lea	eax, [rsi + 0x4]
10000398e:	cmp	eax, 0x6
100003991:	ja	0x1000039a3
100003993:	lea	rcx, [rip + 0x26e]
10000399a:	movsxd	rax, dword ptr [rcx + 4*rax]
10000399e:	add	rax, rcx
1000039a1:	jmp	rax
1000039a3:	lea	rdi, [rip + 0x3904] ## literal pool for: "unknown error from inflate(): %d"
1000039aa:	mov	r12, rsi
1000039ad:	xor	eax, eax
1000039af:	call	0x10000325e
1000039b4:	mov	rsi, r12
1000039b7:	mov	r12d, 0x10000
1000039bd:	sub	r12d, dword ptr [rbp - 0xc0]
1000039c4:	je	0x100003a14
1000039c6:	mov	qword ptr [rbp - 0x48], rsi
1000039ca:	mov	rdi, qword ptr [rbp - 0x58]
1000039ce:	mov	rsi, qword ptr [rbp - 0x60]
1000039d2:	mov	edx, r12d
1000039d5:	call	0x1000064bc ## symbol stub for: _crc32
1000039da:	mov	rdx, r12
1000039dd:	mov	qword ptr [rbp - 0x58], rax
1000039e1:	cmp	byte ptr [rip + 0x4d04], 0x0
1000039e8:	jne	0x100003a02
1000039ea:	mov	edi, dword ptr [rbp - 0x6c]
1000039ed:	mov	rsi, qword ptr [rbp - 0x60]
1000039f1:	call	0x100006648 ## symbol stub for: _write
1000039f6:	mov	rdx, r12
1000039f9:	cmp	rax, r12
1000039fc:	jne	0x100003ba7
100003a02:	add	qword ptr [rbp - 0x38], rdx
100003a06:	mov	rax, qword ptr [rbp - 0x50]
100003a0a:	add	eax, edx
100003a0c:	mov	qword ptr [rbp - 0x50], rax
100003a10:	mov	rsi, qword ptr [rbp - 0x48]
100003a14:	mov	r12d, 0xd
100003a1a:	cmp	esi, 0x1
100003a1d:	jne	0x100003a37
100003a1f:	lea	rdi, [rbp - 0xe0]
100003a26:	mov	r12, rsi
100003a29:	call	0x100006594 ## symbol stub for: _inflateEnd
100003a2e:	mov	rsi, r12
100003a31:	mov	r12d, 0xe
100003a37:	mov	rax, qword ptr [rbp - 0x60]
100003a3b:	mov	qword ptr [rbp - 0xc8], rax
100003a42:	mov	dword ptr [rbp - 0xc0], 0x10000
100003a4c:	mov	eax, esi
100003a4e:	mov	dword ptr [rbp - 0x48], esi
100003a51:	jmp	0x100003581
100003a56:	test	r12d, r12d
100003a59:	je	0x100003aa5
100003a5b:	test	r13d, r13d
100003a5e:	je	0x100003aa5
100003a60:	lea	rdi, [rip + 0x3751] ## literal pool for: "%s: unexpected end of file"
100003a67:	mov	rsi, qword ptr [rbp - 0xe8]
100003a6e:	xor	eax, eax
100003a70:	call	0x100003193
100003a75:	jmp	0x100003a9d
100003a77:	lea	rdi, [rip + 0x3869] ## literal pool for: "truncated input"
100003a7e:	xor	eax, eax
100003a80:	call	0x100003193
100003a85:	mov	qword ptr [rbp - 0x38], -0x1
100003a8d:	jmp	0x100003aab
100003a8f:	lea	rdi, [rip + 0x370d] ## literal pool for: "failed to read stdin"
100003a96:	xor	eax, eax
100003a98:	call	0x10000325e
100003a9d:	mov	qword ptr [rbp - 0x38], -0x1
100003aa5:	cmp	r12d, 0xd
100003aa9:	jb	0x100003ab7
100003aab:	lea	rdi, [rbp - 0xe0]
100003ab2:	call	0x100006594 ## symbol stub for: _inflateEnd
100003ab7:	mov	rdi, r15
100003aba:	call	0x100006540 ## symbol stub for: _free
100003abf:	mov	rdi, qword ptr [rbp - 0x60]
100003ac3:	call	0x100006540 ## symbol stub for: _free
100003ac8:	mov	rax, qword ptr [rbp - 0xf0]
100003acf:	test	rax, rax
100003ad2:	je	0x100003adb
100003ad4:	mov	rcx, qword ptr [rbp - 0x68]
100003ad8:	mov	qword ptr [rax], rcx
100003adb:	mov	rax, qword ptr [rbp - 0x38]
100003adf:	add	rsp, 0xc8
100003ae6:	pop	rbx
100003ae7:	pop	r12
100003ae9:	pop	r13
100003aeb:	pop	r14
100003aed:	pop	r15
100003aef:	pop	rbp
100003af0:	ret
100003af1:	cmp	qword ptr [rbp - 0x68], 0x0
100003af6:	jle	0x100003b8c
100003afc:	lea	rdi, [rip + 0x36d0] ## literal pool for: "%s: trailing garbage ignored"
100003b03:	mov	rsi, qword ptr [rbp - 0xe8]
100003b0a:	xor	eax, eax
100003b0c:	call	0x100003193
100003b11:	mov	dword ptr [rip + 0x4bd9], 0x2
100003b1b:	jmp	0x100003ab7
100003b1d:	lea	rdi, [rip + 0x3700] ## literal pool for: "unknown compression method"
100003b24:	jmp	0x100003b93
100003b26:	lea	rdi, [rip + 0x3719] ## literal pool for: "failed to inflateInit"
100003b2d:	jmp	0x100003b93
100003b2f:	lea	rdi, [rip + 0x37c1] ## literal pool for: "invalid compressed data--crc error"
100003b36:	jmp	0x100003a7e
100003b3b:	lea	rdi, [rip + 0x37d8] ## literal pool for: "invalid compressed data--length error"
100003b42:	jmp	0x100003a7e
100003b47:	lea	rdi, [rip + 0x37f2] ## literal pool for: "decompression error"
100003b4e:	jmp	0x100003a7e
100003b53:	lea	rdi, [rip + 0x373c] ## literal pool for: "memory allocation error"
100003b5a:	jmp	0x100003a7e
100003b5f:	lea	rdi, [rip + 0x3708] ## literal pool for: "data stream error"
100003b66:	jmp	0x100003a7e
100003b6b:	lea	rdi, [rip + 0x370e] ## literal pool for: "internal stream error"
100003b72:	jmp	0x100003a7e
100003b77:	lea	rdi, [rip + 0x36de] ## literal pool for: "Z_NEED_DICT error"
100003b7e:	jmp	0x100003a7e
100003b83:	lea	rdi, [rip + 0x3680] ## literal pool for: "input not gziped (MAGIC1)"
100003b8a:	jmp	0x100003b93
100003b8c:	lea	rdi, [rip + 0x365d] ## literal pool for: "input not gziped (MAGIC0)"
100003b93:	xor	eax, eax
100003b95:	call	0x100003193
100003b9a:	mov	qword ptr [rbp - 0x38], -0x1
100003ba2:	jmp	0x100003ab7
100003ba7:	lea	rdi, [rip + 0x3721] ## literal pool for: "error writing to output"
100003bae:	xor	eax, eax
100003bb0:	call	0x10000325e
100003bb5:	jmp	0x100003a85
100003bba:	lea	rdi, [rip + 0x35d4] ## literal pool for: "malloc failed"
100003bc1:	xor	eax, eax
100003bc3:	call	0x100003102
100003bc8:	jmp	0x100003bc4
	.byte 0xff #bad opcode
100003bcb:	jmp	[rip + 0x61fffffb]
100003bd1:	sti
	.byte 0xff #bad opcode
100003bd3:	dec	dword ptr [rsi - 0x40000005]
100003bd9:	sti
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003bdc:	in	al, dx
100003bdd:	sti
	.byte 0xff #bad opcode
100003bdf:	jmp	qword ptr [rsi]
100003be1:	cld
	.byte 0xff #bad opcode
100003be3:	inc	dword ptr [rdx - 0x4]
	.byte 0xff #bad opcode
100003be7:	jmp	[rdi - 0x4]
	.byte 0xff #bad opcode
100003beb:	call	qword ptr [rsi - 0x2e000004]
100003bf1:	cld
	.byte 0xff #bad opcode
100003bf3:	jmp	rbp
100003bf5:	cld
	.byte 0xff #bad opcode
100003bf7:	call	qword ptr [rdx]
100003bf9:	std
	.byte 0xff #bad opcode
100003bfb:	jmp	qword ptr [rbp + 0x65fffffa]
100003c01:	cli
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003c04:	jl	0x100003c00
	.byte 0xff #bad opcode
100003c07:	dec	dword ptr [rbx - 0x1]
	.byte 0xff #bad opcode
100003c0b:	call	qword ptr [rdi - 0x1]
	.byte 0xff #bad opcode
100003c0f:	jmp	qword ptr [rbx - 0x1]
	.byte 0xff #bad opcode
100003c13:	call	[rbx - 0x50000003]
100003c19:	std
	.byte 0xff #bad opcode
100003c1b:	jmp	[rdi + 0x6ffffffd]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003c23:	call	qword ptr [rbp + 0x48]
100003c26:	mov	ebp, esp
100003c28:	push	r15
100003c2a:	push	r14
100003c2c:	push	r13
100003c2e:	push	r12
100003c30:	push	rbx
100003c31:	sub	rsp, 0x68
100003c35:	mov	r15, r8
100003c38:	mov	r14, rcx
100003c3b:	mov	r12, rdx
100003c3e:	mov	dword ptr [rbp - 0x30], esi
100003c41:	mov	dword ptr [rbp - 0x34], edi
100003c44:	mov	rbx, qword ptr [rip + 0x4ab5]
100003c4b:	test	rbx, rbx
100003c4e:	jne	0x100003c64
100003c50:	mov	edi, 0x10000
100003c55:	call	0x1000065c4 ## symbol stub for: _malloc
100003c5a:	mov	rbx, rax
100003c5d:	mov	qword ptr [rip + 0x4a9c], rax
100003c64:	mov	rax, qword ptr [rip + 0x4a9d]
100003c6b:	test	rax, rax
100003c6e:	jne	0x100003c81
100003c70:	mov	edi, 0x10000
100003c75:	call	0x1000065c4 ## symbol stub for: _malloc
100003c7a:	mov	qword ptr [rip + 0x4a87], rax
100003c81:	test	rbx, rbx
100003c84:	je	0x100003ec2
100003c8a:	test	rax, rax
100003c8d:	je	0x100003ec2
100003c93:	xorps	xmm0, xmm0
100003c96:	lea	rdi, [rbp - 0x90]
100003c9d:	movups	xmmword ptr [rdi + 0x38], xmm0
100003ca1:	mov	qword ptr [rdi + 0x48], 0x0
100003ca9:	xor	esi, esi
100003cab:	xor	edx, edx
100003cad:	call	0x10000647a ## symbol stub for: _BZ2_bzDecompressInit
100003cb2:	test	eax, eax
100003cb4:	jne	0x100003ecb
100003cba:	mov	dword ptr [rbp - 0x88], r14d
100003cc1:	mov	qword ptr [rbp - 0x90], r12
100003cc8:	test	r15, r15
100003ccb:	je	0x100003cd0
100003ccd:	mov	qword ptr [r15], r14
100003cd0:	lea	r12, [rbp - 0x90]
100003cd7:	lea	rbx, [rip + 0x20e]
100003cde:	xor	r14d, r14d
100003ce1:	mov	dword ptr [rbp - 0x2c], 0x0
100003ce8:	xor	eax, eax
100003cea:	mov	qword ptr [rbp - 0x40], rax
100003cee:	xor	r13d, r13d
100003cf1:	test	r13d, r13d
100003cf4:	jne	0x100003e79
100003cfa:	mov	eax, dword ptr [rbp - 0x88]
100003d00:	or	eax, r14d
100003d03:	jne	0x100003d45
100003d05:	mov	rsi, qword ptr [rip + 0x49f4]
100003d0c:	mov	edx, 0x10000
100003d11:	mov	edi, dword ptr [rbp - 0x34]
100003d14:	call	0x1000065e8 ## symbol stub for: _read
100003d19:	test	rax, rax
100003d1c:	js	0x100003eb4
100003d22:	sete	cl
100003d25:	movzx	r14d, cl
100003d29:	mov	rcx, qword ptr [rip + 0x49d0]
100003d30:	mov	qword ptr [rbp - 0x90], rcx
100003d37:	mov	dword ptr [rbp - 0x88], eax
100003d3d:	test	r15, r15
100003d40:	je	0x100003d45
100003d42:	add	qword ptr [r15], rax
100003d45:	mov	rax, qword ptr [rip + 0x49bc]
100003d4c:	mov	qword ptr [rbp - 0x78], rax
100003d50:	mov	dword ptr [rbp - 0x70], 0x10000
100003d57:	mov	rdi, r12
100003d5a:	call	0x10000646e ## symbol stub for: _BZ2_bzDecompress
100003d5f:	mov	r13d, eax
100003d62:	lea	eax, [r13 + 0x5]
100003d66:	cmp	eax, 0x9
100003d69:	ja	0x100003dbf
100003d6b:	movsxd	rax, dword ptr [rbx + 4*rax]
100003d6f:	add	rax, rbx
100003d72:	jmp	rax
100003d74:	lea	rdi, [rip + 0x3627] ## literal pool for: "bzip2 magic number error"
100003d7b:	xor	eax, eax
100003d7d:	call	0x100003193
100003d82:	mov	r13d, 0xfffffffb
100003d88:	jmp	0x100003cf1
100003d8d:	lea	rdi, [rip + 0x35f3] ## literal pool for: "bzip2 data integrity error"
100003d94:	xor	eax, eax
100003d96:	call	0x100003193
100003d9b:	mov	r13d, 0xfffffffc
100003da1:	jmp	0x100003cf1
100003da6:	lea	rdi, [rip + 0x360e] ## literal pool for: "bzip2 out of memory"
100003dad:	xor	eax, eax
100003daf:	call	0x100003193
100003db4:	mov	r13d, 0xfffffffd
100003dba:	jmp	0x100003cf1
100003dbf:	lea	rdi, [rip + 0x3609] ## literal pool for: "unknown bzip2 error: %d"
100003dc6:	mov	esi, r13d
100003dc9:	xor	eax, eax
100003dcb:	call	0x100003193
100003dd0:	jmp	0x100003cf1
100003dd5:	test	r14d, r14d
100003dd8:	je	0x100003def
100003dda:	test	r13d, r13d
100003ddd:	jne	0x100003def
100003ddf:	mov	r13d, 0x4
100003de5:	cmp	dword ptr [rbp - 0x2c], 0x1
100003de9:	jne	0x100003ed9
100003def:	cmp	byte ptr [rip + 0x48f6], 0x0
100003df6:	jne	0x100003e25
100003df8:	mov	eax, dword ptr [rbp - 0x70]
100003dfb:	cmp	eax, 0x10000
100003e00:	je	0x100003e25
100003e02:	mov	rsi, qword ptr [rip + 0x48ff]
100003e09:	mov	edx, 0x10000
100003e0e:	sub	edx, eax
100003e10:	mov	edi, dword ptr [rbp - 0x30]
100003e13:	call	0x100006648 ## symbol stub for: _write
100003e18:	test	rax, rax
100003e1b:	js	0x100003ee2
100003e21:	add	qword ptr [rbp - 0x40], rax
100003e25:	mov	dword ptr [rbp - 0x2c], 0x0
100003e2c:	test	r14d, r14d
100003e2f:	jne	0x100003cf1
100003e35:	mov	dword ptr [rbp - 0x2c], 0x0
100003e3c:	cmp	r13d, 0x4
100003e40:	jne	0x100003cf1
100003e46:	mov	rdi, r12
100003e49:	call	0x100006474 ## symbol stub for: _BZ2_bzDecompressEnd
100003e4e:	test	eax, eax
100003e50:	jne	0x100003e70
100003e52:	xor	r13d, r13d
100003e55:	mov	rdi, r12
100003e58:	xor	esi, esi
100003e5a:	xor	edx, edx
100003e5c:	call	0x10000647a ## symbol stub for: _BZ2_bzDecompressInit
100003e61:	mov	dword ptr [rbp - 0x2c], 0x1
100003e68:	test	eax, eax
100003e6a:	je	0x100003cf1
100003e70:	lea	rdi, [rip + 0x3502] ## literal pool for: "bzip2 re-init"
100003e77:	jmp	0x100003ed2
100003e79:	cmp	r13d, 0x4
100003e7d:	jne	0x100003e9e
100003e7f:	lea	rdi, [rbp - 0x90]
100003e86:	call	0x100006474 ## symbol stub for: _BZ2_bzDecompressEnd
100003e8b:	mov	ecx, eax
100003e8d:	xor	eax, eax
100003e8f:	cmp	ecx, 0x1
100003e92:	sbb	rax, rax
100003e95:	not	rax
100003e98:	or	rax, qword ptr [rbp - 0x40]
100003e9c:	jmp	0x100003ea5
100003e9e:	mov	rax, -0x1
100003ea5:	add	rsp, 0x68
100003ea9:	pop	rbx
100003eaa:	pop	r12
100003eac:	pop	r13
100003eae:	pop	r14
100003eb0:	pop	r15
100003eb2:	pop	rbp
100003eb3:	ret
100003eb4:	lea	rdi, [rip + 0x34a4] ## literal pool for: "read"
100003ebb:	xor	eax, eax
100003ebd:	call	0x100003102
100003ec2:	lea	rdi, [rip + 0x320b] ## literal pool for: "malloc"
100003ec9:	jmp	0x100003ebb
100003ecb:	lea	rdi, [rip + 0x3482] ## literal pool for: "bzip2 init"
100003ed2:	xor	eax, eax
100003ed4:	call	0x100004973
100003ed9:	lea	rdi, [rip + 0x3484] ## literal pool for: "truncated file"
100003ee0:	jmp	0x100003ed2
100003ee2:	lea	rdi, [rip + 0x348a] ## literal pool for: "write"
100003ee9:	jmp	0x100003ebb
100003eeb:	nop
100003eec:	mov	dh, bh
	.byte 0xff #bad opcode
100003eef:	jmp	qword ptr [rcx - 0x45000002]
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100003ef7:	call	rbx
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100003efb:	call	rbx
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003f00:	jmp	0xd4003f03
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100003f07:	call	rbx
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100003f0b:	call	rbx
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100003f10:	jmp	0x156003f13
100003f15:	mov	rbp, rsp
100003f18:	push	r14
100003f1a:	push	rbx
100003f1b:	mov	r14d, edi
100003f1e:	mov	edi, 0x1
100003f23:	mov	esi, 0xa8820
100003f28:	call	0x1000064aa ## symbol stub for: _calloc
100003f2d:	test	rax, rax
100003f30:	je	0x100003f9d
100003f32:	mov	rbx, rax
100003f35:	mov	qword ptr [rax + 0xa8788], 0x10d89
100003f40:	mov	dword ptr [rax + 0xa8798], 0x80
100003f4a:	mov	qword ptr [rax + 0xa87a8], 0x2710
100003f55:	mov	qword ptr [rax + 0xa87b8], 0x1
100003f60:	lea	rsi, [rip + 0x3480] ## literal pool for: "r"
100003f67:	mov	edi, r14d
100003f6a:	call	0x10000650a ## symbol stub for: _fdopen
100003f6f:	mov	qword ptr [rbx], rax
100003f72:	test	rax, rax
100003f75:	je	0x100003f95
100003f77:	lea	rsi, [rip + 0xa86]
100003f7e:	lea	r8, [rip + 0xfcf]
100003f85:	mov	rdi, rbx
100003f88:	xor	edx, edx
100003f8a:	xor	ecx, ecx
100003f8c:	pop	rbx
100003f8d:	pop	r14
100003f8f:	pop	rbp
100003f90:	jmp	0x100006564 ## symbol stub for: _funopen
100003f95:	mov	rdi, rbx
100003f98:	call	0x100006540 ## symbol stub for: _free
100003f9d:	xor	eax, eax
100003f9f:	pop	rbx
100003fa0:	pop	r14
100003fa2:	pop	rbp
100003fa3:	ret
100003fa4:	push	rbp
100003fa5:	mov	rbp, rsp
100003fa8:	push	r15
100003faa:	push	r14
100003fac:	push	r13
100003fae:	push	r12
100003fb0:	push	rbx
100003fb1:	push	rax
100003fb2:	mov	qword ptr [rbp - 0x30], r8
100003fb6:	mov	rbx, rcx
100003fb9:	mov	r14, rdx
100003fbc:	mov	r15, rsi
100003fbf:	mov	r12, rdi
100003fc2:	mov	edi, 0x10000
100003fc7:	call	0x1000065c4 ## symbol stub for: _malloc
100003fcc:	test	rax, rax
100003fcf:	je	0x10000404b
100003fd1:	mov	r13, rax
100003fd4:	mov	qword ptr [rip + 0x4735], rbx
100003fdb:	test	rbx, rbx
100003fde:	cmove	r14, rbx
100003fe2:	mov	qword ptr [rip + 0x472f], r14
100003fe9:	mov	esi, 0x1
100003fee:	mov	edx, 0x10000
100003ff3:	mov	rdi, rax
100003ff6:	mov	rcx, r12
100003ff9:	call	0x10000653a ## symbol stub for: _fread
100003ffe:	test	rax, rax
100004001:	je	0x100004054
100004003:	mov	r14, rax
100004006:	xor	ebx, ebx
100004008:	cmp	byte ptr [rip + 0x46dd], 0x0
10000400f:	jne	0x100004029
100004011:	mov	esi, 0x1
100004016:	mov	rdi, r13
100004019:	mov	rdx, r14
10000401c:	mov	rcx, r15
10000401f:	call	0x100006570 ## symbol stub for: _fwrite
100004024:	cmp	rax, r14
100004027:	jne	0x10000406b
100004029:	add	rbx, r14
10000402c:	mov	esi, 0x1
100004031:	mov	edx, 0x10000
100004036:	mov	rdi, r13
100004039:	mov	rcx, r12
10000403c:	call	0x10000653a ## symbol stub for: _fread
100004041:	mov	r14, rax
100004044:	test	rax, rax
100004047:	jne	0x100004008
100004049:	jmp	0x100004056
10000404b:	mov	rbx, -0x1
100004052:	jmp	0x10000407a
100004054:	xor	ebx, ebx
100004056:	mov	rcx, qword ptr [rbp - 0x30]
10000405a:	test	rcx, rcx
10000405d:	je	0x100004072
10000405f:	mov	rax, qword ptr [rip + 0x46ba]
100004066:	mov	qword ptr [rcx], rax
100004069:	jmp	0x100004072
10000406b:	mov	rbx, -0x1
100004072:	mov	rdi, r13
100004075:	call	0x100006540 ## symbol stub for: _free
10000407a:	mov	rax, rbx
10000407d:	add	rsp, 0x8
100004081:	pop	rbx
100004082:	pop	r12
100004084:	pop	r13
100004086:	pop	r14
100004088:	pop	r15
10000408a:	pop	rbp
10000408b:	ret
10000408c:	push	rbp
10000408d:	mov	rbp, rsp
100004090:	push	r15
100004092:	push	r14
100004094:	push	r13
100004096:	push	r12
100004098:	push	rbx
100004099:	sub	rsp, 0x98
1000040a0:	mov	qword ptr [rbp - 0x30], r8
1000040a4:	mov	rbx, rcx
1000040a7:	mov	r12, rdx
1000040aa:	mov	r13d, esi
1000040ad:	call	0x1000064da ## symbol stub for: _dup
1000040b2:	cmp	eax, -0x1
1000040b5:	je	0x1000044d3
1000040bb:	mov	r14d, eax
1000040be:	mov	edi, r13d
1000040c1:	call	0x1000064da ## symbol stub for: _dup
1000040c6:	cmp	eax, -0x1
1000040c9:	je	0x1000044d3
1000040cf:	mov	r13d, eax
1000040d2:	test	rbx, rbx
1000040d5:	je	0x1000040eb
1000040d7:	lea	rdi, [rbp - 0x47]
1000040db:	mov	ecx, 0x7
1000040e0:	mov	rsi, r12
1000040e3:	mov	rdx, rbx
1000040e6:	call	0x100006486 ## symbol stub for: ___memcpy_chk
1000040eb:	lea	rsi, [rbx + rbp]
1000040ef:	add	rsi, -0x47
1000040f3:	mov	edx, 0x7
1000040f8:	sub	rdx, rbx
1000040fb:	mov	edi, r14d
1000040fe:	call	0x1000065e8 ## symbol stub for: _read
100004103:	test	rax, rax
100004106:	js	0x1000044dc
10000410c:	mov	rax, qword ptr [rbp - 0x30]
100004110:	test	rax, rax
100004113:	je	0x100004119
100004115:	add	qword ptr [rax], 0x7
100004119:	mov	qword ptr [rbp - 0x78], 0x0
100004121:	xor	eax, eax
100004123:	xor	ecx, ecx
100004125:	mov	rdx, rcx
100004128:	shl	rdx, 0x8
10000412c:	movzx	ecx, byte ptr [rbp + rax - 0x45]
100004131:	or	rcx, rdx
100004134:	inc	rax
100004137:	cmp	rax, 0x4
10000413b:	jne	0x100004125
10000413d:	mov	qword ptr [rbp - 0x78], rcx
100004141:	movzx	eax, byte ptr [rbp - 0x41]
100004145:	mov	dword ptr [rbp - 0xa4], eax
10000414b:	mov	qword ptr [rbp - 0x38], rax
10000414f:	dec	eax
100004151:	cmp	al, 0x18
100004153:	jae	0x1000044e5
100004159:	lea	rsi, [rip + 0x3287] ## literal pool for: "r"
100004160:	mov	edi, r14d
100004163:	call	0x10000650a ## symbol stub for: _fdopen
100004168:	mov	qword ptr [rbp - 0x70], rax
10000416c:	test	rax, rax
10000416f:	je	0x1000044ee
100004175:	mov	r12, rax
100004178:	lea	rsi, [rip + 0x32c5] ## literal pool for: "w"
10000417f:	mov	edi, r13d
100004182:	call	0x10000650a ## symbol stub for: _fdopen
100004187:	mov	qword ptr [rbp - 0x68], rax
10000418b:	test	rax, rax
10000418e:	je	0x1000044f7
100004194:	mov	esi, 0x4
100004199:	mov	r13, qword ptr [rbp - 0x38]
10000419d:	mov	rdi, r13
1000041a0:	call	0x1000064aa ## symbol stub for: _calloc
1000041a5:	mov	r14, rax
1000041a8:	mov	qword ptr [rbp - 0x98], rax
1000041af:	mov	esi, 0x4
1000041b4:	mov	rdi, r13
1000041b7:	call	0x1000064aa ## symbol stub for: _calloc
1000041bc:	mov	r15, rax
1000041bf:	mov	qword ptr [rbp - 0xa0], rax
1000041c6:	mov	esi, 0x8
1000041cb:	mov	rdi, r13
1000041ce:	call	0x1000064aa ## symbol stub for: _calloc
1000041d3:	mov	qword ptr [rbp - 0x40], rax
1000041d7:	mov	qword ptr [rbp - 0x80], rax
1000041db:	test	r14, r14
1000041de:	je	0x1000044ca
1000041e4:	test	r15, r15
1000041e7:	je	0x1000044ca
1000041ed:	cmp	qword ptr [rbp - 0x40], 0x0
1000041f2:	je	0x1000044ca
1000041f8:	xor	ebx, ebx
1000041fa:	dec	r13
1000041fd:	mov	dword ptr [rbp - 0xa4], r13d
100004204:	mov	dword ptr [rbp - 0xa8], 0x1
10000420e:	mov	eax, 0x0
100004213:	mov	qword ptr [rbp - 0x58], r13
100004217:	cmovns	rax, r13
10000421b:	mov	qword ptr [rbp - 0x60], rax
10000421f:	lea	r14, [rax + 0x1]
100004223:	mov	r13d, 0x1
100004229:	mov	rdi, r12
10000422c:	call	0x100006522 ## symbol stub for: _fgetc
100004231:	cmp	eax, -0x1
100004234:	je	0x1000044bc
10000423a:	movzx	eax, al
10000423d:	mov	dword ptr [r15 + 4*rbx], eax
100004241:	add	r13d, eax
100004244:	inc	rbx
100004247:	cmp	r14, rbx
10000424a:	jne	0x100004229
10000424c:	mov	dword ptr [rbp - 0xa8], r13d
100004253:	mov	rax, qword ptr [rbp - 0x30]
100004257:	test	rax, rax
10000425a:	je	0x100004263
10000425c:	mov	rcx, qword ptr [rbp - 0x58]
100004260:	add	qword ptr [rax], rcx
100004263:	cmp	r13d, 0x101
10000426a:	jae	0x100004500
100004270:	mov	esi, r13d
100004273:	mov	edi, 0x1
100004278:	call	0x1000064aa ## symbol stub for: _calloc
10000427d:	mov	qword ptr [rbp - 0x90], rax
100004284:	mov	qword ptr [rbp - 0x88], rax
10000428b:	test	rax, rax
10000428e:	je	0x1000044ca
100004294:	mov	r14, rax
100004297:	mov	rcx, qword ptr [rbp - 0x38]
10000429b:	mov	eax, dword ptr [r15 + 4*rcx - 0x4]
1000042a0:	inc	eax
1000042a2:	mov	dword ptr [r15 + 4*rcx - 0x4], eax
1000042a7:	test	cl, cl
1000042a9:	je	0x100004316
1000042ab:	xor	r13d, r13d
1000042ae:	mov	rcx, qword ptr [rbp - 0x30]
1000042b2:	mov	rax, qword ptr [rbp - 0x40]
1000042b6:	mov	qword ptr [rax + 8*r13], r14
1000042ba:	mov	eax, dword ptr [r15 + 4*r13]
1000042be:	test	eax, eax
1000042c0:	jle	0x1000042eb
1000042c2:	xor	ebx, ebx
1000042c4:	mov	rdi, r12
1000042c7:	call	0x100006522 ## symbol stub for: _fgetc
1000042cc:	cmp	eax, -0x1
1000042cf:	je	0x1000044a5
1000042d5:	mov	byte ptr [r14 + rbx], al
1000042d9:	mov	eax, dword ptr [r15 + 4*r13]
1000042dd:	inc	rbx
1000042e0:	cmp	ebx, eax
1000042e2:	jl	0x1000042c4
1000042e4:	add	r14, rbx
1000042e7:	mov	rcx, qword ptr [rbp - 0x30]
1000042eb:	test	rcx, rcx
1000042ee:	je	0x1000042f5
1000042f0:	cdqe
1000042f2:	add	qword ptr [rcx], rax
1000042f5:	lea	rax, [r13 + 0x1]
1000042f9:	cmp	r13, qword ptr [rbp - 0x60]
1000042fd:	mov	r13, rax
100004300:	jne	0x1000042b2
100004302:	mov	qword ptr [rbp - 0x88], r14
100004309:	mov	rcx, qword ptr [rbp - 0x38]
10000430d:	mov	eax, dword ptr [r15 + 4*rcx - 0x4]
100004312:	mov	r12, qword ptr [rbp - 0x70]
100004316:	inc	eax
100004318:	mov	dword ptr [r15 + 4*rcx - 0x4], eax
10000431d:	lea	rdi, [rbp - 0xa8]
100004324:	xor	r14d, r14d
100004327:	xor	esi, esi
100004329:	call	0x100004f61
10000432e:	mov	rdi, r12
100004331:	call	0x100006522 ## symbol stub for: _fgetc
100004336:	cmp	eax, -0x1
100004339:	je	0x100004442
10000433f:	mov	r15d, eax
100004342:	mov	rax, qword ptr [rbp - 0x98]
100004349:	mov	qword ptr [rbp - 0x40], rax
10000434d:	mov	rax, qword ptr [rbp - 0xa0]
100004354:	mov	qword ptr [rbp - 0x60], rax
100004358:	mov	rax, qword ptr [rbp - 0x80]
10000435c:	mov	qword ptr [rbp - 0x58], rax
100004360:	mov	rax, qword ptr [rbp - 0x88]
100004367:	mov	qword ptr [rbp - 0xc0], rax
10000436e:	mov	rax, qword ptr [rbp - 0x78]
100004372:	mov	qword ptr [rbp - 0x50], rax
100004376:	mov	rax, qword ptr [rbp - 0x68]
10000437a:	mov	qword ptr [rbp - 0xb8], rax
100004381:	mov	eax, dword ptr [rbp - 0xa4]
100004387:	mov	dword ptr [rbp - 0x38], eax
10000438a:	mov	rax, qword ptr [rbp - 0x70]
10000438e:	mov	qword ptr [rbp - 0xb0], rax
100004395:	xor	ebx, ebx
100004397:	xor	r12d, r12d
10000439a:	mov	rax, qword ptr [rbp - 0x30]
10000439e:	test	rax, rax
1000043a1:	je	0x1000043a6
1000043a3:	inc	qword ptr [rax]
1000043a6:	mov	r13d, 0x7
1000043ac:	mov	eax, r15d
1000043af:	mov	ecx, r13d
1000043b2:	shr	eax, cl
1000043b4:	and	eax, 0x1
1000043b7:	lea	r12d, [rax + 2*r12]
1000043bb:	movsxd	rax, r14d
1000043be:	mov	ecx, r12d
1000043c1:	mov	rdx, qword ptr [rbp - 0x40]
1000043c5:	sub	ecx, dword ptr [rdx + 4*rax]
1000043c8:	jge	0x1000043d9
1000043ca:	cmp	r14d, dword ptr [rbp - 0x38]
1000043ce:	jge	0x1000044b3
1000043d4:	inc	r14d
1000043d7:	jmp	0x100004418
1000043d9:	mov	rdx, qword ptr [rbp - 0x60]
1000043dd:	cmp	ecx, dword ptr [rdx + 4*rax]
1000043e0:	jg	0x1000044b3
1000043e6:	movsxd	rcx, ecx
1000043e9:	mov	rdx, qword ptr [rbp - 0x58]
1000043ed:	add	rcx, qword ptr [rdx + 8*rax]
1000043f1:	cmp	rcx, qword ptr [rbp - 0xc0]
1000043f8:	jne	0x100004400
1000043fa:	cmp	rbx, qword ptr [rbp - 0x50]
1000043fe:	je	0x10000443c
100004400:	movsx	edi, byte ptr [rcx]
100004403:	mov	rsi, qword ptr [rbp - 0xb8]
10000440a:	call	0x100006534 ## symbol stub for: _fputc
10000440f:	inc	rbx
100004412:	xor	r12d, r12d
100004415:	xor	r14d, r14d
100004418:	add	r13d, -0x1
10000441c:	jb	0x1000043ac
10000441e:	mov	rdi, qword ptr [rbp - 0xb0]
100004425:	call	0x100006522 ## symbol stub for: _fgetc
10000442a:	mov	r15d, eax
10000442d:	cmp	eax, -0x1
100004430:	jne	0x10000439a
100004436:	mov	r14, qword ptr [rbp - 0x50]
10000443a:	jmp	0x100004448
10000443c:	mov	r14, qword ptr [rbp - 0x50]
100004440:	jmp	0x100004451
100004442:	mov	r14, qword ptr [rbp - 0x78]
100004446:	xor	ebx, ebx
100004448:	cmp	rbx, r14
10000444b:	jne	0x100004509
100004451:	mov	rdi, qword ptr [rbp - 0xa0]
100004458:	call	0x100006540 ## symbol stub for: _free
10000445d:	mov	rdi, qword ptr [rbp - 0x98]
100004464:	call	0x100006540 ## symbol stub for: _free
100004469:	mov	rdi, qword ptr [rbp - 0x90]
100004470:	call	0x100006540 ## symbol stub for: _free
100004475:	mov	rdi, qword ptr [rbp - 0x80]
100004479:	call	0x100006540 ## symbol stub for: _free
10000447e:	mov	rdi, qword ptr [rbp - 0x70]
100004482:	call	0x1000064fe ## symbol stub for: _fclose
100004487:	mov	rdi, qword ptr [rbp - 0x68]
10000448b:	call	0x1000064fe ## symbol stub for: _fclose
100004490:	mov	rax, r14
100004493:	add	rsp, 0x98
10000449a:	pop	rbx
10000449b:	pop	r12
10000449d:	pop	r13
10000449f:	pop	r14
1000044a1:	pop	r15
1000044a3:	pop	rbp
1000044a4:	ret
1000044a5:	lea	rdi, [rip + 0x2fee] ## literal pool for: "Symbol table truncated"
1000044ac:	xor	eax, eax
1000044ae:	call	0x100004973
1000044b3:	lea	rdi, [rip + 0x2ff7] ## literal pool for: "File corrupt"
1000044ba:	jmp	0x1000044ac
1000044bc:	lea	rdi, [rip + 0x2fa9] ## literal pool for: "File appears to be truncated"
1000044c3:	xor	eax, eax
1000044c5:	call	0x100003102
1000044ca:	lea	rdi, [rip + 0x2f94] ## literal pool for: "calloc"
1000044d1:	jmp	0x1000044c3
1000044d3:	lea	rdi, [rip + 0x2f0f] ## literal pool for: "dup"
1000044da:	jmp	0x1000044c3
1000044dc:	lea	rdi, [rip + 0x2f0a] ## literal pool for: "Error reading pack header"
1000044e3:	jmp	0x1000044c3
1000044e5:	lea	rdi, [rip + 0x2f1b] ## literal pool for: "Huffman tree has insane levels"
1000044ec:	jmp	0x1000044ac
1000044ee:	lea	rdi, [rip + 0x2f31] ## literal pool for: "Can not fdopen() input stream"
1000044f5:	jmp	0x1000044c3
1000044f7:	lea	rdi, [rip + 0x2f48] ## literal pool for: "Can not fdopen() output stream"
1000044fe:	jmp	0x1000044c3
100004500:	lea	rdi, [rip + 0x2f82] ## literal pool for: "Bad symbol table"
100004507:	jmp	0x1000044ac
100004509:	lea	rdi, [rip + 0x2fae] ## literal pool for: "Premature EOF"
100004510:	jmp	0x1000044ac
100004512:	push	rbp
100004513:	mov	rbp, rsp
100004516:	push	r15
100004518:	push	r14
10000451a:	push	r13
10000451c:	push	r12
10000451e:	push	rbx
10000451f:	sub	rsp, 0x8b8
100004526:	mov	r14, rcx
100004529:	mov	dword ptr [rbp - 0x838], esi
10000452f:	mov	r12d, edi
100004532:	mov	rax, qword ptr [rip + 0x3acf] ## literal pool symbol address: ___stack_chk_guard
100004539:	mov	rax, qword ptr [rax]
10000453c:	mov	qword ptr [rbp - 0x30], rax
100004540:	xorps	xmm0, xmm0
100004543:	movups	xmmword ptr [rbp - 0x860], xmm0
10000454a:	movups	xmmword ptr [rbp - 0x870], xmm0
100004551:	movups	xmmword ptr [rbp - 0x880], xmm0
100004558:	movups	xmmword ptr [rbp - 0x890], xmm0
10000455f:	movups	xmmword ptr [rbp - 0x8a0], xmm0
100004566:	movups	xmmword ptr [rbp - 0x8b0], xmm0
10000456d:	movups	xmmword ptr [rbp - 0x8c0], xmm0
100004574:	mov	qword ptr [rbp - 0x850], 0x0
10000457f:	test	r8, r8
100004582:	lea	rbx, [rbp - 0x8d8]
100004589:	cmovne	rbx, r8
10000458d:	lea	rdi, [rbp - 0x430]
100004594:	mov	qword ptr [rbp - 0x8d0], rdi
10000459b:	mov	r15d, 0x400
1000045a1:	mov	ecx, 0x400
1000045a6:	mov	rsi, rdx
1000045a9:	mov	rdx, r14
1000045ac:	call	0x100006486 ## symbol stub for: ___memcpy_chk
1000045b1:	lea	rsi, [r14 + rbp]
1000045b5:	add	rsi, -0x430
1000045bc:	sub	r15, r14
1000045bf:	mov	dword ptr [rbp - 0x834], r12d
1000045c6:	mov	edi, r12d
1000045c9:	mov	rdx, r15
1000045cc:	call	0x1000065e8 ## symbol stub for: _read
1000045d1:	mov	qword ptr [rbp - 0x8c8], rax
1000045d8:	cmp	rax, -0x1
1000045dc:	je	0x100004788
1000045e2:	add	rax, r14
1000045e5:	lea	rdi, [rbp - 0x8d0]
1000045ec:	mov	qword ptr [rdi + 0x8], rax
1000045f0:	mov	qword ptr [rbx], rax
1000045f3:	mov	rsi, -0x1
1000045fa:	mov	edx, 0xa
1000045ff:	call	0x1000065be ## symbol stub for: _lzma_stream_decoder
100004604:	test	eax, eax
100004606:	jne	0x1000047d8
10000460c:	mov	qword ptr [rbp - 0x848], rbx
100004613:	xorps	xmm0, xmm0
100004616:	lea	rdi, [rbp - 0x8d0]
10000461d:	movups	xmmword ptr [rdi + 0x18], xmm0
100004621:	xor	r13d, r13d
100004624:	xor	esi, esi
100004626:	call	0x1000065b2 ## symbol stub for: _lzma_code
10000462b:	test	eax, eax
10000462d:	mov	r15d, dword ptr [rbp - 0x834]
100004634:	jne	0x1000047e1
10000463a:	lea	rax, [rbp - 0x830]
100004641:	lea	r14, [rbp - 0x8d0]
100004648:	mov	qword ptr [r14 + 0x18], rax
10000464c:	mov	qword ptr [r14 + 0x20], 0x400
100004654:	xor	ebx, ebx
100004656:	mov	qword ptr [rbp - 0x840], rbx
10000465d:	mov	ebx, r13d
100004660:	cmp	qword ptr [rbp - 0x8c8], 0x0
100004668:	jne	0x1000046ab
10000466a:	lea	rsi, [rbp - 0x430]
100004671:	mov	qword ptr [rbp - 0x8d0], rsi
100004678:	mov	edx, 0x400
10000467d:	mov	edi, r15d
100004680:	call	0x1000065e8 ## symbol stub for: _read
100004685:	mov	qword ptr [rbp - 0x8c8], rax
10000468c:	mov	r13d, 0x3
100004692:	test	rax, rax
100004695:	je	0x1000046ae
100004697:	cmp	rax, -0x1
10000469b:	je	0x100004788
1000046a1:	mov	rcx, qword ptr [rbp - 0x848]
1000046a8:	add	qword ptr [rcx], rax
1000046ab:	mov	r13d, ebx
1000046ae:	mov	rdi, r14
1000046b1:	mov	esi, r13d
1000046b4:	call	0x1000065b2 ## symbol stub for: _lzma_code
1000046b9:	mov	r12d, eax
1000046bc:	mov	rax, qword ptr [rbp - 0x8b0]
1000046c3:	test	r12d, r12d
1000046c6:	jne	0x1000046d0
1000046c8:	mov	ebx, r13d
1000046cb:	test	rax, rax
1000046ce:	jne	0x100004660
1000046d0:	mov	r15d, 0x400
1000046d6:	sub	r15, rax
1000046d9:	mov	edi, dword ptr [rbp - 0x838]
1000046df:	lea	rsi, [rbp - 0x830]
1000046e6:	mov	rdx, r15
1000046e9:	call	0x100006648 ## symbol stub for: _write
1000046ee:	cmp	rax, r15
1000046f1:	jne	0x100004796
1000046f7:	mov	rbx, qword ptr [rbp - 0x840]
1000046fe:	add	rbx, r15
100004701:	lea	rax, [rbp - 0x830]
100004708:	mov	qword ptr [rbp - 0x8b8], rax
10000470f:	mov	qword ptr [rbp - 0x8b0], 0x400
10000471a:	test	r12d, r12d
10000471d:	mov	r15d, dword ptr [rbp - 0x834]
100004724:	je	0x100004656
10000472a:	cmp	r12d, 0x1
10000472e:	jne	0x10000479f
100004730:	cmp	qword ptr [rbp - 0x8c8], 0x0
100004738:	jne	0x1000047cf
10000473e:	lea	rsi, [rbp - 0x430]
100004745:	mov	edx, 0x1
10000474a:	mov	edi, r15d
10000474d:	call	0x1000065e8 ## symbol stub for: _read
100004752:	test	rax, rax
100004755:	jne	0x1000047cf
100004757:	lea	rdi, [rbp - 0x8d0]
10000475e:	call	0x1000065b8 ## symbol stub for: _lzma_end
100004763:	mov	rax, qword ptr [rip + 0x389e] ## literal pool symbol address: ___stack_chk_guard
10000476a:	mov	rax, qword ptr [rax]
10000476d:	cmp	rax, qword ptr [rbp - 0x30]
100004771:	jne	0x1000047ec
100004773:	mov	rax, rbx
100004776:	add	rsp, 0x8b8
10000477d:	pop	rbx
10000477e:	pop	r12
100004780:	pop	r13
100004782:	pop	r14
100004784:	pop	r15
100004786:	pop	rbp
100004787:	ret
100004788:	lea	rdi, [rip + 0x2d3d] ## literal pool for: "read failed"
10000478f:	xor	eax, eax
100004791:	call	0x100003102
100004796:	lea	rdi, [rip + 0x2d71] ## literal pool for: "write failed"
10000479d:	jmp	0x10000478f
10000479f:	lea	eax, [r12 - 0x5]
1000047a4:	cmp	eax, 0x5
1000047a7:	ja	0x1000047f1
1000047a9:	lea	rsi, [rip + 0x2d6b] ## literal pool for: "File format not recognized"
1000047b0:	lea	rcx, [rip + 0x75]
1000047b7:	movsxd	rax, dword ptr [rcx + 4*rax]
1000047bb:	add	rax, rcx
1000047be:	jmp	rax
1000047c0:	mov	edi, 0xc
1000047c5:	call	0x10000660c ## symbol stub for: _strerror
1000047ca:	mov	rsi, rax
1000047cd:	jmp	0x10000481b
1000047cf:	lea	rsi, [rip + 0x2d80] ## literal pool for: "File is corrupt"
1000047d6:	jmp	0x10000481b
1000047d8:	lea	rdi, [rip + 0x2cf9] ## literal pool for: "Can't initialize decoder (%d)"
1000047df:	jmp	0x1000047e8
1000047e1:	lea	rdi, [rip + 0x2d0e] ## literal pool for: "Can't read headers (%d)"
1000047e8:	mov	esi, eax
1000047ea:	jmp	0x1000047fb
1000047ec:	call	0x100006492 ## symbol stub for: ___stack_chk_fail
1000047f1:	lea	rdi, [rip + 0x2d9b] ## literal pool for: "Unknown error (%d)"
1000047f8:	mov	esi, r12d
1000047fb:	xor	eax, eax
1000047fd:	call	0x100004973
100004802:	lea	rsi, [rip + 0x2d75] ## literal pool for: "Reached memory limit"
100004809:	jmp	0x10000481b
10000480b:	lea	rsi, [rip + 0x2d24] ## literal pool for: "Unsupported compression options"
100004812:	jmp	0x10000481b
100004814:	lea	rsi, [rip + 0x2d4b] ## literal pool for: "Unexpected end of input"
10000481b:	lea	rdi, [rip + 0x2d84] ## literal pool for: "%s"
100004822:	xor	eax, eax
100004824:	call	0x100004973
100004829:	nop	dword ptr [rax]
10000482c:	xchg	eax, esp
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000482f:	call	rsi
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100004834:	out	dx, eax
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xdf #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000483b:	jmp	qword ptr [rbx - 0x17000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100004843:	call	qword ptr [rbp + 0x48]
100004846:	mov	ebp, esp
100004848:	push	r15
10000484a:	push	r14
10000484c:	push	r13
10000484e:	push	r12
100004850:	push	rbx
100004851:	push	rax
100004852:	mov	r14, rcx
100004855:	mov	r15, rdx
100004858:	mov	r12, rsi
10000485b:	test	rdi, rdi
10000485e:	je	0x10000489c
100004860:	mov	rbx, rdi
100004863:	mov	rax, qword ptr [rip + 0x37a6] ## literal pool symbol address: ___stderrp
10000486a:	mov	r13, qword ptr [rax]
10000486d:	call	0x100006612 ## symbol stub for: _strlen
100004872:	cmp	rax, 0x7
100004876:	lea	rax, [rip + 0x2d34] ## literal pool for: "\t\t"
10000487d:	lea	rcx, [rip + 0x2d30] ## literal pool for: "\t"
100004884:	cmovb	rcx, rax
100004888:	lea	rsi, [rip + 0x2d1a] ## literal pool for: "%s:%s  "
10000488f:	mov	rdi, r13
100004892:	mov	rdx, rbx
100004895:	xor	eax, eax
100004897:	call	0x10000652e ## symbol stub for: _fprintf
10000489c:	mov	rbx, qword ptr [rip + 0x376d] ## literal pool symbol address: ___stderrp
1000048a3:	mov	rdx, qword ptr [rbx]
1000048a6:	mov	rdi, r15
1000048a9:	mov	rsi, r14
1000048ac:	call	0x100004fb3
1000048b1:	test	r12, r12
1000048b4:	je	0x1000048ca
1000048b6:	mov	rdi, qword ptr [rbx]
1000048b9:	lea	rsi, [rip + 0x2cf6] ## literal pool for: " -- replaced with %s"
1000048c0:	mov	rdx, r12
1000048c3:	xor	eax, eax
1000048c5:	call	0x10000652e ## symbol stub for: _fprintf
1000048ca:	mov	rsi, qword ptr [rbx]
1000048cd:	mov	edi, 0xa
1000048d2:	call	0x100006534 ## symbol stub for: _fputc
1000048d7:	mov	rdi, qword ptr [rbx]
1000048da:	add	rsp, 0x8
1000048de:	pop	rbx
1000048df:	pop	r12
1000048e1:	pop	r13
1000048e3:	pop	r14
1000048e5:	pop	r15
1000048e7:	pop	rbp
1000048e8:	jmp	0x100006516 ## symbol stub for: _fflush
1000048ed:	push	rbp
1000048ee:	mov	rbp, rsp
1000048f1:	push	r15
1000048f3:	push	r14
1000048f5:	push	r12
1000048f7:	push	rbx
1000048f8:	mov	ebx, esi
1000048fa:	mov	r14, rdi
1000048fd:	mov	eax, dword ptr [rip + 0x3df1]
100004903:	or	eax, esi
100004905:	jne	0x100004911
100004907:	mov	dword ptr [rip + 0x3de3], 0x1
100004911:	mov	r12, qword ptr [rip + 0x36f8] ## literal pool symbol address: ___stderrp
100004918:	mov	r15, qword ptr [r12]
10000491c:	mov	rdi, r14
10000491f:	call	0x100006612 ## symbol stub for: _strlen
100004924:	cmp	rax, 0x7
100004928:	lea	rax, [rip + 0x2c82] ## literal pool for: "\t\t"
10000492f:	lea	rcx, [rip + 0x2c7e] ## literal pool for: "\t"
100004936:	cmovb	rcx, rax
10000493a:	test	ebx, ebx
10000493c:	lea	rax, [rip + 0x2ca3] ## literal pool for: "NOT OK"
100004943:	lea	r8, [rip + 0x2c99] ## literal pool for: "OK"
10000494a:	cmove	r8, rax
10000494e:	lea	rsi, [rip + 0x2c83] ## literal pool for: "%s:%s  %s\n"
100004955:	mov	rdi, r15
100004958:	mov	rdx, r14
10000495b:	xor	eax, eax
10000495d:	call	0x10000652e ## symbol stub for: _fprintf
100004962:	mov	rdi, qword ptr [r12]
100004966:	pop	rbx
100004967:	pop	r12
100004969:	pop	r14
10000496b:	pop	r15
10000496d:	pop	rbp
10000496e:	jmp	0x100006516 ## symbol stub for: _fflush
100004973:	push	rbp
100004974:	mov	rbp, rsp
100004977:	sub	rsp, 0xd0
10000497e:	test	al, al
100004980:	je	0x1000049a2
100004982:	movaps	xmmword ptr [rbp - 0x80], xmm0
100004986:	movaps	xmmword ptr [rbp - 0x70], xmm1
10000498a:	movaps	xmmword ptr [rbp - 0x60], xmm2
10000498e:	movaps	xmmword ptr [rbp - 0x50], xmm3
100004992:	movaps	xmmword ptr [rbp - 0x40], xmm4
100004996:	movaps	xmmword ptr [rbp - 0x30], xmm5
10000499a:	movaps	xmmword ptr [rbp - 0x20], xmm6
10000499e:	movaps	xmmword ptr [rbp - 0x10], xmm7
1000049a2:	mov	qword ptr [rbp - 0xa8], rsi
1000049a9:	mov	qword ptr [rbp - 0xa0], rdx
1000049b0:	mov	qword ptr [rbp - 0x98], rcx
1000049b7:	mov	qword ptr [rbp - 0x90], r8
1000049be:	mov	qword ptr [rbp - 0x88], r9
1000049c5:	cmp	byte ptr [rip + 0x3d18], 0x0
1000049cc:	jne	0x1000049fa
1000049ce:	lea	rax, [rbp - 0xb0]
1000049d5:	lea	rsi, [rbp - 0xd0]
1000049dc:	mov	qword ptr [rsi + 0x10], rax
1000049e0:	lea	rax, [rbp + 0x10]
1000049e4:	mov	qword ptr [rsi + 0x8], rax
1000049e8:	movabs	rax, 0x3000000008
1000049f2:	mov	qword ptr [rsi], rax
1000049f5:	call	0x10000663c ## symbol stub for: _vwarnx
1000049fa:	mov	edi, 0x2
1000049ff:	call	0x1000064e6 ## symbol stub for: _exit
100004a04:	push	rbp
100004a05:	mov	rbp, rsp
100004a08:	push	r15
100004a0a:	push	r14
100004a0c:	push	r13
100004a0e:	push	r12
100004a10:	push	rbx
100004a11:	push	rax
100004a12:	test	edx, edx
100004a14:	je	0x100004a9d
100004a1a:	mov	r14d, edx
100004a1d:	mov	rbx, rdi
100004a20:	mov	eax, dword ptr [rdi + 0xc]
100004a23:	mov	r12d, edx
100004a26:	cmp	eax, 0x2
100004a29:	je	0x100004f3c
100004a2f:	mov	r15, rsi
100004a32:	cmp	eax, 0x1
100004a35:	je	0x100004aa5
100004a37:	mov	dword ptr [rbp - 0x30], r14d
100004a3b:	test	eax, eax
100004a3d:	jne	0x100004a46
100004a3f:	mov	dword ptr [rbx + 0xc], 0x1
100004a46:	mov	r14, qword ptr [rip + 0x3cc3]
100004a4d:	test	r14, r14
100004a50:	je	0x100004aad
100004a52:	mov	r13, qword ptr [rip + 0x3cbf]
100004a59:	lea	rax, [r14 - 0x1]
100004a5d:	cmp	rax, 0x2
100004a61:	mov	r12d, 0x3
100004a67:	cmovb	r12, r14
100004a6b:	lea	rdi, [rbp - 0x2b]
100004a6f:	mov	rsi, r13
100004a72:	mov	rdx, r12
100004a75:	call	0x1000065ca ## symbol stub for: _memcpy
100004a7a:	xor	eax, eax
100004a7c:	inc	rax
100004a7f:	cmp	r12, rax
100004a82:	jne	0x100004a7c
100004a84:	add	r13, rax
100004a87:	mov	qword ptr [rip + 0x3c8a], r13
100004a8e:	sub	r14, rax
100004a91:	mov	qword ptr [rip + 0x3c78], r14
100004a98:	mov	eax, r12d
100004a9b:	jmp	0x100004aaf
100004a9d:	xor	r14d, r14d
100004aa0:	jmp	0x100004bb0
100004aa5:	mov	r12d, r14d
100004aa8:	jmp	0x100004e97
100004aad:	xor	eax, eax
100004aaf:	mov	r14d, dword ptr [rbp - 0x30]
100004ab3:	lea	rdi, [rax + rbp]
100004ab7:	add	rdi, -0x2b
100004abb:	mov	r12d, 0x3
100004ac1:	sub	r12, rax
100004ac4:	mov	rcx, qword ptr [rbx]
100004ac7:	mov	esi, 0x1
100004acc:	mov	rdx, r12
100004acf:	call	0x10000653a ## symbol stub for: _fread
100004ad4:	cmp	rax, r12
100004ad7:	jne	0x100004b1a
100004ad9:	movzx	eax, word ptr [rbp - 0x2b]
100004add:	cmp	ax, word ptr [rip + 0x3bdc]
100004ae4:	jne	0x100004b1a
100004ae6:	mov	qword ptr [rip + 0x3c2f], 0x0
100004af1:	movzx	ecx, byte ptr [rbp - 0x29]
100004af5:	mov	eax, ecx
100004af7:	and	eax, -0x80
100004afa:	mov	dword ptr [rbx + 0xa8798], eax
100004b00:	and	ecx, 0x1f
100004b03:	mov	eax, 0x1
100004b08:	shl	rax, cl
100004b0b:	mov	dword ptr [rbx + 0x14], ecx
100004b0e:	mov	qword ptr [rbx + 0x20], rax
100004b12:	lea	eax, [rcx - 0xc]
100004b15:	cmp	eax, 0x5
100004b18:	jb	0x100004b30
100004b1a:	call	0x100006480 ## symbol stub for: ___error
100004b1f:	mov	dword ptr [rax], 0x4f
100004b25:	mov	r14d, 0xffffffff
100004b2b:	jmp	0x100004bb0
100004b30:	mov	dword ptr [rbx + 0x10], 0x9
100004b37:	mov	qword ptr [rbx + 0x18], 0x1ff
100004b3f:	mov	qword ptr [rbx + 0xa87f0], 0xff
100004b4a:	mov	eax, 0xff
100004b4f:	mov	word ptr [rbx + 2*rax + 0x86c70], 0x0
100004b59:	mov	rax, qword ptr [rbx + 0xa87f0]
100004b60:	mov	byte ptr [rbx + rax + 0x28], al
100004b64:	mov	rcx, qword ptr [rbx + 0xa87f0]
100004b6b:	lea	rax, [rcx - 0x1]
100004b6f:	mov	qword ptr [rbx + 0xa87f0], rax
100004b76:	test	rcx, rcx
100004b79:	jg	0x100004b4f
100004b7b:	cmp	dword ptr [rbx + 0xa8798], 0x1
100004b82:	mov	eax, 0x101
100004b87:	sbb	rax, 0x0
100004b8b:	mov	qword ptr [rbx + 0xa8790], rax
100004b92:	mov	qword ptr [rbx + 0xa87f8], -0x1
100004b9d:	lea	rcx, [rbx + 0x10028]
100004ba4:	mov	qword ptr [rbx + 0xa87e0], rcx
100004bab:	mov	r12d, r14d
100004bae:	jmp	0x100004bc2
100004bb0:	mov	eax, r14d
100004bb3:	add	rsp, 0x8
100004bb7:	pop	rbx
100004bb8:	pop	r12
100004bba:	pop	r13
100004bbc:	pop	r14
100004bbe:	pop	r15
100004bc0:	pop	rbp
100004bc1:	ret
100004bc2:	mov	esi, dword ptr [rbx + 0xa879c]
100004bc8:	test	esi, esi
100004bca:	jg	0x100004be6
100004bcc:	mov	r10d, dword ptr [rbx + 0xa8808]
100004bd3:	cmp	r10d, dword ptr [rbx + 0xa880c]
100004bda:	jge	0x100004be6
100004bdc:	cmp	rax, qword ptr [rbx + 0x18]
100004be0:	jle	0x100004de5
100004be6:	cmp	rax, qword ptr [rbx + 0x18]
100004bea:	jle	0x100004c0e
100004bec:	mov	ecx, dword ptr [rbx + 0x10]
100004bef:	inc	ecx
100004bf1:	mov	dword ptr [rbx + 0x10], ecx
100004bf4:	cmp	ecx, dword ptr [rbx + 0x14]
100004bf7:	jne	0x100004bff
100004bf9:	mov	rax, qword ptr [rbx + 0x20]
100004bfd:	jmp	0x100004c0a
100004bff:	mov	eax, 0xffffffff
100004c04:	shl	eax, cl
100004c06:	not	eax
100004c08:	cdqe
100004c0a:	mov	qword ptr [rbx + 0x18], rax
100004c0e:	test	esi, esi
100004c10:	jle	0x100004c33
100004c12:	mov	dword ptr [rbx + 0x10], 0x9
100004c19:	mov	qword ptr [rbx + 0x18], 0x1ff
100004c21:	mov	dword ptr [rbx + 0xa879c], 0x0
100004c2b:	mov	r8d, 0x9
100004c31:	jmp	0x100004c37
100004c33:	mov	r8d, dword ptr [rbx + 0x10]
100004c37:	xor	r13d, r13d
100004c3a:	test	r8d, r8d
100004c3d:	jle	0x100004c8c
100004c3f:	mov	rcx, qword ptr [rip + 0x3aca]
100004c46:	test	rcx, rcx
100004c49:	je	0x100004c8c
100004c4b:	mov	rdx, qword ptr [rip + 0x3ac6]
100004c52:	mov	r13d, r8d
100004c55:	lea	rsi, [rcx - 0x1]
100004c59:	lea	rdi, [r13 - 0x1]
100004c5d:	cmp	rsi, rdi
100004c60:	cmovb	r13, rcx
100004c64:	xor	esi, esi
100004c66:	mov	al, byte ptr [rdx + rsi]
100004c69:	mov	byte ptr [rbx + rsi + 0xa8810], al
100004c70:	inc	rsi
100004c73:	cmp	r13, rsi
100004c76:	jne	0x100004c66
100004c78:	add	rdx, rsi
100004c7b:	mov	qword ptr [rip + 0x3a96], rdx
100004c82:	sub	rcx, rsi
100004c85:	mov	qword ptr [rip + 0x3a84], rcx
100004c8c:	mov	eax, r13d
100004c8f:	lea	rdi, [rbx + rax]
100004c93:	add	rdi, 0xa8810
100004c9a:	sub	r8d, r13d
100004c9d:	movsxd	rdx, r8d
100004ca0:	mov	rcx, qword ptr [rbx]
100004ca3:	mov	esi, 0x1
100004ca8:	call	0x10000653a ## symbol stub for: _fread
100004cad:	add	eax, r13d
100004cb0:	mov	dword ptr [rbx + 0xa880c], eax
100004cb6:	jle	0x100004f2a
100004cbc:	mov	dword ptr [rbx + 0xa8808], 0x0
100004cc6:	mov	ecx, eax
100004cc8:	add	qword ptr [rip + 0x3a51], rcx
100004ccf:	mov	r8d, dword ptr [rbx + 0x10]
100004cd3:	lea	eax, [8*rax + 0x1]
100004cda:	sub	eax, r8d
100004cdd:	mov	dword ptr [rbx + 0xa880c], eax
100004ce3:	xor	r10d, r10d
100004ce6:	mov	eax, r10d
100004ce9:	sar	eax, 0x3
100004cec:	movsxd	rdx, eax
100004cef:	mov	eax, r10d
100004cf2:	and	eax, 0x7
100004cf5:	movzx	edi, byte ptr [rbx + rdx + 0xa8810]
100004cfd:	mov	ecx, eax
100004cff:	shr	edi, cl
100004d01:	mov	ecx, 0x8
100004d06:	sub	ecx, eax
100004d08:	mov	esi, r8d
100004d0b:	sub	esi, ecx
100004d0d:	cmp	esi, 0x8
100004d10:	jl	0x100004d36
100004d12:	lea	r9, [rbx + rdx]
100004d16:	add	r9, 0xa8810
100004d1d:	movzx	edx, byte ptr [r9 + 0x1]
100004d22:	add	r9, 0x2
100004d26:	shl	edx, cl
100004d28:	or	edi, edx
100004d2a:	mov	ecx, 0x10
100004d2f:	sub	ecx, eax
100004d31:	add	esi, -0x8
100004d34:	jmp	0x100004d41
100004d36:	lea	r9, [rbx + rdx]
100004d3a:	add	r9, 0xa8811
100004d41:	mov	edx, edi
100004d43:	movsxd	rax, esi
100004d46:	lea	rsi, [rip + 0x1ccb]
100004d4d:	mov	al, byte ptr [rax + rsi]
100004d50:	and	al, byte ptr [r9]
100004d53:	movzx	eax, al
100004d56:	shl	eax, cl
100004d58:	cdqe
100004d5a:	add	r10d, r8d
100004d5d:	or	rax, rdx
100004d60:	mov	dword ptr [rbx + 0xa8808], r10d
100004d67:	mov	qword ptr [rbx + 0xa87f0], rax
100004d6e:	js	0x100004f35
100004d74:	cmp	rax, 0x100
100004d7a:	jne	0x100004dee
100004d7c:	cmp	dword ptr [rbx + 0xa8798], 0x0
100004d83:	je	0x100004dee
100004d85:	mov	qword ptr [rbx + 0xa87f0], 0xff
100004d90:	mov	eax, 0xff
100004d95:	mov	word ptr [rbx + 2*rax + 0x86c70], 0x0
100004d9f:	mov	rcx, qword ptr [rbx + 0xa87f0]
100004da6:	lea	rax, [rcx - 0x1]
100004daa:	mov	qword ptr [rbx + 0xa87f0], rax
100004db1:	test	rcx, rcx
100004db4:	jg	0x100004d95
100004db6:	mov	dword ptr [rbx + 0xa879c], 0x1
100004dc0:	mov	qword ptr [rbx + 0xa8790], 0x101
100004dcb:	mov	qword ptr [rbx + 0xa87f8], -0x1
100004dd6:	mov	esi, 0x1
100004ddb:	mov	eax, 0x101
100004de0:	jmp	0x100004bc8
100004de5:	mov	r8d, dword ptr [rbx + 0x10]
100004de9:	jmp	0x100004ce6
100004dee:	mov	qword ptr [rbx + 0xa8800], rax
100004df5:	cmp	rax, qword ptr [rbx + 0xa8790]
100004dfc:	jl	0x100004e3a
100004dfe:	jg	0x100004f44
100004e04:	cmp	qword ptr [rbx + 0xa87f8], -0x1
100004e0c:	je	0x100004f44
100004e12:	mov	al, byte ptr [rbx + 0xa87e8]
100004e18:	mov	rcx, qword ptr [rbx + 0xa87e0]
100004e1f:	lea	rdx, [rcx + 0x1]
100004e23:	mov	qword ptr [rbx + 0xa87e0], rdx
100004e2a:	mov	byte ptr [rcx], al
100004e2c:	mov	rax, qword ptr [rbx + 0xa87f8]
100004e33:	mov	qword ptr [rbx + 0xa87f0], rax
100004e3a:	cmp	rax, 0xff
100004e40:	jle	0x100004e78
100004e42:	mov	al, byte ptr [rbx + rax + 0x28]
100004e46:	mov	rcx, qword ptr [rbx + 0xa87e0]
100004e4d:	lea	rdx, [rcx + 0x1]
100004e51:	mov	qword ptr [rbx + 0xa87e0], rdx
100004e58:	mov	byte ptr [rcx], al
100004e5a:	mov	rax, qword ptr [rbx + 0xa87f0]
100004e61:	movzx	eax, word ptr [rbx + 2*rax + 0x86c70]
100004e69:	mov	qword ptr [rbx + 0xa87f0], rax
100004e70:	cmp	rax, 0xff
100004e76:	ja	0x100004e42
100004e78:	movzx	eax, byte ptr [rbx + rax + 0x28]
100004e7d:	mov	dword ptr [rbx + 0xa87e8], eax
100004e83:	mov	rcx, qword ptr [rbx + 0xa87e0]
100004e8a:	lea	rdx, [rcx + 0x1]
100004e8e:	mov	qword ptr [rbx + 0xa87e0], rdx
100004e95:	mov	byte ptr [rcx], al
100004e97:	lea	rax, [rbx + 0x10028]
100004e9e:	sub	r12d, 0x1
100004ea2:	jb	0x100004bb0
100004ea8:	mov	rcx, qword ptr [rbx + 0xa87e0]
100004eaf:	lea	rdx, [rcx - 0x1]
100004eb3:	mov	qword ptr [rbx + 0xa87e0], rdx
100004eba:	mov	cl, byte ptr [rcx - 0x1]
100004ebd:	mov	byte ptr [r15], cl
100004ec0:	inc	r15
100004ec3:	cmp	qword ptr [rbx + 0xa87e0], rax
100004eca:	ja	0x100004e9e
100004ecc:	mov	rax, qword ptr [rbx + 0xa8790]
100004ed3:	mov	qword ptr [rbx + 0xa87f0], rax
100004eda:	cmp	rax, qword ptr [rbx + 0x20]
100004ede:	jge	0x100004f17
100004ee0:	mov	rcx, qword ptr [rbx + 0xa87f8]
100004ee7:	cmp	rcx, -0x1
100004eeb:	je	0x100004f17
100004eed:	mov	word ptr [rbx + 2*rax + 0x86c70], cx
100004ef5:	mov	al, byte ptr [rbx + 0xa87e8]
100004efb:	mov	rcx, qword ptr [rbx + 0xa87f0]
100004f02:	mov	byte ptr [rbx + rcx + 0x28], al
100004f06:	mov	rax, qword ptr [rbx + 0xa87f0]
100004f0d:	inc	rax
100004f10:	mov	qword ptr [rbx + 0xa8790], rax
100004f17:	mov	rcx, qword ptr [rbx + 0xa8800]
100004f1e:	mov	qword ptr [rbx + 0xa87f8], rcx
100004f25:	jmp	0x100004bc2
100004f2a:	mov	qword ptr [rbx + 0xa87f0], -0x1
100004f35:	mov	dword ptr [rbx + 0xc], 0x2
100004f3c:	sub	r14d, r12d
100004f3f:	jmp	0x100004bb0
100004f44:	call	0x100006480 ## symbol stub for: ___error
100004f49:	mov	dword ptr [rax], 0x16
100004f4f:	jmp	0x100004b25
100004f54:	push	rbp
100004f55:	mov	rbp, rsp
100004f58:	call	0x100006540 ## symbol stub for: _free
100004f5d:	xor	eax, eax
100004f5f:	pop	rbp
100004f60:	ret
100004f61:	push	rbp
100004f62:	mov	rbp, rsp
100004f65:	push	r14
100004f67:	push	rbx
100004f68:	mov	r14d, esi
100004f6b:	mov	rbx, rdi
100004f6e:	cmp	dword ptr [rdi + 0x4], esi
100004f71:	jle	0x100004fa0
100004f73:	lea	esi, [r14 + 0x1]
100004f77:	mov	rdi, rbx
100004f7a:	call	0x100004f61
100004f7f:	mov	rax, qword ptr [rbx + 0x8]
100004f83:	mov	rcx, qword ptr [rbx + 0x10]
100004f87:	movsxd	rdx, r14d
100004f8a:	mov	eax, dword ptr [rax + 4*rdx + 0x4]
100004f8e:	add	eax, dword ptr [rcx + 4*rdx + 0x4]
100004f92:	mov	esi, eax
100004f94:	shr	esi, 0x1f
100004f97:	add	esi, eax
100004f99:	sar	esi
100004f9b:	mov	dword ptr [rcx + 4*rdx], esi
100004f9e:	jmp	0x100004fae
100004fa0:	mov	rax, qword ptr [rbx + 0x10]
100004fa4:	movsxd	rcx, r14d
100004fa7:	mov	dword ptr [rax + 4*rcx], 0x0
100004fae:	pop	rbx
100004faf:	pop	r14
100004fb1:	pop	rbp
100004fb2:	ret
100004fb3:	push	rbp
100004fb4:	mov	rbp, rsp
100004fb7:	push	r14
100004fb9:	push	rbx
100004fba:	sub	rsp, 0x10
100004fbe:	mov	r14, rdx
100004fc1:	mov	rax, qword ptr [rip + 0x3040] ## literal pool symbol address: ___stack_chk_guard
100004fc8:	mov	rax, qword ptr [rax]
100004fcb:	mov	qword ptr [rbp - 0x18], rax
100004fcf:	mov	rcx, rsi
100004fd2:	shr	rcx, 0x3f
100004fd6:	add	rcx, rsi
100004fd9:	sar	rcx
100004fdc:	mov	rax, rdi
100004fdf:	sub	rax, rcx
100004fe2:	test	rax, rax
100004fe5:	jle	0x100005007
100004fe7:	cmp	rdi, 0x100001
100004fee:	jl	0x10000500e
100004ff0:	mov	rcx, rdi
100004ff3:	sar	rax
100004ff6:	shr	rcx
100004ff9:	cmp	rdi, 0x200001
100005000:	mov	rdi, rcx
100005003:	ja	0x100004ff3
100005005:	jmp	0x100005011
100005007:	mov	ecx, 0xfffffc19
10000500c:	jmp	0x10000502c
10000500e:	mov	rcx, rdi
100005011:	test	rcx, rcx
100005014:	je	0x10000502a
100005016:	imul	eax, eax, 0x7d0
10000501c:	xor	edx, edx
10000501e:	div	ecx
100005020:	mov	ecx, eax
100005022:	add	ecx, 0xfffffc18
100005028:	jmp	0x10000502c
10000502a:	xor	ecx, ecx
10000502c:	lea	rdx, [rip + 0x2598] ## literal pool for: "%2.2d."
100005033:	lea	rbx, [rbp - 0x20]
100005037:	mov	esi, 0x8
10000503c:	mov	rdi, rbx
10000503f:	xor	eax, eax
100005041:	call	0x1000065f4 ## symbol stub for: _snprintf
100005046:	cdqe
100005048:	mov	cl, byte ptr [rax + rbx - 0x2]
10000504c:	mov	byte ptr [rax + rbx - 0x1], cl
100005050:	mov	byte ptr [rax + rbx - 0x2], 0x2e
100005055:	lea	rsi, [rip + 0x2576] ## literal pool for: "%5s%%"
10000505c:	mov	rdi, r14
10000505f:	mov	rdx, rbx
100005062:	xor	eax, eax
100005064:	call	0x10000652e ## symbol stub for: _fprintf
100005069:	mov	rax, qword ptr [rip + 0x2f98] ## literal pool symbol address: ___stack_chk_guard
100005070:	mov	rax, qword ptr [rax]
100005073:	cmp	rax, qword ptr [rbp - 0x18]
100005077:	jne	0x100005082
100005079:	add	rsp, 0x10
10000507d:	pop	rbx
10000507e:	pop	r14
100005080:	pop	rbp
100005081:	ret
100005082:	call	0x100006492 ## symbol stub for: ___stack_chk_fail
100005087:	push	rbp
100005088:	mov	rbp, rsp
10000508b:	push	r15
10000508d:	push	r14
10000508f:	push	r13
100005091:	push	r12
100005093:	push	rbx
100005094:	sub	rsp, 0xa8
10000509b:	mov	r15d, r8d
10000509e:	mov	r12, rcx
1000050a1:	mov	qword ptr [rbp - 0x38], rdx
1000050a5:	mov	dword ptr [rbp - 0x3c], esi
1000050a8:	mov	dword ptr [rbp - 0x4c], edi
1000050ab:	mov	edi, 0x10000
1000050b0:	call	0x1000065c4 ## symbol stub for: _malloc
1000050b5:	mov	rbx, rax
1000050b8:	mov	edi, 0x10000
1000050bd:	call	0x1000065c4 ## symbol stub for: _malloc
1000050c2:	test	rbx, rbx
1000050c5:	je	0x100005483
1000050cb:	test	rax, rax
1000050ce:	je	0x100005483
1000050d4:	mov	rdi, rbx
1000050d7:	mov	qword ptr [rbp - 0x48], rax
1000050db:	xorps	xmm0, xmm0
1000050de:	movaps	xmmword ptr [rbp - 0x70], xmm0
1000050e2:	movaps	xmmword ptr [rbp - 0x80], xmm0
1000050e6:	movaps	xmmword ptr [rbp - 0x90], xmm0
1000050ed:	movaps	xmmword ptr [rbp - 0xa0], xmm0
1000050f4:	movaps	xmmword ptr [rbp - 0xb0], xmm0
1000050fb:	movaps	xmmword ptr [rbp - 0xc0], xmm0
100005102:	movaps	xmmword ptr [rbp - 0xd0], xmm0
100005109:	xor	eax, eax
10000510b:	cmp	byte ptr [rip + 0x35ca], 0x0
100005112:	cmovne	r15d, eax
100005116:	lea	rax, [rip + 0x1ee9] ## literal pool for: ""
10000511d:	cmovne	r12, rax
100005121:	xor	r10d, r10d
100005124:	cmp	byte ptr [r12], 0x0
100005129:	setne	r10b
10000512d:	shl	r10d, 0x3
100005131:	mov	eax, 0xff
100005136:	mov	r11d, r15d
100005139:	and	r11d, eax
10000513c:	mov	r13d, r15d
10000513f:	shr	r13d, 0x8
100005143:	and	r13d, eax
100005146:	mov	ebx, r15d
100005149:	shr	ebx, 0x10
10000514c:	and	ebx, eax
10000514e:	shr	r15d, 0x18
100005152:	mov	eax, dword ptr [rip + 0x3408]
100005158:	xor	ecx, ecx
10000515a:	cmp	eax, 0x9
10000515d:	sete	cl
100005160:	add	ecx, ecx
100005162:	cmp	eax, 0x1
100005165:	mov	r14d, 0x4
10000516b:	cmovne	r14d, ecx
10000516f:	lea	rdx, [rip + 0x24b7] ## literal pool for: "%c%c%c%c%c%c%c%c%c%c%s"
100005176:	mov	esi, 0x10000
10000517b:	mov	qword ptr [rbp - 0x58], rdi
10000517f:	mov	ecx, 0x1f
100005184:	mov	r8d, 0x8b
10000518a:	mov	r9d, 0x8
100005190:	xor	eax, eax
100005192:	mov	qword ptr [rbp - 0x30], r12
100005196:	push	r12
100005198:	push	0x3
10000519a:	push	r14
10000519c:	push	r15
10000519e:	push	rbx
10000519f:	push	r13
1000051a1:	push	r11
1000051a3:	push	r10
1000051a5:	call	0x1000065f4 ## symbol stub for: _snprintf
1000051aa:	add	rsp, 0x40
1000051ae:	cmp	eax, 0x10000
1000051b3:	jge	0x10000548c
1000051b9:	mov	rcx, qword ptr [rbp - 0x30]
1000051bd:	cmp	byte ptr [rcx], 0x1
1000051c0:	sbb	eax, -0x1
1000051c3:	cdqe
1000051c5:	mov	r14, qword ptr [rbp - 0x58]
1000051c9:	lea	rcx, [r14 + rax]
1000051cd:	lea	rdi, [rbp - 0xd0]
1000051d4:	mov	qword ptr [rdi + 0x18], rcx
1000051d8:	mov	ecx, 0x10000
1000051dd:	sub	ecx, eax
1000051df:	mov	dword ptr [rdi + 0x20], ecx
1000051e2:	mov	esi, dword ptr [rip + 0x3378]
1000051e8:	lea	rax, [rip + 0x2050] ## literal pool for: "1.2.11"
1000051ef:	mov	edx, 0x8
1000051f4:	mov	ecx, 0xfffffff1
1000051f9:	mov	r8d, 0x8
1000051ff:	xor	r9d, r9d
100005202:	push	0x70
100005204:	push	rax
100005205:	call	0x1000064d4 ## symbol stub for: _deflateInit2_
10000520a:	add	rsp, 0x10
10000520e:	test	eax, eax
100005210:	je	0x100005221
100005212:	lea	rdi, [rip + 0x2434] ## literal pool for: "deflateInit2 failed"
100005219:	xor	r13d, r13d
10000521c:	jmp	0x1000052e9
100005221:	xor	eax, eax
100005223:	mov	qword ptr [rbp - 0x30], rax
100005227:	xor	edi, edi
100005229:	xor	esi, esi
10000522b:	xor	edx, edx
10000522d:	call	0x1000064bc ## symbol stub for: _crc32
100005232:	mov	r12, rax
100005235:	lea	rbx, [rbp - 0xd0]
10000523c:	xor	r13d, r13d
10000523f:	cmp	dword ptr [rbp - 0xb0], 0x0
100005246:	jne	0x10000527c
100005248:	mov	edx, 0x10000
10000524d:	mov	edi, dword ptr [rbp - 0x3c]
100005250:	mov	rsi, r14
100005253:	call	0x100006648 ## symbol stub for: _write
100005258:	cmp	rax, 0x10000
10000525e:	jne	0x100005386
100005264:	add	r13, 0x10000
10000526b:	mov	qword ptr [rbp - 0xb8], r14
100005272:	mov	dword ptr [rbp - 0xb0], 0x10000
10000527c:	cmp	dword ptr [rbp - 0xc8], 0x0
100005283:	jne	0x1000052cf
100005285:	mov	edx, 0x10000
10000528a:	mov	edi, dword ptr [rbp - 0x4c]
10000528d:	mov	rsi, qword ptr [rbp - 0x48]
100005291:	call	0x1000065e8 ## symbol stub for: _read
100005296:	test	rax, rax
100005299:	js	0x1000053a0
10000529f:	je	0x10000536b
1000052a5:	mov	r15, rax
1000052a8:	mov	rdi, r12
1000052ab:	mov	r12, qword ptr [rbp - 0x48]
1000052af:	mov	rsi, r12
1000052b2:	mov	edx, r15d
1000052b5:	call	0x1000064bc ## symbol stub for: _crc32
1000052ba:	add	qword ptr [rbp - 0x30], r15
1000052be:	mov	qword ptr [rbp - 0xd0], r12
1000052c5:	mov	r12, rax
1000052c8:	mov	dword ptr [rbp - 0xc8], r15d
1000052cf:	mov	rdi, rbx
1000052d2:	xor	esi, esi
1000052d4:	call	0x1000064c8 ## symbol stub for: _deflate
1000052d9:	cmp	eax, 0x2
1000052dc:	jb	0x10000523f
1000052e2:	lea	rdi, [rip + 0x2378] ## literal pool for: "deflate failed"
1000052e9:	xor	eax, eax
1000052eb:	call	0x100003193
1000052f0:	mov	qword ptr [rbp - 0x30], -0x1
1000052f8:	mov	rbx, qword ptr [rbp - 0x38]
1000052fc:	mov	rdi, qword ptr [rbp - 0x48]
100005300:	call	0x100006540 ## symbol stub for: _free
100005305:	mov	rdi, r14
100005308:	call	0x100006540 ## symbol stub for: _free
10000530d:	test	rbx, rbx
100005310:	je	0x100005315
100005312:	mov	qword ptr [rbx], r13
100005315:	mov	rax, qword ptr [rbp - 0x30]
100005319:	add	rsp, 0xa8
100005320:	pop	rbx
100005321:	pop	r12
100005323:	pop	r13
100005325:	pop	r14
100005327:	pop	r15
100005329:	pop	rbp
10000532a:	ret
10000532b:	mov	r15d, eax
10000532e:	mov	rbx, qword ptr [rbp - 0xb8]
100005335:	sub	rbx, r14
100005338:	mov	edi, dword ptr [rbp - 0x3c]
10000533b:	mov	rsi, r14
10000533e:	mov	rdx, rbx
100005341:	call	0x100006648 ## symbol stub for: _write
100005346:	cmp	rax, -0x1
10000534a:	je	0x100005386
10000534c:	cmp	rax, rbx
10000534f:	jne	0x100005386
100005351:	add	r13, rbx
100005354:	mov	qword ptr [rbp - 0xb8], r14
10000535b:	mov	dword ptr [rbp - 0xb0], 0x10000
100005365:	cmp	r15d, 0x1
100005369:	je	0x1000053b3
10000536b:	lea	rdi, [rbp - 0xd0]
100005372:	mov	esi, 0x4
100005377:	call	0x1000064c8 ## symbol stub for: _deflate
10000537c:	cmp	eax, 0x2
10000537f:	jb	0x10000532b
100005381:	jmp	0x1000052e2
100005386:	lea	rdi, [rip + 0x1fe6] ## literal pool for: "write"
10000538d:	xor	eax, eax
10000538f:	call	0x10000325e
100005394:	mov	r13, -0x1
10000539b:	jmp	0x1000052f8
1000053a0:	lea	rdi, [rip + 0x1fb8] ## literal pool for: "read"
1000053a7:	xor	eax, eax
1000053a9:	call	0x10000325e
1000053ae:	jmp	0x1000052f0
1000053b3:	lea	rdi, [rbp - 0xd0]
1000053ba:	call	0x1000064ce ## symbol stub for: _deflateEnd
1000053bf:	test	eax, eax
1000053c1:	je	0x1000053cf
1000053c3:	lea	rdi, [rip + 0x22a6] ## literal pool for: "deflateEnd failed"
1000053ca:	jmp	0x1000052e9
1000053cf:	mov	eax, 0xff
1000053d4:	mov	ecx, r12d
1000053d7:	and	ecx, eax
1000053d9:	mov	r8d, r12d
1000053dc:	shr	r8d, 0x8
1000053e0:	and	r8d, eax
1000053e3:	mov	r9d, r12d
1000053e6:	shr	r9d, 0x10
1000053ea:	and	r9d, eax
1000053ed:	shr	r12d, 0x18
1000053f1:	mov	rdx, qword ptr [rbp - 0x30]
1000053f5:	mov	r10d, edx
1000053f8:	and	r10d, eax
1000053fb:	mov	r11d, edx
1000053fe:	shr	r11d, 0x8
100005402:	and	r11d, eax
100005405:	mov	ebx, edx
100005407:	shr	ebx, 0x10
10000540a:	and	ebx, eax
10000540c:	mov	r15, r14
10000540f:	mov	r14d, edx
100005412:	shr	r14d, 0x18
100005416:	sub	rsp, 0x8
10000541a:	lea	rdx, [rip + 0x2261] ## literal pool for: "%c%c%c%c%c%c%c%c"
100005421:	mov	esi, 0x10000
100005426:	mov	rdi, r15
100005429:	xor	eax, eax
10000542b:	push	r14
10000542d:	push	rbx
10000542e:	push	r11
100005430:	push	r10
100005432:	push	r12
100005434:	call	0x1000065f4 ## symbol stub for: _snprintf
100005439:	add	rsp, 0x30
10000543d:	cmp	eax, 0x8
100005440:	jne	0x10000548c
100005442:	mov	edx, 0x8
100005447:	mov	edi, dword ptr [rbp - 0x3c]
10000544a:	mov	rsi, r15
10000544d:	call	0x100006648 ## symbol stub for: _write
100005452:	cmp	rax, 0x8
100005456:	mov	rbx, qword ptr [rbp - 0x38]
10000545a:	mov	r14, r15
10000545d:	jne	0x100005468
10000545f:	add	r13, 0x8
100005463:	jmp	0x1000052fc
100005468:	lea	rdi, [rip + 0x1f04] ## literal pool for: "write"
10000546f:	xor	eax, eax
100005471:	call	0x10000325e
100005476:	mov	qword ptr [rbp - 0x30], -0x1
10000547e:	jmp	0x1000052fc
100005483:	lea	rdi, [rip + 0x1d0b] ## literal pool for: "malloc failed"
10000548a:	jmp	0x100005493
10000548c:	lea	rdi, [rip + 0x21b1] ## literal pool for: "snprintf"
100005493:	xor	eax, eax
100005495:	call	0x100003102
10000549a:	push	rbp
10000549b:	mov	rbp, rsp
10000549e:	push	r15
1000054a0:	push	r14
1000054a2:	push	r13
1000054a4:	push	r12
1000054a6:	push	rbx
1000054a7:	sub	rsp, 0x998
1000054ae:	mov	r14, rsi
1000054b1:	mov	r13, rdi
1000054b4:	mov	rax, qword ptr [rip + 0x2b4d] ## literal pool symbol address: ___stack_chk_guard
1000054bb:	mov	rax, qword ptr [rax]
1000054be:	mov	qword ptr [rbp - 0x30], rax
1000054c2:	mov	qword ptr [rip + 0x325f], rdi
1000054c9:	cmp	byte ptr [rip + 0x31f8], 0x1
1000054d0:	jne	0x100005541
1000054d2:	mov	rdi, r13
1000054d5:	xor	esi, esi
1000054d7:	xor	eax, eax
1000054d9:	call	0x1000065d0 ## symbol stub for: _open
1000054de:	mov	r15d, eax
1000054e1:	test	eax, eax
1000054e3:	js	0x1000055b1
1000054e9:	lea	rbx, [rbp - 0x8d0]
1000054f0:	mov	edx, 0x400
1000054f5:	mov	ecx, 0x400
1000054fa:	mov	rdi, rbx
1000054fd:	mov	rsi, r13
100005500:	call	0x100006498 ## symbol stub for: ___strlcpy_chk
100005505:	mov	rdi, rbx
100005508:	mov	esi, 0x1
10000550d:	call	0x10000610c
100005512:	test	rax, rax
100005515:	jne	0x10000560b
10000551b:	test	byte ptr [rip + 0x31aa], 0x1
100005522:	jne	0x10000560b
100005528:	test	byte ptr [rip + 0x31a1], 0x1
10000552f:	jne	0x10000560b
100005535:	lea	rdi, [rip + 0x21cb] ## literal pool for: "%s: unknown suffix -- ignored"
10000553c:	jmp	0x100005764
100005541:	mov	rdi, r13
100005544:	xor	esi, esi
100005546:	xor	eax, eax
100005548:	call	0x1000065d0 ## symbol stub for: _open
10000554d:	cmp	eax, -0x1
100005550:	je	0x1000055e0
100005556:	mov	ebx, eax
100005558:	xorps	xmm0, xmm0
10000555b:	lea	rsi, [rbp - 0x4d0]
100005562:	movaps	xmmword ptr [rsi + 0x80], xmm0
100005569:	movaps	xmmword ptr [rsi + 0x70], xmm0
10000556d:	movaps	xmmword ptr [rsi + 0x60], xmm0
100005571:	movaps	xmmword ptr [rsi + 0x50], xmm0
100005575:	movaps	xmmword ptr [rsi + 0x40], xmm0
100005579:	movaps	xmmword ptr [rsi + 0x30], xmm0
10000557d:	movaps	xmmword ptr [rsi + 0x20], xmm0
100005581:	movaps	xmmword ptr [rsi + 0x10], xmm0
100005585:	movaps	xmmword ptr [rsi], xmm0
100005588:	mov	edi, eax
10000558a:	call	0x10000654c ## symbol stub for: _fstat$INODE64
10000558f:	test	eax, eax
100005591:	je	0x100005659
100005597:	lea	rdi, [rip + 0x2426] ## literal pool for: "couldn't stat: %s"
10000559e:	mov	rsi, r13
1000055a1:	xor	eax, eax
1000055a3:	call	0x10000325e
1000055a8:	mov	edi, ebx
1000055aa:	call	0x1000064b0 ## symbol stub for: _close
1000055af:	jmp	0x1000055f1
1000055b1:	lea	rdi, [rip + 0x2141] ## literal pool for: "can't open %s"
1000055b8:	mov	rsi, r13
1000055bb:	xor	eax, eax
1000055bd:	call	0x10000325e
1000055c2:	mov	rbx, -0x1
1000055c9:	cmp	r15d, -0x1
1000055cd:	je	0x10000577d
1000055d3:	mov	edi, r15d
1000055d6:	call	0x1000064b0 ## symbol stub for: _close
1000055db:	jmp	0x10000577d
1000055e0:	lea	rdi, [rip + 0x2112] ## literal pool for: "can't open %s"
1000055e7:	mov	rsi, r13
1000055ea:	xor	eax, eax
1000055ec:	call	0x10000325e
1000055f1:	mov	rcx, -0x1
1000055f8:	cmp	rcx, -0x1
1000055fc:	je	0x1000057dc
100005602:	mov	rbx, qword ptr [r14 + 0x60]
100005606:	jmp	0x1000057ab
10000560b:	lea	rsi, [rbp - 0x920]
100005612:	mov	edx, 0x4
100005617:	mov	edi, r15d
10000561a:	call	0x1000065e8 ## symbol stub for: _read
10000561f:	cmp	rax, 0x4
100005623:	jne	0x1000056aa
100005629:	lea	rdi, [rbp - 0x920]
100005630:	call	0x100003329
100005635:	mov	ebx, eax
100005637:	cmp	eax, 0x6
10000563a:	jne	0x100005722
100005640:	test	byte ptr [rip + 0x308d], 0x1
100005647:	jne	0x100005722
10000564d:	lea	rdi, [rip + 0x20df] ## literal pool for: "%s: not in gzip format"
100005654:	jmp	0x100005764
100005659:	mov	r15d, 0x1
10000565f:	cmp	byte ptr [rip + 0x3066], 0x0
100005666:	je	0x1000056d7
100005668:	mov	rdi, r13
10000566b:	call	0x1000064a4 ## symbol stub for: _basename
100005670:	mov	r8d, dword ptr [rbp - 0x4a0]
100005677:	lea	rdx, [rbp - 0x8f8]
10000567e:	mov	edi, ebx
100005680:	mov	esi, r15d
100005683:	mov	rcx, rax
100005686:	call	0x100005087
10000568b:	cmp	byte ptr [rip + 0x303a], 0x1
100005692:	jne	0x100005802
100005698:	mov	rcx, rax
10000569b:	cmp	rax, -0x1
10000569f:	jne	0x100005cdc
1000056a5:	jmp	0x1000055f8
1000056aa:	cmp	byte ptr [rip + 0x3023], 0x0
1000056b1:	jne	0x10000576e
1000056b7:	cmp	rax, -0x1
1000056bb:	jne	0x10000575d
1000056c1:	lea	rdi, [rip + 0x205d] ## literal pool for: "can't read %s"
1000056c8:	mov	rsi, r13
1000056cb:	xor	eax, eax
1000056cd:	call	0x10000325e
1000056d2:	jmp	0x10000576e
1000056d7:	movzx	edx, word ptr [rbp - 0x4ca]
1000056de:	mov	al, byte ptr [rip + 0x2ff0]
1000056e4:	cmp	edx, 0x2
1000056e7:	jb	0x100005833
1000056ed:	test	al, 0x1
1000056ef:	jne	0x100005833
1000056f5:	dec	edx
1000056f7:	cmp	edx, 0x1
1000056fa:	lea	rax, [rip + 0x1905] ## literal pool for: ""
100005701:	lea	rcx, [rip + 0x22f1] ## literal pool for: "s"
100005708:	cmove	rcx, rax
10000570c:	lea	rdi, [rip + 0x22c3] ## literal pool for: "%s has %d other link%s -- skipping"
100005713:	mov	rsi, r13
100005716:	xor	eax, eax
100005718:	call	0x100003193
10000571d:	jmp	0x1000055a8
100005722:	xor	r12d, r12d
100005725:	test	ebx, ebx
100005727:	jne	0x100005b2a
10000572d:	test	byte ptr [rip + 0x2fac], 0x1
100005734:	je	0x100005b2a
10000573a:	lea	rsi, [rbp - 0x9b0]
100005741:	mov	edx, 0x4
100005746:	mov	ecx, 0x4
10000574b:	mov	edi, r15d
10000574e:	call	0x1000065d6 ## symbol stub for: _pread
100005753:	cmp	rax, 0x4
100005757:	jae	0x1000059f2
10000575d:	lea	rdi, [rip + 0x1a54] ## literal pool for: "%s: unexpected end of file"
100005764:	mov	rsi, r13
100005767:	xor	eax, eax
100005769:	call	0x100003193
10000576e:	mov	edi, r15d
100005771:	call	0x1000064b0 ## symbol stub for: _close
100005776:	mov	rbx, -0x1
10000577d:	cmp	byte ptr [rip + 0x2f6c], 0x1
100005784:	jne	0x1000057a1
100005786:	test	byte ptr [rip + 0x2f5f], 0x1
10000578d:	je	0x1000057a1
10000578f:	xor	esi, esi
100005791:	cmp	rbx, -0x1
100005795:	setne	sil
100005799:	mov	rdi, r13
10000579c:	call	0x1000048ed
1000057a1:	cmp	rbx, -0x1
1000057a5:	je	0x1000057dc
1000057a7:	mov	rcx, qword ptr [r14 + 0x60]
1000057ab:	cmp	byte ptr [rip + 0x2f3a], 0x0
1000057b2:	jne	0x1000057dc
1000057b4:	test	byte ptr [rip + 0x2f35], 0x1
1000057bb:	je	0x1000057dc
1000057bd:	xor	eax, eax
1000057bf:	cmp	byte ptr [rip + 0x2f06], 0x0
1000057c6:	lea	rsi, [rbp - 0x8d0]
1000057cd:	cmovne	rsi, rax
1000057d1:	mov	rdi, r13
1000057d4:	mov	rdx, rbx
1000057d7:	call	0x100004844
1000057dc:	mov	rax, qword ptr [rip + 0x2825] ## literal pool symbol address: ___stack_chk_guard
1000057e3:	mov	rax, qword ptr [rax]
1000057e6:	cmp	rax, qword ptr [rbp - 0x30]
1000057ea:	jne	0x1000060ef
1000057f0:	add	rsp, 0x998
1000057f7:	pop	rbx
1000057f8:	pop	r12
1000057fa:	pop	r13
1000057fc:	pop	r14
1000057fe:	pop	r15
100005800:	pop	rbp
100005801:	ret
100005802:	lea	rsi, [rbp - 0x9b0]
100005809:	mov	edi, r15d
10000580c:	call	0x10000654c ## symbol stub for: _fstat$INODE64
100005811:	test	eax, eax
100005813:	je	0x100005909
100005819:	lea	rdi, [rip + 0x21a4] ## literal pool for: "couldn't stat: %s"
100005820:	lea	rsi, [rbp - 0x8d0]
100005827:	xor	eax, eax
100005829:	call	0x10000325e
10000582e:	jmp	0x100005ca4
100005833:	test	al, 0x1
100005835:	jne	0x100005864
100005837:	mov	rdi, r13
10000583a:	xor	esi, esi
10000583c:	call	0x10000610c
100005841:	test	rax, rax
100005844:	je	0x100005864
100005846:	mov	rdx, qword ptr [rax]
100005849:	cmp	byte ptr [rdx], 0x0
10000584c:	je	0x100005864
10000584e:	lea	rdi, [rip + 0x21a6] ## literal pool for: "%s already has %s suffix -- unchanged"
100005855:	mov	rsi, r13
100005858:	xor	eax, eax
10000585a:	call	0x100003193
10000585f:	jmp	0x1000055a8
100005864:	mov	r8, qword ptr [rip + 0x2d05]
10000586b:	lea	rdx, [rip + 0x21af] ## literal pool for: "%s%s"
100005872:	lea	r12, [rbp - 0x8d0]
100005879:	mov	esi, 0x400
10000587e:	mov	rdi, r12
100005881:	mov	rcx, r13
100005884:	xor	eax, eax
100005886:	call	0x1000065f4 ## symbol stub for: _snprintf
10000588b:	cmp	eax, 0x400
100005890:	jb	0x1000058b5
100005892:	movsxd	rdx, dword ptr [rip + 0x2cdf]
100005899:	sub	r12, rdx
10000589c:	add	r12, 0x3ff
1000058a3:	mov	rsi, qword ptr [rip + 0x2cc6]
1000058aa:	inc	rdx
1000058ad:	mov	rdi, r12
1000058b0:	call	0x1000065ca ## symbol stub for: _memcpy
1000058b5:	lea	rdi, [rbp - 0x8d0]
1000058bc:	call	0x100006193
1000058c1:	test	eax, eax
1000058c3:	je	0x1000055a8
1000058c9:	cmp	byte ptr [rip + 0x2dfc], 0x0
1000058d0:	jne	0x100005668
1000058d6:	lea	r12, [rbp - 0x8d0]
1000058dd:	mov	rdi, r12
1000058e0:	mov	esi, 0xa01
1000058e5:	mov	edx, 0x180
1000058ea:	xor	eax, eax
1000058ec:	call	0x1000065d0 ## symbol stub for: _open
1000058f1:	cmp	eax, -0x1
1000058f4:	je	0x100005cfa
1000058fa:	mov	r15d, eax
1000058fd:	mov	qword ptr [rip + 0x2df4], r12
100005904:	jmp	0x100005668
100005909:	mov	rdx, qword ptr [rbp - 0x950]
100005910:	mov	rcx, qword ptr [rbp - 0x8f8]
100005917:	cmp	rdx, rcx
10000591a:	jne	0x100005c8f
100005920:	mov	edi, ebx
100005922:	mov	esi, r15d
100005925:	xor	edx, edx
100005927:	mov	ecx, 0x5
10000592c:	call	0x100006504 ## symbol stub for: _fcopyfile
100005931:	xorps	xmm0, xmm0
100005934:	lea	rsi, [rbp - 0x920]
10000593b:	movaps	xmmword ptr [rsi], xmm0
10000593e:	mov	qword ptr [rsi + 0x10], 0x0
100005946:	mov	word ptr [rsi], 0x5
10000594b:	mov	dword ptr [rsi + 0x4], 0x4000
100005952:	lea	rdx, [rbp - 0xc0]
100005959:	mov	ecx, 0x24
10000595e:	mov	edi, r15d
100005961:	xor	r8d, r8d
100005964:	call	0x10000651c ## symbol stub for: _fgetattrlist
100005969:	test	eax, eax
10000596b:	jne	0x10000599b
10000596d:	cmp	dword ptr [rbp - 0xc0], 0x24
100005974:	jne	0x10000599b
100005976:	lea	rdx, [rbp - 0xbc]
10000597d:	mov	qword ptr [rdx], 0x0
100005984:	lea	rsi, [rbp - 0x920]
10000598b:	mov	ecx, 0x20
100005990:	mov	edi, r15d
100005993:	xor	r8d, r8d
100005996:	call	0x100006546 ## symbol stub for: _fsetattrlist
10000599b:	lea	rsi, [rbp - 0x4d0]
1000059a2:	lea	rdx, [rbp - 0x8d0]
1000059a9:	mov	edi, r15d
1000059ac:	call	0x1000062a6
1000059b1:	mov	qword ptr [rip + 0x2d3c], 0x0
1000059bc:	mov	edi, ebx
1000059be:	call	0x1000064b0 ## symbol stub for: _close
1000059c3:	mov	edi, r15d
1000059c6:	call	0x1000064b0 ## symbol stub for: _close
1000059cb:	cmp	eax, -0x1
1000059ce:	jne	0x1000059de
1000059d0:	lea	rdi, [rip + 0x1e82] ## literal pool for: "couldn't close output"
1000059d7:	xor	eax, eax
1000059d9:	call	0x10000325e
1000059de:	lea	rsi, [rbp - 0x4d0]
1000059e5:	mov	rdi, r13
1000059e8:	call	0x1000063eb
1000059ed:	jmp	0x100005cdc
1000059f2:	cmp	rax, -0x1
1000059f6:	je	0x100005ce8
1000059fc:	movzx	esi, byte ptr [rbp - 0x9ad]
100005a03:	movzx	edx, byte ptr [rbp - 0x9ae]
100005a0a:	movzx	ecx, byte ptr [rbp - 0x9af]
100005a11:	movzx	r12d, byte ptr [rbp - 0x9b0]
100005a19:	test	byte ptr [rbp - 0x91d], 0x8
100005a20:	je	0x100005b13
100005a26:	mov	dword ptr [rbp - 0x8dc], esi
100005a2c:	mov	qword ptr [rbp - 0x8e8], rdx
100005a33:	mov	qword ptr [rbp - 0x8f0], rcx
100005a3a:	lea	rsi, [rbp - 0x4d0]
100005a41:	mov	edx, 0x400
100005a46:	mov	ecx, 0xa
100005a4b:	mov	edi, r15d
100005a4e:	call	0x1000065d6 ## symbol stub for: _pread
100005a53:	test	rax, rax
100005a56:	js	0x1000056c1
100005a5c:	cmp	byte ptr [rbp - 0x4d0], 0x0
100005a63:	mov	rcx, qword ptr [rbp - 0x8f0]
100005a6a:	mov	rdx, qword ptr [rbp - 0x8e8]
100005a71:	mov	esi, dword ptr [rbp - 0x8dc]
100005a77:	je	0x100005b13
100005a7d:	mov	byte ptr [rbp + rax - 0x4d0], 0x0
100005a85:	lea	rdi, [rbp - 0x4d0]
100005a8c:	mov	esi, 0x2f
100005a91:	mov	qword ptr [rbp - 0x900], rax
100005a98:	call	0x10000661e ## symbol stub for: _strrchr
100005a9d:	mov	qword ptr [rbp - 0x8d8], r12
100005aa4:	lea	r12, [rax + 0x1]
100005aa8:	test	rax, rax
100005aab:	lea	rax, [rbp - 0x4d0]
100005ab2:	cmove	r12, rax
100005ab6:	mov	rdi, r13
100005ab9:	mov	esi, 0x2f
100005abe:	call	0x10000661e ## symbol stub for: _strrchr
100005ac3:	lea	ecx, [rax + 0x1]
100005ac6:	test	rax, rax
100005ac9:	cmove	ecx, r13d
100005acd:	sub	ecx, r13d
100005ad0:	mov	qword ptr [rsp], r12
100005ad4:	mov	r12, qword ptr [rbp - 0x8d8]
100005adb:	lea	rdx, [rip + 0x1c68] ## literal pool for: "%.*s%.*s"
100005ae2:	lea	rdi, [rbp - 0x8d0]
100005ae9:	mov	esi, 0x400
100005aee:	mov	r8, r13
100005af1:	mov	r9, qword ptr [rbp - 0x900]
100005af8:	xor	eax, eax
100005afa:	call	0x1000065f4 ## symbol stub for: _snprintf
100005aff:	mov	esi, dword ptr [rbp - 0x8dc]
100005b05:	mov	rdx, qword ptr [rbp - 0x8e8]
100005b0c:	mov	rcx, qword ptr [rbp - 0x8f0]
100005b13:	shl	esi, 0x18
100005b16:	shl	rdx, 0x10
100005b1a:	movsxd	rax, esi
100005b1d:	or	rax, rdx
100005b20:	shl	rcx, 0x8
100005b24:	or	rcx, rax
100005b27:	or	r12, rcx
100005b2a:	mov	qword ptr [rbp - 0x8d8], r12
100005b31:	xor	r12d, r12d
100005b34:	mov	edi, r15d
100005b37:	xor	esi, esi
100005b39:	xor	edx, edx
100005b3b:	call	0x1000065a6 ## symbol stub for: _lseek
100005b40:	xorps	xmm0, xmm0
100005b43:	movaps	xmmword ptr [rbp - 0x9b0], xmm0
100005b4a:	movaps	xmmword ptr [rbp - 0x9a0], xmm0
100005b51:	movaps	xmmword ptr [rbp - 0x990], xmm0
100005b58:	movaps	xmmword ptr [rbp - 0x980], xmm0
100005b5f:	movaps	xmmword ptr [rbp - 0x970], xmm0
100005b66:	movaps	xmmword ptr [rbp - 0x960], xmm0
100005b6d:	movaps	xmmword ptr [rbp - 0x950], xmm0
100005b74:	movaps	xmmword ptr [rbp - 0x940], xmm0
100005b7b:	movaps	xmmword ptr [rbp - 0x930], xmm0
100005b82:	cmp	byte ptr [rip + 0x2b47], 0x0
100005b89:	jne	0x100005c36
100005b8f:	mov	cl, byte ptr [rip + 0x2b37]
100005b95:	test	cl, 0x1
100005b98:	je	0x100005c36
100005b9e:	mov	eax, 0x1
100005ba3:	test	r12b, 0x1
100005ba7:	jne	0x100005bff
100005ba9:	test	cl, 0x1
100005bac:	jne	0x100005bff
100005bae:	lea	r12, [rbp - 0x8d0]
100005bb5:	mov	rdi, r12
100005bb8:	mov	esi, 0xa01
100005bbd:	mov	edx, 0x180
100005bc2:	xor	eax, eax
100005bc4:	call	0x1000065d0 ## symbol stub for: _open
100005bc9:	cmp	eax, 0x1
100005bcc:	jne	0x100005bef
100005bce:	mov	edi, 0x1
100005bd3:	call	0x1000064da ## symbol stub for: _dup
100005bd8:	mov	r12d, eax
100005bdb:	mov	edi, 0x1
100005be0:	call	0x1000064b0 ## symbol stub for: _close
100005be5:	mov	eax, r12d
100005be8:	lea	r12, [rbp - 0x8d0]
100005bef:	cmp	eax, -0x1
100005bf2:	je	0x100005d23
100005bf8:	mov	qword ptr [rip + 0x2af9], r12
100005bff:	dec	ebx
100005c01:	cmp	ebx, 0x5
100005c04:	ja	0x100005dc3
100005c0a:	lea	rdx, [rip + 0x4e3]
100005c11:	movsxd	rcx, dword ptr [rdx + 4*rbx]
100005c15:	add	rcx, rdx
100005c18:	jmp	rcx
100005c1a:	cmp	byte ptr [rip + 0x2aaf], 0x1
100005c21:	jne	0x100005e2e
100005c27:	mov	r12d, eax
100005c2a:	lea	rdi, [rip + 0x1b44] ## literal pool for: "no -l with bzip2 files"
100005c31:	jmp	0x100005e09
100005c36:	lea	rsi, [rbp - 0x9b0]
100005c3d:	mov	edi, r15d
100005c40:	call	0x10000654c ## symbol stub for: _fstat$INODE64
100005c45:	test	eax, eax
100005c47:	jne	0x10000576e
100005c4d:	movzx	edx, word ptr [rbp - 0x9aa]
100005c54:	cmp	edx, 0x2
100005c57:	jb	0x100005d36
100005c5d:	test	byte ptr [rip + 0x2a6c], 0x1
100005c64:	jne	0x100005d36
100005c6a:	test	byte ptr [rip + 0x2a63], 0x1
100005c71:	jne	0x100005d36
100005c77:	dec	edx
100005c79:	lea	rdi, [rip + 0x1ad3] ## literal pool for: "%s has %d other links -- skipping"
100005c80:	mov	rsi, r13
100005c83:	xor	eax, eax
100005c85:	call	0x100003193
100005c8a:	jmp	0x10000576e
100005c8f:	lea	rdi, [rip + 0x1dac] ## literal pool for: "output file: %s wrong size (%ju != %ju), deleting"
100005c96:	lea	rsi, [rbp - 0x8d0]
100005c9d:	xor	eax, eax
100005c9f:	call	0x100003193
100005ca4:	mov	edi, r15d
100005ca7:	call	0x1000064b0 ## symbol stub for: _close
100005cac:	cmp	eax, -0x1
100005caf:	jne	0x100005cbf
100005cb1:	lea	rdi, [rip + 0x1ba1] ## literal pool for: "couldn't close output"
100005cb8:	xor	eax, eax
100005cba:	call	0x10000325e
100005cbf:	lea	rdi, [rip + 0x1dae] ## literal pool for: "leaving original %s"
100005cc6:	mov	rsi, r13
100005cc9:	xor	eax, eax
100005ccb:	call	0x100003193
100005cd0:	lea	rdi, [rbp - 0x8d0]
100005cd7:	call	0x100006630 ## symbol stub for: _unlink
100005cdc:	mov	rcx, qword ptr [rbp - 0x8f8]
100005ce3:	jmp	0x1000055f8
100005ce8:	cmp	byte ptr [rip + 0x29e5], 0x0
100005cef:	je	0x1000056c1
100005cf5:	jmp	0x10000576e
100005cfa:	lea	rdi, [rip + 0x1d25] ## literal pool for: "could not create output: %s"
100005d01:	lea	rsi, [rbp - 0x8d0]
100005d08:	xor	eax, eax
100005d0a:	call	0x10000325e
100005d0f:	mov	rax, qword ptr [rip + 0x2302] ## literal pool symbol address: ___stdinp
100005d16:	mov	rdi, qword ptr [rax]
100005d19:	call	0x1000064fe ## symbol stub for: _fclose
100005d1e:	jmp	0x1000055f1
100005d23:	lea	rdi, [rip + 0x19cf] ## literal pool for: "can't open %s"
100005d2a:	lea	rsi, [rbp - 0x8d0]
100005d31:	jmp	0x1000056cb
100005d36:	mov	rax, qword ptr [rbp - 0x8d8]
100005d3d:	test	rax, rax
100005d40:	je	0x100005d52
100005d42:	test	byte ptr [rip + 0x2993], 0x1
100005d49:	jne	0x100005d52
100005d4b:	mov	qword ptr [rbp - 0x980], rax
100005d52:	lea	rdi, [rbp - 0x8d0]
100005d59:	call	0x100006193
100005d5e:	test	eax, eax
100005d60:	je	0x10000576e
100005d66:	mov	cl, byte ptr [rip + 0x2960]
100005d6c:	mov	r12b, byte ptr [rip + 0x295d]
100005d73:	jmp	0x100005b9e
100005d78:	mov	r12d, eax
100005d7b:	cmp	byte ptr [rip + 0x294e], 0x1
100005d82:	jne	0x100005e47
100005d88:	lea	rdi, [rip + 0x19fd] ## literal pool for: "no -l with Lempel-Ziv files"
100005d8f:	jmp	0x100005e09
100005d91:	cmp	byte ptr [rip + 0x2938], 0x1
100005d98:	jne	0x100005f14
100005d9e:	mov	r12d, eax
100005da1:	lea	rdi, [rip + 0x1a54] ## literal pool for: "no -l with packed files"
100005da8:	jmp	0x100005e09
100005daa:	cmp	byte ptr [rip + 0x291f], 0x1
100005db1:	jne	0x100005f2a
100005db7:	mov	r12d, eax
100005dba:	lea	rdi, [rip + 0x1a53] ## literal pool for: "no -l with xz files"
100005dc1:	jmp	0x100005e09
100005dc3:	cmp	byte ptr [rip + 0x2906], 0x1
100005dca:	jne	0x100005f40
100005dd0:	mov	rcx, qword ptr [rbp - 0x980]
100005dd7:	mov	rsi, qword ptr [rbp - 0x950]
100005dde:	lea	rdx, [rbp - 0x8d0]
100005de5:	mov	edi, r15d
100005de8:	call	0x100002f77
100005ded:	jmp	0x10000576e
100005df2:	mov	r12d, eax
100005df5:	cmp	byte ptr [rip + 0x28d4], 0x1
100005dfc:	jne	0x100005f59
100005e02:	lea	rdi, [rip + 0x1a1f] ## literal pool for: "no -l for unknown filetypes"
100005e09:	xor	eax, eax
100005e0b:	call	0x100003193
100005e10:	mov	edi, r15d
100005e13:	call	0x1000064b0 ## symbol stub for: _close
100005e18:	mov	rbx, -0x1
100005e1f:	cmp	r12d, 0x1
100005e23:	jne	0x1000055d3
100005e29:	jmp	0x10000577d
100005e2e:	mov	edi, r15d
100005e31:	mov	r12d, eax
100005e34:	mov	esi, eax
100005e36:	xor	edx, edx
100005e38:	xor	ecx, ecx
100005e3a:	xor	r8d, r8d
100005e3d:	call	0x100003c24
100005e42:	jmp	0x100005f67
100005e47:	mov	edi, r15d
100005e4a:	call	0x100003f14
100005e4f:	test	rax, rax
100005e52:	je	0x10000602e
100005e58:	mov	rbx, rax
100005e5b:	mov	edi, r12d
100005e5e:	call	0x1000064da ## symbol stub for: _dup
100005e63:	lea	rsi, [rip + 0x15da] ## literal pool for: "w"
100005e6a:	mov	edi, eax
100005e6c:	call	0x10000650a ## symbol stub for: _fdopen
100005e71:	test	rax, rax
100005e74:	je	0x10000605e
100005e7a:	mov	rdi, rbx
100005e7d:	mov	qword ptr [rbp - 0x8d8], rax
100005e84:	mov	rsi, rax
100005e87:	xor	edx, edx
100005e89:	xor	ecx, ecx
100005e8b:	xor	r8d, r8d
100005e8e:	call	0x100003fa4
100005e93:	mov	rdi, rbx
100005e96:	mov	qword ptr [rbp - 0x8e8], rbx
100005e9d:	mov	rbx, rax
100005ea0:	call	0x100006510 ## symbol stub for: _ferror
100005ea5:	mov	dword ptr [rbp - 0x8f0], eax
100005eab:	mov	rdi, qword ptr [rbp - 0x8e8]
100005eb2:	call	0x1000064fe ## symbol stub for: _fclose
100005eb7:	or	eax, dword ptr [rbp - 0x8f0]
100005ebd:	je	0x100005ee5
100005ebf:	lea	rdi, [rip + 0x190b] ## literal pool for: "failed infile fclose"
100005ec6:	xor	eax, eax
100005ec8:	call	0x10000325e
100005ecd:	lea	rdi, [rbp - 0x8d0]
100005ed4:	call	0x100006630 ## symbol stub for: _unlink
100005ed9:	mov	rdi, qword ptr [rbp - 0x8d8]
100005ee0:	call	0x1000064fe ## symbol stub for: _fclose
100005ee5:	mov	rdi, qword ptr [rbp - 0x8d8]
100005eec:	call	0x1000064fe ## symbol stub for: _fclose
100005ef1:	test	eax, eax
100005ef3:	je	0x100005f6a
100005ef5:	lea	rdi, [rip + 0x18ea] ## literal pool for: "failed outfile fclose"
100005efc:	xor	eax, eax
100005efe:	call	0x10000325e
100005f03:	lea	rdi, [rbp - 0x8d0]
100005f0a:	call	0x100006630 ## symbol stub for: _unlink
100005f0f:	jmp	0x100005e10
100005f14:	mov	edi, r15d
100005f17:	mov	r12d, eax
100005f1a:	mov	esi, eax
100005f1c:	xor	edx, edx
100005f1e:	xor	ecx, ecx
100005f20:	xor	r8d, r8d
100005f23:	call	0x10000408c
100005f28:	jmp	0x100005f67
100005f2a:	mov	edi, r15d
100005f2d:	mov	r12d, eax
100005f30:	mov	esi, eax
100005f32:	xor	edx, edx
100005f34:	xor	ecx, ecx
100005f36:	xor	r8d, r8d
100005f39:	call	0x100004512
100005f3e:	jmp	0x100005f67
100005f40:	mov	edi, r15d
100005f43:	mov	r12d, eax
100005f46:	mov	esi, eax
100005f48:	xor	edx, edx
100005f4a:	xor	ecx, ecx
100005f4c:	xor	r8d, r8d
100005f4f:	mov	r9, r13
100005f52:	call	0x1000034a3
100005f57:	jmp	0x100005f67
100005f59:	xor	edi, edi
100005f5b:	xor	esi, esi
100005f5d:	xor	edx, edx
100005f5f:	mov	ecx, r15d
100005f62:	call	0x100003399
100005f67:	mov	rbx, rax
100005f6a:	mov	edi, r15d
100005f6d:	call	0x1000064b0 ## symbol stub for: _close
100005f72:	test	eax, eax
100005f74:	je	0x100005f84
100005f76:	lea	rdi, [rip + 0x18c7] ## literal pool for: "couldn't close input"
100005f7d:	xor	eax, eax
100005f7f:	call	0x10000325e
100005f84:	cmp	r12d, 0x1
100005f88:	je	0x100005fa4
100005f8a:	mov	edi, r12d
100005f8d:	call	0x1000064b0 ## symbol stub for: _close
100005f92:	test	eax, eax
100005f94:	je	0x100005fa4
100005f96:	lea	rdi, [rip + 0x18bc] ## literal pool for: "couldn't close output"
100005f9d:	xor	eax, eax
100005f9f:	call	0x10000325e
100005fa4:	cmp	rbx, -0x1
100005fa8:	je	0x100006003
100005faa:	cmp	byte ptr [rip + 0x273b], 0x0
100005fb1:	jne	0x10000577d
100005fb7:	cmp	byte ptr [rip + 0x270e], 0x0
100005fbe:	jne	0x10000577d
100005fc4:	lea	rdi, [rbp - 0x8d0]
100005fcb:	mov	esi, 0x2
100005fd0:	xor	edx, edx
100005fd2:	xor	eax, eax
100005fd4:	call	0x1000065d0 ## symbol stub for: _open
100005fd9:	cmp	eax, -0x1
100005fdc:	je	0x100006044
100005fde:	mov	r15d, eax
100005fe1:	lea	rsi, [rbp - 0xc0]
100005fe8:	mov	edi, eax
100005fea:	call	0x10000654c ## symbol stub for: _fstat$INODE64
100005fef:	test	eax, eax
100005ff1:	je	0x100006080
100005ff7:	lea	rdi, [rip + 0x18ac] ## literal pool for: "couldn't stat (leaving original): %s"
100005ffe:	jmp	0x100005d2a
100006003:	cmp	byte ptr [rip + 0x26c2], 0x0
10000600a:	jne	0x100006018
10000600c:	lea	rdi, [rbp - 0x8d0]
100006013:	call	0x100006630 ## symbol stub for: _unlink
100006018:	lea	rdi, [rip + 0x1850] ## literal pool for: "%s: uncompress failed"
10000601f:	mov	rsi, r13
100006022:	xor	eax, eax
100006024:	call	0x100003193
100006029:	jmp	0x100005776
10000602e:	lea	rdi, [rip + 0x1773] ## literal pool for: "zdopen for read: %s"
100006035:	mov	rsi, r13
100006038:	xor	eax, eax
10000603a:	call	0x10000325e
10000603f:	jmp	0x100005e10
100006044:	lea	rdi, [rip + 0x183a] ## literal pool for: "couldn't open (leaving original): %s"
10000604b:	lea	rsi, [rbp - 0x8d0]
100006052:	xor	eax, eax
100006054:	call	0x10000325e
100006059:	jmp	0x100005776
10000605e:	lea	rdi, [rip + 0x1757] ## literal pool for: "fdopen for write: %s"
100006065:	lea	rsi, [rbp - 0x8d0]
10000606c:	xor	eax, eax
10000606e:	call	0x10000325e
100006073:	mov	rdi, rbx
100006076:	call	0x1000064fe ## symbol stub for: _fclose
10000607b:	jmp	0x100005e10
100006080:	mov	rdx, qword ptr [rbp - 0x60]
100006084:	cmp	rdx, rbx
100006087:	jne	0x1000060c5
100006089:	lea	r12, [rbp - 0x9b0]
100006090:	lea	rdx, [rbp - 0x8d0]
100006097:	mov	edi, r15d
10000609a:	mov	rsi, r12
10000609d:	call	0x1000062a6
1000060a2:	mov	qword ptr [rip + 0x264b], 0x0
1000060ad:	mov	edi, r15d
1000060b0:	call	0x1000064b0 ## symbol stub for: _close
1000060b5:	mov	rdi, r13
1000060b8:	mov	rsi, r12
1000060bb:	call	0x1000063eb
1000060c0:	jmp	0x10000577d
1000060c5:	lea	rdi, [rip + 0x1803] ## literal pool for: "stat gave different size: %ju != %ju (leaving original)"
1000060cc:	mov	rsi, rbx
1000060cf:	xor	eax, eax
1000060d1:	call	0x100003193
1000060d6:	mov	edi, r15d
1000060d9:	call	0x1000064b0 ## symbol stub for: _close
1000060de:	lea	rdi, [rbp - 0x8d0]
1000060e5:	call	0x100006630 ## symbol stub for: _unlink
1000060ea:	jmp	0x100005776
1000060ef:	call	0x100006492 ## symbol stub for: ___stack_chk_fail
1000060f4:	sti
	.byte 0xff #bad opcode
1000060f7:	inc	dword ptr [rsp + 8*rdi - 0x3620001]
	.byte 0xff #bad opcode
1000060ff:	push	qword ptr [rsi - 0x30000004]
100006105:	cld
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xfe #bad opcode
100006109:	cld
	.byte 0xff #bad opcode
10000610b:	call	qword ptr [rbp + 0x48]
10000610e:	mov	ebp, esp
100006110:	push	r15
100006112:	push	r14
100006114:	push	r13
100006116:	push	r12
100006118:	push	rbx
100006119:	push	rax
10000611a:	mov	dword ptr [rbp - 0x2c], esi
10000611d:	mov	rbx, rdi
100006120:	call	0x100006612 ## symbol stub for: _strlen
100006125:	mov	r12, rax
100006128:	movsxd	r15, r12d
10000612b:	add	r15, rbx
10000612e:	lea	r13, [rip + 0x243b]
100006135:	xor	r14d, r14d
100006138:	movsxd	rax, dword ptr [r14 + r13 + 0x8]
10000613d:	cmp	eax, r12d
100006140:	jge	0x100006158
100006142:	mov	rbx, r15
100006145:	sub	rbx, rax
100006148:	mov	rdi, qword ptr [r14 + r13]
10000614c:	mov	rsi, rbx
10000614f:	call	0x100006600 ## symbol stub for: _strcmp
100006154:	test	eax, eax
100006156:	je	0x10000616a
100006158:	add	r14, 0x18
10000615c:	cmp	r14, 0x150
100006163:	jne	0x100006138
100006165:	xor	r15d, r15d
100006168:	jmp	0x100006181
10000616a:	lea	r15, [r14 + r13]
10000616e:	cmp	dword ptr [rbp - 0x2c], 0x0
100006172:	je	0x100006181
100006174:	mov	rsi, qword ptr [r14 + r13 + 0x10]
100006179:	mov	rdi, rbx
10000617c:	call	0x100006606 ## symbol stub for: _strcpy
100006181:	mov	rax, r15
100006184:	add	rsp, 0x8
100006188:	pop	rbx
100006189:	pop	r12
10000618b:	pop	r13
10000618d:	pop	r14
10000618f:	pop	r15
100006191:	pop	rbp
100006192:	ret
100006193:	push	rbp
100006194:	mov	rbp, rsp
100006197:	push	r15
100006199:	push	r14
10000619b:	push	r12
10000619d:	push	rbx
10000619e:	sub	rsp, 0xb0
1000061a5:	mov	rax, qword ptr [rip + 0x1e5c] ## literal pool symbol address: ___stack_chk_guard
1000061ac:	mov	rax, qword ptr [rax]
1000061af:	mov	qword ptr [rbp - 0x28], rax
1000061b3:	mov	ebx, 0x1
1000061b8:	cmp	byte ptr [rip + 0x2511], 0x0
1000061bf:	jne	0x10000627f
1000061c5:	mov	r14, rdi
1000061c8:	lea	rsi, [rbp - 0xc8]
1000061cf:	call	0x1000065fa ## symbol stub for: _stat$INODE64
1000061d4:	test	eax, eax
1000061d6:	jne	0x10000627f
1000061dc:	cmp	byte ptr [rip + 0x24f1], 0x1
1000061e3:	je	0x100006246
1000061e5:	xor	edi, edi
1000061e7:	call	0x1000065a0 ## symbol stub for: _isatty
1000061ec:	test	eax, eax
1000061ee:	je	0x100006250
1000061f0:	movzx	eax, word ptr [rip + 0x832]
1000061f7:	lea	r15, [rbp - 0x38]
1000061fb:	mov	word ptr [r15 + 0x8], ax
100006200:	mov	rax, qword ptr [rip + 0x81a]
100006207:	mov	qword ptr [r15], rax
10000620a:	mov	r12, qword ptr [rip + 0x1dff] ## literal pool symbol address: ___stderrp
100006211:	mov	rdi, qword ptr [r12]
100006215:	lea	rsi, [rip + 0x16eb] ## literal pool for: "%s already exists -- do you wish to overwrite (y or n)? "
10000621c:	mov	rdx, r14
10000621f:	xor	eax, eax
100006221:	call	0x10000652e ## symbol stub for: _fprintf
100006226:	mov	rax, qword ptr [rip + 0x1deb] ## literal pool symbol address: ___stdinp
10000622d:	mov	rdx, qword ptr [rax]
100006230:	mov	rdi, r15
100006233:	mov	esi, 0x9
100006238:	call	0x100006528 ## symbol stub for: _fgets
10000623d:	mov	al, byte ptr [r15]
100006240:	or	al, 0x20
100006242:	cmp	al, 0x79
100006244:	jne	0x100006263
100006246:	mov	rdi, r14
100006249:	call	0x100006630 ## symbol stub for: _unlink
10000624e:	jmp	0x10000627f
100006250:	lea	rdi, [rip + 0x16fb] ## literal pool for: "%s already exists -- skipping"
100006257:	mov	rsi, r14
10000625a:	xor	eax, eax
10000625c:	call	0x100003193
100006261:	jmp	0x10000627d
100006263:	mov	rcx, qword ptr [r12]
100006267:	lea	rdi, [rip + 0x16d2] ## literal pool for: "\tnot overwriting\n"
10000626e:	mov	esi, 0x11
100006273:	mov	edx, 0x1
100006278:	call	0x100006570 ## symbol stub for: _fwrite
10000627d:	xor	ebx, ebx
10000627f:	mov	rax, qword ptr [rip + 0x1d82] ## literal pool symbol address: ___stack_chk_guard
100006286:	mov	rax, qword ptr [rax]
100006289:	cmp	rax, qword ptr [rbp - 0x28]
10000628d:	jne	0x1000062a1
10000628f:	mov	eax, ebx
100006291:	add	rsp, 0xb0
100006298:	pop	rbx
100006299:	pop	r12
10000629b:	pop	r14
10000629d:	pop	r15
10000629f:	pop	rbp
1000062a0:	ret
1000062a1:	call	0x100006492 ## symbol stub for: ___stack_chk_fail
1000062a6:	push	rbp
1000062a7:	mov	rbp, rsp
1000062aa:	push	r15
1000062ac:	push	r14
1000062ae:	push	r12
1000062b0:	push	rbx
1000062b1:	sub	rsp, 0x60
1000062b5:	mov	r12d, edi
1000062b8:	mov	rax, qword ptr [rip + 0x1d49] ## literal pool symbol address: ___stack_chk_guard
1000062bf:	mov	rax, qword ptr [rax]
1000062c2:	mov	qword ptr [rbp - 0x28], rax
1000062c6:	test	rsi, rsi
1000062c9:	je	0x1000063a3
1000062cf:	mov	r14, rdx
1000062d2:	movzx	ebx, word ptr [rsi + 0x4]
1000062d6:	mov	eax, dword ptr [rsi + 0x10]
1000062d9:	mov	edx, dword ptr [rsi + 0x14]
1000062dc:	mov	rcx, qword ptr [rsi + 0x28]
1000062e0:	mov	qword ptr [rbp - 0x70], rcx
1000062e4:	movups	xmm0, xmmword ptr [rsi + 0x18]
1000062e8:	movaps	xmmword ptr [rbp - 0x80], xmm0
1000062ec:	movups	xmm0, xmmword ptr [rsi + 0x30]
1000062f0:	movaps	xmmword ptr [rbp - 0x60], xmm0
1000062f4:	mov	r15d, dword ptr [rsi + 0x74]
1000062f8:	mov	edi, r12d
1000062fb:	mov	esi, eax
1000062fd:	call	0x1000064f8 ## symbol stub for: _fchown
100006302:	test	eax, eax
100006304:	jns	0x100006327
100006306:	call	0x100006480 ## symbol stub for: ___error
10000630b:	cmp	dword ptr [rax], 0x1
10000630e:	je	0x100006321
100006310:	lea	rdi, [rip + 0x1659] ## literal pool for: "couldn't fchown: %s"
100006317:	mov	rsi, r14
10000631a:	xor	eax, eax
10000631c:	call	0x10000325e
100006321:	and	ebx, 0xf3ff
100006327:	and	ebx, 0xdff
10000632d:	mov	edi, r12d
100006330:	mov	esi, ebx
100006332:	call	0x1000064f2 ## symbol stub for: _fchmod
100006337:	test	eax, eax
100006339:	jns	0x10000634c
10000633b:	lea	rdi, [rip + 0x1642] ## literal pool for: "couldn't fchmod: %s"
100006342:	mov	rsi, r14
100006345:	xor	eax, eax
100006347:	call	0x10000325e
10000634c:	movups	xmm0, xmmword ptr [rbp - 0x78]
100006350:	lea	rsi, [rbp - 0x50]
100006354:	movaps	xmmword ptr [rsi], xmm0
100006357:	movaps	xmm0, xmmword ptr [rbp - 0x60]
10000635b:	movaps	xmmword ptr [rsi + 0x10], xmm0
10000635f:	mov	edi, r12d
100006362:	call	0x10000221c
100006367:	test	eax, eax
100006369:	jns	0x10000637c
10000636b:	lea	rdi, [rip + 0x1626] ## literal pool for: "couldn't futimens: %s"
100006372:	mov	rsi, r14
100006375:	xor	eax, eax
100006377:	call	0x10000325e
10000637c:	test	r15d, r15d
10000637f:	je	0x1000063c9
100006381:	mov	edi, r12d
100006384:	mov	esi, r15d
100006387:	call	0x1000064ec ## symbol stub for: _fchflags
10000638c:	test	eax, eax
10000638e:	jns	0x1000063c9
100006390:	lea	rdi, [rip + 0x1617] ## literal pool for: "couldn't fchflags: %s"
100006397:	mov	rsi, r14
10000639a:	xor	eax, eax
10000639c:	call	0x10000325e
1000063a1:	jmp	0x1000063c9
1000063a3:	mov	edi, 0x12
1000063a8:	call	0x10000662a ## symbol stub for: _umask
1000063ad:	mov	ebx, eax
1000063af:	mov	esi, ebx
1000063b1:	not	esi
1000063b3:	and	esi, 0x1b6
1000063b9:	mov	edi, r12d
1000063bc:	call	0x1000064f2 ## symbol stub for: _fchmod
1000063c1:	movzx	edi, bx
1000063c4:	call	0x10000662a ## symbol stub for: _umask
1000063c9:	mov	rax, qword ptr [rip + 0x1c38] ## literal pool symbol address: ___stack_chk_guard
1000063d0:	mov	rax, qword ptr [rax]
1000063d3:	cmp	rax, qword ptr [rbp - 0x28]
1000063d7:	jne	0x1000063e6
1000063d9:	add	rsp, 0x60
1000063dd:	pop	rbx
1000063de:	pop	r12
1000063e0:	pop	r14
1000063e2:	pop	r15
1000063e4:	pop	rbp
1000063e5:	ret
1000063e6:	call	0x100006492 ## symbol stub for: ___stack_chk_fail
1000063eb:	push	rbp
1000063ec:	mov	rbp, rsp
1000063ef:	push	r14
1000063f1:	push	rbx
1000063f2:	sub	rsp, 0x90
1000063f9:	cmp	byte ptr [rip + 0x22d8], 0x0
100006400:	jne	0x100006461
100006402:	mov	r14, rsi
100006405:	mov	rbx, rdi
100006408:	xorps	xmm0, xmm0
10000640b:	lea	rsi, [rbp - 0xa0]
100006412:	movaps	xmmword ptr [rsi + 0x80], xmm0
100006419:	movaps	xmmword ptr [rsi + 0x70], xmm0
10000641d:	movaps	xmmword ptr [rsi + 0x60], xmm0
100006421:	movaps	xmmword ptr [rsi + 0x50], xmm0
100006425:	movaps	xmmword ptr [rsi + 0x40], xmm0
100006429:	movaps	xmmword ptr [rsi + 0x30], xmm0
10000642d:	movaps	xmmword ptr [rsi + 0x20], xmm0
100006431:	movaps	xmmword ptr [rsi + 0x10], xmm0
100006435:	movaps	xmmword ptr [rsi], xmm0
100006438:	call	0x1000065fa ## symbol stub for: _stat$INODE64
10000643d:	test	eax, eax
10000643f:	jne	0x100006461
100006441:	mov	eax, dword ptr [rbp - 0xa0]
100006447:	cmp	eax, dword ptr [r14]
10000644a:	jne	0x100006461
10000644c:	mov	rax, qword ptr [rbp - 0x98]
100006453:	cmp	rax, qword ptr [r14 + 0x8]
100006457:	jne	0x100006461
100006459:	mov	rdi, rbx
10000645c:	call	0x100006630 ## symbol stub for: _unlink
100006461:	add	rsp, 0x90
100006468:	pop	rbx
100006469:	pop	r14
10000646b:	pop	rbp
10000646c:	ret
