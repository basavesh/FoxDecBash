
/usr/bin/du:     file format elf64-x86-64


Disassembly of section .init:

0000000000003000 <.init>:
    3000:	endbr64 
    3004:	sub    rsp,0x8
    3008:	mov    rax,QWORD PTR [rip+0x28fd9]        # 2bfe8 <__sprintf_chk@plt+0x28308>
    300f:	test   rax,rax
    3012:	je     3016 <free@plt-0x66a>
    3014:	call   rax
    3016:	add    rsp,0x8
    301a:	ret    

Disassembly of section .plt:

0000000000003020 <.plt>:
    3020:	push   QWORD PTR [rip+0x28c6a]        # 2bc90 <__sprintf_chk@plt+0x27fb0>
    3026:	bnd jmp QWORD PTR [rip+0x28c6b]        # 2bc98 <__sprintf_chk@plt+0x27fb8>
    302d:	nop    DWORD PTR [rax]
    3030:	endbr64 
    3034:	push   0x0
    3039:	bnd jmp 3020 <free@plt-0x660>
    303f:	nop
    3040:	endbr64 
    3044:	push   0x1
    3049:	bnd jmp 3020 <free@plt-0x660>
    304f:	nop
    3050:	endbr64 
    3054:	push   0x2
    3059:	bnd jmp 3020 <free@plt-0x660>
    305f:	nop
    3060:	endbr64 
    3064:	push   0x3
    3069:	bnd jmp 3020 <free@plt-0x660>
    306f:	nop
    3070:	endbr64 
    3074:	push   0x4
    3079:	bnd jmp 3020 <free@plt-0x660>
    307f:	nop
    3080:	endbr64 
    3084:	push   0x5
    3089:	bnd jmp 3020 <free@plt-0x660>
    308f:	nop
    3090:	endbr64 
    3094:	push   0x6
    3099:	bnd jmp 3020 <free@plt-0x660>
    309f:	nop
    30a0:	endbr64 
    30a4:	push   0x7
    30a9:	bnd jmp 3020 <free@plt-0x660>
    30af:	nop
    30b0:	endbr64 
    30b4:	push   0x8
    30b9:	bnd jmp 3020 <free@plt-0x660>
    30bf:	nop
    30c0:	endbr64 
    30c4:	push   0x9
    30c9:	bnd jmp 3020 <free@plt-0x660>
    30cf:	nop
    30d0:	endbr64 
    30d4:	push   0xa
    30d9:	bnd jmp 3020 <free@plt-0x660>
    30df:	nop
    30e0:	endbr64 
    30e4:	push   0xb
    30e9:	bnd jmp 3020 <free@plt-0x660>
    30ef:	nop
    30f0:	endbr64 
    30f4:	push   0xc
    30f9:	bnd jmp 3020 <free@plt-0x660>
    30ff:	nop
    3100:	endbr64 
    3104:	push   0xd
    3109:	bnd jmp 3020 <free@plt-0x660>
    310f:	nop
    3110:	endbr64 
    3114:	push   0xe
    3119:	bnd jmp 3020 <free@plt-0x660>
    311f:	nop
    3120:	endbr64 
    3124:	push   0xf
    3129:	bnd jmp 3020 <free@plt-0x660>
    312f:	nop
    3130:	endbr64 
    3134:	push   0x10
    3139:	bnd jmp 3020 <free@plt-0x660>
    313f:	nop
    3140:	endbr64 
    3144:	push   0x11
    3149:	bnd jmp 3020 <free@plt-0x660>
    314f:	nop
    3150:	endbr64 
    3154:	push   0x12
    3159:	bnd jmp 3020 <free@plt-0x660>
    315f:	nop
    3160:	endbr64 
    3164:	push   0x13
    3169:	bnd jmp 3020 <free@plt-0x660>
    316f:	nop
    3170:	endbr64 
    3174:	push   0x14
    3179:	bnd jmp 3020 <free@plt-0x660>
    317f:	nop
    3180:	endbr64 
    3184:	push   0x15
    3189:	bnd jmp 3020 <free@plt-0x660>
    318f:	nop
    3190:	endbr64 
    3194:	push   0x16
    3199:	bnd jmp 3020 <free@plt-0x660>
    319f:	nop
    31a0:	endbr64 
    31a4:	push   0x17
    31a9:	bnd jmp 3020 <free@plt-0x660>
    31af:	nop
    31b0:	endbr64 
    31b4:	push   0x18
    31b9:	bnd jmp 3020 <free@plt-0x660>
    31bf:	nop
    31c0:	endbr64 
    31c4:	push   0x19
    31c9:	bnd jmp 3020 <free@plt-0x660>
    31cf:	nop
    31d0:	endbr64 
    31d4:	push   0x1a
    31d9:	bnd jmp 3020 <free@plt-0x660>
    31df:	nop
    31e0:	endbr64 
    31e4:	push   0x1b
    31e9:	bnd jmp 3020 <free@plt-0x660>
    31ef:	nop
    31f0:	endbr64 
    31f4:	push   0x1c
    31f9:	bnd jmp 3020 <free@plt-0x660>
    31ff:	nop
    3200:	endbr64 
    3204:	push   0x1d
    3209:	bnd jmp 3020 <free@plt-0x660>
    320f:	nop
    3210:	endbr64 
    3214:	push   0x1e
    3219:	bnd jmp 3020 <free@plt-0x660>
    321f:	nop
    3220:	endbr64 
    3224:	push   0x1f
    3229:	bnd jmp 3020 <free@plt-0x660>
    322f:	nop
    3230:	endbr64 
    3234:	push   0x20
    3239:	bnd jmp 3020 <free@plt-0x660>
    323f:	nop
    3240:	endbr64 
    3244:	push   0x21
    3249:	bnd jmp 3020 <free@plt-0x660>
    324f:	nop
    3250:	endbr64 
    3254:	push   0x22
    3259:	bnd jmp 3020 <free@plt-0x660>
    325f:	nop
    3260:	endbr64 
    3264:	push   0x23
    3269:	bnd jmp 3020 <free@plt-0x660>
    326f:	nop
    3270:	endbr64 
    3274:	push   0x24
    3279:	bnd jmp 3020 <free@plt-0x660>
    327f:	nop
    3280:	endbr64 
    3284:	push   0x25
    3289:	bnd jmp 3020 <free@plt-0x660>
    328f:	nop
    3290:	endbr64 
    3294:	push   0x26
    3299:	bnd jmp 3020 <free@plt-0x660>
    329f:	nop
    32a0:	endbr64 
    32a4:	push   0x27
    32a9:	bnd jmp 3020 <free@plt-0x660>
    32af:	nop
    32b0:	endbr64 
    32b4:	push   0x28
    32b9:	bnd jmp 3020 <free@plt-0x660>
    32bf:	nop
    32c0:	endbr64 
    32c4:	push   0x29
    32c9:	bnd jmp 3020 <free@plt-0x660>
    32cf:	nop
    32d0:	endbr64 
    32d4:	push   0x2a
    32d9:	bnd jmp 3020 <free@plt-0x660>
    32df:	nop
    32e0:	endbr64 
    32e4:	push   0x2b
    32e9:	bnd jmp 3020 <free@plt-0x660>
    32ef:	nop
    32f0:	endbr64 
    32f4:	push   0x2c
    32f9:	bnd jmp 3020 <free@plt-0x660>
    32ff:	nop
    3300:	endbr64 
    3304:	push   0x2d
    3309:	bnd jmp 3020 <free@plt-0x660>
    330f:	nop
    3310:	endbr64 
    3314:	push   0x2e
    3319:	bnd jmp 3020 <free@plt-0x660>
    331f:	nop
    3320:	endbr64 
    3324:	push   0x2f
    3329:	bnd jmp 3020 <free@plt-0x660>
    332f:	nop
    3330:	endbr64 
    3334:	push   0x30
    3339:	bnd jmp 3020 <free@plt-0x660>
    333f:	nop
    3340:	endbr64 
    3344:	push   0x31
    3349:	bnd jmp 3020 <free@plt-0x660>
    334f:	nop
    3350:	endbr64 
    3354:	push   0x32
    3359:	bnd jmp 3020 <free@plt-0x660>
    335f:	nop
    3360:	endbr64 
    3364:	push   0x33
    3369:	bnd jmp 3020 <free@plt-0x660>
    336f:	nop
    3370:	endbr64 
    3374:	push   0x34
    3379:	bnd jmp 3020 <free@plt-0x660>
    337f:	nop
    3380:	endbr64 
    3384:	push   0x35
    3389:	bnd jmp 3020 <free@plt-0x660>
    338f:	nop
    3390:	endbr64 
    3394:	push   0x36
    3399:	bnd jmp 3020 <free@plt-0x660>
    339f:	nop
    33a0:	endbr64 
    33a4:	push   0x37
    33a9:	bnd jmp 3020 <free@plt-0x660>
    33af:	nop
    33b0:	endbr64 
    33b4:	push   0x38
    33b9:	bnd jmp 3020 <free@plt-0x660>
    33bf:	nop
    33c0:	endbr64 
    33c4:	push   0x39
    33c9:	bnd jmp 3020 <free@plt-0x660>
    33cf:	nop
    33d0:	endbr64 
    33d4:	push   0x3a
    33d9:	bnd jmp 3020 <free@plt-0x660>
    33df:	nop
    33e0:	endbr64 
    33e4:	push   0x3b
    33e9:	bnd jmp 3020 <free@plt-0x660>
    33ef:	nop
    33f0:	endbr64 
    33f4:	push   0x3c
    33f9:	bnd jmp 3020 <free@plt-0x660>
    33ff:	nop
    3400:	endbr64 
    3404:	push   0x3d
    3409:	bnd jmp 3020 <free@plt-0x660>
    340f:	nop
    3410:	endbr64 
    3414:	push   0x3e
    3419:	bnd jmp 3020 <free@plt-0x660>
    341f:	nop
    3420:	endbr64 
    3424:	push   0x3f
    3429:	bnd jmp 3020 <free@plt-0x660>
    342f:	nop
    3430:	endbr64 
    3434:	push   0x40
    3439:	bnd jmp 3020 <free@plt-0x660>
    343f:	nop
    3440:	endbr64 
    3444:	push   0x41
    3449:	bnd jmp 3020 <free@plt-0x660>
    344f:	nop
    3450:	endbr64 
    3454:	push   0x42
    3459:	bnd jmp 3020 <free@plt-0x660>
    345f:	nop
    3460:	endbr64 
    3464:	push   0x43
    3469:	bnd jmp 3020 <free@plt-0x660>
    346f:	nop
    3470:	endbr64 
    3474:	push   0x44
    3479:	bnd jmp 3020 <free@plt-0x660>
    347f:	nop
    3480:	endbr64 
    3484:	push   0x45
    3489:	bnd jmp 3020 <free@plt-0x660>
    348f:	nop
    3490:	endbr64 
    3494:	push   0x46
    3499:	bnd jmp 3020 <free@plt-0x660>
    349f:	nop
    34a0:	endbr64 
    34a4:	push   0x47
    34a9:	bnd jmp 3020 <free@plt-0x660>
    34af:	nop
    34b0:	endbr64 
    34b4:	push   0x48
    34b9:	bnd jmp 3020 <free@plt-0x660>
    34bf:	nop
    34c0:	endbr64 
    34c4:	push   0x49
    34c9:	bnd jmp 3020 <free@plt-0x660>
    34cf:	nop
    34d0:	endbr64 
    34d4:	push   0x4a
    34d9:	bnd jmp 3020 <free@plt-0x660>
    34df:	nop
    34e0:	endbr64 
    34e4:	push   0x4b
    34e9:	bnd jmp 3020 <free@plt-0x660>
    34ef:	nop
    34f0:	endbr64 
    34f4:	push   0x4c
    34f9:	bnd jmp 3020 <free@plt-0x660>
    34ff:	nop
    3500:	endbr64 
    3504:	push   0x4d
    3509:	bnd jmp 3020 <free@plt-0x660>
    350f:	nop
    3510:	endbr64 
    3514:	push   0x4e
    3519:	bnd jmp 3020 <free@plt-0x660>
    351f:	nop
    3520:	endbr64 
    3524:	push   0x4f
    3529:	bnd jmp 3020 <free@plt-0x660>
    352f:	nop
    3530:	endbr64 
    3534:	push   0x50
    3539:	bnd jmp 3020 <free@plt-0x660>
    353f:	nop
    3540:	endbr64 
    3544:	push   0x51
    3549:	bnd jmp 3020 <free@plt-0x660>
    354f:	nop
    3550:	endbr64 
    3554:	push   0x52
    3559:	bnd jmp 3020 <free@plt-0x660>
    355f:	nop
    3560:	endbr64 
    3564:	push   0x53
    3569:	bnd jmp 3020 <free@plt-0x660>
    356f:	nop
    3570:	endbr64 
    3574:	push   0x54
    3579:	bnd jmp 3020 <free@plt-0x660>
    357f:	nop
    3580:	endbr64 
    3584:	push   0x55
    3589:	bnd jmp 3020 <free@plt-0x660>
    358f:	nop
    3590:	endbr64 
    3594:	push   0x56
    3599:	bnd jmp 3020 <free@plt-0x660>
    359f:	nop
    35a0:	endbr64 
    35a4:	push   0x57
    35a9:	bnd jmp 3020 <free@plt-0x660>
    35af:	nop
    35b0:	endbr64 
    35b4:	push   0x58
    35b9:	bnd jmp 3020 <free@plt-0x660>
    35bf:	nop
    35c0:	endbr64 
    35c4:	push   0x59
    35c9:	bnd jmp 3020 <free@plt-0x660>
    35cf:	nop
    35d0:	endbr64 
    35d4:	push   0x5a
    35d9:	bnd jmp 3020 <free@plt-0x660>
    35df:	nop
    35e0:	endbr64 
    35e4:	push   0x5b
    35e9:	bnd jmp 3020 <free@plt-0x660>
    35ef:	nop
    35f0:	endbr64 
    35f4:	push   0x5c
    35f9:	bnd jmp 3020 <free@plt-0x660>
    35ff:	nop
    3600:	endbr64 
    3604:	push   0x5d
    3609:	bnd jmp 3020 <free@plt-0x660>
    360f:	nop
    3610:	endbr64 
    3614:	push   0x5e
    3619:	bnd jmp 3020 <free@plt-0x660>
    361f:	nop
    3620:	endbr64 
    3624:	push   0x5f
    3629:	bnd jmp 3020 <free@plt-0x660>
    362f:	nop
    3630:	endbr64 
    3634:	push   0x60
    3639:	bnd jmp 3020 <free@plt-0x660>
    363f:	nop
    3640:	endbr64 
    3644:	push   0x61
    3649:	bnd jmp 3020 <free@plt-0x660>
    364f:	nop
    3650:	endbr64 
    3654:	push   0x62
    3659:	bnd jmp 3020 <free@plt-0x660>
    365f:	nop
    3660:	endbr64 
    3664:	push   0x63
    3669:	bnd jmp 3020 <free@plt-0x660>
    366f:	nop
    3670:	endbr64 
    3674:	push   0x64
    3679:	bnd jmp 3020 <free@plt-0x660>
    367f:	nop

Disassembly of section .plt.got:

0000000000003680 <free@plt>:
    3680:	endbr64 
    3684:	bnd jmp QWORD PTR [rip+0x2893d]        # 2bfc8 <__sprintf_chk@plt+0x282e8>
    368b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003690 <__cxa_finalize@plt>:
    3690:	endbr64 
    3694:	bnd jmp QWORD PTR [rip+0x2895d]        # 2bff8 <__sprintf_chk@plt+0x28318>
    369b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

00000000000036a0 <__ctype_toupper_loc@plt>:
    36a0:	endbr64 
    36a4:	bnd jmp QWORD PTR [rip+0x285f5]        # 2bca0 <__sprintf_chk@plt+0x27fc0>
    36ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036b0 <__uflow@plt>:
    36b0:	endbr64 
    36b4:	bnd jmp QWORD PTR [rip+0x285ed]        # 2bca8 <__sprintf_chk@plt+0x27fc8>
    36bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036c0 <getenv@plt>:
    36c0:	endbr64 
    36c4:	bnd jmp QWORD PTR [rip+0x285e5]        # 2bcb0 <__sprintf_chk@plt+0x27fd0>
    36cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036d0 <endmntent@plt>:
    36d0:	endbr64 
    36d4:	bnd jmp QWORD PTR [rip+0x285dd]        # 2bcb8 <__sprintf_chk@plt+0x27fd8>
    36db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036e0 <abort@plt>:
    36e0:	endbr64 
    36e4:	bnd jmp QWORD PTR [rip+0x285d5]        # 2bcc0 <__sprintf_chk@plt+0x27fe0>
    36eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000036f0 <__errno_location@plt>:
    36f0:	endbr64 
    36f4:	bnd jmp QWORD PTR [rip+0x285cd]        # 2bcc8 <__sprintf_chk@plt+0x27fe8>
    36fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003700 <strncmp@plt>:
    3700:	endbr64 
    3704:	bnd jmp QWORD PTR [rip+0x285c5]        # 2bcd0 <__sprintf_chk@plt+0x27ff0>
    370b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003710 <localtime_r@plt>:
    3710:	endbr64 
    3714:	bnd jmp QWORD PTR [rip+0x285bd]        # 2bcd8 <__sprintf_chk@plt+0x27ff8>
    371b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003720 <_exit@plt>:
    3720:	endbr64 
    3724:	bnd jmp QWORD PTR [rip+0x285b5]        # 2bce0 <__sprintf_chk@plt+0x28000>
    372b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003730 <strcpy@plt>:
    3730:	endbr64 
    3734:	bnd jmp QWORD PTR [rip+0x285ad]        # 2bce8 <__sprintf_chk@plt+0x28008>
    373b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003740 <__fpending@plt>:
    3740:	endbr64 
    3744:	bnd jmp QWORD PTR [rip+0x285a5]        # 2bcf0 <__sprintf_chk@plt+0x28010>
    374b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003750 <qsort@plt>:
    3750:	endbr64 
    3754:	bnd jmp QWORD PTR [rip+0x2859d]        # 2bcf8 <__sprintf_chk@plt+0x28018>
    375b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003760 <iswcntrl@plt>:
    3760:	endbr64 
    3764:	bnd jmp QWORD PTR [rip+0x28595]        # 2bd00 <__sprintf_chk@plt+0x28020>
    376b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003770 <localeconv@plt>:
    3770:	endbr64 
    3774:	bnd jmp QWORD PTR [rip+0x2858d]        # 2bd08 <__sprintf_chk@plt+0x28028>
    377b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003780 <fcntl@plt>:
    3780:	endbr64 
    3784:	bnd jmp QWORD PTR [rip+0x28585]        # 2bd10 <__sprintf_chk@plt+0x28030>
    378b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003790 <setenv@plt>:
    3790:	endbr64 
    3794:	bnd jmp QWORD PTR [rip+0x2857d]        # 2bd18 <__sprintf_chk@plt+0x28038>
    379b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037a0 <textdomain@plt>:
    37a0:	endbr64 
    37a4:	bnd jmp QWORD PTR [rip+0x28575]        # 2bd20 <__sprintf_chk@plt+0x28040>
    37ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037b0 <__strtol_internal@plt>:
    37b0:	endbr64 
    37b4:	bnd jmp QWORD PTR [rip+0x2856d]        # 2bd28 <__sprintf_chk@plt+0x28048>
    37bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037c0 <iswctype@plt>:
    37c0:	endbr64 
    37c4:	bnd jmp QWORD PTR [rip+0x28565]        # 2bd30 <__sprintf_chk@plt+0x28050>
    37cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037d0 <fclose@plt>:
    37d0:	endbr64 
    37d4:	bnd jmp QWORD PTR [rip+0x2855d]        # 2bd38 <__sprintf_chk@plt+0x28058>
    37db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037e0 <bindtextdomain@plt>:
    37e0:	endbr64 
    37e4:	bnd jmp QWORD PTR [rip+0x28555]        # 2bd40 <__sprintf_chk@plt+0x28060>
    37eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000037f0 <dcgettext@plt>:
    37f0:	endbr64 
    37f4:	bnd jmp QWORD PTR [rip+0x2854d]        # 2bd48 <__sprintf_chk@plt+0x28068>
    37fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003800 <__ctype_get_mb_cur_max@plt>:
    3800:	endbr64 
    3804:	bnd jmp QWORD PTR [rip+0x28545]        # 2bd50 <__sprintf_chk@plt+0x28070>
    380b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003810 <strlen@plt>:
    3810:	endbr64 
    3814:	bnd jmp QWORD PTR [rip+0x2853d]        # 2bd58 <__sprintf_chk@plt+0x28078>
    381b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003820 <__lxstat@plt>:
    3820:	endbr64 
    3824:	bnd jmp QWORD PTR [rip+0x28535]        # 2bd60 <__sprintf_chk@plt+0x28080>
    382b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003830 <openat@plt>:
    3830:	endbr64 
    3834:	bnd jmp QWORD PTR [rip+0x2852d]        # 2bd68 <__sprintf_chk@plt+0x28088>
    383b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003840 <__stack_chk_fail@plt>:
    3840:	endbr64 
    3844:	bnd jmp QWORD PTR [rip+0x28525]        # 2bd70 <__sprintf_chk@plt+0x28090>
    384b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003850 <getopt_long@plt>:
    3850:	endbr64 
    3854:	bnd jmp QWORD PTR [rip+0x2851d]        # 2bd78 <__sprintf_chk@plt+0x28098>
    385b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003860 <mbrtowc@plt>:
    3860:	endbr64 
    3864:	bnd jmp QWORD PTR [rip+0x28515]        # 2bd80 <__sprintf_chk@plt+0x280a0>
    386b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003870 <dup2@plt>:
    3870:	endbr64 
    3874:	bnd jmp QWORD PTR [rip+0x2850d]        # 2bd88 <__sprintf_chk@plt+0x280a8>
    387b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003880 <strchr@plt>:
    3880:	endbr64 
    3884:	bnd jmp QWORD PTR [rip+0x28505]        # 2bd90 <__sprintf_chk@plt+0x280b0>
    388b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003890 <__fxstatat@plt>:
    3890:	endbr64 
    3894:	bnd jmp QWORD PTR [rip+0x284fd]        # 2bd98 <__sprintf_chk@plt+0x280b8>
    389b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038a0 <__overflow@plt>:
    38a0:	endbr64 
    38a4:	bnd jmp QWORD PTR [rip+0x284f5]        # 2bda0 <__sprintf_chk@plt+0x280c0>
    38ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038b0 <strrchr@plt>:
    38b0:	endbr64 
    38b4:	bnd jmp QWORD PTR [rip+0x284ed]        # 2bda8 <__sprintf_chk@plt+0x280c8>
    38bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038c0 <gmtime_r@plt>:
    38c0:	endbr64 
    38c4:	bnd jmp QWORD PTR [rip+0x284e5]        # 2bdb0 <__sprintf_chk@plt+0x280d0>
    38cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038d0 <lseek@plt>:
    38d0:	endbr64 
    38d4:	bnd jmp QWORD PTR [rip+0x284dd]        # 2bdb8 <__sprintf_chk@plt+0x280d8>
    38db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038e0 <__assert_fail@plt>:
    38e0:	endbr64 
    38e4:	bnd jmp QWORD PTR [rip+0x284d5]        # 2bdc0 <__sprintf_chk@plt+0x280e0>
    38eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000038f0 <__strtoul_internal@plt>:
    38f0:	endbr64 
    38f4:	bnd jmp QWORD PTR [rip+0x284cd]        # 2bdc8 <__sprintf_chk@plt+0x280e8>
    38fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003900 <memset@plt>:
    3900:	endbr64 
    3904:	bnd jmp QWORD PTR [rip+0x284c5]        # 2bdd0 <__sprintf_chk@plt+0x280f0>
    390b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003910 <freopen@plt>:
    3910:	endbr64 
    3914:	bnd jmp QWORD PTR [rip+0x284bd]        # 2bdd8 <__sprintf_chk@plt+0x280f8>
    391b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003920 <close@plt>:
    3920:	endbr64 
    3924:	bnd jmp QWORD PTR [rip+0x284b5]        # 2bde0 <__sprintf_chk@plt+0x28100>
    392b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003930 <closedir@plt>:
    3930:	endbr64 
    3934:	bnd jmp QWORD PTR [rip+0x284ad]        # 2bde8 <__sprintf_chk@plt+0x28108>
    393b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003940 <fputc@plt>:
    3940:	endbr64 
    3944:	bnd jmp QWORD PTR [rip+0x284a5]        # 2bdf0 <__sprintf_chk@plt+0x28110>
    394b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003950 <memchr@plt>:
    3950:	endbr64 
    3954:	bnd jmp QWORD PTR [rip+0x2849d]        # 2bdf8 <__sprintf_chk@plt+0x28118>
    395b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003960 <memcmp@plt>:
    3960:	endbr64 
    3964:	bnd jmp QWORD PTR [rip+0x28495]        # 2be00 <__sprintf_chk@plt+0x28120>
    396b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003970 <wctype@plt>:
    3970:	endbr64 
    3974:	bnd jmp QWORD PTR [rip+0x2848d]        # 2be08 <__sprintf_chk@plt+0x28128>
    397b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003980 <fputs_unlocked@plt>:
    3980:	endbr64 
    3984:	bnd jmp QWORD PTR [rip+0x28485]        # 2be10 <__sprintf_chk@plt+0x28130>
    398b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003990 <calloc@plt>:
    3990:	endbr64 
    3994:	bnd jmp QWORD PTR [rip+0x2847d]        # 2be18 <__sprintf_chk@plt+0x28138>
    399b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039a0 <__getdelim@plt>:
    39a0:	endbr64 
    39a4:	bnd jmp QWORD PTR [rip+0x28475]        # 2be20 <__sprintf_chk@plt+0x28140>
    39ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039b0 <strcmp@plt>:
    39b0:	endbr64 
    39b4:	bnd jmp QWORD PTR [rip+0x2846d]        # 2be28 <__sprintf_chk@plt+0x28148>
    39bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039c0 <dirfd@plt>:
    39c0:	endbr64 
    39c4:	bnd jmp QWORD PTR [rip+0x28465]        # 2be30 <__sprintf_chk@plt+0x28150>
    39cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039d0 <fputc_unlocked@plt>:
    39d0:	endbr64 
    39d4:	bnd jmp QWORD PTR [rip+0x2845d]        # 2be38 <__sprintf_chk@plt+0x28158>
    39db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039e0 <__memcpy_chk@plt>:
    39e0:	endbr64 
    39e4:	bnd jmp QWORD PTR [rip+0x28455]        # 2be40 <__sprintf_chk@plt+0x28160>
    39eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000039f0 <feof@plt>:
    39f0:	endbr64 
    39f4:	bnd jmp QWORD PTR [rip+0x2844d]        # 2be48 <__sprintf_chk@plt+0x28168>
    39fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a00 <memcpy@plt>:
    3a00:	endbr64 
    3a04:	bnd jmp QWORD PTR [rip+0x28445]        # 2be50 <__sprintf_chk@plt+0x28170>
    3a0b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a10 <tzset@plt>:
    3a10:	endbr64 
    3a14:	bnd jmp QWORD PTR [rip+0x2843d]        # 2be58 <__sprintf_chk@plt+0x28178>
    3a1b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a20 <fileno@plt>:
    3a20:	endbr64 
    3a24:	bnd jmp QWORD PTR [rip+0x28435]        # 2be60 <__sprintf_chk@plt+0x28180>
    3a2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a30 <__xstat@plt>:
    3a30:	endbr64 
    3a34:	bnd jmp QWORD PTR [rip+0x2842d]        # 2be68 <__sprintf_chk@plt+0x28188>
    3a3b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a40 <readdir@plt>:
    3a40:	endbr64 
    3a44:	bnd jmp QWORD PTR [rip+0x28425]        # 2be70 <__sprintf_chk@plt+0x28190>
    3a4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a50 <wcwidth@plt>:
    3a50:	endbr64 
    3a54:	bnd jmp QWORD PTR [rip+0x2841d]        # 2be78 <__sprintf_chk@plt+0x28198>
    3a5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a60 <iswalnum@plt>:
    3a60:	endbr64 
    3a64:	bnd jmp QWORD PTR [rip+0x28415]        # 2be80 <__sprintf_chk@plt+0x281a0>
    3a6b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a70 <malloc@plt>:
    3a70:	endbr64 
    3a74:	bnd jmp QWORD PTR [rip+0x2840d]        # 2be88 <__sprintf_chk@plt+0x281a8>
    3a7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a80 <wcrtomb@plt>:
    3a80:	endbr64 
    3a84:	bnd jmp QWORD PTR [rip+0x28405]        # 2be90 <__sprintf_chk@plt+0x281b0>
    3a8b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003a90 <fflush@plt>:
    3a90:	endbr64 
    3a94:	bnd jmp QWORD PTR [rip+0x283fd]        # 2be98 <__sprintf_chk@plt+0x281b8>
    3a9b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003aa0 <getmntent@plt>:
    3aa0:	endbr64 
    3aa4:	bnd jmp QWORD PTR [rip+0x283f5]        # 2bea0 <__sprintf_chk@plt+0x281c0>
    3aab:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ab0 <setmntent@plt>:
    3ab0:	endbr64 
    3ab4:	bnd jmp QWORD PTR [rip+0x283ed]        # 2bea8 <__sprintf_chk@plt+0x281c8>
    3abb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ac0 <nl_langinfo@plt>:
    3ac0:	endbr64 
    3ac4:	bnd jmp QWORD PTR [rip+0x283e5]        # 2beb0 <__sprintf_chk@plt+0x281d0>
    3acb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ad0 <__isoc99_sscanf@plt>:
    3ad0:	endbr64 
    3ad4:	bnd jmp QWORD PTR [rip+0x283dd]        # 2beb8 <__sprintf_chk@plt+0x281d8>
    3adb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ae0 <__fxstat@plt>:
    3ae0:	endbr64 
    3ae4:	bnd jmp QWORD PTR [rip+0x283d5]        # 2bec0 <__sprintf_chk@plt+0x281e0>
    3aeb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003af0 <mktime@plt>:
    3af0:	endbr64 
    3af4:	bnd jmp QWORD PTR [rip+0x283cd]        # 2bec8 <__sprintf_chk@plt+0x281e8>
    3afb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b00 <__freading@plt>:
    3b00:	endbr64 
    3b04:	bnd jmp QWORD PTR [rip+0x283c5]        # 2bed0 <__sprintf_chk@plt+0x281f0>
    3b0b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b10 <fchdir@plt>:
    3b10:	endbr64 
    3b14:	bnd jmp QWORD PTR [rip+0x283bd]        # 2bed8 <__sprintf_chk@plt+0x281f8>
    3b1b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b20 <realloc@plt>:
    3b20:	endbr64 
    3b24:	bnd jmp QWORD PTR [rip+0x283b5]        # 2bee0 <__sprintf_chk@plt+0x28200>
    3b2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b30 <setlocale@plt>:
    3b30:	endbr64 
    3b34:	bnd jmp QWORD PTR [rip+0x283ad]        # 2bee8 <__sprintf_chk@plt+0x28208>
    3b3b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b40 <__printf_chk@plt>:
    3b40:	endbr64 
    3b44:	bnd jmp QWORD PTR [rip+0x283a5]        # 2bef0 <__sprintf_chk@plt+0x28210>
    3b4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b50 <timegm@plt>:
    3b50:	endbr64 
    3b54:	bnd jmp QWORD PTR [rip+0x2839d]        # 2bef8 <__sprintf_chk@plt+0x28218>
    3b5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b60 <strftime@plt>:
    3b60:	endbr64 
    3b64:	bnd jmp QWORD PTR [rip+0x28395]        # 2bf00 <__sprintf_chk@plt+0x28220>
    3b6b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b70 <btowc@plt>:
    3b70:	endbr64 
    3b74:	bnd jmp QWORD PTR [rip+0x2838d]        # 2bf08 <__sprintf_chk@plt+0x28228>
    3b7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b80 <memmove@plt>:
    3b80:	endbr64 
    3b84:	bnd jmp QWORD PTR [rip+0x28385]        # 2bf10 <__sprintf_chk@plt+0x28230>
    3b8b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003b90 <error@plt>:
    3b90:	endbr64 
    3b94:	bnd jmp QWORD PTR [rip+0x2837d]        # 2bf18 <__sprintf_chk@plt+0x28238>
    3b9b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ba0 <open@plt>:
    3ba0:	endbr64 
    3ba4:	bnd jmp QWORD PTR [rip+0x28375]        # 2bf20 <__sprintf_chk@plt+0x28240>
    3bab:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003bb0 <fseeko@plt>:
    3bb0:	endbr64 
    3bb4:	bnd jmp QWORD PTR [rip+0x2836d]        # 2bf28 <__sprintf_chk@plt+0x28248>
    3bbb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003bc0 <fopen@plt>:
    3bc0:	endbr64 
    3bc4:	bnd jmp QWORD PTR [rip+0x28365]        # 2bf30 <__sprintf_chk@plt+0x28250>
    3bcb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003bd0 <towlower@plt>:
    3bd0:	endbr64 
    3bd4:	bnd jmp QWORD PTR [rip+0x2835d]        # 2bf38 <__sprintf_chk@plt+0x28258>
    3bdb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003be0 <fdopendir@plt>:
    3be0:	endbr64 
    3be4:	bnd jmp QWORD PTR [rip+0x28355]        # 2bf40 <__sprintf_chk@plt+0x28260>
    3beb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003bf0 <unsetenv@plt>:
    3bf0:	endbr64 
    3bf4:	bnd jmp QWORD PTR [rip+0x2834d]        # 2bf48 <__sprintf_chk@plt+0x28268>
    3bfb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c00 <towupper@plt>:
    3c00:	endbr64 
    3c04:	bnd jmp QWORD PTR [rip+0x28345]        # 2bf50 <__sprintf_chk@plt+0x28270>
    3c0b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c10 <fstatfs@plt>:
    3c10:	endbr64 
    3c14:	bnd jmp QWORD PTR [rip+0x2833d]        # 2bf58 <__sprintf_chk@plt+0x28278>
    3c1b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c20 <__cxa_atexit@plt>:
    3c20:	endbr64 
    3c24:	bnd jmp QWORD PTR [rip+0x28335]        # 2bf60 <__sprintf_chk@plt+0x28280>
    3c2b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c30 <exit@plt>:
    3c30:	endbr64 
    3c34:	bnd jmp QWORD PTR [rip+0x2832d]        # 2bf68 <__sprintf_chk@plt+0x28288>
    3c3b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c40 <fwrite@plt>:
    3c40:	endbr64 
    3c44:	bnd jmp QWORD PTR [rip+0x28325]        # 2bf70 <__sprintf_chk@plt+0x28290>
    3c4b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c50 <__fprintf_chk@plt>:
    3c50:	endbr64 
    3c54:	bnd jmp QWORD PTR [rip+0x2831d]        # 2bf78 <__sprintf_chk@plt+0x28298>
    3c5b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c60 <fflush_unlocked@plt>:
    3c60:	endbr64 
    3c64:	bnd jmp QWORD PTR [rip+0x28315]        # 2bf80 <__sprintf_chk@plt+0x282a0>
    3c6b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c70 <mbsinit@plt>:
    3c70:	endbr64 
    3c74:	bnd jmp QWORD PTR [rip+0x2830d]        # 2bf88 <__sprintf_chk@plt+0x282a8>
    3c7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c80 <iswprint@plt>:
    3c80:	endbr64 
    3c84:	bnd jmp QWORD PTR [rip+0x28305]        # 2bf90 <__sprintf_chk@plt+0x282b0>
    3c8b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003c90 <hasmntopt@plt>:
    3c90:	endbr64 
    3c94:	bnd jmp QWORD PTR [rip+0x282fd]        # 2bf98 <__sprintf_chk@plt+0x282b8>
    3c9b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ca0 <getdelim@plt>:
    3ca0:	endbr64 
    3ca4:	bnd jmp QWORD PTR [rip+0x282f5]        # 2bfa0 <__sprintf_chk@plt+0x282c0>
    3cab:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003cb0 <strstr@plt>:
    3cb0:	endbr64 
    3cb4:	bnd jmp QWORD PTR [rip+0x282ed]        # 2bfa8 <__sprintf_chk@plt+0x282c8>
    3cbb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003cc0 <__ctype_tolower_loc@plt>:
    3cc0:	endbr64 
    3cc4:	bnd jmp QWORD PTR [rip+0x282e5]        # 2bfb0 <__sprintf_chk@plt+0x282d0>
    3ccb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003cd0 <__ctype_b_loc@plt>:
    3cd0:	endbr64 
    3cd4:	bnd jmp QWORD PTR [rip+0x282dd]        # 2bfb8 <__sprintf_chk@plt+0x282d8>
    3cdb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000003ce0 <__sprintf_chk@plt>:
    3ce0:	endbr64 
    3ce4:	bnd jmp QWORD PTR [rip+0x282d5]        # 2bfc0 <__sprintf_chk@plt+0x282e0>
    3ceb:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000003cf0 <.text>:
    3cf0:	call   36e0 <abort@plt>
    3cf5:	call   36e0 <abort@plt>
    3cfa:	call   36e0 <abort@plt>
    3cff:	call   36e0 <abort@plt>
    3d04:	call   36e0 <abort@plt>
    3d09:	call   36e0 <abort@plt>
    3d0e:	call   36e0 <abort@plt>
    3d13:	call   36e0 <abort@plt>
    3d18:	call   36e0 <abort@plt>
    3d1d:	call   36e0 <abort@plt>
    3d22:	call   36e0 <abort@plt>
    3d27:	call   36e0 <abort@plt>
    3d2c:	call   36e0 <abort@plt>
    3d31:	call   36e0 <abort@plt>
    3d36:	call   36e0 <abort@plt>
    3d3b:	call   36e0 <abort@plt>
    3d40:	call   36e0 <abort@plt>
    3d45:	call   36e0 <abort@plt>
    3d4a:	call   36e0 <abort@plt>
    3d4f:	call   36e0 <abort@plt>
    3d54:	call   36e0 <abort@plt>
    3d59:	call   36e0 <abort@plt>
    3d5e:	call   36e0 <abort@plt>
    3d63:	call   36e0 <abort@plt>
    3d68:	call   36e0 <abort@plt>
    3d6d:	call   36e0 <abort@plt>
    3d72:	call   36e0 <abort@plt>
    3d77:	nop    WORD PTR [rax+rax*1+0x0]
    3d80:	endbr64 
    3d84:	push   r15
    3d86:	mov    r15d,0x1
    3d8c:	push   r14
    3d8e:	push   r13
    3d90:	xor    r13d,r13d
    3d93:	push   r12
    3d95:	mov    r12d,edi
    3d98:	push   rbp
    3d99:	mov    rbp,rsi
    3d9c:	push   rbx
    3d9d:	lea    rbx,[rip+0x1f7ac]        # 23550 <__sprintf_chk@plt+0x1f870>
    3da4:	sub    rsp,0x128
    3dab:	mov    rdi,QWORD PTR [rsi]
    3dae:	mov    rax,QWORD PTR fs:0x28
    3db7:	mov    QWORD PTR [rsp+0x118],rax
    3dbf:	lea    rax,[rip+0x21086]        # 24e4c <__sprintf_chk@plt+0x2116c>
    3dc6:	lea    r14,[rsp+0x4c]
    3dcb:	mov    QWORD PTR [rsp+0x78],0x0
    3dd4:	mov    QWORD PTR [rsp+0x70],rax
    3dd9:	call   b940 <__sprintf_chk@plt+0x7c60>
    3dde:	lea    rsi,[rip+0x2087c]        # 24661 <__sprintf_chk@plt+0x20981>
    3de5:	mov    edi,0x6
    3dea:	call   3b30 <setlocale@plt>
    3def:	lea    rsi,[rip+0x1e2e7]        # 220dd <__sprintf_chk@plt+0x1e3fd>
    3df6:	lea    rdi,[rip+0x1e2ae]        # 220ab <__sprintf_chk@plt+0x1e3cb>
    3dfd:	call   37e0 <bindtextdomain@plt>
    3e02:	lea    rdi,[rip+0x1e2a2]        # 220ab <__sprintf_chk@plt+0x1e3cb>
    3e09:	call   37a0 <textdomain@plt>
    3e0e:	lea    rdi,[rip+0x213b]        # 5f50 <__sprintf_chk@plt+0x2270>
    3e15:	call   215b0 <__sprintf_chk@plt+0x1d8d0>
    3e1a:	call   6780 <__sprintf_chk@plt+0x2aa0>
    3e1f:	lea    rdi,[rip+0x1e2c9]        # 220ef <__sprintf_chk@plt+0x1e40f>
    3e26:	mov    QWORD PTR [rip+0x28313],rax        # 2c140 <stderr@@GLIBC_2.2.5+0x60>
    3e2d:	call   36c0 <getenv@plt>
    3e32:	lea    rdx,[rip+0x2830f]        # 2c148 <stderr@@GLIBC_2.2.5+0x68>
    3e39:	lea    rsi,[rip+0x28330]        # 2c170 <stderr@@GLIBC_2.2.5+0x90>
    3e40:	mov    rdi,rax
    3e43:	call   b0b0 <__sprintf_chk@plt+0x73d0>
    3e48:	mov    BYTE PTR [rsp],0x0
    3e4c:	mov    DWORD PTR [rsp+0x8],0x10
    3e54:	mov    DWORD PTR [rsp+0xc],0x8
    3e5c:	mov    BYTE PTR [rsp+0x10],0x0
    3e61:	nop    DWORD PTR [rax+0x0]
    3e68:	mov    r8,r14
    3e6b:	lea    rcx,[rip+0x2786e]        # 2b6e0 <__sprintf_chk@plt+0x27a00>
    3e72:	mov    rsi,rbp
    3e75:	mov    edi,r12d
    3e78:	lea    rdx,[rip+0x1e27e]        # 220fd <__sprintf_chk@plt+0x1e41d>
    3e7f:	mov    DWORD PTR [rsp+0x4c],0xffffffff
    3e87:	call   3850 <getopt_long@plt>
    3e8c:	cmp    eax,0xffffffff
    3e8f:	je     4266 <__sprintf_chk@plt+0x586>
    3e95:	cmp    eax,0x87
    3e9a:	jg     3ecb <__sprintf_chk@plt+0x1eb>
    3e9c:	cmp    eax,0x2f
    3e9f:	jle    41c8 <__sprintf_chk@plt+0x4e8>
    3ea5:	sub    eax,0x30
    3ea8:	cmp    eax,0x57
    3eab:	ja     3ecb <__sprintf_chk@plt+0x1eb>
    3ead:	movsxd rax,DWORD PTR [rbx+rax*4]
    3eb1:	add    rax,rbx
    3eb4:	notrack jmp rax
    3eb7:	nop    WORD PTR [rax+rax*1+0x0]
    3ec0:	cmp    eax,0xffffff7e
    3ec5:	je     4f80 <__sprintf_chk@plt+0x12a0>
    3ecb:	xor    r15d,r15d
    3ece:	jmp    3e68 <__sprintf_chk@plt+0x188>
    3ed0:	mov    DWORD PTR [rsp+0x8],0x11
    3ed8:	jmp    3e68 <__sprintf_chk@plt+0x188>
    3eda:	mov    rdi,QWORD PTR [rip+0x281df]        # 2c0c0 <optarg@@GLIBC_2.2.5>
    3ee1:	lea    rdx,[rip+0x28260]        # 2c148 <stderr@@GLIBC_2.2.5+0x68>
    3ee8:	lea    rsi,[rip+0x28281]        # 2c170 <stderr@@GLIBC_2.2.5+0x90>
    3eef:	call   b0b0 <__sprintf_chk@plt+0x73d0>
    3ef4:	test   eax,eax
    3ef6:	je     3e68 <__sprintf_chk@plt+0x188>
    3efc:	mov    r8,QWORD PTR [rip+0x281bd]        # 2c0c0 <optarg@@GLIBC_2.2.5>
    3f03:	mov    esi,DWORD PTR [rsp+0x4c]
    3f07:	mov    edx,0x42
    3f0c:	mov    edi,eax
    3f0e:	lea    rcx,[rip+0x277cb]        # 2b6e0 <__sprintf_chk@plt+0x27a00>
    3f15:	call   ec80 <__sprintf_chk@plt+0xafa0>
    3f1a:	mov    BYTE PTR [rip+0x28261],0x1        # 2c182 <stderr@@GLIBC_2.2.5+0xa2>
    3f21:	jmp    3e68 <__sprintf_chk@plt+0x188>
    3f26:	mov    rdx,QWORD PTR [rip+0x28193]        # 2c0c0 <optarg@@GLIBC_2.2.5>
    3f2d:	mov    rsi,QWORD PTR [rip+0x2820c]        # 2c140 <stderr@@GLIBC_2.2.5+0x60>
    3f34:	mov    ecx,0x10000000
    3f39:	mov    r8d,0xa
    3f3f:	lea    rdi,[rip+0x2bba]        # 6b00 <__sprintf_chk@plt+0x2e20>
    3f46:	call   70a0 <__sprintf_chk@plt+0x33c0>
    3f4b:	test   eax,eax
    3f4d:	je     3e68 <__sprintf_chk@plt+0x188>
    3f53:	mov    rdx,QWORD PTR [rip+0x28166]        # 2c0c0 <optarg@@GLIBC_2.2.5>
    3f5a:	mov    esi,0x3
    3f5f:	xor    edi,edi
    3f61:	call   d770 <__sprintf_chk@plt+0x9a90>
    3f66:	mov    r15,rax
    3f69:	call   36f0 <__errno_location@plt>
    3f6e:	mov    rcx,r15
    3f71:	lea    rdx,[rip+0x1f7d8]        # 23750 <__sprintf_chk@plt+0x1fa70>
    3f78:	xor    edi,edi
    3f7a:	mov    esi,DWORD PTR [rax]
    3f7c:	xor    eax,eax
    3f7e:	xor    r15d,r15d
    3f81:	call   3b90 <error@plt>
    3f86:	jmp    3e68 <__sprintf_chk@plt+0x188>
    3f8b:	mov    BYTE PTR [rip+0x281ee],0x1        # 2c180 <stderr@@GLIBC_2.2.5+0xa0>
    3f92:	jmp    3e68 <__sprintf_chk@plt+0x188>
    3f97:	mov    DWORD PTR [rsp+0x8],0x10
    3f9f:	jmp    3e68 <__sprintf_chk@plt+0x188>
    3fa4:	mov    DWORD PTR [rsp+0x8],0x2
    3fac:	jmp    3e68 <__sprintf_chk@plt+0x188>
    3fb1:	mov    BYTE PTR [rip+0x281b5],0x1        # 2c16d <stderr@@GLIBC_2.2.5+0x8d>
    3fb8:	jmp    3e68 <__sprintf_chk@plt+0x188>
    3fbd:	mov    rax,QWORD PTR [rip+0x280fc]        # 2c0c0 <optarg@@GLIBC_2.2.5>
    3fc4:	mov    QWORD PTR [rip+0x28195],rax        # 2c160 <stderr@@GLIBC_2.2.5+0x80>
    3fcb:	jmp    3e68 <__sprintf_chk@plt+0x188>
    3fd0:	mov    rsi,QWORD PTR [rip+0x280e9]        # 2c0c0 <optarg@@GLIBC_2.2.5>
    3fd7:	mov    BYTE PTR [rip+0x2818e],0x1        # 2c16c <stderr@@GLIBC_2.2.5+0x8c>
    3fde:	xor    eax,eax
    3fe0:	test   rsi,rsi
    3fe3:	je     401a <__sprintf_chk@plt+0x33a>
    3fe5:	mov    r9,QWORD PTR [rip+0x28034]        # 2c020 <__sprintf_chk@plt+0x28340>
    3fec:	mov    r8d,0x4
    3ff2:	lea    rcx,[rip+0x1f6e7]        # 236e0 <__sprintf_chk@plt+0x1fa00>
    3ff9:	lea    rdx,[rip+0x276a0]        # 2b6a0 <__sprintf_chk@plt+0x279c0>
    4000:	lea    rdi,[rip+0x1e133]        # 2213a <__sprintf_chk@plt+0x1e45a>
    4007:	call   5d00 <__sprintf_chk@plt+0x2020>
    400c:	mov    r8,rax
    400f:	lea    rax,[rip+0x1f6ca]        # 236e0 <__sprintf_chk@plt+0x1fa00>
    4016:	mov    eax,DWORD PTR [rax+r8*4]
    401a:	lea    rdi,[rip+0x1e120]        # 22141 <__sprintf_chk@plt+0x1e461>
    4021:	mov    DWORD PTR [rip+0x28141],eax        # 2c168 <stderr@@GLIBC_2.2.5+0x88>
    4027:	call   36c0 <getenv@plt>
    402c:	mov    rdi,rax
    402f:	call   20840 <__sprintf_chk@plt+0x1cb60>
    4034:	mov    QWORD PTR [rip+0x28115],rax        # 2c150 <stderr@@GLIBC_2.2.5+0x70>
    403b:	jmp    3e68 <__sprintf_chk@plt+0x188>
    4040:	mov    DWORD PTR [rip+0x28126],0x90        # 2c170 <stderr@@GLIBC_2.2.5+0x90>
    404a:	mov    QWORD PTR [rip+0x280f3],0x1        # 2c148 <stderr@@GLIBC_2.2.5+0x68>
    4055:	jmp    3e68 <__sprintf_chk@plt+0x188>
    405a:	mov    r13,QWORD PTR [rip+0x2805f]        # 2c0c0 <optarg@@GLIBC_2.2.5>
    4061:	jmp    3e68 <__sprintf_chk@plt+0x188>
    4066:	mov    rsi,QWORD PTR [rip+0x28053]        # 2c0c0 <optarg@@GLIBC_2.2.5>
    406d:	mov    rdi,QWORD PTR [rip+0x280cc]        # 2c140 <stderr@@GLIBC_2.2.5+0x60>
    4074:	mov    edx,0x10000000
    4079:	call   6b00 <__sprintf_chk@plt+0x2e20>
    407e:	jmp    3e68 <__sprintf_chk@plt+0x188>
    4083:	mov    BYTE PTR [rip+0x280fb],0x1        # 2c185 <stderr@@GLIBC_2.2.5+0xa5>
    408a:	jmp    3e68 <__sprintf_chk@plt+0x188>
    408f:	mov    rdi,QWORD PTR [rip+0x2802a]        # 2c0c0 <optarg@@GLIBC_2.2.5>
    4096:	xor    edx,edx
    4098:	xor    esi,esi
    409a:	lea    r8,[rip+0x1e08d]        # 2212e <__sprintf_chk@plt+0x1e44e>
    40a1:	lea    rcx,[rip+0x280d0]        # 2c178 <stderr@@GLIBC_2.2.5+0x98>
    40a8:	call   e5f0 <__sprintf_chk@plt+0xa910>
    40ad:	test   eax,eax
    40af:	jne    5126 <__sprintf_chk@plt+0x1446>
    40b5:	cmp    QWORD PTR [rip+0x280bb],0x0        # 2c178 <stderr@@GLIBC_2.2.5+0x98>
    40bd:	jne    3e68 <__sprintf_chk@plt+0x188>
    40c3:	mov    rax,QWORD PTR [rip+0x27ff6]        # 2c0c0 <optarg@@GLIBC_2.2.5>
    40ca:	cmp    BYTE PTR [rax],0x2d
    40cd:	jne    3e68 <__sprintf_chk@plt+0x188>
    40d3:	mov    edx,0x5
    40d8:	lea    rsi,[rip+0x1f1f9]        # 232d8 <__sprintf_chk@plt+0x1f5f8>
    40df:	xor    edi,edi
    40e1:	call   37f0 <dcgettext@plt>
    40e6:	xor    esi,esi
    40e8:	mov    edi,0x1
    40ed:	mov    rdx,rax
    40f0:	xor    eax,eax
    40f2:	call   3b90 <error@plt>
    40f7:	mov    DWORD PTR [rip+0x2806f],0x0        # 2c170 <stderr@@GLIBC_2.2.5+0x90>
    4101:	mov    QWORD PTR [rip+0x2803c],0x100000        # 2c148 <stderr@@GLIBC_2.2.5+0x68>
    410c:	jmp    3e68 <__sprintf_chk@plt+0x188>
    4111:	mov    BYTE PTR [rip+0x2806c],0x1        # 2c184 <stderr@@GLIBC_2.2.5+0xa4>
    4118:	jmp    3e68 <__sprintf_chk@plt+0x188>
    411d:	mov    DWORD PTR [rip+0x28049],0x0        # 2c170 <stderr@@GLIBC_2.2.5+0x90>
    4127:	mov    QWORD PTR [rip+0x28016],0x400        # 2c148 <stderr@@GLIBC_2.2.5+0x68>
    4132:	jmp    3e68 <__sprintf_chk@plt+0x188>
    4137:	mov    DWORD PTR [rip+0x2802f],0xb0        # 2c170 <stderr@@GLIBC_2.2.5+0x90>
    4141:	mov    QWORD PTR [rip+0x27ffc],0x1        # 2c148 <stderr@@GLIBC_2.2.5+0x68>
    414c:	jmp    3e68 <__sprintf_chk@plt+0x188>
    4151:	mov    rdi,QWORD PTR [rip+0x27f68]        # 2c0c0 <optarg@@GLIBC_2.2.5>
    4158:	xor    edx,edx
    415a:	xor    esi,esi
    415c:	lea    rcx,[rsp+0x50]
    4161:	lea    r8,[rip+0x204f9]        # 24661 <__sprintf_chk@plt+0x20981>
    4168:	call   ed50 <__sprintf_chk@plt+0xb070>
    416d:	test   eax,eax
    416f:	jne    4222 <__sprintf_chk@plt+0x542>
    4175:	mov    rax,QWORD PTR [rsp+0x50]
    417a:	mov    BYTE PTR [rsp+0x10],0x1
    417f:	mov    QWORD PTR [rip+0x27e8a],rax        # 2c010 <__sprintf_chk@plt+0x28330>
    4186:	jmp    3e68 <__sprintf_chk@plt+0x188>
    418b:	mov    BYTE PTR [rip+0x27fef],0x1        # 2c181 <stderr@@GLIBC_2.2.5+0xa1>
    4192:	jmp    3e68 <__sprintf_chk@plt+0x188>
    4197:	mov    BYTE PTR [rip+0x27fe7],0x1        # 2c185 <stderr@@GLIBC_2.2.5+0xa5>
    419e:	mov    DWORD PTR [rip+0x27fc8],0x0        # 2c170 <stderr@@GLIBC_2.2.5+0x90>
    41a8:	mov    QWORD PTR [rip+0x27f95],0x1        # 2c148 <stderr@@GLIBC_2.2.5+0x68>
    41b3:	jmp    3e68 <__sprintf_chk@plt+0x188>
    41b8:	mov    BYTE PTR [rip+0x27fc7],0x1        # 2c186 <stderr@@GLIBC_2.2.5+0xa6>
    41bf:	jmp    3e68 <__sprintf_chk@plt+0x188>
    41c4:	nop    DWORD PTR [rax+0x0]
    41c8:	cmp    eax,0xffffff7d
    41cd:	jne    3ec0 <__sprintf_chk@plt+0x1e0>
    41d3:	push   rax
    41d4:	lea    rax,[rip+0x1df8b]        # 22166 <__sprintf_chk@plt+0x1e486>
    41db:	mov    rdi,QWORD PTR [rip+0x27ec6]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    41e2:	lea    r9,[rip+0x1df5b]        # 22144 <__sprintf_chk@plt+0x1e464>
    41e9:	push   0x0
    41eb:	mov    rcx,QWORD PTR [rip+0x27e26]        # 2c018 <__sprintf_chk@plt+0x28338>
    41f2:	lea    r8,[rip+0x1df5b]        # 22154 <__sprintf_chk@plt+0x1e474>
    41f9:	lea    rdx,[rip+0x1dea7]        # 220a7 <__sprintf_chk@plt+0x1e3c7>
    4200:	push   rax
    4201:	lea    rax,[rip+0x1df6b]        # 22173 <__sprintf_chk@plt+0x1e493>
    4208:	lea    rsi,[rip+0x1de1c]        # 2202b <__sprintf_chk@plt+0x1e34b>
    420f:	push   rax
    4210:	xor    eax,eax
    4212:	call   e070 <__sprintf_chk@plt+0xa390>
    4217:	add    rsp,0x20
    421b:	xor    edi,edi
    421d:	call   3c30 <exit@plt>
    4222:	mov    rdi,QWORD PTR [rip+0x27e97]        # 2c0c0 <optarg@@GLIBC_2.2.5>
    4229:	call   dae0 <__sprintf_chk@plt+0x9e00>
    422e:	mov    edx,0x5
    4233:	lea    rsi,[rip+0x1dedb]        # 22115 <__sprintf_chk@plt+0x1e435>
    423a:	xor    edi,edi
    423c:	mov    r15,rax
    423f:	call   37f0 <dcgettext@plt>
    4244:	mov    rcx,r15
    4247:	xor    esi,esi
    4249:	xor    edi,edi
    424b:	mov    rdx,rax
    424e:	xor    eax,eax
    4250:	xor    r15d,r15d
    4253:	call   3b90 <error@plt>
    4258:	jmp    3e68 <__sprintf_chk@plt+0x188>
    425d:	mov    BYTE PTR [rsp],0x1
    4261:	jmp    3e68 <__sprintf_chk@plt+0x188>
    4266:	test   r15b,r15b
    4269:	je     511c <__sprintf_chk@plt+0x143c>
    426f:	cmp    BYTE PTR [rip+0x27f10],0x0        # 2c186 <stderr@@GLIBC_2.2.5+0xa6>
    4276:	je     448b <__sprintf_chk@plt+0x7ab>
    427c:	cmp    BYTE PTR [rsp],0x0
    4280:	jne    50fb <__sprintf_chk@plt+0x141b>
    4286:	cmp    BYTE PTR [rip+0x27ee0],0x0        # 2c16d <stderr@@GLIBC_2.2.5+0x8d>
    428d:	je     42a7 <__sprintf_chk@plt+0x5c7>
    428f:	cmp    BYTE PTR [rip+0x27eef],0x0        # 2c185 <stderr@@GLIBC_2.2.5+0xa5>
    4296:	jne    4f5a <__sprintf_chk@plt+0x127a>
    429c:	mov    QWORD PTR [rip+0x27ea1],0x1        # 2c148 <stderr@@GLIBC_2.2.5+0x68>
    42a7:	cmp    BYTE PTR [rip+0x27ebe],0x0        # 2c16c <stderr@@GLIBC_2.2.5+0x8c>
    42ae:	je     42dc <__sprintf_chk@plt+0x5fc>
    42b0:	cmp    QWORD PTR [rip+0x27ea8],0x0        # 2c160 <stderr@@GLIBC_2.2.5+0x80>
    42b8:	je     4f87 <__sprintf_chk@plt+0x12a7>
    42be:	mov    rcx,QWORD PTR [rip+0x27e9b]        # 2c160 <stderr@@GLIBC_2.2.5+0x80>
    42c5:	cmp    BYTE PTR [rcx],0x2b
    42c8:	mov    r10,rcx
    42cb:	jne    4d43 <__sprintf_chk@plt+0x1063>
    42d1:	lea    rax,[r10+0x1]
    42d5:	mov    QWORD PTR [rip+0x27e7c],rax        # 2c158 <stderr@@GLIBC_2.2.5+0x78>
    42dc:	movsxd rax,DWORD PTR [rip+0x27dd5]        # 2c0b8 <optind@@GLIBC_2.2.5>
    42e3:	test   r13,r13
    42e6:	je     4c39 <__sprintf_chk@plt+0xf59>
    42ec:	cmp    r12d,eax
    42ef:	jg     51ed <__sprintf_chk@plt+0x150d>
    42f5:	lea    rsi,[rip+0x208ea]        # 24be6 <__sprintf_chk@plt+0x20f06>
    42fc:	mov    rdi,r13
    42ff:	call   39b0 <strcmp@plt>
    4304:	test   eax,eax
    4306:	je     4327 <__sprintf_chk@plt+0x647>
    4308:	mov    rdx,QWORD PTR [rip+0x27da1]        # 2c0b0 <stdin@@GLIBC_2.2.5>
    430f:	lea    rsi,[rip+0x20c5b]        # 24f71 <__sprintf_chk@plt+0x21291>
    4316:	mov    rdi,r13
    4319:	call   8f30 <__sprintf_chk@plt+0x5250>
    431e:	test   rax,rax
    4321:	je     51ae <__sprintf_chk@plt+0x14ce>
    4327:	mov    rdi,QWORD PTR [rip+0x27d82]        # 2c0b0 <stdin@@GLIBC_2.2.5>
    432e:	call   5e10 <__sprintf_chk@plt+0x2130>
    4333:	mov    BYTE PTR [rip+0x27e49],0x1        # 2c183 <stderr@@GLIBC_2.2.5+0xa3>
    433a:	mov    QWORD PTR [rsp],rax
    433e:	cmp    QWORD PTR [rsp],0x0
    4343:	je     50a4 <__sprintf_chk@plt+0x13c4>
    4349:	call   6100 <__sprintf_chk@plt+0x2420>
    434e:	mov    QWORD PTR [rip+0x27e43],rax        # 2c198 <stderr@@GLIBC_2.2.5+0xb8>
    4355:	test   rax,rax
    4358:	je     50a4 <__sprintf_chk@plt+0x13c4>
    435e:	cmp    BYTE PTR [rip+0x27e1f],0x0        # 2c184 <stderr@@GLIBC_2.2.5+0xa4>
    4365:	jne    4370 <__sprintf_chk@plt+0x690>
    4367:	cmp    BYTE PTR [rip+0x27e15],0x0        # 2c183 <stderr@@GLIBC_2.2.5+0xa3>
    436e:	jne    4378 <__sprintf_chk@plt+0x698>
    4370:	or     DWORD PTR [rsp+0xc],0x100
    4378:	mov    eax,DWORD PTR [rsp+0xc]
    437c:	or     eax,DWORD PTR [rsp+0x8]
    4380:	mov    BYTE PTR [rsp+0xc],r15b
    4385:	mov    DWORD PTR [rsp+0x24],eax
    4389:	lea    rax,[rsp+0x80]
    4391:	mov    QWORD PTR [rsp+0x38],rax
    4396:	mov    BYTE PTR [rsp+0x8],r15b
    439b:	nop    DWORD PTR [rax+rax*1+0x0]
    43a0:	mov    rdi,QWORD PTR [rsp]
    43a4:	mov    rsi,r14
    43a7:	call   5e50 <__sprintf_chk@plt+0x2170>
    43ac:	mov    rbx,rax
    43af:	test   rax,rax
    43b2:	je     48b9 <__sprintf_chk@plt+0xbd9>
    43b8:	test   r13,r13
    43bb:	je     47c8 <__sprintf_chk@plt+0xae8>
    43c1:	cmp    BYTE PTR [r13+0x0],0x2d
    43c6:	jne    44e0 <__sprintf_chk@plt+0x800>
    43cc:	cmp    BYTE PTR [r13+0x1],0x0
    43d1:	jne    44e0 <__sprintf_chk@plt+0x800>
    43d7:	cmp    BYTE PTR [rax],0x2d
    43da:	jne    44e0 <__sprintf_chk@plt+0x800>
    43e0:	cmp    BYTE PTR [rax+0x1],0x0
    43e4:	jne    44e0 <__sprintf_chk@plt+0x800>
    43ea:	mov    rsi,rax
    43ed:	mov    edi,0x4
    43f2:	call   d3f0 <__sprintf_chk@plt+0x9710>
    43f7:	xor    edi,edi
    43f9:	mov    edx,0x5
    43fe:	lea    rsi,[rip+0x1f043]        # 23448 <__sprintf_chk@plt+0x1f768>
    4405:	mov    r12,rax
    4408:	call   37f0 <dcgettext@plt>
    440d:	xor    esi,esi
    440f:	xor    edi,edi
    4411:	mov    rcx,r12
    4414:	mov    rdx,rax
    4417:	xor    eax,eax
    4419:	call   3b90 <error@plt>
    441e:	cmp    BYTE PTR [rbx],0x0
    4421:	jne    4474 <__sprintf_chk@plt+0x794>
    4423:	nop    DWORD PTR [rax+rax*1+0x0]
    4428:	mov    rdi,QWORD PTR [rsp]
    442c:	call   5ef0 <__sprintf_chk@plt+0x2210>
    4431:	mov    edx,0x5
    4436:	lea    rsi,[rip+0x1de53]        # 22290 <__sprintf_chk@plt+0x1e5b0>
    443d:	xor    edi,edi
    443f:	mov    rbx,rax
    4442:	call   37f0 <dcgettext@plt>
    4447:	mov    rdx,r13
    444a:	mov    esi,0x3
    444f:	xor    edi,edi
    4451:	mov    rbp,rax
    4454:	call   d770 <__sprintf_chk@plt+0x9a90>
    4459:	mov    r9,rbp
    445c:	mov    r8,rbx
    445f:	xor    esi,esi
    4461:	mov    rcx,rax
    4464:	lea    rdx,[rip+0x1de43]        # 222ae <__sprintf_chk@plt+0x1e5ce>
    446b:	xor    edi,edi
    446d:	xor    eax,eax
    446f:	call   3b90 <error@plt>
    4474:	mov    BYTE PTR [rsp+0xc],0x0
    4479:	jmp    43a0 <__sprintf_chk@plt+0x6c0>
    447e:	mov    DWORD PTR [rsp+0xc],0x48
    4486:	jmp    3e68 <__sprintf_chk@plt+0x188>
    448b:	cmp    BYTE PTR [rsp+0x10],0x0
    4490:	je     519f <__sprintf_chk@plt+0x14bf>
    4496:	cmp    BYTE PTR [rsp],0x0
    449a:	je     4286 <__sprintf_chk@plt+0x5a6>
    44a0:	mov    rbx,QWORD PTR [rip+0x27b69]        # 2c010 <__sprintf_chk@plt+0x28330>
    44a7:	test   rbx,rbx
    44aa:	je     4b91 <__sprintf_chk@plt+0xeb1>
    44b0:	mov    edx,0x5
    44b5:	lea    rsi,[rip+0x1eeac]        # 23368 <__sprintf_chk@plt+0x1f688>
    44bc:	xor    edi,edi
    44be:	call   37f0 <dcgettext@plt>
    44c3:	xor    edi,edi
    44c5:	mov    rcx,rbx
    44c8:	xor    esi,esi
    44ca:	mov    rdx,rax
    44cd:	xor    eax,eax
    44cf:	call   3b90 <error@plt>
    44d4:	mov    edi,0x1
    44d9:	call   5550 <__sprintf_chk@plt+0x1870>
    44de:	xchg   ax,ax
    44e0:	cmp    BYTE PTR [rbx],0x0
    44e3:	je     4428 <__sprintf_chk@plt+0x748>
    44e9:	lea    rax,[rip+0x27c20]        # 2c110 <stderr@@GLIBC_2.2.5+0x30>
    44f0:	mov    esi,DWORD PTR [rsp+0x24]
    44f4:	xor    edx,edx
    44f6:	mov    QWORD PTR [rax],rbx
    44f9:	mov    rdi,rax
    44fc:	call   e560 <__sprintf_chk@plt+0xa880>
    4501:	mov    QWORD PTR [rsp+0x28],r13
    4506:	movzx  r12d,BYTE PTR [rsp+0x8]
    450c:	mov    QWORD PTR [rsp+0x30],r14
    4511:	mov    r15,rax
    4514:	jmp    458c <__sprintf_chk@plt+0x8ac>
    4516:	cs nop WORD PTR [rax+rax*1+0x0]
    4520:	mov    rdi,QWORD PTR [rip+0x27c19]        # 2c140 <stderr@@GLIBC_2.2.5+0x60>
    4527:	mov    rsi,r14
    452a:	call   6950 <__sprintf_chk@plt+0x2c70>
    452f:	test   al,al
    4531:	jne    4579 <__sprintf_chk@plt+0x899>
    4533:	cmp    r13d,0xb
    4537:	je     4e5d <__sprintf_chk@plt+0x117d>
    453d:	cmp    r13d,0xa
    4541:	sete   r8b
    4545:	cmp    r13d,0xd
    4549:	sete   al
    454c:	or     r8b,al
    454f:	jne    4e20 <__sprintf_chk@plt+0x1140>
    4555:	test   BYTE PTR [r15+0x48],0x40
    455a:	je     49c1 <__sprintf_chk@plt+0xce1>
    4560:	cmp    QWORD PTR [rbx+0x58],0x0
    4565:	jle    49c1 <__sprintf_chk@plt+0xce1>
    456b:	mov    rax,QWORD PTR [rbx+0x78]
    456f:	cmp    QWORD PTR [r15+0x18],rax
    4573:	je     49c1 <__sprintf_chk@plt+0xce1>
    4579:	sub    r13d,0x1
    457d:	je     4bd2 <__sprintf_chk@plt+0xef2>
    4583:	movzx  r8d,BYTE PTR [rsp+0x8]
    4589:	and    r12d,r8d
    458c:	mov    rdi,r15
    458f:	call   11020 <__sprintf_chk@plt+0xd340>
    4594:	mov    rbx,rax
    4597:	test   rax,rax
    459a:	je     4b3b <__sprintf_chk@plt+0xe5b>
    45a0:	movzx  r13d,WORD PTR [rax+0x70]
    45a5:	mov    r14,QWORD PTR [rax+0x38]
    45a9:	cmp    r13d,0x4
    45ad:	je     487c <__sprintf_chk@plt+0xb9c>
    45b3:	movzx  r8d,BYTE PTR [rsp+0x8]
    45b9:	cmp    r13d,0x6
    45bd:	jne    4520 <__sprintf_chk@plt+0x840>
    45c3:	mov    eax,DWORD PTR [rip+0x27b9f]        # 2c168 <stderr@@GLIBC_2.2.5+0x88>
    45c9:	test   eax,eax
    45cb:	jne    4820 <__sprintf_chk@plt+0xb40>
    45d1:	mov    rcx,QWORD PTR [rbx+0xd0]
    45d8:	mov    r10,QWORD PTR [rbx+0xd8]
    45df:	cmp    BYTE PTR [rip+0x27b9f],0x0        # 2c185 <stderr@@GLIBC_2.2.5+0xa5>
    45e6:	je     4808 <__sprintf_chk@plt+0xb28>
    45ec:	cmp    QWORD PTR [rbx+0xa8],0x0
    45f4:	mov    ebp,0x0
    45f9:	cmovns rbp,QWORD PTR [rbx+0xa8]
    4601:	mov    rdx,QWORD PTR [rip+0x27b00]        # 2c108 <stderr@@GLIBC_2.2.5+0x28>
    4608:	mov    rbx,QWORD PTR [rbx+0x58]
    460c:	mov    QWORD PTR [rsp+0x50],rbp
    4611:	mov    QWORD PTR [rsp+0x58],0x1
    461a:	mov    QWORD PTR [rsp+0x60],rcx
    461f:	mov    QWORD PTR [rsp+0x68],r10
    4624:	test   rdx,rdx
    4627:	je     483c <__sprintf_chk@plt+0xb5c>
    462d:	mov    rax,QWORD PTR [rip+0x27b54]        # 2c188 <stderr@@GLIBC_2.2.5+0xa8>
    4634:	cmp    rbx,rax
    4637:	je     46af <__sprintf_chk@plt+0x9cf>
    4639:	jbe    4a48 <__sprintf_chk@plt+0xd68>
    463f:	cmp    rbx,rdx
    4642:	jae    4cbf <__sprintf_chk@plt+0xfdf>
    4648:	lea    rdx,[rax+0x1]
    464c:	cmp    rbx,rdx
    464f:	jb     46af <__sprintf_chk@plt+0x9cf>
    4651:	shl    rax,0x6
    4655:	add    rax,QWORD PTR [rip+0x27aa4]        # 2c100 <stderr@@GLIBC_2.2.5+0x20>
    465c:	nop    DWORD PTR [rax+0x0]
    4660:	add    rdx,0x1
    4664:	mov    QWORD PTR [rax+0x40],0x0
    466c:	movabs rsi,0x8000000000000000
    4676:	add    rax,0x40
    467a:	mov    QWORD PTR [rax+0x8],0x0
    4682:	mov    QWORD PTR [rax+0x10],rsi
    4686:	mov    QWORD PTR [rax+0x18],0xffffffffffffffff
    468e:	mov    QWORD PTR [rax+0x20],0x0
    4696:	mov    QWORD PTR [rax+0x28],0x0
    469e:	mov    QWORD PTR [rax+0x30],rsi
    46a2:	mov    QWORD PTR [rax+0x38],0xffffffffffffffff
    46aa:	cmp    rbx,rdx
    46ad:	jae    4660 <__sprintf_chk@plt+0x980>
    46af:	and    r13d,0xfffffffd
    46b3:	cmp    BYTE PTR [rip+0x27ac6],0x0        # 2c180 <stderr@@GLIBC_2.2.5+0xa0>
    46ba:	mov    QWORD PTR [rip+0x27ac7],rbx        # 2c188 <stderr@@GLIBC_2.2.5+0xa8>
    46c1:	je     46c9 <__sprintf_chk@plt+0x9e9>
    46c3:	cmp    r13d,0x4
    46c7:	je     4706 <__sprintf_chk@plt+0xa26>
    46c9:	mov    rax,rbx
    46cc:	mov    rdx,rbp
    46cf:	mov    rdi,0xffffffffffffffff
    46d6:	shl    rax,0x6
    46da:	add    rax,QWORD PTR [rip+0x27a1f]        # 2c100 <stderr@@GLIBC_2.2.5+0x20>
    46e1:	add    rdx,QWORD PTR [rax]
    46e4:	cmovb  rdx,rdi
    46e8:	add    QWORD PTR [rax+0x8],0x1
    46ed:	mov    QWORD PTR [rax],rdx
    46f0:	cmp    rcx,QWORD PTR [rax+0x10]
    46f4:	jg     46fe <__sprintf_chk@plt+0xa1e>
    46f6:	jl     4706 <__sprintf_chk@plt+0xa26>
    46f8:	cmp    DWORD PTR [rax+0x18],r10d
    46fc:	jns    4706 <__sprintf_chk@plt+0xa26>
    46fe:	mov    QWORD PTR [rax+0x10],rcx
    4702:	mov    QWORD PTR [rax+0x18],r10
    4706:	add    rbp,QWORD PTR [rip+0x27a13]        # 2c120 <stderr@@GLIBC_2.2.5+0x40>
    470d:	mov    rax,0xffffffffffffffff
    4714:	cmovb  rbp,rax
    4718:	add    QWORD PTR [rip+0x27a08],0x1        # 2c128 <stderr@@GLIBC_2.2.5+0x48>
    4720:	cmp    rcx,QWORD PTR [rip+0x27a09]        # 2c130 <stderr@@GLIBC_2.2.5+0x50>
    4727:	mov    QWORD PTR [rip+0x279f2],rbp        # 2c120 <stderr@@GLIBC_2.2.5+0x40>
    472e:	jg     473b <__sprintf_chk@plt+0xa5b>
    4730:	jl     4749 <__sprintf_chk@plt+0xa69>
    4732:	cmp    DWORD PTR [rip+0x279ff],r10d        # 2c138 <stderr@@GLIBC_2.2.5+0x58>
    4739:	jns    4749 <__sprintf_chk@plt+0xa69>
    473b:	mov    QWORD PTR [rip+0x279ee],rcx        # 2c130 <stderr@@GLIBC_2.2.5+0x50>
    4742:	mov    QWORD PTR [rip+0x279ef],r10        # 2c138 <stderr@@GLIBC_2.2.5+0x58>
    4749:	cmp    r13d,0x4
    474d:	je     47b8 <__sprintf_chk@plt+0xad8>
    474f:	cmp    BYTE PTR [rip+0x27a30],0x0        # 2c186 <stderr@@GLIBC_2.2.5+0xa6>
    4756:	jne    47b8 <__sprintf_chk@plt+0xad8>
    4758:	test   rbx,rbx
    475b:	jne    4589 <__sprintf_chk@plt+0x8a9>
    4761:	cmp    BYTE PTR [rip+0x27a05],0x0        # 2c16d <stderr@@GLIBC_2.2.5+0x8d>
    4768:	mov    rdx,QWORD PTR [rsp+0x58]
    476d:	mov    rcx,QWORD PTR [rip+0x27a04]        # 2c178 <stderr@@GLIBC_2.2.5+0x98>
    4774:	cmove  rdx,QWORD PTR [rsp+0x50]
    477a:	cmp    rdx,rcx
    477d:	setae  al
    4780:	test   rcx,rcx
    4783:	jns    478e <__sprintf_chk@plt+0xaae>
    4785:	neg    rcx
    4788:	cmp    rcx,rdx
    478b:	setae  al
    478e:	test   al,al
    4790:	je     4589 <__sprintf_chk@plt+0x8a9>
    4796:	lea    rdi,[rsp+0x50]
    479b:	mov    rsi,r14
    479e:	mov    BYTE PTR [rsp+0x10],r8b
    47a3:	call   53e0 <__sprintf_chk@plt+0x1700>
    47a8:	movzx  r8d,BYTE PTR [rsp+0x10]
    47ae:	jmp    4589 <__sprintf_chk@plt+0x8a9>
    47b3:	nop    DWORD PTR [rax+rax*1+0x0]
    47b8:	cmp    rbx,QWORD PTR [rip+0x27851]        # 2c010 <__sprintf_chk@plt+0x28330>
    47bf:	jbe    4761 <__sprintf_chk@plt+0xa81>
    47c1:	jmp    4758 <__sprintf_chk@plt+0xa78>
    47c3:	nop    DWORD PTR [rax+rax*1+0x0]
    47c8:	cmp    BYTE PTR [rax],0x0
    47cb:	jne    44e9 <__sprintf_chk@plt+0x809>
    47d1:	mov    edx,0x5
    47d6:	lea    rsi,[rip+0x1dab3]        # 22290 <__sprintf_chk@plt+0x1e5b0>
    47dd:	xor    edi,edi
    47df:	call   37f0 <dcgettext@plt>
    47e4:	lea    rdx,[rip+0x1ef65]        # 23750 <__sprintf_chk@plt+0x1fa70>
    47eb:	xor    esi,esi
    47ed:	xor    edi,edi
    47ef:	mov    rcx,rax
    47f2:	xor    eax,eax
    47f4:	call   3b90 <error@plt>
    47f9:	mov    BYTE PTR [rsp+0xc],0x0
    47fe:	jmp    43a0 <__sprintf_chk@plt+0x6c0>
    4803:	nop    DWORD PTR [rax+rax*1+0x0]
    4808:	mov    rbp,QWORD PTR [rbx+0xb8]
    480f:	shl    rbp,0x9
    4813:	jmp    4601 <__sprintf_chk@plt+0x921>
    4818:	nop    DWORD PTR [rax+rax*1+0x0]
    4820:	cmp    eax,0x2
    4823:	je     4b7e <__sprintf_chk@plt+0xe9e>
    4829:	mov    rcx,QWORD PTR [rbx+0xe0]
    4830:	mov    r10,QWORD PTR [rbx+0xe8]
    4837:	jmp    45df <__sprintf_chk@plt+0x8ff>
    483c:	lea    rdi,[rbx+0xa]
    4840:	mov    esi,0x40
    4845:	mov    BYTE PTR [rsp+0x23],r8b
    484a:	mov    QWORD PTR [rsp+0x18],r10
    484f:	mov    QWORD PTR [rsp+0x10],rcx
    4854:	mov    QWORD PTR [rip+0x278ad],rdi        # 2c108 <stderr@@GLIBC_2.2.5+0x28>
    485b:	call   e460 <__sprintf_chk@plt+0xa780>
    4860:	mov    rcx,QWORD PTR [rsp+0x10]
    4865:	mov    r10,QWORD PTR [rsp+0x18]
    486a:	mov    QWORD PTR [rip+0x2788f],rax        # 2c100 <stderr@@GLIBC_2.2.5+0x20>
    4871:	movzx  r8d,BYTE PTR [rsp+0x23]
    4877:	jmp    46af <__sprintf_chk@plt+0x9cf>
    487c:	mov    rsi,r14
    487f:	mov    edi,0x4
    4884:	call   d3f0 <__sprintf_chk@plt+0x9710>
    4889:	mov    edx,0x5
    488e:	lea    rsi,[rip+0x1d988]        # 2221d <__sprintf_chk@plt+0x1e53d>
    4895:	xor    edi,edi
    4897:	mov    rbp,rax
    489a:	call   37f0 <dcgettext@plt>
    489f:	mov    esi,DWORD PTR [rbx+0x40]
    48a2:	mov    rcx,rbp
    48a5:	xor    edi,edi
    48a7:	mov    rdx,rax
    48aa:	xor    eax,eax
    48ac:	call   3b90 <error@plt>
    48b1:	xor    r8d,r8d
    48b4:	jmp    45c3 <__sprintf_chk@plt+0x8e3>
    48b9:	mov    eax,DWORD PTR [rsp+0x4c]
    48bd:	cmp    eax,0x3
    48c0:	je     50a4 <__sprintf_chk@plt+0x13c4>
    48c6:	cmp    eax,0x4
    48c9:	jne    4999 <__sprintf_chk@plt+0xcb9>
    48cf:	mov    rdx,r13
    48d2:	mov    esi,0x3
    48d7:	xor    edi,edi
    48d9:	call   d770 <__sprintf_chk@plt+0x9a90>
    48de:	mov    edx,0x5
    48e3:	lea    rsi,[rip+0x1d907]        # 221f1 <__sprintf_chk@plt+0x1e511>
    48ea:	xor    edi,edi
    48ec:	mov    r14,rax
    48ef:	call   37f0 <dcgettext@plt>
    48f4:	mov    r12,rax
    48f7:	call   36f0 <__errno_location@plt>
    48fc:	mov    rcx,r14
    48ff:	mov    rdx,r12
    4902:	xor    edi,edi
    4904:	mov    esi,DWORD PTR [rax]
    4906:	xor    eax,eax
    4908:	call   3b90 <error@plt>
    490d:	mov    BYTE PTR [rsp+0xc],0x0
    4912:	mov    rdi,QWORD PTR [rsp]
    4916:	call   5f10 <__sprintf_chk@plt+0x2230>
    491b:	mov    rdi,QWORD PTR [rip+0x27876]        # 2c198 <stderr@@GLIBC_2.2.5+0xb8>
    4922:	call   6170 <__sprintf_chk@plt+0x2490>
    4927:	mov    rdi,QWORD PTR [rip+0x27862]        # 2c190 <stderr@@GLIBC_2.2.5+0xb0>
    492e:	test   rdi,rdi
    4931:	je     4938 <__sprintf_chk@plt+0xc58>
    4933:	call   6170 <__sprintf_chk@plt+0x2490>
    4938:	test   r13,r13
    493b:	je     4958 <__sprintf_chk@plt+0xc78>
    493d:	mov    rdi,QWORD PTR [rip+0x2776c]        # 2c0b0 <stdin@@GLIBC_2.2.5>
    4944:	test   BYTE PTR [rdi],0x20
    4947:	je     4e0e <__sprintf_chk@plt+0x112e>
    494d:	cmp    BYTE PTR [rsp+0xc],0x0
    4952:	jne    5168 <__sprintf_chk@plt+0x1488>
    4958:	cmp    BYTE PTR [rip+0x27822],0x0        # 2c181 <stderr@@GLIBC_2.2.5+0xa1>
    495f:	jne    4c12 <__sprintf_chk@plt+0xf32>
    4965:	movzx  eax,BYTE PTR [rsp+0xc]
    496a:	xor    eax,0x1
    496d:	movzx  eax,al
    4970:	mov    rcx,QWORD PTR [rsp+0x118]
    4978:	sub    rcx,QWORD PTR fs:0x28
    4981:	jne    5163 <__sprintf_chk@plt+0x1483>
    4987:	add    rsp,0x128
    498e:	pop    rbx
    498f:	pop    rbp
    4990:	pop    r12
    4992:	pop    r13
    4994:	pop    r14
    4996:	pop    r15
    4998:	ret    
    4999:	cmp    eax,0x2
    499c:	je     4912 <__sprintf_chk@plt+0xc32>
    49a2:	lea    rcx,[rip+0x1ed14]        # 236bd <__sprintf_chk@plt+0x1f9dd>
    49a9:	mov    edx,0x439
    49ae:	lea    rsi,[rip+0x1d84b]        # 22200 <__sprintf_chk@plt+0x1e520>
    49b5:	lea    rdi,[rip+0x1ea64]        # 23420 <__sprintf_chk@plt+0x1f740>
    49bc:	call   38e0 <__assert_fail@plt>
    49c1:	cmp    BYTE PTR [rip+0x277bc],0x0        # 2c184 <stderr@@GLIBC_2.2.5+0xa4>
    49c8:	jne    4a1f <__sprintf_chk@plt+0xd3f>
    49ca:	cmp    BYTE PTR [rip+0x277b2],0x0        # 2c183 <stderr@@GLIBC_2.2.5+0xa3>
    49d1:	jne    49ef <__sprintf_chk@plt+0xd0f>
    49d3:	mov    eax,DWORD PTR [rbx+0x90]
    49d9:	and    eax,0xf000
    49de:	cmp    eax,0x4000
    49e3:	je     4a1f <__sprintf_chk@plt+0xd3f>
    49e5:	cmp    QWORD PTR [rbx+0x88],0x1
    49ed:	jbe    4a1f <__sprintf_chk@plt+0xd3f>
    49ef:	mov    rdx,QWORD PTR [rbx+0x80]
    49f6:	mov    rsi,QWORD PTR [rbx+0x78]
    49fa:	mov    BYTE PTR [rsp+0x10],r8b
    49ff:	mov    rdi,QWORD PTR [rip+0x27792]        # 2c198 <stderr@@GLIBC_2.2.5+0xb8>
    4a06:	call   61a0 <__sprintf_chk@plt+0x24c0>
    4a0b:	test   eax,eax
    4a0d:	js     50a4 <__sprintf_chk@plt+0x13c4>
    4a13:	movzx  r8d,BYTE PTR [rsp+0x10]
    4a19:	je     4579 <__sprintf_chk@plt+0x899>
    4a1f:	cmp    r13d,0x2
    4a23:	je     4ebd <__sprintf_chk@plt+0x11dd>
    4a29:	cmp    r13d,0x7
    4a2d:	je     4e88 <__sprintf_chk@plt+0x11a8>
    4a33:	movzx  r8d,BYTE PTR [rsp+0x8]
    4a39:	cmp    r13d,0x1
    4a3d:	jne    45c3 <__sprintf_chk@plt+0x8e3>
    4a43:	jmp    4589 <__sprintf_chk@plt+0x8a9>
    4a48:	lea    rdx,[rax-0x1]
    4a4c:	cmp    rbx,rdx
    4a4f:	jne    5144 <__sprintf_chk@plt+0x1464>
    4a55:	mov    rdx,QWORD PTR [rip+0x276a4]        # 2c100 <stderr@@GLIBC_2.2.5+0x20>
    4a5c:	shl    rax,0x6
    4a60:	mov    rdi,0xffffffffffffffff
    4a67:	mov    rsi,rbp
    4a6a:	add    rax,rdx
    4a6d:	add    rsi,QWORD PTR [rax]
    4a70:	cmovb  rsi,rdi
    4a74:	mov    rdi,QWORD PTR [rax+0x8]
    4a78:	add    rdi,0x1
    4a7c:	mov    QWORD PTR [rsp+0x50],rsi
    4a81:	mov    QWORD PTR [rsp+0x58],rdi
    4a86:	cmp    rcx,QWORD PTR [rax+0x10]
    4a8a:	jl     4a94 <__sprintf_chk@plt+0xdb4>
    4a8c:	jg     4a9e <__sprintf_chk@plt+0xdbe>
    4a8e:	cmp    r10d,DWORD PTR [rax+0x18]
    4a92:	jns    4a9e <__sprintf_chk@plt+0xdbe>
    4a94:	movdqu xmm0,XMMWORD PTR [rax+0x10]
    4a99:	movups XMMWORD PTR [rsp+0x60],xmm0
    4a9e:	cmp    BYTE PTR [rip+0x276db],0x0        # 2c180 <stderr@@GLIBC_2.2.5+0xa0>
    4aa5:	je     4c75 <__sprintf_chk@plt+0xf95>
    4aab:	mov    rsi,rbx
    4aae:	mov    rdi,0xffffffffffffffff
    4ab5:	shl    rsi,0x6
    4ab9:	add    rdx,rsi
    4abc:	mov    rsi,QWORD PTR [rax]
    4abf:	add    rsi,QWORD PTR [rdx+0x20]
    4ac3:	mov    r11,QWORD PTR [rdx+0x30]
    4ac7:	cmovb  rsi,rdi
    4acb:	mov    rdi,QWORD PTR [rax+0x8]
    4acf:	add    rdi,QWORD PTR [rdx+0x28]
    4ad3:	mov    QWORD PTR [rdx+0x28],rdi
    4ad7:	mov    QWORD PTR [rdx+0x20],rsi
    4adb:	cmp    r11,QWORD PTR [rax+0x10]
    4adf:	jl     4aed <__sprintf_chk@plt+0xe0d>
    4ae1:	jg     4afa <__sprintf_chk@plt+0xe1a>
    4ae3:	mov    r9d,DWORD PTR [rax+0x18]
    4ae7:	cmp    DWORD PTR [rdx+0x38],r9d
    4aeb:	jns    4afa <__sprintf_chk@plt+0xe1a>
    4aed:	movdqu xmm1,XMMWORD PTR [rax+0x10]
    4af2:	mov    r11,QWORD PTR [rax+0x10]
    4af6:	movups XMMWORD PTR [rdx+0x30],xmm1
    4afa:	add    rsi,QWORD PTR [rax+0x20]
    4afe:	mov    r9,0xffffffffffffffff
    4b05:	cmovb  rsi,r9
    4b09:	add    rdi,QWORD PTR [rax+0x28]
    4b0d:	mov    QWORD PTR [rdx+0x28],rdi
    4b11:	mov    QWORD PTR [rdx+0x20],rsi
    4b15:	cmp    r11,QWORD PTR [rax+0x30]
    4b19:	jl     4b2d <__sprintf_chk@plt+0xe4d>
    4b1b:	jg     46af <__sprintf_chk@plt+0x9cf>
    4b21:	mov    edi,DWORD PTR [rax+0x38]
    4b24:	cmp    DWORD PTR [rdx+0x38],edi
    4b27:	jns    46af <__sprintf_chk@plt+0x9cf>
    4b2d:	movdqu xmm2,XMMWORD PTR [rax+0x30]
    4b32:	movups XMMWORD PTR [rdx+0x30],xmm2
    4b36:	jmp    46af <__sprintf_chk@plt+0x9cf>
    4b3b:	call   36f0 <__errno_location@plt>
    4b40:	mov    r13,QWORD PTR [rsp+0x28]
    4b45:	mov    r14,QWORD PTR [rsp+0x30]
    4b4a:	mov    ebp,r12d
    4b4d:	cmp    DWORD PTR [rax],0x0
    4b50:	mov    rbx,rax
    4b53:	jne    4dd0 <__sprintf_chk@plt+0x10f0>
    4b59:	mov    QWORD PTR [rip+0x27624],0x0        # 2c188 <stderr@@GLIBC_2.2.5+0xa8>
    4b64:	mov    rdi,r15
    4b67:	call   10e30 <__sprintf_chk@plt+0xd150>
    4b6c:	test   eax,eax
    4b6e:	jne    4da8 <__sprintf_chk@plt+0x10c8>
    4b74:	and    BYTE PTR [rsp+0xc],bpl
    4b79:	jmp    43a0 <__sprintf_chk@plt+0x6c0>
    4b7e:	mov    rcx,QWORD PTR [rbx+0xc0]
    4b85:	mov    r10,QWORD PTR [rbx+0xc8]
    4b8c:	jmp    45df <__sprintf_chk@plt+0x8ff>
    4b91:	mov    edx,0x5
    4b96:	lea    rsi,[rip+0x1e793]        # 23330 <__sprintf_chk@plt+0x1f650>
    4b9d:	xor    edi,edi
    4b9f:	call   37f0 <dcgettext@plt>
    4ba4:	xor    esi,esi
    4ba6:	xor    edi,edi
    4ba8:	mov    rdx,rax
    4bab:	xor    eax,eax
    4bad:	call   3b90 <error@plt>
    4bb2:	mov    rbx,QWORD PTR [rip+0x27457]        # 2c010 <__sprintf_chk@plt+0x28330>
    4bb9:	test   rbx,rbx
    4bbc:	jne    44b0 <__sprintf_chk@plt+0x7d0>
    4bc2:	mov    QWORD PTR [rip+0x27443],0x0        # 2c010 <__sprintf_chk@plt+0x28330>
    4bcd:	jmp    4286 <__sprintf_chk@plt+0x5a6>
    4bd2:	mov    rdi,r15
    4bd5:	mov    edx,0x4
    4bda:	mov    rsi,rbx
    4bdd:	call   11810 <__sprintf_chk@plt+0xdb30>
    4be2:	mov    rdi,r15
    4be5:	call   11020 <__sprintf_chk@plt+0xd340>
    4bea:	cmp    rbx,rax
    4bed:	je     4583 <__sprintf_chk@plt+0x8a3>
    4bf3:	lea    rcx,[rip+0x1eab6]        # 236b0 <__sprintf_chk@plt+0x1f9d0>
    4bfa:	mov    edx,0x230
    4bff:	lea    rsi,[rip+0x1d5fa]        # 22200 <__sprintf_chk@plt+0x1e520>
    4c06:	lea    rdi,[rip+0x1d629]        # 22236 <__sprintf_chk@plt+0x1e556>
    4c0d:	call   38e0 <__assert_fail@plt>
    4c12:	xor    edi,edi
    4c14:	mov    edx,0x5
    4c19:	lea    rsi,[rip+0x1d66a]        # 2228a <__sprintf_chk@plt+0x1e5aa>
    4c20:	call   37f0 <dcgettext@plt>
    4c25:	lea    rdi,[rip+0x274f4]        # 2c120 <stderr@@GLIBC_2.2.5+0x40>
    4c2c:	mov    rsi,rax
    4c2f:	call   53e0 <__sprintf_chk@plt+0x1700>
    4c34:	jmp    4965 <__sprintf_chk@plt+0xc85>
    4c39:	lea    rdi,[rsp+0x70]
    4c3e:	cmp    r12d,eax
    4c41:	jle    4c48 <__sprintf_chk@plt+0xf68>
    4c43:	lea    rdi,[rbp+rax*8+0x0]
    4c48:	call   5de0 <__sprintf_chk@plt+0x2100>
    4c4d:	mov    QWORD PTR [rsp],rax
    4c51:	mov    eax,DWORD PTR [rip+0x27461]        # 2c0b8 <optind@@GLIBC_2.2.5>
    4c57:	add    eax,0x1
    4c5a:	cmp    eax,r12d
    4c5d:	setl   al
    4c60:	cmp    DWORD PTR [rsp+0x8],0x2
    4c65:	sete   dl
    4c68:	or     eax,edx
    4c6a:	mov    BYTE PTR [rip+0x27513],al        # 2c183 <stderr@@GLIBC_2.2.5+0xa3>
    4c70:	jmp    433e <__sprintf_chk@plt+0x65e>
    4c75:	add    rsi,QWORD PTR [rax+0x20]
    4c79:	mov    r11,0xffffffffffffffff
    4c80:	cmovb  rsi,r11
    4c84:	add    rdi,QWORD PTR [rax+0x28]
    4c88:	mov    QWORD PTR [rsp+0x58],rdi
    4c8d:	mov    rdi,QWORD PTR [rsp+0x60]
    4c92:	mov    QWORD PTR [rsp+0x50],rsi
    4c97:	cmp    QWORD PTR [rax+0x30],rdi
    4c9b:	jg     4cb0 <__sprintf_chk@plt+0xfd0>
    4c9d:	jl     4aab <__sprintf_chk@plt+0xdcb>
    4ca3:	mov    edi,DWORD PTR [rax+0x38]
    4ca6:	cmp    DWORD PTR [rsp+0x68],edi
    4caa:	jns    4aab <__sprintf_chk@plt+0xdcb>
    4cb0:	movdqu xmm3,XMMWORD PTR [rax+0x30]
    4cb5:	movups XMMWORD PTR [rsp+0x60],xmm3
    4cba:	jmp    4aab <__sprintf_chk@plt+0xdcb>
    4cbf:	mov    edx,0x80
    4cc4:	mov    BYTE PTR [rsp+0x23],r8b
    4cc9:	mov    rdi,QWORD PTR [rip+0x27430]        # 2c100 <stderr@@GLIBC_2.2.5+0x20>
    4cd0:	mov    rax,rdx
    4cd3:	mov    QWORD PTR [rsp+0x18],r10
    4cd8:	mul    rbx
    4cdb:	mov    QWORD PTR [rsp+0x10],rcx
    4ce0:	seto   dl
    4ce3:	movzx  edx,dl
    4ce6:	test   rax,rax
    4ce9:	js     50a4 <__sprintf_chk@plt+0x13c4>
    4cef:	test   rdx,rdx
    4cf2:	jne    50a4 <__sprintf_chk@plt+0x13c4>
    4cf8:	mov    rsi,rbx
    4cfb:	shl    rsi,0x7
    4cff:	call   e390 <__sprintf_chk@plt+0xa6b0>
    4d04:	movzx  r8d,BYTE PTR [rsp+0x23]
    4d0a:	mov    r10,QWORD PTR [rsp+0x18]
    4d0f:	mov    QWORD PTR [rip+0x273ea],rax        # 2c100 <stderr@@GLIBC_2.2.5+0x20>
    4d16:	lea    rax,[rbx+rbx*1]
    4d1a:	mov    rcx,QWORD PTR [rsp+0x10]
    4d1f:	mov    QWORD PTR [rip+0x273e2],rax        # 2c108 <stderr@@GLIBC_2.2.5+0x28>
    4d26:	mov    rax,QWORD PTR [rip+0x2745b]        # 2c188 <stderr@@GLIBC_2.2.5+0xa8>
    4d2d:	jmp    4648 <__sprintf_chk@plt+0x968>
    4d32:	lea    rax,[rip+0x1d39b]        # 220d4 <__sprintf_chk@plt+0x1e3f4>
    4d39:	mov    QWORD PTR [rip+0x27420],rax        # 2c160 <stderr@@GLIBC_2.2.5+0x80>
    4d40:	mov    r10,rax
    4d43:	mov    r9,QWORD PTR [rip+0x272d6]        # 2c020 <__sprintf_chk@plt+0x28340>
    4d4a:	mov    r8d,0x4
    4d50:	mov    rsi,r10
    4d53:	lea    rcx,[rip+0x1e976]        # 236d0 <__sprintf_chk@plt+0x1f9f0>
    4d5a:	lea    rdx,[rip+0x2691f]        # 2b680 <__sprintf_chk@plt+0x279a0>
    4d61:	lea    rdi,[rip+0x1d422]        # 2218a <__sprintf_chk@plt+0x1e4aa>
    4d68:	call   5d00 <__sprintf_chk@plt+0x2020>
    4d6d:	mov    r8,rax
    4d70:	lea    rax,[rip+0x1e959]        # 236d0 <__sprintf_chk@plt+0x1f9f0>
    4d77:	mov    eax,DWORD PTR [rax+r8*4]
    4d7b:	cmp    eax,0x1
    4d7e:	je     501e <__sprintf_chk@plt+0x133e>
    4d84:	cmp    eax,0x2
    4d87:	je     500b <__sprintf_chk@plt+0x132b>
    4d8d:	test   eax,eax
    4d8f:	jne    42dc <__sprintf_chk@plt+0x5fc>
    4d95:	lea    rax,[rip+0x1d3f9]        # 22195 <__sprintf_chk@plt+0x1e4b5>
    4d9c:	mov    QWORD PTR [rip+0x273b5],rax        # 2c158 <stderr@@GLIBC_2.2.5+0x78>
    4da3:	jmp    42dc <__sprintf_chk@plt+0x5fc>
    4da8:	mov    edx,0x5
    4dad:	lea    rsi,[rip+0x1d4b4]        # 22268 <__sprintf_chk@plt+0x1e588>
    4db4:	xor    edi,edi
    4db6:	xor    ebp,ebp
    4db8:	call   37f0 <dcgettext@plt>
    4dbd:	mov    esi,DWORD PTR [rbx]
    4dbf:	xor    edi,edi
    4dc1:	mov    rdx,rax
    4dc4:	xor    eax,eax
    4dc6:	call   3b90 <error@plt>
    4dcb:	jmp    4b74 <__sprintf_chk@plt+0xe94>
    4dd0:	mov    rdx,QWORD PTR [r15+0x20]
    4dd4:	mov    esi,0x3
    4dd9:	xor    edi,edi
    4ddb:	xor    ebp,ebp
    4ddd:	call   d770 <__sprintf_chk@plt+0x9a90>
    4de2:	mov    edx,0x5
    4de7:	lea    rsi,[rip+0x1d41b]        # 22209 <__sprintf_chk@plt+0x1e529>
    4dee:	xor    edi,edi
    4df0:	mov    r12,rax
    4df3:	call   37f0 <dcgettext@plt>
    4df8:	mov    esi,DWORD PTR [rbx]
    4dfa:	mov    rcx,r12
    4dfd:	xor    edi,edi
    4dff:	mov    rdx,rax
    4e02:	xor    eax,eax
    4e04:	call   3b90 <error@plt>
    4e09:	jmp    4b59 <__sprintf_chk@plt+0xe79>
    4e0e:	call   f210 <__sprintf_chk@plt+0xb530>
    4e13:	test   eax,eax
    4e15:	jne    494d <__sprintf_chk@plt+0xc6d>
    4e1b:	jmp    4958 <__sprintf_chk@plt+0xc78>
    4e20:	mov    rsi,r14
    4e23:	mov    edi,0x4
    4e28:	call   d3f0 <__sprintf_chk@plt+0x9710>
    4e2d:	mov    edx,0x5
    4e32:	lea    rsi,[rip+0x1d406]        # 2223f <__sprintf_chk@plt+0x1e55f>
    4e39:	xor    edi,edi
    4e3b:	mov    r13,rax
    4e3e:	call   37f0 <dcgettext@plt>
    4e43:	mov    esi,DWORD PTR [rbx+0x40]
    4e46:	mov    rcx,r13
    4e49:	xor    edi,edi
    4e4b:	mov    rdx,rax
    4e4e:	xor    eax,eax
    4e50:	call   3b90 <error@plt>
    4e55:	xor    r8d,r8d
    4e58:	jmp    4589 <__sprintf_chk@plt+0x8a9>
    4e5d:	mov    rdi,r15
    4e60:	mov    edx,0x1
    4e65:	mov    rsi,rbx
    4e68:	call   11810 <__sprintf_chk@plt+0xdb30>
    4e6d:	mov    rdi,r15
    4e70:	call   11020 <__sprintf_chk@plt+0xd340>
    4e75:	cmp    rbx,rax
    4e78:	jne    50dc <__sprintf_chk@plt+0x13fc>
    4e7e:	movzx  r13d,WORD PTR [rbx+0x70]
    4e83:	jmp    453d <__sprintf_chk@plt+0x85d>
    4e88:	mov    rdx,r14
    4e8b:	mov    esi,0x3
    4e90:	xor    edi,edi
    4e92:	mov    BYTE PTR [rsp+0x10],r8b
    4e97:	call   d770 <__sprintf_chk@plt+0x9a90>
    4e9c:	mov    esi,DWORD PTR [rbx+0x40]
    4e9f:	lea    rdx,[rip+0x1e8aa]        # 23750 <__sprintf_chk@plt+0x1fa70>
    4ea6:	xor    edi,edi
    4ea8:	mov    rcx,rax
    4eab:	xor    eax,eax
    4ead:	call   3b90 <error@plt>
    4eb2:	movzx  r8d,BYTE PTR [rsp+0x10]
    4eb8:	jmp    45c3 <__sprintf_chk@plt+0x8e3>
    4ebd:	mov    rsi,rbx
    4ec0:	mov    rdi,r15
    4ec3:	call   e5b0 <__sprintf_chk@plt+0xa8d0>
    4ec8:	test   al,al
    4eca:	je     4583 <__sprintf_chk@plt+0x8a3>
    4ed0:	cmp    QWORD PTR [rip+0x272b8],0x0        # 2c190 <stderr@@GLIBC_2.2.5+0xb0>
    4ed8:	mov    r13,QWORD PTR [rbx]
    4edb:	jne    4f05 <__sprintf_chk@plt+0x1225>
    4edd:	jmp    5031 <__sprintf_chk@plt+0x1351>
    4ee2:	mov    rdx,QWORD PTR [rbx+0x80]
    4ee9:	mov    rsi,QWORD PTR [rbx+0x78]
    4eed:	mov    rdi,QWORD PTR [rip+0x2729c]        # 2c190 <stderr@@GLIBC_2.2.5+0xb0>
    4ef4:	call   6230 <__sprintf_chk@plt+0x2550>
    4ef9:	test   eax,eax
    4efb:	jg     4583 <__sprintf_chk@plt+0x8a3>
    4f01:	mov    rbx,QWORD PTR [rbx+0x8]
    4f05:	test   rbx,rbx
    4f08:	setne  al
    4f0b:	cmp    r13,rbx
    4f0e:	setne  dl
    4f11:	and    al,dl
    4f13:	jne    4ee2 <__sprintf_chk@plt+0x1202>
    4f15:	mov    rdx,r14
    4f18:	mov    esi,0x3
    4f1d:	xor    edi,edi
    4f1f:	mov    BYTE PTR [rsp+0x10],al
    4f23:	call   d770 <__sprintf_chk@plt+0x9a90>
    4f28:	mov    edx,0x5
    4f2d:	lea    rsi,[rip+0x1e554]        # 23488 <__sprintf_chk@plt+0x1f7a8>
    4f34:	xor    edi,edi
    4f36:	mov    r13,rax
    4f39:	call   37f0 <dcgettext@plt>
    4f3e:	mov    rcx,r13
    4f41:	xor    esi,esi
    4f43:	xor    edi,edi
    4f45:	mov    rdx,rax
    4f48:	xor    eax,eax
    4f4a:	call   3b90 <error@plt>
    4f4f:	movzx  r8d,BYTE PTR [rsp+0x10]
    4f55:	jmp    4589 <__sprintf_chk@plt+0x8a9>
    4f5a:	xor    edi,edi
    4f5c:	mov    edx,0x5
    4f61:	lea    rsi,[rip+0x1e438]        # 233a0 <__sprintf_chk@plt+0x1f6c0>
    4f68:	call   37f0 <dcgettext@plt>
    4f6d:	xor    esi,esi
    4f6f:	xor    edi,edi
    4f71:	mov    rdx,rax
    4f74:	xor    eax,eax
    4f76:	call   3b90 <error@plt>
    4f7b:	jmp    429c <__sprintf_chk@plt+0x5bc>
    4f80:	xor    edi,edi
    4f82:	call   5550 <__sprintf_chk@plt+0x1870>
    4f87:	lea    rdi,[rip+0x1d1f1]        # 2217f <__sprintf_chk@plt+0x1e49f>
    4f8e:	call   36c0 <getenv@plt>
    4f93:	mov    QWORD PTR [rip+0x271c6],rax        # 2c160 <stderr@@GLIBC_2.2.5+0x80>
    4f9a:	test   rax,rax
    4f9d:	je     4d32 <__sprintf_chk@plt+0x1052>
    4fa3:	lea    rsi,[rip+0x1d13e]        # 220e8 <__sprintf_chk@plt+0x1e408>
    4faa:	mov    rdi,rax
    4fad:	mov    QWORD PTR [rsp],rax
    4fb1:	call   39b0 <strcmp@plt>
    4fb6:	mov    r10,QWORD PTR [rsp]
    4fba:	test   eax,eax
    4fbc:	je     4d32 <__sprintf_chk@plt+0x1052>
    4fc2:	cmp    BYTE PTR [r10],0x2b
    4fc6:	lea    rbx,[rip+0x1e6f5]        # 236c2 <__sprintf_chk@plt+0x1f9e2>
    4fcd:	je     50b3 <__sprintf_chk@plt+0x13d3>
    4fd3:	mov    QWORD PTR [rsp],rbp
    4fd7:	jmp    4fe4 <__sprintf_chk@plt+0x1304>
    4fd9:	lea    rcx,[rbp+0x6]
    4fdd:	mov    QWORD PTR [rip+0x2717c],rcx        # 2c160 <stderr@@GLIBC_2.2.5+0x80>
    4fe4:	mov    rbp,QWORD PTR [rip+0x27175]        # 2c160 <stderr@@GLIBC_2.2.5+0x80>
    4feb:	mov    edx,0x6
    4ff0:	mov    rsi,rbx
    4ff3:	mov    rdi,rbp
    4ff6:	call   3700 <strncmp@plt>
    4ffb:	test   eax,eax
    4ffd:	je     4fd9 <__sprintf_chk@plt+0x12f9>
    4fff:	mov    rcx,rbp
    5002:	mov    rbp,QWORD PTR [rsp]
    5006:	jmp    42c5 <__sprintf_chk@plt+0x5e5>
    500b:	lea    rax,[rip+0x1d1aa]        # 221bc <__sprintf_chk@plt+0x1e4dc>
    5012:	mov    QWORD PTR [rip+0x2713f],rax        # 2c158 <stderr@@GLIBC_2.2.5+0x78>
    5019:	jmp    42dc <__sprintf_chk@plt+0x5fc>
    501e:	lea    rax,[rip+0x1d188]        # 221ad <__sprintf_chk@plt+0x1e4cd>
    5025:	mov    QWORD PTR [rip+0x2712c],rax        # 2c158 <stderr@@GLIBC_2.2.5+0x78>
    502c:	jmp    42dc <__sprintf_chk@plt+0x5fc>
    5031:	call   6100 <__sprintf_chk@plt+0x2420>
    5036:	mov    QWORD PTR [rip+0x27153],rax        # 2c190 <stderr@@GLIBC_2.2.5+0xb0>
    503d:	test   rax,rax
    5040:	je     50a4 <__sprintf_chk@plt+0x13c4>
    5042:	xor    edi,edi
    5044:	call   11b60 <__sprintf_chk@plt+0xde80>
    5049:	mov    QWORD PTR [rsp+0x10],rbx
    504e:	mov    rbp,rax
    5051:	jmp    5062 <__sprintf_chk@plt+0x1382>
    5053:	mov    rbx,QWORD PTR [rbp+0x30]
    5057:	mov    rdi,rbp
    505a:	call   12530 <__sprintf_chk@plt+0xe850>
    505f:	mov    rbp,rbx
    5062:	test   rbp,rbp
    5065:	je     50a9 <__sprintf_chk@plt+0x13c9>
    5067:	test   BYTE PTR [rbp+0x28],0x3
    506b:	jne    5053 <__sprintf_chk@plt+0x1373>
    506d:	mov    rsi,QWORD PTR [rbp+0x8]
    5071:	mov    rdx,QWORD PTR [rsp+0x38]
    5076:	mov    edi,0x1
    507b:	call   3a30 <__xstat@plt>
    5080:	test   eax,eax
    5082:	jne    5053 <__sprintf_chk@plt+0x1373>
    5084:	mov    rdx,QWORD PTR [rsp+0x88]
    508c:	mov    rsi,QWORD PTR [rsp+0x80]
    5094:	mov    rdi,QWORD PTR [rip+0x270f5]        # 2c190 <stderr@@GLIBC_2.2.5+0xb0>
    509b:	call   61a0 <__sprintf_chk@plt+0x24c0>
    50a0:	test   eax,eax
    50a2:	jns    5053 <__sprintf_chk@plt+0x1373>
    50a4:	call   e520 <__sprintf_chk@plt+0xa840>
    50a9:	mov    rbx,QWORD PTR [rsp+0x10]
    50ae:	jmp    4f05 <__sprintf_chk@plt+0x1225>
    50b3:	mov    rdi,r10
    50b6:	mov    esi,0xa
    50bb:	mov    QWORD PTR [rsp],r10
    50bf:	call   3880 <strchr@plt>
    50c4:	mov    r10,QWORD PTR [rsp]
    50c8:	test   rax,rax
    50cb:	je     42d1 <__sprintf_chk@plt+0x5f1>
    50d1:	mov    BYTE PTR [rax],0x0
    50d4:	mov    rcx,r10
    50d7:	jmp    42c5 <__sprintf_chk@plt+0x5e5>
    50dc:	lea    rcx,[rip+0x1e5cd]        # 236b0 <__sprintf_chk@plt+0x1f9d0>
    50e3:	mov    edx,0x20f
    50e8:	lea    rsi,[rip+0x1d111]        # 22200 <__sprintf_chk@plt+0x1e520>
    50ef:	lea    rdi,[rip+0x1d140]        # 22236 <__sprintf_chk@plt+0x1e556>
    50f6:	call   38e0 <__assert_fail@plt>
    50fb:	mov    edx,0x5
    5100:	lea    rsi,[rip+0x1e1f9]        # 23300 <__sprintf_chk@plt+0x1f620>
    5107:	xor    edi,edi
    5109:	call   37f0 <dcgettext@plt>
    510e:	xor    esi,esi
    5110:	xor    edi,edi
    5112:	mov    rdx,rax
    5115:	xor    eax,eax
    5117:	call   3b90 <error@plt>
    511c:	mov    edi,0x1
    5121:	call   5550 <__sprintf_chk@plt+0x1870>
    5126:	mov    r8,QWORD PTR [rip+0x26f93]        # 2c0c0 <optarg@@GLIBC_2.2.5>
    512d:	mov    esi,DWORD PTR [rsp+0x4c]
    5131:	mov    edx,0x74
    5136:	mov    edi,eax
    5138:	lea    rcx,[rip+0x265a1]        # 2b6e0 <__sprintf_chk@plt+0x27a00>
    513f:	call   ec80 <__sprintf_chk@plt+0xafa0>
    5144:	lea    rcx,[rip+0x1e565]        # 236b0 <__sprintf_chk@plt+0x1f9d0>
    514b:	mov    edx,0x27e
    5150:	lea    rsi,[rip+0x1d0a9]        # 22200 <__sprintf_chk@plt+0x1e520>
    5157:	lea    rdi,[rip+0x1d0f2]        # 22250 <__sprintf_chk@plt+0x1e570>
    515e:	call   38e0 <__assert_fail@plt>
    5163:	call   3840 <__stack_chk_fail@plt>
    5168:	mov    rsi,r13
    516b:	mov    edi,0x4
    5170:	call   d3f0 <__sprintf_chk@plt+0x9710>
    5175:	mov    edx,0x5
    517a:	lea    rsi,[rip+0x1d0f8]        # 22279 <__sprintf_chk@plt+0x1e599>
    5181:	xor    edi,edi
    5183:	mov    r12,rax
    5186:	call   37f0 <dcgettext@plt>
    518b:	mov    rcx,r12
    518e:	xor    esi,esi
    5190:	mov    edi,0x1
    5195:	mov    rdx,rax
    5198:	xor    eax,eax
    519a:	call   3b90 <error@plt>
    519f:	cmp    BYTE PTR [rsp],0x0
    51a3:	jne    4bc2 <__sprintf_chk@plt+0xee2>
    51a9:	jmp    4286 <__sprintf_chk@plt+0x5a6>
    51ae:	mov    rsi,r13
    51b1:	mov    edi,0x4
    51b6:	call   d3f0 <__sprintf_chk@plt+0x9710>
    51bb:	mov    edx,0x5
    51c0:	lea    rsi,[rip+0x1d00f]        # 221d6 <__sprintf_chk@plt+0x1e4f6>
    51c7:	xor    edi,edi
    51c9:	mov    r13,rax
    51cc:	call   37f0 <dcgettext@plt>
    51d1:	mov    r12,rax
    51d4:	call   36f0 <__errno_location@plt>
    51d9:	mov    rcx,r13
    51dc:	mov    rdx,r12
    51df:	mov    edi,0x1
    51e4:	mov    esi,DWORD PTR [rax]
    51e6:	xor    eax,eax
    51e8:	call   3b90 <error@plt>
    51ed:	mov    rdi,QWORD PTR [rbp+rax*8+0x0]
    51f2:	call   dae0 <__sprintf_chk@plt+0x9e00>
    51f7:	mov    edx,0x5
    51fc:	lea    rsi,[rip+0x1cfc2]        # 221c5 <__sprintf_chk@plt+0x1e4e5>
    5203:	xor    edi,edi
    5205:	mov    r12,rax
    5208:	call   37f0 <dcgettext@plt>
    520d:	mov    rcx,r12
    5210:	xor    esi,esi
    5212:	xor    edi,edi
    5214:	mov    rdx,rax
    5217:	xor    eax,eax
    5219:	call   3b90 <error@plt>
    521e:	mov    edx,0x5
    5223:	lea    rsi,[rip+0x1e1be]        # 233e8 <__sprintf_chk@plt+0x1f708>
    522a:	xor    edi,edi
    522c:	call   37f0 <dcgettext@plt>
    5231:	mov    rdi,QWORD PTR [rip+0x26ea8]        # 2c0e0 <stderr@@GLIBC_2.2.5>
    5238:	mov    esi,0x1
    523d:	lea    rdx,[rip+0x1f3cc]        # 24610 <__sprintf_chk@plt+0x20930>
    5244:	mov    rcx,rax
    5247:	xor    eax,eax
    5249:	call   3c50 <__fprintf_chk@plt>
    524e:	mov    edi,0x1
    5253:	call   5550 <__sprintf_chk@plt+0x1870>
    5258:	nop    DWORD PTR [rax+rax*1+0x0]
    5260:	endbr64 
    5264:	xor    ebp,ebp
    5266:	mov    r9,rdx
    5269:	pop    rsi
    526a:	mov    rdx,rsp
    526d:	and    rsp,0xfffffffffffffff0
    5271:	push   rax
    5272:	push   rsp
    5273:	lea    r8,[rip+0x1c326]        # 215a0 <__sprintf_chk@plt+0x1d8c0>
    527a:	lea    rcx,[rip+0x1c2af]        # 21530 <__sprintf_chk@plt+0x1d850>
    5281:	lea    rdi,[rip+0xffffffffffffeaf8]        # 3d80 <__sprintf_chk@plt+0xa0>
    5288:	call   QWORD PTR [rip+0x26d52]        # 2bfe0 <__sprintf_chk@plt+0x28300>
    528e:	hlt    
    528f:	nop
    5290:	lea    rdi,[rip+0x26e09]        # 2c0a0 <__progname@@GLIBC_2.2.5>
    5297:	lea    rax,[rip+0x26e02]        # 2c0a0 <__progname@@GLIBC_2.2.5>
    529e:	cmp    rax,rdi
    52a1:	je     52b8 <__sprintf_chk@plt+0x15d8>
    52a3:	mov    rax,QWORD PTR [rip+0x26d26]        # 2bfd0 <__sprintf_chk@plt+0x282f0>
    52aa:	test   rax,rax
    52ad:	je     52b8 <__sprintf_chk@plt+0x15d8>
    52af:	jmp    rax
    52b1:	nop    DWORD PTR [rax+0x0]
    52b8:	ret    
    52b9:	nop    DWORD PTR [rax+0x0]
    52c0:	lea    rdi,[rip+0x26dd9]        # 2c0a0 <__progname@@GLIBC_2.2.5>
    52c7:	lea    rsi,[rip+0x26dd2]        # 2c0a0 <__progname@@GLIBC_2.2.5>
    52ce:	sub    rsi,rdi
    52d1:	mov    rax,rsi
    52d4:	shr    rsi,0x3f
    52d8:	sar    rax,0x3
    52dc:	add    rsi,rax
    52df:	sar    rsi,1
    52e2:	je     52f8 <__sprintf_chk@plt+0x1618>
    52e4:	mov    rax,QWORD PTR [rip+0x26d05]        # 2bff0 <__sprintf_chk@plt+0x28310>
    52eb:	test   rax,rax
    52ee:	je     52f8 <__sprintf_chk@plt+0x1618>
    52f0:	jmp    rax
    52f2:	nop    WORD PTR [rax+rax*1+0x0]
    52f8:	ret    
    52f9:	nop    DWORD PTR [rax+0x0]
    5300:	endbr64 
    5304:	cmp    BYTE PTR [rip+0x26ddd],0x0        # 2c0e8 <stderr@@GLIBC_2.2.5+0x8>
    530b:	jne    5338 <__sprintf_chk@plt+0x1658>
    530d:	push   rbp
    530e:	cmp    QWORD PTR [rip+0x26ce2],0x0        # 2bff8 <__sprintf_chk@plt+0x28318>
    5316:	mov    rbp,rsp
    5319:	je     5327 <__sprintf_chk@plt+0x1647>
    531b:	mov    rdi,QWORD PTR [rip+0x26ce6]        # 2c008 <__sprintf_chk@plt+0x28328>
    5322:	call   3690 <__cxa_finalize@plt>
    5327:	call   5290 <__sprintf_chk@plt+0x15b0>
    532c:	mov    BYTE PTR [rip+0x26db5],0x1        # 2c0e8 <stderr@@GLIBC_2.2.5+0x8>
    5333:	pop    rbp
    5334:	ret    
    5335:	nop    DWORD PTR [rax]
    5338:	ret    
    5339:	nop    DWORD PTR [rax+0x0]
    5340:	endbr64 
    5344:	jmp    52c0 <__sprintf_chk@plt+0x15e0>
    5349:	nop    DWORD PTR [rax+0x0]
    5350:	push   rbp
    5351:	sub    rsp,0x2a0
    5358:	mov    rbp,QWORD PTR [rip+0x26d49]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    535f:	mov    rax,QWORD PTR fs:0x28
    5368:	mov    QWORD PTR [rsp+0x298],rax
    5370:	xor    eax,eax
    5372:	cmp    rdi,0xffffffffffffffff
    5376:	je     53c0 <__sprintf_chk@plt+0x16e0>
    5378:	mov    r8,QWORD PTR [rip+0x26dc9]        # 2c148 <stderr@@GLIBC_2.2.5+0x68>
    537f:	mov    edx,DWORD PTR [rip+0x26deb]        # 2c170 <stderr@@GLIBC_2.2.5+0x90>
    5385:	mov    rsi,rsp
    5388:	mov    ecx,0x1
    538d:	call   a490 <__sprintf_chk@plt+0x67b0>
    5392:	mov    rdi,rax
    5395:	mov    rsi,rbp
    5398:	call   3980 <fputs_unlocked@plt>
    539d:	mov    rax,QWORD PTR [rsp+0x298]
    53a5:	sub    rax,QWORD PTR fs:0x28
    53ae:	jne    53d8 <__sprintf_chk@plt+0x16f8>
    53b0:	add    rsp,0x2a0
    53b7:	pop    rbp
    53b8:	ret    
    53b9:	nop    DWORD PTR [rax+0x0]
    53c0:	xor    edi,edi
    53c2:	mov    edx,0x5
    53c7:	lea    rsi,[rip+0x1cc36]        # 22004 <__sprintf_chk@plt+0x1e324>
    53ce:	call   37f0 <dcgettext@plt>
    53d3:	mov    rdi,rax
    53d6:	jmp    5395 <__sprintf_chk@plt+0x16b5>
    53d8:	call   3840 <__stack_chk_fail@plt>
    53dd:	nop    DWORD PTR [rax]
    53e0:	push   r14
    53e2:	push   r13
    53e4:	push   r12
    53e6:	mov    r12,rsi
    53e9:	push   rbp
    53ea:	push   rbx
    53eb:	mov    rbx,rdi
    53ee:	sub    rsp,0x70
    53f2:	mov    rdi,QWORD PTR [rdi+0x8]
    53f6:	mov    rax,QWORD PTR fs:0x28
    53ff:	mov    QWORD PTR [rsp+0x68],rax
    5404:	xor    eax,eax
    5406:	cmp    BYTE PTR [rip+0x26d60],0x0        # 2c16d <stderr@@GLIBC_2.2.5+0x8d>
    540d:	cmove  rdi,QWORD PTR [rbx]
    5411:	call   5350 <__sprintf_chk@plt+0x1670>
    5416:	cmp    BYTE PTR [rip+0x26d4f],0x0        # 2c16c <stderr@@GLIBC_2.2.5+0x8c>
    541d:	je     548c <__sprintf_chk@plt+0x17ac>
    541f:	mov    rdi,QWORD PTR [rip+0x26c82]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    5426:	mov    rax,QWORD PTR [rdi+0x28]
    542a:	cmp    rax,QWORD PTR [rdi+0x30]
    542e:	jae    54e0 <__sprintf_chk@plt+0x1800>
    5434:	lea    rdx,[rax+0x1]
    5438:	mov    QWORD PTR [rdi+0x28],rdx
    543c:	mov    BYTE PTR [rax],0x9
    543f:	mov    r14,QWORD PTR [rip+0x26d0a]        # 2c150 <stderr@@GLIBC_2.2.5+0x70>
    5446:	movdqu xmm0,XMMWORD PTR [rbx+0x10]
    544b:	lea    r13,[rsp+0x10]
    5450:	mov    rsi,rsp
    5453:	mov    rdx,r13
    5456:	mov    rbp,QWORD PTR [rip+0x26cfb]        # 2c158 <stderr@@GLIBC_2.2.5+0x78>
    545d:	mov    rdi,r14
    5460:	movups XMMWORD PTR [rsp],xmm0
    5464:	call   20b60 <__sprintf_chk@plt+0x1ce80>
    5469:	test   rax,rax
    546c:	je     54f0 <__sprintf_chk@plt+0x1810>
    5472:	mov    r8d,DWORD PTR [rsp+0x8]
    5477:	mov    rcx,r14
    547a:	mov    rdx,r13
    547d:	mov    rsi,rbp
    5480:	mov    rdi,QWORD PTR [rip+0x26c21]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    5487:	call   8f10 <__sprintf_chk@plt+0x5230>
    548c:	cmp    BYTE PTR [rip+0x26cef],0x1        # 2c182 <stderr@@GLIBC_2.2.5+0xa2>
    5493:	mov    rdx,r12
    5496:	mov    edi,0x1
    549b:	sbb    ecx,ecx
    549d:	lea    rsi,[rip+0x1cb81]        # 22025 <__sprintf_chk@plt+0x1e345>
    54a4:	xor    eax,eax
    54a6:	and    ecx,0xa
    54a9:	call   3b40 <__printf_chk@plt>
    54ae:	mov    rax,QWORD PTR [rsp+0x68]
    54b3:	sub    rax,QWORD PTR fs:0x28
    54bc:	jne    5544 <__sprintf_chk@plt+0x1864>
    54c2:	mov    rdi,QWORD PTR [rip+0x26bdf]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    54c9:	add    rsp,0x70
    54cd:	pop    rbx
    54ce:	pop    rbp
    54cf:	pop    r12
    54d1:	pop    r13
    54d3:	pop    r14
    54d5:	jmp    3c60 <fflush_unlocked@plt>
    54da:	nop    WORD PTR [rax+rax*1+0x0]
    54e0:	mov    esi,0x9
    54e5:	call   38a0 <__overflow@plt>
    54ea:	jmp    543f <__sprintf_chk@plt+0x175f>
    54ef:	nop
    54f0:	mov    rdi,QWORD PTR [rsp]
    54f4:	lea    rsi,[rsp+0x50]
    54f9:	call   b400 <__sprintf_chk@plt+0x7720>
    54fe:	mov    rdi,rax
    5501:	mov    rbp,rax
    5504:	call   dae0 <__sprintf_chk@plt+0x9e00>
    5509:	xor    edi,edi
    550b:	mov    edx,0x5
    5510:	lea    rsi,[rip+0x1caf6]        # 2200d <__sprintf_chk@plt+0x1e32d>
    5517:	mov    r13,rax
    551a:	call   37f0 <dcgettext@plt>
    551f:	xor    esi,esi
    5521:	xor    edi,edi
    5523:	mov    rcx,r13
    5526:	mov    rdx,rax
    5529:	xor    eax,eax
    552b:	call   3b90 <error@plt>
    5530:	mov    rsi,QWORD PTR [rip+0x26b71]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    5537:	mov    rdi,rbp
    553a:	call   3980 <fputs_unlocked@plt>
    553f:	jmp    548c <__sprintf_chk@plt+0x17ac>
    5544:	call   3840 <__stack_chk_fail@plt>
    5549:	nop    DWORD PTR [rax+0x0]
    5550:	endbr64 
    5554:	push   r14
    5556:	mov    edx,0x5
    555b:	push   r13
    555d:	push   r12
    555f:	push   rbp
    5560:	mov    ebp,edi
    5562:	sub    rsp,0x88
    5569:	mov    r12,QWORD PTR [rip+0x26c40]        # 2c1b0 <stderr@@GLIBC_2.2.5+0xd0>
    5570:	mov    rax,QWORD PTR fs:0x28
    5579:	mov    QWORD PTR [rsp+0x78],rax
    557e:	xor    eax,eax
    5580:	test   edi,edi
    5582:	je     55b2 <__sprintf_chk@plt+0x18d2>
    5584:	lea    rsi,[rip+0x1ce35]        # 223c0 <__sprintf_chk@plt+0x1e6e0>
    558b:	xor    edi,edi
    558d:	call   37f0 <dcgettext@plt>
    5592:	mov    rdi,QWORD PTR [rip+0x26b47]        # 2c0e0 <stderr@@GLIBC_2.2.5>
    5599:	mov    rcx,r12
    559c:	mov    esi,0x1
    55a1:	mov    rdx,rax
    55a4:	xor    eax,eax
    55a6:	call   3c50 <__fprintf_chk@plt>
    55ab:	mov    edi,ebp
    55ad:	call   3c30 <exit@plt>
    55b2:	xor    edi,edi
    55b4:	lea    rsi,[rip+0x1ce2d]        # 223e8 <__sprintf_chk@plt+0x1e708>
    55bb:	call   37f0 <dcgettext@plt>
    55c0:	mov    rcx,r12
    55c3:	mov    rdx,r12
    55c6:	mov    edi,0x1
    55cb:	mov    rsi,rax
    55ce:	xor    eax,eax
    55d0:	call   3b40 <__printf_chk@plt>
    55d5:	mov    r12,QWORD PTR [rip+0x26acc]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    55dc:	xor    edi,edi
    55de:	mov    edx,0x5
    55e3:	lea    rsi,[rip+0x1ce46]        # 22430 <__sprintf_chk@plt+0x1e750>
    55ea:	call   37f0 <dcgettext@plt>
    55ef:	mov    rsi,r12
    55f2:	mov    rdi,rax
    55f5:	call   3980 <fputs_unlocked@plt>
    55fa:	mov    r12,QWORD PTR [rip+0x26aa7]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    5601:	xor    edi,edi
    5603:	mov    edx,0x5
    5608:	lea    rsi,[rip+0x1ce69]        # 22478 <__sprintf_chk@plt+0x1e798>
    560f:	call   37f0 <dcgettext@plt>
    5614:	mov    rsi,r12
    5617:	mov    rdi,rax
    561a:	call   3980 <fputs_unlocked@plt>
    561f:	mov    r12,QWORD PTR [rip+0x26a82]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    5626:	xor    edi,edi
    5628:	mov    edx,0x5
    562d:	lea    rsi,[rip+0x1ce94]        # 224c8 <__sprintf_chk@plt+0x1e7e8>
    5634:	call   37f0 <dcgettext@plt>
    5639:	mov    rsi,r12
    563c:	mov    rdi,rax
    563f:	call   3980 <fputs_unlocked@plt>
    5644:	mov    r12,QWORD PTR [rip+0x26a5d]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    564b:	xor    edi,edi
    564d:	mov    edx,0x5
    5652:	lea    rsi,[rip+0x1d02f]        # 22688 <__sprintf_chk@plt+0x1e9a8>
    5659:	call   37f0 <dcgettext@plt>
    565e:	mov    rsi,r12
    5661:	mov    rdi,rax
    5664:	call   3980 <fputs_unlocked@plt>
    5669:	mov    r12,QWORD PTR [rip+0x26a38]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    5670:	xor    edi,edi
    5672:	mov    edx,0x5
    5677:	lea    rsi,[rip+0x1d2c2]        # 22940 <__sprintf_chk@plt+0x1ec60>
    567e:	call   37f0 <dcgettext@plt>
    5683:	mov    rsi,r12
    5686:	mov    rdi,rax
    5689:	call   3980 <fputs_unlocked@plt>
    568e:	mov    r12,QWORD PTR [rip+0x26a13]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    5695:	xor    edi,edi
    5697:	mov    edx,0x5
    569c:	lea    rsi,[rip+0x1d445]        # 22ae8 <__sprintf_chk@plt+0x1ee08>
    56a3:	call   37f0 <dcgettext@plt>
    56a8:	mov    rsi,r12
    56ab:	mov    rdi,rax
    56ae:	call   3980 <fputs_unlocked@plt>
    56b3:	mov    r12,QWORD PTR [rip+0x269ee]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    56ba:	xor    edi,edi
    56bc:	mov    edx,0x5
    56c1:	lea    rsi,[rip+0x1d4f0]        # 22bb8 <__sprintf_chk@plt+0x1eed8>
    56c8:	call   37f0 <dcgettext@plt>
    56cd:	mov    rsi,r12
    56d0:	mov    rdi,rax
    56d3:	call   3980 <fputs_unlocked@plt>
    56d8:	mov    r12,QWORD PTR [rip+0x269c9]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    56df:	xor    edi,edi
    56e1:	mov    edx,0x5
    56e6:	lea    rsi,[rip+0x1d5eb]        # 22cd8 <__sprintf_chk@plt+0x1eff8>
    56ed:	call   37f0 <dcgettext@plt>
    56f2:	mov    rsi,r12
    56f5:	mov    rdi,rax
    56f8:	call   3980 <fputs_unlocked@plt>
    56fd:	mov    r12,QWORD PTR [rip+0x269a4]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    5704:	xor    edi,edi
    5706:	mov    edx,0x5
    570b:	lea    rsi,[rip+0x1d82e]        # 22f40 <__sprintf_chk@plt+0x1f260>
    5712:	call   37f0 <dcgettext@plt>
    5717:	mov    rsi,r12
    571a:	mov    rdi,rax
    571d:	call   3980 <fputs_unlocked@plt>
    5722:	mov    r12,QWORD PTR [rip+0x2697f]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    5729:	mov    edx,0x5
    572e:	xor    edi,edi
    5730:	lea    rsi,[rip+0x1d8d9]        # 23010 <__sprintf_chk@plt+0x1f330>
    5737:	call   37f0 <dcgettext@plt>
    573c:	mov    rsi,r12
    573f:	mov    rdi,rax
    5742:	call   3980 <fputs_unlocked@plt>
    5747:	mov    r12,QWORD PTR [rip+0x2695a]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    574e:	mov    edx,0x5
    5753:	xor    edi,edi
    5755:	lea    rsi,[rip+0x1d8e4]        # 23040 <__sprintf_chk@plt+0x1f360>
    575c:	call   37f0 <dcgettext@plt>
    5761:	mov    rsi,r12
    5764:	mov    rdi,rax
    5767:	call   3980 <fputs_unlocked@plt>
    576c:	mov    edx,0x5
    5771:	lea    rsi,[rip+0x1d900]        # 23078 <__sprintf_chk@plt+0x1f398>
    5778:	xor    edi,edi
    577a:	call   37f0 <dcgettext@plt>
    577f:	lea    rdx,[rip+0x1c8a8]        # 2202e <__sprintf_chk@plt+0x1e34e>
    5786:	mov    edi,0x1
    578b:	mov    rsi,rax
    578e:	xor    eax,eax
    5790:	call   3b40 <__printf_chk@plt>
    5795:	mov    edx,0x5
    579a:	mov    r12,QWORD PTR [rip+0x26907]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    57a1:	xor    edi,edi
    57a3:	lea    rsi,[rip+0x1d9ae]        # 23158 <__sprintf_chk@plt+0x1f478>
    57aa:	call   37f0 <dcgettext@plt>
    57af:	mov    rsi,r12
    57b2:	mov    rdi,rax
    57b5:	call   3980 <fputs_unlocked@plt>
    57ba:	lea    rax,[rip+0x1c870]        # 22031 <__sprintf_chk@plt+0x1e351>
    57c1:	mov    rdx,rsp
    57c4:	lea    rcx,[rip+0x1c8a7]        # 22072 <__sprintf_chk@plt+0x1e392>
    57cb:	mov    QWORD PTR [rsp],rax
    57cf:	lea    rax,[rip+0x1c85d]        # 22033 <__sprintf_chk@plt+0x1e353>
    57d6:	mov    esi,0x64
    57db:	mov    edi,0x75
    57e0:	mov    QWORD PTR [rsp+0x8],rax
    57e5:	lea    rax,[rip+0x1c8bf]        # 220ab <__sprintf_chk@plt+0x1e3cb>
    57ec:	mov    QWORD PTR [rsp+0x10],rax
    57f1:	lea    rax,[rip+0x1c84b]        # 22043 <__sprintf_chk@plt+0x1e363>
    57f8:	mov    QWORD PTR [rsp+0x18],rax
    57fd:	lea    rax,[rip+0x1c855]        # 22059 <__sprintf_chk@plt+0x1e379>
    5804:	mov    QWORD PTR [rsp+0x30],rcx
    5809:	lea    rcx,[rip+0x1c86c]        # 2207c <__sprintf_chk@plt+0x1e39c>
    5810:	mov    QWORD PTR [rsp+0x20],rax
    5815:	lea    rax,[rip+0x1c847]        # 22063 <__sprintf_chk@plt+0x1e383>
    581c:	mov    QWORD PTR [rsp+0x40],rcx
    5821:	lea    rcx,[rip+0x1c85e]        # 22086 <__sprintf_chk@plt+0x1e3a6>
    5828:	mov    QWORD PTR [rsp+0x28],rax
    582d:	mov    QWORD PTR [rsp+0x38],rax
    5832:	mov    QWORD PTR [rsp+0x48],rax
    5837:	mov    QWORD PTR [rsp+0x50],rcx
    583c:	mov    QWORD PTR [rsp+0x58],rax
    5841:	mov    QWORD PTR [rsp+0x60],0x0
    584a:	mov    QWORD PTR [rsp+0x68],0x0
    5853:	nop    DWORD PTR [rax+rax*1+0x0]
    5858:	mov    rax,QWORD PTR [rdx+0x10]
    585c:	add    rdx,0x10
    5860:	test   rax,rax
    5863:	je     587a <__sprintf_chk@plt+0x1b9a>
    5865:	movzx  ecx,BYTE PTR [rax]
    5868:	cmp    esi,ecx
    586a:	jne    5858 <__sprintf_chk@plt+0x1b78>
    586c:	movzx  ecx,BYTE PTR [rax+0x1]
    5870:	cmp    edi,ecx
    5872:	jne    5858 <__sprintf_chk@plt+0x1b78>
    5874:	cmp    BYTE PTR [rax+0x2],0x0
    5878:	jne    5858 <__sprintf_chk@plt+0x1b78>
    587a:	mov    r12,QWORD PTR [rdx+0x8]
    587e:	lea    rsi,[rip+0x1c80b]        # 22090 <__sprintf_chk@plt+0x1e3b0>
    5885:	mov    edx,0x5
    588a:	xor    edi,edi
    588c:	test   r12,r12
    588f:	je     595d <__sprintf_chk@plt+0x1c7d>
    5895:	call   37f0 <dcgettext@plt>
    589a:	lea    rcx,[rip+0x1d98f]        # 23230 <__sprintf_chk@plt+0x1f550>
    58a1:	lea    rdx,[rip+0x1c7ff]        # 220a7 <__sprintf_chk@plt+0x1e3c7>
    58a8:	mov    edi,0x1
    58ad:	mov    rsi,rax
    58b0:	xor    eax,eax
    58b2:	lea    r13,[rip+0x1c772]        # 2202b <__sprintf_chk@plt+0x1e34b>
    58b9:	call   3b40 <__printf_chk@plt>
    58be:	mov    edi,0x5
    58c3:	xor    esi,esi
    58c5:	call   3b30 <setlocale@plt>
    58ca:	mov    rdi,rax
    58cd:	test   rax,rax
    58d0:	je     58eb <__sprintf_chk@plt+0x1c0b>
    58d2:	mov    edx,0x3
    58d7:	lea    rsi,[rip+0x1c7d7]        # 220b5 <__sprintf_chk@plt+0x1e3d5>
    58de:	call   3700 <strncmp@plt>
    58e3:	test   eax,eax
    58e5:	jne    59f5 <__sprintf_chk@plt+0x1d15>
    58eb:	xor    edi,edi
    58ed:	mov    edx,0x5
    58f2:	lea    rsi,[rip+0x1c7c0]        # 220b9 <__sprintf_chk@plt+0x1e3d9>
    58f9:	call   37f0 <dcgettext@plt>
    58fe:	lea    rcx,[rip+0x1c726]        # 2202b <__sprintf_chk@plt+0x1e34b>
    5905:	mov    edi,0x1
    590a:	lea    rdx,[rip+0x1d91f]        # 23230 <__sprintf_chk@plt+0x1f550>
    5911:	mov    rsi,rax
    5914:	xor    eax,eax
    5916:	call   3b40 <__printf_chk@plt>
    591b:	cmp    r12,r13
    591e:	lea    rcx,[rip+0x1ed3c]        # 24661 <__sprintf_chk@plt+0x20981>
    5925:	lea    r13,[rip+0x1c721]        # 2204d <__sprintf_chk@plt+0x1e36d>
    592c:	cmovne r13,rcx
    5930:	xor    edi,edi
    5932:	lea    rsi,[rip+0x1d967]        # 232a0 <__sprintf_chk@plt+0x1f5c0>
    5939:	mov    edx,0x5
    593e:	call   37f0 <dcgettext@plt>
    5943:	mov    rcx,r13
    5946:	mov    rdx,r12
    5949:	mov    edi,0x1
    594e:	mov    rsi,rax
    5951:	xor    eax,eax
    5953:	call   3b40 <__printf_chk@plt>
    5958:	jmp    55ab <__sprintf_chk@plt+0x18cb>
    595d:	call   37f0 <dcgettext@plt>
    5962:	lea    rcx,[rip+0x1d8c7]        # 23230 <__sprintf_chk@plt+0x1f550>
    5969:	mov    edi,0x1
    596e:	lea    rdx,[rip+0x1c732]        # 220a7 <__sprintf_chk@plt+0x1e3c7>
    5975:	mov    rsi,rax
    5978:	xor    eax,eax
    597a:	call   3b40 <__printf_chk@plt>
    597f:	mov    edi,0x5
    5984:	xor    esi,esi
    5986:	call   3b30 <setlocale@plt>
    598b:	mov    rdi,rax
    598e:	test   rax,rax
    5991:	je     59a8 <__sprintf_chk@plt+0x1cc8>
    5993:	mov    edx,0x3
    5998:	lea    rsi,[rip+0x1c716]        # 220b5 <__sprintf_chk@plt+0x1e3d5>
    599f:	call   3700 <strncmp@plt>
    59a4:	test   eax,eax
    59a6:	jne    59eb <__sprintf_chk@plt+0x1d0b>
    59a8:	mov    edx,0x5
    59ad:	lea    rsi,[rip+0x1c705]        # 220b9 <__sprintf_chk@plt+0x1e3d9>
    59b4:	xor    edi,edi
    59b6:	call   37f0 <dcgettext@plt>
    59bb:	lea    rcx,[rip+0x1c669]        # 2202b <__sprintf_chk@plt+0x1e34b>
    59c2:	lea    rdx,[rip+0x1d867]        # 23230 <__sprintf_chk@plt+0x1f550>
    59c9:	mov    edi,0x1
    59ce:	mov    rsi,rax
    59d1:	xor    eax,eax
    59d3:	lea    r12,[rip+0x1c651]        # 2202b <__sprintf_chk@plt+0x1e34b>
    59da:	call   3b40 <__printf_chk@plt>
    59df:	lea    r13,[rip+0x1c667]        # 2204d <__sprintf_chk@plt+0x1e36d>
    59e6:	jmp    5930 <__sprintf_chk@plt+0x1c50>
    59eb:	lea    r13,[rip+0x1c639]        # 2202b <__sprintf_chk@plt+0x1e34b>
    59f2:	mov    r12,r13
    59f5:	mov    r14,QWORD PTR [rip+0x266ac]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    59fc:	xor    edi,edi
    59fe:	mov    edx,0x5
    5a03:	lea    rsi,[rip+0x1d84e]        # 23258 <__sprintf_chk@plt+0x1f578>
    5a0a:	call   37f0 <dcgettext@plt>
    5a0f:	mov    rdi,rax
    5a12:	mov    rsi,r14
    5a15:	call   3980 <fputs_unlocked@plt>
    5a1a:	jmp    58eb <__sprintf_chk@plt+0x1c0b>
    5a1f:	nop
    5a20:	endbr64 
    5a24:	mov    edi,0x1
    5a29:	jmp    5550 <__sprintf_chk@plt+0x1870>
    5a2e:	xchg   ax,ax
    5a30:	endbr64 
    5a34:	push   r15
    5a36:	push   r14
    5a38:	mov    r14,rdi
    5a3b:	push   r13
    5a3d:	mov    r13,rcx
    5a40:	push   r12
    5a42:	push   rbp
    5a43:	mov    rbp,rdx
    5a46:	push   rbx
    5a47:	mov    rbx,rsi
    5a4a:	sub    rsp,0x28
    5a4e:	mov    QWORD PTR [rsp+0x8],rsi
    5a53:	mov    QWORD PTR [rsp+0x18],rdx
    5a58:	call   3810 <strlen@plt>
    5a5d:	mov    r15,QWORD PTR [rbx]
    5a60:	test   r15,r15
    5a63:	je     5b36 <__sprintf_chk@plt+0x1e56>
    5a69:	mov    BYTE PTR [rsp+0x17],0x0
    5a6e:	mov    r12,rax
    5a71:	xor    ebx,ebx
    5a73:	mov    QWORD PTR [rsp],0xffffffffffffffff
    5a7b:	jmp    5ac8 <__sprintf_chk@plt+0x1de8>
    5a7d:	nop    DWORD PTR [rax]
    5a80:	mov    rax,QWORD PTR [rsp+0x18]
    5a85:	test   rax,rax
    5a88:	je     5af8 <__sprintf_chk@plt+0x1e18>
    5a8a:	mov    rdi,QWORD PTR [rsp]
    5a8e:	mov    rdx,r13
    5a91:	mov    rsi,rbp
    5a94:	imul   rdi,r13
    5a98:	add    rdi,rax
    5a9b:	call   3960 <memcmp@plt>
    5aa0:	mov    ecx,0x1
    5aa5:	test   eax,eax
    5aa7:	movzx  eax,BYTE PTR [rsp+0x17]
    5aac:	cmovne eax,ecx
    5aaf:	mov    BYTE PTR [rsp+0x17],al
    5ab3:	mov    rax,QWORD PTR [rsp+0x8]
    5ab8:	add    rbx,0x1
    5abc:	add    rbp,r13
    5abf:	mov    r15,QWORD PTR [rax+rbx*8]
    5ac3:	test   r15,r15
    5ac6:	je     5b00 <__sprintf_chk@plt+0x1e20>
    5ac8:	mov    rdx,r12
    5acb:	mov    rsi,r14
    5ace:	mov    rdi,r15
    5ad1:	call   3700 <strncmp@plt>
    5ad6:	test   eax,eax
    5ad8:	jne    5ab3 <__sprintf_chk@plt+0x1dd3>
    5ada:	mov    rdi,r15
    5add:	call   3810 <strlen@plt>
    5ae2:	cmp    rax,r12
    5ae5:	je     5b30 <__sprintf_chk@plt+0x1e50>
    5ae7:	cmp    QWORD PTR [rsp],0xffffffffffffffff
    5aec:	jne    5a80 <__sprintf_chk@plt+0x1da0>
    5aee:	mov    QWORD PTR [rsp],rbx
    5af2:	jmp    5ab3 <__sprintf_chk@plt+0x1dd3>
    5af4:	nop    DWORD PTR [rax+0x0]
    5af8:	mov    BYTE PTR [rsp+0x17],0x1
    5afd:	jmp    5ab3 <__sprintf_chk@plt+0x1dd3>
    5aff:	nop
    5b00:	cmp    BYTE PTR [rsp+0x17],0x0
    5b05:	mov    rax,0xfffffffffffffffe
    5b0c:	cmove  rax,QWORD PTR [rsp]
    5b11:	mov    QWORD PTR [rsp],rax
    5b15:	mov    rax,QWORD PTR [rsp]
    5b19:	add    rsp,0x28
    5b1d:	pop    rbx
    5b1e:	pop    rbp
    5b1f:	pop    r12
    5b21:	pop    r13
    5b23:	pop    r14
    5b25:	pop    r15
    5b27:	ret    
    5b28:	nop    DWORD PTR [rax+rax*1+0x0]
    5b30:	mov    QWORD PTR [rsp],rbx
    5b34:	jmp    5b15 <__sprintf_chk@plt+0x1e35>
    5b36:	mov    QWORD PTR [rsp],0xffffffffffffffff
    5b3e:	jmp    5b15 <__sprintf_chk@plt+0x1e35>
    5b40:	endbr64 
    5b44:	push   r13
    5b46:	mov    r13,rsi
    5b49:	push   r12
    5b4b:	push   rbp
    5b4c:	mov    rbp,rdi
    5b4f:	push   rbx
    5b50:	sub    rsp,0x8
    5b54:	cmp    rdx,0xffffffffffffffff
    5b58:	mov    edx,0x5
    5b5d:	je     5bb0 <__sprintf_chk@plt+0x1ed0>
    5b5f:	lea    rsi,[rip+0x1dbae]        # 23714 <__sprintf_chk@plt+0x1fa34>
    5b66:	xor    edi,edi
    5b68:	call   37f0 <dcgettext@plt>
    5b6d:	mov    r12,rax
    5b70:	mov    rsi,rbp
    5b73:	mov    edi,0x1
    5b78:	call   dac0 <__sprintf_chk@plt+0x9de0>
    5b7d:	mov    rdx,r13
    5b80:	mov    esi,0x8
    5b85:	xor    edi,edi
    5b87:	mov    rbx,rax
    5b8a:	call   d2c0 <__sprintf_chk@plt+0x95e0>
    5b8f:	add    rsp,0x8
    5b93:	mov    r8,rbx
    5b96:	mov    rdx,r12
    5b99:	pop    rbx
    5b9a:	mov    rcx,rax
    5b9d:	pop    rbp
    5b9e:	xor    esi,esi
    5ba0:	pop    r12
    5ba2:	xor    edi,edi
    5ba4:	xor    eax,eax
    5ba6:	pop    r13
    5ba8:	jmp    3b90 <error@plt>
    5bad:	nop    DWORD PTR [rax]
    5bb0:	lea    rsi,[rip+0x1db42]        # 236f9 <__sprintf_chk@plt+0x1fa19>
    5bb7:	xor    edi,edi
    5bb9:	call   37f0 <dcgettext@plt>
    5bbe:	mov    r12,rax
    5bc1:	jmp    5b70 <__sprintf_chk@plt+0x1e90>
    5bc3:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    5bce:	xchg   ax,ax
    5bd0:	endbr64 
    5bd4:	push   r15
    5bd6:	lea    r15,[rip+0x1db69]        # 23746 <__sprintf_chk@plt+0x1fa66>
    5bdd:	push   r14
    5bdf:	xor    r14d,r14d
    5be2:	push   r13
    5be4:	mov    r13,rdx
    5be7:	mov    edx,0x5
    5bec:	push   r12
    5bee:	push   rbp
    5bef:	mov    rbp,rsi
    5bf2:	lea    rsi,[rip+0x1db38]        # 23731 <__sprintf_chk@plt+0x1fa51>
    5bf9:	push   rbx
    5bfa:	mov    rbx,rdi
    5bfd:	sub    rsp,0x18
    5c01:	mov    r12,QWORD PTR [rip+0x264d8]        # 2c0e0 <stderr@@GLIBC_2.2.5>
    5c08:	mov    QWORD PTR [rsp+0x8],rdi
    5c0d:	xor    edi,edi
    5c0f:	call   37f0 <dcgettext@plt>
    5c14:	mov    rsi,r12
    5c17:	mov    rdi,rax
    5c1a:	call   3980 <fputs_unlocked@plt>
    5c1f:	mov    r12,QWORD PTR [rbx]
    5c22:	xor    ebx,ebx
    5c24:	test   r12,r12
    5c27:	jne    5c69 <__sprintf_chk@plt+0x1f89>
    5c29:	jmp    5cb0 <__sprintf_chk@plt+0x1fd0>
    5c2e:	xchg   ax,ax
    5c30:	mov    rdi,r12
    5c33:	mov    r14,rbp
    5c36:	call   dae0 <__sprintf_chk@plt+0x9e00>
    5c3b:	mov    rdi,QWORD PTR [rip+0x2649e]        # 2c0e0 <stderr@@GLIBC_2.2.5>
    5c42:	mov    rdx,r15
    5c45:	mov    esi,0x1
    5c4a:	mov    rcx,rax
    5c4d:	xor    eax,eax
    5c4f:	call   3c50 <__fprintf_chk@plt>
    5c54:	mov    rax,QWORD PTR [rsp+0x8]
    5c59:	add    rbx,0x1
    5c5d:	add    rbp,r13
    5c60:	mov    r12,QWORD PTR [rax+rbx*8]
    5c64:	test   r12,r12
    5c67:	je     5cb0 <__sprintf_chk@plt+0x1fd0>
    5c69:	test   rbx,rbx
    5c6c:	je     5c30 <__sprintf_chk@plt+0x1f50>
    5c6e:	mov    rdx,r13
    5c71:	mov    rsi,rbp
    5c74:	mov    rdi,r14
    5c77:	call   3960 <memcmp@plt>
    5c7c:	test   eax,eax
    5c7e:	jne    5c30 <__sprintf_chk@plt+0x1f50>
    5c80:	mov    rdi,r12
    5c83:	call   dae0 <__sprintf_chk@plt+0x9e00>
    5c88:	mov    rdi,QWORD PTR [rip+0x26451]        # 2c0e0 <stderr@@GLIBC_2.2.5>
    5c8f:	mov    esi,0x1
    5c94:	lea    rdx,[rip+0x1dab3]        # 2374e <__sprintf_chk@plt+0x1fa6e>
    5c9b:	mov    rcx,rax
    5c9e:	xor    eax,eax
    5ca0:	call   3c50 <__fprintf_chk@plt>
    5ca5:	jmp    5c54 <__sprintf_chk@plt+0x1f74>
    5ca7:	nop    WORD PTR [rax+rax*1+0x0]
    5cb0:	mov    rdi,QWORD PTR [rip+0x26429]        # 2c0e0 <stderr@@GLIBC_2.2.5>
    5cb7:	mov    rax,QWORD PTR [rdi+0x28]
    5cbb:	cmp    rax,QWORD PTR [rdi+0x30]
    5cbf:	jae    5ce0 <__sprintf_chk@plt+0x2000>
    5cc1:	lea    rdx,[rax+0x1]
    5cc5:	mov    QWORD PTR [rdi+0x28],rdx
    5cc9:	mov    BYTE PTR [rax],0xa
    5ccc:	add    rsp,0x18
    5cd0:	pop    rbx
    5cd1:	pop    rbp
    5cd2:	pop    r12
    5cd4:	pop    r13
    5cd6:	pop    r14
    5cd8:	pop    r15
    5cda:	ret    
    5cdb:	nop    DWORD PTR [rax+rax*1+0x0]
    5ce0:	add    rsp,0x18
    5ce4:	mov    esi,0xa
    5ce9:	pop    rbx
    5cea:	pop    rbp
    5ceb:	pop    r12
    5ced:	pop    r13
    5cef:	pop    r14
    5cf1:	pop    r15
    5cf3:	jmp    38a0 <__overflow@plt>
    5cf8:	nop    DWORD PTR [rax+rax*1+0x0]
    5d00:	endbr64 
    5d04:	push   r15
    5d06:	mov    r15,rsi
    5d09:	push   r14
    5d0b:	mov    r14,r8
    5d0e:	push   r13
    5d10:	mov    r13,rdi
    5d13:	mov    rdi,r15
    5d16:	push   r12
    5d18:	mov    r12,rcx
    5d1b:	mov    rcx,r8
    5d1e:	push   rbp
    5d1f:	mov    rbp,rdx
    5d22:	mov    rdx,r12
    5d25:	push   rbx
    5d26:	mov    rsi,rbp
    5d29:	mov    rbx,r9
    5d2c:	sub    rsp,0x8
    5d30:	call   5a30 <__sprintf_chk@plt+0x1d50>
    5d35:	test   rax,rax
    5d38:	js     5d50 <__sprintf_chk@plt+0x2070>
    5d3a:	add    rsp,0x8
    5d3e:	pop    rbx
    5d3f:	pop    rbp
    5d40:	pop    r12
    5d42:	pop    r13
    5d44:	pop    r14
    5d46:	pop    r15
    5d48:	ret    
    5d49:	nop    DWORD PTR [rax+0x0]
    5d50:	mov    rdx,rax
    5d53:	mov    rsi,r15
    5d56:	mov    rdi,r13
    5d59:	call   5b40 <__sprintf_chk@plt+0x1e60>
    5d5e:	mov    rdx,r14
    5d61:	mov    rsi,r12
    5d64:	mov    rdi,rbp
    5d67:	call   5bd0 <__sprintf_chk@plt+0x1ef0>
    5d6c:	call   rbx
    5d6e:	mov    rax,0xffffffffffffffff
    5d75:	jmp    5d3a <__sprintf_chk@plt+0x205a>
    5d77:	nop    WORD PTR [rax+rax*1+0x0]
    5d80:	endbr64 
    5d84:	push   r14
    5d86:	push   r13
    5d88:	push   r12
    5d8a:	push   rbp
    5d8b:	push   rbx
    5d8c:	mov    r14,QWORD PTR [rsi]
    5d8f:	test   r14,r14
    5d92:	je     5dc9 <__sprintf_chk@plt+0x20e9>
    5d94:	mov    r12,rdi
    5d97:	mov    r13,rcx
    5d9a:	lea    rbx,[rsi+0x8]
    5d9e:	mov    rbp,rdx
    5da1:	jmp    5db7 <__sprintf_chk@plt+0x20d7>
    5da3:	nop    DWORD PTR [rax+rax*1+0x0]
    5da8:	mov    r14,QWORD PTR [rbx]
    5dab:	add    rbp,r13
    5dae:	add    rbx,0x8
    5db2:	test   r14,r14
    5db5:	je     5dc9 <__sprintf_chk@plt+0x20e9>
    5db7:	mov    rdx,r13
    5dba:	mov    rsi,rbp
    5dbd:	mov    rdi,r12
    5dc0:	call   3960 <memcmp@plt>
    5dc5:	test   eax,eax
    5dc7:	jne    5da8 <__sprintf_chk@plt+0x20c8>
    5dc9:	pop    rbx
    5dca:	mov    rax,r14
    5dcd:	pop    rbp
    5dce:	pop    r12
    5dd0:	pop    r13
    5dd2:	pop    r14
    5dd4:	ret    
    5dd5:	cs nop WORD PTR [rax+rax*1+0x0]
    5ddf:	nop
    5de0:	endbr64 
    5de4:	push   rbx
    5de5:	mov    rbx,rdi
    5de8:	mov    edi,0x30
    5ded:	call   3a70 <malloc@plt>
    5df2:	test   rax,rax
    5df5:	je     5e06 <__sprintf_chk@plt+0x2126>
    5df7:	mov    QWORD PTR [rax],0x0
    5dfe:	mov    QWORD PTR [rax+0x20],rbx
    5e02:	mov    QWORD PTR [rax+0x28],rbx
    5e06:	pop    rbx
    5e07:	ret    
    5e08:	nop    DWORD PTR [rax+rax*1+0x0]
    5e10:	endbr64 
    5e14:	push   rbx
    5e15:	mov    rbx,rdi
    5e18:	mov    edi,0x30
    5e1d:	call   3a70 <malloc@plt>
    5e22:	test   rax,rax
    5e25:	je     5e4a <__sprintf_chk@plt+0x216a>
    5e27:	mov    QWORD PTR [rax],rbx
    5e2a:	mov    QWORD PTR [rax+0x10],0x0
    5e32:	mov    QWORD PTR [rax+0x18],0x0
    5e3a:	mov    QWORD PTR [rax+0x8],0x0
    5e42:	mov    QWORD PTR [rax+0x20],0x0
    5e4a:	pop    rbx
    5e4b:	ret    
    5e4c:	nop    DWORD PTR [rax+0x0]
    5e50:	endbr64 
    5e54:	push   rbp
    5e55:	mov    rbp,rsi
    5e58:	push   rbx
    5e59:	mov    rbx,rdi
    5e5c:	sub    rsp,0x8
    5e60:	mov    rcx,QWORD PTR [rdi]
    5e63:	test   rcx,rcx
    5e66:	je     5e98 <__sprintf_chk@plt+0x21b8>
    5e68:	lea    rsi,[rdi+0x18]
    5e6c:	xor    edx,edx
    5e6e:	lea    rdi,[rdi+0x10]
    5e72:	call   3ca0 <getdelim@plt>
    5e77:	test   rax,rax
    5e7a:	js     5ec0 <__sprintf_chk@plt+0x21e0>
    5e7c:	mov    DWORD PTR [rbp+0x0],0x1
    5e83:	mov    rax,QWORD PTR [rbx+0x10]
    5e87:	add    QWORD PTR [rbx+0x8],0x1
    5e8c:	add    rsp,0x8
    5e90:	pop    rbx
    5e91:	pop    rbp
    5e92:	ret    
    5e93:	nop    DWORD PTR [rax+rax*1+0x0]
    5e98:	mov    rdx,QWORD PTR [rdi+0x28]
    5e9c:	mov    rax,QWORD PTR [rdx]
    5e9f:	test   rax,rax
    5ea2:	je     5ee0 <__sprintf_chk@plt+0x2200>
    5ea4:	add    rdx,0x8
    5ea8:	mov    DWORD PTR [rsi],0x1
    5eae:	mov    QWORD PTR [rdi+0x28],rdx
    5eb2:	add    rsp,0x8
    5eb6:	pop    rbx
    5eb7:	pop    rbp
    5eb8:	ret    
    5eb9:	nop    DWORD PTR [rax+0x0]
    5ec0:	mov    rdi,QWORD PTR [rbx]
    5ec3:	call   39f0 <feof@plt>
    5ec8:	cmp    eax,0x1
    5ecb:	sbb    eax,eax
    5ecd:	and    eax,0x2
    5ed0:	add    eax,0x2
    5ed3:	mov    DWORD PTR [rbp+0x0],eax
    5ed6:	xor    eax,eax
    5ed8:	jmp    5e8c <__sprintf_chk@plt+0x21ac>
    5eda:	nop    WORD PTR [rax+rax*1+0x0]
    5ee0:	mov    DWORD PTR [rsi],0x2
    5ee6:	jmp    5e8c <__sprintf_chk@plt+0x21ac>
    5ee8:	nop    DWORD PTR [rax+rax*1+0x0]
    5ef0:	endbr64 
    5ef4:	cmp    QWORD PTR [rdi],0x0
    5ef8:	je     5f00 <__sprintf_chk@plt+0x2220>
    5efa:	mov    rax,QWORD PTR [rdi+0x8]
    5efe:	ret    
    5eff:	nop
    5f00:	mov    rax,QWORD PTR [rdi+0x28]
    5f04:	sub    rax,QWORD PTR [rdi+0x20]
    5f08:	sar    rax,0x3
    5f0c:	ret    
    5f0d:	nop    DWORD PTR [rax]
    5f10:	endbr64 
    5f14:	push   rbp
    5f15:	cmp    QWORD PTR [rdi],0x0
    5f19:	mov    rbp,rdi
    5f1c:	je     5f27 <__sprintf_chk@plt+0x2247>
    5f1e:	mov    rdi,QWORD PTR [rdi+0x10]
    5f22:	call   3680 <free@plt>
    5f27:	mov    rdi,rbp
    5f2a:	pop    rbp
    5f2b:	jmp    3680 <free@plt>
    5f30:	endbr64 
    5f34:	mov    QWORD PTR [rip+0x2626d],rdi        # 2c1a8 <stderr@@GLIBC_2.2.5+0xc8>
    5f3b:	ret    
    5f3c:	nop    DWORD PTR [rax+0x0]
    5f40:	endbr64 
    5f44:	mov    BYTE PTR [rip+0x26255],dil        # 2c1a0 <stderr@@GLIBC_2.2.5+0xc0>
    5f4b:	ret    
    5f4c:	nop    DWORD PTR [rax+0x0]
    5f50:	endbr64 
    5f54:	push   r12
    5f56:	push   rbx
    5f57:	sub    rsp,0x8
    5f5b:	mov    rdi,QWORD PTR [rip+0x26146]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    5f62:	call   20d70 <__sprintf_chk@plt+0x1d090>
    5f67:	test   eax,eax
    5f69:	je     5f81 <__sprintf_chk@plt+0x22a1>
    5f6b:	call   36f0 <__errno_location@plt>
    5f70:	cmp    BYTE PTR [rip+0x26229],0x0        # 2c1a0 <stderr@@GLIBC_2.2.5+0xc0>
    5f77:	mov    rbx,rax
    5f7a:	je     5f99 <__sprintf_chk@plt+0x22b9>
    5f7c:	cmp    DWORD PTR [rax],0x20
    5f7f:	jne    5f99 <__sprintf_chk@plt+0x22b9>
    5f81:	mov    rdi,QWORD PTR [rip+0x26158]        # 2c0e0 <stderr@@GLIBC_2.2.5>
    5f88:	call   20d70 <__sprintf_chk@plt+0x1d090>
    5f8d:	test   eax,eax
    5f8f:	jne    5fd8 <__sprintf_chk@plt+0x22f8>
    5f91:	add    rsp,0x8
    5f95:	pop    rbx
    5f96:	pop    r12
    5f98:	ret    
    5f99:	xor    edi,edi
    5f9b:	mov    edx,0x5
    5fa0:	lea    rsi,[rip+0x1d7ac]        # 23753 <__sprintf_chk@plt+0x1fa73>
    5fa7:	call   37f0 <dcgettext@plt>
    5fac:	mov    rdi,QWORD PTR [rip+0x261f5]        # 2c1a8 <stderr@@GLIBC_2.2.5+0xc8>
    5fb3:	mov    r12,rax
    5fb6:	test   rdi,rdi
    5fb9:	je     5fe3 <__sprintf_chk@plt+0x2303>
    5fbb:	call   d650 <__sprintf_chk@plt+0x9970>
    5fc0:	mov    esi,DWORD PTR [rbx]
    5fc2:	mov    r8,r12
    5fc5:	xor    edi,edi
    5fc7:	mov    rcx,rax
    5fca:	lea    rdx,[rip+0x1d78e]        # 2375f <__sprintf_chk@plt+0x1fa7f>
    5fd1:	xor    eax,eax
    5fd3:	call   3b90 <error@plt>
    5fd8:	mov    edi,DWORD PTR [rip+0x2604a]        # 2c028 <__sprintf_chk@plt+0x28348>
    5fde:	call   3720 <_exit@plt>
    5fe3:	mov    esi,DWORD PTR [rbx]
    5fe5:	mov    rcx,rax
    5fe8:	lea    rdx,[rip+0x1d761]        # 23750 <__sprintf_chk@plt+0x1fa70>
    5fef:	xor    edi,edi
    5ff1:	xor    eax,eax
    5ff3:	call   3b90 <error@plt>
    5ff8:	jmp    5fd8 <__sprintf_chk@plt+0x22f8>
    5ffa:	nop    WORD PTR [rax+rax*1+0x0]
    6000:	endbr64 
    6004:	mov    rax,QWORD PTR [rdi]
    6007:	xor    edx,edx
    6009:	div    rsi
    600c:	mov    rax,rdx
    600f:	ret    
    6010:	endbr64 
    6014:	mov    rax,QWORD PTR [rsi]
    6017:	cmp    QWORD PTR [rdi],rax
    601a:	sete   al
    601d:	ret    
    601e:	xchg   ax,ax
    6020:	endbr64 
    6024:	mov    rax,rdi
    6027:	xor    edx,edx
    6029:	div    rsi
    602c:	mov    rax,rdx
    602f:	ret    
    6030:	endbr64 
    6034:	push   rbp
    6035:	mov    rbp,rdi
    6038:	mov    rdi,QWORD PTR [rdi+0x8]
    603c:	call   9d20 <__sprintf_chk@plt+0x6040>
    6041:	mov    rdi,rbp
    6044:	pop    rbp
    6045:	jmp    3680 <free@plt>
    604a:	nop    WORD PTR [rax+rax*1+0x0]
    6050:	push   r12
    6052:	mov    r12,rsi
    6055:	push   rbp
    6056:	mov    rbp,rdi
    6059:	push   rbx
    605a:	mov    rbx,QWORD PTR [rdi+0x10]
    605e:	test   rbx,rbx
    6061:	je     6090 <__sprintf_chk@plt+0x23b0>
    6063:	cmp    QWORD PTR [rbx],rsi
    6066:	je     60b8 <__sprintf_chk@plt+0x23d8>
    6068:	mov    QWORD PTR [rbx],r12
    606b:	mov    rdi,QWORD PTR [rbp+0x0]
    606f:	mov    rsi,rbx
    6072:	call   a230 <__sprintf_chk@plt+0x6550>
    6077:	test   rax,rax
    607a:	je     60b0 <__sprintf_chk@plt+0x23d0>
    607c:	cmp    rbx,rax
    607f:	je     60c8 <__sprintf_chk@plt+0x23e8>
    6081:	mov    rax,QWORD PTR [rax+0x8]
    6085:	mov    QWORD PTR [rbx+0x8],rax
    6089:	pop    rbx
    608a:	pop    rbp
    608b:	pop    r12
    608d:	ret    
    608e:	xchg   ax,ax
    6090:	mov    edi,0x10
    6095:	call   3a70 <malloc@plt>
    609a:	mov    QWORD PTR [rbp+0x10],rax
    609e:	mov    rbx,rax
    60a1:	test   rax,rax
    60a4:	jne    6068 <__sprintf_chk@plt+0x2388>
    60a6:	cs nop WORD PTR [rax+rax*1+0x0]
    60b0:	xor    eax,eax
    60b2:	jmp    6089 <__sprintf_chk@plt+0x23a9>
    60b4:	nop    DWORD PTR [rax+0x0]
    60b8:	mov    rax,QWORD PTR [rbx+0x8]
    60bc:	pop    rbx
    60bd:	pop    rbp
    60be:	pop    r12
    60c0:	ret    
    60c1:	nop    DWORD PTR [rax+0x0]
    60c8:	mov    QWORD PTR [rbp+0x10],0x0
    60d0:	xor    r8d,r8d
    60d3:	xor    ecx,ecx
    60d5:	xor    esi,esi
    60d7:	lea    rdx,[rip+0xffffffffffffff42]        # 6020 <__sprintf_chk@plt+0x2340>
    60de:	mov    edi,0x3fd
    60e3:	call   9b70 <__sprintf_chk@plt+0x5e90>
    60e8:	mov    QWORD PTR [rbx+0x8],rax
    60ec:	pop    rbx
    60ed:	pop    rbp
    60ee:	pop    r12
    60f0:	ret    
    60f1:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    60fc:	nop    DWORD PTR [rax+0x0]
    6100:	endbr64 
    6104:	push   r12
    6106:	mov    edi,0x18
    610b:	call   3a70 <malloc@plt>
    6110:	mov    r12,rax
    6113:	test   rax,rax
    6116:	je     6154 <__sprintf_chk@plt+0x2474>
    6118:	lea    r8,[rip+0xffffffffffffff11]        # 6030 <__sprintf_chk@plt+0x2350>
    611f:	lea    rcx,[rip+0xfffffffffffffeea]        # 6010 <__sprintf_chk@plt+0x2330>
    6126:	xor    esi,esi
    6128:	mov    edi,0xb
    612d:	lea    rdx,[rip+0xfffffffffffffecc]        # 6000 <__sprintf_chk@plt+0x2320>
    6134:	call   9b70 <__sprintf_chk@plt+0x5e90>
    6139:	mov    QWORD PTR [r12],rax
    613d:	test   rax,rax
    6140:	je     6160 <__sprintf_chk@plt+0x2480>
    6142:	mov    QWORD PTR [r12+0x8],0x0
    614b:	mov    QWORD PTR [r12+0x10],0x0
    6154:	mov    rax,r12
    6157:	pop    r12
    6159:	ret    
    615a:	nop    WORD PTR [rax+rax*1+0x0]
    6160:	mov    rdi,r12
    6163:	xor    r12d,r12d
    6166:	call   3680 <free@plt>
    616b:	jmp    6154 <__sprintf_chk@plt+0x2474>
    616d:	nop    DWORD PTR [rax]
    6170:	endbr64 
    6174:	push   rbp
    6175:	mov    rbp,rdi
    6178:	mov    rdi,QWORD PTR [rdi]
    617b:	call   9d20 <__sprintf_chk@plt+0x6040>
    6180:	mov    rdi,QWORD PTR [rbp+0x8]
    6184:	test   rdi,rdi
    6187:	je     618e <__sprintf_chk@plt+0x24ae>
    6189:	call   b330 <__sprintf_chk@plt+0x7650>
    618e:	mov    rdi,QWORD PTR [rbp+0x10]
    6192:	call   3680 <free@plt>
    6197:	mov    rdi,rbp
    619a:	pop    rbp
    619b:	jmp    3680 <free@plt>
    61a0:	endbr64 
    61a4:	push   r12
    61a6:	push   rbp
    61a7:	mov    rbp,rdx
    61aa:	push   rbx
    61ab:	mov    rbx,rdi
    61ae:	call   6050 <__sprintf_chk@plt+0x2370>
    61b3:	test   rax,rax
    61b6:	je     621b <__sprintf_chk@plt+0x253b>
    61b8:	mov    r12,rax
    61bb:	lea    rdx,[rbp-0x1]
    61bf:	movabs rax,0x7ffffffffffffffd
    61c9:	cmp    rdx,rax
    61cc:	jbe    61e8 <__sprintf_chk@plt+0x2508>
    61ce:	mov    rdi,QWORD PTR [rbx+0x8]
    61d2:	test   rdi,rdi
    61d5:	je     6200 <__sprintf_chk@plt+0x2520>
    61d7:	mov    rsi,rbp
    61da:	call   b360 <__sprintf_chk@plt+0x7680>
    61df:	mov    rbp,rax
    61e2:	cmp    rax,0xffffffffffffffff
    61e6:	je     621b <__sprintf_chk@plt+0x253b>
    61e8:	pop    rbx
    61e9:	mov    rsi,rbp
    61ec:	mov    rdi,r12
    61ef:	pop    rbp
    61f0:	xor    edx,edx
    61f2:	pop    r12
    61f4:	jmp    9f90 <__sprintf_chk@plt+0x62b0>
    61f9:	nop    DWORD PTR [rax+0x0]
    6200:	movabs rdi,0x7fffffffffffffff
    620a:	call   b2b0 <__sprintf_chk@plt+0x75d0>
    620f:	mov    QWORD PTR [rbx+0x8],rax
    6213:	mov    rdi,rax
    6216:	test   rax,rax
    6219:	jne    61d7 <__sprintf_chk@plt+0x24f7>
    621b:	pop    rbx
    621c:	mov    eax,0xffffffff
    6221:	pop    rbp
    6222:	pop    r12
    6224:	ret    
    6225:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    6230:	endbr64 
    6234:	push   r12
    6236:	push   rbp
    6237:	mov    rbp,rdx
    623a:	push   rbx
    623b:	mov    rbx,rdi
    623e:	call   6050 <__sprintf_chk@plt+0x2370>
    6243:	test   rax,rax
    6246:	je     62b3 <__sprintf_chk@plt+0x25d3>
    6248:	mov    r12,rax
    624b:	lea    rdx,[rbp-0x1]
    624f:	movabs rax,0x7ffffffffffffffd
    6259:	cmp    rdx,rax
    625c:	jbe    6278 <__sprintf_chk@plt+0x2598>
    625e:	mov    rdi,QWORD PTR [rbx+0x8]
    6262:	test   rdi,rdi
    6265:	je     6298 <__sprintf_chk@plt+0x25b8>
    6267:	mov    rsi,rbp
    626a:	call   b360 <__sprintf_chk@plt+0x7680>
    626f:	mov    rbp,rax
    6272:	cmp    rax,0xffffffffffffffff
    6276:	je     62b3 <__sprintf_chk@plt+0x25d3>
    6278:	mov    rsi,rbp
    627b:	mov    rdi,r12
    627e:	call   98c0 <__sprintf_chk@plt+0x5be0>
    6283:	pop    rbx
    6284:	pop    rbp
    6285:	test   rax,rax
    6288:	pop    r12
    628a:	setne  al
    628d:	movzx  eax,al
    6290:	ret    
    6291:	nop    DWORD PTR [rax+0x0]
    6298:	movabs rdi,0x7fffffffffffffff
    62a2:	call   b2b0 <__sprintf_chk@plt+0x75d0>
    62a7:	mov    QWORD PTR [rbx+0x8],rax
    62ab:	mov    rdi,rax
    62ae:	test   rax,rax
    62b1:	jne    6267 <__sprintf_chk@plt+0x2587>
    62b3:	pop    rbx
    62b4:	mov    eax,0xffffffff
    62b9:	pop    rbp
    62ba:	pop    r12
    62bc:	ret    
    62bd:	nop    DWORD PTR [rax]
    62c0:	endbr64 
    62c4:	jmp    QWORD PTR [rcx]
    62c6:	cs nop WORD PTR [rax+rax*1+0x0]
    62d0:	endbr64 
    62d4:	jmp    3680 <free@plt>
    62d9:	nop    DWORD PTR [rax+0x0]
    62e0:	endbr64 
    62e4:	sub    rsp,0x8
    62e8:	call   b6c0 <__sprintf_chk@plt+0x79e0>
    62ed:	test   eax,eax
    62ef:	sete   al
    62f2:	add    rsp,0x8
    62f6:	ret    
    62f7:	nop    WORD PTR [rax+rax*1+0x0]
    6300:	endbr64 
    6304:	sub    rsp,0x8
    6308:	call   39b0 <strcmp@plt>
    630d:	test   eax,eax
    630f:	sete   al
    6312:	add    rsp,0x8
    6316:	ret    
    6317:	nop    WORD PTR [rax+rax*1+0x0]
    6320:	endbr64 
    6324:	jmp    9b00 <__sprintf_chk@plt+0x5e20>
    6329:	nop    DWORD PTR [rax+0x0]
    6330:	endbr64 
    6334:	push   r12
    6336:	mov    eax,edx
    6338:	mov    r12,rdi
    633b:	push   rbp
    633c:	and    eax,0x10
    633f:	mov    rbp,rsi
    6342:	push   rbx
    6343:	sub    rsp,0x10
    6347:	and    edx,0x8
    634a:	je     63f0 <__sprintf_chk@plt+0x2710>
    6350:	test   eax,eax
    6352:	jne    6388 <__sprintf_chk@plt+0x26a8>
    6354:	call   3810 <strlen@plt>
    6359:	mov    rsi,rbp
    635c:	mov    rdi,r12
    635f:	mov    rdx,rax
    6362:	mov    rbx,rax
    6365:	call   3700 <strncmp@plt>
    636a:	test   eax,eax
    636c:	jne    6379 <__sprintf_chk@plt+0x2699>
    636e:	movsx  edx,BYTE PTR [rbp+rbx*1+0x0]
    6373:	cmp    edx,0x2f
    6376:	cmovne eax,edx
    6379:	add    rsp,0x10
    637d:	pop    rbx
    637e:	pop    rbp
    637f:	pop    r12
    6381:	ret    
    6382:	nop    WORD PTR [rax+rax*1+0x0]
    6388:	mov    rdi,rsi
    638b:	call   e4e0 <__sprintf_chk@plt+0xa800>
    6390:	mov    rbp,rax
    6393:	mov    rdi,rax
    6396:	jmp    63b9 <__sprintf_chk@plt+0x26d9>
    6398:	nop    DWORD PTR [rax+rax*1+0x0]
    63a0:	mov    BYTE PTR [rax],0x0
    63a3:	mov    rsi,rbp
    63a6:	mov    rdi,r12
    63a9:	call   b6c0 <__sprintf_chk@plt+0x79e0>
    63ae:	test   eax,eax
    63b0:	jle    63d6 <__sprintf_chk@plt+0x26f6>
    63b2:	mov    BYTE PTR [rbx],0x2f
    63b5:	lea    rdi,[rbx+0x1]
    63b9:	mov    esi,0x2f
    63be:	call   3880 <strchr@plt>
    63c3:	mov    rbx,rax
    63c6:	test   rax,rax
    63c9:	jne    63a0 <__sprintf_chk@plt+0x26c0>
    63cb:	mov    rsi,rbp
    63ce:	mov    rdi,r12
    63d1:	call   b6c0 <__sprintf_chk@plt+0x79e0>
    63d6:	mov    rdi,rbp
    63d9:	mov    DWORD PTR [rsp+0xc],eax
    63dd:	call   3680 <free@plt>
    63e2:	mov    eax,DWORD PTR [rsp+0xc]
    63e6:	add    rsp,0x10
    63ea:	pop    rbx
    63eb:	pop    rbp
    63ec:	pop    r12
    63ee:	ret    
    63ef:	nop
    63f0:	test   eax,eax
    63f2:	je     6408 <__sprintf_chk@plt+0x2728>
    63f4:	add    rsp,0x10
    63f8:	pop    rbx
    63f9:	pop    rbp
    63fa:	pop    r12
    63fc:	jmp    b6c0 <__sprintf_chk@plt+0x79e0>
    6401:	nop    DWORD PTR [rax+0x0]
    6408:	add    rsp,0x10
    640c:	pop    rbx
    640d:	pop    rbp
    640e:	pop    r12
    6410:	jmp    39b0 <strcmp@plt>
    6415:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    6420:	endbr64 
    6424:	push   r15
    6426:	push   r14
    6428:	push   r13
    642a:	push   r12
    642c:	xor    r12d,r12d
    642f:	push   rbp
    6430:	lea    rbp,[rip+0x1da29]        # 23e60 <__sprintf_chk@plt+0x20180>
    6437:	push   rbx
    6438:	mov    rbx,rsi
    643b:	sub    rsp,0x58
    643f:	mov    rax,QWORD PTR fs:0x28
    6448:	mov    QWORD PTR [rsp+0x48],rax
    644d:	xor    eax,eax
    644f:	mov    QWORD PTR [rsp+0x10],rdi
    6454:	mov    BYTE PTR [rsp],0x0
    6458:	mov    QWORD PTR [rsp+0x4],0x0
    6461:	mov    BYTE PTR [rsp+0xc],0x0
    6466:	jmp    649f <__sprintf_chk@plt+0x27bf>
    6468:	nop    DWORD PTR [rax+rax*1+0x0]
    6470:	mov    edi,r15d
    6473:	call   3bd0 <towlower@plt>
    6478:	movsxd rdx,eax
    647b:	mov    rax,r12
    647e:	add    r13,QWORD PTR [rsp+0x18]
    6483:	mov    BYTE PTR [rsp+0xc],0x0
    6488:	shl    rax,0x5
    648c:	mov    QWORD PTR [rsp+0x10],r13
    6491:	sub    rax,r12
    6494:	add    rax,rdx
    6497:	xor    edx,edx
    6499:	div    rbx
    649c:	mov    r12,rdx
    649f:	cmp    BYTE PTR [rsp],0x0
    64a3:	lea    r14,[rsp+0x4]
    64a8:	jne    6529 <__sprintf_chk@plt+0x2849>
    64aa:	mov    r13,QWORD PTR [rsp+0x10]
    64af:	movzx  ecx,BYTE PTR [r13+0x0]
    64b4:	mov    eax,ecx
    64b6:	shr    al,0x5
    64b9:	and    eax,0x7
    64bc:	mov    eax,DWORD PTR [rbp+rax*4+0x0]
    64c0:	shr    eax,cl
    64c2:	test   al,0x1
    64c4:	je     6510 <__sprintf_chk@plt+0x2830>
    64c6:	mov    QWORD PTR [rsp+0x18],0x1
    64cf:	movsx  r15d,BYTE PTR [r13+0x0]
    64d4:	mov    BYTE PTR [rsp+0x20],0x1
    64d9:	mov    DWORD PTR [rsp+0x24],r15d
    64de:	mov    BYTE PTR [rsp+0xc],0x1
    64e3:	test   r15d,r15d
    64e6:	je     65bd <__sprintf_chk@plt+0x28dd>
    64ec:	mov    r13,QWORD PTR [rsp+0x10]
    64f1:	cmp    BYTE PTR [rsp+0x20],0x0
    64f6:	jne    6470 <__sprintf_chk@plt+0x2790>
    64fc:	movsx  rdx,BYTE PTR [r13+0x0]
    6501:	jmp    647b <__sprintf_chk@plt+0x279b>
    6506:	cs nop WORD PTR [rax+rax*1+0x0]
    6510:	lea    r14,[rsp+0x4]
    6515:	mov    rdi,r14
    6518:	call   3c70 <mbsinit@plt>
    651d:	test   eax,eax
    651f:	je     664a <__sprintf_chk@plt+0x296a>
    6525:	mov    BYTE PTR [rsp],0x1
    6529:	call   3800 <__ctype_get_mb_cur_max@plt>
    652e:	mov    r13,QWORD PTR [rsp+0x10]
    6533:	mov    rsi,rax
    6536:	mov    rdi,r13
    6539:	call   db00 <__sprintf_chk@plt+0x9e20>
    653e:	lea    rdi,[rsp+0x24]
    6543:	mov    rcx,r14
    6546:	mov    rsi,r13
    6549:	mov    rdx,rax
    654c:	call   11a40 <__sprintf_chk@plt+0xdd60>
    6551:	mov    QWORD PTR [rsp+0x18],rax
    6556:	cmp    rax,0xffffffffffffffff
    655a:	je     65e8 <__sprintf_chk@plt+0x2908>
    6560:	cmp    rax,0xfffffffffffffffe
    6564:	je     6610 <__sprintf_chk@plt+0x2930>
    656a:	test   rax,rax
    656d:	jne    6640 <__sprintf_chk@plt+0x2960>
    6573:	mov    QWORD PTR [rsp+0x18],0x1
    657c:	mov    r13,QWORD PTR [rsp+0x10]
    6581:	cmp    BYTE PTR [r13+0x0],0x0
    6586:	jne    6688 <__sprintf_chk@plt+0x29a8>
    658c:	mov    r15d,DWORD PTR [rsp+0x24]
    6591:	test   r15d,r15d
    6594:	jne    6669 <__sprintf_chk@plt+0x2989>
    659a:	mov    rdi,r14
    659d:	mov    BYTE PTR [rsp+0x20],0x1
    65a2:	call   3c70 <mbsinit@plt>
    65a7:	test   eax,eax
    65a9:	je     65af <__sprintf_chk@plt+0x28cf>
    65ab:	mov    BYTE PTR [rsp],0x0
    65af:	mov    BYTE PTR [rsp+0xc],0x1
    65b4:	test   r15d,r15d
    65b7:	jne    64ec <__sprintf_chk@plt+0x280c>
    65bd:	mov    rax,QWORD PTR [rsp+0x48]
    65c2:	sub    rax,QWORD PTR fs:0x28
    65cb:	jne    66a7 <__sprintf_chk@plt+0x29c7>
    65d1:	add    rsp,0x58
    65d5:	mov    rax,r12
    65d8:	pop    rbx
    65d9:	pop    rbp
    65da:	pop    r12
    65dc:	pop    r13
    65de:	pop    r14
    65e0:	pop    r15
    65e2:	ret    
    65e3:	nop    DWORD PTR [rax+rax*1+0x0]
    65e8:	mov    r15d,DWORD PTR [rsp+0x24]
    65ed:	mov    r13,QWORD PTR [rsp+0x10]
    65f2:	mov    BYTE PTR [rsp+0x20],0x0
    65f7:	mov    QWORD PTR [rsp+0x18],0x1
    6600:	mov    BYTE PTR [rsp+0xc],0x1
    6605:	jmp    64f1 <__sprintf_chk@plt+0x2811>
    660a:	nop    WORD PTR [rax+rax*1+0x0]
    6610:	mov    r13,QWORD PTR [rsp+0x10]
    6615:	mov    rdi,r13
    6618:	call   3810 <strlen@plt>
    661d:	mov    BYTE PTR [rsp+0x20],0x0
    6622:	mov    r15d,DWORD PTR [rsp+0x24]
    6627:	mov    QWORD PTR [rsp+0x18],rax
    662c:	mov    BYTE PTR [rsp+0xc],0x1
    6631:	jmp    64f1 <__sprintf_chk@plt+0x2811>
    6636:	cs nop WORD PTR [rax+rax*1+0x0]
    6640:	mov    r15d,DWORD PTR [rsp+0x24]
    6645:	jmp    659a <__sprintf_chk@plt+0x28ba>
    664a:	lea    rcx,[rip+0x1d2ef]        # 23940 <__sprintf_chk@plt+0x1fc60>
    6651:	mov    edx,0x96
    6656:	lea    rsi,[rip+0x1d109]        # 23766 <__sprintf_chk@plt+0x1fa86>
    665d:	lea    rdi,[rip+0x1d110]        # 23774 <__sprintf_chk@plt+0x1fa94>
    6664:	call   38e0 <__assert_fail@plt>
    6669:	lea    rcx,[rip+0x1d2d0]        # 23940 <__sprintf_chk@plt+0x1fc60>
    6670:	mov    edx,0xb3
    6675:	lea    rsi,[rip+0x1d0ea]        # 23766 <__sprintf_chk@plt+0x1fa86>
    667c:	lea    rdi,[rip+0x1d11f]        # 237a2 <__sprintf_chk@plt+0x1fac2>
    6683:	call   38e0 <__assert_fail@plt>
    6688:	lea    rcx,[rip+0x1d2b1]        # 23940 <__sprintf_chk@plt+0x1fc60>
    668f:	mov    edx,0xb2
    6694:	lea    rsi,[rip+0x1d0cb]        # 23766 <__sprintf_chk@plt+0x1fa86>
    669b:	lea    rdi,[rip+0x1d0e9]        # 2378b <__sprintf_chk@plt+0x1faab>
    66a2:	call   38e0 <__assert_fail@plt>
    66a7:	call   3840 <__stack_chk_fail@plt>
    66ac:	nop    DWORD PTR [rax+0x0]
    66b0:	endbr64 
    66b4:	push   rbp
    66b5:	mov    rbp,rsi
    66b8:	push   rbx
    66b9:	mov    rbx,rdi
    66bc:	mov    edi,0x10
    66c1:	sub    rsp,0x8
    66c5:	call   e370 <__sprintf_chk@plt+0xa690>
    66ca:	mov    rdx,QWORD PTR [rbx+0x8]
    66ce:	mov    QWORD PTR [rax+0x8],rbp
    66d2:	mov    QWORD PTR [rax],rdx
    66d5:	mov    QWORD PTR [rbx+0x8],rax
    66d9:	add    rsp,0x8
    66dd:	pop    rbx
    66de:	pop    rbp
    66df:	ret    
    66e0:	endbr64 
    66e4:	mov    r9d,esi
    66e7:	mov    r8d,esi
    66ea:	movzx  eax,BYTE PTR [rdi]
    66ed:	lea    rdx,[rip+0x1d0cc]        # 237c0 <__sprintf_chk@plt+0x1fae0>
    66f4:	and    r9d,0x20
    66f8:	and    r8d,0x8000000
    66ff:	and    esi,0x2
    6702:	lea    rcx,[rdi+0x1]
    6706:	test   al,al
    6708:	je     6737 <__sprintf_chk@plt+0x2a57>
    670a:	sub    eax,0x21
    670d:	cmp    al,0x5c
    670f:	ja     6728 <__sprintf_chk@plt+0x2a48>
    6711:	movzx  eax,al
    6714:	movsxd rax,DWORD PTR [rdx+rax*4]
    6718:	add    rax,rdx
    671b:	notrack jmp rax
    671e:	xchg   ax,ax
    6720:	test   r8d,r8d
    6723:	jne    6778 <__sprintf_chk@plt+0x2a98>
    6725:	nop    DWORD PTR [rax]
    6728:	movzx  eax,BYTE PTR [rdi+0x1]
    672c:	mov    rdi,rcx
    672f:	lea    rcx,[rdi+0x1]
    6733:	test   al,al
    6735:	jne    670a <__sprintf_chk@plt+0x2a2a>
    6737:	xor    eax,eax
    6739:	ret    
    673a:	nop    WORD PTR [rax+rax*1+0x0]
    6740:	test   r9d,r9d
    6743:	je     6728 <__sprintf_chk@plt+0x2a48>
    6745:	movzx  eax,BYTE PTR [rdi+0x1]
    6749:	cmp    al,0x28
    674b:	je     6778 <__sprintf_chk@plt+0x2a98>
    674d:	mov    rdi,rcx
    6750:	jmp    6702 <__sprintf_chk@plt+0x2a22>
    6752:	nop    WORD PTR [rax+rax*1+0x0]
    6758:	test   r8d,r8d
    675b:	jne    6728 <__sprintf_chk@plt+0x2a48>
    675d:	test   esi,esi
    675f:	jne    676b <__sprintf_chk@plt+0x2a8b>
    6761:	cmp    BYTE PTR [rdi+0x1],0x0
    6765:	je     676b <__sprintf_chk@plt+0x2a8b>
    6767:	lea    rcx,[rdi+0x2]
    676b:	movzx  eax,BYTE PTR [rcx]
    676e:	mov    rdi,rcx
    6771:	jmp    6702 <__sprintf_chk@plt+0x2a22>
    6773:	nop    DWORD PTR [rax+rax*1+0x0]
    6778:	mov    eax,0x1
    677d:	ret    
    677e:	xchg   ax,ax
    6780:	endbr64 
    6784:	mov    edi,0x10
    6789:	jmp    e430 <__sprintf_chk@plt+0xa750>
    678e:	xchg   ax,ax
    6790:	endbr64 
    6794:	push   r13
    6796:	mov    r13,rdi
    6799:	push   r12
    679b:	push   rbp
    679c:	push   rbx
    679d:	sub    rsp,0x8
    67a1:	mov    r12,QWORD PTR [rdi]
    67a4:	test   r12,r12
    67a7:	je     6826 <__sprintf_chk@plt+0x2b46>
    67a9:	nop    DWORD PTR [rax+0x0]
    67b0:	mov    rbp,r12
    67b3:	mov    r12,QWORD PTR [r12]
    67b7:	mov    eax,DWORD PTR [rbp+0x8]
    67ba:	test   eax,eax
    67bc:	je     6860 <__sprintf_chk@plt+0x2b80>
    67c2:	cmp    eax,0x1
    67c5:	jne    6819 <__sprintf_chk@plt+0x2b39>
    67c7:	cmp    QWORD PTR [rbp+0x20],0x0
    67cc:	mov    r8,QWORD PTR [rbp+0x10]
    67d0:	je     6811 <__sprintf_chk@plt+0x2b31>
    67d2:	xor    ebx,ebx
    67d4:	jmp    67ea <__sprintf_chk@plt+0x2b0a>
    67d6:	cs nop WORD PTR [rax+rax*1+0x0]
    67e0:	add    rbx,0x1
    67e4:	cmp    rbx,QWORD PTR [rbp+0x20]
    67e8:	jae    6811 <__sprintf_chk@plt+0x2b31>
    67ea:	lea    rax,[rbx+rbx*8]
    67ee:	lea    rdi,[r8+rax*8]
    67f2:	test   DWORD PTR [rdi],0x8000000
    67f8:	je     67e0 <__sprintf_chk@plt+0x2b00>
    67fa:	add    rdi,0x8
    67fe:	add    rbx,0x1
    6802:	call   203f0 <__sprintf_chk@plt+0x1c710>
    6807:	mov    r8,QWORD PTR [rbp+0x10]
    680b:	cmp    rbx,QWORD PTR [rbp+0x20]
    680f:	jb     67ea <__sprintf_chk@plt+0x2b0a>
    6811:	mov    rdi,r8
    6814:	call   3680 <free@plt>
    6819:	mov    rdi,rbp
    681c:	call   3680 <free@plt>
    6821:	test   r12,r12
    6824:	jne    67b0 <__sprintf_chk@plt+0x2ad0>
    6826:	mov    rbx,QWORD PTR [r13+0x8]
    682a:	test   rbx,rbx
    682d:	je     684c <__sprintf_chk@plt+0x2b6c>
    682f:	nop
    6830:	mov    rbp,rbx
    6833:	mov    rbx,QWORD PTR [rbx]
    6836:	mov    rdi,QWORD PTR [rbp+0x8]
    683a:	call   3680 <free@plt>
    683f:	mov    rdi,rbp
    6842:	call   3680 <free@plt>
    6847:	test   rbx,rbx
    684a:	jne    6830 <__sprintf_chk@plt+0x2b50>
    684c:	add    rsp,0x8
    6850:	mov    rdi,r13
    6853:	pop    rbx
    6854:	pop    rbp
    6855:	pop    r12
    6857:	pop    r13
    6859:	jmp    3680 <free@plt>
    685e:	xchg   ax,ax
    6860:	mov    rdi,QWORD PTR [rbp+0x10]
    6864:	call   9d20 <__sprintf_chk@plt+0x6040>
    6869:	mov    rdi,rbp
    686c:	call   3680 <free@plt>
    6871:	test   r12,r12
    6874:	jne    67b0 <__sprintf_chk@plt+0x2ad0>
    687a:	jmp    6826 <__sprintf_chk@plt+0x2b46>
    687c:	nop    DWORD PTR [rax+0x0]
    6880:	endbr64 
    6884:	push   r14
    6886:	mov    r14,rdi
    6889:	push   r13
    688b:	lea    r13,[rip+0xfffffffffffffa9e]        # 6330 <__sprintf_chk@plt+0x2650>
    6892:	push   r12
    6894:	push   rbp
    6895:	mov    ebp,edx
    6897:	and    edx,0x10000000
    689d:	push   rbx
    689e:	mov    rbx,rsi
    68a1:	je     68aa <__sprintf_chk@plt+0x2bca>
    68a3:	mov    r13,QWORD PTR [rip+0x2572e]        # 2bfd8 <__sprintf_chk@plt+0x282f8>
    68aa:	mov    edx,ebp
    68ac:	mov    rsi,rbx
    68af:	mov    rdi,r14
    68b2:	call   r13
    68b5:	test   eax,eax
    68b7:	mov    edx,eax
    68b9:	sete   r8b
    68bd:	test   ebp,0x40000000
    68c3:	jne    68e8 <__sprintf_chk@plt+0x2c08>
    68c5:	movzx  eax,BYTE PTR [rbx]
    68c8:	test   al,al
    68ca:	je     68e8 <__sprintf_chk@plt+0x2c08>
    68cc:	test   edx,edx
    68ce:	je     6930 <__sprintf_chk@plt+0x2c50>
    68d0:	mov    r12,rbx
    68d3:	mov    edx,eax
    68d5:	add    rbx,0x1
    68d9:	movzx  eax,BYTE PTR [rbx]
    68dc:	cmp    dl,0x2f
    68df:	je     6903 <__sprintf_chk@plt+0x2c23>
    68e1:	test   al,al
    68e3:	jne    68d0 <__sprintf_chk@plt+0x2bf0>
    68e5:	xor    r8d,r8d
    68e8:	pop    rbx
    68e9:	mov    eax,r8d
    68ec:	pop    rbp
    68ed:	pop    r12
    68ef:	pop    r13
    68f1:	pop    r14
    68f3:	ret    
    68f4:	nop    DWORD PTR [rax+0x0]
    68f8:	movzx  eax,BYTE PTR [rbx+0x1]
    68fc:	mov    r12,rbx
    68ff:	add    rbx,0x1
    6903:	cmp    al,0x2f
    6905:	je     68f8 <__sprintf_chk@plt+0x2c18>
    6907:	mov    edx,ebp
    6909:	mov    rsi,rbx
    690c:	mov    rdi,r14
    690f:	call   r13
    6912:	mov    edx,eax
    6914:	movzx  eax,BYTE PTR [r12+0x1]
    691a:	test   al,al
    691c:	jne    68cc <__sprintf_chk@plt+0x2bec>
    691e:	test   edx,edx
    6920:	sete   r8b
    6924:	jmp    68e8 <__sprintf_chk@plt+0x2c08>
    6926:	cs nop WORD PTR [rax+rax*1+0x0]
    6930:	mov    r8d,0x1
    6936:	pop    rbx
    6937:	pop    rbp
    6938:	mov    eax,r8d
    693b:	pop    r12
    693d:	pop    r13
    693f:	pop    r14
    6941:	ret    
    6942:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    694d:	nop    DWORD PTR [rax]
    6950:	endbr64 
    6954:	push   r15
    6956:	push   r14
    6958:	push   r13
    695a:	push   r12
    695c:	push   rbp
    695d:	push   rbx
    695e:	sub    rsp,0x18
    6962:	mov    r14,QWORD PTR [rdi]
    6965:	test   r14,r14
    6968:	je     6ae3 <__sprintf_chk@plt+0x2e03>
    696e:	mov    eax,DWORD PTR [r14+0x8]
    6972:	mov    r15,rsi
    6975:	xor    r12d,r12d
    6978:	test   eax,eax
    697a:	jne    6a53 <__sprintf_chk@plt+0x2d73>
    6980:	test   r12,r12
    6983:	je     6ac0 <__sprintf_chk@plt+0x2de0>
    6989:	mov    eax,DWORD PTR [r14+0xc]
    698d:	mov    rbx,QWORD PTR [r14+0x10]
    6991:	mov    rbp,r15
    6994:	mov    DWORD PTR [rsp+0xc],eax
    6998:	mov    r13d,eax
    699b:	and    r13d,0x8
    699f:	nop
    69a0:	mov    rsi,rbp
    69a3:	mov    rdi,r12
    69a6:	call   3730 <strcpy@plt>
    69ab:	mov    rsi,r12
    69ae:	mov    rdi,rbx
    69b1:	call   98c0 <__sprintf_chk@plt+0x5be0>
    69b6:	test   rax,rax
    69b9:	jne    69e5 <__sprintf_chk@plt+0x2d05>
    69bb:	test   r13d,r13d
    69be:	je     6a10 <__sprintf_chk@plt+0x2d30>
    69c0:	mov    esi,0x2f
    69c5:	mov    rdi,r12
    69c8:	call   38b0 <strrchr@plt>
    69cd:	test   rax,rax
    69d0:	je     6a10 <__sprintf_chk@plt+0x2d30>
    69d2:	mov    BYTE PTR [rax],0x0
    69d5:	mov    rsi,r12
    69d8:	mov    rdi,rbx
    69db:	call   98c0 <__sprintf_chk@plt+0x5be0>
    69e0:	test   rax,rax
    69e3:	je     69bb <__sprintf_chk@plt+0x2cdb>
    69e5:	xor    ebx,ebx
    69e7:	mov    rdi,r12
    69ea:	call   3680 <free@plt>
    69ef:	mov    eax,DWORD PTR [r14+0xc]
    69f3:	add    rsp,0x18
    69f7:	shr    eax,0x1d
    69fa:	xor    eax,0x1
    69fd:	and    eax,0x1
    6a00:	xor    eax,ebx
    6a02:	pop    rbx
    6a03:	pop    rbp
    6a04:	pop    r12
    6a06:	pop    r13
    6a08:	pop    r14
    6a0a:	pop    r15
    6a0c:	ret    
    6a0d:	nop    DWORD PTR [rax]
    6a10:	test   DWORD PTR [rsp+0xc],0x40000000
    6a18:	jne    6a38 <__sprintf_chk@plt+0x2d58>
    6a1a:	mov    esi,0x2f
    6a1f:	mov    rdi,rbp
    6a22:	call   3880 <strchr@plt>
    6a27:	test   rax,rax
    6a2a:	je     6a38 <__sprintf_chk@plt+0x2d58>
    6a2c:	lea    rbp,[rax+0x1]
    6a30:	jmp    69a0 <__sprintf_chk@plt+0x2cc0>
    6a35:	nop    DWORD PTR [rax]
    6a38:	mov    rax,QWORD PTR [r14]
    6a3b:	test   rax,rax
    6a3e:	je     6ad9 <__sprintf_chk@plt+0x2df9>
    6a44:	mov    r14,rax
    6a47:	mov    eax,DWORD PTR [r14+0x8]
    6a4b:	test   eax,eax
    6a4d:	je     6980 <__sprintf_chk@plt+0x2ca0>
    6a53:	mov    rbp,QWORD PTR [r14+0x20]
    6a57:	mov    rbx,QWORD PTR [r14+0x10]
    6a5b:	test   rbp,rbp
    6a5e:	je     6a38 <__sprintf_chk@plt+0x2d58>
    6a60:	add    rbx,0x8
    6a64:	xor    r13d,r13d
    6a67:	jmp    6a97 <__sprintf_chk@plt+0x2db7>
    6a69:	nop    DWORD PTR [rax+0x0]
    6a70:	xor    r8d,r8d
    6a73:	xor    ecx,ecx
    6a75:	xor    edx,edx
    6a77:	mov    rsi,r15
    6a7a:	mov    rdi,rbx
    6a7d:	call   20440 <__sprintf_chk@plt+0x1c760>
    6a82:	test   eax,eax
    6a84:	je     69e5 <__sprintf_chk@plt+0x2d05>
    6a8a:	add    r13,0x1
    6a8e:	add    rbx,0x48
    6a92:	cmp    rbp,r13
    6a95:	je     6a38 <__sprintf_chk@plt+0x2d58>
    6a97:	mov    edx,DWORD PTR [rbx-0x8]
    6a9a:	test   edx,0x8000000
    6aa0:	jne    6a70 <__sprintf_chk@plt+0x2d90>
    6aa2:	mov    rdi,QWORD PTR [rbx]
    6aa5:	mov    rsi,r15
    6aa8:	call   6880 <__sprintf_chk@plt+0x2ba0>
    6aad:	test   al,al
    6aaf:	je     6a8a <__sprintf_chk@plt+0x2daa>
    6ab1:	jmp    69e5 <__sprintf_chk@plt+0x2d05>
    6ab6:	cs nop WORD PTR [rax+rax*1+0x0]
    6ac0:	mov    rdi,r15
    6ac3:	call   3810 <strlen@plt>
    6ac8:	lea    rdi,[rax+0x1]
    6acc:	call   e370 <__sprintf_chk@plt+0xa690>
    6ad1:	mov    r12,rax
    6ad4:	jmp    6989 <__sprintf_chk@plt+0x2ca9>
    6ad9:	mov    ebx,0x1
    6ade:	jmp    69e7 <__sprintf_chk@plt+0x2d07>
    6ae3:	add    rsp,0x18
    6ae7:	xor    eax,eax
    6ae9:	pop    rbx
    6aea:	pop    rbp
    6aeb:	pop    r12
    6aed:	pop    r13
    6aef:	pop    r14
    6af1:	pop    r15
    6af3:	ret    
    6af4:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    6aff:	nop
    6b00:	endbr64 
    6b04:	push   r15
    6b06:	push   r14
    6b08:	push   r13
    6b0a:	mov    r13,rsi
    6b0d:	push   r12
    6b0f:	mov    r12,rdi
    6b12:	push   rbp
    6b13:	mov    ebp,edx
    6b15:	push   rbx
    6b16:	sub    rsp,0x8
    6b1a:	and    edx,0x18000000
    6b20:	mov    rbx,QWORD PTR [rdi]
    6b23:	je     6bf8 <__sprintf_chk@plt+0x2f18>
    6b29:	mov    esi,ebp
    6b2b:	mov    rdi,r13
    6b2e:	call   66e0 <__sprintf_chk@plt+0x2a00>
    6b33:	test   al,al
    6b35:	je     6bf8 <__sprintf_chk@plt+0x2f18>
    6b3b:	test   rbx,rbx
    6b3e:	je     6b4a <__sprintf_chk@plt+0x2e6a>
    6b40:	cmp    DWORD PTR [rbx+0x8],0x1
    6b44:	je     6cf0 <__sprintf_chk@plt+0x3010>
    6b4a:	mov    edi,0x28
    6b4f:	call   e430 <__sprintf_chk@plt+0xa750>
    6b54:	mov    rbx,rax
    6b57:	mov    DWORD PTR [rax+0x8],0x1
    6b5e:	mov    DWORD PTR [rax+0xc],ebp
    6b61:	mov    rax,QWORD PTR [r12]
    6b65:	mov    QWORD PTR [r12],rbx
    6b69:	mov    QWORD PTR [rbx],rax
    6b6c:	mov    r14,QWORD PTR [rbx+0x20]
    6b70:	mov    rdi,QWORD PTR [rbx+0x10]
    6b74:	cmp    r14,QWORD PTR [rbx+0x18]
    6b78:	je     6d08 <__sprintf_chk@plt+0x3028>
    6b7e:	lea    rax,[r14+0x1]
    6b82:	mov    QWORD PTR [rbx+0x20],rax
    6b86:	lea    rax,[r14+r14*8]
    6b8a:	lea    r15,[rdi+rax*8]
    6b8e:	mov    DWORD PTR [r15],ebp
    6b91:	test   ebp,0x8000000
    6b97:	je     6cc8 <__sprintf_chk@plt+0x2fe8>
    6b9d:	mov    r12d,ebp
    6ba0:	sar    r12d,0x3
    6ba4:	and    r12d,0x2
    6ba8:	or     r12d,0x9
    6bac:	and    ebp,0x8
    6baf:	je     6dd0 <__sprintf_chk@plt+0x30f0>
    6bb5:	mov    rdi,r13
    6bb8:	call   3810 <strlen@plt>
    6bbd:	mov    rbp,rax
    6bc0:	jmp    6bdb <__sprintf_chk@plt+0x2efb>
    6bc2:	nop    WORD PTR [rax+rax*1+0x0]
    6bc8:	cmp    BYTE PTR [r13+rbp*1-0x1],0x2f
    6bce:	lea    rax,[rbp-0x1]
    6bd2:	jne    6e30 <__sprintf_chk@plt+0x3150>
    6bd8:	mov    rbp,rax
    6bdb:	test   rbp,rbp
    6bde:	jne    6bc8 <__sprintf_chk@plt+0x2ee8>
    6be0:	mov    QWORD PTR [rbx+0x20],r14
    6be4:	add    rsp,0x8
    6be8:	pop    rbx
    6be9:	pop    rbp
    6bea:	pop    r12
    6bec:	pop    r13
    6bee:	pop    r14
    6bf0:	pop    r15
    6bf2:	ret    
    6bf3:	nop    DWORD PTR [rax+rax*1+0x0]
    6bf8:	test   rbx,rbx
    6bfb:	je     6c08 <__sprintf_chk@plt+0x2f28>
    6bfd:	mov    edx,DWORD PTR [rbx+0x8]
    6c00:	test   edx,edx
    6c02:	je     6cb0 <__sprintf_chk@plt+0x2fd0>
    6c08:	mov    edi,0x28
    6c0d:	call   e430 <__sprintf_chk@plt+0xa750>
    6c12:	test   bpl,0x10
    6c16:	lea    rcx,[rip+0xfffffffffffff6c3]        # 62e0 <__sprintf_chk@plt+0x2600>
    6c1d:	lea    rdx,[rip+0xfffffffffffff7fc]        # 6420 <__sprintf_chk@plt+0x2740>
    6c24:	mov    rbx,rax
    6c27:	mov    DWORD PTR [rax+0x8],0x0
    6c2e:	lea    r8,[rip+0xfffffffffffff69b]        # 62d0 <__sprintf_chk@plt+0x25f0>
    6c35:	mov    DWORD PTR [rax+0xc],ebp
    6c38:	lea    rax,[rip+0xfffffffffffff6c1]        # 6300 <__sprintf_chk@plt+0x2620>
    6c3f:	cmove  rcx,rax
    6c43:	lea    rax,[rip+0xfffffffffffff6d6]        # 6320 <__sprintf_chk@plt+0x2640>
    6c4a:	cmove  rdx,rax
    6c4e:	xor    esi,esi
    6c50:	xor    edi,edi
    6c52:	call   9b70 <__sprintf_chk@plt+0x5e90>
    6c57:	mov    QWORD PTR [rbx+0x10],rax
    6c5b:	mov    rax,QWORD PTR [r12]
    6c5f:	mov    QWORD PTR [r12],rbx
    6c63:	mov    QWORD PTR [rbx],rax
    6c66:	mov    rdi,r13
    6c69:	and    ebp,0x10000002
    6c6f:	call   e4e0 <__sprintf_chk@plt+0xa800>
    6c74:	mov    r12,rax
    6c77:	cmp    ebp,0x10000000
    6c7d:	je     6d50 <__sprintf_chk@plt+0x3070>
    6c83:	mov    rdi,QWORD PTR [rbx+0x10]
    6c87:	mov    rsi,r12
    6c8a:	call   a230 <__sprintf_chk@plt+0x6550>
    6c8f:	cmp    r12,rax
    6c92:	je     6be4 <__sprintf_chk@plt+0x2f04>
    6c98:	add    rsp,0x8
    6c9c:	mov    rdi,r12
    6c9f:	pop    rbx
    6ca0:	pop    rbp
    6ca1:	pop    r12
    6ca3:	pop    r13
    6ca5:	pop    r14
    6ca7:	pop    r15
    6ca9:	jmp    3680 <free@plt>
    6cae:	xchg   ax,ax
    6cb0:	mov    eax,DWORD PTR [rbx+0xc]
    6cb3:	xor    eax,ebp
    6cb5:	test   eax,0x60000018
    6cba:	je     6c66 <__sprintf_chk@plt+0x2f86>
    6cbc:	jmp    6c08 <__sprintf_chk@plt+0x2f28>
    6cc1:	nop    DWORD PTR [rax+0x0]
    6cc8:	and    ebp,0x4000000
    6cce:	jne    6e00 <__sprintf_chk@plt+0x3120>
    6cd4:	mov    QWORD PTR [r15+0x8],r13
    6cd8:	add    rsp,0x8
    6cdc:	pop    rbx
    6cdd:	pop    rbp
    6cde:	pop    r12
    6ce0:	pop    r13
    6ce2:	pop    r14
    6ce4:	pop    r15
    6ce6:	ret    
    6ce7:	nop    WORD PTR [rax+rax*1+0x0]
    6cf0:	mov    eax,DWORD PTR [rbx+0xc]
    6cf3:	xor    eax,ebp
    6cf5:	test   eax,0x20000000
    6cfa:	je     6b6c <__sprintf_chk@plt+0x2e8c>
    6d00:	jmp    6b4a <__sprintf_chk@plt+0x2e6a>
    6d05:	nop    DWORD PTR [rax]
    6d08:	test   rdi,rdi
    6d0b:	je     6d98 <__sprintf_chk@plt+0x30b8>
    6d11:	movabs rax,0x12f684bda12f683
    6d1b:	cmp    r14,rax
    6d1e:	ja     6dc3 <__sprintf_chk@plt+0x30e3>
    6d24:	mov    rax,r14
    6d27:	shr    rax,1
    6d2a:	lea    r14,[r14+rax*1+0x1]
    6d2f:	mov    QWORD PTR [rbx+0x18],r14
    6d33:	lea    rsi,[r14+r14*8]
    6d37:	shl    rsi,0x3
    6d3b:	call   e390 <__sprintf_chk@plt+0xa6b0>
    6d40:	mov    r14,QWORD PTR [rbx+0x20]
    6d44:	mov    QWORD PTR [rbx+0x10],rax
    6d48:	mov    rdi,rax
    6d4b:	jmp    6b7e <__sprintf_chk@plt+0x2e9e>
    6d50:	mov    rdx,rax
    6d53:	mov    rcx,rax
    6d56:	jmp    6d72 <__sprintf_chk@plt+0x3092>
    6d58:	nop    DWORD PTR [rax+rax*1+0x0]
    6d60:	add    rcx,0x1
    6d64:	mov    BYTE PTR [rcx-0x1],al
    6d67:	test   al,al
    6d69:	je     6c83 <__sprintf_chk@plt+0x2fa3>
    6d6f:	mov    rdx,rsi
    6d72:	movzx  eax,BYTE PTR [rdx]
    6d75:	lea    rsi,[rdx+0x1]
    6d79:	cmp    al,0x5c
    6d7b:	jne    6d60 <__sprintf_chk@plt+0x3080>
    6d7d:	movzx  edi,BYTE PTR [rdx+0x1]
    6d81:	test   dil,dil
    6d84:	je     6d8c <__sprintf_chk@plt+0x30ac>
    6d86:	lea    rsi,[rdx+0x2]
    6d8a:	mov    eax,edi
    6d8c:	add    rcx,0x1
    6d90:	mov    BYTE PTR [rcx-0x1],al
    6d93:	jmp    6d6f <__sprintf_chk@plt+0x308f>
    6d95:	nop    DWORD PTR [rax]
    6d98:	test   r14,r14
    6d9b:	mov    eax,0x1
    6da0:	mov    edx,0x48
    6da5:	cmove  r14,rax
    6da9:	mov    rax,rdx
    6dac:	mul    r14
    6daf:	seto   dl
    6db2:	movzx  edx,dl
    6db5:	test   rax,rax
    6db8:	js     6dc3 <__sprintf_chk@plt+0x30e3>
    6dba:	test   rdx,rdx
    6dbd:	je     6d2f <__sprintf_chk@plt+0x304f>
    6dc3:	call   e520 <__sprintf_chk@plt+0xa840>
    6dc8:	nop    DWORD PTR [rax+rax*1+0x0]
    6dd0:	lea    rdi,[r15+0x8]
    6dd4:	mov    edx,r12d
    6dd7:	mov    rsi,r13
    6dda:	call   20240 <__sprintf_chk@plt+0x1c560>
    6ddf:	mov    ebp,eax
    6de1:	test   ebp,ebp
    6de3:	je     6be4 <__sprintf_chk@plt+0x2f04>
    6de9:	mov    rax,QWORD PTR [rbx+0x20]
    6ded:	lea    r14,[rax-0x1]
    6df1:	jmp    6be0 <__sprintf_chk@plt+0x2f00>
    6df6:	cs nop WORD PTR [rax+rax*1+0x0]
    6e00:	mov    rdi,r13
    6e03:	call   e4e0 <__sprintf_chk@plt+0xa800>
    6e08:	mov    edi,0x10
    6e0d:	mov    r13,rax
    6e10:	call   e370 <__sprintf_chk@plt+0xa690>
    6e15:	mov    rdx,QWORD PTR [r12+0x8]
    6e1a:	mov    QWORD PTR [rax+0x8],r13
    6e1e:	mov    QWORD PTR [rax],rdx
    6e21:	mov    QWORD PTR [r12+0x8],rax
    6e26:	jmp    6cd4 <__sprintf_chk@plt+0x2ff4>
    6e2b:	nop    DWORD PTR [rax+rax*1+0x0]
    6e30:	lea    rdi,[rbp+0x7]
    6e34:	call   e370 <__sprintf_chk@plt+0xa690>
    6e39:	mov    rdx,rbp
    6e3c:	mov    rsi,r13
    6e3f:	mov    r14,rax
    6e42:	mov    rdi,rax
    6e45:	call   3a00 <memcpy@plt>
    6e4a:	add    rbp,r14
    6e4d:	mov    eax,0x3f29
    6e52:	mov    edx,r12d
    6e55:	mov    DWORD PTR [rbp+0x0],0x2a2e2f28
    6e5c:	lea    rdi,[r15+0x8]
    6e60:	mov    rsi,r14
    6e63:	mov    WORD PTR [rbp+0x4],ax
    6e67:	mov    BYTE PTR [rbp+0x6],0x0
    6e6b:	call   20240 <__sprintf_chk@plt+0x1c560>
    6e70:	mov    rdi,r14
    6e73:	mov    ebp,eax
    6e75:	call   3680 <free@plt>
    6e7a:	jmp    6de1 <__sprintf_chk@plt+0x3101>
    6e7f:	nop
    6e80:	endbr64 
    6e84:	push   r15
    6e86:	push   r14
    6e88:	xor    r14d,r14d
    6e8b:	push   r13
    6e8d:	mov    r13,rsi
    6e90:	push   r12
    6e92:	mov    r12d,r8d
    6e95:	push   rbp
    6e96:	xor    ebp,ebp
    6e98:	push   rbx
    6e99:	mov    rbx,rdx
    6e9c:	sub    rsp,0x48
    6ea0:	mov    QWORD PTR [rsp+0x8],rdi
    6ea5:	mov    DWORD PTR [rsp+0x18],ecx
    6ea9:	mov    DWORD PTR [rsp+0x2c],r8d
    6eae:	mov    QWORD PTR [rsp+0x10],r9
    6eb3:	mov    rax,QWORD PTR fs:0x28
    6ebc:	mov    QWORD PTR [rsp+0x38],rax
    6ec1:	xor    eax,eax
    6ec3:	lea    rax,[rsp+0x30]
    6ec8:	mov    QWORD PTR [rsp+0x30],0x0
    6ed1:	mov    QWORD PTR [rsp],rax
    6ed5:	jmp    6ee8 <__sprintf_chk@plt+0x3208>
    6ed7:	nop    WORD PTR [rax+rax*1+0x0]
    6ee0:	mov    BYTE PTR [r14+rbp*1],r15b
    6ee4:	add    rbp,0x1
    6ee8:	mov    rax,QWORD PTR [rbx+0x8]
    6eec:	cmp    rax,QWORD PTR [rbx+0x10]
    6ef0:	jae    6f20 <__sprintf_chk@plt+0x3240>
    6ef2:	lea    rcx,[rax+0x1]
    6ef6:	mov    QWORD PTR [rbx+0x8],rcx
    6efa:	movzx  r15d,BYTE PTR [rax]
    6efe:	cmp    QWORD PTR [rsp+0x30],rbp
    6f03:	jne    6ee0 <__sprintf_chk@plt+0x3200>
    6f05:	mov    rsi,QWORD PTR [rsp]
    6f09:	mov    rdi,r14
    6f0c:	call   e3d0 <__sprintf_chk@plt+0xa6f0>
    6f11:	mov    r14,rax
    6f14:	jmp    6ee0 <__sprintf_chk@plt+0x3200>
    6f16:	cs nop WORD PTR [rax+rax*1+0x0]
    6f20:	mov    rdi,rbx
    6f23:	call   36b0 <__uflow@plt>
    6f28:	mov    r15d,eax
    6f2b:	cmp    eax,0xffffffff
    6f2e:	jne    6efe <__sprintf_chk@plt+0x321e>
    6f30:	mov    eax,DWORD PTR [rbx]
    6f32:	and    eax,0x20
    6f35:	mov    DWORD PTR [rsp+0x1c],eax
    6f39:	mov    ebx,eax
    6f3b:	call   36f0 <__errno_location@plt>
    6f40:	mov    DWORD PTR [rsp+0x28],0x0
    6f48:	mov    QWORD PTR [rsp+0x20],rax
    6f4d:	test   ebx,ebx
    6f4f:	je     6f65 <__sprintf_chk@plt+0x3285>
    6f51:	mov    eax,DWORD PTR [rax]
    6f53:	test   eax,eax
    6f55:	mov    DWORD PTR [rsp+0x1c],eax
    6f59:	setne  al
    6f5c:	movzx  eax,al
    6f5f:	neg    eax
    6f61:	mov    DWORD PTR [rsp+0x28],eax
    6f65:	mov    rdi,r14
    6f68:	lea    rsi,[rbp+0x1]
    6f6c:	call   e390 <__sprintf_chk@plt+0xa6b0>
    6f71:	mov    r15d,DWORD PTR [rsp+0x2c]
    6f76:	mov    r14,rax
    6f79:	mov    BYTE PTR [rax+rbp*1],r15b
    6f7d:	test   rbp,rbp
    6f80:	jne    6fd8 <__sprintf_chk@plt+0x32f8>
    6f82:	mov    edi,0x10
    6f87:	call   e370 <__sprintf_chk@plt+0xa690>
    6f8c:	mov    rdx,QWORD PTR [r13+0x8]
    6f90:	mov    QWORD PTR [rax+0x8],r14
    6f94:	mov    QWORD PTR [rax],rdx
    6f97:	mov    QWORD PTR [r13+0x8],rax
    6f9b:	nop    DWORD PTR [rax+rax*1+0x0]
    6fa0:	mov    rax,QWORD PTR [rsp+0x20]
    6fa5:	mov    edx,DWORD PTR [rsp+0x1c]
    6fa9:	mov    DWORD PTR [rax],edx
    6fab:	mov    rax,QWORD PTR [rsp+0x38]
    6fb0:	sub    rax,QWORD PTR fs:0x28
    6fb9:	jne    708f <__sprintf_chk@plt+0x33af>
    6fbf:	mov    eax,DWORD PTR [rsp+0x28]
    6fc3:	add    rsp,0x48
    6fc7:	pop    rbx
    6fc8:	pop    rbp
    6fc9:	pop    r12
    6fcb:	pop    r13
    6fcd:	pop    r14
    6fcf:	pop    r15
    6fd1:	ret    
    6fd2:	nop    WORD PTR [rax+rax*1+0x0]
    6fd8:	xor    ebx,ebx
    6fda:	cmp    BYTE PTR [rax+rbp*1-0x1],r15b
    6fdf:	mov    edi,0x10
    6fe4:	setne  bl
    6fe7:	add    rbx,rbp
    6fea:	add    rbx,rax
    6fed:	call   e370 <__sprintf_chk@plt+0xa690>
    6ff2:	mov    rdx,QWORD PTR [r13+0x8]
    6ff6:	mov    QWORD PTR [rax+0x8],r14
    6ffa:	mov    QWORD PTR [rax],rdx
    6ffd:	mov    QWORD PTR [r13+0x8],rax
    7001:	cmp    r14,rbx
    7004:	jae    6fa0 <__sprintf_chk@plt+0x32c0>
    7006:	movzx  ebp,r15b
    700a:	mov    rsi,r14
    700d:	add    rbp,rbp
    7010:	jmp    701d <__sprintf_chk@plt+0x333d>
    7012:	nop    WORD PTR [rax+rax*1+0x0]
    7018:	cmp    rbx,r14
    701b:	je     6fa0 <__sprintf_chk@plt+0x32c0>
    701d:	movzx  eax,BYTE PTR [r14]
    7021:	mov    r15,r14
    7024:	add    r14,0x1
    7028:	cmp    al,r12b
    702b:	jne    7018 <__sprintf_chk@plt+0x3338>
    702d:	mov    QWORD PTR [rsp],rsi
    7031:	call   3cd0 <__ctype_b_loc@plt>
    7036:	mov    rsi,QWORD PTR [rsp]
    703a:	mov    rcx,QWORD PTR [rax]
    703d:	test   WORD PTR [rcx+rbp*1],0x2000
    7043:	jne    7068 <__sprintf_chk@plt+0x3388>
    7045:	mov    rcx,QWORD PTR [rsp+0x10]
    704a:	mov    edx,DWORD PTR [rsp+0x18]
    704e:	mov    BYTE PTR [r15],0x0
    7052:	mov    rdi,r13
    7055:	mov    rax,QWORD PTR [rsp+0x8]
    705a:	call   rax
    705c:	mov    rsi,r14
    705f:	jmp    7018 <__sprintf_chk@plt+0x3338>
    7061:	nop    DWORD PTR [rax+0x0]
    7068:	lea    rax,[r14-0x1]
    706c:	cmp    rsi,rax
    706f:	jne    7081 <__sprintf_chk@plt+0x33a1>
    7071:	jmp    705c <__sprintf_chk@plt+0x337c>
    7073:	nop    DWORD PTR [rax+rax*1+0x0]
    7078:	sub    r15,0x1
    707c:	cmp    r15,rsi
    707f:	je     705c <__sprintf_chk@plt+0x337c>
    7081:	movzx  eax,BYTE PTR [r15-0x1]
    7086:	test   BYTE PTR [rcx+rax*2+0x1],0x20
    708b:	jne    7078 <__sprintf_chk@plt+0x3398>
    708d:	jmp    7045 <__sprintf_chk@plt+0x3365>
    708f:	call   3840 <__stack_chk_fail@plt>
    7094:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    709f:	nop
    70a0:	endbr64 
    70a4:	push   r13
    70a6:	push   r12
    70a8:	mov    r12d,r8d
    70ab:	push   rbp
    70ac:	mov    rbp,rsi
    70af:	sub    rsp,0x10
    70b3:	cmp    BYTE PTR [rdx],0x2d
    70b6:	mov    QWORD PTR [rsp+0x8],rdi
    70bb:	je     7118 <__sprintf_chk@plt+0x3438>
    70bd:	lea    rsi,[rip+0x1dead]        # 24f71 <__sprintf_chk@plt+0x21291>
    70c4:	mov    rdi,rdx
    70c7:	mov    DWORD PTR [rsp+0x4],ecx
    70cb:	call   3bc0 <fopen@plt>
    70d0:	mov    ecx,DWORD PTR [rsp+0x4]
    70d4:	test   rax,rax
    70d7:	mov    r13,rax
    70da:	je     714a <__sprintf_chk@plt+0x346a>
    70dc:	movsx  r8d,r12b
    70e0:	lea    r9,[rsp+0x8]
    70e5:	mov    rdx,r13
    70e8:	mov    rsi,rbp
    70eb:	lea    rdi,[rip+0xfffffffffffff1ce]        # 62c0 <__sprintf_chk@plt+0x25e0>
    70f2:	call   6e80 <__sprintf_chk@plt+0x31a0>
    70f7:	mov    rdi,r13
    70fa:	mov    r12d,eax
    70fd:	call   f210 <__sprintf_chk@plt+0xb530>
    7102:	test   eax,eax
    7104:	jne    714a <__sprintf_chk@plt+0x346a>
    7106:	add    rsp,0x10
    710a:	mov    eax,r12d
    710d:	pop    rbp
    710e:	pop    r12
    7110:	pop    r13
    7112:	ret    
    7113:	nop    DWORD PTR [rax+rax*1+0x0]
    7118:	cmp    BYTE PTR [rdx+0x1],0x0
    711c:	jne    70bd <__sprintf_chk@plt+0x33dd>
    711e:	mov    rdx,QWORD PTR [rip+0x24f8b]        # 2c0b0 <stdin@@GLIBC_2.2.5>
    7125:	lea    r9,[rsp+0x8]
    712a:	movsx  r8d,r8b
    712e:	lea    rdi,[rip+0xfffffffffffff18b]        # 62c0 <__sprintf_chk@plt+0x25e0>
    7135:	call   6e80 <__sprintf_chk@plt+0x31a0>
    713a:	add    rsp,0x10
    713e:	mov    r12d,eax
    7141:	pop    rbp
    7142:	mov    eax,r12d
    7145:	pop    r12
    7147:	pop    r13
    7149:	ret    
    714a:	mov    r12d,0xffffffff
    7150:	jmp    7106 <__sprintf_chk@plt+0x3426>
    7152:	cs nop WORD PTR [rax+rax*1+0x0]
    715c:	nop    DWORD PTR [rax+0x0]
    7160:	push   r15
    7162:	movsxd r10,r9d
    7165:	push   r14
    7167:	mov    r14,rdi
    716a:	push   r13
    716c:	push   r12
    716e:	push   rbp
    716f:	push   rbx
    7170:	mov    rbx,rsi
    7173:	sub    rsp,0x4b8
    717a:	mov    rdi,QWORD PTR [rdx+0x30]
    717e:	mov    rax,QWORD PTR [rsp+0x4f0]
    7186:	mov    BYTE PTR [rsp+0x1b],cl
    718a:	mov    QWORD PTR [rsp+0x8],rdx
    718f:	mov    ecx,DWORD PTR [rdx+0x8]
    7192:	mov    DWORD PTR [rsp+0x1c],r8d
    7197:	mov    QWORD PTR [rsp+0x10],rax
    719c:	mov    rax,QWORD PTR fs:0x28
    71a5:	mov    QWORD PTR [rsp+0x4a8],rax
    71ad:	xor    eax,eax
    71af:	test   rdi,rdi
    71b2:	lea    rax,[rip+0x1d4a8]        # 24661 <__sprintf_chk@plt+0x20981>
    71b9:	mov    DWORD PTR [rsp+0x4],ecx
    71bd:	cmovne rax,rdi
    71c1:	mov    QWORD PTR [rsp+0x20],rax
    71c6:	cmp    ecx,0xc
    71c9:	jle    72b0 <__sprintf_chk@plt+0x35d0>
    71cf:	sub    ecx,0xc
    71d2:	mov    DWORD PTR [rsp+0x4],ecx
    71d6:	movzx  eax,BYTE PTR [rbx]
    71d9:	xor    r15d,r15d
    71dc:	test   al,al
    71de:	je     7240 <__sprintf_chk@plt+0x3560>
    71e0:	cmp    al,0x25
    71e2:	je     72d0 <__sprintf_chk@plt+0x35f0>
    71e8:	test   r10d,r10d
    71eb:	mov    eax,0x0
    71f0:	mov    ebp,0x1
    71f5:	mov    rdx,r15
    71f8:	cmovns rax,r10
    71fc:	not    rdx
    71ff:	test   rax,rax
    7202:	cmovne rbp,rax
    7206:	cmp    rbp,rdx
    7209:	jae    7278 <__sprintf_chk@plt+0x3598>
    720b:	test   r14,r14
    720e:	je     7221 <__sprintf_chk@plt+0x3541>
    7210:	cmp    r10d,0x1
    7214:	jg     7280 <__sprintf_chk@plt+0x35a0>
    7216:	movsx  edi,BYTE PTR [rbx]
    7219:	mov    rsi,r14
    721c:	call   3940 <fputc@plt>
    7221:	add    r15,rbp
    7224:	mov    r12,rbx
    7227:	movzx  eax,BYTE PTR [r12+0x1]
    722d:	lea    rbx,[r12+0x1]
    7232:	mov    r10,0xffffffffffffffff
    7239:	test   al,al
    723b:	jne    71e0 <__sprintf_chk@plt+0x3500>
    723d:	nop    DWORD PTR [rax]
    7240:	mov    rax,QWORD PTR [rsp+0x4a8]
    7248:	sub    rax,QWORD PTR fs:0x28
    7251:	jne    8eba <__sprintf_chk@plt+0x51da>
    7257:	add    rsp,0x4b8
    725e:	mov    rax,r15
    7261:	pop    rbx
    7262:	pop    rbp
    7263:	pop    r12
    7265:	pop    r13
    7267:	pop    r14
    7269:	pop    r15
    726b:	ret    
    726c:	cmp    r15,0xffffffffffffffff
    7270:	jne    7227 <__sprintf_chk@plt+0x3547>
    7272:	nop    WORD PTR [rax+rax*1+0x0]
    7278:	xor    r15d,r15d
    727b:	jmp    7240 <__sprintf_chk@plt+0x3560>
    727d:	nop    DWORD PTR [rax]
    7280:	lea    r12,[rax-0x1]
    7284:	xor    r13d,r13d
    7287:	nop    WORD PTR [rax+rax*1+0x0]
    7290:	mov    rsi,r14
    7293:	mov    edi,0x20
    7298:	add    r13,0x1
    729c:	call   3940 <fputc@plt>
    72a1:	cmp    r12,r13
    72a4:	ja     7290 <__sprintf_chk@plt+0x35b0>
    72a6:	jmp    7216 <__sprintf_chk@plt+0x3536>
    72ab:	nop    DWORD PTR [rax+rax*1+0x0]
    72b0:	mov    esi,DWORD PTR [rsp+0x4]
    72b4:	mov    eax,0xc
    72b9:	test   esi,esi
    72bb:	cmovne eax,esi
    72be:	mov    DWORD PTR [rsp+0x4],eax
    72c2:	jmp    71d6 <__sprintf_chk@plt+0x34f6>
    72c7:	nop    WORD PTR [rax+rax*1+0x0]
    72d0:	movzx  eax,BYTE PTR [rsp+0x1b]
    72d5:	xor    ebp,ebp
    72d7:	xor    r11d,r11d
    72da:	mov    r8d,0x1
    72e0:	mov    BYTE PTR [rsp+0x28],al
    72e4:	movsx  edx,BYTE PTR [rbx+0x1]
    72e8:	add    rbx,0x1
    72ec:	lea    ecx,[rdx-0x23]
    72ef:	mov    esi,edx
    72f1:	mov    edi,edx
    72f3:	cmp    cl,0x3c
    72f6:	ja     732d <__sprintf_chk@plt+0x364d>
    72f8:	mov    rax,r8
    72fb:	shl    rax,cl
    72fe:	movabs rcx,0x1000000000002500
    7308:	test   rax,rcx
    730b:	jne    74c0 <__sprintf_chk@plt+0x37e0>
    7311:	movabs rcx,0x800000000000000
    731b:	test   rax,rcx
    731e:	jne    88ba <__sprintf_chk@plt+0x4bda>
    7324:	and    eax,0x1
    7327:	jne    88c4 <__sprintf_chk@plt+0x4be4>
    732d:	sub    edx,0x30
    7330:	cmp    edx,0x9
    7333:	jbe    7488 <__sprintf_chk@plt+0x37a8>
    7339:	cmp    sil,0x45
    733d:	je     7360 <__sprintf_chk@plt+0x3680>
    733f:	cmp    sil,0x4f
    7343:	je     7360 <__sprintf_chk@plt+0x3680>
    7345:	cmp    sil,0x7a
    7349:	ja     738b <__sprintf_chk@plt+0x36ab>
    734b:	lea    rcx,[rip+0x1c616]        # 23968 <__sprintf_chk@plt+0x1fc88>
    7352:	movzx  edx,sil
    7356:	movsxd rax,DWORD PTR [rcx+rdx*4]
    735a:	add    rax,rcx
    735d:	notrack jmp rax
    7360:	movzx  esi,BYTE PTR [rbx+0x1]
    7364:	lea    r12,[rbx+0x1]
    7368:	cmp    sil,0x7a
    736c:	ja     7388 <__sprintf_chk@plt+0x36a8>
    736e:	lea    rcx,[rip+0x1c7df]        # 23b54 <__sprintf_chk@plt+0x1fe74>
    7375:	movzx  edx,sil
    7379:	movsxd rax,DWORD PTR [rcx+rdx*4]
    737d:	add    rax,rcx
    7380:	notrack jmp rax
    7383:	nop    DWORD PTR [rax+rax*1+0x0]
    7388:	mov    rbx,r12
    738b:	mov    r12,rbx
    738e:	xchg   ax,ax
    7390:	lea    rax,[r12-0x1]
    7395:	lea    edx,[r12+0x1]
    739a:	mov    r13,rax
    739d:	mov    ebp,edx
    739f:	sub    ebp,eax
    73a1:	cmp    BYTE PTR [r13+0x0],0x25
    73a6:	lea    rax,[rax-0x1]
    73aa:	jne    739a <__sprintf_chk@plt+0x36ba>
    73ac:	mov    rax,r15
    73af:	movsxd rbp,ebp
    73b2:	not    rax
    73b5:	test   r10d,r10d
    73b8:	js     8800 <__sprintf_chk@plt+0x4b20>
    73be:	cmp    r11d,0x2d
    73c2:	je     8800 <__sprintf_chk@plt+0x4b20>
    73c8:	movsxd rbx,r10d
    73cb:	cmp    rbp,rbx
    73ce:	mov    rsi,rbx
    73d1:	cmovae rsi,rbp
    73d5:	mov    QWORD PTR [rsp+0x30],rsi
    73da:	cmp    rax,QWORD PTR [rsp+0x30]
    73df:	jbe    7278 <__sprintf_chk@plt+0x3598>
    73e5:	test   r14,r14
    73e8:	je     7478 <__sprintf_chk@plt+0x3798>
    73ee:	cmp    rbp,rbx
    73f1:	jae    743b <__sprintf_chk@plt+0x375b>
    73f3:	sub    rbx,rbp
    73f6:	cmp    r11d,0x30
    73fa:	je     89cb <__sprintf_chk@plt+0x4ceb>
    7400:	cmp    r11d,0x2b
    7404:	je     89cb <__sprintf_chk@plt+0x4ceb>
    740a:	xor    edx,edx
    740c:	test   rbx,rbx
    740f:	je     743b <__sprintf_chk@plt+0x375b>
    7411:	mov    QWORD PTR [rsp+0x40],rbp
    7416:	mov    rbp,rdx
    7419:	nop    DWORD PTR [rax+0x0]
    7420:	mov    rsi,r14
    7423:	mov    edi,0x20
    7428:	add    rbp,0x1
    742c:	call   3940 <fputc@plt>
    7431:	cmp    rbx,rbp
    7434:	jne    7420 <__sprintf_chk@plt+0x3740>
    7436:	mov    rbp,QWORD PTR [rsp+0x40]
    743b:	cmp    BYTE PTR [rsp+0x28],0x0
    7440:	je     87e8 <__sprintf_chk@plt+0x4b08>
    7446:	call   36a0 <__ctype_toupper_loc@plt>
    744b:	add    rbp,r13
    744e:	mov    rbx,rax
    7451:	nop    DWORD PTR [rax+0x0]
    7458:	movzx  edx,BYTE PTR [r13+0x0]
    745d:	mov    rax,QWORD PTR [rbx]
    7460:	mov    rsi,r14
    7463:	add    r13,0x1
    7467:	mov    edi,DWORD PTR [rax+rdx*4]
    746a:	call   3940 <fputc@plt>
    746f:	cmp    r13,rbp
    7472:	jne    7458 <__sprintf_chk@plt+0x3778>
    7474:	nop    DWORD PTR [rax+0x0]
    7478:	add    r15,QWORD PTR [rsp+0x30]
    747d:	jmp    7227 <__sprintf_chk@plt+0x3547>
    7482:	nop    WORD PTR [rax+rax*1+0x0]
    7488:	xor    r10d,r10d
    748b:	jmp    74b1 <__sprintf_chk@plt+0x37d1>
    748d:	nop    DWORD PTR [rax]
    7490:	movsx  eax,BYTE PTR [rbx]
    7493:	sub    eax,0x30
    7496:	add    r10d,eax
    7499:	jo     74b7 <__sprintf_chk@plt+0x37d7>
    749b:	movsx  edi,BYTE PTR [rbx+0x1]
    749f:	add    rbx,0x1
    74a3:	lea    eax,[rdi-0x30]
    74a6:	mov    esi,edi
    74a8:	cmp    eax,0x9
    74ab:	ja     7339 <__sprintf_chk@plt+0x3659>
    74b1:	imul   r10d,r10d,0xa
    74b5:	jno    7490 <__sprintf_chk@plt+0x37b0>
    74b7:	mov    r10d,0x7fffffff
    74bd:	jmp    749b <__sprintf_chk@plt+0x37bb>
    74bf:	nop
    74c0:	mov    r11d,edx
    74c3:	jmp    72e4 <__sprintf_chk@plt+0x3604>
    74c8:	xor    edi,edi
    74ca:	mov    rdx,QWORD PTR [rsp+0x8]
    74cf:	mov    ecx,DWORD PTR [rdx+0x14]
    74d2:	mov    r8d,DWORD PTR [rdx+0x1c]
    74d6:	mov    r9d,DWORD PTR [rdx+0x18]
    74da:	mov    eax,ecx
    74dc:	mov    edx,r8d
    74df:	sar    eax,0x1f
    74e2:	sub    edx,r9d
    74e5:	add    edx,0x17e
    74eb:	and    eax,0x190
    74f0:	lea    r12d,[rcx+rax*1-0x64]
    74f5:	movsxd rax,edx
    74f8:	mov    ebp,edx
    74fa:	imul   rax,rax,0xffffffff92492493
    7501:	sar    ebp,0x1f
    7504:	shr    rax,0x20
    7508:	add    eax,edx
    750a:	sar    eax,0x2
    750d:	sub    eax,ebp
    750f:	lea    ebp,[rax*8+0x0]
    7516:	sub    ebp,eax
    7518:	mov    eax,r8d
    751b:	sub    eax,edx
    751d:	lea    eax,[rax+rbp*1+0x3]
    7521:	test   eax,eax
    7523:	js     8b57 <__sprintf_chk@plt+0x4e77>
    7529:	mov    edx,0x16d
    752e:	test   r12b,0x3
    7532:	jne    756d <__sprintf_chk@plt+0x388d>
    7534:	imul   edx,r12d,0xc28f5c29
    753b:	lea    r12d,[rdx+0x51eb850]
    7542:	mov    edx,0x16e
    7547:	mov    ebp,r12d
    754a:	ror    ebp,0x2
    754d:	cmp    ebp,0x28f5c28
    7553:	ja     756d <__sprintf_chk@plt+0x388d>
    7555:	mov    edx,r12d
    7558:	ror    edx,0x4
    755b:	cmp    edx,0xa3d70b
    7561:	setb   dl
    7564:	movzx  edx,dl
    7567:	add    edx,0x16d
    756d:	sub    r8d,edx
    7570:	mov    edx,r8d
    7573:	sub    edx,r9d
    7576:	lea    r9d,[rdx+0x17e]
    757d:	movsxd rdx,r9d
    7580:	mov    ebp,r9d
    7583:	sub    r8d,r9d
    7586:	imul   rdx,rdx,0xffffffff92492493
    758d:	sar    ebp,0x1f
    7590:	shr    rdx,0x20
    7594:	add    edx,r9d
    7597:	sar    edx,0x2
    759a:	sub    edx,ebp
    759c:	lea    ebp,[rdx*8+0x0]
    75a3:	sub    ebp,edx
    75a5:	lea    r8d,[r8+rbp*1+0x3]
    75aa:	test   r8d,r8d
    75ad:	cmovns eax,r8d
    75b1:	sar    r8d,0x1f
    75b5:	add    r8d,0x1
    75b9:	cmp    sil,0x47
    75bd:	je     8c2c <__sprintf_chk@plt+0x4f4c>
    75c3:	cmp    sil,0x67
    75c7:	jne    8c01 <__sprintf_chk@plt+0x4f21>
    75cd:	movsxd rax,ecx
    75d0:	mov    edx,ecx
    75d2:	imul   rax,rax,0x51eb851f
    75d9:	sar    edx,0x1f
    75dc:	sar    rax,0x25
    75e0:	sub    eax,edx
    75e2:	mov    edx,ecx
    75e4:	imul   eax,eax,0x64
    75e7:	sub    edx,eax
    75e9:	lea    eax,[rdx+r8*1]
    75ed:	movsxd rdx,eax
    75f0:	mov    r9d,eax
    75f3:	imul   rdx,rdx,0x51eb851f
    75fa:	sar    r9d,0x1f
    75fe:	sar    rdx,0x25
    7602:	sub    edx,r9d
    7605:	imul   r9d,edx,0x64
    7609:	sub    eax,r9d
    760c:	mov    edx,eax
    760e:	js     8db5 <__sprintf_chk@plt+0x50d5>
    7614:	test   r11d,r11d
    7617:	je     8dd0 <__sprintf_chk@plt+0x50f0>
    761d:	mov    r12,rbx
    7620:	mov    eax,0x1
    7625:	cmp    r11d,0x2b
    7629:	je     8059 <__sprintf_chk@plt+0x4379>
    762f:	mov    BYTE PTR [rsp+0x40],0x0
    7634:	xor    ebp,ebp
    7636:	mov    DWORD PTR [rsp+0x30],0x2
    763e:	xor    ecx,ecx
    7640:	cmp    edi,0x4f
    7643:	jne    7b18 <__sprintf_chk@plt+0x3e38>
    7649:	test   al,al
    764b:	je     7b18 <__sprintf_chk@plt+0x3e38>
    7651:	mov    r8d,0x2520
    7657:	mov    BYTE PTR [rsp+0x50],0x0
    765c:	mov    WORD PTR [rsp+0x9b],r8w
    7665:	mov    BYTE PTR [rsp+0x9d],dil
    766d:	lea    rax,[rsp+0x9e]
    7675:	mov    BYTE PTR [rax],sil
    7678:	mov    rcx,QWORD PTR [rsp+0x8]
    767d:	lea    rbp,[rsp+0xa0]
    7685:	lea    rdx,[rsp+0x9b]
    768d:	mov    BYTE PTR [rax+0x1],0x0
    7691:	mov    esi,0x400
    7696:	mov    rdi,rbp
    7699:	mov    DWORD PTR [rsp+0x40],r10d
    769e:	mov    DWORD PTR [rsp+0x30],r11d
    76a3:	call   3b60 <strftime@plt>
    76a8:	mov    QWORD PTR [rsp+0x48],rax
    76ad:	test   rax,rax
    76b0:	je     7227 <__sprintf_chk@plt+0x3547>
    76b6:	mov    r10d,DWORD PTR [rsp+0x40]
    76bb:	mov    r11d,DWORD PTR [rsp+0x30]
    76c0:	lea    r13,[rax-0x1]
    76c4:	test   r10d,r10d
    76c7:	js     87d8 <__sprintf_chk@plt+0x4af8>
    76cd:	cmp    r11d,0x2d
    76d1:	je     87d8 <__sprintf_chk@plt+0x4af8>
    76d7:	movsxd rbx,r10d
    76da:	cmp    r13,rbx
    76dd:	mov    rax,rbx
    76e0:	cmovae rax,r13
    76e4:	mov    QWORD PTR [rsp+0x30],rax
    76e9:	mov    rax,r15
    76ec:	not    rax
    76ef:	cmp    rax,QWORD PTR [rsp+0x30]
    76f4:	jbe    7278 <__sprintf_chk@plt+0x3598>
    76fa:	test   r14,r14
    76fd:	je     7478 <__sprintf_chk@plt+0x3798>
    7703:	cmp    r13,rbx
    7706:	jae    774b <__sprintf_chk@plt+0x3a6b>
    7708:	sub    rbx,r13
    770b:	cmp    r11d,0x30
    770f:	je     8946 <__sprintf_chk@plt+0x4c66>
    7715:	cmp    r11d,0x2b
    7719:	je     8946 <__sprintf_chk@plt+0x4c66>
    771f:	xor    edx,edx
    7721:	test   rbx,rbx
    7724:	je     774b <__sprintf_chk@plt+0x3a6b>
    7726:	mov    QWORD PTR [rsp+0x40],rbp
    772b:	mov    rbp,rdx
    772e:	xchg   ax,ax
    7730:	mov    rsi,r14
    7733:	mov    edi,0x20
    7738:	add    rbp,0x1
    773c:	call   3940 <fputc@plt>
    7741:	cmp    rbx,rbp
    7744:	jne    7730 <__sprintf_chk@plt+0x3a50>
    7746:	mov    rbp,QWORD PTR [rsp+0x40]
    774b:	cmp    BYTE PTR [rsp+0x50],0x0
    7750:	jne    88e8 <__sprintf_chk@plt+0x4c08>
    7756:	cmp    BYTE PTR [rsp+0x28],0x0
    775b:	je     88cb <__sprintf_chk@plt+0x4beb>
    7761:	test   r13,r13
    7764:	je     7478 <__sprintf_chk@plt+0x3798>
    776a:	call   36a0 <__ctype_toupper_loc@plt>
    776f:	lea    rbx,[rsp+0xa1]
    7777:	add    rbp,QWORD PTR [rsp+0x48]
    777c:	mov    r13,rax
    777f:	nop
    7780:	movzx  edx,BYTE PTR [rbx]
    7783:	mov    rax,QWORD PTR [r13+0x0]
    7787:	mov    rsi,r14
    778a:	add    rbx,0x1
    778e:	mov    edi,DWORD PTR [rax+rdx*4]
    7791:	call   3940 <fputc@plt>
    7796:	cmp    rbx,rbp
    7799:	jne    7780 <__sprintf_chk@plt+0x3aa0>
    779b:	jmp    7478 <__sprintf_chk@plt+0x3798>
    77a0:	mov    rbx,r12
    77a3:	cmp    edi,0x45
    77a6:	jne    74ca <__sprintf_chk@plt+0x37ea>
    77ac:	jmp    738b <__sprintf_chk@plt+0x36ab>
    77b1:	mov    r12,rbx
    77b4:	xor    edi,edi
    77b6:	movzx  eax,BYTE PTR [rsp+0x28]
    77bb:	test   bpl,bpl
    77be:	cmovne eax,ebp
    77c1:	mov    BYTE PTR [rsp+0x28],al
    77c5:	cmp    edi,0x45
    77c8:	je     7388 <__sprintf_chk@plt+0x36a8>
    77ce:	mov    BYTE PTR [rsp+0x50],0x0
    77d3:	mov    ebx,0x2520
    77d8:	mov    WORD PTR [rsp+0x9b],bx
    77e0:	test   edi,edi
    77e2:	jne    7665 <__sprintf_chk@plt+0x3985>
    77e8:	lea    rax,[rsp+0x9d]
    77f0:	jmp    7675 <__sprintf_chk@plt+0x3995>
    77f5:	mov    rbx,r12
    77f8:	movzx  edx,BYTE PTR [rbx-0x1]
    77fc:	lea    r13,[rbx-0x1]
    7800:	mov    rax,r15
    7803:	mov    r12,r13
    7806:	not    rax
    7809:	cmp    dl,0x25
    780c:	jne    7390 <__sprintf_chk@plt+0x36b0>
    7812:	mov    ebp,0x1
    7817:	jmp    73b5 <__sprintf_chk@plt+0x36d5>
    781c:	mov    r12,rbx
    781f:	movzx  r13d,BYTE PTR [rsp+0x28]
    7825:	test   r10d,r10d
    7828:	jns    7833 <__sprintf_chk@plt+0x3b53>
    782a:	test   r11d,r11d
    782d:	je     8e46 <__sprintf_chk@plt+0x5166>
    7833:	mov    ebx,r10d
    7836:	mov    eax,0x0
    783b:	sub    ebx,0x6
    783e:	cmovs  ebx,eax
    7841:	lea    rax,[rip+0x1a974]        # 221bc <__sprintf_chk@plt+0x1e4dc>
    7848:	mov    QWORD PTR [rsp+0x30],rax
    784d:	nop    DWORD PTR [rax]
    7850:	mov    eax,DWORD PTR [rsp+0x4f8]
    7857:	mov    r8d,r11d
    785a:	mov    ecx,r13d
    785d:	mov    r9d,ebx
    7860:	mov    DWORD PTR [rsp+0x40],r10d
    7865:	xor    edi,edi
    7867:	push   rax
    7868:	push   QWORD PTR [rsp+0x18]
    786c:	mov    rdx,QWORD PTR [rsp+0x18]
    7871:	mov    rsi,QWORD PTR [rsp+0x40]
    7876:	mov    DWORD PTR [rsp+0x38],r11d
    787b:	call   7160 <__sprintf_chk@plt+0x3480>
    7880:	pop    rdx
    7881:	pop    rcx
    7882:	mov    r11d,DWORD PTR [rsp+0x28]
    7887:	cmp    r11d,0x2d
    788b:	je     8930 <__sprintf_chk@plt+0x4c50>
    7891:	mov    r10d,DWORD PTR [rsp+0x40]
    7896:	test   r10d,r10d
    7899:	js     8930 <__sprintf_chk@plt+0x4c50>
    789f:	movsxd rbp,r10d
    78a2:	cmp    rax,rbp
    78a5:	mov    rsi,rbp
    78a8:	cmovae rsi,rax
    78ac:	mov    QWORD PTR [rsp+0x28],rsi
    78b1:	mov    rdx,r15
    78b4:	not    rdx
    78b7:	cmp    rdx,QWORD PTR [rsp+0x28]
    78bc:	jbe    7278 <__sprintf_chk@plt+0x3598>
    78c2:	test   r14,r14
    78c5:	je     7941 <__sprintf_chk@plt+0x3c61>
    78c7:	cmp    rbp,rax
    78ca:	jbe    7917 <__sprintf_chk@plt+0x3c37>
    78cc:	sub    rbp,rax
    78cf:	mov    rax,rbp
    78d2:	cmp    r11d,0x30
    78d6:	je     8a93 <__sprintf_chk@plt+0x4db3>
    78dc:	xor    ebp,ebp
    78de:	cmp    r11d,0x2b
    78e2:	je     8a93 <__sprintf_chk@plt+0x4db3>
    78e8:	mov    DWORD PTR [rsp+0x50],r11d
    78ed:	mov    DWORD PTR [rsp+0x40],ebx
    78f1:	mov    rbx,rax
    78f4:	nop    DWORD PTR [rax+0x0]
    78f8:	mov    rsi,r14
    78fb:	mov    edi,0x20
    7900:	add    rbp,0x1
    7904:	call   3940 <fputc@plt>
    7909:	cmp    rbx,rbp
    790c:	jne    78f8 <__sprintf_chk@plt+0x3c18>
    790e:	mov    ebx,DWORD PTR [rsp+0x40]
    7912:	mov    r11d,DWORD PTR [rsp+0x50]
    7917:	mov    eax,DWORD PTR [rsp+0x4f8]
    791e:	mov    ecx,r13d
    7921:	mov    r9d,ebx
    7924:	mov    r8d,r11d
    7927:	mov    rdi,r14
    792a:	push   rax
    792b:	push   QWORD PTR [rsp+0x18]
    792f:	mov    rdx,QWORD PTR [rsp+0x18]
    7934:	mov    rsi,QWORD PTR [rsp+0x40]
    7939:	call   7160 <__sprintf_chk@plt+0x3480>
    793e:	pop    rbp
    793f:	pop    r13
    7941:	add    r15,QWORD PTR [rsp+0x28]
    7946:	jmp    7227 <__sprintf_chk@plt+0x3547>
    794b:	mov    r12,rbx
    794e:	lea    rax,[rip+0x1c007]        # 2395c <__sprintf_chk@plt+0x1fc7c>
    7955:	movzx  r13d,BYTE PTR [rsp+0x28]
    795b:	mov    ebx,0xffffffff
    7960:	mov    QWORD PTR [rsp+0x30],rax
    7965:	jmp    7850 <__sprintf_chk@plt+0x3b70>
    796a:	mov    r12,rbx
    796d:	xor    edi,edi
    796f:	mov    rax,QWORD PTR [rsp+0x8]
    7974:	mov    DWORD PTR [rsp+0x30],0x2
    797c:	mov    esi,0x48
    7981:	mov    edx,DWORD PTR [rax+0x8]
    7984:	nop    DWORD PTR [rax+0x0]
    7988:	mov    eax,edx
    798a:	mov    BYTE PTR [rsp+0x40],0x0
    798f:	xor    ecx,ecx
    7991:	shr    eax,0x1f
    7994:	mov    ebp,eax
    7996:	mov    eax,edx
    7998:	not    eax
    799a:	shr    eax,0x1f
    799d:	jmp    7640 <__sprintf_chk@plt+0x3960>
    79a2:	mov    r12,rbx
    79a5:	movzx  ebx,BYTE PTR [rsp+0x28]
    79aa:	test   bpl,bpl
    79ad:	mov    eax,0x0
    79b2:	mov    rdi,QWORD PTR [rsp+0x20]
    79b7:	mov    DWORD PTR [rsp+0x40],r10d
    79bc:	cmovne ebx,eax
    79bf:	mov    DWORD PTR [rsp+0x30],r11d
    79c4:	mov    BYTE PTR [rsp+0x28],bl
    79c8:	call   3810 <strlen@plt>
    79cd:	movsxd r10,DWORD PTR [rsp+0x40]
    79d2:	mov    r11d,DWORD PTR [rsp+0x30]
    79d7:	mov    r13,rax
    79da:	test   r10d,r10d
    79dd:	js     8a86 <__sprintf_chk@plt+0x4da6>
    79e3:	cmp    r11d,0x2d
    79e7:	je     8a86 <__sprintf_chk@plt+0x4da6>
    79ed:	cmp    rax,r10
    79f0:	mov    rax,r10
    79f3:	cmovae rax,r13
    79f7:	mov    QWORD PTR [rsp+0x30],rax
    79fc:	mov    rax,r15
    79ff:	not    rax
    7a02:	cmp    rax,QWORD PTR [rsp+0x30]
    7a07:	jbe    7278 <__sprintf_chk@plt+0x3598>
    7a0d:	test   r14,r14
    7a10:	je     7478 <__sprintf_chk@plt+0x3798>
    7a16:	cmp    r13,r10
    7a19:	jae    7a7a <__sprintf_chk@plt+0x3d9a>
    7a1b:	mov    rbx,r10
    7a1e:	sub    rbx,r13
    7a21:	cmp    r11d,0x30
    7a25:	je     8dec <__sprintf_chk@plt+0x510c>
    7a2b:	cmp    r11d,0x2b
    7a2f:	je     8dec <__sprintf_chk@plt+0x510c>
    7a35:	xor    edx,edx
    7a37:	test   rbx,rbx
    7a3a:	je     7a7a <__sprintf_chk@plt+0x3d9a>
    7a3c:	mov    rax,r13
    7a3f:	mov    BYTE PTR [rsp+0x40],bpl
    7a44:	mov    r13,r12
    7a47:	mov    rbp,rbx
    7a4a:	mov    r12,r14
    7a4d:	mov    rbx,rdx
    7a50:	mov    r14,rax
    7a53:	mov    rsi,r12
    7a56:	mov    edi,0x20
    7a5b:	add    rbx,0x1
    7a5f:	call   3940 <fputc@plt>
    7a64:	cmp    rbp,rbx
    7a67:	jne    7a53 <__sprintf_chk@plt+0x3d73>
    7a69:	mov    rax,r14
    7a6c:	movzx  ebp,BYTE PTR [rsp+0x40]
    7a71:	mov    r14,r12
    7a74:	mov    r12,r13
    7a77:	mov    r13,rax
    7a7a:	test   bpl,bpl
    7a7d:	jne    8cea <__sprintf_chk@plt+0x500a>
    7a83:	cmp    BYTE PTR [rsp+0x28],0x0
    7a88:	je     8cd0 <__sprintf_chk@plt+0x4ff0>
    7a8e:	test   r13,r13
    7a91:	je     7478 <__sprintf_chk@plt+0x3798>
    7a97:	call   36a0 <__ctype_toupper_loc@plt>
    7a9c:	mov    rbx,QWORD PTR [rsp+0x20]
    7aa1:	mov    rbp,rax
    7aa4:	add    r13,rbx
    7aa7:	movzx  edx,BYTE PTR [rbx]
    7aaa:	mov    rax,QWORD PTR [rbp+0x0]
    7aae:	mov    rsi,r14
    7ab1:	add    rbx,0x1
    7ab5:	mov    edi,DWORD PTR [rax+rdx*4]
    7ab8:	call   3940 <fputc@plt>
    7abd:	cmp    rbx,r13
    7ac0:	jne    7aa7 <__sprintf_chk@plt+0x3dc7>
    7ac2:	jmp    7478 <__sprintf_chk@plt+0x3798>
    7ac7:	mov    r12,rbx
    7aca:	xor    edi,edi
    7acc:	mov    rax,QWORD PTR [rsp+0x8]
    7ad1:	mov    esi,0x59
    7ad6:	mov    eax,DWORD PTR [rax+0x14]
    7ad9:	cmp    eax,0xfffff894
    7ade:	lea    edx,[rax+0x76c]
    7ae4:	setl   bpl
    7ae8:	setge  al
    7aeb:	test   r11d,r11d
    7aee:	jne    8b28 <__sprintf_chk@plt+0x4e48>
    7af4:	mov    r11d,DWORD PTR [rsp+0x1c]
    7af9:	cmp    r11d,0x2b
    7afd:	je     8e99 <__sprintf_chk@plt+0x51b9>
    7b03:	mov    BYTE PTR [rsp+0x40],0x0
    7b08:	xor    ecx,ecx
    7b0a:	mov    DWORD PTR [rsp+0x30],0x4
    7b12:	nop    WORD PTR [rax+rax*1+0x0]
    7b18:	mov    eax,edx
    7b1a:	neg    eax
    7b1c:	test   bpl,bpl
    7b1f:	cmovne edx,eax
    7b22:	lea    rbx,[rsp+0xb7]
    7b2a:	mov    r9d,0xcccccccd
    7b30:	mov    r13,rbx
    7b33:	lea    rdi,[r13-0x1]
    7b37:	test   cl,0x1
    7b3a:	je     7b80 <__sprintf_chk@plt+0x3ea0>
    7b3c:	nop    DWORD PTR [rax+0x0]
    7b40:	mov    BYTE PTR [r13-0x1],0x3a
    7b45:	sub    r13,0x2
    7b49:	mov    eax,edx
    7b4b:	mov    esi,edx
    7b4d:	sar    ecx,1
    7b4f:	imul   rax,r9
    7b53:	shr    rax,0x23
    7b57:	lea    r8d,[rax+rax*4]
    7b5b:	add    r8d,r8d
    7b5e:	sub    esi,r8d
    7b61:	add    esi,0x30
    7b64:	mov    BYTE PTR [rdi-0x1],sil
    7b68:	cmp    edx,0x9
    7b6b:	ja     7b75 <__sprintf_chk@plt+0x3e95>
    7b6d:	test   ecx,ecx
    7b6f:	je     7c60 <__sprintf_chk@plt+0x3f80>
    7b75:	mov    edx,eax
    7b77:	lea    rdi,[r13-0x1]
    7b7b:	test   cl,0x1
    7b7e:	jne    7b40 <__sprintf_chk@plt+0x3e60>
    7b80:	mov    rax,rdi
    7b83:	mov    rdi,r13
    7b86:	mov    r13,rax
    7b89:	jmp    7b49 <__sprintf_chk@plt+0x3e69>
    7b8b:	mov    r12,rbx
    7b8e:	mov    rax,QWORD PTR [rsp+0x8]
    7b93:	mov    rdi,QWORD PTR [rsp+0x10]
    7b98:	lea    rsi,[rsp+0x60]
    7b9d:	mov    DWORD PTR [rsp+0x50],r10d
    7ba2:	mov    DWORD PTR [rsp+0x40],r11d
    7ba7:	lea    rbx,[rsp+0xb7]
    7baf:	movdqu xmm4,XMMWORD PTR [rax+0x20]
    7bb4:	movdqu xmm0,XMMWORD PTR [rax]
    7bb8:	mov    r13,rbx
    7bbb:	movdqu xmm2,XMMWORD PTR [rax+0x10]
    7bc0:	mov    rax,QWORD PTR [rax+0x30]
    7bc4:	movups XMMWORD PTR [rsp+0x60],xmm0
    7bc9:	mov    QWORD PTR [rsp+0x90],rax
    7bd1:	movups XMMWORD PTR [rsp+0x70],xmm2
    7bd6:	movaps XMMWORD PTR [rsp+0x30],xmm4
    7bdb:	movups XMMWORD PTR [rsp+0x80],xmm4
    7be3:	call   20c10 <__sprintf_chk@plt+0x1cf30>
    7be8:	mov    r11d,DWORD PTR [rsp+0x40]
    7bed:	mov    r10d,DWORD PTR [rsp+0x50]
    7bf2:	movabs r8,0x6666666666666667
    7bfc:	mov    rsi,rax
    7bff:	shr    rax,0x3f
    7c03:	mov    edi,0x30
    7c08:	mov    rbp,rax
    7c0b:	mov    rcx,rsi
    7c0e:	xchg   ax,ax
    7c10:	mov    rax,rcx
    7c13:	imul   r8
    7c16:	mov    rax,rcx
    7c19:	sar    rax,0x3f
    7c1d:	sar    rdx,0x2
    7c21:	sub    rdx,rax
    7c24:	lea    r9,[rdx+rdx*4]
    7c28:	mov    rax,rdx
    7c2b:	add    r9,r9
    7c2e:	sub    rcx,r9
    7c31:	mov    rdx,rcx
    7c34:	mov    rcx,rax
    7c37:	mov    eax,edi
    7c39:	sub    eax,edx
    7c3b:	add    edx,0x30
    7c3e:	test   rsi,rsi
    7c41:	cmovs  edx,eax
    7c44:	sub    r13,0x1
    7c48:	mov    BYTE PTR [r13+0x0],dl
    7c4c:	test   rcx,rcx
    7c4f:	jne    7c10 <__sprintf_chk@plt+0x3f30>
    7c51:	mov    BYTE PTR [rsp+0x40],0x0
    7c56:	mov    DWORD PTR [rsp+0x30],0x1
    7c5e:	xchg   ax,ax
    7c60:	test   r11d,r11d
    7c63:	je     8810 <__sprintf_chk@plt+0x4b30>
    7c69:	cmp    r11d,0x2d
    7c6d:	setne  al
    7c70:	test   r10d,r10d
    7c73:	cmovs  r10d,DWORD PTR [rsp+0x30]
    7c79:	sub    rbx,r13
    7c7c:	test   bpl,bpl
    7c7f:	jne    8820 <__sprintf_chk@plt+0x4b40>
    7c85:	cmp    BYTE PTR [rsp+0x40],0x0
    7c8a:	jne    893c <__sprintf_chk@plt+0x4c5c>
    7c90:	mov    edx,r10d
    7c93:	movsxd rbp,ebx
    7c96:	sub    edx,ebx
    7c98:	test   edx,edx
    7c9a:	jle    88a4 <__sprintf_chk@plt+0x4bc4>
    7ca0:	test   al,al
    7ca2:	je     88a4 <__sprintf_chk@plt+0x4bc4>
    7ca8:	movsxd rdx,r10d
    7cab:	mov    rax,rbp
    7cae:	cmp    rdx,rbp
    7cb1:	cmovae rax,rdx
    7cb5:	mov    QWORD PTR [rsp+0x30],rax
    7cba:	mov    rax,r15
    7cbd:	not    rax
    7cc0:	cmp    rax,QWORD PTR [rsp+0x30]
    7cc5:	jbe    7278 <__sprintf_chk@plt+0x3598>
    7ccb:	test   r14,r14
    7cce:	je     7478 <__sprintf_chk@plt+0x3798>
    7cd4:	cmp    rdx,rbp
    7cd7:	jbe    7d1b <__sprintf_chk@plt+0x403b>
    7cd9:	sub    rdx,rbp
    7cdc:	mov    rax,rdx
    7cdf:	cmp    r11d,0x30
    7ce3:	je     8999 <__sprintf_chk@plt+0x4cb9>
    7ce9:	xor    ebx,ebx
    7ceb:	cmp    r11d,0x2b
    7cef:	je     8999 <__sprintf_chk@plt+0x4cb9>
    7cf5:	mov    QWORD PTR [rsp+0x40],rbp
    7cfa:	mov    rbp,rbx
    7cfd:	mov    rbx,rdx
    7d00:	mov    rsi,r14
    7d03:	mov    edi,0x20
    7d08:	add    rbp,0x1
    7d0c:	call   3940 <fputc@plt>
    7d11:	cmp    rbx,rbp
    7d14:	jne    7d00 <__sprintf_chk@plt+0x4020>
    7d16:	mov    rbp,QWORD PTR [rsp+0x40]
    7d1b:	cmp    BYTE PTR [rsp+0x28],0x0
    7d20:	je     87e8 <__sprintf_chk@plt+0x4b08>
    7d26:	test   rbp,rbp
    7d29:	je     7478 <__sprintf_chk@plt+0x3798>
    7d2f:	call   36a0 <__ctype_toupper_loc@plt>
    7d34:	add    rbp,r13
    7d37:	mov    rbx,rax
    7d3a:	nop    WORD PTR [rax+rax*1+0x0]
    7d40:	movzx  edx,BYTE PTR [r13+0x0]
    7d45:	mov    rax,QWORD PTR [rbx]
    7d48:	mov    rsi,r14
    7d4b:	add    r13,0x1
    7d4f:	mov    edi,DWORD PTR [rax+rdx*4]
    7d52:	call   3940 <fputc@plt>
    7d57:	cmp    r13,rbp
    7d5a:	jne    7d40 <__sprintf_chk@plt+0x4060>
    7d5c:	jmp    7478 <__sprintf_chk@plt+0x3798>
    7d61:	mov    r12,rbx
    7d64:	xor    edi,edi
    7d66:	mov    BYTE PTR [rsp+0x50],0x0
    7d6b:	mov    esi,0x58
    7d70:	jmp    77d3 <__sprintf_chk@plt+0x3af3>
    7d75:	mov    r12,rbx
    7d78:	xor    edi,edi
    7d7a:	mov    rbx,QWORD PTR [rsp+0x8]
    7d7f:	mov    DWORD PTR [rsp+0x30],0x2
    7d87:	mov    eax,DWORD PTR [rbx+0x18]
    7d8a:	mov    esi,DWORD PTR [rbx+0x1c]
    7d8d:	lea    edx,[rax+0x6]
    7d90:	movsxd rax,edx
    7d93:	mov    ecx,edx
    7d95:	imul   rax,rax,0xffffffff92492493
    7d9c:	sar    ecx,0x1f
    7d9f:	shr    rax,0x20
    7da3:	add    eax,edx
    7da5:	sar    eax,0x2
    7da8:	sub    eax,ecx
    7daa:	lea    ecx,[rax*8+0x0]
    7db1:	sub    ecx,eax
    7db3:	mov    eax,ecx
    7db5:	sub    eax,edx
    7db7:	lea    eax,[rax+rsi*1+0x7]
    7dbb:	mov    esi,0x57
    7dc0:	movsxd rdx,eax
    7dc3:	imul   rdx,rdx,0xffffffff92492493
    7dca:	shr    rdx,0x20
    7dce:	add    edx,eax
    7dd0:	sar    eax,0x1f
    7dd3:	sar    edx,0x2
    7dd6:	sub    edx,eax
    7dd8:	jmp    7988 <__sprintf_chk@plt+0x3ca8>
    7ddd:	mov    r12,rbx
    7de0:	xor    edi,edi
    7de2:	mov    rbx,QWORD PTR [rsp+0x8]
    7de7:	mov    DWORD PTR [rsp+0x30],0x2
    7def:	mov    esi,0x55
    7df4:	mov    eax,DWORD PTR [rbx+0x1c]
    7df7:	sub    eax,DWORD PTR [rbx+0x18]
    7dfa:	add    eax,0x7
    7dfd:	movsxd rdx,eax
    7e00:	imul   rdx,rdx,0xffffffff92492493
    7e07:	shr    rdx,0x20
    7e0b:	add    edx,eax
    7e0d:	sar    eax,0x1f
    7e10:	sar    edx,0x2
    7e13:	sub    edx,eax
    7e15:	jmp    7988 <__sprintf_chk@plt+0x3ca8>
    7e1a:	mov    r12,rbx
    7e1d:	lea    rax,[rip+0x1bb2f]        # 23953 <__sprintf_chk@plt+0x1fc73>
    7e24:	movzx  r13d,BYTE PTR [rsp+0x28]
    7e2a:	mov    ebx,0xffffffff
    7e2f:	mov    QWORD PTR [rsp+0x30],rax
    7e34:	jmp    7850 <__sprintf_chk@plt+0x3b70>
    7e39:	mov    r12,rbx
    7e3c:	xor    edi,edi
    7e3e:	mov    rax,QWORD PTR [rsp+0x8]
    7e43:	mov    DWORD PTR [rsp+0x30],0x2
    7e4b:	mov    esi,0x53
    7e50:	mov    edx,DWORD PTR [rax]
    7e52:	jmp    7988 <__sprintf_chk@plt+0x3ca8>
    7e57:	mov    r12,rbx
    7e5a:	lea    rax,[rip+0x1a355]        # 221b6 <__sprintf_chk@plt+0x1e4d6>
    7e61:	movzx  r13d,BYTE PTR [rsp+0x28]
    7e67:	mov    ebx,0xffffffff
    7e6c:	mov    QWORD PTR [rsp+0x30],rax
    7e71:	jmp    7850 <__sprintf_chk@plt+0x3b70>
    7e76:	mov    r12,rbx
    7e79:	xor    edi,edi
    7e7b:	mov    rax,QWORD PTR [rsp+0x8]
    7e80:	mov    DWORD PTR [rsp+0x30],0x2
    7e88:	mov    esi,0x64
    7e8d:	mov    edx,DWORD PTR [rax+0xc]
    7e90:	jmp    7988 <__sprintf_chk@plt+0x3ca8>
    7e95:	mov    r12,rbx
    7e98:	xor    edi,edi
    7e9a:	mov    BYTE PTR [rsp+0x50],0x0
    7e9f:	mov    esi,0x63
    7ea4:	jmp    77d3 <__sprintf_chk@plt+0x3af3>
    7ea9:	mov    r12,rbx
    7eac:	xor    edi,edi
    7eae:	mov    edx,DWORD PTR [rsp+0x4]
    7eb2:	mov    esi,0x6c
    7eb7:	test   r11d,r11d
    7eba:	mov    eax,0x5f
    7ebf:	mov    DWORD PTR [rsp+0x30],0x2
    7ec7:	cmove  r11d,eax
    7ecb:	jmp    7988 <__sprintf_chk@plt+0x3ca8>
    7ed0:	mov    r12,rbx
    7ed3:	xor    edi,edi
    7ed5:	mov    rax,QWORD PTR [rsp+0x8]
    7eda:	mov    esi,0x6b
    7edf:	mov    edx,DWORD PTR [rax+0x8]
    7ee2:	jmp    7eb7 <__sprintf_chk@plt+0x41d7>
    7ee4:	mov    r12,rbx
    7ee7:	xor    edi,edi
    7ee9:	mov    rax,QWORD PTR [rsp+0x8]
    7eee:	mov    BYTE PTR [rsp+0x40],0x0
    7ef3:	mov    esi,0x6a
    7ef8:	mov    DWORD PTR [rsp+0x30],0x3
    7f00:	mov    eax,DWORD PTR [rax+0x1c]
    7f03:	cmp    eax,0xffffffff
    7f06:	lea    edx,[rax+0x1]
    7f09:	setl   bpl
    7f0d:	setge  al
    7f10:	xor    ecx,ecx
    7f12:	jmp    7640 <__sprintf_chk@plt+0x3960>
    7f17:	mov    r12,rbx
    7f1a:	xor    edi,edi
    7f1c:	mov    rax,QWORD PTR [rsp+0x8]
    7f21:	mov    esi,0x65
    7f26:	mov    edx,DWORD PTR [rax+0xc]
    7f29:	jmp    7eb7 <__sprintf_chk@plt+0x41d7>
    7f2b:	mov    r12,rbx
    7f2e:	xor    edi,edi
    7f30:	xor    r8d,r8d
    7f33:	mov    rax,QWORD PTR [rsp+0x8]
    7f38:	mov    r9d,DWORD PTR [rax+0x20]
    7f3c:	test   r9d,r9d
    7f3f:	js     7227 <__sprintf_chk@plt+0x3547>
    7f45:	mov    r9,QWORD PTR [rax+0x28]
    7f49:	mov    ebp,0x1
    7f4e:	test   r9d,r9d
    7f51:	js     7f66 <__sprintf_chk@plt+0x4286>
    7f53:	mov    ebp,0x0
    7f58:	jne    7f66 <__sprintf_chk@plt+0x4286>
    7f5a:	mov    rax,QWORD PTR [rsp+0x20]
    7f5f:	cmp    BYTE PTR [rax],0x2d
    7f62:	sete   bpl
    7f66:	movsxd rax,r9d
    7f69:	mov    ecx,r9d
    7f6c:	imul   rdx,rax,0xffffffff91a2b3c5
    7f73:	sar    ecx,0x1f
    7f76:	imul   rax,rax,0xffffffff88888889
    7f7d:	shr    rdx,0x20
    7f81:	shr    rax,0x20
    7f85:	add    edx,r9d
    7f88:	add    eax,r9d
    7f8b:	sar    edx,0xb
    7f8e:	sar    eax,0x5
    7f91:	sub    edx,ecx
    7f93:	sub    eax,ecx
    7f95:	movsxd rcx,eax
    7f98:	mov    ebx,eax
    7f9a:	imul   rcx,rcx,0xffffffff88888889
    7fa1:	sar    ebx,0x1f
    7fa4:	shr    rcx,0x20
    7fa8:	add    ecx,eax
    7faa:	sar    ecx,0x5
    7fad:	sub    ecx,ebx
    7faf:	imul   ebx,ecx,0x3c
    7fb2:	mov    ecx,eax
    7fb4:	imul   eax,eax,0x3c
    7fb7:	sub    ecx,ebx
    7fb9:	sub    r9d,eax
    7fbc:	cmp    r8,0x2
    7fc0:	je     8ca6 <__sprintf_chk@plt+0x4fc6>
    7fc6:	ja     89fb <__sprintf_chk@plt+0x4d1b>
    7fcc:	test   r8,r8
    7fcf:	je     8d6c <__sprintf_chk@plt+0x508c>
    7fd5:	imul   edx,edx,0x64
    7fd8:	mov    eax,ebp
    7fda:	mov    BYTE PTR [rsp+0x40],0x1
    7fdf:	mov    DWORD PTR [rsp+0x30],0x6
    7fe7:	xor    eax,0x1
    7fea:	add    edx,ecx
    7fec:	mov    ecx,0x4
    7ff1:	jmp    7640 <__sprintf_chk@plt+0x3960>
    7ff6:	mov    r12,rbx
    7ff9:	xor    edi,edi
    7ffb:	mov    rax,QWORD PTR [rsp+0x8]
    8000:	movsxd rdx,DWORD PTR [rax+0x14]
    8004:	mov    rcx,rdx
    8007:	imul   rdx,rdx,0x51eb851f
    800e:	mov    eax,ecx
    8010:	sar    eax,0x1f
    8013:	sar    rdx,0x25
    8017:	sub    edx,eax
    8019:	imul   eax,edx,0x64
    801c:	mov    edx,ecx
    801e:	sub    edx,eax
    8020:	jns    8032 <__sprintf_chk@plt+0x4352>
    8022:	mov    eax,edx
    8024:	add    edx,0x64
    8027:	neg    eax
    8029:	cmp    ecx,0xfffff893
    802f:	cmovle edx,eax
    8032:	mov    esi,0x79
    8037:	test   r11d,r11d
    803a:	jne    7620 <__sprintf_chk@plt+0x3940>
    8040:	mov    r11d,DWORD PTR [rsp+0x1c]
    8045:	mov    esi,0x79
    804a:	mov    eax,0x1
    804f:	cmp    r11d,0x2b
    8053:	jne    762f <__sprintf_chk@plt+0x394f>
    8059:	mov    DWORD PTR [rsp+0x30],0x2
    8061:	xor    ebp,ebp
    8063:	cmp    r10d,DWORD PTR [rsp+0x30]
    8068:	mov    r11d,0x2b
    806e:	setg   BYTE PTR [rsp+0x40]
    8073:	jmp    763e <__sprintf_chk@plt+0x395e>
    8078:	mov    r12,rbx
    807b:	xor    edi,edi
    807d:	mov    BYTE PTR [rsp+0x50],0x0
    8082:	mov    esi,0x78
    8087:	jmp    77d3 <__sprintf_chk@plt+0x3af3>
    808c:	mov    r12,rbx
    808f:	xor    edi,edi
    8091:	mov    rax,QWORD PTR [rsp+0x8]
    8096:	mov    DWORD PTR [rsp+0x30],0x1
    809e:	mov    esi,0x77
    80a3:	mov    edx,DWORD PTR [rax+0x18]
    80a6:	jmp    7988 <__sprintf_chk@plt+0x3ca8>
    80ab:	mov    r12,rbx
    80ae:	xor    edi,edi
    80b0:	mov    BYTE PTR [rsp+0x50],0x1
    80b5:	movzx  eax,BYTE PTR [rsp+0x50]
    80ba:	test   bpl,bpl
    80bd:	movzx  ebx,BYTE PTR [rsp+0x28]
    80c2:	mov    esi,0x70
    80c7:	cmovne eax,ebp
    80ca:	mov    BYTE PTR [rsp+0x50],al
    80ce:	mov    eax,0x0
    80d3:	cmovne ebx,eax
    80d6:	mov    BYTE PTR [rsp+0x28],bl
    80da:	jmp    77d3 <__sprintf_chk@plt+0x3af3>
    80df:	mov    r12,rbx
    80e2:	xor    edi,edi
    80e4:	mov    rax,QWORD PTR [rsp+0x8]
    80e9:	mov    DWORD PTR [rsp+0x30],0x2
    80f1:	mov    esi,0x4d
    80f6:	mov    edx,DWORD PTR [rax+0x4]
    80f9:	jmp    7988 <__sprintf_chk@plt+0x3ca8>
    80fe:	mov    r12,rbx
    8101:	xor    edi,edi
    8103:	mov    DWORD PTR [rsp+0x30],0x2
    810b:	mov    edx,DWORD PTR [rsp+0x4]
    810f:	mov    esi,0x49
    8114:	jmp    7988 <__sprintf_chk@plt+0x3ca8>
    8119:	mov    r12,rbx
    811c:	mov    eax,0x9
    8121:	test   r10d,r10d
    8124:	mov    ebp,0x9
    8129:	cmovle r10d,eax
    812d:	mov    eax,DWORD PTR [rsp+0x4f8]
    8134:	jmp    815a <__sprintf_chk@plt+0x447a>
    8136:	cs nop WORD PTR [rax+rax*1+0x0]
    8140:	movsxd rdx,eax
    8143:	sar    eax,0x1f
    8146:	sub    ebp,0x1
    8149:	imul   rdx,rdx,0x66666667
    8150:	mov    ecx,eax
    8152:	sar    rdx,0x22
    8156:	mov    eax,edx
    8158:	sub    eax,ecx
    815a:	cmp    ebp,r10d
    815d:	jg     8140 <__sprintf_chk@plt+0x4460>
    815f:	cmp    ebp,0x1
    8162:	jle    8afd <__sprintf_chk@plt+0x4e1d>
    8168:	imul   edx,eax,0xcccccccd
    816e:	add    edx,0x19999998
    8174:	ror    edx,1
    8176:	cmp    edx,0x19999998
    817c:	jbe    8140 <__sprintf_chk@plt+0x4460>
    817e:	movsxd rbx,ebp
    8181:	lea    rsi,[rsp+0x9f]
    8189:	mov    rcx,rbx
    818c:	nop    DWORD PTR [rax+0x0]
    8190:	movsxd rdx,eax
    8193:	mov    edi,eax
    8195:	imul   rdx,rdx,0x66666667
    819c:	sar    edi,0x1f
    819f:	sar    rdx,0x22
    81a3:	sub    edx,edi
    81a5:	lea    edi,[rdx+rdx*4]
    81a8:	add    edi,edi
    81aa:	sub    eax,edi
    81ac:	add    eax,0x30
    81af:	mov    BYTE PTR [rsi+rcx*1],al
    81b2:	sub    rcx,0x1
    81b6:	mov    eax,edx
    81b8:	test   ecx,ecx
    81ba:	jg     8190 <__sprintf_chk@plt+0x44b0>
    81bc:	mov    eax,0x30
    81c1:	test   r11d,r11d
    81c4:	cmove  r11d,eax
    81c8:	mov    rax,r15
    81cb:	not    rax
    81ce:	cmp    rbx,rax
    81d1:	jae    7278 <__sprintf_chk@plt+0x3598>
    81d7:	add    r15,rbx
    81da:	test   r14,r14
    81dd:	je     8252 <__sprintf_chk@plt+0x4572>
    81df:	cmp    BYTE PTR [rsp+0x28],0x0
    81e4:	je     8c75 <__sprintf_chk@plt+0x4f95>
    81ea:	test   rbx,rbx
    81ed:	je     8ee2 <__sprintf_chk@plt+0x5202>
    81f3:	mov    DWORD PTR [rsp+0x50],r10d
    81f8:	mov    DWORD PTR [rsp+0x30],r11d
    81fd:	call   36a0 <__ctype_toupper_loc@plt>
    8202:	mov    r10d,DWORD PTR [rsp+0x50]
    8207:	mov    DWORD PTR [rsp+0x28],ebp
    820b:	lea    rcx,[rsp+0xa0]
    8213:	mov    QWORD PTR [rsp+0x40],r12
    8218:	add    rbx,rcx
    821b:	mov    rbp,rax
    821e:	mov    r12,rcx
    8221:	mov    r13d,r10d
    8224:	movzx  edx,BYTE PTR [r12]
    8229:	mov    rax,QWORD PTR [rbp+0x0]
    822d:	mov    rsi,r14
    8230:	add    r12,0x1
    8234:	mov    edi,DWORD PTR [rax+rdx*4]
    8237:	call   3940 <fputc@plt>
    823c:	cmp    r12,rbx
    823f:	jne    8224 <__sprintf_chk@plt+0x4544>
    8241:	mov    ebp,DWORD PTR [rsp+0x28]
    8245:	mov    r11d,DWORD PTR [rsp+0x30]
    824a:	mov    r10d,r13d
    824d:	mov    r12,QWORD PTR [rsp+0x40]
    8252:	cmp    r11d,0x2d
    8256:	je     726c <__sprintf_chk@plt+0x358c>
    825c:	sub    r10d,ebp
    825f:	js     726c <__sprintf_chk@plt+0x358c>
    8265:	mov    rax,r15
    8268:	movsxd rbx,r10d
    826b:	not    rax
    826e:	cmp    rbx,rax
    8271:	jae    7278 <__sprintf_chk@plt+0x3598>
    8277:	test   r14,r14
    827a:	je     8568 <__sprintf_chk@plt+0x4888>
    8280:	test   rbx,rbx
    8283:	je     7227 <__sprintf_chk@plt+0x3547>
    8289:	cmp    r11d,0x30
    828d:	je     8e29 <__sprintf_chk@plt+0x5149>
    8293:	xor    ebp,ebp
    8295:	cmp    r11d,0x2b
    8299:	je     8e29 <__sprintf_chk@plt+0x5149>
    829f:	mov    rsi,r14
    82a2:	mov    edi,0x20
    82a7:	add    rbp,0x1
    82ab:	call   3940 <fputc@plt>
    82b0:	cmp    rbp,rbx
    82b3:	jne    829f <__sprintf_chk@plt+0x45bf>
    82b5:	add    r15,rbp
    82b8:	jmp    7227 <__sprintf_chk@plt+0x3547>
    82bd:	mov    r12,rbx
    82c0:	xor    edi,edi
    82c2:	mov    rax,QWORD PTR [rsp+0x8]
    82c7:	mov    DWORD PTR [rsp+0x30],0x1
    82cf:	mov    esi,0x75
    82d4:	mov    eax,DWORD PTR [rax+0x18]
    82d7:	lea    edx,[rax+0x6]
    82da:	movsxd rax,edx
    82dd:	mov    ecx,edx
    82df:	imul   rax,rax,0xffffffff92492493
    82e6:	sar    ecx,0x1f
    82e9:	shr    rax,0x20
    82ed:	add    eax,edx
    82ef:	sar    eax,0x2
    82f2:	sub    eax,ecx
    82f4:	lea    ecx,[rax*8+0x0]
    82fb:	sub    ecx,eax
    82fd:	sub    edx,ecx
    82ff:	add    edx,0x1
    8302:	jmp    7988 <__sprintf_chk@plt+0x3ca8>
    8307:	mov    r12,rbx
    830a:	cmp    r11d,0x2d
    830e:	je     8ac3 <__sprintf_chk@plt+0x4de3>
    8314:	test   r10d,r10d
    8317:	js     8ac3 <__sprintf_chk@plt+0x4de3>
    831d:	movsxd rbp,r10d
    8320:	mov    ebx,0x1
    8325:	mov    rax,r15
    8328:	test   rbp,rbp
    832b:	not    rax
    832e:	cmovne rbx,rbp
    8332:	cmp    rbx,rax
    8335:	jae    7278 <__sprintf_chk@plt+0x3598>
    833b:	test   r14,r14
    833e:	je     8568 <__sprintf_chk@plt+0x4888>
    8344:	cmp    r10d,0x1
    8348:	jle    837b <__sprintf_chk@plt+0x469b>
    834a:	sub    rbp,0x1
    834e:	cmp    r11d,0x30
    8352:	je     8d4e <__sprintf_chk@plt+0x506e>
    8358:	xor    r13d,r13d
    835b:	cmp    r11d,0x2b
    835f:	je     8d4e <__sprintf_chk@plt+0x506e>
    8365:	mov    rsi,r14
    8368:	mov    edi,0x20
    836d:	add    r13,0x1
    8371:	call   3940 <fputc@plt>
    8376:	cmp    rbp,r13
    8379:	jne    8365 <__sprintf_chk@plt+0x4685>
    837b:	mov    rsi,r14
    837e:	mov    edi,0x9
    8383:	call   3940 <fputc@plt>
    8388:	jmp    8568 <__sprintf_chk@plt+0x4888>
    838d:	mov    r12,rbx
    8390:	xor    edi,edi
    8392:	mov    rax,QWORD PTR [rsp+0x8]
    8397:	mov    ecx,DWORD PTR [rax+0x14]
    839a:	cmp    ecx,0xfffff894
    83a0:	lea    eax,[rcx+0x76c]
    83a6:	setl   bpl
    83aa:	cmp    eax,0x76c
    83af:	sbb    eax,eax
    83b1:	and    eax,0xffffff9d
    83b4:	add    eax,ecx
    83b6:	movsxd rdx,eax
    83b9:	sar    eax,0x1f
    83bc:	imul   rdx,rdx,0x51eb851f
    83c3:	sar    rdx,0x25
    83c7:	sub    edx,eax
    83c9:	add    edx,0x13
    83cc:	cmp    ecx,0xfffff894
    83d2:	setge  al
    83d5:	test   r11d,r11d
    83d8:	jne    8be0 <__sprintf_chk@plt+0x4f00>
    83de:	cmp    DWORD PTR [rsp+0x1c],0x2b
    83e3:	mov    r11d,DWORD PTR [rsp+0x1c]
    83e8:	je     8bea <__sprintf_chk@plt+0x4f0a>
    83ee:	mov    BYTE PTR [rsp+0x40],0x0
    83f3:	mov    esi,0x43
    83f8:	mov    DWORD PTR [rsp+0x30],0x2
    8400:	jmp    763e <__sprintf_chk@plt+0x395e>
    8405:	mov    r12,rbx
    8408:	xor    edi,edi
    840a:	movzx  eax,BYTE PTR [rsp+0x28]
    840f:	test   bpl,bpl
    8412:	mov    BYTE PTR [rsp+0x50],0x0
    8417:	mov    esi,0x42
    841c:	cmovne eax,ebp
    841f:	mov    BYTE PTR [rsp+0x28],al
    8423:	jmp    77d3 <__sprintf_chk@plt+0x3af3>
    8428:	mov    r12,rbx
    842b:	movzx  eax,BYTE PTR [rsp+0x28]
    8430:	test   bpl,bpl
    8433:	mov    esi,0x41
    8438:	cmovne eax,ebp
    843b:	mov    BYTE PTR [rsp+0x28],al
    843f:	mov    edi,0x2520
    8444:	mov    BYTE PTR [rsp+0x50],0x0
    8449:	lea    rax,[rsp+0x9d]
    8451:	mov    WORD PTR [rsp+0x9b],di
    8459:	jmp    7675 <__sprintf_chk@plt+0x3995>
    845e:	xor    edi,edi
    8460:	movzx  eax,BYTE PTR [rbx+0x1]
    8464:	lea    r12,[rbx+0x1]
    8468:	mov    r8d,0x1
    846e:	cmp    al,0x3a
    8470:	je     87bb <__sprintf_chk@plt+0x4adb>
    8476:	mov    esi,0x3a
    847b:	cmp    al,0x7a
    847d:	je     7f33 <__sprintf_chk@plt+0x4253>
    8483:	jmp    738b <__sprintf_chk@plt+0x36ab>
    8488:	mov    r12,rbx
    848b:	xor    edi,edi
    848d:	mov    rax,QWORD PTR [rsp+0x8]
    8492:	mov    esi,0x71
    8497:	mov    eax,DWORD PTR [rax+0x10]
    849a:	cmp    edi,0x4f
    849d:	je     7651 <__sprintf_chk@plt+0x3971>
    84a3:	lea    edx,[rax+rax*4]
    84a6:	mov    BYTE PTR [rsp+0x40],0x0
    84ab:	xor    ebp,ebp
    84ad:	xor    ecx,ecx
    84af:	lea    edx,[rax+rdx*2]
    84b2:	mov    DWORD PTR [rsp+0x30],0x1
    84ba:	sar    edx,0x5
    84bd:	add    edx,0x1
    84c0:	jmp    7b22 <__sprintf_chk@plt+0x3e42>
    84c5:	mov    r12,rbx
    84c8:	movzx  eax,BYTE PTR [rsp+0x28]
    84cd:	test   bpl,bpl
    84d0:	mov    esi,0x61
    84d5:	cmovne eax,ebp
    84d8:	mov    BYTE PTR [rsp+0x28],al
    84dc:	jmp    843f <__sprintf_chk@plt+0x475f>
    84e1:	mov    r12,rbx
    84e4:	xor    edi,edi
    84e6:	jmp    77ce <__sprintf_chk@plt+0x3aee>
    84eb:	mov    r12,rbx
    84ee:	cmp    r11d,0x2d
    84f2:	je     8ae0 <__sprintf_chk@plt+0x4e00>
    84f8:	test   r10d,r10d
    84fb:	js     8ae0 <__sprintf_chk@plt+0x4e00>
    8501:	movsxd rbp,r10d
    8504:	mov    ebx,0x1
    8509:	mov    rax,r15
    850c:	test   rbp,rbp
    850f:	not    rax
    8512:	cmovne rbx,rbp
    8516:	cmp    rbx,rax
    8519:	jae    7278 <__sprintf_chk@plt+0x3598>
    851f:	test   r14,r14
    8522:	je     8568 <__sprintf_chk@plt+0x4888>
    8524:	cmp    r10d,0x1
    8528:	jle    855b <__sprintf_chk@plt+0x487b>
    852a:	sub    rbp,0x1
    852e:	cmp    r11d,0x30
    8532:	je     8d23 <__sprintf_chk@plt+0x5043>
    8538:	xor    r13d,r13d
    853b:	cmp    r11d,0x2b
    853f:	je     8d23 <__sprintf_chk@plt+0x5043>
    8545:	mov    rsi,r14
    8548:	mov    edi,0x20
    854d:	add    r13,0x1
    8551:	call   3940 <fputc@plt>
    8556:	cmp    rbp,r13
    8559:	jne    8545 <__sprintf_chk@plt+0x4865>
    855b:	mov    rsi,r14
    855e:	mov    edi,0xa
    8563:	call   3940 <fputc@plt>
    8568:	add    r15,rbx
    856b:	jmp    7227 <__sprintf_chk@plt+0x3547>
    8570:	mov    r12,rbx
    8573:	xor    edi,edi
    8575:	mov    BYTE PTR [rsp+0x50],0x0
    857a:	jmp    80b5 <__sprintf_chk@plt+0x43d5>
    857f:	mov    r12,rbx
    8582:	xor    edi,edi
    8584:	mov    rax,QWORD PTR [rsp+0x8]
    8589:	mov    BYTE PTR [rsp+0x40],0x0
    858e:	mov    esi,0x6d
    8593:	mov    DWORD PTR [rsp+0x30],0x2
    859b:	mov    eax,DWORD PTR [rax+0x10]
    859e:	cmp    eax,0xffffffff
    85a1:	lea    edx,[rax+0x1]
    85a4:	setl   bpl
    85a8:	setge  al
    85ab:	xor    ecx,ecx
    85ad:	jmp    7640 <__sprintf_chk@plt+0x3960>
    85b2:	mov    rax,r15
    85b5:	mov    r12,rbx
    85b8:	not    rax
    85bb:	cmp    r11d,0x2d
    85bf:	je     8b0b <__sprintf_chk@plt+0x4e2b>
    85c5:	test   r10d,r10d
    85c8:	js     8b0b <__sprintf_chk@plt+0x4e2b>
    85ce:	movsxd rbp,r10d
    85d1:	mov    ebx,0x1
    85d6:	test   rbp,rbp
    85d9:	cmovne rbx,rbp
    85dd:	cmp    rbx,rax
    85e0:	jae    7278 <__sprintf_chk@plt+0x3598>
    85e6:	test   r14,r14
    85e9:	je     8568 <__sprintf_chk@plt+0x4888>
    85ef:	cmp    r10d,0x1
    85f3:	jle    862b <__sprintf_chk@plt+0x494b>
    85f5:	sub    rbp,0x1
    85f9:	cmp    r11d,0x30
    85fd:	je     8d8a <__sprintf_chk@plt+0x50aa>
    8603:	xor    r13d,r13d
    8606:	cmp    r11d,0x2b
    860a:	je     8d8a <__sprintf_chk@plt+0x50aa>
    8610:	mov    rsi,r14
    8613:	mov    edi,0x20
    8618:	add    r13,0x1
    861c:	call   3940 <fputc@plt>
    8621:	cmp    rbp,r13
    8624:	jne    8610 <__sprintf_chk@plt+0x4930>
    8626:	movsx  edi,BYTE PTR [r12]
    862b:	mov    rsi,r14
    862e:	call   3940 <fputc@plt>
    8633:	jmp    8568 <__sprintf_chk@plt+0x4888>
    8638:	test   edi,edi
    863a:	je     84c8 <__sprintf_chk@plt+0x47e8>
    8640:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    8645:	cmp    edi,0x45
    8648:	jne    811c <__sprintf_chk@plt+0x443c>
    864e:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    8653:	cmp    edi,0x4f
    8656:	jne    7e9a <__sprintf_chk@plt+0x41ba>
    865c:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    8661:	test   edi,edi
    8663:	je     781f <__sprintf_chk@plt+0x3b3f>
    8669:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    866e:	test   edi,edi
    8670:	je     794e <__sprintf_chk@plt+0x3c6e>
    8676:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    867b:	cmp    edi,0x45
    867e:	jne    840a <__sprintf_chk@plt+0x472a>
    8684:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    8689:	test   edi,edi
    868b:	je     842b <__sprintf_chk@plt+0x474b>
    8691:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    8696:	cmp    edi,0x4f
    8699:	jne    807d <__sprintf_chk@plt+0x439d>
    869f:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    86a4:	cmp    edi,0x4f
    86a7:	jne    7d66 <__sprintf_chk@plt+0x4086>
    86ad:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    86b2:	cmp    edi,0x45
    86b5:	jne    7de2 <__sprintf_chk@plt+0x4102>
    86bb:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    86c0:	cmp    edi,0x45
    86c3:	jne    7e3e <__sprintf_chk@plt+0x415e>
    86c9:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    86ce:	cmp    edi,0x45
    86d1:	jne    8392 <__sprintf_chk@plt+0x46b2>
    86d7:	jmp    7651 <__sprintf_chk@plt+0x3971>
    86dc:	mov    rax,r15
    86df:	not    rax
    86e2:	test   edi,edi
    86e4:	jne    8da8 <__sprintf_chk@plt+0x50c8>
    86ea:	mov    edi,0x25
    86ef:	jmp    85bb <__sprintf_chk@plt+0x48db>
    86f4:	cmp    edi,0x45
    86f7:	jne    8091 <__sprintf_chk@plt+0x43b1>
    86fd:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    8702:	cmp    edi,0x45
    8705:	jne    7ffb <__sprintf_chk@plt+0x431b>
    870b:	jmp    7651 <__sprintf_chk@plt+0x3971>
    8710:	cmp    edi,0x45
    8713:	jne    796f <__sprintf_chk@plt+0x3c8f>
    8719:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    871e:	cmp    edi,0x45
    8721:	jne    80e4 <__sprintf_chk@plt+0x4404>
    8727:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    872c:	cmp    edi,0x45
    872f:	jne    8103 <__sprintf_chk@plt+0x4423>
    8735:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    873a:	cmp    edi,0x45
    873d:	je     7651 <__sprintf_chk@plt+0x3971>
    8743:	cmp    edi,0x4f
    8746:	jne    7acc <__sprintf_chk@plt+0x3dec>
    874c:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    8751:	cmp    edi,0x45
    8754:	jne    7e7b <__sprintf_chk@plt+0x419b>
    875a:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    875f:	cmp    edi,0x45
    8762:	jne    7ee9 <__sprintf_chk@plt+0x4209>
    8768:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    876d:	cmp    edi,0x45
    8770:	jne    7f1c <__sprintf_chk@plt+0x423c>
    8776:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    877b:	cmp    edi,0x45
    877e:	jne    8584 <__sprintf_chk@plt+0x48a4>
    8784:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    8789:	cmp    edi,0x45
    878c:	jne    7eae <__sprintf_chk@plt+0x41ce>
    8792:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    8797:	cmp    edi,0x45
    879a:	jne    7ed5 <__sprintf_chk@plt+0x41f5>
    87a0:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    87a5:	cmp    edi,0x45
    87a8:	jne    7d7a <__sprintf_chk@plt+0x409a>
    87ae:	jmp    7390 <__sprintf_chk@plt+0x36b0>
    87b3:	mov    rbx,r12
    87b6:	jmp    8460 <__sprintf_chk@plt+0x4780>
    87bb:	add    r8,0x1
    87bf:	movzx  eax,BYTE PTR [rbx+r8*1]
    87c4:	lea    r12,[rbx+r8*1]
    87c8:	cmp    al,0x3a
    87ca:	jne    8476 <__sprintf_chk@plt+0x4796>
    87d0:	jmp    87bb <__sprintf_chk@plt+0x4adb>
    87d2:	nop    WORD PTR [rax+rax*1+0x0]
    87d8:	mov    QWORD PTR [rsp+0x30],r13
    87dd:	xor    ebx,ebx
    87df:	jmp    76e9 <__sprintf_chk@plt+0x3a09>
    87e4:	nop    DWORD PTR [rax+0x0]
    87e8:	mov    rcx,r14
    87eb:	mov    edx,0x1
    87f0:	mov    rsi,rbp
    87f3:	mov    rdi,r13
    87f6:	call   3c40 <fwrite@plt>
    87fb:	jmp    7478 <__sprintf_chk@plt+0x3798>
    8800:	mov    QWORD PTR [rsp+0x30],rbp
    8805:	xor    ebx,ebx
    8807:	jmp    73da <__sprintf_chk@plt+0x36fa>
    880c:	nop    DWORD PTR [rax+0x0]
    8810:	mov    eax,0x1
    8815:	mov    r11d,0x30
    881b:	jmp    7c70 <__sprintf_chk@plt+0x3f90>
    8820:	mov    BYTE PTR [rsp+0x30],0x2d
    8825:	lea    edx,[r10-0x1]
    8829:	sub    edx,ebx
    882b:	mov    ebp,edx
    882d:	test   edx,edx
    882f:	jle    88a0 <__sprintf_chk@plt+0x4bc0>
    8831:	test   al,al
    8833:	je     88a0 <__sprintf_chk@plt+0x4bc0>
    8835:	cmp    r11d,0x5f
    8839:	je     897b <__sprintf_chk@plt+0x4c9b>
    883f:	cmp    r15,0xfffffffffffffffd
    8843:	ja     7278 <__sprintf_chk@plt+0x3598>
    8849:	test   r14,r14
    884c:	je     886f <__sprintf_chk@plt+0x4b8f>
    884e:	movsx  edi,BYTE PTR [rsp+0x30]
    8853:	mov    rsi,r14
    8856:	mov    DWORD PTR [rsp+0x50],r10d
    885b:	mov    DWORD PTR [rsp+0x40],r11d
    8860:	call   3940 <fputc@plt>
    8865:	mov    r10d,DWORD PTR [rsp+0x50]
    886a:	mov    r11d,DWORD PTR [rsp+0x40]
    886f:	movsxd rbp,ebx
    8872:	add    r15,0x1
    8876:	xor    edx,edx
    8878:	mov    QWORD PTR [rsp+0x30],rbp
    887d:	cmp    r11d,0x2d
    8881:	je     7cba <__sprintf_chk@plt+0x3fda>
    8887:	sub    r10d,0x1
    888b:	js     7cba <__sprintf_chk@plt+0x3fda>
    8891:	jmp    7ca8 <__sprintf_chk@plt+0x3fc8>
    8896:	cs nop WORD PTR [rax+rax*1+0x0]
    88a0:	xor    ebp,ebp
    88a2:	jmp    8835 <__sprintf_chk@plt+0x4b55>
    88a4:	cmp    r11d,0x2d
    88a8:	jne    7ca8 <__sprintf_chk@plt+0x3fc8>
    88ae:	mov    QWORD PTR [rsp+0x30],rbp
    88b3:	xor    edx,edx
    88b5:	jmp    7cba <__sprintf_chk@plt+0x3fda>
    88ba:	mov    BYTE PTR [rsp+0x28],0x1
    88bf:	jmp    72e4 <__sprintf_chk@plt+0x3604>
    88c4:	mov    ebp,eax
    88c6:	jmp    72e4 <__sprintf_chk@plt+0x3604>
    88cb:	lea    rdi,[rsp+0xa1]
    88d3:	mov    rcx,r14
    88d6:	mov    edx,0x1
    88db:	mov    rsi,r13
    88de:	call   3c40 <fwrite@plt>
    88e3:	jmp    7478 <__sprintf_chk@plt+0x3798>
    88e8:	test   r13,r13
    88eb:	je     7478 <__sprintf_chk@plt+0x3798>
    88f1:	call   3cc0 <__ctype_tolower_loc@plt>
    88f6:	lea    rbx,[rsp+0xa1]
    88fe:	add    rbp,QWORD PTR [rsp+0x48]
    8903:	mov    r13,rax
    8906:	cs nop WORD PTR [rax+rax*1+0x0]
    8910:	movzx  edx,BYTE PTR [rbx]
    8913:	mov    rax,QWORD PTR [r13+0x0]
    8917:	mov    rsi,r14
    891a:	add    rbx,0x1
    891e:	mov    edi,DWORD PTR [rax+rdx*4]
    8921:	call   3940 <fputc@plt>
    8926:	cmp    rbx,rbp
    8929:	jne    8910 <__sprintf_chk@plt+0x4c30>
    892b:	jmp    7478 <__sprintf_chk@plt+0x3798>
    8930:	mov    QWORD PTR [rsp+0x28],rax
    8935:	xor    ebp,ebp
    8937:	jmp    78b1 <__sprintf_chk@plt+0x3bd1>
    893c:	mov    BYTE PTR [rsp+0x30],0x2b
    8941:	jmp    8825 <__sprintf_chk@plt+0x4b45>
    8946:	test   rbx,rbx
    8949:	je     774b <__sprintf_chk@plt+0x3a6b>
    894f:	xor    edx,edx
    8951:	mov    QWORD PTR [rsp+0x40],rbp
    8956:	mov    rbp,rdx
    8959:	nop    DWORD PTR [rax+0x0]
    8960:	mov    rsi,r14
    8963:	mov    edi,0x30
    8968:	add    rbp,0x1
    896c:	call   3940 <fputc@plt>
    8971:	cmp    rbx,rbp
    8974:	jne    8960 <__sprintf_chk@plt+0x4c80>
    8976:	jmp    7746 <__sprintf_chk@plt+0x3a66>
    897b:	movsxd rax,ebp
    897e:	mov    QWORD PTR [rsp+0x40],rax
    8983:	test   r14,r14
    8986:	jne    8a30 <__sprintf_chk@plt+0x4d50>
    898c:	add    r15,QWORD PTR [rsp+0x40]
    8991:	sub    r10d,ebp
    8994:	jmp    883f <__sprintf_chk@plt+0x4b5f>
    8999:	xor    ebx,ebx
    899b:	mov    QWORD PTR [rsp+0x40],rbp
    89a0:	mov    rbp,rbx
    89a3:	mov    rbx,rax
    89a6:	cs nop WORD PTR [rax+rax*1+0x0]
    89b0:	mov    rsi,r14
    89b3:	mov    edi,0x30
    89b8:	add    rbp,0x1
    89bc:	call   3940 <fputc@plt>
    89c1:	cmp    rbx,rbp
    89c4:	jne    89b0 <__sprintf_chk@plt+0x4cd0>
    89c6:	jmp    7d16 <__sprintf_chk@plt+0x4036>
    89cb:	test   rbx,rbx
    89ce:	je     743b <__sprintf_chk@plt+0x375b>
    89d4:	xor    edx,edx
    89d6:	mov    QWORD PTR [rsp+0x40],rbp
    89db:	mov    rbp,rdx
    89de:	xchg   ax,ax
    89e0:	mov    rsi,r14
    89e3:	mov    edi,0x30
    89e8:	add    rbp,0x1
    89ec:	call   3940 <fputc@plt>
    89f1:	cmp    rbx,rbp
    89f4:	jne    89e0 <__sprintf_chk@plt+0x4d00>
    89f6:	jmp    7436 <__sprintf_chk@plt+0x3756>
    89fb:	cmp    r8,0x3
    89ff:	jne    8d41 <__sprintf_chk@plt+0x5061>
    8a05:	test   r9d,r9d
    8a08:	jne    8ca6 <__sprintf_chk@plt+0x4fc6>
    8a0e:	test   ecx,ecx
    8a10:	jne    7fd5 <__sprintf_chk@plt+0x42f5>
    8a16:	mov    eax,ebp
    8a18:	mov    BYTE PTR [rsp+0x40],0x1
    8a1d:	mov    DWORD PTR [rsp+0x30],0x3
    8a25:	xor    eax,0x1
    8a28:	jmp    7640 <__sprintf_chk@plt+0x3960>
    8a2d:	nop    DWORD PTR [rax]
    8a30:	test   ebp,ebp
    8a32:	je     898c <__sprintf_chk@plt+0x4cac>
    8a38:	mov    DWORD PTR [rsp+0x50],r11d
    8a3d:	xor    ecx,ecx
    8a3f:	mov    DWORD PTR [rsp+0x54],r10d
    8a44:	mov    DWORD PTR [rsp+0x48],ebp
    8a48:	mov    rbp,QWORD PTR [rsp+0x40]
    8a4d:	mov    QWORD PTR [rsp+0x58],rbx
    8a52:	mov    rbx,rcx
    8a55:	nop    DWORD PTR [rax]
    8a58:	mov    rsi,r14
    8a5b:	mov    edi,0x20
    8a60:	add    rbx,0x1
    8a64:	call   3940 <fputc@plt>
    8a69:	cmp    rbx,rbp
    8a6c:	jne    8a58 <__sprintf_chk@plt+0x4d78>
    8a6e:	mov    r11d,DWORD PTR [rsp+0x50]
    8a73:	mov    ebp,DWORD PTR [rsp+0x48]
    8a77:	mov    r10d,DWORD PTR [rsp+0x54]
    8a7c:	mov    rbx,QWORD PTR [rsp+0x58]
    8a81:	jmp    898c <__sprintf_chk@plt+0x4cac>
    8a86:	mov    QWORD PTR [rsp+0x30],r13
    8a8b:	xor    r10d,r10d
    8a8e:	jmp    79fc <__sprintf_chk@plt+0x3d1c>
    8a93:	mov    DWORD PTR [rsp+0x50],r11d
    8a98:	xor    ebp,ebp
    8a9a:	mov    DWORD PTR [rsp+0x40],ebx
    8a9e:	mov    rbx,rax
    8aa1:	nop    DWORD PTR [rax+0x0]
    8aa8:	mov    rsi,r14
    8aab:	mov    edi,0x30
    8ab0:	add    rbp,0x1
    8ab4:	call   3940 <fputc@plt>
    8ab9:	cmp    rbx,rbp
    8abc:	jne    8aa8 <__sprintf_chk@plt+0x4dc8>
    8abe:	jmp    790e <__sprintf_chk@plt+0x3c2e>
    8ac3:	cmp    r15,0xfffffffffffffffd
    8ac7:	ja     7278 <__sprintf_chk@plt+0x3598>
    8acd:	mov    ebx,0x1
    8ad2:	test   r14,r14
    8ad5:	jne    837b <__sprintf_chk@plt+0x469b>
    8adb:	jmp    8568 <__sprintf_chk@plt+0x4888>
    8ae0:	cmp    r15,0xfffffffffffffffd
    8ae4:	ja     7278 <__sprintf_chk@plt+0x3598>
    8aea:	mov    ebx,0x1
    8aef:	test   r14,r14
    8af2:	jne    855b <__sprintf_chk@plt+0x487b>
    8af8:	jmp    8568 <__sprintf_chk@plt+0x4888>
    8afd:	movsxd rbx,ebp
    8b00:	je     817e <__sprintf_chk@plt+0x449e>
    8b06:	jmp    81bc <__sprintf_chk@plt+0x44dc>
    8b0b:	cmp    r15,0xfffffffffffffffd
    8b0f:	ja     7278 <__sprintf_chk@plt+0x3598>
    8b15:	mov    ebx,0x1
    8b1a:	test   r14,r14
    8b1d:	jne    862b <__sprintf_chk@plt+0x494b>
    8b23:	jmp    8568 <__sprintf_chk@plt+0x4888>
    8b28:	mov    DWORD PTR [rsp+0x30],0x4
    8b30:	mov    ecx,0x270f
    8b35:	cmp    r11d,0x2b
    8b39:	jne    8eb0 <__sprintf_chk@plt+0x51d0>
    8b3f:	mov    BYTE PTR [rsp+0x40],0x1
    8b44:	mov    r11d,0x2b
    8b4a:	cmp    ecx,edx
    8b4c:	jb     763e <__sprintf_chk@plt+0x395e>
    8b52:	jmp    8063 <__sprintf_chk@plt+0x4383>
    8b57:	lea    eax,[r12-0x1]
    8b5c:	mov    edx,0x16d
    8b61:	test   al,0x3
    8b63:	jne    8b96 <__sprintf_chk@plt+0x4eb6>
    8b65:	imul   edx,eax,0xc28f5c29
    8b6b:	add    edx,0x51eb850
    8b71:	ror    edx,0x2
    8b74:	mov    ebp,edx
    8b76:	mov    edx,0x16e
    8b7b:	cmp    ebp,0x28f5c28
    8b81:	ja     8b96 <__sprintf_chk@plt+0x4eb6>
    8b83:	cdq    
    8b84:	mov    ebp,0x190
    8b89:	idiv   ebp
    8b8b:	cmp    edx,0x1
    8b8e:	mov    edx,0x16e
    8b93:	adc    edx,0xffffffff
    8b96:	add    r8d,edx
    8b99:	mov    edx,r8d
    8b9c:	sub    edx,r9d
    8b9f:	add    edx,0x17e
    8ba5:	movsxd rax,edx
    8ba8:	mov    r9d,edx
    8bab:	sub    r8d,edx
    8bae:	imul   rax,rax,0xffffffff92492493
    8bb5:	sar    r9d,0x1f
    8bb9:	shr    rax,0x20
    8bbd:	add    eax,edx
    8bbf:	sar    eax,0x2
    8bc2:	sub    eax,r9d
    8bc5:	lea    r9d,[rax*8+0x0]
    8bcd:	sub    r9d,eax
    8bd0:	lea    eax,[r8+r9*1+0x3]
    8bd5:	mov    r8d,0xffffffff
    8bdb:	jmp    75b9 <__sprintf_chk@plt+0x38d9>
    8be0:	cmp    r11d,0x2b
    8be4:	jne    83ee <__sprintf_chk@plt+0x470e>
    8bea:	mov    DWORD PTR [rsp+0x30],0x2
    8bf2:	mov    esi,0x43
    8bf7:	mov    ecx,0x63
    8bfc:	jmp    8b3f <__sprintf_chk@plt+0x4e5f>
    8c01:	movsxd rdx,eax
    8c04:	mov    DWORD PTR [rsp+0x30],0x2
    8c0c:	mov    r12,rbx
    8c0f:	imul   rdx,rdx,0xffffffff92492493
    8c16:	shr    rdx,0x20
    8c1a:	add    edx,eax
    8c1c:	sar    eax,0x1f
    8c1f:	sar    edx,0x2
    8c22:	sub    edx,eax
    8c24:	add    edx,0x1
    8c27:	jmp    7988 <__sprintf_chk@plt+0x3ca8>
    8c2c:	mov    eax,0xfffff894
    8c31:	lea    edx,[rcx+r8*1+0x76c]
    8c39:	mov    r12,rbx
    8c3c:	sub    eax,r8d
    8c3f:	cmp    ecx,eax
    8c41:	setl   bpl
    8c45:	setge  al
    8c48:	test   r11d,r11d
    8c4b:	jne    8b28 <__sprintf_chk@plt+0x4e48>
    8c51:	mov    r11d,DWORD PTR [rsp+0x1c]
    8c56:	mov    r12,rbx
    8c59:	cmp    r11d,0x2b
    8c5d:	je     8ed0 <__sprintf_chk@plt+0x51f0>
    8c63:	mov    BYTE PTR [rsp+0x40],0x0
    8c68:	mov    DWORD PTR [rsp+0x30],0x4
    8c70:	jmp    763e <__sprintf_chk@plt+0x395e>
    8c75:	mov    rcx,r14
    8c78:	mov    edx,0x1
    8c7d:	mov    rsi,rbx
    8c80:	mov    DWORD PTR [rsp+0x30],r10d
    8c85:	lea    rdi,[rsp+0xa0]
    8c8d:	mov    DWORD PTR [rsp+0x28],r11d
    8c92:	call   3c40 <fwrite@plt>
    8c97:	mov    r10d,DWORD PTR [rsp+0x30]
    8c9c:	mov    r11d,DWORD PTR [rsp+0x28]
    8ca1:	jmp    8252 <__sprintf_chk@plt+0x4572>
    8ca6:	imul   ecx,ecx,0x64
    8ca9:	mov    eax,ebp
    8cab:	mov    BYTE PTR [rsp+0x40],0x1
    8cb0:	imul   edx,edx,0x2710
    8cb6:	mov    DWORD PTR [rsp+0x30],0x9
    8cbe:	xor    eax,0x1
    8cc1:	add    edx,ecx
    8cc3:	mov    ecx,0x14
    8cc8:	add    edx,r9d
    8ccb:	jmp    7640 <__sprintf_chk@plt+0x3960>
    8cd0:	mov    rdi,QWORD PTR [rsp+0x20]
    8cd5:	mov    rcx,r14
    8cd8:	mov    edx,0x1
    8cdd:	mov    rsi,r13
    8ce0:	call   3c40 <fwrite@plt>
    8ce5:	jmp    7478 <__sprintf_chk@plt+0x3798>
    8cea:	test   r13,r13
    8ced:	je     7478 <__sprintf_chk@plt+0x3798>
    8cf3:	call   3cc0 <__ctype_tolower_loc@plt>
    8cf8:	mov    rbx,QWORD PTR [rsp+0x20]
    8cfd:	mov    rbp,rax
    8d00:	add    r13,rbx
    8d03:	movzx  edx,BYTE PTR [rbx]
    8d06:	mov    rax,QWORD PTR [rbp+0x0]
    8d0a:	mov    rsi,r14
    8d0d:	add    rbx,0x1
    8d11:	mov    edi,DWORD PTR [rax+rdx*4]
    8d14:	call   3940 <fputc@plt>
    8d19:	cmp    rbx,r13
    8d1c:	jne    8d03 <__sprintf_chk@plt+0x5023>
    8d1e:	jmp    7478 <__sprintf_chk@plt+0x3798>
    8d23:	xor    r13d,r13d
    8d26:	mov    rsi,r14
    8d29:	mov    edi,0x30
    8d2e:	add    r13,0x1
    8d32:	call   3940 <fputc@plt>
    8d37:	cmp    rbp,r13
    8d3a:	jne    8d26 <__sprintf_chk@plt+0x5046>
    8d3c:	jmp    855b <__sprintf_chk@plt+0x487b>
    8d41:	movzx  edx,BYTE PTR [r12]
    8d46:	mov    r13,r12
    8d49:	jmp    7800 <__sprintf_chk@plt+0x3b20>
    8d4e:	xor    r13d,r13d
    8d51:	mov    rsi,r14
    8d54:	mov    edi,0x30
    8d59:	add    r13,0x1
    8d5d:	call   3940 <fputc@plt>
    8d62:	cmp    rbp,r13
    8d65:	jne    8d51 <__sprintf_chk@plt+0x5071>
    8d67:	jmp    837b <__sprintf_chk@plt+0x469b>
    8d6c:	imul   edx,edx,0x64
    8d6f:	mov    eax,ebp
    8d71:	mov    BYTE PTR [rsp+0x40],0x1
    8d76:	mov    DWORD PTR [rsp+0x30],0x5
    8d7e:	xor    eax,0x1
    8d81:	add    edx,ecx
    8d83:	xor    ecx,ecx
    8d85:	jmp    7640 <__sprintf_chk@plt+0x3960>
    8d8a:	xor    r13d,r13d
    8d8d:	mov    rsi,r14
    8d90:	mov    edi,0x30
    8d95:	add    r13,0x1
    8d99:	call   3940 <fputc@plt>
    8d9e:	cmp    rbp,r13
    8da1:	jne    8d8d <__sprintf_chk@plt+0x50ad>
    8da3:	jmp    8626 <__sprintf_chk@plt+0x4946>
    8da8:	mov    r13,r12
    8dab:	mov    ebp,0x1
    8db0:	jmp    73b5 <__sprintf_chk@plt+0x36d5>
    8db5:	mov    eax,0xfffff894
    8dba:	sub    eax,r8d
    8dbd:	cmp    ecx,eax
    8dbf:	jge    8ebf <__sprintf_chk@plt+0x51df>
    8dc5:	neg    edx
    8dc7:	test   r11d,r11d
    8dca:	jne    761d <__sprintf_chk@plt+0x393d>
    8dd0:	mov    r11d,DWORD PTR [rsp+0x1c]
    8dd5:	mov    r12,rbx
    8dd8:	mov    eax,0x1
    8ddd:	cmp    r11d,0x2b
    8de1:	jne    762f <__sprintf_chk@plt+0x394f>
    8de7:	jmp    8059 <__sprintf_chk@plt+0x4379>
    8dec:	test   rbx,rbx
    8def:	je     7a7a <__sprintf_chk@plt+0x3d9a>
    8df5:	mov    rax,r13
    8df8:	xor    edx,edx
    8dfa:	mov    BYTE PTR [rsp+0x40],bpl
    8dff:	mov    r13,r12
    8e02:	mov    rbp,rbx
    8e05:	mov    r12,r14
    8e08:	mov    rbx,rdx
    8e0b:	mov    r14,rax
    8e0e:	mov    rsi,r12
    8e11:	mov    edi,0x30
    8e16:	add    rbx,0x1
    8e1a:	call   3940 <fputc@plt>
    8e1f:	cmp    rbp,rbx
    8e22:	jne    8e0e <__sprintf_chk@plt+0x512e>
    8e24:	jmp    7a69 <__sprintf_chk@plt+0x3d89>
    8e29:	xor    ebp,ebp
    8e2b:	mov    rsi,r14
    8e2e:	mov    edi,0x30
    8e33:	add    rbp,0x1
    8e37:	call   3940 <fputc@plt>
    8e3c:	cmp    rbp,rbx
    8e3f:	jne    8e2b <__sprintf_chk@plt+0x514b>
    8e41:	jmp    82b5 <__sprintf_chk@plt+0x45d5>
    8e46:	mov    eax,DWORD PTR [rsp+0x4f8]
    8e4d:	mov    ecx,r13d
    8e50:	xor    edi,edi
    8e52:	xor    ebp,ebp
    8e54:	lea    rsi,[rip+0x19361]        # 221bc <__sprintf_chk@plt+0x1e4dc>
    8e5b:	mov    r9d,0x4
    8e61:	mov    r8d,0x2b
    8e67:	mov    ebx,0x4
    8e6c:	push   rax
    8e6d:	push   QWORD PTR [rsp+0x18]
    8e71:	mov    rdx,QWORD PTR [rsp+0x18]
    8e76:	call   7160 <__sprintf_chk@plt+0x3480>
    8e7b:	pop    rdx
    8e7c:	pop    rcx
    8e7d:	lea    rsi,[rip+0x19338]        # 221bc <__sprintf_chk@plt+0x1e4dc>
    8e84:	mov    QWORD PTR [rsp+0x28],rax
    8e89:	mov    r11d,0x2b
    8e8f:	mov    QWORD PTR [rsp+0x30],rsi
    8e94:	jmp    78b1 <__sprintf_chk@plt+0x3bd1>
    8e99:	mov    DWORD PTR [rsp+0x30],0x4
    8ea1:	mov    esi,0x59
    8ea6:	mov    ecx,0x270f
    8eab:	jmp    8b3f <__sprintf_chk@plt+0x4e5f>
    8eb0:	mov    BYTE PTR [rsp+0x40],0x0
    8eb5:	jmp    763e <__sprintf_chk@plt+0x395e>
    8eba:	call   3840 <__stack_chk_fail@plt>
    8ebf:	add    edx,0x64
    8ec2:	test   r11d,r11d
    8ec5:	je     8dd0 <__sprintf_chk@plt+0x50f0>
    8ecb:	jmp    761d <__sprintf_chk@plt+0x393d>
    8ed0:	mov    DWORD PTR [rsp+0x30],0x4
    8ed8:	mov    ecx,0x270f
    8edd:	jmp    8b3f <__sprintf_chk@plt+0x4e5f>
    8ee2:	cmp    r11d,0x2d
    8ee6:	je     726c <__sprintf_chk@plt+0x358c>
    8eec:	mov    rax,r15
    8eef:	movsxd rbx,r10d
    8ef2:	not    rax
    8ef5:	cmp    rbx,rax
    8ef8:	jb     8289 <__sprintf_chk@plt+0x45a9>
    8efe:	jmp    7278 <__sprintf_chk@plt+0x3598>
    8f03:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    8f0e:	xchg   ax,ax
    8f10:	endbr64 
    8f14:	sub    rsp,0x8
    8f18:	mov    r9d,0xffffffff
    8f1e:	push   r8
    8f20:	xor    r8d,r8d
    8f23:	push   rcx
    8f24:	xor    ecx,ecx
    8f26:	call   7160 <__sprintf_chk@plt+0x3480>
    8f2b:	add    rsp,0x18
    8f2f:	ret    
    8f30:	endbr64 
    8f34:	push   r15
    8f36:	push   r14
    8f38:	push   r13
    8f3a:	mov    r13,rsi
    8f3d:	push   r12
    8f3f:	mov    r12,rdx
    8f42:	push   rbp
    8f43:	mov    rbp,rdi
    8f46:	mov    rdi,rdx
    8f49:	push   rbx
    8f4a:	sub    rsp,0x18
    8f4e:	call   3a20 <fileno@plt>
    8f53:	mov    r14d,eax
    8f56:	call   36f0 <__errno_location@plt>
    8f5b:	mov    rbx,rax
    8f5e:	cmp    r14d,0x1
    8f62:	je     9090 <__sprintf_chk@plt+0x53b0>
    8f68:	cmp    r14d,0x2
    8f6c:	je     9100 <__sprintf_chk@plt+0x5420>
    8f72:	test   r14d,r14d
    8f75:	je     90a1 <__sprintf_chk@plt+0x53c1>
    8f7b:	mov    esi,0x2
    8f80:	mov    edi,0x2
    8f85:	call   3870 <dup2@plt>
    8f8a:	cmp    eax,0x2
    8f8d:	setne  r14b
    8f91:	mov    esi,0x1
    8f96:	mov    edi,0x1
    8f9b:	call   3870 <dup2@plt>
    8fa0:	cmp    eax,0x1
    8fa3:	mov    DWORD PTR [rsp+0xc],eax
    8fa7:	setne  r15b
    8fab:	xor    esi,esi
    8fad:	xor    edi,edi
    8faf:	call   3870 <dup2@plt>
    8fb4:	test   eax,eax
    8fb6:	jne    9060 <__sprintf_chk@plt+0x5380>
    8fbc:	cmp    DWORD PTR [rsp+0xc],0x1
    8fc1:	mov    BYTE PTR [rsp+0xb],0x0
    8fc6:	je     9170 <__sprintf_chk@plt+0x5490>
    8fcc:	xor    esi,esi
    8fce:	xor    eax,eax
    8fd0:	lea    rdi,[rip+0x1ad69]        # 23d40 <__sprintf_chk@plt+0x20060>
    8fd7:	call   3ba0 <open@plt>
    8fdc:	cmp    eax,0x1
    8fdf:	jne    9110 <__sprintf_chk@plt+0x5430>
    8fe5:	mov    r15d,0x1
    8feb:	test   r14b,r14b
    8fee:	je     90ac <__sprintf_chk@plt+0x53cc>
    8ff4:	xor    esi,esi
    8ff6:	xor    eax,eax
    8ff8:	lea    rdi,[rip+0x1ad41]        # 23d40 <__sprintf_chk@plt+0x20060>
    8fff:	call   3ba0 <open@plt>
    9004:	cmp    eax,0x2
    9007:	je     90ac <__sprintf_chk@plt+0x53cc>
    900d:	test   eax,eax
    900f:	jns    9180 <__sprintf_chk@plt+0x54a0>
    9015:	mov    ebp,DWORD PTR [rbx]
    9017:	xor    r12d,r12d
    901a:	mov    edi,0x2
    901f:	call   3920 <close@plt>
    9024:	test   r15b,r15b
    9027:	je     90d1 <__sprintf_chk@plt+0x53f1>
    902d:	nop    DWORD PTR [rax]
    9030:	mov    edi,0x1
    9035:	call   3920 <close@plt>
    903a:	cmp    BYTE PTR [rsp+0xb],0x0
    903f:	je     90dc <__sprintf_chk@plt+0x53fc>
    9045:	xor    edi,edi
    9047:	call   3920 <close@plt>
    904c:	test   r12,r12
    904f:	jne    90e5 <__sprintf_chk@plt+0x5405>
    9055:	mov    DWORD PTR [rbx],ebp
    9057:	jmp    90e5 <__sprintf_chk@plt+0x5405>
    905c:	nop    DWORD PTR [rax+0x0]
    9060:	xor    esi,esi
    9062:	xor    eax,eax
    9064:	lea    rdi,[rip+0x1acd5]        # 23d40 <__sprintf_chk@plt+0x20060>
    906b:	call   3ba0 <open@plt>
    9070:	test   eax,eax
    9072:	je     9160 <__sprintf_chk@plt+0x5480>
    9078:	test   eax,eax
    907a:	jns    91a0 <__sprintf_chk@plt+0x54c0>
    9080:	mov    BYTE PTR [rsp+0xb],0x1
    9085:	mov    ebp,DWORD PTR [rbx]
    9087:	xor    r12d,r12d
    908a:	jmp    90bf <__sprintf_chk@plt+0x53df>
    908c:	nop    DWORD PTR [rax+0x0]
    9090:	xor    esi,esi
    9092:	xor    edi,edi
    9094:	call   3870 <dup2@plt>
    9099:	test   eax,eax
    909b:	jne    9138 <__sprintf_chk@plt+0x5458>
    90a1:	mov    BYTE PTR [rsp+0xb],0x0
    90a6:	xor    r14d,r14d
    90a9:	xor    r15d,r15d
    90ac:	mov    rdx,r12
    90af:	mov    rdi,rbp
    90b2:	mov    rsi,r13
    90b5:	call   3910 <freopen@plt>
    90ba:	mov    ebp,DWORD PTR [rbx]
    90bc:	mov    r12,rax
    90bf:	test   r14b,r14b
    90c2:	jne    901a <__sprintf_chk@plt+0x533a>
    90c8:	test   r15b,r15b
    90cb:	jne    9030 <__sprintf_chk@plt+0x5350>
    90d1:	cmp    BYTE PTR [rsp+0xb],0x0
    90d6:	jne    9045 <__sprintf_chk@plt+0x5365>
    90dc:	test   r12,r12
    90df:	je     9055 <__sprintf_chk@plt+0x5375>
    90e5:	add    rsp,0x18
    90e9:	mov    rax,r12
    90ec:	pop    rbx
    90ed:	pop    rbp
    90ee:	pop    r12
    90f0:	pop    r13
    90f2:	pop    r14
    90f4:	pop    r15
    90f6:	ret    
    90f7:	nop    WORD PTR [rax+rax*1+0x0]
    9100:	xor    r14d,r14d
    9103:	jmp    8f91 <__sprintf_chk@plt+0x52b1>
    9108:	nop    DWORD PTR [rax+rax*1+0x0]
    9110:	test   eax,eax
    9112:	jns    91d0 <__sprintf_chk@plt+0x54f0>
    9118:	mov    ebp,DWORD PTR [rbx]
    911a:	xor    r12d,r12d
    911d:	test   r14b,r14b
    9120:	je     9030 <__sprintf_chk@plt+0x5350>
    9126:	mov    edi,0x2
    912b:	call   3920 <close@plt>
    9130:	jmp    9030 <__sprintf_chk@plt+0x5350>
    9135:	nop    DWORD PTR [rax]
    9138:	xor    esi,esi
    913a:	xor    eax,eax
    913c:	lea    rdi,[rip+0x1abfd]        # 23d40 <__sprintf_chk@plt+0x20060>
    9143:	call   3ba0 <open@plt>
    9148:	test   eax,eax
    914a:	jne    91c0 <__sprintf_chk@plt+0x54e0>
    914c:	mov    BYTE PTR [rsp+0xb],0x1
    9151:	xor    r14d,r14d
    9154:	xor    r15d,r15d
    9157:	jmp    90ac <__sprintf_chk@plt+0x53cc>
    915c:	nop    DWORD PTR [rax+0x0]
    9160:	cmp    DWORD PTR [rsp+0xc],0x1
    9165:	mov    BYTE PTR [rsp+0xb],0x1
    916a:	jne    8fcc <__sprintf_chk@plt+0x52ec>
    9170:	xor    r15d,r15d
    9173:	jmp    8feb <__sprintf_chk@plt+0x530b>
    9178:	nop    DWORD PTR [rax+rax*1+0x0]
    9180:	mov    edi,eax
    9182:	mov    ebp,0x9
    9187:	call   3920 <close@plt>
    918c:	mov    DWORD PTR [rbx],0x9
    9192:	jmp    9017 <__sprintf_chk@plt+0x5337>
    9197:	nop    WORD PTR [rax+rax*1+0x0]
    91a0:	mov    edi,eax
    91a2:	mov    ebp,0x9
    91a7:	xor    r12d,r12d
    91aa:	call   3920 <close@plt>
    91af:	mov    DWORD PTR [rbx],0x9
    91b5:	mov    BYTE PTR [rsp+0xb],0x1
    91ba:	jmp    90bf <__sprintf_chk@plt+0x53df>
    91bf:	nop
    91c0:	xor    r14d,r14d
    91c3:	xor    r15d,r15d
    91c6:	jmp    9078 <__sprintf_chk@plt+0x5398>
    91cb:	nop    DWORD PTR [rax+rax*1+0x0]
    91d0:	mov    edi,eax
    91d2:	mov    ebp,0x9
    91d7:	call   3920 <close@plt>
    91dc:	mov    DWORD PTR [rbx],0x9
    91e2:	jmp    911a <__sprintf_chk@plt+0x543a>
    91e7:	nop    WORD PTR [rax+rax*1+0x0]
    91f0:	endbr64 
    91f4:	mov    rax,rdi
    91f7:	xor    edx,edx
    91f9:	ror    rax,0x3
    91fd:	div    rsi
    9200:	mov    rax,rdx
    9203:	ret    
    9204:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    920f:	nop
    9210:	endbr64 
    9214:	cmp    rsi,rdi
    9217:	sete   al
    921a:	ret    
    921b:	nop    DWORD PTR [rax+rax*1+0x0]
    9220:	mov    rax,QWORD PTR [rdi+0x28]
    9224:	lea    rdx,[rip+0x1ab95]        # 23dc0 <__sprintf_chk@plt+0x200e0>
    922b:	cmp    rax,rdx
    922e:	je     92a0 <__sprintf_chk@plt+0x55c0>
    9230:	movss  xmm0,DWORD PTR [rax+0x8]
    9235:	comiss xmm0,DWORD PTR [rip+0x1ab98]        # 23dd4 <__sprintf_chk@plt+0x200f4>
    923c:	jbe    928f <__sprintf_chk@plt+0x55af>
    923e:	movss  xmm1,DWORD PTR [rip+0x1ab92]        # 23dd8 <__sprintf_chk@plt+0x200f8>
    9246:	comiss xmm1,xmm0
    9249:	jbe    928f <__sprintf_chk@plt+0x55af>
    924b:	movss  xmm1,DWORD PTR [rax+0xc]
    9250:	comiss xmm1,DWORD PTR [rip+0x1ab85]        # 23ddc <__sprintf_chk@plt+0x200fc>
    9257:	jbe    928f <__sprintf_chk@plt+0x55af>
    9259:	movss  xmm1,DWORD PTR [rax]
    925d:	comiss xmm1,DWORD PTR [rip+0x1ab7c]        # 23de0 <__sprintf_chk@plt+0x20100>
    9264:	jb     928f <__sprintf_chk@plt+0x55af>
    9266:	addss  xmm1,DWORD PTR [rip+0x1ab66]        # 23dd4 <__sprintf_chk@plt+0x200f4>
    926e:	movss  xmm2,DWORD PTR [rax+0x4]
    9273:	comiss xmm2,xmm1
    9276:	jbe    928f <__sprintf_chk@plt+0x55af>
    9278:	movss  xmm3,DWORD PTR [rip+0x1ab64]        # 23de4 <__sprintf_chk@plt+0x20104>
    9280:	comiss xmm3,xmm2
    9283:	jb     928f <__sprintf_chk@plt+0x55af>
    9285:	comiss xmm0,xmm1
    9288:	mov    eax,0x1
    928d:	ja     92a5 <__sprintf_chk@plt+0x55c5>
    928f:	mov    QWORD PTR [rdi+0x28],rdx
    9293:	xor    eax,eax
    9295:	ret    
    9296:	cs nop WORD PTR [rax+rax*1+0x0]
    92a0:	mov    eax,0x1
    92a5:	ret    
    92a6:	cs nop WORD PTR [rax+rax*1+0x0]
    92b0:	cmp    BYTE PTR [rsi+0x10],0x0
    92b4:	jne    9300 <__sprintf_chk@plt+0x5620>
    92b6:	test   rdi,rdi
    92b9:	js     93b3 <__sprintf_chk@plt+0x56d3>
    92bf:	pxor   xmm0,xmm0
    92c3:	cvtsi2ss xmm0,rdi
    92c8:	xor    r8d,r8d
    92cb:	divss  xmm0,DWORD PTR [rsi+0x8]
    92d0:	comiss xmm0,DWORD PTR [rip+0x1ab11]        # 23de8 <__sprintf_chk@plt+0x20108>
    92d7:	jae    93af <__sprintf_chk@plt+0x56cf>
    92dd:	comiss xmm0,DWORD PTR [rip+0x1ab08]        # 23dec <__sprintf_chk@plt+0x2010c>
    92e4:	jb     93d1 <__sprintf_chk@plt+0x56f1>
    92ea:	subss  xmm0,DWORD PTR [rip+0x1aafa]        # 23dec <__sprintf_chk@plt+0x2010c>
    92f2:	cvttss2si rdi,xmm0
    92f7:	btc    rdi,0x3f
    92fc:	nop    DWORD PTR [rax+0x0]
    9300:	cmp    rdi,0xa
    9304:	mov    r8d,0xa
    930a:	movabs r9,0xaaaaaaaaaaaaaaab
    9314:	cmovae r8,rdi
    9318:	or     r8,0x1
    931c:	cmp    r8,0xffffffffffffffff
    9320:	je     938f <__sprintf_chk@plt+0x56af>
    9322:	nop    WORD PTR [rax+rax*1+0x0]
    9328:	mov    rax,r8
    932b:	mul    r9
    932e:	mov    rax,rdx
    9331:	and    rdx,0xfffffffffffffffe
    9335:	shr    rax,1
    9338:	add    rdx,rax
    933b:	mov    rax,r8
    933e:	sub    rax,rdx
    9341:	cmp    r8,0x9
    9345:	jbe    9380 <__sprintf_chk@plt+0x56a0>
    9347:	test   rax,rax
    934a:	je     9385 <__sprintf_chk@plt+0x56a5>
    934c:	mov    edi,0x10
    9351:	mov    esi,0x9
    9356:	mov    ecx,0x3
    935b:	jmp    9369 <__sprintf_chk@plt+0x5689>
    935d:	nop    DWORD PTR [rax]
    9360:	add    rdi,0x8
    9364:	test   rdx,rdx
    9367:	je     9385 <__sprintf_chk@plt+0x56a5>
    9369:	add    rcx,0x2
    936d:	mov    rax,r8
    9370:	xor    edx,edx
    9372:	add    rsi,rdi
    9375:	div    rcx
    9378:	mov    rax,rdx
    937b:	cmp    rsi,r8
    937e:	jb     9360 <__sprintf_chk@plt+0x5680>
    9380:	test   rax,rax
    9383:	jne    9396 <__sprintf_chk@plt+0x56b6>
    9385:	add    r8,0x2
    9389:	cmp    r8,0xffffffffffffffff
    938d:	jne    9328 <__sprintf_chk@plt+0x5648>
    938f:	xor    r8d,r8d
    9392:	mov    rax,r8
    9395:	ret    
    9396:	mov    rax,r8
    9399:	shr    rax,0x3d
    939d:	setne  al
    93a0:	bt     r8,0x3c
    93a5:	movzx  eax,al
    93a8:	jb     938f <__sprintf_chk@plt+0x56af>
    93aa:	test   rax,rax
    93ad:	jne    938f <__sprintf_chk@plt+0x56af>
    93af:	mov    rax,r8
    93b2:	ret    
    93b3:	mov    rax,rdi
    93b6:	and    edi,0x1
    93b9:	pxor   xmm0,xmm0
    93bd:	shr    rax,1
    93c0:	or     rax,rdi
    93c3:	cvtsi2ss xmm0,rax
    93c8:	addss  xmm0,xmm0
    93cc:	jmp    92c8 <__sprintf_chk@plt+0x55e8>
    93d1:	cvttss2si rdi,xmm0
    93d6:	jmp    9300 <__sprintf_chk@plt+0x5620>
    93db:	nop    DWORD PTR [rax+rax*1+0x0]
    93e0:	push   r14
    93e2:	mov    r14,rdx
    93e5:	push   r13
    93e7:	mov    r13,rsi
    93ea:	push   r12
    93ec:	mov    r12d,ecx
    93ef:	push   rbp
    93f0:	mov    rbp,rdi
    93f3:	push   rbx
    93f4:	mov    rsi,QWORD PTR [rdi+0x10]
    93f8:	mov    rdi,r13
    93fb:	call   QWORD PTR [rbp+0x30]
    93fe:	cmp    rax,QWORD PTR [rbp+0x10]
    9402:	jae    3cf0 <__sprintf_chk@plt+0x10>
    9408:	mov    rbx,rax
    940b:	shl    rbx,0x4
    940f:	add    rbx,QWORD PTR [rbp+0x0]
    9413:	mov    QWORD PTR [r14],rbx
    9416:	mov    rsi,QWORD PTR [rbx]
    9419:	test   rsi,rsi
    941c:	je     948f <__sprintf_chk@plt+0x57af>
    941e:	cmp    rsi,r13
    9421:	je     94e0 <__sprintf_chk@plt+0x5800>
    9427:	mov    rdi,r13
    942a:	call   QWORD PTR [rbp+0x38]
    942d:	test   al,al
    942f:	je     9486 <__sprintf_chk@plt+0x57a6>
    9431:	mov    rax,QWORD PTR [rbx]
    9434:	test   r12b,r12b
    9437:	je     9491 <__sprintf_chk@plt+0x57b1>
    9439:	mov    rdx,QWORD PTR [rbx+0x8]
    943d:	test   rdx,rdx
    9440:	je     94d0 <__sprintf_chk@plt+0x57f0>
    9446:	movdqu xmm0,XMMWORD PTR [rdx]
    944a:	movups XMMWORD PTR [rbx],xmm0
    944d:	mov    QWORD PTR [rdx],0x0
    9454:	mov    rcx,QWORD PTR [rbp+0x48]
    9458:	mov    QWORD PTR [rdx+0x8],rcx
    945c:	pop    rbx
    945d:	mov    QWORD PTR [rbp+0x48],rdx
    9461:	pop    rbp
    9462:	pop    r12
    9464:	pop    r13
    9466:	pop    r14
    9468:	ret    
    9469:	nop    DWORD PTR [rax+0x0]
    9470:	mov    rsi,QWORD PTR [rax]
    9473:	cmp    rsi,r13
    9476:	je     94a0 <__sprintf_chk@plt+0x57c0>
    9478:	mov    rdi,r13
    947b:	call   QWORD PTR [rbp+0x38]
    947e:	test   al,al
    9480:	jne    94a0 <__sprintf_chk@plt+0x57c0>
    9482:	mov    rbx,QWORD PTR [rbx+0x8]
    9486:	mov    rax,QWORD PTR [rbx+0x8]
    948a:	test   rax,rax
    948d:	jne    9470 <__sprintf_chk@plt+0x5790>
    948f:	xor    eax,eax
    9491:	pop    rbx
    9492:	pop    rbp
    9493:	pop    r12
    9495:	pop    r13
    9497:	pop    r14
    9499:	ret    
    949a:	nop    WORD PTR [rax+rax*1+0x0]
    94a0:	mov    rdx,QWORD PTR [rbx+0x8]
    94a4:	mov    rax,QWORD PTR [rdx]
    94a7:	test   r12b,r12b
    94aa:	je     9491 <__sprintf_chk@plt+0x57b1>
    94ac:	mov    rcx,QWORD PTR [rdx+0x8]
    94b0:	mov    QWORD PTR [rbx+0x8],rcx
    94b4:	mov    QWORD PTR [rdx],0x0
    94bb:	mov    rcx,QWORD PTR [rbp+0x48]
    94bf:	mov    QWORD PTR [rdx+0x8],rcx
    94c3:	pop    rbx
    94c4:	mov    QWORD PTR [rbp+0x48],rdx
    94c8:	pop    rbp
    94c9:	pop    r12
    94cb:	pop    r13
    94cd:	pop    r14
    94cf:	ret    
    94d0:	mov    QWORD PTR [rbx],0x0
    94d7:	jmp    9491 <__sprintf_chk@plt+0x57b1>
    94d9:	nop    DWORD PTR [rax+0x0]
    94e0:	mov    rax,rsi
    94e3:	jmp    9434 <__sprintf_chk@plt+0x5754>
    94e8:	nop    DWORD PTR [rax+rax*1+0x0]
    94f0:	push   r15
    94f2:	push   r14
    94f4:	mov    r14,rdi
    94f7:	push   r13
    94f9:	push   r12
    94fb:	mov    r12d,edx
    94fe:	push   rbp
    94ff:	mov    rbp,rsi
    9502:	push   rbx
    9503:	sub    rsp,0x8
    9507:	mov    rbx,QWORD PTR [rsi]
    950a:	cmp    rbx,QWORD PTR [rsi+0x8]
    950e:	jb     9526 <__sprintf_chk@plt+0x5846>
    9510:	jmp    9612 <__sprintf_chk@plt+0x5932>
    9515:	nop    DWORD PTR [rax]
    9518:	add    rbx,0x10
    951c:	cmp    QWORD PTR [rbp+0x8],rbx
    9520:	jbe    9612 <__sprintf_chk@plt+0x5932>
    9526:	mov    r15,QWORD PTR [rbx]
    9529:	test   r15,r15
    952c:	je     9518 <__sprintf_chk@plt+0x5838>
    952e:	mov    r13,QWORD PTR [rbx+0x8]
    9532:	test   r13,r13
    9535:	je     95a1 <__sprintf_chk@plt+0x58c1>
    9537:	mov    rsi,QWORD PTR [r14+0x10]
    953b:	jmp    9554 <__sprintf_chk@plt+0x5874>
    953d:	nop    DWORD PTR [rax]
    9540:	mov    rcx,QWORD PTR [rax+0x8]
    9544:	mov    QWORD PTR [r13+0x8],rcx
    9548:	mov    QWORD PTR [rax+0x8],r13
    954c:	test   rdx,rdx
    954f:	je     959e <__sprintf_chk@plt+0x58be>
    9551:	mov    r13,rdx
    9554:	mov    r15,QWORD PTR [r13+0x0]
    9558:	mov    rdi,r15
    955b:	call   QWORD PTR [r14+0x30]
    955f:	mov    rsi,QWORD PTR [r14+0x10]
    9563:	cmp    rax,rsi
    9566:	jae    3cf5 <__sprintf_chk@plt+0x15>
    956c:	shl    rax,0x4
    9570:	add    rax,QWORD PTR [r14]
    9573:	mov    rdx,QWORD PTR [r13+0x8]
    9577:	cmp    QWORD PTR [rax],0x0
    957b:	jne    9540 <__sprintf_chk@plt+0x5860>
    957d:	mov    QWORD PTR [rax],r15
    9580:	mov    rax,QWORD PTR [r14+0x48]
    9584:	add    QWORD PTR [r14+0x18],0x1
    9589:	mov    QWORD PTR [r13+0x0],0x0
    9591:	mov    QWORD PTR [r13+0x8],rax
    9595:	mov    QWORD PTR [r14+0x48],r13
    9599:	test   rdx,rdx
    959c:	jne    9551 <__sprintf_chk@plt+0x5871>
    959e:	mov    r15,QWORD PTR [rbx]
    95a1:	mov    QWORD PTR [rbx+0x8],0x0
    95a9:	test   r12b,r12b
    95ac:	jne    9518 <__sprintf_chk@plt+0x5838>
    95b2:	mov    rsi,QWORD PTR [r14+0x10]
    95b6:	mov    rdi,r15
    95b9:	call   QWORD PTR [r14+0x30]
    95bd:	mov    r13,rax
    95c0:	cmp    rax,QWORD PTR [r14+0x10]
    95c4:	jae    3cf5 <__sprintf_chk@plt+0x15>
    95ca:	shl    r13,0x4
    95ce:	add    r13,QWORD PTR [r14]
    95d1:	cmp    QWORD PTR [r13+0x0],0x0
    95d6:	je     9630 <__sprintf_chk@plt+0x5950>
    95d8:	mov    rax,QWORD PTR [r14+0x48]
    95dc:	test   rax,rax
    95df:	je     963b <__sprintf_chk@plt+0x595b>
    95e1:	mov    rdx,QWORD PTR [rax+0x8]
    95e5:	mov    QWORD PTR [r14+0x48],rdx
    95e9:	mov    rdx,QWORD PTR [r13+0x8]
    95ed:	mov    QWORD PTR [rax],r15
    95f0:	mov    QWORD PTR [rax+0x8],rdx
    95f4:	mov    QWORD PTR [r13+0x8],rax
    95f8:	mov    QWORD PTR [rbx],0x0
    95ff:	add    rbx,0x10
    9603:	sub    QWORD PTR [rbp+0x18],0x1
    9608:	cmp    QWORD PTR [rbp+0x8],rbx
    960c:	ja     9526 <__sprintf_chk@plt+0x5846>
    9612:	add    rsp,0x8
    9616:	mov    eax,0x1
    961b:	pop    rbx
    961c:	pop    rbp
    961d:	pop    r12
    961f:	pop    r13
    9621:	pop    r14
    9623:	pop    r15
    9625:	ret    
    9626:	cs nop WORD PTR [rax+rax*1+0x0]
    9630:	mov    QWORD PTR [r13+0x0],r15
    9634:	add    QWORD PTR [r14+0x18],0x1
    9639:	jmp    95f8 <__sprintf_chk@plt+0x5918>
    963b:	mov    edi,0x10
    9640:	call   3a70 <malloc@plt>
    9645:	test   rax,rax
    9648:	jne    95e9 <__sprintf_chk@plt+0x5909>
    964a:	add    rsp,0x8
    964e:	xor    eax,eax
    9650:	pop    rbx
    9651:	pop    rbp
    9652:	pop    r12
    9654:	pop    r13
    9656:	pop    r14
    9658:	pop    r15
    965a:	ret    
    965b:	nop    DWORD PTR [rax+rax*1+0x0]
    9660:	endbr64 
    9664:	mov    rax,QWORD PTR [rdi+0x10]
    9668:	ret    
    9669:	nop    DWORD PTR [rax+0x0]
    9670:	endbr64 
    9674:	mov    rax,QWORD PTR [rdi+0x18]
    9678:	ret    
    9679:	nop    DWORD PTR [rax+0x0]
    9680:	endbr64 
    9684:	mov    rax,QWORD PTR [rdi+0x20]
    9688:	ret    
    9689:	nop    DWORD PTR [rax+0x0]
    9690:	endbr64 
    9694:	mov    rcx,QWORD PTR [rdi]
    9697:	mov    rsi,QWORD PTR [rdi+0x8]
    969b:	xor    r8d,r8d
    969e:	cmp    rcx,rsi
    96a1:	jb     96b1 <__sprintf_chk@plt+0x59d1>
    96a3:	jmp    96e5 <__sprintf_chk@plt+0x5a05>
    96a5:	nop    DWORD PTR [rax]
    96a8:	add    rcx,0x10
    96ac:	cmp    rcx,rsi
    96af:	jae    96e5 <__sprintf_chk@plt+0x5a05>
    96b1:	cmp    QWORD PTR [rcx],0x0
    96b5:	je     96a8 <__sprintf_chk@plt+0x59c8>
    96b7:	mov    rax,QWORD PTR [rcx+0x8]
    96bb:	mov    edx,0x1
    96c0:	test   rax,rax
    96c3:	je     96d5 <__sprintf_chk@plt+0x59f5>
    96c5:	nop    DWORD PTR [rax]
    96c8:	mov    rax,QWORD PTR [rax+0x8]
    96cc:	add    rdx,0x1
    96d0:	test   rax,rax
    96d3:	jne    96c8 <__sprintf_chk@plt+0x59e8>
    96d5:	cmp    r8,rdx
    96d8:	cmovb  r8,rdx
    96dc:	add    rcx,0x10
    96e0:	cmp    rcx,rsi
    96e3:	jb     96b1 <__sprintf_chk@plt+0x59d1>
    96e5:	mov    rax,r8
    96e8:	ret    
    96e9:	nop    DWORD PTR [rax+0x0]
    96f0:	endbr64 
    96f4:	mov    rcx,QWORD PTR [rdi]
    96f7:	mov    rsi,QWORD PTR [rdi+0x8]
    96fb:	mov    r8,rdi
    96fe:	xor    edx,edx
    9700:	xor    edi,edi
    9702:	cmp    rcx,rsi
    9705:	jb     9719 <__sprintf_chk@plt+0x5a39>
    9707:	jmp    9746 <__sprintf_chk@plt+0x5a66>
    9709:	nop    DWORD PTR [rax+0x0]
    9710:	add    rcx,0x10
    9714:	cmp    rcx,rsi
    9717:	jae    9746 <__sprintf_chk@plt+0x5a66>
    9719:	cmp    QWORD PTR [rcx],0x0
    971d:	je     9710 <__sprintf_chk@plt+0x5a30>
    971f:	mov    rax,QWORD PTR [rcx+0x8]
    9723:	add    rdi,0x1
    9727:	add    rdx,0x1
    972b:	test   rax,rax
    972e:	je     9710 <__sprintf_chk@plt+0x5a30>
    9730:	mov    rax,QWORD PTR [rax+0x8]
    9734:	add    rdx,0x1
    9738:	test   rax,rax
    973b:	jne    9730 <__sprintf_chk@plt+0x5a50>
    973d:	add    rcx,0x10
    9741:	cmp    rcx,rsi
    9744:	jb     9719 <__sprintf_chk@plt+0x5a39>
    9746:	xor    eax,eax
    9748:	cmp    QWORD PTR [r8+0x18],rdi
    974c:	je     974f <__sprintf_chk@plt+0x5a6f>
    974e:	ret    
    974f:	cmp    QWORD PTR [r8+0x20],rdx
    9753:	sete   al
    9756:	ret    
    9757:	nop    WORD PTR [rax+rax*1+0x0]
    9760:	endbr64 
    9764:	push   r13
    9766:	push   r12
    9768:	xor    r12d,r12d
    976b:	push   rbp
    976c:	mov    rbp,rsi
    976f:	push   rbx
    9770:	sub    rsp,0x8
    9774:	mov    rcx,QWORD PTR [rdi]
    9777:	mov    rsi,QWORD PTR [rdi+0x8]
    977b:	mov    r8,QWORD PTR [rdi+0x20]
    977f:	mov    rbx,QWORD PTR [rdi+0x10]
    9783:	mov    r13,QWORD PTR [rdi+0x18]
    9787:	cmp    rcx,rsi
    978a:	jb     9799 <__sprintf_chk@plt+0x5ab9>
    978c:	jmp    97cd <__sprintf_chk@plt+0x5aed>
    978e:	xchg   ax,ax
    9790:	add    rcx,0x10
    9794:	cmp    rsi,rcx
    9797:	jbe    97cd <__sprintf_chk@plt+0x5aed>
    9799:	cmp    QWORD PTR [rcx],0x0
    979d:	je     9790 <__sprintf_chk@plt+0x5ab0>
    979f:	mov    rax,QWORD PTR [rcx+0x8]
    97a3:	mov    edx,0x1
    97a8:	test   rax,rax
    97ab:	je     97bd <__sprintf_chk@plt+0x5add>
    97ad:	nop    DWORD PTR [rax]
    97b0:	mov    rax,QWORD PTR [rax+0x8]
    97b4:	add    rdx,0x1
    97b8:	test   rax,rax
    97bb:	jne    97b0 <__sprintf_chk@plt+0x5ad0>
    97bd:	cmp    r12,rdx
    97c0:	cmovb  r12,rdx
    97c4:	add    rcx,0x10
    97c8:	cmp    rsi,rcx
    97cb:	ja     9799 <__sprintf_chk@plt+0x5ab9>
    97cd:	mov    rcx,r8
    97d0:	lea    rdx,[rip+0x1a573]        # 23d4a <__sprintf_chk@plt+0x2006a>
    97d7:	mov    rdi,rbp
    97da:	xor    eax,eax
    97dc:	mov    esi,0x1
    97e1:	call   3c50 <__fprintf_chk@plt>
    97e6:	xor    eax,eax
    97e8:	mov    rcx,rbx
    97eb:	mov    esi,0x1
    97f0:	lea    rdx,[rip+0x1a56b]        # 23d62 <__sprintf_chk@plt+0x20082>
    97f7:	mov    rdi,rbp
    97fa:	call   3c50 <__fprintf_chk@plt>
    97ff:	test   r13,r13
    9802:	js     9870 <__sprintf_chk@plt+0x5b90>
    9804:	pxor   xmm0,xmm0
    9808:	cvtsi2sd xmm0,r13
    980d:	mulsd  xmm0,QWORD PTR [rip+0x1a5db]        # 23df0 <__sprintf_chk@plt+0x20110>
    9815:	test   rbx,rbx
    9818:	js     9899 <__sprintf_chk@plt+0x5bb9>
    981a:	pxor   xmm1,xmm1
    981e:	cvtsi2sd xmm1,rbx
    9823:	divsd  xmm0,xmm1
    9827:	mov    rcx,r13
    982a:	mov    rdi,rbp
    982d:	mov    esi,0x1
    9832:	lea    rdx,[rip+0x1a55f]        # 23d98 <__sprintf_chk@plt+0x200b8>
    9839:	mov    eax,0x1
    983e:	call   3c50 <__fprintf_chk@plt>
    9843:	add    rsp,0x8
    9847:	mov    rcx,r12
    984a:	mov    rdi,rbp
    984d:	pop    rbx
    984e:	lea    rdx,[rip+0x1a525]        # 23d7a <__sprintf_chk@plt+0x2009a>
    9855:	pop    rbp
    9856:	mov    esi,0x1
    985b:	pop    r12
    985d:	xor    eax,eax
    985f:	pop    r13
    9861:	jmp    3c50 <__fprintf_chk@plt>
    9866:	cs nop WORD PTR [rax+rax*1+0x0]
    9870:	mov    rax,r13
    9873:	mov    rdx,r13
    9876:	pxor   xmm0,xmm0
    987a:	shr    rax,1
    987d:	and    edx,0x1
    9880:	or     rax,rdx
    9883:	cvtsi2sd xmm0,rax
    9888:	addsd  xmm0,xmm0
    988c:	mulsd  xmm0,QWORD PTR [rip+0x1a55c]        # 23df0 <__sprintf_chk@plt+0x20110>
    9894:	test   rbx,rbx
    9897:	jns    981a <__sprintf_chk@plt+0x5b3a>
    9899:	mov    rax,rbx
    989c:	and    ebx,0x1
    989f:	pxor   xmm1,xmm1
    98a3:	shr    rax,1
    98a6:	or     rax,rbx
    98a9:	cvtsi2sd xmm1,rax
    98ae:	addsd  xmm1,xmm1
    98b2:	jmp    9823 <__sprintf_chk@plt+0x5b43>
    98b7:	nop    WORD PTR [rax+rax*1+0x0]
    98c0:	endbr64 
    98c4:	push   r12
    98c6:	mov    r12,rsi
    98c9:	push   rbp
    98ca:	mov    rbp,rdi
    98cd:	push   rbx
    98ce:	mov    rsi,QWORD PTR [rdi+0x10]
    98d2:	mov    rdi,r12
    98d5:	call   QWORD PTR [rbp+0x30]
    98d8:	cmp    rax,QWORD PTR [rbp+0x10]
    98dc:	jae    3cfa <__sprintf_chk@plt+0x1a>
    98e2:	mov    rbx,rax
    98e5:	shl    rbx,0x4
    98e9:	add    rbx,QWORD PTR [rbp+0x0]
    98ed:	mov    rsi,QWORD PTR [rbx]
    98f0:	test   rsi,rsi
    98f3:	jne    9903 <__sprintf_chk@plt+0x5c23>
    98f5:	jmp    991b <__sprintf_chk@plt+0x5c3b>
    98f7:	nop    WORD PTR [rax+rax*1+0x0]
    9900:	mov    rsi,QWORD PTR [rbx]
    9903:	cmp    rsi,r12
    9906:	je     992b <__sprintf_chk@plt+0x5c4b>
    9908:	mov    rdi,r12
    990b:	call   QWORD PTR [rbp+0x38]
    990e:	test   al,al
    9910:	jne    9928 <__sprintf_chk@plt+0x5c48>
    9912:	mov    rbx,QWORD PTR [rbx+0x8]
    9916:	test   rbx,rbx
    9919:	jne    9900 <__sprintf_chk@plt+0x5c20>
    991b:	pop    rbx
    991c:	xor    eax,eax
    991e:	pop    rbp
    991f:	pop    r12
    9921:	ret    
    9922:	nop    WORD PTR [rax+rax*1+0x0]
    9928:	mov    r12,QWORD PTR [rbx]
    992b:	mov    rax,r12
    992e:	pop    rbx
    992f:	pop    rbp
    9930:	pop    r12
    9932:	ret    
    9933:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    993e:	xchg   ax,ax
    9940:	endbr64 
    9944:	cmp    QWORD PTR [rdi+0x20],0x0
    9949:	je     9980 <__sprintf_chk@plt+0x5ca0>
    994b:	sub    rsp,0x8
    994f:	mov    rax,QWORD PTR [rdi]
    9952:	mov    rdx,QWORD PTR [rdi+0x8]
    9956:	cmp    rax,rdx
    9959:	jb     9969 <__sprintf_chk@plt+0x5c89>
    995b:	jmp    3cff <__sprintf_chk@plt+0x1f>
    9960:	add    rax,0x10
    9964:	cmp    rax,rdx
    9967:	jae    9987 <__sprintf_chk@plt+0x5ca7>
    9969:	mov    r8,QWORD PTR [rax]
    996c:	test   r8,r8
    996f:	je     9960 <__sprintf_chk@plt+0x5c80>
    9971:	mov    rax,r8
    9974:	add    rsp,0x8
    9978:	ret    
    9979:	nop    DWORD PTR [rax+0x0]
    9980:	xor    r8d,r8d
    9983:	mov    rax,r8
    9986:	ret    
    9987:	jmp    3cff <__sprintf_chk@plt+0x1f>
    998c:	nop    DWORD PTR [rax+0x0]
    9990:	endbr64 
    9994:	push   rbp
    9995:	mov    rbp,rdi
    9998:	push   rbx
    9999:	mov    rbx,rsi
    999c:	sub    rsp,0x8
    99a0:	mov    rsi,QWORD PTR [rdi+0x10]
    99a4:	mov    rdi,rbx
    99a7:	call   QWORD PTR [rbp+0x30]
    99aa:	cmp    rax,QWORD PTR [rbp+0x10]
    99ae:	jae    3d04 <__sprintf_chk@plt+0x24>
    99b4:	mov    rdx,rax
    99b7:	shl    rdx,0x4
    99bb:	add    rdx,QWORD PTR [rbp+0x0]
    99bf:	mov    rax,rdx
    99c2:	jmp    99cd <__sprintf_chk@plt+0x5ced>
    99c4:	nop    DWORD PTR [rax+0x0]
    99c8:	test   rax,rax
    99cb:	je     99de <__sprintf_chk@plt+0x5cfe>
    99cd:	mov    rcx,QWORD PTR [rax]
    99d0:	mov    rax,QWORD PTR [rax+0x8]
    99d4:	cmp    rcx,rbx
    99d7:	jne    99c8 <__sprintf_chk@plt+0x5ce8>
    99d9:	test   rax,rax
    99dc:	jne    9a08 <__sprintf_chk@plt+0x5d28>
    99de:	mov    rcx,QWORD PTR [rbp+0x8]
    99e2:	jmp    99f0 <__sprintf_chk@plt+0x5d10>
    99e4:	nop    DWORD PTR [rax+0x0]
    99e8:	mov    rax,QWORD PTR [rdx]
    99eb:	test   rax,rax
    99ee:	jne    99fb <__sprintf_chk@plt+0x5d1b>
    99f0:	add    rdx,0x10
    99f4:	cmp    rcx,rdx
    99f7:	ja     99e8 <__sprintf_chk@plt+0x5d08>
    99f9:	xor    eax,eax
    99fb:	add    rsp,0x8
    99ff:	pop    rbx
    9a00:	pop    rbp
    9a01:	ret    
    9a02:	nop    WORD PTR [rax+rax*1+0x0]
    9a08:	mov    rax,QWORD PTR [rax]
    9a0b:	add    rsp,0x8
    9a0f:	pop    rbx
    9a10:	pop    rbp
    9a11:	ret    
    9a12:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    9a1d:	nop    DWORD PTR [rax]
    9a20:	endbr64 
    9a24:	mov    r9,rdi
    9a27:	xor    eax,eax
    9a29:	mov    rdi,rsi
    9a2c:	mov    rsi,rdx
    9a2f:	mov    r8,QWORD PTR [r9]
    9a32:	cmp    r8,QWORD PTR [r9+0x8]
    9a36:	jae    9a72 <__sprintf_chk@plt+0x5d92>
    9a38:	cmp    QWORD PTR [r8],0x0
    9a3c:	jne    9a50 <__sprintf_chk@plt+0x5d70>
    9a3e:	add    r8,0x10
    9a42:	cmp    QWORD PTR [r9+0x8],r8
    9a46:	ja     9a38 <__sprintf_chk@plt+0x5d58>
    9a48:	ret    
    9a49:	nop    DWORD PTR [rax+0x0]
    9a50:	mov    rdx,r8
    9a53:	jmp    9a6d <__sprintf_chk@plt+0x5d8d>
    9a55:	nop    DWORD PTR [rax]
    9a58:	mov    rcx,QWORD PTR [rdx]
    9a5b:	add    rax,0x1
    9a5f:	mov    QWORD PTR [rdi+rax*8-0x8],rcx
    9a64:	mov    rdx,QWORD PTR [rdx+0x8]
    9a68:	test   rdx,rdx
    9a6b:	je     9a3e <__sprintf_chk@plt+0x5d5e>
    9a6d:	cmp    rsi,rax
    9a70:	ja     9a58 <__sprintf_chk@plt+0x5d78>
    9a72:	ret    
    9a73:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    9a7e:	xchg   ax,ax
    9a80:	endbr64 
    9a84:	push   r15
    9a86:	push   r14
    9a88:	push   r13
    9a8a:	push   r12
    9a8c:	push   rbp
    9a8d:	push   rbx
    9a8e:	sub    rsp,0x8
    9a92:	mov    r14,QWORD PTR [rdi]
    9a95:	cmp    r14,QWORD PTR [rdi+0x8]
    9a99:	jae    9af3 <__sprintf_chk@plt+0x5e13>
    9a9b:	mov    r15,rdi
    9a9e:	mov    rbp,rsi
    9aa1:	mov    r13,rdx
    9aa4:	xor    r12d,r12d
    9aa7:	mov    rdi,QWORD PTR [r14]
    9aaa:	test   rdi,rdi
    9aad:	jne    9ad0 <__sprintf_chk@plt+0x5df0>
    9aaf:	add    r14,0x10
    9ab3:	cmp    QWORD PTR [r15+0x8],r14
    9ab7:	ja     9aa7 <__sprintf_chk@plt+0x5dc7>
    9ab9:	add    rsp,0x8
    9abd:	mov    rax,r12
    9ac0:	pop    rbx
    9ac1:	pop    rbp
    9ac2:	pop    r12
    9ac4:	pop    r13
    9ac6:	pop    r14
    9ac8:	pop    r15
    9aca:	ret    
    9acb:	nop    DWORD PTR [rax+rax*1+0x0]
    9ad0:	mov    rbx,r14
    9ad3:	jmp    9ae8 <__sprintf_chk@plt+0x5e08>
    9ad5:	nop    DWORD PTR [rax]
    9ad8:	mov    rbx,QWORD PTR [rbx+0x8]
    9adc:	add    r12,0x1
    9ae0:	test   rbx,rbx
    9ae3:	je     9aaf <__sprintf_chk@plt+0x5dcf>
    9ae5:	mov    rdi,QWORD PTR [rbx]
    9ae8:	mov    rsi,r13
    9aeb:	call   rbp
    9aed:	test   al,al
    9aef:	jne    9ad8 <__sprintf_chk@plt+0x5df8>
    9af1:	jmp    9ab9 <__sprintf_chk@plt+0x5dd9>
    9af3:	xor    r12d,r12d
    9af6:	jmp    9ab9 <__sprintf_chk@plt+0x5dd9>
    9af8:	nop    DWORD PTR [rax+rax*1+0x0]
    9b00:	endbr64 
    9b04:	movzx  ecx,BYTE PTR [rdi]
    9b07:	xor    edx,edx
    9b09:	test   cl,cl
    9b0b:	je     9b2d <__sprintf_chk@plt+0x5e4d>
    9b0d:	nop    DWORD PTR [rax]
    9b10:	mov    rax,rdx
    9b13:	add    rdi,0x1
    9b17:	shl    rax,0x5
    9b1b:	sub    rax,rdx
    9b1e:	xor    edx,edx
    9b20:	add    rax,rcx
    9b23:	movzx  ecx,BYTE PTR [rdi]
    9b26:	div    rsi
    9b29:	test   cl,cl
    9b2b:	jne    9b10 <__sprintf_chk@plt+0x5e30>
    9b2d:	mov    rax,rdx
    9b30:	ret    
    9b31:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    9b3c:	nop    DWORD PTR [rax+0x0]
    9b40:	endbr64 
    9b44:	movabs rax,0x3f80000000000000
    9b4e:	mov    BYTE PTR [rdi+0x10],0x0
    9b52:	mov    QWORD PTR [rdi],rax
    9b55:	movabs rax,0x3fb4fdf43f4ccccd
    9b5f:	mov    QWORD PTR [rdi+0x8],rax
    9b63:	ret    
    9b64:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    9b6f:	nop
    9b70:	endbr64 
    9b74:	push   r15
    9b76:	lea    rax,[rip+0xfffffffffffff673]        # 91f0 <__sprintf_chk@plt+0x5510>
    9b7d:	mov    r15,rsi
    9b80:	push   r14
    9b82:	mov    r14,r8
    9b85:	push   r13
    9b87:	mov    r13,rdi
    9b8a:	mov    edi,0x50
    9b8f:	push   r12
    9b91:	push   rbp
    9b92:	mov    rbp,rdx
    9b95:	push   rbx
    9b96:	mov    rbx,rcx
    9b99:	sub    rsp,0x8
    9b9d:	test   rdx,rdx
    9ba0:	cmove  rbp,rax
    9ba4:	test   rcx,rcx
    9ba7:	lea    rax,[rip+0xfffffffffffff662]        # 9210 <__sprintf_chk@plt+0x5530>
    9bae:	cmove  rbx,rax
    9bb2:	call   3a70 <malloc@plt>
    9bb7:	mov    r12,rax
    9bba:	test   rax,rax
    9bbd:	je     9c46 <__sprintf_chk@plt+0x5f66>
    9bc3:	test   r15,r15
    9bc6:	lea    rax,[rip+0x1a1f3]        # 23dc0 <__sprintf_chk@plt+0x200e0>
    9bcd:	mov    rdi,r12
    9bd0:	cmove  r15,rax
    9bd4:	mov    QWORD PTR [r12+0x28],r15
    9bd9:	call   9220 <__sprintf_chk@plt+0x5540>
    9bde:	test   al,al
    9be0:	je     9c60 <__sprintf_chk@plt+0x5f80>
    9be2:	mov    rdi,r13
    9be5:	mov    rsi,r15
    9be8:	call   92b0 <__sprintf_chk@plt+0x55d0>
    9bed:	mov    QWORD PTR [r12+0x10],rax
    9bf2:	mov    r13,rax
    9bf5:	test   rax,rax
    9bf8:	je     9c60 <__sprintf_chk@plt+0x5f80>
    9bfa:	mov    esi,0x10
    9bff:	mov    rdi,rax
    9c02:	call   3990 <calloc@plt>
    9c07:	mov    QWORD PTR [r12],rax
    9c0b:	test   rax,rax
    9c0e:	je     9c60 <__sprintf_chk@plt+0x5f80>
    9c10:	shl    r13,0x4
    9c14:	mov    QWORD PTR [r12+0x30],rbp
    9c19:	add    r13,rax
    9c1c:	mov    QWORD PTR [r12+0x38],rbx
    9c21:	mov    QWORD PTR [r12+0x8],r13
    9c26:	mov    QWORD PTR [r12+0x18],0x0
    9c2f:	mov    QWORD PTR [r12+0x20],0x0
    9c38:	mov    QWORD PTR [r12+0x40],r14
    9c3d:	mov    QWORD PTR [r12+0x48],0x0
    9c46:	add    rsp,0x8
    9c4a:	mov    rax,r12
    9c4d:	pop    rbx
    9c4e:	pop    rbp
    9c4f:	pop    r12
    9c51:	pop    r13
    9c53:	pop    r14
    9c55:	pop    r15
    9c57:	ret    
    9c58:	nop    DWORD PTR [rax+rax*1+0x0]
    9c60:	mov    rdi,r12
    9c63:	xor    r12d,r12d
    9c66:	call   3680 <free@plt>
    9c6b:	jmp    9c46 <__sprintf_chk@plt+0x5f66>
    9c6d:	nop    DWORD PTR [rax]
    9c70:	endbr64 
    9c74:	push   r12
    9c76:	push   rbp
    9c77:	mov    rbp,rdi
    9c7a:	push   rbx
    9c7b:	mov    r12,QWORD PTR [rdi]
    9c7e:	cmp    r12,QWORD PTR [rdi+0x8]
    9c82:	jb     9c9a <__sprintf_chk@plt+0x5fba>
    9c84:	jmp    9d0b <__sprintf_chk@plt+0x602b>
    9c89:	nop    DWORD PTR [rax+0x0]
    9c90:	add    r12,0x10
    9c94:	cmp    QWORD PTR [rbp+0x8],r12
    9c98:	jbe    9d0b <__sprintf_chk@plt+0x602b>
    9c9a:	cmp    QWORD PTR [r12],0x0
    9c9f:	je     9c90 <__sprintf_chk@plt+0x5fb0>
    9ca1:	mov    rbx,QWORD PTR [r12+0x8]
    9ca6:	mov    rdx,QWORD PTR [rbp+0x40]
    9caa:	test   rbx,rbx
    9cad:	jne    9cbb <__sprintf_chk@plt+0x5fdb>
    9caf:	jmp    9ce5 <__sprintf_chk@plt+0x6005>
    9cb1:	nop    DWORD PTR [rax+0x0]
    9cb8:	mov    rbx,rax
    9cbb:	test   rdx,rdx
    9cbe:	je     9cc9 <__sprintf_chk@plt+0x5fe9>
    9cc0:	mov    rdi,QWORD PTR [rbx]
    9cc3:	call   rdx
    9cc5:	mov    rdx,QWORD PTR [rbp+0x40]
    9cc9:	mov    rax,QWORD PTR [rbx+0x8]
    9ccd:	mov    rcx,QWORD PTR [rbp+0x48]
    9cd1:	mov    QWORD PTR [rbx],0x0
    9cd8:	mov    QWORD PTR [rbx+0x8],rcx
    9cdc:	mov    QWORD PTR [rbp+0x48],rbx
    9ce0:	test   rax,rax
    9ce3:	jne    9cb8 <__sprintf_chk@plt+0x5fd8>
    9ce5:	test   rdx,rdx
    9ce8:	je     9cf0 <__sprintf_chk@plt+0x6010>
    9cea:	mov    rdi,QWORD PTR [r12]
    9cee:	call   rdx
    9cf0:	mov    QWORD PTR [r12],0x0
    9cf8:	add    r12,0x10
    9cfc:	mov    QWORD PTR [r12-0x8],0x0
    9d05:	cmp    QWORD PTR [rbp+0x8],r12
    9d09:	ja     9c9a <__sprintf_chk@plt+0x5fba>
    9d0b:	pop    rbx
    9d0c:	mov    QWORD PTR [rbp+0x18],0x0
    9d14:	mov    QWORD PTR [rbp+0x20],0x0
    9d1c:	pop    rbp
    9d1d:	pop    r12
    9d1f:	ret    
    9d20:	endbr64 
    9d24:	push   r12
    9d26:	mov    r12,rdi
    9d29:	push   rbp
    9d2a:	push   rbx
    9d2b:	cmp    QWORD PTR [rdi+0x40],0x0
    9d30:	mov    rbp,QWORD PTR [rdi]
    9d33:	mov    rax,QWORD PTR [rdi+0x8]
    9d37:	je     9d93 <__sprintf_chk@plt+0x60b3>
    9d39:	cmp    QWORD PTR [rdi+0x20],0x0
    9d3e:	je     9d93 <__sprintf_chk@plt+0x60b3>
    9d40:	cmp    rax,rbp
    9d43:	ja     9d59 <__sprintf_chk@plt+0x6079>
    9d45:	jmp    9dcc <__sprintf_chk@plt+0x60ec>
    9d4a:	nop    WORD PTR [rax+rax*1+0x0]
    9d50:	add    rbp,0x10
    9d54:	cmp    rax,rbp
    9d57:	jbe    9d8f <__sprintf_chk@plt+0x60af>
    9d59:	mov    rdi,QWORD PTR [rbp+0x0]
    9d5d:	test   rdi,rdi
    9d60:	je     9d50 <__sprintf_chk@plt+0x6070>
    9d62:	mov    rbx,rbp
    9d65:	jmp    9d73 <__sprintf_chk@plt+0x6093>
    9d67:	nop    WORD PTR [rax+rax*1+0x0]
    9d70:	mov    rdi,QWORD PTR [rbx]
    9d73:	call   QWORD PTR [r12+0x40]
    9d78:	mov    rbx,QWORD PTR [rbx+0x8]
    9d7c:	test   rbx,rbx
    9d7f:	jne    9d70 <__sprintf_chk@plt+0x6090>
    9d81:	mov    rax,QWORD PTR [r12+0x8]
    9d86:	add    rbp,0x10
    9d8a:	cmp    rax,rbp
    9d8d:	ja     9d59 <__sprintf_chk@plt+0x6079>
    9d8f:	mov    rbp,QWORD PTR [r12]
    9d93:	cmp    rbp,rax
    9d96:	jae    9dcc <__sprintf_chk@plt+0x60ec>
    9d98:	nop    DWORD PTR [rax+rax*1+0x0]
    9da0:	mov    rbx,QWORD PTR [rbp+0x8]
    9da4:	test   rbx,rbx
    9da7:	je     9dc1 <__sprintf_chk@plt+0x60e1>
    9da9:	nop    DWORD PTR [rax+0x0]
    9db0:	mov    rdi,rbx
    9db3:	mov    rbx,QWORD PTR [rbx+0x8]
    9db7:	call   3680 <free@plt>
    9dbc:	test   rbx,rbx
    9dbf:	jne    9db0 <__sprintf_chk@plt+0x60d0>
    9dc1:	add    rbp,0x10
    9dc5:	cmp    QWORD PTR [r12+0x8],rbp
    9dca:	ja     9da0 <__sprintf_chk@plt+0x60c0>
    9dcc:	mov    rbx,QWORD PTR [r12+0x48]
    9dd1:	test   rbx,rbx
    9dd4:	je     9df1 <__sprintf_chk@plt+0x6111>
    9dd6:	cs nop WORD PTR [rax+rax*1+0x0]
    9de0:	mov    rdi,rbx
    9de3:	mov    rbx,QWORD PTR [rbx+0x8]
    9de7:	call   3680 <free@plt>
    9dec:	test   rbx,rbx
    9def:	jne    9de0 <__sprintf_chk@plt+0x6100>
    9df1:	mov    rdi,QWORD PTR [r12]
    9df5:	call   3680 <free@plt>
    9dfa:	pop    rbx
    9dfb:	mov    rdi,r12
    9dfe:	pop    rbp
    9dff:	pop    r12
    9e01:	jmp    3680 <free@plt>
    9e06:	cs nop WORD PTR [rax+rax*1+0x0]
    9e10:	endbr64 
    9e14:	push   r13
    9e16:	push   r12
    9e18:	push   rbp
    9e19:	mov    rbp,rdi
    9e1c:	mov    rdi,rsi
    9e1f:	push   rbx
    9e20:	sub    rsp,0x68
    9e24:	mov    r12,QWORD PTR [rbp+0x28]
    9e28:	mov    rax,QWORD PTR fs:0x28
    9e31:	mov    QWORD PTR [rsp+0x58],rax
    9e36:	xor    eax,eax
    9e38:	mov    rsi,r12
    9e3b:	call   92b0 <__sprintf_chk@plt+0x55d0>
    9e40:	test   rax,rax
    9e43:	je     9f40 <__sprintf_chk@plt+0x6260>
    9e49:	mov    rbx,rax
    9e4c:	cmp    QWORD PTR [rbp+0x10],rax
    9e50:	je     9f30 <__sprintf_chk@plt+0x6250>
    9e56:	mov    esi,0x10
    9e5b:	mov    rdi,rax
    9e5e:	call   3990 <calloc@plt>
    9e63:	mov    QWORD PTR [rsp],rax
    9e67:	test   rax,rax
    9e6a:	je     9f40 <__sprintf_chk@plt+0x6260>
    9e70:	mov    QWORD PTR [rsp+0x10],rbx
    9e75:	shl    rbx,0x4
    9e79:	mov    r13,rsp
    9e7c:	xor    edx,edx
    9e7e:	add    rbx,rax
    9e81:	mov    rax,QWORD PTR [rbp+0x30]
    9e85:	mov    rsi,rbp
    9e88:	mov    rdi,r13
    9e8b:	mov    QWORD PTR [rsp+0x28],r12
    9e90:	mov    QWORD PTR [rsp+0x30],rax
    9e95:	mov    rax,QWORD PTR [rbp+0x38]
    9e99:	mov    QWORD PTR [rsp+0x8],rbx
    9e9e:	mov    QWORD PTR [rsp+0x38],rax
    9ea3:	mov    rax,QWORD PTR [rbp+0x40]
    9ea7:	mov    QWORD PTR [rsp+0x18],0x0
    9eb0:	mov    QWORD PTR [rsp+0x40],rax
    9eb5:	mov    rax,QWORD PTR [rbp+0x48]
    9eb9:	mov    QWORD PTR [rsp+0x20],0x0
    9ec2:	mov    QWORD PTR [rsp+0x48],rax
    9ec7:	call   94f0 <__sprintf_chk@plt+0x5810>
    9ecc:	mov    r12d,eax
    9ecf:	test   al,al
    9ed1:	jne    9f48 <__sprintf_chk@plt+0x6268>
    9ed3:	mov    rax,QWORD PTR [rsp+0x48]
    9ed8:	mov    edx,0x1
    9edd:	mov    rsi,r13
    9ee0:	mov    rdi,rbp
    9ee3:	mov    QWORD PTR [rbp+0x48],rax
    9ee7:	call   94f0 <__sprintf_chk@plt+0x5810>
    9eec:	test   al,al
    9eee:	je     3d09 <__sprintf_chk@plt+0x29>
    9ef4:	xor    edx,edx
    9ef6:	mov    rsi,r13
    9ef9:	mov    rdi,rbp
    9efc:	call   94f0 <__sprintf_chk@plt+0x5810>
    9f01:	test   al,al
    9f03:	je     3d09 <__sprintf_chk@plt+0x29>
    9f09:	mov    rdi,QWORD PTR [rsp]
    9f0d:	call   3680 <free@plt>
    9f12:	mov    rax,QWORD PTR [rsp+0x58]
    9f17:	sub    rax,QWORD PTR fs:0x28
    9f20:	jne    9f7f <__sprintf_chk@plt+0x629f>
    9f22:	add    rsp,0x68
    9f26:	mov    eax,r12d
    9f29:	pop    rbx
    9f2a:	pop    rbp
    9f2b:	pop    r12
    9f2d:	pop    r13
    9f2f:	ret    
    9f30:	mov    r12d,0x1
    9f36:	jmp    9f12 <__sprintf_chk@plt+0x6232>
    9f38:	nop    DWORD PTR [rax+rax*1+0x0]
    9f40:	xor    r12d,r12d
    9f43:	jmp    9f12 <__sprintf_chk@plt+0x6232>
    9f45:	nop    DWORD PTR [rax]
    9f48:	mov    rdi,QWORD PTR [rbp+0x0]
    9f4c:	call   3680 <free@plt>
    9f51:	mov    rax,QWORD PTR [rsp]
    9f55:	mov    QWORD PTR [rbp+0x0],rax
    9f59:	mov    rax,QWORD PTR [rsp+0x8]
    9f5e:	mov    QWORD PTR [rbp+0x8],rax
    9f62:	mov    rax,QWORD PTR [rsp+0x10]
    9f67:	mov    QWORD PTR [rbp+0x10],rax
    9f6b:	mov    rax,QWORD PTR [rsp+0x18]
    9f70:	mov    QWORD PTR [rbp+0x18],rax
    9f74:	mov    rax,QWORD PTR [rsp+0x48]
    9f79:	mov    QWORD PTR [rbp+0x48],rax
    9f7d:	jmp    9f12 <__sprintf_chk@plt+0x6232>
    9f7f:	call   3840 <__stack_chk_fail@plt>
    9f84:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    9f8f:	nop
    9f90:	endbr64 
    9f94:	push   r13
    9f96:	push   r12
    9f98:	push   rbp
    9f99:	push   rbx
    9f9a:	sub    rsp,0x18
    9f9e:	mov    rax,QWORD PTR fs:0x28
    9fa7:	mov    QWORD PTR [rsp+0x8],rax
    9fac:	xor    eax,eax
    9fae:	test   rsi,rsi
    9fb1:	je     3d0e <__sprintf_chk@plt+0x2e>
    9fb7:	mov    r12,rsp
    9fba:	mov    r13,rdx
    9fbd:	xor    ecx,ecx
    9fbf:	mov    rbx,rdi
    9fc2:	mov    rdx,r12
    9fc5:	mov    rbp,rsi
    9fc8:	call   93e0 <__sprintf_chk@plt+0x5700>
    9fcd:	test   rax,rax
    9fd0:	je     a000 <__sprintf_chk@plt+0x6320>
    9fd2:	xor    r8d,r8d
    9fd5:	test   r13,r13
    9fd8:	je     9fde <__sprintf_chk@plt+0x62fe>
    9fda:	mov    QWORD PTR [r13+0x0],rax
    9fde:	mov    rax,QWORD PTR [rsp+0x8]
    9fe3:	sub    rax,QWORD PTR fs:0x28
    9fec:	jne    a224 <__sprintf_chk@plt+0x6544>
    9ff2:	add    rsp,0x18
    9ff6:	mov    eax,r8d
    9ff9:	pop    rbx
    9ffa:	pop    rbp
    9ffb:	pop    r12
    9ffd:	pop    r13
    9fff:	ret    
    a000:	mov    rax,QWORD PTR [rbx+0x18]
    a004:	test   rax,rax
    a007:	js     a080 <__sprintf_chk@plt+0x63a0>
    a009:	pxor   xmm1,xmm1
    a00d:	mov    rdx,QWORD PTR [rbx+0x28]
    a011:	cvtsi2ss xmm1,rax
    a016:	mov    rax,QWORD PTR [rbx+0x10]
    a01a:	test   rax,rax
    a01d:	js     a0aa <__sprintf_chk@plt+0x63ca>
    a023:	pxor   xmm0,xmm0
    a027:	cvtsi2ss xmm0,rax
    a02c:	mulss  xmm0,DWORD PTR [rdx+0x8]
    a031:	comiss xmm1,xmm0
    a034:	ja     a0d1 <__sprintf_chk@plt+0x63f1>
    a03a:	mov    r12,QWORD PTR [rsp]
    a03e:	cmp    QWORD PTR [r12],0x0
    a043:	je     a148 <__sprintf_chk@plt+0x6468>
    a049:	mov    rax,QWORD PTR [rbx+0x48]
    a04d:	test   rax,rax
    a050:	je     a168 <__sprintf_chk@plt+0x6488>
    a056:	mov    rdx,QWORD PTR [rax+0x8]
    a05a:	mov    QWORD PTR [rbx+0x48],rdx
    a05e:	mov    rdx,QWORD PTR [r12+0x8]
    a063:	mov    QWORD PTR [rax],rbp
    a066:	mov    r8d,0x1
    a06c:	mov    QWORD PTR [rax+0x8],rdx
    a070:	mov    QWORD PTR [r12+0x8],rax
    a075:	add    QWORD PTR [rbx+0x20],0x1
    a07a:	jmp    9fde <__sprintf_chk@plt+0x62fe>
    a07f:	nop
    a080:	mov    rdx,rax
    a083:	and    eax,0x1
    a086:	pxor   xmm1,xmm1
    a08a:	shr    rdx,1
    a08d:	or     rdx,rax
    a090:	mov    rax,QWORD PTR [rbx+0x10]
    a094:	cvtsi2ss xmm1,rdx
    a099:	mov    rdx,QWORD PTR [rbx+0x28]
    a09d:	addss  xmm1,xmm1
    a0a1:	test   rax,rax
    a0a4:	jns    a023 <__sprintf_chk@plt+0x6343>
    a0aa:	mov    rcx,rax
    a0ad:	and    eax,0x1
    a0b0:	pxor   xmm0,xmm0
    a0b4:	shr    rcx,1
    a0b7:	or     rcx,rax
    a0ba:	cvtsi2ss xmm0,rcx
    a0bf:	addss  xmm0,xmm0
    a0c3:	mulss  xmm0,DWORD PTR [rdx+0x8]
    a0c8:	comiss xmm1,xmm0
    a0cb:	jbe    a03a <__sprintf_chk@plt+0x635a>
    a0d1:	mov    rdi,rbx
    a0d4:	call   9220 <__sprintf_chk@plt+0x5540>
    a0d9:	mov    rdx,QWORD PTR [rbx+0x28]
    a0dd:	mov    rax,QWORD PTR [rbx+0x10]
    a0e1:	movss  xmm2,DWORD PTR [rdx+0x8]
    a0e6:	test   rax,rax
    a0e9:	js     a1a0 <__sprintf_chk@plt+0x64c0>
    a0ef:	pxor   xmm0,xmm0
    a0f3:	cvtsi2ss xmm0,rax
    a0f8:	mov    rax,QWORD PTR [rbx+0x18]
    a0fc:	test   rax,rax
    a0ff:	js     a180 <__sprintf_chk@plt+0x64a0>
    a101:	pxor   xmm1,xmm1
    a105:	cvtsi2ss xmm1,rax
    a10a:	movaps xmm3,xmm2
    a10d:	mulss  xmm3,xmm0
    a111:	comiss xmm1,xmm3
    a114:	jbe    a03a <__sprintf_chk@plt+0x635a>
    a11a:	mulss  xmm0,DWORD PTR [rdx+0xc]
    a11f:	cmp    BYTE PTR [rdx+0x10],0x0
    a123:	je     a1c0 <__sprintf_chk@plt+0x64e0>
    a129:	comiss xmm0,DWORD PTR [rip+0x19cb8]        # 23de8 <__sprintf_chk@plt+0x20108>
    a130:	jb     a1d0 <__sprintf_chk@plt+0x64f0>
    a136:	mov    r8d,0xffffffff
    a13c:	jmp    9fde <__sprintf_chk@plt+0x62fe>
    a141:	nop    DWORD PTR [rax+0x0]
    a148:	mov    QWORD PTR [r12],rbp
    a14c:	mov    r8d,0x1
    a152:	add    QWORD PTR [rbx+0x20],0x1
    a157:	add    QWORD PTR [rbx+0x18],0x1
    a15c:	jmp    9fde <__sprintf_chk@plt+0x62fe>
    a161:	nop    DWORD PTR [rax+0x0]
    a168:	mov    edi,0x10
    a16d:	call   3a70 <malloc@plt>
    a172:	test   rax,rax
    a175:	je     a136 <__sprintf_chk@plt+0x6456>
    a177:	jmp    a05e <__sprintf_chk@plt+0x637e>
    a17c:	nop    DWORD PTR [rax+0x0]
    a180:	mov    rcx,rax
    a183:	and    eax,0x1
    a186:	pxor   xmm1,xmm1
    a18a:	shr    rcx,1
    a18d:	or     rcx,rax
    a190:	cvtsi2ss xmm1,rcx
    a195:	addss  xmm1,xmm1
    a199:	jmp    a10a <__sprintf_chk@plt+0x642a>
    a19e:	xchg   ax,ax
    a1a0:	mov    rcx,rax
    a1a3:	and    eax,0x1
    a1a6:	pxor   xmm0,xmm0
    a1aa:	shr    rcx,1
    a1ad:	or     rcx,rax
    a1b0:	cvtsi2ss xmm0,rcx
    a1b5:	addss  xmm0,xmm0
    a1b9:	jmp    a0f8 <__sprintf_chk@plt+0x6418>
    a1be:	xchg   ax,ax
    a1c0:	mulss  xmm0,xmm2
    a1c4:	jmp    a129 <__sprintf_chk@plt+0x6449>
    a1c9:	nop    DWORD PTR [rax+0x0]
    a1d0:	comiss xmm0,DWORD PTR [rip+0x19c15]        # 23dec <__sprintf_chk@plt+0x2010c>
    a1d7:	jae    a210 <__sprintf_chk@plt+0x6530>
    a1d9:	cvttss2si rsi,xmm0
    a1de:	mov    rdi,rbx
    a1e1:	call   9e10 <__sprintf_chk@plt+0x6130>
    a1e6:	test   al,al
    a1e8:	je     a136 <__sprintf_chk@plt+0x6456>
    a1ee:	xor    ecx,ecx
    a1f0:	mov    rdx,r12
    a1f3:	mov    rsi,rbp
    a1f6:	mov    rdi,rbx
    a1f9:	call   93e0 <__sprintf_chk@plt+0x5700>
    a1fe:	test   rax,rax
    a201:	je     a03a <__sprintf_chk@plt+0x635a>
    a207:	jmp    3d0e <__sprintf_chk@plt+0x2e>
    a20c:	nop    DWORD PTR [rax+0x0]
    a210:	subss  xmm0,DWORD PTR [rip+0x19bd4]        # 23dec <__sprintf_chk@plt+0x2010c>
    a218:	cvttss2si rsi,xmm0
    a21d:	btc    rsi,0x3f
    a222:	jmp    a1de <__sprintf_chk@plt+0x64fe>
    a224:	call   3840 <__stack_chk_fail@plt>
    a229:	nop    DWORD PTR [rax+0x0]
    a230:	endbr64 
    a234:	push   rbx
    a235:	mov    rbx,rsi
    a238:	sub    rsp,0x10
    a23c:	mov    rax,QWORD PTR fs:0x28
    a245:	mov    QWORD PTR [rsp+0x8],rax
    a24a:	xor    eax,eax
    a24c:	mov    rdx,rsp
    a24f:	call   9f90 <__sprintf_chk@plt+0x62b0>
    a254:	cmp    eax,0xffffffff
    a257:	je     a280 <__sprintf_chk@plt+0x65a0>
    a259:	test   eax,eax
    a25b:	mov    rax,rbx
    a25e:	cmove  rax,QWORD PTR [rsp]
    a263:	mov    rcx,QWORD PTR [rsp+0x8]
    a268:	sub    rcx,QWORD PTR fs:0x28
    a271:	jne    a284 <__sprintf_chk@plt+0x65a4>
    a273:	add    rsp,0x10
    a277:	pop    rbx
    a278:	ret    
    a279:	nop    DWORD PTR [rax+0x0]
    a280:	xor    eax,eax
    a282:	jmp    a263 <__sprintf_chk@plt+0x6583>
    a284:	call   3840 <__stack_chk_fail@plt>
    a289:	nop    DWORD PTR [rax+0x0]
    a290:	endbr64 
    a294:	push   r12
    a296:	mov    ecx,0x1
    a29b:	push   rbp
    a29c:	push   rbx
    a29d:	mov    rbx,rdi
    a2a0:	sub    rsp,0x10
    a2a4:	mov    rax,QWORD PTR fs:0x28
    a2ad:	mov    QWORD PTR [rsp+0x8],rax
    a2b2:	xor    eax,eax
    a2b4:	mov    rdx,rsp
    a2b7:	call   93e0 <__sprintf_chk@plt+0x5700>
    a2bc:	mov    r12,rax
    a2bf:	test   rax,rax
    a2c2:	je     a2d3 <__sprintf_chk@plt+0x65f3>
    a2c4:	mov    rax,QWORD PTR [rsp]
    a2c8:	sub    QWORD PTR [rbx+0x20],0x1
    a2cd:	cmp    QWORD PTR [rax],0x0
    a2d1:	je     a2f8 <__sprintf_chk@plt+0x6618>
    a2d3:	mov    rax,QWORD PTR [rsp+0x8]
    a2d8:	sub    rax,QWORD PTR fs:0x28
    a2e1:	jne    a487 <__sprintf_chk@plt+0x67a7>
    a2e7:	add    rsp,0x10
    a2eb:	mov    rax,r12
    a2ee:	pop    rbx
    a2ef:	pop    rbp
    a2f0:	pop    r12
    a2f2:	ret    
    a2f3:	nop    DWORD PTR [rax+rax*1+0x0]
    a2f8:	mov    rax,QWORD PTR [rbx+0x18]
    a2fc:	sub    rax,0x1
    a300:	mov    QWORD PTR [rbx+0x18],rax
    a304:	js     a3e0 <__sprintf_chk@plt+0x6700>
    a30a:	pxor   xmm1,xmm1
    a30e:	mov    rdx,QWORD PTR [rbx+0x28]
    a312:	cvtsi2ss xmm1,rax
    a317:	mov    rax,QWORD PTR [rbx+0x10]
    a31b:	test   rax,rax
    a31e:	js     a40a <__sprintf_chk@plt+0x672a>
    a324:	pxor   xmm0,xmm0
    a328:	cvtsi2ss xmm0,rax
    a32d:	mulss  xmm0,DWORD PTR [rdx]
    a331:	comiss xmm0,xmm1
    a334:	jbe    a2d3 <__sprintf_chk@plt+0x65f3>
    a336:	mov    rdi,rbx
    a339:	call   9220 <__sprintf_chk@plt+0x5540>
    a33e:	mov    rax,QWORD PTR [rbx+0x10]
    a342:	mov    rdx,QWORD PTR [rbx+0x28]
    a346:	test   rax,rax
    a349:	js     a450 <__sprintf_chk@plt+0x6770>
    a34f:	pxor   xmm0,xmm0
    a353:	cvtsi2ss xmm0,rax
    a358:	mov    rax,QWORD PTR [rbx+0x18]
    a35c:	test   rax,rax
    a35f:	js     a430 <__sprintf_chk@plt+0x6750>
    a365:	pxor   xmm1,xmm1
    a369:	cvtsi2ss xmm1,rax
    a36e:	movss  xmm2,DWORD PTR [rdx]
    a372:	mulss  xmm2,xmm0
    a376:	comiss xmm2,xmm1
    a379:	jbe    a2d3 <__sprintf_chk@plt+0x65f3>
    a37f:	mulss  xmm0,DWORD PTR [rdx+0x4]
    a384:	cmp    BYTE PTR [rdx+0x10],0x0
    a388:	jne    a38f <__sprintf_chk@plt+0x66af>
    a38a:	mulss  xmm0,DWORD PTR [rdx+0x8]
    a38f:	comiss xmm0,DWORD PTR [rip+0x19a56]        # 23dec <__sprintf_chk@plt+0x2010c>
    a396:	jae    a470 <__sprintf_chk@plt+0x6790>
    a39c:	cvttss2si rsi,xmm0
    a3a1:	mov    rdi,rbx
    a3a4:	call   9e10 <__sprintf_chk@plt+0x6130>
    a3a9:	test   al,al
    a3ab:	jne    a2d3 <__sprintf_chk@plt+0x65f3>
    a3b1:	mov    rbp,QWORD PTR [rbx+0x48]
    a3b5:	test   rbp,rbp
    a3b8:	je     a3d1 <__sprintf_chk@plt+0x66f1>
    a3ba:	nop    WORD PTR [rax+rax*1+0x0]
    a3c0:	mov    rdi,rbp
    a3c3:	mov    rbp,QWORD PTR [rbp+0x8]
    a3c7:	call   3680 <free@plt>
    a3cc:	test   rbp,rbp
    a3cf:	jne    a3c0 <__sprintf_chk@plt+0x66e0>
    a3d1:	mov    QWORD PTR [rbx+0x48],0x0
    a3d9:	jmp    a2d3 <__sprintf_chk@plt+0x65f3>
    a3de:	xchg   ax,ax
    a3e0:	mov    rdx,rax
    a3e3:	and    eax,0x1
    a3e6:	pxor   xmm1,xmm1
    a3ea:	shr    rdx,1
    a3ed:	or     rdx,rax
    a3f0:	mov    rax,QWORD PTR [rbx+0x10]
    a3f4:	cvtsi2ss xmm1,rdx
    a3f9:	mov    rdx,QWORD PTR [rbx+0x28]
    a3fd:	addss  xmm1,xmm1
    a401:	test   rax,rax
    a404:	jns    a324 <__sprintf_chk@plt+0x6644>
    a40a:	mov    rcx,rax
    a40d:	and    eax,0x1
    a410:	pxor   xmm0,xmm0
    a414:	shr    rcx,1
    a417:	or     rcx,rax
    a41a:	cvtsi2ss xmm0,rcx
    a41f:	addss  xmm0,xmm0
    a423:	jmp    a32d <__sprintf_chk@plt+0x664d>
    a428:	nop    DWORD PTR [rax+rax*1+0x0]
    a430:	mov    rcx,rax
    a433:	and    eax,0x1
    a436:	pxor   xmm1,xmm1
    a43a:	shr    rcx,1
    a43d:	or     rcx,rax
    a440:	cvtsi2ss xmm1,rcx
    a445:	addss  xmm1,xmm1
    a449:	jmp    a36e <__sprintf_chk@plt+0x668e>
    a44e:	xchg   ax,ax
    a450:	mov    rcx,rax
    a453:	and    eax,0x1
    a456:	pxor   xmm0,xmm0
    a45a:	shr    rcx,1
    a45d:	or     rcx,rax
    a460:	cvtsi2ss xmm0,rcx
    a465:	addss  xmm0,xmm0
    a469:	jmp    a358 <__sprintf_chk@plt+0x6678>
    a46e:	xchg   ax,ax
    a470:	subss  xmm0,DWORD PTR [rip+0x19974]        # 23dec <__sprintf_chk@plt+0x2010c>
    a478:	cvttss2si rsi,xmm0
    a47d:	btc    rsi,0x3f
    a482:	jmp    a3a1 <__sprintf_chk@plt+0x66c1>
    a487:	call   3840 <__stack_chk_fail@plt>
    a48c:	nop    DWORD PTR [rax+0x0]
    a490:	endbr64 
    a494:	push   r15
    a496:	mov    eax,edx
    a498:	push   r14
    a49a:	and    eax,0x3
    a49d:	push   r13
    a49f:	mov    r13,r8
    a4a2:	push   r12
    a4a4:	mov    r12,rcx
    a4a7:	push   rbp
    a4a8:	push   rbx
    a4a9:	mov    rbx,rdi
    a4ac:	sub    rsp,0x98
    a4b3:	mov    QWORD PTR [rsp],rsi
    a4b7:	mov    QWORD PTR [rsp+0x18],r8
    a4bc:	mov    DWORD PTR [rsp+0x48],edx
    a4c0:	and    edx,0x20
    a4c3:	mov    rcx,QWORD PTR fs:0x28
    a4cc:	mov    QWORD PTR [rsp+0x88],rcx
    a4d4:	xor    ecx,ecx
    a4d6:	cmp    edx,0x1
    a4d9:	mov    DWORD PTR [rsp+0x10],eax
    a4dd:	sbb    eax,eax
    a4df:	mov    DWORD PTR [rsp+0x30],edx
    a4e3:	and    eax,0xffffffe8
    a4e6:	add    eax,0x400
    a4eb:	mov    DWORD PTR [rsp+0x34],eax
    a4ef:	call   3770 <localeconv@plt>
    a4f4:	mov    r15,QWORD PTR [rax]
    a4f7:	mov    r14,rax
    a4fa:	mov    rdi,r15
    a4fd:	call   3810 <strlen@plt>
    a502:	mov    rcx,QWORD PTR [r14+0x10]
    a506:	mov    r14,QWORD PTR [r14+0x8]
    a50a:	mov    rbp,rax
    a50d:	sub    rax,0x1
    a511:	cmp    rax,0x10
    a515:	mov    eax,0x1
    a51a:	mov    rdi,r14
    a51d:	mov    QWORD PTR [rsp+0x38],rcx
    a522:	cmovae rbp,rax
    a526:	lea    rax,[rip+0x1a91f]        # 24e4c <__sprintf_chk@plt+0x2116c>
    a52d:	cmovae r15,rax
    a531:	call   3810 <strlen@plt>
    a536:	cmp    rax,0x10
    a53a:	lea    rax,[rip+0x1a120]        # 24661 <__sprintf_chk@plt+0x20981>
    a541:	cmova  r14,rax
    a545:	mov    rax,QWORD PTR [rsp]
    a549:	add    rax,0x287
    a54f:	mov    QWORD PTR [rsp+0x8],rax
    a554:	cmp    r13,r12
    a557:	ja     a6c0 <__sprintf_chk@plt+0x69e0>
    a55d:	mov    rax,r12
    a560:	xor    edx,edx
    a562:	div    r13
    a565:	mov    rsi,rax
    a568:	test   rdx,rdx
    a56b:	jne    a585 <__sprintf_chk@plt+0x68a5>
    a56d:	mov    rdi,rbx
    a570:	xor    edx,edx
    a572:	imul   rdi,rax
    a576:	mov    rax,rdi
    a579:	div    rsi
    a57c:	cmp    rax,rbx
    a57f:	je     ab18 <__sprintf_chk@plt+0x6e38>
    a585:	mov    QWORD PTR [rsp+0x20],r12
    a58a:	fild   QWORD PTR [rsp+0x20]
    a58e:	test   r12,r12
    a591:	js     a8a8 <__sprintf_chk@plt+0x6bc8>
    a597:	mov    rax,QWORD PTR [rsp+0x18]
    a59c:	mov    QWORD PTR [rsp+0x20],rax
    a5a1:	fild   QWORD PTR [rsp+0x20]
    a5a5:	test   rax,rax
    a5a8:	js     a888 <__sprintf_chk@plt+0x6ba8>
    a5ae:	mov    QWORD PTR [rsp+0x20],rbx
    a5b3:	fdivp  st(1),st
    a5b5:	fild   QWORD PTR [rsp+0x20]
    a5b9:	test   rbx,rbx
    a5bc:	js     a870 <__sprintf_chk@plt+0x6b90>
    a5c2:	fmulp  st(1),st
    a5c4:	test   BYTE PTR [rsp+0x48],0x10
    a5c9:	je     a8b8 <__sprintf_chk@plt+0x6bd8>
    a5cf:	fild   DWORD PTR [rsp+0x34]
    a5d3:	xor    ebx,ebx
    a5d5:	fld    st(0)
    a5d7:	jmp    a5e4 <__sprintf_chk@plt+0x6904>
    a5d9:	nop    DWORD PTR [rax+0x0]
    a5e0:	fstp   st(1)
    a5e2:	fxch   st(2)
    a5e4:	fld    st(0)
    a5e6:	add    ebx,0x1
    a5e9:	fmul   st,st(2)
    a5eb:	fxch   st(3)
    a5ed:	fcomi  st,st(3)
    a5ef:	jb     a600 <__sprintf_chk@plt+0x6920>
    a5f1:	cmp    ebx,0x8
    a5f4:	jne    a5e0 <__sprintf_chk@plt+0x6900>
    a5f6:	fstp   st(2)
    a5f8:	fstp   st(2)
    a5fa:	jmp    a604 <__sprintf_chk@plt+0x6924>
    a5fc:	nop    DWORD PTR [rax+0x0]
    a600:	fstp   st(2)
    a602:	fstp   st(2)
    a604:	lea    r15,[rbp+0x1]
    a608:	fdivrp st(1),st
    a60a:	cmp    DWORD PTR [rsp+0x30],0x1
    a60f:	adc    rbp,0x2
    a613:	cmp    DWORD PTR [rsp+0x10],0x1
    a618:	je     abf0 <__sprintf_chk@plt+0x6f10>
    a61e:	fld    TBYTE PTR [rip+0x1982c]        # 23e50 <__sprintf_chk@plt+0x20170>
    a624:	fcomip st,st(1)
    a626:	jbe    aa88 <__sprintf_chk@plt+0x6da8>
    a62c:	fld    DWORD PTR [rip+0x197ba]        # 23dec <__sprintf_chk@plt+0x2010c>
    a632:	fxch   st(1)
    a634:	fcomi  st,st(1)
    a636:	jae    ad80 <__sprintf_chk@plt+0x70a0>
    a63c:	fstp   st(1)
    a63e:	fnstcw WORD PTR [rsp+0x4e]
    a642:	movzx  eax,WORD PTR [rsp+0x4e]
    a647:	or     ah,0xc
    a64a:	mov    WORD PTR [rsp+0x4c],ax
    a64f:	fld    st(0)
    a651:	fldcw  WORD PTR [rsp+0x4c]
    a655:	fistp  QWORD PTR [rsp+0x20]
    a659:	fldcw  WORD PTR [rsp+0x4e]
    a65d:	mov    rax,QWORD PTR [rsp+0x20]
    a662:	mov    QWORD PTR [rsp+0x20],rax
    a667:	fild   QWORD PTR [rsp+0x20]
    a66b:	test   rax,rax
    a66e:	jns    a676 <__sprintf_chk@plt+0x6996>
    a670:	fadd   DWORD PTR [rip+0x19772]        # 23de8 <__sprintf_chk@plt+0x20108>
    a676:	mov    ecx,DWORD PTR [rsp+0x10]
    a67a:	test   ecx,ecx
    a67c:	jne    aa90 <__sprintf_chk@plt+0x6db0>
    a682:	fucomi st,st(1)
    a684:	jp     a692 <__sprintf_chk@plt+0x69b2>
    a686:	fcomi  st,st(1)
    a688:	je     aa98 <__sprintf_chk@plt+0x6db8>
    a68e:	fstp   st(0)
    a690:	jmp    a698 <__sprintf_chk@plt+0x69b8>
    a692:	fstp   st(0)
    a694:	nop    DWORD PTR [rax+0x0]
    a698:	add    rax,0x1
    a69c:	mov    QWORD PTR [rsp+0x20],rax
    a6a1:	fild   QWORD PTR [rsp+0x20]
    a6a5:	jns    aa9c <__sprintf_chk@plt+0x6dbc>
    a6ab:	fadd   DWORD PTR [rip+0x19737]        # 23de8 <__sprintf_chk@plt+0x20108>
    a6b1:	fxch   st(1)
    a6b3:	jmp    aaa0 <__sprintf_chk@plt+0x6dc0>
    a6b8:	nop    DWORD PTR [rax+rax*1+0x0]
    a6c0:	test   r12,r12
    a6c3:	je     a585 <__sprintf_chk@plt+0x68a5>
    a6c9:	mov    rax,QWORD PTR [rsp+0x18]
    a6ce:	xor    edx,edx
    a6d0:	div    r12
    a6d3:	mov    r8,rax
    a6d6:	test   rdx,rdx
    a6d9:	jne    a585 <__sprintf_chk@plt+0x68a5>
    a6df:	mov    rax,rbx
    a6e2:	xor    edx,edx
    a6e4:	div    r8
    a6e7:	mov    rdi,rax
    a6ea:	lea    rax,[rdx+rdx*4]
    a6ee:	xor    edx,edx
    a6f0:	add    rax,rax
    a6f3:	div    r8
    a6f6:	add    rdx,rdx
    a6f9:	mov    esi,eax
    a6fb:	cmp    r8,rdx
    a6fe:	jbe    ad68 <__sprintf_chk@plt+0x7088>
    a704:	xor    ecx,ecx
    a706:	test   rdx,rdx
    a709:	setne  cl
    a70c:	mov    r10d,DWORD PTR [rsp+0x48]
    a711:	and    r10d,0x10
    a715:	je     ab2b <__sprintf_chk@plt+0x6e4b>
    a71b:	mov    r8d,DWORD PTR [rsp+0x34]
    a720:	xor    ebx,ebx
    a722:	mov    r11,r8
    a725:	cmp    r8,rdi
    a728:	jbe    aa4d <__sprintf_chk@plt+0x6d6d>
    a72e:	cmp    DWORD PTR [rsp+0x10],0x1
    a733:	mov    r8,QWORD PTR [rsp+0x8]
    a738:	je     ad40 <__sprintf_chk@plt+0x7060>
    a73e:	mov    r11d,DWORD PTR [rsp+0x10]
    a743:	test   r11d,r11d
    a746:	jne    a768 <__sprintf_chk@plt+0x6a88>
    a748:	add    ecx,esi
    a74a:	test   ecx,ecx
    a74c:	jle    a768 <__sprintf_chk@plt+0x6a88>
    a74e:	add    rdi,0x1
    a752:	test   r10d,r10d
    a755:	je     a768 <__sprintf_chk@plt+0x6a88>
    a757:	mov    eax,DWORD PTR [rsp+0x34]
    a75b:	cmp    rax,rdi
    a75e:	je     ae42 <__sprintf_chk@plt+0x7162>
    a764:	nop    DWORD PTR [rax+0x0]
    a768:	movabs rcx,0xcccccccccccccccd
    a772:	mov    rbp,r8
    a775:	nop    DWORD PTR [rax]
    a778:	mov    rax,rdi
    a77b:	sub    rbp,0x1
    a77f:	mul    rcx
    a782:	mov    rax,rdi
    a785:	shr    rdx,0x3
    a789:	lea    rsi,[rdx+rdx*4]
    a78d:	add    rsi,rsi
    a790:	sub    rax,rsi
    a793:	add    eax,0x30
    a796:	mov    BYTE PTR [rbp+0x0],al
    a799:	mov    rax,rdi
    a79c:	mov    rdi,rdx
    a79f:	cmp    rax,0x9
    a7a3:	ja     a778 <__sprintf_chk@plt+0x6a98>
    a7a5:	test   BYTE PTR [rsp+0x48],0x4
    a7aa:	je     a9b4 <__sprintf_chk@plt+0x6cd4>
    a7b0:	mov    rdi,r14
    a7b3:	mov    r12,r8
    a7b6:	mov    QWORD PTR [rsp+0x40],r8
    a7bb:	mov    r13,0xffffffffffffffff
    a7c2:	call   3810 <strlen@plt>
    a7c7:	sub    r12,rbp
    a7ca:	mov    rsi,rbp
    a7cd:	mov    ecx,0x29
    a7d2:	mov    r15,rax
    a7d5:	lea    rax,[rsp+0x50]
    a7da:	mov    rdx,r12
    a7dd:	mov    rdi,rax
    a7e0:	mov    QWORD PTR [rsp+0x10],rax
    a7e5:	call   39e0 <__memcpy_chk@plt>
    a7ea:	mov    r8,QWORD PTR [rsp+0x40]
    a7ef:	mov    DWORD PTR [rsp+0x20],ebx
    a7f3:	mov    rbx,r12
    a7f6:	mov    r12,QWORD PTR [rsp+0x38]
    a7fb:	mov    rbp,r8
    a7fe:	jmp    a83b <__sprintf_chk@plt+0x6b5b>
    a800:	cmp    r13,rbx
    a803:	mov    rax,QWORD PTR [rsp+0x10]
    a808:	cmova  r13,rbx
    a80c:	sub    rbx,r13
    a80f:	lea    rsi,[rax+rbx*1]
    a813:	sub    rbp,r13
    a816:	mov    rdx,r13
    a819:	mov    rdi,rbp
    a81c:	call   3a00 <memcpy@plt>
    a821:	test   rbx,rbx
    a824:	je     aa20 <__sprintf_chk@plt+0x6d40>
    a82a:	sub    rbp,r15
    a82d:	mov    rdx,r15
    a830:	mov    rsi,r14
    a833:	mov    rdi,rbp
    a836:	call   3a00 <memcpy@plt>
    a83b:	movzx  eax,BYTE PTR [r12]
    a840:	test   al,al
    a842:	je     a800 <__sprintf_chk@plt+0x6b20>
    a844:	cmp    al,0x7e
    a846:	ja     aa10 <__sprintf_chk@plt+0x6d30>
    a84c:	cmp    rax,rbx
    a84f:	cmova  rax,rbx
    a853:	sub    rbx,rax
    a856:	mov    r13,rax
    a859:	mov    rax,QWORD PTR [rsp+0x10]
    a85e:	lea    rsi,[rax+rbx*1]
    a862:	add    r12,0x1
    a866:	jmp    a813 <__sprintf_chk@plt+0x6b33>
    a868:	nop    DWORD PTR [rax+rax*1+0x0]
    a870:	fadd   DWORD PTR [rip+0x19572]        # 23de8 <__sprintf_chk@plt+0x20108>
    a876:	fmulp  st(1),st
    a878:	test   BYTE PTR [rsp+0x48],0x10
    a87d:	jne    a5cf <__sprintf_chk@plt+0x68ef>
    a883:	jmp    a8b8 <__sprintf_chk@plt+0x6bd8>
    a885:	nop    DWORD PTR [rax]
    a888:	fadd   DWORD PTR [rip+0x1955a]        # 23de8 <__sprintf_chk@plt+0x20108>
    a88e:	mov    QWORD PTR [rsp+0x20],rbx
    a893:	fdivp  st(1),st
    a895:	fild   QWORD PTR [rsp+0x20]
    a899:	test   rbx,rbx
    a89c:	jns    a5c2 <__sprintf_chk@plt+0x68e2>
    a8a2:	jmp    a870 <__sprintf_chk@plt+0x6b90>
    a8a4:	nop    DWORD PTR [rax+0x0]
    a8a8:	fadd   DWORD PTR [rip+0x1953a]        # 23de8 <__sprintf_chk@plt+0x20108>
    a8ae:	jmp    a597 <__sprintf_chk@plt+0x68b7>
    a8b3:	nop    DWORD PTR [rax+rax*1+0x0]
    a8b8:	cmp    DWORD PTR [rsp+0x10],0x1
    a8bd:	je     a952 <__sprintf_chk@plt+0x6c72>
    a8c3:	fld    TBYTE PTR [rip+0x19587]        # 23e50 <__sprintf_chk@plt+0x20170>
    a8c9:	fcomip st,st(1)
    a8cb:	jbe    a952 <__sprintf_chk@plt+0x6c72>
    a8d1:	fld    DWORD PTR [rip+0x19515]        # 23dec <__sprintf_chk@plt+0x2010c>
    a8d7:	fxch   st(1)
    a8d9:	fcomi  st,st(1)
    a8db:	jae    ade0 <__sprintf_chk@plt+0x7100>
    a8e1:	fstp   st(1)
    a8e3:	fnstcw WORD PTR [rsp+0x4e]
    a8e7:	movzx  eax,WORD PTR [rsp+0x4e]
    a8ec:	or     ah,0xc
    a8ef:	mov    WORD PTR [rsp+0x4c],ax
    a8f4:	fld    st(0)
    a8f6:	fldcw  WORD PTR [rsp+0x4c]
    a8fa:	fistp  QWORD PTR [rsp+0x20]
    a8fe:	fldcw  WORD PTR [rsp+0x4e]
    a902:	mov    rax,QWORD PTR [rsp+0x20]
    a907:	mov    QWORD PTR [rsp+0x20],rax
    a90c:	fild   QWORD PTR [rsp+0x20]
    a910:	test   rax,rax
    a913:	jns    a91b <__sprintf_chk@plt+0x6c3b>
    a915:	fadd   DWORD PTR [rip+0x194cd]        # 23de8 <__sprintf_chk@plt+0x20108>
    a91b:	mov    r8d,DWORD PTR [rsp+0x10]
    a920:	test   r8d,r8d
    a923:	jne    a950 <__sprintf_chk@plt+0x6c70>
    a925:	fucomi st,st(1)
    a927:	jp     a933 <__sprintf_chk@plt+0x6c53>
    a929:	fcomi  st,st(1)
    a92b:	fstp   st(1)
    a92d:	je     a952 <__sprintf_chk@plt+0x6c72>
    a92f:	fstp   st(0)
    a931:	jmp    a937 <__sprintf_chk@plt+0x6c57>
    a933:	fstp   st(0)
    a935:	fstp   st(0)
    a937:	add    rax,0x1
    a93b:	mov    QWORD PTR [rsp+0x10],rax
    a940:	fild   QWORD PTR [rsp+0x10]
    a944:	js     ae67 <__sprintf_chk@plt+0x7187>
    a94a:	jmp    a952 <__sprintf_chk@plt+0x6c72>
    a94c:	nop    DWORD PTR [rax+0x0]
    a950:	fstp   st(1)
    a952:	sub    rsp,0x10
    a956:	mov    rdx,0xffffffffffffffff
    a95d:	mov    esi,0x1
    a962:	xor    eax,eax
    a964:	mov    rbx,QWORD PTR [rsp+0x10]
    a969:	lea    rcx,[rip+0x19488]        # 23df8 <__sprintf_chk@plt+0x20118>
    a970:	fstp   TBYTE PTR [rsp]
    a973:	mov    rdi,rbx
    a976:	call   3ce0 <__sprintf_chk@plt>
    a97b:	mov    rdi,rbx
    a97e:	mov    ebx,0xffffffff
    a983:	call   3810 <strlen@plt>
    a988:	pop    rsi
    a989:	pop    rdi
    a98a:	mov    rdx,rax
    a98d:	mov    r12,rax
    a990:	mov    rbp,QWORD PTR [rsp+0x8]
    a995:	mov    rsi,QWORD PTR [rsp]
    a999:	sub    rbp,rdx
    a99c:	mov    rdi,rbp
    a99f:	call   3b80 <memmove@plt>
    a9a4:	lea    r8,[rbp+r12*1+0x0]
    a9a9:	test   BYTE PTR [rsp+0x48],0x4
    a9ae:	jne    a7b0 <__sprintf_chk@plt+0x6ad0>
    a9b4:	test   BYTE PTR [rsp+0x48],0x80
    a9b9:	je     a9d7 <__sprintf_chk@plt+0x6cf7>
    a9bb:	cmp    ebx,0xffffffff
    a9be:	je     ab38 <__sprintf_chk@plt+0x6e58>
    a9c4:	mov    eax,DWORD PTR [rsp+0x48]
    a9c8:	and    eax,0x100
    a9cd:	mov    ecx,eax
    a9cf:	or     ecx,ebx
    a9d1:	jne    ac88 <__sprintf_chk@plt+0x6fa8>
    a9d7:	mov    rax,QWORD PTR [rsp+0x8]
    a9dc:	mov    BYTE PTR [rax],0x0
    a9df:	mov    rax,QWORD PTR [rsp+0x88]
    a9e7:	sub    rax,QWORD PTR fs:0x28
    a9f0:	jne    b07b <__sprintf_chk@plt+0x739b>
    a9f6:	add    rsp,0x98
    a9fd:	mov    rax,rbp
    aa00:	pop    rbx
    aa01:	pop    rbp
    aa02:	pop    r12
    aa04:	pop    r13
    aa06:	pop    r14
    aa08:	pop    r15
    aa0a:	ret    
    aa0b:	nop    DWORD PTR [rax+rax*1+0x0]
    aa10:	mov    r13,rbx
    aa13:	mov    rsi,QWORD PTR [rsp+0x10]
    aa18:	xor    ebx,ebx
    aa1a:	jmp    a862 <__sprintf_chk@plt+0x6b82>
    aa1f:	nop
    aa20:	mov    ebx,DWORD PTR [rsp+0x20]
    aa24:	jmp    a9b4 <__sprintf_chk@plt+0x6cd4>
    aa26:	cs nop WORD PTR [rax+rax*1+0x0]
    aa30:	test   ecx,ecx
    aa32:	setne  cl
    aa35:	movzx  ecx,cl
    aa38:	add    ebx,0x1
    aa3b:	cmp    r8,r9
    aa3e:	ja     aea0 <__sprintf_chk@plt+0x71c0>
    aa44:	cmp    ebx,0x8
    aa47:	je     a72e <__sprintf_chk@plt+0x6a4e>
    aa4d:	mov    rax,rdi
    aa50:	xor    edx,edx
    aa52:	div    r8
    aa55:	mov    r9,rax
    aa58:	lea    eax,[rdx+rdx*4]
    aa5b:	xor    edx,edx
    aa5d:	lea    eax,[rsi+rax*2]
    aa60:	mov    esi,ecx
    aa62:	mov    rdi,r9
    aa65:	div    r11d
    aa68:	sar    esi,1
    aa6a:	lea    edx,[rsi+rdx*2]
    aa6d:	mov    esi,eax
    aa6f:	add    ecx,edx
    aa71:	cmp    r11d,edx
    aa74:	ja     aa30 <__sprintf_chk@plt+0x6d50>
    aa76:	cmp    r11d,ecx
    aa79:	setb   cl
    aa7c:	movzx  ecx,cl
    aa7f:	add    ecx,0x2
    aa82:	jmp    aa38 <__sprintf_chk@plt+0x6d58>
    aa84:	nop    DWORD PTR [rax+0x0]
    aa88:	fld    st(0)
    aa8a:	jmp    aaa0 <__sprintf_chk@plt+0x6dc0>
    aa8c:	nop    DWORD PTR [rax+0x0]
    aa90:	fxch   st(1)
    aa92:	jmp    aaa0 <__sprintf_chk@plt+0x6dc0>
    aa94:	nop    DWORD PTR [rax+0x0]
    aa98:	fxch   st(1)
    aa9a:	jmp    aaa0 <__sprintf_chk@plt+0x6dc0>
    aa9c:	fxch   st(1)
    aa9e:	xchg   ax,ax
    aaa0:	fstp   TBYTE PTR [rsp+0x20]
    aaa4:	sub    rsp,0x10
    aaa8:	mov    esi,0x1
    aaad:	xor    eax,eax
    aaaf:	mov    r12,QWORD PTR [rsp+0x10]
    aab4:	lea    rcx,[rip+0x19343]        # 23dfe <__sprintf_chk@plt+0x2011e>
    aabb:	mov    rdx,0xffffffffffffffff
    aac2:	mov    rdi,r12
    aac5:	fstp   TBYTE PTR [rsp]
    aac8:	call   3ce0 <__sprintf_chk@plt>
    aacd:	mov    rdi,r12
    aad0:	call   3810 <strlen@plt>
    aad5:	mov    rdx,rax
    aad8:	pop    rax
    aad9:	pop    rcx
    aada:	fld    TBYTE PTR [rsp+0x20]
    aade:	cmp    rdx,rbp
    aae1:	ja     aca0 <__sprintf_chk@plt+0x6fc0>
    aae7:	test   BYTE PTR [rsp+0x48],0x8
    aaec:	je     ab08 <__sprintf_chk@plt+0x6e28>
    aaee:	mov    rax,QWORD PTR [rsp]
    aaf2:	cmp    BYTE PTR [rax+rdx*1-0x1],0x30
    aaf7:	je     adc0 <__sprintf_chk@plt+0x70e0>
    aafd:	fstp   st(0)
    aaff:	jmp    ab0a <__sprintf_chk@plt+0x6e2a>
    ab01:	nop    DWORD PTR [rax+0x0]
    ab08:	fstp   st(0)
    ab0a:	mov    r12,rdx
    ab0d:	sub    r12,r15
    ab10:	jmp    a990 <__sprintf_chk@plt+0x6cb0>
    ab15:	nop    DWORD PTR [rax]
    ab18:	mov    r10d,DWORD PTR [rsp+0x48]
    ab1d:	xor    ecx,ecx
    ab1f:	xor    esi,esi
    ab21:	and    r10d,0x10
    ab25:	jne    a71b <__sprintf_chk@plt+0x6a3b>
    ab2b:	mov    ebx,0xffffffff
    ab30:	jmp    a72e <__sprintf_chk@plt+0x6a4e>
    ab35:	nop    DWORD PTR [rax]
    ab38:	mov    rcx,QWORD PTR [rsp+0x18]
    ab3d:	cmp    rcx,0x1
    ab41:	jbe    af5a <__sprintf_chk@plt+0x727a>
    ab47:	mov    edx,DWORD PTR [rsp+0x34]
    ab4b:	mov    ebx,0x1
    ab50:	mov    eax,0x1
    ab55:	nop    DWORD PTR [rax]
    ab58:	imul   rax,rdx
    ab5c:	cmp    rcx,rax
    ab5f:	jbe    ab69 <__sprintf_chk@plt+0x6e89>
    ab61:	add    ebx,0x1
    ab64:	cmp    ebx,0x8
    ab67:	jne    ab58 <__sprintf_chk@plt+0x6e78>
    ab69:	mov    ecx,DWORD PTR [rsp+0x48]
    ab6d:	mov    eax,ecx
    ab6f:	and    eax,0x100
    ab74:	and    ecx,0x40
    ab77:	je     ab98 <__sprintf_chk@plt+0x6eb8>
    ab79:	mov    rcx,QWORD PTR [rsp]
    ab7d:	lea    rdi,[rcx+0x288]
    ab84:	mov    BYTE PTR [rcx+0x287],0x20
    ab8b:	mov    QWORD PTR [rsp+0x8],rdi
    ab90:	test   ebx,ebx
    ab92:	je     b095 <__sprintf_chk@plt+0x73b5>
    ab98:	mov    r9d,DWORD PTR [rsp+0x30]
    ab9d:	test   r9d,r9d
    aba0:	jne    abab <__sprintf_chk@plt+0x6ecb>
    aba2:	cmp    ebx,0x1
    aba5:	je     ae80 <__sprintf_chk@plt+0x71a0>
    abab:	movsxd rbx,ebx
    abae:	lea    rcx,[rip+0x19283]        # 23e38 <__sprintf_chk@plt+0x20158>
    abb5:	mov    rdi,QWORD PTR [rsp+0x8]
    abba:	movzx  ecx,BYTE PTR [rcx+rbx*1]
    abbe:	lea    rdx,[rdi+0x1]
    abc2:	mov    BYTE PTR [rdi],cl
    abc4:	test   eax,eax
    abc6:	je     ae94 <__sprintf_chk@plt+0x71b4>
    abcc:	mov    r8d,DWORD PTR [rsp+0x30]
    abd1:	test   r8d,r8d
    abd4:	jne    adb0 <__sprintf_chk@plt+0x70d0>
    abda:	lea    rax,[rdx+0x1]
    abde:	mov    BYTE PTR [rdx],0x42
    abe1:	mov    QWORD PTR [rsp+0x8],rax
    abe6:	jmp    a9d7 <__sprintf_chk@plt+0x6cf7>
    abeb:	nop    DWORD PTR [rax+rax*1+0x0]
    abf0:	sub    rsp,0x10
    abf4:	mov    rdx,0xffffffffffffffff
    abfb:	mov    esi,0x1
    ac00:	xor    eax,eax
    ac02:	fld    st(0)
    ac04:	fstp   TBYTE PTR [rsp]
    ac07:	mov    r12,QWORD PTR [rsp+0x10]
    ac0c:	lea    rcx,[rip+0x191eb]        # 23dfe <__sprintf_chk@plt+0x2011e>
    ac13:	mov    rdi,r12
    ac16:	fstp   TBYTE PTR [rsp+0x30]
    ac1a:	call   3ce0 <__sprintf_chk@plt>
    ac1f:	mov    rdi,r12
    ac22:	call   3810 <strlen@plt>
    ac27:	pop    rsi
    ac28:	pop    rdi
    ac29:	fld    TBYTE PTR [rsp+0x20]
    ac2d:	cmp    rax,rbp
    ac30:	mov    rdx,rax
    ac33:	jbe    aae7 <__sprintf_chk@plt+0x6e07>
    ac39:	fld    DWORD PTR [rip+0x19205]        # 23e44 <__sprintf_chk@plt+0x20164>
    ac3f:	fmul   st(1),st
    ac41:	fdivp  st(1),st
    ac43:	sub    rsp,0x10
    ac47:	mov    rdx,0xffffffffffffffff
    ac4e:	xor    eax,eax
    ac50:	mov    r15,QWORD PTR [rsp+0x10]
    ac55:	lea    rcx,[rip+0x1919c]        # 23df8 <__sprintf_chk@plt+0x20118>
    ac5c:	mov    esi,0x1
    ac61:	mov    rdi,r15
    ac64:	fstp   TBYTE PTR [rsp]
    ac67:	call   3ce0 <__sprintf_chk@plt>
    ac6c:	mov    rdi,r15
    ac6f:	call   3810 <strlen@plt>
    ac74:	pop    r13
    ac76:	pop    r15
    ac78:	mov    rdx,rax
    ac7b:	mov    r12,rax
    ac7e:	jmp    a990 <__sprintf_chk@plt+0x6cb0>
    ac83:	nop    DWORD PTR [rax+rax*1+0x0]
    ac88:	test   BYTE PTR [rsp+0x48],0x40
    ac8d:	je     ab90 <__sprintf_chk@plt+0x6eb0>
    ac93:	jmp    ab79 <__sprintf_chk@plt+0x6e99>
    ac98:	nop    DWORD PTR [rax+rax*1+0x0]
    aca0:	fld    DWORD PTR [rip+0x1919e]        # 23e44 <__sprintf_chk@plt+0x20164>
    aca6:	fmul   st(1),st
    aca8:	fld    TBYTE PTR [rip+0x191a2]        # 23e50 <__sprintf_chk@plt+0x20170>
    acae:	fcomip st,st(2)
    acb0:	jbe    ac41 <__sprintf_chk@plt+0x6f61>
    acb2:	fld    DWORD PTR [rip+0x19134]        # 23dec <__sprintf_chk@plt+0x2010c>
    acb8:	fxch   st(2)
    acba:	fcomi  st,st(2)
    acbc:	jae    ae10 <__sprintf_chk@plt+0x7130>
    acc2:	fstp   st(2)
    acc4:	fxch   st(1)
    acc6:	fnstcw WORD PTR [rsp+0x4e]
    acca:	movzx  eax,WORD PTR [rsp+0x4e]
    accf:	or     ah,0xc
    acd2:	mov    WORD PTR [rsp+0x4c],ax
    acd7:	fld    st(0)
    acd9:	fldcw  WORD PTR [rsp+0x4c]
    acdd:	fistp  QWORD PTR [rsp+0x20]
    ace1:	fldcw  WORD PTR [rsp+0x4e]
    ace5:	mov    rax,QWORD PTR [rsp+0x20]
    acea:	mov    QWORD PTR [rsp+0x20],rax
    acef:	fild   QWORD PTR [rsp+0x20]
    acf3:	test   rax,rax
    acf6:	jns    acfe <__sprintf_chk@plt+0x701e>
    acf8:	fadd   DWORD PTR [rip+0x190ea]        # 23de8 <__sprintf_chk@plt+0x20108>
    acfe:	mov    edx,DWORD PTR [rsp+0x10]
    ad02:	test   edx,edx
    ad04:	jne    ad30 <__sprintf_chk@plt+0x7050>
    ad06:	fucomi st,st(1)
    ad08:	jp     ad14 <__sprintf_chk@plt+0x7034>
    ad0a:	fcomi  st,st(1)
    ad0c:	fstp   st(1)
    ad0e:	je     ad32 <__sprintf_chk@plt+0x7052>
    ad10:	fstp   st(0)
    ad12:	jmp    ad18 <__sprintf_chk@plt+0x7038>
    ad14:	fstp   st(0)
    ad16:	fstp   st(0)
    ad18:	add    rax,0x1
    ad1c:	mov    QWORD PTR [rsp+0x10],rax
    ad21:	fild   QWORD PTR [rsp+0x10]
    ad25:	js     ae72 <__sprintf_chk@plt+0x7192>
    ad2b:	jmp    ad32 <__sprintf_chk@plt+0x7052>
    ad2d:	nop    DWORD PTR [rax]
    ad30:	fstp   st(1)
    ad32:	fxch   st(1)
    ad34:	jmp    ac41 <__sprintf_chk@plt+0x6f61>
    ad39:	nop    DWORD PTR [rax+0x0]
    ad40:	mov    rax,rdi
    ad43:	movsxd rcx,ecx
    ad46:	and    eax,0x1
    ad49:	add    rax,rcx
    ad4c:	setne  al
    ad4f:	movzx  eax,al
    ad52:	add    esi,eax
    ad54:	cmp    esi,0x5
    ad57:	jg     a74e <__sprintf_chk@plt+0x6a6e>
    ad5d:	jmp    a768 <__sprintf_chk@plt+0x6a88>
    ad62:	nop    WORD PTR [rax+rax*1+0x0]
    ad68:	mov    ecx,0x2
    ad6d:	mov    eax,0x3
    ad72:	cmovb  ecx,eax
    ad75:	jmp    a70c <__sprintf_chk@plt+0x6a2c>
    ad7a:	nop    WORD PTR [rax+rax*1+0x0]
    ad80:	fnstcw WORD PTR [rsp+0x4e]
    ad84:	fsubr  st(1),st
    ad86:	fxch   st(1)
    ad88:	movzx  eax,WORD PTR [rsp+0x4e]
    ad8d:	or     ah,0xc
    ad90:	mov    WORD PTR [rsp+0x4c],ax
    ad95:	fldcw  WORD PTR [rsp+0x4c]
    ad99:	fistp  QWORD PTR [rsp+0x20]
    ad9d:	fldcw  WORD PTR [rsp+0x4e]
    ada1:	mov    rax,QWORD PTR [rsp+0x20]
    ada6:	btc    rax,0x3f
    adab:	jmp    a662 <__sprintf_chk@plt+0x6982>
    adb0:	mov    BYTE PTR [rdi+0x1],0x69
    adb4:	lea    rdx,[rdi+0x2]
    adb8:	jmp    abda <__sprintf_chk@plt+0x6efa>
    adbd:	nop    DWORD PTR [rax]
    adc0:	fld    DWORD PTR [rip+0x1907e]        # 23e44 <__sprintf_chk@plt+0x20164>
    adc6:	cmp    DWORD PTR [rsp+0x10],0x1
    adcb:	fmul   st(1),st
    adcd:	jne    aca8 <__sprintf_chk@plt+0x6fc8>
    add3:	jmp    ac41 <__sprintf_chk@plt+0x6f61>
    add8:	nop    DWORD PTR [rax+rax*1+0x0]
    ade0:	fnstcw WORD PTR [rsp+0x4e]
    ade4:	fsubr  st(1),st
    ade6:	fxch   st(1)
    ade8:	movzx  eax,WORD PTR [rsp+0x4e]
    aded:	or     ah,0xc
    adf0:	mov    WORD PTR [rsp+0x4c],ax
    adf5:	fldcw  WORD PTR [rsp+0x4c]
    adf9:	fistp  QWORD PTR [rsp+0x20]
    adfd:	fldcw  WORD PTR [rsp+0x4e]
    ae01:	mov    rax,QWORD PTR [rsp+0x20]
    ae06:	btc    rax,0x3f
    ae0b:	jmp    a907 <__sprintf_chk@plt+0x6c27>
    ae10:	fnstcw WORD PTR [rsp+0x4e]
    ae14:	fsubr  st(2),st
    ae16:	fxch   st(2)
    ae18:	movzx  eax,WORD PTR [rsp+0x4e]
    ae1d:	or     ah,0xc
    ae20:	mov    WORD PTR [rsp+0x4c],ax
    ae25:	fldcw  WORD PTR [rsp+0x4c]
    ae29:	fistp  QWORD PTR [rsp+0x20]
    ae2d:	fldcw  WORD PTR [rsp+0x4e]
    ae31:	fxch   st(1)
    ae33:	mov    rax,QWORD PTR [rsp+0x20]
    ae38:	btc    rax,0x3f
    ae3d:	jmp    acea <__sprintf_chk@plt+0x700a>
    ae42:	cmp    ebx,0x8
    ae45:	je     a768 <__sprintf_chk@plt+0x6a88>
    ae4b:	add    ebx,0x1
    ae4e:	test   BYTE PTR [rsp+0x48],0x8
    ae53:	je     afca <__sprintf_chk@plt+0x72ea>
    ae59:	mov    BYTE PTR [r8-0x1],0x31
    ae5e:	lea    rbp,[r8-0x1]
    ae62:	jmp    a9a9 <__sprintf_chk@plt+0x6cc9>
    ae67:	fadd   DWORD PTR [rip+0x18f7b]        # 23de8 <__sprintf_chk@plt+0x20108>
    ae6d:	jmp    a952 <__sprintf_chk@plt+0x6c72>
    ae72:	fadd   DWORD PTR [rip+0x18f70]        # 23de8 <__sprintf_chk@plt+0x20108>
    ae78:	fxch   st(1)
    ae7a:	jmp    ac41 <__sprintf_chk@plt+0x6f61>
    ae7f:	nop
    ae80:	mov    rcx,QWORD PTR [rsp+0x8]
    ae85:	mov    BYTE PTR [rcx],0x6b
    ae88:	lea    rdx,[rcx+0x1]
    ae8c:	test   eax,eax
    ae8e:	jne    abda <__sprintf_chk@plt+0x6efa>
    ae94:	mov    QWORD PTR [rsp+0x8],rdx
    ae99:	jmp    a9d7 <__sprintf_chk@plt+0x6cf7>
    ae9e:	xchg   ax,ax
    aea0:	cmp    r9,0x9
    aea4:	ja     a72e <__sprintf_chk@plt+0x6a4e>
    aeaa:	cmp    DWORD PTR [rsp+0x10],0x1
    aeaf:	je     af30 <__sprintf_chk@plt+0x7250>
    aeb1:	mov    r12d,DWORD PTR [rsp+0x10]
    aeb6:	test   r12d,r12d
    aeb9:	jne    af3c <__sprintf_chk@plt+0x725c>
    aebf:	test   ecx,ecx
    aec1:	je     af3c <__sprintf_chk@plt+0x725c>
    aec3:	lea    edx,[rax+0x1]
    aec6:	cmp    eax,0x9
    aec9:	je     afb5 <__sprintf_chk@plt+0x72d5>
    aecf:	lea    eax,[rdx+0x30]
    aed2:	mov    rcx,QWORD PTR [rsp]
    aed6:	mov    r9d,ebp
    aed9:	lea    r8,[rcx+0x286]
    aee0:	mov    BYTE PTR [rcx+0x286],al
    aee6:	sub    r8,rbp
    aee9:	cmp    ebp,0x8
    aeec:	jae    af61 <__sprintf_chk@plt+0x7281>
    aeee:	test   bpl,0x4
    aef2:	jne    b066 <__sprintf_chk@plt+0x7386>
    aef8:	test   r9d,r9d
    aefb:	je     af0a <__sprintf_chk@plt+0x722a>
    aefd:	movzx  eax,BYTE PTR [r15]
    af01:	mov    BYTE PTR [r8],al
    af04:	test   r9b,0x2
    af08:	jne    af1e <__sprintf_chk@plt+0x723e>
    af0a:	xor    ecx,ecx
    af0c:	xor    esi,esi
    af0e:	cmp    DWORD PTR [rsp+0x10],0x1
    af13:	jne    a73e <__sprintf_chk@plt+0x6a5e>
    af19:	jmp    a768 <__sprintf_chk@plt+0x6a88>
    af1e:	movzx  eax,WORD PTR [r15+r9*1-0x2]
    af24:	mov    WORD PTR [r8+r9*1-0x2],ax
    af2a:	jmp    af0a <__sprintf_chk@plt+0x722a>
    af2c:	nop    DWORD PTR [rax+0x0]
    af30:	mov    edx,eax
    af32:	and    edx,0x1
    af35:	add    edx,ecx
    af37:	cmp    edx,0x2
    af3a:	jg     aec3 <__sprintf_chk@plt+0x71e3>
    af3c:	test   eax,eax
    af3e:	jne    b0a7 <__sprintf_chk@plt+0x73c7>
    af44:	mov    r8,QWORD PTR [rsp+0x8]
    af49:	test   BYTE PTR [rsp+0x48],0x8
    af4e:	jne    af0c <__sprintf_chk@plt+0x722c>
    af50:	mov    eax,0x30
    af55:	jmp    aed2 <__sprintf_chk@plt+0x71f2>
    af5a:	xor    ebx,ebx
    af5c:	jmp    a9c4 <__sprintf_chk@plt+0x6ce4>
    af61:	mov    rax,QWORD PTR [r15]
    af64:	lea    rcx,[r8+0x8]
    af68:	mov    r9,r8
    af6b:	mov    rsi,r15
    af6e:	and    rcx,0xfffffffffffffff8
    af72:	mov    QWORD PTR [r8],rax
    af75:	sub    r9,rcx
    af78:	mov    eax,ebp
    af7a:	mov    rdx,QWORD PTR [r15+rax*1-0x8]
    af7f:	sub    rsi,r9
    af82:	add    r9d,ebp
    af85:	and    r9d,0xfffffff8
    af89:	mov    QWORD PTR [r8+rax*1-0x8],rdx
    af8e:	cmp    r9d,0x8
    af92:	jb     af0a <__sprintf_chk@plt+0x722a>
    af98:	and    r9d,0xfffffff8
    af9c:	xor    eax,eax
    af9e:	mov    edx,eax
    afa0:	add    eax,0x8
    afa3:	mov    r11,QWORD PTR [rsi+rdx*1]
    afa7:	mov    QWORD PTR [rcx+rdx*1],r11
    afab:	cmp    eax,r9d
    afae:	jb     af9e <__sprintf_chk@plt+0x72be>
    afb0:	jmp    af0a <__sprintf_chk@plt+0x722a>
    afb5:	lea    rdi,[r9+0x1]
    afb9:	cmp    r9,0x9
    afbd:	je     b05c <__sprintf_chk@plt+0x737c>
    afc3:	xor    ecx,ecx
    afc5:	jmp    af44 <__sprintf_chk@plt+0x7264>
    afca:	mov    rax,rbp
    afcd:	mov    BYTE PTR [r8-0x1],0x30
    afd2:	not    rax
    afd5:	add    r8,rax
    afd8:	mov    eax,ebp
    afda:	cmp    ebp,0x8
    afdd:	jae    b010 <__sprintf_chk@plt+0x7330>
    afdf:	and    ebp,0x4
    afe2:	jne    b080 <__sprintf_chk@plt+0x73a0>
    afe8:	test   eax,eax
    afea:	je     ae59 <__sprintf_chk@plt+0x7179>
    aff0:	movzx  edx,BYTE PTR [r15]
    aff4:	mov    BYTE PTR [r8],dl
    aff7:	test   al,0x2
    aff9:	je     ae59 <__sprintf_chk@plt+0x7179>
    afff:	movzx  edx,WORD PTR [r15+rax*1-0x2]
    b005:	mov    WORD PTR [r8+rax*1-0x2],dx
    b00b:	jmp    ae59 <__sprintf_chk@plt+0x7179>
    b010:	mov    rax,QWORD PTR [r15]
    b013:	lea    rcx,[r8+0x8]
    b017:	and    rcx,0xfffffffffffffff8
    b01b:	mov    QWORD PTR [r8],rax
    b01e:	mov    eax,ebp
    b020:	mov    rdx,QWORD PTR [r15+rax*1-0x8]
    b025:	mov    QWORD PTR [r8+rax*1-0x8],rdx
    b02a:	mov    rax,r8
    b02d:	sub    rax,rcx
    b030:	sub    r15,rax
    b033:	add    eax,ebp
    b035:	and    eax,0xfffffff8
    b038:	cmp    eax,0x8
    b03b:	jb     ae59 <__sprintf_chk@plt+0x7179>
    b041:	and    eax,0xfffffff8
    b044:	xor    edx,edx
    b046:	mov    esi,edx
    b048:	add    edx,0x8
    b04b:	mov    rdi,QWORD PTR [r15+rsi*1]
    b04f:	mov    QWORD PTR [rcx+rsi*1],rdi
    b053:	cmp    edx,eax
    b055:	jb     b046 <__sprintf_chk@plt+0x7366>
    b057:	jmp    ae59 <__sprintf_chk@plt+0x7179>
    b05c:	mov    r8,QWORD PTR [rsp+0x8]
    b061:	jmp    af0a <__sprintf_chk@plt+0x722a>
    b066:	mov    eax,DWORD PTR [r15]
    b069:	mov    DWORD PTR [r8],eax
    b06c:	mov    eax,DWORD PTR [r15+r9*1-0x4]
    b071:	mov    DWORD PTR [r8+r9*1-0x4],eax
    b076:	jmp    af0a <__sprintf_chk@plt+0x722a>
    b07b:	call   3840 <__stack_chk_fail@plt>
    b080:	mov    edx,DWORD PTR [r15]
    b083:	mov    DWORD PTR [r8],edx
    b086:	mov    edx,DWORD PTR [r15+rax*1-0x4]
    b08b:	mov    DWORD PTR [r8+rax*1-0x4],edx
    b090:	jmp    ae59 <__sprintf_chk@plt+0x7179>
    b095:	mov    rdx,QWORD PTR [rsp+0x8]
    b09a:	test   eax,eax
    b09c:	jne    abda <__sprintf_chk@plt+0x6efa>
    b0a2:	jmp    a9d7 <__sprintf_chk@plt+0x6cf7>
    b0a7:	add    eax,0x30
    b0aa:	jmp    aed2 <__sprintf_chk@plt+0x71f2>
    b0af:	nop
    b0b0:	endbr64 
    b0b4:	push   r13
    b0b6:	mov    r13,rsi
    b0b9:	push   r12
    b0bb:	push   rbp
    b0bc:	mov    rbp,rdx
    b0bf:	push   rbx
    b0c0:	mov    rbx,rdi
    b0c3:	sub    rsp,0x18
    b0c7:	mov    rax,QWORD PTR fs:0x28
    b0d0:	mov    QWORD PTR [rsp+0x8],rax
    b0d5:	xor    eax,eax
    b0d7:	test   rdi,rdi
    b0da:	je     b1f8 <__sprintf_chk@plt+0x7518>
    b0e0:	xor    r12d,r12d
    b0e3:	cmp    BYTE PTR [rbx],0x27
    b0e6:	jne    b0f2 <__sprintf_chk@plt+0x7412>
    b0e8:	add    rbx,0x1
    b0ec:	mov    r12d,0x4
    b0f2:	mov    ecx,0x4
    b0f7:	lea    rdx,[rip+0x18d32]        # 23e30 <__sprintf_chk@plt+0x20150>
    b0fe:	lea    rsi,[rip+0x2091b]        # 2ba20 <__sprintf_chk@plt+0x27d40>
    b105:	mov    rdi,rbx
    b108:	call   5a30 <__sprintf_chk@plt+0x1d50>
    b10d:	test   eax,eax
    b10f:	js     b150 <__sprintf_chk@plt+0x7470>
    b111:	cdqe   
    b113:	lea    rdx,[rip+0x18d16]        # 23e30 <__sprintf_chk@plt+0x20150>
    b11a:	mov    QWORD PTR [rbp+0x0],0x1
    b122:	xor    r8d,r8d
    b125:	or     r12d,DWORD PTR [rdx+rax*4]
    b129:	mov    DWORD PTR [r13+0x0],r12d
    b12d:	mov    rax,QWORD PTR [rsp+0x8]
    b132:	sub    rax,QWORD PTR fs:0x28
    b13b:	jne    b286 <__sprintf_chk@plt+0x75a6>
    b141:	add    rsp,0x18
    b145:	mov    eax,r8d
    b148:	pop    rbx
    b149:	pop    rbp
    b14a:	pop    r12
    b14c:	pop    r13
    b14e:	ret    
    b14f:	nop
    b150:	lea    r8,[rip+0x18cc7]        # 23e1e <__sprintf_chk@plt+0x2013e>
    b157:	mov    rsi,rsp
    b15a:	mov    rcx,rbp
    b15d:	xor    edx,edx
    b15f:	mov    rdi,rbx
    b162:	call   ed50 <__sprintf_chk@plt+0xb070>
    b167:	mov    r8d,eax
    b16a:	test   eax,eax
    b16c:	jne    b1b0 <__sprintf_chk@plt+0x74d0>
    b16e:	movzx  eax,BYTE PTR [rbx]
    b171:	mov    rdx,QWORD PTR [rsp]
    b175:	sub    eax,0x30
    b178:	cmp    al,0x9
    b17a:	ja     b18f <__sprintf_chk@plt+0x74af>
    b17c:	jmp    b1a6 <__sprintf_chk@plt+0x74c6>
    b17e:	xchg   ax,ax
    b180:	movzx  eax,BYTE PTR [rbx+0x1]
    b184:	add    rbx,0x1
    b188:	sub    eax,0x30
    b18b:	cmp    al,0x9
    b18d:	jbe    b1a6 <__sprintf_chk@plt+0x74c6>
    b18f:	cmp    rdx,rbx
    b192:	jne    b180 <__sprintf_chk@plt+0x74a0>
    b194:	cmp    BYTE PTR [rdx-0x1],0x42
    b198:	je     b258 <__sprintf_chk@plt+0x7578>
    b19e:	or     r12b,0x80
    b1a2:	or     r12d,0x20
    b1a6:	mov    rax,QWORD PTR [rbp+0x0]
    b1aa:	mov    DWORD PTR [r13+0x0],r12d
    b1ae:	jmp    b1bc <__sprintf_chk@plt+0x74dc>
    b1b0:	mov    DWORD PTR [r13+0x0],0x0
    b1b8:	mov    rax,QWORD PTR [rbp+0x0]
    b1bc:	test   rax,rax
    b1bf:	jne    b12d <__sprintf_chk@plt+0x744d>
    b1c5:	lea    rdi,[rip+0x18c42]        # 23e0e <__sprintf_chk@plt+0x2012e>
    b1cc:	call   36c0 <getenv@plt>
    b1d1:	mov    r8d,0x4
    b1d7:	cmp    rax,0x1
    b1db:	sbb    rax,rax
    b1de:	and    eax,0x200
    b1e3:	add    rax,0x200
    b1e9:	mov    QWORD PTR [rbp+0x0],rax
    b1ed:	jmp    b12d <__sprintf_chk@plt+0x744d>
    b1f2:	nop    WORD PTR [rax+rax*1+0x0]
    b1f8:	lea    rdi,[rip+0x16ef3]        # 220f2 <__sprintf_chk@plt+0x1e412>
    b1ff:	call   36c0 <getenv@plt>
    b204:	mov    rbx,rax
    b207:	test   rax,rax
    b20a:	jne    b0e0 <__sprintf_chk@plt+0x7400>
    b210:	lea    rdi,[rip+0x18bed]        # 23e04 <__sprintf_chk@plt+0x20124>
    b217:	call   36c0 <getenv@plt>
    b21c:	mov    rbx,rax
    b21f:	test   rax,rax
    b222:	jne    b0e0 <__sprintf_chk@plt+0x7400>
    b228:	lea    rdi,[rip+0x18bdf]        # 23e0e <__sprintf_chk@plt+0x2012e>
    b22f:	call   36c0 <getenv@plt>
    b234:	test   rax,rax
    b237:	je     b26e <__sprintf_chk@plt+0x758e>
    b239:	mov    QWORD PTR [rbp+0x0],0x200
    b241:	xor    r8d,r8d
    b244:	mov    DWORD PTR [r13+0x0],0x0
    b24c:	jmp    b12d <__sprintf_chk@plt+0x744d>
    b251:	nop    DWORD PTR [rax+0x0]
    b258:	or     r12d,0x180
    b25f:	cmp    BYTE PTR [rdx-0x2],0x69
    b263:	jne    b1a6 <__sprintf_chk@plt+0x74c6>
    b269:	jmp    b1a2 <__sprintf_chk@plt+0x74c2>
    b26e:	mov    QWORD PTR [rbp+0x0],0x400
    b276:	xor    r8d,r8d
    b279:	mov    DWORD PTR [r13+0x0],0x0
    b281:	jmp    b12d <__sprintf_chk@plt+0x744d>
    b286:	call   3840 <__stack_chk_fail@plt>
    b28b:	nop    DWORD PTR [rax+rax*1+0x0]
    b290:	endbr64 
    b294:	mov    rax,QWORD PTR [rdi]
    b297:	xor    edx,edx
    b299:	div    rsi
    b29c:	mov    rax,rdx
    b29f:	ret    
    b2a0:	endbr64 
    b2a4:	mov    rax,QWORD PTR [rsi]
    b2a7:	cmp    QWORD PTR [rdi],rax
    b2aa:	sete   al
    b2ad:	ret    
    b2ae:	xchg   ax,ax
    b2b0:	endbr64 
    b2b4:	push   r12
    b2b6:	push   rbx
    b2b7:	mov    rbx,rdi
    b2ba:	mov    edi,0x18
    b2bf:	sub    rsp,0x8
    b2c3:	call   3a70 <malloc@plt>
    b2c8:	mov    r12,rax
    b2cb:	test   rax,rax
    b2ce:	je     b308 <__sprintf_chk@plt+0x7628>
    b2d0:	mov    r8,QWORD PTR [rip+0x20cf1]        # 2bfc8 <__sprintf_chk@plt+0x282e8>
    b2d7:	lea    rcx,[rip+0xffffffffffffffc2]        # b2a0 <__sprintf_chk@plt+0x75c0>
    b2de:	xor    esi,esi
    b2e0:	mov    edi,0x3fd
    b2e5:	lea    rdx,[rip+0xffffffffffffffa4]        # b290 <__sprintf_chk@plt+0x75b0>
    b2ec:	call   9b70 <__sprintf_chk@plt+0x5e90>
    b2f1:	mov    QWORD PTR [r12],rax
    b2f5:	test   rax,rax
    b2f8:	je     b318 <__sprintf_chk@plt+0x7638>
    b2fa:	mov    QWORD PTR [r12+0x8],rbx
    b2ff:	mov    QWORD PTR [r12+0x10],0x0
    b308:	add    rsp,0x8
    b30c:	mov    rax,r12
    b30f:	pop    rbx
    b310:	pop    r12
    b312:	ret    
    b313:	nop    DWORD PTR [rax+rax*1+0x0]
    b318:	mov    rdi,r12
    b31b:	xor    r12d,r12d
    b31e:	call   3680 <free@plt>
    b323:	jmp    b308 <__sprintf_chk@plt+0x7628>
    b325:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    b330:	endbr64 
    b334:	push   rbp
    b335:	mov    rbp,rdi
    b338:	mov    rdi,QWORD PTR [rdi]
    b33b:	call   9d20 <__sprintf_chk@plt+0x6040>
    b340:	mov    rdi,QWORD PTR [rbp+0x10]
    b344:	call   3680 <free@plt>
    b349:	mov    rdi,rbp
    b34c:	pop    rbp
    b34d:	jmp    3680 <free@plt>
    b352:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    b35d:	nop    DWORD PTR [rax]
    b360:	endbr64 
    b364:	push   r12
    b366:	mov    r12,rsi
    b369:	push   rbp
    b36a:	mov    rbp,rdi
    b36d:	push   rbx
    b36e:	mov    rbx,QWORD PTR [rdi+0x10]
    b372:	test   rbx,rbx
    b375:	je     b3c8 <__sprintf_chk@plt+0x76e8>
    b377:	cmp    QWORD PTR [rbx],rsi
    b37a:	je     b3f0 <__sprintf_chk@plt+0x7710>
    b37c:	mov    QWORD PTR [rbx],r12
    b37f:	mov    rdi,QWORD PTR [rbp+0x0]
    b383:	mov    rsi,rbx
    b386:	call   a230 <__sprintf_chk@plt+0x6550>
    b38b:	test   rax,rax
    b38e:	je     b3e0 <__sprintf_chk@plt+0x7700>
    b390:	cmp    rbx,rax
    b393:	je     b3a8 <__sprintf_chk@plt+0x76c8>
    b395:	mov    rax,QWORD PTR [rax+0x8]
    b399:	mov    QWORD PTR [rbx+0x8],rax
    b39d:	pop    rbx
    b39e:	pop    rbp
    b39f:	pop    r12
    b3a1:	ret    
    b3a2:	nop    WORD PTR [rax+rax*1+0x0]
    b3a8:	mov    rax,QWORD PTR [rbp+0x8]
    b3ac:	mov    QWORD PTR [rbp+0x10],0x0
    b3b4:	lea    rdx,[rax+0x1]
    b3b8:	mov    QWORD PTR [rbp+0x8],rdx
    b3bc:	mov    QWORD PTR [rbx+0x8],rax
    b3c0:	pop    rbx
    b3c1:	pop    rbp
    b3c2:	pop    r12
    b3c4:	ret    
    b3c5:	nop    DWORD PTR [rax]
    b3c8:	mov    edi,0x10
    b3cd:	call   3a70 <malloc@plt>
    b3d2:	mov    QWORD PTR [rbp+0x10],rax
    b3d6:	mov    rbx,rax
    b3d9:	test   rax,rax
    b3dc:	jne    b37c <__sprintf_chk@plt+0x769c>
    b3de:	xchg   ax,ax
    b3e0:	mov    rax,0xffffffffffffffff
    b3e7:	jmp    b39d <__sprintf_chk@plt+0x76bd>
    b3e9:	nop    DWORD PTR [rax+0x0]
    b3f0:	mov    rax,QWORD PTR [rbx+0x8]
    b3f4:	pop    rbx
    b3f5:	pop    rbp
    b3f6:	pop    r12
    b3f8:	ret    
    b3f9:	nop    DWORD PTR [rax+0x0]
    b400:	endbr64 
    b404:	mov    BYTE PTR [rsi+0x14],0x0
    b408:	lea    r8,[rsi+0x14]
    b40c:	movabs rcx,0xcccccccccccccccd
    b416:	test   rdi,rdi
    b419:	js     b450 <__sprintf_chk@plt+0x7770>
    b41b:	nop    DWORD PTR [rax+rax*1+0x0]
    b420:	mov    rax,rdi
    b423:	sub    r8,0x1
    b427:	mul    rcx
    b42a:	shr    rdx,0x3
    b42e:	lea    rax,[rdx+rdx*4]
    b432:	add    rax,rax
    b435:	sub    rdi,rax
    b438:	add    edi,0x30
    b43b:	mov    BYTE PTR [r8],dil
    b43e:	mov    rdi,rdx
    b441:	test   rdx,rdx
    b444:	jne    b420 <__sprintf_chk@plt+0x7740>
    b446:	mov    rax,r8
    b449:	ret    
    b44a:	nop    WORD PTR [rax+rax*1+0x0]
    b450:	movabs r9,0x6666666666666667
    b45a:	mov    esi,0x30
    b45f:	nop
    b460:	mov    rax,rdi
    b463:	mov    rcx,r8
    b466:	sub    r8,0x1
    b46a:	imul   r9
    b46d:	mov    rax,rdi
    b470:	sar    rax,0x3f
    b474:	sar    rdx,0x2
    b478:	sub    rdx,rax
    b47b:	lea    rax,[rdx+rdx*4]
    b47f:	lea    eax,[rsi+rax*2]
    b482:	sub    eax,edi
    b484:	mov    rdi,rdx
    b487:	mov    BYTE PTR [r8],al
    b48a:	test   rdx,rdx
    b48d:	jne    b460 <__sprintf_chk@plt+0x7780>
    b48f:	mov    BYTE PTR [r8-0x1],0x2d
    b494:	lea    r8,[rcx-0x2]
    b498:	mov    rax,r8
    b49b:	ret    
    b49c:	nop    DWORD PTR [rax+0x0]
    b4a0:	endbr64 
    b4a4:	push   rbp
    b4a5:	mov    ebp,edi
    b4a7:	call   3a50 <wcwidth@plt>
    b4ac:	test   eax,eax
    b4ae:	js     b4b8 <__sprintf_chk@plt+0x77d8>
    b4b0:	pop    rbp
    b4b1:	ret    
    b4b2:	nop    WORD PTR [rax+rax*1+0x0]
    b4b8:	mov    edi,ebp
    b4ba:	call   3760 <iswcntrl@plt>
    b4bf:	pop    rbp
    b4c0:	test   eax,eax
    b4c2:	sete   al
    b4c5:	movzx  eax,al
    b4c8:	ret    
    b4c9:	nop    DWORD PTR [rax+0x0]
    b4d0:	endbr64 
    b4d4:	push   rbp
    b4d5:	mov    rbp,rdi
    b4d8:	push   rbx
    b4d9:	mov    rbx,rsi
    b4dc:	lea    rax,[rbx+0x18]
    b4e0:	sub    rsp,0x8
    b4e4:	mov    rsi,QWORD PTR [rsi]
    b4e7:	mov    rdx,QWORD PTR [rbx+0x8]
    b4eb:	cmp    rsi,rax
    b4ee:	je     b510 <__sprintf_chk@plt+0x7830>
    b4f0:	mov    QWORD PTR [rdi],rsi
    b4f3:	movzx  eax,BYTE PTR [rbx+0x10]
    b4f7:	mov    QWORD PTR [rbp+0x8],rdx
    b4fb:	mov    BYTE PTR [rbp+0x10],al
    b4fe:	test   al,al
    b500:	je     b508 <__sprintf_chk@plt+0x7828>
    b502:	mov    eax,DWORD PTR [rbx+0x14]
    b505:	mov    DWORD PTR [rbp+0x14],eax
    b508:	add    rsp,0x8
    b50c:	pop    rbx
    b50d:	pop    rbp
    b50e:	ret    
    b50f:	nop
    b510:	lea    rcx,[rdi+0x18]
    b514:	mov    rdi,rcx
    b517:	call   3a00 <memcpy@plt>
    b51c:	mov    rdx,QWORD PTR [rbx+0x8]
    b520:	mov    QWORD PTR [rbp+0x0],rax
    b524:	jmp    b4f3 <__sprintf_chk@plt+0x7813>
    b526:	cs nop WORD PTR [rax+rax*1+0x0]
    b530:	endbr64 
    b534:	mov    eax,edi
    b536:	lea    rdx,[rip+0x18923]        # 23e60 <__sprintf_chk@plt+0x20180>
    b53d:	mov    ecx,edi
    b53f:	shr    al,0x5
    b542:	and    eax,0x7
    b545:	mov    eax,DWORD PTR [rdx+rax*4]
    b548:	shr    eax,cl
    b54a:	and    eax,0x1
    b54d:	ret    
    b54e:	xchg   ax,ax
    b550:	push   r12
    b552:	push   rbp
    b553:	lea    rbp,[rdi+0x4]
    b557:	push   rbx
    b558:	cmp    BYTE PTR [rdi],0x0
    b55b:	mov    rbx,rdi
    b55e:	jne    b5b7 <__sprintf_chk@plt+0x78d7>
    b560:	mov    rdx,QWORD PTR [rdi+0x10]
    b564:	lea    rsi,[rip+0x188f5]        # 23e60 <__sprintf_chk@plt+0x20180>
    b56b:	movzx  ecx,BYTE PTR [rdx]
    b56e:	mov    eax,ecx
    b570:	shr    al,0x5
    b573:	and    eax,0x7
    b576:	mov    eax,DWORD PTR [rsi+rax*4]
    b579:	shr    eax,cl
    b57b:	test   al,0x1
    b57d:	je     b5a0 <__sprintf_chk@plt+0x78c0>
    b57f:	mov    QWORD PTR [rdi+0x18],0x1
    b587:	movsx  eax,BYTE PTR [rdx]
    b58a:	mov    BYTE PTR [rdi+0x20],0x1
    b58e:	mov    DWORD PTR [rdi+0x24],eax
    b591:	mov    BYTE PTR [rbx+0xc],0x1
    b595:	pop    rbx
    b596:	pop    rbp
    b597:	pop    r12
    b599:	ret    
    b59a:	nop    WORD PTR [rax+rax*1+0x0]
    b5a0:	lea    rbp,[rdi+0x4]
    b5a4:	mov    rdi,rbp
    b5a7:	call   3c70 <mbsinit@plt>
    b5ac:	test   eax,eax
    b5ae:	je     b6a0 <__sprintf_chk@plt+0x79c0>
    b5b4:	mov    BYTE PTR [rbx],0x1
    b5b7:	call   3800 <__ctype_get_mb_cur_max@plt>
    b5bc:	mov    r12,QWORD PTR [rbx+0x10]
    b5c0:	mov    rsi,rax
    b5c3:	mov    rdi,r12
    b5c6:	call   db00 <__sprintf_chk@plt+0x9e20>
    b5cb:	lea    rdi,[rbx+0x24]
    b5cf:	mov    rcx,rbp
    b5d2:	mov    rsi,r12
    b5d5:	mov    rdx,rax
    b5d8:	call   11a40 <__sprintf_chk@plt+0xdd60>
    b5dd:	mov    QWORD PTR [rbx+0x18],rax
    b5e1:	cmp    rax,0xffffffffffffffff
    b5e5:	je     b630 <__sprintf_chk@plt+0x7950>
    b5e7:	cmp    rax,0xfffffffffffffffe
    b5eb:	je     b648 <__sprintf_chk@plt+0x7968>
    b5ed:	test   rax,rax
    b5f0:	jne    b60a <__sprintf_chk@plt+0x792a>
    b5f2:	mov    rax,QWORD PTR [rbx+0x10]
    b5f6:	mov    QWORD PTR [rbx+0x18],0x1
    b5fe:	cmp    BYTE PTR [rax],0x0
    b601:	jne    b681 <__sprintf_chk@plt+0x79a1>
    b603:	mov    eax,DWORD PTR [rbx+0x24]
    b606:	test   eax,eax
    b608:	jne    b662 <__sprintf_chk@plt+0x7982>
    b60a:	mov    BYTE PTR [rbx+0x20],0x1
    b60e:	mov    rdi,rbp
    b611:	call   3c70 <mbsinit@plt>
    b616:	test   eax,eax
    b618:	je     b591 <__sprintf_chk@plt+0x78b1>
    b61e:	mov    BYTE PTR [rbx],0x0
    b621:	mov    BYTE PTR [rbx+0xc],0x1
    b625:	pop    rbx
    b626:	pop    rbp
    b627:	pop    r12
    b629:	ret    
    b62a:	nop    WORD PTR [rax+rax*1+0x0]
    b630:	mov    QWORD PTR [rbx+0x18],0x1
    b638:	mov    BYTE PTR [rbx+0x20],0x0
    b63c:	mov    BYTE PTR [rbx+0xc],0x1
    b640:	pop    rbx
    b641:	pop    rbp
    b642:	pop    r12
    b644:	ret    
    b645:	nop    DWORD PTR [rax]
    b648:	mov    rdi,QWORD PTR [rbx+0x10]
    b64c:	call   3810 <strlen@plt>
    b651:	mov    BYTE PTR [rbx+0x20],0x0
    b655:	mov    QWORD PTR [rbx+0x18],rax
    b659:	mov    BYTE PTR [rbx+0xc],0x1
    b65d:	pop    rbx
    b65e:	pop    rbp
    b65f:	pop    r12
    b661:	ret    
    b662:	lea    rcx,[rip+0x18817]        # 23e80 <__sprintf_chk@plt+0x201a0>
    b669:	mov    edx,0xb3
    b66e:	lea    rsi,[rip+0x180f1]        # 23766 <__sprintf_chk@plt+0x1fa86>
    b675:	lea    rdi,[rip+0x18126]        # 237a2 <__sprintf_chk@plt+0x1fac2>
    b67c:	call   38e0 <__assert_fail@plt>
    b681:	lea    rcx,[rip+0x187f8]        # 23e80 <__sprintf_chk@plt+0x201a0>
    b688:	mov    edx,0xb2
    b68d:	lea    rsi,[rip+0x180d2]        # 23766 <__sprintf_chk@plt+0x1fa86>
    b694:	lea    rdi,[rip+0x180f0]        # 2378b <__sprintf_chk@plt+0x1faab>
    b69b:	call   38e0 <__assert_fail@plt>
    b6a0:	lea    rcx,[rip+0x187d9]        # 23e80 <__sprintf_chk@plt+0x201a0>
    b6a7:	mov    edx,0x96
    b6ac:	lea    rsi,[rip+0x180b3]        # 23766 <__sprintf_chk@plt+0x1fa86>
    b6b3:	lea    rdi,[rip+0x180ba]        # 23774 <__sprintf_chk@plt+0x1fa94>
    b6ba:	call   38e0 <__assert_fail@plt>
    b6bf:	nop
    b6c0:	endbr64 
    b6c4:	push   r14
    b6c6:	push   r13
    b6c8:	push   r12
    b6ca:	push   rbp
    b6cb:	push   rbx
    b6cc:	sub    rsp,0x90
    b6d3:	mov    rax,QWORD PTR fs:0x28
    b6dc:	mov    QWORD PTR [rsp+0x88],rax
    b6e4:	xor    eax,eax
    b6e6:	cmp    rdi,rsi
    b6e9:	je     b808 <__sprintf_chk@plt+0x7b28>
    b6ef:	mov    rbp,rdi
    b6f2:	mov    r12,rsi
    b6f5:	call   3800 <__ctype_get_mb_cur_max@plt>
    b6fa:	cmp    rax,0x1
    b6fe:	jbe    b830 <__sprintf_chk@plt+0x7b50>
    b704:	mov    QWORD PTR [rsp+0x10],rbp
    b709:	mov    rbp,rsp
    b70c:	mov    QWORD PTR [rsp+0x50],r12
    b711:	lea    r12,[rsp+0x40]
    b716:	mov    BYTE PTR [rsp],0x0
    b71a:	mov    QWORD PTR [rsp+0x4],0x0
    b723:	mov    BYTE PTR [rsp+0xc],0x0
    b728:	mov    BYTE PTR [rsp+0x40],0x0
    b72d:	mov    QWORD PTR [rsp+0x44],0x0
    b736:	mov    BYTE PTR [rsp+0x4c],0x0
    b73b:	jmp    b79a <__sprintf_chk@plt+0x7aba>
    b73d:	nop    DWORD PTR [rax]
    b740:	mov    r13d,DWORD PTR [rsp+0x64]
    b745:	test   r13d,r13d
    b748:	je     b902 <__sprintf_chk@plt+0x7c22>
    b74e:	cmp    BYTE PTR [rsp+0x20],0x0
    b753:	je     b8c0 <__sprintf_chk@plt+0x7be0>
    b759:	mov    edi,DWORD PTR [rsp+0x24]
    b75d:	call   3bd0 <towlower@plt>
    b762:	mov    edi,r13d
    b765:	mov    ebx,eax
    b767:	call   3bd0 <towlower@plt>
    b76c:	mov    r8d,eax
    b76f:	mov    eax,ebx
    b771:	sub    eax,r8d
    b774:	test   eax,eax
    b776:	jne    b808 <__sprintf_chk@plt+0x7b28>
    b77c:	mov    rax,QWORD PTR [rsp+0x18]
    b781:	add    QWORD PTR [rsp+0x10],rax
    b786:	mov    rax,QWORD PTR [rsp+0x58]
    b78b:	add    QWORD PTR [rsp+0x50],rax
    b790:	mov    BYTE PTR [rsp+0xc],0x0
    b795:	mov    BYTE PTR [rsp+0x4c],0x0
    b79a:	mov    rdi,rbp
    b79d:	call   b550 <__sprintf_chk@plt+0x7870>
    b7a2:	cmp    BYTE PTR [rsp+0x20],0x0
    b7a7:	je     b7b5 <__sprintf_chk@plt+0x7ad5>
    b7a9:	mov    edx,DWORD PTR [rsp+0x24]
    b7ad:	test   edx,edx
    b7af:	je     b8a0 <__sprintf_chk@plt+0x7bc0>
    b7b5:	cmp    BYTE PTR [rsp+0x4c],0x0
    b7ba:	jne    b7c4 <__sprintf_chk@plt+0x7ae4>
    b7bc:	mov    rdi,r12
    b7bf:	call   b550 <__sprintf_chk@plt+0x7870>
    b7c4:	cmp    BYTE PTR [rsp+0x60],0x0
    b7c9:	jne    b740 <__sprintf_chk@plt+0x7a60>
    b7cf:	cmp    BYTE PTR [rsp+0x20],0x0
    b7d4:	jne    b8e8 <__sprintf_chk@plt+0x7c08>
    b7da:	mov    rdx,QWORD PTR [rsp+0x18]
    b7df:	mov    r8,QWORD PTR [rsp+0x58]
    b7e4:	mov    rsi,QWORD PTR [rsp+0x50]
    b7e9:	mov    rdi,QWORD PTR [rsp+0x10]
    b7ee:	cmp    rdx,r8
    b7f1:	jne    b90b <__sprintf_chk@plt+0x7c2b>
    b7f7:	call   3960 <memcmp@plt>
    b7fc:	test   eax,eax
    b7fe:	je     b77c <__sprintf_chk@plt+0x7a9c>
    b804:	nop    DWORD PTR [rax+0x0]
    b808:	mov    rcx,QWORD PTR [rsp+0x88]
    b810:	sub    rcx,QWORD PTR fs:0x28
    b819:	jne    b933 <__sprintf_chk@plt+0x7c53>
    b81f:	add    rsp,0x90
    b826:	pop    rbx
    b827:	pop    rbp
    b828:	pop    r12
    b82a:	pop    r13
    b82c:	pop    r14
    b82e:	ret    
    b82f:	nop
    b830:	call   3cd0 <__ctype_b_loc@plt>
    b835:	mov    r14,QWORD PTR [rax]
    b838:	jmp    b850 <__sprintf_chk@plt+0x7b70>
    b83a:	nop    WORD PTR [rax+rax*1+0x0]
    b840:	add    rbp,0x1
    b844:	add    r12,0x1
    b848:	cmp    bl,dl
    b84a:	jne    b8f8 <__sprintf_chk@plt+0x7c18>
    b850:	movzx  r13d,BYTE PTR [rbp+0x0]
    b855:	mov    rbx,r13
    b858:	test   BYTE PTR [r14+r13*2+0x1],0x1
    b85e:	je     b86d <__sprintf_chk@plt+0x7b8d>
    b860:	call   3cc0 <__ctype_tolower_loc@plt>
    b865:	mov    rax,QWORD PTR [rax]
    b868:	movzx  ebx,BYTE PTR [rax+r13*4]
    b86d:	movzx  r13d,BYTE PTR [r12]
    b872:	mov    rdx,r13
    b875:	test   BYTE PTR [r14+r13*2+0x1],0x1
    b87b:	je     b88a <__sprintf_chk@plt+0x7baa>
    b87d:	call   3cc0 <__ctype_tolower_loc@plt>
    b882:	mov    rax,QWORD PTR [rax]
    b885:	movzx  edx,BYTE PTR [rax+r13*4]
    b88a:	test   bl,bl
    b88c:	jne    b840 <__sprintf_chk@plt+0x7b60>
    b88e:	xor    eax,eax
    b890:	sub    eax,edx
    b892:	jmp    b808 <__sprintf_chk@plt+0x7b28>
    b897:	nop    WORD PTR [rax+rax*1+0x0]
    b8a0:	cmp    BYTE PTR [rsp+0xc],0x0
    b8a5:	jne    b8ca <__sprintf_chk@plt+0x7bea>
    b8a7:	mov    rdi,rbp
    b8aa:	call   b550 <__sprintf_chk@plt+0x7870>
    b8af:	cmp    BYTE PTR [rsp+0x20],0x0
    b8b4:	je     b8c0 <__sprintf_chk@plt+0x7be0>
    b8b6:	mov    eax,DWORD PTR [rsp+0x24]
    b8ba:	test   eax,eax
    b8bc:	je     b8ca <__sprintf_chk@plt+0x7bea>
    b8be:	xchg   ax,ax
    b8c0:	mov    eax,0x1
    b8c5:	jmp    b808 <__sprintf_chk@plt+0x7b28>
    b8ca:	cmp    BYTE PTR [rsp+0x4c],0x0
    b8cf:	jne    b8db <__sprintf_chk@plt+0x7bfb>
    b8d1:	lea    rdi,[rsp+0x40]
    b8d6:	call   b550 <__sprintf_chk@plt+0x7870>
    b8db:	cmp    BYTE PTR [rsp+0x60],0x0
    b8e0:	jne    b918 <__sprintf_chk@plt+0x7c38>
    b8e2:	nop    WORD PTR [rax+rax*1+0x0]
    b8e8:	mov    eax,0xffffffff
    b8ed:	jmp    b808 <__sprintf_chk@plt+0x7b28>
    b8f2:	nop    WORD PTR [rax+rax*1+0x0]
    b8f8:	movzx  eax,bl
    b8fb:	sub    eax,edx
    b8fd:	jmp    b808 <__sprintf_chk@plt+0x7b28>
    b902:	cmp    BYTE PTR [rsp+0xc],0x0
    b907:	je     b8a7 <__sprintf_chk@plt+0x7bc7>
    b909:	jmp    b8af <__sprintf_chk@plt+0x7bcf>
    b90b:	jae    b925 <__sprintf_chk@plt+0x7c45>
    b90d:	call   3960 <memcmp@plt>
    b912:	test   eax,eax
    b914:	jg     b8c0 <__sprintf_chk@plt+0x7be0>
    b916:	jmp    b8e8 <__sprintf_chk@plt+0x7c08>
    b918:	mov    eax,DWORD PTR [rsp+0x64]
    b91c:	test   eax,eax
    b91e:	jne    b8e8 <__sprintf_chk@plt+0x7c08>
    b920:	jmp    b808 <__sprintf_chk@plt+0x7b28>
    b925:	mov    rdx,r8
    b928:	call   3960 <memcmp@plt>
    b92d:	test   eax,eax
    b92f:	jns    b8c0 <__sprintf_chk@plt+0x7be0>
    b931:	jmp    b8e8 <__sprintf_chk@plt+0x7c08>
    b933:	call   3840 <__stack_chk_fail@plt>
    b938:	nop    DWORD PTR [rax+rax*1+0x0]
    b940:	endbr64 
    b944:	push   rbx
    b945:	test   rdi,rdi
    b948:	je     b9d3 <__sprintf_chk@plt+0x7cf3>
    b94e:	mov    esi,0x2f
    b953:	mov    rbx,rdi
    b956:	call   38b0 <strrchr@plt>
    b95b:	test   rax,rax
    b95e:	je     b9ab <__sprintf_chk@plt+0x7ccb>
    b960:	lea    r8,[rax+0x1]
    b964:	mov    rdx,r8
    b967:	sub    rdx,rbx
    b96a:	cmp    rdx,0x6
    b96e:	jle    b9ab <__sprintf_chk@plt+0x7ccb>
    b970:	lea    rsi,[rax-0x6]
    b974:	mov    ecx,0x7
    b979:	lea    rdi,[rip+0x18550]        # 23ed0 <__sprintf_chk@plt+0x201f0>
    b980:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    b982:	seta   dl
    b985:	sbb    dl,0x0
    b988:	test   dl,dl
    b98a:	jne    b9ab <__sprintf_chk@plt+0x7ccb>
    b98c:	cmp    BYTE PTR [rax+0x1],0x6c
    b990:	jne    b9c0 <__sprintf_chk@plt+0x7ce0>
    b992:	cmp    BYTE PTR [r8+0x1],0x74
    b997:	jne    b9c0 <__sprintf_chk@plt+0x7ce0>
    b999:	cmp    BYTE PTR [r8+0x2],0x2d
    b99e:	jne    b9c0 <__sprintf_chk@plt+0x7ce0>
    b9a0:	lea    rbx,[rax+0x4]
    b9a4:	mov    QWORD PTR [rip+0x206f5],rbx        # 2c0a0 <__progname@@GLIBC_2.2.5>
    b9ab:	mov    QWORD PTR [rip+0x207fe],rbx        # 2c1b0 <stderr@@GLIBC_2.2.5+0xd0>
    b9b2:	mov    QWORD PTR [rip+0x2070f],rbx        # 2c0c8 <__progname_full@@GLIBC_2.2.5>
    b9b9:	pop    rbx
    b9ba:	ret    
    b9bb:	nop    DWORD PTR [rax+rax*1+0x0]
    b9c0:	mov    rbx,r8
    b9c3:	mov    QWORD PTR [rip+0x207e6],rbx        # 2c1b0 <stderr@@GLIBC_2.2.5+0xd0>
    b9ca:	mov    QWORD PTR [rip+0x206f7],rbx        # 2c0c8 <__progname_full@@GLIBC_2.2.5>
    b9d1:	pop    rbx
    b9d2:	ret    
    b9d3:	mov    rcx,QWORD PTR [rip+0x20706]        # 2c0e0 <stderr@@GLIBC_2.2.5>
    b9da:	mov    edx,0x37
    b9df:	mov    esi,0x1
    b9e4:	lea    rdi,[rip+0x184ad]        # 23e98 <__sprintf_chk@plt+0x201b8>
    b9eb:	call   3c40 <fwrite@plt>
    b9f0:	call   36e0 <abort@plt>
    b9f5:	cs nop WORD PTR [rax+rax*1+0x0]
    b9ff:	nop
    ba00:	push   rbp
    ba01:	mov    rbp,rdi
    ba04:	push   rbx
    ba05:	mov    ebx,esi
    ba07:	sub    rsp,0x8
    ba0b:	call   21050 <__sprintf_chk@plt+0x1d370>
    ba10:	movzx  edx,BYTE PTR [rax]
    ba13:	and    edx,0xffffffdf
    ba16:	cmp    dl,0x55
    ba19:	jne    ba68 <__sprintf_chk@plt+0x7d88>
    ba1b:	movzx  edx,BYTE PTR [rax+0x1]
    ba1f:	and    edx,0xffffffdf
    ba22:	cmp    dl,0x54
    ba25:	jne    ba79 <__sprintf_chk@plt+0x7d99>
    ba27:	movzx  edx,BYTE PTR [rax+0x2]
    ba2b:	and    edx,0xffffffdf
    ba2e:	cmp    dl,0x46
    ba31:	jne    ba79 <__sprintf_chk@plt+0x7d99>
    ba33:	cmp    BYTE PTR [rax+0x3],0x2d
    ba37:	jne    ba79 <__sprintf_chk@plt+0x7d99>
    ba39:	cmp    BYTE PTR [rax+0x4],0x38
    ba3d:	jne    ba79 <__sprintf_chk@plt+0x7d99>
    ba3f:	cmp    BYTE PTR [rax+0x5],0x0
    ba43:	jne    ba79 <__sprintf_chk@plt+0x7d99>
    ba45:	cmp    BYTE PTR [rbp+0x0],0x60
    ba49:	lea    rax,[rip+0x18495]        # 23ee5 <__sprintf_chk@plt+0x20205>
    ba50:	lea    rdx,[rip+0x18483]        # 23eda <__sprintf_chk@plt+0x201fa>
    ba57:	cmovne rax,rdx
    ba5b:	add    rsp,0x8
    ba5f:	pop    rbx
    ba60:	pop    rbp
    ba61:	ret    
    ba62:	nop    WORD PTR [rax+rax*1+0x0]
    ba68:	cmp    dl,0x47
    ba6b:	jne    ba79 <__sprintf_chk@plt+0x7d99>
    ba6d:	movzx  edx,BYTE PTR [rax+0x1]
    ba71:	and    edx,0xffffffdf
    ba74:	cmp    dl,0x42
    ba77:	je     ba98 <__sprintf_chk@plt+0x7db8>
    ba79:	cmp    ebx,0x9
    ba7c:	lea    rax,[rip+0x18455]        # 23ed8 <__sprintf_chk@plt+0x201f8>
    ba83:	lea    rdx,[rip+0x17d16]        # 237a0 <__sprintf_chk@plt+0x1fac0>
    ba8a:	cmovne rax,rdx
    ba8e:	add    rsp,0x8
    ba92:	pop    rbx
    ba93:	pop    rbp
    ba94:	ret    
    ba95:	nop    DWORD PTR [rax]
    ba98:	cmp    BYTE PTR [rax+0x2],0x31
    ba9c:	jne    ba79 <__sprintf_chk@plt+0x7d99>
    ba9e:	cmp    BYTE PTR [rax+0x3],0x38
    baa2:	jne    ba79 <__sprintf_chk@plt+0x7d99>
    baa4:	cmp    BYTE PTR [rax+0x4],0x30
    baa8:	jne    ba79 <__sprintf_chk@plt+0x7d99>
    baaa:	cmp    BYTE PTR [rax+0x5],0x33
    baae:	jne    ba79 <__sprintf_chk@plt+0x7d99>
    bab0:	cmp    BYTE PTR [rax+0x6],0x30
    bab4:	jne    ba79 <__sprintf_chk@plt+0x7d99>
    bab6:	cmp    BYTE PTR [rax+0x7],0x0
    baba:	jne    ba79 <__sprintf_chk@plt+0x7d99>
    babc:	cmp    BYTE PTR [rbp+0x0],0x60
    bac0:	lea    rax,[rip+0x18417]        # 23ede <__sprintf_chk@plt+0x201fe>
    bac7:	lea    rdx,[rip+0x18414]        # 23ee2 <__sprintf_chk@plt+0x20202>
    bace:	cmovne rax,rdx
    bad2:	add    rsp,0x8
    bad6:	pop    rbx
    bad7:	pop    rbp
    bad8:	ret    
    bad9:	nop    DWORD PTR [rax+0x0]
    bae0:	push   r15
    bae2:	mov    r11,rcx
    bae5:	push   r14
    bae7:	mov    r14,rsi
    baea:	push   r13
    baec:	push   r12
    baee:	mov    r12d,r8d
    baf1:	push   rbp
    baf2:	push   rbx
    baf3:	sub    rsp,0xc8
    bafa:	mov    rax,QWORD PTR [rsp+0x100]
    bb02:	mov    QWORD PTR [rsp+0x60],rdi
    bb07:	mov    QWORD PTR [rsp+0x20],rdx
    bb0c:	mov    QWORD PTR [rsp+0x18],rax
    bb11:	mov    rax,QWORD PTR [rsp+0x108]
    bb19:	mov    DWORD PTR [rsp+0x80],r9d
    bb21:	mov    QWORD PTR [rsp+0x98],rax
    bb29:	mov    rax,QWORD PTR [rsp+0x110]
    bb31:	mov    QWORD PTR [rsp+0x90],rax
    bb39:	mov    rax,QWORD PTR fs:0x28
    bb42:	mov    QWORD PTR [rsp+0xb8],rax
    bb4a:	xor    eax,eax
    bb4c:	nop    DWORD PTR [rax+0x0]
    bb50:	mov    QWORD PTR [rsp+0x8],r11
    bb55:	call   3800 <__ctype_get_mb_cur_max@plt>
    bb5a:	mov    ebx,DWORD PTR [rsp+0x80]
    bb61:	mov    QWORD PTR [rsp+0x58],rax
    bb66:	and    ebx,0x2
    bb69:	cmp    r12d,0xa
    bb6d:	ja     3d13 <__sprintf_chk@plt+0x33>
    bb73:	lea    rcx,[rip+0x183c6]        # 23f40 <__sprintf_chk@plt+0x20260>
    bb7a:	mov    edx,r12d
    bb7d:	mov    r11,QWORD PTR [rsp+0x8]
    bb82:	movsxd rax,DWORD PTR [rcx+rdx*4]
    bb86:	add    rax,rcx
    bb89:	notrack jmp rax
    bb8c:	cmp    r12d,0xa
    bb90:	je     bc02 <__sprintf_chk@plt+0x7f22>
    bb92:	lea    rsi,[rip+0x18350]        # 23ee9 <__sprintf_chk@plt+0x20209>
    bb99:	xor    edi,edi
    bb9b:	mov    edx,0x5
    bba0:	mov    QWORD PTR [rsp+0x8],r11
    bba5:	call   37f0 <dcgettext@plt>
    bbaa:	mov    r11,QWORD PTR [rsp+0x8]
    bbaf:	mov    rsi,rax
    bbb2:	mov    QWORD PTR [rsp+0x98],rax
    bbba:	lea    rax,[rip+0x18328]        # 23ee9 <__sprintf_chk@plt+0x20209>
    bbc1:	cmp    rsi,rax
    bbc4:	je     cbbf <__sprintf_chk@plt+0x8edf>
    bbca:	xor    edi,edi
    bbcc:	mov    edx,0x5
    bbd1:	mov    QWORD PTR [rsp+0x8],r11
    bbd6:	lea    rsi,[rip+0x17bc3]        # 237a0 <__sprintf_chk@plt+0x1fac0>
    bbdd:	call   37f0 <dcgettext@plt>
    bbe2:	mov    r11,QWORD PTR [rsp+0x8]
    bbe7:	mov    rcx,rax
    bbea:	mov    QWORD PTR [rsp+0x90],rax
    bbf2:	lea    rax,[rip+0x17ba7]        # 237a0 <__sprintf_chk@plt+0x1fac0>
    bbf9:	cmp    rcx,rax
    bbfc:	je     cba2 <__sprintf_chk@plt+0x8ec2>
    bc02:	xor    r15d,r15d
    bc05:	test   ebx,ebx
    bc07:	je     ca26 <__sprintf_chk@plt+0x8d46>
    bc0d:	test   ebx,ebx
    bc0f:	mov    rbx,QWORD PTR [rsp+0x90]
    bc17:	mov    QWORD PTR [rsp+0x8],r11
    bc1c:	mov    r13d,0x1
    bc22:	setne  BYTE PTR [rsp+0x43]
    bc27:	mov    rdi,rbx
    bc2a:	call   3810 <strlen@plt>
    bc2f:	mov    QWORD PTR [rsp+0x48],rbx
    bc34:	mov    r11,QWORD PTR [rsp+0x8]
    bc39:	mov    QWORD PTR [rsp+0x28],rax
    bc3e:	mov    BYTE PTR [rsp+0x8],0x1
    bc43:	mov    BYTE PTR [rsp+0x85],0x0
    bc4b:	mov    BYTE PTR [rsp+0x42],0x0
    bc50:	mov    QWORD PTR [rsp+0x50],0x0
    bc59:	mov    BYTE PTR [rsp+0x10],r13b
    bc5e:	mov    r13d,r12d
    bc61:	mov    r12,QWORD PTR [rsp+0x60]
    bc66:	xor    ebx,ebx
    bc68:	mov    r9,r12
    bc6b:	mov    r8d,r13d
    bc6e:	xchg   ax,ax
    bc70:	cmp    r11,rbx
    bc73:	setne  r12b
    bc77:	cmp    r11,0xffffffffffffffff
    bc7b:	jne    bc8a <__sprintf_chk@plt+0x7faa>
    bc7d:	mov    rax,QWORD PTR [rsp+0x20]
    bc82:	cmp    BYTE PTR [rax+rbx*1],0x0
    bc86:	setne  r12b
    bc8a:	test   r12b,r12b
    bc8d:	je     c328 <__sprintf_chk@plt+0x8648>
    bc93:	mov    rdi,QWORD PTR [rsp+0x20]
    bc98:	cmp    r8d,0x2
    bc9c:	setne  r13b
    bca0:	lea    rbp,[rdi+rbx*1]
    bca4:	and    r13b,BYTE PTR [rsp+0x10]
    bca9:	je     c3d8 <__sprintf_chk@plt+0x86f8>
    bcaf:	mov    rax,QWORD PTR [rsp+0x28]
    bcb4:	test   rax,rax
    bcb7:	je     c520 <__sprintf_chk@plt+0x8840>
    bcbd:	lea    rdx,[rbx+rax*1]
    bcc1:	cmp    r11,0xffffffffffffffff
    bcc5:	jne    bcf3 <__sprintf_chk@plt+0x8013>
    bcc7:	cmp    rax,0x1
    bccb:	jbe    bcf3 <__sprintf_chk@plt+0x8013>
    bccd:	mov    DWORD PTR [rsp+0x44],r8d
    bcd2:	mov    QWORD PTR [rsp+0x38],r9
    bcd7:	mov    QWORD PTR [rsp+0x30],rdx
    bcdc:	call   3810 <strlen@plt>
    bce1:	mov    r8d,DWORD PTR [rsp+0x44]
    bce6:	mov    r9,QWORD PTR [rsp+0x38]
    bceb:	mov    rdx,QWORD PTR [rsp+0x30]
    bcf0:	mov    r11,rax
    bcf3:	cmp    rdx,r11
    bcf6:	ja     c520 <__sprintf_chk@plt+0x8840>
    bcfc:	mov    rdx,QWORD PTR [rsp+0x28]
    bd01:	mov    rsi,QWORD PTR [rsp+0x48]
    bd06:	mov    rdi,rbp
    bd09:	mov    DWORD PTR [rsp+0x44],r8d
    bd0e:	mov    QWORD PTR [rsp+0x38],r11
    bd13:	mov    QWORD PTR [rsp+0x30],r9
    bd18:	call   3960 <memcmp@plt>
    bd1d:	mov    r9,QWORD PTR [rsp+0x30]
    bd22:	mov    r11,QWORD PTR [rsp+0x38]
    bd27:	test   eax,eax
    bd29:	mov    r8d,DWORD PTR [rsp+0x44]
    bd2e:	jne    c520 <__sprintf_chk@plt+0x8840>
    bd34:	cmp    BYTE PTR [rsp+0x43],0x0
    bd39:	jne    cb92 <__sprintf_chk@plt+0x8eb2>
    bd3f:	movzx  ebp,BYTE PTR [rbp+0x0]
    bd43:	cmp    bpl,0x7e
    bd47:	ja     be7b <__sprintf_chk@plt+0x819b>
    bd4d:	lea    rcx,[rip+0x18218]        # 23f6c <__sprintf_chk@plt+0x2028c>
    bd54:	movzx  edx,bpl
    bd58:	movsxd rax,DWORD PTR [rcx+rdx*4]
    bd5c:	add    rax,rcx
    bd5f:	notrack jmp rax
    bd62:	nop    WORD PTR [rax+rax*1+0x0]
    bd68:	mov    eax,r13d
    bd6b:	nop    DWORD PTR [rax+rax*1+0x0]
    bd70:	mov    r12d,r13d
    bd73:	mov    r13d,eax
    bd76:	xor    eax,eax
    bd78:	nop    DWORD PTR [rax+rax*1+0x0]
    bd80:	mov    rsi,QWORD PTR [rsp+0x18]
    bd85:	test   rsi,rsi
    bd88:	je     bd9e <__sprintf_chk@plt+0x80be>
    bd8a:	mov    edx,ebp
    bd8c:	mov    ecx,ebp
    bd8e:	shr    dl,0x5
    bd91:	movzx  edx,dl
    bd94:	mov    edx,DWORD PTR [rsi+rdx*4]
    bd97:	shr    edx,cl
    bd99:	and    edx,0x1
    bd9c:	jne    bda7 <__sprintf_chk@plt+0x80c7>
    bd9e:	test   r13b,r13b
    bda1:	je     be61 <__sprintf_chk@plt+0x8181>
    bda7:	cmp    r8d,0x2
    bdab:	sete   dl
    bdae:	cmp    BYTE PTR [rsp+0x43],0x0
    bdb3:	mov    eax,edx
    bdb5:	jne    c1b8 <__sprintf_chk@plt+0x84d8>
    bdbb:	movzx  eax,BYTE PTR [rsp+0x42]
    bdc0:	xor    eax,0x1
    bdc3:	and    al,dl
    bdc5:	je     bdf7 <__sprintf_chk@plt+0x8117>
    bdc7:	cmp    r14,r15
    bdca:	jbe    bdd1 <__sprintf_chk@plt+0x80f1>
    bdcc:	mov    BYTE PTR [r9+r15*1],0x27
    bdd1:	lea    rdx,[r15+0x1]
    bdd5:	cmp    r14,rdx
    bdd8:	jbe    bde0 <__sprintf_chk@plt+0x8100>
    bdda:	mov    BYTE PTR [r9+r15*1+0x1],0x24
    bde0:	lea    rdx,[r15+0x2]
    bde4:	cmp    r14,rdx
    bde7:	jbe    bdef <__sprintf_chk@plt+0x810f>
    bde9:	mov    BYTE PTR [r9+r15*1+0x2],0x27
    bdef:	mov    BYTE PTR [rsp+0x42],al
    bdf3:	add    r15,0x3
    bdf7:	cmp    r15,r14
    bdfa:	jae    be01 <__sprintf_chk@plt+0x8121>
    bdfc:	mov    BYTE PTR [r9+r15*1],0x5c
    be01:	add    r15,0x1
    be05:	add    rbx,0x1
    be09:	cmp    r15,r14
    be0c:	jae    be12 <__sprintf_chk@plt+0x8132>
    be0e:	mov    BYTE PTR [r9+r15*1],bpl
    be12:	movzx  edi,BYTE PTR [rsp+0x8]
    be17:	add    r15,0x1
    be1b:	mov    eax,0x0
    be20:	test   r12b,r12b
    be23:	cmove  edi,eax
    be26:	mov    BYTE PTR [rsp+0x8],dil
    be2b:	jmp    bc70 <__sprintf_chk@plt+0x7f90>
    be30:	xor    r13d,r13d
    be33:	xor    eax,eax
    be35:	xor    r12d,r12d
    be38:	movzx  edx,BYTE PTR [rsp+0x10]
    be3d:	xor    edx,0x1
    be40:	or     al,dl
    be42:	je     bd80 <__sprintf_chk@plt+0x80a0>
    be48:	xor    eax,eax
    be4a:	cmp    BYTE PTR [rsp+0x43],0x0
    be4f:	jne    bd80 <__sprintf_chk@plt+0x80a0>
    be55:	nop    DWORD PTR [rax]
    be58:	test   r13b,r13b
    be5b:	jne    bda7 <__sprintf_chk@plt+0x80c7>
    be61:	xor    eax,0x1
    be64:	add    rbx,0x1
    be68:	and    al,BYTE PTR [rsp+0x42]
    be6c:	jmp    c440 <__sprintf_chk@plt+0x8760>
    be71:	nop    DWORD PTR [rax+0x0]
    be78:	xor    r13d,r13d
    be7b:	cmp    QWORD PTR [rsp+0x58],0x1
    be81:	jne    c5f0 <__sprintf_chk@plt+0x8910>
    be87:	mov    DWORD PTR [rsp+0x44],r8d
    be8c:	mov    QWORD PTR [rsp+0x38],r11
    be91:	mov    QWORD PTR [rsp+0x30],r9
    be96:	call   3cd0 <__ctype_b_loc@plt>
    be9b:	mov    r9,QWORD PTR [rsp+0x30]
    bea0:	mov    r11,QWORD PTR [rsp+0x38]
    bea5:	mov    r10,rax
    bea8:	movzx  eax,bpl
    beac:	mov    r8d,DWORD PTR [rsp+0x44]
    beb1:	mov    rdx,QWORD PTR [r10]
    beb4:	test   BYTE PTR [rdx+rax*2+0x1],0x40
    beb9:	mov    eax,0x1
    bebe:	setne  r12b
    bec2:	sete   dl
    bec5:	and    dl,BYTE PTR [rsp+0x10]
    bec9:	test   dl,dl
    becb:	jne    c9b2 <__sprintf_chk@plt+0x8cd2>
    bed1:	nop    DWORD PTR [rax+0x0]
    bed8:	cmp    r8d,0x2
    bedc:	sete   al
    bedf:	jmp    be38 <__sprintf_chk@plt+0x8158>
    bee4:	mov    QWORD PTR [rsp+0x8],r11
    bee9:	xor    ebx,ebx
    beeb:	and    DWORD PTR [rsp+0x80],0xfffffffd
    bef3:	call   3800 <__ctype_get_mb_cur_max@plt>
    bef8:	mov    r11,QWORD PTR [rsp+0x8]
    befd:	mov    QWORD PTR [rsp+0x18],0x0
    bf06:	mov    QWORD PTR [rsp+0x58],rax
    bf0b:	lea    rax,[rip+0x17fc6]        # 23ed8 <__sprintf_chk@plt+0x201f8>
    bf12:	mov    BYTE PTR [rsp+0x43],0x1
    bf17:	xor    r15d,r15d
    bf1a:	mov    r12d,0x5
    bf20:	mov    QWORD PTR [rsp+0x48],rax
    bf25:	mov    r13d,0x1
    bf2b:	mov    QWORD PTR [rsp+0x28],0x1
    bf34:	test   ebx,ebx
    bf36:	jne    bc3e <__sprintf_chk@plt+0x7f5e>
    bf3c:	lea    rax,[rip+0x17f95]        # 23ed8 <__sprintf_chk@plt+0x201f8>
    bf43:	mov    BYTE PTR [rsp+0x43],0x0
    bf48:	mov    r12d,0x5
    bf4e:	mov    r15d,0x1
    bf54:	mov    QWORD PTR [rsp+0x48],rax
    bf59:	mov    r13d,0x1
    bf5f:	mov    QWORD PTR [rsp+0x28],0x1
    bf68:	mov    BYTE PTR [rsp+0x42],0x0
    bf6d:	mov    BYTE PTR [rsp+0x85],0x0
    bf75:	mov    BYTE PTR [rsp+0x8],0x1
    bf7a:	mov    QWORD PTR [rsp+0x50],0x0
    bf83:	test   r14,r14
    bf86:	je     bc59 <__sprintf_chk@plt+0x7f79>
    bf8c:	mov    rax,QWORD PTR [rsp+0x60]
    bf91:	mov    BYTE PTR [rax],0x22
    bf94:	jmp    bc59 <__sprintf_chk@plt+0x7f79>
    bf99:	mov    BYTE PTR [rsp+0x43],0x0
    bf9e:	mov    r13d,0x1
    bfa4:	xor    r15d,r15d
    bfa7:	mov    QWORD PTR [rsp+0x28],0x0
    bfb0:	mov    QWORD PTR [rsp+0x48],0x0
    bfb9:	jmp    bc3e <__sprintf_chk@plt+0x7f5e>
    bfbe:	lea    rax,[rip+0x17f13]        # 23ed8 <__sprintf_chk@plt+0x201f8>
    bfc5:	mov    BYTE PTR [rsp+0x43],0x1
    bfca:	xor    r15d,r15d
    bfcd:	mov    r13d,0x1
    bfd3:	mov    QWORD PTR [rsp+0x28],0x1
    bfdc:	mov    r12d,0x5
    bfe2:	mov    QWORD PTR [rsp+0x48],rax
    bfe7:	jmp    bc3e <__sprintf_chk@plt+0x7f5e>
    bfec:	mov    BYTE PTR [rsp+0x43],0x1
    bff1:	mov    r13d,0x1
    bff7:	lea    rax,[rip+0x177a2]        # 237a0 <__sprintf_chk@plt+0x1fac0>
    bffe:	xor    r15d,r15d
    c001:	mov    r12d,0x2
    c007:	mov    QWORD PTR [rsp+0x28],0x1
    c010:	mov    QWORD PTR [rsp+0x48],rax
    c015:	jmp    bc3e <__sprintf_chk@plt+0x7f5e>
    c01a:	mov    r13d,0x1
    c020:	test   ebx,ebx
    c022:	je     c1f7 <__sprintf_chk@plt+0x8517>
    c028:	mov    BYTE PTR [rsp+0x43],0x1
    c02d:	xor    r13d,r13d
    c030:	jmp    bff7 <__sprintf_chk@plt+0x8317>
    c032:	mov    BYTE PTR [rsp+0x43],0x0
    c037:	xor    r13d,r13d
    c03a:	xor    r15d,r15d
    c03d:	mov    QWORD PTR [rsp+0x28],0x0
    c046:	mov    QWORD PTR [rsp+0x48],0x0
    c04f:	jmp    bc3e <__sprintf_chk@plt+0x7f5e>
    c054:	xor    r13d,r13d
    c057:	cmp    r11,0x1
    c05b:	setne  dl
    c05e:	cmp    r11,0xffffffffffffffff
    c062:	jne    c070 <__sprintf_chk@plt+0x8390>
    c064:	mov    rax,QWORD PTR [rsp+0x20]
    c069:	cmp    BYTE PTR [rax+0x1],0x0
    c06d:	setne  dl
    c070:	cmp    r8d,0x2
    c074:	sete   al
    c077:	test   dl,dl
    c079:	jne    c3c9 <__sprintf_chk@plt+0x86e9>
    c07f:	test   rbx,rbx
    c082:	jne    c3c9 <__sprintf_chk@plt+0x86e9>
    c088:	cmp    BYTE PTR [rsp+0x43],0x0
    c08d:	je     be38 <__sprintf_chk@plt+0x8158>
    c093:	test   al,al
    c095:	je     be38 <__sprintf_chk@plt+0x8158>
    c09b:	movzx  r13d,BYTE PTR [rsp+0x10]
    c0a1:	mov    r12d,0x2
    c0a7:	mov    eax,r13d
    c0aa:	and    DWORD PTR [rsp+0x80],0xfffffffd
    c0b2:	test   al,al
    c0b4:	jne    c1d4 <__sprintf_chk@plt+0x84f4>
    c0ba:	mov    QWORD PTR [rsp+0x18],0x0
    c0c3:	jmp    bb50 <__sprintf_chk@plt+0x7e70>
    c0c8:	xor    r13d,r13d
    c0cb:	cmp    r8d,0x2
    c0cf:	je     c5d0 <__sprintf_chk@plt+0x88f0>
    c0d5:	cmp    r8d,0x5
    c0d9:	jne    c100 <__sprintf_chk@plt+0x8420>
    c0db:	test   BYTE PTR [rsp+0x80],0x4
    c0e3:	je     c100 <__sprintf_chk@plt+0x8420>
    c0e5:	lea    rax,[rbx+0x2]
    c0e9:	cmp    rax,r11
    c0ec:	jae    c100 <__sprintf_chk@plt+0x8420>
    c0ee:	mov    rsi,QWORD PTR [rsp+0x20]
    c0f3:	cmp    BYTE PTR [rsi+rbx*1+0x1],0x3f
    c0f8:	je     ca5b <__sprintf_chk@plt+0x8d7b>
    c0fe:	xchg   ax,ax
    c100:	xor    eax,eax
    c102:	xor    r12d,r12d
    c105:	mov    ebp,0x3f
    c10a:	jmp    be38 <__sprintf_chk@plt+0x8158>
    c10f:	xor    r13d,r13d
    c112:	cmp    r8d,0x2
    c116:	je     c580 <__sprintf_chk@plt+0x88a0>
    c11c:	mov    BYTE PTR [rsp+0x85],r12b
    c124:	xor    eax,eax
    c126:	mov    ebp,0x27
    c12b:	jmp    be38 <__sprintf_chk@plt+0x8158>
    c130:	mov    eax,r13d
    c133:	test   rbx,rbx
    c136:	jne    c55a <__sprintf_chk@plt+0x887a>
    c13c:	mov    r12d,r13d
    c13f:	mov    r13d,eax
    c142:	xor    eax,eax
    c144:	jmp    be38 <__sprintf_chk@plt+0x8158>
    c149:	cmp    r8d,0x2
    c14d:	je     c420 <__sprintf_chk@plt+0x8740>
    c153:	movzx  esi,BYTE PTR [rsp+0x43]
    c158:	test   BYTE PTR [rsp+0x10],sil
    c15d:	je     c16b <__sprintf_chk@plt+0x848b>
    c15f:	cmp    QWORD PTR [rsp+0x28],0x0
    c165:	jne    c42b <__sprintf_chk@plt+0x874b>
    c16b:	mov    ebp,0x5c
    c170:	mov    eax,0x5c
    c175:	nop    DWORD PTR [rax]
    c178:	cmp    BYTE PTR [rsp+0x10],0x0
    c17d:	jne    cd5c <__sprintf_chk@plt+0x907c>
    c183:	xor    r12d,r12d
    c186:	xor    eax,eax
    c188:	cmp    BYTE PTR [rsp+0x43],0x0
    c18d:	jne    bd80 <__sprintf_chk@plt+0x80a0>
    c193:	jmp    be58 <__sprintf_chk@plt+0x8178>
    c198:	mov    ebp,0x72
    c19d:	xor    r12d,r12d
    c1a0:	cmp    r8d,0x2
    c1a4:	sete   dl
    c1a7:	cmp    BYTE PTR [rsp+0x43],0x0
    c1ac:	mov    eax,edx
    c1ae:	je     bdbb <__sprintf_chk@plt+0x80db>
    c1b4:	nop    DWORD PTR [rax+0x0]
    c1b8:	movzx  r13d,BYTE PTR [rsp+0x10]
    c1be:	mov    r12d,r8d
    c1c1:	and    eax,r13d
    c1c4:	and    DWORD PTR [rsp+0x80],0xfffffffd
    c1cc:	test   al,al
    c1ce:	je     c0ba <__sprintf_chk@plt+0x83da>
    c1d4:	mov    QWORD PTR [rsp+0x8],r11
    c1d9:	mov    r13d,0x1
    c1df:	call   3800 <__ctype_get_mb_cur_max@plt>
    c1e4:	mov    r11,QWORD PTR [rsp+0x8]
    c1e9:	mov    QWORD PTR [rsp+0x18],0x0
    c1f2:	mov    QWORD PTR [rsp+0x58],rax
    c1f7:	lea    rax,[rip+0x175a2]        # 237a0 <__sprintf_chk@plt+0x1fac0>
    c1fe:	mov    BYTE PTR [rsp+0x43],0x0
    c203:	mov    r12d,0x2
    c209:	mov    r15d,0x1
    c20f:	mov    QWORD PTR [rsp+0x48],rax
    c214:	mov    QWORD PTR [rsp+0x28],0x1
    c21d:	mov    BYTE PTR [rsp+0x42],0x0
    c222:	mov    BYTE PTR [rsp+0x85],0x0
    c22a:	mov    BYTE PTR [rsp+0x8],0x1
    c22f:	mov    QWORD PTR [rsp+0x50],0x0
    c238:	test   r14,r14
    c23b:	je     bc59 <__sprintf_chk@plt+0x7f79>
    c241:	xor    eax,eax
    c243:	jmp    c38f <__sprintf_chk@plt+0x86af>
    c248:	nop    DWORD PTR [rax+rax*1+0x0]
    c250:	mov    ebp,0x66
    c255:	cmp    r8d,0x2
    c259:	sete   al
    c25c:	cmp    BYTE PTR [rsp+0x43],0x0
    c261:	jne    c288 <__sprintf_chk@plt+0x85a8>
    c263:	xor    r12d,r12d
    c266:	jmp    bdf7 <__sprintf_chk@plt+0x8117>
    c26b:	mov    ebp,0x6e
    c270:	jmp    c19d <__sprintf_chk@plt+0x84bd>
    c275:	cmp    r8d,0x2
    c279:	mov    ebp,0x61
    c27e:	sete   al
    c281:	cmp    BYTE PTR [rsp+0x43],0x0
    c286:	je     c263 <__sprintf_chk@plt+0x8583>
    c288:	movzx  r13d,BYTE PTR [rsp+0x43]
    c28e:	mov    r12d,r8d
    c291:	jmp    c1c1 <__sprintf_chk@plt+0x84e1>
    c296:	mov    ebp,0x62
    c29b:	jmp    c255 <__sprintf_chk@plt+0x8575>
    c29d:	cmp    BYTE PTR [rsp+0x43],0x0
    c2a2:	jne    cbe9 <__sprintf_chk@plt+0x8f09>
    c2a8:	xor    r13d,r13d
    c2ab:	movzx  eax,BYTE PTR [rsp+0x42]
    c2b0:	cmp    r8d,0x2
    c2b4:	sete   dl
    c2b7:	xor    eax,0x1
    c2ba:	and    al,dl
    c2bc:	je     c910 <__sprintf_chk@plt+0x8c30>
    c2c2:	cmp    r14,r15
    c2c5:	jbe    c2cc <__sprintf_chk@plt+0x85ec>
    c2c7:	mov    BYTE PTR [r9+r15*1],0x27
    c2cc:	lea    rcx,[r15+0x1]
    c2d0:	cmp    r14,rcx
    c2d3:	jbe    c2db <__sprintf_chk@plt+0x85fb>
    c2d5:	mov    BYTE PTR [r9+r15*1+0x1],0x24
    c2db:	lea    rcx,[r15+0x2]
    c2df:	cmp    r14,rcx
    c2e2:	jbe    c2ea <__sprintf_chk@plt+0x860a>
    c2e4:	mov    BYTE PTR [r9+r15*1+0x2],0x27
    c2ea:	lea    rcx,[r15+0x3]
    c2ee:	cmp    r14,rcx
    c2f1:	ja     c91d <__sprintf_chk@plt+0x8c3d>
    c2f7:	mov    BYTE PTR [rsp+0x42],al
    c2fb:	add    r15,0x4
    c2ff:	xor    r12d,r12d
    c302:	mov    ebp,0x30
    c307:	jmp    bd9e <__sprintf_chk@plt+0x80be>
    c30c:	xor    r13d,r13d
    c30f:	mov    ebp,0x9
    c314:	mov    eax,0x74
    c319:	jmp    c178 <__sprintf_chk@plt+0x8498>
    c31e:	mov    ebp,0x76
    c323:	jmp    c19d <__sprintf_chk@plt+0x84bd>
    c328:	movzx  ebx,BYTE PTR [rsp+0x43]
    c32d:	cmp    r8d,0x2
    c331:	mov    r12,r9
    c334:	sete   al
    c337:	test   r15,r15
    c33a:	mov    edx,ebx
    c33c:	sete   cl
    c33f:	and    edx,eax
    c341:	test   cl,dl
    c343:	jne    ccd0 <__sprintf_chk@plt+0x8ff0>
    c349:	xor    ebx,0x1
    c34c:	and    al,bl
    c34e:	je     ccc6 <__sprintf_chk@plt+0x8fe6>
    c354:	cmp    BYTE PTR [rsp+0x85],0x0
    c35c:	je     ccbe <__sprintf_chk@plt+0x8fde>
    c362:	cmp    BYTE PTR [rsp+0x8],0x0
    c367:	jne    cc78 <__sprintf_chk@plt+0x8f98>
    c36d:	test   r14,r14
    c370:	movzx  r13d,BYTE PTR [rsp+0x10]
    c376:	sete   al
    c379:	cmp    QWORD PTR [rsp+0x50],0x0
    c37f:	setne  dl
    c382:	and    al,dl
    c384:	je     cbf8 <__sprintf_chk@plt+0x8f18>
    c38a:	mov    r14,QWORD PTR [rsp+0x50]
    c38f:	mov    rcx,QWORD PTR [rsp+0x60]
    c394:	mov    BYTE PTR [rsp+0x85],al
    c39b:	lea    rax,[rip+0x173fe]        # 237a0 <__sprintf_chk@plt+0x1fac0>
    c3a2:	mov    r15d,0x1
    c3a8:	mov    BYTE PTR [rsp+0x43],0x0
    c3ad:	mov    r12d,0x2
    c3b3:	mov    BYTE PTR [rcx],0x27
    c3b6:	mov    QWORD PTR [rsp+0x28],0x1
    c3bf:	mov    QWORD PTR [rsp+0x48],rax
    c3c4:	jmp    bc59 <__sprintf_chk@plt+0x7f79>
    c3c9:	xor    r12d,r12d
    c3cc:	jmp    be38 <__sprintf_chk@plt+0x8158>
    c3d1:	nop    DWORD PTR [rax+0x0]
    c3d8:	movzx  ebp,BYTE PTR [rbp+0x0]
    c3dc:	cmp    bpl,0x7e
    c3e0:	ja     be7b <__sprintf_chk@plt+0x819b>
    c3e6:	lea    rcx,[rip+0x17d7b]        # 24168 <__sprintf_chk@plt+0x20488>
    c3ed:	movzx  edx,bpl
    c3f1:	movsxd rax,DWORD PTR [rcx+rdx*4]
    c3f5:	add    rax,rcx
    c3f8:	notrack jmp rax
    c3fb:	nop    DWORD PTR [rax+rax*1+0x0]
    c400:	cmp    r8d,0x2
    c404:	sete   al
    c407:	xor    r12d,r12d
    c40a:	jmp    c088 <__sprintf_chk@plt+0x83a8>
    c40f:	cmp    r8d,0x2
    c413:	sete   al
    c416:	jmp    c07f <__sprintf_chk@plt+0x839f>
    c41b:	nop    DWORD PTR [rax+rax*1+0x0]
    c420:	cmp    BYTE PTR [rsp+0x43],0x0
    c425:	jne    cb81 <__sprintf_chk@plt+0x8ea1>
    c42b:	movzx  eax,BYTE PTR [rsp+0x42]
    c430:	add    rbx,0x1
    c434:	xor    r12d,r12d
    c437:	mov    ebp,0x5c
    c43c:	nop    DWORD PTR [rax+0x0]
    c440:	test   al,al
    c442:	je     be09 <__sprintf_chk@plt+0x8129>
    c448:	cmp    r14,r15
    c44b:	jbe    c452 <__sprintf_chk@plt+0x8772>
    c44d:	mov    BYTE PTR [r9+r15*1],0x27
    c452:	lea    rax,[r15+0x1]
    c456:	cmp    r14,rax
    c459:	jbe    c461 <__sprintf_chk@plt+0x8781>
    c45b:	mov    BYTE PTR [r9+r15*1+0x1],0x27
    c461:	mov    BYTE PTR [rsp+0x42],0x0
    c466:	add    r15,0x2
    c46a:	jmp    be09 <__sprintf_chk@plt+0x8129>
    c46f:	cmp    r8d,0x2
    c473:	mov    ebp,0x20
    c478:	sete   al
    c47b:	jmp    c088 <__sprintf_chk@plt+0x83a8>
    c480:	mov    ebp,0xc
    c485:	mov    eax,0x66
    c48a:	jmp    c178 <__sprintf_chk@plt+0x8498>
    c48f:	mov    ebp,0x9
    c494:	mov    eax,0x74
    c499:	cmp    r8d,0x2
    c49d:	sete   r13b
    c4a1:	and    r13b,BYTE PTR [rsp+0x43]
    c4a6:	je     c178 <__sprintf_chk@plt+0x8498>
    c4ac:	jmp    c09b <__sprintf_chk@plt+0x83bb>
    c4b1:	mov    ebp,0x8
    c4b6:	mov    eax,0x62
    c4bb:	jmp    c178 <__sprintf_chk@plt+0x8498>
    c4c0:	cmp    BYTE PTR [rsp+0x10],0x0
    c4c5:	jne    c29d <__sprintf_chk@plt+0x85bd>
    c4cb:	xor    r13d,r13d
    c4ce:	xor    ebp,ebp
    c4d0:	test   BYTE PTR [rsp+0x80],0x1
    c4d8:	je     c183 <__sprintf_chk@plt+0x84a3>
    c4de:	add    rbx,0x1
    c4e2:	jmp    bc70 <__sprintf_chk@plt+0x7f90>
    c4e7:	mov    ebp,0xd
    c4ec:	mov    eax,0x72
    c4f1:	jmp    c499 <__sprintf_chk@plt+0x87b9>
    c4f3:	mov    ebp,0xb
    c4f8:	mov    eax,0x76
    c4fd:	jmp    c178 <__sprintf_chk@plt+0x8498>
    c502:	mov    ebp,0xa
    c507:	mov    eax,0x6e
    c50c:	jmp    c499 <__sprintf_chk@plt+0x87b9>
    c50e:	mov    ebp,0x7
    c513:	mov    eax,0x61
    c518:	jmp    c178 <__sprintf_chk@plt+0x8498>
    c51d:	nop    DWORD PTR [rax]
    c520:	movzx  ebp,BYTE PTR [rbp+0x0]
    c524:	cmp    bpl,0x7e
    c528:	ja     be78 <__sprintf_chk@plt+0x8198>
    c52e:	lea    rcx,[rip+0x17e2f]        # 24364 <__sprintf_chk@plt+0x20684>
    c535:	movzx  edx,bpl
    c539:	movsxd rax,DWORD PTR [rcx+rdx*4]
    c53d:	add    rax,rcx
    c540:	notrack jmp rax
    c543:	nop    DWORD PTR [rax+rax*1+0x0]
    c548:	xor    eax,eax
    c54a:	jmp    bd70 <__sprintf_chk@plt+0x8090>
    c54f:	xor    eax,eax
    c551:	test   rbx,rbx
    c554:	je     c13c <__sprintf_chk@plt+0x845c>
    c55a:	mov    r13d,eax
    c55d:	xor    r12d,r12d
    c560:	xor    eax,eax
    c562:	jmp    bd80 <__sprintf_chk@plt+0x80a0>
    c567:	xor    eax,eax
    c569:	mov    ebp,0x20
    c56e:	jmp    bd70 <__sprintf_chk@plt+0x8090>
    c573:	xor    r13d,r13d
    c576:	jmp    c153 <__sprintf_chk@plt+0x8473>
    c57b:	nop    DWORD PTR [rax+rax*1+0x0]
    c580:	cmp    BYTE PTR [rsp+0x43],0x0
    c585:	jne    cb81 <__sprintf_chk@plt+0x8ea1>
    c58b:	test   r14,r14
    c58e:	je     c979 <__sprintf_chk@plt+0x8c99>
    c594:	xor    edx,edx
    c596:	cmp    QWORD PTR [rsp+0x50],0x0
    c59c:	jne    c979 <__sprintf_chk@plt+0x8c99>
    c5a2:	mov    QWORD PTR [rsp+0x50],r14
    c5a7:	add    r15,0x3
    c5ab:	xor    eax,eax
    c5ad:	mov    r14,rdx
    c5b0:	mov    BYTE PTR [rsp+0x85],r12b
    c5b8:	mov    ebp,0x27
    c5bd:	mov    BYTE PTR [rsp+0x42],0x0
    c5c2:	jmp    bd9e <__sprintf_chk@plt+0x80be>
    c5c7:	nop    WORD PTR [rax+rax*1+0x0]
    c5d0:	cmp    BYTE PTR [rsp+0x43],0x0
    c5d5:	jne    cb81 <__sprintf_chk@plt+0x8ea1>
    c5db:	xor    r12d,r12d
    c5de:	xor    eax,eax
    c5e0:	mov    ebp,0x3f
    c5e5:	jmp    bd9e <__sprintf_chk@plt+0x80be>
    c5ea:	nop    WORD PTR [rax+rax*1+0x0]
    c5f0:	lea    rax,[rsp+0xb0]
    c5f8:	mov    QWORD PTR [rsp+0xb0],0x0
    c604:	mov    QWORD PTR [rsp+0x68],rax
    c609:	cmp    r11,0xffffffffffffffff
    c60d:	jne    c630 <__sprintf_chk@plt+0x8950>
    c60f:	mov    rdi,QWORD PTR [rsp+0x20]
    c614:	mov    DWORD PTR [rsp+0x38],r8d
    c619:	mov    QWORD PTR [rsp+0x30],r9
    c61e:	call   3810 <strlen@plt>
    c623:	mov    r8d,DWORD PTR [rsp+0x38]
    c628:	mov    r9,QWORD PTR [rsp+0x30]
    c62d:	mov    r11,rax
    c630:	mov    QWORD PTR [rsp+0x38],rbx
    c635:	xor    ecx,ecx
    c637:	lea    rax,[rsp+0xac]
    c63f:	mov    QWORD PTR [rsp+0x70],r9
    c644:	mov    QWORD PTR [rsp+0x78],r14
    c649:	mov    QWORD PTR [rsp+0x30],r11
    c64e:	mov    DWORD PTR [rsp+0x44],r8d
    c653:	mov    BYTE PTR [rsp+0x87],r13b
    c65b:	mov    r13,QWORD PTR [rsp+0x68]
    c660:	mov    BYTE PTR [rsp+0x86],bpl
    c668:	mov    rbp,rcx
    c66b:	mov    QWORD PTR [rsp+0x88],r15
    c673:	mov    r15,rax
    c676:	mov    rax,QWORD PTR [rsp+0x38]
    c67b:	mov    rdx,QWORD PTR [rsp+0x30]
    c680:	mov    rcx,r13
    c683:	mov    rdi,r15
    c686:	lea    rbx,[rax+rbp*1]
    c68a:	mov    rax,QWORD PTR [rsp+0x20]
    c68f:	sub    rdx,rbx
    c692:	lea    rsi,[rax+rbx*1]
    c696:	call   11a40 <__sprintf_chk@plt+0xdd60>
    c69b:	mov    r14,rax
    c69e:	test   rax,rax
    c6a1:	je     c6ef <__sprintf_chk@plt+0x8a0f>
    c6a3:	cmp    rax,0xffffffffffffffff
    c6a7:	je     cad2 <__sprintf_chk@plt+0x8df2>
    c6ad:	cmp    rax,0xfffffffffffffffe
    c6b1:	je     cb14 <__sprintf_chk@plt+0x8e34>
    c6b7:	cmp    DWORD PTR [rsp+0x44],0x2
    c6bc:	jne    c6c9 <__sprintf_chk@plt+0x89e9>
    c6be:	cmp    BYTE PTR [rsp+0x43],0x0
    c6c3:	jne    c870 <__sprintf_chk@plt+0x8b90>
    c6c9:	mov    edi,DWORD PTR [rsp+0xac]
    c6d0:	call   3c80 <iswprint@plt>
    c6d5:	mov    rdi,r13
    c6d8:	test   eax,eax
    c6da:	mov    eax,0x0
    c6df:	cmove  r12d,eax
    c6e3:	add    rbp,r14
    c6e6:	call   3c70 <mbsinit@plt>
    c6eb:	test   eax,eax
    c6ed:	je     c676 <__sprintf_chk@plt+0x8996>
    c6ef:	mov    rax,rbp
    c6f2:	mov    edx,r12d
    c6f5:	mov    rbx,QWORD PTR [rsp+0x38]
    c6fa:	mov    r9,QWORD PTR [rsp+0x70]
    c6ff:	movzx  ebp,BYTE PTR [rsp+0x86]
    c707:	mov    r15,QWORD PTR [rsp+0x88]
    c70f:	xor    edx,0x1
    c712:	movzx  r13d,BYTE PTR [rsp+0x87]
    c71b:	mov    r14,QWORD PTR [rsp+0x78]
    c720:	mov    r11,QWORD PTR [rsp+0x30]
    c725:	mov    r8d,DWORD PTR [rsp+0x44]
    c72a:	and    dl,BYTE PTR [rsp+0x10]
    c72e:	cmp    rax,0x1
    c732:	jbe    bec9 <__sprintf_chk@plt+0x81e9>
    c738:	mov    rcx,rax
    c73b:	mov    BYTE PTR [rsp+0x30],r12b
    c740:	movzx  edi,BYTE PTR [rsp+0x42]
    c745:	xor    esi,esi
    c747:	movzx  r12d,BYTE PTR [rsp+0x43]
    c74d:	mov    r10,QWORD PTR [rsp+0x20]
    c752:	add    rcx,rbx
    c755:	jmp    c80f <__sprintf_chk@plt+0x8b2f>
    c75a:	nop    WORD PTR [rax+rax*1+0x0]
    c760:	cmp    r8d,0x2
    c764:	sete   sil
    c768:	mov    eax,esi
    c76a:	test   r12b,r12b
    c76d:	jne    c9cf <__sprintf_chk@plt+0x8cef>
    c773:	mov    eax,edi
    c775:	xor    eax,0x1
    c778:	and    al,sil
    c77b:	je     c7ab <__sprintf_chk@plt+0x8acb>
    c77d:	cmp    r14,r15
    c780:	jbe    c787 <__sprintf_chk@plt+0x8aa7>
    c782:	mov    BYTE PTR [r9+r15*1],0x27
    c787:	lea    rsi,[r15+0x1]
    c78b:	cmp    r14,rsi
    c78e:	jbe    c796 <__sprintf_chk@plt+0x8ab6>
    c790:	mov    BYTE PTR [r9+r15*1+0x1],0x24
    c796:	lea    rsi,[r15+0x2]
    c79a:	cmp    r14,rsi
    c79d:	jbe    c7a5 <__sprintf_chk@plt+0x8ac5>
    c79f:	mov    BYTE PTR [r9+r15*1+0x2],0x27
    c7a5:	add    r15,0x3
    c7a9:	mov    edi,eax
    c7ab:	cmp    r14,r15
    c7ae:	jbe    c7b5 <__sprintf_chk@plt+0x8ad5>
    c7b0:	mov    BYTE PTR [r9+r15*1],0x5c
    c7b5:	lea    rax,[r15+0x1]
    c7b9:	cmp    r14,rax
    c7bc:	jbe    c7cb <__sprintf_chk@plt+0x8aeb>
    c7be:	mov    eax,ebp
    c7c0:	shr    al,0x6
    c7c3:	add    eax,0x30
    c7c6:	mov    BYTE PTR [r9+r15*1+0x1],al
    c7cb:	lea    rax,[r15+0x2]
    c7cf:	cmp    r14,rax
    c7d2:	jbe    c7e4 <__sprintf_chk@plt+0x8b04>
    c7d4:	mov    eax,ebp
    c7d6:	shr    al,0x3
    c7d9:	and    eax,0x7
    c7dc:	add    eax,0x30
    c7df:	mov    BYTE PTR [r9+r15*1+0x2],al
    c7e4:	and    ebp,0x7
    c7e7:	add    rbx,0x1
    c7eb:	add    r15,0x3
    c7ef:	add    ebp,0x30
    c7f2:	cmp    rcx,rbx
    c7f5:	jbe    c9d7 <__sprintf_chk@plt+0x8cf7>
    c7fb:	mov    esi,edx
    c7fd:	cmp    r14,r15
    c800:	jbe    c806 <__sprintf_chk@plt+0x8b26>
    c802:	mov    BYTE PTR [r9+r15*1],bpl
    c806:	movzx  ebp,BYTE PTR [r10+rbx*1]
    c80b:	add    r15,0x1
    c80f:	test   dl,dl
    c811:	jne    c760 <__sprintf_chk@plt+0x8a80>
    c817:	mov    eax,esi
    c819:	xor    eax,0x1
    c81c:	and    eax,edi
    c81e:	test   r13b,r13b
    c821:	je     c831 <__sprintf_chk@plt+0x8b51>
    c823:	cmp    r14,r15
    c826:	jbe    c82d <__sprintf_chk@plt+0x8b4d>
    c828:	mov    BYTE PTR [r9+r15*1],0x5c
    c82d:	add    r15,0x1
    c831:	add    rbx,0x1
    c835:	cmp    rbx,rcx
    c838:	jae    c9bf <__sprintf_chk@plt+0x8cdf>
    c83e:	test   al,al
    c840:	je     c9e7 <__sprintf_chk@plt+0x8d07>
    c846:	cmp    r14,r15
    c849:	jbe    c850 <__sprintf_chk@plt+0x8b70>
    c84b:	mov    BYTE PTR [r9+r15*1],0x27
    c850:	lea    rax,[r15+0x1]
    c854:	cmp    r14,rax
    c857:	jbe    c85f <__sprintf_chk@plt+0x8b7f>
    c859:	mov    BYTE PTR [r9+r15*1+0x1],0x27
    c85f:	add    r15,0x2
    c863:	xor    r13d,r13d
    c866:	xor    edi,edi
    c868:	jmp    c7fd <__sprintf_chk@plt+0x8b1d>
    c86a:	nop    WORD PTR [rax+rax*1+0x0]
    c870:	cmp    rax,0x1
    c874:	je     c6c9 <__sprintf_chk@plt+0x89e9>
    c87a:	mov    rsi,QWORD PTR [rsp+0x20]
    c87f:	lea    rcx,[rsi+r14*1]
    c883:	lea    rax,[rsi+rbx*1+0x1]
    c888:	lea    r10,[rcx+rbx*1]
    c88c:	jmp    c89d <__sprintf_chk@plt+0x8bbd>
    c88e:	xchg   ax,ax
    c890:	add    rax,0x1
    c894:	cmp    r10,rax
    c897:	je     c6c9 <__sprintf_chk@plt+0x89e9>
    c89d:	movzx  ebx,BYTE PTR [rax]
    c8a0:	lea    ecx,[rbx-0x5b]
    c8a3:	cmp    cl,0x21
    c8a6:	ja     c890 <__sprintf_chk@plt+0x8bb0>
    c8a8:	movabs rbx,0x20000002b
    c8b2:	mov    edx,0x1
    c8b7:	shl    rdx,cl
    c8ba:	test   rdx,rbx
    c8bd:	je     c890 <__sprintf_chk@plt+0x8bb0>
    c8bf:	mov    rax,QWORD PTR [rsp+0x70]
    c8c4:	movzx  r13d,BYTE PTR [rsp+0x10]
    c8ca:	and    DWORD PTR [rsp+0x80],0xfffffffd
    c8d2:	mov    r14,QWORD PTR [rsp+0x78]
    c8d7:	mov    QWORD PTR [rsp+0x60],rax
    c8dc:	mov    r11,QWORD PTR [rsp+0x30]
    c8e1:	test   r13b,r13b
    c8e4:	jne    c1d4 <__sprintf_chk@plt+0x84f4>
    c8ea:	mov    QWORD PTR [rsp+0x8],r11
    c8ef:	xor    r13d,r13d
    c8f2:	call   3800 <__ctype_get_mb_cur_max@plt>
    c8f7:	mov    r11,QWORD PTR [rsp+0x8]
    c8fc:	mov    QWORD PTR [rsp+0x18],0x0
    c905:	mov    QWORD PTR [rsp+0x58],rax
    c90a:	jmp    c1f7 <__sprintf_chk@plt+0x8517>
    c90f:	nop
    c910:	mov    rcx,r15
    c913:	cmp    r14,r15
    c916:	jbe    c926 <__sprintf_chk@plt+0x8c46>
    c918:	movzx  eax,BYTE PTR [rsp+0x42]
    c91d:	mov    BYTE PTR [r9+rcx*1],0x5c
    c922:	mov    BYTE PTR [rsp+0x42],al
    c926:	lea    r15,[rcx+0x1]
    c92a:	cmp    r8d,0x2
    c92e:	je     c9ef <__sprintf_chk@plt+0x8d0f>
    c934:	lea    rax,[rbx+0x1]
    c938:	mov    ebp,0x30
    c93d:	cmp    rax,r11
    c940:	jae    c95b <__sprintf_chk@plt+0x8c7b>
    c942:	mov    rax,QWORD PTR [rsp+0x20]
    c947:	movzx  eax,BYTE PTR [rax+rbx*1+0x1]
    c94c:	mov    BYTE PTR [rsp+0x30],al
    c950:	sub    eax,0x30
    c953:	cmp    al,0x9
    c955:	jbe    c9ff <__sprintf_chk@plt+0x8d1f>
    c95b:	movzx  eax,BYTE PTR [rsp+0x10]
    c960:	xor    eax,0x1
    c963:	or     al,dl
    c965:	mov    eax,r12d
    c968:	mov    r12d,0x0
    c96e:	je     bd80 <__sprintf_chk@plt+0x80a0>
    c974:	jmp    bd9e <__sprintf_chk@plt+0x80be>
    c979:	cmp    r14,r15
    c97c:	jbe    c983 <__sprintf_chk@plt+0x8ca3>
    c97e:	mov    BYTE PTR [r9+r15*1],0x27
    c983:	lea    rax,[r15+0x1]
    c987:	cmp    r14,rax
    c98a:	jbe    c992 <__sprintf_chk@plt+0x8cb2>
    c98c:	mov    BYTE PTR [r9+r15*1+0x1],0x5c
    c992:	lea    rax,[r15+0x2]
    c996:	cmp    r14,rax
    c999:	jbe    cd25 <__sprintf_chk@plt+0x9045>
    c99f:	mov    rdx,r14
    c9a2:	mov    BYTE PTR [r9+r15*1+0x2],0x27
    c9a8:	mov    r14,QWORD PTR [rsp+0x50]
    c9ad:	jmp    c5a2 <__sprintf_chk@plt+0x88c2>
    c9b2:	movzx  edx,BYTE PTR [rsp+0x10]
    c9b7:	xor    r12d,r12d
    c9ba:	jmp    c738 <__sprintf_chk@plt+0x8a58>
    c9bf:	mov    BYTE PTR [rsp+0x42],dil
    c9c4:	movzx  r12d,BYTE PTR [rsp+0x30]
    c9ca:	jmp    c440 <__sprintf_chk@plt+0x8760>
    c9cf:	mov    r12d,r8d
    c9d2:	jmp    c0aa <__sprintf_chk@plt+0x83ca>
    c9d7:	mov    BYTE PTR [rsp+0x42],dil
    c9dc:	movzx  r12d,BYTE PTR [rsp+0x30]
    c9e2:	jmp    be09 <__sprintf_chk@plt+0x8129>
    c9e7:	xor    r13d,r13d
    c9ea:	jmp    c7fd <__sprintf_chk@plt+0x8b1d>
    c9ef:	mov    eax,r12d
    c9f2:	mov    ebp,0x30
    c9f7:	xor    r12d,r12d
    c9fa:	jmp    bd9e <__sprintf_chk@plt+0x80be>
    c9ff:	cmp    r14,r15
    ca02:	jbe    ca09 <__sprintf_chk@plt+0x8d29>
    ca04:	mov    BYTE PTR [r9+r15*1],0x30
    ca09:	lea    rax,[rcx+0x2]
    ca0d:	cmp    r14,rax
    ca10:	jbe    ca18 <__sprintf_chk@plt+0x8d38>
    ca12:	mov    BYTE PTR [r9+rcx*1+0x2],0x30
    ca18:	lea    r15,[rcx+0x3]
    ca1c:	mov    ebp,0x30
    ca21:	jmp    c95b <__sprintf_chk@plt+0x8c7b>
    ca26:	mov    rdx,QWORD PTR [rsp+0x98]
    ca2e:	movzx  eax,BYTE PTR [rdx]
    ca31:	test   al,al
    ca33:	je     bc0d <__sprintf_chk@plt+0x7f2d>
    ca39:	mov    rcx,QWORD PTR [rsp+0x60]
    ca3e:	xchg   ax,ax
    ca40:	cmp    r14,r15
    ca43:	jbe    ca49 <__sprintf_chk@plt+0x8d69>
    ca45:	mov    BYTE PTR [rcx+r15*1],al
    ca49:	add    r15,0x1
    ca4d:	movzx  eax,BYTE PTR [rdx+r15*1]
    ca52:	test   al,al
    ca54:	jne    ca40 <__sprintf_chk@plt+0x8d60>
    ca56:	jmp    bc0d <__sprintf_chk@plt+0x7f2d>
    ca5b:	movzx  ebp,BYTE PTR [rsi+rax*1]
    ca5f:	lea    edx,[rbp-0x21]
    ca62:	cmp    dl,0x1d
    ca65:	ja     c100 <__sprintf_chk@plt+0x8420>
    ca6b:	lea    rsi,[rip+0x17aee]        # 24560 <__sprintf_chk@plt+0x20880>
    ca72:	movzx  edx,dl
    ca75:	movsxd rdx,DWORD PTR [rsi+rdx*4]
    ca79:	add    rdx,rsi
    ca7c:	notrack jmp rdx
    ca7f:	cmp    BYTE PTR [rsp+0x43],0x0
    ca84:	jne    bee4 <__sprintf_chk@plt+0x8204>
    ca8a:	cmp    r14,r15
    ca8d:	jbe    ca94 <__sprintf_chk@plt+0x8db4>
    ca8f:	mov    BYTE PTR [r9+r15*1],0x3f
    ca94:	lea    rdx,[r15+0x1]
    ca98:	cmp    r14,rdx
    ca9b:	jbe    caa3 <__sprintf_chk@plt+0x8dc3>
    ca9d:	mov    BYTE PTR [r9+r15*1+0x1],0x22
    caa3:	lea    rdx,[r15+0x2]
    caa7:	cmp    r14,rdx
    caaa:	jbe    cab2 <__sprintf_chk@plt+0x8dd2>
    caac:	mov    BYTE PTR [r9+r15*1+0x2],0x22
    cab2:	lea    rdx,[r15+0x3]
    cab6:	cmp    r14,rdx
    cab9:	jbe    cac1 <__sprintf_chk@plt+0x8de1>
    cabb:	mov    BYTE PTR [r9+r15*1+0x3],0x3f
    cac1:	add    r15,0x4
    cac5:	xor    edx,edx
    cac7:	xor    r12d,r12d
    caca:	mov    rbx,rax
    cacd:	jmp    c95b <__sprintf_chk@plt+0x8c7b>
    cad2:	mov    rax,rbp
    cad5:	mov    rbx,QWORD PTR [rsp+0x38]
    cada:	mov    r9,QWORD PTR [rsp+0x70]
    cadf:	xor    r12d,r12d
    cae2:	movzx  ebp,BYTE PTR [rsp+0x86]
    caea:	mov    r15,QWORD PTR [rsp+0x88]
    caf2:	movzx  r13d,BYTE PTR [rsp+0x87]
    cafb:	mov    r14,QWORD PTR [rsp+0x78]
    cb00:	mov    r11,QWORD PTR [rsp+0x30]
    cb05:	mov    r8d,DWORD PTR [rsp+0x44]
    cb0a:	movzx  edx,BYTE PTR [rsp+0x10]
    cb0f:	jmp    c72e <__sprintf_chk@plt+0x8a4e>
    cb14:	mov    r11,QWORD PTR [rsp+0x30]
    cb19:	mov    r10,rbx
    cb1c:	mov    rax,rbp
    cb1f:	mov    rbx,QWORD PTR [rsp+0x38]
    cb24:	movzx  ebp,BYTE PTR [rsp+0x86]
    cb2c:	mov    r15,QWORD PTR [rsp+0x88]
    cb34:	movzx  r13d,BYTE PTR [rsp+0x87]
    cb3d:	mov    r9,QWORD PTR [rsp+0x70]
    cb42:	mov    r14,QWORD PTR [rsp+0x78]
    cb47:	mov    r8d,DWORD PTR [rsp+0x44]
    cb4c:	mov    rdx,QWORD PTR [rsp+0x20]
    cb51:	cmp    r10,r11
    cb54:	jb     cb6d <__sprintf_chk@plt+0x8e8d>
    cb56:	jmp    cb74 <__sprintf_chk@plt+0x8e94>
    cb58:	nop    DWORD PTR [rax+rax*1+0x0]
    cb60:	add    rax,0x1
    cb64:	lea    r10,[rbx+rax*1]
    cb68:	cmp    r10,r11
    cb6b:	jae    cb74 <__sprintf_chk@plt+0x8e94>
    cb6d:	cmp    BYTE PTR [rdx+r10*1],0x0
    cb72:	jne    cb60 <__sprintf_chk@plt+0x8e80>
    cb74:	movzx  edx,BYTE PTR [rsp+0x10]
    cb79:	xor    r12d,r12d
    cb7c:	jmp    c72e <__sprintf_chk@plt+0x8a4e>
    cb81:	movzx  r13d,BYTE PTR [rsp+0x10]
    cb87:	mov    r12d,r8d
    cb8a:	mov    eax,r13d
    cb8d:	jmp    c0aa <__sprintf_chk@plt+0x83ca>
    cb92:	and    DWORD PTR [rsp+0x80],0xfffffffd
    cb9a:	mov    r12d,r8d
    cb9d:	jmp    c0ba <__sprintf_chk@plt+0x83da>
    cba2:	mov    esi,r12d
    cba5:	mov    rdi,rcx
    cba8:	call   ba00 <__sprintf_chk@plt+0x7d20>
    cbad:	mov    r11,QWORD PTR [rsp+0x8]
    cbb2:	mov    QWORD PTR [rsp+0x90],rax
    cbba:	jmp    bc02 <__sprintf_chk@plt+0x7f22>
    cbbf:	mov    rdi,QWORD PTR [rsp+0x98]
    cbc7:	mov    esi,r12d
    cbca:	call   ba00 <__sprintf_chk@plt+0x7d20>
    cbcf:	mov    r11,QWORD PTR [rsp+0x8]
    cbd4:	mov    QWORD PTR [rsp+0x98],rax
    cbdc:	jmp    bbca <__sprintf_chk@plt+0x7eea>
    cbe1:	mov    eax,r13d
    cbe4:	jmp    c569 <__sprintf_chk@plt+0x8889>
    cbe9:	cmp    r8d,0x2
    cbed:	mov    r12d,r8d
    cbf0:	sete   al
    cbf3:	jmp    c0aa <__sprintf_chk@plt+0x83ca>
    cbf8:	movzx  eax,BYTE PTR [rsp+0x85]
    cc00:	mov    r10,r14
    cc03:	mov    rbx,QWORD PTR [rsp+0x48]
    cc08:	test   rbx,rbx
    cc0b:	je     cc3d <__sprintf_chk@plt+0x8f5d>
    cc0d:	test   al,al
    cc0f:	je     cc3d <__sprintf_chk@plt+0x8f5d>
    cc11:	movzx  ecx,BYTE PTR [rbx]
    cc14:	mov    rax,rbx
    cc17:	test   cl,cl
    cc19:	je     cc3d <__sprintf_chk@plt+0x8f5d>
    cc1b:	mov    rsi,QWORD PTR [rsp+0x60]
    cc20:	mov    rdx,r15
    cc23:	sub    rax,r15
    cc26:	cmp    r10,rdx
    cc29:	jbe    cc2e <__sprintf_chk@plt+0x8f4e>
    cc2b:	mov    BYTE PTR [rsi+rdx*1],cl
    cc2e:	add    rdx,0x1
    cc32:	movzx  ecx,BYTE PTR [rax+rdx*1]
    cc36:	test   cl,cl
    cc38:	jne    cc26 <__sprintf_chk@plt+0x8f46>
    cc3a:	mov    r15,rdx
    cc3d:	cmp    r10,r15
    cc40:	jbe    cc4c <__sprintf_chk@plt+0x8f6c>
    cc42:	mov    rax,QWORD PTR [rsp+0x60]
    cc47:	mov    BYTE PTR [rax+r15*1],0x0
    cc4c:	mov    rax,QWORD PTR [rsp+0xb8]
    cc54:	sub    rax,QWORD PTR fs:0x28
    cc5d:	jne    cd57 <__sprintf_chk@plt+0x9077>
    cc63:	add    rsp,0xc8
    cc6a:	mov    rax,r15
    cc6d:	pop    rbx
    cc6e:	pop    rbp
    cc6f:	pop    r12
    cc71:	pop    r13
    cc73:	pop    r14
    cc75:	pop    r15
    cc77:	ret    
    cc78:	mov    QWORD PTR [rsp+0x10],r11
    cc7d:	xor    r15d,r15d
    cc80:	mov    r13d,0x5
    cc86:	call   3800 <__ctype_get_mb_cur_max@plt>
    cc8b:	test   BYTE PTR [rsp+0x80],0x2
    cc93:	mov    r11,QWORD PTR [rsp+0x10]
    cc98:	mov    QWORD PTR [rsp+0x28],0x1
    cca1:	mov    QWORD PTR [rsp+0x58],rax
    cca6:	lea    rax,[rip+0x1722b]        # 23ed8 <__sprintf_chk@plt+0x201f8>
    ccad:	mov    QWORD PTR [rsp+0x48],rax
    ccb2:	jne    ccec <__sprintf_chk@plt+0x900c>
    ccb4:	mov    r14,QWORD PTR [rsp+0x50]
    ccb9:	jmp    bf3c <__sprintf_chk@plt+0x825c>
    ccbe:	mov    r10,r14
    ccc1:	jmp    cc03 <__sprintf_chk@plt+0x8f23>
    ccc6:	mov    r10,r14
    ccc9:	mov    eax,ebx
    cccb:	jmp    cc03 <__sprintf_chk@plt+0x8f23>
    ccd0:	movzx  r13d,BYTE PTR [rsp+0x10]
    ccd6:	and    DWORD PTR [rsp+0x80],0xfffffffd
    ccde:	test   r13b,r13b
    cce1:	jne    c1d4 <__sprintf_chk@plt+0x84f4>
    cce7:	jmp    c8ea <__sprintf_chk@plt+0x8c0a>
    ccec:	movzx  eax,BYTE PTR [rsp+0x8]
    ccf1:	mov    r14,QWORD PTR [rsp+0x50]
    ccf6:	mov    BYTE PTR [rsp+0x42],0x0
    ccfb:	mov    BYTE PTR [rsp+0x85],0x0
    cd03:	mov    QWORD PTR [rsp+0x50],0x0
    cd0c:	mov    BYTE PTR [rsp+0x43],al
    cd10:	mov    BYTE PTR [rsp+0x10],al
    cd14:	jmp    bc66 <__sprintf_chk@plt+0x7f86>
    cd19:	test   ebx,ebx
    cd1b:	jne    cd32 <__sprintf_chk@plt+0x9052>
    cd1d:	xor    r13d,r13d
    cd20:	jmp    c1f7 <__sprintf_chk@plt+0x8517>
    cd25:	mov    rdx,r14
    cd28:	mov    r14,QWORD PTR [rsp+0x50]
    cd2d:	jmp    c5a2 <__sprintf_chk@plt+0x88c2>
    cd32:	lea    rax,[rip+0x16a67]        # 237a0 <__sprintf_chk@plt+0x1fac0>
    cd39:	mov    BYTE PTR [rsp+0x43],0x1
    cd3e:	xor    r13d,r13d
    cd41:	xor    r15d,r15d
    cd44:	mov    QWORD PTR [rsp+0x28],0x1
    cd4d:	mov    QWORD PTR [rsp+0x48],rax
    cd52:	jmp    bc3e <__sprintf_chk@plt+0x7f5e>
    cd57:	call   3840 <__stack_chk_fail@plt>
    cd5c:	mov    ebp,eax
    cd5e:	jmp    c19d <__sprintf_chk@plt+0x84bd>
    cd63:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    cd6e:	xchg   ax,ax
    cd70:	push   r15
    cd72:	push   r14
    cd74:	push   r13
    cd76:	mov    r13,rdx
    cd79:	push   r12
    cd7b:	mov    r12,rsi
    cd7e:	push   rbp
    cd7f:	mov    rbp,rcx
    cd82:	push   rbx
    cd83:	movsxd rbx,edi
    cd86:	sub    rsp,0x28
    cd8a:	call   36f0 <__errno_location@plt>
    cd8f:	mov    r15,QWORD PTR [rip+0x1f2ea]        # 2c080 <__sprintf_chk@plt+0x283a0>
    cd96:	mov    QWORD PTR [rsp],rax
    cd9a:	mov    eax,DWORD PTR [rax]
    cd9c:	mov    DWORD PTR [rsp+0xc],eax
    cda0:	test   ebx,ebx
    cda2:	js     3d18 <__sprintf_chk@plt+0x38>
    cda8:	cmp    DWORD PTR [rip+0x1f2ca],ebx        # 2c078 <__sprintf_chk@plt+0x28398>
    cdae:	jg     ce11 <__sprintf_chk@plt+0x9131>
    cdb0:	cmp    ebx,0x7fffffff
    cdb6:	je     cf09 <__sprintf_chk@plt+0x9229>
    cdbc:	lea    r14d,[rbx+0x1]
    cdc0:	lea    rax,[rip+0x1f2c9]        # 2c090 <__sprintf_chk@plt+0x283b0>
    cdc7:	movsxd rsi,r14d
    cdca:	shl    rsi,0x4
    cdce:	cmp    r15,rax
    cdd1:	je     cee8 <__sprintf_chk@plt+0x9208>
    cdd7:	mov    rdi,r15
    cdda:	call   e390 <__sprintf_chk@plt+0xa6b0>
    cddf:	mov    QWORD PTR [rip+0x1f29a],rax        # 2c080 <__sprintf_chk@plt+0x283a0>
    cde6:	mov    r15,rax
    cde9:	movsxd rdi,DWORD PTR [rip+0x1f288]        # 2c078 <__sprintf_chk@plt+0x28398>
    cdf0:	mov    edx,r14d
    cdf3:	xor    esi,esi
    cdf5:	sub    edx,edi
    cdf7:	shl    rdi,0x4
    cdfb:	movsxd rdx,edx
    cdfe:	add    rdi,r15
    ce01:	shl    rdx,0x4
    ce05:	call   3900 <memset@plt>
    ce0a:	mov    DWORD PTR [rip+0x1f267],r14d        # 2c078 <__sprintf_chk@plt+0x28398>
    ce11:	lea    rax,[rbp+0x8]
    ce15:	shl    rbx,0x4
    ce19:	sub    rsp,0x8
    ce1d:	mov    r14d,DWORD PTR [rbp+0x4]
    ce21:	add    rbx,r15
    ce24:	mov    QWORD PTR [rsp+0x20],rax
    ce29:	mov    r8d,DWORD PTR [rbp+0x0]
    ce2d:	mov    rcx,r13
    ce30:	mov    rsi,QWORD PTR [rbx]
    ce33:	mov    r15,QWORD PTR [rbx+0x8]
    ce37:	push   QWORD PTR [rbp+0x30]
    ce3a:	or     r14d,0x1
    ce3e:	push   QWORD PTR [rbp+0x28]
    ce41:	mov    r9d,r14d
    ce44:	mov    rdx,r12
    ce47:	push   rax
    ce48:	mov    rdi,r15
    ce4b:	mov    QWORD PTR [rsp+0x30],rsi
    ce50:	call   bae0 <__sprintf_chk@plt+0x7e00>
    ce55:	mov    rsi,QWORD PTR [rsp+0x30]
    ce5a:	add    rsp,0x20
    ce5e:	cmp    rsi,rax
    ce61:	ja     cec8 <__sprintf_chk@plt+0x91e8>
    ce63:	lea    rsi,[rax+0x1]
    ce67:	lea    rax,[rip+0x1f352]        # 2c1c0 <stderr@@GLIBC_2.2.5+0xe0>
    ce6e:	mov    QWORD PTR [rbx],rsi
    ce71:	cmp    r15,rax
    ce74:	je     ce88 <__sprintf_chk@plt+0x91a8>
    ce76:	mov    rdi,r15
    ce79:	mov    QWORD PTR [rsp+0x10],rsi
    ce7e:	call   3680 <free@plt>
    ce83:	mov    rsi,QWORD PTR [rsp+0x10]
    ce88:	mov    rdi,rsi
    ce8b:	mov    QWORD PTR [rsp+0x10],rsi
    ce90:	call   e370 <__sprintf_chk@plt+0xa690>
    ce95:	sub    rsp,0x8
    ce99:	mov    r8d,DWORD PTR [rbp+0x0]
    ce9d:	mov    r9d,r14d
    cea0:	mov    QWORD PTR [rbx+0x8],rax
    cea4:	mov    rcx,r13
    cea7:	mov    rdx,r12
    ceaa:	mov    rdi,rax
    cead:	push   QWORD PTR [rbp+0x30]
    ceb0:	mov    r15,rax
    ceb3:	push   QWORD PTR [rbp+0x28]
    ceb6:	push   QWORD PTR [rsp+0x30]
    ceba:	mov    rsi,QWORD PTR [rsp+0x30]
    cebf:	call   bae0 <__sprintf_chk@plt+0x7e00>
    cec4:	add    rsp,0x20
    cec8:	mov    rax,QWORD PTR [rsp]
    cecc:	mov    ecx,DWORD PTR [rsp+0xc]
    ced0:	mov    DWORD PTR [rax],ecx
    ced2:	add    rsp,0x28
    ced6:	mov    rax,r15
    ced9:	pop    rbx
    ceda:	pop    rbp
    cedb:	pop    r12
    cedd:	pop    r13
    cedf:	pop    r14
    cee1:	pop    r15
    cee3:	ret    
    cee4:	nop    DWORD PTR [rax+0x0]
    cee8:	xor    edi,edi
    ceea:	call   e390 <__sprintf_chk@plt+0xa6b0>
    ceef:	movdqa xmm0,XMMWORD PTR [rip+0x1f199]        # 2c090 <__sprintf_chk@plt+0x283b0>
    cef7:	mov    QWORD PTR [rip+0x1f182],rax        # 2c080 <__sprintf_chk@plt+0x283a0>
    cefe:	mov    r15,rax
    cf01:	movups XMMWORD PTR [rax],xmm0
    cf04:	jmp    cde9 <__sprintf_chk@plt+0x9109>
    cf09:	call   e520 <__sprintf_chk@plt+0xa840>
    cf0e:	xchg   ax,ax
    cf10:	endbr64 
    cf14:	push   r12
    cf16:	push   rbp
    cf17:	mov    rbp,rdi
    cf1a:	push   rbx
    cf1b:	call   36f0 <__errno_location@plt>
    cf20:	test   rbp,rbp
    cf23:	mov    esi,0x38
    cf28:	mov    r12d,DWORD PTR [rax]
    cf2b:	mov    rbx,rax
    cf2e:	lea    rax,[rip+0x1f38b]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    cf35:	cmove  rbp,rax
    cf39:	mov    rdi,rbp
    cf3c:	call   e4a0 <__sprintf_chk@plt+0xa7c0>
    cf41:	mov    DWORD PTR [rbx],r12d
    cf44:	pop    rbx
    cf45:	pop    rbp
    cf46:	pop    r12
    cf48:	ret    
    cf49:	nop    DWORD PTR [rax+0x0]
    cf50:	endbr64 
    cf54:	test   rdi,rdi
    cf57:	lea    rax,[rip+0x1f362]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    cf5e:	cmove  rdi,rax
    cf62:	mov    eax,DWORD PTR [rdi]
    cf64:	ret    
    cf65:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    cf70:	endbr64 
    cf74:	test   rdi,rdi
    cf77:	lea    rax,[rip+0x1f342]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    cf7e:	cmove  rdi,rax
    cf82:	mov    DWORD PTR [rdi],esi
    cf84:	ret    
    cf85:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    cf90:	endbr64 
    cf94:	test   rdi,rdi
    cf97:	lea    rax,[rip+0x1f322]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    cf9e:	mov    ecx,esi
    cfa0:	cmove  rdi,rax
    cfa4:	mov    eax,esi
    cfa6:	and    ecx,0x1f
    cfa9:	shr    al,0x5
    cfac:	movzx  eax,al
    cfaf:	lea    rsi,[rdi+rax*4+0x8]
    cfb4:	mov    edi,DWORD PTR [rsi]
    cfb6:	mov    eax,edi
    cfb8:	shr    eax,cl
    cfba:	xor    edx,eax
    cfbc:	and    eax,0x1
    cfbf:	and    edx,0x1
    cfc2:	shl    edx,cl
    cfc4:	xor    edx,edi
    cfc6:	mov    DWORD PTR [rsi],edx
    cfc8:	ret    
    cfc9:	nop    DWORD PTR [rax+0x0]
    cfd0:	endbr64 
    cfd4:	test   rdi,rdi
    cfd7:	lea    rax,[rip+0x1f2e2]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    cfde:	cmove  rdi,rax
    cfe2:	mov    eax,DWORD PTR [rdi+0x4]
    cfe5:	mov    DWORD PTR [rdi+0x4],esi
    cfe8:	ret    
    cfe9:	nop    DWORD PTR [rax+0x0]
    cff0:	endbr64 
    cff4:	sub    rsp,0x8
    cff8:	lea    rax,[rip+0x1f2c1]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    cfff:	test   rdi,rdi
    d002:	cmove  rdi,rax
    d006:	mov    DWORD PTR [rdi],0xa
    d00c:	test   rsi,rsi
    d00f:	je     3d1d <__sprintf_chk@plt+0x3d>
    d015:	test   rdx,rdx
    d018:	je     3d1d <__sprintf_chk@plt+0x3d>
    d01e:	mov    QWORD PTR [rdi+0x28],rsi
    d022:	mov    QWORD PTR [rdi+0x30],rdx
    d026:	add    rsp,0x8
    d02a:	ret    
    d02b:	nop    DWORD PTR [rax+rax*1+0x0]
    d030:	endbr64 
    d034:	push   r15
    d036:	lea    rax,[rip+0x1f283]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    d03d:	push   r14
    d03f:	mov    r14,rdx
    d042:	push   r13
    d044:	mov    r13,rsi
    d047:	push   r12
    d049:	mov    r12,rdi
    d04c:	push   rbp
    d04d:	push   rbx
    d04e:	mov    rbx,r8
    d051:	sub    rsp,0x18
    d055:	test   r8,r8
    d058:	cmove  rbx,rax
    d05c:	mov    QWORD PTR [rsp+0x8],rcx
    d061:	call   36f0 <__errno_location@plt>
    d066:	sub    rsp,0x8
    d06a:	mov    rdx,r14
    d06d:	mov    rsi,r13
    d070:	mov    r15d,DWORD PTR [rax]
    d073:	mov    rbp,rax
    d076:	lea    rax,[rbx+0x8]
    d07a:	mov    r9d,DWORD PTR [rbx+0x4]
    d07e:	push   QWORD PTR [rbx+0x30]
    d081:	mov    r8d,DWORD PTR [rbx]
    d084:	mov    rdi,r12
    d087:	push   QWORD PTR [rbx+0x28]
    d08a:	push   rax
    d08b:	mov    rcx,QWORD PTR [rsp+0x28]
    d090:	call   bae0 <__sprintf_chk@plt+0x7e00>
    d095:	mov    DWORD PTR [rbp+0x0],r15d
    d099:	add    rsp,0x38
    d09d:	pop    rbx
    d09e:	pop    rbp
    d09f:	pop    r12
    d0a1:	pop    r13
    d0a3:	pop    r14
    d0a5:	pop    r15
    d0a7:	ret    
    d0a8:	nop    DWORD PTR [rax+rax*1+0x0]
    d0b0:	endbr64 
    d0b4:	push   r15
    d0b6:	lea    rax,[rip+0x1f203]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    d0bd:	push   r14
    d0bf:	mov    r14,rsi
    d0c2:	push   r13
    d0c4:	mov    r13,rdi
    d0c7:	push   r12
    d0c9:	push   rbp
    d0ca:	mov    rbp,rdx
    d0cd:	push   rbx
    d0ce:	mov    rbx,rcx
    d0d1:	sub    rsp,0x28
    d0d5:	test   rcx,rcx
    d0d8:	cmove  rbx,rax
    d0dc:	call   36f0 <__errno_location@plt>
    d0e1:	xor    r9d,r9d
    d0e4:	test   rbp,rbp
    d0e7:	mov    rcx,r14
    d0ea:	mov    r12,rax
    d0ed:	mov    eax,DWORD PTR [rax]
    d0ef:	sete   r9b
    d0f3:	lea    r10,[rbx+0x8]
    d0f7:	sub    rsp,0x8
    d0fb:	or     r9d,DWORD PTR [rbx+0x4]
    d0ff:	mov    r8d,DWORD PTR [rbx]
    d102:	mov    rdx,r13
    d105:	mov    DWORD PTR [rsp+0x18],eax
    d109:	xor    esi,esi
    d10b:	xor    edi,edi
    d10d:	push   QWORD PTR [rbx+0x30]
    d110:	push   QWORD PTR [rbx+0x28]
    d113:	push   r10
    d115:	mov    QWORD PTR [rsp+0x38],r10
    d11a:	mov    DWORD PTR [rsp+0x34],r9d
    d11f:	call   bae0 <__sprintf_chk@plt+0x7e00>
    d124:	add    rsp,0x20
    d128:	lea    rsi,[rax+0x1]
    d12c:	mov    r15,rax
    d12f:	mov    rdi,rsi
    d132:	mov    QWORD PTR [rsp+0x8],rsi
    d137:	call   e370 <__sprintf_chk@plt+0xa690>
    d13c:	sub    rsp,0x8
    d140:	push   QWORD PTR [rbx+0x30]
    d143:	mov    r8d,DWORD PTR [rbx]
    d146:	push   QWORD PTR [rbx+0x28]
    d149:	mov    rcx,r14
    d14c:	mov    rdx,r13
    d14f:	mov    rdi,rax
    d152:	mov    r10,QWORD PTR [rsp+0x30]
    d157:	push   r10
    d159:	mov    rsi,QWORD PTR [rsp+0x28]
    d15e:	mov    r9d,DWORD PTR [rsp+0x34]
    d163:	mov    QWORD PTR [rsp+0x28],rax
    d168:	call   bae0 <__sprintf_chk@plt+0x7e00>
    d16d:	mov    eax,DWORD PTR [rsp+0x30]
    d171:	add    rsp,0x20
    d175:	test   rbp,rbp
    d178:	mov    r11,QWORD PTR [rsp+0x8]
    d17d:	mov    DWORD PTR [r12],eax
    d181:	je     d187 <__sprintf_chk@plt+0x94a7>
    d183:	mov    QWORD PTR [rbp+0x0],r15
    d187:	add    rsp,0x28
    d18b:	mov    rax,r11
    d18e:	pop    rbx
    d18f:	pop    rbp
    d190:	pop    r12
    d192:	pop    r13
    d194:	pop    r14
    d196:	pop    r15
    d198:	ret    
    d199:	nop    DWORD PTR [rax+0x0]
    d1a0:	endbr64 
    d1a4:	mov    rcx,rdx
    d1a7:	xor    edx,edx
    d1a9:	jmp    d0b0 <__sprintf_chk@plt+0x93d0>
    d1ae:	xchg   ax,ax
    d1b0:	endbr64 
    d1b4:	mov    eax,DWORD PTR [rip+0x1eebe]        # 2c078 <__sprintf_chk@plt+0x28398>
    d1ba:	push   r12
    d1bc:	mov    r12,QWORD PTR [rip+0x1eebd]        # 2c080 <__sprintf_chk@plt+0x283a0>
    d1c3:	push   rbp
    d1c4:	push   rbx
    d1c5:	cmp    eax,0x1
    d1c8:	jle    d1f1 <__sprintf_chk@plt+0x9511>
    d1ca:	sub    eax,0x2
    d1cd:	lea    rbx,[r12+0x18]
    d1d2:	shl    rax,0x4
    d1d6:	lea    rbp,[r12+rax*1+0x28]
    d1db:	nop    DWORD PTR [rax+rax*1+0x0]
    d1e0:	mov    rdi,QWORD PTR [rbx]
    d1e3:	add    rbx,0x10
    d1e7:	call   3680 <free@plt>
    d1ec:	cmp    rbx,rbp
    d1ef:	jne    d1e0 <__sprintf_chk@plt+0x9500>
    d1f1:	mov    rdi,QWORD PTR [r12+0x8]
    d1f6:	lea    rbx,[rip+0x1efc3]        # 2c1c0 <stderr@@GLIBC_2.2.5+0xe0>
    d1fd:	cmp    rdi,rbx
    d200:	je     d219 <__sprintf_chk@plt+0x9539>
    d202:	call   3680 <free@plt>
    d207:	mov    QWORD PTR [rip+0x1ee8a],rbx        # 2c098 <__sprintf_chk@plt+0x283b8>
    d20e:	mov    QWORD PTR [rip+0x1ee77],0x100        # 2c090 <__sprintf_chk@plt+0x283b0>
    d219:	lea    rbx,[rip+0x1ee70]        # 2c090 <__sprintf_chk@plt+0x283b0>
    d220:	cmp    r12,rbx
    d223:	je     d234 <__sprintf_chk@plt+0x9554>
    d225:	mov    rdi,r12
    d228:	call   3680 <free@plt>
    d22d:	mov    QWORD PTR [rip+0x1ee4c],rbx        # 2c080 <__sprintf_chk@plt+0x283a0>
    d234:	mov    DWORD PTR [rip+0x1ee3a],0x1        # 2c078 <__sprintf_chk@plt+0x28398>
    d23e:	pop    rbx
    d23f:	pop    rbp
    d240:	pop    r12
    d242:	ret    
    d243:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d24e:	xchg   ax,ax
    d250:	endbr64 
    d254:	lea    rcx,[rip+0x1f065]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    d25b:	mov    rdx,0xffffffffffffffff
    d262:	jmp    cd70 <__sprintf_chk@plt+0x9090>
    d267:	nop    WORD PTR [rax+rax*1+0x0]
    d270:	endbr64 
    d274:	lea    rcx,[rip+0x1f045]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    d27b:	jmp    cd70 <__sprintf_chk@plt+0x9090>
    d280:	endbr64 
    d284:	mov    rsi,rdi
    d287:	lea    rcx,[rip+0x1f032]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    d28e:	mov    rdx,0xffffffffffffffff
    d295:	xor    edi,edi
    d297:	jmp    cd70 <__sprintf_chk@plt+0x9090>
    d29c:	nop    DWORD PTR [rax+0x0]
    d2a0:	endbr64 
    d2a4:	mov    rdx,rsi
    d2a7:	lea    rcx,[rip+0x1f012]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    d2ae:	mov    rsi,rdi
    d2b1:	xor    edi,edi
    d2b3:	jmp    cd70 <__sprintf_chk@plt+0x9090>
    d2b8:	nop    DWORD PTR [rax+rax*1+0x0]
    d2c0:	endbr64 
    d2c4:	sub    rsp,0x48
    d2c8:	mov    rax,QWORD PTR fs:0x28
    d2d1:	mov    QWORD PTR [rsp+0x38],rax
    d2d6:	xor    eax,eax
    d2d8:	cmp    esi,0xa
    d2db:	je     3d22 <__sprintf_chk@plt+0x42>
    d2e1:	mov    r8,rdx
    d2e4:	mov    DWORD PTR [rsp],esi
    d2e7:	mov    rcx,rsp
    d2ea:	mov    rdx,0xffffffffffffffff
    d2f1:	mov    rsi,r8
    d2f4:	mov    DWORD PTR [rsp+0x4],0x0
    d2fc:	mov    QWORD PTR [rsp+0x8],0x0
    d305:	mov    QWORD PTR [rsp+0x10],0x0
    d30e:	mov    QWORD PTR [rsp+0x18],0x0
    d317:	mov    QWORD PTR [rsp+0x20],0x0
    d320:	mov    QWORD PTR [rsp+0x28],0x0
    d329:	mov    QWORD PTR [rsp+0x30],0x0
    d332:	call   cd70 <__sprintf_chk@plt+0x9090>
    d337:	mov    rcx,QWORD PTR [rsp+0x38]
    d33c:	sub    rcx,QWORD PTR fs:0x28
    d345:	jne    d34c <__sprintf_chk@plt+0x966c>
    d347:	add    rsp,0x48
    d34b:	ret    
    d34c:	call   3840 <__stack_chk_fail@plt>
    d351:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    d35c:	nop    DWORD PTR [rax+0x0]
    d360:	endbr64 
    d364:	sub    rsp,0x48
    d368:	mov    rax,QWORD PTR fs:0x28
    d371:	mov    QWORD PTR [rsp+0x38],rax
    d376:	xor    eax,eax
    d378:	cmp    esi,0xa
    d37b:	je     3d27 <__sprintf_chk@plt+0x47>
    d381:	mov    r8,rdx
    d384:	mov    DWORD PTR [rsp],esi
    d387:	mov    rdx,rcx
    d38a:	mov    rcx,rsp
    d38d:	mov    rsi,r8
    d390:	mov    DWORD PTR [rsp+0x4],0x0
    d398:	mov    QWORD PTR [rsp+0x8],0x0
    d3a1:	mov    QWORD PTR [rsp+0x10],0x0
    d3aa:	mov    QWORD PTR [rsp+0x18],0x0
    d3b3:	mov    QWORD PTR [rsp+0x20],0x0
    d3bc:	mov    QWORD PTR [rsp+0x28],0x0
    d3c5:	mov    QWORD PTR [rsp+0x30],0x0
    d3ce:	call   cd70 <__sprintf_chk@plt+0x9090>
    d3d3:	mov    rdx,QWORD PTR [rsp+0x38]
    d3d8:	sub    rdx,QWORD PTR fs:0x28
    d3e1:	jne    d3e8 <__sprintf_chk@plt+0x9708>
    d3e3:	add    rsp,0x48
    d3e7:	ret    
    d3e8:	call   3840 <__stack_chk_fail@plt>
    d3ed:	nop    DWORD PTR [rax]
    d3f0:	endbr64 
    d3f4:	sub    rsp,0x48
    d3f8:	mov    rax,QWORD PTR fs:0x28
    d401:	mov    QWORD PTR [rsp+0x38],rax
    d406:	xor    eax,eax
    d408:	cmp    edi,0xa
    d40b:	je     3d2c <__sprintf_chk@plt+0x4c>
    d411:	mov    DWORD PTR [rsp],edi
    d414:	mov    rcx,rsp
    d417:	xor    edi,edi
    d419:	mov    rdx,0xffffffffffffffff
    d420:	mov    DWORD PTR [rsp+0x4],0x0
    d428:	mov    QWORD PTR [rsp+0x8],0x0
    d431:	mov    QWORD PTR [rsp+0x10],0x0
    d43a:	mov    QWORD PTR [rsp+0x18],0x0
    d443:	mov    QWORD PTR [rsp+0x20],0x0
    d44c:	mov    QWORD PTR [rsp+0x28],0x0
    d455:	mov    QWORD PTR [rsp+0x30],0x0
    d45e:	call   cd70 <__sprintf_chk@plt+0x9090>
    d463:	mov    rdx,QWORD PTR [rsp+0x38]
    d468:	sub    rdx,QWORD PTR fs:0x28
    d471:	jne    d478 <__sprintf_chk@plt+0x9798>
    d473:	add    rsp,0x48
    d477:	ret    
    d478:	call   3840 <__stack_chk_fail@plt>
    d47d:	nop    DWORD PTR [rax]
    d480:	endbr64 
    d484:	sub    rsp,0x48
    d488:	mov    rax,QWORD PTR fs:0x28
    d491:	mov    QWORD PTR [rsp+0x38],rax
    d496:	xor    eax,eax
    d498:	cmp    edi,0xa
    d49b:	je     3d31 <__sprintf_chk@plt+0x51>
    d4a1:	mov    DWORD PTR [rsp],edi
    d4a4:	mov    rcx,rsp
    d4a7:	xor    edi,edi
    d4a9:	mov    DWORD PTR [rsp+0x4],0x0
    d4b1:	mov    QWORD PTR [rsp+0x8],0x0
    d4ba:	mov    QWORD PTR [rsp+0x10],0x0
    d4c3:	mov    QWORD PTR [rsp+0x18],0x0
    d4cc:	mov    QWORD PTR [rsp+0x20],0x0
    d4d5:	mov    QWORD PTR [rsp+0x28],0x0
    d4de:	mov    QWORD PTR [rsp+0x30],0x0
    d4e7:	call   cd70 <__sprintf_chk@plt+0x9090>
    d4ec:	mov    rcx,QWORD PTR [rsp+0x38]
    d4f1:	sub    rcx,QWORD PTR fs:0x28
    d4fa:	jne    d501 <__sprintf_chk@plt+0x9821>
    d4fc:	add    rsp,0x48
    d500:	ret    
    d501:	call   3840 <__stack_chk_fail@plt>
    d506:	cs nop WORD PTR [rax+rax*1+0x0]
    d510:	endbr64 
    d514:	sub    rsp,0x48
    d518:	movdqa xmm0,XMMWORD PTR [rip+0x1eda0]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    d520:	movdqa xmm1,XMMWORD PTR [rip+0x1eda8]        # 2c2d0 <stderr@@GLIBC_2.2.5+0x1f0>
    d528:	mov    ecx,edx
    d52a:	mov    rax,QWORD PTR fs:0x28
    d533:	mov    QWORD PTR [rsp+0x38],rax
    d538:	xor    eax,eax
    d53a:	mov    rax,QWORD PTR [rip+0x1edaf]        # 2c2f0 <stderr@@GLIBC_2.2.5+0x210>
    d541:	mov    r9,rsi
    d544:	and    ecx,0x1f
    d547:	movdqa xmm2,XMMWORD PTR [rip+0x1ed91]        # 2c2e0 <stderr@@GLIBC_2.2.5+0x200>
    d54f:	movups XMMWORD PTR [rsp],xmm0
    d553:	mov    r10,rsp
    d556:	mov    QWORD PTR [rsp+0x30],rax
    d55b:	mov    eax,edx
    d55d:	shr    al,0x5
    d560:	movups XMMWORD PTR [rsp+0x10],xmm1
    d565:	movzx  eax,al
    d568:	movups XMMWORD PTR [rsp+0x20],xmm2
    d56d:	lea    rdx,[rsp+rax*4+0x8]
    d572:	mov    esi,DWORD PTR [rdx]
    d574:	mov    eax,esi
    d576:	shr    eax,cl
    d578:	not    eax
    d57a:	and    eax,0x1
    d57d:	shl    eax,cl
    d57f:	mov    rcx,r10
    d582:	xor    eax,esi
    d584:	mov    rsi,rdi
    d587:	xor    edi,edi
    d589:	mov    DWORD PTR [rdx],eax
    d58b:	mov    rdx,r9
    d58e:	call   cd70 <__sprintf_chk@plt+0x9090>
    d593:	mov    rdi,QWORD PTR [rsp+0x38]
    d598:	sub    rdi,QWORD PTR fs:0x28
    d5a1:	jne    d5a8 <__sprintf_chk@plt+0x98c8>
    d5a3:	add    rsp,0x48
    d5a7:	ret    
    d5a8:	call   3840 <__stack_chk_fail@plt>
    d5ad:	nop    DWORD PTR [rax]
    d5b0:	endbr64 
    d5b4:	sub    rsp,0x48
    d5b8:	movdqa xmm0,XMMWORD PTR [rip+0x1ed00]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    d5c0:	movdqa xmm1,XMMWORD PTR [rip+0x1ed08]        # 2c2d0 <stderr@@GLIBC_2.2.5+0x1f0>
    d5c8:	mov    ecx,esi
    d5ca:	mov    rax,QWORD PTR fs:0x28
    d5d3:	mov    QWORD PTR [rsp+0x38],rax
    d5d8:	xor    eax,eax
    d5da:	mov    rax,QWORD PTR [rip+0x1ed0f]        # 2c2f0 <stderr@@GLIBC_2.2.5+0x210>
    d5e1:	and    ecx,0x1f
    d5e4:	mov    r9,rsp
    d5e7:	movdqa xmm2,XMMWORD PTR [rip+0x1ecf1]        # 2c2e0 <stderr@@GLIBC_2.2.5+0x200>
    d5ef:	movups XMMWORD PTR [rsp],xmm0
    d5f3:	mov    QWORD PTR [rsp+0x30],rax
    d5f8:	mov    eax,esi
    d5fa:	shr    al,0x5
    d5fd:	movups XMMWORD PTR [rsp+0x10],xmm1
    d602:	movzx  eax,al
    d605:	movups XMMWORD PTR [rsp+0x20],xmm2
    d60a:	lea    rdx,[rsp+rax*4+0x8]
    d60f:	mov    esi,DWORD PTR [rdx]
    d611:	mov    eax,esi
    d613:	shr    eax,cl
    d615:	not    eax
    d617:	and    eax,0x1
    d61a:	shl    eax,cl
    d61c:	mov    rcx,r9
    d61f:	xor    eax,esi
    d621:	mov    rsi,rdi
    d624:	xor    edi,edi
    d626:	mov    DWORD PTR [rdx],eax
    d628:	mov    rdx,0xffffffffffffffff
    d62f:	call   cd70 <__sprintf_chk@plt+0x9090>
    d634:	mov    rdx,QWORD PTR [rsp+0x38]
    d639:	sub    rdx,QWORD PTR fs:0x28
    d642:	jne    d649 <__sprintf_chk@plt+0x9969>
    d644:	add    rsp,0x48
    d648:	ret    
    d649:	call   3840 <__stack_chk_fail@plt>
    d64e:	xchg   ax,ax
    d650:	endbr64 
    d654:	sub    rsp,0x48
    d658:	movdqa xmm0,XMMWORD PTR [rip+0x1ec60]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    d660:	movdqa xmm1,XMMWORD PTR [rip+0x1ec68]        # 2c2d0 <stderr@@GLIBC_2.2.5+0x1f0>
    d668:	mov    rsi,rdi
    d66b:	mov    rax,QWORD PTR fs:0x28
    d674:	mov    QWORD PTR [rsp+0x38],rax
    d679:	xor    eax,eax
    d67b:	mov    rax,QWORD PTR [rip+0x1ec6e]        # 2c2f0 <stderr@@GLIBC_2.2.5+0x210>
    d682:	mov    rcx,rsp
    d685:	xor    edi,edi
    d687:	movups XMMWORD PTR [rsp],xmm0
    d68b:	mov    edx,DWORD PTR [rsp+0xc]
    d68f:	movdqa xmm2,XMMWORD PTR [rip+0x1ec49]        # 2c2e0 <stderr@@GLIBC_2.2.5+0x200>
    d697:	mov    QWORD PTR [rsp+0x30],rax
    d69c:	mov    eax,edx
    d69e:	movups XMMWORD PTR [rsp+0x10],xmm1
    d6a3:	not    eax
    d6a5:	movups XMMWORD PTR [rsp+0x20],xmm2
    d6aa:	and    eax,0x4000000
    d6af:	xor    eax,edx
    d6b1:	mov    rdx,0xffffffffffffffff
    d6b8:	mov    DWORD PTR [rsp+0xc],eax
    d6bc:	call   cd70 <__sprintf_chk@plt+0x9090>
    d6c1:	mov    rcx,QWORD PTR [rsp+0x38]
    d6c6:	sub    rcx,QWORD PTR fs:0x28
    d6cf:	jne    d6d6 <__sprintf_chk@plt+0x99f6>
    d6d1:	add    rsp,0x48
    d6d5:	ret    
    d6d6:	call   3840 <__stack_chk_fail@plt>
    d6db:	nop    DWORD PTR [rax+rax*1+0x0]
    d6e0:	endbr64 
    d6e4:	sub    rsp,0x48
    d6e8:	movdqa xmm0,XMMWORD PTR [rip+0x1ebd0]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    d6f0:	movdqa xmm1,XMMWORD PTR [rip+0x1ebd8]        # 2c2d0 <stderr@@GLIBC_2.2.5+0x1f0>
    d6f8:	mov    rdx,rsi
    d6fb:	mov    rax,QWORD PTR fs:0x28
    d704:	mov    QWORD PTR [rsp+0x38],rax
    d709:	xor    eax,eax
    d70b:	mov    rax,QWORD PTR [rip+0x1ebde]        # 2c2f0 <stderr@@GLIBC_2.2.5+0x210>
    d712:	movdqa xmm2,XMMWORD PTR [rip+0x1ebc6]        # 2c2e0 <stderr@@GLIBC_2.2.5+0x200>
    d71a:	mov    rsi,rdi
    d71d:	movups XMMWORD PTR [rsp],xmm0
    d721:	mov    ecx,DWORD PTR [rsp+0xc]
    d725:	xor    edi,edi
    d727:	mov    QWORD PTR [rsp+0x30],rax
    d72c:	mov    eax,ecx
    d72e:	movups XMMWORD PTR [rsp+0x10],xmm1
    d733:	not    eax
    d735:	movups XMMWORD PTR [rsp+0x20],xmm2
    d73a:	and    eax,0x4000000
    d73f:	xor    eax,ecx
    d741:	mov    rcx,rsp
    d744:	mov    DWORD PTR [rsp+0xc],eax
    d748:	call   cd70 <__sprintf_chk@plt+0x9090>
    d74d:	mov    rdx,QWORD PTR [rsp+0x38]
    d752:	sub    rdx,QWORD PTR fs:0x28
    d75b:	jne    d762 <__sprintf_chk@plt+0x9a82>
    d75d:	add    rsp,0x48
    d761:	ret    
    d762:	call   3840 <__stack_chk_fail@plt>
    d767:	nop    WORD PTR [rax+rax*1+0x0]
    d770:	endbr64 
    d774:	sub    rsp,0x48
    d778:	mov    rax,QWORD PTR fs:0x28
    d781:	mov    QWORD PTR [rsp+0x38],rax
    d786:	xor    eax,eax
    d788:	cmp    esi,0xa
    d78b:	je     3d36 <__sprintf_chk@plt+0x56>
    d791:	mov    r8,rdx
    d794:	mov    DWORD PTR [rsp],esi
    d797:	mov    rcx,rsp
    d79a:	mov    rdx,0xffffffffffffffff
    d7a1:	movabs rax,0x400000000000000
    d7ab:	mov    rsi,r8
    d7ae:	mov    DWORD PTR [rsp+0x4],0x0
    d7b6:	mov    QWORD PTR [rsp+0x8],rax
    d7bb:	mov    QWORD PTR [rsp+0x10],0x0
    d7c4:	mov    QWORD PTR [rsp+0x18],0x0
    d7cd:	mov    QWORD PTR [rsp+0x20],0x0
    d7d6:	mov    QWORD PTR [rsp+0x28],0x0
    d7df:	mov    QWORD PTR [rsp+0x30],0x0
    d7e8:	call   cd70 <__sprintf_chk@plt+0x9090>
    d7ed:	mov    rcx,QWORD PTR [rsp+0x38]
    d7f2:	sub    rcx,QWORD PTR fs:0x28
    d7fb:	jne    d802 <__sprintf_chk@plt+0x9b22>
    d7fd:	add    rsp,0x48
    d801:	ret    
    d802:	call   3840 <__stack_chk_fail@plt>
    d807:	nop    WORD PTR [rax+rax*1+0x0]
    d810:	endbr64 
    d814:	sub    rsp,0x48
    d818:	movdqa xmm0,XMMWORD PTR [rip+0x1eaa0]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    d820:	movdqa xmm1,XMMWORD PTR [rip+0x1eaa8]        # 2c2d0 <stderr@@GLIBC_2.2.5+0x1f0>
    d828:	mov    rax,QWORD PTR fs:0x28
    d831:	mov    QWORD PTR [rsp+0x38],rax
    d836:	xor    eax,eax
    d838:	movdqa xmm2,XMMWORD PTR [rip+0x1eaa0]        # 2c2e0 <stderr@@GLIBC_2.2.5+0x200>
    d840:	mov    rax,QWORD PTR [rip+0x1eaa9]        # 2c2f0 <stderr@@GLIBC_2.2.5+0x210>
    d847:	movups XMMWORD PTR [rsp],xmm0
    d84b:	mov    QWORD PTR [rsp+0x30],rax
    d850:	mov    DWORD PTR [rsp],0xa
    d857:	movups XMMWORD PTR [rsp+0x10],xmm1
    d85c:	movups XMMWORD PTR [rsp+0x20],xmm2
    d861:	test   rsi,rsi
    d864:	je     3d3b <__sprintf_chk@plt+0x5b>
    d86a:	test   rdx,rdx
    d86d:	je     3d3b <__sprintf_chk@plt+0x5b>
    d873:	mov    r8,rcx
    d876:	mov    QWORD PTR [rsp+0x28],rsi
    d87b:	mov    rcx,rsp
    d87e:	mov    QWORD PTR [rsp+0x30],rdx
    d883:	mov    rsi,r8
    d886:	mov    rdx,0xffffffffffffffff
    d88d:	call   cd70 <__sprintf_chk@plt+0x9090>
    d892:	mov    rcx,QWORD PTR [rsp+0x38]
    d897:	sub    rcx,QWORD PTR fs:0x28
    d8a0:	jne    d8a7 <__sprintf_chk@plt+0x9bc7>
    d8a2:	add    rsp,0x48
    d8a6:	ret    
    d8a7:	call   3840 <__stack_chk_fail@plt>
    d8ac:	nop    DWORD PTR [rax+0x0]
    d8b0:	endbr64 
    d8b4:	sub    rsp,0x48
    d8b8:	movdqa xmm0,XMMWORD PTR [rip+0x1ea00]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    d8c0:	movdqa xmm1,XMMWORD PTR [rip+0x1ea08]        # 2c2d0 <stderr@@GLIBC_2.2.5+0x1f0>
    d8c8:	mov    rax,QWORD PTR fs:0x28
    d8d1:	mov    QWORD PTR [rsp+0x38],rax
    d8d6:	xor    eax,eax
    d8d8:	movdqa xmm2,XMMWORD PTR [rip+0x1ea00]        # 2c2e0 <stderr@@GLIBC_2.2.5+0x200>
    d8e0:	mov    rax,QWORD PTR [rip+0x1ea09]        # 2c2f0 <stderr@@GLIBC_2.2.5+0x210>
    d8e7:	movups XMMWORD PTR [rsp],xmm0
    d8eb:	mov    QWORD PTR [rsp+0x30],rax
    d8f0:	mov    DWORD PTR [rsp],0xa
    d8f7:	movups XMMWORD PTR [rsp+0x10],xmm1
    d8fc:	movups XMMWORD PTR [rsp+0x20],xmm2
    d901:	test   rsi,rsi
    d904:	je     3d40 <__sprintf_chk@plt+0x60>
    d90a:	test   rdx,rdx
    d90d:	je     3d40 <__sprintf_chk@plt+0x60>
    d913:	mov    r9,rcx
    d916:	mov    QWORD PTR [rsp+0x28],rsi
    d91b:	mov    rcx,rsp
    d91e:	mov    QWORD PTR [rsp+0x30],rdx
    d923:	mov    rsi,r9
    d926:	mov    rdx,r8
    d929:	call   cd70 <__sprintf_chk@plt+0x9090>
    d92e:	mov    rcx,QWORD PTR [rsp+0x38]
    d933:	sub    rcx,QWORD PTR fs:0x28
    d93c:	jne    d943 <__sprintf_chk@plt+0x9c63>
    d93e:	add    rsp,0x48
    d942:	ret    
    d943:	call   3840 <__stack_chk_fail@plt>
    d948:	nop    DWORD PTR [rax+rax*1+0x0]
    d950:	endbr64 
    d954:	sub    rsp,0x48
    d958:	movdqa xmm0,XMMWORD PTR [rip+0x1e960]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    d960:	movdqa xmm1,XMMWORD PTR [rip+0x1e968]        # 2c2d0 <stderr@@GLIBC_2.2.5+0x1f0>
    d968:	mov    rax,QWORD PTR fs:0x28
    d971:	mov    QWORD PTR [rsp+0x38],rax
    d976:	xor    eax,eax
    d978:	movdqa xmm2,XMMWORD PTR [rip+0x1e960]        # 2c2e0 <stderr@@GLIBC_2.2.5+0x200>
    d980:	mov    rax,QWORD PTR [rip+0x1e969]        # 2c2f0 <stderr@@GLIBC_2.2.5+0x210>
    d987:	movups XMMWORD PTR [rsp],xmm0
    d98b:	mov    QWORD PTR [rsp+0x30],rax
    d990:	mov    DWORD PTR [rsp],0xa
    d997:	movups XMMWORD PTR [rsp+0x10],xmm1
    d99c:	movups XMMWORD PTR [rsp+0x20],xmm2
    d9a1:	test   rdi,rdi
    d9a4:	je     3d45 <__sprintf_chk@plt+0x65>
    d9aa:	test   rsi,rsi
    d9ad:	je     3d45 <__sprintf_chk@plt+0x65>
    d9b3:	mov    r8,rdx
    d9b6:	mov    QWORD PTR [rsp+0x28],rdi
    d9bb:	mov    rcx,rsp
    d9be:	xor    edi,edi
    d9c0:	mov    QWORD PTR [rsp+0x30],rsi
    d9c5:	mov    rdx,0xffffffffffffffff
    d9cc:	mov    rsi,r8
    d9cf:	call   cd70 <__sprintf_chk@plt+0x9090>
    d9d4:	mov    rcx,QWORD PTR [rsp+0x38]
    d9d9:	sub    rcx,QWORD PTR fs:0x28
    d9e2:	jne    d9e9 <__sprintf_chk@plt+0x9d09>
    d9e4:	add    rsp,0x48
    d9e8:	ret    
    d9e9:	call   3840 <__stack_chk_fail@plt>
    d9ee:	xchg   ax,ax
    d9f0:	endbr64 
    d9f4:	sub    rsp,0x48
    d9f8:	movdqa xmm0,XMMWORD PTR [rip+0x1e8c0]        # 2c2c0 <stderr@@GLIBC_2.2.5+0x1e0>
    da00:	movdqa xmm1,XMMWORD PTR [rip+0x1e8c8]        # 2c2d0 <stderr@@GLIBC_2.2.5+0x1f0>
    da08:	mov    rax,QWORD PTR fs:0x28
    da11:	mov    QWORD PTR [rsp+0x38],rax
    da16:	xor    eax,eax
    da18:	movdqa xmm2,XMMWORD PTR [rip+0x1e8c0]        # 2c2e0 <stderr@@GLIBC_2.2.5+0x200>
    da20:	mov    rax,QWORD PTR [rip+0x1e8c9]        # 2c2f0 <stderr@@GLIBC_2.2.5+0x210>
    da27:	movups XMMWORD PTR [rsp],xmm0
    da2b:	mov    QWORD PTR [rsp+0x30],rax
    da30:	mov    DWORD PTR [rsp],0xa
    da37:	movups XMMWORD PTR [rsp+0x10],xmm1
    da3c:	movups XMMWORD PTR [rsp+0x20],xmm2
    da41:	test   rdi,rdi
    da44:	je     3d4a <__sprintf_chk@plt+0x6a>
    da4a:	test   rsi,rsi
    da4d:	je     3d4a <__sprintf_chk@plt+0x6a>
    da53:	mov    r8,rdx
    da56:	mov    QWORD PTR [rsp+0x28],rdi
    da5b:	mov    rdx,rcx
    da5e:	xor    edi,edi
    da60:	mov    QWORD PTR [rsp+0x30],rsi
    da65:	mov    rcx,rsp
    da68:	mov    rsi,r8
    da6b:	call   cd70 <__sprintf_chk@plt+0x9090>
    da70:	mov    rdx,QWORD PTR [rsp+0x38]
    da75:	sub    rdx,QWORD PTR fs:0x28
    da7e:	jne    da85 <__sprintf_chk@plt+0x9da5>
    da80:	add    rsp,0x48
    da84:	ret    
    da85:	call   3840 <__stack_chk_fail@plt>
    da8a:	nop    WORD PTR [rax+rax*1+0x0]
    da90:	endbr64 
    da94:	lea    rcx,[rip+0x1e5a5]        # 2c040 <__sprintf_chk@plt+0x28360>
    da9b:	jmp    cd70 <__sprintf_chk@plt+0x9090>
    daa0:	endbr64 
    daa4:	mov    rdx,rsi
    daa7:	lea    rcx,[rip+0x1e592]        # 2c040 <__sprintf_chk@plt+0x28360>
    daae:	mov    rsi,rdi
    dab1:	xor    edi,edi
    dab3:	jmp    cd70 <__sprintf_chk@plt+0x9090>
    dab8:	nop    DWORD PTR [rax+rax*1+0x0]
    dac0:	endbr64 
    dac4:	lea    rcx,[rip+0x1e575]        # 2c040 <__sprintf_chk@plt+0x28360>
    dacb:	mov    rdx,0xffffffffffffffff
    dad2:	jmp    cd70 <__sprintf_chk@plt+0x9090>
    dad7:	nop    WORD PTR [rax+rax*1+0x0]
    dae0:	endbr64 
    dae4:	mov    rsi,rdi
    dae7:	lea    rcx,[rip+0x1e552]        # 2c040 <__sprintf_chk@plt+0x28360>
    daee:	mov    rdx,0xffffffffffffffff
    daf5:	xor    edi,edi
    daf7:	jmp    cd70 <__sprintf_chk@plt+0x9090>
    dafc:	nop    DWORD PTR [rax+0x0]
    db00:	endbr64 
    db04:	push   rbp
    db05:	mov    rdx,rsi
    db08:	mov    rbp,rdi
    db0b:	push   rbx
    db0c:	mov    rbx,rsi
    db0f:	xor    esi,esi
    db11:	sub    rsp,0x8
    db15:	call   3950 <memchr@plt>
    db1a:	mov    rdx,rax
    db1d:	sub    rax,rbp
    db20:	add    rax,0x1
    db24:	test   rdx,rdx
    db27:	cmove  rax,rbx
    db2b:	add    rsp,0x8
    db2f:	pop    rbx
    db30:	pop    rbp
    db31:	ret    
    db32:	cs nop WORD PTR [rax+rax*1+0x0]
    db3c:	nop    DWORD PTR [rax+0x0]
    db40:	endbr64 
    db44:	push   r15
    db46:	push   r14
    db48:	push   r13
    db4a:	push   r12
    db4c:	mov    r12,r9
    db4f:	push   rbp
    db50:	mov    rbp,rdi
    db53:	push   rbx
    db54:	mov    rbx,r8
    db57:	sub    rsp,0x38
    db5b:	test   rsi,rsi
    db5e:	je     dcb0 <__sprintf_chk@plt+0x9fd0>
    db64:	mov    r9,rcx
    db67:	mov    r8,rdx
    db6a:	mov    rcx,rsi
    db6d:	xor    eax,eax
    db6f:	lea    rdx,[rip+0x16a92]        # 24608 <__sprintf_chk@plt+0x20928>
    db76:	mov    esi,0x1
    db7b:	call   3c50 <__fprintf_chk@plt>
    db80:	xor    edi,edi
    db82:	mov    edx,0x5
    db87:	lea    rsi,[rip+0x16a8d]        # 2461b <__sprintf_chk@plt+0x2093b>
    db8e:	call   37f0 <dcgettext@plt>
    db93:	mov    r8d,0x7e4
    db99:	mov    esi,0x1
    db9e:	mov    rdi,rbp
    dba1:	mov    rcx,rax
    dba4:	lea    rdx,[rip+0x16d95]        # 24940 <__sprintf_chk@plt+0x20c60>
    dbab:	xor    eax,eax
    dbad:	call   3c50 <__fprintf_chk@plt>
    dbb2:	mov    rsi,rbp
    dbb5:	mov    edi,0xa
    dbba:	call   39d0 <fputc_unlocked@plt>
    dbbf:	xor    edi,edi
    dbc1:	mov    edx,0x5
    dbc6:	lea    rsi,[rip+0x16af3]        # 246c0 <__sprintf_chk@plt+0x209e0>
    dbcd:	call   37f0 <dcgettext@plt>
    dbd2:	mov    esi,0x1
    dbd7:	mov    rdi,rbp
    dbda:	lea    rcx,[rip+0x16b8f]        # 24770 <__sprintf_chk@plt+0x20a90>
    dbe1:	mov    rdx,rax
    dbe4:	xor    eax,eax
    dbe6:	call   3c50 <__fprintf_chk@plt>
    dbeb:	mov    rsi,rbp
    dbee:	mov    edi,0xa
    dbf3:	call   39d0 <fputc_unlocked@plt>
    dbf8:	cmp    r12,0x9
    dbfc:	ja     df54 <__sprintf_chk@plt+0xa274>
    dc02:	lea    rdx,[rip+0x16cff]        # 24908 <__sprintf_chk@plt+0x20c28>
    dc09:	movsxd rax,DWORD PTR [rdx+r12*4]
    dc0d:	add    rax,rdx
    dc10:	notrack jmp rax
    dc13:	nop    DWORD PTR [rax+rax*1+0x0]
    dc18:	mov    r10,QWORD PTR [rbx+0x38]
    dc1c:	mov    r9,QWORD PTR [rbx+0x30]
    dc20:	mov    edx,0x5
    dc25:	xor    edi,edi
    dc27:	mov    r8,QWORD PTR [rbx+0x28]
    dc2b:	mov    rcx,QWORD PTR [rbx+0x20]
    dc2f:	lea    rsi,[rip+0x16c02]        # 24838 <__sprintf_chk@plt+0x20b58>
    dc36:	mov    r15,QWORD PTR [rbx+0x18]
    dc3a:	mov    r14,QWORD PTR [rbx+0x10]
    dc3e:	mov    QWORD PTR [rsp+0x20],r10
    dc43:	mov    r13,QWORD PTR [rbx+0x8]
    dc47:	mov    r12,QWORD PTR [rbx]
    dc4a:	mov    QWORD PTR [rsp+0x18],r9
    dc4f:	mov    QWORD PTR [rsp+0x10],r8
    dc54:	mov    QWORD PTR [rsp+0x8],rcx
    dc59:	call   37f0 <dcgettext@plt>
    dc5e:	sub    rsp,0x8
    dc62:	mov    rdx,rax
    dc65:	mov    r10,QWORD PTR [rsp+0x28]
    dc6a:	mov    esi,0x1
    dc6f:	mov    rdi,rbp
    dc72:	xor    eax,eax
    dc74:	push   r10
    dc76:	mov    r9,QWORD PTR [rsp+0x28]
    dc7b:	push   r9
    dc7d:	mov    r8,QWORD PTR [rsp+0x28]
    dc82:	mov    r9,r14
    dc85:	push   r8
    dc87:	mov    rcx,QWORD PTR [rsp+0x28]
    dc8c:	mov    r8,r13
    dc8f:	push   rcx
    dc90:	mov    rcx,r12
    dc93:	push   r15
    dc95:	call   3c50 <__fprintf_chk@plt>
    dc9a:	add    rsp,0x30
    dc9e:	add    rsp,0x38
    dca2:	pop    rbx
    dca3:	pop    rbp
    dca4:	pop    r12
    dca6:	pop    r13
    dca8:	pop    r14
    dcaa:	pop    r15
    dcac:	ret    
    dcad:	nop    DWORD PTR [rax]
    dcb0:	mov    r8,rcx
    dcb3:	mov    esi,0x1
    dcb8:	mov    rcx,rdx
    dcbb:	xor    eax,eax
    dcbd:	lea    rdx,[rip+0x16950]        # 24614 <__sprintf_chk@plt+0x20934>
    dcc4:	call   3c50 <__fprintf_chk@plt>
    dcc9:	jmp    db80 <__sprintf_chk@plt+0x9ea0>
    dcce:	xchg   ax,ax
    dcd0:	mov    r11,QWORD PTR [rbx+0x40]
    dcd4:	mov    r10,QWORD PTR [rbx+0x38]
    dcd8:	mov    edx,0x5
    dcdd:	lea    rsi,[rip+0x16b84]        # 24868 <__sprintf_chk@plt+0x20b88>
    dce4:	mov    r9,QWORD PTR [rbx+0x30]
    dce8:	mov    r8,QWORD PTR [rbx+0x28]
    dcec:	mov    rcx,QWORD PTR [rbx+0x20]
    dcf0:	mov    r15,QWORD PTR [rbx+0x18]
    dcf4:	mov    QWORD PTR [rsp+0x28],r11
    dcf9:	mov    r14,QWORD PTR [rbx+0x10]
    dcfd:	mov    r13,QWORD PTR [rbx+0x8]
    dd01:	mov    QWORD PTR [rsp+0x20],r10
    dd06:	mov    QWORD PTR [rsp+0x18],r9
    dd0b:	mov    r12,QWORD PTR [rbx]
    dd0e:	mov    QWORD PTR [rsp+0x10],r8
    dd13:	mov    QWORD PTR [rsp+0x8],rcx
    dd18:	xor    edi,edi
    dd1a:	call   37f0 <dcgettext@plt>
    dd1f:	mov    r11,QWORD PTR [rsp+0x28]
    dd24:	mov    rdx,rax
    dd27:	push   r11
    dd29:	jmp    dc65 <__sprintf_chk@plt+0x9f85>
    dd2e:	xchg   ax,ax
    dd30:	mov    r12,QWORD PTR [rbx]
    dd33:	mov    edx,0x5
    dd38:	lea    rsi,[rip+0x168e0]        # 2461f <__sprintf_chk@plt+0x2093f>
    dd3f:	xor    edi,edi
    dd41:	call   37f0 <dcgettext@plt>
    dd46:	add    rsp,0x38
    dd4a:	mov    rdi,rbp
    dd4d:	mov    esi,0x1
    dd52:	pop    rbx
    dd53:	mov    rdx,rax
    dd56:	pop    rbp
    dd57:	mov    rcx,r12
    dd5a:	xor    eax,eax
    dd5c:	pop    r12
    dd5e:	pop    r13
    dd60:	pop    r14
    dd62:	pop    r15
    dd64:	jmp    3c50 <__fprintf_chk@plt>
    dd69:	nop    DWORD PTR [rax+0x0]
    dd70:	mov    r13,QWORD PTR [rbx+0x8]
    dd74:	mov    r12,QWORD PTR [rbx]
    dd77:	mov    edx,0x5
    dd7c:	xor    edi,edi
    dd7e:	lea    rsi,[rip+0x168aa]        # 2462f <__sprintf_chk@plt+0x2094f>
    dd85:	call   37f0 <dcgettext@plt>
    dd8a:	add    rsp,0x38
    dd8e:	mov    r8,r13
    dd91:	mov    rcx,r12
    dd94:	pop    rbx
    dd95:	mov    rdx,rax
    dd98:	mov    rdi,rbp
    dd9b:	mov    esi,0x1
    dda0:	pop    rbp
    dda1:	xor    eax,eax
    dda3:	pop    r12
    dda5:	pop    r13
    dda7:	pop    r14
    dda9:	pop    r15
    ddab:	jmp    3c50 <__fprintf_chk@plt>
    ddb0:	mov    r14,QWORD PTR [rbx+0x10]
    ddb4:	mov    r13,QWORD PTR [rbx+0x8]
    ddb8:	mov    edx,0x5
    ddbd:	xor    edi,edi
    ddbf:	mov    r12,QWORD PTR [rbx]
    ddc2:	lea    rsi,[rip+0x1687d]        # 24646 <__sprintf_chk@plt+0x20966>
    ddc9:	call   37f0 <dcgettext@plt>
    ddce:	add    rsp,0x38
    ddd2:	mov    r9,r14
    ddd5:	mov    r8,r13
    ddd8:	pop    rbx
    ddd9:	mov    rdx,rax
    dddc:	mov    rcx,r12
    dddf:	mov    rdi,rbp
    dde2:	mov    esi,0x1
    dde7:	pop    rbp
    dde8:	xor    eax,eax
    ddea:	pop    r12
    ddec:	pop    r13
    ddee:	pop    r14
    ddf0:	pop    r15
    ddf2:	jmp    3c50 <__fprintf_chk@plt>
    ddf7:	nop    WORD PTR [rax+rax*1+0x0]
    de00:	mov    edx,0x5
    de05:	xor    edi,edi
    de07:	mov    r15,QWORD PTR [rbx+0x18]
    de0b:	mov    r14,QWORD PTR [rbx+0x10]
    de0f:	lea    rsi,[rip+0x16982]        # 24798 <__sprintf_chk@plt+0x20ab8>
    de16:	mov    r13,QWORD PTR [rbx+0x8]
    de1a:	mov    r12,QWORD PTR [rbx]
    de1d:	call   37f0 <dcgettext@plt>
    de22:	sub    rsp,0x8
    de26:	mov    rdx,rax
    de29:	push   r15
    de2b:	mov    r9,r14
    de2e:	mov    r8,r13
    de31:	mov    rcx,r12
    de34:	mov    rdi,rbp
    de37:	mov    esi,0x1
    de3c:	xor    eax,eax
    de3e:	call   3c50 <__fprintf_chk@plt>
    de43:	pop    rax
    de44:	pop    rdx
    de45:	add    rsp,0x38
    de49:	pop    rbx
    de4a:	pop    rbp
    de4b:	pop    r12
    de4d:	pop    r13
    de4f:	pop    r14
    de51:	pop    r15
    de53:	ret    
    de54:	nop    DWORD PTR [rax+0x0]
    de58:	mov    rcx,QWORD PTR [rbx+0x20]
    de5c:	mov    edx,0x5
    de61:	xor    edi,edi
    de63:	mov    r15,QWORD PTR [rbx+0x18]
    de67:	lea    rsi,[rip+0x1694a]        # 247b8 <__sprintf_chk@plt+0x20ad8>
    de6e:	mov    r14,QWORD PTR [rbx+0x10]
    de72:	mov    r13,QWORD PTR [rbx+0x8]
    de76:	mov    QWORD PTR [rsp+0x8],rcx
    de7b:	mov    r12,QWORD PTR [rbx]
    de7e:	call   37f0 <dcgettext@plt>
    de83:	mov    rcx,QWORD PTR [rsp+0x8]
    de88:	mov    rdx,rax
    de8b:	push   rcx
    de8c:	jmp    de29 <__sprintf_chk@plt+0xa149>
    de8e:	xchg   ax,ax
    de90:	mov    r8,QWORD PTR [rbx+0x28]
    de94:	mov    rcx,QWORD PTR [rbx+0x20]
    de98:	mov    edx,0x5
    de9d:	xor    edi,edi
    de9f:	lea    rsi,[rip+0x1693a]        # 247e0 <__sprintf_chk@plt+0x20b00>
    dea6:	mov    r15,QWORD PTR [rbx+0x18]
    deaa:	mov    r14,QWORD PTR [rbx+0x10]
    deae:	mov    r13,QWORD PTR [rbx+0x8]
    deb2:	mov    r12,QWORD PTR [rbx]
    deb5:	mov    QWORD PTR [rsp+0x10],r8
    deba:	mov    QWORD PTR [rsp+0x8],rcx
    debf:	call   37f0 <dcgettext@plt>
    dec4:	sub    rsp,0x8
    dec8:	mov    rdx,rax
    decb:	mov    r8,QWORD PTR [rsp+0x18]
    ded0:	mov    r9,r14
    ded3:	mov    rdi,rbp
    ded6:	mov    esi,0x1
    dedb:	xor    eax,eax
    dedd:	push   r8
    dedf:	mov    rcx,QWORD PTR [rsp+0x18]
    dee4:	mov    r8,r13
    dee7:	push   rcx
    dee8:	mov    rcx,r12
    deeb:	push   r15
    deed:	call   3c50 <__fprintf_chk@plt>
    def2:	add    rsp,0x20
    def6:	add    rsp,0x38
    defa:	pop    rbx
    defb:	pop    rbp
    defc:	pop    r12
    defe:	pop    r13
    df00:	pop    r14
    df02:	pop    r15
    df04:	ret    
    df05:	nop    DWORD PTR [rax]
    df08:	mov    r9,QWORD PTR [rbx+0x30]
    df0c:	mov    r8,QWORD PTR [rbx+0x28]
    df10:	mov    edx,0x5
    df15:	xor    edi,edi
    df17:	mov    rcx,QWORD PTR [rbx+0x20]
    df1b:	lea    rsi,[rip+0x168e6]        # 24808 <__sprintf_chk@plt+0x20b28>
    df22:	mov    r15,QWORD PTR [rbx+0x18]
    df26:	mov    r14,QWORD PTR [rbx+0x10]
    df2a:	mov    r13,QWORD PTR [rbx+0x8]
    df2e:	mov    QWORD PTR [rsp+0x18],r9
    df33:	mov    QWORD PTR [rsp+0x10],r8
    df38:	mov    r12,QWORD PTR [rbx]
    df3b:	mov    QWORD PTR [rsp+0x8],rcx
    df40:	call   37f0 <dcgettext@plt>
    df45:	mov    r9,QWORD PTR [rsp+0x18]
    df4a:	mov    rdx,rax
    df4d:	push   r9
    df4f:	jmp    decb <__sprintf_chk@plt+0xa1eb>
    df54:	mov    r11,QWORD PTR [rbx+0x40]
    df58:	mov    r10,QWORD PTR [rbx+0x38]
    df5c:	mov    edx,0x5
    df61:	lea    rsi,[rip+0x16938]        # 248a0 <__sprintf_chk@plt+0x20bc0>
    df68:	mov    r9,QWORD PTR [rbx+0x30]
    df6c:	mov    r8,QWORD PTR [rbx+0x28]
    df70:	mov    rcx,QWORD PTR [rbx+0x20]
    df74:	mov    r15,QWORD PTR [rbx+0x18]
    df78:	mov    QWORD PTR [rsp+0x28],r11
    df7d:	mov    r14,QWORD PTR [rbx+0x10]
    df81:	mov    r13,QWORD PTR [rbx+0x8]
    df85:	mov    QWORD PTR [rsp+0x20],r10
    df8a:	mov    QWORD PTR [rsp+0x18],r9
    df8f:	mov    r12,QWORD PTR [rbx]
    df92:	mov    QWORD PTR [rsp+0x10],r8
    df97:	mov    QWORD PTR [rsp+0x8],rcx
    df9c:	jmp    dd18 <__sprintf_chk@plt+0xa038>
    dfa1:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    dfac:	nop    DWORD PTR [rax+0x0]
    dfb0:	endbr64 
    dfb4:	xor    r9d,r9d
    dfb7:	cmp    QWORD PTR [r8],0x0
    dfbb:	je     dfcb <__sprintf_chk@plt+0xa2eb>
    dfbd:	nop    DWORD PTR [rax]
    dfc0:	add    r9,0x1
    dfc4:	cmp    QWORD PTR [r8+r9*8],0x0
    dfc9:	jne    dfc0 <__sprintf_chk@plt+0xa2e0>
    dfcb:	jmp    db40 <__sprintf_chk@plt+0x9e60>
    dfd0:	endbr64 
    dfd4:	sub    rsp,0x68
    dfd8:	mov    r11,rcx
    dfdb:	mov    r10,rdx
    dfde:	mov    rcx,r8
    dfe1:	mov    rax,QWORD PTR fs:0x28
    dfea:	mov    QWORD PTR [rsp+0x58],rax
    dfef:	xor    eax,eax
    dff1:	xor    r9d,r9d
    dff4:	mov    r8,rsp
    dff7:	jmp    e021 <__sprintf_chk@plt+0xa341>
    dff9:	nop    DWORD PTR [rax+0x0]
    e000:	mov    edx,eax
    e002:	add    eax,0x8
    e005:	add    rdx,QWORD PTR [rcx+0x10]
    e009:	mov    DWORD PTR [rcx],eax
    e00b:	mov    rax,QWORD PTR [rdx]
    e00e:	mov    QWORD PTR [r8+r9*8],rax
    e012:	test   rax,rax
    e015:	je     e040 <__sprintf_chk@plt+0xa360>
    e017:	add    r9,0x1
    e01b:	cmp    r9,0xa
    e01f:	je     e040 <__sprintf_chk@plt+0xa360>
    e021:	mov    eax,DWORD PTR [rcx]
    e023:	cmp    eax,0x2f
    e026:	jbe    e000 <__sprintf_chk@plt+0xa320>
    e028:	mov    rdx,QWORD PTR [rcx+0x8]
    e02c:	lea    rax,[rdx+0x8]
    e030:	mov    QWORD PTR [rcx+0x8],rax
    e034:	mov    rax,QWORD PTR [rdx]
    e037:	mov    QWORD PTR [r8+r9*8],rax
    e03b:	test   rax,rax
    e03e:	jne    e017 <__sprintf_chk@plt+0xa337>
    e040:	mov    rcx,r11
    e043:	mov    rdx,r10
    e046:	call   db40 <__sprintf_chk@plt+0x9e60>
    e04b:	mov    rax,QWORD PTR [rsp+0x58]
    e050:	sub    rax,QWORD PTR fs:0x28
    e059:	jne    e060 <__sprintf_chk@plt+0xa380>
    e05b:	add    rsp,0x68
    e05f:	ret    
    e060:	call   3840 <__stack_chk_fail@plt>
    e065:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e070:	endbr64 
    e074:	push   r12
    e076:	mov    r10,rsi
    e079:	mov    r11,rdx
    e07c:	mov    r12,rcx
    e07f:	mov    edx,0x20
    e084:	sub    rsp,0xb0
    e08b:	mov    QWORD PTR [rsp+0xa0],r8
    e093:	lea    rsi,[rsp+0x80]
    e09b:	lea    rcx,[rsp+0xc0]
    e0a3:	mov    QWORD PTR [rsp+0xa8],r9
    e0ab:	lea    r8,[rsp+0x20]
    e0b0:	xor    r9d,r9d
    e0b3:	mov    rax,QWORD PTR fs:0x28
    e0bc:	mov    QWORD PTR [rsp+0x78],rax
    e0c1:	xor    eax,eax
    e0c3:	lea    rax,[rsp+0xc0]
    e0cb:	mov    DWORD PTR [rsp+0x8],0x20
    e0d3:	mov    QWORD PTR [rsp+0x10],rax
    e0d8:	mov    QWORD PTR [rsp+0x18],rsi
    e0dd:	jmp    e0fe <__sprintf_chk@plt+0xa41e>
    e0df:	nop
    e0e0:	mov    eax,edx
    e0e2:	add    edx,0x8
    e0e5:	add    rax,rsi
    e0e8:	mov    rax,QWORD PTR [rax]
    e0eb:	mov    QWORD PTR [r8+r9*8],rax
    e0ef:	test   rax,rax
    e0f2:	je     e120 <__sprintf_chk@plt+0xa440>
    e0f4:	add    r9,0x1
    e0f8:	cmp    r9,0xa
    e0fc:	je     e120 <__sprintf_chk@plt+0xa440>
    e0fe:	cmp    edx,0x2f
    e101:	jbe    e0e0 <__sprintf_chk@plt+0xa400>
    e103:	mov    rax,rcx
    e106:	add    rcx,0x8
    e10a:	mov    rax,QWORD PTR [rax]
    e10d:	mov    QWORD PTR [r8+r9*8],rax
    e111:	test   rax,rax
    e114:	jne    e0f4 <__sprintf_chk@plt+0xa414>
    e116:	cs nop WORD PTR [rax+rax*1+0x0]
    e120:	mov    rcx,r12
    e123:	mov    rdx,r11
    e126:	mov    rsi,r10
    e129:	call   db40 <__sprintf_chk@plt+0x9e60>
    e12e:	mov    rax,QWORD PTR [rsp+0x78]
    e133:	sub    rax,QWORD PTR fs:0x28
    e13c:	jne    e148 <__sprintf_chk@plt+0xa468>
    e13e:	add    rsp,0xb0
    e145:	pop    r12
    e147:	ret    
    e148:	call   3840 <__stack_chk_fail@plt>
    e14d:	nop    DWORD PTR [rax]
    e150:	endbr64 
    e154:	sub    rsp,0x8
    e158:	mov    rsi,QWORD PTR [rip+0x1df49]        # 2c0a8 <stdout@@GLIBC_2.2.5>
    e15f:	mov    edi,0xa
    e164:	call   39d0 <fputc_unlocked@plt>
    e169:	mov    edx,0x5
    e16e:	lea    rsi,[rip+0x164ed]        # 24662 <__sprintf_chk@plt+0x20982>
    e175:	xor    edi,edi
    e177:	call   37f0 <dcgettext@plt>
    e17c:	lea    rdx,[rip+0x164f3]        # 24676 <__sprintf_chk@plt+0x20996>
    e183:	mov    edi,0x1
    e188:	mov    rsi,rax
    e18b:	xor    eax,eax
    e18d:	call   3b40 <__printf_chk@plt>
    e192:	mov    edx,0x5
    e197:	lea    rsi,[rip+0x164ee]        # 2468c <__sprintf_chk@plt+0x209ac>
    e19e:	xor    edi,edi
    e1a0:	call   37f0 <dcgettext@plt>
    e1a5:	lea    rcx,[rip+0x15084]        # 23230 <__sprintf_chk@plt+0x1f550>
    e1ac:	mov    edi,0x1
    e1b1:	lea    rdx,[rip+0x13eef]        # 220a7 <__sprintf_chk@plt+0x1e3c7>
    e1b8:	mov    rsi,rax
    e1bb:	xor    eax,eax
    e1bd:	call   3b40 <__printf_chk@plt>
    e1c2:	mov    edx,0x5
    e1c7:	lea    rsi,[rip+0x16712]        # 248e0 <__sprintf_chk@plt+0x20c00>
    e1ce:	xor    edi,edi
    e1d0:	call   37f0 <dcgettext@plt>
    e1d5:	lea    rdx,[rip+0x164c4]        # 246a0 <__sprintf_chk@plt+0x209c0>
    e1dc:	mov    edi,0x1
    e1e1:	add    rsp,0x8
    e1e5:	mov    rsi,rax
    e1e8:	xor    eax,eax
    e1ea:	jmp    3b40 <__printf_chk@plt>
    e1ef:	nop
    e1f0:	endbr64 
    e1f4:	mov    rax,rdi
    e1f7:	push   r12
    e1f9:	mul    rsi
    e1fc:	mov    r12,rax
    e1ff:	seto   al
    e202:	test   r12,r12
    e205:	js     e224 <__sprintf_chk@plt+0xa544>
    e207:	movzx  eax,al
    e20a:	test   rax,rax
    e20d:	jne    e224 <__sprintf_chk@plt+0xa544>
    e20f:	mov    rdi,r12
    e212:	call   3a70 <malloc@plt>
    e217:	test   rax,rax
    e21a:	jne    e221 <__sprintf_chk@plt+0xa541>
    e21c:	test   r12,r12
    e21f:	jne    e224 <__sprintf_chk@plt+0xa544>
    e221:	pop    r12
    e223:	ret    
    e224:	call   e520 <__sprintf_chk@plt+0xa840>
    e229:	nop    DWORD PTR [rax+0x0]
    e230:	endbr64 
    e234:	mov    rax,rsi
    e237:	push   r12
    e239:	mul    rdx
    e23c:	mov    r12,rax
    e23f:	seto   al
    e242:	test   r12,r12
    e245:	js     e27a <__sprintf_chk@plt+0xa59a>
    e247:	movzx  eax,al
    e24a:	test   rax,rax
    e24d:	jne    e27a <__sprintf_chk@plt+0xa59a>
    e24f:	test   r12,r12
    e252:	jne    e259 <__sprintf_chk@plt+0xa579>
    e254:	test   rdi,rdi
    e257:	jne    e270 <__sprintf_chk@plt+0xa590>
    e259:	mov    rsi,r12
    e25c:	call   3b20 <realloc@plt>
    e261:	test   rax,rax
    e264:	jne    e26b <__sprintf_chk@plt+0xa58b>
    e266:	test   r12,r12
    e269:	jne    e27a <__sprintf_chk@plt+0xa59a>
    e26b:	pop    r12
    e26d:	ret    
    e26e:	xchg   ax,ax
    e270:	call   3680 <free@plt>
    e275:	xor    eax,eax
    e277:	pop    r12
    e279:	ret    
    e27a:	call   e520 <__sprintf_chk@plt+0xa840>
    e27f:	nop
    e280:	endbr64 
    e284:	mov    r8,rdi
    e287:	push   rbx
    e288:	mov    rdi,rsi
    e28b:	mov    rcx,rdx
    e28e:	mov    rsi,QWORD PTR [rsi]
    e291:	test   r8,r8
    e294:	je     e2e0 <__sprintf_chk@plt+0xa600>
    e296:	movabs rax,0x5555555555555554
    e2a0:	xor    edx,edx
    e2a2:	div    rcx
    e2a5:	cmp    rax,rsi
    e2a8:	jbe    e33c <__sprintf_chk@plt+0xa65c>
    e2ae:	mov    rax,rsi
    e2b1:	shr    rax,1
    e2b4:	lea    rbx,[rax+rsi*1+0x1]
    e2b9:	mov    QWORD PTR [rdi],rbx
    e2bc:	imul   rbx,rcx
    e2c0:	test   rbx,rbx
    e2c3:	je     e330 <__sprintf_chk@plt+0xa650>
    e2c5:	mov    rsi,rbx
    e2c8:	mov    rdi,r8
    e2cb:	call   3b20 <realloc@plt>
    e2d0:	test   rax,rax
    e2d3:	jne    e2da <__sprintf_chk@plt+0xa5fa>
    e2d5:	test   rbx,rbx
    e2d8:	jne    e33c <__sprintf_chk@plt+0xa65c>
    e2da:	pop    rbx
    e2db:	ret    
    e2dc:	nop    DWORD PTR [rax+0x0]
    e2e0:	test   rsi,rsi
    e2e3:	je     e310 <__sprintf_chk@plt+0xa630>
    e2e5:	mov    rax,rcx
    e2e8:	mul    rsi
    e2eb:	mov    rcx,rax
    e2ee:	seto   al
    e2f1:	movzx  eax,al
    e2f4:	test   rcx,rcx
    e2f7:	js     e33c <__sprintf_chk@plt+0xa65c>
    e2f9:	test   rax,rax
    e2fc:	jne    e33c <__sprintf_chk@plt+0xa65c>
    e2fe:	mov    QWORD PTR [rdi],rsi
    e301:	mov    rbx,rcx
    e304:	jmp    e2c5 <__sprintf_chk@plt+0xa5e5>
    e306:	cs nop WORD PTR [rax+rax*1+0x0]
    e310:	xor    edx,edx
    e312:	mov    eax,0x80
    e317:	xor    esi,esi
    e319:	div    rcx
    e31c:	cmp    rcx,0x80
    e323:	seta   sil
    e327:	add    rsi,rax
    e32a:	jmp    e2e5 <__sprintf_chk@plt+0xa605>
    e32c:	nop    DWORD PTR [rax+0x0]
    e330:	mov    rdi,r8
    e333:	call   3680 <free@plt>
    e338:	xor    eax,eax
    e33a:	pop    rbx
    e33b:	ret    
    e33c:	call   e520 <__sprintf_chk@plt+0xa840>
    e341:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e34c:	nop    DWORD PTR [rax+0x0]
    e350:	endbr64 
    e354:	push   rbx
    e355:	mov    rbx,rdi
    e358:	call   3a70 <malloc@plt>
    e35d:	test   rax,rax
    e360:	jne    e367 <__sprintf_chk@plt+0xa687>
    e362:	test   rbx,rbx
    e365:	jne    e369 <__sprintf_chk@plt+0xa689>
    e367:	pop    rbx
    e368:	ret    
    e369:	call   e520 <__sprintf_chk@plt+0xa840>
    e36e:	xchg   ax,ax
    e370:	endbr64 
    e374:	push   rbx
    e375:	mov    rbx,rdi
    e378:	call   3a70 <malloc@plt>
    e37d:	test   rax,rax
    e380:	jne    e387 <__sprintf_chk@plt+0xa6a7>
    e382:	test   rbx,rbx
    e385:	jne    e389 <__sprintf_chk@plt+0xa6a9>
    e387:	pop    rbx
    e388:	ret    
    e389:	call   e520 <__sprintf_chk@plt+0xa840>
    e38e:	xchg   ax,ax
    e390:	endbr64 
    e394:	push   rbx
    e395:	mov    rbx,rsi
    e398:	test   rsi,rsi
    e39b:	jne    e3a2 <__sprintf_chk@plt+0xa6c2>
    e39d:	test   rdi,rdi
    e3a0:	jne    e3c0 <__sprintf_chk@plt+0xa6e0>
    e3a2:	mov    rsi,rbx
    e3a5:	call   3b20 <realloc@plt>
    e3aa:	test   rax,rax
    e3ad:	jne    e3b4 <__sprintf_chk@plt+0xa6d4>
    e3af:	test   rbx,rbx
    e3b2:	jne    e3c9 <__sprintf_chk@plt+0xa6e9>
    e3b4:	pop    rbx
    e3b5:	ret    
    e3b6:	cs nop WORD PTR [rax+rax*1+0x0]
    e3c0:	call   3680 <free@plt>
    e3c5:	xor    eax,eax
    e3c7:	pop    rbx
    e3c8:	ret    
    e3c9:	call   e520 <__sprintf_chk@plt+0xa840>
    e3ce:	xchg   ax,ax
    e3d0:	endbr64 
    e3d4:	sub    rsp,0x8
    e3d8:	mov    rax,rsi
    e3db:	mov    rsi,QWORD PTR [rsi]
    e3de:	test   rdi,rdi
    e3e1:	je     e410 <__sprintf_chk@plt+0xa730>
    e3e3:	movabs rdx,0x5555555555555553
    e3ed:	cmp    rsi,rdx
    e3f0:	ja     e422 <__sprintf_chk@plt+0xa742>
    e3f2:	mov    rdx,rsi
    e3f5:	shr    rdx,1
    e3f8:	lea    rsi,[rsi+rdx*1+0x1]
    e3fd:	mov    QWORD PTR [rax],rsi
    e400:	call   3b20 <realloc@plt>
    e405:	test   rax,rax
    e408:	je     e422 <__sprintf_chk@plt+0xa742>
    e40a:	add    rsp,0x8
    e40e:	ret    
    e40f:	nop
    e410:	test   rsi,rsi
    e413:	jne    e420 <__sprintf_chk@plt+0xa740>
    e415:	mov    esi,0x80
    e41a:	jmp    e3fd <__sprintf_chk@plt+0xa71d>
    e41c:	nop    DWORD PTR [rax+0x0]
    e420:	jns    e3fd <__sprintf_chk@plt+0xa71d>
    e422:	call   e520 <__sprintf_chk@plt+0xa840>
    e427:	nop    WORD PTR [rax+rax*1+0x0]
    e430:	endbr64 
    e434:	sub    rsp,0x8
    e438:	test   rdi,rdi
    e43b:	js     e451 <__sprintf_chk@plt+0xa771>
    e43d:	mov    esi,0x1
    e442:	call   3990 <calloc@plt>
    e447:	test   rax,rax
    e44a:	je     e451 <__sprintf_chk@plt+0xa771>
    e44c:	add    rsp,0x8
    e450:	ret    
    e451:	call   e520 <__sprintf_chk@plt+0xa840>
    e456:	cs nop WORD PTR [rax+rax*1+0x0]
    e460:	endbr64 
    e464:	mov    rax,rdi
    e467:	sub    rsp,0x8
    e46b:	mul    rsi
    e46e:	seto   dl
    e471:	test   rax,rax
    e474:	js     e48d <__sprintf_chk@plt+0xa7ad>
    e476:	movzx  edx,dl
    e479:	test   rdx,rdx
    e47c:	jne    e48d <__sprintf_chk@plt+0xa7ad>
    e47e:	call   3990 <calloc@plt>
    e483:	test   rax,rax
    e486:	je     e48d <__sprintf_chk@plt+0xa7ad>
    e488:	add    rsp,0x8
    e48c:	ret    
    e48d:	call   e520 <__sprintf_chk@plt+0xa840>
    e492:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    e49d:	nop    DWORD PTR [rax]
    e4a0:	endbr64 
    e4a4:	push   r12
    e4a6:	mov    r12,rsi
    e4a9:	push   rbp
    e4aa:	mov    rbp,rdi
    e4ad:	mov    rdi,rsi
    e4b0:	sub    rsp,0x8
    e4b4:	call   3a70 <malloc@plt>
    e4b9:	mov    rdi,rax
    e4bc:	test   rax,rax
    e4bf:	jne    e4c6 <__sprintf_chk@plt+0xa7e6>
    e4c1:	test   r12,r12
    e4c4:	jne    e4d8 <__sprintf_chk@plt+0xa7f8>
    e4c6:	add    rsp,0x8
    e4ca:	mov    rdx,r12
    e4cd:	mov    rsi,rbp
    e4d0:	pop    rbp
    e4d1:	pop    r12
    e4d3:	jmp    3a00 <memcpy@plt>
    e4d8:	call   e520 <__sprintf_chk@plt+0xa840>
    e4dd:	nop    DWORD PTR [rax]
    e4e0:	endbr64 
    e4e4:	push   r12
    e4e6:	push   rbp
    e4e7:	mov    rbp,rdi
    e4ea:	sub    rsp,0x8
    e4ee:	call   3810 <strlen@plt>
    e4f3:	lea    r12,[rax+0x1]
    e4f7:	mov    rdi,r12
    e4fa:	call   3a70 <malloc@plt>
    e4ff:	test   rax,rax
    e502:	je     e519 <__sprintf_chk@plt+0xa839>
    e504:	add    rsp,0x8
    e508:	mov    rdx,r12
    e50b:	mov    rsi,rbp
    e50e:	mov    rdi,rax
    e511:	pop    rbp
    e512:	pop    r12
    e514:	jmp    3a00 <memcpy@plt>
    e519:	call   e520 <__sprintf_chk@plt+0xa840>
    e51e:	xchg   ax,ax
    e520:	endbr64 
    e524:	push   rax
    e525:	pop    rax
    e526:	mov    edx,0x5
    e52b:	lea    rsi,[rip+0x1643d]        # 2496f <__sprintf_chk@plt+0x20c8f>
    e532:	xor    edi,edi
    e534:	sub    rsp,0x8
    e538:	call   37f0 <dcgettext@plt>
    e53d:	mov    edi,DWORD PTR [rip+0x1dae5]        # 2c028 <__sprintf_chk@plt+0x28348>
    e543:	lea    rdx,[rip+0x15206]        # 23750 <__sprintf_chk@plt+0x1fa70>
    e54a:	xor    esi,esi
    e54c:	mov    rcx,rax
    e54f:	xor    eax,eax
    e551:	call   3b90 <error@plt>
    e556:	call   36e0 <abort@plt>
    e55b:	nop    DWORD PTR [rax+rax*1+0x0]
    e560:	endbr64 
    e564:	sub    rsp,0x8
    e568:	or     esi,0x200
    e56e:	call   10a00 <__sprintf_chk@plt+0xcd20>
    e573:	test   rax,rax
    e576:	je     e580 <__sprintf_chk@plt+0xa8a0>
    e578:	add    rsp,0x8
    e57c:	ret    
    e57d:	nop    DWORD PTR [rax]
    e580:	call   36f0 <__errno_location@plt>
    e585:	cmp    DWORD PTR [rax],0x16
    e588:	je     e590 <__sprintf_chk@plt+0xa8b0>
    e58a:	call   e520 <__sprintf_chk@plt+0xa840>
    e58f:	nop
    e590:	lea    rcx,[rip+0x16409]        # 249a0 <__sprintf_chk@plt+0x20cc0>
    e597:	mov    edx,0x29
    e59c:	lea    rsi,[rip+0x163dd]        # 24980 <__sprintf_chk@plt+0x20ca0>
    e5a3:	lea    rdi,[rip+0x163e1]        # 2498b <__sprintf_chk@plt+0x20cab>
    e5aa:	call   38e0 <__assert_fail@plt>
    e5af:	nop
    e5b0:	endbr64 
    e5b4:	mov    eax,DWORD PTR [rdi+0x48]
    e5b7:	mov    r8d,0x1
    e5bd:	and    eax,0x11
    e5c0:	cmp    eax,0x10
    e5c3:	je     e5cd <__sprintf_chk@plt+0xa8ed>
    e5c5:	xor    r8d,r8d
    e5c8:	cmp    eax,0x11
    e5cb:	je     e5d8 <__sprintf_chk@plt+0xa8f8>
    e5cd:	mov    eax,r8d
    e5d0:	ret    
    e5d1:	nop    DWORD PTR [rax+0x0]
    e5d8:	cmp    QWORD PTR [rsi+0x58],0x0
    e5dd:	setne  r8b
    e5e1:	mov    eax,r8d
    e5e4:	ret    
    e5e5:	cs nop WORD PTR [rax+rax*1+0x0]
    e5ef:	nop
    e5f0:	endbr64 
    e5f4:	push   r15
    e5f6:	push   r14
    e5f8:	push   r13
    e5fa:	push   r12
    e5fc:	push   rbp
    e5fd:	push   rbx
    e5fe:	sub    rsp,0x28
    e602:	mov    QWORD PTR [rsp],rcx
    e606:	mov    rax,QWORD PTR fs:0x28
    e60f:	mov    QWORD PTR [rsp+0x18],rax
    e614:	xor    eax,eax
    e616:	cmp    edx,0x24
    e619:	ja     ec4f <__sprintf_chk@plt+0xaf6f>
    e61f:	test   rsi,rsi
    e622:	mov    rbx,rsi
    e625:	lea    rax,[rsp+0x10]
    e62a:	mov    r12d,edx
    e62d:	cmove  rbx,rax
    e631:	mov    r13,rdi
    e634:	mov    r14,r8
    e637:	call   36f0 <__errno_location@plt>
    e63c:	mov    edx,r12d
    e63f:	xor    ecx,ecx
    e641:	mov    rdi,r13
    e644:	mov    DWORD PTR [rax],0x0
    e64a:	mov    rsi,rbx
    e64d:	mov    r15,rax
    e650:	call   37b0 <__strtol_internal@plt>
    e655:	mov    r12,QWORD PTR [rbx]
    e658:	mov    rbp,rax
    e65b:	cmp    r12,r13
    e65e:	je     e6c8 <__sprintf_chk@plt+0xa9e8>
    e660:	mov    eax,DWORD PTR [r15]
    e663:	test   eax,eax
    e665:	jne    e6b0 <__sprintf_chk@plt+0xa9d0>
    e667:	xor    r13d,r13d
    e66a:	test   r14,r14
    e66d:	je     e67c <__sprintf_chk@plt+0xa99c>
    e66f:	movzx  edx,BYTE PTR [r12]
    e674:	test   dl,dl
    e676:	jne    e750 <__sprintf_chk@plt+0xaa70>
    e67c:	mov    rax,QWORD PTR [rsp]
    e680:	mov    QWORD PTR [rax],rbp
    e683:	mov    rax,QWORD PTR [rsp+0x18]
    e688:	sub    rax,QWORD PTR fs:0x28
    e691:	jne    ec6e <__sprintf_chk@plt+0xaf8e>
    e697:	add    rsp,0x28
    e69b:	mov    eax,r13d
    e69e:	pop    rbx
    e69f:	pop    rbp
    e6a0:	pop    r12
    e6a2:	pop    r13
    e6a4:	pop    r14
    e6a6:	pop    r15
    e6a8:	ret    
    e6a9:	nop    DWORD PTR [rax+0x0]
    e6b0:	mov    r13d,0x4
    e6b6:	cmp    eax,0x22
    e6b9:	jne    e683 <__sprintf_chk@plt+0xa9a3>
    e6bb:	mov    r13d,0x1
    e6c1:	jmp    e66a <__sprintf_chk@plt+0xa98a>
    e6c3:	nop    DWORD PTR [rax+rax*1+0x0]
    e6c8:	test   r14,r14
    e6cb:	je     e7d0 <__sprintf_chk@plt+0xaaf0>
    e6d1:	movzx  edx,BYTE PTR [r12]
    e6d6:	mov    r13d,0x4
    e6dc:	test   dl,dl
    e6de:	je     e683 <__sprintf_chk@plt+0xa9a3>
    e6e0:	movsx  esi,dl
    e6e3:	mov    rdi,r14
    e6e6:	mov    BYTE PTR [rsp+0xf],dl
    e6ea:	xor    r13d,r13d
    e6ed:	call   3880 <strchr@plt>
    e6f2:	mov    ebp,0x1
    e6f7:	movzx  edx,BYTE PTR [rsp+0xf]
    e6fc:	test   rax,rax
    e6ff:	je     e7d0 <__sprintf_chk@plt+0xaaf0>
    e705:	lea    eax,[rdx-0x45]
    e708:	cmp    al,0x2f
    e70a:	ja     e720 <__sprintf_chk@plt+0xaa40>
    e70c:	lea    rcx,[rip+0x162cd]        # 249e0 <__sprintf_chk@plt+0x20d00>
    e713:	movzx  eax,al
    e716:	movsxd rax,DWORD PTR [rcx+rax*4]
    e71a:	add    rax,rcx
    e71d:	notrack jmp rax
    e720:	mov    esi,0x1
    e725:	mov    eax,0x400
    e72a:	sub    edx,0x42
    e72d:	cmp    dl,0x35
    e730:	ja     e769 <__sprintf_chk@plt+0xaa89>
    e732:	lea    rcx,[rip+0x16367]        # 24aa0 <__sprintf_chk@plt+0x20dc0>
    e739:	movzx  edx,dl
    e73c:	movsxd rdx,DWORD PTR [rcx+rdx*4]
    e740:	add    rdx,rcx
    e743:	notrack jmp rdx
    e746:	cs nop WORD PTR [rax+rax*1+0x0]
    e750:	movsx  esi,dl
    e753:	mov    rdi,r14
    e756:	mov    BYTE PTR [rsp+0xf],dl
    e75a:	call   3880 <strchr@plt>
    e75f:	movzx  edx,BYTE PTR [rsp+0xf]
    e764:	test   rax,rax
    e767:	jne    e705 <__sprintf_chk@plt+0xaa25>
    e769:	mov    rax,QWORD PTR [rsp]
    e76d:	or     r13d,0x2
    e771:	mov    QWORD PTR [rax],rbp
    e774:	jmp    e683 <__sprintf_chk@plt+0xa9a3>
    e779:	nop    DWORD PTR [rax+0x0]
    e780:	mov    esi,0x30
    e785:	mov    rdi,r14
    e788:	mov    BYTE PTR [rsp+0xf],dl
    e78c:	call   3880 <strchr@plt>
    e791:	movzx  edx,BYTE PTR [rsp+0xf]
    e796:	test   rax,rax
    e799:	je     e720 <__sprintf_chk@plt+0xaa40>
    e79b:	movzx  eax,BYTE PTR [r12+0x1]
    e7a1:	cmp    al,0x44
    e7a3:	je     ec40 <__sprintf_chk@plt+0xaf60>
    e7a9:	cmp    al,0x69
    e7ab:	je     ec08 <__sprintf_chk@plt+0xaf28>
    e7b1:	xor    esi,esi
    e7b3:	cmp    al,0x42
    e7b5:	mov    ecx,0x3e8
    e7ba:	sete   sil
    e7be:	add    esi,0x1
    e7c1:	cmp    al,0x42
    e7c3:	mov    eax,0x400
    e7c8:	cmove  eax,ecx
    e7cb:	jmp    e72a <__sprintf_chk@plt+0xaa4a>
    e7d0:	mov    r13d,0x4
    e7d6:	jmp    e683 <__sprintf_chk@plt+0xa9a3>
    e7db:	nop    DWORD PTR [rax+rax*1+0x0]
    e7e0:	or     r13d,r10d
    e7e3:	movsxd rsi,esi
    e7e6:	mov    eax,r13d
    e7e9:	add    r12,rsi
    e7ec:	or     eax,0x2
    e7ef:	mov    QWORD PTR [rbx],r12
    e7f2:	cmp    BYTE PTR [r12],0x0
    e7f7:	cmovne r13d,eax
    e7fb:	jmp    e67c <__sprintf_chk@plt+0xa99c>
    e800:	movsxd rcx,eax
    e803:	mov    edi,0x4
    e808:	xor    r10d,r10d
    e80b:	movabs rax,0x8000000000000000
    e815:	movabs r9,0x7fffffffffffffff
    e81f:	cqo    
    e821:	idiv   rcx
    e824:	mov    r8,rax
    e827:	jmp    e84a <__sprintf_chk@plt+0xab6a>
    e829:	nop    DWORD PTR [rax+0x0]
    e830:	mov    rax,r9
    e833:	cqo    
    e835:	idiv   rcx
    e838:	cmp    rax,rbp
    e83b:	jl     eb78 <__sprintf_chk@plt+0xae98>
    e841:	imul   rbp,rcx
    e845:	sub    edi,0x1
    e848:	je     e7e0 <__sprintf_chk@plt+0xab00>
    e84a:	cmp    r8,rbp
    e84d:	jle    e830 <__sprintf_chk@plt+0xab50>
    e84f:	movabs rbp,0x8000000000000000
    e859:	mov    r10d,0x1
    e85f:	jmp    e845 <__sprintf_chk@plt+0xab65>
    e861:	movabs rdi,0x8000000000000000
    e86b:	movsxd rcx,eax
    e86e:	mov    rax,rdi
    e871:	cqo    
    e873:	idiv   rcx
    e876:	cmp    rbp,rax
    e879:	jl     e950 <__sprintf_chk@plt+0xac70>
    e87f:	sub    rdi,0x1
    e883:	mov    rax,rdi
    e886:	cqo    
    e888:	idiv   rcx
    e88b:	cmp    rbp,rax
    e88e:	jg     ec28 <__sprintf_chk@plt+0xaf48>
    e894:	imul   rbp,rcx
    e898:	jmp    e7e3 <__sprintf_chk@plt+0xab03>
    e89d:	movsxd rcx,eax
    e8a0:	mov    edi,0x3
    e8a5:	xor    r10d,r10d
    e8a8:	movabs rax,0x8000000000000000
    e8b2:	movabs r9,0x7fffffffffffffff
    e8bc:	cqo    
    e8be:	idiv   rcx
    e8c1:	mov    r8,rax
    e8c4:	jmp    e8ee <__sprintf_chk@plt+0xac0e>
    e8c6:	cs nop WORD PTR [rax+rax*1+0x0]
    e8d0:	mov    rax,r9
    e8d3:	cqo    
    e8d5:	idiv   rcx
    e8d8:	cmp    rax,rbp
    e8db:	jl     ebc0 <__sprintf_chk@plt+0xaee0>
    e8e1:	imul   rbp,rcx
    e8e5:	sub    edi,0x1
    e8e8:	je     e7e0 <__sprintf_chk@plt+0xab00>
    e8ee:	cmp    r8,rbp
    e8f1:	jle    e8d0 <__sprintf_chk@plt+0xabf0>
    e8f3:	movabs rbp,0x8000000000000000
    e8fd:	mov    r10d,0x1
    e903:	jmp    e8e5 <__sprintf_chk@plt+0xac05>
    e905:	movabs rdi,0x8000000000000000
    e90f:	movsxd rcx,eax
    e912:	mov    rax,rdi
    e915:	cqo    
    e917:	idiv   rcx
    e91a:	mov    r8,rax
    e91d:	cmp    rbp,rax
    e920:	jl     e950 <__sprintf_chk@plt+0xac70>
    e922:	movabs r9,0x7fffffffffffffff
    e92c:	mov    rax,r9
    e92f:	cqo    
    e931:	idiv   rcx
    e934:	cmp    rbp,rax
    e937:	jg     ec28 <__sprintf_chk@plt+0xaf48>
    e93d:	imul   rbp,rcx
    e941:	cmp    rbp,r8
    e944:	jge    e88b <__sprintf_chk@plt+0xabab>
    e94a:	nop    WORD PTR [rax+rax*1+0x0]
    e950:	movabs rbp,0x8000000000000000
    e95a:	mov    r13d,0x1
    e960:	jmp    e7e3 <__sprintf_chk@plt+0xab03>
    e965:	movsxd rcx,eax
    e968:	mov    edi,0x5
    e96d:	xor    r10d,r10d
    e970:	movabs rax,0x8000000000000000
    e97a:	movabs r9,0x7fffffffffffffff
    e984:	cqo    
    e986:	idiv   rcx
    e989:	mov    r8,rax
    e98c:	jmp    e9ae <__sprintf_chk@plt+0xacce>
    e98e:	xchg   ax,ax
    e990:	mov    rax,r9
    e993:	cqo    
    e995:	idiv   rcx
    e998:	cmp    rax,rbp
    e99b:	jl     eba8 <__sprintf_chk@plt+0xaec8>
    e9a1:	imul   rbp,rcx
    e9a5:	sub    edi,0x1
    e9a8:	je     e7e0 <__sprintf_chk@plt+0xab00>
    e9ae:	cmp    r8,rbp
    e9b1:	jle    e990 <__sprintf_chk@plt+0xacb0>
    e9b3:	movabs rbp,0x8000000000000000
    e9bd:	mov    r10d,0x1
    e9c3:	jmp    e9a5 <__sprintf_chk@plt+0xacc5>
    e9c5:	movsxd rcx,eax
    e9c8:	mov    edi,0x6
    e9cd:	xor    r10d,r10d
    e9d0:	movabs rax,0x8000000000000000
    e9da:	movabs r9,0x7fffffffffffffff
    e9e4:	cqo    
    e9e6:	idiv   rcx
    e9e9:	mov    r8,rax
    e9ec:	jmp    ea0e <__sprintf_chk@plt+0xad2e>
    e9ee:	xchg   ax,ax
    e9f0:	mov    rax,r9
    e9f3:	cqo    
    e9f5:	idiv   rcx
    e9f8:	cmp    rax,rbp
    e9fb:	jl     eb90 <__sprintf_chk@plt+0xaeb0>
    ea01:	imul   rbp,rcx
    ea05:	sub    edi,0x1
    ea08:	je     e7e0 <__sprintf_chk@plt+0xab00>
    ea0e:	cmp    r8,rbp
    ea11:	jle    e9f0 <__sprintf_chk@plt+0xad10>
    ea13:	movabs rbp,0x8000000000000000
    ea1d:	mov    r10d,0x1
    ea23:	jmp    ea05 <__sprintf_chk@plt+0xad25>
    ea25:	movabs rax,0xffe0000000000000
    ea2f:	cmp    rbp,rax
    ea32:	jl     e950 <__sprintf_chk@plt+0xac70>
    ea38:	movabs rax,0x1fffffffffffff
    ea42:	cmp    rbp,rax
    ea45:	jg     ec28 <__sprintf_chk@plt+0xaf48>
    ea4b:	shl    rbp,0xa
    ea4f:	jmp    e7e3 <__sprintf_chk@plt+0xab03>
    ea54:	movabs rax,0xc000000000000000
    ea5e:	cmp    rbp,rax
    ea61:	jl     e950 <__sprintf_chk@plt+0xac70>
    ea67:	movabs rax,0x3fffffffffffffff
    ea71:	cmp    rbp,rax
    ea74:	jg     ec28 <__sprintf_chk@plt+0xaf48>
    ea7a:	add    rbp,rbp
    ea7d:	jmp    e7e3 <__sprintf_chk@plt+0xab03>
    ea82:	movabs rax,0xffc0000000000000
    ea8c:	cmp    rbp,rax
    ea8f:	jl     e950 <__sprintf_chk@plt+0xac70>
    ea95:	movabs rax,0x3fffffffffffff
    ea9f:	cmp    rbp,rax
    eaa2:	jg     ec28 <__sprintf_chk@plt+0xaf48>
    eaa8:	shl    rbp,0x9
    eaac:	jmp    e7e3 <__sprintf_chk@plt+0xab03>
    eab1:	movsxd rcx,eax
    eab4:	mov    edi,0x7
    eab9:	xor    r10d,r10d
    eabc:	movabs rax,0x8000000000000000
    eac6:	movabs r9,0x7fffffffffffffff
    ead0:	cqo    
    ead2:	idiv   rcx
    ead5:	mov    r8,rax
    ead8:	jmp    eafe <__sprintf_chk@plt+0xae1e>
    eada:	nop    WORD PTR [rax+rax*1+0x0]
    eae0:	mov    rax,r9
    eae3:	cqo    
    eae5:	idiv   rcx
    eae8:	cmp    rbp,rax
    eaeb:	jg     ebd8 <__sprintf_chk@plt+0xaef8>
    eaf1:	imul   rbp,rcx
    eaf5:	sub    edi,0x1
    eaf8:	je     e7e0 <__sprintf_chk@plt+0xab00>
    eafe:	cmp    rbp,r8
    eb01:	jge    eae0 <__sprintf_chk@plt+0xae00>
    eb03:	movabs rbp,0x8000000000000000
    eb0d:	mov    r10d,0x1
    eb13:	jmp    eaf5 <__sprintf_chk@plt+0xae15>
    eb15:	movsxd rcx,eax
    eb18:	mov    edi,0x8
    eb1d:	xor    r10d,r10d
    eb20:	movabs rax,0x8000000000000000
    eb2a:	movabs r9,0x7fffffffffffffff
    eb34:	cqo    
    eb36:	idiv   rcx
    eb39:	mov    r8,rax
    eb3c:	jmp    eb5e <__sprintf_chk@plt+0xae7e>
    eb3e:	xchg   ax,ax
    eb40:	mov    rax,r9
    eb43:	cqo    
    eb45:	idiv   rcx
    eb48:	cmp    rax,rbp
    eb4b:	jl     ebf0 <__sprintf_chk@plt+0xaf10>
    eb51:	imul   rbp,rcx
    eb55:	sub    edi,0x1
    eb58:	je     e7e0 <__sprintf_chk@plt+0xab00>
    eb5e:	cmp    r8,rbp
    eb61:	jle    eb40 <__sprintf_chk@plt+0xae60>
    eb63:	movabs rbp,0x8000000000000000
    eb6d:	mov    r10d,0x1
    eb73:	jmp    eb55 <__sprintf_chk@plt+0xae75>
    eb75:	nop    DWORD PTR [rax]
    eb78:	movabs rbp,0x7fffffffffffffff
    eb82:	mov    r10d,0x1
    eb88:	jmp    e845 <__sprintf_chk@plt+0xab65>
    eb8d:	nop    DWORD PTR [rax]
    eb90:	movabs rbp,0x7fffffffffffffff
    eb9a:	mov    r10d,0x1
    eba0:	jmp    ea05 <__sprintf_chk@plt+0xad25>
    eba5:	nop    DWORD PTR [rax]
    eba8:	movabs rbp,0x7fffffffffffffff
    ebb2:	mov    r10d,0x1
    ebb8:	jmp    e9a5 <__sprintf_chk@plt+0xacc5>
    ebbd:	nop    DWORD PTR [rax]
    ebc0:	movabs rbp,0x7fffffffffffffff
    ebca:	mov    r10d,0x1
    ebd0:	jmp    e8e5 <__sprintf_chk@plt+0xac05>
    ebd5:	nop    DWORD PTR [rax]
    ebd8:	movabs rbp,0x7fffffffffffffff
    ebe2:	mov    r10d,0x1
    ebe8:	jmp    eaf5 <__sprintf_chk@plt+0xae15>
    ebed:	nop    DWORD PTR [rax]
    ebf0:	movabs rbp,0x7fffffffffffffff
    ebfa:	mov    r10d,0x1
    ec00:	jmp    eb55 <__sprintf_chk@plt+0xae75>
    ec05:	nop    DWORD PTR [rax]
    ec08:	xor    esi,esi
    ec0a:	cmp    BYTE PTR [r12+0x2],0x42
    ec10:	mov    eax,0x400
    ec15:	sete   sil
    ec19:	lea    esi,[rsi+rsi*1+0x1]
    ec1d:	jmp    e72a <__sprintf_chk@plt+0xaa4a>
    ec22:	nop    WORD PTR [rax+rax*1+0x0]
    ec28:	movabs rbp,0x7fffffffffffffff
    ec32:	mov    r13d,0x1
    ec38:	jmp    e7e3 <__sprintf_chk@plt+0xab03>
    ec3d:	nop    DWORD PTR [rax]
    ec40:	mov    esi,0x2
    ec45:	mov    eax,0x3e8
    ec4a:	jmp    e72a <__sprintf_chk@plt+0xaa4a>
    ec4f:	lea    rcx,[rip+0x15f22]        # 24b78 <__sprintf_chk@plt+0x20e98>
    ec56:	mov    edx,0x54
    ec5b:	lea    rsi,[rip+0x15d48]        # 249aa <__sprintf_chk@plt+0x20cca>
    ec62:	lea    rdi,[rip+0x15d4f]        # 249b8 <__sprintf_chk@plt+0x20cd8>
    ec69:	call   38e0 <__assert_fail@plt>
    ec6e:	call   3840 <__stack_chk_fail@plt>
    ec73:	cs nop WORD PTR [rax+rax*1+0x0]
    ec7d:	nop    DWORD PTR [rax]
    ec80:	endbr64 
    ec84:	push   r13
    ec86:	push   r12
    ec88:	push   rbp
    ec89:	push   rbx
    ec8a:	mov    rbx,r8
    ec8d:	sub    rsp,0x18
    ec91:	mov    rax,QWORD PTR fs:0x28
    ec9a:	mov    QWORD PTR [rsp+0x8],rax
    ec9f:	xor    eax,eax
    eca1:	mov    ebp,DWORD PTR [rip+0x1d381]        # 2c028 <__sprintf_chk@plt+0x28348>
    eca7:	cmp    edi,0x3
    ecaa:	ja     ed08 <__sprintf_chk@plt+0xb028>
    ecac:	cmp    edi,0x1
    ecaf:	ja     ed39 <__sprintf_chk@plt+0xb059>
    ecb5:	jne    ed42 <__sprintf_chk@plt+0xb062>
    ecbb:	lea    r9,[rip+0x15eeb]        # 24bad <__sprintf_chk@plt+0x20ecd>
    ecc2:	movsxd rax,esi
    ecc5:	test   esi,esi
    ecc7:	js     ed1f <__sprintf_chk@plt+0xb03f>
    ecc9:	shl    rax,0x5
    eccd:	lea    r12,[rip+0x15f11]        # 24be5 <__sprintf_chk@plt+0x20f05>
    ecd4:	mov    r13,QWORD PTR [rcx+rax*1]
    ecd8:	mov    rsi,r9
    ecdb:	mov    edx,0x5
    ece0:	xor    edi,edi
    ece2:	call   37f0 <dcgettext@plt>
    ece7:	mov    r9,rbx
    ecea:	mov    r8,r13
    eced:	mov    rcx,r12
    ecf0:	mov    rdx,rax
    ecf3:	xor    esi,esi
    ecf5:	mov    edi,ebp
    ecf7:	xor    eax,eax
    ecf9:	call   3b90 <error@plt>
    ecfe:	call   36e0 <abort@plt>
    ed03:	nop    DWORD PTR [rax+rax*1+0x0]
    ed08:	cmp    edi,0x4
    ed0b:	jne    3d4f <__sprintf_chk@plt+0x6f>
    ed11:	lea    r9,[rip+0x15eb2]        # 24bca <__sprintf_chk@plt+0x20eea>
    ed18:	movsxd rax,esi
    ed1b:	test   esi,esi
    ed1d:	jns    ecc9 <__sprintf_chk@plt+0xafe9>
    ed1f:	lea    r12,[rip+0x15ebf]        # 24be5 <__sprintf_chk@plt+0x20f05>
    ed26:	mov    BYTE PTR [rsp+0x6],dl
    ed2a:	lea    r13,[rsp+0x6]
    ed2f:	mov    BYTE PTR [rsp+0x7],0x0
    ed34:	sub    r12,rax
    ed37:	jmp    ecd8 <__sprintf_chk@plt+0xaff8>
    ed39:	lea    r9,[rip+0x15e48]        # 24b88 <__sprintf_chk@plt+0x20ea8>
    ed40:	jmp    ecc2 <__sprintf_chk@plt+0xafe2>
    ed42:	jmp    3d4f <__sprintf_chk@plt+0x6f>
    ed47:	nop    WORD PTR [rax+rax*1+0x0]
    ed50:	endbr64 
    ed54:	push   r15
    ed56:	push   r14
    ed58:	push   r13
    ed5a:	push   r12
    ed5c:	push   rbp
    ed5d:	push   rbx
    ed5e:	sub    rsp,0x28
    ed62:	mov    QWORD PTR [rsp],rcx
    ed66:	mov    rax,QWORD PTR fs:0x28
    ed6f:	mov    QWORD PTR [rsp+0x18],rax
    ed74:	xor    eax,eax
    ed76:	cmp    edx,0x24
    ed79:	ja     f1cf <__sprintf_chk@plt+0xb4ef>
    ed7f:	mov    r15,rsi
    ed82:	test   rsi,rsi
    ed85:	lea    rax,[rsp+0x10]
    ed8a:	mov    rbp,rdi
    ed8d:	cmove  r15,rax
    ed91:	mov    r14d,edx
    ed94:	mov    r13,r8
    ed97:	call   36f0 <__errno_location@plt>
    ed9c:	mov    DWORD PTR [rax],0x0
    eda2:	mov    r12,rax
    eda5:	movzx  ebx,BYTE PTR [rbp+0x0]
    eda9:	call   3cd0 <__ctype_b_loc@plt>
    edae:	mov    rcx,QWORD PTR [rax]
    edb1:	mov    rax,rbp
    edb4:	jmp    edc8 <__sprintf_chk@plt+0xb0e8>
    edb6:	cs nop WORD PTR [rax+rax*1+0x0]
    edc0:	movzx  ebx,BYTE PTR [rax+0x1]
    edc4:	add    rax,0x1
    edc8:	movzx  edx,bl
    edcb:	test   BYTE PTR [rcx+rdx*2+0x1],0x20
    edd0:	jne    edc0 <__sprintf_chk@plt+0xb0e0>
    edd2:	cmp    bl,0x2d
    edd5:	je     ee4b <__sprintf_chk@plt+0xb16b>
    edd7:	xor    ecx,ecx
    edd9:	mov    edx,r14d
    eddc:	mov    rsi,r15
    eddf:	mov    rdi,rbp
    ede2:	call   38f0 <__strtoul_internal@plt>
    ede7:	mov    r8,QWORD PTR [r15]
    edea:	mov    rbx,rax
    eded:	cmp    r8,rbp
    edf0:	je     ee58 <__sprintf_chk@plt+0xb178>
    edf2:	mov    eax,DWORD PTR [r12]
    edf6:	test   eax,eax
    edf8:	jne    ee40 <__sprintf_chk@plt+0xb160>
    edfa:	xor    r12d,r12d
    edfd:	test   r13,r13
    ee00:	je     ee0f <__sprintf_chk@plt+0xb12f>
    ee02:	movzx  ebp,BYTE PTR [r8]
    ee06:	test   bpl,bpl
    ee09:	jne    eed0 <__sprintf_chk@plt+0xb1f0>
    ee0f:	mov    rax,QWORD PTR [rsp]
    ee13:	mov    QWORD PTR [rax],rbx
    ee16:	mov    rax,QWORD PTR [rsp+0x18]
    ee1b:	sub    rax,QWORD PTR fs:0x28
    ee24:	jne    f1ca <__sprintf_chk@plt+0xb4ea>
    ee2a:	add    rsp,0x28
    ee2e:	mov    eax,r12d
    ee31:	pop    rbx
    ee32:	pop    rbp
    ee33:	pop    r12
    ee35:	pop    r13
    ee37:	pop    r14
    ee39:	pop    r15
    ee3b:	ret    
    ee3c:	nop    DWORD PTR [rax+0x0]
    ee40:	mov    r12d,0x1
    ee46:	cmp    eax,0x22
    ee49:	je     edfd <__sprintf_chk@plt+0xb11d>
    ee4b:	mov    r12d,0x4
    ee51:	jmp    ee16 <__sprintf_chk@plt+0xb136>
    ee53:	nop    DWORD PTR [rax+rax*1+0x0]
    ee58:	mov    QWORD PTR [rsp+0x8],r8
    ee5d:	test   r13,r13
    ee60:	je     ee4b <__sprintf_chk@plt+0xb16b>
    ee62:	movzx  ebp,BYTE PTR [rbp+0x0]
    ee66:	test   bpl,bpl
    ee69:	je     ee4b <__sprintf_chk@plt+0xb16b>
    ee6b:	movsx  esi,bpl
    ee6f:	mov    rdi,r13
    ee72:	xor    r12d,r12d
    ee75:	mov    ebx,0x1
    ee7a:	call   3880 <strchr@plt>
    ee7f:	mov    r8,QWORD PTR [rsp+0x8]
    ee84:	test   rax,rax
    ee87:	je     ee4b <__sprintf_chk@plt+0xb16b>
    ee89:	lea    eax,[rbp-0x45]
    ee8c:	cmp    al,0x2f
    ee8e:	ja     eea8 <__sprintf_chk@plt+0xb1c8>
    ee90:	lea    rdx,[rip+0x15d51]        # 24be8 <__sprintf_chk@plt+0x20f08>
    ee97:	movzx  eax,al
    ee9a:	movsxd rax,DWORD PTR [rdx+rax*4]
    ee9e:	add    rax,rdx
    eea1:	notrack jmp rax
    eea4:	nop    DWORD PTR [rax+0x0]
    eea8:	mov    esi,0x1
    eead:	mov    ecx,0x400
    eeb2:	sub    ebp,0x42
    eeb5:	cmp    bpl,0x35
    eeb9:	ja     eeeb <__sprintf_chk@plt+0xb20b>
    eebb:	lea    rdx,[rip+0x15de6]        # 24ca8 <__sprintf_chk@plt+0x20fc8>
    eec2:	movzx  ebp,bpl
    eec6:	movsxd rax,DWORD PTR [rdx+rbp*4]
    eeca:	add    rax,rdx
    eecd:	notrack jmp rax
    eed0:	movsx  esi,bpl
    eed4:	mov    rdi,r13
    eed7:	mov    QWORD PTR [rsp+0x8],r8
    eedc:	call   3880 <strchr@plt>
    eee1:	mov    r8,QWORD PTR [rsp+0x8]
    eee6:	test   rax,rax
    eee9:	jne    ee89 <__sprintf_chk@plt+0xb1a9>
    eeeb:	mov    rax,QWORD PTR [rsp]
    eeef:	or     r12d,0x2
    eef3:	mov    QWORD PTR [rax],rbx
    eef6:	jmp    ee16 <__sprintf_chk@plt+0xb136>
    eefb:	mov    esi,0x30
    ef00:	mov    rdi,r13
    ef03:	mov    QWORD PTR [rsp+0x8],r8
    ef08:	call   3880 <strchr@plt>
    ef0d:	mov    r8,QWORD PTR [rsp+0x8]
    ef12:	test   rax,rax
    ef15:	je     eea8 <__sprintf_chk@plt+0xb1c8>
    ef17:	movzx  eax,BYTE PTR [r8+0x1]
    ef1c:	cmp    al,0x44
    ef1e:	je     f130 <__sprintf_chk@plt+0xb450>
    ef24:	cmp    al,0x69
    ef26:	je     ef4e <__sprintf_chk@plt+0xb26e>
    ef28:	cmp    al,0x42
    ef2a:	je     f130 <__sprintf_chk@plt+0xb450>
    ef30:	sub    ebp,0x45
    ef33:	cmp    bpl,0x2f
    ef37:	ja     eeeb <__sprintf_chk@plt+0xb20b>
    ef39:	lea    rdx,[rip+0x15e40]        # 24d80 <__sprintf_chk@plt+0x210a0>
    ef40:	movzx  ebp,bpl
    ef44:	movsxd rax,DWORD PTR [rdx+rbp*4]
    ef48:	add    rax,rdx
    ef4b:	notrack jmp rax
    ef4e:	xor    esi,esi
    ef50:	cmp    BYTE PTR [r8+0x2],0x42
    ef55:	mov    ecx,0x400
    ef5a:	sete   sil
    ef5e:	lea    esi,[rsi+rsi*1+0x1]
    ef62:	jmp    eeb2 <__sprintf_chk@plt+0xb1d2>
    ef67:	movsxd rsi,esi
    ef6a:	mov    rax,rbx
    ef6d:	mul    rcx
    ef70:	jo     efa9 <__sprintf_chk@plt+0xb2c9>
    ef72:	mul    rcx
    ef75:	jo     efa9 <__sprintf_chk@plt+0xb2c9>
    ef77:	mov    rbx,rax
    ef7a:	nop    WORD PTR [rax+rax*1+0x0]
    ef80:	add    rsi,r8
    ef83:	mov    eax,r12d
    ef86:	or     eax,0x2
    ef89:	mov    QWORD PTR [r15],rsi
    ef8c:	cmp    BYTE PTR [rsi],0x0
    ef8f:	cmovne r12d,eax
    ef93:	jmp    ee0f <__sprintf_chk@plt+0xb12f>
    ef98:	movsxd rdx,ecx
    ef9b:	movsxd rsi,esi
    ef9e:	mov    rax,rbx
    efa1:	mul    rdx
    efa4:	mov    rbx,rax
    efa7:	jno    ef80 <__sprintf_chk@plt+0xb2a0>
    efa9:	mov    r12d,0x1
    efaf:	or     rbx,0xffffffffffffffff
    efb3:	jmp    ef80 <__sprintf_chk@plt+0xb2a0>
    efb5:	nop    DWORD PTR [rax]
    efb8:	movsxd rsi,esi
    efbb:	mov    rax,rbx
    efbe:	mul    rcx
    efc1:	jo     f18f <__sprintf_chk@plt+0xb4af>
    efc7:	mul    rcx
    efca:	jo     f18f <__sprintf_chk@plt+0xb4af>
    efd0:	mul    rcx
    efd3:	jo     f18f <__sprintf_chk@plt+0xb4af>
    efd9:	mov    rbx,rax
    efdc:	xor    eax,eax
    efde:	or     r12d,eax
    efe1:	jmp    ef80 <__sprintf_chk@plt+0xb2a0>
    efe3:	movsxd rsi,esi
    efe6:	mov    edi,0x4
    efeb:	xor    r9d,r9d
    efee:	xchg   ax,ax
    eff0:	mov    rax,rbx
    eff3:	mul    rcx
    eff6:	mov    rbx,rax
    eff9:	jo     f1bb <__sprintf_chk@plt+0xb4db>
    efff:	sub    edi,0x1
    f002:	jne    eff0 <__sprintf_chk@plt+0xb310>
    f004:	or     r12d,r9d
    f007:	jmp    ef80 <__sprintf_chk@plt+0xb2a0>
    f00c:	mov    rax,rbx
    f00f:	movsxd rsi,esi
    f012:	shr    rax,0x36
    f016:	jne    efa9 <__sprintf_chk@plt+0xb2c9>
    f018:	shl    rbx,0xa
    f01c:	jmp    ef80 <__sprintf_chk@plt+0xb2a0>
    f021:	movsxd rsi,esi
    f024:	test   rbx,rbx
    f027:	js     efa9 <__sprintf_chk@plt+0xb2c9>
    f029:	add    rbx,rbx
    f02c:	jmp    ef80 <__sprintf_chk@plt+0xb2a0>
    f031:	movsxd rsi,esi
    f034:	mov    edi,0x6
    f039:	xor    r9d,r9d
    f03c:	nop    DWORD PTR [rax+0x0]
    f040:	mov    rax,rbx
    f043:	mul    rcx
    f046:	mov    rbx,rax
    f049:	jo     f1ee <__sprintf_chk@plt+0xb50e>
    f04f:	sub    edi,0x1
    f052:	jne    f040 <__sprintf_chk@plt+0xb360>
    f054:	jmp    f004 <__sprintf_chk@plt+0xb324>
    f056:	movsxd rsi,esi
    f059:	jmp    ef80 <__sprintf_chk@plt+0xb2a0>
    f05e:	movsxd rsi,esi
    f061:	mov    edi,0x7
    f066:	xor    r9d,r9d
    f069:	nop    DWORD PTR [rax+0x0]
    f070:	mov    rax,rbx
    f073:	mul    rcx
    f076:	mov    rbx,rax
    f079:	jo     f1ac <__sprintf_chk@plt+0xb4cc>
    f07f:	sub    edi,0x1
    f082:	jne    f070 <__sprintf_chk@plt+0xb390>
    f084:	jmp    f004 <__sprintf_chk@plt+0xb324>
    f089:	movsxd rsi,esi
    f08c:	mov    edi,0x8
    f091:	xor    r9d,r9d
    f094:	nop    DWORD PTR [rax+0x0]
    f098:	mov    rax,rbx
    f09b:	mul    rcx
    f09e:	mov    rbx,rax
    f0a1:	jo     f19d <__sprintf_chk@plt+0xb4bd>
    f0a7:	sub    edi,0x1
    f0aa:	jne    f098 <__sprintf_chk@plt+0xb3b8>
    f0ac:	jmp    f004 <__sprintf_chk@plt+0xb324>
    f0b1:	movsxd rsi,esi
    f0b4:	mov    edi,0x5
    f0b9:	xor    r9d,r9d
    f0bc:	nop    DWORD PTR [rax+0x0]
    f0c0:	mov    rax,rbx
    f0c3:	mul    rcx
    f0c6:	mov    rbx,rax
    f0c9:	jo     f1fd <__sprintf_chk@plt+0xb51d>
    f0cf:	sub    edi,0x1
    f0d2:	jne    f0c0 <__sprintf_chk@plt+0xb3e0>
    f0d4:	jmp    f004 <__sprintf_chk@plt+0xb324>
    f0d9:	movsxd rsi,esi
    f0dc:	mov    rax,rbx
    f0df:	shr    rax,0x37
    f0e3:	jne    efa9 <__sprintf_chk@plt+0xb2c9>
    f0e9:	shl    rbx,0x9
    f0ed:	jmp    ef80 <__sprintf_chk@plt+0xb2a0>
    f0f2:	mov    esi,0x1
    f0f7:	mov    ecx,0x400
    f0fc:	jmp    efe6 <__sprintf_chk@plt+0xb306>
    f101:	mov    esi,0x1
    f106:	mov    ecx,0x400
    f10b:	jmp    ef6a <__sprintf_chk@plt+0xb28a>
    f110:	mov    esi,0x1
    f115:	mov    edx,0x400
    f11a:	jmp    ef9e <__sprintf_chk@plt+0xb2be>
    f11f:	mov    esi,0x1
    f124:	mov    ecx,0x400
    f129:	jmp    efbb <__sprintf_chk@plt+0xb2db>
    f12e:	xchg   ax,ax
    f130:	mov    esi,0x2
    f135:	mov    ecx,0x3e8
    f13a:	jmp    eeb2 <__sprintf_chk@plt+0xb1d2>
    f13f:	mov    esi,0x1
    f144:	mov    ecx,0x400
    f149:	jmp    f034 <__sprintf_chk@plt+0xb354>
    f14e:	mov    esi,0x1
    f153:	jmp    ef80 <__sprintf_chk@plt+0xb2a0>
    f158:	mov    esi,0x1
    f15d:	mov    ecx,0x400
    f162:	jmp    f08c <__sprintf_chk@plt+0xb3ac>
    f167:	mov    esi,0x1
    f16c:	mov    ecx,0x400
    f171:	jmp    f0b4 <__sprintf_chk@plt+0xb3d4>
    f176:	mov    esi,0x1
    f17b:	jmp    f0dc <__sprintf_chk@plt+0xb3fc>
    f180:	mov    esi,0x1
    f185:	mov    ecx,0x400
    f18a:	jmp    f061 <__sprintf_chk@plt+0xb381>
    f18f:	mov    eax,0x1
    f194:	or     rbx,0xffffffffffffffff
    f198:	jmp    efde <__sprintf_chk@plt+0xb2fe>
    f19d:	mov    r9d,0x1
    f1a3:	or     rbx,0xffffffffffffffff
    f1a7:	jmp    f0a7 <__sprintf_chk@plt+0xb3c7>
    f1ac:	mov    r9d,0x1
    f1b2:	or     rbx,0xffffffffffffffff
    f1b6:	jmp    f07f <__sprintf_chk@plt+0xb39f>
    f1bb:	mov    r9d,0x1
    f1c1:	or     rbx,0xffffffffffffffff
    f1c5:	jmp    efff <__sprintf_chk@plt+0xb31f>
    f1ca:	call   3840 <__stack_chk_fail@plt>
    f1cf:	lea    rcx,[rip+0x15c6a]        # 24e40 <__sprintf_chk@plt+0x21160>
    f1d6:	mov    edx,0x54
    f1db:	lea    rsi,[rip+0x157c8]        # 249aa <__sprintf_chk@plt+0x20cca>
    f1e2:	lea    rdi,[rip+0x157cf]        # 249b8 <__sprintf_chk@plt+0x20cd8>
    f1e9:	call   38e0 <__assert_fail@plt>
    f1ee:	mov    r9d,0x1
    f1f4:	or     rbx,0xffffffffffffffff
    f1f8:	jmp    f04f <__sprintf_chk@plt+0xb36f>
    f1fd:	mov    r9d,0x1
    f203:	or     rbx,0xffffffffffffffff
    f207:	jmp    f0cf <__sprintf_chk@plt+0xb3ef>
    f20c:	nop    DWORD PTR [rax+0x0]
    f210:	endbr64 
    f214:	push   r12
    f216:	push   rbp
    f217:	mov    rbp,rdi
    f21a:	push   rbx
    f21b:	call   3a20 <fileno@plt>
    f220:	mov    rdi,rbp
    f223:	test   eax,eax
    f225:	js     f27f <__sprintf_chk@plt+0xb59f>
    f227:	call   3b00 <__freading@plt>
    f22c:	test   eax,eax
    f22e:	jne    f260 <__sprintf_chk@plt+0xb580>
    f230:	mov    rdi,rbp
    f233:	call   f2a0 <__sprintf_chk@plt+0xb5c0>
    f238:	test   eax,eax
    f23a:	je     f27c <__sprintf_chk@plt+0xb59c>
    f23c:	call   36f0 <__errno_location@plt>
    f241:	mov    rdi,rbp
    f244:	mov    r12d,DWORD PTR [rax]
    f247:	mov    rbx,rax
    f24a:	call   37d0 <fclose@plt>
    f24f:	test   r12d,r12d
    f252:	jne    f290 <__sprintf_chk@plt+0xb5b0>
    f254:	pop    rbx
    f255:	pop    rbp
    f256:	pop    r12
    f258:	ret    
    f259:	nop    DWORD PTR [rax+0x0]
    f260:	mov    rdi,rbp
    f263:	call   3a20 <fileno@plt>
    f268:	xor    esi,esi
    f26a:	mov    edx,0x1
    f26f:	mov    edi,eax
    f271:	call   38d0 <lseek@plt>
    f276:	cmp    rax,0xffffffffffffffff
    f27a:	jne    f230 <__sprintf_chk@plt+0xb550>
    f27c:	mov    rdi,rbp
    f27f:	pop    rbx
    f280:	pop    rbp
    f281:	pop    r12
    f283:	jmp    37d0 <fclose@plt>
    f288:	nop    DWORD PTR [rax+rax*1+0x0]
    f290:	mov    DWORD PTR [rbx],r12d
    f293:	mov    eax,0xffffffff
    f298:	jmp    f254 <__sprintf_chk@plt+0xb574>
    f29a:	nop    WORD PTR [rax+rax*1+0x0]
    f2a0:	endbr64 
    f2a4:	push   rbp
    f2a5:	mov    rbp,rdi
    f2a8:	test   rdi,rdi
    f2ab:	je     f2b6 <__sprintf_chk@plt+0xb5d6>
    f2ad:	call   3b00 <__freading@plt>
    f2b2:	test   eax,eax
    f2b4:	jne    f2c0 <__sprintf_chk@plt+0xb5e0>
    f2b6:	mov    rdi,rbp
    f2b9:	pop    rbp
    f2ba:	jmp    3a90 <fflush@plt>
    f2bf:	nop
    f2c0:	test   DWORD PTR [rbp+0x0],0x100
    f2c7:	je     f2b6 <__sprintf_chk@plt+0xb5d6>
    f2c9:	mov    rdi,rbp
    f2cc:	mov    edx,0x1
    f2d1:	xor    esi,esi
    f2d3:	call   f2f0 <__sprintf_chk@plt+0xb610>
    f2d8:	mov    rdi,rbp
    f2db:	pop    rbp
    f2dc:	jmp    3a90 <fflush@plt>
    f2e1:	cs nop WORD PTR [rax+rax*1+0x0]
    f2eb:	nop    DWORD PTR [rax+rax*1+0x0]
    f2f0:	endbr64 
    f2f4:	push   rbp
    f2f5:	mov    rbp,rdi
    f2f8:	sub    rsp,0x10
    f2fc:	mov    rax,QWORD PTR [rdi+0x8]
    f300:	cmp    QWORD PTR [rdi+0x10],rax
    f304:	je     f318 <__sprintf_chk@plt+0xb638>
    f306:	add    rsp,0x10
    f30a:	mov    rdi,rbp
    f30d:	pop    rbp
    f30e:	jmp    3bb0 <fseeko@plt>
    f313:	nop    DWORD PTR [rax+rax*1+0x0]
    f318:	mov    rax,QWORD PTR [rdi+0x20]
    f31c:	cmp    QWORD PTR [rdi+0x28],rax
    f320:	jne    f306 <__sprintf_chk@plt+0xb626>
    f322:	cmp    QWORD PTR [rdi+0x48],0x0
    f327:	jne    f306 <__sprintf_chk@plt+0xb626>
    f329:	mov    DWORD PTR [rsp+0xc],edx
    f32d:	mov    QWORD PTR [rsp],rsi
    f331:	call   3a20 <fileno@plt>
    f336:	mov    edx,DWORD PTR [rsp+0xc]
    f33a:	mov    rsi,QWORD PTR [rsp]
    f33e:	mov    edi,eax
    f340:	call   38d0 <lseek@plt>
    f345:	cmp    rax,0xffffffffffffffff
    f349:	je     f35e <__sprintf_chk@plt+0xb67e>
    f34b:	and    DWORD PTR [rbp+0x0],0xffffffef
    f34f:	mov    QWORD PTR [rbp+0x90],rax
    f356:	xor    eax,eax
    f358:	add    rsp,0x10
    f35c:	pop    rbp
    f35d:	ret    
    f35e:	or     eax,0xffffffff
    f361:	jmp    f358 <__sprintf_chk@plt+0xb678>
    f363:	cs nop WORD PTR [rax+rax*1+0x0]
    f36d:	nop    DWORD PTR [rax]
    f370:	endbr64 
    f374:	mov    rdx,QWORD PTR [rsi+0x8]
    f378:	xor    eax,eax
    f37a:	cmp    QWORD PTR [rdi+0x8],rdx
    f37e:	je     f388 <__sprintf_chk@plt+0xb6a8>
    f380:	ret    
    f381:	nop    DWORD PTR [rax+0x0]
    f388:	mov    rax,QWORD PTR [rsi]
    f38b:	cmp    QWORD PTR [rdi],rax
    f38e:	sete   al
    f391:	ret    
    f392:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    f39d:	nop    DWORD PTR [rax]
    f3a0:	endbr64 
    f3a4:	mov    rax,QWORD PTR [rdi+0x8]
    f3a8:	xor    edx,edx
    f3aa:	div    rsi
    f3ad:	mov    rax,rdx
    f3b0:	ret    
    f3b1:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    f3bc:	nop    DWORD PTR [rax+0x0]
    f3c0:	endbr64 
    f3c4:	mov    rax,QWORD PTR [rdi]
    f3c7:	xor    edx,edx
    f3c9:	div    rsi
    f3cc:	mov    rax,rdx
    f3cf:	ret    
    f3d0:	endbr64 
    f3d4:	mov    rax,QWORD PTR [rsi]
    f3d7:	cmp    QWORD PTR [rdi],rax
    f3da:	sete   al
    f3dd:	ret    
    f3de:	xchg   ax,ax
    f3e0:	endbr64 
    f3e4:	mov    rdx,QWORD PTR [rdi]
    f3e7:	mov    rax,QWORD PTR [rsi]
    f3ea:	mov    rax,QWORD PTR [rax+0x80]
    f3f1:	cmp    QWORD PTR [rdx+0x80],rax
    f3f8:	mov    edx,0xffffffff
    f3fd:	seta   al
    f400:	movzx  eax,al
    f403:	cmovb  eax,edx
    f406:	ret    
    f407:	nop    WORD PTR [rax+rax*1+0x0]
    f410:	push   r12
    f412:	mov    r12,rdi
    f415:	push   rbp
    f416:	lea    rbp,[rsi+0x78]
    f41a:	push   rbx
    f41b:	mov    rbx,rsi
    f41e:	mov    eax,DWORD PTR [rdi+0x48]
    f421:	cmp    QWORD PTR [rbx+0x58],0x0
    f426:	mov    rsi,QWORD PTR [rsi+0x30]
    f42a:	jne    f480 <__sprintf_chk@plt+0xb7a0>
    f42c:	test   al,0x1
    f42e:	je     f480 <__sprintf_chk@plt+0xb7a0>
    f430:	mov    rdx,rbp
    f433:	mov    edi,0x1
    f438:	call   3a30 <__xstat@plt>
    f43d:	test   eax,eax
    f43f:	je     f4ae <__sprintf_chk@plt+0xb7ce>
    f441:	call   36f0 <__errno_location@plt>
    f446:	mov    r12,rax
    f449:	mov    eax,DWORD PTR [rax]
    f44b:	cmp    eax,0x2
    f44e:	jne    f4e4 <__sprintf_chk@plt+0xb804>
    f454:	mov    rsi,QWORD PTR [rbx+0x30]
    f458:	mov    rdx,rbp
    f45b:	mov    edi,0x1
    f460:	call   3820 <__lxstat@plt>
    f465:	test   eax,eax
    f467:	jne    f4e0 <__sprintf_chk@plt+0xb800>
    f469:	mov    DWORD PTR [r12],0x0
    f471:	mov    eax,0xd
    f476:	pop    rbx
    f477:	pop    rbp
    f478:	pop    r12
    f47a:	ret    
    f47b:	nop    DWORD PTR [rax+rax*1+0x0]
    f480:	test   al,0x2
    f482:	jne    f430 <__sprintf_chk@plt+0xb750>
    f484:	test   dl,dl
    f486:	jne    f430 <__sprintf_chk@plt+0xb750>
    f488:	mov    r9d,DWORD PTR [r12+0x2c]
    f48d:	mov    rdx,rsi
    f490:	mov    rcx,rbp
    f493:	mov    edi,0x1
    f498:	mov    r8d,0x100
    f49e:	mov    esi,r9d
    f4a1:	call   3890 <__fxstatat@plt>
    f4a6:	test   eax,eax
    f4a8:	jne    f5a0 <__sprintf_chk@plt+0xb8c0>
    f4ae:	mov    eax,DWORD PTR [rbx+0x90]
    f4b4:	and    eax,0xf000
    f4b9:	cmp    eax,0x4000
    f4be:	je     f520 <__sprintf_chk@plt+0xb840>
    f4c0:	cmp    eax,0xa000
    f4c5:	je     f5b0 <__sprintf_chk@plt+0xb8d0>
    f4cb:	cmp    eax,0x8000
    f4d0:	sete   al
    f4d3:	movzx  eax,al
    f4d6:	lea    eax,[rax+rax*4+0x3]
    f4da:	pop    rbx
    f4db:	pop    rbp
    f4dc:	pop    r12
    f4de:	ret    
    f4df:	nop
    f4e0:	mov    eax,DWORD PTR [r12]
    f4e4:	lea    rdi,[rbp+0x8]
    f4e8:	mov    DWORD PTR [rbx+0x40],eax
    f4eb:	xor    eax,eax
    f4ed:	and    rdi,0xfffffffffffffff8
    f4f1:	mov    QWORD PTR [rbx+0x78],0x0
    f4f9:	mov    QWORD PTR [rbp+0x88],0x0
    f504:	sub    rbp,rdi
    f507:	lea    ecx,[rbp+0x90]
    f50d:	shr    ecx,0x3
    f510:	rep stos QWORD PTR es:[rdi],rax
    f513:	mov    eax,0xa
    f518:	pop    rbx
    f519:	pop    rbp
    f51a:	pop    r12
    f51c:	ret    
    f51d:	nop    DWORD PTR [rax]
    f520:	mov    rax,QWORD PTR [rbx+0x88]
    f527:	cmp    rax,0x1
    f52b:	jbe    f590 <__sprintf_chk@plt+0xb8b0>
    f52d:	cmp    QWORD PTR [rbx+0x58],0x0
    f532:	jle    f590 <__sprintf_chk@plt+0xb8b0>
    f534:	lea    rdx,[rax-0x2]
    f538:	test   BYTE PTR [r12+0x48],0x20
    f53e:	cmove  rax,rdx
    f542:	cmp    BYTE PTR [rbx+0x108],0x2e
    f549:	mov    QWORD PTR [rbx+0x68],rax
    f54d:	mov    eax,0x1
    f552:	jne    f4da <__sprintf_chk@plt+0xb7fa>
    f554:	cmp    BYTE PTR [rbx+0x109],0x0
    f55b:	je     f575 <__sprintf_chk@plt+0xb895>
    f55d:	mov    edx,DWORD PTR [rbx+0x108]
    f563:	and    edx,0xffff00
    f569:	cmp    edx,0x2e00
    f56f:	jne    f4da <__sprintf_chk@plt+0xb7fa>
    f575:	cmp    QWORD PTR [rbx+0x58],0x1
    f57a:	sbb    eax,eax
    f57c:	and    eax,0xfffffffc
    f57f:	add    eax,0x5
    f582:	jmp    f4da <__sprintf_chk@plt+0xb7fa>
    f587:	nop    WORD PTR [rax+rax*1+0x0]
    f590:	mov    rax,0xffffffffffffffff
    f597:	jmp    f542 <__sprintf_chk@plt+0xb862>
    f599:	nop    DWORD PTR [rax+0x0]
    f5a0:	call   36f0 <__errno_location@plt>
    f5a5:	mov    eax,DWORD PTR [rax]
    f5a7:	jmp    f4e4 <__sprintf_chk@plt+0xb804>
    f5ac:	nop    DWORD PTR [rax+0x0]
    f5b0:	mov    eax,0xc
    f5b5:	jmp    f4da <__sprintf_chk@plt+0xb7fa>
    f5ba:	nop    WORD PTR [rax+rax*1+0x0]
    f5c0:	push   r13
    f5c2:	push   r12
    f5c4:	mov    r12,rdx
    f5c7:	push   rbp
    f5c8:	mov    rbp,rdi
    f5cb:	push   rbx
    f5cc:	mov    rbx,rsi
    f5cf:	sub    rsp,0x8
    f5d3:	mov    r13,QWORD PTR [rdi+0x40]
    f5d7:	mov    rdi,QWORD PTR [rdi+0x10]
    f5db:	cmp    QWORD PTR [rbp+0x38],rdx
    f5df:	jae    f615 <__sprintf_chk@plt+0xb935>
    f5e1:	movabs rax,0x1fffffffffffffff
    f5eb:	lea    rsi,[rdx+0x28]
    f5ef:	mov    QWORD PTR [rbp+0x38],rsi
    f5f3:	cmp    rsi,rax
    f5f6:	ja     f691 <__sprintf_chk@plt+0xb9b1>
    f5fc:	shl    rsi,0x3
    f600:	call   3b20 <realloc@plt>
    f605:	mov    rdi,rax
    f608:	test   rax,rax
    f60b:	je     f68d <__sprintf_chk@plt+0xb9ad>
    f611:	mov    QWORD PTR [rbp+0x10],rax
    f615:	mov    rax,rdi
    f618:	test   rbx,rbx
    f61b:	je     f630 <__sprintf_chk@plt+0xb950>
    f61d:	nop    DWORD PTR [rax]
    f620:	mov    QWORD PTR [rax],rbx
    f623:	mov    rbx,QWORD PTR [rbx+0x10]
    f627:	add    rax,0x8
    f62b:	test   rbx,rbx
    f62e:	jne    f620 <__sprintf_chk@plt+0xb940>
    f630:	mov    rcx,r13
    f633:	mov    edx,0x8
    f638:	mov    rsi,r12
    f63b:	call   3750 <qsort@plt>
    f640:	mov    r8,QWORD PTR [rbp+0x10]
    f644:	mov    rcx,r12
    f647:	mov    rax,QWORD PTR [r8]
    f64a:	mov    rdx,r8
    f64d:	mov    rsi,rax
    f650:	sub    rcx,0x1
    f654:	jne    f663 <__sprintf_chk@plt+0xb983>
    f656:	jmp    f6b8 <__sprintf_chk@plt+0xb9d8>
    f658:	nop    DWORD PTR [rax+rax*1+0x0]
    f660:	mov    rsi,QWORD PTR [rdx]
    f663:	mov    rdi,QWORD PTR [rdx+0x8]
    f667:	add    rdx,0x8
    f66b:	mov    QWORD PTR [rsi+0x10],rdi
    f66f:	sub    rcx,0x1
    f673:	jne    f660 <__sprintf_chk@plt+0xb980>
    f675:	mov    rdx,QWORD PTR [r8+r12*8-0x8]
    f67a:	mov    QWORD PTR [rdx+0x10],0x0
    f682:	add    rsp,0x8
    f686:	pop    rbx
    f687:	pop    rbp
    f688:	pop    r12
    f68a:	pop    r13
    f68c:	ret    
    f68d:	mov    rdi,QWORD PTR [rbp+0x10]
    f691:	call   3680 <free@plt>
    f696:	mov    QWORD PTR [rbp+0x10],0x0
    f69e:	mov    rax,rbx
    f6a1:	mov    QWORD PTR [rbp+0x38],0x0
    f6a9:	add    rsp,0x8
    f6ad:	pop    rbx
    f6ae:	pop    rbp
    f6af:	pop    r12
    f6b1:	pop    r13
    f6b3:	ret    
    f6b4:	nop    DWORD PTR [rax+0x0]
    f6b8:	mov    rdx,rax
    f6bb:	jmp    f67a <__sprintf_chk@plt+0xb99a>
    f6bd:	nop    DWORD PTR [rax]
    f6c0:	push   r13
    f6c2:	mov    r13,rsi
    f6c5:	push   r12
    f6c7:	push   rbp
    f6c8:	mov    rbp,rdi
    f6cb:	lea    rdi,[rdx+0x110]
    f6d2:	push   rbx
    f6d3:	and    rdi,0xfffffffffffffff8
    f6d7:	mov    rbx,rdx
    f6da:	sub    rsp,0x8
    f6de:	call   3a70 <malloc@plt>
    f6e3:	mov    r12,rax
    f6e6:	test   rax,rax
    f6e9:	je     f746 <__sprintf_chk@plt+0xba66>
    f6eb:	lea    rdi,[rax+0x108]
    f6f2:	mov    rdx,rbx
    f6f5:	mov    rsi,r13
    f6f8:	call   3a00 <memcpy@plt>
    f6fd:	mov    rax,QWORD PTR [rbp+0x20]
    f701:	mov    BYTE PTR [r12+rbx*1+0x108],0x0
    f70a:	mov    QWORD PTR [r12+0x60],rbx
    f70f:	mov    QWORD PTR [r12+0x50],rbp
    f714:	mov    QWORD PTR [r12+0x38],rax
    f719:	mov    DWORD PTR [r12+0x40],0x0
    f722:	mov    QWORD PTR [r12+0x18],0x0
    f72b:	mov    DWORD PTR [r12+0x72],0x30000
    f734:	mov    QWORD PTR [r12+0x20],0x0
    f73d:	mov    QWORD PTR [r12+0x28],0x0
    f746:	add    rsp,0x8
    f74a:	mov    rax,r12
    f74d:	pop    rbx
    f74e:	pop    rbp
    f74f:	pop    r12
    f751:	pop    r13
    f753:	ret    
    f754:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    f75f:	nop
    f760:	push   r13
    f762:	push   r12
    f764:	push   rbp
    f765:	push   rbx
    f766:	sub    rsp,0x98
    f76d:	mov    r12,QWORD PTR [rdi+0x50]
    f771:	mov    rax,QWORD PTR fs:0x28
    f77a:	mov    QWORD PTR [rsp+0x88],rax
    f782:	xor    eax,eax
    f784:	test   BYTE PTR [r12+0x49],0x2
    f78a:	je     f808 <__sprintf_chk@plt+0xbb28>
    f78c:	mov    rbp,QWORD PTR [r12+0x50]
    f791:	mov    rbx,rdi
    f794:	mov    r13d,esi
    f797:	test   rbp,rbp
    f79a:	je     f7c0 <__sprintf_chk@plt+0xbae0>
    f79c:	mov    rax,QWORD PTR [rbx+0x78]
    f7a0:	mov    rsi,rsp
    f7a3:	mov    rdi,rbp
    f7a6:	mov    QWORD PTR [rsp],rax
    f7aa:	call   98c0 <__sprintf_chk@plt+0x5be0>
    f7af:	test   rax,rax
    f7b2:	je     f7ee <__sprintf_chk@plt+0xbb0e>
    f7b4:	mov    r12,QWORD PTR [rax+0x8]
    f7b8:	jmp    f80b <__sprintf_chk@plt+0xbb2b>
    f7ba:	nop    WORD PTR [rax+rax*1+0x0]
    f7c0:	mov    r8,QWORD PTR [rip+0x1c801]        # 2bfc8 <__sprintf_chk@plt+0x282e8>
    f7c7:	lea    rcx,[rip+0xfffffffffffffc02]        # f3d0 <__sprintf_chk@plt+0xb6f0>
    f7ce:	xor    esi,esi
    f7d0:	mov    edi,0xd
    f7d5:	lea    rdx,[rip+0xfffffffffffffbe4]        # f3c0 <__sprintf_chk@plt+0xb6e0>
    f7dc:	call   9b70 <__sprintf_chk@plt+0x5e90>
    f7e1:	mov    QWORD PTR [r12+0x50],rax
    f7e6:	mov    rbp,rax
    f7e9:	test   rax,rax
    f7ec:	jne    f79c <__sprintf_chk@plt+0xbabc>
    f7ee:	test   r13d,r13d
    f7f1:	js     f808 <__sprintf_chk@plt+0xbb28>
    f7f3:	lea    rsi,[rsp+0x10]
    f7f8:	mov    edi,r13d
    f7fb:	call   3c10 <fstatfs@plt>
    f800:	test   eax,eax
    f802:	je     f830 <__sprintf_chk@plt+0xbb50>
    f804:	nop    DWORD PTR [rax+0x0]
    f808:	xor    r12d,r12d
    f80b:	mov    rax,QWORD PTR [rsp+0x88]
    f813:	sub    rax,QWORD PTR fs:0x28
    f81c:	jne    f88a <__sprintf_chk@plt+0xbbaa>
    f81e:	add    rsp,0x98
    f825:	mov    rax,r12
    f828:	pop    rbx
    f829:	pop    rbp
    f82a:	pop    r12
    f82c:	pop    r13
    f82e:	ret    
    f82f:	nop
    f830:	mov    r12,QWORD PTR [rsp+0x10]
    f835:	test   rbp,rbp
    f838:	je     f80b <__sprintf_chk@plt+0xbb2b>
    f83a:	mov    edi,0x10
    f83f:	call   3a70 <malloc@plt>
    f844:	mov    r13,rax
    f847:	test   rax,rax
    f84a:	je     f80b <__sprintf_chk@plt+0xbb2b>
    f84c:	mov    rax,QWORD PTR [rbx+0x78]
    f850:	mov    QWORD PTR [r13+0x8],r12
    f854:	mov    rsi,r13
    f857:	mov    rdi,rbp
    f85a:	mov    QWORD PTR [r13+0x0],rax
    f85e:	call   a230 <__sprintf_chk@plt+0x6550>
    f863:	test   rax,rax
    f866:	je     f880 <__sprintf_chk@plt+0xbba0>
    f868:	cmp    r13,rax
    f86b:	jne    3d54 <__sprintf_chk@plt+0x74>
    f871:	mov    r12,QWORD PTR [rsp+0x10]
    f876:	jmp    f80b <__sprintf_chk@plt+0xbb2b>
    f878:	nop    DWORD PTR [rax+rax*1+0x0]
    f880:	mov    rdi,r13
    f883:	call   3680 <free@plt>
    f888:	jmp    f871 <__sprintf_chk@plt+0xbb91>
    f88a:	call   3840 <__stack_chk_fail@plt>
    f88f:	nop
    f890:	sub    rsp,0x8
    f894:	call   f760 <__sprintf_chk@plt+0xba80>
    f899:	cmp    rax,0x52654973
    f89f:	je     f900 <__sprintf_chk@plt+0xbc20>
    f8a1:	jle    f8d8 <__sprintf_chk@plt+0xbbf8>
    f8a3:	mov    r8d,0x2
    f8a9:	cmp    rax,0x58465342
    f8af:	je     f8cb <__sprintf_chk@plt+0xbbeb>
    f8b1:	mov    edx,0xff534d42
    f8b6:	xor    r8d,r8d
    f8b9:	cmp    rax,rdx
    f8bc:	je     f8cb <__sprintf_chk@plt+0xbbeb>
    f8be:	xor    r8d,r8d
    f8c1:	cmp    rax,0x5346414f
    f8c7:	setne  r8b
    f8cb:	mov    eax,r8d
    f8ce:	add    rsp,0x8
    f8d2:	ret    
    f8d3:	nop    DWORD PTR [rax+rax*1+0x0]
    f8d8:	xor    r8d,r8d
    f8db:	cmp    rax,0x6969
    f8e1:	je     f8cb <__sprintf_chk@plt+0xbbeb>
    f8e3:	cmp    rax,0x9fa0
    f8e9:	je     f8cb <__sprintf_chk@plt+0xbbeb>
    f8eb:	xor    r8d,r8d
    f8ee:	test   rax,rax
    f8f1:	setne  r8b
    f8f5:	add    rsp,0x8
    f8f9:	mov    eax,r8d
    f8fc:	ret    
    f8fd:	nop    DWORD PTR [rax]
    f900:	mov    r8d,0x2
    f906:	jmp    f8cb <__sprintf_chk@plt+0xbbeb>
    f908:	nop    DWORD PTR [rax+rax*1+0x0]
    f910:	push   rbp
    f911:	mov    ebp,esi
    f913:	push   rbx
    f914:	mov    rbx,rdi
    f917:	sub    rsp,0x8
    f91b:	mov    esi,DWORD PTR [rdi+0x2c]
    f91e:	cmp    esi,ebp
    f920:	jne    f92b <__sprintf_chk@plt+0xbc4b>
    f922:	cmp    esi,0xffffff9c
    f925:	jne    3d59 <__sprintf_chk@plt+0x79>
    f92b:	test   dl,dl
    f92d:	jne    f948 <__sprintf_chk@plt+0xbc68>
    f92f:	test   BYTE PTR [rbx+0x48],0x4
    f933:	jne    f939 <__sprintf_chk@plt+0xbc59>
    f935:	test   esi,esi
    f937:	jns    f970 <__sprintf_chk@plt+0xbc90>
    f939:	mov    DWORD PTR [rbx+0x2c],ebp
    f93c:	add    rsp,0x8
    f940:	pop    rbx
    f941:	pop    rbp
    f942:	ret    
    f943:	nop    DWORD PTR [rax+rax*1+0x0]
    f948:	lea    rdi,[rbx+0x60]
    f94c:	call   20fc0 <__sprintf_chk@plt+0x1d2e0>
    f951:	mov    edi,eax
    f953:	test   eax,eax
    f955:	js     f939 <__sprintf_chk@plt+0xbc59>
    f957:	call   3920 <close@plt>
    f95c:	mov    DWORD PTR [rbx+0x2c],ebp
    f95f:	add    rsp,0x8
    f963:	pop    rbx
    f964:	pop    rbp
    f965:	ret    
    f966:	cs nop WORD PTR [rax+rax*1+0x0]
    f970:	mov    edi,esi
    f972:	call   3920 <close@plt>
    f977:	jmp    f95c <__sprintf_chk@plt+0xbc7c>
    f979:	nop    DWORD PTR [rax+0x0]
    f980:	push   rbx
    f981:	mov    rbx,rdi
    f984:	add    rsi,0x100
    f98b:	mov    rdi,QWORD PTR [rdi+0x20]
    f98f:	add    rsi,QWORD PTR [rbx+0x30]
    f993:	jb     f9b0 <__sprintf_chk@plt+0xbcd0>
    f995:	mov    QWORD PTR [rbx+0x30],rsi
    f999:	call   3b20 <realloc@plt>
    f99e:	test   rax,rax
    f9a1:	je     f9cc <__sprintf_chk@plt+0xbcec>
    f9a3:	mov    QWORD PTR [rbx+0x20],rax
    f9a7:	mov    eax,0x1
    f9ac:	pop    rbx
    f9ad:	ret    
    f9ae:	xchg   ax,ax
    f9b0:	call   3680 <free@plt>
    f9b5:	mov    QWORD PTR [rbx+0x20],0x0
    f9bd:	call   36f0 <__errno_location@plt>
    f9c2:	mov    DWORD PTR [rax],0x24
    f9c8:	xor    eax,eax
    f9ca:	pop    rbx
    f9cb:	ret    
    f9cc:	mov    rdi,QWORD PTR [rbx+0x20]
    f9d0:	call   3680 <free@plt>
    f9d5:	mov    QWORD PTR [rbx+0x20],0x0
    f9dd:	xor    eax,eax
    f9df:	pop    rbx
    f9e0:	ret    
    f9e1:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    f9ec:	nop    DWORD PTR [rax+0x0]
    f9f0:	push   rbx
    f9f1:	mov    rbx,rdi
    f9f4:	test   DWORD PTR [rdi+0x48],0x102
    f9fb:	je     fa30 <__sprintf_chk@plt+0xbd50>
    f9fd:	mov    r8,QWORD PTR [rip+0x1c5c4]        # 2bfc8 <__sprintf_chk@plt+0x282e8>
    fa04:	xor    esi,esi
    fa06:	lea    rcx,[rip+0xfffffffffffff963]        # f370 <__sprintf_chk@plt+0xb690>
    fa0d:	lea    rdx,[rip+0xfffffffffffff98c]        # f3a0 <__sprintf_chk@plt+0xb6c0>
    fa14:	mov    edi,0x1f
    fa19:	call   9b70 <__sprintf_chk@plt+0x5e90>
    fa1e:	test   rax,rax
    fa21:	mov    QWORD PTR [rbx+0x58],rax
    fa25:	pop    rbx
    fa26:	setne  al
    fa29:	ret    
    fa2a:	nop    WORD PTR [rax+rax*1+0x0]
    fa30:	mov    edi,0x20
    fa35:	call   3a70 <malloc@plt>
    fa3a:	mov    QWORD PTR [rbx+0x58],rax
    fa3e:	mov    rdi,rax
    fa41:	test   rax,rax
    fa44:	je     fa52 <__sprintf_chk@plt+0xbd72>
    fa46:	call   20de0 <__sprintf_chk@plt+0x1d100>
    fa4b:	mov    eax,0x1
    fa50:	pop    rbx
    fa51:	ret    
    fa52:	xor    eax,eax
    fa54:	pop    rbx
    fa55:	ret    
    fa56:	cs nop WORD PTR [rax+rax*1+0x0]
    fa60:	push   r12
    fa62:	push   rbp
    fa63:	mov    rbp,rdi
    fa66:	push   rbx
    fa67:	mov    rbx,rsi
    fa6a:	test   DWORD PTR [rdi+0x48],0x102
    fa71:	je     fae0 <__sprintf_chk@plt+0xbe00>
    fa73:	mov    edi,0x18
    fa78:	call   3a70 <malloc@plt>
    fa7d:	mov    r12,rax
    fa80:	test   rax,rax
    fa83:	je     fb08 <__sprintf_chk@plt+0xbe28>
    fa89:	mov    rax,QWORD PTR [rbx+0x78]
    fa8d:	mov    rdi,QWORD PTR [rbp+0x58]
    fa91:	mov    rsi,r12
    fa94:	mov    QWORD PTR [r12+0x10],rbx
    fa99:	mov    QWORD PTR [r12],rax
    fa9d:	mov    rax,QWORD PTR [rbx+0x80]
    faa4:	mov    QWORD PTR [r12+0x8],rax
    faa9:	call   a230 <__sprintf_chk@plt+0x6550>
    faae:	mov    rbp,rax
    fab1:	cmp    r12,rax
    fab4:	je     fad3 <__sprintf_chk@plt+0xbdf3>
    fab6:	mov    rdi,r12
    fab9:	call   3680 <free@plt>
    fabe:	test   rbp,rbp
    fac1:	je     fb08 <__sprintf_chk@plt+0xbe28>
    fac3:	mov    rax,QWORD PTR [rbp+0x10]
    fac7:	mov    ecx,0x2
    facc:	mov    WORD PTR [rbx+0x70],cx
    fad0:	mov    QWORD PTR [rbx],rax
    fad3:	mov    eax,0x1
    fad8:	pop    rbx
    fad9:	pop    rbp
    fada:	pop    r12
    fadc:	ret    
    fadd:	nop    DWORD PTR [rax]
    fae0:	mov    rdi,QWORD PTR [rdi+0x58]
    fae4:	lea    rsi,[rsi+0x78]
    fae8:	call   20e00 <__sprintf_chk@plt+0x1d120>
    faed:	test   al,al
    faef:	je     fad3 <__sprintf_chk@plt+0xbdf3>
    faf1:	mov    edx,0x2
    faf6:	mov    QWORD PTR [rbx],rbx
    faf9:	mov    WORD PTR [rbx+0x70],dx
    fafd:	pop    rbx
    fafe:	pop    rbp
    faff:	pop    r12
    fb01:	ret    
    fb02:	nop    WORD PTR [rax+rax*1+0x0]
    fb08:	xor    eax,eax
    fb0a:	jmp    fad8 <__sprintf_chk@plt+0xbdf8>
    fb0c:	nop    DWORD PTR [rax+0x0]
    fb10:	sub    rsp,0x28
    fb14:	mov    rax,QWORD PTR fs:0x28
    fb1d:	mov    QWORD PTR [rsp+0x18],rax
    fb22:	xor    eax,eax
    fb24:	test   DWORD PTR [rdi+0x48],0x102
    fb2b:	jne    fb78 <__sprintf_chk@plt+0xbe98>
    fb2d:	mov    rax,QWORD PTR [rsi+0x8]
    fb31:	test   rax,rax
    fb34:	je     fb60 <__sprintf_chk@plt+0xbe80>
    fb36:	cmp    QWORD PTR [rax+0x58],0x0
    fb3b:	js     fb60 <__sprintf_chk@plt+0xbe80>
    fb3d:	mov    rdx,QWORD PTR [rdi+0x58]
    fb41:	cmp    QWORD PTR [rdx+0x10],0x0
    fb46:	je     3d5e <__sprintf_chk@plt+0x7e>
    fb4c:	mov    rcx,QWORD PTR [rsi+0x80]
    fb53:	cmp    QWORD PTR [rdx],rcx
    fb56:	je     fbb0 <__sprintf_chk@plt+0xbed0>
    fb58:	nop    DWORD PTR [rax+rax*1+0x0]
    fb60:	mov    rax,QWORD PTR [rsp+0x18]
    fb65:	sub    rax,QWORD PTR fs:0x28
    fb6e:	jne    fbce <__sprintf_chk@plt+0xbeee>
    fb70:	add    rsp,0x28
    fb74:	ret    
    fb75:	nop    DWORD PTR [rax]
    fb78:	mov    rax,QWORD PTR [rsi+0x78]
    fb7c:	mov    rdi,QWORD PTR [rdi+0x58]
    fb80:	mov    QWORD PTR [rsp],rax
    fb84:	mov    rax,QWORD PTR [rsi+0x80]
    fb8b:	mov    rsi,rsp
    fb8e:	mov    QWORD PTR [rsp+0x8],rax
    fb93:	call   a290 <__sprintf_chk@plt+0x65b0>
    fb98:	mov    rdi,rax
    fb9b:	test   rax,rax
    fb9e:	je     3d5e <__sprintf_chk@plt+0x7e>
    fba4:	call   3680 <free@plt>
    fba9:	jmp    fb60 <__sprintf_chk@plt+0xbe80>
    fbab:	nop    DWORD PTR [rax+rax*1+0x0]
    fbb0:	mov    rcx,QWORD PTR [rsi+0x78]
    fbb4:	cmp    QWORD PTR [rdx+0x8],rcx
    fbb8:	jne    fb60 <__sprintf_chk@plt+0xbe80>
    fbba:	mov    rcx,QWORD PTR [rax+0x78]
    fbbe:	mov    rax,QWORD PTR [rax+0x80]
    fbc5:	mov    QWORD PTR [rdx+0x8],rcx
    fbc9:	mov    QWORD PTR [rdx],rax
    fbcc:	jmp    fb60 <__sprintf_chk@plt+0xbe80>
    fbce:	call   3840 <__stack_chk_fail@plt>
    fbd3:	data16 cs nop WORD PTR [rax+rax*1+0x0]
    fbde:	xchg   ax,ax
    fbe0:	push   r12
    fbe2:	push   rbx
    fbe3:	mov    rbx,rdi
    fbe6:	sub    rsp,0x8
    fbea:	mov    eax,DWORD PTR [rdi+0x48]
    fbed:	mov    r12d,eax
    fbf0:	and    r12d,0x4
    fbf4:	jne    fc10 <__sprintf_chk@plt+0xbf30>
    fbf6:	test   ah,0x2
    fbf9:	je     fc58 <__sprintf_chk@plt+0xbf78>
    fbfb:	mov    edx,0x1
    fc00:	mov    esi,0xffffff9c
    fc05:	call   f910 <__sprintf_chk@plt+0xbc30>
    fc0a:	jmp    fc13 <__sprintf_chk@plt+0xbf33>
    fc0c:	nop    DWORD PTR [rax+0x0]
    fc10:	xor    r12d,r12d
    fc13:	add    rbx,0x60
    fc17:	jmp    fc2c <__sprintf_chk@plt+0xbf4c>
    fc19:	nop    DWORD PTR [rax+0x0]
    fc20:	mov    rdi,rbx
    fc23:	call   21000 <__sprintf_chk@plt+0x1d320>
    fc28:	test   eax,eax
    fc2a:	jns    fc48 <__sprintf_chk@plt+0xbf68>
    fc2c:	mov    rdi,rbx
    fc2f:	call   20fb0 <__sprintf_chk@plt+0x1d2d0>
    fc34:	test   al,al
    fc36:	je     fc20 <__sprintf_chk@plt+0xbf40>
    fc38:	add    rsp,0x8
    fc3c:	mov    eax,r12d
    fc3f:	pop    rbx
    fc40:	pop    r12
    fc42:	ret    
    fc43:	nop    DWORD PTR [rax+rax*1+0x0]
    fc48:	mov    edi,eax
    fc4a:	call   3920 <close@plt>
    fc4f:	jmp    fc2c <__sprintf_chk@plt+0xbf4c>
    fc51:	nop    DWORD PTR [rax+0x0]
    fc58:	mov    edi,DWORD PTR [rdi+0x28]
    fc5b:	xor    r12d,r12d
    fc5e:	call   3b10 <fchdir@plt>
    fc63:	test   eax,eax
    fc65:	setne  r12b
    fc69:	jmp    fc13 <__sprintf_chk@plt+0xbf33>
    fc6b:	nop    DWORD PTR [rax+rax*1+0x0]
    fc70:	push   r15
    fc72:	mov    r15,rdi
    fc75:	push   r14
    fc77:	mov    r14d,edx
    fc7a:	push   r13
    fc7c:	push   r12
    fc7e:	mov    r12,rsi
    fc81:	push   rbp
    fc82:	push   rbx
    fc83:	mov    rbx,rcx
    fc86:	sub    rsp,0xb8
    fc8d:	mov    ebp,DWORD PTR [rdi+0x48]
    fc90:	mov    rax,QWORD PTR fs:0x28
    fc99:	mov    QWORD PTR [rsp+0xa8],rax
    fca1:	xor    eax,eax
    fca3:	mov    edx,ebp
    fca5:	mov    ecx,ebp
    fca7:	and    edx,0x4
    fcaa:	test   rbx,rbx
    fcad:	je     fcbb <__sprintf_chk@plt+0xbfdb>
    fcaf:	movzx  eax,BYTE PTR [rbx]
    fcb2:	cmp    eax,0x2e
    fcb5:	je     fd40 <__sprintf_chk@plt+0xc060>
    fcbb:	test   edx,edx
    fcbd:	jne    fdf0 <__sprintf_chk@plt+0xc110>
    fcc3:	test   r14d,r14d
    fcc6:	js     ff57 <__sprintf_chk@plt+0xc277>
    fccc:	mov    BYTE PTR [rsp+0xf],0x0
    fcd1:	mov    r13d,r14d
    fcd4:	test   bpl,0x2
    fcd8:	jne    fdb0 <__sprintf_chk@plt+0xc0d0>
    fcde:	test   rbx,rbx
    fce1:	je     fcef <__sprintf_chk@plt+0xc00f>
    fce3:	movzx  eax,BYTE PTR [rbx]
    fce6:	cmp    eax,0x2e
    fce9:	je     fe40 <__sprintf_chk@plt+0xc160>
    fcef:	and    ebp,0x200
    fcf5:	jne    feb0 <__sprintf_chk@plt+0xc1d0>
    fcfb:	mov    edi,r13d
    fcfe:	call   3b10 <fchdir@plt>
    fd03:	mov    r12d,eax
    fd06:	test   r14d,r14d
    fd09:	js     fe22 <__sprintf_chk@plt+0xc142>
    fd0f:	nop
    fd10:	mov    rax,QWORD PTR [rsp+0xa8]
    fd18:	sub    rax,QWORD PTR fs:0x28
    fd21:	jne    ff3b <__sprintf_chk@plt+0xc25b>
    fd27:	add    rsp,0xb8
    fd2e:	mov    eax,r12d
    fd31:	pop    rbx
    fd32:	pop    rbp
    fd33:	pop    r12
    fd35:	pop    r13
    fd37:	pop    r14
    fd39:	pop    r15
    fd3b:	ret    
    fd3c:	nop    DWORD PTR [rax+0x0]
    fd40:	cmp    BYTE PTR [rbx+0x1],0x2e
    fd44:	jne    fcbb <__sprintf_chk@plt+0xbfdb>
    fd4a:	cmp    BYTE PTR [rbx+0x2],0x0
    fd4e:	jne    fcbb <__sprintf_chk@plt+0xbfdb>
    fd54:	test   edx,edx
    fd56:	jne    fdf0 <__sprintf_chk@plt+0xc110>
    fd5c:	test   r14d,r14d
    fd5f:	jns    ff40 <__sprintf_chk@plt+0xc260>
    fd65:	test   ebp,0x200
    fd6b:	jne    fe70 <__sprintf_chk@plt+0xc190>
    fd71:	mov    edx,ebp
    fd73:	mov    BYTE PTR [rsp+0xf],0x1
    fd78:	shl    edx,0xd
    fd7b:	and    edx,0x20000
    fd81:	or     edx,0x90900
    fd87:	mov    esi,edx
    fd89:	mov    rdi,rbx
    fd8c:	xor    eax,eax
    fd8e:	call   20e90 <__sprintf_chk@plt+0x1d1b0>
    fd93:	mov    r13d,eax
    fd96:	test   r13d,r13d
    fd99:	js     ff30 <__sprintf_chk@plt+0xc250>
    fd9f:	mov    ebp,DWORD PTR [r15+0x48]
    fda3:	test   bpl,0x2
    fda7:	je     fcde <__sprintf_chk@plt+0xbffe>
    fdad:	nop    DWORD PTR [rax]
    fdb0:	lea    rdx,[rsp+0x10]
    fdb5:	mov    esi,r13d
    fdb8:	mov    edi,0x1
    fdbd:	call   3ae0 <__fxstat@plt>
    fdc2:	test   eax,eax
    fdc4:	jne    fe13 <__sprintf_chk@plt+0xc133>
    fdc6:	mov    rax,QWORD PTR [rsp+0x10]
    fdcb:	cmp    QWORD PTR [r12+0x78],rax
    fdd0:	jne    fe08 <__sprintf_chk@plt+0xc128>
    fdd2:	mov    rax,QWORD PTR [rsp+0x18]
    fdd7:	cmp    QWORD PTR [r12+0x80],rax
    fddf:	jne    fe08 <__sprintf_chk@plt+0xc128>
    fde1:	mov    ebp,DWORD PTR [r15+0x48]
    fde5:	jmp    fcef <__sprintf_chk@plt+0xc00f>
    fdea:	nop    WORD PTR [rax+rax*1+0x0]
    fdf0:	and    ch,0x2
    fdf3:	je     fdfa <__sprintf_chk@plt+0xc11a>
    fdf5:	test   r14d,r14d
    fdf8:	jns    fe60 <__sprintf_chk@plt+0xc180>
    fdfa:	xor    r12d,r12d
    fdfd:	jmp    fd10 <__sprintf_chk@plt+0xc030>
    fe02:	nop    WORD PTR [rax+rax*1+0x0]
    fe08:	call   36f0 <__errno_location@plt>
    fe0d:	mov    DWORD PTR [rax],0x2
    fe13:	mov    r12d,0xffffffff
    fe19:	test   r14d,r14d
    fe1c:	jns    fd10 <__sprintf_chk@plt+0xc030>
    fe22:	call   36f0 <__errno_location@plt>
    fe27:	mov    edi,r13d
    fe2a:	mov    ebp,DWORD PTR [rax]
    fe2c:	mov    rbx,rax
    fe2f:	call   3920 <close@plt>
    fe34:	mov    DWORD PTR [rbx],ebp
    fe36:	jmp    fd10 <__sprintf_chk@plt+0xc030>
    fe3b:	nop    DWORD PTR [rax+rax*1+0x0]
    fe40:	cmp    BYTE PTR [rbx+0x1],0x2e
    fe44:	jne    fcef <__sprintf_chk@plt+0xc00f>
    fe4a:	cmp    BYTE PTR [rbx+0x2],0x0
    fe4e:	je     fdb0 <__sprintf_chk@plt+0xc0d0>
    fe54:	jmp    fcef <__sprintf_chk@plt+0xc00f>
    fe59:	nop    DWORD PTR [rax+0x0]
    fe60:	mov    edi,r14d
    fe63:	xor    r12d,r12d
    fe66:	call   3920 <close@plt>
    fe6b:	jmp    fd10 <__sprintf_chk@plt+0xc030>
    fe70:	lea    r13,[rdi+0x60]
    fe74:	mov    rdi,r13
    fe77:	call   20fb0 <__sprintf_chk@plt+0x1d2d0>
    fe7c:	mov    BYTE PTR [rsp+0xf],al
    fe80:	test   al,al
    fe82:	je     fed0 <__sprintf_chk@plt+0xc1f0>
    fe84:	mov    edx,ebp
    fe86:	shl    edx,0xd
    fe89:	and    edx,0x20000
    fe8f:	or     edx,0x90900
    fe95:	mov    edi,DWORD PTR [r15+0x2c]
    fe99:	mov    rsi,rbx
    fe9c:	xor    eax,eax
    fe9e:	call   21090 <__sprintf_chk@plt+0x1d3b0>
    fea3:	mov    r13d,eax
    fea6:	jmp    fd96 <__sprintf_chk@plt+0xc0b6>
    feab:	nop    DWORD PTR [rax+rax*1+0x0]
    feb0:	movzx  eax,BYTE PTR [rsp+0xf]
    feb5:	mov    esi,r13d
    feb8:	mov    rdi,r15
    febb:	xor    r12d,r12d
    febe:	xor    eax,0x1
    fec1:	movzx  edx,al
    fec4:	call   f910 <__sprintf_chk@plt+0xbc30>
    fec9:	jmp    fd10 <__sprintf_chk@plt+0xc030>
    fece:	xchg   ax,ax
    fed0:	mov    rdi,r13
    fed3:	call   21000 <__sprintf_chk@plt+0x1d320>
    fed8:	mov    r13d,eax
    fedb:	test   eax,eax
    fedd:	js     ff00 <__sprintf_chk@plt+0xc220>
    fedf:	mov    ebp,DWORD PTR [r15+0x48]
    fee3:	mov    BYTE PTR [rsp+0xf],0x1
    fee8:	mov    r14d,eax
    feeb:	test   bpl,0x2
    feef:	je     fcef <__sprintf_chk@plt+0xc00f>
    fef5:	jmp    fdb0 <__sprintf_chk@plt+0xc0d0>
    fefa:	nop    WORD PTR [rax+rax*1+0x0]
    ff00:	mov    BYTE PTR [rsp+0xf],0x1
    ff05:	mov    ecx,DWORD PTR [r15+0x48]
    ff09:	mov    edx,ecx
    ff0b:	shl    edx,0xd
    ff0e:	and    edx,0x20000
    ff14:	or     edx,0x90900
    ff1a:	and    ch,0x2
    ff1d:	jne    fe95 <__sprintf_chk@plt+0xc1b5>
    ff23:	jmp    fd87 <__sprintf_chk@plt+0xc0a7>
    ff28:	nop    DWORD PTR [rax+rax*1+0x0]
    ff30:	mov    r12d,0xffffffff
    ff36:	jmp    fd10 <__sprintf_chk@plt+0xc030>
    ff3b:	call   3840 <__stack_chk_fail@plt>
    ff40:	mov    BYTE PTR [rsp+0xf],0x1
    ff45:	mov    r13d,r14d
    ff48:	test   bpl,0x2
    ff4c:	je     fce6 <__sprintf_chk@plt+0xc006>
    ff52:	jmp    fdb0 <__sprintf_chk@plt+0xc0d0>
    ff57:	mov    BYTE PTR [rsp+0xf],0x0
    ff5c:	jmp    ff09 <__sprintf_chk@plt+0xc229>
    ff5e:	xchg   ax,ax
    ff60:	push   r15
    ff62:	push   r14
    ff64:	mov    r14,rdi
    ff67:	push   r13
    ff69:	push   r12
    ff6b:	push   rbp
    ff6c:	push   rbx
    ff6d:	sub    rsp,0x78
    ff71:	mov    rbp,QWORD PTR [rdi]
    ff74:	mov    DWORD PTR [rsp+0x58],esi
    ff78:	mov    rdi,QWORD PTR [rbp+0x18]
    ff7c:	mov    rax,QWORD PTR fs:0x28
    ff85:	mov    QWORD PTR [rsp+0x68],rax
    ff8a:	xor    eax,eax
    ff8c:	mov    QWORD PTR [rsp+0x50],rdi
    ff91:	test   rdi,rdi
    ff94:	je     103b0 <__sprintf_chk@plt+0xc6d0>
    ff9a:	call   39c0 <dirfd@plt>
    ff9f:	mov    DWORD PTR [rsp+0x64],eax
    ffa3:	test   eax,eax
    ffa5:	js     10893 <__sprintf_chk@plt+0xcbb3>
    ffab:	cmp    QWORD PTR [r14+0x40],0x0
    ffb0:	je     10790 <__sprintf_chk@plt+0xcab0>
    ffb6:	mov    QWORD PTR [rsp+0x40],0xffffffffffffffff
    ffbf:	mov    BYTE PTR [rsp+0x5f],0x1
    ffc4:	mov    edx,DWORD PTR [r14+0x48]
    ffc8:	mov    rcx,QWORD PTR [rbp+0x48]
    ffcc:	lea    rax,[rcx-0x1]
    ffd0:	mov    QWORD PTR [rsp+0x8],rcx
    ffd5:	mov    QWORD PTR [rsp+0x48],rax
    ffda:	mov    rax,QWORD PTR [rbp+0x38]
    ffde:	cmp    BYTE PTR [rax+rcx*1-0x1],0x2f
    ffe3:	je     fff3 <__sprintf_chk@plt+0xc313>
    ffe5:	lea    rax,[rcx+0x1]
    ffe9:	mov    QWORD PTR [rsp+0x48],rcx
    ffee:	mov    QWORD PTR [rsp+0x8],rax
    fff3:	mov    QWORD PTR [rsp+0x38],0x0
    fffc:	and    edx,0x4
    ffff:	je     10016 <__sprintf_chk@plt+0xc336>
   10001:	mov    rax,QWORD PTR [rsp+0x48]
   10006:	add    rax,QWORD PTR [r14+0x20]
   1000a:	lea    rcx,[rax+0x1]
   1000e:	mov    BYTE PTR [rax],0x2f
   10011:	mov    QWORD PTR [rsp+0x38],rcx
   10016:	mov    rdi,QWORD PTR [rbp+0x18]
   1001a:	mov    rax,QWORD PTR [rbp+0x58]
   1001e:	mov    r15,QWORD PTR [r14+0x30]
   10022:	sub    r15,QWORD PTR [rsp+0x8]
   10027:	add    rax,0x1
   1002b:	test   rdi,rdi
   1002e:	mov    QWORD PTR [rsp+0x18],rdi
   10033:	mov    QWORD PTR [rsp+0x30],rax
   10038:	je     1095b <__sprintf_chk@plt+0xcc7b>
   1003e:	call   36f0 <__errno_location@plt>
   10043:	xor    r13d,r13d
   10046:	mov    rdi,QWORD PTR [rsp+0x18]
   1004b:	xor    r12d,r12d
   1004e:	mov    QWORD PTR [rsp+0x20],rax
   10053:	mov    rbx,r14
   10056:	mov    BYTE PTR [rsp+0x5e],0x0
   1005b:	mov    BYTE PTR [rsp+0x5d],0x0
   10060:	mov    QWORD PTR [rsp+0x10],0x0
   10069:	mov    QWORD PTR [rsp+0x28],rbp
   1006e:	mov    QWORD PTR [rsp+0x18],r13
   10073:	jmp    100df <__sprintf_chk@plt+0xc3ff>
   10075:	nop    DWORD PTR [rax]
   10078:	mov    DWORD PTR [r14+0x90],0x0
   10083:	mov    eax,0x2
   10088:	mov    QWORD PTR [r14+0xa8],rax
   1008f:	cmp    QWORD PTR [rsp+0x18],0x0
   10095:	mov    QWORD PTR [r14+0x10],0x0
   1009d:	je     10320 <__sprintf_chk@plt+0xc640>
   100a3:	mov    rax,QWORD PTR [rsp+0x10]
   100a8:	mov    QWORD PTR [rax+0x10],r14
   100ac:	cmp    r12,0x2710
   100b3:	je     101d8 <__sprintf_chk@plt+0xc4f8>
   100b9:	add    r12,0x1
   100bd:	cmp    r12,QWORD PTR [rsp+0x40]
   100c2:	jae    10748 <__sprintf_chk@plt+0xca68>
   100c8:	mov    QWORD PTR [rsp+0x10],r14
   100cd:	mov    rax,QWORD PTR [rsp+0x28]
   100d2:	mov    rdi,QWORD PTR [rax+0x18]
   100d6:	test   rdi,rdi
   100d9:	je     10200 <__sprintf_chk@plt+0xc520>
   100df:	mov    rax,QWORD PTR [rsp+0x20]
   100e4:	mov    DWORD PTR [rax],0x0
   100ea:	call   3a40 <readdir@plt>
   100ef:	mov    r13,rax
   100f2:	test   rax,rax
   100f5:	je     105f0 <__sprintf_chk@plt+0xc910>
   100fb:	test   BYTE PTR [rbx+0x48],0x20
   100ff:	jne    1010b <__sprintf_chk@plt+0xc42b>
   10101:	cmp    BYTE PTR [rax+0x13],0x2e
   10105:	je     10330 <__sprintf_chk@plt+0xc650>
   1010b:	lea    r14,[r13+0x13]
   1010f:	mov    rdi,r14
   10112:	call   3810 <strlen@plt>
   10117:	mov    rsi,r14
   1011a:	mov    rdi,rbx
   1011d:	mov    rdx,rax
   10120:	mov    rbp,rax
   10123:	call   f6c0 <__sprintf_chk@plt+0xb9e0>
   10128:	mov    r14,rax
   1012b:	test   rax,rax
   1012e:	je     10510 <__sprintf_chk@plt+0xc830>
   10134:	cmp    r15,rbp
   10137:	jbe    102a0 <__sprintf_chk@plt+0xc5c0>
   1013d:	mov    rdx,rbp
   10140:	add    rdx,QWORD PTR [rsp+0x8]
   10145:	jb     10976 <__sprintf_chk@plt+0xcc96>
   1014b:	mov    rax,QWORD PTR [rsp+0x30]
   10150:	lea    rsi,[r14+0x108]
   10157:	mov    QWORD PTR [r14+0x58],rax
   1015b:	mov    rax,QWORD PTR [rbx]
   1015e:	mov    QWORD PTR [r14+0x48],rdx
   10162:	mov    QWORD PTR [r14+0x8],rax
   10166:	mov    rax,QWORD PTR [r13+0x0]
   1016a:	mov    QWORD PTR [r14+0x80],rax
   10171:	mov    eax,DWORD PTR [rbx+0x48]
   10174:	test   al,0x4
   10176:	jne    102f8 <__sprintf_chk@plt+0xc618>
   1017c:	mov    QWORD PTR [r14+0x30],rsi
   10180:	cmp    QWORD PTR [rbx+0x40],0x0
   10185:	je     10190 <__sprintf_chk@plt+0xc4b0>
   10187:	test   ah,0x4
   1018a:	je     10388 <__sprintf_chk@plt+0xc6a8>
   10190:	movzx  edx,BYTE PTR [r13+0x12]
   10195:	and    eax,0x18
   10198:	mov    esi,edx
   1019a:	sub    edx,0x1
   1019d:	cmp    eax,0x18
   101a0:	je     10350 <__sprintf_chk@plt+0xc670>
   101a6:	mov    ecx,0xb
   101ab:	mov    WORD PTR [r14+0x70],cx
   101b0:	cmp    edx,0xb
   101b3:	ja     10078 <__sprintf_chk@plt+0xc398>
   101b9:	mov    eax,0x2
   101be:	lea    rcx,[rip+0x14c9b]        # 24e60 <__sprintf_chk@plt+0x21180>
   101c5:	mov    edx,DWORD PTR [rcx+rdx*4]
   101c8:	mov    DWORD PTR [r14+0x90],edx
   101cf:	jmp    10088 <__sprintf_chk@plt+0xc3a8>
   101d4:	nop    DWORD PTR [rax+0x0]
   101d8:	cmp    QWORD PTR [rbx+0x40],0x0
   101dd:	je     104c0 <__sprintf_chk@plt+0xc7e0>
   101e3:	mov    rax,QWORD PTR [rsp+0x28]
   101e8:	mov    QWORD PTR [rsp+0x10],r14
   101ed:	mov    r12d,0x2711
   101f3:	mov    rdi,QWORD PTR [rax+0x18]
   101f7:	test   rdi,rdi
   101fa:	jne    100df <__sprintf_chk@plt+0xc3ff>
   10200:	cmp    BYTE PTR [rsp+0x5d],0x0
   10205:	mov    r13,QWORD PTR [rsp+0x18]
   1020a:	mov    rbp,rax
   1020d:	mov    r14,rbx
   10210:	je     10644 <__sprintf_chk@plt+0xc964>
   10216:	mov    rax,QWORD PTR [r14+0x8]
   1021a:	mov    rcx,QWORD PTR [r14+0x20]
   1021e:	test   rax,rax
   10221:	je     10250 <__sprintf_chk@plt+0xc570>
   10223:	nop    DWORD PTR [rax+rax*1+0x0]
   10228:	mov    rdx,QWORD PTR [rax+0x30]
   1022c:	lea    rsi,[rax+0x108]
   10233:	cmp    rdx,rsi
   10236:	je     10243 <__sprintf_chk@plt+0xc563>
   10238:	sub    rdx,QWORD PTR [rax+0x38]
   1023c:	add    rdx,rcx
   1023f:	mov    QWORD PTR [rax+0x30],rdx
   10243:	mov    QWORD PTR [rax+0x38],rcx
   10247:	mov    rax,QWORD PTR [rax+0x10]
   1024b:	test   rax,rax
   1024e:	jne    10228 <__sprintf_chk@plt+0xc548>
   10250:	cmp    QWORD PTR [r13+0x58],0x0
   10255:	mov    rax,r13
   10258:	jns    1026e <__sprintf_chk@plt+0xc58e>
   1025a:	jmp    10644 <__sprintf_chk@plt+0xc964>
   1025f:	nop
   10260:	mov    rax,rdx
   10263:	cmp    QWORD PTR [rax+0x58],0x0
   10268:	js     10644 <__sprintf_chk@plt+0xc964>
   1026e:	mov    rdx,QWORD PTR [rax+0x30]
   10272:	lea    rsi,[rax+0x108]
   10279:	cmp    rdx,rsi
   1027c:	je     10289 <__sprintf_chk@plt+0xc5a9>
   1027e:	sub    rdx,QWORD PTR [rax+0x38]
   10282:	add    rdx,rcx
   10285:	mov    QWORD PTR [rax+0x30],rdx
   10289:	mov    rdx,QWORD PTR [rax+0x10]
   1028d:	mov    QWORD PTR [rax+0x38],rcx
   10291:	test   rdx,rdx
   10294:	jne    10260 <__sprintf_chk@plt+0xc580>
   10296:	mov    rax,QWORD PTR [rax+0x8]
   1029a:	jmp    10263 <__sprintf_chk@plt+0xc583>
   1029c:	nop    DWORD PTR [rax+0x0]
   102a0:	mov    rax,QWORD PTR [rsp+0x48]
   102a5:	mov    rdi,rbx
   102a8:	mov    r15,QWORD PTR [rbx+0x20]
   102ac:	lea    rsi,[rax+rbp*1+0x2]
   102b1:	call   f980 <__sprintf_chk@plt+0xbca0>
   102b6:	test   al,al
   102b8:	je     10510 <__sprintf_chk@plt+0xc830>
   102be:	mov    rsi,QWORD PTR [rbx+0x20]
   102c2:	cmp    rsi,r15
   102c5:	je     103a0 <__sprintf_chk@plt+0xc6c0>
   102cb:	add    rsi,QWORD PTR [rsp+0x8]
   102d0:	test   BYTE PTR [rbx+0x48],0x4
   102d4:	cmove  rsi,QWORD PTR [rsp+0x38]
   102da:	mov    QWORD PTR [rsp+0x38],rsi
   102df:	mov    r15,QWORD PTR [rbx+0x30]
   102e3:	sub    r15,QWORD PTR [rsp+0x8]
   102e8:	mov    BYTE PTR [rsp+0x5d],al
   102ec:	jmp    1013d <__sprintf_chk@plt+0xc45d>
   102f1:	nop    DWORD PTR [rax+0x0]
   102f8:	mov    rax,QWORD PTR [r14+0x38]
   102fc:	mov    rdi,QWORD PTR [rsp+0x38]
   10301:	mov    QWORD PTR [r14+0x30],rax
   10305:	mov    rax,QWORD PTR [r14+0x60]
   10309:	lea    rdx,[rax+0x1]
   1030d:	call   3b80 <memmove@plt>
   10312:	mov    eax,DWORD PTR [rbx+0x48]
   10315:	jmp    10180 <__sprintf_chk@plt+0xc4a0>
   1031a:	nop    WORD PTR [rax+rax*1+0x0]
   10320:	mov    QWORD PTR [rsp+0x18],r14
   10325:	jmp    100ac <__sprintf_chk@plt+0xc3cc>
   1032a:	nop    WORD PTR [rax+rax*1+0x0]
   10330:	cmp    BYTE PTR [rax+0x14],0x0
   10334:	je     100cd <__sprintf_chk@plt+0xc3ed>
   1033a:	cmp    WORD PTR [rax+0x14],0x2e
   1033f:	jne    1010b <__sprintf_chk@plt+0xc42b>
   10345:	jmp    100cd <__sprintf_chk@plt+0xc3ed>
   1034a:	nop    WORD PTR [rax+rax*1+0x0]
   10350:	and    esi,0xfb
   10356:	je     101a6 <__sprintf_chk@plt+0xc4c6>
   1035c:	mov    eax,0xb
   10361:	mov    WORD PTR [r14+0x70],ax
   10366:	mov    eax,0x1
   1036b:	cmp    edx,0xb
   1036e:	jbe    101be <__sprintf_chk@plt+0xc4de>
   10374:	mov    DWORD PTR [r14+0x90],0x0
   1037f:	jmp    10088 <__sprintf_chk@plt+0xc3a8>
   10384:	nop    DWORD PTR [rax+0x0]
   10388:	xor    edx,edx
   1038a:	mov    rsi,r14
   1038d:	mov    rdi,rbx
   10390:	call   f410 <__sprintf_chk@plt+0xb730>
   10395:	mov    WORD PTR [r14+0x70],ax
   1039a:	jmp    1008f <__sprintf_chk@plt+0xc3af>
   1039f:	nop
   103a0:	movzx  eax,BYTE PTR [rsp+0x5d]
   103a5:	jmp    102df <__sprintf_chk@plt+0xc5ff>
   103aa:	nop    WORD PTR [rax+rax*1+0x0]
   103b0:	mov    eax,DWORD PTR [r14+0x48]
   103b4:	mov    edx,eax
   103b6:	and    edx,0x10
   103b9:	je     103c8 <__sprintf_chk@plt+0xc6e8>
   103bb:	mov    edx,0x20000
   103c0:	test   al,0x1
   103c2:	jne    105b0 <__sprintf_chk@plt+0xc8d0>
   103c8:	and    eax,0x204
   103cd:	mov    rsi,QWORD PTR [rbp+0x30]
   103d1:	mov    edi,0xffffff9c
   103d6:	cmp    eax,0x200
   103db:	jne    103e1 <__sprintf_chk@plt+0xc701>
   103dd:	mov    edi,DWORD PTR [r14+0x2c]
   103e1:	lea    rcx,[rsp+0x64]
   103e6:	call   21110 <__sprintf_chk@plt+0x1d430>
   103eb:	mov    QWORD PTR [rbp+0x18],rax
   103ef:	mov    r13,rax
   103f2:	test   rax,rax
   103f5:	je     10910 <__sprintf_chk@plt+0xcc30>
   103fb:	cmp    WORD PTR [rbp+0x70],0xb
   10400:	je     107fe <__sprintf_chk@plt+0xcb1e>
   10406:	test   BYTE PTR [r14+0x49],0x1
   1040b:	jne    107c0 <__sprintf_chk@plt+0xcae0>
   10411:	cmp    QWORD PTR [r14+0x40],0x1
   10416:	sbb    rax,rax
   10419:	and    eax,0x186a1
   1041e:	sub    rax,0x1
   10422:	cmp    DWORD PTR [rsp+0x58],0x2
   10427:	mov    QWORD PTR [rsp+0x40],rax
   1042c:	je     107b0 <__sprintf_chk@plt+0xcad0>
   10432:	mov    eax,DWORD PTR [r14+0x48]
   10436:	mov    edi,DWORD PTR [rsp+0x64]
   1043a:	and    eax,0x38
   1043d:	cmp    eax,0x18
   10440:	je     105c2 <__sprintf_chk@plt+0xc8e2>
   10446:	cmp    DWORD PTR [rsp+0x58],0x3
   1044b:	mov    r12d,0x1
   10451:	sete   bl
   10454:	test   BYTE PTR [r14+0x49],0x2
   10459:	jne    108d7 <__sprintf_chk@plt+0xcbf7>
   1045f:	test   edi,edi
   10461:	jns    10877 <__sprintf_chk@plt+0xcb97>
   10467:	test   bl,bl
   10469:	je     1047a <__sprintf_chk@plt+0xc79a>
   1046b:	test   r12b,r12b
   1046e:	je     1047a <__sprintf_chk@plt+0xc79a>
   10470:	call   36f0 <__errno_location@plt>
   10475:	mov    eax,DWORD PTR [rax]
   10477:	mov    DWORD PTR [rbp+0x40],eax
   1047a:	or     WORD PTR [rbp+0x72],0x1
   1047f:	mov    rdi,QWORD PTR [rbp+0x18]
   10483:	call   3930 <closedir@plt>
   10488:	mov    edx,DWORD PTR [r14+0x48]
   1048c:	mov    QWORD PTR [rbp+0x18],0x0
   10494:	test   dh,0x2
   10497:	je     104a5 <__sprintf_chk@plt+0xc7c5>
   10499:	mov    edi,DWORD PTR [rsp+0x64]
   1049d:	test   edi,edi
   1049f:	jns    108c9 <__sprintf_chk@plt+0xcbe9>
   104a5:	mov    QWORD PTR [rbp+0x18],0x0
   104ad:	mov    BYTE PTR [rsp+0x5f],0x0
   104b2:	jmp    ffc8 <__sprintf_chk@plt+0xc2e8>
   104b7:	nop    WORD PTR [rax+rax*1+0x0]
   104c0:	mov    esi,DWORD PTR [rsp+0x64]
   104c4:	mov    rdi,QWORD PTR [rsp+0x28]
   104c9:	call   f760 <__sprintf_chk@plt+0xba80>
   104ce:	cmp    rax,0x1021994
   104d4:	je     104f8 <__sprintf_chk@plt+0xc818>
   104d6:	mov    ecx,0xff534d42
   104db:	cmp    rax,rcx
   104de:	je     104f8 <__sprintf_chk@plt+0xc818>
   104e0:	cmp    rax,0x6969
   104e6:	je     104f8 <__sprintf_chk@plt+0xc818>
   104e8:	mov    BYTE PTR [rsp+0x5e],0x1
   104ed:	jmp    101e3 <__sprintf_chk@plt+0xc503>
   104f2:	nop    WORD PTR [rax+rax*1+0x0]
   104f8:	mov    QWORD PTR [rsp+0x10],r14
   104fd:	mov    r12d,0x2711
   10503:	mov    BYTE PTR [rsp+0x5e],0x0
   10508:	jmp    100cd <__sprintf_chk@plt+0xc3ed>
   1050d:	nop    DWORD PTR [rax]
   10510:	mov    r15,r14
   10513:	mov    r13,QWORD PTR [rsp+0x18]
   10518:	mov    rax,QWORD PTR [rsp+0x20]
   1051d:	mov    r14,rbx
   10520:	mov    rdi,r15
   10523:	mov    rbp,QWORD PTR [rsp+0x28]
   10528:	mov    ebx,DWORD PTR [rax]
   1052a:	call   3680 <free@plt>
   1052f:	test   r13,r13
   10532:	je     1055b <__sprintf_chk@plt+0xc87b>
   10534:	nop    DWORD PTR [rax+0x0]
   10538:	mov    r12,r13
   1053b:	mov    r13,QWORD PTR [r13+0x10]
   1053f:	mov    rdi,QWORD PTR [r12+0x18]
   10544:	test   rdi,rdi
   10547:	je     1054e <__sprintf_chk@plt+0xc86e>
   10549:	call   3930 <closedir@plt>
   1054e:	mov    rdi,r12
   10551:	call   3680 <free@plt>
   10556:	test   r13,r13
   10559:	jne    10538 <__sprintf_chk@plt+0xc858>
   1055b:	mov    rdi,QWORD PTR [rbp+0x18]
   1055f:	xor    r13d,r13d
   10562:	call   3930 <closedir@plt>
   10567:	mov    rax,QWORD PTR [rsp+0x20]
   1056c:	mov    r9d,0x7
   10572:	mov    QWORD PTR [rbp+0x18],0x0
   1057a:	mov    WORD PTR [rbp+0x70],r9w
   1057f:	or     DWORD PTR [r14+0x48],0x2000
   10587:	mov    DWORD PTR [rax],ebx
   10589:	mov    rax,QWORD PTR [rsp+0x68]
   1058e:	sub    rax,QWORD PTR fs:0x28
   10597:	jne    109f2 <__sprintf_chk@plt+0xcd12>
   1059d:	add    rsp,0x78
   105a1:	mov    rax,r13
   105a4:	pop    rbx
   105a5:	pop    rbp
   105a6:	pop    r12
   105a8:	pop    r13
   105aa:	pop    r14
   105ac:	pop    r15
   105ae:	ret    
   105af:	nop
   105b0:	xor    edx,edx
   105b2:	cmp    QWORD PTR [rbp+0x58],0x0
   105b7:	setne  dl
   105ba:	shl    edx,0x11
   105bd:	jmp    103c8 <__sprintf_chk@plt+0xc6e8>
   105c2:	cmp    QWORD PTR [rbp+0x88],0x2
   105ca:	jne    10446 <__sprintf_chk@plt+0xc766>
   105d0:	mov    esi,edi
   105d2:	mov    rdi,rbp
   105d5:	call   f890 <__sprintf_chk@plt+0xbbb0>
   105da:	test   eax,eax
   105dc:	jne    108f3 <__sprintf_chk@plt+0xcc13>
   105e2:	mov    edi,DWORD PTR [rsp+0x64]
   105e6:	jmp    10446 <__sprintf_chk@plt+0xc766>
   105eb:	nop    DWORD PTR [rax+rax*1+0x0]
   105f0:	mov    rax,QWORD PTR [rsp+0x20]
   105f5:	mov    rbp,QWORD PTR [rsp+0x28]
   105fa:	mov    r14,rbx
   105fd:	mov    r13,QWORD PTR [rsp+0x18]
   10602:	mov    eax,DWORD PTR [rax]
   10604:	test   eax,eax
   10606:	je     10623 <__sprintf_chk@plt+0xc943>
   10608:	mov    DWORD PTR [rbp+0x40],eax
   1060b:	mov    rax,QWORD PTR [rsp+0x50]
   10610:	or     rax,r12
   10613:	cmp    rax,0x1
   10617:	sbb    eax,eax
   10619:	and    eax,0xfffffffd
   1061c:	add    eax,0x7
   1061f:	mov    WORD PTR [rbp+0x70],ax
   10623:	mov    rdi,QWORD PTR [rbp+0x18]
   10627:	test   rdi,rdi
   1062a:	je     10639 <__sprintf_chk@plt+0xc959>
   1062c:	call   3930 <closedir@plt>
   10631:	mov    QWORD PTR [rbp+0x18],0x0
   10639:	cmp    BYTE PTR [rsp+0x5d],0x0
   1063e:	jne    10216 <__sprintf_chk@plt+0xc536>
   10644:	test   BYTE PTR [r14+0x48],0x4
   10649:	je     10669 <__sprintf_chk@plt+0xc989>
   1064b:	mov    rax,QWORD PTR [rsp+0x8]
   10650:	cmp    QWORD PTR [r14+0x30],rax
   10654:	je     1065b <__sprintf_chk@plt+0xc97b>
   10656:	test   r12,r12
   10659:	jne    10661 <__sprintf_chk@plt+0xc981>
   1065b:	sub    QWORD PTR [rsp+0x38],0x1
   10661:	mov    rax,QWORD PTR [rsp+0x38]
   10666:	mov    BYTE PTR [rax],0x0
   10669:	cmp    QWORD PTR [rsp+0x50],0x0
   1066f:	jne    10700 <__sprintf_chk@plt+0xca20>
   10675:	cmp    BYTE PTR [rsp+0x5f],0x0
   1067a:	je     10700 <__sprintf_chk@plt+0xca20>
   10680:	cmp    DWORD PTR [rsp+0x58],0x1
   10685:	je     106e0 <__sprintf_chk@plt+0xca00>
   10687:	test   r12,r12
   1068a:	je     106e0 <__sprintf_chk@plt+0xca00>
   1068c:	cmp    BYTE PTR [rsp+0x5e],0x0
   10691:	jne    10760 <__sprintf_chk@plt+0xca80>
   10697:	cmp    QWORD PTR [r14+0x40],0x0
   1069c:	je     10589 <__sprintf_chk@plt+0xc8a9>
   106a2:	cmp    r12,0x1
   106a6:	je     10589 <__sprintf_chk@plt+0xc8a9>
   106ac:	mov    rsi,r13
   106af:	mov    rdx,r12
   106b2:	mov    rdi,r14
   106b5:	call   f5c0 <__sprintf_chk@plt+0xb8e0>
   106ba:	mov    r13,rax
   106bd:	jmp    10589 <__sprintf_chk@plt+0xc8a9>
   106c2:	cmp    QWORD PTR [rsp+0x50],0x0
   106c8:	sete   al
   106cb:	xor    r13d,r13d
   106ce:	test   BYTE PTR [rsp+0x5f],al
   106d2:	je     10705 <__sprintf_chk@plt+0xca25>
   106d4:	mov    BYTE PTR [rsp+0x5e],0x0
   106d9:	xor    r12d,r12d
   106dc:	nop    DWORD PTR [rax+0x0]
   106e0:	cmp    QWORD PTR [rbp+0x58],0x0
   106e5:	jne    10814 <__sprintf_chk@plt+0xcb34>
   106eb:	mov    rdi,r14
   106ee:	call   fbe0 <__sprintf_chk@plt+0xbf00>
   106f3:	test   eax,eax
   106f5:	jne    10834 <__sprintf_chk@plt+0xcb54>
   106fb:	nop    DWORD PTR [rax+rax*1+0x0]
   10700:	test   r12,r12
   10703:	jne    1068c <__sprintf_chk@plt+0xc9ac>
   10705:	cmp    DWORD PTR [rsp+0x58],0x3
   1070a:	je     10935 <__sprintf_chk@plt+0xcc55>
   10710:	test   r13,r13
   10713:	je     1073a <__sprintf_chk@plt+0xca5a>
   10715:	nop    DWORD PTR [rax]
   10718:	mov    rbp,r13
   1071b:	mov    r13,QWORD PTR [r13+0x10]
   1071f:	mov    rdi,QWORD PTR [rbp+0x18]
   10723:	test   rdi,rdi
   10726:	je     1072d <__sprintf_chk@plt+0xca4d>
   10728:	call   3930 <closedir@plt>
   1072d:	mov    rdi,rbp
   10730:	call   3680 <free@plt>
   10735:	test   r13,r13
   10738:	jne    10718 <__sprintf_chk@plt+0xca38>
   1073a:	xor    r13d,r13d
   1073d:	jmp    10589 <__sprintf_chk@plt+0xc8a9>
   10742:	nop    WORD PTR [rax+rax*1+0x0]
   10748:	mov    rbp,QWORD PTR [rsp+0x28]
   1074d:	mov    r13,QWORD PTR [rsp+0x18]
   10752:	mov    r14,rbx
   10755:	jmp    10639 <__sprintf_chk@plt+0xc959>
   1075a:	nop    WORD PTR [rax+rax*1+0x0]
   10760:	lea    rax,[rip+0xffffffffffffec79]        # f3e0 <__sprintf_chk@plt+0xb700>
   10767:	mov    rsi,r13
   1076a:	mov    rdx,r12
   1076d:	mov    rdi,r14
   10770:	mov    QWORD PTR [r14+0x40],rax
   10774:	call   f5c0 <__sprintf_chk@plt+0xb8e0>
   10779:	mov    QWORD PTR [r14+0x40],0x0
   10781:	mov    r13,rax
   10784:	jmp    10589 <__sprintf_chk@plt+0xc8a9>
   10789:	nop    DWORD PTR [rax+0x0]
   10790:	mov    QWORD PTR [rsp+0x40],0x186a0
   10799:	mov    edx,DWORD PTR [r14+0x48]
   1079d:	mov    BYTE PTR [rsp+0x5f],0x1
   107a2:	jmp    ffc8 <__sprintf_chk@plt+0xc2e8>
   107a7:	nop    WORD PTR [rax+rax*1+0x0]
   107b0:	mov    BYTE PTR [rsp+0x5f],0x0
   107b5:	mov    edx,DWORD PTR [r14+0x48]
   107b9:	jmp    ffc8 <__sprintf_chk@plt+0xc2e8>
   107be:	xchg   ax,ax
   107c0:	mov    rsi,rbp
   107c3:	mov    rdi,r14
   107c6:	call   fb10 <__sprintf_chk@plt+0xbe30>
   107cb:	xor    edx,edx
   107cd:	mov    rsi,rbp
   107d0:	mov    rdi,r14
   107d3:	call   f410 <__sprintf_chk@plt+0xb730>
   107d8:	mov    rsi,rbp
   107db:	mov    rdi,r14
   107de:	call   fa60 <__sprintf_chk@plt+0xbd80>
   107e3:	test   al,al
   107e5:	jne    10411 <__sprintf_chk@plt+0xc731>
   107eb:	call   36f0 <__errno_location@plt>
   107f0:	xor    r13d,r13d
   107f3:	mov    DWORD PTR [rax],0xc
   107f9:	jmp    10589 <__sprintf_chk@plt+0xc8a9>
   107fe:	xor    edx,edx
   10800:	mov    rsi,rbp
   10803:	mov    rdi,r14
   10806:	call   f410 <__sprintf_chk@plt+0xb730>
   1080b:	mov    WORD PTR [rbp+0x70],ax
   1080f:	jmp    10411 <__sprintf_chk@plt+0xc731>
   10814:	mov    rsi,QWORD PTR [rbp+0x8]
   10818:	lea    rcx,[rip+0x1462c]        # 24e4b <__sprintf_chk@plt+0x2116b>
   1081f:	mov    edx,0xffffffff
   10824:	mov    rdi,r14
   10827:	call   fc70 <__sprintf_chk@plt+0xbf90>
   1082c:	test   eax,eax
   1082e:	je     10700 <__sprintf_chk@plt+0xca20>
   10834:	mov    edi,0x7
   10839:	mov    WORD PTR [rbp+0x70],di
   1083d:	or     DWORD PTR [r14+0x48],0x2000
   10845:	test   r13,r13
   10848:	je     1073a <__sprintf_chk@plt+0xca5a>
   1084e:	xchg   ax,ax
   10850:	mov    rbp,r13
   10853:	mov    r13,QWORD PTR [r13+0x10]
   10857:	mov    rdi,QWORD PTR [rbp+0x18]
   1085b:	test   rdi,rdi
   1085e:	je     10865 <__sprintf_chk@plt+0xcb85>
   10860:	call   3930 <closedir@plt>
   10865:	mov    rdi,rbp
   10868:	call   3680 <free@plt>
   1086d:	test   r13,r13
   10870:	jne    10850 <__sprintf_chk@plt+0xcb70>
   10872:	jmp    1073a <__sprintf_chk@plt+0xca5a>
   10877:	xor    ecx,ecx
   10879:	mov    edx,edi
   1087b:	mov    rsi,rbp
   1087e:	mov    rdi,r14
   10881:	call   fc70 <__sprintf_chk@plt+0xbf90>
   10886:	test   eax,eax
   10888:	jne    10467 <__sprintf_chk@plt+0xc787>
   1088e:	jmp    ffbf <__sprintf_chk@plt+0xc2df>
   10893:	mov    rdi,QWORD PTR [rbp+0x18]
   10897:	call   3930 <closedir@plt>
   1089c:	cmp    DWORD PTR [rsp+0x58],0x3
   108a1:	mov    QWORD PTR [rbp+0x18],0x0
   108a9:	jne    1073a <__sprintf_chk@plt+0xca5a>
   108af:	mov    r11d,0x4
   108b5:	mov    WORD PTR [rbp+0x70],r11w
   108ba:	call   36f0 <__errno_location@plt>
   108bf:	mov    eax,DWORD PTR [rax]
   108c1:	mov    DWORD PTR [rbp+0x40],eax
   108c4:	jmp    1073a <__sprintf_chk@plt+0xca5a>
   108c9:	call   3920 <close@plt>
   108ce:	mov    edx,DWORD PTR [r14+0x48]
   108d2:	jmp    104a5 <__sprintf_chk@plt+0xc7c5>
   108d7:	mov    edx,0x3
   108dc:	mov    esi,0x406
   108e1:	xor    eax,eax
   108e3:	call   212b0 <__sprintf_chk@plt+0x1d5d0>
   108e8:	mov    DWORD PTR [rsp+0x64],eax
   108ec:	mov    edi,eax
   108ee:	jmp    1045f <__sprintf_chk@plt+0xc77f>
   108f3:	cmp    DWORD PTR [rsp+0x58],0x3
   108f8:	jne    107b0 <__sprintf_chk@plt+0xcad0>
   108fe:	mov    edi,DWORD PTR [rsp+0x64]
   10902:	xor    r12d,r12d
   10905:	mov    ebx,0x1
   1090a:	jmp    10454 <__sprintf_chk@plt+0xc774>
   1090f:	nop
   10910:	cmp    DWORD PTR [rsp+0x58],0x3
   10915:	jne    1073a <__sprintf_chk@plt+0xca5a>
   1091b:	mov    r10d,0x4
   10921:	mov    WORD PTR [rbp+0x70],r10w
   10926:	call   36f0 <__errno_location@plt>
   1092b:	mov    eax,DWORD PTR [rax]
   1092d:	mov    DWORD PTR [rbp+0x40],eax
   10930:	jmp    10589 <__sprintf_chk@plt+0xc8a9>
   10935:	movzx  eax,WORD PTR [rbp+0x70]
   10939:	cmp    ax,0x4
   1093d:	je     10710 <__sprintf_chk@plt+0xca30>
   10943:	cmp    ax,0x7
   10947:	je     10710 <__sprintf_chk@plt+0xca30>
   1094d:	mov    esi,0x6
   10952:	mov    WORD PTR [rbp+0x70],si
   10956:	jmp    10710 <__sprintf_chk@plt+0xca30>
   1095b:	test   BYTE PTR [r14+0x48],0x4
   10960:	je     106c2 <__sprintf_chk@plt+0xc9e2>
   10966:	mov    BYTE PTR [rsp+0x5e],0x0
   1096b:	xor    r13d,r13d
   1096e:	xor    r12d,r12d
   10971:	jmp    1065b <__sprintf_chk@plt+0xc97b>
   10976:	mov    r15,r14
   10979:	mov    r13,QWORD PTR [rsp+0x18]
   1097e:	mov    rbp,QWORD PTR [rsp+0x28]
   10983:	mov    r14,rbx
   10986:	mov    rdi,r15
   10989:	call   3680 <free@plt>
   1098e:	test   r13,r13
   10991:	je     109bb <__sprintf_chk@plt+0xccdb>
   10993:	nop    DWORD PTR [rax+rax*1+0x0]
   10998:	mov    r12,r13
   1099b:	mov    r13,QWORD PTR [r13+0x10]
   1099f:	mov    rdi,QWORD PTR [r12+0x18]
   109a4:	test   rdi,rdi
   109a7:	je     109ae <__sprintf_chk@plt+0xccce>
   109a9:	call   3930 <closedir@plt>
   109ae:	mov    rdi,r12
   109b1:	call   3680 <free@plt>
   109b6:	test   r13,r13
   109b9:	jne    10998 <__sprintf_chk@plt+0xccb8>
   109bb:	mov    rdi,QWORD PTR [rbp+0x18]
   109bf:	xor    r13d,r13d
   109c2:	call   3930 <closedir@plt>
   109c7:	mov    rax,QWORD PTR [rsp+0x20]
   109cc:	mov    r8d,0x7
   109d2:	mov    QWORD PTR [rbp+0x18],0x0
   109da:	mov    WORD PTR [rbp+0x70],r8w
   109df:	or     DWORD PTR [r14+0x48],0x2000
   109e7:	mov    DWORD PTR [rax],0x24
   109ed:	jmp    10589 <__sprintf_chk@plt+0xc8a9>
   109f2:	call   3840 <__stack_chk_fail@plt>
   109f7:	nop    WORD PTR [rax+rax*1+0x0]
   10a00:	endbr64 
   10a04:	push   r15
   10a06:	push   r14
   10a08:	push   r13
   10a0a:	push   r12
   10a0c:	push   rbp
   10a0d:	push   rbx
   10a0e:	sub    rsp,0x28
   10a12:	test   esi,0xfffff000
   10a18:	jne    10c20 <__sprintf_chk@plt+0xcf40>
   10a1e:	mov    eax,esi
   10a20:	mov    ebp,esi
   10a22:	and    eax,0x204
   10a27:	cmp    eax,0x204
   10a2c:	je     10c20 <__sprintf_chk@plt+0xcf40>
   10a32:	test   sil,0x12
   10a36:	je     10c20 <__sprintf_chk@plt+0xcf40>
   10a3c:	mov    rbx,rdi
   10a3f:	mov    esi,0x80
   10a44:	mov    edi,0x1
   10a49:	mov    r14,rdx
   10a4c:	call   3990 <calloc@plt>
   10a51:	mov    r12,rax
   10a54:	test   rax,rax
   10a57:	je     10c2e <__sprintf_chk@plt+0xcf4e>
   10a5d:	mov    QWORD PTR [rax+0x40],r14
   10a61:	mov    eax,ebp
   10a63:	mov    rdi,QWORD PTR [rbx]
   10a66:	mov    DWORD PTR [r12+0x2c],0xffffff9c
   10a6f:	and    ah,0xfd
   10a72:	or     eax,0x4
   10a75:	test   bpl,0x2
   10a79:	cmove  eax,ebp
   10a7c:	mov    DWORD PTR [r12+0x48],eax
   10a81:	test   rdi,rdi
   10a84:	je     10d80 <__sprintf_chk@plt+0xd0a0>
   10a8a:	mov    r15,rbx
   10a8d:	xor    r13d,r13d
   10a90:	call   3810 <strlen@plt>
   10a95:	cmp    r13,rax
   10a98:	cmovb  r13,rax
   10a9c:	mov    rdi,QWORD PTR [r15+0x8]
   10aa0:	add    r15,0x8
   10aa4:	test   rdi,rdi
   10aa7:	jne    10a90 <__sprintf_chk@plt+0xcdb0>
   10aa9:	lea    rsi,[r13+0x1]
   10aad:	mov    eax,0x1000
   10ab2:	cmp    rsi,0x1000
   10ab9:	cmovb  rsi,rax
   10abd:	mov    rdi,r12
   10ac0:	call   f980 <__sprintf_chk@plt+0xbca0>
   10ac5:	mov    BYTE PTR [rsp+0x16],al
   10ac9:	test   al,al
   10acb:	je     10c76 <__sprintf_chk@plt+0xcf96>
   10ad1:	mov    r15,QWORD PTR [rbx]
   10ad4:	test   r15,r15
   10ad7:	je     10d70 <__sprintf_chk@plt+0xd090>
   10add:	xor    edx,edx
   10adf:	lea    rsi,[rip+0x13b7b]        # 24661 <__sprintf_chk@plt+0x20981>
   10ae6:	mov    rdi,r12
   10ae9:	call   f6c0 <__sprintf_chk@plt+0xb9e0>
   10aee:	mov    QWORD PTR [rsp+0x8],rax
   10af3:	test   rax,rax
   10af6:	je     10c6c <__sprintf_chk@plt+0xcf8c>
   10afc:	mov    QWORD PTR [rax+0x58],0xffffffffffffffff
   10b04:	mov    r15,QWORD PTR [rbx]
   10b07:	mov    QWORD PTR [rax+0x68],0xffffffffffffffff
   10b0f:	test   r14,r14
   10b12:	je     10b23 <__sprintf_chk@plt+0xce43>
   10b14:	mov    eax,DWORD PTR [r12+0x48]
   10b19:	shr    eax,0xa
   10b1c:	and    eax,0x1
   10b1f:	mov    BYTE PTR [rsp+0x16],al
   10b23:	test   r15,r15
   10b26:	je     10de3 <__sprintf_chk@plt+0xd103>
   10b2c:	mov    QWORD PTR [rsp+0x18],0x0
   10b35:	shr    ebp,0xb
   10b38:	xor    r13d,r13d
   10b3b:	xor    ebp,0x1
   10b3e:	mov    eax,ebp
   10b40:	xor    ebp,ebp
   10b42:	and    eax,0x1
   10b45:	mov    BYTE PTR [rsp+0x17],al
   10b49:	jmp    10bcd <__sprintf_chk@plt+0xceed>
   10b4e:	xchg   ax,ax
   10b50:	mov    rsi,r15
   10b53:	mov    rdi,r12
   10b56:	call   f6c0 <__sprintf_chk@plt+0xb9e0>
   10b5b:	mov    r15,rax
   10b5e:	test   rax,rax
   10b61:	je     10c5d <__sprintf_chk@plt+0xcf7d>
   10b67:	mov    QWORD PTR [rax+0x58],0x0
   10b6f:	mov    rax,QWORD PTR [rsp+0x8]
   10b74:	mov    QWORD PTR [r15+0x8],rax
   10b78:	lea    rax,[r15+0x108]
   10b7f:	mov    QWORD PTR [r15+0x30],rax
   10b83:	test   rbp,rbp
   10b86:	je     10c88 <__sprintf_chk@plt+0xcfa8>
   10b8c:	cmp    BYTE PTR [rsp+0x16],0x0
   10b91:	je     10c88 <__sprintf_chk@plt+0xcfa8>
   10b97:	mov    QWORD PTR [r15+0xa8],0x2
   10ba2:	mov    esi,0xb
   10ba7:	mov    WORD PTR [r15+0x70],si
   10bac:	test   r14,r14
   10baf:	je     10d50 <__sprintf_chk@plt+0xd070>
   10bb5:	mov    QWORD PTR [r15+0x10],rbp
   10bb9:	mov    rbp,r15
   10bbc:	add    r13,0x1
   10bc0:	mov    r15,QWORD PTR [rbx+r13*8]
   10bc4:	test   r15,r15
   10bc7:	je     10cd0 <__sprintf_chk@plt+0xcff0>
   10bcd:	mov    rdi,r15
   10bd0:	call   3810 <strlen@plt>
   10bd5:	mov    rdx,rax
   10bd8:	cmp    rax,0x2
   10bdc:	jbe    10b50 <__sprintf_chk@plt+0xce70>
   10be2:	cmp    BYTE PTR [rsp+0x17],0x0
   10be7:	je     10b50 <__sprintf_chk@plt+0xce70>
   10bed:	cmp    BYTE PTR [r15+rax*1-0x1],0x2f
   10bf3:	jne    10b50 <__sprintf_chk@plt+0xce70>
   10bf9:	nop    DWORD PTR [rax+0x0]
   10c00:	cmp    BYTE PTR [r15+rdx*1-0x2],0x2f
   10c06:	jne    10b50 <__sprintf_chk@plt+0xce70>
   10c0c:	sub    rdx,0x1
   10c10:	cmp    rdx,0x1
   10c14:	jne    10c00 <__sprintf_chk@plt+0xcf20>
   10c16:	jmp    10b50 <__sprintf_chk@plt+0xce70>
   10c1b:	nop    DWORD PTR [rax+rax*1+0x0]
   10c20:	call   36f0 <__errno_location@plt>
   10c25:	xor    r12d,r12d
   10c28:	mov    DWORD PTR [rax],0x16
   10c2e:	add    rsp,0x28
   10c32:	mov    rax,r12
   10c35:	pop    rbx
   10c36:	pop    rbp
   10c37:	pop    r12
   10c39:	pop    r13
   10c3b:	pop    r14
   10c3d:	pop    r15
   10c3f:	ret    
   10c40:	mov    r13,rbp
   10c43:	mov    rbp,QWORD PTR [rbp+0x10]
   10c47:	mov    rdi,QWORD PTR [r13+0x18]
   10c4b:	test   rdi,rdi
   10c4e:	je     10c55 <__sprintf_chk@plt+0xcf75>
   10c50:	call   3930 <closedir@plt>
   10c55:	mov    rdi,r13
   10c58:	call   3680 <free@plt>
   10c5d:	test   rbp,rbp
   10c60:	jne    10c40 <__sprintf_chk@plt+0xcf60>
   10c62:	mov    rdi,QWORD PTR [rsp+0x8]
   10c67:	call   3680 <free@plt>
   10c6c:	mov    rdi,QWORD PTR [r12+0x20]
   10c71:	call   3680 <free@plt>
   10c76:	mov    rdi,r12
   10c79:	xor    r12d,r12d
   10c7c:	call   3680 <free@plt>
   10c81:	jmp    10c2e <__sprintf_chk@plt+0xcf4e>
   10c83:	nop    DWORD PTR [rax+rax*1+0x0]
   10c88:	xor    edx,edx
   10c8a:	mov    rsi,r15
   10c8d:	mov    rdi,r12
   10c90:	call   f410 <__sprintf_chk@plt+0xb730>
   10c95:	mov    WORD PTR [r15+0x70],ax
   10c9a:	test   r14,r14
   10c9d:	jne    10bb5 <__sprintf_chk@plt+0xced5>
   10ca3:	mov    QWORD PTR [r15+0x10],0x0
   10cab:	test   rbp,rbp
   10cae:	jne    10d58 <__sprintf_chk@plt+0xd078>
   10cb4:	add    r13,0x1
   10cb8:	mov    QWORD PTR [rsp+0x18],r15
   10cbd:	mov    rbp,r15
   10cc0:	mov    r15,QWORD PTR [rbx+r13*8]
   10cc4:	test   r15,r15
   10cc7:	jne    10bcd <__sprintf_chk@plt+0xceed>
   10ccd:	nop    DWORD PTR [rax]
   10cd0:	test   r14,r14
   10cd3:	je     10cec <__sprintf_chk@plt+0xd00c>
   10cd5:	cmp    r13,0x1
   10cd9:	jbe    10cec <__sprintf_chk@plt+0xd00c>
   10cdb:	mov    rsi,rbp
   10cde:	mov    rdx,r13
   10ce1:	mov    rdi,r12
   10ce4:	call   f5c0 <__sprintf_chk@plt+0xb8e0>
   10ce9:	mov    rbp,rax
   10cec:	xor    edx,edx
   10cee:	lea    rsi,[rip+0x1396c]        # 24661 <__sprintf_chk@plt+0x20981>
   10cf5:	mov    rdi,r12
   10cf8:	call   f6c0 <__sprintf_chk@plt+0xb9e0>
   10cfd:	mov    QWORD PTR [r12],rax
   10d01:	test   rax,rax
   10d04:	je     10c5d <__sprintf_chk@plt+0xcf7d>
   10d0a:	mov    ecx,0x9
   10d0f:	mov    QWORD PTR [rax+0x10],rbp
   10d13:	mov    rdi,r12
   10d16:	mov    WORD PTR [rax+0x70],cx
   10d1a:	mov    QWORD PTR [rax+0x58],0x1
   10d22:	call   f9f0 <__sprintf_chk@plt+0xbd10>
   10d27:	test   al,al
   10d29:	je     10c5d <__sprintf_chk@plt+0xcf7d>
   10d2f:	mov    eax,DWORD PTR [r12+0x48]
   10d34:	test   eax,0x204
   10d39:	je     10d90 <__sprintf_chk@plt+0xd0b0>
   10d3b:	lea    rdi,[r12+0x60]
   10d40:	mov    esi,0xffffffff
   10d45:	call   20f90 <__sprintf_chk@plt+0x1d2b0>
   10d4a:	jmp    10c2e <__sprintf_chk@plt+0xcf4e>
   10d4f:	nop
   10d50:	mov    QWORD PTR [r15+0x10],0x0
   10d58:	mov    rax,QWORD PTR [rsp+0x18]
   10d5d:	mov    QWORD PTR [rsp+0x18],r15
   10d62:	mov    QWORD PTR [rax+0x10],r15
   10d66:	jmp    10bbc <__sprintf_chk@plt+0xcedc>
   10d6b:	nop    DWORD PTR [rax+rax*1+0x0]
   10d70:	mov    QWORD PTR [rsp+0x8],0x0
   10d79:	jmp    10b0f <__sprintf_chk@plt+0xce2f>
   10d7e:	xchg   ax,ax
   10d80:	mov    esi,0x1000
   10d85:	jmp    10abd <__sprintf_chk@plt+0xcddd>
   10d8a:	nop    WORD PTR [rax+rax*1+0x0]
   10d90:	mov    edx,eax
   10d92:	shl    edx,0xd
   10d95:	and    edx,0x20000
   10d9b:	or     edx,0x90900
   10da1:	test   ah,0x2
   10da4:	je     10dd1 <__sprintf_chk@plt+0xd0f1>
   10da6:	mov    edi,DWORD PTR [r12+0x2c]
   10dab:	lea    rsi,[rip+0x1409a]        # 24e4c <__sprintf_chk@plt+0x2116c>
   10db2:	xor    eax,eax
   10db4:	call   21090 <__sprintf_chk@plt+0x1d3b0>
   10db9:	mov    DWORD PTR [r12+0x28],eax
   10dbe:	test   eax,eax
   10dc0:	jns    10d3b <__sprintf_chk@plt+0xd05b>
   10dc6:	or     DWORD PTR [r12+0x48],0x4
   10dcc:	jmp    10d3b <__sprintf_chk@plt+0xd05b>
   10dd1:	mov    esi,edx
   10dd3:	lea    rdi,[rip+0x14072]        # 24e4c <__sprintf_chk@plt+0x2116c>
   10dda:	xor    eax,eax
   10ddc:	call   20e90 <__sprintf_chk@plt+0x1d1b0>
   10de1:	jmp    10db9 <__sprintf_chk@plt+0xd0d9>
   10de3:	xor    edx,edx
   10de5:	lea    rsi,[rip+0x13875]        # 24661 <__sprintf_chk@plt+0x20981>
   10dec:	mov    rdi,r12
   10def:	call   f6c0 <__sprintf_chk@plt+0xb9e0>
   10df4:	mov    QWORD PTR [r12],rax
   10df8:	test   rax,rax
   10dfb:	je     10c62 <__sprintf_chk@plt+0xcf82>
   10e01:	mov    edx,0x9
   10e06:	mov    QWORD PTR [rax+0x10],0x0
   10e0e:	mov    rdi,r12
   10e11:	mov    WORD PTR [rax+0x70],dx
   10e15:	mov    QWORD PTR [rax+0x58],0x1
   10e1d:	call   f9f0 <__sprintf_chk@plt+0xbd10>
   10e22:	test   al,al
   10e24:	jne    10d2f <__sprintf_chk@plt+0xd04f>
   10e2a:	jmp    10c62 <__sprintf_chk@plt+0xcf82>
   10e2f:	nop
   10e30:	endbr64 
   10e34:	push   r13
   10e36:	push   r12
   10e38:	mov    r12,rdi
   10e3b:	push   rbp
   10e3c:	push   rbx
   10e3d:	sub    rsp,0x8
   10e41:	mov    rdi,QWORD PTR [rdi]
   10e44:	test   rdi,rdi
   10e47:	je     10e88 <__sprintf_chk@plt+0xd1a8>
   10e49:	cmp    QWORD PTR [rdi+0x58],0x0
   10e4e:	jns    10e67 <__sprintf_chk@plt+0xd187>
   10e50:	jmp    11000 <__sprintf_chk@plt+0xd320>
   10e55:	nop    DWORD PTR [rax]
   10e58:	call   3680 <free@plt>
   10e5d:	cmp    QWORD PTR [rbp+0x58],0x0
   10e62:	js     10e80 <__sprintf_chk@plt+0xd1a0>
   10e64:	mov    rdi,rbp
   10e67:	mov    rbp,QWORD PTR [rdi+0x10]
   10e6b:	test   rbp,rbp
   10e6e:	jne    10e58 <__sprintf_chk@plt+0xd178>
   10e70:	mov    rbp,QWORD PTR [rdi+0x8]
   10e74:	call   3680 <free@plt>
   10e79:	cmp    QWORD PTR [rbp+0x58],0x0
   10e7e:	jns    10e64 <__sprintf_chk@plt+0xd184>
   10e80:	mov    rdi,rbp
   10e83:	call   3680 <free@plt>
   10e88:	mov    rbx,QWORD PTR [r12+0x8]
   10e8d:	test   rbx,rbx
   10e90:	je     10eba <__sprintf_chk@plt+0xd1da>
   10e92:	nop    WORD PTR [rax+rax*1+0x0]
   10e98:	mov    rbp,rbx
   10e9b:	mov    rbx,QWORD PTR [rbx+0x10]
   10e9f:	mov    rdi,QWORD PTR [rbp+0x18]
   10ea3:	test   rdi,rdi
   10ea6:	je     10ead <__sprintf_chk@plt+0xd1cd>
   10ea8:	call   3930 <closedir@plt>
   10ead:	mov    rdi,rbp
   10eb0:	call   3680 <free@plt>
   10eb5:	test   rbx,rbx
   10eb8:	jne    10e98 <__sprintf_chk@plt+0xd1b8>
   10eba:	mov    rdi,QWORD PTR [r12+0x10]
   10ebf:	call   3680 <free@plt>
   10ec4:	mov    rdi,QWORD PTR [r12+0x20]
   10ec9:	call   3680 <free@plt>
   10ece:	mov    eax,DWORD PTR [r12+0x48]
   10ed3:	test   ah,0x2
   10ed6:	je     10f70 <__sprintf_chk@plt+0xd290>
   10edc:	mov    edi,DWORD PTR [r12+0x2c]
   10ee1:	test   edi,edi
   10ee3:	jns    10fa8 <__sprintf_chk@plt+0xd2c8>
   10ee9:	xor    r13d,r13d
   10eec:	lea    rbx,[r12+0x60]
   10ef1:	jmp    10f04 <__sprintf_chk@plt+0xd224>
   10ef3:	nop    DWORD PTR [rax+rax*1+0x0]
   10ef8:	mov    rdi,rbx
   10efb:	call   21000 <__sprintf_chk@plt+0x1d320>
   10f00:	test   eax,eax
   10f02:	jns    10f60 <__sprintf_chk@plt+0xd280>
   10f04:	mov    rdi,rbx
   10f07:	call   20fb0 <__sprintf_chk@plt+0x1d2d0>
   10f0c:	test   al,al
   10f0e:	je     10ef8 <__sprintf_chk@plt+0xd218>
   10f10:	mov    rdi,QWORD PTR [r12+0x50]
   10f15:	test   rdi,rdi
   10f18:	je     10f1f <__sprintf_chk@plt+0xd23f>
   10f1a:	call   9d20 <__sprintf_chk@plt+0x6040>
   10f1f:	mov    rdi,QWORD PTR [r12+0x58]
   10f24:	test   DWORD PTR [r12+0x48],0x102
   10f2d:	je     10fc8 <__sprintf_chk@plt+0xd2e8>
   10f33:	test   rdi,rdi
   10f36:	je     10f3d <__sprintf_chk@plt+0xd25d>
   10f38:	call   9d20 <__sprintf_chk@plt+0x6040>
   10f3d:	mov    rdi,r12
   10f40:	call   3680 <free@plt>
   10f45:	test   r13d,r13d
   10f48:	jne    11008 <__sprintf_chk@plt+0xd328>
   10f4e:	add    rsp,0x8
   10f52:	mov    eax,r13d
   10f55:	pop    rbx
   10f56:	pop    rbp
   10f57:	pop    r12
   10f59:	pop    r13
   10f5b:	ret    
   10f5c:	nop    DWORD PTR [rax+0x0]
   10f60:	mov    edi,eax
   10f62:	call   3920 <close@plt>
   10f67:	jmp    10f04 <__sprintf_chk@plt+0xd224>
   10f69:	nop    DWORD PTR [rax+0x0]
   10f70:	test   al,0x4
   10f72:	jne    10ee9 <__sprintf_chk@plt+0xd209>
   10f78:	mov    edi,DWORD PTR [r12+0x28]
   10f7d:	call   3b10 <fchdir@plt>
   10f82:	test   eax,eax
   10f84:	jne    10fd2 <__sprintf_chk@plt+0xd2f2>
   10f86:	mov    edi,DWORD PTR [r12+0x28]
   10f8b:	call   3920 <close@plt>
   10f90:	test   eax,eax
   10f92:	je     10ee9 <__sprintf_chk@plt+0xd209>
   10f98:	call   36f0 <__errno_location@plt>
   10f9d:	mov    rbx,rax
   10fa0:	jmp    10ff8 <__sprintf_chk@plt+0xd318>
   10fa2:	nop    WORD PTR [rax+rax*1+0x0]
   10fa8:	call   3920 <close@plt>
   10fad:	test   eax,eax
   10faf:	je     10ee9 <__sprintf_chk@plt+0xd209>
   10fb5:	call   36f0 <__errno_location@plt>
   10fba:	mov    r13d,DWORD PTR [rax]
   10fbd:	jmp    10eec <__sprintf_chk@plt+0xd20c>
   10fc2:	nop    WORD PTR [rax+rax*1+0x0]
   10fc8:	call   3680 <free@plt>
   10fcd:	jmp    10f3d <__sprintf_chk@plt+0xd25d>
   10fd2:	call   36f0 <__errno_location@plt>
   10fd7:	mov    edi,DWORD PTR [r12+0x28]
   10fdc:	mov    r13d,DWORD PTR [rax]
   10fdf:	mov    rbx,rax
   10fe2:	call   3920 <close@plt>
   10fe7:	test   r13d,r13d
   10fea:	jne    10eec <__sprintf_chk@plt+0xd20c>
   10ff0:	test   eax,eax
   10ff2:	je     10eec <__sprintf_chk@plt+0xd20c>
   10ff8:	mov    r13d,DWORD PTR [rbx]
   10ffb:	jmp    10eec <__sprintf_chk@plt+0xd20c>
   11000:	mov    rbp,rdi
   11003:	jmp    10e80 <__sprintf_chk@plt+0xd1a0>
   11008:	call   36f0 <__errno_location@plt>
   1100d:	mov    DWORD PTR [rax],r13d
   11010:	mov    r13d,0xffffffff
   11016:	jmp    10f4e <__sprintf_chk@plt+0xd26e>
   1101b:	nop    DWORD PTR [rax+rax*1+0x0]
   11020:	endbr64 
   11024:	push   r14
   11026:	push   r13
   11028:	push   r12
   1102a:	push   rbp
   1102b:	push   rbx
   1102c:	mov    r12,QWORD PTR [rdi]
   1102f:	test   r12,r12
   11032:	je     11148 <__sprintf_chk@plt+0xd468>
   11038:	mov    edx,DWORD PTR [rdi+0x48]
   1103b:	mov    rbp,rdi
   1103e:	test   dh,0x20
   11041:	jne    11148 <__sprintf_chk@plt+0xd468>
   11047:	movzx  eax,WORD PTR [r12+0x74]
   1104d:	mov    ebx,0x3
   11052:	mov    WORD PTR [r12+0x74],bx
   11058:	cmp    ax,0x1
   1105c:	je     11420 <__sprintf_chk@plt+0xd740>
   11062:	movzx  ecx,WORD PTR [r12+0x70]
   11068:	cmp    ax,0x2
   1106c:	je     11160 <__sprintf_chk@plt+0xd480>
   11072:	cmp    cx,0x1
   11076:	jne    110a8 <__sprintf_chk@plt+0xd3c8>
   11078:	jmp    11208 <__sprintf_chk@plt+0xd528>
   1107d:	nop    DWORD PTR [rax]
   11080:	mov    QWORD PTR [rbp+0x0],r12
   11084:	mov    rdi,r13
   11087:	call   3680 <free@plt>
   1108c:	cmp    QWORD PTR [r12+0x58],0x0
   11092:	je     11280 <__sprintf_chk@plt+0xd5a0>
   11098:	movzx  eax,WORD PTR [r12+0x74]
   1109e:	cmp    ax,0x4
   110a2:	jne    11330 <__sprintf_chk@plt+0xd650>
   110a8:	mov    r13,r12
   110ab:	mov    r12,QWORD PTR [r12+0x10]
   110b0:	test   r12,r12
   110b3:	jne    11080 <__sprintf_chk@plt+0xd3a0>
   110b5:	mov    r14,QWORD PTR [r13+0x8]
   110b9:	cmp    QWORD PTR [r14+0x18],0x0
   110be:	jne    115e8 <__sprintf_chk@plt+0xd908>
   110c4:	mov    QWORD PTR [rbp+0x0],r14
   110c8:	mov    rdi,r13
   110cb:	call   3680 <free@plt>
   110d0:	cmp    QWORD PTR [r14+0x58],0xffffffffffffffff
   110d5:	je     11519 <__sprintf_chk@plt+0xd839>
   110db:	cmp    WORD PTR [r14+0x70],0xb
   110e1:	je     3d63 <__sprintf_chk@plt+0x83>
   110e7:	mov    rdx,QWORD PTR [rbp+0x20]
   110eb:	mov    rax,QWORD PTR [r14+0x48]
   110ef:	mov    BYTE PTR [rdx+rax*1],0x0
   110f3:	cmp    QWORD PTR [r14+0x58],0x0
   110f8:	je     11548 <__sprintf_chk@plt+0xd868>
   110fe:	movzx  eax,WORD PTR [r14+0x72]
   11103:	test   al,0x2
   11105:	jne    11494 <__sprintf_chk@plt+0xd7b4>
   1110b:	test   al,0x1
   1110d:	je     11673 <__sprintf_chk@plt+0xd993>
   11113:	cmp    WORD PTR [r14+0x70],0x2
   11119:	je     1113c <__sprintf_chk@plt+0xd45c>
   1111b:	mov    ecx,DWORD PTR [r14+0x40]
   1111f:	test   ecx,ecx
   11121:	jne    11539 <__sprintf_chk@plt+0xd859>
   11127:	mov    edx,0x6
   1112c:	mov    rsi,r14
   1112f:	mov    rdi,rbp
   11132:	mov    WORD PTR [r14+0x70],dx
   11137:	call   fb10 <__sprintf_chk@plt+0xbe30>
   1113c:	mov    r12,r14
   1113f:	test   BYTE PTR [rbp+0x49],0x20
   11143:	je     1114b <__sprintf_chk@plt+0xd46b>
   11145:	nop    DWORD PTR [rax]
   11148:	xor    r12d,r12d
   1114b:	pop    rbx
   1114c:	mov    rax,r12
   1114f:	pop    rbp
   11150:	pop    r12
   11152:	pop    r13
   11154:	pop    r14
   11156:	ret    
   11157:	nop    WORD PTR [rax+rax*1+0x0]
   11160:	lea    eax,[rcx-0xc]
   11163:	cmp    ax,0x1
   11167:	jbe    113c6 <__sprintf_chk@plt+0xd6e6>
   1116d:	cmp    cx,0x1
   11171:	jne    110a8 <__sprintf_chk@plt+0xd3c8>
   11177:	test   dl,0x40
   1117a:	je     1118b <__sprintf_chk@plt+0xd4ab>
   1117c:	mov    rax,QWORD PTR [rbp+0x18]
   11180:	cmp    QWORD PTR [r12+0x78],rax
   11185:	jne    11212 <__sprintf_chk@plt+0xd532>
   1118b:	mov    r13,QWORD PTR [rbp+0x8]
   1118f:	test   r13,r13
   11192:	je     1146a <__sprintf_chk@plt+0xd78a>
   11198:	test   dh,0x10
   1119b:	jne    11435 <__sprintf_chk@plt+0xd755>
   111a1:	mov    rcx,QWORD PTR [r12+0x30]
   111a6:	mov    edx,0xffffffff
   111ab:	mov    rsi,r12
   111ae:	mov    rdi,rbp
   111b1:	call   fc70 <__sprintf_chk@plt+0xbf90>
   111b6:	test   eax,eax
   111b8:	je     114c5 <__sprintf_chk@plt+0xd7e5>
   111be:	call   36f0 <__errno_location@plt>
   111c3:	mov    eax,DWORD PTR [rax]
   111c5:	or     WORD PTR [r12+0x72],0x1
   111cc:	mov    DWORD PTR [r12+0x40],eax
   111d1:	mov    r12,QWORD PTR [rbp+0x8]
   111d5:	test   r12,r12
   111d8:	je     114c9 <__sprintf_chk@plt+0xd7e9>
   111de:	mov    rax,r12
   111e1:	nop    DWORD PTR [rax+0x0]
   111e8:	mov    rdx,QWORD PTR [rax+0x8]
   111ec:	mov    rdx,QWORD PTR [rdx+0x30]
   111f0:	mov    QWORD PTR [rax+0x30],rdx
   111f4:	mov    rax,QWORD PTR [rax+0x10]
   111f8:	test   rax,rax
   111fb:	jne    111e8 <__sprintf_chk@plt+0xd508>
   111fd:	jmp    114c9 <__sprintf_chk@plt+0xd7e9>
   11202:	nop    WORD PTR [rax+rax*1+0x0]
   11208:	cmp    ax,0x4
   1120c:	jne    11177 <__sprintf_chk@plt+0xd497>
   11212:	test   BYTE PTR [r12+0x72],0x2
   11218:	jne    11624 <__sprintf_chk@plt+0xd944>
   1121e:	mov    r13,QWORD PTR [rbp+0x8]
   11222:	test   r13,r13
   11225:	je     1125a <__sprintf_chk@plt+0xd57a>
   11227:	nop    WORD PTR [rax+rax*1+0x0]
   11230:	mov    r14,r13
   11233:	mov    r13,QWORD PTR [r13+0x10]
   11237:	mov    rdi,QWORD PTR [r14+0x18]
   1123b:	test   rdi,rdi
   1123e:	je     11245 <__sprintf_chk@plt+0xd565>
   11240:	call   3930 <closedir@plt>
   11245:	mov    rdi,r14
   11248:	call   3680 <free@plt>
   1124d:	test   r13,r13
   11250:	jne    11230 <__sprintf_chk@plt+0xd550>
   11252:	mov    QWORD PTR [rbp+0x8],0x0
   1125a:	mov    r10d,0x6
   11260:	mov    rsi,r12
   11263:	mov    rdi,rbp
   11266:	mov    WORD PTR [r12+0x70],r10w
   1126c:	call   fb10 <__sprintf_chk@plt+0xbe30>
   11271:	jmp    1114b <__sprintf_chk@plt+0xd46b>
   11276:	cs nop WORD PTR [rax+rax*1+0x0]
   11280:	mov    rdi,rbp
   11283:	call   fbe0 <__sprintf_chk@plt+0xbf00>
   11288:	test   eax,eax
   1128a:	jne    11488 <__sprintf_chk@plt+0xd7a8>
   11290:	mov    rdi,QWORD PTR [rbp+0x58]
   11294:	test   DWORD PTR [rbp+0x48],0x102
   1129b:	je     1150f <__sprintf_chk@plt+0xd82f>
   112a1:	test   rdi,rdi
   112a4:	je     112ab <__sprintf_chk@plt+0xd5cb>
   112a6:	call   9d20 <__sprintf_chk@plt+0x6040>
   112ab:	mov    rax,QWORD PTR [r12+0x60]
   112b0:	mov    rdi,QWORD PTR [rbp+0x20]
   112b4:	lea    r14,[r12+0x108]
   112bc:	mov    rsi,r14
   112bf:	mov    QWORD PTR [r12+0x48],rax
   112c4:	lea    rdx,[rax+0x1]
   112c8:	call   3b80 <memmove@plt>
   112cd:	mov    esi,0x2f
   112d2:	mov    rdi,r14
   112d5:	call   38b0 <strrchr@plt>
   112da:	test   rax,rax
   112dd:	je     1130b <__sprintf_chk@plt+0xd62b>
   112df:	cmp    r14,rax
   112e2:	je     11663 <__sprintf_chk@plt+0xd983>
   112e8:	lea    r13,[rax+0x1]
   112ec:	mov    rdi,r13
   112ef:	call   3810 <strlen@plt>
   112f4:	mov    rsi,r13
   112f7:	mov    rdi,r14
   112fa:	mov    rbx,rax
   112fd:	lea    rdx,[rax+0x1]
   11301:	call   3b80 <memmove@plt>
   11306:	mov    QWORD PTR [r12+0x60],rbx
   1130b:	mov    rax,QWORD PTR [rbp+0x20]
   1130f:	mov    rdi,rbp
   11312:	mov    QWORD PTR [r12+0x38],rax
   11317:	mov    QWORD PTR [r12+0x30],rax
   1131c:	call   f9f0 <__sprintf_chk@plt+0xbd10>
   11321:	movzx  eax,WORD PTR [r12+0x70]
   11327:	jmp    1137b <__sprintf_chk@plt+0xd69b>
   11329:	nop    DWORD PTR [rax+0x0]
   11330:	cmp    ax,0x2
   11334:	je     11633 <__sprintf_chk@plt+0xd953>
   1133a:	mov    rdx,QWORD PTR [r12+0x8]
   1133f:	lea    rsi,[r12+0x108]
   11347:	mov    rax,QWORD PTR [rdx+0x48]
   1134b:	mov    rdx,QWORD PTR [rdx+0x38]
   1134f:	lea    rdi,[rax-0x1]
   11353:	cmp    BYTE PTR [rdx+rax*1-0x1],0x2f
   11358:	cmovne rdi,rax
   1135c:	add    rdi,QWORD PTR [rbp+0x20]
   11360:	mov    BYTE PTR [rdi],0x2f
   11363:	mov    rax,QWORD PTR [r12+0x60]
   11368:	add    rdi,0x1
   1136c:	lea    rdx,[rax+0x1]
   11370:	call   3b80 <memmove@plt>
   11375:	movzx  eax,WORD PTR [r12+0x70]
   1137b:	mov    QWORD PTR [rbp+0x0],r12
   1137f:	cmp    ax,0xb
   11383:	je     113f8 <__sprintf_chk@plt+0xd718>
   11385:	cmp    ax,0x1
   11389:	jne    1114b <__sprintf_chk@plt+0xd46b>
   1138f:	cmp    QWORD PTR [r12+0x58],0x0
   11395:	jne    113a0 <__sprintf_chk@plt+0xd6c0>
   11397:	mov    rax,QWORD PTR [r12+0x78]
   1139c:	mov    QWORD PTR [rbp+0x18],rax
   113a0:	mov    rsi,r12
   113a3:	mov    rdi,rbp
   113a6:	call   fa60 <__sprintf_chk@plt+0xbd80>
   113ab:	test   al,al
   113ad:	jne    1114b <__sprintf_chk@plt+0xd46b>
   113b3:	call   36f0 <__errno_location@plt>
   113b8:	xor    r12d,r12d
   113bb:	mov    DWORD PTR [rax],0xc
   113c1:	jmp    1114b <__sprintf_chk@plt+0xd46b>
   113c6:	mov    edx,0x1
   113cb:	mov    rsi,r12
   113ce:	call   f410 <__sprintf_chk@plt+0xb730>
   113d3:	mov    WORD PTR [r12+0x70],ax
   113d9:	cmp    ax,0x1
   113dd:	je     116cc <__sprintf_chk@plt+0xd9ec>
   113e3:	mov    QWORD PTR [rbp+0x0],r12
   113e7:	cmp    ax,0xb
   113eb:	jne    1114b <__sprintf_chk@plt+0xd46b>
   113f1:	nop    DWORD PTR [rax+0x0]
   113f8:	mov    rax,QWORD PTR [r12+0xa8]
   11400:	cmp    rax,0x2
   11404:	je     1156f <__sprintf_chk@plt+0xd88f>
   1140a:	cmp    rax,0x1
   1140e:	je     1114b <__sprintf_chk@plt+0xd46b>
   11414:	jmp    3d63 <__sprintf_chk@plt+0x83>
   11419:	nop    DWORD PTR [rax+0x0]
   11420:	xor    edx,edx
   11422:	mov    rsi,r12
   11425:	call   f410 <__sprintf_chk@plt+0xb730>
   1142a:	mov    WORD PTR [r12+0x70],ax
   11430:	jmp    1114b <__sprintf_chk@plt+0xd46b>
   11435:	and    dh,0xef
   11438:	mov    DWORD PTR [rbp+0x48],edx
   1143b:	nop    DWORD PTR [rax+rax*1+0x0]
   11440:	mov    r14,r13
   11443:	mov    r13,QWORD PTR [r13+0x10]
   11447:	mov    rdi,QWORD PTR [r14+0x18]
   1144b:	test   rdi,rdi
   1144e:	je     11455 <__sprintf_chk@plt+0xd775>
   11450:	call   3930 <closedir@plt>
   11455:	mov    rdi,r14
   11458:	call   3680 <free@plt>
   1145d:	test   r13,r13
   11460:	jne    11440 <__sprintf_chk@plt+0xd760>
   11462:	mov    QWORD PTR [rbp+0x8],0x0
   1146a:	mov    esi,0x3
   1146f:	mov    rdi,rbp
   11472:	call   ff60 <__sprintf_chk@plt+0xc280>
   11477:	mov    QWORD PTR [rbp+0x8],rax
   1147b:	test   rax,rax
   1147e:	je     114d6 <__sprintf_chk@plt+0xd7f6>
   11480:	mov    r12,rax
   11483:	jmp    114c9 <__sprintf_chk@plt+0xd7e9>
   11485:	nop    DWORD PTR [rax]
   11488:	or     DWORD PTR [rbp+0x48],0x2000
   1148f:	jmp    11148 <__sprintf_chk@plt+0xd468>
   11494:	mov    eax,DWORD PTR [rbp+0x48]
   11497:	mov    edi,DWORD PTR [r14+0x44]
   1149b:	test   al,0x4
   1149d:	jne    114bb <__sprintf_chk@plt+0xd7db>
   1149f:	test   ah,0x2
   114a2:	je     116a8 <__sprintf_chk@plt+0xd9c8>
   114a8:	mov    esi,edi
   114aa:	mov    edx,0x1
   114af:	mov    rdi,rbp
   114b2:	call   f910 <__sprintf_chk@plt+0xbc30>
   114b7:	mov    edi,DWORD PTR [r14+0x44]
   114bb:	call   3920 <close@plt>
   114c0:	jmp    11113 <__sprintf_chk@plt+0xd433>
   114c5:	mov    r12,QWORD PTR [rbp+0x8]
   114c9:	mov    QWORD PTR [rbp+0x8],0x0
   114d1:	jmp    1133a <__sprintf_chk@plt+0xd65a>
   114d6:	test   BYTE PTR [rbp+0x49],0x20
   114da:	jne    11148 <__sprintf_chk@plt+0xd468>
   114e0:	mov    r9d,DWORD PTR [r12+0x40]
   114e5:	test   r9d,r9d
   114e8:	je     114ff <__sprintf_chk@plt+0xd81f>
   114ea:	cmp    WORD PTR [r12+0x70],0x4
   114f1:	je     114ff <__sprintf_chk@plt+0xd81f>
   114f3:	mov    r8d,0x7
   114f9:	mov    WORD PTR [r12+0x70],r8w
   114ff:	mov    rsi,r12
   11502:	mov    rdi,rbp
   11505:	call   fb10 <__sprintf_chk@plt+0xbe30>
   1150a:	jmp    1114b <__sprintf_chk@plt+0xd46b>
   1150f:	call   3680 <free@plt>
   11514:	jmp    112ab <__sprintf_chk@plt+0xd5cb>
   11519:	mov    rdi,r14
   1151c:	call   3680 <free@plt>
   11521:	call   36f0 <__errno_location@plt>
   11526:	mov    DWORD PTR [rax],0x0
   1152c:	mov    QWORD PTR [rbp+0x0],0x0
   11534:	jmp    1114b <__sprintf_chk@plt+0xd46b>
   11539:	mov    eax,0x7
   1153e:	mov    WORD PTR [r14+0x70],ax
   11543:	jmp    1113c <__sprintf_chk@plt+0xd45c>
   11548:	mov    rdi,rbp
   1154b:	call   fbe0 <__sprintf_chk@plt+0xbf00>
   11550:	test   eax,eax
   11552:	je     11113 <__sprintf_chk@plt+0xd433>
   11558:	call   36f0 <__errno_location@plt>
   1155d:	mov    eax,DWORD PTR [rax]
   1155f:	mov    DWORD PTR [r14+0x40],eax
   11563:	or     DWORD PTR [rbp+0x48],0x2000
   1156a:	jmp    11113 <__sprintf_chk@plt+0xd433>
   1156f:	mov    rbx,QWORD PTR [r12+0x8]
   11574:	cmp    QWORD PTR [rbx+0x68],0x0
   11579:	jne    1158a <__sprintf_chk@plt+0xd8aa>
   1157b:	mov    eax,DWORD PTR [rbp+0x48]
   1157e:	and    eax,0x18
   11581:	cmp    eax,0x18
   11584:	je     1173e <__sprintf_chk@plt+0xda5e>
   1158a:	xor    edx,edx
   1158c:	mov    rsi,r12
   1158f:	mov    rdi,rbp
   11592:	call   f410 <__sprintf_chk@plt+0xb730>
   11597:	mov    edx,DWORD PTR [r12+0x90]
   1159f:	mov    WORD PTR [r12+0x70],ax
   115a5:	and    edx,0xf000
   115ab:	cmp    edx,0x4000
   115b1:	jne    11385 <__sprintf_chk@plt+0xd6a5>
   115b7:	cmp    QWORD PTR [r12+0x58],0x0
   115bd:	je     1172f <__sprintf_chk@plt+0xda4f>
   115c3:	mov    rsi,QWORD PTR [rbx+0x68]
   115c7:	lea    rdx,[rsi-0x1]
   115cb:	cmp    rdx,0xfffffffffffffffd
   115cf:	jbe    1179f <__sprintf_chk@plt+0xdabf>
   115d5:	cmp    ax,0x1
   115d9:	je     113a0 <__sprintf_chk@plt+0xd6c0>
   115df:	jmp    1114b <__sprintf_chk@plt+0xd46b>
   115e4:	nop    DWORD PTR [rax+0x0]
   115e8:	mov    rdx,QWORD PTR [rbp+0x20]
   115ec:	mov    rax,QWORD PTR [r14+0x48]
   115f0:	mov    QWORD PTR [rbp+0x0],r14
   115f4:	mov    rdi,rbp
   115f7:	mov    esi,0x3
   115fc:	mov    BYTE PTR [rdx+rax*1],0x0
   11600:	call   ff60 <__sprintf_chk@plt+0xc280>
   11605:	mov    rbx,rax
   11608:	test   rax,rax
   1160b:	jne    11698 <__sprintf_chk@plt+0xd9b8>
   11611:	test   BYTE PTR [rbp+0x49],0x20
   11615:	jne    11148 <__sprintf_chk@plt+0xd468>
   1161b:	mov    r14,QWORD PTR [r13+0x8]
   1161f:	jmp    110c4 <__sprintf_chk@plt+0xd3e4>
   11624:	mov    edi,DWORD PTR [r12+0x44]
   11629:	call   3920 <close@plt>
   1162e:	jmp    1121e <__sprintf_chk@plt+0xd53e>
   11633:	mov    edx,0x1
   11638:	mov    rsi,r12
   1163b:	mov    rdi,rbp
   1163e:	call   f410 <__sprintf_chk@plt+0xb730>
   11643:	mov    WORD PTR [r12+0x70],ax
   11649:	cmp    ax,0x1
   1164d:	je     116e0 <__sprintf_chk@plt+0xda00>
   11653:	mov    esi,0x3
   11658:	mov    WORD PTR [r12+0x74],si
   1165e:	jmp    1133a <__sprintf_chk@plt+0xd65a>
   11663:	cmp    BYTE PTR [r14+0x1],0x0
   11668:	je     1130b <__sprintf_chk@plt+0xd62b>
   1166e:	jmp    112e8 <__sprintf_chk@plt+0xd608>
   11673:	mov    rsi,QWORD PTR [r14+0x8]
   11677:	lea    rcx,[rip+0x137cd]        # 24e4b <__sprintf_chk@plt+0x2116b>
   1167e:	mov    edx,0xffffffff
   11683:	mov    rdi,rbp
   11686:	call   fc70 <__sprintf_chk@plt+0xbf90>
   1168b:	test   eax,eax
   1168d:	je     11113 <__sprintf_chk@plt+0xd433>
   11693:	jmp    11558 <__sprintf_chk@plt+0xd878>
   11698:	mov    rdi,r13
   1169b:	mov    r12,rbx
   1169e:	call   3680 <free@plt>
   116a3:	jmp    1133a <__sprintf_chk@plt+0xd65a>
   116a8:	call   3b10 <fchdir@plt>
   116ad:	test   eax,eax
   116af:	je     116c3 <__sprintf_chk@plt+0xd9e3>
   116b1:	call   36f0 <__errno_location@plt>
   116b6:	mov    eax,DWORD PTR [rax]
   116b8:	mov    DWORD PTR [r14+0x40],eax
   116bc:	or     DWORD PTR [rbp+0x48],0x2000
   116c3:	mov    edi,DWORD PTR [r14+0x44]
   116c7:	jmp    114bb <__sprintf_chk@plt+0xd7db>
   116cc:	mov    eax,DWORD PTR [rbp+0x48]
   116cf:	test   al,0x4
   116d1:	je     1175d <__sprintf_chk@plt+0xda7d>
   116d7:	mov    QWORD PTR [rbp+0x0],r12
   116db:	jmp    1138f <__sprintf_chk@plt+0xd6af>
   116e0:	mov    eax,DWORD PTR [rbp+0x48]
   116e3:	test   al,0x4
   116e5:	jne    11653 <__sprintf_chk@plt+0xd973>
   116eb:	mov    edx,eax
   116ed:	shl    edx,0xd
   116f0:	and    edx,0x20000
   116f6:	or     edx,0x90900
   116fc:	test   ah,0x2
   116ff:	je     117db <__sprintf_chk@plt+0xdafb>
   11705:	mov    edi,DWORD PTR [rbp+0x2c]
   11708:	lea    rsi,[rip+0x1373d]        # 24e4c <__sprintf_chk@plt+0x2116c>
   1170f:	xor    eax,eax
   11711:	call   21090 <__sprintf_chk@plt+0x1d3b0>
   11716:	mov    DWORD PTR [r12+0x44],eax
   1171b:	test   eax,eax
   1171d:	js     117f0 <__sprintf_chk@plt+0xdb10>
   11723:	or     WORD PTR [r12+0x72],0x2
   1172a:	jmp    11653 <__sprintf_chk@plt+0xd973>
   1172f:	cmp    ax,0x1
   11733:	je     11397 <__sprintf_chk@plt+0xd6b7>
   11739:	jmp    1114b <__sprintf_chk@plt+0xd46b>
   1173e:	mov    esi,DWORD PTR [rbp+0x2c]
   11741:	mov    rdi,rbx
   11744:	call   f890 <__sprintf_chk@plt+0xbbb0>
   11749:	cmp    eax,0x2
   1174c:	jne    1158a <__sprintf_chk@plt+0xd8aa>
   11752:	movzx  eax,WORD PTR [r12+0x70]
   11758:	jmp    11385 <__sprintf_chk@plt+0xd6a5>
   1175d:	mov    edx,eax
   1175f:	shl    edx,0xd
   11762:	and    edx,0x20000
   11768:	or     edx,0x90900
   1176e:	test   ah,0x2
   11771:	je     117a8 <__sprintf_chk@plt+0xdac8>
   11773:	mov    edi,DWORD PTR [rbp+0x2c]
   11776:	lea    rsi,[rip+0x136cf]        # 24e4c <__sprintf_chk@plt+0x2116c>
   1177d:	xor    eax,eax
   1177f:	call   21090 <__sprintf_chk@plt+0x1d3b0>
   11784:	mov    DWORD PTR [r12+0x44],eax
   11789:	test   eax,eax
   1178b:	js     117ba <__sprintf_chk@plt+0xdada>
   1178d:	or     WORD PTR [r12+0x72],0x2
   11794:	movzx  eax,WORD PTR [r12+0x70]
   1179a:	jmp    1137b <__sprintf_chk@plt+0xd69b>
   1179f:	mov    QWORD PTR [rbx+0x68],rdx
   117a3:	jmp    115d5 <__sprintf_chk@plt+0xd8f5>
   117a8:	mov    esi,edx
   117aa:	lea    rdi,[rip+0x1369b]        # 24e4c <__sprintf_chk@plt+0x2116c>
   117b1:	xor    eax,eax
   117b3:	call   20e90 <__sprintf_chk@plt+0x1d1b0>
   117b8:	jmp    11784 <__sprintf_chk@plt+0xdaa4>
   117ba:	call   36f0 <__errno_location@plt>
   117bf:	mov    r11d,0x7
   117c5:	mov    eax,DWORD PTR [rax]
   117c7:	mov    WORD PTR [r12+0x70],r11w
   117cd:	mov    DWORD PTR [r12+0x40],eax
   117d2:	mov    QWORD PTR [rbp+0x0],r12
   117d6:	jmp    1114b <__sprintf_chk@plt+0xd46b>
   117db:	mov    esi,edx
   117dd:	lea    rdi,[rip+0x13668]        # 24e4c <__sprintf_chk@plt+0x2116c>
   117e4:	xor    eax,eax
   117e6:	call   20e90 <__sprintf_chk@plt+0x1d1b0>
   117eb:	jmp    11716 <__sprintf_chk@plt+0xda36>
   117f0:	call   36f0 <__errno_location@plt>
   117f5:	mov    edi,0x7
   117fa:	mov    eax,DWORD PTR [rax]
   117fc:	mov    WORD PTR [r12+0x70],di
   11802:	mov    DWORD PTR [r12+0x40],eax
   11807:	jmp    11653 <__sprintf_chk@plt+0xd973>
   1180c:	nop    DWORD PTR [rax+0x0]
   11810:	endbr64 
   11814:	cmp    edx,0x4
   11817:	ja     11820 <__sprintf_chk@plt+0xdb40>
   11819:	mov    WORD PTR [rsi+0x74],dx
   1181d:	xor    eax,eax
   1181f:	ret    
   11820:	sub    rsp,0x8
   11824:	call   36f0 <__errno_location@plt>
   11829:	mov    DWORD PTR [rax],0x16
   1182f:	mov    eax,0x1
   11834:	add    rsp,0x8
   11838:	ret    
   11839:	nop    DWORD PTR [rax+0x0]
   11840:	endbr64 
   11844:	push   r15
   11846:	push   r14
   11848:	push   r13
   1184a:	mov    r13d,esi
   1184d:	push   r12
   1184f:	push   rbp
   11850:	mov    rbp,rdi
   11853:	push   rbx
   11854:	sub    rsp,0x8
   11858:	call   36f0 <__errno_location@plt>
   1185d:	mov    r14,rax
   11860:	test   r13d,0xffffefff
   11867:	jne    11998 <__sprintf_chk@plt+0xdcb8>
   1186d:	mov    r15,QWORD PTR [rbp+0x0]
   11871:	mov    DWORD PTR [rax],0x0
   11877:	test   BYTE PTR [rbp+0x49],0x20
   1187b:	jne    119b0 <__sprintf_chk@plt+0xdcd0>
   11881:	movzx  edx,WORD PTR [r15+0x70]
   11886:	cmp    dx,0x9
   1188a:	je     119c8 <__sprintf_chk@plt+0xdce8>
   11890:	xor    eax,eax
   11892:	cmp    dx,0x1
   11896:	jne    1190d <__sprintf_chk@plt+0xdc2d>
   11898:	mov    rbx,QWORD PTR [rbp+0x8]
   1189c:	test   rbx,rbx
   1189f:	je     118cb <__sprintf_chk@plt+0xdbeb>
   118a1:	nop    DWORD PTR [rax+0x0]
   118a8:	mov    r12,rbx
   118ab:	mov    rbx,QWORD PTR [rbx+0x10]
   118af:	mov    rdi,QWORD PTR [r12+0x18]
   118b4:	test   rdi,rdi
   118b7:	je     118be <__sprintf_chk@plt+0xdbde>
   118b9:	call   3930 <closedir@plt>
   118be:	mov    rdi,r12
   118c1:	call   3680 <free@plt>
   118c6:	test   rbx,rbx
   118c9:	jne    118a8 <__sprintf_chk@plt+0xdbc8>
   118cb:	mov    r12d,0x1
   118d1:	cmp    r13d,0x1000
   118d8:	jne    118e7 <__sprintf_chk@plt+0xdc07>
   118da:	or     DWORD PTR [rbp+0x48],0x1000
   118e1:	mov    r12d,0x2
   118e7:	cmp    QWORD PTR [r15+0x58],0x0
   118ec:	jne    118fe <__sprintf_chk@plt+0xdc1e>
   118ee:	mov    rax,QWORD PTR [r15+0x30]
   118f2:	cmp    BYTE PTR [rax],0x2f
   118f5:	je     118fe <__sprintf_chk@plt+0xdc1e>
   118f7:	mov    eax,DWORD PTR [rbp+0x48]
   118fa:	test   al,0x4
   118fc:	je     11920 <__sprintf_chk@plt+0xdc40>
   118fe:	mov    esi,r12d
   11901:	mov    rdi,rbp
   11904:	call   ff60 <__sprintf_chk@plt+0xc280>
   11909:	mov    QWORD PTR [rbp+0x8],rax
   1190d:	add    rsp,0x8
   11911:	pop    rbx
   11912:	pop    rbp
   11913:	pop    r12
   11915:	pop    r13
   11917:	pop    r14
   11919:	pop    r15
   1191b:	ret    
   1191c:	nop    DWORD PTR [rax+0x0]
   11920:	mov    edx,eax
   11922:	shl    edx,0xd
   11925:	and    edx,0x20000
   1192b:	or     edx,0x90900
   11931:	test   ah,0x2
   11934:	je     119e0 <__sprintf_chk@plt+0xdd00>
   1193a:	mov    edi,DWORD PTR [rbp+0x2c]
   1193d:	lea    rsi,[rip+0x13508]        # 24e4c <__sprintf_chk@plt+0x2116c>
   11944:	xor    eax,eax
   11946:	call   21090 <__sprintf_chk@plt+0x1d3b0>
   1194b:	mov    r13d,eax
   1194e:	test   r13d,r13d
   11951:	js     11a18 <__sprintf_chk@plt+0xdd38>
   11957:	mov    esi,r12d
   1195a:	mov    rdi,rbp
   1195d:	call   ff60 <__sprintf_chk@plt+0xc280>
   11962:	mov    QWORD PTR [rbp+0x8],rax
   11966:	test   BYTE PTR [rbp+0x49],0x2
   1196a:	jne    11a00 <__sprintf_chk@plt+0xdd20>
   11970:	mov    edi,r13d
   11973:	call   3b10 <fchdir@plt>
   11978:	test   eax,eax
   1197a:	jne    11a27 <__sprintf_chk@plt+0xdd47>
   11980:	mov    edi,r13d
   11983:	call   3920 <close@plt>
   11988:	mov    rax,QWORD PTR [rbp+0x8]
   1198c:	jmp    1190d <__sprintf_chk@plt+0xdc2d>
   11991:	nop    DWORD PTR [rax+0x0]
   11998:	mov    DWORD PTR [rax],0x16
   1199e:	add    rsp,0x8
   119a2:	xor    eax,eax
   119a4:	pop    rbx
   119a5:	pop    rbp
   119a6:	pop    r12
   119a8:	pop    r13
   119aa:	pop    r14
   119ac:	pop    r15
   119ae:	ret    
   119af:	nop
   119b0:	add    rsp,0x8
   119b4:	xor    eax,eax
   119b6:	pop    rbx
   119b7:	pop    rbp
   119b8:	pop    r12
   119ba:	pop    r13
   119bc:	pop    r14
   119be:	pop    r15
   119c0:	ret    
   119c1:	nop    DWORD PTR [rax+0x0]
   119c8:	mov    rax,QWORD PTR [r15+0x10]
   119cc:	add    rsp,0x8
   119d0:	pop    rbx
   119d1:	pop    rbp
   119d2:	pop    r12
   119d4:	pop    r13
   119d6:	pop    r14
   119d8:	pop    r15
   119da:	ret    
   119db:	nop    DWORD PTR [rax+rax*1+0x0]
   119e0:	mov    esi,edx
   119e2:	lea    rdi,[rip+0x13463]        # 24e4c <__sprintf_chk@plt+0x2116c>
   119e9:	xor    eax,eax
   119eb:	call   20e90 <__sprintf_chk@plt+0x1d1b0>
   119f0:	mov    r13d,eax
   119f3:	jmp    1194e <__sprintf_chk@plt+0xdc6e>
   119f8:	nop    DWORD PTR [rax+rax*1+0x0]
   11a00:	mov    edx,0x1
   11a05:	mov    esi,r13d
   11a08:	mov    rdi,rbp
   11a0b:	call   f910 <__sprintf_chk@plt+0xbc30>
   11a10:	jmp    11988 <__sprintf_chk@plt+0xdca8>
   11a15:	nop    DWORD PTR [rax]
   11a18:	mov    QWORD PTR [rbp+0x8],0x0
   11a20:	xor    eax,eax
   11a22:	jmp    1190d <__sprintf_chk@plt+0xdc2d>
   11a27:	mov    ebx,DWORD PTR [r14]
   11a2a:	mov    edi,r13d
   11a2d:	call   3920 <close@plt>
   11a32:	xor    eax,eax
   11a34:	mov    DWORD PTR [r14],ebx
   11a37:	jmp    1190d <__sprintf_chk@plt+0xdc2d>
   11a3c:	nop    DWORD PTR [rax+0x0]
   11a40:	endbr64 
   11a44:	push   r13
   11a46:	mov    r13,rsi
   11a49:	push   r12
   11a4b:	push   rbp
   11a4c:	mov    rbp,rdx
   11a4f:	push   rbx
   11a50:	mov    rbx,rdi
   11a53:	sub    rsp,0x18
   11a57:	mov    rax,QWORD PTR fs:0x28
   11a60:	mov    QWORD PTR [rsp+0x8],rax
   11a65:	xor    eax,eax
   11a67:	test   rdi,rdi
   11a6a:	lea    rax,[rsp+0x4]
   11a6f:	cmove  rbx,rax
   11a73:	mov    rdi,rbx
   11a76:	call   3860 <mbrtowc@plt>
   11a7b:	mov    r12,rax
   11a7e:	cmp    rax,0xfffffffffffffffd
   11a82:	jbe    11a89 <__sprintf_chk@plt+0xdda9>
   11a84:	test   rbp,rbp
   11a87:	jne    11ab0 <__sprintf_chk@plt+0xddd0>
   11a89:	mov    rax,QWORD PTR [rsp+0x8]
   11a8e:	sub    rax,QWORD PTR fs:0x28
   11a97:	jne    11aca <__sprintf_chk@plt+0xddea>
   11a99:	add    rsp,0x18
   11a9d:	mov    rax,r12
   11aa0:	pop    rbx
   11aa1:	pop    rbp
   11aa2:	pop    r12
   11aa4:	pop    r13
   11aa6:	ret    
   11aa7:	nop    WORD PTR [rax+rax*1+0x0]
   11ab0:	xor    edi,edi
   11ab2:	call   20f10 <__sprintf_chk@plt+0x1d230>
   11ab7:	test   al,al
   11ab9:	jne    11a89 <__sprintf_chk@plt+0xdda9>
   11abb:	movzx  eax,BYTE PTR [r13+0x0]
   11ac0:	mov    r12d,0x1
   11ac6:	mov    DWORD PTR [rbx],eax
   11ac8:	jmp    11a89 <__sprintf_chk@plt+0xdda9>
   11aca:	call   3840 <__stack_chk_fail@plt>
   11acf:	nop
   11ad0:	push   rbx
   11ad1:	mov    rbx,rdi
   11ad4:	call   3810 <strlen@plt>
   11ad9:	mov    rdx,rbx
   11adc:	lea    rdi,[rax+0x1]
   11ae0:	xor    eax,eax
   11ae2:	jmp    11af7 <__sprintf_chk@plt+0xde17>
   11ae4:	nop    DWORD PTR [rax+0x0]
   11ae8:	mov    BYTE PTR [rdx],sil
   11aeb:	add    rdx,0x1
   11aef:	cmp    rdi,rcx
   11af2:	jbe    11b50 <__sprintf_chk@plt+0xde70>
   11af4:	mov    rax,rcx
   11af7:	movzx  esi,BYTE PTR [rbx+rax*1]
   11afb:	lea    rcx,[rax+0x1]
   11aff:	cmp    sil,0x5c
   11b03:	jne    11ae8 <__sprintf_chk@plt+0xde08>
   11b05:	lea    r9,[rax+0x4]
   11b09:	cmp    r9,rdi
   11b0c:	jae    11ae8 <__sprintf_chk@plt+0xde08>
   11b0e:	movzx  r11d,BYTE PTR [rbx+rcx*1]
   11b13:	lea    r8d,[r11-0x30]
   11b17:	cmp    r8b,0x3
   11b1b:	ja     11ae8 <__sprintf_chk@plt+0xde08>
   11b1d:	movzx  r10d,BYTE PTR [rbx+rax*1+0x2]
   11b23:	sub    r10d,0x30
   11b27:	cmp    r10b,0x7
   11b2b:	ja     11ae8 <__sprintf_chk@plt+0xde08>
   11b2d:	movzx  eax,BYTE PTR [rbx+rax*1+0x3]
   11b32:	lea    r11d,[rax-0x30]
   11b36:	cmp    r11b,0x7
   11b3a:	ja     11ae8 <__sprintf_chk@plt+0xde08>
   11b3c:	lea    eax,[r10+r8*8]
   11b40:	add    rdx,0x1
   11b44:	mov    rcx,r9
   11b47:	lea    eax,[r11+rax*8]
   11b4b:	mov    BYTE PTR [rdx-0x1],al
   11b4e:	jmp    11af4 <__sprintf_chk@plt+0xde14>
   11b50:	pop    rbx
   11b51:	ret    
   11b52:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   11b5d:	nop    DWORD PTR [rax]
   11b60:	endbr64 
   11b64:	push   r15
   11b66:	lea    rsi,[rip+0x13404]        # 24f71 <__sprintf_chk@plt+0x21291>
   11b6d:	lea    rdi,[rip+0x1331c]        # 24e90 <__sprintf_chk@plt+0x211b0>
   11b74:	push   r14
   11b76:	push   r13
   11b78:	push   r12
   11b7a:	push   rbp
   11b7b:	push   rbx
   11b7c:	sub    rsp,0x58
   11b80:	mov    rax,QWORD PTR fs:0x28
   11b89:	mov    QWORD PTR [rsp+0x48],rax
   11b8e:	xor    eax,eax
   11b90:	call   3bc0 <fopen@plt>
   11b95:	test   rax,rax
   11b98:	je     12060 <__sprintf_chk@plt+0xe380>
   11b9e:	mov    r12,rax
   11ba1:	lea    rax,[rsp+0x30]
   11ba6:	lea    r14,[rsp+0x40]
   11bab:	mov    QWORD PTR [rsp+0x38],0x0
   11bb4:	mov    QWORD PTR [rsp+0x40],0x0
   11bbd:	lea    rbx,[rsp+0x38]
   11bc2:	mov    QWORD PTR [rsp+0x8],rax
   11bc7:	nop    WORD PTR [rax+rax*1+0x0]
   11bd0:	mov    rcx,r12
   11bd3:	mov    edx,0xa
   11bd8:	mov    rsi,r14
   11bdb:	mov    rdi,rbx
   11bde:	call   39a0 <__getdelim@plt>
   11be3:	cmp    rax,0xffffffffffffffff
   11be7:	je     11de8 <__sprintf_chk@plt+0xe108>
   11bed:	mov    rdi,QWORD PTR [rsp+0x38]
   11bf2:	lea    rcx,[rsp+0x28]
   11bf7:	xor    eax,eax
   11bf9:	lea    rdx,[rsp+0x24]
   11bfe:	lea    r8,[rsp+0x2c]
   11c03:	lea    rsi,[rip+0x1329b]        # 24ea5 <__sprintf_chk@plt+0x211c5>
   11c0a:	call   3ad0 <__isoc99_sscanf@plt>
   11c0f:	sub    eax,0x2
   11c12:	cmp    eax,0x1
   11c15:	ja     11bd0 <__sprintf_chk@plt+0xdef0>
   11c17:	movsxd r13,DWORD PTR [rsp+0x2c]
   11c1c:	add    r13,QWORD PTR [rsp+0x38]
   11c21:	mov    esi,0x20
   11c26:	mov    rdi,r13
   11c29:	call   3880 <strchr@plt>
   11c2e:	test   rax,rax
   11c31:	je     11bd0 <__sprintf_chk@plt+0xdef0>
   11c33:	mov    BYTE PTR [rax],0x0
   11c36:	lea    rbp,[rax+0x1]
   11c3a:	mov    esi,0x20
   11c3f:	mov    rdi,rbp
   11c42:	call   3880 <strchr@plt>
   11c47:	test   rax,rax
   11c4a:	je     11bd0 <__sprintf_chk@plt+0xdef0>
   11c4c:	mov    BYTE PTR [rax],0x0
   11c4f:	lea    rdi,[rax+0x1]
   11c53:	lea    rsi,[rip+0x1325c]        # 24eb6 <__sprintf_chk@plt+0x211d6>
   11c5a:	call   3cb0 <strstr@plt>
   11c5f:	test   rax,rax
   11c62:	je     11bd0 <__sprintf_chk@plt+0xdef0>
   11c68:	lea    r15,[rax+0x3]
   11c6c:	mov    esi,0x20
   11c71:	mov    rdi,r15
   11c74:	call   3880 <strchr@plt>
   11c79:	test   rax,rax
   11c7c:	je     11bd0 <__sprintf_chk@plt+0xdef0>
   11c82:	mov    BYTE PTR [rax],0x0
   11c85:	lea    r8,[rax+0x1]
   11c89:	mov    esi,0x20
   11c8e:	mov    rdi,r8
   11c91:	mov    QWORD PTR [rsp+0x10],r8
   11c96:	call   3880 <strchr@plt>
   11c9b:	test   rax,rax
   11c9e:	je     11bd0 <__sprintf_chk@plt+0xdef0>
   11ca4:	mov    r8,QWORD PTR [rsp+0x10]
   11ca9:	mov    BYTE PTR [rax],0x0
   11cac:	mov    rdi,r8
   11caf:	mov    QWORD PTR [rsp+0x18],r8
   11cb4:	call   11ad0 <__sprintf_chk@plt+0xddf0>
   11cb9:	mov    rdi,rbp
   11cbc:	call   11ad0 <__sprintf_chk@plt+0xddf0>
   11cc1:	mov    rdi,r13
   11cc4:	call   11ad0 <__sprintf_chk@plt+0xddf0>
   11cc9:	mov    rdi,r15
   11ccc:	mov    QWORD PTR [rsp+0x10],r15
   11cd1:	call   11ad0 <__sprintf_chk@plt+0xddf0>
   11cd6:	mov    edi,0x38
   11cdb:	call   e370 <__sprintf_chk@plt+0xa690>
   11ce0:	mov    r8,QWORD PTR [rsp+0x18]
   11ce5:	mov    r15,rax
   11ce8:	mov    rdi,r8
   11ceb:	call   e4e0 <__sprintf_chk@plt+0xa800>
   11cf0:	mov    rdi,rbp
   11cf3:	mov    QWORD PTR [r15],rax
   11cf6:	call   e4e0 <__sprintf_chk@plt+0xa800>
   11cfb:	mov    rdi,r13
   11cfe:	mov    r13d,0x1
   11d04:	mov    QWORD PTR [r15+0x8],rax
   11d08:	call   e4e0 <__sprintf_chk@plt+0xa800>
   11d0d:	mov    rdi,QWORD PTR [rsp+0x10]
   11d12:	mov    QWORD PTR [r15+0x10],rax
   11d16:	call   e4e0 <__sprintf_chk@plt+0xa800>
   11d1b:	mov    ecx,DWORD PTR [rsp+0x24]
   11d1f:	or     BYTE PTR [r15+0x28],0x4
   11d24:	movabs rdx,0xfffff00000000000
   11d2e:	mov    rbp,rax
   11d31:	mov    QWORD PTR [r15+0x18],rax
   11d35:	mov    eax,DWORD PTR [rsp+0x28]
   11d39:	lea    rdi,[rip+0x1317a]        # 24eba <__sprintf_chk@plt+0x211da>
   11d40:	mov    rsi,rcx
   11d43:	shl    rcx,0x20
   11d47:	shl    rsi,0x8
   11d4b:	and    rcx,rdx
   11d4e:	movabs rdx,0xffffff00000
   11d58:	and    esi,0xfff00
   11d5e:	or     rcx,rsi
   11d61:	movzx  esi,al
   11d64:	shl    rax,0xc
   11d68:	or     rcx,rsi
   11d6b:	and    rax,rdx
   11d6e:	mov    rsi,rbp
   11d71:	or     rax,rcx
   11d74:	mov    ecx,0x7
   11d79:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   11d7b:	mov    QWORD PTR [r15+0x20],rax
   11d7f:	seta   al
   11d82:	sbb    al,0x0
   11d84:	test   al,al
   11d86:	jne    11e48 <__sprintf_chk@plt+0xe168>
   11d8c:	movzx  eax,BYTE PTR [r15+0x28]
   11d91:	mov    esi,0x3a
   11d96:	and    eax,0xfffffffe
   11d99:	or     eax,r13d
   11d9c:	mov    r13,QWORD PTR [r15]
   11d9f:	mov    BYTE PTR [r15+0x28],al
   11da3:	mov    rdi,r13
   11da6:	call   3880 <strchr@plt>
   11dab:	mov    r8,rax
   11dae:	mov    eax,0x1
   11db3:	test   r8,r8
   11db6:	je     11fe8 <__sprintf_chk@plt+0xe308>
   11dbc:	lea    ecx,[rax+rax*1]
   11dbf:	movzx  eax,BYTE PTR [r15+0x28]
   11dc4:	and    eax,0xfffffffd
   11dc7:	or     eax,ecx
   11dc9:	mov    BYTE PTR [r15+0x28],al
   11dcd:	mov    rax,QWORD PTR [rsp+0x8]
   11dd2:	mov    QWORD PTR [rax],r15
   11dd5:	lea    rax,[r15+0x30]
   11dd9:	mov    QWORD PTR [rsp+0x8],rax
   11dde:	jmp    11bd0 <__sprintf_chk@plt+0xdef0>
   11de3:	nop    DWORD PTR [rax+rax*1+0x0]
   11de8:	mov    rdi,QWORD PTR [rsp+0x38]
   11ded:	call   3680 <free@plt>
   11df2:	test   BYTE PTR [r12],0x20
   11df7:	jne    12430 <__sprintf_chk@plt+0xe750>
   11dfd:	mov    rdi,r12
   11e00:	call   f210 <__sprintf_chk@plt+0xb530>
   11e05:	cmp    eax,0xffffffff
   11e08:	je     12337 <__sprintf_chk@plt+0xe657>
   11e0e:	mov    rax,QWORD PTR [rsp+0x8]
   11e13:	mov    QWORD PTR [rax],0x0
   11e1a:	mov    r12,QWORD PTR [rsp+0x30]
   11e1f:	mov    rax,QWORD PTR [rsp+0x48]
   11e24:	sub    rax,QWORD PTR fs:0x28
   11e2d:	jne    1252a <__sprintf_chk@plt+0xe84a>
   11e33:	add    rsp,0x58
   11e37:	mov    rax,r12
   11e3a:	pop    rbx
   11e3b:	pop    rbp
   11e3c:	pop    r12
   11e3e:	pop    r13
   11e40:	pop    r14
   11e42:	pop    r15
   11e44:	ret    
   11e45:	nop    DWORD PTR [rax]
   11e48:	mov    ecx,0x9
   11e4d:	lea    rdi,[rip+0x1306d]        # 24ec1 <__sprintf_chk@plt+0x211e1>
   11e54:	mov    rsi,rbp
   11e57:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   11e59:	seta   al
   11e5c:	sbb    al,0x0
   11e5e:	test   al,al
   11e60:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11e66:	mov    ecx,0xc
   11e6b:	lea    rdi,[rip+0x13058]        # 24eca <__sprintf_chk@plt+0x211ea>
   11e72:	mov    rsi,rbp
   11e75:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   11e77:	seta   al
   11e7a:	sbb    al,0x0
   11e7c:	test   al,al
   11e7e:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11e84:	mov    ecx,0x5
   11e89:	lea    rdi,[rip+0x13046]        # 24ed6 <__sprintf_chk@plt+0x211f6>
   11e90:	mov    rsi,rbp
   11e93:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   11e95:	seta   al
   11e98:	sbb    al,0x0
   11e9a:	test   al,al
   11e9c:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11ea2:	mov    ecx,0x9
   11ea7:	lea    rdi,[rip+0x1302d]        # 24edb <__sprintf_chk@plt+0x211fb>
   11eae:	mov    rsi,rbp
   11eb1:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   11eb3:	seta   al
   11eb6:	sbb    al,0x0
   11eb8:	test   al,al
   11eba:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11ec0:	mov    ecx,0x6
   11ec5:	lea    rdi,[rip+0x13018]        # 24ee4 <__sprintf_chk@plt+0x21204>
   11ecc:	mov    rsi,rbp
   11ecf:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   11ed1:	seta   al
   11ed4:	sbb    al,0x0
   11ed6:	test   al,al
   11ed8:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11ede:	mov    ecx,0x8
   11ee3:	lea    rdi,[rip+0x13000]        # 24eea <__sprintf_chk@plt+0x2120a>
   11eea:	mov    rsi,rbp
   11eed:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   11eef:	seta   al
   11ef2:	sbb    al,0x0
   11ef4:	test   al,al
   11ef6:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11efc:	mov    ecx,0x7
   11f01:	lea    rdi,[rip+0x12fea]        # 24ef2 <__sprintf_chk@plt+0x21212>
   11f08:	mov    rsi,rbp
   11f0b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   11f0d:	seta   al
   11f10:	sbb    al,0x0
   11f12:	test   al,al
   11f14:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11f1a:	mov    ecx,0x8
   11f1f:	lea    rdi,[rip+0x12fd3]        # 24ef9 <__sprintf_chk@plt+0x21219>
   11f26:	mov    rsi,rbp
   11f29:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   11f2b:	seta   al
   11f2e:	sbb    al,0x0
   11f30:	test   al,al
   11f32:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11f38:	mov    ecx,0x7
   11f3d:	lea    rdi,[rip+0x12fbd]        # 24f01 <__sprintf_chk@plt+0x21221>
   11f44:	mov    rsi,rbp
   11f47:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   11f49:	seta   al
   11f4c:	sbb    al,0x0
   11f4e:	test   al,al
   11f50:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11f56:	lea    rsi,[rip+0x12fab]        # 24f08 <__sprintf_chk@plt+0x21228>
   11f5d:	mov    rdi,rbp
   11f60:	call   39b0 <strcmp@plt>
   11f65:	test   eax,eax
   11f67:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11f6d:	lea    rsi,[rip+0x12f9f]        # 24f13 <__sprintf_chk@plt+0x21233>
   11f74:	mov    rdi,rbp
   11f77:	call   39b0 <strcmp@plt>
   11f7c:	test   eax,eax
   11f7e:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11f84:	lea    rsi,[rip+0x12f8e]        # 24f19 <__sprintf_chk@plt+0x21239>
   11f8b:	mov    rdi,rbp
   11f8e:	call   39b0 <strcmp@plt>
   11f93:	test   eax,eax
   11f95:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11f9b:	lea    rsi,[rip+0x12f7d]        # 24f1f <__sprintf_chk@plt+0x2123f>
   11fa2:	mov    rdi,rbp
   11fa5:	call   39b0 <strcmp@plt>
   11faa:	test   eax,eax
   11fac:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11fb2:	lea    rsi,[rip+0x12f6d]        # 24f26 <__sprintf_chk@plt+0x21246>
   11fb9:	mov    rdi,rbp
   11fbc:	call   39b0 <strcmp@plt>
   11fc1:	test   eax,eax
   11fc3:	je     11d8c <__sprintf_chk@plt+0xe0ac>
   11fc9:	lea    rsi,[rip+0x12f5d]        # 24f2d <__sprintf_chk@plt+0x2124d>
   11fd0:	mov    rdi,rbp
   11fd3:	call   39b0 <strcmp@plt>
   11fd8:	test   eax,eax
   11fda:	sete   r13b
   11fde:	jmp    11d8c <__sprintf_chk@plt+0xe0ac>
   11fe3:	nop    DWORD PTR [rax+rax*1+0x0]
   11fe8:	cmp    BYTE PTR [r13+0x0],0x2f
   11fed:	je     124bd <__sprintf_chk@plt+0xe7dd>
   11ff3:	mov    ecx,0x4
   11ff8:	mov    rsi,rbp
   11ffb:	mov    eax,0x1
   12000:	lea    rdi,[rip+0x12f3b]        # 24f42 <__sprintf_chk@plt+0x21262>
   12007:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   12009:	seta   cl
   1200c:	sbb    cl,0x0
   1200f:	test   cl,cl
   12011:	je     11dbc <__sprintf_chk@plt+0xe0dc>
   12017:	mov    ecx,0xb
   1201c:	lea    rdi,[rip+0x12f23]        # 24f46 <__sprintf_chk@plt+0x21266>
   12023:	mov    rsi,rbp
   12026:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   12028:	seta   cl
   1202b:	sbb    cl,0x0
   1202e:	test   cl,cl
   12030:	je     11dbc <__sprintf_chk@plt+0xe0dc>
   12036:	mov    ecx,0x7
   1203b:	lea    rsi,[rip+0x12f0f]        # 24f51 <__sprintf_chk@plt+0x21271>
   12042:	mov    rdi,r13
   12045:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   12047:	seta   al
   1204a:	sbb    al,0x0
   1204c:	test   al,al
   1204e:	sete   al
   12051:	jmp    11dbc <__sprintf_chk@plt+0xe0dc>
   12056:	cs nop WORD PTR [rax+rax*1+0x0]
   12060:	lea    rsi,[rip+0x12f0a]        # 24f71 <__sprintf_chk@plt+0x21291>
   12067:	lea    rdi,[rip+0x12eea]        # 24f58 <__sprintf_chk@plt+0x21278>
   1206e:	call   3ab0 <setmntent@plt>
   12073:	mov    r12,rax
   12076:	test   rax,rax
   12079:	je     11e1f <__sprintf_chk@plt+0xe13f>
   1207f:	lea    rax,[rsp+0x30]
   12084:	mov    rdi,r12
   12087:	lea    r15,[rip+0x12e3c]        # 24eca <__sprintf_chk@plt+0x211ea>
   1208e:	mov    QWORD PTR [rsp+0x8],rax
   12093:	call   3aa0 <getmntent@plt>
   12098:	mov    r14,rax
   1209b:	test   rax,rax
   1209e:	je     12327 <__sprintf_chk@plt+0xe647>
   120a4:	nop    DWORD PTR [rax+0x0]
   120a8:	lea    rsi,[rip+0x12eb3]        # 24f62 <__sprintf_chk@plt+0x21282>
   120af:	mov    rdi,r14
   120b2:	call   3c90 <hasmntopt@plt>
   120b7:	mov    edi,0x38
   120bc:	mov    rbx,rax
   120bf:	call   e370 <__sprintf_chk@plt+0xa690>
   120c4:	mov    rdi,QWORD PTR [r14]
   120c7:	mov    r13,rax
   120ca:	call   e4e0 <__sprintf_chk@plt+0xa800>
   120cf:	mov    rdi,QWORD PTR [r14+0x8]
   120d3:	mov    QWORD PTR [r13+0x0],rax
   120d7:	call   e4e0 <__sprintf_chk@plt+0xa800>
   120dc:	mov    QWORD PTR [r13+0x10],0x0
   120e4:	mov    rdi,QWORD PTR [r14+0x10]
   120e8:	mov    r14d,0x1
   120ee:	mov    QWORD PTR [r13+0x8],rax
   120f2:	call   e4e0 <__sprintf_chk@plt+0xa800>
   120f7:	mov    ecx,0x7
   120fc:	or     BYTE PTR [r13+0x28],0x4
   12101:	lea    rdi,[rip+0x12db2]        # 24eba <__sprintf_chk@plt+0x211da>
   12108:	mov    rsi,rax
   1210b:	mov    QWORD PTR [r13+0x18],rax
   1210f:	mov    rbp,rax
   12112:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   12114:	seta   al
   12117:	sbb    al,0x0
   12119:	test   al,al
   1211b:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   12121:	mov    ecx,0x9
   12126:	mov    rsi,rbp
   12129:	lea    rdi,[rip+0x12d91]        # 24ec1 <__sprintf_chk@plt+0x211e1>
   12130:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   12132:	seta   al
   12135:	sbb    al,0x0
   12137:	test   al,al
   12139:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   1213f:	mov    ecx,0xc
   12144:	mov    rsi,rbp
   12147:	mov    rdi,r15
   1214a:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1214c:	seta   al
   1214f:	sbb    al,0x0
   12151:	test   al,al
   12153:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   12159:	mov    ecx,0x5
   1215e:	mov    rsi,rbp
   12161:	lea    rdi,[rip+0x12d6e]        # 24ed6 <__sprintf_chk@plt+0x211f6>
   12168:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1216a:	seta   al
   1216d:	sbb    al,0x0
   1216f:	test   al,al
   12171:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   12177:	mov    ecx,0x9
   1217c:	lea    rdi,[rip+0x12d58]        # 24edb <__sprintf_chk@plt+0x211fb>
   12183:	mov    rsi,rbp
   12186:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   12188:	seta   al
   1218b:	sbb    al,0x0
   1218d:	test   al,al
   1218f:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   12195:	mov    ecx,0x6
   1219a:	lea    rdi,[rip+0x12d43]        # 24ee4 <__sprintf_chk@plt+0x21204>
   121a1:	mov    rsi,rbp
   121a4:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   121a6:	seta   al
   121a9:	sbb    al,0x0
   121ab:	test   al,al
   121ad:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   121b3:	mov    ecx,0x8
   121b8:	lea    rdi,[rip+0x12d2b]        # 24eea <__sprintf_chk@plt+0x2120a>
   121bf:	mov    rsi,rbp
   121c2:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   121c4:	seta   al
   121c7:	sbb    al,0x0
   121c9:	test   al,al
   121cb:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   121d1:	mov    ecx,0x7
   121d6:	lea    rdi,[rip+0x12d15]        # 24ef2 <__sprintf_chk@plt+0x21212>
   121dd:	mov    rsi,rbp
   121e0:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   121e2:	seta   al
   121e5:	sbb    al,0x0
   121e7:	test   al,al
   121e9:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   121ef:	mov    ecx,0x8
   121f4:	lea    rdi,[rip+0x12cfe]        # 24ef9 <__sprintf_chk@plt+0x21219>
   121fb:	mov    rsi,rbp
   121fe:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   12200:	seta   al
   12203:	sbb    al,0x0
   12205:	test   al,al
   12207:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   1220d:	mov    ecx,0x7
   12212:	lea    rdi,[rip+0x12ce8]        # 24f01 <__sprintf_chk@plt+0x21221>
   12219:	mov    rsi,rbp
   1221c:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1221e:	seta   al
   12221:	sbb    al,0x0
   12223:	test   al,al
   12225:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   1222b:	mov    ecx,0xb
   12230:	lea    rdi,[rip+0x12cd1]        # 24f08 <__sprintf_chk@plt+0x21228>
   12237:	mov    rsi,rbp
   1223a:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1223c:	seta   al
   1223f:	sbb    al,0x0
   12241:	test   al,al
   12243:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   12245:	lea    rsi,[rip+0x12cc7]        # 24f13 <__sprintf_chk@plt+0x21233>
   1224c:	mov    rdi,rbp
   1224f:	call   39b0 <strcmp@plt>
   12254:	test   eax,eax
   12256:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   12258:	lea    rsi,[rip+0x12cba]        # 24f19 <__sprintf_chk@plt+0x21239>
   1225f:	mov    rdi,rbp
   12262:	call   39b0 <strcmp@plt>
   12267:	test   eax,eax
   12269:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   1226b:	lea    rsi,[rip+0x12cad]        # 24f1f <__sprintf_chk@plt+0x2123f>
   12272:	mov    rdi,rbp
   12275:	call   39b0 <strcmp@plt>
   1227a:	test   eax,eax
   1227c:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   1227e:	lea    rsi,[rip+0x12ca1]        # 24f26 <__sprintf_chk@plt+0x21246>
   12285:	mov    rdi,rbp
   12288:	call   39b0 <strcmp@plt>
   1228d:	test   eax,eax
   1228f:	je     122b8 <__sprintf_chk@plt+0xe5d8>
   12291:	lea    rsi,[rip+0x12c95]        # 24f2d <__sprintf_chk@plt+0x2124d>
   12298:	mov    rdi,rbp
   1229b:	call   39b0 <strcmp@plt>
   122a0:	test   rbx,rbx
   122a3:	sete   r9b
   122a7:	test   eax,eax
   122a9:	sete   al
   122ac:	and    r9d,eax
   122af:	mov    r14d,r9d
   122b2:	nop    WORD PTR [rax+rax*1+0x0]
   122b8:	movzx  eax,BYTE PTR [r13+0x28]
   122bd:	mov    esi,0x3a
   122c2:	and    eax,0xfffffffe
   122c5:	or     eax,r14d
   122c8:	mov    r14,QWORD PTR [r13+0x0]
   122cc:	mov    BYTE PTR [r13+0x28],al
   122d0:	mov    rdi,r14
   122d3:	call   3880 <strchr@plt>
   122d8:	mov    r9,rax
   122db:	mov    eax,0x1
   122e0:	test   r9,r9
   122e3:	je     123b0 <__sprintf_chk@plt+0xe6d0>
   122e9:	lea    ecx,[rax+rax*1]
   122ec:	movzx  eax,BYTE PTR [r13+0x28]
   122f1:	mov    QWORD PTR [r13+0x20],0xffffffffffffffff
   122f9:	mov    rdi,r12
   122fc:	and    eax,0xfffffffd
   122ff:	or     eax,ecx
   12301:	mov    BYTE PTR [r13+0x28],al
   12305:	mov    rax,QWORD PTR [rsp+0x8]
   1230a:	mov    QWORD PTR [rax],r13
   1230d:	lea    rax,[r13+0x30]
   12311:	mov    QWORD PTR [rsp+0x8],rax
   12316:	call   3aa0 <getmntent@plt>
   1231b:	mov    r14,rax
   1231e:	test   rax,rax
   12321:	jne    120a8 <__sprintf_chk@plt+0xe3c8>
   12327:	mov    rdi,r12
   1232a:	call   36d0 <endmntent@plt>
   1232f:	test   eax,eax
   12331:	jne    11e0e <__sprintf_chk@plt+0xe12e>
   12337:	call   36f0 <__errno_location@plt>
   1233c:	mov    r14d,DWORD PTR [rax]
   1233f:	mov    r13,rax
   12342:	mov    rax,QWORD PTR [rsp+0x8]
   12347:	mov    QWORD PTR [rax],0x0
   1234e:	mov    rbx,QWORD PTR [rsp+0x30]
   12353:	test   rbx,rbx
   12356:	jne    12376 <__sprintf_chk@plt+0xe696>
   12358:	jmp    12420 <__sprintf_chk@plt+0xe740>
   1235d:	nop    DWORD PTR [rax]
   12360:	mov    rdi,rbp
   12363:	call   3680 <free@plt>
   12368:	mov    QWORD PTR [rsp+0x30],rbx
   1236d:	test   rbx,rbx
   12370:	je     12420 <__sprintf_chk@plt+0xe740>
   12376:	mov    rbp,rbx
   12379:	mov    rbx,QWORD PTR [rbx+0x30]
   1237d:	mov    rdi,QWORD PTR [rbp+0x0]
   12381:	call   3680 <free@plt>
   12386:	mov    rdi,QWORD PTR [rbp+0x8]
   1238a:	call   3680 <free@plt>
   1238f:	mov    rdi,QWORD PTR [rbp+0x10]
   12393:	call   3680 <free@plt>
   12398:	test   BYTE PTR [rbp+0x28],0x4
   1239c:	je     12360 <__sprintf_chk@plt+0xe680>
   1239e:	mov    rdi,QWORD PTR [rbp+0x18]
   123a2:	call   3680 <free@plt>
   123a7:	jmp    12360 <__sprintf_chk@plt+0xe680>
   123a9:	nop    DWORD PTR [rax+0x0]
   123b0:	cmp    BYTE PTR [r14],0x2f
   123b4:	je     12450 <__sprintf_chk@plt+0xe770>
   123ba:	mov    ecx,0x4
   123bf:	lea    rdi,[rip+0x12b7c]        # 24f42 <__sprintf_chk@plt+0x21262>
   123c6:	mov    rsi,rbp
   123c9:	mov    eax,0x1
   123ce:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   123d0:	seta   cl
   123d3:	sbb    cl,0x0
   123d6:	test   cl,cl
   123d8:	je     122e9 <__sprintf_chk@plt+0xe609>
   123de:	mov    ecx,0xb
   123e3:	lea    rdi,[rip+0x12b5c]        # 24f46 <__sprintf_chk@plt+0x21266>
   123ea:	mov    rsi,rbp
   123ed:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   123ef:	seta   cl
   123f2:	sbb    cl,0x0
   123f5:	test   cl,cl
   123f7:	je     122e9 <__sprintf_chk@plt+0xe609>
   123fd:	mov    ecx,0x7
   12402:	lea    rsi,[rip+0x12b48]        # 24f51 <__sprintf_chk@plt+0x21271>
   12409:	mov    rdi,r14
   1240c:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1240e:	seta   al
   12411:	sbb    al,0x0
   12413:	test   al,al
   12415:	sete   al
   12418:	jmp    122e9 <__sprintf_chk@plt+0xe609>
   1241d:	nop    DWORD PTR [rax]
   12420:	mov    DWORD PTR [r13+0x0],r14d
   12424:	xor    r12d,r12d
   12427:	jmp    11e1f <__sprintf_chk@plt+0xe13f>
   1242c:	nop    DWORD PTR [rax+0x0]
   12430:	call   36f0 <__errno_location@plt>
   12435:	mov    rdi,r12
   12438:	mov    r14d,DWORD PTR [rax]
   1243b:	mov    r13,rax
   1243e:	call   f210 <__sprintf_chk@plt+0xb530>
   12443:	mov    DWORD PTR [r13+0x0],r14d
   12447:	jmp    12342 <__sprintf_chk@plt+0xe662>
   1244c:	nop    DWORD PTR [rax+0x0]
   12450:	cmp    BYTE PTR [r14+0x1],0x2f
   12455:	jne    123ba <__sprintf_chk@plt+0xe6da>
   1245b:	mov    ecx,0x6
   12460:	lea    rdi,[rip+0x12acb]        # 24f32 <__sprintf_chk@plt+0x21252>
   12467:	mov    rsi,rbp
   1246a:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1246c:	seta   cl
   1246f:	sbb    cl,0x0
   12472:	test   cl,cl
   12474:	je     122e9 <__sprintf_chk@plt+0xe609>
   1247a:	mov    ecx,0x5
   1247f:	lea    rdi,[rip+0x12ab2]        # 24f38 <__sprintf_chk@plt+0x21258>
   12486:	mov    rsi,rbp
   12489:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1248b:	seta   cl
   1248e:	sbb    cl,0x0
   12491:	test   cl,cl
   12493:	je     122e9 <__sprintf_chk@plt+0xe609>
   12499:	mov    ecx,0x5
   1249e:	lea    rdi,[rip+0x12a98]        # 24f3d <__sprintf_chk@plt+0x2125d>
   124a5:	mov    rsi,rbp
   124a8:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   124aa:	seta   cl
   124ad:	sbb    cl,0x0
   124b0:	test   cl,cl
   124b2:	je     122e9 <__sprintf_chk@plt+0xe609>
   124b8:	jmp    123ba <__sprintf_chk@plt+0xe6da>
   124bd:	cmp    BYTE PTR [r13+0x1],0x2f
   124c2:	jne    11ff3 <__sprintf_chk@plt+0xe313>
   124c8:	mov    ecx,0x6
   124cd:	lea    rdi,[rip+0x12a5e]        # 24f32 <__sprintf_chk@plt+0x21252>
   124d4:	mov    rsi,rbp
   124d7:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   124d9:	seta   cl
   124dc:	sbb    cl,0x0
   124df:	test   cl,cl
   124e1:	je     11dbc <__sprintf_chk@plt+0xe0dc>
   124e7:	mov    ecx,0x5
   124ec:	lea    rdi,[rip+0x12a45]        # 24f38 <__sprintf_chk@plt+0x21258>
   124f3:	mov    rsi,rbp
   124f6:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   124f8:	seta   cl
   124fb:	sbb    cl,0x0
   124fe:	test   cl,cl
   12500:	je     11dbc <__sprintf_chk@plt+0xe0dc>
   12506:	mov    ecx,0x5
   1250b:	lea    rdi,[rip+0x12a2b]        # 24f3d <__sprintf_chk@plt+0x2125d>
   12512:	mov    rsi,rbp
   12515:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   12517:	seta   cl
   1251a:	sbb    cl,0x0
   1251d:	test   cl,cl
   1251f:	je     11dbc <__sprintf_chk@plt+0xe0dc>
   12525:	jmp    11ff3 <__sprintf_chk@plt+0xe313>
   1252a:	call   3840 <__stack_chk_fail@plt>
   1252f:	nop
   12530:	endbr64 
   12534:	push   rbp
   12535:	mov    rbp,rdi
   12538:	mov    rdi,QWORD PTR [rdi]
   1253b:	call   3680 <free@plt>
   12540:	mov    rdi,QWORD PTR [rbp+0x8]
   12544:	call   3680 <free@plt>
   12549:	mov    rdi,QWORD PTR [rbp+0x10]
   1254d:	call   3680 <free@plt>
   12552:	test   BYTE PTR [rbp+0x28],0x4
   12556:	jne    12568 <__sprintf_chk@plt+0xe888>
   12558:	mov    rdi,rbp
   1255b:	pop    rbp
   1255c:	jmp    3680 <free@plt>
   12561:	nop    DWORD PTR [rax+0x0]
   12568:	mov    rdi,QWORD PTR [rbp+0x18]
   1256c:	call   3680 <free@plt>
   12571:	mov    rdi,rbp
   12574:	pop    rbp
   12575:	jmp    3680 <free@plt>
   1257a:	nop    WORD PTR [rax+rax*1+0x0]
   12580:	test   rdi,rdi
   12583:	sete   al
   12586:	test   rsi,rsi
   12589:	sete   r8b
   1258d:	or     r8b,al
   12590:	jne    125c8 <__sprintf_chk@plt+0xe8e8>
   12592:	mov    rax,QWORD PTR [rdi+0x8]
   12596:	cmp    rax,QWORD PTR [rsi+0x8]
   1259a:	je     125b2 <__sprintf_chk@plt+0xe8d2>
   1259c:	mov    eax,r8d
   1259f:	ret    
   125a0:	mov    rdx,QWORD PTR [rsi+0x10]
   125a4:	mov    rcx,QWORD PTR [rdi+0x10]
   125a8:	mov    rdx,QWORD PTR [rdx+rax*8]
   125ac:	cmp    QWORD PTR [rcx+rax*8],rdx
   125b0:	jne    1259c <__sprintf_chk@plt+0xe8bc>
   125b2:	sub    rax,0x1
   125b6:	jns    125a0 <__sprintf_chk@plt+0xe8c0>
   125b8:	mov    r8d,0x1
   125be:	mov    eax,r8d
   125c1:	ret    
   125c2:	nop    WORD PTR [rax+rax*1+0x0]
   125c8:	xor    r8d,r8d
   125cb:	mov    eax,r8d
   125ce:	ret    
   125cf:	nop
   125d0:	mov    rdx,QWORD PTR [rdi+0x8]
   125d4:	xor    eax,eax
   125d6:	test   rdx,rdx
   125d9:	jle    1260d <__sprintf_chk@plt+0xe92d>
   125db:	mov    rdi,QWORD PTR [rdi+0x10]
   125df:	sub    rdx,0x1
   125e3:	xor    ecx,ecx
   125e5:	jmp    12600 <__sprintf_chk@plt+0xe920>
   125e7:	nop    WORD PTR [rax+rax*1+0x0]
   125f0:	lea    rax,[rcx+rdx*1]
   125f4:	shr    rax,1
   125f7:	cmp    QWORD PTR [rdi+rax*8],rsi
   125fb:	jl     12610 <__sprintf_chk@plt+0xe930>
   125fd:	mov    rdx,rax
   12600:	cmp    rcx,rdx
   12603:	jb     125f0 <__sprintf_chk@plt+0xe910>
   12605:	xor    eax,eax
   12607:	cmp    QWORD PTR [rdi+rcx*8],rsi
   1260b:	je     12620 <__sprintf_chk@plt+0xe940>
   1260d:	ret    
   1260e:	xchg   ax,ax
   12610:	lea    rcx,[rax+0x1]
   12614:	jmp    12600 <__sprintf_chk@plt+0xe920>
   12616:	cs nop WORD PTR [rax+rax*1+0x0]
   12620:	lea    rax,[rcx+0x1]
   12624:	ret    
   12625:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   12630:	mov    rax,QWORD PTR [rsi+0x48]
   12634:	mov    rcx,rdx
   12637:	cmp    QWORD PTR [rsi+0x68],rax
   1263b:	jle    126b0 <__sprintf_chk@plt+0xe9d0>
   1263d:	mov    r8,QWORD PTR [rsi+0x8]
   12641:	cmp    DWORD PTR [rsi+0x90],0x1
   12648:	movzx  edx,BYTE PTR [r8+rax*1]
   1264d:	mov    BYTE PTR [rdi],dl
   1264f:	jle    12662 <__sprintf_chk@plt+0xe982>
   12651:	cmp    rax,QWORD PTR [rsi+0x30]
   12655:	je     12662 <__sprintf_chk@plt+0xe982>
   12657:	mov    r9,QWORD PTR [rsi+0x10]
   1265b:	cmp    DWORD PTR [r9+rax*4],0xffffffff
   12660:	je     1268f <__sprintf_chk@plt+0xe9af>
   12662:	cmp    dl,0x5c
   12665:	je     12680 <__sprintf_chk@plt+0xe9a0>
   12667:	cmp    dl,0x5b
   1266a:	je     126c0 <__sprintf_chk@plt+0xe9e0>
   1266c:	cmp    dl,0x5d
   1266f:	je     126f0 <__sprintf_chk@plt+0xea10>
   12671:	cmp    dl,0x5e
   12674:	jne    126a0 <__sprintf_chk@plt+0xe9c0>
   12676:	mov    BYTE PTR [rdi+0x8],0x19
   1267a:	mov    eax,0x1
   1267f:	ret    
   12680:	and    ecx,0x1
   12683:	je     1268f <__sprintf_chk@plt+0xe9af>
   12685:	lea    rdx,[rax+0x1]
   12689:	cmp    rdx,QWORD PTR [rsi+0x58]
   1268d:	jl     12700 <__sprintf_chk@plt+0xea20>
   1268f:	mov    BYTE PTR [rdi+0x8],0x1
   12693:	mov    eax,0x1
   12698:	ret    
   12699:	nop    DWORD PTR [rax+0x0]
   126a0:	cmp    dl,0x2d
   126a3:	jne    1268f <__sprintf_chk@plt+0xe9af>
   126a5:	mov    BYTE PTR [rdi+0x8],0x16
   126a9:	mov    eax,0x1
   126ae:	ret    
   126af:	nop
   126b0:	mov    BYTE PTR [rdi+0x8],0x2
   126b4:	xor    eax,eax
   126b6:	ret    
   126b7:	nop    WORD PTR [rax+rax*1+0x0]
   126c0:	lea    rdx,[rax+0x1]
   126c4:	cmp    rdx,QWORD PTR [rsi+0x58]
   126c8:	jge    126de <__sprintf_chk@plt+0xe9fe>
   126ca:	movzx  eax,BYTE PTR [r8+rax*1+0x1]
   126d0:	mov    BYTE PTR [rdi],al
   126d2:	cmp    al,0x3a
   126d4:	je     12740 <__sprintf_chk@plt+0xea60>
   126d6:	cmp    al,0x3d
   126d8:	je     12730 <__sprintf_chk@plt+0xea50>
   126da:	cmp    al,0x2e
   126dc:	je     12720 <__sprintf_chk@plt+0xea40>
   126de:	mov    BYTE PTR [rdi+0x8],0x1
   126e2:	mov    eax,0x1
   126e7:	mov    BYTE PTR [rdi],0x5b
   126ea:	ret    
   126eb:	nop    DWORD PTR [rax+rax*1+0x0]
   126f0:	mov    BYTE PTR [rdi+0x8],0x15
   126f4:	mov    eax,0x1
   126f9:	ret    
   126fa:	nop    WORD PTR [rax+rax*1+0x0]
   12700:	mov    QWORD PTR [rsi+0x48],rdx
   12704:	movzx  eax,BYTE PTR [r8+rax*1+0x1]
   1270a:	mov    BYTE PTR [rdi+0x8],0x1
   1270e:	mov    BYTE PTR [rdi],al
   12710:	mov    eax,0x1
   12715:	ret    
   12716:	cs nop WORD PTR [rax+rax*1+0x0]
   12720:	mov    BYTE PTR [rdi+0x8],0x1a
   12724:	mov    eax,0x2
   12729:	ret    
   1272a:	nop    WORD PTR [rax+rax*1+0x0]
   12730:	mov    BYTE PTR [rdi+0x8],0x1c
   12734:	mov    eax,0x2
   12739:	ret    
   1273a:	nop    WORD PTR [rax+rax*1+0x0]
   12740:	and    ecx,0x4
   12743:	je     126de <__sprintf_chk@plt+0xe9fe>
   12745:	mov    BYTE PTR [rdi+0x8],0x1e
   12749:	mov    eax,0x2
   1274e:	ret    
   1274f:	nop
   12750:	push   r15
   12752:	mov    r15d,esi
   12755:	push   r14
   12757:	push   r13
   12759:	push   r12
   1275b:	push   rbp
   1275c:	push   rbx
   1275d:	sub    rsp,0x58
   12761:	mov    r14,QWORD PTR [rdi+0x98]
   12768:	mov    QWORD PTR [rsp+0x10],rcx
   1276d:	lea    rcx,[rcx+rcx*2]
   12771:	mov    rax,QWORD PTR [r14+0x30]
   12775:	lea    r13,[rax+rcx*8]
   12779:	cmp    QWORD PTR [r13+0x8],0x0
   1277e:	jle    1293b <__sprintf_chk@plt+0xec5b>
   12784:	lea    rax,[r8+r8*2]
   12788:	mov    ecx,edx
   1278a:	mov    r15,r14
   1278d:	xor    ebx,ebx
   1278f:	shl    rax,0x4
   12793:	mov    r14,rdi
   12796:	mov    QWORD PTR [rsp+0x38],rax
   1279b:	mov    eax,0x1
   127a0:	shl    rax,cl
   127a3:	mov    QWORD PTR [rsp+0x28],rax
   127a8:	not    rax
   127ab:	mov    QWORD PTR [rsp+0x30],rax
   127b0:	mov    eax,esi
   127b2:	and    eax,0x1
   127b5:	mov    DWORD PTR [rsp+0x1c],eax
   127b9:	mov    eax,esi
   127bb:	and    eax,0x2
   127be:	mov    DWORD PTR [rsp+0x18],eax
   127c2:	jmp    127db <__sprintf_chk@plt+0xeafb>
   127c4:	nop    DWORD PTR [rax+0x0]
   127c8:	cmp    cl,0x4
   127cb:	je     12848 <__sprintf_chk@plt+0xeb68>
   127cd:	add    rbx,0x1
   127d1:	cmp    QWORD PTR [r13+0x8],rbx
   127d5:	jle    12938 <__sprintf_chk@plt+0xec58>
   127db:	mov    rax,QWORD PTR [r13+0x10]
   127df:	mov    rbp,QWORD PTR [rax+rbx*8]
   127e3:	mov    rax,rbp
   127e6:	shl    rax,0x4
   127ea:	add    rax,QWORD PTR [r15]
   127ed:	movzx  ecx,BYTE PTR [rax+0x8]
   127f1:	cmp    cl,0x8
   127f4:	je     12820 <__sprintf_chk@plt+0xeb40>
   127f6:	cmp    cl,0x9
   127f9:	jne    127c8 <__sprintf_chk@plt+0xeae8>
   127fb:	mov    ecx,DWORD PTR [rsp+0x18]
   127ff:	test   ecx,ecx
   12801:	je     127cd <__sprintf_chk@plt+0xeaed>
   12803:	cmp    QWORD PTR [rax],rdx
   12806:	jne    127cd <__sprintf_chk@plt+0xeaed>
   12808:	add    rsp,0x58
   1280c:	xor    eax,eax
   1280e:	pop    rbx
   1280f:	pop    rbp
   12810:	pop    r12
   12812:	pop    r13
   12814:	pop    r14
   12816:	pop    r15
   12818:	ret    
   12819:	nop    DWORD PTR [rax+0x0]
   12820:	mov    edi,DWORD PTR [rsp+0x1c]
   12824:	test   edi,edi
   12826:	je     127cd <__sprintf_chk@plt+0xeaed>
   12828:	cmp    QWORD PTR [rax],rdx
   1282b:	jne    127cd <__sprintf_chk@plt+0xeaed>
   1282d:	add    rsp,0x58
   12831:	mov    eax,0xffffffff
   12836:	pop    rbx
   12837:	pop    rbp
   12838:	pop    r12
   1283a:	pop    r13
   1283c:	pop    r14
   1283e:	pop    r15
   12840:	ret    
   12841:	nop    DWORD PTR [rax+0x0]
   12848:	cmp    r8,0xffffffffffffffff
   1284c:	je     127cd <__sprintf_chk@plt+0xeaed>
   12852:	lea    rax,[rbp+rbp*2+0x0]
   12857:	mov    QWORD PTR [rsp+0x40],r13
   1285c:	mov    r12,QWORD PTR [rsp+0x38]
   12861:	mov    r13d,esi
   12864:	shl    rax,0x3
   12868:	mov    QWORD PTR [rsp+0x48],rbx
   1286d:	add    r12,QWORD PTR [r14+0xd8]
   12874:	mov    rbx,r14
   12877:	mov    QWORD PTR [rsp+0x20],rax
   1287c:	mov    r14,r15
   1287f:	mov    r15,rbp
   12882:	mov    rbp,rdx
   12885:	nop    DWORD PTR [rax]
   12888:	cmp    QWORD PTR [r12],r15
   1288c:	jne    12900 <__sprintf_chk@plt+0xec20>
   1288e:	cmp    rbp,0x3f
   12892:	jg     128a0 <__sprintf_chk@plt+0xebc0>
   12894:	mov    rax,QWORD PTR [rsp+0x28]
   12899:	and    rax,QWORD PTR [r12+0x20]
   1289e:	je     12900 <__sprintf_chk@plt+0xec20>
   128a0:	mov    rax,QWORD PTR [r14+0x28]
   128a4:	mov    rsi,QWORD PTR [rsp+0x20]
   128a9:	mov    rax,QWORD PTR [rax+rsi*1+0x10]
   128ae:	mov    rcx,QWORD PTR [rax]
   128b1:	cmp    QWORD PTR [rsp+0x10],rcx
   128b6:	je     12950 <__sprintf_chk@plt+0xec70>
   128bc:	mov    rdx,rbp
   128bf:	mov    esi,r13d
   128c2:	mov    rdi,rbx
   128c5:	mov    QWORD PTR [rsp+0x8],r8
   128ca:	call   12750 <__sprintf_chk@plt+0xea70>
   128cf:	mov    r8,QWORD PTR [rsp+0x8]
   128d4:	cmp    eax,0xffffffff
   128d7:	je     1282d <__sprintf_chk@plt+0xeb4d>
   128dd:	test   eax,eax
   128df:	jne    128ef <__sprintf_chk@plt+0xec0f>
   128e1:	mov    r9d,DWORD PTR [rsp+0x18]
   128e6:	test   r9d,r9d
   128e9:	jne    12808 <__sprintf_chk@plt+0xeb28>
   128ef:	cmp    rbp,0x3f
   128f3:	jg     12900 <__sprintf_chk@plt+0xec20>
   128f5:	mov    rax,QWORD PTR [rsp+0x30]
   128fa:	and    QWORD PTR [r12+0x20],rax
   128ff:	nop
   12900:	add    r12,0x30
   12904:	cmp    BYTE PTR [r12-0x8],0x0
   1290a:	jne    12888 <__sprintf_chk@plt+0xeba8>
   12910:	mov    r15,r14
   12913:	mov    esi,r13d
   12916:	mov    r14,rbx
   12919:	mov    r13,QWORD PTR [rsp+0x40]
   1291e:	mov    rbx,QWORD PTR [rsp+0x48]
   12923:	mov    rdx,rbp
   12926:	add    rbx,0x1
   1292a:	cmp    QWORD PTR [r13+0x8],rbx
   1292e:	jg     127db <__sprintf_chk@plt+0xeafb>
   12934:	nop    DWORD PTR [rax+0x0]
   12938:	mov    r15d,esi
   1293b:	add    rsp,0x58
   1293f:	mov    eax,r15d
   12942:	pop    rbx
   12943:	sar    eax,1
   12945:	pop    rbp
   12946:	pop    r12
   12948:	pop    r13
   1294a:	pop    r14
   1294c:	pop    r15
   1294e:	ret    
   1294f:	nop
   12950:	mov    esi,r13d
   12953:	add    rsp,0x58
   12957:	and    esi,0x1
   1295a:	pop    rbx
   1295b:	pop    rbp
   1295c:	mov    eax,esi
   1295e:	pop    r12
   12960:	pop    r13
   12962:	neg    eax
   12964:	pop    r14
   12966:	pop    r15
   12968:	ret    
   12969:	nop    DWORD PTR [rax+0x0]
   12970:	mov    r9,QWORD PTR [rdi+0xc8]
   12977:	xor    r8d,r8d
   1297a:	mov    rdx,r9
   1297d:	jmp    129a5 <__sprintf_chk@plt+0xecc5>
   1297f:	nop
   12980:	lea    rax,[rdx+r8*1]
   12984:	mov    rcx,rax
   12987:	and    rax,0xfffffffffffffffe
   1298b:	sar    rcx,1
   1298e:	add    rax,rcx
   12991:	shl    rax,0x4
   12995:	add    rax,QWORD PTR [rdi+0xd8]
   1299c:	cmp    QWORD PTR [rax+0x8],rsi
   129a0:	jl     129d8 <__sprintf_chk@plt+0xecf8>
   129a2:	mov    rdx,rcx
   129a5:	cmp    rdx,r8
   129a8:	jg     12980 <__sprintf_chk@plt+0xeca0>
   129aa:	cmp    r9,r8
   129ad:	jle    129de <__sprintf_chk@plt+0xecfe>
   129af:	lea    rax,[r8+r8*2]
   129b3:	shl    rax,0x4
   129b7:	add    rax,QWORD PTR [rdi+0xd8]
   129be:	cmp    QWORD PTR [rax+0x8],rsi
   129c2:	mov    rax,0xffffffffffffffff
   129c9:	cmovne r8,rax
   129cd:	mov    rax,r8
   129d0:	ret    
   129d1:	nop    DWORD PTR [rax+0x0]
   129d8:	lea    r8,[rcx+0x1]
   129dc:	jmp    129a5 <__sprintf_chk@plt+0xecc5>
   129de:	mov    r8,0xffffffffffffffff
   129e5:	jmp    129cd <__sprintf_chk@plt+0xeced>
   129e7:	nop    WORD PTR [rax+rax*1+0x0]
   129f0:	push   rbp
   129f1:	mov    rbp,rsi
   129f4:	push   rbx
   129f5:	mov    rbx,rdi
   129f8:	sub    rsp,0x8
   129fc:	cmp    DWORD PTR [rdi+0x90],0x1
   12a03:	jle    12a4d <__sprintf_chk@plt+0xed6d>
   12a05:	movabs rax,0x1fffffffffffffff
   12a0f:	cmp    rsi,rax
   12a12:	ja     12a80 <__sprintf_chk@plt+0xeda0>
   12a14:	mov    rdi,QWORD PTR [rdi+0x10]
   12a18:	lea    rsi,[rsi*4+0x0]
   12a20:	call   3b20 <realloc@plt>
   12a25:	test   rax,rax
   12a28:	je     12a80 <__sprintf_chk@plt+0xeda0>
   12a2a:	mov    rdi,QWORD PTR [rbx+0x18]
   12a2e:	mov    QWORD PTR [rbx+0x10],rax
   12a32:	test   rdi,rdi
   12a35:	je     12a4d <__sprintf_chk@plt+0xed6d>
   12a37:	lea    rsi,[rbp*8+0x0]
   12a3f:	call   3b20 <realloc@plt>
   12a44:	test   rax,rax
   12a47:	je     12a80 <__sprintf_chk@plt+0xeda0>
   12a49:	mov    QWORD PTR [rbx+0x18],rax
   12a4d:	cmp    BYTE PTR [rbx+0x8b],0x0
   12a54:	jne    12a68 <__sprintf_chk@plt+0xed88>
   12a56:	mov    QWORD PTR [rbx+0x40],rbp
   12a5a:	add    rsp,0x8
   12a5e:	xor    eax,eax
   12a60:	pop    rbx
   12a61:	pop    rbp
   12a62:	ret    
   12a63:	nop    DWORD PTR [rax+rax*1+0x0]
   12a68:	mov    rdi,QWORD PTR [rbx+0x8]
   12a6c:	mov    rsi,rbp
   12a6f:	call   3b20 <realloc@plt>
   12a74:	test   rax,rax
   12a77:	je     12a80 <__sprintf_chk@plt+0xeda0>
   12a79:	mov    QWORD PTR [rbx+0x8],rax
   12a7d:	jmp    12a56 <__sprintf_chk@plt+0xed76>
   12a7f:	nop
   12a80:	add    rsp,0x8
   12a84:	mov    eax,0xc
   12a89:	pop    rbx
   12a8a:	pop    rbp
   12a8b:	ret    
   12a8c:	nop    DWORD PTR [rax+0x0]
   12a90:	push   rbp
   12a91:	mov    rbp,rsi
   12a94:	push   rbx
   12a95:	mov    rbx,rdi
   12a98:	sub    rsp,0x8
   12a9c:	mov    rsi,QWORD PTR [rdi+0x8]
   12aa0:	mov    rdi,QWORD PTR [rdi+0x10]
   12aa4:	cmp    QWORD PTR [rbx],rsi
   12aa7:	je     12ac8 <__sprintf_chk@plt+0xede8>
   12aa9:	lea    rax,[rsi+0x1]
   12aad:	mov    QWORD PTR [rbx+0x8],rax
   12ab1:	mov    eax,0x1
   12ab6:	mov    QWORD PTR [rdi+rsi*8],rbp
   12aba:	add    rsp,0x8
   12abe:	pop    rbx
   12abf:	pop    rbp
   12ac0:	ret    
   12ac1:	nop    DWORD PTR [rax+0x0]
   12ac8:	add    rsi,0x1
   12acc:	lea    rax,[rsi+rsi*1]
   12ad0:	shl    rsi,0x4
   12ad4:	mov    QWORD PTR [rbx],rax
   12ad7:	call   3b20 <realloc@plt>
   12adc:	mov    rdi,rax
   12adf:	test   rax,rax
   12ae2:	je     12af0 <__sprintf_chk@plt+0xee10>
   12ae4:	mov    QWORD PTR [rbx+0x10],rax
   12ae8:	mov    rsi,QWORD PTR [rbx+0x8]
   12aec:	jmp    12aa9 <__sprintf_chk@plt+0xedc9>
   12aee:	xchg   ax,ax
   12af0:	xor    eax,eax
   12af2:	jmp    12aba <__sprintf_chk@plt+0xedda>
   12af4:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   12aff:	nop
   12b00:	push   r13
   12b02:	mov    r13,rcx
   12b05:	push   r12
   12b07:	mov    r12,rdx
   12b0a:	push   rbx
   12b0b:	mov    rbx,rdi
   12b0e:	sub    rsp,0x10
   12b12:	movsxd rax,DWORD PTR [rdi+0x80]
   12b19:	cmp    eax,0xf
   12b1c:	je     12b98 <__sprintf_chk@plt+0xeeb8>
   12b1e:	mov    r8,rax
   12b21:	mov    rdx,QWORD PTR [rdi+0x70]
   12b25:	lea    ecx,[rax+0x1]
   12b28:	shl    r8,0x6
   12b2c:	add    r8,0x8
   12b30:	shl    rax,0x6
   12b34:	mov    DWORD PTR [rbx+0x80],ecx
   12b3a:	add    r8,rdx
   12b3d:	add    rax,rdx
   12b40:	mov    QWORD PTR [rax+0x8],0x0
   12b48:	mov    QWORD PTR [rax+0x10],rsi
   12b4c:	mov    QWORD PTR [rax+0x18],r12
   12b50:	movdqu xmm0,XMMWORD PTR [r13+0x0]
   12b56:	mov    QWORD PTR [rax+0x20],0x0
   12b5e:	movups XMMWORD PTR [rax+0x30],xmm0
   12b62:	mov    QWORD PTR [rax+0x28],0x0
   12b6a:	and    BYTE PTR [rax+0x3a],0xf3
   12b6e:	mov    QWORD PTR [rax+0x40],0xffffffffffffffff
   12b76:	test   rsi,rsi
   12b79:	je     12b7e <__sprintf_chk@plt+0xee9e>
   12b7b:	mov    QWORD PTR [rsi],r8
   12b7e:	test   r12,r12
   12b81:	je     12b87 <__sprintf_chk@plt+0xeea7>
   12b83:	mov    QWORD PTR [r12],r8
   12b87:	add    rsp,0x10
   12b8b:	mov    rax,r8
   12b8e:	pop    rbx
   12b8f:	pop    r12
   12b91:	pop    r13
   12b93:	ret    
   12b94:	nop    DWORD PTR [rax+0x0]
   12b98:	mov    edi,0x3c8
   12b9d:	mov    QWORD PTR [rsp+0x8],rsi
   12ba2:	call   3a70 <malloc@plt>
   12ba7:	mov    rdx,rax
   12baa:	test   rax,rax
   12bad:	je     12bd1 <__sprintf_chk@plt+0xeef1>
   12baf:	mov    rax,QWORD PTR [rbx+0x70]
   12bb3:	mov    rsi,QWORD PTR [rsp+0x8]
   12bb8:	mov    QWORD PTR [rbx+0x70],rdx
   12bbc:	mov    r8d,0x8
   12bc2:	mov    ecx,0x1
   12bc7:	mov    QWORD PTR [rdx],rax
   12bca:	xor    eax,eax
   12bcc:	jmp    12b30 <__sprintf_chk@plt+0xee50>
   12bd1:	xor    r8d,r8d
   12bd4:	jmp    12b87 <__sprintf_chk@plt+0xeea7>
   12bd6:	cs nop WORD PTR [rax+rax*1+0x0]
   12be0:	push   r15
   12be2:	push   r14
   12be4:	push   r13
   12be6:	push   r12
   12be8:	push   rbp
   12be9:	push   rbx
   12bea:	mov    rbx,rdx
   12bed:	sub    rsp,0x38
   12bf1:	mov    r15,QWORD PTR [rsi]
   12bf4:	mov    r12,QWORD PTR [rdx+0x8]
   12bf8:	mov    QWORD PTR [rsp+0x8],rdi
   12bfd:	mov    rax,QWORD PTR fs:0x28
   12c06:	mov    QWORD PTR [rsp+0x28],rax
   12c0b:	xor    eax,eax
   12c0d:	test   BYTE PTR [rsi+0x38],0x10
   12c11:	je     12da0 <__sprintf_chk@plt+0xf0c0>
   12c17:	test   r12,r12
   12c1a:	je     12d50 <__sprintf_chk@plt+0xf070>
   12c20:	mov    rax,QWORD PTR [rdx+0x28]
   12c24:	cmp    rax,0x3f
   12c28:	jg     12d20 <__sprintf_chk@plt+0xf040>
   12c2e:	mov    rdx,QWORD PTR [r15+0xa0]
   12c35:	bt     rdx,rax
   12c39:	jae    12d20 <__sprintf_chk@plt+0xf040>
   12c3f:	lea    r13,[rsp+0x10]
   12c44:	pxor   xmm0,xmm0
   12c48:	xor    edx,edx
   12c4a:	xor    esi,esi
   12c4c:	mov    rcx,r13
   12c4f:	mov    rdi,r15
   12c52:	movups XMMWORD PTR [rsp+0x10],xmm0
   12c57:	mov    BYTE PTR [rsp+0x18],0x8
   12c5c:	call   12b00 <__sprintf_chk@plt+0xee20>
   12c61:	pxor   xmm0,xmm0
   12c65:	mov    rcx,r13
   12c68:	xor    edx,edx
   12c6a:	xor    esi,esi
   12c6c:	mov    rdi,r15
   12c6f:	movups XMMWORD PTR [rsp+0x10],xmm0
   12c74:	mov    rbp,rax
   12c77:	mov    BYTE PTR [rsp+0x18],0x9
   12c7c:	call   12b00 <__sprintf_chk@plt+0xee20>
   12c81:	mov    r14,rax
   12c84:	pxor   xmm0,xmm0
   12c88:	mov    rdx,r14
   12c8b:	mov    rcx,r13
   12c8e:	mov    rsi,r12
   12c91:	mov    rdi,r15
   12c94:	movups XMMWORD PTR [rsp+0x10],xmm0
   12c99:	mov    BYTE PTR [rsp+0x18],0x10
   12c9e:	call   12b00 <__sprintf_chk@plt+0xee20>
   12ca3:	mov    rdx,rax
   12ca6:	pxor   xmm0,xmm0
   12caa:	mov    rcx,r13
   12cad:	mov    rsi,rbp
   12cb0:	mov    rdi,r15
   12cb3:	movups XMMWORD PTR [rsp+0x10],xmm0
   12cb8:	mov    QWORD PTR [rsp],rdx
   12cbc:	mov    BYTE PTR [rsp+0x18],0x10
   12cc1:	call   12b00 <__sprintf_chk@plt+0xee20>
   12cc6:	mov    r12,rax
   12cc9:	test   rax,rax
   12ccc:	je     12e00 <__sprintf_chk@plt+0xf120>
   12cd2:	mov    rdx,QWORD PTR [rsp]
   12cd6:	test   rdx,rdx
   12cd9:	je     12e00 <__sprintf_chk@plt+0xf120>
   12cdf:	test   rbp,rbp
   12ce2:	je     12e00 <__sprintf_chk@plt+0xf120>
   12ce8:	test   r14,r14
   12ceb:	je     12e00 <__sprintf_chk@plt+0xf120>
   12cf1:	mov    rax,QWORD PTR [rbx+0x28]
   12cf5:	mov    QWORD PTR [r14+0x28],rax
   12cf9:	mov    QWORD PTR [rbp+0x28],rax
   12cfd:	movzx  eax,BYTE PTR [rbx+0x32]
   12d01:	movzx  edx,BYTE PTR [r14+0x32]
   12d06:	and    eax,0x8
   12d09:	mov    ecx,eax
   12d0b:	and    edx,0xfffffff7
   12d0e:	or     edx,ecx
   12d10:	mov    BYTE PTR [r14+0x32],dl
   12d14:	movzx  eax,BYTE PTR [rbp+0x32]
   12d18:	and    eax,0xfffffff7
   12d1b:	or     eax,ecx
   12d1d:	mov    BYTE PTR [rbp+0x32],al
   12d20:	mov    rax,QWORD PTR [rsp+0x28]
   12d25:	sub    rax,QWORD PTR fs:0x28
   12d2e:	jne    12e13 <__sprintf_chk@plt+0xf133>
   12d34:	add    rsp,0x38
   12d38:	mov    rax,r12
   12d3b:	pop    rbx
   12d3c:	pop    rbp
   12d3d:	pop    r12
   12d3f:	pop    r13
   12d41:	pop    r14
   12d43:	pop    r15
   12d45:	ret    
   12d46:	cs nop WORD PTR [rax+rax*1+0x0]
   12d50:	lea    r13,[rsp+0x10]
   12d55:	pxor   xmm0,xmm0
   12d59:	xor    edx,edx
   12d5b:	xor    esi,esi
   12d5d:	mov    rcx,r13
   12d60:	mov    rdi,r15
   12d63:	movups XMMWORD PTR [rsp+0x10],xmm0
   12d68:	mov    BYTE PTR [rsp+0x18],0x8
   12d6d:	call   12b00 <__sprintf_chk@plt+0xee20>
   12d72:	pxor   xmm0,xmm0
   12d76:	xor    edx,edx
   12d78:	mov    rcx,r13
   12d7b:	xor    esi,esi
   12d7d:	mov    rdi,r15
   12d80:	movups XMMWORD PTR [rsp+0x10],xmm0
   12d85:	mov    rbp,rax
   12d88:	mov    BYTE PTR [rsp+0x18],0x9
   12d8d:	call   12b00 <__sprintf_chk@plt+0xee20>
   12d92:	mov    rdx,rax
   12d95:	mov    r14,rax
   12d98:	jmp    12ca6 <__sprintf_chk@plt+0xefc6>
   12d9d:	nop    DWORD PTR [rax]
   12da0:	lea    r13,[rsp+0x10]
   12da5:	pxor   xmm0,xmm0
   12da9:	xor    edx,edx
   12dab:	xor    esi,esi
   12dad:	mov    rcx,r13
   12db0:	mov    rdi,r15
   12db3:	movups XMMWORD PTR [rsp+0x10],xmm0
   12db8:	mov    BYTE PTR [rsp+0x18],0x8
   12dbd:	call   12b00 <__sprintf_chk@plt+0xee20>
   12dc2:	pxor   xmm0,xmm0
   12dc6:	xor    edx,edx
   12dc8:	mov    rcx,r13
   12dcb:	xor    esi,esi
   12dcd:	mov    rdi,r15
   12dd0:	movups XMMWORD PTR [rsp+0x10],xmm0
   12dd5:	mov    rbp,rax
   12dd8:	mov    BYTE PTR [rsp+0x18],0x9
   12ddd:	call   12b00 <__sprintf_chk@plt+0xee20>
   12de2:	mov    r14,rax
   12de5:	mov    rdx,rax
   12de8:	test   r12,r12
   12deb:	jne    12c84 <__sprintf_chk@plt+0xefa4>
   12df1:	jmp    12ca6 <__sprintf_chk@plt+0xefc6>
   12df6:	cs nop WORD PTR [rax+rax*1+0x0]
   12e00:	mov    rax,QWORD PTR [rsp+0x8]
   12e05:	xor    r12d,r12d
   12e08:	mov    DWORD PTR [rax],0xc
   12e0e:	jmp    12d20 <__sprintf_chk@plt+0xf040>
   12e13:	call   3840 <__stack_chk_fail@plt>
   12e18:	nop    DWORD PTR [rax+rax*1+0x0]
   12e20:	push   r12
   12e22:	mov    r12,QWORD PTR [rdi+0x58]
   12e26:	push   rbp
   12e27:	cmp    QWORD PTR [rdi+0x40],r12
   12e2b:	mov    rbp,rdi
   12e2e:	push   rbx
   12e2f:	cmovle r12,QWORD PTR [rdi+0x40]
   12e34:	mov    rbx,QWORD PTR [rdi+0x30]
   12e38:	cmp    r12,rbx
   12e3b:	jle    12e90 <__sprintf_chk@plt+0xf1b0>
   12e3d:	call   36a0 <__ctype_toupper_loc@plt>
   12e42:	mov    rsi,rax
   12e45:	nop    DWORD PTR [rax]
   12e48:	mov    rax,QWORD PTR [rbp+0x0]
   12e4c:	mov    rdx,QWORD PTR [rbp+0x78]
   12e50:	add    rax,rbx
   12e53:	add    rax,QWORD PTR [rbp+0x28]
   12e57:	movzx  eax,BYTE PTR [rax]
   12e5a:	test   rdx,rdx
   12e5d:	jne    12e88 <__sprintf_chk@plt+0xf1a8>
   12e5f:	mov    rcx,QWORD PTR [rsi]
   12e62:	mov    rdx,QWORD PTR [rbp+0x8]
   12e66:	mov    eax,DWORD PTR [rcx+rax*4]
   12e69:	mov    BYTE PTR [rdx+rbx*1],al
   12e6c:	add    rbx,0x1
   12e70:	cmp    r12,rbx
   12e73:	jne    12e48 <__sprintf_chk@plt+0xf168>
   12e75:	mov    QWORD PTR [rbp+0x30],r12
   12e79:	pop    rbx
   12e7a:	mov    QWORD PTR [rbp+0x38],r12
   12e7e:	pop    rbp
   12e7f:	pop    r12
   12e81:	ret    
   12e82:	nop    WORD PTR [rax+rax*1+0x0]
   12e88:	movzx  eax,BYTE PTR [rdx+rax*1]
   12e8c:	jmp    12e5f <__sprintf_chk@plt+0xf17f>
   12e8e:	xchg   ax,ax
   12e90:	mov    r12,rbx
   12e93:	pop    rbx
   12e94:	mov    QWORD PTR [rbp+0x30],r12
   12e98:	mov    QWORD PTR [rbp+0x38],r12
   12e9c:	pop    rbp
   12e9d:	pop    r12
   12e9f:	ret    
   12ea0:	push   r15
   12ea2:	push   r14
   12ea4:	push   r13
   12ea6:	push   r12
   12ea8:	push   rbp
   12ea9:	mov    rbp,rdi
   12eac:	push   rbx
   12ead:	sub    rsp,0x68
   12eb1:	mov    r12,QWORD PTR [rdi+0x58]
   12eb5:	mov    rbx,QWORD PTR [rdi+0x30]
   12eb9:	mov    rax,QWORD PTR fs:0x28
   12ec2:	mov    QWORD PTR [rsp+0x58],rax
   12ec7:	xor    eax,eax
   12ec9:	cmp    QWORD PTR [rdi+0x40],r12
   12ecd:	cmovle r12,QWORD PTR [rdi+0x40]
   12ed2:	cmp    r12,rbx
   12ed5:	jle    12f80 <__sprintf_chk@plt+0xf2a0>
   12edb:	lea    r14,[rdi+0x20]
   12edf:	lea    r13,[rsp+0xc]
   12ee4:	jmp    12f0e <__sprintf_chk@plt+0xf22e>
   12ee6:	cs nop WORD PTR [rax+rax*1+0x0]
   12ef0:	not    rdx
   12ef3:	lea    rdi,[rcx+r8*1+0x4]
   12ef8:	mov    esi,0xff
   12efd:	add    rdx,rbx
   12f00:	shl    rdx,0x2
   12f04:	call   3900 <memset@plt>
   12f09:	cmp    rbx,r12
   12f0c:	jge    12f80 <__sprintf_chk@plt+0xf2a0>
   12f0e:	mov    rcx,QWORD PTR [rbp+0x78]
   12f12:	mov    r8,r12
   12f15:	mov    r15,QWORD PTR [rbp+0x20]
   12f19:	sub    r8,rbx
   12f1c:	test   rcx,rcx
   12f1f:	jne    12fe0 <__sprintf_chk@plt+0xf300>
   12f25:	mov    rsi,QWORD PTR [rbp+0x28]
   12f29:	add    rsi,rbx
   12f2c:	add    rsi,QWORD PTR [rbp+0x0]
   12f30:	mov    rdx,r8
   12f33:	mov    rcx,r14
   12f36:	mov    rdi,r13
   12f39:	call   11a40 <__sprintf_chk@plt+0xdd60>
   12f3e:	lea    rdx,[rax-0x1]
   12f42:	cmp    rdx,0xfffffffffffffffd
   12f46:	ja     12fb0 <__sprintf_chk@plt+0xf2d0>
   12f48:	mov    esi,DWORD PTR [rsp+0xc]
   12f4c:	cmp    rax,0xfffffffffffffffe
   12f50:	je     13048 <__sprintf_chk@plt+0xf368>
   12f56:	mov    rcx,QWORD PTR [rbp+0x10]
   12f5a:	lea    rdi,[rbx+0x1]
   12f5e:	mov    rdx,rbx
   12f61:	lea    r8,[rbx*4+0x0]
   12f69:	mov    DWORD PTR [rcx+rbx*4],esi
   12f6c:	add    rbx,rax
   12f6f:	cmp    rdi,rbx
   12f72:	jl     12ef0 <__sprintf_chk@plt+0xf210>
   12f78:	mov    rbx,rdi
   12f7b:	cmp    rbx,r12
   12f7e:	jl     12f0e <__sprintf_chk@plt+0xf22e>
   12f80:	mov    QWORD PTR [rbp+0x30],rbx
   12f84:	mov    QWORD PTR [rbp+0x38],rbx
   12f88:	mov    rax,QWORD PTR [rsp+0x58]
   12f8d:	sub    rax,QWORD PTR fs:0x28
   12f96:	jne    13068 <__sprintf_chk@plt+0xf388>
   12f9c:	add    rsp,0x68
   12fa0:	pop    rbx
   12fa1:	pop    rbp
   12fa2:	pop    r12
   12fa4:	pop    r13
   12fa6:	pop    r14
   12fa8:	pop    r15
   12faa:	ret    
   12fab:	nop    DWORD PTR [rax+rax*1+0x0]
   12fb0:	mov    rax,QWORD PTR [rbp+0x0]
   12fb4:	mov    rdx,QWORD PTR [rbp+0x78]
   12fb8:	add    rax,rbx
   12fbb:	add    rax,QWORD PTR [rbp+0x28]
   12fbf:	movzx  esi,BYTE PTR [rax]
   12fc2:	mov    DWORD PTR [rsp+0xc],esi
   12fc6:	test   rdx,rdx
   12fc9:	jne    1305f <__sprintf_chk@plt+0xf37f>
   12fcf:	mov    QWORD PTR [rbp+0x20],r15
   12fd3:	mov    eax,0x1
   12fd8:	jmp    12f56 <__sprintf_chk@plt+0xf276>
   12fdd:	nop    DWORD PTR [rax]
   12fe0:	mov    eax,DWORD PTR [rbp+0x90]
   12fe6:	lea    rsi,[rsp+0x10]
   12feb:	test   eax,eax
   12fed:	jle    12f30 <__sprintf_chk@plt+0xf250>
   12ff3:	xor    eax,eax
   12ff5:	lea    rsi,[rsp+0x10]
   12ffa:	jmp    13011 <__sprintf_chk@plt+0xf331>
   12ffc:	nop    DWORD PTR [rax+0x0]
   13000:	add    rax,0x1
   13004:	cmp    rax,r8
   13007:	je     12f30 <__sprintf_chk@plt+0xf250>
   1300d:	mov    rcx,QWORD PTR [rbp+0x78]
   13011:	mov    rdx,QWORD PTR [rbp+0x0]
   13015:	add    rdx,rax
   13018:	add    rdx,rbx
   1301b:	add    rdx,QWORD PTR [rbp+0x28]
   1301f:	movzx  edx,BYTE PTR [rdx]
   13022:	movzx  edx,BYTE PTR [rcx+rdx*1]
   13026:	mov    rcx,QWORD PTR [rbp+0x8]
   1302a:	add    rcx,rax
   1302d:	mov    BYTE PTR [rcx+rbx*1],dl
   13030:	mov    BYTE PTR [rsi+rax*1],dl
   13033:	lea    edx,[rax+0x1]
   13036:	cmp    DWORD PTR [rbp+0x90],edx
   1303c:	jg     13000 <__sprintf_chk@plt+0xf320>
   1303e:	jmp    12f30 <__sprintf_chk@plt+0xf250>
   13043:	nop    DWORD PTR [rax+rax*1+0x0]
   13048:	mov    rax,QWORD PTR [rbp+0x58]
   1304c:	cmp    QWORD PTR [rbp+0x40],rax
   13050:	jge    12fb0 <__sprintf_chk@plt+0xf2d0>
   13056:	mov    QWORD PTR [rbp+0x20],r15
   1305a:	jmp    12f80 <__sprintf_chk@plt+0xf2a0>
   1305f:	movzx  esi,BYTE PTR [rdx+rsi*1]
   13063:	jmp    12fcf <__sprintf_chk@plt+0xf2ef>
   13068:	call   3840 <__stack_chk_fail@plt>
   1306d:	nop    DWORD PTR [rax]
   13070:	test   rsi,rsi
   13073:	je     13228 <__sprintf_chk@plt+0xf548>
   13079:	push   r12
   1307b:	mov    r12,rsi
   1307e:	push   rbp
   1307f:	push   rbx
   13080:	mov    rcx,QWORD PTR [rsi+0x8]
   13084:	test   rcx,rcx
   13087:	je     13192 <__sprintf_chk@plt+0xf4b2>
   1308d:	mov    rax,QWORD PTR [rdi+0x8]
   13091:	mov    rsi,QWORD PTR [rdi]
   13094:	mov    rbp,rdi
   13097:	lea    rdx,[rax+rcx*2]
   1309b:	cmp    rsi,rdx
   1309e:	jl     131d0 <__sprintf_chk@plt+0xf4f0>
   130a4:	test   rax,rax
   130a7:	je     13206 <__sprintf_chk@plt+0xf526>
   130ad:	lea    rbx,[rax+rcx*2]
   130b1:	lea    rdx,[rcx-0x1]
   130b5:	neg    rcx
   130b8:	sub    rax,0x1
   130bc:	test   rcx,rcx
   130bf:	jns    13120 <__sprintf_chk@plt+0xf440>
   130c1:	test   rax,rax
   130c4:	js     13120 <__sprintf_chk@plt+0xf440>
   130c6:	mov    rdi,QWORD PTR [rbp+0x10]
   130ca:	mov    r8,QWORD PTR [r12+0x10]
   130cf:	jmp    130fa <__sprintf_chk@plt+0xf41a>
   130d1:	nop    DWORD PTR [rax+0x0]
   130d8:	jge    131a0 <__sprintf_chk@plt+0xf4c0>
   130de:	sub    rbx,0x1
   130e2:	sub    rdx,0x1
   130e6:	mov    QWORD PTR [rdi+rbx*8],rsi
   130ea:	mov    rcx,rdx
   130ed:	not    rcx
   130f0:	test   rcx,rcx
   130f3:	jns    13120 <__sprintf_chk@plt+0xf440>
   130f5:	test   rax,rax
   130f8:	js     13120 <__sprintf_chk@plt+0xf440>
   130fa:	mov    rsi,QWORD PTR [r8+rdx*8]
   130fe:	cmp    QWORD PTR [rdi+rax*8],rsi
   13102:	jne    130d8 <__sprintf_chk@plt+0xf3f8>
   13104:	sub    rdx,0x1
   13108:	sub    rax,0x1
   1310c:	mov    rcx,rdx
   1310f:	not    rcx
   13112:	test   rcx,rcx
   13115:	js     130f5 <__sprintf_chk@plt+0xf415>
   13117:	nop    WORD PTR [rax+rax*1+0x0]
   13120:	test   rdx,rdx
   13123:	js     13142 <__sprintf_chk@plt+0xf462>
   13125:	add    rdx,0x1
   13129:	mov    rax,QWORD PTR [rbp+0x10]
   1312d:	mov    rsi,QWORD PTR [r12+0x10]
   13132:	sub    rbx,rdx
   13135:	shl    rdx,0x3
   13139:	lea    rdi,[rax+rbx*8]
   1313d:	call   3a00 <memcpy@plt>
   13142:	mov    rcx,QWORD PTR [rbp+0x8]
   13146:	mov    rax,QWORD PTR [r12+0x8]
   1314b:	lea    r8,[rcx+rax*2-0x1]
   13150:	mov    rdx,r8
   13153:	sub    rdx,rbx
   13156:	add    rdx,0x1
   1315a:	je     13192 <__sprintf_chk@plt+0xf4b2>
   1315c:	lea    rax,[rcx-0x1]
   13160:	add    rcx,rdx
   13163:	mov    rdi,QWORD PTR [rbp+0x10]
   13167:	mov    QWORD PTR [rbp+0x8],rcx
   1316b:	nop    DWORD PTR [rax+rax*1+0x0]
   13170:	mov    rsi,QWORD PTR [rdi+r8*8]
   13174:	mov    rcx,QWORD PTR [rdi+rax*8]
   13178:	lea    r9,[rax+rdx*1]
   1317c:	lea    r9,[rdi+r9*8]
   13180:	cmp    rsi,rcx
   13183:	jle    131b0 <__sprintf_chk@plt+0xf4d0>
   13185:	mov    QWORD PTR [r9],rsi
   13188:	sub    r8,0x1
   1318c:	sub    rdx,0x1
   13190:	jne    13170 <__sprintf_chk@plt+0xf490>
   13192:	xor    eax,eax
   13194:	pop    rbx
   13195:	pop    rbp
   13196:	pop    r12
   13198:	ret    
   13199:	nop    DWORD PTR [rax+0x0]
   131a0:	sub    rax,0x1
   131a4:	jmp    130f0 <__sprintf_chk@plt+0xf410>
   131a9:	nop    DWORD PTR [rax+0x0]
   131b0:	mov    QWORD PTR [r9],rcx
   131b3:	sub    rax,0x1
   131b7:	jns    13170 <__sprintf_chk@plt+0xf490>
   131b9:	lea    rsi,[rdi+rbx*8]
   131bd:	shl    rdx,0x3
   131c1:	call   3a00 <memcpy@plt>
   131c6:	pop    rbx
   131c7:	xor    eax,eax
   131c9:	pop    rbp
   131ca:	pop    r12
   131cc:	ret    
   131cd:	nop    DWORD PTR [rax]
   131d0:	add    rcx,rsi
   131d3:	mov    rdi,QWORD PTR [rdi+0x10]
   131d7:	mov    rsi,rcx
   131da:	lea    rbx,[rcx+rcx*1]
   131de:	shl    rsi,0x4
   131e2:	call   3b20 <realloc@plt>
   131e7:	test   rax,rax
   131ea:	je     1322b <__sprintf_chk@plt+0xf54b>
   131ec:	mov    QWORD PTR [rbp+0x10],rax
   131f0:	mov    rax,QWORD PTR [rbp+0x8]
   131f4:	mov    QWORD PTR [rbp+0x0],rbx
   131f8:	mov    rcx,QWORD PTR [r12+0x8]
   131fd:	test   rax,rax
   13200:	jne    130ad <__sprintf_chk@plt+0xf3cd>
   13206:	mov    QWORD PTR [rbp+0x8],rcx
   1320a:	mov    rdi,QWORD PTR [rbp+0x10]
   1320e:	lea    rdx,[rcx*8+0x0]
   13216:	mov    rsi,QWORD PTR [r12+0x10]
   1321b:	call   3a00 <memcpy@plt>
   13220:	jmp    13192 <__sprintf_chk@plt+0xf4b2>
   13225:	nop    DWORD PTR [rax]
   13228:	xor    eax,eax
   1322a:	ret    
   1322b:	mov    eax,0xc
   13230:	jmp    13194 <__sprintf_chk@plt+0xf4b4>
   13235:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   13240:	mov    rcx,QWORD PTR [rsi+0x8]
   13244:	xor    eax,eax
   13246:	test   rcx,rcx
   13249:	je     133a0 <__sprintf_chk@plt+0xf6c0>
   1324f:	push   r13
   13251:	push   r12
   13253:	mov    r12,rdx
   13256:	push   rbp
   13257:	mov    rbp,rsi
   1325a:	push   rbx
   1325b:	sub    rsp,0x8
   1325f:	mov    rsi,QWORD PTR [rdx+0x8]
   13263:	test   rsi,rsi
   13266:	je     13318 <__sprintf_chk@plt+0xf638>
   1326c:	mov    rax,QWORD PTR [rdi+0x8]
   13270:	mov    r13,QWORD PTR [rdi]
   13273:	lea    rdx,[rcx+rsi*1]
   13277:	mov    rbx,rdi
   1327a:	mov    rdi,QWORD PTR [rdi+0x10]
   1327e:	lea    r8,[rdx+rax*1]
   13282:	cmp    r8,r13
   13285:	jg     133a1 <__sprintf_chk@plt+0xf6c1>
   1328b:	lea    r9,[rax+rcx*1]
   1328f:	mov    r11,QWORD PTR [rbp+0x10]
   13293:	sub    rcx,0x1
   13297:	sub    rax,0x1
   1329b:	mov    r10,QWORD PTR [r12+0x10]
   132a0:	add    r9,rsi
   132a3:	sub    rsi,0x1
   132a7:	mov    rdx,QWORD PTR [r11+rcx*8]
   132ab:	mov    r8,QWORD PTR [r10+rsi*8]
   132af:	nop
   132b0:	cmp    rdx,r8
   132b3:	je     132ca <__sprintf_chk@plt+0xf5ea>
   132b5:	jge    13328 <__sprintf_chk@plt+0xf648>
   132b7:	sub    rsi,0x1
   132bb:	js     13340 <__sprintf_chk@plt+0xf660>
   132c1:	mov    r8,QWORD PTR [r10+rsi*8]
   132c5:	cmp    rdx,r8
   132c8:	jne    132b5 <__sprintf_chk@plt+0xf5d5>
   132ca:	test   rax,rax
   132cd:	jns    132de <__sprintf_chk@plt+0xf5fe>
   132cf:	jmp    132e6 <__sprintf_chk@plt+0xf606>
   132d1:	nop    DWORD PTR [rax+0x0]
   132d8:	sub    rax,0x1
   132dc:	jb     132e6 <__sprintf_chk@plt+0xf606>
   132de:	cmp    QWORD PTR [rdi+rax*8],rdx
   132e2:	jg     132d8 <__sprintf_chk@plt+0xf5f8>
   132e4:	je     132ee <__sprintf_chk@plt+0xf60e>
   132e6:	sub    r9,0x1
   132ea:	mov    QWORD PTR [rdi+r9*8],rdx
   132ee:	sub    rcx,0x1
   132f2:	js     13340 <__sprintf_chk@plt+0xf660>
   132f4:	sub    rsi,0x1
   132f8:	js     13340 <__sprintf_chk@plt+0xf660>
   132fa:	mov    rdx,QWORD PTR [r11+rcx*8]
   132fe:	jmp    132c1 <__sprintf_chk@plt+0xf5e1>
   13300:	mov    QWORD PTR [r10],rcx
   13303:	sub    rax,0x1
   13307:	jae    13370 <__sprintf_chk@plt+0xf690>
   13309:	shl    rdx,0x3
   1330d:	lea    rsi,[rdi+r9*8]
   13311:	call   3a00 <memcpy@plt>
   13316:	xor    eax,eax
   13318:	add    rsp,0x8
   1331c:	pop    rbx
   1331d:	pop    rbp
   1331e:	pop    r12
   13320:	pop    r13
   13322:	ret    
   13323:	nop    DWORD PTR [rax+rax*1+0x0]
   13328:	sub    rcx,0x1
   1332c:	js     13340 <__sprintf_chk@plt+0xf660>
   1332e:	mov    rdx,QWORD PTR [r11+rcx*8]
   13332:	jmp    132b0 <__sprintf_chk@plt+0xf5d0>
   13337:	nop    WORD PTR [rax+rax*1+0x0]
   13340:	mov    rcx,QWORD PTR [rbx+0x8]
   13344:	mov    rdx,QWORD PTR [rbp+0x8]
   13348:	add    rdx,rcx
   1334b:	add    rdx,QWORD PTR [r12+0x8]
   13350:	lea    rax,[rcx-0x1]
   13354:	lea    r8,[rdx-0x1]
   13358:	sub    rdx,r9
   1335b:	add    rcx,rdx
   1335e:	mov    QWORD PTR [rbx+0x8],rcx
   13362:	test   rdx,rdx
   13365:	jle    13309 <__sprintf_chk@plt+0xf629>
   13367:	test   rax,rax
   1336a:	js     13309 <__sprintf_chk@plt+0xf629>
   1336c:	nop    DWORD PTR [rax+0x0]
   13370:	mov    rsi,QWORD PTR [rdi+r8*8]
   13374:	mov    rcx,QWORD PTR [rdi+rax*8]
   13378:	lea    r10,[rax+rdx*1]
   1337c:	lea    r10,[rdi+r10*8]
   13380:	cmp    rsi,rcx
   13383:	jle    13300 <__sprintf_chk@plt+0xf620>
   13389:	mov    QWORD PTR [r10],rsi
   1338c:	sub    r8,0x1
   13390:	sub    rdx,0x1
   13394:	jne    13370 <__sprintf_chk@plt+0xf690>
   13396:	xor    edx,edx
   13398:	jmp    1330d <__sprintf_chk@plt+0xf62d>
   1339d:	nop    DWORD PTR [rax]
   133a0:	ret    
   133a1:	add    r13,rdx
   133a4:	lea    rsi,[r13*8+0x0]
   133ac:	call   3b20 <realloc@plt>
   133b1:	mov    rdi,rax
   133b4:	test   rax,rax
   133b7:	je     133d2 <__sprintf_chk@plt+0xf6f2>
   133b9:	mov    rcx,QWORD PTR [rbp+0x8]
   133bd:	mov    rsi,QWORD PTR [r12+0x8]
   133c2:	mov    QWORD PTR [rbx+0x10],rax
   133c6:	mov    QWORD PTR [rbx],r13
   133c9:	mov    rax,QWORD PTR [rbx+0x8]
   133cd:	jmp    1328b <__sprintf_chk@plt+0xf5ab>
   133d2:	mov    eax,0xc
   133d7:	jmp    13318 <__sprintf_chk@plt+0xf638>
   133dc:	nop    DWORD PTR [rax+0x0]
   133e0:	push   r12
   133e2:	push   rbp
   133e3:	push   rbx
   133e4:	mov    rdx,QWORD PTR [rsi+0x8]
   133e8:	mov    rbx,rdi
   133eb:	mov    QWORD PTR [rdi+0x8],rdx
   133ef:	test   rdx,rdx
   133f2:	jle    13430 <__sprintf_chk@plt+0xf750>
   133f4:	mov    QWORD PTR [rdi],rdx
   133f7:	lea    r12,[rdx*8+0x0]
   133ff:	mov    rbp,rsi
   13402:	mov    rdi,r12
   13405:	call   3a70 <malloc@plt>
   1340a:	mov    QWORD PTR [rbx+0x10],rax
   1340e:	mov    rdi,rax
   13411:	test   rax,rax
   13414:	je     13450 <__sprintf_chk@plt+0xf770>
   13416:	mov    rsi,QWORD PTR [rbp+0x10]
   1341a:	mov    rdx,r12
   1341d:	call   3a00 <memcpy@plt>
   13422:	xor    eax,eax
   13424:	pop    rbx
   13425:	pop    rbp
   13426:	pop    r12
   13428:	ret    
   13429:	nop    DWORD PTR [rax+0x0]
   13430:	pxor   xmm0,xmm0
   13434:	mov    QWORD PTR [rdi+0x10],0x0
   1343c:	xor    eax,eax
   1343e:	movups XMMWORD PTR [rdi],xmm0
   13441:	pop    rbx
   13442:	pop    rbp
   13443:	pop    r12
   13445:	ret    
   13446:	cs nop WORD PTR [rax+rax*1+0x0]
   13450:	mov    QWORD PTR [rbx+0x8],0x0
   13458:	mov    eax,0xc
   1345d:	mov    QWORD PTR [rbx],0x0
   13464:	jmp    13424 <__sprintf_chk@plt+0xf744>
   13466:	cs nop WORD PTR [rax+rax*1+0x0]
   13470:	push   r14
   13472:	push   r13
   13474:	mov    r13,rdi
   13477:	push   rbp
   13478:	push   rbx
   13479:	sub    rsp,0x18
   1347d:	test   rsi,rsi
   13480:	je     13535 <__sprintf_chk@plt+0xf855>
   13486:	mov    rbx,QWORD PTR [rsi+0x8]
   1348a:	test   rdx,rdx
   1348d:	je     13530 <__sprintf_chk@plt+0xf850>
   13493:	test   rbx,rbx
   13496:	jle    13535 <__sprintf_chk@plt+0xf855>
   1349c:	mov    r14,QWORD PTR [rdx+0x8]
   134a0:	mov    QWORD PTR [rsp],rdx
   134a4:	test   r14,r14
   134a7:	jle    13563 <__sprintf_chk@plt+0xf883>
   134ad:	lea    rdi,[rbx+r14*1]
   134b1:	mov    QWORD PTR [rsp+0x8],rsi
   134b6:	mov    QWORD PTR [r13+0x0],rdi
   134ba:	shl    rdi,0x3
   134be:	call   3a70 <malloc@plt>
   134c3:	mov    rsi,QWORD PTR [rsp+0x8]
   134c8:	mov    rdx,QWORD PTR [rsp]
   134cc:	test   rax,rax
   134cf:	mov    QWORD PTR [r13+0x10],rax
   134d3:	mov    rdi,rax
   134d6:	je     135d0 <__sprintf_chk@plt+0xf8f0>
   134dc:	mov    r8,QWORD PTR [rdx+0x10]
   134e0:	mov    r9,QWORD PTR [rsi+0x10]
   134e4:	xor    ebp,ebp
   134e6:	xor    eax,eax
   134e8:	xor    edx,edx
   134ea:	jmp    13512 <__sprintf_chk@plt+0xf832>
   134ec:	nop    DWORD PTR [rax+0x0]
   134f0:	sete   sil
   134f4:	mov    QWORD PTR [rdi+rbp*8-0x8],rcx
   134f9:	add    rdx,0x1
   134fd:	movzx  esi,sil
   13501:	add    rax,rsi
   13504:	cmp    rbx,rdx
   13507:	jle    13578 <__sprintf_chk@plt+0xf898>
   13509:	cmp    r14,rax
   1350c:	jle    135b0 <__sprintf_chk@plt+0xf8d0>
   13512:	mov    rcx,QWORD PTR [r9+rdx*8]
   13516:	mov    rsi,QWORD PTR [r8+rax*8]
   1351a:	add    rbp,0x1
   1351e:	cmp    rcx,rsi
   13521:	jle    134f0 <__sprintf_chk@plt+0xf810>
   13523:	mov    QWORD PTR [rdi+rbp*8-0x8],rsi
   13528:	add    rax,0x1
   1352c:	jmp    13504 <__sprintf_chk@plt+0xf824>
   1352e:	xchg   ax,ax
   13530:	test   rbx,rbx
   13533:	jg     13563 <__sprintf_chk@plt+0xf883>
   13535:	test   rdx,rdx
   13538:	je     13541 <__sprintf_chk@plt+0xf861>
   1353a:	cmp    QWORD PTR [rdx+0x8],0x0
   1353f:	jg     13560 <__sprintf_chk@plt+0xf880>
   13541:	mov    QWORD PTR [r13+0x10],0x0
   13549:	pxor   xmm0,xmm0
   1354d:	xor    eax,eax
   1354f:	movups XMMWORD PTR [r13+0x0],xmm0
   13554:	add    rsp,0x18
   13558:	pop    rbx
   13559:	pop    rbp
   1355a:	pop    r13
   1355c:	pop    r14
   1355e:	ret    
   1355f:	nop
   13560:	mov    rsi,rdx
   13563:	add    rsp,0x18
   13567:	mov    rdi,r13
   1356a:	pop    rbx
   1356b:	pop    rbp
   1356c:	pop    r13
   1356e:	pop    r14
   13570:	jmp    133e0 <__sprintf_chk@plt+0xf700>
   13575:	nop    DWORD PTR [rax]
   13578:	cmp    r14,rax
   1357b:	jg     13590 <__sprintf_chk@plt+0xf8b0>
   1357d:	mov    QWORD PTR [r13+0x8],rbp
   13581:	add    rsp,0x18
   13585:	xor    eax,eax
   13587:	pop    rbx
   13588:	pop    rbp
   13589:	pop    r13
   1358b:	pop    r14
   1358d:	ret    
   1358e:	xchg   ax,ax
   13590:	sub    r14,rax
   13593:	lea    rdi,[rdi+rbp*8]
   13597:	lea    rsi,[r8+rax*8]
   1359b:	lea    rdx,[r14*8+0x0]
   135a3:	add    rbp,r14
   135a6:	call   3a00 <memcpy@plt>
   135ab:	jmp    1357d <__sprintf_chk@plt+0xf89d>
   135ad:	nop    DWORD PTR [rax]
   135b0:	sub    rbx,rdx
   135b3:	lea    rdi,[rdi+rbp*8]
   135b7:	lea    rsi,[r9+rdx*8]
   135bb:	lea    r8,[rbx*8+0x0]
   135c3:	add    rbp,rbx
   135c6:	mov    rdx,r8
   135c9:	call   3a00 <memcpy@plt>
   135ce:	jmp    1357d <__sprintf_chk@plt+0xf89d>
   135d0:	mov    eax,0xc
   135d5:	jmp    13554 <__sprintf_chk@plt+0xf874>
   135da:	nop    WORD PTR [rax+rax*1+0x0]
   135e0:	push   r15
   135e2:	push   r14
   135e4:	push   r13
   135e6:	push   r12
   135e8:	push   rbp
   135e9:	mov    rbp,rdi
   135ec:	push   rbx
   135ed:	sub    rsp,0x98
   135f4:	mov    rbx,QWORD PTR [rdi+0x58]
   135f8:	mov    r14,QWORD PTR [rdi+0x30]
   135fc:	mov    rax,QWORD PTR fs:0x28
   13605:	mov    QWORD PTR [rsp+0x88],rax
   1360d:	xor    eax,eax
   1360f:	cmp    QWORD PTR [rdi+0x40],rbx
   13613:	cmovle rbx,QWORD PTR [rdi+0x40]
   13618:	cmp    BYTE PTR [rdi+0x8a],0x0
   1361f:	jne    1362c <__sprintf_chk@plt+0xf94c>
   13621:	cmp    QWORD PTR [rdi+0x78],0x0
   13626:	je     13798 <__sprintf_chk@plt+0xfab8>
   1362c:	mov    r15,QWORD PTR [rbp+0x38]
   13630:	cmp    rbx,r14
   13633:	jg     13670 <__sprintf_chk@plt+0xf990>
   13635:	mov    QWORD PTR [rbp+0x30],r14
   13639:	xor    eax,eax
   1363b:	mov    QWORD PTR [rbp+0x38],r15
   1363f:	mov    rcx,QWORD PTR [rsp+0x88]
   13647:	sub    rcx,QWORD PTR fs:0x28
   13650:	jne    13c04 <__sprintf_chk@plt+0xff24>
   13656:	add    rsp,0x98
   1365d:	pop    rbx
   1365e:	pop    rbp
   1365f:	pop    r12
   13661:	pop    r13
   13663:	pop    r14
   13665:	pop    r15
   13667:	ret    
   13668:	nop    DWORD PTR [rax+rax*1+0x0]
   13670:	lea    rax,[rbp+0x20]
   13674:	mov    r13,rbx
   13677:	mov    QWORD PTR [rsp+0x8],rax
   1367c:	lea    rax,[rsp+0x34]
   13681:	sub    r13,r14
   13684:	mov    QWORD PTR [rsp+0x20],rax
   13689:	mov    rax,QWORD PTR [rbp+0x20]
   1368d:	mov    rdx,QWORD PTR [rbp+0x78]
   13691:	mov    QWORD PTR [rsp+0x38],rax
   13696:	test   rdx,rdx
   13699:	jne    139b5 <__sprintf_chk@plt+0xfcd5>
   1369f:	mov    rax,QWORD PTR [rbp+0x28]
   136a3:	add    rax,r15
   136a6:	add    rax,QWORD PTR [rbp+0x0]
   136aa:	mov    QWORD PTR [rsp+0x10],rax
   136af:	mov    rcx,QWORD PTR [rsp+0x8]
   136b4:	mov    rsi,QWORD PTR [rsp+0x10]
   136b9:	mov    rdx,r13
   136bc:	mov    rdi,QWORD PTR [rsp+0x20]
   136c1:	call   11a40 <__sprintf_chk@plt+0xdd60>
   136c6:	mov    r12,rax
   136c9:	lea    rax,[rax-0x1]
   136cd:	mov    QWORD PTR [rsp+0x20],rax
   136d2:	cmp    rax,0xfffffffffffffffc
   136d6:	ja     13a39 <__sprintf_chk@plt+0xfd59>
   136dc:	mov    edx,DWORD PTR [rsp+0x34]
   136e0:	mov    edi,edx
   136e2:	mov    DWORD PTR [rsp+0x8],edx
   136e6:	call   3c00 <towupper@plt>
   136eb:	mov    edx,DWORD PTR [rsp+0x8]
   136ef:	mov    QWORD PTR [rsp+0x18],r14
   136f4:	mov    r13d,eax
   136f7:	cmp    edx,eax
   136f9:	je     13a20 <__sprintf_chk@plt+0xfd40>
   136ff:	lea    r10,[rsp+0x40]
   13704:	lea    rdx,[rsp+0x38]
   13709:	mov    esi,eax
   1370b:	mov    rdi,r10
   1370e:	mov    QWORD PTR [rsp+0x8],r10
   13713:	call   3a80 <wcrtomb@plt>
   13718:	mov    r10,QWORD PTR [rsp+0x8]
   1371d:	cmp    r12,rax
   13720:	mov    rdx,rax
   13723:	jne    13ae6 <__sprintf_chk@plt+0xfe06>
   13729:	mov    rdi,QWORD PTR [rbp+0x8]
   1372d:	mov    rdx,r12
   13730:	mov    rsi,r10
   13733:	add    rdi,r14
   13736:	call   3a00 <memcpy@plt>
   1373b:	cmp    BYTE PTR [rbp+0x8c],0x0
   13742:	lea    rax,[r12+r15*1]
   13746:	jne    13ab0 <__sprintf_chk@plt+0xfdd0>
   1374c:	mov    r15,rax
   1374f:	mov    rax,QWORD PTR [rbp+0x10]
   13753:	lea    rdx,[r14+0x1]
   13757:	lea    rsi,[r14*4+0x0]
   1375f:	mov    DWORD PTR [rax+r14*4],r13d
   13763:	add    r14,r12
   13766:	cmp    rdx,r14
   13769:	jge    13ad0 <__sprintf_chk@plt+0xfdf0>
   1376f:	mov    r12,QWORD PTR [rsp+0x18]
   13774:	lea    rdi,[rax+rsi*1+0x4]
   13779:	mov    esi,0xff
   1377e:	not    r12
   13781:	lea    rdx,[r12+r14*1]
   13785:	shl    rdx,0x2
   13789:	call   3900 <memset@plt>
   1378e:	jmp    13630 <__sprintf_chk@plt+0xf950>
   13793:	nop    DWORD PTR [rax+rax*1+0x0]
   13798:	cmp    BYTE PTR [rdi+0x8c],0x0
   1379f:	jne    1362c <__sprintf_chk@plt+0xf94c>
   137a5:	cmp    r14,rbx
   137a8:	jge    13a11 <__sprintf_chk@plt+0xfd31>
   137ae:	lea    rax,[rdi+0x20]
   137b2:	mov    QWORD PTR [rsp+0x8],rax
   137b7:	lea    rax,[rsp+0x34]
   137bc:	mov    QWORD PTR [rsp+0x28],rax
   137c1:	jmp    13850 <__sprintf_chk@plt+0xfb70>
   137c6:	cs nop WORD PTR [rax+rax*1+0x0]
   137d0:	lea    r10,[rsp+0x40]
   137d5:	lea    rdx,[rsp+0x38]
   137da:	mov    esi,eax
   137dc:	mov    rdi,r10
   137df:	mov    QWORD PTR [rsp+0x18],r10
   137e4:	call   3a80 <wcrtomb@plt>
   137e9:	cmp    r12,rax
   137ec:	jne    13a00 <__sprintf_chk@plt+0xfd20>
   137f2:	mov    rdi,QWORD PTR [rbp+0x8]
   137f6:	mov    r10,QWORD PTR [rsp+0x18]
   137fb:	mov    rdx,r12
   137fe:	add    rdi,r14
   13801:	mov    rsi,r10
   13804:	call   3a00 <memcpy@plt>
   13809:	mov    rax,QWORD PTR [rbp+0x10]
   1380d:	lea    rdx,[r14+0x1]
   13811:	lea    rsi,[r14*4+0x0]
   13819:	mov    DWORD PTR [rax+r14*4],r15d
   1381d:	add    r14,r12
   13820:	cmp    rdx,r14
   13823:	jge    13978 <__sprintf_chk@plt+0xfc98>
   13829:	mov    rdx,QWORD PTR [rsp+0x10]
   1382e:	lea    rdi,[rax+rsi*1+0x4]
   13833:	mov    esi,0xff
   13838:	not    rdx
   1383b:	add    rdx,r14
   1383e:	shl    rdx,0x2
   13842:	call   3900 <memset@plt>
   13847:	cmp    r14,rbx
   1384a:	jge    13a11 <__sprintf_chk@plt+0xfd31>
   13850:	mov    r12,QWORD PTR [rbp+0x0]
   13854:	mov    r15,QWORD PTR [rbp+0x28]
   13858:	mov    QWORD PTR [rsp+0x10],r14
   1385d:	lea    rax,[r12+r15*1]
   13861:	movzx  r13d,BYTE PTR [rax+r14*1]
   13866:	test   r13b,0x80
   1386a:	jne    1387a <__sprintf_chk@plt+0xfb9a>
   1386c:	mov    rdi,QWORD PTR [rsp+0x8]
   13871:	call   3c70 <mbsinit@plt>
   13876:	test   eax,eax
   13878:	jne    138f8 <__sprintf_chk@plt+0xfc18>
   1387a:	mov    r13,rbx
   1387d:	mov    rax,QWORD PTR [rbp+0x20]
   13881:	mov    rdi,QWORD PTR [rsp+0x28]
   13886:	lea    rsi,[r15+r14*1]
   1388a:	mov    rcx,QWORD PTR [rsp+0x8]
   1388f:	sub    r13,r14
   13892:	add    rsi,r12
   13895:	mov    rdx,r13
   13898:	mov    QWORD PTR [rsp+0x38],rax
   1389d:	mov    QWORD PTR [rsp+0x20],rdi
   138a2:	call   11a40 <__sprintf_chk@plt+0xdd60>
   138a7:	mov    r12,rax
   138aa:	lea    rax,[rax-0x1]
   138ae:	cmp    rax,0xfffffffffffffffc
   138b2:	ja     13930 <__sprintf_chk@plt+0xfc50>
   138b4:	mov    edx,DWORD PTR [rsp+0x34]
   138b8:	mov    edi,edx
   138ba:	mov    DWORD PTR [rsp+0x18],edx
   138be:	call   3c00 <towupper@plt>
   138c3:	mov    edx,DWORD PTR [rsp+0x18]
   138c7:	mov    r15d,eax
   138ca:	cmp    edx,eax
   138cc:	jne    137d0 <__sprintf_chk@plt+0xfaf0>
   138d2:	mov    rdi,QWORD PTR [rbp+0x8]
   138d6:	mov    rsi,QWORD PTR [rbp+0x28]
   138da:	mov    rdx,r12
   138dd:	add    rsi,r14
   138e0:	add    rdi,r14
   138e3:	add    rsi,QWORD PTR [rbp+0x0]
   138e7:	call   3a00 <memcpy@plt>
   138ec:	jmp    13809 <__sprintf_chk@plt+0xfb29>
   138f1:	nop    DWORD PTR [rax+0x0]
   138f8:	call   36a0 <__ctype_toupper_loc@plt>
   138fd:	mov    rcx,QWORD PTR [rbp+0x8]
   13901:	mov    rdx,QWORD PTR [rax]
   13904:	mov    edx,DWORD PTR [rdx+r13*4]
   13908:	mov    BYTE PTR [rcx+r14*1],dl
   1390c:	mov    rdx,QWORD PTR [rbp+0x8]
   13910:	mov    rax,QWORD PTR [rbp+0x10]
   13914:	movzx  edx,BYTE PTR [rdx+r14*1]
   13919:	mov    DWORD PTR [rax+r14*4],edx
   1391d:	add    r14,0x1
   13921:	jmp    13847 <__sprintf_chk@plt+0xfb67>
   13926:	cs nop WORD PTR [rax+rax*1+0x0]
   13930:	cmp    rax,0xfffffffffffffffd
   13934:	je     13980 <__sprintf_chk@plt+0xfca0>
   13936:	mov    rax,QWORD PTR [rbp+0x0]
   1393a:	mov    rdx,QWORD PTR [rbp+0x8]
   1393e:	mov    rcx,QWORD PTR [rsp+0x10]
   13943:	add    rax,r14
   13946:	add    rax,QWORD PTR [rbp+0x28]
   1394a:	movzx  eax,BYTE PTR [rax]
   1394d:	mov    BYTE PTR [rdx+r14*1],al
   13951:	mov    rdx,QWORD PTR [rbp+0x10]
   13955:	add    r14,0x1
   13959:	mov    DWORD PTR [rdx+rcx*4],eax
   1395c:	cmp    r12,0xffffffffffffffff
   13960:	jne    13847 <__sprintf_chk@plt+0xfb67>
   13966:	mov    rax,QWORD PTR [rsp+0x38]
   1396b:	mov    QWORD PTR [rbp+0x20],rax
   1396f:	jmp    13847 <__sprintf_chk@plt+0xfb67>
   13974:	nop    DWORD PTR [rax+0x0]
   13978:	mov    r14,rdx
   1397b:	jmp    13847 <__sprintf_chk@plt+0xfb67>
   13980:	mov    rax,QWORD PTR [rbp+0x58]
   13984:	cmp    QWORD PTR [rbp+0x40],rax
   13988:	jl     13a08 <__sprintf_chk@plt+0xfd28>
   1398a:	mov    rax,QWORD PTR [rbp+0x0]
   1398e:	mov    rdx,QWORD PTR [rbp+0x8]
   13992:	mov    rcx,QWORD PTR [rsp+0x10]
   13997:	add    rax,r14
   1399a:	add    rax,QWORD PTR [rbp+0x28]
   1399e:	movzx  eax,BYTE PTR [rax]
   139a1:	mov    BYTE PTR [rdx+r14*1],al
   139a5:	mov    rdx,QWORD PTR [rbp+0x10]
   139a9:	add    r14,0x1
   139ad:	mov    DWORD PTR [rdx+rcx*4],eax
   139b0:	jmp    13847 <__sprintf_chk@plt+0xfb67>
   139b5:	mov    eax,DWORD PTR [rbp+0x90]
   139bb:	test   eax,eax
   139bd:	jle    13bfa <__sprintf_chk@plt+0xff1a>
   139c3:	mov    rsi,QWORD PTR [rbp+0x28]
   139c7:	lea    edi,[rax-0x1]
   139ca:	lea    r10,[rsp+0x40]
   139cf:	xor    eax,eax
   139d1:	add    rsi,r15
   139d4:	add    rsi,QWORD PTR [rbp+0x0]
   139d8:	jmp    139e3 <__sprintf_chk@plt+0xfd03>
   139da:	add    rax,0x1
   139de:	cmp    r13,rax
   139e1:	je     139f4 <__sprintf_chk@plt+0xfd14>
   139e3:	movzx  ecx,BYTE PTR [rsi+rax*1]
   139e7:	movzx  ecx,BYTE PTR [rdx+rcx*1]
   139eb:	mov    BYTE PTR [r10+rax*1],cl
   139ef:	cmp    rdi,rax
   139f2:	jne    139da <__sprintf_chk@plt+0xfcfa>
   139f4:	mov    QWORD PTR [rsp+0x10],r10
   139f9:	jmp    136af <__sprintf_chk@plt+0xf9cf>
   139fe:	xchg   ax,ax
   13a00:	mov    r15,r14
   13a03:	jmp    13689 <__sprintf_chk@plt+0xf9a9>
   13a08:	mov    rax,QWORD PTR [rsp+0x38]
   13a0d:	mov    QWORD PTR [rbp+0x20],rax
   13a11:	mov    QWORD PTR [rbp+0x30],r14
   13a15:	xor    eax,eax
   13a17:	mov    QWORD PTR [rbp+0x38],r14
   13a1b:	jmp    1363f <__sprintf_chk@plt+0xf95f>
   13a20:	mov    rdi,QWORD PTR [rbp+0x8]
   13a24:	mov    rsi,QWORD PTR [rsp+0x10]
   13a29:	mov    rdx,r12
   13a2c:	add    rdi,r14
   13a2f:	call   3a00 <memcpy@plt>
   13a34:	jmp    1373b <__sprintf_chk@plt+0xfa5b>
   13a39:	cmp    QWORD PTR [rsp+0x20],0xfffffffffffffffd
   13a3f:	jne    13a4f <__sprintf_chk@plt+0xfd6f>
   13a41:	mov    rax,QWORD PTR [rbp+0x58]
   13a45:	cmp    QWORD PTR [rbp+0x40],rax
   13a49:	jl     13ad8 <__sprintf_chk@plt+0xfdf8>
   13a4f:	mov    rax,QWORD PTR [rbp+0x0]
   13a53:	mov    rdx,QWORD PTR [rbp+0x78]
   13a57:	add    rax,r15
   13a5a:	add    rax,QWORD PTR [rbp+0x28]
   13a5e:	movzx  eax,BYTE PTR [rax]
   13a61:	test   rdx,rdx
   13a64:	jne    13c16 <__sprintf_chk@plt+0xff36>
   13a6a:	mov    rdx,QWORD PTR [rbp+0x8]
   13a6e:	mov    rcx,r14
   13a71:	mov    BYTE PTR [rdx+r14*1],al
   13a75:	cmp    BYTE PTR [rbp+0x8c],0x0
   13a7c:	jne    13c09 <__sprintf_chk@plt+0xff29>
   13a82:	mov    rdx,QWORD PTR [rbp+0x10]
   13a86:	add    r15,0x1
   13a8a:	add    r14,0x1
   13a8e:	mov    DWORD PTR [rdx+rcx*4],eax
   13a91:	cmp    r12,0xffffffffffffffff
   13a95:	jne    13630 <__sprintf_chk@plt+0xf950>
   13a9b:	mov    rax,QWORD PTR [rsp+0x38]
   13aa0:	mov    QWORD PTR [rbp+0x20],rax
   13aa4:	jmp    13630 <__sprintf_chk@plt+0xf950>
   13aa9:	nop    DWORD PTR [rax+0x0]
   13ab0:	mov    rdx,QWORD PTR [rbp+0x18]
   13ab4:	mov    rsi,r14
   13ab7:	sub    rsi,r15
   13aba:	lea    rdx,[rdx+rsi*8]
   13abe:	mov    QWORD PTR [rdx+r15*8],r15
   13ac2:	add    r15,0x1
   13ac6:	cmp    r15,rax
   13ac9:	jne    13abe <__sprintf_chk@plt+0xfdde>
   13acb:	jmp    1374c <__sprintf_chk@plt+0xfa6c>
   13ad0:	mov    r14,rdx
   13ad3:	jmp    13630 <__sprintf_chk@plt+0xf950>
   13ad8:	mov    rax,QWORD PTR [rsp+0x38]
   13add:	mov    QWORD PTR [rbp+0x20],rax
   13ae1:	jmp    13635 <__sprintf_chk@plt+0xf955>
   13ae6:	cmp    rax,0xffffffffffffffff
   13aea:	je     13a20 <__sprintf_chk@plt+0xfd40>
   13af0:	add    rax,r14
   13af3:	mov    QWORD PTR [rsp+0x8],rax
   13af8:	mov    rcx,rax
   13afb:	mov    rax,QWORD PTR [rbp+0x40]
   13aff:	cmp    rcx,rax
   13b02:	ja     13ad8 <__sprintf_chk@plt+0xfdf8>
   13b04:	cmp    QWORD PTR [rbp+0x18],0x0
   13b09:	je     13bc2 <__sprintf_chk@plt+0xfee2>
   13b0f:	cmp    BYTE PTR [rbp+0x8c],0x0
   13b16:	jne    13b37 <__sprintf_chk@plt+0xfe57>
   13b18:	test   r14,r14
   13b1b:	je     13b30 <__sprintf_chk@plt+0xfe50>
   13b1d:	mov    rsi,QWORD PTR [rbp+0x18]
   13b21:	xor    eax,eax
   13b23:	mov    QWORD PTR [rsi+rax*8],rax
   13b27:	add    rax,0x1
   13b2b:	cmp    rax,r14
   13b2e:	jne    13b23 <__sprintf_chk@plt+0xfe43>
   13b30:	mov    BYTE PTR [rbp+0x8c],0x1
   13b37:	mov    rdi,QWORD PTR [rbp+0x8]
   13b3b:	mov    rsi,r10
   13b3e:	mov    QWORD PTR [rsp+0x10],rdx
   13b43:	add    rdi,r14
   13b46:	call   3a00 <memcpy@plt>
   13b4b:	mov    rax,QWORD PTR [rbp+0x10]
   13b4f:	mov    rdx,QWORD PTR [rsp+0x10]
   13b54:	lea    rdi,[rax+r14*4]
   13b58:	mov    rax,QWORD PTR [rbp+0x18]
   13b5c:	mov    DWORD PTR [rdi],r13d
   13b5f:	lea    rsi,[rax+r14*8]
   13b63:	mov    eax,0x1
   13b68:	mov    QWORD PTR [rsi],r15
   13b6b:	cmp    rdx,0x1
   13b6f:	jbe    13b94 <__sprintf_chk@plt+0xfeb4>
   13b71:	mov    rcx,QWORD PTR [rsp+0x20]
   13b76:	cmp    r12,rax
   13b79:	cmova  rcx,rax
   13b7d:	add    rcx,r15
   13b80:	mov    QWORD PTR [rsi+rax*8],rcx
   13b84:	mov    DWORD PTR [rdi+rax*4],0xffffffff
   13b8b:	add    rax,0x1
   13b8f:	cmp    rax,rdx
   13b92:	jne    13b71 <__sprintf_chk@plt+0xfe91>
   13b94:	mov    rbx,QWORD PTR [rbp+0x58]
   13b98:	sub    rdx,r12
   13b9b:	add    rbx,rdx
   13b9e:	mov    QWORD PTR [rbp+0x58],rbx
   13ba2:	cmp    r15,QWORD PTR [rbp+0x60]
   13ba6:	jge    13bac <__sprintf_chk@plt+0xfecc>
   13ba8:	add    QWORD PTR [rbp+0x68],rdx
   13bac:	cmp    QWORD PTR [rbp+0x40],rbx
   13bb0:	mov    r14,QWORD PTR [rsp+0x8]
   13bb5:	cmovle rbx,QWORD PTR [rbp+0x40]
   13bba:	add    r15,r12
   13bbd:	jmp    13630 <__sprintf_chk@plt+0xf950>
   13bc2:	lea    rdi,[rax*8+0x0]
   13bca:	mov    QWORD PTR [rsp+0x18],r10
   13bcf:	mov    QWORD PTR [rsp+0x10],rdx
   13bd4:	call   3a70 <malloc@plt>
   13bd9:	mov    rdx,QWORD PTR [rsp+0x10]
   13bde:	mov    r10,QWORD PTR [rsp+0x18]
   13be3:	test   rax,rax
   13be6:	mov    QWORD PTR [rbp+0x18],rax
   13bea:	jne    13b0f <__sprintf_chk@plt+0xfe2f>
   13bf0:	mov    eax,0xc
   13bf5:	jmp    1363f <__sprintf_chk@plt+0xf95f>
   13bfa:	lea    r10,[rsp+0x40]
   13bff:	jmp    139f4 <__sprintf_chk@plt+0xfd14>
   13c04:	call   3840 <__stack_chk_fail@plt>
   13c09:	mov    rdx,QWORD PTR [rbp+0x18]
   13c0d:	mov    QWORD PTR [rdx+r14*8],r15
   13c11:	jmp    13a82 <__sprintf_chk@plt+0xfda2>
   13c16:	movzx  eax,BYTE PTR [rdx+rax*1]
   13c1a:	jmp    13a6a <__sprintf_chk@plt+0xfd8a>
   13c1f:	nop
   13c20:	push   r15
   13c22:	push   r14
   13c24:	push   r13
   13c26:	push   r12
   13c28:	mov    r12,rsi
   13c2b:	push   rbp
   13c2c:	mov    rbp,rdx
   13c2f:	push   rbx
   13c30:	mov    rbx,rdi
   13c33:	sub    rsp,0x18
   13c37:	mov    rsi,QWORD PTR [rdi+0x10]
   13c3b:	mov    r13,QWORD PTR [rdi+0x8]
   13c3f:	cmp    rsi,r13
   13c42:	jae    13cf0 <__sprintf_chk@plt+0x10010>
   13c48:	mov    r14,QWORD PTR [rdi+0x18]
   13c4c:	mov    r13,QWORD PTR [rdi+0x28]
   13c50:	mov    rax,rsi
   13c53:	mov    edx,ebp
   13c55:	and    edx,0xfffc00ff
   13c5b:	shl    rax,0x4
   13c5f:	add    rax,QWORD PTR [rbx]
   13c62:	cmp    bpl,0x6
   13c66:	mov    QWORD PTR [rax+0x8],rbp
   13c6a:	mov    QWORD PTR [rax],r12
   13c6d:	mov    DWORD PTR [rax+0x8],edx
   13c70:	sete   dl
   13c73:	cmp    bpl,0x5
   13c77:	jne    13c83 <__sprintf_chk@plt+0xffa3>
   13c79:	cmp    DWORD PTR [rbx+0xb4],0x1
   13c80:	setg   dl
   13c83:	mov    ecx,edx
   13c85:	movzx  edx,BYTE PTR [rax+0xa]
   13c89:	pxor   xmm0,xmm0
   13c8d:	shl    ecx,0x4
   13c90:	and    edx,0xffffffef
   13c93:	or     edx,ecx
   13c95:	mov    BYTE PTR [rax+0xa],dl
   13c98:	mov    QWORD PTR [r14+rsi*8],0xffffffffffffffff
   13ca0:	mov    rax,QWORD PTR [rbx+0x10]
   13ca4:	lea    rax,[rax+rax*2]
   13ca8:	lea    rax,[r13+rax*8+0x0]
   13cad:	mov    QWORD PTR [rax+0x10],0x0
   13cb5:	movups XMMWORD PTR [rax],xmm0
   13cb8:	mov    rax,QWORD PTR [rbx+0x10]
   13cbc:	lea    rdx,[rax+rax*2]
   13cc0:	mov    rax,QWORD PTR [rbx+0x30]
   13cc4:	lea    rax,[rax+rdx*8]
   13cc8:	mov    QWORD PTR [rax+0x10],0x0
   13cd0:	movups XMMWORD PTR [rax],xmm0
   13cd3:	mov    rax,QWORD PTR [rbx+0x10]
   13cd7:	lea    rdx,[rax+0x1]
   13cdb:	mov    QWORD PTR [rbx+0x10],rdx
   13cdf:	add    rsp,0x18
   13ce3:	pop    rbx
   13ce4:	pop    rbp
   13ce5:	pop    r12
   13ce7:	pop    r13
   13ce9:	pop    r14
   13ceb:	pop    r15
   13ced:	ret    
   13cee:	xchg   ax,ax
   13cf0:	movabs rax,0xaaaaaaaaaaaaaaa
   13cfa:	lea    r15,[r13+r13*1+0x0]
   13cff:	cmp    r15,rax
   13d02:	ja     13de2 <__sprintf_chk@plt+0x10102>
   13d08:	mov    rsi,r13
   13d0b:	mov    rdi,QWORD PTR [rdi]
   13d0e:	shl    rsi,0x5
   13d12:	call   3b20 <realloc@plt>
   13d17:	test   rax,rax
   13d1a:	je     13de2 <__sprintf_chk@plt+0x10102>
   13d20:	mov    QWORD PTR [rbx],rax
   13d23:	mov    rdi,QWORD PTR [rbx+0x18]
   13d27:	mov    rsi,r13
   13d2a:	shl    rsi,0x4
   13d2e:	mov    QWORD PTR [rsp],rsi
   13d32:	call   3b20 <realloc@plt>
   13d37:	mov    rdi,QWORD PTR [rbx+0x20]
   13d3b:	mov    rsi,QWORD PTR [rsp]
   13d3f:	mov    r14,rax
   13d42:	call   3b20 <realloc@plt>
   13d47:	mov    rdi,QWORD PTR [rbx+0x28]
   13d4b:	lea    rsi,[r15+r13*1]
   13d4f:	shl    rsi,0x4
   13d53:	mov    QWORD PTR [rsp+0x8],rax
   13d58:	mov    QWORD PTR [rsp],rsi
   13d5c:	call   3b20 <realloc@plt>
   13d61:	mov    rdi,QWORD PTR [rbx+0x30]
   13d65:	mov    rsi,QWORD PTR [rsp]
   13d69:	mov    r13,rax
   13d6c:	call   3b20 <realloc@plt>
   13d71:	test   r14,r14
   13d74:	mov    r8,QWORD PTR [rsp+0x8]
   13d79:	je     13db0 <__sprintf_chk@plt+0x100d0>
   13d7b:	test   r8,r8
   13d7e:	je     13db0 <__sprintf_chk@plt+0x100d0>
   13d80:	test   r13,r13
   13d83:	je     13db0 <__sprintf_chk@plt+0x100d0>
   13d85:	test   rax,rax
   13d88:	je     13db0 <__sprintf_chk@plt+0x100d0>
   13d8a:	mov    QWORD PTR [rbx+0x18],r14
   13d8e:	mov    rsi,QWORD PTR [rbx+0x10]
   13d92:	mov    QWORD PTR [rbx+0x20],r8
   13d96:	mov    QWORD PTR [rbx+0x28],r13
   13d9a:	mov    QWORD PTR [rbx+0x30],rax
   13d9e:	mov    QWORD PTR [rbx+0x8],r15
   13da2:	jmp    13c50 <__sprintf_chk@plt+0xff70>
   13da7:	nop    WORD PTR [rax+rax*1+0x0]
   13db0:	mov    rdi,r14
   13db3:	mov    QWORD PTR [rsp+0x8],rax
   13db8:	mov    QWORD PTR [rsp],r8
   13dbc:	call   3680 <free@plt>
   13dc1:	mov    r8,QWORD PTR [rsp]
   13dc5:	mov    rdi,r8
   13dc8:	call   3680 <free@plt>
   13dcd:	mov    rdi,r13
   13dd0:	call   3680 <free@plt>
   13dd5:	mov    rax,QWORD PTR [rsp+0x8]
   13dda:	mov    rdi,rax
   13ddd:	call   3680 <free@plt>
   13de2:	mov    rax,0xffffffffffffffff
   13de9:	jmp    13cdf <__sprintf_chk@plt+0xffff>
   13dee:	xchg   ax,ax
   13df0:	push   r13
   13df2:	mov    r13,rsi
   13df5:	push   r12
   13df7:	shl    r13,0x4
   13dfb:	mov    r12,rdi
   13dfe:	push   rbp
   13dff:	mov    rbp,rsi
   13e02:	push   rbx
   13e03:	mov    ebx,edx
   13e05:	sub    rsp,0x8
   13e09:	mov    rax,QWORD PTR [rdi]
   13e0c:	mov    rsi,QWORD PTR [rax+r13*1]
   13e10:	mov    rdx,QWORD PTR [rax+r13*1+0x8]
   13e15:	call   13c20 <__sprintf_chk@plt+0xff40>
   13e1a:	mov    r8,rax
   13e1d:	cmp    rax,0xffffffffffffffff
   13e21:	je     13e72 <__sprintf_chk@plt+0x10192>
   13e23:	mov    rsi,QWORD PTR [r12]
   13e27:	mov    rdx,rax
   13e2a:	mov    eax,ebx
   13e2c:	shl    rdx,0x4
   13e30:	and    eax,0x3ff
   13e35:	add    rdx,rsi
   13e38:	shl    eax,0x8
   13e3b:	mov    ecx,eax
   13e3d:	mov    eax,DWORD PTR [rdx+0x8]
   13e40:	and    eax,0xfffc00ff
   13e45:	or     eax,ecx
   13e47:	mov    DWORD PTR [rdx+0x8],eax
   13e4a:	or     bx,WORD PTR [rsi+r13*1+0x9]
   13e50:	and    eax,0xfff800ff
   13e55:	and    ebx,0x3ff
   13e5b:	shl    ebx,0x8
   13e5e:	or     ebx,0x40000
   13e64:	or     ebx,eax
   13e66:	mov    rax,QWORD PTR [r12+0x20]
   13e6b:	mov    DWORD PTR [rdx+0x8],ebx
   13e6e:	mov    QWORD PTR [rax+r8*8],rbp
   13e72:	add    rsp,0x8
   13e76:	mov    rax,r8
   13e79:	pop    rbx
   13e7a:	pop    rbp
   13e7b:	pop    r12
   13e7d:	pop    r13
   13e7f:	ret    
   13e80:	push   rbp
   13e81:	mov    rbp,rdi
   13e84:	mov    rdi,QWORD PTR [rdi+0x30]
   13e88:	call   3680 <free@plt>
   13e8d:	mov    rdi,QWORD PTR [rbp+0x48]
   13e91:	call   3680 <free@plt>
   13e96:	mov    rax,QWORD PTR [rbp+0x50]
   13e9a:	lea    rdx,[rbp+0x8]
   13e9e:	cmp    rax,rdx
   13ea1:	je     13eb5 <__sprintf_chk@plt+0x101d5>
   13ea3:	mov    rdi,QWORD PTR [rax+0x10]
   13ea7:	call   3680 <free@plt>
   13eac:	mov    rdi,QWORD PTR [rbp+0x50]
   13eb0:	call   3680 <free@plt>
   13eb5:	mov    rdi,QWORD PTR [rbp+0x18]
   13eb9:	call   3680 <free@plt>
   13ebe:	mov    rdi,QWORD PTR [rbp+0x60]
   13ec2:	call   3680 <free@plt>
   13ec7:	mov    rdi,QWORD PTR [rbp+0x58]
   13ecb:	call   3680 <free@plt>
   13ed0:	mov    rdi,rbp
   13ed3:	pop    rbp
   13ed4:	jmp    3680 <free@plt>
   13ed9:	nop    DWORD PTR [rax+0x0]
   13ee0:	push   r14
   13ee2:	mov    r14,rdi
   13ee5:	push   r13
   13ee7:	push   r12
   13ee9:	push   rbp
   13eea:	push   rbx
   13eeb:	cmp    QWORD PTR [rdi+0xe8],0x0
   13ef3:	jle    13f79 <__sprintf_chk@plt+0x10299>
   13ef9:	xor    r13d,r13d
   13efc:	nop    DWORD PTR [rax+0x0]
   13f00:	mov    rax,QWORD PTR [r14+0xf8]
   13f07:	mov    r12,QWORD PTR [rax+r13*8]
   13f0b:	cmp    QWORD PTR [r12+0x20],0x0
   13f11:	jle    13f3d <__sprintf_chk@plt+0x1025d>
   13f13:	xor    ebx,ebx
   13f15:	nop    DWORD PTR [rax]
   13f18:	mov    rax,QWORD PTR [r12+0x28]
   13f1d:	mov    rbp,QWORD PTR [rax+rbx*8]
   13f21:	add    rbx,0x1
   13f25:	mov    rdi,QWORD PTR [rbp+0x20]
   13f29:	call   3680 <free@plt>
   13f2e:	mov    rdi,rbp
   13f31:	call   3680 <free@plt>
   13f36:	cmp    QWORD PTR [r12+0x20],rbx
   13f3b:	jg     13f18 <__sprintf_chk@plt+0x10238>
   13f3d:	mov    rdi,QWORD PTR [r12+0x28]
   13f42:	call   3680 <free@plt>
   13f47:	mov    rax,QWORD PTR [r12+0x10]
   13f4c:	test   rax,rax
   13f4f:	je     13f64 <__sprintf_chk@plt+0x10284>
   13f51:	mov    rdi,QWORD PTR [rax+0x10]
   13f55:	call   3680 <free@plt>
   13f5a:	mov    rdi,QWORD PTR [r12+0x10]
   13f5f:	call   3680 <free@plt>
   13f64:	mov    rdi,r12
   13f67:	add    r13,0x1
   13f6b:	call   3680 <free@plt>
   13f70:	cmp    QWORD PTR [r14+0xe8],r13
   13f77:	jg     13f00 <__sprintf_chk@plt+0x10220>
   13f79:	mov    QWORD PTR [r14+0xe8],0x0
   13f84:	pop    rbx
   13f85:	mov    QWORD PTR [r14+0xc8],0x0
   13f90:	pop    rbp
   13f91:	pop    r12
   13f93:	pop    r13
   13f95:	pop    r14
   13f97:	ret    
   13f98:	nop    DWORD PTR [rax+rax*1+0x0]
   13fa0:	push   rbp
   13fa1:	mov    rbp,rdi
   13fa4:	push   rbx
   13fa5:	sub    rsp,0x8
   13fa9:	test   rsi,rsi
   13fac:	js     14040 <__sprintf_chk@plt+0x10360>
   13fb2:	cmp    QWORD PTR [rdi+0x58],rsi
   13fb6:	je     14050 <__sprintf_chk@plt+0x10370>
   13fbc:	cmp    DWORD PTR [rdi+0x90],0x1
   13fc3:	jle    13ff8 <__sprintf_chk@plt+0x10318>
   13fc5:	mov    rax,QWORD PTR [rdi+0x10]
   13fc9:	jmp    13fd6 <__sprintf_chk@plt+0x102f6>
   13fcb:	nop    DWORD PTR [rax+rax*1+0x0]
   13fd0:	sub    rsi,0x1
   13fd4:	jb     14040 <__sprintf_chk@plt+0x10360>
   13fd6:	mov    ebx,DWORD PTR [rax+rsi*4]
   13fd9:	cmp    ebx,0xffffffff
   13fdc:	je     13fd0 <__sprintf_chk@plt+0x102f0>
   13fde:	cmp    BYTE PTR [rbp+0x8e],0x0
   13fe5:	jne    14060 <__sprintf_chk@plt+0x10380>
   13fe7:	xor    eax,eax
   13fe9:	cmp    ebx,0xa
   13fec:	je     14029 <__sprintf_chk@plt+0x10349>
   13fee:	add    rsp,0x8
   13ff2:	pop    rbx
   13ff3:	pop    rbp
   13ff4:	ret    
   13ff5:	nop    DWORD PTR [rax]
   13ff8:	mov    rax,QWORD PTR [rdi+0x8]
   13ffc:	mov    rdx,QWORD PTR [rdi+0x80]
   14003:	movzx  eax,BYTE PTR [rax+rsi*1]
   14007:	mov    rcx,rax
   1400a:	sar    rax,0x6
   1400e:	mov    rax,QWORD PTR [rdx+rax*8]
   14012:	shr    rax,cl
   14015:	mov    rdx,rax
   14018:	mov    eax,0x1
   1401d:	and    edx,0x1
   14020:	jne    13fee <__sprintf_chk@plt+0x1030e>
   14022:	xor    eax,eax
   14024:	cmp    cl,0xa
   14027:	jne    13fee <__sprintf_chk@plt+0x1030e>
   14029:	xor    eax,eax
   1402b:	cmp    BYTE PTR [rbp+0x8d],0x0
   14032:	setne  al
   14035:	add    rsp,0x8
   14039:	add    eax,eax
   1403b:	pop    rbx
   1403c:	pop    rbp
   1403d:	ret    
   1403e:	xchg   ax,ax
   14040:	mov    eax,DWORD PTR [rbp+0x70]
   14043:	add    rsp,0x8
   14047:	pop    rbx
   14048:	pop    rbp
   14049:	ret    
   1404a:	nop    WORD PTR [rax+rax*1+0x0]
   14050:	and    edx,0x2
   14053:	cmp    edx,0x1
   14056:	sbb    eax,eax
   14058:	and    eax,0x2
   1405b:	add    eax,0x8
   1405e:	jmp    13fee <__sprintf_chk@plt+0x1030e>
   14060:	mov    edi,ebx
   14062:	call   3a60 <iswalnum@plt>
   14067:	test   eax,eax
   14069:	jne    14074 <__sprintf_chk@plt+0x10394>
   1406b:	cmp    ebx,0x5f
   1406e:	jne    13fe7 <__sprintf_chk@plt+0x10307>
   14074:	mov    eax,0x1
   14079:	jmp    13fee <__sprintf_chk@plt+0x1030e>
   1407e:	xchg   ax,ax
   14080:	mov    rax,QWORD PTR [rdi+0x8]
   14084:	mov    r8,rdx
   14087:	movzx  ecx,BYTE PTR [rax+rdx*1]
   1408b:	movzx  eax,BYTE PTR [rsi+0x8]
   1408f:	cmp    al,0x5
   14091:	je     1413d <__sprintf_chk@plt+0x1045d>
   14097:	ja     14130 <__sprintf_chk@plt+0x10450>
   1409d:	cmp    al,0x1
   1409f:	je     14168 <__sprintf_chk@plt+0x10488>
   140a5:	cmp    al,0x3
   140a7:	jne    141b3 <__sprintf_chk@plt+0x104d3>
   140ad:	mov    rdx,QWORD PTR [rsi]
   140b0:	movzx  eax,cl
   140b3:	sar    rax,0x6
   140b7:	mov    rax,QWORD PTR [rdx+rax*8]
   140bb:	shr    rax,cl
   140be:	and    eax,0x1
   140c1:	je     14190 <__sprintf_chk@plt+0x104b0>
   140c7:	push   rbx
   140c8:	mov    ebx,DWORD PTR [rsi+0x8]
   140cb:	mov    eax,0x1
   140d0:	test   ebx,0x3ff00
   140d6:	je     14128 <__sprintf_chk@plt+0x10448>
   140d8:	mov    edx,DWORD PTR [rdi+0xa0]
   140de:	mov    rsi,r8
   140e1:	shr    ebx,0x8
   140e4:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   140e9:	mov    ecx,ebx
   140eb:	mov    edx,eax
   140ed:	and    cx,0x3ff
   140f2:	test   bl,0x4
   140f5:	jne    14178 <__sprintf_chk@plt+0x10498>
   140fb:	and    ebx,0x8
   140fe:	je     14108 <__sprintf_chk@plt+0x10428>
   14100:	test   al,0x1
   14102:	jne    141af <__sprintf_chk@plt+0x104cf>
   14108:	test   cl,0x20
   1410b:	je     14114 <__sprintf_chk@plt+0x10434>
   1410d:	xor    eax,eax
   1410f:	test   dl,0x2
   14112:	je     14128 <__sprintf_chk@plt+0x10448>
   14114:	shr    edx,0x3
   14117:	mov    eax,0x1
   1411c:	and    edx,0x1
   1411f:	and    ecx,0x80
   14125:	cmovne eax,edx
   14128:	pop    rbx
   14129:	ret    
   1412a:	nop    WORD PTR [rax+rax*1+0x0]
   14130:	cmp    al,0x7
   14132:	mov    eax,0x0
   14137:	jne    14160 <__sprintf_chk@plt+0x10480>
   14139:	test   cl,cl
   1413b:	js     1415c <__sprintf_chk@plt+0x1047c>
   1413d:	cmp    cl,0xa
   14140:	je     14198 <__sprintf_chk@plt+0x104b8>
   14142:	test   cl,cl
   14144:	jne    140c7 <__sprintf_chk@plt+0x103e7>
   14146:	mov    rdx,QWORD PTR [rdi+0x98]
   1414d:	xor    eax,eax
   1414f:	test   BYTE PTR [rdx+0xd8],0x80
   14156:	je     140c7 <__sprintf_chk@plt+0x103e7>
   1415c:	ret    
   1415d:	nop    DWORD PTR [rax]
   14160:	ret    
   14161:	nop    DWORD PTR [rax+0x0]
   14168:	xor    eax,eax
   1416a:	cmp    BYTE PTR [rsi],cl
   1416c:	je     140c7 <__sprintf_chk@plt+0x103e7>
   14172:	ret    
   14173:	nop    DWORD PTR [rax+rax*1+0x0]
   14178:	xor    eax,eax
   1417a:	test   dl,0x1
   1417d:	je     14128 <__sprintf_chk@plt+0x10448>
   1417f:	and    ebx,0x8
   14182:	je     14108 <__sprintf_chk@plt+0x10428>
   14184:	pop    rbx
   14185:	ret    
   14186:	cs nop WORD PTR [rax+rax*1+0x0]
   14190:	ret    
   14191:	nop    DWORD PTR [rax+0x0]
   14198:	mov    rdx,QWORD PTR [rdi+0x98]
   1419f:	xor    eax,eax
   141a1:	test   BYTE PTR [rdx+0xd8],0x40
   141a8:	jne    140c7 <__sprintf_chk@plt+0x103e7>
   141ae:	ret    
   141af:	xor    eax,eax
   141b1:	pop    rbx
   141b2:	ret    
   141b3:	xor    eax,eax
   141b5:	ret    
   141b6:	cs nop WORD PTR [rax+rax*1+0x0]
   141c0:	push   r15
   141c2:	push   r14
   141c4:	push   r13
   141c6:	push   r12
   141c8:	push   rbp
   141c9:	push   rbx
   141ca:	sub    rsp,0x18
   141ce:	cmp    QWORD PTR [rsi+0x8],0x0
   141d3:	mov    r14,QWORD PTR [rdi+0x98]
   141da:	jle    14290 <__sprintf_chk@plt+0x105b0>
   141e0:	mov    r15,rdi
   141e3:	mov    rbp,rsi
   141e6:	mov    r13,rdx
   141e9:	xor    ebx,ebx
   141eb:	jmp    141fe <__sprintf_chk@plt+0x1051e>
   141ed:	nop    DWORD PTR [rax]
   141f0:	add    rbx,0x1
   141f4:	cmp    QWORD PTR [rbp+0x8],rbx
   141f8:	jle    14290 <__sprintf_chk@plt+0x105b0>
   141fe:	mov    rax,QWORD PTR [rbp+0x10]
   14202:	mov    r12,QWORD PTR [rax+rbx*8]
   14206:	mov    rax,r12
   14209:	shl    rax,0x4
   1420d:	add    rax,QWORD PTR [r14]
   14210:	cmp    BYTE PTR [rax+0x8],0x8
   14214:	jne    141f0 <__sprintf_chk@plt+0x10510>
   14216:	mov    rax,QWORD PTR [rax]
   14219:	cmp    rax,0x3f
   1421d:	jg     141f0 <__sprintf_chk@plt+0x10510>
   1421f:	mov    rdx,QWORD PTR [r14+0xa0]
   14226:	bt     rdx,rax
   1422a:	jae    141f0 <__sprintf_chk@plt+0x10510>
   1422c:	mov    r8,QWORD PTR [r15+0xf8]
   14233:	mov    rdx,QWORD PTR [r15+0xe8]
   1423a:	cmp    QWORD PTR [r15+0xf0],rdx
   14241:	je     142a8 <__sprintf_chk@plt+0x105c8>
   14243:	mov    esi,0x30
   14248:	mov    edi,0x1
   1424d:	mov    QWORD PTR [rsp+0x8],rdx
   14252:	mov    QWORD PTR [rsp],r8
   14256:	call   3990 <calloc@plt>
   1425b:	mov    r8,QWORD PTR [rsp]
   1425f:	mov    rdx,QWORD PTR [rsp+0x8]
   14264:	mov    QWORD PTR [r8+rdx*8],rax
   14268:	test   rax,rax
   1426b:	je     142a1 <__sprintf_chk@plt+0x105c1>
   1426d:	add    rdx,0x1
   14271:	mov    QWORD PTR [rax+0x8],r12
   14275:	add    rbx,0x1
   14279:	mov    QWORD PTR [r15+0xe8],rdx
   14280:	mov    QWORD PTR [rax],r13
   14283:	cmp    QWORD PTR [rbp+0x8],rbx
   14287:	jg     141fe <__sprintf_chk@plt+0x1051e>
   1428d:	nop    DWORD PTR [rax]
   14290:	xor    eax,eax
   14292:	add    rsp,0x18
   14296:	pop    rbx
   14297:	pop    rbp
   14298:	pop    r12
   1429a:	pop    r13
   1429c:	pop    r14
   1429e:	pop    r15
   142a0:	ret    
   142a1:	mov    eax,0xc
   142a6:	jmp    14292 <__sprintf_chk@plt+0x105b2>
   142a8:	mov    rsi,rdx
   142ab:	lea    rax,[rdx+rdx*1]
   142af:	mov    rdi,r8
   142b2:	shl    rsi,0x4
   142b6:	mov    QWORD PTR [rsp],rax
   142ba:	call   3b20 <realloc@plt>
   142bf:	mov    r8,rax
   142c2:	test   rax,rax
   142c5:	je     142a1 <__sprintf_chk@plt+0x105c1>
   142c7:	mov    QWORD PTR [r15+0xf8],rax
   142ce:	mov    rax,QWORD PTR [rsp]
   142d2:	mov    rdx,QWORD PTR [r15+0xe8]
   142d9:	mov    QWORD PTR [r15+0xf0],rax
   142e0:	jmp    14243 <__sprintf_chk@plt+0x10563>
   142e5:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   142f0:	push   r12
   142f2:	shl    rdx,0x4
   142f6:	mov    r12,r8
   142f9:	push   rbp
   142fa:	mov    rbp,rdi
   142fd:	mov    rdi,rcx
   14300:	mov    rax,QWORD PTR [rbp+0x0]
   14304:	push   rbx
   14305:	sub    rax,0x1
   14309:	mov    QWORD PTR [rbp+0x0],rax
   1430d:	lea    rbx,[rax+rax*2]
   14311:	mov    rax,QWORD PTR [rbp+0x10]
   14315:	shl    rbx,0x4
   14319:	add    rax,rbx
   1431c:	mov    rcx,QWORD PTR [rax]
   1431f:	mov    QWORD PTR [rsi],rcx
   14322:	mov    rsi,QWORD PTR [rax+0x10]
   14326:	call   3a00 <memcpy@plt>
   1432b:	mov    rdi,QWORD PTR [r12+0x10]
   14330:	call   3680 <free@plt>
   14335:	mov    rax,QWORD PTR [rbp+0x10]
   14339:	mov    rdi,QWORD PTR [rax+rbx*1+0x10]
   1433e:	call   3680 <free@plt>
   14343:	add    rbx,QWORD PTR [rbp+0x10]
   14347:	movdqu xmm0,XMMWORD PTR [rbx+0x18]
   1434c:	movups XMMWORD PTR [r12],xmm0
   14351:	mov    rax,QWORD PTR [rbx+0x28]
   14355:	mov    QWORD PTR [r12+0x10],rax
   1435a:	mov    rax,QWORD PTR [rbx+0x8]
   1435e:	pop    rbx
   1435f:	pop    rbp
   14360:	pop    r12
   14362:	ret    
   14363:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   1436e:	xchg   ax,ax
   14370:	push   r15
   14372:	push   r14
   14374:	mov    r14,rcx
   14377:	push   r13
   14379:	mov    r13,rdx
   1437c:	push   r12
   1437e:	mov    r12,r8
   14381:	push   rbp
   14382:	mov    rbp,rdi
   14385:	push   rbx
   14386:	mov    rbx,rsi
   14389:	sub    rsp,0x8
   1438d:	test   r9d,0x400000
   14394:	je     143bb <__sprintf_chk@plt+0x106db>
   14396:	mov    ecx,0x6
   1439b:	lea    rdi,[rip+0x10bcb]        # 24f6d <__sprintf_chk@plt+0x2128d>
   143a2:	mov    rsi,r8
   143a5:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   143a7:	seta   al
   143aa:	sbb    al,0x0
   143ac:	test   al,al
   143ae:	jne    144b6 <__sprintf_chk@plt+0x107d6>
   143b4:	lea    r12,[rip+0x10bac]        # 24f67 <__sprintf_chk@plt+0x21287>
   143bb:	mov    rax,QWORD PTR [r13+0x48]
   143bf:	mov    rdi,QWORD PTR [r13+0x18]
   143c3:	cmp    QWORD PTR [r14],rax
   143c6:	je     144ea <__sprintf_chk@plt+0x1080a>
   143cc:	lea    rdx,[rax+0x1]
   143d0:	mov    QWORD PTR [r13+0x48],rdx
   143d4:	lea    r13,[rdi+rax*8]
   143d8:	mov    rdi,r12
   143db:	call   3970 <wctype@plt>
   143e0:	mov    ecx,0x6
   143e5:	lea    rdi,[rip+0x10b8d]        # 24f79 <__sprintf_chk@plt+0x21299>
   143ec:	mov    rsi,r12
   143ef:	mov    QWORD PTR [r13+0x0],rax
   143f3:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   143f5:	seta   al
   143f8:	sbb    al,0x0
   143fa:	test   al,al
   143fc:	je     14470 <__sprintf_chk@plt+0x10790>
   143fe:	mov    ecx,0x6
   14403:	lea    rdi,[rip+0x10b75]        # 24f7f <__sprintf_chk@plt+0x2129f>
   1440a:	mov    rsi,r12
   1440d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1440f:	seta   al
   14412:	sbb    al,0x0
   14414:	test   al,al
   14416:	jne    14518 <__sprintf_chk@plt+0x10838>
   1441c:	call   3cd0 <__ctype_b_loc@plt>
   14421:	xor    ecx,ecx
   14423:	mov    edi,0x1
   14428:	mov    rdx,QWORD PTR [rax]
   1442b:	test   rbp,rbp
   1442e:	jne    146e0 <__sprintf_chk@plt+0x10a00>
   14434:	nop    DWORD PTR [rax+0x0]
   14438:	test   BYTE PTR [rdx+rcx*2],0x2
   1443c:	je     1444f <__sprintf_chk@plt+0x1076f>
   1443e:	mov    rax,rcx
   14441:	mov    rsi,rdi
   14444:	sar    rax,0x6
   14448:	shl    rsi,cl
   1444b:	or     QWORD PTR [rbx+rax*8],rsi
   1444f:	add    rcx,0x1
   14453:	cmp    rcx,0x100
   1445a:	jne    14438 <__sprintf_chk@plt+0x10758>
   1445c:	xor    eax,eax
   1445e:	add    rsp,0x8
   14462:	pop    rbx
   14463:	pop    rbp
   14464:	pop    r12
   14466:	pop    r13
   14468:	pop    r14
   1446a:	pop    r15
   1446c:	ret    
   1446d:	nop    DWORD PTR [rax]
   14470:	call   3cd0 <__ctype_b_loc@plt>
   14475:	xor    ecx,ecx
   14477:	mov    edi,0x1
   1447c:	mov    rdx,QWORD PTR [rax]
   1447f:	test   rbp,rbp
   14482:	jne    146aa <__sprintf_chk@plt+0x109ca>
   14488:	nop    DWORD PTR [rax+rax*1+0x0]
   14490:	test   BYTE PTR [rdx+rcx*2],0x8
   14494:	je     144a7 <__sprintf_chk@plt+0x107c7>
   14496:	mov    rax,rcx
   14499:	mov    rsi,rdi
   1449c:	sar    rax,0x6
   144a0:	shl    rsi,cl
   144a3:	or     QWORD PTR [rbx+rax*8],rsi
   144a7:	add    rcx,0x1
   144ab:	cmp    rcx,0x100
   144b2:	jne    14490 <__sprintf_chk@plt+0x107b0>
   144b4:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   144b6:	lea    rdi,[rip+0x10ab6]        # 24f73 <__sprintf_chk@plt+0x21293>
   144bd:	mov    ecx,0x6
   144c2:	mov    rsi,r8
   144c5:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   144c7:	mov    rdi,QWORD PTR [r13+0x18]
   144cb:	seta   al
   144ce:	sbb    al,0x0
   144d0:	test   al,al
   144d2:	lea    rax,[rip+0x10a8e]        # 24f67 <__sprintf_chk@plt+0x21287>
   144d9:	cmove  r12,rax
   144dd:	mov    rax,QWORD PTR [r13+0x48]
   144e1:	cmp    QWORD PTR [r14],rax
   144e4:	jne    143cc <__sprintf_chk@plt+0x106ec>
   144ea:	lea    r15,[rax+rax*1+0x1]
   144ef:	lea    rsi,[r15*8+0x0]
   144f7:	call   3b20 <realloc@plt>
   144fc:	mov    rdi,rax
   144ff:	test   rax,rax
   14502:	je     1480e <__sprintf_chk@plt+0x10b2e>
   14508:	mov    QWORD PTR [r13+0x18],rax
   1450c:	mov    QWORD PTR [r14],r15
   1450f:	mov    rax,QWORD PTR [r13+0x48]
   14513:	jmp    143cc <__sprintf_chk@plt+0x106ec>
   14518:	mov    ecx,0x6
   1451d:	lea    rdi,[rip+0x10a4f]        # 24f73 <__sprintf_chk@plt+0x21293>
   14524:	mov    rsi,r12
   14527:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   14529:	seta   al
   1452c:	sbb    al,0x0
   1452e:	test   al,al
   14530:	je     1459a <__sprintf_chk@plt+0x108ba>
   14532:	mov    ecx,0x6
   14537:	lea    rdi,[rip+0x10a47]        # 24f85 <__sprintf_chk@plt+0x212a5>
   1453e:	mov    rsi,r12
   14541:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   14543:	seta   al
   14546:	sbb    al,0x0
   14548:	test   al,al
   1454a:	jne    145e2 <__sprintf_chk@plt+0x10902>
   14550:	call   3cd0 <__ctype_b_loc@plt>
   14555:	xor    ecx,ecx
   14557:	mov    edi,0x1
   1455c:	mov    rdx,QWORD PTR [rax]
   1455f:	test   rbp,rbp
   14562:	jne    148aa <__sprintf_chk@plt+0x10bca>
   14568:	nop    DWORD PTR [rax+rax*1+0x0]
   14570:	test   BYTE PTR [rdx+rcx*2+0x1],0x20
   14575:	je     14588 <__sprintf_chk@plt+0x108a8>
   14577:	mov    rax,rcx
   1457a:	mov    rsi,rdi
   1457d:	sar    rax,0x6
   14581:	shl    rsi,cl
   14584:	or     QWORD PTR [rbx+rax*8],rsi
   14588:	add    rcx,0x1
   1458c:	cmp    rcx,0x100
   14593:	jne    14570 <__sprintf_chk@plt+0x10890>
   14595:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   1459a:	call   3cd0 <__ctype_b_loc@plt>
   1459f:	xor    ecx,ecx
   145a1:	mov    edi,0x1
   145a6:	mov    rdx,QWORD PTR [rax]
   145a9:	test   rbp,rbp
   145ac:	jne    14718 <__sprintf_chk@plt+0x10a38>
   145b2:	nop    WORD PTR [rax+rax*1+0x0]
   145b8:	test   BYTE PTR [rdx+rcx*2+0x1],0x2
   145bd:	je     145d0 <__sprintf_chk@plt+0x108f0>
   145bf:	mov    rax,rcx
   145c2:	mov    rsi,rdi
   145c5:	sar    rax,0x6
   145c9:	shl    rsi,cl
   145cc:	or     QWORD PTR [rbx+rax*8],rsi
   145d0:	add    rcx,0x1
   145d4:	cmp    rcx,0x100
   145db:	jne    145b8 <__sprintf_chk@plt+0x108d8>
   145dd:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   145e2:	mov    ecx,0x6
   145e7:	lea    rdi,[rip+0x10979]        # 24f67 <__sprintf_chk@plt+0x21287>
   145ee:	mov    rsi,r12
   145f1:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   145f3:	seta   al
   145f6:	sbb    al,0x0
   145f8:	test   al,al
   145fa:	je     14662 <__sprintf_chk@plt+0x10982>
   145fc:	mov    ecx,0x6
   14601:	lea    rdi,[rip+0x1099c]        # 24fa4 <__sprintf_chk@plt+0x212c4>
   14608:	mov    rsi,r12
   1460b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1460d:	seta   al
   14610:	sbb    al,0x0
   14612:	test   al,al
   14614:	jne    14751 <__sprintf_chk@plt+0x10a71>
   1461a:	call   3cd0 <__ctype_b_loc@plt>
   1461f:	xor    ecx,ecx
   14621:	mov    edi,0x1
   14626:	mov    rdx,QWORD PTR [rax]
   14629:	test   rbp,rbp
   1462c:	jne    148e1 <__sprintf_chk@plt+0x10c01>
   14632:	nop    WORD PTR [rax+rax*1+0x0]
   14638:	test   BYTE PTR [rdx+rcx*2+0x1],0x8
   1463d:	je     14650 <__sprintf_chk@plt+0x10970>
   1463f:	mov    rax,rcx
   14642:	mov    rsi,rdi
   14645:	sar    rax,0x6
   14649:	shl    rsi,cl
   1464c:	or     QWORD PTR [rbx+rax*8],rsi
   14650:	add    rcx,0x1
   14654:	cmp    rcx,0x100
   1465b:	jne    14638 <__sprintf_chk@plt+0x10958>
   1465d:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   14662:	call   3cd0 <__ctype_b_loc@plt>
   14667:	xor    ecx,ecx
   14669:	mov    edi,0x1
   1466e:	mov    rdx,QWORD PTR [rax]
   14671:	test   rbp,rbp
   14674:	jne    14877 <__sprintf_chk@plt+0x10b97>
   1467a:	nop    WORD PTR [rax+rax*1+0x0]
   14680:	test   BYTE PTR [rdx+rcx*2+0x1],0x4
   14685:	je     14698 <__sprintf_chk@plt+0x109b8>
   14687:	mov    rax,rcx
   1468a:	mov    rsi,rdi
   1468d:	sar    rax,0x6
   14691:	shl    rsi,cl
   14694:	or     QWORD PTR [rbx+rax*8],rsi
   14698:	add    rcx,0x1
   1469c:	cmp    rcx,0x100
   146a3:	jne    14680 <__sprintf_chk@plt+0x109a0>
   146a5:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   146aa:	xor    eax,eax
   146ac:	nop    DWORD PTR [rax+0x0]
   146b0:	test   BYTE PTR [rdx+rax*2],0x8
   146b4:	je     146cf <__sprintf_chk@plt+0x109ef>
   146b6:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   146bb:	mov    r10,rdi
   146be:	mov    rsi,rcx
   146c1:	shl    r10,cl
   146c4:	shr    rsi,0x3
   146c8:	and    esi,0x18
   146cb:	or     QWORD PTR [rbx+rsi*1],r10
   146cf:	add    rax,0x1
   146d3:	cmp    rax,0x100
   146d9:	jne    146b0 <__sprintf_chk@plt+0x109d0>
   146db:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   146e0:	xor    eax,eax
   146e2:	nop    WORD PTR [rax+rax*1+0x0]
   146e8:	test   BYTE PTR [rdx+rax*2],0x2
   146ec:	je     14707 <__sprintf_chk@plt+0x10a27>
   146ee:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   146f3:	mov    r11,rdi
   146f6:	mov    rsi,rcx
   146f9:	shl    r11,cl
   146fc:	shr    rsi,0x3
   14700:	and    esi,0x18
   14703:	or     QWORD PTR [rbx+rsi*1],r11
   14707:	add    rax,0x1
   1470b:	cmp    rax,0x100
   14711:	jne    146e8 <__sprintf_chk@plt+0x10a08>
   14713:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   14718:	xor    eax,eax
   1471a:	nop    WORD PTR [rax+rax*1+0x0]
   14720:	test   BYTE PTR [rdx+rax*2+0x1],0x2
   14725:	je     14740 <__sprintf_chk@plt+0x10a60>
   14727:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   1472c:	mov    r15,rdi
   1472f:	mov    rsi,rcx
   14732:	shl    r15,cl
   14735:	shr    rsi,0x3
   14739:	and    esi,0x18
   1473c:	or     QWORD PTR [rbx+rsi*1],r15
   14740:	add    rax,0x1
   14744:	cmp    rax,0x100
   1474a:	jne    14720 <__sprintf_chk@plt+0x10a40>
   1474c:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   14751:	mov    ecx,0x6
   14756:	lea    rdi,[rip+0x1082e]        # 24f8b <__sprintf_chk@plt+0x212ab>
   1475d:	mov    rsi,r12
   14760:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   14762:	seta   al
   14765:	sbb    al,0x0
   14767:	test   al,al
   14769:	jne    147b2 <__sprintf_chk@plt+0x10ad2>
   1476b:	call   3cd0 <__ctype_b_loc@plt>
   14770:	xor    ecx,ecx
   14772:	mov    edi,0x1
   14777:	mov    rdx,QWORD PTR [rax]
   1477a:	test   rbp,rbp
   1477d:	jne    14abe <__sprintf_chk@plt+0x10dde>
   14783:	nop    DWORD PTR [rax+rax*1+0x0]
   14788:	test   BYTE PTR [rdx+rcx*2+0x1],0x40
   1478d:	je     147a0 <__sprintf_chk@plt+0x10ac0>
   1478f:	mov    rax,rcx
   14792:	mov    rsi,rdi
   14795:	sar    rax,0x6
   14799:	shl    rsi,cl
   1479c:	or     QWORD PTR [rbx+rax*8],rsi
   147a0:	add    rcx,0x1
   147a4:	cmp    rcx,0x100
   147ab:	jne    14788 <__sprintf_chk@plt+0x10aa8>
   147ad:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   147b2:	mov    ecx,0x6
   147b7:	lea    rdi,[rip+0x107af]        # 24f6d <__sprintf_chk@plt+0x2128d>
   147be:	mov    rsi,r12
   147c1:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   147c3:	seta   al
   147c6:	sbb    al,0x0
   147c8:	test   al,al
   147ca:	jne    14818 <__sprintf_chk@plt+0x10b38>
   147cc:	call   3cd0 <__ctype_b_loc@plt>
   147d1:	xor    ecx,ecx
   147d3:	mov    edi,0x1
   147d8:	mov    rax,QWORD PTR [rax]
   147db:	test   rbp,rbp
   147de:	jne    14b28 <__sprintf_chk@plt+0x10e48>
   147e4:	test   BYTE PTR [rax+rcx*2+0x1],0x1
   147e9:	je     147fc <__sprintf_chk@plt+0x10b1c>
   147eb:	mov    rdx,rcx
   147ee:	mov    rsi,rdi
   147f1:	sar    rdx,0x6
   147f5:	shl    rsi,cl
   147f8:	or     QWORD PTR [rbx+rdx*8],rsi
   147fc:	add    rcx,0x1
   14800:	cmp    rcx,0x100
   14807:	jne    147e4 <__sprintf_chk@plt+0x10b04>
   14809:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   1480e:	mov    eax,0xc
   14813:	jmp    1445e <__sprintf_chk@plt+0x1077e>
   14818:	mov    ecx,0x6
   1481d:	lea    rdi,[rip+0x1076d]        # 24f91 <__sprintf_chk@plt+0x212b1>
   14824:	mov    rsi,r12
   14827:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   14829:	seta   al
   1482c:	sbb    al,0x0
   1482e:	test   al,al
   14830:	jne    14914 <__sprintf_chk@plt+0x10c34>
   14836:	call   3cd0 <__ctype_b_loc@plt>
   1483b:	xor    ecx,ecx
   1483d:	mov    esi,0x1
   14842:	mov    rdx,QWORD PTR [rax]
   14845:	test   rbp,rbp
   14848:	jne    14af1 <__sprintf_chk@plt+0x10e11>
   1484e:	test   BYTE PTR [rdx+rcx*2],0x1
   14852:	je     14865 <__sprintf_chk@plt+0x10b85>
   14854:	mov    rax,rcx
   14857:	mov    rdi,rsi
   1485a:	sar    rax,0x6
   1485e:	shl    rdi,cl
   14861:	or     QWORD PTR [rbx+rax*8],rdi
   14865:	add    rcx,0x1
   14869:	cmp    rcx,0x100
   14870:	jne    1484e <__sprintf_chk@plt+0x10b6e>
   14872:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   14877:	xor    eax,eax
   14879:	test   BYTE PTR [rdx+rax*2+0x1],0x4
   1487e:	je     14899 <__sprintf_chk@plt+0x10bb9>
   14880:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   14885:	mov    r14,rdi
   14888:	mov    rsi,rcx
   1488b:	shl    r14,cl
   1488e:	shr    rsi,0x3
   14892:	and    esi,0x18
   14895:	or     QWORD PTR [rbx+rsi*1],r14
   14899:	add    rax,0x1
   1489d:	cmp    rax,0x100
   148a3:	jne    14879 <__sprintf_chk@plt+0x10b99>
   148a5:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   148aa:	xor    eax,eax
   148ac:	nop    DWORD PTR [rax+0x0]
   148b0:	test   BYTE PTR [rdx+rax*2+0x1],0x20
   148b5:	je     148d0 <__sprintf_chk@plt+0x10bf0>
   148b7:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   148bc:	mov    r15,rdi
   148bf:	mov    rsi,rcx
   148c2:	shl    r15,cl
   148c5:	shr    rsi,0x3
   148c9:	and    esi,0x18
   148cc:	or     QWORD PTR [rbx+rsi*1],r15
   148d0:	add    rax,0x1
   148d4:	cmp    rax,0x100
   148da:	jne    148b0 <__sprintf_chk@plt+0x10bd0>
   148dc:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   148e1:	xor    eax,eax
   148e3:	test   BYTE PTR [rdx+rax*2+0x1],0x8
   148e8:	je     14903 <__sprintf_chk@plt+0x10c23>
   148ea:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   148ef:	mov    r14,rdi
   148f2:	mov    rsi,rcx
   148f5:	shl    r14,cl
   148f8:	shr    rsi,0x3
   148fc:	and    esi,0x18
   148ff:	or     QWORD PTR [rbx+rsi*1],r14
   14903:	add    rax,0x1
   14907:	cmp    rax,0x100
   1490d:	jne    148e3 <__sprintf_chk@plt+0x10c03>
   1490f:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   14914:	mov    ecx,0x6
   14919:	lea    rdi,[rip+0x10677]        # 24f97 <__sprintf_chk@plt+0x212b7>
   14920:	mov    rsi,r12
   14923:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   14925:	seta   al
   14928:	sbb    al,0x0
   1492a:	test   al,al
   1492c:	jne    149a4 <__sprintf_chk@plt+0x10cc4>
   1492e:	call   3cd0 <__ctype_b_loc@plt>
   14933:	xor    ecx,ecx
   14935:	mov    edx,0x1
   1493a:	mov    rsi,QWORD PTR [rax]
   1493d:	test   rbp,rbp
   14940:	jne    1496c <__sprintf_chk@plt+0x10c8c>
   14942:	cmp    WORD PTR [rsi+rcx*2],0x0
   14947:	jns    1495a <__sprintf_chk@plt+0x10c7a>
   14949:	mov    rax,rcx
   1494c:	mov    rdi,rdx
   1494f:	sar    rax,0x6
   14953:	shl    rdi,cl
   14956:	or     QWORD PTR [rbx+rax*8],rdi
   1495a:	add    rcx,0x1
   1495e:	cmp    rcx,0x100
   14965:	jne    14942 <__sprintf_chk@plt+0x10c62>
   14967:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   1496c:	xor    eax,eax
   1496e:	mov    edi,0x1
   14973:	cmp    WORD PTR [rsi+rax*2],0x0
   14978:	jns    14993 <__sprintf_chk@plt+0x10cb3>
   1497a:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   1497f:	mov    r14,rdi
   14982:	mov    rdx,rcx
   14985:	shl    r14,cl
   14988:	shr    rdx,0x3
   1498c:	and    edx,0x18
   1498f:	or     QWORD PTR [rbx+rdx*1],r14
   14993:	add    rax,0x1
   14997:	cmp    rax,0x100
   1499d:	jne    14973 <__sprintf_chk@plt+0x10c93>
   1499f:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   149a4:	lea    rsi,[rip+0x105f2]        # 24f9d <__sprintf_chk@plt+0x212bd>
   149ab:	mov    rdi,r12
   149ae:	call   39b0 <strcmp@plt>
   149b3:	test   eax,eax
   149b5:	jne    14a2b <__sprintf_chk@plt+0x10d4b>
   149b7:	call   3cd0 <__ctype_b_loc@plt>
   149bc:	xor    ecx,ecx
   149be:	mov    edx,0x1
   149c3:	mov    rsi,QWORD PTR [rax]
   149c6:	test   rbp,rbp
   149c9:	jne    149f4 <__sprintf_chk@plt+0x10d14>
   149cb:	test   BYTE PTR [rsi+rcx*2],0x4
   149cf:	je     149e2 <__sprintf_chk@plt+0x10d02>
   149d1:	mov    rax,rcx
   149d4:	mov    rdi,rdx
   149d7:	sar    rax,0x6
   149db:	shl    rdi,cl
   149de:	or     QWORD PTR [rbx+rax*8],rdi
   149e2:	add    rcx,0x1
   149e6:	cmp    rcx,0x100
   149ed:	jne    149cb <__sprintf_chk@plt+0x10ceb>
   149ef:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   149f4:	xor    eax,eax
   149f6:	mov    edi,0x1
   149fb:	test   BYTE PTR [rsi+rax*2],0x4
   149ff:	je     14a1a <__sprintf_chk@plt+0x10d3a>
   14a01:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   14a06:	mov    r8,rdi
   14a09:	mov    rdx,rcx
   14a0c:	shl    r8,cl
   14a0f:	shr    rdx,0x3
   14a13:	and    edx,0x18
   14a16:	or     QWORD PTR [rbx+rdx*1],r8
   14a1a:	add    rax,0x1
   14a1e:	cmp    rax,0x100
   14a24:	jne    149fb <__sprintf_chk@plt+0x10d1b>
   14a26:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   14a2b:	lea    rsi,[rip+0x10571]        # 24fa3 <__sprintf_chk@plt+0x212c3>
   14a32:	mov    rdi,r12
   14a35:	call   39b0 <strcmp@plt>
   14a3a:	test   eax,eax
   14a3c:	jne    14ab4 <__sprintf_chk@plt+0x10dd4>
   14a3e:	call   3cd0 <__ctype_b_loc@plt>
   14a43:	xor    ecx,ecx
   14a45:	mov    edx,0x1
   14a4a:	mov    rsi,QWORD PTR [rax]
   14a4d:	test   rbp,rbp
   14a50:	jne    14a7c <__sprintf_chk@plt+0x10d9c>
   14a52:	test   BYTE PTR [rsi+rcx*2+0x1],0x10
   14a57:	je     14a6a <__sprintf_chk@plt+0x10d8a>
   14a59:	mov    rax,rcx
   14a5c:	mov    rdi,rdx
   14a5f:	sar    rax,0x6
   14a63:	shl    rdi,cl
   14a66:	or     QWORD PTR [rbx+rax*8],rdi
   14a6a:	add    rcx,0x1
   14a6e:	cmp    rcx,0x100
   14a75:	jne    14a52 <__sprintf_chk@plt+0x10d72>
   14a77:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   14a7c:	xor    eax,eax
   14a7e:	mov    edi,0x1
   14a83:	test   BYTE PTR [rsi+rax*2+0x1],0x10
   14a88:	je     14aa3 <__sprintf_chk@plt+0x10dc3>
   14a8a:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   14a8f:	mov    r9,rdi
   14a92:	mov    rdx,rcx
   14a95:	shl    r9,cl
   14a98:	shr    rdx,0x3
   14a9c:	and    edx,0x18
   14a9f:	or     QWORD PTR [rbx+rdx*1],r9
   14aa3:	add    rax,0x1
   14aa7:	cmp    rax,0x100
   14aad:	jne    14a83 <__sprintf_chk@plt+0x10da3>
   14aaf:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   14ab4:	mov    eax,0x4
   14ab9:	jmp    1445e <__sprintf_chk@plt+0x1077e>
   14abe:	xor    eax,eax
   14ac0:	test   BYTE PTR [rdx+rax*2+0x1],0x40
   14ac5:	je     14ae0 <__sprintf_chk@plt+0x10e00>
   14ac7:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   14acc:	mov    r14,rdi
   14acf:	mov    rsi,rcx
   14ad2:	shl    r14,cl
   14ad5:	shr    rsi,0x3
   14ad9:	and    esi,0x18
   14adc:	or     QWORD PTR [rbx+rsi*1],r14
   14ae0:	add    rax,0x1
   14ae4:	cmp    rax,0x100
   14aea:	jne    14ac0 <__sprintf_chk@plt+0x10de0>
   14aec:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   14af1:	xor    eax,eax
   14af3:	mov    edi,0x1
   14af8:	test   BYTE PTR [rdx+rax*2],0x1
   14afc:	je     14b17 <__sprintf_chk@plt+0x10e37>
   14afe:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   14b03:	mov    r15,rdi
   14b06:	mov    rsi,rcx
   14b09:	shl    r15,cl
   14b0c:	shr    rsi,0x3
   14b10:	and    esi,0x18
   14b13:	or     QWORD PTR [rbx+rsi*1],r15
   14b17:	add    rax,0x1
   14b1b:	cmp    rax,0x100
   14b21:	jne    14af8 <__sprintf_chk@plt+0x10e18>
   14b23:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   14b28:	xor    edx,edx
   14b2a:	test   BYTE PTR [rax+rdx*2+0x1],0x1
   14b2f:	je     14b4a <__sprintf_chk@plt+0x10e6a>
   14b31:	movzx  ecx,BYTE PTR [rbp+rdx*1+0x0]
   14b36:	mov    r14,rdi
   14b39:	mov    rsi,rcx
   14b3c:	shl    r14,cl
   14b3f:	shr    rsi,0x3
   14b43:	and    esi,0x18
   14b46:	or     QWORD PTR [rbx+rsi*1],r14
   14b4a:	add    rdx,0x1
   14b4e:	cmp    rdx,0x100
   14b55:	jne    14b2a <__sprintf_chk@plt+0x10e4a>
   14b57:	jmp    1445c <__sprintf_chk@plt+0x1077c>
   14b5c:	nop    DWORD PTR [rax+0x0]
   14b60:	push   r15
   14b62:	mov    r8d,edx
   14b65:	push   r14
   14b67:	push   r13
   14b69:	push   r12
   14b6b:	mov    r12,rsi
   14b6e:	push   rbp
   14b6f:	mov    rbp,rsi
   14b72:	push   rbx
   14b73:	mov    rbx,rdi
   14b76:	sub    rsp,0x48
   14b7a:	mov    rax,QWORD PTR fs:0x28
   14b83:	mov    QWORD PTR [rsp+0x38],rax
   14b88:	mov    rax,QWORD PTR [rdi+0x28]
   14b8c:	sub    rbp,rax
   14b8f:	cmp    rax,rsi
   14b92:	jle    14bf8 <__sprintf_chk@plt+0x10f18>
   14b94:	cmp    DWORD PTR [rdi+0x90],0x1
   14b9b:	jle    14ba5 <__sprintf_chk@plt+0x10ec5>
   14b9d:	mov    QWORD PTR [rdi+0x20],0x0
   14ba5:	mov    rax,QWORD PTR [rbx+0x50]
   14ba9:	mov    QWORD PTR [rbx+0x30],0x0
   14bb1:	mov    rbp,r12
   14bb4:	mov    QWORD PTR [rbx+0x28],0x0
   14bbc:	mov    QWORD PTR [rbx+0x58],rax
   14bc0:	mov    rax,QWORD PTR [rbx+0x60]
   14bc4:	mov    QWORD PTR [rbx+0x38],0x0
   14bcc:	mov    QWORD PTR [rbx+0x68],rax
   14bd0:	mov    eax,r8d
   14bd3:	and    eax,0x1
   14bd6:	mov    BYTE PTR [rbx+0x8c],0x0
   14bdd:	cmp    eax,0x1
   14be0:	sbb    eax,eax
   14be2:	and    eax,0x2
   14be5:	add    eax,0x4
   14be8:	cmp    BYTE PTR [rbx+0x8b],0x0
   14bef:	mov    DWORD PTR [rbx+0x70],eax
   14bf2:	je     14cd0 <__sprintf_chk@plt+0x10ff0>
   14bf8:	test   rbp,rbp
   14bfb:	je     14ce0 <__sprintf_chk@plt+0x11000>
   14c01:	mov    rax,QWORD PTR [rbx+0x38]
   14c05:	movzx  edx,BYTE PTR [rbx+0x8c]
   14c0c:	mov    r13,QWORD PTR [rbx+0x30]
   14c10:	cmp    rax,rbp
   14c13:	jle    14dd0 <__sprintf_chk@plt+0x110f0>
   14c19:	test   dl,dl
   14c1b:	jne    14ec0 <__sprintf_chk@plt+0x111e0>
   14c21:	lea    rsi,[rbp-0x1]
   14c25:	mov    edx,r8d
   14c28:	mov    rdi,rbx
   14c2b:	sub    r13,rbp
   14c2e:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   14c33:	cmp    DWORD PTR [rbx+0x90],0x1
   14c3a:	mov    DWORD PTR [rbx+0x70],eax
   14c3d:	jg     14cf0 <__sprintf_chk@plt+0x11010>
   14c43:	cmp    BYTE PTR [rbx+0x8b],0x0
   14c4a:	jne    14f08 <__sprintf_chk@plt+0x11228>
   14c50:	sub    QWORD PTR [rbx+0x38],rbp
   14c54:	mov    QWORD PTR [rbx+0x30],r13
   14c58:	mov    rax,QWORD PTR [rbx+0x58]
   14c5c:	mov    rdx,QWORD PTR [rbx+0x68]
   14c60:	mov    esi,DWORD PTR [rbx+0x90]
   14c66:	sub    rax,rbp
   14c69:	sub    rdx,rbp
   14c6c:	cmp    BYTE PTR [rbx+0x8b],0x0
   14c73:	jne    14c79 <__sprintf_chk@plt+0x10f99>
   14c75:	add    QWORD PTR [rbx+0x8],rbp
   14c79:	mov    QWORD PTR [rbx+0x28],r12
   14c7d:	mov    QWORD PTR [rbx+0x58],rax
   14c81:	mov    QWORD PTR [rbx+0x68],rdx
   14c85:	cmp    esi,0x1
   14c88:	jle    14db8 <__sprintf_chk@plt+0x110d8>
   14c8e:	cmp    BYTE PTR [rbx+0x88],0x0
   14c95:	mov    rdi,rbx
   14c98:	jne    14d18 <__sprintf_chk@plt+0x11038>
   14c9a:	call   12ea0 <__sprintf_chk@plt+0xf1c0>
   14c9f:	mov    QWORD PTR [rbx+0x48],0x0
   14ca7:	xor    eax,eax
   14ca9:	mov    rcx,QWORD PTR [rsp+0x38]
   14cae:	sub    rcx,QWORD PTR fs:0x28
   14cb7:	jne    15331 <__sprintf_chk@plt+0x11651>
   14cbd:	add    rsp,0x48
   14cc1:	pop    rbx
   14cc2:	pop    rbp
   14cc3:	pop    r12
   14cc5:	pop    r13
   14cc7:	pop    r14
   14cc9:	pop    r15
   14ccb:	ret    
   14ccc:	nop    DWORD PTR [rax+0x0]
   14cd0:	mov    rax,QWORD PTR [rbx]
   14cd3:	mov    QWORD PTR [rbx+0x8],rax
   14cd7:	test   rbp,rbp
   14cda:	jne    14c01 <__sprintf_chk@plt+0x10f21>
   14ce0:	mov    rax,QWORD PTR [rbx+0x58]
   14ce4:	mov    rdx,QWORD PTR [rbx+0x68]
   14ce8:	mov    esi,DWORD PTR [rbx+0x90]
   14cee:	jmp    14c79 <__sprintf_chk@plt+0x10f99>
   14cf0:	mov    rdi,QWORD PTR [rbx+0x10]
   14cf4:	lea    rdx,[r13*4+0x0]
   14cfc:	lea    rsi,[rdi+rbp*4]
   14d00:	call   3b80 <memmove@plt>
   14d05:	mov    r13,QWORD PTR [rbx+0x30]
   14d09:	sub    r13,rbp
   14d0c:	jmp    14c43 <__sprintf_chk@plt+0x10f63>
   14d11:	nop    DWORD PTR [rax+0x0]
   14d18:	call   135e0 <__sprintf_chk@plt+0xf900>
   14d1d:	test   eax,eax
   14d1f:	je     14c9f <__sprintf_chk@plt+0x10fbf>
   14d25:	jmp    14ca9 <__sprintf_chk@plt+0x10fc9>
   14d2a:	nop    WORD PTR [rax+rax*1+0x0]
   14d30:	mov    rax,QWORD PTR [rbx+0x78]
   14d34:	add    r9,QWORD PTR [rbx]
   14d37:	movzx  ecx,BYTE PTR [rbp+r9*1-0x1]
   14d3d:	mov    QWORD PTR [rbx+0x38],0x0
   14d45:	test   rax,rax
   14d48:	je     14d4e <__sprintf_chk@plt+0x1106e>
   14d4a:	movzx  ecx,BYTE PTR [rax+rcx*1]
   14d4e:	mov    rdx,QWORD PTR [rbx+0x80]
   14d55:	movzx  eax,cl
   14d58:	sar    rax,0x6
   14d5c:	mov    rax,QWORD PTR [rdx+rax*8]
   14d60:	mov    edx,0x1
   14d65:	shr    rax,cl
   14d68:	test   al,0x1
   14d6a:	jne    14d88 <__sprintf_chk@plt+0x110a8>
   14d6c:	xor    edx,edx
   14d6e:	cmp    cl,0xa
   14d71:	jne    14d88 <__sprintf_chk@plt+0x110a8>
   14d73:	xor    edx,edx
   14d75:	cmp    BYTE PTR [rbx+0x8d],0x0
   14d7c:	setne  dl
   14d7f:	add    edx,edx
   14d81:	nop    DWORD PTR [rax+0x0]
   14d88:	mov    DWORD PTR [rbx+0x70],edx
   14d8b:	mov    rax,QWORD PTR [rbx+0x58]
   14d8f:	mov    rdx,QWORD PTR [rbx+0x68]
   14d93:	sub    rax,rbp
   14d96:	sub    rdx,rbp
   14d99:	cmp    BYTE PTR [rbx+0x8b],0x0
   14da0:	je     14c75 <__sprintf_chk@plt+0x10f95>
   14da6:	mov    QWORD PTR [rbx+0x28],r12
   14daa:	mov    QWORD PTR [rbx+0x58],rax
   14dae:	mov    QWORD PTR [rbx+0x68],rdx
   14db2:	nop    WORD PTR [rax+rax*1+0x0]
   14db8:	cmp    BYTE PTR [rbx+0x8b],0x0
   14dbf:	jne    15150 <__sprintf_chk@plt+0x11470>
   14dc5:	mov    QWORD PTR [rbx+0x30],rax
   14dc9:	jmp    14c9f <__sprintf_chk@plt+0x10fbf>
   14dce:	xchg   ax,ax
   14dd0:	test   dl,dl
   14dd2:	jne    1523d <__sprintf_chk@plt+0x1155d>
   14dd8:	movsxd rsi,DWORD PTR [rbx+0x90]
   14ddf:	mov    r9,QWORD PTR [rbx+0x28]
   14de3:	mov    QWORD PTR [rbx+0x30],0x0
   14deb:	cmp    esi,0x1
   14dee:	jle    14d30 <__sprintf_chk@plt+0x11050>
   14df4:	cmp    BYTE PTR [rbx+0x89],0x0
   14dfb:	jne    15090 <__sprintf_chk@plt+0x113b0>
   14e01:	lea    r15,[rax+r9*1]
   14e05:	cmp    r12,r15
   14e08:	jle    151e8 <__sprintf_chk@plt+0x11508>
   14e0e:	lea    rax,[rbx+0x20]
   14e12:	lea    rdi,[rsp+0x24]
   14e17:	mov    QWORD PTR [rsp+0x10],rax
   14e1c:	nop    DWORD PTR [rax+0x0]
   14e20:	mov    r14,QWORD PTR [rbx+0x50]
   14e24:	mov    rsi,QWORD PTR [rbx]
   14e27:	mov    DWORD PTR [rsp+0xc],r8d
   14e2c:	mov    rax,QWORD PTR [rbx+0x20]
   14e30:	mov    rcx,QWORD PTR [rsp+0x10]
   14e35:	mov    QWORD PTR [rsp],rdi
   14e39:	sub    r14,r15
   14e3c:	add    rsi,r15
   14e3f:	mov    rdx,r14
   14e42:	mov    QWORD PTR [rsp+0x18],rax
   14e47:	call   11a40 <__sprintf_chk@plt+0xdd60>
   14e4c:	mov    ecx,DWORD PTR [rsp+0x24]
   14e50:	mov    rdi,QWORD PTR [rsp]
   14e54:	lea    rsi,[rax-0x1]
   14e58:	mov    r8d,DWORD PTR [rsp+0xc]
   14e5d:	cmp    rsi,0xfffffffffffffffc
   14e61:	ja     15265 <__sprintf_chk@plt+0x11585>
   14e67:	add    r15,rax
   14e6a:	cmp    r12,r15
   14e6d:	jg     14e20 <__sprintf_chk@plt+0x11140>
   14e6f:	sub    r15,r12
   14e72:	mov    QWORD PTR [rbx+0x30],r15
   14e76:	mov    r14,r15
   14e79:	cmp    ecx,0xffffffff
   14e7c:	je     151f2 <__sprintf_chk@plt+0x11512>
   14e82:	cmp    BYTE PTR [rbx+0x8e],0x0
   14e89:	jne    152cd <__sprintf_chk@plt+0x115ed>
   14e8f:	xor    eax,eax
   14e91:	cmp    ecx,0xa
   14e94:	jne    14ea4 <__sprintf_chk@plt+0x111c4>
   14e96:	xor    eax,eax
   14e98:	cmp    BYTE PTR [rbx+0x8d],0x0
   14e9f:	setne  al
   14ea2:	add    eax,eax
   14ea4:	mov    DWORD PTR [rbx+0x70],eax
   14ea7:	test   r14,r14
   14eaa:	jne    1528a <__sprintf_chk@plt+0x115aa>
   14eb0:	mov    QWORD PTR [rbx+0x38],r14
   14eb4:	jmp    14c58 <__sprintf_chk@plt+0x10f78>
   14eb9:	nop    DWORD PTR [rax+0x0]
   14ec0:	mov    r15,QWORD PTR [rbx+0x18]
   14ec4:	mov    rcx,r13
   14ec7:	xor    esi,esi
   14ec9:	jmp    14edf <__sprintf_chk@plt+0x111ff>
   14ecb:	nop    DWORD PTR [rax+rax*1+0x0]
   14ed0:	jge    151c0 <__sprintf_chk@plt+0x114e0>
   14ed6:	lea    rsi,[rax+0x1]
   14eda:	cmp    rsi,rcx
   14edd:	jge    14f28 <__sprintf_chk@plt+0x11248>
   14edf:	lea    rdx,[rsi+rcx*1]
   14ee3:	mov    rax,rdx
   14ee6:	shr    rax,0x3f
   14eea:	add    rax,rdx
   14eed:	sar    rax,1
   14ef0:	mov    rdx,QWORD PTR [r15+rax*8]
   14ef4:	mov    r9,rax
   14ef7:	cmp    rdx,rbp
   14efa:	jle    14ed0 <__sprintf_chk@plt+0x111f0>
   14efc:	mov    rcx,rax
   14eff:	jmp    14eda <__sprintf_chk@plt+0x111fa>
   14f01:	nop    DWORD PTR [rax+0x0]
   14f08:	mov    rdi,QWORD PTR [rbx+0x8]
   14f0c:	mov    rdx,r13
   14f0f:	lea    rsi,[rdi+rbp*1]
   14f13:	call   3b80 <memmove@plt>
   14f18:	mov    r13,QWORD PTR [rbx+0x30]
   14f1c:	sub    r13,rbp
   14f1f:	jmp    14c50 <__sprintf_chk@plt+0x10f70>
   14f24:	nop    DWORD PTR [rax+0x0]
   14f28:	lea    r14,[rax+0x1]
   14f2c:	cmp    rdx,rbp
   14f2f:	jge    15140 <__sprintf_chk@plt+0x11460>
   14f35:	mov    edx,r8d
   14f38:	mov    rsi,r9
   14f3b:	mov    rdi,rbx
   14f3e:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   14f43:	mov    DWORD PTR [rbx+0x70],eax
   14f46:	cmp    rbp,r14
   14f49:	jne    14fc8 <__sprintf_chk@plt+0x112e8>
   14f4b:	cmp    rbp,r13
   14f4e:	jge    14fc8 <__sprintf_chk@plt+0x112e8>
   14f50:	cmp    QWORD PTR [r15+r14*8],rbp
   14f54:	jne    14fc8 <__sprintf_chk@plt+0x112e8>
   14f56:	mov    rdi,QWORD PTR [rbx+0x10]
   14f5a:	sub    r13,rbp
   14f5d:	lea    rdx,[r13*4+0x0]
   14f65:	lea    rsi,[rdi+rbp*4]
   14f69:	call   3b80 <memmove@plt>
   14f6e:	mov    rdi,QWORD PTR [rbx+0x8]
   14f72:	mov    rdx,QWORD PTR [rbx+0x30]
   14f76:	lea    rsi,[rdi+rbp*1]
   14f7a:	sub    rdx,rbp
   14f7d:	call   3b80 <memmove@plt>
   14f82:	mov    rax,QWORD PTR [rbx+0x30]
   14f86:	sub    QWORD PTR [rbx+0x38],rbp
   14f8a:	sub    rax,rbp
   14f8d:	mov    QWORD PTR [rbx+0x30],rax
   14f91:	test   rax,rax
   14f94:	jle    14c58 <__sprintf_chk@plt+0x10f78>
   14f9a:	mov    rcx,QWORD PTR [rbx+0x18]
   14f9e:	xor    eax,eax
   14fa0:	lea    rsi,[rcx+rbp*8]
   14fa4:	nop    DWORD PTR [rax+0x0]
   14fa8:	mov    rdx,QWORD PTR [rsi+rax*8]
   14fac:	sub    rdx,rbp
   14faf:	mov    QWORD PTR [rcx+rax*8],rdx
   14fb3:	add    rax,0x1
   14fb7:	cmp    QWORD PTR [rbx+0x30],rax
   14fbb:	jg     14fa8 <__sprintf_chk@plt+0x112c8>
   14fbd:	jmp    14c58 <__sprintf_chk@plt+0x10f78>
   14fc2:	nop    WORD PTR [rax+rax*1+0x0]
   14fc8:	mov    rax,QWORD PTR [rbx+0x50]
   14fcc:	mov    BYTE PTR [rbx+0x8c],0x0
   14fd3:	sub    rax,r12
   14fd6:	lea    rdx,[rax+rbp*1]
   14fda:	mov    QWORD PTR [rbx+0x58],rdx
   14fde:	mov    rdx,QWORD PTR [rbx+0x60]
   14fe2:	sub    rdx,r12
   14fe5:	lea    rcx,[rdx+rbp*1]
   14fe9:	mov    QWORD PTR [rbx+0x68],rcx
   14fed:	test   r14,r14
   14ff0:	jg     14ffe <__sprintf_chk@plt+0x1131e>
   14ff2:	jmp    15005 <__sprintf_chk@plt+0x11325>
   14ff4:	nop    DWORD PTR [rax+0x0]
   14ff8:	sub    r14,0x1
   14ffc:	je     15005 <__sprintf_chk@plt+0x11325>
   14ffe:	cmp    QWORD PTR [r15+r14*8-0x8],rbp
   15003:	je     14ff8 <__sprintf_chk@plt+0x11318>
   15005:	cmp    r14,r13
   15008:	jge    151cc <__sprintf_chk@plt+0x114ec>
   1500e:	mov    rcx,QWORD PTR [rbx+0x10]
   15012:	jmp    15025 <__sprintf_chk@plt+0x11345>
   15014:	nop    DWORD PTR [rax+0x0]
   15018:	add    r14,0x1
   1501c:	cmp    r14,r13
   1501f:	je     151d8 <__sprintf_chk@plt+0x114f8>
   15025:	cmp    DWORD PTR [rcx+r14*4],0xffffffff
   1502a:	je     15018 <__sprintf_chk@plt+0x11338>
   1502c:	mov    r13,QWORD PTR [r15+r14*8]
   15030:	sub    r13,rbp
   15033:	mov    QWORD PTR [rbx+0x30],r13
   15037:	test   r13,r13
   1503a:	je     15077 <__sprintf_chk@plt+0x11397>
   1503c:	jle    15054 <__sprintf_chk@plt+0x11374>
   1503e:	mov    rdi,QWORD PTR [rbx+0x10]
   15042:	lea    rdx,[r13*4+0x0]
   1504a:	mov    esi,0xff
   1504f:	call   3900 <memset@plt>
   15054:	mov    rdi,QWORD PTR [rbx+0x8]
   15058:	mov    rdx,r13
   1505b:	mov    esi,0xff
   15060:	call   3900 <memset@plt>
   15065:	mov    rax,QWORD PTR [rbx+0x58]
   15069:	mov    rdx,QWORD PTR [rbx+0x68]
   1506d:	mov    r13,QWORD PTR [rbx+0x30]
   15071:	sub    rax,rbp
   15074:	sub    rdx,rbp
   15077:	mov    QWORD PTR [rbx+0x38],r13
   1507b:	mov    esi,DWORD PTR [rbx+0x90]
   15081:	jmp    14c6c <__sprintf_chk@plt+0x10f8c>
   15086:	cs nop WORD PTR [rax+rax*1+0x0]
   15090:	mov    rcx,QWORD PTR [rbx]
   15093:	mov    rdx,rbp
   15096:	sub    rdx,rsi
   15099:	lea    r15,[rcx+r9*1]
   1509d:	add    rdx,r15
   150a0:	lea    r14,[r15+rbp*1-0x1]
   150a5:	cmp    rcx,rdx
   150a8:	cmovb  rcx,rdx
   150ac:	cmp    r14,rcx
   150af:	jae    150cd <__sprintf_chk@plt+0x113ed>
   150b1:	jmp    14e01 <__sprintf_chk@plt+0x11121>
   150b6:	cs nop WORD PTR [rax+rax*1+0x0]
   150c0:	sub    r14,0x1
   150c4:	cmp    r14,rcx
   150c7:	jb     14e01 <__sprintf_chk@plt+0x11121>
   150cd:	movzx  edx,BYTE PTR [r14]
   150d1:	and    edx,0xffffffc0
   150d4:	cmp    dl,0x80
   150d7:	je     150c0 <__sprintf_chk@plt+0x113e0>
   150d9:	mov    rdx,QWORD PTR [rbx+0x58]
   150dd:	mov    rcx,QWORD PTR [rbx+0x78]
   150e1:	mov    rsi,r14
   150e4:	add    rdx,r15
   150e7:	sub    rdx,r14
   150ea:	test   rcx,rcx
   150ed:	jne    152f9 <__sprintf_chk@plt+0x11619>
   150f3:	add    r15,rbp
   150f6:	lea    rcx,[rsp+0x28]
   150fb:	lea    rdi,[rsp+0x24]
   15100:	mov    DWORD PTR [rsp],r8d
   15104:	mov    QWORD PTR [rsp+0x28],0x0
   1510d:	sub    r15,r14
   15110:	call   11a40 <__sprintf_chk@plt+0xdd60>
   15115:	mov    r8d,DWORD PTR [rsp]
   15119:	cmp    rax,r15
   1511c:	mov    r9,rax
   1511f:	jb     1512b <__sprintf_chk@plt+0x1144b>
   15121:	cmp    r9,0xfffffffffffffffd
   15125:	jbe    15209 <__sprintf_chk@plt+0x11529>
   1512b:	mov    r9,QWORD PTR [rbx+0x28]
   1512f:	mov    rax,QWORD PTR [rbx+0x38]
   15133:	jmp    14e01 <__sprintf_chk@plt+0x11121>
   15138:	nop    DWORD PTR [rax+rax*1+0x0]
   15140:	mov    r14,rax
   15143:	lea    r9,[rax-0x1]
   15147:	jmp    14f35 <__sprintf_chk@plt+0x11255>
   1514c:	nop    DWORD PTR [rax+0x0]
   15150:	cmp    BYTE PTR [rbx+0x88],0x0
   15157:	jne    15230 <__sprintf_chk@plt+0x11550>
   1515d:	mov    rcx,QWORD PTR [rbx+0x78]
   15161:	test   rcx,rcx
   15164:	je     14c9f <__sprintf_chk@plt+0x10fbf>
   1516a:	cmp    QWORD PTR [rbx+0x40],rax
   1516e:	mov    rdx,QWORD PTR [rbx+0x30]
   15172:	cmovle rax,QWORD PTR [rbx+0x40]
   15177:	cmp    rax,rdx
   1517a:	jg     15190 <__sprintf_chk@plt+0x114b0>
   1517c:	jmp    152f1 <__sprintf_chk@plt+0x11611>
   15181:	nop    DWORD PTR [rax+0x0]
   15188:	mov    r12,QWORD PTR [rbx+0x28]
   1518c:	mov    rcx,QWORD PTR [rbx+0x78]
   15190:	mov    rsi,QWORD PTR [rbx]
   15193:	add    rsi,rdx
   15196:	movzx  esi,BYTE PTR [rsi+r12*1]
   1519b:	movzx  esi,BYTE PTR [rcx+rsi*1]
   1519f:	mov    rcx,QWORD PTR [rbx+0x8]
   151a3:	mov    BYTE PTR [rcx+rdx*1],sil
   151a7:	add    rdx,0x1
   151ab:	cmp    rax,rdx
   151ae:	jne    15188 <__sprintf_chk@plt+0x114a8>
   151b0:	mov    QWORD PTR [rbx+0x30],rax
   151b4:	mov    QWORD PTR [rbx+0x38],rax
   151b8:	jmp    14c9f <__sprintf_chk@plt+0x10fbf>
   151bd:	nop    DWORD PTR [rax]
   151c0:	mov    r14,rax
   151c3:	sub    r9,0x1
   151c7:	jmp    14f35 <__sprintf_chk@plt+0x11255>
   151cc:	jne    1502c <__sprintf_chk@plt+0x1134c>
   151d2:	nop    WORD PTR [rax+rax*1+0x0]
   151d8:	mov    QWORD PTR [rbx+0x30],0x0
   151e0:	xor    r13d,r13d
   151e3:	jmp    15077 <__sprintf_chk@plt+0x11397>
   151e8:	sub    r15,r12
   151eb:	mov    QWORD PTR [rbx+0x30],r15
   151ef:	mov    r14,r15
   151f2:	lea    rsi,[r13-0x1]
   151f6:	mov    edx,r8d
   151f9:	mov    rdi,rbx
   151fc:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   15201:	mov    DWORD PTR [rbx+0x70],eax
   15204:	jmp    14ea7 <__sprintf_chk@plt+0x111c7>
   15209:	mov    ecx,DWORD PTR [rsp+0x24]
   1520d:	sub    r9,r15
   15210:	mov    QWORD PTR [rbx+0x20],0x0
   15218:	mov    QWORD PTR [rbx+0x30],r9
   1521c:	mov    r14,r9
   1521f:	cmp    ecx,0xffffffff
   15222:	jne    14e82 <__sprintf_chk@plt+0x111a2>
   15228:	jmp    1512b <__sprintf_chk@plt+0x1144b>
   1522d:	nop    DWORD PTR [rax]
   15230:	mov    rdi,rbx
   15233:	call   12e20 <__sprintf_chk@plt+0xf140>
   15238:	jmp    14c9f <__sprintf_chk@plt+0x10fbf>
   1523d:	mov    rdx,QWORD PTR [rbx+0x50]
   15241:	mov    BYTE PTR [rbx+0x8c],0x0
   15248:	add    rdx,rbp
   1524b:	sub    rdx,r12
   1524e:	mov    QWORD PTR [rbx+0x58],rdx
   15252:	mov    rdx,QWORD PTR [rbx+0x60]
   15256:	add    rdx,rbp
   15259:	sub    rdx,r12
   1525c:	mov    QWORD PTR [rbx+0x68],rdx
   15260:	jmp    14dd8 <__sprintf_chk@plt+0x110f8>
   15265:	test   rax,rax
   15268:	je     152c9 <__sprintf_chk@plt+0x115e9>
   1526a:	test   r14,r14
   1526d:	je     152c9 <__sprintf_chk@plt+0x115e9>
   1526f:	mov    rax,QWORD PTR [rbx]
   15272:	movzx  ecx,BYTE PTR [rax+r15*1]
   15277:	mov    rax,QWORD PTR [rsp+0x18]
   1527c:	mov    QWORD PTR [rbx+0x20],rax
   15280:	mov    eax,0x1
   15285:	jmp    14e67 <__sprintf_chk@plt+0x11187>
   1528a:	jle    152a2 <__sprintf_chk@plt+0x115c2>
   1528c:	mov    rdi,QWORD PTR [rbx+0x10]
   15290:	lea    rdx,[r14*4+0x0]
   15298:	mov    esi,0xff
   1529d:	call   3900 <memset@plt>
   152a2:	cmp    BYTE PTR [rbx+0x8b],0x0
   152a9:	je     14eb0 <__sprintf_chk@plt+0x111d0>
   152af:	mov    rdi,QWORD PTR [rbx+0x8]
   152b3:	mov    rdx,r14
   152b6:	mov    esi,0xff
   152bb:	call   3900 <memset@plt>
   152c0:	mov    r14,QWORD PTR [rbx+0x30]
   152c4:	jmp    14eb0 <__sprintf_chk@plt+0x111d0>
   152c9:	xor    ecx,ecx
   152cb:	jmp    15277 <__sprintf_chk@plt+0x11597>
   152cd:	mov    edi,ecx
   152cf:	mov    DWORD PTR [rsp],ecx
   152d2:	call   3a60 <iswalnum@plt>
   152d7:	mov    ecx,DWORD PTR [rsp]
   152da:	cmp    ecx,0x5f
   152dd:	je     152e7 <__sprintf_chk@plt+0x11607>
   152df:	test   eax,eax
   152e1:	je     14e8f <__sprintf_chk@plt+0x111af>
   152e7:	mov    eax,0x1
   152ec:	jmp    14ea4 <__sprintf_chk@plt+0x111c4>
   152f1:	mov    rax,rdx
   152f4:	jmp    151b0 <__sprintf_chk@plt+0x114d0>
   152f9:	cmp    rdx,0x6
   152fd:	mov    edi,0x6
   15302:	lea    rsi,[rsp+0x32]
   15307:	cmovle rdi,rdx
   1530b:	sub    edi,0x1
   1530e:	movsxd rax,edi
   15311:	js     150f3 <__sprintf_chk@plt+0x11413>
   15317:	movzx  edi,BYTE PTR [r14+rax*1]
   1531c:	movzx  edi,BYTE PTR [rcx+rdi*1]
   15320:	mov    BYTE PTR [rsi+rax*1],dil
   15324:	sub    rax,0x1
   15328:	test   eax,eax
   1532a:	jns    15317 <__sprintf_chk@plt+0x11637>
   1532c:	jmp    150f3 <__sprintf_chk@plt+0x11413>
   15331:	call   3840 <__stack_chk_fail@plt>
   15336:	cs nop WORD PTR [rax+rax*1+0x0]
   15340:	push   r15
   15342:	push   r14
   15344:	mov    r14,rdx
   15347:	push   r13
   15349:	push   r12
   1534b:	xor    r12d,r12d
   1534e:	push   rbp
   1534f:	push   rbx
   15350:	sub    rsp,0x158
   15357:	mov    QWORD PTR [rsp+0x28],rdi
   1535c:	mov    QWORD PTR [rsp+0x10],rsi
   15361:	mov    rax,QWORD PTR fs:0x28
   1536a:	mov    QWORD PTR [rsp+0x148],rax
   15372:	mov    rax,QWORD PTR [rdi]
   15375:	cmp    DWORD PTR [rax+0xb4],0x1
   1537c:	mov    QWORD PTR [rsp+0x8],rax
   15381:	jne    15399 <__sprintf_chk@plt+0x116b9>
   15383:	mov    rax,QWORD PTR [rdi+0x18]
   15387:	mov    r9,rax
   1538a:	mov    QWORD PTR [rsp],rax
   1538e:	shr    r9,0x16
   15392:	mov    r12d,r9d
   15395:	and    r12d,0x1
   15399:	mov    rax,QWORD PTR [rsp+0x10]
   1539e:	xor    ebx,ebx
   153a0:	lea    rbp,[rsp+0x38]
   153a5:	cmp    QWORD PTR [rax+0x10],0x0
   153aa:	jg     153f1 <__sprintf_chk@plt+0x11711>
   153ac:	jmp    1553e <__sprintf_chk@plt+0x1185e>
   153b1:	nop    DWORD PTR [rax+0x0]
   153b8:	cmp    ecx,0x3
   153bb:	je     156b6 <__sprintf_chk@plt+0x119d6>
   153c1:	cmp    ecx,0x6
   153c4:	je     15567 <__sprintf_chk@plt+0x11887>
   153ca:	and    eax,0xfffffffd
   153cd:	cmp    al,0x5
   153cf:	je     1574d <__sprintf_chk@plt+0x11a6d>
   153d5:	cmp    ecx,0x2
   153d8:	je     157d0 <__sprintf_chk@plt+0x11af0>
   153de:	mov    rax,QWORD PTR [rsp+0x10]
   153e3:	add    rbx,0x1
   153e7:	cmp    QWORD PTR [rax+0x10],rbx
   153eb:	jle    1553e <__sprintf_chk@plt+0x1185e>
   153f1:	mov    rax,QWORD PTR [rsp+0x10]
   153f6:	mov    rax,QWORD PTR [rax+0x18]
   153fa:	mov    r15,QWORD PTR [rax+rbx*8]
   153fe:	mov    rax,QWORD PTR [rsp+0x8]
   15403:	mov    rdx,QWORD PTR [rax]
   15406:	mov    rax,r15
   15409:	shl    rax,0x4
   1540d:	lea    rsi,[rdx+rax*1]
   15411:	mov    QWORD PTR [rsp+0x20],rax
   15416:	movzx  ecx,BYTE PTR [rsi+0x8]
   1541a:	mov    eax,ecx
   1541c:	cmp    cl,0x1
   1541f:	jne    153b8 <__sprintf_chk@plt+0x116d8>
   15421:	movzx  edx,BYTE PTR [rsi]
   15424:	mov    BYTE PTR [r14+rdx*1],0x1
   15429:	mov    QWORD PTR [rsp],rdx
   1542d:	test   r12d,r12d
   15430:	je     15447 <__sprintf_chk@plt+0x11767>
   15432:	call   3cc0 <__ctype_tolower_loc@plt>
   15437:	mov    rdx,QWORD PTR [rsp]
   1543b:	mov    rax,QWORD PTR [rax]
   1543e:	movsxd rax,DWORD PTR [rax+rdx*4]
   15442:	mov    BYTE PTR [r14+rax*1],0x1
   15447:	mov    rax,QWORD PTR [rsp+0x28]
   1544c:	test   BYTE PTR [rax+0x1a],0x40
   15450:	je     153de <__sprintf_chk@plt+0x116fe>
   15452:	mov    rax,QWORD PTR [rsp+0x8]
   15457:	cmp    DWORD PTR [rax+0xb4],0x1
   1545e:	jle    153de <__sprintf_chk@plt+0x116fe>
   15464:	mov    rdi,QWORD PTR [rsp+0x20]
   15469:	mov    rcx,rax
   1546c:	mov    rax,QWORD PTR [rax]
   1546f:	lea    rsi,[rsp+0x41]
   15474:	movzx  eax,BYTE PTR [rax+rdi*1]
   15478:	mov    BYTE PTR [rsp+0x40],al
   1547c:	lea    rax,[r15+0x1]
   15480:	cmp    rax,QWORD PTR [rcx+0x10]
   15484:	jb     154a9 <__sprintf_chk@plt+0x117c9>
   15486:	jmp    1584d <__sprintf_chk@plt+0x11b6d>
   1548b:	nop    DWORD PTR [rax+rax*1+0x0]
   15490:	movzx  edx,BYTE PTR [rdx]
   15493:	mov    rdi,QWORD PTR [rsp+0x8]
   15498:	add    rsi,0x1
   1549c:	add    rax,0x1
   154a0:	mov    BYTE PTR [rsi-0x1],dl
   154a3:	cmp    QWORD PTR [rdi+0x10],rax
   154a7:	jbe    154c9 <__sprintf_chk@plt+0x117e9>
   154a9:	mov    rcx,QWORD PTR [rsp+0x8]
   154ae:	mov    rdx,rax
   154b1:	shl    rdx,0x4
   154b5:	add    rdx,QWORD PTR [rcx]
   154b8:	mov    ecx,DWORD PTR [rdx+0x8]
   154bb:	and    ecx,0x2000ff
   154c1:	cmp    ecx,0x200001
   154c7:	je     15490 <__sprintf_chk@plt+0x117b0>
   154c9:	lea    rax,[rsp+0x40]
   154ce:	mov    QWORD PTR [rsp],rax
   154d2:	sub    rsi,rax
   154d5:	mov    r13,rsi
   154d8:	lea    r15,[rsp+0x34]
   154dd:	mov    rsi,QWORD PTR [rsp]
   154e1:	mov    rcx,rbp
   154e4:	mov    rdx,r13
   154e7:	mov    rdi,r15
   154ea:	mov    QWORD PTR [rbp+0x0],0x0
   154f2:	call   11a40 <__sprintf_chk@plt+0xdd60>
   154f7:	cmp    rax,r13
   154fa:	jne    153de <__sprintf_chk@plt+0x116fe>
   15500:	mov    edi,DWORD PTR [rsp+0x34]
   15504:	call   3bd0 <towlower@plt>
   15509:	mov    rdi,QWORD PTR [rsp]
   1550d:	mov    rdx,rbp
   15510:	mov    esi,eax
   15512:	call   3a80 <wcrtomb@plt>
   15517:	cmp    rax,0xffffffffffffffff
   1551b:	je     153de <__sprintf_chk@plt+0x116fe>
   15521:	movzx  eax,BYTE PTR [rsp+0x40]
   15526:	add    rbx,0x1
   1552a:	mov    BYTE PTR [r14+rax*1],0x1
   1552f:	mov    rax,QWORD PTR [rsp+0x10]
   15534:	cmp    QWORD PTR [rax+0x10],rbx
   15538:	jg     153f1 <__sprintf_chk@plt+0x11711>
   1553e:	mov    rax,QWORD PTR [rsp+0x148]
   15546:	sub    rax,QWORD PTR fs:0x28
   1554f:	jne    15861 <__sprintf_chk@plt+0x11b81>
   15555:	add    rsp,0x158
   1555c:	pop    rbx
   1555d:	pop    rbp
   1555e:	pop    r12
   15560:	pop    r13
   15562:	pop    r14
   15564:	pop    r15
   15566:	ret    
   15567:	mov    rax,QWORD PTR [rsp+0x8]
   1556c:	mov    r15,QWORD PTR [rsi]
   1556f:	cmp    DWORD PTR [rax+0xb4],0x1
   15576:	jle    15599 <__sprintf_chk@plt+0x118b9>
   15578:	cmp    QWORD PTR [r15+0x48],0x0
   1557d:	jne    15671 <__sprintf_chk@plt+0x11991>
   15583:	test   BYTE PTR [r15+0x20],0x1
   15588:	jne    15671 <__sprintf_chk@plt+0x11991>
   1558e:	cmp    QWORD PTR [r15+0x40],0x0
   15593:	jne    15671 <__sprintf_chk@plt+0x11991>
   15599:	xor    r13d,r13d
   1559c:	lea    rax,[rsp+0x40]
   155a1:	cmp    QWORD PTR [r15+0x28],0x0
   155a6:	mov    QWORD PTR [rsp],rax
   155aa:	jg     155c6 <__sprintf_chk@plt+0x118e6>
   155ac:	jmp    153de <__sprintf_chk@plt+0x116fe>
   155b1:	nop    DWORD PTR [rax+0x0]
   155b8:	add    r13,0x1
   155bc:	cmp    QWORD PTR [r15+0x28],r13
   155c0:	jle    153de <__sprintf_chk@plt+0x116fe>
   155c6:	lea    rax,[r13*4+0x0]
   155ce:	mov    QWORD PTR [rbp+0x0],0x0
   155d6:	mov    rdi,QWORD PTR [rsp]
   155da:	mov    rdx,rbp
   155dd:	mov    QWORD PTR [rsp+0x18],rax
   155e2:	mov    rax,QWORD PTR [r15]
   155e5:	mov    esi,DWORD PTR [rax+r13*4]
   155e9:	call   3a80 <wcrtomb@plt>
   155ee:	cmp    rax,0xffffffffffffffff
   155f2:	je     1561e <__sprintf_chk@plt+0x1193e>
   155f4:	movzx  edx,BYTE PTR [rsp+0x40]
   155f9:	mov    BYTE PTR [r14+rdx*1],0x1
   155fe:	mov    QWORD PTR [rsp+0x18],rdx
   15603:	test   r12d,r12d
   15606:	je     1561e <__sprintf_chk@plt+0x1193e>
   15608:	call   3cc0 <__ctype_tolower_loc@plt>
   1560d:	mov    rdx,QWORD PTR [rsp+0x18]
   15612:	mov    rax,QWORD PTR [rax]
   15615:	movsxd rax,DWORD PTR [rax+rdx*4]
   15619:	mov    BYTE PTR [r14+rax*1],0x1
   1561e:	mov    rax,QWORD PTR [rsp+0x28]
   15623:	test   BYTE PTR [rax+0x1a],0x40
   15627:	je     155b8 <__sprintf_chk@plt+0x118d8>
   15629:	mov    rax,QWORD PTR [rsp+0x8]
   1562e:	cmp    DWORD PTR [rax+0xb4],0x1
   15635:	jle    155b8 <__sprintf_chk@plt+0x118d8>
   15637:	mov    rax,QWORD PTR [r15]
   1563a:	lea    rdi,[r13*4+0x0]
   15642:	mov    edi,DWORD PTR [rax+rdi*1]
   15645:	call   3bd0 <towlower@plt>
   1564a:	mov    rdi,QWORD PTR [rsp]
   1564e:	mov    rdx,rbp
   15651:	mov    esi,eax
   15653:	call   3a80 <wcrtomb@plt>
   15658:	cmp    rax,0xffffffffffffffff
   1565c:	je     155b8 <__sprintf_chk@plt+0x118d8>
   15662:	movzx  eax,BYTE PTR [rsp+0x40]
   15667:	mov    BYTE PTR [r14+rax*1],0x1
   1566c:	jmp    155b8 <__sprintf_chk@plt+0x118d8>
   15671:	mov    BYTE PTR [rsp+0x34],0x0
   15676:	lea    r15,[rsp+0x34]
   1567b:	nop    DWORD PTR [rax+rax*1+0x0]
   15680:	xor    edi,edi
   15682:	mov    rcx,rbp
   15685:	mov    edx,0x1
   1568a:	mov    rsi,r15
   1568d:	mov    QWORD PTR [rbp+0x0],0x0
   15695:	call   11a40 <__sprintf_chk@plt+0xdd60>
   1569a:	cmp    rax,0xfffffffffffffffe
   1569e:	jne    156aa <__sprintf_chk@plt+0x119ca>
   156a0:	movzx  eax,BYTE PTR [rsp+0x34]
   156a5:	mov    BYTE PTR [r14+rax*1],0x1
   156aa:	add    BYTE PTR [rsp+0x34],0x1
   156af:	jne    15680 <__sprintf_chk@plt+0x119a0>
   156b1:	jmp    153de <__sprintf_chk@plt+0x116fe>
   156b6:	mov    QWORD PTR [rsp+0x18],0x0
   156bf:	mov    rax,QWORD PTR [rsp+0x20]
   156c4:	mov    rcx,QWORD PTR [rsp+0x18]
   156c9:	xor    r15d,r15d
   156cc:	mov    rax,QWORD PTR [rdx+rax*1]
   156d0:	lea    r13,[rcx*8+0x0]
   156d8:	mov    rsi,QWORD PTR [rax+rcx*1]
   156dc:	nop    DWORD PTR [rax+0x0]
   156e0:	bt     rsi,r15
   156e4:	jae    1571d <__sprintf_chk@plt+0x11a3d>
   156e6:	mov    BYTE PTR [r14+r13*1],0x1
   156eb:	lea    rax,[r14+r13*1]
   156ef:	test   r12d,r12d
   156f2:	je     1571d <__sprintf_chk@plt+0x11a3d>
   156f4:	lea    edi,[r13+0x80]
   156fb:	cmp    edi,0x17f
   15701:	ja     1571a <__sprintf_chk@plt+0x11a3a>
   15703:	mov    QWORD PTR [rsp],rsi
   15707:	call   3cc0 <__ctype_tolower_loc@plt>
   1570c:	mov    rsi,QWORD PTR [rsp]
   15710:	mov    rax,QWORD PTR [rax]
   15713:	movsxd rax,DWORD PTR [rax+r13*4]
   15717:	add    rax,r14
   1571a:	mov    BYTE PTR [rax],0x1
   1571d:	add    r15d,0x1
   15721:	add    r13,0x1
   15725:	cmp    r15d,0x40
   15729:	jne    156e0 <__sprintf_chk@plt+0x11a00>
   1572b:	add    QWORD PTR [rsp+0x18],0x8
   15731:	mov    rax,QWORD PTR [rsp+0x18]
   15736:	cmp    rax,0x20
   1573a:	je     153de <__sprintf_chk@plt+0x116fe>
   15740:	mov    rax,QWORD PTR [rsp+0x8]
   15745:	mov    rdx,QWORD PTR [rax]
   15748:	jmp    156bf <__sprintf_chk@plt+0x119df>
   1574d:	movdqa xmm0,XMMWORD PTR [rip+0xfe8b]        # 255e0 <__sprintf_chk@plt+0x21900>
   15755:	movups XMMWORD PTR [r14],xmm0
   15759:	movups XMMWORD PTR [r14+0x10],xmm0
   1575e:	movups XMMWORD PTR [r14+0x20],xmm0
   15763:	movups XMMWORD PTR [r14+0x30],xmm0
   15768:	movups XMMWORD PTR [r14+0x40],xmm0
   1576d:	movups XMMWORD PTR [r14+0x50],xmm0
   15772:	movups XMMWORD PTR [r14+0x60],xmm0
   15777:	movups XMMWORD PTR [r14+0x70],xmm0
   1577c:	movups XMMWORD PTR [r14+0x80],xmm0
   15784:	movups XMMWORD PTR [r14+0x90],xmm0
   1578c:	movups XMMWORD PTR [r14+0xa0],xmm0
   15794:	movups XMMWORD PTR [r14+0xb0],xmm0
   1579c:	movups XMMWORD PTR [r14+0xc0],xmm0
   157a4:	movups XMMWORD PTR [r14+0xd0],xmm0
   157ac:	movups XMMWORD PTR [r14+0xe0],xmm0
   157b4:	movups XMMWORD PTR [r14+0xf0],xmm0
   157bc:	cmp    ecx,0x2
   157bf:	jne    1553e <__sprintf_chk@plt+0x1185e>
   157c5:	jmp    1583f <__sprintf_chk@plt+0x11b5f>
   157c7:	nop    WORD PTR [rax+rax*1+0x0]
   157d0:	movdqa xmm0,XMMWORD PTR [rip+0xfe08]        # 255e0 <__sprintf_chk@plt+0x21900>
   157d8:	movups XMMWORD PTR [r14],xmm0
   157dc:	movups XMMWORD PTR [r14+0x10],xmm0
   157e1:	movups XMMWORD PTR [r14+0x20],xmm0
   157e6:	movups XMMWORD PTR [r14+0x30],xmm0
   157eb:	movups XMMWORD PTR [r14+0x40],xmm0
   157f0:	movups XMMWORD PTR [r14+0x50],xmm0
   157f5:	movups XMMWORD PTR [r14+0x60],xmm0
   157fa:	movups XMMWORD PTR [r14+0x70],xmm0
   157ff:	movups XMMWORD PTR [r14+0x80],xmm0
   15807:	movups XMMWORD PTR [r14+0x90],xmm0
   1580f:	movups XMMWORD PTR [r14+0xa0],xmm0
   15817:	movups XMMWORD PTR [r14+0xb0],xmm0
   1581f:	movups XMMWORD PTR [r14+0xc0],xmm0
   15827:	movups XMMWORD PTR [r14+0xd0],xmm0
   1582f:	movups XMMWORD PTR [r14+0xe0],xmm0
   15837:	movups XMMWORD PTR [r14+0xf0],xmm0
   1583f:	mov    rax,QWORD PTR [rsp+0x28]
   15844:	or     BYTE PTR [rax+0x38],0x1
   15848:	jmp    1553e <__sprintf_chk@plt+0x1185e>
   1584d:	lea    rax,[rsp+0x40]
   15852:	mov    r13d,0x1
   15858:	mov    QWORD PTR [rsp],rax
   1585c:	jmp    154d8 <__sprintf_chk@plt+0x117f8>
   15861:	call   3840 <__stack_chk_fail@plt>
   15866:	cs nop WORD PTR [rax+rax*1+0x0]
   15870:	push   r15
   15872:	push   r14
   15874:	push   r13
   15876:	push   r12
   15878:	mov    r12,rdi
   1587b:	push   rbp
   1587c:	push   rbx
   1587d:	sub    rsp,0x38
   15881:	mov    r13,QWORD PTR [rsi+0x48]
   15885:	mov    rax,QWORD PTR fs:0x28
   1588e:	mov    QWORD PTR [rsp+0x28],rax
   15893:	xor    eax,eax
   15895:	cmp    QWORD PTR [rsi+0x68],r13
   15899:	jle    15a30 <__sprintf_chk@plt+0x11d50>
   1589f:	mov    r15,QWORD PTR [rsi+0x8]
   158a3:	mov    eax,DWORD PTR [rsi+0x90]
   158a9:	mov    rbx,rsi
   158ac:	mov    r14,rdx
   158af:	movzx  ebp,BYTE PTR [r15+r13*1]
   158b4:	and    BYTE PTR [rdi+0xa],0x9f
   158b8:	mov    BYTE PTR [rdi],bpl
   158bb:	cmp    eax,0x1
   158be:	jle    15958 <__sprintf_chk@plt+0x11c78>
   158c4:	cmp    r13,QWORD PTR [rsi+0x30]
   158c8:	je     158d9 <__sprintf_chk@plt+0x11bf9>
   158ca:	mov    rdx,QWORD PTR [rsi+0x10]
   158ce:	cmp    DWORD PTR [rdx+r13*4],0xffffffff
   158d3:	je     15ac0 <__sprintf_chk@plt+0x11de0>
   158d9:	cmp    bpl,0x5c
   158dd:	je     15a10 <__sprintf_chk@plt+0x11d30>
   158e3:	mov    rax,QWORD PTR [rbx+0x10]
   158e7:	mov    BYTE PTR [r12+0x8],0x1
   158ed:	mov    edx,DWORD PTR [rax+r13*4]
   158f1:	mov    edi,edx
   158f3:	mov    DWORD PTR [rsp+0xc],edx
   158f7:	call   3a60 <iswalnum@plt>
   158fc:	mov    edx,DWORD PTR [rsp+0xc]
   15900:	test   eax,eax
   15902:	setne  al
   15905:	cmp    edx,0x5f
   15908:	sete   dl
   1590b:	or     eax,edx
   1590d:	shl    eax,0x6
   15910:	mov    edx,eax
   15912:	movzx  eax,BYTE PTR [r12+0xa]
   15918:	and    eax,0xffffffbf
   1591b:	or     eax,edx
   1591d:	mov    BYTE PTR [r12+0xa],al
   15922:	cmp    bpl,0x3f
   15926:	ja     159a3 <__sprintf_chk@plt+0x11cc3>
   15928:	cmp    bpl,0x9
   1592c:	jbe    159e0 <__sprintf_chk@plt+0x11d00>
   15932:	sub    ebp,0xa
   15935:	cmp    bpl,0x35
   15939:	ja     159e0 <__sprintf_chk@plt+0x11d00>
   1593f:	lea    rdx,[rip+0xf67a]        # 24fc0 <__sprintf_chk@plt+0x212e0>
   15946:	movzx  ebp,bpl
   1594a:	movsxd rax,DWORD PTR [rdx+rbp*4]
   1594e:	add    rax,rdx
   15951:	notrack jmp rax
   15954:	nop    DWORD PTR [rax+0x0]
   15958:	cmp    bpl,0x5c
   1595c:	je     15a10 <__sprintf_chk@plt+0x11d30>
   15962:	call   3cd0 <__ctype_b_loc@plt>
   15967:	mov    r8,rax
   1596a:	movzx  eax,bpl
   1596e:	mov    rdx,QWORD PTR [r8]
   15971:	movzx  eax,WORD PTR [rdx+rax*2]
   15975:	shr    ax,0x3
   15979:	cmp    bpl,0x5f
   1597d:	sete   dl
   15980:	or     eax,edx
   15982:	mov    edx,DWORD PTR [r12+0x8]
   15987:	and    eax,0x1
   1598a:	shl    eax,0x16
   1598d:	and    edx,0xffbfff00
   15993:	or     eax,0x1
   15996:	or     eax,edx
   15998:	mov    DWORD PTR [r12+0x8],eax
   1599d:	cmp    bpl,0x3f
   159a1:	jbe    15928 <__sprintf_chk@plt+0x11c48>
   159a3:	sub    ebp,0x5b
   159a6:	cmp    bpl,0x22
   159aa:	ja     159e0 <__sprintf_chk@plt+0x11d00>
   159ac:	lea    rdx,[rip+0xf6e5]        # 25098 <__sprintf_chk@plt+0x213b8>
   159b3:	movzx  ebp,bpl
   159b7:	movsxd rax,DWORD PTR [rdx+rbp*4]
   159bb:	add    rax,rdx
   159be:	notrack jmp rax
   159c1:	cmp    BYTE PTR [r15+r13*1-0x1],0xa
   159c7:	jne    159e0 <__sprintf_chk@plt+0x11d00>
   159c9:	test   r14d,0x800
   159d0:	jne    15b92 <__sprintf_chk@plt+0x11eb2>
   159d6:	cs nop WORD PTR [rax+rax*1+0x0]
   159e0:	mov    eax,0x1
   159e5:	mov    rcx,QWORD PTR [rsp+0x28]
   159ea:	sub    rcx,QWORD PTR fs:0x28
   159f3:	jne    15fb4 <__sprintf_chk@plt+0x122d4>
   159f9:	add    rsp,0x38
   159fd:	pop    rbx
   159fe:	pop    rbp
   159ff:	pop    r12
   15a01:	pop    r13
   15a03:	pop    r14
   15a05:	pop    r15
   15a07:	ret    
   15a08:	nop    DWORD PTR [rax+rax*1+0x0]
   15a10:	lea    rcx,[r13+0x1]
   15a14:	cmp    rcx,QWORD PTR [rbx+0x58]
   15a18:	jl     15a40 <__sprintf_chk@plt+0x11d60>
   15a1a:	mov    BYTE PTR [r12+0x8],0x24
   15a20:	mov    eax,0x1
   15a25:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15a27:	nop    WORD PTR [rax+rax*1+0x0]
   15a30:	mov    BYTE PTR [rdi+0x8],0x2
   15a34:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15a36:	cs nop WORD PTR [rax+rax*1+0x0]
   15a40:	cmp    BYTE PTR [rbx+0x8b],0x0
   15a47:	jne    15f29 <__sprintf_chk@plt+0x12249>
   15a4d:	movzx  esi,BYTE PTR [r15+r13*1+0x1]
   15a53:	mov    DWORD PTR [rsp+0xc],esi
   15a57:	mov    ebp,esi
   15a59:	mov    BYTE PTR [r12],bpl
   15a5d:	mov    BYTE PTR [r12+0x8],0x1
   15a63:	cmp    eax,0x1
   15a66:	jle    15ae0 <__sprintf_chk@plt+0x11e00>
   15a68:	mov    rax,QWORD PTR [rbx+0x10]
   15a6c:	lea    rsi,[rax+rcx*4]
   15a70:	mov    ebx,DWORD PTR [rsi]
   15a72:	mov    edi,ebx
   15a74:	call   3a60 <iswalnum@plt>
   15a79:	test   eax,eax
   15a7b:	setne  al
   15a7e:	cmp    ebx,0x5f
   15a81:	sete   cl
   15a84:	or     eax,ecx
   15a86:	shl    eax,0x6
   15a89:	mov    ecx,eax
   15a8b:	movzx  eax,BYTE PTR [r12+0xa]
   15a91:	and    eax,0xffffffbf
   15a94:	or     eax,ecx
   15a96:	mov    BYTE PTR [r12+0xa],al
   15a9b:	lea    edx,[rbp-0x27]
   15a9e:	cmp    dl,0x56
   15aa1:	ja     15b20 <__sprintf_chk@plt+0x11e40>
   15aa3:	lea    rcx,[rip+0xf67a]        # 25124 <__sprintf_chk@plt+0x21444>
   15aaa:	movzx  edx,dl
   15aad:	movsxd rax,DWORD PTR [rcx+rdx*4]
   15ab1:	add    rax,rcx
   15ab4:	notrack jmp rax
   15ab7:	nop    WORD PTR [rax+rax*1+0x0]
   15ac0:	mov    eax,DWORD PTR [rdi+0x8]
   15ac3:	and    eax,0xffdfff00
   15ac8:	or     eax,0x200001
   15acd:	mov    DWORD PTR [rdi+0x8],eax
   15ad0:	mov    eax,0x1
   15ad5:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15ada:	nop    WORD PTR [rax+rax*1+0x0]
   15ae0:	call   3cd0 <__ctype_b_loc@plt>
   15ae5:	mov    r8,rax
   15ae8:	movzx  eax,bpl
   15aec:	mov    rcx,QWORD PTR [r8]
   15aef:	movzx  eax,WORD PTR [rcx+rax*2]
   15af3:	shr    ax,0x3
   15af7:	and    eax,0x1
   15afa:	cmp    bpl,0x5f
   15afe:	sete   cl
   15b01:	or     eax,ecx
   15b03:	movzx  ecx,BYTE PTR [r12+0xa]
   15b09:	shl    eax,0x6
   15b0c:	and    ecx,0xffffffbf
   15b0f:	or     eax,ecx
   15b11:	mov    BYTE PTR [r12+0xa],al
   15b16:	jmp    15a9b <__sprintf_chk@plt+0x11dbb>
   15b18:	nop    DWORD PTR [rax+rax*1+0x0]
   15b20:	mov    eax,0x2
   15b25:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15b2a:	nop    WORD PTR [rax+rax*1+0x0]
   15b30:	and    r14d,0x8400
   15b37:	cmp    r14,0x8000
   15b3e:	jne    159e0 <__sprintf_chk@plt+0x11d00>
   15b44:	mov    BYTE PTR [r12+0x8],0xa
   15b4a:	mov    eax,0x1
   15b4f:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15b54:	nop    DWORD PTR [rax+0x0]
   15b58:	and    r14d,0x1200
   15b5f:	mov    eax,0x1
   15b64:	cmp    r14,0x1200
   15b6b:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15b71:	mov    BYTE PTR [r12+0x8],0x18
   15b77:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15b7c:	nop    DWORD PTR [rax+0x0]
   15b80:	test   r14d,0x800008
   15b87:	jne    15b92 <__sprintf_chk@plt+0x11eb2>
   15b89:	test   r13,r13
   15b8c:	jne    159c1 <__sprintf_chk@plt+0x11ce1>
   15b92:	mov    BYTE PTR [r12+0x8],0xc
   15b98:	mov    eax,0x1
   15b9d:	mov    DWORD PTR [r12],0x10
   15ba5:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15baa:	nop    WORD PTR [rax+rax*1+0x0]
   15bb0:	and    r14d,0x1200
   15bb7:	mov    eax,0x1
   15bbc:	cmp    r14,0x1200
   15bc3:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15bc9:	mov    BYTE PTR [r12+0x8],0x17
   15bcf:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15bd4:	nop    DWORD PTR [rax+0x0]
   15bd8:	mov    BYTE PTR [r12+0x8],0x14
   15bde:	mov    eax,0x1
   15be3:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15be8:	mov    BYTE PTR [r12+0x8],0x5
   15bee:	mov    eax,0x1
   15bf3:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15bf8:	mov    eax,0x1
   15bfd:	test   r14d,0x402
   15c04:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15c0a:	mov    BYTE PTR [r12+0x8],0x13
   15c10:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15c15:	mov    eax,0x1
   15c1a:	test   r14d,0x800
   15c21:	je     159e5 <__sprintf_chk@plt+0x11d05>
   15c27:	jmp    15b44 <__sprintf_chk@plt+0x11e64>
   15c2c:	test   r14b,0x8
   15c30:	jne    15c70 <__sprintf_chk@plt+0x11f90>
   15c32:	add    r13,0x1
   15c36:	cmp    r13,QWORD PTR [rbx+0x58]
   15c3a:	je     15c70 <__sprintf_chk@plt+0x11f90>
   15c3c:	mov    QWORD PTR [rbx+0x48],r13
   15c40:	mov    rdx,r14
   15c43:	lea    rdi,[rsp+0x10]
   15c48:	mov    rsi,rbx
   15c4b:	call   15870 <__sprintf_chk@plt+0x11b90>
   15c50:	movzx  eax,BYTE PTR [rsp+0x18]
   15c55:	sub    QWORD PTR [rbx+0x48],0x1
   15c5a:	lea    edx,[rax-0x9]
   15c5d:	mov    eax,0x1
   15c62:	cmp    dl,0x1
   15c65:	ja     159e5 <__sprintf_chk@plt+0x11d05>
   15c6b:	nop    DWORD PTR [rax+rax*1+0x0]
   15c70:	mov    BYTE PTR [r12+0x8],0xc
   15c76:	mov    eax,0x1
   15c7b:	mov    DWORD PTR [r12],0x20
   15c83:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15c88:	mov    eax,0x1
   15c8d:	test   r14d,0x2000
   15c94:	je     159e5 <__sprintf_chk@plt+0x11d05>
   15c9a:	mov    BYTE PTR [r12+0x8],0x8
   15ca0:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15ca5:	mov    eax,0x1
   15caa:	test   r14d,0x2000
   15cb1:	je     159e5 <__sprintf_chk@plt+0x11d05>
   15cb7:	mov    BYTE PTR [r12+0x8],0x9
   15cbd:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15cc2:	mov    BYTE PTR [r12+0x8],0xb
   15cc8:	mov    eax,0x1
   15ccd:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15cd2:	mov    eax,0x1
   15cd7:	test   r14d,0x402
   15cde:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15ce4:	mov    BYTE PTR [r12+0x8],0x12
   15cea:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15cef:	mov    eax,0x2
   15cf4:	test   r14d,0x4000
   15cfb:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15d01:	mov    edx,DWORD PTR [rsp+0xc]
   15d05:	mov    BYTE PTR [r12+0x8],0x4
   15d0b:	sub    edx,0x31
   15d0e:	movsxd rdx,edx
   15d11:	mov    QWORD PTR [r12],rdx
   15d15:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15d1a:	mov    eax,0x2
   15d1f:	test   r14d,0x80000
   15d26:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15d2c:	mov    BYTE PTR [r12+0x8],0xc
   15d32:	mov    DWORD PTR [r12],0x80
   15d3a:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15d3f:	and    r14d,0x1200
   15d46:	mov    eax,0x2
   15d4b:	cmp    r14,0x200
   15d52:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15d58:	jmp    15b71 <__sprintf_chk@plt+0x11e91>
   15d5d:	and    r14d,0x402
   15d64:	mov    eax,0x2
   15d69:	cmp    r14,0x2
   15d6d:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15d73:	jmp    15ce4 <__sprintf_chk@plt+0x12004>
   15d78:	mov    eax,0x2
   15d7d:	test   r14d,0x80000
   15d84:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15d8a:	mov    BYTE PTR [r12+0x8],0xc
   15d90:	mov    DWORD PTR [r12],0x9
   15d98:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15d9d:	mov    eax,0x2
   15da2:	test   r14d,0x80000
   15da9:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15daf:	mov    BYTE PTR [r12+0x8],0xc
   15db5:	mov    DWORD PTR [r12],0x6
   15dbd:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15dc2:	mov    eax,0x2
   15dc7:	test   r14d,0x2000
   15dce:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15dd4:	jmp    15cb7 <__sprintf_chk@plt+0x11fd7>
   15dd9:	mov    eax,0x2
   15dde:	test   r14d,0x2000
   15de5:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15deb:	jmp    15c9a <__sprintf_chk@plt+0x11fba>
   15df0:	mov    eax,0x2
   15df5:	test   r14d,0x8400
   15dfc:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15e02:	mov    BYTE PTR [r12+0x8],0xa
   15e08:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15e0d:	and    r14d,0x1200
   15e14:	mov    eax,0x2
   15e19:	cmp    r14,0x200
   15e20:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15e26:	jmp    15bc9 <__sprintf_chk@plt+0x11ee9>
   15e2b:	mov    eax,0x2
   15e30:	test   r14d,0x80000
   15e37:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15e3d:	mov    BYTE PTR [r12+0x8],0x20
   15e43:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15e48:	mov    eax,0x2
   15e4d:	test   r14d,0x80000
   15e54:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15e5a:	mov    BYTE PTR [r12+0x8],0x22
   15e60:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15e65:	mov    eax,0x2
   15e6a:	test   r14d,0x80000
   15e71:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15e77:	mov    BYTE PTR [r12+0x8],0xc
   15e7d:	mov    DWORD PTR [r12],0x100
   15e85:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15e8a:	mov    eax,0x2
   15e8f:	test   r14d,0x80000
   15e96:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15e9c:	mov    BYTE PTR [r12+0x8],0xc
   15ea2:	mov    DWORD PTR [r12],0x40
   15eaa:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15eaf:	mov    eax,0x2
   15eb4:	test   r14d,0x80000
   15ebb:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15ec1:	mov    BYTE PTR [r12+0x8],0x21
   15ec7:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15ecc:	mov    eax,0x2
   15ed1:	test   r14d,0x80000
   15ed8:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15ede:	mov    BYTE PTR [r12+0x8],0x23
   15ee4:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15ee9:	mov    eax,0x2
   15eee:	test   r14d,0x80000
   15ef5:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15efb:	mov    BYTE PTR [r12+0x8],0xc
   15f01:	mov    DWORD PTR [r12],0x200
   15f09:	jmp    159e5 <__sprintf_chk@plt+0x11d05>
   15f0e:	and    r14d,0x402
   15f15:	mov    eax,0x2
   15f1a:	cmp    r14,0x2
   15f1e:	jne    159e5 <__sprintf_chk@plt+0x11d05>
   15f24:	jmp    15c0a <__sprintf_chk@plt+0x11f2a>
   15f29:	cmp    eax,0x1
   15f2c:	jle    15f54 <__sprintf_chk@plt+0x12274>
   15f2e:	mov    rdi,QWORD PTR [rbx+0x10]
   15f32:	lea    rdx,[rcx*4+0x0]
   15f3a:	lea    rsi,[rdi+rdx*1]
   15f3e:	cmp    DWORD PTR [rsi],0xffffffff
   15f41:	je     15f99 <__sprintf_chk@plt+0x122b9>
   15f43:	lea    r8,[r13+0x2]
   15f47:	cmp    QWORD PTR [rbx+0x30],r8
   15f4b:	je     15f54 <__sprintf_chk@plt+0x12274>
   15f4d:	cmp    DWORD PTR [rdi+rdx*1+0x4],0xffffffff
   15f52:	je     15f99 <__sprintf_chk@plt+0x122b9>
   15f54:	cmp    BYTE PTR [rbx+0x8c],0x0
   15f5b:	mov    rdx,QWORD PTR [rbx]
   15f5e:	mov    rsi,QWORD PTR [rbx+0x28]
   15f62:	je     15f87 <__sprintf_chk@plt+0x122a7>
   15f64:	mov    rdi,QWORD PTR [rbx+0x18]
   15f68:	add    rdx,rsi
   15f6b:	add    rdx,QWORD PTR [rdi+rcx*8]
   15f6f:	movzx  esi,BYTE PTR [rdx]
   15f72:	mov    DWORD PTR [rsp+0xc],esi
   15f76:	mov    ebp,esi
   15f78:	test   sil,0x80
   15f7c:	je     15a59 <__sprintf_chk@plt+0x11d79>
   15f82:	jmp    15a4d <__sprintf_chk@plt+0x11d6d>
   15f87:	add    rdx,rcx
   15f8a:	movzx  esi,BYTE PTR [rdx+rsi*1]
   15f8e:	mov    DWORD PTR [rsp+0xc],esi
   15f92:	mov    ebp,esi
   15f94:	jmp    15a59 <__sprintf_chk@plt+0x11d79>
   15f99:	movzx  eax,BYTE PTR [r15+r13*1+0x1]
   15f9f:	mov    BYTE PTR [r12+0x8],0x1
   15fa5:	mov    BYTE PTR [r12],al
   15fa9:	mov    ebp,eax
   15fab:	mov    DWORD PTR [rsp+0xc],eax
   15faf:	jmp    15a70 <__sprintf_chk@plt+0x11d90>
   15fb4:	call   3840 <__stack_chk_fail@plt>
   15fb9:	nop    DWORD PTR [rax+0x0]
   15fc0:	push   r14
   15fc2:	mov    r14,rdi
   15fc5:	push   r13
   15fc7:	mov    r13,rsi
   15fca:	push   r12
   15fcc:	mov    r12,0xffffffffffffffff
   15fd3:	push   rbp
   15fd4:	mov    ebp,0x8030
   15fd9:	push   rbx
   15fda:	mov    rbx,rdx
   15fdd:	nop    DWORD PTR [rax]
   15fe0:	mov    rdx,rbx
   15fe3:	mov    rsi,r14
   15fe6:	mov    rdi,r13
   15fe9:	call   15870 <__sprintf_chk@plt+0x11b90>
   15fee:	movzx  edx,BYTE PTR [r13+0x0]
   15ff3:	cdqe   
   15ff5:	add    QWORD PTR [r14+0x48],rax
   15ff9:	movzx  eax,BYTE PTR [r13+0x8]
   15ffe:	cmp    al,0x2
   16000:	je     16050 <__sprintf_chk@plt+0x12370>
   16002:	cmp    dl,0x2c
   16005:	je     16057 <__sprintf_chk@plt+0x12377>
   16007:	cmp    al,0x18
   16009:	je     16057 <__sprintf_chk@plt+0x12377>
   1600b:	cmp    al,0x1
   1600d:	je     16020 <__sprintf_chk@plt+0x12340>
   1600f:	mov    r12,0xfffffffffffffffe
   16016:	jmp    15fe0 <__sprintf_chk@plt+0x12300>
   16018:	nop    DWORD PTR [rax+rax*1+0x0]
   16020:	lea    eax,[rdx-0x30]
   16023:	cmp    al,0x9
   16025:	ja     1600f <__sprintf_chk@plt+0x1232f>
   16027:	cmp    r12,0xfffffffffffffffe
   1602b:	je     1600f <__sprintf_chk@plt+0x1232f>
   1602d:	cmp    r12,0xffffffffffffffff
   16031:	je     16068 <__sprintf_chk@plt+0x12388>
   16033:	lea    rax,[r12+r12*4]
   16037:	lea    r12,[rdx+rax*2]
   1603b:	cmp    r12,0x8030
   16042:	cmovg  r12,rbp
   16046:	sub    r12,0x30
   1604a:	jmp    15fe0 <__sprintf_chk@plt+0x12300>
   1604c:	nop    DWORD PTR [rax+0x0]
   16050:	mov    r12,0xfffffffffffffffe
   16057:	pop    rbx
   16058:	mov    rax,r12
   1605b:	pop    rbp
   1605c:	pop    r12
   1605e:	pop    r13
   16060:	pop    r14
   16062:	ret    
   16063:	nop    DWORD PTR [rax+rax*1+0x0]
   16068:	movzx  r12d,dl
   1606c:	sub    r12d,0x30
   16070:	movsxd r12,r12d
   16073:	jmp    15fe0 <__sprintf_chk@plt+0x12300>
   16078:	nop    DWORD PTR [rax+rax*1+0x0]
   16080:	push   rbp
   16081:	mov    rbp,rsi
   16084:	mov    rsi,rdx
   16087:	push   rbx
   16088:	mov    rbx,rdi
   1608b:	sub    rsp,0x8
   1608f:	mov    edx,DWORD PTR [rdi+0xa0]
   16095:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   1609a:	mov    rdi,QWORD PTR [rbp+0x10]
   1609e:	test   rdi,rdi
   160a1:	jle    16141 <__sprintf_chk@plt+0x12461>
   160a7:	mov    rdx,QWORD PTR [rbx+0x98]
   160ae:	mov    r10,QWORD PTR [rbp+0x18]
   160b2:	mov    ebx,eax
   160b4:	mov    ebp,eax
   160b6:	and    eax,0x1
   160b9:	xor    ecx,ecx
   160bb:	and    ebp,0x8
   160be:	and    ebx,0x2
   160c1:	mov    r9,QWORD PTR [rdx]
   160c4:	mov    r11d,eax
   160c7:	nop    WORD PTR [rax+rax*1+0x0]
   160d0:	mov    r8,QWORD PTR [r10+rcx*8]
   160d4:	mov    rax,r8
   160d7:	shl    rax,0x4
   160db:	add    rax,r9
   160de:	mov    edx,DWORD PTR [rax+0x8]
   160e1:	shr    edx,0x8
   160e4:	mov    esi,edx
   160e6:	and    si,0x3ff
   160eb:	cmp    BYTE PTR [rax+0x8],0x2
   160ef:	jne    16138 <__sprintf_chk@plt+0x12458>
   160f1:	test   si,si
   160f4:	je     1611b <__sprintf_chk@plt+0x1243b>
   160f6:	test   dl,0x4
   160f9:	je     16128 <__sprintf_chk@plt+0x12448>
   160fb:	test   r11d,r11d
   160fe:	je     16138 <__sprintf_chk@plt+0x12458>
   16100:	and    edx,0x8
   16103:	jne    16138 <__sprintf_chk@plt+0x12458>
   16105:	test   sil,0x20
   16109:	je     1610f <__sprintf_chk@plt+0x1242f>
   1610b:	test   ebx,ebx
   1610d:	je     16138 <__sprintf_chk@plt+0x12458>
   1610f:	and    esi,0x80
   16115:	je     1611b <__sprintf_chk@plt+0x1243b>
   16117:	test   ebp,ebp
   16119:	je     16138 <__sprintf_chk@plt+0x12458>
   1611b:	add    rsp,0x8
   1611f:	mov    rax,r8
   16122:	pop    rbx
   16123:	pop    rbp
   16124:	ret    
   16125:	nop    DWORD PTR [rax]
   16128:	and    edx,0x8
   1612b:	je     16105 <__sprintf_chk@plt+0x12425>
   1612d:	test   r11d,r11d
   16130:	je     16105 <__sprintf_chk@plt+0x12425>
   16132:	nop    WORD PTR [rax+rax*1+0x0]
   16138:	add    rcx,0x1
   1613c:	cmp    rcx,rdi
   1613f:	jne    160d0 <__sprintf_chk@plt+0x123f0>
   16141:	add    rsp,0x8
   16145:	xor    r8d,r8d
   16148:	mov    rax,r8
   1614b:	pop    rbx
   1614c:	pop    rbp
   1614d:	ret    
   1614e:	xchg   ax,ax
   16150:	push   r13
   16152:	mov    r11,rdx
   16155:	mov    r10,rdi
   16158:	push   r12
   1615a:	push   rbp
   1615b:	mov    ebp,ecx
   1615d:	push   rbx
   1615e:	sub    rsp,0x28
   16162:	mov    rdx,QWORD PTR [rsi+0x48]
   16166:	mov    rax,QWORD PTR fs:0x28
   1616f:	mov    QWORD PTR [rsp+0x18],rax
   16174:	xor    eax,eax
   16176:	cmp    DWORD PTR [rsi+0x90],0x1
   1617d:	je     161b8 <__sprintf_chk@plt+0x124d8>
   1617f:	mov    rcx,QWORD PTR [rsi+0x30]
   16183:	lea    rax,[rdx+0x1]
   16187:	mov    rdi,QWORD PTR [rsi+0x10]
   1618b:	cmp    rcx,rax
   1618e:	jg     161a5 <__sprintf_chk@plt+0x124c5>
   16190:	jmp    161b8 <__sprintf_chk@plt+0x124d8>
   16192:	nop    WORD PTR [rax+rax*1+0x0]
   16198:	add    rax,0x1
   1619c:	cmp    rcx,rax
   1619f:	je     162e0 <__sprintf_chk@plt+0x12600>
   161a5:	mov    ebx,eax
   161a7:	sub    ebx,edx
   161a9:	cmp    DWORD PTR [rdi+rax*4],0xffffffff
   161ad:	je     16198 <__sprintf_chk@plt+0x124b8>
   161af:	cmp    ebx,0x1
   161b2:	jne    162e0 <__sprintf_chk@plt+0x12600>
   161b8:	movzx  edi,BYTE PTR [r11+0x8]
   161bd:	movsxd rcx,ebp
   161c0:	lea    rax,[rcx+rdx*1]
   161c4:	mov    edx,edi
   161c6:	mov    QWORD PTR [rsi+0x48],rax
   161ca:	and    edx,0xfffffffb
   161cd:	cmp    dl,0x1a
   161d0:	je     16220 <__sprintf_chk@plt+0x12540>
   161d2:	cmp    dil,0x1c
   161d6:	je     16220 <__sprintf_chk@plt+0x12540>
   161d8:	cmp    dil,0x16
   161dc:	jne    161e7 <__sprintf_chk@plt+0x12507>
   161de:	test   r9b,r9b
   161e1:	je     16399 <__sprintf_chk@plt+0x126b9>
   161e7:	movzx  eax,BYTE PTR [r11]
   161eb:	mov    DWORD PTR [r10],0x0
   161f2:	mov    BYTE PTR [r10+0x8],al
   161f6:	xor    eax,eax
   161f8:	mov    rsi,QWORD PTR [rsp+0x18]
   161fd:	sub    rsi,QWORD PTR fs:0x28
   16206:	jne    163d5 <__sprintf_chk@plt+0x126f5>
   1620c:	add    rsp,0x28
   16210:	pop    rbx
   16211:	pop    rbp
   16212:	pop    r12
   16214:	pop    r13
   16216:	ret    
   16217:	nop    WORD PTR [rax+rax*1+0x0]
   16220:	mov    r8,QWORD PTR [rsi+0x68]
   16224:	cmp    rax,r8
   16227:	jge    162d0 <__sprintf_chk@plt+0x125f0>
   1622d:	movzx  r9d,BYTE PTR [r11]
   16231:	xor    edx,edx
   16233:	jmp    1625b <__sprintf_chk@plt+0x1257b>
   16235:	nop    DWORD PTR [rax]
   16238:	mov    rax,QWORD PTR [r10+0x8]
   1623c:	mov    BYTE PTR [rax+rdx*1],dil
   16240:	add    rdx,0x1
   16244:	cmp    rdx,0x20
   16248:	je     162d0 <__sprintf_chk@plt+0x125f0>
   1624e:	movzx  edi,BYTE PTR [r11+0x8]
   16253:	mov    rax,QWORD PTR [rsi+0x48]
   16257:	mov    r8,QWORD PTR [rsi+0x68]
   1625b:	movsxd rbx,edx
   1625e:	lea    rcx,[rax+0x1]
   16262:	cmp    dil,0x1e
   16266:	je     16300 <__sprintf_chk@plt+0x12620>
   1626c:	mov    rdi,QWORD PTR [rsi+0x8]
   16270:	mov    QWORD PTR [rsi+0x48],rcx
   16274:	movzx  edi,BYTE PTR [rdi+rax*1]
   16278:	cmp    r8,rcx
   1627b:	jle    162d0 <__sprintf_chk@plt+0x125f0>
   1627d:	cmp    r9b,dil
   16280:	jne    16238 <__sprintf_chk@plt+0x12558>
   16282:	mov    rax,QWORD PTR [rsi+0x8]
   16286:	cmp    BYTE PTR [rax+rcx*1],0x5d
   1628a:	jne    16238 <__sprintf_chk@plt+0x12558>
   1628c:	mov    rax,QWORD PTR [r10+0x8]
   16290:	add    rcx,0x1
   16294:	mov    QWORD PTR [rsi+0x48],rcx
   16298:	mov    BYTE PTR [rax+rbx*1],0x0
   1629c:	movzx  edx,BYTE PTR [r11+0x8]
   162a1:	cmp    dl,0x1c
   162a4:	je     163c7 <__sprintf_chk@plt+0x126e7>
   162aa:	cmp    dl,0x1e
   162ad:	je     163b9 <__sprintf_chk@plt+0x126d9>
   162b3:	xor    eax,eax
   162b5:	cmp    dl,0x1a
   162b8:	jne    161f8 <__sprintf_chk@plt+0x12518>
   162be:	mov    DWORD PTR [r10],0x3
   162c5:	jmp    161f8 <__sprintf_chk@plt+0x12518>
   162ca:	nop    WORD PTR [rax+rax*1+0x0]
   162d0:	mov    eax,0x7
   162d5:	jmp    161f8 <__sprintf_chk@plt+0x12518>
   162da:	nop    WORD PTR [rax+rax*1+0x0]
   162e0:	mov    DWORD PTR [r10],0x1
   162e7:	mov    edx,DWORD PTR [rdi+rdx*4]
   162ea:	mov    DWORD PTR [r10+0x8],edx
   162ee:	mov    QWORD PTR [rsi+0x48],rax
   162f2:	xor    eax,eax
   162f4:	jmp    161f8 <__sprintf_chk@plt+0x12518>
   162f9:	nop    DWORD PTR [rax+0x0]
   16300:	cmp    BYTE PTR [rsi+0x8b],0x0
   16307:	je     1626c <__sprintf_chk@plt+0x1258c>
   1630d:	cmp    BYTE PTR [rsi+0x8c],0x0
   16314:	je     16386 <__sprintf_chk@plt+0x126a6>
   16316:	mov    rbp,QWORD PTR [rsi+0x30]
   1631a:	cmp    rbp,rax
   1631d:	je     1632d <__sprintf_chk@plt+0x1264d>
   1631f:	mov    rdi,QWORD PTR [rsi+0x10]
   16323:	cmp    DWORD PTR [rdi+rax*4],0xffffffff
   16327:	je     1626c <__sprintf_chk@plt+0x1258c>
   1632d:	mov    rdi,QWORD PTR [rsi+0x18]
   16331:	mov    rdi,QWORD PTR [rdi+rax*8]
   16335:	add    rdi,QWORD PTR [rsi]
   16338:	add    rdi,QWORD PTR [rsi+0x28]
   1633c:	movzx  edi,BYTE PTR [rdi]
   1633f:	test   dil,0x80
   16343:	jne    1626c <__sprintf_chk@plt+0x1258c>
   16349:	cmp    DWORD PTR [rsi+0x90],0x1
   16350:	je     1637d <__sprintf_chk@plt+0x1269d>
   16352:	mov    r13,QWORD PTR [rsi+0x10]
   16356:	cmp    rbp,rcx
   16359:	jg     16369 <__sprintf_chk@plt+0x12689>
   1635b:	jmp    1637d <__sprintf_chk@plt+0x1269d>
   1635d:	nop    DWORD PTR [rax]
   16360:	add    rcx,0x1
   16364:	cmp    rcx,rbp
   16367:	je     1637d <__sprintf_chk@plt+0x1269d>
   16369:	mov    r12d,ecx
   1636c:	sub    r12d,eax
   1636f:	cmp    DWORD PTR [r13+rcx*4+0x0],0xffffffff
   16375:	je     16360 <__sprintf_chk@plt+0x12680>
   16377:	movsxd rcx,r12d
   1637a:	add    rcx,rax
   1637d:	mov    QWORD PTR [rsi+0x48],rcx
   16381:	jmp    16278 <__sprintf_chk@plt+0x12598>
   16386:	add    rax,QWORD PTR [rsi]
   16389:	add    rax,QWORD PTR [rsi+0x28]
   1638d:	mov    QWORD PTR [rsi+0x48],rcx
   16391:	movzx  edi,BYTE PTR [rax]
   16394:	jmp    16278 <__sprintf_chk@plt+0x12598>
   16399:	mov    rdi,rsp
   1639c:	mov    rdx,r8
   1639f:	call   12630 <__sprintf_chk@plt+0xe950>
   163a4:	cmp    BYTE PTR [rsp+0x8],0x15
   163a9:	mov    eax,0xb
   163ae:	je     161e7 <__sprintf_chk@plt+0x12507>
   163b4:	jmp    161f8 <__sprintf_chk@plt+0x12518>
   163b9:	mov    DWORD PTR [r10],0x4
   163c0:	xor    eax,eax
   163c2:	jmp    161f8 <__sprintf_chk@plt+0x12518>
   163c7:	mov    DWORD PTR [r10],0x2
   163ce:	xor    eax,eax
   163d0:	jmp    161f8 <__sprintf_chk@plt+0x12518>
   163d5:	call   3840 <__stack_chk_fail@plt>
   163da:	nop    WORD PTR [rax+rax*1+0x0]
   163e0:	push   r15
   163e2:	mov    r11,r9
   163e5:	mov    r10,rcx
   163e8:	push   r14
   163ea:	mov    r14,rdx
   163ed:	push   r13
   163ef:	push   r12
   163f1:	push   rbp
   163f2:	push   rbx
   163f3:	mov    rbx,rsi
   163f6:	mov    rsi,rcx
   163f9:	sub    rsp,0x38
   163fd:	mov    r15,QWORD PTR [rdi+0x98]
   16404:	mov    QWORD PTR [rsp+0x18],r8
   16409:	call   12970 <__sprintf_chk@plt+0xec90>
   1640e:	mov    rsi,r11
   16411:	mov    QWORD PTR [rsp+0x8],rax
   16416:	call   12970 <__sprintf_chk@plt+0xec90>
   1641b:	cmp    QWORD PTR [rbx+0x8],0x0
   16420:	mov    QWORD PTR [rsp+0x10],rax
   16425:	jle    164fa <__sprintf_chk@plt+0x1281a>
   1642b:	mov    QWORD PTR [rsp+0x20],r14
   16430:	mov    r13,rdi
   16433:	xor    ebp,ebp
   16435:	mov    rax,QWORD PTR [rbx+0x10]
   16439:	lea    r14,[rbp*8+0x0]
   16441:	mov    rax,QWORD PTR [rax+rbp*8]
   16445:	lea    rax,[rax+rax*2]
   16449:	shl    rax,0x4
   1644d:	add    rax,QWORD PTR [r13+0xd8]
   16454:	mov    rdx,QWORD PTR [rax]
   16457:	mov    rcx,QWORD PTR [rax+0x10]
   1645b:	shl    rdx,0x4
   1645f:	add    rdx,QWORD PTR [r15]
   16462:	mov    rdx,QWORD PTR [rdx]
   16465:	cmp    r10,rcx
   16468:	jl     1655b <__sprintf_chk@plt+0x1287b>
   1646e:	mov    rax,QWORD PTR [rax+0x18]
   16472:	cmp    r10,rax
   16475:	jg     16550 <__sprintf_chk@plt+0x12870>
   1647b:	xor    esi,esi
   1647d:	cmp    r10,rcx
   16480:	sete   sil
   16484:	cmp    r10,rax
   16487:	je     16500 <__sprintf_chk@plt+0x12820>
   16489:	xor    r12d,r12d
   1648c:	cmp    r10,rcx
   1648f:	je     16503 <__sprintf_chk@plt+0x12823>
   16491:	cmp    r11,rcx
   16494:	jl     164ba <__sprintf_chk@plt+0x127da>
   16496:	mov    edi,0x1
   1649b:	cmp    r11,rax
   1649e:	jg     164b5 <__sprintf_chk@plt+0x127d5>
   164a0:	xor    esi,esi
   164a2:	cmp    r11,rcx
   164a5:	sete   sil
   164a9:	cmp    r11,rax
   164ac:	je     164d0 <__sprintf_chk@plt+0x127f0>
   164ae:	xor    edi,edi
   164b0:	cmp    r11,rcx
   164b3:	je     164d3 <__sprintf_chk@plt+0x127f3>
   164b5:	cmp    edi,r12d
   164b8:	je     164ec <__sprintf_chk@plt+0x1280c>
   164ba:	mov    eax,0x1
   164bf:	add    rsp,0x38
   164c3:	pop    rbx
   164c4:	pop    rbp
   164c5:	pop    r12
   164c7:	pop    r13
   164c9:	pop    r14
   164cb:	pop    r15
   164cd:	ret    
   164ce:	xchg   ax,ax
   164d0:	or     esi,0x2
   164d3:	mov    r8,QWORD PTR [rsp+0x10]
   164d8:	mov    rcx,QWORD PTR [rsp+0x18]
   164dd:	mov    rdi,r13
   164e0:	call   12750 <__sprintf_chk@plt+0xea70>
   164e5:	mov    edi,eax
   164e7:	cmp    edi,r12d
   164ea:	jne    164ba <__sprintf_chk@plt+0x127da>
   164ec:	add    rbp,0x1
   164f0:	cmp    QWORD PTR [rbx+0x8],rbp
   164f4:	jg     16435 <__sprintf_chk@plt+0x12755>
   164fa:	xor    eax,eax
   164fc:	jmp    164bf <__sprintf_chk@plt+0x127df>
   164fe:	xchg   ax,ax
   16500:	or     esi,0x2
   16503:	mov    rcx,QWORD PTR [rsp+0x20]
   16508:	mov    r8,QWORD PTR [rsp+0x8]
   1650d:	mov    rdi,r13
   16510:	mov    QWORD PTR [rsp+0x28],rdx
   16515:	call   12750 <__sprintf_chk@plt+0xea70>
   1651a:	mov    r12d,eax
   1651d:	mov    rax,QWORD PTR [rbx+0x10]
   16521:	mov    rax,QWORD PTR [rax+r14*1]
   16525:	lea    rax,[rax+rax*2]
   16529:	shl    rax,0x4
   1652d:	add    rax,QWORD PTR [r13+0xd8]
   16534:	mov    rcx,QWORD PTR [rax+0x10]
   16538:	cmp    r11,rcx
   1653b:	jl     16578 <__sprintf_chk@plt+0x12898>
   1653d:	mov    rax,QWORD PTR [rax+0x18]
   16541:	mov    rdx,QWORD PTR [rsp+0x28]
   16546:	jmp    16496 <__sprintf_chk@plt+0x127b6>
   1654b:	nop    DWORD PTR [rax+rax*1+0x0]
   16550:	mov    r12d,0x1
   16556:	jmp    16491 <__sprintf_chk@plt+0x127b1>
   1655b:	cmp    r11,rcx
   1655e:	jl     164ec <__sprintf_chk@plt+0x1280c>
   16560:	mov    rax,QWORD PTR [rax+0x18]
   16564:	cmp    r11,rax
   16567:	jg     164ba <__sprintf_chk@plt+0x127da>
   1656d:	mov    r12d,0xffffffff
   16573:	jmp    164a0 <__sprintf_chk@plt+0x127c0>
   16578:	mov    edi,0xffffffff
   1657d:	jmp    164b5 <__sprintf_chk@plt+0x127d5>
   16582:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   1658d:	nop    DWORD PTR [rax]
   16590:	push   r13
   16592:	mov    r9,rdi
   16595:	shl    rsi,0x4
   16599:	mov    rdi,rdx
   1659c:	push   r12
   1659e:	mov    r10,rcx
   165a1:	push   rbp
   165a2:	push   rbx
   165a3:	sub    rsp,0x8
   165a7:	add    rsi,QWORD PTR [r9]
   165aa:	movzx  r8d,BYTE PTR [rsi+0x8]
   165af:	cmp    r8b,0x7
   165b3:	je     166d8 <__sprintf_chk@plt+0x129f8>
   165b9:	cmp    DWORD PTR [rdx+0x90],0x1
   165c0:	je     16670 <__sprintf_chk@plt+0x12990>
   165c6:	mov    rcx,QWORD PTR [rdx+0x10]
   165ca:	mov    rdx,QWORD PTR [rdx+0x30]
   165ce:	lea    rax,[r10+0x1]
   165d2:	cmp    rax,rdx
   165d5:	jge    16670 <__sprintf_chk@plt+0x12990>
   165db:	mov    r12d,0x1
   165e1:	jmp    165f9 <__sprintf_chk@plt+0x12919>
   165e3:	nop    DWORD PTR [rax+rax*1+0x0]
   165e8:	add    rax,0x1
   165ec:	add    r12d,0x1
   165f0:	cmp    rax,rdx
   165f3:	je     16688 <__sprintf_chk@plt+0x129a8>
   165f9:	cmp    DWORD PTR [rcx+rax*4],0xffffffff
   165fd:	je     165e8 <__sprintf_chk@plt+0x12908>
   165ff:	cmp    r8b,0x5
   16603:	je     166c0 <__sprintf_chk@plt+0x129e0>
   16609:	cmp    r8b,0x6
   1660d:	jne    16670 <__sprintf_chk@plt+0x12990>
   1660f:	cmp    r12d,0x1
   16613:	je     16670 <__sprintf_chk@plt+0x12990>
   16615:	mov    r13,QWORD PTR [rsi]
   16618:	mov    rsi,QWORD PTR [r13+0x40]
   1661c:	mov    rdx,QWORD PTR [r13+0x28]
   16620:	test   rsi,rsi
   16623:	jne    16632 <__sprintf_chk@plt+0x12952>
   16625:	mov    rax,rdx
   16628:	or     rax,QWORD PTR [r13+0x48]
   1662c:	je     167c3 <__sprintf_chk@plt+0x12ae3>
   16632:	mov    ebp,DWORD PTR [rcx+r10*4]
   16636:	test   rdx,rdx
   16639:	jle    16760 <__sprintf_chk@plt+0x12a80>
   1663f:	mov    rcx,QWORD PTR [r13+0x0]
   16643:	xor    eax,eax
   16645:	jmp    1665d <__sprintf_chk@plt+0x1297d>
   16647:	nop    WORD PTR [rax+rax*1+0x0]
   16650:	add    rax,0x1
   16654:	cmp    rax,rdx
   16657:	je     16760 <__sprintf_chk@plt+0x12a80>
   1665d:	cmp    DWORD PTR [rcx+rax*4],ebp
   16660:	jne    16650 <__sprintf_chk@plt+0x12970>
   16662:	test   BYTE PTR [r13+0x20],0x1
   16667:	je     16673 <__sprintf_chk@plt+0x12993>
   16669:	nop    DWORD PTR [rax+0x0]
   16670:	xor    r12d,r12d
   16673:	add    rsp,0x8
   16677:	mov    eax,r12d
   1667a:	pop    rbx
   1667b:	pop    rbp
   1667c:	pop    r12
   1667e:	pop    r13
   16680:	ret    
   16681:	nop    DWORD PTR [rax+0x0]
   16688:	cmp    r8b,0x5
   1668c:	jne    16609 <__sprintf_chk@plt+0x12929>
   16692:	mov    rax,QWORD PTR [r9+0xd8]
   16699:	test   al,0x40
   1669b:	jne    166a8 <__sprintf_chk@plt+0x129c8>
   1669d:	mov    rdx,QWORD PTR [rdi+0x8]
   166a1:	cmp    BYTE PTR [rdx+r10*1],0xa
   166a6:	je     16670 <__sprintf_chk@plt+0x12990>
   166a8:	test   al,0x80
   166aa:	je     16673 <__sprintf_chk@plt+0x12993>
   166ac:	mov    rax,QWORD PTR [rdi+0x8]
   166b0:	cmp    BYTE PTR [rax+r10*1],0x0
   166b5:	je     16670 <__sprintf_chk@plt+0x12990>
   166b7:	jmp    16673 <__sprintf_chk@plt+0x12993>
   166b9:	nop    DWORD PTR [rax+0x0]
   166c0:	cmp    r12d,0x1
   166c4:	je     16670 <__sprintf_chk@plt+0x12990>
   166c6:	mov    rax,QWORD PTR [r9+0xd8]
   166cd:	test   al,0x40
   166cf:	jne    166a8 <__sprintf_chk@plt+0x129c8>
   166d1:	jmp    1669d <__sprintf_chk@plt+0x129bd>
   166d3:	nop    DWORD PTR [rax+rax*1+0x0]
   166d8:	mov    rdx,QWORD PTR [rdx+0x8]
   166dc:	movzx  eax,BYTE PTR [rdx+rcx*1]
   166e0:	cmp    al,0xc1
   166e2:	jbe    16670 <__sprintf_chk@plt+0x12990>
   166e4:	mov    rdi,QWORD PTR [rdi+0x58]
   166e8:	lea    rcx,[rcx+0x1]
   166ec:	cmp    rcx,rdi
   166ef:	jge    16670 <__sprintf_chk@plt+0x12990>
   166f5:	add    rcx,rdx
   166f8:	movzx  esi,BYTE PTR [rcx]
   166fb:	cmp    al,0xdf
   166fd:	jbe    167fa <__sprintf_chk@plt+0x12b1a>
   16703:	cmp    al,0xef
   16705:	ja     167d8 <__sprintf_chk@plt+0x12af8>
   1670b:	cmp    al,0xe0
   1670d:	jne    16719 <__sprintf_chk@plt+0x12a39>
   1670f:	cmp    sil,0x9f
   16713:	jbe    16670 <__sprintf_chk@plt+0x12990>
   16719:	mov    esi,0x3
   1671e:	mov    r12d,0x3
   16724:	lea    rax,[r10+rsi*1]
   16728:	cmp    rdi,rax
   1672b:	jl     16670 <__sprintf_chk@plt+0x12990>
   16731:	lea    rax,[rdx+r10*1]
   16735:	add    rax,rsi
   16738:	jmp    16747 <__sprintf_chk@plt+0x12a67>
   1673a:	add    rcx,0x1
   1673e:	cmp    rax,rcx
   16741:	je     16673 <__sprintf_chk@plt+0x12993>
   16747:	movzx  ebx,BYTE PTR [rcx]
   1674a:	lea    edx,[rbx-0x80]
   1674d:	cmp    dl,0x3f
   16750:	jbe    1673a <__sprintf_chk@plt+0x12a5a>
   16752:	jmp    16670 <__sprintf_chk@plt+0x12990>
   16757:	nop    WORD PTR [rax+rax*1+0x0]
   16760:	mov    rax,QWORD PTR [r13+0x48]
   16764:	test   rax,rax
   16767:	jle    16796 <__sprintf_chk@plt+0x12ab6>
   16769:	xor    ebx,ebx
   1676b:	jmp    1677a <__sprintf_chk@plt+0x12a9a>
   1676d:	nop    DWORD PTR [rax]
   16770:	add    rbx,0x1
   16774:	cmp    QWORD PTR [r13+0x48],rbx
   16778:	jle    16792 <__sprintf_chk@plt+0x12ab2>
   1677a:	mov    rax,QWORD PTR [r13+0x18]
   1677e:	mov    edi,ebp
   16780:	mov    rsi,QWORD PTR [rax+rbx*8]
   16784:	call   37c0 <iswctype@plt>
   16789:	test   eax,eax
   1678b:	je     16770 <__sprintf_chk@plt+0x12a90>
   1678d:	jmp    16662 <__sprintf_chk@plt+0x12982>
   16792:	mov    rsi,QWORD PTR [r13+0x40]
   16796:	test   rsi,rsi
   16799:	jle    167c3 <__sprintf_chk@plt+0x12ae3>
   1679b:	mov    rdx,QWORD PTR [r13+0x8]
   1679f:	xor    eax,eax
   167a1:	nop    DWORD PTR [rax+0x0]
   167a8:	cmp    DWORD PTR [rdx+rax*4],ebp
   167ab:	jg     167ba <__sprintf_chk@plt+0x12ada>
   167ad:	mov    rcx,QWORD PTR [r13+0x10]
   167b1:	cmp    DWORD PTR [rcx+rax*4],ebp
   167b4:	jge    16662 <__sprintf_chk@plt+0x12982>
   167ba:	add    rax,0x1
   167be:	cmp    rax,rsi
   167c1:	jne    167a8 <__sprintf_chk@plt+0x12ac8>
   167c3:	test   BYTE PTR [r13+0x20],0x1
   167c8:	jne    16673 <__sprintf_chk@plt+0x12993>
   167ce:	jmp    16670 <__sprintf_chk@plt+0x12990>
   167d3:	nop    DWORD PTR [rax+rax*1+0x0]
   167d8:	cmp    al,0xf7
   167da:	ja     16812 <__sprintf_chk@plt+0x12b32>
   167dc:	cmp    al,0xf0
   167de:	jne    167ea <__sprintf_chk@plt+0x12b0a>
   167e0:	cmp    sil,0x8f
   167e4:	jbe    16670 <__sprintf_chk@plt+0x12990>
   167ea:	mov    esi,0x4
   167ef:	mov    r12d,0x4
   167f5:	jmp    16724 <__sprintf_chk@plt+0x12a44>
   167fa:	add    esi,0xffffff80
   167fd:	mov    r12d,0x2
   16803:	cmp    sil,0x3f
   16807:	jbe    16673 <__sprintf_chk@plt+0x12993>
   1680d:	jmp    16670 <__sprintf_chk@plt+0x12990>
   16812:	cmp    al,0xfb
   16814:	ja     16834 <__sprintf_chk@plt+0x12b54>
   16816:	cmp    al,0xf8
   16818:	jne    16824 <__sprintf_chk@plt+0x12b44>
   1681a:	cmp    sil,0x87
   1681e:	jbe    16670 <__sprintf_chk@plt+0x12990>
   16824:	mov    esi,0x5
   16829:	mov    r12d,0x5
   1682f:	jmp    16724 <__sprintf_chk@plt+0x12a44>
   16834:	cmp    al,0xfd
   16836:	ja     16670 <__sprintf_chk@plt+0x12990>
   1683c:	cmp    al,0xfc
   1683e:	jne    1684a <__sprintf_chk@plt+0x12b6a>
   16840:	cmp    sil,0x83
   16844:	jbe    16670 <__sprintf_chk@plt+0x12990>
   1684a:	mov    esi,0x6
   1684f:	mov    r12d,0x6
   16855:	jmp    16724 <__sprintf_chk@plt+0x12a44>
   1685a:	nop    WORD PTR [rax+rax*1+0x0]
   16860:	push   r15
   16862:	push   r14
   16864:	mov    r14,rdi
   16867:	push   r13
   16869:	lea    r13,[rsi+0x20]
   1686d:	push   r12
   1686f:	mov    r12,rdx
   16872:	push   rbp
   16873:	mov    rbp,rsi
   16876:	push   rbx
   16877:	sub    rsp,0x8
   1687b:	mov    r15,QWORD PTR [rsi+0x10]
   1687f:	mov    QWORD PTR [rsi],rdx
   16882:	mov    QWORD PTR [rsi+0x28],0x0
   1688a:	mov    QWORD PTR [rsi+0x20],r15
   1688e:	lea    rdi,[r15*8+0x0]
   16896:	call   3a70 <malloc@plt>
   1689b:	mov    QWORD PTR [rbp+0x30],rax
   1689f:	test   rax,rax
   168a2:	je     168de <__sprintf_chk@plt+0x12bfe>
   168a4:	xor    ebx,ebx
   168a6:	test   r15,r15
   168a9:	jg     168ba <__sprintf_chk@plt+0x12bda>
   168ab:	jmp    168f8 <__sprintf_chk@plt+0x12c18>
   168ad:	nop    DWORD PTR [rax]
   168b0:	add    rbx,0x1
   168b4:	cmp    QWORD PTR [rbp+0x10],rbx
   168b8:	jle    168f8 <__sprintf_chk@plt+0x12c18>
   168ba:	mov    rax,QWORD PTR [rbp+0x18]
   168be:	mov    rsi,QWORD PTR [rax+rbx*8]
   168c2:	mov    rax,rsi
   168c5:	shl    rax,0x4
   168c9:	add    rax,QWORD PTR [r14]
   168cc:	test   BYTE PTR [rax+0x8],0x8
   168d0:	jne    168b0 <__sprintf_chk@plt+0x12bd0>
   168d2:	mov    rdi,r13
   168d5:	call   12a90 <__sprintf_chk@plt+0xedb0>
   168da:	test   al,al
   168dc:	jne    168b0 <__sprintf_chk@plt+0x12bd0>
   168de:	add    rsp,0x8
   168e2:	mov    eax,0xc
   168e7:	pop    rbx
   168e8:	pop    rbp
   168e9:	pop    r12
   168eb:	pop    r13
   168ed:	pop    r14
   168ef:	pop    r15
   168f1:	ret    
   168f2:	nop    WORD PTR [rax+rax*1+0x0]
   168f8:	mov    rax,QWORD PTR [r14+0x40]
   168fc:	and    r12,QWORD PTR [r14+0x88]
   16903:	lea    rdx,[r12+r12*2]
   16907:	lea    rbx,[rax+rdx*8]
   1690b:	mov    rax,QWORD PTR [rbx]
   1690e:	mov    rdi,QWORD PTR [rbx+0x10]
   16912:	lea    rsi,[rax+0x1]
   16916:	cmp    QWORD PTR [rbx+0x8],rax
   1691a:	jle    16934 <__sprintf_chk@plt+0x12c54>
   1691c:	mov    QWORD PTR [rbx],rsi
   1691f:	mov    QWORD PTR [rdi+rax*8],rbp
   16923:	add    rsp,0x8
   16927:	xor    eax,eax
   16929:	pop    rbx
   1692a:	pop    rbp
   1692b:	pop    r12
   1692d:	pop    r13
   1692f:	pop    r14
   16931:	pop    r15
   16933:	ret    
   16934:	lea    r12,[rsi+rsi*1]
   16938:	shl    rsi,0x4
   1693c:	call   3b20 <realloc@plt>
   16941:	mov    rdi,rax
   16944:	test   rax,rax
   16947:	je     168de <__sprintf_chk@plt+0x12bfe>
   16949:	mov    QWORD PTR [rbx+0x10],rax
   1694d:	mov    rax,QWORD PTR [rbx]
   16950:	mov    QWORD PTR [rbx+0x8],r12
   16954:	lea    rsi,[rax+0x1]
   16958:	jmp    1691c <__sprintf_chk@plt+0x12c3c>
   1695a:	nop    WORD PTR [rax+rax*1+0x0]
   16960:	push   r15
   16962:	push   r14
   16964:	push   r13
   16966:	mov    r13,rdx
   16969:	push   r12
   1696b:	push   rbp
   1696c:	push   rbx
   1696d:	sub    rsp,0x28
   16971:	mov    rdx,QWORD PTR [rdx+0x8]
   16975:	mov    QWORD PTR [rsp+0x10],rdi
   1697a:	test   rdx,rdx
   1697d:	je     16c78 <__sprintf_chk@plt+0x12f98>
   16983:	mov    r14d,ecx
   16986:	mov    rbp,rsi
   16989:	mov    r9d,ecx
   1698c:	add    r14,rdx
   1698f:	test   rdx,rdx
   16992:	jle    169ac <__sprintf_chk@plt+0x12ccc>
   16994:	mov    rax,QWORD PTR [r13+0x10]
   16998:	lea    rdx,[rax+rdx*8]
   1699c:	nop    DWORD PTR [rax+0x0]
   169a0:	add    r14,QWORD PTR [rax]
   169a3:	add    rax,0x8
   169a7:	cmp    rdx,rax
   169aa:	jne    169a0 <__sprintf_chk@plt+0x12cc0>
   169ac:	mov    rax,QWORD PTR [rbp+0x88]
   169b3:	and    rax,r14
   169b6:	lea    rdx,[rax+rax*2]
   169ba:	mov    rax,QWORD PTR [rbp+0x40]
   169be:	lea    rax,[rax+rdx*8]
   169c2:	mov    r11,QWORD PTR [rax]
   169c5:	test   r11,r11
   169c8:	jle    16a20 <__sprintf_chk@plt+0x12d40>
   169ca:	mov    rbx,QWORD PTR [rax+0x10]
   169ce:	xor    r10d,r10d
   169d1:	jmp    169e1 <__sprintf_chk@plt+0x12d01>
   169d3:	nop    DWORD PTR [rax+rax*1+0x0]
   169d8:	add    r10,0x1
   169dc:	cmp    r10,r11
   169df:	je     16a20 <__sprintf_chk@plt+0x12d40>
   169e1:	mov    r12,QWORD PTR [rbx+r10*8]
   169e5:	cmp    QWORD PTR [r12],r14
   169e9:	jne    169d8 <__sprintf_chk@plt+0x12cf8>
   169eb:	movzx  eax,BYTE PTR [r12+0x68]
   169f1:	and    eax,0xf
   169f4:	cmp    eax,r9d
   169f7:	jne    169d8 <__sprintf_chk@plt+0x12cf8>
   169f9:	mov    rdi,QWORD PTR [r12+0x50]
   169fe:	mov    rsi,r13
   16a01:	call   12580 <__sprintf_chk@plt+0xe8a0>
   16a06:	test   al,al
   16a08:	je     169d8 <__sprintf_chk@plt+0x12cf8>
   16a0a:	add    rsp,0x28
   16a0e:	mov    rax,r12
   16a11:	pop    rbx
   16a12:	pop    rbp
   16a13:	pop    r12
   16a15:	pop    r13
   16a17:	pop    r14
   16a19:	pop    r15
   16a1b:	ret    
   16a1c:	nop    DWORD PTR [rax+0x0]
   16a20:	mov    esi,0x1
   16a25:	mov    edi,0x70
   16a2a:	mov    DWORD PTR [rsp+0x4],r9d
   16a2f:	call   3990 <calloc@plt>
   16a34:	mov    r12,rax
   16a37:	test   rax,rax
   16a3a:	je     16be1 <__sprintf_chk@plt+0x12f01>
   16a40:	lea    r10,[rax+0x8]
   16a44:	mov    rsi,r13
   16a47:	mov    rdi,r10
   16a4a:	mov    QWORD PTR [rsp+0x8],r10
   16a4f:	call   133e0 <__sprintf_chk@plt+0xf700>
   16a54:	mov    r10,QWORD PTR [rsp+0x8]
   16a59:	mov    r9d,DWORD PTR [rsp+0x4]
   16a5e:	test   eax,eax
   16a60:	jne    16c86 <__sprintf_chk@plt+0x12fa6>
   16a66:	movzx  eax,BYTE PTR [r12+0x68]
   16a6c:	mov    edx,r9d
   16a6f:	mov    QWORD PTR [r12+0x50],r10
   16a74:	and    edx,0xf
   16a77:	and    eax,0xfffffff0
   16a7a:	or     eax,edx
   16a7c:	cmp    QWORD PTR [r13+0x8],0x0
   16a81:	mov    BYTE PTR [r12+0x68],al
   16a86:	jle    16bc3 <__sprintf_chk@plt+0x12ee3>
   16a8c:	mov    eax,r9d
   16a8f:	mov    QWORD PTR [rsp+0x18],r14
   16a94:	xor    r11d,r11d
   16a97:	xor    ebx,ebx
   16a99:	and    eax,0x4
   16a9c:	mov    r15,r10
   16a9f:	mov    r14,r13
   16aa2:	mov    DWORD PTR [rsp+0x8],eax
   16aa6:	cs nop WORD PTR [rax+rax*1+0x0]
   16ab0:	mov    rax,QWORD PTR [r14+0x10]
   16ab4:	mov    rax,QWORD PTR [rax+rbx*8]
   16ab8:	shl    rax,0x4
   16abc:	add    rax,QWORD PTR [rbp+0x0]
   16ac0:	mov    edx,DWORD PTR [rax+0x8]
   16ac3:	movzx  edi,BYTE PTR [rax+0x8]
   16ac7:	shr    edx,0x8
   16aca:	mov    r13d,edx
   16acd:	and    edx,0x3ff
   16ad3:	and    r13w,0x3ff
   16ad9:	cmp    edi,0x1
   16adc:	jne    16ae6 <__sprintf_chk@plt+0x12e06>
   16ade:	test   edx,edx
   16ae0:	je     16bb0 <__sprintf_chk@plt+0x12ed0>
   16ae6:	movzx  ecx,BYTE PTR [r12+0x68]
   16aec:	movzx  eax,BYTE PTR [rax+0xa]
   16af0:	mov    r8d,ecx
   16af3:	shr    al,0x4
   16af6:	and    ecx,0xffffffdf
   16af9:	shr    r8b,0x5
   16afd:	or     eax,r8d
   16b00:	and    eax,0x1
   16b03:	shl    eax,0x5
   16b06:	or     eax,ecx
   16b08:	mov    BYTE PTR [r12+0x68],al
   16b0d:	cmp    edi,0x2
   16b10:	je     16bf8 <__sprintf_chk@plt+0x12f18>
   16b16:	cmp    edi,0x4
   16b19:	jne    16b23 <__sprintf_chk@plt+0x12e43>
   16b1b:	or     eax,0x40
   16b1e:	mov    BYTE PTR [r12+0x68],al
   16b23:	test   edx,edx
   16b25:	je     16bb0 <__sprintf_chk@plt+0x12ed0>
   16b2b:	cmp    r15,QWORD PTR [r12+0x50]
   16b30:	je     16c28 <__sprintf_chk@plt+0x12f48>
   16b36:	test   r13b,0x1
   16b3a:	je     16c08 <__sprintf_chk@plt+0x12f28>
   16b40:	test   r9b,0x1
   16b44:	je     16b70 <__sprintf_chk@plt+0x12e90>
   16b46:	test   r13b,0x2
   16b4a:	jne    16b70 <__sprintf_chk@plt+0x12e90>
   16b4c:	test   r13b,0x10
   16b50:	je     16b58 <__sprintf_chk@plt+0x12e78>
   16b52:	test   r9b,0x2
   16b56:	je     16b70 <__sprintf_chk@plt+0x12e90>
   16b58:	and    r13d,0x40
   16b5c:	je     16bb0 <__sprintf_chk@plt+0x12ed0>
   16b5e:	mov    eax,DWORD PTR [rsp+0x8]
   16b62:	test   eax,eax
   16b64:	jne    16bb0 <__sprintf_chk@plt+0x12ed0>
   16b66:	cs nop WORD PTR [rax+rax*1+0x0]
   16b70:	mov    rax,rbx
   16b73:	sub    rax,r11
   16b76:	js     16bac <__sprintf_chk@plt+0x12ecc>
   16b78:	mov    rdx,QWORD PTR [r12+0x10]
   16b7d:	cmp    rax,rdx
   16b80:	jge    16bac <__sprintf_chk@plt+0x12ecc>
   16b82:	sub    rdx,0x1
   16b86:	mov    QWORD PTR [r12+0x10],rdx
   16b8b:	cmp    rax,rdx
   16b8e:	jge    16bac <__sprintf_chk@plt+0x12ecc>
   16b90:	mov    rdx,QWORD PTR [r12+0x18]
   16b95:	nop    DWORD PTR [rax]
   16b98:	mov    rcx,QWORD PTR [rdx+rax*8+0x8]
   16b9d:	mov    QWORD PTR [rdx+rax*8],rcx
   16ba1:	add    rax,0x1
   16ba5:	cmp    rax,QWORD PTR [r12+0x10]
   16baa:	jl     16b98 <__sprintf_chk@plt+0x12eb8>
   16bac:	add    r11,0x1
   16bb0:	add    rbx,0x1
   16bb4:	cmp    rbx,QWORD PTR [r14+0x8]
   16bb8:	jl     16ab0 <__sprintf_chk@plt+0x12dd0>
   16bbe:	mov    r14,QWORD PTR [rsp+0x18]
   16bc3:	mov    rdx,r14
   16bc6:	mov    rsi,r12
   16bc9:	mov    rdi,rbp
   16bcc:	call   16860 <__sprintf_chk@plt+0x12b80>
   16bd1:	test   eax,eax
   16bd3:	je     16a0a <__sprintf_chk@plt+0x12d2a>
   16bd9:	mov    rdi,r12
   16bdc:	call   13e80 <__sprintf_chk@plt+0x101a0>
   16be1:	mov    rax,QWORD PTR [rsp+0x10]
   16be6:	xor    r12d,r12d
   16be9:	mov    DWORD PTR [rax],0xc
   16bef:	jmp    16a0a <__sprintf_chk@plt+0x12d2a>
   16bf4:	nop    DWORD PTR [rax+0x0]
   16bf8:	or     eax,0x10
   16bfb:	mov    BYTE PTR [r12+0x68],al
   16c00:	jmp    16b23 <__sprintf_chk@plt+0x12e43>
   16c05:	nop    DWORD PTR [rax]
   16c08:	test   r13b,0x2
   16c0c:	je     16b4c <__sprintf_chk@plt+0x12e6c>
   16c12:	test   r9b,0x1
   16c16:	je     16b4c <__sprintf_chk@plt+0x12e6c>
   16c1c:	jmp    16b70 <__sprintf_chk@plt+0x12e90>
   16c21:	nop    DWORD PTR [rax+0x0]
   16c28:	mov    edi,0x18
   16c2d:	mov    DWORD PTR [rsp+0x4],r9d
   16c32:	call   3a70 <malloc@plt>
   16c37:	mov    r9d,DWORD PTR [rsp+0x4]
   16c3c:	test   rax,rax
   16c3f:	mov    rdi,rax
   16c42:	je     16bd9 <__sprintf_chk@plt+0x12ef9>
   16c44:	mov    QWORD PTR [r12+0x50],rax
   16c49:	mov    rsi,r14
   16c4c:	mov    DWORD PTR [rsp+0x4],r9d
   16c51:	call   133e0 <__sprintf_chk@plt+0xf700>
   16c56:	mov    r9d,DWORD PTR [rsp+0x4]
   16c5b:	test   eax,eax
   16c5d:	jne    16bd9 <__sprintf_chk@plt+0x12ef9>
   16c63:	or     BYTE PTR [r12+0x68],0x80
   16c69:	xor    r11d,r11d
   16c6c:	jmp    16b36 <__sprintf_chk@plt+0x12e56>
   16c71:	nop    DWORD PTR [rax+0x0]
   16c78:	mov    DWORD PTR [rdi],0x0
   16c7e:	xor    r12d,r12d
   16c81:	jmp    16a0a <__sprintf_chk@plt+0x12d2a>
   16c86:	mov    rdi,r12
   16c89:	call   3680 <free@plt>
   16c8e:	jmp    16be1 <__sprintf_chk@plt+0x12f01>
   16c93:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   16c9e:	xchg   ax,ax
   16ca0:	push   r15
   16ca2:	push   r14
   16ca4:	push   r13
   16ca6:	push   r12
   16ca8:	push   rbp
   16ca9:	push   rbx
   16caa:	mov    rbx,rdi
   16cad:	sub    rsp,0x8
   16cb1:	mov    r13,QWORD PTR [rdx+0x8]
   16cb5:	test   r13,r13
   16cb8:	je     16e83 <__sprintf_chk@plt+0x131a3>
   16cbe:	mov    rbp,rsi
   16cc1:	mov    r14,rdx
   16cc4:	jle    16cdc <__sprintf_chk@plt+0x12ffc>
   16cc6:	mov    rax,QWORD PTR [rdx+0x10]
   16cca:	lea    rdx,[rax+r13*8]
   16cce:	xchg   ax,ax
   16cd0:	add    r13,QWORD PTR [rax]
   16cd3:	add    rax,0x8
   16cd7:	cmp    rdx,rax
   16cda:	jne    16cd0 <__sprintf_chk@plt+0x12ff0>
   16cdc:	mov    rax,QWORD PTR [rbp+0x88]
   16ce3:	and    rax,r13
   16ce6:	lea    rdx,[rax+rax*2]
   16cea:	mov    rax,QWORD PTR [rbp+0x40]
   16cee:	lea    rax,[rax+rdx*8]
   16cf2:	mov    r10,QWORD PTR [rax]
   16cf5:	test   r10,r10
   16cf8:	jle    16d30 <__sprintf_chk@plt+0x13050>
   16cfa:	mov    r11,QWORD PTR [rax+0x10]
   16cfe:	xor    r9d,r9d
   16d01:	nop    DWORD PTR [rax+0x0]
   16d08:	mov    r12,QWORD PTR [r11+r9*8]
   16d0c:	cmp    QWORD PTR [r12],r13
   16d10:	jne    16d27 <__sprintf_chk@plt+0x13047>
   16d12:	lea    rdi,[r12+0x8]
   16d17:	mov    rsi,r14
   16d1a:	call   12580 <__sprintf_chk@plt+0xe8a0>
   16d1f:	test   al,al
   16d21:	jne    16e33 <__sprintf_chk@plt+0x13153>
   16d27:	add    r9,0x1
   16d2b:	cmp    r9,r10
   16d2e:	jne    16d08 <__sprintf_chk@plt+0x13028>
   16d30:	mov    esi,0x1
   16d35:	mov    edi,0x70
   16d3a:	call   3990 <calloc@plt>
   16d3f:	mov    r12,rax
   16d42:	test   rax,rax
   16d45:	je     16e78 <__sprintf_chk@plt+0x13198>
   16d4b:	lea    r15,[rax+0x8]
   16d4f:	mov    rsi,r14
   16d52:	mov    rdi,r15
   16d55:	call   133e0 <__sprintf_chk@plt+0xf700>
   16d5a:	test   eax,eax
   16d5c:	jne    16e70 <__sprintf_chk@plt+0x13190>
   16d62:	mov    rax,QWORD PTR [r14+0x8]
   16d66:	mov    QWORD PTR [r12+0x50],r15
   16d6b:	test   rax,rax
   16d6e:	jle    16e21 <__sprintf_chk@plt+0x13141>
   16d74:	mov    rsi,QWORD PTR [r14+0x10]
   16d78:	mov    r9,QWORD PTR [rbp+0x0]
   16d7c:	lea    r8,[rsi+rax*8]
   16d80:	jmp    16dd2 <__sprintf_chk@plt+0x130f2>
   16d82:	nop    WORD PTR [rax+rax*1+0x0]
   16d88:	movzx  ecx,BYTE PTR [r12+0x68]
   16d8e:	movzx  edx,BYTE PTR [rax+0xa]
   16d92:	mov    r10d,ecx
   16d95:	shr    dl,0x4
   16d98:	and    ecx,0xffffffdf
   16d9b:	shr    r10b,0x5
   16d9f:	or     edx,r10d
   16da2:	and    edx,0x1
   16da5:	shl    edx,0x5
   16da8:	or     edx,ecx
   16daa:	mov    BYTE PTR [r12+0x68],dl
   16daf:	cmp    edi,0x2
   16db2:	je     16e48 <__sprintf_chk@plt+0x13168>
   16db8:	cmp    edi,0x4
   16dbb:	jne    16e58 <__sprintf_chk@plt+0x13178>
   16dc1:	or     edx,0x40
   16dc4:	mov    BYTE PTR [r12+0x68],dl
   16dc9:	add    rsi,0x8
   16dcd:	cmp    r8,rsi
   16dd0:	je     16e21 <__sprintf_chk@plt+0x13141>
   16dd2:	mov    rax,QWORD PTR [rsi]
   16dd5:	shl    rax,0x4
   16dd9:	add    rax,r9
   16ddc:	movzx  edi,BYTE PTR [rax+0x8]
   16de0:	cmp    edi,0x1
   16de3:	jne    16d88 <__sprintf_chk@plt+0x130a8>
   16de5:	test   DWORD PTR [rax+0x8],0x3ff00
   16dec:	je     16dc9 <__sprintf_chk@plt+0x130e9>
   16dee:	movzx  edx,BYTE PTR [r12+0x68]
   16df4:	movzx  eax,BYTE PTR [rax+0xa]
   16df8:	mov    ecx,edx
   16dfa:	shr    al,0x4
   16dfd:	and    edx,0xffffffdf
   16e00:	shr    cl,0x5
   16e03:	or     eax,ecx
   16e05:	and    eax,0x1
   16e08:	shl    eax,0x5
   16e0b:	or     eax,edx
   16e0d:	mov    BYTE PTR [r12+0x68],al
   16e12:	add    rsi,0x8
   16e16:	or     BYTE PTR [r12+0x68],0x80
   16e1c:	cmp    r8,rsi
   16e1f:	jne    16dd2 <__sprintf_chk@plt+0x130f2>
   16e21:	mov    rdx,r13
   16e24:	mov    rsi,r12
   16e27:	mov    rdi,rbp
   16e2a:	call   16860 <__sprintf_chk@plt+0x12b80>
   16e2f:	test   eax,eax
   16e31:	jne    16e8e <__sprintf_chk@plt+0x131ae>
   16e33:	add    rsp,0x8
   16e37:	mov    rax,r12
   16e3a:	pop    rbx
   16e3b:	pop    rbp
   16e3c:	pop    r12
   16e3e:	pop    r13
   16e40:	pop    r14
   16e42:	pop    r15
   16e44:	ret    
   16e45:	nop    DWORD PTR [rax]
   16e48:	or     edx,0x10
   16e4b:	mov    BYTE PTR [r12+0x68],dl
   16e50:	jmp    16dc9 <__sprintf_chk@plt+0x130e9>
   16e55:	nop    DWORD PTR [rax]
   16e58:	cmp    edi,0xc
   16e5b:	je     16e12 <__sprintf_chk@plt+0x13132>
   16e5d:	test   DWORD PTR [rax+0x8],0x3ff00
   16e64:	je     16dc9 <__sprintf_chk@plt+0x130e9>
   16e6a:	jmp    16e12 <__sprintf_chk@plt+0x13132>
   16e6c:	nop    DWORD PTR [rax+0x0]
   16e70:	mov    rdi,r12
   16e73:	call   3680 <free@plt>
   16e78:	mov    DWORD PTR [rbx],0xc
   16e7e:	xor    r12d,r12d
   16e81:	jmp    16e33 <__sprintf_chk@plt+0x13153>
   16e83:	mov    DWORD PTR [rdi],0x0
   16e89:	xor    r12d,r12d
   16e8c:	jmp    16e33 <__sprintf_chk@plt+0x13153>
   16e8e:	mov    rdi,r12
   16e91:	call   13e80 <__sprintf_chk@plt+0x101a0>
   16e96:	jmp    16e78 <__sprintf_chk@plt+0x13198>
   16e98:	nop    DWORD PTR [rax+rax*1+0x0]
   16ea0:	push   r15
   16ea2:	push   r14
   16ea4:	push   r13
   16ea6:	push   r12
   16ea8:	push   rbp
   16ea9:	push   rbx
   16eaa:	sub    rsp,0x38
   16eae:	mov    rax,QWORD PTR fs:0x28
   16eb7:	mov    QWORD PTR [rsp+0x28],rax
   16ebc:	xor    eax,eax
   16ebe:	test   rcx,rcx
   16ec1:	jle    16f4a <__sprintf_chk@plt+0x1326a>
   16ec7:	mov    r15,rdi
   16eca:	mov    rbp,rsi
   16ecd:	mov    r13,rdx
   16ed0:	mov    r12,rcx
   16ed3:	xor    ebx,ebx
   16ed5:	lea    r14,[rsp+0x10]
   16eda:	jmp    16f2d <__sprintf_chk@plt+0x1324d>
   16edc:	nop    DWORD PTR [rax+0x0]
   16ee0:	test   rdx,rdx
   16ee3:	je     16f24 <__sprintf_chk@plt+0x13244>
   16ee5:	add    rdx,0x8
   16ee9:	add    rsi,0x8
   16eed:	mov    rdi,r14
   16ef0:	call   13470 <__sprintf_chk@plt+0xf790>
   16ef5:	mov    DWORD PTR [rsp+0xc],eax
   16ef9:	test   eax,eax
   16efb:	jne    16f4c <__sprintf_chk@plt+0x1326c>
   16efd:	lea    rdi,[rsp+0xc]
   16f02:	mov    rdx,r14
   16f05:	mov    rsi,r15
   16f08:	call   16ca0 <__sprintf_chk@plt+0x12fc0>
   16f0d:	mov    rdi,QWORD PTR [rsp+0x20]
   16f12:	mov    QWORD PTR [rbp+rbx*8+0x0],rax
   16f17:	call   3680 <free@plt>
   16f1c:	mov    eax,DWORD PTR [rsp+0xc]
   16f20:	test   eax,eax
   16f22:	jne    16f4c <__sprintf_chk@plt+0x1326c>
   16f24:	add    rbx,0x1
   16f28:	cmp    r12,rbx
   16f2b:	je     16f4a <__sprintf_chk@plt+0x1326a>
   16f2d:	mov    rsi,QWORD PTR [rbp+rbx*8+0x0]
   16f32:	mov    rdx,QWORD PTR [r13+rbx*8+0x0]
   16f37:	test   rsi,rsi
   16f3a:	jne    16ee0 <__sprintf_chk@plt+0x13200>
   16f3c:	mov    QWORD PTR [rbp+rbx*8+0x0],rdx
   16f41:	add    rbx,0x1
   16f45:	cmp    r12,rbx
   16f48:	jne    16f2d <__sprintf_chk@plt+0x1324d>
   16f4a:	xor    eax,eax
   16f4c:	mov    rcx,QWORD PTR [rsp+0x28]
   16f51:	sub    rcx,QWORD PTR fs:0x28
   16f5a:	jne    16f6b <__sprintf_chk@plt+0x1328b>
   16f5c:	add    rsp,0x38
   16f60:	pop    rbx
   16f61:	pop    rbp
   16f62:	pop    r12
   16f64:	pop    r13
   16f66:	pop    r14
   16f68:	pop    r15
   16f6a:	ret    
   16f6b:	call   3840 <__stack_chk_fail@plt>
   16f70:	push   r15
   16f72:	pxor   xmm0,xmm0
   16f76:	push   r14
   16f78:	push   r13
   16f7a:	push   r12
   16f7c:	mov    r12,rdx
   16f7f:	lea    rdx,[rsi+rsi*2]
   16f83:	push   rbp
   16f84:	push   rbx
   16f85:	sub    rsp,0x38
   16f89:	mov    rax,QWORD PTR fs:0x28
   16f92:	mov    QWORD PTR [rsp+0x28],rax
   16f97:	xor    eax,eax
   16f99:	mov    rax,QWORD PTR [rdi+0x38]
   16f9d:	movups XMMWORD PTR [rsp+0x10],xmm0
   16fa2:	mov    QWORD PTR [rsp+0x20],0x0
   16fab:	lea    r15,[rax+rdx*8]
   16faf:	cmp    QWORD PTR [r15+0x8],0x0
   16fb4:	jle    17164 <__sprintf_chk@plt+0x13484>
   16fba:	lea    rax,[rsp+0x10]
   16fbf:	mov    rbp,rdi
   16fc2:	mov    r13,rsi
   16fc5:	mov    r14,rcx
   16fc8:	mov    QWORD PTR [rsp+0x8],rax
   16fcd:	xor    ebx,ebx
   16fcf:	jmp    1701d <__sprintf_chk@plt+0x1333d>
   16fd1:	nop    DWORD PTR [rax+0x0]
   16fd8:	test   rax,rax
   16fdb:	jne    17080 <__sprintf_chk@plt+0x133a0>
   16fe1:	mov    rdi,r12
   16fe4:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   16fe9:	test   rax,rax
   16fec:	je     17080 <__sprintf_chk@plt+0x133a0>
   16ff2:	mov    rdx,QWORD PTR [rbp+0x38]
   16ff6:	mov    rdi,QWORD PTR [rsp+0x8]
   16ffb:	mov    rsi,r14
   16ffe:	add    rdx,r8
   17001:	call   13240 <__sprintf_chk@plt+0xf560>
   17006:	test   eax,eax
   17008:	jne    17150 <__sprintf_chk@plt+0x13470>
   1700e:	xchg   ax,ax
   17010:	mov    rax,QWORD PTR [r15+0x8]
   17014:	add    rbx,0x1
   17018:	cmp    rax,rbx
   1701b:	jle    17098 <__sprintf_chk@plt+0x133b8>
   1701d:	mov    rax,QWORD PTR [r15+0x10]
   17021:	mov    rax,QWORD PTR [rax+rbx*8]
   17025:	cmp    r13,rax
   17028:	je     17010 <__sprintf_chk@plt+0x13330>
   1702a:	mov    rdx,rax
   1702d:	shl    rdx,0x4
   17031:	add    rdx,QWORD PTR [rbp+0x0]
   17035:	test   BYTE PTR [rdx+0x8],0x8
   17039:	je     17010 <__sprintf_chk@plt+0x13330>
   1703b:	lea    r8,[rax+rax*2]
   1703f:	mov    r10,QWORD PTR [rbp+0x28]
   17043:	mov    rdi,r15
   17046:	shl    r8,0x3
   1704a:	add    r10,r8
   1704d:	mov    r9,QWORD PTR [r10+0x10]
   17051:	mov    rsi,QWORD PTR [r9]
   17054:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   17059:	cmp    QWORD PTR [r10+0x8],0x1
   1705e:	jg     16fd8 <__sprintf_chk@plt+0x132f8>
   17064:	test   rax,rax
   17067:	jne    17010 <__sprintf_chk@plt+0x13330>
   17069:	mov    rdi,r12
   1706c:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   17071:	test   rax,rax
   17074:	je     17010 <__sprintf_chk@plt+0x13330>
   17076:	jmp    16ff2 <__sprintf_chk@plt+0x13312>
   1707b:	nop    DWORD PTR [rax+rax*1+0x0]
   17080:	mov    rsi,QWORD PTR [r9+0x8]
   17084:	test   rsi,rsi
   17087:	jle    17010 <__sprintf_chk@plt+0x13330>
   17089:	mov    rdi,r15
   1708c:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   17091:	jmp    17064 <__sprintf_chk@plt+0x13384>
   17093:	nop    DWORD PTR [rax+rax*1+0x0]
   17098:	mov    r10,QWORD PTR [rsp+0x20]
   1709d:	test   rax,rax
   170a0:	jle    17120 <__sprintf_chk@plt+0x13440>
   170a2:	mov    r11,QWORD PTR [r15+0x10]
   170a6:	xor    r8d,r8d
   170a9:	lea    r9,[rsp+0x10]
   170ae:	jmp    170ba <__sprintf_chk@plt+0x133da>
   170b0:	add    r8,0x1
   170b4:	cmp    QWORD PTR [r15+0x8],r8
   170b8:	jle    17120 <__sprintf_chk@plt+0x13440>
   170ba:	mov    rsi,QWORD PTR [r11+r8*8]
   170be:	mov    rdi,r9
   170c1:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   170c6:	test   rax,rax
   170c9:	jne    170b0 <__sprintf_chk@plt+0x133d0>
   170cb:	mov    rdi,r12
   170ce:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   170d3:	mov    rdx,rax
   170d6:	sub    rax,0x1
   170da:	js     170b0 <__sprintf_chk@plt+0x133d0>
   170dc:	mov    rsi,QWORD PTR [r12+0x8]
   170e1:	cmp    rax,rsi
   170e4:	jge    170b0 <__sprintf_chk@plt+0x133d0>
   170e6:	lea    rdi,[rsi-0x1]
   170ea:	mov    QWORD PTR [r12+0x8],rdi
   170ef:	cmp    rdx,rsi
   170f2:	jge    170b0 <__sprintf_chk@plt+0x133d0>
   170f4:	mov    rdx,QWORD PTR [r12+0x10]
   170f9:	nop    DWORD PTR [rax+0x0]
   17100:	mov    rsi,QWORD PTR [rdx+rax*8+0x8]
   17105:	mov    QWORD PTR [rdx+rax*8],rsi
   17109:	add    rax,0x1
   1710d:	cmp    rax,QWORD PTR [r12+0x8]
   17112:	jl     17100 <__sprintf_chk@plt+0x13420>
   17114:	add    r8,0x1
   17118:	cmp    QWORD PTR [r15+0x8],r8
   1711c:	jg     170ba <__sprintf_chk@plt+0x133da>
   1711e:	xchg   ax,ax
   17120:	mov    rdi,r10
   17123:	call   3680 <free@plt>
   17128:	xor    eax,eax
   1712a:	mov    rcx,QWORD PTR [rsp+0x28]
   1712f:	sub    rcx,QWORD PTR fs:0x28
   17138:	jne    17169 <__sprintf_chk@plt+0x13489>
   1713a:	add    rsp,0x38
   1713e:	pop    rbx
   1713f:	pop    rbp
   17140:	pop    r12
   17142:	pop    r13
   17144:	pop    r14
   17146:	pop    r15
   17148:	ret    
   17149:	nop    DWORD PTR [rax+0x0]
   17150:	mov    rdi,QWORD PTR [rsp+0x20]
   17155:	mov    DWORD PTR [rsp+0x8],eax
   17159:	call   3680 <free@plt>
   1715e:	mov    eax,DWORD PTR [rsp+0x8]
   17162:	jmp    1712a <__sprintf_chk@plt+0x1344a>
   17164:	xor    r10d,r10d
   17167:	jmp    17120 <__sprintf_chk@plt+0x13440>
   17169:	call   3840 <__stack_chk_fail@plt>
   1716e:	xchg   ax,ax
   17170:	push   r12
   17172:	push   rbp
   17173:	mov    rbp,rsi
   17176:	push   rbx
   17177:	mov    rax,QWORD PTR [rdi]
   1717a:	mov    rbx,rdi
   1717d:	test   rax,rax
   17180:	je     171a8 <__sprintf_chk@plt+0x134c8>
   17182:	mov    rsi,QWORD PTR [rdi+0x8]
   17186:	mov    r12,QWORD PTR [rdi+0x10]
   1718a:	test   rsi,rsi
   1718d:	jne    171e0 <__sprintf_chk@plt+0x13500>
   1718f:	mov    QWORD PTR [r12],rbp
   17193:	mov    eax,0x1
   17198:	add    QWORD PTR [rdi+0x8],0x1
   1719d:	pop    rbx
   1719e:	pop    rbp
   1719f:	pop    r12
   171a1:	ret    
   171a2:	nop    WORD PTR [rax+rax*1+0x0]
   171a8:	mov    QWORD PTR [rdi],0x1
   171af:	mov    QWORD PTR [rdi+0x8],0x1
   171b7:	mov    edi,0x8
   171bc:	call   3a70 <malloc@plt>
   171c1:	mov    QWORD PTR [rbx+0x10],rax
   171c5:	test   rax,rax
   171c8:	je     17248 <__sprintf_chk@plt+0x13568>
   171ca:	mov    QWORD PTR [rax],rbp
   171cd:	mov    eax,0x1
   171d2:	pop    rbx
   171d3:	pop    rbp
   171d4:	pop    r12
   171d6:	ret    
   171d7:	nop    WORD PTR [rax+rax*1+0x0]
   171e0:	cmp    rax,rsi
   171e3:	je     17260 <__sprintf_chk@plt+0x13580>
   171e5:	lea    rdx,[rsi*8+0x0]
   171ed:	cmp    QWORD PTR [r12],rbp
   171f1:	jle    17220 <__sprintf_chk@plt+0x13540>
   171f3:	test   rsi,rsi
   171f6:	jle    17207 <__sprintf_chk@plt+0x13527>
   171f8:	lea    rdi,[r12+0x8]
   171fd:	mov    rsi,r12
   17200:	call   3b80 <memmove@plt>
   17205:	xor    edx,edx
   17207:	mov    QWORD PTR [r12+rdx*1],rbp
   1720b:	mov    eax,0x1
   17210:	add    QWORD PTR [rbx+0x8],0x1
   17215:	jmp    1719d <__sprintf_chk@plt+0x134bd>
   17217:	nop    WORD PTR [rax+rax*1+0x0]
   17220:	mov    rax,QWORD PTR [r12+rdx*1-0x8]
   17225:	cmp    rbp,rax
   17228:	jge    17207 <__sprintf_chk@plt+0x13527>
   1722a:	nop    WORD PTR [rax+rax*1+0x0]
   17230:	mov    QWORD PTR [r12+rdx*1],rax
   17234:	sub    rdx,0x8
   17238:	mov    rax,QWORD PTR [r12+rdx*1-0x8]
   1723d:	cmp    rax,rbp
   17240:	jg     17230 <__sprintf_chk@plt+0x13550>
   17242:	jmp    17207 <__sprintf_chk@plt+0x13527>
   17244:	nop    DWORD PTR [rax+0x0]
   17248:	mov    QWORD PTR [rbx+0x8],0x0
   17250:	mov    QWORD PTR [rbx],0x0
   17257:	jmp    1719d <__sprintf_chk@plt+0x134bd>
   1725c:	nop    DWORD PTR [rax+0x0]
   17260:	lea    rax,[rsi+rsi*1]
   17264:	shl    rsi,0x4
   17268:	mov    QWORD PTR [rdi],rax
   1726b:	mov    rdi,r12
   1726e:	call   3b20 <realloc@plt>
   17273:	mov    r12,rax
   17276:	test   rax,rax
   17279:	je     17288 <__sprintf_chk@plt+0x135a8>
   1727b:	mov    QWORD PTR [rbx+0x10],rax
   1727f:	mov    rsi,QWORD PTR [rbx+0x8]
   17283:	jmp    171e5 <__sprintf_chk@plt+0x13505>
   17288:	xor    eax,eax
   1728a:	jmp    1719d <__sprintf_chk@plt+0x134bd>
   1728f:	nop
   17290:	push   r14
   17292:	mov    r14,rsi
   17295:	push   r13
   17297:	mov    r13,rcx
   1729a:	push   r12
   1729c:	mov    r12d,r8d
   1729f:	push   rbp
   172a0:	mov    rbp,rdx
   172a3:	push   rbx
   172a4:	mov    rsi,rbp
   172a7:	mov    rbx,rdi
   172aa:	mov    rdi,r14
   172ad:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   172b2:	test   rax,rax
   172b5:	jne    17314 <__sprintf_chk@plt+0x13634>
   172b7:	mov    rax,rbp
   172ba:	shl    rax,0x4
   172be:	add    rax,QWORD PTR [rbx]
   172c1:	movzx  edx,BYTE PTR [rax+0x8]
   172c5:	cmp    edx,r12d
   172c8:	jne    172cf <__sprintf_chk@plt+0x135ef>
   172ca:	cmp    QWORD PTR [rax],r13
   172cd:	je     17348 <__sprintf_chk@plt+0x13668>
   172cf:	mov    rsi,rbp
   172d2:	mov    rdi,r14
   172d5:	call   17170 <__sprintf_chk@plt+0x13490>
   172da:	test   al,al
   172dc:	je     1735d <__sprintf_chk@plt+0x1367d>
   172de:	mov    rdx,QWORD PTR [rbx+0x28]
   172e2:	lea    rbp,[rbp+rbp*2+0x0]
   172e7:	shl    rbp,0x3
   172eb:	add    rdx,rbp
   172ee:	mov    rax,QWORD PTR [rdx+0x8]
   172f2:	test   rax,rax
   172f5:	je     17314 <__sprintf_chk@plt+0x13634>
   172f7:	mov    rdx,QWORD PTR [rdx+0x10]
   172fb:	cmp    rax,0x2
   172ff:	je     17320 <__sprintf_chk@plt+0x13640>
   17301:	mov    rbp,QWORD PTR [rdx]
   17304:	mov    rdi,r14
   17307:	mov    rsi,rbp
   1730a:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   1730f:	test   rax,rax
   17312:	je     172b7 <__sprintf_chk@plt+0x135d7>
   17314:	xor    eax,eax
   17316:	pop    rbx
   17317:	pop    rbp
   17318:	pop    r12
   1731a:	pop    r13
   1731c:	pop    r14
   1731e:	ret    
   1731f:	nop
   17320:	mov    rdx,QWORD PTR [rdx+0x8]
   17324:	mov    r8d,r12d
   17327:	mov    rcx,r13
   1732a:	mov    rsi,r14
   1732d:	mov    rdi,rbx
   17330:	call   17290 <__sprintf_chk@plt+0x135b0>
   17335:	test   eax,eax
   17337:	jne    17316 <__sprintf_chk@plt+0x13636>
   17339:	mov    rax,QWORD PTR [rbx+0x28]
   1733d:	mov    rdx,QWORD PTR [rax+rbp*1+0x10]
   17342:	jmp    17301 <__sprintf_chk@plt+0x13621>
   17344:	nop    DWORD PTR [rax+0x0]
   17348:	cmp    r12d,0x9
   1734c:	jne    17314 <__sprintf_chk@plt+0x13634>
   1734e:	mov    rsi,rbp
   17351:	mov    rdi,r14
   17354:	call   17170 <__sprintf_chk@plt+0x13490>
   17359:	test   al,al
   1735b:	jne    17314 <__sprintf_chk@plt+0x13634>
   1735d:	pop    rbx
   1735e:	mov    eax,0xc
   17363:	pop    rbp
   17364:	pop    r12
   17366:	pop    r13
   17368:	pop    r14
   1736a:	ret    
   1736b:	nop    DWORD PTR [rax+rax*1+0x0]
   17370:	push   r15
   17372:	mov    r15d,ecx
   17375:	push   r14
   17377:	mov    r14,rsi
   1737a:	push   r13
   1737c:	mov    r13,rdi
   1737f:	push   r12
   17381:	push   rbp
   17382:	push   rbx
   17383:	mov    rbx,rdx
   17386:	sub    rsp,0x38
   1738a:	mov    rbp,QWORD PTR [rsi+0x8]
   1738e:	mov    rax,QWORD PTR fs:0x28
   17397:	mov    QWORD PTR [rsp+0x28],rax
   1739c:	xor    eax,eax
   1739e:	mov    QWORD PTR [rsp+0x18],0x0
   173a7:	lea    rdi,[rbp*8+0x0]
   173af:	mov    QWORD PTR [rsp+0x10],rbp
   173b4:	call   3a70 <malloc@plt>
   173b9:	mov    QWORD PTR [rsp+0x20],rax
   173be:	test   rax,rax
   173c1:	je     174c0 <__sprintf_chk@plt+0x137e0>
   173c7:	test   rbp,rbp
   173ca:	jle    1745e <__sprintf_chk@plt+0x1377e>
   173d0:	xor    r12d,r12d
   173d3:	lea    rbp,[rsp+0x10]
   173d8:	nop    DWORD PTR [rax+rax*1+0x0]
   173e0:	mov    rax,QWORD PTR [r14+0x10]
   173e4:	mov    r9,QWORD PTR [rax+r12*8]
   173e8:	mov    rax,QWORD PTR [r13+0x30]
   173ec:	lea    rdx,[r9+r9*2]
   173f0:	lea    r10,[rax+rdx*8]
   173f4:	mov    rsi,QWORD PTR [r10+0x8]
   173f8:	test   rsi,rsi
   173fb:	jle    17480 <__sprintf_chk@plt+0x137a0>
   17401:	mov    r8,QWORD PTR [r10+0x10]
   17405:	mov    rdi,QWORD PTR [r13+0x0]
   17409:	xor    edx,edx
   1740b:	jmp    17419 <__sprintf_chk@plt+0x13739>
   1740d:	nop    DWORD PTR [rax]
   17410:	add    rdx,0x1
   17414:	cmp    rsi,rdx
   17417:	je     17480 <__sprintf_chk@plt+0x137a0>
   17419:	mov    rcx,QWORD PTR [r8+rdx*8]
   1741d:	mov    rax,rcx
   17420:	shl    rax,0x4
   17424:	add    rax,rdi
   17427:	movzx  r11d,BYTE PTR [rax+0x8]
   1742c:	cmp    r15d,r11d
   1742f:	jne    17410 <__sprintf_chk@plt+0x13730>
   17431:	cmp    rbx,QWORD PTR [rax]
   17434:	jne    17410 <__sprintf_chk@plt+0x13730>
   17436:	cmp    rcx,0xffffffffffffffff
   1743a:	je     17480 <__sprintf_chk@plt+0x137a0>
   1743c:	mov    r8d,r15d
   1743f:	mov    rcx,rbx
   17442:	mov    rdx,r9
   17445:	mov    rsi,rbp
   17448:	mov    rdi,r13
   1744b:	call   17290 <__sprintf_chk@plt+0x135b0>
   17450:	test   eax,eax
   17452:	jne    1748f <__sprintf_chk@plt+0x137af>
   17454:	add    r12,0x1
   17458:	cmp    QWORD PTR [r14+0x8],r12
   1745c:	jg     173e0 <__sprintf_chk@plt+0x13700>
   1745e:	mov    rdi,QWORD PTR [r14+0x10]
   17462:	call   3680 <free@plt>
   17467:	mov    rax,QWORD PTR [rsp+0x20]
   1746c:	movdqu xmm0,XMMWORD PTR [rsp+0x10]
   17472:	mov    QWORD PTR [r14+0x10],rax
   17476:	xor    eax,eax
   17478:	movups XMMWORD PTR [r14],xmm0
   1747c:	jmp    174a1 <__sprintf_chk@plt+0x137c1>
   1747e:	xchg   ax,ax
   17480:	mov    rsi,r10
   17483:	mov    rdi,rbp
   17486:	call   13070 <__sprintf_chk@plt+0xf390>
   1748b:	test   eax,eax
   1748d:	je     17454 <__sprintf_chk@plt+0x13774>
   1748f:	mov    rdi,QWORD PTR [rsp+0x20]
   17494:	mov    DWORD PTR [rsp+0xc],eax
   17498:	call   3680 <free@plt>
   1749d:	mov    eax,DWORD PTR [rsp+0xc]
   174a1:	mov    rbx,QWORD PTR [rsp+0x28]
   174a6:	sub    rbx,QWORD PTR fs:0x28
   174af:	jne    174c7 <__sprintf_chk@plt+0x137e7>
   174b1:	add    rsp,0x38
   174b5:	pop    rbx
   174b6:	pop    rbp
   174b7:	pop    r12
   174b9:	pop    r13
   174bb:	pop    r14
   174bd:	pop    r15
   174bf:	ret    
   174c0:	mov    eax,0xc
   174c5:	jmp    174a1 <__sprintf_chk@plt+0x137c1>
   174c7:	call   3840 <__stack_chk_fail@plt>
   174cc:	nop    DWORD PTR [rax+0x0]
   174d0:	push   r15
   174d2:	mov    r9,rsi
   174d5:	push   r14
   174d7:	mov    r14,rdi
   174da:	push   r13
   174dc:	push   r12
   174de:	mov    r12,rdx
   174e1:	push   rbp
   174e2:	mov    ebp,r8d
   174e5:	push   rbx
   174e6:	sub    rsp,0x18
   174ea:	mov    QWORD PTR [rsp+0x8],rcx
   174ef:	mov    r10,QWORD PTR [r14]
   174f2:	mov    rax,r9
   174f5:	mov    r8,QWORD PTR [r14+0x28]
   174f9:	mov    r15,r12
   174fc:	shl    rax,0x4
   17500:	add    rax,r10
   17503:	cmp    BYTE PTR [rax+0x8],0x4
   17507:	je     17670 <__sprintf_chk@plt+0x13990>
   1750d:	lea    r15,[r9+r9*2]
   17511:	shl    r15,0x3
   17515:	lea    rsi,[r8+r15*1]
   17519:	mov    rcx,QWORD PTR [rsi+0x8]
   1751d:	test   rcx,rcx
   17520:	je     17724 <__sprintf_chk@plt+0x13a44>
   17526:	lea    rbx,[r12+r12*2]
   1752a:	mov    rsi,QWORD PTR [rsi+0x10]
   1752e:	shl    rbx,0x3
   17532:	add    r8,rbx
   17535:	mov    r13,QWORD PTR [rsi]
   17538:	mov    QWORD PTR [r8+0x8],0x0
   17540:	cmp    rcx,0x1
   17544:	je     17620 <__sprintf_chk@plt+0x13940>
   1754a:	mov    rdx,QWORD PTR [r14+0x10]
   1754e:	lea    rsi,[rdx-0x1]
   17552:	mov    rax,rsi
   17555:	shl    rax,0x4
   17559:	add    rax,r10
   1755c:	test   BYTE PTR [rax+0xa],0x4
   17560:	je     176d0 <__sprintf_chk@plt+0x139f0>
   17566:	test   rsi,rsi
   17569:	jle    176d0 <__sprintf_chk@plt+0x139f0>
   1756f:	shl    rdx,0x4
   17573:	sub    r10,rax
   17576:	mov    rcx,QWORD PTR [r14+0x20]
   1757a:	lea    rdi,[r10+rdx*1-0x20]
   1757f:	jmp    175a2 <__sprintf_chk@plt+0x138c2>
   17581:	nop    DWORD PTR [rax+0x0]
   17588:	add    rax,rdi
   1758b:	sub    rsi,0x1
   1758f:	test   BYTE PTR [rax+0xa],0x4
   17593:	je     176d0 <__sprintf_chk@plt+0x139f0>
   17599:	test   rsi,rsi
   1759c:	jle    176d0 <__sprintf_chk@plt+0x139f0>
   175a2:	cmp    QWORD PTR [rcx+rsi*8],r13
   175a6:	jne    17588 <__sprintf_chk@plt+0x138a8>
   175a8:	mov    edx,DWORD PTR [rax+0x8]
   175ab:	shr    edx,0x8
   175ae:	and    edx,0x3ff
   175b4:	cmp    ebp,edx
   175b6:	jne    17588 <__sprintf_chk@plt+0x138a8>
   175b8:	mov    rdi,r8
   175bb:	call   17170 <__sprintf_chk@plt+0x13490>
   175c0:	test   al,al
   175c2:	je     17606 <__sprintf_chk@plt+0x13926>
   175c4:	mov    rax,QWORD PTR [r14+0x28]
   175c8:	mov    edx,ebp
   175ca:	mov    rdi,r14
   175cd:	mov    rax,QWORD PTR [rax+r15*1+0x10]
   175d2:	mov    r9,QWORD PTR [rax+0x8]
   175d6:	mov    rsi,r9
   175d9:	mov    QWORD PTR [rsp],r9
   175dd:	call   13df0 <__sprintf_chk@plt+0x10110>
   175e2:	mov    r12,rax
   175e5:	cmp    rax,0xffffffffffffffff
   175e9:	je     17606 <__sprintf_chk@plt+0x13926>
   175eb:	add    rbx,QWORD PTR [r14+0x28]
   175ef:	mov    rdi,rbx
   175f2:	mov    rsi,r12
   175f5:	call   17170 <__sprintf_chk@plt+0x13490>
   175fa:	mov    r9,QWORD PTR [rsp]
   175fe:	test   al,al
   17600:	jne    174ef <__sprintf_chk@plt+0x1380f>
   17606:	mov    eax,0xc
   1760b:	add    rsp,0x18
   1760f:	pop    rbx
   17610:	pop    rbp
   17611:	pop    r12
   17613:	pop    r13
   17615:	pop    r14
   17617:	pop    r15
   17619:	ret    
   1761a:	nop    WORD PTR [rax+rax*1+0x0]
   17620:	cmp    r9,QWORD PTR [rsp+0x8]
   17625:	jne    17630 <__sprintf_chk@plt+0x13950>
   17627:	cmp    r9,r12
   1762a:	jne    17737 <__sprintf_chk@plt+0x13a57>
   17630:	mov    eax,DWORD PTR [rax+0x8]
   17633:	mov    rsi,r13
   17636:	mov    rdi,r14
   17639:	shr    eax,0x8
   1763c:	and    eax,0x3ff
   17641:	or     ebp,eax
   17643:	mov    edx,ebp
   17645:	call   13df0 <__sprintf_chk@plt+0x10110>
   1764a:	mov    r12,rax
   1764d:	cmp    rax,0xffffffffffffffff
   17651:	je     17606 <__sprintf_chk@plt+0x13926>
   17653:	add    rbx,QWORD PTR [r14+0x28]
   17657:	mov    rsi,rax
   1765a:	mov    rdi,rbx
   1765d:	call   17170 <__sprintf_chk@plt+0x13490>
   17662:	test   al,al
   17664:	je     17606 <__sprintf_chk@plt+0x13926>
   17666:	mov    r9,r13
   17669:	jmp    174ef <__sprintf_chk@plt+0x1380f>
   1766e:	xchg   ax,ax
   17670:	mov    rax,QWORD PTR [r14+0x18]
   17674:	lea    r13,[r12+r12*2]
   17678:	mov    edx,ebp
   1767a:	mov    rdi,r14
   1767d:	shl    r13,0x3
   17681:	lea    rbx,[r9*8+0x0]
   17689:	mov    r9,QWORD PTR [rax+r9*8]
   1768d:	mov    QWORD PTR [r8+r13*1+0x8],0x0
   17696:	mov    rsi,r9
   17699:	mov    QWORD PTR [rsp],r9
   1769d:	call   13df0 <__sprintf_chk@plt+0x10110>
   176a2:	mov    r9,QWORD PTR [rsp]
   176a6:	cmp    rax,0xffffffffffffffff
   176aa:	mov    r12,rax
   176ad:	je     17606 <__sprintf_chk@plt+0x13926>
   176b3:	mov    rax,QWORD PTR [r14+0x18]
   176b7:	mov    rdi,QWORD PTR [r14+0x28]
   176bb:	mov    QWORD PTR [rsp],r9
   176bf:	mov    rcx,QWORD PTR [rax+rbx*1]
   176c3:	add    rdi,r13
   176c6:	mov    QWORD PTR [rax+r15*8],rcx
   176ca:	jmp    175f2 <__sprintf_chk@plt+0x13912>
   176cf:	nop
   176d0:	mov    edx,ebp
   176d2:	mov    rsi,r13
   176d5:	mov    rdi,r14
   176d8:	call   13df0 <__sprintf_chk@plt+0x10110>
   176dd:	mov    r12,rax
   176e0:	cmp    rax,0xffffffffffffffff
   176e4:	je     17606 <__sprintf_chk@plt+0x13926>
   176ea:	mov    rdi,QWORD PTR [r14+0x28]
   176ee:	mov    rsi,r12
   176f1:	add    rdi,rbx
   176f4:	call   17170 <__sprintf_chk@plt+0x13490>
   176f9:	test   al,al
   176fb:	je     17606 <__sprintf_chk@plt+0x13926>
   17701:	mov    rcx,QWORD PTR [rsp+0x8]
   17706:	mov    r8d,ebp
   17709:	mov    rdx,r12
   1770c:	mov    rsi,r13
   1770f:	mov    rdi,r14
   17712:	call   174d0 <__sprintf_chk@plt+0x137f0>
   17717:	test   eax,eax
   17719:	je     175c4 <__sprintf_chk@plt+0x138e4>
   1771f:	jmp    1760b <__sprintf_chk@plt+0x1392b>
   17724:	mov    rax,QWORD PTR [r14+0x18]
   17728:	mov    rcx,QWORD PTR [rax+r9*8]
   1772c:	mov    QWORD PTR [rax+r12*8],rcx
   17730:	xor    eax,eax
   17732:	jmp    1760b <__sprintf_chk@plt+0x1392b>
   17737:	mov    rdi,r8
   1773a:	mov    rsi,r13
   1773d:	call   17170 <__sprintf_chk@plt+0x13490>
   17742:	mov    r8d,eax
   17745:	xor    eax,eax
   17747:	test   r8b,r8b
   1774a:	jne    1760b <__sprintf_chk@plt+0x1392b>
   17750:	jmp    17606 <__sprintf_chk@plt+0x13926>
   17755:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   17760:	push   r15
   17762:	push   r14
   17764:	push   r13
   17766:	mov    r13,rsi
   17769:	push   r12
   1776b:	push   rbp
   1776c:	mov    rbp,rdx
   1776f:	push   rbx
   17770:	lea    rbx,[rdx+rdx*2]
   17774:	shl    rbx,0x3
   17778:	sub    rsp,0x68
   1777c:	mov    r14,QWORD PTR [rsi+0x28]
   17780:	mov    QWORD PTR [rsp+0x10],rdi
   17785:	mov    DWORD PTR [rsp+0x1c],ecx
   17789:	add    r14,rbx
   1778c:	mov    rax,QWORD PTR fs:0x28
   17795:	mov    QWORD PTR [rsp+0x58],rax
   1779a:	xor    eax,eax
   1779c:	mov    rax,QWORD PTR [r14+0x8]
   177a0:	mov    QWORD PTR [rsp+0x28],0x0
   177a9:	lea    rdi,[rax+0x1]
   177ad:	mov    QWORD PTR [rsp+0x20],rdi
   177b2:	shl    rdi,0x3
   177b6:	call   3a70 <malloc@plt>
   177bb:	mov    QWORD PTR [rsp+0x30],rax
   177c0:	test   rax,rax
   177c3:	je     179f0 <__sprintf_chk@plt+0x13d10>
   177c9:	mov    rax,QWORD PTR [r13+0x30]
   177cd:	mov    rdx,QWORD PTR [r13+0x0]
   177d1:	mov    r15,rbp
   177d4:	shl    r15,0x4
   177d8:	mov    QWORD PTR [rax+rbx*1+0x8],0xffffffffffffffff
   177e1:	lea    rax,[rdx+r15*1]
   177e5:	mov    r8d,DWORD PTR [rax+0x8]
   177e9:	test   r8d,0x3ff00
   177f0:	jne    17950 <__sprintf_chk@plt+0x13c70>
   177f6:	test   BYTE PTR [rax+0x8],0x8
   177fa:	je     179a0 <__sprintf_chk@plt+0x13cc0>
   17800:	mov    rsi,QWORD PTR [r13+0x28]
   17804:	lea    rax,[rsi+rbx*1]
   17808:	cmp    QWORD PTR [rax+0x8],0x0
   1780d:	jle    179a0 <__sprintf_chk@plt+0x13cc0>
   17813:	mov    BYTE PTR [rsp+0x1b],0x0
   17818:	xor    r12d,r12d
   1781b:	lea    r14,[rsp+0x20]
   17820:	jmp    17874 <__sprintf_chk@plt+0x13b94>
   17822:	nop    WORD PTR [rax+rax*1+0x0]
   17828:	movdqu xmm0,XMMWORD PTR [rax]
   1782c:	lea    r11,[rsp+0x40]
   17831:	movups XMMWORD PTR [rsp+0x40],xmm0
   17836:	mov    rax,QWORD PTR [rax+0x10]
   1783a:	mov    QWORD PTR [rsp+0x50],rax
   1783f:	mov    rsi,r11
   17842:	mov    rdi,r14
   17845:	call   13070 <__sprintf_chk@plt+0xf390>
   1784a:	test   eax,eax
   1784c:	jne    178c0 <__sprintf_chk@plt+0x13be0>
   1784e:	mov    rax,QWORD PTR [r13+0x30]
   17852:	cmp    QWORD PTR [rax+r15*1+0x8],0x0
   17858:	je     178e8 <__sprintf_chk@plt+0x13c08>
   1785e:	mov    rsi,QWORD PTR [r13+0x28]
   17862:	add    r12,0x1
   17866:	lea    rax,[rsi+rbx*1]
   1786a:	cmp    QWORD PTR [rax+0x8],r12
   1786e:	jle    17917 <__sprintf_chk@plt+0x13c37>
   17874:	mov    rax,QWORD PTR [rax+0x10]
   17878:	mov    rdx,QWORD PTR [rax+r12*8]
   1787c:	mov    rax,QWORD PTR [r13+0x30]
   17880:	lea    r8,[rdx+rdx*2]
   17884:	lea    r15,[r8*8+0x0]
   1788c:	add    rax,r15
   1788f:	mov    rcx,QWORD PTR [rax+0x8]
   17893:	cmp    rcx,0xffffffffffffffff
   17897:	je     17900 <__sprintf_chk@plt+0x13c20>
   17899:	test   rcx,rcx
   1789c:	jne    17828 <__sprintf_chk@plt+0x13b48>
   1789e:	lea    r11,[rsp+0x40]
   178a3:	mov    rsi,r13
   178a6:	mov    rdi,r11
   178a9:	mov    QWORD PTR [rsp+0x8],r11
   178ae:	call   17760 <__sprintf_chk@plt+0x13a80>
   178b3:	mov    r11,QWORD PTR [rsp+0x8]
   178b8:	test   eax,eax
   178ba:	je     1783f <__sprintf_chk@plt+0x13b5f>
   178bc:	nop    DWORD PTR [rax+0x0]
   178c0:	mov    rbx,QWORD PTR [rsp+0x58]
   178c5:	sub    rbx,QWORD PTR fs:0x28
   178ce:	jne    179fa <__sprintf_chk@plt+0x13d1a>
   178d4:	add    rsp,0x68
   178d8:	pop    rbx
   178d9:	pop    rbp
   178da:	pop    r12
   178dc:	pop    r13
   178de:	pop    r14
   178e0:	pop    r15
   178e2:	ret    
   178e3:	nop    DWORD PTR [rax+rax*1+0x0]
   178e8:	mov    rdi,QWORD PTR [rsp+0x50]
   178ed:	call   3680 <free@plt>
   178f2:	mov    BYTE PTR [rsp+0x1b],0x1
   178f7:	jmp    1785e <__sprintf_chk@plt+0x13b7e>
   178fc:	nop    DWORD PTR [rax+0x0]
   17900:	lea    rax,[rsi+rbx*1]
   17904:	mov    BYTE PTR [rsp+0x1b],0x1
   17909:	add    r12,0x1
   1790d:	cmp    QWORD PTR [rax+0x8],r12
   17911:	jg     17874 <__sprintf_chk@plt+0x13b94>
   17917:	lea    rdi,[rsp+0x20]
   1791c:	mov    rsi,rbp
   1791f:	call   17170 <__sprintf_chk@plt+0x13490>
   17924:	test   al,al
   17926:	je     179f0 <__sprintf_chk@plt+0x13d10>
   1792c:	mov    rax,QWORD PTR [r13+0x30]
   17930:	cmp    BYTE PTR [rsp+0x1c],0x1
   17935:	lea    rdx,[rax+rbx*1]
   17939:	je     179b5 <__sprintf_chk@plt+0x13cd5>
   1793b:	cmp    BYTE PTR [rsp+0x1b],0x0
   17940:	je     179b5 <__sprintf_chk@plt+0x13cd5>
   17942:	mov    QWORD PTR [rdx+0x8],0x0
   1794a:	jmp    179c9 <__sprintf_chk@plt+0x13ce9>
   1794c:	nop    DWORD PTR [rax+0x0]
   17950:	cmp    QWORD PTR [r14+0x8],0x0
   17955:	je     179a0 <__sprintf_chk@plt+0x13cc0>
   17957:	mov    rcx,QWORD PTR [r14+0x10]
   1795b:	mov    rcx,QWORD PTR [rcx]
   1795e:	shl    rcx,0x4
   17962:	test   BYTE PTR [rdx+rcx*1+0xa],0x4
   17967:	jne    177f6 <__sprintf_chk@plt+0x13b16>
   1796d:	shr    r8d,0x8
   17971:	mov    rcx,rbp
   17974:	mov    rdx,rbp
   17977:	mov    rsi,rbp
   1797a:	and    r8d,0x3ff
   17981:	mov    rdi,r13
   17984:	call   174d0 <__sprintf_chk@plt+0x137f0>
   17989:	test   eax,eax
   1798b:	jne    178c0 <__sprintf_chk@plt+0x13be0>
   17991:	mov    rax,QWORD PTR [r13+0x0]
   17995:	add    rax,r15
   17998:	jmp    177f6 <__sprintf_chk@plt+0x13b16>
   1799d:	nop    DWORD PTR [rax]
   179a0:	lea    rdi,[rsp+0x20]
   179a5:	mov    rsi,rbp
   179a8:	call   17170 <__sprintf_chk@plt+0x13490>
   179ad:	test   al,al
   179af:	je     179f0 <__sprintf_chk@plt+0x13d10>
   179b1:	mov    rax,QWORD PTR [r13+0x30]
   179b5:	movdqu xmm2,XMMWORD PTR [rsp+0x20]
   179bb:	movups XMMWORD PTR [rax+rbx*1],xmm2
   179bf:	mov    rdx,QWORD PTR [rsp+0x30]
   179c4:	mov    QWORD PTR [rax+rbx*1+0x10],rdx
   179c9:	mov    rbx,QWORD PTR [rsp+0x10]
   179ce:	mov    rax,QWORD PTR [rsp+0x30]
   179d3:	movdqu xmm1,XMMWORD PTR [rsp+0x20]
   179d9:	mov    QWORD PTR [rbx+0x10],rax
   179dd:	xor    eax,eax
   179df:	movups XMMWORD PTR [rbx],xmm1
   179e2:	jmp    178c0 <__sprintf_chk@plt+0x13be0>
   179e7:	nop    WORD PTR [rax+rax*1+0x0]
   179f0:	mov    eax,0xc
   179f5:	jmp    178c0 <__sprintf_chk@plt+0x13be0>
   179fa:	call   3840 <__stack_chk_fail@plt>
   179ff:	nop
   17a00:	push   r15
   17a02:	push   r14
   17a04:	push   r13
   17a06:	push   r12
   17a08:	push   rbp
   17a09:	mov    rbp,rsi
   17a0c:	mov    rsi,rdx
   17a0f:	push   rbx
   17a10:	sub    rsp,0x78
   17a14:	mov    QWORD PTR [rsp+0x8],rdx
   17a19:	mov    QWORD PTR [rsp+0x30],rcx
   17a1e:	mov    DWORD PTR [rsp+0x3c],r8d
   17a23:	mov    rax,QWORD PTR fs:0x28
   17a2c:	mov    QWORD PTR [rsp+0x68],rax
   17a31:	xor    eax,eax
   17a33:	call   12970 <__sprintf_chk@plt+0xec90>
   17a38:	cmp    rax,0xffffffffffffffff
   17a3c:	je     17c70 <__sprintf_chk@plt+0x13f90>
   17a42:	lea    rax,[rax+rax*2]
   17a46:	mov    r13,QWORD PTR [rdi+0x98]
   17a4d:	mov    r12,rdi
   17a50:	shl    rax,0x4
   17a54:	mov    QWORD PTR [rsp+0x28],rax
   17a59:	lea    rax,[rsp+0x4c]
   17a5e:	mov    QWORD PTR [rsp+0x20],rax
   17a63:	mov    rbx,QWORD PTR [rsp+0x28]
   17a68:	add    rbx,QWORD PTR [r12+0xd8]
   17a70:	jmp    17b4a <__sprintf_chk@plt+0x13e6a>
   17a75:	nop    DWORD PTR [rax]
   17a78:	mov    rax,QWORD PTR [r13+0x18]
   17a7c:	mov    r11,QWORD PTR [r12+0xb8]
   17a84:	mov    r10,QWORD PTR [rax+rsi*8]
   17a88:	lea    rax,[r14*8+0x0]
   17a90:	add    r11,rax
   17a93:	mov    QWORD PTR [rsp+0x10],rax
   17a98:	mov    rax,QWORD PTR [r11]
   17a9b:	test   rax,rax
   17a9e:	je     17c20 <__sprintf_chk@plt+0x13f40>
   17aa4:	lea    r11,[rax+0x8]
   17aa8:	mov    rsi,r10
   17aab:	mov    QWORD PTR [rsp+0x18],r10
   17ab0:	mov    rdi,r11
   17ab3:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   17ab8:	test   rax,rax
   17abb:	jne    17b3c <__sprintf_chk@plt+0x13e5c>
   17abd:	lea    r15,[rsp+0x50]
   17ac2:	mov    rsi,r11
   17ac5:	mov    rdi,r15
   17ac8:	call   133e0 <__sprintf_chk@plt+0xf700>
   17acd:	mov    r10,QWORD PTR [rsp+0x18]
   17ad2:	mov    rdi,r15
   17ad5:	mov    DWORD PTR [rsp+0x4c],eax
   17ad9:	mov    rsi,r10
   17adc:	call   17170 <__sprintf_chk@plt+0x13490>
   17ae1:	mov    edx,DWORD PTR [rsp+0x4c]
   17ae5:	test   edx,edx
   17ae7:	jne    17cb0 <__sprintf_chk@plt+0x13fd0>
   17aed:	cmp    al,0x1
   17aef:	jne    17cb0 <__sprintf_chk@plt+0x13fd0>
   17af5:	mov    r11,QWORD PTR [rsp+0x10]
   17afa:	add    r11,QWORD PTR [r12+0xb8]
   17b02:	mov    rdi,QWORD PTR [rsp+0x20]
   17b07:	mov    rdx,r15
   17b0a:	mov    rsi,r13
   17b0d:	mov    QWORD PTR [rsp+0x10],r11
   17b12:	call   16ca0 <__sprintf_chk@plt+0x12fc0>
   17b17:	mov    r11,QWORD PTR [rsp+0x10]
   17b1c:	mov    rdi,QWORD PTR [rsp+0x60]
   17b21:	mov    QWORD PTR [r11],rax
   17b24:	call   3680 <free@plt>
   17b29:	mov    rax,QWORD PTR [r12+0xb8]
   17b31:	cmp    QWORD PTR [rax+r14*8],0x0
   17b36:	je     17c98 <__sprintf_chk@plt+0x13fb8>
   17b3c:	add    rbx,0x30
   17b40:	cmp    BYTE PTR [rbx-0x8],0x0
   17b44:	je     17c70 <__sprintf_chk@plt+0x13f90>
   17b4a:	mov    rsi,QWORD PTR [rbx]
   17b4d:	mov    rdi,rbp
   17b50:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   17b55:	test   rax,rax
   17b58:	je     17b3c <__sprintf_chk@plt+0x13e5c>
   17b5a:	mov    rax,QWORD PTR [rsp+0x8]
   17b5f:	mov    r8,QWORD PTR [rbx+0x18]
   17b63:	add    r8,rax
   17b66:	mov    r14,r8
   17b69:	sub    r14,QWORD PTR [rbx+0x10]
   17b6d:	cmp    rax,r14
   17b70:	jne    17a78 <__sprintf_chk@plt+0x13d98>
   17b76:	mov    rcx,QWORD PTR [r13+0x28]
   17b7a:	lea    rax,[rsi+rsi*2]
   17b7e:	mov    rdi,rbp
   17b81:	lea    rax,[rcx+rax*8]
   17b85:	mov    rax,QWORD PTR [rax+0x10]
   17b89:	mov    r14,QWORD PTR [rax]
   17b8c:	mov    rsi,r14
   17b8f:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   17b94:	test   rax,rax
   17b97:	jne    17b3c <__sprintf_chk@plt+0x13e5c>
   17b99:	mov    QWORD PTR [rsp+0x50],0x1
   17ba2:	mov    edi,0x8
   17ba7:	mov    QWORD PTR [rsp+0x58],0x1
   17bb0:	call   3a70 <malloc@plt>
   17bb5:	mov    QWORD PTR [rsp+0x60],rax
   17bba:	test   rax,rax
   17bbd:	je     17cd0 <__sprintf_chk@plt+0x13ff0>
   17bc3:	mov    QWORD PTR [rax],r14
   17bc6:	xor    eax,eax
   17bc8:	mov    rdx,QWORD PTR [rsp+0x30]
   17bcd:	mov    ecx,DWORD PTR [rsp+0x3c]
   17bd1:	mov    rdi,r13
   17bd4:	mov    DWORD PTR [rsp+0x4c],eax
   17bd8:	lea    r15,[rsp+0x50]
   17bdd:	mov    rsi,r15
   17be0:	call   17370 <__sprintf_chk@plt+0x13690>
   17be5:	mov    rsi,r15
   17be8:	mov    rdi,rbp
   17beb:	mov    r14d,eax
   17bee:	call   13070 <__sprintf_chk@plt+0xf390>
   17bf3:	mov    rdi,QWORD PTR [rsp+0x60]
   17bf8:	mov    ebx,eax
   17bfa:	call   3680 <free@plt>
   17bff:	mov    eax,DWORD PTR [rsp+0x4c]
   17c03:	mov    edx,ebx
   17c05:	or     edx,r14d
   17c08:	or     edx,eax
   17c0a:	je     17a63 <__sprintf_chk@plt+0x13d83>
   17c10:	test   eax,eax
   17c12:	jne    17c72 <__sprintf_chk@plt+0x13f92>
   17c14:	test   r14d,r14d
   17c17:	mov    eax,ebx
   17c19:	cmovne eax,r14d
   17c1d:	jmp    17c72 <__sprintf_chk@plt+0x13f92>
   17c1f:	nop
   17c20:	mov    edi,0x8
   17c25:	mov    QWORD PTR [rsp+0x18],r11
   17c2a:	mov    QWORD PTR [rsp+0x10],r10
   17c2f:	mov    QWORD PTR [rsp+0x50],0x1
   17c38:	mov    QWORD PTR [rsp+0x58],0x1
   17c41:	call   3a70 <malloc@plt>
   17c46:	mov    QWORD PTR [rsp+0x60],rax
   17c4b:	test   rax,rax
   17c4e:	je     17cc2 <__sprintf_chk@plt+0x13fe2>
   17c50:	mov    r10,QWORD PTR [rsp+0x10]
   17c55:	mov    r11,QWORD PTR [rsp+0x18]
   17c5a:	lea    r15,[rsp+0x50]
   17c5f:	mov    DWORD PTR [rsp+0x4c],0x0
   17c67:	mov    QWORD PTR [rax],r10
   17c6a:	jmp    17b02 <__sprintf_chk@plt+0x13e22>
   17c6f:	nop
   17c70:	xor    eax,eax
   17c72:	mov    rcx,QWORD PTR [rsp+0x68]
   17c77:	sub    rcx,QWORD PTR fs:0x28
   17c80:	jne    17cec <__sprintf_chk@plt+0x1400c>
   17c82:	add    rsp,0x78
   17c86:	pop    rbx
   17c87:	pop    rbp
   17c88:	pop    r12
   17c8a:	pop    r13
   17c8c:	pop    r14
   17c8e:	pop    r15
   17c90:	ret    
   17c91:	nop    DWORD PTR [rax+0x0]
   17c98:	mov    eax,DWORD PTR [rsp+0x4c]
   17c9c:	test   eax,eax
   17c9e:	je     17b3c <__sprintf_chk@plt+0x13e5c>
   17ca4:	jmp    17c72 <__sprintf_chk@plt+0x13f92>
   17ca6:	cs nop WORD PTR [rax+rax*1+0x0]
   17cb0:	mov    rdi,QWORD PTR [rsp+0x60]
   17cb5:	call   3680 <free@plt>
   17cba:	mov    eax,DWORD PTR [rsp+0x4c]
   17cbe:	test   eax,eax
   17cc0:	jne    17c72 <__sprintf_chk@plt+0x13f92>
   17cc2:	mov    eax,0xc
   17cc7:	jmp    17c72 <__sprintf_chk@plt+0x13f92>
   17cc9:	nop    DWORD PTR [rax+0x0]
   17cd0:	mov    QWORD PTR [rsp+0x58],0x0
   17cd9:	mov    eax,0xc
   17cde:	mov    QWORD PTR [rsp+0x50],0x0
   17ce7:	jmp    17bc8 <__sprintf_chk@plt+0x13ee8>
   17cec:	call   3840 <__stack_chk_fail@plt>
   17cf1:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   17cfc:	nop    DWORD PTR [rax+0x0]
   17d00:	push   r15
   17d02:	mov    r15,rsi
   17d05:	push   r14
   17d07:	push   r13
   17d09:	push   r12
   17d0b:	mov    r12,rdi
   17d0e:	mov    edi,0x8
   17d13:	push   rbp
   17d14:	push   rbx
   17d15:	sub    rsp,0x68
   17d19:	mov    rbp,QWORD PTR [rsi+0x18]
   17d1d:	mov    rbx,QWORD PTR [rsi+0x10]
   17d21:	mov    rax,QWORD PTR fs:0x28
   17d2a:	mov    QWORD PTR [rsp+0x58],rax
   17d2f:	xor    eax,eax
   17d31:	mov    QWORD PTR [rsp+0x40],0x1
   17d3a:	mov    QWORD PTR [rsp+0x48],0x1
   17d43:	call   3a70 <malloc@plt>
   17d48:	mov    QWORD PTR [rsp+0x50],rax
   17d4d:	test   rax,rax
   17d50:	je     18008 <__sprintf_chk@plt+0x14328>
   17d56:	mov    QWORD PTR [rax],rbx
   17d59:	lea    rcx,[rsp+0x40]
   17d5e:	mov    rdx,rbp
   17d61:	mov    rsi,r15
   17d64:	mov    rdi,r12
   17d67:	mov    QWORD PTR [rsp+0x8],rcx
   17d6c:	call   18020 <__sprintf_chk@plt+0x14340>
   17d71:	test   eax,eax
   17d73:	jne    17f80 <__sprintf_chk@plt+0x142a0>
   17d79:	lea    rax,[r15+0x20]
   17d7d:	mov    DWORD PTR [rsp+0x3c],0x0
   17d85:	mov    QWORD PTR [rsp+0x30],rax
   17d8a:	mov    QWORD PTR [rsp],r15
   17d8e:	test   rbp,rbp
   17d91:	jle    18001 <__sprintf_chk@plt+0x14321>
   17d97:	mov    rax,QWORD PTR [rsp]
   17d9b:	mov    rdi,QWORD PTR [rax]
   17d9e:	lea    rax,[rbp*8+0x0]
   17da6:	mov    QWORD PTR [rsp+0x10],rax
   17dab:	cmp    QWORD PTR [rdi+rbp*8],0x0
   17db0:	je     17fd0 <__sprintf_chk@plt+0x142f0>
   17db6:	mov    DWORD PTR [rsp+0x3c],0x0
   17dbe:	mov    eax,DWORD PTR [rsp+0x3c]
   17dc2:	cmp    DWORD PTR [r12+0xe0],eax
   17dca:	jl     17fe7 <__sprintf_chk@plt+0x14307>
   17dd0:	mov    rax,QWORD PTR [r12+0xb8]
   17dd8:	mov    rdx,QWORD PTR [rsp+0x10]
   17ddd:	sub    rbp,0x1
   17de1:	mov    QWORD PTR [rsp+0x48],0x0
   17dea:	mov    r13,QWORD PTR [rax+rdx*1-0x8]
   17def:	test   r13,r13
   17df2:	je     17f60 <__sprintf_chk@plt+0x14280>
   17df8:	cmp    QWORD PTR [r13+0x28],0x0
   17dfd:	mov    r14,QWORD PTR [r12+0x98]
   17e05:	jle    17f60 <__sprintf_chk@plt+0x14280>
   17e0b:	xor    ebx,ebx
   17e0d:	jmp    17eab <__sprintf_chk@plt+0x141cb>
   17e12:	nop    WORD PTR [rax+rax*1+0x0]
   17e18:	mov    rdx,rbp
   17e1b:	mov    rdi,r12
   17e1e:	call   14080 <__sprintf_chk@plt+0x103a0>
   17e23:	test   al,al
   17e25:	je     17e9d <__sprintf_chk@plt+0x141bd>
   17e27:	mov    rax,QWORD PTR [rsp]
   17e2b:	mov    rcx,QWORD PTR [rsp+0x10]
   17e30:	mov    rax,QWORD PTR [rax]
   17e33:	mov    rdi,QWORD PTR [rax+rcx*1]
   17e37:	test   rdi,rdi
   17e3a:	je     17e9d <__sprintf_chk@plt+0x141bd>
   17e3c:	mov    rax,QWORD PTR [r14+0x18]
   17e40:	add    rdi,0x8
   17e44:	mov    rsi,QWORD PTR [rax+r15*8]
   17e48:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   17e4d:	test   rax,rax
   17e50:	je     17e9d <__sprintf_chk@plt+0x141bd>
   17e52:	mov    r9d,0x1
   17e58:	mov    rax,QWORD PTR [rsp]
   17e5c:	cmp    QWORD PTR [rax+0x28],0x0
   17e61:	je     17e88 <__sprintf_chk@plt+0x141a8>
   17e63:	mov    rax,QWORD PTR [r14+0x18]
   17e67:	movsxd rcx,r9d
   17e6a:	mov    rsi,QWORD PTR [rsp+0x30]
   17e6f:	mov    r9,rbp
   17e72:	add    rcx,rbp
   17e75:	mov    r8,r15
   17e78:	mov    rdi,r12
   17e7b:	mov    rdx,QWORD PTR [rax+r15*8]
   17e7f:	call   163e0 <__sprintf_chk@plt+0x12700>
   17e84:	test   al,al
   17e86:	jne    17e9d <__sprintf_chk@plt+0x141bd>
   17e88:	mov    rdi,QWORD PTR [rsp+0x8]
   17e8d:	mov    rsi,r15
   17e90:	call   17170 <__sprintf_chk@plt+0x13490>
   17e95:	test   al,al
   17e97:	je     17fc0 <__sprintf_chk@plt+0x142e0>
   17e9d:	add    rbx,0x1
   17ea1:	cmp    rbx,QWORD PTR [r13+0x28]
   17ea5:	jge    17f60 <__sprintf_chk@plt+0x14280>
   17eab:	mov    rax,QWORD PTR [r13+0x30]
   17eaf:	mov    rsi,QWORD PTR [r14]
   17eb2:	mov    r15,QWORD PTR [rax+rbx*8]
   17eb6:	mov    r10,r15
   17eb9:	shl    r10,0x4
   17ebd:	add    rsi,r10
   17ec0:	test   BYTE PTR [rsi+0xa],0x10
   17ec4:	je     17e18 <__sprintf_chk@plt+0x14138>
   17eca:	mov    rax,QWORD PTR [rsp]
   17ece:	mov    rdx,r12
   17ed1:	mov    rsi,r15
   17ed4:	mov    QWORD PTR [rsp+0x18],r10
   17ed9:	mov    rdi,QWORD PTR [r12+0x98]
   17ee1:	mov    rcx,QWORD PTR [rax+0x18]
   17ee5:	mov    QWORD PTR [rsp+0x28],rdi
   17eea:	mov    QWORD PTR [rsp+0x20],rcx
   17eef:	mov    rcx,rbp
   17ef2:	call   16590 <__sprintf_chk@plt+0x128b0>
   17ef7:	mov    r10,QWORD PTR [rsp+0x18]
   17efc:	test   eax,eax
   17efe:	mov    r9d,eax
   17f01:	jle    17fb0 <__sprintf_chk@plt+0x142d0>
   17f07:	cdqe   
   17f09:	add    rax,rbp
   17f0c:	cmp    QWORD PTR [rsp+0x20],rax
   17f11:	jl     17e58 <__sprintf_chk@plt+0x14178>
   17f17:	mov    rdx,QWORD PTR [rsp]
   17f1b:	mov    rdi,QWORD PTR [rsp+0x28]
   17f20:	mov    rdx,QWORD PTR [rdx]
   17f23:	mov    rax,QWORD PTR [rdx+rax*8]
   17f27:	test   rax,rax
   17f2a:	je     17f50 <__sprintf_chk@plt+0x14270>
   17f2c:	mov    rdx,QWORD PTR [rdi+0x18]
   17f30:	lea    rdi,[rax+0x8]
   17f34:	mov    rsi,QWORD PTR [rdx+r15*8]
   17f38:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   17f3d:	test   rax,rax
   17f40:	jne    17e58 <__sprintf_chk@plt+0x14178>
   17f46:	cs nop WORD PTR [rax+rax*1+0x0]
   17f50:	mov    rsi,QWORD PTR [r14]
   17f53:	add    rsi,r10
   17f56:	jmp    17e18 <__sprintf_chk@plt+0x14138>
   17f5b:	nop    DWORD PTR [rax+rax*1+0x0]
   17f60:	mov    rcx,QWORD PTR [rsp+0x8]
   17f65:	mov    rsi,QWORD PTR [rsp]
   17f69:	mov    rdx,rbp
   17f6c:	mov    rdi,r12
   17f6f:	call   18020 <__sprintf_chk@plt+0x14340>
   17f74:	test   eax,eax
   17f76:	je     17d8e <__sprintf_chk@plt+0x140ae>
   17f7c:	nop    DWORD PTR [rax+0x0]
   17f80:	mov    rdi,QWORD PTR [rsp+0x50]
   17f85:	mov    DWORD PTR [rsp],eax
   17f88:	call   3680 <free@plt>
   17f8d:	mov    eax,DWORD PTR [rsp]
   17f90:	mov    rdx,QWORD PTR [rsp+0x58]
   17f95:	sub    rdx,QWORD PTR fs:0x28
   17f9e:	jne    18012 <__sprintf_chk@plt+0x14332>
   17fa0:	add    rsp,0x68
   17fa4:	pop    rbx
   17fa5:	pop    rbp
   17fa6:	pop    r12
   17fa8:	pop    r13
   17faa:	pop    r14
   17fac:	pop    r15
   17fae:	ret    
   17faf:	nop
   17fb0:	je     17f50 <__sprintf_chk@plt+0x14270>
   17fb2:	jmp    17e58 <__sprintf_chk@plt+0x14178>
   17fb7:	nop    WORD PTR [rax+rax*1+0x0]
   17fc0:	mov    eax,0xc
   17fc5:	jmp    17f80 <__sprintf_chk@plt+0x142a0>
   17fc7:	nop    WORD PTR [rax+rax*1+0x0]
   17fd0:	add    DWORD PTR [rsp+0x3c],0x1
   17fd5:	mov    eax,DWORD PTR [rsp+0x3c]
   17fd9:	cmp    DWORD PTR [r12+0xe0],eax
   17fe1:	jge    17dd0 <__sprintf_chk@plt+0x140f0>
   17fe7:	mov    rdx,QWORD PTR [rsp+0x10]
   17fec:	xor    esi,esi
   17fee:	call   3900 <memset@plt>
   17ff3:	mov    rdi,QWORD PTR [rsp+0x50]
   17ff8:	call   3680 <free@plt>
   17ffd:	xor    eax,eax
   17fff:	jmp    17f90 <__sprintf_chk@plt+0x142b0>
   18001:	xor    eax,eax
   18003:	jmp    17f80 <__sprintf_chk@plt+0x142a0>
   18008:	mov    eax,0xc
   1800d:	jmp    17f90 <__sprintf_chk@plt+0x142b0>
   18012:	call   3840 <__stack_chk_fail@plt>
   18017:	nop    WORD PTR [rax+rax*1+0x0]
   18020:	push   r15
   18022:	push   r14
   18024:	push   r13
   18026:	push   r12
   18028:	mov    r12,rcx
   1802b:	push   rbp
   1802c:	mov    rbp,rdx
   1802f:	push   rbx
   18030:	mov    rbx,rsi
   18033:	sub    rsp,0xa8
   1803a:	mov    r13,QWORD PTR [rdi+0x98]
   18041:	mov    QWORD PTR [rsp+0x8],rdi
   18046:	mov    rax,QWORD PTR fs:0x28
   1804f:	mov    QWORD PTR [rsp+0x98],rax
   18057:	xor    eax,eax
   18059:	lea    rax,[rdx*8+0x0]
   18061:	mov    rdx,QWORD PTR [r12+0x8]
   18066:	mov    DWORD PTR [rsp+0x5c],0x0
   1806e:	mov    QWORD PTR [rsp+0x18],rax
   18073:	add    rax,QWORD PTR [rdi+0xb8]
   1807a:	mov    rcx,QWORD PTR [rax]
   1807d:	mov    QWORD PTR [rsp+0x10],rcx
   18082:	test   rcx,rcx
   18085:	je     184b0 <__sprintf_chk@plt+0x147d0>
   1808b:	test   rdx,rdx
   1808e:	jne    180e0 <__sprintf_chk@plt+0x14400>
   18090:	mov    rdx,QWORD PTR [rsi]
   18093:	mov    QWORD PTR [rdx+rbp*8],0x0
   1809b:	mov    rdx,QWORD PTR [rax]
   1809e:	xor    eax,eax
   180a0:	test   BYTE PTR [rdx+0x68],0x40
   180a4:	jne    18212 <__sprintf_chk@plt+0x14532>
   180aa:	nop    WORD PTR [rax+rax*1+0x0]
   180b0:	mov    rbx,QWORD PTR [rsp+0x98]
   180b8:	sub    rbx,QWORD PTR fs:0x28
   180c1:	jne    187de <__sprintf_chk@plt+0x14afe>
   180c7:	add    rsp,0xa8
   180ce:	pop    rbx
   180cf:	pop    rbp
   180d0:	pop    r12
   180d2:	pop    r13
   180d4:	pop    r14
   180d6:	pop    r15
   180d8:	ret    
   180d9:	nop    DWORD PTR [rax+0x0]
   180e0:	mov    rdx,r12
   180e3:	lea    rdi,[rsp+0x60]
   180e8:	mov    rsi,r13
   180eb:	mov    DWORD PTR [rsp+0x60],0x0
   180f3:	call   16ca0 <__sprintf_chk@plt+0x12fc0>
   180f8:	mov    rdx,rax
   180fb:	mov    eax,DWORD PTR [rsp+0x60]
   180ff:	test   eax,eax
   18101:	jne    180b0 <__sprintf_chk@plt+0x143d0>
   18103:	mov    r14,QWORD PTR [rdx+0x38]
   18107:	lea    r15,[rdx+0x38]
   1810b:	test   r14,r14
   1810e:	jne    18198 <__sprintf_chk@plt+0x144b8>
   18114:	mov    rdi,QWORD PTR [r12+0x8]
   18119:	mov    QWORD PTR [rdx+0x40],0x0
   18121:	mov    QWORD PTR [rsp],rdx
   18125:	mov    QWORD PTR [rdx+0x38],rdi
   18129:	shl    rdi,0x3
   1812d:	call   3a70 <malloc@plt>
   18132:	mov    rdx,QWORD PTR [rsp]
   18136:	mov    QWORD PTR [rdx+0x48],rax
   1813a:	test   rax,rax
   1813d:	je     18188 <__sprintf_chk@plt+0x144a8>
   1813f:	cmp    QWORD PTR [r12+0x8],0x0
   18145:	mov    DWORD PTR [rsp+0x60],0x0
   1814d:	jg     18163 <__sprintf_chk@plt+0x14483>
   1814f:	jmp    18198 <__sprintf_chk@plt+0x144b8>
   18151:	nop    DWORD PTR [rax+0x0]
   18158:	add    r14,0x1
   1815c:	cmp    r14,QWORD PTR [r12+0x8]
   18161:	jge    18198 <__sprintf_chk@plt+0x144b8>
   18163:	mov    rax,QWORD PTR [r12+0x10]
   18168:	mov    rdi,r15
   1816b:	mov    rax,QWORD PTR [rax+r14*8]
   1816f:	lea    rdx,[rax+rax*2]
   18173:	mov    rax,QWORD PTR [r13+0x38]
   18177:	lea    rsi,[rax+rdx*8]
   1817b:	call   13070 <__sprintf_chk@plt+0xf390>
   18180:	mov    DWORD PTR [rsp+0x60],eax
   18184:	test   eax,eax
   18186:	je     18158 <__sprintf_chk@plt+0x14478>
   18188:	mov    eax,0xc
   1818d:	jmp    180b0 <__sprintf_chk@plt+0x143d0>
   18192:	nop    WORD PTR [rax+rax*1+0x0]
   18198:	mov    rax,QWORD PTR [rsp+0x10]
   1819d:	mov    rdx,r15
   181a0:	mov    rdi,r12
   181a3:	add    rax,0x8
   181a7:	mov    rsi,rax
   181aa:	mov    QWORD PTR [rsp+0x28],rax
   181af:	call   13240 <__sprintf_chk@plt+0xf560>
   181b4:	mov    DWORD PTR [rsp+0x5c],eax
   181b8:	test   eax,eax
   181ba:	jne    180b0 <__sprintf_chk@plt+0x143d0>
   181c0:	cmp    QWORD PTR [rbx+0x28],0x0
   181c5:	jne    18598 <__sprintf_chk@plt+0x148b8>
   181cb:	lea    rdi,[rsp+0x5c]
   181d0:	mov    rdx,r12
   181d3:	mov    rsi,r13
   181d6:	mov    r14,QWORD PTR [rsp+0x18]
   181db:	add    r14,QWORD PTR [rbx]
   181de:	call   16ca0 <__sprintf_chk@plt+0x12fc0>
   181e3:	mov    QWORD PTR [r14],rax
   181e6:	mov    eax,DWORD PTR [rsp+0x5c]
   181ea:	test   eax,eax
   181ec:	jne    180b0 <__sprintf_chk@plt+0x143d0>
   181f2:	mov    rsi,QWORD PTR [rsp+0x8]
   181f7:	mov    rax,QWORD PTR [rsp+0x18]
   181fc:	add    rax,QWORD PTR [rsi+0xb8]
   18203:	mov    rdx,QWORD PTR [rax]
   18206:	xor    eax,eax
   18208:	test   BYTE PTR [rdx+0x68],0x40
   1820c:	je     180b0 <__sprintf_chk@plt+0x143d0>
   18212:	mov    rdi,QWORD PTR [rsp+0x8]
   18217:	mov    rsi,rbp
   1821a:	call   12970 <__sprintf_chk@plt+0xec90>
   1821f:	mov    QWORD PTR [rsp+0x40],rax
   18224:	cmp    rax,0xffffffffffffffff
   18228:	je     184f8 <__sprintf_chk@plt+0x14818>
   1822e:	mov    QWORD PTR [rsp+0x60],0x0
   18237:	mov    rax,QWORD PTR [rsp+0x8]
   1823c:	mov    r15,QWORD PTR [rax+0x98]
   18243:	mov    rax,QWORD PTR [rsp+0x10]
   18248:	cmp    QWORD PTR [rax+0x10],0x0
   1824d:	jle    184f8 <__sprintf_chk@plt+0x14818>
   18253:	mov    rax,QWORD PTR [rsp+0x40]
   18258:	mov    QWORD PTR [rsp],0x0
   18260:	mov    r14,rbx
   18263:	lea    rax,[rax+rax*2]
   18267:	shl    rax,0x4
   1826b:	mov    QWORD PTR [rsp+0x48],rax
   18270:	lea    rax,[rbx+0x20]
   18274:	mov    QWORD PTR [rsp+0x30],rax
   18279:	jmp    1829c <__sprintf_chk@plt+0x145bc>
   1827b:	nop    DWORD PTR [rax+rax*1+0x0]
   18280:	cmp    al,0x4
   18282:	je     182cb <__sprintf_chk@plt+0x145eb>
   18284:	mov    rbx,QWORD PTR [rsp+0x10]
   18289:	add    QWORD PTR [rsp],0x1
   1828e:	mov    rax,QWORD PTR [rsp]
   18292:	cmp    rax,QWORD PTR [rbx+0x10]
   18296:	jge    184ec <__sprintf_chk@plt+0x1480c>
   1829c:	mov    rax,QWORD PTR [rsp+0x10]
   182a1:	mov    rbx,QWORD PTR [rsp]
   182a5:	mov    rax,QWORD PTR [rax+0x18]
   182a9:	mov    r13,QWORD PTR [rax+rbx*8]
   182ad:	mov    rax,r13
   182b0:	shl    rax,0x4
   182b4:	add    rax,QWORD PTR [r15]
   182b7:	movzx  eax,BYTE PTR [rax+0x8]
   182bb:	cmp    r13,QWORD PTR [r14+0x10]
   182bf:	jne    18280 <__sprintf_chk@plt+0x145a0>
   182c1:	cmp    rbp,QWORD PTR [r14+0x18]
   182c5:	je     18284 <__sprintf_chk@plt+0x145a4>
   182c7:	cmp    al,0x4
   182c9:	jne    18284 <__sprintf_chk@plt+0x145a4>
   182cb:	mov    rax,QWORD PTR [rsp+0x8]
   182d0:	mov    rbx,QWORD PTR [rsp+0x48]
   182d5:	mov    r12,QWORD PTR [rsp+0x40]
   182da:	add    rbx,QWORD PTR [rax+0xd8]
   182e1:	lea    rax,[r13+r13*2+0x0]
   182e6:	shl    rax,0x3
   182ea:	mov    QWORD PTR [rsp+0x28],rax
   182ef:	lea    rax,[r13*8+0x0]
   182f7:	mov    QWORD PTR [rsp+0x20],rax
   182fc:	mov    rax,r14
   182ff:	mov    r14,r12
   18302:	mov    r12,rbx
   18305:	mov    rbx,rax
   18308:	nop    DWORD PTR [rax+rax*1+0x0]
   18310:	cmp    r13,QWORD PTR [r12]
   18314:	jne    18500 <__sprintf_chk@plt+0x14820>
   1831a:	mov    rax,QWORD PTR [r12+0x18]
   1831f:	sub    rax,QWORD PTR [r12+0x10]
   18324:	lea    r9,[rbp+rax*1+0x0]
   18329:	je     18508 <__sprintf_chk@plt+0x14828>
   1832f:	mov    rax,QWORD PTR [r15+0x18]
   18333:	mov    rcx,QWORD PTR [rsp+0x20]
   18338:	mov    r8,QWORD PTR [rax+rcx*1]
   1833c:	cmp    r9,QWORD PTR [rbx+0x18]
   18340:	jg     18500 <__sprintf_chk@plt+0x14820>
   18346:	mov    rax,QWORD PTR [rbx]
   18349:	mov    rdi,QWORD PTR [rax+r9*8]
   1834d:	test   rdi,rdi
   18350:	je     18500 <__sprintf_chk@plt+0x14820>
   18356:	add    rdi,0x8
   1835a:	mov    rsi,r8
   1835d:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   18362:	test   rax,rax
   18365:	je     18500 <__sprintf_chk@plt+0x14820>
   1836b:	mov    rsi,QWORD PTR [rsp+0x30]
   18370:	mov    rdi,QWORD PTR [rsp+0x8]
   18375:	mov    rcx,rbp
   18378:	mov    rdx,r13
   1837b:	call   163e0 <__sprintf_chk@plt+0x12700>
   18380:	test   al,al
   18382:	jne    18500 <__sprintf_chk@plt+0x14820>
   18388:	cmp    QWORD PTR [rsp+0x60],0x0
   1838e:	je     18520 <__sprintf_chk@plt+0x14840>
   18394:	lea    r12,[rsp+0x80]
   1839c:	lea    r8,[rsp+0x60]
   183a1:	mov    rsi,r14
   183a4:	mov    rdi,r12
   183a7:	mov    QWORD PTR [rsp+0x70],r13
   183ac:	mov    QWORD PTR [rsp+0x38],r8
   183b1:	mov    QWORD PTR [rsp+0x78],rbp
   183b6:	call   17170 <__sprintf_chk@plt+0x13490>
   183bb:	mov    r8,QWORD PTR [rsp+0x38]
   183c0:	test   al,al
   183c2:	je     187ca <__sprintf_chk@plt+0x14aea>
   183c8:	mov    rsi,QWORD PTR [rsp+0x18]
   183cd:	mov    rax,QWORD PTR [rsp+0x60]
   183d2:	mov    rdi,QWORD PTR [rsp+0x8]
   183d7:	mov    rax,QWORD PTR [rax+rsi*1]
   183db:	mov    rsi,r8
   183de:	mov    QWORD PTR [rsp+0x38],rax
   183e3:	call   17d00 <__sprintf_chk@plt+0x14020>
   183e8:	test   eax,eax
   183ea:	jne    18570 <__sprintf_chk@plt+0x14890>
   183f0:	mov    rsi,QWORD PTR [rbx+0x8]
   183f4:	mov    rdx,QWORD PTR [rsp+0x60]
   183f9:	test   rsi,rsi
   183fc:	je     18417 <__sprintf_chk@plt+0x14737>
   183fe:	lea    rcx,[rbp+0x1]
   18402:	mov    rdi,r15
   18405:	call   16ea0 <__sprintf_chk@plt+0x131c0>
   1840a:	test   eax,eax
   1840c:	jne    18570 <__sprintf_chk@plt+0x14890>
   18412:	mov    rdx,QWORD PTR [rsp+0x60]
   18417:	mov    rax,QWORD PTR [rsp+0x18]
   1841c:	mov    rcx,QWORD PTR [rsp+0x38]
   18421:	mov    rsi,r14
   18424:	mov    rdi,r12
   18427:	mov    QWORD PTR [rdx+rax*1],rcx
   1842b:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   18430:	mov    rdx,rax
   18433:	sub    rax,0x1
   18437:	js     18477 <__sprintf_chk@plt+0x14797>
   18439:	mov    rcx,QWORD PTR [rsp+0x88]
   18441:	cmp    rax,rcx
   18444:	jge    18477 <__sprintf_chk@plt+0x14797>
   18446:	lea    rsi,[rcx-0x1]
   1844a:	mov    QWORD PTR [rsp+0x88],rsi
   18452:	cmp    rdx,rcx
   18455:	jge    18477 <__sprintf_chk@plt+0x14797>
   18457:	mov    rdx,QWORD PTR [rsp+0x90]
   1845f:	nop
   18460:	mov    rcx,QWORD PTR [rdx+rax*8+0x8]
   18465:	mov    QWORD PTR [rdx+rax*8],rcx
   18469:	add    rax,0x1
   1846d:	cmp    rax,QWORD PTR [rsp+0x88]
   18475:	jl     18460 <__sprintf_chk@plt+0x14780>
   18477:	mov    rsi,QWORD PTR [rsp+0x8]
   1847c:	lea    rax,[r14+r14*2]
   18480:	shl    rax,0x4
   18484:	add    rax,QWORD PTR [rsi+0xd8]
   1848b:	nop    DWORD PTR [rax+rax*1+0x0]
   18490:	add    r14,0x1
   18494:	cmp    BYTE PTR [rax+0x28],0x0
   18498:	lea    r12,[rax+0x30]
   1849c:	jne    18310 <__sprintf_chk@plt+0x14630>
   184a2:	mov    r14,rbx
   184a5:	jmp    18284 <__sprintf_chk@plt+0x145a4>
   184aa:	nop    WORD PTR [rax+rax*1+0x0]
   184b0:	mov    rax,QWORD PTR [rsp+0x18]
   184b5:	add    rax,QWORD PTR [rsi]
   184b8:	mov    rbx,rax
   184bb:	test   rdx,rdx
   184be:	jne    184d0 <__sprintf_chk@plt+0x147f0>
   184c0:	mov    QWORD PTR [rax],0x0
   184c7:	xor    eax,eax
   184c9:	jmp    180b0 <__sprintf_chk@plt+0x143d0>
   184ce:	xchg   ax,ax
   184d0:	lea    rdi,[rsp+0x5c]
   184d5:	mov    rdx,r12
   184d8:	mov    rsi,r13
   184db:	call   16ca0 <__sprintf_chk@plt+0x12fc0>
   184e0:	mov    QWORD PTR [rbx],rax
   184e3:	mov    eax,DWORD PTR [rsp+0x5c]
   184e7:	jmp    180b0 <__sprintf_chk@plt+0x143d0>
   184ec:	cmp    QWORD PTR [rsp+0x60],0x0
   184f2:	jne    187e3 <__sprintf_chk@plt+0x14b03>
   184f8:	xor    eax,eax
   184fa:	jmp    180b0 <__sprintf_chk@plt+0x143d0>
   184ff:	nop
   18500:	mov    rax,r12
   18503:	jmp    18490 <__sprintf_chk@plt+0x147b0>
   18505:	nop    DWORD PTR [rax]
   18508:	mov    rax,QWORD PTR [r15+0x28]
   1850c:	mov    rcx,QWORD PTR [rsp+0x28]
   18511:	mov    rax,QWORD PTR [rax+rcx*1+0x10]
   18516:	mov    r8,QWORD PTR [rax]
   18519:	jmp    1833c <__sprintf_chk@plt+0x1465c>
   1851e:	xchg   ax,ax
   18520:	movdqu xmm0,XMMWORD PTR [rbx]
   18524:	mov    rax,QWORD PTR [rbx+0x30]
   18528:	lea    r12,[rsp+0x80]
   18530:	movdqu xmm1,XMMWORD PTR [rbx+0x10]
   18535:	movdqu xmm2,XMMWORD PTR [rbx+0x20]
   1853a:	mov    rdi,r12
   1853d:	mov    rsi,QWORD PTR [rsp+0x30]
   18542:	mov    QWORD PTR [rsp+0x90],rax
   1854a:	movups XMMWORD PTR [rsp+0x60],xmm0
   1854f:	movups XMMWORD PTR [rsp+0x70],xmm1
   18554:	movups XMMWORD PTR [rsp+0x80],xmm2
   1855c:	call   133e0 <__sprintf_chk@plt+0xf700>
   18561:	test   eax,eax
   18563:	je     1839c <__sprintf_chk@plt+0x146bc>
   18569:	nop    DWORD PTR [rax+0x0]
   18570:	cmp    QWORD PTR [rsp+0x60],0x0
   18576:	je     180b0 <__sprintf_chk@plt+0x143d0>
   1857c:	mov    rdi,QWORD PTR [rsp+0x90]
   18584:	mov    DWORD PTR [rsp],eax
   18587:	call   3680 <free@plt>
   1858c:	mov    eax,DWORD PTR [rsp]
   1858f:	jmp    180b0 <__sprintf_chk@plt+0x143d0>
   18594:	nop    DWORD PTR [rax+0x0]
   18598:	mov    rax,QWORD PTR [rsp+0x8]
   1859d:	mov    rax,QWORD PTR [rax+0xd8]
   185a4:	mov    QWORD PTR [rsp+0x20],rax
   185a9:	jle    18695 <__sprintf_chk@plt+0x149b5>
   185af:	mov    QWORD PTR [rsp],rbp
   185b3:	xor    r14d,r14d
   185b6:	cs nop WORD PTR [rax+rax*1+0x0]
   185c0:	mov    rax,QWORD PTR [rbx+0x30]
   185c4:	mov    rdi,QWORD PTR [rsp]
   185c8:	mov    rax,QWORD PTR [rax+r14*8]
   185cc:	lea    rdx,[rax+rax*2]
   185d0:	shl    rdx,0x4
   185d4:	add    rdx,QWORD PTR [rsp+0x20]
   185d9:	cmp    rdi,QWORD PTR [rdx+0x10]
   185dd:	jle    18683 <__sprintf_chk@plt+0x149a3>
   185e3:	cmp    rdi,QWORD PTR [rdx+0x8]
   185e7:	jg     18683 <__sprintf_chk@plt+0x149a3>
   185ed:	mov    rcx,QWORD PTR [rdx]
   185f0:	mov    rax,QWORD PTR [r13+0x0]
   185f4:	mov    rsi,QWORD PTR [r12+0x8]
   185f9:	shl    rcx,0x4
   185fd:	mov    r15,QWORD PTR [rax+rcx*1]
   18601:	cmp    rdi,QWORD PTR [rdx+0x18]
   18605:	je     186a8 <__sprintf_chk@plt+0x149c8>
   1860b:	xor    ebp,ebp
   1860d:	test   rsi,rsi
   18610:	jle    18683 <__sprintf_chk@plt+0x149a3>
   18612:	mov    rcx,rbp
   18615:	mov    rbp,r13
   18618:	mov    r13,r15
   1861b:	mov    r15,rcx
   1861e:	jmp    1862f <__sprintf_chk@plt+0x1494f>
   18620:	add    r15,0x1
   18624:	cmp    r15,QWORD PTR [r12+0x8]
   18629:	jge    18680 <__sprintf_chk@plt+0x149a0>
   1862b:	mov    rax,QWORD PTR [rbp+0x0]
   1862f:	mov    rdx,QWORD PTR [r12+0x10]
   18634:	mov    rsi,QWORD PTR [rdx+r15*8]
   18638:	mov    rdx,rsi
   1863b:	shl    rdx,0x4
   1863f:	add    rax,rdx
   18642:	movzx  edx,BYTE PTR [rax+0x8]
   18646:	sub    edx,0x8
   18649:	cmp    edx,0x1
   1864c:	ja     18620 <__sprintf_chk@plt+0x14940>
   1864e:	cmp    r13,QWORD PTR [rax]
   18651:	jne    18620 <__sprintf_chk@plt+0x14940>
   18653:	mov    rcx,QWORD PTR [rsp+0x28]
   18658:	mov    rdx,r12
   1865b:	mov    rdi,rbp
   1865e:	call   16f70 <__sprintf_chk@plt+0x13290>
   18663:	test   eax,eax
   18665:	jne    180b0 <__sprintf_chk@plt+0x143d0>
   1866b:	add    r15,0x1
   1866f:	cmp    r15,QWORD PTR [r12+0x8]
   18674:	jl     1862b <__sprintf_chk@plt+0x1494b>
   18676:	cs nop WORD PTR [rax+rax*1+0x0]
   18680:	mov    r13,rbp
   18683:	add    r14,0x1
   18687:	cmp    r14,QWORD PTR [rbx+0x28]
   1868b:	jl     185c0 <__sprintf_chk@plt+0x148e0>
   18691:	mov    rbp,QWORD PTR [rsp]
   18695:	mov    DWORD PTR [rsp+0x5c],0x0
   1869d:	jmp    181cb <__sprintf_chk@plt+0x144eb>
   186a2:	nop    WORD PTR [rax+rax*1+0x0]
   186a8:	test   rsi,rsi
   186ab:	jle    18683 <__sprintf_chk@plt+0x149a3>
   186ad:	mov    r10,QWORD PTR [r12+0x10]
   186b2:	mov    rbp,0xffffffffffffffff
   186b9:	mov    r9,0xffffffffffffffff
   186c0:	mov    rcx,r10
   186c3:	lea    r11,[r10+rsi*8]
   186c7:	jmp    186e5 <__sprintf_chk@plt+0x14a05>
   186c9:	nop    DWORD PTR [rax+0x0]
   186d0:	cmp    esi,0x9
   186d3:	jne    186dc <__sprintf_chk@plt+0x149fc>
   186d5:	cmp    r15,QWORD PTR [rdx]
   186d8:	cmove  rbp,rdi
   186dc:	add    rcx,0x8
   186e0:	cmp    r11,rcx
   186e3:	je     1870b <__sprintf_chk@plt+0x14a2b>
   186e5:	mov    rdi,QWORD PTR [rcx]
   186e8:	mov    rdx,rdi
   186eb:	shl    rdx,0x4
   186ef:	add    rdx,rax
   186f2:	movzx  esi,BYTE PTR [rdx+0x8]
   186f6:	cmp    esi,0x8
   186f9:	jne    186d0 <__sprintf_chk@plt+0x149f0>
   186fb:	cmp    r15,QWORD PTR [rdx]
   186fe:	cmove  r9,rdi
   18702:	add    rcx,0x8
   18706:	cmp    r11,rcx
   18709:	jne    186e5 <__sprintf_chk@plt+0x14a05>
   1870b:	test   r9,r9
   1870e:	jns    18790 <__sprintf_chk@plt+0x14ab0>
   18714:	test   rbp,rbp
   18717:	js     18683 <__sprintf_chk@plt+0x149a3>
   1871d:	xor    r15d,r15d
   18720:	mov    QWORD PTR [rsp+0x30],rbx
   18725:	mov    rbx,r15
   18728:	mov    r15,QWORD PTR [rsp+0x28]
   1872d:	jmp    18744 <__sprintf_chk@plt+0x14a64>
   1872f:	nop
   18730:	add    rbx,0x1
   18734:	cmp    QWORD PTR [r12+0x8],rbx
   18739:	jle    187d4 <__sprintf_chk@plt+0x14af4>
   1873f:	mov    r10,QWORD PTR [r12+0x10]
   18744:	mov    r10,QWORD PTR [r10+rbx*8]
   18748:	mov    rdi,QWORD PTR [r13+0x38]
   1874c:	mov    rsi,rbp
   1874f:	lea    r8,[r10+r10*2]
   18753:	shl    r8,0x3
   18757:	add    rdi,r8
   1875a:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   1875f:	test   rax,rax
   18762:	jne    18730 <__sprintf_chk@plt+0x14a50>
   18764:	mov    rdi,QWORD PTR [r13+0x30]
   18768:	add    rdi,r8
   1876b:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   18770:	test   rax,rax
   18773:	jne    18730 <__sprintf_chk@plt+0x14a50>
   18775:	mov    rcx,r15
   18778:	mov    rdx,r12
   1877b:	mov    rsi,r10
   1877e:	mov    rdi,r13
   18781:	call   16f70 <__sprintf_chk@plt+0x13290>
   18786:	test   eax,eax
   18788:	je     18734 <__sprintf_chk@plt+0x14a54>
   1878a:	jmp    180b0 <__sprintf_chk@plt+0x143d0>
   1878f:	nop
   18790:	mov    rcx,QWORD PTR [rsp+0x28]
   18795:	mov    rdx,r12
   18798:	mov    rsi,r9
   1879b:	mov    rdi,r13
   1879e:	call   16f70 <__sprintf_chk@plt+0x13290>
   187a3:	test   eax,eax
   187a5:	jne    180b0 <__sprintf_chk@plt+0x143d0>
   187ab:	test   rbp,rbp
   187ae:	js     18683 <__sprintf_chk@plt+0x149a3>
   187b4:	cmp    QWORD PTR [r12+0x8],0x0
   187ba:	jle    18683 <__sprintf_chk@plt+0x149a3>
   187c0:	mov    r10,QWORD PTR [r12+0x10]
   187c5:	jmp    1871d <__sprintf_chk@plt+0x14a3d>
   187ca:	mov    eax,0xc
   187cf:	jmp    18570 <__sprintf_chk@plt+0x14890>
   187d4:	mov    rbx,QWORD PTR [rsp+0x30]
   187d9:	jmp    18683 <__sprintf_chk@plt+0x149a3>
   187de:	call   3840 <__stack_chk_fail@plt>
   187e3:	xor    eax,eax
   187e5:	jmp    1857c <__sprintf_chk@plt+0x1489c>
   187ea:	nop    WORD PTR [rax+rax*1+0x0]
   187f0:	movabs rdx,0xffffffffffffffe
   187fa:	push   r12
   187fc:	movsxd rax,esi
   187ff:	push   rbp
   18800:	sub    rsp,0x8
   18804:	mov    rsi,QWORD PTR [rdi+0x40]
   18808:	cmp    rsi,rdx
   1880b:	ja     18920 <__sprintf_chk@plt+0x14c40>
   18811:	mov    rdx,QWORD PTR [rdi+0x58]
   18815:	add    rsi,rsi
   18818:	mov    rbp,rdi
   1881b:	cmp    rsi,rdx
   1881e:	cmovg  rsi,rdx
   18822:	cmp    rsi,rax
   18825:	cmovl  rsi,rax
   18829:	call   129f0 <__sprintf_chk@plt+0xed10>
   1882e:	mov    r12d,eax
   18831:	test   eax,eax
   18833:	jne    18898 <__sprintf_chk@plt+0x14bb8>
   18835:	mov    rdi,QWORD PTR [rbp+0xb8]
   1883c:	test   rdi,rdi
   1883f:	je     18862 <__sprintf_chk@plt+0x14b82>
   18841:	mov    rax,QWORD PTR [rbp+0x40]
   18845:	lea    rsi,[rax*8+0x8]
   1884d:	call   3b20 <realloc@plt>
   18852:	test   rax,rax
   18855:	je     18920 <__sprintf_chk@plt+0x14c40>
   1885b:	mov    QWORD PTR [rbp+0xb8],rax
   18862:	cmp    BYTE PTR [rbp+0x88],0x0
   18869:	mov    eax,DWORD PTR [rbp+0x90]
   1886f:	je     188a8 <__sprintf_chk@plt+0x14bc8>
   18871:	mov    rdi,rbp
   18874:	cmp    eax,0x1
   18877:	jle    18910 <__sprintf_chk@plt+0x14c30>
   1887d:	add    rsp,0x8
   18881:	pop    rbp
   18882:	pop    r12
   18884:	jmp    135e0 <__sprintf_chk@plt+0xf900>
   18889:	nop    DWORD PTR [rax+0x0]
   18890:	mov    rdi,rbp
   18893:	call   12ea0 <__sprintf_chk@plt+0xf1c0>
   18898:	add    rsp,0x8
   1889c:	mov    eax,r12d
   1889f:	pop    rbp
   188a0:	pop    r12
   188a2:	ret    
   188a3:	nop    DWORD PTR [rax+rax*1+0x0]
   188a8:	cmp    eax,0x1
   188ab:	jg     18890 <__sprintf_chk@plt+0x14bb0>
   188ad:	mov    rcx,QWORD PTR [rbp+0x78]
   188b1:	test   rcx,rcx
   188b4:	je     18898 <__sprintf_chk@plt+0x14bb8>
   188b6:	mov    rsi,QWORD PTR [rbp+0x58]
   188ba:	mov    rax,QWORD PTR [rbp+0x30]
   188be:	cmp    QWORD PTR [rbp+0x40],rsi
   188c2:	cmovle rsi,QWORD PTR [rbp+0x40]
   188c7:	cmp    rsi,rax
   188ca:	jg     188d4 <__sprintf_chk@plt+0x14bf4>
   188cc:	jmp    18938 <__sprintf_chk@plt+0x14c58>
   188ce:	xchg   ax,ax
   188d0:	mov    rcx,QWORD PTR [rbp+0x78]
   188d4:	mov    rdx,QWORD PTR [rbp+0x0]
   188d8:	add    rdx,rax
   188db:	add    rdx,QWORD PTR [rbp+0x28]
   188df:	movzx  edx,BYTE PTR [rdx]
   188e2:	movzx  ecx,BYTE PTR [rcx+rdx*1]
   188e6:	mov    rdx,QWORD PTR [rbp+0x8]
   188ea:	mov    BYTE PTR [rdx+rax*1],cl
   188ed:	add    rax,0x1
   188f1:	cmp    rsi,rax
   188f4:	jne    188d0 <__sprintf_chk@plt+0x14bf0>
   188f6:	mov    QWORD PTR [rbp+0x30],rsi
   188fa:	mov    eax,r12d
   188fd:	mov    QWORD PTR [rbp+0x38],rsi
   18901:	add    rsp,0x8
   18905:	pop    rbp
   18906:	pop    r12
   18908:	ret    
   18909:	nop    DWORD PTR [rax+0x0]
   18910:	call   12e20 <__sprintf_chk@plt+0xf140>
   18915:	add    rsp,0x8
   18919:	mov    eax,r12d
   1891c:	pop    rbp
   1891d:	pop    r12
   1891f:	ret    
   18920:	mov    r12d,0xc
   18926:	add    rsp,0x8
   1892a:	mov    eax,r12d
   1892d:	pop    rbp
   1892e:	pop    r12
   18930:	ret    
   18931:	nop    DWORD PTR [rax+0x0]
   18938:	mov    rsi,rax
   1893b:	jmp    188f6 <__sprintf_chk@plt+0x14c16>
   1893d:	nop    DWORD PTR [rax]
   18940:	push   r12
   18942:	push   rbp
   18943:	mov    rbp,rsi
   18946:	push   rbx
   18947:	mov    rax,QWORD PTR [rdi+0x40]
   1894b:	mov    rbx,rdi
   1894e:	mov    r12,QWORD PTR [rdi+0xc0]
   18955:	cmp    rax,rsi
   18958:	jg     18980 <__sprintf_chk@plt+0x14ca0>
   1895a:	cmp    rax,QWORD PTR [rdi+0x58]
   1895e:	jge    18980 <__sprintf_chk@plt+0x14ca0>
   18960:	lea    esi,[rbp+0x1]
   18963:	mov    rdi,rbx
   18966:	call   187f0 <__sprintf_chk@plt+0x14b10>
   1896b:	test   eax,eax
   1896d:	jne    18976 <__sprintf_chk@plt+0x14c96>
   1896f:	cmp    r12,rbp
   18972:	jl     189a0 <__sprintf_chk@plt+0x14cc0>
   18974:	xor    eax,eax
   18976:	pop    rbx
   18977:	pop    rbp
   18978:	pop    r12
   1897a:	ret    
   1897b:	nop    DWORD PTR [rax+rax*1+0x0]
   18980:	mov    rax,QWORD PTR [rbx+0x30]
   18984:	cmp    rax,rbp
   18987:	jg     1896f <__sprintf_chk@plt+0x14c8f>
   18989:	cmp    rax,QWORD PTR [rbx+0x58]
   1898d:	jge    1896f <__sprintf_chk@plt+0x14c8f>
   1898f:	lea    esi,[rbp+0x1]
   18992:	mov    rdi,rbx
   18995:	call   187f0 <__sprintf_chk@plt+0x14b10>
   1899a:	test   eax,eax
   1899c:	je     1896f <__sprintf_chk@plt+0x14c8f>
   1899e:	jmp    18976 <__sprintf_chk@plt+0x14c96>
   189a0:	mov    rax,QWORD PTR [rbx+0xb8]
   189a7:	mov    rdx,rbp
   189aa:	xor    esi,esi
   189ac:	sub    rdx,r12
   189af:	shl    rdx,0x3
   189b3:	lea    rdi,[rax+r12*8+0x8]
   189b8:	call   3900 <memset@plt>
   189bd:	mov    QWORD PTR [rbx+0xc0],rbp
   189c4:	jmp    18974 <__sprintf_chk@plt+0x14c94>
   189c6:	cs nop WORD PTR [rax+rax*1+0x0]
   189d0:	push   r13
   189d2:	push   r12
   189d4:	mov    r12,rdi
   189d7:	push   rbp
   189d8:	push   rbx
   189d9:	sub    rsp,0x8
   189dd:	mov    rdx,QWORD PTR [rdi]
   189e0:	test   rdx,rdx
   189e3:	je     18a60 <__sprintf_chk@plt+0x14d80>
   189e5:	cmp    QWORD PTR [rdi+0x10],0x0
   189ea:	je     18a60 <__sprintf_chk@plt+0x14d80>
   189ec:	xor    ebx,ebx
   189ee:	jmp    18a08 <__sprintf_chk@plt+0x14d28>
   189f0:	cmp    eax,0x3
   189f3:	je     18b90 <__sprintf_chk@plt+0x14eb0>
   189f9:	add    rbx,0x1
   189fd:	cmp    QWORD PTR [r12+0x10],rbx
   18a02:	jbe    18a60 <__sprintf_chk@plt+0x14d80>
   18a04:	mov    rdx,QWORD PTR [r12]
   18a08:	mov    rax,rbx
   18a0b:	shl    rax,0x4
   18a0f:	add    rdx,rax
   18a12:	mov    eax,DWORD PTR [rdx+0x8]
   18a15:	and    eax,0x400ff
   18a1a:	cmp    eax,0x6
   18a1d:	jne    189f0 <__sprintf_chk@plt+0x14d10>
   18a1f:	mov    rbp,QWORD PTR [rdx]
   18a22:	add    rbx,0x1
   18a26:	mov    rdi,QWORD PTR [rbp+0x0]
   18a2a:	call   3680 <free@plt>
   18a2f:	mov    rdi,QWORD PTR [rbp+0x8]
   18a33:	call   3680 <free@plt>
   18a38:	mov    rdi,QWORD PTR [rbp+0x10]
   18a3c:	call   3680 <free@plt>
   18a41:	mov    rdi,QWORD PTR [rbp+0x18]
   18a45:	call   3680 <free@plt>
   18a4a:	mov    rdi,rbp
   18a4d:	call   3680 <free@plt>
   18a52:	cmp    QWORD PTR [r12+0x10],rbx
   18a57:	ja     18a04 <__sprintf_chk@plt+0x14d24>
   18a59:	nop    DWORD PTR [rax+0x0]
   18a60:	mov    rdi,QWORD PTR [r12+0x18]
   18a65:	xor    ebx,ebx
   18a67:	xor    ebp,ebp
   18a69:	call   3680 <free@plt>
   18a6e:	cmp    QWORD PTR [r12+0x10],0x0
   18a74:	je     18acb <__sprintf_chk@plt+0x14deb>
   18a76:	cs nop WORD PTR [rax+rax*1+0x0]
   18a80:	mov    rax,QWORD PTR [r12+0x30]
   18a85:	test   rax,rax
   18a88:	je     18a94 <__sprintf_chk@plt+0x14db4>
   18a8a:	mov    rdi,QWORD PTR [rax+rbx*1+0x10]
   18a8f:	call   3680 <free@plt>
   18a94:	mov    rax,QWORD PTR [r12+0x38]
   18a99:	test   rax,rax
   18a9c:	je     18aa8 <__sprintf_chk@plt+0x14dc8>
   18a9e:	mov    rdi,QWORD PTR [rax+rbx*1+0x10]
   18aa3:	call   3680 <free@plt>
   18aa8:	mov    rax,QWORD PTR [r12+0x28]
   18aad:	test   rax,rax
   18ab0:	je     18abc <__sprintf_chk@plt+0x14ddc>
   18ab2:	mov    rdi,QWORD PTR [rax+rbx*1+0x10]
   18ab7:	call   3680 <free@plt>
   18abc:	add    rbp,0x1
   18ac0:	add    rbx,0x18
   18ac4:	cmp    QWORD PTR [r12+0x10],rbp
   18ac9:	ja     18a80 <__sprintf_chk@plt+0x14da0>
   18acb:	mov    rdi,QWORD PTR [r12+0x28]
   18ad0:	xor    r13d,r13d
   18ad3:	call   3680 <free@plt>
   18ad8:	mov    rdi,QWORD PTR [r12+0x30]
   18add:	call   3680 <free@plt>
   18ae2:	mov    rdi,QWORD PTR [r12+0x38]
   18ae7:	call   3680 <free@plt>
   18aec:	mov    rdi,QWORD PTR [r12]
   18af0:	call   3680 <free@plt>
   18af5:	mov    rdi,QWORD PTR [r12+0x40]
   18afa:	test   rdi,rdi
   18afd:	je     18b55 <__sprintf_chk@plt+0x14e75>
   18aff:	nop
   18b00:	lea    rax,[r13+r13*2+0x0]
   18b05:	xor    ebx,ebx
   18b07:	lea    rbp,[rdi+rax*8]
   18b0b:	cmp    QWORD PTR [rbp+0x0],0x0
   18b10:	jle    18b2f <__sprintf_chk@plt+0x14e4f>
   18b12:	nop    WORD PTR [rax+rax*1+0x0]
   18b18:	mov    rax,QWORD PTR [rbp+0x10]
   18b1c:	mov    rdi,QWORD PTR [rax+rbx*8]
   18b20:	add    rbx,0x1
   18b24:	call   13e80 <__sprintf_chk@plt+0x101a0>
   18b29:	cmp    QWORD PTR [rbp+0x0],rbx
   18b2d:	jg     18b18 <__sprintf_chk@plt+0x14e38>
   18b2f:	mov    rdi,QWORD PTR [rbp+0x10]
   18b33:	add    r13,0x1
   18b37:	call   3680 <free@plt>
   18b3c:	cmp    QWORD PTR [r12+0x88],r13
   18b44:	jb     18b50 <__sprintf_chk@plt+0x14e70>
   18b46:	mov    rdi,QWORD PTR [r12+0x40]
   18b4b:	jmp    18b00 <__sprintf_chk@plt+0x14e20>
   18b4d:	nop    DWORD PTR [rax]
   18b50:	mov    rdi,QWORD PTR [r12+0x40]
   18b55:	call   3680 <free@plt>
   18b5a:	mov    rdi,QWORD PTR [r12+0x78]
   18b5f:	lea    rax,[rip+0xc83a]        # 253a0 <__sprintf_chk@plt+0x216c0>
   18b66:	cmp    rdi,rax
   18b69:	je     18b70 <__sprintf_chk@plt+0x14e90>
   18b6b:	call   3680 <free@plt>
   18b70:	mov    rdi,QWORD PTR [r12+0xe0]
   18b78:	call   3680 <free@plt>
   18b7d:	add    rsp,0x8
   18b81:	mov    rdi,r12
   18b84:	pop    rbx
   18b85:	pop    rbp
   18b86:	pop    r12
   18b88:	pop    r13
   18b8a:	jmp    3680 <free@plt>
   18b8f:	nop
   18b90:	mov    rdi,QWORD PTR [rdx]
   18b93:	call   3680 <free@plt>
   18b98:	jmp    189f9 <__sprintf_chk@plt+0x14d19>
   18b9d:	nop    DWORD PTR [rax]
   18ba0:	mov    eax,DWORD PTR [rsi+0x30]
   18ba3:	push   rbp
   18ba4:	and    eax,0x400ff
   18ba9:	cmp    eax,0x6
   18bac:	je     18bc0 <__sprintf_chk@plt+0x14ee0>
   18bae:	cmp    eax,0x3
   18bb1:	je     18bf8 <__sprintf_chk@plt+0x14f18>
   18bb3:	xor    eax,eax
   18bb5:	pop    rbp
   18bb6:	ret    
   18bb7:	nop    WORD PTR [rax+rax*1+0x0]
   18bc0:	mov    rbp,QWORD PTR [rsi+0x28]
   18bc4:	mov    rdi,QWORD PTR [rbp+0x0]
   18bc8:	call   3680 <free@plt>
   18bcd:	mov    rdi,QWORD PTR [rbp+0x8]
   18bd1:	call   3680 <free@plt>
   18bd6:	mov    rdi,QWORD PTR [rbp+0x10]
   18bda:	call   3680 <free@plt>
   18bdf:	mov    rdi,QWORD PTR [rbp+0x18]
   18be3:	call   3680 <free@plt>
   18be8:	mov    rdi,rbp
   18beb:	call   3680 <free@plt>
   18bf0:	xor    eax,eax
   18bf2:	pop    rbp
   18bf3:	ret    
   18bf4:	nop    DWORD PTR [rax+0x0]
   18bf8:	mov    rdi,QWORD PTR [rsi+0x28]
   18bfc:	call   3680 <free@plt>
   18c01:	xor    eax,eax
   18c03:	pop    rbp
   18c04:	ret    
   18c05:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   18c10:	push   r15
   18c12:	push   r14
   18c14:	mov    r14,rdx
   18c17:	push   r13
   18c19:	push   r12
   18c1b:	push   rbp
   18c1c:	mov    rbp,rdi
   18c1f:	push   rbx
   18c20:	mov    rbx,rcx
   18c23:	sub    rsp,0xd8
   18c2a:	mov    rcx,QWORD PTR [rdi+0x98]
   18c31:	mov    r13,QWORD PTR [rsi+0x8]
   18c35:	mov    QWORD PTR [rsp+0x60],rsi
   18c3a:	mov    QWORD PTR [rsp+0x78],r8
   18c3f:	mov    QWORD PTR [rsp+0x50],r9
   18c44:	mov    rax,QWORD PTR fs:0x28
   18c4d:	mov    QWORD PTR [rsp+0xc8],rax
   18c55:	xor    eax,eax
   18c57:	mov    rax,rdx
   18c5a:	mov    QWORD PTR [rsp+0x38],rcx
   18c5f:	mov    DWORD PTR [rsp+0x88],0x0
   18c6a:	shl    rax,0x4
   18c6e:	add    rax,QWORD PTR [rcx]
   18c71:	mov    rax,QWORD PTR [rax]
   18c74:	mov    QWORD PTR [rsp+0x58],rax
   18c79:	movsxd rax,DWORD PTR [rdi+0xe0]
   18c80:	add    rax,r9
   18c83:	cmp    rax,r13
   18c86:	jge    192c4 <__sprintf_chk@plt+0x155e4>
   18c8c:	mov    rdi,QWORD PTR [rbp+0xb8]
   18c93:	mov    rax,QWORD PTR [rsp+0x60]
   18c98:	mov    edx,DWORD PTR [rbp+0xa0]
   18c9e:	mov    r15,QWORD PTR [rax]
   18ca1:	mov    r13,QWORD PTR [rax+0x10]
   18ca5:	mov    QWORD PTR [rsp+0x68],rdi
   18caa:	mov    rdi,QWORD PTR [rbp+0x48]
   18cae:	mov    QWORD PTR [rbp+0xb8],r13
   18cb5:	mov    QWORD PTR [rsp+0x70],rdi
   18cba:	test   r15,r15
   18cbd:	je     19238 <__sprintf_chk@plt+0x15558>
   18cc3:	mov    QWORD PTR [rbp+0x48],r15
   18cc7:	lea    rsi,[r15-0x1]
   18ccb:	mov    rdi,rbp
   18cce:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   18cd3:	mov    r12d,eax
   18cd6:	cmp    r15,rbx
   18cd9:	je     1924b <__sprintf_chk@plt+0x1556b>
   18cdf:	mov    r14,QWORD PTR [r13+r15*8+0x0]
   18ce4:	test   r14,r14
   18ce7:	je     18cf4 <__sprintf_chk@plt+0x15014>
   18ce9:	test   BYTE PTR [r14+0x68],0x40
   18cee:	jne    190e8 <__sprintf_chk@plt+0x15408>
   18cf4:	mov    QWORD PTR [rsp+0xa0],0x0
   18d00:	pxor   xmm0,xmm0
   18d04:	movups XMMWORD PTR [rsp+0x90],xmm0
   18d0c:	cmp    r15,QWORD PTR [rsp+0x50]
   18d11:	jge    1905a <__sprintf_chk@plt+0x1537a>
   18d17:	mov    QWORD PTR [rsp+0x28],0x0
   18d20:	lea    rax,[r15+0x1]
   18d24:	mov    QWORD PTR [rsp+0x8],rax
   18d29:	lea    rax,[rsp+0x90]
   18d31:	mov    QWORD PTR [rsp],rax
   18d35:	mov    rax,QWORD PTR [rsp+0x8]
   18d3a:	sub    rax,0x1
   18d3e:	mov    QWORD PTR [rsp+0x20],rax
   18d43:	movsxd rax,DWORD PTR [rbp+0xe0]
   18d4a:	cmp    QWORD PTR [rsp+0x28],rax
   18d4f:	jg     1932e <__sprintf_chk@plt+0x1564e>
   18d55:	mov    rdx,QWORD PTR [rsp+0x8]
   18d5a:	mov    QWORD PTR [rsp+0x98],0x0
   18d66:	lea    rax,[rdx*8+0x0]
   18d6e:	mov    QWORD PTR [rsp+0x30],rax
   18d73:	mov    rax,QWORD PTR [rbp+0xb8]
   18d7a:	mov    rsi,QWORD PTR [rax+rdx*8]
   18d7e:	test   rsi,rsi
   18d81:	je     19198 <__sprintf_chk@plt+0x154b8>
   18d87:	mov    rdi,QWORD PTR [rsp]
   18d8b:	add    rsi,0x8
   18d8f:	call   13070 <__sprintf_chk@plt+0xf390>
   18d94:	mov    DWORD PTR [rsp+0x88],eax
   18d9b:	test   eax,eax
   18d9d:	jne    191c8 <__sprintf_chk@plt+0x154e8>
   18da3:	test   r14,r14
   18da6:	je     18f90 <__sprintf_chk@plt+0x152b0>
   18dac:	pxor   xmm0,xmm0
   18db0:	cmp    QWORD PTR [r14+0x28],0x0
   18db5:	lea    rax,[rsp+0xb0]
   18dbd:	mov    DWORD PTR [rsp+0x8c],0x0
   18dc8:	mov    QWORD PTR [rsp+0x18],rax
   18dcd:	mov    r13,QWORD PTR [rbp+0x98]
   18dd4:	mov    QWORD PTR [rsp+0xc0],0x0
   18de0:	movups XMMWORD PTR [rsp+0xb0],xmm0
   18de8:	jle    1937d <__sprintf_chk@plt+0x1569d>
   18dee:	mov    r15,QWORD PTR [rsp+0x20]
   18df3:	xor    ebx,ebx
   18df5:	jmp    18e3e <__sprintf_chk@plt+0x1515e>
   18df7:	nop    WORD PTR [rax+rax*1+0x0]
   18e00:	mov    rdx,r15
   18e03:	mov    rdi,rbp
   18e06:	call   14080 <__sprintf_chk@plt+0x103a0>
   18e0b:	test   al,al
   18e0d:	je     18e30 <__sprintf_chk@plt+0x15150>
   18e0f:	lea    rcx,[r12*8+0x0]
   18e17:	mov    rax,QWORD PTR [r13+0x18]
   18e1b:	mov    rdi,QWORD PTR [rsp]
   18e1f:	mov    rsi,QWORD PTR [rax+rcx*1]
   18e23:	call   17170 <__sprintf_chk@plt+0x13490>
   18e28:	test   al,al
   18e2a:	je     191b0 <__sprintf_chk@plt+0x154d0>
   18e30:	add    rbx,0x1
   18e34:	cmp    rbx,QWORD PTR [r14+0x28]
   18e38:	jge    191e8 <__sprintf_chk@plt+0x15508>
   18e3e:	mov    rax,QWORD PTR [r14+0x30]
   18e42:	mov    rsi,QWORD PTR [r13+0x0]
   18e46:	mov    r12,QWORD PTR [rax+rbx*8]
   18e4a:	mov    r8,r12
   18e4d:	shl    r8,0x4
   18e51:	add    rsi,r8
   18e54:	test   BYTE PTR [rsi+0xa],0x10
   18e58:	je     18e00 <__sprintf_chk@plt+0x15120>
   18e5a:	mov    rcx,r15
   18e5d:	mov    rdx,rbp
   18e60:	mov    rsi,r12
   18e63:	mov    rdi,r13
   18e66:	mov    QWORD PTR [rsp+0x10],r8
   18e6b:	call   16590 <__sprintf_chk@plt+0x128b0>
   18e70:	mov    r8,QWORD PTR [rsp+0x10]
   18e75:	cmp    eax,0x1
   18e78:	jle    19180 <__sprintf_chk@plt+0x154a0>
   18e7e:	mov    rdx,QWORD PTR [r13+0x18]
   18e82:	cdqe   
   18e84:	lea    rcx,[r12*8+0x0]
   18e8c:	mov    r8,QWORD PTR [rdx+r12*8]
   18e90:	lea    r12,[rax+r15*1]
   18e94:	lea    rax,[r12*8+0x0]
   18e9c:	mov    QWORD PTR [rsp+0x40],rax
   18ea1:	mov    rax,QWORD PTR [rbp+0xb8]
   18ea8:	mov    rsi,QWORD PTR [rax+r12*8]
   18eac:	mov    QWORD PTR [rsp+0xb8],0x0
   18eb8:	test   rsi,rsi
   18ebb:	je     18eea <__sprintf_chk@plt+0x1520a>
   18ebd:	mov    rdi,QWORD PTR [rsp+0x18]
   18ec2:	add    rsi,0x8
   18ec6:	mov    QWORD PTR [rsp+0x48],rcx
   18ecb:	mov    QWORD PTR [rsp+0x10],r8
   18ed0:	call   13070 <__sprintf_chk@plt+0xf390>
   18ed5:	mov    r8,QWORD PTR [rsp+0x10]
   18eda:	mov    rcx,QWORD PTR [rsp+0x48]
   18edf:	test   eax,eax
   18ee1:	mov    DWORD PTR [rsp+0x8c],eax
   18ee8:	jne    18f68 <__sprintf_chk@plt+0x15288>
   18eea:	mov    rdi,QWORD PTR [rsp+0x18]
   18eef:	mov    rsi,r8
   18ef2:	mov    QWORD PTR [rsp+0x10],rcx
   18ef7:	call   17170 <__sprintf_chk@plt+0x13490>
   18efc:	mov    rcx,QWORD PTR [rsp+0x10]
   18f01:	test   al,al
   18f03:	je     191b0 <__sprintf_chk@plt+0x154d0>
   18f09:	mov    rdx,QWORD PTR [rsp+0x18]
   18f0e:	mov    r8,QWORD PTR [rsp+0x40]
   18f13:	mov    rsi,r13
   18f16:	mov    QWORD PTR [rsp+0x48],rcx
   18f1b:	add    r8,QWORD PTR [rbp+0xb8]
   18f22:	lea    rdi,[rsp+0x8c]
   18f2a:	mov    QWORD PTR [rsp+0x10],r8
   18f2f:	call   16ca0 <__sprintf_chk@plt+0x12fc0>
   18f34:	mov    r8,QWORD PTR [rsp+0x10]
   18f39:	mov    rcx,QWORD PTR [rsp+0x48]
   18f3e:	mov    QWORD PTR [r8],rax
   18f41:	mov    rax,QWORD PTR [rbp+0xb8]
   18f48:	cmp    QWORD PTR [rax+r12*8],0x0
   18f4d:	jne    18e17 <__sprintf_chk@plt+0x15137>
   18f53:	mov    edx,DWORD PTR [rsp+0x8c]
   18f5a:	test   edx,edx
   18f5c:	je     18e17 <__sprintf_chk@plt+0x15137>
   18f62:	nop    WORD PTR [rax+rax*1+0x0]
   18f68:	mov    rdi,QWORD PTR [rsp+0xc0]
   18f70:	call   3680 <free@plt>
   18f75:	mov    eax,DWORD PTR [rsp+0x8c]
   18f7c:	mov    DWORD PTR [rsp+0x88],eax
   18f83:	test   eax,eax
   18f85:	jne    191c8 <__sprintf_chk@plt+0x154e8>
   18f8b:	nop    DWORD PTR [rax+rax*1+0x0]
   18f90:	cmp    QWORD PTR [rsp+0x98],0x0
   18f99:	mov    rbx,QWORD PTR [rsp+0x8]
   18f9e:	je     18ff6 <__sprintf_chk@plt+0x15316>
   18fa0:	mov    ecx,DWORD PTR [rsp+0x110]
   18fa7:	mov    rdx,QWORD PTR [rsp+0x58]
   18fac:	mov    rsi,QWORD PTR [rsp]
   18fb0:	mov    rdi,QWORD PTR [rsp+0x38]
   18fb5:	call   17370 <__sprintf_chk@plt+0x13690>
   18fba:	mov    DWORD PTR [rsp+0x88],eax
   18fc1:	test   eax,eax
   18fc3:	jne    191c8 <__sprintf_chk@plt+0x154e8>
   18fc9:	mov    r8d,DWORD PTR [rsp+0x110]
   18fd1:	mov    rcx,QWORD PTR [rsp+0x58]
   18fd6:	mov    rdi,rbp
   18fd9:	mov    rdx,QWORD PTR [rsp+0x8]
   18fde:	mov    rsi,QWORD PTR [rsp]
   18fe2:	call   17a00 <__sprintf_chk@plt+0x13d20>
   18fe7:	mov    DWORD PTR [rsp+0x88],eax
   18fee:	test   eax,eax
   18ff0:	jne    191c8 <__sprintf_chk@plt+0x154e8>
   18ff6:	mov    edx,DWORD PTR [rbp+0xa0]
   18ffc:	mov    rsi,QWORD PTR [rsp+0x20]
   19001:	mov    rdi,rbp
   19004:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   19009:	mov    rdx,QWORD PTR [rsp]
   1900d:	mov    rsi,QWORD PTR [rsp+0x38]
   19012:	lea    rdi,[rsp+0x88]
   1901a:	mov    ecx,eax
   1901c:	call   16960 <__sprintf_chk@plt+0x12c80>
   19021:	mov    r14,rax
   19024:	test   rax,rax
   19027:	je     19208 <__sprintf_chk@plt+0x15528>
   1902d:	mov    rax,QWORD PTR [rbp+0xb8]
   19034:	mov    rcx,QWORD PTR [rsp+0x30]
   19039:	mov    QWORD PTR [rsp+0x28],0x0
   19042:	mov    QWORD PTR [rax+rcx*1],r14
   19046:	add    QWORD PTR [rsp+0x8],0x1
   1904c:	cmp    rbx,QWORD PTR [rsp+0x50]
   19051:	jl     18d35 <__sprintf_chk@plt+0x15055>
   19057:	mov    r15,rbx
   1905a:	mov    rdi,QWORD PTR [rsp+0xa0]
   19062:	call   3680 <free@plt>
   19067:	mov    rax,QWORD PTR [rbp+0xb8]
   1906e:	mov    rbx,QWORD PTR [rsp+0x50]
   19073:	mov    rax,QWORD PTR [rax+rbx*8]
   19077:	test   rax,rax
   1907a:	je     19356 <__sprintf_chk@plt+0x15676>
   19080:	mov    rbx,QWORD PTR [rsp+0x60]
   19085:	mov    rsi,QWORD PTR [rsp+0x78]
   1908a:	lea    rdi,[rax+0x8]
   1908e:	mov    QWORD PTR [rbx],r15
   19091:	mov    rbx,QWORD PTR [rsp+0x68]
   19096:	mov    QWORD PTR [rbp+0xb8],rbx
   1909d:	mov    rbx,QWORD PTR [rsp+0x70]
   190a2:	mov    QWORD PTR [rbp+0x48],rbx
   190a6:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   190ab:	test   rax,rax
   190ae:	sete   al
   190b1:	movzx  eax,al
   190b4:	nop    DWORD PTR [rax+0x0]
   190b8:	mov    rbx,QWORD PTR [rsp+0xc8]
   190c0:	sub    rbx,QWORD PTR fs:0x28
   190c9:	jne    19384 <__sprintf_chk@plt+0x156a4>
   190cf:	add    rsp,0xd8
   190d6:	pop    rbx
   190d7:	pop    rbp
   190d8:	pop    r12
   190da:	pop    r13
   190dc:	pop    r14
   190de:	pop    r15
   190e0:	ret    
   190e1:	nop    DWORD PTR [rax+0x0]
   190e8:	lea    r13,[rsp+0x90]
   190f0:	lea    rsi,[r14+0x8]
   190f4:	mov    rdi,r13
   190f7:	call   133e0 <__sprintf_chk@plt+0xf700>
   190fc:	mov    DWORD PTR [rsp+0x88],eax
   19103:	test   eax,eax
   19105:	jne    190b8 <__sprintf_chk@plt+0x153d8>
   19107:	test   BYTE PTR [r14+0x68],0x40
   1910c:	je     18d0c <__sprintf_chk@plt+0x1502c>
   19112:	cmp    QWORD PTR [rsp+0x98],0x0
   1911b:	je     19147 <__sprintf_chk@plt+0x15467>
   1911d:	mov    rcx,QWORD PTR [rsp+0x58]
   19122:	mov    rdx,r15
   19125:	mov    rsi,r13
   19128:	mov    rdi,rbp
   1912b:	mov    r8d,DWORD PTR [rsp+0x110]
   19133:	call   17a00 <__sprintf_chk@plt+0x13d20>
   19138:	mov    DWORD PTR [rsp+0x88],eax
   1913f:	test   eax,eax
   19141:	jne    191c8 <__sprintf_chk@plt+0x154e8>
   19147:	mov    rsi,QWORD PTR [rsp+0x38]
   1914c:	lea    rdi,[rsp+0x88]
   19154:	mov    ecx,r12d
   19157:	mov    rdx,r13
   1915a:	call   16960 <__sprintf_chk@plt+0x12c80>
   1915f:	mov    r14,rax
   19162:	test   rax,rax
   19165:	je     19338 <__sprintf_chk@plt+0x15658>
   1916b:	mov    rax,QWORD PTR [rbp+0xb8]
   19172:	mov    QWORD PTR [rax+r15*8],r14
   19176:	jmp    18d0c <__sprintf_chk@plt+0x1502c>
   1917b:	nop    DWORD PTR [rax+rax*1+0x0]
   19180:	test   eax,eax
   19182:	jne    18e0f <__sprintf_chk@plt+0x1512f>
   19188:	mov    rsi,QWORD PTR [r13+0x0]
   1918c:	add    rsi,r8
   1918f:	jmp    18e00 <__sprintf_chk@plt+0x15120>
   19194:	nop    DWORD PTR [rax+0x0]
   19198:	test   r14,r14
   1919b:	jne    18dac <__sprintf_chk@plt+0x150cc>
   191a1:	mov    rbx,QWORD PTR [rsp+0x8]
   191a6:	jmp    18ff6 <__sprintf_chk@plt+0x15316>
   191ab:	nop    DWORD PTR [rax+rax*1+0x0]
   191b0:	mov    rdi,QWORD PTR [rsp+0xc0]
   191b8:	call   3680 <free@plt>
   191bd:	mov    DWORD PTR [rsp+0x88],0xc
   191c8:	mov    rdi,QWORD PTR [rsp+0xa0]
   191d0:	call   3680 <free@plt>
   191d5:	mov    eax,DWORD PTR [rsp+0x88]
   191dc:	jmp    190b8 <__sprintf_chk@plt+0x153d8>
   191e1:	nop    DWORD PTR [rax+0x0]
   191e8:	mov    rdi,QWORD PTR [rsp+0xc0]
   191f0:	call   3680 <free@plt>
   191f5:	mov    DWORD PTR [rsp+0x88],0x0
   19200:	jmp    18f90 <__sprintf_chk@plt+0x152b0>
   19205:	nop    DWORD PTR [rax]
   19208:	mov    eax,DWORD PTR [rsp+0x88]
   1920f:	test   eax,eax
   19211:	jne    191c8 <__sprintf_chk@plt+0x154e8>
   19213:	mov    rax,QWORD PTR [rbp+0xb8]
   1921a:	mov    rdi,QWORD PTR [rsp+0x30]
   1921f:	add    QWORD PTR [rsp+0x28],0x1
   19225:	mov    QWORD PTR [rax+rdi*1],0x0
   1922d:	jmp    19046 <__sprintf_chk@plt+0x15366>
   19232:	nop    WORD PTR [rax+rax*1+0x0]
   19238:	mov    QWORD PTR [rbp+0x48],rbx
   1923c:	lea    rsi,[rbx-0x1]
   19240:	mov    rdi,rbp
   19243:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   19248:	mov    r12d,eax
   1924b:	mov    edi,0x8
   19250:	mov    QWORD PTR [rsp+0x90],0x1
   1925c:	mov    QWORD PTR [rsp+0x98],0x1
   19268:	call   3a70 <malloc@plt>
   1926d:	mov    QWORD PTR [rsp+0xa0],rax
   19275:	test   rax,rax
   19278:	je     1934c <__sprintf_chk@plt+0x1566c>
   1927e:	mov    rdx,QWORD PTR [rsp+0x58]
   19283:	mov    rdi,QWORD PTR [rsp+0x38]
   19288:	mov    QWORD PTR [rax],r14
   1928b:	mov    r15,rbx
   1928e:	mov    ecx,DWORD PTR [rsp+0x110]
   19295:	lea    r13,[rsp+0x90]
   1929d:	mov    DWORD PTR [rsp+0x88],0x0
   192a8:	mov    rsi,r13
   192ab:	call   17370 <__sprintf_chk@plt+0x13690>
   192b0:	mov    DWORD PTR [rsp+0x88],eax
   192b7:	test   eax,eax
   192b9:	je     19112 <__sprintf_chk@plt+0x15432>
   192bf:	jmp    191c8 <__sprintf_chk@plt+0x154e8>
   192c4:	lea    r12,[rax+0x1]
   192c8:	movabs rax,0x7fffffffffffffff
   192d2:	sub    rax,r13
   192d5:	cmp    rax,r12
   192d8:	jl     1934c <__sprintf_chk@plt+0x1566c>
   192da:	movabs rax,0x1fffffffffffffff
   192e4:	lea    r15,[r13+r12*1+0x0]
   192e9:	cmp    r15,rax
   192ec:	ja     1934c <__sprintf_chk@plt+0x1566c>
   192ee:	mov    rax,QWORD PTR [rsp+0x60]
   192f3:	lea    rsi,[r15*8+0x0]
   192fb:	mov    rdi,QWORD PTR [rax+0x10]
   192ff:	call   3b20 <realloc@plt>
   19304:	test   rax,rax
   19307:	je     1934c <__sprintf_chk@plt+0x1566c>
   19309:	mov    rdi,QWORD PTR [rsp+0x60]
   1930e:	lea    rdx,[r12*8+0x0]
   19316:	xor    esi,esi
   19318:	mov    QWORD PTR [rdi+0x8],r15
   1931c:	mov    QWORD PTR [rdi+0x10],rax
   19320:	lea    rdi,[rax+r13*8]
   19324:	call   3900 <memset@plt>
   19329:	jmp    18c8c <__sprintf_chk@plt+0x14fac>
   1932e:	mov    r15,QWORD PTR [rsp+0x20]
   19333:	jmp    1905a <__sprintf_chk@plt+0x1537a>
   19338:	mov    ecx,DWORD PTR [rsp+0x88]
   1933f:	test   ecx,ecx
   19341:	je     1916b <__sprintf_chk@plt+0x1548b>
   19347:	jmp    191c8 <__sprintf_chk@plt+0x154e8>
   1934c:	mov    eax,0xc
   19351:	jmp    190b8 <__sprintf_chk@plt+0x153d8>
   19356:	mov    rax,QWORD PTR [rsp+0x60]
   1935b:	mov    QWORD PTR [rax],r15
   1935e:	mov    rax,QWORD PTR [rsp+0x68]
   19363:	mov    QWORD PTR [rbp+0xb8],rax
   1936a:	mov    rax,QWORD PTR [rsp+0x70]
   1936f:	mov    QWORD PTR [rbp+0x48],rax
   19373:	mov    eax,0x1
   19378:	jmp    190b8 <__sprintf_chk@plt+0x153d8>
   1937d:	xor    edi,edi
   1937f:	jmp    191f0 <__sprintf_chk@plt+0x15510>
   19384:	call   3840 <__stack_chk_fail@plt>
   19389:	nop    DWORD PTR [rax+0x0]
   19390:	push   r15
   19392:	mov    r9,r8
   19395:	push   r14
   19397:	mov    r14,rcx
   1939a:	push   r13
   1939c:	mov    r13,rsi
   1939f:	lea    rsi,[rdx+0x10]
   193a3:	push   r12
   193a5:	mov    r12,rdx
   193a8:	push   rbp
   193a9:	mov    rbp,rdi
   193ac:	push   rbx
   193ad:	mov    rbx,r8
   193b0:	mov    r8,r14
   193b3:	sub    rsp,0x20
   193b7:	mov    rcx,QWORD PTR [rdx+0x8]
   193bb:	push   0x8
   193bd:	mov    rdx,QWORD PTR [rdx]
   193c0:	call   18c10 <__sprintf_chk@plt+0x14f30>
   193c5:	pop    rdx
   193c6:	pop    rcx
   193c7:	test   eax,eax
   193c9:	je     193e0 <__sprintf_chk@plt+0x15700>
   193cb:	add    rsp,0x18
   193cf:	pop    rbx
   193d0:	pop    rbp
   193d1:	pop    r12
   193d3:	pop    r13
   193d5:	pop    r14
   193d7:	pop    r15
   193d9:	ret    
   193da:	nop    WORD PTR [rax+rax*1+0x0]
   193e0:	mov    r15,QWORD PTR [r12+0x8]
   193e5:	mov    rcx,QWORD PTR [r13+0x0]
   193e9:	mov    rax,QWORD PTR [rbp+0xc8]
   193f0:	mov    r8,QWORD PTR [rbp+0xd0]
   193f7:	mov    rdi,QWORD PTR [rbp+0xd8]
   193fe:	mov    rdx,rcx
   19401:	mov    rsi,r15
   19404:	cmp    rax,r8
   19407:	jge    194a0 <__sprintf_chk@plt+0x157c0>
   1940d:	lea    r10,[rax+rax*2]
   19411:	shl    r10,0x4
   19415:	test   rax,rax
   19418:	jle    19425 <__sprintf_chk@plt+0x15745>
   1941a:	lea    r8,[rdi+r10*1-0x30]
   1941f:	cmp    rbx,QWORD PTR [r8+0x8]
   19423:	je     19490 <__sprintf_chk@plt+0x157b0>
   19425:	add    rdi,r10
   19428:	xor    r8d,r8d
   1942b:	cmp    r15,rcx
   1942e:	sete   r8b
   19432:	add    rax,0x1
   19436:	mov    QWORD PTR [rdi],r14
   19439:	neg    r8
   1943c:	mov    QWORD PTR [rdi+0x8],rbx
   19440:	mov    QWORD PTR [rdi+0x10],rcx
   19444:	mov    QWORD PTR [rdi+0x18],r15
   19448:	mov    QWORD PTR [rdi+0x20],r8
   1944c:	mov    QWORD PTR [rbp+0xc8],rax
   19453:	mov    rax,r15
   19456:	mov    BYTE PTR [rdi+0x28],0x0
   1945a:	movsxd rdi,DWORD PTR [rbp+0xe0]
   19461:	sub    rax,rcx
   19464:	cmp    rdi,rax
   19467:	jge    19473 <__sprintf_chk@plt+0x15793>
   19469:	sub    r15d,ecx
   1946c:	mov    DWORD PTR [rbp+0xe0],r15d
   19473:	add    rsp,0x18
   19477:	add    rsi,rbx
   1947a:	mov    rdi,rbp
   1947d:	pop    rbx
   1947e:	sub    rsi,rdx
   19481:	pop    rbp
   19482:	pop    r12
   19484:	pop    r13
   19486:	pop    r14
   19488:	pop    r15
   1948a:	jmp    18940 <__sprintf_chk@plt+0x14c60>
   1948f:	nop
   19490:	mov    BYTE PTR [r8+0x28],0x1
   19495:	jmp    19425 <__sprintf_chk@plt+0x15745>
   19497:	nop    WORD PTR [rax+rax*1+0x0]
   194a0:	lea    rsi,[r8+r8*2]
   194a4:	mov    QWORD PTR [rsp+0x8],rcx
   194a9:	shl    rsi,0x5
   194ad:	call   3b20 <realloc@plt>
   194b2:	mov    rcx,QWORD PTR [rsp+0x8]
   194b7:	test   rax,rax
   194ba:	je     19520 <__sprintf_chk@plt+0x15840>
   194bc:	mov    rsi,QWORD PTR [rbp+0xc8]
   194c3:	mov    rdx,QWORD PTR [rbp+0xd0]
   194ca:	mov    QWORD PTR [rsp+0x8],rcx
   194cf:	mov    QWORD PTR [rbp+0xd8],rax
   194d6:	lea    rdi,[rsi+rsi*2]
   194da:	lea    rdx,[rdx+rdx*2]
   194de:	xor    esi,esi
   194e0:	shl    rdi,0x4
   194e4:	shl    rdx,0x4
   194e8:	add    rdi,rax
   194eb:	call   3900 <memset@plt>
   194f0:	mov    rsi,QWORD PTR [r12+0x8]
   194f5:	mov    rdx,QWORD PTR [r13+0x0]
   194f9:	shl    QWORD PTR [rbp+0xd0],1
   19500:	mov    rax,QWORD PTR [rbp+0xc8]
   19507:	mov    rdi,QWORD PTR [rbp+0xd8]
   1950e:	mov    rcx,QWORD PTR [rsp+0x8]
   19513:	jmp    1940d <__sprintf_chk@plt+0x1572d>
   19518:	nop    DWORD PTR [rax+rax*1+0x0]
   19520:	mov    rdi,QWORD PTR [rbp+0xd8]
   19527:	call   3680 <free@plt>
   1952c:	mov    eax,0xc
   19531:	jmp    193cb <__sprintf_chk@plt+0x156eb>
   19536:	cs nop WORD PTR [rax+rax*1+0x0]
   19540:	push   r15
   19542:	push   r14
   19544:	mov    r14,rdi
   19547:	push   r13
   19549:	push   r12
   1954b:	push   rbp
   1954c:	push   rbx
   1954d:	sub    rsp,0xa8
   19554:	mov    r15,QWORD PTR [rdi+0x48]
   19558:	mov    QWORD PTR [rsp+0x10],rsi
   1955d:	mov    rax,QWORD PTR fs:0x28
   19566:	mov    QWORD PTR [rsp+0x98],rax
   1956e:	mov    rax,QWORD PTR [rdi+0x98]
   19575:	cmp    QWORD PTR [rsi+0x8],0x0
   1957a:	mov    QWORD PTR [rsp+0x8],0x0
   19583:	mov    QWORD PTR [rsp+0x38],rax
   19588:	lea    rax,[r15*8+0x0]
   19590:	mov    QWORD PTR [rsp+0x50],rax
   19595:	jg     195ea <__sprintf_chk@plt+0x1590a>
   19597:	jmp    19ad0 <__sprintf_chk@plt+0x15df0>
   1959c:	nop    DWORD PTR [rax+0x0]
   195a0:	test   dl,0x1
   195a3:	je     195d0 <__sprintf_chk@plt+0x158f0>
   195a5:	test   al,0x8
   195a7:	jne    195d0 <__sprintf_chk@plt+0x158f0>
   195a9:	test   cl,0x20
   195ac:	je     195b3 <__sprintf_chk@plt+0x158d3>
   195ae:	test   dl,0x2
   195b1:	je     195d0 <__sprintf_chk@plt+0x158f0>
   195b3:	and    ecx,0x80
   195b9:	je     19660 <__sprintf_chk@plt+0x15980>
   195bf:	and    edx,0x8
   195c2:	jne    19660 <__sprintf_chk@plt+0x15980>
   195c8:	nop    DWORD PTR [rax+rax*1+0x0]
   195d0:	mov    rdi,QWORD PTR [rsp+0x10]
   195d5:	add    QWORD PTR [rsp+0x8],0x1
   195db:	mov    rax,QWORD PTR [rsp+0x8]
   195e0:	cmp    QWORD PTR [rdi+0x8],rax
   195e4:	jle    19ad0 <__sprintf_chk@plt+0x15df0>
   195ea:	mov    rax,QWORD PTR [rsp+0x10]
   195ef:	mov    rdi,QWORD PTR [rsp+0x8]
   195f4:	mov    rsi,QWORD PTR [rsp+0x38]
   195f9:	mov    rax,QWORD PTR [rax+0x10]
   195fd:	mov    r13,QWORD PTR [rax+rdi*8]
   19601:	mov    rax,QWORD PTR [rsi]
   19604:	mov    rbp,r13
   19607:	shl    rbp,0x4
   1960b:	add    rax,rbp
   1960e:	cmp    BYTE PTR [rax+0x8],0x4
   19612:	jne    195d0 <__sprintf_chk@plt+0x158f0>
   19614:	mov    ebx,DWORD PTR [rax+0x8]
   19617:	test   ebx,0x3ff00
   1961d:	je     19660 <__sprintf_chk@plt+0x15980>
   1961f:	mov    edx,DWORD PTR [r14+0xa0]
   19626:	mov    rsi,r15
   19629:	mov    rdi,r14
   1962c:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   19631:	mov    edx,eax
   19633:	mov    eax,ebx
   19635:	shr    eax,0x8
   19638:	mov    ecx,eax
   1963a:	and    cx,0x3ff
   1963f:	test   al,0x4
   19641:	jne    195a0 <__sprintf_chk@plt+0x158c0>
   19647:	test   al,0x8
   19649:	je     195a9 <__sprintf_chk@plt+0x158c9>
   1964f:	test   dl,0x1
   19652:	je     195a9 <__sprintf_chk@plt+0x158c9>
   19658:	jmp    195d0 <__sprintf_chk@plt+0x158f0>
   1965d:	nop    DWORD PTR [rax]
   19660:	mov    rsi,r15
   19663:	mov    rdi,r14
   19666:	mov    rbx,QWORD PTR [r14+0xc8]
   1966d:	call   12970 <__sprintf_chk@plt+0xec90>
   19672:	cmp    rax,0xffffffffffffffff
   19676:	je     198e0 <__sprintf_chk@plt+0x15c00>
   1967c:	lea    rax,[rax+rax*2]
   19680:	shl    rax,0x4
   19684:	add    rax,QWORD PTR [r14+0xd8]
   1968b:	jmp    1969e <__sprintf_chk@plt+0x159be>
   1968d:	nop    DWORD PTR [rax]
   19690:	add    rax,0x30
   19694:	cmp    BYTE PTR [rax-0x8],0x0
   19698:	je     198e0 <__sprintf_chk@plt+0x15c00>
   1969e:	cmp    r13,QWORD PTR [rax]
   196a1:	jne    19690 <__sprintf_chk@plt+0x159b0>
   196a3:	lea    rax,[r13*8+0x0]
   196ab:	mov    DWORD PTR [rsp+0x7c],0x0
   196b3:	mov    r12,QWORD PTR [rsp+0x38]
   196b8:	mov    QWORD PTR [rsp+0x58],rax
   196bd:	lea    rax,[r13+r13*2+0x0]
   196c2:	shl    rax,0x3
   196c6:	mov    QWORD PTR [rsp+0x60],rax
   196cb:	cmp    rbx,QWORD PTR [r14+0xc8]
   196d2:	jl     19811 <__sprintf_chk@plt+0x15b31>
   196d8:	jmp    195d0 <__sprintf_chk@plt+0x158f0>
   196dd:	nop    DWORD PTR [rax]
   196e0:	mov    rsi,QWORD PTR [rsp+0x60]
   196e5:	mov    rcx,QWORD PTR [r12+0x28]
   196ea:	mov    rcx,QWORD PTR [rcx+rsi*1+0x10]
   196ef:	mov    rcx,QWORD PTR [rcx]
   196f2:	lea    rcx,[rcx+rcx*2]
   196f6:	lea    rsi,[rdx+rcx*8]
   196fa:	mov    QWORD PTR [rsp+0x20],rsi
   196ff:	add    rbp,r15
   19702:	mov    edx,DWORD PTR [r14+0xa0]
   19709:	mov    rdi,r14
   1970c:	sub    rbp,rax
   1970f:	lea    rsi,[rbp-0x1]
   19713:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   19718:	mov    rdi,QWORD PTR [rsp+0x50]
   1971d:	lea    r11,[rbp*8+0x0]
   19725:	mov    QWORD PTR [rsp+0x18],0x0
   1972e:	mov    ecx,eax
   19730:	mov    rax,QWORD PTR [r14+0xb8]
   19737:	lea    r10,[rax+r11*1]
   1973b:	mov    rax,QWORD PTR [rax+rdi*1]
   1973f:	mov    rdx,QWORD PTR [r10]
   19742:	test   rax,rax
   19745:	je     19750 <__sprintf_chk@plt+0x15a70>
   19747:	mov    rax,QWORD PTR [rax+0x10]
   1974b:	mov    QWORD PTR [rsp+0x18],rax
   19750:	test   rdx,rdx
   19753:	je     19870 <__sprintf_chk@plt+0x15b90>
   19759:	lea    r10,[rsp+0x80]
   19761:	mov    rsi,QWORD PTR [rdx+0x50]
   19765:	mov    rdx,QWORD PTR [rsp+0x20]
   1976a:	mov    DWORD PTR [rsp+0x48],ecx
   1976e:	mov    rdi,r10
   19771:	mov    QWORD PTR [rsp+0x40],r11
   19776:	mov    QWORD PTR [rsp+0x30],r10
   1977b:	call   13470 <__sprintf_chk@plt+0xf790>
   19780:	mov    r10,QWORD PTR [rsp+0x30]
   19785:	mov    r11,QWORD PTR [rsp+0x40]
   1978a:	test   eax,eax
   1978c:	mov    DWORD PTR [rsp+0x7c],eax
   19790:	mov    ecx,DWORD PTR [rsp+0x48]
   19794:	jne    19ab0 <__sprintf_chk@plt+0x15dd0>
   1979a:	add    r11,QWORD PTR [r14+0xb8]
   197a1:	mov    rdx,r10
   197a4:	lea    rdi,[rsp+0x7c]
   197a9:	mov    rsi,r12
   197ac:	mov    QWORD PTR [rsp+0x30],r11
   197b1:	call   16960 <__sprintf_chk@plt+0x12c80>
   197b6:	mov    r11,QWORD PTR [rsp+0x30]
   197bb:	mov    rdi,QWORD PTR [rsp+0x90]
   197c3:	mov    QWORD PTR [r11],rax
   197c6:	call   3680 <free@plt>
   197cb:	mov    rdx,QWORD PTR [r14+0xb8]
   197d2:	cmp    QWORD PTR [rdx+rbp*8],0x0
   197d7:	je     198a1 <__sprintf_chk@plt+0x15bc1>
   197dd:	cmp    QWORD PTR [rsp+0x28],0x0
   197e3:	jne    19800 <__sprintf_chk@plt+0x15b20>
   197e5:	mov    rax,QWORD PTR [rsp+0x50]
   197ea:	mov    rdi,QWORD PTR [rsp+0x18]
   197ef:	mov    rax,QWORD PTR [rdx+rax*1]
   197f3:	cmp    QWORD PTR [rax+0x10],rdi
   197f7:	jg     19a28 <__sprintf_chk@plt+0x15d48>
   197fd:	nop    DWORD PTR [rax]
   19800:	add    rbx,0x1
   19804:	cmp    QWORD PTR [r14+0xc8],rbx
   1980b:	jle    195d0 <__sprintf_chk@plt+0x158f0>
   19811:	lea    rax,[rbx+rbx*2]
   19815:	shl    rax,0x4
   19819:	add    rax,QWORD PTR [r14+0xd8]
   19820:	cmp    QWORD PTR [rax],r13
   19823:	jne    19800 <__sprintf_chk@plt+0x15b20>
   19825:	cmp    QWORD PTR [rax+0x8],r15
   19829:	jne    19800 <__sprintf_chk@plt+0x15b20>
   1982b:	mov    rbp,QWORD PTR [rax+0x18]
   1982f:	mov    rax,QWORD PTR [rax+0x10]
   19833:	mov    rdx,QWORD PTR [r12+0x30]
   19838:	mov    rsi,rbp
   1983b:	sub    rsi,rax
   1983e:	mov    QWORD PTR [rsp+0x28],rsi
   19843:	je     196e0 <__sprintf_chk@plt+0x15a00>
   19849:	mov    rcx,QWORD PTR [r12+0x18]
   1984e:	mov    rdi,QWORD PTR [rsp+0x58]
   19853:	mov    rcx,QWORD PTR [rcx+rdi*1]
   19857:	lea    rcx,[rcx+rcx*2]
   1985b:	lea    rsi,[rdx+rcx*8]
   1985f:	mov    QWORD PTR [rsp+0x20],rsi
   19864:	jmp    196ff <__sprintf_chk@plt+0x15a1f>
   19869:	nop    DWORD PTR [rax+0x0]
   19870:	mov    rdx,QWORD PTR [rsp+0x20]
   19875:	lea    rdi,[rsp+0x7c]
   1987a:	mov    rsi,r12
   1987d:	mov    QWORD PTR [rsp+0x30],r10
   19882:	call   16960 <__sprintf_chk@plt+0x12c80>
   19887:	mov    r10,QWORD PTR [rsp+0x30]
   1988c:	mov    rdx,QWORD PTR [r14+0xb8]
   19893:	mov    QWORD PTR [r10],rax
   19896:	cmp    QWORD PTR [rdx+rbp*8],0x0
   1989b:	jne    197dd <__sprintf_chk@plt+0x15afd>
   198a1:	mov    eax,DWORD PTR [rsp+0x7c]
   198a5:	test   eax,eax
   198a7:	je     197dd <__sprintf_chk@plt+0x15afd>
   198ad:	nop    DWORD PTR [rax]
   198b0:	mov    rbx,QWORD PTR [rsp+0x98]
   198b8:	sub    rbx,QWORD PTR fs:0x28
   198c1:	jne    19d3f <__sprintf_chk@plt+0x1605f>
   198c7:	add    rsp,0xa8
   198ce:	pop    rbx
   198cf:	pop    rbp
   198d0:	pop    r12
   198d2:	pop    r13
   198d4:	pop    r14
   198d6:	pop    r15
   198d8:	ret    
   198d9:	nop    DWORD PTR [rax+0x0]
   198e0:	mov    rax,QWORD PTR [r14+0x98]
   198e7:	cmp    QWORD PTR [r14+0xe8],0x0
   198ef:	mov    rdx,QWORD PTR [rax]
   198f2:	mov    QWORD PTR [rsp+0x60],rax
   198f7:	mov    rax,QWORD PTR [rdx+rbp*1]
   198fb:	mov    QWORD PTR [rsp+0x58],rax
   19900:	jle    196a3 <__sprintf_chk@plt+0x159c3>
   19906:	mov    QWORD PTR [rsp+0x18],0x0
   1990f:	mov    r10,QWORD PTR [r14+0x8]
   19913:	mov    QWORD PTR [rsp+0x68],rbx
   19918:	mov    QWORD PTR [rsp+0x40],r15
   1991d:	mov    QWORD PTR [rsp+0x48],r13
   19922:	mov    rax,QWORD PTR [r14+0xf8]
   19929:	mov    rsi,QWORD PTR [rsp+0x18]
   1992e:	mov    rdi,QWORD PTR [rsp+0x58]
   19933:	mov    rbx,QWORD PTR [rax+rsi*8]
   19937:	mov    rax,QWORD PTR [rbx+0x8]
   1993b:	shl    rax,0x4
   1993f:	cmp    rdi,QWORD PTR [rdx+rax*1]
   19943:	je     19970 <__sprintf_chk@plt+0x15c90>
   19945:	add    QWORD PTR [rsp+0x18],0x1
   1994b:	mov    rax,QWORD PTR [rsp+0x18]
   19950:	cmp    rax,QWORD PTR [r14+0xe8]
   19957:	jge    19cc0 <__sprintf_chk@plt+0x15fe0>
   1995d:	mov    rax,QWORD PTR [rsp+0x60]
   19962:	mov    rdx,QWORD PTR [rax]
   19965:	jmp    19922 <__sprintf_chk@plt+0x15c42>
   19967:	nop    WORD PTR [rax+rax*1+0x0]
   19970:	cmp    QWORD PTR [rbx+0x20],0x0
   19975:	mov    r15,QWORD PTR [rbx]
   19978:	jle    19d32 <__sprintf_chk@plt+0x16052>
   1997e:	mov    rbp,QWORD PTR [rsp+0x40]
   19983:	xor    r12d,r12d
   19986:	mov    r9,r10
   19989:	jmp    1999e <__sprintf_chk@plt+0x15cbe>
   1998b:	nop    DWORD PTR [rax+rax*1+0x0]
   19990:	add    r12,0x1
   19994:	cmp    r12,QWORD PTR [rbx+0x20]
   19998:	jge    19ad7 <__sprintf_chk@plt+0x15df7>
   1999e:	mov    rax,QWORD PTR [rbx+0x28]
   199a2:	mov    rcx,r15
   199a5:	mov    r8,rbp
   199a8:	mov    r13,QWORD PTR [rax+r12*8]
   199ac:	mov    r15,QWORD PTR [r13+0x8]
   199b0:	mov    rdx,r15
   199b3:	sub    rdx,rcx
   199b6:	add    rbp,rdx
   199b9:	test   rdx,rdx
   199bc:	jle    199fb <__sprintf_chk@plt+0x15d1b>
   199be:	cmp    QWORD PTR [r14+0x30],rbp
   199c2:	jl     19a68 <__sprintf_chk@plt+0x15d88>
   199c8:	lea    rsi,[r9+rcx*1]
   199cc:	lea    rdi,[r9+r8*1]
   199d0:	mov    QWORD PTR [rsp+0x30],rcx
   199d5:	mov    QWORD PTR [rsp+0x28],r8
   199da:	mov    QWORD PTR [rsp+0x20],r9
   199df:	call   3960 <memcmp@plt>
   199e4:	mov    r9,QWORD PTR [rsp+0x20]
   199e9:	mov    r8,QWORD PTR [rsp+0x28]
   199ee:	test   eax,eax
   199f0:	mov    rcx,QWORD PTR [rsp+0x30]
   199f5:	jne    19c90 <__sprintf_chk@plt+0x15fb0>
   199fb:	mov    r8,QWORD PTR [rsp+0x40]
   19a00:	mov    rcx,QWORD PTR [rsp+0x48]
   19a05:	mov    rdx,r13
   19a08:	mov    rsi,rbx
   19a0b:	mov    rdi,r14
   19a0e:	call   19390 <__sprintf_chk@plt+0x156b0>
   19a13:	mov    r9,QWORD PTR [r14+0x8]
   19a17:	cmp    eax,0x1
   19a1a:	jbe    19990 <__sprintf_chk@plt+0x15cb0>
   19a20:	jmp    198b0 <__sprintf_chk@plt+0x15bd0>
   19a25:	nop    DWORD PTR [rax]
   19a28:	mov    rbp,QWORD PTR [rsp+0x20]
   19a2d:	mov    rdx,r15
   19a30:	mov    rdi,r14
   19a33:	mov    rsi,rbp
   19a36:	call   141c0 <__sprintf_chk@plt+0x104e0>
   19a3b:	mov    DWORD PTR [rsp+0x7c],eax
   19a3f:	test   eax,eax
   19a41:	jne    198b0 <__sprintf_chk@plt+0x15bd0>
   19a47:	mov    rsi,rbp
   19a4a:	mov    rdi,r14
   19a4d:	call   19540 <__sprintf_chk@plt+0x15860>
   19a52:	mov    DWORD PTR [rsp+0x7c],eax
   19a56:	test   eax,eax
   19a58:	je     19800 <__sprintf_chk@plt+0x15b20>
   19a5e:	jmp    198b0 <__sprintf_chk@plt+0x15bd0>
   19a63:	nop    DWORD PTR [rax+rax*1+0x0]
   19a68:	mov    QWORD PTR [rsp+0x20],rdx
   19a6d:	cmp    QWORD PTR [r14+0x58],rbp
   19a71:	jl     19c90 <__sprintf_chk@plt+0x15fb0>
   19a77:	mov    rsi,rbp
   19a7a:	mov    rdi,r14
   19a7d:	mov    QWORD PTR [rsp+0x30],r8
   19a82:	mov    QWORD PTR [rsp+0x28],rcx
   19a87:	call   18940 <__sprintf_chk@plt+0x14c60>
   19a8c:	test   eax,eax
   19a8e:	jne    198b0 <__sprintf_chk@plt+0x15bd0>
   19a94:	mov    r9,QWORD PTR [r14+0x8]
   19a98:	mov    rdx,QWORD PTR [rsp+0x20]
   19a9d:	mov    r8,QWORD PTR [rsp+0x30]
   19aa2:	mov    rcx,QWORD PTR [rsp+0x28]
   19aa7:	jmp    199c8 <__sprintf_chk@plt+0x15ce8>
   19aac:	nop    DWORD PTR [rax+0x0]
   19ab0:	mov    rdi,QWORD PTR [rsp+0x90]
   19ab8:	call   3680 <free@plt>
   19abd:	mov    eax,DWORD PTR [rsp+0x7c]
   19ac1:	jmp    198b0 <__sprintf_chk@plt+0x15bd0>
   19ac6:	cs nop WORD PTR [rax+rax*1+0x0]
   19ad0:	xor    eax,eax
   19ad2:	jmp    198b0 <__sprintf_chk@plt+0x15bd0>
   19ad7:	mov    r10,r9
   19ada:	lea    r13,[r15+0x1]
   19ade:	mov    r11,rbp
   19ae1:	cmp    QWORD PTR [rsp+0x40],r13
   19ae6:	jl     19945 <__sprintf_chk@plt+0x15c65>
   19aec:	mov    rbp,QWORD PTR [rsp+0x58]
   19af1:	mov    r12,r11
   19af4:	mov    r15,r14
   19af7:	nop    WORD PTR [rax+rax*1+0x0]
   19b00:	mov    rax,r13
   19b03:	sub    rax,QWORD PTR [rbx]
   19b06:	test   rax,rax
   19b09:	jle    19b2d <__sprintf_chk@plt+0x15e4d>
   19b0b:	cmp    QWORD PTR [r15+0x30],r12
   19b0f:	jle    19cd4 <__sprintf_chk@plt+0x15ff4>
   19b15:	movzx  ecx,BYTE PTR [r10+r13*1-0x1]
   19b1b:	lea    rax,[r12+0x1]
   19b20:	cmp    BYTE PTR [r10+r12*1],cl
   19b24:	jne    19c46 <__sprintf_chk@plt+0x15f66>
   19b2a:	mov    r12,rax
   19b2d:	mov    rax,QWORD PTR [r15+0xb8]
   19b34:	mov    rax,QWORD PTR [rax+r13*8]
   19b38:	test   rax,rax
   19b3b:	je     19c37 <__sprintf_chk@plt+0x15f57>
   19b41:	mov    rcx,QWORD PTR [rax+0x10]
   19b45:	test   rcx,rcx
   19b48:	jle    19c37 <__sprintf_chk@plt+0x15f57>
   19b4e:	mov    rdi,QWORD PTR [rax+0x18]
   19b52:	mov    rax,QWORD PTR [rsp+0x60]
   19b57:	xor    edx,edx
   19b59:	mov    rsi,QWORD PTR [rax]
   19b5c:	jmp    19b6d <__sprintf_chk@plt+0x15e8d>
   19b5e:	xchg   ax,ax
   19b60:	add    rdx,0x1
   19b64:	cmp    rcx,rdx
   19b67:	je     19c37 <__sprintf_chk@plt+0x15f57>
   19b6d:	mov    r14,QWORD PTR [rdi+rdx*8]
   19b71:	mov    rax,r14
   19b74:	shl    rax,0x4
   19b78:	add    rax,rsi
   19b7b:	cmp    BYTE PTR [rax+0x8],0x9
   19b7f:	jne    19b60 <__sprintf_chk@plt+0x15e80>
   19b81:	cmp    rbp,QWORD PTR [rax]
   19b84:	jne    19b60 <__sprintf_chk@plt+0x15e80>
   19b86:	cmp    r14,0xffffffffffffffff
   19b8a:	je     19c37 <__sprintf_chk@plt+0x15f57>
   19b90:	mov    rsi,QWORD PTR [rbx+0x10]
   19b94:	mov    rcx,QWORD PTR [rbx]
   19b97:	test   rsi,rsi
   19b9a:	je     19c4e <__sprintf_chk@plt+0x15f6e>
   19ba0:	mov    QWORD PTR [rsp+0x20],r10
   19ba5:	sub    rsp,0x8
   19ba9:	mov    rdx,QWORD PTR [rbx+0x8]
   19bad:	mov    r9,r13
   19bb0:	push   0x9
   19bb2:	mov    r8,r14
   19bb5:	mov    rdi,r15
   19bb8:	call   18c10 <__sprintf_chk@plt+0x14f30>
   19bbd:	pop    rdx
   19bbe:	pop    rcx
   19bbf:	cmp    eax,0x1
   19bc2:	mov    r10,QWORD PTR [rsp+0x20]
   19bc7:	je     19c37 <__sprintf_chk@plt+0x15f57>
   19bc9:	test   eax,eax
   19bcb:	jne    198b0 <__sprintf_chk@plt+0x15bd0>
   19bd1:	mov    rax,QWORD PTR [rbx+0x18]
   19bd5:	cmp    QWORD PTR [rbx+0x20],rax
   19bd9:	je     19cfc <__sprintf_chk@plt+0x1601c>
   19bdf:	mov    esi,0x28
   19be4:	mov    edi,0x1
   19be9:	call   3990 <calloc@plt>
   19bee:	mov    rdx,rax
   19bf1:	test   rax,rax
   19bf4:	je     19c86 <__sprintf_chk@plt+0x15fa6>
   19bfa:	mov    rax,QWORD PTR [rbx+0x20]
   19bfe:	mov    rcx,QWORD PTR [rbx+0x28]
   19c02:	mov    rsi,rbx
   19c05:	mov    rdi,r15
   19c08:	mov    r8,QWORD PTR [rsp+0x40]
   19c0d:	mov    QWORD PTR [rcx+rax*8],rdx
   19c11:	add    rax,0x1
   19c15:	mov    rcx,QWORD PTR [rsp+0x48]
   19c1a:	mov    QWORD PTR [rdx],r14
   19c1d:	mov    QWORD PTR [rdx+0x8],r13
   19c21:	mov    QWORD PTR [rbx+0x20],rax
   19c25:	call   19390 <__sprintf_chk@plt+0x156b0>
   19c2a:	mov    r10,QWORD PTR [r15+0x8]
   19c2e:	cmp    eax,0x1
   19c31:	ja     198b0 <__sprintf_chk@plt+0x15bd0>
   19c37:	add    r13,0x1
   19c3b:	cmp    QWORD PTR [rsp+0x40],r13
   19c40:	jge    19b00 <__sprintf_chk@plt+0x15e20>
   19c46:	mov    r14,r15
   19c49:	jmp    19945 <__sprintf_chk@plt+0x15c65>
   19c4e:	mov    rsi,r13
   19c51:	mov    edi,0x18
   19c56:	mov    QWORD PTR [rsp+0x28],r10
   19c5b:	sub    rsi,rcx
   19c5e:	mov    QWORD PTR [rsp+0x20],rcx
   19c63:	add    rsi,0x1
   19c67:	call   3990 <calloc@plt>
   19c6c:	mov    rcx,QWORD PTR [rsp+0x20]
   19c71:	mov    r10,QWORD PTR [rsp+0x28]
   19c76:	test   rax,rax
   19c79:	mov    QWORD PTR [rbx+0x10],rax
   19c7d:	mov    rsi,rax
   19c80:	jne    19ba0 <__sprintf_chk@plt+0x15ec0>
   19c86:	mov    eax,0xc
   19c8b:	jmp    198b0 <__sprintf_chk@plt+0x15bd0>
   19c90:	mov    r10,r9
   19c93:	mov    r13,rcx
   19c96:	mov    r11,r8
   19c99:	cmp    r12,QWORD PTR [rbx+0x20]
   19c9d:	jl     19945 <__sprintf_chk@plt+0x15c65>
   19ca3:	test   r12,r12
   19ca6:	je     19ae1 <__sprintf_chk@plt+0x15e01>
   19cac:	mov    r15,rcx
   19caf:	mov    rbp,r8
   19cb2:	jmp    19ada <__sprintf_chk@plt+0x15dfa>
   19cb7:	nop    WORD PTR [rax+rax*1+0x0]
   19cc0:	mov    rbx,QWORD PTR [rsp+0x68]
   19cc5:	mov    r15,QWORD PTR [rsp+0x40]
   19cca:	mov    r13,QWORD PTR [rsp+0x48]
   19ccf:	jmp    196a3 <__sprintf_chk@plt+0x159c3>
   19cd4:	cmp    QWORD PTR [r15+0x58],r12
   19cd8:	jle    19c46 <__sprintf_chk@plt+0x15f66>
   19cde:	lea    esi,[r12+0x1]
   19ce3:	mov    rdi,r15
   19ce6:	call   187f0 <__sprintf_chk@plt+0x14b10>
   19ceb:	test   eax,eax
   19ced:	jne    198b0 <__sprintf_chk@plt+0x15bd0>
   19cf3:	mov    r10,QWORD PTR [r15+0x8]
   19cf7:	jmp    19b15 <__sprintf_chk@plt+0x15e35>
   19cfc:	lea    rdx,[rax+rax*1+0x1]
   19d01:	mov    rdi,QWORD PTR [rbx+0x28]
   19d05:	lea    rsi,[rdx*8+0x0]
   19d0d:	mov    QWORD PTR [rsp+0x20],rdx
   19d12:	call   3b20 <realloc@plt>
   19d17:	test   rax,rax
   19d1a:	je     19c86 <__sprintf_chk@plt+0x15fa6>
   19d20:	mov    rdx,QWORD PTR [rsp+0x20]
   19d25:	mov    QWORD PTR [rbx+0x28],rax
   19d29:	mov    QWORD PTR [rbx+0x18],rdx
   19d2d:	jmp    19bdf <__sprintf_chk@plt+0x15eff>
   19d32:	mov    r11,QWORD PTR [rsp+0x40]
   19d37:	mov    r13,r15
   19d3a:	jmp    19ae1 <__sprintf_chk@plt+0x15e01>
   19d3f:	call   3840 <__stack_chk_fail@plt>
   19d44:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   19d4f:	nop
   19d50:	push   r15
   19d52:	push   r14
   19d54:	push   r13
   19d56:	push   r12
   19d58:	push   rbp
   19d59:	mov    rbp,rdi
   19d5c:	push   rbx
   19d5d:	mov    rbx,rsi
   19d60:	sub    rsp,0x38
   19d64:	mov    r13,QWORD PTR [rsi+0x48]
   19d68:	mov    r14,QWORD PTR [rsi+0xb8]
   19d6f:	mov    rax,QWORD PTR fs:0x28
   19d78:	mov    QWORD PTR [rsp+0x28],rax
   19d7d:	xor    eax,eax
   19d7f:	mov    r15,QWORD PTR [rsi+0x98]
   19d86:	lea    r12,[r13*8+0x0]
   19d8e:	add    r14,r12
   19d91:	cmp    QWORD PTR [rsi+0xc0],r13
   19d98:	jge    19de0 <__sprintf_chk@plt+0x16100>
   19d9a:	mov    QWORD PTR [r14],rdx
   19d9d:	mov    r12,rdx
   19da0:	mov    QWORD PTR [rsi+0xc0],r13
   19da7:	cmp    QWORD PTR [r15+0x98],0x0
   19daf:	jne    19ed8 <__sprintf_chk@plt+0x161f8>
   19db5:	mov    rax,QWORD PTR [rsp+0x28]
   19dba:	sub    rax,QWORD PTR fs:0x28
   19dc3:	jne    19f30 <__sprintf_chk@plt+0x16250>
   19dc9:	add    rsp,0x38
   19dcd:	mov    rax,r12
   19dd0:	pop    rbx
   19dd1:	pop    rbp
   19dd2:	pop    r12
   19dd4:	pop    r13
   19dd6:	pop    r14
   19dd8:	pop    r15
   19dda:	ret    
   19ddb:	nop    DWORD PTR [rax+rax*1+0x0]
   19de0:	mov    rax,QWORD PTR [r14]
   19de3:	test   rax,rax
   19de6:	je     19ec8 <__sprintf_chk@plt+0x161e8>
   19dec:	mov    r8,QWORD PTR [rax+0x50]
   19df0:	test   rdx,rdx
   19df3:	je     19e80 <__sprintf_chk@plt+0x161a0>
   19df9:	mov    rax,QWORD PTR [rdx+0x50]
   19dfd:	lea    r14,[rsp+0x10]
   19e02:	mov    rdx,r8
   19e05:	mov    rdi,r14
   19e08:	mov    rsi,rax
   19e0b:	mov    QWORD PTR [rsp],rax
   19e0f:	call   13470 <__sprintf_chk@plt+0xf790>
   19e14:	mov    DWORD PTR [rbp+0x0],eax
   19e17:	test   eax,eax
   19e19:	jne    19f28 <__sprintf_chk@plt+0x16248>
   19e1f:	mov    rax,QWORD PTR [rbx+0x48]
   19e23:	mov    edx,DWORD PTR [rbx+0xa0]
   19e29:	mov    rdi,rbx
   19e2c:	lea    rsi,[rax-0x1]
   19e30:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   19e35:	mov    rdx,r14
   19e38:	mov    rsi,r15
   19e3b:	mov    rdi,rbp
   19e3e:	mov    r8,QWORD PTR [rbx+0xb8]
   19e45:	mov    ecx,eax
   19e47:	add    r8,r12
   19e4a:	mov    QWORD PTR [rsp+0x8],r8
   19e4f:	call   16960 <__sprintf_chk@plt+0x12c80>
   19e54:	mov    r8,QWORD PTR [rsp+0x8]
   19e59:	cmp    QWORD PTR [rsp],0x0
   19e5e:	mov    r12,rax
   19e61:	mov    QWORD PTR [r8],rax
   19e64:	je     19da7 <__sprintf_chk@plt+0x160c7>
   19e6a:	mov    rdi,QWORD PTR [rsp+0x20]
   19e6f:	call   3680 <free@plt>
   19e74:	jmp    19da7 <__sprintf_chk@plt+0x160c7>
   19e79:	nop    DWORD PTR [rax+0x0]
   19e80:	movdqu xmm0,XMMWORD PTR [r8]
   19e85:	mov    edx,DWORD PTR [rsi+0xa0]
   19e8b:	mov    rdi,rbx
   19e8e:	lea    rsi,[r13-0x1]
   19e92:	movups XMMWORD PTR [rsp+0x10],xmm0
   19e97:	mov    rax,QWORD PTR [r8+0x10]
   19e9b:	mov    QWORD PTR [rsp+0x20],rax
   19ea0:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   19ea5:	lea    rdx,[rsp+0x10]
   19eaa:	mov    rsi,r15
   19ead:	mov    rdi,rbp
   19eb0:	mov    ecx,eax
   19eb2:	call   16960 <__sprintf_chk@plt+0x12c80>
   19eb7:	mov    QWORD PTR [r14],rax
   19eba:	mov    r12,rax
   19ebd:	jmp    19da7 <__sprintf_chk@plt+0x160c7>
   19ec2:	nop    WORD PTR [rax+rax*1+0x0]
   19ec8:	mov    QWORD PTR [r14],rdx
   19ecb:	mov    r12,rdx
   19ece:	jmp    19da7 <__sprintf_chk@plt+0x160c7>
   19ed3:	nop    DWORD PTR [rax+rax*1+0x0]
   19ed8:	test   r12,r12
   19edb:	je     19f28 <__sprintf_chk@plt+0x16248>
   19edd:	lea    r14,[r12+0x8]
   19ee2:	mov    rdx,r13
   19ee5:	mov    rdi,rbx
   19ee8:	mov    rsi,r14
   19eeb:	call   141c0 <__sprintf_chk@plt+0x104e0>
   19ef0:	mov    DWORD PTR [rbp+0x0],eax
   19ef3:	test   eax,eax
   19ef5:	jne    19f28 <__sprintf_chk@plt+0x16248>
   19ef7:	test   BYTE PTR [r12+0x68],0x40
   19efd:	je     19db5 <__sprintf_chk@plt+0x160d5>
   19f03:	mov    rsi,r14
   19f06:	mov    rdi,rbx
   19f09:	call   19540 <__sprintf_chk@plt+0x15860>
   19f0e:	mov    DWORD PTR [rbp+0x0],eax
   19f11:	test   eax,eax
   19f13:	jne    19f28 <__sprintf_chk@plt+0x16248>
   19f15:	mov    rax,QWORD PTR [rbx+0xb8]
   19f1c:	mov    r12,QWORD PTR [rax+r13*8]
   19f20:	jmp    19db5 <__sprintf_chk@plt+0x160d5>
   19f25:	nop    DWORD PTR [rax]
   19f28:	xor    r12d,r12d
   19f2b:	jmp    19db5 <__sprintf_chk@plt+0x160d5>
   19f30:	call   3840 <__stack_chk_fail@plt>
   19f35:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   19f40:	push   r15
   19f42:	push   r14
   19f44:	push   r13
   19f46:	push   r12
   19f48:	push   rbp
   19f49:	push   rbx
   19f4a:	sub    rsp,0xf8
   19f51:	mov    QWORD PTR [rsp+0x8],rdi
   19f56:	mov    edi,0x3800
   19f5b:	mov    QWORD PTR [rsp+0x48],rsi
   19f60:	mov    rax,QWORD PTR fs:0x28
   19f69:	mov    QWORD PTR [rsp+0xe8],rax
   19f71:	xor    eax,eax
   19f73:	call   3a70 <malloc@plt>
   19f78:	mov    r8,QWORD PTR [rsp+0x8]
   19f7d:	test   rax,rax
   19f80:	mov    QWORD PTR [rsp+0x20],rax
   19f85:	je     1a363 <__sprintf_chk@plt+0x16683>
   19f8b:	mov    r9,QWORD PTR [rsp+0x48]
   19f90:	mov    rax,QWORD PTR [rsp+0x20]
   19f95:	pxor   xmm0,xmm0
   19f99:	movups XMMWORD PTR [rsp+0x80],xmm0
   19fa1:	add    rax,0x1800
   19fa7:	cmp    QWORD PTR [r9+0x10],0x0
   19fac:	mov    QWORD PTR [r9+0x58],0x0
   19fb4:	mov    QWORD PTR [rsp+0x8],rax
   19fb9:	mov    QWORD PTR [r9+0x60],0x0
   19fc1:	movups XMMWORD PTR [rsp+0x90],xmm0
   19fc9:	jle    1a9a0 <__sprintf_chk@plt+0x16cc0>
   19fcf:	mov    QWORD PTR [rsp+0x10],0x0
   19fd8:	xor    r12d,r12d
   19fdb:	mov    QWORD PTR [rsp+0x38],r8
   19fe0:	mov    r8,r12
   19fe3:	mov    rdi,QWORD PTR [rsp+0x10]
   19fe8:	lea    rax,[rdi*8+0x0]
   19ff0:	mov    QWORD PTR [rsp+0x30],rax
   19ff5:	mov    rax,QWORD PTR [r9+0x18]
   19ff9:	mov    r15,QWORD PTR [rax+rdi*8]
   19ffd:	mov    rax,QWORD PTR [rsp+0x38]
   1a002:	shl    r15,0x4
   1a006:	add    r15,QWORD PTR [rax]
   1a009:	mov    eax,DWORD PTR [r15+0x8]
   1a00d:	movzx  r12d,BYTE PTR [r15+0x8]
   1a012:	shr    eax,0x8
   1a015:	and    ax,0x3ff
   1a019:	cmp    r12d,0x1
   1a01d:	je     1a390 <__sprintf_chk@plt+0x166b0>
   1a023:	cmp    r12d,0x3
   1a027:	je     1a84b <__sprintf_chk@plt+0x16b6b>
   1a02d:	cmp    r12d,0x5
   1a031:	je     1a730 <__sprintf_chk@plt+0x16a50>
   1a037:	cmp    r12d,0x7
   1a03b:	je     1a879 <__sprintf_chk@plt+0x16b99>
   1a041:	add    QWORD PTR [rsp+0x10],0x1
   1a047:	mov    rax,QWORD PTR [rsp+0x10]
   1a04c:	cmp    rax,QWORD PTR [r9+0x10]
   1a050:	jl     19fe3 <__sprintf_chk@plt+0x16303>
   1a052:	mov    r12,r8
   1a055:	mov    r8,QWORD PTR [rsp+0x38]
   1a05a:	test   r12,r12
   1a05d:	jle    1aa07 <__sprintf_chk@plt+0x16d27>
   1a063:	lea    rbx,[r12+0x1]
   1a068:	mov    QWORD PTR [rsp+0x18],r8
   1a06d:	mov    QWORD PTR [rsp+0x60],rbx
   1a072:	shl    rbx,0x3
   1a076:	mov    QWORD PTR [rsp+0x68],0x0
   1a07f:	mov    rdi,rbx
   1a082:	call   3a70 <malloc@plt>
   1a087:	mov    QWORD PTR [rsp+0x70],rax
   1a08c:	mov    rbp,rax
   1a08f:	test   rax,rax
   1a092:	je     1a32a <__sprintf_chk@plt+0x1664a>
   1a098:	lea    rax,[r12+r12*2]
   1a09c:	mov    DWORD PTR [rsp+0x5c],0x0
   1a0a4:	shl    rax,0x3
   1a0a8:	mov    rdi,rax
   1a0ab:	mov    QWORD PTR [rsp+0x40],rax
   1a0b0:	call   3a70 <malloc@plt>
   1a0b5:	mov    r8,QWORD PTR [rsp+0x18]
   1a0ba:	test   rax,rax
   1a0bd:	mov    QWORD PTR [rsp+0x10],rax
   1a0c2:	je     1a32a <__sprintf_chk@plt+0x1664a>
   1a0c8:	mov    rax,QWORD PTR [rsp+0x10]
   1a0cd:	sub    rbx,0x8
   1a0d1:	mov    BYTE PTR [rsp+0x38],0x0
   1a0d6:	xor    ebp,ebp
   1a0d8:	pxor   xmm0,xmm0
   1a0dc:	mov    r13,QWORD PTR [rsp+0x8]
   1a0e1:	mov    QWORD PTR [rsp+0x8],r12
   1a0e6:	mov    r12,r8
   1a0e9:	add    rax,rbx
   1a0ec:	movups XMMWORD PTR [rsp+0xc0],xmm0
   1a0f4:	add    rbx,rax
   1a0f7:	mov    QWORD PTR [rsp+0x28],rax
   1a0fc:	mov    rax,QWORD PTR [rsp+0x20]
   1a101:	mov    QWORD PTR [rsp+0x30],rbx
   1a106:	lea    rbx,[rsp+0x60]
   1a10b:	lea    r15,[rax+0x8]
   1a10f:	lea    rax,[rsp+0x5c]
   1a114:	movups XMMWORD PTR [rsp+0xd0],xmm0
   1a11c:	mov    QWORD PTR [rsp+0x18],rax
   1a121:	mov    QWORD PTR [rsp+0x68],0x0
   1a12a:	xor    r14d,r14d
   1a12d:	cmp    QWORD PTR [r15],0x0
   1a131:	jle    1a179 <__sprintf_chk@plt+0x16499>
   1a133:	nop    DWORD PTR [rax+rax*1+0x0]
   1a138:	mov    rax,QWORD PTR [r15+0x8]
   1a13c:	mov    rdx,QWORD PTR [rax+r14*8]
   1a140:	mov    rax,QWORD PTR [r12+0x18]
   1a145:	mov    rax,QWORD PTR [rax+rdx*8]
   1a149:	cmp    rax,0xffffffffffffffff
   1a14d:	je     1a170 <__sprintf_chk@plt+0x16490>
   1a14f:	lea    rdx,[rax+rax*2]
   1a153:	mov    rax,QWORD PTR [r12+0x30]
   1a158:	mov    rdi,rbx
   1a15b:	lea    rsi,[rax+rdx*8]
   1a15f:	call   13070 <__sprintf_chk@plt+0xf390>
   1a164:	mov    DWORD PTR [rsp+0x5c],eax
   1a168:	test   eax,eax
   1a16a:	jne    1a316 <__sprintf_chk@plt+0x16636>
   1a170:	add    r14,0x1
   1a174:	cmp    QWORD PTR [r15],r14
   1a177:	jg     1a138 <__sprintf_chk@plt+0x16458>
   1a179:	mov    rdi,QWORD PTR [rsp+0x18]
   1a17e:	xor    ecx,ecx
   1a180:	mov    rdx,rbx
   1a183:	mov    rsi,r12
   1a186:	call   16960 <__sprintf_chk@plt+0x12c80>
   1a18b:	mov    rdi,QWORD PTR [rsp+0x10]
   1a190:	mov    QWORD PTR [rdi+rbp*8],rax
   1a194:	test   rax,rax
   1a197:	je     1a30a <__sprintf_chk@plt+0x1662a>
   1a19d:	cmp    BYTE PTR [rax+0x68],0x0
   1a1a1:	js     1a8c3 <__sprintf_chk@plt+0x16be3>
   1a1a7:	mov    rdi,QWORD PTR [rsp+0x28]
   1a1ac:	mov    QWORD PTR [rdi+rbp*8],rax
   1a1b0:	mov    rdi,QWORD PTR [rsp+0x30]
   1a1b5:	mov    QWORD PTR [rdi+rbp*8],rax
   1a1b9:	lea    rdx,[rsp+0xc0]
   1a1c1:	lea    rdi,[rsp+0xe0]
   1a1c9:	mov    rcx,r13
   1a1cc:	mov    rax,rdx
   1a1cf:	mov    rsi,QWORD PTR [rcx]
   1a1d2:	or     QWORD PTR [rax],rsi
   1a1d5:	add    rax,0x8
   1a1d9:	add    rcx,0x8
   1a1dd:	cmp    rdi,rax
   1a1e0:	jne    1a1cf <__sprintf_chk@plt+0x164ef>
   1a1e2:	add    rbp,0x1
   1a1e6:	add    r15,0x18
   1a1ea:	add    r13,0x20
   1a1ee:	cmp    rbp,QWORD PTR [rsp+0x8]
   1a1f3:	jne    1a121 <__sprintf_chk@plt+0x16441>
   1a1f9:	cmp    BYTE PTR [rsp+0x38],0x0
   1a1fe:	mov    QWORD PTR [rsp+0x18],r12
   1a203:	mov    r12,QWORD PTR [rsp+0x8]
   1a208:	mov    QWORD PTR [rsp+0x8],rdx
   1a20d:	jne    1aa20 <__sprintf_chk@plt+0x16d40>
   1a213:	mov    edi,0x8
   1a218:	mov    esi,0x100
   1a21d:	call   3990 <calloc@plt>
   1a222:	mov    rdi,QWORD PTR [rsp+0x48]
   1a227:	mov    QWORD PTR [rdi+0x58],rax
   1a22b:	test   rax,rax
   1a22e:	je     1a31b <__sprintf_chk@plt+0x1663b>
   1a234:	mov    rdi,QWORD PTR [rsp+0x20]
   1a239:	mov    r13,QWORD PTR [rsp+0x10]
   1a23e:	xor    ebx,ebx
   1a240:	mov    r14,QWORD PTR [rsp+0x28]
   1a245:	mov    r8,QWORD PTR [rsp+0x18]
   1a24a:	mov    rdx,QWORD PTR [rsp+0x8]
   1a24f:	lea    rbp,[rdi+0x1820]
   1a256:	mov    rdi,rbx
   1a259:	mov    rcx,QWORD PTR [rdx+rbx*8]
   1a25d:	mov    esi,0x1
   1a262:	shl    rdi,0x9
   1a266:	add    rdi,rax
   1a269:	test   rcx,rcx
   1a26c:	je     1a285 <__sprintf_chk@plt+0x165a5>
   1a26e:	xchg   ax,ax
   1a270:	test   cl,0x1
   1a273:	jne    1a950 <__sprintf_chk@plt+0x16c70>
   1a279:	add    rsi,rsi
   1a27c:	add    rdi,0x8
   1a280:	shr    rcx,1
   1a283:	jne    1a270 <__sprintf_chk@plt+0x16590>
   1a285:	add    rbx,0x1
   1a289:	add    rbp,0x8
   1a28d:	cmp    rbx,0x4
   1a291:	jne    1a256 <__sprintf_chk@plt+0x16576>
   1a293:	test   BYTE PTR [rsp+0xc1],0x4
   1a29b:	je     1a2c2 <__sprintf_chk@plt+0x165e2>
   1a29d:	xor    edx,edx
   1a29f:	mov    rcx,rdx
   1a2a2:	mov    rdi,QWORD PTR [rsp+0x20]
   1a2a7:	shl    rcx,0x5
   1a2ab:	test   BYTE PTR [rdi+rcx*1+0x1801],0x4
   1a2b3:	jne    1a9e3 <__sprintf_chk@plt+0x16d03>
   1a2b9:	add    rdx,0x1
   1a2bd:	cmp    rdx,r12
   1a2c0:	jne    1a29f <__sprintf_chk@plt+0x165bf>
   1a2c2:	mov    rdi,QWORD PTR [rsp+0x10]
   1a2c7:	call   3680 <free@plt>
   1a2cc:	mov    rdi,QWORD PTR [rsp+0x70]
   1a2d1:	call   3680 <free@plt>
   1a2d6:	mov    rax,QWORD PTR [rsp+0x20]
   1a2db:	mov    rbx,QWORD PTR [rsp+0x40]
   1a2e0:	lea    rbp,[rax+0x10]
   1a2e4:	add    rbx,rbp
   1a2e7:	mov    rdi,QWORD PTR [rbp+0x0]
   1a2eb:	add    rbp,0x18
   1a2ef:	call   3680 <free@plt>
   1a2f4:	cmp    rbx,rbp
   1a2f7:	jne    1a2e7 <__sprintf_chk@plt+0x16607>
   1a2f9:	mov    rdi,QWORD PTR [rsp+0x20]
   1a2fe:	call   3680 <free@plt>
   1a303:	mov    eax,0x1
   1a308:	jmp    1a365 <__sprintf_chk@plt+0x16685>
   1a30a:	mov    ecx,DWORD PTR [rsp+0x5c]
   1a30e:	test   ecx,ecx
   1a310:	je     1a19d <__sprintf_chk@plt+0x164bd>
   1a316:	mov    r12,QWORD PTR [rsp+0x8]
   1a31b:	mov    rdi,QWORD PTR [rsp+0x10]
   1a320:	call   3680 <free@plt>
   1a325:	mov    rbp,QWORD PTR [rsp+0x70]
   1a32a:	mov    rdi,rbp
   1a32d:	call   3680 <free@plt>
   1a332:	mov    rax,QWORD PTR [rsp+0x20]
   1a337:	lea    rbx,[rax+0x10]
   1a33b:	lea    rax,[r12+r12*2]
   1a33f:	lea    rbp,[rbx+rax*8]
   1a343:	nop    DWORD PTR [rax+rax*1+0x0]
   1a348:	mov    rdi,QWORD PTR [rbx]
   1a34b:	add    rbx,0x18
   1a34f:	call   3680 <free@plt>
   1a354:	cmp    rbx,rbp
   1a357:	jne    1a348 <__sprintf_chk@plt+0x16668>
   1a359:	mov    rdi,QWORD PTR [rsp+0x20]
   1a35e:	call   3680 <free@plt>
   1a363:	xor    eax,eax
   1a365:	mov    rdi,QWORD PTR [rsp+0xe8]
   1a36d:	sub    rdi,QWORD PTR fs:0x28
   1a376:	jne    1aada <__sprintf_chk@plt+0x16dfa>
   1a37c:	add    rsp,0xf8
   1a383:	pop    rbx
   1a384:	pop    rbp
   1a385:	pop    r12
   1a387:	pop    r13
   1a389:	pop    r14
   1a38b:	pop    r15
   1a38d:	ret    
   1a38e:	xchg   ax,ax
   1a390:	movzx  ecx,BYTE PTR [r15]
   1a394:	lea    rbp,[rsp+0x80]
   1a39c:	mov    edi,0x1
   1a3a1:	mov    rdx,rcx
   1a3a4:	shl    rdi,cl
   1a3a7:	shr    rdx,0x3
   1a3ab:	and    edx,0x18
   1a3ae:	or     QWORD PTR [rbp+rdx*1+0x0],rdi
   1a3b3:	test   ax,ax
   1a3b6:	je     1a480 <__sprintf_chk@plt+0x167a0>
   1a3bc:	test   al,0x20
   1a3be:	jne    1a6f8 <__sprintf_chk@plt+0x16a18>
   1a3c4:	test   al,0x80
   1a3c6:	jne    1a690 <__sprintf_chk@plt+0x169b0>
   1a3cc:	test   al,0x4
   1a3ce:	je     1a424 <__sprintf_chk@plt+0x16744>
   1a3d0:	cmp    r12d,0x1
   1a3d4:	je     1a82b <__sprintf_chk@plt+0x16b4b>
   1a3da:	mov    r10,QWORD PTR [rsp+0x38]
   1a3df:	cmp    DWORD PTR [r10+0xb4],0x1
   1a3e7:	jle    1a7dc <__sprintf_chk@plt+0x16afc>
   1a3ed:	mov    rdi,QWORD PTR [r10+0x78]
   1a3f1:	xor    esi,esi
   1a3f3:	xor    ecx,ecx
   1a3f5:	mov    rdx,QWORD PTR [rdi+rcx*8]
   1a3f9:	not    rdx
   1a3fc:	or     rdx,QWORD PTR [r10+rcx*8+0xb8]
   1a404:	and    rdx,QWORD PTR [rbp+rcx*8+0x0]
   1a409:	mov    QWORD PTR [rbp+rcx*8+0x0],rdx
   1a40e:	add    rcx,0x1
   1a412:	or     rsi,rdx
   1a415:	cmp    rcx,0x4
   1a419:	jne    1a3f5 <__sprintf_chk@plt+0x16715>
   1a41b:	test   rsi,rsi
   1a41e:	je     1a041 <__sprintf_chk@plt+0x16361>
   1a424:	test   al,0x8
   1a426:	je     1a480 <__sprintf_chk@plt+0x167a0>
   1a428:	cmp    r12d,0x1
   1a42c:	je     1a8b3 <__sprintf_chk@plt+0x16bd3>
   1a432:	mov    rdi,QWORD PTR [rsp+0x38]
   1a437:	cmp    DWORD PTR [rdi+0xb4],0x1
   1a43e:	jle    1a7a3 <__sprintf_chk@plt+0x16ac3>
   1a444:	mov    rsi,QWORD PTR [rdi+0x78]
   1a448:	xor    ecx,ecx
   1a44a:	xor    edx,edx
   1a44c:	mov    rax,QWORD PTR [rdi+rdx*8+0xb8]
   1a454:	and    rax,QWORD PTR [rsi+rdx*8]
   1a458:	not    rax
   1a45b:	and    rax,QWORD PTR [rbp+rdx*8+0x0]
   1a460:	mov    QWORD PTR [rbp+rdx*8+0x0],rax
   1a465:	add    rdx,0x1
   1a469:	or     rcx,rax
   1a46c:	cmp    rdx,0x4
   1a470:	jne    1a44c <__sprintf_chk@plt+0x1676c>
   1a472:	test   rcx,rcx
   1a475:	je     1a041 <__sprintf_chk@plt+0x16361>
   1a47b:	nop    DWORD PTR [rax+rax*1+0x0]
   1a480:	mov    rbx,QWORD PTR [rsp+0x8]
   1a485:	mov    r14,QWORD PTR [rsp+0x20]
   1a48a:	xor    r13d,r13d
   1a48d:	test   r8,r8
   1a490:	jle    1a60a <__sprintf_chk@plt+0x1692a>
   1a496:	mov    QWORD PTR [rsp+0x18],r15
   1a49b:	mov    r15d,r12d
   1a49e:	mov    r12,r8
   1a4a1:	mov    QWORD PTR [rsp+0x40],r9
   1a4a6:	jmp    1a4e7 <__sprintf_chk@plt+0x16807>
   1a4a8:	nop    DWORD PTR [rax+rax*1+0x0]
   1a4b0:	mov    rax,QWORD PTR [rsp+0x18]
   1a4b5:	movzx  ecx,BYTE PTR [rax]
   1a4b8:	mov    rax,rcx
   1a4bb:	shr    rax,0x3
   1a4bf:	and    eax,0x18
   1a4c2:	add    rax,QWORD PTR [rsp+0x8]
   1a4c7:	mov    rax,QWORD PTR [rax+rdx*1]
   1a4cb:	shr    rax,cl
   1a4ce:	test   al,0x1
   1a4d0:	jne    1a4f4 <__sprintf_chk@plt+0x16814>
   1a4d2:	add    r13,0x1
   1a4d6:	add    rbx,0x20
   1a4da:	add    r14,0x18
   1a4de:	cmp    r13,r12
   1a4e1:	jge    1a602 <__sprintf_chk@plt+0x16922>
   1a4e7:	mov    rdx,r13
   1a4ea:	shl    rdx,0x5
   1a4ee:	cmp    r15d,0x1
   1a4f2:	je     1a4b0 <__sprintf_chk@plt+0x167d0>
   1a4f4:	xor    ecx,ecx
   1a4f6:	xor    eax,eax
   1a4f8:	lea    rsi,[rsp+0xa0]
   1a500:	mov    rdx,QWORD PTR [rbp+rax*8+0x0]
   1a505:	and    rdx,QWORD PTR [rbx+rax*8]
   1a509:	mov    QWORD PTR [rsi+rax*8],rdx
   1a50d:	add    rax,0x1
   1a511:	or     rcx,rdx
   1a514:	cmp    rax,0x4
   1a518:	jne    1a500 <__sprintf_chk@plt+0x16820>
   1a51a:	test   rcx,rcx
   1a51d:	je     1a4d2 <__sprintf_chk@plt+0x167f2>
   1a51f:	xor    r10d,r10d
   1a522:	xor    edi,edi
   1a524:	lea    r11,[rsp+0xc0]
   1a52c:	xor    edx,edx
   1a52e:	mov    rsi,QWORD PTR [rbp+rdx*8+0x0]
   1a533:	mov    rax,QWORD PTR [rbx+rdx*8]
   1a537:	mov    rcx,rsi
   1a53a:	not    rcx
   1a53d:	and    rcx,rax
   1a540:	not    rax
   1a543:	and    rax,rsi
   1a546:	mov    QWORD PTR [r11+rdx*8],rcx
   1a54a:	or     rdi,rcx
   1a54d:	mov    QWORD PTR [rbp+rdx*8+0x0],rax
   1a552:	add    rdx,0x1
   1a556:	or     r10,rax
   1a559:	cmp    rdx,0x4
   1a55d:	jne    1a52e <__sprintf_chk@plt+0x1684e>
   1a55f:	test   rdi,rdi
   1a562:	je     1a5cd <__sprintf_chk@plt+0x168ed>
   1a564:	mov    rax,r12
   1a567:	mov    rdi,QWORD PTR [rsp+0x20]
   1a56c:	mov    rsi,r14
   1a56f:	mov    QWORD PTR [rsp+0x28],r10
   1a574:	movdqu xmm1,XMMWORD PTR [rsp+0xc0]
   1a57d:	shl    rax,0x5
   1a581:	add    rax,QWORD PTR [rsp+0x8]
   1a586:	movups XMMWORD PTR [rax],xmm1
   1a589:	movdqu xmm2,XMMWORD PTR [rsp+0xd0]
   1a592:	movups XMMWORD PTR [rax+0x10],xmm2
   1a596:	lea    rax,[r12+r12*2]
   1a59a:	movdqu xmm3,XMMWORD PTR [rsp+0xa0]
   1a5a3:	lea    rdi,[rdi+rax*8]
   1a5a7:	movups XMMWORD PTR [rbx],xmm3
   1a5aa:	movdqu xmm4,XMMWORD PTR [rsp+0xb0]
   1a5b3:	movups XMMWORD PTR [rbx+0x10],xmm4
   1a5b7:	call   133e0 <__sprintf_chk@plt+0xf700>
   1a5bc:	test   eax,eax
   1a5be:	jne    1a6c0 <__sprintf_chk@plt+0x169e0>
   1a5c4:	mov    r10,QWORD PTR [rsp+0x28]
   1a5c9:	add    r12,0x1
   1a5cd:	mov    rax,QWORD PTR [rsp+0x40]
   1a5d2:	mov    rdi,QWORD PTR [rsp+0x30]
   1a5d7:	mov    QWORD PTR [rsp+0x28],r10
   1a5dc:	mov    rax,QWORD PTR [rax+0x18]
   1a5e0:	mov    rsi,QWORD PTR [rax+rdi*1]
   1a5e4:	mov    rdi,r14
   1a5e7:	call   17170 <__sprintf_chk@plt+0x13490>
   1a5ec:	test   al,al
   1a5ee:	je     1a6c0 <__sprintf_chk@plt+0x169e0>
   1a5f4:	mov    r10,QWORD PTR [rsp+0x28]
   1a5f9:	test   r10,r10
   1a5fc:	jne    1a4d2 <__sprintf_chk@plt+0x167f2>
   1a602:	mov    r9,QWORD PTR [rsp+0x40]
   1a607:	mov    r8,r12
   1a60a:	cmp    r8,r13
   1a60d:	jne    1a041 <__sprintf_chk@plt+0x16361>
   1a613:	mov    rax,r8
   1a616:	mov    rdi,QWORD PTR [rsp+0x30]
   1a61b:	mov    QWORD PTR [rsp+0x28],r9
   1a620:	movdqu xmm5,XMMWORD PTR [rsp+0x80]
   1a629:	shl    rax,0x5
   1a62d:	add    rax,QWORD PTR [rsp+0x8]
   1a632:	mov    QWORD PTR [rsp+0x18],r8
   1a637:	movups XMMWORD PTR [rax],xmm5
   1a63a:	movdqu xmm6,XMMWORD PTR [rsp+0x90]
   1a643:	movups XMMWORD PTR [rax+0x10],xmm6
   1a647:	mov    rax,QWORD PTR [r9+0x18]
   1a64b:	mov    rbx,QWORD PTR [rax+rdi*1]
   1a64f:	mov    rdi,QWORD PTR [rsp+0x20]
   1a654:	lea    rax,[r8+r8*2]
   1a658:	lea    r13,[rdi+rax*8]
   1a65c:	mov    edi,0x8
   1a661:	mov    QWORD PTR [r13+0x0],0x1
   1a669:	mov    QWORD PTR [r13+0x8],0x1
   1a671:	call   3a70 <malloc@plt>
   1a676:	mov    r8,QWORD PTR [rsp+0x18]
   1a67b:	mov    r9,QWORD PTR [rsp+0x28]
   1a680:	test   rax,rax
   1a683:	mov    QWORD PTR [r13+0x10],rax
   1a687:	je     1a6a1 <__sprintf_chk@plt+0x169c1>
   1a689:	mov    QWORD PTR [rax],rbx
   1a68c:	add    r8,0x1
   1a690:	pxor   xmm0,xmm0
   1a694:	movups XMMWORD PTR [rbp+0x0],xmm0
   1a698:	movups XMMWORD PTR [rbp+0x10],xmm0
   1a69c:	jmp    1a041 <__sprintf_chk@plt+0x16361>
   1a6a1:	mov    QWORD PTR [r13+0x8],0x0
   1a6a9:	mov    r12,r8
   1a6ac:	mov    QWORD PTR [r13+0x0],0x0
   1a6b4:	test   r8,r8
   1a6b7:	je     1a359 <__sprintf_chk@plt+0x16679>
   1a6bd:	nop    DWORD PTR [rax]
   1a6c0:	mov    rax,QWORD PTR [rsp+0x20]
   1a6c5:	xor    ebx,ebx
   1a6c7:	lea    rbp,[rax+0x10]
   1a6cb:	nop    DWORD PTR [rax+rax*1+0x0]
   1a6d0:	mov    rdi,QWORD PTR [rbp+0x0]
   1a6d4:	add    rbx,0x1
   1a6d8:	add    rbp,0x18
   1a6dc:	call   3680 <free@plt>
   1a6e1:	cmp    rbx,r12
   1a6e4:	jl     1a6d0 <__sprintf_chk@plt+0x169f0>
   1a6e6:	mov    rdi,QWORD PTR [rsp+0x20]
   1a6eb:	call   3680 <free@plt>
   1a6f0:	jmp    1a363 <__sprintf_chk@plt+0x16683>
   1a6f5:	nop    DWORD PTR [rax]
   1a6f8:	mov    rdx,QWORD PTR [rsp+0x80]
   1a700:	pxor   xmm0,xmm0
   1a704:	movups XMMWORD PTR [rbp+0x0],xmm0
   1a708:	movups XMMWORD PTR [rbp+0x10],xmm0
   1a70c:	and    dh,0x4
   1a70f:	je     1a041 <__sprintf_chk@plt+0x16361>
   1a715:	mov    QWORD PTR [rsp+0x80],0x400
   1a721:	jmp    1a3c4 <__sprintf_chk@plt+0x166e4>
   1a726:	cs nop WORD PTR [rax+rax*1+0x0]
   1a730:	mov    rdi,QWORD PTR [rsp+0x38]
   1a735:	lea    rbp,[rsp+0x80]
   1a73d:	cmp    DWORD PTR [rdi+0xb4],0x1
   1a744:	jle    1a812 <__sprintf_chk@plt+0x16b32>
   1a74a:	mov    rcx,QWORD PTR [rdi+0x78]
   1a74e:	mov    rdx,rbp
   1a751:	lea    rsi,[rsp+0xa0]
   1a759:	mov    rdi,QWORD PTR [rcx]
   1a75c:	or     QWORD PTR [rdx],rdi
   1a75f:	add    rdx,0x8
   1a763:	add    rcx,0x8
   1a767:	cmp    rsi,rdx
   1a76a:	jne    1a759 <__sprintf_chk@plt+0x16a79>
   1a76c:	mov    rdi,QWORD PTR [rsp+0x38]
   1a771:	mov    rdx,QWORD PTR [rdi+0xd8]
   1a778:	test   dl,0x40
   1a77b:	jne    1a789 <__sprintf_chk@plt+0x16aa9>
   1a77d:	and    QWORD PTR [rsp+0x80],0xfffffffffffffbff
   1a789:	and    edx,0x80
   1a78f:	je     1a3b3 <__sprintf_chk@plt+0x166d3>
   1a795:	and    QWORD PTR [rsp+0x80],0xfffffffffffffffe
   1a79e:	jmp    1a3b3 <__sprintf_chk@plt+0x166d3>
   1a7a3:	mov    rsi,QWORD PTR [rsp+0x38]
   1a7a8:	xor    ecx,ecx
   1a7aa:	xor    edx,edx
   1a7ac:	mov    rax,QWORD PTR [rsi+rdx*8+0xb8]
   1a7b4:	not    rax
   1a7b7:	and    rax,QWORD PTR [rbp+rdx*8+0x0]
   1a7bc:	mov    QWORD PTR [rbp+rdx*8+0x0],rax
   1a7c1:	add    rdx,0x1
   1a7c5:	or     rcx,rax
   1a7c8:	cmp    rdx,0x4
   1a7cc:	jne    1a7ac <__sprintf_chk@plt+0x16acc>
   1a7ce:	test   rcx,rcx
   1a7d1:	je     1a041 <__sprintf_chk@plt+0x16361>
   1a7d7:	jmp    1a480 <__sprintf_chk@plt+0x167a0>
   1a7dc:	mov    rdi,QWORD PTR [rsp+0x38]
   1a7e1:	xor    esi,esi
   1a7e3:	xor    edx,edx
   1a7e5:	mov    rcx,QWORD PTR [rbp+rdx*8+0x0]
   1a7ea:	and    rcx,QWORD PTR [rdi+rdx*8+0xb8]
   1a7f2:	mov    QWORD PTR [rbp+rdx*8+0x0],rcx
   1a7f7:	add    rdx,0x1
   1a7fb:	or     rsi,rcx
   1a7fe:	cmp    rdx,0x4
   1a802:	jne    1a7e5 <__sprintf_chk@plt+0x16b05>
   1a804:	test   rsi,rsi
   1a807:	jne    1a424 <__sprintf_chk@plt+0x16744>
   1a80d:	jmp    1a041 <__sprintf_chk@plt+0x16361>
   1a812:	pcmpeqd xmm0,xmm0
   1a816:	movups XMMWORD PTR [rsp+0x80],xmm0
   1a81e:	movups XMMWORD PTR [rsp+0x90],xmm0
   1a826:	jmp    1a76c <__sprintf_chk@plt+0x16a8c>
   1a82b:	test   BYTE PTR [r15+0xa],0x40
   1a830:	je     1a690 <__sprintf_chk@plt+0x169b0>
   1a836:	mov    r10,QWORD PTR [rsp+0x38]
   1a83b:	cmp    DWORD PTR [r10+0xb4],0x1
   1a843:	jg     1a3ed <__sprintf_chk@plt+0x1670d>
   1a849:	jmp    1a7dc <__sprintf_chk@plt+0x16afc>
   1a84b:	lea    rbp,[rsp+0x80]
   1a853:	mov    rcx,QWORD PTR [r15]
   1a856:	lea    rsi,[rsp+0xa0]
   1a85e:	mov    rdx,rbp
   1a861:	mov    rdi,QWORD PTR [rcx]
   1a864:	or     QWORD PTR [rdx],rdi
   1a867:	add    rdx,0x8
   1a86b:	add    rcx,0x8
   1a86f:	cmp    rsi,rdx
   1a872:	jne    1a861 <__sprintf_chk@plt+0x16b81>
   1a874:	jmp    1a3b3 <__sprintf_chk@plt+0x166d3>
   1a879:	mov    rdi,QWORD PTR [rsp+0x38]
   1a87e:	pcmpeqd xmm0,xmm0
   1a882:	lea    rbp,[rsp+0x80]
   1a88a:	movups XMMWORD PTR [rsp+0x80],xmm0
   1a892:	mov    rdx,QWORD PTR [rdi+0xd8]
   1a899:	test   dl,0x40
   1a89c:	jne    1a789 <__sprintf_chk@plt+0x16aa9>
   1a8a2:	mov    QWORD PTR [rsp+0x80],0xfffffffffffffbff
   1a8ae:	jmp    1a789 <__sprintf_chk@plt+0x16aa9>
   1a8b3:	test   BYTE PTR [r15+0xa],0x40
   1a8b8:	je     1a432 <__sprintf_chk@plt+0x16752>
   1a8be:	jmp    1a690 <__sprintf_chk@plt+0x169b0>
   1a8c3:	mov    rdi,QWORD PTR [rsp+0x18]
   1a8c8:	mov    ecx,0x1
   1a8cd:	mov    rdx,rbx
   1a8d0:	mov    rsi,r12
   1a8d3:	call   16960 <__sprintf_chk@plt+0x12c80>
   1a8d8:	mov    rdi,QWORD PTR [rsp+0x28]
   1a8dd:	mov    QWORD PTR [rdi+rbp*8],rax
   1a8e1:	test   rax,rax
   1a8e4:	je     1a9cd <__sprintf_chk@plt+0x16ced>
   1a8ea:	mov    rdi,QWORD PTR [rsp+0x10]
   1a8ef:	cmp    rax,QWORD PTR [rdi+rbp*8]
   1a8f3:	je     1a910 <__sprintf_chk@plt+0x16c30>
   1a8f5:	movzx  edi,BYTE PTR [rsp+0x38]
   1a8fa:	mov    eax,0x1
   1a8ff:	cmp    DWORD PTR [r12+0xb4],0x2
   1a908:	cmovge edi,eax
   1a90b:	mov    BYTE PTR [rsp+0x38],dil
   1a910:	mov    rdi,QWORD PTR [rsp+0x18]
   1a915:	mov    ecx,0x2
   1a91a:	mov    rdx,rbx
   1a91d:	mov    rsi,r12
   1a920:	call   16960 <__sprintf_chk@plt+0x12c80>
   1a925:	mov    rdi,QWORD PTR [rsp+0x30]
   1a92a:	mov    QWORD PTR [rdi+rbp*8],rax
   1a92e:	test   rax,rax
   1a931:	jne    1a1b9 <__sprintf_chk@plt+0x164d9>
   1a937:	mov    eax,DWORD PTR [rsp+0x5c]
   1a93b:	test   eax,eax
   1a93d:	je     1a1b9 <__sprintf_chk@plt+0x164d9>
   1a943:	jmp    1a316 <__sprintf_chk@plt+0x16636>
   1a948:	nop    DWORD PTR [rax+rax*1+0x0]
   1a950:	mov    r9,rsi
   1a953:	and    r9,QWORD PTR [rbp-0x20]
   1a957:	jne    1a9de <__sprintf_chk@plt+0x16cfe>
   1a95d:	mov    r9,rbp
   1a960:	xor    r10d,r10d
   1a963:	mov    r11,QWORD PTR [r9]
   1a966:	add    r10,0x1
   1a96a:	add    r9,0x20
   1a96e:	and    r11,rsi
   1a971:	test   r11,r11
   1a974:	je     1a963 <__sprintf_chk@plt+0x16c83>
   1a976:	shl    r10,0x3
   1a97a:	mov    r9,rsi
   1a97d:	and    r9,QWORD PTR [r8+rbx*8+0xb8]
   1a985:	je     1a993 <__sprintf_chk@plt+0x16cb3>
   1a987:	mov    r9,QWORD PTR [r14+r10*1]
   1a98b:	mov    QWORD PTR [rdi],r9
   1a98e:	jmp    1a279 <__sprintf_chk@plt+0x16599>
   1a993:	mov    r9,QWORD PTR [r13+r10*1+0x0]
   1a998:	mov    QWORD PTR [rdi],r9
   1a99b:	jmp    1a279 <__sprintf_chk@plt+0x16599>
   1a9a0:	mov    rdi,QWORD PTR [rsp+0x20]
   1a9a5:	call   3680 <free@plt>
   1a9aa:	mov    edi,0x8
   1a9af:	mov    esi,0x100
   1a9b4:	call   3990 <calloc@plt>
   1a9b9:	mov    rdi,QWORD PTR [rsp+0x48]
   1a9be:	test   rax,rax
   1a9c1:	mov    QWORD PTR [rdi+0x58],rax
   1a9c5:	setne  al
   1a9c8:	jmp    1a365 <__sprintf_chk@plt+0x16685>
   1a9cd:	mov    edx,DWORD PTR [rsp+0x5c]
   1a9d1:	test   edx,edx
   1a9d3:	je     1a8ea <__sprintf_chk@plt+0x16c0a>
   1a9d9:	jmp    1a316 <__sprintf_chk@plt+0x16636>
   1a9de:	xor    r10d,r10d
   1a9e1:	jmp    1a97a <__sprintf_chk@plt+0x16c9a>
   1a9e3:	mov    rdi,QWORD PTR [rsp+0x30]
   1a9e8:	cmp    BYTE PTR [rsp+0x38],0x0
   1a9ed:	mov    rdx,QWORD PTR [rdi+rdx*8]
   1a9f1:	mov    QWORD PTR [rax+0x50],rdx
   1a9f5:	je     1a2c2 <__sprintf_chk@plt+0x165e2>
   1a9fb:	mov    QWORD PTR [rax+0x850],rdx
   1aa02:	jmp    1a2c2 <__sprintf_chk@plt+0x165e2>
   1aa07:	mov    rdi,QWORD PTR [rsp+0x20]
   1aa0c:	call   3680 <free@plt>
   1aa11:	test   r12,r12
   1aa14:	je     1a9aa <__sprintf_chk@plt+0x16cca>
   1aa16:	jmp    1a363 <__sprintf_chk@plt+0x16683>
   1aa1b:	nop    DWORD PTR [rax+rax*1+0x0]
   1aa20:	mov    edi,0x8
   1aa25:	mov    esi,0x200
   1aa2a:	call   3990 <calloc@plt>
   1aa2f:	mov    rdi,QWORD PTR [rsp+0x48]
   1aa34:	mov    QWORD PTR [rdi+0x60],rax
   1aa38:	test   rax,rax
   1aa3b:	je     1a31b <__sprintf_chk@plt+0x1663b>
   1aa41:	mov    rdi,QWORD PTR [rsp+0x20]
   1aa46:	mov    rbx,QWORD PTR [rsp+0x10]
   1aa4b:	xor    esi,esi
   1aa4d:	mov    r13,QWORD PTR [rsp+0x28]
   1aa52:	mov    rdx,QWORD PTR [rsp+0x8]
   1aa57:	lea    rbp,[rdi+0x1820]
   1aa5e:	mov    rcx,rsi
   1aa61:	mov    r11,QWORD PTR [rdx+rsi*8]
   1aa65:	mov    edi,0x1
   1aa6a:	shl    rcx,0x9
   1aa6e:	add    rcx,rax
   1aa71:	test   r11,r11
   1aa74:	je     1aa88 <__sprintf_chk@plt+0x16da8>
   1aa76:	test   r11b,0x1
   1aa7a:	jne    1aa9b <__sprintf_chk@plt+0x16dbb>
   1aa7c:	add    rdi,rdi
   1aa7f:	add    rcx,0x8
   1aa83:	shr    r11,1
   1aa86:	jne    1aa76 <__sprintf_chk@plt+0x16d96>
   1aa88:	add    rsi,0x1
   1aa8c:	add    rbp,0x8
   1aa90:	cmp    rsi,0x4
   1aa94:	jne    1aa5e <__sprintf_chk@plt+0x16d7e>
   1aa96:	jmp    1a293 <__sprintf_chk@plt+0x165b3>
   1aa9b:	mov    r8,rdi
   1aa9e:	and    r8,QWORD PTR [rbp-0x20]
   1aaa2:	jne    1aad5 <__sprintf_chk@plt+0x16df5>
   1aaa4:	mov    r10,rbp
   1aaa7:	xor    r9d,r9d
   1aaaa:	mov    r14,QWORD PTR [r10]
   1aaad:	add    r9,0x1
   1aab1:	add    r10,0x20
   1aab5:	mov    r8,r9
   1aab8:	and    r14,rdi
   1aabb:	test   r14,r14
   1aabe:	je     1aaaa <__sprintf_chk@plt+0x16dca>
   1aac0:	mov    r9,QWORD PTR [rbx+r8*8]
   1aac4:	mov    QWORD PTR [rcx],r9
   1aac7:	mov    r8,QWORD PTR [r13+r8*8+0x0]
   1aacc:	mov    QWORD PTR [rcx+0x800],r8
   1aad3:	jmp    1aa7c <__sprintf_chk@plt+0x16d9c>
   1aad5:	xor    r8d,r8d
   1aad8:	jmp    1aac0 <__sprintf_chk@plt+0x16de0>
   1aada:	call   3840 <__stack_chk_fail@plt>
   1aadf:	nop
   1aae0:	push   r13
   1aae2:	mov    r13,rsi
   1aae5:	push   r12
   1aae7:	push   rbp
   1aae8:	push   rbx
   1aae9:	mov    rbx,rdi
   1aaec:	sub    rsp,0x18
   1aaf0:	mov    rbp,QWORD PTR [rdi]
   1aaf3:	mov    rax,QWORD PTR fs:0x28
   1aafc:	mov    QWORD PTR [rsp+0x8],rax
   1ab01:	xor    eax,eax
   1ab03:	mov    r12,rsp
   1ab06:	movsxd rax,DWORD PTR [rsi+0x80]
   1ab0d:	jmp    1ab1a <__sprintf_chk@plt+0x16e3a>
   1ab0f:	nop
   1ab10:	lea    r12,[rbp+0x8]
   1ab14:	mov    rbx,rax
   1ab17:	movsxd rax,ecx
   1ab1a:	cmp    eax,0xf
   1ab1d:	je     1abf0 <__sprintf_chk@plt+0x16f10>
   1ab23:	mov    rdx,QWORD PTR [r13+0x70]
   1ab27:	lea    ecx,[rax+0x1]
   1ab2a:	shl    rax,0x6
   1ab2e:	mov    DWORD PTR [r13+0x80],ecx
   1ab35:	lea    r8,[rdx+rax*1+0x8]
   1ab3a:	add    rax,rdx
   1ab3d:	mov    QWORD PTR [rax+0x8],0x0
   1ab45:	mov    QWORD PTR [rax+0x10],0x0
   1ab4d:	mov    QWORD PTR [rax+0x18],0x0
   1ab55:	movdqu xmm0,XMMWORD PTR [rbx+0x28]
   1ab5a:	mov    QWORD PTR [rax+0x20],0x0
   1ab62:	movups XMMWORD PTR [rax+0x30],xmm0
   1ab66:	mov    QWORD PTR [rax+0x28],0x0
   1ab6e:	and    BYTE PTR [rax+0x3a],0xf3
   1ab72:	mov    QWORD PTR [rax+0x40],0xffffffffffffffff
   1ab7a:	mov    QWORD PTR [r12],r8
   1ab7e:	test   r8,r8
   1ab81:	je     1abc8 <__sprintf_chk@plt+0x16ee8>
   1ab83:	mov    QWORD PTR [rax+0x8],rbp
   1ab87:	mov    rbp,QWORD PTR [r12]
   1ab8b:	or     BYTE PTR [rbp+0x32],0x4
   1ab8f:	mov    rax,QWORD PTR [rbx+0x8]
   1ab93:	test   rax,rax
   1ab96:	jne    1ab10 <__sprintf_chk@plt+0x16e30>
   1ab9c:	jmp    1aba3 <__sprintf_chk@plt+0x16ec3>
   1ab9e:	xchg   ax,ax
   1aba0:	mov    rbx,rdx
   1aba3:	mov    rdx,QWORD PTR [rbx+0x10]
   1aba7:	test   rdx,rdx
   1abaa:	je     1abb5 <__sprintf_chk@plt+0x16ed5>
   1abac:	cmp    rdx,rax
   1abaf:	jne    1ac68 <__sprintf_chk@plt+0x16f88>
   1abb5:	mov    rdx,QWORD PTR [rbx]
   1abb8:	mov    rbp,QWORD PTR [rbp+0x0]
   1abbc:	mov    rax,rbx
   1abbf:	test   rdx,rdx
   1abc2:	jne    1aba0 <__sprintf_chk@plt+0x16ec0>
   1abc4:	mov    r8,QWORD PTR [rsp]
   1abc8:	mov    rax,QWORD PTR [rsp+0x8]
   1abcd:	sub    rax,QWORD PTR fs:0x28
   1abd6:	jne    1ac84 <__sprintf_chk@plt+0x16fa4>
   1abdc:	add    rsp,0x18
   1abe0:	mov    rax,r8
   1abe3:	pop    rbx
   1abe4:	pop    rbp
   1abe5:	pop    r12
   1abe7:	pop    r13
   1abe9:	ret    
   1abea:	nop    WORD PTR [rax+rax*1+0x0]
   1abf0:	mov    edi,0x3c8
   1abf5:	call   3a70 <malloc@plt>
   1abfa:	test   rax,rax
   1abfd:	je     1ac74 <__sprintf_chk@plt+0x16f94>
   1abff:	mov    rdx,QWORD PTR [r13+0x70]
   1ac03:	mov    QWORD PTR [rax+0x8],0x0
   1ac0b:	mov    ecx,0x1
   1ac10:	mov    QWORD PTR [rax+0x10],0x0
   1ac18:	mov    QWORD PTR [rax+0x18],0x0
   1ac20:	movdqu xmm1,XMMWORD PTR [rbx+0x28]
   1ac25:	mov    QWORD PTR [rax],rdx
   1ac28:	lea    rdx,[rax+0x8]
   1ac2c:	movups XMMWORD PTR [rax+0x30],xmm1
   1ac30:	mov    QWORD PTR [r13+0x70],rax
   1ac34:	and    BYTE PTR [rax+0x3a],0xf3
   1ac38:	mov    DWORD PTR [r13+0x80],0x1
   1ac43:	mov    QWORD PTR [rax+0x20],0x0
   1ac4b:	mov    QWORD PTR [rax+0x28],0x0
   1ac53:	mov    QWORD PTR [rax+0x40],0xffffffffffffffff
   1ac5b:	mov    QWORD PTR [r12],rdx
   1ac5f:	jmp    1ab83 <__sprintf_chk@plt+0x16ea3>
   1ac64:	nop    DWORD PTR [rax+0x0]
   1ac68:	lea    r12,[rbp+0x10]
   1ac6c:	mov    rbx,rdx
   1ac6f:	jmp    1ab17 <__sprintf_chk@plt+0x16e37>
   1ac74:	mov    QWORD PTR [r12],0x0
   1ac7c:	xor    r8d,r8d
   1ac7f:	jmp    1abc8 <__sprintf_chk@plt+0x16ee8>
   1ac84:	call   3840 <__stack_chk_fail@plt>
   1ac89:	nop    DWORD PTR [rax+0x0]
   1ac90:	push   r15
   1ac92:	push   r14
   1ac94:	push   r13
   1ac96:	mov    r13,rsi
   1ac99:	mov    esi,0x1
   1ac9e:	push   r12
   1aca0:	mov    r12d,r8d
   1aca3:	push   rbp
   1aca4:	mov    rbp,rdi
   1aca7:	mov    edi,0x20
   1acac:	push   rbx
   1acad:	mov    rbx,rcx
   1acb0:	sub    rsp,0x58
   1acb4:	mov    QWORD PTR [rsp],rdx
   1acb8:	mov    QWORD PTR [rsp+0x8],r9
   1acbd:	mov    rax,QWORD PTR fs:0x28
   1acc6:	mov    QWORD PTR [rsp+0x48],rax
   1accb:	xor    eax,eax
   1accd:	mov    QWORD PTR [rsp+0x18],0x0
   1acd6:	call   3990 <calloc@plt>
   1acdb:	test   rax,rax
   1acde:	je     1aea3 <__sprintf_chk@plt+0x171c3>
   1ace4:	mov    esi,0x1
   1ace9:	mov    edi,0x50
   1acee:	mov    r14,rax
   1acf1:	call   3990 <calloc@plt>
   1acf6:	mov    r15,rax
   1acf9:	test   rax,rax
   1acfc:	je     1aef0 <__sprintf_chk@plt+0x17210>
   1ad02:	movzx  eax,BYTE PTR [rax+0x20]
   1ad06:	mov    edx,r12d
   1ad09:	mov    r8,QWORD PTR [rsp]
   1ad0d:	xor    r9d,r9d
   1ad10:	and    edx,0x1
   1ad13:	lea    rcx,[rsp+0x18]
   1ad18:	mov    rsi,r14
   1ad1b:	mov    rdi,r13
   1ad1e:	and    eax,0xfffffffe
   1ad21:	or     eax,edx
   1ad23:	mov    rdx,r15
   1ad26:	mov    BYTE PTR [r15+0x20],al
   1ad2a:	call   14370 <__sprintf_chk@plt+0x10690>
   1ad2f:	test   eax,eax
   1ad31:	jne    1af10 <__sprintf_chk@plt+0x17230>
   1ad37:	movsx  rcx,BYTE PTR [rbx]
   1ad3b:	mov    esi,0x1
   1ad40:	test   cl,cl
   1ad42:	je     1ad81 <__sprintf_chk@plt+0x170a1>
   1ad44:	nop    DWORD PTR [rax+0x0]
   1ad48:	test   rcx,rcx
   1ad4b:	lea    rax,[rcx+0x3f]
   1ad4f:	mov    rdx,rcx
   1ad52:	cmovns rax,rcx
   1ad56:	sar    rdx,0x3f
   1ad5a:	add    rbx,0x1
   1ad5e:	shr    rdx,0x3a
   1ad62:	add    rcx,rdx
   1ad65:	sar    rax,0x6
   1ad69:	and    ecx,0x3f
   1ad6c:	sub    rcx,rdx
   1ad6f:	mov    rdx,rsi
   1ad72:	shl    rdx,cl
   1ad75:	movsx  rcx,BYTE PTR [rbx]
   1ad79:	or     QWORD PTR [r14+rax*8],rdx
   1ad7d:	test   cl,cl
   1ad7f:	jne    1ad48 <__sprintf_chk@plt+0x17068>
   1ad81:	test   r12b,r12b
   1ad84:	je     1ad99 <__sprintf_chk@plt+0x170b9>
   1ad86:	mov    rax,r14
   1ad89:	lea    rdx,[r14+0x20]
   1ad8d:	not    QWORD PTR [rax]
   1ad90:	add    rax,0x8
   1ad94:	cmp    rdx,rax
   1ad97:	jne    1ad8d <__sprintf_chk@plt+0x170ad>
   1ad99:	cmp    DWORD PTR [rbp+0xb4],0x1
   1ada0:	jg     1ae50 <__sprintf_chk@plt+0x17170>
   1ada6:	lea    r13,[rsp+0x20]
   1adab:	xor    edx,edx
   1adad:	xor    esi,esi
   1adaf:	mov    rdi,rbp
   1adb2:	mov    rcx,r13
   1adb5:	mov    QWORD PTR [rsp+0x20],r14
   1adba:	mov    QWORD PTR [rsp+0x28],0x3
   1adc3:	call   12b00 <__sprintf_chk@plt+0xee20>
   1adc8:	mov    r12,rax
   1adcb:	test   rax,rax
   1adce:	je     1ae70 <__sprintf_chk@plt+0x17190>
   1add4:	cmp    DWORD PTR [rbp+0xb4],0x1
   1addb:	jle    1aec0 <__sprintf_chk@plt+0x171e0>
   1ade1:	or     BYTE PTR [rbp+0xb0],0x2
   1ade8:	xor    edx,edx
   1adea:	mov    rcx,r13
   1aded:	xor    esi,esi
   1adef:	mov    rdi,rbp
   1adf2:	mov    BYTE PTR [rsp+0x28],0x6
   1adf7:	mov    QWORD PTR [rsp+0x20],r15
   1adfc:	call   12b00 <__sprintf_chk@plt+0xee20>
   1ae01:	mov    rdx,rax
   1ae04:	test   rax,rax
   1ae07:	je     1ae70 <__sprintf_chk@plt+0x17190>
   1ae09:	pxor   xmm0,xmm0
   1ae0d:	mov    rsi,r12
   1ae10:	lea    rcx,[rsp+0x30]
   1ae15:	mov    rdi,rbp
   1ae18:	movups XMMWORD PTR [rsp+0x30],xmm0
   1ae1d:	mov    BYTE PTR [rsp+0x38],0xa
   1ae22:	call   12b00 <__sprintf_chk@plt+0xee20>
   1ae27:	mov    r12,rax
   1ae2a:	mov    rax,QWORD PTR [rsp+0x48]
   1ae2f:	sub    rax,QWORD PTR fs:0x28
   1ae38:	jne    1af58 <__sprintf_chk@plt+0x17278>
   1ae3e:	add    rsp,0x58
   1ae42:	mov    rax,r12
   1ae45:	pop    rbx
   1ae46:	pop    rbp
   1ae47:	pop    r12
   1ae49:	pop    r13
   1ae4b:	pop    r14
   1ae4d:	pop    r15
   1ae4f:	ret    
   1ae50:	mov    rcx,QWORD PTR [rbp+0x78]
   1ae54:	xor    eax,eax
   1ae56:	mov    rdx,QWORD PTR [rcx+rax*1]
   1ae5a:	and    QWORD PTR [r14+rax*1],rdx
   1ae5e:	add    rax,0x8
   1ae62:	cmp    rax,0x20
   1ae66:	jne    1ae56 <__sprintf_chk@plt+0x17176>
   1ae68:	jmp    1ada6 <__sprintf_chk@plt+0x170c6>
   1ae6d:	nop    DWORD PTR [rax]
   1ae70:	mov    rdi,r14
   1ae73:	call   3680 <free@plt>
   1ae78:	mov    rdi,QWORD PTR [r15]
   1ae7b:	call   3680 <free@plt>
   1ae80:	mov    rdi,QWORD PTR [r15+0x8]
   1ae84:	call   3680 <free@plt>
   1ae89:	mov    rdi,QWORD PTR [r15+0x10]
   1ae8d:	call   3680 <free@plt>
   1ae92:	mov    rdi,QWORD PTR [r15+0x18]
   1ae96:	call   3680 <free@plt>
   1ae9b:	mov    rdi,r15
   1ae9e:	call   3680 <free@plt>
   1aea3:	mov    rax,QWORD PTR [rsp+0x8]
   1aea8:	xor    r12d,r12d
   1aeab:	mov    DWORD PTR [rax],0xc
   1aeb1:	jmp    1ae2a <__sprintf_chk@plt+0x1714a>
   1aeb6:	cs nop WORD PTR [rax+rax*1+0x0]
   1aec0:	mov    rdi,QWORD PTR [r15]
   1aec3:	call   3680 <free@plt>
   1aec8:	mov    rdi,QWORD PTR [r15+0x8]
   1aecc:	call   3680 <free@plt>
   1aed1:	mov    rdi,QWORD PTR [r15+0x10]
   1aed5:	call   3680 <free@plt>
   1aeda:	mov    rdi,QWORD PTR [r15+0x18]
   1aede:	call   3680 <free@plt>
   1aee3:	mov    rdi,r15
   1aee6:	call   3680 <free@plt>
   1aeeb:	jmp    1ae2a <__sprintf_chk@plt+0x1714a>
   1aef0:	mov    rdi,r14
   1aef3:	xor    r12d,r12d
   1aef6:	call   3680 <free@plt>
   1aefb:	mov    rax,QWORD PTR [rsp+0x8]
   1af00:	mov    DWORD PTR [rax],0xc
   1af06:	jmp    1ae2a <__sprintf_chk@plt+0x1714a>
   1af0b:	nop    DWORD PTR [rax+rax*1+0x0]
   1af10:	mov    rdi,r14
   1af13:	mov    DWORD PTR [rsp],eax
   1af16:	xor    r12d,r12d
   1af19:	call   3680 <free@plt>
   1af1e:	mov    rdi,QWORD PTR [r15]
   1af21:	call   3680 <free@plt>
   1af26:	mov    rdi,QWORD PTR [r15+0x8]
   1af2a:	call   3680 <free@plt>
   1af2f:	mov    rdi,QWORD PTR [r15+0x10]
   1af33:	call   3680 <free@plt>
   1af38:	mov    rdi,QWORD PTR [r15+0x18]
   1af3c:	call   3680 <free@plt>
   1af41:	mov    rdi,r15
   1af44:	call   3680 <free@plt>
   1af49:	mov    rdi,QWORD PTR [rsp+0x8]
   1af4e:	mov    eax,DWORD PTR [rsp]
   1af51:	mov    DWORD PTR [rdi],eax
   1af53:	jmp    1ae2a <__sprintf_chk@plt+0x1714a>
   1af58:	call   3840 <__stack_chk_fail@plt>
   1af5d:	nop    DWORD PTR [rax]
   1af60:	push   rbp
   1af61:	mov    rbp,rsp
   1af64:	push   r15
   1af66:	push   r14
   1af68:	push   r13
   1af6a:	push   r12
   1af6c:	mov    r12,rsi
   1af6f:	push   rbx
   1af70:	sub    rsp,0xa8
   1af77:	mov    QWORD PTR [rbp-0x90],rdx
   1af7e:	mov    QWORD PTR [rbp-0x88],rcx
   1af85:	mov    rax,QWORD PTR fs:0x28
   1af8e:	mov    QWORD PTR [rbp-0x38],rax
   1af92:	mov    rax,QWORD PTR [rdi]
   1af95:	mov    QWORD PTR [rbp-0x50],0x0
   1af9d:	mov    QWORD PTR [rbp-0x48],0x2
   1afa5:	mov    QWORD PTR [rbp-0x40],0x0
   1afad:	mov    QWORD PTR [rbp-0x98],rax
   1afb4:	test   r8b,r8b
   1afb7:	je     1b7de <__sprintf_chk@plt+0x17afe>
   1afbd:	mov    edi,0x60
   1afc2:	call   3a70 <malloc@plt>
   1afc7:	mov    QWORD PTR [rbp-0x40],rax
   1afcb:	test   rax,rax
   1afce:	je     1b74f <__sprintf_chk@plt+0x17a6f>
   1afd4:	lea    r13,[rbp-0x50]
   1afd8:	mov    rax,QWORD PTR [rbp-0x98]
   1afdf:	pxor   xmm0,xmm0
   1afe3:	mov    QWORD PTR [rbp-0x60],0x0
   1afeb:	movups XMMWORD PTR [rbp-0x70],xmm0
   1afef:	mov    r15,QWORD PTR [rax+0x90]
   1aff6:	mov    rax,QWORD PTR [rbp-0x90]
   1affd:	shl    rax,0x4
   1b001:	mov    QWORD PTR [rbp-0xb0],rax
   1b008:	cmp    rax,0xfbf
   1b00e:	ja     1b7e6 <__sprintf_chk@plt+0x17b06>
   1b014:	add    rax,0x10
   1b018:	mov    rdx,rsp
   1b01b:	mov    rcx,rax
   1b01e:	and    rcx,0xfffffffffffff000
   1b025:	sub    rdx,rcx
   1b028:	cmp    rsp,rdx
   1b02b:	je     1b042 <__sprintf_chk@plt+0x17362>
   1b02d:	sub    rsp,0x1000
   1b034:	or     QWORD PTR [rsp+0xff8],0x0
   1b03d:	cmp    rsp,rdx
   1b040:	jne    1b02d <__sprintf_chk@plt+0x1734d>
   1b042:	and    eax,0xfff
   1b047:	sub    rsp,rax
   1b04a:	test   rax,rax
   1b04d:	jne    1b81f <__sprintf_chk@plt+0x17b3f>
   1b053:	lea    rax,[rsp+0xf]
   1b058:	mov    BYTE PTR [rbp-0xb9],0x0
   1b05f:	and    rax,0xfffffffffffffff0
   1b063:	mov    QWORD PTR [rbp-0xb8],rax
   1b06a:	mov    rbx,QWORD PTR [rbp-0x88]
   1b071:	mov    rdx,QWORD PTR [rbp-0xb0]
   1b078:	mov    rdi,QWORD PTR [rbp-0xb8]
   1b07f:	mov    rsi,rbx
   1b082:	call   3a00 <memcpy@plt>
   1b087:	mov    rcx,QWORD PTR [rbx]
   1b08a:	lea    rax,[rbp-0x70]
   1b08e:	mov    QWORD PTR [rbp-0xa8],rax
   1b095:	mov    QWORD PTR [rbp-0x78],rcx
   1b099:	jmp    1b16c <__sprintf_chk@plt+0x1748c>
   1b09e:	xchg   ax,ax
   1b0a0:	cmp    edx,0x9
   1b0a3:	je     1b368 <__sprintf_chk@plt+0x17688>
   1b0a9:	cmp    rax,rcx
   1b0ac:	jne    1b0bc <__sprintf_chk@plt+0x173dc>
   1b0ae:	cmp    QWORD PTR [r12+0xb0],r15
   1b0b6:	je     1b598 <__sprintf_chk@plt+0x178b8>
   1b0bc:	mov    r14,QWORD PTR [r12+0x98]
   1b0c4:	mov    rsi,QWORD PTR [r14]
   1b0c7:	add    rsi,r10
   1b0ca:	movzx  eax,BYTE PTR [rsi+0x8]
   1b0ce:	test   al,0x8
   1b0d0:	jne    1b1e0 <__sprintf_chk@plt+0x17500>
   1b0d6:	test   BYTE PTR [rsi+0xa],0x10
   1b0da:	jne    1b3f0 <__sprintf_chk@plt+0x17710>
   1b0e0:	cmp    al,0x4
   1b0e2:	je     1b430 <__sprintf_chk@plt+0x17750>
   1b0e8:	mov    rdx,QWORD PTR [rbp-0x78]
   1b0ec:	mov    rdi,r12
   1b0ef:	mov    QWORD PTR [rbp-0xa0],rdx
   1b0f6:	call   14080 <__sprintf_chk@plt+0x103a0>
   1b0fb:	mov    rdx,QWORD PTR [rbp-0xa0]
   1b102:	test   al,al
   1b104:	je     1b4ca <__sprintf_chk@plt+0x177ea>
   1b10a:	mov    rax,QWORD PTR [r14+0x18]
   1b10e:	mov    r15,QWORD PTR [rax+rbx*8]
   1b112:	lea    rax,[rdx+0x1]
   1b116:	mov    QWORD PTR [rbp-0x78],rax
   1b11a:	test   r13,r13
   1b11d:	je     1b157 <__sprintf_chk@plt+0x17477>
   1b11f:	cmp    rax,QWORD PTR [r12+0xa8]
   1b127:	jg     1b4d3 <__sprintf_chk@plt+0x177f3>
   1b12d:	mov    rdx,QWORD PTR [r12+0xb8]
   1b135:	mov    rdi,QWORD PTR [rdx+rax*8]
   1b139:	test   rdi,rdi
   1b13c:	je     1b4d3 <__sprintf_chk@plt+0x177f3>
   1b142:	add    rdi,0x8
   1b146:	mov    rsi,r15
   1b149:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   1b14e:	test   rax,rax
   1b151:	je     1b4d3 <__sprintf_chk@plt+0x177f3>
   1b157:	mov    QWORD PTR [rbp-0x68],0x0
   1b15f:	test   r15,r15
   1b162:	js     1b4c0 <__sprintf_chk@plt+0x177e0>
   1b168:	mov    rcx,QWORD PTR [rbp-0x78]
   1b16c:	mov    rax,QWORD PTR [rbp-0x88]
   1b173:	mov    rax,QWORD PTR [rax+0x8]
   1b177:	cmp    rax,rcx
   1b17a:	jl     1b50f <__sprintf_chk@plt+0x1782f>
   1b180:	mov    rdi,QWORD PTR [rbp-0x98]
   1b187:	mov    r10,r15
   1b18a:	mov    rbx,r15
   1b18d:	shl    r10,0x4
   1b191:	mov    rsi,QWORD PTR [rdi]
   1b194:	add    rsi,r10
   1b197:	movzx  edx,BYTE PTR [rsi+0x8]
   1b19b:	cmp    edx,0x8
   1b19e:	jne    1b0a0 <__sprintf_chk@plt+0x173c0>
   1b1a4:	mov    rdx,QWORD PTR [rsi]
   1b1a7:	add    rdx,0x1
   1b1ab:	cmp    QWORD PTR [rbp-0x90],rdx
   1b1b2:	jle    1b0a9 <__sprintf_chk@plt+0x173c9>
   1b1b8:	mov    rax,QWORD PTR [rbp-0x88]
   1b1bf:	shl    rdx,0x4
   1b1c3:	add    rdx,rax
   1b1c6:	mov    QWORD PTR [rdx+0x8],0xffffffffffffffff
   1b1ce:	mov    rax,QWORD PTR [rax+0x8]
   1b1d2:	mov    QWORD PTR [rdx],rcx
   1b1d5:	jmp    1b0a9 <__sprintf_chk@plt+0x173c9>
   1b1da:	nop    WORD PTR [rax+rax*1+0x0]
   1b1e0:	mov    rax,QWORD PTR [r12+0xb8]
   1b1e8:	mov    rdx,QWORD PTR [rbp-0x78]
   1b1ec:	mov    rsi,r15
   1b1ef:	mov    rdi,QWORD PTR [rbp-0xa8]
   1b1f6:	mov    rbx,QWORD PTR [rax+rdx*8]
   1b1fa:	mov    rax,QWORD PTR [r14+0x28]
   1b1fe:	lea    rdx,[r15+r15*2]
   1b202:	add    rbx,0x8
   1b206:	lea    r14,[rax+rdx*8]
   1b20a:	call   17170 <__sprintf_chk@plt+0x13490>
   1b20f:	test   al,al
   1b211:	je     1b730 <__sprintf_chk@plt+0x17a50>
   1b217:	mov    r10,QWORD PTR [r14+0x8]
   1b21b:	test   r10,r10
   1b21e:	jle    1b4ca <__sprintf_chk@plt+0x177ea>
   1b224:	mov    r11,QWORD PTR [r14+0x10]
   1b228:	mov    r15,0xffffffffffffffff
   1b22f:	xor    r8d,r8d
   1b232:	jmp    1b248 <__sprintf_chk@plt+0x17568>
   1b234:	nop    DWORD PTR [rax+0x0]
   1b238:	mov    r15,r14
   1b23b:	add    r8,0x1
   1b23f:	cmp    r8,r10
   1b242:	je     1b15f <__sprintf_chk@plt+0x1747f>
   1b248:	mov    r14,QWORD PTR [r11+r8*8]
   1b24c:	mov    rdi,rbx
   1b24f:	mov    rsi,r14
   1b252:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   1b257:	test   rax,rax
   1b25a:	je     1b23b <__sprintf_chk@plt+0x1755b>
   1b25c:	cmp    r15,0xffffffffffffffff
   1b260:	je     1b238 <__sprintf_chk@plt+0x17558>
   1b262:	mov    rdi,QWORD PTR [rbp-0xa8]
   1b269:	mov    rsi,r15
   1b26c:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   1b271:	test   rax,rax
   1b274:	jne    1b720 <__sprintf_chk@plt+0x17a40>
   1b27a:	test   r13,r13
   1b27d:	je     1b15f <__sprintf_chk@plt+0x1747f>
   1b283:	mov    rbx,QWORD PTR [r13+0x0]
   1b287:	mov    rcx,QWORD PTR [rbp-0x78]
   1b28b:	lea    rax,[rbx+0x1]
   1b28f:	mov    QWORD PTR [r13+0x0],rax
   1b293:	cmp    rax,QWORD PTR [r13+0x8]
   1b297:	je     1b7a6 <__sprintf_chk@plt+0x17ac6>
   1b29d:	mov    rsi,QWORD PTR [r13+0x10]
   1b2a1:	lea    rbx,[rbx+rbx*2]
   1b2a5:	mov    rax,rbx
   1b2a8:	shl    rax,0x4
   1b2ac:	lea    rbx,[rsi+rax*1]
   1b2b0:	mov    QWORD PTR [rbx+0x8],r14
   1b2b4:	mov    r14,QWORD PTR [rbp-0xb0]
   1b2bb:	mov    QWORD PTR [rbx],rcx
   1b2be:	mov    rdi,r14
   1b2c1:	call   3a70 <malloc@plt>
   1b2c6:	mov    QWORD PTR [rbx+0x10],rax
   1b2ca:	mov    rdi,rax
   1b2cd:	test   rax,rax
   1b2d0:	je     1b2f9 <__sprintf_chk@plt+0x17619>
   1b2d2:	mov    rsi,QWORD PTR [rbp-0x88]
   1b2d9:	mov    rdx,r14
   1b2dc:	call   3a00 <memcpy@plt>
   1b2e1:	mov    rsi,QWORD PTR [rbp-0xa8]
   1b2e8:	lea    rdi,[rbx+0x18]
   1b2ec:	call   133e0 <__sprintf_chk@plt+0xf700>
   1b2f1:	test   eax,eax
   1b2f3:	je     1b15f <__sprintf_chk@plt+0x1747f>
   1b2f9:	mov    rdi,QWORD PTR [rbp-0x60]
   1b2fd:	call   3680 <free@plt>
   1b302:	cmp    BYTE PTR [rbp-0xb9],0x0
   1b309:	jne    1b82a <__sprintf_chk@plt+0x17b4a>
   1b30f:	xor    ebx,ebx
   1b311:	cmp    QWORD PTR [r13+0x0],0x0
   1b316:	jle    1b34e <__sprintf_chk@plt+0x1766e>
   1b318:	nop    DWORD PTR [rax+rax*1+0x0]
   1b320:	mov    rax,QWORD PTR [r13+0x10]
   1b324:	lea    r12,[rbx+rbx*2]
   1b328:	add    rbx,0x1
   1b32c:	shl    r12,0x4
   1b330:	mov    rdi,QWORD PTR [rax+r12*1+0x28]
   1b335:	call   3680 <free@plt>
   1b33a:	mov    rax,QWORD PTR [r13+0x10]
   1b33e:	mov    rdi,QWORD PTR [rax+r12*1+0x10]
   1b343:	call   3680 <free@plt>
   1b348:	cmp    rbx,QWORD PTR [r13+0x0]
   1b34c:	jl     1b320 <__sprintf_chk@plt+0x17640>
   1b34e:	mov    rdi,QWORD PTR [r13+0x10]
   1b352:	call   3680 <free@plt>
   1b357:	mov    eax,0xc
   1b35c:	jmp    1b571 <__sprintf_chk@plt+0x17891>
   1b361:	nop    DWORD PTR [rax+0x0]
   1b368:	mov    rdi,QWORD PTR [rsi]
   1b36b:	lea    rdx,[rdi+0x1]
   1b36f:	cmp    QWORD PTR [rbp-0x90],rdx
   1b376:	jle    1b0a9 <__sprintf_chk@plt+0x173c9>
   1b37c:	mov    rax,QWORD PTR [rbp-0x88]
   1b383:	shl    rdx,0x4
   1b387:	add    rax,rdx
   1b38a:	cmp    rcx,QWORD PTR [rax]
   1b38d:	jg     1b760 <__sprintf_chk@plt+0x17a80>
   1b393:	test   BYTE PTR [rsi+0xa],0x8
   1b397:	je     1b708 <__sprintf_chk@plt+0x17a28>
   1b39d:	mov    rsi,QWORD PTR [rbp-0xb8]
   1b3a4:	cmp    QWORD PTR [rsi+rdx*1],0xffffffffffffffff
   1b3a9:	je     1b708 <__sprintf_chk@plt+0x17a28>
   1b3af:	mov    r14,QWORD PTR [rbp-0x88]
   1b3b6:	mov    rdx,QWORD PTR [rbp-0xb0]
   1b3bd:	mov    QWORD PTR [rbp-0xc8],rcx
   1b3c4:	mov    QWORD PTR [rbp-0xa0],r10
   1b3cb:	mov    rdi,r14
   1b3ce:	call   3a00 <memcpy@plt>
   1b3d3:	mov    rax,QWORD PTR [r14+0x8]
   1b3d7:	mov    r10,QWORD PTR [rbp-0xa0]
   1b3de:	mov    rcx,QWORD PTR [rbp-0xc8]
   1b3e5:	jmp    1b0a9 <__sprintf_chk@plt+0x173c9>
   1b3ea:	nop    WORD PTR [rax+rax*1+0x0]
   1b3f0:	mov    rcx,QWORD PTR [rbp-0x78]
   1b3f4:	mov    rdx,r12
   1b3f7:	mov    rsi,r15
   1b3fa:	mov    rdi,r14
   1b3fd:	mov    QWORD PTR [rbp-0xa0],r10
   1b404:	call   16590 <__sprintf_chk@plt+0x128b0>
   1b409:	movsxd rdx,eax
   1b40c:	test   rdx,rdx
   1b40f:	jne    1b6f8 <__sprintf_chk@plt+0x17a18>
   1b415:	mov    r10,QWORD PTR [rbp-0xa0]
   1b41c:	mov    rsi,QWORD PTR [r14]
   1b41f:	mov    rdx,QWORD PTR [rbp-0x78]
   1b423:	add    rsi,r10
   1b426:	jmp    1b0ec <__sprintf_chk@plt+0x1740c>
   1b42b:	nop    DWORD PTR [rax+rax*1+0x0]
   1b430:	mov    rax,QWORD PTR [rsi]
   1b433:	add    rax,0x1
   1b437:	cmp    QWORD PTR [rbp-0x90],rax
   1b43e:	jle    1b670 <__sprintf_chk@plt+0x17990>
   1b444:	shl    rax,0x4
   1b448:	add    rax,QWORD PTR [rbp-0x88]
   1b44f:	mov    rcx,QWORD PTR [rax+0x8]
   1b453:	mov    rax,QWORD PTR [rax]
   1b456:	mov    rdx,rcx
   1b459:	sub    rdx,rax
   1b45c:	test   r13,r13
   1b45f:	je     1b6ef <__sprintf_chk@plt+0x17a0f>
   1b465:	cmp    rax,0xffffffffffffffff
   1b469:	je     1b4d3 <__sprintf_chk@plt+0x177f3>
   1b46b:	cmp    rcx,0xffffffffffffffff
   1b46f:	je     1b4d3 <__sprintf_chk@plt+0x177f3>
   1b471:	test   rdx,rdx
   1b474:	je     1b679 <__sprintf_chk@plt+0x17999>
   1b47a:	mov    rbx,QWORD PTR [rbp-0x78]
   1b47e:	mov    rsi,QWORD PTR [r12+0x30]
   1b483:	mov    rcx,QWORD PTR [r12+0x8]
   1b488:	sub    rsi,rbx
   1b48b:	cmp    rdx,rsi
   1b48e:	jg     1b4d3 <__sprintf_chk@plt+0x177f3>
   1b490:	lea    rsi,[rcx+rbx*1]
   1b494:	lea    rdi,[rcx+rax*1]
   1b498:	mov    QWORD PTR [rbp-0xa0],rdx
   1b49f:	call   3960 <memcmp@plt>
   1b4a4:	mov    rdx,QWORD PTR [rbp-0xa0]
   1b4ab:	test   eax,eax
   1b4ad:	jne    1b4d3 <__sprintf_chk@plt+0x177f3>
   1b4af:	mov    rax,QWORD PTR [r14+0x18]
   1b4b3:	mov    r15,QWORD PTR [rax+r15*8]
   1b4b7:	lea    rax,[rbx+rdx*1]
   1b4bb:	jmp    1b116 <__sprintf_chk@plt+0x17436>
   1b4c0:	cmp    r15,0xfffffffffffffffe
   1b4c4:	je     1b730 <__sprintf_chk@plt+0x17a50>
   1b4ca:	test   r13,r13
   1b4cd:	je     1b864 <__sprintf_chk@plt+0x17b84>
   1b4d3:	mov    rcx,QWORD PTR [rbp-0x88]
   1b4da:	mov    r8,QWORD PTR [rbp-0xa8]
   1b4e1:	lea    rsi,[rbp-0x78]
   1b4e5:	mov    rdi,r13
   1b4e8:	mov    rdx,QWORD PTR [rbp-0x90]
   1b4ef:	call   142f0 <__sprintf_chk@plt+0x10610>
   1b4f4:	mov    rcx,QWORD PTR [rbp-0x78]
   1b4f8:	mov    r15,rax
   1b4fb:	mov    rax,QWORD PTR [rbp-0x88]
   1b502:	mov    rax,QWORD PTR [rax+0x8]
   1b506:	cmp    rax,rcx
   1b509:	jge    1b180 <__sprintf_chk@plt+0x174a0>
   1b50f:	mov    rdi,QWORD PTR [rbp-0x60]
   1b513:	call   3680 <free@plt>
   1b518:	cmp    BYTE PTR [rbp-0xb9],0x0
   1b51f:	jne    1b80e <__sprintf_chk@plt+0x17b2e>
   1b525:	test   r13,r13
   1b528:	je     1b56f <__sprintf_chk@plt+0x1788f>
   1b52a:	xor    ebx,ebx
   1b52c:	cmp    QWORD PTR [r13+0x0],0x0
   1b531:	jle    1b566 <__sprintf_chk@plt+0x17886>
   1b533:	nop    DWORD PTR [rax+rax*1+0x0]
   1b538:	mov    rax,QWORD PTR [r13+0x10]
   1b53c:	lea    r12,[rbx+rbx*2]
   1b540:	add    rbx,0x1
   1b544:	shl    r12,0x4
   1b548:	mov    rdi,QWORD PTR [rax+r12*1+0x28]
   1b54d:	call   3680 <free@plt>
   1b552:	mov    rax,QWORD PTR [r13+0x10]
   1b556:	mov    rdi,QWORD PTR [rax+r12*1+0x10]
   1b55b:	call   3680 <free@plt>
   1b560:	cmp    rbx,QWORD PTR [r13+0x0]
   1b564:	jl     1b538 <__sprintf_chk@plt+0x17858>
   1b566:	mov    rdi,QWORD PTR [r13+0x10]
   1b56a:	call   3680 <free@plt>
   1b56f:	xor    eax,eax
   1b571:	mov    rcx,QWORD PTR [rbp-0x38]
   1b575:	sub    rcx,QWORD PTR fs:0x28
   1b57e:	jne    1b8ed <__sprintf_chk@plt+0x17c0d>
   1b584:	lea    rsp,[rbp-0x28]
   1b588:	pop    rbx
   1b589:	pop    r12
   1b58b:	pop    r13
   1b58d:	pop    r14
   1b58f:	pop    r15
   1b591:	pop    rbp
   1b592:	ret    
   1b593:	nop    DWORD PTR [rax+rax*1+0x0]
   1b598:	test   r13,r13
   1b59b:	je     1b83b <__sprintf_chk@plt+0x17b5b>
   1b5a1:	mov    rax,QWORD PTR [rbp-0x88]
   1b5a8:	mov    rcx,QWORD PTR [rbp-0x90]
   1b5af:	xor    edx,edx
   1b5b1:	nop    DWORD PTR [rax+0x0]
   1b5b8:	cmp    QWORD PTR [rax],0x0
   1b5bc:	js     1b5c5 <__sprintf_chk@plt+0x178e5>
   1b5be:	cmp    QWORD PTR [rax+0x8],0xffffffffffffffff
   1b5c3:	je     1b630 <__sprintf_chk@plt+0x17950>
   1b5c5:	add    rdx,0x1
   1b5c9:	add    rax,0x10
   1b5cd:	cmp    rcx,rdx
   1b5d0:	jne    1b5b8 <__sprintf_chk@plt+0x178d8>
   1b5d2:	mov    rdi,QWORD PTR [rbp-0x60]
   1b5d6:	call   3680 <free@plt>
   1b5db:	cmp    BYTE PTR [rbp-0xb9],0x0
   1b5e2:	jne    1b89c <__sprintf_chk@plt+0x17bbc>
   1b5e8:	xor    ebx,ebx
   1b5ea:	cmp    QWORD PTR [r13+0x0],0x0
   1b5ef:	jle    1b566 <__sprintf_chk@plt+0x17886>
   1b5f5:	mov    rax,QWORD PTR [r13+0x10]
   1b5f9:	lea    r12,[rbx+rbx*2]
   1b5fd:	add    rbx,0x1
   1b601:	shl    r12,0x4
   1b605:	mov    rdi,QWORD PTR [rax+r12*1+0x28]
   1b60a:	call   3680 <free@plt>
   1b60f:	mov    rax,QWORD PTR [r13+0x10]
   1b613:	mov    rdi,QWORD PTR [rax+r12*1+0x10]
   1b618:	call   3680 <free@plt>
   1b61d:	cmp    rbx,QWORD PTR [r13+0x0]
   1b621:	jl     1b5f5 <__sprintf_chk@plt+0x17915>
   1b623:	jmp    1b566 <__sprintf_chk@plt+0x17886>
   1b628:	nop    DWORD PTR [rax+rax*1+0x0]
   1b630:	cmp    QWORD PTR [rbp-0x90],rdx
   1b637:	je     1b5d2 <__sprintf_chk@plt+0x178f2>
   1b639:	mov    r8,QWORD PTR [rbp-0xa8]
   1b640:	mov    rcx,QWORD PTR [rbp-0x88]
   1b647:	lea    rsi,[rbp-0x78]
   1b64b:	mov    rdi,r13
   1b64e:	mov    rdx,QWORD PTR [rbp-0x90]
   1b655:	call   142f0 <__sprintf_chk@plt+0x10610>
   1b65a:	mov    r10,rax
   1b65d:	mov    r15,rax
   1b660:	mov    rbx,rax
   1b663:	shl    r10,0x4
   1b667:	jmp    1b0bc <__sprintf_chk@plt+0x173dc>
   1b66c:	nop    DWORD PTR [rax+0x0]
   1b670:	test   r13,r13
   1b673:	jne    1b4d3 <__sprintf_chk@plt+0x177f3>
   1b679:	mov    rdi,QWORD PTR [rbp-0xa8]
   1b680:	mov    rsi,r15
   1b683:	mov    QWORD PTR [rbp-0xa0],r10
   1b68a:	call   17170 <__sprintf_chk@plt+0x13490>
   1b68f:	test   al,al
   1b691:	je     1b730 <__sprintf_chk@plt+0x17a50>
   1b697:	mov    rdx,QWORD PTR [r14+0x28]
   1b69b:	lea    rax,[r15+r15*2]
   1b69f:	lea    rax,[rdx+rax*8]
   1b6a3:	mov    rdx,QWORD PTR [rbp-0x78]
   1b6a7:	mov    rax,QWORD PTR [rax+0x10]
   1b6ab:	mov    QWORD PTR [rbp-0xc8],rdx
   1b6b2:	mov    r15,QWORD PTR [rax]
   1b6b5:	mov    rax,QWORD PTR [r12+0xb8]
   1b6bd:	mov    rdi,QWORD PTR [rax+rdx*8]
   1b6c1:	mov    rsi,r15
   1b6c4:	add    rdi,0x8
   1b6c8:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   1b6cd:	test   rax,rax
   1b6d0:	jne    1b15f <__sprintf_chk@plt+0x1747f>
   1b6d6:	mov    r10,QWORD PTR [rbp-0xa0]
   1b6dd:	mov    rsi,QWORD PTR [r14]
   1b6e0:	mov    rdx,QWORD PTR [rbp-0xc8]
   1b6e7:	add    rsi,r10
   1b6ea:	jmp    1b0ec <__sprintf_chk@plt+0x1740c>
   1b6ef:	test   rdx,rdx
   1b6f2:	je     1b679 <__sprintf_chk@plt+0x17999>
   1b6f4:	nop    DWORD PTR [rax+0x0]
   1b6f8:	mov    rbx,QWORD PTR [rbp-0x78]
   1b6fc:	jmp    1b4af <__sprintf_chk@plt+0x177cf>
   1b701:	nop    DWORD PTR [rax+0x0]
   1b708:	mov    QWORD PTR [rax+0x8],rcx
   1b70c:	mov    rax,QWORD PTR [rbp-0x88]
   1b713:	mov    rax,QWORD PTR [rax+0x8]
   1b717:	jmp    1b0a9 <__sprintf_chk@plt+0x173c9>
   1b71c:	nop    DWORD PTR [rax+0x0]
   1b720:	mov    r15,r14
   1b723:	jmp    1b15f <__sprintf_chk@plt+0x1747f>
   1b728:	nop    DWORD PTR [rax+rax*1+0x0]
   1b730:	mov    rdi,QWORD PTR [rbp-0x60]
   1b734:	call   3680 <free@plt>
   1b739:	cmp    BYTE PTR [rbp-0xb9],0x0
   1b740:	jne    1b82a <__sprintf_chk@plt+0x17b4a>
   1b746:	test   r13,r13
   1b749:	jne    1b30f <__sprintf_chk@plt+0x1762f>
   1b74f:	mov    eax,0xc
   1b754:	jmp    1b571 <__sprintf_chk@plt+0x17891>
   1b759:	nop    DWORD PTR [rax+0x0]
   1b760:	mov    r14,QWORD PTR [rbp-0x88]
   1b767:	mov    QWORD PTR [rax+0x8],rcx
   1b76b:	mov    rdx,QWORD PTR [rbp-0xb0]
   1b772:	mov    rdi,QWORD PTR [rbp-0xb8]
   1b779:	mov    QWORD PTR [rbp-0xc8],r10
   1b780:	mov    rsi,r14
   1b783:	mov    QWORD PTR [rbp-0xa0],rcx
   1b78a:	call   3a00 <memcpy@plt>
   1b78f:	mov    rax,QWORD PTR [r14+0x8]
   1b793:	mov    rcx,QWORD PTR [rbp-0xa0]
   1b79a:	mov    r10,QWORD PTR [rbp-0xc8]
   1b7a1:	jmp    1b0a9 <__sprintf_chk@plt+0x173c9>
   1b7a6:	lea    rsi,[rax+rax*2]
   1b7aa:	mov    rdi,QWORD PTR [r13+0x10]
   1b7ae:	mov    QWORD PTR [rbp-0xa0],rcx
   1b7b5:	shl    rsi,0x5
   1b7b9:	call   3b20 <realloc@plt>
   1b7be:	mov    rsi,rax
   1b7c1:	test   rax,rax
   1b7c4:	je     1b2f9 <__sprintf_chk@plt+0x17619>
   1b7ca:	mov    QWORD PTR [r13+0x10],rax
   1b7ce:	mov    rcx,QWORD PTR [rbp-0xa0]
   1b7d5:	shl    QWORD PTR [r13+0x8],1
   1b7d9:	jmp    1b2a1 <__sprintf_chk@plt+0x175c1>
   1b7de:	xor    r13d,r13d
   1b7e1:	jmp    1afd8 <__sprintf_chk@plt+0x172f8>
   1b7e6:	mov    rdi,QWORD PTR [rbp-0xb0]
   1b7ed:	call   3a70 <malloc@plt>
   1b7f2:	mov    QWORD PTR [rbp-0xb8],rax
   1b7f9:	test   rax,rax
   1b7fc:	je     1b8ad <__sprintf_chk@plt+0x17bcd>
   1b802:	mov    BYTE PTR [rbp-0xb9],0x1
   1b809:	jmp    1b06a <__sprintf_chk@plt+0x1738a>
   1b80e:	mov    rdi,QWORD PTR [rbp-0xb8]
   1b815:	call   3680 <free@plt>
   1b81a:	jmp    1b525 <__sprintf_chk@plt+0x17845>
   1b81f:	or     QWORD PTR [rsp+rax*1-0x8],0x0
   1b825:	jmp    1b053 <__sprintf_chk@plt+0x17373>
   1b82a:	mov    rdi,QWORD PTR [rbp-0xb8]
   1b831:	call   3680 <free@plt>
   1b836:	jmp    1b746 <__sprintf_chk@plt+0x17a66>
   1b83b:	mov    rdi,QWORD PTR [rbp-0x60]
   1b83f:	call   3680 <free@plt>
   1b844:	cmp    BYTE PTR [rbp-0xb9],0x0
   1b84b:	je     1b56f <__sprintf_chk@plt+0x1788f>
   1b851:	mov    rdi,QWORD PTR [rbp-0xb8]
   1b858:	call   3680 <free@plt>
   1b85d:	xor    eax,eax
   1b85f:	jmp    1b571 <__sprintf_chk@plt+0x17891>
   1b864:	mov    rdi,QWORD PTR [rbp-0x60]
   1b868:	call   3680 <free@plt>
   1b86d:	cmp    BYTE PTR [rbp-0xb9],0x0
   1b874:	mov    eax,0x1
   1b879:	je     1b571 <__sprintf_chk@plt+0x17891>
   1b87f:	mov    rdi,QWORD PTR [rbp-0xb8]
   1b886:	mov    DWORD PTR [rbp-0x88],eax
   1b88c:	call   3680 <free@plt>
   1b891:	mov    eax,DWORD PTR [rbp-0x88]
   1b897:	jmp    1b571 <__sprintf_chk@plt+0x17891>
   1b89c:	mov    rdi,QWORD PTR [rbp-0xb8]
   1b8a3:	call   3680 <free@plt>
   1b8a8:	jmp    1b5e8 <__sprintf_chk@plt+0x17908>
   1b8ad:	xor    ebx,ebx
   1b8af:	test   r13,r13
   1b8b2:	jne    1b8d9 <__sprintf_chk@plt+0x17bf9>
   1b8b4:	jmp    1b74f <__sprintf_chk@plt+0x17a6f>
   1b8b9:	imul   r12,rbx,0x30
   1b8bd:	add    rbx,0x1
   1b8c1:	mov    rdi,QWORD PTR [rdi+r12*1+0x28]
   1b8c6:	call   3680 <free@plt>
   1b8cb:	mov    rax,QWORD PTR [r13+0x10]
   1b8cf:	mov    rdi,QWORD PTR [rax+r12*1+0x10]
   1b8d4:	call   3680 <free@plt>
   1b8d9:	mov    rdi,QWORD PTR [r13+0x10]
   1b8dd:	cmp    rbx,QWORD PTR [r13+0x0]
   1b8e1:	jl     1b8b9 <__sprintf_chk@plt+0x17bd9>
   1b8e3:	call   3680 <free@plt>
   1b8e8:	jmp    1b74f <__sprintf_chk@plt+0x17a6f>
   1b8ed:	call   3840 <__stack_chk_fail@plt>
   1b8f2:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   1b8fd:	nop    DWORD PTR [rax]
   1b900:	push   r15
   1b902:	push   r14
   1b904:	push   r13
   1b906:	push   r12
   1b908:	mov    r12,r9
   1b90b:	push   rbp
   1b90c:	mov    rbp,r8
   1b90f:	push   rbx
   1b910:	mov    rbx,rcx
   1b913:	mov    ecx,0x20
   1b918:	sub    rsp,0x228
   1b91f:	mov    rax,QWORD PTR [rsp+0x268]
   1b927:	mov    QWORD PTR [rsp+0x40],rdi
   1b92c:	lea    r14,[rsp+0x110]
   1b934:	mov    QWORD PTR [rsp+0x80],rsi
   1b93c:	mov    rsi,rdi
   1b93f:	mov    QWORD PTR [rsp+0x70],rdx
   1b944:	mov    QWORD PTR [rsp+0xa8],rax
   1b94c:	mov    rax,QWORD PTR fs:0x28
   1b955:	mov    QWORD PTR [rsp+0x218],rax
   1b95d:	xor    eax,eax
   1b95f:	mov    rax,QWORD PTR [rdi]
   1b962:	mov    rdi,r14
   1b965:	mov    rdx,rax
   1b968:	mov    QWORD PTR [rsp+0x38],rax
   1b96d:	xor    eax,eax
   1b96f:	rep stos QWORD PTR es:[rdi],rax
   1b972:	mov    rcx,QWORD PTR [rsi+0x20]
   1b976:	mov    QWORD PTR [rsp+0x1a8],rdx
   1b97e:	mov    QWORD PTR [rsp+0x60],rcx
   1b983:	test   rcx,rcx
   1b986:	je     1b9aa <__sprintf_chk@plt+0x17cca>
   1b988:	movzx  edx,BYTE PTR [rsi+0x38]
   1b98c:	test   dl,0x8
   1b98f:	je     1bee8 <__sprintf_chk@plt+0x18208>
   1b995:	cmp    rbx,r8
   1b998:	je     1bee8 <__sprintf_chk@plt+0x18208>
   1b99e:	and    edx,0x1
   1b9a1:	cmove  rax,rcx
   1b9a5:	mov    QWORD PTR [rsp+0x60],rax
   1b9aa:	mov    rax,QWORD PTR [rsp+0x40]
   1b9af:	mov    QWORD PTR [rsp+0x90],0x0
   1b9bb:	mov    rax,QWORD PTR [rax+0x30]
   1b9bf:	cmp    rax,QWORD PTR [rsp+0x260]
   1b9c7:	jae    1b9ee <__sprintf_chk@plt+0x17d0e>
   1b9c9:	mov    rsi,QWORD PTR [rsp+0x260]
   1b9d1:	lea    rdx,[rsi-0x1]
   1b9d5:	mov    rsi,rdx
   1b9d8:	sub    rsi,rax
   1b9db:	sub    rax,rdx
   1b9de:	add    QWORD PTR [rsp+0x260],rax
   1b9e6:	mov    QWORD PTR [rsp+0x90],rsi
   1b9ee:	mov    rdi,QWORD PTR [rsp+0x40]
   1b9f3:	cmp    QWORD PTR [rdi+0x10],0x0
   1b9f8:	je     1cb00 <__sprintf_chk@plt+0x18e20>
   1b9fe:	mov    rsi,QWORD PTR [rsp+0x38]
   1ba03:	mov    rax,QWORD PTR [rsi+0x48]
   1ba07:	test   rax,rax
   1ba0a:	je     1cb00 <__sprintf_chk@plt+0x18e20>
   1ba10:	mov    rdx,QWORD PTR [rsi+0x50]
   1ba14:	test   rdx,rdx
   1ba17:	je     1cb00 <__sprintf_chk@plt+0x18e20>
   1ba1d:	mov    rcx,QWORD PTR [rsi+0x58]
   1ba21:	test   rcx,rcx
   1ba24:	je     1cb00 <__sprintf_chk@plt+0x18e20>
   1ba2a:	cmp    QWORD PTR [rsi+0x60],0x0
   1ba2f:	je     1cb00 <__sprintf_chk@plt+0x18e20>
   1ba35:	cmp    QWORD PTR [rax+0x10],0x0
   1ba3a:	jne    1ba70 <__sprintf_chk@plt+0x17d90>
   1ba3c:	cmp    QWORD PTR [rdx+0x10],0x0
   1ba41:	jne    1ba70 <__sprintf_chk@plt+0x17d90>
   1ba43:	cmp    QWORD PTR [rcx+0x10],0x0
   1ba48:	je     1ba50 <__sprintf_chk@plt+0x17d70>
   1ba4a:	cmp    BYTE PTR [rdi+0x38],0x0
   1ba4e:	js     1ba70 <__sprintf_chk@plt+0x17d90>
   1ba50:	test   rbx,rbx
   1ba53:	je     1ba66 <__sprintf_chk@plt+0x17d86>
   1ba55:	mov    DWORD PTR [rsp+0x54],0x1
   1ba5d:	test   rbp,rbp
   1ba60:	jne    1cb08 <__sprintf_chk@plt+0x18e28>
   1ba66:	xor    ebp,ebp
   1ba68:	xor    ebx,ebx
   1ba6a:	nop    WORD PTR [rax+rax*1+0x0]
   1ba70:	cmp    QWORD PTR [rsp+0x260],0x0
   1ba79:	mov    DWORD PTR [rsp+0x50],0x1
   1ba81:	je     1bec9 <__sprintf_chk@plt+0x181e9>
   1ba87:	mov    rax,QWORD PTR [rsp+0x40]
   1ba8c:	mov    r11,QWORD PTR [rsp+0x38]
   1ba91:	mov    rdi,QWORD PTR [rax+0x28]
   1ba95:	mov    rax,QWORD PTR [rax+0x18]
   1ba99:	movsxd rcx,DWORD PTR [r11+0xb4]
   1baa0:	mov    QWORD PTR [rsp+0x8],rax
   1baa5:	mov    rax,QWORD PTR [r11+0x10]
   1baa9:	mov    rdx,rcx
   1baac:	mov    QWORD PTR [rsp+0xa0],rdi
   1bab4:	mov    QWORD PTR [rsp+0x10],rax
   1bab9:	add    rax,0x1
   1babd:	cmp    rax,rcx
   1bac0:	mov    DWORD PTR [rsp+0x1a0],edx
   1bac7:	cmovl  rax,rcx
   1bacb:	mov    rcx,QWORD PTR [rsp+0x70]
   1bad0:	mov    QWORD PTR [rsp+0x188],rdi
   1bad8:	lea    rsi,[rcx+0x1]
   1badc:	mov    QWORD PTR [rsp+0x168],rcx
   1bae4:	cmp    rax,rsi
   1bae7:	mov    QWORD PTR [rsp+0x160],rcx
   1baef:	cmovle rsi,rax
   1baf3:	mov    rax,QWORD PTR [rsp+0x80]
   1bafb:	mov    QWORD PTR [rsp+0x178],rcx
   1bb03:	mov    QWORD PTR [rsp+0x170],rcx
   1bb0b:	mov    QWORD PTR [rsp+0x110],rax
   1bb13:	mov    rax,QWORD PTR [rsp+0x8]
   1bb18:	and    eax,0x400000
   1bb1d:	setne  BYTE PTR [rsp+0x198]
   1bb25:	or     rax,rdi
   1bb28:	mov    rdi,r14
   1bb2b:	movzx  eax,BYTE PTR [r11+0xb0]
   1bb33:	setne  BYTE PTR [rsp+0x19b]
   1bb3b:	mov    edx,eax
   1bb3d:	shr    al,0x3
   1bb40:	shr    dl,0x2
   1bb43:	and    eax,0x1
   1bb46:	and    edx,0x1
   1bb49:	mov    BYTE PTR [rsp+0x19a],al
   1bb50:	mov    BYTE PTR [rsp+0x199],dl
   1bb57:	call   129f0 <__sprintf_chk@plt+0xed10>
   1bb5c:	mov    DWORD PTR [rsp+0x54],eax
   1bb60:	test   eax,eax
   1bb62:	jne    1cd48 <__sprintf_chk@plt+0x19068>
   1bb68:	mov    rsi,QWORD PTR [rsp+0x38]
   1bb6d:	lea    rax,[rsi+0xb8]
   1bb74:	mov    QWORD PTR [rsp+0x190],rax
   1bb7c:	movzx  eax,BYTE PTR [rsi+0xb0]
   1bb83:	mov    BYTE PTR [rsp+0x8],al
   1bb87:	shr    al,0x4
   1bb8a:	and    eax,0x1
   1bb8d:	cmp    BYTE PTR [rsp+0x19b],0x0
   1bb95:	mov    BYTE PTR [rsp+0x19e],al
   1bb9c:	jne    1bbc1 <__sprintf_chk@plt+0x17ee1>
   1bb9e:	mov    rsi,QWORD PTR [rsp+0x38]
   1bba3:	mov    rax,QWORD PTR [rsp+0x80]
   1bbab:	cmp    DWORD PTR [rsi+0xb4],0x1
   1bbb2:	mov    QWORD PTR [rsp+0x118],rax
   1bbba:	mov    rax,QWORD PTR [rsp+0x70]
   1bbbf:	jle    1bbc3 <__sprintf_chk@plt+0x17ee3>
   1bbc1:	xor    eax,eax
   1bbc3:	mov    QWORD PTR [rsp+0x140],rax
   1bbcb:	mov    QWORD PTR [rsp+0x148],rax
   1bbd3:	mov    rax,QWORD PTR [rsp+0x40]
   1bbd8:	mov    QWORD PTR [rsp+0x178],r12
   1bbe0:	movzx  eax,BYTE PTR [rax+0x38]
   1bbe4:	mov    QWORD PTR [rsp+0x170],r12
   1bbec:	mov    BYTE PTR [rsp+0x8],al
   1bbf0:	shr    al,0x7
   1bbf3:	mov    BYTE PTR [rsp+0x19d],al
   1bbfa:	mov    rax,QWORD PTR [rsp+0x38]
   1bbff:	mov    r13,QWORD PTR [rax+0x98]
   1bc06:	mov    eax,DWORD PTR [rsp+0x270]
   1bc0d:	mov    QWORD PTR [rsp+0x1b8],0xffffffffffffffff
   1bc19:	lea    r12,[r13+r13*1+0x0]
   1bc1e:	mov    DWORD PTR [rsp+0x1b0],eax
   1bc25:	test   r12,r12
   1bc28:	jle    1bc7b <__sprintf_chk@plt+0x17f9b>
   1bc2a:	movabs rax,0x555555555555555
   1bc34:	cmp    r12,rax
   1bc37:	jg     1cbfc <__sprintf_chk@plt+0x18f1c>
   1bc3d:	lea    rdi,[r12+r13*4]
   1bc41:	shl    rdi,0x4
   1bc45:	call   3a70 <malloc@plt>
   1bc4a:	mov    rdi,r13
   1bc4d:	shl    rdi,0x4
   1bc51:	mov    QWORD PTR [rsp+0x1e8],rax
   1bc59:	mov    r15,rax
   1bc5c:	call   3a70 <malloc@plt>
   1bc61:	mov    QWORD PTR [rsp+0x208],rax
   1bc69:	test   rax,rax
   1bc6c:	je     1cbfc <__sprintf_chk@plt+0x18f1c>
   1bc72:	test   r15,r15
   1bc75:	je     1cbfc <__sprintf_chk@plt+0x18f1c>
   1bc7b:	cmp    QWORD PTR [rsp+0x260],0x1
   1bc84:	mov    QWORD PTR [rsp+0x1e0],r12
   1bc8c:	mov    DWORD PTR [rsp+0x1f0],0x1
   1bc97:	mov    QWORD PTR [rsp+0x200],r12
   1bc9f:	jbe    1cd7c <__sprintf_chk@plt+0x1909c>
   1bca5:	mov    rax,QWORD PTR [rsp+0x150]
   1bcad:	movabs rdx,0x1ffffffffffffffe
   1bcb7:	cmp    rax,rdx
   1bcba:	ja     1cbfc <__sprintf_chk@plt+0x18f1c>
   1bcc0:	lea    rdi,[rax*8+0x8]
   1bcc8:	call   3a70 <malloc@plt>
   1bccd:	mov    QWORD PTR [rsp+0x1c8],rax
   1bcd5:	mov    r15,rax
   1bcd8:	test   rax,rax
   1bcdb:	je     1cb66 <__sprintf_chk@plt+0x18e86>
   1bce1:	mov    eax,DWORD PTR [rsp+0x270]
   1bce8:	mov    QWORD PTR [rsp+0xc8],rbx
   1bcf0:	mov    DWORD PTR [rsp+0x88],0x8
   1bcfb:	and    eax,0x1
   1bcfe:	cmp    eax,0x1
   1bd01:	sbb    eax,eax
   1bd03:	and    eax,0x2
   1bd06:	add    eax,0x4
   1bd09:	mov    DWORD PTR [rsp+0x180],eax
   1bd10:	xor    eax,eax
   1bd12:	cmp    rbx,rbp
   1bd15:	setle  al
   1bd18:	lea    eax,[rax+rax*1-0x1]
   1bd1c:	mov    DWORD PTR [rsp+0x8c],eax
   1bd23:	mov    rax,rbp
   1bd26:	cmovle rax,rbx
   1bd2a:	mov    QWORD PTR [rsp+0x78],rax
   1bd2f:	mov    rax,rbp
   1bd32:	cmovge rax,rbx
   1bd36:	cmp    QWORD PTR [rsp+0x60],0x0
   1bd3c:	mov    QWORD PTR [rsp+0x68],rax
   1bd41:	mov    rax,QWORD PTR [rsp+0x38]
   1bd46:	mov    eax,DWORD PTR [rax+0xb4]
   1bd4c:	mov    DWORD PTR [rsp+0xb8],eax
   1bd53:	je     1bdaf <__sprintf_chk@plt+0x180cf>
   1bd55:	cmp    DWORD PTR [rsp+0xb8],0x1
   1bd5d:	mov    edx,0x4
   1bd62:	je     1bd87 <__sprintf_chk@plt+0x180a7>
   1bd64:	mov    rax,QWORD PTR [rsp+0x40]
   1bd69:	xor    edx,edx
   1bd6b:	mov    rax,QWORD PTR [rax+0x18]
   1bd6f:	mov    QWORD PTR [rsp+0x8],rax
   1bd74:	and    eax,0x400000
   1bd79:	or     rax,QWORD PTR [rsp+0xa0]
   1bd81:	sete   dl
   1bd84:	shl    edx,0x2
   1bd87:	cmp    rbx,rbp
   1bd8a:	mov    eax,0x2
   1bd8f:	cmovg  eax,DWORD PTR [rsp+0x54]
   1bd94:	mov    ecx,eax
   1bd96:	xor    eax,eax
   1bd98:	cmp    QWORD PTR [rsp+0xa0],0x0
   1bda1:	setne  al
   1bda4:	or     eax,edx
   1bda6:	or     eax,ecx
   1bda8:	mov    DWORD PTR [rsp+0x88],eax
   1bdaf:	cmp    rbx,QWORD PTR [rsp+0x78]
   1bdb4:	setl   dl
   1bdb7:	cmp    rbx,QWORD PTR [rsp+0x68]
   1bdbc:	setg   al
   1bdbf:	or     dl,al
   1bdc1:	jne    1bf7c <__sprintf_chk@plt+0x1829c>
   1bdc7:	cmp    rbx,rbp
   1bdca:	lea    rdx,[rsp+0xc8]
   1bdd2:	mov    eax,0x0
   1bdd7:	cmovle rax,rdx
   1bddb:	test   rax,rax
   1bdde:	mov    QWORD PTR [rsp+0xb0],rax
   1bde6:	mov    eax,DWORD PTR [rsp+0x88]
   1bded:	setne  BYTE PTR [rsp+0xbf]
   1bdf5:	cmp    eax,0x7
   1bdf8:	je     1ca7a <__sprintf_chk@plt+0x18d9a>
   1bdfe:	cmp    eax,0x8
   1be01:	je     1bfa7 <__sprintf_chk@plt+0x182c7>
   1be07:	cmp    eax,0x5
   1be0a:	jg     1bf00 <__sprintf_chk@plt+0x18220>
   1be10:	cmp    eax,0x3
   1be13:	jg     1cc18 <__sprintf_chk@plt+0x18f38>
   1be19:	mov    rcx,r14
   1be1c:	mov    rbp,QWORD PTR [rsp+0x60]
   1be21:	mov    r15,QWORD PTR [rsp+0x78]
   1be26:	mov    r13d,DWORD PTR [rsp+0x8c]
   1be2e:	mov    r12,QWORD PTR [rsp+0x70]
   1be33:	mov    r14,QWORD PTR [rsp+0x68]
   1be38:	jmp    1be80 <__sprintf_chk@plt+0x181a0>
   1be3a:	nop    WORD PTR [rax+rax*1+0x0]
   1be40:	mov    rax,rbp
   1be43:	cmp    r12,rbx
   1be46:	jle    1be57 <__sprintf_chk@plt+0x18177>
   1be48:	mov    rax,QWORD PTR [rsp+0x118]
   1be50:	movzx  eax,BYTE PTR [rax+rdx*1]
   1be54:	add    rax,rbp
   1be57:	cmp    BYTE PTR [rax],0x0
   1be5a:	jne    1cdb9 <__sprintf_chk@plt+0x190d9>
   1be60:	movsxd rax,r13d
   1be63:	add    rbx,rax
   1be66:	mov    QWORD PTR [rsp+0xc8],rbx
   1be6e:	cmp    rbx,r15
   1be71:	jl     1cdc1 <__sprintf_chk@plt+0x190e1>
   1be77:	cmp    rbx,r14
   1be7a:	jg     1cdc1 <__sprintf_chk@plt+0x190e1>
   1be80:	mov    rdx,rbx
   1be83:	sub    rdx,QWORD PTR [rsp+0x138]
   1be8b:	cmp    QWORD PTR [rsp+0x148],rdx
   1be93:	ja     1be40 <__sprintf_chk@plt+0x18160>
   1be95:	mov    edx,DWORD PTR [rsp+0x270]
   1be9c:	mov    rdi,rcx
   1be9f:	mov    rsi,rbx
   1bea2:	mov    QWORD PTR [rsp+0x8],rcx
   1bea7:	call   14b60 <__sprintf_chk@plt+0x10e80>
   1beac:	mov    rcx,QWORD PTR [rsp+0x8]
   1beb1:	test   eax,eax
   1beb3:	jne    1cf23 <__sprintf_chk@plt+0x19243>
   1beb9:	mov    rdx,rbx
   1bebc:	sub    rdx,QWORD PTR [rsp+0x138]
   1bec4:	jmp    1be40 <__sprintf_chk@plt+0x18160>
   1bec9:	mov    rax,QWORD PTR [rsp+0x38]
   1bece:	cmp    QWORD PTR [rax+0x98],0x0
   1bed6:	setne  al
   1bed9:	movzx  eax,al
   1bedc:	mov    DWORD PTR [rsp+0x50],eax
   1bee0:	jmp    1ba87 <__sprintf_chk@plt+0x17da7>
   1bee5:	nop    DWORD PTR [rax]
   1bee8:	mov    QWORD PTR [rsp+0x60],0x0
   1bef1:	jmp    1b9aa <__sprintf_chk@plt+0x17cca>
   1bef6:	cs nop WORD PTR [rax+rax*1+0x0]
   1bf00:	cmp    DWORD PTR [rsp+0x88],0x6
   1bf08:	jne    1be19 <__sprintf_chk@plt+0x18139>
   1bf0e:	xor    ecx,ecx
   1bf10:	mov    rax,rbx
   1bf13:	cmp    QWORD PTR [rsp+0x68],rbx
   1bf18:	jle    1bfa0 <__sprintf_chk@plt+0x182c0>
   1bf1e:	mov    rsi,QWORD PTR [rsp+0x60]
   1bf23:	mov    r8,QWORD PTR [rsp+0x68]
   1bf28:	mov    rdi,QWORD PTR [rsp+0x80]
   1bf30:	movzx  edx,BYTE PTR [rdi+rax*1]
   1bf34:	cmp    BYTE PTR [rsi+rdx*1],0x0
   1bf38:	jne    1bf91 <__sprintf_chk@plt+0x182b1>
   1bf3a:	add    rax,0x1
   1bf3e:	mov    ecx,0x1
   1bf43:	cmp    rax,r8
   1bf46:	jne    1bf30 <__sprintf_chk@plt+0x18250>
   1bf48:	mov    QWORD PTR [rsp+0xc8],rax
   1bf50:	mov    rbx,rax
   1bf53:	xor    eax,eax
   1bf55:	cmp    QWORD PTR [rsp+0x70],rbx
   1bf5a:	jg     1ce60 <__sprintf_chk@plt+0x19180>
   1bf60:	mov    rcx,QWORD PTR [rsp+0xa0]
   1bf68:	test   rcx,rcx
   1bf6b:	je     1bf71 <__sprintf_chk@plt+0x18291>
   1bf6d:	movzx  eax,BYTE PTR [rcx+rax*1]
   1bf71:	mov    rcx,QWORD PTR [rsp+0x60]
   1bf76:	cmp    BYTE PTR [rcx+rax*1],0x0
   1bf7a:	jne    1bfa7 <__sprintf_chk@plt+0x182c7>
   1bf7c:	mov    DWORD PTR [rsp+0x54],0x1
   1bf84:	mov    r15,QWORD PTR [rsp+0x1c8]
   1bf8c:	jmp    1cb6e <__sprintf_chk@plt+0x18e8e>
   1bf91:	test   cl,cl
   1bf93:	je     1bfa7 <__sprintf_chk@plt+0x182c7>
   1bf95:	mov    QWORD PTR [rsp+0xc8],rax
   1bf9d:	mov    rbx,rax
   1bfa0:	cmp    QWORD PTR [rsp+0x68],rbx
   1bfa5:	je     1bf53 <__sprintf_chk@plt+0x18273>
   1bfa7:	mov    edx,DWORD PTR [rsp+0x270]
   1bfae:	mov    rsi,rbx
   1bfb1:	mov    rdi,r14
   1bfb4:	call   14b60 <__sprintf_chk@plt+0x10e80>
   1bfb9:	mov    DWORD PTR [rsp+0x54],eax
   1bfbd:	test   eax,eax
   1bfbf:	jne    1cd48 <__sprintf_chk@plt+0x19068>
   1bfc5:	cmp    DWORD PTR [rsp+0xb8],0x1
   1bfcd:	je     1bfeb <__sprintf_chk@plt+0x1830b>
   1bfcf:	cmp    QWORD PTR [rsp+0x140],0x0
   1bfd8:	je     1bfeb <__sprintf_chk@plt+0x1830b>
   1bfda:	mov    rax,QWORD PTR [rsp+0x120]
   1bfe2:	cmp    DWORD PTR [rax],0xffffffff
   1bfe5:	je     1ca41 <__sprintf_chk@plt+0x18d61>
   1bfeb:	movzx  eax,BYTE PTR [rsp+0x50]
   1bff0:	mov    rbx,QWORD PTR [rsp+0x1a8]
   1bff8:	mov    DWORD PTR [rsp+0x1f0],0x0
   1c003:	mov    QWORD PTR [rsp+0x1d8],0x0
   1c00f:	and    eax,0x1
   1c012:	mov    r13,QWORD PTR [rbx+0x48]
   1c016:	mov    QWORD PTR [rsp+0x1d0],0x0
   1c022:	mov    BYTE PTR [rsp+0xbe],al
   1c029:	mov    rax,QWORD PTR [rsp+0x158]
   1c031:	mov    DWORD PTR [rsp+0xc0],0x0
   1c03c:	cmp    BYTE PTR [r13+0x68],0x0
   1c041:	mov    QWORD PTR [rsp+0x8],rax
   1c046:	jns    1c088 <__sprintf_chk@plt+0x183a8>
   1c048:	mov    edx,DWORD PTR [rsp+0x1b0]
   1c04f:	lea    rsi,[rax-0x1]
   1c053:	mov    rdi,r14
   1c056:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   1c05b:	test   al,0x1
   1c05d:	jne    1cbef <__sprintf_chk@plt+0x18f0f>
   1c063:	test   eax,eax
   1c065:	je     1c088 <__sprintf_chk@plt+0x183a8>
   1c067:	mov    edx,eax
   1c069:	and    edx,0x6
   1c06c:	cmp    edx,0x6
   1c06f:	je     1cea8 <__sprintf_chk@plt+0x191c8>
   1c075:	test   al,0x2
   1c077:	jne    1ce0c <__sprintf_chk@plt+0x1912c>
   1c07d:	test   al,0x4
   1c07f:	jne    1ce22 <__sprintf_chk@plt+0x19142>
   1c085:	nop    DWORD PTR [rax]
   1c088:	mov    rax,QWORD PTR [rsp+0x1c8]
   1c090:	test   rax,rax
   1c093:	je     1c0ac <__sprintf_chk@plt+0x183cc>
   1c095:	mov    rsi,QWORD PTR [rsp+0x8]
   1c09a:	cmp    QWORD PTR [rbx+0x98],0x0
   1c0a2:	mov    QWORD PTR [rax+rsi*8],r13
   1c0a6:	jne    1ce71 <__sprintf_chk@plt+0x19191>
   1c0ac:	movzx  eax,BYTE PTR [rsp+0xbf]
   1c0b4:	mov    BYTE PTR [rsp+0x18],al
   1c0b8:	movzx  eax,BYTE PTR [r13+0x68]
   1c0bd:	mov    QWORD PTR [rsp+0x28],0xffffffffffffffff
   1c0c6:	mov    QWORD PTR [rsp+0x30],0x0
   1c0cf:	test   al,0x10
   1c0d1:	jne    1cdd9 <__sprintf_chk@plt+0x190f9>
   1c0d7:	mov    rax,QWORD PTR [rsp+0xb0]
   1c0df:	mov    rbp,QWORD PTR [rsp+0x158]
   1c0e7:	cmp    QWORD PTR [rsp+0x178],rbp
   1c0ef:	mov    QWORD PTR [rsp+0x58],rax
   1c0f4:	jle    1c268 <__sprintf_chk@plt+0x18588>
   1c0fa:	lea    rax,[rsp+0xc0]
   1c102:	mov    QWORD PTR [rsp+0x20],rax
   1c107:	jmp    1c173 <__sprintf_chk@plt+0x18493>
   1c109:	nop    DWORD PTR [rax+0x0]
   1c110:	cmp    r13,r12
   1c113:	mov    rbp,QWORD PTR [rsp+0x158]
   1c11b:	sete   al
   1c11e:	and    BYTE PTR [rsp+0x18],al
   1c122:	movzx  eax,BYTE PTR [r12+0x68]
   1c128:	cmove  rbx,QWORD PTR [rsp+0x8]
   1c12e:	mov    QWORD PTR [rsp+0x8],rbx
   1c133:	test   al,0x10
   1c135:	je     1c162 <__sprintf_chk@plt+0x18482>
   1c137:	test   al,al
   1c139:	js     1c580 <__sprintf_chk@plt+0x188a0>
   1c13f:	mov    edx,DWORD PTR [rsp+0x50]
   1c143:	mov    QWORD PTR [rsp+0x28],rbp
   1c148:	test   edx,edx
   1c14a:	je     1c27a <__sprintf_chk@plt+0x1859a>
   1c150:	mov    QWORD PTR [rsp+0x30],0x1
   1c159:	mov    QWORD PTR [rsp+0x58],0x0
   1c162:	cmp    QWORD PTR [rsp+0x178],rbp
   1c16a:	jle    1c268 <__sprintf_chk@plt+0x18588>
   1c170:	mov    r13,r12
   1c173:	mov    rax,QWORD PTR [rsp+0x150]
   1c17b:	lea    rbx,[rbp+0x1]
   1c17f:	cmp    rbx,rax
   1c182:	jge    1c5a0 <__sprintf_chk@plt+0x188c0>
   1c188:	mov    rax,QWORD PTR [rsp+0x140]
   1c190:	cmp    rbx,rax
   1c193:	jge    1c898 <__sprintf_chk@plt+0x18bb8>
   1c199:	test   BYTE PTR [r13+0x68],0x20
   1c19e:	jne    1c5e0 <__sprintf_chk@plt+0x18900>
   1c1a4:	lea    rax,[rbp+0x1]
   1c1a8:	mov    QWORD PTR [rsp+0x158],rax
   1c1b0:	mov    rax,QWORD PTR [rsp+0x118]
   1c1b8:	movzx  ebp,BYTE PTR [rax+rbp*1]
   1c1bc:	mov    rax,QWORD PTR [r13+0x58]
   1c1c0:	test   rax,rax
   1c1c3:	je     1c858 <__sprintf_chk@plt+0x18b78>
   1c1c9:	mov    r12,QWORD PTR [rax+rbp*8]
   1c1cd:	cmp    QWORD PTR [rsp+0x1c8],0x0
   1c1d6:	je     1c1eb <__sprintf_chk@plt+0x1850b>
   1c1d8:	mov    rdi,QWORD PTR [rsp+0x20]
   1c1dd:	mov    rdx,r12
   1c1e0:	mov    rsi,r14
   1c1e3:	call   19d50 <__sprintf_chk@plt+0x16070>
   1c1e8:	mov    r12,rax
   1c1eb:	test   r12,r12
   1c1ee:	jne    1c110 <__sprintf_chk@plt+0x18430>
   1c1f4:	mov    esi,DWORD PTR [rsp+0xc0]
   1c1fb:	mov    rcx,QWORD PTR [rsp+0x1c8]
   1c203:	test   esi,esi
   1c205:	jne    1ceb1 <__sprintf_chk@plt+0x191d1>
   1c20b:	test   rcx,rcx
   1c20e:	je     1c268 <__sprintf_chk@plt+0x18588>
   1c210:	movzx  eax,BYTE PTR [rsp+0xbe]
   1c218:	xor    eax,0x1
   1c21b:	test   BYTE PTR [rsp+0x30],al
   1c21f:	jne    1c268 <__sprintf_chk@plt+0x18588>
   1c221:	mov    rbp,QWORD PTR [rsp+0x20]
   1c226:	mov    rdi,QWORD PTR [rsp+0x1d0]
   1c22e:	mov    rax,QWORD PTR [rsp+0x158]
   1c236:	xor    edx,edx
   1c238:	jmp    1c250 <__sprintf_chk@plt+0x18570>
   1c23a:	nop    WORD PTR [rax+rax*1+0x0]
   1c240:	cmp    QWORD PTR [rcx+rax*8],0x0
   1c245:	mov    edx,0x1
   1c24a:	jne    1c530 <__sprintf_chk@plt+0x18850>
   1c250:	mov    rsi,rax
   1c253:	add    rax,0x1
   1c257:	cmp    rdi,rax
   1c25a:	jge    1c240 <__sprintf_chk@plt+0x18560>
   1c25c:	test   dl,dl
   1c25e:	je     1c268 <__sprintf_chk@plt+0x18588>
   1c260:	mov    QWORD PTR [rsp+0x158],rsi
   1c268:	mov    rax,QWORD PTR [rsp+0x58]
   1c26d:	test   rax,rax
   1c270:	je     1c27a <__sprintf_chk@plt+0x1859a>
   1c272:	mov    rcx,QWORD PTR [rsp+0x8]
   1c277:	add    QWORD PTR [rax],rcx
   1c27a:	mov    rax,QWORD PTR [rsp+0x28]
   1c27f:	cmp    rax,0xffffffffffffffff
   1c283:	je     1ca31 <__sprintf_chk@plt+0x18d51>
   1c289:	cmp    rax,0xfffffffffffffffe
   1c28d:	je     1cbfc <__sprintf_chk@plt+0x18f1c>
   1c293:	mov    rax,QWORD PTR [rsp+0x28]
   1c298:	mov    QWORD PTR [rsp+0x1b8],rax
   1c2a0:	mov    rax,QWORD PTR [rsp+0x40]
   1c2a5:	test   BYTE PTR [rax+0x38],0x10
   1c2a9:	jne    1c308 <__sprintf_chk@plt+0x18628>
   1c2ab:	cmp    QWORD PTR [rsp+0x260],0x1
   1c2b4:	jbe    1c308 <__sprintf_chk@plt+0x18628>
   1c2b6:	mov    rbx,QWORD PTR [rsp+0x1c8]
   1c2be:	mov    rdx,QWORD PTR [rsp+0x28]
   1c2c3:	mov    rdi,r14
   1c2c6:	mov    rsi,QWORD PTR [rbx+rdx*8]
   1c2ca:	mov    r15,rbx
   1c2cd:	call   16080 <__sprintf_chk@plt+0x123a0>
   1c2d2:	mov    QWORD PTR [rsp+0x1c0],rax
   1c2da:	mov    rax,QWORD PTR [rsp+0x38]
   1c2df:	test   BYTE PTR [rax+0xb0],0x1
   1c2e6:	jne    1c8cf <__sprintf_chk@plt+0x18bef>
   1c2ec:	mov    rax,QWORD PTR [rsp+0x38]
   1c2f1:	cmp    QWORD PTR [rax+0x98],0x0
   1c2f9:	jne    1c8cc <__sprintf_chk@plt+0x18bec>
   1c2ff:	jmp    1c31b <__sprintf_chk@plt+0x1863b>
   1c301:	nop    DWORD PTR [rax+0x0]
   1c308:	mov    rax,QWORD PTR [rsp+0x38]
   1c30d:	cmp    QWORD PTR [rax+0x98],0x0
   1c315:	jne    1c8ab <__sprintf_chk@plt+0x18bcb>
   1c31b:	cmp    QWORD PTR [rsp+0x260],0x0
   1c324:	je     1cd48 <__sprintf_chk@plt+0x19068>
   1c32a:	mov    rdx,QWORD PTR [rsp+0x260]
   1c332:	mov    rsi,QWORD PTR [rsp+0xa8]
   1c33a:	shl    rdx,0x4
   1c33e:	lea    rax,[rsi+0x10]
   1c342:	add    rdx,rsi
   1c345:	cmp    QWORD PTR [rsp+0x260],0x1
   1c34e:	je     1cfbc <__sprintf_chk@plt+0x192dc>
   1c354:	mov    QWORD PTR [rax+0x8],0xffffffffffffffff
   1c35c:	add    rax,0x10
   1c360:	mov    QWORD PTR [rax-0x10],0xffffffffffffffff
   1c368:	cmp    rdx,rax
   1c36b:	jne    1c354 <__sprintf_chk@plt+0x18674>
   1c36d:	mov    rcx,QWORD PTR [rsp+0xa8]
   1c375:	mov    rax,QWORD PTR [rsp+0x1b8]
   1c37d:	mov    QWORD PTR [rcx+0x8],rax
   1c381:	mov    rax,QWORD PTR [rsp+0x40]
   1c386:	mov    QWORD PTR [rcx],0x0
   1c38d:	test   BYTE PTR [rax+0x38],0x10
   1c391:	jne    1cf78 <__sprintf_chk@plt+0x19298>
   1c397:	cmp    QWORD PTR [rsp+0x260],0x1
   1c3a0:	je     1cf78 <__sprintf_chk@plt+0x19298>
   1c3a6:	mov    rax,QWORD PTR [rsp+0x38]
   1c3ab:	xor    r8d,r8d
   1c3ae:	test   BYTE PTR [rax+0xb0],0x1
   1c3b5:	je     1c3c6 <__sprintf_chk@plt+0x186e6>
   1c3b7:	xor    r8d,r8d
   1c3ba:	cmp    QWORD PTR [rax+0x98],0x0
   1c3c2:	setg   r8b
   1c3c6:	mov    rbx,QWORD PTR [rsp+0xa8]
   1c3ce:	mov    rdx,QWORD PTR [rsp+0x260]
   1c3d6:	mov    rsi,r14
   1c3d9:	mov    rdi,QWORD PTR [rsp+0x40]
   1c3de:	mov    rcx,rbx
   1c3e1:	call   1af60 <__sprintf_chk@plt+0x17280>
   1c3e6:	test   eax,eax
   1c3e8:	jne    1cfa6 <__sprintf_chk@plt+0x192c6>
   1c3ee:	mov    rax,QWORD PTR [rbx]
   1c3f1:	movzx  r11d,BYTE PTR [rsp+0x19c]
   1c3fa:	mov    r10,QWORD PTR [rsp+0x140]
   1c402:	xor    esi,esi
   1c404:	mov    r9,QWORD PTR [rsp+0x128]
   1c40c:	mov    r8,QWORD PTR [rsp+0x148]
   1c414:	mov    rdi,QWORD PTR [rsp+0xc8]
   1c41c:	mov    rdx,QWORD PTR [rsp+0xa8]
   1c424:	jmp    1c429 <__sprintf_chk@plt+0x18749>
   1c426:	mov    rax,QWORD PTR [rdx]
   1c429:	cmp    rax,0xffffffffffffffff
   1c42d:	je     1c449 <__sprintf_chk@plt+0x18769>
   1c42f:	mov    rcx,QWORD PTR [rdx+0x8]
   1c433:	test   r11b,r11b
   1c436:	jne    1cf7f <__sprintf_chk@plt+0x1929f>
   1c43c:	add    rax,rdi
   1c43f:	add    rcx,rdi
   1c442:	mov    QWORD PTR [rdx],rax
   1c445:	mov    QWORD PTR [rdx+0x8],rcx
   1c449:	add    rsi,0x1
   1c44d:	add    rdx,0x10
   1c451:	cmp    rsi,QWORD PTR [rsp+0x260]
   1c459:	jne    1c426 <__sprintf_chk@plt+0x18746>
   1c45b:	cmp    QWORD PTR [rsp+0x90],0x0
   1c464:	jle    1c4ac <__sprintf_chk@plt+0x187cc>
   1c466:	mov    rax,QWORD PTR [rsp+0x260]
   1c46e:	mov    rcx,QWORD PTR [rsp+0xa8]
   1c476:	mov    rdx,QWORD PTR [rsp+0x90]
   1c47e:	add    rdx,QWORD PTR [rsp+0x260]
   1c486:	shl    rax,0x4
   1c48a:	shl    rdx,0x4
   1c48e:	add    rax,rcx
   1c491:	add    rdx,rcx
   1c494:	mov    QWORD PTR [rax],0xffffffffffffffff
   1c49b:	add    rax,0x10
   1c49f:	mov    QWORD PTR [rax-0x8],0xffffffffffffffff
   1c4a7:	cmp    rdx,rax
   1c4aa:	jne    1c494 <__sprintf_chk@plt+0x187b4>
   1c4ac:	mov    rax,QWORD PTR [rsp+0x38]
   1c4b1:	mov    r15,QWORD PTR [rsp+0x1c8]
   1c4b9:	mov    rsi,QWORD PTR [rax+0xe0]
   1c4c0:	test   rsi,rsi
   1c4c3:	je     1cb6e <__sprintf_chk@plt+0x18e8e>
   1c4c9:	cmp    QWORD PTR [rsp+0x260],0x1
   1c4d2:	je     1cb6e <__sprintf_chk@plt+0x18e8e>
   1c4d8:	mov    rax,QWORD PTR [rsp+0x260]
   1c4e0:	mov    r8,QWORD PTR [rsp+0xa8]
   1c4e8:	lea    rdi,[rax-0x1]
   1c4ec:	lea    rdx,[r8+0x10]
   1c4f0:	xor    eax,eax
   1c4f2:	mov    rcx,QWORD PTR [rsi+rax*8]
   1c4f6:	cmp    rcx,rax
   1c4f9:	je     1c518 <__sprintf_chk@plt+0x18838>
   1c4fb:	shl    rcx,0x4
   1c4ff:	mov    rcx,QWORD PTR [rcx+r8*1+0x10]
   1c504:	mov    QWORD PTR [rdx],rcx
   1c507:	mov    rcx,QWORD PTR [rsi+rax*8]
   1c50b:	shl    rcx,0x4
   1c50f:	mov    rcx,QWORD PTR [rcx+r8*1+0x18]
   1c514:	mov    QWORD PTR [rdx+0x8],rcx
   1c518:	add    rax,0x1
   1c51c:	add    rdx,0x10
   1c520:	cmp    rdi,rax
   1c523:	jne    1c4f2 <__sprintf_chk@plt+0x18812>
   1c525:	jmp    1cb6e <__sprintf_chk@plt+0x18e8e>
   1c52a:	nop    WORD PTR [rax+rax*1+0x0]
   1c530:	xor    edx,edx
   1c532:	mov    rsi,r14
   1c535:	mov    rdi,rbp
   1c538:	mov    QWORD PTR [rsp+0x158],rax
   1c540:	call   19d50 <__sprintf_chk@plt+0x16070>
   1c545:	mov    ecx,DWORD PTR [rsp+0xc0]
   1c54c:	test   ecx,ecx
   1c54e:	jne    1c566 <__sprintf_chk@plt+0x18886>
   1c550:	test   rax,rax
   1c553:	jne    1ce04 <__sprintf_chk@plt+0x19124>
   1c559:	mov    rcx,QWORD PTR [rsp+0x1c8]
   1c561:	jmp    1c226 <__sprintf_chk@plt+0x18546>
   1c566:	mov    r12,rax
   1c569:	test   rax,rax
   1c56c:	jne    1c110 <__sprintf_chk@plt+0x18430>
   1c572:	jmp    1c268 <__sprintf_chk@plt+0x18588>
   1c577:	nop    WORD PTR [rax+rax*1+0x0]
   1c580:	mov    rdx,rbp
   1c583:	mov    rsi,r12
   1c586:	mov    rdi,r14
   1c589:	call   16080 <__sprintf_chk@plt+0x123a0>
   1c58e:	test   rax,rax
   1c591:	je     1c162 <__sprintf_chk@plt+0x18482>
   1c597:	jmp    1c13f <__sprintf_chk@plt+0x1845f>
   1c59c:	nop    DWORD PTR [rax+0x0]
   1c5a0:	cmp    rax,QWORD PTR [rsp+0x168]
   1c5a8:	jge    1c188 <__sprintf_chk@plt+0x184a8>
   1c5ae:	lea    esi,[rbx+0x1]
   1c5b1:	mov    rdi,r14
   1c5b4:	call   187f0 <__sprintf_chk@plt+0x14b10>
   1c5b9:	mov    DWORD PTR [rsp+0xc0],eax
   1c5c0:	test   eax,eax
   1c5c2:	jne    1cbfc <__sprintf_chk@plt+0x18f1c>
   1c5c8:	mov    rbp,QWORD PTR [rsp+0x158]
   1c5d0:	test   BYTE PTR [r13+0x68],0x20
   1c5d5:	je     1c1a4 <__sprintf_chk@plt+0x184c4>
   1c5db:	nop    DWORD PTR [rax+rax*1+0x0]
   1c5e0:	cmp    QWORD PTR [r13+0x10],0x0
   1c5e5:	mov    r12,QWORD PTR [rsp+0x1a8]
   1c5ed:	jle    1cbdf <__sprintf_chk@plt+0x18eff>
   1c5f3:	xor    r15d,r15d
   1c5f6:	lea    rax,[rsp+0xd0]
   1c5fe:	mov    QWORD PTR [rsp+0x98],rbx
   1c606:	mov    rcx,rbp
   1c609:	mov    QWORD PTR [rsp+0x48],rax
   1c60e:	mov    rbx,r13
   1c611:	mov    rbp,r15
   1c614:	jmp    1c763 <__sprintf_chk@plt+0x18a83>
   1c619:	nop    DWORD PTR [rax+0x0]
   1c620:	test   al,0x1
   1c622:	je     1c755 <__sprintf_chk@plt+0x18a75>
   1c628:	and    r13d,0x8
   1c62c:	jne    1c755 <__sprintf_chk@plt+0x18a75>
   1c632:	test   dl,0x20
   1c635:	je     1c63f <__sprintf_chk@plt+0x1895f>
   1c637:	test   al,0x2
   1c639:	je     1c755 <__sprintf_chk@plt+0x18a75>
   1c63f:	and    edx,0x80
   1c645:	je     1c650 <__sprintf_chk@plt+0x18970>
   1c647:	test   al,0x8
   1c649:	je     1c755 <__sprintf_chk@plt+0x18a75>
   1c64f:	nop
   1c650:	mov    rdx,r14
   1c653:	mov    rsi,r15
   1c656:	mov    rdi,r12
   1c659:	call   16590 <__sprintf_chk@plt+0x128b0>
   1c65e:	test   eax,eax
   1c660:	je     1c74d <__sprintf_chk@plt+0x18a6d>
   1c666:	movsxd r13,eax
   1c669:	add    r13,QWORD PTR [rsp+0x158]
   1c671:	mov    rdi,r14
   1c674:	cmp    DWORD PTR [rsp+0x1f0],eax
   1c67b:	cmovge eax,DWORD PTR [rsp+0x1f0]
   1c683:	mov    rsi,r13
   1c686:	mov    DWORD PTR [rsp+0x1f0],eax
   1c68d:	call   18940 <__sprintf_chk@plt+0x14c60>
   1c692:	mov    DWORD PTR [rsp+0xc4],eax
   1c699:	test   eax,eax
   1c69b:	jne    1cad0 <__sprintf_chk@plt+0x18df0>
   1c6a1:	mov    rax,QWORD PTR [r12+0x18]
   1c6a6:	mov    r8,QWORD PTR [rsp+0x1c8]
   1c6ae:	mov    rax,QWORD PTR [rax+r15*8]
   1c6b2:	lea    r15,[r13*8+0x0]
   1c6ba:	add    r8,r15
   1c6bd:	lea    rdx,[rax+rax*2]
   1c6c1:	mov    rax,QWORD PTR [r12+0x30]
   1c6c6:	mov    QWORD PTR [rsp+0x10],r8
   1c6cb:	lea    rdx,[rax+rdx*8]
   1c6cf:	mov    rax,QWORD PTR [r8]
   1c6d2:	test   rax,rax
   1c6d5:	je     1c7d8 <__sprintf_chk@plt+0x18af8>
   1c6db:	mov    rsi,QWORD PTR [rax+0x50]
   1c6df:	mov    rdi,QWORD PTR [rsp+0x48]
   1c6e4:	call   13470 <__sprintf_chk@plt+0xf790>
   1c6e9:	mov    DWORD PTR [rsp+0xc4],eax
   1c6f0:	test   eax,eax
   1c6f2:	jne    1cad0 <__sprintf_chk@plt+0x18df0>
   1c6f8:	mov    edx,DWORD PTR [rsp+0x1b0]
   1c6ff:	lea    rsi,[r13-0x1]
   1c703:	mov    rdi,r14
   1c706:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   1c70b:	mov    rdx,QWORD PTR [rsp+0x48]
   1c710:	mov    rsi,r12
   1c713:	lea    rdi,[rsp+0xc4]
   1c71b:	mov    ecx,eax
   1c71d:	add    r15,QWORD PTR [rsp+0x1c8]
   1c725:	call   16960 <__sprintf_chk@plt+0x12c80>
   1c72a:	mov    rdi,QWORD PTR [rsp+0xe0]
   1c732:	mov    QWORD PTR [r15],rax
   1c735:	call   3680 <free@plt>
   1c73a:	mov    rdx,QWORD PTR [rsp+0x1c8]
   1c742:	cmp    QWORD PTR [rdx+r13*8],0x0
   1c747:	je     1c835 <__sprintf_chk@plt+0x18b55>
   1c74d:	mov    rcx,QWORD PTR [rsp+0x158]
   1c755:	add    rbp,0x1
   1c759:	cmp    rbp,QWORD PTR [rbx+0x10]
   1c75d:	jge    1cbd1 <__sprintf_chk@plt+0x18ef1>
   1c763:	mov    rax,QWORD PTR [rbx+0x18]
   1c767:	mov    r15,QWORD PTR [rax+rbp*8]
   1c76b:	mov    rax,r15
   1c76e:	shl    rax,0x4
   1c772:	add    rax,QWORD PTR [r12]
   1c776:	test   BYTE PTR [rax+0xa],0x10
   1c77a:	je     1c755 <__sprintf_chk@plt+0x18a75>
   1c77c:	mov    r13d,DWORD PTR [rax+0x8]
   1c780:	test   r13d,0x3ff00
   1c787:	je     1c650 <__sprintf_chk@plt+0x18970>
   1c78d:	mov    rsi,rcx
   1c790:	shr    r13d,0x8
   1c794:	mov    rdi,r14
   1c797:	mov    QWORD PTR [rsp+0x10],rcx
   1c79c:	mov    edx,DWORD PTR [rsp+0x1b0]
   1c7a3:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   1c7a8:	mov    edx,r13d
   1c7ab:	mov    rcx,QWORD PTR [rsp+0x10]
   1c7b0:	and    dx,0x3ff
   1c7b5:	test   r13b,0x4
   1c7b9:	jne    1c620 <__sprintf_chk@plt+0x18940>
   1c7bf:	and    r13d,0x8
   1c7c3:	je     1c632 <__sprintf_chk@plt+0x18952>
   1c7c9:	test   al,0x1
   1c7cb:	je     1c632 <__sprintf_chk@plt+0x18952>
   1c7d1:	jmp    1c755 <__sprintf_chk@plt+0x18a75>
   1c7d3:	nop    DWORD PTR [rax+rax*1+0x0]
   1c7d8:	movdqu xmm1,XMMWORD PTR [rdx]
   1c7dc:	lea    rsi,[r13-0x1]
   1c7e0:	mov    rdi,r14
   1c7e3:	movups XMMWORD PTR [rsp+0xd0],xmm1
   1c7eb:	mov    rax,QWORD PTR [rdx+0x10]
   1c7ef:	mov    edx,DWORD PTR [rsp+0x1b0]
   1c7f6:	mov    QWORD PTR [rsp+0xe0],rax
   1c7fe:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   1c803:	mov    rdx,QWORD PTR [rsp+0x48]
   1c808:	lea    rdi,[rsp+0xc4]
   1c810:	mov    rsi,r12
   1c813:	mov    ecx,eax
   1c815:	call   16960 <__sprintf_chk@plt+0x12c80>
   1c81a:	mov    r8,QWORD PTR [rsp+0x10]
   1c81f:	mov    rdx,QWORD PTR [rsp+0x1c8]
   1c827:	mov    QWORD PTR [r8],rax
   1c82a:	cmp    QWORD PTR [rdx+r13*8],0x0
   1c82f:	jne    1c74d <__sprintf_chk@plt+0x18a6d>
   1c835:	mov    eax,DWORD PTR [rsp+0xc4]
   1c83c:	test   eax,eax
   1c83e:	je     1c74d <__sprintf_chk@plt+0x18a6d>
   1c844:	mov    r13,rbx
   1c847:	mov    rbx,QWORD PTR [rsp+0x98]
   1c84f:	jmp    1cae3 <__sprintf_chk@plt+0x18e03>
   1c854:	nop    DWORD PTR [rax+0x0]
   1c858:	mov    r12,QWORD PTR [r13+0x60]
   1c85c:	test   r12,r12
   1c85f:	je     1cb35 <__sprintf_chk@plt+0x18e55>
   1c865:	mov    rax,QWORD PTR [rsp+0x158]
   1c86d:	mov    edx,DWORD PTR [rsp+0x1b0]
   1c874:	mov    rdi,r14
   1c877:	lea    rsi,[rax-0x1]
   1c87b:	call   13fa0 <__sprintf_chk@plt+0x102c0>
   1c880:	test   al,0x1
   1c882:	je     1cbc8 <__sprintf_chk@plt+0x18ee8>
   1c888:	mov    r12,QWORD PTR [r12+rbp*8+0x800]
   1c890:	jmp    1c1cd <__sprintf_chk@plt+0x184ed>
   1c895:	nop    DWORD PTR [rax]
   1c898:	cmp    rax,QWORD PTR [rsp+0x168]
   1c8a0:	jge    1c199 <__sprintf_chk@plt+0x184b9>
   1c8a6:	jmp    1c5ae <__sprintf_chk@plt+0x188ce>
   1c8ab:	mov    rdx,QWORD PTR [rsp+0x28]
   1c8b0:	mov    rbx,QWORD PTR [rsp+0x1c8]
   1c8b8:	mov    rdi,r14
   1c8bb:	mov    rsi,QWORD PTR [rbx+rdx*8]
   1c8bf:	call   16080 <__sprintf_chk@plt+0x123a0>
   1c8c4:	mov    QWORD PTR [rsp+0x1c0],rax
   1c8cc:	mov    r15,rbx
   1c8cf:	mov    rax,QWORD PTR [rsp+0x1a8]
   1c8d7:	mov    QWORD PTR [rsp+0x18],rax
   1c8dc:	mov    rax,QWORD PTR [rsp+0x1c0]
   1c8e4:	mov    QWORD PTR [rsp+0x8],rax
   1c8e9:	movabs rax,0x1ffffffffffffffe
   1c8f3:	cmp    QWORD PTR [rsp+0x28],rax
   1c8f8:	ja     1cb66 <__sprintf_chk@plt+0x18e86>
   1c8fe:	mov    rax,QWORD PTR [rsp+0x28]
   1c903:	lea    rbx,[rax+0x1]
   1c907:	lea    rbp,[rbx*8+0x0]
   1c90f:	mov    rdi,rbp
   1c912:	call   3a70 <malloc@plt>
   1c917:	mov    r13,rax
   1c91a:	test   rax,rax
   1c91d:	je     1cb66 <__sprintf_chk@plt+0x18e86>
   1c923:	mov    rax,QWORD PTR [rsp+0x18]
   1c928:	cmp    QWORD PTR [rax+0x98],0x0
   1c930:	je     1cc95 <__sprintf_chk@plt+0x18fb5>
   1c936:	mov    rdi,rbp
   1c939:	call   3a70 <malloc@plt>
   1c93e:	mov    rbp,rax
   1c941:	mov    r12,rax
   1c944:	test   rax,rax
   1c947:	je     1cf37 <__sprintf_chk@plt+0x19257>
   1c94d:	lea    rax,[rsp+0xf0]
   1c955:	mov    QWORD PTR [rsp+0x30],rbp
   1c95a:	mov    rbp,QWORD PTR [rsp+0x28]
   1c95f:	lea    r15,[rsp+0xd0]
   1c967:	mov    QWORD PTR [rsp+0x20],rax
   1c96c:	lea    rdx,[rbx*8+0x0]
   1c974:	xor    esi,esi
   1c976:	mov    rdi,r12
   1c979:	call   3900 <memset@plt>
   1c97e:	mov    rax,QWORD PTR [rsp+0x8]
   1c983:	mov    rsi,r15
   1c986:	mov    rdi,r14
   1c989:	mov    QWORD PTR [rsp+0xd0],r13
   1c991:	pxor   xmm0,xmm0
   1c995:	mov    QWORD PTR [rsp+0xe0],rax
   1c99d:	mov    rax,QWORD PTR [rsp+0x20]
   1c9a2:	mov    QWORD PTR [rsp+0xd8],r12
   1c9aa:	mov    QWORD PTR [rsp+0xe8],rbp
   1c9b2:	mov    QWORD PTR [rax+0x10],0x0
   1c9ba:	movups XMMWORD PTR [rax],xmm0
   1c9bd:	call   17d00 <__sprintf_chk@plt+0x14020>
   1c9c2:	mov    rdi,QWORD PTR [rsp+0x100]
   1c9ca:	mov    DWORD PTR [rsp+0x10],eax
   1c9ce:	call   3680 <free@plt>
   1c9d3:	mov    eax,DWORD PTR [rsp+0x10]
   1c9d7:	test   eax,eax
   1c9d9:	jne    1ceb9 <__sprintf_chk@plt+0x191d9>
   1c9df:	cmp    QWORD PTR [r13+0x0],0x0
   1c9e4:	jne    1cef0 <__sprintf_chk@plt+0x19210>
   1c9ea:	cmp    QWORD PTR [r12],0x0
   1c9ef:	jne    1cef0 <__sprintf_chk@plt+0x19210>
   1c9f5:	sub    rbp,0x1
   1c9f9:	jb     1ca21 <__sprintf_chk@plt+0x18d41>
   1c9fb:	mov    rax,QWORD PTR [rsp+0x1c8]
   1ca03:	nop    DWORD PTR [rax+rax*1+0x0]
   1ca08:	mov    rsi,QWORD PTR [rax+rbp*8]
   1ca0c:	test   rsi,rsi
   1ca0f:	je     1ca1b <__sprintf_chk@plt+0x18d3b>
   1ca11:	test   BYTE PTR [rsi+0x68],0x10
   1ca15:	jne    1cd93 <__sprintf_chk@plt+0x190b3>
   1ca1b:	sub    rbp,0x1
   1ca1f:	jae    1ca08 <__sprintf_chk@plt+0x18d28>
   1ca21:	mov    rdi,r13
   1ca24:	call   3680 <free@plt>
   1ca29:	mov    rdi,r12
   1ca2c:	call   3680 <free@plt>
   1ca31:	mov    rdi,r14
   1ca34:	call   13ee0 <__sprintf_chk@plt+0x10200>
   1ca39:	mov    rbx,QWORD PTR [rsp+0xc8]
   1ca41:	movsxd rax,DWORD PTR [rsp+0x8c]
   1ca49:	add    rbx,rax
   1ca4c:	mov    QWORD PTR [rsp+0xc8],rbx
   1ca54:	cmp    rbx,QWORD PTR [rsp+0x78]
   1ca59:	jl     1bf7c <__sprintf_chk@plt+0x1829c>
   1ca5f:	cmp    rbx,QWORD PTR [rsp+0x68]
   1ca64:	jg     1bf7c <__sprintf_chk@plt+0x1829c>
   1ca6a:	mov    eax,DWORD PTR [rsp+0x88]
   1ca71:	cmp    eax,0x7
   1ca74:	jne    1bdfe <__sprintf_chk@plt+0x1811e>
   1ca7a:	xor    ecx,ecx
   1ca7c:	mov    rax,rbx
   1ca7f:	cmp    QWORD PTR [rsp+0x68],rbx
   1ca84:	jle    1bfa0 <__sprintf_chk@plt+0x182c0>
   1ca8a:	mov    rsi,QWORD PTR [rsp+0x60]
   1ca8f:	mov    rdi,QWORD PTR [rsp+0xa0]
   1ca97:	mov    r9,QWORD PTR [rsp+0x68]
   1ca9c:	mov    r8,QWORD PTR [rsp+0x80]
   1caa4:	nop    DWORD PTR [rax+0x0]
   1caa8:	movzx  edx,BYTE PTR [r8+rax*1]
   1caad:	movzx  edx,BYTE PTR [rdi+rdx*1]
   1cab1:	cmp    BYTE PTR [rsi+rdx*1],0x0
   1cab5:	jne    1bf91 <__sprintf_chk@plt+0x182b1>
   1cabb:	add    rax,0x1
   1cabf:	mov    ecx,0x1
   1cac4:	cmp    rax,r9
   1cac7:	jne    1caa8 <__sprintf_chk@plt+0x18dc8>
   1cac9:	jmp    1bf48 <__sprintf_chk@plt+0x18268>
   1cace:	xchg   ax,ax
   1cad0:	mov    r13,rbx
   1cad3:	mov    rdx,QWORD PTR [rsp+0x1c8]
   1cadb:	mov    rbx,QWORD PTR [rsp+0x98]
   1cae3:	mov    DWORD PTR [rsp+0xc0],eax
   1caea:	test   rdx,rdx
   1caed:	je     1cb63 <__sprintf_chk@plt+0x18e83>
   1caef:	xor    r12d,r12d
   1caf2:	jmp    1c1d8 <__sprintf_chk@plt+0x184f8>
   1caf7:	nop    WORD PTR [rax+rax*1+0x0]
   1cb00:	mov    DWORD PTR [rsp+0x54],0x1
   1cb08:	mov    rax,QWORD PTR [rsp+0x218]
   1cb10:	sub    rax,QWORD PTR fs:0x28
   1cb19:	jne    1cfb7 <__sprintf_chk@plt+0x192d7>
   1cb1f:	mov    eax,DWORD PTR [rsp+0x54]
   1cb23:	add    rsp,0x228
   1cb2a:	pop    rbx
   1cb2b:	pop    rbp
   1cb2c:	pop    r12
   1cb2e:	pop    r13
   1cb30:	pop    r14
   1cb32:	pop    r15
   1cb34:	ret    
   1cb35:	mov    rdi,QWORD PTR [rsp+0x1a8]
   1cb3d:	mov    rsi,r13
   1cb40:	call   19f40 <__sprintf_chk@plt+0x16260>
   1cb45:	test   al,al
   1cb47:	jne    1c1bc <__sprintf_chk@plt+0x184dc>
   1cb4d:	cmp    QWORD PTR [rsp+0x1c8],0x0
   1cb56:	mov    DWORD PTR [rsp+0xc0],0xc
   1cb61:	jne    1caef <__sprintf_chk@plt+0x18e0f>
   1cb63:	xor    r15d,r15d
   1cb66:	mov    DWORD PTR [rsp+0x54],0xc
   1cb6e:	mov    rdi,r15
   1cb71:	call   3680 <free@plt>
   1cb76:	mov    rax,QWORD PTR [rsp+0x38]
   1cb7b:	cmp    QWORD PTR [rax+0x98],0x0
   1cb83:	jne    1cd55 <__sprintf_chk@plt+0x19075>
   1cb89:	mov    rdi,QWORD PTR [rsp+0x120]
   1cb91:	call   3680 <free@plt>
   1cb96:	mov    rdi,QWORD PTR [rsp+0x128]
   1cb9e:	call   3680 <free@plt>
   1cba3:	cmp    BYTE PTR [rsp+0x19b],0x0
   1cbab:	je     1cb08 <__sprintf_chk@plt+0x18e28>
   1cbb1:	mov    rdi,QWORD PTR [rsp+0x118]
   1cbb9:	call   3680 <free@plt>
   1cbbe:	jmp    1cb08 <__sprintf_chk@plt+0x18e28>
   1cbc3:	nop    DWORD PTR [rax+rax*1+0x0]
   1cbc8:	mov    r12,QWORD PTR [r12+rbp*8]
   1cbcc:	jmp    1c1cd <__sprintf_chk@plt+0x184ed>
   1cbd1:	mov    r13,rbx
   1cbd4:	mov    rbx,QWORD PTR [rsp+0x98]
   1cbdc:	mov    rbp,rcx
   1cbdf:	mov    DWORD PTR [rsp+0xc0],0x0
   1cbea:	jmp    1c1a4 <__sprintf_chk@plt+0x184c4>
   1cbef:	mov    r13,QWORD PTR [rbx+0x50]
   1cbf3:	test   r13,r13
   1cbf6:	jne    1c088 <__sprintf_chk@plt+0x183a8>
   1cbfc:	mov    DWORD PTR [rsp+0x54],0xc
   1cc04:	mov    r15,QWORD PTR [rsp+0x1c8]
   1cc0c:	jmp    1cb6e <__sprintf_chk@plt+0x18e8e>
   1cc11:	nop    DWORD PTR [rax+0x0]
   1cc18:	cmp    QWORD PTR [rsp+0x78],rbx
   1cc1d:	jg     1bf7c <__sprintf_chk@plt+0x1829c>
   1cc23:	mov    rdi,QWORD PTR [rsp+0x60]
   1cc28:	mov    r9,QWORD PTR [rsp+0x78]
   1cc2d:	xor    ecx,ecx
   1cc2f:	mov    rax,rbx
   1cc32:	mov    rsi,QWORD PTR [rsp+0xa0]
   1cc3a:	mov    r10,QWORD PTR [rsp+0x80]
   1cc42:	mov    r8,QWORD PTR [rsp+0x70]
   1cc47:	jmp    1cc62 <__sprintf_chk@plt+0x18f82>
   1cc49:	nop    DWORD PTR [rax+0x0]
   1cc50:	sub    rax,0x1
   1cc54:	mov    ecx,0x1
   1cc59:	cmp    rax,r9
   1cc5c:	jl     1cdac <__sprintf_chk@plt+0x190cc>
   1cc62:	xor    edx,edx
   1cc64:	cmp    rax,r8
   1cc67:	jge    1cc6e <__sprintf_chk@plt+0x18f8e>
   1cc69:	movzx  edx,BYTE PTR [r10+rax*1]
   1cc6e:	test   rsi,rsi
   1cc71:	je     1cc77 <__sprintf_chk@plt+0x18f97>
   1cc73:	movzx  edx,BYTE PTR [rsi+rdx*1]
   1cc77:	cmp    BYTE PTR [rdi+rdx*1],0x0
   1cc7b:	je     1cc50 <__sprintf_chk@plt+0x18f70>
   1cc7d:	test   cl,cl
   1cc7f:	je     1bfa7 <__sprintf_chk@plt+0x182c7>
   1cc85:	mov    QWORD PTR [rsp+0xc8],rax
   1cc8d:	mov    rbx,rax
   1cc90:	jmp    1bfa7 <__sprintf_chk@plt+0x182c7>
   1cc95:	mov    rax,QWORD PTR [rsp+0x8]
   1cc9a:	lea    r15,[rsp+0xd0]
   1cca2:	pxor   xmm0,xmm0
   1cca6:	mov    rdi,r14
   1cca9:	mov    rsi,r15
   1ccac:	mov    QWORD PTR [rsp+0xd0],r13
   1ccb4:	mov    QWORD PTR [rsp+0xe0],rax
   1ccbc:	mov    rax,QWORD PTR [rsp+0x28]
   1ccc1:	mov    QWORD PTR [rsp+0xd8],0x0
   1cccd:	mov    QWORD PTR [rsp+0xe8],rax
   1ccd5:	mov    QWORD PTR [rsp+0x100],0x0
   1cce1:	movups XMMWORD PTR [rsp+0xf0],xmm0
   1cce9:	call   17d00 <__sprintf_chk@plt+0x14020>
   1ccee:	mov    rdi,QWORD PTR [rsp+0x100]
   1ccf6:	mov    ebx,eax
   1ccf8:	mov    DWORD PTR [rsp+0x10],eax
   1ccfc:	call   3680 <free@plt>
   1cd01:	test   ebx,ebx
   1cd03:	jne    1cf1e <__sprintf_chk@plt+0x1923e>
   1cd09:	cmp    QWORD PTR [r13+0x0],0x0
   1cd0e:	je     1ce15 <__sprintf_chk@plt+0x19135>
   1cd14:	mov    rdi,QWORD PTR [rsp+0x1c8]
   1cd1c:	call   3680 <free@plt>
   1cd21:	mov    rax,QWORD PTR [rsp+0x8]
   1cd26:	mov    QWORD PTR [rsp+0x1c8],r13
   1cd2e:	mov    QWORD PTR [rsp+0x1c0],rax
   1cd36:	mov    rax,QWORD PTR [rsp+0x28]
   1cd3b:	mov    QWORD PTR [rsp+0x1b8],rax
   1cd43:	jmp    1c31b <__sprintf_chk@plt+0x1863b>
   1cd48:	mov    r15,QWORD PTR [rsp+0x1c8]
   1cd50:	jmp    1cb6e <__sprintf_chk@plt+0x18e8e>
   1cd55:	mov    rdi,r14
   1cd58:	call   13ee0 <__sprintf_chk@plt+0x10200>
   1cd5d:	mov    rdi,QWORD PTR [rsp+0x208]
   1cd65:	call   3680 <free@plt>
   1cd6a:	mov    rdi,QWORD PTR [rsp+0x1e8]
   1cd72:	call   3680 <free@plt>
   1cd77:	jmp    1cb89 <__sprintf_chk@plt+0x18ea9>
   1cd7c:	mov    rax,QWORD PTR [rsp+0x38]
   1cd81:	test   BYTE PTR [rax+0xb0],0x2
   1cd88:	jne    1bca5 <__sprintf_chk@plt+0x17fc5>
   1cd8e:	jmp    1bce1 <__sprintf_chk@plt+0x18001>
   1cd93:	mov    rdx,rbp
   1cd96:	mov    rdi,r14
   1cd99:	lea    rbx,[rbp+0x1]
   1cd9d:	call   16080 <__sprintf_chk@plt+0x123a0>
   1cda2:	mov    QWORD PTR [rsp+0x8],rax
   1cda7:	jmp    1c96c <__sprintf_chk@plt+0x18c8c>
   1cdac:	mov    QWORD PTR [rsp+0xc8],rax
   1cdb4:	jmp    1bf7c <__sprintf_chk@plt+0x1829c>
   1cdb9:	mov    r14,rcx
   1cdbc:	jmp    1bfa7 <__sprintf_chk@plt+0x182c7>
   1cdc1:	mov    DWORD PTR [rsp+0x54],0x1
   1cdc9:	mov    r15,QWORD PTR [rsp+0x1c8]
   1cdd1:	mov    r14,rcx
   1cdd4:	jmp    1cb6e <__sprintf_chk@plt+0x18e8e>
   1cdd9:	cmp    BYTE PTR [r13+0x68],0x0
   1cdde:	js     1ce40 <__sprintf_chk@plt+0x19160>
   1cde0:	mov    rax,QWORD PTR [rsp+0x8]
   1cde5:	mov    edi,DWORD PTR [rsp+0x50]
   1cde9:	mov    QWORD PTR [rsp+0x30],0x1
   1cdf2:	mov    QWORD PTR [rsp+0x28],rax
   1cdf7:	test   edi,edi
   1cdf9:	jne    1c0d7 <__sprintf_chk@plt+0x183f7>
   1cdff:	jmp    1c27a <__sprintf_chk@plt+0x1859a>
   1ce04:	mov    r12,rax
   1ce07:	jmp    1c110 <__sprintf_chk@plt+0x18430>
   1ce0c:	mov    r13,QWORD PTR [rbx+0x58]
   1ce10:	jmp    1cbf3 <__sprintf_chk@plt+0x18f13>
   1ce15:	mov    rdi,r13
   1ce18:	call   3680 <free@plt>
   1ce1d:	jmp    1ca31 <__sprintf_chk@plt+0x18d51>
   1ce22:	mov    rdx,QWORD PTR [r13+0x50]
   1ce26:	lea    rdi,[rsp+0xc0]
   1ce2e:	mov    ecx,eax
   1ce30:	mov    rsi,rbx
   1ce33:	call   16960 <__sprintf_chk@plt+0x12c80>
   1ce38:	mov    r13,rax
   1ce3b:	jmp    1cbf3 <__sprintf_chk@plt+0x18f13>
   1ce40:	mov    rdx,QWORD PTR [rsp+0x8]
   1ce45:	mov    rsi,r13
   1ce48:	mov    rdi,r14
   1ce4b:	call   16080 <__sprintf_chk@plt+0x123a0>
   1ce50:	mov    QWORD PTR [rsp+0x30],rax
   1ce55:	test   rax,rax
   1ce58:	je     1c0d7 <__sprintf_chk@plt+0x183f7>
   1ce5e:	jmp    1cde0 <__sprintf_chk@plt+0x19100>
   1ce60:	mov    rax,QWORD PTR [rsp+0x80]
   1ce68:	movzx  eax,BYTE PTR [rax+rbx*1]
   1ce6c:	jmp    1bf60 <__sprintf_chk@plt+0x18280>
   1ce71:	lea    rbp,[r13+0x8]
   1ce75:	xor    edx,edx
   1ce77:	mov    rdi,r14
   1ce7a:	mov    rsi,rbp
   1ce7d:	call   141c0 <__sprintf_chk@plt+0x104e0>
   1ce82:	mov    DWORD PTR [rsp+0xc0],eax
   1ce89:	test   eax,eax
   1ce8b:	jne    1cf6c <__sprintf_chk@plt+0x1928c>
   1ce91:	movzx  eax,BYTE PTR [r13+0x68]
   1ce96:	test   al,0x40
   1ce98:	jne    1cf4c <__sprintf_chk@plt+0x1926c>
   1ce9e:	mov    BYTE PTR [rsp+0x18],0x0
   1cea3:	jmp    1c0bd <__sprintf_chk@plt+0x183dd>
   1cea8:	mov    r13,QWORD PTR [rbx+0x60]
   1ceac:	jmp    1cbf3 <__sprintf_chk@plt+0x18f13>
   1ceb1:	mov    r15,rcx
   1ceb4:	jmp    1cb66 <__sprintf_chk@plt+0x18e86>
   1ceb9:	mov    r12,QWORD PTR [rsp+0x30]
   1cebe:	mov    rdi,r13
   1cec1:	call   3680 <free@plt>
   1cec6:	mov    rdi,r12
   1cec9:	call   3680 <free@plt>
   1cece:	cmp    DWORD PTR [rsp+0x10],0x1
   1ced3:	je     1ca31 <__sprintf_chk@plt+0x18d51>
   1ced9:	mov    eax,DWORD PTR [rsp+0x10]
   1cedd:	mov    r15,QWORD PTR [rsp+0x1c8]
   1cee5:	mov    DWORD PTR [rsp+0x54],eax
   1cee9:	jmp    1cb6e <__sprintf_chk@plt+0x18e8e>
   1ceee:	xchg   ax,ax
   1cef0:	mov    rdi,QWORD PTR [rsp+0x18]
   1cef5:	mov    rcx,rbx
   1cef8:	mov    rdx,r12
   1cefb:	mov    rsi,r13
   1cefe:	mov    QWORD PTR [rsp+0x28],rbp
   1cf03:	call   16ea0 <__sprintf_chk@plt+0x131c0>
   1cf08:	mov    rdi,r12
   1cf0b:	mov    ebx,eax
   1cf0d:	mov    DWORD PTR [rsp+0x10],eax
   1cf11:	call   3680 <free@plt>
   1cf16:	test   ebx,ebx
   1cf18:	je     1cd14 <__sprintf_chk@plt+0x19034>
   1cf1e:	xor    r12d,r12d
   1cf21:	jmp    1cebe <__sprintf_chk@plt+0x191de>
   1cf23:	mov    DWORD PTR [rsp+0x54],eax
   1cf27:	mov    r15,QWORD PTR [rsp+0x1c8]
   1cf2f:	mov    r14,rcx
   1cf32:	jmp    1cb6e <__sprintf_chk@plt+0x18e8e>
   1cf37:	mov    rdi,r13
   1cf3a:	call   3680 <free@plt>
   1cf3f:	mov    DWORD PTR [rsp+0x54],0xc
   1cf47:	jmp    1cb6e <__sprintf_chk@plt+0x18e8e>
   1cf4c:	mov    rsi,rbp
   1cf4f:	mov    rdi,r14
   1cf52:	call   19540 <__sprintf_chk@plt+0x15860>
   1cf57:	mov    DWORD PTR [rsp+0xc0],eax
   1cf5e:	test   eax,eax
   1cf60:	jne    1cf6c <__sprintf_chk@plt+0x1928c>
   1cf62:	movzx  eax,BYTE PTR [r13+0x68]
   1cf67:	jmp    1ce9e <__sprintf_chk@plt+0x191be>
   1cf6c:	cdqe   
   1cf6e:	mov    QWORD PTR [rsp+0x28],rax
   1cf73:	jmp    1c27a <__sprintf_chk@plt+0x1859a>
   1cf78:	xor    eax,eax
   1cf7a:	jmp    1c3f1 <__sprintf_chk@plt+0x18711>
   1cf7f:	cmp    r10,rax
   1cf82:	je     1cf99 <__sprintf_chk@plt+0x192b9>
   1cf84:	mov    rax,QWORD PTR [r9+rax*8]
   1cf88:	mov    QWORD PTR [rdx],rax
   1cf8b:	cmp    r10,rcx
   1cf8e:	je     1cf9e <__sprintf_chk@plt+0x192be>
   1cf90:	mov    rcx,QWORD PTR [r9+rcx*8]
   1cf94:	jmp    1c43c <__sprintf_chk@plt+0x1875c>
   1cf99:	mov    rax,r8
   1cf9c:	jmp    1cf88 <__sprintf_chk@plt+0x192a8>
   1cf9e:	mov    rcx,r8
   1cfa1:	jmp    1c43c <__sprintf_chk@plt+0x1875c>
   1cfa6:	mov    DWORD PTR [rsp+0x54],eax
   1cfaa:	mov    r15,QWORD PTR [rsp+0x1c8]
   1cfb2:	jmp    1cb6e <__sprintf_chk@plt+0x18e8e>
   1cfb7:	call   3840 <__stack_chk_fail@plt>
   1cfbc:	mov    rsi,QWORD PTR [rsp+0xa8]
   1cfc4:	mov    rax,QWORD PTR [rsp+0x1b8]
   1cfcc:	mov    QWORD PTR [rsi],0x0
   1cfd3:	mov    QWORD PTR [rsi+0x8],rax
   1cfd7:	xor    eax,eax
   1cfd9:	jmp    1c3f1 <__sprintf_chk@plt+0x18711>
   1cfde:	xchg   ax,ax
   1cfe0:	push   r15
   1cfe2:	push   r14
   1cfe4:	push   r13
   1cfe6:	mov    r13,r9
   1cfe9:	push   r12
   1cfeb:	push   rbp
   1cfec:	mov    rbp,rdi
   1cfef:	push   rbx
   1cff0:	mov    rbx,rdx
   1cff3:	sub    rsp,0x58
   1cff7:	mov    r12,QWORD PTR [rsi]
   1cffa:	mov    QWORD PTR [rsp+0x28],rsi
   1cfff:	mov    QWORD PTR [rsp+0x18],rcx
   1d004:	mov    QWORD PTR [rsp+0x8],r8
   1d009:	mov    rax,QWORD PTR fs:0x28
   1d012:	mov    QWORD PTR [rsp+0x48],rax
   1d017:	xor    eax,eax
   1d019:	mov    rax,QWORD PTR [r12+0xa8]
   1d021:	mov    QWORD PTR [rsp+0x20],rax
   1d026:	call   1fad0 <__sprintf_chk@plt+0x1bdf0>
   1d02b:	mov    edx,DWORD PTR [r13+0x0]
   1d02f:	mov    r15,rax
   1d032:	test   edx,edx
   1d034:	je     1d03f <__sprintf_chk@plt+0x1935f>
   1d036:	test   rax,rax
   1d039:	je     1d1a7 <__sprintf_chk@plt+0x194c7>
   1d03f:	mov    r14,QWORD PTR [rsp+0x18]
   1d044:	or     r14,0x800000
   1d04b:	mov    rax,r14
   1d04e:	mov    r14,r15
   1d051:	mov    r15,rax
   1d054:	jmp    1d0ee <__sprintf_chk@plt+0x1940e>
   1d059:	nop    DWORD PTR [rax+0x0]
   1d060:	cmp    al,0x9
   1d062:	jne    1d070 <__sprintf_chk@plt+0x19390>
   1d064:	cmp    QWORD PTR [rsp+0x8],0x0
   1d06a:	jne    1d11a <__sprintf_chk@plt+0x1943a>
   1d070:	mov    r8,QWORD PTR [rsp+0x8]
   1d075:	mov    rcx,QWORD PTR [rsp+0x18]
   1d07a:	mov    rdx,rbx
   1d07d:	mov    r9,r13
   1d080:	mov    rax,QWORD PTR [r12+0xa8]
   1d088:	mov    rsi,QWORD PTR [rsp+0x28]
   1d08d:	mov    rdi,rbp
   1d090:	mov    QWORD PTR [rsp+0x10],rax
   1d095:	mov    rax,QWORD PTR [rsp+0x20]
   1d09a:	mov    QWORD PTR [r12+0xa8],rax
   1d0a2:	call   1fad0 <__sprintf_chk@plt+0x1bdf0>
   1d0a7:	mov    rdx,rax
   1d0aa:	mov    eax,DWORD PTR [r13+0x0]
   1d0ae:	test   eax,eax
   1d0b0:	je     1d0bb <__sprintf_chk@plt+0x193db>
   1d0b2:	test   rdx,rdx
   1d0b5:	je     1d155 <__sprintf_chk@plt+0x19475>
   1d0bb:	mov    rax,QWORD PTR [rsp+0x10]
   1d0c0:	or     QWORD PTR [r12+0xa8],rax
   1d0c8:	pxor   xmm0,xmm0
   1d0cc:	mov    rsi,r14
   1d0cf:	lea    rcx,[rsp+0x30]
   1d0d4:	mov    rdi,r12
   1d0d7:	movups XMMWORD PTR [rsp+0x30],xmm0
   1d0dc:	mov    BYTE PTR [rsp+0x38],0xa
   1d0e1:	call   12b00 <__sprintf_chk@plt+0xee20>
   1d0e6:	mov    r14,rax
   1d0e9:	test   rax,rax
   1d0ec:	je     1d120 <__sprintf_chk@plt+0x19440>
   1d0ee:	cmp    BYTE PTR [rbx+0x8],0xa
   1d0f2:	jne    1d150 <__sprintf_chk@plt+0x19470>
   1d0f4:	mov    rdx,r15
   1d0f7:	mov    rsi,rbp
   1d0fa:	mov    rdi,rbx
   1d0fd:	call   15870 <__sprintf_chk@plt+0x11b90>
   1d102:	cdqe   
   1d104:	add    QWORD PTR [rbp+0x48],rax
   1d108:	movzx  eax,BYTE PTR [rbx+0x8]
   1d10c:	mov    edx,eax
   1d10e:	and    edx,0xfffffff7
   1d111:	cmp    dl,0x2
   1d114:	jne    1d060 <__sprintf_chk@plt+0x19380>
   1d11a:	xor    edx,edx
   1d11c:	jmp    1d0c8 <__sprintf_chk@plt+0x193e8>
   1d11e:	xchg   ax,ax
   1d120:	mov    DWORD PTR [r13+0x0],0xc
   1d128:	mov    r15,rax
   1d12b:	mov    rax,QWORD PTR [rsp+0x48]
   1d130:	sub    rax,QWORD PTR fs:0x28
   1d139:	jne    1d1af <__sprintf_chk@plt+0x194cf>
   1d13b:	add    rsp,0x58
   1d13f:	mov    rax,r15
   1d142:	pop    rbx
   1d143:	pop    rbp
   1d144:	pop    r12
   1d146:	pop    r13
   1d148:	pop    r14
   1d14a:	pop    r15
   1d14c:	ret    
   1d14d:	nop    DWORD PTR [rax]
   1d150:	mov    r15,r14
   1d153:	jmp    1d12b <__sprintf_chk@plt+0x1944b>
   1d155:	mov    r15,r14
   1d158:	test   r14,r14
   1d15b:	je     1d1a7 <__sprintf_chk@plt+0x194c7>
   1d15d:	nop    DWORD PTR [rax]
   1d160:	mov    rbx,r15
   1d163:	mov    r15,QWORD PTR [r15+0x8]
   1d167:	test   r15,r15
   1d16a:	jne    1d160 <__sprintf_chk@plt+0x19480>
   1d16c:	mov    r15,QWORD PTR [rbx+0x10]
   1d170:	test   r15,r15
   1d173:	jne    1d160 <__sprintf_chk@plt+0x19480>
   1d175:	jmp    1d199 <__sprintf_chk@plt+0x194b9>
   1d177:	nop    WORD PTR [rax+rax*1+0x0]
   1d180:	mov    rax,QWORD PTR [rbx]
   1d183:	test   rax,rax
   1d186:	je     1d1a7 <__sprintf_chk@plt+0x194c7>
   1d188:	mov    r15,QWORD PTR [rax+0x10]
   1d18c:	cmp    rbx,r15
   1d18f:	je     1d196 <__sprintf_chk@plt+0x194b6>
   1d191:	test   r15,r15
   1d194:	jne    1d160 <__sprintf_chk@plt+0x19480>
   1d196:	mov    rbx,rax
   1d199:	xor    edi,edi
   1d19b:	mov    rsi,rbx
   1d19e:	call   18ba0 <__sprintf_chk@plt+0x14ec0>
   1d1a3:	test   eax,eax
   1d1a5:	je     1d180 <__sprintf_chk@plt+0x194a0>
   1d1a7:	xor    r15d,r15d
   1d1aa:	jmp    1d12b <__sprintf_chk@plt+0x1944b>
   1d1af:	call   3840 <__stack_chk_fail@plt>
   1d1b4:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   1d1bf:	nop
   1d1c0:	push   r15
   1d1c2:	push   r14
   1d1c4:	push   r13
   1d1c6:	mov    r13,rdi
   1d1c9:	push   r12
   1d1cb:	push   rbp
   1d1cc:	push   rbx
   1d1cd:	sub    rsp,0x118
   1d1d4:	mov    rbp,QWORD PTR [rdi]
   1d1d7:	mov    QWORD PTR [rsp+0x10],rsi
   1d1dc:	mov    QWORD PTR [rsp+0x8],rdx
   1d1e1:	mov    QWORD PTR [rsp+0x18],rcx
   1d1e6:	mov    rbx,QWORD PTR fs:0x28
   1d1ef:	mov    QWORD PTR [rsp+0x108],rbx
   1d1f7:	xor    ebx,ebx
   1d1f9:	and    BYTE PTR [rdi+0x38],0x90
   1d1fd:	cmp    QWORD PTR [rdi+0x8],0xe7
   1d205:	mov    DWORD PTR [rsp+0x3c],0x0
   1d20d:	mov    QWORD PTR [rdi+0x18],rcx
   1d211:	mov    QWORD PTR [rdi+0x10],0x0
   1d219:	mov    QWORD PTR [rdi+0x30],0x0
   1d221:	jbe    1e262 <__sprintf_chk@plt+0x1a582>
   1d227:	lea    rdi,[rbp+0x8]
   1d22b:	mov    rcx,rbp
   1d22e:	xor    eax,eax
   1d230:	mov    QWORD PTR [r13+0x10],0xe8
   1d238:	and    rdi,0xfffffffffffffff8
   1d23c:	mov    QWORD PTR [rbp+0x0],0x0
   1d244:	mov    QWORD PTR [rbp+0xe0],0x0
   1d24f:	sub    rcx,rdi
   1d252:	add    ecx,0xe8
   1d258:	shr    ecx,0x3
   1d25b:	rep stos QWORD PTR es:[rdi],rax
   1d25e:	mov    DWORD PTR [rbp+0x80],0xf
   1d268:	movabs rax,0x555555555555554
   1d272:	cmp    QWORD PTR [rsp+0x8],rax
   1d277:	ja     1dbcc <__sprintf_chk@plt+0x19eec>
   1d27d:	mov    rbx,QWORD PTR [rsp+0x8]
   1d282:	lea    rax,[rbx+0x1]
   1d286:	mov    QWORD PTR [rbp+0x8],rax
   1d28a:	mov    rdi,rax
   1d28d:	shl    rdi,0x4
   1d291:	mov    QWORD PTR [rsp+0x28],rax
   1d296:	call   3a70 <malloc@plt>
   1d29b:	mov    QWORD PTR [rbp+0x0],rax
   1d29f:	test   rbx,rbx
   1d2a2:	je     1e28c <__sprintf_chk@plt+0x1a5ac>
   1d2a8:	mov    esi,0x1
   1d2ad:	nop    DWORD PTR [rax]
   1d2b0:	add    rsi,rsi
   1d2b3:	cmp    QWORD PTR [rsp+0x8],rsi
   1d2b8:	jae    1d2b0 <__sprintf_chk@plt+0x195d0>
   1d2ba:	lea    rbx,[rsi-0x1]
   1d2be:	mov    edi,0x18
   1d2c3:	call   3990 <calloc@plt>
   1d2c8:	mov    QWORD PTR [rbp+0x88],rbx
   1d2cf:	mov    QWORD PTR [rbp+0x40],rax
   1d2d3:	call   3800 <__ctype_get_mb_cur_max@plt>
   1d2d8:	mov    edi,0xe
   1d2dd:	mov    DWORD PTR [rbp+0xb4],eax
   1d2e3:	call   3ac0 <nl_langinfo@plt>
   1d2e8:	movzx  edx,BYTE PTR [rax]
   1d2eb:	and    edx,0xffffffdf
   1d2ee:	cmp    dl,0x55
   1d2f1:	jne    1d330 <__sprintf_chk@plt+0x19650>
   1d2f3:	movzx  edx,BYTE PTR [rax+0x1]
   1d2f7:	and    edx,0xffffffdf
   1d2fa:	cmp    dl,0x54
   1d2fd:	jne    1d330 <__sprintf_chk@plt+0x19650>
   1d2ff:	movzx  edx,BYTE PTR [rax+0x2]
   1d303:	and    edx,0xffffffdf
   1d306:	cmp    dl,0x46
   1d309:	jne    1d330 <__sprintf_chk@plt+0x19650>
   1d30b:	xor    edx,edx
   1d30d:	cmp    BYTE PTR [rax+0x3],0x2d
   1d311:	sete   dl
   1d314:	lea    rax,[rax+rdx*1+0x3]
   1d319:	cmp    BYTE PTR [rax],0x38
   1d31c:	jne    1d330 <__sprintf_chk@plt+0x19650>
   1d31e:	cmp    BYTE PTR [rax+0x1],0x0
   1d322:	jne    1d330 <__sprintf_chk@plt+0x19650>
   1d324:	or     BYTE PTR [rbp+0xb0],0x4
   1d32b:	nop    DWORD PTR [rax+rax*1+0x0]
   1d330:	movzx  eax,BYTE PTR [rbp+0xb0]
   1d337:	mov    edx,eax
   1d339:	and    edx,0xfffffff7
   1d33c:	cmp    DWORD PTR [rbp+0xb4],0x1
   1d343:	mov    BYTE PTR [rbp+0xb0],dl
   1d349:	jle    1d35e <__sprintf_chk@plt+0x1967e>
   1d34b:	test   al,0x4
   1d34d:	je     1dbe6 <__sprintf_chk@plt+0x19f06>
   1d353:	lea    rax,[rip+0x8046]        # 253a0 <__sprintf_chk@plt+0x216c0>
   1d35a:	mov    QWORD PTR [rbp+0x78],rax
   1d35e:	cmp    QWORD PTR [rbp+0x0],0x0
   1d363:	je     1dbcc <__sprintf_chk@plt+0x19eec>
   1d369:	cmp    QWORD PTR [rbp+0x40],0x0
   1d36e:	je     1dbcc <__sprintf_chk@plt+0x19eec>
   1d374:	lea    rsi,[rsp+0x78]
   1d379:	xor    eax,eax
   1d37b:	mov    ecx,0x12
   1d380:	mov    rdx,QWORD PTR [r13+0x28]
   1d384:	mov    rdi,rsi
   1d387:	mov    r10,QWORD PTR [rsp+0x8]
   1d38c:	lea    r12,[rsp+0x70]
   1d391:	mov    DWORD PTR [rsp+0x3c],0x0
   1d399:	rep stos QWORD PTR es:[rdi],rax
   1d39c:	mov    rax,QWORD PTR [rsp+0x10]
   1d3a1:	mov    rbx,rdx
   1d3a4:	mov    edi,DWORD PTR [rbp+0xb4]
   1d3aa:	mov    QWORD PTR [rsp+0xc8],r10
   1d3b2:	mov    QWORD PTR [rsp+0x70],rax
   1d3b7:	mov    rax,QWORD PTR [rsp+0x18]
   1d3bc:	mov    QWORD PTR [rsp+0xc0],r10
   1d3c4:	and    eax,0x400000
   1d3c9:	mov    QWORD PTR [rsp+0xe8],rdx
   1d3d1:	mov    QWORD PTR [rsp+0x20],rax
   1d3d6:	setne  BYTE PTR [rsp+0xf8]
   1d3de:	or     rbx,rax
   1d3e1:	movzx  eax,BYTE PTR [rbp+0xb0]
   1d3e8:	setne  sil
   1d3ec:	mov    DWORD PTR [rsp+0x100],edi
   1d3f3:	mov    ecx,eax
   1d3f5:	shr    al,0x3
   1d3f8:	mov    BYTE PTR [rsp+0xfb],sil
   1d400:	shr    cl,0x2
   1d403:	and    eax,0x1
   1d406:	mov    QWORD PTR [rsp+0xd8],r10
   1d40e:	and    ecx,0x1
   1d411:	mov    BYTE PTR [rsp+0xfa],al
   1d418:	mov    BYTE PTR [rsp+0xf9],cl
   1d41f:	mov    QWORD PTR [rsp+0xd0],r10
   1d427:	test   r10,r10
   1d42a:	jne    1dba8 <__sprintf_chk@plt+0x19ec8>
   1d430:	mov    rax,QWORD PTR [rsp+0x10]
   1d435:	test   sil,sil
   1d438:	cmovne rax,QWORD PTR [rsp+0x78]
   1d43e:	cmp    QWORD PTR [rsp+0x20],0x0
   1d444:	mov    QWORD PTR [rsp+0x10],rax
   1d449:	mov    QWORD PTR [rsp+0x78],rax
   1d44e:	je     1d570 <__sprintf_chk@plt+0x19890>
   1d454:	cmp    edi,0x1
   1d457:	jle    1e24d <__sprintf_chk@plt+0x1a56d>
   1d45d:	mov    rdi,r12
   1d460:	call   135e0 <__sprintf_chk@plt+0xf900>
   1d465:	test   eax,eax
   1d467:	jne    1db95 <__sprintf_chk@plt+0x19eb5>
   1d46d:	mov    rax,QWORD PTR [rsp+0x8]
   1d472:	cmp    rax,QWORD PTR [rsp+0xa8]
   1d47a:	jle    1e2e0 <__sprintf_chk@plt+0x1a600>
   1d480:	mov    rsi,QWORD PTR [rsp+0xb0]
   1d488:	movsxd rax,DWORD PTR [rbp+0xb4]
   1d48f:	add    rax,QWORD PTR [rsp+0xa0]
   1d497:	cmp    rsi,rax
   1d49a:	jg     1e2e0 <__sprintf_chk@plt+0x1a600>
   1d4a0:	add    rsi,rsi
   1d4a3:	mov    rdi,r12
   1d4a6:	call   129f0 <__sprintf_chk@plt+0xed10>
   1d4ab:	test   eax,eax
   1d4ad:	je     1d45d <__sprintf_chk@plt+0x1977d>
   1d4af:	mov    DWORD PTR [rsp+0x3c],eax
   1d4b3:	mov    r14,QWORD PTR [r13+0x0]
   1d4b7:	mov    rbx,QWORD PTR [r14+0x70]
   1d4bb:	test   rbx,rbx
   1d4be:	je     1d4d0 <__sprintf_chk@plt+0x197f0>
   1d4c0:	mov    rdi,rbx
   1d4c3:	mov    rbx,QWORD PTR [rbx]
   1d4c6:	call   3680 <free@plt>
   1d4cb:	test   rbx,rbx
   1d4ce:	jne    1d4c0 <__sprintf_chk@plt+0x197e0>
   1d4d0:	mov    QWORD PTR [r14+0x70],0x0
   1d4d8:	mov    rdi,QWORD PTR [r14+0x20]
   1d4dc:	mov    DWORD PTR [r14+0x80],0xf
   1d4e7:	mov    QWORD PTR [r14+0x68],0x0
   1d4ef:	call   3680 <free@plt>
   1d4f4:	mov    QWORD PTR [r14+0x20],0x0
   1d4fc:	mov    rdi,QWORD PTR [rsp+0x80]
   1d504:	call   3680 <free@plt>
   1d509:	mov    rdi,QWORD PTR [rsp+0x88]
   1d511:	call   3680 <free@plt>
   1d516:	cmp    BYTE PTR [rsp+0xfb],0x0
   1d51e:	jne    1deaf <__sprintf_chk@plt+0x1a1cf>
   1d524:	mov    rdi,rbp
   1d527:	call   189d0 <__sprintf_chk@plt+0x14cf0>
   1d52c:	mov    QWORD PTR [r13+0x0],0x0
   1d534:	mov    eax,DWORD PTR [rsp+0x3c]
   1d538:	mov    QWORD PTR [r13+0x8],0x0
   1d540:	mov    rbx,QWORD PTR [rsp+0x108]
   1d548:	sub    rbx,QWORD PTR fs:0x28
   1d551:	jne    1e43e <__sprintf_chk@plt+0x1a75e>
   1d557:	add    rsp,0x118
   1d55e:	pop    rbx
   1d55f:	pop    rbp
   1d560:	pop    r12
   1d562:	pop    r13
   1d564:	pop    r14
   1d566:	pop    r15
   1d568:	ret    
   1d569:	nop    DWORD PTR [rax+0x0]
   1d570:	cmp    edi,0x1
   1d573:	jg     1e0e1 <__sprintf_chk@plt+0x1a401>
   1d579:	mov    rcx,QWORD PTR [rsp+0xb0]
   1d581:	test   rbx,rbx
   1d584:	je     1d5ea <__sprintf_chk@plt+0x1990a>
   1d586:	cmp    QWORD PTR [rsp+0xc8],rcx
   1d58e:	mov    rax,QWORD PTR [rsp+0xa0]
   1d596:	cmovle rcx,QWORD PTR [rsp+0xc8]
   1d59f:	cmp    rcx,rax
   1d5a2:	jg     1d5ba <__sprintf_chk@plt+0x198da>
   1d5a4:	jmp    1e3e1 <__sprintf_chk@plt+0x1a701>
   1d5a9:	nop    DWORD PTR [rax+0x0]
   1d5b0:	mov    rbx,QWORD PTR [rsp+0x78]
   1d5b5:	mov    QWORD PTR [rsp+0x10],rbx
   1d5ba:	mov    rdx,QWORD PTR [rsp+0x70]
   1d5bf:	mov    rsi,QWORD PTR [rsp+0xe8]
   1d5c7:	mov    rbx,QWORD PTR [rsp+0x10]
   1d5cc:	add    rdx,rax
   1d5cf:	add    rdx,QWORD PTR [rsp+0x98]
   1d5d7:	movzx  edx,BYTE PTR [rdx]
   1d5da:	movzx  edx,BYTE PTR [rsi+rdx*1]
   1d5de:	mov    BYTE PTR [rbx+rax*1],dl
   1d5e1:	add    rax,0x1
   1d5e5:	cmp    rcx,rax
   1d5e8:	jne    1d5b0 <__sprintf_chk@plt+0x198d0>
   1d5ea:	mov    QWORD PTR [rsp+0xa0],rcx
   1d5f2:	mov    QWORD PTR [rsp+0xa8],rcx
   1d5fa:	mov    DWORD PTR [rsp+0x3c],0x0
   1d602:	mov    rbx,QWORD PTR [rsp+0x18]
   1d607:	mov    r15,QWORD PTR [r13+0x0]
   1d60b:	lea    r14,[rsp+0x40]
   1d610:	mov    rsi,r12
   1d613:	mov    QWORD PTR [r13+0x30],0x0
   1d61b:	mov    rdi,r14
   1d61e:	mov    QWORD PTR [r15+0xd8],rbx
   1d625:	mov    rdx,rbx
   1d628:	or     rdx,0x800000
   1d62f:	mov    QWORD PTR [rsp+0x28],r14
   1d634:	call   15870 <__sprintf_chk@plt+0x11b90>
   1d639:	mov    rcx,rbx
   1d63c:	mov    rdx,r14
   1d63f:	lea    r9,[rsp+0x3c]
   1d644:	xor    r8d,r8d
   1d647:	mov    rsi,r13
   1d64a:	mov    rdi,r12
   1d64d:	cdqe   
   1d64f:	add    QWORD PTR [rsp+0xb8],rax
   1d657:	call   1cfe0 <__sprintf_chk@plt+0x19300>
   1d65c:	mov    ecx,DWORD PTR [rsp+0x3c]
   1d660:	mov    r14,rax
   1d663:	test   ecx,ecx
   1d665:	jne    1e2ad <__sprintf_chk@plt+0x1a5cd>
   1d66b:	lea    r12,[rsp+0x50]
   1d670:	pxor   xmm0,xmm0
   1d674:	xor    edx,edx
   1d676:	xor    esi,esi
   1d678:	mov    rcx,r12
   1d67b:	mov    rdi,r15
   1d67e:	movups XMMWORD PTR [rsp+0x50],xmm0
   1d683:	mov    BYTE PTR [rsp+0x58],0x2
   1d688:	call   12b00 <__sprintf_chk@plt+0xee20>
   1d68d:	mov    rdx,rax
   1d690:	test   r14,r14
   1d693:	je     1d6c4 <__sprintf_chk@plt+0x199e4>
   1d695:	pxor   xmm0,xmm0
   1d699:	mov    rcx,r12
   1d69c:	mov    rsi,r14
   1d69f:	mov    rdi,r15
   1d6a2:	mov    QWORD PTR [rsp+0x8],rdx
   1d6a7:	movups XMMWORD PTR [rsp+0x50],xmm0
   1d6ac:	mov    BYTE PTR [rsp+0x58],0x10
   1d6b1:	call   12b00 <__sprintf_chk@plt+0xee20>
   1d6b6:	mov    rdx,QWORD PTR [rsp+0x8]
   1d6bb:	mov    r8,rax
   1d6be:	mov    rax,rdx
   1d6c1:	mov    rdx,r8
   1d6c4:	test   rax,rax
   1d6c7:	mov    r14,QWORD PTR [r13+0x0]
   1d6cb:	sete   cl
   1d6ce:	test   rdx,rdx
   1d6d1:	sete   al
   1d6d4:	or     cl,al
   1d6d6:	jne    1e298 <__sprintf_chk@plt+0x1a5b8>
   1d6dc:	mov    QWORD PTR [rbp+0x68],rdx
   1d6e0:	mov    rbx,QWORD PTR [r14+0x8]
   1d6e4:	lea    rdi,[rbx*8+0x0]
   1d6ec:	mov    QWORD PTR [rsp+0x8],rdi
   1d6f1:	call   3a70 <malloc@plt>
   1d6f6:	mov    rdi,QWORD PTR [rsp+0x8]
   1d6fb:	mov    QWORD PTR [r14+0x18],rax
   1d6ff:	mov    r15,rax
   1d702:	call   3a70 <malloc@plt>
   1d707:	lea    rdi,[rbx+rbx*2]
   1d70b:	mov    QWORD PTR [r14+0x20],rax
   1d70f:	shl    rdi,0x3
   1d713:	mov    QWORD PTR [rsp+0x8],rdi
   1d718:	mov    QWORD PTR [rsp+0x10],rax
   1d71d:	call   3a70 <malloc@plt>
   1d722:	mov    rdi,QWORD PTR [rsp+0x8]
   1d727:	mov    QWORD PTR [r14+0x28],rax
   1d72b:	mov    rbx,rax
   1d72e:	call   3a70 <malloc@plt>
   1d733:	test   r15,r15
   1d736:	mov    rdx,QWORD PTR [rsp+0x10]
   1d73b:	mov    QWORD PTR [r14+0x30],rax
   1d73f:	je     1dbd9 <__sprintf_chk@plt+0x19ef9>
   1d745:	test   rdx,rdx
   1d748:	je     1dbd9 <__sprintf_chk@plt+0x19ef9>
   1d74e:	test   rbx,rbx
   1d751:	je     1dbd9 <__sprintf_chk@plt+0x19ef9>
   1d757:	test   rax,rax
   1d75a:	je     1dbd9 <__sprintf_chk@plt+0x19ef9>
   1d760:	mov    r15,QWORD PTR [r13+0x30]
   1d764:	lea    rdi,[r15*8+0x0]
   1d76c:	call   3a70 <malloc@plt>
   1d771:	mov    rdx,QWORD PTR [r14+0x68]
   1d775:	mov    QWORD PTR [r14+0xe0],rax
   1d77c:	mov    rdi,rax
   1d77f:	test   rax,rax
   1d782:	je     1d858 <__sprintf_chk@plt+0x19b78>
   1d788:	xor    eax,eax
   1d78a:	test   r15,r15
   1d78d:	je     1d79d <__sprintf_chk@plt+0x19abd>
   1d78f:	nop
   1d790:	mov    QWORD PTR [rdi+rax*8],rax
   1d794:	add    rax,0x1
   1d798:	cmp    rax,r15
   1d79b:	jne    1d790 <__sprintf_chk@plt+0x19ab0>
   1d79d:	movzx  r11d,BYTE PTR [rdx+0x30]
   1d7a2:	mov    rsi,QWORD PTR [rdx+0x8]
   1d7a6:	mov    rax,rdx
   1d7a9:	mov    r10d,0x1
   1d7af:	mov    r9d,0x1
   1d7b5:	cmp    r11b,0x4
   1d7b9:	je     1d7dc <__sprintf_chk@plt+0x19afc>
   1d7bb:	cmp    r11b,0x11
   1d7bf:	je     1d908 <__sprintf_chk@plt+0x19c28>
   1d7c5:	test   rsi,rsi
   1d7c8:	je     1d7fc <__sprintf_chk@plt+0x19b1c>
   1d7ca:	movzx  r11d,BYTE PTR [rsi+0x30]
   1d7cf:	mov    rax,rsi
   1d7d2:	mov    rsi,QWORD PTR [rsi+0x8]
   1d7d6:	cmp    r11b,0x4
   1d7da:	jne    1d7bb <__sprintf_chk@plt+0x19adb>
   1d7dc:	movsxd rcx,DWORD PTR [rax+0x28]
   1d7e0:	mov    ebx,r9d
   1d7e3:	mov    rcx,QWORD PTR [rdi+rcx*8]
   1d7e7:	shl    ebx,cl
   1d7e9:	mov    QWORD PTR [rax+0x28],rcx
   1d7ed:	movsxd rcx,ebx
   1d7f0:	or     QWORD PTR [r14+0xa0],rcx
   1d7f7:	test   rsi,rsi
   1d7fa:	jne    1d7ca <__sprintf_chk@plt+0x19aea>
   1d7fc:	xor    esi,esi
   1d7fe:	jmp    1d803 <__sprintf_chk@plt+0x19b23>
   1d800:	mov    rax,rcx
   1d803:	mov    rcx,QWORD PTR [rax+0x10]
   1d807:	test   rcx,rcx
   1d80a:	je     1d815 <__sprintf_chk@plt+0x19b35>
   1d80c:	cmp    rcx,rsi
   1d80f:	jne    1e18c <__sprintf_chk@plt+0x1a4ac>
   1d815:	mov    rcx,QWORD PTR [rax]
   1d818:	mov    rsi,rax
   1d81b:	test   rcx,rcx
   1d81e:	jne    1d800 <__sprintf_chk@plt+0x19b20>
   1d820:	xor    eax,eax
   1d822:	test   r15,r15
   1d825:	je     1d83f <__sprintf_chk@plt+0x19b5f>
   1d827:	nop    WORD PTR [rax+rax*1+0x0]
   1d830:	cmp    QWORD PTR [rdi+rax*8],rax
   1d834:	jne    1d858 <__sprintf_chk@plt+0x19b78>
   1d836:	add    rax,0x1
   1d83a:	cmp    rax,r15
   1d83d:	jne    1d830 <__sprintf_chk@plt+0x19b50>
   1d83f:	call   3680 <free@plt>
   1d844:	mov    rdx,QWORD PTR [r14+0x68]
   1d848:	mov    QWORD PTR [r14+0xe0],0x0
   1d853:	nop    DWORD PTR [rax+rax*1+0x0]
   1d858:	mov    r15,rdx
   1d85b:	mov    rdx,QWORD PTR [rdx+0x8]
   1d85f:	test   rdx,rdx
   1d862:	jne    1d858 <__sprintf_chk@plt+0x19b78>
   1d864:	mov    rdx,QWORD PTR [r15+0x10]
   1d868:	test   rdx,rdx
   1d86b:	jne    1d858 <__sprintf_chk@plt+0x19b78>
   1d86d:	jmp    1d8ac <__sprintf_chk@plt+0x19bcc>
   1d86f:	nop
   1d870:	mov    rdx,QWORD PTR [r15+0x10]
   1d874:	test   rdx,rdx
   1d877:	je     1d88b <__sprintf_chk@plt+0x19bab>
   1d879:	cmp    BYTE PTR [rdx+0x30],0x11
   1d87d:	je     1d8e8 <__sprintf_chk@plt+0x19c08>
   1d87f:	mov    eax,DWORD PTR [rsp+0x50]
   1d883:	test   eax,eax
   1d885:	jne    1db95 <__sprintf_chk@plt+0x19eb5>
   1d88b:	mov    rax,QWORD PTR [r15]
   1d88e:	test   rax,rax
   1d891:	je     1d92f <__sprintf_chk@plt+0x19c4f>
   1d897:	mov    rdx,QWORD PTR [rax+0x10]
   1d89b:	test   rdx,rdx
   1d89e:	je     1d8a5 <__sprintf_chk@plt+0x19bc5>
   1d8a0:	cmp    r15,rdx
   1d8a3:	jne    1d858 <__sprintf_chk@plt+0x19b78>
   1d8a5:	mov    rdx,QWORD PTR [rax+0x8]
   1d8a9:	mov    r15,rax
   1d8ac:	mov    DWORD PTR [rsp+0x50],0x0
   1d8b4:	test   rdx,rdx
   1d8b7:	je     1d870 <__sprintf_chk@plt+0x19b90>
   1d8b9:	cmp    BYTE PTR [rdx+0x30],0x11
   1d8bd:	jne    1d870 <__sprintf_chk@plt+0x19b90>
   1d8bf:	mov    rsi,r13
   1d8c2:	mov    rdi,r12
   1d8c5:	call   12be0 <__sprintf_chk@plt+0xef00>
   1d8ca:	mov    QWORD PTR [r15+0x8],rax
   1d8ce:	test   rax,rax
   1d8d1:	je     1d8d6 <__sprintf_chk@plt+0x19bf6>
   1d8d3:	mov    QWORD PTR [rax],r15
   1d8d6:	mov    rdx,QWORD PTR [r15+0x10]
   1d8da:	test   rdx,rdx
   1d8dd:	je     1d87f <__sprintf_chk@plt+0x19b9f>
   1d8df:	cmp    BYTE PTR [rdx+0x30],0x11
   1d8e3:	jne    1d87f <__sprintf_chk@plt+0x19b9f>
   1d8e5:	nop    DWORD PTR [rax]
   1d8e8:	mov    rsi,r13
   1d8eb:	mov    rdi,r12
   1d8ee:	call   12be0 <__sprintf_chk@plt+0xef00>
   1d8f3:	mov    QWORD PTR [r15+0x10],rax
   1d8f7:	test   rax,rax
   1d8fa:	je     1d87f <__sprintf_chk@plt+0x19b9f>
   1d8fc:	mov    QWORD PTR [rax],r15
   1d8ff:	jmp    1d87f <__sprintf_chk@plt+0x19b9f>
   1d904:	nop    DWORD PTR [rax+0x0]
   1d908:	test   rsi,rsi
   1d90b:	je     1d7fc <__sprintf_chk@plt+0x19b1c>
   1d911:	movzx  r11d,BYTE PTR [rsi+0x30]
   1d916:	mov    rcx,QWORD PTR [rsi+0x8]
   1d91a:	cmp    r11b,0x11
   1d91e:	je     1e0f6 <__sprintf_chk@plt+0x1a416>
   1d924:	mov    rax,rsi
   1d927:	mov    rsi,rcx
   1d92a:	jmp    1d7b5 <__sprintf_chk@plt+0x19ad5>
   1d92f:	mov    rax,QWORD PTR [r14+0x68]
   1d933:	nop    DWORD PTR [rax+rax*1+0x0]
   1d938:	mov    r15,rax
   1d93b:	mov    rax,QWORD PTR [rax+0x8]
   1d93f:	test   rax,rax
   1d942:	jne    1d938 <__sprintf_chk@plt+0x19c58>
   1d944:	mov    rax,QWORD PTR [r15+0x10]
   1d948:	test   rax,rax
   1d94b:	jne    1d938 <__sprintf_chk@plt+0x19c58>
   1d94d:	jmp    1d97d <__sprintf_chk@plt+0x19c9d>
   1d94f:	nop
   1d950:	mov    rax,QWORD PTR [r15+0x8]
   1d954:	mov    rdx,QWORD PTR [rax+0x18]
   1d958:	mov    rax,QWORD PTR [rax+0x38]
   1d95c:	mov    QWORD PTR [r15+0x18],rdx
   1d960:	mov    QWORD PTR [r15+0x38],rax
   1d964:	mov    rdx,QWORD PTR [r15]
   1d967:	test   rdx,rdx
   1d96a:	je     1d9d9 <__sprintf_chk@plt+0x19cf9>
   1d96c:	mov    rax,QWORD PTR [rdx+0x10]
   1d970:	test   rax,rax
   1d973:	je     1d97a <__sprintf_chk@plt+0x19c9a>
   1d975:	cmp    r15,rax
   1d978:	jne    1d938 <__sprintf_chk@plt+0x19c58>
   1d97a:	mov    r15,rdx
   1d97d:	cmp    BYTE PTR [r15+0x30],0x10
   1d982:	je     1d950 <__sprintf_chk@plt+0x19c70>
   1d984:	mov    rsi,QWORD PTR [r15+0x28]
   1d988:	mov    rdx,QWORD PTR [r15+0x30]
   1d98c:	mov    QWORD PTR [r15+0x18],r15
   1d990:	mov    rdi,r14
   1d993:	call   13c20 <__sprintf_chk@plt+0xff40>
   1d998:	mov    QWORD PTR [r15+0x38],rax
   1d99c:	cmp    rax,0xffffffffffffffff
   1d9a0:	je     1db90 <__sprintf_chk@plt+0x19eb0>
   1d9a6:	cmp    BYTE PTR [r15+0x30],0xc
   1d9ab:	jne    1d964 <__sprintf_chk@plt+0x19c84>
   1d9ad:	mov    edx,DWORD PTR [r15+0x28]
   1d9b1:	shl    rax,0x4
   1d9b5:	add    rax,QWORD PTR [r14]
   1d9b8:	and    edx,0x3ff
   1d9be:	mov    ecx,edx
   1d9c0:	mov    edx,DWORD PTR [rax+0x8]
   1d9c3:	shl    ecx,0x8
   1d9c6:	and    edx,0xfffc00ff
   1d9cc:	or     edx,ecx
   1d9ce:	mov    DWORD PTR [rax+0x8],edx
   1d9d1:	mov    rdx,QWORD PTR [r15]
   1d9d4:	test   rdx,rdx
   1d9d7:	jne    1d96c <__sprintf_chk@plt+0x19c8c>
   1d9d9:	mov    rdx,QWORD PTR [r14+0x68]
   1d9dd:	mov    rax,rdx
   1d9e0:	jmp    1da0e <__sprintf_chk@plt+0x19d2e>
   1d9e2:	nop    WORD PTR [rax+rax*1+0x0]
   1d9e8:	test   rcx,rcx
   1d9eb:	je     1d9f5 <__sprintf_chk@plt+0x19d15>
   1d9ed:	mov    rsi,QWORD PTR [rax+0x20]
   1d9f1:	mov    QWORD PTR [rcx+0x20],rsi
   1d9f5:	mov    rdi,QWORD PTR [rax+0x10]
   1d9f9:	test   rdi,rdi
   1d9fc:	je     1da06 <__sprintf_chk@plt+0x19d26>
   1d9fe:	mov    rsi,QWORD PTR [rax+0x20]
   1da02:	mov    QWORD PTR [rdi+0x20],rsi
   1da06:	test   rcx,rcx
   1da09:	je     1da4a <__sprintf_chk@plt+0x19d6a>
   1da0b:	mov    rax,rcx
   1da0e:	movzx  esi,BYTE PTR [rax+0x30]
   1da12:	mov    rcx,QWORD PTR [rax+0x8]
   1da16:	cmp    sil,0xb
   1da1a:	je     1da90 <__sprintf_chk@plt+0x19db0>
   1da1c:	cmp    sil,0x10
   1da20:	jne    1d9e8 <__sprintf_chk@plt+0x19d08>
   1da22:	mov    rsi,QWORD PTR [rax+0x10]
   1da26:	mov    rdi,QWORD PTR [rsi+0x18]
   1da2a:	mov    QWORD PTR [rcx+0x20],rdi
   1da2e:	mov    rax,QWORD PTR [rax+0x20]
   1da32:	mov    QWORD PTR [rsi+0x20],rax
   1da36:	jmp    1da0b <__sprintf_chk@plt+0x19d2b>
   1da38:	nop    DWORD PTR [rax+rax*1+0x0]
   1da40:	mov    rdi,QWORD PTR [rsi+0x10]
   1da44:	mov    rcx,rax
   1da47:	mov    rax,rsi
   1da4a:	cmp    rcx,rdi
   1da4d:	je     1da58 <__sprintf_chk@plt+0x19d78>
   1da4f:	test   rdi,rdi
   1da52:	jne    1e207 <__sprintf_chk@plt+0x1a527>
   1da58:	mov    rsi,QWORD PTR [rax]
   1da5b:	test   rsi,rsi
   1da5e:	jne    1da40 <__sprintf_chk@plt+0x19d60>
   1da60:	lea    r9,[rip+0x7819]        # 25280 <__sprintf_chk@plt+0x215a0>
   1da67:	nop    WORD PTR [rax+rax*1+0x0]
   1da70:	cmp    BYTE PTR [rdx+0x30],0x10
   1da74:	mov    rcx,QWORD PTR [rdx+0x38]
   1da78:	ja     1dc80 <__sprintf_chk@plt+0x19fa0>
   1da7e:	movzx  eax,BYTE PTR [rdx+0x30]
   1da82:	movsxd rax,DWORD PTR [r9+rax*4]
   1da86:	add    rax,r9
   1da89:	notrack jmp rax
   1da8c:	nop    DWORD PTR [rax+0x0]
   1da90:	mov    QWORD PTR [rcx+0x20],rax
   1da94:	jmp    1da0b <__sprintf_chk@plt+0x19d2b>
   1da99:	test   BYTE PTR [r13+0x38],0x10
   1da9e:	jne    1dab1 <__sprintf_chk@plt+0x19dd1>
   1daa0:	cmp    QWORD PTR [r13+0x30],0x0
   1daa5:	je     1dab1 <__sprintf_chk@plt+0x19dd1>
   1daa7:	test   BYTE PTR [r14+0xb0],0x1
   1daaf:	jne    1dabf <__sprintf_chk@plt+0x19ddf>
   1dab1:	cmp    QWORD PTR [r14+0x98],0x0
   1dab9:	je     1decc <__sprintf_chk@plt+0x1a1ec>
   1dabf:	lea    rdi,[rbx+rbx*2]
   1dac3:	shl    rdi,0x3
   1dac7:	call   3a70 <malloc@plt>
   1dacc:	mov    QWORD PTR [r14+0x38],rax
   1dad0:	mov    rcx,rax
   1dad3:	test   rax,rax
   1dad6:	je     1e3d0 <__sprintf_chk@plt+0x1a6f0>
   1dadc:	xor    eax,eax
   1dade:	test   rbx,rbx
   1dae1:	jne    1daf4 <__sprintf_chk@plt+0x19e14>
   1dae3:	jmp    1decc <__sprintf_chk@plt+0x1a1ec>
   1dae8:	nop    DWORD PTR [rax+rax*1+0x0]
   1daf0:	mov    rcx,QWORD PTR [r14+0x38]
   1daf4:	lea    rdx,[rax+rax*2]
   1daf8:	pxor   xmm0,xmm0
   1dafc:	add    rax,0x1
   1db00:	lea    rdx,[rcx+rdx*8]
   1db04:	mov    QWORD PTR [rdx+0x10],0x0
   1db0c:	movups XMMWORD PTR [rdx],xmm0
   1db0f:	mov    rdx,QWORD PTR [r14+0x10]
   1db13:	cmp    rdx,rax
   1db16:	ja     1daf0 <__sprintf_chk@plt+0x19e10>
   1db18:	test   rdx,rdx
   1db1b:	je     1decc <__sprintf_chk@plt+0x1a1ec>
   1db21:	mov    rax,QWORD PTR [r14+0x30]
   1db25:	xor    esi,esi
   1db27:	lea    rdx,[rsi+rsi*2]
   1db2b:	lea    rbx,[rdx*8+0x0]
   1db33:	lea    rdi,[rax+rbx*1]
   1db37:	mov    r15,rbx
   1db3a:	xor    ebx,ebx
   1db3c:	cmp    QWORD PTR [rdi+0x8],0x0
   1db41:	mov    rcx,QWORD PTR [rdi+0x10]
   1db45:	jg     1db6d <__sprintf_chk@plt+0x19e8d>
   1db47:	jmp    1debe <__sprintf_chk@plt+0x1a1de>
   1db4c:	nop    DWORD PTR [rax+0x0]
   1db50:	mov    rax,QWORD PTR [r14+0x30]
   1db54:	add    rbx,0x1
   1db58:	mov    rsi,QWORD PTR [rsp+0x10]
   1db5d:	mov    rcx,QWORD PTR [rsp+0x18]
   1db62:	cmp    rbx,QWORD PTR [rax+r15*1+0x8]
   1db67:	jge    1debe <__sprintf_chk@plt+0x1a1de>
   1db6d:	mov    rax,QWORD PTR [rcx+rbx*8]
   1db71:	mov    QWORD PTR [rsp+0x18],rcx
   1db76:	mov    QWORD PTR [rsp+0x10],rsi
   1db7b:	lea    rdi,[rax+rax*2]
   1db7f:	mov    rax,QWORD PTR [r14+0x38]
   1db83:	lea    rdi,[rax+rdi*8]
   1db87:	call   12a90 <__sprintf_chk@plt+0xedb0>
   1db8c:	test   al,al
   1db8e:	jne    1db50 <__sprintf_chk@plt+0x19e70>
   1db90:	mov    eax,0xc
   1db95:	mov    DWORD PTR [rsp+0x3c],eax
   1db99:	mov    r14,QWORD PTR [r13+0x0]
   1db9d:	jmp    1d4b7 <__sprintf_chk@plt+0x197d7>
   1dba2:	nop    WORD PTR [rax+rax*1+0x0]
   1dba8:	mov    rsi,QWORD PTR [rsp+0x28]
   1dbad:	mov    rdi,r12
   1dbb0:	call   129f0 <__sprintf_chk@plt+0xed10>
   1dbb5:	test   eax,eax
   1dbb7:	jne    1db95 <__sprintf_chk@plt+0x19eb5>
   1dbb9:	movzx  esi,BYTE PTR [rsp+0xfb]
   1dbc1:	mov    edi,DWORD PTR [rbp+0xb4]
   1dbc7:	jmp    1d430 <__sprintf_chk@plt+0x19750>
   1dbcc:	mov    DWORD PTR [rsp+0x3c],0xc
   1dbd4:	jmp    1d524 <__sprintf_chk@plt+0x19844>
   1dbd9:	mov    DWORD PTR [rsp+0x3c],0xc
   1dbe1:	jmp    1d4b7 <__sprintf_chk@plt+0x197d7>
   1dbe6:	mov    esi,0x1
   1dbeb:	mov    edi,0x20
   1dbf0:	call   3990 <calloc@plt>
   1dbf5:	mov    QWORD PTR [rbp+0x78],rax
   1dbf9:	test   rax,rax
   1dbfc:	je     1dbcc <__sprintf_chk@plt+0x19eec>
   1dbfe:	xor    ebx,ebx
   1dc00:	mov    r12d,0x1
   1dc06:	lea    r14d,[rbx*8+0x0]
   1dc0e:	xor    r15d,r15d
   1dc11:	jmp    1dc31 <__sprintf_chk@plt+0x19f51>
   1dc13:	nop    DWORD PTR [rax+rax*1+0x0]
   1dc18:	test   esi,esi
   1dc1a:	jne    1dc23 <__sprintf_chk@plt+0x19f43>
   1dc1c:	or     BYTE PTR [rbp+0xb0],0x8
   1dc23:	add    r15d,0x1
   1dc27:	add    r14d,0x1
   1dc2b:	cmp    r15d,0x40
   1dc2f:	je     1dc70 <__sprintf_chk@plt+0x19f90>
   1dc31:	mov    edi,r14d
   1dc34:	call   3b70 <btowc@plt>
   1dc39:	mov    esi,r14d
   1dc3c:	and    esi,0xffffff80
   1dc3f:	cmp    eax,0xffffffff
   1dc42:	je     1dc18 <__sprintf_chk@plt+0x19f38>
   1dc44:	mov    rdi,QWORD PTR [rbp+0x78]
   1dc48:	mov    r8,r12
   1dc4b:	mov    ecx,r15d
   1dc4e:	shl    r8,cl
   1dc51:	add    rdi,rbx
   1dc54:	or     QWORD PTR [rdi],r8
   1dc57:	test   esi,esi
   1dc59:	jne    1dc23 <__sprintf_chk@plt+0x19f43>
   1dc5b:	cmp    eax,r14d
   1dc5e:	jne    1dc1c <__sprintf_chk@plt+0x19f3c>
   1dc60:	add    r15d,0x1
   1dc64:	add    r14d,0x1
   1dc68:	cmp    r15d,0x40
   1dc6c:	jne    1dc31 <__sprintf_chk@plt+0x19f51>
   1dc6e:	xchg   ax,ax
   1dc70:	add    rbx,0x8
   1dc74:	cmp    rbx,0x20
   1dc78:	jne    1dc06 <__sprintf_chk@plt+0x19f26>
   1dc7a:	jmp    1d35e <__sprintf_chk@plt+0x1967e>
   1dc7f:	nop
   1dc80:	mov    rax,QWORD PTR [rdx+0x20]
   1dc84:	mov    rsi,QWORD PTR [rax+0x38]
   1dc88:	mov    rax,QWORD PTR [r14+0x18]
   1dc8c:	mov    QWORD PTR [rax+rcx*8],rsi
   1dc90:	mov    r15,QWORD PTR [rdx+0x8]
   1dc94:	test   r15,r15
   1dc97:	je     1dcab <__sprintf_chk@plt+0x19fcb>
   1dc99:	mov    rdx,r15
   1dc9c:	jmp    1da70 <__sprintf_chk@plt+0x19d90>
   1dca1:	nop    DWORD PTR [rax+0x0]
   1dca8:	mov    rdx,rax
   1dcab:	mov    rax,QWORD PTR [rdx+0x10]
   1dcaf:	test   rax,rax
   1dcb2:	sete   sil
   1dcb6:	cmp    rax,r15
   1dcb9:	sete   cl
   1dcbc:	or     sil,cl
   1dcbf:	mov    BYTE PTR [rsp+0x10],sil
   1dcc4:	je     1e20f <__sprintf_chk@plt+0x1a52f>
   1dcca:	mov    rax,QWORD PTR [rdx]
   1dccd:	mov    r15,rdx
   1dcd0:	test   rax,rax
   1dcd3:	jne    1dca8 <__sprintf_chk@plt+0x19fc8>
   1dcd5:	mov    BYTE PTR [rsp+0x8],0x0
   1dcda:	xor    ebx,ebx
   1dcdc:	nop    DWORD PTR [rax+0x0]
   1dce0:	cmp    QWORD PTR [r14+0x10],rbx
   1dce4:	je     1dd0a <__sprintf_chk@plt+0x1a02a>
   1dce6:	lea    r9,[rbx+rbx*2]
   1dcea:	lea    r15,[r9*8+0x0]
   1dcf2:	mov    rax,QWORD PTR [r14+0x30]
   1dcf6:	mov    rax,QWORD PTR [rax+r15*1+0x8]
   1dcfb:	test   rax,rax
   1dcfe:	je     1dd2d <__sprintf_chk@plt+0x1a04d>
   1dd00:	add    rbx,0x1
   1dd04:	cmp    QWORD PTR [r14+0x10],rbx
   1dd08:	jne    1dce6 <__sprintf_chk@plt+0x1a006>
   1dd0a:	cmp    BYTE PTR [rsp+0x8],0x0
   1dd0f:	je     1da99 <__sprintf_chk@plt+0x19db9>
   1dd15:	mov    rax,QWORD PTR [r14+0x30]
   1dd19:	xor    r15d,r15d
   1dd1c:	mov    BYTE PTR [rsp+0x8],0x0
   1dd21:	xor    ebx,ebx
   1dd23:	mov    rax,QWORD PTR [rax+r15*1+0x8]
   1dd28:	test   rax,rax
   1dd2b:	jne    1dd00 <__sprintf_chk@plt+0x1a020>
   1dd2d:	mov    ecx,0x1
   1dd32:	mov    rdx,rbx
   1dd35:	mov    rsi,r14
   1dd38:	mov    rdi,r12
   1dd3b:	call   17760 <__sprintf_chk@plt+0x13a80>
   1dd40:	test   eax,eax
   1dd42:	jne    1db95 <__sprintf_chk@plt+0x19eb5>
   1dd48:	mov    rax,QWORD PTR [r14+0x30]
   1dd4c:	add    rbx,0x1
   1dd50:	cmp    QWORD PTR [rax+r15*1+0x8],0x0
   1dd56:	jne    1dce0 <__sprintf_chk@plt+0x1a000>
   1dd58:	mov    rdi,QWORD PTR [rsp+0x60]
   1dd5d:	call   3680 <free@plt>
   1dd62:	cmp    QWORD PTR [r14+0x10],rbx
   1dd66:	je     1e0c6 <__sprintf_chk@plt+0x1a3e6>
   1dd6c:	movzx  eax,BYTE PTR [rsp+0x10]
   1dd71:	lea    r9,[rbx+rbx*2]
   1dd75:	lea    r15,[r9*8+0x0]
   1dd7d:	mov    BYTE PTR [rsp+0x8],al
   1dd81:	jmp    1dcf2 <__sprintf_chk@plt+0x1a012>
   1dd86:	cs nop WORD PTR [rax+rax*1+0x0]
   1dd90:	mov    rax,QWORD PTR [rdx+0x20]
   1dd94:	mov    QWORD PTR [rsp+0x8],rdx
   1dd99:	mov    r15,QWORD PTR [rax+0x38]
   1dd9d:	mov    rax,QWORD PTR [r14+0x28]
   1dda1:	lea    rcx,[rcx+rcx*2]
   1dda5:	mov    edi,0x8
   1ddaa:	lea    rbx,[rax+rcx*8]
   1ddae:	mov    QWORD PTR [rbx],0x1
   1ddb5:	mov    QWORD PTR [rbx+0x8],0x1
   1ddbd:	call   3a70 <malloc@plt>
   1ddc2:	mov    rdx,QWORD PTR [rsp+0x8]
   1ddc7:	lea    r9,[rip+0x74b2]        # 25280 <__sprintf_chk@plt+0x215a0>
   1ddce:	test   rax,rax
   1ddd1:	mov    QWORD PTR [rbx+0x10],rax
   1ddd5:	je     1e39e <__sprintf_chk@plt+0x1a6be>
   1dddb:	mov    QWORD PTR [rax],r15
   1ddde:	mov    r15,QWORD PTR [rdx+0x8]
   1dde2:	jmp    1dc94 <__sprintf_chk@plt+0x19fb4>
   1dde7:	or     BYTE PTR [r14+0xb0],0x1
   1ddef:	mov    r15,QWORD PTR [rdx+0x8]
   1ddf3:	test   r15,r15
   1ddf6:	je     1e234 <__sprintf_chk@plt+0x1a554>
   1ddfc:	mov    rax,QWORD PTR [r15+0x18]
   1de00:	mov    rsi,QWORD PTR [rax+0x38]
   1de04:	mov    rax,QWORD PTR [rdx+0x10]
   1de08:	test   rax,rax
   1de0b:	je     1e227 <__sprintf_chk@plt+0x1a547>
   1de11:	mov    rax,QWORD PTR [rax+0x18]
   1de15:	mov    r10,QWORD PTR [rax+0x38]
   1de19:	mov    rax,QWORD PTR [r14+0x28]
   1de1d:	lea    rcx,[rcx+rcx*2]
   1de21:	mov    edi,0x10
   1de26:	mov    QWORD PTR [rsp+0x18],r10
   1de2b:	mov    QWORD PTR [rsp+0x10],rsi
   1de30:	lea    rbx,[rax+rcx*8]
   1de34:	mov    QWORD PTR [rsp+0x8],rdx
   1de39:	mov    QWORD PTR [rbx],0x2
   1de40:	call   3a70 <malloc@plt>
   1de45:	mov    rdx,QWORD PTR [rsp+0x8]
   1de4a:	mov    rsi,QWORD PTR [rsp+0x10]
   1de4f:	lea    r9,[rip+0x742a]        # 25280 <__sprintf_chk@plt+0x215a0>
   1de56:	test   rax,rax
   1de59:	mov    QWORD PTR [rbx+0x10],rax
   1de5d:	mov    r10,QWORD PTR [rsp+0x18]
   1de62:	je     1db90 <__sprintf_chk@plt+0x19eb0>
   1de68:	cmp    rsi,r10
   1de6b:	je     1e217 <__sprintf_chk@plt+0x1a537>
   1de71:	mov    QWORD PTR [rbx+0x8],0x2
   1de79:	jge    1e241 <__sprintf_chk@plt+0x1a561>
   1de7f:	mov    QWORD PTR [rax],rsi
   1de82:	mov    QWORD PTR [rax+0x8],r10
   1de86:	jmp    1dc94 <__sprintf_chk@plt+0x19fb4>
   1de8b:	mov    rax,QWORD PTR [rdx+0x20]
   1de8f:	mov    r15,QWORD PTR [rax+0x38]
   1de93:	mov    rax,QWORD PTR [r14+0x18]
   1de97:	mov    QWORD PTR [rax+rcx*8],r15
   1de9b:	cmp    BYTE PTR [rdx+0x30],0x4
   1de9f:	jne    1dc90 <__sprintf_chk@plt+0x19fb0>
   1dea5:	mov    QWORD PTR [rsp+0x8],rdx
   1deaa:	jmp    1dd9d <__sprintf_chk@plt+0x1a0bd>
   1deaf:	mov    rdi,QWORD PTR [rsp+0x78]
   1deb4:	call   3680 <free@plt>
   1deb9:	jmp    1d524 <__sprintf_chk@plt+0x19844>
   1debe:	add    rsi,0x1
   1dec2:	cmp    QWORD PTR [r14+0x10],rsi
   1dec6:	ja     1db27 <__sprintf_chk@plt+0x19e47>
   1decc:	movzx  eax,BYTE PTR [rbp+0xb0]
   1ded3:	mov    DWORD PTR [rsp+0x3c],0x0
   1dedb:	shr    al,0x2
   1dede:	cmp    QWORD PTR [rsp+0x20],0x0
   1dee4:	sete   dl
   1dee7:	and    al,dl
   1dee9:	jne    1e13a <__sprintf_chk@plt+0x1a45a>
   1deef:	mov    rax,QWORD PTR [rbp+0x68]
   1def3:	mov    rdi,r12
   1def6:	mov    rax,QWORD PTR [rax+0x18]
   1defa:	mov    rax,QWORD PTR [rax+0x38]
   1defe:	lea    rdx,[rax+rax*2]
   1df02:	mov    QWORD PTR [rbp+0x90],rax
   1df09:	mov    rax,QWORD PTR [rbp+0x30]
   1df0d:	lea    rsi,[rax+rdx*8]
   1df11:	call   133e0 <__sprintf_chk@plt+0xf700>
   1df16:	mov    DWORD PTR [rsp+0x40],eax
   1df1a:	mov    ebx,eax
   1df1c:	test   eax,eax
   1df1e:	jne    1e037 <__sprintf_chk@plt+0x1a357>
   1df24:	cmp    QWORD PTR [rbp+0x98],0x0
   1df2c:	jle    1dff8 <__sprintf_chk@plt+0x1a318>
   1df32:	mov    r8,QWORD PTR [rsp+0x58]
   1df37:	test   r8,r8
   1df3a:	jle    1dff8 <__sprintf_chk@plt+0x1a318>
   1df40:	xor    r9d,r9d
   1df43:	jmp    1df55 <__sprintf_chk@plt+0x1a275>
   1df45:	nop    DWORD PTR [rax]
   1df48:	add    r9,0x1
   1df4c:	cmp    r8,r9
   1df4f:	jle    1dff8 <__sprintf_chk@plt+0x1a318>
   1df55:	mov    rcx,QWORD PTR [rsp+0x60]
   1df5a:	mov    rsi,QWORD PTR [rbp+0x0]
   1df5e:	mov    r10,QWORD PTR [rcx+r9*8]
   1df62:	mov    rdi,r10
   1df65:	shl    rdi,0x4
   1df69:	add    rdi,rsi
   1df6c:	cmp    BYTE PTR [rdi+0x8],0x4
   1df70:	jne    1df48 <__sprintf_chk@plt+0x1a268>
   1df72:	xor    edx,edx
   1df74:	jmp    1df89 <__sprintf_chk@plt+0x1a2a9>
   1df76:	cs nop WORD PTR [rax+rax*1+0x0]
   1df80:	add    rdx,0x1
   1df84:	cmp    r8,rdx
   1df87:	je     1df48 <__sprintf_chk@plt+0x1a268>
   1df89:	mov    rax,QWORD PTR [rcx+rdx*8]
   1df8d:	shl    rax,0x4
   1df91:	add    rax,rsi
   1df94:	cmp    BYTE PTR [rax+0x8],0x9
   1df98:	jne    1df80 <__sprintf_chk@plt+0x1a2a0>
   1df9a:	mov    r11,QWORD PTR [rdi]
   1df9d:	cmp    QWORD PTR [rax],r11
   1dfa0:	jne    1df80 <__sprintf_chk@plt+0x1a2a0>
   1dfa2:	mov    rdx,QWORD PTR [rbp+0x28]
   1dfa6:	lea    rax,[r10+r10*2]
   1dfaa:	mov    rdi,r12
   1dfad:	lea    rax,[rdx+rax*8]
   1dfb1:	mov    rax,QWORD PTR [rax+0x10]
   1dfb5:	mov    rsi,QWORD PTR [rax]
   1dfb8:	call   125d0 <__sprintf_chk@plt+0xe8f0>
   1dfbd:	test   rax,rax
   1dfc0:	jne    1df48 <__sprintf_chk@plt+0x1a268>
   1dfc2:	mov    rax,QWORD PTR [rbp+0x30]
   1dfc6:	lea    rdx,[rsi+rsi*2]
   1dfca:	mov    rdi,r12
   1dfcd:	lea    rsi,[rax+rdx*8]
   1dfd1:	call   13070 <__sprintf_chk@plt+0xf390>
   1dfd6:	test   eax,eax
   1dfd8:	jne    1e3b2 <__sprintf_chk@plt+0x1a6d2>
   1dfde:	mov    r8,QWORD PTR [rsp+0x58]
   1dfe3:	mov    r9d,0x1
   1dfe9:	cmp    r8,r9
   1dfec:	jg     1df55 <__sprintf_chk@plt+0x1a275>
   1dff2:	nop    WORD PTR [rax+rax*1+0x0]
   1dff8:	mov    rdi,QWORD PTR [rsp+0x28]
   1dffd:	xor    ecx,ecx
   1dfff:	mov    rdx,r12
   1e002:	mov    rsi,rbp
   1e005:	call   16960 <__sprintf_chk@plt+0x12c80>
   1e00a:	mov    QWORD PTR [rbp+0x48],rax
   1e00e:	test   rax,rax
   1e011:	je     1e1fe <__sprintf_chk@plt+0x1a51e>
   1e017:	cmp    BYTE PTR [rax+0x68],0x0
   1e01b:	js     1e19d <__sprintf_chk@plt+0x1a4bd>
   1e021:	mov    QWORD PTR [rbp+0x60],rax
   1e025:	mov    QWORD PTR [rbp+0x58],rax
   1e029:	mov    QWORD PTR [rbp+0x50],rax
   1e02d:	mov    rdi,QWORD PTR [rsp+0x60]
   1e032:	call   3680 <free@plt>
   1e037:	mov    r12,QWORD PTR [r13+0x0]
   1e03b:	mov    DWORD PTR [rsp+0x3c],ebx
   1e03f:	mov    rbx,QWORD PTR [r12+0x70]
   1e044:	test   rbx,rbx
   1e047:	je     1e060 <__sprintf_chk@plt+0x1a380>
   1e049:	nop    DWORD PTR [rax+0x0]
   1e050:	mov    rdi,rbx
   1e053:	mov    rbx,QWORD PTR [rbx]
   1e056:	call   3680 <free@plt>
   1e05b:	test   rbx,rbx
   1e05e:	jne    1e050 <__sprintf_chk@plt+0x1a370>
   1e060:	mov    QWORD PTR [r12+0x70],0x0
   1e069:	mov    rdi,QWORD PTR [r12+0x20]
   1e06e:	mov    DWORD PTR [r12+0x80],0xf
   1e07a:	mov    QWORD PTR [r12+0x68],0x0
   1e083:	call   3680 <free@plt>
   1e088:	mov    rdi,QWORD PTR [rsp+0x80]
   1e090:	mov    QWORD PTR [r12+0x20],0x0
   1e099:	call   3680 <free@plt>
   1e09e:	mov    rdi,QWORD PTR [rsp+0x88]
   1e0a6:	call   3680 <free@plt>
   1e0ab:	cmp    BYTE PTR [rsp+0xfb],0x0
   1e0b3:	jne    1e0d5 <__sprintf_chk@plt+0x1a3f5>
   1e0b5:	mov    eax,DWORD PTR [rsp+0x3c]
   1e0b9:	test   eax,eax
   1e0bb:	je     1d540 <__sprintf_chk@plt+0x19860>
   1e0c1:	jmp    1d524 <__sprintf_chk@plt+0x19844>
   1e0c6:	mov    BYTE PTR [rsp+0x8],0x0
   1e0cb:	xor    ebx,ebx
   1e0cd:	xor    r15d,r15d
   1e0d0:	jmp    1dcf2 <__sprintf_chk@plt+0x1a012>
   1e0d5:	mov    rdi,QWORD PTR [rsp+0x78]
   1e0da:	call   3680 <free@plt>
   1e0df:	jmp    1e0b5 <__sprintf_chk@plt+0x1a3d5>
   1e0e1:	mov    rdi,r12
   1e0e4:	call   12ea0 <__sprintf_chk@plt+0xf1c0>
   1e0e9:	mov    DWORD PTR [rsp+0x3c],0x0
   1e0f1:	jmp    1d602 <__sprintf_chk@plt+0x19922>
   1e0f6:	mov    r11,QWORD PTR [rsi+0x28]
   1e0fa:	mov    QWORD PTR [rax+0x8],rcx
   1e0fe:	test   rcx,rcx
   1e101:	je     1e106 <__sprintf_chk@plt+0x1a426>
   1e103:	mov    QWORD PTR [rcx],rax
   1e106:	mov    rsi,QWORD PTR [rax+0x28]
   1e10a:	mov    rsi,QWORD PTR [rdi+rsi*8]
   1e10e:	mov    QWORD PTR [rdi+r11*8],rsi
   1e112:	mov    rsi,rcx
   1e115:	cmp    r11,0x3f
   1e119:	jg     1d7c5 <__sprintf_chk@plt+0x19ae5>
   1e11f:	mov    ecx,r11d
   1e122:	mov    rbx,r10
   1e125:	shl    rbx,cl
   1e128:	mov    rcx,rbx
   1e12b:	not    rcx
   1e12e:	and    QWORD PTR [r14+0xa0],rcx
   1e135:	jmp    1d7c5 <__sprintf_chk@plt+0x19ae5>
   1e13a:	cmp    QWORD PTR [r13+0x28],0x0
   1e13f:	jne    1deef <__sprintf_chk@plt+0x1a20f>
   1e145:	mov    r10,QWORD PTR [rbp+0x10]
   1e149:	test   r10,r10
   1e14c:	je     1e3ff <__sprintf_chk@plt+0x1a71f>
   1e152:	mov    rdi,QWORD PTR [rbp+0x0]
   1e156:	xor    r9d,r9d
   1e159:	xor    esi,esi
   1e15b:	lea    r8,[rip+0x7162]        # 252c4 <__sprintf_chk@plt+0x215e4>
   1e162:	movabs r11,0x1000000010001
   1e16c:	mov    ebx,0x1
   1e171:	mov    rdx,rdi
   1e174:	cmp    BYTE PTR [rdx+0x8],0xc
   1e178:	ja     3d68 <__sprintf_chk@plt+0x88>
   1e17e:	movzx  ecx,BYTE PTR [rdx+0x8]
   1e182:	movsxd rcx,DWORD PTR [r8+rcx*4]
   1e186:	add    rcx,r8
   1e189:	notrack jmp rcx
   1e18c:	movzx  r11d,BYTE PTR [rcx+0x30]
   1e191:	mov    rsi,QWORD PTR [rcx+0x8]
   1e195:	mov    rax,rcx
   1e198:	jmp    1d7b5 <__sprintf_chk@plt+0x19ad5>
   1e19d:	mov    r14,QWORD PTR [rsp+0x28]
   1e1a2:	mov    ecx,0x1
   1e1a7:	mov    rdx,r12
   1e1aa:	mov    rsi,rbp
   1e1ad:	mov    rdi,r14
   1e1b0:	call   16960 <__sprintf_chk@plt+0x12c80>
   1e1b5:	mov    ecx,0x2
   1e1ba:	mov    rdx,r12
   1e1bd:	mov    rsi,rbp
   1e1c0:	mov    QWORD PTR [rbp+0x50],rax
   1e1c4:	mov    rdi,r14
   1e1c7:	call   16960 <__sprintf_chk@plt+0x12c80>
   1e1cc:	mov    ecx,0x6
   1e1d1:	mov    rdx,r12
   1e1d4:	mov    rsi,rbp
   1e1d7:	mov    QWORD PTR [rbp+0x58],rax
   1e1db:	mov    rdi,r14
   1e1de:	call   16960 <__sprintf_chk@plt+0x12c80>
   1e1e3:	cmp    QWORD PTR [rbp+0x50],0x0
   1e1e8:	mov    QWORD PTR [rbp+0x60],rax
   1e1ec:	je     1e1fe <__sprintf_chk@plt+0x1a51e>
   1e1ee:	cmp    QWORD PTR [rbp+0x58],0x0
   1e1f3:	je     1e1fe <__sprintf_chk@plt+0x1a51e>
   1e1f5:	test   rax,rax
   1e1f8:	jne    1e02d <__sprintf_chk@plt+0x1a34d>
   1e1fe:	mov    ebx,DWORD PTR [rsp+0x40]
   1e202:	jmp    1e037 <__sprintf_chk@plt+0x1a357>
   1e207:	mov    rcx,rdi
   1e20a:	jmp    1da0b <__sprintf_chk@plt+0x19d2b>
   1e20f:	mov    r15,rax
   1e212:	jmp    1dc99 <__sprintf_chk@plt+0x19fb9>
   1e217:	mov    QWORD PTR [rbx+0x8],0x1
   1e21f:	mov    QWORD PTR [rax],rsi
   1e222:	jmp    1dc94 <__sprintf_chk@plt+0x19fb4>
   1e227:	mov    rax,QWORD PTR [rdx+0x20]
   1e22b:	mov    r10,QWORD PTR [rax+0x38]
   1e22f:	jmp    1de19 <__sprintf_chk@plt+0x1a139>
   1e234:	mov    rax,QWORD PTR [rdx+0x20]
   1e238:	mov    rsi,QWORD PTR [rax+0x38]
   1e23c:	jmp    1de04 <__sprintf_chk@plt+0x1a124>
   1e241:	mov    QWORD PTR [rax],r10
   1e244:	mov    QWORD PTR [rax+0x8],rsi
   1e248:	jmp    1dc94 <__sprintf_chk@plt+0x19fb4>
   1e24d:	mov    rdi,r12
   1e250:	call   12e20 <__sprintf_chk@plt+0xf140>
   1e255:	mov    DWORD PTR [rsp+0x3c],0x0
   1e25d:	jmp    1d602 <__sprintf_chk@plt+0x19922>
   1e262:	mov    rdi,rbp
   1e265:	mov    esi,0xe8
   1e26a:	call   3b20 <realloc@plt>
   1e26f:	mov    rbp,rax
   1e272:	test   rax,rax
   1e275:	je     1e434 <__sprintf_chk@plt+0x1a754>
   1e27b:	mov    QWORD PTR [r13+0x8],0xe8
   1e283:	mov    QWORD PTR [r13+0x0],rax
   1e287:	jmp    1d227 <__sprintf_chk@plt+0x19547>
   1e28c:	xor    ebx,ebx
   1e28e:	mov    esi,0x1
   1e293:	jmp    1d2be <__sprintf_chk@plt+0x195de>
   1e298:	mov    DWORD PTR [rsp+0x3c],0xc
   1e2a0:	mov    QWORD PTR [rbp+0x68],0x0
   1e2a8:	jmp    1d4b7 <__sprintf_chk@plt+0x197d7>
   1e2ad:	test   rax,rax
   1e2b0:	je     1e3e9 <__sprintf_chk@plt+0x1a709>
   1e2b6:	lea    r12,[rsp+0x50]
   1e2bb:	pxor   xmm0,xmm0
   1e2bf:	xor    edx,edx
   1e2c1:	xor    esi,esi
   1e2c3:	mov    rcx,r12
   1e2c6:	mov    rdi,r15
   1e2c9:	movups XMMWORD PTR [rsp+0x50],xmm0
   1e2ce:	mov    BYTE PTR [rsp+0x58],0x2
   1e2d3:	call   12b00 <__sprintf_chk@plt+0xee20>
   1e2d8:	mov    rdx,rax
   1e2db:	jmp    1d695 <__sprintf_chk@plt+0x199b5>
   1e2e0:	mov    DWORD PTR [rsp+0x3c],0x0
   1e2e8:	jmp    1d602 <__sprintf_chk@plt+0x19922>
   1e2ed:	movzx  ecx,BYTE PTR [rsp+0x8]
   1e2f2:	cmp    BYTE PTR [rdx],0x0
   1e2f5:	cmovs  ecx,eax
   1e2f8:	mov    BYTE PTR [rsp+0x8],cl
   1e2fc:	add    rsi,0x1
   1e300:	add    rdx,0x10
   1e304:	cmp    rsi,r10
   1e307:	jne    1e174 <__sprintf_chk@plt+0x1a494>
   1e30d:	mov    rax,rsi
   1e310:	shl    rax,0x4
   1e314:	add    rax,rdi
   1e317:	or     BYTE PTR [rsp+0x8],r9b
   1e31c:	jne    1e339 <__sprintf_chk@plt+0x1a659>
   1e31e:	jmp    1e3ff <__sprintf_chk@plt+0x1a71f>
   1e323:	cmp    dl,0x5
   1e326:	jne    1e32c <__sprintf_chk@plt+0x1a64c>
   1e328:	mov    BYTE PTR [rdi+0x8],0x7
   1e32c:	add    rdi,0x10
   1e330:	cmp    rax,rdi
   1e333:	je     1e3fa <__sprintf_chk@plt+0x1a71a>
   1e339:	movzx  edx,BYTE PTR [rdi+0x8]
   1e33d:	cmp    dl,0x1
   1e340:	jne    1e323 <__sprintf_chk@plt+0x1a643>
   1e342:	cmp    BYTE PTR [rdi],0x0
   1e345:	jns    1e32c <__sprintf_chk@plt+0x1a64c>
   1e347:	and    BYTE PTR [rdi+0xa],0xdf
   1e34b:	jmp    1e32c <__sprintf_chk@plt+0x1a64c>
   1e34d:	nop    DWORD PTR [rax]
   1e350:	mov    ecx,DWORD PTR [rdx]
   1e352:	cmp    ecx,0x40
   1e355:	ja     1e3b9 <__sprintf_chk@plt+0x1a6d9>
   1e357:	cmp    ecx,0xf
   1e35a:	jbe    1deef <__sprintf_chk@plt+0x1a20f>
   1e360:	sub    ecx,0x10
   1e363:	mov    r14,rbx
   1e366:	shl    r14,cl
   1e369:	test   r14,r11
   1e36c:	je     1deef <__sprintf_chk@plt+0x1a20f>
   1e372:	jmp    1e2fc <__sprintf_chk@plt+0x1a61c>
   1e374:	nop    DWORD PTR [rax+0x0]
   1e378:	mov    rcx,QWORD PTR [rdx]
   1e37b:	cmp    QWORD PTR [rcx+0x10],0x0
   1e380:	jne    1deef <__sprintf_chk@plt+0x1a20f>
   1e386:	cmp    QWORD PTR [rcx+0x18],0x0
   1e38b:	je     1e2fc <__sprintf_chk@plt+0x1a61c>
   1e391:	jmp    1deef <__sprintf_chk@plt+0x1a20f>
   1e396:	mov    r9d,eax
   1e399:	jmp    1e2fc <__sprintf_chk@plt+0x1a61c>
   1e39e:	mov    QWORD PTR [rbx+0x8],0x0
   1e3a6:	mov    QWORD PTR [rbx],0x0
   1e3ad:	jmp    1db90 <__sprintf_chk@plt+0x19eb0>
   1e3b2:	mov    ebx,eax
   1e3b4:	jmp    1e037 <__sprintf_chk@plt+0x1a357>
   1e3b9:	cmp    ecx,0x80
   1e3bf:	je     1e2fc <__sprintf_chk@plt+0x1a61c>
   1e3c5:	jmp    1deef <__sprintf_chk@plt+0x1a20f>
   1e3ca:	nop    WORD PTR [rax+rax*1+0x0]
   1e3d0:	mov    DWORD PTR [rsp+0x3c],0xc
   1e3d8:	mov    r14,QWORD PTR [r13+0x0]
   1e3dc:	jmp    1d4b7 <__sprintf_chk@plt+0x197d7>
   1e3e1:	mov    rcx,rax
   1e3e4:	jmp    1d5ea <__sprintf_chk@plt+0x1990a>
   1e3e9:	mov    QWORD PTR [rbp+0x68],0x0
   1e3f1:	mov    r14,QWORD PTR [r13+0x0]
   1e3f5:	jmp    1d4b7 <__sprintf_chk@plt+0x197d7>
   1e3fa:	mov    BYTE PTR [rsp+0x8],r9b
   1e3ff:	cmp    QWORD PTR [rbp+0x98],0x0
   1e407:	movzx  edx,BYTE PTR [rbp+0xb0]
   1e40e:	mov    DWORD PTR [rbp+0xb4],0x1
   1e418:	setg   al
   1e41b:	or     al,BYTE PTR [rsp+0x8]
   1e41f:	add    eax,eax
   1e421:	and    edx,0xfffffff9
   1e424:	and    eax,0x6
   1e427:	or     eax,edx
   1e429:	mov    BYTE PTR [rbp+0xb0],al
   1e42f:	jmp    1deef <__sprintf_chk@plt+0x1a20f>
   1e434:	mov    eax,0xc
   1e439:	jmp    1d540 <__sprintf_chk@plt+0x19860>
   1e43e:	call   3840 <__stack_chk_fail@plt>
   1e443:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   1e44e:	xchg   ax,ax
   1e450:	push   r15
   1e452:	push   r14
   1e454:	push   r13
   1e456:	mov    r13,r8
   1e459:	push   r12
   1e45b:	mov    r12,rsi
   1e45e:	push   rbp
   1e45f:	push   rbx
   1e460:	lea    rbx,[rip+0x6e91]        # 252f8 <__sprintf_chk@plt+0x21618>
   1e467:	sub    rsp,0x118
   1e46e:	mov    QWORD PTR [rsp+0x8],rcx
   1e473:	and    ecx,0x1000000
   1e479:	mov    QWORD PTR [rsp+0x18],rdi
   1e47e:	mov    r14,rcx
   1e481:	mov    QWORD PTR [rsp],rdx
   1e485:	mov    QWORD PTR [rsp+0x30],r9
   1e48a:	mov    rax,QWORD PTR fs:0x28
   1e493:	mov    QWORD PTR [rsp+0x108],rax
   1e49b:	xor    eax,eax
   1e49d:	mov    rax,QWORD PTR [rsp]
   1e4a1:	mov    rbp,QWORD PTR [r12]
   1e4a5:	movzx  eax,BYTE PTR [rax+0x8]
   1e4a9:	mov    rdx,rax
   1e4ac:	movsxd rax,DWORD PTR [rbx+rax*4]
   1e4b0:	add    rax,rbx
   1e4b3:	notrack jmp rax
   1e4b6:	cmp    dl,0x9
   1e4b9:	je     1f140 <__sprintf_chk@plt+0x1b460>
   1e4bf:	mov    rax,QWORD PTR [rsp]
   1e4c3:	xor    edx,edx
   1e4c5:	xor    esi,esi
   1e4c7:	mov    rdi,rbp
   1e4ca:	mov    BYTE PTR [rax+0x8],0x1
   1e4ce:	mov    rcx,rax
   1e4d1:	call   12b00 <__sprintf_chk@plt+0xee20>
   1e4d6:	mov    QWORD PTR [rsp+0x10],rax
   1e4db:	test   rax,rax
   1e4de:	jne    1e5b8 <__sprintf_chk@plt+0x1a8d8>
   1e4e4:	mov    rax,QWORD PTR [rsp+0x30]
   1e4e9:	mov    DWORD PTR [rax],0xc
   1e4ef:	nop
   1e4f0:	mov    QWORD PTR [rsp+0x10],0x0
   1e4f9:	nop    DWORD PTR [rax+0x0]
   1e500:	mov    rax,QWORD PTR [rsp+0x108]
   1e508:	sub    rax,QWORD PTR fs:0x28
   1e511:	jne    1f87e <__sprintf_chk@plt+0x1bb9e>
   1e517:	mov    rax,QWORD PTR [rsp+0x10]
   1e51c:	add    rsp,0x118
   1e523:	pop    rbx
   1e524:	pop    rbp
   1e525:	pop    r12
   1e527:	pop    r13
   1e529:	pop    r14
   1e52b:	pop    r15
   1e52d:	ret    
   1e52e:	test   r14,r14
   1e531:	jne    1f117 <__sprintf_chk@plt+0x1b437>
   1e537:	mov    rax,QWORD PTR [rsp+0x8]
   1e53c:	test   al,0x20
   1e53e:	jne    1f117 <__sprintf_chk@plt+0x1b437>
   1e544:	test   al,0x10
   1e546:	je     1e4b6 <__sprintf_chk@plt+0x1a7d6>
   1e54c:	mov    r15,QWORD PTR [rsp+0x18]
   1e551:	mov    rdi,QWORD PTR [rsp]
   1e555:	mov    rdx,rax
   1e558:	mov    rsi,r15
   1e55b:	call   15870 <__sprintf_chk@plt+0x11b90>
   1e560:	cdqe   
   1e562:	add    QWORD PTR [r15+0x48],rax
   1e566:	jmp    1e49d <__sprintf_chk@plt+0x1a7bd>
   1e56b:	mov    rax,QWORD PTR [rsp+0x18]
   1e570:	cmp    dl,0x21
   1e573:	mov    rbx,QWORD PTR [rsp+0x30]
   1e578:	lea    rcx,[rip+0x3b38]        # 220b7 <__sprintf_chk@plt+0x1e3d7>
   1e57f:	sete   r8b
   1e583:	lea    rdx,[rip+0x69ef]        # 24f79 <__sprintf_chk@plt+0x21299>
   1e58a:	mov    rsi,QWORD PTR [rax+0x78]
   1e58e:	mov    r9,rbx
   1e591:	movzx  r8d,r8b
   1e595:	mov    rdi,rbp
   1e598:	call   1ac90 <__sprintf_chk@plt+0x16fb0>
   1e59d:	mov    esi,DWORD PTR [rbx]
   1e59f:	mov    QWORD PTR [rsp+0x10],rax
   1e5a4:	test   esi,esi
   1e5a6:	je     1e5b8 <__sprintf_chk@plt+0x1a8d8>
   1e5a8:	test   rax,rax
   1e5ab:	je     1e4f0 <__sprintf_chk@plt+0x1a810>
   1e5b1:	nop    DWORD PTR [rax+0x0]
   1e5b8:	mov    rbx,QWORD PTR [rsp+0x18]
   1e5bd:	mov    r15,QWORD PTR [rsp]
   1e5c1:	mov    rdx,QWORD PTR [rsp+0x8]
   1e5c6:	mov    rsi,rbx
   1e5c9:	mov    rdi,r15
   1e5cc:	call   15870 <__sprintf_chk@plt+0x11b90>
   1e5d1:	cdqe   
   1e5d3:	add    rax,QWORD PTR [rbx+0x48]
   1e5d7:	mov    QWORD PTR [rbx+0x48],rax
   1e5db:	mov    r14,rax
   1e5de:	movzx  eax,BYTE PTR [r15+0x8]
   1e5e3:	cmp    al,0x17
   1e5e5:	ja     1e500 <__sprintf_chk@plt+0x1a820>
   1e5eb:	cmp    al,0x12
   1e5ed:	mov    edx,0x8c0800
   1e5f2:	sete   bl
   1e5f5:	bt     rdx,rax
   1e5f9:	jae    1e500 <__sprintf_chk@plt+0x1a820>
   1e5ff:	mov    rdi,QWORD PTR [rsp]
   1e603:	lea    r13,[rsp+0xb0]
   1e60b:	mov    rcx,r14
   1e60e:	movdqu xmm0,XMMWORD PTR [rdi]
   1e612:	cmp    al,0x17
   1e614:	je     1e7d5 <__sprintf_chk@plt+0x1aaf5>
   1e61a:	nop    WORD PTR [rax+rax*1+0x0]
   1e620:	mov    r15,QWORD PTR [rsp+0x18]
   1e625:	mov    rdx,QWORD PTR [rsp+0x8]
   1e62a:	xor    r12d,r12d
   1e62d:	cmp    al,0x13
   1e62f:	mov    rdi,QWORD PTR [rsp]
   1e633:	sete   r12b
   1e637:	mov    rsi,r15
   1e63a:	lea    r12,[r12+r12*1-0x1]
   1e63f:	call   15870 <__sprintf_chk@plt+0x11b90>
   1e644:	cdqe   
   1e646:	add    QWORD PTR [r15+0x48],rax
   1e64a:	cmp    QWORD PTR [rsp+0x10],0x0
   1e650:	je     1ef80 <__sprintf_chk@plt+0x1b2a0>
   1e656:	mov    r14,QWORD PTR [rsp+0x10]
   1e65b:	test   bl,bl
   1e65d:	jne    1f092 <__sprintf_chk@plt+0x1b3b2>
   1e663:	mov    QWORD PTR [rsp+0x20],0x0
   1e66c:	xor    ebx,ebx
   1e66e:	cmp    BYTE PTR [r14+0x30],0x11
   1e673:	je     1ef28 <__sprintf_chk@plt+0x1b248>
   1e679:	cmp    r12,0xffffffffffffffff
   1e67d:	pxor   xmm0,xmm0
   1e681:	mov    rcx,r13
   1e684:	mov    rsi,r14
   1e687:	sete   al
   1e68a:	mov    rdi,rbp
   1e68d:	xor    edx,edx
   1e68f:	movups XMMWORD PTR [rsp+0xb0],xmm0
   1e697:	add    eax,0xa
   1e69a:	mov    BYTE PTR [rsp+0xb8],al
   1e6a1:	call   12b00 <__sprintf_chk@plt+0xee20>
   1e6a6:	mov    r15,rax
   1e6a9:	test   rax,rax
   1e6ac:	je     1eeb8 <__sprintf_chk@plt+0x1b1d8>
   1e6b2:	add    rbx,0x2
   1e6b6:	cmp    r12,rbx
   1e6b9:	jl     1e739 <__sprintf_chk@plt+0x1aa59>
   1e6bb:	mov    rdi,r14
   1e6be:	mov    rsi,rbp
   1e6c1:	call   1aae0 <__sprintf_chk@plt+0x16e00>
   1e6c6:	pxor   xmm0,xmm0
   1e6ca:	mov    rsi,r15
   1e6cd:	mov    rcx,r13
   1e6d0:	mov    rdx,rax
   1e6d3:	mov    rdi,rbp
   1e6d6:	movups XMMWORD PTR [rsp+0xb0],xmm0
   1e6de:	mov    r14,rax
   1e6e1:	mov    BYTE PTR [rsp+0xb8],0x10
   1e6e9:	call   12b00 <__sprintf_chk@plt+0xee20>
   1e6ee:	mov    rsi,rax
   1e6f1:	test   r14,r14
   1e6f4:	je     1eeb8 <__sprintf_chk@plt+0x1b1d8>
   1e6fa:	test   rax,rax
   1e6fd:	je     1eeb8 <__sprintf_chk@plt+0x1b1d8>
   1e703:	pxor   xmm0,xmm0
   1e707:	mov    rcx,r13
   1e70a:	xor    edx,edx
   1e70c:	mov    rdi,rbp
   1e70f:	movups XMMWORD PTR [rsp+0xb0],xmm0
   1e717:	mov    BYTE PTR [rsp+0xb8],0xa
   1e71f:	call   12b00 <__sprintf_chk@plt+0xee20>
   1e724:	mov    r15,rax
   1e727:	test   rax,rax
   1e72a:	je     1eeb8 <__sprintf_chk@plt+0x1b1d8>
   1e730:	add    rbx,0x1
   1e734:	cmp    r12,rbx
   1e737:	jge    1e6bb <__sprintf_chk@plt+0x1a9db>
   1e739:	mov    rsi,QWORD PTR [rsp+0x20]
   1e73e:	test   rsi,rsi
   1e741:	je     1f088 <__sprintf_chk@plt+0x1b3a8>
   1e747:	pxor   xmm0,xmm0
   1e74b:	mov    rdx,r15
   1e74e:	mov    rcx,r13
   1e751:	mov    rdi,rbp
   1e754:	movups XMMWORD PTR [rsp+0xb0],xmm0
   1e75c:	mov    BYTE PTR [rsp+0xb8],0x10
   1e764:	call   12b00 <__sprintf_chk@plt+0xee20>
   1e769:	mov    rbx,QWORD PTR [rsp+0x30]
   1e76e:	mov    edx,DWORD PTR [rbx]
   1e770:	test   edx,edx
   1e772:	jne    1e85e <__sprintf_chk@plt+0x1ab7e>
   1e778:	mov    QWORD PTR [rsp+0x10],rax
   1e77d:	mov    rax,QWORD PTR [rsp]
   1e781:	movzx  eax,BYTE PTR [rax+0x8]
   1e785:	test   QWORD PTR [rsp+0x8],0x1000000
   1e78e:	je     1e7a0 <__sprintf_chk@plt+0x1aac0>
   1e790:	cmp    al,0xb
   1e792:	je     1f0c0 <__sprintf_chk@plt+0x1b3e0>
   1e798:	cmp    al,0x17
   1e79a:	je     1f0c0 <__sprintf_chk@plt+0x1b3e0>
   1e7a0:	cmp    al,0x17
   1e7a2:	ja     1e500 <__sprintf_chk@plt+0x1a820>
   1e7a8:	cmp    al,0x12
   1e7aa:	mov    edx,0x8c0800
   1e7af:	sete   bl
   1e7b2:	bt     rdx,rax
   1e7b6:	jae    1e500 <__sprintf_chk@plt+0x1a820>
   1e7bc:	mov    rdi,QWORD PTR [rsp+0x18]
   1e7c1:	mov    rcx,QWORD PTR [rdi+0x48]
   1e7c5:	mov    rdi,QWORD PTR [rsp]
   1e7c9:	movdqu xmm0,XMMWORD PTR [rdi]
   1e7cd:	cmp    al,0x17
   1e7cf:	jne    1e620 <__sprintf_chk@plt+0x1a940>
   1e7d5:	mov    rsi,rdi
   1e7d8:	mov    rdx,QWORD PTR [rsp+0x8]
   1e7dd:	mov    rdi,QWORD PTR [rsp+0x18]
   1e7e2:	mov    QWORD PTR [rsp+0x38],rcx
   1e7e7:	movaps XMMWORD PTR [rsp+0x20],xmm0
   1e7ec:	call   15fc0 <__sprintf_chk@plt+0x122e0>
   1e7f1:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
   1e7f7:	mov    rcx,QWORD PTR [rsp+0x38]
   1e7fc:	cmp    rax,0xffffffffffffffff
   1e800:	mov    r12,rax
   1e803:	je     1ed88 <__sprintf_chk@plt+0x1b0a8>
   1e809:	cmp    rax,0xfffffffffffffffe
   1e80d:	je     1e827 <__sprintf_chk@plt+0x1ab47>
   1e80f:	mov    rax,QWORD PTR [rsp]
   1e813:	movzx  eax,BYTE PTR [rax+0x8]
   1e817:	cmp    al,0x18
   1e819:	je     1efa0 <__sprintf_chk@plt+0x1b2c0>
   1e81f:	cmp    al,0x1
   1e821:	je     1f040 <__sprintf_chk@plt+0x1b360>
   1e827:	test   QWORD PTR [rsp+0x8],0x200000
   1e830:	je     1f636 <__sprintf_chk@plt+0x1b956>
   1e836:	mov    rax,QWORD PTR [rsp+0x18]
   1e83b:	mov    rbx,QWORD PTR [rsp+0x30]
   1e840:	mov    QWORD PTR [rax+0x48],rcx
   1e844:	mov    rax,QWORD PTR [rsp]
   1e848:	movups XMMWORD PTR [rax],xmm0
   1e84b:	mov    BYTE PTR [rax+0x8],0x1
   1e84f:	mov    edx,DWORD PTR [rbx]
   1e851:	mov    rax,QWORD PTR [rsp+0x10]
   1e856:	test   edx,edx
   1e858:	je     1e778 <__sprintf_chk@plt+0x1aa98>
   1e85e:	test   rax,rax
   1e861:	jne    1e778 <__sprintf_chk@plt+0x1aa98>
   1e867:	jmp    1f06b <__sprintf_chk@plt+0x1b38b>
   1e86c:	nop    DWORD PTR [rax+0x0]
   1e870:	cmp    dl,0x23
   1e873:	mov    rax,QWORD PTR [rsp+0x18]
   1e878:	mov    rbx,QWORD PTR [rsp+0x30]
   1e87d:	lea    rcx,[rip+0x5ddd]        # 24661 <__sprintf_chk@plt+0x20981>
   1e884:	sete   r8b
   1e888:	lea    rdx,[rip+0x66f6]        # 24f85 <__sprintf_chk@plt+0x212a5>
   1e88f:	mov    rsi,QWORD PTR [rax+0x78]
   1e893:	mov    r9,rbx
   1e896:	movzx  r8d,r8b
   1e89a:	jmp    1e595 <__sprintf_chk@plt+0x1a8b5>
   1e89f:	mov    rcx,QWORD PTR [rsp]
   1e8a3:	xor    edx,edx
   1e8a5:	xor    esi,esi
   1e8a7:	mov    rdi,rbp
   1e8aa:	call   12b00 <__sprintf_chk@plt+0xee20>
   1e8af:	mov    QWORD PTR [rsp+0x10],rax
   1e8b4:	test   rax,rax
   1e8b7:	je     1e4e4 <__sprintf_chk@plt+0x1a804>
   1e8bd:	cmp    DWORD PTR [rbp+0xb4],0x1
   1e8c4:	jle    1e5b8 <__sprintf_chk@plt+0x1a8d8>
   1e8ca:	or     BYTE PTR [rbp+0xb0],0x2
   1e8d1:	jmp    1e5b8 <__sprintf_chk@plt+0x1a8d8>
   1e8d6:	mov    esi,0x1
   1e8db:	mov    edi,0x20
   1e8e0:	mov    QWORD PTR [rsp+0x88],0x0
   1e8ec:	call   3990 <calloc@plt>
   1e8f1:	mov    esi,0x1
   1e8f6:	mov    edi,0x50
   1e8fb:	mov    rbx,rax
   1e8fe:	call   3990 <calloc@plt>
   1e903:	test   rbx,rbx
   1e906:	sete   dl
   1e909:	test   rax,rax
   1e90c:	mov    QWORD PTR [rsp+0x38],rax
   1e911:	sete   al
   1e914:	or     dl,al
   1e916:	jne    1f5d2 <__sprintf_chk@plt+0x1b8f2>
   1e91c:	mov    rdi,QWORD PTR [rsp]
   1e920:	mov    rdx,QWORD PTR [rsp+0x8]
   1e925:	mov    rsi,QWORD PTR [rsp+0x18]
   1e92a:	call   12630 <__sprintf_chk@plt+0xe950>
   1e92f:	mov    DWORD PTR [rsp+0x20],eax
   1e933:	movzx  eax,BYTE PTR [rdi+0x8]
   1e937:	cmp    al,0x2
   1e939:	je     1f5c2 <__sprintf_chk@plt+0x1b8e2>
   1e93f:	mov    BYTE PTR [rsp+0x7b],0x0
   1e944:	cmp    al,0x19
   1e946:	je     1f2f2 <__sprintf_chk@plt+0x1b612>
   1e94c:	cmp    al,0x15
   1e94e:	je     1f36b <__sprintf_chk@plt+0x1b68b>
   1e954:	mov    r14,QWORD PTR [rsp+0x8]
   1e959:	mov    QWORD PTR [rsp+0x10],rbp
   1e95e:	lea    rax,[rsp+0xc0]
   1e966:	mov    r9d,0x1
   1e96c:	mov    rbp,QWORD PTR [rsp+0x18]
   1e971:	mov    r13,QWORD PTR [rsp]
   1e975:	mov    QWORD PTR [rsp+0x48],rax
   1e97a:	lea    rax,[rsp+0x90]
   1e982:	mov    QWORD PTR [rsp+0x40],rax
   1e987:	mov    rax,r14
   1e98a:	mov    QWORD PTR [rsp+0x60],0x0
   1e993:	shr    rax,0x10
   1e997:	mov    QWORD PTR [rsp+0x50],0x0
   1e9a0:	mov    QWORD PTR [rsp+0x68],rax
   1e9a5:	mov    rax,QWORD PTR [rsp+0x48]
   1e9aa:	mov    ecx,DWORD PTR [rsp+0x20]
   1e9ae:	and    r9d,0x1
   1e9b2:	mov    r8,r14
   1e9b5:	mov    rdi,QWORD PTR [rsp+0x40]
   1e9ba:	mov    rdx,r13
   1e9bd:	mov    rsi,rbp
   1e9c0:	mov    DWORD PTR [rsp+0x90],0x3
   1e9cb:	mov    QWORD PTR [rsp+0x98],rax
   1e9d3:	call   16150 <__sprintf_chk@plt+0x12470>
   1e9d8:	test   eax,eax
   1e9da:	jne    1f3b5 <__sprintf_chk@plt+0x1b6d5>
   1e9e0:	mov    rdx,r14
   1e9e3:	mov    rsi,rbp
   1e9e6:	mov    rdi,r13
   1e9e9:	call   12630 <__sprintf_chk@plt+0xe950>
   1e9ee:	mov    DWORD PTR [rsp+0x20],eax
   1e9f2:	mov    eax,DWORD PTR [rsp+0x90]
   1e9f9:	lea    edx,[rax-0x2]
   1e9fc:	and    edx,0xfffffffd
   1e9ff:	je     1ea18 <__sprintf_chk@plt+0x1ad38>
   1ea01:	movzx  edx,BYTE PTR [r13+0x8]
   1ea06:	cmp    dl,0x2
   1ea09:	je     1f3a0 <__sprintf_chk@plt+0x1b6c0>
   1ea0f:	cmp    dl,0x16
   1ea12:	je     1f3d0 <__sprintf_chk@plt+0x1b6f0>
   1ea18:	lea    rcx,[rip+0x696d]        # 2538c <__sprintf_chk@plt+0x216ac>
   1ea1f:	movsxd rax,DWORD PTR [rcx+rax*4]
   1ea23:	add    rax,rcx
   1ea26:	notrack jmp rax
   1ea29:	mov    QWORD PTR [rsp+0x10],0x0
   1ea32:	mov    rax,QWORD PTR [rsp+0x30]
   1ea37:	mov    DWORD PTR [rax],0x5
   1ea3d:	jmp    1e500 <__sprintf_chk@plt+0x1a820>
   1ea42:	mov    rcx,QWORD PTR [rsp]
   1ea46:	xor    edx,edx
   1ea48:	xor    esi,esi
   1ea4a:	mov    rdi,rbp
   1ea4d:	call   12b00 <__sprintf_chk@plt+0xee20>
   1ea52:	mov    QWORD PTR [rsp+0x10],rax
   1ea57:	test   rax,rax
   1ea5a:	je     1e4e4 <__sprintf_chk@plt+0x1a804>
   1ea60:	cmp    DWORD PTR [rbp+0xb4],0x1
   1ea67:	lea    rbx,[rsp+0xb0]
   1ea6f:	jle    1e5b8 <__sprintf_chk@plt+0x1a8d8>
   1ea75:	mov    r13,QWORD PTR [rsp+0x10]
   1ea7a:	mov    r12,QWORD PTR [rsp+0x18]
   1ea7f:	mov    r14,QWORD PTR [rsp]
   1ea83:	jmp    1ea8e <__sprintf_chk@plt+0x1adae>
   1ea85:	test   rax,rax
   1ea88:	je     1e4e4 <__sprintf_chk@plt+0x1a804>
   1ea8e:	mov    rax,QWORD PTR [r12+0x48]
   1ea93:	cmp    QWORD PTR [r12+0x68],rax
   1ea98:	jle    1f3c6 <__sprintf_chk@plt+0x1b6e6>
   1ea9e:	cmp    rax,QWORD PTR [r12+0x30]
   1eaa3:	je     1f3c6 <__sprintf_chk@plt+0x1b6e6>
   1eaa9:	mov    rdx,QWORD PTR [r12+0x10]
   1eaae:	cmp    DWORD PTR [rdx+rax*4],0xffffffff
   1eab2:	jne    1f3c6 <__sprintf_chk@plt+0x1b6e6>
   1eab8:	mov    rdx,QWORD PTR [rsp+0x8]
   1eabd:	mov    rsi,r12
   1eac0:	mov    rdi,r14
   1eac3:	call   15870 <__sprintf_chk@plt+0x11b90>
   1eac8:	mov    rcx,r14
   1eacb:	xor    edx,edx
   1eacd:	xor    esi,esi
   1eacf:	cdqe   
   1ead1:	add    QWORD PTR [r12+0x48],rax
   1ead6:	mov    rdi,rbp
   1ead9:	call   12b00 <__sprintf_chk@plt+0xee20>
   1eade:	pxor   xmm0,xmm0
   1eae2:	mov    rsi,r13
   1eae5:	mov    rcx,rbx
   1eae8:	mov    rdx,rax
   1eaeb:	mov    rdi,rbp
   1eaee:	movups XMMWORD PTR [rsp+0xb0],xmm0
   1eaf6:	mov    r15,rax
   1eaf9:	mov    BYTE PTR [rsp+0xb8],0x10
   1eb01:	call   12b00 <__sprintf_chk@plt+0xee20>
   1eb06:	mov    r13,rax
   1eb09:	test   r15,r15
   1eb0c:	jne    1ea85 <__sprintf_chk@plt+0x1ada5>
   1eb12:	jmp    1e4e4 <__sprintf_chk@plt+0x1a804>
   1eb17:	mov    rax,QWORD PTR [rsp]
   1eb1b:	mov    rcx,QWORD PTR [rax]
   1eb1e:	mov    eax,0x1
   1eb23:	shl    eax,cl
   1eb25:	cdqe   
   1eb27:	mov    rdx,rax
   1eb2a:	and    rdx,QWORD PTR [rbp+0xa8]
   1eb31:	je     1f61d <__sprintf_chk@plt+0x1b93d>
   1eb37:	or     QWORD PTR [rbp+0xa0],rax
   1eb3e:	mov    rcx,QWORD PTR [rsp]
   1eb42:	xor    edx,edx
   1eb44:	xor    esi,esi
   1eb46:	mov    rdi,rbp
   1eb49:	call   12b00 <__sprintf_chk@plt+0xee20>
   1eb4e:	mov    QWORD PTR [rsp+0x10],rax
   1eb53:	test   rax,rax
   1eb56:	je     1e4e4 <__sprintf_chk@plt+0x1a804>
   1eb5c:	add    QWORD PTR [rbp+0x98],0x1
   1eb64:	or     BYTE PTR [rbp+0xb0],0x2
   1eb6b:	jmp    1e5b8 <__sprintf_chk@plt+0x1a8d8>
   1eb70:	mov    rax,QWORD PTR [rsp]
   1eb74:	mov    r12d,DWORD PTR [rax]
   1eb77:	test   r12d,0x30f
   1eb7e:	je     1ebd8 <__sprintf_chk@plt+0x1aef8>
   1eb80:	movzx  eax,BYTE PTR [rbp+0xb0]
   1eb87:	test   al,0x10
   1eb89:	jne    1ebd8 <__sprintf_chk@plt+0x1aef8>
   1eb8b:	or     eax,0x10
   1eb8e:	mov    BYTE PTR [rbp+0xb0],al
   1eb94:	test   al,0x8
   1eb96:	jne    1f91e <__sprintf_chk@plt+0x1bc3e>
   1eb9c:	movabs rbx,0x3ff000000000000
   1eba6:	mov    QWORD PTR [rbp+0xb8],rbx
   1ebad:	movabs rbx,0x7fffffe87fffffe
   1ebb7:	mov    QWORD PTR [rbp+0xc0],rbx
   1ebbe:	test   al,0x4
   1ebc0:	je     1f8a0 <__sprintf_chk@plt+0x1bbc0>
   1ebc6:	mov    rax,QWORD PTR [rsp]
   1ebca:	pxor   xmm0,xmm0
   1ebce:	movups XMMWORD PTR [rbp+0xc8],xmm0
   1ebd5:	mov    r12d,DWORD PTR [rax]
   1ebd8:	lea    eax,[r12-0x100]
   1ebe0:	test   eax,0xfffffeff
   1ebe5:	jne    1f378 <__sprintf_chk@plt+0x1b698>
   1ebeb:	mov    r15,QWORD PTR [rsp]
   1ebef:	cmp    r12d,0x100
   1ebf6:	je     1f346 <__sprintf_chk@plt+0x1b666>
   1ebfc:	mov    DWORD PTR [r15],0x5
   1ec03:	mov    rcx,r15
   1ec06:	xor    edx,edx
   1ec08:	xor    esi,esi
   1ec0a:	mov    rdi,rbp
   1ec0d:	call   12b00 <__sprintf_chk@plt+0xee20>
   1ec12:	mov    DWORD PTR [r15],0xa
   1ec19:	mov    rbx,rax
   1ec1c:	mov    rcx,QWORD PTR [rsp]
   1ec20:	xor    edx,edx
   1ec22:	xor    esi,esi
   1ec24:	mov    rdi,rbp
   1ec27:	call   12b00 <__sprintf_chk@plt+0xee20>
   1ec2c:	pxor   xmm0,xmm0
   1ec30:	mov    rsi,rbx
   1ec33:	mov    rdi,rbp
   1ec36:	lea    rcx,[rsp+0xb0]
   1ec3e:	mov    rdx,rax
   1ec41:	mov    r12,rax
   1ec44:	movups XMMWORD PTR [rsp+0xb0],xmm0
   1ec4c:	mov    BYTE PTR [rsp+0xb8],0xa
   1ec54:	call   12b00 <__sprintf_chk@plt+0xee20>
   1ec59:	test   rbx,rbx
   1ec5c:	sete   dl
   1ec5f:	test   r12,r12
   1ec62:	mov    QWORD PTR [rsp+0x10],rax
   1ec67:	mov    rcx,rax
   1ec6a:	sete   al
   1ec6d:	or     dl,al
   1ec6f:	jne    1e4e4 <__sprintf_chk@plt+0x1a804>
   1ec75:	test   rcx,rcx
   1ec78:	je     1e4e4 <__sprintf_chk@plt+0x1a804>
   1ec7e:	mov    rbx,QWORD PTR [rsp+0x18]
   1ec83:	mov    rdx,QWORD PTR [rsp+0x8]
   1ec88:	mov    rdi,QWORD PTR [rsp]
   1ec8c:	mov    rsi,rbx
   1ec8f:	call   15870 <__sprintf_chk@plt+0x11b90>
   1ec94:	cdqe   
   1ec96:	add    QWORD PTR [rbx+0x48],rax
   1ec9a:	jmp    1e500 <__sprintf_chk@plt+0x1a820>
   1ec9f:	mov    rbx,QWORD PTR [r12+0x30]
   1eca4:	mov    r15,QWORD PTR [rsp+0x8]
   1eca9:	mov    r14,QWORD PTR [rsp+0x18]
   1ecae:	mov    rdi,QWORD PTR [rsp]
   1ecb2:	lea    rax,[rbx+0x1]
   1ecb6:	mov    rdx,r15
   1ecb9:	mov    QWORD PTR [r12+0x30],rax
   1ecbe:	or     rdx,0x800000
   1ecc5:	mov    rsi,r14
   1ecc8:	call   15870 <__sprintf_chk@plt+0x11b90>
   1eccd:	mov    rdx,QWORD PTR [rsp]
   1ecd1:	xor    esi,esi
   1ecd3:	mov    r11,r14
   1ecd6:	cdqe   
   1ecd8:	add    QWORD PTR [r14+0x48],rax
   1ecdc:	cmp    BYTE PTR [rdx+0x8],0x9
   1ece0:	jne    1f168 <__sprintf_chk@plt+0x1b488>
   1ece6:	cmp    rbx,0x8
   1ecea:	jbe    1f1f8 <__sprintf_chk@plt+0x1b518>
   1ecf0:	pxor   xmm0,xmm0
   1ecf4:	lea    rcx,[rsp+0xb0]
   1ecfc:	xor    edx,edx
   1ecfe:	mov    rdi,rbp
   1ed01:	movups XMMWORD PTR [rsp+0xb0],xmm0
   1ed09:	mov    BYTE PTR [rsp+0xb8],0x11
   1ed11:	call   12b00 <__sprintf_chk@plt+0xee20>
   1ed16:	mov    QWORD PTR [rsp+0x10],rax
   1ed1b:	test   rax,rax
   1ed1e:	je     1e4e4 <__sprintf_chk@plt+0x1a804>
   1ed24:	mov    QWORD PTR [rax+0x28],rbx
   1ed28:	jmp    1e5b8 <__sprintf_chk@plt+0x1a8d8>
   1ed2d:	mov    r15,QWORD PTR [rsp+0x98]
   1ed35:	mov    rdi,r15
   1ed38:	call   3810 <strlen@plt>
   1ed3d:	cmp    rax,0x1
   1ed41:	jne    1f608 <__sprintf_chk@plt+0x1b928>
   1ed47:	movzx  ecx,BYTE PTR [r15]
   1ed4b:	mov    rdx,rcx
   1ed4e:	shl    rax,cl
   1ed51:	shr    rdx,0x3
   1ed55:	and    edx,0x18
   1ed58:	or     QWORD PTR [rbx+rdx*1],rax
   1ed5c:	mov    rax,QWORD PTR [rsp+0x30]
   1ed61:	mov    DWORD PTR [rax],0x0
   1ed67:	movzx  eax,BYTE PTR [r13+0x8]
   1ed6c:	cmp    al,0x2
   1ed6e:	je     1f3a0 <__sprintf_chk@plt+0x1b6c0>
   1ed74:	cmp    al,0x15
   1ed76:	je     1f654 <__sprintf_chk@plt+0x1b974>
   1ed7c:	xor    r9d,r9d
   1ed7f:	jmp    1e9a5 <__sprintf_chk@plt+0x1acc5>
   1ed84:	nop    DWORD PTR [rax+0x0]
   1ed88:	mov    rax,QWORD PTR [rsp]
   1ed8c:	cmp    BYTE PTR [rax+0x8],0x1
   1ed90:	jne    1f060 <__sprintf_chk@plt+0x1b380>
   1ed96:	mov    rax,QWORD PTR [rsp]
   1ed9a:	cmp    BYTE PTR [rax],0x2c
   1ed9d:	jne    1f060 <__sprintf_chk@plt+0x1b380>
   1eda3:	xor    ebx,ebx
   1eda5:	mov    rdx,QWORD PTR [rsp+0x8]
   1edaa:	mov    rsi,QWORD PTR [rsp]
   1edae:	mov    QWORD PTR [rsp+0x38],rcx
   1edb3:	mov    rdi,QWORD PTR [rsp+0x18]
   1edb8:	movaps XMMWORD PTR [rsp+0x20],xmm0
   1edbd:	call   15fc0 <__sprintf_chk@plt+0x122e0>
   1edc2:	movdqa xmm0,XMMWORD PTR [rsp+0x20]
   1edc8:	mov    rcx,QWORD PTR [rsp+0x38]
   1edcd:	cmp    rax,0xfffffffffffffffe
   1edd1:	mov    r12,rax
   1edd4:	je     1e827 <__sprintf_chk@plt+0x1ab47>
   1edda:	cmp    rax,0xffffffffffffffff
   1edde:	je     1ede9 <__sprintf_chk@plt+0x1b109>
   1ede0:	cmp    rax,rbx
   1ede3:	jl     1f060 <__sprintf_chk@plt+0x1b380>
   1ede9:	mov    rax,QWORD PTR [rsp]
   1eded:	cmp    BYTE PTR [rax+0x8],0x18
   1edf1:	jne    1f060 <__sprintf_chk@plt+0x1b380>
   1edf7:	cmp    r12,0xffffffffffffffff
   1edfb:	jne    1efa3 <__sprintf_chk@plt+0x1b2c3>
   1ee01:	cmp    rbx,0x7fff
   1ee08:	jg     1f130 <__sprintf_chk@plt+0x1b450>
   1ee0e:	mov    r15,QWORD PTR [rsp+0x18]
   1ee13:	mov    rdx,QWORD PTR [rsp+0x8]
   1ee18:	mov    rdi,QWORD PTR [rsp]
   1ee1c:	mov    rsi,r15
   1ee1f:	call   15870 <__sprintf_chk@plt+0x11b90>
   1ee24:	cdqe   
   1ee26:	add    QWORD PTR [r15+0x48],rax
   1ee2a:	cmp    QWORD PTR [rsp+0x10],0x0
   1ee30:	je     1ef80 <__sprintf_chk@plt+0x1b2a0>
   1ee36:	mov    r14,QWORD PTR [rsp+0x10]
   1ee3b:	test   rbx,rbx
   1ee3e:	jle    1f88b <__sprintf_chk@plt+0x1bbab>
   1ee44:	mov    QWORD PTR [rsp+0x20],r14
   1ee49:	cmp    rbx,0x1
   1ee4d:	je     1f09c <__sprintf_chk@plt+0x1b3bc>
   1ee53:	mov    r15d,0x2
   1ee59:	jmp    1ee72 <__sprintf_chk@plt+0x1b192>
   1ee5b:	nop    DWORD PTR [rax+rax*1+0x0]
   1ee60:	test   rax,rax
   1ee63:	je     1eeb8 <__sprintf_chk@plt+0x1b1d8>
   1ee65:	add    r15,0x1
   1ee69:	cmp    r15,rbx
   1ee6c:	jg     1f09c <__sprintf_chk@plt+0x1b3bc>
   1ee72:	mov    rdi,r14
   1ee75:	mov    rsi,rbp
   1ee78:	call   1aae0 <__sprintf_chk@plt+0x16e00>
   1ee7d:	mov    rsi,QWORD PTR [rsp+0x20]
   1ee82:	mov    rcx,r13
   1ee85:	mov    rdi,rbp
   1ee88:	pxor   xmm0,xmm0
   1ee8c:	mov    rdx,rax
   1ee8f:	mov    r14,rax
   1ee92:	movups XMMWORD PTR [rsp+0xb0],xmm0
   1ee9a:	mov    BYTE PTR [rsp+0xb8],0x10
   1eea2:	call   12b00 <__sprintf_chk@plt+0xee20>
   1eea7:	mov    QWORD PTR [rsp+0x20],rax
   1eeac:	test   r14,r14
   1eeaf:	jne    1ee60 <__sprintf_chk@plt+0x1b180>
   1eeb1:	nop    DWORD PTR [rax+0x0]
   1eeb8:	mov    rax,QWORD PTR [rsp+0x30]
   1eebd:	mov    DWORD PTR [rax],0xc
   1eec3:	mov    rax,QWORD PTR [rsp+0x10]
   1eec8:	mov    rbx,rax
   1eecb:	mov    rax,QWORD PTR [rax+0x8]
   1eecf:	mov    QWORD PTR [rsp+0x10],rax
   1eed4:	test   rax,rax
   1eed7:	jne    1eec3 <__sprintf_chk@plt+0x1b1e3>
   1eed9:	mov    rax,QWORD PTR [rbx+0x10]
   1eedd:	mov    QWORD PTR [rsp+0x10],rax
   1eee2:	test   rax,rax
   1eee5:	jne    1eec3 <__sprintf_chk@plt+0x1b1e3>
   1eee7:	jmp    1ef12 <__sprintf_chk@plt+0x1b232>
   1eee9:	nop    DWORD PTR [rax+0x0]
   1eef0:	mov    rax,QWORD PTR [rbx]
   1eef3:	test   rax,rax
   1eef6:	je     1e4f0 <__sprintf_chk@plt+0x1a810>
   1eefc:	mov    rcx,QWORD PTR [rax+0x10]
   1ef00:	mov    QWORD PTR [rsp+0x10],rcx
   1ef05:	test   rcx,rcx
   1ef08:	je     1ef0f <__sprintf_chk@plt+0x1b22f>
   1ef0a:	cmp    rbx,rcx
   1ef0d:	jne    1eec3 <__sprintf_chk@plt+0x1b1e3>
   1ef0f:	mov    rbx,rax
   1ef12:	xor    edi,edi
   1ef14:	mov    rsi,rbx
   1ef17:	call   18ba0 <__sprintf_chk@plt+0x14ec0>
   1ef1c:	test   eax,eax
   1ef1e:	je     1eef0 <__sprintf_chk@plt+0x1b210>
   1ef20:	jmp    1e4f0 <__sprintf_chk@plt+0x1a810>
   1ef25:	nop    DWORD PTR [rax]
   1ef28:	mov    rsi,QWORD PTR [r14+0x28]
   1ef2c:	mov    rax,r14
   1ef2f:	nop
   1ef30:	mov    rdx,rax
   1ef33:	mov    rax,QWORD PTR [rax+0x8]
   1ef37:	test   rax,rax
   1ef3a:	jne    1ef30 <__sprintf_chk@plt+0x1b250>
   1ef3c:	mov    rax,QWORD PTR [rdx+0x10]
   1ef40:	test   rax,rax
   1ef43:	jne    1ef30 <__sprintf_chk@plt+0x1b250>
   1ef45:	jmp    1ef6d <__sprintf_chk@plt+0x1b28d>
   1ef47:	nop    WORD PTR [rax+rax*1+0x0]
   1ef50:	mov    rcx,QWORD PTR [rdx]
   1ef53:	test   rcx,rcx
   1ef56:	je     1e679 <__sprintf_chk@plt+0x1a999>
   1ef5c:	mov    rax,QWORD PTR [rcx+0x10]
   1ef60:	cmp    rdx,rax
   1ef63:	je     1ef6a <__sprintf_chk@plt+0x1b28a>
   1ef65:	test   rax,rax
   1ef68:	jne    1ef30 <__sprintf_chk@plt+0x1b250>
   1ef6a:	mov    rdx,rcx
   1ef6d:	cmp    BYTE PTR [rdx+0x30],0x11
   1ef71:	jne    1ef50 <__sprintf_chk@plt+0x1b270>
   1ef73:	cmp    rsi,QWORD PTR [rdx+0x28]
   1ef77:	jne    1ef50 <__sprintf_chk@plt+0x1b270>
   1ef79:	or     BYTE PTR [rdx+0x32],0x8
   1ef7d:	jmp    1ef50 <__sprintf_chk@plt+0x1b270>
   1ef7f:	nop
   1ef80:	mov    rax,QWORD PTR [rsp+0x30]
   1ef85:	mov    ecx,DWORD PTR [rax]
   1ef87:	test   ecx,ecx
   1ef89:	jne    1e4f0 <__sprintf_chk@plt+0x1a810>
   1ef8f:	mov    QWORD PTR [rsp+0x10],0x0
   1ef98:	jmp    1e77d <__sprintf_chk@plt+0x1aa9d>
   1ef9d:	nop    DWORD PTR [rax]
   1efa0:	mov    rbx,r12
   1efa3:	cmp    r12,0x7fff
   1efaa:	jg     1f130 <__sprintf_chk@plt+0x1b450>
   1efb0:	mov    r15,QWORD PTR [rsp+0x18]
   1efb5:	mov    rdx,QWORD PTR [rsp+0x8]
   1efba:	mov    rdi,QWORD PTR [rsp]
   1efbe:	mov    rsi,r15
   1efc1:	call   15870 <__sprintf_chk@plt+0x11b90>
   1efc6:	cdqe   
   1efc8:	add    QWORD PTR [r15+0x48],rax
   1efcc:	mov    rax,QWORD PTR [rsp+0x10]
   1efd1:	test   rax,rax
   1efd4:	je     1ef80 <__sprintf_chk@plt+0x1b2a0>
   1efd6:	mov    rcx,rbx
   1efd9:	or     rcx,r12
   1efdc:	jne    1ee36 <__sprintf_chk@plt+0x1b156>
   1efe2:	nop    WORD PTR [rax+rax*1+0x0]
   1efe8:	mov    rbx,rax
   1efeb:	mov    rax,QWORD PTR [rax+0x8]
   1efef:	test   rax,rax
   1eff2:	jne    1efe8 <__sprintf_chk@plt+0x1b308>
   1eff4:	mov    rax,QWORD PTR [rbx+0x10]
   1eff8:	test   rax,rax
   1effb:	jne    1efe8 <__sprintf_chk@plt+0x1b308>
   1effd:	jmp    1f019 <__sprintf_chk@plt+0x1b339>
   1efff:	nop
   1f000:	mov    rdx,QWORD PTR [rbx]
   1f003:	test   rdx,rdx
   1f006:	je     1f027 <__sprintf_chk@plt+0x1b347>
   1f008:	mov    rax,QWORD PTR [rdx+0x10]
   1f00c:	test   rax,rax
   1f00f:	je     1f016 <__sprintf_chk@plt+0x1b336>
   1f011:	cmp    rbx,rax
   1f014:	jne    1efe8 <__sprintf_chk@plt+0x1b308>
   1f016:	mov    rbx,rdx
   1f019:	xor    edi,edi
   1f01b:	mov    rsi,rbx
   1f01e:	call   18ba0 <__sprintf_chk@plt+0x14ec0>
   1f023:	test   eax,eax
   1f025:	je     1f000 <__sprintf_chk@plt+0x1b320>
   1f027:	mov    rax,QWORD PTR [rsp+0x30]
   1f02c:	mov    eax,DWORD PTR [rax]
   1f02e:	test   eax,eax
   1f030:	je     1ef8f <__sprintf_chk@plt+0x1b2af>
   1f036:	jmp    1eec3 <__sprintf_chk@plt+0x1b1e3>
   1f03b:	nop    DWORD PTR [rax+rax*1+0x0]
   1f040:	mov    rax,QWORD PTR [rsp]
   1f044:	cmp    BYTE PTR [rax],0x2c
   1f047:	je     1f883 <__sprintf_chk@plt+0x1bba3>
   1f04d:	test   QWORD PTR [rsp+0x8],0x200000
   1f056:	jne    1e836 <__sprintf_chk@plt+0x1ab56>
   1f05c:	nop    DWORD PTR [rax+0x0]
   1f060:	mov    rax,QWORD PTR [rsp+0x30]
   1f065:	mov    DWORD PTR [rax],0xa
   1f06b:	cmp    QWORD PTR [rsp+0x10],0x0
   1f071:	je     1e4f0 <__sprintf_chk@plt+0x1a810>
   1f077:	jmp    1eec3 <__sprintf_chk@plt+0x1b1e3>
   1f07c:	nop    DWORD PTR [rax+0x0]
   1f080:	mov    r15,QWORD PTR [rsp+0x20]
   1f085:	nop    DWORD PTR [rax]
   1f088:	mov    QWORD PTR [rsp+0x10],r15
   1f08d:	jmp    1e77d <__sprintf_chk@plt+0x1aa9d>
   1f092:	mov    QWORD PTR [rsp+0x20],r14
   1f097:	mov    ebx,0x1
   1f09c:	cmp    rbx,r12
   1f09f:	je     1f080 <__sprintf_chk@plt+0x1b3a0>
   1f0a1:	mov    rdi,r14
   1f0a4:	mov    rsi,rbp
   1f0a7:	call   1aae0 <__sprintf_chk@plt+0x16e00>
   1f0ac:	mov    r14,rax
   1f0af:	test   rax,rax
   1f0b2:	jne    1e66e <__sprintf_chk@plt+0x1a98e>
   1f0b8:	jmp    1eeb8 <__sprintf_chk@plt+0x1b1d8>
   1f0bd:	nop    DWORD PTR [rax]
   1f0c0:	mov    rax,QWORD PTR [rsp+0x10]
   1f0c5:	test   rax,rax
   1f0c8:	je     1f117 <__sprintf_chk@plt+0x1b437>
   1f0ca:	nop    WORD PTR [rax+rax*1+0x0]
   1f0d0:	mov    rbx,rax
   1f0d3:	mov    rax,QWORD PTR [rax+0x8]
   1f0d7:	test   rax,rax
   1f0da:	jne    1f0d0 <__sprintf_chk@plt+0x1b3f0>
   1f0dc:	mov    rax,QWORD PTR [rbx+0x10]
   1f0e0:	test   rax,rax
   1f0e3:	jne    1f0d0 <__sprintf_chk@plt+0x1b3f0>
   1f0e5:	jmp    1f109 <__sprintf_chk@plt+0x1b429>
   1f0e7:	nop    WORD PTR [rax+rax*1+0x0]
   1f0f0:	mov    rdx,QWORD PTR [rbx]
   1f0f3:	test   rdx,rdx
   1f0f6:	je     1f117 <__sprintf_chk@plt+0x1b437>
   1f0f8:	mov    rax,QWORD PTR [rdx+0x10]
   1f0fc:	test   rax,rax
   1f0ff:	je     1f106 <__sprintf_chk@plt+0x1b426>
   1f101:	cmp    rbx,rax
   1f104:	jne    1f0d0 <__sprintf_chk@plt+0x1b3f0>
   1f106:	mov    rbx,rdx
   1f109:	xor    edi,edi
   1f10b:	mov    rsi,rbx
   1f10e:	call   18ba0 <__sprintf_chk@plt+0x14ec0>
   1f113:	test   eax,eax
   1f115:	je     1f0f0 <__sprintf_chk@plt+0x1b410>
   1f117:	mov    QWORD PTR [rsp+0x10],0x0
   1f120:	mov    rax,QWORD PTR [rsp+0x30]
   1f125:	mov    DWORD PTR [rax],0xd
   1f12b:	jmp    1e500 <__sprintf_chk@plt+0x1a820>
   1f130:	mov    rax,QWORD PTR [rsp+0x30]
   1f135:	mov    DWORD PTR [rax],0xf
   1f13b:	jmp    1f06b <__sprintf_chk@plt+0x1b38b>
   1f140:	test   QWORD PTR [rsp+0x8],0x20000
   1f149:	jne    1e4bf <__sprintf_chk@plt+0x1a7df>
   1f14f:	mov    QWORD PTR [rsp+0x10],0x0
   1f158:	mov    rax,QWORD PTR [rsp+0x30]
   1f15d:	mov    DWORD PTR [rax],0x10
   1f163:	jmp    1e500 <__sprintf_chk@plt+0x1a820>
   1f168:	mov    r14,QWORD PTR [rsp+0x30]
   1f16d:	lea    r8,[r13+0x1]
   1f171:	mov    rsi,r12
   1f174:	mov    rcx,r15
   1f177:	mov    rdi,r11
   1f17a:	mov    r9,r14
   1f17d:	call   1cfe0 <__sprintf_chk@plt+0x19300>
   1f182:	mov    r8d,DWORD PTR [r14]
   1f185:	mov    rsi,rax
   1f188:	test   r8d,r8d
   1f18b:	jne    1e4f0 <__sprintf_chk@plt+0x1a810>
   1f191:	mov    rax,QWORD PTR [rsp]
   1f195:	cmp    BYTE PTR [rax+0x8],0x9
   1f199:	je     1ece6 <__sprintf_chk@plt+0x1b006>
   1f19f:	test   rsi,rsi
   1f1a2:	je     1f1e2 <__sprintf_chk@plt+0x1b502>
   1f1a4:	mov    rbx,rsi
   1f1a7:	mov    rsi,QWORD PTR [rsi+0x8]
   1f1ab:	test   rsi,rsi
   1f1ae:	jne    1f1a4 <__sprintf_chk@plt+0x1b4c4>
   1f1b0:	mov    rsi,QWORD PTR [rbx+0x10]
   1f1b4:	test   rsi,rsi
   1f1b7:	jne    1f1a4 <__sprintf_chk@plt+0x1b4c4>
   1f1b9:	jmp    1f1d4 <__sprintf_chk@plt+0x1b4f4>
   1f1bb:	mov    rax,QWORD PTR [rbx]
   1f1be:	test   rax,rax
   1f1c1:	je     1f1e2 <__sprintf_chk@plt+0x1b502>
   1f1c3:	mov    rsi,QWORD PTR [rax+0x10]
   1f1c7:	cmp    rbx,rsi
   1f1ca:	je     1f1d1 <__sprintf_chk@plt+0x1b4f1>
   1f1cc:	test   rsi,rsi
   1f1cf:	jne    1f1a4 <__sprintf_chk@plt+0x1b4c4>
   1f1d1:	mov    rbx,rax
   1f1d4:	xor    edi,edi
   1f1d6:	mov    rsi,rbx
   1f1d9:	call   18ba0 <__sprintf_chk@plt+0x14ec0>
   1f1de:	test   eax,eax
   1f1e0:	je     1f1bb <__sprintf_chk@plt+0x1b4db>
   1f1e2:	mov    rax,QWORD PTR [rsp+0x30]
   1f1e7:	mov    DWORD PTR [rax],0x8
   1f1ed:	jmp    1e4f0 <__sprintf_chk@plt+0x1a810>
   1f1f2:	nop    WORD PTR [rax+rax*1+0x0]
   1f1f8:	mov    eax,0x1
   1f1fd:	mov    ecx,ebx
   1f1ff:	shl    eax,cl
   1f201:	cdqe   
   1f203:	or     QWORD PTR [rbp+0xa8],rax
   1f20a:	jmp    1ecf0 <__sprintf_chk@plt+0x1b010>
   1f20f:	mov    rcx,QWORD PTR [rsp+0x38]
   1f214:	mov    rax,QWORD PTR [rcx+0x28]
   1f218:	mov    rdi,QWORD PTR [rcx]
   1f21b:	cmp    rax,QWORD PTR [rsp+0x50]
   1f220:	je     1f752 <__sprintf_chk@plt+0x1ba72>
   1f226:	mov    rcx,QWORD PTR [rsp+0x38]
   1f22b:	lea    rdx,[rax+0x1]
   1f22f:	mov    QWORD PTR [rcx+0x28],rdx
   1f233:	mov    edx,DWORD PTR [rsp+0x98]
   1f23a:	mov    DWORD PTR [rdi+rax*4],edx
   1f23d:	jmp    1ed67 <__sprintf_chk@plt+0x1b087>
   1f242:	movzx  ecx,BYTE PTR [rsp+0x98]
   1f24a:	mov    edx,0x1
   1f24f:	mov    rax,rcx
   1f252:	shl    rdx,cl
   1f255:	shr    rax,0x3
   1f259:	and    eax,0x18
   1f25c:	or     QWORD PTR [rbx+rax*1],rdx
   1f260:	jmp    1ed67 <__sprintf_chk@plt+0x1b087>
   1f265:	mov    rdi,QWORD PTR [rbp+0x78]
   1f269:	mov    rdx,QWORD PTR [rsp+0x38]
   1f26e:	mov    r9,r14
   1f271:	mov    rsi,rbx
   1f274:	mov    r8,QWORD PTR [rsp+0x98]
   1f27c:	lea    rcx,[rsp+0x88]
   1f284:	call   14370 <__sprintf_chk@plt+0x10690>
   1f289:	mov    rcx,QWORD PTR [rsp+0x30]
   1f28e:	mov    DWORD PTR [rcx],eax
   1f290:	test   eax,eax
   1f292:	je     1ed67 <__sprintf_chk@plt+0x1b087>
   1f298:	mov    rbp,QWORD PTR [rsp+0x10]
   1f29d:	mov    rdi,rbx
   1f2a0:	call   3680 <free@plt>
   1f2a5:	mov    rbx,QWORD PTR [rsp+0x38]
   1f2aa:	mov    rdi,QWORD PTR [rbx]
   1f2ad:	call   3680 <free@plt>
   1f2b2:	mov    rdi,QWORD PTR [rbx+0x8]
   1f2b6:	call   3680 <free@plt>
   1f2bb:	mov    rdi,QWORD PTR [rbx+0x10]
   1f2bf:	call   3680 <free@plt>
   1f2c4:	mov    rdi,QWORD PTR [rbx+0x18]
   1f2c8:	call   3680 <free@plt>
   1f2cd:	mov    rdi,rbx
   1f2d0:	call   3680 <free@plt>
   1f2d5:	mov    rax,QWORD PTR [rsp+0x30]
   1f2da:	mov    edi,DWORD PTR [rax]
   1f2dc:	test   edi,edi
   1f2de:	jne    1e4f0 <__sprintf_chk@plt+0x1a810>
   1f2e4:	mov    QWORD PTR [rsp+0x10],0x0
   1f2ed:	jmp    1e5b8 <__sprintf_chk@plt+0x1a8d8>
   1f2f2:	mov    rax,QWORD PTR [rsp+0x38]
   1f2f7:	or     BYTE PTR [rax+0x20],0x1
   1f2fb:	test   QWORD PTR [rsp+0x8],0x100
   1f304:	je     1f30d <__sprintf_chk@plt+0x1b62d>
   1f306:	or     QWORD PTR [rbx],0x400
   1f30d:	mov    rcx,QWORD PTR [rsp+0x18]
   1f312:	movsxd rax,DWORD PTR [rsp+0x20]
   1f317:	mov    rdi,QWORD PTR [rsp]
   1f31b:	mov    rdx,QWORD PTR [rsp+0x8]
   1f320:	add    QWORD PTR [rcx+0x48],rax
   1f324:	mov    rsi,rcx
   1f327:	call   12630 <__sprintf_chk@plt+0xe950>
   1f32c:	mov    DWORD PTR [rsp+0x20],eax
   1f330:	movzx  eax,BYTE PTR [rdi+0x8]
   1f334:	cmp    al,0x2
   1f336:	je     1f5c2 <__sprintf_chk@plt+0x1b8e2>
   1f33c:	mov    BYTE PTR [rsp+0x7b],0x1
   1f341:	jmp    1e94c <__sprintf_chk@plt+0x1ac6c>
   1f346:	mov    DWORD PTR [r15],0x6
   1f34d:	mov    rcx,r15
   1f350:	xor    edx,edx
   1f352:	xor    esi,esi
   1f354:	mov    rdi,rbp
   1f357:	call   12b00 <__sprintf_chk@plt+0xee20>
   1f35c:	mov    DWORD PTR [r15],0x9
   1f363:	mov    rbx,rax
   1f366:	jmp    1ec1c <__sprintf_chk@plt+0x1af3c>
   1f36b:	mov    rax,QWORD PTR [rsp]
   1f36f:	mov    BYTE PTR [rax+0x8],0x1
   1f373:	jmp    1e954 <__sprintf_chk@plt+0x1ac74>
   1f378:	mov    rcx,QWORD PTR [rsp]
   1f37c:	xor    edx,edx
   1f37e:	xor    esi,esi
   1f380:	mov    rdi,rbp
   1f383:	call   12b00 <__sprintf_chk@plt+0xee20>
   1f388:	mov    QWORD PTR [rsp+0x10],rax
   1f38d:	test   rax,rax
   1f390:	jne    1ec7e <__sprintf_chk@plt+0x1af9e>
   1f396:	jmp    1e4e4 <__sprintf_chk@plt+0x1a804>
   1f39b:	nop    DWORD PTR [rax+rax*1+0x0]
   1f3a0:	mov    rax,QWORD PTR [rsp+0x30]
   1f3a5:	mov    rbp,QWORD PTR [rsp+0x10]
   1f3aa:	mov    DWORD PTR [rax],0x7
   1f3b0:	jmp    1f29d <__sprintf_chk@plt+0x1b5bd>
   1f3b5:	mov    rcx,QWORD PTR [rsp+0x30]
   1f3ba:	mov    rbp,QWORD PTR [rsp+0x10]
   1f3bf:	mov    DWORD PTR [rcx],eax
   1f3c1:	jmp    1f29d <__sprintf_chk@plt+0x1b5bd>
   1f3c6:	mov    QWORD PTR [rsp+0x10],r13
   1f3cb:	jmp    1e5b8 <__sprintf_chk@plt+0x1a8d8>
   1f3d0:	movsxd rax,DWORD PTR [rsp+0x20]
   1f3d5:	add    QWORD PTR [rbp+0x48],rax
   1f3d9:	lea    r10,[rsp+0xb0]
   1f3e1:	mov    rdx,r14
   1f3e4:	mov    rdi,r10
   1f3e7:	call   12630 <__sprintf_chk@plt+0xe950>
   1f3ec:	mov    ecx,eax
   1f3ee:	movzx  eax,BYTE PTR [rsp+0xb8]
   1f3f6:	cmp    al,0x2
   1f3f8:	je     1f3a0 <__sprintf_chk@plt+0x1b6c0>
   1f3fa:	cmp    al,0x15
   1f3fc:	je     1f5a5 <__sprintf_chk@plt+0x1b8c5>
   1f402:	lea    rax,[rsp+0xe0]
   1f40a:	mov    r9d,0x1
   1f410:	mov    r8,r14
   1f413:	mov    rdx,r10
   1f416:	lea    rdi,[rsp+0xa0]
   1f41e:	mov    QWORD PTR [rsp+0xa8],rax
   1f426:	mov    DWORD PTR [rsp+0xa0],0x3
   1f431:	call   16150 <__sprintf_chk@plt+0x12470>
   1f436:	test   eax,eax
   1f438:	jne    1f3b5 <__sprintf_chk@plt+0x1b6d5>
   1f43e:	mov    rdx,r14
   1f441:	mov    rsi,rbp
   1f444:	mov    rdi,r13
   1f447:	call   12630 <__sprintf_chk@plt+0xe950>
   1f44c:	mov    r15d,DWORD PTR [rsp+0x90]
   1f454:	mov    edx,0x0
   1f459:	mov    DWORD PTR [rsp+0x20],eax
   1f45d:	mov    rax,QWORD PTR [rsp+0x10]
   1f462:	cmp    DWORD PTR [rax+0xb4],0x2
   1f469:	lea    eax,[r15-0x2]
   1f46d:	cmovge rdx,QWORD PTR [rsp+0x38]
   1f473:	and    eax,0xfffffffd
   1f476:	mov    r12,rdx
   1f479:	je     1f9b0 <__sprintf_chk@plt+0x1bcd0>
   1f47f:	mov    ecx,DWORD PTR [rsp+0xa0]
   1f486:	lea    eax,[rcx-0x2]
   1f489:	and    eax,0xfffffffd
   1f48c:	je     1f9b0 <__sprintf_chk@plt+0x1bcd0>
   1f492:	cmp    r15d,0x3
   1f496:	sete   BYTE PTR [rsp+0x58]
   1f49b:	je     1fa81 <__sprintf_chk@plt+0x1bda1>
   1f4a1:	cmp    ecx,0x3
   1f4a4:	je     1fa38 <__sprintf_chk@plt+0x1bd58>
   1f4aa:	test   r15d,r15d
   1f4ad:	jne    1f78b <__sprintf_chk@plt+0x1baab>
   1f4b3:	movzx  r10d,BYTE PTR [rsp+0x98]
   1f4bc:	test   r15d,r15d
   1f4bf:	sete   al
   1f4c2:	or     al,BYTE PTR [rsp+0x58]
   1f4c6:	test   ecx,ecx
   1f4c8:	je     1f79b <__sprintf_chk@plt+0x1babb>
   1f4ce:	cmp    ecx,0x3
   1f4d1:	jne    1fa23 <__sprintf_chk@plt+0x1bd43>
   1f4d7:	mov    rdi,QWORD PTR [rsp+0xa8]
   1f4df:	movzx  r15d,BYTE PTR [rdi]
   1f4e3:	test   al,al
   1f4e5:	je     1f9f8 <__sprintf_chk@plt+0x1bd18>
   1f4eb:	test   r12,r12
   1f4ee:	je     1f98f <__sprintf_chk@plt+0x1bcaf>
   1f4f4:	mov    edi,r10d
   1f4f7:	call   3b70 <btowc@plt>
   1f4fc:	mov    r10d,eax
   1f4ff:	mov    eax,DWORD PTR [rsp+0xa0]
   1f506:	test   eax,eax
   1f508:	je     1fa09 <__sprintf_chk@plt+0x1bd29>
   1f50e:	cmp    eax,0x3
   1f511:	je     1fa09 <__sprintf_chk@plt+0x1bd29>
   1f517:	mov    r15d,DWORD PTR [rsp+0xa8]
   1f51f:	cmp    r10d,0xffffffff
   1f523:	je     1f608 <__sprintf_chk@plt+0x1b928>
   1f529:	cmp    r15d,0xffffffff
   1f52d:	je     1f608 <__sprintf_chk@plt+0x1b928>
   1f533:	test   BYTE PTR [rsp+0x68],0x1
   1f538:	je     1f543 <__sprintf_chk@plt+0x1b863>
   1f53a:	cmp    r15d,r10d
   1f53d:	jb     1f9b0 <__sprintf_chk@plt+0x1bcd0>
   1f543:	test   r12,r12
   1f546:	je     1f573 <__sprintf_chk@plt+0x1b893>
   1f548:	mov    rax,QWORD PTR [r12+0x40]
   1f54d:	mov    r9,QWORD PTR [r12+0x8]
   1f552:	cmp    rax,QWORD PTR [rsp+0x60]
   1f557:	je     1f925 <__sprintf_chk@plt+0x1bc45>
   1f55d:	mov    rcx,QWORD PTR [r12+0x10]
   1f562:	lea    rsi,[rax+0x1]
   1f566:	mov    DWORD PTR [r9+rax*4],r10d
   1f56a:	mov    QWORD PTR [r12+0x40],rsi
   1f56f:	mov    DWORD PTR [rcx+rax*4],r15d
   1f573:	xor    eax,eax
   1f575:	mov    ecx,eax
   1f577:	cmp    r10d,eax
   1f57a:	ja     1f594 <__sprintf_chk@plt+0x1b8b4>
   1f57c:	cmp    r15d,eax
   1f57f:	jb     1f594 <__sprintf_chk@plt+0x1b8b4>
   1f581:	mov    rdx,rax
   1f584:	mov    edi,0x1
   1f589:	sar    rdx,0x6
   1f58d:	shl    rdi,cl
   1f590:	or     QWORD PTR [rbx+rdx*8],rdi
   1f594:	add    rax,0x1
   1f598:	cmp    rax,0x100
   1f59e:	jne    1f575 <__sprintf_chk@plt+0x1b895>
   1f5a0:	jmp    1ed5c <__sprintf_chk@plt+0x1b07c>
   1f5a5:	mov    eax,DWORD PTR [rsp+0x20]
   1f5a9:	neg    eax
   1f5ab:	cdqe   
   1f5ad:	add    QWORD PTR [rbp+0x48],rax
   1f5b1:	mov    eax,DWORD PTR [rsp+0x90]
   1f5b8:	mov    BYTE PTR [r13+0x8],0x1
   1f5bd:	jmp    1ea18 <__sprintf_chk@plt+0x1ad38>
   1f5c2:	mov    rax,QWORD PTR [rsp+0x30]
   1f5c7:	mov    DWORD PTR [rax],0x2
   1f5cd:	jmp    1f29d <__sprintf_chk@plt+0x1b5bd>
   1f5d2:	mov    rdi,rbx
   1f5d5:	call   3680 <free@plt>
   1f5da:	mov    rdi,QWORD PTR [rsp+0x38]
   1f5df:	call   3680 <free@plt>
   1f5e4:	jmp    1e4e4 <__sprintf_chk@plt+0x1a804>
   1f5e9:	mov    rdi,QWORD PTR [rsp+0xa8]
   1f5f1:	mov    DWORD PTR [rsp+0x7c],ecx
   1f5f5:	call   3810 <strlen@plt>
   1f5fa:	mov    ecx,DWORD PTR [rsp+0x7c]
   1f5fe:	cmp    rax,0x1
   1f602:	jbe    1fab1 <__sprintf_chk@plt+0x1bdd1>
   1f608:	mov    rax,QWORD PTR [rsp+0x30]
   1f60d:	mov    rbp,QWORD PTR [rsp+0x10]
   1f612:	mov    DWORD PTR [rax],0x3
   1f618:	jmp    1f29d <__sprintf_chk@plt+0x1b5bd>
   1f61d:	mov    QWORD PTR [rsp+0x10],0x0
   1f626:	mov    rax,QWORD PTR [rsp+0x30]
   1f62b:	mov    DWORD PTR [rax],0x6
   1f631:	jmp    1e500 <__sprintf_chk@plt+0x1a820>
   1f636:	mov    rax,QWORD PTR [rsp]
   1f63a:	cmp    BYTE PTR [rax+0x8],0x2
   1f63e:	jne    1f060 <__sprintf_chk@plt+0x1b380>
   1f644:	mov    rax,QWORD PTR [rsp+0x30]
   1f649:	mov    DWORD PTR [rax],0x9
   1f64f:	jmp    1f06b <__sprintf_chk@plt+0x1b38b>
   1f654:	mov    rcx,QWORD PTR [rsp+0x18]
   1f659:	movsxd rax,DWORD PTR [rsp+0x20]
   1f65e:	mov    rbp,QWORD PTR [rsp+0x10]
   1f663:	add    QWORD PTR [rcx+0x48],rax
   1f667:	cmp    BYTE PTR [rsp+0x7b],0x0
   1f66c:	je     1f681 <__sprintf_chk@plt+0x1b9a1>
   1f66e:	mov    rax,rbx
   1f671:	lea    rdx,[rbx+0x20]
   1f675:	not    QWORD PTR [rax]
   1f678:	add    rax,0x8
   1f67c:	cmp    rdx,rax
   1f67f:	jne    1f675 <__sprintf_chk@plt+0x1b995>
   1f681:	mov    edx,DWORD PTR [rbp+0xb4]
   1f687:	cmp    edx,0x1
   1f68a:	jg     1f861 <__sprintf_chk@plt+0x1bb81>
   1f690:	mov    rax,QWORD PTR [rsp+0x38]
   1f695:	cmp    QWORD PTR [rax+0x28],0x0
   1f69a:	jne    1f7a9 <__sprintf_chk@plt+0x1bac9>
   1f6a0:	mov    rax,QWORD PTR [rsp+0x38]
   1f6a5:	cmp    QWORD PTR [rax+0x30],0x0
   1f6aa:	jne    1f7a9 <__sprintf_chk@plt+0x1bac9>
   1f6b0:	cmp    QWORD PTR [rax+0x38],0x0
   1f6b5:	jne    1f7a9 <__sprintf_chk@plt+0x1bac9>
   1f6bb:	cmp    QWORD PTR [rax+0x40],0x0
   1f6c0:	jne    1f7a9 <__sprintf_chk@plt+0x1bac9>
   1f6c6:	sub    edx,0x1
   1f6c9:	jle    1f6e0 <__sprintf_chk@plt+0x1ba00>
   1f6cb:	cmp    QWORD PTR [rax+0x48],0x0
   1f6d0:	jne    1f7a9 <__sprintf_chk@plt+0x1bac9>
   1f6d6:	test   BYTE PTR [rax+0x20],0x1
   1f6da:	jne    1f7a9 <__sprintf_chk@plt+0x1bac9>
   1f6e0:	mov    r15,QWORD PTR [rsp+0x38]
   1f6e5:	mov    rdi,QWORD PTR [r15]
   1f6e8:	call   3680 <free@plt>
   1f6ed:	mov    rdi,QWORD PTR [r15+0x8]
   1f6f1:	call   3680 <free@plt>
   1f6f6:	mov    rdi,QWORD PTR [r15+0x10]
   1f6fa:	call   3680 <free@plt>
   1f6ff:	mov    rdi,QWORD PTR [r15+0x18]
   1f703:	call   3680 <free@plt>
   1f708:	mov    rdi,r15
   1f70b:	call   3680 <free@plt>
   1f710:	mov    BYTE PTR [rsp+0xa8],0x3
   1f718:	xor    edx,edx
   1f71a:	xor    esi,esi
   1f71c:	mov    QWORD PTR [rsp+0xa0],rbx
   1f724:	lea    rcx,[rsp+0xa0]
   1f72c:	mov    rdi,rbp
   1f72f:	call   12b00 <__sprintf_chk@plt+0xee20>
   1f734:	mov    QWORD PTR [rsp+0x10],rax
   1f739:	test   rax,rax
   1f73c:	jne    1e5b8 <__sprintf_chk@plt+0x1a8d8>
   1f742:	mov    rax,QWORD PTR [rsp+0x30]
   1f747:	mov    DWORD PTR [rax],0xc
   1f74d:	jmp    1f29d <__sprintf_chk@plt+0x1b5bd>
   1f752:	mov    rax,QWORD PTR [rsp+0x50]
   1f757:	lea    rax,[rax+rax*1+0x1]
   1f75c:	lea    rsi,[rax*4+0x0]
   1f764:	mov    QWORD PTR [rsp+0x50],rax
   1f769:	call   3b20 <realloc@plt>
   1f76e:	mov    rdi,rax
   1f771:	test   rax,rax
   1f774:	je     1fa77 <__sprintf_chk@plt+0x1bd97>
   1f77a:	mov    rax,QWORD PTR [rsp+0x38]
   1f77f:	mov    QWORD PTR [rax],rdi
   1f782:	mov    rax,QWORD PTR [rax+0x28]
   1f786:	jmp    1f226 <__sprintf_chk@plt+0x1b546>
   1f78b:	movzx  eax,BYTE PTR [rsp+0x58]
   1f790:	xor    r10d,r10d
   1f793:	test   ecx,ecx
   1f795:	jne    1fa23 <__sprintf_chk@plt+0x1bd43>
   1f79b:	movzx  r15d,BYTE PTR [rsp+0xa8]
   1f7a4:	jmp    1f4e3 <__sprintf_chk@plt+0x1b803>
   1f7a9:	or     BYTE PTR [rbp+0xb0],0x2
   1f7b0:	mov    rax,QWORD PTR [rsp+0x38]
   1f7b5:	xor    edx,edx
   1f7b7:	xor    esi,esi
   1f7b9:	lea    r12,[rsp+0xa0]
   1f7c1:	mov    rdi,rbp
   1f7c4:	mov    BYTE PTR [rsp+0xa8],0x6
   1f7cc:	mov    rcx,r12
   1f7cf:	mov    QWORD PTR [rsp+0xa0],rax
   1f7d7:	call   12b00 <__sprintf_chk@plt+0xee20>
   1f7dc:	lea    rdx,[rbx+0x20]
   1f7e0:	mov    rcx,rax
   1f7e3:	mov    QWORD PTR [rsp+0x10],rax
   1f7e8:	mov    rax,rbx
   1f7eb:	test   rcx,rcx
   1f7ee:	je     1f742 <__sprintf_chk@plt+0x1ba62>
   1f7f4:	cmp    QWORD PTR [rax],0x0
   1f7f8:	jne    1f810 <__sprintf_chk@plt+0x1bb30>
   1f7fa:	add    rax,0x8
   1f7fe:	cmp    rdx,rax
   1f801:	jne    1f7f4 <__sprintf_chk@plt+0x1bb14>
   1f803:	mov    rdi,rbx
   1f806:	call   3680 <free@plt>
   1f80b:	jmp    1e5b8 <__sprintf_chk@plt+0x1a8d8>
   1f810:	xor    esi,esi
   1f812:	mov    rcx,r12
   1f815:	xor    edx,edx
   1f817:	mov    rdi,rbp
   1f81a:	mov    BYTE PTR [rsp+0xa8],0x3
   1f822:	mov    QWORD PTR [rsp+0xa0],rbx
   1f82a:	call   12b00 <__sprintf_chk@plt+0xee20>
   1f82f:	mov    rsi,rax
   1f832:	test   rax,rax
   1f835:	je     1f742 <__sprintf_chk@plt+0x1ba62>
   1f83b:	pxor   xmm0,xmm0
   1f83f:	mov    rdx,QWORD PTR [rsp+0x10]
   1f844:	lea    rcx,[rsp+0xb0]
   1f84c:	movups XMMWORD PTR [rsp+0xb0],xmm0
   1f854:	mov    BYTE PTR [rsp+0xb8],0xa
   1f85c:	jmp    1f72c <__sprintf_chk@plt+0x1ba4c>
   1f861:	mov    rcx,QWORD PTR [rbp+0x78]
   1f865:	xor    eax,eax
   1f867:	mov    rsi,QWORD PTR [rcx+rax*1]
   1f86b:	and    QWORD PTR [rbx+rax*1],rsi
   1f86f:	add    rax,0x8
   1f873:	cmp    rax,0x20
   1f877:	jne    1f867 <__sprintf_chk@plt+0x1bb87>
   1f879:	jmp    1f690 <__sprintf_chk@plt+0x1b9b0>
   1f87e:	call   3840 <__stack_chk_fail@plt>
   1f883:	mov    rbx,r12
   1f886:	jmp    1eda5 <__sprintf_chk@plt+0x1b0c5>
   1f88b:	mov    QWORD PTR [rsp+0x20],0x0
   1f894:	jmp    1e66e <__sprintf_chk@plt+0x1a98e>
   1f899:	nop    DWORD PTR [rax+0x0]
   1f8a0:	mov    ebx,0x80
   1f8a5:	mov    r13d,0x2
   1f8ab:	call   3cd0 <__ctype_b_loc@plt>
   1f8b0:	lea    r9d,[rbx+0x100]
   1f8b7:	mov    r8,rax
   1f8ba:	movsxd rax,r13d
   1f8bd:	shl    r13d,0x6
   1f8c1:	mov    rdx,QWORD PTR [r8]
   1f8c4:	lea    rsi,[rbp+rax*8+0x0]
   1f8c9:	movsxd rax,ebx
   1f8cc:	sub    r9d,r13d
   1f8cf:	mov    r8d,0x1
   1f8d5:	lea    rdi,[rdx+rax*2]
   1f8d9:	xor    eax,eax
   1f8db:	jmp    1f8ea <__sprintf_chk@plt+0x1bc0a>
   1f8dd:	nop    DWORD PTR [rax]
   1f8e0:	add    rax,0x1
   1f8e4:	cmp    rax,0x40
   1f8e8:	je     1f909 <__sprintf_chk@plt+0x1bc29>
   1f8ea:	mov    ecx,eax
   1f8ec:	test   BYTE PTR [rdi+rax*2],0x8
   1f8f0:	jne    1f8fa <__sprintf_chk@plt+0x1bc1a>
   1f8f2:	lea    edx,[rbx+rax*1]
   1f8f5:	cmp    edx,0x5f
   1f8f8:	jne    1f8e0 <__sprintf_chk@plt+0x1bc00>
   1f8fa:	mov    rdx,r8
   1f8fd:	shl    rdx,cl
   1f900:	or     QWORD PTR [rsi+0xb8],rdx
   1f907:	jmp    1f8e0 <__sprintf_chk@plt+0x1bc00>
   1f909:	add    ebx,0x40
   1f90c:	add    rsi,0x8
   1f910:	sub    rdi,0xffffffffffffff80
   1f914:	cmp    r9d,ebx
   1f917:	jne    1f8d9 <__sprintf_chk@plt+0x1bbf9>
   1f919:	jmp    1ebd8 <__sprintf_chk@plt+0x1aef8>
   1f91e:	xor    ebx,ebx
   1f920:	xor    r13d,r13d
   1f923:	jmp    1f8ab <__sprintf_chk@plt+0x1bbcb>
   1f925:	mov    rax,QWORD PTR [rsp+0x60]
   1f92a:	mov    rdi,r9
   1f92d:	mov    DWORD PTR [rsp+0x7c],r10d
   1f932:	add    rax,rax
   1f935:	add    rax,0x1
   1f939:	lea    rsi,[rax*4+0x0]
   1f941:	mov    QWORD PTR [rsp+0x60],rax
   1f946:	mov    QWORD PTR [rsp+0x70],rsi
   1f94b:	call   3b20 <realloc@plt>
   1f950:	mov    rdi,QWORD PTR [r12+0x10]
   1f955:	mov    rsi,QWORD PTR [rsp+0x70]
   1f95a:	mov    QWORD PTR [rsp+0x58],rax
   1f95f:	call   3b20 <realloc@plt>
   1f964:	mov    r9,QWORD PTR [rsp+0x58]
   1f969:	mov    r8,rax
   1f96c:	test   r9,r9
   1f96f:	je     1f9c5 <__sprintf_chk@plt+0x1bce5>
   1f971:	test   rax,rax
   1f974:	mov    r10d,DWORD PTR [rsp+0x7c]
   1f979:	je     1f9c5 <__sprintf_chk@plt+0x1bce5>
   1f97b:	mov    QWORD PTR [r12+0x10],rax
   1f980:	mov    rax,QWORD PTR [r12+0x40]
   1f985:	mov    QWORD PTR [r12+0x8],r9
   1f98a:	jmp    1f55d <__sprintf_chk@plt+0x1b87d>
   1f98f:	test   ecx,ecx
   1f991:	je     1f99c <__sprintf_chk@plt+0x1bcbc>
   1f993:	cmp    ecx,0x3
   1f996:	jne    1f517 <__sprintf_chk@plt+0x1b837>
   1f99c:	test   BYTE PTR [rsp+0x68],0x1
   1f9a1:	je     1f573 <__sprintf_chk@plt+0x1b893>
   1f9a7:	cmp    r15d,r10d
   1f9aa:	jae    1f573 <__sprintf_chk@plt+0x1b893>
   1f9b0:	mov    rax,QWORD PTR [rsp+0x30]
   1f9b5:	mov    rbp,QWORD PTR [rsp+0x10]
   1f9ba:	mov    DWORD PTR [rax],0xb
   1f9c0:	jmp    1f29d <__sprintf_chk@plt+0x1b5bd>
   1f9c5:	mov    rdi,r9
   1f9c8:	mov    rbp,QWORD PTR [rsp+0x10]
   1f9cd:	mov    QWORD PTR [rsp+0x10],r8
   1f9d2:	call   3680 <free@plt>
   1f9d7:	mov    r8,QWORD PTR [rsp+0x10]
   1f9dc:	mov    rdi,r8
   1f9df:	call   3680 <free@plt>
   1f9e4:	mov    rax,QWORD PTR [rsp+0x30]
   1f9e9:	mov    DWORD PTR [rax],0xc
   1f9ef:	jmp    1f29d <__sprintf_chk@plt+0x1b5bd>
   1f9f4:	nop    DWORD PTR [rax+0x0]
   1f9f8:	mov    r10d,DWORD PTR [rsp+0x98]
   1fa00:	test   r12,r12
   1fa03:	je     1f51f <__sprintf_chk@plt+0x1b83f>
   1fa09:	mov    edi,r15d
   1fa0c:	mov    DWORD PTR [rsp+0x58],r10d
   1fa11:	call   3b70 <btowc@plt>
   1fa16:	mov    r10d,DWORD PTR [rsp+0x58]
   1fa1b:	mov    r15d,eax
   1fa1e:	jmp    1f51f <__sprintf_chk@plt+0x1b83f>
   1fa23:	test   al,al
   1fa25:	jne    1fabf <__sprintf_chk@plt+0x1bddf>
   1fa2b:	mov    r10d,DWORD PTR [rsp+0x98]
   1fa33:	jmp    1f517 <__sprintf_chk@plt+0x1b837>
   1fa38:	mov    rdi,QWORD PTR [rsp+0xa8]
   1fa40:	mov    DWORD PTR [rsp+0x7c],ecx
   1fa44:	mov    QWORD PTR [rsp+0x70],rdi
   1fa49:	call   3810 <strlen@plt>
   1fa4e:	cmp    rax,0x1
   1fa52:	ja     1f608 <__sprintf_chk@plt+0x1b928>
   1fa58:	xor    r10d,r10d
   1fa5b:	test   r15d,r15d
   1fa5e:	movzx  eax,BYTE PTR [rsp+0x58]
   1fa63:	mov    ecx,DWORD PTR [rsp+0x7c]
   1fa67:	mov    rdi,QWORD PTR [rsp+0x70]
   1fa6c:	jne    1f4df <__sprintf_chk@plt+0x1b7ff>
   1fa72:	jmp    1f4b3 <__sprintf_chk@plt+0x1b7d3>
   1fa77:	mov    rbp,QWORD PTR [rsp+0x10]
   1fa7c:	jmp    1f742 <__sprintf_chk@plt+0x1ba62>
   1fa81:	mov    rax,QWORD PTR [rsp+0x98]
   1fa89:	mov    DWORD PTR [rsp+0x7c],ecx
   1fa8d:	mov    rdi,rax
   1fa90:	mov    QWORD PTR [rsp+0x70],rax
   1fa95:	call   3810 <strlen@plt>
   1fa9a:	mov    ecx,DWORD PTR [rsp+0x7c]
   1fa9e:	cmp    rax,0x1
   1faa2:	ja     1f608 <__sprintf_chk@plt+0x1b928>
   1faa8:	cmp    ecx,0x3
   1faab:	je     1f5e9 <__sprintf_chk@plt+0x1b909>
   1fab1:	mov    rax,QWORD PTR [rsp+0x70]
   1fab6:	movzx  r10d,BYTE PTR [rax]
   1faba:	jmp    1f4bc <__sprintf_chk@plt+0x1b7dc>
   1fabf:	test   r12,r12
   1fac2:	je     1f517 <__sprintf_chk@plt+0x1b837>
   1fac8:	xor    r15d,r15d
   1facb:	jmp    1f4f4 <__sprintf_chk@plt+0x1b814>
   1fad0:	push   r15
   1fad2:	push   r14
   1fad4:	mov    r14,r9
   1fad7:	push   r13
   1fad9:	mov    r13,rcx
   1fadc:	push   r12
   1fade:	mov    r12,rdx
   1fae1:	push   rbp
   1fae2:	mov    rbp,r8
   1fae5:	push   rbx
   1fae6:	mov    rbx,rsi
   1fae9:	sub    rsp,0x58
   1faed:	mov    QWORD PTR [rsp+0x8],rdi
   1faf2:	mov    rax,QWORD PTR fs:0x28
   1fafb:	mov    QWORD PTR [rsp+0x48],rax
   1fb00:	mov    rax,QWORD PTR [rsi]
   1fb03:	mov    QWORD PTR [rsp+0x20],rax
   1fb08:	call   1e450 <__sprintf_chk@plt+0x1a770>
   1fb0d:	mov    edx,DWORD PTR [r14]
   1fb10:	mov    r15,rax
   1fb13:	test   edx,edx
   1fb15:	je     1fb20 <__sprintf_chk@plt+0x1be40>
   1fb17:	test   rax,rax
   1fb1a:	je     1fc77 <__sprintf_chk@plt+0x1bf97>
   1fb20:	movzx  eax,BYTE PTR [r12+0x8]
   1fb26:	mov    edx,eax
   1fb28:	and    edx,0xfffffff7
   1fb2b:	cmp    dl,0x2
   1fb2e:	je     1fc02 <__sprintf_chk@plt+0x1bf22>
   1fb34:	lea    rcx,[rsp+0x30]
   1fb39:	test   rbp,rbp
   1fb3c:	mov    QWORD PTR [rsp+0x28],rcx
   1fb41:	mov    rcx,r14
   1fb44:	mov    r14,r15
   1fb47:	mov    r15,r12
   1fb4a:	sete   BYTE PTR [rsp+0x1f]
   1fb4f:	mov    r12,rbp
   1fb52:	mov    rbp,rbx
   1fb55:	mov    rbx,rcx
   1fb58:	jmp    1fbae <__sprintf_chk@plt+0x1bece>
   1fb5a:	nop    WORD PTR [rax+rax*1+0x0]
   1fb60:	test   rdx,rdx
   1fb63:	je     1fbe9 <__sprintf_chk@plt+0x1bf09>
   1fb69:	mov    rcx,QWORD PTR [rsp+0x28]
   1fb6e:	mov    rdi,QWORD PTR [rsp+0x20]
   1fb73:	pxor   xmm0,xmm0
   1fb77:	mov    rsi,r14
   1fb7a:	mov    QWORD PTR [rsp+0x10],rdx
   1fb7f:	movups XMMWORD PTR [rsp+0x30],xmm0
   1fb84:	mov    BYTE PTR [rsp+0x38],0x10
   1fb89:	call   12b00 <__sprintf_chk@plt+0xee20>
   1fb8e:	mov    rdx,QWORD PTR [rsp+0x10]
   1fb93:	test   rax,rax
   1fb96:	je     1fc7c <__sprintf_chk@plt+0x1bf9c>
   1fb9c:	mov    r14,rax
   1fb9f:	movzx  eax,BYTE PTR [r15+0x8]
   1fba4:	mov    edx,eax
   1fba6:	and    edx,0xfffffff7
   1fba9:	cmp    dl,0x2
   1fbac:	je     1fbff <__sprintf_chk@plt+0x1bf1f>
   1fbae:	cmp    al,0x9
   1fbb0:	jne    1fbb9 <__sprintf_chk@plt+0x1bed9>
   1fbb2:	cmp    BYTE PTR [rsp+0x1f],0x0
   1fbb7:	je     1fbff <__sprintf_chk@plt+0x1bf1f>
   1fbb9:	mov    rdi,QWORD PTR [rsp+0x8]
   1fbbe:	mov    rdx,r15
   1fbc1:	mov    r9,rbx
   1fbc4:	mov    r8,r12
   1fbc7:	mov    rcx,r13
   1fbca:	mov    rsi,rbp
   1fbcd:	call   1e450 <__sprintf_chk@plt+0x1a770>
   1fbd2:	mov    rdx,rax
   1fbd5:	mov    eax,DWORD PTR [rbx]
   1fbd7:	test   eax,eax
   1fbd9:	je     1fbe0 <__sprintf_chk@plt+0x1bf00>
   1fbdb:	test   rdx,rdx
   1fbde:	je     1fc28 <__sprintf_chk@plt+0x1bf48>
   1fbe0:	test   r14,r14
   1fbe3:	jne    1fb60 <__sprintf_chk@plt+0x1be80>
   1fbe9:	movzx  eax,BYTE PTR [r15+0x8]
   1fbee:	test   r14,r14
   1fbf1:	cmove  r14,rdx
   1fbf5:	mov    edx,eax
   1fbf7:	and    edx,0xfffffff7
   1fbfa:	cmp    dl,0x2
   1fbfd:	jne    1fbae <__sprintf_chk@plt+0x1bece>
   1fbff:	mov    r15,r14
   1fc02:	mov    rax,QWORD PTR [rsp+0x48]
   1fc07:	sub    rax,QWORD PTR fs:0x28
   1fc10:	jne    1fd28 <__sprintf_chk@plt+0x1c048>
   1fc16:	add    rsp,0x58
   1fc1a:	mov    rax,r15
   1fc1d:	pop    rbx
   1fc1e:	pop    rbp
   1fc1f:	pop    r12
   1fc21:	pop    r13
   1fc23:	pop    r14
   1fc25:	pop    r15
   1fc27:	ret    
   1fc28:	mov    r15,r14
   1fc2b:	test   r14,r14
   1fc2e:	je     1fc77 <__sprintf_chk@plt+0x1bf97>
   1fc30:	mov    rbx,r15
   1fc33:	mov    r15,QWORD PTR [r15+0x8]
   1fc37:	test   r15,r15
   1fc3a:	jne    1fc30 <__sprintf_chk@plt+0x1bf50>
   1fc3c:	mov    r15,QWORD PTR [rbx+0x10]
   1fc40:	test   r15,r15
   1fc43:	jne    1fc30 <__sprintf_chk@plt+0x1bf50>
   1fc45:	jmp    1fc69 <__sprintf_chk@plt+0x1bf89>
   1fc47:	nop    WORD PTR [rax+rax*1+0x0]
   1fc50:	mov    rax,QWORD PTR [rbx]
   1fc53:	test   rax,rax
   1fc56:	je     1fc77 <__sprintf_chk@plt+0x1bf97>
   1fc58:	mov    r15,QWORD PTR [rax+0x10]
   1fc5c:	test   r15,r15
   1fc5f:	je     1fc66 <__sprintf_chk@plt+0x1bf86>
   1fc61:	cmp    rbx,r15
   1fc64:	jne    1fc30 <__sprintf_chk@plt+0x1bf50>
   1fc66:	mov    rbx,rax
   1fc69:	xor    edi,edi
   1fc6b:	mov    rsi,rbx
   1fc6e:	call   18ba0 <__sprintf_chk@plt+0x14ec0>
   1fc73:	test   eax,eax
   1fc75:	je     1fc50 <__sprintf_chk@plt+0x1bf70>
   1fc77:	xor    r15d,r15d
   1fc7a:	jmp    1fc02 <__sprintf_chk@plt+0x1bf22>
   1fc7c:	mov    r15,r14
   1fc7f:	mov    r14,rbx
   1fc82:	nop    WORD PTR [rax+rax*1+0x0]
   1fc88:	mov    rbx,rdx
   1fc8b:	mov    rdx,QWORD PTR [rdx+0x8]
   1fc8f:	test   rdx,rdx
   1fc92:	jne    1fc88 <__sprintf_chk@plt+0x1bfa8>
   1fc94:	mov    rdx,QWORD PTR [rbx+0x10]
   1fc98:	test   rdx,rdx
   1fc9b:	jne    1fc88 <__sprintf_chk@plt+0x1bfa8>
   1fc9d:	jmp    1fcb9 <__sprintf_chk@plt+0x1bfd9>
   1fc9f:	nop
   1fca0:	mov    rax,QWORD PTR [rbx]
   1fca3:	test   rax,rax
   1fca6:	je     1fcd0 <__sprintf_chk@plt+0x1bff0>
   1fca8:	mov    rdx,QWORD PTR [rax+0x10]
   1fcac:	test   rdx,rdx
   1fcaf:	je     1fcb6 <__sprintf_chk@plt+0x1bfd6>
   1fcb1:	cmp    rbx,rdx
   1fcb4:	jne    1fc88 <__sprintf_chk@plt+0x1bfa8>
   1fcb6:	mov    rbx,rax
   1fcb9:	xor    edi,edi
   1fcbb:	mov    rsi,rbx
   1fcbe:	call   18ba0 <__sprintf_chk@plt+0x14ec0>
   1fcc3:	test   eax,eax
   1fcc5:	je     1fca0 <__sprintf_chk@plt+0x1bfc0>
   1fcc7:	nop    WORD PTR [rax+rax*1+0x0]
   1fcd0:	mov    rbx,r15
   1fcd3:	mov    r15,QWORD PTR [r15+0x8]
   1fcd7:	test   r15,r15
   1fcda:	jne    1fcd0 <__sprintf_chk@plt+0x1bff0>
   1fcdc:	mov    r15,QWORD PTR [rbx+0x10]
   1fce0:	test   r15,r15
   1fce3:	jne    1fcd0 <__sprintf_chk@plt+0x1bff0>
   1fce5:	jmp    1fd09 <__sprintf_chk@plt+0x1c029>
   1fce7:	nop    WORD PTR [rax+rax*1+0x0]
   1fcf0:	mov    rax,QWORD PTR [rbx]
   1fcf3:	test   rax,rax
   1fcf6:	je     1fd17 <__sprintf_chk@plt+0x1c037>
   1fcf8:	mov    rdx,QWORD PTR [rax+0x10]
   1fcfc:	cmp    rbx,rdx
   1fcff:	je     1fd06 <__sprintf_chk@plt+0x1c026>
   1fd01:	test   rdx,rdx
   1fd04:	jne    1fd23 <__sprintf_chk@plt+0x1c043>
   1fd06:	mov    rbx,rax
   1fd09:	xor    edi,edi
   1fd0b:	mov    rsi,rbx
   1fd0e:	call   18ba0 <__sprintf_chk@plt+0x14ec0>
   1fd13:	test   eax,eax
   1fd15:	je     1fcf0 <__sprintf_chk@plt+0x1c010>
   1fd17:	mov    DWORD PTR [r14],0xc
   1fd1e:	jmp    1fc02 <__sprintf_chk@plt+0x1bf22>
   1fd23:	mov    r15,rdx
   1fd26:	jmp    1fcd0 <__sprintf_chk@plt+0x1bff0>
   1fd28:	call   3840 <__stack_chk_fail@plt>
   1fd2d:	nop    DWORD PTR [rax]
   1fd30:	endbr64 
   1fd34:	sub    rsp,0x8
   1fd38:	mov    rcx,QWORD PTR [rip+0xc5b9]        # 2c2f8 <stderr@@GLIBC_2.2.5+0x218>
   1fd3f:	mov    r8,rdi
   1fd42:	mov    rdi,rdx
   1fd45:	movzx  edx,BYTE PTR [rdx+0x38]
   1fd49:	mov    rax,rcx
   1fd4c:	shr    rax,0x19
   1fd50:	and    edx,0x6f
   1fd53:	and    eax,0x1
   1fd56:	shl    eax,0x4
   1fd59:	or     eax,0xffffff80
   1fd5c:	or     eax,edx
   1fd5e:	mov    rdx,rsi
   1fd61:	mov    rsi,r8
   1fd64:	mov    BYTE PTR [rdi+0x38],al
   1fd67:	call   1d1c0 <__sprintf_chk@plt+0x194e0>
   1fd6c:	test   eax,eax
   1fd6e:	je     1fd98 <__sprintf_chk@plt+0x1c0b8>
   1fd70:	lea    rdx,[rip+0x5649]        # 253c0 <__sprintf_chk@plt+0x216e0>
   1fd77:	cdqe   
   1fd79:	lea    rsi,[rip+0x56e0]        # 25460 <__sprintf_chk@plt+0x21780>
   1fd80:	xor    edi,edi
   1fd82:	add    rsi,QWORD PTR [rdx+rax*8]
   1fd86:	mov    edx,0x5
   1fd8b:	add    rsp,0x8
   1fd8f:	jmp    37f0 <dcgettext@plt>
   1fd94:	nop    DWORD PTR [rax+0x0]
   1fd98:	xor    eax,eax
   1fd9a:	add    rsp,0x8
   1fd9e:	ret    
   1fd9f:	nop
   1fda0:	endbr64 
   1fda4:	mov    rax,QWORD PTR [rip+0xc54d]        # 2c2f8 <stderr@@GLIBC_2.2.5+0x218>
   1fdab:	mov    QWORD PTR [rip+0xc546],rdi        # 2c2f8 <stderr@@GLIBC_2.2.5+0x218>
   1fdb2:	ret    
   1fdb3:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   1fdbe:	xchg   ax,ax
   1fdc0:	endbr64 
   1fdc4:	push   r12
   1fdc6:	xor    eax,eax
   1fdc8:	push   rbp
   1fdc9:	push   rbx
   1fdca:	mov    r12,QWORD PTR [rdi+0x20]
   1fdce:	mov    rbx,rdi
   1fdd1:	mov    rbp,QWORD PTR [rdi]
   1fdd4:	lea    rdi,[r12+0x8]
   1fdd9:	mov    rcx,r12
   1fddc:	mov    QWORD PTR [r12],0x0
   1fde4:	mov    rdx,r12
   1fde7:	mov    QWORD PTR [r12+0xf8],0x0
   1fdf3:	and    rdi,0xfffffffffffffff8
   1fdf7:	sub    rcx,rdi
   1fdfa:	add    ecx,0x100
   1fe00:	shr    ecx,0x3
   1fe03:	rep stos QWORD PTR es:[rdi],rax
   1fe06:	mov    rdi,rbx
   1fe09:	mov    rsi,QWORD PTR [rbp+0x48]
   1fe0d:	call   15340 <__sprintf_chk@plt+0x11660>
   1fe12:	mov    rsi,QWORD PTR [rbp+0x50]
   1fe16:	cmp    QWORD PTR [rbp+0x48],rsi
   1fe1a:	je     1fe2b <__sprintf_chk@plt+0x1c14b>
   1fe1c:	mov    rdx,r12
   1fe1f:	mov    rdi,rbx
   1fe22:	call   15340 <__sprintf_chk@plt+0x11660>
   1fe27:	mov    rsi,QWORD PTR [rbp+0x48]
   1fe2b:	mov    r8,QWORD PTR [rbp+0x58]
   1fe2f:	cmp    r8,rsi
   1fe32:	je     1fe46 <__sprintf_chk@plt+0x1c166>
   1fe34:	mov    rsi,r8
   1fe37:	mov    rdx,r12
   1fe3a:	mov    rdi,rbx
   1fe3d:	call   15340 <__sprintf_chk@plt+0x11660>
   1fe42:	mov    rsi,QWORD PTR [rbp+0x48]
   1fe46:	mov    r8,QWORD PTR [rbp+0x60]
   1fe4a:	cmp    r8,rsi
   1fe4d:	je     1fe5d <__sprintf_chk@plt+0x1c17d>
   1fe4f:	mov    rdx,r12
   1fe52:	mov    rsi,r8
   1fe55:	mov    rdi,rbx
   1fe58:	call   15340 <__sprintf_chk@plt+0x11660>
   1fe5d:	or     BYTE PTR [rbx+0x38],0x8
   1fe61:	xor    eax,eax
   1fe63:	pop    rbx
   1fe64:	pop    rbp
   1fe65:	pop    r12
   1fe67:	ret    
   1fe68:	nop    DWORD PTR [rax+rax*1+0x0]
   1fe70:	push   r15
   1fe72:	mov    rax,r8
   1fe75:	add    r8,rcx
   1fe78:	push   r14
   1fe7a:	push   r13
   1fe7c:	push   r12
   1fe7e:	push   rbp
   1fe7f:	push   rbx
   1fe80:	sub    rsp,0x38
   1fe84:	mov    ebx,DWORD PTR [rsp+0x78]
   1fe88:	mov    r13,QWORD PTR [rsp+0x70]
   1fe8d:	mov    DWORD PTR [rsp+0x4],ebx
   1fe91:	test   rcx,rcx
   1fe94:	js     20190 <__sprintf_chk@plt+0x1c4b0>
   1fe9a:	mov    r12,rcx
   1fe9d:	cmp    rcx,rdx
   1fea0:	jg     20190 <__sprintf_chk@plt+0x1c4b0>
   1fea6:	mov    r14,rdi
   1fea9:	cmp    r8,rdx
   1feac:	jg     20110 <__sprintf_chk@plt+0x1c430>
   1feb2:	test   rax,rax
   1feb5:	js     1fec0 <__sprintf_chk@plt+0x1c1e0>
   1feb7:	cmp    rcx,r8
   1feba:	jg     20110 <__sprintf_chk@plt+0x1c430>
   1fec0:	test   r8,r8
   1fec3:	js     20170 <__sprintf_chk@plt+0x1c490>
   1fec9:	test   rax,rax
   1fecc:	jns    1fed7 <__sprintf_chk@plt+0x1c1f7>
   1fece:	cmp    r12,r8
   1fed1:	jle    20170 <__sprintf_chk@plt+0x1c490>
   1fed7:	movzx  eax,BYTE PTR [r14+0x38]
   1fedc:	mov    r15d,eax
   1fedf:	shr    r15b,0x5
   1fee3:	and    r15d,0x3
   1fee7:	cmp    r8,r12
   1feea:	jle    1fefb <__sprintf_chk@plt+0x1c21b>
   1feec:	cmp    QWORD PTR [r14+0x20],0x0
   1fef1:	je     1fefb <__sprintf_chk@plt+0x1c21b>
   1fef3:	test   al,0x8
   1fef5:	je     200d0 <__sprintf_chk@plt+0x1c3f0>
   1fefb:	test   al,0x10
   1fefd:	jne    200b8 <__sprintf_chk@plt+0x1c3d8>
   1ff03:	test   r13,r13
   1ff06:	je     200b8 <__sprintf_chk@plt+0x1c3d8>
   1ff0c:	and    eax,0x6
   1ff0f:	mov    rdi,QWORD PTR [r14+0x30]
   1ff13:	cmp    al,0x4
   1ff15:	je     20098 <__sprintf_chk@plt+0x1c3b8>
   1ff1b:	lea    rcx,[rdi+0x1]
   1ff1f:	mov    rbx,rcx
   1ff22:	mov    rdi,rcx
   1ff25:	shl    rdi,0x4
   1ff29:	mov    QWORD PTR [rsp+0x28],r9
   1ff2e:	mov    QWORD PTR [rsp+0x20],rdx
   1ff33:	mov    QWORD PTR [rsp+0x18],rsi
   1ff38:	mov    QWORD PTR [rsp+0x10],r8
   1ff3d:	mov    QWORD PTR [rsp+0x8],rcx
   1ff42:	call   3a70 <malloc@plt>
   1ff47:	mov    rbp,rax
   1ff4a:	test   rax,rax
   1ff4d:	je     201a0 <__sprintf_chk@plt+0x1c4c0>
   1ff53:	sub    rsp,0x8
   1ff57:	mov    rdi,r14
   1ff5a:	push   r15
   1ff5c:	push   rax
   1ff5d:	mov    rcx,QWORD PTR [rsp+0x20]
   1ff62:	push   rcx
   1ff63:	mov    r9,QWORD PTR [rsp+0x48]
   1ff68:	mov    rcx,r12
   1ff6b:	mov    r8,QWORD PTR [rsp+0x30]
   1ff70:	mov    rdx,QWORD PTR [rsp+0x40]
   1ff75:	mov    rsi,QWORD PTR [rsp+0x38]
   1ff7a:	call   1b900 <__sprintf_chk@plt+0x17c20>
   1ff7f:	add    rsp,0x20
   1ff83:	test   eax,eax
   1ff85:	je     1ffb8 <__sprintf_chk@plt+0x1c2d8>
   1ff87:	mov    r12,0xffffffffffffffff
   1ff8e:	cmp    eax,0x1
   1ff91:	je     1ff9a <__sprintf_chk@plt+0x1c2ba>
   1ff93:	mov    r12,0xfffffffffffffffe
   1ff9a:	mov    rdi,rbp
   1ff9d:	call   3680 <free@plt>
   1ffa2:	add    rsp,0x38
   1ffa6:	mov    rax,r12
   1ffa9:	pop    rbx
   1ffaa:	pop    rbp
   1ffab:	pop    r12
   1ffad:	pop    r13
   1ffaf:	pop    r14
   1ffb1:	pop    r15
   1ffb3:	ret    
   1ffb4:	nop    DWORD PTR [rax+0x0]
   1ffb8:	test   r13,r13
   1ffbb:	je     20073 <__sprintf_chk@plt+0x1c393>
   1ffc1:	movzx  eax,BYTE PTR [r14+0x38]
   1ffc6:	lea    r15,[rbx+0x1]
   1ffca:	shr    al,1
   1ffcc:	and    eax,0x3
   1ffcf:	je     20120 <__sprintf_chk@plt+0x1c440>
   1ffd5:	mov    r12d,0x2
   1ffdb:	cmp    eax,0x1
   1ffde:	je     201b0 <__sprintf_chk@plt+0x1c4d0>
   1ffe4:	test   rbx,rbx
   1ffe7:	jle    20210 <__sprintf_chk@plt+0x1c530>
   1ffed:	mov    r8,QWORD PTR [r13+0x8]
   1fff1:	mov    rdi,QWORD PTR [r13+0x10]
   1fff5:	mov    rdx,rbx
   1fff8:	xor    eax,eax
   1fffa:	lea    rsi,[rbx*8+0x0]
   20002:	nop    WORD PTR [rax+rax*1+0x0]
   20008:	mov    rcx,QWORD PTR [rbp+rax*2+0x0]
   2000d:	mov    QWORD PTR [r8+rax*1],rcx
   20011:	mov    rcx,QWORD PTR [rbp+rax*2+0x8]
   20016:	mov    QWORD PTR [rdi+rax*1],rcx
   2001a:	add    rax,0x8
   2001e:	cmp    rax,rsi
   20021:	jne    20008 <__sprintf_chk@plt+0x1c328>
   20023:	cmp    QWORD PTR [r13+0x0],rdx
   20027:	jbe    20055 <__sprintf_chk@plt+0x1c375>
   20029:	mov    rcx,QWORD PTR [r13+0x10]
   2002d:	mov    rax,QWORD PTR [r13+0x8]
   20031:	nop    DWORD PTR [rax+0x0]
   20038:	add    rbx,0x1
   2003c:	mov    QWORD PTR [rcx+rdx*8],0xffffffffffffffff
   20044:	mov    QWORD PTR [rax+rdx*8],0xffffffffffffffff
   2004c:	mov    rdx,rbx
   2004f:	cmp    QWORD PTR [r13+0x0],rbx
   20053:	ja     20038 <__sprintf_chk@plt+0x1c358>
   20055:	lea    eax,[r12+r12*1]
   20059:	movzx  r12d,BYTE PTR [r14+0x38]
   2005e:	and    r12d,0xfffffff9
   20062:	or     r12d,eax
   20065:	mov    BYTE PTR [r14+0x38],r12b
   20069:	and    r12d,0x6
   2006d:	je     1ff93 <__sprintf_chk@plt+0x1c2b3>
   20073:	cmp    BYTE PTR [rsp+0x4],0x0
   20078:	mov    r12,QWORD PTR [rbp+0x0]
   2007c:	je     1ff9a <__sprintf_chk@plt+0x1c2ba>
   20082:	mov    rax,QWORD PTR [rbp+0x8]
   20086:	sub    rax,r12
   20089:	mov    r12,rax
   2008c:	jmp    1ff9a <__sprintf_chk@plt+0x1c2ba>
   20091:	nop    DWORD PTR [rax+0x0]
   20098:	mov    rcx,QWORD PTR [r13+0x0]
   2009c:	cmp    rcx,rdi
   2009f:	ja     1ff1b <__sprintf_chk@plt+0x1c23b>
   200a5:	mov    rbx,rcx
   200a8:	test   rcx,rcx
   200ab:	jg     1ff22 <__sprintf_chk@plt+0x1c242>
   200b1:	nop    DWORD PTR [rax+0x0]
   200b8:	mov    edi,0x10
   200bd:	mov    ecx,0x1
   200c2:	mov    ebx,0x1
   200c7:	xor    r13d,r13d
   200ca:	jmp    1ff29 <__sprintf_chk@plt+0x1c249>
   200cf:	nop
   200d0:	mov    rdi,r14
   200d3:	mov    QWORD PTR [rsp+0x20],r9
   200d8:	mov    QWORD PTR [rsp+0x18],rdx
   200dd:	mov    QWORD PTR [rsp+0x10],rsi
   200e2:	mov    QWORD PTR [rsp+0x8],r8
   200e7:	call   1fdc0 <__sprintf_chk@plt+0x1c0e0>
   200ec:	movzx  eax,BYTE PTR [r14+0x38]
   200f1:	mov    r9,QWORD PTR [rsp+0x20]
   200f6:	mov    rdx,QWORD PTR [rsp+0x18]
   200fb:	mov    rsi,QWORD PTR [rsp+0x10]
   20100:	mov    r8,QWORD PTR [rsp+0x8]
   20105:	jmp    1fefb <__sprintf_chk@plt+0x1c21b>
   2010a:	nop    WORD PTR [rax+rax*1+0x0]
   20110:	mov    r8,rdx
   20113:	jmp    1fed7 <__sprintf_chk@plt+0x1c1f7>
   20118:	nop    DWORD PTR [rax+rax*1+0x0]
   20120:	lea    rdi,[r15*8+0x0]
   20128:	mov    QWORD PTR [rsp+0x8],rdi
   2012d:	call   3a70 <malloc@plt>
   20132:	mov    rdi,QWORD PTR [rsp+0x8]
   20137:	test   rax,rax
   2013a:	mov    QWORD PTR [r13+0x8],rax
   2013e:	mov    r12,rax
   20141:	je     20221 <__sprintf_chk@plt+0x1c541>
   20147:	call   3a70 <malloc@plt>
   2014c:	mov    QWORD PTR [r13+0x10],rax
   20150:	test   rax,rax
   20153:	je     20219 <__sprintf_chk@plt+0x1c539>
   20159:	mov    QWORD PTR [r13+0x0],r15
   2015d:	mov    r12d,0x1
   20163:	jmp    1ffe4 <__sprintf_chk@plt+0x1c304>
   20168:	nop    DWORD PTR [rax+rax*1+0x0]
   20170:	movzx  eax,BYTE PTR [r14+0x38]
   20175:	xor    r8d,r8d
   20178:	mov    r15d,eax
   2017b:	shr    r15b,0x5
   2017f:	and    r15d,0x3
   20183:	jmp    1fefb <__sprintf_chk@plt+0x1c21b>
   20188:	nop    DWORD PTR [rax+rax*1+0x0]
   20190:	mov    r12,0xffffffffffffffff
   20197:	jmp    1ffa2 <__sprintf_chk@plt+0x1c2c2>
   2019c:	nop    DWORD PTR [rax+0x0]
   201a0:	mov    r12,0xfffffffffffffffe
   201a7:	jmp    1ffa2 <__sprintf_chk@plt+0x1c2c2>
   201ac:	nop    DWORD PTR [rax+0x0]
   201b0:	mov    r12d,0x1
   201b6:	cmp    QWORD PTR [r13+0x0],r15
   201ba:	jae    1ffe4 <__sprintf_chk@plt+0x1c304>
   201c0:	mov    rdi,QWORD PTR [r13+0x8]
   201c4:	lea    rsi,[r15*8+0x0]
   201cc:	mov    QWORD PTR [rsp+0x10],rsi
   201d1:	call   3b20 <realloc@plt>
   201d6:	test   rax,rax
   201d9:	mov    QWORD PTR [rsp+0x8],rax
   201de:	je     20221 <__sprintf_chk@plt+0x1c541>
   201e0:	mov    rdi,QWORD PTR [r13+0x10]
   201e4:	mov    rsi,QWORD PTR [rsp+0x10]
   201e9:	call   3b20 <realloc@plt>
   201ee:	mov    r8,QWORD PTR [rsp+0x8]
   201f3:	test   rax,rax
   201f6:	je     20229 <__sprintf_chk@plt+0x1c549>
   201f8:	mov    QWORD PTR [r13+0x8],r8
   201fc:	mov    QWORD PTR [r13+0x10],rax
   20200:	mov    QWORD PTR [r13+0x0],r15
   20204:	jmp    1ffe4 <__sprintf_chk@plt+0x1c304>
   20209:	nop    DWORD PTR [rax+0x0]
   20210:	xor    edx,edx
   20212:	xor    ebx,ebx
   20214:	jmp    20023 <__sprintf_chk@plt+0x1c343>
   20219:	mov    rdi,r12
   2021c:	call   3680 <free@plt>
   20221:	xor    r12d,r12d
   20224:	jmp    20055 <__sprintf_chk@plt+0x1c375>
   20229:	mov    rdi,r8
   2022c:	xor    r12d,r12d
   2022f:	call   3680 <free@plt>
   20234:	jmp    20055 <__sprintf_chk@plt+0x1c375>
   20239:	nop    DWORD PTR [rax+0x0]
   20240:	endbr64 
   20244:	mov    eax,edx
   20246:	push   r14
   20248:	mov    r14,rsi
   2024b:	push   r13
   2024d:	and    eax,0x1
   20250:	push   r12
   20252:	cmp    eax,0x1
   20255:	push   rbp
   20256:	sbb    r13,r13
   20259:	mov    rbp,rdi
   2025c:	push   rbx
   2025d:	and    r13d,0xfd4fca
   20264:	mov    ebx,edx
   20266:	mov    QWORD PTR [rdi],0x0
   2026d:	add    r13,0x3b2fc
   20274:	mov    QWORD PTR [rdi+0x8],0x0
   2027c:	mov    QWORD PTR [rdi+0x10],0x0
   20284:	mov    edi,0x100
   20289:	call   3a70 <malloc@plt>
   2028e:	mov    QWORD PTR [rbp+0x20],rax
   20292:	test   rax,rax
   20295:	je     20348 <__sprintf_chk@plt+0x1c668>
   2029b:	mov    r12,rbx
   2029e:	xor    eax,eax
   202a0:	shl    r12,0x15
   202a4:	and    r12d,0x400000
   202ab:	or     r12,r13
   202ae:	test   bl,0x4
   202b1:	jne    20310 <__sprintf_chk@plt+0x1c630>
   202b3:	shr    ebx,0x3
   202b6:	shl    eax,0x7
   202b9:	mov    QWORD PTR [rbp+0x28],0x0
   202c1:	mov    rdi,r14
   202c4:	and    ebx,0x1
   202c7:	shl    ebx,0x4
   202ca:	or     ebx,eax
   202cc:	movzx  eax,BYTE PTR [rbp+0x38]
   202d0:	and    eax,0x6f
   202d3:	or     ebx,eax
   202d5:	mov    BYTE PTR [rbp+0x38],bl
   202d8:	call   3810 <strlen@plt>
   202dd:	mov    rcx,r12
   202e0:	mov    rsi,r14
   202e3:	mov    rdi,rbp
   202e6:	mov    rdx,rax
   202e9:	call   1d1c0 <__sprintf_chk@plt+0x194e0>
   202ee:	mov    r12d,eax
   202f1:	cmp    eax,0x10
   202f4:	je     20328 <__sprintf_chk@plt+0x1c648>
   202f6:	test   eax,eax
   202f8:	jne    2032e <__sprintf_chk@plt+0x1c64e>
   202fa:	mov    rdi,rbp
   202fd:	call   1fdc0 <__sprintf_chk@plt+0x1c0e0>
   20302:	pop    rbx
   20303:	mov    eax,r12d
   20306:	pop    rbp
   20307:	pop    r12
   20309:	pop    r13
   2030b:	pop    r14
   2030d:	ret    
   2030e:	xchg   ax,ax
   20310:	and    r12,0xffffffffffffffbf
   20314:	mov    eax,0x1
   20319:	or     r12,0x100
   20320:	jmp    202b3 <__sprintf_chk@plt+0x1c5d3>
   20322:	nop    WORD PTR [rax+rax*1+0x0]
   20328:	mov    r12d,0x8
   2032e:	mov    rdi,QWORD PTR [rbp+0x20]
   20332:	call   3680 <free@plt>
   20337:	mov    QWORD PTR [rbp+0x20],0x0
   2033f:	jmp    20302 <__sprintf_chk@plt+0x1c622>
   20341:	nop    DWORD PTR [rax+0x0]
   20348:	mov    r12d,0xc
   2034e:	pop    rbx
   2034f:	pop    rbp
   20350:	mov    eax,r12d
   20353:	pop    r12
   20355:	pop    r13
   20357:	pop    r14
   20359:	ret    
   2035a:	nop    WORD PTR [rax+rax*1+0x0]
   20360:	endbr64 
   20364:	push   r13
   20366:	push   r12
   20368:	push   rbp
   20369:	push   rbx
   2036a:	sub    rsp,0x8
   2036e:	cmp    edi,0x10
   20371:	ja     3d6d <__sprintf_chk@plt+0x8d>
   20377:	movsxd rdi,edi
   2037a:	lea    rax,[rip+0x503f]        # 253c0 <__sprintf_chk@plt+0x216e0>
   20381:	mov    r13,rdx
   20384:	mov    rbx,rcx
   20387:	mov    edx,0x5
   2038c:	lea    rsi,[rip+0x50cd]        # 25460 <__sprintf_chk@plt+0x21780>
   20393:	add    rsi,QWORD PTR [rax+rdi*8]
   20397:	xor    edi,edi
   20399:	call   37f0 <dcgettext@plt>
   2039e:	mov    rdi,rax
   203a1:	mov    rbp,rax
   203a4:	call   3810 <strlen@plt>
   203a9:	lea    r12,[rax+0x1]
   203ad:	test   rbx,rbx
   203b0:	je     203c5 <__sprintf_chk@plt+0x1c6e5>
   203b2:	mov    rdx,r12
   203b5:	cmp    r12,rbx
   203b8:	ja     203d8 <__sprintf_chk@plt+0x1c6f8>
   203ba:	mov    rsi,rbp
   203bd:	mov    rdi,r13
   203c0:	call   3a00 <memcpy@plt>
   203c5:	add    rsp,0x8
   203c9:	mov    rax,r12
   203cc:	pop    rbx
   203cd:	pop    rbp
   203ce:	pop    r12
   203d0:	pop    r13
   203d2:	ret    
   203d3:	nop    DWORD PTR [rax+rax*1+0x0]
   203d8:	mov    BYTE PTR [r13+rbx*1-0x1],0x0
   203de:	lea    rdx,[rbx-0x1]
   203e2:	jmp    203ba <__sprintf_chk@plt+0x1c6da>
   203e4:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   203ef:	nop
   203f0:	endbr64 
   203f4:	push   rbx
   203f5:	mov    rbx,rdi
   203f8:	mov    rdi,QWORD PTR [rdi]
   203fb:	test   rdi,rdi
   203fe:	je     20405 <__sprintf_chk@plt+0x1c725>
   20400:	call   189d0 <__sprintf_chk@plt+0x14cf0>
   20405:	mov    QWORD PTR [rbx],0x0
   2040c:	mov    rdi,QWORD PTR [rbx+0x20]
   20410:	mov    QWORD PTR [rbx+0x8],0x0
   20418:	call   3680 <free@plt>
   2041d:	mov    QWORD PTR [rbx+0x20],0x0
   20425:	mov    rdi,QWORD PTR [rbx+0x28]
   20429:	call   3680 <free@plt>
   2042e:	mov    QWORD PTR [rbx+0x28],0x0
   20436:	pop    rbx
   20437:	ret    
   20438:	nop    DWORD PTR [rax+rax*1+0x0]
   20440:	endbr64 
   20444:	test   r8d,0xfffffff8
   2044b:	jne    204d0 <__sprintf_chk@plt+0x1c7f0>
   20451:	push   r14
   20453:	mov    r14,rdx
   20456:	push   r13
   20458:	mov    r13,rcx
   2045b:	push   r12
   2045d:	mov    r12,rsi
   20460:	push   rbp
   20461:	mov    rbp,rdi
   20464:	push   rbx
   20465:	mov    ebx,r8d
   20468:	test   r8b,0x4
   2046c:	jne    204b0 <__sprintf_chk@plt+0x1c7d0>
   2046e:	mov    rdi,rsi
   20471:	call   3810 <strlen@plt>
   20476:	xor    ecx,ecx
   20478:	mov    rdx,rax
   2047b:	test   BYTE PTR [rbp+0x38],0x10
   2047f:	je     204bd <__sprintf_chk@plt+0x1c7dd>
   20481:	sub    rsp,0x8
   20485:	push   rbx
   20486:	push   0x0
   20488:	push   0x0
   2048a:	mov    rsi,r12
   2048d:	mov    rdi,rbp
   20490:	mov    r9,rdx
   20493:	mov    r8,rdx
   20496:	call   1b900 <__sprintf_chk@plt+0x17c20>
   2049b:	add    rsp,0x20
   2049f:	test   eax,eax
   204a1:	pop    rbx
   204a2:	pop    rbp
   204a3:	setne  al
   204a6:	pop    r12
   204a8:	pop    r13
   204aa:	movzx  eax,al
   204ad:	pop    r14
   204af:	ret    
   204b0:	mov    rcx,QWORD PTR [rcx]
   204b3:	mov    rdx,QWORD PTR [r13+0x8]
   204b7:	test   BYTE PTR [rbp+0x38],0x10
   204bb:	jne    20481 <__sprintf_chk@plt+0x1c7a1>
   204bd:	sub    rsp,0x8
   204c1:	push   rbx
   204c2:	push   r13
   204c4:	push   r14
   204c6:	jmp    2048a <__sprintf_chk@plt+0x1c7aa>
   204c8:	nop    DWORD PTR [rax+rax*1+0x0]
   204d0:	mov    eax,0x2
   204d5:	ret    
   204d6:	cs nop WORD PTR [rax+rax*1+0x0]
   204e0:	endbr64 
   204e4:	sub    rsp,0x8
   204e8:	mov    r9,rdx
   204eb:	push   0x1
   204ed:	push   r8
   204ef:	xor    r8d,r8d
   204f2:	call   1fe70 <__sprintf_chk@plt+0x1c190>
   204f7:	add    rsp,0x18
   204fb:	ret    
   204fc:	nop    DWORD PTR [rax+0x0]
   20500:	endbr64 
   20504:	sub    rsp,0x8
   20508:	push   0x0
   2050a:	push   r9
   2050c:	mov    r9,rdx
   2050f:	call   1fe70 <__sprintf_chk@plt+0x1c190>
   20514:	add    rsp,0x18
   20518:	ret    
   20519:	nop    DWORD PTR [rax+0x0]
   20520:	endbr64 
   20524:	push   r15
   20526:	push   r14
   20528:	mov    r14,r9
   2052b:	push   r13
   2052d:	push   r12
   2052f:	push   rbp
   20530:	mov    rbp,rcx
   20533:	push   rbx
   20534:	mov    rbx,rdx
   20537:	mov    rdx,r8
   2053a:	shr    rdx,0x3f
   2053e:	mov    ecx,edx
   20540:	sub    rsp,0x18
   20544:	mov    r9,QWORD PTR [rsp+0x58]
   20549:	mov    rax,r9
   2054c:	shr    rax,0x3f
   20550:	or     cl,al
   20552:	jne    20618 <__sprintf_chk@plt+0x1c938>
   20558:	test   rbx,rbx
   2055b:	js     20618 <__sprintf_chk@plt+0x1c938>
   20561:	mov    r10,rbx
   20564:	mov    r12,r8
   20567:	add    r10,r8
   2056a:	jo     20618 <__sprintf_chk@plt+0x1c938>
   20570:	mov    r13,rdi
   20573:	test   r8,r8
   20576:	je     20628 <__sprintf_chk@plt+0x1c948>
   2057c:	mov    QWORD PTR [rsp],rsi
   20580:	xor    r15d,r15d
   20583:	test   rbx,rbx
   20586:	jne    205c8 <__sprintf_chk@plt+0x1c8e8>
   20588:	push   0x1
   2058a:	mov    rdx,r10
   2058d:	xor    r8d,r8d
   20590:	mov    rcx,r14
   20593:	push   QWORD PTR [rsp+0x58]
   20597:	mov    rsi,rbp
   2059a:	mov    rdi,r13
   2059d:	call   1fe70 <__sprintf_chk@plt+0x1c190>
   205a2:	mov    rdi,r15
   205a5:	mov    r12,rax
   205a8:	call   3680 <free@plt>
   205ad:	pop    rax
   205ae:	pop    rdx
   205af:	add    rsp,0x18
   205b3:	mov    rax,r12
   205b6:	pop    rbx
   205b7:	pop    rbp
   205b8:	pop    r12
   205ba:	pop    r13
   205bc:	pop    r14
   205be:	pop    r15
   205c0:	ret    
   205c1:	nop    DWORD PTR [rax+0x0]
   205c8:	mov    rdi,r10
   205cb:	mov    QWORD PTR [rsp+0x58],r9
   205d0:	mov    QWORD PTR [rsp+0x8],r10
   205d5:	call   3a70 <malloc@plt>
   205da:	mov    r15,rax
   205dd:	test   rax,rax
   205e0:	je     20618 <__sprintf_chk@plt+0x1c938>
   205e2:	mov    rsi,QWORD PTR [rsp]
   205e6:	mov    rdx,rbx
   205e9:	mov    rdi,rax
   205ec:	call   3a00 <memcpy@plt>
   205f1:	mov    rsi,rbp
   205f4:	lea    rdi,[r15+rbx*1]
   205f8:	mov    rdx,r12
   205fb:	call   3a00 <memcpy@plt>
   20600:	mov    rbp,r15
   20603:	mov    r10,QWORD PTR [rsp+0x8]
   20608:	mov    r9,QWORD PTR [rsp+0x58]
   2060d:	jmp    20588 <__sprintf_chk@plt+0x1c8a8>
   20612:	nop    WORD PTR [rax+rax*1+0x0]
   20618:	mov    r12,0xfffffffffffffffe
   2061f:	jmp    205af <__sprintf_chk@plt+0x1c8cf>
   20621:	nop    DWORD PTR [rax+0x0]
   20628:	mov    rbp,rsi
   2062b:	xor    r15d,r15d
   2062e:	jmp    20588 <__sprintf_chk@plt+0x1c8a8>
   20633:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   2063e:	xchg   ax,ax
   20640:	endbr64 
   20644:	push   r15
   20646:	push   r14
   20648:	mov    r14,r9
   2064b:	push   r13
   2064d:	push   r12
   2064f:	push   rbp
   20650:	mov    rbp,rcx
   20653:	push   rbx
   20654:	mov    rbx,rdx
   20657:	mov    rdx,r8
   2065a:	shr    rdx,0x3f
   2065e:	mov    ecx,edx
   20660:	sub    rsp,0x18
   20664:	mov    r9,QWORD PTR [rsp+0x60]
   20669:	mov    rax,r9
   2066c:	shr    rax,0x3f
   20670:	or     cl,al
   20672:	jne    20738 <__sprintf_chk@plt+0x1ca58>
   20678:	test   rbx,rbx
   2067b:	js     20738 <__sprintf_chk@plt+0x1ca58>
   20681:	mov    r10,rbx
   20684:	mov    r12,r8
   20687:	add    r10,r8
   2068a:	jo     20738 <__sprintf_chk@plt+0x1ca58>
   20690:	mov    r13,rdi
   20693:	test   r8,r8
   20696:	je     20748 <__sprintf_chk@plt+0x1ca68>
   2069c:	mov    QWORD PTR [rsp],rsi
   206a0:	xor    r15d,r15d
   206a3:	test   rbx,rbx
   206a6:	jne    206e8 <__sprintf_chk@plt+0x1ca08>
   206a8:	push   0x0
   206aa:	mov    rdx,r10
   206ad:	mov    rcx,r14
   206b0:	mov    rsi,rbp
   206b3:	push   QWORD PTR [rsp+0x60]
   206b7:	mov    r8,QWORD PTR [rsp+0x60]
   206bc:	mov    rdi,r13
   206bf:	call   1fe70 <__sprintf_chk@plt+0x1c190>
   206c4:	mov    rdi,r15
   206c7:	mov    r12,rax
   206ca:	call   3680 <free@plt>
   206cf:	pop    rax
   206d0:	pop    rdx
   206d1:	add    rsp,0x18
   206d5:	mov    rax,r12
   206d8:	pop    rbx
   206d9:	pop    rbp
   206da:	pop    r12
   206dc:	pop    r13
   206de:	pop    r14
   206e0:	pop    r15
   206e2:	ret    
   206e3:	nop    DWORD PTR [rax+rax*1+0x0]
   206e8:	mov    rdi,r10
   206eb:	mov    QWORD PTR [rsp+0x60],r9
   206f0:	mov    QWORD PTR [rsp+0x8],r10
   206f5:	call   3a70 <malloc@plt>
   206fa:	mov    r15,rax
   206fd:	test   rax,rax
   20700:	je     20738 <__sprintf_chk@plt+0x1ca58>
   20702:	mov    rsi,QWORD PTR [rsp]
   20706:	mov    rdx,rbx
   20709:	mov    rdi,rax
   2070c:	call   3a00 <memcpy@plt>
   20711:	mov    rsi,rbp
   20714:	lea    rdi,[r15+rbx*1]
   20718:	mov    rdx,r12
   2071b:	call   3a00 <memcpy@plt>
   20720:	mov    rbp,r15
   20723:	mov    r10,QWORD PTR [rsp+0x8]
   20728:	mov    r9,QWORD PTR [rsp+0x60]
   2072d:	jmp    206a8 <__sprintf_chk@plt+0x1c9c8>
   20732:	nop    WORD PTR [rax+rax*1+0x0]
   20738:	mov    r12,0xfffffffffffffffe
   2073f:	jmp    206d1 <__sprintf_chk@plt+0x1c9f1>
   20741:	nop    DWORD PTR [rax+0x0]
   20748:	mov    rbp,rsi
   2074b:	xor    r15d,r15d
   2074e:	jmp    206a8 <__sprintf_chk@plt+0x1c9c8>
   20753:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   2075e:	xchg   ax,ax
   20760:	endbr64 
   20764:	test   rdx,rdx
   20767:	je     20788 <__sprintf_chk@plt+0x1caa8>
   20769:	movzx  eax,BYTE PTR [rdi+0x38]
   2076d:	and    eax,0xfffffff9
   20770:	or     eax,0x2
   20773:	mov    BYTE PTR [rdi+0x38],al
   20776:	mov    QWORD PTR [rsi],rdx
   20779:	mov    QWORD PTR [rsi+0x8],rcx
   2077d:	mov    QWORD PTR [rsi+0x10],r8
   20781:	ret    
   20782:	nop    WORD PTR [rax+rax*1+0x0]
   20788:	and    BYTE PTR [rdi+0x38],0xf9
   2078c:	mov    QWORD PTR [rsi],0x0
   20793:	mov    QWORD PTR [rsi+0x10],0x0
   2079b:	mov    QWORD PTR [rsi+0x8],0x0
   207a3:	ret    
   207a4:	cs nop WORD PTR [rax+rax*1+0x0]
   207ae:	xchg   ax,ax
   207b0:	push   r13
   207b2:	push   r12
   207b4:	push   rbp
   207b5:	push   rbx
   207b6:	mov    rbx,rdi
   207b9:	sub    rsp,0x8
   207bd:	call   36f0 <__errno_location@plt>
   207c2:	cmp    BYTE PTR [rbx+0x8],0x0
   207c6:	mov    r12d,DWORD PTR [rax]
   207c9:	mov    rbp,rax
   207cc:	jne    20810 <__sprintf_chk@plt+0x1cb30>
   207ce:	lea    rdi,[rip+0x196c]        # 22141 <__sprintf_chk@plt+0x1e461>
   207d5:	call   3bf0 <unsetenv@plt>
   207da:	test   eax,eax
   207dc:	je     20829 <__sprintf_chk@plt+0x1cb49>
   207de:	mov    r12d,DWORD PTR [rbp+0x0]
   207e2:	xor    r13d,r13d
   207e5:	nop    DWORD PTR [rax]
   207e8:	mov    rdi,rbx
   207eb:	mov    rbx,QWORD PTR [rbx]
   207ee:	call   3680 <free@plt>
   207f3:	test   rbx,rbx
   207f6:	jne    207e8 <__sprintf_chk@plt+0x1cb08>
   207f8:	mov    DWORD PTR [rbp+0x0],r12d
   207fc:	add    rsp,0x8
   20800:	mov    eax,r13d
   20803:	pop    rbx
   20804:	pop    rbp
   20805:	pop    r12
   20807:	pop    r13
   20809:	ret    
   2080a:	nop    WORD PTR [rax+rax*1+0x0]
   20810:	lea    rsi,[rbx+0x9]
   20814:	mov    edx,0x1
   20819:	lea    rdi,[rip+0x1921]        # 22141 <__sprintf_chk@plt+0x1e461>
   20820:	call   3790 <setenv@plt>
   20825:	test   eax,eax
   20827:	jne    207de <__sprintf_chk@plt+0x1cafe>
   20829:	call   3a10 <tzset@plt>
   2082e:	mov    r13d,0x1
   20834:	jmp    207e8 <__sprintf_chk@plt+0x1cb08>
   20836:	cs nop WORD PTR [rax+rax*1+0x0]
   20840:	endbr64 
   20844:	push   r12
   20846:	push   rbp
   20847:	push   rbx
   20848:	test   rdi,rdi
   2084b:	je     208b0 <__sprintf_chk@plt+0x1cbd0>
   2084d:	mov    rbp,rdi
   20850:	call   3810 <strlen@plt>
   20855:	mov    edi,0x76
   2085a:	lea    rbx,[rax+0x1]
   2085e:	cmp    rbx,0x76
   20862:	cmovae rdi,rbx
   20866:	add    rdi,0x11
   2086a:	and    rdi,0xfffffffffffffff8
   2086e:	call   3a70 <malloc@plt>
   20873:	mov    r12,rax
   20876:	test   rax,rax
   20879:	je     208a3 <__sprintf_chk@plt+0x1cbc3>
   2087b:	mov    QWORD PTR [rax],0x0
   20882:	mov    eax,0x1
   20887:	lea    rdi,[r12+0x9]
   2088c:	mov    rdx,rbx
   2088f:	mov    WORD PTR [r12+0x8],ax
   20895:	mov    rsi,rbp
   20898:	call   3a00 <memcpy@plt>
   2089d:	mov    BYTE PTR [r12+rbx*1+0x9],0x0
   208a3:	mov    rax,r12
   208a6:	pop    rbx
   208a7:	pop    rbp
   208a8:	pop    r12
   208aa:	ret    
   208ab:	nop    DWORD PTR [rax+rax*1+0x0]
   208b0:	mov    edi,0x80
   208b5:	call   3a70 <malloc@plt>
   208ba:	mov    r12,rax
   208bd:	test   rax,rax
   208c0:	je     208a3 <__sprintf_chk@plt+0x1cbc3>
   208c2:	xor    edx,edx
   208c4:	mov    QWORD PTR [r12],0x0
   208cc:	mov    rax,r12
   208cf:	mov    WORD PTR [r12+0x8],dx
   208d5:	pop    rbx
   208d6:	pop    rbp
   208d7:	pop    r12
   208d9:	ret    
   208da:	nop    WORD PTR [rax+rax*1+0x0]
   208e0:	push   r15
   208e2:	push   r14
   208e4:	push   r13
   208e6:	push   r12
   208e8:	push   rbp
   208e9:	push   rbx
   208ea:	sub    rsp,0x8
   208ee:	mov    r12,QWORD PTR [rsi+0x30]
   208f2:	test   r12,r12
   208f5:	je     209a0 <__sprintf_chk@plt+0x1ccc0>
   208fb:	mov    rbp,rdi
   208fe:	mov    r13,rsi
   20901:	cmp    rsi,r12
   20904:	ja     20914 <__sprintf_chk@plt+0x1cc34>
   20906:	lea    rdx,[rsi+0x38]
   2090a:	mov    eax,0x1
   2090f:	cmp    r12,rdx
   20912:	jb     20981 <__sprintf_chk@plt+0x1cca1>
   20914:	cmp    BYTE PTR [r12],0x0
   20919:	lea    rbx,[rbp+0x9]
   2091d:	je     20990 <__sprintf_chk@plt+0x1ccb0>
   2091f:	nop
   20920:	mov    rsi,r12
   20923:	mov    rdi,rbx
   20926:	call   39b0 <strcmp@plt>
   2092b:	test   eax,eax
   2092d:	je     20978 <__sprintf_chk@plt+0x1cc98>
   2092f:	cmp    BYTE PTR [rbx],0x0
   20932:	jne    20943 <__sprintf_chk@plt+0x1cc63>
   20934:	lea    r14,[rbp+0x9]
   20938:	cmp    r14,rbx
   2093b:	jne    209b8 <__sprintf_chk@plt+0x1ccd8>
   2093d:	cmp    BYTE PTR [rbp+0x8],0x0
   20941:	je     209b8 <__sprintf_chk@plt+0x1ccd8>
   20943:	mov    rdi,rbx
   20946:	call   3810 <strlen@plt>
   2094b:	lea    rbx,[rbx+rax*1+0x1]
   20950:	cmp    BYTE PTR [rbx],0x0
   20953:	jne    20920 <__sprintf_chk@plt+0x1cc40>
   20955:	mov    rax,QWORD PTR [rbp+0x0]
   20959:	test   rax,rax
   2095c:	je     20920 <__sprintf_chk@plt+0x1cc40>
   2095e:	lea    rbx,[rax+0x9]
   20962:	mov    rsi,r12
   20965:	mov    rbp,rax
   20968:	mov    rdi,rbx
   2096b:	call   39b0 <strcmp@plt>
   20970:	test   eax,eax
   20972:	jne    2092f <__sprintf_chk@plt+0x1cc4f>
   20974:	nop    DWORD PTR [rax+0x0]
   20978:	mov    QWORD PTR [r13+0x30],rbx
   2097c:	mov    eax,0x1
   20981:	add    rsp,0x8
   20985:	pop    rbx
   20986:	pop    rbp
   20987:	pop    r12
   20989:	pop    r13
   2098b:	pop    r14
   2098d:	pop    r15
   2098f:	ret    
   20990:	lea    rbx,[rip+0x3cca]        # 24661 <__sprintf_chk@plt+0x20981>
   20997:	jmp    20978 <__sprintf_chk@plt+0x1cc98>
   20999:	nop    DWORD PTR [rax+0x0]
   209a0:	add    rsp,0x8
   209a4:	mov    eax,0x1
   209a9:	pop    rbx
   209aa:	pop    rbp
   209ab:	pop    r12
   209ad:	pop    r13
   209af:	pop    r14
   209b1:	pop    r15
   209b3:	ret    
   209b4:	nop    DWORD PTR [rax+0x0]
   209b8:	mov    rdi,r12
   209bb:	call   3810 <strlen@plt>
   209c0:	mov    r15,rax
   209c3:	lea    rdx,[rax+0x1]
   209c7:	mov    rax,rbx
   209ca:	sub    rax,r14
   209cd:	mov    rcx,rax
   209d0:	not    rcx
   209d3:	cmp    rcx,rdx
   209d6:	jb     209f8 <__sprintf_chk@plt+0x1cd18>
   209d8:	add    rax,rdx
   209db:	cmp    rax,0x76
   209df:	ja     20a10 <__sprintf_chk@plt+0x1cd30>
   209e1:	mov    rsi,r12
   209e4:	mov    rdi,rbx
   209e7:	call   3a00 <memcpy@plt>
   209ec:	mov    BYTE PTR [rbx+r15*1+0x1],0x0
   209f2:	jmp    20978 <__sprintf_chk@plt+0x1cc98>
   209f4:	nop    DWORD PTR [rax+0x0]
   209f8:	call   36f0 <__errno_location@plt>
   209fd:	mov    DWORD PTR [rax],0xc
   20a03:	xor    eax,eax
   20a05:	jmp    20981 <__sprintf_chk@plt+0x1cca1>
   20a0a:	nop    WORD PTR [rax+rax*1+0x0]
   20a10:	mov    rdi,r12
   20a13:	call   20840 <__sprintf_chk@plt+0x1cb60>
   20a18:	mov    QWORD PTR [rbp+0x0],rax
   20a1c:	test   rax,rax
   20a1f:	je     20a2e <__sprintf_chk@plt+0x1cd4e>
   20a21:	mov    BYTE PTR [rax+0x8],0x0
   20a25:	lea    rbx,[rax+0x9]
   20a29:	jmp    20978 <__sprintf_chk@plt+0x1cc98>
   20a2e:	xor    eax,eax
   20a30:	jmp    20981 <__sprintf_chk@plt+0x1cca1>
   20a35:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   20a40:	push   r12
   20a42:	push   rbp
   20a43:	push   rbx
   20a44:	mov    rbx,rdi
   20a47:	lea    rdi,[rip+0x16f3]        # 22141 <__sprintf_chk@plt+0x1e461>
   20a4e:	call   36c0 <getenv@plt>
   20a53:	mov    rbp,rax
   20a56:	test   rax,rax
   20a59:	je     20ac0 <__sprintf_chk@plt+0x1cde0>
   20a5b:	cmp    BYTE PTR [rbx+0x8],0x0
   20a5f:	jne    20a98 <__sprintf_chk@plt+0x1cdb8>
   20a61:	mov    rdi,rbp
   20a64:	call   20840 <__sprintf_chk@plt+0x1cb60>
   20a69:	mov    r12,rax
   20a6c:	test   rax,rax
   20a6f:	je     20a8c <__sprintf_chk@plt+0x1cdac>
   20a71:	cmp    BYTE PTR [rbx+0x8],0x0
   20a75:	jne    20ad8 <__sprintf_chk@plt+0x1cdf8>
   20a77:	lea    rdi,[rip+0x16c3]        # 22141 <__sprintf_chk@plt+0x1e461>
   20a7e:	call   3bf0 <unsetenv@plt>
   20a83:	test   eax,eax
   20a85:	jne    20af1 <__sprintf_chk@plt+0x1ce11>
   20a87:	call   3a10 <tzset@plt>
   20a8c:	mov    rax,r12
   20a8f:	pop    rbx
   20a90:	pop    rbp
   20a91:	pop    r12
   20a93:	ret    
   20a94:	nop    DWORD PTR [rax+0x0]
   20a98:	lea    rdi,[rbx+0x9]
   20a9c:	mov    rsi,rax
   20a9f:	mov    r12d,0x1
   20aa5:	call   39b0 <strcmp@plt>
   20aaa:	test   eax,eax
   20aac:	jne    20a61 <__sprintf_chk@plt+0x1cd81>
   20aae:	mov    rax,r12
   20ab1:	pop    rbx
   20ab2:	pop    rbp
   20ab3:	pop    r12
   20ab5:	ret    
   20ab6:	cs nop WORD PTR [rax+rax*1+0x0]
   20ac0:	cmp    BYTE PTR [rbx+0x8],0x0
   20ac4:	mov    r12d,0x1
   20aca:	jne    20a61 <__sprintf_chk@plt+0x1cd81>
   20acc:	mov    rax,r12
   20acf:	pop    rbx
   20ad0:	pop    rbp
   20ad1:	pop    r12
   20ad3:	ret    
   20ad4:	nop    DWORD PTR [rax+0x0]
   20ad8:	lea    rsi,[rbx+0x9]
   20adc:	mov    edx,0x1
   20ae1:	lea    rdi,[rip+0x1659]        # 22141 <__sprintf_chk@plt+0x1e461>
   20ae8:	call   3790 <setenv@plt>
   20aed:	test   eax,eax
   20aef:	je     20a87 <__sprintf_chk@plt+0x1cda7>
   20af1:	call   36f0 <__errno_location@plt>
   20af6:	mov    ebx,DWORD PTR [rax]
   20af8:	mov    rbp,rax
   20afb:	cmp    r12,0x1
   20aff:	je     20b12 <__sprintf_chk@plt+0x1ce32>
   20b01:	mov    rdi,r12
   20b04:	mov    r12,QWORD PTR [r12]
   20b08:	call   3680 <free@plt>
   20b0d:	test   r12,r12
   20b10:	jne    20b01 <__sprintf_chk@plt+0x1ce21>
   20b12:	xor    r12d,r12d
   20b15:	mov    DWORD PTR [rbp+0x0],ebx
   20b18:	pop    rbx
   20b19:	mov    rax,r12
   20b1c:	pop    rbp
   20b1d:	pop    r12
   20b1f:	ret    
   20b20:	endbr64 
   20b24:	cmp    rdi,0x1
   20b28:	je     20b50 <__sprintf_chk@plt+0x1ce70>
   20b2a:	push   rbx
   20b2b:	mov    rbx,rdi
   20b2e:	test   rdi,rdi
   20b31:	je     20b48 <__sprintf_chk@plt+0x1ce68>
   20b33:	nop    DWORD PTR [rax+rax*1+0x0]
   20b38:	mov    rdi,rbx
   20b3b:	mov    rbx,QWORD PTR [rbx]
   20b3e:	call   3680 <free@plt>
   20b43:	test   rbx,rbx
   20b46:	jne    20b38 <__sprintf_chk@plt+0x1ce58>
   20b48:	pop    rbx
   20b49:	ret    
   20b4a:	nop    WORD PTR [rax+rax*1+0x0]
   20b50:	ret    
   20b51:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   20b5c:	nop    DWORD PTR [rax+0x0]
   20b60:	endbr64 
   20b64:	push   r14
   20b66:	mov    r14,rsi
   20b69:	push   r13
   20b6b:	push   r12
   20b6d:	push   rbp
   20b6e:	mov    rbp,rdx
   20b71:	sub    rsp,0x8
   20b75:	test   rdi,rdi
   20b78:	je     20bf0 <__sprintf_chk@plt+0x1cf10>
   20b7a:	mov    r12,rdi
   20b7d:	call   20a40 <__sprintf_chk@plt+0x1cd60>
   20b82:	mov    r13,rax
   20b85:	test   rax,rax
   20b88:	je     20bce <__sprintf_chk@plt+0x1ceee>
   20b8a:	mov    rsi,rbp
   20b8d:	mov    rdi,r14
   20b90:	call   3710 <localtime_r@plt>
   20b95:	test   rax,rax
   20b98:	je     20bc0 <__sprintf_chk@plt+0x1cee0>
   20b9a:	mov    rsi,rbp
   20b9d:	mov    rdi,r12
   20ba0:	call   208e0 <__sprintf_chk@plt+0x1cc00>
   20ba5:	test   al,al
   20ba7:	je     20bc0 <__sprintf_chk@plt+0x1cee0>
   20ba9:	cmp    r13,0x1
   20bad:	jne    20be0 <__sprintf_chk@plt+0x1cf00>
   20baf:	add    rsp,0x8
   20bb3:	mov    rax,rbp
   20bb6:	pop    rbp
   20bb7:	pop    r12
   20bb9:	pop    r13
   20bbb:	pop    r14
   20bbd:	ret    
   20bbe:	xchg   ax,ax
   20bc0:	cmp    r13,0x1
   20bc4:	je     20bce <__sprintf_chk@plt+0x1ceee>
   20bc6:	mov    rdi,r13
   20bc9:	call   207b0 <__sprintf_chk@plt+0x1cad0>
   20bce:	add    rsp,0x8
   20bd2:	xor    eax,eax
   20bd4:	pop    rbp
   20bd5:	pop    r12
   20bd7:	pop    r13
   20bd9:	pop    r14
   20bdb:	ret    
   20bdc:	nop    DWORD PTR [rax+0x0]
   20be0:	mov    rdi,r13
   20be3:	call   207b0 <__sprintf_chk@plt+0x1cad0>
   20be8:	test   al,al
   20bea:	jne    20baf <__sprintf_chk@plt+0x1cecf>
   20bec:	jmp    20bce <__sprintf_chk@plt+0x1ceee>
   20bee:	xchg   ax,ax
   20bf0:	add    rsp,0x8
   20bf4:	mov    rdi,r14
   20bf7:	mov    rsi,rdx
   20bfa:	pop    rbp
   20bfb:	pop    r12
   20bfd:	pop    r13
   20bff:	pop    r14
   20c01:	jmp    38c0 <gmtime_r@plt>
   20c06:	cs nop WORD PTR [rax+rax*1+0x0]
   20c10:	endbr64 
   20c14:	push   r13
   20c16:	push   r12
   20c18:	push   rbp
   20c19:	mov    rbp,rsi
   20c1c:	sub    rsp,0x50
   20c20:	mov    rax,QWORD PTR fs:0x28
   20c29:	mov    QWORD PTR [rsp+0x48],rax
   20c2e:	xor    eax,eax
   20c30:	test   rdi,rdi
   20c33:	je     20d30 <__sprintf_chk@plt+0x1d050>
   20c39:	mov    r12,rdi
   20c3c:	call   20a40 <__sprintf_chk@plt+0x1cd60>
   20c41:	mov    r13,rax
   20c44:	test   rax,rax
   20c47:	je     20d58 <__sprintf_chk@plt+0x1d078>
   20c4d:	mov    rdi,rbp
   20c50:	call   3af0 <mktime@plt>
   20c55:	mov    QWORD PTR [rsp+0x8],rax
   20c5a:	cmp    rax,0xffffffffffffffff
   20c5e:	je     20cb8 <__sprintf_chk@plt+0x1cfd8>
   20c60:	mov    rsi,rbp
   20c63:	mov    rdi,r12
   20c66:	call   208e0 <__sprintf_chk@plt+0x1cc00>
   20c6b:	test   al,al
   20c6d:	jne    20c78 <__sprintf_chk@plt+0x1cf98>
   20c6f:	mov    QWORD PTR [rsp+0x8],0xffffffffffffffff
   20c78:	cmp    r13,0x1
   20c7c:	je     20c8e <__sprintf_chk@plt+0x1cfae>
   20c7e:	mov    rdi,r13
   20c81:	call   207b0 <__sprintf_chk@plt+0x1cad0>
   20c86:	test   al,al
   20c88:	je     20d58 <__sprintf_chk@plt+0x1d078>
   20c8e:	mov    rax,QWORD PTR [rsp+0x8]
   20c93:	mov    rcx,QWORD PTR [rsp+0x48]
   20c98:	sub    rcx,QWORD PTR fs:0x28
   20ca1:	jne    20d64 <__sprintf_chk@plt+0x1d084>
   20ca7:	add    rsp,0x50
   20cab:	pop    rbp
   20cac:	pop    r12
   20cae:	pop    r13
   20cb0:	ret    
   20cb1:	nop    DWORD PTR [rax+0x0]
   20cb8:	lea    rsi,[rsp+0x10]
   20cbd:	lea    rdi,[rsp+0x8]
   20cc2:	call   3710 <localtime_r@plt>
   20cc7:	test   rax,rax
   20cca:	je     20c78 <__sprintf_chk@plt+0x1cf98>
   20ccc:	mov    eax,DWORD PTR [rbp+0x20]
   20ccf:	mov    edx,DWORD PTR [rsp+0x30]
   20cd3:	test   eax,eax
   20cd5:	sete   sil
   20cd9:	test   edx,edx
   20cdb:	sete   cl
   20cde:	cmp    sil,cl
   20ce1:	je     20ceb <__sprintf_chk@plt+0x1d00b>
   20ce3:	test   eax,eax
   20ce5:	js     20ceb <__sprintf_chk@plt+0x1d00b>
   20ce7:	test   edx,edx
   20ce9:	jns    20c78 <__sprintf_chk@plt+0x1cf98>
   20ceb:	mov    eax,DWORD PTR [rbp+0x10]
   20cee:	mov    edx,DWORD PTR [rbp+0x14]
   20cf1:	xor    eax,DWORD PTR [rsp+0x20]
   20cf5:	xor    edx,DWORD PTR [rsp+0x24]
   20cf9:	or     eax,edx
   20cfb:	mov    edx,DWORD PTR [rbp+0xc]
   20cfe:	xor    edx,DWORD PTR [rsp+0x1c]
   20d02:	or     eax,edx
   20d04:	mov    edx,DWORD PTR [rbp+0x8]
   20d07:	xor    edx,DWORD PTR [rsp+0x18]
   20d0b:	or     eax,edx
   20d0d:	mov    edx,DWORD PTR [rbp+0x4]
   20d10:	xor    edx,DWORD PTR [rsp+0x14]
   20d14:	or     eax,edx
   20d16:	mov    edx,DWORD PTR [rbp+0x0]
   20d19:	xor    edx,DWORD PTR [rsp+0x10]
   20d1d:	or     eax,edx
   20d1f:	je     20c60 <__sprintf_chk@plt+0x1cf80>
   20d25:	jmp    20c78 <__sprintf_chk@plt+0x1cf98>
   20d2a:	nop    WORD PTR [rax+rax*1+0x0]
   20d30:	mov    rax,QWORD PTR [rsp+0x48]
   20d35:	sub    rax,QWORD PTR fs:0x28
   20d3e:	jne    20d64 <__sprintf_chk@plt+0x1d084>
   20d40:	add    rsp,0x50
   20d44:	mov    rdi,rsi
   20d47:	pop    rbp
   20d48:	pop    r12
   20d4a:	pop    r13
   20d4c:	jmp    3b50 <timegm@plt>
   20d51:	nop    DWORD PTR [rax+0x0]
   20d58:	mov    rax,0xffffffffffffffff
   20d5f:	jmp    20c93 <__sprintf_chk@plt+0x1cfb3>
   20d64:	call   3840 <__stack_chk_fail@plt>
   20d69:	nop    DWORD PTR [rax+0x0]
   20d70:	endbr64 
   20d74:	push   r12
   20d76:	push   rbp
   20d77:	mov    rbp,rdi
   20d7a:	push   rbx
   20d7b:	call   3740 <__fpending@plt>
   20d80:	mov    ebx,DWORD PTR [rbp+0x0]
   20d83:	mov    rdi,rbp
   20d86:	mov    r12,rax
   20d89:	and    ebx,0x20
   20d8c:	call   f210 <__sprintf_chk@plt+0xb530>
   20d91:	test   ebx,ebx
   20d93:	jne    20db8 <__sprintf_chk@plt+0x1d0d8>
   20d95:	test   eax,eax
   20d97:	je     20dae <__sprintf_chk@plt+0x1d0ce>
   20d99:	test   r12,r12
   20d9c:	jne    20dce <__sprintf_chk@plt+0x1d0ee>
   20d9e:	call   36f0 <__errno_location@plt>
   20da3:	cmp    DWORD PTR [rax],0x9
   20da6:	setne  al
   20da9:	movzx  eax,al
   20dac:	neg    eax
   20dae:	pop    rbx
   20daf:	pop    rbp
   20db0:	pop    r12
   20db2:	ret    
   20db3:	nop    DWORD PTR [rax+rax*1+0x0]
   20db8:	test   eax,eax
   20dba:	jne    20dce <__sprintf_chk@plt+0x1d0ee>
   20dbc:	call   36f0 <__errno_location@plt>
   20dc1:	mov    DWORD PTR [rax],0x0
   20dc7:	mov    eax,0xffffffff
   20dcc:	jmp    20dae <__sprintf_chk@plt+0x1d0ce>
   20dce:	mov    eax,0xffffffff
   20dd3:	jmp    20dae <__sprintf_chk@plt+0x1d0ce>
   20dd5:	cs nop WORD PTR [rax+rax*1+0x0]
   20ddf:	nop
   20de0:	endbr64 
   20de4:	mov    QWORD PTR [rdi+0x10],0x0
   20dec:	mov    DWORD PTR [rdi+0x18],0x95f616
   20df3:	ret    
   20df4:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   20dff:	nop
   20e00:	endbr64 
   20e04:	cmp    DWORD PTR [rdi+0x18],0x95f616
   20e0b:	jne    20e62 <__sprintf_chk@plt+0x1d182>
   20e0d:	mov    rax,QWORD PTR [rdi+0x10]
   20e11:	mov    rdx,QWORD PTR [rsi+0x8]
   20e15:	test   rax,rax
   20e18:	je     20e30 <__sprintf_chk@plt+0x1d150>
   20e1a:	cmp    QWORD PTR [rdi],rdx
   20e1d:	je     20e48 <__sprintf_chk@plt+0x1d168>
   20e1f:	lea    rcx,[rax+0x1]
   20e23:	mov    QWORD PTR [rdi+0x10],rcx
   20e27:	test   rax,rcx
   20e2a:	je     20e57 <__sprintf_chk@plt+0x1d177>
   20e2c:	xor    eax,eax
   20e2e:	ret    
   20e2f:	nop
   20e30:	mov    QWORD PTR [rdi+0x10],0x1
   20e38:	mov    rax,QWORD PTR [rsi]
   20e3b:	mov    QWORD PTR [rdi],rdx
   20e3e:	mov    QWORD PTR [rdi+0x8],rax
   20e42:	xor    eax,eax
   20e44:	ret    
   20e45:	nop    DWORD PTR [rax]
   20e48:	mov    rcx,QWORD PTR [rdi+0x8]
   20e4c:	cmp    QWORD PTR [rsi],rcx
   20e4f:	jne    20e1f <__sprintf_chk@plt+0x1d13f>
   20e51:	mov    eax,0x1
   20e56:	ret    
   20e57:	test   rcx,rcx
   20e5a:	jne    20e38 <__sprintf_chk@plt+0x1d158>
   20e5c:	mov    eax,0x1
   20e61:	ret    
   20e62:	push   rax
   20e63:	lea    rcx,[rip+0x47b6]        # 25620 <__sprintf_chk@plt+0x21940>
   20e6a:	mov    edx,0x3c
   20e6f:	lea    rsi,[rip+0x477a]        # 255f0 <__sprintf_chk@plt+0x21910>
   20e76:	lea    rdi,[rip+0x4785]        # 25602 <__sprintf_chk@plt+0x21922>
   20e7d:	call   38e0 <__assert_fail@plt>
   20e82:	cs nop WORD PTR [rax+rax*1+0x0]
   20e8c:	nop    DWORD PTR [rax+0x0]
   20e90:	endbr64 
   20e94:	sub    rsp,0x58
   20e98:	mov    QWORD PTR [rsp+0x30],rdx
   20e9d:	xor    edx,edx
   20e9f:	mov    rax,QWORD PTR fs:0x28
   20ea8:	mov    QWORD PTR [rsp+0x18],rax
   20ead:	xor    eax,eax
   20eaf:	test   sil,0x40
   20eb3:	jne    20ee0 <__sprintf_chk@plt+0x1d200>
   20eb5:	xor    eax,eax
   20eb7:	call   3ba0 <open@plt>
   20ebc:	mov    edi,eax
   20ebe:	call   21250 <__sprintf_chk@plt+0x1d570>
   20ec3:	mov    rcx,QWORD PTR [rsp+0x18]
   20ec8:	sub    rcx,QWORD PTR fs:0x28
   20ed1:	jne    20f01 <__sprintf_chk@plt+0x1d221>
   20ed3:	add    rsp,0x58
   20ed7:	ret    
   20ed8:	nop    DWORD PTR [rax+rax*1+0x0]
   20ee0:	lea    rax,[rsp+0x60]
   20ee5:	mov    DWORD PTR [rsp],0x10
   20eec:	mov    edx,DWORD PTR [rsp+0x30]
   20ef0:	mov    QWORD PTR [rsp+0x8],rax
   20ef5:	lea    rax,[rsp+0x20]
   20efa:	mov    QWORD PTR [rsp+0x10],rax
   20eff:	jmp    20eb5 <__sprintf_chk@plt+0x1d1d5>
   20f01:	call   3840 <__stack_chk_fail@plt>
   20f06:	cs nop WORD PTR [rax+rax*1+0x0]
   20f10:	endbr64 
   20f14:	sub    rsp,0x118
   20f1b:	mov    edx,0x101
   20f20:	mov    rax,QWORD PTR fs:0x28
   20f29:	mov    QWORD PTR [rsp+0x108],rax
   20f31:	xor    eax,eax
   20f33:	mov    rsi,rsp
   20f36:	call   21190 <__sprintf_chk@plt+0x1d4b0>
   20f3b:	mov    r8d,eax
   20f3e:	xor    eax,eax
   20f40:	test   r8d,r8d
   20f43:	jne    20f5a <__sprintf_chk@plt+0x1d27a>
   20f45:	cmp    WORD PTR [rsp],0x43
   20f4a:	je     20f5a <__sprintf_chk@plt+0x1d27a>
   20f4c:	cmp    DWORD PTR [rsp],0x49534f50
   20f53:	je     20f78 <__sprintf_chk@plt+0x1d298>
   20f55:	mov    eax,0x1
   20f5a:	mov    rcx,QWORD PTR [rsp+0x108]
   20f62:	sub    rcx,QWORD PTR fs:0x28
   20f6b:	jne    20f84 <__sprintf_chk@plt+0x1d2a4>
   20f6d:	add    rsp,0x118
   20f74:	ret    
   20f75:	nop    DWORD PTR [rax]
   20f78:	xor    eax,eax
   20f7a:	cmp    WORD PTR [rsp+0x4],0x58
   20f80:	jne    20f55 <__sprintf_chk@plt+0x1d275>
   20f82:	jmp    20f5a <__sprintf_chk@plt+0x1d27a>
   20f84:	call   3840 <__stack_chk_fail@plt>
   20f89:	nop    DWORD PTR [rax+0x0]
   20f90:	endbr64 
   20f94:	mov    QWORD PTR [rdi+0x14],0x0
   20f9c:	mov    BYTE PTR [rdi+0x1c],0x1
   20fa0:	mov    DWORD PTR [rdi],esi
   20fa2:	mov    DWORD PTR [rdi+0x4],esi
   20fa5:	mov    DWORD PTR [rdi+0x8],esi
   20fa8:	mov    DWORD PTR [rdi+0xc],esi
   20fab:	mov    DWORD PTR [rdi+0x10],esi
   20fae:	ret    
   20faf:	nop
   20fb0:	endbr64 
   20fb4:	movzx  eax,BYTE PTR [rdi+0x1c]
   20fb8:	ret    
   20fb9:	nop    DWORD PTR [rax+0x0]
   20fc0:	endbr64 
   20fc4:	movzx  eax,BYTE PTR [rdi+0x1c]
   20fc8:	mov    edx,DWORD PTR [rdi+0x14]
   20fcb:	xor    eax,0x1
   20fce:	movzx  eax,al
   20fd1:	add    edx,eax
   20fd3:	and    edx,0x3
   20fd6:	mov    ecx,edx
   20fd8:	mov    r8d,DWORD PTR [rdi+rcx*4]
   20fdc:	mov    DWORD PTR [rdi+rcx*4],esi
   20fdf:	mov    ecx,DWORD PTR [rdi+0x18]
   20fe2:	mov    DWORD PTR [rdi+0x14],edx
   20fe5:	cmp    ecx,edx
   20fe7:	jne    20ff1 <__sprintf_chk@plt+0x1d311>
   20fe9:	add    eax,ecx
   20feb:	and    eax,0x3
   20fee:	mov    DWORD PTR [rdi+0x18],eax
   20ff1:	mov    BYTE PTR [rdi+0x1c],0x0
   20ff5:	mov    eax,r8d
   20ff8:	ret    
   20ff9:	nop    DWORD PTR [rax+0x0]
   21000:	endbr64 
   21004:	sub    rsp,0x8
   21008:	cmp    BYTE PTR [rdi+0x1c],0x0
   2100c:	jne    3d72 <__sprintf_chk@plt+0x92>
   21012:	mov    edx,DWORD PTR [rdi+0x14]
   21015:	mov    ecx,DWORD PTR [rdi+0x10]
   21018:	mov    r8d,DWORD PTR [rdi+rdx*4]
   2101c:	mov    rax,rdx
   2101f:	mov    DWORD PTR [rdi+rdx*4],ecx
   21022:	cmp    edx,DWORD PTR [rdi+0x18]
   21025:	je     21040 <__sprintf_chk@plt+0x1d360>
   21027:	add    eax,0x3
   2102a:	and    eax,0x3
   2102d:	mov    DWORD PTR [rdi+0x14],eax
   21030:	mov    eax,r8d
   21033:	add    rsp,0x8
   21037:	ret    
   21038:	nop    DWORD PTR [rax+rax*1+0x0]
   21040:	mov    BYTE PTR [rdi+0x1c],0x1
   21044:	mov    eax,r8d
   21047:	add    rsp,0x8
   2104b:	ret    
   2104c:	nop    DWORD PTR [rax+0x0]
   21050:	endbr64 
   21054:	sub    rsp,0x8
   21058:	mov    edi,0xe
   2105d:	call   3ac0 <nl_langinfo@plt>
   21062:	test   rax,rax
   21065:	je     21080 <__sprintf_chk@plt+0x1d3a0>
   21067:	cmp    BYTE PTR [rax],0x0
   2106a:	lea    rdx,[rip+0x45c3]        # 25634 <__sprintf_chk@plt+0x21954>
   21071:	cmove  rax,rdx
   21075:	add    rsp,0x8
   21079:	ret    
   2107a:	nop    WORD PTR [rax+rax*1+0x0]
   21080:	lea    rax,[rip+0x45ad]        # 25634 <__sprintf_chk@plt+0x21954>
   21087:	add    rsp,0x8
   2108b:	ret    
   2108c:	nop    DWORD PTR [rax+0x0]
   21090:	endbr64 
   21094:	sub    rsp,0x58
   21098:	mov    QWORD PTR [rsp+0x38],rcx
   2109d:	xor    ecx,ecx
   2109f:	mov    rax,QWORD PTR fs:0x28
   210a8:	mov    QWORD PTR [rsp+0x18],rax
   210ad:	xor    eax,eax
   210af:	test   dl,0x40
   210b2:	jne    210e0 <__sprintf_chk@plt+0x1d400>
   210b4:	xor    eax,eax
   210b6:	call   3830 <openat@plt>
   210bb:	mov    edi,eax
   210bd:	call   21250 <__sprintf_chk@plt+0x1d570>
   210c2:	mov    rcx,QWORD PTR [rsp+0x18]
   210c7:	sub    rcx,QWORD PTR fs:0x28
   210d0:	jne    21101 <__sprintf_chk@plt+0x1d421>
   210d2:	add    rsp,0x58
   210d6:	ret    
   210d7:	nop    WORD PTR [rax+rax*1+0x0]
   210e0:	lea    rax,[rsp+0x60]
   210e5:	mov    DWORD PTR [rsp],0x18
   210ec:	mov    ecx,DWORD PTR [rsp+0x38]
   210f0:	mov    QWORD PTR [rsp+0x8],rax
   210f5:	lea    rax,[rsp+0x20]
   210fa:	mov    QWORD PTR [rsp+0x10],rax
   210ff:	jmp    210b4 <__sprintf_chk@plt+0x1d3d4>
   21101:	call   3840 <__stack_chk_fail@plt>
   21106:	cs nop WORD PTR [rax+rax*1+0x0]
   21110:	endbr64 
   21114:	push   r13
   21116:	or     edx,0x90900
   2111c:	xor    eax,eax
   2111e:	push   r12
   21120:	xor    r12d,r12d
   21123:	push   rbp
   21124:	push   rbx
   21125:	mov    rbx,rcx
   21128:	sub    rsp,0x8
   2112c:	call   21090 <__sprintf_chk@plt+0x1d3b0>
   21131:	test   eax,eax
   21133:	js     21148 <__sprintf_chk@plt+0x1d468>
   21135:	mov    edi,eax
   21137:	mov    ebp,eax
   21139:	call   3be0 <fdopendir@plt>
   2113e:	mov    r12,rax
   21141:	test   rax,rax
   21144:	je     21160 <__sprintf_chk@plt+0x1d480>
   21146:	mov    DWORD PTR [rbx],ebp
   21148:	add    rsp,0x8
   2114c:	mov    rax,r12
   2114f:	pop    rbx
   21150:	pop    rbp
   21151:	pop    r12
   21153:	pop    r13
   21155:	ret    
   21156:	cs nop WORD PTR [rax+rax*1+0x0]
   21160:	call   36f0 <__errno_location@plt>
   21165:	mov    edi,ebp
   21167:	mov    r13d,DWORD PTR [rax]
   2116a:	mov    rbx,rax
   2116d:	call   3920 <close@plt>
   21172:	mov    rax,r12
   21175:	mov    DWORD PTR [rbx],r13d
   21178:	add    rsp,0x8
   2117c:	pop    rbx
   2117d:	pop    rbp
   2117e:	pop    r12
   21180:	pop    r13
   21182:	ret    
   21183:	cs nop WORD PTR [rax+rax*1+0x0]
   2118d:	nop    DWORD PTR [rax]
   21190:	endbr64 
   21194:	push   r13
   21196:	push   r12
   21198:	mov    r12,rsi
   2119b:	xor    esi,esi
   2119d:	push   rbp
   2119e:	push   rbx
   2119f:	mov    rbx,rdx
   211a2:	sub    rsp,0x8
   211a6:	call   3b30 <setlocale@plt>
   211ab:	test   rax,rax
   211ae:	je     21228 <__sprintf_chk@plt+0x1d548>
   211b0:	mov    rdi,rax
   211b3:	mov    rbp,rax
   211b6:	call   3810 <strlen@plt>
   211bb:	cmp    rbx,rax
   211be:	ja     211e0 <__sprintf_chk@plt+0x1d500>
   211c0:	mov    r13d,0x22
   211c6:	test   rbx,rbx
   211c9:	jne    21200 <__sprintf_chk@plt+0x1d520>
   211cb:	add    rsp,0x8
   211cf:	mov    eax,r13d
   211d2:	pop    rbx
   211d3:	pop    rbp
   211d4:	pop    r12
   211d6:	pop    r13
   211d8:	ret    
   211d9:	nop    DWORD PTR [rax+0x0]
   211e0:	mov    rsi,rbp
   211e3:	mov    rdi,r12
   211e6:	lea    rdx,[rax+0x1]
   211ea:	xor    r13d,r13d
   211ed:	call   3a00 <memcpy@plt>
   211f2:	add    rsp,0x8
   211f6:	mov    eax,r13d
   211f9:	pop    rbx
   211fa:	pop    rbp
   211fb:	pop    r12
   211fd:	pop    r13
   211ff:	ret    
   21200:	lea    rdx,[rbx-0x1]
   21204:	mov    rsi,rbp
   21207:	mov    rdi,r12
   2120a:	call   3a00 <memcpy@plt>
   2120f:	mov    BYTE PTR [r12+rbx*1-0x1],0x0
   21215:	add    rsp,0x8
   21219:	mov    eax,r13d
   2121c:	pop    rbx
   2121d:	pop    rbp
   2121e:	pop    r12
   21220:	pop    r13
   21222:	ret    
   21223:	nop    DWORD PTR [rax+rax*1+0x0]
   21228:	mov    r13d,0x16
   2122e:	test   rbx,rbx
   21231:	je     211cb <__sprintf_chk@plt+0x1d4eb>
   21233:	mov    BYTE PTR [r12],0x0
   21238:	jmp    211cb <__sprintf_chk@plt+0x1d4eb>
   2123a:	nop    WORD PTR [rax+rax*1+0x0]
   21240:	endbr64 
   21244:	xor    esi,esi
   21246:	jmp    3b30 <setlocale@plt>
   2124b:	nop    DWORD PTR [rax+rax*1+0x0]
   21250:	endbr64 
   21254:	push   r13
   21256:	push   r12
   21258:	mov    r12d,edi
   2125b:	push   rbp
   2125c:	push   rbx
   2125d:	sub    rsp,0x8
   21261:	cmp    edi,0x2
   21264:	jbe    21278 <__sprintf_chk@plt+0x1d598>
   21266:	add    rsp,0x8
   2126a:	mov    eax,r12d
   2126d:	pop    rbx
   2126e:	pop    rbp
   2126f:	pop    r12
   21271:	pop    r13
   21273:	ret    
   21274:	nop    DWORD PTR [rax+0x0]
   21278:	call   21510 <__sprintf_chk@plt+0x1d830>
   2127d:	mov    ebp,eax
   2127f:	call   36f0 <__errno_location@plt>
   21284:	mov    edi,r12d
   21287:	mov    r12d,ebp
   2128a:	mov    r13d,DWORD PTR [rax]
   2128d:	mov    rbx,rax
   21290:	call   3920 <close@plt>
   21295:	mov    eax,r12d
   21298:	mov    DWORD PTR [rbx],r13d
   2129b:	add    rsp,0x8
   2129f:	pop    rbx
   212a0:	pop    rbp
   212a1:	pop    r12
   212a3:	pop    r13
   212a5:	ret    
   212a6:	cs nop WORD PTR [rax+rax*1+0x0]
   212b0:	endbr64 
   212b4:	push   r13
   212b6:	push   r12
   212b8:	push   rbp
   212b9:	sub    rsp,0x60
   212bd:	mov    QWORD PTR [rsp+0x40],rdx
   212c2:	mov    QWORD PTR [rsp+0x48],rcx
   212c7:	mov    QWORD PTR [rsp+0x50],r8
   212cc:	mov    QWORD PTR [rsp+0x58],r9
   212d1:	mov    rax,QWORD PTR fs:0x28
   212da:	mov    QWORD PTR [rsp+0x28],rax
   212df:	xor    eax,eax
   212e1:	lea    rax,[rsp+0x80]
   212e9:	mov    DWORD PTR [rsp+0x10],0x10
   212f1:	mov    QWORD PTR [rsp+0x18],rax
   212f6:	lea    rax,[rsp+0x30]
   212fb:	mov    QWORD PTR [rsp+0x20],rax
   21300:	test   esi,esi
   21302:	je     21380 <__sprintf_chk@plt+0x1d6a0>
   21304:	cmp    esi,0x406
   2130a:	je     213b8 <__sprintf_chk@plt+0x1d6d8>
   21310:	cmp    esi,0xb
   21313:	jg     21340 <__sprintf_chk@plt+0x1d660>
   21315:	test   esi,esi
   21317:	jg     21360 <__sprintf_chk@plt+0x1d680>
   21319:	mov    eax,DWORD PTR [rsp+0x10]
   2131d:	cmp    eax,0x2f
   21320:	ja     21500 <__sprintf_chk@plt+0x1d820>
   21326:	add    rax,QWORD PTR [rsp+0x20]
   2132b:	mov    rdx,QWORD PTR [rax]
   2132e:	xor    eax,eax
   21330:	call   3780 <fcntl@plt>
   21335:	mov    r12d,eax
   21338:	jmp    21394 <__sprintf_chk@plt+0x1d6b4>
   2133a:	nop    WORD PTR [rax+rax*1+0x0]
   21340:	lea    eax,[rsi-0x400]
   21346:	cmp    eax,0xa
   21349:	ja     21319 <__sprintf_chk@plt+0x1d639>
   2134b:	lea    rdx,[rip+0x42ea]        # 2563c <__sprintf_chk@plt+0x2195c>
   21352:	movsxd rax,DWORD PTR [rdx+rax*4]
   21356:	add    rax,rdx
   21359:	notrack jmp rax
   2135c:	nop    DWORD PTR [rax+0x0]
   21360:	cmp    esi,0xb
   21363:	ja     21319 <__sprintf_chk@plt+0x1d639>
   21365:	lea    rcx,[rip+0x42fc]        # 25668 <__sprintf_chk@plt+0x21988>
   2136c:	mov    edx,esi
   2136e:	movsxd rax,DWORD PTR [rcx+rdx*4]
   21372:	add    rax,rcx
   21375:	notrack jmp rax
   21378:	nop    DWORD PTR [rax+rax*1+0x0]
   21380:	mov    rax,QWORD PTR [rsp+0x20]
   21385:	xor    esi,esi
   21387:	mov    edx,DWORD PTR [rax+0x10]
   2138a:	xor    eax,eax
   2138c:	call   3780 <fcntl@plt>
   21391:	mov    r12d,eax
   21394:	mov    rax,QWORD PTR [rsp+0x28]
   21399:	sub    rax,QWORD PTR fs:0x28
   213a2:	jne    2150a <__sprintf_chk@plt+0x1d82a>
   213a8:	add    rsp,0x60
   213ac:	mov    eax,r12d
   213af:	pop    rbp
   213b0:	pop    r12
   213b2:	pop    r13
   213b4:	ret    
   213b5:	nop    DWORD PTR [rax]
   213b8:	mov    rax,QWORD PTR [rsp+0x20]
   213bd:	mov    DWORD PTR [rsp+0x10],0x18
   213c5:	mov    r13d,DWORD PTR [rax+0x10]
   213c9:	mov    eax,DWORD PTR [rip+0xaf31]        # 2c300 <stderr@@GLIBC_2.2.5+0x220>
   213cf:	mov    edx,r13d
   213d2:	test   eax,eax
   213d4:	js     21428 <__sprintf_chk@plt+0x1d748>
   213d6:	mov    esi,0x406
   213db:	xor    eax,eax
   213dd:	mov    DWORD PTR [rsp+0xc],edi
   213e1:	call   3780 <fcntl@plt>
   213e6:	mov    r12d,eax
   213e9:	test   eax,eax
   213eb:	js     214b0 <__sprintf_chk@plt+0x1d7d0>
   213f1:	mov    DWORD PTR [rip+0xaf05],0x1        # 2c300 <stderr@@GLIBC_2.2.5+0x220>
   213fb:	jmp    21394 <__sprintf_chk@plt+0x1d6b4>
   213fd:	nop    DWORD PTR [rax]
   21400:	mov    eax,DWORD PTR [rsp+0x10]
   21404:	cmp    eax,0x2f
   21407:	ja     214f0 <__sprintf_chk@plt+0x1d810>
   2140d:	add    rax,QWORD PTR [rsp+0x20]
   21412:	mov    edx,DWORD PTR [rax]
   21414:	xor    eax,eax
   21416:	call   3780 <fcntl@plt>
   2141b:	mov    r12d,eax
   2141e:	jmp    21394 <__sprintf_chk@plt+0x1d6b4>
   21423:	nop    DWORD PTR [rax+rax*1+0x0]
   21428:	xor    esi,esi
   2142a:	xor    eax,eax
   2142c:	call   3780 <fcntl@plt>
   21431:	mov    r12d,eax
   21434:	test   eax,eax
   21436:	js     21394 <__sprintf_chk@plt+0x1d6b4>
   2143c:	cmp    DWORD PTR [rip+0xaebd],0xffffffff        # 2c300 <stderr@@GLIBC_2.2.5+0x220>
   21443:	jne    21394 <__sprintf_chk@plt+0x1d6b4>
   21449:	xor    eax,eax
   2144b:	mov    esi,0x1
   21450:	mov    edi,r12d
   21453:	call   3780 <fcntl@plt>
   21458:	test   eax,eax
   2145a:	js     21479 <__sprintf_chk@plt+0x1d799>
   2145c:	or     eax,0x1
   2145f:	mov    esi,0x2
   21464:	mov    edi,r12d
   21467:	mov    edx,eax
   21469:	xor    eax,eax
   2146b:	call   3780 <fcntl@plt>
   21470:	cmp    eax,0xffffffff
   21473:	jne    21394 <__sprintf_chk@plt+0x1d6b4>
   21479:	call   36f0 <__errno_location@plt>
   2147e:	mov    edi,r12d
   21481:	or     r12d,0xffffffff
   21485:	mov    r13d,DWORD PTR [rax]
   21488:	mov    rbp,rax
   2148b:	call   3920 <close@plt>
   21490:	mov    DWORD PTR [rbp+0x0],r13d
   21494:	jmp    21394 <__sprintf_chk@plt+0x1d6b4>
   21499:	nop    DWORD PTR [rax+0x0]
   214a0:	xor    eax,eax
   214a2:	call   3780 <fcntl@plt>
   214a7:	mov    r12d,eax
   214aa:	jmp    21394 <__sprintf_chk@plt+0x1d6b4>
   214af:	nop
   214b0:	call   36f0 <__errno_location@plt>
   214b5:	mov    edi,DWORD PTR [rsp+0xc]
   214b9:	cmp    DWORD PTR [rax],0x16
   214bc:	jne    213f1 <__sprintf_chk@plt+0x1d711>
   214c2:	mov    edx,r13d
   214c5:	xor    esi,esi
   214c7:	xor    eax,eax
   214c9:	call   3780 <fcntl@plt>
   214ce:	mov    r12d,eax
   214d1:	test   eax,eax
   214d3:	js     21394 <__sprintf_chk@plt+0x1d6b4>
   214d9:	mov    DWORD PTR [rip+0xae1d],0xffffffff        # 2c300 <stderr@@GLIBC_2.2.5+0x220>
   214e3:	jmp    21449 <__sprintf_chk@plt+0x1d769>
   214e8:	nop    DWORD PTR [rax+rax*1+0x0]
   214f0:	mov    rax,QWORD PTR [rsp+0x18]
   214f5:	jmp    21412 <__sprintf_chk@plt+0x1d732>
   214fa:	nop    WORD PTR [rax+rax*1+0x0]
   21500:	mov    rax,QWORD PTR [rsp+0x18]
   21505:	jmp    2132b <__sprintf_chk@plt+0x1d64b>
   2150a:	call   3840 <__stack_chk_fail@plt>
   2150f:	nop
   21510:	endbr64 
   21514:	mov    edx,0x3
   21519:	xor    esi,esi
   2151b:	xor    eax,eax
   2151d:	jmp    212b0 <__sprintf_chk@plt+0x1d5d0>
   21522:	cs nop WORD PTR [rax+rax*1+0x0]
   2152c:	nop    DWORD PTR [rax+0x0]
   21530:	endbr64 
   21534:	push   r15
   21536:	lea    r15,[rip+0xa133]        # 2b670 <__sprintf_chk@plt+0x27990>
   2153d:	push   r14
   2153f:	mov    r14,rdx
   21542:	push   r13
   21544:	mov    r13,rsi
   21547:	push   r12
   21549:	mov    r12d,edi
   2154c:	push   rbp
   2154d:	lea    rbp,[rip+0xa124]        # 2b678 <__sprintf_chk@plt+0x27998>
   21554:	push   rbx
   21555:	sub    rbp,r15
   21558:	sub    rsp,0x8
   2155c:	call   3000 <free@plt-0x680>
   21561:	sar    rbp,0x3
   21565:	je     21586 <__sprintf_chk@plt+0x1d8a6>
   21567:	xor    ebx,ebx
   21569:	nop    DWORD PTR [rax+0x0]
   21570:	mov    rdx,r14
   21573:	mov    rsi,r13
   21576:	mov    edi,r12d
   21579:	call   QWORD PTR [r15+rbx*8]
   2157d:	add    rbx,0x1
   21581:	cmp    rbp,rbx
   21584:	jne    21570 <__sprintf_chk@plt+0x1d890>
   21586:	add    rsp,0x8
   2158a:	pop    rbx
   2158b:	pop    rbp
   2158c:	pop    r12
   2158e:	pop    r13
   21590:	pop    r14
   21592:	pop    r15
   21594:	ret    
   21595:	data16 cs nop WORD PTR [rax+rax*1+0x0]
   215a0:	endbr64 
   215a4:	ret    
   215a5:	cs nop WORD PTR [rax+rax*1+0x0]
   215af:	nop
   215b0:	endbr64 
   215b4:	mov    rdx,QWORD PTR [rip+0xaa4d]        # 2c008 <__sprintf_chk@plt+0x28328>
   215bb:	xor    esi,esi
   215bd:	jmp    3c20 <__cxa_atexit@plt>

Disassembly of section .fini:

00000000000215c4 <.fini>:
   215c4:	endbr64 
   215c8:	sub    rsp,0x8
   215cc:	add    rsp,0x8
   215d0:	ret    
