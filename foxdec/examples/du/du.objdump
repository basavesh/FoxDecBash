du_x86_64:
(__TEXT,__text) section
10000298c:	push	rbp
10000298d:	mov	rbp, rsp
100002990:	push	r15
100002992:	push	r14
100002994:	push	r13
100002996:	push	r12
100002998:	push	rbx
100002999:	sub	rsp, 0xe8
1000029a0:	mov	r15, rsi
1000029a3:	mov	r12d, edi
1000029a6:	lea	rsi, [rip + 0x138c] ## literal pool for: ""
1000029ad:	xor	r13d, r13d
1000029b0:	xor	edi, edi
1000029b2:	call	0x100003b0a ## symbol stub for: _setlocale
1000029b7:	mov	byte ptr [rip + 0x17ba], 0x0
1000029be:	mov	dword ptr [rip + 0x17b4], 0x0
1000029c8:	lea	rax, [rbp - 0x38]
1000029cc:	mov	qword ptr [rax], r13
1000029cf:	mov	qword ptr [rip + 0x17a6], 0x200
1000029da:	mov	qword ptr [rip + 0x17a7], r13
1000029e1:	mov	qword ptr [rip + 0x1800], r13
1000029e8:	mov	dword ptr [rbp - 0x44], 0x7fffffff
1000029ef:	mov	r14d, 0x14
1000029f5:	lea	rbx, [rip + 0x133e] ## literal pool for: "+AB:HI:LPasd:cghklmnrt:x"
1000029fc:	mov	dword ptr [rbp - 0x2c], 0x0
100002a03:	xor	eax, eax
100002a05:	mov	qword ptr [rbp - 0x58], rax
100002a09:	xor	eax, eax
100002a0b:	mov	qword ptr [rbp - 0x68], rax
100002a0f:	mov	dword ptr [rbp - 0x40], 0x0
100002a16:	mov	dword ptr [rbp - 0x3c], 0x0
100002a1d:	mov	dword ptr [rbp - 0x48], 0x0
100002a24:	mov	dword ptr [rbp - 0x5c], r12d
100002a28:	mov	edi, r12d
100002a2b:	mov	rsi, r15
100002a2e:	mov	rdx, rbx
100002a31:	lea	rcx, [rip + 0x16f8]
100002a38:	xor	r8d, r8d
100002a3b:	call	0x100003aec ## symbol stub for: _getopt_long
100002a40:	cmp	eax, 0x60
100002a43:	jle	0x100002a6c
100002a45:	add	eax, -0x61
100002a48:	cmp	eax, 0x1f
100002a4b:	ja	0x100002d15
100002a51:	lea	rcx, [rip + 0xdb4]
100002a58:	movsxd	rax, dword ptr [rcx + 4*rax]
100002a5c:	add	rax, rcx
100002a5f:	jmp	rax
100002a61:	mov	eax, 0x1
100002a66:	mov	qword ptr [rbp - 0x58], rax
100002a6a:	jmp	0x100002a28
100002a6c:	lea	ecx, [rax - 0x41]
100002a6f:	cmp	ecx, 0xb
100002a72:	ja	0x100002a8d
100002a74:	lea	rdx, [rip + 0xd61]
100002a7b:	movsxd	rax, dword ptr [rdx + 4*rcx]
100002a7f:	add	rax, rdx
100002a82:	jmp	rax
100002a84:	mov	byte ptr [rip + 0x16ed], 0x1
100002a8b:	jmp	0x100002a28
100002a8d:	cmp	eax, 0x50
100002a90:	jne	0x100002cae
100002a96:	xor	r13d, r13d
100002a99:	mov	dword ptr [rbp - 0x2c], 0x0
100002aa0:	jmp	0x100002a28
100002aa2:	mov	dword ptr [rbp - 0x2c], 0x1
100002aa9:	xor	r13d, r13d
100002aac:	jmp	0x100002a28
100002ab1:	mov	r13d, 0x1
100002ab7:	mov	dword ptr [rbp - 0x2c], 0x0
100002abe:	jmp	0x100002a28
100002ac3:	call	0x100003a86 ## symbol stub for: ___error
100002ac8:	mov	dword ptr [rax], 0x0
100002ace:	mov	rax, qword ptr [rip + 0x1543] ## literal pool symbol address: _optarg
100002ad5:	mov	rdi, qword ptr [rax]
100002ad8:	call	0x100003a92 ## symbol stub for: _atoi
100002add:	cdqe
100002adf:	mov	qword ptr [rip + 0x169a], rax
100002ae6:	call	0x100003a86 ## symbol stub for: ___error
100002aeb:	cmp	dword ptr [rax], 0x22
100002aee:	je	0x100002d1a
100002af4:	cmp	qword ptr [rip + 0x1684], 0x0
100002afc:	jg	0x100002a28
100002b02:	jmp	0x100002d1a
100002b07:	mov	r12, r15
100002b0a:	mov	r15, r13
100002b0d:	mov	ebx, r14d
100002b10:	mov	rax, qword ptr [rip + 0x1501] ## literal pool symbol address: _optarg
100002b17:	mov	r13, qword ptr [rax]
100002b1a:	mov	edi, 0x1
100002b1f:	mov	esi, 0x10
100002b24:	call	0x100003a98 ## symbol stub for: _calloc
100002b29:	test	rax, rax
100002b2c:	je	0x100002c9b
100002b32:	mov	r14, rax
100002b35:	mov	rdi, r13
100002b38:	call	0x100003b28 ## symbol stub for: _strdup
100002b3d:	mov	qword ptr [r14], rax
100002b40:	test	rax, rax
100002b43:	je	0x100002c9b
100002b49:	mov	rax, qword ptr [rip + 0x1698]
100002b50:	mov	qword ptr [r14 + 0x8], rax
100002b54:	mov	qword ptr [rip + 0x168d], r14
100002b5b:	mov	r14d, ebx
100002b5e:	mov	r13, r15
100002b61:	mov	r15, r12
100002b64:	mov	r12d, dword ptr [rbp - 0x5c]
100002b68:	lea	rbx, [rip + 0x11cb] ## literal pool for: "+AB:HI:LPasd:cghklmnrt:x"
100002b6f:	jmp	0x100002a28
100002b74:	mov	dword ptr [rip + 0x15fe], 0x0
100002b7e:	mov	qword ptr [rip + 0x15ff], 0x100000
100002b89:	jmp	0x100002a28
100002b8e:	mov	dword ptr [rip + 0x15e4], 0x2
100002b98:	jmp	0x100002a28
100002b9d:	mov	dword ptr [rip + 0x15d5], 0x0
100002ba7:	mov	qword ptr [rip + 0x15d6], 0x400
100002bb2:	jmp	0x100002a28
100002bb7:	mov	dword ptr [rip + 0x15bb], 0x1
100002bc1:	jmp	0x100002a28
100002bc6:	mov	byte ptr [rip + 0x15c3], 0x1
100002bcd:	jmp	0x100002a28
100002bd2:	mov	dword ptr [rbp - 0x3c], 0x1
100002bd9:	jmp	0x100002a28
100002bde:	call	0x100003a86 ## symbol stub for: ___error
100002be3:	mov	dword ptr [rax], 0x0
100002be9:	mov	rax, qword ptr [rip + 0x1428] ## literal pool symbol address: _optarg
100002bf0:	mov	rdi, qword ptr [rax]
100002bf3:	call	0x100003a92 ## symbol stub for: _atoi
100002bf8:	mov	ebx, eax
100002bfa:	call	0x100003a86 ## symbol stub for: ___error
100002bff:	mov	dword ptr [rbp - 0x44], ebx
100002c02:	test	ebx, ebx
100002c04:	lea	rbx, [rip + 0x112f] ## literal pool for: "+AB:HI:LPasd:cghklmnrt:x"
100002c0b:	js	0x100002d2d
100002c11:	mov	dword ptr [rbp - 0x40], 0x1
100002c18:	cmp	dword ptr [rax], 0x22
100002c1b:	jne	0x100002a28
100002c21:	jmp	0x100002d2d
100002c26:	mov	dword ptr [rbp - 0x48], 0x1
100002c2d:	jmp	0x100002a28
100002c32:	mov	dword ptr [rip + 0x1540], 0x0
100002c3c:	mov	qword ptr [rip + 0x1541], 0x40000000
100002c47:	jmp	0x100002a28
100002c4c:	mov	eax, 0x1
100002c51:	mov	qword ptr [rbp - 0x68], rax
100002c55:	jmp	0x100002a28
100002c5a:	or	r14d, 0x40
100002c5e:	jmp	0x100002a28
100002c63:	mov	rax, qword ptr [rip + 0x13ae] ## literal pool symbol address: _optarg
100002c6a:	mov	rdi, qword ptr [rax]
100002c6d:	lea	rsi, [rbp - 0x38]
100002c71:	call	0x100003ab6 ## symbol stub for: _expand_number
100002c76:	test	eax, eax
100002c78:	jne	0x100002c85
100002c7a:	cmp	qword ptr [rbp - 0x38], 0x0
100002c7f:	jne	0x100002a28
100002c85:	mov	rax, qword ptr [rip + 0x138c] ## literal pool symbol address: _optarg
100002c8c:	mov	rsi, qword ptr [rax]
100002c8f:	lea	rdi, [rip + 0x10ff] ## literal pool for: "invalid threshold: %s"
100002c96:	jmp	0x100002d3e
100002c9b:	lea	rsi, [rip + 0x12d8] ## literal pool for: "cannot allocate memory"
100002ca2:	mov	edi, 0x1
100002ca7:	xor	eax, eax
100002ca9:	call	0x100003aaa ## symbol stub for: _errx
100002cae:	cmp	eax, -0x1
100002cb1:	jne	0x100002d15
100002cb3:	or	r14d, r13d
100002cb6:	mov	ebx, r14d
100002cb9:	and	ebx, -0x13
100002cbc:	or	ebx, 0x2
100002cbf:	cmp	dword ptr [rbp - 0x2c], 0x0
100002cc3:	cmove	ebx, r14d
100002cc7:	mov	al, byte ptr [rip + 0x14ab]
100002ccd:	test	al, al
100002ccf:	jne	0x100002d03
100002cd1:	mov	rcx, qword ptr [rip + 0x14a8]
100002cd8:	test	ecx, 0x1ff
100002cde:	je	0x100002d03
100002ce0:	lea	rdx, [rcx + 0x1ff]
100002ce7:	test	rcx, rcx
100002cea:	cmovns	rdx, rcx
100002cee:	and	rdx, -0x200
100002cf5:	add	rdx, 0x200
100002cfc:	mov	qword ptr [rip + 0x147d], rdx
100002d03:	mov	rcx, qword ptr [rbp - 0x58]
100002d07:	mov	rdx, qword ptr [rbp - 0x68]
100002d0b:	add	ecx, edx
100002d0d:	add	ecx, dword ptr [rbp - 0x40]
100002d10:	cmp	ecx, 0x2
100002d13:	jb	0x100002d4a
100002d15:	call	0x1000038c0
100002d1a:	mov	rax, qword ptr [rip + 0x12f7] ## literal pool symbol address: _optarg
100002d21:	mov	rsi, qword ptr [rax]
100002d24:	lea	rdi, [rip + 0x1028] ## literal pool for: "invalid argument to option B: %s"
100002d2b:	jmp	0x100002d3e
100002d2d:	mov	rax, qword ptr [rip + 0x12e4] ## literal pool symbol address: _optarg
100002d34:	mov	rsi, qword ptr [rax]
100002d37:	lea	rdi, [rip + 0x1036] ## literal pool for: "invalid argument to option d: %s"
100002d3e:	xor	eax, eax
100002d40:	call	0x100003b3a ## symbol stub for: _warnx
100002d45:	call	0x1000038c0
100002d4a:	mov	rcx, qword ptr [rip + 0x12cf] ## literal pool symbol address: _optind
100002d51:	movsxd	rcx, dword ptr [rcx]
100002d54:	lea	r12, [r15 + 8*rcx]
100002d58:	xor	ecx, ecx
100002d5a:	test	edx, edx
100002d5c:	cmove	ecx, dword ptr [rbp - 0x44]
100002d60:	mov	dword ptr [rbp - 0x2c], ecx
100002d63:	cmp	qword ptr [r12], 0x0
100002d68:	jne	0x100002d7f
100002d6a:	lea	rcx, [rip + 0x13ff]
100002d71:	mov	qword ptr [r15], rcx
100002d74:	mov	qword ptr [r15 + 0x8], 0x0
100002d7c:	mov	r12, r15
100002d7f:	cmp	qword ptr [rip + 0x1401], 0x0
100002d87:	jne	0x100002da4
100002d89:	lea	rsi, [rip + 0x13f8]
100002d90:	lea	rdi, [rbp - 0x74]
100002d94:	call	0x100003ae6 ## symbol stub for: _getbsize
100002d99:	cmp	byte ptr [rip + 0x13d8], 0x0
100002da0:	je	0x100002da8
100002da2:	jmp	0x100002de6
100002da4:	test	al, al
100002da6:	jne	0x100002de6
100002da8:	mov	rax, qword ptr [rip + 0x13d1]
100002daf:	mov	ecx, 0x1ff
100002db4:	lea	rdx, [rax + rcx]
100002db8:	test	rax, rax
100002dbb:	cmovns	rdx, rax
100002dbf:	sar	rdx, 0x9
100002dc3:	mov	qword ptr [rip + 0x13b6], rdx
100002dca:	mov	rax, qword ptr [rip + 0x13b7]
100002dd1:	add	rcx, rax
100002dd4:	test	rax, rax
100002dd7:	cmovns	rcx, rax
100002ddb:	sar	rcx, 0x9
100002ddf:	mov	qword ptr [rip + 0x13a2], rcx
100002de6:	mov	rax, qword ptr [rbp - 0x38]
100002dea:	test	rax, rax
100002ded:	je	0x100002e10
100002def:	shr	rax, 0x9
100002df3:	imul	rax, qword ptr [rip + 0x1385]
100002dfb:	xor	edx, edx
100002dfd:	div	qword ptr [rip + 0x1384]
100002e04:	cmp	rdx, 0x1
100002e08:	sbb	rax, -0x1
100002e0c:	mov	qword ptr [rbp - 0x38], rax
100002e10:	lea	r14, [rbp - 0x4c]
100002e14:	mov	dword ptr [r14], 0x1
100002e1b:	lea	rdi, [rip + 0xf89] ## literal pool for: "vfs.nspace.prevent_materialization"
100002e22:	mov	r8d, 0x4
100002e28:	xor	esi, esi
100002e2a:	xor	edx, edx
100002e2c:	mov	rcx, r14
100002e2f:	call	0x100003b34 ## symbol stub for: _sysctlbyname
100002e34:	mov	dword ptr [r14], 0x0
100002e3b:	lea	rsi, [rip + 0xaac]
100002e42:	mov	edi, 0x1d
100002e47:	call	0x100003b10 ## symbol stub for: _signal
100002e4c:	mov	rdi, r12
100002e4f:	mov	esi, ebx
100002e51:	xor	edx, edx
100002e53:	call	0x100003ac8 ## symbol stub for: _fts_open$INODE64
100002e58:	test	rax, rax
100002e5b:	jne	0x100002e69
100002e5d:	lea	rsi, [rip + 0xf6a] ## literal pool for: "fts_open"
100002e64:	jmp	0x100003745
100002e69:	mov	r14, rax
100002e6c:	call	0x100003a86 ## symbol stub for: ___error
100002e71:	mov	dword ptr [rax], 0x0
100002e77:	mov	rdi, r14
100002e7a:	call	0x100003ace ## symbol stub for: _fts_read$INODE64
100002e7f:	test	rax, rax
100002e82:	jne	0x100002ec4
100002e84:	xor	ebx, ebx
100002e86:	call	0x100003a86 ## symbol stub for: ___error
100002e8b:	cmp	dword ptr [rax], 0x0
100002e8e:	jne	0x10000373e
100002e94:	cmp	dword ptr [rbp - 0x3c], 0x0
100002e98:	je	0x10000377e
100002e9e:	cmp	dword ptr [rip + 0x12d7], 0x0
100002ea5:	jle	0x100003751
100002eab:	mov	rdi, rbx
100002eae:	call	0x1000039df
100002eb3:	lea	rdi, [rip + 0x10da] ## literal pool for: "\ttotal"
100002eba:	call	0x100003b04 ## symbol stub for: _puts
100002ebf:	jmp	0x10000377e
100002ec4:	mov	r13, rax
100002ec7:	mov	eax, dword ptr [r13 + 0x58]
100002ecb:	dec	eax
100002ecd:	cmp	ax, 0xc
100002ed1:	ja	0x100002f92
100002ed7:	movzx	eax, ax
100002eda:	lea	rcx, [rip + 0x9ab]
100002ee1:	movsxd	rax, dword ptr [rcx + 4*rax]
100002ee5:	add	rax, rcx
100002ee8:	jmp	rax
100002eea:	mov	rdi, r13
100002eed:	call	0x1000038fe
100002ef2:	test	eax, eax
100002ef4:	je	0x100002fd7
100002efa:	mov	rdi, r14
100002efd:	mov	rsi, r13
100002f00:	mov	edx, 0x4
100002f05:	call	0x100003ad4 ## symbol stub for: _fts_set$INODE64
100002f0a:	jmp	0x100003665
100002f0f:	lea	rdi, [rip + 0xece] ## literal pool for: "bin/du"
100002f16:	lea	rsi, [rip + 0xece] ## literal pool for: "unix2003"
100002f1d:	call	0x100003a9e ## symbol stub for: _compat_mode
100002f22:	test	al, al
100002f24:	je	0x100003665
100002f2a:	jmp	0x10000378b
100002f2f:	mov	rdi, r13
100002f32:	call	0x1000038fe
100002f37:	test	eax, eax
100002f39:	jne	0x100003665
100002f3f:	mov	rax, qword ptr [r13 + 0x60]
100002f43:	cmp	byte ptr [rip + 0x122e], 0x1
100002f4a:	jne	0x10000304e
100002f50:	mov	rax, qword ptr [rax + 0x60]
100002f54:	jmp	0x100003052
100002f59:	lea	rdi, [rip + 0xe84] ## literal pool for: "bin/du"
100002f60:	lea	rsi, [rip + 0xe84] ## literal pool for: "unix2003"
100002f67:	call	0x100003a9e ## symbol stub for: _compat_mode
100002f6c:	test	al, al
100002f6e:	je	0x100002f92
100002f70:	mov	rdi, qword ptr [r13 + 0x30]
100002f74:	lea	rsi, [rbp - 0x110]
100002f7b:	call	0x100003b16 ## symbol stub for: _stat$INODE64
100002f80:	test	eax, eax
100002f82:	jns	0x100002f92
100002f84:	call	0x100003a86 ## symbol stub for: ___error
100002f89:	cmp	dword ptr [rax], 0x3e
100002f8c:	je	0x1000037aa
100002f92:	mov	rdi, r13
100002f95:	call	0x1000038fe
100002f9a:	test	eax, eax
100002f9c:	jne	0x100003665
100002fa2:	cmp	dword ptr [rbp - 0x48], 0x0
100002fa6:	jne	0x1000035cd
100002fac:	mov	rbx, qword ptr [r13 + 0x60]
100002fb0:	cmp	word ptr [rbx + 0x6], 0x2
100002fb5:	jb	0x1000035cd
100002fbb:	mov	r12, qword ptr [rip + 0x11d6]
100002fc2:	test	r12, r12
100002fc5:	je	0x10000322a
100002fcb:	mov	rdi, qword ptr [rip + 0x11d6]
100002fd2:	jmp	0x100003264
100002fd7:	xorps	xmm0, xmm0
100002fda:	movaps	xmmword ptr [rbp - 0x110], xmm0
100002fe1:	mov	qword ptr [rbp - 0x100], 0x0
100002fec:	mov	word ptr [rbp - 0x110], 0x5
100002ff5:	mov	dword ptr [rbp - 0x104], 0x1
100002fff:	mov	rdi, qword ptr [r13 + 0x30]
100003003:	mov	ecx, 0x8
100003008:	lea	rsi, [rbp - 0x110]
10000300f:	lea	rdx, [rbp - 0x70]
100003013:	xor	r8d, r8d
100003016:	call	0x100003ae0 ## symbol stub for: _getattrlist
10000301b:	cmp	eax, -0x1
10000301e:	je	0x100003665
100003024:	cmp	dword ptr [rbp - 0x6c], 0x1
100003028:	je	0x100003665
10000302e:	mov	rbx, qword ptr [r13 + 0x60]
100003032:	mov	r15, qword ptr [rip + 0x1187]
100003039:	test	r15, r15
10000303c:	je	0x100003106
100003042:	mov	rdi, qword ptr [rip + 0x1187]
100003049:	jmp	0x100003140
10000304e:	mov	rax, qword ptr [rax + 0x68]
100003052:	mov	rcx, qword ptr [rip + 0x1127]
100003059:	cqo
10000305b:	idiv	rcx
10000305e:	cmp	rdx, 0x1
100003062:	sbb	rax, -0x1
100003066:	add	rax, qword ptr [r13 + 0x18]
10000306a:	mov	qword ptr [r13 + 0x18], rax
10000306e:	mov	rdx, qword ptr [r13 + 0x8]
100003072:	add	qword ptr [rdx + 0x18], rax
100003076:	movsx	eax, word ptr [r13 + 0x56]
10000307b:	cmp	dword ptr [rbp - 0x2c], eax
10000307e:	jl	0x10000336b
100003084:	mov	rsi, qword ptr [rbp - 0x38]
100003088:	mov	rdi, qword ptr [r13 + 0x18]
10000308c:	imul	rcx, rdi
100003090:	mov	rax, rcx
100003093:	cqo
100003095:	idiv	qword ptr [rip + 0x10ec]
10000309c:	cmp	rdx, 0x1
1000030a0:	mov	rcx, rax
1000030a3:	sbb	rcx, -0x1
1000030a7:	cmp	rsi, rcx
1000030aa:	ja	0x10000336b
1000030b0:	cmp	dword ptr [rip + 0x10c5], 0x0
1000030b7:	jle	0x10000334e
1000030bd:	call	0x1000039df
1000030c2:	mov	rsi, qword ptr [r13 + 0x30]
1000030c6:	lea	rdi, [rip + 0xd0a] ## literal pool for: "\t%s\n"
1000030cd:	xor	eax, eax
1000030cf:	call	0x100003afe ## symbol stub for: _printf
1000030d4:	jmp	0x10000336b
1000030d9:	mov	rbx, qword ptr [r13 + 0x30]
1000030dd:	mov	edi, dword ptr [r13 + 0x38]
1000030e1:	call	0x100003b2e ## symbol stub for: _strerror
1000030e6:	lea	rdi, [rip + 0xd30] ## literal pool for: "%s: %s"
1000030ed:	mov	rsi, rbx
1000030f0:	mov	rdx, rax
1000030f3:	xor	eax, eax
1000030f5:	call	0x100003b3a ## symbol stub for: _warnx
1000030fa:	mov	dword ptr [rbp - 0x4c], 0x1
100003101:	jmp	0x100003665
100003106:	mov	qword ptr [rip + 0x10bf], 0x2000
100003111:	mov	edi, 0x10000
100003116:	call	0x100003af8 ## symbol stub for: _malloc
10000311b:	mov	qword ptr [rip + 0x109e], rax
100003122:	test	rax, rax
100003125:	je	0x1000037c1
10000312b:	mov	r15, rax
10000312e:	mov	esi, 0x10000
100003133:	mov	rdi, rax
100003136:	call	0x100003a80 ## symbol stub for: ___bzero
10000313b:	mov	edi, 0x2000
100003140:	cmp	byte ptr [rip + 0x1099], 0x0
100003147:	jne	0x1000033b6
10000314d:	lea	r12, [rdi + rdi]
100003151:	lea	rax, [r12 + 4*r12]
100003155:	cmp	qword ptr [rip + 0x107c], rax
10000315c:	jbe	0x1000033b6
100003162:	mov	esi, 0x8
100003167:	mov	rdi, r12
10000316a:	call	0x100003a98 ## symbol stub for: _calloc
10000316f:	mov	r15, rax
100003172:	test	rax, rax
100003175:	jne	0x1000031ae
100003177:	mov	rdi, qword ptr [rip + 0x104a]
10000317e:	test	rdi, rdi
100003181:	je	0x1000031ae
100003183:	mov	rax, qword ptr [rdi]
100003186:	mov	qword ptr [rip + 0x103b], rax
10000318d:	call	0x100003ac2 ## symbol stub for: _free
100003192:	mov	rdi, qword ptr [rip + 0x102f]
100003199:	test	rdi, rdi
10000319c:	jne	0x100003183
10000319e:	mov	esi, 0x8
1000031a3:	mov	rdi, r12
1000031a6:	call	0x100003a98 ## symbol stub for: _calloc
1000031ab:	mov	r15, rax
1000031ae:	test	r15, r15
1000031b1:	je	0x1000036ba
1000031b7:	mov	r8, qword ptr [rip + 0x1012]
1000031be:	test	r8, r8
1000031c1:	je	0x100003399
1000031c7:	mov	r9, rbx
1000031ca:	mov	rdi, qword ptr [rip + 0xfef]
1000031d1:	xor	esi, esi
1000031d3:	mov	rcx, qword ptr [rdi + 8*rsi]
1000031d7:	test	rcx, rcx
1000031da:	je	0x10000321a
1000031dc:	mov	rax, qword ptr [rcx]
1000031df:	mov	qword ptr [rdi + 8*rsi], rax
1000031e3:	movsxd	rax, dword ptr [rcx + 0x14]
1000031e7:	xor	rax, qword ptr [rcx + 0x18]
1000031eb:	xor	edx, edx
1000031ed:	div	r12
1000031f0:	movsxd	rax, edx
1000031f3:	mov	rbx, qword ptr [r15 + 8*rax]
1000031f7:	mov	edx, 0x0
1000031fc:	test	rbx, rbx
1000031ff:	je	0x100003209
100003201:	mov	qword ptr [rbx + 0x8], rcx
100003205:	mov	rdx, qword ptr [r15 + 8*rax]
100003209:	mov	qword ptr [rcx], rdx
10000320c:	mov	qword ptr [rcx + 0x8], 0x0
100003214:	mov	qword ptr [r15 + 8*rax], rcx
100003218:	jmp	0x1000031d3
10000321a:	inc	rsi
10000321d:	cmp	rsi, r8
100003220:	jne	0x1000031d3
100003222:	mov	rbx, r9
100003225:	jmp	0x1000033a0
10000322a:	mov	qword ptr [rip + 0xf73], 0x2000
100003235:	mov	edi, 0x10000
10000323a:	call	0x100003af8 ## symbol stub for: _malloc
10000323f:	mov	qword ptr [rip + 0xf52], rax
100003246:	test	rax, rax
100003249:	je	0x1000037cd
10000324f:	mov	r12, rax
100003252:	mov	esi, 0x10000
100003257:	mov	rdi, rax
10000325a:	call	0x100003a80 ## symbol stub for: ___bzero
10000325f:	mov	edi, 0x2000
100003264:	cmp	byte ptr [rip + 0xf4d], 0x0
10000326b:	jne	0x1000034d5
100003271:	lea	r15, [rdi + rdi]
100003275:	lea	rax, [r15 + 4*r15]
100003279:	cmp	qword ptr [rip + 0xf30], rax
100003280:	jbe	0x1000034d5
100003286:	mov	esi, 0x8
10000328b:	mov	rdi, r15
10000328e:	call	0x100003a98 ## symbol stub for: _calloc
100003293:	mov	r12, rax
100003296:	test	rax, rax
100003299:	jne	0x1000032d2
10000329b:	mov	rdi, qword ptr [rip + 0xefe]
1000032a2:	test	rdi, rdi
1000032a5:	je	0x1000032d2
1000032a7:	mov	rax, qword ptr [rdi]
1000032aa:	mov	qword ptr [rip + 0xeef], rax
1000032b1:	call	0x100003ac2 ## symbol stub for: _free
1000032b6:	mov	rdi, qword ptr [rip + 0xee3]
1000032bd:	test	rdi, rdi
1000032c0:	jne	0x1000032a7
1000032c2:	mov	esi, 0x8
1000032c7:	mov	rdi, r15
1000032ca:	call	0x100003a98 ## symbol stub for: _calloc
1000032cf:	mov	r12, rax
1000032d2:	test	r12, r12
1000032d5:	je	0x1000036e2
1000032db:	mov	r8, qword ptr [rip + 0xec6]
1000032e2:	test	r8, r8
1000032e5:	je	0x1000034b8
1000032eb:	mov	r9, rbx
1000032ee:	mov	rdi, qword ptr [rip + 0xea3]
1000032f5:	xor	esi, esi
1000032f7:	mov	rcx, qword ptr [rdi + 8*rsi]
1000032fb:	test	rcx, rcx
1000032fe:	je	0x10000333e
100003300:	mov	rax, qword ptr [rcx]
100003303:	mov	qword ptr [rdi + 8*rsi], rax
100003307:	movsxd	rax, dword ptr [rcx + 0x14]
10000330b:	xor	rax, qword ptr [rcx + 0x18]
10000330f:	xor	edx, edx
100003311:	div	r15
100003314:	movsxd	rax, edx
100003317:	mov	rbx, qword ptr [r12 + 8*rax]
10000331b:	mov	edx, 0x0
100003320:	test	rbx, rbx
100003323:	je	0x10000332d
100003325:	mov	qword ptr [rbx + 0x8], rcx
100003329:	mov	rdx, qword ptr [r12 + 8*rax]
10000332d:	mov	qword ptr [rcx], rdx
100003330:	mov	qword ptr [rcx + 0x8], 0x0
100003338:	mov	qword ptr [r12 + 8*rax], rcx
10000333c:	jmp	0x1000032f7
10000333e:	inc	rsi
100003341:	cmp	rsi, r8
100003344:	jne	0x1000032f7
100003346:	mov	rbx, r9
100003349:	jmp	0x1000034bf
10000334e:	cmp	rdx, 0x1
100003352:	sbb	rax, -0x1
100003356:	mov	rdx, qword ptr [r13 + 0x30]
10000335a:	lea	rdi, [rip + 0xa7b] ## literal pool for: "%jd\t%s\n"
100003361:	mov	rsi, rax
100003364:	xor	eax, eax
100003366:	call	0x100003afe ## symbol stub for: _printf
10000336b:	cmp	dword ptr [rip + 0xe22], 0x0
100003372:	je	0x100003665
100003378:	mov	dword ptr [rip + 0xe12], 0x0
100003382:	mov	rsi, qword ptr [r13 + 0x30]
100003386:	lea	rdi, [rip + 0xa4a] ## literal pool for: "\t%s\n"
10000338d:	xor	eax, eax
10000338f:	call	0x100003afe ## symbol stub for: _printf
100003394:	jmp	0x100003665
100003399:	mov	rdi, qword ptr [rip + 0xe20]
1000033a0:	call	0x100003ac2 ## symbol stub for: _free
1000033a5:	mov	qword ptr [rip + 0xe14], r15
1000033ac:	mov	qword ptr [rip + 0xe1d], r12
1000033b3:	mov	rdi, r12
1000033b6:	movsxd	rcx, dword ptr [rbx]
1000033b9:	mov	r12, rbx
1000033bc:	mov	rsi, qword ptr [rbx + 0x8]
1000033c0:	mov	rax, rcx
1000033c3:	xor	rax, rsi
1000033c6:	xor	edx, edx
1000033c8:	div	rdi
1000033cb:	movsxd	rbx, edx
1000033ce:	mov	rdi, qword ptr [r15 + 8*rbx]
1000033d2:	test	rdi, rdi
1000033d5:	je	0x1000033e7
1000033d7:	cmp	dword ptr [rdi + 0x14], ecx
1000033da:	jne	0x1000033e2
1000033dc:	cmp	qword ptr [rdi + 0x18], rsi
1000033e0:	je	0x10000340c
1000033e2:	mov	rdi, qword ptr [rdi]
1000033e5:	jmp	0x1000033d2
1000033e7:	cmp	byte ptr [rip + 0xdf2], 0x0
1000033ee:	jne	0x100003665
1000033f4:	mov	rax, qword ptr [rip + 0xdcd]
1000033fb:	test	rax, rax
1000033fe:	je	0x100003461
100003400:	mov	rdx, qword ptr [rax]
100003403:	mov	qword ptr [rip + 0xdbe], rdx
10000340a:	jmp	0x10000347d
10000340c:	mov	eax, dword ptr [rdi + 0x10]
10000340f:	lea	ecx, [rax - 0x1]
100003412:	mov	dword ptr [rdi + 0x10], ecx
100003415:	cmp	eax, 0x1
100003418:	jg	0x100002efa
10000341e:	mov	rax, qword ptr [rdi + 0x8]
100003422:	test	rax, rax
100003425:	je	0x10000342d
100003427:	mov	rcx, qword ptr [rdi]
10000342a:	mov	qword ptr [rax], rcx
10000342d:	mov	rcx, qword ptr [rdi]
100003430:	test	rcx, rcx
100003433:	je	0x100003439
100003435:	mov	qword ptr [rcx + 0x8], rax
100003439:	cmp	qword ptr [r15 + 8*rbx], rdi
10000343d:	jne	0x100003443
10000343f:	mov	qword ptr [r15 + 8*rbx], rcx
100003443:	dec	qword ptr [rip + 0xd8e]
10000344a:	cmp	byte ptr [rip + 0xd8f], 0x1
100003451:	jne	0x100003691
100003457:	call	0x100003ac2 ## symbol stub for: _free
10000345c:	jmp	0x100002efa
100003461:	mov	edi, 0x20
100003466:	call	0x100003af8 ## symbol stub for: _malloc
10000346b:	test	rax, rax
10000346e:	je	0x10000370a
100003474:	mov	ecx, dword ptr [r12]
100003478:	mov	rsi, qword ptr [r12 + 0x8]
10000347d:	mov	dword ptr [rax + 0x14], ecx
100003480:	mov	qword ptr [rax + 0x18], rsi
100003484:	mov	ecx, dword ptr [rbp - 0x6c]
100003487:	dec	ecx
100003489:	mov	dword ptr [rax + 0x10], ecx
10000348c:	inc	qword ptr [rip + 0xd45]
100003493:	mov	rcx, qword ptr [r15 + 8*rbx]
100003497:	mov	qword ptr [rax], rcx
10000349a:	mov	qword ptr [rax + 0x8], 0x0
1000034a2:	mov	rcx, qword ptr [r15 + 8*rbx]
1000034a6:	test	rcx, rcx
1000034a9:	je	0x1000034af
1000034ab:	mov	qword ptr [rcx + 0x8], rax
1000034af:	mov	qword ptr [r15 + 8*rbx], rax
1000034b3:	jmp	0x100003665
1000034b8:	mov	rdi, qword ptr [rip + 0xcd9]
1000034bf:	call	0x100003ac2 ## symbol stub for: _free
1000034c4:	mov	qword ptr [rip + 0xccd], r12
1000034cb:	mov	qword ptr [rip + 0xcd6], r15
1000034d2:	mov	rdi, r15
1000034d5:	movsxd	rcx, dword ptr [rbx]
1000034d8:	mov	rsi, qword ptr [rbx + 0x8]
1000034dc:	mov	rax, rcx
1000034df:	xor	rax, rsi
1000034e2:	xor	edx, edx
1000034e4:	div	rdi
1000034e7:	movsxd	r15, edx
1000034ea:	mov	rdi, qword ptr [r12 + 8*r15]
1000034ee:	test	rdi, rdi
1000034f1:	je	0x100003503
1000034f3:	cmp	dword ptr [rdi + 0x14], ecx
1000034f6:	jne	0x1000034fe
1000034f8:	cmp	qword ptr [rdi + 0x18], rsi
1000034fc:	je	0x100003528
1000034fe:	mov	rdi, qword ptr [rdi]
100003501:	jmp	0x1000034ee
100003503:	cmp	byte ptr [rip + 0xcae], 0x0
10000350a:	jne	0x1000035cd
100003510:	mov	rax, qword ptr [rip + 0xc89]
100003517:	test	rax, rax
10000351a:	je	0x10000357d
10000351c:	mov	rdx, qword ptr [rax]
10000351f:	mov	qword ptr [rip + 0xc7a], rdx
100003526:	jmp	0x100003596
100003528:	mov	eax, dword ptr [rdi + 0x10]
10000352b:	lea	ecx, [rax - 0x1]
10000352e:	mov	dword ptr [rdi + 0x10], ecx
100003531:	cmp	eax, 0x1
100003534:	jg	0x100003665
10000353a:	mov	rax, qword ptr [rdi + 0x8]
10000353e:	test	rax, rax
100003541:	je	0x100003549
100003543:	mov	rcx, qword ptr [rdi]
100003546:	mov	qword ptr [rax], rcx
100003549:	mov	rcx, qword ptr [rdi]
10000354c:	test	rcx, rcx
10000354f:	je	0x100003555
100003551:	mov	qword ptr [rcx + 0x8], rax
100003555:	cmp	qword ptr [r12 + 8*r15], rdi
100003559:	jne	0x10000355f
10000355b:	mov	qword ptr [r12 + 8*r15], rcx
10000355f:	dec	qword ptr [rip + 0xc4a]
100003566:	cmp	byte ptr [rip + 0xc4b], 0x1
10000356d:	jne	0x1000036a7
100003573:	call	0x100003ac2 ## symbol stub for: _free
100003578:	jmp	0x100003665
10000357d:	mov	edi, 0x20
100003582:	call	0x100003af8 ## symbol stub for: _malloc
100003587:	test	rax, rax
10000358a:	je	0x100003724
100003590:	mov	ecx, dword ptr [rbx]
100003592:	mov	rsi, qword ptr [rbx + 0x8]
100003596:	mov	dword ptr [rax + 0x14], ecx
100003599:	mov	qword ptr [rax + 0x18], rsi
10000359d:	movzx	ecx, word ptr [rbx + 0x6]
1000035a1:	dec	ecx
1000035a3:	mov	dword ptr [rax + 0x10], ecx
1000035a6:	inc	qword ptr [rip + 0xc03]
1000035ad:	mov	rcx, qword ptr [r12 + 8*r15]
1000035b1:	mov	qword ptr [rax], rcx
1000035b4:	mov	qword ptr [rax + 0x8], 0x0
1000035bc:	mov	rcx, qword ptr [r12 + 8*r15]
1000035c0:	test	rcx, rcx
1000035c3:	je	0x1000035c9
1000035c5:	mov	qword ptr [rcx + 0x8], rax
1000035c9:	mov	qword ptr [r12 + 8*r15], rax
1000035cd:	mov	rax, qword ptr [r13 + 0x60]
1000035d1:	cmp	byte ptr [rip + 0xba0], 0x1
1000035d8:	jne	0x1000035e0
1000035da:	mov	rax, qword ptr [rax + 0x60]
1000035de:	jmp	0x1000035e4
1000035e0:	mov	rax, qword ptr [rax + 0x68]
1000035e4:	mov	rcx, qword ptr [rip + 0xb95]
1000035eb:	cqo
1000035ed:	idiv	rcx
1000035f0:	mov	rbx, rax
1000035f3:	cmp	rdx, 0x1
1000035f7:	sbb	rbx, -0x1
1000035fb:	cmp	dword ptr [rbp - 0x58], 0x0
1000035ff:	je	0x100003626
100003601:	cmp	dword ptr [rip + 0xb74], 0x0
100003608:	jle	0x100003630
10000360a:	mov	rdi, rbx
10000360d:	call	0x1000039df
100003612:	mov	rsi, qword ptr [r13 + 0x30]
100003616:	lea	rdi, [rip + 0x7ba] ## literal pool for: "\t%s\n"
10000361d:	xor	eax, eax
10000361f:	call	0x100003afe ## symbol stub for: _printf
100003624:	jmp	0x10000365d
100003626:	cmp	word ptr [r13 + 0x56], 0x0
10000362c:	jne	0x10000365d
10000362e:	jmp	0x100003601
100003630:	imul	rcx, rbx
100003634:	mov	rax, rcx
100003637:	cqo
100003639:	idiv	qword ptr [rip + 0xb48]
100003640:	cmp	rdx, 0x1
100003644:	sbb	rax, -0x1
100003648:	mov	rdx, qword ptr [r13 + 0x30]
10000364c:	lea	rdi, [rip + 0x789] ## literal pool for: "%jd\t%s\n"
100003653:	mov	rsi, rax
100003656:	xor	eax, eax
100003658:	call	0x100003afe ## symbol stub for: _printf
10000365d:	mov	rax, qword ptr [r13 + 0x8]
100003661:	add	qword ptr [rax + 0x18], rbx
100003665:	mov	rax, qword ptr [r13 + 0x8]
100003669:	mov	rbx, qword ptr [rax + 0x18]
10000366d:	call	0x100003a86 ## symbol stub for: ___error
100003672:	mov	dword ptr [rax], 0x0
100003678:	mov	rdi, r14
10000367b:	call	0x100003ace ## symbol stub for: _fts_read$INODE64
100003680:	mov	r13, rax
100003683:	test	rax, rax
100003686:	jne	0x100002ec7
10000368c:	jmp	0x100002e86
100003691:	mov	rax, qword ptr [rip + 0xb30]
100003698:	mov	qword ptr [rdi], rax
10000369b:	mov	qword ptr [rip + 0xb26], rdi
1000036a2:	jmp	0x100002efa
1000036a7:	mov	rax, qword ptr [rip + 0xaf2]
1000036ae:	mov	qword ptr [rdi], rax
1000036b1:	mov	qword ptr [rip + 0xae8], rdi
1000036b8:	jmp	0x100003665
1000036ba:	mov	byte ptr [rip + 0xb1f], 0x1
1000036c1:	lea	rdi, [rip + 0x7fe] ## literal pool for: "No more memory for tracking directory hard links"
1000036c8:	xor	eax, eax
1000036ca:	call	0x100003b3a ## symbol stub for: _warnx
1000036cf:	mov	rdi, qword ptr [rip + 0xafa]
1000036d6:	mov	r15, qword ptr [rip + 0xae3]
1000036dd:	jmp	0x1000033b6
1000036e2:	mov	byte ptr [rip + 0xacf], 0x1
1000036e9:	lea	rdi, [rip + 0x784] ## literal pool for: "No more memory for tracking hard links"
1000036f0:	xor	eax, eax
1000036f2:	call	0x100003b3a ## symbol stub for: _warnx
1000036f7:	mov	rdi, qword ptr [rip + 0xaaa]
1000036fe:	mov	r12, qword ptr [rip + 0xa93]
100003705:	jmp	0x1000034d5
10000370a:	mov	byte ptr [rip + 0xacf], 0x1
100003711:	lea	rdi, [rip + 0x75c] ## literal pool for: "No more memory for tracking hard links"
100003718:	xor	eax, eax
10000371a:	call	0x100003b3a ## symbol stub for: _warnx
10000371f:	jmp	0x100003665
100003724:	mov	byte ptr [rip + 0xa8d], 0x1
10000372b:	lea	rdi, [rip + 0x742] ## literal pool for: "No more memory for tracking hard links"
100003732:	xor	eax, eax
100003734:	call	0x100003b3a ## symbol stub for: _warnx
100003739:	jmp	0x1000035cd
10000373e:	lea	rsi, [rip + 0x6f7] ## literal pool for: "fts_read"
100003745:	mov	edi, 0x1
10000374a:	xor	eax, eax
10000374c:	call	0x100003aa4 ## symbol stub for: _err
100003751:	imul	rbx, qword ptr [rip + 0xa27]
100003759:	mov	rax, rbx
10000375c:	cqo
10000375e:	idiv	qword ptr [rip + 0xa23]
100003765:	cmp	rdx, 0x1
100003769:	sbb	rax, -0x1
10000376d:	lea	rdi, [rip + 0x6d1] ## literal pool for: "%jd\ttotal\n"
100003774:	mov	rsi, rax
100003777:	xor	eax, eax
100003779:	call	0x100003afe ## symbol stub for: _printf
10000377e:	call	0x100003a49
100003783:	mov	edi, dword ptr [rbp - 0x4c]
100003786:	call	0x100003ab0 ## symbol stub for: _exit
10000378b:	mov	rax, qword ptr [r13]
10000378f:	mov	rdx, qword ptr [r13 + 0x30]
100003793:	mov	rcx, qword ptr [rax + 0x30]
100003797:	lea	rsi, [rip + 0x656] ## literal pool for: "Can't follow symlink cycle from %s to %s"
10000379e:	mov	edi, 0x1
1000037a3:	xor	eax, eax
1000037a5:	call	0x100003aaa ## symbol stub for: _errx
1000037aa:	mov	rdx, qword ptr [r13 + 0x30]
1000037ae:	lea	rsi, [rip + 0x66f] ## literal pool for: "Too many symlinks at %s"
1000037b5:	mov	edi, 0x1
1000037ba:	xor	eax, eax
1000037bc:	call	0x100003aaa ## symbol stub for: _errx
1000037c1:	lea	rsi, [rip + 0x6d3] ## literal pool for: "No memory for directory hardlink detection"
1000037c8:	jmp	0x100002ca2
1000037cd:	lea	rsi, [rip + 0x67f] ## literal pool for: "No memory for hardlink detection"
1000037d4:	jmp	0x100002ca2
1000037d9:	nop	dword ptr [rax]
	.long 4294963880	@ KIND_JUMP_TABLE32
	.long 4294963943	@ KIND_JUMP_TABLE32
	.long 4294964537	@ KIND_JUMP_TABLE32
	.long 4294964537	@ KIND_JUMP_TABLE32
	.long 4294964537	@ KIND_JUMP_TABLE32
	.long 4294964537	@ KIND_JUMP_TABLE32
	.long 4294964537	@ KIND_JUMP_TABLE32
	.long 4294963925	@ KIND_JUMP_TABLE32
	.long 4294964011	@ KIND_JUMP_TABLE32
	.long 4294964537	@ KIND_JUMP_TABLE32
	.long 4294964537	@ KIND_JUMP_TABLE32
	.long 4294963910	@ KIND_JUMP_TABLE32
	.long 4294963797	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964166	@ KIND_JUMP_TABLE32
	.long 4294964178	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964262	@ KIND_JUMP_TABLE32
	.long 4294964139	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964113	@ KIND_JUMP_TABLE32
	.long 4294964250	@ KIND_JUMP_TABLE32
	.long 4294964072	@ KIND_JUMP_TABLE32
	.long 4294964154	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294963740	@ KIND_JUMP_TABLE32
	.long 4294964288	@ KIND_JUMP_TABLE32
	.long 4294964311	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964302	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964489	@ KIND_JUMP_TABLE32
	.long 4294964098	@ KIND_JUMP_TABLE32
	.long 4294964830	@ KIND_JUMP_TABLE32
	.long 4294964867	@ KIND_JUMP_TABLE32
	.long 4294964998	@ KIND_JUMP_TABLE32
	.long 4294965325	@ KIND_JUMP_TABLE32
	.long 4294964998	@ KIND_JUMP_TABLE32
	.long 4294964899	@ KIND_JUMP_TABLE32
	.long 4294965325	@ KIND_JUMP_TABLE32
	.long 4294964998	@ KIND_JUMP_TABLE32
	.long 4294964998	@ KIND_JUMP_TABLE32
	.long 4294965325	@ KIND_JUMP_TABLE32
	.long 4294964998	@ KIND_JUMP_TABLE32
	.long 4294964998	@ KIND_JUMP_TABLE32
	.long 4294964941	@ KIND_JUMP_TABLE32
1000038c0:	push	rbp
1000038c1:	mov	rbp, rsp
1000038c4:	mov	rax, qword ptr [rip + 0x745] ## literal pool symbol address: ___stderrp
1000038cb:	mov	rcx, qword ptr [rax]
1000038ce:	lea	rdi, [rip + 0x626] ## literal pool for: "usage: du [-Aclnx] [-H | -L | -P] [-g | -h | -k | -m] [-a | -s | -d depth] [-B blocksize] [-I mask] [-t threshold] [file ...]\n"
1000038d5:	mov	esi, 0x7e
1000038da:	mov	edx, 0x1
1000038df:	call	0x100003ada ## symbol stub for: _fwrite
1000038e4:	mov	edi, 0x40
1000038e9:	call	0x100003ab0 ## symbol stub for: _exit
1000038ee:	push	rbp
1000038ef:	mov	rbp, rsp
1000038f2:	mov	dword ptr [rip + 0x898], 0x1
1000038fc:	pop	rbp
1000038fd:	ret
1000038fe:	push	rbp
1000038ff:	mov	rbp, rsp
100003902:	push	r14
100003904:	push	rbx
100003905:	sub	rsp, 0x880
10000390c:	mov	r14, rdi
10000390f:	mov	rax, qword ptr [rip + 0x6f2] ## literal pool symbol address: ___stack_chk_guard
100003916:	mov	rax, qword ptr [rax]
100003919:	mov	qword ptr [rbp - 0x18], rax
10000391d:	mov	rax, qword ptr [rdi + 0x60]
100003921:	movzx	eax, word ptr [rax + 0x4]
100003925:	and	eax, 0xf000
10000392a:	cmp	eax, 0x4000
10000392f:	jne	0x100003945
100003931:	lea	rsi, [r14 + 0x68]
100003935:	lea	rdi, [rip + 0x655] ## literal pool for: "fd"
10000393c:	call	0x100003b22 ## symbol stub for: _strcmp
100003941:	test	eax, eax
100003943:	je	0x10000398c
100003945:	cmp	byte ptr [rip + 0x844], 0x1
10000394c:	jne	0x10000395d
10000394e:	mov	rcx, qword ptr [r14 + 0x60]
100003952:	mov	eax, 0x1
100003957:	test	byte ptr [rcx + 0x74], 0x1
10000395b:	jne	0x1000039be
10000395d:	mov	rbx, qword ptr [rip + 0x884]
100003964:	test	rbx, rbx
100003967:	je	0x100003988
100003969:	add	r14, 0x68
10000396d:	mov	rdi, qword ptr [rbx]
100003970:	mov	rsi, r14
100003973:	xor	edx, edx
100003975:	call	0x100003abc ## symbol stub for: _fnmatch
10000397a:	cmp	eax, 0x1
10000397d:	jne	0x1000039b9
10000397f:	mov	rbx, qword ptr [rbx + 0x8]
100003983:	test	rbx, rbx
100003986:	jne	0x10000396d
100003988:	xor	eax, eax
10000398a:	jmp	0x1000039be
10000398c:	mov	rdi, qword ptr [r14 + 0x28]
100003990:	lea	rsi, [rbp - 0x890]
100003997:	call	0x100003b1c ## symbol stub for: _statfs$INODE64
10000399c:	test	eax, eax
10000399e:	js	0x100003945
1000039a0:	mov	eax, 0x66766564
1000039a5:	xor	eax, dword ptr [rbp - 0x848]
1000039ab:	movzx	ecx, word ptr [rbp - 0x844]
1000039b2:	xor	ecx, 0x73
1000039b5:	or	ecx, eax
1000039b7:	jne	0x100003945
1000039b9:	mov	eax, 0x1
1000039be:	mov	rcx, qword ptr [rip + 0x643] ## literal pool symbol address: ___stack_chk_guard
1000039c5:	mov	rcx, qword ptr [rcx]
1000039c8:	cmp	rcx, qword ptr [rbp - 0x18]
1000039cc:	jne	0x1000039da
1000039ce:	add	rsp, 0x880
1000039d5:	pop	rbx
1000039d6:	pop	r14
1000039d8:	pop	rbp
1000039d9:	ret
1000039da:	call	0x100003a8c ## symbol stub for: ___stack_chk_fail
1000039df:	push	rbp
1000039e0:	mov	rbp, rsp
1000039e3:	push	rbx
1000039e4:	push	rax
1000039e5:	imul	rdi, qword ptr [rip + 0x793]
1000039ed:	mov	rdx, rdi
1000039f0:	shl	rdx, 0x9
1000039f4:	cmp	byte ptr [rip + 0x77d], 0x0
1000039fb:	cmovne	rdx, rdi
1000039ff:	xor	eax, eax
100003a01:	cmp	dword ptr [rip + 0x774], 0x2
100003a08:	sete	al
100003a0b:	lea	r9d, [8*rax + 0x7]
100003a13:	lea	rcx, [rip + 0x31f] ## literal pool for: ""
100003a1a:	lea	rbx, [rbp - 0xd]
100003a1e:	mov	esi, 0x5
100003a23:	mov	rdi, rbx
100003a26:	mov	r8d, 0x20
100003a2c:	call	0x100003af2 ## symbol stub for: _humanize_number
100003a31:	lea	rdi, [rip + 0x4bf] ## literal pool for: "%4s"
100003a38:	mov	rsi, rbx
100003a3b:	xor	eax, eax
100003a3d:	call	0x100003afe ## symbol stub for: _printf
100003a42:	add	rsp, 0x8
100003a46:	pop	rbx
100003a47:	pop	rbp
100003a48:	ret
100003a49:	push	rbp
100003a4a:	mov	rbp, rsp
100003a4d:	push	rbx
100003a4e:	push	rax
100003a4f:	mov	rbx, qword ptr [rip + 0x792]
100003a56:	test	rbx, rbx
100003a59:	je	0x100003a78
100003a5b:	mov	rax, qword ptr [rbx + 0x8]
100003a5f:	mov	qword ptr [rip + 0x782], rax
100003a66:	mov	rdi, qword ptr [rbx]
100003a69:	call	0x100003ac2 ## symbol stub for: _free
100003a6e:	mov	rdi, rbx
100003a71:	call	0x100003ac2 ## symbol stub for: _free
100003a76:	jmp	0x100003a4f
100003a78:	add	rsp, 0x8
100003a7c:	pop	rbx
100003a7d:	pop	rbp
100003a7e:	ret
