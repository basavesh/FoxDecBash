tar_x86_64:
(__TEXT,__text) section
100004080:	push	rbp
100004081:	mov	rbp, rsp
100004084:	mov	rdx, rsi
100004087:	xor	esi, esi
100004089:	pop	rbp
10000408a:	jmp	0x10000408f
10000408f:	push	rbp
100004090:	mov	rbp, rsp
100004093:	push	r15
100004095:	push	r14
100004097:	push	r12
100004099:	push	rbx
10000409a:	mov	r12, rdx
10000409d:	mov	r14d, esi
1000040a0:	mov	r15, rdi
1000040a3:	mov	rdi, qword ptr [rdi + 0x8]
1000040a7:	movsxd	rsi, dword ptr [r15 + 0x10]
1000040ab:	shl	rsi, 0x4
1000040af:	add	rsi, 0x10
1000040b3:	call	0x10000a0fc ## symbol stub for: _realloc
1000040b8:	test	rax, rax
1000040bb:	je	0x1000040f2
1000040bd:	mov	rbx, rax
1000040c0:	mov	rdi, r12
1000040c3:	call	0x10000a14a ## symbol stub for: _strdup
1000040c8:	test	rax, rax
1000040cb:	je	0x1000040f2
1000040cd:	mov	qword ptr [r15 + 0x8], rbx
1000040d1:	movsxd	rcx, dword ptr [r15 + 0x10]
1000040d5:	lea	edx, [rcx + 0x1]
1000040d8:	shl	rcx, 0x4
1000040dc:	mov	dword ptr [rbx + rcx], r14d
1000040e0:	mov	qword ptr [rbx + rcx + 0x8], rax
1000040e5:	mov	dword ptr [r15 + 0x10], edx
1000040e9:	pop	rbx
1000040ea:	pop	r12
1000040ec:	pop	r14
1000040ee:	pop	r15
1000040f0:	pop	rbp
1000040f1:	ret
1000040f2:	lea	rdx, [rip + 0x67c7] ## literal pool for: "No memory"
1000040f9:	mov	edi, 0x1
1000040fe:	xor	esi, esi
100004100:	xor	eax, eax
100004102:	call	0x1000099b3
100004107:	push	rbp
100004108:	mov	rbp, rsp
10000410b:	mov	rdx, rsi
10000410e:	mov	esi, 0x1
100004113:	pop	rbp
100004114:	jmp	0x10000408f
100004119:	push	rbp
10000411a:	mov	rbp, rsp
10000411d:	push	r15
10000411f:	push	r14
100004121:	push	r13
100004123:	push	r12
100004125:	push	rbx
100004126:	push	rax
100004127:	mov	eax, dword ptr [rdi + 0x10]
10000412a:	test	eax, eax
10000412c:	jle	0x100004170
10000412e:	mov	r14, rsi
100004131:	mov	r12, rdi
100004134:	xor	r13d, r13d
100004137:	mov	ebx, 0x8
10000413c:	xor	r15d, r15d
10000413f:	mov	rcx, qword ptr [r12 + 0x8]
100004144:	cmp	dword ptr [rcx + rbx - 0x8], 0x0
100004149:	je	0x10000415f
10000414b:	mov	rsi, qword ptr [rcx + rbx]
10000414f:	mov	rdi, r14
100004152:	call	0x100009f9a ## symbol stub for: _archive_read_support_filter_program
100004157:	inc	r15d
10000415a:	mov	eax, dword ptr [r12 + 0x10]
10000415f:	inc	r13
100004162:	movsxd	rcx, eax
100004165:	add	rbx, 0x10
100004169:	cmp	r13, rcx
10000416c:	jl	0x10000413f
10000416e:	jmp	0x100004173
100004170:	xor	r15d, r15d
100004173:	mov	eax, r15d
100004176:	add	rsp, 0x8
10000417a:	pop	rbx
10000417b:	pop	r12
10000417d:	pop	r13
10000417f:	pop	r14
100004181:	pop	r15
100004183:	pop	rbp
100004184:	ret
100004185:	push	rbp
100004186:	mov	rbp, rsp
100004189:	push	r15
10000418b:	push	r14
10000418d:	push	r13
10000418f:	push	r12
100004191:	push	rbx
100004192:	push	rax
100004193:	cmp	dword ptr [rdi + 0x10], 0x0
100004197:	jle	0x1000041e4
100004199:	mov	r14, rdx
10000419c:	mov	r15, rsi
10000419f:	mov	r12, rdi
1000041a2:	mov	ebx, 0x8
1000041a7:	xor	r13d, r13d
1000041aa:	mov	rax, qword ptr [r12 + 0x8]
1000041af:	cmp	dword ptr [rax + rbx - 0x8], 0x0
1000041b4:	mov	rsi, qword ptr [rax + rbx]
1000041b8:	mov	rdi, r15
1000041bb:	je	0x1000041c4
1000041bd:	call	0x100009fc4 ## symbol stub for: _archive_write_add_filter_program
1000041c2:	jmp	0x1000041c9
1000041c4:	call	0x100009fbe ## symbol stub for: _archive_write_add_filter_by_name
1000041c9:	cmp	eax, -0x15
1000041cc:	jle	0x1000041e8
1000041ce:	inc	r13
1000041d1:	movsxd	rax, dword ptr [r12 + 0x10]
1000041d6:	add	rbx, 0x10
1000041da:	cmp	r13, rax
1000041dd:	jl	0x1000041aa
1000041df:	mov	eax, r13d
1000041e2:	jmp	0x1000041f4
1000041e4:	xor	eax, eax
1000041e6:	jmp	0x1000041f4
1000041e8:	mov	rcx, qword ptr [r12 + 0x8]
1000041ed:	mov	rcx, qword ptr [rcx + rbx]
1000041f1:	mov	qword ptr [r14], rcx
1000041f4:	add	rsp, 0x8
1000041f8:	pop	rbx
1000041f9:	pop	r12
1000041fb:	pop	r13
1000041fd:	pop	r14
1000041ff:	pop	r15
100004201:	pop	rbp
100004202:	ret
100004203:	push	rbp
100004204:	mov	rbp, rsp
100004207:	push	r14
100004209:	push	rbx
10000420a:	mov	r14, rdi
10000420d:	mov	rdi, rsi
100004210:	call	0x10000a14a ## symbol stub for: _strdup
100004215:	test	rax, rax
100004218:	je	0x10000422d
10000421a:	mov	rbx, rax
10000421d:	mov	rdi, qword ptr [r14]
100004220:	call	0x10000a090 ## symbol stub for: _free
100004225:	mov	qword ptr [r14], rbx
100004228:	pop	rbx
100004229:	pop	r14
10000422b:	pop	rbp
10000422c:	ret
10000422d:	lea	rdx, [rip + 0x668c] ## literal pool for: "No memory"
100004234:	mov	edi, 0x1
100004239:	xor	esi, esi
10000423b:	xor	eax, eax
10000423d:	call	0x1000099b3
100004242:	push	rbp
100004243:	mov	rbp, rsp
100004246:	mov	rax, qword ptr [rdi]
100004249:	pop	rbp
10000424a:	ret
10000424b:	push	rbp
10000424c:	mov	rbp, rsp
10000424f:	push	rbx
100004250:	push	rax
100004251:	mov	rbx, rdi
100004254:	mov	rdi, qword ptr [rdi + 0x8]
100004258:	mov	esi, dword ptr [rbx + 0x10]
10000425b:	call	0x100004276
100004260:	mov	rdi, qword ptr [rbx]
100004263:	call	0x10000a090 ## symbol stub for: _free
100004268:	mov	rdi, rbx
10000426b:	add	rsp, 0x8
10000426f:	pop	rbx
100004270:	pop	rbp
100004271:	jmp	0x10000a090 ## symbol stub for: _free
100004276:	push	rbp
100004277:	mov	rbp, rsp
10000427a:	push	r15
10000427c:	push	r14
10000427e:	push	rbx
10000427f:	push	rax
100004280:	mov	r14, rdi
100004283:	test	esi, esi
100004285:	jle	0x1000042a3
100004287:	mov	r15d, esi
10000428a:	shl	r15, 0x4
10000428e:	xor	ebx, ebx
100004290:	mov	rdi, qword ptr [r14 + rbx + 0x8]
100004295:	call	0x10000a090 ## symbol stub for: _free
10000429a:	add	rbx, 0x10
10000429e:	cmp	r15, rbx
1000042a1:	jne	0x100004290
1000042a3:	mov	rdi, r14
1000042a6:	add	rsp, 0x8
1000042aa:	pop	rbx
1000042ab:	pop	r14
1000042ad:	pop	r15
1000042af:	pop	rbp
1000042b0:	jmp	0x10000a090 ## symbol stub for: _free
1000042b5:	push	rbp
1000042b6:	mov	rbp, rsp
1000042b9:	mov	edi, 0x1
1000042be:	mov	esi, 0x18
1000042c3:	pop	rbp
1000042c4:	jmp	0x10000a036 ## symbol stub for: _calloc
1000042c9:	push	rbp
1000042ca:	mov	rbp, rsp
1000042cd:	push	r15
1000042cf:	push	r14
1000042d1:	push	r13
1000042d3:	push	r12
1000042d5:	push	rbx
1000042d6:	sub	rsp, 0x18
1000042da:	mov	r12, rdi
1000042dd:	mov	rdi, rsi
1000042e0:	call	0x10000a14a ## symbol stub for: _strdup
1000042e5:	test	rax, rax
1000042e8:	je	0x1000044a0
1000042ee:	mov	rbx, rax
1000042f1:	mov	rax, qword ptr [r12 + 0x8]
1000042f6:	mov	qword ptr [rbp - 0x38], rax
1000042fa:	mov	r15d, dword ptr [r12 + 0x10]
1000042ff:	mov	qword ptr [r12 + 0x8], 0x0
100004308:	mov	dword ptr [r12 + 0x10], 0x0
100004311:	mov	rdi, rbx
100004314:	mov	esi, 0x2e
100004319:	call	0x10000a168 ## symbol stub for: _strrchr
10000431e:	test	rax, rax
100004321:	je	0x100004408
100004327:	mov	r14, rax
10000432a:	lea	r13, [rip + 0x7cff]
100004331:	mov	rdi, r13
100004334:	mov	rsi, r14
100004337:	call	0x1000044b5
10000433c:	test	rax, rax
10000433f:	je	0x10000436c
100004341:	mov	rdi, r12
100004344:	xor	esi, esi
100004346:	mov	rdx, rax
100004349:	call	0x10000408f
10000434e:	mov	byte ptr [r14], 0x0
100004352:	mov	rdi, rbx
100004355:	mov	esi, 0x2e
10000435a:	call	0x10000a168 ## symbol stub for: _strrchr
10000435f:	mov	r14, rax
100004362:	test	rax, rax
100004365:	jne	0x100004331
100004367:	jmp	0x100004408
10000436c:	lea	rdi, [rip + 0x7d8d]
100004373:	mov	rsi, r14
100004376:	call	0x1000044b5
10000437b:	test	rax, rax
10000437e:	jne	0x1000043f7
100004380:	mov	dword ptr [rbp - 0x2c], r15d
100004384:	lea	rdi, [rip + 0x7e25]
10000438b:	mov	rsi, r14
10000438e:	call	0x1000044b5
100004393:	test	rax, rax
100004396:	je	0x100004404
100004398:	mov	r15, rax
10000439b:	mov	byte ptr [r14], 0x0
10000439f:	mov	rdi, rbx
1000043a2:	call	0x10000a15c ## symbol stub for: _strlen
1000043a7:	mov	r14, rax
1000043aa:	mov	rdi, r15
1000043ad:	call	0x10000a15c ## symbol stub for: _strlen
1000043b2:	lea	rsi, [r14 + rax]
1000043b6:	inc	rsi
1000043b9:	mov	rdi, rbx
1000043bc:	call	0x10000a0fc ## symbol stub for: _realloc
1000043c1:	test	rax, rax
1000043c4:	je	0x1000044a0
1000043ca:	mov	rbx, rax
1000043cd:	mov	rdi, rax
1000043d0:	mov	rsi, r15
1000043d3:	call	0x10000a12c ## symbol stub for: _strcat
1000043d8:	mov	rdi, rbx
1000043db:	mov	esi, 0x2e
1000043e0:	call	0x10000a168 ## symbol stub for: _strrchr
1000043e5:	mov	r14, rax
1000043e8:	test	rax, rax
1000043eb:	mov	r15d, dword ptr [rbp - 0x2c]
1000043ef:	jne	0x100004331
1000043f5:	jmp	0x100004408
1000043f7:	mov	rdi, r12
1000043fa:	mov	rsi, rax
1000043fd:	call	0x100004203
100004402:	jmp	0x100004408
100004404:	mov	r15d, dword ptr [rbp - 0x2c]
100004408:	lea	r14, [r12 + 0x8]
10000440d:	mov	rdi, rbx
100004410:	call	0x10000a090 ## symbol stub for: _free
100004415:	cmp	qword ptr [r14], 0x0
100004419:	je	0x10000446f
10000441b:	mov	rdi, qword ptr [rbp - 0x38]
10000441f:	mov	esi, r15d
100004422:	call	0x100004276
100004427:	movsxd	r15, dword ptr [r12 + 0x10]
10000442c:	mov	rdi, r15
10000442f:	shl	rdi, 0x4
100004433:	call	0x10000a0ba ## symbol stub for: _malloc
100004438:	test	rax, rax
10000443b:	je	0x1000044a0
10000443d:	mov	rbx, rax
100004440:	mov	eax, r15d
100004443:	test	eax, eax
100004445:	jle	0x100004481
100004447:	mov	ecx, eax
100004449:	mov	rdi, qword ptr [r14]
10000444c:	shl	rax, 0x4
100004450:	dec	ecx
100004452:	xor	edx, edx
100004454:	mov	esi, ecx
100004456:	shl	rsi, 0x4
10000445a:	movups	xmm0, xmmword ptr [rdi + rsi]
10000445e:	movups	xmmword ptr [rbx + rdx], xmm0
100004462:	add	rdx, 0x10
100004466:	dec	ecx
100004468:	cmp	rax, rdx
10000446b:	jne	0x100004454
10000446d:	jmp	0x100004484
10000446f:	mov	rax, qword ptr [rbp - 0x38]
100004473:	mov	qword ptr [r12 + 0x8], rax
100004478:	mov	dword ptr [r12 + 0x10], r15d
10000447d:	xor	eax, eax
10000447f:	jmp	0x100004491
100004481:	mov	rdi, qword ptr [r14]
100004484:	call	0x10000a090 ## symbol stub for: _free
100004489:	mov	qword ptr [r14], rbx
10000448c:	mov	eax, 0x1
100004491:	add	rsp, 0x18
100004495:	pop	rbx
100004496:	pop	r12
100004498:	pop	r13
10000449a:	pop	r14
10000449c:	pop	r15
10000449e:	pop	rbp
10000449f:	ret
1000044a0:	lea	rdx, [rip + 0x6419] ## literal pool for: "No memory"
1000044a7:	mov	edi, 0x1
1000044ac:	xor	esi, esi
1000044ae:	xor	eax, eax
1000044b0:	call	0x1000099b3
1000044b5:	push	rbp
1000044b6:	mov	rbp, rsp
1000044b9:	push	r15
1000044bb:	push	r14
1000044bd:	push	rbx
1000044be:	push	rax
1000044bf:	test	rsi, rsi
1000044c2:	je	0x1000044f3
1000044c4:	mov	rbx, rdi
1000044c7:	mov	rdi, qword ptr [rdi]
1000044ca:	test	rdi, rdi
1000044cd:	je	0x1000044f3
1000044cf:	mov	r15, rsi
1000044d2:	add	rbx, 0x10
1000044d6:	xor	r14d, r14d
1000044d9:	mov	rsi, r15
1000044dc:	call	0x10000a138 ## symbol stub for: _strcmp
1000044e1:	test	eax, eax
1000044e3:	je	0x1000044f8
1000044e5:	mov	rdi, qword ptr [rbx]
1000044e8:	add	rbx, 0x10
1000044ec:	test	rdi, rdi
1000044ef:	jne	0x1000044d9
1000044f1:	jmp	0x1000044fc
1000044f3:	xor	r14d, r14d
1000044f6:	jmp	0x1000044fc
1000044f8:	mov	r14, qword ptr [rbx - 0x8]
1000044fc:	mov	rax, r14
1000044ff:	add	rsp, 0x8
100004503:	pop	rbx
100004504:	pop	r14
100004506:	pop	r15
100004508:	pop	rbp
100004509:	ret
10000450a:	nop
10000450b:	nop
10000450c:	push	rbp
10000450d:	mov	rbp, rsp
100004510:	mov	eax, dword ptr [rip + 0xc06a]
100004516:	mov	dword ptr [rip + 0xc060], 0x0
100004520:	pop	rbp
100004521:	ret
100004522:	push	rbp
100004523:	mov	rbp, rsp
100004526:	push	r15
100004528:	push	r14
10000452a:	push	r13
10000452c:	push	r12
10000452e:	push	rbx
10000452f:	sub	rsp, 0x168
100004536:	mov	r15, rsi
100004539:	mov	r14d, edi
10000453c:	mov	rax, qword ptr [rip + 0x7ac5] ## literal pool symbol address: ___stack_chk_guard
100004543:	mov	rax, qword ptr [rax]
100004546:	mov	qword ptr [rbp - 0x30], rax
10000454a:	lea	rbx, [rbp - 0x180]
100004551:	mov	esi, 0x128
100004556:	mov	rdi, rbx
100004559:	call	0x100009d6c ## symbol stub for: ___bzero
10000455e:	mov	eax, 0xffffffff
100004563:	mov	dword ptr [rbx + 0x88], eax
100004569:	mov	dword ptr [rbx + 0x34], eax
10000456c:	mov	dword ptr [rbx + 0x40], eax
10000456f:	mov	dword ptr [rbx + 0x24], 0x0
100004576:	lea	rax, [rip + 0x148b]
10000457d:	lea	rsi, [rbp - 0x40]
100004581:	mov	qword ptr [rsi], rax
100004584:	mov	qword ptr [rsi + 0x8], 0x0
10000458c:	mov	edi, 0x1d
100004591:	xor	edx, edx
100004593:	call	0x10000a11a ## symbol stub for: _sigaction
100004598:	test	eax, eax
10000459a:	jne	0x100005611
1000045a0:	lea	rsi, [rbp - 0x40]
1000045a4:	mov	edi, 0x1e
1000045a9:	xor	edx, edx
1000045ab:	call	0x10000a11a ## symbol stub for: _sigaction
1000045b0:	test	eax, eax
1000045b2:	jne	0x100005621
1000045b8:	lea	rsi, [rbp - 0x40]
1000045bc:	mov	qword ptr [rsi], 0x1
1000045c3:	mov	edi, 0xd
1000045c8:	xor	edx, edx
1000045ca:	call	0x10000a11a ## symbol stub for: _sigaction
1000045cf:	mov	rdi, qword ptr [r15]
1000045d2:	lea	rsi, [rip + 0x647e] ## literal pool for: "bsdtar"
1000045d9:	call	0x100009868
1000045de:	lea	rsi, [rip + 0x6479] ## literal pool for: ""
1000045e5:	xor	edi, edi
1000045e7:	call	0x10000a114 ## symbol stub for: _setlocale
1000045ec:	test	rax, rax
1000045ef:	jne	0x100004601
1000045f1:	lea	rsi, [rip + 0x6467] ## literal pool for: "Failed to set default locale"
1000045f8:	xor	edi, edi
1000045fa:	xor	eax, eax
1000045fc:	call	0x10000989e
100004601:	mov	edi, 0x39
100004606:	call	0x10000a0d8 ## symbol stub for: _nl_langinfo
10000460b:	cmp	byte ptr [rax], 0x64
10000460e:	sete	byte ptr [rbp - 0x118]
100004615:	call	0x10000a0a2 ## symbol stub for: _geteuid
10000461a:	mov	dword ptr [rbp - 0xd0], eax
100004620:	movabs	rcx, -0xffffd800
10000462a:	mov	qword ptr [rbp - 0x168], rcx
100004631:	test	eax, eax
100004633:	mov	eax, 0x23e7
100004638:	mov	ecx, 0x2304
10000463d:	cmove	ecx, eax
100004640:	mov	dword ptr [rbp - 0x158], ecx
100004646:	mov	r12d, dword ptr [rbp - 0x154]
10000464d:	mov	ebx, r12d
100004650:	or	ebx, 0x4
100004653:	mov	dword ptr [rbp - 0x154], ebx
100004659:	lea	rdi, [rip + 0x641c] ## literal pool for: "COPYFILE_DISABLE"
100004660:	call	0x10000a09c ## symbol stub for: _getenv
100004665:	test	rax, rax
100004668:	je	0x100004678
10000466a:	and	r12d, -0x5
10000466e:	mov	dword ptr [rbp - 0x154], r12d
100004675:	mov	ebx, r12d
100004678:	or	ebx, 0x20
10000467b:	mov	dword ptr [rbp - 0x154], ebx
100004681:	call	0x100009ece ## symbol stub for: _archive_match_new
100004686:	mov	qword ptr [rbp - 0x88], rax
10000468d:	test	rax, rax
100004690:	je	0x1000055c2
100004696:	call	0x1000042b5
10000469b:	mov	qword ptr [rbp - 0x110], rax
1000046a2:	test	rax, rax
1000046a5:	je	0x1000055c2
1000046ab:	lea	rdi, [rbp - 0x180]
1000046b2:	mov	qword ptr [rdi + 0x90], r15
1000046b9:	mov	dword ptr [rdi + 0x8c], r14d
1000046c0:	call	0x100005ba4
1000046c5:	cmp	eax, -0x1
1000046c8:	je	0x100005006
1000046ce:	xor	ecx, ecx
1000046d0:	mov	qword ptr [rbp - 0x188], rcx
1000046d7:	lea	r15, [rip + 0x1112]
1000046de:	xor	r14d, r14d
1000046e1:	xor	r13d, r13d
1000046e4:	xor	ecx, ecx
1000046e6:	mov	qword ptr [rbp - 0x50], rcx
1000046ea:	xor	r12d, r12d
1000046ed:	xor	ecx, ecx
1000046ef:	mov	qword ptr [rbp - 0x48], rcx
1000046f3:	lea	ecx, [rax - 0x1]
1000046f6:	cmp	ecx, 0x79
1000046f9:	ja	0x100005772
1000046ff:	movsxd	rcx, dword ptr [r15 + 4*rcx]
100004703:	add	rcx, r15
100004706:	jmp	rcx
100004708:	mov	rcx, qword ptr [rbp - 0x48]
10000470c:	test	cl, cl
10000470e:	jne	0x1000055f6
100004714:	lea	ecx, [rax - 0x12]
100004717:	cmp	ecx, 0x4
10000471a:	ja	0x10000475d
10000471c:	lea	rax, [rip + 0x12b5]
100004723:	movsxd	rcx, dword ptr [rax + 4*rcx]
100004727:	add	rcx, rax
10000472a:	jmp	rcx
10000472c:	lea	rax, [rip + 0x61c7] ## literal pool for: "lrzip"
100004733:	mov	qword ptr [rbp - 0x50], rax
100004737:	mov	al, 0x12
100004739:	jmp	0x100004fd5
10000473e:	or	byte ptr [rbp - 0x15b], 0x40
100004745:	jmp	0x100004fd9
10000474a:	mov	rax, qword ptr [rbp - 0xe8]
100004751:	mov	qword ptr [rbp - 0x170], rax
100004758:	jmp	0x100004fd9
10000475d:	cmp	eax, 0x39
100004760:	jne	0x100004fc6
100004766:	lea	rax, [rip + 0x61d3] ## literal pool for: "zstd"
10000476d:	mov	qword ptr [rbp - 0x50], rax
100004771:	mov	al, 0x39
100004773:	jmp	0x100004fd5
100004778:	or	byte ptr [rbp - 0x158], 0x20
10000477f:	and	byte ptr [rbp - 0x154], -0x21
100004786:	or	byte ptr [rbp - 0x15a], 0x4
10000478d:	jmp	0x100004fd9
100004792:	test	r12b, r12b
100004795:	jne	0x10000567a
10000479b:	lea	r13, [rip + 0x6358] ## literal pool for: "b64encode"
1000047a2:	mov	r12b, 0x2
1000047a5:	jmp	0x100004fd9
1000047aa:	or	byte ptr [rbp - 0x15c], 0x4
1000047b1:	jmp	0x100004fd9
1000047b6:	or	byte ptr [rbp - 0x156], 0x2
1000047bd:	jmp	0x100004fd9
1000047c2:	mov	rsi, qword ptr [rbp - 0xe8]
1000047c9:	mov	rdi, qword ptr [rbp - 0x88]
1000047d0:	call	0x100009e9e ## symbol stub for: _archive_match_exclude_pattern
1000047d5:	test	eax, eax
1000047d7:	je	0x100004fd9
1000047dd:	jmp	0x1000056df
1000047e2:	mov	qword ptr [rbp - 0x190], r14
1000047e9:	mov	r14, r12
1000047ec:	mov	r12, r13
1000047ef:	xor	r13d, r13d
1000047f2:	lea	rax, [rip + 0x7a77]
1000047f9:	mov	rbx, qword ptr [r13 + rax]
1000047fe:	mov	rdi, qword ptr [rbp - 0x88]
100004805:	mov	rsi, rbx
100004808:	call	0x100009e9e ## symbol stub for: _archive_match_exclude_pattern
10000480d:	test	eax, eax
10000480f:	jne	0x1000055af
100004815:	add	r13, 0x8
100004819:	cmp	r13, 0xa8
100004820:	jne	0x1000047f2
100004822:	mov	r13, r12
100004825:	mov	r12, r14
100004828:	mov	r14, qword ptr [rbp - 0x190]
10000482f:	jmp	0x100004fd9
100004834:	or	byte ptr [rbp - 0x158], 0x40
10000483b:	and	byte ptr [rbp - 0x154], -0x41
100004842:	or	byte ptr [rbp - 0x15a], 0x10
100004849:	jmp	0x100004fd9
10000484e:	mov	rdi, qword ptr [rbp - 0x110]
100004855:	mov	rsi, qword ptr [rbp - 0xe8]
10000485c:	jmp	0x100004b39
100004861:	call	0x100009d72 ## symbol stub for: ___error
100004866:	mov	dword ptr [rax], 0x0
10000486c:	lea	rsi, [rbp - 0x58]
100004870:	mov	qword ptr [rsi], 0x0
100004877:	mov	rdi, qword ptr [rbp - 0xe8]
10000487e:	mov	edx, 0xa
100004883:	call	0x10000a16e ## symbol stub for: _strtol
100004888:	mov	rbx, rax
10000488b:	call	0x100009d72 ## symbol stub for: ___error
100004890:	test	ebx, ebx
100004892:	js	0x10000564a
100004898:	cmp	dword ptr [rax], 0x0
10000489b:	jne	0x10000564a
1000048a1:	mov	rax, qword ptr [rbp - 0xe8]
1000048a8:	cmp	byte ptr [rax], 0x0
1000048ab:	je	0x10000564a
1000048b1:	mov	rax, qword ptr [rbp - 0x58]
1000048b5:	test	rax, rax
1000048b8:	je	0x10000564a
1000048be:	cmp	byte ptr [rax], 0x0
1000048c1:	jne	0x10000564a
1000048c7:	mov	dword ptr [rbp - 0x14c], ebx
1000048cd:	jmp	0x100004fd9
1000048d2:	mov	rax, qword ptr [rbp - 0xe8]
1000048d9:	mov	qword ptr [rbp - 0x148], rax
1000048e0:	jmp	0x100004fd9
1000048e5:	mov	rax, qword ptr [rbp - 0x48]
1000048e9:	test	al, al
1000048eb:	jne	0x1000056ef
1000048f1:	lea	rax, [rip + 0x5ff7] ## literal pool for: "grzip"
1000048f8:	mov	qword ptr [rbp - 0x50], rax
1000048fc:	mov	al, 0xc
1000048fe:	jmp	0x100004fd5
100004903:	or	byte ptr [rbp - 0x157], -0x80
10000490a:	jmp	0x100004fd9
10000490f:	or	byte ptr [rbp - 0x15c], 0x10
100004916:	jmp	0x100004fd9
10000491b:	mov	rsi, qword ptr [rbp - 0xe8]
100004922:	mov	rdi, qword ptr [rbp - 0x88]
100004929:	call	0x100009ec2 ## symbol stub for: _archive_match_include_pattern
10000492e:	test	eax, eax
100004930:	je	0x100004fd9
100004936:	jmp	0x10000570b
10000493b:	or	byte ptr [rbp - 0x157], 0x8
100004942:	jmp	0x100004fd9
100004947:	or	byte ptr [rbp - 0x154], 0x4
10000494e:	or	byte ptr [rbp - 0x157], 0x20
100004955:	or	byte ptr [rbp - 0x15a], 0x40
10000495c:	jmp	0x100004fd9
100004961:	mov	rdx, qword ptr [rbp - 0xe8]
100004968:	mov	rdi, qword ptr [rbp - 0x88]
10000496f:	mov	esi, 0x201
100004974:	jmp	0x100004ad2
100004979:	mov	rdx, qword ptr [rbp - 0xe8]
100004980:	mov	rdi, qword ptr [rbp - 0x88]
100004987:	mov	esi, 0x201
10000498c:	jmp	0x100004aef
100004991:	mov	rdx, qword ptr [rbp - 0xe8]
100004998:	mov	rdi, qword ptr [rbp - 0x88]
10000499f:	mov	esi, 0x101
1000049a4:	jmp	0x100004ad2
1000049a9:	mov	rdx, qword ptr [rbp - 0xe8]
1000049b0:	mov	rdi, qword ptr [rbp - 0x88]
1000049b7:	mov	esi, 0x101
1000049bc:	jmp	0x100004aef
1000049c1:	or	byte ptr [rbp - 0x154], 0x2
1000049c8:	jmp	0x100004fd9
1000049cd:	or	byte ptr [rbp - 0x157], 0x40
1000049d4:	jmp	0x100004fd9
1000049d9:	and	byte ptr [rbp - 0x158], -0x21
1000049e0:	or	byte ptr [rbp - 0x154], 0x20
1000049e7:	or	byte ptr [rbp - 0x15a], 0x2
1000049ee:	jmp	0x100004fd9
1000049f3:	and	byte ptr [rbp - 0x158], -0x41
1000049fa:	or	byte ptr [rbp - 0x154], 0x40
100004a01:	or	byte ptr [rbp - 0x15a], 0x8
100004a08:	jmp	0x100004fd9
100004a0d:	and	byte ptr [rbp - 0x154], -0x5
100004a14:	and	byte ptr [rbp - 0x157], -0x21
100004a1b:	or	byte ptr [rbp - 0x15a], 0x20
100004a22:	jmp	0x100004fd9
100004a27:	and	byte ptr [rbp - 0x156], -0x5
100004a2e:	jmp	0x100004fd9
100004a33:	and	byte ptr [rbp - 0x158], -0x2
100004a3a:	jmp	0x100004fd9
100004a3f:	and	dword ptr [rbp - 0x158], 0xffffdf1d
100004a49:	jmp	0x100004fd9
100004a4e:	and	byte ptr [rbp - 0x158], 0x7f
100004a55:	or	byte ptr [rbp - 0x154], 0x10
100004a5c:	or	byte ptr [rbp - 0x15b], -0x80
100004a63:	jmp	0x100004fd9
100004a68:	or	byte ptr [rbp - 0x15b], 0x1
100004a6f:	jmp	0x100004fd9
100004a74:	lea	rax, [rip + 0x5fe3] ## literal pool for: ""
100004a7b:	mov	qword ptr [rbp - 0x138], rax
100004a82:	mov	qword ptr [rbp - 0x148], rax
100004a89:	or	byte ptr [rbp - 0x15b], 0x2
100004a90:	jmp	0x100004fd9
100004a95:	mov	rdx, qword ptr [rbp - 0xe8]
100004a9c:	mov	rdi, qword ptr [rbp - 0x88]
100004aa3:	mov	esi, 0x202
100004aa8:	jmp	0x100004ad2
100004aaa:	mov	rdx, qword ptr [rbp - 0xe8]
100004ab1:	mov	rdi, qword ptr [rbp - 0x88]
100004ab8:	mov	esi, 0x202
100004abd:	jmp	0x100004aef
100004abf:	mov	rdx, qword ptr [rbp - 0xe8]
100004ac6:	mov	rdi, qword ptr [rbp - 0x88]
100004acd:	mov	esi, 0x102
100004ad2:	call	0x100009eb6 ## symbol stub for: _archive_match_include_date
100004ad7:	jmp	0x100004d44
100004adc:	mov	rdx, qword ptr [rbp - 0xe8]
100004ae3:	mov	rdi, qword ptr [rbp - 0x88]
100004aea:	mov	esi, 0x102
100004aef:	call	0x100009ebc ## symbol stub for: _archive_match_include_file_time
100004af4:	jmp	0x100004d44
100004af9:	or	byte ptr [rbp - 0x154], 0x8
100004b00:	jmp	0x100004fd9
100004b05:	mov	rax, qword ptr [rbp - 0xe8]
100004b0c:	mov	qword ptr [rbp - 0x120], rax
100004b13:	jmp	0x100004fd9
100004b18:	mov	rax, qword ptr [rbp - 0xe8]
100004b1f:	mov	qword ptr [rbp - 0x130], rax
100004b26:	jmp	0x100004fd9
100004b2b:	mov	rdi, qword ptr [rbp - 0x110]
100004b32:	lea	rsi, [rip + 0x6061] ## literal pool for: "pax"
100004b39:	call	0x100004203
100004b3e:	jmp	0x100004fd9
100004b43:	or	byte ptr [rbp - 0x156], 0x4
100004b4a:	jmp	0x100004fd9
100004b4f:	or	byte ptr [rbp - 0x158], 0x1
100004b56:	jmp	0x100004fd9
100004b5b:	call	0x100009d72 ## symbol stub for: ___error
100004b60:	mov	dword ptr [rax], 0x0
100004b66:	lea	rsi, [rbp - 0x58]
100004b6a:	mov	qword ptr [rsi], 0x0
100004b71:	mov	rdi, qword ptr [rbp - 0xe8]
100004b78:	mov	edx, 0xa
100004b7d:	call	0x10000a16e ## symbol stub for: _strtol
100004b82:	mov	rbx, rax
100004b85:	call	0x100009d72 ## symbol stub for: ___error
100004b8a:	test	ebx, ebx
100004b8c:	js	0x100005656
100004b92:	cmp	dword ptr [rax], 0x0
100004b95:	jne	0x100005656
100004b9b:	mov	rax, qword ptr [rbp - 0xe8]
100004ba2:	cmp	byte ptr [rax], 0x0
100004ba5:	je	0x100005656
100004bab:	mov	rax, qword ptr [rbp - 0x58]
100004baf:	test	rax, rax
100004bb2:	je	0x100005656
100004bb8:	cmp	byte ptr [rax], 0x0
100004bbb:	jne	0x100005656
100004bc1:	mov	dword ptr [rbp - 0x150], ebx
100004bc7:	jmp	0x100004fd9
100004bcc:	or	byte ptr [rbp - 0x15b], 0x10
100004bd3:	jmp	0x100004fd9
100004bd8:	call	0x100009d72 ## symbol stub for: ___error
100004bdd:	mov	dword ptr [rax], 0x0
100004be3:	lea	rsi, [rbp - 0x58]
100004be7:	mov	qword ptr [rsi], 0x0
100004bee:	mov	rdi, qword ptr [rbp - 0xe8]
100004bf5:	mov	edx, 0xa
100004bfa:	call	0x10000a16e ## symbol stub for: _strtol
100004bff:	mov	rbx, rax
100004c02:	call	0x100009d72 ## symbol stub for: ___error
100004c07:	test	ebx, ebx
100004c09:	js	0x100005662
100004c0f:	cmp	dword ptr [rax], 0x0
100004c12:	jne	0x100005662
100004c18:	mov	rax, qword ptr [rbp - 0xe8]
100004c1f:	cmp	byte ptr [rax], 0x0
100004c22:	je	0x100005662
100004c28:	mov	rax, qword ptr [rbp - 0x58]
100004c2c:	test	rax, rax
100004c2f:	je	0x100005662
100004c35:	cmp	byte ptr [rax], 0x0
100004c38:	jne	0x100005662
100004c3e:	mov	dword ptr [rbp - 0x140], ebx
100004c44:	jmp	0x100004fd9
100004c49:	mov	rax, qword ptr [rbp - 0xe8]
100004c50:	mov	qword ptr [rbp - 0x138], rax
100004c57:	jmp	0x100004fd9
100004c5c:	mov	r14, qword ptr [rbp - 0xe8]
100004c63:	jmp	0x100004fd9
100004c68:	test	r12b, r12b
100004c6b:	jne	0x10000567a
100004c71:	lea	r13, [rip + 0x5cb3] ## literal pool for: "uuencode"
100004c78:	mov	r12b, 0x36
100004c7b:	jmp	0x100004fd9
100004c80:	or	byte ptr [rbp - 0x158], -0x80
100004c87:	and	byte ptr [rbp - 0x154], -0x11
100004c8e:	or	byte ptr [rbp - 0x15a], 0x1
100004c95:	jmp	0x100004fd9
100004c9a:	mov	rsi, qword ptr [rbp - 0xe8]
100004ca1:	cmp	byte ptr [rsi], 0x0
100004ca4:	je	0x100005725
100004caa:	lea	rdi, [rbp - 0x180]
100004cb1:	call	0x100007719
100004cb6:	jmp	0x100004fd9
100004cbb:	mov	byte ptr [rbp - 0x127], 0x48
100004cc2:	jmp	0x100004fd9
100004cc7:	mov	rax, qword ptr [rbp - 0x48]
100004ccb:	test	al, al
100004ccd:	jne	0x10000573a
100004cd3:	lea	rax, [rip + 0x5c5e] ## literal pool for: "xz"
100004cda:	mov	qword ptr [rbp - 0x50], rax
100004cde:	mov	al, 0x4a
100004ce0:	jmp	0x100004fd5
100004ce5:	mov	byte ptr [rbp - 0x127], 0x4c
100004cec:	jmp	0x100004fd9
100004cf1:	or	byte ptr [rbp - 0x15b], 0x8
100004cf8:	jmp	0x100004fd9
100004cfd:	and	byte ptr [rbp - 0x157], -0x4
100004d04:	or	byte ptr [rbp - 0x15c], 0x2
100004d0b:	jmp	0x100004fd9
100004d10:	or	byte ptr [rbp - 0x157], 0x10
100004d17:	jmp	0x100004fd9
100004d1c:	or	byte ptr [rbp - 0x158], 0x10
100004d23:	or	byte ptr [rbp - 0x15b], 0x20
100004d2a:	jmp	0x100004fd9
100004d2f:	mov	rsi, qword ptr [rbp - 0xe8]
100004d36:	mov	rdi, qword ptr [rbp - 0x88]
100004d3d:	xor	edx, edx
100004d3f:	call	0x100009ea4 ## symbol stub for: _archive_match_exclude_pattern_from_file
100004d44:	test	eax, eax
100004d46:	je	0x100004fd9
100004d4c:	jmp	0x1000055d2
100004d51:	mov	rax, qword ptr [rbp - 0x48]
100004d55:	test	al, al
100004d57:	jne	0x100005756
100004d5d:	lea	rax, [rip + 0x5b69] ## literal pool for: "compress"
100004d64:	mov	qword ptr [rbp - 0x50], rax
100004d68:	mov	al, 0x5a
100004d6a:	jmp	0x100004fd5
100004d6f:	or	byte ptr [rbp - 0x15c], 0x1
100004d76:	jmp	0x100004fd9
100004d7b:	call	0x100009d72 ## symbol stub for: ___error
100004d80:	mov	dword ptr [rax], 0x0
100004d86:	lea	rsi, [rbp - 0x58]
100004d8a:	mov	qword ptr [rsi], 0x0
100004d91:	mov	rdi, qword ptr [rbp - 0xe8]
100004d98:	mov	edx, 0xa
100004d9d:	call	0x10000a16e ## symbol stub for: _strtol
100004da2:	mov	rbx, rax
100004da5:	call	0x100009d72 ## symbol stub for: ___error
100004daa:	lea	ecx, [rbx - 0x1]
100004dad:	cmp	ecx, 0x1fff
100004db3:	ja	0x10000566e
100004db9:	cmp	dword ptr [rax], 0x0
100004dbc:	jne	0x10000566e
100004dc2:	mov	rax, qword ptr [rbp - 0xe8]
100004dc9:	cmp	byte ptr [rax], 0x0
100004dcc:	je	0x10000566e
100004dd2:	mov	rax, qword ptr [rbp - 0x58]
100004dd6:	test	rax, rax
100004dd9:	je	0x10000566e
100004ddf:	cmp	byte ptr [rax], 0x0
100004de2:	jne	0x10000566e
100004de8:	shl	ebx, 0x9
100004deb:	mov	dword ptr [rbp - 0x168], ebx
100004df1:	mov	dword ptr [rbp - 0x164], ebx
100004df7:	jmp	0x100004fd9
100004dfc:	movsx	r8d, byte ptr [rbp - 0x128]
100004e04:	test	r8d, r8d
100004e07:	je	0x100004e13
100004e09:	cmp	r8b, 0x63
100004e0d:	jne	0x100005777
100004e13:	mov	byte ptr [rbp - 0x128], 0x63
100004e1a:	jmp	0x100004fd9
100004e1f:	mov	rax, qword ptr [rbp - 0xe8]
100004e26:	mov	qword ptr [rbp - 0x180], rax
100004e2d:	jmp	0x100004fd9
100004e32:	mov	byte ptr [rbp - 0x127], 0x4c
100004e39:	mov	al, 0x1
100004e3b:	mov	qword ptr [rbp - 0x188], rax
100004e42:	jmp	0x100004fd9
100004e47:	mov	rax, qword ptr [rbp - 0x48]
100004e4b:	test	al, al
100004e4d:	jne	0x10000568b
100004e53:	lea	rax, [rip + 0x5a81] ## literal pool for: "bzip2"
100004e5a:	mov	qword ptr [rbp - 0x50], rax
100004e5e:	mov	al, 0x6a
100004e60:	jmp	0x100004fd5
100004e65:	or	byte ptr [rbp - 0x158], 0x8
100004e6c:	jmp	0x100004fd9
100004e71:	and	byte ptr [rbp - 0x158], -0x5
100004e78:	jmp	0x100004fd9
100004e7d:	or	byte ptr [rbp - 0x15c], -0x80
100004e84:	jmp	0x100004fd9
100004e89:	or	byte ptr [rbp - 0x15b], 0x4
100004e90:	jmp	0x100004fd9
100004e95:	or	dword ptr [rbp - 0x158], 0x20e2
100004e9f:	jmp	0x100004fd9
100004ea4:	or	byte ptr [rbp - 0x15c], 0x8
100004eab:	jmp	0x100004fd9
100004eb0:	movsx	r8d, byte ptr [rbp - 0x128]
100004eb8:	test	r8d, r8d
100004ebb:	je	0x100004ec7
100004ebd:	cmp	r8b, 0x72
100004ec1:	jne	0x10000578f
100004ec7:	mov	byte ptr [rbp - 0x128], 0x72
100004ece:	jmp	0x100004fd9
100004ed3:	lea	rdi, [rbp - 0x180]
100004eda:	mov	rsi, qword ptr [rdi + 0x98]
100004ee1:	call	0x100006a21
100004ee6:	jmp	0x100004fd9
100004eeb:	movsx	r8d, byte ptr [rbp - 0x128]
100004ef3:	test	r8d, r8d
100004ef6:	je	0x100004f02
100004ef8:	cmp	r8b, 0x74
100004efc:	jne	0x1000057a7
100004f02:	mov	byte ptr [rbp - 0x128], 0x74
100004f09:	inc	dword ptr [rbp - 0x160]
100004f0f:	jmp	0x100004fd9
100004f14:	movsx	r8d, byte ptr [rbp - 0x128]
100004f1c:	test	r8d, r8d
100004f1f:	je	0x100004f2b
100004f21:	cmp	r8b, 0x75
100004f25:	jne	0x1000057bf
100004f2b:	mov	byte ptr [rbp - 0x128], 0x75
100004f32:	jmp	0x100004fd9
100004f37:	or	byte ptr [rbp - 0x15c], 0x20
100004f3e:	jmp	0x100004fd9
100004f43:	movsx	r8d, byte ptr [rbp - 0x128]
100004f4b:	test	r8d, r8d
100004f4e:	je	0x100004f5a
100004f50:	cmp	r8b, 0x78
100004f54:	jne	0x1000057d7
100004f5a:	mov	byte ptr [rbp - 0x128], 0x78
100004f61:	jmp	0x100004fd9
100004f63:	mov	rax, qword ptr [rbp - 0x48]
100004f67:	test	al, al
100004f69:	jne	0x1000056a7
100004f6f:	lea	rax, [rip + 0x5965] ## literal pool for: "bzip2"
100004f76:	mov	qword ptr [rbp - 0x50], rax
100004f7a:	mov	al, 0x79
100004f7c:	jmp	0x100004fd5
100004f7e:	mov	rax, qword ptr [rbp - 0x48]
100004f82:	test	al, al
100004f84:	jne	0x1000056c3
100004f8a:	lea	rax, [rip + 0x5954] ## literal pool for: "gzip"
100004f91:	mov	qword ptr [rbp - 0x50], rax
100004f95:	mov	al, 0x7a
100004f97:	jmp	0x100004fd5
100004f99:	lea	rax, [rip + 0x5964] ## literal pool for: "lzip"
100004fa0:	mov	qword ptr [rbp - 0x50], rax
100004fa4:	mov	al, 0x14
100004fa6:	jmp	0x100004fd5
100004fa8:	lea	rax, [rip + 0x5973] ## literal pool for: "lzma"
100004faf:	mov	qword ptr [rbp - 0x50], rax
100004fb3:	mov	al, 0x15
100004fb5:	jmp	0x100004fd5
100004fb7:	lea	rax, [rip + 0x5959] ## literal pool for: "lzop"
100004fbe:	mov	qword ptr [rbp - 0x50], rax
100004fc2:	mov	al, 0x16
100004fc4:	jmp	0x100004fd5
100004fc6:	jmp	0x100004fd5
100004fc8:	lea	rax, [rip + 0x593f] ## literal pool for: "lz4"
100004fcf:	mov	qword ptr [rbp - 0x50], rax
100004fd3:	mov	al, 0x13
100004fd5:	mov	qword ptr [rbp - 0x48], rax
100004fd9:	lea	rdi, [rbp - 0x180]
100004fe0:	call	0x100005ba4
100004fe5:	cmp	eax, -0x1
100004fe8:	jne	0x1000046f3
100004fee:	mov	al, byte ptr [rbp - 0x128]
100004ff4:	cmp	byte ptr [rbp - 0x188], 0x0
100004ffb:	je	0x100005021
100004ffd:	test	al, al
100004fff:	jne	0x100005021
100005001:	call	0x100005a18
100005006:	mov	al, byte ptr [rbp - 0x128]
10000500c:	xor	r14d, r14d
10000500f:	xor	r13d, r13d
100005012:	xor	ecx, ecx
100005014:	mov	qword ptr [rbp - 0x50], rcx
100005018:	xor	r12d, r12d
10000501b:	xor	ecx, ecx
10000501d:	mov	qword ptr [rbp - 0x48], rcx
100005021:	test	al, al
100005023:	je	0x100005639
100005029:	test	byte ptr [rbp - 0x15c], 0x1
100005030:	je	0x10000504c
100005032:	lea	rsi, [rip + 0x5bcd] ## literal pool for: "-a"
100005039:	lea	rdx, [rip + 0x5bc9] ## literal pool for: "c"
100005040:	lea	rdi, [rbp - 0x180]
100005047:	call	0x100005b65
10000504c:	test	byte ptr [rbp - 0x154], 0x8
100005053:	je	0x10000506f
100005055:	lea	rsi, [rip + 0x5baf] ## literal pool for: "--one-file-system"
10000505c:	lea	rdx, [rip + 0x5bba] ## literal pool for: "cru"
100005063:	lea	rdi, [rbp - 0x180]
10000506a:	call	0x100005b65
10000506f:	test	byte ptr [rbp - 0x15c], 0x8
100005076:	je	0x100005092
100005078:	lea	rsi, [rip + 0x5ba2] ## literal pool for: "--fast-read"
10000507f:	lea	rdx, [rip + 0x5ba7] ## literal pool for: "xt"
100005086:	lea	rdi, [rbp - 0x180]
10000508d:	call	0x100005b65
100005092:	mov	eax, dword ptr [rbp - 0x158]
100005098:	test	ax, ax
10000509b:	jns	0x1000050bd
10000509d:	lea	rsi, [rip + 0x5b8c] ## literal pool for: "--hfsCompression"
1000050a4:	lea	rdx, [rip + 0x5b96] ## literal pool for: "x"
1000050ab:	lea	rbx, [rbp - 0x180]
1000050b2:	mov	rdi, rbx
1000050b5:	call	0x100005b65
1000050ba:	mov	eax, dword ptr [rbx + 0x28]
1000050bd:	bt	eax, 0xe
1000050c1:	jae	0x1000050dd
1000050c3:	lea	rsi, [rip + 0x5b79] ## literal pool for: "--nopreserveHFSCompression"
1000050ca:	lea	rdx, [rip + 0x5b70] ## literal pool for: "x"
1000050d1:	lea	rdi, [rbp - 0x180]
1000050d8:	call	0x100005b65
1000050dd:	test	byte ptr [rbp - 0x154], 0x2
1000050e4:	je	0x100005100
1000050e6:	lea	rsi, [rip + 0x5b71] ## literal pool for: "--nodump"
1000050ed:	lea	rdx, [rip + 0x5b29] ## literal pool for: "cru"
1000050f4:	lea	rdi, [rbp - 0x180]
1000050fb:	call	0x100005b65
100005100:	mov	eax, dword ptr [rbp - 0x15c]
100005106:	bt	eax, 0x12
10000510a:	jae	0x10000512c
10000510c:	lea	rsi, [rip + 0x5b54] ## literal pool for: "--acls"
100005113:	lea	rdx, [rip + 0x5b54] ## literal pool for: "crux"
10000511a:	lea	rbx, [rbp - 0x180]
100005121:	mov	rdi, rbx
100005124:	call	0x100005b65
100005129:	mov	eax, dword ptr [rbx + 0x24]
10000512c:	bt	eax, 0x11
100005130:	jae	0x100005152
100005132:	lea	rsi, [rip + 0x5b3a] ## literal pool for: "--no-acls"
100005139:	lea	rdx, [rip + 0x5b2e] ## literal pool for: "crux"
100005140:	lea	rbx, [rbp - 0x180]
100005147:	mov	rdi, rbx
10000514a:	call	0x100005b65
10000514f:	mov	eax, dword ptr [rbx + 0x24]
100005152:	bt	eax, 0x10
100005156:	jae	0x100005178
100005158:	lea	rsi, [rip + 0x5b1e] ## literal pool for: "--xattrs"
10000515f:	lea	rdx, [rip + 0x5b08] ## literal pool for: "crux"
100005166:	lea	rbx, [rbp - 0x180]
10000516d:	mov	rdi, rbx
100005170:	call	0x100005b65
100005175:	mov	eax, dword ptr [rbx + 0x24]
100005178:	test	ax, ax
10000517b:	jns	0x10000519d
10000517d:	lea	rsi, [rip + 0x5b02] ## literal pool for: "--no-xattrs"
100005184:	lea	rdx, [rip + 0x5ae3] ## literal pool for: "crux"
10000518b:	lea	rbx, [rbp - 0x180]
100005192:	mov	rdi, rbx
100005195:	call	0x100005b65
10000519a:	mov	eax, dword ptr [rbx + 0x24]
10000519d:	bt	eax, 0x14
1000051a1:	jae	0x1000051c3
1000051a3:	lea	rsi, [rip + 0x5ae8] ## literal pool for: "--fflags"
1000051aa:	lea	rdx, [rip + 0x5abd] ## literal pool for: "crux"
1000051b1:	lea	rbx, [rbp - 0x180]
1000051b8:	mov	rdi, rbx
1000051bb:	call	0x100005b65
1000051c0:	mov	eax, dword ptr [rbx + 0x24]
1000051c3:	bt	eax, 0x13
1000051c7:	jae	0x1000051e9
1000051c9:	lea	rsi, [rip + 0x5acb] ## literal pool for: "--no-fflags"
1000051d0:	lea	rdx, [rip + 0x5a97] ## literal pool for: "crux"
1000051d7:	lea	rbx, [rbp - 0x180]
1000051de:	mov	rdi, rbx
1000051e1:	call	0x100005b65
1000051e6:	mov	eax, dword ptr [rbx + 0x24]
1000051e9:	bt	eax, 0x16
1000051ed:	jae	0x10000520f
1000051ef:	lea	rsi, [rip + 0x5ab1] ## literal pool for: "--mac-metadata"
1000051f6:	lea	rdx, [rip + 0x5a71] ## literal pool for: "crux"
1000051fd:	lea	rbx, [rbp - 0x180]
100005204:	mov	rdi, rbx
100005207:	call	0x100005b65
10000520c:	mov	eax, dword ptr [rbx + 0x24]
10000520f:	bt	eax, 0x15
100005213:	jae	0x100005235
100005215:	lea	rsi, [rip + 0x5a9a] ## literal pool for: "--no-mac-metadata"
10000521c:	lea	rdx, [rip + 0x5a4b] ## literal pool for: "crux"
100005223:	lea	rbx, [rbp - 0x180]
10000522a:	mov	rdi, rbx
10000522d:	call	0x100005b65
100005232:	mov	eax, dword ptr [rbx + 0x24]
100005235:	bt	eax, 0xa
100005239:	jae	0x10000528d
10000523b:	movsx	ecx, byte ptr [rbp - 0x128]
100005242:	cmp	ecx, 0x78
100005245:	je	0x100005261
100005247:	cmp	ecx, 0x63
10000524a:	jne	0x100005273
10000524c:	mov	rdi, qword ptr [rbp - 0x110]
100005253:	lea	rsi, [rip + 0x5a6e] ## literal pool for: "ustar"
10000525a:	call	0x100004203
10000525f:	jmp	0x10000528d
100005261:	or	eax, 0x40
100005264:	mov	dword ptr [rbp - 0x15c], eax
10000526a:	and	byte ptr [rbp - 0x158], -0x2
100005271:	jmp	0x10000528d
100005273:	lea	rsi, [rip + 0x5a54] ## literal pool for: "-o"
10000527a:	lea	rdx, [rip + 0x5a50] ## literal pool for: "xc"
100005281:	lea	rdi, [rbp - 0x180]
100005288:	call	0x100005b65
10000528d:	mov	eax, dword ptr [rbp - 0x15c]
100005293:	bt	eax, 0xb
100005297:	jae	0x1000052b9
100005299:	lea	rsi, [rip + 0x5a34] ## literal pool for: "-O"
1000052a0:	lea	rdx, [rip + 0x5986] ## literal pool for: "xt"
1000052a7:	lea	rbx, [rbp - 0x180]
1000052ae:	mov	rdi, rbx
1000052b1:	call	0x100005b65
1000052b6:	mov	eax, dword ptr [rbx + 0x24]
1000052b9:	bt	eax, 0xd
1000052bd:	jae	0x1000052df
1000052bf:	lea	rsi, [rip + 0x5a11] ## literal pool for: "-U"
1000052c6:	lea	rdx, [rip + 0x5974] ## literal pool for: "x"
1000052cd:	lea	rbx, [rbp - 0x180]
1000052d4:	mov	rdi, rbx
1000052d7:	call	0x100005b65
1000052dc:	mov	eax, dword ptr [rbx + 0x24]
1000052df:	bt	eax, 0xe
1000052e3:	jae	0x100005305
1000052e5:	lea	rsi, [rip + 0x59ee] ## literal pool for: "--check-links"
1000052ec:	lea	rdx, [rip + 0x59f5] ## literal pool for: "cr"
1000052f3:	lea	rbx, [rbp - 0x180]
1000052fa:	mov	rdi, rbx
1000052fd:	call	0x100005b65
100005302:	mov	eax, dword ptr [rbx + 0x24]
100005305:	test	al, 0x1
100005307:	jne	0x10000530f
100005309:	mov	rax, qword ptr [rbp - 0x48]
10000530d:	jmp	0x100005338
10000530f:	mov	rsi, qword ptr [rbp - 0x180]
100005316:	mov	rdi, qword ptr [rbp - 0x110]
10000531d:	call	0x1000042c9
100005322:	xor	ecx, ecx
100005324:	test	eax, eax
100005326:	mov	rax, qword ptr [rbp - 0x48]
10000532a:	movzx	eax, al
10000532d:	cmovne	eax, ecx
100005330:	movzx	r12d, r12b
100005334:	cmovne	r12d, ecx
100005338:	test	r14, r14
10000533b:	je	0x10000536b
10000533d:	lea	rsi, [rip + 0x59a7] ## literal pool for: "--use-compress-program"
100005344:	lea	rdx, [rip + 0x59b7] ## literal pool for: "cxt"
10000534b:	lea	rbx, [rbp - 0x180]
100005352:	mov	rdi, rbx
100005355:	call	0x100005b65
10000535a:	mov	rdi, qword ptr [rbx + 0x70]
10000535e:	mov	rsi, r14
100005361:	call	0x100004107
100005366:	jmp	0x100005413
10000536b:	test	al, al
10000536d:	je	0x1000053cc
10000536f:	mov	rdx, rax
100005372:	movsx	eax, al
100005375:	add	eax, -0x4a
100005378:	cmp	eax, 0x30
10000537b:	ja	0x10000558c
100005381:	movabs	rcx, 0x1800100010001
10000538b:	bt	rcx, rax
10000538f:	jae	0x10000558c
100005395:	mov	word ptr [rbp - 0x40], 0x3f2d
10000539b:	mov	byte ptr [rbp - 0x3e], 0x0
10000539f:	mov	byte ptr [rbp - 0x3f], dl
1000053a2:	mov	rbx, qword ptr [rbp - 0x50]
1000053a6:	lea	rdx, [rip + 0x5955] ## literal pool for: "cxt"
1000053ad:	lea	r14, [rbp - 0x180]
1000053b4:	lea	rsi, [rbp - 0x40]
1000053b8:	mov	rdi, r14
1000053bb:	call	0x100005b65
1000053c0:	mov	rdi, qword ptr [r14 + 0x70]
1000053c4:	mov	rsi, rbx
1000053c7:	call	0x100004080
1000053cc:	test	r12b, r12b
1000053cf:	je	0x100005413
1000053d1:	lea	rbx, [rbp - 0x40]
1000053d5:	mov	byte ptr [rbx + 0x2], 0x0
1000053d9:	mov	word ptr [rbx], 0x2d2d
1000053de:	mov	edx, 0x10
1000053e3:	mov	rdi, rbx
1000053e6:	mov	rsi, r13
1000053e9:	call	0x100009d8a ## symbol stub for: ___strcat_chk
1000053ee:	lea	rdx, [rip + 0x590d] ## literal pool for: "cxt"
1000053f5:	lea	r15, [rbp - 0x180]
1000053fc:	mov	rdi, r15
1000053ff:	mov	rsi, rbx
100005402:	call	0x100005b65
100005407:	mov	rdi, qword ptr [r15 + 0x70]
10000540b:	mov	rsi, r13
10000540e:	call	0x100004080
100005413:	mov	rdi, qword ptr [rbp - 0x110]
10000541a:	call	0x100004242
10000541f:	test	rax, rax
100005422:	je	0x10000543e
100005424:	lea	rsi, [rip + 0x58de] ## literal pool for: "--format"
10000542b:	lea	rdx, [rip + 0x57eb] ## literal pool for: "cru"
100005432:	lea	rdi, [rbp - 0x180]
100005439:	call	0x100005b65
10000543e:	mov	al, byte ptr [rbp - 0x127]
100005444:	test	al, al
100005446:	je	0x10000546b
100005448:	lea	rsi, [rbp - 0x40]
10000544c:	mov	word ptr [rsi], 0x3f2d
100005451:	mov	byte ptr [rsi + 0x2], 0x0
100005455:	mov	byte ptr [rsi + 0x1], al
100005458:	lea	rdx, [rip + 0x57be] ## literal pool for: "cru"
10000545f:	lea	rdi, [rbp - 0x180]
100005466:	call	0x100005b65
10000546b:	mov	rdi, qword ptr [rbp - 0x88]
100005472:	xor	esi, esi
100005474:	test	byte ptr [rbp - 0x15c], -0x80
10000547b:	sete	sil
10000547f:	call	0x100009ee0 ## symbol stub for: _archive_match_set_inclusion_recursion
100005484:	mov	rdi, qword ptr [rbp - 0x180]
10000548b:	test	rdi, rdi
10000548e:	je	0x1000054ab
100005490:	lea	rsi, [rip + 0x587b] ## literal pool for: "-"
100005497:	call	0x10000a138 ## symbol stub for: _strcmp
10000549c:	test	eax, eax
10000549e:	jne	0x1000054ab
1000054a0:	mov	qword ptr [rbp - 0x180], 0x0
1000054ab:	movsx	ecx, byte ptr [rbp - 0x128]
1000054b2:	lea	eax, [rcx - 0x72]
1000054b5:	cmp	eax, 0x6
1000054b8:	ja	0x1000054d8
1000054ba:	lea	rcx, [rip + 0x52b]
1000054c1:	movsxd	rax, dword ptr [rcx + 4*rax]
1000054c5:	add	rax, rcx
1000054c8:	jmp	rax
1000054ca:	lea	rdi, [rbp - 0x180]
1000054d1:	call	0x100008ac6
1000054d6:	jmp	0x100005513
1000054d8:	cmp	ecx, 0x63
1000054db:	jne	0x100005513
1000054dd:	lea	rdi, [rbp - 0x180]
1000054e4:	call	0x10000804f
1000054e9:	jmp	0x100005513
1000054eb:	lea	rdi, [rbp - 0x180]
1000054f2:	call	0x100005ff4
1000054f7:	jmp	0x100005513
1000054f9:	lea	rdi, [rbp - 0x180]
100005500:	call	0x100008e9c
100005505:	jmp	0x100005513
100005507:	lea	rdi, [rbp - 0x180]
10000550e:	call	0x1000067bd
100005513:	lea	rbx, [rbp - 0x180]
10000551a:	mov	rdi, qword ptr [rbx + 0xf8]
100005521:	call	0x100009eb0 ## symbol stub for: _archive_match_free
100005526:	mov	rdi, rbx
100005529:	call	0x1000070a5
10000552e:	mov	rdi, qword ptr [rbx + 0x70]
100005532:	call	0x10000424b
100005537:	mov	rdi, qword ptr [rbx + 0x120]
10000553e:	call	0x100007c7f
100005543:	cmp	dword ptr [rbx + 0xb4], 0x0
10000554a:	je	0x100005564
10000554c:	lea	rsi, [rip + 0x57c1] ## literal pool for: "Error exit delayed from previous errors."
100005553:	xor	edi, edi
100005555:	xor	eax, eax
100005557:	call	0x10000989e
10000555c:	mov	eax, dword ptr [rbp - 0xcc]
100005562:	jmp	0x100005566
100005564:	xor	eax, eax
100005566:	mov	rcx, qword ptr [rip + 0x6a9b] ## literal pool symbol address: ___stack_chk_guard
10000556d:	mov	rcx, qword ptr [rcx]
100005570:	cmp	rcx, qword ptr [rbp - 0x30]
100005574:	jne	0x100005645
10000557a:	add	rsp, 0x168
100005581:	pop	rbx
100005582:	pop	r12
100005584:	pop	r13
100005586:	pop	r14
100005588:	pop	r15
10000558a:	pop	rbp
10000558b:	ret
10000558c:	lea	rdi, [rbp - 0x40]
100005590:	mov	byte ptr [rdi + 0x2], 0x0
100005594:	mov	word ptr [rdi], 0x2d2d
100005599:	mov	edx, 0x10
10000559e:	mov	rbx, qword ptr [rbp - 0x50]
1000055a2:	mov	rsi, rbx
1000055a5:	call	0x100009d8a ## symbol stub for: ___strcat_chk
1000055aa:	jmp	0x1000053a6
1000055af:	lea	rdx, [rip + 0x5568] ## literal pool for: "Couldn't exclude %s\n"
1000055b6:	mov	edi, 0x1
1000055bb:	xor	esi, esi
1000055bd:	mov	rcx, rbx
1000055c0:	jmp	0x1000055ef
1000055c2:	call	0x100009d72 ## symbol stub for: ___error
1000055c7:	mov	esi, dword ptr [rax]
1000055c9:	lea	rdx, [rip + 0x54bd] ## literal pool for: "Out of memory"
1000055d0:	jmp	0x10000562f
1000055d2:	mov	rdi, qword ptr [rbp - 0x88]
1000055d9:	call	0x100009e6e ## symbol stub for: _archive_error_string
1000055de:	lea	rdx, [rip + 0x55aa] ## literal pool for: "Error : %s"
1000055e5:	mov	edi, 0x1
1000055ea:	xor	esi, esi
1000055ec:	mov	rcx, rax
1000055ef:	xor	eax, eax
1000055f1:	call	0x1000099b3
1000055f6:	movsx	r8d, cl
1000055fa:	lea	rdx, [rip + 0x554c] ## literal pool for: "Can't specify both -%c and -%c"
100005601:	mov	edi, 0x1
100005606:	xor	esi, esi
100005608:	mov	ecx, eax
10000560a:	xor	eax, eax
10000560c:	call	0x1000099b3
100005611:	call	0x100009d72 ## symbol stub for: ___error
100005616:	mov	esi, dword ptr [rax]
100005618:	lea	rdx, [rip + 0x5404] ## literal pool for: "sigaction(SIGINFO) failed"
10000561f:	jmp	0x10000562f
100005621:	call	0x100009d72 ## symbol stub for: ___error
100005626:	mov	esi, dword ptr [rax]
100005628:	lea	rdx, [rip + 0x540e] ## literal pool for: "sigaction(SIGUSR1) failed"
10000562f:	mov	edi, 0x1
100005634:	jmp	0x100005733
100005639:	lea	rdx, [rip + 0x559f] ## literal pool for: "Must specify one of -c, -r, -t, -u, -x"
100005640:	jmp	0x10000572c
100005645:	call	0x100009d84 ## symbol stub for: ___stack_chk_fail
10000564a:	lea	rdx, [rip + 0x54e2] ## literal pool for: "Invalid argument to --gid"
100005651:	jmp	0x10000572c
100005656:	lea	rdx, [rip + 0x5541] ## literal pool for: "Invalid argument to --strip-components"
10000565d:	jmp	0x10000572c
100005662:	lea	rdx, [rip + 0x555c] ## literal pool for: "Invalid argument to --uid"
100005669:	jmp	0x10000572c
10000566e:	lea	rdx, [rip + 0x5426] ## literal pool for: "Invalid or out of range (1..8192) argument to -b"
100005675:	jmp	0x10000572c
10000567a:	lea	rdx, [rip + 0x544b] ## literal pool for: "Can't specify both --uuencode and --b64encode"
100005681:	jmp	0x10000572c
100005686:	call	0x100005ab4
10000568b:	movsx	r8d, al
10000568f:	lea	rdx, [rip + 0x54b7] ## literal pool for: "Can't specify both -%c and -%c"
100005696:	mov	edi, 0x1
10000569b:	xor	esi, esi
10000569d:	mov	ecx, 0x6a
1000056a2:	jmp	0x10000560a
1000056a7:	movsx	r8d, al
1000056ab:	lea	rdx, [rip + 0x549b] ## literal pool for: "Can't specify both -%c and -%c"
1000056b2:	mov	edi, 0x1
1000056b7:	xor	esi, esi
1000056b9:	mov	ecx, 0x79
1000056be:	jmp	0x10000560a
1000056c3:	movsx	r8d, al
1000056c7:	lea	rdx, [rip + 0x547f] ## literal pool for: "Can't specify both -%c and -%c"
1000056ce:	mov	edi, 0x1
1000056d3:	xor	esi, esi
1000056d5:	mov	ecx, 0x7a
1000056da:	jmp	0x10000560a
1000056df:	mov	rcx, qword ptr [rbp - 0xe8]
1000056e6:	lea	rdx, [rip + 0x5431] ## literal pool for: "Couldn't exclude %s\n"
1000056ed:	jmp	0x100005719
1000056ef:	movsx	r8d, al
1000056f3:	lea	rdx, [rip + 0x5453] ## literal pool for: "Can't specify both -%c and -%c"
1000056fa:	mov	edi, 0x1
1000056ff:	xor	esi, esi
100005701:	mov	ecx, 0xc
100005706:	jmp	0x10000560a
10000570b:	mov	rcx, qword ptr [rbp - 0xe8]
100005712:	lea	rdx, [rip + 0x5453] ## literal pool for: "Failed to add %s to inclusion list"
100005719:	mov	edi, 0x1
10000571e:	xor	esi, esi
100005720:	jmp	0x1000055ef
100005725:	lea	rdx, [rip + 0x53d8] ## literal pool for: "Meaningless option: -C ''"
10000572c:	mov	edi, 0x1
100005731:	xor	esi, esi
100005733:	xor	eax, eax
100005735:	call	0x1000099b3
10000573a:	movsx	r8d, al
10000573e:	lea	rdx, [rip + 0x5408] ## literal pool for: "Can't specify both -%c and -%c"
100005745:	mov	edi, 0x1
10000574a:	xor	esi, esi
10000574c:	mov	ecx, 0x4a
100005751:	jmp	0x10000560a
100005756:	movsx	r8d, al
10000575a:	lea	rdx, [rip + 0x53ec] ## literal pool for: "Can't specify both -%c and -%c"
100005761:	mov	edi, 0x1
100005766:	xor	esi, esi
100005768:	mov	ecx, 0x5a
10000576d:	jmp	0x10000560a
100005772:	call	0x100005adc
100005777:	lea	rdx, [rip + 0x53cf] ## literal pool for: "Can't specify both -%c and -%c"
10000577e:	mov	edi, 0x1
100005783:	xor	esi, esi
100005785:	mov	ecx, 0x63
10000578a:	jmp	0x10000560a
10000578f:	lea	rdx, [rip + 0x53b7] ## literal pool for: "Can't specify both -%c and -%c"
100005796:	mov	edi, 0x1
10000579b:	xor	esi, esi
10000579d:	mov	ecx, 0x72
1000057a2:	jmp	0x10000560a
1000057a7:	lea	rdx, [rip + 0x539f] ## literal pool for: "Can't specify both -%c and -%c"
1000057ae:	mov	edi, 0x1
1000057b3:	xor	esi, esi
1000057b5:	mov	ecx, 0x74
1000057ba:	jmp	0x10000560a
1000057bf:	lea	rdx, [rip + 0x5387] ## literal pool for: "Can't specify both -%c and -%c"
1000057c6:	mov	edi, 0x1
1000057cb:	xor	esi, esi
1000057cd:	mov	ecx, 0x75
1000057d2:	jmp	0x10000560a
1000057d7:	lea	rdx, [rip + 0x536f] ## literal pool for: "Can't specify both -%c and -%c"
1000057de:	mov	edi, 0x1
1000057e3:	xor	esi, esi
1000057e5:	mov	ecx, 0x78
1000057ea:	jmp	0x10000560a
1000057ef:	nop
1000057f0:	mov	bh, ch
	.byte 0xff #bad opcode
1000057f3:	jmp	qword ptr [rdx + 0x4effffef]
1000057f9:	out	dx, eax
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000057fc:	mov	edx, 0xc6ffffef
100005801:	out	dx, eax
	.byte 0xff #bad opcode
100005803:	call	rdx
100005805:	out	dx, eax
	.byte 0xff #bad opcode
100005807:	push	rdx
100005809:	out	dx, eax
	.byte 0xff #bad opcode
10000580b:	inc	dword ptr [rax + 8*rsi - 0x1]
10000580f:	call	[rsi - 0x10]
	.byte 0xff #bad opcode
100005813:	push	qword ptr [rcx - 0x10]
	.byte 0xff #bad opcode
100005817:	jmp	rdx
100005819:	lock
	.byte 0xff #bad opcode
10000581b:	push	rbp
10000581d:	lock
	.byte 0xff #bad opcode
10000581f:	call	qword ptr [rcx]
100005821:	clc
	.byte 0xff #bad opcode
100005823:	call	qword ptr [rbx]
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
100005827:	call	[rdi]
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
10000582b:	jmp	[rbx]
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
10000582f:	dec	dword ptr [rbx - 0xf]
	.byte 0xff #bad opcode
100005833:	call	[rax]
100005835:	out	dx, eax
	.byte 0xff #bad opcode
100005837:	call	[rax]
100005839:	out	dx, eax
	.byte 0xff #bad opcode
10000583b:	call	[rax]
10000583d:	out	dx, eax
	.byte 0xff #bad opcode
10000583f:	call	[rax]
100005841:	out	dx, eax
	.byte 0xff #bad opcode
100005843:	call	[rax]
100005845:	out	dx, eax
	.byte 0xff #bad opcode
100005847:	call	qword ptr [rdi - 0xf]
	.byte 0xff #bad opcode
10000584b:	push	qword ptr [rcx - 0xf]
	.byte 0xff #bad opcode
10000584f:	dec	dword ptr [rcx - 0x5e00000f]
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005858:	mov	ecx, 0xd1fffff1
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xdd #bad opcode
	.byte 0xf1 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005864:	jmp	0x10400585a
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
10000586b:	call	[rip + 0x37fffff2]
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
100005873:	inc	dword ptr [rbx - 0xe]
	.byte 0xff #bad opcode
100005877:	dec	dword ptr [rdi - 0xe]
	.byte 0xff #bad opcode
10000587b:	call	[rsi - 0xe]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005880:	js	0x100005874
	.byte 0xff #bad opcode
100005883:	inc	dword ptr [rdx + 8*rsi - 0xd5a0001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000588c:	mov	edx, 0xcffffff2
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005894:	in	al, dx
	.byte 0xf2 #bad opcode
	.byte 0xff #bad opcode
100005897:	dec	dword ptr [rcx]
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
10000589b:	call	qword ptr [rip + 0x28fffff3]
	.byte 0xf3 #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000058a4:	cmp	esi, ebx
	.byte 0xff #bad opcode
1000058a7:	call	qword ptr [rbx - 0xd]
	.byte 0xff #bad opcode
1000058ab:	call	[rdi - 0xd]
	.byte 0xff #bad opcode
1000058af:	jmp	[rbx - 0xd]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000058b4:	fdivr	st(3), st
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000058b8:	call	0x15a0058b0
1000058bd:	hlt
	.byte 0xff #bad opcode
1000058bf:	jmp	[rsp + 8*rsi - 0x1]
	.byte 0xff #bad opcode
1000058c4:	js	0x1000058ba
	.byte 0xff #bad opcode
1000058c7:	call	qword ptr [rsi - 0x6f000002]
1000058cd:	hlt
	.byte 0xff #bad opcode
1000058cf:	call	[rax]
1000058d1:	out	dx, eax
	.byte 0xff #bad opcode
1000058d3:	inc	dword ptr [rdx - 0x7d000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000058db:	inc	dword ptr [rdx - 0x7d000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000058e3:	inc	dword ptr [rdx - 0x7d000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000058eb:	inc	dword ptr [rdx - 0x7d000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000058f4:	jmp	0xab0058f0
1000058f9:	hlt
	.byte 0xff #bad opcode
1000058fb:	inc	dword ptr [rdx - 0x7d000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005903:	inc	dword ptr [rdx - 0x7d000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000590b:	dec	ebx
10000590d:	hlt
	.byte 0xff #bad opcode
10000590f:	call	[rdx - 0x11]
	.byte 0xff #bad opcode
100005913:	call	rdi
100005915:	hlt
	.byte 0xff #bad opcode
100005917:	inc	dword ptr [rdx - 0xa000001]
10000591d:	hlt
	.byte 0xff #bad opcode
10000591f:	inc	dword ptr [rdx - 0x7d000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005927:	inc	dword ptr [rcx]
100005929:	cmc
	.byte 0xff #bad opcode
10000592b:	dec	dword ptr [rip - 0x7d00000b]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005933:	inc	dword ptr [rdx + 0x20ffffff]
100005939:	cmc
	.byte 0xff #bad opcode
10000593b:	call	[rdx - 0x11]
	.byte 0xff #bad opcode
10000593f:	jmp	[8*rsi - 0x7d0001]
	.byte 0xff #bad opcode
100005947:	inc	dword ptr [rdx + 0x3fffffff]
10000594d:	cmc
	.byte 0xff #bad opcode
10000594f:	inc	dword ptr [rdx + 0x61ffffff]
100005955:	cmc
	.byte 0xff #bad opcode
100005957:	inc	dword ptr [rdx - 0x7d000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000595f:	inc	dword ptr [rdx - 0x7d000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005967:	inc	dword ptr [rdx - 0x7d000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005970:	jg	0x100005967
	.byte 0xff #bad opcode
100005973:	dec	dword ptr [rbx + 0xcfffff5]
100005979:	idiv	bh
10000597b:	inc	dword ptr [rdx - 0x7d000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100005983:	jmp	[rdi]
100005985:	idiv	bh
100005987:	inc	dword ptr [rdx + 0x42ffffff]
10000598d:	idiv	bh
10000598f:	inc	dword ptr [rdx + 0x57ffffff]
100005995:	idiv	bh
100005997:	push	qword ptr [rbp - 0xa]
	.byte 0xff #bad opcode
10000599b:	dec	dword ptr [rsi - 0x11]
	.byte 0xff #bad opcode
10000599f:	inc	dword ptr [rcx - 0x7200000a]
1000059a5:	idiv	bh
1000059a7:	call	[rcx - 0x5a00000a]
1000059ad:	idiv	bh
1000059af:	push	qword ptr [rsi + 8*rsi - 0x93f0001]
	.byte 0xff #bad opcode
1000059b7:	jmp	rbx
1000059b9:	idiv	bh
	.byte 0xff #bad opcode
1000059bc:	sti
1000059bd:	idiv	bh
1000059bf:	jmp	qword ptr [rdi + 8*rsi]
	.byte 0xff #bad opcode
1000059c3:	call	[rcx]
1000059c5:	idiv	edi
1000059c7:	inc	dword ptr [rdi - 0x9]
	.byte 0xff #bad opcode
1000059cb:	call	qword ptr [rbx - 0x9]
	.byte 0xff #bad opcode
1000059cf:	push	qword ptr [rbx - 0x9]
	.byte 0xff #bad opcode
1000059d3:	dec	dword ptr [rsi + 0x54fffff7]
1000059d9:	in	eax, dx
	.byte 0xff #bad opcode
1000059db:	push	rax
1000059dd:	cmc
	.byte 0xff #bad opcode
1000059df:	inc	ecx
1000059e1:	cmc
	.byte 0xff #bad opcode
1000059e3:	call	rax
1000059e5:	cmc
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000059e8:	fcompi	st, st(5)
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000059ec:	fdivp	st(2), st
	.byte 0xff #bad opcode
1000059ef:	jmp	qword ptr [rdi]
1000059f1:	sti
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
1000059f5:	cli
	.byte 0xff #bad opcode
1000059f7:	dec	dword ptr [rip + 0x27fffffb]
1000059fd:	sti
	.byte 0xff #bad opcode
1000059ff:	jmp	qword ptr [rdi]
100005a01:	sti
	.byte 0xff #bad opcode
100005a03:	call	[rbx]
100005a05:	sti
	.byte 0xff #bad opcode
100005a07:	call	qword ptr [rbp + 0x48]
100005a0a:	mov	ebp, esp
100005a0c:	mov	dword ptr [rip + 0xab6a], 0x1
100005a16:	pop	rbp
100005a17:	ret
100005a18:	push	rbp
100005a19:	mov	rbp, rsp
100005a1c:	push	r15
100005a1e:	push	r14
100005a20:	push	rbx
100005a21:	push	rax
100005a22:	call	0x10000985b
100005a27:	mov	r14, rax
100005a2a:	mov	rax, qword ptr [rip + 0x65df] ## literal pool symbol address: ___stderrp
100005a31:	mov	rdi, qword ptr [rax]
100005a34:	call	0x10000a06c ## symbol stub for: _fflush
100005a39:	lea	rsi, [rip + 0x5017] ## literal pool for: "bsdtar"
100005a40:	mov	rdi, r14
100005a43:	call	0x10000a138 ## symbol stub for: _strcmp
100005a48:	test	eax, eax
100005a4a:	lea	rax, [rip + 0x500d] ## literal pool for: ""
100005a51:	lea	rdx, [rip + 0x5472] ## literal pool for: "(bsdtar)"
100005a58:	cmove	rdx, rax
100005a5c:	lea	rdi, [rip + 0x5470] ## literal pool for: "%s%s: manipulate archive files\n"
100005a63:	mov	rsi, r14
100005a66:	xor	eax, eax
100005a68:	call	0x10000a0e4 ## symbol stub for: _printf
100005a6d:	lea	rbx, [rip + 0x547f] ## literal pool for: "First option must be a mode specifier:\n  -c Create  -r Add/Replace  -t List  -u Update  -x Extract\nCommon Options:\n  -b #  Use # 512-byte records per I/O block\n  -f <filename>  Location of archive\n  -v    Verbose\n  -w    Interactive\nCreate: %p -c [options] [<file> | <dir> | @<archive> | -C <dir> ]\n  <file>, <dir>  add these items to archive\n  -z, -j, -J, --lzma  Compress archive with gzip/bzip2/xz/lzma\n  --format {ustar|pax|cpio|shar}  Select archive format\n  --exclude <pattern>  Skip files that match pattern\n  -C <dir>  Change to <dir> before processing remaining files\n  @<archive>  Add entries from <archive> to output\nList: %p -t [options] [<patterns>]\n  <patterns>  If specified, list only entries that match\nExtract: %p -x [options] [<patterns>]\n  <patterns>  If specified, extract only entries that match\n  -k    Keep (don't overwrite) existing files\n  -m    Don't restore modification times\n  -O    Write entries to stdout, don't restore to disk\n  -p    Restore permissions (including ACLs, owner, file flags)\n"
100005a74:	mov	r15, qword ptr [rip + 0x65a5] ## literal pool symbol address: ___stdoutp
100005a7b:	movsx	edi, byte ptr [rbx]
100005a7e:	cmp	edi, 0x25
100005a81:	je	0x100005a8a
100005a83:	test	dil, dil
100005a86:	jne	0x100005aa5
100005a88:	jmp	0x100005aaf
100005a8a:	cmp	byte ptr [rbx + 0x1], 0x70
100005a8e:	jne	0x100005aa0
100005a90:	inc	rbx
100005a93:	mov	rsi, qword ptr [r15]
100005a96:	mov	rdi, r14
100005a99:	call	0x10000a084 ## symbol stub for: _fputs
100005a9e:	jmp	0x100005aaa
100005aa0:	mov	edi, 0x25
100005aa5:	call	0x10000a0ea ## symbol stub for: _putchar
100005aaa:	inc	rbx
100005aad:	jmp	0x100005a7b
100005aaf:	call	0x100005ab4
100005ab4:	push	rbp
100005ab5:	mov	rbp, rsp
100005ab8:	call	0x100009fb8 ## symbol stub for: _archive_version_details
100005abd:	lea	rdi, [rip + 0x53ef] ## literal pool for: "bsdtar %s - %s \n"
100005ac4:	lea	rsi, [rip + 0x53f9] ## literal pool for: "3.5.1"
100005acb:	mov	rdx, rax
100005ace:	xor	eax, eax
100005ad0:	call	0x10000a0e4 ## symbol stub for: _printf
100005ad5:	xor	edi, edi
100005ad7:	call	0x10000a054 ## symbol stub for: _exit
100005adc:	push	rbp
100005add:	mov	rbp, rsp
100005ae0:	push	r14
100005ae2:	push	rbx
100005ae3:	call	0x10000985b
100005ae8:	mov	rbx, rax
100005aeb:	mov	r14, qword ptr [rip + 0x651e] ## literal pool symbol address: ___stderrp
100005af2:	mov	rcx, qword ptr [r14]
100005af5:	lea	rdi, [rip + 0x5241] ## literal pool for: "Usage:\n"
100005afc:	mov	esi, 0x7
100005b01:	mov	edx, 0x1
100005b06:	call	0x10000a096 ## symbol stub for: _fwrite
100005b0b:	mov	rdi, qword ptr [r14]
100005b0e:	lea	rsi, [rip + 0x5230] ## literal pool for: "  List:    %s -tf <archive-filename>\n"
100005b15:	mov	rdx, rbx
100005b18:	xor	eax, eax
100005b1a:	call	0x10000a078 ## symbol stub for: _fprintf
100005b1f:	mov	rdi, qword ptr [r14]
100005b22:	lea	rsi, [rip + 0x5242] ## literal pool for: "  Extract: %s -xf <archive-filename>\n"
100005b29:	mov	rdx, rbx
100005b2c:	xor	eax, eax
100005b2e:	call	0x10000a078 ## symbol stub for: _fprintf
100005b33:	mov	rdi, qword ptr [r14]
100005b36:	lea	rsi, [rip + 0x5254] ## literal pool for: "  Create:  %s -cf <archive-filename> [filenames...]\n"
100005b3d:	mov	rdx, rbx
100005b40:	xor	eax, eax
100005b42:	call	0x10000a078 ## symbol stub for: _fprintf
100005b47:	mov	rdi, qword ptr [r14]
100005b4a:	lea	rsi, [rip + 0x5275] ## literal pool for: "  Help:    %s --help\n"
100005b51:	mov	rdx, rbx
100005b54:	xor	eax, eax
100005b56:	call	0x10000a078 ## symbol stub for: _fprintf
100005b5b:	mov	edi, 0x1
100005b60:	call	0x10000a054 ## symbol stub for: _exit
100005b65:	push	rbp
100005b66:	mov	rbp, rsp
100005b69:	push	r14
100005b6b:	push	rbx
100005b6c:	mov	r14, rsi
100005b6f:	movsx	ebx, byte ptr [rdi + 0x58]
100005b73:	mov	rdi, rdx
100005b76:	mov	esi, ebx
100005b78:	call	0x10000a132 ## symbol stub for: _strchr
100005b7d:	test	rax, rax
100005b80:	je	0x100005b87
100005b82:	pop	rbx
100005b83:	pop	r14
100005b85:	pop	rbp
100005b86:	ret
100005b87:	lea	rdx, [rip + 0x52fe] ## literal pool for: "Option %s is not permitted in mode -%c"
100005b8e:	mov	edi, 0x1
100005b93:	xor	esi, esi
100005b95:	mov	rcx, r14
100005b98:	mov	r8d, ebx
100005b9b:	xor	eax, eax
100005b9d:	call	0x1000099b3
100005ba2:	nop
100005ba3:	nop
100005ba4:	push	rbp
100005ba5:	mov	rbp, rsp
100005ba8:	push	r15
100005baa:	push	r14
100005bac:	push	r13
100005bae:	push	r12
100005bb0:	push	rbx
100005bb1:	sub	rsp, 0x28
100005bb5:	mov	r15, rdi
100005bb8:	mov	eax, dword ptr [rdi + 0x78]
100005bbb:	lea	r13, [rip + 0x41e]
100005bc2:	lea	rcx, [rip + 0x513d] ## literal pool for: "--"
100005bc9:	mov	qword ptr [rbp - 0x38], rcx
100005bcd:	mov	qword ptr [r15 + 0x98], 0x0
100005bd8:	mov	r14d, 0x3f
100005bde:	cmp	eax, 0x4
100005be1:	ja	0x100005f16
100005be7:	mov	eax, eax
100005be9:	movsxd	rax, dword ptr [r13 + 4*rax]
100005bee:	add	rax, r13
100005bf1:	jmp	rax
100005bf3:	mov	rcx, qword ptr [r15 + 0x90]
100005bfa:	lea	rax, [rcx + 0x8]
100005bfe:	mov	qword ptr [r15 + 0x90], rax
100005c05:	mov	eax, dword ptr [r15 + 0x8c]
100005c0c:	lea	edx, [rax - 0x1]
100005c0f:	mov	dword ptr [r15 + 0x8c], edx
100005c16:	mov	rdx, qword ptr [rcx + 0x8]
100005c1a:	test	rdx, rdx
100005c1d:	je	0x100005d8f
100005c23:	cmp	byte ptr [rdx], 0x2d
100005c26:	je	0x100005c6d
100005c28:	mov	dword ptr [r15 + 0x78], 0x1
100005c30:	lea	rdx, [rcx + 0x10]
100005c34:	mov	qword ptr [r15 + 0x90], rdx
100005c3b:	mov	rcx, qword ptr [rcx + 0x8]
100005c3f:	mov	qword ptr [r15 + 0x80], rcx
100005c46:	add	eax, -0x2
100005c49:	mov	dword ptr [r15 + 0x8c], eax
100005c50:	mov	rax, qword ptr [r15 + 0x80]
100005c57:	lea	rcx, [rax + 0x1]
100005c5b:	mov	qword ptr [r15 + 0x80], rcx
100005c62:	movsx	ebx, byte ptr [rax]
100005c65:	test	ebx, ebx
100005c67:	jne	0x100005db2
100005c6d:	mov	dword ptr [r15 + 0x78], 0x2
100005c75:	mov	rbx, qword ptr [r15 + 0x90]
100005c7c:	mov	rdi, qword ptr [rbx]
100005c7f:	test	rdi, rdi
100005c82:	je	0x100005d8f
100005c88:	cmp	byte ptr [rdi], 0x2d
100005c8b:	jne	0x100005d8f
100005c91:	lea	rsi, [rip + 0x506e] ## literal pool for: "--"
100005c98:	call	0x10000a138 ## symbol stub for: _strcmp
100005c9d:	lea	rcx, [rbx + 0x8]
100005ca1:	mov	qword ptr [r15 + 0x90], rcx
100005ca8:	test	eax, eax
100005caa:	je	0x100005d88
100005cb0:	mov	rax, qword ptr [rbx]
100005cb3:	mov	qword ptr [r15 + 0x80], rax
100005cba:	dec	dword ptr [r15 + 0x8c]
100005cc1:	cmp	byte ptr [rax + 0x1], 0x2d
100005cc5:	je	0x100005d9a
100005ccb:	inc	rax
100005cce:	mov	dword ptr [r15 + 0x78], 0x3
100005cd6:	mov	qword ptr [r15 + 0x80], rax
100005cdd:	jmp	0x100005ce6
100005cdf:	mov	rax, qword ptr [r15 + 0x80]
100005ce6:	lea	r12, [rax + 0x1]
100005cea:	mov	qword ptr [r15 + 0x80], r12
100005cf1:	movsx	r14d, byte ptr [rax]
100005cf5:	test	r14d, r14d
100005cf8:	jne	0x100005d0c
100005cfa:	mov	dword ptr [r15 + 0x78], 0x2
100005d02:	mov	eax, 0x2
100005d07:	jmp	0x100005bcd
100005d0c:	lea	rdi, [rip + 0x56b7] ## literal pool for: "aBb:C:cf:HhI:JjkLlmnOoPpqrSs:T:tUuvW:wX:xyZz"
100005d13:	mov	edx, 0x2d
100005d18:	mov	esi, r14d
100005d1b:	call	0x10000a0c6 ## symbol stub for: _memchr
100005d20:	test	rax, rax
100005d23:	je	0x100005f10
100005d29:	cmp	byte ptr [rax + 0x1], 0x3a
100005d2d:	jne	0x100005f16
100005d33:	cmp	byte ptr [r12], 0x0
100005d38:	jne	0x100005d66
100005d3a:	mov	rax, qword ptr [r15 + 0x90]
100005d41:	mov	r12, qword ptr [rax]
100005d44:	mov	qword ptr [r15 + 0x80], r12
100005d4b:	test	r12, r12
100005d4e:	je	0x100005fab
100005d54:	add	rax, 0x8
100005d58:	mov	qword ptr [r15 + 0x90], rax
100005d5f:	dec	dword ptr [r15 + 0x8c]
100005d66:	cmp	r14b, 0x57
100005d6a:	jne	0x100005f83
100005d70:	mov	dword ptr [r15 + 0x78], 0x4
100005d78:	lea	rax, [rip + 0x55b4] ## literal pool for: "-W "
100005d7f:	mov	qword ptr [rbp - 0x38], rax
100005d83:	jmp	0x100005e0f
100005d88:	dec	dword ptr [r15 + 0x8c]
100005d8f:	mov	r14d, 0xffffffff
100005d95:	jmp	0x100005f16
100005d9a:	mov	dword ptr [r15 + 0x78], 0x4
100005da2:	add	rax, 0x2
100005da6:	mov	qword ptr [r15 + 0x80], rax
100005dad:	mov	r12, rax
100005db0:	jmp	0x100005e0f
100005db2:	lea	rdi, [rip + 0x5611] ## literal pool for: "aBb:C:cf:HhI:JjkLlmnOoPpqrSs:T:tUuvW:wX:xyZz"
100005db9:	mov	edx, 0x2d
100005dbe:	mov	esi, ebx
100005dc0:	call	0x10000a0c6 ## symbol stub for: _memchr
100005dc5:	test	rax, rax
100005dc8:	je	0x100005f16
100005dce:	cmp	byte ptr [rax + 0x1], 0x3a
100005dd2:	jne	0x100005e00
100005dd4:	mov	rax, qword ptr [r15 + 0x90]
100005ddb:	mov	rcx, qword ptr [rax]
100005dde:	mov	qword ptr [r15 + 0x98], rcx
100005de5:	test	rcx, rcx
100005de8:	je	0x100005f94
100005dee:	add	rax, 0x8
100005df2:	mov	qword ptr [r15 + 0x90], rax
100005df9:	dec	dword ptr [r15 + 0x8c]
100005e00:	mov	r14d, ebx
100005e03:	jmp	0x100005f16
100005e08:	mov	r12, qword ptr [r15 + 0x80]
100005e0f:	mov	dword ptr [r15 + 0x78], 0x2
100005e17:	mov	rdi, r12
100005e1a:	mov	esi, 0x3d
100005e1f:	call	0x10000a132 ## symbol stub for: _strchr
100005e24:	test	rax, rax
100005e27:	je	0x100005e42
100005e29:	mov	rdx, rax
100005e2c:	sub	rdx, r12
100005e2f:	inc	rax
100005e32:	mov	rcx, rax
100005e35:	mov	qword ptr [rbp - 0x40], rax
100005e39:	mov	qword ptr [r15 + 0x98], rax
100005e40:	jmp	0x100005e53
100005e42:	mov	rdi, r12
100005e45:	call	0x10000a15c ## symbol stub for: _strlen
100005e4a:	mov	rdx, rax
100005e4d:	xor	eax, eax
100005e4f:	mov	qword ptr [rbp - 0x40], rax
100005e53:	mov	al, byte ptr [r12]
100005e57:	lea	r13, [rip + 0x64c2]
100005e5e:	lea	rbx, [rip + 0x5592] ## literal pool for: "absolute-paths"
100005e65:	xor	ecx, ecx
100005e67:	mov	qword ptr [rbp - 0x48], rcx
100005e6b:	xor	ecx, ecx
100005e6d:	mov	qword ptr [rbp - 0x50], r12
100005e71:	mov	byte ptr [rbp - 0x29], al
100005e74:	mov	r14, rcx
100005e77:	cmp	byte ptr [rbx], al
100005e79:	jne	0x100005e9c
100005e7b:	mov	rdi, r12
100005e7e:	mov	rsi, rbx
100005e81:	mov	r12, rdx
100005e84:	call	0x10000a162 ## symbol stub for: _strncmp
100005e89:	test	eax, eax
100005e8b:	je	0x100005ea1
100005e8d:	mov	rcx, r14
100005e90:	mov	rdx, r12
100005e93:	mov	r12, qword ptr [rbp - 0x50]
100005e97:	mov	al, byte ptr [rbp - 0x29]
100005e9a:	jmp	0x100005ebf
100005e9c:	mov	rcx, r14
100005e9f:	jmp	0x100005ebf
100005ea1:	mov	rdi, rbx
100005ea4:	call	0x10000a15c ## symbol stub for: _strlen
100005ea9:	mov	rcx, r13
100005eac:	mov	qword ptr [rbp - 0x48], r14
100005eb0:	cmp	rax, r12
100005eb3:	mov	rdx, r12
100005eb6:	mov	r12, qword ptr [rbp - 0x50]
100005eba:	mov	al, byte ptr [rbp - 0x29]
100005ebd:	je	0x100005f2b
100005ebf:	mov	rbx, qword ptr [r13 + 0x10]
100005ec3:	add	r13, 0x10
100005ec7:	test	rbx, rbx
100005eca:	jne	0x100005e74
100005ecc:	test	rcx, rcx
100005ecf:	je	0x100005ef9
100005ed1:	mov	rax, qword ptr [rbp - 0x48]
100005ed5:	test	rax, rax
100005ed8:	je	0x100005f28
100005eda:	mov	r8, qword ptr [rcx]
100005edd:	mov	r9, qword ptr [rax]
100005ee0:	lea	rsi, [rip + 0x546d] ## literal pool for: "Ambiguous option %s%s (matches --%s and --%s)"
100005ee7:	xor	edi, edi
100005ee9:	mov	rdx, qword ptr [rbp - 0x38]
100005eed:	mov	rcx, r12
100005ef0:	xor	eax, eax
100005ef2:	call	0x10000989e
100005ef7:	jmp	0x100005f10
100005ef9:	lea	rsi, [rip + 0x5437] ## literal pool for: "Option %s%s is not supported"
100005f00:	xor	edi, edi
100005f02:	mov	rdx, qword ptr [rbp - 0x38]
100005f06:	mov	rcx, r12
100005f09:	xor	eax, eax
100005f0b:	call	0x10000989e
100005f10:	mov	r14d, 0x3f
100005f16:	mov	eax, r14d
100005f19:	add	rsp, 0x28
100005f1d:	pop	rbx
100005f1e:	pop	r12
100005f20:	pop	r13
100005f22:	pop	r14
100005f24:	pop	r15
100005f26:	pop	rbp
100005f27:	ret
100005f28:	mov	r13, rcx
100005f2b:	mov	r14d, 0x3f
100005f31:	mov	rax, qword ptr [rbp - 0x40]
100005f35:	cmp	dword ptr [r13 + 0x8], 0x0
100005f3a:	je	0x100005f6b
100005f3c:	test	rax, rax
100005f3f:	jne	0x100005f7d
100005f41:	mov	rax, qword ptr [r15 + 0x90]
100005f48:	mov	rcx, qword ptr [rax]
100005f4b:	mov	qword ptr [r15 + 0x98], rcx
100005f52:	test	rcx, rcx
100005f55:	je	0x100005fc3
100005f57:	add	rax, 0x8
100005f5b:	mov	qword ptr [r15 + 0x90], rax
100005f62:	dec	dword ptr [r15 + 0x8c]
100005f69:	jmp	0x100005f7d
100005f6b:	test	rax, rax
100005f6e:	je	0x100005f7d
100005f70:	mov	rcx, qword ptr [r13]
100005f74:	lea	rsi, [rip + 0x5428] ## literal pool for: "Option %s%s does not allow an argument"
100005f7b:	jmp	0x100005fce
100005f7d:	mov	r14d, dword ptr [r13 + 0xc]
100005f81:	jmp	0x100005f16
100005f83:	mov	dword ptr [r15 + 0x78], 0x2
100005f8b:	mov	qword ptr [r15 + 0x98], r12
100005f92:	jmp	0x100005f16
100005f94:	lea	rsi, [rip + 0x5359] ## literal pool for: "Option %c requires an argument"
100005f9b:	xor	edi, edi
100005f9d:	mov	edx, ebx
100005f9f:	xor	eax, eax
100005fa1:	call	0x10000989e
100005fa6:	jmp	0x100005f16
100005fab:	lea	rsi, [rip + 0x5361] ## literal pool for: "Option -%c requires an argument"
100005fb2:	xor	edi, edi
100005fb4:	mov	edx, r14d
100005fb7:	xor	eax, eax
100005fb9:	call	0x10000989e
100005fbe:	jmp	0x100005f10
100005fc3:	mov	rcx, qword ptr [r13]
100005fc7:	lea	rsi, [rip + 0x53b4] ## literal pool for: "Option %s%s requires an argument"
100005fce:	xor	edi, edi
100005fd0:	mov	rdx, qword ptr [rbp - 0x38]
100005fd4:	xor	eax, eax
100005fd6:	call	0x10000989e
100005fdb:	jmp	0x100005f16
100005fe0:	adc	edi, esp
	.byte 0xff #bad opcode
100005fe3:	push	qword ptr [rax - 0x4]
	.byte 0xff #bad opcode
100005fe7:	call	qword ptr [rbp - 0x4]
100005fed:	cld
	.byte 0xff #bad opcode
100005fef:	jmp	[rax]
	.byte 0xfe #bad opcode
	.byte 0xff #bad opcode
100005ff3:	call	qword ptr [rbp + 0x48]
100005ff6:	mov	ebp, esp
100005ff8:	push	rbx
100005ff9:	push	rax
100005ffa:	mov	rbx, rdi
100005ffd:	mov	esi, 0x74
100006002:	xor	edx, edx
100006004:	call	0x10000602a
100006009:	mov	rdi, qword ptr [rbx + 0xf8]
100006010:	call	0x100006738
100006015:	test	eax, eax
100006017:	je	0x100006023
100006019:	mov	dword ptr [rbx + 0xb4], 0x1
100006023:	add	rsp, 0x8
100006027:	pop	rbx
100006028:	pop	rbp
100006029:	ret
10000602a:	push	rbp
10000602b:	mov	rbp, rsp
10000602e:	push	r15
100006030:	push	r14
100006032:	push	r13
100006034:	push	r12
100006036:	push	rbx
100006037:	sub	rsp, 0x38
10000603b:	mov	qword ptr [rbp - 0x48], rdx
10000603f:	mov	r12d, esi
100006042:	mov	r13, rdi
100006045:	mov	rax, qword ptr [rdi + 0x90]
10000604c:	mov	rsi, qword ptr [rax]
10000604f:	test	rsi, rsi
100006052:	je	0x100006080
100006054:	mov	rdi, qword ptr [r13 + 0xf8]
10000605b:	call	0x100009ec2 ## symbol stub for: _archive_match_include_pattern
100006060:	test	eax, eax
100006062:	jne	0x1000066c8
100006068:	mov	rax, qword ptr [r13 + 0x90]
10000606f:	lea	rcx, [rax + 0x8]
100006073:	mov	qword ptr [r13 + 0x90], rcx
10000607a:	mov	rsi, qword ptr [rax + 0x8]
10000607e:	jmp	0x10000604f
100006080:	mov	rsi, qword ptr [r13 + 0x10]
100006084:	test	rsi, rsi
100006087:	je	0x1000060a6
100006089:	mov	rdi, qword ptr [r13 + 0xf8]
100006090:	mov	edx, 0x100
100006095:	and	edx, dword ptr [r13 + 0x24]
100006099:	call	0x100009ec8 ## symbol stub for: _archive_match_include_pattern_from_file
10000609e:	test	eax, eax
1000060a0:	jne	0x1000066c8
1000060a6:	call	0x100009f6a ## symbol stub for: _archive_read_new
1000060ab:	mov	r14, rax
1000060ae:	mov	rdi, qword ptr [r13 + 0x70]
1000060b2:	mov	rsi, rax
1000060b5:	call	0x100004119
1000060ba:	test	eax, eax
1000060bc:	jne	0x1000060c6
1000060be:	mov	rdi, r14
1000060c1:	call	0x100009f94 ## symbol stub for: _archive_read_support_filter_all
1000060c6:	mov	rdi, r14
1000060c9:	call	0x100009fa0 ## symbol stub for: _archive_read_support_format_all
1000060ce:	lea	rdi, [rip + 0x576c] ## literal pool for: "TAR_READER_OPTIONS"
1000060d5:	call	0x10000a09c ## symbol stub for: _getenv
1000060da:	test	rax, rax
1000060dd:	je	0x10000615c
1000060df:	mov	r15, rax
1000060e2:	mov	dword ptr [rbp - 0x38], r12d
1000060e6:	mov	rdi, rax
1000060e9:	call	0x10000a15c ## symbol stub for: _strlen
1000060ee:	mov	r12, rax
1000060f1:	lea	rdi, [rax + 0x1e]
1000060f5:	call	0x10000a0ba ## symbol stub for: _malloc
1000060fa:	test	rax, rax
1000060fd:	je	0x10000670e
100006103:	mov	rbx, rax
100006106:	inc	r12
100006109:	movups	xmm0, xmmword ptr [rip + 0x5751] ## literal pool for: "g_module_name__,"
100006110:	movups	xmmword ptr [rax + 0xd], xmm0
100006114:	movups	xmm0, xmmword ptr [rip + 0x5739] ## literal pool for: "__ignore_wrong_module_name__,"
10000611b:	movups	xmmword ptr [rax], xmm0
10000611e:	mov	rdi, rax
100006121:	add	rdi, 0x1d
100006125:	mov	rsi, r15
100006128:	mov	rdx, r12
10000612b:	call	0x10000a0cc ## symbol stub for: _memcpy
100006130:	mov	rdi, r14
100006133:	mov	rsi, rbx
100006136:	call	0x100009f88 ## symbol stub for: _archive_read_set_options
10000613b:	mov	r15d, eax
10000613e:	mov	rdi, rbx
100006141:	call	0x10000a090 ## symbol stub for: _free
100006146:	cmp	r15d, -0x1e
10000614a:	je	0x1000066ec
100006150:	mov	rdi, r14
100006153:	call	0x100009db4 ## symbol stub for: _archive_clear_error
100006158:	mov	r12d, dword ptr [rbp - 0x38]
10000615c:	mov	rsi, qword ptr [r13 + 0x60]
100006160:	mov	rdi, r14
100006163:	call	0x100009f88 ## symbol stub for: _archive_read_set_options
100006168:	test	eax, eax
10000616a:	jne	0x1000066ec
100006170:	test	byte ptr [r13 + 0x24], 0x10
100006175:	je	0x10000618e
100006177:	lea	rsi, [rip + 0x56f7] ## literal pool for: "read_concatenated_archives"
10000617e:	mov	rdi, r14
100006181:	call	0x100009f88 ## symbol stub for: _archive_read_set_options
100006186:	test	eax, eax
100006188:	jne	0x1000066ec
10000618e:	mov	rsi, qword ptr [r13 + 0x50]
100006192:	test	rsi, rsi
100006195:	je	0x1000061a1
100006197:	mov	rdi, r14
10000619a:	call	0x100009ee6 ## symbol stub for: _archive_read_add_passphrase
10000619f:	jmp	0x1000061b3
1000061a1:	lea	rdx, [rip + 0x1a78]
1000061a8:	mov	rdi, r14
1000061ab:	mov	rsi, r13
1000061ae:	call	0x100009f8e ## symbol stub for: _archive_read_set_passphrase_callback
1000061b3:	test	eax, eax
1000061b5:	jne	0x1000066ec
1000061bb:	mov	rsi, qword ptr [r13]
1000061bf:	movsxd	rdx, dword ptr [r13 + 0x18]
1000061c3:	mov	rdi, r14
1000061c6:	call	0x100009f82 ## symbol stub for: _archive_read_open_filename
1000061cb:	test	eax, eax
1000061cd:	jne	0x1000066fd
1000061d3:	mov	rdi, r13
1000061d6:	call	0x1000077de
1000061db:	cmp	r12b, 0x78
1000061df:	jne	0x10000624d
1000061e1:	lea	rdx, [rbp - 0x60]
1000061e5:	mov	qword ptr [rdx], r13
1000061e8:	mov	qword ptr [rdx + 0x8], r14
1000061ec:	lea	rsi, [rip + 0x6e4]
1000061f3:	mov	rdi, r14
1000061f6:	call	0x100009f58 ## symbol stub for: _archive_read_extract_set_progress_callback
1000061fb:	test	byte ptr [r13 + 0x24], 0x4
100006200:	je	0x100006216
100006202:	lea	rdi, [rip + 0x56a1] ## literal pool for: "."
100006209:	call	0x10000a048 ## symbol stub for: _chroot
10000620e:	test	eax, eax
100006210:	jne	0x10000671e
100006216:	cmp	qword ptr [r13], 0x0
10000621b:	je	0x10000624d
10000621d:	test	byte ptr [r13 + 0x25], 0x8
100006222:	jne	0x10000624d
100006224:	call	0x100009d9c ## symbol stub for: __qtn_file_alloc
100006229:	test	rax, rax
10000622c:	je	0x10000624d
10000622e:	mov	rbx, rax
100006231:	mov	rsi, qword ptr [r13]
100006235:	mov	rdi, rax
100006238:	call	0x100009dae ## symbol stub for: __qtn_file_init_with_path
10000623d:	test	eax, eax
10000623f:	je	0x1000065f1
100006245:	mov	rdi, rbx
100006248:	call	0x100009da8 ## symbol stub for: __qtn_file_free
10000624d:	xor	eax, eax
10000624f:	mov	qword ptr [rbp - 0x38], rax
100006253:	lea	r15, [rbp - 0x30]
100006257:	test	byte ptr [r13 + 0x24], 0x8
10000625c:	je	0x100006272
10000625e:	mov	rdi, qword ptr [r13 + 0xf8]
100006265:	call	0x100009ed4 ## symbol stub for: _archive_match_path_unmatched_inclusions
10000626a:	test	eax, eax
10000626c:	je	0x10000662d
100006272:	mov	rdi, r14
100006275:	mov	rsi, r15
100006278:	call	0x100009f70 ## symbol stub for: _archive_read_next_header
10000627d:	mov	ebx, eax
10000627f:	mov	rax, qword ptr [rbp - 0x30]
100006283:	mov	qword ptr [rbp - 0x50], rax
100006287:	cmp	ebx, 0x1
10000628a:	je	0x10000662d
100006290:	test	ebx, ebx
100006292:	jns	0x1000062bf
100006294:	mov	rdi, r14
100006297:	call	0x100009e6e ## symbol stub for: _archive_error_string
10000629c:	xor	edi, edi
10000629e:	lea	rsi, [rip + 0x55cd] ## literal pool for: "%s"
1000062a5:	mov	rdx, rax
1000062a8:	xor	eax, eax
1000062aa:	call	0x10000989e
1000062af:	cmp	ebx, -0x14
1000062b2:	jg	0x1000062bf
1000062b4:	mov	dword ptr [r13 + 0xb4], 0x1
1000062bf:	cmp	ebx, -0xa
1000062c2:	je	0x1000063b5
1000062c8:	cmp	ebx, -0x1e
1000062cb:	je	0x10000662d
1000062d1:	mov	rdi, qword ptr [rbp - 0x30]
1000062d5:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
1000062da:	test	rax, rax
1000062dd:	je	0x1000063ca
1000062e3:	cmp	byte ptr [rax], 0x0
1000062e6:	je	0x1000063ca
1000062ec:	mov	esi, dword ptr [r13 + 0x40]
1000062f0:	test	esi, esi
1000062f2:	js	0x100006308
1000062f4:	mov	rdi, qword ptr [rbp - 0x30]
1000062f8:	call	0x100009e38 ## symbol stub for: _archive_entry_set_uid
1000062fd:	mov	rdi, qword ptr [rbp - 0x30]
100006301:	xor	esi, esi
100006303:	call	0x100009e3e ## symbol stub for: _archive_entry_set_uname
100006308:	mov	esi, dword ptr [r13 + 0x34]
10000630c:	test	esi, esi
10000630e:	js	0x100006324
100006310:	mov	rdi, qword ptr [rbp - 0x30]
100006314:	call	0x100009e26 ## symbol stub for: _archive_entry_set_gid
100006319:	mov	rdi, qword ptr [rbp - 0x30]
10000631d:	xor	esi, esi
10000631f:	call	0x100009e2c ## symbol stub for: _archive_entry_set_gname
100006324:	mov	rsi, qword ptr [r13 + 0x48]
100006328:	test	rsi, rsi
10000632b:	je	0x100006336
10000632d:	mov	rdi, qword ptr [rbp - 0x30]
100006331:	call	0x100009e3e ## symbol stub for: _archive_entry_set_uname
100006336:	mov	rsi, qword ptr [r13 + 0x38]
10000633a:	test	rsi, rsi
10000633d:	je	0x100006348
10000633f:	mov	rdi, qword ptr [rbp - 0x30]
100006343:	call	0x100009e2c ## symbol stub for: _archive_entry_set_gname
100006348:	mov	rdi, qword ptr [r13 + 0xf8]
10000634f:	mov	rsi, qword ptr [rbp - 0x30]
100006353:	call	0x100009eaa ## symbol stub for: _archive_match_excluded
100006358:	test	eax, eax
10000635a:	jne	0x100006257
100006360:	cmp	r12b, 0x74
100006364:	jne	0x1000063ea
10000636a:	mov	ebx, r12d
10000636d:	test	byte ptr [r13 + 0x25], 0x8
100006372:	mov	rax, qword ptr [rip + 0x5c97] ## literal pool symbol address: ___stderrp
100006379:	jne	0x100006382
10000637b:	mov	rax, qword ptr [rip + 0x5c9e] ## literal pool symbol address: ___stdoutp
100006382:	mov	r12, qword ptr [rax]
100006385:	cmp	dword ptr [r13 + 0x20], 0x1
10000638a:	mov	rdx, qword ptr [rbp - 0x30]
10000638e:	jg	0x100006460
100006394:	mov	rdi, rdx
100006397:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
10000639c:	mov	rdi, r12
10000639f:	lea	rsi, [rip + 0x54cc] ## literal pool for: "%s"
1000063a6:	mov	rdx, rax
1000063a9:	xor	eax, eax
1000063ab:	call	0x1000070ec
1000063b0:	jmp	0x10000646b
1000063b5:	xor	edi, edi
1000063b7:	lea	rsi, [rip + 0x5502] ## literal pool for: "Retrying..."
1000063be:	xor	eax, eax
1000063c0:	call	0x10000989e
1000063c5:	jmp	0x100006257
1000063ca:	xor	edi, edi
1000063cc:	lea	rsi, [rip + 0x54f9] ## literal pool for: "Archive entry has empty or unreadable filename ... skipping."
1000063d3:	xor	eax, eax
1000063d5:	call	0x10000989e
1000063da:	mov	dword ptr [r13 + 0xb4], 0x1
1000063e5:	jmp	0x100006257
1000063ea:	mov	rsi, qword ptr [rbp - 0x30]
1000063ee:	mov	rdi, r13
1000063f1:	call	0x100007829
1000063f6:	test	eax, eax
1000063f8:	jne	0x100006257
1000063fe:	test	byte ptr [r13 + 0x24], 0x20
100006403:	je	0x100006427
100006405:	mov	rdi, qword ptr [rbp - 0x30]
100006409:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
10000640e:	lea	rdi, [rip + 0x54f4] ## literal pool for: "extract '%s'"
100006415:	mov	rsi, rax
100006418:	xor	eax, eax
10000641a:	call	0x100007568
10000641f:	test	eax, eax
100006421:	je	0x100006257
100006427:	mov	eax, dword ptr [r13 + 0x20]
10000642b:	cmp	eax, 0x2
10000642e:	jl	0x1000064cc
100006434:	mov	rbx, qword ptr [rip + 0x5bd5] ## literal pool symbol address: ___stderrp
10000643b:	mov	rdi, qword ptr [rbx]
10000643e:	lea	rsi, [rip + 0x54d1] ## literal pool for: "x "
100006445:	xor	eax, eax
100006447:	call	0x1000070ec
10000644c:	mov	rsi, qword ptr [rbx]
10000644f:	mov	rdx, qword ptr [rbp - 0x30]
100006453:	mov	rdi, r13
100006456:	call	0x100007ca6
10000645b:	jmp	0x100006506
100006460:	mov	rdi, r13
100006463:	mov	rsi, r12
100006466:	call	0x100007ca6
10000646b:	mov	rdi, r12
10000646e:	call	0x10000a06c ## symbol stub for: _fflush
100006473:	mov	rdi, r14
100006476:	call	0x100009efe ## symbol stub for: _archive_read_data_skip
10000647b:	cmp	eax, -0x14
10000647e:	je	0x10000648f
100006480:	cmp	eax, -0xa
100006483:	je	0x10000648f
100006485:	cmp	eax, -0x1e
100006488:	jne	0x1000064b7
10000648a:	jmp	0x1000065fa
10000648f:	mov	edi, 0xa
100006494:	mov	rsi, r12
100006497:	call	0x10000a07e ## symbol stub for: _fputc
10000649c:	mov	rdi, r14
10000649f:	call	0x100009e6e ## symbol stub for: _archive_error_string
1000064a4:	xor	edi, edi
1000064a6:	lea	rsi, [rip + 0x53c5] ## literal pool for: "%s"
1000064ad:	mov	rdx, rax
1000064b0:	xor	eax, eax
1000064b2:	call	0x10000989e
1000064b7:	mov	edi, 0xa
1000064bc:	mov	rsi, r12
1000064bf:	call	0x10000a07e ## symbol stub for: _fputc
1000064c4:	mov	r12d, ebx
1000064c7:	jmp	0x100006257
1000064cc:	cmp	eax, 0x1
1000064cf:	mov	rbx, qword ptr [rip + 0x5b3a] ## literal pool symbol address: ___stderrp
1000064d6:	jne	0x10000650e
1000064d8:	mov	rax, qword ptr [rip + 0x5b31] ## literal pool symbol address: ___stderrp
1000064df:	mov	rbx, qword ptr [rax]
1000064e2:	mov	rdi, qword ptr [rbp - 0x30]
1000064e6:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
1000064eb:	mov	rdi, rbx
1000064ee:	mov	rbx, qword ptr [rip + 0x5b1b] ## literal pool symbol address: ___stderrp
1000064f5:	lea	rsi, [rip + 0x541d] ## literal pool for: "x %s"
1000064fc:	mov	rdx, rax
1000064ff:	xor	eax, eax
100006501:	call	0x1000070ec
100006506:	mov	rdi, qword ptr [rbx]
100006509:	call	0x10000a06c ## symbol stub for: _fflush
10000650e:	test	byte ptr [r13 + 0x25], 0x8
100006513:	jne	0x100006527
100006515:	mov	rsi, qword ptr [rbp - 0x30]
100006519:	mov	rdi, r14
10000651c:	mov	rdx, qword ptr [rbp - 0x48]
100006520:	call	0x100009f52 ## symbol stub for: _archive_read_extract2
100006525:	jmp	0x100006534
100006527:	mov	rdi, r14
10000652a:	mov	esi, 0x1
10000652f:	call	0x100009ef8 ## symbol stub for: _archive_read_data_into_fd
100006534:	mov	dword ptr [rbp - 0x3c], eax
100006537:	test	eax, eax
100006539:	je	0x1000065b7
10000653b:	cmp	dword ptr [r13 + 0x20], 0x0
100006540:	jne	0x100006569
100006542:	mov	rax, qword ptr [rip + 0x5ac7] ## literal pool symbol address: ___stderrp
100006549:	mov	rbx, qword ptr [rax]
10000654c:	mov	rdi, qword ptr [rbp - 0x30]
100006550:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
100006555:	mov	rdi, rbx
100006558:	lea	rsi, [rip + 0x5313] ## literal pool for: "%s"
10000655f:	mov	rdx, rax
100006562:	xor	eax, eax
100006564:	call	0x1000070ec
100006569:	mov	rax, qword ptr [rip + 0x5aa0] ## literal pool symbol address: ___stderrp
100006570:	mov	rbx, qword ptr [rax]
100006573:	mov	rdi, r14
100006576:	call	0x100009e6e ## symbol stub for: _archive_error_string
10000657b:	mov	rdi, rbx
10000657e:	mov	rbx, qword ptr [rip + 0x5a8b] ## literal pool symbol address: ___stderrp
100006585:	lea	rsi, [rip + 0x5392] ## literal pool for: ": %s"
10000658c:	mov	rdx, rax
10000658f:	xor	eax, eax
100006591:	call	0x1000070ec
100006596:	cmp	dword ptr [r13 + 0x20], 0x0
10000659b:	jne	0x1000065aa
10000659d:	mov	rsi, qword ptr [rbx]
1000065a0:	mov	edi, 0xa
1000065a5:	call	0x10000a07e ## symbol stub for: _fputc
1000065aa:	mov	dword ptr [r13 + 0xb4], 0x1
1000065b5:	jmp	0x1000065cc
1000065b7:	mov	rdi, qword ptr [rbp - 0x30]
1000065bb:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
1000065c0:	mov	rsi, qword ptr [rbp - 0x38]
1000065c4:	mov	rdx, rax
1000065c7:	call	0x10000683e
1000065cc:	mov	eax, dword ptr [rbp - 0x3c]
1000065cf:	cmp	dword ptr [r13 + 0x20], 0x0
1000065d4:	je	0x1000065e6
1000065d6:	mov	rsi, qword ptr [rbx]
1000065d9:	mov	edi, 0xa
1000065de:	call	0x10000a07e ## symbol stub for: _fputc
1000065e3:	mov	eax, dword ptr [rbp - 0x3c]
1000065e6:	cmp	eax, -0x1e
1000065e9:	jne	0x100006257
1000065ef:	jmp	0x10000662d
1000065f1:	mov	qword ptr [rbp - 0x38], rbx
1000065f5:	jmp	0x100006253
1000065fa:	mov	edi, 0xa
1000065ff:	mov	rsi, r12
100006602:	call	0x10000a07e ## symbol stub for: _fputc
100006607:	mov	rdi, r14
10000660a:	call	0x100009e6e ## symbol stub for: _archive_error_string
10000660f:	lea	rsi, [rip + 0x525c] ## literal pool for: "%s"
100006616:	xor	edi, edi
100006618:	mov	rdx, rax
10000661b:	xor	eax, eax
10000661d:	call	0x10000989e
100006622:	mov	dword ptr [r13 + 0xb4], 0x1
10000662d:	mov	rdi, r14
100006630:	call	0x100009eec ## symbol stub for: _archive_read_close
100006635:	test	eax, eax
100006637:	je	0x100006666
100006639:	mov	ebx, eax
10000663b:	mov	rdi, r14
10000663e:	call	0x100009e6e ## symbol stub for: _archive_error_string
100006643:	lea	rsi, [rip + 0x5228] ## literal pool for: "%s"
10000664a:	xor	edi, edi
10000664c:	mov	rdx, rax
10000664f:	xor	eax, eax
100006651:	call	0x10000989e
100006656:	cmp	ebx, -0x14
100006659:	jg	0x100006666
10000665b:	mov	dword ptr [r13 + 0xb4], 0x1
100006666:	cmp	dword ptr [r13 + 0x20], 0x3
10000666b:	jl	0x1000066a3
10000666d:	mov	rax, qword ptr [rip + 0x59ac] ## literal pool symbol address: ___stdoutp
100006674:	mov	r15, qword ptr [rax]
100006677:	mov	rdi, r14
10000667a:	call	0x100009e92 ## symbol stub for: _archive_format_name
10000667f:	mov	rbx, rax
100006682:	mov	rdi, r14
100006685:	xor	esi, esi
100006687:	call	0x100009e86 ## symbol stub for: _archive_filter_name
10000668c:	lea	rsi, [rip + 0x5290] ## literal pool for: "Archive Format: %s,  Compression: %s\n"
100006693:	mov	rdi, r15
100006696:	mov	rdx, rbx
100006699:	mov	rcx, rax
10000669c:	xor	eax, eax
10000669e:	call	0x10000a078 ## symbol stub for: _fprintf
1000066a3:	mov	rdi, r14
1000066a6:	call	0x100009f5e ## symbol stub for: _archive_read_free
1000066ab:	mov	rdi, qword ptr [rbp - 0x38]
1000066af:	test	rdi, rdi
1000066b2:	je	0x1000066b9
1000066b4:	call	0x100009da8 ## symbol stub for: __qtn_file_free
1000066b9:	add	rsp, 0x38
1000066bd:	pop	rbx
1000066be:	pop	r12
1000066c0:	pop	r13
1000066c2:	pop	r14
1000066c4:	pop	r15
1000066c6:	pop	rbp
1000066c7:	ret
1000066c8:	mov	rdi, qword ptr [r13 + 0xf8]
1000066cf:	call	0x100009e6e ## symbol stub for: _archive_error_string
1000066d4:	lea	rdx, [rip + 0x514a] ## literal pool for: "Error inclusion pattern: %s"
1000066db:	mov	edi, 0x1
1000066e0:	xor	esi, esi
1000066e2:	mov	rcx, rax
1000066e5:	xor	eax, eax
1000066e7:	call	0x1000099b3
1000066ec:	mov	rdi, r14
1000066ef:	call	0x100009e6e ## symbol stub for: _archive_error_string
1000066f4:	lea	rdx, [rip + 0x5177] ## literal pool for: "%s"
1000066fb:	jmp	0x1000066db
1000066fd:	mov	rdi, r14
100006700:	call	0x100009e6e ## symbol stub for: _archive_error_string
100006705:	lea	rdx, [rip + 0x5184] ## literal pool for: "Error opening archive: %s"
10000670c:	jmp	0x1000066db
10000670e:	call	0x100009d72 ## symbol stub for: ___error
100006713:	mov	esi, dword ptr [rax]
100006715:	lea	rdx, [rip + 0x4371] ## literal pool for: "Out of memory"
10000671c:	jmp	0x10000672c
10000671e:	call	0x100009d72 ## symbol stub for: ___error
100006723:	mov	esi, dword ptr [rax]
100006725:	lea	rdx, [rip + 0x5180] ## literal pool for: "Can't chroot to \".\""
10000672c:	mov	edi, 0x1
100006731:	xor	eax, eax
100006733:	call	0x1000099b3
100006738:	push	rbp
100006739:	mov	rbp, rsp
10000673c:	push	r15
10000673e:	push	r14
100006740:	push	r12
100006742:	push	rbx
100006743:	sub	rsp, 0x10
100006747:	test	rdi, rdi
10000674a:	je	0x100006794
10000674c:	mov	rbx, rdi
10000674f:	lea	r14, [rbp - 0x28]
100006753:	lea	r15, [rip + 0x5243] ## literal pool for: "%s: %s"
10000675a:	lea	r12, [rip + 0x506d] ## literal pool for: "Not found in archive"
100006761:	mov	rdi, rbx
100006764:	mov	rsi, r14
100006767:	call	0x100009eda ## symbol stub for: _archive_match_path_unmatched_inclusions_next
10000676c:	test	eax, eax
10000676e:	jne	0x100006785
100006770:	mov	rdx, qword ptr [rbp - 0x28]
100006774:	xor	edi, edi
100006776:	mov	rsi, r15
100006779:	mov	rcx, r12
10000677c:	xor	eax, eax
10000677e:	call	0x10000989e
100006783:	jmp	0x100006761
100006785:	cmp	eax, -0x1e
100006788:	je	0x1000067a3
10000678a:	mov	rdi, rbx
10000678d:	call	0x100009ed4 ## symbol stub for: _archive_match_path_unmatched_inclusions
100006792:	jmp	0x100006796
100006794:	xor	eax, eax
100006796:	add	rsp, 0x10
10000679a:	pop	rbx
10000679b:	pop	r12
10000679d:	pop	r14
10000679f:	pop	r15
1000067a1:	pop	rbp
1000067a2:	ret
1000067a3:	call	0x100009d72 ## symbol stub for: ___error
1000067a8:	mov	esi, dword ptr [rax]
1000067aa:	lea	rdx, [rip + 0x42dc] ## literal pool for: "Out of memory"
1000067b1:	mov	edi, 0x1
1000067b6:	xor	eax, eax
1000067b8:	call	0x1000099b3
1000067bd:	push	rbp
1000067be:	mov	rbp, rsp
1000067c1:	push	r14
1000067c3:	push	rbx
1000067c4:	mov	r14, rdi
1000067c7:	call	0x100009fd6 ## symbol stub for: _archive_write_disk_new
1000067cc:	test	rax, rax
1000067cf:	je	0x100006826
1000067d1:	mov	rbx, rax
1000067d4:	test	byte ptr [r14 + 0x25], 0x2
1000067d9:	jne	0x1000067e3
1000067db:	mov	rdi, rbx
1000067de:	call	0x100009fe2 ## symbol stub for: _archive_write_disk_set_standard_lookup
1000067e3:	mov	esi, dword ptr [r14 + 0x28]
1000067e7:	mov	rdi, rbx
1000067ea:	call	0x100009fdc ## symbol stub for: _archive_write_disk_set_options
1000067ef:	mov	rdi, r14
1000067f2:	mov	esi, 0x78
1000067f7:	mov	rdx, rbx
1000067fa:	call	0x10000602a
1000067ff:	mov	rdi, qword ptr [r14 + 0xf8]
100006806:	call	0x100006738
10000680b:	test	eax, eax
10000680d:	je	0x10000681a
10000680f:	mov	dword ptr [r14 + 0xb4], 0x1
10000681a:	mov	rdi, rbx
10000681d:	pop	rbx
10000681e:	pop	r14
100006820:	pop	rbp
100006821:	jmp	0x100009fe8 ## symbol stub for: _archive_write_free
100006826:	lea	rdx, [rip + 0x4fb6] ## literal pool for: "Cannot allocate disk writer object"
10000682d:	mov	edi, 0x1
100006832:	mov	esi, 0xc
100006837:	xor	eax, eax
100006839:	call	0x1000099b3
10000683e:	push	rbp
10000683f:	mov	rbp, rsp
100006842:	push	r14
100006844:	push	rbx
100006845:	sub	rsp, 0x90
10000684c:	test	rsi, rsi
10000684f:	je	0x1000068cb
100006851:	mov	r14, rdx
100006854:	mov	rbx, rsi
100006857:	lea	rsi, [rbp - 0xa0]
10000685e:	mov	rdi, rdx
100006861:	call	0x10000a126 ## symbol stub for: _stat$INODE64
100006866:	test	eax, eax
100006868:	je	0x100006879
10000686a:	mov	rdi, rbx
10000686d:	mov	rsi, r14
100006870:	call	0x100009da2 ## symbol stub for: __qtn_file_apply_to_path
100006875:	mov	ebx, eax
100006877:	jmp	0x1000068aa
100006879:	movzx	esi, word ptr [rbp - 0x9c]
100006880:	or	esi, 0x80
100006886:	mov	rdi, r14
100006889:	call	0x10000a042 ## symbol stub for: _chmod
10000688e:	mov	rdi, rbx
100006891:	mov	rsi, r14
100006894:	call	0x100009da2 ## symbol stub for: __qtn_file_apply_to_path
100006899:	mov	ebx, eax
10000689b:	movzx	esi, word ptr [rbp - 0x9c]
1000068a2:	mov	rdi, r14
1000068a5:	call	0x10000a042 ## symbol stub for: _chmod
1000068aa:	test	ebx, ebx
1000068ac:	je	0x1000068cb
1000068ae:	mov	edi, ebx
1000068b0:	call	0x100009d96 ## symbol stub for: __qtn_error
1000068b5:	lea	rsi, [rip + 0x4f4a] ## literal pool for: "qtn_file_apply_to_path(%s): %s"
1000068bc:	xor	edi, edi
1000068be:	mov	rdx, r14
1000068c1:	mov	rcx, rax
1000068c4:	xor	eax, eax
1000068c6:	call	0x10000989e
1000068cb:	add	rsp, 0x90
1000068d2:	pop	rbx
1000068d3:	pop	r14
1000068d5:	pop	rbp
1000068d6:	ret
1000068d7:	push	rbp
1000068d8:	mov	rbp, rsp
1000068db:	push	r15
1000068dd:	push	r14
1000068df:	push	r13
1000068e1:	push	r12
1000068e3:	push	rbx
1000068e4:	push	rax
1000068e5:	mov	rbx, qword ptr [rdi]
1000068e8:	mov	r12, qword ptr [rdi + 0x8]
1000068ec:	mov	r15, qword ptr [rdi + 0x10]
1000068f0:	call	0x10000450c
1000068f5:	test	eax, eax
1000068f7:	je	0x100006a12
1000068fd:	cmp	dword ptr [rbx + 0x20], 0x0
100006901:	je	0x100006917
100006903:	mov	rax, qword ptr [rip + 0x5706] ## literal pool symbol address: ___stderrp
10000690a:	mov	rsi, qword ptr [rax]
10000690d:	mov	edi, 0xa
100006912:	call	0x10000a07e ## symbol stub for: _fputc
100006917:	test	r12, r12
10000691a:	je	0x1000069b2
100006920:	mov	qword ptr [rbp - 0x30], r15
100006924:	mov	rdi, r12
100006927:	mov	esi, 0xffffffff
10000692c:	call	0x100009e7a ## symbol stub for: _archive_filter_bytes
100006931:	mov	r13, rax
100006934:	xor	ebx, ebx
100006936:	mov	rdi, r12
100006939:	xor	esi, esi
10000693b:	call	0x100009e7a ## symbol stub for: _archive_filter_bytes
100006940:	mov	r15, rax
100006943:	sub	rax, r13
100006946:	jb	0x100006954
100006948:	imul	rax, rax, 0x64
10000694c:	xor	edx, edx
10000694e:	div	r15
100006951:	mov	rbx, rax
100006954:	mov	rax, qword ptr [rip + 0x56b5] ## literal pool symbol address: ___stderrp
10000695b:	mov	r14, qword ptr [rax]
10000695e:	mov	rdi, r13
100006961:	call	0x100007bbf
100006966:	lea	rsi, [rip + 0x4fdc] ## literal pool for: "In: %s bytes, compression %d%%;"
10000696d:	mov	rdi, r14
100006970:	mov	rdx, rax
100006973:	mov	ecx, ebx
100006975:	xor	eax, eax
100006977:	call	0x10000a078 ## symbol stub for: _fprintf
10000697c:	mov	rax, qword ptr [rip + 0x568d] ## literal pool symbol address: ___stderrp
100006983:	mov	r14, qword ptr [rax]
100006986:	mov	rdi, r12
100006989:	call	0x100009e74 ## symbol stub for: _archive_file_count
10000698e:	mov	ebx, eax
100006990:	mov	rdi, r15
100006993:	call	0x100007bbf
100006998:	lea	rsi, [rip + 0x4fca] ## literal pool for: "  Out: %d files, %s bytes\n"
10000699f:	mov	rdi, r14
1000069a2:	mov	edx, ebx
1000069a4:	mov	rcx, rax
1000069a7:	xor	eax, eax
1000069a9:	call	0x10000a078 ## symbol stub for: _fprintf
1000069ae:	mov	r15, qword ptr [rbp - 0x30]
1000069b2:	test	r15, r15
1000069b5:	je	0x100006a12
1000069b7:	mov	r14, qword ptr [rip + 0x5652] ## literal pool symbol address: ___stderrp
1000069be:	mov	rbx, qword ptr [r14]
1000069c1:	mov	rdi, r15
1000069c4:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
1000069c9:	lea	rsi, [rip + 0x4fb4] ## literal pool for: "Current: %s"
1000069d0:	mov	rdi, rbx
1000069d3:	mov	rdx, rax
1000069d6:	xor	eax, eax
1000069d8:	call	0x1000070ec
1000069dd:	mov	rbx, qword ptr [r14]
1000069e0:	mov	rdi, r15
1000069e3:	call	0x100009e44 ## symbol stub for: _archive_entry_size
1000069e8:	mov	rdi, rax
1000069eb:	call	0x100007bbf
1000069f0:	lea	rsi, [rip + 0x4f99] ## literal pool for: " (%s bytes)\n"
1000069f7:	mov	rdi, rbx
1000069fa:	mov	rdx, rax
1000069fd:	xor	eax, eax
1000069ff:	add	rsp, 0x8
100006a03:	pop	rbx
100006a04:	pop	r12
100006a06:	pop	r13
100006a08:	pop	r14
100006a0a:	pop	r15
100006a0c:	pop	rbp
100006a0d:	jmp	0x10000a078 ## symbol stub for: _fprintf
100006a12:	add	rsp, 0x8
100006a16:	pop	rbx
100006a17:	pop	r12
100006a19:	pop	r13
100006a1b:	pop	r14
100006a1d:	pop	r15
100006a1f:	pop	rbp
100006a20:	ret
100006a21:	push	rbp
100006a22:	mov	rbp, rsp
100006a25:	push	r15
100006a27:	push	r14
100006a29:	push	r13
100006a2b:	push	r12
100006a2d:	push	rbx
100006a2e:	sub	rsp, 0x68
100006a32:	mov	r15, rsi
100006a35:	mov	rax, qword ptr [rip + 0x55cc] ## literal pool symbol address: ___stack_chk_guard
100006a3c:	mov	rax, qword ptr [rax]
100006a3f:	mov	qword ptr [rbp - 0x30], rax
100006a43:	mov	rbx, qword ptr [rdi + 0x118]
100006a4a:	test	rbx, rbx
100006a4d:	jne	0x100006a75
100006a4f:	mov	r14, rdi
100006a52:	mov	edi, 0x10
100006a57:	call	0x10000a0ba ## symbol stub for: _malloc
100006a5c:	mov	qword ptr [r14 + 0x118], rax
100006a63:	test	rax, rax
100006a66:	je	0x100006c25
100006a6c:	mov	rbx, rax
100006a6f:	xorps	xmm0, xmm0
100006a72:	movups	xmmword ptr [rax], xmm0
100006a75:	mov	edi, 0x38
100006a7a:	call	0x10000a0ba ## symbol stub for: _malloc
100006a7f:	test	rax, rax
100006a82:	je	0x100006c25
100006a88:	mov	r14, rax
100006a8b:	xor	eax, eax
100006a8d:	mov	qword ptr [r14], rax
100006a90:	mov	qword ptr [r14 + 0x28], rax
100006a94:	mov	rax, qword ptr [rbx + 0x8]
100006a98:	test	rax, rax
100006a9b:	cmove	rax, rbx
100006a9f:	mov	qword ptr [rax], r14
100006aa2:	mov	qword ptr [rbx + 0x8], r14
100006aa6:	movsx	esi, byte ptr [r15]
100006aaa:	test	esi, esi
100006aac:	je	0x100006c58
100006ab2:	lea	r12, [r15 + 0x1]
100006ab6:	mov	rdi, r12
100006ab9:	call	0x10000a132 ## symbol stub for: _strchr
100006abe:	test	rax, rax
100006ac1:	je	0x100006c3a
100006ac7:	mov	r13, rax
100006aca:	mov	rax, r15
100006acd:	mov	r15, r13
100006ad0:	mov	qword ptr [rbp - 0x88], rax
100006ad7:	sub	r15, rax
100006ada:	mov	rdi, r15
100006add:	call	0x10000a0ba ## symbol stub for: _malloc
100006ae2:	test	rax, rax
100006ae5:	je	0x100006c25
100006aeb:	mov	rbx, rax
100006aee:	lea	rdx, [r15 - 0x1]
100006af2:	mov	rdi, rax
100006af5:	mov	rsi, r12
100006af8:	call	0x10000a0cc ## symbol stub for: _memcpy
100006afd:	mov	byte ptr [rbx + r15 - 0x1], 0x0
100006b03:	mov	r15, r14
100006b06:	add	r15, 0x8
100006b0a:	mov	rdi, r15
100006b0d:	mov	rsi, rbx
100006b10:	xor	edx, edx
100006b12:	call	0x10000a102 ## symbol stub for: _regcomp
100006b17:	test	eax, eax
100006b19:	jne	0x100006c6d
100006b1f:	mov	rdi, rbx
100006b22:	call	0x10000a090 ## symbol stub for: _free
100006b27:	inc	r13
100006b2a:	mov	rax, qword ptr [rbp - 0x88]
100006b31:	movsx	esi, byte ptr [rax]
100006b34:	mov	rdi, r13
100006b37:	call	0x10000a132 ## symbol stub for: _strchr
100006b3c:	test	rax, rax
100006b3f:	je	0x100006c3a
100006b45:	mov	rbx, rax
100006b48:	mov	r12, rax
100006b4b:	sub	r12, r13
100006b4e:	lea	rdi, [r12 + 0x1]
100006b53:	call	0x10000a0ba ## symbol stub for: _malloc
100006b58:	mov	qword ptr [r14 + 0x28], rax
100006b5c:	test	rax, rax
100006b5f:	je	0x100006c25
100006b65:	mov	rdi, rax
100006b68:	mov	rsi, r13
100006b6b:	mov	rdx, r12
100006b6e:	call	0x10000a0cc ## symbol stub for: _memcpy
100006b73:	mov	rax, qword ptr [r14 + 0x28]
100006b77:	mov	byte ptr [rax + r12], 0x0
100006b7c:	mov	al, byte ptr [r14 + 0x30]
100006b80:	and	al, -0x20
100006b82:	or	al, 0x1c
100006b84:	mov	byte ptr [r14 + 0x30], al
100006b88:	mov	cl, byte ptr [rbx + 0x1]
100006b8b:	test	cl, cl
100006b8d:	je	0x100006c06
100006b8f:	add	rbx, 0x2
100006b93:	movsx	ecx, cl
100006b96:	cmp	ecx, 0x66
100006b99:	jg	0x100006bb7
100006b9b:	cmp	ecx, 0x4f
100006b9e:	jle	0x100006bcf
100006ba0:	cmp	ecx, 0x50
100006ba3:	je	0x100006beb
100006ba5:	cmp	ecx, 0x52
100006ba8:	je	0x100006bf3
100006baa:	cmp	ecx, 0x53
100006bad:	jne	0x100006c43
100006bb3:	and	al, -0x9
100006bb5:	jmp	0x100006bf9
100006bb7:	cmp	ecx, 0x6f
100006bba:	jle	0x100006bdd
100006bbc:	cmp	ecx, 0x70
100006bbf:	je	0x100006beb
100006bc1:	cmp	ecx, 0x72
100006bc4:	je	0x100006bf7
100006bc6:	cmp	ecx, 0x73
100006bc9:	jne	0x100006c43
100006bcb:	or	al, 0x8
100006bcd:	jmp	0x100006bf9
100006bcf:	cmp	ecx, 0x47
100006bd2:	je	0x100006bef
100006bd4:	cmp	ecx, 0x48
100006bd7:	jne	0x100006c43
100006bd9:	and	al, -0x11
100006bdb:	jmp	0x100006bf9
100006bdd:	cmp	ecx, 0x67
100006be0:	je	0x100006bef
100006be2:	cmp	ecx, 0x68
100006be5:	jne	0x100006c43
100006be7:	or	al, 0x10
100006be9:	jmp	0x100006bf9
100006beb:	or	al, 0x2
100006bed:	jmp	0x100006bf9
100006bef:	or	al, 0x1
100006bf1:	jmp	0x100006bf9
100006bf3:	and	al, -0x5
100006bf5:	jmp	0x100006bf9
100006bf7:	or	al, 0x4
100006bf9:	mov	byte ptr [r14 + 0x30], al
100006bfd:	mov	cl, byte ptr [rbx]
100006bff:	inc	rbx
100006c02:	test	cl, cl
100006c04:	jne	0x100006b93
100006c06:	mov	rax, qword ptr [rip + 0x53fb] ## literal pool symbol address: ___stack_chk_guard
100006c0d:	mov	rax, qword ptr [rax]
100006c10:	cmp	rax, qword ptr [rbp - 0x30]
100006c14:	jne	0x100006c7b
100006c16:	add	rsp, 0x68
100006c1a:	pop	rbx
100006c1b:	pop	r12
100006c1d:	pop	r13
100006c1f:	pop	r14
100006c21:	pop	r15
100006c23:	pop	rbp
100006c24:	ret
100006c25:	call	0x100009d72 ## symbol stub for: ___error
100006c2a:	mov	esi, dword ptr [rax]
100006c2c:	lea	rdx, [rip + 0x3e5a] ## literal pool for: "Out of memory"
100006c33:	mov	edi, 0x1
100006c38:	jmp	0x100006c66
100006c3a:	lea	rdx, [rip + 0x4d7c] ## literal pool for: "Invalid replacement string"
100006c41:	jmp	0x100006c5f
100006c43:	lea	rdx, [rip + 0x4dad] ## literal pool for: "Invalid replacement flag %c"
100006c4a:	mov	edi, 0x1
100006c4f:	xor	esi, esi
100006c51:	xor	eax, eax
100006c53:	call	0x1000099b3
100006c58:	lea	rdx, [rip + 0x4d45] ## literal pool for: "Empty replacement string"
100006c5f:	mov	edi, 0x1
100006c64:	xor	esi, esi
100006c66:	xor	eax, eax
100006c68:	call	0x1000099b3
100006c6d:	lea	rdi, [rbp - 0x80]
100006c71:	mov	esi, eax
100006c73:	mov	rdx, r15
100006c76:	call	0x100009d3c
100006c7b:	call	0x100009d84 ## symbol stub for: ___stack_chk_fail
100006c80:	push	rbp
100006c81:	mov	rbp, rsp
100006c84:	push	r15
100006c86:	push	r14
100006c88:	push	r13
100006c8a:	push	r12
100006c8c:	push	rbx
100006c8d:	sub	rsp, 0xd8
100006c94:	mov	dword ptr [rbp - 0xdc], r8d
100006c9b:	mov	dword ptr [rbp - 0xe0], ecx
100006ca1:	mov	rax, qword ptr [rip + 0x5360] ## literal pool symbol address: ___stack_chk_guard
100006ca8:	mov	rax, qword ptr [rax]
100006cab:	mov	qword ptr [rbp - 0x30], rax
100006caf:	mov	qword ptr [rdx], 0x0
100006cb6:	mov	rax, qword ptr [rdi + 0x118]
100006cbd:	xor	r15d, r15d
100006cc0:	test	rax, rax
100006cc3:	je	0x100006eed
100006cc9:	mov	r14, qword ptr [rax]
100006ccc:	test	r14, r14
100006ccf:	je	0x100006eed
100006cd5:	mov	r12, rdx
100006cd8:	mov	rbx, rsi
100006cdb:	xor	eax, eax
100006cdd:	mov	qword ptr [rbp - 0xd8], rax
100006ce4:	xor	r15d, r15d
100006ce7:	mov	r13, rsi
100006cea:	mov	qword ptr [rbp - 0xe8], rsi
100006cf1:	mov	al, byte ptr [r14 + 0x30]
100006cf5:	cmp	dword ptr [rbp - 0xe0], 0x0
100006cfc:	je	0x100006d04
100006cfe:	test	al, 0x8
100006d00:	jne	0x100006d17
100006d02:	jmp	0x100006d3d
100006d04:	cmp	dword ptr [rbp - 0xdc], 0x0
100006d0b:	je	0x100006d13
100006d0d:	test	al, 0x10
100006d0f:	jne	0x100006d17
100006d11:	jmp	0x100006d3d
100006d13:	test	al, 0x4
100006d15:	je	0x100006d3d
100006d17:	lea	rdi, [r14 + 0x8]
100006d1b:	mov	edx, 0xa
100006d20:	mov	qword ptr [rbp - 0xf8], rdi
100006d27:	mov	rsi, r13
100006d2a:	lea	rcx, [rbp - 0xd0]
100006d31:	xor	r8d, r8d
100006d34:	call	0x10000a10e ## symbol stub for: _regexec
100006d39:	test	eax, eax
100006d3b:	je	0x100006d4a
100006d3d:	mov	r14, qword ptr [r14]
100006d40:	test	r14, r14
100006d43:	jne	0x100006cf1
100006d45:	jmp	0x100006f12
100006d4a:	mov	rax, qword ptr [rbp - 0xd8]
100006d51:	mov	ecx, dword ptr [r14 + 0x30]
100006d55:	shr	ecx
100006d57:	and	ecx, 0x1
100006d5a:	or	ecx, eax
100006d5c:	mov	qword ptr [rbp - 0xd8], rcx
100006d63:	mov	rdx, qword ptr [rbp - 0xd0]
100006d6a:	mov	rdi, r12
100006d6d:	mov	rsi, r13
100006d70:	call	0x100006f58
100006d75:	xor	ebx, ebx
100006d77:	xor	eax, eax
100006d79:	mov	qword ptr [rbp - 0xf0], r14
100006d80:	mov	rsi, qword ptr [r14 + 0x28]
100006d84:	mov	cl, byte ptr [rsi + rbx]
100006d87:	cmp	cl, 0x5c
100006d8a:	je	0x100006da2
100006d8c:	cmp	cl, 0x7e
100006d8f:	je	0x100006e19
100006d95:	test	cl, cl
100006d97:	jne	0x100006e4b
100006d9d:	jmp	0x100006e79
100006da2:	lea	r15, [rbx + 0x1]
100006da6:	movsx	ecx, byte ptr [rsi + rbx + 0x1]
100006dab:	lea	edx, [rcx - 0x31]
100006dae:	cmp	edx, 0x9
100006db1:	jae	0x100006e59
100006db7:	mov	r14, r13
100006dba:	movsxd	r13, ecx
100006dbd:	add	rsi, rax
100006dc0:	mov	rdx, rbx
100006dc3:	sub	rdx, rax
100006dc6:	mov	rdi, r12
100006dc9:	call	0x100006f58
100006dce:	add	r13, -0x30
100006dd2:	mov	rax, qword ptr [rbp - 0xf0]
100006dd9:	cmp	qword ptr [rax + 0x10], r13
100006ddd:	jb	0x100006ed6
100006de3:	shl	r13, 0x4
100006de7:	mov	rax, qword ptr [rbp + r13 - 0xd0]
100006def:	mov	rdx, qword ptr [rbp + r13 - 0xc8]
100006df7:	mov	r13, r14
100006dfa:	lea	rsi, [r14 + rax]
100006dfe:	sub	rdx, rax
100006e01:	mov	rdi, r12
100006e04:	call	0x100006f58
100006e09:	add	rbx, 0x2
100006e0d:	mov	rax, rbx
100006e10:	mov	r14, qword ptr [rbp - 0xf0]
100006e17:	jmp	0x100006e4e
100006e19:	add	rsi, rax
100006e1c:	mov	rdx, rbx
100006e1f:	sub	rdx, rax
100006e22:	mov	rdi, r12
100006e25:	call	0x100006f58
100006e2a:	mov	rax, qword ptr [rbp - 0xd0]
100006e31:	mov	rdx, qword ptr [rbp - 0xc8]
100006e38:	lea	rsi, [rax + r13]
100006e3c:	sub	rdx, rax
100006e3f:	mov	rdi, r12
100006e42:	call	0x100006f58
100006e47:	lea	rax, [rbx + 0x1]
100006e4b:	mov	r15, rbx
100006e4e:	inc	r15
100006e51:	mov	rbx, r15
100006e54:	jmp	0x100006d80
100006e59:	cmp	ecx, 0x7e
100006e5c:	je	0x100006e63
100006e5e:	cmp	ecx, 0x5c
100006e61:	jne	0x100006e4e
100006e63:	add	rsi, rax
100006e66:	sub	rbx, rax
100006e69:	mov	rdi, r12
100006e6c:	mov	rdx, rbx
100006e6f:	call	0x100006f58
100006e74:	mov	rax, r15
100006e77:	jmp	0x100006e4e
100006e79:	add	rsi, rax
100006e7c:	mov	rdi, r12
100006e7f:	call	0x100007008
100006e84:	mov	r15d, 0x1
100006e8a:	add	r13, qword ptr [rbp - 0xc8]
100006e91:	test	byte ptr [r14 + 0x30], 0x1
100006e96:	je	0x100006eca
100006e98:	mov	edx, 0xa
100006e9d:	mov	rdi, qword ptr [rbp - 0xf8]
100006ea4:	mov	rsi, r13
100006ea7:	lea	rcx, [rbp - 0xd0]
100006eae:	xor	r8d, r8d
100006eb1:	call	0x10000a10e ## symbol stub for: _regexec
100006eb6:	test	eax, eax
100006eb8:	mov	rbx, qword ptr [rbp - 0xe8]
100006ebf:	je	0x100006d4a
100006ec5:	jmp	0x100006d3d
100006eca:	mov	rbx, qword ptr [rbp - 0xe8]
100006ed1:	jmp	0x100006d3d
100006ed6:	mov	rdi, qword ptr [r12]
100006eda:	call	0x10000a090 ## symbol stub for: _free
100006edf:	mov	qword ptr [r12], 0x0
100006ee7:	mov	r15d, 0xffffffff
100006eed:	mov	rax, qword ptr [rip + 0x5114] ## literal pool symbol address: ___stack_chk_guard
100006ef4:	mov	rax, qword ptr [rax]
100006ef7:	cmp	rax, qword ptr [rbp - 0x30]
100006efb:	jne	0x100006f53
100006efd:	mov	eax, r15d
100006f00:	add	rsp, 0xd8
100006f07:	pop	rbx
100006f08:	pop	r12
100006f0a:	pop	r13
100006f0c:	pop	r14
100006f0e:	pop	r15
100006f10:	pop	rbp
100006f11:	ret
100006f12:	test	r15d, r15d
100006f15:	je	0x100006f24
100006f17:	mov	rdi, r12
100006f1a:	mov	rsi, r13
100006f1d:	call	0x100007008
100006f22:	jmp	0x100006f27
100006f24:	xor	r15d, r15d
100006f27:	mov	rax, qword ptr [rbp - 0xd8]
100006f2e:	test	eax, eax
100006f30:	je	0x100006eed
100006f32:	mov	rax, qword ptr [rip + 0x50d7] ## literal pool symbol address: ___stderrp
100006f39:	mov	rdi, qword ptr [rax]
100006f3c:	mov	rcx, qword ptr [r12]
100006f40:	lea	rsi, [rip + 0x4acc] ## literal pool for: "%s >> %s\n"
100006f47:	mov	rdx, rbx
100006f4a:	xor	eax, eax
100006f4c:	call	0x10000a078 ## symbol stub for: _fprintf
100006f51:	jmp	0x100006eed
100006f53:	call	0x100009d84 ## symbol stub for: ___stack_chk_fail
100006f58:	push	rbp
100006f59:	mov	rbp, rsp
100006f5c:	push	r15
100006f5e:	push	r14
100006f60:	push	r13
100006f62:	push	r12
100006f64:	push	rbx
100006f65:	sub	rsp, 0x18
100006f69:	mov	r12, rdx
100006f6c:	mov	r14, rdi
100006f6f:	mov	r13, qword ptr [rdi]
100006f72:	test	r13, r13
100006f75:	mov	qword ptr [rbp - 0x38], rsi
100006f79:	je	0x100006f88
100006f7b:	mov	rdi, r13
100006f7e:	call	0x10000a15c ## symbol stub for: _strlen
100006f83:	mov	rbx, rax
100006f86:	jmp	0x100006f8a
100006f88:	xor	ebx, ebx
100006f8a:	lea	rdi, [rbx + r12]
100006f8e:	inc	rdi
100006f91:	call	0x10000a0ba ## symbol stub for: _malloc
100006f96:	test	rax, rax
100006f99:	je	0x100006fee
100006f9b:	mov	r15, rax
100006f9e:	lea	rax, [rbx + r12]
100006fa2:	mov	qword ptr [rbp - 0x30], rax
100006fa6:	test	r13, r13
100006fa9:	je	0x100006fb9
100006fab:	mov	rdi, r15
100006fae:	mov	rsi, r13
100006fb1:	mov	rdx, rbx
100006fb4:	call	0x10000a0cc ## symbol stub for: _memcpy
100006fb9:	mov	rdi, r15
100006fbc:	add	rdi, rbx
100006fbf:	mov	rsi, qword ptr [rbp - 0x38]
100006fc3:	mov	rdx, r12
100006fc6:	call	0x10000a0cc ## symbol stub for: _memcpy
100006fcb:	mov	rax, qword ptr [rbp - 0x30]
100006fcf:	mov	byte ptr [r15 + rax], 0x0
100006fd4:	mov	rdi, qword ptr [r14]
100006fd7:	call	0x10000a090 ## symbol stub for: _free
100006fdc:	mov	qword ptr [r14], r15
100006fdf:	add	rsp, 0x18
100006fe3:	pop	rbx
100006fe4:	pop	r12
100006fe6:	pop	r13
100006fe8:	pop	r14
100006fea:	pop	r15
100006fec:	pop	rbp
100006fed:	ret
100006fee:	call	0x100009d72 ## symbol stub for: ___error
100006ff3:	mov	esi, dword ptr [rax]
100006ff5:	lea	rdx, [rip + 0x3a91] ## literal pool for: "Out of memory"
100006ffc:	mov	edi, 0x1
100007001:	xor	eax, eax
100007003:	call	0x1000099b3
100007008:	push	rbp
100007009:	mov	rbp, rsp
10000700c:	push	r15
10000700e:	push	r14
100007010:	push	r13
100007012:	push	r12
100007014:	push	rbx
100007015:	push	rax
100007016:	mov	r14, rsi
100007019:	mov	r15, rdi
10000701c:	mov	r13, qword ptr [rdi]
10000701f:	test	r13, r13
100007022:	je	0x100007031
100007024:	mov	rdi, r13
100007027:	call	0x10000a15c ## symbol stub for: _strlen
10000702c:	mov	r12, rax
10000702f:	jmp	0x100007034
100007031:	xor	r12d, r12d
100007034:	mov	rdi, r14
100007037:	call	0x10000a15c ## symbol stub for: _strlen
10000703c:	lea	rdi, [r12 + rax]
100007040:	inc	rdi
100007043:	call	0x10000a0ba ## symbol stub for: _malloc
100007048:	test	rax, rax
10000704b:	je	0x10000708b
10000704d:	mov	rbx, rax
100007050:	test	r13, r13
100007053:	je	0x100007063
100007055:	mov	rdi, rbx
100007058:	mov	rsi, r13
10000705b:	mov	rdx, r12
10000705e:	call	0x10000a0cc ## symbol stub for: _memcpy
100007063:	mov	rdi, rbx
100007066:	add	rdi, r12
100007069:	mov	rsi, r14
10000706c:	call	0x10000a13e ## symbol stub for: _strcpy
100007071:	mov	rdi, qword ptr [r15]
100007074:	call	0x10000a090 ## symbol stub for: _free
100007079:	mov	qword ptr [r15], rbx
10000707c:	add	rsp, 0x8
100007080:	pop	rbx
100007081:	pop	r12
100007083:	pop	r13
100007085:	pop	r14
100007087:	pop	r15
100007089:	pop	rbp
10000708a:	ret
10000708b:	call	0x100009d72 ## symbol stub for: ___error
100007090:	mov	esi, dword ptr [rax]
100007092:	lea	rdx, [rip + 0x39f4] ## literal pool for: "Out of memory"
100007099:	mov	edi, 0x1
10000709e:	xor	eax, eax
1000070a0:	call	0x1000099b3
1000070a5:	push	rbp
1000070a6:	mov	rbp, rsp
1000070a9:	push	r14
1000070ab:	push	rbx
1000070ac:	mov	r14, qword ptr [rdi + 0x118]
1000070b3:	test	r14, r14
1000070b6:	je	0x1000070e5
1000070b8:	mov	rbx, qword ptr [r14]
1000070bb:	test	rbx, rbx
1000070be:	je	0x1000070d9
1000070c0:	mov	rax, qword ptr [rbx]
1000070c3:	mov	qword ptr [r14], rax
1000070c6:	mov	rdi, qword ptr [rbx + 0x28]
1000070ca:	call	0x10000a090 ## symbol stub for: _free
1000070cf:	mov	rdi, rbx
1000070d2:	call	0x10000a090 ## symbol stub for: _free
1000070d7:	jmp	0x1000070b8
1000070d9:	mov	rdi, r14
1000070dc:	pop	rbx
1000070dd:	pop	r14
1000070df:	pop	rbp
1000070e0:	jmp	0x10000a090 ## symbol stub for: _free
1000070e5:	pop	rbx
1000070e6:	pop	r14
1000070e8:	pop	rbp
1000070e9:	ret
1000070ea:	nop
1000070eb:	nop
1000070ec:	push	rbp
1000070ed:	mov	rbp, rsp
1000070f0:	push	r15
1000070f2:	push	r14
1000070f4:	push	r13
1000070f6:	push	r12
1000070f8:	push	rbx
1000070f9:	sub	rsp, 0x2f8
100007100:	mov	r14, rsi
100007103:	mov	qword ptr [rbp - 0x268], rdi
10000710a:	test	al, al
10000710c:	je	0x100007146
10000710e:	movaps	xmmword ptr [rbp - 0x2f0], xmm0
100007115:	movaps	xmmword ptr [rbp - 0x2e0], xmm1
10000711c:	movaps	xmmword ptr [rbp - 0x2d0], xmm2
100007123:	movaps	xmmword ptr [rbp - 0x2c0], xmm3
10000712a:	movaps	xmmword ptr [rbp - 0x2b0], xmm4
100007131:	movaps	xmmword ptr [rbp - 0x2a0], xmm5
100007138:	movaps	xmmword ptr [rbp - 0x290], xmm6
10000713f:	movaps	xmmword ptr [rbp - 0x280], xmm7
100007146:	lea	rsi, [rbp - 0x320]
10000714d:	mov	qword ptr [rsi + 0x10], rdx
100007151:	mov	qword ptr [rsi + 0x18], rcx
100007155:	mov	qword ptr [rsi + 0x20], r8
100007159:	mov	qword ptr [rsi + 0x28], r9
10000715d:	mov	rax, qword ptr [rip + 0x4ea4] ## literal pool symbol address: ___stack_chk_guard
100007164:	mov	rax, qword ptr [rax]
100007167:	mov	qword ptr [rbp - 0x30], rax
10000716b:	lea	rbx, [rbp - 0x130]
100007172:	movabs	rax, 0x3000000010
10000717c:	lea	rcx, [rbp - 0x250]
100007183:	mov	qword ptr [rcx], rax
100007186:	lea	rax, [rbp + 0x10]
10000718a:	mov	qword ptr [rcx + 0x8], rax
10000718e:	mov	qword ptr [rcx + 0x10], rsi
100007192:	mov	esi, 0x100
100007197:	mov	rdi, rbx
10000719a:	mov	rdx, r14
10000719d:	call	0x10000a180 ## symbol stub for: _vsnprintf
1000071a2:	mov	r12d, eax
1000071a5:	cmp	eax, 0x100
1000071aa:	jb	0x100007273
1000071b0:	lea	rbx, [rbp - 0x130]
1000071b7:	cmp	r12d, 0xff
1000071be:	setg	al
1000071c1:	mov	r15d, 0x100
1000071c7:	xor	edi, edi
1000071c9:	test	al, 0x1
1000071cb:	je	0x1000071d5
1000071cd:	inc	r12d
1000071d0:	mov	r15d, r12d
1000071d3:	jmp	0x1000071f9
1000071d5:	cmp	r15d, 0x1fff
1000071dc:	jg	0x1000071e3
1000071de:	add	r15d, r15d
1000071e1:	jmp	0x1000071f9
1000071e3:	cmp	r15d, 0xf423f
1000071ea:	jg	0x100007288
1000071f0:	mov	eax, r15d
1000071f3:	shr	eax, 0x2
1000071f6:	add	r15d, eax
1000071f9:	call	0x10000a090 ## symbol stub for: _free
1000071fe:	movsxd	r13, r15d
100007201:	mov	rdi, r13
100007204:	call	0x10000a0ba ## symbol stub for: _malloc
100007209:	test	rax, rax
10000720c:	je	0x100007277
10000720e:	mov	rbx, rax
100007211:	lea	rax, [rbp - 0x320]
100007218:	mov	qword ptr [rbp - 0x240], rax
10000721f:	lea	rax, [rbp + 0x10]
100007223:	mov	qword ptr [rbp - 0x248], rax
10000722a:	movabs	rax, 0x3000000010
100007234:	mov	qword ptr [rbp - 0x250], rax
10000723b:	mov	rdi, rbx
10000723e:	mov	rsi, r13
100007241:	mov	rdx, r14
100007244:	lea	rcx, [rbp - 0x250]
10000724b:	call	0x10000a180 ## symbol stub for: _vsnprintf
100007250:	mov	r12d, eax
100007253:	cmp	eax, r13d
100007256:	setge	al
100007259:	mov	rdi, rbx
10000725c:	test	r12d, r12d
10000725f:	js	0x1000071c9
100007265:	mov	rdi, rbx
100007268:	cmp	r12d, r15d
10000726b:	jge	0x1000071c9
100007271:	jmp	0x100007293
100007273:	xor	edi, edi
100007275:	jmp	0x100007293
100007277:	mov	r12d, 0xff
10000727d:	xor	edi, edi
10000727f:	lea	rbx, [rbp - 0x130]
100007286:	jmp	0x100007293
100007288:	lea	eax, [r15 - 0x1]
10000728c:	mov	byte ptr [rdi + rax], 0x0
100007290:	mov	r12d, r15d
100007293:	mov	qword ptr [rbp - 0x270], rdi
10000729a:	xor	r14d, r14d
10000729d:	mov	edx, 0x1
1000072a2:	xor	edi, edi
1000072a4:	xor	esi, esi
1000072a6:	call	0x10000a0c0 ## symbol stub for: _mbtowc
1000072ab:	cmp	eax, -0x1
1000072ae:	je	0x100007414
1000072b4:	mov	al, byte ptr [rbx]
1000072b6:	test	al, al
1000072b8:	je	0x1000073f6
1000072be:	xor	r14d, r14d
1000072c1:	mov	r15b, 0x1
1000072c4:	lea	r13, [rbp - 0x230]
1000072cb:	test	r15b, r15b
1000072ce:	je	0x100007313
1000072d0:	mov	dword ptr [rbp - 0x254], r15d
1000072d7:	movsxd	rdx, r12d
1000072da:	lea	rdi, [rbp - 0x258]
1000072e1:	mov	rsi, rbx
1000072e4:	call	0x10000a0c0 ## symbol stub for: _mbtowc
1000072e9:	cmp	eax, -0x1
1000072ec:	je	0x100007311
1000072ee:	mov	r15d, eax
1000072f1:	mov	edi, dword ptr [rbp - 0x258]
1000072f7:	cmp	rdi, 0x7f
1000072fb:	ja	0x100007332
1000072fd:	mov	rax, qword ptr [rip + 0x4cfc] ## literal pool symbol address: __DefaultRuneLocale
100007304:	mov	eax, dword ptr [rax + 4*rdi + 0x3c]
100007308:	mov	ecx, 0x40000
10000730d:	and	eax, ecx
10000730f:	jmp	0x100007342
100007311:	mov	al, byte ptr [rbx]
100007313:	mov	esi, r14d
100007316:	inc	rbx
100007319:	movsx	edx, al
10000731c:	mov	rdi, r13
10000731f:	call	0x100007447
100007324:	add	eax, r14d
100007327:	xor	r15d, r15d
10000732a:	mov	r14d, eax
10000732d:	jmp	0x1000073bd
100007332:	mov	esi, 0x40000
100007337:	call	0x100009d78 ## symbol stub for: ___maskrune
10000733c:	mov	edi, dword ptr [rbp - 0x258]
100007342:	sub	r12d, r15d
100007345:	test	eax, eax
100007347:	je	0x100007377
100007349:	cmp	edi, 0x5c
10000734c:	je	0x100007377
10000734e:	test	r15d, r15d
100007351:	jle	0x1000073e5
100007357:	inc	r15d
10000735a:	mov	al, byte ptr [rbx]
10000735c:	inc	rbx
10000735f:	mov	ecx, r14d
100007362:	inc	r14d
100007365:	mov	byte ptr [rbp + rcx - 0x230], al
10000736c:	dec	r15d
10000736f:	cmp	r15d, 0x1
100007373:	jg	0x10000735a
100007375:	jmp	0x1000073b6
100007377:	test	r15d, r15d
10000737a:	jle	0x1000073e5
10000737c:	mov	dword ptr [rbp - 0x25c], r12d
100007383:	inc	r15d
100007386:	mov	r12, r13
100007389:	mov	r13d, r14d
10000738c:	mov	esi, r14d
10000738f:	movsx	edx, byte ptr [rbx]
100007392:	inc	rbx
100007395:	mov	rdi, r12
100007398:	call	0x100007447
10000739d:	mov	r14, rax
1000073a0:	add	r14d, r13d
1000073a3:	dec	r15d
1000073a6:	cmp	r15d, 0x1
1000073aa:	jg	0x100007389
1000073ac:	mov	r13, r12
1000073af:	mov	r12d, dword ptr [rbp - 0x25c]
1000073b6:	mov	r15d, dword ptr [rbp - 0x254]
1000073bd:	cmp	r14d, 0x81
1000073c4:	jb	0x1000073ec
1000073c6:	mov	eax, r14d
1000073c9:	mov	byte ptr [rbp + rax - 0x230], 0x0
1000073d1:	mov	rdi, r13
1000073d4:	mov	rsi, qword ptr [rbp - 0x268]
1000073db:	call	0x10000a084 ## symbol stub for: _fputs
1000073e0:	xor	r14d, r14d
1000073e3:	jmp	0x1000073ec
1000073e5:	mov	r15d, dword ptr [rbp - 0x254]
1000073ec:	mov	al, byte ptr [rbx]
1000073ee:	test	al, al
1000073f0:	jne	0x1000072cb
1000073f6:	mov	eax, r14d
1000073f9:	mov	byte ptr [rbp + rax - 0x230], 0x0
100007401:	lea	rdi, [rbp - 0x230]
100007408:	mov	rsi, qword ptr [rbp - 0x268]
10000740f:	call	0x10000a084 ## symbol stub for: _fputs
100007414:	mov	rdi, qword ptr [rbp - 0x270]
10000741b:	call	0x10000a090 ## symbol stub for: _free
100007420:	mov	rax, qword ptr [rip + 0x4be1] ## literal pool symbol address: ___stack_chk_guard
100007427:	mov	rax, qword ptr [rax]
10000742a:	cmp	rax, qword ptr [rbp - 0x30]
10000742e:	jne	0x100007442
100007430:	add	rsp, 0x2f8
100007437:	pop	rbx
100007438:	pop	r12
10000743a:	pop	r13
10000743c:	pop	r14
10000743e:	pop	r15
100007440:	pop	rbp
100007441:	ret
100007442:	call	0x100009d84 ## symbol stub for: ___stack_chk_fail
100007447:	push	rbp
100007448:	mov	rbp, rsp
10000744b:	push	r15
10000744d:	push	r14
10000744f:	push	rbx
100007450:	push	rax
100007451:	mov	ebx, edx
100007453:	mov	r15, rsi
100007456:	mov	r14, rdi
100007459:	test	bl, bl
10000745b:	js	0x100007472
10000745d:	movzx	eax, bl
100007460:	mov	rdx, qword ptr [rip + 0x4b99] ## literal pool symbol address: __DefaultRuneLocale
100007467:	mov	ecx, 0x40000
10000746c:	and	ecx, dword ptr [rdx + 4*rax + 0x3c]
100007470:	jmp	0x100007481
100007472:	movzx	edi, bl
100007475:	mov	esi, 0x40000
10000747a:	call	0x100009d78 ## symbol stub for: ___maskrune
10000747f:	mov	ecx, eax
100007481:	lea	rax, [r15 + 0x1]
100007485:	cmp	bl, 0x5c
100007488:	je	0x1000074a0
10000748a:	test	ecx, ecx
10000748c:	je	0x1000074a0
10000748e:	mov	byte ptr [r14 + r15], bl
100007492:	sub	rax, r15
100007495:	add	rsp, 0x8
100007499:	pop	rbx
10000749a:	pop	r14
10000749c:	pop	r15
10000749e:	pop	rbp
10000749f:	ret
1000074a0:	mov	byte ptr [r14 + r15], 0x5c
1000074a5:	movsx	edx, bl
1000074a8:	lea	ecx, [rdx - 0x7]
1000074ab:	cmp	ecx, 0x6
1000074ae:	ja	0x1000074cc
1000074b0:	lea	rax, [rip + 0x95]
1000074b7:	movsxd	rcx, dword ptr [rax + 4*rcx]
1000074bb:	add	rcx, rax
1000074be:	jmp	rcx
1000074c0:	lea	rax, [r15 + 0x2]
1000074c4:	mov	byte ptr [r14 + r15 + 0x1], 0x61
1000074ca:	jmp	0x100007492
1000074cc:	cmp	edx, 0x5c
1000074cf:	jne	0x10000752b
1000074d1:	lea	rax, [r15 + 0x2]
1000074d5:	mov	byte ptr [r14 + r15 + 0x1], 0x5c
1000074db:	jmp	0x100007492
1000074dd:	lea	rax, [r15 + 0x2]
1000074e1:	mov	byte ptr [r14 + r15 + 0x1], 0x62
1000074e7:	jmp	0x100007492
1000074e9:	lea	rax, [r15 + 0x2]
1000074ed:	mov	byte ptr [r14 + r15 + 0x1], 0x74
1000074f3:	jmp	0x100007492
1000074f5:	lea	rax, [r15 + 0x2]
1000074f9:	mov	byte ptr [r14 + r15 + 0x1], 0x6e
1000074ff:	jmp	0x100007492
100007501:	lea	rax, [r15 + 0x2]
100007505:	mov	byte ptr [r14 + r15 + 0x1], 0x76
10000750b:	jmp	0x100007492
10000750d:	lea	rax, [r15 + 0x2]
100007511:	mov	byte ptr [r14 + r15 + 0x1], 0x66
100007517:	jmp	0x100007492
10000751c:	lea	rax, [r15 + 0x2]
100007520:	mov	byte ptr [r14 + r15 + 0x1], 0x72
100007526:	jmp	0x100007492
10000752b:	add	r14, rax
10000752e:	movzx	edx, bl
100007531:	lea	rsi, [rip + 0x45c0] ## literal pool for: "%03o"
100007538:	mov	rdi, r14
10000753b:	xor	eax, eax
10000753d:	call	0x10000a120 ## symbol stub for: _sprintf
100007542:	lea	rax, [r15 + 0x4]
100007546:	jmp	0x100007492
10000754b:	nop
10000754c:	je	0x10000754d
	.byte 0xff #bad opcode
10000754f:	call	qword ptr [rcx - 0x62000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100007557:	jmp	[rcx - 0x4a000001]
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
10000755f:	inc	ecx
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100007563:	call	rax
	.byte 0xff #bad opcode
	.byte 0xff #bad opcode
100007567:	call	qword ptr [rbp + 0x48]
10000756a:	mov	ebp, esp
10000756c:	push	r15
10000756e:	push	r14
100007570:	push	r13
100007572:	push	r12
100007574:	push	rbx
100007575:	sub	rsp, 0xf8
10000757c:	mov	rbx, rdi
10000757f:	test	al, al
100007581:	je	0x1000075b8
100007583:	movaps	xmmword ptr [rbp - 0xf0], xmm0
10000758a:	movaps	xmmword ptr [rbp - 0xe0], xmm1
100007591:	movaps	xmmword ptr [rbp - 0xd0], xmm2
100007598:	movaps	xmmword ptr [rbp - 0xc0], xmm3
10000759f:	movaps	xmmword ptr [rbp - 0xb0], xmm4
1000075a6:	movaps	xmmword ptr [rbp - 0xa0], xmm5
1000075ad:	movaps	xmmword ptr [rbp - 0x90], xmm6
1000075b4:	movaps	xmmword ptr [rbp - 0x80], xmm7
1000075b8:	lea	rax, [rbp - 0x120]
1000075bf:	mov	qword ptr [rax + 0x8], rsi
1000075c3:	mov	qword ptr [rax + 0x10], rdx
1000075c7:	mov	qword ptr [rax + 0x18], rcx
1000075cb:	mov	qword ptr [rax + 0x20], r8
1000075cf:	mov	qword ptr [rax + 0x28], r9
1000075d3:	mov	rcx, qword ptr [rip + 0x4a2e] ## literal pool symbol address: ___stack_chk_guard
1000075da:	mov	rcx, qword ptr [rcx]
1000075dd:	mov	qword ptr [rbp - 0x30], rcx
1000075e1:	lea	rdx, [rbp - 0x70]
1000075e5:	mov	qword ptr [rdx + 0x10], rax
1000075e9:	lea	rax, [rbp + 0x10]
1000075ed:	mov	qword ptr [rdx + 0x8], rax
1000075f1:	movabs	rax, 0x3000000008
1000075fb:	mov	qword ptr [rdx], rax
1000075fe:	mov	r14, qword ptr [rip + 0x4a0b] ## literal pool symbol address: ___stderrp
100007605:	mov	rdi, qword ptr [r14]
100007608:	mov	rsi, rbx
10000760b:	call	0x10000a17a ## symbol stub for: _vfprintf
100007610:	mov	rcx, qword ptr [r14]
100007613:	lea	rdi, [rip + 0x4403] ## literal pool for: " (y/N)? "
10000761a:	mov	esi, 0x8
10000761f:	mov	edx, 0x1
100007624:	call	0x10000a096 ## symbol stub for: _fwrite
100007629:	mov	rdi, qword ptr [r14]
10000762c:	call	0x10000a06c ## symbol stub for: _fflush
100007631:	lea	rsi, [rbp - 0x50]
100007635:	mov	edx, 0x1f
10000763a:	mov	edi, 0x2
10000763f:	call	0x10000a0f0 ## symbol stub for: _read
100007644:	test	rax, rax
100007647:	js	0x1000076f1
10000764d:	xor	r14d, r14d
100007650:	test	rax, rax
100007653:	je	0x1000076cc
100007655:	mov	byte ptr [rbp + rax - 0x50], 0x0
10000765a:	mov	r15b, byte ptr [rbp - 0x50]
10000765e:	test	r15b, r15b
100007661:	je	0x1000076cc
100007663:	lea	rbx, [rbp - 0x4f]
100007667:	mov	r12, qword ptr [rip + 0x4992] ## literal pool symbol address: __DefaultRuneLocale
10000766e:	mov	r13d, 0x4000
100007674:	test	r15b, r15b
100007677:	js	0x100007687
100007679:	movzx	eax, r15b
10000767d:	mov	eax, dword ptr [r12 + 4*rax + 0x3c]
100007682:	and	eax, r13d
100007685:	jmp	0x100007695
100007687:	movzx	edi, r15b
10000768b:	mov	esi, 0x4000
100007690:	call	0x100009d78 ## symbol stub for: ___maskrune
100007695:	test	eax, eax
100007697:	je	0x1000076a6
100007699:	mov	r15b, byte ptr [rbx]
10000769c:	inc	rbx
10000769f:	test	r15b, r15b
1000076a2:	jne	0x100007674
1000076a4:	jmp	0x1000076cc
1000076a6:	movsx	eax, r15b
1000076aa:	mov	r14d, 0x1
1000076b0:	cmp	eax, 0x6d
1000076b3:	jg	0x1000076c1
1000076b5:	cmp	eax, 0x4e
1000076b8:	je	0x1000076c9
1000076ba:	cmp	eax, 0x59
1000076bd:	je	0x1000076cc
1000076bf:	jmp	0x1000076c9
1000076c1:	cmp	eax, 0x79
1000076c4:	je	0x1000076cc
1000076c6:	cmp	eax, 0x6e
1000076c9:	xor	r14d, r14d
1000076cc:	mov	rax, qword ptr [rip + 0x4935] ## literal pool symbol address: ___stack_chk_guard
1000076d3:	mov	rax, qword ptr [rax]
1000076d6:	cmp	rax, qword ptr [rbp - 0x30]
1000076da:	jne	0x100007714
1000076dc:	mov	eax, r14d
1000076df:	add	rsp, 0xf8
1000076e6:	pop	rbx
1000076e7:	pop	r12
1000076e9:	pop	r13
1000076eb:	pop	r14
1000076ed:	pop	r15
1000076ef:	pop	rbp
1000076f0:	ret
1000076f1:	mov	rcx, qword ptr [r14]
1000076f4:	lea	rdi, [rip + 0x432b] ## literal pool for: "Keyboard read failed\n"
1000076fb:	mov	esi, 0x15
100007700:	mov	edx, 0x1
100007705:	call	0x10000a096 ## symbol stub for: _fwrite
10000770a:	mov	edi, 0x1
10000770f:	call	0x10000a054 ## symbol stub for: _exit
100007714:	call	0x100009d84 ## symbol stub for: ___stack_chk_fail
100007719:	push	rbp
10000771a:	mov	rbp, rsp
10000771d:	push	r15
10000771f:	push	r14
100007721:	push	r12
100007723:	push	rbx
100007724:	mov	r14, rsi
100007727:	mov	r15, rdi
10000772a:	cmp	byte ptr [rsi], 0x2f
10000772d:	mov	rbx, qword ptr [rdi + 0x8]
100007731:	jne	0x100007745
100007733:	mov	rdi, rbx
100007736:	call	0x10000a090 ## symbol stub for: _free
10000773b:	mov	qword ptr [r15 + 0x8], 0x0
100007743:	jmp	0x1000077aa
100007745:	test	rbx, rbx
100007748:	je	0x1000077aa
10000774a:	mov	rdi, rbx
10000774d:	call	0x10000a15c ## symbol stub for: _strlen
100007752:	mov	r12, rax
100007755:	mov	rdi, r14
100007758:	call	0x10000a15c ## symbol stub for: _strlen
10000775d:	lea	rdi, [r12 + rax]
100007761:	add	rdi, 0x2
100007765:	call	0x10000a0ba ## symbol stub for: _malloc
10000776a:	mov	qword ptr [r15 + 0x8], rax
10000776e:	cmp	byte ptr [r12 + rbx - 0x1], 0x2f
100007774:	jne	0x100007780
100007776:	mov	byte ptr [rbx + r12 - 0x1], 0x0
10000777c:	mov	rax, qword ptr [r15 + 0x8]
100007780:	test	rax, rax
100007783:	je	0x10000779c
100007785:	lea	rsi, [rip + 0x42b0] ## literal pool for: "%s/%s"
10000778c:	mov	rdi, rax
10000778f:	mov	rdx, rbx
100007792:	mov	rcx, r14
100007795:	xor	eax, eax
100007797:	call	0x10000a120 ## symbol stub for: _sprintf
10000779c:	mov	rdi, rbx
10000779f:	call	0x10000a090 ## symbol stub for: _free
1000077a4:	mov	rax, qword ptr [r15 + 0x8]
1000077a8:	jmp	0x1000077b6
1000077aa:	mov	rdi, r14
1000077ad:	call	0x10000a14a ## symbol stub for: _strdup
1000077b2:	mov	qword ptr [r15 + 0x8], rax
1000077b6:	test	rax, rax
1000077b9:	je	0x1000077c4
1000077bb:	pop	rbx
1000077bc:	pop	r12
1000077be:	pop	r14
1000077c0:	pop	r15
1000077c2:	pop	rbp
1000077c3:	ret
1000077c4:	call	0x100009d72 ## symbol stub for: ___error
1000077c9:	mov	esi, dword ptr [rax]
1000077cb:	lea	rdx, [rip + 0x30ee] ## literal pool for: "No memory"
1000077d2:	mov	edi, 0x1
1000077d7:	xor	eax, eax
1000077d9:	call	0x1000099b3
1000077de:	push	rbp
1000077df:	mov	rbp, rsp
1000077e2:	push	rbx
1000077e3:	push	rax
1000077e4:	mov	rbx, rdi
1000077e7:	mov	rdi, qword ptr [rdi + 0x8]
1000077eb:	test	rdi, rdi
1000077ee:	je	0x10000780d
1000077f0:	call	0x10000a03c ## symbol stub for: _chdir
1000077f5:	mov	rcx, qword ptr [rbx + 0x8]
1000077f9:	test	eax, eax
1000077fb:	jne	0x100007814
1000077fd:	mov	rdi, rcx
100007800:	call	0x10000a090 ## symbol stub for: _free
100007805:	mov	qword ptr [rbx + 0x8], 0x0
10000780d:	add	rsp, 0x8
100007811:	pop	rbx
100007812:	pop	rbp
100007813:	ret
100007814:	lea	rdx, [rip + 0x4227] ## literal pool for: "could not chdir to '%s'\n"
10000781b:	mov	edi, 0x1
100007820:	xor	esi, esi
100007822:	xor	eax, eax
100007824:	call	0x1000099b3
100007829:	push	rbp
10000782a:	mov	rbp, rsp
10000782d:	push	r15
10000782f:	push	r14
100007831:	push	r13
100007833:	push	r12
100007835:	push	rbx
100007836:	sub	rsp, 0x18
10000783a:	mov	r13, rsi
10000783d:	mov	r15, rdi
100007840:	mov	rdi, rsi
100007843:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
100007848:	mov	r14, rax
10000784b:	mov	rdi, r13
10000784e:	call	0x100009de4 ## symbol stub for: _archive_entry_hardlink
100007853:	mov	rbx, rax
100007856:	lea	rdx, [rbp - 0x30]
10000785a:	mov	rdi, r15
10000785d:	mov	rsi, r14
100007860:	xor	ecx, ecx
100007862:	xor	r8d, r8d
100007865:	call	0x100006c80
10000786a:	cmp	eax, 0x1
10000786d:	je	0x10000787a
10000786f:	cmp	eax, -0x1
100007872:	je	0x10000792d
100007878:	jmp	0x1000078a2
10000787a:	mov	rsi, qword ptr [rbp - 0x30]
10000787e:	mov	rdi, r13
100007881:	call	0x100009dc0 ## symbol stub for: _archive_entry_copy_pathname
100007886:	mov	rdi, qword ptr [rbp - 0x30]
10000788a:	mov	r14b, byte ptr [rdi]
10000788d:	call	0x10000a090 ## symbol stub for: _free
100007892:	test	r14b, r14b
100007895:	je	0x1000078cf
100007897:	mov	rdi, r13
10000789a:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
10000789f:	mov	r14, rax
1000078a2:	test	rbx, rbx
1000078a5:	je	0x1000078ca
1000078a7:	lea	rdx, [rbp - 0x30]
1000078ab:	mov	rdi, r15
1000078ae:	mov	rsi, rbx
1000078b1:	xor	ecx, ecx
1000078b3:	mov	r8d, 0x1
1000078b9:	call	0x100006c80
1000078be:	cmp	eax, 0x1
1000078c1:	je	0x1000078d7
1000078c3:	cmp	eax, -0x1
1000078c6:	je	0x10000792d
1000078c8:	jmp	0x1000078ec
1000078ca:	xor	r12d, r12d
1000078cd:	jmp	0x1000078f7
1000078cf:	mov	r14d, 0xffffffff
1000078d5:	jmp	0x100007943
1000078d7:	mov	rsi, qword ptr [rbp - 0x30]
1000078db:	mov	rdi, r13
1000078de:	call	0x100009dba ## symbol stub for: _archive_entry_copy_hardlink
1000078e3:	mov	rdi, qword ptr [rbp - 0x30]
1000078e7:	call	0x10000a090 ## symbol stub for: _free
1000078ec:	mov	rdi, r13
1000078ef:	call	0x100009de4 ## symbol stub for: _archive_entry_hardlink
1000078f4:	mov	r12, rax
1000078f7:	mov	rdi, r13
1000078fa:	call	0x100009e56 ## symbol stub for: _archive_entry_symlink
1000078ff:	test	rax, rax
100007902:	je	0x10000796a
100007904:	mov	rdi, r13
100007907:	call	0x100009e56 ## symbol stub for: _archive_entry_symlink
10000790c:	lea	rdx, [rbp - 0x30]
100007910:	mov	rdi, r15
100007913:	mov	rsi, rax
100007916:	mov	ecx, 0x1
10000791b:	xor	r8d, r8d
10000791e:	call	0x100006c80
100007923:	cmp	eax, 0x1
100007926:	je	0x100007955
100007928:	cmp	eax, -0x1
10000792b:	jne	0x10000796a
10000792d:	lea	rsi, [rip + 0x4127] ## literal pool for: "Invalid substitution, skipping entry"
100007934:	xor	edi, edi
100007936:	xor	eax, eax
100007938:	call	0x10000989e
10000793d:	mov	r14d, 0x1
100007943:	mov	eax, r14d
100007946:	add	rsp, 0x18
10000794a:	pop	rbx
10000794b:	pop	r12
10000794d:	pop	r13
10000794f:	pop	r14
100007951:	pop	r15
100007953:	pop	rbp
100007954:	ret
100007955:	mov	rsi, qword ptr [rbp - 0x30]
100007959:	mov	rdi, r13
10000795c:	call	0x100009dc6 ## symbol stub for: _archive_entry_copy_symlink
100007961:	mov	rdi, qword ptr [rbp - 0x30]
100007965:	call	0x10000a090 ## symbol stub for: _free
10000796a:	mov	eax, dword ptr [r15 + 0x30]
10000796e:	mov	rsi, r14
100007971:	mov	rbx, r12
100007974:	test	eax, eax
100007976:	jle	0x1000079dd
100007978:	mov	ecx, eax
10000797a:	mov	rsi, r14
10000797d:	movsx	edx, byte ptr [rsi]
100007980:	cmp	edx, 0x2f
100007983:	je	0x10000798b
100007985:	test	edx, edx
100007987:	jne	0x10000798d
100007989:	jmp	0x10000793d
10000798b:	dec	ecx
10000798d:	inc	rsi
100007990:	test	ecx, ecx
100007992:	jg	0x10000797d
100007994:	jmp	0x100007999
100007996:	inc	rsi
100007999:	movsx	ecx, byte ptr [rsi]
10000799c:	cmp	ecx, 0x2f
10000799f:	je	0x100007996
1000079a1:	test	ecx, ecx
1000079a3:	je	0x10000793d
1000079a5:	test	r12, r12
1000079a8:	je	0x1000079db
1000079aa:	mov	rbx, r12
1000079ad:	movsx	ecx, byte ptr [rbx]
1000079b0:	cmp	ecx, 0x2f
1000079b3:	je	0x1000079bb
1000079b5:	test	ecx, ecx
1000079b7:	jne	0x1000079bd
1000079b9:	jmp	0x10000793d
1000079bb:	dec	eax
1000079bd:	inc	rbx
1000079c0:	test	eax, eax
1000079c2:	jg	0x1000079ad
1000079c4:	jmp	0x1000079c9
1000079c6:	inc	rbx
1000079c9:	movsx	eax, byte ptr [rbx]
1000079cc:	cmp	eax, 0x2f
1000079cf:	je	0x1000079c6
1000079d1:	test	eax, eax
1000079d3:	je	0x10000793d
1000079d9:	jmp	0x1000079dd
1000079db:	xor	ebx, ebx
1000079dd:	test	byte ptr [r15 + 0x24], 0x2
1000079e2:	mov	qword ptr [rbp - 0x38], r12
1000079e6:	jne	0x100007a1b
1000079e8:	mov	rdi, r15
1000079eb:	call	0x100007a68
1000079f0:	cmp	byte ptr [rax], 0x0
1000079f3:	lea	r12, [rip + 0x3eb0] ## literal pool for: "."
1000079fa:	cmovne	r12, rax
1000079fe:	test	rbx, rbx
100007a01:	je	0x100007a39
100007a03:	mov	rdi, r15
100007a06:	mov	rsi, rbx
100007a09:	call	0x100007a68
100007a0e:	mov	rbx, rax
100007a11:	cmp	byte ptr [rax], 0x0
100007a14:	jne	0x100007a3b
100007a16:	jmp	0x10000793d
100007a1b:	cmp	byte ptr [rsi], 0x2f
100007a1e:	sete	al
100007a21:	mov	r12, rsi
100007a24:	test	al, 0x1
100007a26:	je	0x100007a3b
100007a28:	lea	rsi, [r12 + 0x1]
100007a2d:	mov	al, 0x1
100007a2f:	cmp	byte ptr [r12 + 0x1], 0x2f
100007a35:	je	0x100007a21
100007a37:	jmp	0x100007a3b
100007a39:	xor	ebx, ebx
100007a3b:	cmp	r12, r14
100007a3e:	je	0x100007a4b
100007a40:	mov	rdi, r13
100007a43:	mov	rsi, r12
100007a46:	call	0x100009dc0 ## symbol stub for: _archive_entry_copy_pathname
100007a4b:	xor	r14d, r14d
100007a4e:	cmp	rbx, qword ptr [rbp - 0x38]
100007a52:	je	0x100007943
100007a58:	mov	rdi, r13
100007a5b:	mov	rsi, rbx
100007a5e:	call	0x100009dba ## symbol stub for: _archive_entry_copy_hardlink
100007a63:	jmp	0x100007943
100007a68:	push	rbp
100007a69:	mov	rbp, rsp
100007a6c:	push	r15
100007a6e:	push	r14
100007a70:	push	r13
100007a72:	push	r12
100007a74:	push	rbx
100007a75:	push	rax
100007a76:	mov	rbx, rsi
100007a79:	mov	r14, rdi
100007a7c:	mov	al, byte ptr [rsi]
100007a7e:	cmp	al, 0x5c
100007a80:	je	0x100007a86
100007a82:	cmp	al, 0x2f
100007a84:	jne	0x100007b04
100007a86:	mov	al, byte ptr [rbx + 0x1]
100007a89:	cmp	al, 0x5c
100007a8b:	je	0x100007a91
100007a8d:	cmp	al, 0x2f
100007a8f:	jne	0x100007b04
100007a91:	mov	al, byte ptr [rbx + 0x2]
100007a94:	cmp	al, 0x3f
100007a96:	je	0x100007a9c
100007a98:	cmp	al, 0x2e
100007a9a:	jne	0x100007b04
100007a9c:	mov	cl, byte ptr [rbx + 0x3]
100007a9f:	cmp	cl, 0x5c
100007aa2:	je	0x100007aa9
100007aa4:	cmp	cl, 0x2f
100007aa7:	jne	0x100007b04
100007aa9:	cmp	al, 0x3f
100007aab:	jne	0x100007ada
100007aad:	mov	al, byte ptr [rbx + 0x4]
100007ab0:	or	al, 0x20
100007ab2:	cmp	al, 0x75
100007ab4:	jne	0x100007ada
100007ab6:	mov	al, byte ptr [rbx + 0x5]
100007ab9:	or	al, 0x20
100007abb:	cmp	al, 0x6e
100007abd:	jne	0x100007ada
100007abf:	mov	al, byte ptr [rbx + 0x6]
100007ac2:	or	al, 0x20
100007ac4:	cmp	al, 0x63
100007ac6:	jne	0x100007ada
100007ac8:	mov	cl, byte ptr [rbx + 0x7]
100007acb:	mov	eax, 0x8
100007ad0:	cmp	cl, 0x2f
100007ad3:	je	0x100007adf
100007ad5:	cmp	cl, 0x5c
100007ad8:	je	0x100007adf
100007ada:	mov	eax, 0x4
100007adf:	add	rbx, rax
100007ae2:	cmp	byte ptr [r14 + 0xb8], 0x0
100007aea:	jne	0x100007b04
100007aec:	lea	rsi, [rip + 0x400a] ## literal pool for: "Removing leading drive letter from member names"
100007af3:	xor	edi, edi
100007af5:	xor	eax, eax
100007af7:	call	0x10000989e
100007afc:	mov	byte ptr [r14 + 0xb8], 0x1
100007b04:	mov	al, byte ptr [rbx]
100007b06:	lea	r12, [rip + 0x4020] ## literal pool for: "Removing leading '%c' from member names"
100007b0d:	mov	r15, rbx
100007b10:	and	al, -0x21
100007b12:	add	al, -0x41
100007b14:	mov	r13, rbx
100007b17:	cmp	al, 0x19
100007b19:	ja	0x100007b4b
100007b1b:	cmp	byte ptr [r15 + 0x1], 0x3a
100007b20:	mov	r13, r15
100007b23:	jne	0x100007b4b
100007b25:	lea	r13, [r15 + 0x2]
100007b29:	cmp	byte ptr [r14 + 0xb8], 0x0
100007b31:	jne	0x100007b4b
100007b33:	xor	edi, edi
100007b35:	lea	rsi, [rip + 0x3fc1] ## literal pool for: "Removing leading drive letter from member names"
100007b3c:	xor	eax, eax
100007b3e:	call	0x10000989e
100007b43:	mov	byte ptr [r14 + 0xb8], 0x1
100007b4b:	mov	rbx, r13
100007b4e:	mov	al, byte ptr [r13]
100007b52:	cmp	al, 0x5c
100007b54:	je	0x100007b5a
100007b56:	cmp	al, 0x2f
100007b58:	jne	0x100007ba4
100007b5a:	cmp	byte ptr [rbx + 0x1], 0x2e
100007b5e:	jne	0x100007b82
100007b60:	lea	r13, [rbx + 0x2]
100007b64:	mov	al, byte ptr [rbx + 0x2]
100007b67:	cmp	al, 0x5c
100007b69:	je	0x100007b88
100007b6b:	cmp	al, 0x2f
100007b6d:	je	0x100007b88
100007b6f:	cmp	al, 0x2e
100007b71:	jne	0x100007b82
100007b73:	lea	r13, [rbx + 0x3]
100007b77:	mov	al, byte ptr [rbx + 0x3]
100007b7a:	cmp	al, 0x2f
100007b7c:	je	0x100007b88
100007b7e:	cmp	al, 0x5c
100007b80:	je	0x100007b88
100007b82:	inc	rbx
100007b85:	mov	r13, rbx
100007b88:	cmp	byte ptr [r14 + 0xb8], 0x0
100007b90:	jne	0x100007b4b
100007b92:	movsx	edx, byte ptr [r15]
100007b96:	xor	edi, edi
100007b98:	mov	rsi, r12
100007b9b:	xor	eax, eax
100007b9d:	call	0x10000989e
100007ba2:	jmp	0x100007b43
100007ba4:	cmp	r15, rbx
100007ba7:	jne	0x100007b0d
100007bad:	mov	rax, r15
100007bb0:	add	rsp, 0x8
100007bb4:	pop	rbx
100007bb5:	pop	r12
100007bb7:	pop	r13
100007bb9:	pop	r14
100007bbb:	pop	r15
100007bbd:	pop	rbp
100007bbe:	ret
100007bbf:	push	rbp
100007bc0:	mov	rbp, rsp
100007bc3:	mov	rsi, rdi
100007bc6:	neg	rsi
100007bc9:	cmovl	rsi, rdi
100007bcd:	mov	byte ptr [rip + 0x89d3], 0x0
100007bd4:	lea	rcx, [rip + 0x89cb]
100007bdb:	movabs	r8, -0x3333333333333333
100007be5:	mov	rax, rsi
100007be8:	mul	r8
100007beb:	shr	rdx, 0x3
100007bef:	lea	eax, [rdx + rdx]
100007bf2:	lea	r9d, [rax + 4*rax]
100007bf6:	mov	eax, esi
100007bf8:	sub	eax, r9d
100007bfb:	or	al, 0x30
100007bfd:	mov	byte ptr [rcx], al
100007bff:	dec	rcx
100007c02:	cmp	rsi, 0x9
100007c06:	mov	rsi, rdx
100007c09:	ja	0x100007be5
100007c0b:	test	rdi, rdi
100007c0e:	js	0x100007c15
100007c10:	inc	rcx
100007c13:	jmp	0x100007c18
100007c15:	mov	byte ptr [rcx], 0x2d
100007c18:	mov	rax, rcx
100007c1b:	pop	rbp
100007c1c:	ret
100007c1d:	nop
100007c1e:	nop
100007c1f:	nop
100007c20:	push	rbp
100007c21:	mov	rbp, rsp
100007c24:	push	rbx
100007c25:	push	rax
100007c26:	mov	rbx, rsi
100007c29:	mov	rsi, qword ptr [rsi + 0x120]
100007c30:	test	rsi, rsi
100007c33:	jne	0x100007c4e
100007c35:	mov	edi, 0x400
100007c3a:	call	0x10000a0ba ## symbol stub for: _malloc
100007c3f:	mov	rsi, rax
100007c42:	mov	qword ptr [rbx + 0x120], rax
100007c49:	test	rax, rax
100007c4c:	je	0x100007c65
100007c4e:	lea	rdi, [rip + 0x3e2b] ## literal pool for: "Enter passphrase:"
100007c55:	mov	edx, 0x400
100007c5a:	add	rsp, 0x8
100007c5e:	pop	rbx
100007c5f:	pop	rbp
100007c60:	jmp	0x100009a2f
100007c65:	call	0x100009d72 ## symbol stub for: ___error
100007c6a:	mov	esi, dword ptr [rax]
100007c6c:	lea	rdx, [rip + 0x2e1a] ## literal pool for: "Out of memory"
100007c73:	mov	edi, 0x1
100007c78:	xor	eax, eax
100007c7a:	call	0x1000099b3
100007c7f:	test	rdi, rdi
100007c82:	je	0x100007ca5
100007c84:	push	rbp
100007c85:	mov	rbp, rsp
100007c88:	push	rbx
100007c89:	push	rax
100007c8a:	mov	rbx, rdi
100007c8d:	mov	esi, 0x400
100007c92:	call	0x100009d6c ## symbol stub for: ___bzero
100007c97:	mov	rdi, rbx
100007c9a:	add	rsp, 0x8
100007c9e:	pop	rbx
100007c9f:	pop	rbp
100007ca0:	jmp	0x10000a090 ## symbol stub for: _free
100007ca5:	ret
100007ca6:	push	rbp
100007ca7:	mov	rbp, rsp
100007caa:	push	r15
100007cac:	push	r14
100007cae:	push	r13
100007cb0:	push	r12
100007cb2:	push	rbx
100007cb3:	sub	rsp, 0xb8
100007cba:	mov	r13, rdx
100007cbd:	mov	r14, rsi
100007cc0:	mov	r15, rdi
100007cc3:	mov	rax, qword ptr [rip + 0x433e] ## literal pool symbol address: ___stack_chk_guard
100007cca:	mov	rax, qword ptr [rax]
100007ccd:	mov	qword ptr [rbp - 0x30], rax
100007cd1:	cmp	qword ptr [rdi + 0xa8], 0x0
100007cd9:	jne	0x100007cea
100007cdb:	movaps	xmm0, xmmword ptr [rip + 0x2bce]
100007ce2:	movups	xmmword ptr [r15 + 0xa0], xmm0
100007cea:	cmp	qword ptr [rip + 0x88b6], 0x0
100007cf2:	jne	0x100007d00
100007cf4:	lea	rdi, [rip + 0x88ad]
100007cfb:	call	0x10000a174 ## symbol stub for: _time
100007d00:	mov	rdi, r13
100007d03:	call	0x100009e50 ## symbol stub for: _archive_entry_strmode
100007d08:	mov	rbx, rax
100007d0b:	mov	rdi, r13
100007d0e:	call	0x100009e0e ## symbol stub for: _archive_entry_nlink
100007d13:	lea	rsi, [rip + 0x3d78] ## literal pool for: "%s %d "
100007d1a:	mov	rdi, r14
100007d1d:	mov	rdx, rbx
100007d20:	mov	ecx, eax
100007d22:	xor	eax, eax
100007d24:	call	0x10000a078 ## symbol stub for: _fprintf
100007d29:	mov	rdi, r13
100007d2c:	call	0x100009e62 ## symbol stub for: _archive_entry_uname
100007d31:	test	rax, rax
100007d34:	je	0x100007d3e
100007d36:	mov	rbx, rax
100007d39:	cmp	byte ptr [rax], 0x0
100007d3c:	jne	0x100007d68
100007d3e:	lea	rbx, [rbp - 0xa0]
100007d45:	mov	rdi, r13
100007d48:	call	0x100009e5c ## symbol stub for: _archive_entry_uid
100007d4d:	lea	rcx, [rip + 0x3d45] ## literal pool for: "%lu "
100007d54:	mov	edx, 0x64
100007d59:	mov	rdi, rbx
100007d5c:	xor	esi, esi
100007d5e:	mov	r8, rax
100007d61:	xor	eax, eax
100007d63:	call	0x100009d7e ## symbol stub for: ___sprintf_chk
100007d68:	mov	rdi, rbx
100007d6b:	call	0x10000a15c ## symbol stub for: _strlen
100007d70:	mov	rdx, qword ptr [r15 + 0xa8]
100007d77:	cmp	rax, rdx
100007d7a:	jbe	0x100007d86
100007d7c:	mov	qword ptr [r15 + 0xa8], rax
100007d83:	mov	rdx, rax
100007d86:	lea	rsi, [rip + 0x3d11] ## literal pool for: "%-*s "
100007d8d:	mov	rdi, r14
100007d90:	mov	rcx, rbx
100007d93:	xor	eax, eax
100007d95:	call	0x10000a078 ## symbol stub for: _fprintf
100007d9a:	mov	rdi, r13
100007d9d:	call	0x100009dde ## symbol stub for: _archive_entry_gname
100007da2:	test	rax, rax
100007da5:	je	0x100007dc7
100007da7:	mov	rbx, rax
100007daa:	cmp	byte ptr [rax], 0x0
100007dad:	je	0x100007dc7
100007daf:	mov	rdi, rbx
100007db2:	mov	rsi, r14
100007db5:	call	0x10000a084 ## symbol stub for: _fputs
100007dba:	mov	rdi, rbx
100007dbd:	call	0x10000a15c ## symbol stub for: _strlen
100007dc2:	mov	r12, rax
100007dc5:	jmp	0x100007e07
100007dc7:	mov	rdi, r13
100007dca:	call	0x100009dd8 ## symbol stub for: _archive_entry_gid
100007dcf:	lea	rcx, [rip + 0x3cce] ## literal pool for: "%lu"
100007dd6:	lea	rbx, [rbp - 0xa0]
100007ddd:	mov	edx, 0x64
100007de2:	mov	rdi, rbx
100007de5:	xor	esi, esi
100007de7:	mov	r8, rax
100007dea:	xor	eax, eax
100007dec:	call	0x100009d7e ## symbol stub for: ___sprintf_chk
100007df1:	mov	rdi, rbx
100007df4:	call	0x10000a15c ## symbol stub for: _strlen
100007df9:	mov	r12, rax
100007dfc:	mov	rdi, rbx
100007dff:	mov	rsi, r14
100007e02:	call	0x10000a084 ## symbol stub for: _fputs
100007e07:	mov	rdi, r13
100007e0a:	call	0x100009dcc ## symbol stub for: _archive_entry_filetype
100007e0f:	movzx	eax, ax
100007e12:	cmp	eax, 0x2000
100007e17:	je	0x100007e2b
100007e19:	mov	rdi, r13
100007e1c:	call	0x100009dcc ## symbol stub for: _archive_entry_filetype
100007e21:	movzx	eax, ax
100007e24:	cmp	eax, 0x6000
100007e29:	jne	0x100007e62
100007e2b:	mov	rdi, r13
100007e2e:	call	0x100009e1a ## symbol stub for: _archive_entry_rdevmajor
100007e33:	movsxd	rbx, eax
100007e36:	mov	rdi, r13
100007e39:	call	0x100009e20 ## symbol stub for: _archive_entry_rdevminor
100007e3e:	movsxd	r9, eax
100007e41:	lea	rcx, [rip + 0x3c60] ## literal pool for: "%lu,%lu"
100007e48:	lea	rdi, [rbp - 0xa0]
100007e4f:	mov	edx, 0x64
100007e54:	xor	esi, esi
100007e56:	mov	r8, rbx
100007e59:	xor	eax, eax
100007e5b:	call	0x100009d7e ## symbol stub for: ___sprintf_chk
100007e60:	jmp	0x100007ed2
100007e62:	mov	rdi, r13
100007e65:	call	0x100009e44 ## symbol stub for: _archive_entry_size
100007e6a:	mov	r8, rax
100007e6d:	mov	rdi, rax
100007e70:	neg	rdi
100007e73:	cmovl	rdi, rax
100007e77:	mov	byte ptr [rip + 0x8729], 0x0
100007e7e:	lea	rsi, [rip + 0x8721]
100007e85:	movabs	rbx, -0x3333333333333333
100007e8f:	mov	rax, rdi
100007e92:	mul	rbx
100007e95:	shr	rdx, 0x3
100007e99:	lea	eax, [rdx + rdx]
100007e9c:	lea	eax, [rax + 4*rax]
100007e9f:	mov	ecx, edi
100007ea1:	sub	ecx, eax
100007ea3:	or	cl, 0x30
100007ea6:	mov	byte ptr [rsi], cl
100007ea8:	dec	rsi
100007eab:	cmp	rdi, 0x9
100007eaf:	mov	rdi, rdx
100007eb2:	ja	0x100007e8f
100007eb4:	test	r8, r8
100007eb7:	js	0x100007ebe
100007eb9:	inc	rsi
100007ebc:	jmp	0x100007ec1
100007ebe:	mov	byte ptr [rsi], 0x2d
100007ec1:	lea	rdi, [rbp - 0xa0]
100007ec8:	mov	edx, 0x64
100007ecd:	call	0x100009d90 ## symbol stub for: ___strcpy_chk
100007ed2:	lea	rdi, [rbp - 0xa0]
100007ed9:	call	0x10000a15c ## symbol stub for: _strlen
100007ede:	add	rax, r12
100007ee1:	mov	rdx, qword ptr [r15 + 0xa0]
100007ee8:	cmp	rax, rdx
100007eeb:	jb	0x100007efa
100007eed:	inc	rax
100007ef0:	mov	qword ptr [r15 + 0xa0], rax
100007ef7:	mov	rdx, rax
100007efa:	sub	edx, r12d
100007efd:	lea	rsi, [rip + 0x3bac] ## literal pool for: "%*s"
100007f04:	lea	rcx, [rbp - 0xa0]
100007f0b:	mov	rdi, r14
100007f0e:	xor	eax, eax
100007f10:	call	0x10000a078 ## symbol stub for: _fprintf
100007f15:	mov	rdi, r13
100007f18:	call	0x100009e02 ## symbol stub for: _archive_entry_mtime
100007f1d:	lea	rdi, [rbp - 0xa8]
100007f24:	mov	qword ptr [rdi], rax
100007f27:	mov	rcx, qword ptr [rip + 0x867a]
100007f2e:	lea	rdx, [rcx - 0xf099c0]
100007f35:	add	rcx, 0xf099c0
100007f3c:	cmp	byte ptr [r15 + 0x68], 0x0
100007f41:	lea	rbx, [rip + 0x3b76] ## literal pool for: "%b %e  %Y"
100007f48:	lea	rsi, [rip + 0x3b65] ## literal pool for: "%e %b  %Y"
100007f4f:	cmove	rsi, rbx
100007f53:	lea	r8, [rip + 0x3b7a] ## literal pool for: "%b %e %H:%M"
100007f5a:	lea	rbx, [rip + 0x3b67] ## literal pool for: "%e %b %H:%M"
100007f61:	cmove	rbx, r8
100007f65:	cmp	rax, rcx
100007f68:	cmovg	rbx, rsi
100007f6c:	cmp	rax, rdx
100007f6f:	cmovl	rbx, rsi
100007f73:	lea	rsi, [rbp - 0xe0]
100007f7a:	call	0x10000a0ae ## symbol stub for: _localtime_r
100007f7f:	test	rax, rax
100007f82:	jne	0x100007f97
100007f84:	lea	rdi, [rbp - 0xa8]
100007f8b:	mov	qword ptr [rdi], 0x0
100007f92:	call	0x10000a0a8 ## symbol stub for: _localtime
100007f97:	lea	r15, [rbp - 0xa0]
100007f9e:	mov	esi, 0x64
100007fa3:	mov	rdi, r15
100007fa6:	mov	rdx, rbx
100007fa9:	mov	rcx, rax
100007fac:	call	0x10000a156 ## symbol stub for: _strftime
100007fb1:	lea	rsi, [rip + 0x3b28] ## literal pool for: " %s "
100007fb8:	mov	rdi, r14
100007fbb:	mov	rdx, r15
100007fbe:	xor	eax, eax
100007fc0:	call	0x10000a078 ## symbol stub for: _fprintf
100007fc5:	mov	rdi, r13
100007fc8:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
100007fcd:	lea	rsi, [rip + 0x389e] ## literal pool for: "%s"
100007fd4:	mov	rdi, r14
100007fd7:	mov	rdx, rax
100007fda:	xor	eax, eax
100007fdc:	call	0x1000070ec
100007fe1:	mov	rdi, r13
100007fe4:	call	0x100009de4 ## symbol stub for: _archive_entry_hardlink
100007fe9:	test	rax, rax
100007fec:	je	0x100007fff
100007fee:	mov	rdi, r13
100007ff1:	call	0x100009de4 ## symbol stub for: _archive_entry_hardlink
100007ff6:	lea	rsi, [rip + 0x3ae8] ## literal pool for: " link to %s"
100007ffd:	jmp	0x10000801b
100007fff:	mov	rdi, r13
100008002:	call	0x100009e56 ## symbol stub for: _archive_entry_symlink
100008007:	test	rax, rax
10000800a:	je	0x100008028
10000800c:	mov	rdi, r13
10000800f:	call	0x100009e56 ## symbol stub for: _archive_entry_symlink
100008014:	lea	rsi, [rip + 0x3ad6] ## literal pool for: " -> %s"
10000801b:	mov	rdi, r14
10000801e:	mov	rdx, rax
100008021:	xor	eax, eax
100008023:	call	0x1000070ec
100008028:	mov	rax, qword ptr [rip + 0x3fd9] ## literal pool symbol address: ___stack_chk_guard
10000802f:	mov	rax, qword ptr [rax]
100008032:	cmp	rax, qword ptr [rbp - 0x30]
100008036:	jne	0x10000804a
100008038:	add	rsp, 0xb8
10000803f:	pop	rbx
100008040:	pop	r12
100008042:	pop	r13
100008044:	pop	r14
100008046:	pop	r15
100008048:	pop	rbp
100008049:	ret
10000804a:	call	0x100009d84 ## symbol stub for: ___stack_chk_fail
10000804f:	push	rbp
100008050:	mov	rbp, rsp
100008053:	push	r15
100008055:	push	r14
100008057:	push	rbx
100008058:	push	rax
100008059:	mov	rbx, rdi
10000805c:	mov	rax, qword ptr [rdi + 0x90]
100008063:	cmp	qword ptr [rax], 0x0
100008067:	jne	0x100008074
100008069:	cmp	qword ptr [rbx + 0x10], 0x0
10000806e:	je	0x1000081bd
100008074:	call	0x100009ff4 ## symbol stub for: _archive_write_new
100008079:	mov	r14, rax
10000807c:	mov	rdi, qword ptr [rbx + 0x70]
100008080:	call	0x100004242
100008085:	test	rax, rax
100008088:	je	0x1000080a3
10000808a:	mov	rdi, qword ptr [rbx + 0x70]
10000808e:	call	0x100004242
100008093:	mov	rdi, r14
100008096:	mov	rsi, rax
100008099:	call	0x10000a018 ## symbol stub for: _archive_write_set_format_by_name
10000809e:	mov	r15d, eax
1000080a1:	jmp	0x1000080be
1000080a3:	mov	rdi, r14
1000080a6:	call	0x10000a01e ## symbol stub for: _archive_write_set_format_pax_restricted
1000080ab:	mov	r15d, eax
1000080ae:	mov	rdi, qword ptr [rbx + 0x70]
1000080b2:	lea	rsi, [rip + 0x3abe] ## literal pool for: "pax restricted"
1000080b9:	call	0x100004203
1000080be:	test	r15d, r15d
1000080c1:	jne	0x10000816a
1000080c7:	mov	esi, dword ptr [rbx + 0x18]
1000080ca:	mov	rdi, r14
1000080cd:	call	0x10000a00c ## symbol stub for: _archive_write_set_bytes_per_block
1000080d2:	mov	esi, dword ptr [rbx + 0x1c]
1000080d5:	mov	rdi, r14
1000080d8:	call	0x10000a006 ## symbol stub for: _archive_write_set_bytes_in_last_block
1000080dd:	mov	rdi, qword ptr [rbx + 0x70]
1000080e1:	lea	rdx, [rbp - 0x20]
1000080e5:	mov	rsi, r14
1000080e8:	call	0x100004185
1000080ed:	cmp	eax, -0x15
1000080f0:	jle	0x1000081a4
1000080f6:	mov	rdi, rbx
1000080f9:	mov	rsi, r14
1000080fc:	call	0x1000081d2
100008101:	mov	rsi, qword ptr [rbx + 0x50]
100008105:	test	rsi, rsi
100008108:	je	0x100008114
10000810a:	mov	rdi, r14
10000810d:	call	0x10000a02a ## symbol stub for: _archive_write_set_passphrase
100008112:	jmp	0x100008126
100008114:	lea	rdx, [rip - 0x4fb]
10000811b:	mov	rdi, r14
10000811e:	mov	rsi, rbx
100008121:	call	0x10000a030 ## symbol stub for: _archive_write_set_passphrase_callback
100008126:	test	eax, eax
100008128:	jne	0x10000814f
10000812a:	mov	rsi, qword ptr [rbx]
10000812d:	mov	rdi, r14
100008130:	call	0x10000a000 ## symbol stub for: _archive_write_open_filename
100008135:	test	eax, eax
100008137:	jne	0x10000814f
100008139:	mov	rdi, r14
10000813c:	mov	rsi, rbx
10000813f:	call	0x1000082bd
100008144:	add	rsp, 0x8
100008148:	pop	rbx
100008149:	pop	r14
10000814b:	pop	r15
10000814d:	pop	rbp
10000814e:	ret
10000814f:	mov	rdi, r14
100008152:	call	0x100009e6e ## symbol stub for: _archive_error_string
100008157:	lea	rdx, [rip + 0x3714] ## literal pool for: "%s"
10000815e:	mov	edi, 0x1
100008163:	xor	esi, esi
100008165:	mov	rcx, rax
100008168:	jmp	0x1000081b6
10000816a:	mov	rax, qword ptr [rip + 0x3e9f] ## literal pool symbol address: ___stderrp
100008171:	mov	r15, qword ptr [rax]
100008174:	mov	rdi, qword ptr [rbx + 0x70]
100008178:	call	0x100004242
10000817d:	mov	rbx, rax
100008180:	mov	rdi, r14
100008183:	call	0x100009e6e ## symbol stub for: _archive_error_string
100008188:	lea	rsi, [rip + 0x39f7] ## literal pool for: "Can't use format %s: %s\n"
10000818f:	mov	rdi, r15
100008192:	mov	rdx, rbx
100008195:	mov	rcx, rax
100008198:	xor	eax, eax
10000819a:	call	0x10000a078 ## symbol stub for: _fprintf
10000819f:	call	0x100005adc
1000081a4:	mov	rcx, qword ptr [rbp - 0x20]
1000081a8:	lea	rdx, [rip + 0x39f0] ## literal pool for: "Unsupported compression option --%s"
1000081af:	mov	edi, 0x1
1000081b4:	xor	esi, esi
1000081b6:	xor	eax, eax
1000081b8:	call	0x1000099b3
1000081bd:	lea	rdx, [rip + 0x3991] ## literal pool for: "no files or directories specified"
1000081c4:	mov	edi, 0x1
1000081c9:	xor	esi, esi
1000081cb:	xor	eax, eax
1000081cd:	call	0x1000099b3
1000081d2:	push	rbp
1000081d3:	mov	rbp, rsp
1000081d6:	push	r15
1000081d8:	push	r14
1000081da:	push	r13
1000081dc:	push	r12
1000081de:	push	rbx
1000081df:	push	rax
1000081e0:	mov	r15, rsi
1000081e3:	mov	r14, rdi
1000081e6:	lea	rdi, [rip + 0x3a83] ## literal pool for: "TAR_WRITER_OPTIONS"
1000081ed:	call	0x10000a09c ## symbol stub for: _getenv
1000081f2:	test	rax, rax
1000081f5:	je	0x100008264
1000081f7:	mov	r12, rax
1000081fa:	mov	rdi, rax
1000081fd:	call	0x10000a15c ## symbol stub for: _strlen
100008202:	mov	r13, rax
100008205:	lea	rdi, [rax + 0x1e]
100008209:	call	0x10000a0ba ## symbol stub for: _malloc
10000820e:	test	rax, rax
100008211:	je	0x1000082a3
100008217:	mov	rbx, rax
10000821a:	inc	r13
10000821d:	movups	xmm0, xmmword ptr [rip + 0x363d] ## literal pool for: "g_module_name__,"
100008224:	movups	xmmword ptr [rax + 0xd], xmm0
100008228:	movups	xmm0, xmmword ptr [rip + 0x3625] ## literal pool for: "__ignore_wrong_module_name__,"
10000822f:	movups	xmmword ptr [rax], xmm0
100008232:	mov	rdi, rax
100008235:	mov	rsi, r12
100008238:	mov	rdx, r13
10000823b:	call	0x10000a0cc ## symbol stub for: _memcpy
100008240:	mov	rdi, r15
100008243:	mov	rsi, rbx
100008246:	call	0x10000a024 ## symbol stub for: _archive_write_set_options
10000824b:	mov	r12d, eax
10000824e:	mov	rdi, rbx
100008251:	call	0x10000a090 ## symbol stub for: _free
100008256:	cmp	r12d, -0x15
10000825a:	jle	0x100008283
10000825c:	mov	rdi, r15
10000825f:	call	0x100009db4 ## symbol stub for: _archive_clear_error
100008264:	mov	rsi, qword ptr [r14 + 0x60]
100008268:	mov	rdi, r15
10000826b:	call	0x10000a024 ## symbol stub for: _archive_write_set_options
100008270:	test	eax, eax
100008272:	jne	0x100008283
100008274:	add	rsp, 0x8
100008278:	pop	rbx
100008279:	pop	r12
10000827b:	pop	r13
10000827d:	pop	r14
10000827f:	pop	r15
100008281:	pop	rbp
100008282:	ret
100008283:	mov	rdi, r15
100008286:	call	0x100009e6e ## symbol stub for: _archive_error_string
10000828b:	lea	rdx, [rip + 0x35e0] ## literal pool for: "%s"
100008292:	mov	edi, 0x1
100008297:	xor	esi, esi
100008299:	mov	rcx, rax
10000829c:	xor	eax, eax
10000829e:	call	0x1000099b3
1000082a3:	call	0x100009d72 ## symbol stub for: ___error
1000082a8:	mov	esi, dword ptr [rax]
1000082aa:	lea	rdx, [rip + 0x27dc] ## literal pool for: "Out of memory"
1000082b1:	mov	edi, 0x1
1000082b6:	xor	eax, eax
1000082b8:	call	0x1000099b3
1000082bd:	push	rbp
1000082be:	mov	rbp, rsp
1000082c1:	push	r15
1000082c3:	push	r14
1000082c5:	push	r13
1000082c7:	push	r12
1000082c9:	push	rbx
1000082ca:	sub	rsp, 0x28
1000082ce:	mov	r13, rsi
1000082d1:	mov	r14, rdi
1000082d4:	movsxd	rax, dword ptr [rsi + 0x18]
1000082d8:	mov	ecx, 0x10000
1000082dd:	mov	rdi, rcx
1000082e0:	add	rcx, rcx
1000082e3:	cmp	rdi, rax
1000082e6:	jb	0x1000082dd
1000082e8:	add	rdi, 0x4000
1000082ef:	mov	qword ptr [r13 + 0xe8], rdi
1000082f6:	call	0x10000a0ba ## symbol stub for: _malloc
1000082fb:	mov	qword ptr [r13 + 0xe0], rax
100008302:	test	rax, rax
100008305:	je	0x100008a8a
10000830b:	call	0x100009df6 ## symbol stub for: _archive_entry_linkresolver_new
100008310:	mov	qword ptr [r13 + 0xc8], rax
100008317:	test	rax, rax
10000831a:	je	0x100008a93
100008320:	mov	rbx, rax
100008323:	mov	rdi, r14
100008326:	call	0x100009e8c ## symbol stub for: _archive_format
10000832b:	mov	rdi, rbx
10000832e:	mov	esi, eax
100008330:	call	0x100009dfc ## symbol stub for: _archive_entry_linkresolver_set_strategy
100008335:	call	0x100009f16 ## symbol stub for: _archive_read_disk_new
10000833a:	mov	qword ptr [r13 + 0xc0], rax
100008341:	test	rax, rax
100008344:	je	0x100008a9c
10000834a:	movsx	ecx, byte ptr [r13 + 0x59]
10000834f:	mov	rdi, rax
100008352:	cmp	ecx, 0x4c
100008355:	je	0x100008363
100008357:	cmp	ecx, 0x48
10000835a:	jne	0x10000836a
10000835c:	call	0x100009f3a ## symbol stub for: _archive_read_disk_set_symlink_hybrid
100008361:	jmp	0x10000836f
100008363:	call	0x100009f40 ## symbol stub for: _archive_read_disk_set_symlink_logical
100008368:	jmp	0x10000836f
10000836a:	call	0x100009f46 ## symbol stub for: _archive_read_disk_set_symlink_physical
10000836f:	mov	rdi, qword ptr [r13 + 0xc0]
100008376:	mov	rsi, qword ptr [r13 + 0xf8]
10000837d:	lea	rdx, [rip + 0xda0]
100008384:	mov	rcx, r13
100008387:	call	0x100009f28 ## symbol stub for: _archive_read_disk_set_matching
10000838c:	mov	rdi, qword ptr [r13 + 0xc0]
100008393:	lea	rsi, [rip + 0xdec]
10000839a:	mov	rdx, r13
10000839d:	call	0x100009f2e ## symbol stub for: _archive_read_disk_set_metadata_filter_callback
1000083a2:	mov	rdi, qword ptr [r13 + 0xc0]
1000083a9:	mov	esi, dword ptr [r13 + 0x2c]
1000083ad:	call	0x100009f22 ## symbol stub for: _archive_read_disk_set_behavior
1000083b2:	mov	rdi, qword ptr [r13 + 0xc0]
1000083b9:	call	0x100009f34 ## symbol stub for: _archive_read_disk_set_standard_lookup
1000083be:	mov	rdi, qword ptr [r13 + 0x10]
1000083c2:	test	rdi, rdi
1000083c5:	mov	qword ptr [rbp - 0x38], r14
1000083c9:	je	0x1000084af
1000083cf:	mov	byte ptr [r13 + 0xb9], 0x0
1000083d7:	mov	esi, 0x100
1000083dc:	and	esi, dword ptr [r13 + 0x24]
1000083e0:	call	0x100009a72
1000083e5:	mov	r15, rax
1000083e8:	mov	rdi, rax
1000083eb:	call	0x100009b30
1000083f0:	test	rax, rax
1000083f3:	je	0x100008495
1000083f9:	mov	rbx, rax
1000083fc:	lea	r12, [rip + 0x392c] ## literal pool for: "-C"
100008403:	lea	r14, [rip + 0x38e3] ## literal pool for: "Meaningless argument for -C: ''"
10000840a:	cmp	byte ptr [r13 + 0xb9], 0x0
100008412:	je	0x100008426
100008414:	cmp	byte ptr [rbx], 0x0
100008417:	je	0x10000845a
100008419:	mov	rdi, r13
10000841c:	mov	rsi, rbx
10000841f:	call	0x100007719
100008424:	jmp	0x100008471
100008426:	test	byte ptr [r13 + 0x25], 0x1
10000842b:	jne	0x10000843c
10000842d:	mov	rdi, rbx
100008430:	mov	rsi, r12
100008433:	call	0x10000a138 ## symbol stub for: _strcmp
100008438:	test	eax, eax
10000843a:	je	0x10000848b
10000843c:	cmp	byte ptr [rbx], 0x2f
10000843f:	je	0x100008449
100008441:	mov	rdi, r13
100008444:	call	0x1000077de
100008449:	mov	rdi, r13
10000844c:	mov	rsi, qword ptr [rbp - 0x38]
100008450:	mov	rdx, rbx
100008453:	call	0x1000091ec
100008458:	jmp	0x100008479
10000845a:	xor	edi, edi
10000845c:	mov	rsi, r14
10000845f:	xor	eax, eax
100008461:	call	0x10000989e
100008466:	mov	dword ptr [r13 + 0xb4], 0x1
100008471:	mov	byte ptr [r13 + 0xb9], 0x0
100008479:	mov	rdi, r15
10000847c:	call	0x100009b30
100008481:	mov	rbx, rax
100008484:	test	rax, rax
100008487:	jne	0x10000840a
100008489:	jmp	0x100008495
10000848b:	mov	byte ptr [r13 + 0xb9], 0x1
100008493:	jmp	0x100008479
100008495:	mov	rdi, r15
100008498:	call	0x100009d13
10000849d:	cmp	byte ptr [r13 + 0xb9], 0x0
1000084a5:	mov	r14, qword ptr [rbp - 0x38]
1000084a9:	jne	0x100008ab1
1000084af:	mov	rax, qword ptr [r13 + 0x90]
1000084b6:	mov	r15, qword ptr [rax]
1000084b9:	test	r15, r15
1000084bc:	je	0x1000087ed
1000084c2:	lea	rcx, [r13 + 0xb4]
1000084c9:	mov	qword ptr [rbp - 0x40], rcx
1000084cd:	lea	rbx, [rbp - 0x30]
1000084d1:	mov	cl, byte ptr [r15]
1000084d4:	cmp	cl, 0x2f
1000084d7:	je	0x10000856e
1000084dd:	cmp	cl, 0x2d
1000084e0:	jne	0x1000084fd
1000084e2:	cmp	byte ptr [r15 + 0x1], 0x43
1000084e7:	jne	0x1000084fd
1000084e9:	cmp	byte ptr [r15 + 0x2], 0x0
1000084ee:	je	0x1000087a1
1000084f4:	add	r15, 0x2
1000084f8:	jmp	0x1000087c3
1000084fd:	mov	rdi, r13
100008500:	call	0x1000077de
100008505:	cmp	byte ptr [r15], 0x40
100008509:	jne	0x10000856e
10000850b:	inc	r15
10000850e:	mov	rdi, r15
100008511:	lea	rsi, [rip + 0x27fa] ## literal pool for: "-"
100008518:	call	0x10000a138 ## symbol stub for: _strcmp
10000851d:	test	eax, eax
10000851f:	mov	r14, r15
100008522:	mov	eax, 0x0
100008527:	cmove	r14, rax
10000852b:	call	0x100009f6a ## symbol stub for: _archive_read_new
100008530:	mov	r12, rax
100008533:	mov	rdi, rax
100008536:	call	0x100009fa0 ## symbol stub for: _archive_read_support_format_all
10000853b:	mov	rdi, r12
10000853e:	call	0x100009f94 ## symbol stub for: _archive_read_support_filter_all
100008543:	mov	rdi, r12
100008546:	call	0x100008dcc
10000854b:	mov	rdi, r12
10000854e:	lea	rsi, [rip + 0x381a] ## literal pool for: "mtree:checkfs"
100008555:	call	0x100009f88 ## symbol stub for: _archive_read_set_options
10000855a:	mov	rsi, qword ptr [r13 + 0x50]
10000855e:	test	rsi, rsi
100008561:	je	0x100008581
100008563:	mov	rdi, qword ptr [rbp - 0x38]
100008567:	call	0x100009ee6 ## symbol stub for: _archive_read_add_passphrase
10000856c:	jmp	0x100008593
10000856e:	mov	rdi, r13
100008571:	mov	rsi, r14
100008574:	mov	rdx, r15
100008577:	call	0x1000091ec
10000857c:	jmp	0x1000087ce
100008581:	mov	rdi, r12
100008584:	mov	rsi, r13
100008587:	lea	rdx, [rip - 0x96e]
10000858e:	call	0x100009f8e ## symbol stub for: _archive_read_set_passphrase_callback
100008593:	test	eax, eax
100008595:	jne	0x100008a69
10000859b:	movsxd	rdx, dword ptr [r13 + 0x18]
10000859f:	mov	rdi, r12
1000085a2:	mov	rsi, r14
1000085a5:	call	0x100009f82 ## symbol stub for: _archive_read_open_filename
1000085aa:	test	eax, eax
1000085ac:	je	0x1000085dc
1000085ae:	mov	rdi, r12
1000085b1:	call	0x100009e6e ## symbol stub for: _archive_error_string
1000085b6:	xor	edi, edi
1000085b8:	lea	rsi, [rip + 0x32b3] ## literal pool for: "%s"
1000085bf:	mov	rdx, rax
1000085c2:	xor	eax, eax
1000085c4:	call	0x10000989e
1000085c9:	mov	rax, qword ptr [rbp - 0x40]
1000085cd:	mov	dword ptr [rax], 0x1
1000085d3:	mov	r14, qword ptr [rbp - 0x38]
1000085d7:	jmp	0x1000087ce
1000085dc:	mov	rdi, r12
1000085df:	mov	rsi, rbx
1000085e2:	call	0x100009f70 ## symbol stub for: _archive_read_next_header
1000085e7:	test	eax, eax
1000085e9:	mov	r14, qword ptr [rbp - 0x38]
1000085ed:	jne	0x10000878e
1000085f3:	mov	rdi, qword ptr [r13 + 0xf8]
1000085fa:	mov	rsi, qword ptr [rbp - 0x30]
1000085fe:	call	0x100009eaa ## symbol stub for: _archive_match_excluded
100008603:	test	eax, eax
100008605:	jne	0x10000877b
10000860b:	test	byte ptr [r13 + 0x24], 0x20
100008610:	je	0x100008634
100008612:	mov	rdi, qword ptr [rbp - 0x30]
100008616:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
10000861b:	lea	rdi, [rip + 0x3778] ## literal pool for: "copy '%s'"
100008622:	mov	rsi, rax
100008625:	xor	eax, eax
100008627:	call	0x100007568
10000862c:	test	eax, eax
10000862e:	je	0x10000877b
100008634:	mov	eax, dword ptr [r13 + 0x20]
100008638:	cmp	eax, 0x2
10000863b:	jl	0x100008666
10000863d:	mov	rbx, qword ptr [rip + 0x39cc] ## literal pool symbol address: ___stderrp
100008644:	mov	rdi, qword ptr [rbx]
100008647:	lea	rsi, [rip + 0x3756] ## literal pool for: "a "
10000864e:	xor	eax, eax
100008650:	call	0x1000070ec
100008655:	mov	rsi, qword ptr [rbx]
100008658:	mov	rdx, qword ptr [rbp - 0x30]
10000865c:	mov	rdi, r13
10000865f:	call	0x100007ca6
100008664:	jmp	0x100008692
100008666:	cmp	eax, 0x1
100008669:	jne	0x100008692
10000866b:	mov	rax, qword ptr [rip + 0x399e] ## literal pool symbol address: ___stderrp
100008672:	mov	rbx, qword ptr [rax]
100008675:	mov	rdi, qword ptr [rbp - 0x30]
100008679:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
10000867e:	mov	rdi, rbx
100008681:	lea	rsi, [rip + 0x371f] ## literal pool for: "a %s"
100008688:	mov	rdx, rax
10000868b:	xor	eax, eax
10000868d:	call	0x1000070ec
100008692:	call	0x10000450c
100008697:	test	eax, eax
100008699:	je	0x1000086ac
10000869b:	mov	rdx, qword ptr [rbp - 0x30]
10000869f:	mov	rdi, r13
1000086a2:	mov	rsi, r14
1000086a5:	xor	ecx, ecx
1000086a7:	call	0x10000959d
1000086ac:	mov	rsi, qword ptr [rbp - 0x30]
1000086b0:	mov	rdi, r14
1000086b3:	call	0x100009fee ## symbol stub for: _archive_write_header
1000086b8:	test	eax, eax
1000086ba:	je	0x10000872b
1000086bc:	mov	ebx, eax
1000086be:	cmp	dword ptr [r13 + 0x20], 0x0
1000086c3:	je	0x1000086ee
1000086c5:	mov	rax, qword ptr [rip + 0x3944] ## literal pool symbol address: ___stderrp
1000086cc:	mov	r14, qword ptr [rax]
1000086cf:	mov	rdi, qword ptr [rbp - 0x38]
1000086d3:	call	0x100009e6e ## symbol stub for: _archive_error_string
1000086d8:	mov	rdi, r14
1000086db:	lea	rsi, [rip + 0x323c] ## literal pool for: ": %s"
1000086e2:	mov	rdx, rax
1000086e5:	xor	eax, eax
1000086e7:	call	0x10000a078 ## symbol stub for: _fprintf
1000086ec:	jmp	0x100008719
1000086ee:	mov	rdi, qword ptr [rbp - 0x30]
1000086f2:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
1000086f7:	mov	r14, rax
1000086fa:	mov	rdi, qword ptr [rbp - 0x38]
1000086fe:	call	0x100009e6e ## symbol stub for: _archive_error_string
100008703:	xor	edi, edi
100008705:	lea	rsi, [rip + 0x3291] ## literal pool for: "%s: %s"
10000870c:	mov	rdx, r14
10000870f:	mov	rcx, rax
100008712:	xor	eax, eax
100008714:	call	0x10000989e
100008719:	cmp	ebx, -0x1e
10000871c:	je	0x100008a5f
100008722:	cmp	ebx, -0x14
100008725:	mov	r14, qword ptr [rbp - 0x38]
100008729:	jl	0x10000875c
10000872b:	mov	rdi, qword ptr [rbp - 0x30]
10000872f:	call	0x100009e44 ## symbol stub for: _archive_entry_size
100008734:	test	rax, rax
100008737:	je	0x100008754
100008739:	mov	rcx, qword ptr [rbp - 0x30]
10000873d:	mov	rdi, r13
100008740:	mov	rsi, r14
100008743:	mov	rdx, r12
100008746:	call	0x1000096d2
10000874b:	test	eax, eax
10000874d:	je	0x10000875c
10000874f:	jmp	0x100008a5f
100008754:	mov	rdi, r12
100008757:	call	0x100009efe ## symbol stub for: _archive_read_data_skip
10000875c:	cmp	dword ptr [r13 + 0x20], 0x0
100008761:	lea	rbx, [rbp - 0x30]
100008765:	je	0x10000877b
100008767:	mov	rax, qword ptr [rip + 0x38a2] ## literal pool symbol address: ___stderrp
10000876e:	mov	rsi, qword ptr [rax]
100008771:	mov	edi, 0xa
100008776:	call	0x10000a07e ## symbol stub for: _fputc
10000877b:	mov	rdi, r12
10000877e:	mov	rsi, rbx
100008781:	call	0x100009f70 ## symbol stub for: _archive_read_next_header
100008786:	test	eax, eax
100008788:	je	0x1000085f3
10000878e:	cmp	eax, 0x1
100008791:	ja	0x1000089f8
100008797:	mov	rdi, r12
10000879a:	call	0x100009f5e ## symbol stub for: _archive_read_free
10000879f:	jmp	0x1000087ce
1000087a1:	lea	rcx, [rax + 0x8]
1000087a5:	mov	qword ptr [r13 + 0x90], rcx
1000087ac:	mov	r15, qword ptr [rax + 0x8]
1000087b0:	test	r15, r15
1000087b3:	je	0x100008a2d
1000087b9:	cmp	byte ptr [r15], 0x0
1000087bd:	je	0x100008a46
1000087c3:	mov	rdi, r13
1000087c6:	mov	rsi, r15
1000087c9:	call	0x100007719
1000087ce:	mov	rcx, qword ptr [r13 + 0x90]
1000087d5:	lea	rax, [rcx + 0x8]
1000087d9:	mov	qword ptr [r13 + 0x90], rax
1000087e0:	mov	r15, qword ptr [rcx + 0x8]
1000087e4:	test	r15, r15
1000087e7:	jne	0x1000084d1
1000087ed:	mov	rdi, qword ptr [r13 + 0xc0]
1000087f4:	xor	esi, esi
1000087f6:	xor	edx, edx
1000087f8:	xor	ecx, ecx
1000087fa:	call	0x100009f28 ## symbol stub for: _archive_read_disk_set_matching
1000087ff:	mov	rdi, qword ptr [r13 + 0xc0]
100008806:	xor	esi, esi
100008808:	xor	edx, edx
10000880a:	call	0x100009f2e ## symbol stub for: _archive_read_disk_set_metadata_filter_callback
10000880f:	lea	rbx, [rbp - 0x30]
100008813:	mov	qword ptr [rbx], 0x0
10000881a:	mov	rdi, qword ptr [r13 + 0xc8]
100008821:	lea	rdx, [rbp - 0x48]
100008825:	mov	rsi, rbx
100008828:	call	0x100009dea ## symbol stub for: _archive_entry_linkify
10000882d:	mov	rdi, qword ptr [rbx]
100008830:	test	rdi, rdi
100008833:	je	0x10000893b
100008839:	lea	r15, [rbp - 0x30]
10000883d:	lea	r12, [rbp - 0x48]
100008841:	mov	r14, qword ptr [r13 + 0xc0]
100008848:	call	0x100009e4a ## symbol stub for: _archive_entry_sourcepath
10000884d:	mov	rdi, r14
100008850:	mov	rsi, rax
100008853:	call	0x100009f1c ## symbol stub for: _archive_read_disk_open
100008858:	test	eax, eax
10000885a:	je	0x10000888e
10000885c:	mov	rdi, r14
10000885f:	call	0x100009e68 ## symbol stub for: _archive_errno
100008864:	mov	ebx, eax
100008866:	mov	rdi, r14
100008869:	call	0x100009e6e ## symbol stub for: _archive_error_string
10000886e:	mov	edi, ebx
100008870:	lea	rsi, [rip + 0x2ffb] ## literal pool for: "%s"
100008877:	mov	rdx, rax
10000887a:	xor	eax, eax
10000887c:	call	0x10000989e
100008881:	mov	dword ptr [r13 + 0xb4], 0x1
10000888c:	jmp	0x10000890b
10000888e:	mov	r12, r15
100008891:	call	0x100009e08 ## symbol stub for: _archive_entry_new
100008896:	mov	rbx, rax
100008899:	mov	rdi, r14
10000889c:	mov	rsi, rax
10000889f:	call	0x100009f76 ## symbol stub for: _archive_read_next_header2
1000088a4:	mov	r15d, eax
1000088a7:	mov	rdi, rbx
1000088aa:	call	0x100009dd2 ## symbol stub for: _archive_entry_free
1000088af:	test	r15d, r15d
1000088b2:	je	0x1000088ec
1000088b4:	mov	rdi, r14
1000088b7:	call	0x100009e68 ## symbol stub for: _archive_errno
1000088bc:	mov	ebx, eax
1000088be:	mov	rdi, r14
1000088c1:	call	0x100009e6e ## symbol stub for: _archive_error_string
1000088c6:	mov	edi, ebx
1000088c8:	lea	rsi, [rip + 0x2fa3] ## literal pool for: "%s"
1000088cf:	mov	rdx, rax
1000088d2:	xor	eax, eax
1000088d4:	call	0x10000989e
1000088d9:	cmp	r15d, -0x1e
1000088dd:	jne	0x1000088fc
1000088df:	mov	dword ptr [r13 + 0xb4], 0x1
1000088ea:	jmp	0x1000088fc
1000088ec:	mov	rdx, qword ptr [rbp - 0x30]
1000088f0:	mov	rdi, r13
1000088f3:	mov	rsi, qword ptr [rbp - 0x38]
1000088f7:	call	0x100009484
1000088fc:	mov	rdi, r14
1000088ff:	call	0x100009eec ## symbol stub for: _archive_read_close
100008904:	mov	r15, r12
100008907:	lea	r12, [rbp - 0x48]
10000890b:	mov	rdi, qword ptr [rbp - 0x30]
10000890f:	call	0x100009dd2 ## symbol stub for: _archive_entry_free
100008914:	mov	qword ptr [rbp - 0x30], 0x0
10000891c:	mov	rdi, qword ptr [r13 + 0xc8]
100008923:	mov	rsi, r15
100008926:	mov	rdx, r12
100008929:	call	0x100009dea ## symbol stub for: _archive_entry_linkify
10000892e:	mov	rdi, qword ptr [rbp - 0x30]
100008932:	test	rdi, rdi
100008935:	jne	0x100008841
10000893b:	mov	r14, qword ptr [rbp - 0x38]
10000893f:	mov	rdi, r14
100008942:	call	0x100009fca ## symbol stub for: _archive_write_close
100008947:	test	eax, eax
100008949:	je	0x100008973
10000894b:	mov	rdi, r14
10000894e:	call	0x100009e6e ## symbol stub for: _archive_error_string
100008953:	lea	rsi, [rip + 0x2f18] ## literal pool for: "%s"
10000895a:	xor	edi, edi
10000895c:	mov	rdx, rax
10000895f:	xor	eax, eax
100008961:	call	0x10000989e
100008966:	lea	rax, [r13 + 0xb4]
10000896d:	mov	dword ptr [rax], 0x1
100008973:	mov	rdi, qword ptr [r13 + 0xe0]
10000897a:	call	0x10000a090 ## symbol stub for: _free
10000897f:	mov	rdi, qword ptr [r13 + 0xc8]
100008986:	call	0x100009df0 ## symbol stub for: _archive_entry_linkresolver_free
10000898b:	xor	ebx, ebx
10000898d:	mov	qword ptr [r13 + 0xc8], rbx
100008994:	mov	rdi, qword ptr [r13 + 0xc0]
10000899b:	call	0x100009f5e ## symbol stub for: _archive_read_free
1000089a0:	mov	qword ptr [r13 + 0xc0], rbx
1000089a7:	test	byte ptr [r13 + 0x25], 0x10
1000089ac:	je	0x1000089e1
1000089ae:	mov	rax, qword ptr [rip + 0x365b] ## literal pool symbol address: ___stderrp
1000089b5:	mov	rbx, qword ptr [rax]
1000089b8:	mov	rdi, r14
1000089bb:	mov	esi, 0xffffffff
1000089c0:	call	0x100009e7a ## symbol stub for: _archive_filter_bytes
1000089c5:	mov	rdi, rax
1000089c8:	call	0x100007bbf
1000089cd:	lea	rsi, [rip + 0x3339] ## literal pool for: "Total bytes written: %s\n"
1000089d4:	mov	rdi, rbx
1000089d7:	mov	rdx, rax
1000089da:	xor	eax, eax
1000089dc:	call	0x10000a078 ## symbol stub for: _fprintf
1000089e1:	mov	rdi, r14
1000089e4:	call	0x100009fe8 ## symbol stub for: _archive_write_free
1000089e9:	add	rsp, 0x28
1000089ed:	pop	rbx
1000089ee:	pop	r12
1000089f0:	pop	r13
1000089f2:	pop	r14
1000089f4:	pop	r15
1000089f6:	pop	rbp
1000089f7:	ret
1000089f8:	mov	rdi, r12
1000089fb:	call	0x100009e6e ## symbol stub for: _archive_error_string
100008a00:	lea	rsi, [rip + 0x3376] ## literal pool for: "Error reading archive %s: %s"
100008a07:	xor	edi, edi
100008a09:	mov	rdx, r15
100008a0c:	mov	rcx, rax
100008a0f:	xor	eax, eax
100008a11:	call	0x10000989e
100008a16:	mov	rax, qword ptr [rbp - 0x40]
100008a1a:	mov	dword ptr [rax], 0x1
100008a20:	mov	rdi, r12
100008a23:	call	0x100009f5e ## symbol stub for: _archive_read_free
100008a28:	jmp	0x1000087ed
100008a2d:	lea	rsi, [rip + 0x2e3e] ## literal pool for: "%s"
100008a34:	lea	rdx, [rip + 0x329a] ## literal pool for: "Missing argument for -C"
100008a3b:	xor	edi, edi
100008a3d:	xor	eax, eax
100008a3f:	call	0x10000989e
100008a44:	jmp	0x100008a56
100008a46:	lea	rsi, [rip + 0x32a0] ## literal pool for: "Meaningless argument for -C: ''"
100008a4d:	xor	edi, edi
100008a4f:	xor	eax, eax
100008a51:	call	0x10000989e
100008a56:	mov	rax, qword ptr [rbp - 0x40]
100008a5a:	jmp	0x10000896d
100008a5f:	mov	edi, 0x1
100008a64:	call	0x10000a054 ## symbol stub for: _exit
100008a69:	mov	rdi, qword ptr [rbp - 0x38]
100008a6d:	call	0x100009e6e ## symbol stub for: _archive_error_string
100008a72:	lea	rdx, [rip + 0x2df9] ## literal pool for: "%s"
100008a79:	mov	edi, 0x1
100008a7e:	xor	esi, esi
100008a80:	mov	rcx, rax
100008a83:	xor	eax, eax
100008a85:	call	0x1000099b3
100008a8a:	lea	rdx, [rip + 0x31f2] ## literal pool for: "cannot allocate memory"
100008a91:	jmp	0x100008aa3
100008a93:	lea	rdx, [rip + 0x3200] ## literal pool for: "cannot create link resolver"
100008a9a:	jmp	0x100008aa3
100008a9c:	lea	rdx, [rip + 0x3213] ## literal pool for: "Cannot create read_disk object"
100008aa3:	mov	edi, 0x1
100008aa8:	xor	esi, esi
100008aaa:	xor	eax, eax
100008aac:	call	0x1000099b3
100008ab1:	call	0x100009d72 ## symbol stub for: ___error
100008ab6:	mov	esi, dword ptr [rax]
100008ab8:	lea	rdx, [rip + 0x3273] ## literal pool for: "Unexpected end of filename list; directory expected after -C"
100008abf:	mov	edi, 0x1
100008ac4:	jmp	0x100008aaa
100008ac6:	push	rbp
100008ac7:	mov	rbp, rsp
100008aca:	push	r15
100008acc:	push	r14
100008ace:	push	r13
100008ad0:	push	r12
100008ad2:	push	rbx
100008ad3:	push	rax
100008ad4:	mov	r14, rdi
100008ad7:	call	0x100008d34
100008adc:	mov	rdi, qword ptr [r14]
100008adf:	mov	esi, 0x202
100008ae4:	mov	edx, 0x1b6
100008ae9:	xor	eax, eax
100008aeb:	call	0x10000a0de ## symbol stub for: _open
100008af0:	mov	dword ptr [r14 + 0x88], eax
100008af7:	test	eax, eax
100008af9:	js	0x100008cba
100008aff:	call	0x100009f6a ## symbol stub for: _archive_read_new
100008b04:	mov	r15, rax
100008b07:	mov	rdi, rax
100008b0a:	call	0x100009f94 ## symbol stub for: _archive_read_support_filter_all
100008b0f:	mov	rdi, r15
100008b12:	call	0x100009fa6 ## symbol stub for: _archive_read_support_format_empty
100008b17:	mov	rdi, r15
100008b1a:	call	0x100009fb2 ## symbol stub for: _archive_read_support_format_tar
100008b1f:	mov	rdi, r15
100008b22:	call	0x100009fac ## symbol stub for: _archive_read_support_format_gnutar
100008b27:	mov	rdi, r15
100008b2a:	call	0x100008dcc
100008b2f:	mov	esi, dword ptr [r14 + 0x88]
100008b36:	mov	edx, 0x2800
100008b3b:	mov	rdi, r15
100008b3e:	call	0x100009f7c ## symbol stub for: _archive_read_open_fd
100008b43:	test	eax, eax
100008b45:	jne	0x100008cd2
100008b4b:	lea	rsi, [rbp - 0x30]
100008b4f:	mov	rdi, r15
100008b52:	call	0x100009f70 ## symbol stub for: _archive_read_next_header
100008b57:	mov	ebx, 0x30003
100008b5c:	test	eax, eax
100008b5e:	jne	0x100008b8f
100008b60:	lea	r12, [rbp - 0x30]
100008b64:	mov	rdi, r15
100008b67:	xor	esi, esi
100008b69:	call	0x100009e80 ## symbol stub for: _archive_filter_code
100008b6e:	test	eax, eax
100008b70:	jne	0x100008c91
100008b76:	mov	rdi, r15
100008b79:	call	0x100009e8c ## symbol stub for: _archive_format
100008b7e:	mov	ebx, eax
100008b80:	mov	rdi, r15
100008b83:	mov	rsi, r12
100008b86:	call	0x100009f70 ## symbol stub for: _archive_read_next_header
100008b8b:	test	eax, eax
100008b8d:	je	0x100008b64
100008b8f:	mov	rdi, r15
100008b92:	call	0x100009f64 ## symbol stub for: _archive_read_header_position
100008b97:	mov	r12, rax
100008b9a:	mov	rdi, r15
100008b9d:	call	0x100009f5e ## symbol stub for: _archive_read_free
100008ba2:	call	0x100009ff4 ## symbol stub for: _archive_write_new
100008ba7:	mov	r15, rax
100008baa:	mov	rdi, qword ptr [r14 + 0x70]
100008bae:	call	0x100004242
100008bb3:	test	rax, rax
100008bb6:	je	0x100008c0e
100008bb8:	mov	rdi, qword ptr [r14 + 0x70]
100008bbc:	call	0x100004242
100008bc1:	mov	rdi, r15
100008bc4:	mov	rsi, rax
100008bc7:	call	0x10000a018 ## symbol stub for: _archive_write_set_format_by_name
100008bcc:	mov	r13d, 0xff0000
100008bd2:	and	ebx, r13d
100008bd5:	mov	rdi, r15
100008bd8:	call	0x100009e8c ## symbol stub for: _archive_format
100008bdd:	cmp	ebx, 0x60000
100008be3:	je	0x100008c24
100008be5:	and	eax, r13d
100008be8:	cmp	ebx, eax
100008bea:	je	0x100008c24
100008bec:	mov	rdi, qword ptr [r14 + 0x70]
100008bf0:	call	0x100004242
100008bf5:	mov	r8, qword ptr [r14]
100008bf8:	lea	rdx, [rip + 0x3012] ## literal pool for: "Format %s is incompatible with the archive %s."
100008bff:	mov	edi, 0x1
100008c04:	xor	esi, esi
100008c06:	mov	rcx, rax
100008c09:	jmp	0x100008cfb
100008c0e:	cmp	ebx, 0x60000
100008c14:	mov	esi, 0x30003
100008c19:	cmovne	esi, ebx
100008c1c:	mov	rdi, r15
100008c1f:	call	0x10000a012 ## symbol stub for: _archive_write_set_format
100008c24:	mov	edi, dword ptr [r14 + 0x88]
100008c2b:	mov	rsi, r12
100008c2e:	xor	edx, edx
100008c30:	call	0x10000a0b4 ## symbol stub for: _lseek
100008c35:	test	rax, rax
100008c38:	js	0x100008d02
100008c3e:	mov	rdi, r14
100008c41:	mov	rsi, r15
100008c44:	call	0x1000081d2
100008c49:	mov	esi, dword ptr [r14 + 0x88]
100008c50:	mov	rdi, r15
100008c53:	call	0x100009ffa ## symbol stub for: _archive_write_open_fd
100008c58:	mov	rdi, r15
100008c5b:	test	eax, eax
100008c5d:	jne	0x100008d17
100008c63:	mov	rsi, r14
100008c66:	call	0x1000082bd
100008c6b:	mov	edi, dword ptr [r14 + 0x88]
100008c72:	call	0x10000a04e ## symbol stub for: _close
100008c77:	mov	dword ptr [r14 + 0x88], 0xffffffff
100008c82:	add	rsp, 0x8
100008c86:	pop	rbx
100008c87:	pop	r12
100008c89:	pop	r13
100008c8b:	pop	r14
100008c8d:	pop	r15
100008c8f:	pop	rbp
100008c90:	ret
100008c91:	mov	rdi, r15
100008c94:	call	0x100009f5e ## symbol stub for: _archive_read_free
100008c99:	mov	edi, dword ptr [r14 + 0x88]
100008ca0:	call	0x10000a04e ## symbol stub for: _close
100008ca5:	lea	rdx, [rip + 0x2f40] ## literal pool for: "Cannot append to compressed archive."
100008cac:	mov	edi, 0x1
100008cb1:	xor	esi, esi
100008cb3:	xor	eax, eax
100008cb5:	call	0x1000099b3
100008cba:	call	0x100009d72 ## symbol stub for: ___error
100008cbf:	mov	esi, dword ptr [rax]
100008cc1:	mov	rcx, qword ptr [r14]
100008cc4:	lea	rdx, [rip + 0x2ef8] ## literal pool for: "Cannot open %s"
100008ccb:	mov	edi, 0x1
100008cd0:	jmp	0x100008d2d
100008cd2:	mov	rdi, r15
100008cd5:	call	0x100009e68 ## symbol stub for: _archive_errno
100008cda:	mov	ebx, eax
100008cdc:	mov	r14, qword ptr [r14]
100008cdf:	mov	rdi, r15
100008ce2:	call	0x100009e6e ## symbol stub for: _archive_error_string
100008ce7:	lea	rdx, [rip + 0x2ee4] ## literal pool for: "Can't read archive %s: %s"
100008cee:	mov	edi, 0x1
100008cf3:	mov	esi, ebx
100008cf5:	mov	rcx, r14
100008cf8:	mov	r8, rax
100008cfb:	xor	eax, eax
100008cfd:	call	0x1000099b3
100008d02:	call	0x100009d72 ## symbol stub for: ___error
100008d07:	mov	esi, dword ptr [rax]
100008d09:	lea	rdx, [rip + 0x2f30] ## literal pool for: "Could not seek to archive end"
100008d10:	mov	edi, 0x1
100008d15:	jmp	0x100008cb3
100008d17:	call	0x100009e6e ## symbol stub for: _archive_error_string
100008d1c:	lea	rdx, [rip + 0x2b4f] ## literal pool for: "%s"
100008d23:	mov	edi, 0x1
100008d28:	xor	esi, esi
100008d2a:	mov	rcx, rax
100008d2d:	xor	eax, eax
100008d2f:	call	0x1000099b3
100008d34:	push	rbp
100008d35:	mov	rbp, rsp
100008d38:	push	rbx
100008d39:	sub	rsp, 0x98
100008d40:	mov	rbx, rdi
100008d43:	mov	rax, qword ptr [rdi + 0x90]
100008d4a:	cmp	qword ptr [rax], 0x0
100008d4e:	jne	0x100008d57
100008d50:	cmp	qword ptr [rbx + 0x10], 0x0
100008d55:	je	0x100008d9f
100008d57:	mov	rdi, qword ptr [rbx]
100008d5a:	test	rdi, rdi
100008d5d:	je	0x100008d96
100008d5f:	lea	rsi, [rbp - 0x98]
100008d66:	call	0x10000a126 ## symbol stub for: _stat$INODE64
100008d6b:	test	eax, eax
100008d6d:	jne	0x100008d8c
100008d6f:	movzx	eax, word ptr [rbp - 0x94]
100008d76:	and	eax, 0xf000
100008d7b:	cmp	eax, 0x8000
100008d80:	je	0x100008d8c
100008d82:	movzx	eax, ax
100008d85:	cmp	eax, 0x6000
100008d8a:	jne	0x100008db4
100008d8c:	add	rsp, 0x98
100008d93:	pop	rbx
100008d94:	pop	rbp
100008d95:	ret
100008d96:	lea	rdx, [rip + 0x30a4] ## literal pool for: "Cannot append to stdout."
100008d9d:	jmp	0x100008da6
100008d9f:	lea	rdx, [rip + 0x2daf] ## literal pool for: "no files or directories specified"
100008da6:	mov	edi, 0x1
100008dab:	xor	esi, esi
100008dad:	xor	eax, eax
100008daf:	call	0x1000099b3
100008db4:	mov	rcx, qword ptr [rbx]
100008db7:	lea	rdx, [rip + 0x309c] ## literal pool for: "Cannot append to %s: not a regular file."
100008dbe:	mov	edi, 0x1
100008dc3:	xor	esi, esi
100008dc5:	xor	eax, eax
100008dc7:	call	0x1000099b3
100008dcc:	push	rbp
100008dcd:	mov	rbp, rsp
100008dd0:	push	r15
100008dd2:	push	r14
100008dd4:	push	r12
100008dd6:	push	rbx
100008dd7:	mov	r14, rdi
100008dda:	lea	rdi, [rip + 0x2a60] ## literal pool for: "TAR_READER_OPTIONS"
100008de1:	call	0x10000a09c ## symbol stub for: _getenv
100008de6:	test	rax, rax
100008de9:	je	0x100008e5c
100008deb:	mov	r15, rax
100008dee:	mov	rdi, rax
100008df1:	call	0x10000a15c ## symbol stub for: _strlen
100008df6:	mov	r12, rax
100008df9:	lea	rdi, [rax + 0x1e]
100008dfd:	call	0x10000a0ba ## symbol stub for: _malloc
100008e02:	test	rax, rax
100008e05:	je	0x100008e65
100008e07:	mov	rbx, rax
100008e0a:	inc	r12
100008e0d:	movups	xmm0, xmmword ptr [rip + 0x2a4d] ## literal pool for: "g_module_name__,"
100008e14:	movups	xmmword ptr [rax + 0xd], xmm0
100008e18:	movups	xmm0, xmmword ptr [rip + 0x2a35] ## literal pool for: "__ignore_wrong_module_name__,"
100008e1f:	movups	xmmword ptr [rax], xmm0
100008e22:	mov	rdi, rax
100008e25:	mov	rsi, r15
100008e28:	mov	rdx, r12
100008e2b:	call	0x10000a0cc ## symbol stub for: _memcpy
100008e30:	mov	rdi, r14
100008e33:	mov	rsi, rbx
100008e36:	call	0x100009f88 ## symbol stub for: _archive_read_set_options
100008e3b:	mov	r15d, eax
100008e3e:	mov	rdi, rbx
100008e41:	call	0x10000a090 ## symbol stub for: _free
100008e46:	mov	rdi, r14
100008e49:	cmp	r15d, -0x15
100008e4d:	jle	0x100008e7f
100008e4f:	pop	rbx
100008e50:	pop	r12
100008e52:	pop	r14
100008e54:	pop	r15
100008e56:	pop	rbp
100008e57:	jmp	0x100009db4 ## symbol stub for: _archive_clear_error
100008e5c:	pop	rbx
100008e5d:	pop	r12
100008e5f:	pop	r14
100008e61:	pop	r15
100008e63:	pop	rbp
100008e64:	ret
100008e65:	call	0x100009d72 ## symbol stub for: ___error
100008e6a:	mov	esi, dword ptr [rax]
100008e6c:	lea	rdx, [rip + 0x1c1a] ## literal pool for: "Out of memory"
100008e73:	mov	edi, 0x1
100008e78:	xor	eax, eax
100008e7a:	call	0x1000099b3
100008e7f:	call	0x100009e6e ## symbol stub for: _archive_error_string
100008e84:	lea	rdx, [rip + 0x29e7] ## literal pool for: "%s"
100008e8b:	mov	edi, 0x1
100008e90:	xor	esi, esi
100008e92:	mov	rcx, rax
100008e95:	xor	eax, eax
100008e97:	call	0x1000099b3
100008e9c:	push	rbp
100008e9d:	mov	rbp, rsp
100008ea0:	push	r15
100008ea2:	push	r14
100008ea4:	push	r13
100008ea6:	push	r12
100008ea8:	push	rbx
100008ea9:	sub	rsp, 0x18
100008ead:	mov	r14, rdi
100008eb0:	lea	rax, [rbp - 0x40]
100008eb4:	mov	qword ptr [rdi + 0xd0], rax
100008ebb:	xorps	xmm0, xmm0
100008ebe:	movaps	xmmword ptr [rax], xmm0
100008ec1:	call	0x100008d34
100008ec6:	mov	rdi, qword ptr [r14]
100008ec9:	mov	esi, 0x2
100008ece:	xor	eax, eax
100008ed0:	call	0x10000a0de ## symbol stub for: _open
100008ed5:	mov	dword ptr [r14 + 0x88], eax
100008edc:	test	eax, eax
100008ede:	js	0x1000090c3
100008ee4:	call	0x100009f6a ## symbol stub for: _archive_read_new
100008ee9:	mov	r12, rax
100008eec:	mov	rdi, rax
100008eef:	call	0x100009f94 ## symbol stub for: _archive_read_support_filter_all
100008ef4:	mov	rdi, r12
100008ef7:	call	0x100009fb2 ## symbol stub for: _archive_read_support_format_tar
100008efc:	mov	rdi, r12
100008eff:	call	0x100009fac ## symbol stub for: _archive_read_support_format_gnutar
100008f04:	mov	rdi, r12
100008f07:	call	0x100008dcc
100008f0c:	mov	esi, dword ptr [r14 + 0x88]
100008f13:	movsxd	rdx, dword ptr [r14 + 0x18]
100008f17:	mov	rdi, r12
100008f1a:	call	0x100009f7c ## symbol stub for: _archive_read_open_fd
100008f1f:	test	eax, eax
100008f21:	jne	0x1000090db
100008f27:	lea	rsi, [rbp - 0x30]
100008f2b:	mov	rdi, r12
100008f2e:	call	0x100009f70 ## symbol stub for: _archive_read_next_header
100008f33:	mov	ebx, 0x30003
100008f38:	test	eax, eax
100008f3a:	jne	0x100008f88
100008f3c:	lea	r15, [rbp - 0x30]
100008f40:	mov	rdi, r12
100008f43:	xor	esi, esi
100008f45:	call	0x100009e80 ## symbol stub for: _archive_filter_code
100008f4a:	test	eax, eax
100008f4c:	jne	0x100009076
100008f52:	mov	rdi, qword ptr [r14 + 0xf8]
100008f59:	mov	rdx, qword ptr [rbp - 0x30]
100008f5d:	mov	esi, 0x112
100008f62:	call	0x100009e98 ## symbol stub for: _archive_match_exclude_entry
100008f67:	test	eax, eax
100008f69:	jne	0x10000909f
100008f6f:	mov	rdi, r12
100008f72:	call	0x100009e8c ## symbol stub for: _archive_format
100008f77:	mov	ebx, eax
100008f79:	mov	rdi, r12
100008f7c:	mov	rsi, r15
100008f7f:	call	0x100009f70 ## symbol stub for: _archive_read_next_header
100008f84:	test	eax, eax
100008f86:	je	0x100008f40
100008f88:	mov	rdi, r12
100008f8b:	call	0x100009f64 ## symbol stub for: _archive_read_header_position
100008f90:	mov	r13, rax
100008f93:	mov	rdi, r12
100008f96:	call	0x100009f5e ## symbol stub for: _archive_read_free
100008f9b:	call	0x100009ff4 ## symbol stub for: _archive_write_new
100008fa0:	mov	r15, rax
100008fa3:	mov	rdi, rax
100008fa6:	mov	esi, ebx
100008fa8:	call	0x10000a012 ## symbol stub for: _archive_write_set_format
100008fad:	mov	esi, dword ptr [r14 + 0x18]
100008fb1:	mov	rdi, r15
100008fb4:	call	0x10000a00c ## symbol stub for: _archive_write_set_bytes_per_block
100008fb9:	mov	esi, dword ptr [r14 + 0x1c]
100008fbd:	mov	rdi, r15
100008fc0:	call	0x10000a006 ## symbol stub for: _archive_write_set_bytes_in_last_block
100008fc5:	mov	edi, dword ptr [r14 + 0x88]
100008fcc:	mov	rsi, r13
100008fcf:	xor	edx, edx
100008fd1:	call	0x10000a0b4 ## symbol stub for: _lseek
100008fd6:	test	rax, rax
100008fd9:	js	0x100009101
100008fdf:	mov	rdi, r14
100008fe2:	mov	rsi, r15
100008fe5:	call	0x1000081d2
100008fea:	mov	esi, dword ptr [r14 + 0x88]
100008ff1:	mov	rdi, r15
100008ff4:	call	0x100009ffa ## symbol stub for: _archive_write_open_fd
100008ff9:	mov	rdi, r15
100008ffc:	test	eax, eax
100008ffe:	jne	0x100009116
100009004:	mov	rsi, r14
100009007:	call	0x1000082bd
10000900c:	mov	edi, dword ptr [r14 + 0x88]
100009013:	call	0x10000a04e ## symbol stub for: _close
100009018:	mov	dword ptr [r14 + 0x88], 0xffffffff
100009023:	mov	rax, qword ptr [r14 + 0xd0]
10000902a:	mov	rcx, qword ptr [rax]
10000902d:	test	rcx, rcx
100009030:	je	0x10000905f
100009032:	mov	rbx, qword ptr [rcx]
100009035:	mov	rdi, qword ptr [rcx + 0x18]
100009039:	call	0x10000a090 ## symbol stub for: _free
10000903e:	mov	rax, qword ptr [r14 + 0xd0]
100009045:	mov	rdi, qword ptr [rax]
100009048:	call	0x10000a090 ## symbol stub for: _free
10000904d:	mov	rax, qword ptr [r14 + 0xd0]
100009054:	mov	qword ptr [rax], rbx
100009057:	mov	rcx, rbx
10000905a:	test	rbx, rbx
10000905d:	jne	0x100009032
10000905f:	mov	qword ptr [rax + 0x8], 0x0
100009067:	add	rsp, 0x18
10000906b:	pop	rbx
10000906c:	pop	r12
10000906e:	pop	r13
100009070:	pop	r14
100009072:	pop	r15
100009074:	pop	rbp
100009075:	ret
100009076:	mov	rdi, r12
100009079:	call	0x100009f5e ## symbol stub for: _archive_read_free
10000907e:	mov	edi, dword ptr [r14 + 0x88]
100009085:	call	0x10000a04e ## symbol stub for: _close
10000908a:	lea	rdx, [rip + 0x2b5b] ## literal pool for: "Cannot append to compressed archive."
100009091:	mov	edi, 0x1
100009096:	xor	esi, esi
100009098:	xor	eax, eax
10000909a:	call	0x1000099b3
10000909f:	mov	rdi, qword ptr [r14 + 0xf8]
1000090a6:	call	0x100009e6e ## symbol stub for: _archive_error_string
1000090ab:	lea	rdx, [rip + 0x1add] ## literal pool for: "Error : %s"
1000090b2:	mov	edi, 0x1
1000090b7:	xor	esi, esi
1000090b9:	mov	rcx, rax
1000090bc:	xor	eax, eax
1000090be:	call	0x1000099b3
1000090c3:	call	0x100009d72 ## symbol stub for: ___error
1000090c8:	mov	esi, dword ptr [rax]
1000090ca:	mov	rcx, qword ptr [r14]
1000090cd:	lea	rdx, [rip + 0x2aef] ## literal pool for: "Cannot open %s"
1000090d4:	mov	edi, 0x1
1000090d9:	jmp	0x1000090bc
1000090db:	mov	rbx, qword ptr [r14]
1000090de:	mov	rdi, r12
1000090e1:	call	0x100009e6e ## symbol stub for: _archive_error_string
1000090e6:	lea	rdx, [rip + 0x2b71] ## literal pool for: "Can't open %s: %s"
1000090ed:	mov	edi, 0x1
1000090f2:	xor	esi, esi
1000090f4:	mov	rcx, rbx
1000090f7:	mov	r8, rax
1000090fa:	xor	eax, eax
1000090fc:	call	0x1000099b3
100009101:	call	0x100009d72 ## symbol stub for: ___error
100009106:	mov	esi, dword ptr [rax]
100009108:	lea	rdx, [rip + 0x2b31] ## literal pool for: "Could not seek to archive end"
10000910f:	mov	edi, 0x1
100009114:	jmp	0x100009098
100009116:	call	0x100009e6e ## symbol stub for: _archive_error_string
10000911b:	lea	rdx, [rip + 0x2750] ## literal pool for: "%s"
100009122:	jmp	0x1000090b2
100009124:	push	rbp
100009125:	mov	rbp, rsp
100009128:	push	r15
10000912a:	push	r14
10000912c:	push	rbx
10000912d:	push	rax
10000912e:	cmp	byte ptr [rsi + 0x24], 0x0
100009132:	js	0x10000917b
100009134:	mov	r14, rdx
100009137:	mov	rbx, rsi
10000913a:	mov	r15, rdi
10000913d:	call	0x100009f04 ## symbol stub for: _archive_read_disk_can_descend
100009142:	test	eax, eax
100009144:	je	0x10000917b
100009146:	test	byte ptr [rbx + 0x24], 0x20
10000914a:	je	0x100009169
10000914c:	mov	rdi, r14
10000914f:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
100009154:	lea	rdi, [rip + 0x2bcb] ## literal pool for: "add '%s'"
10000915b:	mov	rsi, rax
10000915e:	xor	eax, eax
100009160:	call	0x100007568
100009165:	test	eax, eax
100009167:	je	0x10000917b
100009169:	mov	rdi, r15
10000916c:	add	rsp, 0x8
100009170:	pop	rbx
100009171:	pop	r14
100009173:	pop	r15
100009175:	pop	rbp
100009176:	jmp	0x100009f0a ## symbol stub for: _archive_read_disk_descend
10000917b:	add	rsp, 0x8
10000917f:	pop	rbx
100009180:	pop	r14
100009182:	pop	r15
100009184:	pop	rbp
100009185:	ret
100009186:	push	rbp
100009187:	mov	rbp, rsp
10000918a:	push	r15
10000918c:	push	r14
10000918e:	push	rbx
10000918f:	push	rax
100009190:	mov	r14, rdi
100009193:	mov	eax, dword ptr [rsi + 0x24]
100009196:	test	al, 0x20
100009198:	je	0x1000091c0
10000919a:	mov	rbx, rsi
10000919d:	mov	rdi, rdx
1000091a0:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
1000091a5:	lea	rdi, [rip + 0x2b7a] ## literal pool for: "add '%s'"
1000091ac:	xor	r15d, r15d
1000091af:	mov	rsi, rax
1000091b2:	xor	eax, eax
1000091b4:	call	0x100007568
1000091b9:	test	eax, eax
1000091bb:	je	0x1000091de
1000091bd:	mov	eax, dword ptr [rbx + 0x24]
1000091c0:	mov	r15d, 0x1
1000091c6:	test	al, al
1000091c8:	js	0x1000091de
1000091ca:	mov	rdi, r14
1000091cd:	call	0x100009f04 ## symbol stub for: _archive_read_disk_can_descend
1000091d2:	test	eax, eax
1000091d4:	je	0x1000091de
1000091d6:	mov	rdi, r14
1000091d9:	call	0x100009f0a ## symbol stub for: _archive_read_disk_descend
1000091de:	mov	eax, r15d
1000091e1:	add	rsp, 0x8
1000091e5:	pop	rbx
1000091e6:	pop	r14
1000091e8:	pop	r15
1000091ea:	pop	rbp
1000091eb:	ret
1000091ec:	push	rbp
1000091ed:	mov	rbp, rsp
1000091f0:	push	r15
1000091f2:	push	r14
1000091f4:	push	r13
1000091f6:	push	r12
1000091f8:	push	rbx
1000091f9:	sub	rsp, 0x18
1000091fd:	mov	r15, rsi
100009200:	mov	rbx, rdi
100009203:	mov	r14, qword ptr [rdi + 0xc0]
10000920a:	xor	eax, eax
10000920c:	mov	qword ptr [rbp - 0x30], rax
100009210:	mov	qword ptr [rbp - 0x38], rax
100009214:	mov	rdi, r14
100009217:	mov	rsi, rdx
10000921a:	call	0x100009f1c ## symbol stub for: _archive_read_disk_open
10000921f:	test	eax, eax
100009221:	je	0x100009259
100009223:	mov	rdi, r14
100009226:	call	0x100009e68 ## symbol stub for: _archive_errno
10000922b:	mov	r15d, eax
10000922e:	mov	rdi, r14
100009231:	call	0x100009e6e ## symbol stub for: _archive_error_string
100009236:	lea	rsi, [rip + 0x2635] ## literal pool for: "%s"
10000923d:	mov	edi, r15d
100009240:	mov	rdx, rax
100009243:	xor	eax, eax
100009245:	call	0x10000989e
10000924a:	mov	dword ptr [rbx + 0xb4], 0x1
100009254:	jmp	0x100009475
100009259:	mov	dword ptr [rbx + 0xf0], 0xffffffff
100009263:	xor	edi, edi
100009265:	call	0x100009dd2 ## symbol stub for: _archive_entry_free
10000926a:	call	0x100009e08 ## symbol stub for: _archive_entry_new
10000926f:	mov	qword ptr [rbp - 0x30], rax
100009273:	mov	rdi, r14
100009276:	mov	rsi, rax
100009279:	call	0x100009f76 ## symbol stub for: _archive_read_next_header2
10000927e:	test	eax, eax
100009280:	je	0x1000092d3
100009282:	mov	r12d, eax
100009285:	cmp	eax, 0x1
100009288:	je	0x100009464
10000928e:	mov	rdi, r14
100009291:	call	0x100009e68 ## symbol stub for: _archive_errno
100009296:	mov	r13d, eax
100009299:	mov	rdi, r14
10000929c:	call	0x100009e6e ## symbol stub for: _archive_error_string
1000092a1:	mov	edi, r13d
1000092a4:	lea	rsi, [rip + 0x25c7] ## literal pool for: "%s"
1000092ab:	mov	rdx, rax
1000092ae:	xor	eax, eax
1000092b0:	call	0x10000989e
1000092b5:	cmp	r12d, -0x19
1000092b9:	je	0x10000945a
1000092bf:	cmp	r12d, -0x1e
1000092c3:	je	0x10000945a
1000092c9:	cmp	r12d, -0x14
1000092cd:	jl	0x100009451
1000092d3:	mov	esi, dword ptr [rbx + 0x40]
1000092d6:	test	esi, esi
1000092d8:	js	0x100009309
1000092da:	mov	rdi, qword ptr [rbp - 0x30]
1000092de:	call	0x100009e38 ## symbol stub for: _archive_entry_set_uid
1000092e3:	cmp	qword ptr [rbx + 0x48], 0x0
1000092e8:	jne	0x100009309
1000092ea:	mov	r12, qword ptr [rbp - 0x30]
1000092ee:	mov	rdi, qword ptr [rbx + 0xc0]
1000092f5:	movsxd	rsi, dword ptr [rbx + 0x40]
1000092f9:	call	0x100009f4c ## symbol stub for: _archive_read_disk_uname
1000092fe:	mov	rdi, r12
100009301:	mov	rsi, rax
100009304:	call	0x100009e3e ## symbol stub for: _archive_entry_set_uname
100009309:	mov	esi, dword ptr [rbx + 0x34]
10000930c:	test	esi, esi
10000930e:	js	0x10000933f
100009310:	mov	rdi, qword ptr [rbp - 0x30]
100009314:	call	0x100009e26 ## symbol stub for: _archive_entry_set_gid
100009319:	cmp	qword ptr [rbx + 0x38], 0x0
10000931e:	jne	0x10000933f
100009320:	mov	r12, qword ptr [rbp - 0x30]
100009324:	mov	rdi, qword ptr [rbx + 0xc0]
10000932b:	movsxd	rsi, dword ptr [rbx + 0x34]
10000932f:	call	0x100009f10 ## symbol stub for: _archive_read_disk_gname
100009334:	mov	rdi, r12
100009337:	mov	rsi, rax
10000933a:	call	0x100009e2c ## symbol stub for: _archive_entry_set_gname
10000933f:	mov	rsi, qword ptr [rbx + 0x48]
100009343:	test	rsi, rsi
100009346:	je	0x100009351
100009348:	mov	rdi, qword ptr [rbp - 0x30]
10000934c:	call	0x100009e3e ## symbol stub for: _archive_entry_set_uname
100009351:	mov	rsi, qword ptr [rbx + 0x38]
100009355:	test	rsi, rsi
100009358:	je	0x100009363
10000935a:	mov	rdi, qword ptr [rbp - 0x30]
10000935e:	call	0x100009e2c ## symbol stub for: _archive_entry_set_gname
100009363:	mov	rsi, qword ptr [rbp - 0x30]
100009367:	mov	rdi, rbx
10000936a:	call	0x100007829
10000936f:	test	eax, eax
100009371:	jne	0x100009451
100009377:	mov	eax, dword ptr [rbx + 0x20]
10000937a:	cmp	eax, 0x2
10000937d:	jl	0x1000093aa
10000937f:	mov	r12, qword ptr [rip + 0x2c8a] ## literal pool symbol address: ___stderrp
100009386:	mov	rdi, qword ptr [r12]
10000938a:	lea	rsi, [rip + 0x2a13] ## literal pool for: "a "
100009391:	xor	eax, eax
100009393:	call	0x1000070ec
100009398:	mov	rsi, qword ptr [r12]
10000939c:	mov	rdx, qword ptr [rbp - 0x30]
1000093a0:	mov	rdi, rbx
1000093a3:	call	0x100007ca6
1000093a8:	jmp	0x1000093d6
1000093aa:	cmp	eax, 0x1
1000093ad:	jne	0x1000093d6
1000093af:	mov	rax, qword ptr [rip + 0x2c5a] ## literal pool symbol address: ___stderrp
1000093b6:	mov	r12, qword ptr [rax]
1000093b9:	mov	rdi, qword ptr [rbp - 0x30]
1000093bd:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
1000093c2:	mov	rdi, r12
1000093c5:	lea	rsi, [rip + 0x29db] ## literal pool for: "a %s"
1000093cc:	mov	rdx, rax
1000093cf:	xor	eax, eax
1000093d1:	call	0x1000070ec
1000093d6:	mov	rdi, qword ptr [rbp - 0x30]
1000093da:	call	0x100009dcc ## symbol stub for: _archive_entry_filetype
1000093df:	movzx	eax, ax
1000093e2:	cmp	eax, 0x8000
1000093e7:	je	0x1000093f4
1000093e9:	mov	rdi, qword ptr [rbp - 0x30]
1000093ed:	xor	esi, esi
1000093ef:	call	0x100009e32 ## symbol stub for: _archive_entry_set_size
1000093f4:	mov	rdi, qword ptr [rbx + 0xc8]
1000093fb:	lea	rsi, [rbp - 0x30]
1000093ff:	lea	rdx, [rbp - 0x38]
100009403:	call	0x100009dea ## symbol stub for: _archive_entry_linkify
100009408:	mov	rdx, qword ptr [rbp - 0x30]
10000940c:	test	rdx, rdx
10000940f:	je	0x100009437
100009411:	mov	rdi, rbx
100009414:	mov	rsi, r15
100009417:	call	0x100009484
10000941c:	mov	rdi, qword ptr [rbp - 0x30]
100009420:	call	0x100009dd2 ## symbol stub for: _archive_entry_free
100009425:	mov	rdx, qword ptr [rbp - 0x38]
100009429:	mov	qword ptr [rbp - 0x30], rdx
10000942d:	mov	qword ptr [rbp - 0x38], 0x0
100009435:	jmp	0x10000940c
100009437:	cmp	dword ptr [rbx + 0x20], 0x0
10000943b:	je	0x100009451
10000943d:	mov	rax, qword ptr [rip + 0x2bcc] ## literal pool symbol address: ___stderrp
100009444:	mov	rsi, qword ptr [rax]
100009447:	mov	edi, 0xa
10000944c:	call	0x10000a07e ## symbol stub for: _fputc
100009451:	mov	rdi, qword ptr [rbp - 0x30]
100009455:	jmp	0x100009265
10000945a:	mov	dword ptr [rbx + 0xb4], 0x1
100009464:	mov	rdi, qword ptr [rbp - 0x30]
100009468:	call	0x100009dd2 ## symbol stub for: _archive_entry_free
10000946d:	mov	rdi, r14
100009470:	call	0x100009eec ## symbol stub for: _archive_read_close
100009475:	add	rsp, 0x18
100009479:	pop	rbx
10000947a:	pop	r12
10000947c:	pop	r13
10000947e:	pop	r14
100009480:	pop	r15
100009482:	pop	rbp
100009483:	ret
100009484:	push	rbp
100009485:	mov	rbp, rsp
100009488:	push	r15
10000948a:	push	r14
10000948c:	push	r13
10000948e:	push	r12
100009490:	push	rbx
100009491:	push	rax
100009492:	mov	r12, rdx
100009495:	mov	r14, rsi
100009498:	mov	r15, rdi
10000949b:	mov	rdi, rsi
10000949e:	mov	rsi, rdx
1000094a1:	call	0x100009fee ## symbol stub for: _archive_write_header
1000094a6:	test	eax, eax
1000094a8:	je	0x10000955e
1000094ae:	mov	ebx, eax
1000094b0:	mov	eax, dword ptr [r15 + 0x20]
1000094b4:	cmp	eax, 0x2
1000094b7:	jl	0x1000094fe
1000094b9:	mov	r13, qword ptr [rip + 0x2b50] ## literal pool symbol address: ___stderrp
1000094c0:	mov	rdi, qword ptr [r13]
1000094c4:	lea	rsi, [rip + 0x28d9] ## literal pool for: "a "
1000094cb:	xor	eax, eax
1000094cd:	call	0x1000070ec
1000094d2:	mov	rsi, qword ptr [r13]
1000094d6:	mov	rdi, r15
1000094d9:	mov	rdx, r12
1000094dc:	call	0x100007ca6
1000094e1:	mov	rdi, r14
1000094e4:	call	0x100009e6e ## symbol stub for: _archive_error_string
1000094e9:	lea	rsi, [rip + 0x242e] ## literal pool for: ": %s"
1000094f0:	xor	edi, edi
1000094f2:	mov	rdx, rax
1000094f5:	xor	eax, eax
1000094f7:	call	0x10000989e
1000094fc:	jmp	0x100009554
1000094fe:	cmp	eax, 0x1
100009501:	jne	0x10000952e
100009503:	mov	rdi, r12
100009506:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
10000950b:	mov	r13, rax
10000950e:	mov	rdi, r14
100009511:	call	0x100009e6e ## symbol stub for: _archive_error_string
100009516:	lea	rsi, [rip + 0x2480] ## literal pool for: "%s: %s"
10000951d:	xor	edi, edi
10000951f:	mov	rdx, r13
100009522:	mov	rcx, rax
100009525:	xor	eax, eax
100009527:	call	0x10000989e
10000952c:	jmp	0x100009554
10000952e:	mov	rax, qword ptr [rip + 0x2adb] ## literal pool symbol address: ___stderrp
100009535:	mov	r13, qword ptr [rax]
100009538:	mov	rdi, r14
10000953b:	call	0x100009e6e ## symbol stub for: _archive_error_string
100009540:	lea	rsi, [rip + 0x23d7] ## literal pool for: ": %s"
100009547:	mov	rdi, r13
10000954a:	mov	rdx, rax
10000954d:	xor	eax, eax
10000954f:	call	0x10000a078 ## symbol stub for: _fprintf
100009554:	cmp	ebx, -0x1e
100009557:	je	0x100009593
100009559:	cmp	ebx, -0x14
10000955c:	jl	0x100009584
10000955e:	mov	rdi, r12
100009561:	call	0x100009e44 ## symbol stub for: _archive_entry_size
100009566:	test	rax, rax
100009569:	jle	0x100009584
10000956b:	mov	rdx, qword ptr [r15 + 0xc0]
100009572:	mov	rdi, r15
100009575:	mov	rsi, r14
100009578:	mov	rcx, r12
10000957b:	call	0x1000096d2
100009580:	test	eax, eax
100009582:	jne	0x100009593
100009584:	add	rsp, 0x8
100009588:	pop	rbx
100009589:	pop	r12
10000958b:	pop	r13
10000958d:	pop	r14
10000958f:	pop	r15
100009591:	pop	rbp
100009592:	ret
100009593:	mov	edi, 0x1
100009598:	call	0x10000a054 ## symbol stub for: _exit
10000959d:	push	rbp
10000959e:	mov	rbp, rsp
1000095a1:	push	r15
1000095a3:	push	r14
1000095a5:	push	r13
1000095a7:	push	r12
1000095a9:	push	rbx
1000095aa:	sub	rsp, 0x18
1000095ae:	mov	qword ptr [rbp - 0x30], rcx
1000095b2:	mov	qword ptr [rbp - 0x38], rdx
1000095b6:	mov	r14, rsi
1000095b9:	cmp	dword ptr [rdi + 0x20], 0x0
1000095bd:	je	0x1000095d3
1000095bf:	mov	rax, qword ptr [rip + 0x2a4a] ## literal pool symbol address: ___stderrp
1000095c6:	mov	rsi, qword ptr [rax]
1000095c9:	mov	edi, 0xa
1000095ce:	call	0x10000a07e ## symbol stub for: _fputc
1000095d3:	mov	rdi, r14
1000095d6:	mov	esi, 0xffffffff
1000095db:	call	0x100009e7a ## symbol stub for: _archive_filter_bytes
1000095e0:	mov	r13, rax
1000095e3:	xor	r12d, r12d
1000095e6:	mov	rdi, r14
1000095e9:	xor	esi, esi
1000095eb:	call	0x100009e7a ## symbol stub for: _archive_filter_bytes
1000095f0:	mov	rbx, rax
1000095f3:	mov	rax, qword ptr [rip + 0x2a16] ## literal pool symbol address: ___stderrp
1000095fa:	mov	r15, qword ptr [rax]
1000095fd:	mov	rdi, r14
100009600:	call	0x100009e74 ## symbol stub for: _archive_file_count
100009605:	mov	r14d, eax
100009608:	mov	rdi, rbx
10000960b:	call	0x100007bbf
100009610:	lea	rsi, [rip + 0x2795] ## literal pool for: "In: %d files, %s bytes;"
100009617:	mov	rdi, r15
10000961a:	mov	edx, r14d
10000961d:	mov	rcx, rax
100009620:	xor	eax, eax
100009622:	call	0x10000a078 ## symbol stub for: _fprintf
100009627:	mov	rax, rbx
10000962a:	sub	rax, r13
10000962d:	jbe	0x10000963b
10000962f:	imul	rax, rax, 0x64
100009633:	xor	edx, edx
100009635:	div	rbx
100009638:	mov	r12, rax
10000963b:	mov	rax, qword ptr [rip + 0x29ce] ## literal pool symbol address: ___stderrp
100009642:	mov	rbx, qword ptr [rax]
100009645:	mov	r15, rax
100009648:	mov	rdi, r13
10000964b:	call	0x100007bbf
100009650:	lea	rsi, [rip + 0x276d] ## literal pool for: " Out: %s bytes, compression %d%%\n"
100009657:	mov	rdi, rbx
10000965a:	mov	rdx, rax
10000965d:	mov	ecx, r12d
100009660:	xor	eax, eax
100009662:	call	0x10000a078 ## symbol stub for: _fprintf
100009667:	mov	r14, qword ptr [r15]
10000966a:	mov	r12, r15
10000966d:	mov	rbx, qword ptr [rbp - 0x38]
100009671:	mov	rdi, rbx
100009674:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
100009679:	mov	r15, rax
10000967c:	mov	rdi, qword ptr [rbp - 0x30]
100009680:	call	0x100007bbf
100009685:	lea	rsi, [rip + 0x275a] ## literal pool for: "Current: %s (%s"
10000968c:	mov	rdi, r14
10000968f:	mov	rdx, r15
100009692:	mov	rcx, rax
100009695:	xor	eax, eax
100009697:	call	0x1000070ec
10000969c:	mov	r14, qword ptr [r12]
1000096a0:	mov	rdi, rbx
1000096a3:	call	0x100009e44 ## symbol stub for: _archive_entry_size
1000096a8:	mov	rdi, rax
1000096ab:	call	0x100007bbf
1000096b0:	lea	rsi, [rip + 0x273f] ## literal pool for: "/%s bytes)\n"
1000096b7:	mov	rdi, r14
1000096ba:	mov	rdx, rax
1000096bd:	xor	eax, eax
1000096bf:	add	rsp, 0x18
1000096c3:	pop	rbx
1000096c4:	pop	r12
1000096c6:	pop	r13
1000096c8:	pop	r14
1000096ca:	pop	r15
1000096cc:	pop	rbp
1000096cd:	jmp	0x10000a078 ## symbol stub for: _fprintf
1000096d2:	push	rbp
1000096d3:	mov	rbp, rsp
1000096d6:	push	r15
1000096d8:	push	r14
1000096da:	push	r13
1000096dc:	push	r12
1000096de:	push	rbx
1000096df:	sub	rsp, 0x38
1000096e3:	mov	r15, rcx
1000096e6:	mov	rbx, rdx
1000096e9:	mov	r12, rsi
1000096ec:	mov	r13, rdi
1000096ef:	lea	rsi, [rbp - 0x48]
1000096f3:	lea	rdx, [rbp - 0x38]
1000096f7:	lea	rcx, [rbp - 0x50]
1000096fb:	mov	rdi, rbx
1000096fe:	call	0x100009ef2 ## symbol stub for: _archive_read_data_block
100009703:	test	eax, eax
100009705:	je	0x100009735
100009707:	xor	r14d, r14d
10000970a:	cmp	eax, -0x15
10000970d:	jg	0x100009849
100009713:	mov	rdi, r12
100009716:	call	0x100009e68 ## symbol stub for: _archive_errno
10000971b:	mov	r14d, eax
10000971e:	mov	rdi, r12
100009721:	call	0x100009e6e ## symbol stub for: _archive_error_string
100009726:	lea	rsi, [rip + 0x2145] ## literal pool for: "%s"
10000972d:	mov	edi, r14d
100009730:	jmp	0x100009813
100009735:	mov	qword ptr [rbp - 0x58], rbx
100009739:	xor	eax, eax
10000973b:	mov	qword ptr [rbp - 0x30], rax
10000973f:	xor	r14d, r14d
100009742:	mov	rbx, r13
100009745:	mov	qword ptr [rbp - 0x40], r15
100009749:	call	0x10000450c
10000974e:	test	eax, eax
100009750:	je	0x100009763
100009752:	mov	rdi, rbx
100009755:	mov	rsi, r12
100009758:	mov	rdx, r15
10000975b:	mov	rcx, r14
10000975e:	call	0x10000959d
100009763:	mov	r13, qword ptr [rbp - 0x50]
100009767:	sub	r13, r14
10000976a:	jle	0x1000097c2
10000976c:	cmp	qword ptr [rbp - 0x30], 0x0
100009771:	jne	0x10000978a
100009773:	mov	rdi, qword ptr [rbx + 0xe0]
10000977a:	mov	rsi, qword ptr [rbx + 0xe8]
100009781:	mov	qword ptr [rbp - 0x30], rdi
100009785:	call	0x100009d6c ## symbol stub for: ___bzero
10000978a:	test	r13, r13
10000978d:	jle	0x1000097c2
10000978f:	mov	r15, qword ptr [rbx + 0xe8]
100009796:	cmp	r13, r15
100009799:	cmovle	r15, r13
10000979d:	mov	rdi, r12
1000097a0:	mov	rsi, qword ptr [rbp - 0x30]
1000097a4:	mov	rdx, r15
1000097a7:	call	0x100009fd0 ## symbol stub for: _archive_write_data
1000097ac:	test	rax, rax
1000097af:	js	0x100009802
1000097b1:	cmp	rax, r15
1000097b4:	jb	0x100009825
1000097b6:	add	r14, rax
1000097b9:	sub	r13, rax
1000097bc:	jg	0x10000978f
1000097be:	mov	r15, qword ptr [rbp - 0x40]
1000097c2:	mov	rsi, qword ptr [rbp - 0x48]
1000097c6:	mov	rdx, qword ptr [rbp - 0x38]
1000097ca:	mov	rdi, r12
1000097cd:	call	0x100009fd0 ## symbol stub for: _archive_write_data
1000097d2:	test	rax, rax
1000097d5:	js	0x100009802
1000097d7:	cmp	rax, qword ptr [rbp - 0x38]
1000097db:	jb	0x10000982b
1000097dd:	add	r14, rax
1000097e0:	mov	rdi, qword ptr [rbp - 0x58]
1000097e4:	lea	rsi, [rbp - 0x48]
1000097e8:	lea	rdx, [rbp - 0x38]
1000097ec:	lea	rcx, [rbp - 0x50]
1000097f0:	call	0x100009ef2 ## symbol stub for: _archive_read_data_block
1000097f5:	test	eax, eax
1000097f7:	je	0x100009749
1000097fd:	jmp	0x100009707
100009802:	mov	rdi, r12
100009805:	call	0x100009e6e ## symbol stub for: _archive_error_string
10000980a:	lea	rsi, [rip + 0x2061] ## literal pool for: "%s"
100009811:	xor	edi, edi
100009813:	mov	rdx, rax
100009816:	xor	eax, eax
100009818:	call	0x10000989e
10000981d:	mov	r14d, 0xffffffff
100009823:	jmp	0x100009849
100009825:	mov	rdi, qword ptr [rbp - 0x40]
100009829:	jmp	0x10000982e
10000982b:	mov	rdi, r15
10000982e:	call	0x100009e14 ## symbol stub for: _archive_entry_pathname
100009833:	lea	rsi, [rip + 0x25c8] ## literal pool for: "%s: Truncated write; file may have grown while being archived."
10000983a:	xor	r14d, r14d
10000983d:	xor	edi, edi
10000983f:	mov	rdx, rax
100009842:	xor	eax, eax
100009844:	call	0x10000989e
100009849:	mov	eax, r14d
10000984c:	add	rsp, 0x38
100009850:	pop	rbx
100009851:	pop	r12
100009853:	pop	r13
100009855:	pop	r14
100009857:	pop	r15
100009859:	pop	rbp
10000985a:	ret
10000985b:	push	rbp
10000985c:	mov	rbp, rsp
10000985f:	mov	rax, qword ptr [rip + 0x6d4a]
100009866:	pop	rbp
100009867:	ret
100009868:	push	rbp
100009869:	mov	rbp, rsp
10000986c:	push	rbx
10000986d:	push	rax
10000986e:	mov	rbx, rsi
100009871:	test	rdi, rdi
100009874:	cmovne	rbx, rdi
100009878:	mov	rdi, rbx
10000987b:	mov	esi, 0x2f
100009880:	call	0x10000a168 ## symbol stub for: _strrchr
100009885:	lea	rcx, [rax + 0x1]
100009889:	test	rax, rax
10000988c:	cmove	rcx, rbx
100009890:	mov	qword ptr [rip + 0x6d19], rcx
100009897:	add	rsp, 0x8
10000989b:	pop	rbx
10000989c:	pop	rbp
10000989d:	ret
10000989e:	push	rbp
10000989f:	mov	rbp, rsp
1000098a2:	sub	rsp, 0xd0
1000098a9:	test	al, al
1000098ab:	je	0x1000098d3
1000098ad:	movaps	xmmword ptr [rbp - 0xa0], xmm0
1000098b4:	movaps	xmmword ptr [rbp - 0x90], xmm1
1000098bb:	movaps	xmmword ptr [rbp - 0x80], xmm2
1000098bf:	movaps	xmmword ptr [rbp - 0x70], xmm3
1000098c3:	movaps	xmmword ptr [rbp - 0x60], xmm4
1000098c7:	movaps	xmmword ptr [rbp - 0x50], xmm5
1000098cb:	movaps	xmmword ptr [rbp - 0x40], xmm6
1000098cf:	movaps	xmmword ptr [rbp - 0x30], xmm7
1000098d3:	lea	rax, [rbp - 0xd0]
1000098da:	mov	qword ptr [rax + 0x10], rdx
1000098de:	mov	qword ptr [rax + 0x18], rcx
1000098e2:	mov	qword ptr [rax + 0x20], r8
1000098e6:	mov	qword ptr [rax + 0x28], r9
1000098ea:	mov	rcx, qword ptr [rip + 0x2717] ## literal pool symbol address: ___stack_chk_guard
1000098f1:	mov	rcx, qword ptr [rcx]
1000098f4:	mov	qword ptr [rbp - 0x8], rcx
1000098f8:	lea	rdx, [rbp - 0x20]
1000098fc:	mov	qword ptr [rdx + 0x10], rax
100009900:	lea	rax, [rbp + 0x10]
100009904:	mov	qword ptr [rdx + 0x8], rax
100009908:	movabs	rax, 0x3000000010
100009912:	mov	qword ptr [rdx], rax
100009915:	call	0x100009938
10000991a:	mov	rax, qword ptr [rip + 0x26e7] ## literal pool symbol address: ___stack_chk_guard
100009921:	mov	rax, qword ptr [rax]
100009924:	cmp	rax, qword ptr [rbp - 0x8]
100009928:	jne	0x100009933
10000992a:	add	rsp, 0xd0
100009931:	pop	rbp
100009932:	ret
100009933:	call	0x100009d84 ## symbol stub for: ___stack_chk_fail
100009938:	push	rbp
100009939:	mov	rbp, rsp
10000993c:	push	r15
10000993e:	push	r14
100009940:	push	r12
100009942:	push	rbx
100009943:	mov	r14, rdx
100009946:	mov	r15, rsi
100009949:	mov	ebx, edi
10000994b:	mov	r12, qword ptr [rip + 0x26be] ## literal pool symbol address: ___stderrp
100009952:	mov	rdi, qword ptr [r12]
100009956:	mov	rdx, qword ptr [rip + 0x6c53]
10000995d:	lea	rsi, [rip + 0x251f] ## literal pool for: "%s: "
100009964:	xor	eax, eax
100009966:	call	0x10000a078 ## symbol stub for: _fprintf
10000996b:	mov	rdi, qword ptr [r12]
10000996f:	mov	rsi, r15
100009972:	mov	rdx, r14
100009975:	call	0x10000a17a ## symbol stub for: _vfprintf
10000997a:	test	ebx, ebx
10000997c:	je	0x10000999d
10000997e:	mov	r14, qword ptr [r12]
100009982:	mov	edi, ebx
100009984:	call	0x10000a150 ## symbol stub for: _strerror
100009989:	lea	rsi, [rip + 0x1f8e] ## literal pool for: ": %s"
100009990:	mov	rdi, r14
100009993:	mov	rdx, rax
100009996:	xor	eax, eax
100009998:	call	0x10000a078 ## symbol stub for: _fprintf
10000999d:	mov	rsi, qword ptr [r12]
1000099a1:	mov	edi, 0xa
1000099a6:	pop	rbx
1000099a7:	pop	r12
1000099a9:	pop	r14
1000099ab:	pop	r15
1000099ad:	pop	rbp
1000099ae:	jmp	0x10000a07e ## symbol stub for: _fputc
1000099b3:	push	rbp
1000099b4:	mov	rbp, rsp
1000099b7:	push	rbx
1000099b8:	sub	rsp, 0xd8
1000099bf:	mov	ebx, edi
1000099c1:	test	al, al
1000099c3:	je	0x1000099e8
1000099c5:	movaps	xmmword ptr [rbp - 0x90], xmm0
1000099cc:	movaps	xmmword ptr [rbp - 0x80], xmm1
1000099d0:	movaps	xmmword ptr [rbp - 0x70], xmm2
1000099d4:	movaps	xmmword ptr [rbp - 0x60], xmm3
1000099d8:	movaps	xmmword ptr [rbp - 0x50], xmm4
1000099dc:	movaps	xmmword ptr [rbp - 0x40], xmm5
1000099e0:	movaps	xmmword ptr [rbp - 0x30], xmm6
1000099e4:	movaps	xmmword ptr [rbp - 0x20], xmm7
1000099e8:	lea	rdi, [rbp - 0xc0]
1000099ef:	mov	qword ptr [rdi + 0x18], rcx
1000099f3:	mov	qword ptr [rdi + 0x20], r8
1000099f7:	mov	qword ptr [rdi + 0x28], r9
1000099fb:	lea	rax, [rbp - 0xe0]
100009a02:	mov	qword ptr [rax + 0x10], rdi
100009a06:	lea	rcx, [rbp + 0x10]
100009a0a:	mov	qword ptr [rax + 0x8], rcx
100009a0e:	movabs	rcx, 0x3000000018
100009a18:	mov	qword ptr [rax], rcx
100009a1b:	mov	edi, esi
100009a1d:	mov	rsi, rdx
100009a20:	mov	rdx, rax
100009a23:	call	0x100009938
100009a28:	mov	edi, ebx
100009a2a:	call	0x10000a054 ## symbol stub for: _exit
100009a2f:	push	rbp
100009a30:	mov	rbp, rsp
100009a33:	push	rbx
100009a34:	push	rax
100009a35:	xor	ecx, ecx
100009a37:	call	0x10000a0f6 ## symbol stub for: _readpassphrase
100009a3c:	mov	rbx, rax
100009a3f:	test	rax, rax
100009a42:	jne	0x100009a4e
100009a44:	call	0x100009d72 ## symbol stub for: ___error
100009a49:	cmp	dword ptr [rax], 0x4
100009a4c:	jne	0x100009a58
100009a4e:	mov	rax, rbx
100009a51:	add	rsp, 0x8
100009a55:	pop	rbx
100009a56:	pop	rbp
100009a57:	ret
100009a58:	call	0x100009d72 ## symbol stub for: ___error
100009a5d:	mov	esi, dword ptr [rax]
100009a5f:	lea	rdx, [rip + 0x2422] ## literal pool for: "Couldn't read passphrase"
100009a66:	mov	edi, 0x1
100009a6b:	xor	eax, eax
100009a6d:	call	0x1000099b3
100009a72:	push	rbp
100009a73:	mov	rbp, rsp
100009a76:	push	r15
100009a78:	push	r14
100009a7a:	push	rbx
100009a7b:	push	rax
100009a7c:	mov	r15d, esi
100009a7f:	mov	r14, rdi
100009a82:	mov	edi, 0x1
100009a87:	mov	esi, 0x40
100009a8c:	call	0x10000a036 ## symbol stub for: _calloc
100009a91:	test	rax, rax
100009a94:	je	0x100009b00
100009a96:	mov	rbx, rax
100009a99:	mov	dword ptr [rax + 0x38], r15d
100009a9d:	mov	rdi, r14
100009aa0:	call	0x10000a14a ## symbol stub for: _strdup
100009aa5:	mov	qword ptr [rbx + 0x28], rax
100009aa9:	lea	rsi, [rip + 0x1262] ## literal pool for: "-"
100009ab0:	mov	rdi, r14
100009ab3:	call	0x10000a138 ## symbol stub for: _strcmp
100009ab8:	test	eax, eax
100009aba:	je	0x100009acd
100009abc:	lea	rsi, [rip + 0x23ec] ## literal pool for: "r"
100009ac3:	mov	rdi, r14
100009ac6:	call	0x10000a072 ## symbol stub for: _fopen
100009acb:	jmp	0x100009ad7
100009acd:	mov	rax, qword ptr [rip + 0x2544] ## literal pool symbol address: ___stdinp
100009ad4:	mov	rax, qword ptr [rax]
100009ad7:	mov	qword ptr [rbx], rax
100009ada:	test	rax, rax
100009add:	je	0x100009b13
100009adf:	mov	qword ptr [rbx + 0x30], 0x2000
100009ae7:	xorps	xmm0, xmm0
100009aea:	movups	xmmword ptr [rbx + 0x8], xmm0
100009aee:	movups	xmmword ptr [rbx + 0x18], xmm0
100009af2:	mov	rax, rbx
100009af5:	add	rsp, 0x8
100009af9:	pop	rbx
100009afa:	pop	r14
100009afc:	pop	r15
100009afe:	pop	rbp
100009aff:	ret
100009b00:	lea	rdx, [rip + 0x239a] ## literal pool for: "Can't open %s"
100009b07:	mov	edi, 0x1
100009b0c:	mov	esi, 0xc
100009b11:	jmp	0x100009b26
100009b13:	call	0x100009d72 ## symbol stub for: ___error
100009b18:	mov	esi, dword ptr [rax]
100009b1a:	lea	rdx, [rip + 0x2390] ## literal pool for: "Couldn't open %s"
100009b21:	mov	edi, 0x1
100009b26:	mov	rcx, r14
100009b29:	xor	eax, eax
100009b2b:	call	0x1000099b3
100009b30:	push	rbp
100009b31:	mov	rbp, rsp
100009b34:	push	r15
100009b36:	push	r14
100009b38:	push	r13
100009b3a:	push	r12
100009b3c:	push	rbx
100009b3d:	push	rax
100009b3e:	mov	rbx, rdi
100009b41:	lea	r12, [rip + 0xf16] ## literal pool for: ""
100009b48:	xor	r13d, r13d
100009b4b:	mov	rdx, qword ptr [rbx + 0x10]
100009b4f:	mov	r15, qword ptr [rbx + 0x20]
100009b53:	cmp	r15, rdx
100009b56:	jae	0x100009ba1
100009b58:	mov	r14, qword ptr [rbx + 0x18]
100009b5c:	lea	rdi, [r15 + 0x1]
100009b60:	mov	qword ptr [rbx + 0x20], rdi
100009b64:	mov	qword ptr [rbx + 0x18], rdi
100009b68:	cmp	dword ptr [rbx + 0x38], 0x0
100009b6c:	mov	rsi, r12
100009b6f:	lea	rax, [rip + 0x236e] ## literal pool for: "\015\n"
100009b76:	cmove	rsi, rax
100009b7a:	call	0x10000a144 ## symbol stub for: _strcspn
100009b7f:	add	rax, r15
100009b82:	inc	rax
100009b85:	mov	qword ptr [rbx + 0x20], rax
100009b89:	mov	byte ptr [rax], 0x0
100009b8c:	cmp	dword ptr [rbx + 0x38], 0x0
100009b90:	jne	0x100009ccc
100009b96:	cmp	byte ptr [r14], 0x0
100009b9a:	je	0x100009b4b
100009b9c:	jmp	0x100009ccc
100009ba1:	cmp	qword ptr [rbx], 0x0
100009ba5:	mov	r14, qword ptr [rbx + 0x18]
100009ba9:	je	0x100009cbe
100009baf:	mov	rdi, qword ptr [rbx + 0x8]
100009bb3:	cmp	r14, rdi
100009bb6:	jbe	0x100009bdf
100009bb8:	sub	rdx, r14
100009bbb:	mov	rsi, r14
100009bbe:	call	0x10000a0d2 ## symbol stub for: _memmove
100009bc3:	mov	rax, qword ptr [rbx + 0x8]
100009bc7:	mov	rcx, rax
100009bca:	sub	rcx, qword ptr [rbx + 0x18]
100009bce:	mov	rdi, qword ptr [rbx + 0x10]
100009bd2:	add	rdi, rcx
100009bd5:	mov	qword ptr [rbx + 0x10], rdi
100009bd9:	add	qword ptr [rbx + 0x20], rcx
100009bdd:	jmp	0x100009c2a
100009bdf:	mov	rax, qword ptr [rbx + 0x30]
100009be3:	lea	rsi, [rax + rax]
100009be7:	cmp	rsi, rax
100009bea:	jbe	0x100009cde
100009bf0:	mov	qword ptr [rbx + 0x30], rsi
100009bf4:	or	rsi, 0x1
100009bf8:	call	0x10000a0fc ## symbol stub for: _realloc
100009bfd:	test	rax, rax
100009c00:	je	0x100009cde
100009c06:	mov	rcx, qword ptr [rbx + 0x8]
100009c0a:	mov	rdi, qword ptr [rbx + 0x10]
100009c0e:	sub	rdi, rcx
100009c11:	add	rdi, rax
100009c14:	mov	qword ptr [rbx + 0x10], rdi
100009c18:	mov	rdx, qword ptr [rbx + 0x20]
100009c1c:	sub	rdx, rcx
100009c1f:	add	rdx, rax
100009c22:	mov	qword ptr [rbx + 0x20], rdx
100009c26:	mov	qword ptr [rbx + 0x8], rax
100009c2a:	mov	qword ptr [rbx + 0x18], rax
100009c2e:	add	rax, qword ptr [rbx + 0x30]
100009c32:	sub	rax, rdi
100009c35:	mov	rcx, qword ptr [rbx]
100009c38:	mov	esi, 0x1
100009c3d:	mov	rdx, rax
100009c40:	call	0x10000a08a ## symbol stub for: _fread
100009c45:	mov	rcx, qword ptr [rbx + 0x10]
100009c49:	lea	rdx, [rcx + rax]
100009c4d:	mov	qword ptr [rbx + 0x10], rdx
100009c51:	mov	byte ptr [rcx + rax], r13b
100009c55:	mov	r14, qword ptr [rbx + 0x20]
100009c59:	cmp	dword ptr [rbx + 0x38], 0x0
100009c5d:	mov	rsi, r12
100009c60:	lea	rax, [rip + 0x227d] ## literal pool for: "\015\n"
100009c67:	cmove	rsi, rax
100009c6b:	mov	rdi, r14
100009c6e:	call	0x10000a144 ## symbol stub for: _strcspn
100009c73:	lea	rcx, [r14 + rax]
100009c77:	mov	qword ptr [rbx + 0x20], rcx
100009c7b:	mov	byte ptr [r14 + rax], r13b
100009c7f:	mov	r14, qword ptr [rbx]
100009c82:	mov	rdi, r14
100009c85:	call	0x10000a066 ## symbol stub for: _ferror
100009c8a:	test	eax, eax
100009c8c:	jne	0x100009cf5
100009c8e:	mov	rdi, r14
100009c91:	call	0x10000a060 ## symbol stub for: _feof
100009c96:	test	eax, eax
100009c98:	je	0x100009b4b
100009c9e:	mov	rdi, qword ptr [rbx]
100009ca1:	mov	rax, qword ptr [rip + 0x2370] ## literal pool symbol address: ___stdinp
100009ca8:	cmp	rdi, qword ptr [rax]
100009cab:	je	0x100009cb2
100009cad:	call	0x10000a05a ## symbol stub for: _fclose
100009cb2:	mov	qword ptr [rbx], 0x0
100009cb9:	jmp	0x100009b4b
100009cbe:	cmp	r14, rdx
100009cc1:	je	0x100009cc9
100009cc3:	mov	qword ptr [rbx + 0x18], rdx
100009cc7:	jmp	0x100009ccc
100009cc9:	xor	r14d, r14d
100009ccc:	mov	rax, r14
100009ccf:	add	rsp, 0x8
100009cd3:	pop	rbx
100009cd4:	pop	r12
100009cd6:	pop	r13
100009cd8:	pop	r14
100009cda:	pop	r15
100009cdc:	pop	rbp
100009cdd:	ret
100009cde:	mov	rcx, qword ptr [rbx + 0x28]
100009ce2:	lea	rdx, [rip + 0x21d9] ## literal pool for: "Line too long in %s"
100009ce9:	mov	edi, 0x1
100009cee:	mov	esi, 0xc
100009cf3:	jmp	0x100009d0c
100009cf5:	call	0x100009d72 ## symbol stub for: ___error
100009cfa:	mov	esi, dword ptr [rax]
100009cfc:	mov	rcx, qword ptr [rbx + 0x28]
100009d00:	lea	rdx, [rip + 0x21cf] ## literal pool for: "Can't read %s"
100009d07:	mov	edi, 0x1
100009d0c:	xor	eax, eax
100009d0e:	call	0x1000099b3
100009d13:	push	rbp
100009d14:	mov	rbp, rsp
100009d17:	push	rbx
100009d18:	push	rax
100009d19:	mov	rbx, rdi
100009d1c:	mov	rdi, qword ptr [rdi + 0x8]
100009d20:	call	0x10000a090 ## symbol stub for: _free
100009d25:	mov	rdi, qword ptr [rbx + 0x28]
100009d29:	call	0x10000a090 ## symbol stub for: _free
100009d2e:	mov	rdi, rbx
100009d31:	add	rsp, 0x8
100009d35:	pop	rbx
100009d36:	pop	rbp
100009d37:	jmp	0x10000a090 ## symbol stub for: _free
100009d3c:	push	rbp
100009d3d:	mov	rbp, rsp
100009d40:	push	rbx
100009d41:	push	rax
100009d42:	mov	rbx, rdi
100009d45:	push	0x50
100009d47:	pop	rcx
100009d48:	mov	edi, esi
100009d4a:	mov	rsi, rdx
100009d4d:	mov	rdx, rbx
100009d50:	call	0x10000a108 ## symbol stub for: _regerror
100009d55:	lea	rdx, [rip + 0x1c7c] ## literal pool for: "Invalid regular expression: %s"
100009d5c:	push	0x1
100009d5e:	pop	rdi
100009d5f:	xor	esi, esi
100009d61:	mov	rcx, rbx
100009d64:	xor	eax, eax
100009d66:	call	0x1000099b3
