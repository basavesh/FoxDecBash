
wget:     file format elf64-x86-64


Disassembly of section .init:

000000000000b000 <_init>:
    b000:	endbr64 
    b004:	sub    rsp,0x8
    b008:	mov    rax,QWORD PTR [rip+0x73fa9]        # 7efb8 <__gmon_start__>
    b00f:	test   rax,rax
    b012:	je     b016 <_init+0x16>
    b014:	call   rax
    b016:	add    rsp,0x8
    b01a:	ret    

Disassembly of section .plt:

000000000000b020 <.plt>:
    b020:	push   QWORD PTR [rip+0x73892]        # 7e8b8 <_GLOBAL_OFFSET_TABLE_+0x8>
    b026:	bnd jmp QWORD PTR [rip+0x73893]        # 7e8c0 <_GLOBAL_OFFSET_TABLE_+0x10>
    b02d:	nop    DWORD PTR [rax]
    b030:	endbr64 
    b034:	push   0x0
    b039:	bnd jmp b020 <.plt>
    b03f:	nop
    b040:	endbr64 
    b044:	push   0x1
    b049:	bnd jmp b020 <.plt>
    b04f:	nop
    b050:	endbr64 
    b054:	push   0x2
    b059:	bnd jmp b020 <.plt>
    b05f:	nop
    b060:	endbr64 
    b064:	push   0x3
    b069:	bnd jmp b020 <.plt>
    b06f:	nop
    b070:	endbr64 
    b074:	push   0x4
    b079:	bnd jmp b020 <.plt>
    b07f:	nop
    b080:	endbr64 
    b084:	push   0x5
    b089:	bnd jmp b020 <.plt>
    b08f:	nop
    b090:	endbr64 
    b094:	push   0x6
    b099:	bnd jmp b020 <.plt>
    b09f:	nop
    b0a0:	endbr64 
    b0a4:	push   0x7
    b0a9:	bnd jmp b020 <.plt>
    b0af:	nop
    b0b0:	endbr64 
    b0b4:	push   0x8
    b0b9:	bnd jmp b020 <.plt>
    b0bf:	nop
    b0c0:	endbr64 
    b0c4:	push   0x9
    b0c9:	bnd jmp b020 <.plt>
    b0cf:	nop
    b0d0:	endbr64 
    b0d4:	push   0xa
    b0d9:	bnd jmp b020 <.plt>
    b0df:	nop
    b0e0:	endbr64 
    b0e4:	push   0xb
    b0e9:	bnd jmp b020 <.plt>
    b0ef:	nop
    b0f0:	endbr64 
    b0f4:	push   0xc
    b0f9:	bnd jmp b020 <.plt>
    b0ff:	nop
    b100:	endbr64 
    b104:	push   0xd
    b109:	bnd jmp b020 <.plt>
    b10f:	nop
    b110:	endbr64 
    b114:	push   0xe
    b119:	bnd jmp b020 <.plt>
    b11f:	nop
    b120:	endbr64 
    b124:	push   0xf
    b129:	bnd jmp b020 <.plt>
    b12f:	nop
    b130:	endbr64 
    b134:	push   0x10
    b139:	bnd jmp b020 <.plt>
    b13f:	nop
    b140:	endbr64 
    b144:	push   0x11
    b149:	bnd jmp b020 <.plt>
    b14f:	nop
    b150:	endbr64 
    b154:	push   0x12
    b159:	bnd jmp b020 <.plt>
    b15f:	nop
    b160:	endbr64 
    b164:	push   0x13
    b169:	bnd jmp b020 <.plt>
    b16f:	nop
    b170:	endbr64 
    b174:	push   0x14
    b179:	bnd jmp b020 <.plt>
    b17f:	nop
    b180:	endbr64 
    b184:	push   0x15
    b189:	bnd jmp b020 <.plt>
    b18f:	nop
    b190:	endbr64 
    b194:	push   0x16
    b199:	bnd jmp b020 <.plt>
    b19f:	nop
    b1a0:	endbr64 
    b1a4:	push   0x17
    b1a9:	bnd jmp b020 <.plt>
    b1af:	nop
    b1b0:	endbr64 
    b1b4:	push   0x18
    b1b9:	bnd jmp b020 <.plt>
    b1bf:	nop
    b1c0:	endbr64 
    b1c4:	push   0x19
    b1c9:	bnd jmp b020 <.plt>
    b1cf:	nop
    b1d0:	endbr64 
    b1d4:	push   0x1a
    b1d9:	bnd jmp b020 <.plt>
    b1df:	nop
    b1e0:	endbr64 
    b1e4:	push   0x1b
    b1e9:	bnd jmp b020 <.plt>
    b1ef:	nop
    b1f0:	endbr64 
    b1f4:	push   0x1c
    b1f9:	bnd jmp b020 <.plt>
    b1ff:	nop
    b200:	endbr64 
    b204:	push   0x1d
    b209:	bnd jmp b020 <.plt>
    b20f:	nop
    b210:	endbr64 
    b214:	push   0x1e
    b219:	bnd jmp b020 <.plt>
    b21f:	nop
    b220:	endbr64 
    b224:	push   0x1f
    b229:	bnd jmp b020 <.plt>
    b22f:	nop
    b230:	endbr64 
    b234:	push   0x20
    b239:	bnd jmp b020 <.plt>
    b23f:	nop
    b240:	endbr64 
    b244:	push   0x21
    b249:	bnd jmp b020 <.plt>
    b24f:	nop
    b250:	endbr64 
    b254:	push   0x22
    b259:	bnd jmp b020 <.plt>
    b25f:	nop
    b260:	endbr64 
    b264:	push   0x23
    b269:	bnd jmp b020 <.plt>
    b26f:	nop
    b270:	endbr64 
    b274:	push   0x24
    b279:	bnd jmp b020 <.plt>
    b27f:	nop
    b280:	endbr64 
    b284:	push   0x25
    b289:	bnd jmp b020 <.plt>
    b28f:	nop
    b290:	endbr64 
    b294:	push   0x26
    b299:	bnd jmp b020 <.plt>
    b29f:	nop
    b2a0:	endbr64 
    b2a4:	push   0x27
    b2a9:	bnd jmp b020 <.plt>
    b2af:	nop
    b2b0:	endbr64 
    b2b4:	push   0x28
    b2b9:	bnd jmp b020 <.plt>
    b2bf:	nop
    b2c0:	endbr64 
    b2c4:	push   0x29
    b2c9:	bnd jmp b020 <.plt>
    b2cf:	nop
    b2d0:	endbr64 
    b2d4:	push   0x2a
    b2d9:	bnd jmp b020 <.plt>
    b2df:	nop
    b2e0:	endbr64 
    b2e4:	push   0x2b
    b2e9:	bnd jmp b020 <.plt>
    b2ef:	nop
    b2f0:	endbr64 
    b2f4:	push   0x2c
    b2f9:	bnd jmp b020 <.plt>
    b2ff:	nop
    b300:	endbr64 
    b304:	push   0x2d
    b309:	bnd jmp b020 <.plt>
    b30f:	nop
    b310:	endbr64 
    b314:	push   0x2e
    b319:	bnd jmp b020 <.plt>
    b31f:	nop
    b320:	endbr64 
    b324:	push   0x2f
    b329:	bnd jmp b020 <.plt>
    b32f:	nop
    b330:	endbr64 
    b334:	push   0x30
    b339:	bnd jmp b020 <.plt>
    b33f:	nop
    b340:	endbr64 
    b344:	push   0x31
    b349:	bnd jmp b020 <.plt>
    b34f:	nop
    b350:	endbr64 
    b354:	push   0x32
    b359:	bnd jmp b020 <.plt>
    b35f:	nop
    b360:	endbr64 
    b364:	push   0x33
    b369:	bnd jmp b020 <.plt>
    b36f:	nop
    b370:	endbr64 
    b374:	push   0x34
    b379:	bnd jmp b020 <.plt>
    b37f:	nop
    b380:	endbr64 
    b384:	push   0x35
    b389:	bnd jmp b020 <.plt>
    b38f:	nop
    b390:	endbr64 
    b394:	push   0x36
    b399:	bnd jmp b020 <.plt>
    b39f:	nop
    b3a0:	endbr64 
    b3a4:	push   0x37
    b3a9:	bnd jmp b020 <.plt>
    b3af:	nop
    b3b0:	endbr64 
    b3b4:	push   0x38
    b3b9:	bnd jmp b020 <.plt>
    b3bf:	nop
    b3c0:	endbr64 
    b3c4:	push   0x39
    b3c9:	bnd jmp b020 <.plt>
    b3cf:	nop
    b3d0:	endbr64 
    b3d4:	push   0x3a
    b3d9:	bnd jmp b020 <.plt>
    b3df:	nop
    b3e0:	endbr64 
    b3e4:	push   0x3b
    b3e9:	bnd jmp b020 <.plt>
    b3ef:	nop
    b3f0:	endbr64 
    b3f4:	push   0x3c
    b3f9:	bnd jmp b020 <.plt>
    b3ff:	nop
    b400:	endbr64 
    b404:	push   0x3d
    b409:	bnd jmp b020 <.plt>
    b40f:	nop
    b410:	endbr64 
    b414:	push   0x3e
    b419:	bnd jmp b020 <.plt>
    b41f:	nop
    b420:	endbr64 
    b424:	push   0x3f
    b429:	bnd jmp b020 <.plt>
    b42f:	nop
    b430:	endbr64 
    b434:	push   0x40
    b439:	bnd jmp b020 <.plt>
    b43f:	nop
    b440:	endbr64 
    b444:	push   0x41
    b449:	bnd jmp b020 <.plt>
    b44f:	nop
    b450:	endbr64 
    b454:	push   0x42
    b459:	bnd jmp b020 <.plt>
    b45f:	nop
    b460:	endbr64 
    b464:	push   0x43
    b469:	bnd jmp b020 <.plt>
    b46f:	nop
    b470:	endbr64 
    b474:	push   0x44
    b479:	bnd jmp b020 <.plt>
    b47f:	nop
    b480:	endbr64 
    b484:	push   0x45
    b489:	bnd jmp b020 <.plt>
    b48f:	nop
    b490:	endbr64 
    b494:	push   0x46
    b499:	bnd jmp b020 <.plt>
    b49f:	nop
    b4a0:	endbr64 
    b4a4:	push   0x47
    b4a9:	bnd jmp b020 <.plt>
    b4af:	nop
    b4b0:	endbr64 
    b4b4:	push   0x48
    b4b9:	bnd jmp b020 <.plt>
    b4bf:	nop
    b4c0:	endbr64 
    b4c4:	push   0x49
    b4c9:	bnd jmp b020 <.plt>
    b4cf:	nop
    b4d0:	endbr64 
    b4d4:	push   0x4a
    b4d9:	bnd jmp b020 <.plt>
    b4df:	nop
    b4e0:	endbr64 
    b4e4:	push   0x4b
    b4e9:	bnd jmp b020 <.plt>
    b4ef:	nop
    b4f0:	endbr64 
    b4f4:	push   0x4c
    b4f9:	bnd jmp b020 <.plt>
    b4ff:	nop
    b500:	endbr64 
    b504:	push   0x4d
    b509:	bnd jmp b020 <.plt>
    b50f:	nop
    b510:	endbr64 
    b514:	push   0x4e
    b519:	bnd jmp b020 <.plt>
    b51f:	nop
    b520:	endbr64 
    b524:	push   0x4f
    b529:	bnd jmp b020 <.plt>
    b52f:	nop
    b530:	endbr64 
    b534:	push   0x50
    b539:	bnd jmp b020 <.plt>
    b53f:	nop
    b540:	endbr64 
    b544:	push   0x51
    b549:	bnd jmp b020 <.plt>
    b54f:	nop
    b550:	endbr64 
    b554:	push   0x52
    b559:	bnd jmp b020 <.plt>
    b55f:	nop
    b560:	endbr64 
    b564:	push   0x53
    b569:	bnd jmp b020 <.plt>
    b56f:	nop
    b570:	endbr64 
    b574:	push   0x54
    b579:	bnd jmp b020 <.plt>
    b57f:	nop
    b580:	endbr64 
    b584:	push   0x55
    b589:	bnd jmp b020 <.plt>
    b58f:	nop
    b590:	endbr64 
    b594:	push   0x56
    b599:	bnd jmp b020 <.plt>
    b59f:	nop
    b5a0:	endbr64 
    b5a4:	push   0x57
    b5a9:	bnd jmp b020 <.plt>
    b5af:	nop
    b5b0:	endbr64 
    b5b4:	push   0x58
    b5b9:	bnd jmp b020 <.plt>
    b5bf:	nop
    b5c0:	endbr64 
    b5c4:	push   0x59
    b5c9:	bnd jmp b020 <.plt>
    b5cf:	nop
    b5d0:	endbr64 
    b5d4:	push   0x5a
    b5d9:	bnd jmp b020 <.plt>
    b5df:	nop
    b5e0:	endbr64 
    b5e4:	push   0x5b
    b5e9:	bnd jmp b020 <.plt>
    b5ef:	nop
    b5f0:	endbr64 
    b5f4:	push   0x5c
    b5f9:	bnd jmp b020 <.plt>
    b5ff:	nop
    b600:	endbr64 
    b604:	push   0x5d
    b609:	bnd jmp b020 <.plt>
    b60f:	nop
    b610:	endbr64 
    b614:	push   0x5e
    b619:	bnd jmp b020 <.plt>
    b61f:	nop
    b620:	endbr64 
    b624:	push   0x5f
    b629:	bnd jmp b020 <.plt>
    b62f:	nop
    b630:	endbr64 
    b634:	push   0x60
    b639:	bnd jmp b020 <.plt>
    b63f:	nop
    b640:	endbr64 
    b644:	push   0x61
    b649:	bnd jmp b020 <.plt>
    b64f:	nop
    b650:	endbr64 
    b654:	push   0x62
    b659:	bnd jmp b020 <.plt>
    b65f:	nop
    b660:	endbr64 
    b664:	push   0x63
    b669:	bnd jmp b020 <.plt>
    b66f:	nop
    b670:	endbr64 
    b674:	push   0x64
    b679:	bnd jmp b020 <.plt>
    b67f:	nop
    b680:	endbr64 
    b684:	push   0x65
    b689:	bnd jmp b020 <.plt>
    b68f:	nop
    b690:	endbr64 
    b694:	push   0x66
    b699:	bnd jmp b020 <.plt>
    b69f:	nop
    b6a0:	endbr64 
    b6a4:	push   0x67
    b6a9:	bnd jmp b020 <.plt>
    b6af:	nop
    b6b0:	endbr64 
    b6b4:	push   0x68
    b6b9:	bnd jmp b020 <.plt>
    b6bf:	nop
    b6c0:	endbr64 
    b6c4:	push   0x69
    b6c9:	bnd jmp b020 <.plt>
    b6cf:	nop
    b6d0:	endbr64 
    b6d4:	push   0x6a
    b6d9:	bnd jmp b020 <.plt>
    b6df:	nop
    b6e0:	endbr64 
    b6e4:	push   0x6b
    b6e9:	bnd jmp b020 <.plt>
    b6ef:	nop
    b6f0:	endbr64 
    b6f4:	push   0x6c
    b6f9:	bnd jmp b020 <.plt>
    b6ff:	nop
    b700:	endbr64 
    b704:	push   0x6d
    b709:	bnd jmp b020 <.plt>
    b70f:	nop
    b710:	endbr64 
    b714:	push   0x6e
    b719:	bnd jmp b020 <.plt>
    b71f:	nop
    b720:	endbr64 
    b724:	push   0x6f
    b729:	bnd jmp b020 <.plt>
    b72f:	nop
    b730:	endbr64 
    b734:	push   0x70
    b739:	bnd jmp b020 <.plt>
    b73f:	nop
    b740:	endbr64 
    b744:	push   0x71
    b749:	bnd jmp b020 <.plt>
    b74f:	nop
    b750:	endbr64 
    b754:	push   0x72
    b759:	bnd jmp b020 <.plt>
    b75f:	nop
    b760:	endbr64 
    b764:	push   0x73
    b769:	bnd jmp b020 <.plt>
    b76f:	nop
    b770:	endbr64 
    b774:	push   0x74
    b779:	bnd jmp b020 <.plt>
    b77f:	nop
    b780:	endbr64 
    b784:	push   0x75
    b789:	bnd jmp b020 <.plt>
    b78f:	nop
    b790:	endbr64 
    b794:	push   0x76
    b799:	bnd jmp b020 <.plt>
    b79f:	nop
    b7a0:	endbr64 
    b7a4:	push   0x77
    b7a9:	bnd jmp b020 <.plt>
    b7af:	nop
    b7b0:	endbr64 
    b7b4:	push   0x78
    b7b9:	bnd jmp b020 <.plt>
    b7bf:	nop
    b7c0:	endbr64 
    b7c4:	push   0x79
    b7c9:	bnd jmp b020 <.plt>
    b7cf:	nop
    b7d0:	endbr64 
    b7d4:	push   0x7a
    b7d9:	bnd jmp b020 <.plt>
    b7df:	nop
    b7e0:	endbr64 
    b7e4:	push   0x7b
    b7e9:	bnd jmp b020 <.plt>
    b7ef:	nop
    b7f0:	endbr64 
    b7f4:	push   0x7c
    b7f9:	bnd jmp b020 <.plt>
    b7ff:	nop
    b800:	endbr64 
    b804:	push   0x7d
    b809:	bnd jmp b020 <.plt>
    b80f:	nop
    b810:	endbr64 
    b814:	push   0x7e
    b819:	bnd jmp b020 <.plt>
    b81f:	nop
    b820:	endbr64 
    b824:	push   0x7f
    b829:	bnd jmp b020 <.plt>
    b82f:	nop
    b830:	endbr64 
    b834:	push   0x80
    b839:	bnd jmp b020 <.plt>
    b83f:	nop
    b840:	endbr64 
    b844:	push   0x81
    b849:	bnd jmp b020 <.plt>
    b84f:	nop
    b850:	endbr64 
    b854:	push   0x82
    b859:	bnd jmp b020 <.plt>
    b85f:	nop
    b860:	endbr64 
    b864:	push   0x83
    b869:	bnd jmp b020 <.plt>
    b86f:	nop
    b870:	endbr64 
    b874:	push   0x84
    b879:	bnd jmp b020 <.plt>
    b87f:	nop
    b880:	endbr64 
    b884:	push   0x85
    b889:	bnd jmp b020 <.plt>
    b88f:	nop
    b890:	endbr64 
    b894:	push   0x86
    b899:	bnd jmp b020 <.plt>
    b89f:	nop
    b8a0:	endbr64 
    b8a4:	push   0x87
    b8a9:	bnd jmp b020 <.plt>
    b8af:	nop
    b8b0:	endbr64 
    b8b4:	push   0x88
    b8b9:	bnd jmp b020 <.plt>
    b8bf:	nop
    b8c0:	endbr64 
    b8c4:	push   0x89
    b8c9:	bnd jmp b020 <.plt>
    b8cf:	nop
    b8d0:	endbr64 
    b8d4:	push   0x8a
    b8d9:	bnd jmp b020 <.plt>
    b8df:	nop
    b8e0:	endbr64 
    b8e4:	push   0x8b
    b8e9:	bnd jmp b020 <.plt>
    b8ef:	nop
    b8f0:	endbr64 
    b8f4:	push   0x8c
    b8f9:	bnd jmp b020 <.plt>
    b8ff:	nop
    b900:	endbr64 
    b904:	push   0x8d
    b909:	bnd jmp b020 <.plt>
    b90f:	nop
    b910:	endbr64 
    b914:	push   0x8e
    b919:	bnd jmp b020 <.plt>
    b91f:	nop
    b920:	endbr64 
    b924:	push   0x8f
    b929:	bnd jmp b020 <.plt>
    b92f:	nop
    b930:	endbr64 
    b934:	push   0x90
    b939:	bnd jmp b020 <.plt>
    b93f:	nop
    b940:	endbr64 
    b944:	push   0x91
    b949:	bnd jmp b020 <.plt>
    b94f:	nop
    b950:	endbr64 
    b954:	push   0x92
    b959:	bnd jmp b020 <.plt>
    b95f:	nop
    b960:	endbr64 
    b964:	push   0x93
    b969:	bnd jmp b020 <.plt>
    b96f:	nop
    b970:	endbr64 
    b974:	push   0x94
    b979:	bnd jmp b020 <.plt>
    b97f:	nop
    b980:	endbr64 
    b984:	push   0x95
    b989:	bnd jmp b020 <.plt>
    b98f:	nop
    b990:	endbr64 
    b994:	push   0x96
    b999:	bnd jmp b020 <.plt>
    b99f:	nop
    b9a0:	endbr64 
    b9a4:	push   0x97
    b9a9:	bnd jmp b020 <.plt>
    b9af:	nop
    b9b0:	endbr64 
    b9b4:	push   0x98
    b9b9:	bnd jmp b020 <.plt>
    b9bf:	nop
    b9c0:	endbr64 
    b9c4:	push   0x99
    b9c9:	bnd jmp b020 <.plt>
    b9cf:	nop
    b9d0:	endbr64 
    b9d4:	push   0x9a
    b9d9:	bnd jmp b020 <.plt>
    b9df:	nop
    b9e0:	endbr64 
    b9e4:	push   0x9b
    b9e9:	bnd jmp b020 <.plt>
    b9ef:	nop
    b9f0:	endbr64 
    b9f4:	push   0x9c
    b9f9:	bnd jmp b020 <.plt>
    b9ff:	nop
    ba00:	endbr64 
    ba04:	push   0x9d
    ba09:	bnd jmp b020 <.plt>
    ba0f:	nop
    ba10:	endbr64 
    ba14:	push   0x9e
    ba19:	bnd jmp b020 <.plt>
    ba1f:	nop
    ba20:	endbr64 
    ba24:	push   0x9f
    ba29:	bnd jmp b020 <.plt>
    ba2f:	nop
    ba30:	endbr64 
    ba34:	push   0xa0
    ba39:	bnd jmp b020 <.plt>
    ba3f:	nop
    ba40:	endbr64 
    ba44:	push   0xa1
    ba49:	bnd jmp b020 <.plt>
    ba4f:	nop
    ba50:	endbr64 
    ba54:	push   0xa2
    ba59:	bnd jmp b020 <.plt>
    ba5f:	nop
    ba60:	endbr64 
    ba64:	push   0xa3
    ba69:	bnd jmp b020 <.plt>
    ba6f:	nop
    ba70:	endbr64 
    ba74:	push   0xa4
    ba79:	bnd jmp b020 <.plt>
    ba7f:	nop
    ba80:	endbr64 
    ba84:	push   0xa5
    ba89:	bnd jmp b020 <.plt>
    ba8f:	nop
    ba90:	endbr64 
    ba94:	push   0xa6
    ba99:	bnd jmp b020 <.plt>
    ba9f:	nop
    baa0:	endbr64 
    baa4:	push   0xa7
    baa9:	bnd jmp b020 <.plt>
    baaf:	nop
    bab0:	endbr64 
    bab4:	push   0xa8
    bab9:	bnd jmp b020 <.plt>
    babf:	nop
    bac0:	endbr64 
    bac4:	push   0xa9
    bac9:	bnd jmp b020 <.plt>
    bacf:	nop
    bad0:	endbr64 
    bad4:	push   0xaa
    bad9:	bnd jmp b020 <.plt>
    badf:	nop
    bae0:	endbr64 
    bae4:	push   0xab
    bae9:	bnd jmp b020 <.plt>
    baef:	nop
    baf0:	endbr64 
    baf4:	push   0xac
    baf9:	bnd jmp b020 <.plt>
    baff:	nop
    bb00:	endbr64 
    bb04:	push   0xad
    bb09:	bnd jmp b020 <.plt>
    bb0f:	nop
    bb10:	endbr64 
    bb14:	push   0xae
    bb19:	bnd jmp b020 <.plt>
    bb1f:	nop
    bb20:	endbr64 
    bb24:	push   0xaf
    bb29:	bnd jmp b020 <.plt>
    bb2f:	nop
    bb30:	endbr64 
    bb34:	push   0xb0
    bb39:	bnd jmp b020 <.plt>
    bb3f:	nop
    bb40:	endbr64 
    bb44:	push   0xb1
    bb49:	bnd jmp b020 <.plt>
    bb4f:	nop
    bb50:	endbr64 
    bb54:	push   0xb2
    bb59:	bnd jmp b020 <.plt>
    bb5f:	nop
    bb60:	endbr64 
    bb64:	push   0xb3
    bb69:	bnd jmp b020 <.plt>
    bb6f:	nop
    bb70:	endbr64 
    bb74:	push   0xb4
    bb79:	bnd jmp b020 <.plt>
    bb7f:	nop
    bb80:	endbr64 
    bb84:	push   0xb5
    bb89:	bnd jmp b020 <.plt>
    bb8f:	nop
    bb90:	endbr64 
    bb94:	push   0xb6
    bb99:	bnd jmp b020 <.plt>
    bb9f:	nop
    bba0:	endbr64 
    bba4:	push   0xb7
    bba9:	bnd jmp b020 <.plt>
    bbaf:	nop
    bbb0:	endbr64 
    bbb4:	push   0xb8
    bbb9:	bnd jmp b020 <.plt>
    bbbf:	nop
    bbc0:	endbr64 
    bbc4:	push   0xb9
    bbc9:	bnd jmp b020 <.plt>
    bbcf:	nop
    bbd0:	endbr64 
    bbd4:	push   0xba
    bbd9:	bnd jmp b020 <.plt>
    bbdf:	nop
    bbe0:	endbr64 
    bbe4:	push   0xbb
    bbe9:	bnd jmp b020 <.plt>
    bbef:	nop
    bbf0:	endbr64 
    bbf4:	push   0xbc
    bbf9:	bnd jmp b020 <.plt>
    bbff:	nop
    bc00:	endbr64 
    bc04:	push   0xbd
    bc09:	bnd jmp b020 <.plt>
    bc0f:	nop
    bc10:	endbr64 
    bc14:	push   0xbe
    bc19:	bnd jmp b020 <.plt>
    bc1f:	nop
    bc20:	endbr64 
    bc24:	push   0xbf
    bc29:	bnd jmp b020 <.plt>
    bc2f:	nop
    bc30:	endbr64 
    bc34:	push   0xc0
    bc39:	bnd jmp b020 <.plt>
    bc3f:	nop
    bc40:	endbr64 
    bc44:	push   0xc1
    bc49:	bnd jmp b020 <.plt>
    bc4f:	nop
    bc50:	endbr64 
    bc54:	push   0xc2
    bc59:	bnd jmp b020 <.plt>
    bc5f:	nop
    bc60:	endbr64 
    bc64:	push   0xc3
    bc69:	bnd jmp b020 <.plt>
    bc6f:	nop
    bc70:	endbr64 
    bc74:	push   0xc4
    bc79:	bnd jmp b020 <.plt>
    bc7f:	nop
    bc80:	endbr64 
    bc84:	push   0xc5
    bc89:	bnd jmp b020 <.plt>
    bc8f:	nop
    bc90:	endbr64 
    bc94:	push   0xc6
    bc99:	bnd jmp b020 <.plt>
    bc9f:	nop
    bca0:	endbr64 
    bca4:	push   0xc7
    bca9:	bnd jmp b020 <.plt>
    bcaf:	nop
    bcb0:	endbr64 
    bcb4:	push   0xc8
    bcb9:	bnd jmp b020 <.plt>
    bcbf:	nop
    bcc0:	endbr64 
    bcc4:	push   0xc9
    bcc9:	bnd jmp b020 <.plt>
    bccf:	nop
    bcd0:	endbr64 
    bcd4:	push   0xca
    bcd9:	bnd jmp b020 <.plt>
    bcdf:	nop
    bce0:	endbr64 
    bce4:	push   0xcb
    bce9:	bnd jmp b020 <.plt>
    bcef:	nop
    bcf0:	endbr64 
    bcf4:	push   0xcc
    bcf9:	bnd jmp b020 <.plt>
    bcff:	nop
    bd00:	endbr64 
    bd04:	push   0xcd
    bd09:	bnd jmp b020 <.plt>
    bd0f:	nop
    bd10:	endbr64 
    bd14:	push   0xce
    bd19:	bnd jmp b020 <.plt>
    bd1f:	nop
    bd20:	endbr64 
    bd24:	push   0xcf
    bd29:	bnd jmp b020 <.plt>
    bd2f:	nop
    bd30:	endbr64 
    bd34:	push   0xd0
    bd39:	bnd jmp b020 <.plt>
    bd3f:	nop
    bd40:	endbr64 
    bd44:	push   0xd1
    bd49:	bnd jmp b020 <.plt>
    bd4f:	nop
    bd50:	endbr64 
    bd54:	push   0xd2
    bd59:	bnd jmp b020 <.plt>
    bd5f:	nop
    bd60:	endbr64 
    bd64:	push   0xd3
    bd69:	bnd jmp b020 <.plt>
    bd6f:	nop
    bd70:	endbr64 
    bd74:	push   0xd4
    bd79:	bnd jmp b020 <.plt>
    bd7f:	nop
    bd80:	endbr64 
    bd84:	push   0xd5
    bd89:	bnd jmp b020 <.plt>
    bd8f:	nop
    bd90:	endbr64 
    bd94:	push   0xd6
    bd99:	bnd jmp b020 <.plt>
    bd9f:	nop
    bda0:	endbr64 
    bda4:	push   0xd7
    bda9:	bnd jmp b020 <.plt>
    bdaf:	nop
    bdb0:	endbr64 
    bdb4:	push   0xd8
    bdb9:	bnd jmp b020 <.plt>
    bdbf:	nop
    bdc0:	endbr64 
    bdc4:	push   0xd9
    bdc9:	bnd jmp b020 <.plt>
    bdcf:	nop
    bdd0:	endbr64 
    bdd4:	push   0xda
    bdd9:	bnd jmp b020 <.plt>
    bddf:	nop
    bde0:	endbr64 
    bde4:	push   0xdb
    bde9:	bnd jmp b020 <.plt>
    bdef:	nop
    bdf0:	endbr64 
    bdf4:	push   0xdc
    bdf9:	bnd jmp b020 <.plt>
    bdff:	nop
    be00:	endbr64 
    be04:	push   0xdd
    be09:	bnd jmp b020 <.plt>
    be0f:	nop

Disassembly of section .plt.got:

000000000000be10 <strcasecmp@plt>:
    be10:	endbr64 
    be14:	bnd jmp QWORD PTR [rip+0x731a5]        # 7efc0 <strcasecmp@GLIBC_2.2.5>
    be1b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000be20 <fnmatch@plt>:
    be20:	endbr64 
    be24:	bnd jmp QWORD PTR [rip+0x731ad]        # 7efd8 <fnmatch@GLIBC_2.2.5>
    be2b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000be30 <__cxa_finalize@plt>:
    be30:	endbr64 
    be34:	bnd jmp QWORD PTR [rip+0x731ad]        # 7efe8 <__cxa_finalize@GLIBC_2.2.5>
    be3b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000be40 <strcmp@plt>:
    be40:	endbr64 
    be44:	bnd jmp QWORD PTR [rip+0x731a5]        # 7eff0 <strcmp@GLIBC_2.2.5>
    be4b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

000000000000be50 <gnutls_credentials_set@plt>:
    be50:	endbr64 
    be54:	bnd jmp QWORD PTR [rip+0x72a6d]        # 7e8c8 <gnutls_credentials_set@GNUTLS_3_4>
    be5b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000be60 <chmod@plt>:
    be60:	endbr64 
    be64:	bnd jmp QWORD PTR [rip+0x72a65]        # 7e8d0 <chmod@GLIBC_2.2.5>
    be6b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000be70 <symlink@plt>:
    be70:	endbr64 
    be74:	bnd jmp QWORD PTR [rip+0x72a5d]        # 7e8d8 <symlink@GLIBC_2.2.5>
    be7b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000be80 <fileno@plt>:
    be80:	endbr64 
    be84:	bnd jmp QWORD PTR [rip+0x72a55]        # 7e8e0 <fileno@GLIBC_2.2.5>
    be8b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000be90 <__getdelim@plt>:
    be90:	endbr64 
    be94:	bnd jmp QWORD PTR [rip+0x72a4d]        # 7e8e8 <__getdelim@GLIBC_2.2.5>
    be9b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bea0 <nettle_md4_init@plt>:
    bea0:	endbr64 
    bea4:	bnd jmp QWORD PTR [rip+0x72a45]        # 7e8f0 <nettle_md4_init@NETTLE_7>
    beab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000beb0 <gnutls_certificate_set_x509_system_trust@plt>:
    beb0:	endbr64 
    beb4:	bnd jmp QWORD PTR [rip+0x72a3d]        # 7e8f8 <gnutls_certificate_set_x509_system_trust@GNUTLS_3_4>
    bebb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bec0 <mktime@plt>:
    bec0:	endbr64 
    bec4:	bnd jmp QWORD PTR [rip+0x72a35]        # 7e900 <mktime@GLIBC_2.2.5>
    becb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bed0 <memset@plt>:
    bed0:	endbr64 
    bed4:	bnd jmp QWORD PTR [rip+0x72a2d]        # 7e908 <memset@GLIBC_2.2.5>
    bedb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bee0 <mbrtowc@plt>:
    bee0:	endbr64 
    bee4:	bnd jmp QWORD PTR [rip+0x72a25]        # 7e910 <mbrtowc@GLIBC_2.2.5>
    beeb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bef0 <setsid@plt>:
    bef0:	endbr64 
    bef4:	bnd jmp QWORD PTR [rip+0x72a1d]        # 7e918 <setsid@GLIBC_2.2.5>
    befb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bf00 <dcngettext@plt>:
    bf00:	endbr64 
    bf04:	bnd jmp QWORD PTR [rip+0x72a15]        # 7e920 <dcngettext@GLIBC_2.2.5>
    bf0b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bf10 <close@plt>:
    bf10:	endbr64 
    bf14:	bnd jmp QWORD PTR [rip+0x72a0d]        # 7e928 <close@GLIBC_2.2.5>
    bf1b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bf20 <__longjmp_chk@plt>:
    bf20:	endbr64 
    bf24:	bnd jmp QWORD PTR [rip+0x72a05]        # 7e930 <__longjmp_chk@GLIBC_2.11>
    bf2b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bf30 <utime@plt>:
    bf30:	endbr64 
    bf34:	bnd jmp QWORD PTR [rip+0x729fd]        # 7e938 <utime@GLIBC_2.2.5>
    bf3b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bf40 <ioctl@plt>:
    bf40:	endbr64 
    bf44:	bnd jmp QWORD PTR [rip+0x729f5]        # 7e940 <ioctl@GLIBC_2.2.5>
    bf4b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bf50 <abort@plt>:
    bf50:	endbr64 
    bf54:	bnd jmp QWORD PTR [rip+0x729ed]        # 7e948 <abort@GLIBC_2.2.5>
    bf5b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bf60 <gnutls_record_recv@plt>:
    bf60:	endbr64 
    bf64:	bnd jmp QWORD PTR [rip+0x729e5]        # 7e950 <gnutls_record_recv@GNUTLS_3_4>
    bf6b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bf70 <memchr@plt>:
    bf70:	endbr64 
    bf74:	bnd jmp QWORD PTR [rip+0x729dd]        # 7e958 <memchr@GLIBC_2.2.5>
    bf7b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bf80 <stpcpy@plt>:
    bf80:	endbr64 
    bf84:	bnd jmp QWORD PTR [rip+0x729d5]        # 7e960 <stpcpy@GLIBC_2.2.5>
    bf8b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bf90 <gnutls_x509_crt_import@plt>:
    bf90:	endbr64 
    bf94:	bnd jmp QWORD PTR [rip+0x729cd]        # 7e968 <gnutls_x509_crt_import@GNUTLS_3_4>
    bf9b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bfa0 <getpgrp@plt>:
    bfa0:	endbr64 
    bfa4:	bnd jmp QWORD PTR [rip+0x729c5]        # 7e970 <getpgrp@GLIBC_2.2.5>
    bfab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bfb0 <clock_gettime@plt>:
    bfb0:	endbr64 
    bfb4:	bnd jmp QWORD PTR [rip+0x729bd]        # 7e978 <clock_gettime@GLIBC_2.17>
    bfbb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bfc0 <nl_langinfo@plt>:
    bfc0:	endbr64 
    bfc4:	bnd jmp QWORD PTR [rip+0x729b5]        # 7e980 <nl_langinfo@GLIBC_2.2.5>
    bfcb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bfd0 <__fprintf_chk@plt>:
    bfd0:	endbr64 
    bfd4:	bnd jmp QWORD PTR [rip+0x729ad]        # 7e988 <__fprintf_chk@GLIBC_2.3.4>
    bfdb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bfe0 <isatty@plt>:
    bfe0:	endbr64 
    bfe4:	bnd jmp QWORD PTR [rip+0x729a5]        # 7e990 <isatty@GLIBC_2.2.5>
    bfeb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000bff0 <gnutls_pubkey_deinit@plt>:
    bff0:	endbr64 
    bff4:	bnd jmp QWORD PTR [rip+0x7299d]        # 7e998 <gnutls_pubkey_deinit@GNUTLS_3_4>
    bffb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c000 <gnutls_error_is_fatal@plt>:
    c000:	endbr64 
    c004:	bnd jmp QWORD PTR [rip+0x72995]        # 7e9a0 <gnutls_error_is_fatal@GNUTLS_3_4>
    c00b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c010 <gnutls_handshake@plt>:
    c010:	endbr64 
    c014:	bnd jmp QWORD PTR [rip+0x7298d]        # 7e9a8 <gnutls_handshake@GNUTLS_3_4>
    c01b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c020 <textdomain@plt>:
    c020:	endbr64 
    c024:	bnd jmp QWORD PTR [rip+0x72985]        # 7e9b0 <textdomain@GLIBC_2.2.5>
    c02b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c030 <__isoc99_sscanf@plt>:
    c030:	endbr64 
    c034:	bnd jmp QWORD PTR [rip+0x7297d]        # 7e9b8 <__isoc99_sscanf@GLIBC_2.7>
    c03b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c040 <select@plt>:
    c040:	endbr64 
    c044:	bnd jmp QWORD PTR [rip+0x72975]        # 7e9c0 <select@GLIBC_2.2.5>
    c04b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c050 <getpeername@plt>:
    c050:	endbr64 
    c054:	bnd jmp QWORD PTR [rip+0x7296d]        # 7e9c8 <getpeername@GLIBC_2.2.5>
    c05b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c060 <exit@plt>:
    c060:	endbr64 
    c064:	bnd jmp QWORD PTR [rip+0x72965]        # 7e9d0 <exit@GLIBC_2.2.5>
    c06b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c070 <__printf_chk@plt>:
    c070:	endbr64 
    c074:	bnd jmp QWORD PTR [rip+0x7295d]        # 7e9d8 <__printf_chk@GLIBC_2.3.4>
    c07b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c080 <getaddrinfo@plt>:
    c080:	endbr64 
    c084:	bnd jmp QWORD PTR [rip+0x72955]        # 7e9e0 <getaddrinfo@GLIBC_2.2.5>
    c08b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c090 <bindtextdomain@plt>:
    c090:	endbr64 
    c094:	bnd jmp QWORD PTR [rip+0x7294d]        # 7e9e8 <bindtextdomain@GLIBC_2.2.5>
    c09b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c0a0 <strpbrk@plt>:
    c0a0:	endbr64 
    c0a4:	bnd jmp QWORD PTR [rip+0x72945]        # 7e9f0 <strpbrk@GLIBC_2.2.5>
    c0ab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c0b0 <gnutls_alert_get@plt>:
    c0b0:	endbr64 
    c0b4:	bnd jmp QWORD PTR [rip+0x7293d]        # 7e9f8 <gnutls_alert_get@GNUTLS_3_4>
    c0bb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c0c0 <read@plt>:
    c0c0:	endbr64 
    c0c4:	bnd jmp QWORD PTR [rip+0x72935]        # 7ea00 <read@GLIBC_2.2.5>
    c0cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c0d0 <strncmp@plt>:
    c0d0:	endbr64 
    c0d4:	bnd jmp QWORD PTR [rip+0x7292d]        # 7ea08 <strncmp@GLIBC_2.2.5>
    c0db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c0e0 <malloc@plt>:
    c0e0:	endbr64 
    c0e4:	bnd jmp QWORD PTR [rip+0x72925]        # 7ea10 <malloc@GLIBC_2.2.5>
    c0eb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c0f0 <fopen@plt>:
    c0f0:	endbr64 
    c0f4:	bnd jmp QWORD PTR [rip+0x7291d]        # 7ea18 <fopen@GLIBC_2.2.5>
    c0fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c100 <recv@plt>:
    c100:	endbr64 
    c104:	bnd jmp QWORD PTR [rip+0x72915]        # 7ea20 <recv@GLIBC_2.2.5>
    c10b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c110 <setitimer@plt>:
    c110:	endbr64 
    c114:	bnd jmp QWORD PTR [rip+0x7290d]        # 7ea28 <setitimer@GLIBC_2.2.5>
    c11b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c120 <unlink@plt>:
    c120:	endbr64 
    c124:	bnd jmp QWORD PTR [rip+0x72905]        # 7ea30 <unlink@GLIBC_2.2.5>
    c12b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c130 <gnutls_session_get_data2@plt>:
    c130:	endbr64 
    c134:	bnd jmp QWORD PTR [rip+0x728fd]        # 7ea38 <gnutls_session_get_data2@GNUTLS_3_4>
    c13b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c140 <nettle_md4_update@plt>:
    c140:	endbr64 
    c144:	bnd jmp QWORD PTR [rip+0x728f5]        # 7ea40 <nettle_md4_update@NETTLE_7>
    c14b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c150 <gnutls_certificate_type_get@plt>:
    c150:	endbr64 
    c154:	bnd jmp QWORD PTR [rip+0x728ed]        # 7ea48 <gnutls_certificate_type_get@GNUTLS_3_4>
    c15b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c160 <gnutls_global_init@plt>:
    c160:	endbr64 
    c164:	bnd jmp QWORD PTR [rip+0x728e5]        # 7ea50 <gnutls_global_init@GNUTLS_3_4>
    c16b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c170 <__memcpy_chk@plt>:
    c170:	endbr64 
    c174:	bnd jmp QWORD PTR [rip+0x728dd]        # 7ea58 <__memcpy_chk@GLIBC_2.3.4>
    c17b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c180 <gmtime@plt>:
    c180:	endbr64 
    c184:	bnd jmp QWORD PTR [rip+0x728d5]        # 7ea60 <gmtime@GLIBC_2.2.5>
    c18b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c190 <gnutls_alert_get_name@plt>:
    c190:	endbr64 
    c194:	bnd jmp QWORD PTR [rip+0x728cd]        # 7ea68 <gnutls_alert_get_name@GNUTLS_3_4>
    c19b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c1a0 <setsockopt@plt>:
    c1a0:	endbr64 
    c1a4:	bnd jmp QWORD PTR [rip+0x728c5]        # 7ea70 <setsockopt@GLIBC_2.2.5>
    c1ab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c1b0 <sysconf@plt>:
    c1b0:	endbr64 
    c1b4:	bnd jmp QWORD PTR [rip+0x728bd]        # 7ea78 <sysconf@GLIBC_2.2.5>
    c1bb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c1c0 <srandom@plt>:
    c1c0:	endbr64 
    c1c4:	bnd jmp QWORD PTR [rip+0x728b5]        # 7ea80 <srandom@GLIBC_2.2.5>
    c1cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c1d0 <strchrnul@plt>:
    c1d0:	endbr64 
    c1d4:	bnd jmp QWORD PTR [rip+0x728ad]        # 7ea88 <strchrnul@GLIBC_2.2.5>
    c1db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c1e0 <getpid@plt>:
    c1e0:	endbr64 
    c1e4:	bnd jmp QWORD PTR [rip+0x728a5]        # 7ea90 <getpid@GLIBC_2.2.5>
    c1eb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c1f0 <gnutls_pubkey_import_x509@plt>:
    c1f0:	endbr64 
    c1f4:	bnd jmp QWORD PTR [rip+0x7289d]        # 7ea98 <gnutls_pubkey_import_x509@GNUTLS_3_4>
    c1fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c200 <gnutls_x509_crt_get_activation_time@plt>:
    c200:	endbr64 
    c204:	bnd jmp QWORD PTR [rip+0x72895]        # 7eaa0 <gnutls_x509_crt_get_activation_time@GNUTLS_3_4>
    c20b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c210 <__vsnprintf_chk@plt>:
    c210:	endbr64 
    c214:	bnd jmp QWORD PTR [rip+0x7288d]        # 7eaa8 <__vsnprintf_chk@GLIBC_2.3.4>
    c21b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c220 <nettle_md4_digest@plt>:
    c220:	endbr64 
    c224:	bnd jmp QWORD PTR [rip+0x72885]        # 7eab0 <nettle_md4_digest@NETTLE_7>
    c22b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c230 <gnutls_global_deinit@plt>:
    c230:	endbr64 
    c234:	bnd jmp QWORD PTR [rip+0x7287d]        # 7eab8 <gnutls_global_deinit@GNUTLS_3_4>
    c23b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c240 <gnutls_session_enable_compatibility_mode@plt>:
    c240:	endbr64 
    c244:	bnd jmp QWORD PTR [rip+0x72875]        # 7eac0 <gnutls_session_enable_compatibility_mode@GNUTLS_3_4>
    c24b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c250 <nettle_des_encrypt@plt>:
    c250:	endbr64 
    c254:	bnd jmp QWORD PTR [rip+0x7286d]        # 7eac8 <nettle_des_encrypt@NETTLE_7>
    c25b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c260 <gnutls_record_get_direction@plt>:
    c260:	endbr64 
    c264:	bnd jmp QWORD PTR [rip+0x72865]        # 7ead0 <gnutls_record_get_direction@GNUTLS_3_4>
    c26b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c270 <iconv_open@plt>:
    c270:	endbr64 
    c274:	bnd jmp QWORD PTR [rip+0x7285d]        # 7ead8 <iconv_open@GLIBC_2.2.5>
    c27b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c280 <getpwuid@plt>:
    c280:	endbr64 
    c284:	bnd jmp QWORD PTR [rip+0x72855]        # 7eae0 <getpwuid@GLIBC_2.2.5>
    c28b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c290 <gnutls_certificate_verify_peers2@plt>:
    c290:	endbr64 
    c294:	bnd jmp QWORD PTR [rip+0x7284d]        # 7eae8 <gnutls_certificate_verify_peers2@GNUTLS_3_4>
    c29b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c2a0 <idn2_strerror@plt>:
    c2a0:	endbr64 
    c2a4:	bnd jmp QWORD PTR [rip+0x72845]        # 7eaf0 <idn2_strerror@IDN2_0.0.0>
    c2ab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c2b0 <__ctype_toupper_loc@plt>:
    c2b0:	endbr64 
    c2b4:	bnd jmp QWORD PTR [rip+0x7283d]        # 7eaf8 <__ctype_toupper_loc@GLIBC_2.3>
    c2bb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c2c0 <fputc@plt>:
    c2c0:	endbr64 
    c2c4:	bnd jmp QWORD PTR [rip+0x72835]        # 7eb00 <fputc@GLIBC_2.2.5>
    c2cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c2d0 <freeaddrinfo@plt>:
    c2d0:	endbr64 
    c2d4:	bnd jmp QWORD PTR [rip+0x7282d]        # 7eb08 <freeaddrinfo@GLIBC_2.2.5>
    c2db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c2e0 <free@plt>:
    c2e0:	endbr64 
    c2e4:	bnd jmp QWORD PTR [rip+0x72825]        # 7eb10 <free@GLIBC_2.2.5>
    c2eb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c2f0 <fread_unlocked@plt>:
    c2f0:	endbr64 
    c2f4:	bnd jmp QWORD PTR [rip+0x7281d]        # 7eb18 <fread_unlocked@GLIBC_2.2.5>
    c2fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c300 <secure_getenv@plt>:
    c300:	endbr64 
    c304:	bnd jmp QWORD PTR [rip+0x72815]        # 7eb20 <secure_getenv@GLIBC_2.17>
    c30b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c310 <strlen@plt>:
    c310:	endbr64 
    c314:	bnd jmp QWORD PTR [rip+0x7280d]        # 7eb28 <strlen@GLIBC_2.2.5>
    c31b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c320 <gnutls_init@plt>:
    c320:	endbr64 
    c324:	bnd jmp QWORD PTR [rip+0x72805]        # 7eb30 <gnutls_init@GNUTLS_3_4>
    c32b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c330 <ferror@plt>:
    c330:	endbr64 
    c334:	bnd jmp QWORD PTR [rip+0x727fd]        # 7eb38 <ferror@GLIBC_2.2.5>
    c33b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c340 <opendir@plt>:
    c340:	endbr64 
    c344:	bnd jmp QWORD PTR [rip+0x727f5]        # 7eb40 <opendir@GLIBC_2.2.5>
    c34b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c350 <__xstat@plt>:
    c350:	endbr64 
    c354:	bnd jmp QWORD PTR [rip+0x727ed]        # 7eb48 <__xstat@GLIBC_2.2.5>
    c35b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c360 <__ctype_get_mb_cur_max@plt>:
    c360:	endbr64 
    c364:	bnd jmp QWORD PTR [rip+0x727e5]        # 7eb50 <__ctype_get_mb_cur_max@GLIBC_2.2.5>
    c36b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c370 <__vfprintf_chk@plt>:
    c370:	endbr64 
    c374:	bnd jmp QWORD PTR [rip+0x727dd]        # 7eb58 <__vfprintf_chk@GLIBC_2.3.4>
    c37b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c380 <iswctype@plt>:
    c380:	endbr64 
    c384:	bnd jmp QWORD PTR [rip+0x727d5]        # 7eb60 <iswctype@GLIBC_2.2.5>
    c38b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c390 <__freading@plt>:
    c390:	endbr64 
    c394:	bnd jmp QWORD PTR [rip+0x727cd]        # 7eb68 <__freading@GLIBC_2.2.5>
    c39b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c3a0 <listen@plt>:
    c3a0:	endbr64 
    c3a4:	bnd jmp QWORD PTR [rip+0x727c5]        # 7eb70 <listen@GLIBC_2.2.5>
    c3ab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c3b0 <__ctype_b_loc@plt>:
    c3b0:	endbr64 
    c3b4:	bnd jmp QWORD PTR [rip+0x727bd]        # 7eb78 <__ctype_b_loc@GLIBC_2.3>
    c3bb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c3c0 <getpass@plt>:
    c3c0:	endbr64 
    c3c4:	bnd jmp QWORD PTR [rip+0x727b5]        # 7eb80 <getpass@GLIBC_2.2.5>
    c3cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c3d0 <gnutls_session_is_resumed@plt>:
    c3d0:	endbr64 
    c3d4:	bnd jmp QWORD PTR [rip+0x727ad]        # 7eb88 <gnutls_session_is_resumed@GNUTLS_3_4>
    c3db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c3e0 <posix_spawn_file_actions_init@plt>:
    c3e0:	endbr64 
    c3e4:	bnd jmp QWORD PTR [rip+0x727a5]        # 7eb90 <posix_spawn_file_actions_init@GLIBC_2.2.5>
    c3eb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c3f0 <readdir@plt>:
    c3f0:	endbr64 
    c3f4:	bnd jmp QWORD PTR [rip+0x7279d]        # 7eb98 <readdir@GLIBC_2.2.5>
    c3fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c400 <sprintf@plt>:
    c400:	endbr64 
    c404:	bnd jmp QWORD PTR [rip+0x72795]        # 7eba0 <sprintf@GLIBC_2.2.5>
    c40b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c410 <gnutls_certificate_allocate_credentials@plt>:
    c410:	endbr64 
    c414:	bnd jmp QWORD PTR [rip+0x7278d]        # 7eba8 <gnutls_certificate_allocate_credentials@GNUTLS_3_4>
    c41b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c420 <iswalnum@plt>:
    c420:	endbr64 
    c424:	bnd jmp QWORD PTR [rip+0x72785]        # 7ebb0 <iswalnum@GLIBC_2.2.5>
    c42b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c430 <fgetc@plt>:
    c430:	endbr64 
    c434:	bnd jmp QWORD PTR [rip+0x7277d]        # 7ebb8 <fgetc@GLIBC_2.2.5>
    c43b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c440 <fdopen@plt>:
    c440:	endbr64 
    c444:	bnd jmp QWORD PTR [rip+0x72775]        # 7ebc0 <fdopen@GLIBC_2.2.5>
    c44b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c450 <towupper@plt>:
    c450:	endbr64 
    c454:	bnd jmp QWORD PTR [rip+0x7276d]        # 7ebc8 <towupper@GLIBC_2.2.5>
    c45b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c460 <strrchr@plt>:
    c460:	endbr64 
    c464:	bnd jmp QWORD PTR [rip+0x72765]        # 7ebd0 <strrchr@GLIBC_2.2.5>
    c46b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c470 <gnutls_x509_crt_get_expiration_time@plt>:
    c470:	endbr64 
    c474:	bnd jmp QWORD PTR [rip+0x7275d]        # 7ebd8 <gnutls_x509_crt_get_expiration_time@GNUTLS_3_4>
    c47b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c480 <gnutls_record_check_pending@plt>:
    c480:	endbr64 
    c484:	bnd jmp QWORD PTR [rip+0x72755]        # 7ebe0 <gnutls_record_check_pending@GNUTLS_3_4>
    c48b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c490 <gnutls_deinit@plt>:
    c490:	endbr64 
    c494:	bnd jmp QWORD PTR [rip+0x7274d]        # 7ebe8 <gnutls_deinit@GNUTLS_3_4>
    c49b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c4a0 <strtok_r@plt>:
    c4a0:	endbr64 
    c4a4:	bnd jmp QWORD PTR [rip+0x72745]        # 7ebf0 <strtok_r@GLIBC_2.2.5>
    c4ab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c4b0 <pipe@plt>:
    c4b0:	endbr64 
    c4b4:	bnd jmp QWORD PTR [rip+0x7273d]        # 7ebf8 <pipe@GLIBC_2.2.5>
    c4bb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c4c0 <sleep@plt>:
    c4c0:	endbr64 
    c4c4:	bnd jmp QWORD PTR [rip+0x72735]        # 7ec00 <sleep@GLIBC_2.2.5>
    c4cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c4d0 <iconv@plt>:
    c4d0:	endbr64 
    c4d4:	bnd jmp QWORD PTR [rip+0x7272d]        # 7ec08 <iconv@GLIBC_2.2.5>
    c4db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c4e0 <timegm@plt>:
    c4e0:	endbr64 
    c4e4:	bnd jmp QWORD PTR [rip+0x72725]        # 7ec10 <timegm@GLIBC_2.2.5>
    c4eb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c4f0 <ftello@plt>:
    c4f0:	endbr64 
    c4f4:	bnd jmp QWORD PTR [rip+0x7271d]        # 7ec18 <ftello@GLIBC_2.2.5>
    c4fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c500 <gnutls_pubkey_export@plt>:
    c500:	endbr64 
    c504:	bnd jmp QWORD PTR [rip+0x72715]        # 7ec20 <gnutls_pubkey_export@GNUTLS_3_4>
    c50b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c510 <flock@plt>:
    c510:	endbr64 
    c514:	bnd jmp QWORD PTR [rip+0x7270d]        # 7ec28 <flock@GLIBC_2.2.5>
    c51b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c520 <gnutls_certificate_get_peers@plt>:
    c520:	endbr64 
    c524:	bnd jmp QWORD PTR [rip+0x72705]        # 7ec30 <gnutls_certificate_get_peers@GNUTLS_3_4>
    c52b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c530 <usleep@plt>:
    c530:	endbr64 
    c534:	bnd jmp QWORD PTR [rip+0x726fd]        # 7ec38 <usleep@GLIBC_2.2.5>
    c53b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c540 <strerror@plt>:
    c540:	endbr64 
    c544:	bnd jmp QWORD PTR [rip+0x726f5]        # 7ec40 <strerror@GLIBC_2.2.5>
    c54b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c550 <strstr@plt>:
    c550:	endbr64 
    c554:	bnd jmp QWORD PTR [rip+0x726ed]        # 7ec48 <strstr@GLIBC_2.2.5>
    c55b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c560 <rewind@plt>:
    c560:	endbr64 
    c564:	bnd jmp QWORD PTR [rip+0x726e5]        # 7ec50 <rewind@GLIBC_2.2.5>
    c56b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c570 <memrchr@plt>:
    c570:	endbr64 
    c574:	bnd jmp QWORD PTR [rip+0x726dd]        # 7ec58 <memrchr@GLIBC_2.2.5>
    c57b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c580 <fputs@plt>:
    c580:	endbr64 
    c584:	bnd jmp QWORD PTR [rip+0x726d5]        # 7ec60 <fputs@GLIBC_2.2.5>
    c58b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c590 <lseek@plt>:
    c590:	endbr64 
    c594:	bnd jmp QWORD PTR [rip+0x726cd]        # 7ec68 <lseek@GLIBC_2.2.5>
    c59b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c5a0 <strtol@plt>:
    c5a0:	endbr64 
    c5a4:	bnd jmp QWORD PTR [rip+0x726c5]        # 7ec70 <strtol@GLIBC_2.2.5>
    c5ab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c5b0 <readlink@plt>:
    c5b0:	endbr64 
    c5b4:	bnd jmp QWORD PTR [rip+0x726bd]        # 7ec78 <readlink@GLIBC_2.2.5>
    c5bb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c5c0 <getsockname@plt>:
    c5c0:	endbr64 
    c5c4:	bnd jmp QWORD PTR [rip+0x726b5]        # 7ec80 <getsockname@GLIBC_2.2.5>
    c5cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c5d0 <connect@plt>:
    c5d0:	endbr64 
    c5d4:	bnd jmp QWORD PTR [rip+0x726ad]        # 7ec88 <connect@GLIBC_2.2.5>
    c5db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c5e0 <gnutls_priority_set_direct@plt>:
    c5e0:	endbr64 
    c5e4:	bnd jmp QWORD PTR [rip+0x726a5]        # 7ec90 <gnutls_priority_set_direct@GNUTLS_3_4>
    c5eb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c5f0 <gnutls_certificate_set_x509_crl_file@plt>:
    c5f0:	endbr64 
    c5f4:	bnd jmp QWORD PTR [rip+0x7269d]        # 7ec98 <gnutls_certificate_set_x509_crl_file@GNUTLS_3_4>
    c5fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c600 <iswcntrl@plt>:
    c600:	endbr64 
    c604:	bnd jmp QWORD PTR [rip+0x72695]        # 7eca0 <iswcntrl@GLIBC_2.2.5>
    c60b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c610 <towlower@plt>:
    c610:	endbr64 
    c614:	bnd jmp QWORD PTR [rip+0x7268d]        # 7eca8 <towlower@GLIBC_2.2.5>
    c61b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c620 <gnutls_x509_crt_init@plt>:
    c620:	endbr64 
    c624:	bnd jmp QWORD PTR [rip+0x72685]        # 7ecb0 <gnutls_x509_crt_init@GNUTLS_3_4>
    c62b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c630 <clock_getres@plt>:
    c630:	endbr64 
    c634:	bnd jmp QWORD PTR [rip+0x7267d]        # 7ecb8 <clock_getres@GLIBC_2.17>
    c63b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c640 <mkostemp@plt>:
    c640:	endbr64 
    c644:	bnd jmp QWORD PTR [rip+0x72675]        # 7ecc0 <mkostemp@GLIBC_2.7>
    c64b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c650 <wcrtomb@plt>:
    c650:	endbr64 
    c654:	bnd jmp QWORD PTR [rip+0x7266d]        # 7ecc8 <wcrtomb@GLIBC_2.2.5>
    c65b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c660 <putc@plt>:
    c660:	endbr64 
    c664:	bnd jmp QWORD PTR [rip+0x72665]        # 7ecd0 <putc@GLIBC_2.2.5>
    c66b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c670 <gnutls_certificate_set_verify_flags@plt>:
    c670:	endbr64 
    c674:	bnd jmp QWORD PTR [rip+0x7265d]        # 7ecd8 <gnutls_certificate_set_verify_flags@GNUTLS_3_4>
    c67b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c680 <signal@plt>:
    c680:	endbr64 
    c684:	bnd jmp QWORD PTR [rip+0x72655]        # 7ece0 <signal@GLIBC_2.2.5>
    c68b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c690 <strspn@plt>:
    c690:	endbr64 
    c694:	bnd jmp QWORD PTR [rip+0x7264d]        # 7ece8 <strspn@GLIBC_2.2.5>
    c69b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c6a0 <strptime@plt>:
    c6a0:	endbr64 
    c6a4:	bnd jmp QWORD PTR [rip+0x72645]        # 7ecf0 <strptime@GLIBC_2.2.5>
    c6ab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c6b0 <memmove@plt>:
    c6b0:	endbr64 
    c6b4:	bnd jmp QWORD PTR [rip+0x7263d]        # 7ecf8 <memmove@GLIBC_2.2.5>
    c6bb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c6c0 <strchr@plt>:
    c6c0:	endbr64 
    c6c4:	bnd jmp QWORD PTR [rip+0x72635]        # 7ed00 <strchr@GLIBC_2.2.5>
    c6cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c6d0 <gnutls_certificate_set_x509_trust_file@plt>:
    c6d0:	endbr64 
    c6d4:	bnd jmp QWORD PTR [rip+0x7262d]        # 7ed08 <gnutls_certificate_set_x509_trust_file@GNUTLS_3_4>
    c6db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c6e0 <getopt_long@plt>:
    c6e0:	endbr64 
    c6e4:	bnd jmp QWORD PTR [rip+0x72625]        # 7ed10 <getopt_long@GLIBC_2.2.5>
    c6eb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c6f0 <socket@plt>:
    c6f0:	endbr64 
    c6f4:	bnd jmp QWORD PTR [rip+0x7261d]        # 7ed18 <socket@GLIBC_2.2.5>
    c6fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c700 <fread@plt>:
    c700:	endbr64 
    c704:	bnd jmp QWORD PTR [rip+0x72615]        # 7ed20 <fread@GLIBC_2.2.5>
    c70b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c710 <__fxstat@plt>:
    c710:	endbr64 
    c714:	bnd jmp QWORD PTR [rip+0x7260d]        # 7ed28 <__fxstat@GLIBC_2.2.5>
    c71b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c720 <getenv@plt>:
    c720:	endbr64 
    c724:	bnd jmp QWORD PTR [rip+0x72605]        # 7ed30 <getenv@GLIBC_2.2.5>
    c72b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c730 <mbsinit@plt>:
    c730:	endbr64 
    c734:	bnd jmp QWORD PTR [rip+0x725fd]        # 7ed38 <mbsinit@GLIBC_2.2.5>
    c73b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c740 <__errno_location@plt>:
    c740:	endbr64 
    c744:	bnd jmp QWORD PTR [rip+0x725f5]        # 7ed40 <__errno_location@GLIBC_2.2.5>
    c74b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c750 <qsort@plt>:
    c750:	endbr64 
    c754:	bnd jmp QWORD PTR [rip+0x725ed]        # 7ed48 <qsort@GLIBC_2.2.5>
    c75b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c760 <strdup@plt>:
    c760:	endbr64 
    c764:	bnd jmp QWORD PTR [rip+0x725e5]        # 7ed50 <strdup@GLIBC_2.2.5>
    c76b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c770 <gnutls_record_send@plt>:
    c770:	endbr64 
    c774:	bnd jmp QWORD PTR [rip+0x725dd]        # 7ed58 <gnutls_record_send@GNUTLS_3_4>
    c77b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c780 <dcgettext@plt>:
    c780:	endbr64 
    c784:	bnd jmp QWORD PTR [rip+0x725d5]        # 7ed60 <dcgettext@GLIBC_2.2.5>
    c78b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c790 <gnutls_strerror@plt>:
    c790:	endbr64 
    c794:	bnd jmp QWORD PTR [rip+0x725cd]        # 7ed68 <gnutls_strerror@GNUTLS_3_4>
    c79b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c7a0 <strncasecmp@plt>:
    c7a0:	endbr64 
    c7a4:	bnd jmp QWORD PTR [rip+0x725c5]        # 7ed70 <strncasecmp@GLIBC_2.2.5>
    c7ab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c7b0 <__stack_chk_fail@plt>:
    c7b0:	endbr64 
    c7b4:	bnd jmp QWORD PTR [rip+0x725bd]        # 7ed78 <__stack_chk_fail@GLIBC_2.4>
    c7bb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c7c0 <gnutls_certificate_free_credentials@plt>:
    c7c0:	endbr64 
    c7c4:	bnd jmp QWORD PTR [rip+0x725b5]        # 7ed80 <gnutls_certificate_free_credentials@GNUTLS_3_4>
    c7cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c7d0 <posix_spawnp@plt>:
    c7d0:	endbr64 
    c7d4:	bnd jmp QWORD PTR [rip+0x725ad]        # 7ed88 <posix_spawnp@GLIBC_2.15>
    c7db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c7e0 <gnutls_pubkey_init@plt>:
    c7e0:	endbr64 
    c7e4:	bnd jmp QWORD PTR [rip+0x725a5]        # 7ed90 <gnutls_pubkey_init@GNUTLS_3_4>
    c7eb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c7f0 <wcwidth@plt>:
    c7f0:	endbr64 
    c7f4:	bnd jmp QWORD PTR [rip+0x7259d]        # 7ed98 <wcwidth@GLIBC_2.2.5>
    c7fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c800 <gnutls_x509_crt_check_hostname@plt>:
    c800:	endbr64 
    c804:	bnd jmp QWORD PTR [rip+0x72595]        # 7eda0 <gnutls_x509_crt_check_hostname@GNUTLS_3_4>
    c80b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c810 <fsetxattr@plt>:
    c810:	endbr64 
    c814:	bnd jmp QWORD PTR [rip+0x7258d]        # 7eda8 <fsetxattr@GLIBC_2.3>
    c81b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c820 <localeconv@plt>:
    c820:	endbr64 
    c824:	bnd jmp QWORD PTR [rip+0x72585]        # 7edb0 <localeconv@GLIBC_2.2.5>
    c82b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c830 <strcpy@plt>:
    c830:	endbr64 
    c834:	bnd jmp QWORD PTR [rip+0x7257d]        # 7edb8 <strcpy@GLIBC_2.2.5>
    c83b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c840 <strtok@plt>:
    c840:	endbr64 
    c844:	bnd jmp QWORD PTR [rip+0x72575]        # 7edc0 <strtok@GLIBC_2.2.5>
    c84b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c850 <getuid@plt>:
    c850:	endbr64 
    c854:	bnd jmp QWORD PTR [rip+0x7256d]        # 7edc8 <getuid@GLIBC_2.2.5>
    c85b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c860 <__ctype_tolower_loc@plt>:
    c860:	endbr64 
    c864:	bnd jmp QWORD PTR [rip+0x72565]        # 7edd0 <__ctype_tolower_loc@GLIBC_2.3>
    c86b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c870 <memcmp@plt>:
    c870:	endbr64 
    c874:	bnd jmp QWORD PTR [rip+0x7255d]        # 7edd8 <memcmp@GLIBC_2.2.5>
    c87b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c880 <calloc@plt>:
    c880:	endbr64 
    c884:	bnd jmp QWORD PTR [rip+0x72555]        # 7ede0 <calloc@GLIBC_2.2.5>
    c88b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c890 <munmap@plt>:
    c890:	endbr64 
    c894:	bnd jmp QWORD PTR [rip+0x7254d]        # 7ede8 <munmap@GLIBC_2.2.5>
    c89b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c8a0 <feof@plt>:
    c8a0:	endbr64 
    c8a4:	bnd jmp QWORD PTR [rip+0x72545]        # 7edf0 <feof@GLIBC_2.2.5>
    c8ab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c8b0 <fclose@plt>:
    c8b0:	endbr64 
    c8b4:	bnd jmp QWORD PTR [rip+0x7253d]        # 7edf8 <fclose@GLIBC_2.2.5>
    c8bb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c8c0 <freopen@plt>:
    c8c0:	endbr64 
    c8c4:	bnd jmp QWORD PTR [rip+0x72535]        # 7ee00 <freopen@GLIBC_2.2.5>
    c8cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c8d0 <random@plt>:
    c8d0:	endbr64 
    c8d4:	bnd jmp QWORD PTR [rip+0x7252d]        # 7ee08 <random@GLIBC_2.2.5>
    c8db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c8e0 <gnutls_server_name_set@plt>:
    c8e0:	endbr64 
    c8e4:	bnd jmp QWORD PTR [rip+0x72525]        # 7ee10 <gnutls_server_name_set@GNUTLS_3_4>
    c8eb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c8f0 <__lxstat@plt>:
    c8f0:	endbr64 
    c8f4:	bnd jmp QWORD PTR [rip+0x7251d]        # 7ee18 <__lxstat@GLIBC_2.2.5>
    c8fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c900 <fseeko@plt>:
    c900:	endbr64 
    c904:	bnd jmp QWORD PTR [rip+0x72515]        # 7ee20 <fseeko@GLIBC_2.2.5>
    c90b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c910 <idn2_free@plt>:
    c910:	endbr64 
    c914:	bnd jmp QWORD PTR [rip+0x7250d]        # 7ee28 <idn2_free@IDN2_0.0.0>
    c91b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c920 <gnutls_certificate_set_x509_key_file@plt>:
    c920:	endbr64 
    c924:	bnd jmp QWORD PTR [rip+0x72505]        # 7ee30 <gnutls_certificate_set_x509_key_file@GNUTLS_3_4>
    c92b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c930 <gnutls_set_default_priority@plt>:
    c930:	endbr64 
    c934:	bnd jmp QWORD PTR [rip+0x724fd]        # 7ee38 <gnutls_set_default_priority@GNUTLS_3_4>
    c93b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c940 <closedir@plt>:
    c940:	endbr64 
    c944:	bnd jmp QWORD PTR [rip+0x724f5]        # 7ee40 <closedir@GLIBC_2.2.5>
    c94b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c950 <__sprintf_chk@plt>:
    c950:	endbr64 
    c954:	bnd jmp QWORD PTR [rip+0x724ed]        # 7ee48 <__sprintf_chk@GLIBC_2.3.4>
    c95b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c960 <btowc@plt>:
    c960:	endbr64 
    c964:	bnd jmp QWORD PTR [rip+0x724e5]        # 7ee50 <btowc@GLIBC_2.2.5>
    c96b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c970 <gnutls_session_set_data@plt>:
    c970:	endbr64 
    c974:	bnd jmp QWORD PTR [rip+0x724dd]        # 7ee58 <gnutls_session_set_data@GNUTLS_3_4>
    c97b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c980 <strcspn@plt>:
    c980:	endbr64 
    c984:	bnd jmp QWORD PTR [rip+0x724d5]        # 7ee60 <strcspn@GLIBC_2.2.5>
    c98b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c990 <ftruncate@plt>:
    c990:	endbr64 
    c994:	bnd jmp QWORD PTR [rip+0x724cd]        # 7ee68 <ftruncate@GLIBC_2.2.5>
    c99b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c9a0 <posix_spawn_file_actions_adddup2@plt>:
    c9a0:	endbr64 
    c9a4:	bnd jmp QWORD PTR [rip+0x724c5]        # 7ee70 <posix_spawn_file_actions_adddup2@GLIBC_2.2.5>
    c9ab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c9b0 <wctype@plt>:
    c9b0:	endbr64 
    c9b4:	bnd jmp QWORD PTR [rip+0x724bd]        # 7ee78 <wctype@GLIBC_2.2.5>
    c9bb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c9c0 <clearerr@plt>:
    c9c0:	endbr64 
    c9c4:	bnd jmp QWORD PTR [rip+0x724b5]        # 7ee80 <clearerr@GLIBC_2.2.5>
    c9cb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c9d0 <__snprintf_chk@plt>:
    c9d0:	endbr64 
    c9d4:	bnd jmp QWORD PTR [rip+0x724ad]        # 7ee88 <__snprintf_chk@GLIBC_2.3.4>
    c9db:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c9e0 <fork@plt>:
    c9e0:	endbr64 
    c9e4:	bnd jmp QWORD PTR [rip+0x724a5]        # 7ee90 <fork@GLIBC_2.2.5>
    c9eb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000c9f0 <idn2_lookup_u8@plt>:
    c9f0:	endbr64 
    c9f4:	bnd jmp QWORD PTR [rip+0x7249d]        # 7ee98 <idn2_lookup_u8@IDN2_0.0.0>
    c9fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ca00 <bind@plt>:
    ca00:	endbr64 
    ca04:	bnd jmp QWORD PTR [rip+0x72495]        # 7eea0 <bind@GLIBC_2.2.5>
    ca0b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ca10 <fwrite@plt>:
    ca10:	endbr64 
    ca14:	bnd jmp QWORD PTR [rip+0x7248d]        # 7eea8 <fwrite@GLIBC_2.2.5>
    ca1b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ca20 <realloc@plt>:
    ca20:	endbr64 
    ca24:	bnd jmp QWORD PTR [rip+0x72485]        # 7eeb0 <realloc@GLIBC_2.2.5>
    ca2b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ca30 <setlocale@plt>:
    ca30:	endbr64 
    ca34:	bnd jmp QWORD PTR [rip+0x7247d]        # 7eeb8 <setlocale@GLIBC_2.2.5>
    ca3b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ca40 <nettle_des_set_key@plt>:
    ca40:	endbr64 
    ca44:	bnd jmp QWORD PTR [rip+0x72475]        # 7eec0 <nettle_des_set_key@NETTLE_7>
    ca4b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ca50 <perror@plt>:
    ca50:	endbr64 
    ca54:	bnd jmp QWORD PTR [rip+0x7246d]        # 7eec8 <perror@GLIBC_2.2.5>
    ca5b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ca60 <group_member@plt>:
    ca60:	endbr64 
    ca64:	bnd jmp QWORD PTR [rip+0x72465]        # 7eed0 <group_member@GLIBC_2.2.5>
    ca6b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ca70 <__sigsetjmp@plt>:
    ca70:	endbr64 
    ca74:	bnd jmp QWORD PTR [rip+0x7245d]        # 7eed8 <__sigsetjmp@GLIBC_2.2.5>
    ca7b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ca80 <gai_strerror@plt>:
    ca80:	endbr64 
    ca84:	bnd jmp QWORD PTR [rip+0x72455]        # 7eee0 <gai_strerror@GLIBC_2.2.5>
    ca8b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ca90 <error@plt>:
    ca90:	endbr64 
    ca94:	bnd jmp QWORD PTR [rip+0x7244d]        # 7eee8 <error@GLIBC_2.2.5>
    ca9b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000caa0 <localtime@plt>:
    caa0:	endbr64 
    caa4:	bnd jmp QWORD PTR [rip+0x72445]        # 7eef0 <localtime@GLIBC_2.2.5>
    caab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cab0 <write@plt>:
    cab0:	endbr64 
    cab4:	bnd jmp QWORD PTR [rip+0x7243d]        # 7eef8 <write@GLIBC_2.2.5>
    cabb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cac0 <gnutls_transport_set_ptr@plt>:
    cac0:	endbr64 
    cac4:	bnd jmp QWORD PTR [rip+0x72435]        # 7ef00 <gnutls_transport_set_ptr@GNUTLS_3_4>
    cacb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cad0 <gnutls_x509_crt_deinit@plt>:
    cad0:	endbr64 
    cad4:	bnd jmp QWORD PTR [rip+0x7242d]        # 7ef08 <gnutls_x509_crt_deinit@GNUTLS_3_4>
    cadb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cae0 <strftime@plt>:
    cae0:	endbr64 
    cae4:	bnd jmp QWORD PTR [rip+0x72425]        # 7ef10 <strftime@GLIBC_2.2.5>
    caeb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000caf0 <tcgetpgrp@plt>:
    caf0:	endbr64 
    caf4:	bnd jmp QWORD PTR [rip+0x7241d]        # 7ef18 <tcgetpgrp@GLIBC_2.2.5>
    cafb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cb00 <pathconf@plt>:
    cb00:	endbr64 
    cb04:	bnd jmp QWORD PTR [rip+0x72415]        # 7ef20 <pathconf@GLIBC_2.2.5>
    cb0b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cb10 <accept@plt>:
    cb10:	endbr64 
    cb14:	bnd jmp QWORD PTR [rip+0x7240d]        # 7ef28 <accept@GLIBC_2.2.5>
    cb1b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cb20 <inet_ntop@plt>:
    cb20:	endbr64 
    cb24:	bnd jmp QWORD PTR [rip+0x72405]        # 7ef30 <inet_ntop@GLIBC_2.2.5>
    cb2b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cb30 <memcpy@plt>:
    cb30:	endbr64 
    cb34:	bnd jmp QWORD PTR [rip+0x723fd]        # 7ef38 <memcpy@GLIBC_2.14>
    cb3b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cb40 <fcntl@plt>:
    cb40:	endbr64 
    cb44:	bnd jmp QWORD PTR [rip+0x723f5]        # 7ef40 <fcntl@GLIBC_2.2.5>
    cb4b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cb50 <open@plt>:
    cb50:	endbr64 
    cb54:	bnd jmp QWORD PTR [rip+0x723ed]        # 7ef48 <open@GLIBC_2.2.5>
    cb5b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cb60 <iswprint@plt>:
    cb60:	endbr64 
    cb64:	bnd jmp QWORD PTR [rip+0x723e5]        # 7ef50 <iswprint@GLIBC_2.2.5>
    cb6b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cb70 <__vasprintf_chk@plt>:
    cb70:	endbr64 
    cb74:	bnd jmp QWORD PTR [rip+0x723dd]        # 7ef58 <__vasprintf_chk@GLIBC_2.8>
    cb7b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cb80 <mmap@plt>:
    cb80:	endbr64 
    cb84:	bnd jmp QWORD PTR [rip+0x723d5]        # 7ef60 <mmap@GLIBC_2.2.5>
    cb8b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cb90 <__strncat_chk@plt>:
    cb90:	endbr64 
    cb94:	bnd jmp QWORD PTR [rip+0x723cd]        # 7ef68 <__strncat_chk@GLIBC_2.3.4>
    cb9b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cba0 <iconv_close@plt>:
    cba0:	endbr64 
    cba4:	bnd jmp QWORD PTR [rip+0x723c5]        # 7ef70 <iconv_close@GLIBC_2.2.5>
    cbab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cbb0 <rename@plt>:
    cbb0:	endbr64 
    cbb4:	bnd jmp QWORD PTR [rip+0x723bd]        # 7ef78 <rename@GLIBC_2.2.5>
    cbbb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cbc0 <strndup@plt>:
    cbc0:	endbr64 
    cbc4:	bnd jmp QWORD PTR [rip+0x723b5]        # 7ef80 <strndup@GLIBC_2.2.5>
    cbcb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cbd0 <__fdelt_chk@plt>:
    cbd0:	endbr64 
    cbd4:	bnd jmp QWORD PTR [rip+0x723ad]        # 7ef88 <__fdelt_chk@GLIBC_2.15>
    cbdb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cbe0 <mkdir@plt>:
    cbe0:	endbr64 
    cbe4:	bnd jmp QWORD PTR [rip+0x723a5]        # 7ef90 <mkdir@GLIBC_2.2.5>
    cbeb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cbf0 <time@plt>:
    cbf0:	endbr64 
    cbf4:	bnd jmp QWORD PTR [rip+0x7239d]        # 7ef98 <time@GLIBC_2.2.5>
    cbfb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cc00 <fflush@plt>:
    cc00:	endbr64 
    cc04:	bnd jmp QWORD PTR [rip+0x72395]        # 7efa0 <fflush@GLIBC_2.2.5>
    cc0b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cc10 <getc@plt>:
    cc10:	endbr64 
    cc14:	bnd jmp QWORD PTR [rip+0x7238d]        # 7efa8 <getc@GLIBC_2.2.5>
    cc1b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000cc20 <gnutls_reauth@plt>:
    cc20:	endbr64 
    cc24:	bnd jmp QWORD PTR [rip+0x72385]        # 7efb0 <gnutls_reauth@GNUTLS_3_6_3>
    cc2b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

000000000000cc30 <sockaddr_set_data.cold>:
    cc30:	call   bf50 <abort@plt>

000000000000cc35 <socket_ip_address.cold>:
    cc35:	call   bf50 <abort@plt>
    cc3a:	call   bf50 <abort@plt>

000000000000cc3f <socket_family.cold>:
    cc3f:	call   bf50 <abort@plt>

000000000000cc44 <connect_to_ip.cold>:
    cc44:	call   bf50 <abort@plt>

000000000000cc49 <bind_local.cold>:
    cc49:	call   bf50 <abort@plt>

000000000000cc4e <convert_links_in_hashtable.cold>:
    cc4e:	call   bf50 <abort@plt>

000000000000cc53 <ftp_loop_internal.cold>:
    cc53:	call   bf50 <abort@plt>
    cc58:	call   bf50 <abort@plt>

000000000000cc5d <ftp_lprt.cold>:
    cc5d:	call   bf50 <abort@plt>

000000000000cc62 <ftp_parse_unix_ls.cold>:
    cc62:	call   bf50 <abort@plt>

000000000000cc67 <hash_table_new.cold>:
    cc67:	call   bf50 <abort@plt>

000000000000cc6c <hash_table_put.cold>:
    cc6c:	call   bf50 <abort@plt>

000000000000cc71 <address_list_contains.cold>:
    cc71:	call   bf50 <abort@plt>

000000000000cc76 <check_auth.cold>:
    cc76:	call   bf50 <abort@plt>

000000000000cc7b <http_loop.cold>:
    cc7b:	call   bf50 <abort@plt>
    cc80:	call   bf50 <abort@plt>

000000000000cc85 <run_wgetrc.cold>:
    cc85:	call   bf50 <abort@plt>

000000000000cc8a <escnonprint_internal.cold>:
    cc8a:	call   bf50 <abort@plt>

000000000000cc8f <set_progress_implementation.cold>:
    cc8f:	call   bf50 <abort@plt>

000000000000cc94 <fmttime.cold>:
    cc94:	call   bf50 <abort@plt>

000000000000cc99 <ssl_init.cold>:
    cc99:	call   bf50 <abort@plt>

000000000000cc9e <quotearg_buffer_restyled.cold>:
    cc9e:	call   bf50 <abort@plt>

000000000000cca3 <quotearg_n_options.cold>:
    cca3:	call   bf50 <abort@plt>

000000000000cca8 <set_custom_quoting.cold>:
    cca8:	call   bf50 <abort@plt>

000000000000ccad <quotearg_n_style.cold>:
    ccad:	call   bf50 <abort@plt>

000000000000ccb2 <quotearg_n_style_mem.cold>:
    ccb2:	call   bf50 <abort@plt>

000000000000ccb7 <quotearg_n_style_colon.cold>:
    ccb7:	call   bf50 <abort@plt>

000000000000ccbc <quotearg_n_custom_mem.cold>:
    ccbc:	call   bf50 <abort@plt>

000000000000ccc1 <re_compile_internal.cold>:
    ccc1:	call   bf50 <abort@plt>

000000000000ccc6 <rpl_regerror.cold>:
    ccc6:	call   bf50 <abort@plt>
    cccb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000ccd0 <main>:
    ccd0:	endbr64 
    ccd4:	push   r15
    ccd6:	push   r14
    ccd8:	mov    r14d,edi
    ccdb:	push   r13
    ccdd:	push   r12
    ccdf:	push   rbp
    cce0:	push   rbx
    cce1:	mov    rbx,rsi
    cce4:	sub    rsp,0x118
    cceb:	mov    DWORD PTR [rsp+0x20],edi
    ccef:	mov    rax,QWORD PTR fs:0x28
    ccf8:	mov    QWORD PTR [rsp+0x108],rax
    cd00:	xor    eax,eax
    cd02:	mov    DWORD PTR [rip+0x7d354],0x0        # 8a060 <cleaned_up>
    cd0c:	call   31c00 <ptimer_new>
    cd11:	mov    rdi,rax
    cd14:	mov    QWORD PTR [rip+0x7d6fd],rax        # 8a418 <timer>
    cd1b:	call   31db0 <ptimer_measure>
    cd20:	mov    rax,QWORD PTR [rbx]
    cd23:	mov    edi,0x6
    cd28:	lea    rsi,[rip+0x616e8]        # 6e417 <urlchr_table+0x877>
    cd2f:	movsd  QWORD PTR [rsp+0x28],xmm0
    cd35:	mov    QWORD PTR [rip+0x7d6f0],0x0        # 8a430 <total_downloaded_bytes>
    cd40:	mov    QWORD PTR [rip+0x7d6e1],rax        # 8a428 <program_name>
    cd47:	call   ca30 <setlocale@plt>
    cd4c:	lea    rsi,[rip+0x5bbf4]        # 68947 <primes.6089+0x2867>
    cd53:	lea    rdi,[rip+0x5bc30]        # 6898a <primes.6089+0x28aa>
    cd5a:	call   c090 <bindtextdomain@plt>
    cd5f:	lea    rsi,[rip+0x5bbe1]        # 68947 <primes.6089+0x2867>
    cd66:	lea    rdi,[rip+0x5bc22]        # 6898f <primes.6089+0x28af>
    cd6d:	call   c090 <bindtextdomain@plt>
    cd72:	lea    rdi,[rip+0x5bc11]        # 6898a <primes.6089+0x28aa>
    cd79:	call   c020 <textdomain@plt>
    cd7e:	mov    rdi,QWORD PTR [rbx]
    cd81:	call   497d0 <base_name>
    cd86:	mov    QWORD PTR [rip+0x7d693],rax        # 8a420 <exec_name>
    cd8d:	cmp    r14d,0x1
    cd91:	jle    e55f <main+0x188f>
    cd97:	lea    r12,[rbx+0x8]
    cd9b:	lea    eax,[r14-0x2]
    cd9f:	mov    r15d,0x1
    cda5:	lea    r14,[rbx+rax*8+0x10]
    cdaa:	mov    rbp,r12
    cdad:	nop    DWORD PTR [rax]
    cdb0:	mov    rdi,QWORD PTR [rbp+0x0]
    cdb4:	add    rbp,0x8
    cdb8:	call   c310 <strlen@plt>
    cdbd:	lea    r15d,[r15+rax*1+0x4]
    cdc2:	cmp    r14,rbp
    cdc5:	jne    cdb0 <main+0xe0>
    cdc7:	movsxd rdi,r15d
    cdca:	call   c0e0 <malloc@plt>
    cdcf:	mov    QWORD PTR [rip+0x7d292],rax        # 8a068 <program_argstring>
    cdd6:	mov    rdx,rax
    cdd9:	test   rax,rax
    cddc:	je     e57c <main+0x18ac>
    cde2:	nop    WORD PTR [rax+rax*1+0x0]
    cde8:	mov    r13,QWORD PTR [r12]
    cdec:	mov    BYTE PTR [rdx],0x22
    cdef:	lea    rbp,[rdx+0x1]
    cdf3:	add    r12,0x8
    cdf7:	mov    rdi,r13
    cdfa:	call   c310 <strlen@plt>
    cdff:	mov    rsi,r13
    ce02:	mov    rdi,rbp
    ce05:	movsxd r15,eax
    ce08:	mov    rdx,r15
    ce0b:	call   cb30 <memcpy@plt>
    ce10:	lea    rax,[rbp+r15*1+0x0]
    ce15:	mov    ecx,0x2022
    ce1a:	mov    WORD PTR [rax],cx
    ce1d:	lea    rdx,[rax+0x2]
    ce21:	cmp    r14,r12
    ce24:	jne    cde8 <main+0x118>
    ce26:	mov    BYTE PTR [rdx],0x0
    ce29:	call   2c510 <defaults>
    ce2e:	call   2c6e0 <home_dir>
    ce33:	cmp    BYTE PTR [rip+0x7a3c6],0x0        # 87200 <initialized.9106>
    ce3a:	mov    QWORD PTR [rip+0x7d5b7],rax        # 8a3f8 <opt+0x378>
    ce41:	jne    d013 <main+0x343>
    ce47:	mov    BYTE PTR [rip+0x7a3b2],0x1        # 87200 <initialized.9106>
    ce4e:	lea    rsi,[rip+0x7246b]        # 7f2c0 <option_data>
    ce55:	xor    r8d,r8d
    ce58:	xor    r13d,r13d
    ce5b:	lea    rdx,[rip+0x7a41e]        # 87280 <short_options>
    ce62:	lea    r14,[rip+0x7a497]        # 87300 <long_options>
    ce69:	jmp    cec5 <main+0x1f5>
    ce6b:	nop    DWORD PTR [rax+rax*1+0x0]
    ce70:	mov    BYTE PTR [rdx],al
    ce72:	sub    eax,0x20
    ce75:	sar    rdi,0x5
    ce79:	lea    r9,[rdx+0x1]
    ce7d:	cdqe   
    ce7f:	lea    rcx,[rip+0x7a39a]        # 87220 <optmap>
    ce86:	mov    BYTE PTR [rcx+rax*1],dil
    ce8a:	test   r11d,r11d
    ce8d:	je     cfd8 <main+0x308>
    ce93:	cmp    r11d,0x1
    ce97:	je     cf10 <main+0x240>
    ce99:	mov    eax,DWORD PTR [rsi+0x28]
    ce9c:	mov    DWORD PTR [rbp+0x8],eax
    ce9f:	cmp    eax,0x1
    cea2:	je     d000 <main+0x330>
    cea8:	mov    r13,r15
    ceab:	mov    rdx,r9
    ceae:	xchg   ax,ax
    ceb0:	add    r8,0x1
    ceb4:	add    rsi,0x30
    ceb8:	cmp    r8,0xa2
    cebf:	je     d010 <main+0x340>
    cec5:	mov    rdi,r13
    cec8:	movsx  eax,BYTE PTR [rsi+0x1a]
    cecc:	mov    r11d,DWORD PTR [rsi+0x1c]
    ced0:	lea    r15,[r13+0x1]
    ced4:	shl    rdi,0x5
    ced8:	mov    r12d,r8d
    cedb:	lea    rbp,[r14+rdi*1]
    cedf:	mov    QWORD PTR [rbp+0x0],rsi
    cee3:	mov    DWORD PTR [rbp+0x18],r8d
    cee7:	test   al,al
    cee9:	jne    ce70 <main+0x1a0>
    ceeb:	test   r11d,r11d
    ceee:	je     cff0 <main+0x320>
    cef4:	mov    r9,rdx
    cef7:	cmp    r11d,0x1
    cefb:	je     cf10 <main+0x240>
    cefd:	mov    eax,DWORD PTR [rsi+0x28]
    cf00:	mov    r13,r15
    cf03:	mov    DWORD PTR [rbp+0x8],eax
    cf06:	jmp    ceb0 <main+0x1e0>
    cf08:	nop    DWORD PTR [rax+rax*1+0x0]
    cf10:	mov    rax,r13
    cf13:	mov    rdx,QWORD PTR [rip+0x72386]        # 7f2a0 <p.9097>
    cf1a:	add    r13,0x2
    cf1e:	mov    rbp,rsi
    cf21:	shl    rax,0x5
    cf25:	mov    DWORD PTR [r14+rax*1+0x8],0x2
    cf2e:	mov    edi,DWORD PTR [rbp+0x0]
    cf31:	add    rbp,0x4
    cf35:	lea    eax,[rdi-0x1010101]
    cf3b:	not    edi
    cf3d:	and    eax,edi
    cf3f:	and    eax,0x80808080
    cf44:	je     cf2e <main+0x25e>
    cf46:	mov    edi,eax
    cf48:	mov    BYTE PTR [rdx+0x2],0x2d
    cf4c:	shr    edi,0x10
    cf4f:	test   eax,0x8080
    cf54:	mov    QWORD PTR [rsp+0x18],r8
    cf59:	cmove  eax,edi
    cf5c:	lea    rdi,[rbp+0x2]
    cf60:	mov    QWORD PTR [rsp+0x10],r9
    cf65:	cmove  rbp,rdi
    cf69:	lea    rdi,[rdx+0x3]
    cf6d:	mov    QWORD PTR [rsp+0x8],rdx
    cf72:	mov    ecx,eax
    cf74:	mov    QWORD PTR [rsp],rsi
    cf78:	add    cl,al
    cf7a:	mov    eax,0x6f6e
    cf7f:	mov    WORD PTR [rdx],ax
    cf82:	sbb    rbp,0x3
    cf86:	shl    r15,0x5
    cf8a:	or     r12d,0x400
    cf91:	sub    rbp,rsi
    cf94:	add    r15,r14
    cf97:	call   c830 <strcpy@plt>
    cf9c:	lea    eax,[rbp+0x4]
    cf9f:	mov    DWORD PTR [r15+0x18],r12d
    cfa3:	mov    rsi,QWORD PTR [rsp]
    cfa7:	mov    rdx,QWORD PTR [rsp+0x8]
    cfac:	mov    r9,QWORD PTR [rsp+0x10]
    cfb1:	mov    DWORD PTR [r15+0x8],0x0
    cfb9:	mov    r8,QWORD PTR [rsp+0x18]
    cfbe:	add    rax,rdx
    cfc1:	mov    QWORD PTR [r15],rdx
    cfc4:	mov    rdx,r9
    cfc7:	mov    QWORD PTR [rip+0x722d2],rax        # 7f2a0 <p.9097>
    cfce:	jmp    ceb0 <main+0x1e0>
    cfd3:	nop    DWORD PTR [rax+rax*1+0x0]
    cfd8:	mov    BYTE PTR [rdx+0x1],0x3a
    cfdc:	mov    r13,r15
    cfdf:	add    rdx,0x2
    cfe3:	mov    DWORD PTR [rbp+0x8],0x1
    cfea:	jmp    ceb0 <main+0x1e0>
    cfef:	nop
    cff0:	mov    DWORD PTR [rbp+0x8],0x1
    cff7:	mov    r13,r15
    cffa:	jmp    ceb0 <main+0x1e0>
    cfff:	nop
    d000:	mov    BYTE PTR [rdx+0x1],0x3a
    d004:	mov    r13,r15
    d007:	add    rdx,0x2
    d00b:	jmp    ceb0 <main+0x1e0>
    d010:	mov    BYTE PTR [rdx],0x0
    d013:	mov    DWORD PTR [rsp+0x3c],0xffffffff
    d01b:	lea    r15,[rsp+0x3c]
    d020:	lea    r12,[rip+0x72299]        # 7f2c0 <option_data>
    d027:	lea    rbp,[rip+0x5b988]        # 689b6 <primes.6089+0x28d6>
    d02e:	lea    r14,[rip+0x5b984]        # 689b9 <primes.6089+0x28d9>
    d035:	nop    DWORD PTR [rax]
    d038:	mov    edi,DWORD PTR [rsp+0x20]
    d03c:	mov    r8,r15
    d03f:	mov    rsi,rbx
    d042:	lea    rcx,[rip+0x7a2b7]        # 87300 <long_options>
    d049:	lea    rdx,[rip+0x7a230]        # 87280 <short_options>
    d050:	call   c6e0 <getopt_long@plt>
    d055:	cmp    eax,0xffffffff
    d058:	je     df65 <main+0x1295>
    d05e:	movsxd rax,DWORD PTR [rsp+0x3c]
    d063:	test   eax,eax
    d065:	js     d038 <main+0x368>
    d067:	shl    rax,0x5
    d06b:	lea    rdx,[rip+0x7a28e]        # 87300 <long_options>
    d072:	mov    ecx,0xa
    d077:	mov    rdi,rbp
    d07a:	mov    eax,DWORD PTR [rdx+rax*1+0x18]
    d07e:	and    ah,0xfb
    d081:	cdqe   
    d083:	lea    rax,[rax+rax*2]
    d087:	shl    rax,0x4
    d08b:	add    rax,r12
    d08e:	mov    rsi,rax
    d091:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    d093:	seta   dl
    d096:	sbb    dl,0x0
    d099:	test   dl,dl
    d09b:	je     d0f3 <main+0x423>
    d09d:	mov    rsi,rax
    d0a0:	mov    ecx,0x7
    d0a5:	mov    rdi,r14
    d0a8:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
    d0aa:	seta   al
    d0ad:	sbb    al,0x0
    d0af:	movsx  eax,al
    d0b2:	test   eax,eax
    d0b4:	jne    d038 <main+0x368>
    d0b6:	lea    rbp,[rsp+0x50]
    d0bb:	mov    ecx,0x6
    d0c0:	mov    rdi,rbp
    d0c3:	mov    rsi,rbp
    d0c6:	rep stos DWORD PTR es:[rdi],eax
    d0c8:	mov    rdi,QWORD PTR [rip+0x76409]        # 834d8 <optarg@@GLIBC_2.2.5>
    d0cf:	call   3bed0 <file_exists_p>
    d0d4:	test   al,al
    d0d6:	je     e86a <main+0x1b9a>
    d0dc:	mov    rdi,QWORD PTR [rip+0x763f5]        # 834d8 <optarg@@GLIBC_2.2.5>
    d0e3:	mov    rsi,rbp
    d0e6:	call   2c8f0 <run_wgetrc>
    d0eb:	test   al,al
    d0ed:	je     e86a <main+0x1b9a>
    d0f3:	mov    DWORD PTR [rsp+0x3c],0xffffffff
    d0fb:	lea    r14,[rip+0x721be]        # 7f2c0 <option_data>
    d102:	lea    rbp,[rip+0x5fa87]        # 6cb90 <primes.6089+0x6ab0>
    d109:	mov    DWORD PTR [rip+0x763ad],0x0        # 834c0 <opterr@@GLIBC_2.2.5>
    d113:	mov    DWORD PTR [rip+0x76393],0x0        # 834b0 <optind@@GLIBC_2.2.5>
    d11d:	mov    BYTE PTR [rsp+0x8],0x0
    d122:	nop    WORD PTR [rax+rax*1+0x0]
    d128:	mov    edi,DWORD PTR [rsp+0x20]
    d12c:	mov    r8,r15
    d12f:	mov    rsi,rbx
    d132:	lea    rcx,[rip+0x7a1c7]        # 87300 <long_options>
    d139:	lea    rdx,[rip+0x7a140]        # 87280 <short_options>
    d140:	call   c6e0 <getopt_long@plt>
    d145:	cmp    eax,0xffffffff
    d148:	je     d420 <main+0x750>
    d14e:	movsxd rdx,DWORD PTR [rsp+0x3c]
    d153:	cmp    edx,0xffffffff
    d156:	je     d3d8 <main+0x708>
    d15c:	shl    rdx,0x5
    d160:	lea    rax,[rip+0x7a199]        # 87300 <long_options>
    d167:	mov    esi,DWORD PTR [rax+rdx*1+0x18]
    d16b:	mov    eax,esi
    d16d:	and    ah,0xfb
    d170:	cdqe   
    d172:	lea    rdx,[rax+rax*2]
    d176:	shl    rdx,0x4
    d17a:	mov    ecx,DWORD PTR [r14+rdx*1+0x1c]
    d17f:	cmp    ecx,0x8
    d182:	ja     d1fd <main+0x52d>
    d184:	mov    edx,ecx
    d186:	movsxd rdx,DWORD PTR [rbp+rdx*4+0x0]
    d18b:	add    rdx,rbp
    d18e:	notrack jmp rdx
    d191:	nop    DWORD PTR [rax+0x0]
    d198:	lea    rdx,[rax+rax*2]
    d19c:	mov    rsi,QWORD PTR [rip+0x76335]        # 834d8 <optarg@@GLIBC_2.2.5>
    d1a3:	lea    r8,[rip+0x61a22]        # 6ebcc <CSWTCH.5+0x38c>
    d1aa:	shl    rdx,0x4
    d1ae:	add    rdx,r14
    d1b1:	test   rsi,rsi
    d1b4:	je     d1e0 <main+0x510>
    d1b6:	movsx  eax,BYTE PTR [rsi]
    d1b9:	cmp    al,0x31
    d1bb:	je     d1e0 <main+0x510>
    d1bd:	lea    r9d,[rax-0x41]
    d1c1:	lea    edi,[rax+0x20]
    d1c4:	cmp    r9d,0x1a
    d1c8:	cmovb  eax,edi
    d1cb:	cmp    eax,0x79
    d1ce:	je     d1e0 <main+0x510>
    d1d0:	lea    r8,[rip+0x5a401]        # 675d8 <primes.6089+0x14f8>
    d1d7:	cmp    eax,0x6f
    d1da:	je     e183 <main+0x14b3>
    d1e0:	cmp    ecx,0x8
    d1e3:	lea    rdi,[rip+0x5ae71]        # 6805b <primes.6089+0x1f7b>
    d1ea:	lea    rax,[rip+0x5ae7d]        # 6806e <primes.6089+0x1f8e>
    d1f1:	cmove  rdi,rax
    d1f5:	mov    rsi,r8
    d1f8:	call   2cee0 <setoptval>
    d1fd:	mov    DWORD PTR [rsp+0x3c],0xffffffff
    d205:	jmp    d128 <main+0x458>
    d20a:	nop    WORD PTR [rax+rax*1+0x0]
    d210:	lea    rax,[rax+rax*2]
    d214:	mov    rsi,QWORD PTR [rip+0x762bd]        # 834d8 <optarg@@GLIBC_2.2.5>
    d21b:	shl    rax,0x4
    d21f:	add    rax,r14
    d222:	mov    rdi,QWORD PTR [rax+0x20]
    d226:	mov    rdx,rax
    d229:	call   2cee0 <setoptval>
    d22e:	jmp    d1fd <main+0x52d>
    d230:	mov    r13,QWORD PTR [rip+0x762a1]        # 834d8 <optarg@@GLIBC_2.2.5>
    d237:	test   r13,r13
    d23a:	je     d1fd <main+0x52d>
    d23c:	lea    r12,[rax+rax*2]
    d240:	shl    r12,0x4
    d244:	add    r12,r14
    d247:	jmp    d26a <main+0x59a>
    d249:	nop    DWORD PTR [rax+0x0]
    d250:	mov    rdx,r12
    d253:	lea    rsi,[rip+0x61972]        # 6ebcc <CSWTCH.5+0x38c>
    d25a:	lea    rdi,[rip+0x5aa7d]        # 67cde <primes.6089+0x1bfe>
    d261:	call   2cee0 <setoptval>
    d266:	add    r13,0x1
    d26a:	movzx  r8d,BYTE PTR [r13+0x0]
    d26f:	test   r8b,r8b
    d272:	je     d1fd <main+0x52d>
    d274:	cmp    r8b,0x64
    d278:	je     d400 <main+0x730>
    d27e:	jg     d388 <main+0x6b8>
    d284:	cmp    r8b,0x48
    d288:	je     d250 <main+0x580>
    d28a:	cmp    r8b,0x63
    d28e:	jne    e614 <main+0x1944>
    d294:	mov    rdx,r12
    d297:	lea    rsi,[rip+0x5a33a]        # 675d8 <primes.6089+0x14f8>
    d29e:	lea    rdi,[rip+0x5adb6]        # 6805b <primes.6089+0x1f7b>
    d2a5:	call   2cee0 <setoptval>
    d2aa:	jmp    d266 <main+0x596>
    d2ac:	nop    DWORD PTR [rax+0x0]
    d2b0:	lea    rax,[rax+rax*2]
    d2b4:	shl    rax,0x4
    d2b8:	call   QWORD PTR [r14+rax*1+0x20]
    d2bd:	jmp    d1fd <main+0x52d>
    d2c2:	nop    WORD PTR [rax+rax*1+0x0]
    d2c8:	lea    rdx,[rax+rax*2]
    d2cc:	mov    r8,QWORD PTR [rip+0x76205]        # 834d8 <optarg@@GLIBC_2.2.5>
    d2d3:	shl    rdx,0x4
    d2d7:	add    rdx,r14
    d2da:	mov    rdi,QWORD PTR [rdx+0x20]
    d2de:	test   r8,r8
    d2e1:	jne    d1f5 <main+0x525>
    d2e7:	and    esi,0x400
    d2ed:	lea    rax,[rip+0x5a2e4]        # 675d8 <primes.6089+0x14f8>
    d2f4:	lea    rsi,[rip+0x618d1]        # 6ebcc <CSWTCH.5+0x38c>
    d2fb:	cmove  rsi,rax
    d2ff:	call   2cee0 <setoptval>
    d304:	jmp    d1fd <main+0x52d>
    d309:	nop    DWORD PTR [rax+0x0]
    d310:	lea    rdx,[rax+rax*2]
    d314:	mov    rsi,QWORD PTR [rip+0x761bd]        # 834d8 <optarg@@GLIBC_2.2.5>
    d31b:	lea    rdi,[rip+0x5ad11]        # 68033 <primes.6089+0x1f53>
    d322:	shl    rdx,0x4
    d326:	add    rdx,r14
    d329:	call   2cee0 <setoptval>
    d32e:	mov    BYTE PTR [rsp+0x8],0x1
    d333:	jmp    d1fd <main+0x52d>
    d338:	nop    DWORD PTR [rax+rax*1+0x0]
    d340:	mov    rdi,QWORD PTR [rip+0x76191]        # 834d8 <optarg@@GLIBC_2.2.5>
    d347:	test   rdi,rdi
    d34a:	je     d1fd <main+0x52d>
    d350:	call   2cf80 <run_command>
    d355:	jmp    d1fd <main+0x52d>
    d35a:	nop    WORD PTR [rax+rax*1+0x0]
    d360:	lea    rdx,[rax+rax*2]
    d364:	lea    rsi,[rip+0x61861]        # 6ebcc <CSWTCH.5+0x38c>
    d36b:	shl    rdx,0x4
    d36f:	lea    rdi,[rip+0x5ae55]        # 681cb <primes.6089+0x20eb>
    d376:	add    rdx,r14
    d379:	call   2cee0 <setoptval>
    d37e:	jmp    d1fd <main+0x52d>
    d383:	nop    DWORD PTR [rax+rax*1+0x0]
    d388:	cmp    r8b,0x70
    d38c:	jne    d3b0 <main+0x6e0>
    d38e:	mov    rdx,r12
    d391:	lea    rsi,[rip+0x5a240]        # 675d8 <primes.6089+0x14f8>
    d398:	lea    rdi,[rip+0x5accf]        # 6806e <primes.6089+0x1f8e>
    d39f:	call   2cee0 <setoptval>
    d3a4:	jmp    d266 <main+0x596>
    d3a9:	nop    DWORD PTR [rax+0x0]
    d3b0:	cmp    r8b,0x76
    d3b4:	jne    e614 <main+0x1944>
    d3ba:	mov    rdx,r12
    d3bd:	lea    rsi,[rip+0x61808]        # 6ebcc <CSWTCH.5+0x38c>
    d3c4:	lea    rdi,[rip+0x5af3a]        # 68305 <primes.6089+0x2225>
    d3cb:	call   2cee0 <setoptval>
    d3d0:	jmp    d266 <main+0x596>
    d3d5:	nop    DWORD PTR [rax]
    d3d8:	cmp    eax,0x3f
    d3db:	je     e6d6 <main+0x1a06>
    d3e1:	sub    eax,0x20
    d3e4:	lea    rcx,[rip+0x79e35]        # 87220 <optmap>
    d3eb:	cdqe   
    d3ed:	movzx  edx,BYTE PTR [rcx+rax*1]
    d3f1:	mov    DWORD PTR [rsp+0x3c],edx
    d3f5:	jmp    d15c <main+0x48c>
    d3fa:	nop    WORD PTR [rax+rax*1+0x0]
    d400:	mov    rdx,r12
    d403:	lea    rsi,[rip+0x617c2]        # 6ebcc <CSWTCH.5+0x38c>
    d40a:	lea    rdi,[rip+0x5aa24]        # 67e35 <primes.6089+0x1d55>
    d411:	call   2cee0 <setoptval>
    d416:	jmp    d266 <main+0x596>
    d41b:	nop    DWORD PTR [rax+rax*1+0x0]
    d420:	movzx  ebp,BYTE PTR [rsp+0x8]
    d425:	mov    rdi,QWORD PTR [rip+0x7cc94]        # 8a0c0 <opt+0x40>
    d42c:	mov    eax,DWORD PTR [rsp+0x20]
    d430:	sub    eax,DWORD PTR [rip+0x7607a]        # 834b0 <optind@@GLIBC_2.2.5>
    d436:	mov    esi,ebp
    d438:	mov    DWORD PTR [rsp],eax
    d43b:	call   2da30 <log_init>
    d440:	cmp    BYTE PTR [rip+0x7cc6b],0x0        # 8a0b2 <opt+0x32>
    d447:	je     d490 <main+0x7c0>
    d449:	cmp    WORD PTR [rip+0x7ce87],0x0        # 8a2d8 <opt+0x258>
    d451:	je     d490 <main+0x7c0>
    d453:	cmp    BYTE PTR [rip+0x7ce7e],0x0        # 8a2d8 <opt+0x258>
    d45a:	mov    edx,0x5
    d45f:	je     e1f0 <main+0x1520>
    d465:	lea    rsi,[rip+0x5b9ec]        # 68e58 <primes.6089+0x2d78>
    d46c:	xor    edi,edi
    d46e:	call   c780 <dcgettext@plt>
    d473:	mov    rdx,rax
    d476:	mov    rdi,QWORD PTR [rip+0x76063]        # 834e0 <stderr@@GLIBC_2.2.5>
    d47d:	mov    esi,0x1
    d482:	xor    eax,eax
    d484:	call   bfd0 <__fprintf_chk@plt>
    d489:	mov    BYTE PTR [rip+0x7cc22],0x0        # 8a0b2 <opt+0x32>
    d490:	mov    r12d,DWORD PTR [rip+0x7cc0d]        # 8a0a4 <opt+0x24>
    d497:	test   r12d,r12d
    d49a:	jne    d4a6 <main+0x7d6>
    d49c:	mov    DWORD PTR [rip+0x7cbfe],0xffffffff        # 8a0a4 <opt+0x24>
    d4a6:	cmp    BYTE PTR [rip+0x7cc3b],0x0        # 8a0e8 <opt+0x68>
    d4ad:	je     dd14 <main+0x1044>
    d4b3:	mov    BYTE PTR [rip+0x7cbef],0x1        # 8a0a9 <opt+0x29>
    d4ba:	movzx  eax,BYTE PTR [rip+0x7ce39]        # 8a2fa <opt+0x27a>
    d4c1:	test   al,al
    d4c3:	je     d4e8 <main+0x818>
    d4c5:	cmp    BYTE PTR [rip+0x7cbce],0x0        # 8a09a <opt+0x1a>
    d4cc:	jne    d4e8 <main+0x818>
    d4ce:	cmp    BYTE PTR [rip+0x7cbd4],0x0        # 8a0a9 <opt+0x29>
    d4d5:	mov    DWORD PTR [rip+0x7cbc5],0x0        # 8a0a4 <opt+0x24>
    d4df:	je     e1e4 <main+0x1514>
    d4e5:	nop    DWORD PTR [rax]
    d4e8:	cmp    DWORD PTR [rip+0x7cb91],0xffffffff        # 8a080 <opt>
    d4ef:	movzx  edx,BYTE PTR [rip+0x7cb8e]        # 8a084 <opt+0x4>
    d4f6:	jne    d506 <main+0x836>
    d4f8:	mov    ecx,edx
    d4fa:	xor    ecx,0x1
    d4fd:	movzx  ecx,cl
    d500:	mov    DWORD PTR [rip+0x7cb7a],ecx        # 8a080 <opt>
    d506:	mov    r11d,DWORD PTR [rip+0x7cb73]        # 8a080 <opt>
    d50d:	test   r11d,r11d
    d510:	jne    dce8 <main+0x1018>
    d516:	cmp    DWORD PTR [rip+0x7cd3b],0xffffffff        # 8a258 <opt+0x1d8>
    d51d:	jne    d529 <main+0x859>
    d51f:	mov    DWORD PTR [rip+0x7cd2f],0x0        # 8a258 <opt+0x1d8>
    d529:	cmp    BYTE PTR [rip+0x7cd8c],0x0        # 8a2bc <opt+0x23c>
    d530:	je     d53f <main+0x86f>
    d532:	cmp    BYTE PTR [rip+0x7cb79],0x0        # 8a0b2 <opt+0x32>
    d539:	jne    e82d <main+0x1b5d>
    d53f:	cmp    BYTE PTR [rip+0x7ce78],0x0        # 8a3be <opt+0x33e>
    d546:	je     d561 <main+0x891>
    d548:	cmp    BYTE PTR [rip+0x7ce70],0x0        # 8a3bf <opt+0x33f>
    d54f:	mov    edx,0x5
    d554:	lea    rsi,[rip+0x5ba35]        # 68f90 <primes.6089+0x2eb0>
    d55b:	jne    e839 <main+0x1b69>
    d561:	cmp    QWORD PTR [rip+0x7cc17],0x0        # 8a180 <opt+0x100>
    d569:	je     ded6 <main+0x1206>
    d56f:	cmp    WORD PTR [rip+0x7cd61],0x0        # 8a2d8 <opt+0x258>
    d577:	je     df9b <main+0x12cb>
    d57d:	cmp    DWORD PTR [rsp],0x1
    d581:	jg     e7f4 <main+0x1b24>
    d587:	test   al,al
    d589:	jne    e7f4 <main+0x1b24>
    d58f:	cmp    BYTE PTR [rip+0x7cb04],0x0        # 8a09a <opt+0x1a>
    d596:	jne    e7f4 <main+0x1b24>
    d59c:	cmp    BYTE PTR [rip+0x7cd19],0x0        # 8a2bc <opt+0x23c>
    d5a3:	jne    e2cf <main+0x15ff>
    d5a9:	cmp    BYTE PTR [rip+0x7cb02],0x0        # 8a0b2 <opt+0x32>
    d5b0:	jne    dec0 <main+0x11f0>
    d5b6:	cmp    QWORD PTR [rip+0x7cbca],0x0        # 8a188 <opt+0x108>
    d5be:	je     d65c <main+0x98c>
    d5c4:	cmp    BYTE PTR [rip+0x7ccf1],0x0        # 8a2bc <opt+0x23c>
    d5cb:	jne    e29a <main+0x15ca>
    d5d1:	cmp    BYTE PTR [rip+0x7cb10],0x0        # 8a0e8 <opt+0x68>
    d5d8:	mov    edx,0x5
    d5dd:	lea    rsi,[rip+0x5bbf4]        # 691d8 <primes.6089+0x30f8>
    d5e4:	jne    e03f <main+0x136f>
    d5ea:	cmp    BYTE PTR [rip+0x7cbef],0x0        # 8a1e0 <opt+0x160>
    d5f1:	jne    d5fd <main+0x92d>
    d5f3:	cmp    QWORD PTR [rip+0x7cbed],0x0        # 8a1e8 <opt+0x168>
    d5fb:	js     d638 <main+0x968>
    d5fd:	mov    edx,0x5
    d602:	lea    rsi,[rip+0x5bbff]        # 69208 <primes.6089+0x3128>
    d609:	xor    edi,edi
    d60b:	call   c780 <dcgettext@plt>
    d610:	mov    rdi,QWORD PTR [rip+0x75ec9]        # 834e0 <stderr@@GLIBC_2.2.5>
    d617:	mov    esi,0x1
    d61c:	mov    rdx,rax
    d61f:	xor    eax,eax
    d621:	call   bfd0 <__fprintf_chk@plt>
    d626:	mov    BYTE PTR [rip+0x7cbb3],0x0        # 8a1e0 <opt+0x160>
    d62d:	mov    QWORD PTR [rip+0x7cbb0],0xffffffffffffffff        # 8a1e8 <opt+0x168>
    d638:	cmp    QWORD PTR [rip+0x7cb58],0x0        # 8a198 <opt+0x118>
    d640:	je     d64f <main+0x97f>
    d642:	cmp    BYTE PTR [rip+0x7cb60],0x0        # 8a1a9 <opt+0x129>
    d649:	je     e4e7 <main+0x1817>
    d64f:	cmp    BYTE PTR [rip+0x7cb55],0x0        # 8a1ab <opt+0x12b>
    d656:	jne    e282 <main+0x15b2>
    d65c:	cmp    BYTE PTR [rip+0x7cb6d],0x0        # 8a1d0 <opt+0x150>
    d663:	je     d68d <main+0x9bd>
    d665:	cmp    QWORD PTR [rip+0x7cb5b],0x0        # 8a1c8 <opt+0x148>
    d66d:	mov    edx,0x5
    d672:	lea    rsi,[rip+0x5bc37]        # 692b0 <primes.6089+0x31d0>
    d679:	jne    e839 <main+0x1b69>
    d67f:	cmp    QWORD PTR [rip+0x7cb39],0x0        # 8a1c0 <opt+0x140>
    d687:	je     e515 <main+0x1845>
    d68d:	cmp    QWORD PTR [rip+0x7cb53],0x0        # 8a1e8 <opt+0x168>
    d695:	js     d6a4 <main+0x9d4>
    d697:	cmp    BYTE PTR [rip+0x7cb42],0x0        # 8a1e0 <opt+0x160>
    d69e:	jne    e48b <main+0x17bb>
    d6a4:	mov    r10d,DWORD PTR [rsp]
    d6a8:	test   r10d,r10d
    d6ab:	jne    d6bb <main+0x9eb>
    d6ad:	cmp    QWORD PTR [rip+0x7ca13],0x0        # 8a0c8 <opt+0x48>
    d6b5:	je     e798 <main+0x1ac8>
    d6bb:	lea    rax,[rip+0x3185e]        # 3ef20 <compile_posix_regex>
    d6c2:	mov    rdi,QWORD PTR [rip+0x7ca4f]        # 8a118 <opt+0x98>
    d6c9:	mov    QWORD PTR [rip+0x7ca70],rax        # 8a140 <opt+0xc0>
    d6d0:	lea    rax,[rip+0x31909]        # 3efe0 <match_posix_regex>
    d6d7:	mov    QWORD PTR [rip+0x7ca6a],rax        # 8a148 <opt+0xc8>
    d6de:	test   rdi,rdi
    d6e1:	je     d6f8 <main+0xa28>
    d6e3:	call   3ef20 <compile_posix_regex>
    d6e8:	mov    QWORD PTR [rip+0x7ca39],rax        # 8a128 <opt+0xa8>
    d6ef:	test   rax,rax
    d6f2:	je     e05c <main+0x138c>
    d6f8:	mov    rdi,QWORD PTR [rip+0x7ca21]        # 8a120 <opt+0xa0>
    d6ff:	test   rdi,rdi
    d702:	je     d71a <main+0xa4a>
    d704:	call   QWORD PTR [rip+0x7ca36]        # 8a140 <opt+0xc0>
    d70a:	mov    QWORD PTR [rip+0x7ca1f],rax        # 8a130 <opt+0xb0>
    d711:	test   rax,rax
    d714:	je     e05c <main+0x138c>
    d71a:	cmp    QWORD PTR [rip+0x7cc66],0x0        # 8a388 <opt+0x308>
    d722:	mov    rax,QWORD PTR [rip+0x7cc67]        # 8a390 <opt+0x310>
    d729:	je     e113 <main+0x1443>
    d72f:	mov    edx,0x5
    d734:	lea    rsi,[rip+0x5bc65]        # 693a0 <primes.6089+0x32c0>
    d73b:	test   rax,rax
    d73e:	jne    e03f <main+0x136f>
    d744:	cmp    QWORD PTR [rip+0x7cc4c],0x0        # 8a398 <opt+0x318>
    d74c:	jne    e7d0 <main+0x1b00>
    d752:	cmp    QWORD PTR [rip+0x7cc46],0x0        # 8a3a0 <opt+0x320>
    d75a:	jne    e033 <main+0x1363>
    d760:	cmp    QWORD PTR [rip+0x7cc40],0x0        # 8a3a8 <opt+0x328>
    d768:	jne    e033 <main+0x1363>
    d76e:	cmp    QWORD PTR [rip+0x7cc12],0x0        # 8a388 <opt+0x308>
    d776:	je     df26 <main+0x1256>
    d77c:	lea    rdx,[rip+0x5a8ca]        # 6804d <primes.6089+0x1f6d>
    d783:	lea    rsi,[rip+0x5b285]        # 68a0f <primes.6089+0x292f>
    d78a:	mov    rdi,rdx
    d78d:	call   2cee0 <setoptval>
    d792:	mov    rsi,QWORD PTR [rip+0x7cbef]        # 8a388 <opt+0x308>
    d799:	test   rsi,rsi
    d79c:	je     e1a9 <main+0x14d9>
    d7a2:	lea    rdx,[rip+0x5b26b]        # 68a14 <primes.6089+0x2934>
    d7a9:	lea    rdi,[rip+0x5a594]        # 67d44 <primes.6089+0x1c64>
    d7b0:	call   2cee0 <setoptval>
    d7b5:	mov    rdi,QWORD PTR [rip+0x7cbcc]        # 8a388 <opt+0x308>
    d7bc:	call   4bdc0 <rpl_free>
    d7c1:	mov    QWORD PTR [rip+0x7cbbc],0x0        # 8a388 <opt+0x308>
    d7cc:	cmp    BYTE PTR [rip+0x7cbf3],0x0        # 8a3c6 <opt+0x346>
    d7d3:	je     d820 <main+0xb50>
    d7d5:	mov    rdi,QWORD PTR [rip+0x7cbf4]        # 8a3d0 <opt+0x350>
    d7dc:	test   rdi,rdi
    d7df:	je     e271 <main+0x15a1>
    d7e5:	call   3fc20 <check_encoding_name>
    d7ea:	test   al,al
    d7ec:	je     e25a <main+0x158a>
    d7f2:	cmp    QWORD PTR [rip+0x7cbd6],0x0        # 8a3d0 <opt+0x350>
    d7fa:	je     e271 <main+0x15a1>
    d800:	mov    rdi,QWORD PTR [rip+0x7cbc1]        # 8a3c8 <opt+0x348>
    d807:	test   rdi,rdi
    d80a:	je     d820 <main+0xb50>
    d80c:	call   3fc20 <check_encoding_name>
    d811:	test   al,al
    d813:	je     e23e <main+0x156e>
    d819:	nop    DWORD PTR [rax+0x0]
    d820:	cmp    BYTE PTR [rip+0x7c9a9],0x0        # 8a1d0 <opt+0x150>
    d827:	jne    e0a5 <main+0x13d5>
    d82d:	mov    rax,QWORD PTR [rip+0x7c9a4]        # 8a1d8 <opt+0x158>
    d834:	test   rax,rax
    d837:	je     d84e <main+0xb7e>
    d839:	cmp    BYTE PTR [rax],0x0
    d83c:	mov    edx,0x5
    d841:	lea    rsi,[rip+0x5ab30]        # 68378 <primes.6089+0x2298>
    d848:	je     e03f <main+0x136f>
    d84e:	cmp    BYTE PTR [rip+0x7c843],0x0        # 8a098 <opt+0x18>
    d855:	jne    e085 <main+0x13b5>
    d85b:	mov    r9d,DWORD PTR [rip+0x7c9f6]        # 8a258 <opt+0x1d8>
    d862:	test   r9d,r9d
    d865:	jne    e074 <main+0x13a4>
    d86b:	cmp    QWORD PTR [rip+0x7c915],0x0        # 8a188 <opt+0x108>
    d873:	je     d87a <main+0xbaa>
    d875:	call   3a240 <warc_init>
    d87a:	cmp    BYTE PTR [rip+0x7ca3a],0x0        # 8a2bb <opt+0x23b>
    d881:	jne    e5e0 <main+0x1910>
    d887:	mov    rdi,QWORD PTR [rip+0x7c8f2]        # 8a180 <opt+0x100>
    d88e:	test   rdi,rdi
    d891:	je     d939 <main+0xc69>
    d897:	cmp    BYTE PTR [rdi],0x2d
    d89a:	je     dfdb <main+0x130b>
    d8a0:	cmp    BYTE PTR [rip+0x7c939],0x0        # 8a1e0 <opt+0x160>
    d8a7:	lea    rax,[rip+0x4d9fb]        # 5b2a9 <_IO_stdin_used+0x2a9>
    d8ae:	lea    rsi,[rip+0x4e1fd]        # 5bab2 <_IO_stdin_used+0xab2>
    d8b5:	cmove  rsi,rax
    d8b9:	call   c0f0 <fopen@plt>
    d8be:	mov    QWORD PTR [rip+0x7cb7b],rax        # 8a440 <output_stream>
    d8c5:	mov    rdi,rax
    d8c8:	test   rax,rax
    d8cb:	je     e882 <main+0x1bb2>
    d8d1:	call   be80 <fileno@plt>
    d8d6:	lea    rdx,[rsp+0x70]
    d8db:	mov    edi,0x1
    d8e0:	mov    esi,eax
    d8e2:	call   c710 <__fxstat@plt>
    d8e7:	test   eax,eax
    d8e9:	jne    d908 <main+0xc38>
    d8eb:	mov    eax,DWORD PTR [rsp+0x88]
    d8f2:	and    eax,0xf000
    d8f7:	cmp    eax,0x8000
    d8fc:	jne    d908 <main+0xc38>
    d8fe:	mov    BYTE PTR [rip+0x7cb33],0x1        # 8a438 <output_stream_regular>
    d905:	nop    DWORD PTR [rax]
    d908:	cmp    BYTE PTR [rip+0x7cb29],0x0        # 8a438 <output_stream_regular>
    d90f:	jne    d939 <main+0xc69>
    d911:	cmp    BYTE PTR [rip+0x7c9c0],0x0        # 8a2d8 <opt+0x258>
    d918:	jne    e898 <main+0x1bc8>
    d91e:	cmp    BYTE PTR [rip+0x7c775],0x0        # 8a09a <opt+0x1a>
    d925:	jne    e898 <main+0x1bc8>
    d92b:	cmp    WORD PTR [rip+0x7c9a5],0x0        # 8a2d8 <opt+0x258>
    d933:	jne    e066 <main+0x1396>
    d939:	mov    esi,0x1
    d93e:	mov    edi,0x1
    d943:	call   c680 <signal@plt>
    d948:	cmp    rax,0x1
    d94c:	je     d95f <main+0xc8f>
    d94e:	lea    rsi,[rip+0x209fb]        # 2e350 <redirect_output_signal>
    d955:	mov    edi,0x1
    d95a:	call   c680 <signal@plt>
    d95f:	lea    rsi,[rip+0x209ea]        # 2e350 <redirect_output_signal>
    d966:	mov    edi,0xa
    d96b:	call   c680 <signal@plt>
    d970:	mov    esi,0x1
    d975:	mov    edi,0xd
    d97a:	call   c680 <signal@plt>
    d97f:	lea    rsi,[rip+0x22c3a]        # 305c0 <progress_handle_sigwinch>
    d986:	mov    edi,0x1c
    d98b:	call   c680 <signal@plt>
    d990:	cmp    BYTE PTR [rip+0x7ca51],0x0        # 8a3e8 <opt+0x368>
    d997:	jne    e304 <main+0x1634>
    d99d:	xor    r14d,r14d
    d9a0:	lea    rax,[rsp+0x40]
    d9a5:	cmp    DWORD PTR [rsp],0x0
    d9a9:	mov    QWORD PTR [rsp+0x10],rax
    d9ae:	lea    r15,[rsp+0x44]
    d9b3:	jg     dbf3 <main+0xf23>
    d9b9:	jmp    ddaf <main+0x10df>
    d9be:	xchg   ax,ax
    d9c0:	mov    rax,QWORD PTR [rax+0x50]
    d9c4:	test   rax,rax
    d9c7:	je     d9ce <main+0xcfe>
    d9c9:	cmp    BYTE PTR [rax],0x0
    d9cc:	jne    da43 <main+0xd73>
    d9ce:	mov    rcx,QWORD PTR [r12+0x10]
    d9d3:	mov    edi,DWORD PTR [r12+0x8]
    d9d8:	mov    QWORD PTR [rsp+0x18],rcx
    d9dd:	call   372d0 <scheme_leading_string>
    d9e2:	xor    edi,edi
    d9e4:	mov    edx,0x5
    d9e9:	lea    rsi,[rip+0x5b081]        # 68a71 <primes.6089+0x2991>
    d9f0:	mov    QWORD PTR [rsp+0x8],rax
    d9f5:	call   c780 <dcgettext@plt>
    d9fa:	sub    rsp,0x8
    d9fe:	mov    edx,0x1
    da03:	mov    esi,0x400
    da08:	mov    rcx,QWORD PTR [rsp+0x20]
    da0d:	mov    r8,rax
    da10:	lea    rdi,[rip+0x78be9]        # 86600 <question.9156>
    da17:	xor    eax,eax
    da19:	push   rcx
    da1a:	mov    r9,QWORD PTR [rsp+0x18]
    da1f:	mov    ecx,0x400
    da24:	call   c9d0 <__snprintf_chk@plt>
    da29:	lea    rdi,[r12+0x50]
    da2e:	call   2ea60 <run_use_askpass.constprop.0>
    da33:	cmp    BYTE PTR [rip+0x7c660],0x0        # 8a09a <opt+0x1a>
    da3a:	pop    rdi
    da3b:	pop    r8
    da3d:	jne    df4f <main+0x127f>
    da43:	mov    rax,QWORD PTR [r12+0x58]
    da48:	test   rax,rax
    da4b:	je     da56 <main+0xd86>
    da4d:	cmp    BYTE PTR [rax],0x0
    da50:	jne    dc72 <main+0xfa2>
    da56:	mov    r10,QWORD PTR [r12+0x10]
    da5b:	mov    rcx,QWORD PTR [r12+0x50]
    da60:	mov    edi,DWORD PTR [r12+0x8]
    da65:	mov    QWORD PTR [rsp+0x20],r10
    da6a:	mov    QWORD PTR [rsp+0x18],rcx
    da6f:	call   372d0 <scheme_leading_string>
    da74:	xor    edi,edi
    da76:	mov    edx,0x5
    da7b:	lea    rsi,[rip+0x5b005]        # 68a87 <primes.6089+0x29a7>
    da82:	mov    QWORD PTR [rsp+0x8],rax
    da87:	call   c780 <dcgettext@plt>
    da8c:	mov    r10,QWORD PTR [rsp+0x20]
    da91:	mov    esi,0x400
    da96:	mov    edx,0x1
    da9b:	mov    r8,rax
    da9e:	lea    rdi,[rip+0x78b5b]        # 86600 <question.9156>
    daa5:	xor    eax,eax
    daa7:	push   r10
    daa9:	mov    rcx,QWORD PTR [rsp+0x20]
    daae:	push   rcx
    daaf:	mov    r9,QWORD PTR [rsp+0x18]
    dab4:	mov    ecx,0x400
    dab9:	call   c9d0 <__snprintf_chk@plt>
    dabe:	lea    rdi,[r12+0x58]
    dac3:	call   2ea60 <run_use_askpass.constprop.0>
    dac8:	cmp    BYTE PTR [rip+0x7c5cb],0x0        # 8a09a <opt+0x1a>
    dacf:	pop    rcx
    dad0:	pop    rsi
    dad1:	jne    df39 <main+0x1269>
    dad7:	cmp    BYTE PTR [rip+0x7c81c],0x0        # 8a2fa <opt+0x27a>
    dade:	jne    dc7f <main+0xfaf>
    dae4:	movzx  eax,BYTE PTR [rip+0x7c5af]        # 8a09a <opt+0x1a>
    daeb:	xor    r8d,r8d
    daee:	mov    rsi,rbp
    daf1:	mov    rdi,r12
    daf4:	lea    rcx,[rsp+0x50]
    daf9:	lea    rdx,[rsp+0x48]
    dafe:	sub    rsp,0x8
    db02:	push   0x1
    db04:	push   r13
    db06:	push   rax
    db07:	mov    r9,QWORD PTR [rsp+0x30]
    db0c:	call   35290 <retrieve_url>
    db11:	add    rsp,0x20
    db15:	cmp    BYTE PTR [rip+0x7c7dc],0x0        # 8a2f8 <opt+0x278>
    db1c:	je     db88 <main+0xeb8>
    db1e:	mov    rdi,QWORD PTR [rsp+0x48]
    db23:	test   rdi,rdi
    db26:	je     db88 <main+0xeb8>
    db28:	xor    esi,esi
    db2a:	call   3bed0 <file_exists_p>
    db2f:	test   al,al
    db31:	je     db88 <main+0xeb8>
    db33:	cmp    BYTE PTR [rip+0x7c781],0x0        # 8a2bb <opt+0x23b>
    db3a:	jne    e601 <main+0x1931>
    db40:	mov    r8,QWORD PTR [rsp+0x48]
    db45:	xor    edi,edi
    db47:	mov    edx,0x5
    db4c:	lea    rsi,[rip+0x4dfc8]        # 5bb1b <_IO_stdin_used+0xb1b>
    db53:	mov    QWORD PTR [rsp+0x8],r8
    db58:	call   c780 <dcgettext@plt>
    db5d:	mov    r8,QWORD PTR [rsp+0x8]
    db62:	xor    edi,edi
    db64:	mov    rsi,rax
    db67:	xor    eax,eax
    db69:	mov    rdx,r8
    db6c:	call   2e0a0 <logprintf>
    db71:	mov    rdi,QWORD PTR [rsp+0x48]
    db76:	call   c120 <unlink@plt>
    db7b:	test   eax,eax
    db7d:	jne    e4c0 <main+0x17f0>
    db83:	nop    DWORD PTR [rax+rax*1+0x0]
    db88:	mov    rdi,QWORD PTR [rsp+0x50]
    db8d:	call   4bdc0 <rpl_free>
    db92:	mov    rdi,QWORD PTR [rsp+0x48]
    db97:	mov    QWORD PTR [rsp+0x50],0x0
    dba0:	call   4bdc0 <rpl_free>
    dba5:	mov    rdi,r12
    dba8:	mov    QWORD PTR [rsp+0x48],0x0
    dbb1:	call   374d0 <url_free>
    dbb6:	mov    rdi,r13
    dbb9:	call   400d0 <iri_free>
    dbbe:	movsxd rdx,DWORD PTR [rip+0x758eb]        # 834b0 <optind@@GLIBC_2.2.5>
    dbc5:	mov    rax,rdx
    dbc8:	cmp    QWORD PTR [rbx+rdx*8],rbp
    dbcc:	je     dbdc <main+0xf0c>
    dbce:	mov    rdi,rbp
    dbd1:	call   4bdc0 <rpl_free>
    dbd6:	mov    eax,DWORD PTR [rip+0x758d4]        # 834b0 <optind@@GLIBC_2.2.5>
    dbdc:	add    eax,0x1
    dbdf:	add    r14d,0x1
    dbe3:	mov    DWORD PTR [rip+0x758c7],eax        # 834b0 <optind@@GLIBC_2.2.5>
    dbe9:	cmp    DWORD PTR [rsp],r14d
    dbed:	je     ddaf <main+0x10df>
    dbf3:	mov    QWORD PTR [rsp+0x48],0x0
    dbfc:	mov    QWORD PTR [rsp+0x50],0x0
    dc05:	mov    DWORD PTR [rsp+0x40],0x0
    dc0d:	call   40010 <iri_new>
    dc12:	mov    r13,rax
    dc15:	movsxd rax,DWORD PTR [rip+0x75894]        # 834b0 <optind@@GLIBC_2.2.5>
    dc1c:	mov    rdi,QWORD PTR [rbx+rax*8]
    dc20:	call   372f0 <rewrite_shorthand_url>
    dc25:	mov    rbp,rax
    dc28:	test   rax,rax
    dc2b:	je     dd48 <main+0x1078>
    dc31:	mov    rsi,QWORD PTR [rip+0x7c798]        # 8a3d0 <opt+0x350>
    dc38:	mov    edx,0x1
    dc3d:	mov    rdi,r13
    dc40:	call   40130 <set_uri_encoding>
    dc45:	mov    ecx,0x1
    dc4a:	mov    rdx,r13
    dc4d:	mov    rsi,r15
    dc50:	mov    rdi,rbp
    dc53:	call   385f0 <url_parse>
    dc58:	mov    r12,rax
    dc5b:	test   rax,rax
    dc5e:	je     dd70 <main+0x10a0>
    dc64:	cmp    QWORD PTR [rip+0x7c56c],0x0        # 8a1d8 <opt+0x158>
    dc6c:	jne    d9c0 <main+0xcf0>
    dc72:	cmp    BYTE PTR [rip+0x7c421],0x0        # 8a09a <opt+0x1a>
    dc79:	je     dad7 <main+0xe07>
    dc7f:	mov    rdi,rbp
    dc82:	call   37130 <url_scheme>
    dc87:	cmp    eax,0x2
    dc8a:	je     dd30 <main+0x1060>
    dc90:	mov    rdi,rbp
    dc93:	call   37130 <url_scheme>
    dc98:	cmp    eax,0x3
    dc9b:	je     dd30 <main+0x1060>
    dca1:	movzx  eax,BYTE PTR [rip+0x7c4d0]        # 8a178 <opt+0xf8>
    dca8:	mov    rdi,rbp
    dcab:	mov    BYTE PTR [rsp+0x8],al
    dcaf:	call   37130 <url_scheme>
    dcb4:	cmp    eax,0x2
    dcb7:	je     dd60 <main+0x1090>
    dcbd:	mov    rdi,rbp
    dcc0:	call   37130 <url_scheme>
    dcc5:	cmp    eax,0x3
    dcc8:	je     dd60 <main+0x1090>
    dcce:	xor    esi,esi
    dcd0:	mov    rdi,r12
    dcd3:	call   328f0 <retrieve_tree>
    dcd8:	movzx  eax,BYTE PTR [rsp+0x8]
    dcdd:	mov    BYTE PTR [rip+0x7c495],al        # 8a178 <opt+0xf8>
    dce3:	jmp    db15 <main+0xe45>
    dce8:	test   dl,dl
    dcea:	je     d529 <main+0x859>
    dcf0:	cmp    DWORD PTR [rip+0x7c561],0xffffffff        # 8a258 <opt+0x1d8>
    dcf7:	jne    dd03 <main+0x1033>
    dcf9:	mov    DWORD PTR [rip+0x7c555],0x0        # 8a258 <opt+0x1d8>
    dd03:	mov    edx,0x5
    dd08:	lea    rsi,[rip+0x5b211]        # 68f20 <primes.6089+0x2e40>
    dd0f:	jmp    e839 <main+0x1b69>
    dd14:	cmp    BYTE PTR [rip+0x7c5dd],0x0        # 8a2f8 <opt+0x278>
    dd1b:	je     d4ba <main+0x7ea>
    dd21:	jmp    d4b3 <main+0x7e3>
    dd26:	nop    WORD PTR cs:[rax+rax*1+0x0]
    dd30:	mov    rdi,r12
    dd33:	call   36440 <url_uses_proxy>
    dd38:	test   al,al
    dd3a:	jne    dca1 <main+0xfd1>
    dd40:	jmp    dae4 <main+0xe14>
    dd45:	nop    DWORD PTR [rax]
    dd48:	movsxd rax,DWORD PTR [rip+0x75761]        # 834b0 <optind@@GLIBC_2.2.5>
    dd4f:	mov    rbp,QWORD PTR [rbx+rax*8]
    dd53:	jmp    dc31 <main+0xf61>
    dd58:	nop    DWORD PTR [rax+rax*1+0x0]
    dd60:	mov    BYTE PTR [rip+0x7c411],0x1        # 8a178 <opt+0xf8>
    dd67:	jmp    dcce <main+0xffe>
    dd6c:	nop    DWORD PTR [rax+0x0]
    dd70:	mov    esi,DWORD PTR [rsp+0x44]
    dd74:	mov    rdi,rbp
    dd77:	call   373b0 <url_error>
    dd7c:	mov    rdx,rbp
    dd7f:	mov    edi,0x1
    dd84:	lea    rsi,[rip+0x5acdd]        # 68a68 <primes.6089+0x2988>
    dd8b:	mov    rcx,rax
    dd8e:	mov    r12,rax
    dd91:	xor    eax,eax
    dd93:	call   2e0a0 <logprintf>
    dd98:	mov    rdi,r12
    dd9b:	call   4bdc0 <rpl_free>
    dda0:	mov    edi,0x12
    dda5:	call   3f7b0 <inform_exit_status>
    ddaa:	jmp    dbb6 <main+0xee6>
    ddaf:	mov    rdi,QWORD PTR [rip+0x7c312]        # 8a0c8 <opt+0x48>
    ddb6:	test   rdi,rdi
    ddb9:	je     ddde <main+0x110e>
    ddbb:	movzx  esi,BYTE PTR [rip+0x7c317]        # 8a0d9 <opt+0x59>
    ddc2:	lea    rdx,[rsp+0x50]
    ddc7:	call   35da0 <retrieve_from_file>
    ddcc:	mov    edi,eax
    ddce:	call   3f7b0 <inform_exit_status>
    ddd3:	cmp    DWORD PTR [rsp+0x50],0x0
    ddd8:	je     e5af <main+0x18df>
    ddde:	cmp    BYTE PTR [rip+0x7c2b5],0x0        # 8a09a <opt+0x1a>
    dde5:	jne    dff8 <main+0x1328>
    ddeb:	cmp    BYTE PTR [rip+0x7c508],0x0        # 8a2fa <opt+0x27a>
    ddf2:	jne    de04 <main+0x1134>
    ddf4:	cmp    DWORD PTR [rsp],0x1
    ddf8:	jg     de04 <main+0x1134>
    ddfa:	cmp    QWORD PTR [rip+0x7c2c6],0x0        # 8a0c8 <opt+0x48>
    de02:	je     de12 <main+0x1142>
    de04:	cmp    QWORD PTR [rip+0x7c624],0x0        # 8a430 <total_downloaded_bytes>
    de0c:	jne    e355 <main+0x1685>
    de12:	cmp    QWORD PTR [rip+0x7c55e],0x0        # 8a378 <opt+0x2f8>
    de1a:	je     de21 <main+0x1151>
    de1c:	call   2a790 <save_cookies>
    de21:	cmp    BYTE PTR [rip+0x7c5c0],0x0        # 8a3e8 <opt+0x368>
    de28:	je     de98 <main+0x11c8>
    de2a:	cmp    QWORD PTR [rip+0x7c5d6],0x0        # 8a408 <hsts_store>
    de32:	je     de98 <main+0x11c8>
    de34:	call   2e5c0 <get_hsts_database>
    de39:	mov    rbp,rax
    de3c:	test   rax,rax
    de3f:	je     de6d <main+0x119d>
    de41:	mov    rdi,QWORD PTR [rip+0x7c5c0]        # 8a408 <hsts_store>
    de48:	call   1f800 <hsts_store_has_changed>
    de4d:	test   al,al
    de4f:	je     de6d <main+0x119d>
    de51:	cmp    BYTE PTR [rip+0x7c463],0x0        # 8a2bb <opt+0x23b>
    de58:	jne    e72e <main+0x1a5e>
    de5e:	mov    rdi,QWORD PTR [rip+0x7c5a3]        # 8a408 <hsts_store>
    de65:	mov    rsi,rbp
    de68:	call   1f630 <hsts_store_save>
    de6d:	mov    rdi,QWORD PTR [rip+0x7c594]        # 8a408 <hsts_store>
    de74:	call   1f810 <hsts_store_close>
    de79:	mov    rdi,QWORD PTR [rip+0x7c588]        # 8a408 <hsts_store>
    de80:	call   4bdc0 <rpl_free>
    de85:	mov    rdi,rbp
    de88:	mov    QWORD PTR [rip+0x7c575],0x0        # 8a408 <hsts_store>
    de93:	call   4bdc0 <rpl_free>
    de98:	cmp    WORD PTR [rip+0x7c438],0x0        # 8a2d8 <opt+0x258>
    dea0:	je     deaf <main+0x11df>
    dea2:	cmp    BYTE PTR [rip+0x7c44f],0x0        # 8a2f8 <opt+0x278>
    dea9:	je     e206 <main+0x1536>
    deaf:	call   2d060 <cleanup>
    deb4:	call   3f800 <get_exit_status>
    deb9:	mov    edi,eax
    debb:	call   c060 <exit@plt>
    dec0:	mov    rdi,QWORD PTR [rip+0x7c2b9]        # 8a180 <opt+0x100>
    dec7:	xor    esi,esi
    dec9:	call   3bed0 <file_exists_p>
    dece:	test   al,al
    ded0:	jne    e75d <main+0x1a8d>
    ded6:	cmp    QWORD PTR [rip+0x7c2aa],0x0        # 8a188 <opt+0x108>
    dede:	je     d65c <main+0x98c>
    dee4:	cmp    BYTE PTR [rip+0x7c1c7],0x0        # 8a0b2 <opt+0x32>
    deeb:	je     d5c4 <main+0x8f4>
    def1:	mov    edx,0x5
    def6:	lea    rsi,[rip+0x5b23b]        # 69138 <primes.6089+0x3058>
    defd:	xor    edi,edi
    deff:	call   c780 <dcgettext@plt>
    df04:	mov    rdi,QWORD PTR [rip+0x755d5]        # 834e0 <stderr@@GLIBC_2.2.5>
    df0b:	mov    esi,0x1
    df10:	mov    rdx,rax
    df13:	xor    eax,eax
    df15:	call   bfd0 <__fprintf_chk@plt>
    df1a:	mov    BYTE PTR [rip+0x7c191],0x0        # 8a0b2 <opt+0x32>
    df21:	jmp    d5c4 <main+0x8f4>
    df26:	cmp    QWORD PTR [rip+0x7c462],0x0        # 8a390 <opt+0x310>
    df2e:	jne    d77c <main+0xaac>
    df34:	jmp    d7cc <main+0xafc>
    df39:	mov    rdi,QWORD PTR [r12+0x58]
    df3e:	call   4ba50 <xstrdup>
    df43:	mov    QWORD PTR [rip+0x7c27e],rax        # 8a1c8 <opt+0x148>
    df4a:	jmp    dc72 <main+0xfa2>
    df4f:	mov    rdi,QWORD PTR [r12+0x50]
    df54:	call   4ba50 <xstrdup>
    df59:	mov    QWORD PTR [rip+0x7c260],rax        # 8a1c0 <opt+0x140>
    df60:	jmp    da43 <main+0xd73>
    df65:	call   2ccf0 <initialize>
    df6a:	test   eax,eax
    df6c:	je     d0f3 <main+0x423>
    df72:	mov    rbx,QWORD PTR [rsp+0x108]
    df7a:	xor    rbx,QWORD PTR fs:0x28
    df83:	jne    e7ef <main+0x1b1f>
    df89:	add    rsp,0x118
    df90:	pop    rbx
    df91:	pop    rbp
    df92:	pop    r12
    df94:	pop    r13
    df96:	pop    r14
    df98:	pop    r15
    df9a:	ret    
    df9b:	test   al,al
    df9d:	je     dfcd <main+0x12fd>
    df9f:	xor    edi,edi
    dfa1:	mov    edx,0x5
    dfa6:	lea    rsi,[rip+0x5b0ab]        # 69058 <primes.6089+0x2f78>
    dfad:	call   c780 <dcgettext@plt>
    dfb2:	lea    rsi,[rip+0x5ef8d]        # 6cf46 <eta_str.8886+0x1ce>
    dfb9:	mov    edi,0x1
    dfbe:	mov    rdx,rax
    dfc1:	xor    eax,eax
    dfc3:	call   2e0a0 <logprintf>
    dfc8:	jmp    d59c <main+0x8cc>
    dfcd:	cmp    BYTE PTR [rip+0x7c0c6],0x0        # 8a09a <opt+0x1a>
    dfd4:	jne    df9f <main+0x12cf>
    dfd6:	jmp    d59c <main+0x8cc>
    dfdb:	cmp    BYTE PTR [rdi+0x1],0x0
    dfdf:	jne    d8a0 <main+0xbd0>
    dfe5:	mov    rax,QWORD PTR [rip+0x754fc]        # 834e8 <stdout@@GLIBC_2.2.5>
    dfec:	mov    QWORD PTR [rip+0x7c44d],rax        # 8a440 <output_stream>
    dff3:	jmp    d908 <main+0xc38>
    dff8:	cmp    BYTE PTR [rip+0x7c0e9],0x0        # 8a0e8 <opt+0x68>
    dfff:	je     de04 <main+0x1134>
    e005:	call   36540 <print_broken_links>
    e00a:	cmp    BYTE PTR [rip+0x7c089],0x0        # 8a09a <opt+0x1a>
    e011:	jne    de04 <main+0x1134>
    e017:	jmp    ddeb <main+0x111b>
    e01c:	cmp    QWORD PTR [rip+0x7c384],0x0        # 8a3a8 <opt+0x328>
    e024:	je     e7e1 <main+0x1b11>
    e02a:	test   rdi,rdi
    e02d:	jne    e154 <main+0x1484>
    e033:	mov    edx,0x5
    e038:	lea    rsi,[rip+0x5b421]        # 69460 <primes.6089+0x3380>
    e03f:	xor    edi,edi
    e041:	call   c780 <dcgettext@plt>
    e046:	mov    rdi,QWORD PTR [rip+0x75493]        # 834e0 <stderr@@GLIBC_2.2.5>
    e04d:	mov    esi,0x1
    e052:	mov    rdx,rax
    e055:	xor    eax,eax
    e057:	call   bfd0 <__fprintf_chk@plt>
    e05c:	mov    edi,0x1
    e061:	call   c060 <exit@plt>
    e066:	mov    edx,0x5
    e06b:	lea    rsi,[rip+0x5b506]        # 69578 <primes.6089+0x3498>
    e072:	jmp    e03f <main+0x136f>
    e074:	mov    rdi,QWORD PTR [rip+0x7c1d5]        # 8a250 <opt+0x1d0>
    e07b:	call   31870 <set_progress_implementation>
    e080:	jmp    d86b <main+0xb9b>
    e085:	call   3e6f0 <fork_to_background>
    e08a:	test   al,al
    e08c:	je     d85b <main+0xb8b>
    e092:	mov    rdi,QWORD PTR [rip+0x7c027]        # 8a0c0 <opt+0x40>
    e099:	mov    esi,ebp
    e09b:	call   2da30 <log_init>
    e0a0:	jmp    d85b <main+0xb8b>
    e0a5:	mov    rdi,QWORD PTR [rip+0x7c114]        # 8a1c0 <opt+0x140>
    e0ac:	test   rdi,rdi
    e0af:	je     e210 <main+0x1540>
    e0b5:	call   4b5b0 <quote>
    e0ba:	mov    edx,0x5
    e0bf:	lea    rsi,[rip+0x5a962]        # 68a28 <primes.6089+0x2948>
    e0c6:	xor    edi,edi
    e0c8:	mov    r12,rax
    e0cb:	call   c780 <dcgettext@plt>
    e0d0:	mov    rdi,QWORD PTR [rip+0x75409]        # 834e0 <stderr@@GLIBC_2.2.5>
    e0d7:	mov    rcx,r12
    e0da:	mov    esi,0x1
    e0df:	mov    rdx,rax
    e0e2:	xor    eax,eax
    e0e4:	call   bfd0 <__fprintf_chk@plt>
    e0e9:	lea    rdi,[rip+0x60327]        # 6e417 <urlchr_table+0x877>
    e0f0:	call   c3c0 <getpass@plt>
    e0f5:	mov    QWORD PTR [rip+0x7c0cc],rax        # 8a1c8 <opt+0x148>
    e0fc:	test   rax,rax
    e0ff:	je     e05c <main+0x138c>
    e105:	cmp    BYTE PTR [rax],0x0
    e108:	jne    d82d <main+0xb5d>
    e10e:	jmp    e05c <main+0x138c>
    e113:	test   rax,rax
    e116:	jne    d744 <main+0xa74>
    e11c:	cmp    QWORD PTR [rip+0x7c27c],0x0        # 8a3a0 <opt+0x320>
    e124:	mov    rdi,QWORD PTR [rip+0x7c26d]        # 8a398 <opt+0x318>
    e12b:	je     e01c <main+0x134c>
    e131:	test   rdi,rdi
    e134:	je     e033 <main+0x1363>
    e13a:	cmp    QWORD PTR [rip+0x7c266],0x0        # 8a3a8 <opt+0x328>
    e142:	mov    edx,0x5
    e147:	lea    rsi,[rip+0x5b372]        # 694c0 <primes.6089+0x33e0>
    e14e:	jne    e03f <main+0x136f>
    e154:	lea    rsi,[rip+0x59305]        # 67460 <primes.6089+0x1380>
    e15b:	call   43340 <c_strcasecmp>
    e160:	test   eax,eax
    e162:	jne    d76e <main+0xa9e>
    e168:	lea    rdx,[rip+0x5ee6d]        # 6cfdc <eta_str.8886+0x264>
    e16f:	lea    rsi,[rip+0x59462]        # 675d8 <primes.6089+0x14f8>
    e176:	mov    rdi,rdx
    e179:	call   2cee0 <setoptval>
    e17e:	jmp    d76e <main+0xa9e>
    e183:	movsx  eax,BYTE PTR [rsi+0x1]
    e187:	lea    esi,[rax-0x41]
    e18a:	cmp    esi,0x19
    e18d:	jbe    e1df <main+0x150f>
    e18f:	cmp    eax,0x6e
    e192:	lea    r8,[rip+0x5943f]        # 675d8 <primes.6089+0x14f8>
    e199:	lea    rax,[rip+0x60a2c]        # 6ebcc <CSWTCH.5+0x38c>
    e1a0:	cmove  r8,rax
    e1a4:	jmp    d1e0 <main+0x510>
    e1a9:	mov    rsi,QWORD PTR [rip+0x7c1e0]        # 8a390 <opt+0x310>
    e1b0:	lea    rdx,[rip+0x5a867]        # 68a1e <primes.6089+0x293e>
    e1b7:	lea    rdi,[rip+0x59b8f]        # 67d4d <primes.6089+0x1c6d>
    e1be:	call   2cee0 <setoptval>
    e1c3:	mov    rdi,QWORD PTR [rip+0x7c1c6]        # 8a390 <opt+0x310>
    e1ca:	call   4bdc0 <rpl_free>
    e1cf:	mov    QWORD PTR [rip+0x7c1b6],0x0        # 8a390 <opt+0x310>
    e1da:	jmp    d7cc <main+0xafc>
    e1df:	add    eax,0x20
    e1e2:	jmp    e18f <main+0x14bf>
    e1e4:	mov    BYTE PTR [rip+0x7bebd],0x1        # 8a0a8 <opt+0x28>
    e1eb:	jmp    d4e8 <main+0x818>
    e1f0:	lea    rsi,[rip+0x5acc1]        # 68eb8 <primes.6089+0x2dd8>
    e1f7:	xor    edi,edi
    e1f9:	call   c780 <dcgettext@plt>
    e1fe:	mov    rdx,rax
    e201:	jmp    d476 <main+0x7a6>
    e206:	call   11630 <convert_all_links>
    e20b:	jmp    deaf <main+0x11df>
    e210:	xor    edi,edi
    e212:	mov    edx,0x5
    e217:	lea    rsi,[rip+0x5a821]        # 68a3f <primes.6089+0x295f>
    e21e:	call   c780 <dcgettext@plt>
    e223:	mov    rdi,QWORD PTR [rip+0x752b6]        # 834e0 <stderr@@GLIBC_2.2.5>
    e22a:	mov    esi,0x1
    e22f:	mov    rdx,rax
    e232:	xor    eax,eax
    e234:	call   bfd0 <__fprintf_chk@plt>
    e239:	jmp    e0e9 <main+0x1419>
    e23e:	mov    rdi,QWORD PTR [rip+0x7c183]        # 8a3c8 <opt+0x348>
    e245:	call   4bdc0 <rpl_free>
    e24a:	mov    QWORD PTR [rip+0x7c173],0x0        # 8a3c8 <opt+0x348>
    e255:	jmp    d820 <main+0xb50>
    e25a:	mov    rdi,QWORD PTR [rip+0x7c16f]        # 8a3d0 <opt+0x350>
    e261:	call   4bdc0 <rpl_free>
    e266:	mov    QWORD PTR [rip+0x7c15f],0x0        # 8a3d0 <opt+0x350>
    e271:	call   3fbe0 <find_locale>
    e276:	mov    QWORD PTR [rip+0x7c153],rax        # 8a3d0 <opt+0x350>
    e27d:	jmp    d800 <main+0xb30>
    e282:	lea    rdi,[rip+0x5a771]        # 689fa <primes.6089+0x291a>
    e289:	call   4ba50 <xstrdup>
    e28e:	mov    QWORD PTR [rip+0x7bfbb],rax        # 8a250 <opt+0x1d0>
    e295:	jmp    d65c <main+0x98c>
    e29a:	mov    edx,0x5
    e29f:	lea    rsi,[rip+0x5aee2]        # 69188 <primes.6089+0x30a8>
    e2a6:	xor    edi,edi
    e2a8:	call   c780 <dcgettext@plt>
    e2ad:	mov    rdi,QWORD PTR [rip+0x7522c]        # 834e0 <stderr@@GLIBC_2.2.5>
    e2b4:	mov    esi,0x1
    e2b9:	mov    rdx,rax
    e2bc:	xor    eax,eax
    e2be:	call   bfd0 <__fprintf_chk@plt>
    e2c3:	mov    BYTE PTR [rip+0x7bff2],0x0        # 8a2bc <opt+0x23c>
    e2ca:	jmp    d5d1 <main+0x901>
    e2cf:	mov    edx,0x5
    e2d4:	lea    rsi,[rip+0x5adfd]        # 690d8 <primes.6089+0x2ff8>
    e2db:	xor    edi,edi
    e2dd:	call   c780 <dcgettext@plt>
    e2e2:	lea    rsi,[rip+0x5ec5d]        # 6cf46 <eta_str.8886+0x1ce>
    e2e9:	mov    edi,0x1
    e2ee:	mov    rdx,rax
    e2f1:	xor    eax,eax
    e2f3:	call   2e0a0 <logprintf>
    e2f8:	mov    BYTE PTR [rip+0x7bfbd],0x0        # 8a2bc <opt+0x23c>
    e2ff:	jmp    d5a9 <main+0x8d9>
    e304:	cmp    QWORD PTR [rip+0x7c0fc],0x0        # 8a408 <hsts_store>
    e30c:	jne    d99d <main+0xccd>
    e312:	call   2e5c0 <get_hsts_database>
    e317:	mov    rbp,rax
    e31a:	test   rax,rax
    e31d:	je     e6a8 <main+0x19d8>
    e323:	cmp    BYTE PTR [rip+0x7bf91],0x0        # 8a2bb <opt+0x23b>
    e32a:	jne    e6c0 <main+0x19f0>
    e330:	mov    rdi,rbp
    e333:	call   1f8b0 <hsts_store_open>
    e338:	mov    QWORD PTR [rip+0x7c0c9],rax        # 8a408 <hsts_store>
    e33f:	test   rax,rax
    e342:	je     e744 <main+0x1a74>
    e348:	mov    rdi,rbp
    e34b:	call   4bdc0 <rpl_free>
    e350:	jmp    d99d <main+0xccd>
    e355:	mov    rdi,QWORD PTR [rip+0x7c0bc]        # 8a418 <timer>
    e35c:	call   31db0 <ptimer_measure>
    e361:	subsd  xmm0,QWORD PTR [rsp+0x28]
    e367:	call   2e490 <secs_to_human_time>
    e36c:	mov    rdi,rax
    e36f:	call   4ba50 <xstrdup>
    e374:	movsd  xmm0,QWORD PTR [rip+0x7c0cc]        # 8a448 <total_download_time>
    e37c:	mov    r12,rax
    e37f:	call   2e490 <secs_to_human_time>
    e384:	mov    rdi,rax
    e387:	call   4ba50 <xstrdup>
    e38c:	mov    rdi,QWORD PTR [rip+0x7c085]        # 8a418 <timer>
    e393:	mov    rbp,rax
    e396:	call   31d70 <ptimer_destroy>
    e39b:	movsd  xmm0,QWORD PTR [rip+0x7c0a5]        # 8a448 <total_download_time>
    e3a3:	mov    rdi,QWORD PTR [rip+0x7c086]        # 8a430 <total_downloaded_bytes>
    e3aa:	mov    QWORD PTR [rip+0x7c063],0x0        # 8a418 <timer>
    e3b5:	call   351d0 <retr_rate>
    e3ba:	mov    edx,0x1
    e3bf:	mov    esi,0xa
    e3c4:	mov    rdi,QWORD PTR [rip+0x7c065]        # 8a430 <total_downloaded_bytes>
    e3cb:	mov    r14,rax
    e3ce:	call   3cf90 <human_readable>
    e3d3:	xor    edi,edi
    e3d5:	mov    r15d,DWORD PTR [rip+0x781e4]        # 865c0 <numurls>
    e3dc:	mov    rbx,rax
    e3df:	call   cbf0 <time@plt>
    e3e4:	mov    rdi,rax
    e3e7:	call   3bd30 <datetime_str>
    e3ec:	mov    edx,0x5
    e3f1:	lea    rsi,[rip+0x5b2a0]        # 69698 <primes.6089+0x35b8>
    e3f8:	xor    edi,edi
    e3fa:	mov    r13,rax
    e3fd:	call   c780 <dcgettext@plt>
    e402:	push   r14
    e404:	mov    rdx,r13
    e407:	mov    r9,rbx
    e40a:	push   rbp
    e40b:	mov    rsi,rax
    e40e:	mov    r8d,r15d
    e411:	xor    eax,eax
    e413:	mov    rcx,r12
    e416:	mov    edi,0x1
    e41b:	call   2e0a0 <logprintf>
    e420:	mov    rdi,r12
    e423:	call   4bdc0 <rpl_free>
    e428:	mov    rdi,rbp
    e42b:	call   4bdc0 <rpl_free>
    e430:	mov    rdi,QWORD PTR [rip+0x7be79]        # 8a2b0 <opt+0x230>
    e437:	pop    rax
    e438:	pop    rdx
    e439:	test   rdi,rdi
    e43c:	je     de12 <main+0x1142>
    e442:	cmp    rdi,QWORD PTR [rip+0x7bfe7]        # 8a430 <total_downloaded_bytes>
    e449:	jge    de12 <main+0x1142>
    e44f:	mov    edx,0x1
    e454:	mov    esi,0xa
    e459:	call   3cf90 <human_readable>
    e45e:	xor    edi,edi
    e460:	mov    edx,0x5
    e465:	lea    rsi,[rip+0x5b27c]        # 696e8 <primes.6089+0x3608>
    e46c:	mov    r12,rax
    e46f:	call   c780 <dcgettext@plt>
    e474:	mov    rdx,r12
    e477:	mov    edi,0x1
    e47c:	mov    rsi,rax
    e47f:	xor    eax,eax
    e481:	call   2e0a0 <logprintf>
    e486:	jmp    de12 <main+0x1142>
    e48b:	mov    edx,0x5
    e490:	lea    rsi,[rip+0x5aea9]        # 69340 <primes.6089+0x3260>
    e497:	xor    edi,edi
    e499:	call   c780 <dcgettext@plt>
    e49e:	mov    rdi,QWORD PTR [rip+0x7503b]        # 834e0 <stderr@@GLIBC_2.2.5>
    e4a5:	mov    esi,0x1
    e4aa:	mov    rdx,rax
    e4ad:	xor    eax,eax
    e4af:	call   bfd0 <__fprintf_chk@plt>
    e4b4:	mov    BYTE PTR [rip+0x7bd25],0x0        # 8a1e0 <opt+0x160>
    e4bb:	jmp    d6a4 <main+0x9d4>
    e4c0:	call   c740 <__errno_location@plt>
    e4c5:	mov    edi,DWORD PTR [rax]
    e4c7:	call   c540 <strerror@plt>
    e4cc:	lea    rsi,[rip+0x4d656]        # 5bb29 <_IO_stdin_used+0xb29>
    e4d3:	mov    edi,0x1
    e4d8:	mov    rdx,rax
    e4db:	xor    eax,eax
    e4dd:	call   2e0a0 <logprintf>
    e4e2:	jmp    db88 <main+0xeb8>
    e4e7:	xor    edi,edi
    e4e9:	mov    edx,0x5
    e4ee:	lea    rsi,[rip+0x5ad6b]        # 69260 <primes.6089+0x3180>
    e4f5:	call   c780 <dcgettext@plt>
    e4fa:	mov    rdi,QWORD PTR [rip+0x74fdf]        # 834e0 <stderr@@GLIBC_2.2.5>
    e501:	mov    esi,0x1
    e506:	mov    rdx,rax
    e509:	xor    eax,eax
    e50b:	call   bfd0 <__fprintf_chk@plt>
    e510:	jmp    d64f <main+0x97f>
    e515:	cmp    QWORD PTR [rip+0x7bceb],0x0        # 8a208 <opt+0x188>
    e51d:	jne    d68d <main+0x9bd>
    e523:	cmp    QWORD PTR [rip+0x7bcc5],0x0        # 8a1f0 <opt+0x170>
    e52b:	jne    d68d <main+0x9bd>
    e531:	xor    edi,edi
    e533:	mov    edx,0x5
    e538:	lea    rsi,[rip+0x5ada9]        # 692e8 <primes.6089+0x3208>
    e53f:	call   c780 <dcgettext@plt>
    e544:	mov    rdi,QWORD PTR [rip+0x74f95]        # 834e0 <stderr@@GLIBC_2.2.5>
    e54b:	mov    esi,0x1
    e550:	mov    rdx,rax
    e553:	xor    eax,eax
    e555:	call   bfd0 <__fprintf_chk@plt>
    e55a:	jmp    d68d <main+0x9bd>
    e55f:	mov    edi,0x1
    e564:	call   c0e0 <malloc@plt>
    e569:	mov    QWORD PTR [rip+0x7baf8],rax        # 8a068 <program_argstring>
    e570:	mov    rdx,rax
    e573:	test   rax,rax
    e576:	jne    ce26 <main+0x156>
    e57c:	mov    edx,0x5
    e581:	lea    rsi,[rip+0x5a413]        # 6899b <primes.6089+0x28bb>
    e588:	xor    edi,edi
    e58a:	call   c780 <dcgettext@plt>
    e58f:	mov    rdi,QWORD PTR [rip+0x74f4a]        # 834e0 <stderr@@GLIBC_2.2.5>
    e596:	mov    esi,0x1
    e59b:	mov    rdx,rax
    e59e:	xor    eax,eax
    e5a0:	call   bfd0 <__fprintf_chk@plt>
    e5a5:	mov    edi,0x2
    e5aa:	call   c060 <exit@plt>
    e5af:	mov    r12,QWORD PTR [rip+0x7bb12]        # 8a0c8 <opt+0x48>
    e5b6:	xor    edi,edi
    e5b8:	mov    edx,0x5
    e5bd:	lea    rsi,[rip+0x5a4dc]        # 68aa0 <primes.6089+0x29c0>
    e5c4:	call   c780 <dcgettext@plt>
    e5c9:	mov    edi,0x1
    e5ce:	mov    rsi,rax
    e5d1:	mov    rdx,r12
    e5d4:	xor    eax,eax
    e5d6:	call   2e0a0 <logprintf>
    e5db:	jmp    ddde <main+0x110e>
    e5e0:	mov    rsi,QWORD PTR [rip+0x72dd9]        # 813c0 <version_string>
    e5e7:	lea    rdx,[rip+0x5a321]        # 6890f <primes.6089+0x282f>
    e5ee:	lea    rdi,[rip+0x5af03]        # 694f8 <primes.6089+0x3418>
    e5f5:	xor    eax,eax
    e5f7:	call   2e250 <debug_logprintf>
    e5fc:	jmp    d887 <main+0xbb7>
    e601:	lea    rdi,[rip+0x5b060]        # 69668 <primes.6089+0x3588>
    e608:	xor    eax,eax
    e60a:	call   2e250 <debug_logprintf>
    e60f:	jmp    db40 <main+0xe70>
    e614:	mov    r12,QWORD PTR [rip+0x7be05]        # 8a420 <exec_name>
    e61b:	mov    edx,0x5
    e620:	lea    rsi,[rip+0x5a3b5]        # 689dc <primes.6089+0x28fc>
    e627:	xor    edi,edi
    e629:	mov    BYTE PTR [rsp],r8b
    e62d:	call   c780 <dcgettext@plt>
    e632:	movsx  r8d,BYTE PTR [rsp]
    e637:	mov    rcx,r12
    e63a:	mov    rdi,QWORD PTR [rip+0x74e9f]        # 834e0 <stderr@@GLIBC_2.2.5>
    e641:	mov    rdx,rax
    e644:	mov    esi,0x1
    e649:	xor    eax,eax
    e64b:	call   bfd0 <__fprintf_chk@plt>
    e650:	mov    edi,0x1
    e655:	call   2e3a0 <print_usage>
    e65a:	mov    rsi,QWORD PTR [rip+0x74e7f]        # 834e0 <stderr@@GLIBC_2.2.5>
    e661:	mov    edi,0xa
    e666:	call   c2c0 <fputc@plt>
    e66b:	mov    r12,QWORD PTR [rip+0x7bdae]        # 8a420 <exec_name>
    e672:	mov    edx,0x5
    e677:	xor    edi,edi
    e679:	lea    rsi,[rip+0x5a7b0]        # 68e30 <primes.6089+0x2d50>
    e680:	call   c780 <dcgettext@plt>
    e685:	mov    rdi,QWORD PTR [rip+0x74e54]        # 834e0 <stderr@@GLIBC_2.2.5>
    e68c:	mov    rcx,r12
    e68f:	mov    esi,0x1
    e694:	mov    rdx,rax
    e697:	xor    eax,eax
    e699:	call   bfd0 <__fprintf_chk@plt>
    e69e:	mov    edi,0x1
    e6a3:	call   c060 <exit@plt>
    e6a8:	lea    rsi,[rip+0x5af79]        # 69628 <primes.6089+0x3548>
    e6af:	mov    edi,0x1
    e6b4:	xor    eax,eax
    e6b6:	call   2e0a0 <logprintf>
    e6bb:	jmp    e348 <main+0x1678>
    e6c0:	mov    rsi,rax
    e6c3:	lea    rdi,[rip+0x5a380]        # 68a4a <primes.6089+0x296a>
    e6ca:	xor    eax,eax
    e6cc:	call   2e250 <debug_logprintf>
    e6d1:	jmp    e330 <main+0x1660>
    e6d6:	mov    edi,0x1
    e6db:	call   2e3a0 <print_usage>
    e6e0:	mov    rsi,QWORD PTR [rip+0x74df9]        # 834e0 <stderr@@GLIBC_2.2.5>
    e6e7:	mov    edi,0xa
    e6ec:	call   c2c0 <fputc@plt>
    e6f1:	mov    r12,QWORD PTR [rip+0x7bd28]        # 8a420 <exec_name>
    e6f8:	mov    edx,0x5
    e6fd:	lea    rsi,[rip+0x5a72c]        # 68e30 <primes.6089+0x2d50>
    e704:	xor    edi,edi
    e706:	call   c780 <dcgettext@plt>
    e70b:	mov    rdi,QWORD PTR [rip+0x74dce]        # 834e0 <stderr@@GLIBC_2.2.5>
    e712:	mov    rcx,r12
    e715:	mov    esi,0x1
    e71a:	mov    rdx,rax
    e71d:	xor    eax,eax
    e71f:	call   bfd0 <__fprintf_chk@plt>
    e724:	mov    edi,0x2
    e729:	call   c060 <exit@plt>
    e72e:	mov    rsi,rbp
    e731:	lea    rdi,[rip+0x5a37e]        # 68ab6 <primes.6089+0x29d6>
    e738:	xor    eax,eax
    e73a:	call   2e250 <debug_logprintf>
    e73f:	jmp    de5e <main+0x118e>
    e744:	mov    rdx,rbp
    e747:	lea    rsi,[rip+0x5ae92]        # 695e0 <primes.6089+0x3500>
    e74e:	mov    edi,0x1
    e753:	call   2e0a0 <logprintf>
    e758:	jmp    e348 <main+0x1678>
    e75d:	mov    rdi,QWORD PTR [rip+0x7ba1c]        # 8a180 <opt+0x100>
    e764:	call   4b5b0 <quote>
    e769:	mov    edx,0x5
    e76e:	lea    rsi,[rip+0x4d503]        # 5bc78 <_IO_stdin_used+0xc78>
    e775:	xor    edi,edi
    e777:	mov    r12,rax
    e77a:	call   c780 <dcgettext@plt>
    e77f:	xor    edi,edi
    e781:	mov    rdx,r12
    e784:	mov    rsi,rax
    e787:	xor    eax,eax
    e789:	call   2e0a0 <logprintf>
    e78e:	mov    edi,0x1
    e793:	call   c060 <exit@plt>
    e798:	mov    r12,QWORD PTR [rip+0x7bc81]        # 8a420 <exec_name>
    e79f:	xor    edi,edi
    e7a1:	mov    edx,0x5
    e7a6:	lea    rsi,[rip+0x5a251]        # 689fe <primes.6089+0x291e>
    e7ad:	call   c780 <dcgettext@plt>
    e7b2:	mov    rdi,QWORD PTR [rip+0x74d27]        # 834e0 <stderr@@GLIBC_2.2.5>
    e7b9:	mov    esi,0x1
    e7be:	mov    rdx,rax
    e7c1:	mov    rcx,r12
    e7c4:	xor    eax,eax
    e7c6:	call   bfd0 <__fprintf_chk@plt>
    e7cb:	jmp    e650 <main+0x1980>
    e7d0:	mov    edx,0x5
    e7d5:	lea    rsi,[rip+0x5abfc]        # 693d8 <primes.6089+0x32f8>
    e7dc:	jmp    e03f <main+0x136f>
    e7e1:	test   rdi,rdi
    e7e4:	je     d76e <main+0xa9e>
    e7ea:	jmp    e154 <main+0x1484>
    e7ef:	call   c7b0 <__stack_chk_fail@plt>
    e7f4:	mov    edx,0x5
    e7f9:	mov    rbp,QWORD PTR [rip+0x74ce0]        # 834e0 <stderr@@GLIBC_2.2.5>
    e800:	lea    rsi,[rip+0x5a7c1]        # 68fc8 <primes.6089+0x2ee8>
    e807:	xor    edi,edi
    e809:	call   c780 <dcgettext@plt>
    e80e:	mov    rdi,rax
    e811:	mov    rsi,rbp
    e814:	call   c580 <fputs@plt>
    e819:	mov    edi,0x1
    e81e:	call   2e3a0 <print_usage>
    e823:	mov    edi,0x1
    e828:	call   c060 <exit@plt>
    e82d:	mov    edx,0x5
    e832:	lea    rsi,[rip+0x5a717]        # 68f50 <primes.6089+0x2e70>
    e839:	xor    edi,edi
    e83b:	call   c780 <dcgettext@plt>
    e840:	mov    rdi,QWORD PTR [rip+0x74c99]        # 834e0 <stderr@@GLIBC_2.2.5>
    e847:	mov    esi,0x1
    e84c:	mov    rdx,rax
    e84f:	xor    eax,eax
    e851:	call   bfd0 <__fprintf_chk@plt>
    e856:	mov    edi,0x1
    e85b:	call   2e3a0 <print_usage>
    e860:	mov    edi,0x1
    e865:	call   c060 <exit@plt>
    e86a:	mov    r12,QWORD PTR [rip+0x74c67]        # 834d8 <optarg@@GLIBC_2.2.5>
    e871:	mov    edx,0x5
    e876:	lea    rsi,[rip+0x5a143]        # 689c0 <primes.6089+0x28e0>
    e87d:	jmp    e704 <main+0x1a34>
    e882:	mov    rdi,QWORD PTR [rip+0x7b8f7]        # 8a180 <opt+0x100>
    e889:	call   ca50 <perror@plt>
    e88e:	mov    edi,0x1
    e893:	call   c060 <exit@plt>
    e898:	mov    edx,0x5
    e89d:	lea    rsi,[rip+0x5ac84]        # 69528 <primes.6089+0x3448>
    e8a4:	jmp    e03f <main+0x136f>
    e8a9:	nop    DWORD PTR [rax+0x0]

000000000000e8b0 <_start>:
    e8b0:	endbr64 
    e8b4:	xor    ebp,ebp
    e8b6:	mov    r9,rdx
    e8b9:	pop    rsi
    e8ba:	mov    rdx,rsp
    e8bd:	and    rsp,0xfffffffffffffff0
    e8c1:	push   rax
    e8c2:	push   rsp
    e8c3:	lea    r8,[rip+0x4bda6]        # 5a670 <__libc_csu_fini>
    e8ca:	lea    rcx,[rip+0x4bd2f]        # 5a600 <__libc_csu_init>
    e8d1:	lea    rdi,[rip+0xffffffffffffe3f8]        # ccd0 <main>
    e8d8:	call   QWORD PTR [rip+0x706ea]        # 7efc8 <__libc_start_main@GLIBC_2.2.5>
    e8de:	hlt    
    e8df:	nop

000000000000e8e0 <deregister_tm_clones>:
    e8e0:	lea    rdi,[rip+0x74ba1]        # 83488 <__TMC_END__>
    e8e7:	lea    rax,[rip+0x74b9a]        # 83488 <__TMC_END__>
    e8ee:	cmp    rax,rdi
    e8f1:	je     e908 <deregister_tm_clones+0x28>
    e8f3:	mov    rax,QWORD PTR [rip+0x706d6]        # 7efd0 <_ITM_deregisterTMCloneTable>
    e8fa:	test   rax,rax
    e8fd:	je     e908 <deregister_tm_clones+0x28>
    e8ff:	jmp    rax
    e901:	nop    DWORD PTR [rax+0x0]
    e908:	ret    
    e909:	nop    DWORD PTR [rax+0x0]

000000000000e910 <register_tm_clones>:
    e910:	lea    rdi,[rip+0x74b71]        # 83488 <__TMC_END__>
    e917:	lea    rsi,[rip+0x74b6a]        # 83488 <__TMC_END__>
    e91e:	sub    rsi,rdi
    e921:	mov    rax,rsi
    e924:	shr    rsi,0x3f
    e928:	sar    rax,0x3
    e92c:	add    rsi,rax
    e92f:	sar    rsi,1
    e932:	je     e948 <register_tm_clones+0x38>
    e934:	mov    rax,QWORD PTR [rip+0x706a5]        # 7efe0 <_ITM_registerTMCloneTable>
    e93b:	test   rax,rax
    e93e:	je     e948 <register_tm_clones+0x38>
    e940:	jmp    rax
    e942:	nop    WORD PTR [rax+rax*1+0x0]
    e948:	ret    
    e949:	nop    DWORD PTR [rax+0x0]

000000000000e950 <__do_global_dtors_aux>:
    e950:	endbr64 
    e954:	cmp    BYTE PTR [rip+0x74b95],0x0        # 834f0 <completed.8061>
    e95b:	jne    e988 <__do_global_dtors_aux+0x38>
    e95d:	push   rbp
    e95e:	cmp    QWORD PTR [rip+0x70682],0x0        # 7efe8 <__cxa_finalize@GLIBC_2.2.5>
    e966:	mov    rbp,rsp
    e969:	je     e977 <__do_global_dtors_aux+0x27>
    e96b:	mov    rdi,QWORD PTR [rip+0x70696]        # 7f008 <__dso_handle>
    e972:	call   be30 <__cxa_finalize@plt>
    e977:	call   e8e0 <deregister_tm_clones>
    e97c:	mov    BYTE PTR [rip+0x74b6d],0x1        # 834f0 <completed.8061>
    e983:	pop    rbp
    e984:	ret    
    e985:	nop    DWORD PTR [rax]
    e988:	ret    
    e989:	nop    DWORD PTR [rax+0x0]

000000000000e990 <frame_dummy>:
    e990:	endbr64 
    e994:	jmp    e910 <register_tm_clones>
    e999:	nop    DWORD PTR [rax+0x0]

000000000000e9a0 <connect_with_timeout_callback>:
    e9a0:	endbr64 
    e9a4:	push   rbx
    e9a5:	mov    rbx,rdi
    e9a8:	mov    edx,DWORD PTR [rdi+0x10]
    e9ab:	mov    rsi,QWORD PTR [rdi+0x8]
    e9af:	mov    edi,DWORD PTR [rdi]
    e9b1:	call   c5d0 <connect@plt>
    e9b6:	mov    DWORD PTR [rbx+0x14],eax
    e9b9:	pop    rbx
    e9ba:	ret    
    e9bb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000e9c0 <sockaddr_set_data>:
    e9c0:	mov    eax,DWORD PTR [rsi]
    e9c2:	cmp    eax,0x2
    e9c5:	jne    e9e8 <sockaddr_set_data+0x28>
    e9c7:	pxor   xmm0,xmm0
    e9cb:	mov    ecx,0x2
    e9d0:	rol    dx,0x8
    e9d4:	movaps XMMWORD PTR [rdi],xmm0
    e9d7:	mov    eax,DWORD PTR [rsi+0x4]
    e9da:	mov    WORD PTR [rdi],cx
    e9dd:	mov    WORD PTR [rdi+0x2],dx
    e9e1:	mov    DWORD PTR [rdi+0x4],eax
    e9e4:	ret    
    e9e5:	nop    DWORD PTR [rax]
    e9e8:	cmp    eax,0xa
    e9eb:	jne    ea23 <sockaddr_set_data+0x63>
    e9ed:	mov    eax,0xa
    e9f2:	pxor   xmm0,xmm0
    e9f6:	rol    dx,0x8
    e9fa:	mov    QWORD PTR [rdi+0x10],0x0
    ea02:	movaps XMMWORD PTR [rdi],xmm0
    ea05:	mov    DWORD PTR [rdi+0x18],0x0
    ea0c:	movdqu xmm1,XMMWORD PTR [rsi+0x4]
    ea11:	mov    WORD PTR [rdi],ax
    ea14:	mov    eax,DWORD PTR [rsi+0x14]
    ea17:	mov    WORD PTR [rdi+0x2],dx
    ea1b:	mov    DWORD PTR [rdi+0x18],eax
    ea1e:	movups XMMWORD PTR [rdi+0x8],xmm1
    ea22:	ret    
    ea23:	push   rsi
    ea24:	jmp    cc30 <sockaddr_set_data.cold>
    ea29:	nop    DWORD PTR [rax+0x0]

000000000000ea30 <select_fd_internal.constprop.0>:
    ea30:	push   r14
    ea32:	push   r13
    ea34:	push   r12
    ea36:	push   rbp
    ea37:	push   rbx
    ea38:	sub    rsp,0xb0
    ea3f:	mov    rax,QWORD PTR fs:0x28
    ea48:	mov    QWORD PTR [rsp+0xa8],rax
    ea50:	xor    eax,eax
    ea52:	test   edi,edi
    ea54:	js     eb39 <select_fd_internal.constprop.0+0x109>
    ea5a:	mov    ebx,edi
    ea5c:	cmp    edi,0x3ff
    ea62:	jg     eb46 <select_fd_internal.constprop.0+0x116>
    ea68:	lea    rbp,[rsp+0x20]
    ea6d:	mov    r12d,esi
    ea70:	movsd  QWORD PTR [rsp+0x8],xmm0
    ea76:	xor    eax,eax
    ea78:	mov    ecx,0x10
    ea7d:	mov    rdi,rbp
    ea80:	cld    
    ea81:	rep stos QWORD PTR es:[rdi],rax
    ea84:	movsxd rdi,ebx
    ea87:	lea    r13,[rsp+0x10]
    ea8c:	call   cbd0 <__fdelt_chk@plt>
    ea91:	mov    ecx,ebx
    ea93:	movsd  xmm0,QWORD PTR [rsp+0x8]
    ea99:	pxor   xmm1,xmm1
    ea9d:	mov    r8,rax
    eaa0:	mov    eax,0x1
    eaa5:	shl    rax,cl
    eaa8:	or     QWORD PTR [rsp+r8*8+0x20],rax
    eaad:	xor    eax,eax
    eaaf:	test   r12b,0x1
    eab3:	mov    r14,rax
    eab6:	cmovne r14,rbp
    eaba:	and    r12d,0x2
    eabe:	cmove  rbp,rax
    eac2:	add    ebx,0x1
    eac5:	cvttsd2si rax,xmm0
    eaca:	cvtsi2sd xmm1,rax
    eacf:	mov    QWORD PTR [rsp+0x10],rax
    ead4:	subsd  xmm0,xmm1
    ead8:	mulsd  xmm0,QWORD PTR [rip+0x4c738]        # 5b218 <_IO_stdin_used+0x218>
    eae0:	cvttsd2si rax,xmm0
    eae5:	mov    QWORD PTR [rsp+0x18],rax
    eaea:	jmp    eafa <select_fd_internal.constprop.0+0xca>
    eaec:	nop    DWORD PTR [rax+0x0]
    eaf0:	call   c740 <__errno_location@plt>
    eaf5:	cmp    DWORD PTR [rax],0x4
    eaf8:	jne    eb13 <select_fd_internal.constprop.0+0xe3>
    eafa:	mov    r8,r13
    eafd:	xor    ecx,ecx
    eaff:	mov    rdx,rbp
    eb02:	mov    rsi,r14
    eb05:	mov    edi,ebx
    eb07:	call   c040 <select@plt>
    eb0c:	mov    r12d,eax
    eb0f:	test   eax,eax
    eb11:	js     eaf0 <select_fd_internal.constprop.0+0xc0>
    eb13:	mov    rax,QWORD PTR [rsp+0xa8]
    eb1b:	xor    rax,QWORD PTR fs:0x28
    eb24:	jne    eb41 <select_fd_internal.constprop.0+0x111>
    eb26:	add    rsp,0xb0
    eb2d:	mov    eax,r12d
    eb30:	pop    rbx
    eb31:	pop    rbp
    eb32:	pop    r12
    eb34:	pop    r13
    eb36:	pop    r14
    eb38:	ret    
    eb39:	mov    r12d,0xffffffff
    eb3f:	jmp    eb13 <select_fd_internal.constprop.0+0xe3>
    eb41:	call   c7b0 <__stack_chk_fail@plt>
    eb46:	mov    edx,0x5
    eb4b:	lea    rsi,[rip+0x4c4b6]        # 5b008 <_IO_stdin_used+0x8>
    eb52:	xor    edi,edi
    eb54:	call   c780 <dcgettext@plt>
    eb59:	mov    edi,0x1
    eb5e:	mov    edx,0x400
    eb63:	mov    rsi,rax
    eb66:	xor    eax,eax
    eb68:	call   2e0a0 <logprintf>
    eb6d:	mov    edi,0x1
    eb72:	call   c060 <exit@plt>
    eb77:	nop    WORD PTR [rax+rax*1+0x0]

000000000000eb80 <poll_internal>:
    eb80:	ucomisd xmm0,QWORD PTR [rip+0x4c698]        # 5b220 <_IO_stdin_used+0x220>
    eb88:	mov    r8d,edx
    eb8b:	jp     eb97 <poll_internal+0x17>
    eb8d:	jne    eb97 <poll_internal+0x17>
    eb8f:	movsd  xmm0,QWORD PTR [rip+0x7b6d9]        # 8a270 <opt+0x1f0>
    eb97:	ucomisd xmm0,QWORD PTR [rip+0x4c689]        # 5b228 <_IO_stdin_used+0x228>
    eb9f:	jp     ebb0 <poll_internal+0x30>
    eba1:	jne    ebb0 <poll_internal+0x30>
    eba3:	mov    eax,0x1
    eba8:	ret    
    eba9:	nop    DWORD PTR [rax+0x0]
    ebb0:	sub    rsp,0x8
    ebb4:	test   rsi,rsi
    ebb7:	je     ebe8 <poll_internal+0x68>
    ebb9:	mov    rax,QWORD PTR [rsi]
    ebbc:	mov    rax,QWORD PTR [rax+0x10]
    ebc0:	test   rax,rax
    ebc3:	je     ebe8 <poll_internal+0x68>
    ebc5:	mov    rdx,QWORD PTR [rsi+0x8]
    ebc9:	mov    esi,r8d
    ebcc:	call   rax
    ebce:	test   eax,eax
    ebd0:	jne    ebf4 <poll_internal+0x74>
    ebd2:	call   c740 <__errno_location@plt>
    ebd7:	mov    DWORD PTR [rax],0x6e
    ebdd:	xor    eax,eax
    ebdf:	add    rsp,0x8
    ebe3:	ret    
    ebe4:	nop    DWORD PTR [rax+0x0]
    ebe8:	mov    esi,r8d
    ebeb:	call   ea30 <select_fd_internal.constprop.0>
    ebf0:	test   eax,eax
    ebf2:	je     ebd2 <poll_internal+0x52>
    ebf4:	setg   al
    ebf7:	add    rsp,0x8
    ebfb:	ret    
    ebfc:	nop    DWORD PTR [rax+0x0]

000000000000ec00 <accept_connection>:
    ec00:	endbr64 
    ec04:	push   r12
    ec06:	push   rbp
    ec07:	mov    ebp,edi
    ec09:	sub    rsp,0xa8
    ec10:	movsd  xmm0,QWORD PTR [rip+0x7b668]        # 8a280 <opt+0x200>
    ec18:	mov    rax,QWORD PTR fs:0x28
    ec21:	mov    QWORD PTR [rsp+0x98],rax
    ec29:	xor    eax,eax
    ec2b:	ucomisd xmm0,QWORD PTR [rip+0x4c5f5]        # 5b228 <_IO_stdin_used+0x228>
    ec33:	mov    DWORD PTR [rsp+0xc],0x80
    ec3b:	jp     ec80 <accept_connection+0x80>
    ec3d:	jne    ec80 <accept_connection+0x80>
    ec3f:	lea    rsi,[rsp+0x10]
    ec44:	lea    rdx,[rsp+0xc]
    ec49:	mov    edi,ebp
    ec4b:	call   cb10 <accept@plt>
    ec50:	cmp    BYTE PTR [rip+0x7b664],0x0        # 8a2bb <opt+0x23b>
    ec57:	mov    r12d,eax
    ec5a:	jne    ecb0 <accept_connection+0xb0>
    ec5c:	mov    rax,QWORD PTR [rsp+0x98]
    ec64:	xor    rax,QWORD PTR fs:0x28
    ec6d:	jne    ecc2 <accept_connection+0xc2>
    ec6f:	add    rsp,0xa8
    ec76:	mov    eax,r12d
    ec79:	pop    rbp
    ec7a:	pop    r12
    ec7c:	ret    
    ec7d:	nop    DWORD PTR [rax]
    ec80:	mov    esi,0x1
    ec85:	mov    edi,ebp
    ec87:	call   ea30 <select_fd_internal.constprop.0>
    ec8c:	test   eax,eax
    ec8e:	jne    eca8 <accept_connection+0xa8>
    ec90:	call   c740 <__errno_location@plt>
    ec95:	mov    r12d,0xffffffff
    ec9b:	mov    DWORD PTR [rax],0x6e
    eca1:	jmp    ec5c <accept_connection+0x5c>
    eca3:	nop    DWORD PTR [rax+rax*1+0x0]
    eca8:	jg     ec3f <accept_connection+0x3f>
    ecaa:	or     r12d,0xffffffff
    ecae:	jmp    ec5c <accept_connection+0x5c>
    ecb0:	mov    esi,eax
    ecb2:	lea    rdi,[rip+0x4c387]        # 5b040 <_IO_stdin_used+0x40>
    ecb9:	xor    eax,eax
    ecbb:	call   2e250 <debug_logprintf>
    ecc0:	jmp    ec5c <accept_connection+0x5c>
    ecc2:	call   c7b0 <__stack_chk_fail@plt>
    ecc7:	nop    WORD PTR [rax+rax*1+0x0]

000000000000ecd0 <socket_ip_address>:
    ecd0:	endbr64 
    ecd4:	push   r12
    ecd6:	mov    r8d,edi
    ecd9:	mov    ecx,0x10
    ecde:	push   rbp
    ecdf:	mov    rbp,rsi
    ece2:	sub    rsp,0xa8
    ece9:	mov    rax,QWORD PTR fs:0x28
    ecf2:	mov    QWORD PTR [rsp+0x98],rax
    ecfa:	xor    eax,eax
    ecfc:	lea    rsi,[rsp+0x10]
    ed01:	mov    DWORD PTR [rsp+0xc],0x80
    ed09:	mov    rdi,rsi
    ed0c:	rep stos QWORD PTR es:[rdi],rax
    ed0f:	test   edx,edx
    ed11:	je     ede0 <socket_ip_address+0x110>
    ed17:	cmp    edx,0x1
    ed1a:	jne    cc3a <socket_ip_address.cold+0x5>
    ed20:	lea    rdx,[rsp+0xc]
    ed25:	mov    edi,r8d
    ed28:	call   c050 <getpeername@plt>
    ed2d:	test   eax,eax
    ed2f:	js     edd8 <socket_ip_address+0x108>
    ed35:	movzx  edx,WORD PTR [rsp+0x10]
    ed3a:	pxor   xmm0,xmm0
    ed3e:	mov    QWORD PTR [rbp+0x10],0x0
    ed46:	movups XMMWORD PTR [rbp+0x0],xmm0
    ed4a:	mov    DWORD PTR [rbp+0x0],edx
    ed4d:	cmp    dx,0x2
    ed51:	jne    ed90 <socket_ip_address+0xc0>
    ed53:	mov    eax,DWORD PTR [rsp+0x14]
    ed57:	movzx  r12d,BYTE PTR [rip+0x7b55c]        # 8a2bb <opt+0x23b>
    ed5f:	mov    DWORD PTR [rbp+0x4],eax
    ed62:	test   r12b,r12b
    ed65:	jne    edb8 <socket_ip_address+0xe8>
    ed67:	mov    r12d,0x1
    ed6d:	mov    rax,QWORD PTR [rsp+0x98]
    ed75:	xor    rax,QWORD PTR fs:0x28
    ed7e:	jne    edf2 <socket_ip_address+0x122>
    ed80:	add    rsp,0xa8
    ed87:	mov    eax,r12d
    ed8a:	pop    rbp
    ed8b:	pop    r12
    ed8d:	ret    
    ed8e:	xchg   ax,ax
    ed90:	cmp    dx,0xa
    ed94:	jne    cc35 <socket_ip_address.cold>
    ed9a:	movdqu xmm1,XMMWORD PTR [rsp+0x18]
    eda0:	mov    eax,DWORD PTR [rsp+0x28]
    eda4:	movzx  r12d,BYTE PTR [rip+0x7b50f]        # 8a2bb <opt+0x23b>
    edac:	mov    DWORD PTR [rbp+0x14],eax
    edaf:	movups XMMWORD PTR [rbp+0x4],xmm1
    edb3:	test   r12b,r12b
    edb6:	je     ed67 <socket_ip_address+0x97>
    edb8:	mov    rdi,rbp
    edbb:	call   1e490 <print_address>
    edc0:	lea    rdi,[rip+0x4c38f]        # 5b156 <_IO_stdin_used+0x156>
    edc7:	mov    rsi,rax
    edca:	xor    eax,eax
    edcc:	call   2e250 <debug_logprintf>
    edd1:	jmp    ed6d <socket_ip_address+0x9d>
    edd3:	nop    DWORD PTR [rax+rax*1+0x0]
    edd8:	xor    r12d,r12d
    eddb:	jmp    ed6d <socket_ip_address+0x9d>
    eddd:	nop    DWORD PTR [rax]
    ede0:	lea    rdx,[rsp+0xc]
    ede5:	mov    edi,r8d
    ede8:	call   c5c0 <getsockname@plt>
    eded:	jmp    ed2d <socket_ip_address+0x5d>
    edf2:	call   c7b0 <__stack_chk_fail@plt>
    edf7:	nop    WORD PTR [rax+rax*1+0x0]

000000000000ee00 <socket_family>:
    ee00:	endbr64 
    ee04:	sub    rsp,0xa8
    ee0b:	mov    edx,esi
    ee0d:	mov    r8d,edi
    ee10:	mov    ecx,0x10
    ee15:	mov    rax,QWORD PTR fs:0x28
    ee1e:	mov    QWORD PTR [rsp+0x98],rax
    ee26:	xor    eax,eax
    ee28:	lea    rsi,[rsp+0x10]
    ee2d:	mov    DWORD PTR [rsp+0xc],0x80
    ee35:	mov    rdi,rsi
    ee38:	rep stos QWORD PTR es:[rdi],rax
    ee3b:	test   edx,edx
    ee3d:	je     ee80 <socket_family+0x80>
    ee3f:	cmp    edx,0x1
    ee42:	jne    cc3f <socket_family.cold>
    ee48:	lea    rdx,[rsp+0xc]
    ee4d:	mov    edi,r8d
    ee50:	call   c050 <getpeername@plt>
    ee55:	test   eax,eax
    ee57:	js     ee8f <socket_family+0x8f>
    ee59:	movzx  eax,WORD PTR [rsp+0x10]
    ee5e:	mov    rcx,QWORD PTR [rsp+0x98]
    ee66:	xor    rcx,QWORD PTR fs:0x28
    ee6f:	jne    ee96 <socket_family+0x96>
    ee71:	add    rsp,0xa8
    ee78:	ret    
    ee79:	nop    DWORD PTR [rax+0x0]
    ee80:	lea    rdx,[rsp+0xc]
    ee85:	mov    edi,r8d
    ee88:	call   c5c0 <getsockname@plt>
    ee8d:	jmp    ee55 <socket_family+0x55>
    ee8f:	mov    eax,0xffffffff
    ee94:	jmp    ee5e <socket_family+0x5e>
    ee96:	call   c7b0 <__stack_chk_fail@plt>
    ee9b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000000eea0 <retryable_socket_connect_error>:
    eea0:	endbr64 
    eea4:	lea    edx,[rdi-0x60]
    eea7:	xor    eax,eax
    eea9:	cmp    edx,0x1
    eeac:	jbe    eee2 <retryable_socket_connect_error+0x42>
    eeae:	lea    eax,[rdi-0x5c]
    eeb1:	cmp    eax,0x2
    eeb4:	jbe    eee0 <retryable_socket_connect_error+0x40>
    eeb6:	cmp    edi,0x16
    eeb9:	je     eee0 <retryable_socket_connect_error+0x40>
    eebb:	movzx  eax,BYTE PTR [rip+0x7b1ca]        # 8a08c <opt+0xc>
    eec2:	test   al,al
    eec4:	jne    eee2 <retryable_socket_connect_error+0x42>
    eec6:	lea    eax,[rdi-0x6f]
    eec9:	and    eax,0xfffffffd
    eecc:	sete   al
    eecf:	cmp    edi,0x65
    eed2:	sete   dl
    eed5:	or     eax,edx
    eed7:	xor    eax,0x1
    eeda:	ret    
    eedb:	nop    DWORD PTR [rax+rax*1+0x0]
    eee0:	xor    eax,eax
    eee2:	ret    
    eee3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    eeee:	xchg   ax,ax

000000000000eef0 <select_fd>:
    eef0:	endbr64 
    eef4:	jmp    ea30 <select_fd_internal.constprop.0>
    eef9:	nop    DWORD PTR [rax+0x0]

000000000000ef00 <test_socket_open>:
    ef00:	endbr64 
    ef04:	push   rbp
    ef05:	push   rbx
    ef06:	sub    rsp,0xa8
    ef0d:	mov    rax,QWORD PTR fs:0x28
    ef16:	mov    QWORD PTR [rsp+0x98],rax
    ef1e:	xor    eax,eax
    ef20:	cmp    edi,0x3ff
    ef26:	jg     efae <test_socket_open+0xae>
    ef2c:	lea    rbp,[rsp+0x10]
    ef31:	mov    ebx,edi
    ef33:	xor    eax,eax
    ef35:	mov    ecx,0x10
    ef3a:	mov    rdi,rbp
    ef3d:	cld    
    ef3e:	rep stos QWORD PTR es:[rdi],rax
    ef41:	movsxd rdi,ebx
    ef44:	call   cbd0 <__fdelt_chk@plt>
    ef49:	xor    edx,edx
    ef4b:	lea    edi,[rbx+0x1]
    ef4e:	mov    rsi,rbp
    ef51:	mov    r8,rax
    ef54:	mov    eax,ebx
    ef56:	mov    QWORD PTR [rsp],0x0
    ef5e:	mov    QWORD PTR [rsp+0x8],0x1
    ef67:	sar    eax,0x1f
    ef6a:	shr    eax,0x1a
    ef6d:	lea    ecx,[rbx+rax*1]
    ef70:	and    ecx,0x3f
    ef73:	sub    ecx,eax
    ef75:	mov    eax,0x1
    ef7a:	shl    rax,cl
    ef7d:	xor    ecx,ecx
    ef7f:	or     QWORD PTR [rsp+r8*8+0x10],rax
    ef84:	mov    r8,rsp
    ef87:	call   c040 <select@plt>
    ef8c:	test   eax,eax
    ef8e:	sete   al
    ef91:	mov    rdx,QWORD PTR [rsp+0x98]
    ef99:	xor    rdx,QWORD PTR fs:0x28
    efa2:	jne    efdf <test_socket_open+0xdf>
    efa4:	add    rsp,0xa8
    efab:	pop    rbx
    efac:	pop    rbp
    efad:	ret    
    efae:	mov    edx,0x5
    efb3:	lea    rsi,[rip+0x4c04e]        # 5b008 <_IO_stdin_used+0x8>
    efba:	xor    edi,edi
    efbc:	call   c780 <dcgettext@plt>
    efc1:	mov    edi,0x1
    efc6:	mov    edx,0x400
    efcb:	mov    rsi,rax
    efce:	xor    eax,eax
    efd0:	call   2e0a0 <logprintf>
    efd5:	mov    edi,0x1
    efda:	call   c060 <exit@plt>
    efdf:	call   c7b0 <__stack_chk_fail@plt>
    efe4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    efef:	nop

000000000000eff0 <fd_register_transport>:
    eff0:	endbr64 
    eff4:	push   r13
    eff6:	mov    r13,rsi
    eff9:	push   r12
    effb:	push   rbp
    effc:	mov    rbp,rdx
    efff:	push   rbx
    f000:	mov    ebx,edi
    f002:	mov    edi,0x10
    f007:	sub    rsp,0x8
    f00b:	call   4b850 <xmalloc>
    f010:	mov    rdi,QWORD PTR [rip+0x74539]        # 83550 <transport_map>
    f017:	mov    QWORD PTR [rax],r13
    f01a:	mov    r12,rax
    f01d:	mov    QWORD PTR [rax+0x8],rbp
    f021:	test   rdi,rdi
    f024:	je     f048 <fd_register_transport+0x58>
    f026:	movsxd rsi,ebx
    f029:	mov    rdx,r12
    f02c:	call   1dc80 <hash_table_put>
    f031:	add    DWORD PTR [rip+0x74514],0x1        # 8354c <transport_map_modified_tick>
    f038:	add    rsp,0x8
    f03c:	pop    rbx
    f03d:	pop    rbp
    f03e:	pop    r12
    f040:	pop    r13
    f042:	ret    
    f043:	nop    DWORD PTR [rax+rax*1+0x0]
    f048:	xor    edx,edx
    f04a:	xor    esi,esi
    f04c:	call   1d940 <hash_table_new>
    f051:	mov    QWORD PTR [rip+0x744f8],rax        # 83550 <transport_map>
    f058:	mov    rdi,rax
    f05b:	jmp    f026 <fd_register_transport+0x36>
    f05d:	nop    DWORD PTR [rax]

000000000000f060 <fd_transport_context>:
    f060:	endbr64 
    f064:	sub    rsp,0x8
    f068:	movsxd rsi,edi
    f06b:	mov    rdi,QWORD PTR [rip+0x744de]        # 83550 <transport_map>
    f072:	call   1da70 <hash_table_get>
    f077:	test   rax,rax
    f07a:	je     f080 <fd_transport_context+0x20>
    f07c:	mov    rax,QWORD PTR [rax+0x8]
    f080:	add    rsp,0x8
    f084:	ret    
    f085:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000000f090 <fd_read>:
    f090:	endbr64 
    f094:	push   r13
    f096:	movsxd r13,edx
    f099:	push   r12
    f09b:	mov    r12,rsi
    f09e:	push   rbp
    f09f:	mov    ebp,edi
    f0a1:	sub    rsp,0x10
    f0a5:	mov    rdi,QWORD PTR [rip+0x744a4]        # 83550 <transport_map>
    f0ac:	test   rdi,rdi
    f0af:	je     f128 <fd_read+0x98>
    f0b1:	cmp    DWORD PTR [rip+0x6ff61],ebp        # 7f018 <last_fd.8439>
    f0b7:	jne    f0ce <fd_read+0x3e>
    f0b9:	mov    eax,DWORD PTR [rip+0x7448d]        # 8354c <transport_map_modified_tick>
    f0bf:	cmp    DWORD PTR [rip+0x74463],eax        # 83528 <last_tick.8440>
    f0c5:	mov    rsi,QWORD PTR [rip+0x74454]        # 83520 <last_info.8438>
    f0cc:	je     f0fe <fd_read+0x6e>
    f0ce:	movsxd rsi,ebp
    f0d1:	movsd  QWORD PTR [rsp+0x8],xmm0
    f0d7:	call   1da70 <hash_table_get>
    f0dc:	mov    DWORD PTR [rip+0x6ff36],ebp        # 7f018 <last_fd.8439>
    f0e2:	movsd  xmm0,QWORD PTR [rsp+0x8]
    f0e8:	mov    QWORD PTR [rip+0x74431],rax        # 83520 <last_info.8438>
    f0ef:	mov    rsi,rax
    f0f2:	mov    eax,DWORD PTR [rip+0x74454]        # 8354c <transport_map_modified_tick>
    f0f8:	mov    DWORD PTR [rip+0x7442a],eax        # 83528 <last_tick.8440>
    f0fe:	test   rsi,rsi
    f101:	je     f128 <fd_read+0x98>
    f103:	mov    rax,QWORD PTR [rsi]
    f106:	mov    rax,QWORD PTR [rax]
    f109:	test   rax,rax
    f10c:	je     f12a <fd_read+0x9a>
    f10e:	mov    rcx,QWORD PTR [rsi+0x8]
    f112:	add    rsp,0x10
    f116:	mov    edx,r13d
    f119:	mov    rsi,r12
    f11c:	mov    edi,ebp
    f11e:	pop    rbp
    f11f:	pop    r12
    f121:	pop    r13
    f123:	jmp    rax
    f125:	nop    DWORD PTR [rax]
    f128:	xor    esi,esi
    f12a:	mov    edx,0x1
    f12f:	mov    edi,ebp
    f131:	call   eb80 <poll_internal>
    f136:	test   al,al
    f138:	jne    f14a <fd_read+0xba>
    f13a:	jmp    f170 <fd_read+0xe0>
    f13c:	nop    DWORD PTR [rax+0x0]
    f140:	call   c740 <__errno_location@plt>
    f145:	cmp    DWORD PTR [rax],0x4
    f148:	jne    f170 <fd_read+0xe0>
    f14a:	mov    rdx,r13
    f14d:	mov    rsi,r12
    f150:	mov    edi,ebp
    f152:	call   c0c0 <read@plt>
    f157:	mov    r8d,eax
    f15a:	cmp    eax,0xffffffff
    f15d:	je     f140 <fd_read+0xb0>
    f15f:	add    rsp,0x10
    f163:	mov    eax,r8d
    f166:	pop    rbp
    f167:	pop    r12
    f169:	pop    r13
    f16b:	ret    
    f16c:	nop    DWORD PTR [rax+0x0]
    f170:	add    rsp,0x10
    f174:	mov    r8d,0xffffffff
    f17a:	pop    rbp
    f17b:	mov    eax,r8d
    f17e:	pop    r12
    f180:	pop    r13
    f182:	ret    
    f183:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    f18e:	xchg   ax,ax

000000000000f190 <fd_peek>:
    f190:	endbr64 
    f194:	push   r13
    f196:	movsxd r13,edx
    f199:	push   r12
    f19b:	mov    r12,rsi
    f19e:	push   rbp
    f19f:	mov    ebp,edi
    f1a1:	sub    rsp,0x10
    f1a5:	mov    rdi,QWORD PTR [rip+0x743a4]        # 83550 <transport_map>
    f1ac:	test   rdi,rdi
    f1af:	je     f230 <fd_peek+0xa0>
    f1b1:	cmp    DWORD PTR [rip+0x6fe5d],ebp        # 7f014 <last_fd.8449>
    f1b7:	jne    f1ce <fd_peek+0x3e>
    f1b9:	mov    eax,DWORD PTR [rip+0x7438d]        # 8354c <transport_map_modified_tick>
    f1bf:	cmp    DWORD PTR [rip+0x74353],eax        # 83518 <last_tick.8450>
    f1c5:	mov    rsi,QWORD PTR [rip+0x74344]        # 83510 <last_info.8448>
    f1cc:	je     f1fe <fd_peek+0x6e>
    f1ce:	movsxd rsi,ebp
    f1d1:	movsd  QWORD PTR [rsp+0x8],xmm0
    f1d7:	call   1da70 <hash_table_get>
    f1dc:	mov    DWORD PTR [rip+0x6fe32],ebp        # 7f014 <last_fd.8449>
    f1e2:	movsd  xmm0,QWORD PTR [rsp+0x8]
    f1e8:	mov    QWORD PTR [rip+0x74321],rax        # 83510 <last_info.8448>
    f1ef:	mov    rsi,rax
    f1f2:	mov    eax,DWORD PTR [rip+0x74354]        # 8354c <transport_map_modified_tick>
    f1f8:	mov    DWORD PTR [rip+0x7431a],eax        # 83518 <last_tick.8450>
    f1fe:	test   rsi,rsi
    f201:	je     f230 <fd_peek+0xa0>
    f203:	mov    rax,QWORD PTR [rsi]
    f206:	mov    rax,QWORD PTR [rax+0x18]
    f20a:	test   rax,rax
    f20d:	je     f232 <fd_peek+0xa2>
    f20f:	mov    rcx,QWORD PTR [rsi+0x8]
    f213:	add    rsp,0x10
    f217:	mov    edx,r13d
    f21a:	mov    rsi,r12
    f21d:	mov    edi,ebp
    f21f:	pop    rbp
    f220:	pop    r12
    f222:	pop    r13
    f224:	jmp    rax
    f226:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f230:	xor    esi,esi
    f232:	mov    edx,0x1
    f237:	mov    edi,ebp
    f239:	call   eb80 <poll_internal>
    f23e:	test   al,al
    f240:	jne    f252 <fd_peek+0xc2>
    f242:	jmp    f280 <fd_peek+0xf0>
    f244:	nop    DWORD PTR [rax+0x0]
    f248:	call   c740 <__errno_location@plt>
    f24d:	cmp    DWORD PTR [rax],0x4
    f250:	jne    f280 <fd_peek+0xf0>
    f252:	mov    ecx,0x2
    f257:	mov    rdx,r13
    f25a:	mov    rsi,r12
    f25d:	mov    edi,ebp
    f25f:	call   c100 <recv@plt>
    f264:	mov    r8d,eax
    f267:	cmp    eax,0xffffffff
    f26a:	je     f248 <fd_peek+0xb8>
    f26c:	add    rsp,0x10
    f270:	mov    eax,r8d
    f273:	pop    rbp
    f274:	pop    r12
    f276:	pop    r13
    f278:	ret    
    f279:	nop    DWORD PTR [rax+0x0]
    f280:	add    rsp,0x10
    f284:	mov    r8d,0xffffffff
    f28a:	pop    rbp
    f28b:	mov    eax,r8d
    f28e:	pop    r12
    f290:	pop    r13
    f292:	ret    
    f293:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    f29e:	xchg   ax,ax

000000000000f2a0 <fd_write>:
    f2a0:	endbr64 
    f2a4:	push   r14
    f2a6:	push   r13
    f2a8:	mov    r13d,edi
    f2ab:	push   r12
    f2ad:	mov    r12,rsi
    f2b0:	push   rbp
    f2b1:	push   rbx
    f2b2:	mov    ebx,edx
    f2b4:	sub    rsp,0x10
    f2b8:	mov    rbp,QWORD PTR [rip+0x74291]        # 83550 <transport_map>
    f2bf:	movsd  QWORD PTR [rsp+0x8],xmm0
    f2c5:	test   rbp,rbp
    f2c8:	je     f30c <fd_write+0x6c>
    f2ca:	cmp    DWORD PTR [rip+0x6fd40],edi        # 7f010 <last_fd.8460>
    f2d0:	jne    f2e4 <fd_write+0x44>
    f2d2:	mov    eax,DWORD PTR [rip+0x74274]        # 8354c <transport_map_modified_tick>
    f2d8:	cmp    DWORD PTR [rip+0x7422a],eax        # 83508 <last_tick.8461>
    f2de:	je     f3a0 <fd_write+0x100>
    f2e4:	mov    rdi,rbp
    f2e7:	movsxd rsi,r13d
    f2ea:	call   1da70 <hash_table_get>
    f2ef:	mov    DWORD PTR [rip+0x6fd1a],r13d        # 7f010 <last_fd.8460>
    f2f6:	mov    QWORD PTR [rip+0x74203],rax        # 83500 <last_info.8459>
    f2fd:	mov    rbp,rax
    f300:	mov    eax,DWORD PTR [rip+0x74246]        # 8354c <transport_map_modified_tick>
    f306:	mov    DWORD PTR [rip+0x741fc],eax        # 83508 <last_tick.8461>
    f30c:	test   ebx,ebx
    f30e:	jg     f336 <fd_write+0x96>
    f310:	jmp    f3ac <fd_write+0x10c>
    f315:	nop    DWORD PTR [rax]
    f318:	mov    rcx,QWORD PTR [rbp+0x8]
    f31c:	mov    edx,ebx
    f31e:	mov    rsi,r12
    f321:	mov    edi,r13d
    f324:	call   rax
    f326:	test   eax,eax
    f328:	jle    f38a <fd_write+0xea>
    f32a:	movsxd rdx,eax
    f32d:	sub    ebx,eax
    f32f:	add    r12,rdx
    f332:	test   ebx,ebx
    f334:	jle    f38a <fd_write+0xea>
    f336:	movsd  xmm0,QWORD PTR [rsp+0x8]
    f33c:	mov    edx,0x2
    f341:	mov    rsi,rbp
    f344:	mov    edi,r13d
    f347:	call   eb80 <poll_internal>
    f34c:	test   al,al
    f34e:	je     f385 <fd_write+0xe5>
    f350:	test   rbp,rbp
    f353:	je     f362 <fd_write+0xc2>
    f355:	mov    rax,QWORD PTR [rbp+0x0]
    f359:	mov    rax,QWORD PTR [rax+0x8]
    f35d:	test   rax,rax
    f360:	jne    f318 <fd_write+0x78>
    f362:	movsxd r14,ebx
    f365:	nop    DWORD PTR [rax]
    f368:	mov    rdx,r14
    f36b:	mov    rsi,r12
    f36e:	mov    edi,r13d
    f371:	call   cab0 <write@plt>
    f376:	cmp    eax,0xffffffff
    f379:	jne    f326 <fd_write+0x86>
    f37b:	call   c740 <__errno_location@plt>
    f380:	cmp    DWORD PTR [rax],0x4
    f383:	je     f368 <fd_write+0xc8>
    f385:	mov    eax,0xffffffff
    f38a:	add    rsp,0x10
    f38e:	pop    rbx
    f38f:	pop    rbp
    f390:	pop    r12
    f392:	pop    r13
    f394:	pop    r14
    f396:	ret    
    f397:	nop    WORD PTR [rax+rax*1+0x0]
    f3a0:	mov    rbp,QWORD PTR [rip+0x74159]        # 83500 <last_info.8459>
    f3a7:	jmp    f30c <fd_write+0x6c>
    f3ac:	xor    eax,eax
    f3ae:	jmp    f38a <fd_write+0xea>

000000000000f3b0 <fd_errstr>:
    f3b0:	endbr64 
    f3b4:	push   rbp
    f3b5:	mov    ebp,edi
    f3b7:	mov    rdi,QWORD PTR [rip+0x74192]        # 83550 <transport_map>
    f3be:	test   rdi,rdi
    f3c1:	je     f3f0 <fd_errstr+0x40>
    f3c3:	movsxd rsi,ebp
    f3c6:	call   1da70 <hash_table_get>
    f3cb:	test   rax,rax
    f3ce:	je     f3f0 <fd_errstr+0x40>
    f3d0:	mov    rdx,QWORD PTR [rax]
    f3d3:	mov    rdx,QWORD PTR [rdx+0x20]
    f3d7:	test   rdx,rdx
    f3da:	je     f3f0 <fd_errstr+0x40>
    f3dc:	mov    rsi,QWORD PTR [rax+0x8]
    f3e0:	mov    edi,ebp
    f3e2:	call   rdx
    f3e4:	test   rax,rax
    f3e7:	je     f3f0 <fd_errstr+0x40>
    f3e9:	pop    rbp
    f3ea:	ret    
    f3eb:	nop    DWORD PTR [rax+rax*1+0x0]
    f3f0:	call   c740 <__errno_location@plt>
    f3f5:	pop    rbp
    f3f6:	mov    edi,DWORD PTR [rax]
    f3f8:	jmp    c540 <strerror@plt>
    f3fd:	nop    DWORD PTR [rax]

000000000000f400 <fd_close>:
    f400:	endbr64 
    f404:	test   edi,edi
    f406:	js     f498 <fd_close+0x98>
    f40c:	push   r13
    f40e:	push   r12
    f410:	push   rbp
    f411:	mov    ebp,edi
    f413:	mov    rdi,QWORD PTR [rip+0x74136]        # 83550 <transport_map>
    f41a:	test   rdi,rdi
    f41d:	je     f470 <fd_close+0x70>
    f41f:	movsxd r13,ebp
    f422:	mov    rsi,r13
    f425:	call   1da70 <hash_table_get>
    f42a:	mov    r12,rax
    f42d:	test   rax,rax
    f430:	je     f470 <fd_close+0x70>
    f432:	mov    rax,QWORD PTR [rax]
    f435:	mov    rax,QWORD PTR [rax+0x28]
    f439:	test   rax,rax
    f43c:	je     f4a0 <fd_close+0xa0>
    f43e:	mov    rsi,QWORD PTR [r12+0x8]
    f443:	mov    edi,ebp
    f445:	call   rax
    f447:	mov    rdi,QWORD PTR [rip+0x74102]        # 83550 <transport_map>
    f44e:	mov    rsi,r13
    f451:	call   1dec0 <hash_table_remove>
    f456:	mov    rdi,r12
    f459:	call   4bdc0 <rpl_free>
    f45e:	add    DWORD PTR [rip+0x740e7],0x1        # 8354c <transport_map_modified_tick>
    f465:	pop    rbp
    f466:	pop    r12
    f468:	pop    r13
    f46a:	ret    
    f46b:	nop    DWORD PTR [rax+rax*1+0x0]
    f470:	mov    edi,ebp
    f472:	call   bf10 <close@plt>
    f477:	cmp    BYTE PTR [rip+0x7ae3d],0x0        # 8a2bb <opt+0x23b>
    f47e:	je     f465 <fd_close+0x65>
    f480:	mov    esi,ebp
    f482:	lea    rdi,[rip+0x4bcdd]        # 5b166 <_IO_stdin_used+0x166>
    f489:	pop    rbp
    f48a:	xor    eax,eax
    f48c:	pop    r12
    f48e:	pop    r13
    f490:	jmp    2e250 <debug_logprintf>
    f495:	nop    DWORD PTR [rax]
    f498:	ret    
    f499:	nop    DWORD PTR [rax+0x0]
    f4a0:	mov    edi,ebp
    f4a2:	call   bf10 <close@plt>
    f4a7:	cmp    BYTE PTR [rip+0x7ae0d],0x0        # 8a2bb <opt+0x23b>
    f4ae:	je     f447 <fd_close+0x47>
    f4b0:	mov    esi,ebp
    f4b2:	lea    rdi,[rip+0x4bcad]        # 5b166 <_IO_stdin_used+0x166>
    f4b9:	xor    eax,eax
    f4bb:	call   2e250 <debug_logprintf>
    f4c0:	jmp    f447 <fd_close+0x47>
    f4c2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    f4cd:	nop    DWORD PTR [rax]

000000000000f4d0 <connect_to_ip>:
    f4d0:	endbr64 
    f4d4:	push   r15
    f4d6:	push   r14
    f4d8:	push   r13
    f4da:	mov    r13d,esi
    f4dd:	push   r12
    f4df:	mov    r12,rdi
    f4e2:	push   rbp
    f4e3:	push   rbx
    f4e4:	mov    rbx,rdx
    f4e7:	sub    rsp,0x138
    f4ee:	mov    rax,QWORD PTR fs:0x28
    f4f7:	mov    QWORD PTR [rsp+0x128],rax
    f4ff:	xor    eax,eax
    f501:	test   rdx,rdx
    f504:	je     f548 <connect_to_ip+0x78>
    f506:	call   1e490 <print_address>
    f50b:	mov    rdi,rbx
    f50e:	mov    rsi,rax
    f511:	mov    r14,rax
    f514:	call   be40 <strcmp@plt>
    f519:	test   eax,eax
    f51b:	jne    f6c8 <connect_to_ip+0x1f8>
    f521:	mov    eax,DWORD PTR [r12]
    f525:	mov    edx,0x5
    f52a:	lea    rsi,[rip+0x4bc67]        # 5b198 <_IO_stdin_used+0x198>
    f531:	cmp    eax,0x2
    f534:	je     f99c <connect_to_ip+0x4cc>
    f53a:	cmp    eax,0xa
    f53d:	je     f990 <connect_to_ip+0x4c0>
    f543:	nop    DWORD PTR [rax+rax*1+0x0]
    f548:	lea    rbp,[rsp+0x20]
    f54d:	mov    rsi,r12
    f550:	mov    edx,r13d
    f553:	mov    rdi,rbp
    f556:	call   e9c0 <sockaddr_set_data>
    f55b:	movzx  edi,WORD PTR [rsp+0x20]
    f560:	xor    edx,edx
    f562:	mov    esi,0x1
    f567:	call   c6f0 <socket@plt>
    f56c:	mov    r12d,eax
    f56f:	test   eax,eax
    f571:	js     fa29 <connect_to_ip+0x559>
    f577:	cmp    BYTE PTR [rip+0x7ae41],0x0        # 8a3bf <opt+0x33f>
    f57e:	jne    f8b0 <connect_to_ip+0x3e0>
    f584:	mov    rax,QWORD PTR [rip+0x7ad1d]        # 8a2a8 <opt+0x228>
    f58b:	test   rax,rax
    f58e:	je     f5cb <connect_to_ip+0xfb>
    f590:	cmp    rax,0x1fff
    f596:	jg     f5cb <connect_to_ip+0xfb>
    f598:	cmp    eax,0x200
    f59d:	mov    edx,0x200
    f5a2:	mov    rcx,rsp
    f5a5:	mov    edi,r12d
    f5a8:	cmovl  eax,edx
    f5ab:	mov    r8d,0x4
    f5b1:	mov    edx,0x8
    f5b6:	mov    esi,0x1
    f5bb:	mov    DWORD PTR [rsp],eax
    f5be:	call   c1a0 <setsockopt@plt>
    f5c3:	test   eax,eax
    f5c5:	jne    f910 <connect_to_ip+0x440>
    f5cb:	mov    rdi,QWORD PTR [rip+0x7ad2e]        # 8a300 <opt+0x280>
    f5d2:	test   rdi,rdi
    f5d5:	je     f5f8 <connect_to_ip+0x128>
    f5d7:	cmp    BYTE PTR [rip+0x73f6b],0x0        # 83549 <called.8250>
    f5de:	je     f720 <connect_to_ip+0x250>
    f5e4:	cmp    BYTE PTR [rip+0x73f5d],0x0        # 83548 <should_bind.8251>
    f5eb:	jne    f950 <connect_to_ip+0x480>
    f5f1:	nop    DWORD PTR [rax+0x0]
    f5f8:	movzx  edx,WORD PTR [rsp+0x20]
    f5fd:	movsd  xmm0,QWORD PTR [rip+0x7ac7b]        # 8a280 <opt+0x200>
    f605:	mov    eax,0x10
    f60a:	cmp    dx,0x2
    f60e:	jne    f6b0 <connect_to_ip+0x1e0>
    f614:	mov    rsi,rsp
    f617:	lea    rdi,[rip+0xfffffffffffff382]        # e9a0 <connect_with_timeout_callback>
    f61e:	mov    DWORD PTR [rsp],r12d
    f622:	mov    QWORD PTR [rsp+0x8],rbp
    f627:	mov    DWORD PTR [rsp+0x10],eax
    f62b:	call   3ea60 <run_with_timeout>
    f630:	test   al,al
    f632:	jne    fa10 <connect_to_ip+0x540>
    f638:	mov    eax,DWORD PTR [rsp+0x14]
    f63c:	cmp    eax,0xffffffff
    f63f:	je     f880 <connect_to_ip+0x3b0>
    f645:	test   eax,eax
    f647:	js     f7af <connect_to_ip+0x2df>
    f64d:	test   rbx,rbx
    f650:	je     f671 <connect_to_ip+0x1a1>
    f652:	lea    rsi,[rip+0x4bb71]        # 5b1ca <_IO_stdin_used+0x1ca>
    f659:	xor    edi,edi
    f65b:	mov    edx,0x5
    f660:	call   c780 <dcgettext@plt>
    f665:	xor    edi,edi
    f667:	mov    rsi,rax
    f66a:	xor    eax,eax
    f66c:	call   2e0a0 <logprintf>
    f671:	cmp    BYTE PTR [rip+0x7ac43],0x0        # 8a2bb <opt+0x23b>
    f678:	jne    f970 <connect_to_ip+0x4a0>
    f67e:	mov    rax,QWORD PTR [rsp+0x128]
    f686:	xor    rax,QWORD PTR fs:0x28
    f68f:	jne    fa39 <connect_to_ip+0x569>
    f695:	add    rsp,0x138
    f69c:	mov    eax,r12d
    f69f:	pop    rbx
    f6a0:	pop    rbp
    f6a1:	pop    r12
    f6a3:	pop    r13
    f6a5:	pop    r14
    f6a7:	pop    r15
    f6a9:	ret    
    f6aa:	nop    WORD PTR [rax+rax*1+0x0]
    f6b0:	cmp    dx,0xa
    f6b4:	jne    cc44 <connect_to_ip.cold>
    f6ba:	mov    eax,0x1c
    f6bf:	jmp    f614 <connect_to_ip+0x144>
    f6c4:	nop    DWORD PTR [rax+0x0]
    f6c8:	cmp    BYTE PTR [rip+0x7acf7],0x0        # 8a3c6 <opt+0x346>
    f6cf:	je     f810 <connect_to_ip+0x340>
    f6d5:	mov    rdi,rbx
    f6d8:	call   3fe00 <idn_decode>
    f6dd:	mov    rbp,rax
    f6e0:	test   rax,rax
    f6e3:	je     f810 <connect_to_ip+0x340>
    f6e9:	mov    rsi,rax
    f6ec:	lea    rdi,[rip+0x4ba81]        # 5b174 <_IO_stdin_used+0x174>
    f6f3:	xor    eax,eax
    f6f5:	mov    rdx,rbx
    f6f8:	call   3ba30 <aprintf>
    f6fd:	mov    rdi,rbp
    f700:	mov    r15,rax
    f703:	call   4bdc0 <rpl_free>
    f708:	test   r15,r15
    f70b:	je     f810 <connect_to_ip+0x340>
    f711:	mov    rbp,r15
    f714:	jmp    f81d <connect_to_ip+0x34d>
    f719:	nop    DWORD PTR [rax+0x0]
    f720:	mov    esi,0x3
    f725:	mov    BYTE PTR [rip+0x73e1d],0x1        # 83549 <called.8250>
    f72c:	call   1e670 <lookup_host>
    f731:	mov    r13,rax
    f734:	test   rax,rax
    f737:	je     f9c0 <connect_to_ip+0x4f0>
    f73d:	xor    esi,esi
    f73f:	mov    rdi,rax
    f742:	call   1e280 <address_list_address_at>
    f747:	mov    rdi,r13
    f74a:	lea    r13,[rsp+0xa0]
    f752:	movdqu xmm1,XMMWORD PTR [rax]
    f756:	movaps XMMWORD PTR [rip+0x73dd3],xmm1        # 83530 <ip.8252>
    f75d:	mov    rax,QWORD PTR [rax+0x10]
    f761:	mov    QWORD PTR [rip+0x73dd8],rax        # 83540 <ip.8252+0x10>
    f768:	call   1e410 <address_list_release>
    f76d:	xor    edx,edx
    f76f:	lea    rsi,[rip+0x73dba]        # 83530 <ip.8252>
    f776:	mov    rdi,r13
    f779:	call   e9c0 <sockaddr_set_data>
    f77e:	mov    BYTE PTR [rip+0x73dc3],0x1        # 83548 <should_bind.8251>
    f785:	movzx  eax,WORD PTR [rsp+0xa0]
    f78d:	mov    edx,0x10
    f792:	cmp    ax,0x2
    f796:	jne    f858 <connect_to_ip+0x388>
    f79c:	mov    rsi,r13
    f79f:	mov    edi,r12d
    f7a2:	call   ca00 <bind@plt>
    f7a7:	test   eax,eax
    f7a9:	jns    f5f8 <connect_to_ip+0x128>
    f7af:	call   c740 <__errno_location@plt>
    f7b4:	mov    r13d,DWORD PTR [rax]
    f7b7:	mov    rbp,rax
    f7ba:	nop    WORD PTR [rax+rax*1+0x0]
    f7c0:	mov    edi,r12d
    f7c3:	call   f400 <fd_close>
    f7c8:	test   rbx,rbx
    f7cb:	je     f7fd <connect_to_ip+0x32d>
    f7cd:	mov    edi,DWORD PTR [rbp+0x0]
    f7d0:	call   c540 <strerror@plt>
    f7d5:	mov    edx,0x5
    f7da:	lea    rsi,[rip+0x4ba09]        # 5b1ea <_IO_stdin_used+0x1ea>
    f7e1:	xor    edi,edi
    f7e3:	mov    r12,rax
    f7e6:	call   c780 <dcgettext@plt>
    f7eb:	mov    rdx,r12
    f7ee:	mov    edi,0x1
    f7f3:	mov    rsi,rax
    f7f6:	xor    eax,eax
    f7f8:	call   2e0a0 <logprintf>
    f7fd:	mov    DWORD PTR [rbp+0x0],r13d
    f801:	mov    r12d,0xffffffff
    f807:	jmp    f67e <connect_to_ip+0x1ae>
    f80c:	nop    DWORD PTR [rax+0x0]
    f810:	mov    rdi,rbx
    f813:	xor    ebp,ebp
    f815:	call   2dc30 <escnonprint_uri>
    f81a:	mov    r15,rax
    f81d:	xor    edi,edi
    f81f:	mov    edx,0x5
    f824:	lea    rsi,[rip+0x4b951]        # 5b17c <_IO_stdin_used+0x17c>
    f82b:	call   c780 <dcgettext@plt>
    f830:	xor    edi,edi
    f832:	mov    r8d,r13d
    f835:	mov    rcx,r14
    f838:	mov    rsi,rax
    f83b:	mov    rdx,r15
    f83e:	xor    eax,eax
    f840:	call   2e0a0 <logprintf>
    f845:	mov    rdi,rbp
    f848:	call   4bdc0 <rpl_free>
    f84d:	jmp    f548 <connect_to_ip+0x78>
    f852:	nop    WORD PTR [rax+rax*1+0x0]
    f858:	cmp    ax,0xa
    f85c:	jne    cc44 <connect_to_ip.cold>
    f862:	mov    edx,0x1c
    f867:	mov    rsi,r13
    f86a:	mov    edi,r12d
    f86d:	call   ca00 <bind@plt>
    f872:	test   eax,eax
    f874:	jns    f5f8 <connect_to_ip+0x128>
    f87a:	jmp    f7af <connect_to_ip+0x2df>
    f87f:	nop
    f880:	call   c740 <__errno_location@plt>
    f885:	mov    r13d,DWORD PTR [rax]
    f888:	mov    rbp,rax
    f88b:	cmp    r13d,0x4
    f88f:	jne    f7c0 <connect_to_ip+0x2f0>
    f895:	mov    DWORD PTR [rax],0x6e
    f89b:	mov    r13d,0x6e
    f8a1:	jmp    f7c0 <connect_to_ip+0x2f0>
    f8a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f8b0:	mov    rcx,rsp
    f8b3:	mov    r8d,0x4
    f8b9:	mov    edx,0x1a
    f8be:	mov    edi,eax
    f8c0:	mov    esi,0x29
    f8c5:	mov    DWORD PTR [rsp],0x1
    f8cc:	call   c1a0 <setsockopt@plt>
    f8d1:	cmp    BYTE PTR [rip+0x7a9e3],0x0        # 8a2bb <opt+0x23b>
    f8d8:	je     f584 <connect_to_ip+0xb4>
    f8de:	test   eax,eax
    f8e0:	jns    f584 <connect_to_ip+0xb4>
    f8e6:	call   c740 <__errno_location@plt>
    f8eb:	mov    edi,DWORD PTR [rax]
    f8ed:	call   c540 <strerror@plt>
    f8f2:	lea    rdi,[rip+0x4b767]        # 5b060 <_IO_stdin_used+0x60>
    f8f9:	mov    rsi,rax
    f8fc:	xor    eax,eax
    f8fe:	call   2e250 <debug_logprintf>
    f903:	jmp    f584 <connect_to_ip+0xb4>
    f908:	nop    DWORD PTR [rax+rax*1+0x0]
    f910:	call   c740 <__errno_location@plt>
    f915:	mov    edi,DWORD PTR [rax]
    f917:	call   c540 <strerror@plt>
    f91c:	xor    edi,edi
    f91e:	mov    edx,0x5
    f923:	lea    rsi,[rip+0x4b756]        # 5b080 <_IO_stdin_used+0x80>
    f92a:	mov    r13,rax
    f92d:	call   c780 <dcgettext@plt>
    f932:	mov    rdx,r13
    f935:	mov    edi,0x1
    f93a:	mov    rsi,rax
    f93d:	xor    eax,eax
    f93f:	call   2e0a0 <logprintf>
    f944:	jmp    f5cb <connect_to_ip+0xfb>
    f949:	nop    DWORD PTR [rax+0x0]
    f950:	lea    r13,[rsp+0xa0]
    f958:	xor    edx,edx
    f95a:	lea    rsi,[rip+0x73bcf]        # 83530 <ip.8252>
    f961:	mov    rdi,r13
    f964:	call   e9c0 <sockaddr_set_data>
    f969:	jmp    f785 <connect_to_ip+0x2b5>
    f96e:	xchg   ax,ax
    f970:	mov    esi,r12d
    f973:	lea    rdi,[rip+0x4b85c]        # 5b1d6 <_IO_stdin_used+0x1d6>
    f97a:	xor    eax,eax
    f97c:	call   2e250 <debug_logprintf>
    f981:	jmp    f67e <connect_to_ip+0x1ae>
    f986:	nop    WORD PTR cs:[rax+rax*1+0x0]
    f990:	mov    edx,0x5
    f995:	lea    rsi,[rip+0x4b814]        # 5b1b0 <_IO_stdin_used+0x1b0>
    f99c:	xor    edi,edi
    f99e:	call   c780 <dcgettext@plt>
    f9a3:	mov    ecx,r13d
    f9a6:	mov    rdx,r14
    f9a9:	xor    edi,edi
    f9ab:	mov    rsi,rax
    f9ae:	xor    eax,eax
    f9b0:	call   2e0a0 <logprintf>
    f9b5:	jmp    f548 <connect_to_ip+0x78>
    f9ba:	nop    WORD PTR [rax+rax*1+0x0]
    f9c0:	mov    rdi,QWORD PTR [rip+0x7a939]        # 8a300 <opt+0x280>
    f9c7:	call   4b5b0 <quote>
    f9cc:	mov    r14,QWORD PTR [rip+0x7aa4d]        # 8a420 <exec_name>
    f9d3:	mov    edx,0x5
    f9d8:	xor    edi,edi
    f9da:	lea    rsi,[rip+0x4b6c7]        # 5b0a8 <_IO_stdin_used+0xa8>
    f9e1:	mov    r13,rax
    f9e4:	call   c780 <dcgettext@plt>
    f9e9:	mov    rcx,r13
    f9ec:	mov    rdx,r14
    f9ef:	mov    edi,0x1
    f9f4:	mov    rsi,rax
    f9f7:	xor    eax,eax
    f9f9:	call   2e0a0 <logprintf>
    f9fe:	mov    BYTE PTR [rip+0x73b43],0x0        # 83548 <should_bind.8251>
    fa05:	jmp    f5f8 <connect_to_ip+0x128>
    fa0a:	nop    WORD PTR [rax+rax*1+0x0]
    fa10:	call   c740 <__errno_location@plt>
    fa15:	mov    r13d,0x6e
    fa1b:	mov    DWORD PTR [rax],0x6e
    fa21:	mov    rbp,rax
    fa24:	jmp    f7c0 <connect_to_ip+0x2f0>
    fa29:	call   c740 <__errno_location@plt>
    fa2e:	mov    r13d,DWORD PTR [rax]
    fa31:	mov    rbp,rax
    fa34:	jmp    f7c8 <connect_to_ip+0x2f8>
    fa39:	call   c7b0 <__stack_chk_fail@plt>
    fa3e:	xchg   ax,ax

000000000000fa40 <connect_to_host>:
    fa40:	endbr64 
    fa44:	push   r15
    fa46:	push   r14
    fa48:	push   r13
    fa4a:	push   r12
    fa4c:	mov    r12d,esi
    fa4f:	xor    esi,esi
    fa51:	push   rbp
    fa52:	mov    rbp,rdi
    fa55:	push   rbx
    fa56:	sub    rsp,0x28
    fa5a:	mov    rax,QWORD PTR fs:0x28
    fa63:	mov    QWORD PTR [rsp+0x18],rax
    fa68:	xor    eax,eax
    fa6a:	lea    r14,[rsp+0x14]
    fa6f:	lea    r13,[rsp+0x10]
    fa74:	call   1e670 <lookup_host>
    fa79:	mov    r15,rax
    fa7c:	test   rax,rax
    fa7f:	je     fb3d <connect_to_host+0xfd>
    fa85:	mov    rdx,r14
    fa88:	mov    rsi,r13
    fa8b:	mov    rdi,r15
    fa8e:	call   1e270 <address_list_get_bounds>
    fa93:	mov    ebx,DWORD PTR [rsp+0x10]
    fa97:	cmp    ebx,DWORD PTR [rsp+0x14]
    fa9b:	jl     fab3 <connect_to_host+0x73>
    fa9d:	jmp    fb10 <connect_to_host+0xd0>
    fa9f:	nop
    faa0:	mov    esi,ebx
    faa2:	mov    rdi,r15
    faa5:	add    ebx,0x1
    faa8:	call   1e370 <address_list_set_faulty>
    faad:	cmp    DWORD PTR [rsp+0x14],ebx
    fab1:	jle    fb10 <connect_to_host+0xd0>
    fab3:	mov    esi,ebx
    fab5:	mov    rdi,r15
    fab8:	call   1e280 <address_list_address_at>
    fabd:	mov    rdx,rbp
    fac0:	mov    esi,r12d
    fac3:	mov    rdi,rax
    fac6:	call   f4d0 <connect_to_ip>
    facb:	test   eax,eax
    facd:	js     faa0 <connect_to_host+0x60>
    facf:	mov    rdi,r15
    fad2:	mov    DWORD PTR [rsp+0xc],eax
    fad6:	call   1e3f0 <address_list_set_connected>
    fadb:	mov    rdi,r15
    fade:	call   1e410 <address_list_release>
    fae3:	mov    eax,DWORD PTR [rsp+0xc]
    fae7:	mov    rcx,QWORD PTR [rsp+0x18]
    faec:	xor    rcx,QWORD PTR fs:0x28
    faf5:	jne    fb90 <connect_to_host+0x150>
    fafb:	add    rsp,0x28
    faff:	pop    rbx
    fb00:	pop    rbp
    fb01:	pop    r12
    fb03:	pop    r13
    fb05:	pop    r14
    fb07:	pop    r15
    fb09:	ret    
    fb0a:	nop    WORD PTR [rax+rax*1+0x0]
    fb10:	mov    rdi,r15
    fb13:	call   1e400 <address_list_connected_p>
    fb18:	mov    rdi,r15
    fb1b:	test   al,al
    fb1d:	je     fb81 <connect_to_host+0x141>
    fb1f:	call   1e410 <address_list_release>
    fb24:	mov    esi,0x4
    fb29:	mov    rdi,rbp
    fb2c:	call   1e670 <lookup_host>
    fb31:	mov    r15,rax
    fb34:	test   rax,rax
    fb37:	jne    fa85 <connect_to_host+0x45>
    fb3d:	mov    rdi,rbp
    fb40:	call   4b5b0 <quote>
    fb45:	mov    r13,QWORD PTR [rip+0x7a8d4]        # 8a420 <exec_name>
    fb4c:	mov    edx,0x5
    fb51:	xor    edi,edi
    fb53:	lea    rsi,[rip+0x4b586]        # 5b0e0 <_IO_stdin_used+0xe0>
    fb5a:	mov    r12,rax
    fb5d:	call   c780 <dcgettext@plt>
    fb62:	mov    rcx,r12
    fb65:	mov    rdx,r13
    fb68:	mov    edi,0x1
    fb6d:	mov    rsi,rax
    fb70:	xor    eax,eax
    fb72:	call   2e0a0 <logprintf>
    fb77:	mov    eax,0xffffff9c
    fb7c:	jmp    fae7 <connect_to_host+0xa7>
    fb81:	call   1e410 <address_list_release>
    fb86:	mov    eax,0xffffffff
    fb8b:	jmp    fae7 <connect_to_host+0xa7>
    fb90:	call   c7b0 <__stack_chk_fail@plt>
    fb95:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000000fba0 <bind_local>:
    fba0:	endbr64 
    fba4:	push   r14
    fba6:	xor    edx,edx
    fba8:	push   r13
    fbaa:	mov    r13,rdi
    fbad:	push   r12
    fbaf:	push   rbp
    fbb0:	push   rbx
    fbb1:	mov    rbx,rsi
    fbb4:	mov    esi,0x1
    fbb9:	sub    rsp,0xa0
    fbc0:	mov    edi,DWORD PTR [rdi]
    fbc2:	mov    rax,QWORD PTR fs:0x28
    fbcb:	mov    QWORD PTR [rsp+0x98],rax
    fbd3:	xor    eax,eax
    fbd5:	mov    DWORD PTR [rsp+0x8],0x1
    fbdd:	call   c6f0 <socket@plt>
    fbe2:	test   eax,eax
    fbe4:	js     fdc0 <bind_local+0x220>
    fbea:	lea    rcx,[rsp+0x8]
    fbef:	mov    r8d,0x4
    fbf5:	mov    edi,eax
    fbf7:	mov    r12d,eax
    fbfa:	mov    edx,0x2
    fbff:	mov    esi,0x1
    fc04:	call   c1a0 <setsockopt@plt>
    fc09:	test   eax,eax
    fc0b:	jne    fd40 <bind_local+0x1a0>
    fc11:	lea    rbp,[rsp+0x10]
    fc16:	xor    eax,eax
    fc18:	mov    ecx,0x10
    fc1d:	mov    edx,DWORD PTR [rbx]
    fc1f:	mov    rdi,rbp
    fc22:	mov    rsi,r13
    fc25:	rep stos QWORD PTR es:[rdi],rax
    fc28:	mov    rdi,rbp
    fc2b:	call   e9c0 <sockaddr_set_data>
    fc30:	movzx  eax,WORD PTR [rsp+0x10]
    fc35:	mov    edx,0x10
    fc3a:	cmp    ax,0x2
    fc3e:	jne    fd28 <bind_local+0x188>
    fc44:	mov    rsi,rbp
    fc47:	mov    edi,r12d
    fc4a:	call   ca00 <bind@plt>
    fc4f:	test   eax,eax
    fc51:	js     fdd0 <bind_local+0x230>
    fc57:	cmp    BYTE PTR [rip+0x7a65d],0x0        # 8a2bb <opt+0x23b>
    fc5e:	jne    fda8 <bind_local+0x208>
    fc64:	mov    eax,DWORD PTR [rbx]
    fc66:	test   eax,eax
    fc68:	jne    fcca <bind_local+0x12a>
    fc6a:	movzx  edx,WORD PTR [rsp+0x10]
    fc6f:	mov    eax,0x10
    fc74:	cmp    dx,0x2
    fc78:	jne    fd10 <bind_local+0x170>
    fc7e:	lea    rdx,[rsp+0xc]
    fc83:	mov    rsi,rbp
    fc86:	mov    edi,r12d
    fc89:	mov    DWORD PTR [rsp+0xc],eax
    fc8d:	call   c5c0 <getsockname@plt>
    fc92:	test   eax,eax
    fc94:	js     fdd0 <bind_local+0x230>
    fc9a:	movzx  eax,WORD PTR [rsp+0x10]
    fc9f:	cmp    ax,0x2
    fca3:	je     fcaf <bind_local+0x10f>
    fca5:	cmp    ax,0xa
    fca9:	jne    fde8 <bind_local+0x248>
    fcaf:	movzx  eax,WORD PTR [rsp+0x12]
    fcb4:	rol    ax,0x8
    fcb8:	cmp    BYTE PTR [rip+0x7a5fc],0x0        # 8a2bb <opt+0x23b>
    fcbf:	movzx  eax,ax
    fcc2:	mov    DWORD PTR [rbx],eax
    fcc4:	jne    fd80 <bind_local+0x1e0>
    fcca:	mov    esi,0x1
    fccf:	mov    edi,r12d
    fcd2:	call   c3a0 <listen@plt>
    fcd7:	test   eax,eax
    fcd9:	js     fdd0 <bind_local+0x230>
    fcdf:	mov    rax,QWORD PTR [rsp+0x98]
    fce7:	xor    rax,QWORD PTR fs:0x28
    fcf0:	jne    fde3 <bind_local+0x243>
    fcf6:	add    rsp,0xa0
    fcfd:	mov    eax,r12d
    fd00:	pop    rbx
    fd01:	pop    rbp
    fd02:	pop    r12
    fd04:	pop    r13
    fd06:	pop    r14
    fd08:	ret    
    fd09:	nop    DWORD PTR [rax+0x0]
    fd10:	cmp    dx,0xa
    fd14:	jne    cc49 <bind_local.cold>
    fd1a:	mov    eax,0x1c
    fd1f:	jmp    fc7e <bind_local+0xde>
    fd24:	nop    DWORD PTR [rax+0x0]
    fd28:	cmp    ax,0xa
    fd2c:	jne    cc49 <bind_local.cold>
    fd32:	mov    edx,0x1c
    fd37:	jmp    fc44 <bind_local+0xa4>
    fd3c:	nop    DWORD PTR [rax+0x0]
    fd40:	call   c740 <__errno_location@plt>
    fd45:	mov    edi,DWORD PTR [rax]
    fd47:	call   c540 <strerror@plt>
    fd4c:	xor    edi,edi
    fd4e:	mov    edx,0x5
    fd53:	lea    rsi,[rip+0x4b3ae]        # 5b108 <_IO_stdin_used+0x108>
    fd5a:	mov    r14,rax
    fd5d:	call   c780 <dcgettext@plt>
    fd62:	mov    rdx,r14
    fd65:	mov    edi,0x1
    fd6a:	mov    rsi,rax
    fd6d:	xor    eax,eax
    fd6f:	call   2e0a0 <logprintf>
    fd74:	jmp    fc11 <bind_local+0x71>
    fd79:	nop    DWORD PTR [rax+0x0]
    fd80:	mov    r14d,DWORD PTR [rbx]
    fd83:	mov    rdi,r13
    fd86:	call   1e490 <print_address>
    fd8b:	lea    rdi,[rip+0x4b39e]        # 5b130 <_IO_stdin_used+0x130>
    fd92:	mov    rsi,rax
    fd95:	mov    edx,r14d
    fd98:	xor    eax,eax
    fd9a:	call   2e250 <debug_logprintf>
    fd9f:	jmp    fcca <bind_local+0x12a>
    fda4:	nop    DWORD PTR [rax+0x0]
    fda8:	mov    esi,r12d
    fdab:	lea    rdi,[rip+0x4b445]        # 5b1f7 <_IO_stdin_used+0x1f7>
    fdb2:	xor    eax,eax
    fdb4:	call   2e250 <debug_logprintf>
    fdb9:	jmp    fc64 <bind_local+0xc4>
    fdbe:	xchg   ax,ax
    fdc0:	mov    r12d,0xffffffff
    fdc6:	jmp    fcdf <bind_local+0x13f>
    fdcb:	nop    DWORD PTR [rax+rax*1+0x0]
    fdd0:	mov    edi,r12d
    fdd3:	mov    r12d,0xffffffff
    fdd9:	call   f400 <fd_close>
    fdde:	jmp    fcdf <bind_local+0x13f>
    fde3:	call   c7b0 <__stack_chk_fail@plt>
    fde8:	jmp    cc49 <bind_local.cold>
    fded:	nop    DWORD PTR [rax]

000000000000fdf0 <replace_attr>:
    fdf0:	push   r15
    fdf2:	push   r14
    fdf4:	mov    r14,rcx
    fdf7:	push   r13
    fdf9:	mov    r13,rdx
    fdfc:	push   r12
    fdfe:	movsxd r12,esi
    fe01:	push   rbp
    fe02:	mov    rbp,rdi
    fe05:	push   rbx
    fe06:	sub    rsp,0x8
    fe0a:	movzx  eax,BYTE PTR [rdi]
    fe0d:	cmp    al,0x22
    fe0f:	sete   bl
    fe12:	cmp    al,0x27
    fe14:	sete   dl
    fe17:	or     bl,dl
    fe19:	je     feb0 <replace_attr+0xc0>
    fe1f:	movsx  r15d,al
    fe23:	sub    r12d,0x2
    fe27:	mov    rsi,r13
    fe2a:	add    rbp,0x1
    fe2e:	mov    edi,r15d
    fe31:	movsxd r12,r12d
    fe34:	call   c660 <putc@plt>
    fe39:	add    r12,rbp
    fe3c:	mov    rsi,r13
    fe3f:	mov    rdi,r14
    fe42:	call   c580 <fputs@plt>
    fe47:	cmp    rbp,r12
    fe4a:	jae    fe8d <replace_attr+0x9d>
    fe4c:	nop    DWORD PTR [rax+0x0]
    fe50:	movzx  eax,BYTE PTR [rbp+0x0]
    fe54:	cmp    al,0x23
    fe56:	je     fee8 <replace_attr+0xf8>
    fe5c:	cmp    al,0x26
    fe5e:	jne    fe80 <replace_attr+0x90>
    fe60:	lea    rdx,[rbp+0x1]
    fe64:	cmp    rdx,r12
    fe67:	jae    fe89 <replace_attr+0x99>
    fe69:	movzx  eax,BYTE PTR [rbp+0x1]
    fe6d:	cmp    al,0x23
    fe6f:	je     ff08 <replace_attr+0x118>
    fe75:	mov    rbp,rdx
    fe78:	jmp    fe5c <replace_attr+0x6c>
    fe7a:	nop    WORD PTR [rax+rax*1+0x0]
    fe80:	add    rbp,0x1
    fe84:	cmp    rbp,r12
    fe87:	jb     fe50 <replace_attr+0x60>
    fe89:	test   bl,bl
    fe8b:	je     fe91 <replace_attr+0xa1>
    fe8d:	add    r12,0x1
    fe91:	mov    rsi,r13
    fe94:	mov    edi,r15d
    fe97:	call   c660 <putc@plt>
    fe9c:	add    rsp,0x8
    fea0:	mov    rax,r12
    fea3:	pop    rbx
    fea4:	pop    rbp
    fea5:	pop    r12
    fea7:	pop    r13
    fea9:	pop    r14
    feab:	pop    r15
    fead:	ret    
    feae:	xchg   ax,ax
    feb0:	mov    rsi,r13
    feb3:	mov    edi,0x22
    feb8:	add    r12,rbp
    febb:	mov    r15d,0x22
    fec1:	call   c660 <putc@plt>
    fec6:	mov    rsi,r13
    fec9:	mov    rdi,r14
    fecc:	call   c580 <fputs@plt>
    fed1:	cmp    rbp,r12
    fed4:	jae    fe91 <replace_attr+0xa1>
    fed6:	movzx  eax,BYTE PTR [rbp+0x0]
    feda:	cmp    al,0x23
    fedc:	jne    fe5c <replace_attr+0x6c>
    fee2:	nop    WORD PTR [rax+rax*1+0x0]
    fee8:	mov    rdx,r12
    feeb:	mov    rcx,r13
    feee:	mov    esi,0x1
    fef3:	mov    rdi,rbp
    fef6:	sub    rdx,rbp
    fef9:	call   ca10 <fwrite@plt>
    fefe:	test   bl,bl
    ff00:	je     fe91 <replace_attr+0xa1>
    ff02:	jmp    fe8d <replace_attr+0x9d>
    ff04:	nop    DWORD PTR [rax+0x0]
    ff08:	add    rbp,0x2
    ff0c:	cmp    rbp,r12
    ff0f:	jb     fe50 <replace_attr+0x60>
    ff15:	test   bl,bl
    ff17:	je     fe91 <replace_attr+0xa1>
    ff1d:	jmp    fe8d <replace_attr+0x9d>
    ff22:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    ff2d:	nop    DWORD PTR [rax]

000000000000ff30 <replace_attr_refresh_hack>:
    ff30:	push   r15
    ff32:	mov    r9d,r8d
    ff35:	mov    r15,rdx
    ff38:	mov    edx,0x1
    ff3d:	push   r14
    ff3f:	mov    r14d,esi
    ff42:	mov    esi,0x400
    ff47:	push   r13
    ff49:	mov    r13,rdi
    ff4c:	push   r12
    ff4e:	mov    r12,rcx
    ff51:	push   rbp
    ff52:	mov    ebp,r8d
    ff55:	lea    r8,[rip+0x4b2d4]        # 5b230 <_IO_stdin_used+0x230>
    ff5c:	push   rbx
    ff5d:	sub    rsp,0x428
    ff64:	mov    rax,QWORD PTR fs:0x28
    ff6d:	mov    QWORD PTR [rsp+0x418],rax
    ff75:	xor    eax,eax
    ff77:	lea    rbx,[rsp+0x10]
    ff7c:	sub    rsp,0x8
    ff80:	push   rcx
    ff81:	mov    rdi,rbx
    ff84:	mov    ecx,0x400
    ff89:	call   c9d0 <__snprintf_chk@plt>
    ff8e:	pop    rdx
    ff8f:	pop    rcx
    ff90:	cmp    eax,0x3ff
    ff95:	ja     ffd0 <replace_attr_refresh_hack+0xa0>
    ff97:	mov    rcx,rbx
    ff9a:	mov    rdx,r15
    ff9d:	mov    esi,r14d
    ffa0:	mov    rdi,r13
    ffa3:	call   fdf0 <replace_attr>
    ffa8:	mov    rbx,QWORD PTR [rsp+0x418]
    ffb0:	xor    rbx,QWORD PTR fs:0x28
    ffb9:	jne    1000b <replace_attr_refresh_hack+0xdb>
    ffbb:	add    rsp,0x428
    ffc2:	pop    rbx
    ffc3:	pop    rbp
    ffc4:	pop    r12
    ffc6:	pop    r13
    ffc8:	pop    r14
    ffca:	pop    r15
    ffcc:	ret    
    ffcd:	nop    DWORD PTR [rax]
    ffd0:	mov    esi,ebp
    ffd2:	mov    rdx,r12
    ffd5:	lea    rdi,[rip+0x4b254]        # 5b230 <_IO_stdin_used+0x230>
    ffdc:	xor    eax,eax
    ffde:	call   3ba30 <aprintf>
    ffe3:	mov    rdx,r15
    ffe6:	mov    esi,r14d
    ffe9:	mov    rdi,r13
    ffec:	mov    rbp,rax
    ffef:	mov    rcx,rax
    fff2:	call   fdf0 <replace_attr>
    fff7:	mov    rdi,rbp
    fffa:	mov    QWORD PTR [rsp+0x8],rax
    ffff:	call   4bdc0 <rpl_free>
   10004:	mov    rax,QWORD PTR [rsp+0x8]
   10009:	jmp    ffa8 <replace_attr_refresh_hack+0x78>
   1000b:	call   c7b0 <__stack_chk_fail@plt>

0000000000010010 <dissociate_urls_from_file_mapper>:
   10010:	endbr64 
   10014:	push   r12
   10016:	mov    r12,rdi
   10019:	push   rbp
   1001a:	mov    rbp,rsi
   1001d:	mov    rsi,rdx
   10020:	mov    rdi,rbp
   10023:	sub    rsp,0x8
   10027:	call   be40 <strcmp@plt>
   1002c:	test   eax,eax
   1002e:	je     10040 <dissociate_urls_from_file_mapper+0x30>
   10030:	add    rsp,0x8
   10034:	xor    eax,eax
   10036:	pop    rbp
   10037:	pop    r12
   10039:	ret    
   1003a:	nop    WORD PTR [rax+rax*1+0x0]
   10040:	mov    rdi,QWORD PTR [rip+0x79fe9]        # 8a030 <dl_url_file_map>
   10047:	mov    rsi,r12
   1004a:	call   1dec0 <hash_table_remove>
   1004f:	mov    rdi,r12
   10052:	call   4bdc0 <rpl_free>
   10057:	mov    rdi,rbp
   1005a:	call   4bdc0 <rpl_free>
   1005f:	add    rsp,0x8
   10063:	xor    eax,eax
   10065:	pop    rbp
   10066:	pop    r12
   10068:	ret    
   10069:	nop    DWORD PTR [rax+0x0]

0000000000010070 <register_download>:
   10070:	endbr64 
   10074:	push   r15
   10076:	push   r14
   10078:	push   r13
   1007a:	push   r12
   1007c:	mov    r12,rsi
   1007f:	push   rbp
   10080:	mov    rbp,rdi
   10083:	push   rbx
   10084:	sub    rsp,0x28
   10088:	mov    rax,QWORD PTR fs:0x28
   10091:	mov    QWORD PTR [rsp+0x18],rax
   10096:	xor    eax,eax
   10098:	cmp    QWORD PTR [rip+0x734d0],0x0        # 83570 <dl_file_url_map>
   100a0:	je     10290 <register_download+0x220>
   100a6:	cmp    QWORD PTR [rip+0x79f82],0x0        # 8a030 <dl_url_file_map>
   100ae:	je     102b0 <register_download+0x240>
   100b4:	lea    r14,[rsp+0x10]
   100b9:	lea    r13,[rsp+0x8]
   100be:	mov    rdi,QWORD PTR [rip+0x734ab]        # 83570 <dl_file_url_map>
   100c5:	mov    rsi,r12
   100c8:	mov    rcx,r14
   100cb:	mov    rdx,r13
   100ce:	call   1db10 <hash_table_get_pair>
   100d3:	test   eax,eax
   100d5:	je     101c3 <register_download+0x153>
   100db:	mov    rbx,QWORD PTR [rsp+0x10]
   100e0:	mov    rdi,rbp
   100e3:	mov    rsi,rbx
   100e6:	call   be40 <strcmp@plt>
   100eb:	test   eax,eax
   100ed:	je     10226 <register_download+0x1b6>
   100f3:	movzx  eax,BYTE PTR [rbp+0x0]
   100f7:	mov    rdx,rbp
   100fa:	xor    esi,esi
   100fc:	test   al,al
   100fe:	jne    10123 <register_download+0xb3>
   10100:	jmp    10178 <register_download+0x108>
   10102:	nop    WORD PTR [rax+rax*1+0x0]
   10108:	test   cl,cl
   1010a:	je     1012a <register_download+0xba>
   1010c:	movzx  eax,BYTE PTR [rdx+0x1]
   10110:	add    rdx,0x1
   10114:	add    rbx,0x1
   10118:	add    esi,0x1
   1011b:	test   al,al
   1011d:	je     102c8 <register_download+0x258>
   10123:	movzx  ecx,BYTE PTR [rbx]
   10126:	cmp    cl,al
   10128:	je     10108 <register_download+0x98>
   1012a:	test   esi,esi
   1012c:	je     10178 <register_download+0x108>
   1012e:	test   cl,cl
   10130:	jne    10178 <register_download+0x108>
   10132:	movzx  eax,BYTE PTR [rdx]
   10135:	mov    rbx,rdx
   10138:	cmp    al,0x2f
   1013a:	je     102e0 <register_download+0x270>
   10140:	cmp    BYTE PTR [rbx-0x1],0x2f
   10144:	lea    rsi,[rbx-0x1]
   10148:	je     102d8 <register_download+0x268>
   1014e:	mov    ecx,0xc
   10153:	lea    rdi,[rip+0x4b0e1]        # 5b23b <_IO_stdin_used+0x23b>
   1015a:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1015c:	seta   al
   1015f:	sbb    al,0x0
   10161:	test   al,al
   10163:	jne    10178 <register_download+0x108>
   10165:	mov    rdi,QWORD PTR [rip+0x79ec4]        # 8a030 <dl_url_file_map>
   1016c:	mov    rsi,rbp
   1016f:	call   1dbf0 <hash_table_contains>
   10174:	test   eax,eax
   10176:	je     101e8 <register_download+0x178>
   10178:	mov    rdi,QWORD PTR [rip+0x733f1]        # 83570 <dl_file_url_map>
   1017f:	mov    rsi,r12
   10182:	call   1dec0 <hash_table_remove>
   10187:	mov    rdi,QWORD PTR [rsp+0x8]
   1018c:	call   4bdc0 <rpl_free>
   10191:	mov    rdi,QWORD PTR [rsp+0x10]
   10196:	mov    QWORD PTR [rsp+0x8],0x0
   1019f:	call   4bdc0 <rpl_free>
   101a4:	mov    rdi,QWORD PTR [rip+0x79e85]        # 8a030 <dl_url_file_map>
   101ab:	mov    rdx,r12
   101ae:	lea    rsi,[rip+0xfffffffffffffe5b]        # 10010 <dissociate_urls_from_file_mapper>
   101b5:	mov    QWORD PTR [rsp+0x10],0x0
   101be:	call   1e040 <hash_table_for_each>
   101c3:	mov    rdi,rbp
   101c6:	call   4ba50 <xstrdup>
   101cb:	mov    rdi,r12
   101ce:	mov    r15,rax
   101d1:	call   4ba50 <xstrdup>
   101d6:	mov    rdi,QWORD PTR [rip+0x73393]        # 83570 <dl_file_url_map>
   101dd:	mov    rdx,r15
   101e0:	mov    rsi,rax
   101e3:	call   1dc80 <hash_table_put>
   101e8:	mov    rdi,QWORD PTR [rip+0x79e41]        # 8a030 <dl_url_file_map>
   101ef:	mov    rcx,r13
   101f2:	mov    rdx,r14
   101f5:	mov    rsi,rbp
   101f8:	call   1db10 <hash_table_get_pair>
   101fd:	test   eax,eax
   101ff:	jne    10250 <register_download+0x1e0>
   10201:	mov    rdi,r12
   10204:	call   4ba50 <xstrdup>
   10209:	mov    rdi,rbp
   1020c:	mov    r12,rax
   1020f:	call   4ba50 <xstrdup>
   10214:	mov    rdi,QWORD PTR [rip+0x79e15]        # 8a030 <dl_url_file_map>
   1021b:	mov    rdx,r12
   1021e:	mov    rsi,rax
   10221:	call   1dc80 <hash_table_put>
   10226:	mov    rax,QWORD PTR [rsp+0x18]
   1022b:	xor    rax,QWORD PTR fs:0x28
   10234:	jne    102f2 <register_download+0x282>
   1023a:	add    rsp,0x28
   1023e:	pop    rbx
   1023f:	pop    rbp
   10240:	pop    r12
   10242:	pop    r13
   10244:	pop    r14
   10246:	pop    r15
   10248:	ret    
   10249:	nop    DWORD PTR [rax+0x0]
   10250:	mov    rdi,QWORD PTR [rip+0x79dd9]        # 8a030 <dl_url_file_map>
   10257:	mov    rsi,rbp
   1025a:	call   1dec0 <hash_table_remove>
   1025f:	mov    rdi,QWORD PTR [rsp+0x10]
   10264:	call   4bdc0 <rpl_free>
   10269:	mov    rdi,QWORD PTR [rsp+0x8]
   1026e:	mov    QWORD PTR [rsp+0x10],0x0
   10277:	call   4bdc0 <rpl_free>
   1027c:	mov    QWORD PTR [rsp+0x8],0x0
   10285:	jmp    10201 <register_download+0x191>
   1028a:	nop    WORD PTR [rax+rax*1+0x0]
   10290:	xor    edi,edi
   10292:	call   1e140 <make_string_hash_table>
   10297:	cmp    QWORD PTR [rip+0x79d91],0x0        # 8a030 <dl_url_file_map>
   1029f:	mov    QWORD PTR [rip+0x732ca],rax        # 83570 <dl_file_url_map>
   102a6:	jne    100b4 <register_download+0x44>
   102ac:	nop    DWORD PTR [rax+0x0]
   102b0:	xor    edi,edi
   102b2:	call   1e140 <make_string_hash_table>
   102b7:	mov    QWORD PTR [rip+0x79d72],rax        # 8a030 <dl_url_file_map>
   102be:	jmp    100b4 <register_download+0x44>
   102c3:	nop    DWORD PTR [rax+rax*1+0x0]
   102c8:	movzx  eax,BYTE PTR [rbx]
   102cb:	test   al,al
   102cd:	jne    10138 <register_download+0xc8>
   102d3:	jmp    10165 <register_download+0xf5>
   102d8:	mov    rbx,rsi
   102db:	nop    DWORD PTR [rax+rax*1+0x0]
   102e0:	cmp    BYTE PTR [rbx+0x1],0x0
   102e4:	je     10165 <register_download+0xf5>
   102ea:	mov    rsi,rbx
   102ed:	jmp    1014e <register_download+0xde>
   102f2:	call   c7b0 <__stack_chk_fail@plt>
   102f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000010300 <register_redirection>:
   10300:	endbr64 
   10304:	push   r12
   10306:	push   rbp
   10307:	mov    rbp,rdi
   1030a:	sub    rsp,0x18
   1030e:	cmp    QWORD PTR [rip+0x7325a],0x0        # 83570 <dl_file_url_map>
   10316:	je     103a0 <register_redirection+0xa0>
   1031c:	mov    rdi,QWORD PTR [rip+0x79d0d]        # 8a030 <dl_url_file_map>
   10323:	test   rdi,rdi
   10326:	je     10380 <register_redirection+0x80>
   10328:	call   1da70 <hash_table_get>
   1032d:	mov    rdi,QWORD PTR [rip+0x79cfc]        # 8a030 <dl_url_file_map>
   10334:	mov    rsi,rbp
   10337:	mov    r12,rax
   1033a:	call   1dbf0 <hash_table_contains>
   1033f:	test   eax,eax
   10341:	je     10350 <register_redirection+0x50>
   10343:	add    rsp,0x18
   10347:	pop    rbp
   10348:	pop    r12
   1034a:	ret    
   1034b:	nop    DWORD PTR [rax+rax*1+0x0]
   10350:	mov    rdi,r12
   10353:	call   4ba50 <xstrdup>
   10358:	mov    rdi,rbp
   1035b:	mov    r12,rax
   1035e:	call   4ba50 <xstrdup>
   10363:	mov    rdi,QWORD PTR [rip+0x79cc6]        # 8a030 <dl_url_file_map>
   1036a:	add    rsp,0x18
   1036e:	mov    rdx,r12
   10371:	pop    rbp
   10372:	mov    rsi,rax
   10375:	pop    r12
   10377:	jmp    1dc80 <hash_table_put>
   1037c:	nop    DWORD PTR [rax+0x0]
   10380:	mov    QWORD PTR [rsp+0x8],rsi
   10385:	call   1e140 <make_string_hash_table>
   1038a:	mov    rsi,QWORD PTR [rsp+0x8]
   1038f:	mov    QWORD PTR [rip+0x79c9a],rax        # 8a030 <dl_url_file_map>
   10396:	mov    rdi,rax
   10399:	jmp    10328 <register_redirection+0x28>
   1039b:	nop    DWORD PTR [rax+rax*1+0x0]
   103a0:	xor    edi,edi
   103a2:	mov    QWORD PTR [rsp+0x8],rsi
   103a7:	call   1e140 <make_string_hash_table>
   103ac:	mov    rsi,QWORD PTR [rsp+0x8]
   103b1:	mov    QWORD PTR [rip+0x731b8],rax        # 83570 <dl_file_url_map>
   103b8:	jmp    1031c <register_redirection+0x1c>
   103bd:	nop    DWORD PTR [rax]

00000000000103c0 <register_delete_file>:
   103c0:	endbr64 
   103c4:	push   r12
   103c6:	mov    r12,rdi
   103c9:	sub    rsp,0x20
   103cd:	mov    rax,QWORD PTR fs:0x28
   103d6:	mov    QWORD PTR [rsp+0x18],rax
   103db:	xor    eax,eax
   103dd:	cmp    QWORD PTR [rip+0x7318b],0x0        # 83570 <dl_file_url_map>
   103e5:	je     10498 <register_delete_file+0xd8>
   103eb:	cmp    QWORD PTR [rip+0x79c3d],0x0        # 8a030 <dl_url_file_map>
   103f3:	je     10480 <register_delete_file+0xc0>
   103f9:	mov    rdi,QWORD PTR [rip+0x73170]        # 83570 <dl_file_url_map>
   10400:	lea    rcx,[rsp+0x8]
   10405:	lea    rdx,[rsp+0x10]
   1040a:	mov    rsi,r12
   1040d:	call   1db10 <hash_table_get_pair>
   10412:	test   eax,eax
   10414:	je     10461 <register_delete_file+0xa1>
   10416:	mov    rdi,QWORD PTR [rip+0x73153]        # 83570 <dl_file_url_map>
   1041d:	mov    rsi,r12
   10420:	call   1dec0 <hash_table_remove>
   10425:	mov    rdi,QWORD PTR [rsp+0x10]
   1042a:	call   4bdc0 <rpl_free>
   1042f:	mov    rdi,QWORD PTR [rsp+0x8]
   10434:	mov    QWORD PTR [rsp+0x10],0x0
   1043d:	call   4bdc0 <rpl_free>
   10442:	mov    rdi,QWORD PTR [rip+0x79be7]        # 8a030 <dl_url_file_map>
   10449:	mov    rdx,r12
   1044c:	lea    rsi,[rip+0xfffffffffffffbbd]        # 10010 <dissociate_urls_from_file_mapper>
   10453:	mov    QWORD PTR [rsp+0x8],0x0
   1045c:	call   1e040 <hash_table_for_each>
   10461:	mov    rax,QWORD PTR [rsp+0x18]
   10466:	xor    rax,QWORD PTR fs:0x28
   1046f:	jne    104ab <register_delete_file+0xeb>
   10471:	add    rsp,0x20
   10475:	pop    r12
   10477:	ret    
   10478:	nop    DWORD PTR [rax+rax*1+0x0]
   10480:	xor    edi,edi
   10482:	call   1e140 <make_string_hash_table>
   10487:	mov    QWORD PTR [rip+0x79ba2],rax        # 8a030 <dl_url_file_map>
   1048e:	jmp    103f9 <register_delete_file+0x39>
   10493:	nop    DWORD PTR [rax+rax*1+0x0]
   10498:	xor    edi,edi
   1049a:	call   1e140 <make_string_hash_table>
   1049f:	mov    QWORD PTR [rip+0x730ca],rax        # 83570 <dl_file_url_map>
   104a6:	jmp    103eb <register_delete_file+0x2b>
   104ab:	call   c7b0 <__stack_chk_fail@plt>

00000000000104b0 <register_html>:
   104b0:	endbr64 
   104b4:	mov    rsi,rdi
   104b7:	mov    rdi,QWORD PTR [rip+0x79b6a]        # 8a028 <downloaded_html_set>
   104be:	test   rdi,rdi
   104c1:	je     104d0 <register_html+0x20>
   104c3:	jmp    3cc20 <string_set_add>
   104c8:	nop    DWORD PTR [rax+rax*1+0x0]
   104d0:	sub    rsp,0x18
   104d4:	mov    QWORD PTR [rsp+0x8],rsi
   104d9:	call   1e140 <make_string_hash_table>
   104de:	mov    rsi,QWORD PTR [rsp+0x8]
   104e3:	mov    QWORD PTR [rip+0x79b3e],rax        # 8a028 <downloaded_html_set>
   104ea:	mov    rdi,rax
   104ed:	add    rsp,0x18
   104f1:	jmp    3cc20 <string_set_add>
   104f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000010500 <register_css>:
   10500:	endbr64 
   10504:	mov    rsi,rdi
   10507:	mov    rdi,QWORD PTR [rip+0x79b12]        # 8a020 <downloaded_css_set>
   1050e:	test   rdi,rdi
   10511:	je     10520 <register_css+0x20>
   10513:	jmp    3cc20 <string_set_add>
   10518:	nop    DWORD PTR [rax+rax*1+0x0]
   10520:	sub    rsp,0x18
   10524:	mov    QWORD PTR [rsp+0x8],rsi
   10529:	call   1e140 <make_string_hash_table>
   1052e:	mov    rsi,QWORD PTR [rsp+0x8]
   10533:	mov    QWORD PTR [rip+0x79ae6],rax        # 8a020 <downloaded_css_set>
   1053a:	mov    rdi,rax
   1053d:	add    rsp,0x18
   10541:	jmp    3cc20 <string_set_add>
   10546:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000010550 <downloaded_file>:
   10550:	endbr64 
   10554:	push   r12
   10556:	push   rbp
   10557:	mov    rbp,rsi
   1055a:	push   rbx
   1055b:	mov    ebx,edi
   1055d:	mov    rdi,QWORD PTR [rip+0x72ffc]        # 83560 <downloaded_files_hash>
   10564:	cmp    ebx,0x3
   10567:	je     105d0 <downloaded_file+0x80>
   10569:	test   rdi,rdi
   1056c:	je     10600 <downloaded_file+0xb0>
   10572:	mov    rsi,rbp
   10575:	call   1da70 <hash_table_get>
   1057a:	mov    r12,rax
   1057d:	test   rax,rax
   10580:	je     10590 <downloaded_file+0x40>
   10582:	pop    rbx
   10583:	mov    eax,DWORD PTR [rax]
   10585:	pop    rbp
   10586:	pop    r12
   10588:	ret    
   10589:	nop    DWORD PTR [rax+0x0]
   10590:	cmp    ebx,0x1
   10593:	je     10618 <downloaded_file+0xc8>
   10599:	cmp    ebx,0x2
   1059c:	je     105f0 <downloaded_file+0xa0>
   1059e:	test   ebx,ebx
   105a0:	lea    rax,[rip+0x72fb1]        # 83558 <v1.7512>
   105a7:	cmove  r12,rax
   105ab:	mov    rdi,rbp
   105ae:	call   4ba50 <xstrdup>
   105b3:	mov    rdi,QWORD PTR [rip+0x72fa6]        # 83560 <downloaded_files_hash>
   105ba:	mov    rdx,r12
   105bd:	mov    rsi,rax
   105c0:	call   1dc80 <hash_table_put>
   105c5:	pop    rbx
   105c6:	xor    eax,eax
   105c8:	pop    rbp
   105c9:	pop    r12
   105cb:	ret    
   105cc:	nop    DWORD PTR [rax+0x0]
   105d0:	test   rdi,rdi
   105d3:	je     105c5 <downloaded_file+0x75>
   105d5:	call   1da70 <hash_table_get>
   105da:	test   rax,rax
   105dd:	je     105c5 <downloaded_file+0x75>
   105df:	pop    rbx
   105e0:	mov    eax,DWORD PTR [rax]
   105e2:	pop    rbp
   105e3:	pop    r12
   105e5:	ret    
   105e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   105f0:	lea    r12,[rip+0x6ea25]        # 7f01c <v3.7514>
   105f7:	jmp    105ab <downloaded_file+0x5b>
   105f9:	nop    DWORD PTR [rax+0x0]
   10600:	call   1e140 <make_string_hash_table>
   10605:	mov    QWORD PTR [rip+0x72f54],rax        # 83560 <downloaded_files_hash>
   1060c:	mov    rdi,rax
   1060f:	jmp    10572 <downloaded_file+0x22>
   10614:	nop    DWORD PTR [rax+0x0]
   10618:	lea    r12,[rip+0x6ea01]        # 7f020 <v2.7513>
   1061f:	jmp    105ab <downloaded_file+0x5b>
   10621:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1062c:	nop    DWORD PTR [rax+0x0]

0000000000010630 <html_quote_string>:
   10630:	endbr64 
   10634:	push   rbx
   10635:	movzx  eax,BYTE PTR [rdi]
   10638:	mov    rbx,rdi
   1063b:	test   al,al
   1063d:	je     10740 <html_quote_string+0x110>
   10643:	mov    rdx,rdi
   10646:	xor    ecx,ecx
   10648:	nop    DWORD PTR [rax+rax*1+0x0]
   10650:	lea    edi,[rcx+0x4]
   10653:	cmp    al,0x26
   10655:	je     10674 <html_quote_string+0x44>
   10657:	mov    esi,eax
   10659:	lea    edi,[rcx+0x3]
   1065c:	and    esi,0xfffffffd
   1065f:	cmp    sil,0x3c
   10663:	je     10674 <html_quote_string+0x44>
   10665:	lea    edi,[rcx+0x5]
   10668:	cmp    al,0x22
   1066a:	je     10674 <html_quote_string+0x44>
   1066c:	lea    edi,[rcx+0x4]
   1066f:	cmp    al,0x20
   10671:	cmovne edi,ecx
   10674:	movzx  eax,BYTE PTR [rdx+0x1]
   10678:	add    rdx,0x1
   1067c:	lea    ecx,[rdi+0x1]
   1067f:	test   al,al
   10681:	jne    10650 <html_quote_string+0x20>
   10683:	add    edi,0x2
   10686:	movsxd rdi,edi
   10689:	call   4b850 <xmalloc>
   1068e:	movzx  esi,BYTE PTR [rbx]
   10691:	mov    rdx,rax
   10694:	test   sil,sil
   10697:	je     106cc <html_quote_string+0x9c>
   10699:	lea    rdi,[rip+0x4ac50]        # 5b2f0 <_IO_stdin_used+0x2f0>
   106a0:	lea    ecx,[rsi-0x20]
   106a3:	cmp    cl,0x1e
   106a6:	ja     106b8 <html_quote_string+0x88>
   106a8:	movzx  ecx,cl
   106ab:	movsxd rcx,DWORD PTR [rdi+rcx*4]
   106af:	add    rcx,rdi
   106b2:	notrack jmp rcx
   106b5:	nop    DWORD PTR [rax]
   106b8:	mov    BYTE PTR [rdx],sil
   106bb:	add    rdx,0x1
   106bf:	movzx  esi,BYTE PTR [rbx+0x1]
   106c3:	add    rbx,0x1
   106c7:	test   sil,sil
   106ca:	jne    106a0 <html_quote_string+0x70>
   106cc:	mov    BYTE PTR [rdx],0x0
   106cf:	pop    rbx
   106d0:	ret    
   106d1:	nop    DWORD PTR [rax+0x0]
   106d8:	cmp    sil,0x3c
   106dc:	mov    esi,0x3b74
   106e1:	mov    BYTE PTR [rdx],0x26
   106e4:	sete   cl
   106e7:	mov    WORD PTR [rdx+0x2],si
   106eb:	add    rdx,0x4
   106ef:	lea    ecx,[rcx+rcx*4+0x67]
   106f3:	mov    BYTE PTR [rdx-0x3],cl
   106f6:	jmp    106bf <html_quote_string+0x8f>
   106f8:	nop    DWORD PTR [rax+rax*1+0x0]
   10700:	mov    DWORD PTR [rdx],0x706d6126
   10706:	add    rdx,0x5
   1070a:	mov    BYTE PTR [rdx-0x1],0x3b
   1070e:	jmp    106bf <html_quote_string+0x8f>
   10710:	mov    ecx,0x3b74
   10715:	mov    DWORD PTR [rdx],0x6f757126
   1071b:	add    rdx,0x6
   1071f:	mov    WORD PTR [rdx-0x2],cx
   10723:	jmp    106bf <html_quote_string+0x8f>
   10725:	nop    DWORD PTR [rax]
   10728:	mov    DWORD PTR [rdx],0x32332326
   1072e:	add    rdx,0x5
   10732:	mov    BYTE PTR [rdx-0x1],0x3b
   10736:	jmp    106bf <html_quote_string+0x8f>
   10738:	nop    DWORD PTR [rax+rax*1+0x0]
   10740:	mov    edi,0x1
   10745:	jmp    10689 <html_quote_string+0x59>
   1074a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000010750 <local_quote_string>:
   10750:	push   r12
   10752:	push   rbp
   10753:	mov    rbp,rdi
   10756:	push   rbx
   10757:	mov    ebx,esi
   10759:	lea    rsi,[rip+0x4aae7]        # 5b247 <_IO_stdin_used+0x247>
   10760:	sub    rsp,0x410
   10767:	mov    rax,QWORD PTR fs:0x28
   10770:	mov    QWORD PTR [rsp+0x408],rax
   10778:	xor    eax,eax
   1077a:	call   c0a0 <strpbrk@plt>
   1077f:	test   rax,rax
   10782:	je     108f8 <local_quote_string+0x1a8>
   10788:	mov    rdi,rbp
   1078b:	call   c310 <strlen@plt>
   10790:	lea    rdi,[rax+rax*2]
   10794:	cmp    rdi,0x3ff
   1079b:	ja     108c0 <local_quote_string+0x170>
   107a1:	movzx  eax,BYTE PTR [rbp+0x0]
   107a5:	mov    rdi,rsp
   107a8:	mov    r12,rdi
   107ab:	test   al,al
   107ad:	je     108dc <local_quote_string+0x18c>
   107b3:	movzx  ecx,BYTE PTR [rip+0x79b3f]        # 8a2f9 <opt+0x279>
   107ba:	mov    rdx,r12
   107bd:	jmp    107e7 <local_quote_string+0x97>
   107bf:	nop
   107c0:	cmp    al,0x25
   107c2:	jne    10870 <local_quote_string+0x120>
   107c8:	mov    r9d,0x3225
   107ce:	mov    BYTE PTR [rdx+0x2],0x35
   107d2:	add    rdx,0x3
   107d6:	mov    WORD PTR [rdx-0x3],r9w
   107db:	movzx  eax,BYTE PTR [rbp+0x1]
   107df:	add    rbp,0x1
   107e3:	test   al,al
   107e5:	je     10814 <local_quote_string+0xc4>
   107e7:	cmp    al,0x3b
   107e9:	je     10880 <local_quote_string+0x130>
   107ef:	jg     10850 <local_quote_string+0x100>
   107f1:	cmp    al,0x23
   107f3:	jne    107c0 <local_quote_string+0x70>
   107f5:	movzx  eax,BYTE PTR [rbp+0x1]
   107f9:	mov    BYTE PTR [rdx+0x2],0x33
   107fd:	add    rbp,0x1
   10801:	add    rdx,0x3
   10805:	mov    r8d,0x3225
   1080b:	mov    WORD PTR [rdx-0x3],r8w
   10810:	test   al,al
   10812:	jne    107e7 <local_quote_string+0x97>
   10814:	mov    BYTE PTR [rdx],0x0
   10817:	cmp    r12,rdi
   1081a:	je     108e0 <local_quote_string+0x190>
   10820:	test   bl,bl
   10822:	je     108a0 <local_quote_string+0x150>
   10824:	mov    rax,QWORD PTR [rsp+0x408]
   1082c:	xor    rax,QWORD PTR fs:0x28
   10835:	jne    1094f <local_quote_string+0x1ff>
   1083b:	add    rsp,0x410
   10842:	mov    rax,r12
   10845:	pop    rbx
   10846:	pop    rbp
   10847:	pop    r12
   10849:	ret    
   1084a:	nop    WORD PTR [rax+rax*1+0x0]
   10850:	cmp    al,0x3f
   10852:	jne    10870 <local_quote_string+0x120>
   10854:	test   cl,cl
   10856:	je     10870 <local_quote_string+0x120>
   10858:	mov    eax,0x3325
   1085d:	mov    BYTE PTR [rdx+0x2],0x46
   10861:	add    rdx,0x3
   10865:	mov    WORD PTR [rdx-0x3],ax
   10869:	jmp    107db <local_quote_string+0x8b>
   1086e:	xchg   ax,ax
   10870:	mov    BYTE PTR [rdx],al
   10872:	add    rdx,0x1
   10876:	jmp    107db <local_quote_string+0x8b>
   1087b:	nop    DWORD PTR [rax+rax*1+0x0]
   10880:	mov    esi,0x3325
   10885:	mov    BYTE PTR [rdx+0x2],0x42
   10889:	add    rdx,0x3
   1088d:	mov    WORD PTR [rdx-0x3],si
   10891:	jmp    107db <local_quote_string+0x8b>
   10896:	nop    WORD PTR cs:[rax+rax*1+0x0]
   108a0:	mov    rdi,r12
   108a3:	call   10630 <html_quote_string>
   108a8:	mov    rdi,r12
   108ab:	mov    rbx,rax
   108ae:	call   4bdc0 <rpl_free>
   108b3:	mov    r12,rbx
   108b6:	jmp    10824 <local_quote_string+0xd4>
   108bb:	nop    DWORD PTR [rax+rax*1+0x0]
   108c0:	add    rdi,0x1
   108c4:	call   4b850 <xmalloc>
   108c9:	mov    r12,rax
   108cc:	movzx  eax,BYTE PTR [rbp+0x0]
   108d0:	test   al,al
   108d2:	je     10945 <local_quote_string+0x1f5>
   108d4:	mov    rdi,rsp
   108d7:	jmp    107b3 <local_quote_string+0x63>
   108dc:	mov    BYTE PTR [rsp],0x0
   108e0:	test   bl,bl
   108e2:	je     10938 <local_quote_string+0x1e8>
   108e4:	call   c760 <strdup@plt>
   108e9:	mov    r12,rax
   108ec:	jmp    10824 <local_quote_string+0xd4>
   108f1:	nop    DWORD PTR [rax+0x0]
   108f8:	test   bl,bl
   108fa:	je     10928 <local_quote_string+0x1d8>
   108fc:	mov    rax,QWORD PTR [rsp+0x408]
   10904:	xor    rax,QWORD PTR fs:0x28
   1090d:	jne    1094f <local_quote_string+0x1ff>
   1090f:	add    rsp,0x410
   10916:	mov    rdi,rbp
   10919:	pop    rbx
   1091a:	pop    rbp
   1091b:	pop    r12
   1091d:	jmp    c760 <strdup@plt>
   10922:	nop    WORD PTR [rax+rax*1+0x0]
   10928:	mov    rdi,rbp
   1092b:	call   10630 <html_quote_string>
   10930:	mov    r12,rax
   10933:	jmp    10824 <local_quote_string+0xd4>
   10938:	call   10630 <html_quote_string>
   1093d:	mov    r12,rax
   10940:	jmp    10824 <local_quote_string+0xd4>
   10945:	mov    BYTE PTR [r12],0x0
   1094a:	jmp    10820 <local_quote_string+0xd0>
   1094f:	call   c7b0 <__stack_chk_fail@plt>
   10954:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1095f:	nop

0000000000010960 <convert_links_in_hashtable>:
   10960:	push   r15
   10962:	push   r14
   10964:	push   r13
   10966:	push   r12
   10968:	push   rbp
   10969:	push   rbx
   1096a:	sub    rsp,0x1000
   10971:	or     QWORD PTR [rsp],0x0
   10976:	sub    rsp,0x1000
   1097d:	or     QWORD PTR [rsp],0x0
   10982:	sub    rsp,0x478
   10989:	mov    DWORD PTR [rsp+0x2c],esi
   1098d:	mov    QWORD PTR [rsp+0x30],rdx
   10992:	mov    rax,QWORD PTR fs:0x28
   1099b:	mov    QWORD PTR [rsp+0x2468],rax
   109a3:	xor    eax,eax
   109a5:	test   rdi,rdi
   109a8:	je     10cd9 <convert_links_in_hashtable+0x379>
   109ae:	mov    rbp,rdi
   109b1:	call   1e130 <hash_table_count>
   109b6:	mov    DWORD PTR [rsp+0x28],eax
   109ba:	test   eax,eax
   109bc:	je     10cd9 <convert_links_in_hashtable+0x379>
   109c2:	cmp    eax,0x400
   109c7:	jg     11487 <convert_links_in_hashtable+0xb27>
   109cd:	lea    rbx,[rsp+0x60]
   109d2:	mov    rdi,rbp
   109d5:	mov    rsi,rbx
   109d8:	call   3cc80 <string_set_to_array>
   109dd:	mov    eax,DWORD PTR [rsp+0x28]
   109e1:	mov    QWORD PTR [rsp+0x18],rbx
   109e6:	test   eax,eax
   109e8:	jle    10cd9 <convert_links_in_hashtable+0x379>
   109ee:	lea    rax,[rsp+0x2060]
   109f6:	mov    QWORD PTR [rsp+0x8],0x0
   109ff:	mov    QWORD PTR [rsp+0x58],rax
   10a04:	nop    DWORD PTR [rax+0x0]
   10a08:	mov    rax,QWORD PTR [rsp+0x18]
   10a0d:	mov    rcx,QWORD PTR [rsp+0x8]
   10a12:	mov    rdi,QWORD PTR [rip+0x72b57]        # 83570 <dl_file_url_map>
   10a19:	mov    r12,QWORD PTR [rax+rcx*8]
   10a1d:	mov    rsi,r12
   10a20:	call   1da70 <hash_table_get>
   10a25:	mov    rbp,rax
   10a28:	test   rax,rax
   10a2b:	je     10ca0 <convert_links_in_hashtable+0x340>
   10a31:	cmp    BYTE PTR [rip+0x79883],0x0        # 8a2bb <opt+0x23b>
   10a38:	jne    113b0 <convert_links_in_hashtable+0xa50>
   10a3e:	mov    r9d,DWORD PTR [rsp+0x2c]
   10a43:	test   r9d,r9d
   10a46:	je     11050 <convert_links_in_hashtable+0x6f0>
   10a4c:	mov    rsi,rbp
   10a4f:	mov    rdi,r12
   10a52:	call   19580 <get_urls_css_file>
   10a57:	mov    QWORD PTR [rsp+0x10],rax
   10a5c:	mov    rax,QWORD PTR [rsp+0x10]
   10a61:	test   rax,rax
   10a64:	je     11072 <convert_links_in_hashtable+0x712>
   10a6a:	mov    rbx,rax
   10a6d:	jmp    10a84 <convert_links_in_hashtable+0x124>
   10a6f:	nop
   10a70:	mov    DWORD PTR [rbx+0x18],0x4
   10a77:	mov    rbx,QWORD PTR [rbx+0x28]
   10a7b:	test   rbx,rbx
   10a7e:	je     10b26 <convert_links_in_hashtable+0x1c6>
   10a84:	test   BYTE PTR [rbx+0x10],0x8
   10a88:	jne    10a70 <convert_links_in_hashtable+0x110>
   10a8a:	call   40010 <iri_new>
   10a8f:	mov    rsi,QWORD PTR [rip+0x7993a]        # 8a3d0 <opt+0x350>
   10a96:	mov    edx,0x1
   10a9b:	mov    rdi,rax
   10a9e:	mov    rbp,rax
   10aa1:	call   40130 <set_uri_encoding>
   10aa6:	mov    rax,QWORD PTR [rbx]
   10aa9:	mov    ecx,0x1
   10aae:	mov    rdx,rbp
   10ab1:	xor    esi,esi
   10ab3:	mov    rdi,QWORD PTR [rax]
   10ab6:	call   385f0 <url_parse>
   10abb:	mov    r13,rax
   10abe:	test   rax,rax
   10ac1:	je     10a77 <convert_links_in_hashtable+0x117>
   10ac3:	mov    rsi,QWORD PTR [rax]
   10ac6:	mov    rdi,QWORD PTR [rip+0x79563]        # 8a030 <dl_url_file_map>
   10acd:	call   1da70 <hash_table_get>
   10ad2:	mov    r14,rax
   10ad5:	test   rax,rax
   10ad8:	je     11010 <convert_links_in_hashtable+0x6b0>
   10ade:	xor    eax,eax
   10ae0:	cmp    BYTE PTR [rip+0x797f2],0x0        # 8a2d9 <opt+0x259>
   10ae7:	mov    rdi,r14
   10aea:	setne  al
   10aed:	add    eax,0x1
   10af0:	mov    DWORD PTR [rbx+0x18],eax
   10af3:	call   4ba50 <xstrdup>
   10af8:	cmp    BYTE PTR [rip+0x797bc],0x0        # 8a2bb <opt+0x23b>
   10aff:	mov    QWORD PTR [rbx+0x8],rax
   10b03:	jne    110d0 <convert_links_in_hashtable+0x770>
   10b09:	mov    rdi,r13
   10b0c:	call   374d0 <url_free>
   10b11:	mov    rdi,rbp
   10b14:	call   400d0 <iri_free>
   10b19:	mov    rbx,QWORD PTR [rbx+0x28]
   10b1d:	test   rbx,rbx
   10b20:	jne    10a84 <convert_links_in_hashtable+0x124>
   10b26:	mov    edx,0x5
   10b2b:	lea    rsi,[rip+0x4a7a1]        # 5b2d3 <_IO_stdin_used+0x2d3>
   10b32:	xor    edi,edi
   10b34:	xor    r13d,r13d
   10b37:	call   c780 <dcgettext@plt>
   10b3c:	mov    rdx,r12
   10b3f:	xor    edi,edi
   10b41:	mov    rsi,rax
   10b44:	xor    eax,eax
   10b46:	call   2e0a0 <logprintf>
   10b4b:	mov    rax,QWORD PTR [rsp+0x10]
   10b50:	cmp    DWORD PTR [rax+0x18],0x1
   10b54:	mov    rax,QWORD PTR [rax+0x28]
   10b58:	sbb    r13d,0xffffffff
   10b5c:	test   rax,rax
   10b5f:	jne    10b50 <convert_links_in_hashtable+0x1f0>
   10b61:	test   r13d,r13d
   10b64:	je     11094 <convert_links_in_hashtable+0x734>
   10b6a:	mov    edx,0x5
   10b6f:	lea    rsi,[rip+0x552af]        # 65e25 <yy_accept+0xd65>
   10b76:	xor    edi,edi
   10b78:	call   c780 <dcgettext@plt>
   10b7d:	mov    edx,r13d
   10b80:	xor    edi,edi
   10b82:	mov    rsi,rax
   10b85:	xor    eax,eax
   10b87:	call   2e0a0 <logprintf>
   10b8c:	mov    rdi,r12
   10b8f:	call   3c810 <wget_read_file>
   10b94:	mov    QWORD PTR [rsp+0x20],rax
   10b99:	test   rax,rax
   10b9c:	je     11260 <convert_links_in_hashtable+0x900>
   10ba2:	mov    rsi,r12
   10ba5:	mov    edi,0x3
   10baa:	call   10550 <downloaded_file>
   10baf:	mov    ebx,eax
   10bb1:	test   eax,eax
   10bb3:	je     10bc2 <convert_links_in_hashtable+0x262>
   10bb5:	cmp    BYTE PTR [rip+0x79702],0x0        # 8a2be <opt+0x23e>
   10bbc:	jne    113c9 <convert_links_in_hashtable+0xa69>
   10bc2:	mov    rdi,r12
   10bc5:	call   c120 <unlink@plt>
   10bca:	test   eax,eax
   10bcc:	jns    10bde <convert_links_in_hashtable+0x27e>
   10bce:	call   c740 <__errno_location@plt>
   10bd3:	mov    edi,DWORD PTR [rax]
   10bd5:	cmp    edi,0x2
   10bd8:	jne    11360 <convert_links_in_hashtable+0xa00>
   10bde:	lea    rsi,[rip+0x4a6c4]        # 5b2a9 <_IO_stdin_used+0x2a9>
   10be5:	mov    rdi,r12
   10be8:	call   c0f0 <fopen@plt>
   10bed:	mov    r14,rax
   10bf0:	test   rax,rax
   10bf3:	je     114e0 <convert_links_in_hashtable+0xb80>
   10bf9:	mov    r15,QWORD PTR [rsp+0x20]
   10bfe:	mov    r13,QWORD PTR [rsp+0x10]
   10c03:	mov    QWORD PTR [rsp+0x40],r12
   10c08:	mov    DWORD PTR [rsp+0x3c],0x0
   10c10:	mov    rcx,QWORD PTR [r15]
   10c13:	mov    DWORD PTR [rsp+0x38],0x0
   10c1b:	mov    r12,r13
   10c1e:	mov    rax,QWORD PTR [r15+0x8]
   10c22:	mov    rbx,rcx
   10c25:	jmp    10c4b <convert_links_in_hashtable+0x2eb>
   10c27:	nop    WORD PTR [rax+rax*1+0x0]
   10c30:	cmp    BYTE PTR [rip+0x79684],0x0        # 8a2bb <opt+0x23b>
   10c37:	jne    11120 <convert_links_in_hashtable+0x7c0>
   10c3d:	mov    r12,QWORD PTR [r12+0x28]
   10c42:	test   r12,r12
   10c45:	je     10d80 <convert_links_in_hashtable+0x420>
   10c4b:	movsxd rbp,DWORD PTR [r12+0x1c]
   10c50:	mov    rdx,rbp
   10c53:	cmp    rbp,rax
   10c56:	jge    110f0 <convert_links_in_hashtable+0x790>
   10c5c:	mov    edi,DWORD PTR [r12+0x18]
   10c61:	test   edi,edi
   10c63:	je     10c30 <convert_links_in_hashtable+0x2d0>
   10c65:	add    rbp,rcx
   10c68:	mov    esi,0x1
   10c6d:	mov    rcx,r14
   10c70:	mov    rdi,rbx
   10c73:	mov    rdx,rbp
   10c76:	sub    rdx,rbx
   10c79:	call   ca10 <fwrite@plt>
   10c7e:	cmp    DWORD PTR [r12+0x18],0x4
   10c84:	ja     110c0 <convert_links_in_hashtable+0x760>
   10c8a:	mov    eax,DWORD PTR [r12+0x18]
   10c8f:	lea    rcx,[rip+0x4a6d6]        # 5b36c <_IO_stdin_used+0x36c>
   10c96:	movsxd rax,DWORD PTR [rcx+rax*4]
   10c9a:	add    rax,rcx
   10c9d:	notrack jmp rax
   10ca0:	cmp    BYTE PTR [rip+0x79614],0x0        # 8a2bb <opt+0x23b>
   10ca7:	jne    114ca <convert_links_in_hashtable+0xb6a>
   10cad:	add    QWORD PTR [rsp+0x8],0x1
   10cb3:	mov    rax,QWORD PTR [rsp+0x8]
   10cb8:	cmp    DWORD PTR [rsp+0x28],eax
   10cbc:	jg     10a08 <convert_links_in_hashtable+0xa8>
   10cc2:	mov    rcx,QWORD PTR [rsp+0x18]
   10cc7:	lea    rax,[rsp+0x60]
   10ccc:	cmp    rcx,rax
   10ccf:	je     10cd9 <convert_links_in_hashtable+0x379>
   10cd1:	mov    rdi,rcx
   10cd4:	call   4bdc0 <rpl_free>
   10cd9:	mov    rax,QWORD PTR [rsp+0x2468]
   10ce1:	xor    rax,QWORD PTR fs:0x28
   10cea:	jne    11622 <convert_links_in_hashtable+0xcc2>
   10cf0:	add    rsp,0x2478
   10cf7:	pop    rbx
   10cf8:	pop    rbp
   10cf9:	pop    r12
   10cfb:	pop    r13
   10cfd:	pop    r14
   10cff:	pop    r15
   10d01:	ret    
   10d02:	nop    WORD PTR [rax+rax*1+0x0]
   10d08:	mov    rax,QWORD PTR [r12]
   10d0c:	mov    r13,QWORD PTR [rax]
   10d0f:	mov    rdi,r13
   10d12:	call   10630 <html_quote_string>
   10d17:	test   BYTE PTR [r12+0x10],0x60
   10d1d:	jne    112f0 <convert_links_in_hashtable+0x990>
   10d23:	mov    esi,DWORD PTR [r12+0x20]
   10d28:	test   BYTE PTR [r12+0x11],0x2
   10d2e:	jne    112c8 <convert_links_in_hashtable+0x968>
   10d34:	mov    rcx,rax
   10d37:	mov    rdx,r14
   10d3a:	mov    rdi,rbp
   10d3d:	mov    QWORD PTR [rsp+0x48],rax
   10d42:	call   fdf0 <replace_attr>
   10d47:	mov    r10,QWORD PTR [rsp+0x48]
   10d4c:	mov    rbx,rax
   10d4f:	cmp    BYTE PTR [rip+0x79565],0x0        # 8a2bb <opt+0x23b>
   10d56:	jne    11531 <convert_links_in_hashtable+0xbd1>
   10d5c:	mov    rdi,r10
   10d5f:	call   4bdc0 <rpl_free>
   10d64:	mov    r12,QWORD PTR [r12+0x28]
   10d69:	add    DWORD PTR [rsp+0x3c],0x1
   10d6e:	mov    rcx,QWORD PTR [r15]
   10d71:	mov    rax,QWORD PTR [r15+0x8]
   10d75:	test   r12,r12
   10d78:	jne    10c4b <convert_links_in_hashtable+0x2eb>
   10d7e:	xchg   ax,ax
   10d80:	mov    rdx,rbx
   10d83:	sub    rdx,rcx
   10d86:	cmp    rdx,rax
   10d89:	jl     11240 <convert_links_in_hashtable+0x8e0>
   10d8f:	mov    rdi,r14
   10d92:	call   c8b0 <fclose@plt>
   10d97:	mov    rdi,QWORD PTR [rsp+0x20]
   10d9c:	call   3ca20 <wget_read_file_free>
   10da1:	mov    ecx,DWORD PTR [rsp+0x3c]
   10da5:	mov    edx,DWORD PTR [rsp+0x38]
   10da9:	xor    edi,edi
   10dab:	lea    rsi,[rip+0x4a517]        # 5b2c9 <_IO_stdin_used+0x2c9>
   10db2:	xor    eax,eax
   10db4:	call   2e0a0 <logprintf>
   10db9:	mov    rax,QWORD PTR [rsp+0x30]
   10dbe:	mov    rdi,QWORD PTR [rsp+0x10]
   10dc3:	add    DWORD PTR [rax],0x1
   10dc6:	call   35d40 <free_urlpos>
   10dcb:	jmp    10cad <convert_links_in_hashtable+0x34d>
   10dd0:	movzx  eax,BYTE PTR [rbp+0x0]
   10dd4:	mov    esi,DWORD PTR [r12+0x20]
   10dd9:	cmp    al,0x22
   10ddb:	je     11148 <convert_links_in_hashtable+0x7e8>
   10de1:	mov    rdi,rbp
   10de4:	cmp    al,0x27
   10de6:	je     11148 <convert_links_in_hashtable+0x7e8>
   10dec:	movsxd rsi,esi
   10def:	call   4bb00 <xstrndup>
   10df4:	mov    esi,0x2f
   10df9:	mov    rdi,rax
   10dfc:	mov    r13,rax
   10dff:	call   c460 <strrchr@plt>
   10e04:	mov    rdi,QWORD PTR [r12+0x8]
   10e09:	mov    rbx,r13
   10e0c:	lea    r8,[rax+0x1]
   10e10:	test   rax,rax
   10e13:	cmove  r8,r13
   10e17:	test   rdi,rdi
   10e1a:	je     10e3b <convert_links_in_hashtable+0x4db>
   10e1c:	mov    esi,0x2f
   10e21:	mov    QWORD PTR [rsp+0x48],r8
   10e26:	call   c460 <strrchr@plt>
   10e2b:	mov    r8,QWORD PTR [rsp+0x48]
   10e30:	lea    rbx,[rax+0x1]
   10e34:	test   rax,rax
   10e37:	cmove  rbx,r13
   10e3b:	mov    rsi,rbx
   10e3e:	mov    rdi,r8
   10e41:	call   be40 <strcmp@plt>
   10e46:	test   eax,eax
   10e48:	jne    11340 <convert_links_in_hashtable+0x9e0>
   10e4e:	movzx  esi,BYTE PTR [r12+0x10]
   10e54:	mov    rdi,r13
   10e57:	shr    sil,0x5
   10e5b:	and    esi,0x1
   10e5e:	call   10750 <local_quote_string>
   10e63:	test   BYTE PTR [r12+0x10],0x60
   10e69:	jne    11318 <convert_links_in_hashtable+0x9b8>
   10e6f:	mov    esi,DWORD PTR [r12+0x20]
   10e74:	test   BYTE PTR [r12+0x11],0x2
   10e7a:	jne    112a0 <convert_links_in_hashtable+0x940>
   10e80:	mov    rcx,rax
   10e83:	mov    rdx,r14
   10e86:	mov    rdi,rbp
   10e89:	mov    QWORD PTR [rsp+0x48],rax
   10e8e:	call   fdf0 <replace_attr>
   10e93:	mov    r10,QWORD PTR [rsp+0x48]
   10e98:	mov    rbx,rax
   10e9b:	cmp    BYTE PTR [rip+0x79419],0x0        # 8a2bb <opt+0x23b>
   10ea2:	jne    11500 <convert_links_in_hashtable+0xba0>
   10ea8:	mov    rdi,r13
   10eab:	mov    QWORD PTR [rsp+0x48],r10
   10eb0:	call   4bdc0 <rpl_free>
   10eb5:	mov    r10,QWORD PTR [rsp+0x48]
   10eba:	mov    rdi,r10
   10ebd:	call   4bdc0 <rpl_free>
   10ec2:	add    DWORD PTR [rsp+0x38],0x1
   10ec7:	mov    rcx,QWORD PTR [r15]
   10eca:	mov    rax,QWORD PTR [r15+0x8]
   10ece:	jmp    10c3d <convert_links_in_hashtable+0x2dd>
   10ed3:	nop    DWORD PTR [rax+rax*1+0x0]
   10ed8:	mov    r8,QWORD PTR [r12+0x8]
   10edd:	test   r8,r8
   10ee0:	je     110c0 <convert_links_in_hashtable+0x760>
   10ee6:	mov    rdi,QWORD PTR [rsp+0x40]
   10eeb:	movzx  ebx,BYTE PTR [rdi]
   10eee:	mov    rax,rdi
   10ef1:	cmp    BYTE PTR [r8],bl
   10ef4:	jne    11599 <convert_links_in_hashtable+0xc39>
   10efa:	test   bl,bl
   10efc:	je     11599 <convert_links_in_hashtable+0xc39>
   10f02:	mov    rcx,r8
   10f05:	xor    esi,esi
   10f07:	jmp    10f14 <convert_links_in_hashtable+0x5b4>
   10f09:	nop    DWORD PTR [rax+0x0]
   10f10:	test   bl,bl
   10f12:	je     10f32 <convert_links_in_hashtable+0x5d2>
   10f14:	mov    rdx,rax
   10f17:	sub    rdx,rdi
   10f1a:	add    edx,0x1
   10f1d:	cmp    bl,0x2f
   10f20:	cmove  esi,edx
   10f23:	add    rcx,0x1
   10f27:	add    rax,0x1
   10f2b:	movzx  ebx,BYTE PTR [rax]
   10f2e:	cmp    BYTE PTR [rcx],bl
   10f30:	je     10f10 <convert_links_in_hashtable+0x5b0>
   10f32:	mov    rax,QWORD PTR [rsp+0x40]
   10f37:	movsxd rsi,esi
   10f3a:	add    r8,rsi
   10f3d:	lea    r13,[rax+rsi*1]
   10f41:	movzx  ebx,BYTE PTR [r13+0x0]
   10f46:	mov    rdi,r8
   10f49:	mov    QWORD PTR [rsp+0x48],r8
   10f4e:	call   c310 <strlen@plt>
   10f53:	test   bl,bl
   10f55:	mov    r8,QWORD PTR [rsp+0x48]
   10f5a:	mov    rcx,rax
   10f5d:	je     10f87 <convert_links_in_hashtable+0x627>
   10f5f:	xor    edx,edx
   10f61:	nop    DWORD PTR [rax+0x0]
   10f68:	xor    eax,eax
   10f6a:	cmp    bl,0x2f
   10f6d:	sete   al
   10f70:	movzx  ebx,BYTE PTR [r13+0x1]
   10f75:	add    r13,0x1
   10f79:	add    edx,eax
   10f7b:	test   bl,bl
   10f7d:	jne    10f68 <convert_links_in_hashtable+0x608>
   10f7f:	test   edx,edx
   10f81:	jne    11154 <convert_links_in_hashtable+0x7f4>
   10f87:	mov    rdi,r8
   10f8a:	lea    rsi,[rip+0x4a33f]        # 5b2d0 <_IO_stdin_used+0x2d0>
   10f91:	mov    QWORD PTR [rsp+0x50],rcx
   10f96:	mov    QWORD PTR [rsp+0x48],r8
   10f9b:	call   c0a0 <strpbrk@plt>
   10fa0:	mov    r8,QWORD PTR [rsp+0x48]
   10fa5:	mov    rcx,QWORD PTR [rsp+0x50]
   10faa:	test   rax,rax
   10fad:	je     115a3 <convert_links_in_hashtable+0xc43>
   10fb3:	cmp    BYTE PTR [rax],0x3a
   10fb6:	mov    QWORD PTR [rsp+0x48],r8
   10fbb:	je     1155b <convert_links_in_hashtable+0xbfb>
   10fc1:	lea    rdi,[rcx+0x1]
   10fc5:	call   4b850 <xmalloc>
   10fca:	mov    r8,QWORD PTR [rsp+0x48]
   10fcf:	mov    r13,rax
   10fd2:	mov    rdi,rax
   10fd5:	jmp    111a3 <convert_links_in_hashtable+0x843>
   10fda:	nop    WORD PTR [rax+rax*1+0x0]
   10fe0:	mov    esi,DWORD PTR [r12+0x20]
   10fe5:	lea    rcx,[rip+0x5d42b]        # 6e417 <urlchr_table+0x877>
   10fec:	mov    rdx,r14
   10fef:	mov    rdi,rbp
   10ff2:	call   fdf0 <replace_attr>
   10ff7:	mov    rcx,QWORD PTR [r15]
   10ffa:	mov    rbx,rax
   10ffd:	mov    rax,QWORD PTR [r15+0x8]
   11001:	jmp    10c3d <convert_links_in_hashtable+0x2dd>
   11006:	nop    WORD PTR cs:[rax+rax*1+0x0]
   11010:	test   BYTE PTR [rbx+0x10],0x4
   11014:	jne    1101d <convert_links_in_hashtable+0x6bd>
   11016:	mov    DWORD PTR [rbx+0x18],0x3
   1101d:	cmp    BYTE PTR [rip+0x79297],0x0        # 8a2bb <opt+0x23b>
   11024:	mov    QWORD PTR [rbx+0x8],0x0
   1102c:	je     10b09 <convert_links_in_hashtable+0x1a9>
   11032:	mov    rsi,QWORD PTR [r13+0x0]
   11036:	lea    rdi,[rip+0x4a393]        # 5b3d0 <_IO_stdin_used+0x3d0>
   1103d:	xor    eax,eax
   1103f:	call   2e250 <debug_logprintf>
   11044:	jmp    10b09 <convert_links_in_hashtable+0x1a9>
   11049:	nop    DWORD PTR [rax+0x0]
   11050:	xor    ecx,ecx
   11052:	xor    edx,edx
   11054:	mov    rsi,rbp
   11057:	mov    rdi,r12
   1105a:	call   22210 <get_urls_html>
   1105f:	mov    QWORD PTR [rsp+0x10],rax
   11064:	mov    rax,QWORD PTR [rsp+0x10]
   11069:	test   rax,rax
   1106c:	jne    10a6a <convert_links_in_hashtable+0x10a>
   11072:	mov    edx,0x5
   11077:	lea    rsi,[rip+0x4a255]        # 5b2d3 <_IO_stdin_used+0x2d3>
   1107e:	xor    edi,edi
   11080:	call   c780 <dcgettext@plt>
   11085:	mov    rdx,r12
   11088:	xor    edi,edi
   1108a:	mov    rsi,rax
   1108d:	xor    eax,eax
   1108f:	call   2e0a0 <logprintf>
   11094:	xor    edi,edi
   11096:	mov    edx,0x5
   1109b:	lea    rsi,[rip+0x4a1c1]        # 5b263 <_IO_stdin_used+0x263>
   110a2:	call   c780 <dcgettext@plt>
   110a7:	xor    edi,edi
   110a9:	mov    rsi,rax
   110ac:	call   2de60 <logputs>
   110b1:	jmp    10db9 <convert_links_in_hashtable+0x459>
   110b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   110c0:	mov    rcx,QWORD PTR [r15]
   110c3:	mov    rax,QWORD PTR [r15+0x8]
   110c7:	mov    rbx,rbp
   110ca:	jmp    10c3d <convert_links_in_hashtable+0x2dd>
   110cf:	nop
   110d0:	mov    rsi,QWORD PTR [r13+0x0]
   110d4:	mov    rdx,r14
   110d7:	lea    rdi,[rip+0x4a2ca]        # 5b3a8 <_IO_stdin_used+0x3a8>
   110de:	xor    eax,eax
   110e0:	call   2e250 <debug_logprintf>
   110e5:	jmp    10b09 <convert_links_in_hashtable+0x1a9>
   110ea:	nop    WORD PTR [rax+rax*1+0x0]
   110f0:	cmp    BYTE PTR [rip+0x791c4],0x0        # 8a2bb <opt+0x23b>
   110f7:	je     10d80 <convert_links_in_hashtable+0x420>
   110fd:	xor    eax,eax
   110ff:	lea    rdi,[rip+0x4a312]        # 5b418 <_IO_stdin_used+0x418>
   11106:	call   2e250 <debug_logprintf>
   1110b:	mov    rax,QWORD PTR [rsp+0x20]
   11110:	mov    rcx,QWORD PTR [rax]
   11113:	mov    rax,QWORD PTR [rax+0x8]
   11117:	jmp    10d80 <convert_links_in_hashtable+0x420>
   1111c:	nop    DWORD PTR [rax+0x0]
   11120:	mov    rax,QWORD PTR [r12]
   11124:	lea    rdi,[rip+0x4a181]        # 5b2ac <_IO_stdin_used+0x2ac>
   1112b:	mov    rsi,QWORD PTR [rax]
   1112e:	xor    eax,eax
   11130:	call   2e250 <debug_logprintf>
   11135:	mov    rcx,QWORD PTR [r15]
   11138:	mov    rax,QWORD PTR [r15+0x8]
   1113c:	jmp    10c3d <convert_links_in_hashtable+0x2dd>
   11141:	nop    DWORD PTR [rax+0x0]
   11148:	sub    esi,0x2
   1114b:	lea    rdi,[rbp+0x1]
   1114f:	jmp    10dec <convert_links_in_hashtable+0x48c>
   11154:	lea    ebx,[rdx+rdx*2]
   11157:	mov    QWORD PTR [rsp+0x50],r8
   1115c:	movsxd rbx,ebx
   1115f:	mov    DWORD PTR [rsp+0x48],edx
   11163:	lea    rdi,[rbx+rcx*1+0x1]
   11168:	call   4b850 <xmalloc>
   1116d:	mov    edx,DWORD PTR [rsp+0x48]
   11171:	mov    r8,QWORD PTR [rsp+0x50]
   11176:	mov    r13,rax
   11179:	sub    edx,0x1
   1117c:	lea    rdx,[rdx+rdx*2]
   11180:	lea    rdx,[rax+rdx*1+0x3]
   11185:	nop    DWORD PTR [rax]
   11188:	mov    ecx,0x2e2e
   1118d:	mov    BYTE PTR [rax+0x2],0x2f
   11191:	add    rax,0x3
   11195:	mov    WORD PTR [rax-0x3],cx
   11199:	cmp    rdx,rax
   1119c:	jne    11188 <convert_links_in_hashtable+0x828>
   1119e:	lea    rdi,[r13+rbx*1+0x0]
   111a3:	mov    rsi,r8
   111a6:	call   c830 <strcpy@plt>
   111ab:	movzx  esi,BYTE PTR [r12+0x10]
   111b1:	mov    rdi,r13
   111b4:	shr    sil,0x5
   111b8:	and    esi,0x1
   111bb:	call   10750 <local_quote_string>
   111c0:	test   BYTE PTR [r12+0x10],0x60
   111c6:	jne    114a8 <convert_links_in_hashtable+0xb48>
   111cc:	mov    esi,DWORD PTR [r12+0x20]
   111d1:	test   BYTE PTR [r12+0x11],0x2
   111d7:	je     11467 <convert_links_in_hashtable+0xb07>
   111dd:	mov    r8d,DWORD PTR [r12+0x14]
   111e2:	mov    rcx,rax
   111e5:	mov    rdx,r14
   111e8:	mov    rdi,rbp
   111eb:	mov    QWORD PTR [rsp+0x48],rax
   111f0:	call   ff30 <replace_attr_refresh_hack>
   111f5:	mov    r10,QWORD PTR [rsp+0x48]
   111fa:	mov    rbx,rax
   111fd:	cmp    BYTE PTR [rip+0x790b7],0x0        # 8a2bb <opt+0x23b>
   11204:	je     10ea8 <convert_links_in_hashtable+0x548>
   1120a:	mov    rax,QWORD PTR [r12]
   1120e:	mov    ecx,DWORD PTR [r12+0x1c]
   11213:	mov    rdx,r13
   11216:	mov    QWORD PTR [rsp+0x48],r10
   1121b:	mov    r8,QWORD PTR [rsp+0x40]
   11220:	lea    rdi,[rip+0x4a229]        # 5b450 <_IO_stdin_used+0x450>
   11227:	mov    rsi,QWORD PTR [rax]
   1122a:	xor    eax,eax
   1122c:	call   2e250 <debug_logprintf>
   11231:	mov    r10,QWORD PTR [rsp+0x48]
   11236:	jmp    10ea8 <convert_links_in_hashtable+0x548>
   1123b:	nop    DWORD PTR [rax+rax*1+0x0]
   11240:	sub    rax,rdx
   11243:	mov    rcx,r14
   11246:	mov    esi,0x1
   1124b:	mov    rdi,rbx
   1124e:	mov    rdx,rax
   11251:	call   ca10 <fwrite@plt>
   11256:	jmp    10d8f <convert_links_in_hashtable+0x42f>
   1125b:	nop    DWORD PTR [rax+rax*1+0x0]
   11260:	call   c740 <__errno_location@plt>
   11265:	mov    edi,DWORD PTR [rax]
   11267:	call   c540 <strerror@plt>
   1126c:	xor    edi,edi
   1126e:	mov    edx,0x5
   11273:	lea    rsi,[rip+0x4a17e]        # 5b3f8 <_IO_stdin_used+0x3f8>
   1127a:	mov    r13,rax
   1127d:	call   c780 <dcgettext@plt>
   11282:	mov    rcx,r13
   11285:	mov    rdx,r12
   11288:	mov    edi,0x1
   1128d:	mov    rsi,rax
   11290:	xor    eax,eax
   11292:	call   2e0a0 <logprintf>
   11297:	jmp    10db9 <convert_links_in_hashtable+0x459>
   1129c:	nop    DWORD PTR [rax+0x0]
   112a0:	mov    r8d,DWORD PTR [r12+0x14]
   112a5:	mov    rcx,rax
   112a8:	mov    rdx,r14
   112ab:	mov    rdi,rbp
   112ae:	mov    QWORD PTR [rsp+0x48],rax
   112b3:	call   ff30 <replace_attr_refresh_hack>
   112b8:	mov    r10,QWORD PTR [rsp+0x48]
   112bd:	mov    rbx,rax
   112c0:	jmp    10e9b <convert_links_in_hashtable+0x53b>
   112c5:	nop    DWORD PTR [rax]
   112c8:	mov    r8d,DWORD PTR [r12+0x14]
   112cd:	mov    rcx,rax
   112d0:	mov    rdx,r14
   112d3:	mov    rdi,rbp
   112d6:	mov    QWORD PTR [rsp+0x48],rax
   112db:	call   ff30 <replace_attr_refresh_hack>
   112e0:	mov    r10,QWORD PTR [rsp+0x48]
   112e5:	mov    rbx,rax
   112e8:	jmp    10d4f <convert_links_in_hashtable+0x3ef>
   112ed:	nop    DWORD PTR [rax]
   112f0:	movsxd rbx,DWORD PTR [r12+0x20]
   112f5:	mov    rsi,r14
   112f8:	mov    rdi,r13
   112fb:	mov    QWORD PTR [rsp+0x48],rax
   11300:	call   c580 <fputs@plt>
   11305:	mov    r10,QWORD PTR [rsp+0x48]
   1130a:	add    rbx,rbp
   1130d:	jmp    10d4f <convert_links_in_hashtable+0x3ef>
   11312:	nop    WORD PTR [rax+rax*1+0x0]
   11318:	movsxd rbx,DWORD PTR [r12+0x20]
   1131d:	mov    rsi,r14
   11320:	mov    rdi,rax
   11323:	mov    QWORD PTR [rsp+0x48],rax
   11328:	call   c580 <fputs@plt>
   1132d:	mov    r10,QWORD PTR [rsp+0x48]
   11332:	add    rbx,rbp
   11335:	jmp    10e9b <convert_links_in_hashtable+0x53b>
   1133a:	nop    WORD PTR [rax+rax*1+0x0]
   11340:	mov    rsi,rbx
   11343:	mov    rdi,r13
   11346:	call   37e80 <uri_merge>
   1134b:	mov    rdi,r13
   1134e:	mov    rbx,rax
   11351:	call   4bdc0 <rpl_free>
   11356:	mov    r13,rbx
   11359:	jmp    10e4e <convert_links_in_hashtable+0x4ee>
   1135e:	xchg   ax,ax
   11360:	call   c540 <strerror@plt>
   11365:	mov    rdi,r12
   11368:	mov    r14,rax
   1136b:	call   4b5b0 <quote>
   11370:	mov    edx,0x5
   11375:	lea    rsi,[rip+0x49f14]        # 5b290 <_IO_stdin_used+0x290>
   1137c:	mov    r12,rax
   1137f:	xor    edi,edi
   11381:	call   c780 <dcgettext@plt>
   11386:	mov    rcx,r14
   11389:	mov    rdx,r12
   1138c:	mov    edi,0x1
   11391:	mov    rsi,rax
   11394:	xor    eax,eax
   11396:	call   2e0a0 <logprintf>
   1139b:	mov    rdi,QWORD PTR [rsp+0x20]
   113a0:	call   3ca20 <wget_read_file_free>
   113a5:	jmp    10db9 <convert_links_in_hashtable+0x459>
   113aa:	nop    WORD PTR [rax+rax*1+0x0]
   113b0:	mov    rdx,rax
   113b3:	mov    rsi,r12
   113b6:	lea    rdi,[rip+0x49e8f]        # 5b24c <_IO_stdin_used+0x24c>
   113bd:	xor    eax,eax
   113bf:	call   2e250 <debug_logprintf>
   113c4:	jmp    10a3e <convert_links_in_hashtable+0xde>
   113c9:	mov    rdi,QWORD PTR [rip+0x72198]        # 83568 <converted_files>
   113d0:	test   rdi,rdi
   113d3:	je     11585 <convert_links_in_hashtable+0xc25>
   113d9:	mov    rsi,r12
   113dc:	call   3cc70 <string_set_contains>
   113e1:	test   eax,eax
   113e3:	jne    10bc2 <convert_links_in_hashtable+0x262>
   113e9:	mov    rdi,r12
   113ec:	call   c310 <strlen@plt>
   113f1:	mov    r14,QWORD PTR [rsp+0x58]
   113f6:	mov    rbp,rax
   113f9:	cmp    rax,0x3fa
   113ff:	ja     11611 <convert_links_in_hashtable+0xcb1>
   11405:	cmp    ebx,0x2
   11408:	je     115ad <convert_links_in_hashtable+0xc4d>
   1140e:	mov    rdx,rbp
   11411:	mov    rsi,r12
   11414:	mov    rdi,r14
   11417:	add    rbp,r14
   1141a:	call   cb30 <memcpy@plt>
   1141f:	mov    r8d,0x67
   11425:	mov    DWORD PTR [rbp+0x0],0x69726f2e
   1142c:	mov    WORD PTR [rbp+0x4],r8w
   11431:	mov    rsi,r14
   11434:	mov    rdi,r12
   11437:	call   cbb0 <rename@plt>
   1143c:	test   eax,eax
   1143e:	jne    115d2 <convert_links_in_hashtable+0xc72>
   11444:	cmp    r14,QWORD PTR [rsp+0x58]
   11449:	je     11453 <convert_links_in_hashtable+0xaf3>
   1144b:	mov    rdi,r14
   1144e:	call   4bdc0 <rpl_free>
   11453:	mov    rdi,QWORD PTR [rip+0x7210e]        # 83568 <converted_files>
   1145a:	mov    rsi,r12
   1145d:	call   3cc20 <string_set_add>
   11462:	jmp    10bc2 <convert_links_in_hashtable+0x262>
   11467:	mov    rcx,rax
   1146a:	mov    rdx,r14
   1146d:	mov    rdi,rbp
   11470:	mov    QWORD PTR [rsp+0x48],rax
   11475:	call   fdf0 <replace_attr>
   1147a:	mov    r10,QWORD PTR [rsp+0x48]
   1147f:	mov    rbx,rax
   11482:	jmp    111fd <convert_links_in_hashtable+0x89d>
   11487:	movsxd rdi,eax
   1148a:	shl    rdi,0x3
   1148e:	call   4b850 <xmalloc>
   11493:	mov    rdi,rbp
   11496:	mov    rsi,rax
   11499:	mov    QWORD PTR [rsp+0x18],rax
   1149e:	call   3cc80 <string_set_to_array>
   114a3:	jmp    109ee <convert_links_in_hashtable+0x8e>
   114a8:	movsxd rbx,DWORD PTR [r12+0x20]
   114ad:	mov    rsi,r14
   114b0:	mov    rdi,rax
   114b3:	mov    QWORD PTR [rsp+0x48],rax
   114b8:	call   c580 <fputs@plt>
   114bd:	mov    r10,QWORD PTR [rsp+0x48]
   114c2:	add    rbx,rbp
   114c5:	jmp    111fd <convert_links_in_hashtable+0x89d>
   114ca:	mov    rsi,r12
   114cd:	lea    rdi,[rip+0x49eac]        # 5b380 <_IO_stdin_used+0x380>
   114d4:	xor    eax,eax
   114d6:	call   2e250 <debug_logprintf>
   114db:	jmp    10cad <convert_links_in_hashtable+0x34d>
   114e0:	call   c740 <__errno_location@plt>
   114e5:	mov    edi,DWORD PTR [rax]
   114e7:	call   c540 <strerror@plt>
   114ec:	mov    edx,0x5
   114f1:	lea    rsi,[rip+0x49f00]        # 5b3f8 <_IO_stdin_used+0x3f8>
   114f8:	mov    r14,rax
   114fb:	jmp    1137f <convert_links_in_hashtable+0xa1f>
   11500:	mov    rax,QWORD PTR [r12]
   11504:	mov    ecx,DWORD PTR [r12+0x1c]
   11509:	mov    rdx,r13
   1150c:	mov    QWORD PTR [rsp+0x48],r10
   11511:	mov    r8,QWORD PTR [rsp+0x40]
   11516:	lea    rdi,[rip+0x49f63]        # 5b480 <_IO_stdin_used+0x480>
   1151d:	mov    rsi,QWORD PTR [rax]
   11520:	xor    eax,eax
   11522:	call   2e250 <debug_logprintf>
   11527:	mov    r10,QWORD PTR [rsp+0x48]
   1152c:	jmp    10ea8 <convert_links_in_hashtable+0x548>
   11531:	mov    edx,DWORD PTR [r12+0x1c]
   11536:	mov    rcx,QWORD PTR [rsp+0x40]
   1153b:	mov    rsi,r13
   1153e:	xor    eax,eax
   11540:	lea    rdi,[rip+0x49f79]        # 5b4c0 <_IO_stdin_used+0x4c0>
   11547:	mov    QWORD PTR [rsp+0x48],r10
   1154c:	call   2e250 <debug_logprintf>
   11551:	mov    r10,QWORD PTR [rsp+0x48]
   11556:	jmp    10d5c <convert_links_in_hashtable+0x3fc>
   1155b:	lea    rdi,[rcx+0x3]
   1155f:	call   4b850 <xmalloc>
   11564:	mov    esi,0x2f2e
   11569:	mov    r8,QWORD PTR [rsp+0x48]
   1156e:	mov    WORD PTR [rax],si
   11571:	lea    rdi,[rax+0x2]
   11575:	mov    r13,rax
   11578:	mov    rsi,r8
   1157b:	call   c830 <strcpy@plt>
   11580:	jmp    111ab <convert_links_in_hashtable+0x84b>
   11585:	call   1e140 <make_string_hash_table>
   1158a:	mov    QWORD PTR [rip+0x71fd7],rax        # 83568 <converted_files>
   11591:	mov    rdi,rax
   11594:	jmp    113d9 <convert_links_in_hashtable+0xa79>
   11599:	mov    r13,QWORD PTR [rsp+0x40]
   1159e:	jmp    10f46 <convert_links_in_hashtable+0x5e6>
   115a3:	mov    QWORD PTR [rsp+0x48],r8
   115a8:	jmp    10fc1 <convert_links_in_hashtable+0x661>
   115ad:	sub    rbp,0x4
   115b1:	mov    rsi,r12
   115b4:	mov    rdi,r14
   115b7:	mov    rdx,rbp
   115ba:	add    rbp,r14
   115bd:	call   cb30 <memcpy@plt>
   115c2:	mov    DWORD PTR [rbp+0x0],0x6769726f
   115c9:	mov    BYTE PTR [rbp+0x4],0x0
   115cd:	jmp    11431 <convert_links_in_hashtable+0xad1>
   115d2:	call   c740 <__errno_location@plt>
   115d7:	mov    edi,DWORD PTR [rax]
   115d9:	call   c540 <strerror@plt>
   115de:	xor    edi,edi
   115e0:	mov    edx,0x5
   115e5:	lea    rsi,[rip+0x49c87]        # 5b273 <_IO_stdin_used+0x273>
   115ec:	mov    rbx,rax
   115ef:	call   c780 <dcgettext@plt>
   115f4:	mov    r8,rbx
   115f7:	mov    rcx,r14
   115fa:	mov    rdx,r12
   115fd:	mov    rsi,rax
   11600:	mov    edi,0x1
   11605:	xor    eax,eax
   11607:	call   2e0a0 <logprintf>
   1160c:	jmp    11444 <convert_links_in_hashtable+0xae4>
   11611:	lea    rdi,[rax+0x6]
   11615:	call   4b850 <xmalloc>
   1161a:	mov    r14,rax
   1161d:	jmp    11405 <convert_links_in_hashtable+0xaa5>
   11622:	call   c7b0 <__stack_chk_fail@plt>
   11627:	nop    WORD PTR [rax+rax*1+0x0]

0000000000011630 <convert_all_links>:
   11630:	endbr64 
   11634:	push   r13
   11636:	push   r12
   11638:	push   rbp
   11639:	sub    rsp,0x10
   1163d:	mov    rax,QWORD PTR fs:0x28
   11646:	mov    QWORD PTR [rsp+0x8],rax
   1164b:	xor    eax,eax
   1164d:	lea    r12,[rsp+0x4]
   11652:	mov    DWORD PTR [rsp+0x4],0x0
   1165a:	call   31c00 <ptimer_new>
   1165f:	mov    rdi,QWORD PTR [rip+0x789c2]        # 8a028 <downloaded_html_set>
   11666:	mov    rdx,r12
   11669:	xor    esi,esi
   1166b:	mov    rbp,rax
   1166e:	call   10960 <convert_links_in_hashtable>
   11673:	mov    rdi,QWORD PTR [rip+0x789a6]        # 8a020 <downloaded_css_set>
   1167a:	mov    rdx,r12
   1167d:	mov    esi,0x1
   11682:	call   10960 <convert_links_in_hashtable>
   11687:	mov    rdi,rbp
   1168a:	call   31db0 <ptimer_measure>
   1168f:	call   3f120 <print_decimal>
   11694:	xor    edi,edi
   11696:	mov    r13d,DWORD PTR [rsp+0x4]
   1169b:	mov    edx,0x5
   116a0:	lea    rsi,[rip+0x49e51]        # 5b4f8 <_IO_stdin_used+0x4f8>
   116a7:	mov    r12,rax
   116aa:	call   c780 <dcgettext@plt>
   116af:	xor    edi,edi
   116b1:	mov    rcx,r12
   116b4:	mov    edx,r13d
   116b7:	mov    rsi,rax
   116ba:	xor    eax,eax
   116bc:	call   2e0a0 <logprintf>
   116c1:	mov    rdi,rbp
   116c4:	call   31d70 <ptimer_destroy>
   116c9:	mov    rax,QWORD PTR [rsp+0x8]
   116ce:	xor    rax,QWORD PTR fs:0x28
   116d7:	jne    116e3 <convert_all_links+0xb3>
   116d9:	add    rsp,0x10
   116dd:	pop    rbp
   116de:	pop    r12
   116e0:	pop    r13
   116e2:	ret    
   116e3:	call   c7b0 <__stack_chk_fail@plt>
   116e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000116f0 <goodness_comparator>:
   116f0:	endbr64 
   116f4:	mov    eax,DWORD PTR [rsi+0x8]
   116f7:	mov    edx,DWORD PTR [rsi+0xc]
   116fa:	sub    edx,DWORD PTR [rdi+0xc]
   116fd:	sub    eax,DWORD PTR [rdi+0x8]
   11700:	cmove  eax,edx
   11703:	ret    
   11704:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1170f:	nop

0000000000011710 <delete_cookie>:
   11710:	push   rbp
   11711:	mov    rbp,rdi
   11714:	mov    rdi,QWORD PTR [rdi]
   11717:	call   4bdc0 <rpl_free>
   1171c:	mov    QWORD PTR [rbp+0x0],0x0
   11724:	mov    rdi,QWORD PTR [rbp+0x10]
   11728:	call   4bdc0 <rpl_free>
   1172d:	mov    QWORD PTR [rbp+0x10],0x0
   11735:	mov    rdi,QWORD PTR [rbp+0x28]
   11739:	call   4bdc0 <rpl_free>
   1173e:	mov    QWORD PTR [rbp+0x28],0x0
   11746:	mov    rdi,QWORD PTR [rbp+0x30]
   1174a:	call   4bdc0 <rpl_free>
   1174f:	mov    QWORD PTR [rbp+0x30],0x0
   11757:	mov    rdi,rbp
   1175a:	pop    rbp
   1175b:	jmp    4bdc0 <rpl_free>

0000000000011760 <equality_comparator>:
   11760:	endbr64 
   11764:	push   r12
   11766:	push   rbp
   11767:	push   rbx
   11768:	mov    rbp,QWORD PTR [rsi]
   1176b:	mov    rbx,QWORD PTR [rdi]
   1176e:	mov    rsi,QWORD PTR [rbp+0x28]
   11772:	mov    rdi,QWORD PTR [rbx+0x28]
   11776:	call   be40 <strcmp@plt>
   1177b:	mov    rsi,QWORD PTR [rbp+0x30]
   1177f:	mov    rdi,QWORD PTR [rbx+0x30]
   11783:	mov    r12d,eax
   11786:	call   be40 <strcmp@plt>
   1178b:	test   r12d,r12d
   1178e:	pop    rbx
   1178f:	pop    rbp
   11790:	cmove  r12d,eax
   11794:	mov    eax,r12d
   11797:	pop    r12
   11799:	ret    
   1179a:	nop    WORD PTR [rax+rax*1+0x0]

00000000000117a0 <find_matching_cookie.isra.0>:
   117a0:	push   r14
   117a2:	push   r13
   117a4:	mov    r13,rdx
   117a7:	push   r12
   117a9:	push   rbp
   117aa:	push   rbx
   117ab:	mov    rbx,rsi
   117ae:	mov    rsi,QWORD PTR [rsi]
   117b1:	call   1da70 <hash_table_get>
   117b6:	test   rax,rax
   117b9:	je     1180d <find_matching_cookie.isra.0+0x6d>
   117bb:	mov    r14,QWORD PTR [rbx+0x10]
   117bf:	mov    r12,rax
   117c2:	xor    ebp,ebp
   117c4:	jmp    117d3 <find_matching_cookie.isra.0+0x33>
   117c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   117d0:	mov    r12,rax
   117d3:	mov    rsi,QWORD PTR [r12+0x10]
   117d8:	mov    rdi,r14
   117db:	call   be40 <strcmp@plt>
   117e0:	test   eax,eax
   117e2:	jne    11800 <find_matching_cookie.isra.0+0x60>
   117e4:	mov    rsi,QWORD PTR [r12+0x28]
   117e9:	mov    rdi,QWORD PTR [rbx+0x28]
   117ed:	call   be40 <strcmp@plt>
   117f2:	test   eax,eax
   117f4:	jne    11800 <find_matching_cookie.isra.0+0x60>
   117f6:	mov    eax,DWORD PTR [r12+0x8]
   117fb:	cmp    DWORD PTR [rbx+0x8],eax
   117fe:	je     11828 <find_matching_cookie.isra.0+0x88>
   11800:	mov    rax,QWORD PTR [r12+0x38]
   11805:	mov    rbp,r12
   11808:	test   rax,rax
   1180b:	jne    117d0 <find_matching_cookie.isra.0+0x30>
   1180d:	xor    r12d,r12d
   11810:	pop    rbx
   11811:	pop    rbp
   11812:	mov    QWORD PTR [r13+0x0],0x0
   1181a:	mov    rax,r12
   1181d:	pop    r12
   1181f:	pop    r13
   11821:	pop    r14
   11823:	ret    
   11824:	nop    DWORD PTR [rax+0x0]
   11828:	pop    rbx
   11829:	mov    QWORD PTR [r13+0x0],rbp
   1182d:	mov    rax,r12
   11830:	pop    rbp
   11831:	pop    r12
   11833:	pop    r13
   11835:	pop    r14
   11837:	ret    
   11838:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000011840 <store_cookie>:
   11840:	push   r12
   11842:	push   rbp
   11843:	mov    rbp,rsi
   11846:	push   rbx
   11847:	mov    rbx,rdi
   1184a:	sub    rsp,0x20
   1184e:	mov    rsi,QWORD PTR [rsi]
   11851:	mov    rdi,QWORD PTR [rdi]
   11854:	mov    rax,QWORD PTR fs:0x28
   1185d:	mov    QWORD PTR [rsp+0x18],rax
   11862:	xor    eax,eax
   11864:	mov    rcx,rsp
   11867:	lea    rdx,[rsp+0x8]
   1186c:	call   1db10 <hash_table_get_pair>
   11871:	test   eax,eax
   11873:	je     118d0 <store_cookie+0x90>
   11875:	mov    rdi,QWORD PTR [rbx]
   11878:	lea    rdx,[rsp+0x10]
   1187d:	mov    rsi,rbp
   11880:	call   117a0 <find_matching_cookie.isra.0>
   11885:	mov    rdi,rax
   11888:	test   rax,rax
   1188b:	je     11920 <store_cookie+0xe0>
   11891:	mov    rax,QWORD PTR [rsp+0x10]
   11896:	mov    rdx,QWORD PTR [rdi+0x38]
   1189a:	test   rax,rax
   1189d:	je     11930 <store_cookie+0xf0>
   118a3:	mov    QWORD PTR [rax+0x38],rdx
   118a7:	mov    rax,QWORD PTR [rsp]
   118ab:	mov    QWORD PTR [rbp+0x38],rax
   118af:	call   11710 <delete_cookie>
   118b4:	sub    DWORD PTR [rbx+0x8],0x1
   118b8:	cmp    BYTE PTR [rip+0x789fc],0x0        # 8a2bb <opt+0x23b>
   118bf:	jne    119d0 <store_cookie+0x190>
   118c5:	mov    rsi,QWORD PTR [rsp+0x8]
   118ca:	jmp    118e9 <store_cookie+0xa9>
   118cc:	nop    DWORD PTR [rax+0x0]
   118d0:	mov    QWORD PTR [rbp+0x38],0x0
   118d8:	mov    rdi,QWORD PTR [rbp+0x0]
   118dc:	call   4ba50 <xstrdup>
   118e1:	mov    QWORD PTR [rsp+0x8],rax
   118e6:	mov    rsi,rax
   118e9:	mov    rdi,QWORD PTR [rbx]
   118ec:	mov    rdx,rbp
   118ef:	call   1dc80 <hash_table_put>
   118f4:	add    DWORD PTR [rbx+0x8],0x1
   118f8:	cmp    BYTE PTR [rip+0x789bc],0x0        # 8a2bb <opt+0x23b>
   118ff:	jne    11940 <store_cookie+0x100>
   11901:	mov    rax,QWORD PTR [rsp+0x18]
   11906:	xor    rax,QWORD PTR fs:0x28
   1190f:	jne    119f2 <store_cookie+0x1b2>
   11915:	add    rsp,0x20
   11919:	pop    rbx
   1191a:	pop    rbp
   1191b:	pop    r12
   1191d:	ret    
   1191e:	xchg   ax,ax
   11920:	mov    rax,QWORD PTR [rsp]
   11924:	mov    QWORD PTR [rbp+0x38],rax
   11928:	jmp    118c5 <store_cookie+0x85>
   1192a:	nop    WORD PTR [rax+rax*1+0x0]
   11930:	mov    QWORD PTR [rbp+0x38],rdx
   11934:	jmp    118af <store_cookie+0x6f>
   11939:	nop    DWORD PTR [rax+0x0]
   11940:	mov    rdi,QWORD PTR [rbp+0x20]
   11944:	mov    r12,QWORD PTR [rbp+0x30]
   11948:	lea    rax,[rip+0x49bd5]        # 5b524 <_IO_stdin_used+0x524>
   1194f:	mov    rbx,QWORD PTR [rbp+0x28]
   11953:	test   rdi,rdi
   11956:	jne    119e8 <store_cookie+0x1a8>
   1195c:	movzx  ecx,BYTE PTR [rbp+0x18]
   11960:	lea    rsi,[rip+0x49bc2]        # 5b529 <_IO_stdin_used+0x529>
   11967:	mov    r10d,DWORD PTR [rbp+0x8]
   1196b:	lea    rdx,[rip+0x49bb9]        # 5b52b <_IO_stdin_used+0x52b>
   11972:	lea    r9,[rip+0x49bb9]        # 5b532 <_IO_stdin_used+0x532>
   11979:	push   r12
   1197b:	mov    r8,QWORD PTR [rbp+0x10]
   1197f:	lea    rdi,[rip+0x49d6a]        # 5b6f0 <_IO_stdin_used+0x6f0>
   11986:	test   cl,0x2
   11989:	push   rbx
   1198a:	cmove  rdx,rsi
   1198e:	and    ecx,0x8
   11991:	lea    rcx,[rip+0x49ba4]        # 5b53c <_IO_stdin_used+0x53c>
   11998:	push   rax
   11999:	cmove  r9,rcx
   1199d:	lea    rsi,[rip+0x5ca73]        # 6e417 <urlchr_table+0x877>
   119a4:	cmp    r10d,0xffffffff
   119a8:	push   rdx
   119a9:	lea    rcx,[rip+0x49b94]        # 5b544 <_IO_stdin_used+0x544>
   119b0:	mov    edx,r10d
   119b3:	cmovne rcx,rsi
   119b7:	mov    rsi,QWORD PTR [rbp+0x0]
   119bb:	xor    eax,eax
   119bd:	call   2e250 <debug_logprintf>
   119c2:	add    rsp,0x20
   119c6:	jmp    11901 <store_cookie+0xc1>
   119cb:	nop    DWORD PTR [rax+rax*1+0x0]
   119d0:	lea    rdi,[rip+0x49cf1]        # 5b6c8 <_IO_stdin_used+0x6c8>
   119d7:	xor    eax,eax
   119d9:	call   2e250 <debug_logprintf>
   119de:	jmp    118c5 <store_cookie+0x85>
   119e3:	nop    DWORD PTR [rax+rax*1+0x0]
   119e8:	call   3bd30 <datetime_str>
   119ed:	jmp    1195c <store_cookie+0x11c>
   119f2:	call   c7b0 <__stack_chk_fail@plt>
   119f7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000011a00 <cookie_matches_url>:
   11a00:	push   r14
   11a02:	push   r13
   11a04:	mov    r13,r9
   11a07:	push   r12
   11a09:	push   rbp
   11a0a:	mov    rbp,rcx
   11a0d:	push   rbx
   11a0e:	mov    rbx,rdi
   11a11:	mov    rdi,rsi
   11a14:	mov    rax,QWORD PTR [rbx+0x20]
   11a18:	test   rax,rax
   11a1b:	je     11a29 <cookie_matches_url+0x29>
   11a1d:	xor    r12d,r12d
   11a20:	cmp    QWORD PTR [rip+0x71b51],rax        # 83578 <cookies_now>
   11a27:	jg     11a87 <cookie_matches_url+0x87>
   11a29:	movzx  eax,BYTE PTR [rbx+0x18]
   11a2d:	mov    r12d,eax
   11a30:	shr    r12b,1
   11a33:	xor    r12d,0x1
   11a37:	and    r12d,0x1
   11a3b:	or     r12b,r8b
   11a3e:	je     11a87 <cookie_matches_url+0x87>
   11a40:	mov    ecx,DWORD PTR [rbx+0x8]
   11a43:	cmp    ecx,edx
   11a45:	setne  sil
   11a49:	cmp    ecx,0xffffffff
   11a4c:	setne  dl
   11a4f:	test   sil,dl
   11a52:	jne    11aa4 <cookie_matches_url+0xa4>
   11a54:	test   al,0x4
   11a56:	jne    11a98 <cookie_matches_url+0x98>
   11a58:	mov    r14,QWORD PTR [rbx+0x10]
   11a5c:	mov    rdi,r14
   11a5f:	call   c310 <strlen@plt>
   11a64:	mov    rsi,r14
   11a67:	mov    rdi,rbp
   11a6a:	movsxd rdx,eax
   11a6d:	mov    rbx,rax
   11a70:	call   c0d0 <strncmp@plt>
   11a75:	test   eax,eax
   11a77:	jne    11aa4 <cookie_matches_url+0xa4>
   11a79:	add    ebx,0x1
   11a7c:	je     11aa4 <cookie_matches_url+0xa4>
   11a7e:	test   r13,r13
   11a81:	je     11a87 <cookie_matches_url+0x87>
   11a83:	mov    DWORD PTR [r13+0x0],ebx
   11a87:	pop    rbx
   11a88:	mov    eax,r12d
   11a8b:	pop    rbp
   11a8c:	pop    r12
   11a8e:	pop    r13
   11a90:	pop    r14
   11a92:	ret    
   11a93:	nop    DWORD PTR [rax+rax*1+0x0]
   11a98:	mov    rsi,QWORD PTR [rbx]
   11a9b:	call   be10 <strcasecmp@plt>
   11aa0:	test   eax,eax
   11aa2:	je     11a58 <cookie_matches_url+0x58>
   11aa4:	xor    r12d,r12d
   11aa7:	pop    rbx
   11aa8:	pop    rbp
   11aa9:	mov    eax,r12d
   11aac:	pop    r12
   11aae:	pop    r13
   11ab0:	pop    r14
   11ab2:	ret    
   11ab3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   11abe:	xchg   ax,ax

0000000000011ac0 <cookie_jar_new>:
   11ac0:	endbr64 
   11ac4:	push   r12
   11ac6:	mov    edi,0x10
   11acb:	call   4b850 <xmalloc>
   11ad0:	xor    edi,edi
   11ad2:	mov    r12,rax
   11ad5:	call   1e160 <make_nocase_string_hash_table>
   11ada:	mov    DWORD PTR [r12+0x8],0x0
   11ae3:	mov    QWORD PTR [r12],rax
   11ae7:	mov    rax,r12
   11aea:	pop    r12
   11aec:	ret    
   11aed:	nop    DWORD PTR [rax]

0000000000011af0 <cookie_handle_set_cookie>:
   11af0:	endbr64 
   11af4:	push   r15
   11af6:	push   r14
   11af8:	push   r13
   11afa:	push   r12
   11afc:	push   rbp
   11afd:	mov    rbp,rcx
   11b00:	push   rbx
   11b01:	sub    rsp,0x508
   11b08:	mov    QWORD PTR [rsp+0x30],rdi
   11b0d:	xor    edi,edi
   11b0f:	mov    QWORD PTR [rsp+0x10],rsi
   11b14:	mov    DWORD PTR [rsp+0x3c],edx
   11b18:	mov    QWORD PTR [rsp+0x8],r8
   11b1d:	mov    rax,QWORD PTR fs:0x28
   11b26:	mov    QWORD PTR [rsp+0x4f8],rax
   11b2e:	xor    eax,eax
   11b30:	call   cbf0 <time@plt>
   11b35:	mov    rdi,rbp
   11b38:	mov    QWORD PTR [rip+0x71a39],rax        # 83578 <cookies_now>
   11b3f:	call   c310 <strlen@plt>
   11b44:	mov    rbx,rax
   11b47:	lea    rax,[rsp+0xf0]
   11b4f:	mov    QWORD PTR [rsp+0x20],rax
   11b54:	mov    r12,rax
   11b57:	cmp    rbx,0x3fe
   11b5e:	ja     11f78 <cookie_handle_set_cookie+0x488>
   11b64:	mov    BYTE PTR [r12],0x2f
   11b69:	lea    rdx,[rbx+0x1]
   11b6d:	mov    rsi,rbp
   11b70:	lea    rdi,[r12+0x1]
   11b75:	lea    r14,[rsp+0x60]
   11b7a:	lea    r13,[rsp+0x50]
   11b7f:	lea    r15,[rsp+0x40]
   11b84:	call   cb30 <memcpy@plt>
   11b89:	mov    rax,QWORD PTR [rsp+0x8]
   11b8e:	mov    esi,0x40
   11b93:	mov    edi,0x1
   11b98:	mov    QWORD PTR [rsp+0x40],rax
   11b9d:	call   4b9c0 <xcalloc>
   11ba2:	xor    r8d,r8d
   11ba5:	mov    ecx,0x3b
   11baa:	mov    rdx,r14
   11bad:	mov    DWORD PTR [rax+0x8],0xffffffff
   11bb4:	mov    rsi,r13
   11bb7:	mov    rdi,r15
   11bba:	mov    rbp,rax
   11bbd:	call   24bd0 <extract_param>
   11bc2:	test   al,al
   11bc4:	je     11ef0 <cookie_handle_set_cookie+0x400>
   11bca:	mov    rax,QWORD PTR [rsp+0x60]
   11bcf:	test   rax,rax
   11bd2:	je     11ef0 <cookie_handle_set_cookie+0x400>
   11bd8:	cmp    BYTE PTR [rax-0x1],0x22
   11bdc:	jne    11be7 <cookie_handle_set_cookie+0xf7>
   11bde:	sub    rax,0x1
   11be2:	mov    QWORD PTR [rsp+0x60],rax
   11be7:	mov    rax,QWORD PTR [rsp+0x68]
   11bec:	cmp    BYTE PTR [rax],0x22
   11bef:	jne    11bfa <cookie_handle_set_cookie+0x10a>
   11bf1:	add    rax,0x1
   11bf5:	mov    QWORD PTR [rsp+0x68],rax
   11bfa:	mov    rsi,QWORD PTR [rsp+0x58]
   11bff:	mov    rdi,QWORD PTR [rsp+0x50]
   11c04:	lea    rbx,[rsp+0x70]
   11c09:	call   3b8a0 <strdupdelim>
   11c0e:	mov    rsi,QWORD PTR [rsp+0x68]
   11c13:	mov    rdi,QWORD PTR [rsp+0x60]
   11c18:	mov    QWORD PTR [rbp+0x28],rax
   11c1c:	call   3b8a0 <strdupdelim>
   11c21:	mov    QWORD PTR [rbp+0x30],rax
   11c25:	lea    rax,[rsp+0x48]
   11c2a:	mov    QWORD PTR [rsp+0x28],rax
   11c2f:	nop
   11c30:	xor    r8d,r8d
   11c33:	mov    ecx,0x3b
   11c38:	mov    rdx,r14
   11c3b:	mov    rsi,r13
   11c3e:	mov    rdi,r15
   11c41:	call   24bd0 <extract_param>
   11c46:	test   al,al
   11c48:	je     11f90 <cookie_handle_set_cookie+0x4a0>
   11c4e:	mov    rdi,QWORD PTR [rsp+0x50]
   11c53:	mov    rax,QWORD PTR [rsp+0x58]
   11c58:	sub    rax,rdi
   11c5b:	cmp    rax,0x6
   11c5f:	je     11d20 <cookie_handle_set_cookie+0x230>
   11c65:	cmp    rax,0x4
   11c69:	je     11e90 <cookie_handle_set_cookie+0x3a0>
   11c6f:	cmp    rax,0x7
   11c73:	jne    11c30 <cookie_handle_set_cookie+0x140>
   11c75:	mov    edx,0x7
   11c7a:	lea    rsi,[rip+0x498db]        # 5b55c <_IO_stdin_used+0x55c>
   11c81:	mov    QWORD PTR [rsp+0x18],rdi
   11c86:	call   433b0 <c_strncasecmp>
   11c8b:	mov    rdi,QWORD PTR [rsp+0x18]
   11c90:	test   eax,eax
   11c92:	jne    11db8 <cookie_handle_set_cookie+0x2c8>
   11c98:	mov    rax,QWORD PTR [rsp+0x68]
   11c9d:	mov    rsi,QWORD PTR [rsp+0x60]
   11ca2:	mov    rdx,rax
   11ca5:	sub    rdx,rsi
   11ca8:	cmp    rax,rsi
   11cab:	sete   cl
   11cae:	test   rsi,rsi
   11cb1:	sete   al
   11cb4:	or     cl,al
   11cb6:	jne    11ef0 <cookie_handle_set_cookie+0x400>
   11cbc:	cmp    rdx,0x7f
   11cc0:	ja     11ef0 <cookie_handle_set_cookie+0x400>
   11cc6:	mov    rdi,rbx
   11cc9:	mov    ecx,0x80
   11cce:	mov    QWORD PTR [rsp+0x18],rdx
   11cd3:	call   c170 <__memcpy_chk@plt>
   11cd8:	mov    rdx,QWORD PTR [rsp+0x18]
   11cdd:	mov    rdi,rbx
   11ce0:	mov    BYTE PTR [rsp+rdx*1+0x70],0x0
   11ce5:	call   262a0 <http_atotm>
   11cea:	cmp    rax,0xffffffffffffffff
   11cee:	je     11c30 <cookie_handle_set_cookie+0x140>
   11cf4:	movzx  edx,BYTE PTR [rbp+0x18]
   11cf8:	mov    QWORD PTR [rbp+0x20],rax
   11cfc:	mov    ecx,edx
   11cfe:	or     ecx,0x8
   11d01:	cmp    rax,QWORD PTR [rip+0x71870]        # 83578 <cookies_now>
   11d08:	mov    BYTE PTR [rbp+0x18],cl
   11d0b:	jge    11c30 <cookie_handle_set_cookie+0x140>
   11d11:	or     edx,0x9
   11d14:	mov    BYTE PTR [rbp+0x18],dl
   11d17:	jmp    11c30 <cookie_handle_set_cookie+0x140>
   11d1c:	nop    DWORD PTR [rax+0x0]
   11d20:	mov    edx,0x6
   11d25:	lea    rsi,[rip+0x49824]        # 5b550 <_IO_stdin_used+0x550>
   11d2c:	mov    QWORD PTR [rsp+0x18],rdi
   11d31:	call   433b0 <c_strncasecmp>
   11d36:	mov    rdi,QWORD PTR [rsp+0x18]
   11d3b:	test   eax,eax
   11d3d:	jne    11d90 <cookie_handle_set_cookie+0x2a0>
   11d3f:	mov    rax,QWORD PTR [rsp+0x60]
   11d44:	test   rax,rax
   11d47:	je     11ef0 <cookie_handle_set_cookie+0x400>
   11d4d:	cmp    rax,QWORD PTR [rsp+0x68]
   11d52:	je     11ef0 <cookie_handle_set_cookie+0x400>
   11d58:	mov    rdi,QWORD PTR [rbp+0x0]
   11d5c:	call   4bdc0 <rpl_free>
   11d61:	mov    rdi,QWORD PTR [rsp+0x60]
   11d66:	mov    QWORD PTR [rbp+0x0],0x0
   11d6e:	cmp    BYTE PTR [rdi],0x2e
   11d71:	jne    11d7c <cookie_handle_set_cookie+0x28c>
   11d73:	add    rdi,0x1
   11d77:	mov    QWORD PTR [rsp+0x60],rdi
   11d7c:	mov    rsi,QWORD PTR [rsp+0x68]
   11d81:	call   3b8a0 <strdupdelim>
   11d86:	mov    QWORD PTR [rbp+0x0],rax
   11d8a:	jmp    11c30 <cookie_handle_set_cookie+0x140>
   11d8f:	nop
   11d90:	mov    edx,0x6
   11d95:	lea    rsi,[rip+0x4978f]        # 5b52b <_IO_stdin_used+0x52b>
   11d9c:	call   433b0 <c_strncasecmp>
   11da1:	test   eax,eax
   11da3:	jne    11c30 <cookie_handle_set_cookie+0x140>
   11da9:	or     BYTE PTR [rbp+0x18],0x2
   11dad:	jmp    11c30 <cookie_handle_set_cookie+0x140>
   11db2:	nop    WORD PTR [rax+rax*1+0x0]
   11db8:	mov    edx,0x7
   11dbd:	lea    rsi,[rip+0x497a0]        # 5b564 <_IO_stdin_used+0x564>
   11dc4:	call   433b0 <c_strncasecmp>
   11dc9:	test   eax,eax
   11dcb:	jne    11c30 <cookie_handle_set_cookie+0x140>
   11dd1:	mov    rax,QWORD PTR [rip+0x49448]        # 5b220 <_IO_stdin_used+0x220>
   11dd8:	mov    rsi,QWORD PTR [rsp+0x60]
   11ddd:	mov    QWORD PTR [rsp+0x48],rax
   11de2:	mov    rax,QWORD PTR [rsp+0x68]
   11de7:	mov    rdx,rax
   11dea:	sub    rdx,rsi
   11ded:	cmp    rax,rsi
   11df0:	sete   cl
   11df3:	test   rsi,rsi
   11df6:	sete   al
   11df9:	or     cl,al
   11dfb:	jne    11ef0 <cookie_handle_set_cookie+0x400>
   11e01:	cmp    rdx,0x1f
   11e05:	ja     11ef0 <cookie_handle_set_cookie+0x400>
   11e0b:	mov    ecx,0x20
   11e10:	mov    rdi,rbx
   11e13:	mov    QWORD PTR [rsp+0x18],rdx
   11e18:	call   c170 <__memcpy_chk@plt>
   11e1d:	mov    rdx,QWORD PTR [rsp+0x18]
   11e22:	xor    eax,eax
   11e24:	mov    rdi,rbx
   11e27:	lea    rsi,[rip+0x4973e]        # 5b56c <_IO_stdin_used+0x56c>
   11e2e:	mov    BYTE PTR [rsp+rdx*1+0x70],0x0
   11e33:	mov    rdx,QWORD PTR [rsp+0x28]
   11e38:	call   c030 <__isoc99_sscanf@plt>
   11e3d:	movsd  xmm0,QWORD PTR [rsp+0x48]
   11e43:	ucomisd xmm0,QWORD PTR [rip+0x493d5]        # 5b220 <_IO_stdin_used+0x220>
   11e4b:	jnp    11ee8 <cookie_handle_set_cookie+0x3f8>
   11e51:	movzx  eax,BYTE PTR [rbp+0x18]
   11e55:	pxor   xmm1,xmm1
   11e59:	mov    edx,eax
   11e5b:	or     edx,0x8
   11e5e:	mov    BYTE PTR [rbp+0x18],dl
   11e61:	cvttsd2si rdx,xmm0
   11e66:	add    rdx,QWORD PTR [rip+0x7170b]        # 83578 <cookies_now>
   11e6d:	ucomisd xmm0,xmm1
   11e71:	mov    QWORD PTR [rbp+0x20],rdx
   11e75:	jp     11c30 <cookie_handle_set_cookie+0x140>
   11e7b:	jne    11c30 <cookie_handle_set_cookie+0x140>
   11e81:	or     eax,0x9
   11e84:	mov    BYTE PTR [rbp+0x18],al
   11e87:	jmp    11c30 <cookie_handle_set_cookie+0x140>
   11e8c:	nop    DWORD PTR [rax+0x0]
   11e90:	mov    edx,0x4
   11e95:	lea    rsi,[rip+0x496bb]        # 5b557 <_IO_stdin_used+0x557>
   11e9c:	call   433b0 <c_strncasecmp>
   11ea1:	test   eax,eax
   11ea3:	jne    11c30 <cookie_handle_set_cookie+0x140>
   11ea9:	mov    rax,QWORD PTR [rsp+0x60]
   11eae:	test   rax,rax
   11eb1:	je     11ef0 <cookie_handle_set_cookie+0x400>
   11eb3:	cmp    rax,QWORD PTR [rsp+0x68]
   11eb8:	je     11ef0 <cookie_handle_set_cookie+0x400>
   11eba:	mov    rdi,QWORD PTR [rbp+0x10]
   11ebe:	call   4bdc0 <rpl_free>
   11ec3:	mov    rsi,QWORD PTR [rsp+0x68]
   11ec8:	mov    rdi,QWORD PTR [rsp+0x60]
   11ecd:	mov    QWORD PTR [rbp+0x10],0x0
   11ed5:	call   3b8a0 <strdupdelim>
   11eda:	mov    QWORD PTR [rbp+0x10],rax
   11ede:	jmp    11c30 <cookie_handle_set_cookie+0x140>
   11ee3:	nop    DWORD PTR [rax+rax*1+0x0]
   11ee8:	jne    11e51 <cookie_handle_set_cookie+0x361>
   11eee:	xchg   ax,ax
   11ef0:	mov    rbx,QWORD PTR [rsp+0x40]
   11ef5:	mov    r14,QWORD PTR [rsp+0x8]
   11efa:	mov    edi,0x7
   11eff:	mov    rsi,r14
   11f02:	sub    rbx,r14
   11f05:	call   4b2b0 <quotearg_style>
   11f0a:	mov    edx,0x5
   11f0f:	lea    rsi,[rip+0x49812]        # 5b728 <_IO_stdin_used+0x728>
   11f16:	xor    edi,edi
   11f18:	mov    r13,rax
   11f1b:	call   c780 <dcgettext@plt>
   11f20:	mov    edi,0x1
   11f25:	mov    rcx,rbx
   11f28:	mov    rdx,r13
   11f2b:	mov    rsi,rax
   11f2e:	xor    eax,eax
   11f30:	call   2e0a0 <logprintf>
   11f35:	mov    rdi,rbp
   11f38:	call   11710 <delete_cookie>
   11f3d:	cmp    r12,QWORD PTR [rsp+0x20]
   11f42:	je     11f4c <cookie_handle_set_cookie+0x45c>
   11f44:	mov    rdi,r12
   11f47:	call   4bdc0 <rpl_free>
   11f4c:	mov    rax,QWORD PTR [rsp+0x4f8]
   11f54:	xor    rax,QWORD PTR fs:0x28
   11f5d:	jne    124d3 <cookie_handle_set_cookie+0x9e3>
   11f63:	add    rsp,0x508
   11f6a:	pop    rbx
   11f6b:	pop    rbp
   11f6c:	pop    r12
   11f6e:	pop    r13
   11f70:	pop    r14
   11f72:	pop    r15
   11f74:	ret    
   11f75:	nop    DWORD PTR [rax]
   11f78:	lea    rdi,[rbx+0x2]
   11f7c:	call   4b850 <xmalloc>
   11f81:	mov    r12,rax
   11f84:	jmp    11b64 <cookie_handle_set_cookie+0x74>
   11f89:	nop    DWORD PTR [rax+0x0]
   11f90:	mov    rbx,QWORD PTR [rsp+0x40]
   11f95:	cmp    BYTE PTR [rbx],0x0
   11f98:	jne    11ef5 <cookie_handle_set_cookie+0x405>
   11f9e:	mov    r15,QWORD PTR [rbp+0x0]
   11fa2:	test   r15,r15
   11fa5:	je     12250 <cookie_handle_set_cookie+0x760>
   11fab:	cmp    BYTE PTR [rip+0x78309],0x0        # 8a2bb <opt+0x23b>
   11fb2:	jne    12320 <cookie_handle_set_cookie+0x830>
   11fb8:	mov    rsi,QWORD PTR [rsp+0x10]
   11fbd:	mov    rdi,r15
   11fc0:	call   be10 <strcasecmp@plt>
   11fc5:	test   eax,eax
   11fc7:	je     12090 <cookie_handle_set_cookie+0x5a0>
   11fcd:	mov    rdi,QWORD PTR [rsp+0x10]
   11fd2:	mov    edx,0x1
   11fd7:	mov    rsi,r15
   11fda:	call   3c530 <match_tail>
   11fdf:	test   al,al
   11fe1:	je     12180 <cookie_handle_set_cookie+0x690>
   11fe7:	xor    eax,eax
   11fe9:	cmp    BYTE PTR [r15],0x2e
   11fed:	sete   al
   11ff0:	cmp    BYTE PTR [rip+0x782c4],0x0        # 8a2bb <opt+0x23b>
   11ff7:	lea    rbx,[r15+rax*1]
   11ffb:	jne    12420 <cookie_handle_set_cookie+0x930>
   12001:	movzx  edx,BYTE PTR [rbx]
   12004:	lea    rax,[rbx+0x1]
   12008:	xor    r8d,r8d
   1200b:	mov    ebx,0x1
   12010:	xor    ecx,ecx
   12012:	nop    WORD PTR [rax+rax*1+0x0]
   12018:	test   dl,dl
   1201a:	je     12038 <cookie_handle_set_cookie+0x548>
   1201c:	cmp    dl,0x2e
   1201f:	jne    120f0 <cookie_handle_set_cookie+0x600>
   12025:	test   ecx,ecx
   12027:	je     12180 <cookie_handle_set_cookie+0x690>
   1202d:	movzx  edx,BYTE PTR [rax]
   12030:	test   dl,dl
   12032:	jne    12100 <cookie_handle_set_cookie+0x610>
   12038:	cmp    BYTE PTR [rip+0x7827c],0x0        # 8a2bb <opt+0x23b>
   1203f:	jne    123d8 <cookie_handle_set_cookie+0x8e8>
   12045:	cmp    ebx,0x1
   12048:	je     12180 <cookie_handle_set_cookie+0x690>
   1204e:	cmp    ebx,0x2
   12051:	je     12110 <cookie_handle_set_cookie+0x620>
   12057:	cmp    BYTE PTR [rip+0x7825d],0x0        # 8a2bb <opt+0x23b>
   1205e:	jne    12368 <cookie_handle_set_cookie+0x878>
   12064:	cmp    BYTE PTR [r15],0x2e
   12068:	je     12090 <cookie_handle_set_cookie+0x5a0>
   1206a:	mov    rdi,r15
   1206d:	call   c310 <strlen@plt>
   12072:	mov    rdi,QWORD PTR [rsp+0x10]
   12077:	mov    r15,rax
   1207a:	mov    ebx,eax
   1207c:	call   c310 <strlen@plt>
   12081:	mov    edx,eax
   12083:	cmp    eax,r15d
   12086:	jg     123a0 <cookie_handle_set_cookie+0x8b0>
   1208c:	nop    DWORD PTR [rax+0x0]
   12090:	mov    r15,QWORD PTR [rbp+0x10]
   12094:	test   r15,r15
   12097:	je     121fe <cookie_handle_set_cookie+0x70e>
   1209d:	mov    rdi,r15
   120a0:	call   c310 <strlen@plt>
   120a5:	mov    rsi,r15
   120a8:	mov    rdi,r12
   120ab:	movsxd rdx,eax
   120ae:	mov    rbx,rax
   120b1:	call   c0d0 <strncmp@plt>
   120b6:	test   eax,eax
   120b8:	jne    122f8 <cookie_handle_set_cookie+0x808>
   120be:	cmp    ebx,0xffffffff
   120c1:	je     122f8 <cookie_handle_set_cookie+0x808>
   120c7:	test   BYTE PTR [rbp+0x18],0x1
   120cb:	jne    1222e <cookie_handle_set_cookie+0x73e>
   120d1:	mov    rdi,QWORD PTR [rsp+0x30]
   120d6:	mov    rsi,rbp
   120d9:	call   11840 <store_cookie>
   120de:	cmp    r12,QWORD PTR [rsp+0x20]
   120e3:	jne    11f44 <cookie_handle_set_cookie+0x454>
   120e9:	jmp    11f4c <cookie_handle_set_cookie+0x45c>
   120ee:	xchg   ax,ax
   120f0:	movzx  edx,BYTE PTR [rax]
   120f3:	add    ecx,0x1
   120f6:	add    rax,0x1
   120fa:	jmp    12018 <cookie_handle_set_cookie+0x528>
   120ff:	nop
   12100:	mov    r8d,ecx
   12103:	add    ebx,0x1
   12106:	xor    ecx,ecx
   12108:	jmp    120f6 <cookie_handle_set_cookie+0x606>
   1210a:	nop    WORD PTR [rax+rax*1+0x0]
   12110:	mov    rax,r14
   12113:	mov    DWORD PTR [rsp+0x8],r8d
   12118:	mov    r14,r13
   1211b:	mov    r13,r15
   1211e:	lea    rbx,[rip+0x6a943]        # 7ca68 <known_toplevel_domains.6341+0x8>
   12125:	lea    rsi,[rip+0x4941f]        # 5b54b <_IO_stdin_used+0x54b>
   1212c:	mov    r15,rax
   1212f:	jmp    1213f <cookie_handle_set_cookie+0x64f>
   12131:	nop    DWORD PTR [rax+0x0]
   12138:	mov    rsi,QWORD PTR [rbx]
   1213b:	add    rbx,0x8
   1213f:	mov    edx,0x1
   12144:	mov    rdi,r13
   12147:	call   3c530 <match_tail>
   1214c:	test   al,al
   1214e:	jne    12438 <cookie_handle_set_cookie+0x948>
   12154:	lea    rax,[rip+0x6a93d]        # 7ca98 <known_toplevel_domains.6341+0x38>
   1215b:	cmp    rax,rbx
   1215e:	jne    12138 <cookie_handle_set_cookie+0x648>
   12160:	mov    r8d,DWORD PTR [rsp+0x8]
   12165:	mov    rax,r15
   12168:	mov    r15,r13
   1216b:	mov    r13,r14
   1216e:	mov    r14,rax
   12171:	cmp    r8d,0x3
   12175:	jg     12057 <cookie_handle_set_cookie+0x567>
   1217b:	nop    DWORD PTR [rax+rax*1+0x0]
   12180:	mov    rsi,QWORD PTR [rsp+0x10]
   12185:	mov    edi,0x7
   1218a:	call   4b2b0 <quotearg_style>
   1218f:	mov    edx,0x5
   12194:	lea    rsi,[rip+0x495bd]        # 5b758 <_IO_stdin_used+0x758>
   1219b:	xor    edi,edi
   1219d:	mov    r15,rax
   121a0:	call   c780 <dcgettext@plt>
   121a5:	mov    rdx,r15
   121a8:	mov    edi,0x1
   121ad:	mov    rsi,rax
   121b0:	xor    eax,eax
   121b2:	call   2e0a0 <logprintf>
   121b7:	mov    rsi,QWORD PTR [rbp+0x0]
   121bb:	mov    edi,0x7
   121c0:	call   4b2b0 <quotearg_style>
   121c5:	mov    edx,0x5
   121ca:	lea    rsi,[rip+0x4948a]        # 5b65b <_IO_stdin_used+0x65b>
   121d1:	xor    edi,edi
   121d3:	mov    r15,rax
   121d6:	call   c780 <dcgettext@plt>
   121db:	mov    rdx,r15
   121de:	mov    edi,0x1
   121e3:	mov    rsi,rax
   121e6:	xor    eax,eax
   121e8:	call   2e0a0 <logprintf>
   121ed:	mov    r15,QWORD PTR [rbp+0x10]
   121f1:	or     BYTE PTR [rbp+0x18],0x1
   121f5:	test   r15,r15
   121f8:	jne    1209d <cookie_handle_set_cookie+0x5ad>
   121fe:	mov    esi,0x2f
   12203:	mov    rdi,r12
   12206:	call   c460 <strrchr@plt>
   1220b:	test   rax,rax
   1220e:	je     122e0 <cookie_handle_set_cookie+0x7f0>
   12214:	lea    rsi,[rax+0x1]
   12218:	mov    rdi,r12
   1221b:	call   3b8a0 <strdupdelim>
   12220:	mov    QWORD PTR [rbp+0x10],rax
   12224:	test   BYTE PTR [rbp+0x18],0x1
   12228:	je     120d1 <cookie_handle_set_cookie+0x5e1>
   1222e:	mov    rbx,QWORD PTR [rsp+0x30]
   12233:	mov    rdi,QWORD PTR [rbx]
   12236:	call   1e130 <hash_table_count>
   1223b:	test   eax,eax
   1223d:	jne    12288 <cookie_handle_set_cookie+0x798>
   1223f:	mov    rdi,rbp
   12242:	call   11710 <delete_cookie>
   12247:	jmp    11f3d <cookie_handle_set_cookie+0x44d>
   1224c:	nop    DWORD PTR [rax+0x0]
   12250:	mov    rdi,QWORD PTR [rsp+0x10]
   12255:	call   4ba50 <xstrdup>
   1225a:	or     BYTE PTR [rbp+0x18],0x4
   1225e:	mov    QWORD PTR [rbp+0x0],rax
   12262:	mov    eax,DWORD PTR [rsp+0x3c]
   12266:	cmp    eax,0x50
   12269:	je     12090 <cookie_handle_set_cookie+0x5a0>
   1226f:	cmp    eax,0x1bb
   12274:	je     12090 <cookie_handle_set_cookie+0x5a0>
   1227a:	mov    DWORD PTR [rbp+0x8],eax
   1227d:	jmp    12090 <cookie_handle_set_cookie+0x5a0>
   12282:	nop    WORD PTR [rax+rax*1+0x0]
   12288:	mov    rdi,QWORD PTR [rbx]
   1228b:	mov    rdx,r13
   1228e:	mov    rsi,rbp
   12291:	call   117a0 <find_matching_cookie.isra.0>
   12296:	mov    r13,rax
   12299:	test   rax,rax
   1229c:	je     1223f <cookie_handle_set_cookie+0x74f>
   1229e:	mov    rax,QWORD PTR [rsp+0x50]
   122a3:	test   rax,rax
   122a6:	je     12450 <cookie_handle_set_cookie+0x960>
   122ac:	mov    rdx,QWORD PTR [r13+0x38]
   122b0:	mov    QWORD PTR [rax+0x38],rdx
   122b4:	mov    rdi,r13
   122b7:	call   11710 <delete_cookie>
   122bc:	cmp    BYTE PTR [rip+0x77ff8],0x0        # 8a2bb <opt+0x23b>
   122c3:	je     1223f <cookie_handle_set_cookie+0x74f>
   122c9:	lea    rdi,[rip+0x492f5]        # 5b5c5 <_IO_stdin_used+0x5c5>
   122d0:	xor    eax,eax
   122d2:	call   2e250 <debug_logprintf>
   122d7:	jmp    1223f <cookie_handle_set_cookie+0x74f>
   122dc:	nop    DWORD PTR [rax+0x0]
   122e0:	mov    rdi,r12
   122e3:	call   4ba50 <xstrdup>
   122e8:	mov    QWORD PTR [rbp+0x10],rax
   122ec:	jmp    120c7 <cookie_handle_set_cookie+0x5d7>
   122f1:	nop    DWORD PTR [rax+0x0]
   122f8:	cmp    BYTE PTR [rip+0x77fbc],0x0        # 8a2bb <opt+0x23b>
   122ff:	je     1223f <cookie_handle_set_cookie+0x74f>
   12305:	mov    rdx,r12
   12308:	mov    rsi,r15
   1230b:	lea    rdi,[rip+0x4947e]        # 5b790 <_IO_stdin_used+0x790>
   12312:	xor    eax,eax
   12314:	call   2e250 <debug_logprintf>
   12319:	jmp    1223f <cookie_handle_set_cookie+0x74f>
   1231e:	xchg   ax,ax
   12320:	lea    rdi,[rip+0x49249]        # 5b570 <_IO_stdin_used+0x570>
   12327:	xor    eax,eax
   12329:	call   2e250 <debug_logprintf>
   1232e:	mov    rsi,QWORD PTR [rsp+0x10]
   12333:	mov    rdi,r15
   12336:	call   be10 <strcasecmp@plt>
   1233b:	test   eax,eax
   1233d:	je     12090 <cookie_handle_set_cookie+0x5a0>
   12343:	cmp    BYTE PTR [rip+0x77f71],0x0        # 8a2bb <opt+0x23b>
   1234a:	je     11fcd <cookie_handle_set_cookie+0x4dd>
   12350:	lea    rdi,[rip+0x49221]        # 5b578 <_IO_stdin_used+0x578>
   12357:	xor    eax,eax
   12359:	call   2e250 <debug_logprintf>
   1235e:	jmp    11fcd <cookie_handle_set_cookie+0x4dd>
   12363:	nop    DWORD PTR [rax+rax*1+0x0]
   12368:	xor    eax,eax
   1236a:	lea    rdi,[rip+0x49227]        # 5b598 <_IO_stdin_used+0x598>
   12371:	call   2e250 <debug_logprintf>
   12376:	cmp    BYTE PTR [r15],0x2e
   1237a:	je     123b5 <cookie_handle_set_cookie+0x8c5>
   1237c:	mov    rdi,r15
   1237f:	call   c310 <strlen@plt>
   12384:	mov    rdi,QWORD PTR [rsp+0x10]
   12389:	mov    r15,rax
   1238c:	mov    ebx,eax
   1238e:	call   c310 <strlen@plt>
   12393:	mov    edx,eax
   12395:	cmp    r15d,eax
   12398:	jge    123b5 <cookie_handle_set_cookie+0x8c5>
   1239a:	nop    WORD PTR [rax+rax*1+0x0]
   123a0:	sub    edx,ebx
   123a2:	mov    rax,QWORD PTR [rsp+0x10]
   123a7:	movsxd rdx,edx
   123aa:	cmp    BYTE PTR [rax+rdx*1-0x1],0x2e
   123af:	jne    12180 <cookie_handle_set_cookie+0x690>
   123b5:	cmp    BYTE PTR [rip+0x77eff],0x0        # 8a2bb <opt+0x23b>
   123bc:	je     12090 <cookie_handle_set_cookie+0x5a0>
   123c2:	lea    rdi,[rip+0x491d7]        # 5b5a0 <_IO_stdin_used+0x5a0>
   123c9:	xor    eax,eax
   123cb:	call   2e250 <debug_logprintf>
   123d0:	jmp    12090 <cookie_handle_set_cookie+0x5a0>
   123d5:	nop    DWORD PTR [rax]
   123d8:	xor    eax,eax
   123da:	lea    rdi,[rip+0x491a7]        # 5b588 <_IO_stdin_used+0x588>
   123e1:	mov    DWORD PTR [rsp+0x8],r8d
   123e6:	call   2e250 <debug_logprintf>
   123eb:	cmp    ebx,0x1
   123ee:	je     12180 <cookie_handle_set_cookie+0x690>
   123f4:	cmp    BYTE PTR [rip+0x77ec0],0x0        # 8a2bb <opt+0x23b>
   123fb:	mov    r8d,DWORD PTR [rsp+0x8]
   12400:	je     1204e <cookie_handle_set_cookie+0x55e>
   12406:	lea    rdi,[rip+0x49183]        # 5b590 <_IO_stdin_used+0x590>
   1240d:	xor    eax,eax
   1240f:	call   2e250 <debug_logprintf>
   12414:	mov    r8d,DWORD PTR [rsp+0x8]
   12419:	jmp    1204e <cookie_handle_set_cookie+0x55e>
   1241e:	xchg   ax,ax
   12420:	lea    rdi,[rip+0x49159]        # 5b580 <_IO_stdin_used+0x580>
   12427:	xor    eax,eax
   12429:	call   2e250 <debug_logprintf>
   1242e:	jmp    12001 <cookie_handle_set_cookie+0x511>
   12433:	nop    DWORD PTR [rax+rax*1+0x0]
   12438:	mov    rax,r15
   1243b:	mov    r15,r13
   1243e:	mov    r13,r14
   12441:	mov    r14,rax
   12444:	jmp    12057 <cookie_handle_set_cookie+0x567>
   12449:	nop    DWORD PTR [rax+0x0]
   12450:	mov    rax,QWORD PTR [rsp+0x30]
   12455:	xor    ecx,ecx
   12457:	mov    rdx,r14
   1245a:	mov    QWORD PTR [rsp+0x60],0x0
   12463:	mov    rsi,QWORD PTR [r13+0x0]
   12467:	mov    rdi,QWORD PTR [rax]
   1246a:	call   1db10 <hash_table_get_pair>
   1246f:	test   eax,eax
   12471:	je     12493 <cookie_handle_set_cookie+0x9a3>
   12473:	mov    rax,QWORD PTR [rsp+0x30]
   12478:	mov    rdx,QWORD PTR [r13+0x38]
   1247c:	mov    rdi,QWORD PTR [rax]
   1247f:	test   rdx,rdx
   12482:	je     124bb <cookie_handle_set_cookie+0x9cb>
   12484:	mov    rsi,QWORD PTR [rsp+0x60]
   12489:	call   1dc80 <hash_table_put>
   1248e:	jmp    122b4 <cookie_handle_set_cookie+0x7c4>
   12493:	mov    r14,QWORD PTR [r13+0x0]
   12497:	xor    edi,edi
   12499:	mov    edx,0x5
   1249e:	lea    rsi,[rip+0x49103]        # 5b5a8 <_IO_stdin_used+0x5a8>
   124a5:	call   c780 <dcgettext@plt>
   124aa:	xor    edi,edi
   124ac:	mov    rsi,rax
   124af:	mov    rdx,r14
   124b2:	xor    eax,eax
   124b4:	call   2e0a0 <logprintf>
   124b9:	jmp    12473 <cookie_handle_set_cookie+0x983>
   124bb:	mov    rsi,QWORD PTR [r13+0x0]
   124bf:	call   1dec0 <hash_table_remove>
   124c4:	mov    rdi,QWORD PTR [rsp+0x60]
   124c9:	call   4bdc0 <rpl_free>
   124ce:	jmp    122b4 <cookie_handle_set_cookie+0x7c4>
   124d3:	call   c7b0 <__stack_chk_fail@plt>
   124d8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000124e0 <cookie_header>:
   124e0:	endbr64 
   124e4:	push   r15
   124e6:	push   r14
   124e8:	push   r13
   124ea:	mov    r13d,edx
   124ed:	push   r12
   124ef:	push   rbp
   124f0:	mov    rbp,rsi
   124f3:	push   rbx
   124f4:	sub    rsp,0x568
   124fb:	mov    QWORD PTR [rsp+0x10],rdi
   12500:	mov    QWORD PTR [rsp+0x8],rcx
   12505:	mov    BYTE PTR [rsp+0x30],r8b
   1250a:	mov    rax,QWORD PTR fs:0x28
   12513:	mov    QWORD PTR [rsp+0x558],rax
   1251b:	xor    eax,eax
   1251d:	movzx  eax,BYTE PTR [rsi]
   12520:	test   al,al
   12522:	je     1254a <cookie_header+0x6a>
   12524:	mov    rdx,rsi
   12527:	xor    ecx,ecx
   12529:	nop    DWORD PTR [rax+0x0]
   12530:	cmp    al,0x2e
   12532:	sete   al
   12535:	add    rdx,0x1
   12539:	movzx  eax,al
   1253c:	add    ecx,eax
   1253e:	movzx  eax,BYTE PTR [rdx]
   12541:	test   al,al
   12543:	jne    12530 <cookie_header+0x50>
   12545:	cmp    ecx,0x1f
   12548:	jg     1255b <cookie_header+0x7b>
   1254a:	mov    rax,QWORD PTR [rsp+0x10]
   1254f:	mov    rdi,QWORD PTR [rax]
   12552:	call   1e130 <hash_table_count>
   12557:	test   eax,eax
   12559:	jne    1258a <cookie_header+0xaa>
   1255b:	xor    r14d,r14d
   1255e:	mov    rax,QWORD PTR [rsp+0x558]
   12566:	xor    rax,QWORD PTR fs:0x28
   1256f:	jne    12b11 <cookie_header+0x631>
   12575:	add    rsp,0x568
   1257c:	mov    rax,r14
   1257f:	pop    rbx
   12580:	pop    rbp
   12581:	pop    r12
   12583:	pop    r13
   12585:	pop    r14
   12587:	pop    r15
   12589:	ret    
   1258a:	movsx  edx,BYTE PTR [rbp+0x0]
   1258e:	mov    eax,edx
   12590:	sub    edx,0x30
   12593:	cmp    edx,0x9
   12596:	ja     127a6 <cookie_header+0x2c6>
   1259c:	movsx  esi,BYTE PTR [rbp+0x1]
   125a0:	lea    rdx,[rbp+0x1]
   125a4:	mov    ecx,esi
   125a6:	sub    esi,0x30
   125a9:	cmp    esi,0x9
   125ac:	jbe    127e4 <cookie_header+0x304>
   125b2:	cmp    cl,0x2e
   125b5:	jne    127a6 <cookie_header+0x2c6>
   125bb:	movsx  ecx,BYTE PTR [rdx+0x1]
   125bf:	sub    ecx,0x30
   125c2:	cmp    ecx,0x9
   125c5:	ja     127a6 <cookie_header+0x2c6>
   125cb:	movsx  esi,BYTE PTR [rdx+0x2]
   125cf:	lea    rcx,[rdx+0x2]
   125d3:	mov    edx,esi
   125d5:	sub    esi,0x30
   125d8:	cmp    esi,0x9
   125db:	jbe    12ab7 <cookie_header+0x5d7>
   125e1:	cmp    dl,0x2e
   125e4:	jne    127a6 <cookie_header+0x2c6>
   125ea:	movsx  edx,BYTE PTR [rcx+0x1]
   125ee:	sub    edx,0x30
   125f1:	cmp    edx,0x9
   125f4:	ja     127a6 <cookie_header+0x2c6>
   125fa:	movsx  esi,BYTE PTR [rcx+0x2]
   125fe:	lea    rdx,[rcx+0x2]
   12602:	mov    ecx,esi
   12604:	sub    esi,0x30
   12607:	cmp    esi,0x9
   1260a:	jbe    12ace <cookie_header+0x5ee>
   12610:	cmp    cl,0x2e
   12613:	jne    127a6 <cookie_header+0x2c6>
   12619:	movsx  ecx,BYTE PTR [rdx+0x1]
   1261d:	sub    ecx,0x30
   12620:	cmp    ecx,0x9
   12623:	ja     127a6 <cookie_header+0x2c6>
   12629:	movsx  esi,BYTE PTR [rdx+0x2]
   1262d:	mov    ecx,esi
   1262f:	sub    esi,0x30
   12632:	cmp    esi,0x9
   12635:	ja     1264d <cookie_header+0x16d>
   12637:	add    rdx,0x2
   1263b:	movsx  esi,BYTE PTR [rdx+0x1]
   1263f:	add    rdx,0x1
   12643:	mov    ecx,esi
   12645:	sub    esi,0x30
   12648:	cmp    esi,0x9
   1264b:	jbe    1263b <cookie_header+0x15b>
   1264d:	mov    r15d,0x1
   12653:	test   cl,cl
   12655:	jne    127a6 <cookie_header+0x2c6>
   1265b:	mov    QWORD PTR [rsp+0x18],rbp
   12660:	mov    r12,QWORD PTR [rsp+0x10]
   12665:	xor    ebx,ebx
   12667:	xor    r14d,r14d
   1266a:	jmp    12681 <cookie_header+0x1a1>
   1266c:	nop    DWORD PTR [rax+0x0]
   12670:	mov    rdi,rbp
   12673:	mov    esi,0x2e
   12678:	call   c6c0 <strchr@plt>
   1267d:	lea    rbp,[rax+0x1]
   12681:	mov    rdi,QWORD PTR [r12]
   12685:	mov    rsi,rbp
   12688:	call   1da70 <hash_table_get>
   1268d:	test   rax,rax
   12690:	je     1269e <cookie_header+0x1be>
   12692:	movsxd rdx,r14d
   12695:	add    r14d,0x1
   12699:	mov    QWORD PTR [rsp+rdx*8+0x50],rax
   1269e:	add    ebx,0x1
   126a1:	cmp    ebx,r15d
   126a4:	jl     12670 <cookie_header+0x190>
   126a6:	mov    rbp,QWORD PTR [rsp+0x18]
   126ab:	test   r14d,r14d
   126ae:	je     1255b <cookie_header+0x7b>
   126b4:	mov    rdi,QWORD PTR [rsp+0x8]
   126b9:	call   c310 <strlen@plt>
   126be:	mov    rbx,rax
   126c1:	lea    rax,[rsp+0x150]
   126c9:	mov    QWORD PTR [rsp+0x38],rax
   126ce:	mov    r12,rax
   126d1:	cmp    rbx,0x3fe
   126d8:	ja     127d3 <cookie_header+0x2f3>
   126de:	mov    BYTE PTR [r12],0x2f
   126e3:	mov    rsi,QWORD PTR [rsp+0x8]
   126e8:	lea    rdx,[rbx+0x1]
   126ec:	movsxd r14,r14d
   126ef:	lea    rdi,[r12+0x1]
   126f4:	xor    ebx,ebx
   126f6:	call   cb30 <memcpy@plt>
   126fb:	xor    edi,edi
   126fd:	call   cbf0 <time@plt>
   12702:	mov    QWORD PTR [rip+0x70e6f],rax        # 83578 <cookies_now>
   12709:	lea    rax,[rsp+0x50]
   1270e:	lea    rcx,[rax+r14*8]
   12712:	mov    QWORD PTR [rsp+0x28],rax
   12717:	movzx  r14d,BYTE PTR [rsp+0x30]
   1271d:	mov    QWORD PTR [rsp+0x20],rcx
   12722:	mov    QWORD PTR [rsp+0x8],rax
   12727:	nop    WORD PTR [rax+rax*1+0x0]
   12730:	mov    rax,QWORD PTR [rsp+0x8]
   12735:	mov    r15,QWORD PTR [rax]
   12738:	test   r15,r15
   1273b:	je     12766 <cookie_header+0x286>
   1273d:	nop    DWORD PTR [rax]
   12740:	xor    r9d,r9d
   12743:	mov    rdi,r15
   12746:	mov    r8d,r14d
   12749:	mov    rcx,r12
   1274c:	mov    edx,r13d
   1274f:	mov    rsi,rbp
   12752:	call   11a00 <cookie_matches_url>
   12757:	mov    r15,QWORD PTR [r15+0x38]
   1275b:	cmp    al,0x1
   1275d:	sbb    rbx,0xffffffffffffffff
   12761:	test   r15,r15
   12764:	jne    12740 <cookie_header+0x260>
   12766:	add    QWORD PTR [rsp+0x8],0x8
   1276c:	mov    rax,QWORD PTR [rsp+0x8]
   12771:	cmp    QWORD PTR [rsp+0x20],rax
   12776:	jne    12730 <cookie_header+0x250>
   12778:	lea    rdx,[rbx-0x1]
   1277c:	xor    r14d,r14d
   1277f:	movabs rax,0xffffffffffffffe
   12789:	cmp    rdx,rax
   1278c:	jbe    127fb <cookie_header+0x31b>
   1278e:	cmp    r12,QWORD PTR [rsp+0x38]
   12793:	je     1255e <cookie_header+0x7e>
   12799:	mov    rdi,r12
   1279c:	call   4bdc0 <rpl_free>
   127a1:	jmp    1255e <cookie_header+0x7e>
   127a6:	mov    rdx,rbp
   127a9:	xor    r15d,r15d
   127ac:	test   al,al
   127ae:	je     1265b <cookie_header+0x17b>
   127b4:	nop    DWORD PTR [rax+0x0]
   127b8:	cmp    al,0x2e
   127ba:	sete   al
   127bd:	add    rdx,0x1
   127c1:	movzx  eax,al
   127c4:	add    r15d,eax
   127c7:	movzx  eax,BYTE PTR [rdx]
   127ca:	test   al,al
   127cc:	jne    127b8 <cookie_header+0x2d8>
   127ce:	jmp    1265b <cookie_header+0x17b>
   127d3:	lea    rdi,[rbx+0x2]
   127d7:	call   4b850 <xmalloc>
   127dc:	mov    r12,rax
   127df:	jmp    126de <cookie_header+0x1fe>
   127e4:	movsx  esi,BYTE PTR [rdx+0x1]
   127e8:	add    rdx,0x1
   127ec:	mov    ecx,esi
   127ee:	sub    esi,0x30
   127f1:	cmp    esi,0x9
   127f4:	jbe    127e4 <cookie_header+0x304>
   127f6:	jmp    125b2 <cookie_header+0xd2>
   127fb:	mov    rdi,rbx
   127fe:	shl    rdi,0x4
   12802:	call   4b850 <xmalloc>
   12807:	xor    ecx,ecx
   12809:	mov    QWORD PTR [rsp+0x18],rax
   1280e:	movzx  eax,BYTE PTR [rsp+0x30]
   12813:	mov    QWORD PTR [rsp+0x30],rbx
   12818:	mov    rbx,rcx
   1281b:	mov    DWORD PTR [rsp+0x10],eax
   1281f:	nop
   12820:	mov    rax,QWORD PTR [rsp+0x28]
   12825:	mov    r15,QWORD PTR [rax]
   12828:	test   r15,r15
   1282b:	je     1288d <cookie_header+0x3ad>
   1282d:	lea    r14,[rsp+0x4c]
   12832:	nop    WORD PTR [rax+rax*1+0x0]
   12838:	mov    r8d,DWORD PTR [rsp+0x10]
   1283d:	mov    r9,r14
   12840:	mov    rcx,r12
   12843:	mov    edx,r13d
   12846:	mov    rsi,rbp
   12849:	mov    rdi,r15
   1284c:	call   11a00 <cookie_matches_url>
   12851:	test   al,al
   12853:	je     12884 <cookie_header+0x3a4>
   12855:	mov    rdx,rbx
   12858:	mov    rdi,QWORD PTR [r15]
   1285b:	add    rbx,0x1
   1285f:	shl    rdx,0x4
   12863:	add    rdx,QWORD PTR [rsp+0x18]
   12868:	mov    QWORD PTR [rdx],r15
   1286b:	mov    QWORD PTR [rsp+0x8],rdx
   12870:	call   c310 <strlen@plt>
   12875:	mov    rdx,QWORD PTR [rsp+0x8]
   1287a:	mov    DWORD PTR [rdx+0x8],eax
   1287d:	mov    eax,DWORD PTR [rsp+0x4c]
   12881:	mov    DWORD PTR [rdx+0xc],eax
   12884:	mov    r15,QWORD PTR [r15+0x38]
   12888:	test   r15,r15
   1288b:	jne    12838 <cookie_header+0x358>
   1288d:	add    QWORD PTR [rsp+0x28],0x8
   12893:	mov    rax,QWORD PTR [rsp+0x28]
   12898:	cmp    QWORD PTR [rsp+0x20],rax
   1289d:	jne    12820 <cookie_header+0x340>
   1289f:	mov    rbx,QWORD PTR [rsp+0x30]
   128a4:	lea    rcx,[rip+0xffffffffffffeeb5]        # 11760 <equality_comparator>
   128ab:	mov    edx,0x10
   128b0:	movsxd rsi,ebx
   128b3:	mov    rbx,QWORD PTR [rsp+0x18]
   128b8:	mov    rbp,rsi
   128bb:	shl    rbp,0x4
   128bf:	mov    rdi,rbx
   128c2:	add    rbp,rbx
   128c5:	call   c750 <qsort@plt>
   128ca:	cmp    rbx,rbp
   128cd:	jae    12ae5 <cookie_header+0x605>
   128d3:	mov    QWORD PTR [rsp+0x8],r12
   128d8:	lea    r15,[rbp-0x10]
   128dc:	mov    r14,rbx
   128df:	jmp    128fc <cookie_header+0x41c>
   128e1:	nop    DWORD PTR [rax+0x0]
   128e8:	movdqu xmm0,XMMWORD PTR [rbx]
   128ec:	movups XMMWORD PTR [r14],xmm0
   128f0:	mov    r14,rax
   128f3:	add    rbx,0x10
   128f7:	cmp    rbp,rbx
   128fa:	jbe    12941 <cookie_header+0x461>
   128fc:	cmp    rbx,r15
   128ff:	je     1292c <cookie_header+0x44c>
   12901:	mov    r13,QWORD PTR [rbx]
   12904:	mov    r12,QWORD PTR [rbx+0x10]
   12908:	mov    rdi,QWORD PTR [r13+0x28]
   1290c:	mov    rsi,QWORD PTR [r12+0x28]
   12911:	call   be40 <strcmp@plt>
   12916:	test   eax,eax
   12918:	jne    1292c <cookie_header+0x44c>
   1291a:	mov    rsi,QWORD PTR [r12+0x30]
   1291f:	mov    rdi,QWORD PTR [r13+0x30]
   12923:	call   be40 <strcmp@plt>
   12928:	test   eax,eax
   1292a:	je     128f3 <cookie_header+0x413>
   1292c:	lea    rax,[r14+0x10]
   12930:	cmp    rbx,r14
   12933:	jne    128e8 <cookie_header+0x408>
   12935:	add    rbx,0x10
   12939:	mov    r14,rax
   1293c:	cmp    rbp,rbx
   1293f:	ja     128fc <cookie_header+0x41c>
   12941:	mov    rbx,r14
   12944:	mov    r14,QWORD PTR [rsp+0x18]
   12949:	mov    edx,0x10
   1294e:	lea    rcx,[rip+0xffffffffffffed9b]        # 116f0 <goodness_comparator>
   12955:	mov    r12,QWORD PTR [rsp+0x8]
   1295a:	sub    rbx,r14
   1295d:	mov    rdi,r14
   12960:	sar    rbx,0x4
   12964:	movsxd rax,ebx
   12967:	mov    rbx,rax
   1296a:	mov    rsi,rax
   1296d:	mov    QWORD PTR [rsp+0x20],rax
   12972:	call   c750 <qsort@plt>
   12977:	lea    rsi,[rbx-0x1]
   1297b:	mov    rax,rbx
   1297e:	mov    QWORD PTR [rsp+0x28],rsi
   12983:	lea    esi,[rbx+rbx*1-0x1]
   12987:	mov    DWORD PTR [rsp+0x8],esi
   1298b:	test   rbx,rbx
   1298e:	je     12b16 <cookie_header+0x636>
   12994:	shl    rax,0x4
   12998:	mov    rbx,r14
   1299b:	xor    ebp,ebp
   1299d:	mov    r13,rax
   129a0:	add    r13,r14
   129a3:	nop    DWORD PTR [rax+rax*1+0x0]
   129a8:	mov    r15,QWORD PTR [rbx]
   129ab:	add    rbx,0x10
   129af:	mov    rdi,QWORD PTR [r15+0x28]
   129b3:	call   c310 <strlen@plt>
   129b8:	mov    rdi,QWORD PTR [r15+0x30]
   129bc:	mov    r14,rax
   129bf:	call   c310 <strlen@plt>
   129c4:	lea    ebp,[rbp+r14*1+0x1]
   129c9:	add    ebp,eax
   129cb:	cmp    r13,rbx
   129ce:	jne    129a8 <cookie_header+0x4c8>
   129d0:	mov    edi,DWORD PTR [rsp+0x8]
   129d4:	xor    r15d,r15d
   129d7:	xor    ebx,ebx
   129d9:	mov    r13,rbx
   129dc:	mov    ebx,r15d
   129df:	add    edi,ebp
   129e1:	movsxd rdi,edi
   129e4:	call   4b850 <xmalloc>
   129e9:	mov    QWORD PTR [rsp+0x30],r12
   129ee:	xor    ecx,ecx
   129f0:	mov    r14,rax
   129f3:	mov    r15,rcx
   129f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   12a00:	mov    rcx,QWORD PTR [rsp+0x18]
   12a05:	mov    rax,r15
   12a08:	shl    rax,0x4
   12a0c:	mov    r12,QWORD PTR [rcx+rax*1]
   12a10:	mov    rsi,QWORD PTR [r12+0x28]
   12a15:	mov    rdi,rsi
   12a18:	mov    QWORD PTR [rsp+0x10],rsi
   12a1d:	call   c310 <strlen@plt>
   12a22:	mov    rdi,QWORD PTR [r12+0x30]
   12a27:	mov    rbp,rax
   12a2a:	call   c310 <strlen@plt>
   12a2f:	movsxd rdx,ebp
   12a32:	mov    rsi,QWORD PTR [rsp+0x10]
   12a37:	add    ebp,ebx
   12a39:	lea    rdi,[r14+r13*1]
   12a3d:	lea    ebx,[rbp+0x1]
   12a40:	movsxd rbp,ebp
   12a43:	mov    QWORD PTR [rsp+0x8],rax
   12a48:	call   cb30 <memcpy@plt>
   12a4d:	mov    BYTE PTR [r14+rbp*1],0x3d
   12a52:	mov    rbp,QWORD PTR [rsp+0x8]
   12a57:	movsxd rdi,ebx
   12a5a:	mov    rsi,QWORD PTR [r12+0x30]
   12a5f:	add    rdi,r14
   12a62:	add    ebx,ebp
   12a64:	movsxd rdx,ebp
   12a67:	call   cb30 <memcpy@plt>
   12a6c:	movsxd r13,ebx
   12a6f:	lea    rsi,[r14+r13*1]
   12a73:	cmp    r15,QWORD PTR [rsp+0x28]
   12a78:	jae    12a91 <cookie_header+0x5b1>
   12a7a:	lea    eax,[rbx+0x1]
   12a7d:	mov    BYTE PTR [rsi],0x3b
   12a80:	add    ebx,0x2
   12a83:	cdqe   
   12a85:	movsxd r13,ebx
   12a88:	mov    BYTE PTR [r14+rax*1],0x20
   12a8d:	lea    rsi,[r14+r13*1]
   12a91:	add    r15,0x1
   12a95:	cmp    QWORD PTR [rsp+0x20],r15
   12a9a:	jne    12a00 <cookie_header+0x520>
   12aa0:	mov    r12,QWORD PTR [rsp+0x30]
   12aa5:	mov    BYTE PTR [rsi],0x0
   12aa8:	mov    rdi,QWORD PTR [rsp+0x18]
   12aad:	call   4bdc0 <rpl_free>
   12ab2:	jmp    1278e <cookie_header+0x2ae>
   12ab7:	movsx  esi,BYTE PTR [rcx+0x1]
   12abb:	add    rcx,0x1
   12abf:	mov    edx,esi
   12ac1:	sub    esi,0x30
   12ac4:	cmp    esi,0x9
   12ac7:	jbe    12ab7 <cookie_header+0x5d7>
   12ac9:	jmp    125e1 <cookie_header+0x101>
   12ace:	movsx  esi,BYTE PTR [rdx+0x1]
   12ad2:	add    rdx,0x1
   12ad6:	mov    ecx,esi
   12ad8:	sub    esi,0x30
   12adb:	cmp    esi,0x9
   12ade:	jbe    12ace <cookie_header+0x5ee>
   12ae0:	jmp    12610 <cookie_header+0x130>
   12ae5:	mov    rdi,QWORD PTR [rsp+0x18]
   12aea:	lea    rcx,[rip+0xffffffffffffebff]        # 116f0 <goodness_comparator>
   12af1:	mov    edx,0x10
   12af6:	xor    esi,esi
   12af8:	call   c750 <qsort@plt>
   12afd:	mov    rdi,0xffffffffffffffff
   12b04:	call   4b850 <xmalloc>
   12b09:	mov    r14,rax
   12b0c:	mov    rsi,rax
   12b0f:	jmp    12aa5 <cookie_header+0x5c5>
   12b11:	call   c7b0 <__stack_chk_fail@plt>
   12b16:	movsxd rdi,DWORD PTR [rsp+0x8]
   12b1b:	jmp    12b04 <cookie_header+0x624>
   12b1d:	nop    DWORD PTR [rax]

0000000000012b20 <cookie_jar_load>:
   12b20:	endbr64 
   12b24:	push   r15
   12b26:	push   r14
   12b28:	push   r13
   12b2a:	push   r12
   12b2c:	push   rbp
   12b2d:	mov    rbp,rsi
   12b30:	lea    rsi,[rip+0x53409]        # 65f40 <yy_accept+0xe80>
   12b37:	push   rbx
   12b38:	sub    rsp,0xb8
   12b3f:	mov    QWORD PTR [rsp+0x18],rdi
   12b44:	mov    rdi,rbp
   12b47:	mov    rax,QWORD PTR fs:0x28
   12b50:	mov    QWORD PTR [rsp+0xa8],rax
   12b58:	xor    eax,eax
   12b5a:	mov    QWORD PTR [rsp+0x90],0x0
   12b66:	mov    QWORD PTR [rsp+0x98],0x0
   12b72:	call   c0f0 <fopen@plt>
   12b77:	test   rax,rax
   12b7a:	je     130da <cookie_jar_load+0x5ba>
   12b80:	xor    edi,edi
   12b82:	mov    r15,rax
   12b85:	call   cbf0 <time@plt>
   12b8a:	mov    QWORD PTR [rip+0x709e7],rax        # 83578 <cookies_now>
   12b91:	lea    rax,[rsp+0x98]
   12b99:	mov    QWORD PTR [rsp+0x8],rax
   12b9e:	lea    rax,[rsp+0x90]
   12ba6:	mov    QWORD PTR [rsp+0x10],rax
   12bab:	lea    rax,[rsp+0xa0]
   12bb3:	mov    QWORD PTR [rsp+0x20],rax
   12bb8:	nop    DWORD PTR [rax+rax*1+0x0]
   12bc0:	mov    rsi,QWORD PTR [rsp+0x8]
   12bc5:	mov    rdi,QWORD PTR [rsp+0x10]
   12bca:	mov    rcx,r15
   12bcd:	mov    edx,0xa
   12bd2:	call   be90 <__getdelim@plt>
   12bd7:	test   rax,rax
   12bda:	jle    13090 <cookie_jar_load+0x570>
   12be0:	mov    r12,QWORD PTR [rsp+0x90]
   12be8:	movzx  eax,BYTE PTR [r12]
   12bed:	test   al,al
   12bef:	je     12bc0 <cookie_jar_load+0xa0>
   12bf1:	cmp    al,0xd
   12bf3:	jg     13068 <cookie_jar_load+0x548>
   12bf9:	cmp    al,0x8
   12bfb:	jg     13070 <cookie_jar_load+0x550>
   12c01:	cmp    al,0x23
   12c03:	je     12bc0 <cookie_jar_load+0xa0>
   12c05:	movzx  eax,BYTE PTR [r12]
   12c0a:	cmp    al,0x9
   12c0c:	je     12bc0 <cookie_jar_load+0xa0>
   12c0e:	test   al,al
   12c10:	je     12bc0 <cookie_jar_load+0xa0>
   12c12:	mov    rbp,r12
   12c15:	nop    DWORD PTR [rax]
   12c18:	mov    r14,rbp
   12c1b:	movzx  eax,BYTE PTR [rbp+0x1]
   12c1f:	add    rbp,0x1
   12c23:	test   al,al
   12c25:	je     12c2b <cookie_jar_load+0x10b>
   12c27:	cmp    al,0x9
   12c29:	jne    12c18 <cookie_jar_load+0xf8>
   12c2b:	cmp    rbp,r12
   12c2e:	je     12bc0 <cookie_jar_load+0xa0>
   12c30:	test   al,al
   12c32:	je     12bc0 <cookie_jar_load+0xa0>
   12c34:	movzx  eax,BYTE PTR [rbp+0x1]
   12c38:	lea    r11,[r14+0x2]
   12c3c:	cmp    al,0x9
   12c3e:	je     12bc0 <cookie_jar_load+0xa0>
   12c40:	test   al,al
   12c42:	je     12bc0 <cookie_jar_load+0xa0>
   12c48:	mov    rbx,r11
   12c4b:	nop    DWORD PTR [rax+rax*1+0x0]
   12c50:	mov    rdx,rbx
   12c53:	movzx  eax,BYTE PTR [rbx+0x1]
   12c57:	add    rbx,0x1
   12c5b:	test   al,al
   12c5d:	je     12bc0 <cookie_jar_load+0xa0>
   12c63:	cmp    al,0x9
   12c65:	jne    12c50 <cookie_jar_load+0x130>
   12c67:	test   al,al
   12c69:	je     12bc0 <cookie_jar_load+0xa0>
   12c6f:	cmp    r11,rbx
   12c72:	je     12bc0 <cookie_jar_load+0xa0>
   12c78:	movzx  eax,BYTE PTR [rbx+0x1]
   12c7c:	lea    r10,[rdx+0x2]
   12c80:	test   al,al
   12c82:	je     12bc0 <cookie_jar_load+0xa0>
   12c88:	cmp    al,0x9
   12c8a:	je     12bc0 <cookie_jar_load+0xa0>
   12c90:	mov    r13,r10
   12c93:	jmp    12c9c <cookie_jar_load+0x17c>
   12c95:	nop    DWORD PTR [rax]
   12c98:	cmp    al,0x9
   12c9a:	je     12cac <cookie_jar_load+0x18c>
   12c9c:	mov    r8,r13
   12c9f:	movzx  eax,BYTE PTR [r13+0x1]
   12ca4:	add    r13,0x1
   12ca8:	test   al,al
   12caa:	jne    12c98 <cookie_jar_load+0x178>
   12cac:	cmp    r10,r13
   12caf:	je     12bc0 <cookie_jar_load+0xa0>
   12cb5:	test   al,al
   12cb7:	je     12bc0 <cookie_jar_load+0xa0>
   12cbd:	lea    rax,[r8+0x2]
   12cc1:	mov    QWORD PTR [rsp+0x28],rax
   12cc6:	mov    rdx,rax
   12cc9:	movzx  eax,BYTE PTR [r13+0x1]
   12cce:	cmp    al,0x9
   12cd0:	je     12bc0 <cookie_jar_load+0xa0>
   12cd6:	test   al,al
   12cd8:	je     12bc0 <cookie_jar_load+0xa0>
   12cde:	xchg   ax,ax
   12ce0:	mov    rcx,rdx
   12ce3:	movzx  eax,BYTE PTR [rdx+0x1]
   12ce7:	add    rdx,0x1
   12ceb:	test   al,al
   12ced:	je     12bc0 <cookie_jar_load+0xa0>
   12cf3:	cmp    al,0x9
   12cf5:	jne    12ce0 <cookie_jar_load+0x1c0>
   12cf7:	test   al,al
   12cf9:	je     12bc0 <cookie_jar_load+0xa0>
   12cff:	cmp    QWORD PTR [rsp+0x28],rdx
   12d04:	je     12bc0 <cookie_jar_load+0xa0>
   12d0a:	lea    rax,[rcx+0x2]
   12d0e:	mov    QWORD PTR [rsp+0x38],rax
   12d13:	mov    rcx,rax
   12d16:	movzx  eax,BYTE PTR [rdx+0x1]
   12d1a:	cmp    al,0x9
   12d1c:	je     12bc0 <cookie_jar_load+0xa0>
   12d22:	test   al,al
   12d24:	jne    12d34 <cookie_jar_load+0x214>
   12d26:	jmp    12bc0 <cookie_jar_load+0xa0>
   12d2b:	nop    DWORD PTR [rax+rax*1+0x0]
   12d30:	cmp    al,0x9
   12d32:	je     12d43 <cookie_jar_load+0x223>
   12d34:	mov    rsi,rcx
   12d37:	movzx  eax,BYTE PTR [rcx+0x1]
   12d3b:	add    rcx,0x1
   12d3f:	test   al,al
   12d41:	jne    12d30 <cookie_jar_load+0x210>
   12d43:	cmp    QWORD PTR [rsp+0x38],rcx
   12d48:	je     12bc0 <cookie_jar_load+0xa0>
   12d4e:	test   al,al
   12d50:	je     12bc0 <cookie_jar_load+0xa0>
   12d56:	movzx  eax,BYTE PTR [rcx+0x1]
   12d5a:	lea    r9,[rsi+0x2]
   12d5e:	mov    QWORD PTR [rsp+0x40],r9
   12d63:	cmp    al,0x9
   12d65:	setne  sil
   12d69:	test   al,al
   12d6b:	setne  al
   12d6e:	and    sil,al
   12d71:	mov    BYTE PTR [rsp+0x5e],sil
   12d76:	jne    12d84 <cookie_jar_load+0x264>
   12d78:	jmp    12bc0 <cookie_jar_load+0xa0>
   12d7d:	nop    DWORD PTR [rax]
   12d80:	cmp    al,0x9
   12d82:	je     12d94 <cookie_jar_load+0x274>
   12d84:	mov    rsi,r9
   12d87:	movzx  eax,BYTE PTR [r9+0x1]
   12d8c:	add    r9,0x1
   12d90:	test   al,al
   12d92:	jne    12d80 <cookie_jar_load+0x260>
   12d94:	test   al,al
   12d96:	mov    QWORD PTR [rsp+0x80],r8
   12d9e:	sete   dil
   12da2:	cmp    QWORD PTR [rsp+0x40],r9
   12da7:	mov    QWORD PTR [rsp+0x78],r11
   12dac:	sete   al
   12daf:	mov    QWORD PTR [rsp+0x70],r10
   12db4:	or     dil,al
   12db7:	mov    QWORD PTR [rsp+0x68],rcx
   12dbc:	mov    QWORD PTR [rsp+0x60],rdx
   12dc1:	mov    QWORD PTR [rsp+0x30],r9
   12dc6:	mov    BYTE PTR [rsp+0x5f],dil
   12dcb:	jne    12bc0 <cookie_jar_load+0xa0>
   12dd1:	lea    rax,[rsi+0x2]
   12dd5:	mov    rdi,rax
   12dd8:	mov    QWORD PTR [rsp+0x50],rax
   12ddd:	call   c310 <strlen@plt>
   12de2:	mov    r9,QWORD PTR [rsp+0x30]
   12de7:	mov    rdx,QWORD PTR [rsp+0x60]
   12dec:	mov    rsi,rax
   12def:	mov    rax,QWORD PTR [rsp+0x50]
   12df4:	mov    rcx,QWORD PTR [rsp+0x68]
   12df9:	mov    r10,QWORD PTR [rsp+0x70]
   12dfe:	mov    r11,QWORD PTR [rsp+0x78]
   12e03:	add    rsi,rax
   12e06:	mov    r8,QWORD PTR [rsp+0x80]
   12e0e:	cmp    rax,rsi
   12e11:	mov    QWORD PTR [rsp+0x48],rsi
   12e16:	mov    rdi,rsi
   12e19:	jae    12e37 <cookie_jar_load+0x317>
   12e1b:	movzx  esi,BYTE PTR [rsi-0x1]
   12e1f:	cmp    sil,0xa
   12e23:	je     13150 <cookie_jar_load+0x630>
   12e29:	xor    eax,eax
   12e2b:	cmp    sil,0xd
   12e2f:	sete   al
   12e32:	sub    QWORD PTR [rsp+0x48],rax
   12e37:	mov    esi,0x40
   12e3c:	mov    edi,0x1
   12e41:	mov    QWORD PTR [rsp+0x88],rdx
   12e49:	mov    QWORD PTR [rsp+0x80],rcx
   12e51:	mov    QWORD PTR [rsp+0x68],r11
   12e56:	mov    QWORD PTR [rsp+0x60],r8
   12e5b:	mov    QWORD PTR [rsp+0x70],r10
   12e60:	mov    QWORD PTR [rsp+0x78],r9
   12e65:	call   4b9c0 <xcalloc>
   12e6a:	mov    r9,QWORD PTR [rsp+0x78]
   12e6f:	mov    rdi,QWORD PTR [rsp+0x40]
   12e74:	mov    DWORD PTR [rax+0x8],0xffffffff
   12e7b:	mov    rsi,r9
   12e7e:	mov    QWORD PTR [rsp+0x30],rax
   12e83:	call   3b8a0 <strdupdelim>
   12e88:	mov    rdi,QWORD PTR [rsp+0x30]
   12e8d:	mov    rsi,QWORD PTR [rsp+0x48]
   12e92:	mov    QWORD PTR [rdi+0x28],rax
   12e96:	mov    rdi,QWORD PTR [rsp+0x50]
   12e9b:	call   3b8a0 <strdupdelim>
   12ea0:	mov    rdi,QWORD PTR [rsp+0x30]
   12ea5:	mov    r10,QWORD PTR [rsp+0x70]
   12eaa:	mov    rsi,r13
   12ead:	mov    QWORD PTR [rdi+0x30],rax
   12eb1:	mov    rdi,r10
   12eb4:	call   3b8a0 <strdupdelim>
   12eb9:	mov    rdi,QWORD PTR [rsp+0x30]
   12ebe:	mov    r8,QWORD PTR [rsp+0x60]
   12ec3:	mov    rdx,QWORD PTR [rsp+0x88]
   12ecb:	sub    rdx,QWORD PTR [rsp+0x28]
   12ed0:	cmp    rdx,0x4
   12ed4:	mov    QWORD PTR [rdi+0x10],rax
   12ed8:	mov    r11,QWORD PTR [rsp+0x68]
   12edd:	mov    rcx,QWORD PTR [rsp+0x80]
   12ee5:	jne    12ef4 <cookie_jar_load+0x3d4>
   12ee7:	cmp    DWORD PTR [r8+0x2],0x45555254
   12eef:	sete   BYTE PTR [rsp+0x5f]
   12ef4:	mov    rdi,QWORD PTR [rsp+0x30]
   12ef9:	movzx  edx,BYTE PTR [rsp+0x5f]
   12efe:	sub    rbx,r11
   12f01:	movzx  eax,BYTE PTR [rdi+0x18]
   12f05:	add    edx,edx
   12f07:	mov    BYTE PTR [rsp+0x28],al
   12f0b:	and    eax,0xfffffffd
   12f0e:	or     eax,edx
   12f10:	mov    BYTE PTR [rdi+0x18],al
   12f13:	cmp    rbx,0x4
   12f17:	jne    12f26 <cookie_jar_load+0x406>
   12f19:	cmp    DWORD PTR [r14+0x2],0x45555254
   12f21:	setne  BYTE PTR [rsp+0x5e]
   12f26:	mov    rsi,QWORD PTR [rsp+0x30]
   12f2b:	movzx  edx,BYTE PTR [rsp+0x5e]
   12f30:	mov    rdi,r12
   12f33:	mov    QWORD PTR [rsp+0x40],rcx
   12f38:	movzx  eax,BYTE PTR [rsi+0x18]
   12f3c:	shl    edx,0x2
   12f3f:	mov    BYTE PTR [rsp+0x28],al
   12f43:	and    eax,0xfffffffb
   12f46:	or     eax,edx
   12f48:	mov    rdx,rbp
   12f4b:	mov    BYTE PTR [rsi+0x18],al
   12f4e:	sub    rdx,r12
   12f51:	mov    esi,0x3a
   12f56:	call   bf70 <memchr@plt>
   12f5b:	mov    rcx,QWORD PTR [rsp+0x40]
   12f60:	test   rax,rax
   12f63:	mov    rdx,rax
   12f66:	je     12fa8 <cookie_jar_load+0x488>
   12f68:	lea    rsi,[rax+0x1]
   12f6c:	cmp    rbp,rsi
   12f6f:	jbe    13169 <cookie_jar_load+0x649>
   12f75:	xor    edi,edi
   12f77:	movsx  eax,BYTE PTR [rsi]
   12f7a:	sub    eax,0x30
   12f7d:	cmp    eax,0x9
   12f80:	ja     1311e <cookie_jar_load+0x5fe>
   12f86:	lea    edi,[rdi+rdi*4]
   12f89:	add    rsi,0x1
   12f8d:	lea    edi,[rax+rdi*2]
   12f90:	cmp    rbp,rsi
   12f93:	jne    12f77 <cookie_jar_load+0x457>
   12f95:	test   edi,edi
   12f97:	je     13169 <cookie_jar_load+0x649>
   12f9d:	mov    rax,QWORD PTR [rsp+0x30]
   12fa2:	mov    rbp,rdx
   12fa5:	mov    DWORD PTR [rax+0x8],edi
   12fa8:	xor    eax,eax
   12faa:	cmp    BYTE PTR [r12],0x2e
   12faf:	mov    rsi,rbp
   12fb2:	mov    QWORD PTR [rsp+0x40],rcx
   12fb7:	sete   al
   12fba:	add    r12,rax
   12fbd:	mov    rdi,r12
   12fc0:	call   3b8a0 <strdupdelim>
   12fc5:	pxor   xmm1,xmm1
   12fc9:	mov    rdi,QWORD PTR [rsp+0x30]
   12fce:	mov    rcx,QWORD PTR [rsp+0x40]
   12fd3:	cvtsi2sd xmm1,QWORD PTR [rip+0x7059c]        # 83578 <cookies_now>
   12fdc:	mov    rdx,QWORD PTR [rsp+0x20]
   12fe1:	lea    rsi,[rip+0x48584]        # 5b56c <_IO_stdin_used+0x56c>
   12fe8:	mov    QWORD PTR [rdi],rax
   12feb:	mov    rdi,QWORD PTR [rsp+0x38]
   12ff0:	xor    eax,eax
   12ff2:	movapd xmm0,xmm1
   12ff6:	subsd  xmm0,QWORD PTR [rip+0x487e2]        # 5b7e0 <_IO_stdin_used+0x7e0>
   12ffe:	movsd  QWORD PTR [rsp+0x28],xmm1
   13004:	movsd  QWORD PTR [rsp+0xa0],xmm0
   1300d:	mov    BYTE PTR [rcx],0x0
   13010:	call   c030 <__isoc99_sscanf@plt>
   13015:	pxor   xmm2,xmm2
   13019:	movsd  xmm1,QWORD PTR [rsp+0x28]
   1301f:	movsd  xmm0,QWORD PTR [rsp+0xa0]
   13028:	ucomisd xmm0,xmm2
   1302c:	jnp    1313b <cookie_jar_load+0x61b>
   13032:	comisd xmm1,xmm0
   13036:	ja     1312c <cookie_jar_load+0x60c>
   1303c:	cvttsd2si rax,xmm0
   13041:	mov    rsi,QWORD PTR [rsp+0x30]
   13046:	or     BYTE PTR [rsi+0x18],0x8
   1304a:	mov    QWORD PTR [rsi+0x20],rax
   1304e:	mov    rsi,QWORD PTR [rsp+0x30]
   13053:	mov    rdi,QWORD PTR [rsp+0x18]
   13058:	call   11840 <store_cookie>
   1305d:	jmp    12bc0 <cookie_jar_load+0xa0>
   13062:	nop    WORD PTR [rax+rax*1+0x0]
   13068:	cmp    al,0x20
   1306a:	jne    12c01 <cookie_jar_load+0xe1>
   13070:	movzx  eax,BYTE PTR [r12+0x1]
   13076:	add    r12,0x1
   1307a:	test   al,al
   1307c:	jne    12bf1 <cookie_jar_load+0xd1>
   13082:	jmp    12bc0 <cookie_jar_load+0xa0>
   13087:	nop    WORD PTR [rax+rax*1+0x0]
   13090:	mov    rdi,QWORD PTR [rsp+0x90]
   13098:	call   4bdc0 <rpl_free>
   1309d:	mov    rdi,r15
   130a0:	mov    QWORD PTR [rsp+0x90],0x0
   130ac:	call   c8b0 <fclose@plt>
   130b1:	mov    rax,QWORD PTR [rsp+0xa8]
   130b9:	xor    rax,QWORD PTR fs:0x28
   130c2:	jne    13171 <cookie_jar_load+0x651>
   130c8:	add    rsp,0xb8
   130cf:	pop    rbx
   130d0:	pop    rbp
   130d1:	pop    r12
   130d3:	pop    r13
   130d5:	pop    r14
   130d7:	pop    r15
   130d9:	ret    
   130da:	call   c740 <__errno_location@plt>
   130df:	mov    edi,DWORD PTR [rax]
   130e1:	call   c540 <strerror@plt>
   130e6:	mov    rdi,rbp
   130e9:	mov    r13,rax
   130ec:	call   4b5b0 <quote>
   130f1:	xor    edi,edi
   130f3:	mov    edx,0x5
   130f8:	lea    rsi,[rip+0x486b9]        # 5b7b8 <_IO_stdin_used+0x7b8>
   130ff:	mov    r12,rax
   13102:	call   c780 <dcgettext@plt>
   13107:	mov    rcx,r13
   1310a:	mov    rdx,r12
   1310d:	mov    edi,0x1
   13112:	mov    rsi,rax
   13115:	xor    eax,eax
   13117:	call   2e0a0 <logprintf>
   1311c:	jmp    130b1 <cookie_jar_load+0x591>
   1311e:	cmp    rbp,rsi
   13121:	jbe    12f95 <cookie_jar_load+0x475>
   13127:	jmp    12fa8 <cookie_jar_load+0x488>
   1312c:	mov    rdi,QWORD PTR [rsp+0x30]
   13131:	call   11710 <delete_cookie>
   13136:	jmp    12bc0 <cookie_jar_load+0xa0>
   1313b:	je     1304e <cookie_jar_load+0x52e>
   13141:	jmp    13032 <cookie_jar_load+0x512>
   13146:	nop    WORD PTR cs:[rax+rax*1+0x0]
   13150:	lea    rax,[rdi-0x1]
   13154:	cmp    QWORD PTR [rsp+0x50],rax
   13159:	jae    13176 <cookie_jar_load+0x656>
   1315b:	mov    QWORD PTR [rsp+0x48],rax
   13160:	movzx  esi,BYTE PTR [rdi-0x2]
   13164:	jmp    12e29 <cookie_jar_load+0x309>
   13169:	mov    rbp,rdx
   1316c:	jmp    12fa8 <cookie_jar_load+0x488>
   13171:	call   c7b0 <__stack_chk_fail@plt>
   13176:	mov    QWORD PTR [rsp+0x48],rax
   1317b:	jmp    12e37 <cookie_jar_load+0x317>

0000000000013180 <cookie_jar_save>:
   13180:	endbr64 
   13184:	push   r15
   13186:	push   r14
   13188:	push   r13
   1318a:	push   r12
   1318c:	push   rbp
   1318d:	push   rbx
   1318e:	mov    rbx,rdi
   13191:	sub    rsp,0x48
   13195:	mov    QWORD PTR [rsp+0x8],rsi
   1319a:	mov    rax,QWORD PTR fs:0x28
   131a3:	mov    QWORD PTR [rsp+0x38],rax
   131a8:	xor    eax,eax
   131aa:	cmp    BYTE PTR [rip+0x7710a],0x0        # 8a2bb <opt+0x23b>
   131b1:	jne    13486 <cookie_jar_save+0x306>
   131b7:	xor    edi,edi
   131b9:	call   cbf0 <time@plt>
   131be:	mov    rdi,QWORD PTR [rsp+0x8]
   131c3:	lea    rsi,[rip+0x5a248]        # 6d412 <eta_str.8886+0x69a>
   131ca:	mov    QWORD PTR [rip+0x703a7],rax        # 83578 <cookies_now>
   131d1:	call   c0f0 <fopen@plt>
   131d6:	mov    rbp,rax
   131d9:	test   rax,rax
   131dc:	je     1343d <cookie_jar_save+0x2bd>
   131e2:	mov    rcx,rax
   131e5:	mov    edx,0x13
   131ea:	mov    esi,0x1
   131ef:	lea    rdi,[rip+0x48408]        # 5b5fe <_IO_stdin_used+0x5fe>
   131f6:	lea    r15,[rsp+0x10]
   131fb:	call   ca10 <fwrite@plt>
   13200:	mov    rdi,QWORD PTR [rip+0x70371]        # 83578 <cookies_now>
   13207:	lea    r12,[rip+0x483ce]        # 5b5dc <_IO_stdin_used+0x5dc>
   1320e:	call   3bd30 <datetime_str>
   13213:	lea    rdx,[rip+0x483f8]        # 5b612 <_IO_stdin_used+0x612>
   1321a:	mov    esi,0x1
   1321f:	mov    rdi,rbp
   13222:	mov    rcx,rax
   13225:	xor    eax,eax
   13227:	call   bfd0 <__fprintf_chk@plt>
   1322c:	mov    rcx,rbp
   1322f:	mov    edx,0x1a
   13234:	mov    esi,0x1
   13239:	lea    rdi,[rip+0x483ee]        # 5b62e <_IO_stdin_used+0x62e>
   13240:	call   ca10 <fwrite@plt>
   13245:	mov    rdi,QWORD PTR [rbx]
   13248:	mov    rsi,r15
   1324b:	lea    rbx,[rip+0x4838f]        # 5b5e1 <_IO_stdin_used+0x5e1>
   13252:	call   1e0c0 <hash_table_iterate>
   13257:	mov    rdi,r15
   1325a:	call   1e0e0 <hash_table_iter_next>
   1325f:	test   eax,eax
   13261:	je     13350 <cookie_jar_save+0x1d0>
   13267:	mov    r14,QWORD PTR [rsp+0x18]
   1326c:	mov    r13,QWORD PTR [rsp+0x10]
   13271:	test   r14,r14
   13274:	jne    1330c <cookie_jar_save+0x18c>
   1327a:	jmp    13257 <cookie_jar_save+0xd7>
   1327c:	nop    DWORD PTR [rax+0x0]
   13280:	mov    rsi,rbp
   13283:	mov    rdi,r13
   13286:	call   c580 <fputs@plt>
   1328b:	mov    ecx,DWORD PTR [r14+0x8]
   1328f:	cmp    ecx,0xffffffff
   13292:	je     132aa <cookie_jar_save+0x12a>
   13294:	lea    rdx,[rip+0x546bf]        # 6795a <primes.6089+0x187a>
   1329b:	mov    esi,0x1
   132a0:	mov    rdi,rbp
   132a3:	xor    eax,eax
   132a5:	call   bfd0 <__fprintf_chk@plt>
   132aa:	movzx  eax,BYTE PTR [r14+0x18]
   132af:	mov    rdx,QWORD PTR [r14+0x28]
   132b3:	pxor   xmm0,xmm0
   132b7:	mov    r9,rbx
   132ba:	cvtsi2sd xmm0,QWORD PTR [r14+0x20]
   132c0:	mov    r8,QWORD PTR [r14+0x10]
   132c4:	mov    rcx,r12
   132c7:	mov    rdi,rbp
   132ca:	test   al,0x2
   132cc:	push   QWORD PTR [r14+0x30]
   132d0:	mov    esi,0x1
   132d5:	push   rdx
   132d6:	cmovne r9,r12
   132da:	test   al,0x4
   132dc:	lea    rdx,[rip+0x48366]        # 5b649 <_IO_stdin_used+0x649>
   132e3:	cmovne rcx,rbx
   132e7:	mov    eax,0x1
   132ec:	call   bfd0 <__fprintf_chk@plt>
   132f1:	mov    rdi,rbp
   132f4:	call   c330 <ferror@plt>
   132f9:	pop    rdx
   132fa:	pop    rcx
   132fb:	test   eax,eax
   132fd:	jne    13350 <cookie_jar_save+0x1d0>
   132ff:	mov    r14,QWORD PTR [r14+0x38]
   13303:	test   r14,r14
   13306:	je     13257 <cookie_jar_save+0xd7>
   1330c:	movzx  eax,BYTE PTR [r14+0x18]
   13311:	test   al,0x8
   13313:	jne    1331e <cookie_jar_save+0x19e>
   13315:	cmp    BYTE PTR [rip+0x77065],0x0        # 8a381 <opt+0x301>
   1331c:	je     132ff <cookie_jar_save+0x17f>
   1331e:	mov    rdx,QWORD PTR [r14+0x20]
   13322:	test   rdx,rdx
   13325:	je     13330 <cookie_jar_save+0x1b0>
   13327:	cmp    rdx,QWORD PTR [rip+0x7024a]        # 83578 <cookies_now>
   1332e:	jl     132ff <cookie_jar_save+0x17f>
   13330:	test   al,0x4
   13332:	jne    13280 <cookie_jar_save+0x100>
   13338:	mov    rsi,rbp
   1333b:	mov    edi,0x2e
   13340:	call   c2c0 <fputc@plt>
   13345:	jmp    13280 <cookie_jar_save+0x100>
   1334a:	nop    WORD PTR [rax+rax*1+0x0]
   13350:	mov    rdi,rbp
   13353:	call   c330 <ferror@plt>
   13358:	test   eax,eax
   1335a:	jne    133a0 <cookie_jar_save+0x220>
   1335c:	mov    rdi,rbp
   1335f:	call   c8b0 <fclose@plt>
   13364:	test   eax,eax
   13366:	js     133f4 <cookie_jar_save+0x274>
   1336c:	cmp    BYTE PTR [rip+0x76f48],0x0        # 8a2bb <opt+0x23b>
   13373:	jne    13497 <cookie_jar_save+0x317>
   13379:	mov    rax,QWORD PTR [rsp+0x38]
   1337e:	xor    rax,QWORD PTR fs:0x28
   13387:	jne    134aa <cookie_jar_save+0x32a>
   1338d:	add    rsp,0x48
   13391:	pop    rbx
   13392:	pop    rbp
   13393:	pop    r12
   13395:	pop    r13
   13397:	pop    r14
   13399:	pop    r15
   1339b:	ret    
   1339c:	nop    DWORD PTR [rax+0x0]
   133a0:	call   c740 <__errno_location@plt>
   133a5:	mov    edi,DWORD PTR [rax]
   133a7:	call   c540 <strerror@plt>
   133ac:	mov    rdi,QWORD PTR [rsp+0x8]
   133b1:	mov    r13,rax
   133b4:	call   4b5b0 <quote>
   133b9:	xor    edi,edi
   133bb:	mov    edx,0x5
   133c0:	lea    rsi,[rip+0x48298]        # 5b65f <_IO_stdin_used+0x65f>
   133c7:	mov    r12,rax
   133ca:	call   c780 <dcgettext@plt>
   133cf:	mov    edi,0x1
   133d4:	mov    rcx,r13
   133d7:	mov    rdx,r12
   133da:	mov    rsi,rax
   133dd:	xor    eax,eax
   133df:	call   2e0a0 <logprintf>
   133e4:	mov    rdi,rbp
   133e7:	call   c8b0 <fclose@plt>
   133ec:	test   eax,eax
   133ee:	jns    1336c <cookie_jar_save+0x1ec>
   133f4:	call   c740 <__errno_location@plt>
   133f9:	mov    edi,DWORD PTR [rax]
   133fb:	call   c540 <strerror@plt>
   13400:	mov    rdi,QWORD PTR [rsp+0x8]
   13405:	mov    r13,rax
   13408:	call   4b5b0 <quote>
   1340d:	xor    edi,edi
   1340f:	mov    edx,0x5
   13414:	lea    rsi,[rip+0x4825d]        # 5b678 <_IO_stdin_used+0x678>
   1341b:	mov    r12,rax
   1341e:	call   c780 <dcgettext@plt>
   13423:	mov    rcx,r13
   13426:	mov    rdx,r12
   13429:	mov    edi,0x1
   1342e:	mov    rsi,rax
   13431:	xor    eax,eax
   13433:	call   2e0a0 <logprintf>
   13438:	jmp    1336c <cookie_jar_save+0x1ec>
   1343d:	call   c740 <__errno_location@plt>
   13442:	mov    edi,DWORD PTR [rax]
   13444:	call   c540 <strerror@plt>
   13449:	mov    rdi,QWORD PTR [rsp+0x8]
   1344e:	mov    r13,rax
   13451:	call   4b5b0 <quote>
   13456:	xor    edi,edi
   13458:	mov    edx,0x5
   1345d:	lea    rsi,[rip+0x48354]        # 5b7b8 <_IO_stdin_used+0x7b8>
   13464:	mov    r12,rax
   13467:	call   c780 <dcgettext@plt>
   1346c:	mov    rcx,r13
   1346f:	mov    rdx,r12
   13472:	mov    edi,0x1
   13477:	mov    rsi,rax
   1347a:	xor    eax,eax
   1347c:	call   2e0a0 <logprintf>
   13481:	jmp    13379 <cookie_jar_save+0x1f9>
   13486:	lea    rdi,[rip+0x4815a]        # 5b5e7 <_IO_stdin_used+0x5e7>
   1348d:	call   2e250 <debug_logprintf>
   13492:	jmp    131b7 <cookie_jar_save+0x37>
   13497:	lea    rdi,[rip+0x481f0]        # 5b68e <_IO_stdin_used+0x68e>
   1349e:	xor    eax,eax
   134a0:	call   2e250 <debug_logprintf>
   134a5:	jmp    13379 <cookie_jar_save+0x1f9>
   134aa:	call   c7b0 <__stack_chk_fail@plt>
   134af:	nop

00000000000134b0 <cookie_jar_delete>:
   134b0:	endbr64 
   134b4:	push   r12
   134b6:	mov    r12,rdi
   134b9:	push   rbp
   134ba:	push   rbx
   134bb:	sub    rsp,0x30
   134bf:	mov    rdi,QWORD PTR [rdi]
   134c2:	mov    rax,QWORD PTR fs:0x28
   134cb:	mov    QWORD PTR [rsp+0x28],rax
   134d0:	xor    eax,eax
   134d2:	mov    rbp,rsp
   134d5:	mov    rsi,rbp
   134d8:	call   1e0c0 <hash_table_iterate>
   134dd:	mov    rdi,rbp
   134e0:	call   1e0e0 <hash_table_iter_next>
   134e5:	test   eax,eax
   134e7:	je     13525 <cookie_jar_delete+0x75>
   134e9:	mov    rbx,QWORD PTR [rsp+0x8]
   134ee:	mov    rdi,QWORD PTR [rsp]
   134f2:	call   4bdc0 <rpl_free>
   134f7:	mov    QWORD PTR [rsp],0x0
   134ff:	test   rbx,rbx
   13502:	je     134dd <cookie_jar_delete+0x2d>
   13504:	nop    DWORD PTR [rax+0x0]
   13508:	mov    rdi,rbx
   1350b:	mov    rbx,QWORD PTR [rbx+0x38]
   1350f:	call   11710 <delete_cookie>
   13514:	test   rbx,rbx
   13517:	jne    13508 <cookie_jar_delete+0x58>
   13519:	mov    rdi,rbp
   1351c:	call   1e0e0 <hash_table_iter_next>
   13521:	test   eax,eax
   13523:	jne    134e9 <cookie_jar_delete+0x39>
   13525:	mov    rdi,QWORD PTR [r12]
   13529:	call   1da40 <hash_table_destroy>
   1352e:	mov    rdi,r12
   13531:	call   4bdc0 <rpl_free>
   13536:	mov    rax,QWORD PTR [rsp+0x28]
   1353b:	xor    rax,QWORD PTR fs:0x28
   13544:	jne    1354f <cookie_jar_delete+0x9f>
   13546:	add    rsp,0x30
   1354a:	pop    rbx
   1354b:	pop    rbp
   1354c:	pop    r12
   1354e:	ret    
   1354f:	call   c7b0 <__stack_chk_fail@plt>
   13554:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1355e:	xchg   ax,ax

0000000000013560 <delelement>:
   13560:	push   r13
   13562:	mov    r13,rsi
   13565:	push   r12
   13567:	push   rbp
   13568:	push   rbx
   13569:	mov    rbx,rdi
   1356c:	sub    rsp,0x8
   13570:	mov    rax,QWORD PTR [rdi]
   13573:	mov    rdi,QWORD PTR [rax+0x8]
   13577:	mov    rbp,QWORD PTR [rax+0x30]
   1357b:	mov    r12,QWORD PTR [rax+0x38]
   1357f:	call   4bdc0 <rpl_free>
   13584:	mov    rax,QWORD PTR [rbx]
   13587:	mov    QWORD PTR [rax+0x8],0x0
   1358f:	mov    rdi,QWORD PTR [rax+0x28]
   13593:	call   4bdc0 <rpl_free>
   13598:	mov    rdi,QWORD PTR [rbx]
   1359b:	mov    QWORD PTR [rdi+0x28],0x0
   135a3:	call   4bdc0 <rpl_free>
   135a8:	mov    QWORD PTR [rbx],0x0
   135af:	test   r12,r12
   135b2:	je     135b9 <delelement+0x59>
   135b4:	mov    QWORD PTR [r12+0x30],rbp
   135b9:	test   rbp,rbp
   135bc:	je     135d0 <delelement+0x70>
   135be:	mov    QWORD PTR [rbp+0x38],r12
   135c2:	add    rsp,0x8
   135c6:	mov    rax,r12
   135c9:	pop    rbx
   135ca:	pop    rbp
   135cb:	pop    r12
   135cd:	pop    r13
   135cf:	ret    
   135d0:	mov    QWORD PTR [r13+0x0],r12
   135d4:	add    rsp,0x8
   135d8:	mov    rax,r12
   135db:	pop    rbx
   135dc:	pop    rbp
   135dd:	pop    r12
   135df:	pop    r13
   135e1:	ret    
   135e2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   135ed:	nop    DWORD PTR [rax]

00000000000135f0 <print_length>:
   135f0:	push   r14
   135f2:	push   r13
   135f4:	push   r12
   135f6:	mov    r12d,edx
   135f9:	push   rbp
   135fa:	mov    rbp,rsi
   135fd:	push   rbx
   135fe:	mov    rbx,rdi
   13601:	call   3e8e0 <number_to_static_string>
   13606:	xor    edi,edi
   13608:	mov    edx,0x5
   1360d:	lea    rsi,[rip+0x481d4]        # 5b7e8 <_IO_stdin_used+0x7e8>
   13614:	mov    r13,rax
   13617:	call   c780 <dcgettext@plt>
   1361c:	xor    edi,edi
   1361e:	mov    rdx,r13
   13621:	mov    rsi,rax
   13624:	xor    eax,eax
   13626:	call   2e0a0 <logprintf>
   1362b:	cmp    rbx,0x3ff
   13632:	jg     13710 <print_length+0x120>
   13638:	test   rbp,rbp
   1363b:	jle    1368e <print_length+0x9e>
   1363d:	sub    rbx,rbp
   13640:	cmp    rbx,0x3ff
   13647:	jle    136b0 <print_length+0xc0>
   13649:	mov    edx,0x1
   1364e:	mov    esi,0xa
   13653:	mov    rdi,rbx
   13656:	call   3cf90 <human_readable>
   1365b:	mov    rdi,rbx
   1365e:	mov    r14,rax
   13661:	call   3e8e0 <number_to_static_string>
   13666:	mov    edx,0x5
   1366b:	lea    rsi,[rip+0x48181]        # 5b7f3 <_IO_stdin_used+0x7f3>
   13672:	xor    edi,edi
   13674:	mov    r13,rax
   13677:	call   c780 <dcgettext@plt>
   1367c:	mov    rcx,r14
   1367f:	mov    rdx,r13
   13682:	xor    edi,edi
   13684:	mov    rsi,rax
   13687:	xor    eax,eax
   13689:	call   2e0a0 <logprintf>
   1368e:	lea    rsi,[rip+0x5233a]        # 659cf <yy_accept+0x90f>
   13695:	test   r12b,r12b
   13698:	je     136e9 <print_length+0xf9>
   1369a:	pop    rbx
   1369b:	xor    edi,edi
   1369d:	pop    rbp
   1369e:	pop    r12
   136a0:	pop    r13
   136a2:	pop    r14
   136a4:	jmp    2de60 <logputs>
   136a9:	nop    DWORD PTR [rax+0x0]
   136b0:	mov    rdi,rbx
   136b3:	call   3e8e0 <number_to_static_string>
   136b8:	mov    edx,0x5
   136bd:	lea    rsi,[rip+0x48143]        # 5b807 <_IO_stdin_used+0x807>
   136c4:	xor    edi,edi
   136c6:	mov    r13,rax
   136c9:	call   c780 <dcgettext@plt>
   136ce:	mov    rdx,r13
   136d1:	xor    edi,edi
   136d3:	mov    rsi,rax
   136d6:	xor    eax,eax
   136d8:	call   2e0a0 <logprintf>
   136dd:	lea    rsi,[rip+0x522eb]        # 659cf <yy_accept+0x90f>
   136e4:	test   r12b,r12b
   136e7:	jne    1369a <print_length+0xaa>
   136e9:	lea    rsi,[rip+0x48126]        # 5b816 <_IO_stdin_used+0x816>
   136f0:	xor    edi,edi
   136f2:	mov    edx,0x5
   136f7:	call   c780 <dcgettext@plt>
   136fc:	pop    rbx
   136fd:	xor    edi,edi
   136ff:	pop    rbp
   13700:	mov    rsi,rax
   13703:	pop    r12
   13705:	pop    r13
   13707:	pop    r14
   13709:	jmp    2de60 <logputs>
   1370e:	xchg   ax,ax
   13710:	mov    rdi,rbx
   13713:	mov    edx,0x1
   13718:	mov    esi,0xa
   1371d:	call   3cf90 <human_readable>
   13722:	lea    rsi,[rip+0x47a4d]        # 5b176 <_IO_stdin_used+0x176>
   13729:	xor    edi,edi
   1372b:	mov    rdx,rax
   1372e:	xor    eax,eax
   13730:	call   2e0a0 <logprintf>
   13735:	jmp    13638 <print_length+0x48>
   1373a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000013740 <init_control_ssl_connection.isra.0>:
   13740:	push   r13
   13742:	mov    r13,rdx
   13745:	push   r12
   13747:	push   rbp
   13748:	mov    ebp,edi
   1374a:	push   rbx
   1374b:	mov    rbx,rsi
   1374e:	sub    rsp,0x18
   13752:	movzx  r12d,BYTE PTR [rip+0x76c01]        # 8a35b <opt+0x2db>
   1375a:	test   r12b,r12b
   1375d:	jne    137d0 <init_control_ssl_connection.isra.0+0x90>
   1375f:	cmp    BYTE PTR [rip+0x76b52],0x0        # 8a2b8 <opt+0x238>
   13766:	je     137b0 <init_control_ssl_connection.isra.0+0x70>
   13768:	mov    esi,0x3
   1376d:	mov    edi,ebp
   1376f:	call   1a230 <ftp_auth>
   13774:	cmp    eax,0x7
   13777:	je     137d0 <init_control_ssl_connection.isra.0+0x90>
   13779:	cmp    BYTE PTR [rip+0x76bda],0x0        # 8a35a <opt+0x2da>
   13780:	je     13860 <init_control_ssl_connection.isra.0+0x120>
   13786:	lea    rsi,[rip+0x484b3]        # 5bc40 <_IO_stdin_used+0xc40>
   1378d:	mov    edi,0x1
   13792:	call   2de60 <logputs>
   13797:	mov    BYTE PTR [r13+0x0],r12b
   1379b:	xor    eax,eax
   1379d:	add    rsp,0x18
   137a1:	pop    rbx
   137a2:	pop    rbp
   137a3:	pop    r12
   137a5:	pop    r13
   137a7:	ret    
   137a8:	nop    DWORD PTR [rax+rax*1+0x0]
   137b0:	xor    edi,edi
   137b2:	lea    rsi,[rip+0x48071]        # 5b82a <_IO_stdin_used+0x82a>
   137b9:	call   2de60 <logputs>
   137be:	cmp    BYTE PTR [rip+0x76b96],0x0        # 8a35b <opt+0x2db>
   137c5:	je     13768 <init_control_ssl_connection.isra.0+0x28>
   137c7:	nop    WORD PTR [rax+rax*1+0x0]
   137d0:	mov    rsi,QWORD PTR [rbx]
   137d3:	xor    edx,edx
   137d5:	mov    edi,ebp
   137d7:	call   416c0 <ssl_connect_wget>
   137dc:	test   al,al
   137de:	je     13848 <init_control_ssl_connection.isra.0+0x108>
   137e0:	mov    rsi,QWORD PTR [rbx]
   137e3:	mov    edi,ebp
   137e5:	call   41a80 <ssl_check_certificate>
   137ea:	test   al,al
   137ec:	je     13830 <init_control_ssl_connection.isra.0+0xf0>
   137ee:	movzx  r12d,BYTE PTR [rip+0x76b65]        # 8a35b <opt+0x2db>
   137f6:	test   r12b,r12b
   137f9:	jne    13797 <init_control_ssl_connection.isra.0+0x57>
   137fb:	movzx  r12d,BYTE PTR [rip+0x76ab5]        # 8a2b8 <opt+0x238>
   13803:	test   r12b,r12b
   13806:	jne    13797 <init_control_ssl_connection.isra.0+0x57>
   13808:	lea    rsi,[rip+0x53b80]        # 6738f <primes.6089+0x12af>
   1380f:	xor    edi,edi
   13811:	mov    BYTE PTR [rsp+0xf],al
   13815:	call   2de60 <logputs>
   1381a:	movzx  eax,BYTE PTR [rsp+0xf]
   1381f:	mov    r12d,eax
   13822:	jmp    13797 <init_control_ssl_connection.isra.0+0x57>
   13827:	nop    WORD PTR [rax+rax*1+0x0]
   13830:	mov    edi,ebp
   13832:	call   f400 <fd_close>
   13837:	mov    eax,0x2e
   1383c:	jmp    1379d <init_control_ssl_connection.isra.0+0x5d>
   13841:	nop    DWORD PTR [rax+0x0]
   13848:	mov    edi,ebp
   1384a:	call   f400 <fd_close>
   1384f:	add    rsp,0x18
   13853:	mov    eax,0x4
   13858:	pop    rbx
   13859:	pop    rbp
   1385a:	pop    r12
   1385c:	pop    r13
   1385e:	ret    
   1385f:	nop
   13860:	mov    edi,ebp
   13862:	call   f400 <fd_close>
   13867:	mov    eax,0x20
   1386c:	jmp    1379d <init_control_ssl_connection.isra.0+0x5d>
   13871:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1387c:	nop    DWORD PTR [rax+0x0]

0000000000013880 <ftp_loop_internal>:
   13880:	push   r15
   13882:	push   r14
   13884:	push   r13
   13886:	push   r12
   13888:	mov    r12,rdi
   1388b:	push   rbp
   1388c:	push   rbx
   1388d:	mov    rbx,rcx
   13890:	sub    rsp,0x5e8
   13897:	mov    QWORD PTR [rsp+0x40],rsi
   1389c:	mov    QWORD PTR [rsp+0x30],rdx
   138a1:	mov    QWORD PTR [rsp+0x48],r8
   138a6:	mov    BYTE PTR [rsp+0x84],r9b
   138ae:	mov    rax,QWORD PTR fs:0x28
   138b7:	mov    QWORD PTR [rsp+0x5d8],rax
   138bf:	xor    eax,eax
   138c1:	mov    rax,QWORD PTR [rip+0x768c0]        # 8a188 <opt+0x108>
   138c8:	mov    QWORD PTR [rsp+0xa0],0x0
   138d4:	mov    QWORD PTR [rsp+0x20],rax
   138d9:	mov    rax,QWORD PTR [rcx+0x28]
   138dd:	mov    QWORD PTR [rsp+0x10],rax
   138e2:	mov    rdi,QWORD PTR [rsp+0x10]
   138e7:	test   rdx,rdx
   138ea:	je     142a0 <ftp_loop_internal+0xa20>
   138f0:	call   4bdc0 <rpl_free>
   138f5:	cmp    BYTE PTR [rip+0x76adc],0x0        # 8a3d8 <opt+0x358>
   138fc:	mov    QWORD PTR [rbx+0x28],0x0
   13904:	jne    14f30 <ftp_loop_internal+0x16b0>
   1390a:	mov    rax,QWORD PTR [rsp+0x40]
   1390f:	mov    rdi,rax
   13912:	test   rax,rax
   13915:	je     14f30 <ftp_loop_internal+0x16b0>
   1391b:	xor    esi,esi
   1391d:	call   37670 <url_file_name>
   13922:	mov    QWORD PTR [rbx+0x28],rax
   13926:	mov    rdi,rax
   13929:	mov    rax,QWORD PTR [rip+0x76850]        # 8a180 <opt+0x100>
   13930:	mov    QWORD PTR [rsp+0x10],rax
   13935:	test   rax,rax
   13938:	je     13e40 <ftp_loop_internal+0x5c0>
   1393e:	call   3bdd0 <remove_link>
   13943:	test   BYTE PTR [rbx],0x1
   13946:	jne    13e20 <ftp_loop_internal+0x5a0>
   1394c:	mov    QWORD PTR [rsp+0x50],0x0
   13955:	mov    eax,DWORD PTR [rbx+0x4]
   13958:	xor    r14d,r14d
   1395b:	mov    QWORD PTR [rsp+0x60],0x0
   13964:	mov    DWORD PTR [rsp+0x68],eax
   13968:	mov    QWORD PTR [rsp+0x28],0x0
   13971:	add    r14d,0x1
   13975:	mov    edi,r14d
   13978:	call   35c50 <sleep_between_retrievals>
   1397d:	mov    edx,DWORD PTR [rbx]
   1397f:	test   dl,0x1
   13982:	je     13c70 <ftp_loop_internal+0x3f0>
   13988:	cmp    DWORD PTR [rbx+0x8],0xffffffff
   1398c:	mov    DWORD PTR [rbx+0x4],0x14
   13993:	mov    eax,0x14
   13998:	jne    139b0 <ftp_loop_internal+0x130>
   1399a:	mov    DWORD PTR [rbx+0x4],0x17
   139a1:	mov    eax,0x17
   139a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   139b0:	cmp    QWORD PTR [rsp+0x20],0x0
   139b6:	je     139c8 <ftp_loop_internal+0x148>
   139b8:	test   al,0x4
   139ba:	je     139c8 <ftp_loop_internal+0x148>
   139bc:	cmp    QWORD PTR [rsp+0x28],0x0
   139c2:	je     14f40 <ftp_loop_internal+0x16c0>
   139c8:	test   al,0x8
   139ca:	jne    139da <ftp_loop_internal+0x15a>
   139cc:	cmp    BYTE PTR [rsp+0x84],0x0
   139d4:	je     142e0 <ftp_loop_internal+0xa60>
   139da:	mov    QWORD PTR [rsp+0x18],0x0
   139e3:	xor    edi,edi
   139e5:	call   cbf0 <time@plt>
   139ea:	mov    rdi,rax
   139ed:	call   3bd30 <datetime_str>
   139f2:	mov    r13,rax
   139f5:	lea    rax,[rip+0x76684]        # 8a080 <opt>
   139fc:	mov    eax,DWORD PTR [rax]
   139fe:	test   eax,eax
   13a00:	jne    14228 <ftp_loop_internal+0x9a8>
   13a06:	mov    QWORD PTR [rsp+0x38],0x0
   13a0f:	mov    rax,QWORD PTR [rsp+0x30]
   13a14:	test   rax,rax
   13a17:	je     13a27 <ftp_loop_internal+0x1a7>
   13a19:	cmp    DWORD PTR [rax],0x2
   13a1c:	je     13a27 <ftp_loop_internal+0x1a7>
   13a1e:	mov    rax,QWORD PTR [rax+0x10]
   13a22:	mov    QWORD PTR [rsp+0x38],rax
   13a27:	mov    eax,DWORD PTR [rbx+0x4]
   13a2a:	cmp    BYTE PTR [rip+0x7692b],0x1        # 8a35c <opt+0x2dc>
   13a31:	mov    QWORD PTR [rsp+0xc0],0x0
   13a3d:	sbb    r13d,r13d
   13a40:	mov    BYTE PTR [rsp+0x96],0x0
   13a48:	mov    DWORD PTR [rsp+0x8],eax
   13a4c:	mov    rax,QWORD PTR [rsp+0x18]
   13a51:	and    r13d,0xd
   13a55:	mov    BYTE PTR [rsp+0x97],0x0
   13a5d:	add    r13d,0x43
   13a61:	mov    QWORD PTR [rsp+0xa0],rax
   13a69:	mov    rax,QWORD PTR [r12+0x50]
   13a6e:	test   rax,rax
   13a71:	je     141d8 <ftp_loop_internal+0x958>
   13a77:	mov    QWORD PTR [rsp+0xb0],rax
   13a7f:	mov    rax,QWORD PTR [r12+0x58]
   13a84:	movzx  edx,BYTE PTR [rip+0x76775]        # 8a200 <opt+0x180>
   13a8b:	test   rax,rax
   13a8e:	je     14190 <ftp_loop_internal+0x910>
   13a94:	mov    QWORD PTR [rsp+0xb8],rax
   13a9c:	mov    rcx,QWORD PTR [rsp+0xb0]
   13aa4:	test   dl,dl
   13aa6:	je     13ca0 <ftp_loop_internal+0x420>
   13aac:	test   rcx,rcx
   13aaf:	je     14480 <ftp_loop_internal+0xc00>
   13ab5:	cmp    DWORD PTR [r12+0x8],0x3
   13abb:	mov    QWORD PTR [rbx+0x10],0x0
   13ac3:	mov    DWORD PTR [rsp+0x9c],0xffffffff
   13ace:	je     143a8 <ftp_loop_internal+0xb28>
   13ad4:	test   BYTE PTR [rsp+0x8],0x1
   13ad9:	jne    13cd8 <ftp_loop_internal+0x458>
   13adf:	mov    eax,DWORD PTR [rbx+0x8]
   13ae2:	mov    DWORD PTR [rsp+0x98],eax
   13ae9:	mov    eax,DWORD PTR [rbx]
   13aeb:	shr    eax,0x5
   13aee:	and    eax,0x1
   13af1:	mov    BYTE PTR [rsp+0x85],al
   13af8:	test   BYTE PTR [rsp+0x8],0x2
   13afd:	je     13e78 <ftp_loop_internal+0x5f8>
   13b03:	mov    r13,QWORD PTR [r12+0x40]
   13b08:	mov    edx,0x5
   13b0d:	lea    rsi,[rip+0x47e2b]        # 5b93f <_IO_stdin_used+0x93f>
   13b14:	movzx  eax,BYTE PTR [r13+0x0]
   13b19:	test   al,al
   13b1b:	je     13e84 <ftp_loop_internal+0x604>
   13b21:	cmp    BYTE PTR [rip+0x76793],0x0        # 8a2bb <opt+0x23b>
   13b28:	jne    15bf8 <ftp_loop_internal+0x2378>
   13b2e:	mov    edx,DWORD PTR [rbx+0x18]
   13b31:	cmp    al,0x2f
   13b33:	je     13bce <ftp_loop_internal+0x34e>
   13b39:	test   edx,edx
   13b3b:	jne    149a0 <ftp_loop_internal+0x1120>
   13b41:	mov    r15,QWORD PTR [rbx+0x20]
   13b45:	mov    rdi,r15
   13b48:	call   c310 <strlen@plt>
   13b4d:	mov    rbp,rax
   13b50:	jmp    13b67 <ftp_loop_internal+0x2e7>
   13b52:	nop    WORD PTR [rax+rax*1+0x0]
   13b58:	cmp    BYTE PTR [r15+rbp*1-0x1],0x2f
   13b5e:	lea    rax,[rbp-0x1]
   13b62:	jne    13b6c <ftp_loop_internal+0x2ec>
   13b64:	mov    rbp,rax
   13b67:	test   rbp,rbp
   13b6a:	jne    13b58 <ftp_loop_internal+0x2d8>
   13b6c:	mov    rdi,r13
   13b6f:	call   c310 <strlen@plt>
   13b74:	lea    rcx,[rsp+0x1d0]
   13b7c:	add    rax,rbp
   13b7f:	lea    rdx,[rax+0x1]
   13b83:	cmp    rdx,0x3ff
   13b8a:	ja     15d30 <ftp_loop_internal+0x24b0>
   13b90:	mov    rdi,rcx
   13b93:	mov    rdx,rbp
   13b96:	mov    rsi,r15
   13b99:	call   cb30 <memcpy@plt>
   13b9e:	mov    rsi,r13
   13ba1:	add    rbp,rax
   13ba4:	mov    QWORD PTR [rsp+0x58],rax
   13ba9:	mov    BYTE PTR [rbp+0x0],0x2f
   13bad:	lea    rdi,[rbp+0x1]
   13bb1:	call   c830 <strcpy@plt>
   13bb6:	cmp    BYTE PTR [rip+0x766fe],0x0        # 8a2bb <opt+0x23b>
   13bbd:	mov    rcx,QWORD PTR [rsp+0x58]
   13bc2:	jne    15f6b <ftp_loop_internal+0x26eb>
   13bc8:	mov    edx,DWORD PTR [rbx+0x18]
   13bcb:	mov    r13,rcx
   13bce:	cmp    edx,0x1
   13bd1:	je     14b70 <ftp_loop_internal+0x12f0>
   13bd7:	mov    DWORD PTR [rsp+0x58],0x2
   13bdf:	mov    ebp,0x1
   13be4:	mov    r15,r13
   13be7:	cmp    ebp,0x1
   13bea:	je     13bfc <ftp_loop_internal+0x37c>
   13bec:	lea    r15,[rip+0x5a7a3]        # 6e396 <urlchr_table+0x7f6>
   13bf3:	cmp    ebp,0x2
   13bf6:	je     13bfc <ftp_loop_internal+0x37c>
   13bf8:	mov    r15,QWORD PTR [rbx+0x20]
   13bfc:	cmp    BYTE PTR [rip+0x766b5],0x0        # 8a2b8 <opt+0x238>
   13c03:	je     14cc0 <ftp_loop_internal+0x1440>
   13c09:	mov    edi,DWORD PTR [rsp+0x98]
   13c10:	mov    rsi,r15
   13c13:	call   1acf0 <ftp_cwd>
   13c18:	mov    r15d,eax
   13c1b:	cmp    eax,0xe
   13c1e:	je     14b88 <ftp_loop_internal+0x1308>
   13c24:	ja     146c0 <ftp_loop_internal+0xe40>
   13c2a:	cmp    eax,0x7
   13c2d:	jne    14718 <ftp_loop_internal+0xe98>
   13c33:	cmp    BYTE PTR [rip+0x7667e],0x0        # 8a2b8 <opt+0x238>
   13c3a:	je     15440 <ftp_loop_internal+0x1bc0>
   13c40:	add    ebp,0x1
   13c43:	cmp    DWORD PTR [rsp+0x58],ebp
   13c47:	jne    13be4 <ftp_loop_internal+0x364>
   13c49:	lea    rax,[rsp+0x1d0]
   13c51:	cmp    r13,rax
   13c54:	je     13e95 <ftp_loop_internal+0x615>
   13c5a:	mov    rdi,r13
   13c5d:	call   4bdc0 <rpl_free>
   13c62:	jmp    13e95 <ftp_loop_internal+0x615>
   13c67:	nop    WORD PTR [rax+rax*1+0x0]
   13c70:	mov    ecx,DWORD PTR [rbx+0x4]
   13c73:	mov    eax,ecx
   13c75:	or     eax,0x1
   13c78:	cmp    DWORD PTR [rbx+0x8],0xffffffff
   13c7c:	je     13c83 <ftp_loop_internal+0x403>
   13c7e:	mov    eax,ecx
   13c80:	and    eax,0xfffffffe
   13c83:	and    edx,0x2
   13c86:	je     13e30 <ftp_loop_internal+0x5b0>
   13c8c:	and    eax,0xfffffffd
   13c8f:	mov    DWORD PTR [rbx+0x4],eax
   13c92:	jmp    139b0 <ftp_loop_internal+0x130>
   13c97:	nop    WORD PTR [rax+rax*1+0x0]
   13ca0:	test   rcx,rcx
   13ca3:	jne    13ab5 <ftp_loop_internal+0x235>
   13ca9:	lea    rcx,[rip+0x47bad]        # 5b85d <_IO_stdin_used+0x85d>
   13cb0:	mov    QWORD PTR [rsp+0xb0],rcx
   13cb8:	test   rax,rax
   13cbb:	jne    13ab5 <ftp_loop_internal+0x235>
   13cc1:	lea    rax,[rip+0x47b9f]        # 5b867 <_IO_stdin_used+0x867>
   13cc8:	mov    QWORD PTR [rsp+0xb8],rax
   13cd0:	jmp    13ab5 <ftp_loop_internal+0x235>
   13cd5:	nop    DWORD PTR [rax]
   13cd8:	mov    rax,QWORD PTR [rbx+0x30]
   13cdc:	test   rax,rax
   13cdf:	je     144c0 <ftp_loop_internal+0xc40>
   13ce5:	mov    rdi,QWORD PTR [rax+0x10]
   13ce9:	mov    esi,DWORD PTR [rax+0x18]
   13cec:	call   fa40 <connect_to_host>
   13cf1:	mov    DWORD PTR [rsp+0x98],eax
   13cf8:	mov    ebp,eax
   13cfa:	cmp    eax,0xffffff9c
   13cfd:	je     14cb0 <ftp_loop_internal+0x1430>
   13d03:	test   eax,eax
   13d05:	js     14f70 <ftp_loop_internal+0x16f0>
   13d0b:	test   BYTE PTR [rsp+0x8],0x10
   13d10:	mov    eax,0xffffffff
   13d15:	cmovne eax,ebp
   13d18:	cmp    DWORD PTR [r12+0x8],0x3
   13d1e:	mov    DWORD PTR [rbx+0x8],eax
   13d21:	jne    13d56 <ftp_loop_internal+0x4d6>
   13d23:	cmp    BYTE PTR [rip+0x76631],0x0        # 8a35b <opt+0x2db>
   13d2a:	je     148f0 <ftp_loop_internal+0x1070>
   13d30:	lea    rdx,[rsp+0x97]
   13d38:	lea    rsi,[r12+0x10]
   13d3d:	mov    edi,ebp
   13d3f:	call   13740 <init_control_ssl_connection.isra.0>
   13d44:	mov    r15d,eax
   13d47:	test   eax,eax
   13d49:	jne    146a5 <ftp_loop_internal+0xe25>
   13d4f:	mov    ebp,DWORD PTR [rsp+0x98]
   13d56:	mov    edi,ebp
   13d58:	call   199d0 <ftp_greeting>
   13d5d:	mov    r15d,eax
   13d60:	cmp    eax,0x7
   13d63:	jne    14038 <ftp_loop_internal+0x7b8>
   13d69:	mov    rsi,QWORD PTR [rsp+0xb0]
   13d71:	mov    edi,0x7
   13d76:	call   4b2b0 <quotearg_style>
   13d7b:	xor    edi,edi
   13d7d:	mov    edx,0x5
   13d82:	lea    rsi,[rip+0x47ae5]        # 5b86e <_IO_stdin_used+0x86e>
   13d89:	mov    r15,rax
   13d8c:	call   c780 <dcgettext@plt>
   13d91:	xor    edi,edi
   13d93:	mov    rdx,r15
   13d96:	mov    rsi,rax
   13d99:	xor    eax,eax
   13d9b:	call   2e0a0 <logprintf>
   13da0:	cmp    BYTE PTR [rip+0x76511],0x0        # 8a2b8 <opt+0x238>
   13da7:	jne    152e0 <ftp_loop_internal+0x1a60>
   13dad:	cmp    QWORD PTR [rbx+0x30],0x0
   13db2:	mov    rdi,QWORD PTR [rsp+0xb0]
   13dba:	je     15350 <ftp_loop_internal+0x1ad0>
   13dc0:	mov    rdx,QWORD PTR [r12+0x10]
   13dc5:	xor    ecx,ecx
   13dc7:	lea    rsi,[rip+0x47a9e]        # 5b86c <_IO_stdin_used+0x86c>
   13dce:	xor    eax,eax
   13dd0:	call   3bbd0 <concat_strings>
   13dd5:	mov    edi,DWORD PTR [rsp+0x98]
   13ddc:	mov    rdx,QWORD PTR [rsp+0xb8]
   13de4:	mov    rbp,rax
   13de7:	mov    rsi,rax
   13dea:	call   19a50 <ftp_login>
   13def:	mov    rdi,rbp
   13df2:	mov    r15d,eax
   13df5:	call   4bdc0 <rpl_free>
   13dfa:	lea    eax,[r15-0x7]
   13dfe:	cmp    eax,0x25
   13e01:	ja     cc58 <ftp_loop_internal.cold+0x5>
   13e07:	lea    rdx,[rip+0x4897e]        # 5c78c <_IO_stdin_used+0x178c>
   13e0e:	movsxd rax,DWORD PTR [rdx+rax*4]
   13e12:	add    rax,rdx
   13e15:	notrack jmp rax
   13e18:	nop    DWORD PTR [rax+rax*1+0x0]
   13e20:	mov    DWORD PTR [rbx],0x1
   13e26:	jmp    1394c <ftp_loop_internal+0xcc>
   13e2b:	nop    DWORD PTR [rax+rax*1+0x0]
   13e30:	or     eax,0x2
   13e33:	mov    DWORD PTR [rbx+0x4],eax
   13e36:	jmp    139b0 <ftp_loop_internal+0x130>
   13e3b:	nop    DWORD PTR [rax+rax*1+0x0]
   13e40:	cmp    BYTE PTR [rip+0x7626b],0x0        # 8a0b2 <opt+0x32>
   13e47:	je     14b08 <ftp_loop_internal+0x1288>
   13e4d:	xor    esi,esi
   13e4f:	mov    QWORD PTR [rsp+0x8],rdi
   13e54:	call   3bed0 <file_exists_p>
   13e59:	mov    rdi,QWORD PTR [rsp+0x8]
   13e5e:	test   al,al
   13e60:	jne    15300 <ftp_loop_internal+0x1a80>
   13e66:	mov    QWORD PTR [rsp+0x10],rdi
   13e6b:	mov    rdi,QWORD PTR [rbx+0x28]
   13e6f:	jmp    1393e <ftp_loop_internal+0xbe>
   13e74:	nop    DWORD PTR [rax+0x0]
   13e78:	mov    edx,0x5
   13e7d:	lea    rsi,[rip+0x47b19]        # 5b99d <_IO_stdin_used+0x99d>
   13e84:	xor    edi,edi
   13e86:	call   c780 <dcgettext@plt>
   13e8b:	xor    edi,edi
   13e8d:	mov    rsi,rax
   13e90:	call   2de60 <logputs>
   13e95:	mov    eax,DWORD PTR [rsp+0x8]
   13e99:	and    eax,0x4
   13e9c:	mov    DWORD PTR [rsp+0x80],eax
   13ea3:	je     144d0 <ftp_loop_internal+0xc50>
   13ea9:	cmp    QWORD PTR [rsp+0x38],0x0
   13eaf:	je     14a20 <ftp_loop_internal+0x11a0>
   13eb5:	mov    BYTE PTR [rsp+0x87],0x0
   13ebd:	cmp    QWORD PTR [rsp+0x18],0x0
   13ec3:	jle    144d8 <ftp_loop_internal+0xc58>
   13ec9:	mov    rax,QWORD PTR [rsp+0x18]
   13ece:	cmp    QWORD PTR [rsp+0xc0],rax
   13ed6:	jne    144d8 <ftp_loop_internal+0xc58>
   13edc:	mov    edx,0x5
   13ee1:	lea    rsi,[rip+0x48108]        # 5bff0 <_IO_stdin_used+0xff0>
   13ee8:	xor    edi,edi
   13eea:	call   c780 <dcgettext@plt>
   13eef:	xor    edi,edi
   13ef1:	mov    rsi,rax
   13ef4:	call   2de60 <logputs>
   13ef9:	mov    edi,DWORD PTR [rsp+0x98]
   13f00:	call   f400 <fd_close>
   13f05:	and    DWORD PTR [rbx],0xfffffffd
   13f08:	mov    DWORD PTR [rbx+0x8],0xffffffff
   13f0f:	nop
   13f10:	xor    edi,edi
   13f12:	xor    r13d,r13d
   13f15:	call   cbf0 <time@plt>
   13f1a:	mov    rdi,rax
   13f1d:	call   3bd30 <datetime_str>
   13f22:	cmp    BYTE PTR [rip+0x761bf],0x0        # 8a0e8 <opt+0x68>
   13f29:	mov    r15,rax
   13f2c:	je     14c38 <ftp_loop_internal+0x13b8>
   13f32:	mov    rsi,QWORD PTR [rsp+0x10]
   13f37:	mov    edi,0x1
   13f3c:	call   10550 <downloaded_file>
   13f41:	test   BYTE PTR [rbx],0x1
   13f44:	jne    14c20 <ftp_loop_internal+0x13a0>
   13f4a:	cmp    BYTE PTR [rip+0x76197],0x0        # 8a0e8 <opt+0x68>
   13f51:	jne    13fb4 <ftp_loop_internal+0x734>
   13f53:	mov    rax,QWORD PTR [rip+0x76226]        # 8a180 <opt+0x100>
   13f5a:	mov    rdi,QWORD PTR [rsp+0xa0]
   13f62:	test   rax,rax
   13f65:	je     13f70 <ftp_loop_internal+0x6f0>
   13f67:	cmp    BYTE PTR [rax],0x2d
   13f6a:	je     14b30 <ftp_loop_internal+0x12b0>
   13f70:	call   3e8e0 <number_to_static_string>
   13f75:	mov    rdi,QWORD PTR [rsp+0x10]
   13f7a:	mov    QWORD PTR [rsp+0x8],rax
   13f7f:	call   4b5b0 <quote>
   13f84:	lea    rsi,[rip+0x47baa]        # 5bb35 <_IO_stdin_used+0xb35>
   13f8b:	mov    edx,0x5
   13f90:	xor    edi,edi
   13f92:	mov    rbp,rax
   13f95:	call   c780 <dcgettext@plt>
   13f9a:	mov    r9,QWORD PTR [rsp+0x8]
   13f9f:	mov    rsi,rax
   13fa2:	mov    r8,rbp
   13fa5:	mov    rcx,r13
   13fa8:	mov    rdx,r15
   13fab:	xor    edi,edi
   13fad:	xor    eax,eax
   13faf:	call   2e0a0 <logprintf>
   13fb4:	mov    r9d,DWORD PTR [rip+0x760c5]        # 8a080 <opt>
   13fbb:	test   r9d,r9d
   13fbe:	jne    13fcd <ftp_loop_internal+0x74d>
   13fc0:	cmp    BYTE PTR [rip+0x760bd],0x0        # 8a084 <opt+0x4>
   13fc7:	je     14ab0 <ftp_loop_internal+0x1230>
   13fcd:	cmp    QWORD PTR [rsp+0x20],0x0
   13fd3:	mov    eax,DWORD PTR [rbx+0x4]
   13fd6:	je     13fe0 <ftp_loop_internal+0x760>
   13fd8:	test   al,0x4
   13fda:	jne    14db0 <ftp_loop_internal+0x1530>
   13fe0:	test   al,0x8
   13fe2:	je     143f0 <ftp_loop_internal+0xb70>
   13fe8:	cmp    BYTE PTR [rip+0x762eb],0x0        # 8a2da <opt+0x25a>
   13fef:	je     148d0 <ftp_loop_internal+0x1050>
   13ff5:	mov    edx,eax
   13ff7:	and    eax,0xffffffef
   13ffa:	or     edx,0x10
   13ffd:	test   BYTE PTR [rsp+0x68],0x10
   14002:	cmovne eax,edx
   14005:	mov    DWORD PTR [rbx+0x4],eax
   14008:	mov    rbx,QWORD PTR [rsp+0x48]
   1400d:	test   rbx,rbx
   14010:	je     1401f <ftp_loop_internal+0x79f>
   14012:	mov    rdi,QWORD PTR [rsp+0x10]
   14017:	call   4ba50 <xstrdup>
   1401c:	mov    QWORD PTR [rbx],rax
   1401f:	mov    rdi,QWORD PTR [rsp+0x28]
   14024:	mov    r15d,0x19
   1402a:	test   rdi,rdi
   1402d:	jne    140a1 <ftp_loop_internal+0x821>
   1402f:	jmp    140a6 <ftp_loop_internal+0x826>
   14031:	nop    DWORD PTR [rax+0x0]
   14038:	lea    rsi,[rip+0x47cd1]        # 5bd10 <_IO_stdin_used+0xd10>
   1403f:	mov    edi,0x1
   14044:	call   2de60 <logputs>
   14049:	mov    edi,ebp
   1404b:	call   f400 <fd_close>
   14050:	mov    DWORD PTR [rbx+0x8],0xffffffff
   14057:	mov    eax,DWORD PTR [rbx]
   14059:	and    eax,0xfffffffd
   1405c:	nop    DWORD PTR [rax+0x0]
   14060:	mov    DWORD PTR [rbx],eax
   14062:	cmp    r15d,0x36
   14066:	ja     cc58 <ftp_loop_internal.cold+0x5>
   1406c:	lea    rsi,[rip+0x487b1]        # 5c824 <_IO_stdin_used+0x1824>
   14073:	mov    edx,r15d
   14076:	movsxd rax,DWORD PTR [rsi+rdx*4]
   1407a:	add    rax,rsi
   1407d:	notrack jmp rax
   14080:	cmp    r15d,0x20
   14084:	je     14b18 <ftp_loop_internal+0x1298>
   1408a:	cmp    BYTE PTR [rip+0x762ca],0x0        # 8a35b <opt+0x2db>
   14091:	jne    14784 <ftp_loop_internal+0xf04>
   14097:	mov    rdi,QWORD PTR [rsp+0x28]
   1409c:	test   rdi,rdi
   1409f:	je     140a6 <ftp_loop_internal+0x826>
   140a1:	call   c8b0 <fclose@plt>
   140a6:	mov    rax,QWORD PTR [rsp+0x5d8]
   140ae:	xor    rax,QWORD PTR fs:0x28
   140b7:	jne    165fd <ftp_loop_internal+0x2d7d>
   140bd:	add    rsp,0x5e8
   140c4:	mov    eax,r15d
   140c7:	pop    rbx
   140c8:	pop    rbp
   140c9:	pop    r12
   140cb:	pop    r13
   140cd:	pop    r14
   140cf:	pop    r15
   140d1:	ret    
   140d2:	cmp    r13d,0xffffffff
   140d6:	je     140f6 <ftp_loop_internal+0x876>
   140d8:	mov    rdx,QWORD PTR [rsp+0x88]
   140e0:	mov    rcx,r15
   140e3:	mov    edi,0x1
   140e8:	xor    eax,eax
   140ea:	lea    rsi,[rip+0x479c4]        # 5bab5 <_IO_stdin_used+0xab5>
   140f1:	call   2e0a0 <logprintf>
   140f6:	mov    edx,0x5
   140fb:	lea    rsi,[rip+0x479be]        # 5bac0 <_IO_stdin_used+0xac0>
   14102:	xor    edi,edi
   14104:	call   c780 <dcgettext@plt>
   14109:	mov    edi,0x1
   1410e:	mov    rsi,rax
   14111:	call   2de60 <logputs>
   14116:	mov    edi,DWORD PTR [rsp+0x98]
   1411d:	call   f400 <fd_close>
   14122:	and    DWORD PTR [rbx],0xfffffffd
   14125:	mov    DWORD PTR [rbx+0x8],0xffffffff
   1412c:	nop    DWORD PTR [rax+0x0]
   14130:	mov    rax,QWORD PTR [rsp+0x30]
   14135:	test   rax,rax
   14138:	je     1414c <ftp_loop_internal+0x8cc>
   1413a:	mov    rcx,QWORD PTR [rsp+0xa0]
   14142:	cmp    QWORD PTR [rax+0x10],rcx
   14146:	je     13f10 <ftp_loop_internal+0x690>
   1414c:	mov    esi,DWORD PTR [rip+0x75f36]        # 8a088 <opt+0x8>
   14152:	mov    edi,r14d
   14155:	call   35c00 <printwhat>
   1415a:	mov    eax,DWORD PTR [rip+0x75f28]        # 8a088 <opt+0x8>
   14160:	test   eax,eax
   14162:	je     13971 <ftp_loop_internal+0xf1>
   14168:	cmp    eax,r14d
   1416b:	jg     13971 <ftp_loop_internal+0xf1>
   14171:	mov    edi,DWORD PTR [rbx+0x8]
   14174:	cmp    edi,0xffffffff
   14177:	je     14182 <ftp_loop_internal+0x902>
   14179:	test   BYTE PTR [rbx],0x1
   1417c:	jne    163b4 <ftp_loop_internal+0x2b34>
   14182:	mov    r15d,0x25
   14188:	jmp    14097 <ftp_loop_internal+0x817>
   1418d:	nop    DWORD PTR [rax]
   14190:	mov    rax,QWORD PTR [rip+0x76031]        # 8a1c8 <opt+0x148>
   14197:	test   rax,rax
   1419a:	je     14d18 <ftp_loop_internal+0x1498>
   141a0:	cmp    QWORD PTR [rip+0x76030],0x0        # 8a1d8 <opt+0x158>
   141a8:	jne    13a94 <ftp_loop_internal+0x214>
   141ae:	cmp    BYTE PTR [rip+0x7601b],0x0        # 8a1d0 <opt+0x150>
   141b5:	jne    13a94 <ftp_loop_internal+0x214>
   141bb:	mov    rcx,QWORD PTR [rip+0x76036]        # 8a1f8 <opt+0x178>
   141c2:	test   rcx,rcx
   141c5:	je     13a94 <ftp_loop_internal+0x214>
   141cb:	mov    rax,rcx
   141ce:	jmp    13a94 <ftp_loop_internal+0x214>
   141d3:	nop    DWORD PTR [rax+rax*1+0x0]
   141d8:	mov    rax,QWORD PTR [rip+0x75fe1]        # 8a1c0 <opt+0x140>
   141df:	test   rax,rax
   141e2:	je     14cf0 <ftp_loop_internal+0x1470>
   141e8:	cmp    QWORD PTR [rip+0x75fe8],0x0        # 8a1d8 <opt+0x158>
   141f0:	jne    13a77 <ftp_loop_internal+0x1f7>
   141f6:	cmp    BYTE PTR [rip+0x75fd3],0x0        # 8a1d0 <opt+0x150>
   141fd:	jne    13a77 <ftp_loop_internal+0x1f7>
   14203:	mov    rdx,QWORD PTR [rip+0x75fe6]        # 8a1f0 <opt+0x170>
   1420a:	test   rdx,rdx
   1420d:	je     13a77 <ftp_loop_internal+0x1f7>
   14213:	nop    DWORD PTR [rax+rax*1+0x0]
   14218:	mov    QWORD PTR [rsp+0xb0],rdx
   14220:	jmp    13a7f <ftp_loop_internal+0x1ff>
   14225:	nop    DWORD PTR [rax]
   14228:	mov    esi,0x1
   1422d:	mov    rdi,r12
   14230:	lea    r15,[rsp+0x1d0]
   14238:	call   38230 <url_string>
   1423d:	mov    BYTE PTR [rsp+0x1d8],0x0
   14245:	mov    rbp,rax
   14248:	movabs rax,0x2020202020202020
   14252:	mov    QWORD PTR [rsp+0x1d0],rax
   1425a:	cmp    r14d,0x1
   1425e:	jne    14370 <ftp_loop_internal+0xaf0>
   14264:	mov    rdi,QWORD PTR [rsp+0x10]
   14269:	call   4b5b0 <quote>
   1426e:	xor    edi,edi
   14270:	mov    r8,r15
   14273:	mov    rcx,rbp
   14276:	mov    r9,rax
   14279:	mov    rdx,r13
   1427c:	lea    rsi,[rip+0x475c3]        # 5b846 <_IO_stdin_used+0x846>
   14283:	xor    eax,eax
   14285:	call   2e0a0 <logprintf>
   1428a:	mov    rdi,rbp
   1428d:	call   4bdc0 <rpl_free>
   14292:	jmp    13a06 <ftp_loop_internal+0x186>
   14297:	nop    WORD PTR [rax+rax*1+0x0]
   142a0:	test   rax,rax
   142a3:	je     138f0 <ftp_loop_internal+0x70>
   142a9:	cmp    BYTE PTR [rip+0x75e02],0x0        # 8a0b2 <opt+0x32>
   142b0:	je     1393e <ftp_loop_internal+0xbe>
   142b6:	cmp    QWORD PTR [rip+0x75ec2],0x0        # 8a180 <opt+0x100>
   142be:	je     13e4d <ftp_loop_internal+0x5cd>
   142c4:	call   3bdd0 <remove_link>
   142c9:	test   BYTE PTR [rbx],0x1
   142cc:	je     1394c <ftp_loop_internal+0xcc>
   142d2:	jmp    13e20 <ftp_loop_internal+0x5a0>
   142d7:	nop    WORD PTR [rax+rax*1+0x0]
   142e0:	mov    rax,QWORD PTR [rip+0x75f01]        # 8a1e8 <opt+0x168>
   142e7:	mov    QWORD PTR [rsp+0x18],rax
   142ec:	test   rax,rax
   142ef:	jns    139e3 <ftp_loop_internal+0x163>
   142f5:	cmp    BYTE PTR [rip+0x75ee4],0x0        # 8a1e0 <opt+0x160>
   142fc:	jne    15370 <ftp_loop_internal+0x1af0>
   14302:	cmp    r14d,0x1
   14306:	je     153d0 <ftp_loop_internal+0x1b50>
   1430c:	mov    rax,QWORD PTR [rsp+0xa0]
   14314:	xor    edi,edi
   14316:	mov    QWORD PTR [rsp+0x18],rax
   1431b:	call   cbf0 <time@plt>
   14320:	mov    rdi,rax
   14323:	call   3bd30 <datetime_str>
   14328:	mov    r13,rax
   1432b:	lea    rax,[rip+0x75d4e]        # 8a080 <opt>
   14332:	mov    eax,DWORD PTR [rax]
   14334:	test   eax,eax
   14336:	je     13a06 <ftp_loop_internal+0x186>
   1433c:	mov    esi,0x1
   14341:	mov    rdi,r12
   14344:	lea    r15,[rsp+0x1d0]
   1434c:	call   38230 <url_string>
   14351:	mov    BYTE PTR [rsp+0x1d8],0x0
   14359:	mov    rbp,rax
   1435c:	movabs rax,0x2020202020202020
   14366:	mov    QWORD PTR [rsp+0x1d0],rax
   1436e:	xchg   ax,ax
   14370:	xor    edi,edi
   14372:	mov    edx,0x5
   14377:	lea    rsi,[rip+0x474be]        # 5b83c <_IO_stdin_used+0x83c>
   1437e:	call   c780 <dcgettext@plt>
   14383:	mov    r8d,r14d
   14386:	mov    edx,0x100
   1438b:	mov    rdi,r15
   1438e:	mov    rcx,rax
   14391:	mov    esi,0x1
   14396:	xor    eax,eax
   14398:	call   c950 <__sprintf_chk@plt>
   1439d:	jmp    14264 <ftp_loop_internal+0x9e4>
   143a2:	nop    WORD PTR [rax+rax*1+0x0]
   143a8:	call   411d0 <ssl_init>
   143ad:	test   al,al
   143af:	je     15b28 <ftp_loop_internal+0x22a8>
   143b5:	cmp    BYTE PTR [rip+0x75f9f],0x0        # 8a35b <opt+0x2db>
   143bc:	je     13ad4 <ftp_loop_internal+0x254>
   143c2:	cmp    DWORD PTR [r12+0x18],0x15
   143c8:	jne    13ad4 <ftp_loop_internal+0x254>
   143ce:	cmp    BYTE PTR [rip+0x75ee6],0x0        # 8a2bb <opt+0x23b>
   143d5:	jne    16188 <ftp_loop_internal+0x2908>
   143db:	mov    DWORD PTR [r12+0x18],0x3de
   143e4:	jmp    13ad4 <ftp_loop_internal+0x254>
   143e9:	nop    DWORD PTR [rax+0x0]
   143f0:	cmp    BYTE PTR [rip+0x75cf1],0x0        # 8a0e8 <opt+0x68>
   143f7:	jne    13ff5 <ftp_loop_internal+0x775>
   143fd:	add    DWORD PTR [rip+0x721bc],0x1        # 865c0 <numurls>
   14404:	mov    rdx,QWORD PTR [rsp+0xa0]
   1440c:	add    QWORD PTR [rip+0x7601d],rdx        # 8a430 <total_downloaded_bytes>
   14413:	cmp    BYTE PTR [rip+0x75ede],0x0        # 8a2f8 <opt+0x278>
   1441a:	je     13ff5 <ftp_loop_internal+0x775>
   14420:	mov    rdi,QWORD PTR [rip+0x75ca1]        # 8a0c8 <opt+0x48>
   14427:	call   364a0 <input_file_url>
   1442c:	test   al,al
   1442e:	jne    14474 <ftp_loop_internal+0xbf4>
   14430:	cmp    BYTE PTR [rip+0x75e84],0x0        # 8a2bb <opt+0x23b>
   14437:	jne    16286 <ftp_loop_internal+0x2a06>
   1443d:	xor    edi,edi
   1443f:	mov    edx,0x5
   14444:	lea    rsi,[rip+0x476d0]        # 5bb1b <_IO_stdin_used+0xb1b>
   1444b:	call   c780 <dcgettext@plt>
   14450:	mov    r14,QWORD PTR [rsp+0x10]
   14455:	xor    edi,edi
   14457:	mov    rsi,rax
   1445a:	xor    eax,eax
   1445c:	mov    rdx,r14
   1445f:	call   2e0a0 <logprintf>
   14464:	mov    rdi,r14
   14467:	call   c120 <unlink@plt>
   1446c:	test   eax,eax
   1446e:	jne    1603b <ftp_loop_internal+0x27bb>
   14474:	mov    eax,DWORD PTR [rbx+0x4]
   14477:	jmp    13ff5 <ftp_loop_internal+0x775>
   1447c:	nop    DWORD PTR [rax+0x0]
   14480:	mov    rdi,QWORD PTR [r12+0x10]
   14485:	xor    r8d,r8d
   14488:	lea    rdx,[rsp+0xb8]
   14490:	lea    rsi,[rsp+0xb0]
   14498:	mov    ecx,0x1
   1449d:	call   2f6b0 <search_netrc>
   144a2:	mov    rax,QWORD PTR [rsp+0xb8]
   144aa:	cmp    QWORD PTR [rsp+0xb0],0x0
   144b3:	jne    13cb8 <ftp_loop_internal+0x438>
   144b9:	jmp    13ca9 <ftp_loop_internal+0x429>
   144be:	xchg   ax,ax
   144c0:	mov    rdi,QWORD PTR [r12+0x10]
   144c5:	mov    esi,DWORD PTR [r12+0x18]
   144ca:	jmp    13cec <ftp_loop_internal+0x46c>
   144cf:	nop
   144d0:	mov    BYTE PTR [rsp+0x87],0x0
   144d8:	mov    eax,DWORD PTR [rsp+0x8]
   144dc:	mov    BYTE PTR [rsp+0x86],0x0
   144e4:	mov    QWORD PTR [rsp+0x70],0x0
   144ed:	and    eax,0xc
   144f0:	mov    DWORD PTR [rsp+0x58],0xffffffff
   144f8:	mov    DWORD PTR [rsp+0x6c],eax
   144fc:	lea    rax,[rsp+0x120]
   14504:	mov    QWORD PTR [rsp+0x78],rax
   14509:	mov    eax,DWORD PTR [rsp+0x6c]
   1450d:	test   eax,eax
   1450f:	je     145f0 <ftp_loop_internal+0xd70>
   14515:	cmp    BYTE PTR [rip+0x75ce6],0x0        # 8a202 <opt+0x182>
   1451c:	mov    r13d,DWORD PTR [rsp+0x98]
   14524:	je     14930 <ftp_loop_internal+0x10b0>
   1452a:	lea    rbp,[rsp+0x100]
   14532:	mov    edx,0x1
   14537:	mov    edi,r13d
   1453a:	mov    rsi,rbp
   1453d:	call   ecd0 <socket_ip_address>
   14542:	test   al,al
   14544:	je     cc53 <ftp_loop_internal.cold>
   1454a:	mov    eax,DWORD PTR [rsp+0x100]
   14551:	cmp    eax,0x2
   14554:	jne    14df0 <ftp_loop_internal+0x1570>
   1455a:	cmp    BYTE PTR [rip+0x75d57],0x0        # 8a2b8 <opt+0x238>
   14561:	je     15dd0 <ftp_loop_internal+0x2550>
   14567:	lea    rax,[rsp+0xd8]
   1456f:	mov    rsi,rbp
   14572:	mov    edi,r13d
   14575:	mov    rdx,rax
   14578:	call   1a4d0 <ftp_pasv>
   1457d:	mov    r15d,eax
   14580:	lea    eax,[r15-0x7]
   14584:	cmp    eax,0x25
   14587:	ja     cc58 <ftp_loop_internal.cold+0x5>
   1458d:	lea    rcx,[rip+0x4836c]        # 5c900 <_IO_stdin_used+0x1900>
   14594:	movsxd rax,DWORD PTR [rcx+rax*4]
   14598:	add    rax,rcx
   1459b:	notrack jmp rax
   1459e:	cmp    BYTE PTR [rip+0x75d16],0x0        # 8a2bb <opt+0x23b>
   145a5:	mov    esi,DWORD PTR [rsp+0xd8]
   145ac:	jne    16062 <ftp_loop_internal+0x27e2>
   145b2:	xor    edx,edx
   145b4:	mov    rdi,rbp
   145b7:	call   f4d0 <connect_to_ip>
   145bc:	mov    DWORD PTR [rsp+0x58],eax
   145c0:	test   eax,eax
   145c2:	js     163c5 <ftp_loop_internal+0x2b45>
   145c8:	cmp    BYTE PTR [rip+0x75ce9],0x0        # 8a2b8 <opt+0x238>
   145cf:	jne    145f0 <ftp_loop_internal+0xd70>
   145d1:	lea    rsi,[rip+0x47337]        # 5b90f <_IO_stdin_used+0x90f>
   145d8:	xor    edi,edi
   145da:	mov    edx,0x5
   145df:	call   c780 <dcgettext@plt>
   145e4:	xor    edi,edi
   145e6:	mov    rsi,rax
   145e9:	call   2de60 <logputs>
   145ee:	xchg   ax,ax
   145f0:	cmp    QWORD PTR [rsp+0x18],0x0
   145f6:	je     147a0 <ftp_loop_internal+0xf20>
   145fc:	mov    r15d,DWORD PTR [rsp+0x80]
   14604:	test   r15d,r15d
   14607:	je     14830 <ftp_loop_internal+0xfb0>
   1460d:	cmp    BYTE PTR [rip+0x75ca4],0x0        # 8a2b8 <opt+0x238>
   14614:	je     15d90 <ftp_loop_internal+0x2510>
   1461a:	mov    rsi,QWORD PTR [rsp+0x18]
   1461f:	mov    edi,DWORD PTR [rsp+0x98]
   14626:	call   1ade0 <ftp_rest>
   1462b:	mov    r15d,eax
   1462e:	cmp    eax,0x11
   14631:	je     15de8 <ftp_loop_internal+0x2568>
   14637:	ja     152d0 <ftp_loop_internal+0x1a50>
   1463d:	cmp    eax,0x7
   14640:	je     15408 <ftp_loop_internal+0x1b88>
   14646:	cmp    eax,0xe
   14649:	jne    16782 <ftp_loop_internal+0x2f02>
   1464f:	lea    rsi,[rip+0x51379]        # 659cf <yy_accept+0x90f>
   14656:	xor    edi,edi
   14658:	call   2de60 <logputs>
   1465d:	mov    edx,0x5
   14662:	lea    rsi,[rip+0x476cf]        # 5bd38 <_IO_stdin_used+0xd38>
   14669:	xor    edi,edi
   1466b:	call   c780 <dcgettext@plt>
   14670:	mov    edi,0x1
   14675:	mov    rsi,rax
   14678:	call   2de60 <logputs>
   1467d:	mov    edi,DWORD PTR [rsp+0x98]
   14684:	call   f400 <fd_close>
   14689:	mov    DWORD PTR [rbx+0x8],0xffffffff
   14690:	mov    edi,DWORD PTR [rsp+0x58]
   14694:	call   f400 <fd_close>
   14699:	mov    edi,DWORD PTR [rsp+0x9c]
   146a0:	call   f400 <fd_close>
   146a5:	mov    edx,DWORD PTR [rbx+0x8]
   146a8:	mov    eax,DWORD PTR [rbx]
   146aa:	cmp    edx,0xffffffff
   146ad:	je     14059 <ftp_loop_internal+0x7d9>
   146b3:	or     eax,0x2
   146b6:	jmp    14060 <ftp_loop_internal+0x7e0>
   146bb:	nop    DWORD PTR [rax+rax*1+0x0]
   146c0:	cmp    eax,0x2c
   146c3:	jne    1675f <ftp_loop_internal+0x2edf>
   146c9:	lea    rsi,[rip+0x512ff]        # 659cf <yy_accept+0x90f>
   146d0:	xor    edi,edi
   146d2:	call   2de60 <logputs>
   146d7:	mov    edx,0x5
   146dc:	lea    rsi,[rip+0x4768d]        # 5bd70 <_IO_stdin_used+0xd70>
   146e3:	xor    edi,edi
   146e5:	call   c780 <dcgettext@plt>
   146ea:	mov    edi,0x1
   146ef:	mov    rsi,rax
   146f2:	call   2de60 <logputs>
   146f7:	mov    edi,DWORD PTR [rsp+0x98]
   146fe:	call   f400 <fd_close>
   14703:	and    DWORD PTR [rbx],0xfffffffd
   14706:	mov    DWORD PTR [rbx+0x8],0xffffffff
   1470d:	jmp    1414c <ftp_loop_internal+0x8cc>
   14712:	nop    WORD PTR [rax+rax*1+0x0]
   14718:	cmp    eax,0xc
   1471b:	jne    16764 <ftp_loop_internal+0x2ee4>
   14721:	lea    rsi,[rip+0x512a7]        # 659cf <yy_accept+0x90f>
   14728:	xor    edi,edi
   1472a:	call   2de60 <logputs>
   1472f:	mov    rdi,QWORD PTR [r12+0x40]
   14734:	call   4b5b0 <quote>
   14739:	xor    edi,edi
   1473b:	mov    edx,0x5
   14740:	lea    rsi,[rip+0x4723e]        # 5b985 <_IO_stdin_used+0x985>
   14747:	mov    r12,rax
   1474a:	call   c780 <dcgettext@plt>
   1474f:	mov    rdx,r12
   14752:	mov    edi,0x1
   14757:	mov    rsi,rax
   1475a:	xor    eax,eax
   1475c:	call   2e0a0 <logprintf>
   14761:	mov    edi,DWORD PTR [rsp+0x98]
   14768:	call   f400 <fd_close>
   1476d:	and    DWORD PTR [rbx],0xfffffffd
   14770:	cmp    BYTE PTR [rip+0x75be4],0x0        # 8a35b <opt+0x2db>
   14777:	mov    DWORD PTR [rbx+0x8],0xffffffff
   1477e:	je     14097 <ftp_loop_internal+0x817>
   14784:	lea    rsi,[rip+0x47bed]        # 5c378 <_IO_stdin_used+0x1378>
   1478b:	mov    edi,0x1
   14790:	call   2de60 <logputs>
   14795:	jmp    14097 <ftp_loop_internal+0x817>
   1479a:	nop    WORD PTR [rax+rax*1+0x0]
   147a0:	mov    r13d,DWORD PTR [rsp+0x80]
   147a8:	test   r13d,r13d
   147ab:	je     14830 <ftp_loop_internal+0xfb0>
   147b1:	movzx  r13d,BYTE PTR [rip+0x7592f]        # 8a0e8 <opt+0x68>
   147b9:	test   r13b,r13b
   147bc:	jne    1620e <ftp_loop_internal+0x298e>
   147c2:	lea    rax,[rip+0x758b7]        # 8a080 <opt>
   147c9:	mov    ebp,DWORD PTR [rax]
   147cb:	test   ebp,ebp
   147cd:	je     147dc <ftp_loop_internal+0xf5c>
   147cf:	cmp    BYTE PTR [rip+0x75ae2],0x0        # 8a2b8 <opt+0x238>
   147d6:	je     15468 <ftp_loop_internal+0x1be8>
   147dc:	mov    rsi,QWORD PTR [r12+0x48]
   147e1:	mov    edi,DWORD PTR [rsp+0x98]
   147e8:	call   1aec0 <ftp_retr>
   147ed:	mov    r15d,eax
   147f0:	cmp    eax,0xe
   147f3:	je     1464f <ftp_loop_internal+0xdcf>
   147f9:	ja     14d98 <ftp_loop_internal+0x1518>
   147ff:	cmp    eax,0x7
   14802:	jne    14d60 <ftp_loop_internal+0x14e0>
   14808:	cmp    BYTE PTR [rip+0x75aa9],0x0        # 8a2b8 <opt+0x238>
   1480f:	je     15696 <ftp_loop_internal+0x1e16>
   14815:	cmp    BYTE PTR [rsp+0x87],0x0
   1481d:	jne    14830 <ftp_loop_internal+0xfb0>
   1481f:	mov    rax,QWORD PTR [rsp+0x50]
   14824:	mov    QWORD PTR [rsp+0xc0],rax
   1482c:	nop    DWORD PTR [rax+0x0]
   14830:	test   BYTE PTR [rsp+0x8],0x8
   14835:	je     14fa0 <ftp_loop_internal+0x1720>
   1483b:	cmp    BYTE PTR [rip+0x75a76],0x0        # 8a2b8 <opt+0x238>
   14842:	je     15d48 <ftp_loop_internal+0x24c8>
   14848:	mov    edx,DWORD PTR [rbx]
   1484a:	mov    edi,DWORD PTR [rsp+0x98]
   14851:	lea    r8,[rsp+0x96]
   14859:	xor    esi,esi
   1485b:	mov    ecx,edx
   1485d:	shr    edx,0x2
   14860:	shr    ecx,0x3
   14863:	and    edx,0x1
   14866:	and    ecx,0x1
   14869:	call   1afb0 <ftp_list>
   1486e:	mov    r15d,eax
   14871:	cmp    eax,0xe
   14874:	je     1464f <ftp_loop_internal+0xdcf>
   1487a:	ja     14bb0 <ftp_loop_internal+0x1330>
   14880:	cmp    eax,0x7
   14883:	jne    14c60 <ftp_loop_internal+0x13e0>
   14889:	cmp    BYTE PTR [rip+0x75a28],0x0        # 8a2b8 <opt+0x238>
   14890:	je     16019 <ftp_loop_internal+0x2799>
   14896:	cmp    BYTE PTR [rsp+0x87],0x0
   1489e:	jne    148ad <ftp_loop_internal+0x102d>
   148a0:	mov    rax,QWORD PTR [rsp+0x50]
   148a5:	mov    QWORD PTR [rsp+0xc0],rax
   148ad:	mov    eax,DWORD PTR [rsp+0x6c]
   148b1:	test   eax,eax
   148b3:	jne    14fbb <ftp_loop_internal+0x173b>
   148b9:	mov    edx,DWORD PTR [rbx+0x8]
   148bc:	mov    eax,DWORD PTR [rbx]
   148be:	mov    r15d,0x23
   148c4:	jmp    146aa <ftp_loop_internal+0xe2a>
   148c9:	nop    DWORD PTR [rax+0x0]
   148d0:	mov    rdx,QWORD PTR [rsp+0xa0]
   148d8:	add    DWORD PTR [rip+0x71ce1],0x1        # 865c0 <numurls>
   148df:	add    QWORD PTR [rip+0x75b4a],rdx        # 8a430 <total_downloaded_bytes>
   148e6:	jmp    13ff5 <ftp_loop_internal+0x775>
   148eb:	nop    DWORD PTR [rax+rax*1+0x0]
   148f0:	mov    edi,ebp
   148f2:	call   199d0 <ftp_greeting>
   148f7:	mov    r15d,eax
   148fa:	cmp    eax,0x7
   148fd:	jne    14038 <ftp_loop_internal+0x7b8>
   14903:	mov    edi,DWORD PTR [rsp+0x98]
   1490a:	lea    rdx,[rsp+0x97]
   14912:	lea    rsi,[r12+0x10]
   14917:	call   13740 <init_control_ssl_connection.isra.0>
   1491c:	mov    r15d,eax
   1491f:	test   eax,eax
   14921:	je     13d69 <ftp_loop_internal+0x4e9>
   14927:	jmp    146a5 <ftp_loop_internal+0xe25>
   1492c:	nop    DWORD PTR [rax+0x0]
   14930:	mov    rsi,QWORD PTR [rsp+0x78]
   14935:	mov    edx,0x1
   1493a:	mov    edi,r13d
   1493d:	call   ecd0 <socket_ip_address>
   14942:	test   al,al
   14944:	je     cc53 <ftp_loop_internal.cold>
   1494a:	mov    eax,DWORD PTR [rsp+0x120]
   14951:	cmp    eax,0x2
   14954:	jne    14e58 <ftp_loop_internal+0x15d8>
   1495a:	cmp    BYTE PTR [rip+0x75957],0x0        # 8a2b8 <opt+0x238>
   14961:	je     15db8 <ftp_loop_internal+0x2538>
   14967:	lea    rsi,[rsp+0x9c]
   1496f:	mov    edi,r13d
   14972:	call   19c70 <ftp_port>
   14977:	mov    r15d,eax
   1497a:	cmp    r15d,0x2c
   1497e:	ja     cc58 <ftp_loop_internal.cold+0x5>
   14984:	lea    rcx,[rip+0x4800d]        # 5c998 <_IO_stdin_used+0x1998>
   1498b:	mov    eax,r15d
   1498e:	movsxd rax,DWORD PTR [rcx+rax*4]
   14992:	add    rax,rcx
   14995:	notrack jmp rax
   14998:	nop    DWORD PTR [rax+rax*1+0x0]
   149a0:	cmp    al,0x5a
   149a2:	jg     14eb0 <ftp_loop_internal+0x1630>
   149a8:	cmp    al,0x40
   149aa:	jg     14ebb <ftp_loop_internal+0x163b>
   149b0:	cmp    edx,0x4
   149b3:	je     13bd7 <ftp_loop_internal+0x357>
   149b9:	cmp    edx,0x1
   149bc:	jne    13b41 <ftp_loop_internal+0x2c1>
   149c2:	xor    ebp,ebp
   149c4:	cmp    BYTE PTR [rip+0x758f0],0x0        # 8a2bb <opt+0x23b>
   149cb:	jne    156b8 <ftp_loop_internal+0x1e38>
   149d1:	mov    esi,0x2f
   149d6:	mov    rdi,r13
   149d9:	call   c6c0 <strchr@plt>
   149de:	mov    DWORD PTR [rsp+0x58],0x2
   149e6:	test   rax,rax
   149e9:	je     13be4 <ftp_loop_internal+0x364>
   149ef:	cmp    BYTE PTR [rip+0x758c5],0x0        # 8a2bb <opt+0x23b>
   149f6:	mov    DWORD PTR [rsp+0x58],0x3
   149fe:	je     13be4 <ftp_loop_internal+0x364>
   14a04:	lea    rdi,[rip+0x475b5]        # 5bfc0 <_IO_stdin_used+0xfc0>
   14a0b:	xor    eax,eax
   14a0d:	call   2e250 <debug_logprintf>
   14a12:	jmp    13be4 <ftp_loop_internal+0x364>
   14a17:	nop    WORD PTR [rax+rax*1+0x0]
   14a20:	lea    rax,[rip+0x75659]        # 8a080 <opt>
   14a27:	mov    rsi,QWORD PTR [r12+0x48]
   14a2c:	mov    eax,DWORD PTR [rax]
   14a2e:	test   eax,eax
   14a30:	je     14a3f <ftp_loop_internal+0x11bf>
   14a32:	cmp    BYTE PTR [rip+0x7587f],0x0        # 8a2b8 <opt+0x238>
   14a39:	je     15608 <ftp_loop_internal+0x1d88>
   14a3f:	mov    edi,DWORD PTR [rsp+0x98]
   14a46:	lea    rdx,[rsp+0xc0]
   14a4e:	call   1b4e0 <ftp_size>
   14a53:	mov    r15d,eax
   14a56:	cmp    eax,0x7
   14a59:	jne    14ed8 <ftp_loop_internal+0x1658>
   14a5f:	movzx  eax,BYTE PTR [rip+0x75852]        # 8a2b8 <opt+0x238>
   14a66:	mov    BYTE PTR [rsp+0x87],al
   14a6d:	test   al,al
   14a6f:	jne    13ebd <ftp_loop_internal+0x63d>
   14a75:	mov    rdi,QWORD PTR [rsp+0xc0]
   14a7d:	test   rdi,rdi
   14a80:	je     15e50 <ftp_loop_internal+0x25d0>
   14a86:	call   3e8e0 <number_to_static_string>
   14a8b:	mov    rdx,rax
   14a8e:	lea    rsi,[rip+0x46bc6]        # 5b65b <_IO_stdin_used+0x65b>
   14a95:	xor    edi,edi
   14a97:	xor    eax,eax
   14a99:	call   2e0a0 <logprintf>
   14a9e:	mov    BYTE PTR [rsp+0x87],0x1
   14aa6:	jmp    13ebd <ftp_loop_internal+0x63d>
   14aab:	nop    DWORD PTR [rax+rax*1+0x0]
   14ab0:	mov    esi,0x1
   14ab5:	mov    rdi,r12
   14ab8:	call   38230 <url_string>
   14abd:	mov    rdi,QWORD PTR [rsp+0xa0]
   14ac5:	mov    rbp,rax
   14ac8:	call   3e8e0 <number_to_static_string>
   14acd:	sub    rsp,0x8
   14ad1:	mov    rcx,rbp
   14ad4:	mov    rdx,r15
   14ad7:	push   r14
   14ad9:	mov    r9,QWORD PTR [rsp+0x20]
   14ade:	mov    r8,rax
   14ae1:	lea    rsi,[rip+0x47015]        # 5bafd <_IO_stdin_used+0xafd>
   14ae8:	mov    edi,0x2
   14aed:	xor    eax,eax
   14aef:	call   2e0a0 <logprintf>
   14af4:	mov    rdi,rbp
   14af7:	call   4bdc0 <rpl_free>
   14afc:	pop    rdi
   14afd:	pop    r8
   14aff:	jmp    13fcd <ftp_loop_internal+0x74d>
   14b04:	nop    DWORD PTR [rax+0x0]
   14b08:	mov    QWORD PTR [rsp+0x10],rdi
   14b0d:	jmp    1393e <ftp_loop_internal+0xbe>
   14b12:	nop    WORD PTR [rax+rax*1+0x0]
   14b18:	lea    rsi,[rip+0x47831]        # 5c350 <_IO_stdin_used+0x1350>
   14b1f:	mov    edi,0x1
   14b24:	call   2de60 <logputs>
   14b29:	jmp    1408a <ftp_loop_internal+0x80a>
   14b2e:	xchg   ax,ax
   14b30:	cmp    BYTE PTR [rax+0x1],0x0
   14b34:	jne    13f70 <ftp_loop_internal+0x6f0>
   14b3a:	call   3e8e0 <number_to_static_string>
   14b3f:	lea    rsi,[rip+0x478aa]        # 5c3f0 <_IO_stdin_used+0x13f0>
   14b46:	xor    edi,edi
   14b48:	mov    edx,0x5
   14b4d:	mov    QWORD PTR [rsp+0x8],rax
   14b52:	lea    rbp,[rip+0x598be]        # 6e417 <urlchr_table+0x877>
   14b59:	call   c780 <dcgettext@plt>
   14b5e:	mov    r9,QWORD PTR [rsp+0x8]
   14b63:	mov    rsi,rax
   14b66:	jmp    13fa2 <ftp_loop_internal+0x722>
   14b6b:	nop    DWORD PTR [rax+rax*1+0x0]
   14b70:	cmp    BYTE PTR [r13+0x0],0x2f
   14b75:	mov    ebp,0x1
   14b7a:	je     149d1 <ftp_loop_internal+0x1151>
   14b80:	jmp    149c2 <ftp_loop_internal+0x1142>
   14b85:	nop    DWORD PTR [rax]
   14b88:	lea    rsi,[rip+0x50e40]        # 659cf <yy_accept+0x90f>
   14b8f:	xor    edi,edi
   14b91:	call   2de60 <logputs>
   14b96:	mov    edx,0x5
   14b9b:	lea    rsi,[rip+0x47196]        # 5bd38 <_IO_stdin_used+0xd38>
   14ba2:	jmp    146e3 <ftp_loop_internal+0xe63>
   14ba7:	nop    WORD PTR [rax+rax*1+0x0]
   14bb0:	cmp    eax,0x2c
   14bb3:	jne    16773 <ftp_loop_internal+0x2ef3>
   14bb9:	lea    rsi,[rip+0x50e0f]        # 659cf <yy_accept+0x90f>
   14bc0:	xor    edi,edi
   14bc2:	call   2de60 <logputs>
   14bc7:	mov    edx,0x5
   14bcc:	lea    rsi,[rip+0x4719d]        # 5bd70 <_IO_stdin_used+0xd70>
   14bd3:	jmp    14669 <ftp_loop_internal+0xde9>
   14bd8:	mov    esi,DWORD PTR [rip+0x754aa]        # 8a088 <opt+0x8>
   14bde:	mov    edi,r14d
   14be1:	call   35c00 <printwhat>
   14be6:	cmp    r15d,0x14
   14bea:	jne    1415a <ftp_loop_internal+0x8da>
   14bf0:	mov    rdi,QWORD PTR [rbx+0x28]
   14bf4:	call   4bdc0 <rpl_free>
   14bf9:	mov    QWORD PTR [rbx+0x28],0x0
   14c01:	xor    esi,esi
   14c03:	mov    rdi,r12
   14c06:	call   37670 <url_file_name>
   14c0b:	mov    QWORD PTR [rsp+0x10],rax
   14c10:	mov    QWORD PTR [rbx+0x28],rax
   14c14:	jmp    1415a <ftp_loop_internal+0x8da>
   14c19:	nop    DWORD PTR [rax+0x0]
   14c20:	mov    edi,DWORD PTR [rbx+0x8]
   14c23:	call   f400 <fd_close>
   14c28:	mov    DWORD PTR [rbx+0x8],0xffffffff
   14c2f:	jmp    13f4a <ftp_loop_internal+0x6ca>
   14c34:	nop    DWORD PTR [rax+0x0]
   14c38:	movsd  xmm0,QWORD PTR [rbx+0x10]
   14c3d:	mov    rdi,QWORD PTR [rsp+0xa0]
   14c45:	sub    rdi,QWORD PTR [rsp+0x18]
   14c4a:	call   351d0 <retr_rate>
   14c4f:	mov    r13,rax
   14c52:	jmp    13f32 <ftp_loop_internal+0x6b2>
   14c57:	nop    WORD PTR [rax+rax*1+0x0]
   14c60:	cmp    eax,0xc
   14c63:	jne    1677d <ftp_loop_internal+0x2efd>
   14c69:	lea    rsi,[rip+0x50d5f]        # 659cf <yy_accept+0x90f>
   14c70:	xor    edi,edi
   14c72:	call   2de60 <logputs>
   14c77:	lea    rdi,[rip+0x515e2]        # 66260 <primes.6089+0x180>
   14c7e:	call   4b5b0 <quote>
   14c83:	mov    edx,0x5
   14c88:	lea    rsi,[rip+0x47421]        # 5c0b0 <_IO_stdin_used+0x10b0>
   14c8f:	mov    r13,rax
   14c92:	xor    edi,edi
   14c94:	call   c780 <dcgettext@plt>
   14c99:	mov    rdx,r13
   14c9c:	mov    edi,0x1
   14ca1:	mov    rsi,rax
   14ca4:	xor    eax,eax
   14ca6:	call   2e0a0 <logprintf>
   14cab:	jmp    14690 <ftp_loop_internal+0xe10>
   14cb0:	mov    edx,DWORD PTR [rbx+0x8]
   14cb3:	mov    eax,DWORD PTR [rbx]
   14cb5:	mov    r15d,0x1
   14cbb:	jmp    146aa <ftp_loop_internal+0xe2a>
   14cc0:	mov    rsi,r13
   14cc3:	mov    edi,0x7
   14cc8:	call   4b2b0 <quotearg_style>
   14ccd:	mov    edx,ebp
   14ccf:	lea    rsi,[rip+0x46c9a]        # 5b970 <_IO_stdin_used+0x970>
   14cd6:	xor    edi,edi
   14cd8:	mov    rcx,rax
   14cdb:	xor    eax,eax
   14cdd:	call   2e0a0 <logprintf>
   14ce2:	jmp    13c09 <ftp_loop_internal+0x389>
   14ce7:	nop    WORD PTR [rax+rax*1+0x0]
   14cf0:	mov    rdx,QWORD PTR [rip+0x754f9]        # 8a1f0 <opt+0x170>
   14cf7:	test   rdx,rdx
   14cfa:	jne    14218 <ftp_loop_internal+0x998>
   14d00:	mov    QWORD PTR [rsp+0xb0],0x0
   14d0c:	jmp    13a7f <ftp_loop_internal+0x1ff>
   14d11:	nop    DWORD PTR [rax+0x0]
   14d18:	mov    rax,QWORD PTR [rip+0x754d9]        # 8a1f8 <opt+0x178>
   14d1f:	test   rax,rax
   14d22:	jne    13a94 <ftp_loop_internal+0x214>
   14d28:	mov    QWORD PTR [rsp+0xb8],0x0
   14d34:	test   dl,dl
   14d36:	jne    14480 <ftp_loop_internal+0xc00>
   14d3c:	cmp    QWORD PTR [rsp+0xb0],0x0
   14d45:	jne    13cc1 <ftp_loop_internal+0x441>
   14d4b:	lea    rax,[rip+0x46b0b]        # 5b85d <_IO_stdin_used+0x85d>
   14d52:	mov    QWORD PTR [rsp+0xb0],rax
   14d5a:	jmp    13cc1 <ftp_loop_internal+0x441>
   14d5f:	nop
   14d60:	cmp    eax,0xc
   14d63:	jne    16787 <ftp_loop_internal+0x2f07>
   14d69:	lea    rsi,[rip+0x50c5f]        # 659cf <yy_accept+0x90f>
   14d70:	xor    edi,edi
   14d72:	call   2de60 <logputs>
   14d77:	mov    rdi,QWORD PTR [r12+0x48]
   14d7c:	call   4b5b0 <quote>
   14d81:	mov    edx,0x5
   14d86:	lea    rsi,[rip+0x46cf8]        # 5ba85 <_IO_stdin_used+0xa85>
   14d8d:	mov    r13,rax
   14d90:	jmp    14c92 <ftp_loop_internal+0x1412>
   14d95:	nop    DWORD PTR [rax]
   14d98:	cmp    eax,0x2c
   14d9b:	je     14bb9 <ftp_loop_internal+0x1339>
   14da1:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   14da6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14db0:	push   0xffffffffffffffff
   14db2:	mov    rsi,QWORD PTR [r12]
   14db6:	xor    ecx,ecx
   14db8:	xor    r9d,r9d
   14dbb:	push   QWORD PTR [rsp+0x30]
   14dbf:	mov    r8,QWORD PTR [rsp+0x70]
   14dc4:	xor    edx,edx
   14dc6:	xor    edi,edi
   14dc8:	mov    r15d,0x34
   14dce:	call   3b100 <warc_write_resource_record>
   14dd3:	pop    rcx
   14dd4:	pop    rsi
   14dd5:	test   al,al
   14dd7:	je     140a6 <ftp_loop_internal+0x826>
   14ddd:	mov    QWORD PTR [rsp+0x28],0x0
   14de6:	mov    eax,DWORD PTR [rbx+0x4]
   14de9:	jmp    13fe0 <ftp_loop_internal+0x760>
   14dee:	xchg   ax,ax
   14df0:	cmp    eax,0xa
   14df3:	jne    16769 <ftp_loop_internal+0x2ee9>
   14df9:	cmp    BYTE PTR [rip+0x754b8],0x0        # 8a2b8 <opt+0x238>
   14e00:	je     15670 <ftp_loop_internal+0x1df0>
   14e06:	lea    rax,[rsp+0xd8]
   14e0e:	mov    rsi,rbp
   14e11:	mov    edi,r13d
   14e14:	mov    rdx,rax
   14e17:	mov    QWORD PTR [rsp+0x58],rax
   14e1c:	call   1aa60 <ftp_epsv>
   14e21:	mov    r15d,eax
   14e24:	cmp    eax,0x1d
   14e27:	jne    14580 <ftp_loop_internal+0xd00>
   14e2d:	cmp    BYTE PTR [rip+0x75484],0x0        # 8a2b8 <opt+0x238>
   14e34:	je     161a0 <ftp_loop_internal+0x2920>
   14e3a:	mov    rdx,QWORD PTR [rsp+0x58]
   14e3f:	mov    rsi,rbp
   14e42:	mov    edi,r13d
   14e45:	call   1a680 <ftp_lpsv>
   14e4a:	mov    r15d,eax
   14e4d:	jmp    14580 <ftp_loop_internal+0xd00>
   14e52:	nop    WORD PTR [rax+rax*1+0x0]
   14e58:	cmp    eax,0xa
   14e5b:	jne    1676e <ftp_loop_internal+0x2eee>
   14e61:	cmp    BYTE PTR [rip+0x75450],0x0        # 8a2b8 <opt+0x238>
   14e68:	je     15683 <ftp_loop_internal+0x1e03>
   14e6e:	lea    rbp,[rsp+0x9c]
   14e76:	mov    edi,r13d
   14e79:	mov    rsi,rbp
   14e7c:	call   1a090 <ftp_eprt>
   14e81:	mov    r15d,eax
   14e84:	cmp    eax,0xa
   14e87:	jne    1497a <ftp_loop_internal+0x10fa>
   14e8d:	cmp    BYTE PTR [rip+0x75424],0x0        # 8a2b8 <opt+0x238>
   14e94:	je     161b3 <ftp_loop_internal+0x2933>
   14e9a:	mov    rsi,rbp
   14e9d:	mov    edi,r13d
   14ea0:	call   19e00 <ftp_lprt>
   14ea5:	mov    r15d,eax
   14ea8:	jmp    1497a <ftp_loop_internal+0x10fa>
   14ead:	nop    DWORD PTR [rax]
   14eb0:	sub    eax,0x61
   14eb3:	cmp    al,0x19
   14eb5:	ja     149b0 <ftp_loop_internal+0x1130>
   14ebb:	cmp    BYTE PTR [r13+0x1],0x3a
   14ec0:	jne    149b0 <ftp_loop_internal+0x1130>
   14ec6:	cmp    edx,0x1
   14ec9:	jne    13bd7 <ftp_loop_internal+0x357>
   14ecf:	jmp    149c2 <ftp_loop_internal+0x1142>
   14ed4:	nop    DWORD PTR [rax+0x0]
   14ed8:	lea    eax,[rax-0xe]
   14edb:	cmp    eax,0x1
   14ede:	ja     cc58 <ftp_loop_internal.cold+0x5>
   14ee4:	lea    rsi,[rip+0x50ae4]        # 659cf <yy_accept+0x90f>
   14eeb:	xor    edi,edi
   14eed:	call   2de60 <logputs>
   14ef2:	mov    edx,0x5
   14ef7:	lea    rsi,[rip+0x46e3a]        # 5bd38 <_IO_stdin_used+0xd38>
   14efe:	xor    edi,edi
   14f00:	call   c780 <dcgettext@plt>
   14f05:	mov    edi,0x1
   14f0a:	mov    rsi,rax
   14f0d:	call   2de60 <logputs>
   14f12:	mov    edi,DWORD PTR [rsp+0x98]
   14f19:	call   f400 <fd_close>
   14f1e:	mov    DWORD PTR [rbx+0x8],0xffffffff
   14f25:	mov    eax,DWORD PTR [rbx]
   14f27:	jmp    14059 <ftp_loop_internal+0x7d9>
   14f2c:	nop    DWORD PTR [rax+0x0]
   14f30:	mov    rdi,r12
   14f33:	jmp    1391b <ftp_loop_internal+0x9b>
   14f38:	nop    DWORD PTR [rax+rax*1+0x0]
   14f40:	call   39ba0 <warc_tempfile>
   14f45:	mov    QWORD PTR [rsp+0x28],rax
   14f4a:	test   rax,rax
   14f4d:	je     16347 <ftp_loop_internal+0x2ac7>
   14f53:	cmp    QWORD PTR [rbx+0x30],0x0
   14f58:	je     15d60 <ftp_loop_internal+0x24e0>
   14f5e:	mov    eax,DWORD PTR [rbx+0x4]
   14f61:	jmp    139c8 <ftp_loop_internal+0x148>
   14f66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   14f70:	call   c740 <__errno_location@plt>
   14f75:	mov    r15d,0x5
   14f7b:	mov    edi,DWORD PTR [rax]
   14f7d:	call   eea0 <retryable_socket_connect_error>
   14f82:	mov    edx,DWORD PTR [rbx+0x8]
   14f85:	test   al,al
   14f87:	mov    eax,DWORD PTR [rbx]
   14f89:	je     146aa <ftp_loop_internal+0xe2a>
   14f8f:	mov    r15d,0x3
   14f95:	jmp    146aa <ftp_loop_internal+0xe2a>
   14f9a:	nop    WORD PTR [rax+rax*1+0x0]
   14fa0:	mov    r11d,DWORD PTR [rsp+0x6c]
   14fa5:	test   r11d,r11d
   14fa8:	je     148b9 <ftp_loop_internal+0x1039>
   14fae:	cmp    BYTE PTR [rip+0x75133],0x0        # 8a0e8 <opt+0x68>
   14fb5:	jne    148b9 <ftp_loop_internal+0x1039>
   14fbb:	mov    rcx,QWORD PTR [rsp+0x18]
   14fc0:	mov    rdx,QWORD PTR [rsp+0x38]
   14fc5:	test   rcx,rcx
   14fc8:	setne  r13b
   14fcc:	test   rdx,rdx
   14fcf:	je     15008 <ftp_loop_internal+0x1788>
   14fd1:	test   r13b,r13b
   14fd4:	je     15008 <ftp_loop_internal+0x1788>
   14fd6:	mov    rax,QWORD PTR [rsp+0xc0]
   14fde:	test   rax,rax
   14fe1:	je     15008 <ftp_loop_internal+0x1788>
   14fe3:	sub    rdx,rcx
   14fe6:	cmp    rax,rdx
   14fe9:	jne    15008 <ftp_loop_internal+0x1788>
   14feb:	cmp    BYTE PTR [rip+0x752c9],0x0        # 8a2bb <opt+0x23b>
   14ff2:	jne    165d7 <ftp_loop_internal+0x2d57>
   14ff8:	mov    rax,QWORD PTR [rsp+0x38]
   14ffd:	mov    QWORD PTR [rsp+0xc0],rax
   15005:	nop    DWORD PTR [rax]
   15008:	cmp    BYTE PTR [rip+0x751f3],0x0        # 8a202 <opt+0x182>
   1500f:	je     15b68 <ftp_loop_internal+0x22e8>
   15015:	mov    rbp,QWORD PTR [rip+0x75424]        # 8a440 <output_stream>
   1501c:	test   rbp,rbp
   1501f:	je     151d0 <ftp_loop_internal+0x1950>
   15025:	test   BYTE PTR [rbx+0x4],0x8
   15029:	jne    151d0 <ftp_loop_internal+0x1950>
   1502f:	cmp    QWORD PTR [rsp+0x38],0x0
   15035:	jne    15bb8 <ftp_loop_internal+0x2338>
   1503b:	mov    rdi,QWORD PTR [rsp+0xc0]
   15043:	test   rdi,rdi
   15046:	jne    154a0 <ftp_loop_internal+0x1c20>
   1504c:	cmp    DWORD PTR [r12+0x8],0x3
   15052:	jne    15062 <ftp_loop_internal+0x17e2>
   15054:	cmp    BYTE PTR [rsp+0x85],0x0
   1505c:	jne    15590 <ftp_loop_internal+0x1d10>
   15062:	test   r13b,r13b
   15065:	je     153c0 <ftp_loop_internal+0x1b40>
   1506b:	cmp    BYTE PTR [rsp+0x86],0x0
   15073:	mov    eax,0x2
   15078:	je     153c0 <ftp_loop_internal+0x1b40>
   1507e:	lea    rdx,[rbx+0x10]
   15082:	mov    rdi,QWORD PTR [rbx+0x28]
   15086:	mov    r8,QWORD PTR [rsp+0x18]
   1508b:	mov    QWORD PTR [rsp+0xc8],0x0
   15097:	mov    rcx,QWORD PTR [rsp+0xc0]
   1509f:	push   QWORD PTR [rsp+0x28]
   150a3:	push   rax
   150a4:	push   rdx
   150a5:	mov    rsi,rcx
   150a8:	mov    rdx,rbp
   150ab:	sub    rsi,r8
   150ae:	test   rcx,rcx
   150b1:	cmovne rcx,rsi
   150b5:	lea    rax,[rsp+0xb8]
   150bd:	push   rax
   150be:	mov    esi,DWORD PTR [rsp+0x78]
   150c2:	lea    r9,[rsp+0xe8]
   150ca:	call   346b0 <fd_read_body>
   150cf:	add    rsp,0x20
   150d3:	xor    edi,edi
   150d5:	mov    r13d,eax
   150d8:	call   cbf0 <time@plt>
   150dd:	mov    rdi,rax
   150e0:	call   3bd30 <datetime_str>
   150e5:	movsd  xmm0,QWORD PTR [rbx+0x10]
   150ea:	mov    rdi,QWORD PTR [rsp+0xc8]
   150f2:	mov    QWORD PTR [rsp+0x88],rax
   150fa:	call   351d0 <retr_rate>
   150ff:	movsd  xmm0,QWORD PTR [rip+0x75341]        # 8a448 <total_download_time>
   15107:	addsd  xmm0,QWORD PTR [rbx+0x10]
   1510c:	cmp    BYTE PTR [rip+0x750a5],0x0        # 8a1b8 <opt+0x138>
   15113:	mov    r15,rax
   15116:	movsd  QWORD PTR [rip+0x7532a],xmm0        # 8a448 <total_download_time>
   1511e:	jne    15be0 <ftp_loop_internal+0x2360>
   15124:	mov    edi,DWORD PTR [rsp+0x9c]
   1512b:	call   f400 <fd_close>
   15130:	cmp    QWORD PTR [rip+0x75308],0x0        # 8a440 <output_stream>
   15138:	je     15210 <ftp_loop_internal+0x1990>
   1513e:	test   BYTE PTR [rbx+0x4],0x8
   15142:	jne    15210 <ftp_loop_internal+0x1990>
   15148:	cmp    r13d,0xfffffffe
   1514c:	je     16450 <ftp_loop_internal+0x2bd0>
   15152:	cmp    QWORD PTR [rsp+0x28],0x0
   15158:	je     154b8 <ftp_loop_internal+0x1c38>
   1515e:	cmp    r13d,0xfffffffd
   15162:	jne    154b8 <ftp_loop_internal+0x1c38>
   15168:	call   c740 <__errno_location@plt>
   1516d:	mov    edi,DWORD PTR [rax]
   1516f:	call   c540 <strerror@plt>
   15174:	mov    r15,QWORD PTR [rbx+0x28]
   15178:	mov    edx,0x5
   1517d:	xor    edi,edi
   1517f:	lea    rsi,[rip+0x47292]        # 5c418 <_IO_stdin_used+0x1418>
   15186:	mov    r13,rax
   15189:	call   c780 <dcgettext@plt>
   1518e:	mov    rdx,r15
   15191:	mov    rcx,r13
   15194:	mov    edi,0x1
   15199:	mov    rsi,rax
   1519c:	xor    eax,eax
   1519e:	mov    r15d,0x36
   151a4:	call   2e0a0 <logprintf>
   151a9:	mov    edi,DWORD PTR [rsp+0x98]
   151b0:	call   f400 <fd_close>
   151b5:	mov    DWORD PTR [rbx+0x8],0xffffffff
   151bc:	mov    edi,DWORD PTR [rsp+0x58]
   151c0:	call   f400 <fd_close>
   151c5:	mov    edx,DWORD PTR [rbx+0x8]
   151c8:	mov    eax,DWORD PTR [rbx]
   151ca:	jmp    146aa <ftp_loop_internal+0xe2a>
   151cf:	nop
   151d0:	mov    rdi,QWORD PTR [rbx+0x28]
   151d4:	call   374f0 <mkalldirs>
   151d9:	mov    r10d,DWORD PTR [rip+0x750e0]        # 8a2c0 <opt+0x240>
   151e0:	test   r10d,r10d
   151e3:	jne    15580 <ftp_loop_internal+0x1d00>
   151e9:	cmp    QWORD PTR [rsp+0x18],0x0
   151ef:	mov    rdi,QWORD PTR [rbx+0x28]
   151f3:	je     15220 <ftp_loop_internal+0x19a0>
   151f5:	test   BYTE PTR [rbx+0x4],0x8
   151f9:	jne    15220 <ftp_loop_internal+0x19a0>
   151fb:	lea    rsi,[rip+0x468b0]        # 5bab2 <_IO_stdin_used+0xab2>
   15202:	call   c0f0 <fopen@plt>
   15207:	mov    rbp,rax
   1520a:	jmp    1525f <ftp_loop_internal+0x19df>
   1520c:	nop    DWORD PTR [rax+0x0]
   15210:	mov    rdi,rbp
   15213:	call   c8b0 <fclose@plt>
   15218:	jmp    15148 <ftp_loop_internal+0x18c8>
   1521d:	nop    DWORD PTR [rax]
   15220:	cmp    BYTE PTR [rip+0x74e8c],0x0        # 8a0b3 <opt+0x33>
   15227:	je     15250 <ftp_loop_internal+0x19d0>
   15229:	xor    esi,esi
   1522b:	call   3bed0 <file_exists_p>
   15230:	mov    rdi,QWORD PTR [rbx+0x28]
   15234:	test   al,al
   15236:	je     15250 <ftp_loop_internal+0x19d0>
   15238:	call   c120 <unlink@plt>
   1523d:	test   eax,eax
   1523f:	js     166f0 <ftp_loop_internal+0x2e70>
   15245:	mov    rdi,QWORD PTR [rbx+0x28]
   15249:	nop    DWORD PTR [rax+0x0]
   15250:	lea    rsi,[rip+0x46052]        # 5b2a9 <_IO_stdin_used+0x2a9>
   15257:	call   c0f0 <fopen@plt>
   1525c:	mov    rbp,rax
   1525f:	test   rbp,rbp
   15262:	jne    1502f <ftp_loop_internal+0x17af>
   15268:	call   c740 <__errno_location@plt>
   1526d:	mov    r15d,0x13
   15273:	mov    edi,DWORD PTR [rax]
   15275:	call   c540 <strerror@plt>
   1527a:	mov    rdx,QWORD PTR [rbx+0x28]
   1527e:	mov    edi,0x1
   15283:	lea    rsi,[rip+0x535bb]        # 68845 <primes.6089+0x2765>
   1528a:	mov    rcx,rax
   1528d:	xor    eax,eax
   1528f:	call   2e0a0 <logprintf>
   15294:	mov    edi,DWORD PTR [rsp+0x98]
   1529b:	call   f400 <fd_close>
   152a0:	mov    DWORD PTR [rbx+0x8],0xffffffff
   152a7:	mov    edi,DWORD PTR [rsp+0x58]
   152ab:	call   f400 <fd_close>
   152b0:	mov    edi,DWORD PTR [rsp+0x9c]
   152b7:	call   f400 <fd_close>
   152bc:	mov    edx,DWORD PTR [rbx+0x8]
   152bf:	mov    eax,DWORD PTR [rbx]
   152c1:	jmp    146aa <ftp_loop_internal+0xe2a>
   152c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   152d0:	cmp    eax,0x2c
   152d3:	je     14bb9 <ftp_loop_internal+0x1339>
   152d9:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   152de:	xchg   ax,ax
   152e0:	lea    rsi,[rip+0x506e8]        # 659cf <yy_accept+0x90f>
   152e7:	mov    edi,0x3
   152ec:	call   2de60 <logputs>
   152f1:	jmp    13dad <ftp_loop_internal+0x52d>
   152f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15300:	mov    eax,DWORD PTR [rbx+0x4]
   15303:	mov    QWORD PTR [rsp+0x10],rdi
   15308:	mov    rdi,QWORD PTR [rbx+0x28]
   1530c:	and    eax,0xc
   1530f:	cmp    eax,0x8
   15312:	je     1393e <ftp_loop_internal+0xbe>
   15318:	call   4b5b0 <quote>
   1531d:	mov    edx,0x5
   15322:	xor    edi,edi
   15324:	lea    rsi,[rip+0x4694d]        # 5bc78 <_IO_stdin_used+0xc78>
   1532b:	mov    r12,rax
   1532e:	mov    r15d,0x19
   15334:	call   c780 <dcgettext@plt>
   15339:	mov    rdx,r12
   1533c:	xor    edi,edi
   1533e:	mov    rsi,rax
   15341:	xor    eax,eax
   15343:	call   2e0a0 <logprintf>
   15348:	jmp    140a6 <ftp_loop_internal+0x826>
   1534d:	nop    DWORD PTR [rax]
   15350:	mov    rsi,rdi
   15353:	mov    rdx,QWORD PTR [rsp+0xb8]
   1535b:	mov    edi,DWORD PTR [rsp+0x98]
   15362:	call   19a50 <ftp_login>
   15367:	mov    r15d,eax
   1536a:	jmp    13dfa <ftp_loop_internal+0x57a>
   1536f:	nop
   15370:	mov    rsi,QWORD PTR [rsp+0x10]
   15375:	lea    rdx,[rsp+0x140]
   1537d:	mov    edi,0x1
   15382:	call   c350 <__xstat@plt>
   15387:	test   eax,eax
   15389:	jne    14302 <ftp_loop_internal+0xa82>
   1538f:	mov    eax,DWORD PTR [rsp+0x158]
   15396:	and    eax,0xf000
   1539b:	cmp    eax,0x8000
   153a0:	jne    14302 <ftp_loop_internal+0xa82>
   153a6:	mov    rax,QWORD PTR [rsp+0x170]
   153ae:	mov    QWORD PTR [rsp+0x18],rax
   153b3:	jmp    139e3 <ftp_loop_internal+0x163>
   153b8:	nop    DWORD PTR [rax+rax*1+0x0]
   153c0:	xor    eax,eax
   153c2:	jmp    1507e <ftp_loop_internal+0x17fe>
   153c7:	nop    WORD PTR [rax+rax*1+0x0]
   153d0:	xor    edi,edi
   153d2:	call   cbf0 <time@plt>
   153d7:	mov    rdi,rax
   153da:	call   3bd30 <datetime_str>
   153df:	mov    r13,rax
   153e2:	lea    rax,[rip+0x74c97]        # 8a080 <opt>
   153e9:	mov    edx,DWORD PTR [rax]
   153eb:	test   edx,edx
   153ed:	jne    15630 <ftp_loop_internal+0x1db0>
   153f3:	mov    QWORD PTR [rsp+0x18],0x0
   153fc:	jmp    13a06 <ftp_loop_internal+0x186>
   15401:	nop    DWORD PTR [rax+0x0]
   15408:	cmp    BYTE PTR [rip+0x74ea9],0x0        # 8a2b8 <opt+0x238>
   1540f:	jne    147b1 <ftp_loop_internal+0xf31>
   15415:	xor    edi,edi
   15417:	mov    edx,0x5
   1541c:	lea    rsi,[rip+0x464ec]        # 5b90f <_IO_stdin_used+0x90f>
   15423:	call   c780 <dcgettext@plt>
   15428:	xor    edi,edi
   1542a:	mov    rsi,rax
   1542d:	call   2de60 <logputs>
   15432:	jmp    147b1 <ftp_loop_internal+0xf31>
   15437:	nop    WORD PTR [rax+rax*1+0x0]
   15440:	xor    edi,edi
   15442:	mov    edx,0x5
   15447:	lea    rsi,[rip+0x51f42]        # 67390 <primes.6089+0x12b0>
   1544e:	call   c780 <dcgettext@plt>
   15453:	xor    edi,edi
   15455:	mov    rsi,rax
   15458:	call   2de60 <logputs>
   1545d:	jmp    13c40 <ftp_loop_internal+0x3c0>
   15462:	nop    WORD PTR [rax+rax*1+0x0]
   15468:	cmp    QWORD PTR [rsp+0x18],0x0
   1546e:	jne    15ed8 <ftp_loop_internal+0x2658>
   15474:	mov    rsi,QWORD PTR [r12+0x48]
   15479:	mov    edi,0x7
   1547e:	call   4b2b0 <quotearg_style>
   15483:	lea    rsi,[rip+0x465ea]        # 5ba74 <_IO_stdin_used+0xa74>
   1548a:	xor    edi,edi
   1548c:	mov    rdx,rax
   1548f:	xor    eax,eax
   15491:	call   2e0a0 <logprintf>
   15496:	jmp    147dc <ftp_loop_internal+0xf5c>
   1549b:	nop    DWORD PTR [rax+rax*1+0x0]
   154a0:	mov    rsi,QWORD PTR [rsp+0x18]
   154a5:	xor    edx,edx
   154a7:	call   135f0 <print_length>
   154ac:	jmp    1504c <ftp_loop_internal+0x17cc>
   154b1:	nop    DWORD PTR [rax+0x0]
   154b8:	cmp    r13d,0xffffffff
   154bc:	je     15fba <ftp_loop_internal+0x273a>
   154c2:	mov    edi,DWORD PTR [rsp+0x58]
   154c6:	call   f400 <fd_close>
   154cb:	mov    edi,DWORD PTR [rsp+0x98]
   154d2:	lea    rsi,[rsp+0xa8]
   154da:	call   198c0 <ftp_response>
   154df:	cmp    eax,0x7
   154e2:	jne    140d2 <ftp_loop_internal+0x852>
   154e8:	mov    rax,QWORD PTR [rsp+0xa8]
   154f0:	lea    rbp,[rsp+0xd8]
   154f8:	mov    QWORD PTR [rsp+0xd8],rax
   15500:	jmp    15514 <ftp_loop_internal+0x1c94>
   15502:	nop    WORD PTR [rax+rax*1+0x0]
   15508:	add    rax,0x1
   1550c:	mov    QWORD PTR [rsp+0xd8],rax
   15514:	movzx  edx,BYTE PTR [rax]
   15517:	test   dl,dl
   15519:	je     15af0 <ftp_loop_internal+0x2270>
   1551f:	cmp    dl,0x28
   15522:	jne    15508 <ftp_loop_internal+0x1c88>
   15524:	test   dl,dl
   15526:	je     15af0 <ftp_loop_internal+0x2270>
   1552c:	lea    rdi,[rax+0x1]
   15530:	mov    edx,0xa
   15535:	mov    rsi,rbp
   15538:	mov    QWORD PTR [rsp+0xd8],rdi
   15540:	call   c5a0 <strtol@plt>
   15545:	mov    rdi,QWORD PTR [rsp+0xd8]
   1554d:	mov    QWORD PTR [rsp+0x50],rax
   15552:	movsx  eax,BYTE PTR [rdi]
   15555:	test   al,al
   15557:	je     15af0 <ftp_loop_internal+0x2270>
   1555d:	cmp    al,0xd
   1555f:	jg     159f0 <ftp_loop_internal+0x2170>
   15565:	cmp    al,0x8
   15567:	jg     15ad0 <ftp_loop_internal+0x2250>
   1556d:	mov    rax,QWORD PTR [rsp+0xd8]
   15575:	jmp    15514 <ftp_loop_internal+0x1c94>
   15577:	nop    WORD PTR [rax+rax*1+0x0]
   15580:	mov    rdi,QWORD PTR [rbx+0x28]
   15584:	call   36240 <rotate_backups>
   15589:	jmp    151e9 <ftp_loop_internal+0x1969>
   1558e:	xchg   ax,ax
   15590:	cmp    BYTE PTR [rip+0x74dc2],0x0        # 8a359 <opt+0x2d9>
   15597:	mov    rsi,QWORD PTR [r12+0x10]
   1559c:	jne    160cf <ftp_loop_internal+0x284f>
   155a2:	mov    edi,DWORD PTR [rsp+0x58]
   155a6:	xor    edx,edx
   155a8:	call   416c0 <ssl_connect_wget>
   155ad:	test   al,al
   155af:	je     166c5 <ftp_loop_internal+0x2e45>
   155b5:	mov    rsi,QWORD PTR [r12+0x10]
   155ba:	mov    edi,DWORD PTR [rsp+0x58]
   155be:	call   41a80 <ssl_check_certificate>
   155c3:	test   al,al
   155c5:	jne    15062 <ftp_loop_internal+0x17e2>
   155cb:	mov    edi,DWORD PTR [rsp+0x98]
   155d2:	call   f400 <fd_close>
   155d7:	mov    edi,DWORD PTR [rsp+0x58]
   155db:	call   f400 <fd_close>
   155e0:	cmp    QWORD PTR [rip+0x74e58],0x0        # 8a440 <output_stream>
   155e8:	je     155f0 <ftp_loop_internal+0x1d70>
   155ea:	test   BYTE PTR [rbx+0x4],0x8
   155ee:	je     155f8 <ftp_loop_internal+0x1d78>
   155f0:	mov    rdi,rbp
   155f3:	call   c8b0 <fclose@plt>
   155f8:	mov    edx,DWORD PTR [rbx+0x8]
   155fb:	mov    eax,DWORD PTR [rbx]
   155fd:	jmp    14f8f <ftp_loop_internal+0x170f>
   15602:	nop    WORD PTR [rax+rax*1+0x0]
   15608:	mov    edi,0x7
   1560d:	call   4b2b0 <quotearg_style>
   15612:	lea    rsi,[rip+0x4639b]        # 5b9b4 <_IO_stdin_used+0x9b4>
   15619:	xor    edi,edi
   1561b:	mov    rdx,rax
   1561e:	xor    eax,eax
   15620:	call   2e0a0 <logprintf>
   15625:	mov    rsi,QWORD PTR [r12+0x48]
   1562a:	jmp    14a3f <ftp_loop_internal+0x11bf>
   1562f:	nop
   15630:	mov    esi,0x1
   15635:	mov    rdi,r12
   15638:	lea    r15,[rsp+0x1d0]
   15640:	call   38230 <url_string>
   15645:	mov    BYTE PTR [rsp+0x1d8],0x0
   1564d:	mov    QWORD PTR [rsp+0x18],0x0
   15656:	mov    rbp,rax
   15659:	movabs rax,0x2020202020202020
   15663:	mov    QWORD PTR [rsp+0x1d0],rax
   1566b:	jmp    14264 <ftp_loop_internal+0x9e4>
   15670:	lea    rsi,[rip+0x4635c]        # 5b9d3 <_IO_stdin_used+0x9d3>
   15677:	xor    edi,edi
   15679:	call   2de60 <logputs>
   1567e:	jmp    14e06 <ftp_loop_internal+0x1586>
   15683:	lea    rsi,[rip+0x46390]        # 5ba1a <_IO_stdin_used+0xa1a>
   1568a:	xor    edi,edi
   1568c:	call   2de60 <logputs>
   15691:	jmp    14e6e <ftp_loop_internal+0x15ee>
   15696:	xor    edi,edi
   15698:	mov    edx,0x5
   1569d:	lea    rsi,[rip+0x51cec]        # 67390 <primes.6089+0x12b0>
   156a4:	call   c780 <dcgettext@plt>
   156a9:	xor    edi,edi
   156ab:	mov    rsi,rax
   156ae:	call   2de60 <logputs>
   156b3:	jmp    14815 <ftp_loop_internal+0xf95>
   156b8:	xor    eax,eax
   156ba:	lea    rdi,[rip+0x468d7]        # 5bf98 <_IO_stdin_used+0xf98>
   156c1:	call   2e250 <debug_logprintf>
   156c6:	cmp    DWORD PTR [rbx+0x18],0x1
   156ca:	je     149d1 <ftp_loop_internal+0x1151>
   156d0:	mov    DWORD PTR [rsp+0x58],0x2
   156d8:	jmp    13be4 <ftp_loop_internal+0x364>
   156dd:	nop    DWORD PTR [rax]
   156e0:	lea    rsi,[rip+0x502e8]        # 659cf <yy_accept+0x90f>
   156e7:	xor    edi,edi
   156e9:	call   2de60 <logputs>
   156ee:	mov    edx,0x5
   156f3:	lea    rsi,[rip+0x461c0]        # 5b8ba <_IO_stdin_used+0x8ba>
   156fa:	xor    edi,edi
   156fc:	call   c780 <dcgettext@plt>
   15701:	mov    edi,0x1
   15706:	mov    rsi,rax
   15709:	call   2de60 <logputs>
   1570e:	mov    edi,DWORD PTR [rsp+0x98]
   15715:	call   f400 <fd_close>
   1571a:	and    DWORD PTR [rbx],0xfffffffd
   1571d:	mov    DWORD PTR [rbx+0x8],0xffffffff
   15724:	jmp    1408a <ftp_loop_internal+0x80a>
   15729:	movzx  eax,BYTE PTR [rip+0x74b88]        # 8a2b8 <opt+0x238>
   15730:	mov    BYTE PTR [rsp+0x85],al
   15737:	test   al,al
   15739:	je     15f16 <ftp_loop_internal+0x2696>
   1573f:	cmp    BYTE PTR [rsp+0x97],0x0
   15747:	je     15755 <ftp_loop_internal+0x1ed5>
   15749:	cmp    DWORD PTR [r12+0x8],0x3
   1574f:	je     1611e <ftp_loop_internal+0x289e>
   15755:	mov    BYTE PTR [rsp+0x85],0x0
   1575d:	mov    edi,DWORD PTR [rsp+0x98]
   15764:	lea    rdx,[rbx+0x1c]
   15768:	lea    rsi,[rbx+0x18]
   1576c:	call   1b180 <ftp_syst>
   15771:	cmp    eax,0xe
   15774:	je     14b88 <ftp_loop_internal+0x1308>
   1577a:	cmp    eax,0xf
   1577d:	jne    15cf0 <ftp_loop_internal+0x2470>
   15783:	lea    rsi,[rip+0x50245]        # 659cf <yy_accept+0x90f>
   1578a:	xor    edi,edi
   1578c:	call   2de60 <logputs>
   15791:	lea    rsi,[rip+0x46668]        # 5be00 <_IO_stdin_used+0xe00>
   15798:	xor    edi,edi
   1579a:	mov    edx,0x5
   1579f:	call   c780 <dcgettext@plt>
   157a4:	mov    edi,0x1
   157a9:	mov    rsi,rax
   157ac:	call   2de60 <logputs>
   157b1:	mov    eax,DWORD PTR [rbx+0x18]
   157b4:	test   eax,eax
   157b6:	je     160a6 <ftp_loop_internal+0x2826>
   157bc:	cmp    eax,0x1
   157bf:	jne    157d1 <ftp_loop_internal+0x1f51>
   157c1:	cmp    BYTE PTR [rip+0x74af3],0x0        # 8a2bb <opt+0x23b>
   157c8:	jne    165ea <ftp_loop_internal+0x2d6a>
   157ce:	or     DWORD PTR [rbx],0x14
   157d1:	cmp    BYTE PTR [rip+0x74ae0],0x0        # 8a2b8 <opt+0x238>
   157d8:	je     16091 <ftp_loop_internal+0x2811>
   157de:	mov    edi,DWORD PTR [rsp+0x98]
   157e5:	lea    rsi,[rbx+0x20]
   157e9:	call   1b3d0 <ftp_pwd>
   157ee:	cmp    eax,0xe
   157f1:	je     14b88 <ftp_loop_internal+0x1308>
   157f7:	cmp    eax,0xf
   157fa:	jne    15e12 <ftp_loop_internal+0x2592>
   15800:	mov    rdi,QWORD PTR [rbx+0x20]
   15804:	call   4bdc0 <rpl_free>
   15809:	mov    QWORD PTR [rbx+0x20],0x0
   15811:	lea    rdi,[rip+0x46381]        # 5bb99 <_IO_stdin_used+0xb99>
   15818:	call   4ba50 <xstrdup>
   1581d:	mov    QWORD PTR [rbx+0x20],rax
   15821:	cmp    BYTE PTR [rip+0x74a90],0x0        # 8a2b8 <opt+0x238>
   15828:	je     161de <ftp_loop_internal+0x295e>
   1582e:	mov    rdi,QWORD PTR [r12+0x28]
   15833:	call   1b5f0 <ftp_process_type>
   15838:	cmp    BYTE PTR [rip+0x74a79],0x0        # 8a2b8 <opt+0x238>
   1583f:	movsx  r13d,al
   15843:	je     161c6 <ftp_loop_internal+0x2946>
   15849:	mov    edi,DWORD PTR [rsp+0x98]
   15850:	mov    esi,r13d
   15853:	call   1ac10 <ftp_type>
   15858:	cmp    eax,0xe
   1585b:	je     14b88 <ftp_loop_internal+0x1308>
   15861:	ja     15ec7 <ftp_loop_internal+0x2647>
   15867:	cmp    eax,0x7
   1586a:	jne    15e70 <ftp_loop_internal+0x25f0>
   15870:	cmp    BYTE PTR [rip+0x74a41],0x0        # 8a2b8 <opt+0x238>
   15877:	jne    13af8 <ftp_loop_internal+0x278>
   1587d:	xor    edi,edi
   1587f:	mov    edx,0x5
   15884:	lea    rsi,[rip+0x460ac]        # 5b937 <_IO_stdin_used+0x937>
   1588b:	call   c780 <dcgettext@plt>
   15890:	xor    edi,edi
   15892:	mov    rsi,rax
   15895:	call   2de60 <logputs>
   1589a:	jmp    13af8 <ftp_loop_internal+0x278>
   1589f:	nop
   158a0:	lea    rsi,[rip+0x50128]        # 659cf <yy_accept+0x90f>
   158a7:	xor    edi,edi
   158a9:	call   2de60 <logputs>
   158ae:	mov    edx,0x5
   158b3:	lea    rsi,[rip+0x45fca]        # 5b884 <_IO_stdin_used+0x884>
   158ba:	jmp    146e3 <ftp_loop_internal+0xe63>
   158bf:	lea    rsi,[rip+0x50109]        # 659cf <yy_accept+0x90f>
   158c6:	xor    edi,edi
   158c8:	call   2de60 <logputs>
   158cd:	mov    edx,0x5
   158d2:	lea    rsi,[rip+0x45fc6]        # 5b89f <_IO_stdin_used+0x89f>
   158d9:	jmp    146e3 <ftp_loop_internal+0xe63>
   158de:	lea    rsi,[rip+0x500ea]        # 659cf <yy_accept+0x90f>
   158e5:	xor    edi,edi
   158e7:	call   2de60 <logputs>
   158ec:	mov    edx,0x5
   158f1:	lea    rsi,[rip+0x46720]        # 5c018 <_IO_stdin_used+0x1018>
   158f8:	xor    edi,edi
   158fa:	call   c780 <dcgettext@plt>
   158ff:	mov    edi,0x1
   15904:	mov    rsi,rax
   15907:	call   2de60 <logputs>
   1590c:	mov    edx,DWORD PTR [rbx+0x8]
   1590f:	jmp    146a8 <ftp_loop_internal+0xe28>
   15914:	lea    rsi,[rip+0x500b4]        # 659cf <yy_accept+0x90f>
   1591b:	xor    edi,edi
   1591d:	call   2de60 <logputs>
   15922:	mov    edx,0x5
   15927:	lea    rsi,[rip+0x460c1]        # 5b9ef <_IO_stdin_used+0x9ef>
   1592e:	jmp    158f8 <ftp_loop_internal+0x2078>
   15930:	lea    rsi,[rip+0x50098]        # 659cf <yy_accept+0x90f>
   15937:	xor    edi,edi
   15939:	call   2de60 <logputs>
   1593e:	call   c740 <__errno_location@plt>
   15943:	mov    edi,DWORD PTR [rax]
   15945:	call   c540 <strerror@plt>
   1594a:	xor    edi,edi
   1594c:	mov    edx,0x5
   15951:	lea    rsi,[rip+0x460ea]        # 5ba42 <_IO_stdin_used+0xa42>
   15958:	mov    r13,rax
   1595b:	call   c780 <dcgettext@plt>
   15960:	mov    rdx,r13
   15963:	mov    edi,0x1
   15968:	mov    rsi,rax
   1596b:	xor    eax,eax
   1596d:	call   2e0a0 <logprintf>
   15972:	mov    edi,DWORD PTR [rsp+0x58]
   15976:	call   f400 <fd_close>
   1597b:	jmp    146a5 <ftp_loop_internal+0xe25>
   15980:	lea    rsi,[rip+0x50048]        # 659cf <yy_accept+0x90f>
   15987:	xor    edi,edi
   15989:	call   2de60 <logputs>
   1598e:	mov    edx,0x5
   15993:	lea    rsi,[rip+0x460ba]        # 5ba54 <_IO_stdin_used+0xa54>
   1599a:	jmp    14669 <ftp_loop_internal+0xde9>
   1599f:	lea    rsi,[rip+0x50029]        # 659cf <yy_accept+0x90f>
   159a6:	xor    edi,edi
   159a8:	call   2de60 <logputs>
   159ad:	call   c740 <__errno_location@plt>
   159b2:	mov    edi,DWORD PTR [rax]
   159b4:	call   c540 <strerror@plt>
   159b9:	lea    rsi,[rip+0x46076]        # 5ba36 <_IO_stdin_used+0xa36>
   159c0:	mov    edi,0x1
   159c5:	mov    rdx,rax
   159c8:	xor    eax,eax
   159ca:	call   2e0a0 <logprintf>
   159cf:	mov    edi,DWORD PTR [rsp+0x98]
   159d6:	call   f400 <fd_close>
   159db:	mov    DWORD PTR [rbx+0x8],0xffffffff
   159e2:	jmp    14690 <ftp_loop_internal+0xe10>
   159e7:	nop    WORD PTR [rax+rax*1+0x0]
   159f0:	cmp    al,0x20
   159f2:	je     15ad0 <ftp_loop_internal+0x2250>
   159f8:	lea    edx,[rax-0x41]
   159fb:	cmp    edx,0x19
   159fe:	ja     15a03 <ftp_loop_internal+0x2183>
   15a00:	add    eax,0x20
   15a03:	cmp    eax,0x62
   15a06:	jne    1556d <ftp_loop_internal+0x1ced>
   15a0c:	mov    edx,0x4
   15a11:	lea    rsi,[rip+0x460c4]        # 5badc <_IO_stdin_used+0xadc>
   15a18:	call   433b0 <c_strncasecmp>
   15a1d:	test   eax,eax
   15a1f:	jne    1556d <ftp_loop_internal+0x1ced>
   15a25:	mov    rdi,QWORD PTR [rsp+0xa8]
   15a2d:	cmp    BYTE PTR [rdi],0x32
   15a30:	jne    162a9 <ftp_loop_internal+0x2a29>
   15a36:	call   4bdc0 <rpl_free>
   15a3b:	mov    QWORD PTR [rsp+0xa8],0x0
   15a47:	cmp    r13d,0xffffffff
   15a4b:	je     16299 <ftp_loop_internal+0x2a19>
   15a51:	test   BYTE PTR [rsp+0x8],0x10
   15a56:	je     15c10 <ftp_loop_internal+0x2390>
   15a5c:	test   BYTE PTR [rbx+0x4],0x8
   15a60:	je     148b9 <ftp_loop_internal+0x1039>
   15a66:	cmp    BYTE PTR [rip+0x7484b],0x0        # 8a2b8 <opt+0x238>
   15a6d:	jne    15c30 <ftp_loop_internal+0x23b0>
   15a73:	mov    eax,DWORD PTR [rbx]
   15a75:	test   al,0x10
   15a77:	jne    16200 <ftp_loop_internal+0x2980>
   15a7d:	test   al,0x4
   15a7f:	je     15b00 <ftp_loop_internal+0x2280>
   15a81:	mov    rdx,QWORD PTR [rsp+0xc8]
   15a89:	cmp    rdx,QWORD PTR [rsp+0x70]
   15a8e:	jg     165bc <ftp_loop_internal+0x2d3c>
   15a94:	and    eax,0xfffffffb
   15a97:	cmp    rdx,QWORD PTR [rsp+0x70]
   15a9c:	jge    16598 <ftp_loop_internal+0x2d18>
   15aa2:	or     eax,0x18
   15aa5:	cmp    BYTE PTR [rip+0x7480f],0x0        # 8a2bb <opt+0x23b>
   15aac:	mov    DWORD PTR [rbx],eax
   15aae:	je     14509 <ftp_loop_internal+0xc89>
   15ab4:	lea    rdi,[rip+0x46795]        # 5c250 <_IO_stdin_used+0x1250>
   15abb:	xor    eax,eax
   15abd:	call   2e250 <debug_logprintf>
   15ac2:	jmp    14509 <ftp_loop_internal+0xc89>
   15ac7:	nop    WORD PTR [rax+rax*1+0x0]
   15ad0:	add    rdi,0x1
   15ad4:	mov    QWORD PTR [rsp+0xd8],rdi
   15adc:	movsx  eax,BYTE PTR [rdi]
   15adf:	test   al,al
   15ae1:	jne    1555d <ftp_loop_internal+0x1cdd>
   15ae7:	nop    WORD PTR [rax+rax*1+0x0]
   15af0:	mov    QWORD PTR [rsp+0x50],0x0
   15af9:	jmp    15a25 <ftp_loop_internal+0x21a5>
   15afe:	xchg   ax,ax
   15b00:	cmp    BYTE PTR [rsp+0x96],0x0
   15b08:	je     16573 <ftp_loop_internal+0x2cf3>
   15b0e:	mov    rcx,QWORD PTR [rsp+0xc8]
   15b16:	or     eax,0x4
   15b19:	mov    DWORD PTR [rbx],eax
   15b1b:	mov    QWORD PTR [rsp+0x70],rcx
   15b20:	jmp    14509 <ftp_loop_internal+0xc89>
   15b25:	nop    DWORD PTR [rax]
   15b28:	mov    edi,0x3
   15b2d:	mov    r15d,0x2d
   15b33:	call   372b0 <scheme_disable>
   15b38:	mov    edx,0x5
   15b3d:	lea    rsi,[rip+0x4615c]        # 5bca0 <_IO_stdin_used+0xca0>
   15b44:	xor    edi,edi
   15b46:	call   c780 <dcgettext@plt>
   15b4b:	mov    edi,0x1
   15b50:	mov    rsi,rax
   15b53:	xor    eax,eax
   15b55:	call   2e0a0 <logprintf>
   15b5a:	mov    edx,DWORD PTR [rbx+0x8]
   15b5d:	mov    eax,DWORD PTR [rbx]
   15b5f:	jmp    146aa <ftp_loop_internal+0xe2a>
   15b64:	nop    DWORD PTR [rax+0x0]
   15b68:	mov    edi,DWORD PTR [rsp+0x9c]
   15b6f:	call   ec00 <accept_connection>
   15b74:	mov    DWORD PTR [rsp+0x58],eax
   15b78:	test   eax,eax
   15b7a:	jns    15015 <ftp_loop_internal+0x1795>
   15b80:	call   c740 <__errno_location@plt>
   15b85:	mov    r15d,0x3
   15b8b:	mov    edi,DWORD PTR [rax]
   15b8d:	call   c540 <strerror@plt>
   15b92:	lea    rsi,[rip+0x45f0d]        # 5baa6 <_IO_stdin_used+0xaa6>
   15b99:	mov    edi,0x1
   15b9e:	mov    rdx,rax
   15ba1:	xor    eax,eax
   15ba3:	call   2e0a0 <logprintf>
   15ba8:	mov    edx,DWORD PTR [rbx+0x8]
   15bab:	mov    eax,DWORD PTR [rbx]
   15bad:	jmp    146aa <ftp_loop_internal+0xe2a>
   15bb2:	nop    WORD PTR [rax+rax*1+0x0]
   15bb8:	mov    r15,QWORD PTR [rsp+0x38]
   15bbd:	mov    rsi,QWORD PTR [rsp+0x18]
   15bc2:	mov    edx,0x1
   15bc7:	mov    rdi,r15
   15bca:	call   135f0 <print_length>
   15bcf:	mov    QWORD PTR [rsp+0xc0],r15
   15bd7:	jmp    1504c <ftp_loop_internal+0x17cc>
   15bdc:	nop    DWORD PTR [rax+0x0]
   15be0:	mov    rdx,rbp
   15be3:	xor    esi,esi
   15be5:	mov    rdi,r12
   15be8:	call   3b220 <set_file_metadata>
   15bed:	jmp    15124 <ftp_loop_internal+0x18a4>
   15bf2:	nop    WORD PTR [rax+rax*1+0x0]
   15bf8:	xor    eax,eax
   15bfa:	lea    rdi,[rip+0x45d53]        # 5b954 <_IO_stdin_used+0x954>
   15c01:	call   2e250 <debug_logprintf>
   15c06:	movzx  eax,BYTE PTR [r13+0x0]
   15c0b:	jmp    13b2e <ftp_loop_internal+0x2ae>
   15c10:	mov    edi,DWORD PTR [rsp+0x98]
   15c17:	call   f400 <fd_close>
   15c1c:	mov    DWORD PTR [rbx+0x8],0xffffffff
   15c23:	jmp    15a5c <ftp_loop_internal+0x21dc>
   15c28:	nop    DWORD PTR [rax+rax*1+0x0]
   15c30:	mov    rdi,QWORD PTR [rbx+0x28]
   15c34:	call   374f0 <mkalldirs>
   15c39:	mov    rdi,QWORD PTR [rbx+0x28]
   15c3d:	lea    rsi,[rip+0x502fc]        # 65f40 <yy_accept+0xe80>
   15c44:	call   c0f0 <fopen@plt>
   15c49:	mov    rbp,rax
   15c4c:	test   rax,rax
   15c4f:	je     15eeb <ftp_loop_internal+0x266b>
   15c55:	lea    r13,[rsp+0xd8]
   15c5d:	lea    r15,[rsp+0xd0]
   15c65:	mov    QWORD PTR [rsp+0xd0],0x0
   15c71:	mov    QWORD PTR [rsp+0xd8],0x0
   15c7d:	nop    DWORD PTR [rax]
   15c80:	mov    rcx,rbp
   15c83:	mov    edx,0xa
   15c88:	mov    rsi,r13
   15c8b:	mov    rdi,r15
   15c8e:	call   be90 <__getdelim@plt>
   15c93:	test   rax,rax
   15c96:	jle    15e20 <ftp_loop_internal+0x25a0>
   15c9c:	sub    rax,0x1
   15ca0:	mov    rsi,QWORD PTR [rsp+0xd0]
   15ca8:	lea    rdx,[rsi+rax*1]
   15cac:	movzx  ecx,BYTE PTR [rdx]
   15caf:	cmp    cl,0xa
   15cb2:	je     15cb9 <ftp_loop_internal+0x2439>
   15cb4:	cmp    cl,0xd
   15cb7:	jne    15cce <ftp_loop_internal+0x244e>
   15cb9:	sub    rax,0x1
   15cbd:	mov    BYTE PTR [rdx],0x0
   15cc0:	cmp    rax,0xffffffffffffffff
   15cc4:	jne    15ca0 <ftp_loop_internal+0x2420>
   15cc6:	mov    rsi,QWORD PTR [rsp+0xd0]
   15cce:	mov    edi,0x7
   15cd3:	call   4b2b0 <quotearg_style>
   15cd8:	lea    rsi,[rip+0x4597c]        # 5b65b <_IO_stdin_used+0x65b>
   15cdf:	mov    edi,0x3
   15ce4:	mov    rdx,rax
   15ce7:	xor    eax,eax
   15ce9:	call   2e0a0 <logprintf>
   15cee:	jmp    15c80 <ftp_loop_internal+0x2400>
   15cf0:	cmp    eax,0x7
   15cf3:	jne    15e6b <ftp_loop_internal+0x25eb>
   15cf9:	cmp    BYTE PTR [rip+0x745b8],0x0        # 8a2b8 <opt+0x238>
   15d00:	jne    157b1 <ftp_loop_internal+0x1f31>
   15d06:	xor    edi,edi
   15d08:	mov    edx,0x5
   15d0d:	lea    rsi,[rip+0x45bfb]        # 5b90f <_IO_stdin_used+0x90f>
   15d14:	call   c780 <dcgettext@plt>
   15d19:	xor    edi,edi
   15d1b:	mov    rsi,rax
   15d1e:	call   2de60 <logputs>
   15d23:	jmp    157b1 <ftp_loop_internal+0x1f31>
   15d28:	nop    DWORD PTR [rax+rax*1+0x0]
   15d30:	lea    rdi,[rax+0x2]
   15d34:	call   4b850 <xmalloc>
   15d39:	mov    r15,QWORD PTR [rbx+0x20]
   15d3d:	mov    rcx,rax
   15d40:	jmp    13b90 <ftp_loop_internal+0x310>
   15d45:	nop    DWORD PTR [rax]
   15d48:	lea    rsi,[rip+0x45d49]        # 5ba98 <_IO_stdin_used+0xa98>
   15d4f:	xor    edi,edi
   15d51:	call   2de60 <logputs>
   15d56:	jmp    14848 <ftp_loop_internal+0xfc8>
   15d5b:	nop    DWORD PTR [rax+rax*1+0x0]
   15d60:	mov    edi,DWORD PTR [rbx+0x8]
   15d63:	cmp    edi,0xffffffff
   15d66:	je     14f5e <ftp_loop_internal+0x16de>
   15d6c:	lea    rbp,[rsp+0xe0]
   15d74:	mov    edx,0x1
   15d79:	mov    rsi,rbp
   15d7c:	call   ecd0 <socket_ip_address>
   15d81:	mov    QWORD PTR [rsp+0x60],rbp
   15d86:	mov    eax,DWORD PTR [rbx+0x4]
   15d89:	jmp    139c8 <ftp_loop_internal+0x148>
   15d8e:	xchg   ax,ax
   15d90:	mov    rdi,QWORD PTR [rsp+0x18]
   15d95:	call   3e8e0 <number_to_static_string>
   15d9a:	lea    rsi,[rip+0x45cc2]        # 5ba63 <_IO_stdin_used+0xa63>
   15da1:	xor    edi,edi
   15da3:	mov    rdx,rax
   15da6:	xor    eax,eax
   15da8:	call   2e0a0 <logprintf>
   15dad:	jmp    1461a <ftp_loop_internal+0xd9a>
   15db2:	nop    WORD PTR [rax+rax*1+0x0]
   15db8:	lea    rsi,[rip+0x45c4d]        # 5ba0c <_IO_stdin_used+0xa0c>
   15dbf:	xor    edi,edi
   15dc1:	call   2de60 <logputs>
   15dc6:	jmp    14967 <ftp_loop_internal+0x10e7>
   15dcb:	nop    DWORD PTR [rax+rax*1+0x0]
   15dd0:	lea    rsi,[rip+0x45bee]        # 5b9c5 <_IO_stdin_used+0x9c5>
   15dd7:	xor    edi,edi
   15dd9:	call   2de60 <logputs>
   15dde:	jmp    14567 <ftp_loop_internal+0xce7>
   15de3:	nop    DWORD PTR [rax+rax*1+0x0]
   15de8:	mov    edx,0x5
   15ded:	lea    rsi,[rip+0x46294]        # 5c088 <_IO_stdin_used+0x1088>
   15df4:	xor    edi,edi
   15df6:	call   c780 <dcgettext@plt>
   15dfb:	xor    edi,edi
   15dfd:	mov    rsi,rax
   15e00:	call   2de60 <logputs>
   15e05:	mov    BYTE PTR [rsp+0x86],0x1
   15e0d:	jmp    147b1 <ftp_loop_internal+0xf31>
   15e12:	cmp    eax,0x7
   15e15:	je     15821 <ftp_loop_internal+0x1fa1>
   15e1b:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   15e20:	mov    rdi,QWORD PTR [rsp+0xd0]
   15e28:	call   4bdc0 <rpl_free>
   15e2d:	mov    rdi,rbp
   15e30:	mov    QWORD PTR [rsp+0xd0],0x0
   15e3c:	call   c8b0 <fclose@plt>
   15e41:	jmp    15a73 <ftp_loop_internal+0x21f3>
   15e46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   15e50:	mov    edx,0x5
   15e55:	lea    rsi,[rip+0x51534]        # 67390 <primes.6089+0x12b0>
   15e5c:	xor    edi,edi
   15e5e:	call   c780 <dcgettext@plt>
   15e63:	mov    rdx,rax
   15e66:	jmp    14a8e <ftp_loop_internal+0x120e>
   15e6b:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   15e70:	cmp    eax,0xd
   15e73:	jne    16778 <ftp_loop_internal+0x2ef8>
   15e79:	lea    rsi,[rip+0x4fb4f]        # 659cf <yy_accept+0x90f>
   15e80:	xor    edi,edi
   15e82:	call   2de60 <logputs>
   15e87:	mov    edx,0x5
   15e8c:	lea    rsi,[rip+0x4607d]        # 5bf10 <_IO_stdin_used+0xf10>
   15e93:	xor    edi,edi
   15e95:	call   c780 <dcgettext@plt>
   15e9a:	mov    edx,r13d
   15e9d:	mov    edi,0x1
   15ea2:	mov    rsi,rax
   15ea5:	xor    eax,eax
   15ea7:	call   2e0a0 <logprintf>
   15eac:	mov    edi,DWORD PTR [rsp+0x98]
   15eb3:	call   f400 <fd_close>
   15eb8:	and    DWORD PTR [rbx],0xfffffffd
   15ebb:	mov    DWORD PTR [rbx+0x8],0xffffffff
   15ec2:	jmp    1414c <ftp_loop_internal+0x8cc>
   15ec7:	cmp    eax,0x2c
   15eca:	je     146c9 <ftp_loop_internal+0xe49>
   15ed0:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   15ed5:	nop    DWORD PTR [rax]
   15ed8:	lea    rsi,[rip+0x4faf0]        # 659cf <yy_accept+0x90f>
   15edf:	xor    edi,edi
   15ee1:	call   2de60 <logputs>
   15ee6:	jmp    15474 <ftp_loop_internal+0x1bf4>
   15eeb:	call   c740 <__errno_location@plt>
   15ef0:	mov    edi,DWORD PTR [rax]
   15ef2:	call   c540 <strerror@plt>
   15ef7:	mov    rdx,QWORD PTR [rbx+0x28]
   15efb:	mov    edi,0x3
   15f00:	lea    rsi,[rip+0x5293e]        # 68845 <primes.6089+0x2765>
   15f07:	mov    rcx,rax
   15f0a:	xor    eax,eax
   15f0c:	call   2e0a0 <logprintf>
   15f11:	jmp    15a73 <ftp_loop_internal+0x21f3>
   15f16:	xor    edi,edi
   15f18:	mov    edx,0x5
   15f1d:	lea    rsi,[rip+0x459a8]        # 5b8cc <_IO_stdin_used+0x8cc>
   15f24:	call   c780 <dcgettext@plt>
   15f29:	xor    edi,edi
   15f2b:	mov    rsi,rax
   15f2e:	call   2de60 <logputs>
   15f33:	cmp    BYTE PTR [rsp+0x97],0x0
   15f3b:	movzx  eax,BYTE PTR [rip+0x74376]        # 8a2b8 <opt+0x238>
   15f42:	je     15f50 <ftp_loop_internal+0x26d0>
   15f44:	cmp    DWORD PTR [r12+0x8],0x3
   15f4a:	je     1610c <ftp_loop_internal+0x288c>
   15f50:	test   al,al
   15f52:	jne    1575d <ftp_loop_internal+0x1edd>
   15f58:	lea    rsi,[rip+0x459a2]        # 5b901 <_IO_stdin_used+0x901>
   15f5f:	xor    edi,edi
   15f61:	call   2e0a0 <logprintf>
   15f66:	jmp    1575d <ftp_loop_internal+0x1edd>
   15f6b:	xor    eax,eax
   15f6d:	lea    rdi,[rip+0x45fcc]        # 5bf40 <_IO_stdin_used+0xf40>
   15f74:	mov    QWORD PTR [rsp+0x58],rcx
   15f79:	call   2e250 <debug_logprintf>
   15f7e:	cmp    BYTE PTR [rip+0x74336],0x0        # 8a2bb <opt+0x23b>
   15f85:	mov    rcx,QWORD PTR [rsp+0x58]
   15f8a:	je     13bc8 <ftp_loop_internal+0x348>
   15f90:	mov    rsi,QWORD PTR [rbx+0x20]
   15f94:	mov    rdx,r13
   15f97:	lea    rdi,[rip+0x45fd2]        # 5bf70 <_IO_stdin_used+0xf70>
   15f9e:	xor    eax,eax
   15fa0:	mov    QWORD PTR [rsp+0x58],rcx
   15fa5:	call   2e250 <debug_logprintf>
   15faa:	mov    rcx,QWORD PTR [rsp+0x58]
   15faf:	mov    edx,DWORD PTR [rbx+0x18]
   15fb2:	mov    r13,rcx
   15fb5:	jmp    13bce <ftp_loop_internal+0x34e>
   15fba:	mov    edi,DWORD PTR [rsp+0x58]
   15fbe:	call   f3b0 <fd_errstr>
   15fc3:	xor    edi,edi
   15fc5:	mov    edx,0x5
   15fca:	lea    rsi,[rip+0x461c7]        # 5c198 <_IO_stdin_used+0x1198>
   15fd1:	mov    rbp,rax
   15fd4:	call   c780 <dcgettext@plt>
   15fd9:	mov    r8,rbp
   15fdc:	mov    rcx,r15
   15fdf:	mov    edi,0x1
   15fe4:	mov    rdx,QWORD PTR [rsp+0x88]
   15fec:	mov    rsi,rax
   15fef:	xor    eax,eax
   15ff1:	call   2e0a0 <logprintf>
   15ff6:	cmp    BYTE PTR [rip+0x742bb],0x0        # 8a2b8 <opt+0x238>
   15ffd:	je     154c2 <ftp_loop_internal+0x1c42>
   16003:	lea    rsi,[rip+0x4f9c5]        # 659cf <yy_accept+0x90f>
   1600a:	mov    edi,0x3
   1600f:	call   2de60 <logputs>
   16014:	jmp    154c2 <ftp_loop_internal+0x1c42>
   16019:	xor    edi,edi
   1601b:	mov    edx,0x5
   16020:	lea    rsi,[rip+0x51369]        # 67390 <primes.6089+0x12b0>
   16027:	call   c780 <dcgettext@plt>
   1602c:	xor    edi,edi
   1602e:	mov    rsi,rax
   16031:	call   2de60 <logputs>
   16036:	jmp    14896 <ftp_loop_internal+0x1016>
   1603b:	call   c740 <__errno_location@plt>
   16040:	mov    edi,DWORD PTR [rax]
   16042:	call   c540 <strerror@plt>
   16047:	lea    rsi,[rip+0x45adb]        # 5bb29 <_IO_stdin_used+0xb29>
   1604e:	mov    edi,0x1
   16053:	mov    rdx,rax
   16056:	xor    eax,eax
   16058:	call   2e0a0 <logprintf>
   1605d:	jmp    14474 <ftp_loop_internal+0xbf4>
   16062:	mov    rdi,rbp
   16065:	mov    DWORD PTR [rsp+0x58],esi
   16069:	call   1e490 <print_address>
   1606e:	mov    esi,DWORD PTR [rsp+0x58]
   16072:	lea    rdi,[rip+0x45fbf]        # 5c038 <_IO_stdin_used+0x1038>
   16079:	mov    edx,esi
   1607b:	mov    rsi,rax
   1607e:	xor    eax,eax
   16080:	call   2e250 <debug_logprintf>
   16085:	mov    esi,DWORD PTR [rsp+0xd8]
   1608c:	jmp    145b2 <ftp_loop_internal+0xd32>
   16091:	lea    rsi,[rip+0x45881]        # 5b919 <_IO_stdin_used+0x919>
   16098:	xor    edi,edi
   1609a:	xor    eax,eax
   1609c:	call   2e0a0 <logprintf>
   160a1:	jmp    157de <ftp_loop_internal+0x1f5e>
   160a6:	mov    eax,DWORD PTR [rbx+0x1c]
   160a9:	cmp    eax,0x1
   160ac:	je     16266 <ftp_loop_internal+0x29e6>
   160b2:	test   eax,eax
   160b4:	jne    157d1 <ftp_loop_internal+0x1f51>
   160ba:	cmp    BYTE PTR [rip+0x741fa],0x0        # 8a2bb <opt+0x23b>
   160c1:	jne    1674e <ftp_loop_internal+0x2ece>
   160c7:	or     DWORD PTR [rbx],0x18
   160ca:	jmp    157d1 <ftp_loop_internal+0x1f51>
   160cf:	mov    edi,DWORD PTR [rsp+0x58]
   160d3:	lea    rdx,[rsp+0x98]
   160db:	call   416c0 <ssl_connect_wget>
   160e0:	test   al,al
   160e2:	jne    16331 <ftp_loop_internal+0x2ab1>
   160e8:	cmp    BYTE PTR [rip+0x7426a],0x0        # 8a359 <opt+0x2d9>
   160ef:	je     16102 <ftp_loop_internal+0x2882>
   160f1:	lea    rsi,[rip+0x46000]        # 5c0f8 <_IO_stdin_used+0x10f8>
   160f8:	mov    edi,0x1
   160fd:	call   2de60 <logputs>
   16102:	mov    rsi,QWORD PTR [r12+0x10]
   16107:	jmp    155a2 <ftp_loop_internal+0x1d22>
   1610c:	test   al,al
   1610e:	jne    1611e <ftp_loop_internal+0x289e>
   16110:	lea    rsi,[rip+0x457c1]        # 5b8d8 <_IO_stdin_used+0x8d8>
   16117:	xor    edi,edi
   16119:	call   2de60 <logputs>
   1611e:	mov    edi,DWORD PTR [rsp+0x98]
   16125:	xor    esi,esi
   16127:	call   1a310 <ftp_pbsz>
   1612c:	mov    r15d,eax
   1612f:	cmp    eax,0x1e
   16132:	je     1669b <ftp_loop_internal+0x2e1b>
   16138:	cmp    BYTE PTR [rip+0x74179],0x0        # 8a2b8 <opt+0x238>
   1613f:	je     16381 <ftp_loop_internal+0x2b01>
   16145:	mov    edi,DWORD PTR [rsp+0x98]
   1614c:	mov    esi,r13d
   1614f:	call   1a400 <ftp_prot>
   16154:	mov    r15d,eax
   16157:	cmp    eax,0x1f
   1615a:	je     1666c <ftp_loop_internal+0x2dec>
   16160:	movzx  eax,BYTE PTR [rip+0x74151]        # 8a2b8 <opt+0x238>
   16167:	mov    BYTE PTR [rsp+0x85],al
   1616e:	test   al,al
   16170:	je     16352 <ftp_loop_internal+0x2ad2>
   16176:	cmp    r13d,0x43
   1617a:	je     15755 <ftp_loop_internal+0x1ed5>
   16180:	or     DWORD PTR [rbx],0x20
   16183:	jmp    1575d <ftp_loop_internal+0x1edd>
   16188:	mov    esi,0x3de
   1618d:	lea    rdi,[rip+0x45b3c]        # 5bcd0 <_IO_stdin_used+0xcd0>
   16194:	xor    eax,eax
   16196:	call   2e250 <debug_logprintf>
   1619b:	jmp    143db <ftp_loop_internal+0xb5b>
   161a0:	lea    rsi,[rip+0x4583a]        # 5b9e1 <_IO_stdin_used+0x9e1>
   161a7:	xor    edi,edi
   161a9:	call   2de60 <logputs>
   161ae:	jmp    14e3a <ftp_loop_internal+0x15ba>
   161b3:	lea    rsi,[rip+0x4586e]        # 5ba28 <_IO_stdin_used+0xa28>
   161ba:	xor    edi,edi
   161bc:	call   2de60 <logputs>
   161c1:	jmp    14e9a <ftp_loop_internal+0x161a>
   161c6:	mov    edx,r13d
   161c9:	lea    rsi,[rip+0x45756]        # 5b926 <_IO_stdin_used+0x926>
   161d0:	xor    edi,edi
   161d2:	xor    eax,eax
   161d4:	call   2e0a0 <logprintf>
   161d9:	jmp    15849 <ftp_loop_internal+0x1fc9>
   161de:	xor    edi,edi
   161e0:	mov    edx,0x5
   161e5:	lea    rsi,[rip+0x511a4]        # 67390 <primes.6089+0x12b0>
   161ec:	call   c780 <dcgettext@plt>
   161f1:	xor    edi,edi
   161f3:	mov    rsi,rax
   161f6:	call   2de60 <logputs>
   161fb:	jmp    1582e <ftp_loop_internal+0x1fae>
   16200:	mov    edx,DWORD PTR [rbx+0x8]
   16203:	mov    r15d,0x23
   16209:	jmp    146aa <ftp_loop_internal+0xe2a>
   1620e:	mov    rsi,QWORD PTR [rsp+0x40]
   16213:	lea    rcx,[rsp+0xd8]
   1621b:	mov    rdx,rbx
   1621e:	mov    rdi,r12
   16221:	call   16790 <ftp_get_listing>
   16226:	or     DWORD PTR [rbx+0x4],0x4
   1622a:	cmp    eax,0x19
   1622d:	je     164b7 <ftp_loop_internal+0x2c37>
   16233:	mov    edi,DWORD PTR [rsp+0x98]
   1623a:	mov    r15d,0x23
   16240:	call   f400 <fd_close>
   16245:	mov    DWORD PTR [rbx+0x8],0xffffffff
   1624c:	mov    edi,DWORD PTR [rsp+0x58]
   16250:	call   f400 <fd_close>
   16255:	mov    edi,DWORD PTR [rsp+0x9c]
   1625c:	call   f400 <fd_close>
   16261:	jmp    146a5 <ftp_loop_internal+0xe25>
   16266:	cmp    BYTE PTR [rip+0x7404e],0x0        # 8a2bb <opt+0x23b>
   1626d:	je     157ce <ftp_loop_internal+0x1f4e>
   16273:	lea    rdi,[rip+0x45bf6]        # 5be70 <_IO_stdin_used+0xe70>
   1627a:	xor    eax,eax
   1627c:	call   2e250 <debug_logprintf>
   16281:	jmp    157ce <ftp_loop_internal+0x1f4e>
   16286:	lea    rdi,[rip+0x46123]        # 5c3b0 <_IO_stdin_used+0x13b0>
   1628d:	xor    eax,eax
   1628f:	call   2e250 <debug_logprintf>
   16294:	jmp    1443d <ftp_loop_internal+0xbbd>
   16299:	mov    edx,DWORD PTR [rbx+0x8]
   1629c:	mov    eax,DWORD PTR [rbx]
   1629e:	mov    r15d,0x10
   162a4:	jmp    146aa <ftp_loop_internal+0xe2a>
   162a9:	cmp    r13d,0xffffffff
   162ad:	je     162cd <ftp_loop_internal+0x2a4d>
   162af:	mov    rdx,QWORD PTR [rsp+0x88]
   162b7:	mov    rcx,r15
   162ba:	mov    edi,0x1
   162bf:	xor    eax,eax
   162c1:	lea    rsi,[rip+0x457ed]        # 5bab5 <_IO_stdin_used+0xab5>
   162c8:	call   2e0a0 <logprintf>
   162cd:	mov    edx,0x5
   162d2:	xor    edi,edi
   162d4:	lea    rsi,[rip+0x45806]        # 5bae1 <_IO_stdin_used+0xae1>
   162db:	call   c780 <dcgettext@plt>
   162e0:	mov    edi,0x1
   162e5:	mov    rsi,rax
   162e8:	call   2de60 <logputs>
   162ed:	mov    rbp,QWORD PTR [rsp+0xa8]
   162f5:	mov    edx,0x3
   162fa:	lea    rsi,[rip+0x457f8]        # 5baf9 <_IO_stdin_used+0xaf9>
   16301:	mov    rdi,rbp
   16304:	call   433b0 <c_strncasecmp>
   16309:	test   eax,eax
   1630b:	jne    16319 <ftp_loop_internal+0x2a99>
   1630d:	cmp    DWORD PTR [r12+0x8],0x3
   16313:	je     1662e <ftp_loop_internal+0x2dae>
   16319:	mov    rdi,rbp
   1631c:	mov    r15d,0x10
   16322:	call   4bdc0 <rpl_free>
   16327:	mov    edx,DWORD PTR [rbx+0x8]
   1632a:	mov    eax,DWORD PTR [rbx]
   1632c:	jmp    146aa <ftp_loop_internal+0xe2a>
   16331:	lea    rsi,[rip+0x45e30]        # 5c168 <_IO_stdin_used+0x1168>
   16338:	mov    edi,0x1
   1633d:	call   2de60 <logputs>
   16342:	jmp    155b5 <ftp_loop_internal+0x1d35>
   16347:	mov    r15d,0x35
   1634d:	jmp    140a6 <ftp_loop_internal+0x826>
   16352:	lea    rsi,[rip+0x51037]        # 67390 <primes.6089+0x12b0>
   16359:	xor    edi,edi
   1635b:	call   2de60 <logputs>
   16360:	movzx  eax,BYTE PTR [rip+0x73f51]        # 8a2b8 <opt+0x238>
   16367:	cmp    r13d,0x43
   1636b:	je     15f50 <ftp_loop_internal+0x26d0>
   16371:	or     DWORD PTR [rbx],0x20
   16374:	mov    BYTE PTR [rsp+0x85],0x1
   1637c:	jmp    15f50 <ftp_loop_internal+0x26d0>
   16381:	xor    edi,edi
   16383:	lea    rsi,[rip+0x4555e]        # 5b8e8 <_IO_stdin_used+0x8e8>
   1638a:	call   2de60 <logputs>
   1638f:	cmp    BYTE PTR [rip+0x73f22],0x0        # 8a2b8 <opt+0x238>
   16396:	jne    16145 <ftp_loop_internal+0x28c5>
   1639c:	mov    edx,r13d
   1639f:	lea    rsi,[rip+0x45548]        # 5b8ee <_IO_stdin_used+0x8ee>
   163a6:	xor    edi,edi
   163a8:	xor    eax,eax
   163aa:	call   2e0a0 <logprintf>
   163af:	jmp    16145 <ftp_loop_internal+0x28c5>
   163b4:	call   f400 <fd_close>
   163b9:	mov    DWORD PTR [rbx+0x8],0xffffffff
   163c0:	jmp    14182 <ftp_loop_internal+0x902>
   163c5:	call   c740 <__errno_location@plt>
   163ca:	mov    edi,DWORD PTR [rsp+0x98]
   163d1:	mov    r13,rbp
   163d4:	mov    ebp,DWORD PTR [rax]
   163d6:	call   f400 <fd_close>
   163db:	mov    DWORD PTR [rbx+0x8],0xffffffff
   163e2:	mov    edi,ebp
   163e4:	call   c540 <strerror@plt>
   163e9:	mov    rdi,r13
   163ec:	mov    r15d,DWORD PTR [rsp+0xd8]
   163f4:	mov    QWORD PTR [rsp+0x8],rax
   163f9:	call   1e490 <print_address>
   163fe:	mov    edx,0x5
   16403:	lea    rsi,[rip+0x45c56]        # 5c060 <_IO_stdin_used+0x1060>
   1640a:	xor    edi,edi
   1640c:	mov    r13,rax
   1640f:	call   c780 <dcgettext@plt>
   16414:	mov    r8,QWORD PTR [rsp+0x8]
   16419:	mov    ecx,r15d
   1641c:	mov    rdx,r13
   1641f:	mov    rsi,rax
   16422:	xor    edi,edi
   16424:	xor    eax,eax
   16426:	mov    r15d,0x5
   1642c:	call   2e0a0 <logprintf>
   16431:	mov    edi,ebp
   16433:	call   eea0 <retryable_socket_connect_error>
   16438:	mov    edx,DWORD PTR [rbx+0x8]
   1643b:	test   al,al
   1643d:	je     146a8 <ftp_loop_internal+0xe28>
   16443:	mov    r15d,0x3
   16449:	jmp    146a8 <ftp_loop_internal+0xe28>
   1644e:	xchg   ax,ax
   16450:	call   c740 <__errno_location@plt>
   16455:	mov    edi,DWORD PTR [rax]
   16457:	call   c540 <strerror@plt>
   1645c:	mov    r15,QWORD PTR [rbx+0x28]
   16460:	mov    edx,0x5
   16465:	xor    edi,edi
   16467:	lea    rsi,[rip+0x45faa]        # 5c418 <_IO_stdin_used+0x1418>
   1646e:	mov    r13,rax
   16471:	call   c780 <dcgettext@plt>
   16476:	mov    rdx,r15
   16479:	mov    rcx,r13
   1647c:	mov    edi,0x1
   16481:	mov    rsi,rax
   16484:	xor    eax,eax
   16486:	mov    r15d,0x15
   1648c:	call   2e0a0 <logprintf>
   16491:	mov    edi,DWORD PTR [rsp+0x98]
   16498:	call   f400 <fd_close>
   1649d:	mov    DWORD PTR [rbx+0x8],0xffffffff
   164a4:	mov    edi,DWORD PTR [rsp+0x58]
   164a8:	call   f400 <fd_close>
   164ad:	mov    edx,DWORD PTR [rbx+0x8]
   164b0:	mov    eax,DWORD PTR [rbx]
   164b2:	jmp    146aa <ftp_loop_internal+0xe2a>
   164b7:	mov    r15,QWORD PTR [rsp+0xd8]
   164bf:	test   r15,r15
   164c2:	je     16602 <ftp_loop_internal+0x2d82>
   164c8:	mov    rbp,QWORD PTR [r12+0x48]
   164cd:	jmp    164e7 <ftp_loop_internal+0x2c67>
   164cf:	mov    r15,QWORD PTR [r15+0x38]
   164d3:	xor    r13d,r13d
   164d6:	mov    QWORD PTR [rsp+0xd8],r15
   164de:	test   r15,r15
   164e1:	je     16602 <ftp_loop_internal+0x2d82>
   164e7:	mov    rdi,QWORD PTR [r15+0x8]
   164eb:	mov    rsi,rbp
   164ee:	call   be40 <strcmp@plt>
   164f3:	test   eax,eax
   164f5:	jne    164cf <ftp_loop_internal+0x2c4f>
   164f7:	lea    rsi,[rip+0x4f4d1]        # 659cf <yy_accept+0x90f>
   164fe:	xor    edi,edi
   16500:	call   2de60 <logputs>
   16505:	mov    rdi,QWORD PTR [r12+0x48]
   1650a:	call   4b5b0 <quote>
   1650f:	mov    edx,0x5
   16514:	lea    rsi,[rip+0x45634]        # 5bb4f <_IO_stdin_used+0xb4f>
   1651b:	mov    r15,rax
   1651e:	xor    edi,edi
   16520:	call   c780 <dcgettext@plt>
   16525:	mov    rdx,r15
   16528:	mov    edi,0x1
   1652d:	mov    rsi,rax
   16530:	xor    eax,eax
   16532:	call   2e0a0 <logprintf>
   16537:	mov    edi,DWORD PTR [rsp+0x98]
   1653e:	call   f400 <fd_close>
   16543:	mov    DWORD PTR [rbx+0x8],0xffffffff
   1654a:	mov    edi,DWORD PTR [rsp+0x58]
   1654e:	call   f400 <fd_close>
   16553:	mov    edi,DWORD PTR [rsp+0x9c]
   1655a:	call   f400 <fd_close>
   1655f:	cmp    r13b,0x1
   16563:	sbb    r15d,r15d
   16566:	and    r15d,0xffffffe9
   1656a:	add    r15d,0x23
   1656e:	jmp    146a5 <ftp_loop_internal+0xe25>
   16573:	or     eax,0x14
   16576:	cmp    BYTE PTR [rip+0x73d3e],0x0        # 8a2bb <opt+0x23b>
   1657d:	mov    DWORD PTR [rbx],eax
   1657f:	je     16200 <ftp_loop_internal+0x2980>
   16585:	lea    rdi,[rip+0x45d84]        # 5c310 <_IO_stdin_used+0x1310>
   1658c:	xor    eax,eax
   1658e:	call   2e250 <debug_logprintf>
   16593:	jmp    148b9 <ftp_loop_internal+0x1039>
   16598:	test   rdx,rdx
   1659b:	je     1665c <ftp_loop_internal+0x2ddc>
   165a1:	or     eax,0x18
   165a4:	cmp    BYTE PTR [rip+0x73d10],0x0        # 8a2bb <opt+0x23b>
   165ab:	mov    DWORD PTR [rbx],eax
   165ad:	je     16200 <ftp_loop_internal+0x2980>
   165b3:	lea    rdi,[rip+0x45cee]        # 5c2a8 <_IO_stdin_used+0x12a8>
   165ba:	jmp    1658c <ftp_loop_internal+0x2d0c>
   165bc:	or     eax,0x10
   165bf:	cmp    BYTE PTR [rip+0x73cf5],0x0        # 8a2bb <opt+0x23b>
   165c6:	mov    DWORD PTR [rbx],eax
   165c8:	je     16200 <ftp_loop_internal+0x2980>
   165ce:	lea    rdi,[rip+0x45c23]        # 5c1f8 <_IO_stdin_used+0x11f8>
   165d5:	jmp    1658c <ftp_loop_internal+0x2d0c>
   165d7:	lea    rdi,[rip+0x45af2]        # 5c0d0 <_IO_stdin_used+0x10d0>
   165de:	xor    eax,eax
   165e0:	call   2e250 <debug_logprintf>
   165e5:	jmp    14ff8 <ftp_loop_internal+0x1778>
   165ea:	lea    rdi,[rip+0x4583f]        # 5be30 <_IO_stdin_used+0xe30>
   165f1:	xor    eax,eax
   165f3:	call   2e250 <debug_logprintf>
   165f8:	jmp    157ce <ftp_loop_internal+0x1f4e>
   165fd:	call   c7b0 <__stack_chk_fail@plt>
   16602:	lea    rsi,[rip+0x4f3c6]        # 659cf <yy_accept+0x90f>
   16609:	xor    edi,edi
   1660b:	call   2de60 <logputs>
   16610:	mov    rdi,QWORD PTR [r12+0x48]
   16615:	call   4b5b0 <quote>
   1661a:	mov    edx,0x5
   1661f:	lea    rsi,[rip+0x4553a]        # 5bb60 <_IO_stdin_used+0xb60>
   16626:	mov    r15,rax
   16629:	jmp    1651e <ftp_loop_internal+0x2c9e>
   1662e:	lea    rsi,[rip+0x45b83]        # 5c1b8 <_IO_stdin_used+0x11b8>
   16635:	mov    edi,0x1
   1663a:	mov    r15d,0x11
   16640:	call   2de60 <logputs>
   16645:	mov    rdi,QWORD PTR [rsp+0xa8]
   1664d:	call   4bdc0 <rpl_free>
   16652:	mov    edx,DWORD PTR [rbx+0x8]
   16655:	mov    eax,DWORD PTR [rbx]
   16657:	jmp    146aa <ftp_loop_internal+0xe2a>
   1665c:	mov    DWORD PTR [rbx],eax
   1665e:	mov    edx,DWORD PTR [rbx+0x8]
   16661:	mov    r15d,0x23
   16667:	jmp    146aa <ftp_loop_internal+0xe2a>
   1666c:	mov    edx,0x5
   16671:	lea    rsi,[rip+0x45758]        # 5bdd0 <_IO_stdin_used+0xdd0>
   16678:	xor    edi,edi
   1667a:	call   c780 <dcgettext@plt>
   1667f:	mov    edx,r13d
   16682:	mov    edi,0x1
   16687:	mov    rsi,rax
   1668a:	xor    eax,eax
   1668c:	call   2e0a0 <logprintf>
   16691:	mov    edx,DWORD PTR [rbx+0x8]
   16694:	mov    eax,DWORD PTR [rbx]
   16696:	jmp    146aa <ftp_loop_internal+0xe2a>
   1669b:	mov    edx,0x5
   166a0:	lea    rsi,[rip+0x456f9]        # 5bda0 <_IO_stdin_used+0xda0>
   166a7:	xor    edi,edi
   166a9:	call   c780 <dcgettext@plt>
   166ae:	mov    edi,0x1
   166b3:	mov    rsi,rax
   166b6:	call   2de60 <logputs>
   166bb:	mov    edx,DWORD PTR [rbx+0x8]
   166be:	mov    eax,DWORD PTR [rbx]
   166c0:	jmp    146aa <ftp_loop_internal+0xe2a>
   166c5:	mov    edi,DWORD PTR [rsp+0x98]
   166cc:	call   f400 <fd_close>
   166d1:	mov    edi,DWORD PTR [rsp+0x58]
   166d5:	call   f400 <fd_close>
   166da:	lea    rsi,[rip+0x45a5f]        # 5c140 <_IO_stdin_used+0x1140>
   166e1:	mov    edi,0x1
   166e6:	call   2de60 <logputs>
   166eb:	jmp    155e0 <ftp_loop_internal+0x1d60>
   166f0:	call   c740 <__errno_location@plt>
   166f5:	mov    r15d,0x2f
   166fb:	mov    edi,DWORD PTR [rax]
   166fd:	call   c540 <strerror@plt>
   16702:	mov    rdx,QWORD PTR [rbx+0x28]
   16706:	mov    edi,0x1
   1670b:	lea    rsi,[rip+0x52133]        # 68845 <primes.6089+0x2765>
   16712:	mov    rcx,rax
   16715:	xor    eax,eax
   16717:	call   2e0a0 <logprintf>
   1671c:	mov    edi,DWORD PTR [rsp+0x98]
   16723:	call   f400 <fd_close>
   16728:	mov    DWORD PTR [rbx+0x8],0xffffffff
   1672f:	mov    edi,DWORD PTR [rsp+0x58]
   16733:	call   f400 <fd_close>
   16738:	mov    edi,DWORD PTR [rsp+0x9c]
   1673f:	call   f400 <fd_close>
   16744:	mov    edx,DWORD PTR [rbx+0x8]
   16747:	mov    eax,DWORD PTR [rbx]
   16749:	jmp    146aa <ftp_loop_internal+0xe2a>
   1674e:	lea    rdi,[rip+0x4576b]        # 5bec0 <_IO_stdin_used+0xec0>
   16755:	call   2e250 <debug_logprintf>
   1675a:	jmp    160c7 <ftp_loop_internal+0x2847>
   1675f:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   16764:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   16769:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   1676e:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   16773:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   16778:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   1677d:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   16782:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   16787:	jmp    cc58 <ftp_loop_internal.cold+0x5>
   1678c:	nop    DWORD PTR [rax+0x0]

0000000000016790 <ftp_get_listing>:
   16790:	push   r15
   16792:	mov    r15,rdi
   16795:	push   r14
   16797:	push   r13
   16799:	push   r12
   1679b:	mov    r12,rcx
   1679e:	push   rbp
   1679f:	mov    rbp,rsi
   167a2:	xor    esi,esi
   167a4:	push   rbx
   167a5:	mov    rbx,rdx
   167a8:	sub    rsp,0x18
   167ac:	mov    eax,DWORD PTR [rdx+0x4]
   167af:	and    DWORD PTR [rdx],0xfffffffe
   167b2:	mov    r13,QWORD PTR [rdx+0x28]
   167b6:	and    eax,0xfffffffb
   167b9:	or     eax,0x18
   167bc:	mov    DWORD PTR [rdx+0x4],eax
   167bf:	call   37670 <url_file_name>
   167c4:	lea    rsi,[rip+0x453a7]        # 5bb72 <_IO_stdin_used+0xb72>
   167cb:	mov    rdi,rax
   167ce:	mov    QWORD PTR [rsp+0x8],rax
   167d3:	call   3c3f0 <file_merge>
   167d8:	mov    rdi,QWORD PTR [rsp+0x8]
   167dd:	mov    r14,rax
   167e0:	call   4bdc0 <rpl_free>
   167e5:	cmp    BYTE PTR [rip+0x73acf],0x0        # 8a2bb <opt+0x23b>
   167ec:	jne    168b0 <ftp_get_listing+0x120>
   167f2:	mov    rdi,r14
   167f5:	call   4ba50 <xstrdup>
   167fa:	mov    rdi,r14
   167fd:	mov    QWORD PTR [rbx+0x28],rax
   16801:	call   4bdc0 <rpl_free>
   16806:	mov    rsi,rbp
   16809:	xor    r9d,r9d
   1680c:	xor    r8d,r8d
   1680f:	mov    rcx,rbx
   16812:	xor    edx,edx
   16814:	mov    rdi,r15
   16817:	call   13880 <ftp_loop_internal>
   1681c:	mov    rdi,QWORD PTR [rbx+0x28]
   16820:	mov    r14d,eax
   16823:	call   4ba50 <xstrdup>
   16828:	mov    rdi,QWORD PTR [rbx+0x28]
   1682c:	mov    rbp,rax
   1682f:	call   4bdc0 <rpl_free>
   16834:	mov    QWORD PTR [rbx+0x28],r13
   16838:	cmp    r14d,0x19
   1683c:	je     16868 <ftp_get_listing+0xd8>
   1683e:	mov    QWORD PTR [r12],0x0
   16846:	mov    rdi,rbp
   16849:	call   4bdc0 <rpl_free>
   1684e:	and    DWORD PTR [rbx+0x4],0xfffffff7
   16852:	add    rsp,0x18
   16856:	mov    eax,r14d
   16859:	pop    rbx
   1685a:	pop    rbp
   1685b:	pop    r12
   1685d:	pop    r13
   1685f:	pop    r14
   16861:	pop    r15
   16863:	ret    
   16864:	nop    DWORD PTR [rax+0x0]
   16868:	mov    esi,DWORD PTR [rbx+0x18]
   1686b:	mov    rdi,rbp
   1686e:	call   1d200 <ftp_parse_ls>
   16873:	cmp    BYTE PTR [rip+0x73a60],0x0        # 8a2da <opt+0x25a>
   1687a:	mov    QWORD PTR [r12],rax
   1687e:	je     16846 <ftp_get_listing+0xb6>
   16880:	mov    rdi,rbp
   16883:	call   c120 <unlink@plt>
   16888:	test   eax,eax
   1688a:	je     168f0 <ftp_get_listing+0x160>
   1688c:	call   c740 <__errno_location@plt>
   16891:	mov    edi,DWORD PTR [rax]
   16893:	call   c540 <strerror@plt>
   16898:	lea    rsi,[rip+0x4528a]        # 5bb29 <_IO_stdin_used+0xb29>
   1689f:	mov    edi,0x1
   168a4:	mov    rdx,rax
   168a7:	xor    eax,eax
   168a9:	call   2e0a0 <logprintf>
   168ae:	jmp    16846 <ftp_get_listing+0xb6>
   168b0:	mov    rdi,r14
   168b3:	call   4b5b0 <quote>
   168b8:	xor    edi,edi
   168ba:	mov    edx,0x5
   168bf:	lea    rsi,[rip+0x45b7a]        # 5c440 <_IO_stdin_used+0x1440>
   168c6:	mov    QWORD PTR [rsp+0x8],rax
   168cb:	call   c780 <dcgettext@plt>
   168d0:	mov    r8,QWORD PTR [rsp+0x8]
   168d5:	mov    rdi,rax
   168d8:	xor    eax,eax
   168da:	mov    rsi,r8
   168dd:	call   2e250 <debug_logprintf>
   168e2:	jmp    167f2 <ftp_get_listing+0x62>
   168e7:	nop    WORD PTR [rax+rax*1+0x0]
   168f0:	mov    rdi,rbp
   168f3:	call   4b5b0 <quote>
   168f8:	xor    edi,edi
   168fa:	mov    edx,0x5
   168ff:	lea    rsi,[rip+0x45275]        # 5bb7b <_IO_stdin_used+0xb7b>
   16906:	mov    r12,rax
   16909:	call   c780 <dcgettext@plt>
   1690e:	mov    rdx,r12
   16911:	xor    edi,edi
   16913:	mov    rsi,rax
   16916:	xor    eax,eax
   16918:	call   2e0a0 <logprintf>
   1691d:	jmp    16846 <ftp_get_listing+0xb6>
   16922:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1692d:	nop    DWORD PTR [rax]

0000000000016930 <freefileinfo>:
   16930:	endbr64 
   16934:	test   rdi,rdi
   16937:	je     16990 <freefileinfo+0x60>
   16939:	push   rbp
   1693a:	push   rbx
   1693b:	mov    rbx,rdi
   1693e:	sub    rsp,0x8
   16942:	nop    WORD PTR [rax+rax*1+0x0]
   16948:	mov    rbp,rbx
   1694b:	mov    rbx,QWORD PTR [rbx+0x38]
   1694f:	mov    rdi,QWORD PTR [rbp+0x8]
   16953:	call   4bdc0 <rpl_free>
   16958:	mov    rdi,QWORD PTR [rbp+0x28]
   1695c:	mov    QWORD PTR [rbp+0x8],0x0
   16964:	test   rdi,rdi
   16967:	je     16976 <freefileinfo+0x46>
   16969:	call   4bdc0 <rpl_free>
   1696e:	mov    QWORD PTR [rbp+0x28],0x0
   16976:	mov    rdi,rbp
   16979:	call   4bdc0 <rpl_free>
   1697e:	test   rbx,rbx
   16981:	jne    16948 <freefileinfo+0x18>
   16983:	add    rsp,0x8
   16987:	pop    rbx
   16988:	pop    rbp
   16989:	ret    
   1698a:	nop    WORD PTR [rax+rax*1+0x0]
   16990:	ret    
   16991:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1699c:	nop    DWORD PTR [rax+0x0]

00000000000169a0 <ftp_retrieve_glob>:
   169a0:	push   r15
   169a2:	push   r14
   169a4:	mov    r14,rdi
   169a7:	push   r13
   169a9:	push   r12
   169ab:	mov    r12,rdx
   169ae:	push   rbp
   169af:	push   rbx
   169b0:	sub    rsp,0x508
   169b7:	mov    DWORD PTR [rsp+0x18],ecx
   169bb:	lea    rbp,[rsp+0x50]
   169c0:	mov    QWORD PTR [rsp+0x20],rsi
   169c5:	mov    rcx,rbp
   169c8:	mov    rax,QWORD PTR fs:0x28
   169d1:	mov    QWORD PTR [rsp+0x4f8],rax
   169d9:	xor    eax,eax
   169db:	or     DWORD PTR [rdx+0x4],0x10
   169df:	call   16790 <ftp_get_listing>
   169e4:	mov    DWORD PTR [rsp+0x10],eax
   169e8:	cmp    eax,0x19
   169eb:	jne    16f53 <ftp_retrieve_glob+0x5b3>
   169f1:	cmp    BYTE PTR [rip+0x73718],0x0        # 8a110 <opt+0x90>
   169f8:	jne    16f80 <ftp_retrieve_glob+0x5e0>
   169fe:	mov    rax,QWORD PTR [rip+0x685d3]        # 7efd8 <fnmatch@GLIBC_2.2.5>
   16a05:	mov    QWORD PTR [rsp+0x30],rax
   16a0a:	mov    rax,QWORD PTR [rip+0x685df]        # 7eff0 <strcmp@GLIBC_2.2.5>
   16a11:	mov    QWORD PTR [rsp+0x38],rax
   16a16:	mov    rax,QWORD PTR [rsp+0x50]
   16a1b:	mov    QWORD PTR [rsp+0x48],rax
   16a20:	test   rax,rax
   16a23:	je     16f10 <ftp_retrieve_glob+0x570>
   16a29:	lea    rcx,[rsp+0xf0]
   16a31:	mov    QWORD PTR [rsp+0x28],r12
   16a36:	lea    r13,[rsp+0x48]
   16a3b:	mov    QWORD PTR [rsp+0x8],rcx
   16a40:	jmp    16a8e <ftp_retrieve_glob+0xee>
   16a42:	nop    WORD PTR [rax+rax*1+0x0]
   16a48:	mov    rdi,r12
   16a4b:	call   4b5b0 <quote>
   16a50:	mov    edx,0x5
   16a55:	lea    rsi,[rip+0x45a04]        # 5c460 <_IO_stdin_used+0x1460>
   16a5c:	xor    edi,edi
   16a5e:	mov    r12,rax
   16a61:	call   c780 <dcgettext@plt>
   16a66:	mov    rdx,r12
   16a69:	mov    rsi,rax
   16a6c:	xor    edi,edi
   16a6e:	xor    eax,eax
   16a70:	call   2e0a0 <logprintf>
   16a75:	mov    rsi,rbp
   16a78:	mov    rdi,r13
   16a7b:	call   13560 <delelement>
   16a80:	mov    QWORD PTR [rsp+0x48],rax
   16a85:	test   rax,rax
   16a88:	je     16c00 <ftp_retrieve_glob+0x260>
   16a8e:	cmp    QWORD PTR [rip+0x7365a],0x0        # 8a0f0 <opt+0x70>
   16a96:	je     16fa0 <ftp_retrieve_glob+0x600>
   16a9c:	cmp    DWORD PTR [rax],0x1
   16a9f:	je     16ab2 <ftp_retrieve_glob+0x112>
   16aa1:	mov    rdi,QWORD PTR [rax+0x8]
   16aa5:	call   3c670 <acceptable>
   16aaa:	test   al,al
   16aac:	je     16ff0 <ftp_retrieve_glob+0x650>
   16ab2:	mov    rbx,QWORD PTR [rsp+0x48]
   16ab7:	mov    r12,QWORD PTR [rbx+0x8]
   16abb:	cmp    BYTE PTR [r12],0x2f
   16ac0:	je     16a48 <ftp_retrieve_glob+0xa8>
   16ac2:	lea    rsi,[rip+0x450ce]        # 5bb97 <_IO_stdin_used+0xb97>
   16ac9:	mov    rdi,r12
   16acc:	mov    r15,rbx
   16acf:	call   c550 <strstr@plt>
   16ad4:	test   rax,rax
   16ad7:	jne    16a48 <ftp_retrieve_glob+0xa8>
   16add:	mov    r15,QWORD PTR [r15+0x38]
   16ae1:	test   r15,r15
   16ae4:	je     16b0d <ftp_retrieve_glob+0x16d>
   16ae6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   16af0:	mov    rsi,QWORD PTR [r15+0x8]
   16af4:	mov    rdi,r12
   16af7:	call   be40 <strcmp@plt>
   16afc:	test   eax,eax
   16afe:	je     16a48 <ftp_retrieve_glob+0xa8>
   16b04:	mov    r15,QWORD PTR [r15+0x38]
   16b08:	test   r15,r15
   16b0b:	jne    16af0 <ftp_retrieve_glob+0x150>
   16b0d:	cmp    QWORD PTR [rip+0x73613],0x0        # 8a128 <opt+0xa8>
   16b15:	je     17020 <ftp_retrieve_glob+0x680>
   16b1b:	cmp    DWORD PTR [rbx],0x1
   16b1e:	mov    r9,QWORD PTR [r14]
   16b21:	mov    ecx,0x400
   16b26:	mov    edx,0x1
   16b2b:	lea    rax,[rip+0x578e5]        # 6e417 <urlchr_table+0x877>
   16b32:	lea    rbx,[rip+0x45060]        # 5bb99 <_IO_stdin_used+0xb99>
   16b39:	mov    esi,0x400
   16b3e:	cmove  rax,rbx
   16b42:	lea    r8,[rip+0x45052]        # 5bb9b <_IO_stdin_used+0xb9b>
   16b49:	push   rax
   16b4a:	xor    eax,eax
   16b4c:	push   r12
   16b4e:	mov    rdi,QWORD PTR [rsp+0x18]
   16b53:	call   c9d0 <__snprintf_chk@plt>
   16b58:	pop    rdi
   16b59:	pop    r8
   16b5b:	cmp    eax,0x3ff
   16b60:	jbe    16fb8 <ftp_retrieve_glob+0x618>
   16b66:	mov    rax,QWORD PTR [rsp+0x48]
   16b6b:	lea    rcx,[rip+0x578a5]        # 6e417 <urlchr_table+0x877>
   16b72:	mov    rsi,QWORD PTR [r14]
   16b75:	lea    rdi,[rip+0x4501f]        # 5bb9b <_IO_stdin_used+0xb9b>
   16b7c:	cmp    DWORD PTR [rax],0x1
   16b7f:	mov    rdx,QWORD PTR [rax+0x8]
   16b83:	cmove  rcx,rbx
   16b87:	xor    eax,eax
   16b89:	call   3ba30 <aprintf>
   16b8e:	mov    rdi,rax
   16b91:	mov    r12,rax
   16b94:	call   3c480 <accept_url>
   16b99:	test   al,al
   16b9b:	je     174f8 <ftp_retrieve_glob+0xb58>
   16ba1:	cmp    r12,QWORD PTR [rsp+0x8]
   16ba6:	je     16bb0 <ftp_retrieve_glob+0x210>
   16ba8:	mov    rdi,r12
   16bab:	call   4bdc0 <rpl_free>
   16bb0:	mov    rbx,QWORD PTR [rsp+0x48]
   16bb5:	mov    rdi,QWORD PTR [r14+0x48]
   16bb9:	cmp    BYTE PTR [rdi],0x0
   16bbc:	je     16bee <ftp_retrieve_glob+0x24e>
   16bbe:	mov    esi,DWORD PTR [rsp+0x18]
   16bc2:	test   esi,esi
   16bc4:	jne    170a8 <ftp_retrieve_glob+0x708>
   16bca:	xor    edx,edx
   16bcc:	mov    rsi,QWORD PTR [rbx+0x8]
   16bd0:	mov    rax,QWORD PTR [rsp+0x30]
   16bd5:	call   rax
   16bd7:	cmp    eax,0xffffffff
   16bda:	je     17848 <ftp_retrieve_glob+0xea8>
   16be0:	cmp    eax,0x1
   16be3:	je     16a75 <ftp_retrieve_glob+0xd5>
   16be9:	mov    rbx,QWORD PTR [rsp+0x48]
   16bee:	mov    rax,QWORD PTR [rbx+0x38]
   16bf2:	mov    QWORD PTR [rsp+0x48],rax
   16bf7:	test   rax,rax
   16bfa:	jne    16a8e <ftp_retrieve_glob+0xee>
   16c00:	mov    r13,QWORD PTR [rsp+0x50]
   16c05:	mov    r12,QWORD PTR [rsp+0x28]
   16c0a:	mov    rbx,r13
   16c0d:	test   r13,r13
   16c10:	je     16f10 <ftp_retrieve_glob+0x570>
   16c16:	mov    eax,DWORD PTR [rip+0x6c964]        # 83580 <depth.8900>
   16c1c:	mov    r15d,DWORD PTR [rip+0x73481]        # 8a0a4 <opt+0x24>
   16c23:	mov    QWORD PTR [rsp+0x58],0x0
   16c2c:	lea    ebp,[rax+0x1]
   16c2f:	cmp    ebp,r15d
   16c32:	mov    DWORD PTR [rip+0x6c948],ebp        # 83580 <depth.8900>
   16c38:	setg   cl
   16c3b:	cmp    r15d,0xffffffff
   16c3f:	setne  dl
   16c42:	test   cl,dl
   16c44:	jne    17737 <ftp_retrieve_glob+0xd97>
   16c4a:	mov    edx,DWORD PTR [r12]
   16c4e:	mov    eax,edx
   16c50:	and    eax,0xfffffffe
   16c53:	mov    DWORD PTR [r12],eax
   16c57:	mov    eax,DWORD PTR [r12+0x4]
   16c5c:	mov    ecx,eax
   16c5e:	and    eax,0xfffffffd
   16c61:	or     ecx,0x2
   16c64:	and    edx,0x2
   16c67:	cmove  eax,ecx
   16c6a:	mov    ecx,DWORD PTR [r12+0x8]
   16c6f:	mov    edx,eax
   16c71:	and    edx,0xfffffffe
   16c74:	or     edx,0x14
   16c77:	test   ecx,ecx
   16c79:	js     172c8 <ftp_retrieve_glob+0x928>
   16c7f:	mov    DWORD PTR [r12+0x4],edx
   16c84:	mov    BYTE PTR [rsp+0x18],0x0
   16c89:	mov    QWORD PTR [rsp+0x28],r13
   16c8e:	jmp    16da4 <ftp_retrieve_glob+0x404>
   16c93:	nop    DWORD PTR [rax+rax*1+0x0]
   16c98:	test   eax,eax
   16c9a:	je     1725b <ftp_retrieve_glob+0x8bb>
   16ca0:	mov    r15d,0x1
   16ca6:	mov    rdi,QWORD PTR [rbx+0x8]
   16caa:	call   4b5b0 <quote>
   16caf:	mov    edx,0x5
   16cb4:	lea    rsi,[rip+0x45955]        # 5c610 <_IO_stdin_used+0x1610>
   16cbb:	mov    QWORD PTR [rsp+0x8],rax
   16cc0:	xor    edi,edi
   16cc2:	call   c780 <dcgettext@plt>
   16cc7:	mov    r8,QWORD PTR [rsp+0x8]
   16ccc:	mov    edi,0x1
   16cd1:	mov    rsi,rax
   16cd4:	xor    eax,eax
   16cd6:	mov    rdx,r8
   16cd9:	call   2e0a0 <logprintf>
   16cde:	mov    rsi,QWORD PTR [r12+0x28]
   16ce3:	lea    rdi,[rsp+0x58]
   16ce8:	call   36470 <set_local_file>
   16ced:	test   r15b,r15b
   16cf0:	jne    17054 <ftp_retrieve_glob+0x6b4>
   16cf6:	cmp    QWORD PTR [rsp+0x58],0x0
   16cfc:	je     17220 <ftp_retrieve_glob+0x880>
   16d02:	mov    BYTE PTR [rsp+0x8],0x0
   16d07:	xor    r8d,r8d
   16d0a:	mov    r15d,0x19
   16d10:	cmp    BYTE PTR [rip+0x736c2],0x0        # 8a3d9 <opt+0x359>
   16d17:	mov    rax,QWORD PTR [rbx+0x18]
   16d1b:	je     16d39 <ftp_retrieve_glob+0x399>
   16d1d:	cmp    DWORD PTR [rbx],0x2
   16d20:	je     172b0 <ftp_retrieve_glob+0x910>
   16d26:	cmp    rax,0xffffffffffffffff
   16d2a:	je     16ece <ftp_retrieve_glob+0x52e>
   16d30:	test   r8b,r8b
   16d33:	jne    175d0 <ftp_retrieve_glob+0xc30>
   16d39:	cmp    rax,0xffffffffffffffff
   16d3d:	je     16ece <ftp_retrieve_glob+0x52e>
   16d43:	mov    rdi,QWORD PTR [r12+0x28]
   16d48:	call   4bdc0 <rpl_free>
   16d4d:	mov    QWORD PTR [r12+0x28],r13
   16d52:	mov    rsi,rbp
   16d55:	mov    rdi,r14
   16d58:	call   39200 <url_set_file>
   16d5d:	mov    rdi,rbp
   16d60:	call   4bdc0 <rpl_free>
   16d65:	cmp    BYTE PTR [rsp+0x8],0x0
   16d6a:	jne    17330 <ftp_retrieve_glob+0x990>
   16d70:	cmp    r15d,0x15
   16d74:	je     17330 <ftp_retrieve_glob+0x990>
   16d7a:	cmp    r15d,0x34
   16d7e:	je     17330 <ftp_retrieve_glob+0x990>
   16d84:	lea    eax,[r15-0x35]
   16d88:	cmp    eax,0x1
   16d8b:	jbe    17330 <ftp_retrieve_glob+0x990>
   16d91:	mov    rbx,QWORD PTR [rbx+0x38]
   16d95:	and    DWORD PTR [r12+0x4],0xfffffffc
   16d9b:	test   rbx,rbx
   16d9e:	je     17330 <ftp_retrieve_glob+0x990>
   16da4:	mov    rax,QWORD PTR [rip+0x73505]        # 8a2b0 <opt+0x230>
   16dab:	test   rax,rax
   16dae:	je     16dbd <ftp_retrieve_glob+0x41d>
   16db0:	cmp    rax,QWORD PTR [rip+0x73679]        # 8a430 <total_downloaded_bytes>
   16db7:	jl     177b6 <ftp_retrieve_glob+0xe16>
   16dbd:	mov    rdi,QWORD PTR [r14+0x48]
   16dc1:	mov    r13,QWORD PTR [r12+0x28]
   16dc6:	call   4ba50 <xstrdup>
   16dcb:	mov    rsi,QWORD PTR [rbx+0x8]
   16dcf:	mov    rdi,r14
   16dd2:	mov    rbp,rax
   16dd5:	call   39200 <url_set_file>
   16dda:	xor    esi,esi
   16ddc:	mov    rdi,r14
   16ddf:	call   37670 <url_file_name>
   16de4:	movzx  r15d,BYTE PTR [rip+0x734d0]        # 8a2bc <opt+0x23c>
   16dec:	mov    QWORD PTR [r12+0x28],rax
   16df1:	mov    rsi,rax
   16df4:	mov    eax,DWORD PTR [rbx]
   16df6:	test   r15b,r15b
   16df9:	je     16e03 <ftp_retrieve_glob+0x463>
   16dfb:	test   eax,eax
   16dfd:	je     170d0 <ftp_retrieve_glob+0x730>
   16e03:	cmp    eax,0x1
   16e06:	je     17038 <ftp_retrieve_glob+0x698>
   16e0c:	cmp    eax,0x2
   16e0f:	jne    16c98 <ftp_retrieve_glob+0x2f8>
   16e15:	cmp    BYTE PTR [rip+0x7335d],0x0        # 8a179 <opt+0xf9>
   16e1c:	mov    r15d,0x1
   16e22:	je     17168 <ftp_retrieve_glob+0x7c8>
   16e28:	movzx  r9d,BYTE PTR [rsp+0x18]
   16e2e:	xor    r8d,r8d
   16e31:	mov    rdx,rbx
   16e34:	mov    rcx,r12
   16e37:	mov    rsi,QWORD PTR [rsp+0x20]
   16e3c:	mov    rdi,r14
   16e3f:	call   13880 <ftp_loop_internal>
   16e44:	mov    rsi,QWORD PTR [r12+0x28]
   16e49:	lea    rdi,[rsp+0x58]
   16e4e:	mov    r15d,eax
   16e51:	call   36470 <set_local_file>
   16e56:	cmp    r15d,0x2b
   16e5a:	mov    rdi,QWORD PTR [rsp+0x58]
   16e5f:	sete   dl
   16e62:	cmp    r15d,0x1
   16e66:	sete   al
   16e69:	or     edx,eax
   16e6b:	mov    BYTE PTR [rsp+0x8],dl
   16e6f:	test   rdi,rdi
   16e72:	je     16d43 <ftp_retrieve_glob+0x3a3>
   16e78:	nop    DWORD PTR [rax+rax*1+0x0]
   16e80:	mov    edx,DWORD PTR [rbx]
   16e82:	test   edx,edx
   16e84:	jne    17098 <ftp_retrieve_glob+0x6f8>
   16e8a:	movzx  r8d,BYTE PTR [rip+0x7352b]        # 8a3bd <opt+0x33d>
   16e92:	test   r8b,r8b
   16e95:	je     16eaf <ftp_retrieve_glob+0x50f>
   16e97:	mov    esi,DWORD PTR [rbx+0x24]
   16e9a:	test   esi,esi
   16e9c:	jne    17639 <ftp_retrieve_glob+0xc99>
   16ea2:	cmp    BYTE PTR [rip+0x73412],0x0        # 8a2bb <opt+0x23b>
   16ea9:	jne    176a1 <ftp_retrieve_glob+0xd01>
   16eaf:	movzx  r8d,BYTE PTR [rip+0x73522]        # 8a3d9 <opt+0x359>
   16eb7:	mov    rax,QWORD PTR [rbx+0x18]
   16ebb:	test   r8b,r8b
   16ebe:	je     16d39 <ftp_retrieve_glob+0x399>
   16ec4:	cmp    rax,0xffffffffffffffff
   16ec8:	jne    16d30 <ftp_retrieve_glob+0x390>
   16ece:	mov    r8,QWORD PTR [rsp+0x58]
   16ed3:	xor    edi,edi
   16ed5:	mov    edx,0x5
   16eda:	lea    rsi,[rip+0x44d01]        # 5bbe2 <_IO_stdin_used+0xbe2>
   16ee1:	mov    QWORD PTR [rsp+0x10],r8
   16ee6:	call   c780 <dcgettext@plt>
   16eeb:	mov    r8,QWORD PTR [rsp+0x10]
   16ef0:	mov    edi,0x1
   16ef5:	mov    rsi,rax
   16ef8:	xor    eax,eax
   16efa:	mov    rdx,r8
   16efd:	call   2e0a0 <logprintf>
   16f02:	jmp    16d43 <ftp_retrieve_glob+0x3a3>
   16f07:	nop    WORD PTR [rax+rax*1+0x0]
   16f10:	mov    eax,DWORD PTR [rsp+0x18]
   16f14:	test   eax,eax
   16f16:	je     172f7 <ftp_retrieve_glob+0x957>
   16f1c:	xor    r13d,r13d
   16f1f:	cmp    DWORD PTR [rsp+0x18],0x2
   16f24:	je     178c9 <ftp_retrieve_glob+0xf29>
   16f2a:	mov    rdi,r13
   16f2d:	call   16930 <freefileinfo>
   16f32:	mov    rax,QWORD PTR [rip+0x73377]        # 8a2b0 <opt+0x230>
   16f39:	test   rax,rax
   16f3c:	je     16f53 <ftp_retrieve_glob+0x5b3>
   16f3e:	cmp    rax,QWORD PTR [rip+0x734eb]        # 8a430 <total_downloaded_bytes>
   16f45:	mov    eax,0x2b
   16f4a:	cmovge eax,DWORD PTR [rsp+0x10]
   16f4f:	mov    DWORD PTR [rsp+0x10],eax
   16f53:	mov    rax,QWORD PTR [rsp+0x4f8]
   16f5b:	xor    rax,QWORD PTR fs:0x28
   16f64:	jne    17a4d <ftp_retrieve_glob+0x10ad>
   16f6a:	mov    eax,DWORD PTR [rsp+0x10]
   16f6e:	add    rsp,0x508
   16f75:	pop    rbx
   16f76:	pop    rbp
   16f77:	pop    r12
   16f79:	pop    r13
   16f7b:	pop    r14
   16f7d:	pop    r15
   16f7f:	ret    
   16f80:	lea    rax,[rip+0x24649]        # 3b5d0 <fnmatch_nocase>
   16f87:	mov    QWORD PTR [rsp+0x30],rax
   16f8c:	mov    rax,QWORD PTR [rip+0x6802d]        # 7efc0 <strcasecmp@GLIBC_2.2.5>
   16f93:	mov    QWORD PTR [rsp+0x38],rax
   16f98:	jmp    16a16 <ftp_retrieve_glob+0x76>
   16f9d:	nop    DWORD PTR [rax]
   16fa0:	cmp    QWORD PTR [rip+0x73150],0x0        # 8a0f8 <opt+0x78>
   16fa8:	jne    16a9c <ftp_retrieve_glob+0xfc>
   16fae:	jmp    16ab2 <ftp_retrieve_glob+0x112>
   16fb3:	nop    DWORD PTR [rax+rax*1+0x0]
   16fb8:	mov    rdi,QWORD PTR [rsp+0x8]
   16fbd:	call   3c480 <accept_url>
   16fc2:	test   al,al
   16fc4:	jne    16bb0 <ftp_retrieve_glob+0x210>
   16fca:	mov    edx,0x5
   16fcf:	lea    rsi,[rip+0x454aa]        # 5c480 <_IO_stdin_used+0x1480>
   16fd6:	xor    edi,edi
   16fd8:	call   c780 <dcgettext@plt>
   16fdd:	mov    rdx,QWORD PTR [rsp+0x8]
   16fe2:	mov    rsi,rax
   16fe5:	jmp    16a6c <ftp_retrieve_glob+0xcc>
   16fea:	nop    WORD PTR [rax+rax*1+0x0]
   16ff0:	mov    rax,QWORD PTR [rsp+0x48]
   16ff5:	mov    rdi,QWORD PTR [rax+0x8]
   16ff9:	call   4b5b0 <quote>
   16ffe:	mov    edx,0x5
   17003:	lea    rsi,[rip+0x44b7e]        # 5bb88 <_IO_stdin_used+0xb88>
   1700a:	xor    edi,edi
   1700c:	mov    r12,rax
   1700f:	call   c780 <dcgettext@plt>
   17014:	mov    rdx,r12
   17017:	mov    rsi,rax
   1701a:	jmp    16a6c <ftp_retrieve_glob+0xcc>
   1701f:	nop
   17020:	cmp    QWORD PTR [rip+0x73108],0x0        # 8a130 <opt+0xb0>
   17028:	jne    16b1b <ftp_retrieve_glob+0x17b>
   1702e:	jmp    16bb5 <ftp_retrieve_glob+0x215>
   17033:	nop    DWORD PTR [rax+rax*1+0x0]
   17038:	cmp    BYTE PTR [rip+0x7305b],0x0        # 8a09a <opt+0x1a>
   1703f:	je     17550 <ftp_retrieve_glob+0xbb0>
   17045:	mov    rsi,QWORD PTR [r12+0x28]
   1704a:	lea    rdi,[rsp+0x58]
   1704f:	call   36470 <set_local_file>
   17054:	mov    rdi,QWORD PTR [rsp+0x58]
   17059:	mov    BYTE PTR [rsp+0x8],0x0
   1705e:	mov    r15d,0x19
   17064:	test   rdi,rdi
   17067:	jne    16e80 <ftp_retrieve_glob+0x4e0>
   1706d:	mov    rdi,QWORD PTR [r12+0x28]
   17072:	call   4bdc0 <rpl_free>
   17077:	mov    QWORD PTR [r12+0x28],r13
   1707c:	mov    rdi,r14
   1707f:	mov    rsi,rbp
   17082:	call   39200 <url_set_file>
   17087:	mov    rdi,rbp
   1708a:	call   4bdc0 <rpl_free>
   1708f:	jmp    16d84 <ftp_retrieve_glob+0x3e4>
   17094:	nop    DWORD PTR [rax+0x0]
   17098:	mov    r8d,0x1
   1709e:	jmp    16d10 <ftp_retrieve_glob+0x370>
   170a3:	nop    DWORD PTR [rax+rax*1+0x0]
   170a8:	cmp    DWORD PTR [rsp+0x18],0x2
   170ad:	jne    16bee <ftp_retrieve_glob+0x24e>
   170b3:	mov    rsi,QWORD PTR [rbx+0x8]
   170b7:	mov    rax,QWORD PTR [rsp+0x38]
   170bc:	call   rax
   170be:	test   eax,eax
   170c0:	je     16be9 <ftp_retrieve_glob+0x249>
   170c6:	jmp    16a75 <ftp_retrieve_glob+0xd5>
   170cb:	nop    DWORD PTR [rax+rax*1+0x0]
   170d0:	lea    rdx,[rsp+0x60]
   170d5:	mov    edi,0x1
   170da:	call   c350 <__xstat@plt>
   170df:	test   eax,eax
   170e1:	jne    1714a <ftp_retrieve_glob+0x7aa>
   170e3:	mov    rdx,QWORD PTR [rsp+0xb8]
   170eb:	mov    rax,QWORD PTR [rbx+0x18]
   170ef:	test   DWORD PTR [r12+0x18],0xfffffffd
   170f8:	jne    175f0 <ftp_retrieve_glob+0xc50>
   170fe:	mov    rdi,QWORD PTR [rsp+0x90]
   17106:	cmp    rdi,QWORD PTR [rbx+0x10]
   1710a:	je     175f0 <ftp_retrieve_glob+0xc50>
   17110:	cmp    rdx,rax
   17113:	jl     17a43 <ftp_retrieve_glob+0x10a3>
   17119:	call   3e8e0 <number_to_static_string>
   1711e:	mov    edx,0x5
   17123:	lea    rsi,[rip+0x4545e]        # 5c588 <_IO_stdin_used+0x1588>
   1712a:	xor    edi,edi
   1712c:	mov    QWORD PTR [rsp+0x8],rax
   17131:	call   c780 <dcgettext@plt>
   17136:	mov    r8,QWORD PTR [rsp+0x8]
   1713b:	xor    edi,edi
   1713d:	mov    rsi,rax
   17140:	xor    eax,eax
   17142:	mov    rdx,r8
   17145:	call   2e0a0 <logprintf>
   1714a:	mov    eax,DWORD PTR [rbx]
   1714c:	cmp    eax,0x2
   1714f:	jne    1724d <ftp_retrieve_glob+0x8ad>
   17155:	cmp    BYTE PTR [rip+0x7301d],0x0        # 8a179 <opt+0xf9>
   1715c:	jne    16e28 <ftp_retrieve_glob+0x488>
   17162:	nop    WORD PTR [rax+rax*1+0x0]
   17168:	cmp    QWORD PTR [rbx+0x28],0x0
   1716d:	je     172d2 <ftp_retrieve_glob+0x932>
   17173:	mov    rsi,QWORD PTR [r12+0x28]
   17178:	mov    edi,0x1
   1717d:	lea    rdx,[rsp+0x60]
   17182:	call   c8f0 <__lxstat@plt>
   17187:	mov    rdi,QWORD PTR [rbx+0x28]
   1718b:	test   eax,eax
   1718d:	jne    171a3 <ftp_retrieve_glob+0x803>
   1718f:	mov    eax,DWORD PTR [rsp+0x78]
   17193:	and    eax,0xf000
   17198:	cmp    eax,0xa000
   1719d:	je     176e3 <ftp_retrieve_glob+0xd43>
   171a3:	call   4b5b0 <quote>
   171a8:	mov    rdi,QWORD PTR [r12+0x28]
   171ad:	mov    QWORD PTR [rsp+0x10],rax
   171b2:	call   4b5b0 <quote>
   171b7:	xor    edi,edi
   171b9:	mov    edx,0x5
   171be:	lea    rsi,[rip+0x449dd]        # 5bba2 <_IO_stdin_used+0xba2>
   171c5:	mov    QWORD PTR [rsp+0x8],rax
   171ca:	call   c780 <dcgettext@plt>
   171cf:	mov    r8,QWORD PTR [rsp+0x8]
   171d4:	mov    rcx,QWORD PTR [rsp+0x10]
   171d9:	xor    edi,edi
   171db:	mov    rsi,rax
   171de:	xor    eax,eax
   171e0:	mov    rdx,r8
   171e3:	call   2e0a0 <logprintf>
   171e8:	mov    rdi,QWORD PTR [r12+0x28]
   171ed:	call   c120 <unlink@plt>
   171f2:	mov    rsi,QWORD PTR [r12+0x28]
   171f7:	mov    rdi,QWORD PTR [rbx+0x28]
   171fb:	call   be70 <symlink@plt>
   17200:	cmp    eax,0xffffffff
   17203:	je     17757 <ftp_retrieve_glob+0xdb7>
   17209:	lea    rsi,[rip+0x4e7bf]        # 659cf <yy_accept+0x90f>
   17210:	xor    edi,edi
   17212:	call   2de60 <logputs>
   17217:	jmp    16cde <ftp_retrieve_glob+0x33e>
   1721c:	nop    DWORD PTR [rax+0x0]
   17220:	mov    rdi,QWORD PTR [r12+0x28]
   17225:	mov    r15d,0x19
   1722b:	call   4bdc0 <rpl_free>
   17230:	mov    QWORD PTR [r12+0x28],r13
   17235:	mov    rsi,rbp
   17238:	mov    rdi,r14
   1723b:	call   39200 <url_set_file>
   17240:	mov    rdi,rbp
   17243:	call   4bdc0 <rpl_free>
   17248:	jmp    16d91 <ftp_retrieve_glob+0x3f1>
   1724d:	ja     16ca6 <ftp_retrieve_glob+0x306>
   17253:	test   eax,eax
   17255:	jne    17038 <ftp_retrieve_glob+0x698>
   1725b:	movzx  r9d,BYTE PTR [rsp+0x18]
   17261:	xor    r8d,r8d
   17264:	mov    rdx,rbx
   17267:	mov    rcx,r12
   1726a:	mov    rsi,QWORD PTR [rsp+0x20]
   1726f:	mov    rdi,r14
   17272:	call   13880 <ftp_loop_internal>
   17277:	mov    rsi,QWORD PTR [r12+0x28]
   1727c:	lea    rdi,[rsp+0x58]
   17281:	mov    r15d,eax
   17284:	call   36470 <set_local_file>
   17289:	cmp    r15d,0x1
   1728d:	mov    rdi,QWORD PTR [rsp+0x58]
   17292:	sete   dl
   17295:	cmp    r15d,0x2b
   17299:	sete   al
   1729c:	or     edx,eax
   1729e:	mov    BYTE PTR [rsp+0x8],dl
   172a2:	test   rdi,rdi
   172a5:	jne    16e80 <ftp_retrieve_glob+0x4e0>
   172ab:	jmp    16d43 <ftp_retrieve_glob+0x3a3>
   172b0:	cmp    BYTE PTR [rip+0x72ec2],0x0        # 8a179 <opt+0xf9>
   172b7:	je     16d39 <ftp_retrieve_glob+0x399>
   172bd:	jmp    16d26 <ftp_retrieve_glob+0x386>
   172c2:	nop    WORD PTR [rax+rax*1+0x0]
   172c8:	or     eax,0x15
   172cb:	mov    edx,eax
   172cd:	jmp    16c7f <ftp_retrieve_glob+0x2df>
   172d2:	xor    edi,edi
   172d4:	mov    edx,0x5
   172d9:	lea    rsi,[rip+0x452e0]        # 5c5c0 <_IO_stdin_used+0x15c0>
   172e0:	call   c780 <dcgettext@plt>
   172e5:	mov    edi,0x1
   172ea:	mov    rsi,rax
   172ed:	call   2de60 <logputs>
   172f2:	jmp    16cde <ftp_retrieve_glob+0x33e>
   172f7:	mov    rdi,QWORD PTR [r14+0x48]
   172fb:	call   4b5b0 <quote>
   17300:	mov    edx,0x5
   17305:	lea    rsi,[rip+0x448f5]        # 5bc01 <_IO_stdin_used+0xc01>
   1730c:	xor    edi,edi
   1730e:	mov    r12,rax
   17311:	call   c780 <dcgettext@plt>
   17316:	mov    rdx,r12
   17319:	xor    edi,edi
   1731b:	mov    rsi,rax
   1731e:	xor    eax,eax
   17320:	call   2e0a0 <logprintf>
   17325:	mov    r13,QWORD PTR [rsp+0x50]
   1732a:	jmp    16f2a <ftp_retrieve_glob+0x58a>
   1732f:	nop
   17330:	cmp    BYTE PTR [rip+0x72d63],0x0        # 8a09a <opt+0x1a>
   17337:	mov    r13,QWORD PTR [rsp+0x28]
   1733c:	je     175c0 <ftp_retrieve_glob+0xc20>
   17342:	mov    ebx,DWORD PTR [rip+0x72d5c]        # 8a0a4 <opt+0x24>
   17348:	cmp    ebx,0xffffffff
   1734b:	je     1735b <ftp_retrieve_glob+0x9bb>
   1734d:	mov    ebp,DWORD PTR [rip+0x6c22d]        # 83580 <depth.8900>
   17353:	cmp    ebx,ebp
   17355:	jle    174cf <ftp_retrieve_glob+0xb2f>
   1735b:	lea    rax,[rsp+0xf0]
   17363:	mov    DWORD PTR [rsp+0x10],0x400
   1736b:	mov    QWORD PTR [rsp+0x18],rax
   17370:	mov    rbp,rax
   17373:	jmp    173c9 <ftp_retrieve_glob+0xa29>
   17375:	nop    DWORD PTR [rax]
   17378:	and    DWORD PTR [r12],0xfffffffd
   1737d:	mov    rdi,QWORD PTR [r14+0x40]
   17381:	call   4ba50 <xstrdup>
   17386:	mov    rsi,rbp
   17389:	mov    rdi,r14
   1738c:	mov    r15,rax
   1738f:	call   391c0 <url_set_dir>
   17394:	mov    rsi,QWORD PTR [rsp+0x20]
   17399:	mov    rdx,r12
   1739c:	mov    rdi,r14
   1739f:	mov    ecx,0x1
   173a4:	call   169a0 <ftp_retrieve_glob>
   173a9:	mov    rdi,r14
   173ac:	mov    rsi,r15
   173af:	call   391c0 <url_set_dir>
   173b4:	mov    rdi,r15
   173b7:	call   4bdc0 <rpl_free>
   173bc:	mov    r13,QWORD PTR [r13+0x38]
   173c0:	test   r13,r13
   173c3:	je     1758a <ftp_retrieve_glob+0xbea>
   173c9:	mov    rax,QWORD PTR [rip+0x72ee0]        # 8a2b0 <opt+0x230>
   173d0:	test   rax,rax
   173d3:	je     173e2 <ftp_retrieve_glob+0xa42>
   173d5:	cmp    rax,QWORD PTR [rip+0x73054]        # 8a430 <total_downloaded_bytes>
   173dc:	jl     178b3 <ftp_retrieve_glob+0xf13>
   173e2:	cmp    DWORD PTR [r13+0x0],0x1
   173e7:	jne    173bc <ftp_retrieve_glob+0xa1c>
   173e9:	mov    r15,QWORD PTR [r14+0x40]
   173ed:	mov    rdi,r15
   173f0:	call   c310 <strlen@plt>
   173f5:	mov    rbx,QWORD PTR [r13+0x8]
   173f9:	mov    QWORD PTR [rsp+0x8],rax
   173fe:	mov    rdi,rbx
   17401:	call   c310 <strlen@plt>
   17406:	mov    rdx,QWORD PTR [rsp+0x8]
   1740b:	lea    edx,[rdx+rax*1+0x2]
   1740f:	cmp    edx,DWORD PTR [rsp+0x10]
   17413:	jle    17442 <ftp_retrieve_glob+0xaa2>
   17415:	cmp    rbp,QWORD PTR [rsp+0x18]
   1741a:	je     176bf <ftp_retrieve_glob+0xd1f>
   17420:	movsxd rsi,edx
   17423:	mov    rdi,rbp
   17426:	mov    DWORD PTR [rsp+0x8],edx
   1742a:	call   4b870 <xrealloc>
   1742f:	mov    edx,DWORD PTR [rsp+0x8]
   17433:	mov    r15,QWORD PTR [r14+0x40]
   17437:	mov    rbp,rax
   1743a:	mov    rbx,QWORD PTR [r13+0x8]
   1743e:	mov    DWORD PTR [rsp+0x10],edx
   17442:	movzx  eax,BYTE PTR [r15]
   17446:	test   al,al
   17448:	je     1745d <ftp_retrieve_glob+0xabd>
   1744a:	cmp    al,0x2f
   1744c:	jne    17578 <ftp_retrieve_glob+0xbd8>
   17452:	cmp    BYTE PTR [r15+0x1],0x0
   17457:	jne    17578 <ftp_retrieve_glob+0xbd8>
   1745d:	mov    r9,rbx
   17460:	mov    r8,r15
   17463:	lea    rcx,[rip+0x44733]        # 5bb9d <_IO_stdin_used+0xb9d>
   1746a:	xor    eax,eax
   1746c:	mov    rdx,0xffffffffffffffff
   17473:	mov    esi,0x1
   17478:	mov    rdi,rbp
   1747b:	call   c950 <__sprintf_chk@plt>
   17480:	cmp    BYTE PTR [rip+0x72e34],0x0        # 8a2bb <opt+0x23b>
   17487:	jne    1777e <ftp_retrieve_glob+0xdde>
   1748d:	mov    rdi,rbp
   17490:	call   3c4e0 <accdir>
   17495:	test   al,al
   17497:	jne    17378 <ftp_retrieve_glob+0x9d8>
   1749d:	mov    rdi,rbp
   174a0:	call   4b5b0 <quote>
   174a5:	xor    edi,edi
   174a7:	mov    edx,0x5
   174ac:	lea    rsi,[rip+0x45245]        # 5c6f8 <_IO_stdin_used+0x16f8>
   174b3:	mov    r15,rax
   174b6:	call   c780 <dcgettext@plt>
   174bb:	mov    rdx,r15
   174be:	xor    edi,edi
   174c0:	mov    rsi,rax
   174c3:	xor    eax,eax
   174c5:	call   2e0a0 <logprintf>
   174ca:	jmp    173bc <ftp_retrieve_glob+0xa1c>
   174cf:	cmp    BYTE PTR [rip+0x72de5],0x0        # 8a2bb <opt+0x23b>
   174d6:	jne    179b6 <ftp_retrieve_glob+0x1016>
   174dc:	sub    ebp,0x1
   174df:	mov    DWORD PTR [rsp+0x10],r15d
   174e4:	mov    r13,QWORD PTR [rsp+0x50]
   174e9:	mov    DWORD PTR [rip+0x6c091],ebp        # 83580 <depth.8900>
   174ef:	jmp    16f2a <ftp_retrieve_glob+0x58a>
   174f4:	nop    DWORD PTR [rax+0x0]
   174f8:	mov    edx,0x5
   174fd:	lea    rsi,[rip+0x44f7c]        # 5c480 <_IO_stdin_used+0x1480>
   17504:	xor    edi,edi
   17506:	call   c780 <dcgettext@plt>
   1750b:	mov    rdx,r12
   1750e:	xor    edi,edi
   17510:	mov    rsi,rax
   17513:	xor    eax,eax
   17515:	call   2e0a0 <logprintf>
   1751a:	mov    rsi,rbp
   1751d:	mov    rdi,r13
   17520:	call   13560 <delelement>
   17525:	mov    QWORD PTR [rsp+0x48],rax
   1752a:	cmp    r12,QWORD PTR [rsp+0x8]
   1752f:	je     16a85 <ftp_retrieve_glob+0xe5>
   17535:	mov    rdi,r12
   17538:	call   4bdc0 <rpl_free>
   1753d:	mov    rax,QWORD PTR [rsp+0x48]
   17542:	jmp    16a85 <ftp_retrieve_glob+0xe5>
   17547:	nop    WORD PTR [rax+rax*1+0x0]
   17550:	mov    r15d,0x1
   17556:	mov    rdi,QWORD PTR [rbx+0x8]
   1755a:	call   4b5b0 <quote>
   1755f:	mov    edx,0x5
   17564:	lea    rsi,[rip+0x4465f]        # 5bbca <_IO_stdin_used+0xbca>
   1756b:	mov    QWORD PTR [rsp+0x8],rax
   17570:	jmp    16cc0 <ftp_retrieve_glob+0x320>
   17575:	nop    DWORD PTR [rax]
   17578:	mov    r9,rbx
   1757b:	mov    r8,r15
   1757e:	lea    rcx,[rip+0x44676]        # 5bbfb <_IO_stdin_used+0xbfb>
   17585:	jmp    1746a <ftp_retrieve_glob+0xaca>
   1758a:	cmp    rbp,QWORD PTR [rsp+0x18]
   1758f:	je     17599 <ftp_retrieve_glob+0xbf9>
   17591:	mov    rdi,rbp
   17594:	call   4bdc0 <rpl_free>
   17599:	mov    rax,QWORD PTR [rip+0x72d10]        # 8a2b0 <opt+0x230>
   175a0:	mov    r15d,0x19
   175a6:	test   rax,rax
   175a9:	je     175c0 <ftp_retrieve_glob+0xc20>
   175ab:	cmp    rax,QWORD PTR [rip+0x72e7e]        # 8a430 <total_downloaded_bytes>
   175b2:	mov    eax,0x2b
   175b7:	cmovl  r15d,eax
   175bb:	nop    DWORD PTR [rax+rax*1+0x0]
   175c0:	mov    ebp,DWORD PTR [rip+0x6bfba]        # 83580 <depth.8900>
   175c6:	jmp    174dc <ftp_retrieve_glob+0xb3c>
   175cb:	nop    DWORD PTR [rax+rax*1+0x0]
   175d0:	mov    rdi,QWORD PTR [r12+0x28]
   175d5:	xor    esi,esi
   175d7:	call   3bed0 <file_exists_p>
   175dc:	test   al,al
   175de:	jne    176d0 <ftp_retrieve_glob+0xd30>
   175e4:	mov    rax,QWORD PTR [rbx+0x18]
   175e8:	jmp    16d39 <ftp_retrieve_glob+0x399>
   175ed:	nop    DWORD PTR [rax]
   175f0:	mov    rdi,QWORD PTR [r12+0x28]
   175f5:	cmp    rdx,rax
   175f8:	jge    177cf <ftp_retrieve_glob+0xe2f>
   175fe:	call   4b5b0 <quote>
   17603:	mov    edx,0x5
   17608:	lea    rsi,[rip+0x44f39]        # 5c548 <_IO_stdin_used+0x1548>
   1760f:	xor    edi,edi
   17611:	mov    QWORD PTR [rsp+0x8],rax
   17616:	call   c780 <dcgettext@plt>
   1761b:	mov    r8,QWORD PTR [rsp+0x8]
   17620:	xor    edi,edi
   17622:	mov    rsi,rax
   17625:	xor    eax,eax
   17627:	mov    rdx,r8
   1762a:	call   2e0a0 <logprintf>
   1762f:	mov    BYTE PTR [rsp+0x18],r15b
   17634:	jmp    1714a <ftp_retrieve_glob+0x7aa>
   17639:	mov    BYTE PTR [rsp+0x10],r8b
   1763e:	call   be60 <chmod@plt>
   17643:	movzx  r8d,BYTE PTR [rsp+0x10]
   17649:	test   eax,eax
   1764b:	jne    17660 <ftp_retrieve_glob+0xcc0>
   1764d:	cmp    QWORD PTR [rsp+0x58],0x0
   17653:	jne    16d10 <ftp_retrieve_glob+0x370>
   17659:	jmp    16d43 <ftp_retrieve_glob+0x3a3>
   1765e:	xchg   ax,ax
   17660:	mov    r9,QWORD PTR [rsp+0x58]
   17665:	mov    edx,0x5
   1766a:	lea    rsi,[rip+0x44fc7]        # 5c638 <_IO_stdin_used+0x1638>
   17671:	xor    edi,edi
   17673:	mov    BYTE PTR [rsp+0x30],r8b
   17678:	mov    QWORD PTR [rsp+0x10],r9
   1767d:	call   c780 <dcgettext@plt>
   17682:	mov    r9,QWORD PTR [rsp+0x10]
   17687:	mov    edi,0x1
   1768c:	mov    rsi,rax
   1768f:	xor    eax,eax
   17691:	mov    rdx,r9
   17694:	call   2e0a0 <logprintf>
   17699:	movzx  r8d,BYTE PTR [rsp+0x30]
   1769f:	jmp    1764d <ftp_retrieve_glob+0xcad>
   176a1:	mov    rsi,rdi
   176a4:	xor    eax,eax
   176a6:	lea    rdi,[rip+0x44fb3]        # 5c660 <_IO_stdin_used+0x1660>
   176ad:	mov    BYTE PTR [rsp+0x10],r8b
   176b2:	call   2e250 <debug_logprintf>
   176b7:	movzx  r8d,BYTE PTR [rsp+0x10]
   176bd:	jmp    1764d <ftp_retrieve_glob+0xcad>
   176bf:	movsxd rdi,edx
   176c2:	mov    DWORD PTR [rsp+0x8],edx
   176c6:	call   4b850 <xmalloc>
   176cb:	jmp    1742f <ftp_retrieve_glob+0xa8f>
   176d0:	mov    rsi,QWORD PTR [rbx+0x18]
   176d4:	mov    rdi,QWORD PTR [rsp+0x58]
   176d9:	call   3bd40 <touch>
   176de:	jmp    16d43 <ftp_retrieve_glob+0x3a3>
   176e3:	call   c310 <strlen@plt>
   176e8:	lea    rdx,[rax+0x1]
   176ec:	mov    QWORD PTR [rsp+0x10],rax
   176f1:	cmp    rdx,0x3ff
   176f8:	ja     178ef <ftp_retrieve_glob+0xf4f>
   176fe:	lea    r9,[rsp+0xf0]
   17706:	mov    rdi,QWORD PTR [r12+0x28]
   1770b:	mov    rsi,r9
   1770e:	mov    QWORD PTR [rsp+0x8],r9
   17713:	call   c5b0 <readlink@plt>
   17718:	mov    r8,QWORD PTR [rsp+0x10]
   1771d:	mov    rcx,QWORD PTR [rbx+0x28]
   17721:	mov    r9,QWORD PTR [rsp+0x8]
   17726:	cmp    r8,rax
   17729:	je     17937 <ftp_retrieve_glob+0xf97>
   1772f:	mov    rdi,rcx
   17732:	jmp    171a3 <ftp_retrieve_glob+0x803>
   17737:	cmp    BYTE PTR [rip+0x72b7d],0x0        # 8a2bb <opt+0x23b>
   1773e:	jne    179dc <ftp_retrieve_glob+0x103c>
   17744:	mov    DWORD PTR [rip+0x6be36],eax        # 83580 <depth.8900>
   1774a:	mov    DWORD PTR [rsp+0x10],0x1a
   17752:	jmp    16f2a <ftp_retrieve_glob+0x58a>
   17757:	call   c740 <__errno_location@plt>
   1775c:	mov    edi,DWORD PTR [rax]
   1775e:	call   c540 <strerror@plt>
   17763:	lea    rsi,[rip+0x44453]        # 5bbbd <_IO_stdin_used+0xbbd>
   1776a:	mov    edi,0x1
   1776f:	mov    rdx,rax
   17772:	xor    eax,eax
   17774:	call   2e0a0 <logprintf>
   17779:	jmp    17209 <ftp_retrieve_glob+0x869>
   1777e:	xor    eax,eax
   17780:	lea    rdi,[rip+0x44f01]        # 5c688 <_IO_stdin_used+0x1688>
   17787:	call   2e250 <debug_logprintf>
   1778c:	cmp    BYTE PTR [rip+0x72b28],0x0        # 8a2bb <opt+0x23b>
   17793:	je     1748d <ftp_retrieve_glob+0xaed>
   17799:	mov    rdx,QWORD PTR [r13+0x8]
   1779d:	mov    rcx,rbp
   177a0:	mov    rsi,r15
   177a3:	xor    eax,eax
   177a5:	lea    rdi,[rip+0x44f14]        # 5c6c0 <_IO_stdin_used+0x16c0>
   177ac:	call   2e250 <debug_logprintf>
   177b1:	jmp    1748d <ftp_retrieve_glob+0xaed>
   177b6:	sub    DWORD PTR [rip+0x6bdc3],0x1        # 83580 <depth.8900>
   177bd:	mov    r13,QWORD PTR [rsp+0x50]
   177c2:	mov    DWORD PTR [rsp+0x10],0x2b
   177ca:	jmp    16f2a <ftp_retrieve_glob+0x58a>
   177cf:	call   4b5b0 <quote>
   177d4:	mov    edx,0x5
   177d9:	lea    rsi,[rip+0x44d28]        # 5c508 <_IO_stdin_used+0x1508>
   177e0:	xor    edi,edi
   177e2:	mov    r15,rax
   177e5:	call   c780 <dcgettext@plt>
   177ea:	mov    rdx,r15
   177ed:	xor    edi,edi
   177ef:	mov    rsi,rax
   177f2:	xor    eax,eax
   177f4:	call   2e0a0 <logprintf>
   177f9:	mov    eax,DWORD PTR [rbx]
   177fb:	test   eax,eax
   177fd:	jne    17813 <ftp_retrieve_glob+0xe73>
   177ff:	mov    rsi,QWORD PTR [r12+0x28]
   17804:	lea    rdi,[rsp+0x58]
   17809:	call   36470 <set_local_file>
   1780e:	jmp    16cf6 <ftp_retrieve_glob+0x356>
   17813:	cmp    eax,0x1
   17816:	jne    1782a <ftp_retrieve_glob+0xe8a>
   17818:	movzx  r15d,BYTE PTR [rip+0x7287a]        # 8a09a <opt+0x1a>
   17820:	test   r15b,r15b
   17823:	jne    177ff <ftp_retrieve_glob+0xe5f>
   17825:	jmp    17556 <ftp_retrieve_glob+0xbb6>
   1782a:	cmp    eax,0x2
   1782d:	jne    17a52 <ftp_retrieve_glob+0x10b2>
   17833:	movzx  r15d,BYTE PTR [rip+0x7293e]        # 8a179 <opt+0xf9>
   1783b:	test   r15b,r15b
   1783e:	jne    177ff <ftp_retrieve_glob+0xe5f>
   17840:	jmp    17168 <ftp_retrieve_glob+0x7c8>
   17845:	nop    DWORD PTR [rax]
   17848:	call   c740 <__errno_location@plt>
   1784d:	mov    edi,DWORD PTR [rax]
   1784f:	call   c540 <strerror@plt>
   17854:	mov    edi,0x7
   17859:	mov    rbx,rax
   1785c:	mov    rax,QWORD PTR [rsp+0x48]
   17861:	mov    rsi,QWORD PTR [rax+0x8]
   17865:	call   4b2b0 <quotearg_style>
   1786a:	mov    r13,QWORD PTR [r14+0x48]
   1786e:	mov    edx,0x5
   17873:	xor    edi,edi
   17875:	lea    rsi,[rip+0x44c34]        # 5c4b0 <_IO_stdin_used+0x14b0>
   1787c:	mov    r12,rax
   1787f:	call   c780 <dcgettext@plt>
   17884:	mov    r8,rbx
   17887:	mov    rcx,r12
   1788a:	mov    rdx,r13
   1788d:	mov    rsi,rax
   17890:	mov    edi,0x1
   17895:	xor    eax,eax
   17897:	call   2e0a0 <logprintf>
   1789c:	mov    rdi,QWORD PTR [rsp+0x50]
   178a1:	call   16930 <freefileinfo>
   178a6:	mov    DWORD PTR [rsp+0x10],0x28
   178ae:	jmp    16f53 <ftp_retrieve_glob+0x5b3>
   178b3:	mov    r15d,0x2b
   178b9:	cmp    rbp,QWORD PTR [rsp+0x18]
   178be:	jne    17591 <ftp_retrieve_glob+0xbf1>
   178c4:	jmp    175c0 <ftp_retrieve_glob+0xc20>
   178c9:	or     DWORD PTR [r12],0x1
   178ce:	mov    rsi,QWORD PTR [rsp+0x20]
   178d3:	xor    r9d,r9d
   178d6:	xor    r8d,r8d
   178d9:	mov    rcx,r12
   178dc:	xor    edx,edx
   178de:	mov    rdi,r14
   178e1:	call   13880 <ftp_loop_internal>
   178e6:	mov    DWORD PTR [rsp+0x10],eax
   178ea:	jmp    16f53 <ftp_retrieve_glob+0x5b3>
   178ef:	mov    rdi,rdx
   178f2:	mov    QWORD PTR [rsp+0x8],rdx
   178f7:	call   4b850 <xmalloc>
   178fc:	mov    rdx,QWORD PTR [rsp+0x8]
   17901:	mov    rdi,QWORD PTR [r12+0x28]
   17906:	mov    rsi,rax
   17909:	mov    QWORD PTR [rsp+0x8],rax
   1790e:	call   c5b0 <readlink@plt>
   17913:	mov    r8,QWORD PTR [rsp+0x10]
   17918:	mov    r9,QWORD PTR [rsp+0x8]
   1791d:	cmp    r8,rax
   17920:	je     17a11 <ftp_retrieve_glob+0x1071>
   17926:	mov    rdi,r9
   17929:	call   4bdc0 <rpl_free>
   1792e:	mov    rcx,QWORD PTR [rbx+0x28]
   17932:	jmp    1772f <ftp_retrieve_glob+0xd8f>
   17937:	mov    rsi,rcx
   1793a:	mov    rdx,r8
   1793d:	mov    rdi,r9
   17940:	mov    QWORD PTR [rsp+0x10],rcx
   17945:	mov    QWORD PTR [rsp+0x8],rcx
   1794a:	call   c870 <memcmp@plt>
   1794f:	mov    rcx,QWORD PTR [rsp+0x8]
   17954:	mov    r10,QWORD PTR [rsp+0x10]
   17959:	test   eax,eax
   1795b:	jne    1772f <ftp_retrieve_glob+0xd8f>
   17961:	mov    rdi,r10
   17964:	call   4b5b0 <quote>
   17969:	mov    rdi,QWORD PTR [r12+0x28]
   1796e:	mov    QWORD PTR [rsp+0x8],rax
   17973:	call   4b5b0 <quote>
   17978:	xor    edi,edi
   1797a:	mov    edx,0x5
   1797f:	lea    rsi,[rip+0x44c62]        # 5c5e8 <_IO_stdin_used+0x15e8>
   17986:	mov    r15,rax
   17989:	call   c780 <dcgettext@plt>
   1798e:	mov    rcx,QWORD PTR [rsp+0x8]
   17993:	xor    edi,edi
   17995:	mov    rdx,r15
   17998:	mov    rsi,rax
   1799b:	xor    eax,eax
   1799d:	call   2e0a0 <logprintf>
   179a2:	mov    rsi,QWORD PTR [r12+0x28]
   179a7:	lea    rdi,[rsp+0x58]
   179ac:	call   36470 <set_local_file>
   179b1:	jmp    16cf6 <ftp_retrieve_glob+0x356>
   179b6:	xor    edi,edi
   179b8:	mov    edx,0x5
   179bd:	lea    rsi,[rip+0x44d6c]        # 5c730 <_IO_stdin_used+0x1730>
   179c4:	call   c780 <dcgettext@plt>
   179c9:	mov    edx,ebx
   179cb:	mov    esi,ebp
   179cd:	mov    rdi,rax
   179d0:	xor    eax,eax
   179d2:	call   2e250 <debug_logprintf>
   179d7:	jmp    175c0 <ftp_retrieve_glob+0xc20>
   179dc:	mov    edx,0x5
   179e1:	lea    rsi,[rip+0x44af0]        # 5c4d8 <_IO_stdin_used+0x14d8>
   179e8:	xor    edi,edi
   179ea:	call   c780 <dcgettext@plt>
   179ef:	mov    edx,r15d
   179f2:	mov    esi,ebp
   179f4:	mov    rdi,rax
   179f7:	xor    eax,eax
   179f9:	call   2e250 <debug_logprintf>
   179fe:	mov    eax,DWORD PTR [rip+0x6bb7c]        # 83580 <depth.8900>
   17a04:	mov    r13,QWORD PTR [rsp+0x50]
   17a09:	sub    eax,0x1
   17a0c:	jmp    17744 <ftp_retrieve_glob+0xda4>
   17a11:	mov    rsi,QWORD PTR [rbx+0x28]
   17a15:	mov    rdi,r9
   17a18:	mov    rdx,r8
   17a1b:	mov    QWORD PTR [rsp+0x8],r9
   17a20:	call   c870 <memcmp@plt>
   17a25:	mov    r9,QWORD PTR [rsp+0x8]
   17a2a:	test   eax,eax
   17a2c:	jne    17926 <ftp_retrieve_glob+0xf86>
   17a32:	mov    rdi,r9
   17a35:	call   4bdc0 <rpl_free>
   17a3a:	mov    r10,QWORD PTR [rbx+0x28]
   17a3e:	jmp    17961 <ftp_retrieve_glob+0xfc1>
   17a43:	mov    rdi,QWORD PTR [r12+0x28]
   17a48:	jmp    175fe <ftp_retrieve_glob+0xc5e>
   17a4d:	call   c7b0 <__stack_chk_fail@plt>
   17a52:	xor    r15d,r15d
   17a55:	jmp    16ca6 <ftp_retrieve_glob+0x306>
   17a5a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000017a60 <ftp_loop>:
   17a60:	endbr64 
   17a64:	push   r15
   17a66:	pxor   xmm0,xmm0
   17a6a:	push   r14
   17a6c:	mov    r14,rdx
   17a6f:	push   r13
   17a71:	mov    r13,rsi
   17a74:	push   r12
   17a76:	mov    r12d,r9d
   17a79:	push   rbp
   17a7a:	mov    rbp,rdi
   17a7d:	push   rbx
   17a7e:	mov    rbx,rcx
   17a81:	sub    rsp,0x108
   17a88:	mov    rax,QWORD PTR fs:0x28
   17a91:	mov    QWORD PTR [rsp+0xf8],rax
   17a99:	xor    eax,eax
   17a9b:	mov    rax,QWORD PTR [rdi+0x48]
   17a9f:	movaps XMMWORD PTR [rsp+0x20],xmm0
   17aa4:	lea    r15,[rsp+0x20]
   17aa9:	movaps XMMWORD PTR [rsp+0x30],xmm0
   17aae:	mov    edx,DWORD PTR [rsp+0x140]
   17ab5:	mov    DWORD PTR [rsp+0x28],0xffffffff
   17abd:	mov    DWORD PTR [rcx],0x0
   17ac3:	mov    DWORD PTR [rsp+0x20],0x1
   17acb:	mov    DWORD PTR [rsp+0x38],0x0
   17ad3:	mov    QWORD PTR [rsp+0x50],r8
   17ad8:	movaps XMMWORD PTR [rsp+0x40],xmm0
   17add:	cmp    BYTE PTR [rax],0x0
   17ae0:	jne    17aeb <ftp_loop+0x8b>
   17ae2:	test   r9b,r9b
   17ae5:	je     17bd0 <ftp_loop+0x170>
   17aeb:	test   dl,dl
   17aed:	jne    17b18 <ftp_loop+0xb8>
   17aef:	test   r12b,r12b
   17af2:	jne    17b0a <ftp_loop+0xaa>
   17af4:	cmp    BYTE PTR [rip+0x727c1],0x0        # 8a2bc <opt+0x23c>
   17afb:	jne    17b0a <ftp_loop+0xaa>
   17afd:	cmp    BYTE PTR [rip+0x728b9],0x0        # 8a3bd <opt+0x33d>
   17b04:	je     17c10 <ftp_loop+0x1b0>
   17b0a:	mov    ecx,0x2
   17b0f:	jmp    17b51 <ftp_loop+0xf1>
   17b11:	nop    DWORD PTR [rax+0x0]
   17b18:	mov    rdx,QWORD PTR [rbp+0x20]
   17b1c:	mov    esi,0x2f
   17b21:	mov    rdi,rdx
   17b24:	mov    QWORD PTR [rsp+0x8],rdx
   17b29:	call   c460 <strrchr@plt>
   17b2e:	mov    rdx,QWORD PTR [rsp+0x8]
   17b33:	test   rax,rax
   17b36:	mov    rdi,rax
   17b39:	cmove  rdi,rdx
   17b3d:	call   3c770 <has_wildcards_p>
   17b42:	test   r12b,r12b
   17b45:	jne    17c30 <ftp_loop+0x1d0>
   17b4b:	test   al,al
   17b4d:	je     17af4 <ftp_loop+0x94>
   17b4f:	xor    ecx,ecx
   17b51:	mov    rdx,r15
   17b54:	mov    rsi,r13
   17b57:	mov    rdi,rbp
   17b5a:	call   169a0 <ftp_retrieve_glob>
   17b5f:	mov    r12d,eax
   17b62:	cmp    r12d,0x7
   17b66:	je     17c00 <ftp_loop+0x1a0>
   17b6c:	cmp    r12d,0x19
   17b70:	je     17c00 <ftp_loop+0x1a0>
   17b76:	mov    edi,DWORD PTR [rsp+0x28]
   17b7a:	cmp    edi,0xffffffff
   17b7d:	je     17b84 <ftp_loop+0x124>
   17b7f:	call   f400 <fd_close>
   17b84:	mov    rdi,QWORD PTR [rsp+0x40]
   17b89:	call   4bdc0 <rpl_free>
   17b8e:	mov    rdi,QWORD PTR [rsp+0x48]
   17b93:	mov    QWORD PTR [rsp+0x40],0x0
   17b9c:	call   4bdc0 <rpl_free>
   17ba1:	mov    rax,QWORD PTR [rsp+0xf8]
   17ba9:	xor    rax,QWORD PTR fs:0x28
   17bb2:	jne    17d58 <ftp_loop+0x2f8>
   17bb8:	add    rsp,0x108
   17bbf:	mov    eax,r12d
   17bc2:	pop    rbx
   17bc3:	pop    rbp
   17bc4:	pop    r12
   17bc6:	pop    r13
   17bc8:	pop    r14
   17bca:	pop    r15
   17bcc:	ret    
   17bcd:	nop    DWORD PTR [rax]
   17bd0:	lea    rcx,[rsp+0x18]
   17bd5:	mov    rdx,r15
   17bd8:	call   16790 <ftp_get_listing>
   17bdd:	mov    r12d,eax
   17be0:	cmp    eax,0x19
   17be3:	jne    17b62 <ftp_loop+0x102>
   17be9:	cmp    BYTE PTR [rip+0x726eb],0x0        # 8a2db <opt+0x25b>
   17bf0:	jne    17c40 <ftp_loop+0x1e0>
   17bf2:	mov    rdi,QWORD PTR [rsp+0x18]
   17bf7:	call   16930 <freefileinfo>
   17bfc:	nop    DWORD PTR [rax+0x0]
   17c00:	or     DWORD PTR [rbx],0x2
   17c03:	mov    r12d,0x19
   17c09:	jmp    17b76 <ftp_loop+0x116>
   17c0e:	xchg   ax,ax
   17c10:	xor    r9d,r9d
   17c13:	mov    r8,r14
   17c16:	mov    rcx,r15
   17c19:	xor    edx,edx
   17c1b:	mov    rsi,r13
   17c1e:	mov    rdi,rbp
   17c21:	call   13880 <ftp_loop_internal>
   17c26:	mov    r12d,eax
   17c29:	jmp    17b62 <ftp_loop+0x102>
   17c2e:	xchg   ax,ax
   17c30:	test   al,al
   17c32:	jne    17b4f <ftp_loop+0xef>
   17c38:	jmp    17b0a <ftp_loop+0xaa>
   17c3d:	nop    DWORD PTR [rax]
   17c40:	cmp    BYTE PTR [rip+0x724a1],0x0        # 8a0e8 <opt+0x68>
   17c47:	jne    17bf2 <ftp_loop+0x192>
   17c49:	mov    rdi,QWORD PTR [rip+0x72530]        # 8a180 <opt+0x100>
   17c50:	cmp    BYTE PTR [rip+0x72781],0x0        # 8a3d8 <opt+0x358>
   17c57:	cmovne r13,rbp
   17c5b:	test   rdi,rdi
   17c5e:	je     17c97 <ftp_loop+0x237>
   17c60:	call   4ba50 <xstrdup>
   17c65:	mov    r13,rax
   17c68:	mov    rdx,QWORD PTR [rsp+0x18]
   17c6d:	mov    rsi,rbp
   17c70:	mov    rdi,r13
   17c73:	call   1d280 <ftp_index>
   17c78:	mov    r12d,eax
   17c7b:	cmp    eax,0x7
   17c7e:	je     17cb0 <ftp_loop+0x250>
   17c80:	mov    rdi,r13
   17c83:	call   4bdc0 <rpl_free>
   17c88:	mov    rdi,QWORD PTR [rsp+0x18]
   17c8d:	call   16930 <freefileinfo>
   17c92:	jmp    17b62 <ftp_loop+0x102>
   17c97:	mov    rdi,QWORD PTR [rsp+0x48]
   17c9c:	test   rdi,rdi
   17c9f:	jne    17c60 <ftp_loop+0x200>
   17ca1:	mov    rdi,r13
   17ca4:	xor    esi,esi
   17ca6:	call   37670 <url_file_name>
   17cab:	mov    r13,rax
   17cae:	jmp    17c68 <ftp_loop+0x208>
   17cb0:	mov    eax,DWORD PTR [rip+0x723ca]        # 8a080 <opt>
   17cb6:	test   eax,eax
   17cb8:	je     17c80 <ftp_loop+0x220>
   17cba:	cmp    QWORD PTR [rip+0x724be],0x0        # 8a180 <opt+0x100>
   17cc2:	je     17cf6 <ftp_loop+0x296>
   17cc4:	mov    rdi,r13
   17cc7:	call   4b5b0 <quote>
   17ccc:	xor    edi,edi
   17cce:	mov    edx,0x5
   17cd3:	lea    rsi,[rip+0x43f42]        # 5bc1c <_IO_stdin_used+0xc1c>
   17cda:	mov    r14,rax
   17cdd:	call   c780 <dcgettext@plt>
   17ce2:	mov    rdx,r14
   17ce5:	mov    edi,0x1
   17cea:	mov    rsi,rax
   17ced:	xor    eax,eax
   17cef:	call   2e0a0 <logprintf>
   17cf4:	jmp    17c80 <ftp_loop+0x220>
   17cf6:	mov    edi,0x1
   17cfb:	lea    rdx,[rsp+0x60]
   17d00:	mov    rsi,r13
   17d03:	call   c350 <__xstat@plt>
   17d08:	or     rdi,0xffffffffffffffff
   17d0c:	test   eax,eax
   17d0e:	jne    17d18 <ftp_loop+0x2b8>
   17d10:	mov    rdi,QWORD PTR [rsp+0x90]
   17d18:	call   3e8e0 <number_to_static_string>
   17d1d:	mov    rdi,r13
   17d20:	mov    r15,rax
   17d23:	call   4b5b0 <quote>
   17d28:	xor    edi,edi
   17d2a:	mov    edx,0x5
   17d2f:	lea    rsi,[rip+0x44a32]        # 5c768 <_IO_stdin_used+0x1768>
   17d36:	mov    r14,rax
   17d39:	call   c780 <dcgettext@plt>
   17d3e:	mov    rcx,r15
   17d41:	mov    rdx,r14
   17d44:	mov    edi,0x1
   17d49:	mov    rsi,rax
   17d4c:	xor    eax,eax
   17d4e:	call   2e0a0 <logprintf>
   17d53:	jmp    17c80 <ftp_loop+0x220>
   17d58:	call   c7b0 <__stack_chk_fail@plt>
   17d5d:	nop    DWORD PTR [rax]

0000000000017d60 <yy_get_previous_state>:
   17d60:	mov    rax,QWORD PTR [rip+0x6b851]        # 835b8 <yy_c_buf_p>
   17d67:	mov    r10,QWORD PTR [rip+0x722d2]        # 8a040 <yytext>
   17d6e:	push   r15
   17d70:	push   r14
   17d72:	mov    r11d,DWORD PTR [rip+0x6b833]        # 835ac <yy_start>
   17d79:	push   r13
   17d7b:	push   r12
   17d7d:	push   rbp
   17d7e:	push   rbx
   17d7f:	mov    QWORD PTR [rsp-0x8],rax
   17d84:	cmp    r10,rax
   17d87:	jae    17e6f <yy_get_previous_state+0x10f>
   17d8d:	mov    r14d,DWORD PTR [rip+0x6b814]        # 835a8 <yy_last_accepting_state>
   17d94:	xor    r12d,r12d
   17d97:	mov    r13,QWORD PTR [rip+0x6b802]        # 835a0 <yy_last_accepting_cpos>
   17d9e:	lea    rbp,[rip+0x4d31b]        # 650c0 <yy_accept>
   17da5:	lea    r8,[rip+0x4c8b4]        # 64660 <yy_base>
   17dac:	lea    rdi,[rip+0x44f2d]        # 5cce0 <yy_chk>
   17db3:	mov    edx,r11d
   17db6:	lea    r9,[rip+0x4bfa3]        # 63d60 <yy_def>
   17dbd:	lea    rbx,[rip+0x4d19c]        # 64f60 <yy_meta>
   17dc4:	nop    DWORD PTR [rax+0x0]
   17dc8:	movzx  eax,BYTE PTR [r10]
   17dcc:	test   al,al
   17dce:	je     17e80 <yy_get_previous_state+0x120>
   17dd4:	lea    rsi,[rip+0x4d1e5]        # 64fc0 <yy_ec>
   17ddb:	movzx  ecx,BYTE PTR [rsi+rax*1]
   17ddf:	mov    esi,ecx
   17de1:	movsxd rdx,edx
   17de4:	mov    eax,0x1
   17de9:	cmp    WORD PTR [rbp+rdx*2+0x0],0x0
   17def:	cmovne r12d,eax
   17df3:	movsx  eax,WORD PTR [r8+rdx*2]
   17df8:	cmovne r13,r10
   17dfc:	cmovne r14d,edx
   17e00:	add    eax,ecx
   17e02:	cdqe   
   17e04:	movsx  r15d,WORD PTR [rdi+rax*2]
   17e09:	cmp    r15d,edx
   17e0c:	je     17e3d <yy_get_previous_state+0xdd>
   17e0e:	xchg   ax,ax
   17e10:	movsx  edx,WORD PTR [r9+rdx*2]
   17e15:	mov    r11d,edx
   17e18:	cmp    dx,0x44e
   17e1d:	jle    17e26 <yy_get_previous_state+0xc6>
   17e1f:	movsxd rcx,ecx
   17e22:	movzx  esi,BYTE PTR [rbx+rcx*1]
   17e26:	movsxd rdx,edx
   17e29:	movzx  ecx,sil
   17e2d:	movsx  eax,WORD PTR [r8+rdx*2]
   17e32:	add    eax,ecx
   17e34:	cdqe   
   17e36:	cmp    r11w,WORD PTR [rdi+rax*2]
   17e3b:	jne    17e10 <yy_get_previous_state+0xb0>
   17e3d:	lea    rsi,[rip+0x486dc]        # 60520 <yy_nxt>
   17e44:	add    r10,0x1
   17e48:	movsx  eax,WORD PTR [rsi+rax*2]
   17e4c:	mov    edx,eax
   17e4e:	cmp    r10,QWORD PTR [rsp-0x8]
   17e53:	jne    17dc8 <yy_get_previous_state+0x68>
   17e59:	mov    r11d,eax
   17e5c:	test   r12b,r12b
   17e5f:	je     17e6f <yy_get_previous_state+0x10f>
   17e61:	mov    DWORD PTR [rip+0x6b740],r14d        # 835a8 <yy_last_accepting_state>
   17e68:	mov    QWORD PTR [rip+0x6b731],r13        # 835a0 <yy_last_accepting_cpos>
   17e6f:	pop    rbx
   17e70:	mov    eax,r11d
   17e73:	pop    rbp
   17e74:	pop    r12
   17e76:	pop    r13
   17e78:	pop    r14
   17e7a:	pop    r15
   17e7c:	ret    
   17e7d:	nop    DWORD PTR [rax]
   17e80:	mov    ecx,0x1
   17e85:	mov    esi,0x1
   17e8a:	jmp    17de1 <yy_get_previous_state+0x81>
   17e8f:	nop

0000000000017e90 <yy_fatal_error>:
   17e90:	push   rax
   17e91:	pop    rax
   17e92:	lea    rdx,[rip+0x437c2]        # 5b65b <_IO_stdin_used+0x65b>
   17e99:	mov    esi,0x1
   17e9e:	xor    eax,eax
   17ea0:	sub    rsp,0x8
   17ea4:	mov    rcx,rdi
   17ea7:	mov    rdi,QWORD PTR [rip+0x6b632]        # 834e0 <stderr@@GLIBC_2.2.5>
   17eae:	call   bfd0 <__fprintf_chk@plt>
   17eb3:	mov    edi,0x2
   17eb8:	call   c060 <exit@plt>
   17ebd:	nop    DWORD PTR [rax]

0000000000017ec0 <yyensure_buffer_stack>:
   17ec0:	push   rbp
   17ec1:	push   rbx
   17ec2:	sub    rsp,0x8
   17ec6:	mov    rdi,QWORD PTR [rip+0x6b6fb]        # 835c8 <yy_buffer_stack>
   17ecd:	test   rdi,rdi
   17ed0:	je     17f40 <yyensure_buffer_stack+0x80>
   17ed2:	mov    rax,QWORD PTR [rip+0x6b6f7]        # 835d0 <yy_buffer_stack_max>
   17ed9:	lea    rdx,[rax-0x1]
   17edd:	cmp    rdx,QWORD PTR [rip+0x6b6f4]        # 835d8 <yy_buffer_stack_top>
   17ee4:	jbe    17ef0 <yyensure_buffer_stack+0x30>
   17ee6:	add    rsp,0x8
   17eea:	pop    rbx
   17eeb:	pop    rbp
   17eec:	ret    
   17eed:	nop    DWORD PTR [rax]
   17ef0:	lea    rbx,[rax+0x8]
   17ef4:	lea    rbp,[rbx*8+0x0]
   17efc:	mov    rsi,rbp
   17eff:	call   ca20 <realloc@plt>
   17f04:	mov    QWORD PTR [rip+0x6b6bd],rax        # 835c8 <yy_buffer_stack>
   17f0b:	test   rax,rax
   17f0e:	je     17f78 <yyensure_buffer_stack+0xb8>
   17f10:	lea    rax,[rax+rbp*1-0x40]
   17f15:	pxor   xmm0,xmm0
   17f19:	mov    QWORD PTR [rip+0x6b6b0],rbx        # 835d0 <yy_buffer_stack_max>
   17f20:	movups XMMWORD PTR [rax],xmm0
   17f23:	movups XMMWORD PTR [rax+0x10],xmm0
   17f27:	movups XMMWORD PTR [rax+0x20],xmm0
   17f2b:	movups XMMWORD PTR [rax+0x30],xmm0
   17f2f:	add    rsp,0x8
   17f33:	pop    rbx
   17f34:	pop    rbp
   17f35:	ret    
   17f36:	nop    WORD PTR cs:[rax+rax*1+0x0]
   17f40:	mov    esi,0x1
   17f45:	mov    edi,0x8
   17f4a:	call   c880 <calloc@plt>
   17f4f:	mov    QWORD PTR [rip+0x6b672],rax        # 835c8 <yy_buffer_stack>
   17f56:	test   rax,rax
   17f59:	je     17f78 <yyensure_buffer_stack+0xb8>
   17f5b:	mov    QWORD PTR [rip+0x6b66a],0x1        # 835d0 <yy_buffer_stack_max>
   17f66:	mov    QWORD PTR [rip+0x6b667],0x0        # 835d8 <yy_buffer_stack_top>
   17f71:	add    rsp,0x8
   17f75:	pop    rbx
   17f76:	pop    rbp
   17f77:	ret    
   17f78:	lea    rdi,[rip+0x44b09]        # 5ca88 <_IO_stdin_used+0x1a88>
   17f7f:	call   17e90 <yy_fatal_error>
   17f84:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   17f8f:	nop

0000000000017f90 <yy_switch_to_buffer>:
   17f90:	endbr64 
   17f94:	push   rbx
   17f95:	mov    rbx,rdi
   17f98:	call   17ec0 <yyensure_buffer_stack>
   17f9d:	mov    rax,QWORD PTR [rip+0x6b624]        # 835c8 <yy_buffer_stack>
   17fa4:	test   rax,rax
   17fa7:	je     18018 <yy_switch_to_buffer+0x88>
   17fa9:	mov    rdx,QWORD PTR [rip+0x6b628]        # 835d8 <yy_buffer_stack_top>
   17fb0:	lea    rax,[rax+rdx*8]
   17fb4:	mov    rdx,QWORD PTR [rax]
   17fb7:	cmp    rdx,rbx
   17fba:	je     18012 <yy_switch_to_buffer+0x82>
   17fbc:	test   rdx,rdx
   17fbf:	je     17fe1 <yy_switch_to_buffer+0x51>
   17fc1:	mov    rcx,QWORD PTR [rip+0x6b5f0]        # 835b8 <yy_c_buf_p>
   17fc8:	movzx  edx,BYTE PTR [rip+0x6b5f5]        # 835c4 <yy_hold_char>
   17fcf:	mov    BYTE PTR [rcx],dl
   17fd1:	mov    rdx,QWORD PTR [rax]
   17fd4:	mov    QWORD PTR [rdx+0x10],rcx
   17fd8:	mov    ecx,DWORD PTR [rip+0x6b5e2]        # 835c0 <yy_n_chars>
   17fde:	mov    DWORD PTR [rdx+0x1c],ecx
   17fe1:	mov    QWORD PTR [rax],rbx
   17fe4:	mov    eax,DWORD PTR [rbx+0x1c]
   17fe7:	mov    rdx,QWORD PTR [rbx]
   17fea:	mov    DWORD PTR [rip+0x6b5d0],eax        # 835c0 <yy_n_chars>
   17ff0:	mov    rax,QWORD PTR [rbx+0x10]
   17ff4:	mov    QWORD PTR [rip+0x6b59d],rdx        # 83598 <yyin>
   17ffb:	mov    QWORD PTR [rip+0x6b5b6],rax        # 835b8 <yy_c_buf_p>
   18002:	mov    QWORD PTR [rip+0x72037],rax        # 8a040 <yytext>
   18009:	movzx  eax,BYTE PTR [rax]
   1800c:	mov    BYTE PTR [rip+0x6b5b2],al        # 835c4 <yy_hold_char>
   18012:	pop    rbx
   18013:	ret    
   18014:	nop    DWORD PTR [rax+0x0]
   18018:	test   rbx,rbx
   1801b:	je     18012 <yy_switch_to_buffer+0x82>
   1801d:	mov    rax,QWORD PTR [rip+0x6b5b4]        # 835d8 <yy_buffer_stack_top>
   18024:	shl    rax,0x3
   18028:	jmp    17fe1 <yy_switch_to_buffer+0x51>
   1802a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000018030 <yy_delete_buffer>:
   18030:	endbr64 
   18034:	test   rdi,rdi
   18037:	je     18090 <yy_delete_buffer+0x60>
   18039:	mov    rax,QWORD PTR [rip+0x6b588]        # 835c8 <yy_buffer_stack>
   18040:	push   rbp
   18041:	mov    rbp,rdi
   18044:	test   rax,rax
   18047:	je     18059 <yy_delete_buffer+0x29>
   18049:	mov    rdx,QWORD PTR [rip+0x6b588]        # 835d8 <yy_buffer_stack_top>
   18050:	lea    rax,[rax+rdx*8]
   18054:	cmp    rdi,QWORD PTR [rax]
   18057:	je     18070 <yy_delete_buffer+0x40>
   18059:	mov    eax,DWORD PTR [rbp+0x20]
   1805c:	test   eax,eax
   1805e:	jne    1807e <yy_delete_buffer+0x4e>
   18060:	mov    rdi,rbp
   18063:	pop    rbp
   18064:	jmp    4bdc0 <rpl_free>
   18069:	nop    DWORD PTR [rax+0x0]
   18070:	mov    QWORD PTR [rax],0x0
   18077:	mov    eax,DWORD PTR [rbp+0x20]
   1807a:	test   eax,eax
   1807c:	je     18060 <yy_delete_buffer+0x30>
   1807e:	mov    rdi,QWORD PTR [rbp+0x8]
   18082:	call   4bdc0 <rpl_free>
   18087:	mov    rdi,rbp
   1808a:	pop    rbp
   1808b:	jmp    4bdc0 <rpl_free>
   18090:	ret    
   18091:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1809c:	nop    DWORD PTR [rax+0x0]

00000000000180a0 <yy_flush_buffer>:
   180a0:	endbr64 
   180a4:	test   rdi,rdi
   180a7:	je     180ee <yy_flush_buffer+0x4e>
   180a9:	mov    rax,QWORD PTR [rdi+0x8]
   180ad:	mov    DWORD PTR [rdi+0x1c],0x0
   180b4:	mov    rdx,QWORD PTR [rip+0x6b50d]        # 835c8 <yy_buffer_stack>
   180bb:	mov    BYTE PTR [rax],0x0
   180be:	mov    rax,QWORD PTR [rdi+0x8]
   180c2:	mov    BYTE PTR [rax+0x1],0x0
   180c6:	mov    rax,QWORD PTR [rdi+0x8]
   180ca:	mov    DWORD PTR [rdi+0x28],0x1
   180d1:	mov    QWORD PTR [rdi+0x10],rax
   180d5:	mov    DWORD PTR [rdi+0x38],0x0
   180dc:	test   rdx,rdx
   180df:	je     180ee <yy_flush_buffer+0x4e>
   180e1:	mov    rcx,QWORD PTR [rip+0x6b4f0]        # 835d8 <yy_buffer_stack_top>
   180e8:	cmp    rdi,QWORD PTR [rdx+rcx*8]
   180ec:	je     180f0 <yy_flush_buffer+0x50>
   180ee:	ret    
   180ef:	nop
   180f0:	mov    edx,DWORD PTR [rdi+0x1c]
   180f3:	mov    QWORD PTR [rip+0x6b4be],rax        # 835b8 <yy_c_buf_p>
   180fa:	mov    QWORD PTR [rip+0x71f3f],rax        # 8a040 <yytext>
   18101:	mov    DWORD PTR [rip+0x6b4b9],edx        # 835c0 <yy_n_chars>
   18107:	mov    rdx,QWORD PTR [rdi]
   1810a:	mov    QWORD PTR [rip+0x6b487],rdx        # 83598 <yyin>
   18111:	movzx  eax,BYTE PTR [rax]
   18114:	mov    BYTE PTR [rip+0x6b4aa],al        # 835c4 <yy_hold_char>
   1811a:	ret    
   1811b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000018120 <yy_init_buffer>:
   18120:	push   rbp
   18121:	mov    rbp,rsi
   18124:	push   rbx
   18125:	mov    rbx,rdi
   18128:	sub    rsp,0x8
   1812c:	call   c740 <__errno_location@plt>
   18131:	mov    rdi,rbx
   18134:	mov    esi,DWORD PTR [rax]
   18136:	mov    r8,rax
   18139:	call   180a0 <yy_flush_buffer>
   1813e:	mov    rax,QWORD PTR [rip+0x6b483]        # 835c8 <yy_buffer_stack>
   18145:	mov    QWORD PTR [rbx],rbp
   18148:	mov    DWORD PTR [rbx+0x34],0x1
   1814f:	test   rax,rax
   18152:	je     18161 <yy_init_buffer+0x41>
   18154:	mov    rdx,QWORD PTR [rip+0x6b47d]        # 835d8 <yy_buffer_stack_top>
   1815b:	cmp    rbx,QWORD PTR [rax+rdx*8]
   1815f:	je     18169 <yy_init_buffer+0x49>
   18161:	mov    QWORD PTR [rbx+0x2c],0x1
   18169:	mov    DWORD PTR [rbx+0x24],0x0
   18170:	mov    DWORD PTR [r8],esi
   18173:	add    rsp,0x8
   18177:	pop    rbx
   18178:	pop    rbp
   18179:	ret    
   1817a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000018180 <yy_create_buffer>:
   18180:	endbr64 
   18184:	push   r12
   18186:	push   rbp
   18187:	mov    rbp,rdi
   1818a:	mov    edi,0x40
   1818f:	push   rbx
   18190:	mov    ebx,esi
   18192:	call   c0e0 <malloc@plt>
   18197:	test   rax,rax
   1819a:	je     181d3 <yy_create_buffer+0x53>
   1819c:	mov    DWORD PTR [rax+0x18],ebx
   1819f:	lea    edi,[rbx+0x2]
   181a2:	mov    r12,rax
   181a5:	movsxd rdi,edi
   181a8:	call   c0e0 <malloc@plt>
   181ad:	mov    QWORD PTR [r12+0x8],rax
   181b2:	test   rax,rax
   181b5:	je     181d3 <yy_create_buffer+0x53>
   181b7:	mov    DWORD PTR [r12+0x20],0x1
   181c0:	mov    rsi,rbp
   181c3:	mov    rdi,r12
   181c6:	call   18120 <yy_init_buffer>
   181cb:	mov    rax,r12
   181ce:	pop    rbx
   181cf:	pop    rbp
   181d0:	pop    r12
   181d2:	ret    
   181d3:	lea    rdi,[rip+0x448e6]        # 5cac0 <_IO_stdin_used+0x1ac0>
   181da:	call   17e90 <yy_fatal_error>
   181df:	nop

00000000000181e0 <yyrestart>:
   181e0:	endbr64 
   181e4:	mov    rax,QWORD PTR [rip+0x6b3dd]        # 835c8 <yy_buffer_stack>
   181eb:	push   r12
   181ed:	mov    r12,rdi
   181f0:	push   rbp
   181f1:	push   rbx
   181f2:	test   rax,rax
   181f5:	je     18250 <yyrestart+0x70>
   181f7:	mov    rdx,QWORD PTR [rip+0x6b3da]        # 835d8 <yy_buffer_stack_top>
   181fe:	lea    rbx,[rax+rdx*8]
   18202:	mov    rbp,QWORD PTR [rbx]
   18205:	test   rbp,rbp
   18208:	je     18250 <yyrestart+0x70>
   1820a:	mov    rsi,r12
   1820d:	mov    rdi,rbp
   18210:	call   18120 <yy_init_buffer>
   18215:	mov    rdx,QWORD PTR [rbx]
   18218:	pop    rbx
   18219:	pop    rbp
   1821a:	pop    r12
   1821c:	mov    eax,DWORD PTR [rdx+0x1c]
   1821f:	mov    DWORD PTR [rip+0x6b39b],eax        # 835c0 <yy_n_chars>
   18225:	mov    rax,QWORD PTR [rdx+0x10]
   18229:	mov    rdx,QWORD PTR [rdx]
   1822c:	mov    QWORD PTR [rip+0x6b385],rax        # 835b8 <yy_c_buf_p>
   18233:	mov    QWORD PTR [rip+0x71e06],rax        # 8a040 <yytext>
   1823a:	mov    QWORD PTR [rip+0x6b357],rdx        # 83598 <yyin>
   18241:	movzx  eax,BYTE PTR [rax]
   18244:	mov    BYTE PTR [rip+0x6b37a],al        # 835c4 <yy_hold_char>
   1824a:	ret    
   1824b:	nop    DWORD PTR [rax+rax*1+0x0]
   18250:	call   17ec0 <yyensure_buffer_stack>
   18255:	mov    rbp,QWORD PTR [rip+0x6b36c]        # 835c8 <yy_buffer_stack>
   1825c:	mov    esi,0x4000
   18261:	mov    rax,QWORD PTR [rip+0x6b370]        # 835d8 <yy_buffer_stack_top>
   18268:	mov    rdi,QWORD PTR [rip+0x6b329]        # 83598 <yyin>
   1826f:	lea    rbx,[rbp+rax*8+0x0]
   18274:	call   18180 <yy_create_buffer>
   18279:	test   rbp,rbp
   1827c:	mov    QWORD PTR [rbx],rax
   1827f:	cmovne rbp,rax
   18283:	jmp    1820a <yyrestart+0x2a>
   18285:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000018290 <yylex>:
   18290:	endbr64 
   18294:	push   r15
   18296:	push   r14
   18298:	push   r13
   1829a:	push   r12
   1829c:	push   rbp
   1829d:	push   rbx
   1829e:	sub    rsp,0x38
   182a2:	mov    esi,DWORD PTR [rip+0x6b308]        # 835b0 <yy_init>
   182a8:	mov    r12d,DWORD PTR [rip+0x6b2fd]        # 835ac <yy_start>
   182af:	test   esi,esi
   182b1:	je     18448 <yylex+0x1b8>
   182b7:	movsxd rax,r12d
   182ba:	lea    r15,[rip+0x4cdff]        # 650c0 <yy_accept>
   182c1:	lea    rcx,[rip+0x4c398]        # 64660 <yy_base>
   182c8:	movzx  edx,BYTE PTR [rip+0x6b2f5]        # 835c4 <yy_hold_char>
   182cf:	mov    r13,QWORD PTR [rip+0x6b2e2]        # 835b8 <yy_c_buf_p>
   182d6:	movzx  r14d,WORD PTR [r15+rax*2]
   182db:	movzx  ebp,WORD PTR [rcx+rax*2]
   182df:	mov    QWORD PTR [rsp],r15
   182e3:	lea    rbx,[rip+0x449f6]        # 5cce0 <yy_chk>
   182ea:	lea    r11,[rip+0x4822f]        # 60520 <yy_nxt>
   182f1:	mov    r15,r13
   182f4:	lea    r8,[rip+0x4c365]        # 64660 <yy_base>
   182fb:	lea    r10,[rip+0x4cc5e]        # 64f60 <yy_meta>
   18302:	mov    BYTE PTR [r15],dl
   18305:	mov    QWORD PTR [rsp+0x8],r15
   1830a:	mov    ecx,DWORD PTR [rip+0x6b298]        # 835a8 <yy_last_accepting_state>
   18310:	mov    r9,QWORD PTR [rip+0x6b289]        # 835a0 <yy_last_accepting_cpos>
   18317:	xor    esi,esi
   18319:	mov    edi,0x1
   1831e:	mov    r13,QWORD PTR [rsp]
   18322:	lea    rax,[rip+0x4ba37]        # 63d60 <yy_def>
   18329:	mov    DWORD PTR [rsp+0x18],ecx
   1832d:	mov    QWORD PTR [rsp+0x10],r9
   18332:	nop    WORD PTR [rax+rax*1+0x0]
   18338:	test   r14w,r14w
   1833c:	lea    r14,[rip+0x4cc7d]        # 64fc0 <yy_ec>
   18343:	movzx  edx,BYTE PTR [r14+rdx*1]
   18348:	movsx  r14d,bp
   1834c:	cmovne ecx,r12d
   18350:	cmovne esi,edi
   18353:	cmovne r9,r15
   18357:	add    r14d,edx
   1835a:	movsxd r14,r14d
   1835d:	movsx  ebp,WORD PTR [rbx+r14*2]
   18362:	cmp    r12d,ebp
   18365:	je     18398 <yylex+0x108>
   18367:	movsxd rbp,r12d
   1836a:	nop    WORD PTR [rax+rax*1+0x0]
   18370:	movsx  ebp,WORD PTR [rax+rbp*2]
   18374:	mov    r12d,ebp
   18377:	cmp    bp,0x44e
   1837c:	jle    18383 <yylex+0xf3>
   1837e:	movzx  edx,BYTE PTR [r10+rdx*1]
   18383:	movsxd rbp,ebp
   18386:	movsx  r14d,WORD PTR [r8+rbp*2]
   1838b:	add    r14d,edx
   1838e:	movsxd r14,r14d
   18391:	cmp    r12w,WORD PTR [rbx+r14*2]
   18396:	jne    18370 <yylex+0xe0>
   18398:	movsx  r14d,WORD PTR [r11+r14*2]
   1839d:	add    r15,0x1
   183a1:	mov    r12d,r14d
   183a4:	cmp    r14d,0x44e
   183ab:	je     183c8 <yylex+0x138>
   183ad:	movsxd rbp,r14d
   183b0:	movzx  edx,BYTE PTR [r15]
   183b4:	movzx  r14d,WORD PTR [r13+rbp*2+0x0]
   183ba:	movzx  ebp,WORD PTR [r8+rbp*2]
   183bf:	jmp    18338 <yylex+0xa8>
   183c4:	nop    DWORD PTR [rax+0x0]
   183c8:	test   sil,sil
   183cb:	je     184ea <yylex+0x25a>
   183d1:	mov    QWORD PTR [rip+0x6b1c8],r9        # 835a0 <yy_last_accepting_cpos>
   183d8:	mov    DWORD PTR [rip+0x6b1ca],ecx        # 835a8 <yy_last_accepting_state>
   183de:	lea    r14,[rip+0x4483b]        # 5cc20 <_IO_stdin_used+0x1c20>
   183e5:	mov    r12,r9
   183e8:	mov    rdi,QWORD PTR [rsp]
   183ec:	movsxd rax,ecx
   183ef:	mov    rdx,r12
   183f2:	mov    QWORD PTR [rip+0x6b1bf],r12        # 835b8 <yy_c_buf_p>
   183f9:	movsx  eax,WORD PTR [rdi+rax*2]
   183fd:	mov    rdi,QWORD PTR [rsp+0x8]
   18402:	sub    rdx,rdi
   18405:	mov    QWORD PTR [rip+0x71c34],rdi        # 8a040 <yytext>
   1840c:	mov    DWORD PTR [rip+0x71c26],edx        # 8a038 <yyleng>
   18412:	movzx  edx,BYTE PTR [r12]
   18417:	mov    BYTE PTR [r12],0x0
   1841c:	mov    BYTE PTR [rip+0x6b1a2],dl        # 835c4 <yy_hold_char>
   18422:	cmp    eax,0x2b
   18425:	ja     18c1a <yylex+0x98a>
   1842b:	mov    edx,eax
   1842d:	movsxd rdx,DWORD PTR [r14+rdx*4]
   18431:	add    rdx,r14
   18434:	notrack jmp rdx
   18437:	xor    eax,eax
   18439:	add    rsp,0x38
   1843d:	pop    rbx
   1843e:	pop    rbp
   1843f:	pop    r12
   18441:	pop    r13
   18443:	pop    r14
   18445:	pop    r15
   18447:	ret    
   18448:	mov    DWORD PTR [rip+0x6b15e],0x1        # 835b0 <yy_init>
   18452:	test   r12d,r12d
   18455:	je     184f8 <yylex+0x268>
   1845b:	movsxd rax,r12d
   1845e:	lea    r15,[rip+0x4cc5b]        # 650c0 <yy_accept>
   18465:	lea    rcx,[rip+0x4c1f4]        # 64660 <yy_base>
   1846c:	cmp    QWORD PTR [rip+0x6b124],0x0        # 83598 <yyin>
   18474:	movzx  r14d,WORD PTR [r15+rax*2]
   18479:	movzx  ebp,WORD PTR [rcx+rax*2]
   1847d:	je     18522 <yylex+0x292>
   18483:	cmp    QWORD PTR [rip+0x6b105],0x0        # 83590 <yyout>
   1848b:	je     1853e <yylex+0x2ae>
   18491:	mov    rax,QWORD PTR [rip+0x6b130]        # 835c8 <yy_buffer_stack>
   18498:	test   rax,rax
   1849b:	je     18551 <yylex+0x2c1>
   184a1:	mov    rdx,QWORD PTR [rip+0x6b130]        # 835d8 <yy_buffer_stack_top>
   184a8:	mov    rax,QWORD PTR [rax+rdx*8]
   184ac:	test   rax,rax
   184af:	je     18551 <yylex+0x2c1>
   184b5:	mov    r13,QWORD PTR [rax+0x10]
   184b9:	mov    edx,DWORD PTR [rax+0x1c]
   184bc:	mov    rax,QWORD PTR [rax]
   184bf:	mov    DWORD PTR [rip+0x6b0fb],edx        # 835c0 <yy_n_chars>
   184c5:	mov    QWORD PTR [rip+0x71b74],r13        # 8a040 <yytext>
   184cc:	mov    QWORD PTR [rip+0x6b0c5],rax        # 83598 <yyin>
   184d3:	movzx  edx,BYTE PTR [r13+0x0]
   184d8:	mov    QWORD PTR [rip+0x6b0d9],r13        # 835b8 <yy_c_buf_p>
   184df:	mov    BYTE PTR [rip+0x6b0df],dl        # 835c4 <yy_hold_char>
   184e5:	jmp    182df <yylex+0x4f>
   184ea:	mov    r9,QWORD PTR [rsp+0x10]
   184ef:	mov    ecx,DWORD PTR [rsp+0x18]
   184f3:	jmp    183de <yylex+0x14e>
   184f8:	xor    ebp,ebp
   184fa:	xor    r14d,r14d
   184fd:	cmp    QWORD PTR [rip+0x6b093],0x0        # 83598 <yyin>
   18505:	mov    DWORD PTR [rip+0x6b09d],0x1        # 835ac <yy_start>
   1850f:	mov    r12d,0x1
   18515:	lea    r15,[rip+0x4cba4]        # 650c0 <yy_accept>
   1851c:	jne    18483 <yylex+0x1f3>
   18522:	mov    rax,QWORD PTR [rip+0x6afa7]        # 834d0 <stdin@@GLIBC_2.2.5>
   18529:	cmp    QWORD PTR [rip+0x6b05f],0x0        # 83590 <yyout>
   18531:	mov    QWORD PTR [rip+0x6b060],rax        # 83598 <yyin>
   18538:	jne    18491 <yylex+0x201>
   1853e:	mov    rax,QWORD PTR [rip+0x6afa3]        # 834e8 <stdout@@GLIBC_2.2.5>
   18545:	mov    QWORD PTR [rip+0x6b044],rax        # 83590 <yyout>
   1854c:	jmp    18491 <yylex+0x201>
   18551:	call   17ec0 <yyensure_buffer_stack>
   18556:	mov    rdx,QWORD PTR [rip+0x6b07b]        # 835d8 <yy_buffer_stack_top>
   1855d:	mov    esi,0x4000
   18562:	mov    rax,QWORD PTR [rip+0x6b05f]        # 835c8 <yy_buffer_stack>
   18569:	mov    rdi,QWORD PTR [rip+0x6b028]        # 83598 <yyin>
   18570:	lea    rbx,[rax+rdx*8]
   18574:	call   18180 <yy_create_buffer>
   18579:	mov    QWORD PTR [rbx],rax
   1857c:	jmp    184b5 <yylex+0x225>
   18581:	add    rsp,0x38
   18585:	mov    eax,0x11
   1858a:	pop    rbx
   1858b:	pop    rbp
   1858c:	pop    r12
   1858e:	pop    r13
   18590:	pop    r14
   18592:	pop    r15
   18594:	ret    
   18595:	mov    eax,0x12
   1859a:	jmp    18439 <yylex+0x1a9>
   1859f:	mov    eax,0x13
   185a4:	jmp    18439 <yylex+0x1a9>
   185a9:	mov    eax,0x18
   185ae:	jmp    18439 <yylex+0x1a9>
   185b3:	mov    eax,0x14
   185b8:	jmp    18439 <yylex+0x1a9>
   185bd:	movsxd rax,DWORD PTR [rip+0x6afe8]        # 835ac <yy_start>
   185c4:	mov    rdi,QWORD PTR [rsp]
   185c8:	movzx  edx,BYTE PTR [rip+0x6aff5]        # 835c4 <yy_hold_char>
   185cf:	mov    r15,QWORD PTR [rip+0x6afe2]        # 835b8 <yy_c_buf_p>
   185d6:	movzx  r14d,WORD PTR [rdi+rax*2]
   185db:	movzx  ebp,WORD PTR [r8+rax*2]
   185e0:	mov    r12,rax
   185e3:	jmp    18302 <yylex+0x72>
   185e8:	mov    rdi,QWORD PTR [rip+0x71a51]        # 8a040 <yytext>
   185ef:	movsxd rsi,DWORD PTR [rip+0x71a42]        # 8a038 <yyleng>
   185f6:	mov    edx,0x1
   185fb:	mov    rcx,QWORD PTR [rip+0x6af8e]        # 83590 <yyout>
   18602:	call   ca10 <fwrite@plt>
   18607:	movsxd rax,DWORD PTR [rip+0x6af9e]        # 835ac <yy_start>
   1860e:	mov    rdi,QWORD PTR [rsp]
   18612:	lea    r8,[rip+0x4c047]        # 64660 <yy_base>
   18619:	movzx  edx,BYTE PTR [rip+0x6afa4]        # 835c4 <yy_hold_char>
   18620:	mov    r15,QWORD PTR [rip+0x6af91]        # 835b8 <yy_c_buf_p>
   18627:	lea    r11,[rip+0x47ef2]        # 60520 <yy_nxt>
   1862e:	lea    r10,[rip+0x4c92b]        # 64f60 <yy_meta>
   18635:	movzx  r14d,WORD PTR [rdi+rax*2]
   1863a:	movzx  ebp,WORD PTR [r8+rax*2]
   1863f:	mov    r12,rax
   18642:	jmp    18302 <yylex+0x72>
   18647:	mov    eax,0xf
   1864c:	jmp    18439 <yylex+0x1a9>
   18651:	mov    eax,0x1b
   18656:	jmp    18439 <yylex+0x1a9>
   1865b:	movzx  eax,BYTE PTR [rip+0x6af62]        # 835c4 <yy_hold_char>
   18662:	mov    ecx,DWORD PTR [rip+0x6af40]        # 835a8 <yy_last_accepting_state>
   18668:	mov    BYTE PTR [r12],al
   1866c:	mov    r12,QWORD PTR [rip+0x6af2d]        # 835a0 <yy_last_accepting_cpos>
   18673:	jmp    183e8 <yylex+0x158>
   18678:	mov    eax,0x6
   1867d:	jmp    18439 <yylex+0x1a9>
   18682:	mov    eax,0x5
   18687:	jmp    18439 <yylex+0x1a9>
   1868c:	mov    eax,0x4
   18691:	jmp    18439 <yylex+0x1a9>
   18696:	mov    eax,0x3
   1869b:	jmp    18439 <yylex+0x1a9>
   186a0:	mov    eax,0xe
   186a5:	jmp    18439 <yylex+0x1a9>
   186aa:	mov    eax,0xd
   186af:	jmp    18439 <yylex+0x1a9>
   186b4:	mov    eax,0xc
   186b9:	jmp    18439 <yylex+0x1a9>
   186be:	mov    eax,0x19
   186c3:	jmp    18439 <yylex+0x1a9>
   186c8:	mov    eax,0x10
   186cd:	jmp    18439 <yylex+0x1a9>
   186d2:	mov    eax,0x15
   186d7:	jmp    18439 <yylex+0x1a9>
   186dc:	mov    rax,r12
   186df:	sub    rax,QWORD PTR [rip+0x7195a]        # 8a040 <yytext>
   186e6:	mov    r9,QWORD PTR [rip+0x6aedb]        # 835c8 <yy_buffer_stack>
   186ed:	sub    eax,0x1
   186f0:	mov    DWORD PTR [rsp+0x24],eax
   186f4:	movzx  eax,BYTE PTR [rip+0x6aec9]        # 835c4 <yy_hold_char>
   186fb:	mov    BYTE PTR [r12],al
   186ff:	mov    rax,QWORD PTR [rip+0x6aed2]        # 835d8 <yy_buffer_stack_top>
   18706:	lea    r15,[r9+rax*8]
   1870a:	mov    rdx,QWORD PTR [r15]
   1870d:	mov    ecx,DWORD PTR [rdx+0x38]
   18710:	test   ecx,ecx
   18712:	je     189d0 <yylex+0x740>
   18718:	mov    ecx,DWORD PTR [rip+0x6aea2]        # 835c0 <yy_n_chars>
   1871e:	mov    rdi,QWORD PTR [rdx+0x8]
   18722:	movsxd rbp,ecx
   18725:	mov    rcx,QWORD PTR [rip+0x6ae8c]        # 835b8 <yy_c_buf_p>
   1872c:	mov    rsi,QWORD PTR [rip+0x7190d]        # 8a040 <yytext>
   18733:	lea    r13,[rdi+rbp*1]
   18737:	cmp    rcx,r13
   1873a:	jbe    18acd <yylex+0x83d>
   18740:	lea    rbp,[rdi+rbp*1+0x1]
   18745:	cmp    rcx,rbp
   18748:	ja     18c26 <yylex+0x996>
   1874e:	mov    r13d,DWORD PTR [rdx+0x34]
   18752:	mov    rbp,rcx
   18755:	sub    rbp,rsi
   18758:	test   r13d,r13d
   1875b:	jne    18849 <yylex+0x5b9>
   18761:	cmp    rbp,0x1
   18765:	jne    18803 <yylex+0x573>
   1876b:	mov    eax,DWORD PTR [rip+0x6ae3b]        # 835ac <yy_start>
   18771:	mov    QWORD PTR [rip+0x6ae40],rsi        # 835b8 <yy_c_buf_p>
   18778:	lea    edx,[rax-0x1]
   1877b:	mov    eax,edx
   1877d:	shr    eax,0x1f
   18780:	add    eax,edx
   18782:	sar    eax,1
   18784:	add    eax,0x2b
   18787:	jmp    18422 <yylex+0x192>
   1878c:	mov    rax,QWORD PTR [rip+0x718ad]        # 8a040 <yytext>
   18793:	movsx  eax,BYTE PTR [rax]
   18796:	jmp    18439 <yylex+0x1a9>
   1879b:	mov    eax,0x1a
   187a0:	jmp    18439 <yylex+0x1a9>
   187a5:	mov    eax,0xb
   187aa:	jmp    18439 <yylex+0x1a9>
   187af:	mov    eax,0xa
   187b4:	jmp    18439 <yylex+0x1a9>
   187b9:	mov    eax,0x9
   187be:	jmp    18439 <yylex+0x1a9>
   187c3:	mov    eax,0x8
   187c8:	jmp    18439 <yylex+0x1a9>
   187cd:	mov    eax,0x7
   187d2:	jmp    18439 <yylex+0x1a9>
   187d7:	mov    eax,0x17
   187dc:	jmp    18439 <yylex+0x1a9>
   187e1:	mov    eax,0x16
   187e6:	jmp    18439 <yylex+0x1a9>
   187eb:	mov    eax,0x2
   187f0:	jmp    18439 <yylex+0x1a9>
   187f5:	mov    r9,QWORD PTR [rip+0x6adcc]        # 835c8 <yy_buffer_stack>
   187fc:	mov    rax,QWORD PTR [rip+0x6add5]        # 835d8 <yy_buffer_stack_top>
   18803:	mov    rax,QWORD PTR [r9+rax*8]
   18807:	movsxd r9,DWORD PTR [rip+0x6adb2]        # 835c0 <yy_n_chars>
   1880e:	add    r9,QWORD PTR [rax+0x8]
   18812:	mov    QWORD PTR [rip+0x6ad9f],r9        # 835b8 <yy_c_buf_p>
   18819:	mov    r12,r9
   1881c:	call   17d60 <yy_get_previous_state>
   18821:	lea    r11,[rip+0x47cf8]        # 60520 <yy_nxt>
   18828:	lea    r8,[rip+0x4be31]        # 64660 <yy_base>
   1882f:	mov    ecx,eax
   18831:	mov    rax,QWORD PTR [rip+0x71808]        # 8a040 <yytext>
   18838:	lea    r10,[rip+0x4c721]        # 64f60 <yy_meta>
   1883f:	mov    QWORD PTR [rsp+0x8],rax
   18844:	jmp    183e8 <yylex+0x158>
   18849:	lea    r13d,[rbp-0x1]
   1884d:	test   r13d,r13d
   18850:	jle    18875 <yylex+0x5e5>
   18852:	lea    edx,[rbp-0x2]
   18855:	mov    QWORD PTR [rsp+0x10],rdx
   1885a:	xor    edx,edx
   1885c:	movzx  ebp,BYTE PTR [rsi+rdx*1]
   18860:	mov    BYTE PTR [rdi+rdx*1],bpl
   18864:	mov    rbp,rdx
   18867:	add    rdx,0x1
   1886b:	cmp    QWORD PTR [rsp+0x10],rbp
   18870:	jne    1885c <yylex+0x5cc>
   18872:	mov    rdx,QWORD PTR [r15]
   18875:	cmp    DWORD PTR [rdx+0x38],0x2
   18879:	je     189ef <yylex+0x75f>
   1887f:	mov    ebp,r13d
   18882:	not    ebp
   18884:	add    ebp,DWORD PTR [rdx+0x18]
   18887:	test   ebp,ebp
   18889:	jg     18917 <yylex+0x687>
   1888f:	mov    QWORD PTR [rsp+0x10],r12
   18894:	mov    rbp,rdx
   18897:	jmp    188d6 <yylex+0x646>
   18899:	mov    eax,DWORD PTR [rbp+0x18]
   1889c:	test   eax,eax
   1889e:	jle    18900 <yylex+0x670>
   188a0:	add    eax,eax
   188a2:	mov    DWORD PTR [rbp+0x18],eax
   188a5:	add    eax,0x2
   188a8:	movsxd rsi,eax
   188ab:	call   ca20 <realloc@plt>
   188b0:	mov    QWORD PTR [rbp+0x8],rax
   188b4:	test   rax,rax
   188b7:	je     188ef <yylex+0x65f>
   188b9:	mov    rbp,QWORD PTR [r15]
   188bc:	movsxd r12,r12d
   188bf:	lea    rcx,[rax+r12*1]
   188c3:	mov    eax,r13d
   188c6:	not    eax
   188c8:	add    eax,DWORD PTR [rbp+0x18]
   188cb:	mov    QWORD PTR [rip+0x6ace6],rcx        # 835b8 <yy_c_buf_p>
   188d2:	test   eax,eax
   188d4:	jg     1890d <yylex+0x67d>
   188d6:	mov    rdi,QWORD PTR [rbp+0x8]
   188da:	mov    eax,DWORD PTR [rbp+0x20]
   188dd:	sub    rcx,rdi
   188e0:	mov    r12,rcx
   188e3:	test   eax,eax
   188e5:	jne    18899 <yylex+0x609>
   188e7:	mov    QWORD PTR [rbp+0x8],0x0
   188ef:	lea    rdi,[rip+0x44232]        # 5cb28 <_IO_stdin_used+0x1b28>
   188f6:	call   17e90 <yy_fatal_error>
   188fb:	nop    DWORD PTR [rax+rax*1+0x0]
   18900:	lea    ecx,[rax+0x7]
   18903:	cmovns ecx,eax
   18906:	sar    ecx,0x3
   18909:	add    eax,ecx
   1890b:	jmp    188a2 <yylex+0x612>
   1890d:	mov    r12,QWORD PTR [rsp+0x10]
   18912:	mov    rdx,rbp
   18915:	mov    ebp,eax
   18917:	mov    eax,DWORD PTR [rdx+0x24]
   1891a:	cmp    ebp,0x2000
   18920:	mov    ecx,0x2000
   18925:	cmovle ecx,ebp
   18928:	mov    DWORD PTR [rsp+0x10],eax
   1892c:	test   eax,eax
   1892e:	je     18cb8 <yylex+0xa28>
   18934:	movsxd rbp,r13d
   18937:	xor    edx,edx
   18939:	mov    QWORD PTR [rsp+0x10],r12
   1893e:	mov    DWORD PTR [rsp+0x18],r13d
   18943:	mov    r12,rbp
   18946:	mov    r13d,ecx
   18949:	mov    ebp,edx
   1894b:	mov    rdi,QWORD PTR [rip+0x6ac46]        # 83598 <yyin>
   18952:	call   cc10 <getc@plt>
   18957:	lea    r11,[rip+0x47bc2]        # 60520 <yy_nxt>
   1895e:	lea    r8,[rip+0x4bcfb]        # 64660 <yy_base>
   18965:	cmp    eax,0xffffffff
   18968:	lea    r10,[rip+0x4c5f1]        # 64f60 <yy_meta>
   1896f:	je     18c4c <yylex+0x9bc>
   18975:	mov    rdi,QWORD PTR [rip+0x6ac5c]        # 835d8 <yy_buffer_stack_top>
   1897c:	mov    rsi,QWORD PTR [rip+0x6ac45]        # 835c8 <yy_buffer_stack>
   18983:	add    ebp,0x1
   18986:	lea    r15,[rsi+rdi*8]
   1898a:	mov    rsi,QWORD PTR [r15]
   1898d:	mov    rdi,QWORD PTR [rsi+0x8]
   18991:	add    rdi,r12
   18994:	mov    rsi,rdi
   18997:	cmp    eax,0xa
   1899a:	je     18c38 <yylex+0x9a8>
   189a0:	mov    BYTE PTR [rsi],al
   189a2:	add    r12,0x1
   189a6:	cmp    r13d,ebp
   189a9:	jne    1894b <yylex+0x6bb>
   189ab:	mov    ecx,r13d
   189ae:	mov    r12,QWORD PTR [rsp+0x10]
   189b3:	mov    r13d,DWORD PTR [rsp+0x18]
   189b8:	mov    rbp,QWORD PTR [r15]
   189bb:	mov    DWORD PTR [rip+0x6abff],ecx        # 835c0 <yy_n_chars>
   189c1:	mov    edx,ecx
   189c3:	mov    DWORD PTR [rbp+0x1c],ecx
   189c6:	mov    DWORD PTR [rsp+0x10],0x0
   189ce:	jmp    18a25 <yylex+0x795>
   189d0:	mov    ecx,DWORD PTR [rdx+0x1c]
   189d3:	mov    rsi,QWORD PTR [rip+0x6abbe]        # 83598 <yyin>
   189da:	mov    DWORD PTR [rdx+0x38],0x1
   189e1:	mov    DWORD PTR [rip+0x6abd9],ecx        # 835c0 <yy_n_chars>
   189e7:	mov    QWORD PTR [rdx],rsi
   189ea:	jmp    1871e <yylex+0x48e>
   189ef:	mov    DWORD PTR [rip+0x6abc7],0x0        # 835c0 <yy_n_chars>
   189f9:	mov    DWORD PTR [rdx+0x1c],0x0
   18a00:	test   r13d,r13d
   18a03:	je     18bc5 <yylex+0x935>
   18a09:	lea    r15,[r9+rax*8]
   18a0d:	mov    DWORD PTR [rsp+0x10],0x2
   18a15:	mov    edx,DWORD PTR [rip+0x6aba5]        # 835c0 <yy_n_chars>
   18a1b:	mov    rbp,QWORD PTR [r15]
   18a1e:	mov    DWORD PTR [rbp+0x38],0x2
   18a25:	mov    rdi,QWORD PTR [rbp+0x8]
   18a29:	add    r13d,edx
   18a2c:	cmp    r13d,DWORD PTR [rbp+0x18]
   18a30:	jg     18b80 <yylex+0x8f0>
   18a36:	mov    DWORD PTR [rip+0x6ab83],r13d        # 835c0 <yy_n_chars>
   18a3d:	movsxd r13,r13d
   18a40:	mov    BYTE PTR [rdi+r13*1],0x0
   18a45:	mov    rax,QWORD PTR [r15]
   18a48:	mov    rax,QWORD PTR [rax+0x8]
   18a4c:	mov    BYTE PTR [rax+r13*1+0x1],0x0
   18a52:	mov    rax,QWORD PTR [r15]
   18a55:	mov    rsi,QWORD PTR [rax+0x8]
   18a59:	mov    eax,DWORD PTR [rsp+0x10]
   18a5d:	mov    QWORD PTR [rip+0x715dc],rsi        # 8a040 <yytext>
   18a64:	cmp    eax,0x1
   18a67:	je     1876b <yylex+0x4db>
   18a6d:	mov    r15,rsi
   18a70:	cmp    eax,0x2
   18a73:	je     187f5 <yylex+0x565>
   18a79:	movsxd rax,DWORD PTR [rsp+0x24]
   18a7e:	add    r15,rax
   18a81:	mov    QWORD PTR [rip+0x6ab30],r15        # 835b8 <yy_c_buf_p>
   18a88:	call   17d60 <yy_get_previous_state>
   18a8d:	lea    r8,[rip+0x4bbcc]        # 64660 <yy_base>
   18a94:	lea    r11,[rip+0x47a85]        # 60520 <yy_nxt>
   18a9b:	mov    r12d,eax
   18a9e:	mov    rax,QWORD PTR [rip+0x7159b]        # 8a040 <yytext>
   18aa5:	mov    rcx,r8
   18aa8:	lea    r10,[rip+0x4c4b1]        # 64f60 <yy_meta>
   18aaf:	mov    QWORD PTR [rsp+0x8],rax
   18ab4:	mov    rdi,QWORD PTR [rsp]
   18ab8:	movsxd rax,r12d
   18abb:	movzx  edx,BYTE PTR [r15]
   18abf:	movzx  ebp,WORD PTR [rcx+rax*2]
   18ac3:	movzx  r14d,WORD PTR [rdi+rax*2]
   18ac8:	jmp    1830a <yylex+0x7a>
   18acd:	movsxd rax,DWORD PTR [rsp+0x24]
   18ad2:	mov    r15,rsi
   18ad5:	add    r15,rax
   18ad8:	mov    QWORD PTR [rip+0x6aad9],r15        # 835b8 <yy_c_buf_p>
   18adf:	call   17d60 <yy_get_previous_state>
   18ae4:	lea    r11,[rip+0x47a35]        # 60520 <yy_nxt>
   18aeb:	lea    r8,[rip+0x4bb6e]        # 64660 <yy_base>
   18af2:	movsxd rsi,eax
   18af5:	mov    rax,QWORD PTR [rsp]
   18af9:	lea    r10,[rip+0x4c460]        # 64f60 <yy_meta>
   18b00:	mov    rdx,rsi
   18b03:	cmp    WORD PTR [rax+rsi*2],0x0
   18b08:	je     18b17 <yylex+0x887>
   18b0a:	mov    DWORD PTR [rip+0x6aa98],esi        # 835a8 <yy_last_accepting_state>
   18b10:	mov    QWORD PTR [rip+0x6aa89],r15        # 835a0 <yy_last_accepting_cpos>
   18b17:	mov    rcx,r8
   18b1a:	jmp    18b2b <yylex+0x89b>
   18b1c:	lea    rax,[rip+0x4b23d]        # 63d60 <yy_def>
   18b23:	movsx  rsi,WORD PTR [rax+rsi*2]
   18b28:	mov    rdx,rsi
   18b2b:	movsx  eax,WORD PTR [r8+rsi*2]
   18b30:	add    eax,0x1
   18b33:	cdqe   
   18b35:	movsx  edi,WORD PTR [rbx+rax*2]
   18b39:	cmp    edx,edi
   18b3b:	jne    18b1c <yylex+0x88c>
   18b3d:	movsx  r12d,WORD PTR [r11+rax*2]
   18b42:	mov    rax,QWORD PTR [rip+0x714f7]        # 8a040 <yytext>
   18b49:	mov    QWORD PTR [rsp+0x8],rax
   18b4e:	cmp    r12d,0x44e
   18b55:	je     18b5c <yylex+0x8cc>
   18b57:	test   r12d,r12d
   18b5a:	jne    18b6e <yylex+0x8de>
   18b5c:	mov    r12,QWORD PTR [rip+0x6aa3d]        # 835a0 <yy_last_accepting_cpos>
   18b63:	mov    ecx,DWORD PTR [rip+0x6aa3f]        # 835a8 <yy_last_accepting_state>
   18b69:	jmp    183e8 <yylex+0x158>
   18b6e:	add    r15,0x1
   18b72:	mov    QWORD PTR [rip+0x6aa3f],r15        # 835b8 <yy_c_buf_p>
   18b79:	jmp    18ab4 <yylex+0x824>
   18b7e:	xchg   ax,ax
   18b80:	sar    edx,1
   18b82:	add    edx,r13d
   18b85:	movsxd rsi,edx
   18b88:	mov    DWORD PTR [rsp+0x18],edx
   18b8c:	call   ca20 <realloc@plt>
   18b91:	mov    edx,DWORD PTR [rsp+0x18]
   18b95:	lea    r11,[rip+0x47984]        # 60520 <yy_nxt>
   18b9c:	lea    r8,[rip+0x4babd]        # 64660 <yy_base>
   18ba3:	mov    QWORD PTR [rbp+0x8],rax
   18ba7:	mov    rax,QWORD PTR [r15]
   18baa:	lea    r10,[rip+0x4c3af]        # 64f60 <yy_meta>
   18bb1:	mov    rdi,QWORD PTR [rax+0x8]
   18bb5:	test   rdi,rdi
   18bb8:	je     18c0e <yylex+0x97e>
   18bba:	sub    edx,0x2
   18bbd:	mov    DWORD PTR [rax+0x18],edx
   18bc0:	jmp    18a36 <yylex+0x7a6>
   18bc5:	mov    rdi,QWORD PTR [rip+0x6a9cc]        # 83598 <yyin>
   18bcc:	call   181e0 <yyrestart>
   18bd1:	mov    rax,QWORD PTR [rip+0x6aa00]        # 835d8 <yy_buffer_stack_top>
   18bd8:	mov    r9,QWORD PTR [rip+0x6a9e9]        # 835c8 <yy_buffer_stack>
   18bdf:	mov    DWORD PTR [rsp+0x10],0x1
   18be7:	mov    edx,DWORD PTR [rip+0x6a9d3]        # 835c0 <yy_n_chars>
   18bed:	lea    r11,[rip+0x4792c]        # 60520 <yy_nxt>
   18bf4:	lea    r8,[rip+0x4ba65]        # 64660 <yy_base>
   18bfb:	lea    r15,[r9+rax*8]
   18bff:	lea    r10,[rip+0x4c35a]        # 64f60 <yy_meta>
   18c06:	mov    rbp,QWORD PTR [r15]
   18c09:	jmp    18a25 <yylex+0x795>
   18c0e:	lea    rdi,[rip+0x43f43]        # 5cb58 <_IO_stdin_used+0x1b58>
   18c15:	call   17e90 <yy_fatal_error>
   18c1a:	lea    rdi,[rip+0x43f67]        # 5cb88 <_IO_stdin_used+0x1b88>
   18c21:	call   17e90 <yy_fatal_error>
   18c26:	lea    rdi,[rip+0x43ec3]        # 5caf0 <_IO_stdin_used+0x1af0>
   18c2d:	call   17e90 <yy_fatal_error>
   18c32:	nop    WORD PTR [rax+rax*1+0x0]
   18c38:	mov    r12,QWORD PTR [rsp+0x10]
   18c3d:	mov    r13d,DWORD PTR [rsp+0x18]
   18c42:	mov    BYTE PTR [rdi],0xa
   18c45:	mov    ecx,ebp
   18c47:	jmp    189b8 <yylex+0x728>
   18c4c:	mov    rdi,QWORD PTR [rip+0x6a945]        # 83598 <yyin>
   18c53:	mov    r12,QWORD PTR [rsp+0x10]
   18c58:	mov    DWORD PTR [rsp+0x10],ebp
   18c5c:	mov    r13d,DWORD PTR [rsp+0x18]
   18c61:	call   c330 <ferror@plt>
   18c66:	test   eax,eax
   18c68:	jne    18da2 <yylex+0xb12>
   18c6e:	mov    rax,QWORD PTR [rip+0x6a963]        # 835d8 <yy_buffer_stack_top>
   18c75:	mov    r9,QWORD PTR [rip+0x6a94c]        # 835c8 <yy_buffer_stack>
   18c7c:	lea    r11,[rip+0x4789d]        # 60520 <yy_nxt>
   18c83:	lea    r8,[rip+0x4b9d6]        # 64660 <yy_base>
   18c8a:	mov    edx,DWORD PTR [rsp+0x10]
   18c8e:	lea    r10,[rip+0x4c2cb]        # 64f60 <yy_meta>
   18c95:	lea    r15,[r9+rax*8]
   18c99:	mov    rbp,QWORD PTR [r15]
   18c9c:	test   edx,edx
   18c9e:	mov    DWORD PTR [rip+0x6a91c],edx        # 835c0 <yy_n_chars>
   18ca4:	mov    DWORD PTR [rbp+0x1c],edx
   18ca7:	jne    189c6 <yylex+0x736>
   18cad:	jmp    18a00 <yylex+0x770>
   18cb2:	nop    WORD PTR [rax+rax*1+0x0]
   18cb8:	mov    QWORD PTR [rsp+0x28],rdx
   18cbd:	mov    DWORD PTR [rsp+0x18],ecx
   18cc1:	call   c740 <__errno_location@plt>
   18cc6:	movsxd rbp,DWORD PTR [rsp+0x18]
   18ccb:	mov    rdx,QWORD PTR [rsp+0x28]
   18cd0:	mov    DWORD PTR [rax],0x0
   18cd6:	mov    r15,rax
   18cd9:	movsxd rax,r13d
   18cdc:	mov    QWORD PTR [rsp+0x18],rax
   18ce1:	jmp    18d40 <yylex+0xab0>
   18ce3:	nop    DWORD PTR [rax+rax*1+0x0]
   18ce8:	mov    rdi,QWORD PTR [rip+0x6a8a9]        # 83598 <yyin>
   18cef:	call   c330 <ferror@plt>
   18cf4:	lea    r11,[rip+0x47825]        # 60520 <yy_nxt>
   18cfb:	lea    r8,[rip+0x4b95e]        # 64660 <yy_base>
   18d02:	test   eax,eax
   18d04:	lea    r10,[rip+0x4c255]        # 64f60 <yy_meta>
   18d0b:	je     18db0 <yylex+0xb20>
   18d11:	cmp    DWORD PTR [r15],0x4
   18d15:	jne    18da2 <yylex+0xb12>
   18d1b:	mov    DWORD PTR [r15],0x0
   18d22:	mov    rdi,QWORD PTR [rip+0x6a86f]        # 83598 <yyin>
   18d29:	call   c9c0 <clearerr@plt>
   18d2e:	mov    rdx,QWORD PTR [rip+0x6a8a3]        # 835d8 <yy_buffer_stack_top>
   18d35:	mov    rax,QWORD PTR [rip+0x6a88c]        # 835c8 <yy_buffer_stack>
   18d3c:	mov    rdx,QWORD PTR [rax+rdx*8]
   18d40:	mov    rcx,QWORD PTR [rip+0x6a851]        # 83598 <yyin>
   18d47:	mov    rdi,QWORD PTR [rsp+0x18]
   18d4c:	mov    esi,0x1
   18d51:	add    rdi,QWORD PTR [rdx+0x8]
   18d55:	mov    rdx,rbp
   18d58:	call   c700 <fread@plt>
   18d5d:	lea    r11,[rip+0x477bc]        # 60520 <yy_nxt>
   18d64:	lea    r8,[rip+0x4b8f5]        # 64660 <yy_base>
   18d6b:	test   eax,eax
   18d6d:	mov    DWORD PTR [rip+0x6a84d],eax        # 835c0 <yy_n_chars>
   18d73:	mov    rcx,rax
   18d76:	mov    edx,eax
   18d78:	lea    r10,[rip+0x4c1e1]        # 64f60 <yy_meta>
   18d7f:	je     18ce8 <yylex+0xa58>
   18d85:	mov    rax,QWORD PTR [rip+0x6a84c]        # 835d8 <yy_buffer_stack_top>
   18d8c:	mov    r9,QWORD PTR [rip+0x6a835]        # 835c8 <yy_buffer_stack>
   18d93:	lea    r15,[r9+rax*8]
   18d97:	mov    rbp,QWORD PTR [r15]
   18d9a:	mov    DWORD PTR [rbp+0x1c],ecx
   18d9d:	jmp    18a25 <yylex+0x795>
   18da2:	lea    rdi,[rip+0x43ca3]        # 5ca4c <_IO_stdin_used+0x1a4c>
   18da9:	call   17e90 <yy_fatal_error>
   18dae:	xchg   ax,ax
   18db0:	mov    rax,QWORD PTR [rip+0x6a821]        # 835d8 <yy_buffer_stack_top>
   18db7:	mov    r9,QWORD PTR [rip+0x6a80a]        # 835c8 <yy_buffer_stack>
   18dbe:	mov    rdx,QWORD PTR [r9+rax*8]
   18dc2:	mov    DWORD PTR [rdx+0x1c],0x0
   18dc9:	jmp    18a00 <yylex+0x770>
   18dce:	xchg   ax,ax

0000000000018dd0 <yypush_buffer_state>:
   18dd0:	endbr64 
   18dd4:	test   rdi,rdi
   18dd7:	je     18e80 <yypush_buffer_state+0xb0>
   18ddd:	push   rbx
   18dde:	mov    rbx,rdi
   18de1:	call   17ec0 <yyensure_buffer_stack>
   18de6:	mov    rax,QWORD PTR [rip+0x6a7eb]        # 835d8 <yy_buffer_stack_top>
   18ded:	mov    rdx,QWORD PTR [rip+0x6a7d4]        # 835c8 <yy_buffer_stack>
   18df4:	shl    rax,0x3
   18df8:	test   rdx,rdx
   18dfb:	je     18e48 <yypush_buffer_state+0x78>
   18dfd:	mov    rcx,QWORD PTR [rip+0x6a7d4]        # 835d8 <yy_buffer_stack_top>
   18e04:	lea    rsi,[rcx*8+0x0]
   18e0c:	lea    rax,[rdx+rsi*1]
   18e10:	cmp    QWORD PTR [rax],0x0
   18e14:	je     18e48 <yypush_buffer_state+0x78>
   18e16:	mov    rdi,QWORD PTR [rip+0x6a79b]        # 835b8 <yy_c_buf_p>
   18e1d:	movzx  r8d,BYTE PTR [rip+0x6a79f]        # 835c4 <yy_hold_char>
   18e25:	add    rcx,0x1
   18e29:	mov    QWORD PTR [rip+0x6a7a8],rcx        # 835d8 <yy_buffer_stack_top>
   18e30:	mov    BYTE PTR [rdi],r8b
   18e33:	mov    rax,QWORD PTR [rax]
   18e36:	mov    QWORD PTR [rax+0x10],rdi
   18e3a:	mov    edi,DWORD PTR [rip+0x6a780]        # 835c0 <yy_n_chars>
   18e40:	mov    DWORD PTR [rax+0x1c],edi
   18e43:	lea    rax,[rdx+rsi*1+0x8]
   18e48:	mov    QWORD PTR [rax],rbx
   18e4b:	mov    eax,DWORD PTR [rbx+0x1c]
   18e4e:	mov    rdx,QWORD PTR [rbx]
   18e51:	mov    DWORD PTR [rip+0x6a769],eax        # 835c0 <yy_n_chars>
   18e57:	mov    rax,QWORD PTR [rbx+0x10]
   18e5b:	mov    QWORD PTR [rip+0x6a736],rdx        # 83598 <yyin>
   18e62:	pop    rbx
   18e63:	mov    QWORD PTR [rip+0x6a74e],rax        # 835b8 <yy_c_buf_p>
   18e6a:	mov    QWORD PTR [rip+0x711cf],rax        # 8a040 <yytext>
   18e71:	movzx  eax,BYTE PTR [rax]
   18e74:	mov    BYTE PTR [rip+0x6a74a],al        # 835c4 <yy_hold_char>
   18e7a:	ret    
   18e7b:	nop    DWORD PTR [rax+rax*1+0x0]
   18e80:	ret    
   18e81:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   18e8c:	nop    DWORD PTR [rax+0x0]

0000000000018e90 <yypop_buffer_state>:
   18e90:	endbr64 
   18e94:	mov    rax,QWORD PTR [rip+0x6a72d]        # 835c8 <yy_buffer_stack>
   18e9b:	test   rax,rax
   18e9e:	je     18f30 <yypop_buffer_state+0xa0>
   18ea4:	mov    rdx,QWORD PTR [rip+0x6a72d]        # 835d8 <yy_buffer_stack_top>
   18eab:	mov    rdi,QWORD PTR [rax+rdx*8]
   18eaf:	test   rdi,rdi
   18eb2:	je     18f30 <yypop_buffer_state+0xa0>
   18eb4:	sub    rsp,0x8
   18eb8:	call   18030 <yy_delete_buffer>
   18ebd:	mov    rdx,QWORD PTR [rip+0x6a704]        # 835c8 <yy_buffer_stack>
   18ec4:	mov    rax,QWORD PTR [rip+0x6a70d]        # 835d8 <yy_buffer_stack_top>
   18ecb:	mov    QWORD PTR [rdx+rax*8],0x0
   18ed3:	test   rax,rax
   18ed6:	je     18ee3 <yypop_buffer_state+0x53>
   18ed8:	sub    rax,0x1
   18edc:	mov    QWORD PTR [rip+0x6a6f5],rax        # 835d8 <yy_buffer_stack_top>
   18ee3:	test   rdx,rdx
   18ee6:	je     18f26 <yypop_buffer_state+0x96>
   18ee8:	mov    rax,QWORD PTR [rip+0x6a6e9]        # 835d8 <yy_buffer_stack_top>
   18eef:	mov    rax,QWORD PTR [rdx+rax*8]
   18ef3:	test   rax,rax
   18ef6:	je     18f26 <yypop_buffer_state+0x96>
   18ef8:	mov    edx,DWORD PTR [rax+0x1c]
   18efb:	mov    DWORD PTR [rip+0x6a6bf],edx        # 835c0 <yy_n_chars>
   18f01:	mov    rdx,QWORD PTR [rax+0x10]
   18f05:	mov    rax,QWORD PTR [rax]
   18f08:	mov    QWORD PTR [rip+0x71131],rdx        # 8a040 <yytext>
   18f0f:	mov    QWORD PTR [rip+0x6a682],rax        # 83598 <yyin>
   18f16:	movzx  eax,BYTE PTR [rdx]
   18f19:	mov    QWORD PTR [rip+0x6a698],rdx        # 835b8 <yy_c_buf_p>
   18f20:	mov    BYTE PTR [rip+0x6a69e],al        # 835c4 <yy_hold_char>
   18f26:	add    rsp,0x8
   18f2a:	ret    
   18f2b:	nop    DWORD PTR [rax+rax*1+0x0]
   18f30:	ret    
   18f31:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   18f3c:	nop    DWORD PTR [rax+0x0]

0000000000018f40 <yy_scan_buffer>:
   18f40:	endbr64 
   18f44:	push   r12
   18f46:	push   rbp
   18f47:	push   rbx
   18f48:	cmp    rsi,0x1
   18f4c:	jbe    18fb8 <yy_scan_buffer+0x78>
   18f4e:	cmp    BYTE PTR [rdi+rsi*1-0x2],0x0
   18f53:	mov    rbp,rdi
   18f56:	mov    rbx,rsi
   18f59:	jne    18fb8 <yy_scan_buffer+0x78>
   18f5b:	cmp    BYTE PTR [rdi+rsi*1-0x1],0x0
   18f60:	jne    18fb8 <yy_scan_buffer+0x78>
   18f62:	mov    edi,0x40
   18f67:	call   c0e0 <malloc@plt>
   18f6c:	mov    r12,rax
   18f6f:	test   rax,rax
   18f72:	je     18fc3 <yy_scan_buffer+0x83>
   18f74:	sub    ebx,0x2
   18f77:	mov    QWORD PTR [rax+0x8],rbp
   18f7b:	mov    rdi,rax
   18f7e:	mov    DWORD PTR [rax+0x18],ebx
   18f81:	mov    QWORD PTR [rax+0x10],rbp
   18f85:	mov    DWORD PTR [rax+0x1c],ebx
   18f88:	mov    QWORD PTR [rax],0x0
   18f8f:	mov    QWORD PTR [rax+0x20],0x0
   18f97:	mov    DWORD PTR [rax+0x28],0x1
   18f9e:	mov    QWORD PTR [rax+0x34],0x0
   18fa6:	call   17f90 <yy_switch_to_buffer>
   18fab:	mov    rax,r12
   18fae:	pop    rbx
   18faf:	pop    rbp
   18fb0:	pop    r12
   18fb2:	ret    
   18fb3:	nop    DWORD PTR [rax+rax*1+0x0]
   18fb8:	xor    r12d,r12d
   18fbb:	pop    rbx
   18fbc:	pop    rbp
   18fbd:	mov    rax,r12
   18fc0:	pop    r12
   18fc2:	ret    
   18fc3:	lea    rdi,[rip+0x43bf6]        # 5cbc0 <_IO_stdin_used+0x1bc0>
   18fca:	call   17e90 <yy_fatal_error>
   18fcf:	nop

0000000000018fd0 <yy_scan_bytes>:
   18fd0:	endbr64 
   18fd4:	push   r12
   18fd6:	push   rbp
   18fd7:	movsxd rbp,esi
   18fda:	push   rbx
   18fdb:	lea    r12d,[rbp+0x2]
   18fdf:	mov    rbx,rdi
   18fe2:	movsxd r12,r12d
   18fe5:	mov    rdi,r12
   18fe8:	call   c0e0 <malloc@plt>
   18fed:	test   rax,rax
   18ff0:	je     19035 <yy_scan_bytes+0x65>
   18ff2:	mov    rdi,rax
   18ff5:	xor    edx,edx
   18ff7:	lea    eax,[rbp-0x1]
   18ffa:	test   ebp,ebp
   18ffc:	jle    19013 <yy_scan_bytes+0x43>
   18ffe:	xchg   ax,ax
   19000:	movzx  ecx,BYTE PTR [rbx+rdx*1]
   19004:	mov    BYTE PTR [rdi+rdx*1],cl
   19007:	mov    rcx,rdx
   1900a:	add    rdx,0x1
   1900e:	cmp    rax,rcx
   19011:	jne    19000 <yy_scan_bytes+0x30>
   19013:	mov    BYTE PTR [rdi+rbp*1+0x1],0x0
   19018:	mov    rsi,r12
   1901b:	mov    BYTE PTR [rdi+rbp*1],0x0
   1901f:	call   18f40 <yy_scan_buffer>
   19024:	test   rax,rax
   19027:	je     19041 <yy_scan_bytes+0x71>
   19029:	mov    DWORD PTR [rax+0x20],0x1
   19030:	pop    rbx
   19031:	pop    rbp
   19032:	pop    r12
   19034:	ret    
   19035:	lea    rdi,[rip+0x43bb4]        # 5cbf0 <_IO_stdin_used+0x1bf0>
   1903c:	call   17e90 <yy_fatal_error>
   19041:	lea    rdi,[rip+0x43a21]        # 5ca69 <_IO_stdin_used+0x1a69>
   19048:	call   17e90 <yy_fatal_error>
   1904d:	nop    DWORD PTR [rax]

0000000000019050 <yy_scan_string>:
   19050:	endbr64 
   19054:	push   rbp
   19055:	mov    rbp,rdi
   19058:	call   c310 <strlen@plt>
   1905d:	mov    rdi,rbp
   19060:	pop    rbp
   19061:	mov    rsi,rax
   19064:	jmp    18fd0 <yy_scan_bytes>
   19069:	nop    DWORD PTR [rax+0x0]

0000000000019070 <yyget_lineno>:
   19070:	endbr64 
   19074:	mov    eax,DWORD PTR [rip+0x65faa]        # 7f024 <yylineno>
   1907a:	ret    
   1907b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000019080 <yyget_in>:
   19080:	endbr64 
   19084:	mov    rax,QWORD PTR [rip+0x6a50d]        # 83598 <yyin>
   1908b:	ret    
   1908c:	nop    DWORD PTR [rax+0x0]

0000000000019090 <yyget_out>:
   19090:	endbr64 
   19094:	mov    rax,QWORD PTR [rip+0x6a4f5]        # 83590 <yyout>
   1909b:	ret    
   1909c:	nop    DWORD PTR [rax+0x0]

00000000000190a0 <yyget_leng>:
   190a0:	endbr64 
   190a4:	mov    eax,DWORD PTR [rip+0x70f8e]        # 8a038 <yyleng>
   190aa:	ret    
   190ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000190b0 <yyget_text>:
   190b0:	endbr64 
   190b4:	mov    rax,QWORD PTR [rip+0x70f85]        # 8a040 <yytext>
   190bb:	ret    
   190bc:	nop    DWORD PTR [rax+0x0]

00000000000190c0 <yyset_lineno>:
   190c0:	endbr64 
   190c4:	mov    DWORD PTR [rip+0x65f5a],edi        # 7f024 <yylineno>
   190ca:	ret    
   190cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000190d0 <yyset_in>:
   190d0:	endbr64 
   190d4:	mov    QWORD PTR [rip+0x6a4bd],rdi        # 83598 <yyin>
   190db:	ret    
   190dc:	nop    DWORD PTR [rax+0x0]

00000000000190e0 <yyset_out>:
   190e0:	endbr64 
   190e4:	mov    QWORD PTR [rip+0x6a4a5],rdi        # 83590 <yyout>
   190eb:	ret    
   190ec:	nop    DWORD PTR [rax+0x0]

00000000000190f0 <yyget_debug>:
   190f0:	endbr64 
   190f4:	mov    eax,DWORD PTR [rip+0x6a48e]        # 83588 <yy_flex_debug>
   190fa:	ret    
   190fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000019100 <yyset_debug>:
   19100:	endbr64 
   19104:	mov    DWORD PTR [rip+0x6a47e],edi        # 83588 <yy_flex_debug>
   1910a:	ret    
   1910b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000019110 <yylex_destroy>:
   19110:	endbr64 
   19114:	sub    rsp,0x8
   19118:	mov    rdi,QWORD PTR [rip+0x6a4a9]        # 835c8 <yy_buffer_stack>
   1911f:	test   rdi,rdi
   19122:	jne    1915f <yylex_destroy+0x4f>
   19124:	jmp    191d8 <yylex_destroy+0xc8>
   19129:	nop    DWORD PTR [rax+0x0]
   19130:	mov    rdi,r8
   19133:	call   18030 <yy_delete_buffer>
   19138:	mov    rdx,QWORD PTR [rip+0x6a499]        # 835d8 <yy_buffer_stack_top>
   1913f:	mov    rax,QWORD PTR [rip+0x6a482]        # 835c8 <yy_buffer_stack>
   19146:	mov    QWORD PTR [rax+rdx*8],0x0
   1914e:	call   18e90 <yypop_buffer_state>
   19153:	mov    rdi,QWORD PTR [rip+0x6a46e]        # 835c8 <yy_buffer_stack>
   1915a:	test   rdi,rdi
   1915d:	je     191d8 <yylex_destroy+0xc8>
   1915f:	mov    rax,QWORD PTR [rip+0x6a472]        # 835d8 <yy_buffer_stack_top>
   19166:	mov    r8,QWORD PTR [rdi+rax*8]
   1916a:	test   r8,r8
   1916d:	jne    19130 <yylex_destroy+0x20>
   1916f:	call   4bdc0 <rpl_free>
   19174:	xor    eax,eax
   19176:	mov    QWORD PTR [rip+0x6a447],0x0        # 835c8 <yy_buffer_stack>
   19181:	mov    QWORD PTR [rip+0x6a44c],0x0        # 835d8 <yy_buffer_stack_top>
   1918c:	mov    QWORD PTR [rip+0x6a439],0x0        # 835d0 <yy_buffer_stack_max>
   19197:	mov    QWORD PTR [rip+0x6a416],0x0        # 835b8 <yy_c_buf_p>
   191a2:	mov    DWORD PTR [rip+0x6a404],0x0        # 835b0 <yy_init>
   191ac:	mov    DWORD PTR [rip+0x6a3f6],0x0        # 835ac <yy_start>
   191b6:	mov    QWORD PTR [rip+0x6a3d7],0x0        # 83598 <yyin>
   191c1:	mov    QWORD PTR [rip+0x6a3c4],0x0        # 83590 <yyout>
   191cc:	add    rsp,0x8
   191d0:	ret    
   191d1:	nop    DWORD PTR [rax+0x0]
   191d8:	xor    edi,edi
   191da:	jmp    1916f <yylex_destroy+0x5f>
   191dc:	nop    DWORD PTR [rax+0x0]

00000000000191e0 <yyalloc>:
   191e0:	endbr64 
   191e4:	jmp    c0e0 <malloc@plt>
   191e9:	nop    DWORD PTR [rax+0x0]

00000000000191f0 <yyrealloc>:
   191f0:	endbr64 
   191f4:	jmp    ca20 <realloc@plt>
   191f9:	nop    DWORD PTR [rax+0x0]

0000000000019200 <yyfree>:
   19200:	endbr64 
   19204:	jmp    4bdc0 <rpl_free>
   19209:	nop    DWORD PTR [rax+0x0]

0000000000019210 <get_uri_string>:
   19210:	cmp    DWORD PTR [rdx],0x3
   19213:	jle    19318 <get_uri_string+0x108>
   19219:	push   r13
   1921b:	mov    r13,rsi
   1921e:	push   r12
   19220:	mov    r12,rdi
   19223:	push   rbp
   19224:	mov    rbp,rdx
   19227:	mov    edx,0x4
   1922c:	push   rbx
   1922d:	sub    rsp,0x8
   19231:	movsxd rdi,DWORD PTR [rsi]
   19234:	lea    rsi,[rip+0x4c723]        # 6595e <yy_accept+0x89e>
   1923b:	mov    rbx,rdi
   1923e:	add    rdi,r12
   19241:	call   c7a0 <strncasecmp@plt>
   19246:	test   eax,eax
   19248:	jne    19293 <get_uri_string+0x83>
   1924a:	add    ebx,0x4
   1924d:	mov    DWORD PTR [r13+0x0],ebx
   19251:	mov    eax,DWORD PTR [rbp+0x0]
   19254:	lea    ebx,[rax-0x5]
   19257:	mov    DWORD PTR [rbp+0x0],ebx
   1925a:	jmp    1928f <get_uri_string+0x7f>
   1925c:	nop    DWORD PTR [rax+0x0]
   19260:	call   c3b0 <__ctype_b_loc@plt>
   19265:	movsxd rcx,DWORD PTR [r13+0x0]
   19269:	mov    rdx,QWORD PTR [rax]
   1926c:	mov    rax,rcx
   1926f:	movsx  rcx,BYTE PTR [r12+rcx*1]
   19274:	test   BYTE PTR [rdx+rcx*2+0x1],0x20
   19279:	je     192ac <get_uri_string+0x9c>
   1927b:	add    eax,0x1
   1927e:	mov    DWORD PTR [r13+0x0],eax
   19282:	mov    eax,DWORD PTR [rbp+0x0]
   19285:	lea    ebx,[rax-0x1]
   19288:	mov    DWORD PTR [rbp+0x0],ebx
   1928b:	test   ebx,ebx
   1928d:	je     19293 <get_uri_string+0x83>
   1928f:	test   ebx,ebx
   19291:	jg     19260 <get_uri_string+0x50>
   19293:	add    rsp,0x8
   19297:	xor    eax,eax
   19299:	pop    rbx
   1929a:	pop    rbp
   1929b:	pop    r12
   1929d:	pop    r13
   1929f:	ret    
   192a0:	sub    ebx,0x1
   192a3:	mov    DWORD PTR [rbp+0x0],ebx
   192a6:	je     19293 <get_uri_string+0x83>
   192a8:	mov    eax,DWORD PTR [r13+0x0]
   192ac:	lea    ecx,[rbx+rax*1]
   192af:	movsxd rcx,ecx
   192b2:	movsx  rcx,BYTE PTR [r12+rcx*1-0x1]
   192b8:	test   BYTE PTR [rdx+rcx*2+0x1],0x20
   192bd:	jne    192a0 <get_uri_string+0x90>
   192bf:	cmp    ebx,0x1
   192c2:	je     192d6 <get_uri_string+0xc6>
   192c4:	movsxd rdx,eax
   192c7:	movzx  edx,BYTE PTR [r12+rdx*1]
   192cc:	cmp    dl,0x27
   192cf:	je     19300 <get_uri_string+0xf0>
   192d1:	cmp    dl,0x22
   192d4:	je     19300 <get_uri_string+0xf0>
   192d6:	mov    esi,DWORD PTR [rbp+0x0]
   192d9:	test   esi,esi
   192db:	jle    19293 <get_uri_string+0x83>
   192dd:	movsxd rdi,DWORD PTR [r13+0x0]
   192e1:	add    rsp,0x8
   192e5:	movsxd rsi,esi
   192e8:	pop    rbx
   192e9:	pop    rbp
   192ea:	add    rdi,r12
   192ed:	pop    r12
   192ef:	pop    r13
   192f1:	jmp    4bb00 <xstrndup>
   192f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19300:	add    eax,0x1
   19303:	mov    DWORD PTR [r13+0x0],eax
   19307:	mov    eax,DWORD PTR [rbp+0x0]
   1930a:	lea    esi,[rax-0x2]
   1930d:	mov    DWORD PTR [rbp+0x0],esi
   19310:	jmp    192d9 <get_uri_string+0xc9>
   19312:	nop    WORD PTR [rax+rax*1+0x0]
   19318:	xor    eax,eax
   1931a:	ret    
   1931b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000019320 <get_urls_css>:
   19320:	endbr64 
   19324:	push   r15
   19326:	push   r14
   19328:	push   r13
   1932a:	push   r12
   1932c:	push   rbp
   1932d:	mov    rbp,rdi
   19330:	movsxd rdi,esi
   19333:	mov    esi,edx
   19335:	push   rbx
   19336:	mov    r12,rdi
   19339:	xor    ebx,ebx
   1933b:	sub    rsp,0x28
   1933f:	add    rdi,QWORD PTR [rbp+0x0]
   19343:	mov    rax,QWORD PTR fs:0x28
   1934c:	mov    QWORD PTR [rsp+0x18],rax
   19351:	xor    eax,eax
   19353:	lea    r14,[rsp+0x14]
   19358:	call   18fd0 <yy_scan_bytes>
   1935d:	mov    r13,rax
   19360:	call   18290 <yylex>
   19365:	test   eax,eax
   19367:	je     1938f <get_urls_css+0x6f>
   19369:	nop    DWORD PTR [rax+0x0]
   19370:	mov    edx,DWORD PTR [rip+0x70cc2]        # 8a038 <yyleng>
   19376:	cmp    eax,0xa
   19379:	je     193d0 <get_urls_css+0xb0>
   1937b:	cmp    eax,0x18
   1937e:	je     19488 <get_urls_css+0x168>
   19384:	add    ebx,edx
   19386:	call   18290 <yylex>
   1938b:	test   eax,eax
   1938d:	jne    19370 <get_urls_css+0x50>
   1938f:	mov    rdi,r13
   19392:	call   18030 <yy_delete_buffer>
   19397:	call   19110 <yylex_destroy>
   1939c:	cmp    BYTE PTR [rip+0x70f18],0x0        # 8a2bb <opt+0x23b>
   193a3:	jne    1953b <get_urls_css+0x21b>
   193a9:	mov    rax,QWORD PTR [rsp+0x18]
   193ae:	xor    rax,QWORD PTR fs:0x28
   193b7:	jne    19575 <get_urls_css+0x255>
   193bd:	add    rsp,0x28
   193c1:	pop    rbx
   193c2:	pop    rbp
   193c3:	pop    r12
   193c5:	pop    r13
   193c7:	pop    r14
   193c9:	pop    r15
   193cb:	ret    
   193cc:	nop    DWORD PTR [rax+0x0]
   193d0:	add    ebx,edx
   193d2:	call   18290 <yylex>
   193d7:	mov    edx,DWORD PTR [rip+0x70c5b]        # 8a038 <yyleng>
   193dd:	cmp    eax,0x1
   193e0:	je     193d0 <get_urls_css+0xb0>
   193e2:	cmp    eax,0x6
   193e5:	je     193ec <get_urls_css+0xcc>
   193e7:	cmp    eax,0x18
   193ea:	jne    19384 <get_urls_css+0x64>
   193ec:	lea    ecx,[r12+rbx*1]
   193f0:	mov    DWORD PTR [rsp+0x14],edx
   193f4:	mov    DWORD PTR [rsp+0x10],ecx
   193f8:	cmp    eax,0x18
   193fb:	je     19518 <get_urls_css+0x1f8>
   19401:	cmp    edx,0x1
   19404:	jle    19384 <get_urls_css+0x64>
   1940a:	lea    eax,[rdx-0x2]
   1940d:	sub    edx,0x1
   19410:	add    ecx,0x1
   19413:	movsxd rdi,edx
   19416:	mov    DWORD PTR [rsp+0x10],ecx
   1941a:	mov    DWORD PTR [rsp+0x14],eax
   1941e:	call   4b850 <xmalloc>
   19423:	movsxd rdx,DWORD PTR [rsp+0x14]
   19428:	mov    r15,rax
   1942b:	mov    rax,QWORD PTR [rip+0x70c0e]        # 8a040 <yytext>
   19432:	mov    rdi,r15
   19435:	mov    DWORD PTR [rsp+0xc],edx
   19439:	lea    rsi,[rax+0x1]
   1943d:	mov    QWORD PTR [rsp],rdx
   19441:	call   cb30 <memcpy@plt>
   19446:	mov    rdx,QWORD PTR [rsp]
   1944a:	mov    r8d,DWORD PTR [rsp+0xc]
   1944f:	mov    BYTE PTR [r15+rdx*1],0x0
   19454:	mov    esi,DWORD PTR [rsp+0x10]
   19458:	mov    edx,r8d
   1945b:	mov    rcx,rbp
   1945e:	mov    rdi,r15
   19461:	call   21270 <append_url>
   19466:	cmp    BYTE PTR [rip+0x70e4e],0x0        # 8a2bb <opt+0x23b>
   1946d:	mov    r8,rax
   19470:	jne    1954e <get_urls_css+0x22e>
   19476:	test   r8,r8
   19479:	je     194d6 <get_urls_css+0x1b6>
   1947b:	or     WORD PTR [r8+0x10],0x130
   19482:	jmp    194d6 <get_urls_css+0x1b6>
   19484:	nop    DWORD PTR [rax+0x0]
   19488:	mov    rdi,QWORD PTR [rbp+0x0]
   1948c:	mov    DWORD PTR [rsp+0x14],edx
   19490:	lea    eax,[rbx+r12*1]
   19494:	mov    rdx,r14
   19497:	lea    rsi,[rsp+0x10]
   1949c:	mov    DWORD PTR [rsp+0x10],eax
   194a0:	call   19210 <get_uri_string>
   194a5:	mov    r15,rax
   194a8:	test   rax,rax
   194ab:	je     194de <get_urls_css+0x1be>
   194ad:	mov    edx,DWORD PTR [rsp+0x14]
   194b1:	mov    esi,DWORD PTR [rsp+0x10]
   194b5:	mov    rcx,rbp
   194b8:	mov    rdi,rax
   194bb:	call   21270 <append_url>
   194c0:	cmp    BYTE PTR [rip+0x70df4],0x0        # 8a2bb <opt+0x23b>
   194c7:	mov    r8,rax
   194ca:	jne    194f0 <get_urls_css+0x1d0>
   194cc:	test   r8,r8
   194cf:	je     194d6 <get_urls_css+0x1b6>
   194d1:	or     BYTE PTR [r8+0x10],0x30
   194d6:	mov    rdi,r15
   194d9:	call   4bdc0 <rpl_free>
   194de:	mov    edx,DWORD PTR [rip+0x70b54]        # 8a038 <yyleng>
   194e4:	add    ebx,edx
   194e6:	jmp    19386 <get_urls_css+0x66>
   194eb:	nop    DWORD PTR [rax+rax*1+0x0]
   194f0:	mov    rsi,QWORD PTR [rip+0x70b49]        # 8a040 <yytext>
   194f7:	mov    QWORD PTR [rsp],rax
   194fb:	mov    rcx,r15
   194fe:	mov    edx,ebx
   19500:	lea    rdi,[rip+0x4c45c]        # 65963 <yy_accept+0x8a3>
   19507:	xor    eax,eax
   19509:	call   2e250 <debug_logprintf>
   1950e:	mov    r8,QWORD PTR [rsp]
   19512:	jmp    194cc <get_urls_css+0x1ac>
   19514:	nop    DWORD PTR [rax+0x0]
   19518:	mov    rdi,QWORD PTR [rbp+0x0]
   1951c:	lea    rsi,[rsp+0x10]
   19521:	mov    rdx,r14
   19524:	call   19210 <get_uri_string>
   19529:	mov    r15,rax
   1952c:	test   rax,rax
   1952f:	je     194de <get_urls_css+0x1be>
   19531:	mov    r8d,DWORD PTR [rsp+0x14]
   19536:	jmp    19454 <get_urls_css+0x134>
   1953b:	lea    rdi,[rip+0x4c48d]        # 659cf <yy_accept+0x90f>
   19542:	xor    eax,eax
   19544:	call   2e250 <debug_logprintf>
   19549:	jmp    193a9 <get_urls_css+0x89>
   1954e:	mov    rsi,QWORD PTR [rip+0x70aeb]        # 8a040 <yytext>
   19555:	mov    QWORD PTR [rsp],rax
   19559:	mov    rcx,r15
   1955c:	mov    edx,ebx
   1955e:	lea    rdi,[rip+0x4c433]        # 65998 <yy_accept+0x8d8>
   19565:	xor    eax,eax
   19567:	call   2e250 <debug_logprintf>
   1956c:	mov    r8,QWORD PTR [rsp]
   19570:	jmp    19476 <get_urls_css+0x156>
   19575:	call   c7b0 <__stack_chk_fail@plt>
   1957a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000019580 <get_urls_css_file>:
   19580:	endbr64 
   19584:	push   r13
   19586:	mov    r13,rdi
   19589:	push   r12
   1958b:	push   rbx
   1958c:	mov    rbx,rsi
   1958f:	sub    rsp,0x40
   19593:	mov    rax,QWORD PTR fs:0x28
   1959c:	mov    QWORD PTR [rsp+0x38],rax
   195a1:	xor    eax,eax
   195a3:	call   3c810 <wget_read_file>
   195a8:	mov    r12,rax
   195ab:	test   rax,rax
   195ae:	je     19660 <get_urls_css_file+0xe0>
   195b4:	cmp    BYTE PTR [rip+0x70d00],0x0        # 8a2bb <opt+0x23b>
   195bb:	mov    rdx,QWORD PTR [rax+0x8]
   195bf:	jne    19630 <get_urls_css_file+0xb0>
   195c1:	mov    rax,QWORD PTR [r12]
   195c5:	test   rbx,rbx
   195c8:	mov    rdi,rsp
   195cb:	mov    QWORD PTR [rsp+0x18],r13
   195d0:	cmove  rbx,QWORD PTR [rip+0x70c70]        # 8a248 <opt+0x1c8>
   195d8:	xor    esi,esi
   195da:	mov    BYTE PTR [rsp+0x20],0x0
   195df:	mov    QWORD PTR [rsp],rax
   195e3:	mov    QWORD PTR [rsp+0x28],0x0
   195ec:	mov    QWORD PTR [rsp+0x8],0x0
   195f5:	mov    QWORD PTR [rsp+0x10],rbx
   195fa:	call   19320 <get_urls_css>
   195ff:	mov    rdi,r12
   19602:	call   3ca20 <wget_read_file_free>
   19607:	mov    r12,QWORD PTR [rsp+0x28]
   1960c:	mov    rax,QWORD PTR [rsp+0x38]
   19611:	xor    rax,QWORD PTR fs:0x28
   1961a:	jne    19687 <get_urls_css_file+0x107>
   1961c:	add    rsp,0x40
   19620:	mov    rax,r12
   19623:	pop    rbx
   19624:	pop    r12
   19626:	pop    r13
   19628:	ret    
   19629:	nop    DWORD PTR [rax+0x0]
   19630:	mov    rdi,rdx
   19633:	call   3e8e0 <number_to_static_string>
   19638:	mov    rsi,r13
   1963b:	lea    rdi,[rip+0x4c33d]        # 6597f <yy_accept+0x8bf>
   19642:	mov    rdx,rax
   19645:	xor    eax,eax
   19647:	call   2e250 <debug_logprintf>
   1964c:	mov    rdx,QWORD PTR [r12+0x8]
   19651:	jmp    195c1 <get_urls_css_file+0x41>
   19656:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19660:	call   c740 <__errno_location@plt>
   19665:	mov    edi,DWORD PTR [rax]
   19667:	call   c540 <strerror@plt>
   1966c:	mov    rdx,r13
   1966f:	mov    edi,0x1
   19674:	lea    rsi,[rip+0x4f1ca]        # 68845 <primes.6089+0x2765>
   1967b:	mov    rcx,rax
   1967e:	xor    eax,eax
   19680:	call   2e0a0 <logprintf>
   19685:	jmp    1960c <get_urls_css_file+0x8c>
   19687:	call   c7b0 <__stack_chk_fail@plt>
   1968c:	nop    DWORD PTR [rax+0x0]

0000000000019690 <ftp_request>:
   19690:	push   r14
   19692:	push   r13
   19694:	mov    r13,rdi
   19697:	push   r12
   19699:	push   rbp
   1969a:	push   rbx
   1969b:	sub    rsp,0x110
   196a2:	mov    rax,QWORD PTR fs:0x28
   196ab:	mov    QWORD PTR [rsp+0x108],rax
   196b3:	xor    eax,eax
   196b5:	test   rsi,rsi
   196b8:	je     19850 <ftp_request+0x1c0>
   196be:	mov    r12,rsi
   196c1:	lea    rsi,[rip+0x5477b]        # 6de43 <urlchr_table+0x2a3>
   196c8:	mov    rdi,r12
   196cb:	call   c0a0 <strpbrk@plt>
   196d0:	mov    rbp,rax
   196d3:	test   rax,rax
   196d6:	je     19810 <ftp_request+0x180>
   196dc:	mov    rdi,r12
   196df:	mov    rbx,rsp
   196e2:	call   c310 <strlen@plt>
   196e7:	mov    rbp,rbx
   196ea:	lea    r14,[rax+0x1]
   196ee:	cmp    rax,0xff
   196f4:	ja     19840 <ftp_request+0x1b0>
   196fa:	mov    rdx,r14
   196fd:	mov    rsi,r12
   19700:	mov    rdi,rbp
   19703:	call   cb30 <memcpy@plt>
   19708:	movzx  eax,BYTE PTR [rbp+0x0]
   1970c:	mov    rdx,rbp
   1970f:	test   al,al
   19711:	jne    19724 <ftp_request+0x94>
   19713:	jmp    1973b <ftp_request+0xab>
   19715:	nop    DWORD PTR [rax]
   19718:	movzx  eax,BYTE PTR [rdx+0x1]
   1971c:	add    rdx,0x1
   19720:	test   al,al
   19722:	je     1973b <ftp_request+0xab>
   19724:	cmp    al,0xd
   19726:	je     1972c <ftp_request+0x9c>
   19728:	cmp    al,0xa
   1972a:	jne    19718 <ftp_request+0x88>
   1972c:	mov    BYTE PTR [rdx],0x20
   1972f:	movzx  eax,BYTE PTR [rdx+0x1]
   19733:	add    rdx,0x1
   19737:	test   al,al
   19739:	jne    19724 <ftp_request+0x94>
   1973b:	cmp    BYTE PTR [rip+0x70b79],0x0        # 8a2bb <opt+0x23b>
   19742:	jne    19870 <ftp_request+0x1e0>
   19748:	xor    r8d,r8d
   1974b:	lea    rcx,[rip+0x546f1]        # 6de43 <urlchr_table+0x2a3>
   19752:	mov    rdx,rbp
   19755:	mov    rdi,r13
   19758:	lea    rsi,[rip+0x4c766]        # 65ec5 <yy_accept+0xe05>
   1975f:	xor    eax,eax
   19761:	call   3bbd0 <concat_strings>
   19766:	mov    r12,rax
   19769:	cmp    rbp,rbx
   1976c:	jne    19831 <ftp_request+0x1a1>
   19772:	cmp    BYTE PTR [rip+0x70b3f],0x0        # 8a2b8 <opt+0x238>
   19779:	je     197d8 <ftp_request+0x148>
   1977b:	mov    ecx,0x4
   19780:	lea    rdi,[rip+0x4e3cd]        # 67b54 <primes.6089+0x1a74>
   19787:	mov    rsi,r12
   1978a:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1978c:	seta   al
   1978f:	sbb    al,0x0
   19791:	test   al,al
   19793:	je     197f8 <ftp_request+0x168>
   19795:	mov    rdx,r12
   19798:	lea    rsi,[rip+0x4c233]        # 659d2 <yy_accept+0x912>
   1979f:	mov    edi,0x3
   197a4:	xor    eax,eax
   197a6:	call   2e0a0 <logprintf>
   197ab:	mov    rax,QWORD PTR [rsp+0x108]
   197b3:	xor    rax,QWORD PTR fs:0x28
   197bc:	jne    198ac <ftp_request+0x21c>
   197c2:	add    rsp,0x110
   197c9:	mov    rax,r12
   197cc:	pop    rbx
   197cd:	pop    rbp
   197ce:	pop    r12
   197d0:	pop    r13
   197d2:	pop    r14
   197d4:	ret    
   197d5:	nop    DWORD PTR [rax]
   197d8:	cmp    BYTE PTR [rip+0x70adc],0x0        # 8a2bb <opt+0x23b>
   197df:	je     197ab <ftp_request+0x11b>
   197e1:	mov    rsi,r12
   197e4:	lea    rdi,[rip+0x4c1e6]        # 659d1 <yy_accept+0x911>
   197eb:	xor    eax,eax
   197ed:	call   2e250 <debug_logprintf>
   197f2:	jmp    197ab <ftp_request+0x11b>
   197f4:	nop    DWORD PTR [rax+0x0]
   197f8:	lea    rsi,[rip+0x4c1b9]        # 659b8 <yy_accept+0x8f8>
   197ff:	mov    edi,0x3
   19804:	call   2de60 <logputs>
   19809:	jmp    197ab <ftp_request+0x11b>
   1980b:	nop    DWORD PTR [rax+rax*1+0x0]
   19810:	mov    rdx,r12
   19813:	xor    r8d,r8d
   19816:	lea    rcx,[rip+0x54626]        # 6de43 <urlchr_table+0x2a3>
   1981d:	mov    rdi,r13
   19820:	lea    rsi,[rip+0x4c69e]        # 65ec5 <yy_accept+0xe05>
   19827:	xor    eax,eax
   19829:	call   3bbd0 <concat_strings>
   1982e:	mov    r12,rax
   19831:	mov    rdi,rbp
   19834:	call   4bdc0 <rpl_free>
   19839:	jmp    19772 <ftp_request+0xe2>
   1983e:	xchg   ax,ax
   19840:	mov    rdi,r14
   19843:	call   4b850 <xmalloc>
   19848:	mov    rbp,rax
   1984b:	jmp    196fa <ftp_request+0x6a>
   19850:	xor    edx,edx
   19852:	lea    rsi,[rip+0x545ea]        # 6de43 <urlchr_table+0x2a3>
   19859:	xor    eax,eax
   1985b:	call   3bbd0 <concat_strings>
   19860:	mov    r12,rax
   19863:	jmp    19772 <ftp_request+0xe2>
   19868:	nop    DWORD PTR [rax+rax*1+0x0]
   19870:	mov    rsi,rbp
   19873:	mov    edi,0x7
   19878:	call   4b2b0 <quotearg_style>
   1987d:	mov    rsi,r12
   19880:	mov    edi,0x7
   19885:	mov    r14,rax
   19888:	call   4b2b0 <quotearg_style>
   1988d:	mov    r8,r14
   19890:	mov    rcx,r13
   19893:	mov    rsi,r13
   19896:	mov    rdx,rax
   19899:	lea    rdi,[rip+0x4c298]        # 65b38 <yy_accept+0xa78>
   198a0:	xor    eax,eax
   198a2:	call   2e250 <debug_logprintf>
   198a7:	jmp    19748 <ftp_request+0xb8>
   198ac:	call   c7b0 <__stack_chk_fail@plt>
   198b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   198bc:	nop    DWORD PTR [rax+0x0]

00000000000198c0 <ftp_response>:
   198c0:	endbr64 
   198c4:	push   r13
   198c6:	mov    r13,rsi
   198c9:	push   r12
   198cb:	lea    r12,[rip+0x54571]        # 6de43 <urlchr_table+0x2a3>
   198d2:	push   rbp
   198d3:	push   rbx
   198d4:	mov    ebx,edi
   198d6:	sub    rsp,0x8
   198da:	jmp    19928 <ftp_response+0x68>
   198dc:	nop    DWORD PTR [rax+0x0]
   198e0:	cmp    BYTE PTR [rip+0x709d4],0x0        # 8a2bb <opt+0x23b>
   198e7:	jne    19980 <ftp_response+0xc0>
   198ed:	movsx  eax,BYTE PTR [rbp+0x0]
   198f1:	sub    eax,0x30
   198f4:	cmp    eax,0x9
   198f7:	ja     19920 <ftp_response+0x60>
   198f9:	movsx  eax,BYTE PTR [rbp+0x1]
   198fd:	sub    eax,0x30
   19900:	cmp    eax,0x9
   19903:	ja     19920 <ftp_response+0x60>
   19905:	movsx  eax,BYTE PTR [rbp+0x2]
   19909:	sub    eax,0x30
   1990c:	cmp    eax,0x9
   1990f:	ja     19920 <ftp_response+0x60>
   19911:	cmp    BYTE PTR [rbp+0x3],0x20
   19915:	je     199b8 <ftp_response+0xf8>
   1991b:	nop    DWORD PTR [rax+rax*1+0x0]
   19920:	mov    rdi,rbp
   19923:	call   4bdc0 <rpl_free>
   19928:	mov    edi,ebx
   1992a:	call   35060 <fd_read_line>
   1992f:	mov    rbp,rax
   19932:	test   rax,rax
   19935:	je     199a8 <ftp_response+0xe8>
   19937:	mov    rsi,r12
   1993a:	mov    rdi,rax
   1993d:	call   c0a0 <strpbrk@plt>
   19942:	test   rax,rax
   19945:	je     1994a <ftp_response+0x8a>
   19947:	mov    BYTE PTR [rax],0x0
   1994a:	cmp    BYTE PTR [rip+0x70967],0x0        # 8a2b8 <opt+0x238>
   19951:	je     198e0 <ftp_response+0x20>
   19953:	mov    rsi,rbp
   19956:	mov    edi,0x7
   1995b:	call   4b2b0 <quotearg_style>
   19960:	lea    rsi,[rip+0x41cf4]        # 5b65b <_IO_stdin_used+0x65b>
   19967:	mov    edi,0x1
   1996c:	mov    rdx,rax
   1996f:	xor    eax,eax
   19971:	call   2e0a0 <logprintf>
   19976:	jmp    198ed <ftp_response+0x2d>
   1997b:	nop    DWORD PTR [rax+rax*1+0x0]
   19980:	mov    rsi,rbp
   19983:	mov    edi,0x7
   19988:	call   4b2b0 <quotearg_style>
   1998d:	lea    rdi,[rip+0x41cc7]        # 5b65b <_IO_stdin_used+0x65b>
   19994:	mov    rsi,rax
   19997:	xor    eax,eax
   19999:	call   2e250 <debug_logprintf>
   1999e:	jmp    198ed <ftp_response+0x2d>
   199a3:	nop    DWORD PTR [rax+rax*1+0x0]
   199a8:	add    rsp,0x8
   199ac:	mov    eax,0xe
   199b1:	pop    rbx
   199b2:	pop    rbp
   199b3:	pop    r12
   199b5:	pop    r13
   199b7:	ret    
   199b8:	mov    QWORD PTR [r13+0x0],rbp
   199bc:	add    rsp,0x8
   199c0:	mov    eax,0x7
   199c5:	pop    rbx
   199c6:	pop    rbp
   199c7:	pop    r12
   199c9:	pop    r13
   199cb:	ret    
   199cc:	nop    DWORD PTR [rax+0x0]

00000000000199d0 <ftp_greeting>:
   199d0:	endbr64 
   199d4:	push   r12
   199d6:	sub    rsp,0x10
   199da:	mov    rax,QWORD PTR fs:0x28
   199e3:	mov    QWORD PTR [rsp+0x8],rax
   199e8:	xor    eax,eax
   199ea:	mov    rsi,rsp
   199ed:	mov    QWORD PTR [rsp],0x0
   199f5:	call   198c0 <ftp_response>
   199fa:	mov    rdi,QWORD PTR [rsp]
   199fe:	mov    r12d,eax
   19a01:	cmp    eax,0x7
   19a04:	jne    19a38 <ftp_greeting+0x68>
   19a06:	cmp    BYTE PTR [rdi],0x32
   19a09:	mov    eax,0xf
   19a0e:	cmovne r12d,eax
   19a12:	call   4bdc0 <rpl_free>
   19a17:	mov    rax,QWORD PTR [rsp+0x8]
   19a1c:	xor    rax,QWORD PTR fs:0x28
   19a25:	jne    19a3f <ftp_greeting+0x6f>
   19a27:	add    rsp,0x10
   19a2b:	mov    eax,r12d
   19a2e:	pop    r12
   19a30:	ret    
   19a31:	nop    DWORD PTR [rax+0x0]
   19a38:	test   rdi,rdi
   19a3b:	je     19a17 <ftp_greeting+0x47>
   19a3d:	jmp    19a12 <ftp_greeting+0x42>
   19a3f:	call   c7b0 <__stack_chk_fail@plt>
   19a44:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   19a4f:	nop

0000000000019a50 <ftp_login>:
   19a50:	endbr64 
   19a54:	push   r14
   19a56:	push   r13
   19a58:	mov    r13,rdx
   19a5b:	push   r12
   19a5d:	mov    r12d,edi
   19a60:	lea    rdi,[rip+0x4bf73]        # 659da <yy_accept+0x91a>
   19a67:	push   rbp
   19a68:	sub    rsp,0x28
   19a6c:	mov    rax,QWORD PTR fs:0x28
   19a75:	mov    QWORD PTR [rsp+0x18],rax
   19a7a:	xor    eax,eax
   19a7c:	call   19690 <ftp_request>
   19a81:	mov    rdi,rax
   19a84:	mov    rbp,rax
   19a87:	call   c310 <strlen@plt>
   19a8c:	mov    edi,r12d
   19a8f:	mov    rsi,rbp
   19a92:	mov    rdx,rax
   19a95:	mov    rax,QWORD PTR [rip+0x41784]        # 5b220 <_IO_stdin_used+0x220>
   19a9c:	movq   xmm0,rax
   19aa1:	call   f2a0 <fd_write>
   19aa6:	mov    rdi,rbp
   19aa9:	test   eax,eax
   19aab:	js     19bc0 <ftp_login+0x170>
   19ab1:	call   4bdc0 <rpl_free>
   19ab6:	lea    rbp,[rsp+0x10]
   19abb:	mov    edi,r12d
   19abe:	mov    rsi,rbp
   19ac1:	call   198c0 <ftp_response>
   19ac6:	cmp    eax,0x7
   19ac9:	jne    19ba0 <ftp_login+0x150>
   19acf:	mov    r14,QWORD PTR [rsp+0x10]
   19ad4:	movzx  edx,BYTE PTR [r14]
   19ad8:	cmp    dl,0x32
   19adb:	je     19bf0 <ftp_login+0x1a0>
   19ae1:	cmp    dl,0x33
   19ae4:	jne    19bd0 <ftp_login+0x180>
   19aea:	mov    edx,0xa
   19aef:	mov    rsi,r14
   19af2:	lea    rdi,[rip+0x4bee6]        # 659df <yy_accept+0x91f>
   19af9:	call   433b0 <c_strncasecmp>
   19afe:	test   eax,eax
   19b00:	je     19c08 <ftp_login+0x1b8>
   19b06:	mov    edx,0xc
   19b0b:	mov    rsi,r14
   19b0e:	lea    rdi,[rip+0x4bed5]        # 659ea <yy_accept+0x92a>
   19b15:	call   433b0 <c_strncasecmp>
   19b1a:	test   eax,eax
   19b1c:	je     19c60 <ftp_login+0x210>
   19b22:	mov    rdi,r14
   19b25:	call   4bdc0 <rpl_free>
   19b2a:	mov    rsi,r13
   19b2d:	lea    rdi,[rip+0x4e020]        # 67b54 <primes.6089+0x1a74>
   19b34:	mov    QWORD PTR [rsp+0x10],0x0
   19b3d:	call   19690 <ftp_request>
   19b42:	mov    rdi,rax
   19b45:	mov    r13,rax
   19b48:	call   c310 <strlen@plt>
   19b4d:	mov    edi,r12d
   19b50:	mov    rsi,r13
   19b53:	mov    rdx,rax
   19b56:	mov    rax,QWORD PTR [rip+0x416c3]        # 5b220 <_IO_stdin_used+0x220>
   19b5d:	movq   xmm0,rax
   19b62:	call   f2a0 <fd_write>
   19b67:	mov    rdi,r13
   19b6a:	test   eax,eax
   19b6c:	js     19bc0 <ftp_login+0x170>
   19b6e:	call   4bdc0 <rpl_free>
   19b73:	mov    rsi,rbp
   19b76:	mov    edi,r12d
   19b79:	call   198c0 <ftp_response>
   19b7e:	cmp    eax,0x7
   19b81:	jne    19ba0 <ftp_login+0x150>
   19b83:	mov    rdi,QWORD PTR [rsp+0x10]
   19b88:	cmp    BYTE PTR [rdi],0x32
   19b8b:	je     19be0 <ftp_login+0x190>
   19b8d:	call   4bdc0 <rpl_free>
   19b92:	mov    eax,0x8
   19b97:	nop    WORD PTR [rax+rax*1+0x0]
   19ba0:	mov    rcx,QWORD PTR [rsp+0x18]
   19ba5:	xor    rcx,QWORD PTR fs:0x28
   19bae:	jne    19c67 <ftp_login+0x217>
   19bb4:	add    rsp,0x28
   19bb8:	pop    rbp
   19bb9:	pop    r12
   19bbb:	pop    r13
   19bbd:	pop    r14
   19bbf:	ret    
   19bc0:	call   4bdc0 <rpl_free>
   19bc5:	mov    eax,0x2c
   19bca:	jmp    19ba0 <ftp_login+0x150>
   19bcc:	nop    DWORD PTR [rax+0x0]
   19bd0:	mov    rdi,r14
   19bd3:	call   4bdc0 <rpl_free>
   19bd8:	mov    eax,0x9
   19bdd:	jmp    19ba0 <ftp_login+0x150>
   19bdf:	nop
   19be0:	mov    DWORD PTR [rsp+0xc],eax
   19be4:	call   4bdc0 <rpl_free>
   19be9:	mov    eax,DWORD PTR [rsp+0xc]
   19bed:	jmp    19ba0 <ftp_login+0x150>
   19bef:	nop
   19bf0:	mov    rdi,r14
   19bf3:	mov    DWORD PTR [rsp+0xc],eax
   19bf7:	call   4bdc0 <rpl_free>
   19bfc:	mov    eax,DWORD PTR [rsp+0xc]
   19c00:	jmp    19ba0 <ftp_login+0x150>
   19c02:	nop    WORD PTR [rax+rax*1+0x0]
   19c08:	mov    esi,0xa
   19c0d:	add    rsi,r14
   19c10:	xor    edi,edi
   19c12:	movsx  eax,BYTE PTR [rsi]
   19c15:	lea    ecx,[rax-0x30]
   19c18:	mov    edx,eax
   19c1a:	cmp    ecx,0x9
   19c1d:	jbe    19c40 <ftp_login+0x1f0>
   19c1f:	nop
   19c20:	cmp    dl,0x20
   19c23:	jne    19bd0 <ftp_login+0x180>
   19c25:	mov    rdx,r13
   19c28:	add    rsi,0x1
   19c2c:	call   402a0 <skey_response>
   19c31:	mov    r14,QWORD PTR [rsp+0x10]
   19c36:	mov    r13,rax
   19c39:	jmp    19b22 <ftp_login+0xd2>
   19c3e:	xchg   ax,ax
   19c40:	lea    edx,[rdi+rdi*4]
   19c43:	add    rsi,0x1
   19c47:	lea    edi,[rax+rdx*2-0x30]
   19c4b:	movsx  eax,BYTE PTR [rsi]
   19c4e:	lea    ecx,[rax-0x30]
   19c51:	mov    edx,eax
   19c53:	cmp    ecx,0x9
   19c56:	jbe    19c40 <ftp_login+0x1f0>
   19c58:	jmp    19c20 <ftp_login+0x1d0>
   19c5a:	nop    WORD PTR [rax+rax*1+0x0]
   19c60:	mov    esi,0xc
   19c65:	jmp    19c0d <ftp_login+0x1bd>
   19c67:	call   c7b0 <__stack_chk_fail@plt>
   19c6c:	nop    DWORD PTR [rax+0x0]

0000000000019c70 <ftp_port>:
   19c70:	endbr64 
   19c74:	push   r12
   19c76:	xor    edx,edx
   19c78:	push   rbp
   19c79:	mov    ebp,edi
   19c7b:	push   rbx
   19c7c:	mov    rbx,rsi
   19c7f:	sub    rsp,0x70
   19c83:	mov    rax,QWORD PTR fs:0x28
   19c8c:	mov    QWORD PTR [rsp+0x68],rax
   19c91:	xor    eax,eax
   19c93:	lea    r12,[rsp+0x20]
   19c98:	mov    rsi,r12
   19c9b:	call   ecd0 <socket_ip_address>
   19ca0:	test   al,al
   19ca2:	je     19da0 <ftp_port+0x130>
   19ca8:	lea    rsi,[rsp+0x14]
   19cad:	mov    rdi,r12
   19cb0:	mov    DWORD PTR [rsp+0x14],0x0
   19cb8:	call   fba0 <bind_local>
   19cbd:	mov    DWORD PTR [rbx],eax
   19cbf:	test   eax,eax
   19cc1:	js     19da0 <ftp_port+0x130>
   19cc7:	mov    eax,DWORD PTR [rsp+0x14]
   19ccb:	lea    r12,[rsp+0x40]
   19cd0:	sub    rsp,0x8
   19cd4:	lea    r8,[rip+0x4bd2a]        # 65a05 <yy_accept+0x945>
   19cdb:	mov    ecx,0x19
   19ce0:	mov    rdi,r12
   19ce3:	mov    esi,0x19
   19ce8:	movzx  edx,al
   19ceb:	movzx  eax,ah
   19cee:	push   rdx
   19cef:	mov    edx,0x1
   19cf4:	push   rax
   19cf5:	movzx  eax,BYTE PTR [rsp+0x3f]
   19cfa:	push   rax
   19cfb:	movzx  eax,BYTE PTR [rsp+0x46]
   19d00:	push   rax
   19d01:	movzx  eax,BYTE PTR [rsp+0x4d]
   19d06:	push   rax
   19d07:	movzx  r9d,BYTE PTR [rsp+0x54]
   19d0d:	xor    eax,eax
   19d0f:	call   c9d0 <__snprintf_chk@plt>
   19d14:	mov    rsi,r12
   19d17:	mov    BYTE PTR [rsp+0x88],0x0
   19d1f:	add    rsp,0x30
   19d23:	lea    rdi,[rip+0x4bccd]        # 659f7 <yy_accept+0x937>
   19d2a:	call   19690 <ftp_request>
   19d2f:	mov    rdi,rax
   19d32:	mov    r12,rax
   19d35:	call   c310 <strlen@plt>
   19d3a:	movsd  xmm0,QWORD PTR [rip+0x414de]        # 5b220 <_IO_stdin_used+0x220>
   19d42:	mov    edi,ebp
   19d44:	mov    rsi,r12
   19d47:	mov    rdx,rax
   19d4a:	call   f2a0 <fd_write>
   19d4f:	mov    rdi,r12
   19d52:	test   eax,eax
   19d54:	js     19de8 <ftp_port+0x178>
   19d5a:	call   4bdc0 <rpl_free>
   19d5f:	lea    rsi,[rsp+0x18]
   19d64:	mov    edi,ebp
   19d66:	call   198c0 <ftp_response>
   19d6b:	cmp    eax,0x7
   19d6e:	jne    19dd0 <ftp_port+0x160>
   19d70:	mov    rdi,QWORD PTR [rsp+0x18]
   19d75:	cmp    BYTE PTR [rdi],0x32
   19d78:	je     19dc0 <ftp_port+0x150>
   19d7a:	call   4bdc0 <rpl_free>
   19d7f:	mov    edi,DWORD PTR [rbx]
   19d81:	mov    QWORD PTR [rsp+0x18],0x0
   19d8a:	call   f400 <fd_close>
   19d8f:	mov    eax,0xa
   19d94:	jmp    19da5 <ftp_port+0x135>
   19d96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   19da0:	mov    eax,0xb
   19da5:	mov    rcx,QWORD PTR [rsp+0x68]
   19daa:	xor    rcx,QWORD PTR fs:0x28
   19db3:	jne    19dfb <ftp_port+0x18b>
   19db5:	add    rsp,0x70
   19db9:	pop    rbx
   19dba:	pop    rbp
   19dbb:	pop    r12
   19dbd:	ret    
   19dbe:	xchg   ax,ax
   19dc0:	mov    DWORD PTR [rsp+0xc],eax
   19dc4:	call   4bdc0 <rpl_free>
   19dc9:	mov    eax,DWORD PTR [rsp+0xc]
   19dcd:	jmp    19da5 <ftp_port+0x135>
   19dcf:	nop
   19dd0:	mov    edi,DWORD PTR [rbx]
   19dd2:	mov    DWORD PTR [rsp+0xc],eax
   19dd6:	call   f400 <fd_close>
   19ddb:	mov    eax,DWORD PTR [rsp+0xc]
   19ddf:	jmp    19da5 <ftp_port+0x135>
   19de1:	nop    DWORD PTR [rax+0x0]
   19de8:	call   4bdc0 <rpl_free>
   19ded:	mov    edi,DWORD PTR [rbx]
   19def:	call   f400 <fd_close>
   19df4:	mov    eax,0x2c
   19df9:	jmp    19da5 <ftp_port+0x135>
   19dfb:	call   c7b0 <__stack_chk_fail@plt>

0000000000019e00 <ftp_lprt>:
   19e00:	endbr64 
   19e04:	push   r12
   19e06:	xor    edx,edx
   19e08:	push   rbp
   19e09:	mov    ebp,edi
   19e0b:	push   rbx
   19e0c:	mov    rbx,rsi
   19e0f:	sub    rsp,0xa0
   19e16:	mov    rax,QWORD PTR fs:0x28
   19e1f:	mov    QWORD PTR [rsp+0x98],rax
   19e27:	xor    eax,eax
   19e29:	lea    r12,[rsp+0x20]
   19e2e:	mov    rsi,r12
   19e31:	call   ecd0 <socket_ip_address>
   19e36:	test   al,al
   19e38:	je     19f40 <ftp_lprt+0x140>
   19e3e:	lea    rsi,[rsp+0x14]
   19e43:	mov    rdi,r12
   19e46:	mov    DWORD PTR [rsp+0x14],0x0
   19e4e:	call   fba0 <bind_local>
   19e53:	mov    DWORD PTR [rbx],eax
   19e55:	test   eax,eax
   19e57:	js     19f40 <ftp_lprt+0x140>
   19e5d:	mov    edx,DWORD PTR [rsp+0x20]
   19e61:	mov    eax,DWORD PTR [rsp+0x14]
   19e65:	cmp    edx,0x2
   19e68:	jne    19f70 <ftp_lprt+0x170>
   19e6e:	movzx  edx,al
   19e71:	movzx  eax,ah
   19e74:	lea    r12,[rsp+0x40]
   19e79:	mov    r9d,0x4
   19e7f:	push   rdx
   19e80:	lea    r8,[rip+0x4bb75]        # 659fc <yy_accept+0x93c>
   19e87:	mov    ecx,0x55
   19e8c:	mov    rdi,r12
   19e8f:	push   rax
   19e90:	mov    edx,0x1
   19e95:	mov    esi,0x55
   19e9a:	push   0x2
   19e9c:	movzx  eax,BYTE PTR [rsp+0x3f]
   19ea1:	push   rax
   19ea2:	movzx  eax,BYTE PTR [rsp+0x46]
   19ea7:	push   rax
   19ea8:	movzx  eax,BYTE PTR [rsp+0x4d]
   19ead:	push   rax
   19eae:	movzx  eax,BYTE PTR [rsp+0x54]
   19eb3:	push   rax
   19eb4:	xor    eax,eax
   19eb6:	push   0x4
   19eb8:	call   c9d0 <__snprintf_chk@plt>
   19ebd:	add    rsp,0x40
   19ec1:	mov    rsi,r12
   19ec4:	lea    rdi,[rip+0x4bb4c]        # 65a17 <yy_accept+0x957>
   19ecb:	call   19690 <ftp_request>
   19ed0:	mov    rdi,rax
   19ed3:	mov    r12,rax
   19ed6:	call   c310 <strlen@plt>
   19edb:	movsd  xmm0,QWORD PTR [rip+0x4133d]        # 5b220 <_IO_stdin_used+0x220>
   19ee3:	mov    edi,ebp
   19ee5:	mov    rsi,r12
   19ee8:	mov    rdx,rax
   19eeb:	call   f2a0 <fd_write>
   19ef0:	mov    rdi,r12
   19ef3:	test   eax,eax
   19ef5:	js     1a068 <ftp_lprt+0x268>
   19efb:	call   4bdc0 <rpl_free>
   19f00:	lea    rsi,[rsp+0x18]
   19f05:	mov    edi,ebp
   19f07:	call   198c0 <ftp_response>
   19f0c:	cmp    eax,0x7
   19f0f:	jne    1a050 <ftp_lprt+0x250>
   19f15:	mov    rdi,QWORD PTR [rsp+0x18]
   19f1a:	cmp    BYTE PTR [rdi],0x32
   19f1d:	je     1a038 <ftp_lprt+0x238>
   19f23:	call   4bdc0 <rpl_free>
   19f28:	mov    edi,DWORD PTR [rbx]
   19f2a:	mov    QWORD PTR [rsp+0x18],0x0
   19f33:	call   f400 <fd_close>
   19f38:	mov    eax,0xa
   19f3d:	jmp    19f45 <ftp_lprt+0x145>
   19f3f:	nop
   19f40:	mov    eax,0xb
   19f45:	mov    rcx,QWORD PTR [rsp+0x98]
   19f4d:	xor    rcx,QWORD PTR fs:0x28
   19f56:	jne    1a07e <ftp_lprt+0x27e>
   19f5c:	add    rsp,0xa0
   19f63:	pop    rbx
   19f64:	pop    rbp
   19f65:	pop    r12
   19f67:	ret    
   19f68:	nop    DWORD PTR [rax+rax*1+0x0]
   19f70:	cmp    edx,0xa
   19f73:	jne    1a083 <ftp_lprt+0x283>
   19f79:	movzx  edx,al
   19f7c:	movzx  eax,ah
   19f7f:	lea    r12,[rsp+0x40]
   19f84:	mov    r9d,0x6
   19f8a:	push   rdx
   19f8b:	lea    r8,[rip+0x4bbde]        # 65b70 <yy_accept+0xab0>
   19f92:	mov    ecx,0x55
   19f97:	mov    rdi,r12
   19f9a:	push   rax
   19f9b:	mov    edx,0x1
   19fa0:	mov    esi,0x55
   19fa5:	push   0x2
   19fa7:	movzx  eax,BYTE PTR [rsp+0x4b]
   19fac:	push   rax
   19fad:	movzx  eax,BYTE PTR [rsp+0x52]
   19fb2:	push   rax
   19fb3:	movzx  eax,BYTE PTR [rsp+0x59]
   19fb8:	push   rax
   19fb9:	movzx  eax,BYTE PTR [rsp+0x60]
   19fbe:	push   rax
   19fbf:	movzx  eax,BYTE PTR [rsp+0x67]
   19fc4:	push   rax
   19fc5:	movzx  eax,BYTE PTR [rsp+0x6e]
   19fca:	push   rax
   19fcb:	movzx  eax,BYTE PTR [rsp+0x75]
   19fd0:	push   rax
   19fd1:	movzx  eax,BYTE PTR [rsp+0x7c]
   19fd6:	push   rax
   19fd7:	movzx  eax,BYTE PTR [rsp+0x83]
   19fdf:	push   rax
   19fe0:	movzx  eax,BYTE PTR [rsp+0x8a]
   19fe8:	push   rax
   19fe9:	movzx  eax,BYTE PTR [rsp+0x91]
   19ff1:	push   rax
   19ff2:	movzx  eax,BYTE PTR [rsp+0x98]
   19ffa:	push   rax
   19ffb:	movzx  eax,BYTE PTR [rsp+0x9f]
   1a003:	push   rax
   1a004:	movzx  eax,BYTE PTR [rsp+0xa6]
   1a00c:	push   rax
   1a00d:	movzx  eax,BYTE PTR [rsp+0xad]
   1a015:	push   rax
   1a016:	movzx  eax,BYTE PTR [rsp+0xb4]
   1a01e:	push   rax
   1a01f:	xor    eax,eax
   1a021:	push   0x10
   1a023:	call   c9d0 <__snprintf_chk@plt>
   1a028:	add    rsp,0xa0
   1a02f:	jmp    19ec1 <ftp_lprt+0xc1>
   1a034:	nop    DWORD PTR [rax+0x0]
   1a038:	mov    DWORD PTR [rsp+0xc],eax
   1a03c:	call   4bdc0 <rpl_free>
   1a041:	mov    eax,DWORD PTR [rsp+0xc]
   1a045:	jmp    19f45 <ftp_lprt+0x145>
   1a04a:	nop    WORD PTR [rax+rax*1+0x0]
   1a050:	mov    edi,DWORD PTR [rbx]
   1a052:	mov    DWORD PTR [rsp+0xc],eax
   1a056:	call   f400 <fd_close>
   1a05b:	mov    eax,DWORD PTR [rsp+0xc]
   1a05f:	jmp    19f45 <ftp_lprt+0x145>
   1a064:	nop    DWORD PTR [rax+0x0]
   1a068:	call   4bdc0 <rpl_free>
   1a06d:	mov    edi,DWORD PTR [rbx]
   1a06f:	call   f400 <fd_close>
   1a074:	mov    eax,0x2c
   1a079:	jmp    19f45 <ftp_lprt+0x145>
   1a07e:	call   c7b0 <__stack_chk_fail@plt>
   1a083:	jmp    cc5d <ftp_lprt.cold>
   1a088:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001a090 <ftp_eprt>:
   1a090:	endbr64 
   1a094:	push   r14
   1a096:	xor    edx,edx
   1a098:	push   r13
   1a09a:	push   r12
   1a09c:	push   rbp
   1a09d:	mov    ebp,edi
   1a09f:	push   rbx
   1a0a0:	mov    rbx,rsi
   1a0a3:	sub    rsp,0x90
   1a0aa:	mov    rax,QWORD PTR fs:0x28
   1a0b3:	mov    QWORD PTR [rsp+0x88],rax
   1a0bb:	xor    eax,eax
   1a0bd:	lea    r12,[rsp+0x20]
   1a0c2:	mov    rsi,r12
   1a0c5:	call   ecd0 <socket_ip_address>
   1a0ca:	test   al,al
   1a0cc:	je     1a1c0 <ftp_eprt+0x130>
   1a0d2:	lea    rsi,[rsp+0x14]
   1a0d7:	mov    rdi,r12
   1a0da:	mov    DWORD PTR [rsp+0x14],0x0
   1a0e2:	call   fba0 <bind_local>
   1a0e7:	mov    DWORD PTR [rbx],eax
   1a0e9:	test   eax,eax
   1a0eb:	js     1a1c0 <ftp_eprt+0x130>
   1a0f1:	mov    r14d,DWORD PTR [rsp+0x14]
   1a0f6:	mov    rdi,r12
   1a0f9:	xor    r13d,r13d
   1a0fc:	cmp    DWORD PTR [rsp+0x20],0x2
   1a101:	setne  r13b
   1a105:	lea    r12,[rsp+0x40]
   1a10a:	call   1e490 <print_address>
   1a10f:	push   r14
   1a111:	add    r13d,0x1
   1a115:	mov    ecx,0x39
   1a11a:	push   rax
   1a11b:	mov    r9d,r13d
   1a11e:	lea    r8,[rip+0x4b8f7]        # 65a1c <yy_accept+0x95c>
   1a125:	mov    edx,0x1
   1a12a:	mov    rdi,r12
   1a12d:	mov    esi,0x39
   1a132:	xor    eax,eax
   1a134:	call   c9d0 <__snprintf_chk@plt>
   1a139:	mov    rsi,r12
   1a13c:	lea    rdi,[rip+0x4b8e4]        # 65a27 <yy_accept+0x967>
   1a143:	mov    BYTE PTR [rsp+0x88],0x0
   1a14b:	call   19690 <ftp_request>
   1a150:	mov    rdi,rax
   1a153:	mov    r12,rax
   1a156:	call   c310 <strlen@plt>
   1a15b:	movsd  xmm0,QWORD PTR [rip+0x410bd]        # 5b220 <_IO_stdin_used+0x220>
   1a163:	mov    edi,ebp
   1a165:	mov    rsi,r12
   1a168:	mov    rdx,rax
   1a16b:	call   f2a0 <fd_write>
   1a170:	pop    rdx
   1a171:	mov    rdi,r12
   1a174:	pop    rcx
   1a175:	test   eax,eax
   1a177:	js     1a218 <ftp_eprt+0x188>
   1a17d:	call   4bdc0 <rpl_free>
   1a182:	lea    rsi,[rsp+0x18]
   1a187:	mov    edi,ebp
   1a189:	call   198c0 <ftp_response>
   1a18e:	cmp    eax,0x7
   1a191:	jne    1a200 <ftp_eprt+0x170>
   1a193:	mov    rdi,QWORD PTR [rsp+0x18]
   1a198:	cmp    BYTE PTR [rdi],0x32
   1a19b:	je     1a1f0 <ftp_eprt+0x160>
   1a19d:	call   4bdc0 <rpl_free>
   1a1a2:	mov    edi,DWORD PTR [rbx]
   1a1a4:	mov    QWORD PTR [rsp+0x18],0x0
   1a1ad:	call   f400 <fd_close>
   1a1b2:	mov    eax,0xa
   1a1b7:	jmp    1a1c5 <ftp_eprt+0x135>
   1a1b9:	nop    DWORD PTR [rax+0x0]
   1a1c0:	mov    eax,0xb
   1a1c5:	mov    rcx,QWORD PTR [rsp+0x88]
   1a1cd:	xor    rcx,QWORD PTR fs:0x28
   1a1d6:	jne    1a22b <ftp_eprt+0x19b>
   1a1d8:	add    rsp,0x90
   1a1df:	pop    rbx
   1a1e0:	pop    rbp
   1a1e1:	pop    r12
   1a1e3:	pop    r13
   1a1e5:	pop    r14
   1a1e7:	ret    
   1a1e8:	nop    DWORD PTR [rax+rax*1+0x0]
   1a1f0:	mov    DWORD PTR [rsp+0xc],eax
   1a1f4:	call   4bdc0 <rpl_free>
   1a1f9:	mov    eax,DWORD PTR [rsp+0xc]
   1a1fd:	jmp    1a1c5 <ftp_eprt+0x135>
   1a1ff:	nop
   1a200:	mov    edi,DWORD PTR [rbx]
   1a202:	mov    DWORD PTR [rsp+0xc],eax
   1a206:	call   f400 <fd_close>
   1a20b:	mov    eax,DWORD PTR [rsp+0xc]
   1a20f:	jmp    1a1c5 <ftp_eprt+0x135>
   1a211:	nop    DWORD PTR [rax+0x0]
   1a218:	call   4bdc0 <rpl_free>
   1a21d:	mov    edi,DWORD PTR [rbx]
   1a21f:	call   f400 <fd_close>
   1a224:	mov    eax,0x2c
   1a229:	jmp    1a1c5 <ftp_eprt+0x135>
   1a22b:	call   c7b0 <__stack_chk_fail@plt>

000000000001a230 <ftp_auth>:
   1a230:	endbr64 
   1a234:	push   r13
   1a236:	mov    r13d,0x20
   1a23c:	push   r12
   1a23e:	push   rbp
   1a23f:	xor    ebp,ebp
   1a241:	sub    rsp,0x10
   1a245:	mov    rax,QWORD PTR fs:0x28
   1a24e:	mov    QWORD PTR [rsp+0x8],rax
   1a253:	xor    eax,eax
   1a255:	mov    QWORD PTR [rsp],0x0
   1a25d:	cmp    esi,0x3
   1a260:	je     1a290 <ftp_auth+0x60>
   1a262:	mov    rdi,rbp
   1a265:	call   4bdc0 <rpl_free>
   1a26a:	mov    rdi,QWORD PTR [rsp]
   1a26e:	call   4bdc0 <rpl_free>
   1a273:	mov    rax,QWORD PTR [rsp+0x8]
   1a278:	xor    rax,QWORD PTR fs:0x28
   1a281:	jne    1a2fd <ftp_auth+0xcd>
   1a283:	add    rsp,0x10
   1a287:	mov    eax,r13d
   1a28a:	pop    rbp
   1a28b:	pop    r12
   1a28d:	pop    r13
   1a28f:	ret    
   1a290:	lea    rsi,[rip+0x4b795]        # 65a2c <yy_accept+0x96c>
   1a297:	mov    r12d,edi
   1a29a:	mov    r13d,0x2c
   1a2a0:	lea    rdi,[rip+0x4b789]        # 65a30 <yy_accept+0x970>
   1a2a7:	call   19690 <ftp_request>
   1a2ac:	mov    rdi,rax
   1a2af:	mov    rbp,rax
   1a2b2:	call   c310 <strlen@plt>
   1a2b7:	movsd  xmm0,QWORD PTR [rip+0x40f61]        # 5b220 <_IO_stdin_used+0x220>
   1a2bf:	mov    rsi,rbp
   1a2c2:	mov    edi,r12d
   1a2c5:	mov    rdx,rax
   1a2c8:	call   f2a0 <fd_write>
   1a2cd:	test   eax,eax
   1a2cf:	js     1a262 <ftp_auth+0x32>
   1a2d1:	mov    rsi,rsp
   1a2d4:	mov    edi,r12d
   1a2d7:	call   198c0 <ftp_response>
   1a2dc:	mov    r13d,eax
   1a2df:	cmp    eax,0x7
   1a2e2:	jne    1a262 <ftp_auth+0x32>
   1a2e8:	mov    rax,QWORD PTR [rsp]
   1a2ec:	cmp    BYTE PTR [rax],0x32
   1a2ef:	mov    eax,0x20
   1a2f4:	cmovne r13d,eax
   1a2f8:	jmp    1a262 <ftp_auth+0x32>
   1a2fd:	call   c7b0 <__stack_chk_fail@plt>
   1a302:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1a30d:	nop    DWORD PTR [rax]

000000000001a310 <ftp_pbsz>:
   1a310:	endbr64 
   1a314:	push   r13
   1a316:	mov    r9d,esi
   1a319:	lea    r8,[rip+0x4b6f4]        # 65a14 <yy_accept+0x954>
   1a320:	mov    r13d,edi
   1a323:	push   r12
   1a325:	mov    ecx,0x5
   1a32a:	mov    edx,0x1
   1a32f:	mov    esi,0x5
   1a334:	push   rbp
   1a335:	mov    r12d,0x2c
   1a33b:	sub    rsp,0x20
   1a33f:	mov    rax,QWORD PTR fs:0x28
   1a348:	mov    QWORD PTR [rsp+0x18],rax
   1a34d:	xor    eax,eax
   1a34f:	lea    rbp,[rsp+0x13]
   1a354:	mov    QWORD PTR [rsp+0x8],0x0
   1a35d:	mov    rdi,rbp
   1a360:	call   c9d0 <__snprintf_chk@plt>
   1a365:	mov    rsi,rbp
   1a368:	lea    rdi,[rip+0x4b6c6]        # 65a35 <yy_accept+0x975>
   1a36f:	call   19690 <ftp_request>
   1a374:	mov    rdi,rax
   1a377:	mov    rbp,rax
   1a37a:	call   c310 <strlen@plt>
   1a37f:	movsd  xmm0,QWORD PTR [rip+0x40e99]        # 5b220 <_IO_stdin_used+0x220>
   1a387:	mov    rsi,rbp
   1a38a:	mov    edi,r13d
   1a38d:	mov    rdx,rax
   1a390:	call   f2a0 <fd_write>
   1a395:	test   eax,eax
   1a397:	js     1a3ae <ftp_pbsz+0x9e>
   1a399:	lea    rsi,[rsp+0x8]
   1a39e:	mov    edi,r13d
   1a3a1:	call   198c0 <ftp_response>
   1a3a6:	mov    r12d,eax
   1a3a9:	cmp    eax,0x7
   1a3ac:	je     1a3e0 <ftp_pbsz+0xd0>
   1a3ae:	mov    rdi,rbp
   1a3b1:	call   4bdc0 <rpl_free>
   1a3b6:	mov    rdi,QWORD PTR [rsp+0x8]
   1a3bb:	call   4bdc0 <rpl_free>
   1a3c0:	mov    rax,QWORD PTR [rsp+0x18]
   1a3c5:	xor    rax,QWORD PTR fs:0x28
   1a3ce:	jne    1a3f3 <ftp_pbsz+0xe3>
   1a3d0:	add    rsp,0x20
   1a3d4:	mov    eax,r12d
   1a3d7:	pop    rbp
   1a3d8:	pop    r12
   1a3da:	pop    r13
   1a3dc:	ret    
   1a3dd:	nop    DWORD PTR [rax]
   1a3e0:	mov    rax,QWORD PTR [rsp+0x8]
   1a3e5:	cmp    BYTE PTR [rax],0x32
   1a3e8:	mov    eax,0x1e
   1a3ed:	cmovne r12d,eax
   1a3f1:	jmp    1a3ae <ftp_pbsz+0x9e>
   1a3f3:	call   c7b0 <__stack_chk_fail@plt>
   1a3f8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001a400 <ftp_prot>:
   1a400:	endbr64 
   1a404:	push   r13
   1a406:	mov    r13d,edi
   1a409:	lea    rdi,[rip+0x4b62a]        # 65a3a <yy_accept+0x97a>
   1a410:	push   r12
   1a412:	mov    r12d,0x2c
   1a418:	push   rbp
   1a419:	sub    rsp,0x20
   1a41d:	mov    rax,QWORD PTR fs:0x28
   1a426:	mov    QWORD PTR [rsp+0x18],rax
   1a42b:	xor    eax,eax
   1a42d:	mov    BYTE PTR [rsp+0x16],sil
   1a432:	lea    rsi,[rsp+0x16]
   1a437:	mov    QWORD PTR [rsp+0x8],0x0
   1a440:	mov    BYTE PTR [rsp+0x17],0x0
   1a445:	call   19690 <ftp_request>
   1a44a:	mov    rdi,rax
   1a44d:	mov    rbp,rax
   1a450:	call   c310 <strlen@plt>
   1a455:	movsd  xmm0,QWORD PTR [rip+0x40dc3]        # 5b220 <_IO_stdin_used+0x220>
   1a45d:	mov    rsi,rbp
   1a460:	mov    edi,r13d
   1a463:	mov    rdx,rax
   1a466:	call   f2a0 <fd_write>
   1a46b:	test   eax,eax
   1a46d:	js     1a484 <ftp_prot+0x84>
   1a46f:	lea    rsi,[rsp+0x8]
   1a474:	mov    edi,r13d
   1a477:	call   198c0 <ftp_response>
   1a47c:	mov    r12d,eax
   1a47f:	cmp    eax,0x7
   1a482:	je     1a4b8 <ftp_prot+0xb8>
   1a484:	mov    rdi,rbp
   1a487:	call   4bdc0 <rpl_free>
   1a48c:	mov    rdi,QWORD PTR [rsp+0x8]
   1a491:	call   4bdc0 <rpl_free>
   1a496:	mov    rax,QWORD PTR [rsp+0x18]
   1a49b:	xor    rax,QWORD PTR fs:0x28
   1a4a4:	jne    1a4cb <ftp_prot+0xcb>
   1a4a6:	add    rsp,0x20
   1a4aa:	mov    eax,r12d
   1a4ad:	pop    rbp
   1a4ae:	pop    r12
   1a4b0:	pop    r13
   1a4b2:	ret    
   1a4b3:	nop    DWORD PTR [rax+rax*1+0x0]
   1a4b8:	mov    rax,QWORD PTR [rsp+0x8]
   1a4bd:	cmp    BYTE PTR [rax],0x32
   1a4c0:	mov    eax,0x1f
   1a4c5:	cmovne r12d,eax
   1a4c9:	jmp    1a484 <ftp_prot+0x84>
   1a4cb:	call   c7b0 <__stack_chk_fail@plt>

000000000001a4d0 <ftp_pasv>:
   1a4d0:	endbr64 
   1a4d4:	push   r13
   1a4d6:	pxor   xmm0,xmm0
   1a4da:	mov    r13,rdx
   1a4dd:	push   r12
   1a4df:	mov    r12d,edi
   1a4e2:	lea    rdi,[rip+0x4b556]        # 65a3f <yy_accept+0x97f>
   1a4e9:	push   rbp
   1a4ea:	push   rbx
   1a4eb:	mov    rbx,rsi
   1a4ee:	sub    rsp,0x38
   1a4f2:	mov    rax,QWORD PTR fs:0x28
   1a4fb:	mov    QWORD PTR [rsp+0x28],rax
   1a500:	xor    eax,eax
   1a502:	mov    QWORD PTR [rsi+0x10],0x0
   1a50a:	movups XMMWORD PTR [rsi],xmm0
   1a50d:	xor    esi,esi
   1a50f:	call   19690 <ftp_request>
   1a514:	mov    rdi,rax
   1a517:	mov    rbp,rax
   1a51a:	call   c310 <strlen@plt>
   1a51f:	movsd  xmm0,QWORD PTR [rip+0x40cf9]        # 5b220 <_IO_stdin_used+0x220>
   1a527:	mov    edi,r12d
   1a52a:	mov    rsi,rbp
   1a52d:	mov    rdx,rax
   1a530:	call   f2a0 <fd_write>
   1a535:	mov    rdi,rbp
   1a538:	test   eax,eax
   1a53a:	js     1a640 <ftp_pasv+0x170>
   1a540:	call   4bdc0 <rpl_free>
   1a545:	lea    rsi,[rsp+0x18]
   1a54a:	mov    edi,r12d
   1a54d:	call   198c0 <ftp_response>
   1a552:	cmp    eax,0x7
   1a555:	jne    1a592 <ftp_pasv+0xc2>
   1a557:	mov    rdi,QWORD PTR [rsp+0x18]
   1a55c:	cmp    BYTE PTR [rdi],0x32
   1a55f:	jne    1a668 <ftp_pasv+0x198>
   1a565:	movsx  edx,BYTE PTR [rdi+0x4]
   1a569:	lea    rcx,[rdi+0x4]
   1a56d:	test   dl,dl
   1a56f:	je     1a588 <ftp_pasv+0xb8>
   1a571:	sub    edx,0x30
   1a574:	cmp    edx,0x9
   1a577:	jbe    1a5b8 <ftp_pasv+0xe8>
   1a579:	movsx  edx,BYTE PTR [rcx+0x1]
   1a57d:	add    rcx,0x1
   1a581:	test   dl,dl
   1a583:	jne    1a571 <ftp_pasv+0xa1>
   1a585:	nop    DWORD PTR [rax]
   1a588:	call   4bdc0 <rpl_free>
   1a58d:	mov    eax,0x1c
   1a592:	mov    rcx,QWORD PTR [rsp+0x28]
   1a597:	xor    rcx,QWORD PTR fs:0x28
   1a5a0:	jne    1a677 <ftp_pasv+0x1a7>
   1a5a6:	add    rsp,0x38
   1a5aa:	pop    rbx
   1a5ab:	pop    rbp
   1a5ac:	pop    r12
   1a5ae:	pop    r13
   1a5b0:	ret    
   1a5b1:	nop    DWORD PTR [rax+0x0]
   1a5b8:	xor    r8d,r8d
   1a5bb:	lea    r10,[rsp+0x22]
   1a5c0:	movsx  edx,BYTE PTR [rcx]
   1a5c3:	mov    BYTE PTR [r10+r8*1],0x0
   1a5c8:	mov    r11d,r8d
   1a5cb:	mov    esi,edx
   1a5cd:	sub    edx,0x30
   1a5d0:	cmp    edx,0x9
   1a5d3:	ja     1a5f8 <ftp_pasv+0x128>
   1a5d5:	xor    edx,edx
   1a5d7:	movsx  r9d,BYTE PTR [rcx+0x1]
   1a5dc:	lea    edx,[rdx+rdx*4]
   1a5df:	add    rcx,0x1
   1a5e3:	lea    edx,[rsi+rdx*2-0x30]
   1a5e7:	mov    esi,r9d
   1a5ea:	sub    r9d,0x30
   1a5ee:	cmp    r9d,0x9
   1a5f2:	jbe    1a5d7 <ftp_pasv+0x107>
   1a5f4:	mov    BYTE PTR [r10+r8*1],dl
   1a5f8:	cmp    sil,0x2c
   1a5fc:	je     1a650 <ftp_pasv+0x180>
   1a5fe:	cmp    r11d,0x5
   1a602:	jne    1a588 <ftp_pasv+0xb8>
   1a604:	nop    DWORD PTR [rax+0x0]
   1a608:	mov    DWORD PTR [rsp+0xc],eax
   1a60c:	call   4bdc0 <rpl_free>
   1a611:	mov    edx,DWORD PTR [rsp+0x22]
   1a615:	movzx  ecx,BYTE PTR [rsp+0x27]
   1a61a:	mov    DWORD PTR [rbx],0x2
   1a620:	mov    eax,DWORD PTR [rsp+0xc]
   1a624:	mov    DWORD PTR [rbx+0x4],edx
   1a627:	movzx  edx,BYTE PTR [rsp+0x26]
   1a62c:	shl    edx,0x8
   1a62f:	add    edx,ecx
   1a631:	mov    DWORD PTR [r13+0x0],edx
   1a635:	jmp    1a592 <ftp_pasv+0xc2>
   1a63a:	nop    WORD PTR [rax+rax*1+0x0]
   1a640:	call   4bdc0 <rpl_free>
   1a645:	mov    eax,0x2c
   1a64a:	jmp    1a592 <ftp_pasv+0xc2>
   1a64f:	nop
   1a650:	add    r8,0x1
   1a654:	add    rcx,0x1
   1a658:	cmp    r8,0x6
   1a65c:	jne    1a5c0 <ftp_pasv+0xf0>
   1a662:	jmp    1a608 <ftp_pasv+0x138>
   1a664:	nop    DWORD PTR [rax+0x0]
   1a668:	call   4bdc0 <rpl_free>
   1a66d:	mov    eax,0x1d
   1a672:	jmp    1a592 <ftp_pasv+0xc2>
   1a677:	call   c7b0 <__stack_chk_fail@plt>
   1a67c:	nop    DWORD PTR [rax+0x0]

000000000001a680 <ftp_lpsv>:
   1a680:	endbr64 
   1a684:	push   r14
   1a686:	pxor   xmm0,xmm0
   1a68a:	push   r13
   1a68c:	mov    r13d,edi
   1a68f:	lea    rdi,[rip+0x4b3ae]        # 65a44 <yy_accept+0x984>
   1a696:	push   r12
   1a698:	mov    r12,rsi
   1a69b:	push   rbp
   1a69c:	push   rbx
   1a69d:	mov    rbx,rdx
   1a6a0:	sub    rsp,0x30
   1a6a4:	mov    rax,QWORD PTR fs:0x28
   1a6ad:	mov    QWORD PTR [rsp+0x28],rax
   1a6b2:	xor    eax,eax
   1a6b4:	mov    QWORD PTR [rsi+0x10],0x0
   1a6bc:	movups XMMWORD PTR [rsi],xmm0
   1a6bf:	xor    esi,esi
   1a6c1:	call   19690 <ftp_request>
   1a6c6:	mov    rdi,rax
   1a6c9:	mov    rbp,rax
   1a6cc:	call   c310 <strlen@plt>
   1a6d1:	movsd  xmm0,QWORD PTR [rip+0x40b47]        # 5b220 <_IO_stdin_used+0x220>
   1a6d9:	mov    edi,r13d
   1a6dc:	mov    rsi,rbp
   1a6df:	mov    rdx,rax
   1a6e2:	call   f2a0 <fd_write>
   1a6e7:	mov    rdi,rbp
   1a6ea:	test   eax,eax
   1a6ec:	js     1a800 <ftp_lpsv+0x180>
   1a6f2:	call   4bdc0 <rpl_free>
   1a6f7:	mov    edi,r13d
   1a6fa:	lea    rsi,[rsp+0x8]
   1a6ff:	call   198c0 <ftp_response>
   1a704:	mov    r13d,eax
   1a707:	cmp    eax,0x7
   1a70a:	jne    1a74b <ftp_lpsv+0xcb>
   1a70c:	mov    rdi,QWORD PTR [rsp+0x8]
   1a711:	cmp    BYTE PTR [rdi],0x32
   1a714:	jne    1a810 <ftp_lpsv+0x190>
   1a71a:	movsx  eax,BYTE PTR [rdi+0x4]
   1a71e:	lea    rcx,[rdi+0x4]
   1a722:	test   al,al
   1a724:	je     1a740 <ftp_lpsv+0xc0>
   1a726:	sub    eax,0x30
   1a729:	cmp    eax,0x9
   1a72c:	jbe    1a770 <ftp_lpsv+0xf0>
   1a72e:	movsx  eax,BYTE PTR [rcx+0x1]
   1a732:	add    rcx,0x1
   1a736:	test   al,al
   1a738:	jne    1a726 <ftp_lpsv+0xa6>
   1a73a:	nop    WORD PTR [rax+rax*1+0x0]
   1a740:	call   4bdc0 <rpl_free>
   1a745:	mov    r13d,0x1c
   1a74b:	mov    rax,QWORD PTR [rsp+0x28]
   1a750:	xor    rax,QWORD PTR fs:0x28
   1a759:	jne    1aa4d <ftp_lpsv+0x3cd>
   1a75f:	add    rsp,0x30
   1a763:	mov    eax,r13d
   1a766:	pop    rbx
   1a767:	pop    rbp
   1a768:	pop    r12
   1a76a:	pop    r13
   1a76c:	pop    r14
   1a76e:	ret    
   1a76f:	nop
   1a770:	movsx  edx,BYTE PTR [rcx]
   1a773:	sub    edx,0x30
   1a776:	cmp    edx,0x9
   1a779:	ja     1a740 <ftp_lpsv+0xc0>
   1a77b:	xor    esi,esi
   1a77d:	lea    eax,[rsi+rsi*4]
   1a780:	lea    esi,[rdx+rax*2]
   1a783:	mov    rax,rcx
   1a786:	movsx  edx,BYTE PTR [rcx+0x1]
   1a78a:	add    rcx,0x1
   1a78e:	mov    r8d,edx
   1a791:	sub    edx,0x30
   1a794:	cmp    edx,0x9
   1a797:	jbe    1a77d <ftp_lpsv+0xfd>
   1a799:	mov    edx,esi
   1a79b:	and    edx,0xfffffffd
   1a79e:	cmp    edx,0x4
   1a7a1:	jne    1a740 <ftp_lpsv+0xc0>
   1a7a3:	cmp    r8b,0x2c
   1a7a7:	jne    1a740 <ftp_lpsv+0xc0>
   1a7a9:	movsx  edx,BYTE PTR [rcx+0x1]
   1a7ad:	mov    r8d,edx
   1a7b0:	sub    edx,0x30
   1a7b3:	cmp    edx,0x9
   1a7b6:	ja     1a828 <ftp_lpsv+0x1a8>
   1a7b8:	add    rax,0x2
   1a7bc:	xor    ecx,ecx
   1a7be:	lea    ecx,[rcx+rcx*4]
   1a7c1:	lea    r9,[rax+0x1]
   1a7c5:	lea    ecx,[rdx+rcx*2]
   1a7c8:	movsx  edx,BYTE PTR [rax+0x1]
   1a7cc:	mov    r8d,edx
   1a7cf:	sub    edx,0x30
   1a7d2:	cmp    edx,0x9
   1a7d5:	jbe    1a820 <ftp_lpsv+0x1a0>
   1a7d7:	cmp    r8b,0x2c
   1a7db:	jne    1a740 <ftp_lpsv+0xc0>
   1a7e1:	cmp    ecx,0x10
   1a7e4:	jg     1a740 <ftp_lpsv+0xc0>
   1a7ea:	add    rax,0x2
   1a7ee:	cmp    ecx,0x4
   1a7f1:	setne  dl
   1a7f4:	jmp    1a83d <ftp_lpsv+0x1bd>
   1a7f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1a800:	call   4bdc0 <rpl_free>
   1a805:	mov    r13d,0x2c
   1a80b:	jmp    1a74b <ftp_lpsv+0xcb>
   1a810:	call   4bdc0 <rpl_free>
   1a815:	mov    r13d,0x1d
   1a81b:	jmp    1a74b <ftp_lpsv+0xcb>
   1a820:	mov    rax,r9
   1a823:	jmp    1a7be <ftp_lpsv+0x13e>
   1a825:	nop    DWORD PTR [rax]
   1a828:	cmp    r8b,0x2c
   1a82c:	jne    1a740 <ftp_lpsv+0xc0>
   1a832:	lea    rax,[rcx+0x2]
   1a836:	mov    edx,0x1
   1a83b:	xor    ecx,ecx
   1a83d:	cmp    esi,0x4
   1a840:	jne    1a84a <ftp_lpsv+0x1ca>
   1a842:	test   dl,dl
   1a844:	jne    1a740 <ftp_lpsv+0xc0>
   1a84a:	cmp    esi,0x6
   1a84d:	jne    1a858 <ftp_lpsv+0x1d8>
   1a84f:	cmp    ecx,0x10
   1a852:	jne    1a740 <ftp_lpsv+0xc0>
   1a858:	test   ecx,ecx
   1a85a:	jle    1a8c0 <ftp_lpsv+0x240>
   1a85c:	lea    edx,[rcx-0x1]
   1a85f:	lea    r9,[rsp+0x10]
   1a864:	lea    r10,[rsp+rdx*1+0x11]
   1a869:	jmp    1a87d <ftp_lpsv+0x1fd>
   1a86b:	nop    DWORD PTR [rax+rax*1+0x0]
   1a870:	add    r9,0x1
   1a874:	add    rax,0x1
   1a878:	cmp    r10,r9
   1a87b:	je     1a8c0 <ftp_lpsv+0x240>
   1a87d:	movsx  ecx,BYTE PTR [rax]
   1a880:	mov    BYTE PTR [r9],0x0
   1a884:	mov    edx,ecx
   1a886:	sub    ecx,0x30
   1a889:	cmp    ecx,0x9
   1a88c:	ja     1a8b0 <ftp_lpsv+0x230>
   1a88e:	xor    ecx,ecx
   1a890:	movsx  r8d,BYTE PTR [rax+0x1]
   1a895:	lea    ecx,[rcx+rcx*4]
   1a898:	add    rax,0x1
   1a89c:	lea    ecx,[rdx+rcx*2-0x30]
   1a8a0:	mov    edx,r8d
   1a8a3:	sub    r8d,0x30
   1a8a7:	cmp    r8d,0x9
   1a8ab:	jbe    1a890 <ftp_lpsv+0x210>
   1a8ad:	mov    BYTE PTR [r9],cl
   1a8b0:	cmp    dl,0x2c
   1a8b3:	je     1a870 <ftp_lpsv+0x1f0>
   1a8b5:	jmp    1a740 <ftp_lpsv+0xc0>
   1a8ba:	nop    WORD PTR [rax+rax*1+0x0]
   1a8c0:	movsx  edx,BYTE PTR [rax]
   1a8c3:	mov    ecx,edx
   1a8c5:	sub    edx,0x30
   1a8c8:	cmp    edx,0x9
   1a8cb:	ja     1a988 <ftp_lpsv+0x308>
   1a8d1:	xor    ecx,ecx
   1a8d3:	mov    r9,rax
   1a8d6:	lea    ecx,[rcx+rcx*4]
   1a8d9:	add    rax,0x1
   1a8dd:	lea    ecx,[rdx+rcx*2]
   1a8e0:	movsx  edx,BYTE PTR [rax]
   1a8e3:	mov    r8d,edx
   1a8e6:	sub    edx,0x30
   1a8e9:	cmp    edx,0x9
   1a8ec:	jbe    1a8d3 <ftp_lpsv+0x253>
   1a8ee:	cmp    r8b,0x2c
   1a8f2:	jne    1a740 <ftp_lpsv+0xc0>
   1a8f8:	lea    rax,[r9+0x2]
   1a8fc:	cmp    ecx,0x2
   1a8ff:	jg     1a740 <ftp_lpsv+0xc0>
   1a905:	movsx  ecx,BYTE PTR [rax]
   1a908:	xor    r8d,r8d
   1a90b:	mov    edx,ecx
   1a90d:	sub    ecx,0x30
   1a910:	cmp    ecx,0x9
   1a913:	ja     1a930 <ftp_lpsv+0x2b0>
   1a915:	movsx  ecx,BYTE PTR [rax+0x1]
   1a919:	lea    r8d,[r8+r8*4]
   1a91d:	add    rax,0x1
   1a921:	lea    r8d,[rdx+r8*2-0x30]
   1a926:	mov    edx,ecx
   1a928:	sub    ecx,0x30
   1a92b:	cmp    ecx,0x9
   1a92e:	jbe    1a915 <ftp_lpsv+0x295>
   1a930:	cmp    dl,0x2c
   1a933:	jne    1a740 <ftp_lpsv+0xc0>
   1a939:	movsx  edx,BYTE PTR [rax+0x1]
   1a93d:	mov    ecx,edx
   1a93f:	sub    edx,0x30
   1a942:	cmp    edx,0x9
   1a945:	jbe    1a99a <ftp_lpsv+0x31a>
   1a947:	xor    ebp,ebp
   1a949:	movzx  r14d,r8b
   1a94d:	mov    eax,r14d
   1a950:	shl    eax,0x8
   1a953:	add    eax,ebp
   1a955:	cmp    esi,0x4
   1a958:	je     1a9c2 <ftp_lpsv+0x342>
   1a95a:	movdqa xmm1,XMMWORD PTR [rsp+0x10]
   1a960:	mov    DWORD PTR [r12],0xa
   1a968:	movups XMMWORD PTR [r12+0x4],xmm1
   1a96e:	cmp    BYTE PTR [rip+0x6f946],0x0        # 8a2bb <opt+0x23b>
   1a975:	mov    DWORD PTR [rbx],eax
   1a977:	jne    1a9de <ftp_lpsv+0x35e>
   1a979:	call   4bdc0 <rpl_free>
   1a97e:	jmp    1a74b <ftp_lpsv+0xcb>
   1a983:	nop    DWORD PTR [rax+rax*1+0x0]
   1a988:	add    rax,0x1
   1a98c:	cmp    cl,0x2c
   1a98f:	je     1a905 <ftp_lpsv+0x285>
   1a995:	jmp    1a740 <ftp_lpsv+0xc0>
   1a99a:	add    rax,0x1
   1a99e:	xor    edx,edx
   1a9a0:	movsx  r9d,BYTE PTR [rax+0x1]
   1a9a5:	lea    edx,[rdx+rdx*4]
   1a9a8:	add    rax,0x1
   1a9ac:	lea    edx,[rcx+rdx*2-0x30]
   1a9b0:	mov    ecx,r9d
   1a9b3:	sub    r9d,0x30
   1a9b7:	cmp    r9d,0x9
   1a9bb:	jbe    1a9a0 <ftp_lpsv+0x320>
   1a9bd:	movzx  ebp,dl
   1a9c0:	jmp    1a949 <ftp_lpsv+0x2c9>
   1a9c2:	mov    edx,DWORD PTR [rsp+0x10]
   1a9c6:	mov    DWORD PTR [r12],0x2
   1a9ce:	mov    DWORD PTR [r12+0x4],edx
   1a9d3:	cmp    BYTE PTR [rip+0x6f8e1],0x0        # 8a2bb <opt+0x23b>
   1a9da:	mov    DWORD PTR [rbx],eax
   1a9dc:	je     1a979 <ftp_lpsv+0x2f9>
   1a9de:	mov    rdi,r12
   1a9e1:	call   1e490 <print_address>
   1a9e6:	lea    rdi,[rip+0x4b05c]        # 65a49 <yy_accept+0x989>
   1a9ed:	mov    rsi,rax
   1a9f0:	xor    eax,eax
   1a9f2:	call   2e250 <debug_logprintf>
   1a9f7:	cmp    BYTE PTR [rip+0x6f8bd],0x0        # 8a2bb <opt+0x23b>
   1a9fe:	je     1aa43 <ftp_lpsv+0x3c3>
   1aa00:	xor    eax,eax
   1aa02:	mov    esi,r14d
   1aa05:	lea    rdi,[rip+0x4b04f]        # 65a5b <yy_accept+0x99b>
   1aa0c:	call   2e250 <debug_logprintf>
   1aa11:	cmp    BYTE PTR [rip+0x6f8a3],0x0        # 8a2bb <opt+0x23b>
   1aa18:	je     1aa43 <ftp_lpsv+0x3c3>
   1aa1a:	xor    eax,eax
   1aa1c:	mov    esi,ebp
   1aa1e:	lea    rdi,[rip+0x4b048]        # 65a6d <yy_accept+0x9ad>
   1aa25:	call   2e250 <debug_logprintf>
   1aa2a:	cmp    BYTE PTR [rip+0x6f88a],0x0        # 8a2bb <opt+0x23b>
   1aa31:	je     1aa43 <ftp_lpsv+0x3c3>
   1aa33:	mov    esi,DWORD PTR [rbx]
   1aa35:	lea    rdi,[rip+0x4b043]        # 65a7f <yy_accept+0x9bf>
   1aa3c:	xor    eax,eax
   1aa3e:	call   2e250 <debug_logprintf>
   1aa43:	mov    rdi,QWORD PTR [rsp+0x8]
   1aa48:	jmp    1a979 <ftp_lpsv+0x2f9>
   1aa4d:	call   c7b0 <__stack_chk_fail@plt>
   1aa52:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1aa5d:	nop    DWORD PTR [rax]

000000000001aa60 <ftp_epsv>:
   1aa60:	endbr64 
   1aa64:	push   r12
   1aa66:	mov    r12d,edi
   1aa69:	lea    rdi,[rip+0x4b01d]        # 65a8d <yy_accept+0x9cd>
   1aa70:	push   rbp
   1aa71:	push   rbx
   1aa72:	mov    rbx,rdx
   1aa75:	sub    rsp,0x10
   1aa79:	mov    rax,QWORD PTR fs:0x28
   1aa82:	mov    QWORD PTR [rsp+0x8],rax
   1aa87:	xor    eax,eax
   1aa89:	cmp    DWORD PTR [rsi],0x2
   1aa8c:	lea    rax,[rip+0x4d22a]        # 67cbd <primes.6089+0x1bdd>
   1aa93:	lea    rsi,[rip+0x4cb3e]        # 675d8 <primes.6089+0x14f8>
   1aa9a:	cmovne rsi,rax
   1aa9e:	call   19690 <ftp_request>
   1aaa3:	mov    rdi,rax
   1aaa6:	mov    rbp,rax
   1aaa9:	call   c310 <strlen@plt>
   1aaae:	movsd  xmm0,QWORD PTR [rip+0x4076a]        # 5b220 <_IO_stdin_used+0x220>
   1aab6:	mov    edi,r12d
   1aab9:	mov    rsi,rbp
   1aabc:	mov    rdx,rax
   1aabf:	call   f2a0 <fd_write>
   1aac4:	mov    rdi,rbp
   1aac7:	test   eax,eax
   1aac9:	js     1abc0 <ftp_epsv+0x160>
   1aacf:	call   4bdc0 <rpl_free>
   1aad4:	mov    edi,r12d
   1aad7:	mov    rsi,rsp
   1aada:	call   198c0 <ftp_response>
   1aadf:	mov    r12d,eax
   1aae2:	cmp    eax,0x7
   1aae5:	jne    1ab90 <ftp_epsv+0x130>
   1aaeb:	mov    rbp,QWORD PTR [rsp]
   1aaef:	cmp    BYTE PTR [rbp+0x0],0x32
   1aaf3:	jne    1abd0 <ftp_epsv+0x170>
   1aaf9:	cmp    BYTE PTR [rip+0x6f7bb],0x0        # 8a2bb <opt+0x23b>
   1ab00:	jne    1abf0 <ftp_epsv+0x190>
   1ab06:	mov    esi,0x28
   1ab0b:	mov    rdi,rbp
   1ab0e:	call   c6c0 <strchr@plt>
   1ab13:	test   rax,rax
   1ab16:	je     1abb0 <ftp_epsv+0x150>
   1ab1c:	movzx  ecx,BYTE PTR [rax+0x1]
   1ab20:	lea    edx,[rcx-0x21]
   1ab23:	cmp    dl,0x5d
   1ab26:	ja     1abb0 <ftp_epsv+0x150>
   1ab2c:	cmp    BYTE PTR [rax+0x2],cl
   1ab2f:	jne    1abb0 <ftp_epsv+0x150>
   1ab31:	lea    rsi,[rax+0x4]
   1ab35:	cmp    cl,BYTE PTR [rax+0x3]
   1ab38:	jne    1abb0 <ftp_epsv+0x150>
   1ab3a:	movsx  edx,BYTE PTR [rsi]
   1ab3d:	add    rax,0x9
   1ab41:	xor    r8d,r8d
   1ab44:	mov    edi,edx
   1ab46:	sub    edx,0x30
   1ab49:	cmp    edx,0x9
   1ab4c:	ja     1ab73 <ftp_epsv+0x113>
   1ab4e:	lea    edi,[r8+r8*4]
   1ab52:	lea    r8d,[rdx+rdi*2]
   1ab56:	lea    rdx,[rsi+0x1]
   1ab5a:	cmp    rax,rdx
   1ab5d:	je     1abe0 <ftp_epsv+0x180>
   1ab63:	mov    rsi,rdx
   1ab66:	movsx  edx,BYTE PTR [rsi]
   1ab69:	mov    edi,edx
   1ab6b:	sub    edx,0x30
   1ab6e:	cmp    edx,0x9
   1ab71:	jbe    1ab4e <ftp_epsv+0xee>
   1ab73:	cmp    dil,cl
   1ab76:	jne    1abb0 <ftp_epsv+0x150>
   1ab78:	cmp    BYTE PTR [rsi+0x1],0x29
   1ab7c:	jne    1abb0 <ftp_epsv+0x150>
   1ab7e:	mov    DWORD PTR [rbx],r8d
   1ab81:	mov    rdi,rbp
   1ab84:	call   4bdc0 <rpl_free>
   1ab89:	nop    DWORD PTR [rax+0x0]
   1ab90:	mov    rax,QWORD PTR [rsp+0x8]
   1ab95:	xor    rax,QWORD PTR fs:0x28
   1ab9e:	jne    1ac0a <ftp_epsv+0x1aa>
   1aba0:	add    rsp,0x10
   1aba4:	mov    eax,r12d
   1aba7:	pop    rbx
   1aba8:	pop    rbp
   1aba9:	pop    r12
   1abab:	ret    
   1abac:	nop    DWORD PTR [rax+0x0]
   1abb0:	mov    rdi,rbp
   1abb3:	mov    r12d,0x1c
   1abb9:	call   4bdc0 <rpl_free>
   1abbe:	jmp    1ab90 <ftp_epsv+0x130>
   1abc0:	call   4bdc0 <rpl_free>
   1abc5:	mov    r12d,0x2c
   1abcb:	jmp    1ab90 <ftp_epsv+0x130>
   1abcd:	nop    DWORD PTR [rax]
   1abd0:	mov    rdi,rbp
   1abd3:	mov    r12d,0x1d
   1abd9:	call   4bdc0 <rpl_free>
   1abde:	jmp    1ab90 <ftp_epsv+0x130>
   1abe0:	movzx  edi,BYTE PTR [rsi+0x1]
   1abe4:	mov    rsi,rax
   1abe7:	jmp    1ab73 <ftp_epsv+0x113>
   1abe9:	nop    DWORD PTR [rax+0x0]
   1abf0:	mov    rsi,rbp
   1abf3:	lea    rdi,[rip+0x4ae98]        # 65a92 <yy_accept+0x9d2>
   1abfa:	xor    eax,eax
   1abfc:	call   2e250 <debug_logprintf>
   1ac01:	mov    rbp,QWORD PTR [rsp]
   1ac05:	jmp    1ab06 <ftp_epsv+0xa6>
   1ac0a:	call   c7b0 <__stack_chk_fail@plt>
   1ac0f:	nop

000000000001ac10 <ftp_type>:
   1ac10:	endbr64 
   1ac14:	push   r12
   1ac16:	mov    r12d,edi
   1ac19:	lea    rdi,[rip+0x4ae82]        # 65aa2 <yy_accept+0x9e2>
   1ac20:	push   rbp
   1ac21:	sub    rsp,0x38
   1ac25:	mov    rax,QWORD PTR fs:0x28
   1ac2e:	mov    QWORD PTR [rsp+0x28],rax
   1ac33:	xor    eax,eax
   1ac35:	mov    BYTE PTR [rsp+0x26],sil
   1ac3a:	lea    rsi,[rsp+0x26]
   1ac3f:	mov    BYTE PTR [rsp+0x27],0x0
   1ac44:	call   19690 <ftp_request>
   1ac49:	mov    rdi,rax
   1ac4c:	mov    rbp,rax
   1ac4f:	call   c310 <strlen@plt>
   1ac54:	movsd  xmm0,QWORD PTR [rip+0x405c4]        # 5b220 <_IO_stdin_used+0x220>
   1ac5c:	mov    edi,r12d
   1ac5f:	mov    rsi,rbp
   1ac62:	mov    rdx,rax
   1ac65:	call   f2a0 <fd_write>
   1ac6a:	mov    rdi,rbp
   1ac6d:	test   eax,eax
   1ac6f:	js     1acd0 <ftp_type+0xc0>
   1ac71:	call   4bdc0 <rpl_free>
   1ac76:	lea    rsi,[rsp+0x18]
   1ac7b:	mov    edi,r12d
   1ac7e:	call   198c0 <ftp_response>
   1ac83:	cmp    eax,0x7
   1ac86:	je     1aca0 <ftp_type+0x90>
   1ac88:	mov    rcx,QWORD PTR [rsp+0x28]
   1ac8d:	xor    rcx,QWORD PTR fs:0x28
   1ac96:	jne    1acdc <ftp_type+0xcc>
   1ac98:	add    rsp,0x38
   1ac9c:	pop    rbp
   1ac9d:	pop    r12
   1ac9f:	ret    
   1aca0:	mov    rdi,QWORD PTR [rsp+0x18]
   1aca5:	cmp    BYTE PTR [rdi],0x32
   1aca8:	je     1acc0 <ftp_type+0xb0>
   1acaa:	call   4bdc0 <rpl_free>
   1acaf:	mov    eax,0xd
   1acb4:	jmp    1ac88 <ftp_type+0x78>
   1acb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1acc0:	mov    DWORD PTR [rsp+0xc],eax
   1acc4:	call   4bdc0 <rpl_free>
   1acc9:	mov    eax,DWORD PTR [rsp+0xc]
   1accd:	jmp    1ac88 <ftp_type+0x78>
   1accf:	nop
   1acd0:	call   4bdc0 <rpl_free>
   1acd5:	mov    eax,0x2c
   1acda:	jmp    1ac88 <ftp_type+0x78>
   1acdc:	call   c7b0 <__stack_chk_fail@plt>
   1ace1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1acec:	nop    DWORD PTR [rax+0x0]

000000000001acf0 <ftp_cwd>:
   1acf0:	endbr64 
   1acf4:	push   r12
   1acf6:	mov    r12d,edi
   1acf9:	lea    rdi,[rip+0x4ada7]        # 65aa7 <yy_accept+0x9e7>
   1ad00:	push   rbp
   1ad01:	sub    rsp,0x28
   1ad05:	mov    rax,QWORD PTR fs:0x28
   1ad0e:	mov    QWORD PTR [rsp+0x18],rax
   1ad13:	xor    eax,eax
   1ad15:	call   19690 <ftp_request>
   1ad1a:	mov    rdi,rax
   1ad1d:	mov    rbp,rax
   1ad20:	call   c310 <strlen@plt>
   1ad25:	movsd  xmm0,QWORD PTR [rip+0x404f3]        # 5b220 <_IO_stdin_used+0x220>
   1ad2d:	mov    edi,r12d
   1ad30:	mov    rsi,rbp
   1ad33:	mov    rdx,rax
   1ad36:	call   f2a0 <fd_write>
   1ad3b:	mov    rdi,rbp
   1ad3e:	test   eax,eax
   1ad40:	js     1adb0 <ftp_cwd+0xc0>
   1ad42:	call   4bdc0 <rpl_free>
   1ad47:	lea    rsi,[rsp+0x10]
   1ad4c:	mov    edi,r12d
   1ad4f:	call   198c0 <ftp_response>
   1ad54:	cmp    eax,0x7
   1ad57:	je     1ad78 <ftp_cwd+0x88>
   1ad59:	mov    rcx,QWORD PTR [rsp+0x18]
   1ad5e:	xor    rcx,QWORD PTR fs:0x28
   1ad67:	jne    1adcc <ftp_cwd+0xdc>
   1ad69:	add    rsp,0x28
   1ad6d:	pop    rbp
   1ad6e:	pop    r12
   1ad70:	ret    
   1ad71:	nop    DWORD PTR [rax+0x0]
   1ad78:	mov    rdi,QWORD PTR [rsp+0x10]
   1ad7d:	movzx  edx,BYTE PTR [rdi]
   1ad80:	cmp    dl,0x35
   1ad83:	je     1adc0 <ftp_cwd+0xd0>
   1ad85:	cmp    dl,0x32
   1ad88:	je     1ada0 <ftp_cwd+0xb0>
   1ad8a:	call   4bdc0 <rpl_free>
   1ad8f:	mov    eax,0xe
   1ad94:	jmp    1ad59 <ftp_cwd+0x69>
   1ad96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ada0:	mov    DWORD PTR [rsp+0xc],eax
   1ada4:	call   4bdc0 <rpl_free>
   1ada9:	mov    eax,DWORD PTR [rsp+0xc]
   1adad:	jmp    1ad59 <ftp_cwd+0x69>
   1adaf:	nop
   1adb0:	call   4bdc0 <rpl_free>
   1adb5:	mov    eax,0x2c
   1adba:	jmp    1ad59 <ftp_cwd+0x69>
   1adbc:	nop    DWORD PTR [rax+0x0]
   1adc0:	call   4bdc0 <rpl_free>
   1adc5:	mov    eax,0xc
   1adca:	jmp    1ad59 <ftp_cwd+0x69>
   1adcc:	call   c7b0 <__stack_chk_fail@plt>
   1add1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1addc:	nop    DWORD PTR [rax+0x0]

000000000001ade0 <ftp_rest>:
   1ade0:	endbr64 
   1ade4:	push   r12
   1ade6:	mov    r12d,edi
   1ade9:	mov    rdi,rsi
   1adec:	push   rbp
   1aded:	sub    rsp,0x28
   1adf1:	mov    rax,QWORD PTR fs:0x28
   1adfa:	mov    QWORD PTR [rsp+0x18],rax
   1adff:	xor    eax,eax
   1ae01:	call   3e8e0 <number_to_static_string>
   1ae06:	lea    rdi,[rip+0x4ac9e]        # 65aab <yy_accept+0x9eb>
   1ae0d:	mov    rsi,rax
   1ae10:	call   19690 <ftp_request>
   1ae15:	mov    rdi,rax
   1ae18:	mov    rbp,rax
   1ae1b:	call   c310 <strlen@plt>
   1ae20:	movsd  xmm0,QWORD PTR [rip+0x403f8]        # 5b220 <_IO_stdin_used+0x220>
   1ae28:	mov    edi,r12d
   1ae2b:	mov    rsi,rbp
   1ae2e:	mov    rdx,rax
   1ae31:	call   f2a0 <fd_write>
   1ae36:	mov    rdi,rbp
   1ae39:	test   eax,eax
   1ae3b:	js     1aea0 <ftp_rest+0xc0>
   1ae3d:	call   4bdc0 <rpl_free>
   1ae42:	lea    rsi,[rsp+0x10]
   1ae47:	mov    edi,r12d
   1ae4a:	call   198c0 <ftp_response>
   1ae4f:	cmp    eax,0x7
   1ae52:	je     1ae70 <ftp_rest+0x90>
   1ae54:	mov    rcx,QWORD PTR [rsp+0x18]
   1ae59:	xor    rcx,QWORD PTR fs:0x28
   1ae62:	jne    1aeac <ftp_rest+0xcc>
   1ae64:	add    rsp,0x28
   1ae68:	pop    rbp
   1ae69:	pop    r12
   1ae6b:	ret    
   1ae6c:	nop    DWORD PTR [rax+0x0]
   1ae70:	mov    rdi,QWORD PTR [rsp+0x10]
   1ae75:	cmp    BYTE PTR [rdi],0x33
   1ae78:	je     1ae90 <ftp_rest+0xb0>
   1ae7a:	call   4bdc0 <rpl_free>
   1ae7f:	mov    eax,0x11
   1ae84:	jmp    1ae54 <ftp_rest+0x74>
   1ae86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ae90:	mov    DWORD PTR [rsp+0xc],eax
   1ae94:	call   4bdc0 <rpl_free>
   1ae99:	mov    eax,DWORD PTR [rsp+0xc]
   1ae9d:	jmp    1ae54 <ftp_rest+0x74>
   1ae9f:	nop
   1aea0:	call   4bdc0 <rpl_free>
   1aea5:	mov    eax,0x2c
   1aeaa:	jmp    1ae54 <ftp_rest+0x74>
   1aeac:	call   c7b0 <__stack_chk_fail@plt>
   1aeb1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1aebc:	nop    DWORD PTR [rax+0x0]

000000000001aec0 <ftp_retr>:
   1aec0:	endbr64 
   1aec4:	push   r12
   1aec6:	mov    r12d,edi
   1aec9:	lea    rdi,[rip+0x4abe0]        # 65ab0 <yy_accept+0x9f0>
   1aed0:	push   rbp
   1aed1:	sub    rsp,0x28
   1aed5:	mov    rax,QWORD PTR fs:0x28
   1aede:	mov    QWORD PTR [rsp+0x18],rax
   1aee3:	xor    eax,eax
   1aee5:	call   19690 <ftp_request>
   1aeea:	mov    rdi,rax
   1aeed:	mov    rbp,rax
   1aef0:	call   c310 <strlen@plt>
   1aef5:	movsd  xmm0,QWORD PTR [rip+0x40323]        # 5b220 <_IO_stdin_used+0x220>
   1aefd:	mov    edi,r12d
   1af00:	mov    rsi,rbp
   1af03:	mov    rdx,rax
   1af06:	call   f2a0 <fd_write>
   1af0b:	mov    rdi,rbp
   1af0e:	test   eax,eax
   1af10:	js     1af80 <ftp_retr+0xc0>
   1af12:	call   4bdc0 <rpl_free>
   1af17:	lea    rsi,[rsp+0x10]
   1af1c:	mov    edi,r12d
   1af1f:	call   198c0 <ftp_response>
   1af24:	cmp    eax,0x7
   1af27:	je     1af48 <ftp_retr+0x88>
   1af29:	mov    rcx,QWORD PTR [rsp+0x18]
   1af2e:	xor    rcx,QWORD PTR fs:0x28
   1af37:	jne    1af9c <ftp_retr+0xdc>
   1af39:	add    rsp,0x28
   1af3d:	pop    rbp
   1af3e:	pop    r12
   1af40:	ret    
   1af41:	nop    DWORD PTR [rax+0x0]
   1af48:	mov    rdi,QWORD PTR [rsp+0x10]
   1af4d:	movzx  edx,BYTE PTR [rdi]
   1af50:	cmp    dl,0x35
   1af53:	je     1af90 <ftp_retr+0xd0>
   1af55:	cmp    dl,0x31
   1af58:	je     1af70 <ftp_retr+0xb0>
   1af5a:	call   4bdc0 <rpl_free>
   1af5f:	mov    eax,0xe
   1af64:	jmp    1af29 <ftp_retr+0x69>
   1af66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1af70:	mov    DWORD PTR [rsp+0xc],eax
   1af74:	call   4bdc0 <rpl_free>
   1af79:	mov    eax,DWORD PTR [rsp+0xc]
   1af7d:	jmp    1af29 <ftp_retr+0x69>
   1af7f:	nop
   1af80:	call   4bdc0 <rpl_free>
   1af85:	mov    eax,0x2c
   1af8a:	jmp    1af29 <ftp_retr+0x69>
   1af8c:	nop    DWORD PTR [rax+0x0]
   1af90:	call   4bdc0 <rpl_free>
   1af95:	mov    eax,0xc
   1af9a:	jmp    1af29 <ftp_retr+0x69>
   1af9c:	call   c7b0 <__stack_chk_fail@plt>
   1afa1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1afac:	nop    DWORD PTR [rax+0x0]

000000000001afb0 <ftp_list>:
   1afb0:	endbr64 
   1afb4:	push   r15
   1afb6:	lea    r9,[rip+0x4aaf8]        # 65ab5 <yy_accept+0x9f5>
   1afbd:	push   r14
   1afbf:	push   r13
   1afc1:	mov    r13d,ecx
   1afc4:	push   r12
   1afc6:	mov    r12,rsi
   1afc9:	push   rbp
   1afca:	mov    ebp,edi
   1afcc:	push   rbx
   1afcd:	xor    ebx,ebx
   1afcf:	sub    rsp,0x28
   1afd3:	mov    QWORD PTR [rsp+0x8],r8
   1afd8:	mov    rax,QWORD PTR fs:0x28
   1afe1:	mov    QWORD PTR [rsp+0x18],rax
   1afe6:	xor    eax,eax
   1afe8:	mov    BYTE PTR [r8],0x0
   1afec:	test   dl,dl
   1afee:	je     1b009 <ftp_list+0x59>
   1aff0:	cmp    BYTE PTR [rip+0x6f2c4],0x0        # 8a2bb <opt+0x23b>
   1aff7:	lea    r9,[rip+0x51fa7]        # 6cfa5 <eta_str.8886+0x22d>
   1affe:	mov    ebx,0x1
   1b003:	jne    1b153 <ftp_list+0x1a3>
   1b009:	lea    r14,[rip+0x51f95]        # 6cfa5 <eta_str.8886+0x22d>
   1b010:	mov    rdi,r9
   1b013:	mov    rsi,r12
   1b016:	call   19690 <ftp_request>
   1b01b:	mov    rdi,rax
   1b01e:	mov    r15,rax
   1b021:	call   c310 <strlen@plt>
   1b026:	mov    edi,ebp
   1b028:	mov    rsi,r15
   1b02b:	mov    rdx,rax
   1b02e:	mov    rax,QWORD PTR [rip+0x401eb]        # 5b220 <_IO_stdin_used+0x220>
   1b035:	movq   xmm0,rax
   1b03a:	call   f2a0 <fd_write>
   1b03f:	mov    rdi,r15
   1b042:	test   eax,eax
   1b044:	js     1b130 <ftp_list+0x180>
   1b04a:	call   4bdc0 <rpl_free>
   1b04f:	lea    rsi,[rsp+0x10]
   1b054:	mov    edi,ebp
   1b056:	call   198c0 <ftp_response>
   1b05b:	mov    r15d,eax
   1b05e:	xor    eax,eax
   1b060:	cmp    r15d,0x7
   1b064:	je     1b0d0 <ftp_list+0x120>
   1b066:	lea    rdx,[rbx+0x1]
   1b06a:	test   rbx,rbx
   1b06d:	jne    1b0b0 <ftp_list+0x100>
   1b06f:	test   r13b,r13b
   1b072:	je     1b0b0 <ftp_list+0x100>
   1b074:	cmp    BYTE PTR [rip+0x6f240],0x0        # 8a2bb <opt+0x23b>
   1b07b:	jne    1b140 <ftp_list+0x190>
   1b081:	mov    rax,QWORD PTR [rsp+0x18]
   1b086:	xor    rax,QWORD PTR fs:0x28
   1b08f:	jne    1b16c <ftp_list+0x1bc>
   1b095:	add    rsp,0x28
   1b099:	mov    eax,r15d
   1b09c:	pop    rbx
   1b09d:	pop    rbp
   1b09e:	pop    r12
   1b0a0:	pop    r13
   1b0a2:	pop    r14
   1b0a4:	pop    r15
   1b0a6:	ret    
   1b0a7:	nop    WORD PTR [rax+rax*1+0x0]
   1b0b0:	mov    ebx,0x1
   1b0b5:	mov    r9,r14
   1b0b8:	cmp    rdx,0x1
   1b0bc:	ja     1b081 <ftp_list+0xd1>
   1b0be:	test   al,al
   1b0c0:	je     1b010 <ftp_list+0x60>
   1b0c6:	jmp    1b081 <ftp_list+0xd1>
   1b0c8:	nop    DWORD PTR [rax+rax*1+0x0]
   1b0d0:	mov    rdi,QWORD PTR [rsp+0x10]
   1b0d5:	movzx  edx,BYTE PTR [rdi]
   1b0d8:	cmp    dl,0x35
   1b0db:	je     1b108 <ftp_list+0x158>
   1b0dd:	cmp    dl,0x31
   1b0e0:	je     1b110 <ftp_list+0x160>
   1b0e2:	mov    r15d,0xe
   1b0e8:	mov    BYTE PTR [rsp],al
   1b0eb:	call   4bdc0 <rpl_free>
   1b0f0:	movzx  eax,BYTE PTR [rsp]
   1b0f4:	mov    QWORD PTR [rsp+0x10],0x0
   1b0fd:	jmp    1b066 <ftp_list+0xb6>
   1b102:	nop    WORD PTR [rax+rax*1+0x0]
   1b108:	mov    r15d,0xc
   1b10e:	jmp    1b0e8 <ftp_list+0x138>
   1b110:	mov    rcx,QWORD PTR [rsp+0x8]
   1b115:	mov    rax,rbx
   1b118:	xor    rax,0x1
   1b11c:	mov    BYTE PTR [rcx],al
   1b11e:	mov    eax,0x1
   1b123:	and    BYTE PTR [rcx],0x1
   1b126:	jmp    1b0e8 <ftp_list+0x138>
   1b128:	nop    DWORD PTR [rax+rax*1+0x0]
   1b130:	call   4bdc0 <rpl_free>
   1b135:	mov    r15d,0x2c
   1b13b:	jmp    1b081 <ftp_list+0xd1>
   1b140:	lea    rdi,[rip+0x4a98b]        # 65ad2 <yy_accept+0xa12>
   1b147:	xor    eax,eax
   1b149:	call   2e250 <debug_logprintf>
   1b14e:	jmp    1b081 <ftp_list+0xd1>
   1b153:	lea    rdi,[rip+0x4a963]        # 65abd <yy_accept+0x9fd>
   1b15a:	mov    QWORD PTR [rsp],r9
   1b15e:	call   2e250 <debug_logprintf>
   1b163:	mov    r9,QWORD PTR [rsp]
   1b167:	jmp    1b009 <ftp_list+0x59>
   1b16c:	call   c7b0 <__stack_chk_fail@plt>
   1b171:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1b17c:	nop    DWORD PTR [rax+0x0]

000000000001b180 <ftp_syst>:
   1b180:	endbr64 
   1b184:	push   r14
   1b186:	push   r13
   1b188:	mov    r13,rsi
   1b18b:	xor    esi,esi
   1b18d:	push   r12
   1b18f:	mov    r12d,edi
   1b192:	lea    rdi,[rip+0x4a94b]        # 65ae4 <yy_accept+0xa24>
   1b199:	push   rbp
   1b19a:	push   rbx
   1b19b:	mov    rbx,rdx
   1b19e:	sub    rsp,0x10
   1b1a2:	mov    rax,QWORD PTR fs:0x28
   1b1ab:	mov    QWORD PTR [rsp+0x8],rax
   1b1b0:	xor    eax,eax
   1b1b2:	call   19690 <ftp_request>
   1b1b7:	mov    rdi,rax
   1b1ba:	mov    rbp,rax
   1b1bd:	call   c310 <strlen@plt>
   1b1c2:	movsd  xmm0,QWORD PTR [rip+0x40056]        # 5b220 <_IO_stdin_used+0x220>
   1b1ca:	mov    edi,r12d
   1b1cd:	mov    rsi,rbp
   1b1d0:	mov    rdx,rax
   1b1d3:	call   f2a0 <fd_write>
   1b1d8:	mov    rdi,rbp
   1b1db:	test   eax,eax
   1b1dd:	js     1b300 <ftp_syst+0x180>
   1b1e3:	call   4bdc0 <rpl_free>
   1b1e8:	mov    edi,r12d
   1b1eb:	mov    rsi,rsp
   1b1ee:	call   198c0 <ftp_response>
   1b1f3:	mov    r12d,eax
   1b1f6:	cmp    eax,0x7
   1b1f9:	jne    1b26f <ftp_syst+0xef>
   1b1fb:	mov    rbp,QWORD PTR [rsp]
   1b1ff:	cmp    BYTE PTR [rbp+0x0],0x35
   1b203:	mov    rdi,rbp
   1b206:	je     1b320 <ftp_syst+0x1a0>
   1b20c:	call   c760 <strdup@plt>
   1b211:	mov    rdi,rbp
   1b214:	lea    rsi,[rip+0x4acaa]        # 65ec5 <yy_accept+0xe05>
   1b21b:	mov    r14,rax
   1b21e:	call   c840 <strtok@plt>
   1b223:	lea    rsi,[rip+0x4ac9b]        # 65ec5 <yy_accept+0xe05>
   1b22a:	xor    edi,edi
   1b22c:	call   c840 <strtok@plt>
   1b231:	mov    DWORD PTR [rbx],0x2
   1b237:	mov    rbp,rax
   1b23a:	test   rax,rax
   1b23d:	je     1b310 <ftp_syst+0x190>
   1b243:	lea    rsi,[rip+0x4a89f]        # 65ae9 <yy_accept+0xa29>
   1b24a:	mov    rdi,rax
   1b24d:	call   43340 <c_strcasecmp>
   1b252:	test   eax,eax
   1b254:	jne    1b298 <ftp_syst+0x118>
   1b256:	mov    DWORD PTR [r13+0x0],0x1
   1b25e:	mov    rdi,r14
   1b261:	call   4bdc0 <rpl_free>
   1b266:	mov    rdi,QWORD PTR [rsp]
   1b26a:	call   4bdc0 <rpl_free>
   1b26f:	mov    rax,QWORD PTR [rsp+0x8]
   1b274:	xor    rax,QWORD PTR fs:0x28
   1b27d:	jne    1b3bf <ftp_syst+0x23f>
   1b283:	add    rsp,0x10
   1b287:	mov    eax,r12d
   1b28a:	pop    rbx
   1b28b:	pop    rbp
   1b28c:	pop    r12
   1b28e:	pop    r13
   1b290:	pop    r14
   1b292:	ret    
   1b293:	nop    DWORD PTR [rax+rax*1+0x0]
   1b298:	lea    rsi,[rip+0x4a84e]        # 65aed <yy_accept+0xa2d>
   1b29f:	mov    rdi,rbp
   1b2a2:	call   43340 <c_strcasecmp>
   1b2a7:	test   eax,eax
   1b2a9:	jne    1b330 <ftp_syst+0x1b0>
   1b2af:	mov    DWORD PTR [r13+0x0],0x0
   1b2b7:	mov    edx,0x11
   1b2bc:	lea    rsi,[rip+0x4a82f]        # 65af2 <yy_accept+0xa32>
   1b2c3:	mov    rdi,r14
   1b2c6:	call   433b0 <c_strncasecmp>
   1b2cb:	test   eax,eax
   1b2cd:	je     1b390 <ftp_syst+0x210>
   1b2d3:	mov    edx,0x29
   1b2d8:	lea    rsi,[rip+0x4a8d1]        # 65bb0 <yy_accept+0xaf0>
   1b2df:	mov    rdi,r14
   1b2e2:	call   433b0 <c_strncasecmp>
   1b2e7:	test   eax,eax
   1b2e9:	jne    1b25e <ftp_syst+0xde>
   1b2ef:	mov    DWORD PTR [rbx],0x1
   1b2f5:	jmp    1b25e <ftp_syst+0xde>
   1b2fa:	nop    WORD PTR [rax+rax*1+0x0]
   1b300:	call   4bdc0 <rpl_free>
   1b305:	mov    r12d,0x2c
   1b30b:	jmp    1b26f <ftp_syst+0xef>
   1b310:	mov    DWORD PTR [r13+0x0],0x5
   1b318:	jmp    1b25e <ftp_syst+0xde>
   1b31d:	nop    DWORD PTR [rax]
   1b320:	call   4bdc0 <rpl_free>
   1b325:	mov    r12d,0xf
   1b32b:	jmp    1b26f <ftp_syst+0xef>
   1b330:	lea    rsi,[rip+0x4a7cd]        # 65b04 <yy_accept+0xa44>
   1b337:	mov    rdi,rbp
   1b33a:	call   43340 <c_strcasecmp>
   1b33f:	test   eax,eax
   1b341:	je     1b380 <ftp_syst+0x200>
   1b343:	lea    rsi,[rip+0x4a7c5]        # 65b0f <yy_accept+0xa4f>
   1b34a:	mov    rdi,rbp
   1b34d:	call   43340 <c_strcasecmp>
   1b352:	test   eax,eax
   1b354:	je     1b380 <ftp_syst+0x200>
   1b356:	lea    rsi,[rip+0x4a7be]        # 65b1b <yy_accept+0xa5b>
   1b35d:	mov    rdi,rbp
   1b360:	call   43340 <c_strcasecmp>
   1b365:	test   eax,eax
   1b367:	jne    1b39b <ftp_syst+0x21b>
   1b369:	mov    DWORD PTR [r13+0x0],0x3
   1b371:	jmp    1b25e <ftp_syst+0xde>
   1b376:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1b380:	mov    DWORD PTR [r13+0x0],0x2
   1b388:	jmp    1b25e <ftp_syst+0xde>
   1b38d:	nop    DWORD PTR [rax]
   1b390:	mov    DWORD PTR [rbx],0x0
   1b396:	jmp    1b25e <ftp_syst+0xde>
   1b39b:	lea    rsi,[rip+0x4a77f]        # 65b21 <yy_accept+0xa61>
   1b3a2:	mov    rdi,rbp
   1b3a5:	call   43340 <c_strcasecmp>
   1b3aa:	test   eax,eax
   1b3ac:	jne    1b310 <ftp_syst+0x190>
   1b3b2:	mov    DWORD PTR [r13+0x0],0x4
   1b3ba:	jmp    1b25e <ftp_syst+0xde>
   1b3bf:	call   c7b0 <__stack_chk_fail@plt>
   1b3c4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1b3cf:	nop

000000000001b3d0 <ftp_pwd>:
   1b3d0:	endbr64 
   1b3d4:	push   r12
   1b3d6:	mov    r12d,edi
   1b3d9:	lea    rdi,[rip+0x4a748]        # 65b28 <yy_accept+0xa68>
   1b3e0:	push   rbp
   1b3e1:	push   rbx
   1b3e2:	mov    rbx,rsi
   1b3e5:	xor    esi,esi
   1b3e7:	sub    rsp,0x10
   1b3eb:	mov    rax,QWORD PTR fs:0x28
   1b3f4:	mov    QWORD PTR [rsp+0x8],rax
   1b3f9:	xor    eax,eax
   1b3fb:	call   19690 <ftp_request>
   1b400:	mov    rdi,rax
   1b403:	mov    rbp,rax
   1b406:	call   c310 <strlen@plt>
   1b40b:	movsd  xmm0,QWORD PTR [rip+0x3fe0d]        # 5b220 <_IO_stdin_used+0x220>
   1b413:	mov    edi,r12d
   1b416:	mov    rsi,rbp
   1b419:	mov    rdx,rax
   1b41c:	call   f2a0 <fd_write>
   1b421:	mov    rdi,rbp
   1b424:	test   eax,eax
   1b426:	js     1b4b8 <ftp_pwd+0xe8>
   1b42c:	call   4bdc0 <rpl_free>
   1b431:	mov    edi,r12d
   1b434:	mov    rsi,rsp
   1b437:	call   198c0 <ftp_response>
   1b43c:	mov    r12d,eax
   1b43f:	cmp    eax,0x7
   1b442:	jne    1b496 <ftp_pwd+0xc6>
   1b444:	mov    rdi,QWORD PTR [rsp]
   1b448:	cmp    BYTE PTR [rdi],0x35
   1b44b:	je     1b4c8 <ftp_pwd+0xf8>
   1b44d:	lea    rsi,[rip+0x4c192]        # 675e6 <primes.6089+0x1506>
   1b454:	call   c840 <strtok@plt>
   1b459:	xor    edi,edi
   1b45b:	lea    rsi,[rip+0x4c184]        # 675e6 <primes.6089+0x1506>
   1b462:	call   c840 <strtok@plt>
   1b467:	mov    rdi,QWORD PTR [rsp]
   1b46b:	mov    rbp,rax
   1b46e:	test   rax,rax
   1b471:	je     1b4c8 <ftp_pwd+0xf8>
   1b473:	mov    rdi,QWORD PTR [rbx]
   1b476:	call   4bdc0 <rpl_free>
   1b47b:	mov    QWORD PTR [rbx],0x0
   1b482:	mov    rdi,rbp
   1b485:	call   4ba50 <xstrdup>
   1b48a:	mov    rdi,QWORD PTR [rsp]
   1b48e:	mov    QWORD PTR [rbx],rax
   1b491:	call   4bdc0 <rpl_free>
   1b496:	mov    rax,QWORD PTR [rsp+0x8]
   1b49b:	xor    rax,QWORD PTR fs:0x28
   1b4a4:	jne    1b4d5 <ftp_pwd+0x105>
   1b4a6:	add    rsp,0x10
   1b4aa:	mov    eax,r12d
   1b4ad:	pop    rbx
   1b4ae:	pop    rbp
   1b4af:	pop    r12
   1b4b1:	ret    
   1b4b2:	nop    WORD PTR [rax+rax*1+0x0]
   1b4b8:	call   4bdc0 <rpl_free>
   1b4bd:	mov    r12d,0x2c
   1b4c3:	jmp    1b496 <ftp_pwd+0xc6>
   1b4c5:	nop    DWORD PTR [rax]
   1b4c8:	call   4bdc0 <rpl_free>
   1b4cd:	mov    r12d,0xf
   1b4d3:	jmp    1b496 <ftp_pwd+0xc6>
   1b4d5:	call   c7b0 <__stack_chk_fail@plt>
   1b4da:	nop    WORD PTR [rax+rax*1+0x0]

000000000001b4e0 <ftp_size>:
   1b4e0:	endbr64 
   1b4e4:	push   r13
   1b4e6:	push   r12
   1b4e8:	mov    r12d,edi
   1b4eb:	lea    rdi,[rip+0x4a63a]        # 65b2c <yy_accept+0xa6c>
   1b4f2:	push   rbp
   1b4f3:	push   rbx
   1b4f4:	mov    rbx,rdx
   1b4f7:	sub    rsp,0x18
   1b4fb:	mov    rax,QWORD PTR fs:0x28
   1b504:	mov    QWORD PTR [rsp+0x8],rax
   1b509:	xor    eax,eax
   1b50b:	call   19690 <ftp_request>
   1b510:	mov    rdi,rax
   1b513:	mov    rbp,rax
   1b516:	call   c310 <strlen@plt>
   1b51b:	movsd  xmm0,QWORD PTR [rip+0x3fcfd]        # 5b220 <_IO_stdin_used+0x220>
   1b523:	mov    edi,r12d
   1b526:	mov    rsi,rbp
   1b529:	mov    rdx,rax
   1b52c:	call   f2a0 <fd_write>
   1b531:	mov    rdi,rbp
   1b534:	test   eax,eax
   1b536:	js     1b5d0 <ftp_size+0xf0>
   1b53c:	call   4bdc0 <rpl_free>
   1b541:	mov    edi,r12d
   1b544:	mov    rsi,rsp
   1b547:	call   198c0 <ftp_response>
   1b54c:	mov    r12d,eax
   1b54f:	cmp    eax,0x7
   1b552:	je     1b580 <ftp_size+0xa0>
   1b554:	mov    QWORD PTR [rbx],0x0
   1b55b:	mov    rax,QWORD PTR [rsp+0x8]
   1b560:	xor    rax,QWORD PTR fs:0x28
   1b569:	jne    1b5e7 <ftp_size+0x107>
   1b56b:	add    rsp,0x18
   1b56f:	mov    eax,r12d
   1b572:	pop    rbx
   1b573:	pop    rbp
   1b574:	pop    r12
   1b576:	pop    r13
   1b578:	ret    
   1b579:	nop    DWORD PTR [rax+0x0]
   1b580:	mov    rbp,QWORD PTR [rsp]
   1b584:	cmp    BYTE PTR [rbp+0x0],0x35
   1b588:	je     1b5c0 <ftp_size+0xe0>
   1b58a:	call   c740 <__errno_location@plt>
   1b58f:	lea    rdi,[rbp+0x4]
   1b593:	mov    edx,0xa
   1b598:	xor    esi,esi
   1b59a:	mov    DWORD PTR [rax],0x0
   1b5a0:	mov    r13,rax
   1b5a3:	call   c5a0 <strtol@plt>
   1b5a8:	mov    rdi,QWORD PTR [rsp]
   1b5ac:	mov    QWORD PTR [rbx],rax
   1b5af:	mov    eax,DWORD PTR [r13+0x0]
   1b5b3:	test   eax,eax
   1b5b5:	jne    1b5c3 <ftp_size+0xe3>
   1b5b7:	call   4bdc0 <rpl_free>
   1b5bc:	jmp    1b55b <ftp_size+0x7b>
   1b5be:	xchg   ax,ax
   1b5c0:	mov    rdi,rbp
   1b5c3:	call   4bdc0 <rpl_free>
   1b5c8:	jmp    1b554 <ftp_size+0x74>
   1b5ca:	nop    WORD PTR [rax+rax*1+0x0]
   1b5d0:	call   4bdc0 <rpl_free>
   1b5d5:	mov    r12d,0x2c
   1b5db:	mov    QWORD PTR [rbx],0x0
   1b5e2:	jmp    1b55b <ftp_size+0x7b>
   1b5e7:	call   c7b0 <__stack_chk_fail@plt>
   1b5ec:	nop    DWORD PTR [rax+0x0]

000000000001b5f0 <ftp_process_type>:
   1b5f0:	endbr64 
   1b5f4:	test   rdi,rdi
   1b5f7:	je     1b640 <ftp_process_type+0x50>
   1b5f9:	push   rbx
   1b5fa:	mov    edx,0x5
   1b5ff:	lea    rsi,[rip+0x4a52b]        # 65b31 <yy_accept+0xa71>
   1b606:	mov    rbx,rdi
   1b609:	call   c7a0 <strncasecmp@plt>
   1b60e:	mov    r8d,eax
   1b611:	mov    eax,0x49
   1b616:	test   r8d,r8d
   1b619:	jne    1b632 <ftp_process_type+0x42>
   1b61b:	movzx  eax,BYTE PTR [rbx+0x5]
   1b61f:	test   al,al
   1b621:	je     1b638 <ftp_process_type+0x48>
   1b623:	movsx  edx,al
   1b626:	lea    ecx,[rax-0x20]
   1b629:	sub    edx,0x61
   1b62c:	cmp    edx,0x1a
   1b62f:	cmovb  eax,ecx
   1b632:	pop    rbx
   1b633:	ret    
   1b634:	nop    DWORD PTR [rax+0x0]
   1b638:	mov    eax,0x49
   1b63d:	pop    rbx
   1b63e:	ret    
   1b63f:	nop
   1b640:	mov    eax,0x49
   1b645:	ret    
   1b646:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001b650 <clean_line.part.0>:
   1b650:	mov    eax,esi
   1b652:	test   esi,esi
   1b654:	jle    1b695 <clean_line.part.0+0x45>
   1b656:	movsxd rdx,esi
   1b659:	lea    rdx,[rdi+rdx*1-0x1]
   1b65e:	jmp    1b66c <clean_line.part.0+0x1c>
   1b660:	mov    BYTE PTR [rdx],0x0
   1b663:	sub    rdx,0x1
   1b667:	sub    eax,0x1
   1b66a:	je     1b699 <clean_line.part.0+0x49>
   1b66c:	movzx  ecx,BYTE PTR [rdx]
   1b66f:	cmp    cl,0xa
   1b672:	je     1b660 <clean_line.part.0+0x10>
   1b674:	cmp    cl,0xd
   1b677:	je     1b660 <clean_line.part.0+0x10>
   1b679:	movzx  edx,BYTE PTR [rdi]
   1b67c:	test   dl,dl
   1b67e:	je     1b699 <clean_line.part.0+0x49>
   1b680:	cmp    dl,0x9
   1b683:	jne    1b688 <clean_line.part.0+0x38>
   1b685:	mov    BYTE PTR [rdi],0x20
   1b688:	movzx  edx,BYTE PTR [rdi+0x1]
   1b68c:	add    rdi,0x1
   1b690:	test   dl,dl
   1b692:	jne    1b680 <clean_line.part.0+0x30>
   1b694:	ret    
   1b695:	jne    1b679 <clean_line.part.0+0x29>
   1b697:	xor    eax,eax
   1b699:	ret    
   1b69a:	nop    WORD PTR [rax+rax*1+0x0]

000000000001b6a0 <ftp_parse_unix_ls>:
   1b6a0:	push   r15
   1b6a2:	push   r14
   1b6a4:	push   r13
   1b6a6:	push   r12
   1b6a8:	push   rbp
   1b6a9:	push   rbx
   1b6aa:	sub    rsp,0x108
   1b6b1:	mov    QWORD PTR [rsp+0x18],rdi
   1b6b6:	mov    DWORD PTR [rsp+0x4c],esi
   1b6ba:	mov    rax,QWORD PTR fs:0x28
   1b6c3:	mov    QWORD PTR [rsp+0xf8],rax
   1b6cb:	xor    eax,eax
   1b6cd:	lea    rax,[rsp+0x60]
   1b6d2:	mov    QWORD PTR [rsp+0x60],0x0
   1b6db:	mov    QWORD PTR [rsp+0x20],rax
   1b6e0:	lea    rax,[rsp+0x68]
   1b6e5:	mov    QWORD PTR [rsp+0x68],0x0
   1b6ee:	mov    QWORD PTR [rsp+0x38],0x0
   1b6f7:	mov    QWORD PTR [rsp+0x40],0x0
   1b700:	mov    QWORD PTR [rsp+0x28],rax
   1b705:	nop    DWORD PTR [rax]
   1b708:	mov    rcx,QWORD PTR [rsp+0x18]
   1b70d:	mov    rsi,QWORD PTR [rsp+0x20]
   1b712:	mov    edx,0xa
   1b717:	mov    rdi,QWORD PTR [rsp+0x28]
   1b71c:	call   be90 <__getdelim@plt>
   1b721:	test   eax,eax
   1b723:	jle    1bb70 <ftp_parse_unix_ls+0x4d0>
   1b729:	mov    rdi,QWORD PTR [rsp+0x68]
   1b72e:	mov    esi,eax
   1b730:	call   1b650 <clean_line.part.0>
   1b735:	mov    rbp,QWORD PTR [rsp+0x68]
   1b73a:	mov    edx,0x5
   1b73f:	lea    rsi,[rip+0x4a498]        # 65bde <yy_accept+0xb1e>
   1b746:	mov    DWORD PTR [rsp+0x34],eax
   1b74a:	mov    rdi,rbp
   1b74d:	call   433b0 <c_strncasecmp>
   1b752:	test   eax,eax
   1b754:	je     1b708 <ftp_parse_unix_ls+0x68>
   1b756:	lea    rsi,[rip+0x4a768]        # 65ec5 <yy_accept+0xe05>
   1b75d:	mov    rdi,rbp
   1b760:	call   c840 <strtok@plt>
   1b765:	mov    rbx,rax
   1b768:	test   rax,rax
   1b76b:	je     1b708 <ftp_parse_unix_ls+0x68>
   1b76d:	movzx  eax,BYTE PTR [rax]
   1b770:	movzx  edx,BYTE PTR [rip+0x6eb44]        # 8a2bb <opt+0x23b>
   1b777:	mov    QWORD PTR [rsp+0xb8],0x0
   1b783:	mov    QWORD PTR [rsp+0xd8],0x0
   1b78f:	cmp    al,0x64
   1b791:	je     1bcf0 <ftp_parse_unix_ls+0x650>
   1b797:	cmp    al,0x6c
   1b799:	je     1bca0 <ftp_parse_unix_ls+0x600>
   1b79f:	cmp    al,0x2d
   1b7a1:	je     1bc40 <ftp_parse_unix_ls+0x5a0>
   1b7a7:	mov    DWORD PTR [rsp+0xb0],0x3
   1b7b2:	test   dl,dl
   1b7b4:	jne    1c034 <ftp_parse_unix_ls+0x994>
   1b7ba:	mov    edx,DWORD PTR [rsp+0x4c]
   1b7be:	test   edx,edx
   1b7c0:	jne    1bc30 <ftp_parse_unix_ls+0x590>
   1b7c6:	lea    rbp,[rbx+0x1]
   1b7ca:	xor    r12d,r12d
   1b7cd:	mov    rdi,rbp
   1b7d0:	call   c310 <strlen@plt>
   1b7d5:	cmp    rax,0x8
   1b7d9:	jbe    1bf03 <ftp_parse_unix_ls+0x863>
   1b7df:	add    rbx,0xa
   1b7e3:	xor    esi,esi
   1b7e5:	xor    edx,edx
   1b7e7:	shl    esi,0x3
   1b7ea:	cmp    BYTE PTR [rbp+0x0],0x72
   1b7ee:	sete   dl
   1b7f1:	shl    edx,0x2
   1b7f4:	cmp    BYTE PTR [rbp+0x1],0x77
   1b7f8:	jne    1b7fd <ftp_parse_unix_ls+0x15d>
   1b7fa:	add    edx,0x2
   1b7fd:	movzx  ecx,BYTE PTR [rbp+0x2]
   1b801:	cmp    cl,0x78
   1b804:	sete   al
   1b807:	cmp    cl,0x73
   1b80a:	sete   cl
   1b80d:	add    rbp,0x3
   1b811:	or     eax,ecx
   1b813:	movzx  eax,al
   1b816:	add    eax,edx
   1b818:	add    esi,eax
   1b81a:	cmp    rbx,rbp
   1b81d:	jne    1b7e5 <ftp_parse_unix_ls+0x145>
   1b81f:	mov    DWORD PTR [rsp+0xd4],esi
   1b826:	test   r12b,r12b
   1b829:	jne    1c021 <ftp_parse_unix_ls+0x981>
   1b82f:	mov    rax,QWORD PTR [rsp+0x68]
   1b834:	mov    DWORD PTR [rsp+0x48],0x1
   1b83c:	xor    ebp,ebp
   1b83e:	mov    ebx,0xffffffff
   1b843:	mov    DWORD PTR [rsp+0xc],0x0
   1b84b:	mov    QWORD PTR [rsp],rax
   1b84f:	mov    DWORD PTR [rsp+0x8],0x0
   1b857:	mov    DWORD PTR [rsp+0x10],0x0
   1b85f:	mov    DWORD PTR [rsp+0x14],0x0
   1b867:	mov    DWORD PTR [rsp+0x30],0x0
   1b86f:	nop
   1b870:	lea    rsi,[rip+0x4a64e]        # 65ec5 <yy_accept+0xe05>
   1b877:	xor    edi,edi
   1b879:	call   c840 <strtok@plt>
   1b87e:	mov    r15,rax
   1b881:	test   rax,rax
   1b884:	je     1bad0 <ftp_parse_unix_ls+0x430>
   1b88a:	sub    ebx,0x1
   1b88d:	js     1b988 <ftp_parse_unix_ls+0x2e8>
   1b893:	cmp    ebx,0x4
   1b896:	je     1b8f0 <ftp_parse_unix_ls+0x250>
   1b898:	cmp    ebx,0x3
   1b89b:	jne    1bbb0 <ftp_parse_unix_ls+0x510>
   1b8a1:	movsx  eax,BYTE PTR [r15]
   1b8a5:	movzx  edx,BYTE PTR [rip+0x6ea0f]        # 8a2bb <opt+0x23b>
   1b8ac:	xor    ebp,ebp
   1b8ae:	sub    eax,0x30
   1b8b1:	cmp    eax,0x9
   1b8b4:	ja     1b940 <ftp_parse_unix_ls+0x2a0>
   1b8ba:	lea    ecx,[rbp+rbp*4+0x0]
   1b8be:	lea    rsi,[r15+0x1]
   1b8c2:	lea    ebp,[rax+rcx*2]
   1b8c5:	movsx  eax,BYTE PTR [r15+0x1]
   1b8ca:	mov    ecx,eax
   1b8cc:	sub    eax,0x30
   1b8cf:	cmp    eax,0x9
   1b8d2:	ja     1ba80 <ftp_parse_unix_ls+0x3e0>
   1b8d8:	cmp    ebp,0x1869f
   1b8de:	jg     1ba80 <ftp_parse_unix_ls+0x3e0>
   1b8e4:	mov    r15,rsi
   1b8e7:	jmp    1b8ba <ftp_parse_unix_ls+0x21a>
   1b8e9:	nop    DWORD PTR [rax+0x0]
   1b8f0:	movsx  edx,BYTE PTR [r15]
   1b8f4:	movsx  eax,BYTE PTR [r15+0x1]
   1b8f9:	lea    ecx,[rdx-0x30]
   1b8fc:	mov    DWORD PTR [rsp+0x14],ecx
   1b900:	test   al,al
   1b902:	je     1b90f <ftp_parse_unix_ls+0x26f>
   1b904:	lea    edx,[rcx+rcx*4]
   1b907:	lea    eax,[rax+rdx*2-0x30]
   1b90b:	mov    DWORD PTR [rsp+0x14],eax
   1b90f:	cmp    BYTE PTR [rip+0x6e9a5],0x0        # 8a2bb <opt+0x23b>
   1b916:	mov    QWORD PTR [rsp],r15
   1b91a:	je     1b870 <ftp_parse_unix_ls+0x1d0>
   1b920:	mov    esi,DWORD PTR [rsp+0x14]
   1b924:	lea    rdi,[rip+0x4a311]        # 65c3c <yy_accept+0xb7c>
   1b92b:	xor    eax,eax
   1b92d:	call   2e250 <debug_logprintf>
   1b932:	jmp    1b870 <ftp_parse_unix_ls+0x1d0>
   1b937:	mov    r15,QWORD PTR [rsp]
   1b93b:	nop    DWORD PTR [rax+rax*1+0x0]
   1b940:	mov    DWORD PTR [rsp+0xc],0x0
   1b948:	mov    DWORD PTR [rsp+0x8],0x0
   1b950:	mov    DWORD PTR [rsp+0x10],0x0
   1b958:	mov    QWORD PTR [rsp],r15
   1b95c:	xor    ebp,ebp
   1b95e:	test   dl,dl
   1b960:	je     1b870 <ftp_parse_unix_ls+0x1d0>
   1b966:	mov    ecx,DWORD PTR [rsp+0xc]
   1b96a:	mov    edx,DWORD PTR [rsp+0x8]
   1b96e:	lea    rdi,[rip+0x4a5f3]        # 65f68 <yy_accept+0xea8>
   1b975:	xor    eax,eax
   1b977:	mov    esi,DWORD PTR [rsp+0x10]
   1b97b:	call   2e250 <debug_logprintf>
   1b980:	jmp    1b870 <ftp_parse_unix_ls+0x1d0>
   1b985:	nop    DWORD PTR [rax]
   1b988:	xor    r12d,r12d
   1b98b:	lea    r13,[rip+0x4a248]        # 65bda <yy_accept+0xb1a>
   1b992:	jmp    1b9a3 <ftp_parse_unix_ls+0x303>
   1b994:	nop    DWORD PTR [rax+0x0]
   1b998:	lea    rax,[rip+0x61101]        # 7caa0 <months.8391>
   1b99f:	mov    r13,QWORD PTR [rax+r12*8]
   1b9a3:	mov    rsi,r13
   1b9a6:	mov    rdi,r15
   1b9a9:	mov    r14d,r12d
   1b9ac:	call   43340 <c_strcasecmp>
   1b9b1:	test   eax,eax
   1b9b3:	je     1b9d0 <ftp_parse_unix_ls+0x330>
   1b9b5:	add    r12,0x1
   1b9b9:	cmp    r12,0xc
   1b9bd:	jne    1b998 <ftp_parse_unix_ls+0x2f8>
   1b9bf:	mov    QWORD PTR [rsp],r15
   1b9c3:	jmp    1b870 <ftp_parse_unix_ls+0x1d0>
   1b9c8:	nop    DWORD PTR [rax+rax*1+0x0]
   1b9d0:	mov    rax,QWORD PTR [rsp]
   1b9d4:	cmp    QWORD PTR [rsp+0x68],rax
   1b9d9:	je     1bad0 <ftp_parse_unix_ls+0x430>
   1b9df:	call   c740 <__errno_location@plt>
   1b9e4:	mov    rdi,QWORD PTR [rsp]
   1b9e8:	mov    edx,0xa
   1b9ed:	xor    esi,esi
   1b9ef:	mov    DWORD PTR [rax],0x0
   1b9f5:	mov    rbx,rax
   1b9f8:	call   c5a0 <strtol@plt>
   1b9fd:	movabs rcx,0x7fffffffffffffff
   1ba07:	cmp    rax,rcx
   1ba0a:	jne    1ba1b <ftp_parse_unix_ls+0x37b>
   1ba0c:	cmp    DWORD PTR [rbx],0x22
   1ba0f:	mov    edi,0x0
   1ba14:	mov    rax,rcx
   1ba17:	cmove  rax,rdi
   1ba1b:	cmp    BYTE PTR [rip+0x6e899],0x0        # 8a2bb <opt+0x23b>
   1ba22:	mov    QWORD PTR [rsp],r15
   1ba26:	mov    ebx,0x5
   1ba2b:	mov    QWORD PTR [rsp+0xc0],rax
   1ba33:	mov    DWORD PTR [rsp+0x30],r14d
   1ba38:	je     1b870 <ftp_parse_unix_ls+0x1d0>
   1ba3e:	mov    rdi,rax
   1ba41:	call   3e8e0 <number_to_static_string>
   1ba46:	lea    rdi,[rip+0x4a1d8]        # 65c25 <yy_accept+0xb65>
   1ba4d:	mov    rsi,rax
   1ba50:	xor    eax,eax
   1ba52:	call   2e250 <debug_logprintf>
   1ba57:	cmp    BYTE PTR [rip+0x6e85d],0x0        # 8a2bb <opt+0x23b>
   1ba5e:	je     1b870 <ftp_parse_unix_ls+0x1d0>
   1ba64:	mov    rsi,r13
   1ba67:	lea    rdi,[rip+0x4a1c2]        # 65c30 <yy_accept+0xb70>
   1ba6e:	xor    eax,eax
   1ba70:	call   2e250 <debug_logprintf>
   1ba75:	jmp    1b870 <ftp_parse_unix_ls+0x1d0>
   1ba7a:	nop    WORD PTR [rax+rax*1+0x0]
   1ba80:	mov    QWORD PTR [rsp],rsi
   1ba84:	cmp    cl,0x3a
   1ba87:	je     1bb28 <ftp_parse_unix_ls+0x488>
   1ba8d:	test   ebp,ebp
   1ba8f:	je     1b937 <ftp_parse_unix_ls+0x297>
   1ba95:	mov    DWORD PTR [rsp+0xc],0x0
   1ba9d:	mov    DWORD PTR [rsp+0x8],0x0
   1baa5:	mov    DWORD PTR [rsp+0x10],0x0
   1baad:	test   dl,dl
   1baaf:	je     1b870 <ftp_parse_unix_ls+0x1d0>
   1bab5:	mov    esi,ebp
   1bab7:	lea    rdi,[rip+0x4a188]        # 65c46 <yy_accept+0xb86>
   1babe:	xor    eax,eax
   1bac0:	call   2e250 <debug_logprintf>
   1bac5:	jmp    1b870 <ftp_parse_unix_ls+0x1d0>
   1baca:	nop    WORD PTR [rax+rax*1+0x0]
   1bad0:	movzx  eax,BYTE PTR [rip+0x6e7e4]        # 8a2bb <opt+0x23b>
   1bad7:	mov    r12,QWORD PTR [rsp+0xb8]
   1badf:	test   al,al
   1bae1:	jne    1bfbc <ftp_parse_unix_ls+0x91c>
   1bae7:	nop    WORD PTR [rax+rax*1+0x0]
   1baf0:	mov    r13,QWORD PTR [rsp+0xd8]
   1baf8:	mov    rdi,r12
   1bafb:	call   4bdc0 <rpl_free>
   1bb00:	mov    rdi,r13
   1bb03:	mov    QWORD PTR [rsp+0xb8],0x0
   1bb0f:	call   4bdc0 <rpl_free>
   1bb14:	mov    QWORD PTR [rsp+0xd8],0x0
   1bb20:	jmp    1b708 <ftp_parse_unix_ls+0x68>
   1bb25:	nop    DWORD PTR [rax]
   1bb28:	mov    rax,QWORD PTR [rsp]
   1bb2c:	lea    rsi,[r15+0x2]
   1bb30:	movsx  eax,BYTE PTR [rax+0x1]
   1bb34:	mov    ecx,eax
   1bb36:	sub    eax,0x30
   1bb39:	cmp    eax,0x9
   1bb3c:	jbe    1bd1f <ftp_parse_unix_ls+0x67f>
   1bb42:	mov    DWORD PTR [rsp+0x8],0x0
   1bb4a:	mov    r15,rsi
   1bb4d:	cmp    cl,0x3a
   1bb50:	je     1bd46 <ftp_parse_unix_ls+0x6a6>
   1bb56:	mov    DWORD PTR [rsp+0x10],ebp
   1bb5a:	mov    DWORD PTR [rsp+0x48],0x0
   1bb62:	mov    DWORD PTR [rsp+0xc],0x0
   1bb6a:	jmp    1b958 <ftp_parse_unix_ls+0x2b8>
   1bb6f:	nop
   1bb70:	mov    rdi,QWORD PTR [rsp+0x68]
   1bb75:	call   4bdc0 <rpl_free>
   1bb7a:	mov    rax,QWORD PTR [rsp+0xf8]
   1bb82:	xor    rax,QWORD PTR fs:0x28
   1bb8b:	jne    1c1cd <ftp_parse_unix_ls+0xb2d>
   1bb91:	mov    rax,QWORD PTR [rsp+0x40]
   1bb96:	add    rsp,0x108
   1bb9d:	pop    rbx
   1bb9e:	pop    rbp
   1bb9f:	pop    r12
   1bba1:	pop    r13
   1bba3:	pop    r14
   1bba5:	pop    r15
   1bba7:	ret    
   1bba8:	nop    DWORD PTR [rax+rax*1+0x0]
   1bbb0:	cmp    ebx,0x2
   1bbb3:	jne    cc62 <ftp_parse_unix_ls.cold>
   1bbb9:	mov    rdi,r15
   1bbbc:	call   c310 <strlen@plt>
   1bbc1:	movsxd rdx,DWORD PTR [rsp+0x34]
   1bbc6:	mov    rcx,r15
   1bbc9:	sub    rcx,QWORD PTR [rsp+0x68]
   1bbce:	cdqe   
   1bbd0:	sub    rdx,rcx
   1bbd3:	cmp    rax,rdx
   1bbd6:	jge    1bbeb <ftp_parse_unix_ls+0x54b>
   1bbd8:	cmp    DWORD PTR [rsp+0xb0],0x2
   1bbe0:	mov    BYTE PTR [r15+rax*1],0x20
   1bbe5:	je     1bf4b <ftp_parse_unix_ls+0x8ab>
   1bbeb:	cmp    BYTE PTR [r15],0x2e
   1bbef:	jne    1bd63 <ftp_parse_unix_ls+0x6c3>
   1bbf5:	cmp    BYTE PTR [r15+0x1],0x0
   1bbfa:	jne    1bd63 <ftp_parse_unix_ls+0x6c3>
   1bc00:	cmp    BYTE PTR [rip+0x6e6b4],0x0        # 8a2bb <opt+0x23b>
   1bc07:	mov    r12,QWORD PTR [rsp+0xb8]
   1bc0f:	je     1baf0 <ftp_parse_unix_ls+0x450>
   1bc15:	xor    eax,eax
   1bc17:	lea    rdi,[rip+0x4a04d]        # 65c6b <yy_accept+0xbab>
   1bc1e:	call   2e250 <debug_logprintf>
   1bc23:	movzx  eax,BYTE PTR [rip+0x6e691]        # 8a2bb <opt+0x23b>
   1bc2a:	jmp    1bad7 <ftp_parse_unix_ls+0x437>
   1bc2f:	nop
   1bc30:	mov    DWORD PTR [rsp+0xd4],0x1a4
   1bc3b:	jmp    1b82f <ftp_parse_unix_ls+0x18f>
   1bc40:	mov    DWORD PTR [rsp+0xb0],0x0
   1bc4b:	test   dl,dl
   1bc4d:	je     1b7ba <ftp_parse_unix_ls+0x11a>
   1bc53:	lea    rdi,[rip+0x49f8a]        # 65be4 <yy_accept+0xb24>
   1bc5a:	xor    eax,eax
   1bc5c:	call   2e250 <debug_logprintf>
   1bc61:	mov    edi,DWORD PTR [rsp+0x4c]
   1bc65:	movzx  r12d,BYTE PTR [rip+0x6e64e]        # 8a2bb <opt+0x23b>
   1bc6d:	test   edi,edi
   1bc6f:	je     1bcd1 <ftp_parse_unix_ls+0x631>
   1bc71:	mov    DWORD PTR [rsp+0xd4],0x1a4
   1bc7c:	test   r12b,r12b
   1bc7f:	je     1b82f <ftp_parse_unix_ls+0x18f>
   1bc85:	mov    esi,DWORD PTR [rsp+0xd4]
   1bc8c:	lea    rdi,[rip+0x49f7d]        # 65c10 <yy_accept+0xb50>
   1bc93:	xor    eax,eax
   1bc95:	call   2e250 <debug_logprintf>
   1bc9a:	jmp    1b82f <ftp_parse_unix_ls+0x18f>
   1bc9f:	nop
   1bca0:	mov    DWORD PTR [rsp+0xb0],0x2
   1bcab:	test   dl,dl
   1bcad:	je     1b7ba <ftp_parse_unix_ls+0x11a>
   1bcb3:	lea    rdi,[rip+0x49f42]        # 65bfc <yy_accept+0xb3c>
   1bcba:	xor    eax,eax
   1bcbc:	call   2e250 <debug_logprintf>
   1bcc1:	movzx  r12d,BYTE PTR [rip+0x6e5f2]        # 8a2bb <opt+0x23b>
   1bcc9:	mov    eax,DWORD PTR [rsp+0x4c]
   1bccd:	test   eax,eax
   1bccf:	jne    1bc71 <ftp_parse_unix_ls+0x5d1>
   1bcd1:	lea    rbp,[rbx+0x1]
   1bcd5:	mov    rdi,rbp
   1bcd8:	call   c310 <strlen@plt>
   1bcdd:	xor    esi,esi
   1bcdf:	cmp    rax,0x8
   1bce3:	ja     1b7df <ftp_parse_unix_ls+0x13f>
   1bce9:	jmp    1b81f <ftp_parse_unix_ls+0x17f>
   1bcee:	xchg   ax,ax
   1bcf0:	mov    DWORD PTR [rsp+0xb0],0x1
   1bcfb:	test   dl,dl
   1bcfd:	jne    1c04f <ftp_parse_unix_ls+0x9af>
   1bd03:	mov    ecx,DWORD PTR [rsp+0x4c]
   1bd07:	test   ecx,ecx
   1bd09:	je     1b7c6 <ftp_parse_unix_ls+0x126>
   1bd0f:	mov    DWORD PTR [rsp+0xd4],0x1ed
   1bd1a:	jmp    1b82f <ftp_parse_unix_ls+0x18f>
   1bd1f:	mov    DWORD PTR [rsp+0x8],eax
   1bd23:	movsx  eax,BYTE PTR [r15+0x3]
   1bd28:	lea    rsi,[r15+0x3]
   1bd2c:	mov    ecx,eax
   1bd2e:	sub    eax,0x30
   1bd31:	cmp    eax,0x9
   1bd34:	jbe    1bf30 <ftp_parse_unix_ls+0x890>
   1bd3a:	mov    r15,rsi
   1bd3d:	cmp    cl,0x3a
   1bd40:	jne    1bb56 <ftp_parse_unix_ls+0x4b6>
   1bd46:	movsx  eax,BYTE PTR [r15+0x1]
   1bd4b:	lea    rcx,[r15+0x1]
   1bd4f:	sub    eax,0x30
   1bd52:	cmp    eax,0x9
   1bd55:	jbe    1bf8f <ftp_parse_unix_ls+0x8ef>
   1bd5b:	mov    r15,rcx
   1bd5e:	jmp    1bb56 <ftp_parse_unix_ls+0x4b6>
   1bd63:	cmp    BYTE PTR [r15],0x2e
   1bd67:	je     1bf13 <ftp_parse_unix_ls+0x873>
   1bd6d:	mov    rdi,r15
   1bd70:	call   c310 <strlen@plt>
   1bd75:	lea    r13d,[rax+0x1]
   1bd79:	mov    rbx,rax
   1bd7c:	movsxd r13,r13d
   1bd7f:	mov    rdi,r13
   1bd82:	call   4b850 <xmalloc>
   1bd87:	mov    rdx,r13
   1bd8a:	mov    rsi,r15
   1bd8d:	mov    rdi,rax
   1bd90:	mov    QWORD PTR [rsp+0xb8],rax
   1bd98:	mov    r12,rax
   1bd9b:	call   cb30 <memcpy@plt>
   1bda0:	mov    edx,DWORD PTR [rsp+0xb0]
   1bda7:	movzx  eax,BYTE PTR [rip+0x6e50d]        # 8a2bb <opt+0x23b>
   1bdae:	test   ebx,ebx
   1bdb0:	je     1bff8 <ftp_parse_unix_ls+0x958>
   1bdb6:	cmp    edx,0x1
   1bdb9:	je     1c081 <ftp_parse_unix_ls+0x9e1>
   1bdbf:	cmp    edx,0x2
   1bdc2:	je     1c14e <ftp_parse_unix_ls+0xaae>
   1bdc8:	test   edx,edx
   1bdca:	jne    1bde7 <ftp_parse_unix_ls+0x747>
   1bdcc:	test   BYTE PTR [rsp+0xd4],0x49
   1bdd4:	je     1bde7 <ftp_parse_unix_ls+0x747>
   1bdd6:	movsxd rbx,ebx
   1bdd9:	lea    rdx,[r12+rbx*1-0x1]
   1bdde:	cmp    BYTE PTR [rdx],0x2a
   1bde1:	je     1c182 <ftp_parse_unix_ls+0xae2>
   1bde7:	test   al,al
   1bde9:	jne    1c0b8 <ftp_parse_unix_ls+0xa18>
   1bdef:	cmp    QWORD PTR [rsp+0x40],0x0
   1bdf5:	je     1c0dc <ftp_parse_unix_ls+0xa3c>
   1bdfb:	mov    rbx,QWORD PTR [rsp+0x38]
   1be00:	mov    edi,0x40
   1be05:	mov    QWORD PTR [rsp+0xe0],rbx
   1be0d:	call   4b850 <xmalloc>
   1be12:	movdqa xmm3,XMMWORD PTR [rsp+0xe0]
   1be1b:	movdqa xmm0,XMMWORD PTR [rsp+0xb0]
   1be24:	movdqa xmm1,XMMWORD PTR [rsp+0xc0]
   1be2d:	mov    QWORD PTR [rbx+0x38],rax
   1be31:	movdqa xmm2,XMMWORD PTR [rsp+0xd0]
   1be3a:	movups XMMWORD PTR [rax+0x30],xmm3
   1be3e:	mov    QWORD PTR [rsp+0x38],rax
   1be43:	mov    QWORD PTR [rax+0x38],0x0
   1be4b:	movups XMMWORD PTR [rax],xmm0
   1be4e:	movups XMMWORD PTR [rax+0x10],xmm1
   1be52:	movups XMMWORD PTR [rax+0x20],xmm2
   1be56:	xor    edi,edi
   1be58:	call   cbf0 <time@plt>
   1be5d:	lea    rdi,[rsp+0x58]
   1be62:	mov    QWORD PTR [rsp+0x58],rax
   1be67:	call   caa0 <localtime@plt>
   1be6c:	mov    edx,DWORD PTR [rsp+0xc]
   1be70:	mov    ecx,DWORD PTR [rsp+0x14]
   1be74:	mov    DWORD PTR [rsp+0x70],edx
   1be78:	mov    edx,DWORD PTR [rsp+0x8]
   1be7c:	mov    DWORD PTR [rsp+0x7c],ecx
   1be80:	mov    ecx,DWORD PTR [rsp+0x30]
   1be84:	mov    DWORD PTR [rsp+0x74],edx
   1be88:	mov    edx,DWORD PTR [rsp+0x10]
   1be8c:	mov    DWORD PTR [rsp+0x80],ecx
   1be93:	mov    DWORD PTR [rsp+0x78],edx
   1be97:	test   ebp,ebp
   1be99:	jne    1c0d0 <ftp_parse_unix_ls+0xa30>
   1be9f:	mov    ebp,DWORD PTR [rax+0x14]
   1bea2:	cmp    DWORD PTR [rax+0x10],ecx
   1bea5:	jge    1c0d0 <ftp_parse_unix_ls+0xa30>
   1beab:	sub    ebp,0x1
   1beae:	mov    DWORD PTR [rsp+0x84],ebp
   1beb5:	cmp    ebp,0x76b
   1bebb:	jle    1beca <ftp_parse_unix_ls+0x82a>
   1bebd:	sub    ebp,0x76c
   1bec3:	mov    DWORD PTR [rsp+0x84],ebp
   1beca:	mov    DWORD PTR [rsp+0x90],0xffffffff
   1bed5:	lea    rdi,[rsp+0x70]
   1beda:	mov    QWORD PTR [rsp+0x88],0x0
   1bee6:	call   bec0 <mktime@plt>
   1beeb:	mov    rdx,QWORD PTR [rsp+0x38]
   1bef0:	mov    QWORD PTR [rdx+0x18],rax
   1bef4:	mov    rax,rdx
   1bef7:	mov    edx,DWORD PTR [rsp+0x48]
   1befb:	mov    DWORD PTR [rax+0x20],edx
   1befe:	jmp    1b708 <ftp_parse_unix_ls+0x68>
   1bf03:	mov    DWORD PTR [rsp+0xd4],0x0
   1bf0e:	jmp    1b82f <ftp_parse_unix_ls+0x18f>
   1bf13:	cmp    BYTE PTR [r15+0x1],0x2e
   1bf18:	jne    1bd6d <ftp_parse_unix_ls+0x6cd>
   1bf1e:	cmp    BYTE PTR [r15+0x2],0x0
   1bf23:	je     1bc00 <ftp_parse_unix_ls+0x560>
   1bf29:	jmp    1bd6d <ftp_parse_unix_ls+0x6cd>
   1bf2e:	xchg   ax,ax
   1bf30:	mov    ecx,DWORD PTR [rsp+0x8]
   1bf34:	add    r15,0x4
   1bf38:	lea    ecx,[rcx+rcx*4]
   1bf3b:	lea    eax,[rax+rcx*2]
   1bf3e:	movzx  ecx,BYTE PTR [r15]
   1bf42:	mov    DWORD PTR [rsp+0x8],eax
   1bf46:	jmp    1bb4d <ftp_parse_unix_ls+0x4ad>
   1bf4b:	lea    rsi,[rip+0x49d07]        # 65c59 <yy_accept+0xb99>
   1bf52:	mov    rdi,r15
   1bf55:	call   c550 <strstr@plt>
   1bf5a:	mov    rbx,rax
   1bf5d:	test   rax,rax
   1bf60:	je     1bad0 <ftp_parse_unix_ls+0x430>
   1bf66:	lea    rdi,[rax+0x4]
   1bf6a:	call   4ba50 <xstrdup>
   1bf6f:	cmp    BYTE PTR [rip+0x6e345],0x0        # 8a2bb <opt+0x23b>
   1bf76:	mov    QWORD PTR [rsp+0xd8],rax
   1bf7e:	mov    rsi,rax
   1bf81:	jne    1c16f <ftp_parse_unix_ls+0xacf>
   1bf87:	mov    BYTE PTR [rbx],0x0
   1bf8a:	jmp    1bbeb <ftp_parse_unix_ls+0x54b>
   1bf8f:	mov    DWORD PTR [rsp+0xc],eax
   1bf93:	movsx  eax,BYTE PTR [r15+0x2]
   1bf98:	lea    rcx,[r15+0x2]
   1bf9c:	sub    eax,0x30
   1bf9f:	cmp    eax,0x9
   1bfa2:	jbe    1c12b <ftp_parse_unix_ls+0xa8b>
   1bfa8:	mov    DWORD PTR [rsp+0x10],ebp
   1bfac:	mov    r15,rcx
   1bfaf:	mov    DWORD PTR [rsp+0x48],0x0
   1bfb7:	jmp    1b958 <ftp_parse_unix_ls+0x2b8>
   1bfbc:	lea    rsi,[rip+0x52454]        # 6e417 <urlchr_table+0x877>
   1bfc3:	xor    eax,eax
   1bfc5:	lea    rdi,[rip+0x3f68f]        # 5b65b <_IO_stdin_used+0x65b>
   1bfcc:	call   2e250 <debug_logprintf>
   1bfd1:	cmp    BYTE PTR [rip+0x6e2e3],0x0        # 8a2bb <opt+0x23b>
   1bfd8:	je     1baf0 <ftp_parse_unix_ls+0x450>
   1bfde:	lea    rdi,[rip+0x49ce3]        # 65cc8 <yy_accept+0xc08>
   1bfe5:	xor    eax,eax
   1bfe7:	call   2e250 <debug_logprintf>
   1bfec:	jmp    1baf0 <ftp_parse_unix_ls+0x450>
   1bff1:	nop    DWORD PTR [rax+0x0]
   1bff8:	cmp    edx,0x2
   1bffb:	je     1c00a <ftp_parse_unix_ls+0x96a>
   1bffd:	test   al,al
   1bfff:	je     1baf0 <ftp_parse_unix_ls+0x450>
   1c005:	mov    rsi,r12
   1c008:	jmp    1bfc3 <ftp_parse_unix_ls+0x923>
   1c00a:	cmp    QWORD PTR [rsp+0xd8],0x0
   1c013:	jne    1bffd <ftp_parse_unix_ls+0x95d>
   1c015:	test   al,al
   1c017:	jne    1c005 <ftp_parse_unix_ls+0x965>
   1c019:	xor    r13d,r13d
   1c01c:	jmp    1baf8 <ftp_parse_unix_ls+0x458>
   1c021:	lea    rdi,[rip+0x49bf1]        # 65c19 <yy_accept+0xb59>
   1c028:	xor    eax,eax
   1c02a:	call   2e250 <debug_logprintf>
   1c02f:	jmp    1b82f <ftp_parse_unix_ls+0x18f>
   1c034:	lea    rdi,[rip+0x49bcb]        # 65c06 <yy_accept+0xb46>
   1c03b:	xor    eax,eax
   1c03d:	call   2e250 <debug_logprintf>
   1c042:	movzx  r12d,BYTE PTR [rip+0x6e271]        # 8a2bb <opt+0x23b>
   1c04a:	jmp    1bcc9 <ftp_parse_unix_ls+0x629>
   1c04f:	lea    rdi,[rip+0x49b9a]        # 65bf0 <yy_accept+0xb30>
   1c056:	xor    eax,eax
   1c058:	call   2e250 <debug_logprintf>
   1c05d:	mov    esi,DWORD PTR [rsp+0x4c]
   1c061:	movzx  r12d,BYTE PTR [rip+0x6e252]        # 8a2bb <opt+0x23b>
   1c069:	test   esi,esi
   1c06b:	je     1bcd1 <ftp_parse_unix_ls+0x631>
   1c071:	mov    DWORD PTR [rsp+0xd4],0x1ed
   1c07c:	jmp    1bc7c <ftp_parse_unix_ls+0x5dc>
   1c081:	movsxd rbx,ebx
   1c084:	lea    rdx,[r12+rbx*1-0x1]
   1c089:	cmp    BYTE PTR [rdx],0x2f
   1c08c:	jne    1bde7 <ftp_parse_unix_ls+0x747>
   1c092:	mov    BYTE PTR [rdx],0x0
   1c095:	test   al,al
   1c097:	je     1bdef <ftp_parse_unix_ls+0x74f>
   1c09d:	xor    eax,eax
   1c09f:	lea    rdi,[rip+0x49bde]        # 65c84 <yy_accept+0xbc4>
   1c0a6:	call   2e250 <debug_logprintf>
   1c0ab:	cmp    BYTE PTR [rip+0x6e209],0x0        # 8a2bb <opt+0x23b>
   1c0b2:	je     1bdef <ftp_parse_unix_ls+0x74f>
   1c0b8:	mov    rsi,r12
   1c0bb:	lea    rdi,[rip+0x3f599]        # 5b65b <_IO_stdin_used+0x65b>
   1c0c2:	xor    eax,eax
   1c0c4:	call   2e250 <debug_logprintf>
   1c0c9:	jmp    1bdef <ftp_parse_unix_ls+0x74f>
   1c0ce:	xchg   ax,ax
   1c0d0:	mov    DWORD PTR [rsp+0x84],ebp
   1c0d7:	jmp    1beb5 <ftp_parse_unix_ls+0x815>
   1c0dc:	mov    edi,0x40
   1c0e1:	call   4b850 <xmalloc>
   1c0e6:	movdqa xmm4,XMMWORD PTR [rsp+0xb0]
   1c0ef:	movdqa xmm5,XMMWORD PTR [rsp+0xc0]
   1c0f8:	movdqa xmm6,XMMWORD PTR [rsp+0xd0]
   1c101:	mov    QWORD PTR [rsp+0x40],rax
   1c106:	mov    QWORD PTR [rax+0x38],0x0
   1c10e:	mov    QWORD PTR [rax+0x30],0x0
   1c116:	mov    QWORD PTR [rsp+0x38],rax
   1c11b:	movups XMMWORD PTR [rax],xmm4
   1c11e:	movups XMMWORD PTR [rax+0x10],xmm5
   1c122:	movups XMMWORD PTR [rax+0x20],xmm6
   1c126:	jmp    1be56 <ftp_parse_unix_ls+0x7b6>
   1c12b:	mov    ecx,DWORD PTR [rsp+0xc]
   1c12f:	mov    DWORD PTR [rsp+0x10],ebp
   1c133:	add    r15,0x3
   1c137:	mov    DWORD PTR [rsp+0x48],0x0
   1c13f:	lea    ecx,[rcx+rcx*4]
   1c142:	lea    eax,[rax+rcx*2]
   1c145:	mov    DWORD PTR [rsp+0xc],eax
   1c149:	jmp    1b958 <ftp_parse_unix_ls+0x2b8>
   1c14e:	movsxd rbx,ebx
   1c151:	lea    rdx,[r12+rbx*1-0x1]
   1c156:	cmp    BYTE PTR [rdx],0x40
   1c159:	je     1c1b0 <ftp_parse_unix_ls+0xb10>
   1c15b:	cmp    QWORD PTR [rsp+0xd8],0x0
   1c164:	jne    1bde7 <ftp_parse_unix_ls+0x747>
   1c16a:	jmp    1c015 <ftp_parse_unix_ls+0x975>
   1c16f:	lea    rdi,[rip+0x49ae8]        # 65c5e <yy_accept+0xb9e>
   1c176:	xor    eax,eax
   1c178:	call   2e250 <debug_logprintf>
   1c17d:	jmp    1bf87 <ftp_parse_unix_ls+0x8e7>
   1c182:	mov    BYTE PTR [rdx],0x0
   1c185:	test   al,al
   1c187:	je     1bdef <ftp_parse_unix_ls+0x74f>
   1c18d:	xor    eax,eax
   1c18f:	lea    rdi,[rip+0x49b1b]        # 65cb1 <yy_accept+0xbf1>
   1c196:	call   2e250 <debug_logprintf>
   1c19b:	cmp    BYTE PTR [rip+0x6e119],0x0        # 8a2bb <opt+0x23b>
   1c1a2:	je     1bdef <ftp_parse_unix_ls+0x74f>
   1c1a8:	jmp    1c0b8 <ftp_parse_unix_ls+0xa18>
   1c1ad:	nop    DWORD PTR [rax]
   1c1b0:	mov    BYTE PTR [rdx],0x0
   1c1b3:	test   al,al
   1c1b5:	jne    1c1d2 <ftp_parse_unix_ls+0xb32>
   1c1b7:	mov    r13,QWORD PTR [rsp+0xd8]
   1c1bf:	test   r13,r13
   1c1c2:	jne    1bdef <ftp_parse_unix_ls+0x74f>
   1c1c8:	jmp    1baf8 <ftp_parse_unix_ls+0x458>
   1c1cd:	call   c7b0 <__stack_chk_fail@plt>
   1c1d2:	xor    eax,eax
   1c1d4:	lea    rdi,[rip+0x49abf]        # 65c9a <yy_accept+0xbda>
   1c1db:	call   2e250 <debug_logprintf>
   1c1e0:	movzx  eax,BYTE PTR [rip+0x6e0d4]        # 8a2bb <opt+0x23b>
   1c1e7:	cmp    QWORD PTR [rsp+0xd8],0x0
   1c1f0:	jne    1bde7 <ftp_parse_unix_ls+0x747>
   1c1f6:	jmp    1c015 <ftp_parse_unix_ls+0x975>
   1c1fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001c200 <ftp_parse_ls_fp>:
   1c200:	endbr64 
   1c204:	push   r15
   1c206:	push   r14
   1c208:	mov    r14,rdi
   1c20b:	push   r13
   1c20d:	push   r12
   1c20f:	push   rbp
   1c210:	push   rbx
   1c211:	sub    rsp,0x108
   1c218:	mov    rax,QWORD PTR fs:0x28
   1c221:	mov    QWORD PTR [rsp+0xf8],rax
   1c229:	xor    eax,eax
   1c22b:	cmp    esi,0x2
   1c22e:	je     1c348 <ftp_parse_ls_fp+0x148>
   1c234:	ja     1c2c8 <ftp_parse_ls_fp+0xc8>
   1c23a:	test   esi,esi
   1c23c:	je     1c332 <ftp_parse_ls_fp+0x132>
   1c242:	mov    QWORD PTR [rsp+0x40],0x0
   1c24b:	lea    rax,[rsp+0x50]
   1c250:	xor    ebx,ebx
   1c252:	mov    QWORD PTR [rsp+0x10],rax
   1c257:	lea    rax,[rsp+0x40]
   1c25c:	mov    QWORD PTR [rsp+0x50],0x0
   1c265:	mov    QWORD PTR [rsp+0x8],rax
   1c26a:	nop    WORD PTR [rax+rax*1+0x0]
   1c270:	mov    rsi,QWORD PTR [rsp+0x8]
   1c275:	mov    rdi,QWORD PTR [rsp+0x10]
   1c27a:	mov    rcx,r14
   1c27d:	mov    edx,0xa
   1c282:	call   be90 <__getdelim@plt>
   1c287:	mov    rsi,rax
   1c28a:	test   eax,eax
   1c28c:	jle    1c6da <ftp_parse_ls_fp+0x4da>
   1c292:	mov    rdi,QWORD PTR [rsp+0x50]
   1c297:	call   1b650 <clean_line.part.0>
   1c29c:	test   eax,eax
   1c29e:	jle    1c270 <ftp_parse_ls_fp+0x70>
   1c2a0:	mov    r8,QWORD PTR [rsp+0x50]
   1c2a5:	test   ebx,ebx
   1c2a7:	jne    1c6c0 <ftp_parse_ls_fp+0x4c0>
   1c2ad:	cdqe   
   1c2af:	cmp    BYTE PTR [r8+rax*1-0x1],0x5d
   1c2b5:	jne    1c6c0 <ftp_parse_ls_fp+0x4c0>
   1c2bb:	mov    ebx,0x1
   1c2c0:	jmp    1c270 <ftp_parse_ls_fp+0x70>
   1c2c2:	nop    WORD PTR [rax+rax*1+0x0]
   1c2c8:	cmp    esi,0x3
   1c2cb:	jne    1c310 <ftp_parse_ls_fp+0x110>
   1c2cd:	mov    esi,0x1
   1c2d2:	mov    rdi,r14
   1c2d5:	call   1b6a0 <ftp_parse_unix_ls>
   1c2da:	mov    r15,rax
   1c2dd:	mov    rax,QWORD PTR [rsp+0xf8]
   1c2e5:	xor    rax,QWORD PTR fs:0x28
   1c2ee:	jne    1d1fa <ftp_parse_ls_fp+0xffa>
   1c2f4:	add    rsp,0x108
   1c2fb:	mov    rax,r15
   1c2fe:	pop    rbx
   1c2ff:	pop    rbp
   1c300:	pop    r12
   1c302:	pop    r13
   1c304:	pop    r14
   1c306:	pop    r15
   1c308:	ret    
   1c309:	nop    DWORD PTR [rax+0x0]
   1c310:	lea    rsi,[rip+0x49d49]        # 66060 <yy_accept+0xfa0>
   1c317:	xor    edi,edi
   1c319:	mov    edx,0x5
   1c31e:	call   c780 <dcgettext@plt>
   1c323:	mov    edi,0x1
   1c328:	mov    rsi,rax
   1c32b:	xor    eax,eax
   1c32d:	call   2e0a0 <logprintf>
   1c332:	xor    esi,esi
   1c334:	mov    rdi,r14
   1c337:	call   1b6a0 <ftp_parse_unix_ls>
   1c33c:	mov    r15,rax
   1c33f:	jmp    1c2dd <ftp_parse_ls_fp+0xdd>
   1c341:	nop    DWORD PTR [rax+0x0]
   1c348:	call   c430 <fgetc@plt>
   1c34d:	mov    rdi,r14
   1c350:	mov    ebx,eax
   1c352:	call   c560 <rewind@plt>
   1c357:	sub    ebx,0x30
   1c35a:	cmp    ebx,0x9
   1c35d:	ja     1c2cd <ftp_parse_ls_fp+0xcd>
   1c363:	lea    rax,[rsp+0x40]
   1c368:	xor    r15d,r15d
   1c36b:	mov    QWORD PTR [rsp+0x40],0x0
   1c374:	lea    r13,[rsp+0x48]
   1c379:	mov    QWORD PTR [rsp+0x48],0x0
   1c382:	mov    QWORD PTR [rsp+0x98],0x0
   1c38e:	mov    QWORD PTR [rsp+0x10],0x0
   1c397:	mov    QWORD PTR [rsp+0x30],0x0
   1c3a0:	mov    QWORD PTR [rsp+0x8],rax
   1c3a5:	nop    DWORD PTR [rax]
   1c3a8:	mov    rsi,QWORD PTR [rsp+0x8]
   1c3ad:	mov    rcx,r14
   1c3b0:	mov    edx,0xa
   1c3b5:	mov    rdi,r13
   1c3b8:	call   be90 <__getdelim@plt>
   1c3bd:	test   eax,eax
   1c3bf:	jle    1cfd0 <ftp_parse_ls_fp+0xdd0>
   1c3c5:	mov    rdi,QWORD PTR [rsp+0x48]
   1c3ca:	mov    esi,eax
   1c3cc:	call   1b650 <clean_line.part.0>
   1c3d1:	mov    ebx,eax
   1c3d3:	cmp    eax,0x27
   1c3d6:	jle    1c3a8 <ftp_parse_ls_fp+0x1a8>
   1c3d8:	mov    rbp,QWORD PTR [rsp+0x48]
   1c3dd:	lea    rsi,[rip+0x520c1]        # 6e4a5 <urlchr_table+0x905>
   1c3e4:	mov    rdi,rbp
   1c3e7:	lea    r12,[rbp+0x27]
   1c3eb:	call   c840 <strtok@plt>
   1c3f0:	mov    rdi,rax
   1c3f3:	test   rax,rax
   1c3f6:	je     1c3a8 <ftp_parse_ls_fp+0x1a8>
   1c3f8:	xor    esi,esi
   1c3fa:	mov    edx,0xa
   1c3ff:	call   c5a0 <strtol@plt>
   1c404:	lea    rsi,[rip+0x5209a]        # 6e4a5 <urlchr_table+0x905>
   1c40b:	test   eax,eax
   1c40d:	lea    edx,[rax-0x1]
   1c410:	mov    eax,0x0
   1c415:	cmovns eax,edx
   1c418:	xor    edi,edi
   1c41a:	mov    DWORD PTR [rsp+0x18],eax
   1c41e:	call   c840 <strtok@plt>
   1c423:	mov    rdi,rax
   1c426:	test   rax,rax
   1c429:	je     1c3a8 <ftp_parse_ls_fp+0x1a8>
   1c42f:	mov    edx,0xa
   1c434:	xor    esi,esi
   1c436:	call   c5a0 <strtol@plt>
   1c43b:	xor    edi,edi
   1c43d:	lea    rsi,[rip+0x49a81]        # 65ec5 <yy_accept+0xe05>
   1c444:	mov    QWORD PTR [rsp+0x28],rax
   1c449:	call   c840 <strtok@plt>
   1c44e:	mov    rdi,rax
   1c451:	test   rax,rax
   1c454:	je     1c3a8 <ftp_parse_ls_fp+0x1a8>
   1c45a:	mov    edx,0xa
   1c45f:	xor    esi,esi
   1c461:	call   c5a0 <strtol@plt>
   1c466:	mov    DWORD PTR [rsp+0x20],eax
   1c46a:	cmp    eax,0x46
   1c46d:	jg     1d008 <ftp_parse_ls_fp+0xe08>
   1c473:	add    eax,0x64
   1c476:	mov    DWORD PTR [rsp+0x20],eax
   1c47a:	mov    rdi,QWORD PTR [rsp+0x10]
   1c47f:	lea    rbx,[rsp+0x90]
   1c487:	call   4bdc0 <rpl_free>
   1c48c:	pxor   xmm0,xmm0
   1c490:	mov    rdi,r12
   1c493:	movaps XMMWORD PTR [rsp+0x90],xmm0
   1c49b:	movaps XMMWORD PTR [rsp+0xa0],xmm0
   1c4a3:	movaps XMMWORD PTR [rsp+0xb0],xmm0
   1c4ab:	movaps XMMWORD PTR [rsp+0xc0],xmm0
   1c4b3:	call   4ba50 <xstrdup>
   1c4b8:	cmp    BYTE PTR [rip+0x6ddfc],0x0        # 8a2bb <opt+0x23b>
   1c4bf:	mov    QWORD PTR [rsp+0x10],rax
   1c4c4:	mov    QWORD PTR [rsp+0x98],rax
   1c4cc:	jne    1d150 <ftp_parse_ls_fp+0xf50>
   1c4d2:	xor    edi,edi
   1c4d4:	lea    rsi,[rip+0x3edf6]        # 5b2d1 <_IO_stdin_used+0x2d1>
   1c4db:	call   c840 <strtok@plt>
   1c4e0:	mov    rdi,rax
   1c4e3:	test   rax,rax
   1c4e6:	je     1c3a8 <ftp_parse_ls_fp+0x1a8>
   1c4ec:	xor    esi,esi
   1c4ee:	mov    edx,0xa
   1c4f3:	call   c5a0 <strtol@plt>
   1c4f8:	xor    edi,edi
   1c4fa:	lea    rsi,[rip+0x4b040]        # 67541 <primes.6089+0x1461>
   1c501:	mov    rbp,rax
   1c504:	call   c840 <strtok@plt>
   1c509:	test   rax,rax
   1c50c:	je     1c3a8 <ftp_parse_ls_fp+0x1a8>
   1c512:	mov    edx,0xa
   1c517:	xor    esi,esi
   1c519:	mov    rdi,rax
   1c51c:	mov    QWORD PTR [rsp+0x38],rax
   1c521:	call   c5a0 <strtol@plt>
   1c526:	mov    rcx,QWORD PTR [rsp+0x38]
   1c52b:	mov    edx,ebp
   1c52d:	mov    r12,rax
   1c530:	movzx  eax,BYTE PTR [rcx]
   1c533:	test   al,al
   1c535:	jne    1d030 <ftp_parse_ls_fp+0xe30>
   1c53b:	cmp    ebp,0xb
   1c53e:	mov    r8d,0x0
   1c544:	cmova  ebp,r8d
   1c548:	cmp    BYTE PTR [rip+0x6dd6c],0x0        # 8a2bb <opt+0x23b>
   1c54f:	jne    1d1bc <ftp_parse_ls_fp+0xfbc>
   1c555:	mov    eax,DWORD PTR [rsp+0x28]
   1c559:	lea    rdi,[rsp+0x50]
   1c55e:	mov    DWORD PTR [rsp+0x54],r12d
   1c563:	mov    DWORD PTR [rsp+0x50],0x0
   1c56b:	mov    DWORD PTR [rsp+0x5c],eax
   1c56f:	mov    eax,DWORD PTR [rsp+0x18]
   1c573:	mov    DWORD PTR [rsp+0x58],ebp
   1c577:	mov    DWORD PTR [rsp+0x60],eax
   1c57b:	mov    eax,DWORD PTR [rsp+0x20]
   1c57f:	mov    QWORD PTR [rsp+0x68],0x0
   1c588:	mov    DWORD PTR [rsp+0x64],eax
   1c58c:	mov    DWORD PTR [rsp+0x70],0xffffffff
   1c594:	call   bec0 <mktime@plt>
   1c599:	cmp    BYTE PTR [rip+0x6dd1b],0x0        # 8a2bb <opt+0x23b>
   1c5a0:	mov    DWORD PTR [rsp+0xb0],0x0
   1c5ab:	mov    QWORD PTR [rsp+0xa8],rax
   1c5b3:	jne    1d1a6 <ftp_parse_ls_fp+0xfa6>
   1c5b9:	lea    rsi,[rip+0x49905]        # 65ec5 <yy_accept+0xe05>
   1c5c0:	xor    edi,edi
   1c5c2:	lea    rbp,[rip+0x498fc]        # 65ec5 <yy_accept+0xe05>
   1c5c9:	call   c840 <strtok@plt>
   1c5ce:	test   rax,rax
   1c5d1:	jne    1c5f3 <ftp_parse_ls_fp+0x3f3>
   1c5d3:	jmp    1c3a8 <ftp_parse_ls_fp+0x1a8>
   1c5d8:	nop    DWORD PTR [rax+rax*1+0x0]
   1c5e0:	xor    edi,edi
   1c5e2:	mov    rsi,rbp
   1c5e5:	call   c840 <strtok@plt>
   1c5ea:	test   rax,rax
   1c5ed:	je     1c3a8 <ftp_parse_ls_fp+0x1a8>
   1c5f3:	movzx  edx,BYTE PTR [rax]
   1c5f6:	test   dl,dl
   1c5f8:	je     1c5e0 <ftp_parse_ls_fp+0x3e0>
   1c5fa:	mov    r12,rax
   1c5fd:	cmp    dl,0x3c
   1c600:	jne    1d0cb <ftp_parse_ls_fp+0xecb>
   1c606:	cmp    BYTE PTR [rip+0x6dcae],0x0        # 8a2bb <opt+0x23b>
   1c60d:	mov    DWORD PTR [rsp+0x90],0x1
   1c618:	mov    QWORD PTR [rsp+0xa0],0x0
   1c624:	mov    DWORD PTR [rsp+0xb4],0x1ed
   1c62f:	jne    1d1e7 <ftp_parse_ls_fp+0xfe7>
   1c635:	mov    QWORD PTR [rsp+0xb8],0x0
   1c641:	test   r15,r15
   1c644:	je     1d166 <ftp_parse_ls_fp+0xf66>
   1c64a:	mov    rbx,QWORD PTR [rsp+0x30]
   1c64f:	mov    edi,0x40
   1c654:	mov    QWORD PTR [rsp+0xc0],rbx
   1c65c:	call   4b850 <xmalloc>
   1c661:	movdqa xmm5,XMMWORD PTR [rsp+0x90]
   1c66a:	movdqa xmm6,XMMWORD PTR [rsp+0xa0]
   1c673:	movdqa xmm7,XMMWORD PTR [rsp+0xb0]
   1c67c:	mov    QWORD PTR [rbx+0x38],rax
   1c680:	movups XMMWORD PTR [rax],xmm5
   1c683:	movdqa xmm5,XMMWORD PTR [rsp+0xc0]
   1c68c:	mov    QWORD PTR [rsp+0x30],rax
   1c691:	movups XMMWORD PTR [rax+0x30],xmm5
   1c695:	mov    QWORD PTR [rax+0x38],0x0
   1c69d:	movups XMMWORD PTR [rax+0x10],xmm6
   1c6a1:	movups XMMWORD PTR [rax+0x20],xmm7
   1c6a5:	mov    QWORD PTR [rsp+0x98],0x0
   1c6b1:	mov    QWORD PTR [rsp+0x10],0x0
   1c6ba:	jmp    1c3a8 <ftp_parse_ls_fp+0x1a8>
   1c6bf:	nop
   1c6c0:	mov    ecx,0x9
   1c6c5:	lea    rdi,[rip+0x49643]        # 65d0f <yy_accept+0xc4f>
   1c6cc:	mov    rsi,r8
   1c6cf:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   1c6d1:	seta   al
   1c6d4:	sbb    al,0x0
   1c6d6:	test   al,al
   1c6d8:	jne    1c700 <ftp_parse_ls_fp+0x500>
   1c6da:	xor    ebp,ebp
   1c6dc:	xor    r15d,r15d
   1c6df:	nop
   1c6e0:	mov    rdi,rbp
   1c6e3:	call   4bdc0 <rpl_free>
   1c6e8:	mov    rdi,QWORD PTR [rsp+0x50]
   1c6ed:	call   4bdc0 <rpl_free>
   1c6f2:	jmp    1c2dd <ftp_parse_ls_fp+0xdd>
   1c6f7:	nop    WORD PTR [rax+rax*1+0x0]
   1c700:	mov    QWORD PTR [rsp+0x18],0x0
   1c709:	xor    r12d,r12d
   1c70c:	xor    r15d,r15d
   1c70f:	mov    rdi,r8
   1c712:	mov    QWORD PTR [rsp+0x98],0x0
   1c71e:	xchg   ax,ax
   1c720:	lea    rsi,[rip+0x4979e]        # 65ec5 <yy_accept+0xe05>
   1c727:	call   c840 <strtok@plt>
   1c72c:	test   rax,rax
   1c72f:	mov    rbp,rax
   1c732:	cmove  rbp,QWORD PTR [rsp+0x50]
   1c738:	cmp    BYTE PTR [rip+0x6db7c],0x0        # 8a2bb <opt+0x23b>
   1c73f:	jne    1cf50 <ftp_parse_ls_fp+0xd50>
   1c745:	mov    rdi,rbp
   1c748:	call   c310 <strlen@plt>
   1c74d:	add    rax,rbp
   1c750:	sub    rax,0x1
   1c754:	cmp    rbp,rax
   1c757:	jae    1c76f <ftp_parse_ls_fp+0x56f>
   1c759:	movsx  edx,BYTE PTR [rax]
   1c75c:	mov    ecx,edx
   1c75e:	sub    edx,0x30
   1c761:	cmp    edx,0x9
   1c764:	jbe    1c750 <ftp_parse_ls_fp+0x550>
   1c766:	cmp    cl,0x3b
   1c769:	je     1cdc8 <ftp_parse_ls_fp+0xbc8>
   1c76f:	movzx  eax,BYTE PTR [rbp+0x0]
   1c773:	mov    rcx,rbp
   1c776:	cmp    al,0x5e
   1c778:	je     1c794 <ftp_parse_ls_fp+0x594>
   1c77a:	test   al,al
   1c77c:	je     1c794 <ftp_parse_ls_fp+0x594>
   1c77e:	xchg   ax,ax
   1c780:	movzx  eax,BYTE PTR [rcx+0x1]
   1c784:	add    rcx,0x1
   1c788:	test   al,al
   1c78a:	je     1c823 <ftp_parse_ls_fp+0x623>
   1c790:	cmp    al,0x5e
   1c792:	jne    1c780 <ftp_parse_ls_fp+0x580>
   1c794:	test   al,al
   1c796:	je     1c823 <ftp_parse_ls_fp+0x623>
   1c79c:	movzx  eax,BYTE PTR [rcx]
   1c79f:	mov    rdi,rcx
   1c7a2:	test   al,al
   1c7a4:	jne    1c7c5 <ftp_parse_ls_fp+0x5c5>
   1c7a6:	jmp    1c820 <ftp_parse_ls_fp+0x620>
   1c7a8:	nop    DWORD PTR [rax+rax*1+0x0]
   1c7b0:	mov    BYTE PTR [rdi],al
   1c7b2:	movzx  eax,BYTE PTR [rcx+0x1]
   1c7b6:	add    rdi,0x1
   1c7ba:	lea    rdx,[rcx+0x1]
   1c7be:	test   al,al
   1c7c0:	je     1c820 <ftp_parse_ls_fp+0x620>
   1c7c2:	mov    rcx,rdx
   1c7c5:	cmp    al,0x5e
   1c7c7:	jne    1c7b0 <ftp_parse_ls_fp+0x5b0>
   1c7c9:	movzx  esi,BYTE PTR [rcx+0x1]
   1c7cd:	lea    rbx,[rip+0x64a6c]        # 81240 <char_prop>
   1c7d4:	mov    rdx,rsi
   1c7d7:	test   BYTE PTR [rbx+rsi*1],0x40
   1c7db:	je     1c7b0 <ftp_parse_ls_fp+0x5b0>
   1c7dd:	movzx  r8d,BYTE PTR [rcx+0x2]
   1c7e2:	mov    rsi,r8
   1c7e5:	test   BYTE PTR [rbx+r8*1],0x40
   1c7ea:	je     1c7b0 <ftp_parse_ls_fp+0x5b0>
   1c7ec:	lea    eax,[rdx-0x30]
   1c7ef:	cmp    dl,0x39
   1c7f2:	jbe    1c7fd <ftp_parse_ls_fp+0x5fd>
   1c7f4:	lea    eax,[rdx-0x41]
   1c7f7:	and    eax,0x7
   1c7fa:	add    eax,0xa
   1c7fd:	movsx  eax,al
   1c800:	add    rcx,0x2
   1c804:	shl    eax,0x4
   1c807:	mov    edx,eax
   1c809:	lea    eax,[rsi+rax*1-0x30]
   1c80d:	cmp    sil,0x39
   1c811:	jbe    1c7b0 <ftp_parse_ls_fp+0x5b0>
   1c813:	sub    esi,0x41
   1c816:	and    esi,0xf
   1c819:	lea    eax,[rsi+rdx*1+0xa]
   1c81d:	jmp    1c7b0 <ftp_parse_ls_fp+0x5b0>
   1c81f:	nop
   1c820:	mov    BYTE PTR [rdi],0x0
   1c823:	cmp    BYTE PTR [rip+0x6da91],0x0        # 8a2bb <opt+0x23b>
   1c82a:	jne    1cf30 <ftp_parse_ls_fp+0xd30>
   1c830:	mov    rdi,rbp
   1c833:	call   c310 <strlen@plt>
   1c838:	mov    rbx,rax
   1c83b:	cmp    eax,0x3
   1c83e:	jle    1c970 <ftp_parse_ls_fp+0x770>
   1c844:	movsxd r13,eax
   1c847:	mov    edx,0x4
   1c84c:	lea    rsi,[rip+0x494ec]        # 65d3f <yy_accept+0xc7f>
   1c853:	lea    rcx,[rbp+r13*1-0x4]
   1c858:	mov    rdi,rcx
   1c85b:	mov    QWORD PTR [rsp+0x20],rcx
   1c860:	call   433b0 <c_strncasecmp>
   1c865:	test   eax,eax
   1c867:	jne    1cb10 <ftp_parse_ls_fp+0x910>
   1c86d:	mov    DWORD PTR [rsp+0x90],0x1
   1c878:	mov    rcx,QWORD PTR [rsp+0x20]
   1c87d:	mov    DWORD PTR [rsp+0xb4],0x1ed
   1c888:	mov    BYTE PTR [rcx],0x0
   1c88b:	cmp    BYTE PTR [rip+0x6da29],0x0        # 8a2bb <opt+0x23b>
   1c892:	jne    1cff0 <ftp_parse_ls_fp+0xdf0>
   1c898:	mov    rdi,r12
   1c89b:	call   4bdc0 <rpl_free>
   1c8a0:	mov    rdi,rbp
   1c8a3:	call   4ba50 <xstrdup>
   1c8a8:	cmp    BYTE PTR [rip+0x6da0c],0x0        # 8a2bb <opt+0x23b>
   1c8af:	mov    QWORD PTR [rsp+0x98],rax
   1c8b7:	mov    r12,rax
   1c8ba:	jne    1cf10 <ftp_parse_ls_fp+0xd10>
   1c8c0:	lea    rsi,[rip+0x495fe]        # 65ec5 <yy_accept+0xe05>
   1c8c7:	xor    edi,edi
   1c8c9:	mov    BYTE PTR [rsp+0xd0],0x0
   1c8d1:	mov    QWORD PTR [rsp+0xb8],0x0
   1c8dd:	mov    QWORD PTR [rsp+0xa0],0x0
   1c8e9:	call   c840 <strtok@plt>
   1c8ee:	mov    rbp,rax
   1c8f1:	test   rax,rax
   1c8f4:	jne    1c9d0 <ftp_parse_ls_fp+0x7d0>
   1c8fa:	cmp    BYTE PTR [rip+0x6d9ba],0x0        # 8a2bb <opt+0x23b>
   1c901:	jne    1cf88 <ftp_parse_ls_fp+0xd88>
   1c907:	mov    rsi,QWORD PTR [rsp+0x8]
   1c90c:	mov    rdi,QWORD PTR [rsp+0x10]
   1c911:	mov    rcx,r14
   1c914:	mov    edx,0xa
   1c919:	call   be90 <__getdelim@plt>
   1c91e:	mov    rsi,rax
   1c921:	test   eax,eax
   1c923:	jle    1d080 <ftp_parse_ls_fp+0xe80>
   1c929:	mov    rdi,QWORD PTR [rsp+0x50]
   1c92e:	call   1b650 <clean_line.part.0>
   1c933:	test   eax,eax
   1c935:	jle    1d0a8 <ftp_parse_ls_fp+0xea8>
   1c93b:	mov    rdi,QWORD PTR [rsp+0x50]
   1c940:	cmp    BYTE PTR [rdi],0x20
   1c943:	je     1c9b0 <ftp_parse_ls_fp+0x7b0>
   1c945:	cmp    BYTE PTR [rip+0x6d96f],0x0        # 8a2bb <opt+0x23b>
   1c94c:	je     1c720 <ftp_parse_ls_fp+0x520>
   1c952:	lea    rdi,[rip+0x496a7]        # 66000 <yy_accept+0xf40>
   1c959:	xor    eax,eax
   1c95b:	call   2e250 <debug_logprintf>
   1c960:	mov    rdi,QWORD PTR [rsp+0x50]
   1c965:	jmp    1c720 <ftp_parse_ls_fp+0x520>
   1c96a:	nop    WORD PTR [rax+rax*1+0x0]
   1c970:	cmp    BYTE PTR [rip+0x6d944],0x0        # 8a2bb <opt+0x23b>
   1c977:	mov    DWORD PTR [rsp+0x90],0x0
   1c982:	mov    DWORD PTR [rsp+0xb4],0x1a4
   1c98d:	je     1c898 <ftp_parse_ls_fp+0x698>
   1c993:	lea    rdi,[rip+0x3ec72]        # 5b60c <_IO_stdin_used+0x60c>
   1c99a:	xor    eax,eax
   1c99c:	call   2e250 <debug_logprintf>
   1c9a1:	jmp    1c898 <ftp_parse_ls_fp+0x698>
   1c9a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1c9b0:	lea    rsi,[rip+0x4950e]        # 65ec5 <yy_accept+0xe05>
   1c9b7:	call   c840 <strtok@plt>
   1c9bc:	mov    rbp,rax
   1c9bf:	test   rax,rax
   1c9c2:	je     1d055 <ftp_parse_ls_fp+0xe55>
   1c9c8:	nop    DWORD PTR [rax+rax*1+0x0]
   1c9d0:	lea    r12,[rsp+0xd0]
   1c9d8:	jmp    1ca18 <ftp_parse_ls_fp+0x818>
   1c9da:	nop    WORD PTR [rax+rax*1+0x0]
   1c9e0:	mov    esi,0x5b
   1c9e5:	mov    rdi,rbp
   1c9e8:	call   c6c0 <strchr@plt>
   1c9ed:	test   rax,rax
   1c9f0:	je     1ccd0 <ftp_parse_ls_fp+0xad0>
   1c9f6:	test   bl,bl
   1c9f8:	jne    1ce58 <ftp_parse_ls_fp+0xc58>
   1c9fe:	lea    rsi,[rip+0x494c0]        # 65ec5 <yy_accept+0xe05>
   1ca05:	xor    edi,edi
   1ca07:	call   c840 <strtok@plt>
   1ca0c:	mov    rbp,rax
   1ca0f:	test   rax,rax
   1ca12:	je     1cb78 <ftp_parse_ls_fp+0x978>
   1ca18:	movzx  ebx,BYTE PTR [rip+0x6d89c]        # 8a2bb <opt+0x23b>
   1ca1f:	test   bl,bl
   1ca21:	jne    1ca78 <ftp_parse_ls_fp+0x878>
   1ca23:	mov    rdi,rbp
   1ca26:	call   c310 <strlen@plt>
   1ca2b:	mov    r13,rax
   1ca2e:	cmp    rax,0xb
   1ca32:	ja     1c9e0 <ftp_parse_ls_fp+0x7e0>
   1ca34:	mov    esi,0x2d
   1ca39:	mov    rdi,rbp
   1ca3c:	call   c6c0 <strchr@plt>
   1ca41:	test   rax,rax
   1ca44:	je     1ca98 <ftp_parse_ls_fp+0x898>
   1ca46:	test   bl,bl
   1ca48:	jne    1ce40 <ftp_parse_ls_fp+0xc40>
   1ca4e:	mov    r9,rbp
   1ca51:	lea    r8,[rip+0x49341]        # 65d99 <yy_accept+0xcd9>
   1ca58:	mov    rdi,r12
   1ca5b:	xor    eax,eax
   1ca5d:	mov    ecx,0x20
   1ca62:	mov    edx,0x1
   1ca67:	mov    esi,0x20
   1ca6c:	call   c9d0 <__snprintf_chk@plt>
   1ca71:	jmp    1c9fe <ftp_parse_ls_fp+0x7fe>
   1ca73:	nop    DWORD PTR [rax+rax*1+0x0]
   1ca78:	mov    rsi,rbp
   1ca7b:	lea    rdi,[rip+0x49302]        # 65d84 <yy_accept+0xcc4>
   1ca82:	xor    eax,eax
   1ca84:	call   2e250 <debug_logprintf>
   1ca89:	movzx  ebx,BYTE PTR [rip+0x6d82b]        # 8a2bb <opt+0x23b>
   1ca90:	jmp    1ca23 <ftp_parse_ls_fp+0x823>
   1ca92:	nop    WORD PTR [rax+rax*1+0x0]
   1ca98:	mov    esi,0x3a
   1ca9d:	mov    rdi,rbp
   1caa0:	call   c6c0 <strchr@plt>
   1caa5:	test   rax,rax
   1caa8:	je     1c9e0 <ftp_parse_ls_fp+0x7e0>
   1caae:	mov    rdx,r12
   1cab1:	test   bl,bl
   1cab3:	jne    1ce80 <ftp_parse_ls_fp+0xc80>
   1cab9:	mov    ecx,DWORD PTR [rdx]
   1cabb:	add    rdx,0x4
   1cabf:	lea    eax,[rcx-0x1010101]
   1cac5:	not    ecx
   1cac7:	and    eax,ecx
   1cac9:	and    eax,0x80808080
   1cace:	je     1cab9 <ftp_parse_ls_fp+0x8b9>
   1cad0:	mov    ecx,eax
   1cad2:	mov    rsi,rbp
   1cad5:	mov    rdi,r12
   1cad8:	shr    ecx,0x10
   1cadb:	test   eax,0x8080
   1cae0:	cmove  eax,ecx
   1cae3:	lea    rcx,[rdx+0x2]
   1cae7:	cmove  rdx,rcx
   1caeb:	mov    ecx,0x20
   1caf0:	mov    ebx,eax
   1caf2:	add    bl,al
   1caf4:	mov    eax,0x1f
   1caf9:	sbb    rdx,0x3
   1cafd:	sub    rdx,r12
   1cb00:	sub    rax,rdx
   1cb03:	mov    rdx,rax
   1cb06:	call   cb90 <__strncat_chk@plt>
   1cb0b:	jmp    1c9fe <ftp_parse_ls_fp+0x7fe>
   1cb10:	cmp    ebx,0x5
   1cb13:	jle    1c970 <ftp_parse_ls_fp+0x770>
   1cb19:	lea    rbx,[rbp+r13*1-0x6]
   1cb1e:	mov    edx,0x6
   1cb23:	lea    rsi,[rip+0x4922a]        # 65d54 <yy_accept+0xc94>
   1cb2a:	mov    rdi,rbx
   1cb2d:	call   433b0 <c_strncasecmp>
   1cb32:	test   eax,eax
   1cb34:	jne    1c970 <ftp_parse_ls_fp+0x770>
   1cb3a:	mov    BYTE PTR [rbx],0x0
   1cb3d:	cmp    BYTE PTR [rip+0x6d777],0x0        # 8a2bb <opt+0x23b>
   1cb44:	mov    DWORD PTR [rsp+0x90],0x1
   1cb4f:	mov    DWORD PTR [rsp+0xb4],0x1ed
   1cb5a:	je     1c898 <ftp_parse_ls_fp+0x698>
   1cb60:	lea    rdi,[rip+0x491f4]        # 65d5b <yy_accept+0xc9b>
   1cb67:	call   2e250 <debug_logprintf>
   1cb6c:	jmp    1c898 <ftp_parse_ls_fp+0x698>
   1cb71:	nop    DWORD PTR [rax+0x0]
   1cb78:	xor    edi,edi
   1cb7a:	call   cbf0 <time@plt>
   1cb7f:	lea    rdi,[rsp+0x48]
   1cb84:	mov    QWORD PTR [rsp+0x48],rax
   1cb89:	call   caa0 <localtime@plt>
   1cb8e:	lea    rsi,[rip+0x4924f]        # 65de4 <yy_accept+0xd24>
   1cb95:	mov    rdi,r12
   1cb98:	mov    rdx,rax
   1cb9b:	mov    r13,rax
   1cb9e:	call   c6a0 <strptime@plt>
   1cba3:	mov    rdi,r13
   1cba6:	call   bec0 <mktime@plt>
   1cbab:	lea    rdi,[rip+0x49244]        # 65df6 <yy_accept+0xd36>
   1cbb2:	mov    QWORD PTR [rsp+0x48],rax
   1cbb7:	call   c720 <getenv@plt>
   1cbbc:	mov    rdi,rax
   1cbbf:	test   rax,rax
   1cbc2:	je     1cda8 <ftp_parse_ls_fp+0xba8>
   1cbc8:	mov    edx,0xa
   1cbcd:	xor    esi,esi
   1cbcf:	call   c5a0 <strtol@plt>
   1cbd4:	mov    rbx,rax
   1cbd7:	movzx  eax,BYTE PTR [rip+0x6d6dd]        # 8a2bb <opt+0x23b>
   1cbde:	test   al,al
   1cbe0:	jne    1cfa0 <ftp_parse_ls_fp+0xda0>
   1cbe6:	mov    rsi,QWORD PTR [rsp+0x48]
   1cbeb:	test   ebx,ebx
   1cbed:	js     1ce70 <ftp_parse_ls_fp+0xc70>
   1cbf3:	movsxd rbx,ebx
   1cbf6:	add    rsi,rbx
   1cbf9:	mov    QWORD PTR [rsp+0x48],rsi
   1cbfe:	mov    QWORD PTR [rsp+0xa8],rsi
   1cc06:	test   al,al
   1cc08:	jne    1cf70 <ftp_parse_ls_fp+0xd70>
   1cc0e:	mov    DWORD PTR [rsp+0xb0],0x0
   1cc19:	test   r15,r15
   1cc1c:	je     1cde0 <ftp_parse_ls_fp+0xbe0>
   1cc22:	mov    r13,QWORD PTR [rsp+0x18]
   1cc27:	mov    edi,0x40
   1cc2c:	mov    QWORD PTR [rsp+0xc8],0x0
   1cc38:	mov    QWORD PTR [rsp+0xc0],r13
   1cc40:	call   4b850 <xmalloc>
   1cc45:	movdqa xmm1,XMMWORD PTR [rsp+0x90]
   1cc4e:	movdqa xmm2,XMMWORD PTR [rsp+0xa0]
   1cc57:	movdqa xmm3,XMMWORD PTR [rsp+0xb0]
   1cc60:	mov    QWORD PTR [r13+0x38],rax
   1cc64:	mov    rbx,rax
   1cc67:	movdqa xmm4,XMMWORD PTR [rsp+0xc0]
   1cc70:	movups XMMWORD PTR [rax],xmm1
   1cc73:	movups XMMWORD PTR [rax+0x10],xmm2
   1cc77:	movups XMMWORD PTR [rax+0x20],xmm3
   1cc7b:	movups XMMWORD PTR [rax+0x30],xmm4
   1cc7f:	mov    rsi,QWORD PTR [rsp+0x8]
   1cc84:	mov    rdi,QWORD PTR [rsp+0x10]
   1cc89:	mov    rcx,r14
   1cc8c:	mov    edx,0xa
   1cc91:	mov    QWORD PTR [rsp+0x98],0x0
   1cc9d:	call   be90 <__getdelim@plt>
   1cca2:	test   eax,eax
   1cca4:	jle    1c6e0 <ftp_parse_ls_fp+0x4e0>
   1ccaa:	mov    rdi,QWORD PTR [rsp+0x50]
   1ccaf:	mov    esi,eax
   1ccb1:	call   1b650 <clean_line.part.0>
   1ccb6:	test   eax,eax
   1ccb8:	jle    1c6e0 <ftp_parse_ls_fp+0x4e0>
   1ccbe:	mov    QWORD PTR [rsp+0x18],rbx
   1ccc3:	mov    rdi,QWORD PTR [rsp+0x50]
   1ccc8:	xor    r12d,r12d
   1cccb:	jmp    1c720 <ftp_parse_ls_fp+0x520>
   1ccd0:	mov    esi,0x28
   1ccd5:	mov    rdi,rbp
   1ccd8:	call   c6c0 <strchr@plt>
   1ccdd:	test   rax,rax
   1cce0:	jne    1cd00 <ftp_parse_ls_fp+0xb00>
   1cce2:	test   bl,bl
   1cce4:	je     1c9fe <ftp_parse_ls_fp+0x7fe>
   1ccea:	lea    rdi,[rip+0x490e1]        # 65dd2 <yy_accept+0xd12>
   1ccf1:	xor    eax,eax
   1ccf3:	call   2e250 <debug_logprintf>
   1ccf8:	jmp    1c9fe <ftp_parse_ls_fp+0x7fe>
   1ccfd:	nop    DWORD PTR [rax]
   1cd00:	test   r13d,r13d
   1cd03:	jle    1cfc0 <ftp_parse_ls_fp+0xdc0>
   1cd09:	lea    eax,[r13-0x1]
   1cd0d:	xor    esi,esi
   1cd0f:	lea    rcx,[rbp+rax*1+0x1]
   1cd14:	xor    eax,eax
   1cd16:	jmp    1cd36 <ftp_parse_ls_fp+0xb36>
   1cd18:	nop    DWORD PTR [rax+rax*1+0x0]
   1cd20:	cmp    dl,0x2c
   1cd23:	je     1cd50 <ftp_parse_ls_fp+0xb50>
   1cd25:	cmp    dl,0x44
   1cd28:	jne    1cd2d <ftp_parse_ls_fp+0xb2d>
   1cd2a:	or     esi,0x2
   1cd2d:	add    rbp,0x1
   1cd31:	cmp    rcx,rbp
   1cd34:	je     1cd70 <ftp_parse_ls_fp+0xb70>
   1cd36:	movzx  edx,BYTE PTR [rbp+0x0]
   1cd3a:	cmp    dl,0x45
   1cd3d:	je     1cda0 <ftp_parse_ls_fp+0xba0>
   1cd3f:	jle    1cd20 <ftp_parse_ls_fp+0xb20>
   1cd41:	cmp    dl,0x52
   1cd44:	je     1cd98 <ftp_parse_ls_fp+0xb98>
   1cd46:	cmp    dl,0x57
   1cd49:	je     1cd2a <ftp_parse_ls_fp+0xb2a>
   1cd4b:	jmp    1cd2d <ftp_parse_ls_fp+0xb2d>
   1cd4d:	nop    DWORD PTR [rax]
   1cd50:	test   eax,eax
   1cd52:	je     1cdc0 <ftp_parse_ls_fp+0xbc0>
   1cd54:	lea    edx,[rsi*8+0x0]
   1cd5b:	cmp    eax,0x4
   1cd5e:	cmovl  esi,edx
   1cd61:	add    rbp,0x1
   1cd65:	add    eax,0x1
   1cd68:	cmp    rcx,rbp
   1cd6b:	jne    1cd36 <ftp_parse_ls_fp+0xb36>
   1cd6d:	nop    DWORD PTR [rax]
   1cd70:	mov    DWORD PTR [rsp+0xb4],esi
   1cd77:	test   bl,bl
   1cd79:	je     1c9fe <ftp_parse_ls_fp+0x7fe>
   1cd7f:	lea    rdi,[rip+0x49037]        # 65dbd <yy_accept+0xcfd>
   1cd86:	xor    eax,eax
   1cd88:	call   2e250 <debug_logprintf>
   1cd8d:	jmp    1c9fe <ftp_parse_ls_fp+0x7fe>
   1cd92:	nop    WORD PTR [rax+rax*1+0x0]
   1cd98:	or     esi,0x4
   1cd9b:	jmp    1cd2d <ftp_parse_ls_fp+0xb2d>
   1cd9d:	nop    DWORD PTR [rax]
   1cda0:	or     esi,0x1
   1cda3:	jmp    1cd2d <ftp_parse_ls_fp+0xb2d>
   1cda5:	nop    DWORD PTR [rax]
   1cda8:	mov    rsi,QWORD PTR [rsp+0x48]
   1cdad:	movzx  eax,BYTE PTR [rip+0x6d507]        # 8a2bb <opt+0x23b>
   1cdb4:	jmp    1cbf9 <ftp_parse_ls_fp+0x9f9>
   1cdb9:	nop    DWORD PTR [rax+0x0]
   1cdc0:	xor    esi,esi
   1cdc2:	jmp    1cd61 <ftp_parse_ls_fp+0xb61>
   1cdc4:	nop    DWORD PTR [rax+0x0]
   1cdc8:	cmp    BYTE PTR [rax-0x1],0x5e
   1cdcc:	je     1c76f <ftp_parse_ls_fp+0x56f>
   1cdd2:	mov    BYTE PTR [rax],0x0
   1cdd5:	jmp    1c76f <ftp_parse_ls_fp+0x56f>
   1cdda:	nop    WORD PTR [rax+rax*1+0x0]
   1cde0:	mov    edi,0x40
   1cde5:	call   4b850 <xmalloc>
   1cdea:	mov    QWORD PTR [rsp+0xc8],0x0
   1cdf6:	movdqa xmm5,XMMWORD PTR [rsp+0x90]
   1cdff:	movdqa xmm6,XMMWORD PTR [rsp+0xa0]
   1ce08:	mov    r15,rax
   1ce0b:	mov    rbx,rax
   1ce0e:	mov    QWORD PTR [rsp+0xc0],0x0
   1ce1a:	movdqa xmm7,XMMWORD PTR [rsp+0xb0]
   1ce23:	movups XMMWORD PTR [rax],xmm5
   1ce26:	movdqa xmm0,XMMWORD PTR [rsp+0xc0]
   1ce2f:	movups XMMWORD PTR [rax+0x10],xmm6
   1ce33:	movups XMMWORD PTR [rax+0x20],xmm7
   1ce37:	movups XMMWORD PTR [rax+0x30],xmm0
   1ce3b:	jmp    1cc7f <ftp_parse_ls_fp+0xa7f>
   1ce40:	lea    rdi,[rip+0x48f4b]        # 65d92 <yy_accept+0xcd2>
   1ce47:	xor    eax,eax
   1ce49:	call   2e250 <debug_logprintf>
   1ce4e:	jmp    1ca4e <ftp_parse_ls_fp+0x84e>
   1ce53:	nop    DWORD PTR [rax+rax*1+0x0]
   1ce58:	lea    rdi,[rip+0x48f56]        # 65db5 <yy_accept+0xcf5>
   1ce5f:	xor    eax,eax
   1ce61:	call   2e250 <debug_logprintf>
   1ce66:	jmp    1c9fe <ftp_parse_ls_fp+0x7fe>
   1ce6b:	nop    DWORD PTR [rax+rax*1+0x0]
   1ce70:	neg    ebx
   1ce72:	movsxd rdx,ebx
   1ce75:	sub    rsi,rdx
   1ce78:	jmp    1cbf9 <ftp_parse_ls_fp+0x9f9>
   1ce7d:	nop    DWORD PTR [rax]
   1ce80:	lea    rdi,[rip+0x48f16]        # 65d9d <yy_accept+0xcdd>
   1ce87:	xor    eax,eax
   1ce89:	call   2e250 <debug_logprintf>
   1ce8e:	movzx  ebx,BYTE PTR [rip+0x6d426]        # 8a2bb <opt+0x23b>
   1ce95:	mov    rdx,r12
   1ce98:	mov    ecx,DWORD PTR [rdx]
   1ce9a:	add    rdx,0x4
   1ce9e:	lea    eax,[rcx-0x1010101]
   1cea4:	not    ecx
   1cea6:	and    eax,ecx
   1cea8:	and    eax,0x80808080
   1cead:	je     1ce98 <ftp_parse_ls_fp+0xc98>
   1ceaf:	mov    ecx,eax
   1ceb1:	mov    rsi,rbp
   1ceb4:	mov    rdi,r12
   1ceb7:	shr    ecx,0x10
   1ceba:	test   eax,0x8080
   1cebf:	cmove  eax,ecx
   1cec2:	lea    rcx,[rdx+0x2]
   1cec6:	cmove  rdx,rcx
   1ceca:	mov    ecx,eax
   1cecc:	add    cl,al
   1cece:	mov    eax,0x1f
   1ced3:	mov    ecx,0x20
   1ced8:	sbb    rdx,0x3
   1cedc:	sub    rdx,r12
   1cedf:	sub    rax,rdx
   1cee2:	mov    rdx,rax
   1cee5:	call   cb90 <__strncat_chk@plt>
   1ceea:	test   bl,bl
   1ceec:	je     1c9fe <ftp_parse_ls_fp+0x7fe>
   1cef2:	mov    rsi,r12
   1cef5:	lea    rdi,[rip+0x48ea8]        # 65da4 <yy_accept+0xce4>
   1cefc:	xor    eax,eax
   1cefe:	call   2e250 <debug_logprintf>
   1cf03:	jmp    1c9fe <ftp_parse_ls_fp+0x7fe>
   1cf08:	nop    DWORD PTR [rax+rax*1+0x0]
   1cf10:	mov    rsi,rax
   1cf13:	lea    rdi,[rip+0x48db9]        # 65cd3 <yy_accept+0xc13>
   1cf1a:	xor    eax,eax
   1cf1c:	call   2e250 <debug_logprintf>
   1cf21:	jmp    1c8c0 <ftp_parse_ls_fp+0x6c0>
   1cf26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1cf30:	mov    rsi,rbp
   1cf33:	lea    rdi,[rip+0x48df2]        # 65d2c <yy_accept+0xc6c>
   1cf3a:	xor    eax,eax
   1cf3c:	call   2e250 <debug_logprintf>
   1cf41:	jmp    1c830 <ftp_parse_ls_fp+0x630>
   1cf46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1cf50:	mov    rsi,rbp
   1cf53:	lea    rdi,[rip+0x48dbf]        # 65d19 <yy_accept+0xc59>
   1cf5a:	xor    eax,eax
   1cf5c:	call   2e250 <debug_logprintf>
   1cf61:	jmp    1c745 <ftp_parse_ls_fp+0x545>
   1cf66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1cf70:	lea    rdi,[rip+0x48d68]        # 65cdf <yy_accept+0xc1f>
   1cf77:	xor    eax,eax
   1cf79:	call   2e250 <debug_logprintf>
   1cf7e:	jmp    1cc0e <ftp_parse_ls_fp+0xa0e>
   1cf83:	nop    DWORD PTR [rax+rax*1+0x0]
   1cf88:	lea    rdi,[rip+0x48ddb]        # 65d6a <yy_accept+0xcaa>
   1cf8f:	xor    eax,eax
   1cf91:	call   2e250 <debug_logprintf>
   1cf96:	jmp    1c907 <ftp_parse_ls_fp+0x707>
   1cf9b:	nop    DWORD PTR [rax+rax*1+0x0]
   1cfa0:	xor    eax,eax
   1cfa2:	mov    esi,ebx
   1cfa4:	lea    rdi,[rip+0x48e66]        # 65e11 <yy_accept+0xd51>
   1cfab:	call   2e250 <debug_logprintf>
   1cfb0:	movzx  eax,BYTE PTR [rip+0x6d304]        # 8a2bb <opt+0x23b>
   1cfb7:	jmp    1cbe6 <ftp_parse_ls_fp+0x9e6>
   1cfbc:	nop    DWORD PTR [rax+0x0]
   1cfc0:	xor    esi,esi
   1cfc2:	jmp    1cd70 <ftp_parse_ls_fp+0xb70>
   1cfc7:	nop    WORD PTR [rax+rax*1+0x0]
   1cfd0:	mov    rdi,QWORD PTR [rsp+0x10]
   1cfd5:	call   4bdc0 <rpl_free>
   1cfda:	mov    rdi,QWORD PTR [rsp+0x48]
   1cfdf:	call   4bdc0 <rpl_free>
   1cfe4:	jmp    1c2dd <ftp_parse_ls_fp+0xdd>
   1cfe9:	nop    DWORD PTR [rax+0x0]
   1cff0:	lea    rdi,[rip+0x48d4d]        # 65d44 <yy_accept+0xc84>
   1cff7:	call   2e250 <debug_logprintf>
   1cffc:	jmp    1c898 <ftp_parse_ls_fp+0x698>
   1d001:	nop    DWORD PTR [rax+0x0]
   1d008:	cmp    eax,0x76b
   1d00d:	jle    1c47a <ftp_parse_ls_fp+0x27a>
   1d013:	cmp    ebx,0x29
   1d016:	jle    1c3a8 <ftp_parse_ls_fp+0x1a8>
   1d01c:	sub    eax,0x76c
   1d021:	lea    r12,[rbp+0x29]
   1d025:	mov    DWORD PTR [rsp+0x20],eax
   1d029:	jmp    1c47a <ftp_parse_ls_fp+0x27a>
   1d02e:	xchg   ax,ax
   1d030:	cmp    BYTE PTR [rcx+0x1],0x0
   1d034:	je     1d03a <ftp_parse_ls_fp+0xe3a>
   1d036:	movzx  eax,BYTE PTR [rcx+0x2]
   1d03a:	cmp    edx,0xc
   1d03d:	mov    edx,0x0
   1d042:	cmovae rbp,rdx
   1d046:	cmp    al,0x50
   1d048:	lea    r8d,[rbp+0xc]
   1d04c:	cmove  ebp,r8d
   1d050:	jmp    1c548 <ftp_parse_ls_fp+0x348>
   1d055:	cmp    BYTE PTR [rip+0x6d25f],0x0        # 8a2bb <opt+0x23b>
   1d05c:	mov    rbp,r12
   1d05f:	je     1c6e0 <ftp_parse_ls_fp+0x4e0>
   1d065:	lea    rdi,[rip+0x48fcc]        # 66038 <yy_accept+0xf78>
   1d06c:	xor    eax,eax
   1d06e:	call   2e250 <debug_logprintf>
   1d073:	jmp    1c6e0 <ftp_parse_ls_fp+0x4e0>
   1d078:	nop    DWORD PTR [rax+rax*1+0x0]
   1d080:	cmp    BYTE PTR [rip+0x6d234],0x0        # 8a2bb <opt+0x23b>
   1d087:	mov    rbp,r12
   1d08a:	je     1c6e0 <ftp_parse_ls_fp+0x4e0>
   1d090:	lea    rdi,[rip+0x48f21]        # 65fb8 <yy_accept+0xef8>
   1d097:	xor    eax,eax
   1d099:	call   2e250 <debug_logprintf>
   1d09e:	jmp    1c6e0 <ftp_parse_ls_fp+0x4e0>
   1d0a3:	nop    DWORD PTR [rax+rax*1+0x0]
   1d0a8:	cmp    BYTE PTR [rip+0x6d20c],0x0        # 8a2bb <opt+0x23b>
   1d0af:	mov    rbp,r12
   1d0b2:	je     1c6e0 <ftp_parse_ls_fp+0x4e0>
   1d0b8:	lea    rdi,[rip+0x48f19]        # 65fd8 <yy_accept+0xf18>
   1d0bf:	xor    eax,eax
   1d0c1:	call   2e250 <debug_logprintf>
   1d0c6:	jmp    1c6e0 <ftp_parse_ls_fp+0x4e0>
   1d0cb:	mov    DWORD PTR [rsp+0x90],0x0
   1d0d6:	call   c740 <__errno_location@plt>
   1d0db:	mov    edx,0xa
   1d0e0:	xor    esi,esi
   1d0e2:	mov    rdi,r12
   1d0e5:	mov    DWORD PTR [rax],0x0
   1d0eb:	mov    rbp,rax
   1d0ee:	call   c5a0 <strtol@plt>
   1d0f3:	movabs rcx,0x7fffffffffffffff
   1d0fd:	cmp    rax,rcx
   1d100:	jne    1d10f <ftp_parse_ls_fp+0xf0f>
   1d102:	cmp    DWORD PTR [rbp+0x0],0x22
   1d106:	mov    eax,0x0
   1d10b:	cmovne rax,rcx
   1d10f:	cmp    BYTE PTR [rip+0x6d1a5],0x0        # 8a2bb <opt+0x23b>
   1d116:	mov    QWORD PTR [rsp+0xa0],rax
   1d11e:	mov    DWORD PTR [rsp+0xb4],0x1a4
   1d129:	je     1c635 <ftp_parse_ls_fp+0x435>
   1d12f:	mov    rdi,rax
   1d132:	call   3e8e0 <number_to_static_string>
   1d137:	lea    rdi,[rip+0x48bbc]        # 65cfa <yy_accept+0xc3a>
   1d13e:	mov    rsi,rax
   1d141:	xor    eax,eax
   1d143:	call   2e250 <debug_logprintf>
   1d148:	jmp    1c635 <ftp_parse_ls_fp+0x435>
   1d14d:	nop    DWORD PTR [rax]
   1d150:	mov    rsi,rax
   1d153:	lea    rdi,[rip+0x48b79]        # 65cd3 <yy_accept+0xc13>
   1d15a:	xor    eax,eax
   1d15c:	call   2e250 <debug_logprintf>
   1d161:	jmp    1c4d2 <ftp_parse_ls_fp+0x2d2>
   1d166:	mov    edi,0x40
   1d16b:	call   4b850 <xmalloc>
   1d170:	movdqa xmm6,XMMWORD PTR [rbx]
   1d174:	movdqa xmm7,XMMWORD PTR [rbx+0x10]
   1d179:	mov    QWORD PTR [rax+0x38],0x0
   1d181:	mov    r15,rax
   1d184:	movups XMMWORD PTR [rax],xmm6
   1d187:	movdqa xmm6,XMMWORD PTR [rbx+0x20]
   1d18c:	mov    QWORD PTR [rax+0x30],0x0
   1d194:	mov    QWORD PTR [rsp+0x30],rax
   1d199:	movups XMMWORD PTR [rax+0x10],xmm7
   1d19d:	movups XMMWORD PTR [rax+0x20],xmm6
   1d1a1:	jmp    1c6a5 <ftp_parse_ls_fp+0x4a5>
   1d1a6:	mov    rsi,rax
   1d1a9:	lea    rdi,[rip+0x48b2f]        # 65cdf <yy_accept+0xc1f>
   1d1b0:	xor    eax,eax
   1d1b2:	call   2e250 <debug_logprintf>
   1d1b7:	jmp    1c5b9 <ftp_parse_ls_fp+0x3b9>
   1d1bc:	mov    eax,DWORD PTR [rsp+0x20]
   1d1c0:	mov    ecx,DWORD PTR [rsp+0x28]
   1d1c4:	mov    r9d,r12d
   1d1c7:	mov    r8d,ebp
   1d1ca:	mov    edx,DWORD PTR [rsp+0x18]
   1d1ce:	lea    rdi,[rip+0x48db3]        # 65f88 <yy_accept+0xec8>
   1d1d5:	lea    esi,[rax+0x76c]
   1d1db:	xor    eax,eax
   1d1dd:	call   2e250 <debug_logprintf>
   1d1e2:	jmp    1c555 <ftp_parse_ls_fp+0x355>
   1d1e7:	lea    rdi,[rip+0x48b01]        # 65cef <yy_accept+0xc2f>
   1d1ee:	xor    eax,eax
   1d1f0:	call   2e250 <debug_logprintf>
   1d1f5:	jmp    1c635 <ftp_parse_ls_fp+0x435>
   1d1fa:	call   c7b0 <__stack_chk_fail@plt>
   1d1ff:	nop

000000000001d200 <ftp_parse_ls>:
   1d200:	endbr64 
   1d204:	push   r13
   1d206:	mov    r13d,esi
   1d209:	lea    rsi,[rip+0x48c1a]        # 65e2a <yy_accept+0xd6a>
   1d210:	push   r12
   1d212:	mov    r12,rdi
   1d215:	push   rbp
   1d216:	call   c0f0 <fopen@plt>
   1d21b:	test   rax,rax
   1d21e:	je     1d248 <ftp_parse_ls+0x48>
   1d220:	mov    rbp,rax
   1d223:	mov    rdi,rax
   1d226:	mov    esi,r13d
   1d229:	call   1c200 <ftp_parse_ls_fp>
   1d22e:	mov    rdi,rbp
   1d231:	mov    r12,rax
   1d234:	call   c8b0 <fclose@plt>
   1d239:	mov    rax,r12
   1d23c:	pop    rbp
   1d23d:	pop    r12
   1d23f:	pop    r13
   1d241:	ret    
   1d242:	nop    WORD PTR [rax+rax*1+0x0]
   1d248:	call   c740 <__errno_location@plt>
   1d24d:	mov    edi,DWORD PTR [rax]
   1d24f:	call   c540 <strerror@plt>
   1d254:	mov    rdx,r12
   1d257:	mov    edi,0x1
   1d25c:	xor    r12d,r12d
   1d25f:	mov    rcx,rax
   1d262:	lea    rsi,[rip+0x4b5dc]        # 68845 <primes.6089+0x2765>
   1d269:	xor    eax,eax
   1d26b:	call   2e0a0 <logprintf>
   1d270:	jmp    1d239 <ftp_parse_ls+0x39>
   1d272:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1d27d:	nop    DWORD PTR [rax]

000000000001d280 <ftp_index>:
   1d280:	endbr64 
   1d284:	push   r15
   1d286:	push   r14
   1d288:	push   r13
   1d28a:	push   r12
   1d28c:	mov    r12,rsi
   1d28f:	push   rbp
   1d290:	push   rbx
   1d291:	mov    rbx,rdx
   1d294:	sub    rsp,0x38
   1d298:	mov    rbp,QWORD PTR [rip+0x6d1a1]        # 8a440 <output_stream>
   1d29f:	mov    rax,QWORD PTR fs:0x28
   1d2a8:	mov    QWORD PTR [rsp+0x28],rax
   1d2ad:	xor    eax,eax
   1d2af:	test   rbp,rbp
   1d2b2:	je     1d7b0 <ftp_index+0x530>
   1d2b8:	mov    rdi,QWORD PTR [r12+0x50]
   1d2bd:	test   rdi,rdi
   1d2c0:	je     1d788 <ftp_index+0x508>
   1d2c6:	call   37110 <url_escape>
   1d2cb:	mov    rdi,QWORD PTR [r12+0x58]
   1d2d0:	mov    r13,rax
   1d2d3:	test   rdi,rdi
   1d2d6:	je     1d650 <ftp_index+0x3d0>
   1d2dc:	call   37110 <url_escape>
   1d2e1:	mov    r14,rax
   1d2e4:	test   rax,rax
   1d2e7:	je     1d650 <ftp_index+0x3d0>
   1d2ed:	mov    rdx,rax
   1d2f0:	xor    r8d,r8d
   1d2f3:	lea    rcx,[rip+0x3e572]        # 5b86c <_IO_stdin_used+0x86c>
   1d2fa:	mov    rdi,r13
   1d2fd:	lea    rsi,[rip+0x3dfcd]        # 5b2d1 <_IO_stdin_used+0x2d1>
   1d304:	xor    eax,eax
   1d306:	call   3bbd0 <concat_strings>
   1d30b:	mov    QWORD PTR [rsp+0x8],rax
   1d310:	mov    rdi,r13
   1d313:	call   4bdc0 <rpl_free>
   1d318:	mov    rdi,r14
   1d31b:	call   4bdc0 <rpl_free>
   1d320:	mov    rdi,QWORD PTR [r12+0x40]
   1d325:	call   10630 <html_quote_string>
   1d32a:	mov    rcx,rbp
   1d32d:	mov    edx,0x33
   1d332:	mov    esi,0x1
   1d337:	lea    rdi,[rip+0x48d5a]        # 66098 <yy_accept+0xfd8>
   1d33e:	mov    r15,rax
   1d341:	call   ca10 <fwrite@plt>
   1d346:	mov    rcx,rbp
   1d349:	mov    edx,0x15
   1d34e:	mov    esi,0x1
   1d353:	lea    rdi,[rip+0x48ad9]        # 65e33 <yy_accept+0xd73>
   1d35a:	call   ca10 <fwrite@plt>
   1d35f:	mov    r14d,DWORD PTR [r12+0x18]
   1d364:	mov    r13,QWORD PTR [r12+0x10]
   1d369:	xor    edi,edi
   1d36b:	mov    edx,0x5
   1d370:	lea    rsi,[rip+0x48ad2]        # 65e49 <yy_accept+0xd89>
   1d377:	call   c780 <dcgettext@plt>
   1d37c:	mov    r9d,r14d
   1d37f:	mov    r8,r13
   1d382:	mov    rcx,r15
   1d385:	mov    rdx,rax
   1d388:	mov    esi,0x1
   1d38d:	mov    rdi,rbp
   1d390:	xor    eax,eax
   1d392:	call   bfd0 <__fprintf_chk@plt>
   1d397:	mov    rcx,rbp
   1d39a:	mov    edx,0x1c
   1d39f:	mov    esi,0x1
   1d3a4:	lea    rdi,[rip+0x48ab4]        # 65e5f <yy_accept+0xd9f>
   1d3ab:	call   ca10 <fwrite@plt>
   1d3b0:	xor    edi,edi
   1d3b2:	mov    r14d,DWORD PTR [r12+0x18]
   1d3b7:	mov    r13,QWORD PTR [r12+0x10]
   1d3bc:	mov    edx,0x5
   1d3c1:	lea    rsi,[rip+0x48a81]        # 65e49 <yy_accept+0xd89>
   1d3c8:	call   c780 <dcgettext@plt>
   1d3cd:	mov    rcx,r15
   1d3d0:	mov    esi,0x1
   1d3d5:	mov    rdi,rbp
   1d3d8:	mov    rdx,rax
   1d3db:	mov    r9d,r14d
   1d3de:	xor    eax,eax
   1d3e0:	mov    r8,r13
   1d3e3:	call   bfd0 <__fprintf_chk@plt>
   1d3e8:	mov    rcx,rbp
   1d3eb:	mov    edx,0x11
   1d3f0:	mov    esi,0x1
   1d3f5:	lea    rdi,[rip+0x48a80]        # 65e7c <yy_accept+0xdbc>
   1d3fc:	call   ca10 <fwrite@plt>
   1d401:	test   rbx,rbx
   1d404:	je     1d720 <ftp_index+0x4a0>
   1d40a:	lea    rax,[rsp+0x20]
   1d40f:	mov    QWORD PTR [rsp+0x10],rax
   1d414:	jmp    1d5f5 <ftp_index+0x375>
   1d419:	nop    DWORD PTR [rax+0x0]
   1d420:	mov    rdi,QWORD PTR [rsp+0x10]
   1d425:	mov    QWORD PTR [rsp+0x20],rax
   1d42a:	call   caa0 <localtime@plt>
   1d42f:	lea    rdx,[rip+0x5f66a]        # 7caa0 <months.8391>
   1d436:	mov    esi,0x1
   1d43b:	mov    rdi,rbp
   1d43e:	mov    r13,rax
   1d441:	movsxd rax,DWORD PTR [rax+0x10]
   1d445:	mov    ecx,DWORD PTR [r13+0x14]
   1d449:	mov    r9d,DWORD PTR [r13+0xc]
   1d44d:	mov    r8,QWORD PTR [rdx+rax*8]
   1d451:	lea    rdx,[rip+0x48a36]        # 65e8e <yy_accept+0xdce>
   1d458:	xor    eax,eax
   1d45a:	add    ecx,0x76c
   1d460:	call   bfd0 <__fprintf_chk@plt>
   1d465:	mov    eax,DWORD PTR [rbx+0x20]
   1d468:	test   eax,eax
   1d46a:	jne    1d670 <ftp_index+0x3f0>
   1d470:	mov    ecx,DWORD PTR [r13+0x8]
   1d474:	mov    r8d,DWORD PTR [r13+0x4]
   1d478:	mov    esi,0x1
   1d47d:	mov    rdi,rbp
   1d480:	lea    rdx,[rip+0x48a13]        # 65e9a <yy_accept+0xdda>
   1d487:	xor    eax,eax
   1d489:	call   bfd0 <__fprintf_chk@plt>
   1d48e:	mov    eax,DWORD PTR [rbx]
   1d490:	mov    edx,0x5
   1d495:	lea    rsi,[rip+0x48a2b]        # 65ec7 <yy_accept+0xe07>
   1d49c:	cmp    eax,0x1
   1d49f:	je     1d4bf <ftp_index+0x23f>
   1d4a1:	lea    rsi,[rip+0x48a2c]        # 65ed4 <yy_accept+0xe14>
   1d4a8:	cmp    eax,0x2
   1d4ab:	je     1d4bf <ftp_index+0x23f>
   1d4ad:	lea    rsi,[rip+0x48a06]        # 65eba <yy_accept+0xdfa>
   1d4b4:	test   eax,eax
   1d4b6:	je     1d4bf <ftp_index+0x23f>
   1d4b8:	lea    rsi,[rip+0x48a22]        # 65ee1 <yy_accept+0xe21>
   1d4bf:	xor    edi,edi
   1d4c1:	call   c780 <dcgettext@plt>
   1d4c6:	mov    esi,0x1
   1d4cb:	mov    rdi,rbp
   1d4ce:	mov    rdx,rax
   1d4d1:	xor    eax,eax
   1d4d3:	call   bfd0 <__fprintf_chk@plt>
   1d4d8:	mov    rdi,QWORD PTR [rbx+0x8]
   1d4dc:	call   10630 <html_quote_string>
   1d4e1:	mov    rdi,QWORD PTR [rbx+0x8]
   1d4e5:	mov    r14,rax
   1d4e8:	call   37120 <url_escape_unsafe_and_reserved>
   1d4ed:	mov    r9d,DWORD PTR [r12+0x18]
   1d4f2:	mov    rdi,rbp
   1d4f5:	mov    r8,QWORD PTR [r12+0x10]
   1d4fa:	mov    rcx,QWORD PTR [rsp+0x8]
   1d4ff:	mov    r13,rax
   1d502:	mov    esi,0x1
   1d507:	xor    eax,eax
   1d509:	lea    rdx,[rip+0x489de]        # 65eee <yy_accept+0xe2e>
   1d510:	call   bfd0 <__fprintf_chk@plt>
   1d515:	mov    rax,QWORD PTR [r12+0x40]
   1d51a:	cmp    BYTE PTR [rax],0x2f
   1d51d:	je     1d52c <ftp_index+0x2ac>
   1d51f:	mov    rsi,rbp
   1d522:	mov    edi,0x2f
   1d527:	call   c660 <putc@plt>
   1d52c:	mov    rsi,rbp
   1d52f:	mov    rdi,r15
   1d532:	call   c580 <fputs@plt>
   1d537:	mov    rax,QWORD PTR [r12+0x40]
   1d53c:	cmp    BYTE PTR [rax],0x0
   1d53f:	jne    1d6d0 <ftp_index+0x450>
   1d545:	mov    rsi,rbp
   1d548:	mov    rdi,r13
   1d54b:	call   c580 <fputs@plt>
   1d550:	cmp    DWORD PTR [rbx],0x1
   1d553:	je     1d6f1 <ftp_index+0x471>
   1d559:	xor    eax,eax
   1d55b:	mov    rcx,r14
   1d55e:	lea    rdx,[rip+0x489a0]        # 65f05 <yy_accept+0xe45>
   1d565:	mov    rdi,rbp
   1d568:	mov    esi,0x1
   1d56d:	call   bfd0 <__fprintf_chk@plt>
   1d572:	cmp    DWORD PTR [rbx],0x1
   1d575:	je     1d708 <ftp_index+0x488>
   1d57b:	mov    rcx,rbp
   1d57e:	mov    edx,0x5
   1d583:	mov    esi,0x1
   1d588:	lea    rdi,[rip+0x4897b]        # 65f0a <yy_accept+0xe4a>
   1d58f:	call   ca10 <fwrite@plt>
   1d594:	mov    eax,DWORD PTR [rbx]
   1d596:	test   eax,eax
   1d598:	je     1d690 <ftp_index+0x410>
   1d59e:	cmp    eax,0x2
   1d5a1:	jne    1d5cb <ftp_index+0x34b>
   1d5a3:	mov    rcx,QWORD PTR [rbx+0x28]
   1d5a7:	lea    rax,[rip+0x4887f]        # 65e2d <yy_accept+0xd6d>
   1d5ae:	mov    esi,0x1
   1d5b3:	mov    rdi,rbp
   1d5b6:	lea    rdx,[rip+0x4895f]        # 65f1c <yy_accept+0xe5c>
   1d5bd:	test   rcx,rcx
   1d5c0:	cmove  rcx,rax
   1d5c4:	xor    eax,eax
   1d5c6:	call   bfd0 <__fprintf_chk@plt>
   1d5cb:	mov    rsi,rbp
   1d5ce:	mov    edi,0xa
   1d5d3:	call   c660 <putc@plt>
   1d5d8:	mov    rdi,r14
   1d5db:	call   4bdc0 <rpl_free>
   1d5e0:	mov    rdi,r13
   1d5e3:	call   4bdc0 <rpl_free>
   1d5e8:	mov    rbx,QWORD PTR [rbx+0x38]
   1d5ec:	test   rbx,rbx
   1d5ef:	je     1d720 <ftp_index+0x4a0>
   1d5f5:	mov    rcx,rbp
   1d5f8:	mov    edx,0x2
   1d5fd:	mov    esi,0x1
   1d602:	lea    rdi,[rip+0x488bb]        # 65ec4 <yy_accept+0xe04>
   1d609:	call   ca10 <fwrite@plt>
   1d60e:	mov    rax,QWORD PTR [rbx+0x18]
   1d612:	cmp    rax,0xffffffffffffffff
   1d616:	jne    1d420 <ftp_index+0x1a0>
   1d61c:	xor    edi,edi
   1d61e:	mov    edx,0x5
   1d623:	lea    rsi,[rip+0x4887c]        # 65ea6 <yy_accept+0xde6>
   1d62a:	call   c780 <dcgettext@plt>
   1d62f:	mov    esi,0x1
   1d634:	mov    rdi,rbp
   1d637:	mov    rdx,rax
   1d63a:	xor    eax,eax
   1d63c:	call   bfd0 <__fprintf_chk@plt>
   1d641:	jmp    1d48e <ftp_index+0x20e>
   1d646:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1d650:	xor    edx,edx
   1d652:	lea    rsi,[rip+0x3e213]        # 5b86c <_IO_stdin_used+0x86c>
   1d659:	mov    rdi,r13
   1d65c:	xor    eax,eax
   1d65e:	call   3bbd0 <concat_strings>
   1d663:	xor    r14d,r14d
   1d666:	mov    QWORD PTR [rsp+0x8],rax
   1d66b:	jmp    1d310 <ftp_index+0x90>
   1d670:	mov    rcx,rbp
   1d673:	mov    edx,0x7
   1d678:	mov    esi,0x1
   1d67d:	lea    rdi,[rip+0x4883b]        # 65ebf <yy_accept+0xdff>
   1d684:	call   ca10 <fwrite@plt>
   1d689:	jmp    1d48e <ftp_index+0x20e>
   1d68e:	xchg   ax,ax
   1d690:	mov    rdi,QWORD PTR [rbx+0x10]
   1d694:	call   3e8e0 <number_to_static_string>
   1d699:	xor    edi,edi
   1d69b:	mov    edx,0x5
   1d6a0:	lea    rsi,[rip+0x48869]        # 65f10 <yy_accept+0xe50>
   1d6a7:	mov    QWORD PTR [rsp+0x18],rax
   1d6ac:	call   c780 <dcgettext@plt>
   1d6b1:	mov    rcx,QWORD PTR [rsp+0x18]
   1d6b6:	mov    esi,0x1
   1d6bb:	mov    rdi,rbp
   1d6be:	mov    rdx,rax
   1d6c1:	xor    eax,eax
   1d6c3:	call   bfd0 <__fprintf_chk@plt>
   1d6c8:	jmp    1d5cb <ftp_index+0x34b>
   1d6cd:	nop    DWORD PTR [rax]
   1d6d0:	mov    rsi,rbp
   1d6d3:	mov    edi,0x2f
   1d6d8:	call   c660 <putc@plt>
   1d6dd:	mov    rsi,rbp
   1d6e0:	mov    rdi,r13
   1d6e3:	call   c580 <fputs@plt>
   1d6e8:	cmp    DWORD PTR [rbx],0x1
   1d6eb:	jne    1d559 <ftp_index+0x2d9>
   1d6f1:	mov    rsi,rbp
   1d6f4:	mov    edi,0x2f
   1d6f9:	call   c660 <putc@plt>
   1d6fe:	jmp    1d559 <ftp_index+0x2d9>
   1d703:	nop    DWORD PTR [rax+rax*1+0x0]
   1d708:	mov    rsi,rbp
   1d70b:	mov    edi,0x2f
   1d710:	call   c660 <putc@plt>
   1d715:	jmp    1d57b <ftp_index+0x2fb>
   1d71a:	nop    WORD PTR [rax+rax*1+0x0]
   1d720:	mov    rcx,rbp
   1d723:	mov    edx,0x17
   1d728:	mov    esi,0x1
   1d72d:	lea    rdi,[rip+0x487ee]        # 65f22 <yy_accept+0xe62>
   1d734:	call   ca10 <fwrite@plt>
   1d739:	mov    rdi,r15
   1d73c:	call   4bdc0 <rpl_free>
   1d741:	mov    rdi,QWORD PTR [rsp+0x8]
   1d746:	call   4bdc0 <rpl_free>
   1d74b:	cmp    QWORD PTR [rip+0x6cced],0x0        # 8a440 <output_stream>
   1d753:	mov    rdi,rbp
   1d756:	je     1d7a0 <ftp_index+0x520>
   1d758:	call   4bd70 <rpl_fflush>
   1d75d:	mov    eax,0x7
   1d762:	mov    rbx,QWORD PTR [rsp+0x28]
   1d767:	xor    rbx,QWORD PTR fs:0x28
   1d770:	jne    1d7fa <ftp_index+0x57a>
   1d776:	add    rsp,0x38
   1d77a:	pop    rbx
   1d77b:	pop    rbp
   1d77c:	pop    r12
   1d77e:	pop    r13
   1d780:	pop    r14
   1d782:	pop    r15
   1d784:	ret    
   1d785:	nop    DWORD PTR [rax]
   1d788:	lea    rdi,[rip+0x50c88]        # 6e417 <urlchr_table+0x877>
   1d78f:	call   4ba50 <xstrdup>
   1d794:	mov    QWORD PTR [rsp+0x8],rax
   1d799:	jmp    1d320 <ftp_index+0xa0>
   1d79e:	xchg   ax,ax
   1d7a0:	call   c8b0 <fclose@plt>
   1d7a5:	mov    eax,0x7
   1d7aa:	jmp    1d762 <ftp_index+0x4e2>
   1d7ac:	nop    DWORD PTR [rax+0x0]
   1d7b0:	lea    rsi,[rip+0x3daf2]        # 5b2a9 <_IO_stdin_used+0x2a9>
   1d7b7:	mov    r13,rdi
   1d7ba:	call   c0f0 <fopen@plt>
   1d7bf:	mov    rbp,rax
   1d7c2:	test   rax,rax
   1d7c5:	jne    1d2b8 <ftp_index+0x38>
   1d7cb:	call   c740 <__errno_location@plt>
   1d7d0:	mov    edi,DWORD PTR [rax]
   1d7d2:	call   c540 <strerror@plt>
   1d7d7:	mov    rdx,r13
   1d7da:	mov    edi,0x1
   1d7df:	lea    rsi,[rip+0x4b05f]        # 68845 <primes.6089+0x2765>
   1d7e6:	mov    rcx,rax
   1d7e9:	xor    eax,eax
   1d7eb:	call   2e0a0 <logprintf>
   1d7f0:	mov    eax,0x13
   1d7f5:	jmp    1d762 <ftp_index+0x4e2>
   1d7fa:	call   c7b0 <__stack_chk_fail@plt>
   1d7ff:	nop

000000000001d800 <hash_string>:
   1d800:	endbr64 
   1d804:	movsx  ecx,BYTE PTR [rdi]
   1d807:	xor    eax,eax
   1d809:	test   ecx,ecx
   1d80b:	je     1d837 <hash_string+0x37>
   1d80d:	movsx  eax,BYTE PTR [rdi+0x1]
   1d811:	lea    rsi,[rdi+0x1]
   1d815:	test   al,al
   1d817:	je     1d835 <hash_string+0x35>
   1d819:	nop    DWORD PTR [rax+0x0]
   1d820:	mov    edx,ecx
   1d822:	add    rsi,0x1
   1d826:	shl    edx,0x5
   1d829:	sub    edx,ecx
   1d82b:	lea    ecx,[rax+rdx*1]
   1d82e:	movsx  eax,BYTE PTR [rsi]
   1d831:	test   al,al
   1d833:	jne    1d820 <hash_string+0x20>
   1d835:	mov    eax,ecx
   1d837:	ret    
   1d838:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001d840 <hash_string_nocase>:
   1d840:	endbr64 
   1d844:	movsx  edx,BYTE PTR [rdi]
   1d847:	lea    eax,[rdx-0x41]
   1d84a:	cmp    eax,0x19
   1d84d:	ja     1d888 <hash_string_nocase+0x48>
   1d84f:	add    edx,0x20
   1d852:	movsx  eax,BYTE PTR [rdi+0x1]
   1d856:	lea    rsi,[rdi+0x1]
   1d85a:	test   al,al
   1d85c:	je     1d882 <hash_string_nocase+0x42>
   1d85e:	xchg   ax,ax
   1d860:	mov    ecx,edx
   1d862:	lea    edi,[rax-0x41]
   1d865:	shl    ecx,0x5
   1d868:	sub    ecx,edx
   1d86a:	cmp    edi,0x1a
   1d86d:	mov    edx,ecx
   1d86f:	lea    ecx,[rax+0x20]
   1d872:	cmovb  eax,ecx
   1d875:	add    rsi,0x1
   1d879:	add    edx,eax
   1d87b:	movsx  eax,BYTE PTR [rsi]
   1d87e:	test   al,al
   1d880:	jne    1d860 <hash_string_nocase+0x20>
   1d882:	mov    eax,edx
   1d884:	ret    
   1d885:	nop    DWORD PTR [rax]
   1d888:	test   edx,edx
   1d88a:	jne    1d852 <hash_string_nocase+0x12>
   1d88c:	xor    eax,eax
   1d88e:	ret    
   1d88f:	nop

000000000001d890 <hash_pointer>:
   1d890:	endbr64 
   1d894:	mov    rax,rdi
   1d897:	shl    rax,0xc
   1d89b:	lea    rdx,[rax+rdi*1]
   1d89f:	mov    rax,rdx
   1d8a2:	shr    rax,0x16
   1d8a6:	xor    rdx,rax
   1d8a9:	mov    rax,rdx
   1d8ac:	shl    rax,0x4
   1d8b0:	add    rax,rdx
   1d8b3:	mov    rdx,rax
   1d8b6:	shr    rdx,0x9
   1d8ba:	xor    rax,rdx
   1d8bd:	mov    rdx,rax
   1d8c0:	shl    rdx,0xa
   1d8c4:	add    rdx,rax
   1d8c7:	mov    rax,rdx
   1d8ca:	shr    rax,0x2
   1d8ce:	xor    rdx,rax
   1d8d1:	mov    rax,rdx
   1d8d4:	shl    rax,0x7
   1d8d8:	add    rax,rdx
   1d8db:	mov    rdx,rax
   1d8de:	shr    rdx,0xc
   1d8e2:	xor    rax,rdx
   1d8e5:	ret    
   1d8e6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001d8f0 <cmp_pointer>:
   1d8f0:	endbr64 
   1d8f4:	xor    eax,eax
   1d8f6:	cmp    rsi,rdi
   1d8f9:	sete   al
   1d8fc:	ret    
   1d8fd:	nop    DWORD PTR [rax]

000000000001d900 <cmp_string>:
   1d900:	endbr64 
   1d904:	sub    rsp,0x8
   1d908:	call   be40 <strcmp@plt>
   1d90d:	test   eax,eax
   1d90f:	sete   al
   1d912:	add    rsp,0x8
   1d916:	movzx  eax,al
   1d919:	ret    
   1d91a:	nop    WORD PTR [rax+rax*1+0x0]

000000000001d920 <string_cmp_nocase>:
   1d920:	endbr64 
   1d924:	sub    rsp,0x8
   1d928:	call   be10 <strcasecmp@plt>
   1d92d:	test   eax,eax
   1d92f:	sete   al
   1d932:	add    rsp,0x8
   1d936:	movzx  eax,al
   1d939:	ret    
   1d93a:	nop    WORD PTR [rax+rax*1+0x0]

000000000001d940 <hash_table_new>:
   1d940:	endbr64 
   1d944:	push   r13
   1d946:	push   r12
   1d948:	mov    r12d,edi
   1d94b:	mov    edi,0x28
   1d950:	push   rbp
   1d951:	mov    rbp,rsi
   1d954:	push   rbx
   1d955:	mov    rbx,rdx
   1d958:	sub    rsp,0x8
   1d95c:	call   4b850 <xmalloc>
   1d961:	pxor   xmm0,xmm0
   1d965:	test   rbp,rbp
   1d968:	movsd  xmm1,QWORD PTR [rip+0x48890]        # 66200 <primes.6089+0x120>
   1d970:	cvtsi2sd xmm0,r12d
   1d975:	mov    r13,rax
   1d978:	lea    rax,[rip+0xffffffffffffff11]        # 1d890 <hash_pointer>
   1d97f:	mov    edx,0xd
   1d984:	cmove  rbp,rax
   1d988:	test   rbx,rbx
   1d98b:	lea    rax,[rip+0xffffffffffffff5e]        # 1d8f0 <cmp_pointer>
   1d992:	mov    DWORD PTR [r13+0x24],0x0
   1d99a:	cmove  rbx,rax
   1d99e:	lea    rsi,[rip+0x4873b]        # 660e0 <primes.6089>
   1d9a5:	xor    eax,eax
   1d9a7:	mov    QWORD PTR [r13+0x0],rbp
   1d9ab:	divsd  xmm0,xmm1
   1d9af:	mov    QWORD PTR [r13+0x8],rbx
   1d9b3:	addsd  xmm0,QWORD PTR [rip+0x3de25]        # 5b7e0 <_IO_stdin_used+0x7e0>
   1d9bb:	cvttsd2si ecx,xmm0
   1d9bf:	jmp    1d9d9 <hash_table_new+0x99>
   1d9c1:	nop    DWORD PTR [rax+0x0]
   1d9c8:	add    rax,0x1
   1d9cc:	cmp    rax,0x47
   1d9d0:	je     cc67 <hash_table_new.cold>
   1d9d6:	mov    edx,DWORD PTR [rsi+rax*4]
   1d9d9:	cmp    ecx,edx
   1d9db:	jg     1d9c8 <hash_table_new+0x88>
   1d9dd:	pxor   xmm0,xmm0
   1d9e1:	add    eax,0x1
   1d9e4:	movsxd r12,edx
   1d9e7:	mov    DWORD PTR [r13+0x18],edx
   1d9eb:	cvtsi2sd xmm0,edx
   1d9ef:	mov    DWORD PTR [r13+0x24],eax
   1d9f3:	shl    r12,0x4
   1d9f7:	mov    rdi,r12
   1d9fa:	mulsd  xmm0,xmm1
   1d9fe:	cvttsd2si eax,xmm0
   1da02:	mov    DWORD PTR [r13+0x20],eax
   1da06:	call   4b850 <xmalloc>
   1da0b:	mov    rdx,r12
   1da0e:	mov    esi,0xff
   1da13:	mov    rdi,rax
   1da16:	mov    QWORD PTR [r13+0x10],rax
   1da1a:	call   bed0 <memset@plt>
   1da1f:	mov    DWORD PTR [r13+0x1c],0x0
   1da27:	mov    rax,r13
   1da2a:	add    rsp,0x8
   1da2e:	pop    rbx
   1da2f:	pop    rbp
   1da30:	pop    r12
   1da32:	pop    r13
   1da34:	ret    
   1da35:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000001da40 <hash_table_destroy>:
   1da40:	endbr64 
   1da44:	push   rbp
   1da45:	mov    rbp,rdi
   1da48:	mov    rdi,QWORD PTR [rdi+0x10]
   1da4c:	call   4bdc0 <rpl_free>
   1da51:	mov    QWORD PTR [rbp+0x10],0x0
   1da59:	mov    rdi,rbp
   1da5c:	pop    rbp
   1da5d:	jmp    4bdc0 <rpl_free>
   1da62:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1da6d:	nop    DWORD PTR [rax]

000000000001da70 <hash_table_get>:
   1da70:	endbr64 
   1da74:	push   r14
   1da76:	mov    r14,rsi
   1da79:	push   r13
   1da7b:	mov    r13,rdi
   1da7e:	push   r12
   1da80:	push   rbp
   1da81:	push   rbx
   1da82:	mov    ebp,DWORD PTR [rdi+0x18]
   1da85:	mov    r12,QWORD PTR [rdi+0x10]
   1da89:	mov    rdi,rsi
   1da8c:	call   QWORD PTR [r13+0x0]
   1da90:	movsxd rcx,ebp
   1da93:	xor    edx,edx
   1da95:	mov    rbp,QWORD PTR [r13+0x8]
   1da99:	div    rcx
   1da9c:	shl    rdx,0x4
   1daa0:	lea    rbx,[r12+rdx*1]
   1daa4:	mov    rsi,QWORD PTR [rbx]
   1daa7:	cmp    rsi,0xffffffffffffffff
   1daab:	je     1daf8 <hash_table_get+0x88>
   1daad:	shl    rcx,0x4
   1dab1:	lea    r13,[r12+rcx*1-0x10]
   1dab6:	jmp    1dad7 <hash_table_get+0x67>
   1dab8:	nop    DWORD PTR [rax+rax*1+0x0]
   1dac0:	lea    rax,[rbx+0x10]
   1dac4:	cmp    rbx,r13
   1dac7:	cmove  rax,r12
   1dacb:	mov    rsi,QWORD PTR [rax]
   1dace:	mov    rbx,rax
   1dad1:	cmp    rsi,0xffffffffffffffff
   1dad5:	je     1daf8 <hash_table_get+0x88>
   1dad7:	mov    rdi,r14
   1dada:	call   rbp
   1dadc:	test   eax,eax
   1dade:	je     1dac0 <hash_table_get+0x50>
   1dae0:	cmp    QWORD PTR [rbx],0xffffffffffffffff
   1dae4:	je     1daf8 <hash_table_get+0x88>
   1dae6:	mov    rax,QWORD PTR [rbx+0x8]
   1daea:	pop    rbx
   1daeb:	pop    rbp
   1daec:	pop    r12
   1daee:	pop    r13
   1daf0:	pop    r14
   1daf2:	ret    
   1daf3:	nop    DWORD PTR [rax+rax*1+0x0]
   1daf8:	pop    rbx
   1daf9:	xor    eax,eax
   1dafb:	pop    rbp
   1dafc:	pop    r12
   1dafe:	pop    r13
   1db00:	pop    r14
   1db02:	ret    
   1db03:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1db0e:	xchg   ax,ax

000000000001db10 <hash_table_get_pair>:
   1db10:	endbr64 
   1db14:	push   r15
   1db16:	mov    r15,rsi
   1db19:	push   r14
   1db1b:	mov    r14,rdi
   1db1e:	push   r13
   1db20:	push   r12
   1db22:	mov    r12,rdx
   1db25:	push   rbp
   1db26:	mov    rbp,rcx
   1db29:	push   rbx
   1db2a:	sub    rsp,0x18
   1db2e:	mov    ebx,DWORD PTR [rdi+0x18]
   1db31:	mov    r13,QWORD PTR [rdi+0x10]
   1db35:	mov    rdi,rsi
   1db38:	call   QWORD PTR [r14]
   1db3b:	xor    edx,edx
   1db3d:	mov    r14,QWORD PTR [r14+0x8]
   1db41:	movsxd rcx,ebx
   1db44:	div    rcx
   1db47:	shl    rdx,0x4
   1db4b:	lea    rbx,[r13+rdx*1+0x0]
   1db50:	mov    rsi,QWORD PTR [rbx]
   1db53:	cmp    rsi,0xffffffffffffffff
   1db57:	je     1dbd0 <hash_table_get_pair+0xc0>
   1db59:	shl    rcx,0x4
   1db5d:	lea    rax,[r13+rcx*1-0x10]
   1db62:	mov    QWORD PTR [rsp+0x8],rax
   1db67:	jmp    1db89 <hash_table_get_pair+0x79>
   1db69:	nop    DWORD PTR [rax+0x0]
   1db70:	lea    rax,[rbx+0x10]
   1db74:	cmp    QWORD PTR [rsp+0x8],rbx
   1db79:	cmove  rax,r13
   1db7d:	mov    rsi,QWORD PTR [rax]
   1db80:	mov    rbx,rax
   1db83:	cmp    rsi,0xffffffffffffffff
   1db87:	je     1dbd0 <hash_table_get_pair+0xc0>
   1db89:	mov    rdi,r15
   1db8c:	call   r14
   1db8f:	test   eax,eax
   1db91:	je     1db70 <hash_table_get_pair+0x60>
   1db93:	mov    rax,QWORD PTR [rbx]
   1db96:	cmp    rax,0xffffffffffffffff
   1db9a:	je     1dbd0 <hash_table_get_pair+0xc0>
   1db9c:	test   r12,r12
   1db9f:	je     1dba5 <hash_table_get_pair+0x95>
   1dba1:	mov    QWORD PTR [r12],rax
   1dba5:	mov    eax,0x1
   1dbaa:	test   rbp,rbp
   1dbad:	je     1dbb7 <hash_table_get_pair+0xa7>
   1dbaf:	mov    rdx,QWORD PTR [rbx+0x8]
   1dbb3:	mov    QWORD PTR [rbp+0x0],rdx
   1dbb7:	add    rsp,0x18
   1dbbb:	pop    rbx
   1dbbc:	pop    rbp
   1dbbd:	pop    r12
   1dbbf:	pop    r13
   1dbc1:	pop    r14
   1dbc3:	pop    r15
   1dbc5:	ret    
   1dbc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1dbd0:	add    rsp,0x18
   1dbd4:	xor    eax,eax
   1dbd6:	pop    rbx
   1dbd7:	pop    rbp
   1dbd8:	pop    r12
   1dbda:	pop    r13
   1dbdc:	pop    r14
   1dbde:	pop    r15
   1dbe0:	ret    
   1dbe1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1dbec:	nop    DWORD PTR [rax+0x0]

000000000001dbf0 <hash_table_contains>:
   1dbf0:	endbr64 
   1dbf4:	push   r14
   1dbf6:	mov    r14,rsi
   1dbf9:	push   r13
   1dbfb:	mov    r13,rdi
   1dbfe:	push   r12
   1dc00:	push   rbp
   1dc01:	push   rbx
   1dc02:	mov    ebp,DWORD PTR [rdi+0x18]
   1dc05:	mov    r12,QWORD PTR [rdi+0x10]
   1dc09:	mov    rdi,rsi
   1dc0c:	call   QWORD PTR [r13+0x0]
   1dc10:	movsxd rcx,ebp
   1dc13:	xor    edx,edx
   1dc15:	mov    rbp,QWORD PTR [r13+0x8]
   1dc19:	div    rcx
   1dc1c:	shl    rdx,0x4
   1dc20:	lea    rbx,[r12+rdx*1]
   1dc24:	mov    rsi,QWORD PTR [rbx]
   1dc27:	cmp    rsi,0xffffffffffffffff
   1dc2b:	je     1dc63 <hash_table_contains+0x73>
   1dc2d:	shl    rcx,0x4
   1dc31:	lea    r13,[r12+rcx*1-0x10]
   1dc36:	jmp    1dc57 <hash_table_contains+0x67>
   1dc38:	nop    DWORD PTR [rax+rax*1+0x0]
   1dc40:	lea    rax,[rbx+0x10]
   1dc44:	cmp    rbx,r13
   1dc47:	cmove  rax,r12
   1dc4b:	mov    rsi,QWORD PTR [rax]
   1dc4e:	mov    rbx,rax
   1dc51:	cmp    rsi,0xffffffffffffffff
   1dc55:	je     1dc63 <hash_table_contains+0x73>
   1dc57:	mov    rdi,r14
   1dc5a:	call   rbp
   1dc5c:	test   eax,eax
   1dc5e:	je     1dc40 <hash_table_contains+0x50>
   1dc60:	mov    rsi,QWORD PTR [rbx]
   1dc63:	xor    eax,eax
   1dc65:	cmp    rsi,0xffffffffffffffff
   1dc69:	pop    rbx
   1dc6a:	pop    rbp
   1dc6b:	setne  al
   1dc6e:	pop    r12
   1dc70:	pop    r13
   1dc72:	pop    r14
   1dc74:	ret    
   1dc75:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000001dc80 <hash_table_put>:
   1dc80:	endbr64 
   1dc84:	push   r15
   1dc86:	push   r14
   1dc88:	push   r13
   1dc8a:	push   r12
   1dc8c:	push   rbp
   1dc8d:	mov    rbp,rdi
   1dc90:	push   rbx
   1dc91:	mov    rbx,rsi
   1dc94:	sub    rsp,0x28
   1dc98:	mov    r14d,DWORD PTR [rdi+0x18]
   1dc9c:	mov    r13,QWORD PTR [rdi+0x10]
   1dca0:	mov    rdi,rsi
   1dca3:	mov    QWORD PTR [rsp],rdx
   1dca7:	call   QWORD PTR [rbp+0x0]
   1dcaa:	movsxd rsi,r14d
   1dcad:	xor    edx,edx
   1dcaf:	mov    r15,QWORD PTR [rbp+0x8]
   1dcb3:	div    rsi
   1dcb6:	shl    rdx,0x4
   1dcba:	lea    r12,[r13+rdx*1+0x0]
   1dcbf:	mov    r8,QWORD PTR [r12]
   1dcc3:	cmp    r8,0xffffffffffffffff
   1dcc7:	je     1dd20 <hash_table_put+0xa0>
   1dcc9:	shl    rsi,0x4
   1dccd:	lea    r14,[r13+rsi*1-0x10]
   1dcd2:	jmp    1dcf0 <hash_table_put+0x70>
   1dcd4:	nop    DWORD PTR [rax+0x0]
   1dcd8:	lea    rax,[r12+0x10]
   1dcdd:	cmp    r14,r12
   1dce0:	cmove  rax,r13
   1dce4:	mov    r8,QWORD PTR [rax]
   1dce7:	mov    r12,rax
   1dcea:	cmp    r8,0xffffffffffffffff
   1dcee:	je     1dd20 <hash_table_put+0xa0>
   1dcf0:	mov    rsi,r8
   1dcf3:	mov    rdi,rbx
   1dcf6:	call   r15
   1dcf9:	test   eax,eax
   1dcfb:	je     1dcd8 <hash_table_put+0x58>
   1dcfd:	cmp    QWORD PTR [r12],0xffffffffffffffff
   1dd02:	je     1dd20 <hash_table_put+0xa0>
   1dd04:	mov    rax,QWORD PTR [rsp]
   1dd08:	mov    QWORD PTR [r12],rbx
   1dd0c:	mov    QWORD PTR [r12+0x8],rax
   1dd11:	add    rsp,0x28
   1dd15:	pop    rbx
   1dd16:	pop    rbp
   1dd17:	pop    r12
   1dd19:	pop    r13
   1dd1b:	pop    r14
   1dd1d:	pop    r15
   1dd1f:	ret    
   1dd20:	mov    eax,DWORD PTR [rbp+0x1c]
   1dd23:	cmp    eax,DWORD PTR [rbp+0x20]
   1dd26:	jge    1dd30 <hash_table_put+0xb0>
   1dd28:	add    eax,0x1
   1dd2b:	mov    DWORD PTR [rbp+0x1c],eax
   1dd2e:	jmp    1dd04 <hash_table_put+0x84>
   1dd30:	mov    rax,QWORD PTR [rbp+0x0]
   1dd34:	movsxd r13,DWORD PTR [rbp+0x18]
   1dd38:	mov    QWORD PTR [rsp+0x8],rax
   1dd3d:	mov    rax,QWORD PTR [rbp+0x10]
   1dd41:	mov    rdx,r13
   1dd44:	shl    r13,0x4
   1dd48:	add    edx,edx
   1dd4a:	mov    QWORD PTR [rsp+0x18],rax
   1dd4f:	add    r13,rax
   1dd52:	movsxd rax,DWORD PTR [rbp+0x24]
   1dd56:	cmp    rax,0x46
   1dd5a:	ja     cc6c <hash_table_put.cold>
   1dd60:	lea    rsi,[rip+0x48379]        # 660e0 <primes.6089>
   1dd67:	jmp    1dd7e <hash_table_put+0xfe>
   1dd69:	nop    DWORD PTR [rax+0x0]
   1dd70:	add    rax,0x1
   1dd74:	cmp    rax,0x47
   1dd78:	je     cc6c <hash_table_put.cold>
   1dd7e:	mov    r12d,DWORD PTR [rsi+rax*4]
   1dd82:	cmp    edx,r12d
   1dd85:	jg     1dd70 <hash_table_put+0xf0>
   1dd87:	pxor   xmm0,xmm0
   1dd8b:	add    eax,0x1
   1dd8e:	mov    DWORD PTR [rbp+0x18],r12d
   1dd92:	cvtsi2sd xmm0,r12d
   1dd97:	mulsd  xmm0,QWORD PTR [rip+0x48461]        # 66200 <primes.6089+0x120>
   1dd9f:	mov    DWORD PTR [rbp+0x24],eax
   1dda2:	cvttsd2si eax,xmm0
   1dda6:	mov    DWORD PTR [rbp+0x20],eax
   1dda9:	movsxd rax,r12d
   1ddac:	mov    r14,rax
   1ddaf:	mov    QWORD PTR [rsp+0x10],rax
   1ddb4:	shl    r14,0x4
   1ddb8:	mov    rdi,r14
   1ddbb:	call   4b850 <xmalloc>
   1ddc0:	mov    rdx,r14
   1ddc3:	mov    esi,0xff
   1ddc8:	mov    rdi,rax
   1ddcb:	mov    r12,rax
   1ddce:	call   bed0 <memset@plt>
   1ddd3:	mov    rax,QWORD PTR [rsp+0x18]
   1ddd8:	mov    QWORD PTR [rbp+0x10],r12
   1dddc:	lea    r14,[r12+r14*1-0x10]
   1dde1:	mov    r15,rax
   1dde4:	cmp    rax,r13
   1dde7:	jb     1ddf9 <hash_table_put+0x179>
   1dde9:	jmp    1de45 <hash_table_put+0x1c5>
   1ddeb:	nop    DWORD PTR [rax+rax*1+0x0]
   1ddf0:	add    r15,0x10
   1ddf4:	cmp    r13,r15
   1ddf7:	jbe    1de45 <hash_table_put+0x1c5>
   1ddf9:	mov    rdi,QWORD PTR [r15]
   1ddfc:	cmp    rdi,0xffffffffffffffff
   1de00:	je     1ddf0 <hash_table_put+0x170>
   1de02:	mov    rax,QWORD PTR [rsp+0x8]
   1de07:	call   rax
   1de09:	xor    edx,edx
   1de0b:	div    QWORD PTR [rsp+0x10]
   1de10:	shl    rdx,0x4
   1de14:	add    rdx,r12
   1de17:	jmp    1de2e <hash_table_put+0x1ae>
   1de19:	nop    DWORD PTR [rax+0x0]
   1de20:	lea    rdi,[rdx+0x10]
   1de24:	cmp    rdx,r14
   1de27:	mov    rdx,r12
   1de2a:	cmovne rdx,rdi
   1de2e:	cmp    QWORD PTR [rdx],0xffffffffffffffff
   1de32:	jne    1de20 <hash_table_put+0x1a0>
   1de34:	movdqu xmm1,XMMWORD PTR [r15]
   1de39:	add    r15,0x10
   1de3d:	movups XMMWORD PTR [rdx],xmm1
   1de40:	cmp    r13,r15
   1de43:	ja     1ddf9 <hash_table_put+0x179>
   1de45:	mov    rdi,QWORD PTR [rsp+0x18]
   1de4a:	call   4bdc0 <rpl_free>
   1de4f:	mov    r14d,DWORD PTR [rbp+0x18]
   1de53:	mov    r13,QWORD PTR [rbp+0x10]
   1de57:	mov    rdi,rbx
   1de5a:	call   QWORD PTR [rbp+0x0]
   1de5d:	xor    edx,edx
   1de5f:	mov    r15,QWORD PTR [rbp+0x8]
   1de63:	movsxd rdi,r14d
   1de66:	div    rdi
   1de69:	shl    rdi,0x4
   1de6d:	lea    r14,[r13+rdi*1-0x10]
   1de72:	shl    rdx,0x4
   1de76:	lea    r12,[r13+rdx*1+0x0]
   1de7b:	mov    rsi,QWORD PTR [r12]
   1de7f:	cmp    rsi,0xffffffffffffffff
   1de83:	jne    1dea8 <hash_table_put+0x228>
   1de85:	jmp    1deb2 <hash_table_put+0x232>
   1de87:	nop    WORD PTR [rax+rax*1+0x0]
   1de90:	lea    rax,[r12+0x10]
   1de95:	cmp    r14,r12
   1de98:	cmove  rax,r13
   1de9c:	mov    rsi,QWORD PTR [rax]
   1de9f:	mov    r12,rax
   1dea2:	cmp    rsi,0xffffffffffffffff
   1dea6:	je     1deb2 <hash_table_put+0x232>
   1dea8:	mov    rdi,rbx
   1deab:	call   r15
   1deae:	test   eax,eax
   1deb0:	je     1de90 <hash_table_put+0x210>
   1deb2:	mov    eax,DWORD PTR [rbp+0x1c]
   1deb5:	jmp    1dd28 <hash_table_put+0xa8>
   1deba:	nop    WORD PTR [rax+rax*1+0x0]

000000000001dec0 <hash_table_remove>:
   1dec0:	endbr64 
   1dec4:	push   r15
   1dec6:	push   r14
   1dec8:	push   r13
   1deca:	push   r12
   1decc:	mov    r12,rdi
   1decf:	push   rbp
   1ded0:	push   rbx
   1ded1:	mov    rbx,rsi
   1ded4:	sub    rsp,0x8
   1ded8:	mov    r13d,DWORD PTR [rdi+0x18]
   1dedc:	mov    rbp,QWORD PTR [rdi+0x10]
   1dee0:	mov    rdi,rsi
   1dee3:	call   QWORD PTR [r12]
   1dee7:	xor    edx,edx
   1dee9:	movsxd rcx,r13d
   1deec:	mov    r13,QWORD PTR [r12+0x8]
   1def1:	div    rcx
   1def4:	shl    rdx,0x4
   1def8:	lea    r15,[rbp+rdx*1+0x0]
   1defd:	mov    rsi,QWORD PTR [r15]
   1df00:	cmp    rsi,0xffffffffffffffff
   1df04:	je     1dff6 <hash_table_remove+0x136>
   1df0a:	shl    rcx,0x4
   1df0e:	lea    r14,[rbp+rcx*1-0x10]
   1df13:	jmp    1df33 <hash_table_remove+0x73>
   1df15:	nop    DWORD PTR [rax]
   1df18:	lea    rax,[r15+0x10]
   1df1c:	cmp    r14,r15
   1df1f:	cmove  rax,rbp
   1df23:	mov    rsi,QWORD PTR [rax]
   1df26:	mov    r15,rax
   1df29:	cmp    rsi,0xffffffffffffffff
   1df2d:	je     1dff6 <hash_table_remove+0x136>
   1df33:	mov    rdi,rbx
   1df36:	call   r13
   1df39:	test   eax,eax
   1df3b:	je     1df18 <hash_table_remove+0x58>
   1df3d:	cmp    QWORD PTR [r15],0xffffffffffffffff
   1df41:	je     1dff6 <hash_table_remove+0x136>
   1df47:	movsxd rbx,DWORD PTR [r12+0x18]
   1df4c:	mov    r13,QWORD PTR [r12+0x10]
   1df51:	lea    r14,[r15+0x10]
   1df55:	mov    rbp,QWORD PTR [r12]
   1df59:	mov    QWORD PTR [r15],0xffffffffffffffff
   1df60:	mov    rax,rbx
   1df63:	sub    DWORD PTR [r12+0x1c],0x1
   1df69:	shl    rax,0x4
   1df6d:	lea    r12,[r13+rax*1-0x10]
   1df72:	cmp    r12,r15
   1df75:	cmove  r14,r13
   1df79:	mov    r15,QWORD PTR [r14]
   1df7c:	cmp    r15,0xffffffffffffffff
   1df80:	je     1dfe2 <hash_table_remove+0x122>
   1df82:	nop    WORD PTR [rax+rax*1+0x0]
   1df88:	mov    rdi,r15
   1df8b:	call   rbp
   1df8d:	xor    edx,edx
   1df8f:	div    rbx
   1df92:	shl    rdx,0x4
   1df96:	lea    rax,[r13+rdx*1+0x0]
   1df9b:	jmp    1dfb3 <hash_table_remove+0xf3>
   1df9d:	nop    DWORD PTR [rax]
   1dfa0:	cmp    rdx,r15
   1dfa3:	je     1dfcb <hash_table_remove+0x10b>
   1dfa5:	cmp    r12,rax
   1dfa8:	lea    rcx,[rax+0x10]
   1dfac:	mov    rax,r13
   1dfaf:	cmovne rax,rcx
   1dfb3:	mov    rdx,QWORD PTR [rax]
   1dfb6:	cmp    rdx,0xffffffffffffffff
   1dfba:	jne    1dfa0 <hash_table_remove+0xe0>
   1dfbc:	movdqu xmm0,XMMWORD PTR [r14]
   1dfc1:	movups XMMWORD PTR [rax],xmm0
   1dfc4:	mov    QWORD PTR [r14],0xffffffffffffffff
   1dfcb:	lea    rax,[r14+0x10]
   1dfcf:	cmp    r12,r14
   1dfd2:	cmove  rax,r13
   1dfd6:	mov    r15,QWORD PTR [rax]
   1dfd9:	mov    r14,rax
   1dfdc:	cmp    r15,0xffffffffffffffff
   1dfe0:	jne    1df88 <hash_table_remove+0xc8>
   1dfe2:	add    rsp,0x8
   1dfe6:	mov    eax,0x1
   1dfeb:	pop    rbx
   1dfec:	pop    rbp
   1dfed:	pop    r12
   1dfef:	pop    r13
   1dff1:	pop    r14
   1dff3:	pop    r15
   1dff5:	ret    
   1dff6:	add    rsp,0x8
   1dffa:	xor    eax,eax
   1dffc:	pop    rbx
   1dffd:	pop    rbp
   1dffe:	pop    r12
   1e000:	pop    r13
   1e002:	pop    r14
   1e004:	pop    r15
   1e006:	ret    
   1e007:	nop    WORD PTR [rax+rax*1+0x0]

000000000001e010 <hash_table_clear>:
   1e010:	endbr64 
   1e014:	push   rbx
   1e015:	movsxd rdx,DWORD PTR [rdi+0x18]
   1e019:	mov    rbx,rdi
   1e01c:	mov    esi,0xff
   1e021:	mov    rdi,QWORD PTR [rdi+0x10]
   1e025:	shl    rdx,0x4
   1e029:	call   bed0 <memset@plt>
   1e02e:	mov    DWORD PTR [rbx+0x1c],0x0
   1e035:	pop    rbx
   1e036:	ret    
   1e037:	nop    WORD PTR [rax+rax*1+0x0]

000000000001e040 <hash_table_for_each>:
   1e040:	endbr64 
   1e044:	push   r14
   1e046:	push   r13
   1e048:	push   r12
   1e04a:	push   rbp
   1e04b:	push   rbx
   1e04c:	movsxd r14,DWORD PTR [rdi+0x18]
   1e050:	mov    rbp,QWORD PTR [rdi+0x10]
   1e054:	shl    r14,0x4
   1e058:	add    r14,rbp
   1e05b:	cmp    rbp,r14
   1e05e:	jae    1e079 <hash_table_for_each+0x39>
   1e060:	mov    r13,rsi
   1e063:	mov    r12,rdx
   1e066:	mov    rbx,QWORD PTR [rbp+0x0]
   1e06a:	cmp    rbx,0xffffffffffffffff
   1e06e:	jne    1e09a <hash_table_for_each+0x5a>
   1e070:	add    rbp,0x10
   1e074:	cmp    r14,rbp
   1e077:	ja     1e066 <hash_table_for_each+0x26>
   1e079:	pop    rbx
   1e07a:	pop    rbp
   1e07b:	pop    r12
   1e07d:	pop    r13
   1e07f:	pop    r14
   1e081:	ret    
   1e082:	nop    WORD PTR [rax+rax*1+0x0]
   1e088:	mov    rax,QWORD PTR [rbp+0x0]
   1e08c:	cmp    rax,0xffffffffffffffff
   1e090:	je     1e070 <hash_table_for_each+0x30>
   1e092:	cmp    rax,rbx
   1e095:	je     1e070 <hash_table_for_each+0x30>
   1e097:	mov    rbx,rax
   1e09a:	mov    rsi,QWORD PTR [rbp+0x8]
   1e09e:	mov    rdx,r12
   1e0a1:	mov    rdi,rbx
   1e0a4:	call   r13
   1e0a7:	test   eax,eax
   1e0a9:	je     1e088 <hash_table_for_each+0x48>
   1e0ab:	pop    rbx
   1e0ac:	pop    rbp
   1e0ad:	pop    r12
   1e0af:	pop    r13
   1e0b1:	pop    r14
   1e0b3:	ret    
   1e0b4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1e0bf:	nop

000000000001e0c0 <hash_table_iterate>:
   1e0c0:	endbr64 
   1e0c4:	movsxd rdx,DWORD PTR [rdi+0x18]
   1e0c8:	mov    rax,QWORD PTR [rdi+0x10]
   1e0cc:	shl    rdx,0x4
   1e0d0:	mov    QWORD PTR [rsi+0x10],rax
   1e0d4:	add    rax,rdx
   1e0d7:	mov    QWORD PTR [rsi+0x18],rax
   1e0db:	ret    
   1e0dc:	nop    DWORD PTR [rax+0x0]

000000000001e0e0 <hash_table_iter_next>:
   1e0e0:	endbr64 
   1e0e4:	mov    rax,QWORD PTR [rdi+0x10]
   1e0e8:	mov    rcx,QWORD PTR [rdi+0x18]
   1e0ec:	jmp    1e100 <hash_table_iter_next+0x20>
   1e0ee:	xchg   ax,ax
   1e0f0:	mov    rdx,QWORD PTR [rax]
   1e0f3:	mov    rsi,rax
   1e0f6:	add    rax,0x10
   1e0fa:	cmp    rdx,0xffffffffffffffff
   1e0fe:	jne    1e110 <hash_table_iter_next+0x30>
   1e100:	cmp    rax,rcx
   1e103:	jb     1e0f0 <hash_table_iter_next+0x10>
   1e105:	xor    eax,eax
   1e107:	ret    
   1e108:	nop    DWORD PTR [rax+rax*1+0x0]
   1e110:	mov    QWORD PTR [rdi],rdx
   1e113:	mov    rdx,QWORD PTR [rsi+0x8]
   1e117:	mov    QWORD PTR [rdi+0x10],rax
   1e11b:	mov    eax,0x1
   1e120:	mov    QWORD PTR [rdi+0x8],rdx
   1e124:	ret    
   1e125:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000001e130 <hash_table_count>:
   1e130:	endbr64 
   1e134:	mov    eax,DWORD PTR [rdi+0x1c]
   1e137:	ret    
   1e138:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001e140 <make_string_hash_table>:
   1e140:	endbr64 
   1e144:	lea    rdx,[rip+0xfffffffffffff7b5]        # 1d900 <cmp_string>
   1e14b:	lea    rsi,[rip+0xfffffffffffff6ae]        # 1d800 <hash_string>
   1e152:	jmp    1d940 <hash_table_new>
   1e157:	nop    WORD PTR [rax+rax*1+0x0]

000000000001e160 <make_nocase_string_hash_table>:
   1e160:	endbr64 
   1e164:	lea    rdx,[rip+0xfffffffffffff7b5]        # 1d920 <string_cmp_nocase>
   1e16b:	lea    rsi,[rip+0xfffffffffffff6ce]        # 1d840 <hash_string_nocase>
   1e172:	jmp    1d940 <hash_table_new>
   1e177:	nop    WORD PTR [rax+rax*1+0x0]

000000000001e180 <cmp_prefer_ipv4>:
   1e180:	endbr64 
   1e184:	xor    eax,eax
   1e186:	cmp    DWORD PTR [rdi],0x2
   1e189:	setne  al
   1e18c:	xor    edx,edx
   1e18e:	cmp    DWORD PTR [rsi],0x2
   1e191:	setne  dl
   1e194:	sub    eax,edx
   1e196:	ret    
   1e197:	nop    WORD PTR [rax+rax*1+0x0]

000000000001e1a0 <cmp_prefer_ipv6>:
   1e1a0:	endbr64 
   1e1a4:	xor    eax,eax
   1e1a6:	cmp    DWORD PTR [rdi],0xa
   1e1a9:	setne  al
   1e1ac:	xor    edx,edx
   1e1ae:	cmp    DWORD PTR [rsi],0xa
   1e1b1:	setne  dl
   1e1b4:	sub    eax,edx
   1e1b6:	ret    
   1e1b7:	nop    WORD PTR [rax+rax*1+0x0]

000000000001e1c0 <is_valid_ipv4_address>:
   1e1c0:	cmp    rdi,rsi
   1e1c3:	jae    1e230 <is_valid_ipv4_address+0x70>
   1e1c5:	xor    edx,edx
   1e1c7:	xor    r9d,r9d
   1e1ca:	xor    eax,eax
   1e1cc:	jmp    1e1f7 <is_valid_ipv4_address+0x37>
   1e1ce:	xchg   ax,ax
   1e1d0:	lea    edx,[rdx+rdx*4]
   1e1d3:	lea    edx,[r8+rdx*2]
   1e1d7:	cmp    edx,0xff
   1e1dd:	jg     1e230 <is_valid_ipv4_address+0x70>
   1e1df:	test   al,al
   1e1e1:	jne    1e1f2 <is_valid_ipv4_address+0x32>
   1e1e3:	add    r9d,0x1
   1e1e7:	cmp    r9d,0x4
   1e1eb:	jg     1e232 <is_valid_ipv4_address+0x72>
   1e1ed:	mov    eax,0x1
   1e1f2:	cmp    rsi,rdi
   1e1f5:	je     1e225 <is_valid_ipv4_address+0x65>
   1e1f7:	movsx  ecx,BYTE PTR [rdi]
   1e1fa:	add    rdi,0x1
   1e1fe:	lea    r8d,[rcx-0x30]
   1e202:	cmp    r8d,0x9
   1e206:	jbe    1e1d0 <is_valid_ipv4_address+0x10>
   1e208:	cmp    ecx,0x2e
   1e20b:	sete   dl
   1e20e:	and    eax,edx
   1e210:	xor    eax,0x1
   1e213:	cmp    r9d,0x4
   1e217:	sete   dl
   1e21a:	or     al,dl
   1e21c:	jne    1e230 <is_valid_ipv4_address+0x70>
   1e21e:	xor    edx,edx
   1e220:	cmp    rsi,rdi
   1e223:	jne    1e1f7 <is_valid_ipv4_address+0x37>
   1e225:	cmp    r9d,0x3
   1e229:	setg   al
   1e22c:	ret    
   1e22d:	nop    DWORD PTR [rax]
   1e230:	xor    eax,eax
   1e232:	ret    
   1e233:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1e23e:	xchg   ax,ax

000000000001e240 <getaddrinfo_with_timeout_callback>:
   1e240:	endbr64 
   1e244:	push   rbx
   1e245:	mov    rbx,rdi
   1e248:	mov    rcx,QWORD PTR [rdi+0x18]
   1e24c:	mov    rdx,QWORD PTR [rdi+0x10]
   1e250:	mov    rsi,QWORD PTR [rdi+0x8]
   1e254:	mov    rdi,QWORD PTR [rdi]
   1e257:	call   c080 <getaddrinfo@plt>
   1e25c:	mov    DWORD PTR [rbx+0x20],eax
   1e25f:	pop    rbx
   1e260:	ret    
   1e261:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1e26c:	nop    DWORD PTR [rax+0x0]

000000000001e270 <address_list_get_bounds>:
   1e270:	endbr64 
   1e274:	mov    eax,DWORD PTR [rdi+0x10]
   1e277:	mov    DWORD PTR [rsi],eax
   1e279:	mov    eax,DWORD PTR [rdi]
   1e27b:	mov    DWORD PTR [rdx],eax
   1e27d:	ret    
   1e27e:	xchg   ax,ax

000000000001e280 <address_list_address_at>:
   1e280:	endbr64 
   1e284:	mov    rax,QWORD PTR [rdi+0x8]
   1e288:	movsxd rsi,esi
   1e28b:	lea    rdx,[rsi+rsi*2]
   1e28f:	lea    rax,[rax+rdx*8]
   1e293:	ret    
   1e294:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1e29f:	nop

000000000001e2a0 <address_list_contains>:
   1e2a0:	endbr64 
   1e2a4:	mov    eax,DWORD PTR [rsi]
   1e2a6:	cmp    eax,0x2
   1e2a9:	jne    1e2f0 <address_list_contains+0x50>
   1e2ab:	mov    edx,DWORD PTR [rdi]
   1e2ad:	test   edx,edx
   1e2af:	jle    1e358 <address_list_contains+0xb8>
   1e2b5:	mov    rax,QWORD PTR [rdi+0x8]
   1e2b9:	sub    edx,0x1
   1e2bc:	lea    rdx,[rdx+rdx*2]
   1e2c0:	lea    rdx,[rax+rdx*8+0x18]
   1e2c5:	jmp    1e2d9 <address_list_contains+0x39>
   1e2c7:	nop    WORD PTR [rax+rax*1+0x0]
   1e2d0:	add    rax,0x18
   1e2d4:	cmp    rax,rdx
   1e2d7:	je     1e358 <address_list_contains+0xb8>
   1e2d9:	cmp    DWORD PTR [rax],0x2
   1e2dc:	jne    1e2d0 <address_list_contains+0x30>
   1e2de:	mov    ecx,DWORD PTR [rsi+0x4]
   1e2e1:	cmp    DWORD PTR [rax+0x4],ecx
   1e2e4:	jne    1e2d0 <address_list_contains+0x30>
   1e2e6:	mov    eax,0x1
   1e2eb:	ret    
   1e2ec:	nop    DWORD PTR [rax+0x0]
   1e2f0:	sub    rsp,0x8
   1e2f4:	cmp    eax,0xa
   1e2f7:	jne    cc71 <address_list_contains.cold>
   1e2fd:	mov    edx,DWORD PTR [rdi]
   1e2ff:	test   edx,edx
   1e301:	jle    1e360 <address_list_contains+0xc0>
   1e303:	mov    rax,QWORD PTR [rdi+0x8]
   1e307:	sub    edx,0x1
   1e30a:	lea    rdx,[rdx+rdx*2]
   1e30e:	lea    rdx,[rax+rdx*8+0x18]
   1e313:	jmp    1e321 <address_list_contains+0x81>
   1e315:	nop    DWORD PTR [rax]
   1e318:	add    rax,0x18
   1e31c:	cmp    rax,rdx
   1e31f:	je     1e360 <address_list_contains+0xc0>
   1e321:	cmp    DWORD PTR [rax],0xa
   1e324:	jne    1e318 <address_list_contains+0x78>
   1e326:	mov    edi,DWORD PTR [rsi+0x14]
   1e329:	cmp    DWORD PTR [rax+0x14],edi
   1e32c:	jne    1e318 <address_list_contains+0x78>
   1e32e:	mov    ecx,DWORD PTR [rsi+0x4]
   1e331:	cmp    DWORD PTR [rax+0x4],ecx
   1e334:	jne    1e318 <address_list_contains+0x78>
   1e336:	mov    ecx,DWORD PTR [rsi+0x8]
   1e339:	cmp    DWORD PTR [rax+0x8],ecx
   1e33c:	jne    1e318 <address_list_contains+0x78>
   1e33e:	mov    ecx,DWORD PTR [rsi+0xc]
   1e341:	cmp    DWORD PTR [rax+0xc],ecx
   1e344:	jne    1e318 <address_list_contains+0x78>
   1e346:	mov    ecx,DWORD PTR [rsi+0x10]
   1e349:	cmp    DWORD PTR [rax+0x10],ecx
   1e34c:	jne    1e318 <address_list_contains+0x78>
   1e34e:	mov    eax,0x1
   1e353:	jmp    1e362 <address_list_contains+0xc2>
   1e355:	nop    DWORD PTR [rax]
   1e358:	xor    eax,eax
   1e35a:	ret    
   1e35b:	nop    DWORD PTR [rax+rax*1+0x0]
   1e360:	xor    eax,eax
   1e362:	add    rsp,0x8
   1e366:	ret    
   1e367:	nop    WORD PTR [rax+rax*1+0x0]

000000000001e370 <address_list_set_faulty>:
   1e370:	endbr64 
   1e374:	mov    ecx,DWORD PTR [rdi+0x10]
   1e377:	cmp    ecx,esi
   1e379:	jne    1e38d <address_list_set_faulty+0x1d>
   1e37b:	add    ecx,0x1
   1e37e:	mov    DWORD PTR [rdi+0x10],ecx
   1e381:	cmp    ecx,DWORD PTR [rdi]
   1e383:	jl     1e38c <address_list_set_faulty+0x1c>
   1e385:	mov    DWORD PTR [rdi+0x10],0x0
   1e38c:	ret    
   1e38d:	push   rax
   1e38e:	mov    edx,esi
   1e390:	mov    edi,0x3
   1e395:	lea    rsi,[rip+0x47e6c]        # 66208 <primes.6089+0x128>
   1e39c:	xor    eax,eax
   1e39e:	call   2e0a0 <logprintf>
   1e3a3:	mov    edx,0x5
   1e3a8:	lea    rsi,[rip+0x47ec1]        # 66270 <primes.6089+0x190>
   1e3af:	xor    edi,edi
   1e3b1:	call   c780 <dcgettext@plt>
   1e3b6:	mov    edi,0x3
   1e3bb:	mov    rsi,rax
   1e3be:	xor    eax,eax
   1e3c0:	call   2e0a0 <logprintf>
   1e3c5:	mov    edx,0x5
   1e3ca:	lea    rsi,[rip+0x47ec7]        # 66298 <primes.6089+0x1b8>
   1e3d1:	xor    edi,edi
   1e3d3:	call   c780 <dcgettext@plt>
   1e3d8:	mov    edi,0x3
   1e3dd:	mov    rsi,rax
   1e3e0:	xor    eax,eax
   1e3e2:	call   2e0a0 <logprintf>
   1e3e7:	call   bf50 <abort@plt>
   1e3ec:	nop    DWORD PTR [rax+0x0]

000000000001e3f0 <address_list_set_connected>:
   1e3f0:	endbr64 
   1e3f4:	mov    BYTE PTR [rdi+0x14],0x1
   1e3f8:	ret    
   1e3f9:	nop    DWORD PTR [rax+0x0]

000000000001e400 <address_list_connected_p>:
   1e400:	endbr64 
   1e404:	movzx  eax,BYTE PTR [rdi+0x14]
   1e408:	ret    
   1e409:	nop    DWORD PTR [rax+0x0]

000000000001e410 <address_list_release>:
   1e410:	endbr64 
   1e414:	push   rbp
   1e415:	mov    eax,DWORD PTR [rdi+0x18]
   1e418:	mov    rbp,rdi
   1e41b:	cmp    BYTE PTR [rip+0x6be99],0x0        # 8a2bb <opt+0x23b>
   1e422:	lea    ecx,[rax-0x1]
   1e425:	mov    DWORD PTR [rdi+0x18],ecx
   1e428:	jne    1e430 <address_list_release+0x20>
   1e42a:	test   ecx,ecx
   1e42c:	jle    1e46c <address_list_release+0x5c>
   1e42e:	pop    rbp
   1e42f:	ret    
   1e430:	mov    rdx,rdi
   1e433:	xor    eax,eax
   1e435:	mov    esi,0x10
   1e43a:	lea    rdi,[rip+0x47e87]        # 662c8 <primes.6089+0x1e8>
   1e441:	call   2e250 <debug_logprintf>
   1e446:	mov    eax,DWORD PTR [rbp+0x18]
   1e449:	test   eax,eax
   1e44b:	jg     1e42e <address_list_release+0x1e>
   1e44d:	cmp    BYTE PTR [rip+0x6be67],0x0        # 8a2bb <opt+0x23b>
   1e454:	je     1e46c <address_list_release+0x5c>
   1e456:	mov    rdx,rbp
   1e459:	mov    esi,0x10
   1e45e:	lea    rdi,[rip+0x47dbd]        # 66222 <primes.6089+0x142>
   1e465:	xor    eax,eax
   1e467:	call   2e250 <debug_logprintf>
   1e46c:	mov    rdi,QWORD PTR [rbp+0x8]
   1e470:	call   4bdc0 <rpl_free>
   1e475:	mov    QWORD PTR [rbp+0x8],0x0
   1e47d:	mov    rdi,rbp
   1e480:	pop    rbp
   1e481:	jmp    4bdc0 <rpl_free>
   1e486:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000001e490 <print_address>:
   1e490:	endbr64 
   1e494:	sub    rsp,0x8
   1e498:	lea    rsi,[rdi+0x4]
   1e49c:	mov    edi,DWORD PTR [rdi]
   1e49e:	mov    ecx,0x40
   1e4a3:	lea    rdx,[rip+0x65136]        # 835e0 <buf.7282>
   1e4aa:	call   cb20 <inet_ntop@plt>
   1e4af:	test   rax,rax
   1e4b2:	je     1e4c0 <print_address+0x30>
   1e4b4:	lea    rax,[rip+0x65125]        # 835e0 <buf.7282>
   1e4bb:	add    rsp,0x8
   1e4bf:	ret    
   1e4c0:	call   c740 <__errno_location@plt>
   1e4c5:	mov    edi,DWORD PTR [rax]
   1e4c7:	call   c540 <strerror@plt>
   1e4cc:	mov    ecx,0x40
   1e4d1:	mov    edx,0x1
   1e4d6:	lea    r8,[rip+0x47d5f]        # 6623c <primes.6089+0x15c>
   1e4dd:	mov    r9,rax
   1e4e0:	mov    esi,0x40
   1e4e5:	lea    rdi,[rip+0x650f4]        # 835e0 <buf.7282>
   1e4ec:	xor    eax,eax
   1e4ee:	call   c9d0 <__snprintf_chk@plt>
   1e4f3:	lea    rax,[rip+0x650e6]        # 835e0 <buf.7282>
   1e4fa:	add    rsp,0x8
   1e4fe:	ret    
   1e4ff:	nop

000000000001e500 <is_valid_ipv6_address>:
   1e500:	endbr64 
   1e504:	cmp    rdi,rsi
   1e507:	je     1e630 <is_valid_ipv6_address+0x130>
   1e50d:	cmp    BYTE PTR [rdi],0x3a
   1e510:	je     1e610 <is_valid_ipv6_address+0x110>
   1e516:	cmp    rdi,rsi
   1e519:	jae    1e630 <is_valid_ipv6_address+0x130>
   1e51f:	push   r12
   1e521:	xor    r8d,r8d
   1e524:	xor    eax,eax
   1e526:	xor    r11d,r11d
   1e529:	movabs r9,0x7e0000007e03ff
   1e533:	push   rbp
   1e534:	xor    r10d,r10d
   1e537:	mov    rbp,rdi
   1e53a:	push   rbx
   1e53b:	mov    ebx,0x1
   1e540:	movzx  edx,BYTE PTR [rdi]
   1e543:	add    rdi,0x1
   1e547:	lea    ecx,[rdx-0x30]
   1e54a:	cmp    cl,0x36
   1e54d:	ja     1e55a <is_valid_ipv6_address+0x5a>
   1e54f:	mov    r12,rbx
   1e552:	shl    r12,cl
   1e555:	test   r12,r9
   1e558:	jne    1e57a <is_valid_ipv6_address+0x7a>
   1e55a:	movsx  ecx,dl
   1e55d:	cmp    dl,0x3a
   1e560:	jne    1e639 <is_valid_ipv6_address+0x139>
   1e566:	test   al,al
   1e568:	jne    1e5c0 <is_valid_ipv6_address+0xc0>
   1e56a:	test   r11,r11
   1e56d:	jne    1e594 <is_valid_ipv6_address+0x94>
   1e56f:	movsxd r11,r10d
   1e572:	mov    rbp,rdi
   1e575:	add    r11,rdi
   1e578:	jmp    1e5e5 <is_valid_ipv6_address+0xe5>
   1e57a:	shl    r8d,0x4
   1e57e:	cmp    dl,0x39
   1e581:	jg     1e5a0 <is_valid_ipv6_address+0xa0>
   1e583:	movzx  ecx,cl
   1e586:	or     r8d,ecx
   1e589:	cmp    r8d,0xffff
   1e590:	jbe    1e5e0 <is_valid_ipv6_address+0xe0>
   1e592:	xor    eax,eax
   1e594:	pop    rbx
   1e595:	pop    rbp
   1e596:	pop    r12
   1e598:	ret    
   1e599:	nop    DWORD PTR [rax+0x0]
   1e5a0:	cmp    dl,0x46
   1e5a3:	lea    ecx,[rdx-0x37]
   1e5a6:	lea    eax,[rdx-0x57]
   1e5a9:	cmova  ecx,eax
   1e5ac:	movzx  ecx,cl
   1e5af:	or     r8d,ecx
   1e5b2:	cmp    r8d,0xffff
   1e5b9:	ja     1e592 <is_valid_ipv6_address+0x92>
   1e5bb:	jmp    1e5e0 <is_valid_ipv6_address+0xe0>
   1e5bd:	nop    DWORD PTR [rax]
   1e5c0:	cmp    r10d,0xe
   1e5c4:	setg   dl
   1e5c7:	cmp    rsi,rdi
   1e5ca:	sete   al
   1e5cd:	or     al,dl
   1e5cf:	jne    1e592 <is_valid_ipv6_address+0x92>
   1e5d1:	add    r10d,0x2
   1e5d5:	mov    rbp,rdi
   1e5d8:	xor    r8d,r8d
   1e5db:	jmp    1e540 <is_valid_ipv6_address+0x40>
   1e5e0:	mov    eax,0x1
   1e5e5:	cmp    rsi,rdi
   1e5e8:	jne    1e540 <is_valid_ipv6_address+0x40>
   1e5ee:	test   al,al
   1e5f0:	je     1e5fe <is_valid_ipv6_address+0xfe>
   1e5f2:	xor    eax,eax
   1e5f4:	cmp    r10d,0xe
   1e5f8:	jg     1e594 <is_valid_ipv6_address+0x94>
   1e5fa:	add    r10d,0x2
   1e5fe:	test   r11,r11
   1e601:	je     1e663 <is_valid_ipv6_address+0x163>
   1e603:	cmp    r10d,0x10
   1e607:	setne  al
   1e60a:	jmp    1e594 <is_valid_ipv6_address+0x94>
   1e60c:	nop    DWORD PTR [rax+0x0]
   1e610:	lea    rdx,[rdi+0x1]
   1e614:	xor    eax,eax
   1e616:	cmp    rsi,rdx
   1e619:	je     1e638 <is_valid_ipv6_address+0x138>
   1e61b:	cmp    BYTE PTR [rdi+0x1],0x3a
   1e61f:	je     1e628 <is_valid_ipv6_address+0x128>
   1e621:	ret    
   1e622:	nop    WORD PTR [rax+rax*1+0x0]
   1e628:	mov    rdi,rdx
   1e62b:	jmp    1e516 <is_valid_ipv6_address+0x16>
   1e630:	xor    eax,eax
   1e632:	ret    
   1e633:	nop    DWORD PTR [rax+rax*1+0x0]
   1e638:	ret    
   1e639:	cmp    ecx,0x2e
   1e63c:	sete   dl
   1e63f:	cmp    r10d,0xc
   1e643:	setle  al
   1e646:	and    al,dl
   1e648:	je     1e594 <is_valid_ipv6_address+0x94>
   1e64e:	mov    rdi,rbp
   1e651:	call   1e1c0 <is_valid_ipv4_address>
   1e656:	add    r10d,0x4
   1e65a:	test   al,al
   1e65c:	jne    1e5fe <is_valid_ipv6_address+0xfe>
   1e65e:	jmp    1e594 <is_valid_ipv6_address+0x94>
   1e663:	cmp    r10d,0x10
   1e667:	sete   al
   1e66a:	jmp    1e594 <is_valid_ipv6_address+0x94>
   1e66f:	nop

000000000001e670 <lookup_host>:
   1e670:	endbr64 
   1e674:	push   r15
   1e676:	mov    r15d,esi
   1e679:	push   r14
   1e67b:	and    r15d,0x1
   1e67f:	push   r13
   1e681:	mov    r13,rdi
   1e684:	push   r12
   1e686:	mov    r12d,esi
   1e689:	push   rbp
   1e68a:	mov    ebp,r12d
   1e68d:	push   rbx
   1e68e:	and    ebp,0x2
   1e691:	sub    rsp,0x98
   1e698:	movsd  xmm2,QWORD PTR [rip+0x6bbd8]        # 8a278 <opt+0x1f8>
   1e6a0:	mov    rax,QWORD PTR fs:0x28
   1e6a9:	mov    QWORD PTR [rsp+0x88],rax
   1e6b1:	xor    eax,eax
   1e6b3:	movsd  QWORD PTR [rsp],xmm2
   1e6b8:	call   c310 <strlen@plt>
   1e6bd:	mov    rdi,r13
   1e6c0:	lea    rsi,[r13+rax*1+0x0]
   1e6c5:	call   1e1c0 <is_valid_ipv4_address>
   1e6ca:	test   al,al
   1e6cc:	jne    1e6f0 <lookup_host+0x80>
   1e6ce:	mov    rdi,r13
   1e6d1:	call   1e500 <is_valid_ipv6_address>
   1e6d6:	mov    ebx,eax
   1e6d8:	test   al,al
   1e6da:	je     1e980 <lookup_host+0x310>
   1e6e0:	mov    BYTE PTR [rsp+0xf],0x0
   1e6e5:	xor    ebx,ebx
   1e6e7:	jmp    1e6f7 <lookup_host+0x87>
   1e6e9:	nop    DWORD PTR [rax+0x0]
   1e6f0:	mov    BYTE PTR [rsp+0xf],0x0
   1e6f5:	xor    ebx,ebx
   1e6f7:	pxor   xmm0,xmm0
   1e6fb:	cmp    BYTE PTR [rip+0x6bcbc],0x0        # 8a3be <opt+0x33e>
   1e702:	movaps XMMWORD PTR [rsp+0x50],xmm0
   1e707:	movaps XMMWORD PTR [rsp+0x60],xmm0
   1e70c:	mov    DWORD PTR [rsp+0x58],0x1
   1e714:	movaps XMMWORD PTR [rsp+0x70],xmm0
   1e719:	jne    1e970 <lookup_host+0x300>
   1e71f:	cmp    BYTE PTR [rip+0x6bc99],0x0        # 8a3bf <opt+0x33f>
   1e726:	je     1ea40 <lookup_host+0x3d0>
   1e72c:	mov    DWORD PTR [rsp+0x54],0xa
   1e734:	test   ebp,ebp
   1e736:	je     1e740 <lookup_host+0xd0>
   1e738:	mov    DWORD PTR [rsp+0x50],0x1
   1e740:	test   al,al
   1e742:	je     1e752 <lookup_host+0xe2>
   1e744:	or     DWORD PTR [rsp+0x50],0x4
   1e749:	pxor   xmm3,xmm3
   1e74d:	movsd  QWORD PTR [rsp],xmm3
   1e752:	lea    rax,[rsp+0x50]
   1e757:	movsd  xmm0,QWORD PTR [rsp]
   1e75c:	lea    rsi,[rsp+0x20]
   1e761:	mov    QWORD PTR [rsp+0x20],r13
   1e766:	mov    QWORD PTR [rsp+0x30],rax
   1e76b:	lea    rdi,[rip+0xffffffffffffface]        # 1e240 <getaddrinfo_with_timeout_callback>
   1e772:	lea    rax,[rsp+0x18]
   1e777:	mov    QWORD PTR [rsp+0x28],0x0
   1e780:	mov    QWORD PTR [rsp+0x38],rax
   1e785:	call   3ea60 <run_with_timeout>
   1e78a:	test   al,al
   1e78c:	jne    1ec40 <lookup_host+0x5d0>
   1e792:	mov    r14d,DWORD PTR [rsp+0x40]
   1e797:	test   r14d,r14d
   1e79a:	jne    1eb40 <lookup_host+0x4d0>
   1e7a0:	mov    rbp,QWORD PTR [rsp+0x18]
   1e7a5:	test   rbp,rbp
   1e7a8:	je     1eb60 <lookup_host+0x4f0>
   1e7ae:	mov    r12,rbp
   1e7b1:	nop    DWORD PTR [rax+0x0]
   1e7b8:	mov    eax,DWORD PTR [r12+0x4]
   1e7bd:	mov    r12,QWORD PTR [r12+0x28]
   1e7c2:	and    eax,0xfffffff7
   1e7c5:	cmp    eax,0x2
   1e7c8:	sete   al
   1e7cb:	movzx  eax,al
   1e7ce:	add    r14d,eax
   1e7d1:	test   r12,r12
   1e7d4:	jne    1e7b8 <lookup_host+0x148>
   1e7d6:	test   r14d,r14d
   1e7d9:	je     1eaf0 <lookup_host+0x480>
   1e7df:	mov    esi,0x20
   1e7e4:	mov    edi,0x1
   1e7e9:	call   4b9c0 <xcalloc>
   1e7ee:	mov    r12,rax
   1e7f1:	movsxd rax,r14d
   1e7f4:	lea    rdi,[rax+rax*2]
   1e7f8:	shl    rdi,0x3
   1e7fc:	call   4b850 <xmalloc>
   1e801:	mov    DWORD PTR [r12],r14d
   1e805:	mov    QWORD PTR [r12+0x8],rax
   1e80a:	mov    DWORD PTR [r12+0x18],0x1
   1e813:	jmp    1e83b <lookup_host+0x1cb>
   1e815:	nop    DWORD PTR [rax]
   1e818:	cmp    edx,0x2
   1e81b:	jne    1e832 <lookup_host+0x1c2>
   1e81d:	mov    rdx,QWORD PTR [rbp+0x18]
   1e821:	add    rax,0x18
   1e825:	mov    DWORD PTR [rax-0x18],0x2
   1e82c:	mov    edx,DWORD PTR [rdx+0x4]
   1e82f:	mov    DWORD PTR [rax-0x14],edx
   1e832:	mov    rbp,QWORD PTR [rbp+0x28]
   1e836:	test   rbp,rbp
   1e839:	je     1e869 <lookup_host+0x1f9>
   1e83b:	mov    edx,DWORD PTR [rbp+0x4]
   1e83e:	cmp    edx,0xa
   1e841:	jne    1e818 <lookup_host+0x1a8>
   1e843:	mov    rdx,QWORD PTR [rbp+0x18]
   1e847:	mov    rbp,QWORD PTR [rbp+0x28]
   1e84b:	mov    DWORD PTR [rax],0xa
   1e851:	add    rax,0x18
   1e855:	movdqu xmm1,XMMWORD PTR [rdx+0x8]
   1e85a:	mov    edx,DWORD PTR [rdx+0x18]
   1e85d:	movups XMMWORD PTR [rax-0x14],xmm1
   1e861:	mov    DWORD PTR [rax-0x4],edx
   1e864:	test   rbp,rbp
   1e867:	jne    1e83b <lookup_host+0x1cb>
   1e869:	mov    rdi,QWORD PTR [rsp+0x18]
   1e86e:	call   c2d0 <freeaddrinfo@plt>
   1e873:	movsxd rsi,DWORD PTR [r12]
   1e877:	cmp    esi,0x1
   1e87a:	jle    1e8aa <lookup_host+0x23a>
   1e87c:	mov    eax,DWORD PTR [rip+0x6bb3e]        # 8a3c0 <opt+0x340>
   1e882:	cmp    eax,0x2
   1e885:	je     1e8aa <lookup_host+0x23a>
   1e887:	test   eax,eax
   1e889:	mov    rdi,QWORD PTR [r12+0x8]
   1e88e:	mov    edx,0x18
   1e893:	lea    rcx,[rip+0xfffffffffffff8e6]        # 1e180 <cmp_prefer_ipv4>
   1e89a:	lea    rax,[rip+0xfffffffffffff8ff]        # 1e1a0 <cmp_prefer_ipv6>
   1e8a1:	cmovne rcx,rax
   1e8a5:	call   3f0a0 <stable_sort>
   1e8aa:	test   bl,bl
   1e8ac:	je     1e938 <lookup_host+0x2c8>
   1e8b2:	cmp    BYTE PTR [rip+0x6bb21],0x0        # 8a3da <opt+0x35a>
   1e8b9:	mov    eax,DWORD PTR [r12]
   1e8bd:	je     1eb20 <lookup_host+0x4b0>
   1e8c3:	mov    ebp,eax
   1e8c5:	test   eax,eax
   1e8c7:	jle    1e92a <lookup_host+0x2ba>
   1e8c9:	lea    ebx,[rbp-0x1]
   1e8cc:	xor    r14d,r14d
   1e8cf:	lea    r15,[rip+0x47983]        # 66259 <primes.6089+0x179>
   1e8d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1e8e0:	mov    rcx,QWORD PTR [r12+0x8]
   1e8e5:	lea    rax,[r14+r14*2]
   1e8e9:	lea    rdi,[rcx+rax*8]
   1e8ed:	call   1e490 <print_address>
   1e8f2:	xor    edi,edi
   1e8f4:	mov    rsi,rax
   1e8f7:	call   2de60 <logputs>
   1e8fc:	cmp    ebx,r14d
   1e8ff:	jle    1e90b <lookup_host+0x29b>
   1e901:	mov    rsi,r15
   1e904:	xor    edi,edi
   1e906:	call   2de60 <logputs>
   1e90b:	add    r14,0x1
   1e90f:	cmp    ebp,r14d
   1e912:	jg     1e8e0 <lookup_host+0x270>
   1e914:	mov    eax,DWORD PTR [r12]
   1e918:	cmp    ebp,eax
   1e91a:	je     1e92a <lookup_host+0x2ba>
   1e91c:	lea    rsi,[rip+0x47939]        # 6625c <primes.6089+0x17c>
   1e923:	xor    edi,edi
   1e925:	call   2de60 <logputs>
   1e92a:	lea    rsi,[rip+0x4709e]        # 659cf <yy_accept+0x90f>
   1e931:	xor    edi,edi
   1e933:	call   2de60 <logputs>
   1e938:	cmp    BYTE PTR [rsp+0xf],0x0
   1e93d:	jne    1ea50 <lookup_host+0x3e0>
   1e943:	mov    rax,QWORD PTR [rsp+0x88]
   1e94b:	xor    rax,QWORD PTR fs:0x28
   1e954:	jne    1ec77 <lookup_host+0x607>
   1e95a:	add    rsp,0x98
   1e961:	mov    rax,r12
   1e964:	pop    rbx
   1e965:	pop    rbp
   1e966:	pop    r12
   1e968:	pop    r13
   1e96a:	pop    r14
   1e96c:	pop    r15
   1e96e:	ret    
   1e96f:	nop
   1e970:	mov    DWORD PTR [rsp+0x54],0x2
   1e978:	jmp    1e734 <lookup_host+0xc4>
   1e97d:	nop    DWORD PTR [rax]
   1e980:	movzx  eax,BYTE PTR [rip+0x6b7d9]        # 8a160 <opt+0xe0>
   1e987:	mov    BYTE PTR [rsp+0xf],al
   1e98b:	test   ebp,ebp
   1e98d:	je     1e9f8 <lookup_host+0x388>
   1e98f:	mov    BYTE PTR [rsp+0xf],0x0
   1e994:	test   r15d,r15d
   1e997:	jne    1ec7c <lookup_host+0x60c>
   1e99d:	cmp    BYTE PTR [rip+0x6ba22],0x0        # 8a3c6 <opt+0x346>
   1e9a4:	jne    1eba0 <lookup_host+0x530>
   1e9aa:	mov    rsi,r13
   1e9ad:	xor    r14d,r14d
   1e9b0:	mov    edi,0x7
   1e9b5:	mov    ebx,0x1
   1e9ba:	call   4b2b0 <quotearg_style>
   1e9bf:	mov    edx,0x5
   1e9c4:	lea    rsi,[rip+0x4787d]        # 66248 <primes.6089+0x168>
   1e9cb:	xor    edi,edi
   1e9cd:	mov    r12,rax
   1e9d0:	call   c780 <dcgettext@plt>
   1e9d5:	mov    rdx,r12
   1e9d8:	xor    edi,edi
   1e9da:	mov    rsi,rax
   1e9dd:	xor    eax,eax
   1e9df:	call   2e0a0 <logprintf>
   1e9e4:	mov    rdi,r14
   1e9e7:	call   4bdc0 <rpl_free>
   1e9ec:	xor    eax,eax
   1e9ee:	jmp    1e6f7 <lookup_host+0x87>
   1e9f3:	nop    DWORD PTR [rax+rax*1+0x0]
   1e9f8:	test   al,al
   1e9fa:	je     1e994 <lookup_host+0x324>
   1e9fc:	and    r12d,0x4
   1ea00:	mov    rdi,QWORD PTR [rip+0x64c19]        # 83620 <host_name_addresses_map>
   1ea07:	jne    1ebe8 <lookup_host+0x578>
   1ea0d:	test   rdi,rdi
   1ea10:	je     1e994 <lookup_host+0x324>
   1ea12:	mov    rsi,r13
   1ea15:	call   1da70 <hash_table_get>
   1ea1a:	mov    r12,rax
   1ea1d:	test   rax,rax
   1ea20:	je     1e994 <lookup_host+0x324>
   1ea26:	cmp    BYTE PTR [rip+0x6b88e],0x0        # 8a2bb <opt+0x23b>
   1ea2d:	jne    1ec5e <lookup_host+0x5ee>
   1ea33:	add    DWORD PTR [r12+0x18],0x1
   1ea39:	jmp    1e943 <lookup_host+0x2d3>
   1ea3e:	xchg   ax,ax
   1ea40:	mov    DWORD PTR [rsp+0x54],0x0
   1ea48:	jmp    1e734 <lookup_host+0xc4>
   1ea4d:	nop    DWORD PTR [rax]
   1ea50:	cmp    QWORD PTR [rip+0x64bc8],0x0        # 83620 <host_name_addresses_map>
   1ea58:	je     1ec20 <lookup_host+0x5b0>
   1ea5e:	add    DWORD PTR [r12+0x18],0x1
   1ea64:	mov    rdi,r13
   1ea67:	call   3b850 <xstrdup_lower>
   1ea6c:	mov    rdi,QWORD PTR [rip+0x64bad]        # 83620 <host_name_addresses_map>
   1ea73:	mov    rdx,r12
   1ea76:	mov    rsi,rax
   1ea79:	call   1dc80 <hash_table_put>
   1ea7e:	cmp    BYTE PTR [rip+0x6b836],0x0        # 8a2bb <opt+0x23b>
   1ea85:	je     1e943 <lookup_host+0x2d3>
   1ea8b:	xor    eax,eax
   1ea8d:	mov    rsi,r13
   1ea90:	lea    rdi,[rip+0x477cb]        # 66262 <primes.6089+0x182>
   1ea97:	xor    ebx,ebx
   1ea99:	call   2e250 <debug_logprintf>
   1ea9e:	mov    eax,DWORD PTR [r12]
   1eaa2:	lea    rbp,[rip+0x489b3]        # 6745c <primes.6089+0x137c>
   1eaa9:	test   eax,eax
   1eaab:	jle    1ead9 <lookup_host+0x469>
   1eaad:	nop    DWORD PTR [rax]
   1eab0:	mov    rax,QWORD PTR [r12+0x8]
   1eab5:	lea    rdx,[rbx+rbx*2]
   1eab9:	add    rbx,0x1
   1eabd:	lea    rdi,[rax+rdx*8]
   1eac1:	call   1e490 <print_address>
   1eac6:	mov    rdi,rbp
   1eac9:	mov    rsi,rax
   1eacc:	xor    eax,eax
   1eace:	call   2e250 <debug_logprintf>
   1ead3:	cmp    DWORD PTR [r12],ebx
   1ead7:	jg     1eab0 <lookup_host+0x440>
   1ead9:	lea    rdi,[rip+0x46eef]        # 659cf <yy_accept+0x90f>
   1eae0:	xor    eax,eax
   1eae2:	call   2e250 <debug_logprintf>
   1eae7:	jmp    1e943 <lookup_host+0x2d3>
   1eaec:	nop    DWORD PTR [rax+0x0]
   1eaf0:	mov    rdi,rbp
   1eaf3:	call   c2d0 <freeaddrinfo@plt>
   1eaf8:	xor    edi,edi
   1eafa:	mov    edx,0x5
   1eaff:	lea    rsi,[rip+0x4781a]        # 66320 <primes.6089+0x240>
   1eb06:	call   c780 <dcgettext@plt>
   1eb0b:	xor    edi,edi
   1eb0d:	mov    rsi,rax
   1eb10:	xor    eax,eax
   1eb12:	call   2e0a0 <logprintf>
   1eb17:	jmp    1e943 <lookup_host+0x2d3>
   1eb1c:	nop    DWORD PTR [rax+0x0]
   1eb20:	cmp    eax,0x3
   1eb23:	mov    ebp,0x3
   1eb28:	cmovle ebp,eax
   1eb2b:	test   eax,eax
   1eb2d:	jg     1e8c9 <lookup_host+0x259>
   1eb33:	jmp    1e918 <lookup_host+0x2a8>
   1eb38:	nop    DWORD PTR [rax+rax*1+0x0]
   1eb40:	test   r15d,r15d
   1eb43:	jne    1eb92 <lookup_host+0x522>
   1eb45:	cmp    r14d,0xfffffff5
   1eb49:	jne    1ec38 <lookup_host+0x5c8>
   1eb4f:	call   c740 <__errno_location@plt>
   1eb54:	mov    edi,DWORD PTR [rax]
   1eb56:	call   c540 <strerror@plt>
   1eb5b:	mov    r12,rax
   1eb5e:	jmp    1eb70 <lookup_host+0x500>
   1eb60:	test   r15d,r15d
   1eb63:	jne    1eb92 <lookup_host+0x522>
   1eb65:	mov    edi,r15d
   1eb68:	call   ca80 <gai_strerror@plt>
   1eb6d:	mov    r12,rax
   1eb70:	mov    edx,0x5
   1eb75:	lea    rsi,[rip+0x3c66e]        # 5b1ea <_IO_stdin_used+0x1ea>
   1eb7c:	xor    edi,edi
   1eb7e:	call   c780 <dcgettext@plt>
   1eb83:	mov    rdx,r12
   1eb86:	xor    edi,edi
   1eb88:	mov    rsi,rax
   1eb8b:	xor    eax,eax
   1eb8d:	call   2e0a0 <logprintf>
   1eb92:	xor    r12d,r12d
   1eb95:	jmp    1e943 <lookup_host+0x2d3>
   1eb9a:	nop    WORD PTR [rax+rax*1+0x0]
   1eba0:	mov    rdi,r13
   1eba3:	call   3fe00 <idn_decode>
   1eba8:	mov    r12,rax
   1ebab:	test   rax,rax
   1ebae:	je     1e9aa <lookup_host+0x33a>
   1ebb4:	mov    rsi,rax
   1ebb7:	mov    rdx,r13
   1ebba:	lea    rdi,[rip+0x3c5b3]        # 5b174 <_IO_stdin_used+0x174>
   1ebc1:	xor    eax,eax
   1ebc3:	call   3ba30 <aprintf>
   1ebc8:	mov    rdi,r12
   1ebcb:	mov    r14,rax
   1ebce:	call   4bdc0 <rpl_free>
   1ebd3:	test   r14,r14
   1ebd6:	mov    rsi,r13
   1ebd9:	cmovne rsi,r14
   1ebdd:	jmp    1e9b0 <lookup_host+0x340>
   1ebe2:	nop    WORD PTR [rax+rax*1+0x0]
   1ebe8:	test   rdi,rdi
   1ebeb:	je     1e994 <lookup_host+0x324>
   1ebf1:	mov    rsi,r13
   1ebf4:	call   1da70 <hash_table_get>
   1ebf9:	mov    rdi,rax
   1ebfc:	test   rax,rax
   1ebff:	je     1e994 <lookup_host+0x324>
   1ec05:	call   1e410 <address_list_release>
   1ec0a:	mov    rdi,QWORD PTR [rip+0x64a0f]        # 83620 <host_name_addresses_map>
   1ec11:	mov    rsi,r13
   1ec14:	call   1dec0 <hash_table_remove>
   1ec19:	jmp    1e994 <lookup_host+0x324>
   1ec1e:	xchg   ax,ax
   1ec20:	xor    edi,edi
   1ec22:	call   1e160 <make_nocase_string_hash_table>
   1ec27:	mov    QWORD PTR [rip+0x649f2],rax        # 83620 <host_name_addresses_map>
   1ec2e:	jmp    1ea5e <lookup_host+0x3ee>
   1ec33:	nop    DWORD PTR [rax+rax*1+0x0]
   1ec38:	mov    r15d,r14d
   1ec3b:	jmp    1eb65 <lookup_host+0x4f5>
   1ec40:	call   c740 <__errno_location@plt>
   1ec45:	mov    DWORD PTR [rax],0x6e
   1ec4b:	test   r15d,r15d
   1ec4e:	jne    1eb92 <lookup_host+0x522>
   1ec54:	mov    edi,0x6e
   1ec59:	jmp    1eb56 <lookup_host+0x4e6>
   1ec5e:	mov    rdx,rax
   1ec61:	mov    rsi,r13
   1ec64:	lea    rdi,[rip+0x47685]        # 662f0 <primes.6089+0x210>
   1ec6b:	xor    eax,eax
   1ec6d:	call   2e250 <debug_logprintf>
   1ec72:	jmp    1ea33 <lookup_host+0x3c3>
   1ec77:	call   c7b0 <__stack_chk_fail@plt>
   1ec7c:	xor    eax,eax
   1ec7e:	jmp    1e6f7 <lookup_host+0x87>
   1ec83:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1ec8e:	xchg   ax,ax

000000000001ec90 <sufmatch>:
   1ec90:	endbr64 
   1ec94:	push   r15
   1ec96:	push   r14
   1ec98:	mov    r14,rdi
   1ec9b:	mov    rdi,rsi
   1ec9e:	push   r13
   1eca0:	mov    r13,rsi
   1eca3:	push   r12
   1eca5:	push   rbp
   1eca6:	push   rbx
   1eca7:	sub    rsp,0x8
   1ecab:	call   c310 <strlen@plt>
   1ecb0:	mov    r15,QWORD PTR [r14]
   1ecb3:	test   r15,r15
   1ecb6:	je     1ed8e <sufmatch+0xfe>
   1ecbc:	mov    ebp,eax
   1ecbe:	mov    ebx,eax
   1ecc0:	lea    r12d,[rax-0x1]
   1ecc4:	add    r14,0x8
   1ecc8:	not    ebp
   1ecca:	shr    ebp,0x1f
   1eccd:	jmp    1ece0 <sufmatch+0x50>
   1eccf:	nop
   1ecd0:	mov    r15,QWORD PTR [r14]
   1ecd3:	add    r14,0x8
   1ecd7:	test   r15,r15
   1ecda:	je     1ed8e <sufmatch+0xfe>
   1ece0:	mov    rdi,r15
   1ece3:	call   c310 <strlen@plt>
   1ece8:	mov    esi,eax
   1ecea:	cmp    ebx,eax
   1ecec:	jl     1ecd0 <sufmatch+0x40>
   1ecee:	test   eax,eax
   1ecf0:	js     1ed9f <sufmatch+0x10f>
   1ecf6:	test   bpl,bpl
   1ecf9:	je     1ed9f <sufmatch+0x10f>
   1ecff:	sub    eax,0x1
   1ed02:	movsxd rdi,r12d
   1ed05:	cdqe   
   1ed07:	nop    WORD PTR [rax+rax*1+0x0]
   1ed10:	movsx  edx,BYTE PTR [r15+rax*1+0x1]
   1ed16:	lea    esi,[rdx-0x41]
   1ed19:	lea    ecx,[rdx+0x20]
   1ed1c:	cmp    esi,0x1a
   1ed1f:	cmovb  edx,ecx
   1ed22:	movsx  ecx,BYTE PTR [r13+rdi*1+0x1]
   1ed28:	lea    r8d,[rcx-0x41]
   1ed2c:	lea    esi,[rcx+0x20]
   1ed2f:	cmp    r8d,0x1a
   1ed33:	cmovb  ecx,esi
   1ed36:	cmp    ecx,edx
   1ed38:	jne    1ecd0 <sufmatch+0x40>
   1ed3a:	mov    ecx,eax
   1ed3c:	mov    edx,edi
   1ed3e:	mov    esi,eax
   1ed40:	movsxd r8,edi
   1ed43:	not    ecx
   1ed45:	not    edx
   1ed47:	sub    rax,0x1
   1ed4b:	sub    rdi,0x1
   1ed4f:	shr    ecx,0x1f
   1ed52:	shr    edx,0x1f
   1ed55:	test   cl,dl
   1ed57:	jne    1ed10 <sufmatch+0x80>
   1ed59:	cmp    esi,0xffffffff
   1ed5c:	jne    1ecd0 <sufmatch+0x40>
   1ed62:	cmp    r8d,0xffffffff
   1ed66:	je     1ed7a <sufmatch+0xea>
   1ed68:	cmp    BYTE PTR [r13+r8*1+0x0],0x2e
   1ed6e:	je     1ed7a <sufmatch+0xea>
   1ed70:	cmp    BYTE PTR [r15],0x2e
   1ed74:	jne    1ecd0 <sufmatch+0x40>
   1ed7a:	add    rsp,0x8
   1ed7e:	mov    eax,0x1
   1ed83:	pop    rbx
   1ed84:	pop    rbp
   1ed85:	pop    r12
   1ed87:	pop    r13
   1ed89:	pop    r14
   1ed8b:	pop    r15
   1ed8d:	ret    
   1ed8e:	add    rsp,0x8
   1ed92:	xor    eax,eax
   1ed94:	pop    rbx
   1ed95:	pop    rbp
   1ed96:	pop    r12
   1ed98:	pop    r13
   1ed9a:	pop    r14
   1ed9c:	pop    r15
   1ed9e:	ret    
   1ed9f:	movsxd r8,ebx
   1eda2:	jmp    1ed59 <sufmatch+0xc9>
   1eda4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1edaf:	nop

000000000001edb0 <accept_domain>:
   1edb0:	endbr64 
   1edb4:	push   rbx
   1edb5:	mov    rbx,rdi
   1edb8:	mov    rdi,QWORD PTR [rip+0x6b391]        # 8a150 <opt+0xd0>
   1edbf:	test   rdi,rdi
   1edc2:	je     1edd1 <accept_domain+0x21>
   1edc4:	mov    rsi,QWORD PTR [rbx+0x10]
   1edc8:	call   1ec90 <sufmatch>
   1edcd:	test   al,al
   1edcf:	je     1edee <accept_domain+0x3e>
   1edd1:	mov    rdi,QWORD PTR [rip+0x6b380]        # 8a158 <opt+0xd8>
   1edd8:	mov    eax,0x1
   1eddd:	test   rdi,rdi
   1ede0:	je     1edee <accept_domain+0x3e>
   1ede2:	mov    rsi,QWORD PTR [rbx+0x10]
   1ede6:	call   1ec90 <sufmatch>
   1edeb:	xor    eax,0x1
   1edee:	pop    rbx
   1edef:	ret    

000000000001edf0 <is_valid_ip_address>:
   1edf0:	endbr64 
   1edf4:	push   rbp
   1edf5:	mov    rbp,rdi
   1edf8:	call   c310 <strlen@plt>
   1edfd:	mov    rdi,rbp
   1ee00:	lea    rsi,[rbp+rax*1+0x0]
   1ee05:	call   1e1c0 <is_valid_ipv4_address>
   1ee0a:	test   al,al
   1ee0c:	jne    1ee20 <is_valid_ip_address+0x30>
   1ee0e:	mov    rdi,rbp
   1ee11:	pop    rbp
   1ee12:	jmp    1e500 <is_valid_ipv6_address>
   1ee17:	nop    WORD PTR [rax+rax*1+0x0]
   1ee20:	pop    rbp
   1ee21:	ret    
   1ee22:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1ee2c:	nop    DWORD PTR [rax+0x0]

000000000001ee30 <hsts_hash_func>:
   1ee30:	endbr64 
   1ee34:	mov    rsi,QWORD PTR [rdi]
   1ee37:	mov    ecx,DWORD PTR [rdi+0x8]
   1ee3a:	movsx  edx,BYTE PTR [rsi]
   1ee3d:	test   dl,dl
   1ee3f:	je     1ee5d <hsts_hash_func+0x2d>
   1ee41:	nop    DWORD PTR [rax+0x0]
   1ee48:	mov    eax,ecx
   1ee4a:	add    rsi,0x1
   1ee4e:	shl    eax,0x5
   1ee51:	sub    eax,ecx
   1ee53:	lea    ecx,[rdx+rax*1]
   1ee56:	movsx  edx,BYTE PTR [rsi]
   1ee59:	test   dl,dl
   1ee5b:	jne    1ee48 <hsts_hash_func+0x18>
   1ee5d:	mov    eax,ecx
   1ee5f:	ret    

000000000001ee60 <hsts_cmp_func>:
   1ee60:	endbr64 
   1ee64:	push   rbp
   1ee65:	mov    rbp,rdi
   1ee68:	push   rbx
   1ee69:	mov    rbx,rsi
   1ee6c:	sub    rsp,0x8
   1ee70:	mov    rsi,QWORD PTR [rsi]
   1ee73:	mov    rdi,QWORD PTR [rdi]
   1ee76:	call   be40 <strcmp@plt>
   1ee7b:	mov    r8d,eax
   1ee7e:	xor    eax,eax
   1ee80:	test   r8d,r8d
   1ee83:	jne    1ee91 <hsts_cmp_func+0x31>
   1ee85:	mov    eax,DWORD PTR [rbx+0x8]
   1ee88:	cmp    DWORD PTR [rbp+0x8],eax
   1ee8b:	sete   al
   1ee8e:	movzx  eax,al
   1ee91:	add    rsp,0x8
   1ee95:	pop    rbx
   1ee96:	pop    rbp
   1ee97:	ret    
   1ee98:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001eea0 <hsts_read_database>:
   1eea0:	push   r15
   1eea2:	mov    r15,rdi
   1eea5:	push   r14
   1eea7:	lea    r14,[rip+0x3a2]        # 1f250 <hsts_store_merge>
   1eeae:	push   r13
   1eeb0:	push   r12
   1eeb2:	push   rbp
   1eeb3:	push   rbx
   1eeb4:	mov    rbx,rsi
   1eeb7:	sub    rsp,0x158
   1eebe:	mov    rax,QWORD PTR fs:0x28
   1eec7:	mov    QWORD PTR [rsp+0x148],rax
   1eecf:	xor    eax,eax
   1eed1:	test   dl,dl
   1eed3:	lea    r12,[rsp+0x28]
   1eed8:	lea    rax,[rip+0x451]        # 1f330 <hsts_new_entry>
   1eedf:	cmovne rax,r14
   1eee3:	lea    rbp,[rsp+0x20]
   1eee8:	lea    r13,[rsp+0x30]
   1eeed:	mov    QWORD PTR [rsp+0x20],0x0
   1eef6:	mov    QWORD PTR [rsp+0x28],0x0
   1eeff:	mov    QWORD PTR [rsp+0x8],rax
   1ef04:	nop    DWORD PTR [rax+0x0]
   1ef08:	mov    rdi,rbp
   1ef0b:	mov    rcx,rbx
   1ef0e:	mov    edx,0xa
   1ef13:	mov    rsi,r12
   1ef16:	call   be90 <__getdelim@plt>
   1ef1b:	mov    rdi,QWORD PTR [rsp+0x20]
   1ef20:	test   rax,rax
   1ef23:	jle    1efc0 <hsts_read_database+0x120>
   1ef29:	movzx  eax,BYTE PTR [rdi]
   1ef2c:	cmp    al,0xd
   1ef2e:	jg     1ef98 <hsts_read_database+0xf8>
   1ef30:	cmp    al,0x8
   1ef32:	jg     1efb0 <hsts_read_database+0x110>
   1ef34:	lea    rcx,[rsp+0x18]
   1ef39:	lea    r14,[rsp+0x40]
   1ef3e:	sub    rsp,0x8
   1ef42:	mov    r9,r13
   1ef45:	lea    rax,[rsp+0x40]
   1ef4a:	mov    rdx,r14
   1ef4d:	lea    rsi,[rip+0x473f6]        # 6634a <primes.6089+0x26a>
   1ef54:	push   rax
   1ef55:	xor    eax,eax
   1ef57:	lea    r8,[rsp+0x2c]
   1ef5c:	call   c030 <__isoc99_sscanf@plt>
   1ef61:	pop    rdx
   1ef62:	pop    rcx
   1ef63:	cmp    eax,0x5
   1ef66:	jne    1ef08 <hsts_read_database+0x68>
   1ef68:	mov    eax,DWORD PTR [rsp+0x1c]
   1ef6c:	xor    r9d,r9d
   1ef6f:	mov    r8,QWORD PTR [rsp+0x38]
   1ef74:	mov    rsi,r14
   1ef77:	mov    rcx,QWORD PTR [rsp+0x30]
   1ef7c:	mov    edx,DWORD PTR [rsp+0x18]
   1ef80:	mov    rdi,r15
   1ef83:	test   eax,eax
   1ef85:	mov    rax,QWORD PTR [rsp+0x8]
   1ef8a:	setne  r9b
   1ef8e:	call   rax
   1ef90:	jmp    1ef08 <hsts_read_database+0x68>
   1ef95:	nop    DWORD PTR [rax]
   1ef98:	cmp    al,0x20
   1ef9a:	je     1efb0 <hsts_read_database+0x110>
   1ef9c:	cmp    al,0x23
   1ef9e:	je     1ef08 <hsts_read_database+0x68>
   1efa4:	jmp    1ef34 <hsts_read_database+0x94>
   1efa6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1efb0:	add    rdi,0x1
   1efb4:	jmp    1ef29 <hsts_read_database+0x89>
   1efb9:	nop    DWORD PTR [rax+0x0]
   1efc0:	call   4bdc0 <rpl_free>
   1efc5:	mov    rax,QWORD PTR [rsp+0x148]
   1efcd:	xor    rax,QWORD PTR fs:0x28
   1efd6:	jne    1efef <hsts_read_database+0x14f>
   1efd8:	add    rsp,0x158
   1efdf:	mov    eax,0x1
   1efe4:	pop    rbx
   1efe5:	pop    rbp
   1efe6:	pop    r12
   1efe8:	pop    r13
   1efea:	pop    r14
   1efec:	pop    r15
   1efee:	ret    
   1efef:	call   c7b0 <__stack_chk_fail@plt>
   1eff4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1efff:	nop

000000000001f000 <hsts_find_entry.isra.0>:
   1f000:	push   r15
   1f002:	push   r14
   1f004:	push   r13
   1f006:	mov    r13,rsi
   1f009:	push   r12
   1f00b:	mov    r12d,edx
   1f00e:	push   rbp
   1f00f:	push   rbx
   1f010:	mov    rbx,rdi
   1f013:	mov    edi,0x10
   1f018:	sub    rsp,0x18
   1f01c:	mov    QWORD PTR [rsp+0x8],rcx
   1f021:	mov    QWORD PTR [rsp],r8
   1f025:	call   4b850 <xmalloc>
   1f02a:	mov    rdi,r13
   1f02d:	mov    rbp,rax
   1f030:	call   3b850 <xstrdup_lower>
   1f035:	mov    rdi,QWORD PTR [rbx]
   1f038:	mov    rsi,rbp
   1f03b:	mov    DWORD PTR [rbp+0x8],r12d
   1f03f:	mov    QWORD PTR [rbp+0x0],rax
   1f043:	mov    r13,rax
   1f046:	call   1da70 <hash_table_get>
   1f04b:	mov    r12,rax
   1f04e:	mov    eax,0x2
   1f053:	test   r12,r12
   1f056:	je     1f0cf <hsts_find_entry.isra.0+0xcf>
   1f058:	mov    rdx,QWORD PTR [rsp+0x8]
   1f05d:	cmp    QWORD PTR [rsp],0x0
   1f062:	mov    QWORD PTR [rbp+0x0],r13
   1f066:	mov    DWORD PTR [rdx],eax
   1f068:	je     1f0f0 <hsts_find_entry.isra.0+0xf0>
   1f06e:	mov    rax,QWORD PTR [rsp]
   1f072:	movdqu xmm0,XMMWORD PTR [rbp+0x0]
   1f077:	movups XMMWORD PTR [rax],xmm0
   1f07a:	mov    rdi,rbp
   1f07d:	call   4bdc0 <rpl_free>
   1f082:	add    rsp,0x18
   1f086:	mov    rax,r12
   1f089:	pop    rbx
   1f08a:	pop    rbp
   1f08b:	pop    r12
   1f08d:	pop    r13
   1f08f:	pop    r14
   1f091:	pop    r15
   1f093:	ret    
   1f094:	nop    DWORD PTR [rax+0x0]
   1f098:	mov    r15,rax
   1f09b:	sub    r15,r14
   1f09e:	test   r15,r15
   1f0a1:	jle    1f108 <hsts_find_entry.isra.0+0x108>
   1f0a3:	lea    rdi,[rax+0x1]
   1f0a7:	mov    esi,0x2e
   1f0ac:	call   c6c0 <strchr@plt>
   1f0b1:	test   rax,rax
   1f0b4:	je     1f110 <hsts_find_entry.isra.0+0x110>
   1f0b6:	mov    rdi,QWORD PTR [rbx]
   1f0b9:	lea    rax,[r14+r15*1+0x1]
   1f0be:	mov    rsi,rbp
   1f0c1:	mov    QWORD PTR [rbp+0x0],rax
   1f0c5:	call   1da70 <hash_table_get>
   1f0ca:	test   rax,rax
   1f0cd:	jne    1f120 <hsts_find_entry.isra.0+0x120>
   1f0cf:	mov    r14,QWORD PTR [rbp+0x0]
   1f0d3:	mov    esi,0x2e
   1f0d8:	mov    rdi,r14
   1f0db:	call   c6c0 <strchr@plt>
   1f0e0:	test   rax,rax
   1f0e3:	jne    1f098 <hsts_find_entry.isra.0+0x98>
   1f0e5:	xor    r12d,r12d
   1f0e8:	xor    eax,eax
   1f0ea:	jmp    1f058 <hsts_find_entry.isra.0+0x58>
   1f0ef:	nop
   1f0f0:	mov    rdi,r13
   1f0f3:	call   4bdc0 <rpl_free>
   1f0f8:	mov    QWORD PTR [rbp+0x0],0x0
   1f100:	jmp    1f07a <hsts_find_entry.isra.0+0x7a>
   1f105:	nop    DWORD PTR [rax]
   1f108:	xor    eax,eax
   1f10a:	jmp    1f058 <hsts_find_entry.isra.0+0x58>
   1f10f:	nop
   1f110:	xor    r12d,r12d
   1f113:	jmp    1f058 <hsts_find_entry.isra.0+0x58>
   1f118:	nop    DWORD PTR [rax+rax*1+0x0]
   1f120:	mov    r12,rax
   1f123:	mov    eax,0x1
   1f128:	jmp    1f058 <hsts_find_entry.isra.0+0x58>
   1f12d:	nop    DWORD PTR [rax]

000000000001f130 <hsts_new_entry_internal.constprop.0>:
   1f130:	push   r15
   1f132:	push   r14
   1f134:	mov    r14,rdi
   1f137:	mov    edi,0x10
   1f13c:	push   r13
   1f13e:	mov    r13,rsi
   1f141:	push   r12
   1f143:	push   rbp
   1f144:	push   rbx
   1f145:	mov    ebx,edx
   1f147:	sub    rsp,0x28
   1f14b:	mov    eax,DWORD PTR [rsp+0x68]
   1f14f:	mov    r15d,DWORD PTR [rsp+0x60]
   1f154:	mov    QWORD PTR [rsp+0x10],rcx
   1f159:	mov    QWORD PTR [rsp+0x8],r8
   1f15e:	mov    DWORD PTR [rsp+0x18],r9d
   1f163:	mov    DWORD PTR [rsp+0x1c],eax
   1f167:	call   4b850 <xmalloc>
   1f16c:	mov    esi,0x18
   1f171:	mov    edi,0x1
   1f176:	mov    rbp,rax
   1f179:	call   4b9c0 <xcalloc>
   1f17e:	mov    rdi,r13
   1f181:	mov    r12,rax
   1f184:	call   3b850 <xstrdup_lower>
   1f189:	cmp    ebx,0x1bb
   1f18f:	mov    rcx,QWORD PTR [rsp+0x10]
   1f194:	mov    r8,QWORD PTR [rsp+0x8]
   1f199:	mov    QWORD PTR [rbp+0x0],rax
   1f19d:	mov    eax,0x0
   1f1a2:	mov    r9d,DWORD PTR [rsp+0x18]
   1f1a7:	cmove  ebx,eax
   1f1aa:	mov    QWORD PTR [r12],rcx
   1f1ae:	mov    QWORD PTR [r12+0x8],r8
   1f1b3:	mov    DWORD PTR [rbp+0x8],ebx
   1f1b6:	mov    BYTE PTR [r12+0x10],r9b
   1f1bb:	test   r15b,r15b
   1f1be:	jne    1f238 <hsts_new_entry_internal.constprop.0+0x108>
   1f1c0:	test   r8,r8
   1f1c3:	js     1f200 <hsts_new_entry_internal.constprop.0+0xd0>
   1f1c5:	cmp    BYTE PTR [rsp+0x1c],0x0
   1f1ca:	mov    rdi,QWORD PTR [r14]
   1f1cd:	je     1f1de <hsts_new_entry_internal.constprop.0+0xae>
   1f1cf:	mov    rsi,rbp
   1f1d2:	call   1dbf0 <hash_table_contains>
   1f1d7:	test   eax,eax
   1f1d9:	jne    1f200 <hsts_new_entry_internal.constprop.0+0xd0>
   1f1db:	mov    rdi,QWORD PTR [r14]
   1f1de:	mov    rdx,r12
   1f1e1:	mov    rsi,rbp
   1f1e4:	call   1dc80 <hash_table_put>
   1f1e9:	add    rsp,0x28
   1f1ed:	mov    eax,0x1
   1f1f2:	pop    rbx
   1f1f3:	pop    rbp
   1f1f4:	pop    r12
   1f1f6:	pop    r13
   1f1f8:	pop    r14
   1f1fa:	pop    r15
   1f1fc:	ret    
   1f1fd:	nop    DWORD PTR [rax]
   1f200:	mov    rdi,QWORD PTR [rbp+0x0]
   1f204:	call   4bdc0 <rpl_free>
   1f209:	mov    rdi,rbp
   1f20c:	mov    QWORD PTR [rbp+0x0],0x0
   1f214:	call   4bdc0 <rpl_free>
   1f219:	mov    rdi,r12
   1f21c:	call   4bdc0 <rpl_free>
   1f221:	add    rsp,0x28
   1f225:	xor    eax,eax
   1f227:	pop    rbx
   1f228:	pop    rbp
   1f229:	pop    r12
   1f22b:	pop    r13
   1f22d:	pop    r14
   1f22f:	pop    r15
   1f231:	ret    
   1f232:	nop    WORD PTR [rax+rax*1+0x0]
   1f238:	mov    rdi,r13
   1f23b:	call   1edf0 <is_valid_ip_address>
   1f240:	test   al,al
   1f242:	jne    1f200 <hsts_new_entry_internal.constprop.0+0xd0>
   1f244:	mov    r8,QWORD PTR [r12+0x8]
   1f249:	jmp    1f1c0 <hsts_new_entry_internal.constprop.0+0x90>
   1f24e:	xchg   ax,ax

000000000001f250 <hsts_store_merge>:
   1f250:	endbr64 
   1f254:	push   r15
   1f256:	mov    r15,rsi
   1f259:	push   r14
   1f25b:	mov    r14,rdi
   1f25e:	push   r13
   1f260:	mov    r13,rcx
   1f263:	push   r12
   1f265:	mov    r12d,edx
   1f268:	push   rbp
   1f269:	mov    ebp,r9d
   1f26c:	push   rbx
   1f26d:	mov    rbx,r8
   1f270:	sub    rsp,0x18
   1f274:	mov    rax,QWORD PTR fs:0x28
   1f27d:	mov    QWORD PTR [rsp+0x8],rax
   1f282:	xor    eax,eax
   1f284:	cmp    edx,0x1bb
   1f28a:	lea    rcx,[rsp+0x4]
   1f28f:	mov    DWORD PTR [rsp+0x4],0x0
   1f297:	cmove  r12d,eax
   1f29b:	xor    r8d,r8d
   1f29e:	mov    edx,r12d
   1f2a1:	call   1f000 <hsts_find_entry.isra.0>
   1f2a6:	test   rax,rax
   1f2a9:	je     1f300 <hsts_store_merge+0xb0>
   1f2ab:	xor    r8d,r8d
   1f2ae:	cmp    DWORD PTR [rsp+0x4],0x2
   1f2b3:	je     1f2e0 <hsts_store_merge+0x90>
   1f2b5:	mov    rax,QWORD PTR [rsp+0x8]
   1f2ba:	xor    rax,QWORD PTR fs:0x28
   1f2c3:	jne    1f323 <hsts_store_merge+0xd3>
   1f2c5:	add    rsp,0x18
   1f2c9:	mov    eax,r8d
   1f2cc:	pop    rbx
   1f2cd:	pop    rbp
   1f2ce:	pop    r12
   1f2d0:	pop    r13
   1f2d2:	pop    r14
   1f2d4:	pop    r15
   1f2d6:	ret    
   1f2d7:	nop    WORD PTR [rax+rax*1+0x0]
   1f2e0:	cmp    QWORD PTR [rax],r13
   1f2e3:	jge    1f2b5 <hsts_store_merge+0x65>
   1f2e5:	mov    QWORD PTR [rax],r13
   1f2e8:	mov    r8d,0x1
   1f2ee:	mov    QWORD PTR [rax+0x8],rbx
   1f2f2:	mov    BYTE PTR [rax+0x10],bpl
   1f2f6:	jmp    1f2b5 <hsts_store_merge+0x65>
   1f2f8:	nop    DWORD PTR [rax+rax*1+0x0]
   1f300:	push   0x1
   1f302:	mov    r8,rbx
   1f305:	mov    edx,r12d
   1f308:	movzx  r9d,bpl
   1f30c:	push   0x1
   1f30e:	mov    rcx,r13
   1f311:	mov    rsi,r15
   1f314:	mov    rdi,r14
   1f317:	call   1f130 <hsts_new_entry_internal.constprop.0>
   1f31c:	mov    r8d,eax
   1f31f:	pop    rax
   1f320:	pop    rdx
   1f321:	jmp    1f2b5 <hsts_store_merge+0x65>
   1f323:	call   c7b0 <__stack_chk_fail@plt>
   1f328:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001f330 <hsts_new_entry>:
   1f330:	endbr64 
   1f334:	sub    rsp,0x8
   1f338:	movzx  r9d,r9b
   1f33c:	push   0x1
   1f33e:	push   0x1
   1f340:	call   1f130 <hsts_new_entry_internal.constprop.0>
   1f345:	add    rsp,0x18
   1f349:	ret    
   1f34a:	nop    WORD PTR [rax+rax*1+0x0]

000000000001f350 <hsts_match>:
   1f350:	endbr64 
   1f354:	push   r15
   1f356:	push   r14
   1f358:	mov    r14,rsi
   1f35b:	push   r13
   1f35d:	xor    r13d,r13d
   1f360:	push   r12
   1f362:	mov    r12,rdi
   1f365:	mov    edi,0x10
   1f36a:	push   rbp
   1f36b:	push   rbx
   1f36c:	sub    rsp,0x18
   1f370:	mov    rax,QWORD PTR fs:0x28
   1f379:	mov    QWORD PTR [rsp+0x8],rax
   1f37e:	xor    eax,eax
   1f380:	call   4b850 <xmalloc>
   1f385:	cmp    DWORD PTR [r14+0x8],0x1
   1f38a:	mov    DWORD PTR [rsp+0x4],0x0
   1f392:	mov    rbp,rax
   1f395:	je     1f3fc <hsts_match+0xac>
   1f397:	mov    edx,DWORD PTR [r14+0x18]
   1f39b:	mov    eax,0x0
   1f3a0:	mov    rsi,QWORD PTR [r14+0x10]
   1f3a4:	mov    r8,rbp
   1f3a7:	lea    rcx,[rsp+0x4]
   1f3ac:	mov    rdi,r12
   1f3af:	cmp    edx,0x50
   1f3b2:	cmove  edx,eax
   1f3b5:	call   1f000 <hsts_find_entry.isra.0>
   1f3ba:	mov    rbx,rax
   1f3bd:	test   rax,rax
   1f3c0:	je     1f3e8 <hsts_match+0x98>
   1f3c2:	xor    edi,edi
   1f3c4:	mov    r15,QWORD PTR [rax+0x8]
   1f3c8:	add    r15,QWORD PTR [rax]
   1f3cb:	call   cbf0 <time@plt>
   1f3d0:	cmp    r15,rax
   1f3d3:	jl     1f430 <hsts_match+0xe0>
   1f3d5:	mov    eax,DWORD PTR [rsp+0x4]
   1f3d9:	cmp    eax,0x2
   1f3dc:	je     1f44e <hsts_match+0xfe>
   1f3de:	cmp    eax,0x1
   1f3e1:	je     1f448 <hsts_match+0xf8>
   1f3e3:	nop    DWORD PTR [rax+rax*1+0x0]
   1f3e8:	xor    r13d,r13d
   1f3eb:	mov    rdi,QWORD PTR [rbp+0x0]
   1f3ef:	call   4bdc0 <rpl_free>
   1f3f4:	mov    QWORD PTR [rbp+0x0],0x0
   1f3fc:	mov    rdi,rbp
   1f3ff:	call   4bdc0 <rpl_free>
   1f404:	mov    rax,QWORD PTR [rsp+0x8]
   1f409:	xor    rax,QWORD PTR fs:0x28
   1f412:	jne    1f476 <hsts_match+0x126>
   1f414:	add    rsp,0x18
   1f418:	mov    eax,r13d
   1f41b:	pop    rbx
   1f41c:	pop    rbp
   1f41d:	pop    r12
   1f41f:	pop    r13
   1f421:	pop    r14
   1f423:	pop    r15
   1f425:	ret    
   1f426:	nop    WORD PTR cs:[rax+rax*1+0x0]
   1f430:	mov    rdi,QWORD PTR [r12]
   1f434:	mov    rsi,rbp
   1f437:	call   1dec0 <hash_table_remove>
   1f43c:	mov    BYTE PTR [r12+0x10],0x1
   1f442:	jmp    1f3eb <hsts_match+0x9b>
   1f444:	nop    DWORD PTR [rax+0x0]
   1f448:	cmp    BYTE PTR [rbx+0x10],0x0
   1f44c:	je     1f3e8 <hsts_match+0x98>
   1f44e:	cmp    DWORD PTR [r14+0x18],0x50
   1f453:	mov    DWORD PTR [r14+0x8],0x1
   1f45b:	jne    1f465 <hsts_match+0x115>
   1f45d:	mov    DWORD PTR [r14+0x18],0x1bb
   1f465:	mov    BYTE PTR [r12+0x10],0x1
   1f46b:	mov    r13d,0x1
   1f471:	jmp    1f3eb <hsts_match+0x9b>
   1f476:	call   c7b0 <__stack_chk_fail@plt>
   1f47b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001f480 <hsts_store_entry>:
   1f480:	endbr64 
   1f484:	push   r15
   1f486:	mov    r15d,r9d
   1f489:	push   r14
   1f48b:	mov    r14,r8
   1f48e:	push   r13
   1f490:	mov    r13,rdi
   1f493:	mov    edi,0x10
   1f498:	push   r12
   1f49a:	mov    r12d,ecx
   1f49d:	push   rbp
   1f49e:	mov    rbp,rdx
   1f4a1:	push   rbx
   1f4a2:	mov    ebx,esi
   1f4a4:	sub    rsp,0x28
   1f4a8:	mov    rax,QWORD PTR fs:0x28
   1f4b1:	mov    QWORD PTR [rsp+0x18],rax
   1f4b6:	xor    eax,eax
   1f4b8:	mov    DWORD PTR [rsp+0x14],0x0
   1f4c0:	call   4b850 <xmalloc>
   1f4c5:	mov    r10,rax
   1f4c8:	cmp    ebx,0x1
   1f4cb:	je     1f500 <hsts_store_entry+0x80>
   1f4cd:	xor    ebx,ebx
   1f4cf:	mov    rdi,r10
   1f4d2:	call   4bdc0 <rpl_free>
   1f4d7:	mov    rax,QWORD PTR [rsp+0x18]
   1f4dc:	xor    rax,QWORD PTR fs:0x28
   1f4e5:	jne    1f629 <hsts_store_entry+0x1a9>
   1f4eb:	add    rsp,0x28
   1f4ef:	mov    eax,ebx
   1f4f1:	pop    rbx
   1f4f2:	pop    rbp
   1f4f3:	pop    r12
   1f4f5:	pop    r13
   1f4f7:	pop    r14
   1f4f9:	pop    r15
   1f4fb:	ret    
   1f4fc:	nop    DWORD PTR [rax+0x0]
   1f500:	mov    rdi,rbp
   1f503:	mov    QWORD PTR [rsp],rax
   1f507:	call   1edf0 <is_valid_ip_address>
   1f50c:	mov    r10,QWORD PTR [rsp]
   1f510:	test   al,al
   1f512:	mov    ebx,eax
   1f514:	jne    1f4cd <hsts_store_entry+0x4d>
   1f516:	cmp    r12d,0x1bb
   1f51d:	mov    r8,r10
   1f520:	mov    rsi,rbp
   1f523:	mov    rdi,r13
   1f526:	mov    eax,0x0
   1f52b:	lea    rcx,[rsp+0x14]
   1f530:	cmove  r12d,eax
   1f534:	mov    edx,r12d
   1f537:	call   1f000 <hsts_find_entry.isra.0>
   1f53c:	mov    r10,QWORD PTR [rsp]
   1f540:	test   rax,rax
   1f543:	mov    rdx,rax
   1f546:	je     1f5c0 <hsts_store_entry+0x140>
   1f548:	mov    eax,DWORD PTR [rsp+0x14]
   1f54c:	cmp    eax,0x2
   1f54f:	je     1f578 <hsts_store_entry+0xf8>
   1f551:	cmp    eax,0x1
   1f554:	je     1f5c0 <hsts_store_entry+0x140>
   1f556:	mov    rdi,QWORD PTR [r10]
   1f559:	mov    QWORD PTR [rsp],r10
   1f55d:	call   4bdc0 <rpl_free>
   1f562:	mov    r10,QWORD PTR [rsp]
   1f566:	mov    QWORD PTR [r10],0x0
   1f56d:	jmp    1f4cf <hsts_store_entry+0x4f>
   1f572:	nop    WORD PTR [rax+rax*1+0x0]
   1f578:	test   r14,r14
   1f57b:	je     1f60f <hsts_store_entry+0x18f>
   1f581:	mov    QWORD PTR [rsp],rdx
   1f585:	jle    1f556 <hsts_store_entry+0xd6>
   1f587:	xor    edi,edi
   1f589:	mov    QWORD PTR [rsp+0x8],r10
   1f58e:	call   cbf0 <time@plt>
   1f593:	mov    r10,QWORD PTR [rsp+0x8]
   1f598:	cmp    rax,0xffffffffffffffff
   1f59c:	je     1f556 <hsts_store_entry+0xd6>
   1f59e:	mov    rdx,QWORD PTR [rsp]
   1f5a2:	cmp    QWORD PTR [rdx],rax
   1f5a5:	je     1f556 <hsts_store_entry+0xd6>
   1f5a7:	mov    QWORD PTR [rdx],rax
   1f5aa:	mov    QWORD PTR [rdx+0x8],r14
   1f5ae:	mov    BYTE PTR [rdx+0x10],r15b
   1f5b2:	mov    BYTE PTR [r13+0x10],0x1
   1f5b7:	jmp    1f556 <hsts_store_entry+0xd6>
   1f5b9:	nop    DWORD PTR [rax+0x0]
   1f5c0:	xor    edi,edi
   1f5c2:	mov    QWORD PTR [rsp],r10
   1f5c6:	call   cbf0 <time@plt>
   1f5cb:	mov    r10,QWORD PTR [rsp]
   1f5cf:	cmp    rax,0xffffffffffffffff
   1f5d3:	mov    rcx,rax
   1f5d6:	je     1f556 <hsts_store_entry+0xd6>
   1f5dc:	push   0x0
   1f5de:	mov    edx,r12d
   1f5e1:	movzx  r9d,r15b
   1f5e5:	mov    r8,r14
   1f5e8:	push   0x0
   1f5ea:	mov    rsi,rbp
   1f5ed:	mov    rdi,r13
   1f5f0:	call   1f130 <hsts_new_entry_internal.constprop.0>
   1f5f5:	pop    rdx
   1f5f6:	pop    rcx
   1f5f7:	test   al,al
   1f5f9:	mov    r10,QWORD PTR [rsp]
   1f5fd:	je     1f556 <hsts_store_entry+0xd6>
   1f603:	mov    BYTE PTR [r13+0x10],0x1
   1f608:	mov    ebx,eax
   1f60a:	jmp    1f556 <hsts_store_entry+0xd6>
   1f60f:	mov    rdi,QWORD PTR [r13+0x0]
   1f613:	mov    rsi,r10
   1f616:	call   1dec0 <hash_table_remove>
   1f61b:	mov    BYTE PTR [r13+0x10],0x1
   1f620:	mov    r10,QWORD PTR [rsp]
   1f624:	jmp    1f556 <hsts_store_entry+0xd6>
   1f629:	call   c7b0 <__stack_chk_fail@plt>
   1f62e:	xchg   ax,ax

000000000001f630 <hsts_store_save>:
   1f630:	endbr64 
   1f634:	push   r13
   1f636:	push   r12
   1f638:	push   rbp
   1f639:	push   rbx
   1f63a:	sub    rsp,0xc8
   1f641:	mov    rax,QWORD PTR fs:0x28
   1f64a:	mov    QWORD PTR [rsp+0xb8],rax
   1f652:	xor    eax,eax
   1f654:	test   rsi,rsi
   1f657:	je     1f66b <hsts_store_save+0x3b>
   1f659:	mov    rbx,rdi
   1f65c:	mov    rdi,QWORD PTR [rdi]
   1f65f:	mov    rbp,rsi
   1f662:	call   1e130 <hash_table_count>
   1f667:	test   eax,eax
   1f669:	jg     1f690 <hsts_store_save+0x60>
   1f66b:	mov    rax,QWORD PTR [rsp+0xb8]
   1f673:	xor    rax,QWORD PTR fs:0x28
   1f67c:	jne    1f7ee <hsts_store_save+0x1be>
   1f682:	add    rsp,0xc8
   1f689:	pop    rbx
   1f68a:	pop    rbp
   1f68b:	pop    r12
   1f68d:	pop    r13
   1f68f:	ret    
   1f690:	lea    rsi,[rip+0x46cc7]        # 6635e <primes.6089+0x27e>
   1f697:	mov    rdi,rbp
   1f69a:	call   c0f0 <fopen@plt>
   1f69f:	mov    r12,rax
   1f6a2:	test   rax,rax
   1f6a5:	je     1f66b <hsts_store_save+0x3b>
   1f6a7:	mov    rdi,rax
   1f6aa:	call   be80 <fileno@plt>
   1f6af:	mov    esi,0x2
   1f6b4:	mov    edi,eax
   1f6b6:	mov    r13d,eax
   1f6b9:	call   c510 <flock@plt>
   1f6be:	cmp    QWORD PTR [rbx+0x8],0x0
   1f6c3:	jne    1f7b0 <hsts_store_save+0x180>
   1f6c9:	xor    edx,edx
   1f6cb:	xor    esi,esi
   1f6cd:	mov    rdi,r12
   1f6d0:	mov    rbp,rsp
   1f6d3:	call   4bdf0 <rpl_fseek>
   1f6d8:	xor    esi,esi
   1f6da:	mov    edi,r13d
   1f6dd:	call   c990 <ftruncate@plt>
   1f6e2:	mov    rcx,r12
   1f6e5:	mov    edx,0x2e
   1f6ea:	mov    esi,0x1
   1f6ef:	lea    rdi,[rip+0x46c9a]        # 66390 <primes.6089+0x2b0>
   1f6f6:	call   ca10 <fwrite@plt>
   1f6fb:	mov    rcx,r12
   1f6fe:	mov    edx,0x19
   1f703:	mov    esi,0x1
   1f708:	lea    rdi,[rip+0x46c52]        # 66361 <primes.6089+0x281>
   1f70f:	call   ca10 <fwrite@plt>
   1f714:	mov    rcx,r12
   1f717:	mov    edx,0x3b
   1f71c:	mov    esi,0x1
   1f721:	lea    rdi,[rip+0x46c98]        # 663c0 <primes.6089+0x2e0>
   1f728:	call   ca10 <fwrite@plt>
   1f72d:	mov    rdi,QWORD PTR [rbx]
   1f730:	mov    rsi,rbp
   1f733:	lea    rbx,[rip+0x46c41]        # 6637b <primes.6089+0x29b>
   1f73a:	call   1e0c0 <hash_table_iterate>
   1f73f:	jmp    1f77a <hsts_store_save+0x14a>
   1f741:	nop    DWORD PTR [rax+0x0]
   1f748:	mov    rdx,QWORD PTR [rsp]
   1f74c:	mov    rax,QWORD PTR [rsp+0x8]
   1f751:	mov    esi,0x1
   1f756:	mov    rdi,r12
   1f759:	movzx  r9d,BYTE PTR [rax+0x10]
   1f75e:	mov    r8d,DWORD PTR [rdx+0x8]
   1f762:	push   QWORD PTR [rax+0x8]
   1f765:	mov    rcx,QWORD PTR [rdx]
   1f768:	push   QWORD PTR [rax]
   1f76a:	mov    rdx,rbx
   1f76d:	xor    eax,eax
   1f76f:	call   bfd0 <__fprintf_chk@plt>
   1f774:	pop    rdx
   1f775:	pop    rcx
   1f776:	test   eax,eax
   1f778:	js     1f798 <hsts_store_save+0x168>
   1f77a:	mov    rdi,rbp
   1f77d:	call   1e0e0 <hash_table_iter_next>
   1f782:	test   eax,eax
   1f784:	jne    1f748 <hsts_store_save+0x118>
   1f786:	mov    rdi,r12
   1f789:	call   c8b0 <fclose@plt>
   1f78e:	jmp    1f66b <hsts_store_save+0x3b>
   1f793:	nop    DWORD PTR [rax+rax*1+0x0]
   1f798:	lea    rsi,[rip+0x46c61]        # 66400 <primes.6089+0x320>
   1f79f:	mov    edi,0x3
   1f7a4:	xor    eax,eax
   1f7a6:	call   2e0a0 <logprintf>
   1f7ab:	jmp    1f786 <hsts_store_save+0x156>
   1f7ad:	nop    DWORD PTR [rax]
   1f7b0:	lea    rdx,[rsp+0x20]
   1f7b5:	mov    rsi,rbp
   1f7b8:	mov    edi,0x1
   1f7bd:	call   c350 <__xstat@plt>
   1f7c2:	test   eax,eax
   1f7c4:	jne    1f6c9 <hsts_store_save+0x99>
   1f7ca:	mov    rax,QWORD PTR [rbx+0x8]
   1f7ce:	cmp    QWORD PTR [rsp+0x78],rax
   1f7d3:	jle    1f6c9 <hsts_store_save+0x99>
   1f7d9:	mov    edx,0x1
   1f7de:	mov    rsi,r12
   1f7e1:	mov    rdi,rbx
   1f7e4:	call   1eea0 <hsts_read_database>
   1f7e9:	jmp    1f6c9 <hsts_store_save+0x99>
   1f7ee:	call   c7b0 <__stack_chk_fail@plt>
   1f7f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   1f7fe:	xchg   ax,ax

000000000001f800 <hsts_store_has_changed>:
   1f800:	endbr64 
   1f804:	xor    eax,eax
   1f806:	test   rdi,rdi
   1f809:	je     1f80f <hsts_store_has_changed+0xf>
   1f80b:	movzx  eax,BYTE PTR [rdi+0x10]
   1f80f:	ret    

000000000001f810 <hsts_store_close>:
   1f810:	endbr64 
   1f814:	push   rbp
   1f815:	mov    rbp,rdi
   1f818:	push   rbx
   1f819:	sub    rsp,0x38
   1f81d:	mov    rdi,QWORD PTR [rdi]
   1f820:	mov    rax,QWORD PTR fs:0x28
   1f829:	mov    QWORD PTR [rsp+0x28],rax
   1f82e:	xor    eax,eax
   1f830:	mov    rbx,rsp
   1f833:	mov    rsi,rbx
   1f836:	call   1e0c0 <hash_table_iterate>
   1f83b:	jmp    1f877 <hsts_store_close+0x67>
   1f83d:	nop    DWORD PTR [rax]
   1f840:	mov    rax,QWORD PTR [rsp]
   1f844:	mov    rdi,QWORD PTR [rax]
   1f847:	call   4bdc0 <rpl_free>
   1f84c:	mov    rdi,QWORD PTR [rsp]
   1f850:	mov    QWORD PTR [rdi],0x0
   1f857:	call   4bdc0 <rpl_free>
   1f85c:	mov    rdi,QWORD PTR [rsp+0x8]
   1f861:	mov    QWORD PTR [rsp],0x0
   1f869:	call   4bdc0 <rpl_free>
   1f86e:	mov    QWORD PTR [rsp+0x8],0x0
   1f877:	mov    rdi,rbx
   1f87a:	call   1e0e0 <hash_table_iter_next>
   1f87f:	test   eax,eax
   1f881:	jne    1f840 <hsts_store_close+0x30>
   1f883:	mov    rdi,QWORD PTR [rbp+0x0]
   1f887:	call   1da40 <hash_table_destroy>
   1f88c:	mov    rax,QWORD PTR [rsp+0x28]
   1f891:	xor    rax,QWORD PTR fs:0x28
   1f89a:	jne    1f8a3 <hsts_store_close+0x93>
   1f89c:	add    rsp,0x38
   1f8a0:	pop    rbx
   1f8a1:	pop    rbp
   1f8a2:	ret    
   1f8a3:	call   c7b0 <__stack_chk_fail@plt>
   1f8a8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000001f8b0 <hsts_store_open>:
   1f8b0:	endbr64 
   1f8b4:	push   r14
   1f8b6:	mov    esi,0x18
   1f8bb:	push   r13
   1f8bd:	push   r12
   1f8bf:	push   rbp
   1f8c0:	mov    rbp,rdi
   1f8c3:	mov    edi,0x1
   1f8c8:	sub    rsp,0xc8
   1f8cf:	mov    rax,QWORD PTR fs:0x28
   1f8d8:	mov    QWORD PTR [rsp+0xb8],rax
   1f8e0:	xor    eax,eax
   1f8e2:	mov    r13,rsp
   1f8e5:	call   4b9c0 <xcalloc>
   1f8ea:	xor    edi,edi
   1f8ec:	lea    rsi,[rip+0xfffffffffffff53d]        # 1ee30 <hsts_hash_func>
   1f8f3:	lea    rdx,[rip+0xfffffffffffff566]        # 1ee60 <hsts_cmp_func>
   1f8fa:	mov    r12,rax
   1f8fd:	call   1d940 <hash_table_new>
   1f902:	mov    BYTE PTR [r12+0x10],0x0
   1f908:	mov    rsi,r13
   1f90b:	mov    rdi,rbp
   1f90e:	mov    QWORD PTR [r12],rax
   1f912:	mov    QWORD PTR [r12+0x8],0x0
   1f91b:	call   3bed0 <file_exists_p>
   1f920:	test   al,al
   1f922:	jne    1f950 <hsts_store_open+0xa0>
   1f924:	mov    rax,QWORD PTR [rsp+0xb8]
   1f92c:	xor    rax,QWORD PTR fs:0x28
   1f935:	jne    1fa42 <hsts_store_open+0x192>
   1f93b:	add    rsp,0xc8
   1f942:	mov    rax,r12
   1f945:	pop    rbp
   1f946:	pop    r12
   1f948:	pop    r13
   1f94a:	pop    r14
   1f94c:	ret    
   1f94d:	nop    DWORD PTR [rax]
   1f950:	lea    r14,[rsp+0x20]
   1f955:	mov    rsi,rbp
   1f958:	mov    edi,0x1
   1f95d:	mov    rdx,r14
   1f960:	call   c350 <__xstat@plt>
   1f965:	cmp    eax,0xffffffff
   1f968:	je     1f9e0 <hsts_store_open+0x130>
   1f96a:	mov    eax,DWORD PTR [rsp+0x38]
   1f96e:	and    eax,0xf002
   1f973:	cmp    eax,0x8000
   1f978:	jne    1f9e0 <hsts_store_open+0x130>
   1f97a:	mov    rdi,rbp
   1f97d:	mov    rdx,r13
   1f980:	lea    rsi,[rip+0x465b9]        # 65f40 <yy_accept+0xe80>
   1f987:	call   3c010 <fopen_stat>
   1f98c:	mov    rbp,rax
   1f98f:	test   rax,rax
   1f992:	je     1fa30 <hsts_store_open+0x180>
   1f998:	xor    edx,edx
   1f99a:	mov    rsi,rax
   1f99d:	mov    rdi,r12
   1f9a0:	call   1eea0 <hsts_read_database>
   1f9a5:	test   al,al
   1f9a7:	je     1fa10 <hsts_store_open+0x160>
   1f9a9:	mov    rdi,rbp
   1f9ac:	call   be80 <fileno@plt>
   1f9b1:	mov    rdx,r14
   1f9b4:	mov    edi,0x1
   1f9b9:	mov    esi,eax
   1f9bb:	call   c710 <__fxstat@plt>
   1f9c0:	test   eax,eax
   1f9c2:	jne    1f9ce <hsts_store_open+0x11e>
   1f9c4:	mov    rax,QWORD PTR [rsp+0x78]
   1f9c9:	mov    QWORD PTR [r12+0x8],rax
   1f9ce:	mov    rdi,rbp
   1f9d1:	call   c8b0 <fclose@plt>
   1f9d6:	jmp    1f924 <hsts_store_open+0x74>
   1f9db:	nop    DWORD PTR [rax+rax*1+0x0]
   1f9e0:	mov    rdi,r12
   1f9e3:	call   1f810 <hsts_store_close>
   1f9e8:	mov    rdi,r12
   1f9eb:	call   4bdc0 <rpl_free>
   1f9f0:	lea    rsi,[rip+0x46a39]        # 66430 <primes.6089+0x350>
   1f9f7:	mov    edi,0x1
   1f9fc:	xor    eax,eax
   1f9fe:	call   2e0a0 <logprintf>
   1fa03:	endbr64 
   1fa07:	xor    r12d,r12d
   1fa0a:	jmp    1f924 <hsts_store_open+0x74>
   1fa0f:	nop
   1fa10:	mov    rdi,r12
   1fa13:	call   1f810 <hsts_store_close>
   1fa18:	mov    rdi,r12
   1fa1b:	call   4bdc0 <rpl_free>
   1fa20:	mov    rdi,rbp
   1fa23:	call   c8b0 <fclose@plt>
   1fa28:	jmp    1fa03 <hsts_store_open+0x153>
   1fa2a:	nop    WORD PTR [rax+rax*1+0x0]
   1fa30:	mov    rdi,r12
   1fa33:	call   1f810 <hsts_store_close>
   1fa38:	mov    rdi,r12
   1fa3b:	call   4bdc0 <rpl_free>
   1fa40:	jmp    1fa03 <hsts_store_open+0x153>
   1fa42:	call   c7b0 <__stack_chk_fail@plt>
   1fa47:	nop    WORD PTR [rax+rax*1+0x0]

000000000001fa50 <convert_and_copy>:
   1fa50:	push   r15
   1fa52:	mov    r8d,ecx
   1fa55:	push   r14
   1fa57:	mov    r14,rdx
   1fa5a:	push   r13
   1fa5c:	mov    r13d,ecx
   1fa5f:	push   r12
   1fa61:	mov    r12,rdi
   1fa64:	push   rbp
   1fa65:	mov    rbp,rsi
   1fa68:	push   rbx
   1fa69:	sub    rsp,0x18
   1fa6d:	mov    ebx,DWORD PTR [rdi+0xc]
   1fa70:	and    r8d,0x4
   1fa74:	je     1faa9 <convert_and_copy+0x59>
   1fa76:	cmp    rsi,rdx
   1fa79:	jae    1faa9 <convert_and_copy+0x59>
   1fa7b:	movzx  eax,BYTE PTR [rbp+0x0]
   1fa7f:	cmp    al,0xd
   1fa81:	jg     1fc30 <convert_and_copy+0x1e0>
   1fa87:	cmp    al,0x8
   1fa89:	jg     1fc38 <convert_and_copy+0x1e8>
   1fa8f:	cmp    r14,rbp
   1fa92:	jbe    1faa9 <convert_and_copy+0x59>
   1fa94:	movzx  eax,BYTE PTR [r14-0x1]
   1fa99:	cmp    al,0xd
   1fa9b:	jg     1fc50 <convert_and_copy+0x200>
   1faa1:	cmp    al,0x8
   1faa3:	jg     1fc58 <convert_and_copy+0x208>
   1faa9:	mov    r15,r14
   1faac:	movsxd rdx,DWORD PTR [r12+0x8]
   1fab1:	sub    r15,rbp
   1fab4:	test   r13b,0x2
   1fab8:	je     1fc78 <convert_and_copy+0x228>
   1fabe:	movsxd rax,ebx
   1fac1:	add    rax,r15
   1fac4:	mov    r15,rdx
   1fac7:	cmp    rax,rdx
   1faca:	jle    1fde0 <convert_and_copy+0x390>
   1fad0:	add    r15,r15
   1fad3:	cmp    rax,r15
   1fad6:	jg     1fad0 <convert_and_copy+0x80>
   1fad8:	cmp    r15,rdx
   1fadb:	je     1fde0 <convert_and_copy+0x390>
   1fae1:	cmp    BYTE PTR [r12+0x10],0x0
   1fae7:	mov    DWORD PTR [rsp+0xc],r8d
   1faec:	jne    1fda0 <convert_and_copy+0x350>
   1faf2:	mov    rdi,r15
   1faf5:	call   4b850 <xmalloc>
   1fafa:	movsxd rdx,DWORD PTR [r12+0x8]
   1faff:	mov    rsi,QWORD PTR [r12]
   1fb03:	mov    rdi,rax
   1fb06:	call   cb30 <memcpy@plt>
   1fb0b:	mov    BYTE PTR [r12+0x10],0x1
   1fb11:	mov    r8d,DWORD PTR [rsp+0xc]
   1fb16:	mov    QWORD PTR [r12],rax
   1fb1a:	mov    rdi,rax
   1fb1d:	mov    DWORD PTR [r12+0x8],r15d
   1fb22:	movsxd rdx,DWORD PTR [r12+0xc]
   1fb27:	add    rdx,rdi
   1fb2a:	cmp    rbp,r14
   1fb2d:	jae    1fe24 <convert_and_copy+0x3d4>
   1fb33:	movabs r9,0x7e0000007e03ff
   1fb3d:	mov    r10d,0x1
   1fb43:	jmp    1fb72 <convert_and_copy+0x122>
   1fb45:	nop    DWORD PTR [rax]
   1fb48:	cmp    al,0xa
   1fb4a:	sete   dil
   1fb4e:	cmp    al,0xd
   1fb50:	sete   cl
   1fb53:	or     dil,cl
   1fb56:	je     1fb60 <convert_and_copy+0x110>
   1fb58:	mov    rbp,rsi
   1fb5b:	test   r8d,r8d
   1fb5e:	jne    1fb69 <convert_and_copy+0x119>
   1fb60:	mov    BYTE PTR [rdx],al
   1fb62:	mov    rbp,rsi
   1fb65:	add    rdx,0x1
   1fb69:	cmp    r14,rbp
   1fb6c:	jbe    1fe20 <convert_and_copy+0x3d0>
   1fb72:	movzx  eax,BYTE PTR [rbp+0x0]
   1fb76:	lea    rsi,[rbp+0x1]
   1fb7a:	cmp    al,0x26
   1fb7c:	jne    1fb48 <convert_and_copy+0xf8>
   1fb7e:	cmp    r14,rsi
   1fb81:	je     1ff30 <convert_and_copy+0x4e0>
   1fb87:	movzx  ecx,BYTE PTR [rbp+0x1]
   1fb8b:	cmp    cl,0x67
   1fb8e:	je     20038 <convert_and_copy+0x5e8>
   1fb94:	jg     1fe90 <convert_and_copy+0x440>
   1fb9a:	cmp    cl,0x23
   1fb9d:	je     1ffb0 <convert_and_copy+0x560>
   1fba3:	cmp    cl,0x61
   1fba6:	jne    1ff30 <convert_and_copy+0x4e0>
   1fbac:	lea    rdi,[rbp+0x4]
   1fbb0:	cmp    r14,rdi
   1fbb3:	je     200e6 <convert_and_copy+0x696>
   1fbb9:	ja     200c8 <convert_and_copy+0x678>
   1fbbf:	lea    rcx,[rbp+0x5]
   1fbc3:	cmp    r14,rcx
   1fbc6:	je     1fbf0 <convert_and_copy+0x1a0>
   1fbc8:	cmp    r14,rcx
   1fbcb:	jbe    1ff30 <convert_and_copy+0x4e0>
   1fbd1:	movzx  eax,BYTE PTR [rbp+0x5]
   1fbd5:	cmp    al,0x5a
   1fbd7:	jg     200b3 <convert_and_copy+0x663>
   1fbdd:	cmp    al,0x40
   1fbdf:	jg     1ff30 <convert_and_copy+0x4e0>
   1fbe5:	sub    eax,0x30
   1fbe8:	cmp    al,0x9
   1fbea:	jbe    1ff30 <convert_and_copy+0x4e0>
   1fbf0:	cmp    BYTE PTR [rbp+0x2],0x70
   1fbf4:	jne    1ff30 <convert_and_copy+0x4e0>
   1fbfa:	cmp    BYTE PTR [rbp+0x3],0x6f
   1fbfe:	jne    1ff30 <convert_and_copy+0x4e0>
   1fc04:	cmp    BYTE PTR [rbp+0x4],0x73
   1fc08:	jne    1ff30 <convert_and_copy+0x4e0>
   1fc0e:	cmp    r14,rcx
   1fc11:	jbe    1fe00 <convert_and_copy+0x3b0>
   1fc17:	cmp    BYTE PTR [rbp+0x5],0x3b
   1fc1b:	jne    1fe00 <convert_and_copy+0x3b0>
   1fc21:	add    rbp,0x6
   1fc25:	mov    eax,0x27
   1fc2a:	jmp    1fe10 <convert_and_copy+0x3c0>
   1fc2f:	nop
   1fc30:	cmp    al,0x20
   1fc32:	jne    1fa8f <convert_and_copy+0x3f>
   1fc38:	add    rbp,0x1
   1fc3c:	cmp    r14,rbp
   1fc3f:	jne    1fa7b <convert_and_copy+0x2b>
   1fc45:	mov    rbp,r14
   1fc48:	jmp    1faa9 <convert_and_copy+0x59>
   1fc4d:	nop    DWORD PTR [rax]
   1fc50:	cmp    al,0x20
   1fc52:	jne    1faa9 <convert_and_copy+0x59>
   1fc58:	sub    r14,0x1
   1fc5c:	cmp    r14,rbp
   1fc5f:	je     1faa9 <convert_and_copy+0x59>
   1fc65:	movzx  eax,BYTE PTR [r14-0x1]
   1fc6a:	cmp    al,0xd
   1fc6c:	jg     1fc50 <convert_and_copy+0x200>
   1fc6e:	jmp    1faa1 <convert_and_copy+0x51>
   1fc73:	nop    DWORD PTR [rax+rax*1+0x0]
   1fc78:	lea    eax,[rbx+r15*1]
   1fc7c:	mov    r14,rdx
   1fc7f:	cdqe   
   1fc81:	cmp    rax,rdx
   1fc84:	jle    1fdf0 <convert_and_copy+0x3a0>
   1fc8a:	nop    WORD PTR [rax+rax*1+0x0]
   1fc90:	add    r14,r14
   1fc93:	cmp    rax,r14
   1fc96:	jg     1fc90 <convert_and_copy+0x240>
   1fc98:	cmp    r14,rdx
   1fc9b:	je     1fdf0 <convert_and_copy+0x3a0>
   1fca1:	cmp    BYTE PTR [r12+0x10],0x0
   1fca7:	jne    1fdc0 <convert_and_copy+0x370>
   1fcad:	mov    rdi,r14
   1fcb0:	call   4b850 <xmalloc>
   1fcb5:	movsxd rdx,DWORD PTR [r12+0x8]
   1fcba:	mov    rsi,QWORD PTR [r12]
   1fcbe:	mov    rdi,rax
   1fcc1:	call   cb30 <memcpy@plt>
   1fcc6:	mov    BYTE PTR [r12+0x10],0x1
   1fccc:	mov    QWORD PTR [r12],rax
   1fcd0:	mov    rdi,rax
   1fcd3:	mov    DWORD PTR [r12+0x8],r14d
   1fcd8:	movsxd rax,DWORD PTR [r12+0xc]
   1fcdd:	movsxd rdx,r15d
   1fce0:	mov    rsi,rbp
   1fce3:	add    rdi,rax
   1fce6:	call   cb30 <memcpy@plt>
   1fceb:	add    r15d,DWORD PTR [r12+0xc]
   1fcf0:	movsxd rdx,DWORD PTR [r12+0x8]
   1fcf5:	lea    esi,[r15+0x1]
   1fcf9:	mov    DWORD PTR [r12+0xc],r15d
   1fcfe:	movsxd rax,esi
   1fd01:	mov    rbp,rdx
   1fd04:	cmp    rax,rdx
   1fd07:	jle    1ff40 <convert_and_copy+0x4f0>
   1fd0d:	nop    DWORD PTR [rax]
   1fd10:	add    rbp,rbp
   1fd13:	cmp    rax,rbp
   1fd16:	jg     1fd10 <convert_and_copy+0x2c0>
   1fd18:	cmp    rdx,rbp
   1fd1b:	je     1ff40 <convert_and_copy+0x4f0>
   1fd21:	cmp    BYTE PTR [r12+0x10],0x0
   1fd27:	je     1ff50 <convert_and_copy+0x500>
   1fd2d:	mov    rdi,QWORD PTR [r12]
   1fd31:	mov    rsi,rbp
   1fd34:	call   4b870 <xrealloc>
   1fd39:	mov    QWORD PTR [r12],rax
   1fd3d:	mov    rcx,rax
   1fd40:	mov    r15d,DWORD PTR [r12+0xc]
   1fd45:	mov    DWORD PTR [r12+0x8],ebp
   1fd4a:	lea    esi,[r15+0x1]
   1fd4e:	movsxd r15,r15d
   1fd51:	mov    DWORD PTR [r12+0xc],esi
   1fd56:	mov    BYTE PTR [rcx+r15*1],0x0
   1fd5b:	and    r13d,0x1
   1fd5f:	je     1fd8d <convert_and_copy+0x33d>
   1fd61:	movsxd rdx,ebx
   1fd64:	add    rdx,QWORD PTR [r12]
   1fd68:	movzx  eax,BYTE PTR [rdx]
   1fd6b:	test   al,al
   1fd6d:	je     1fd8d <convert_and_copy+0x33d>
   1fd6f:	nop
   1fd70:	movsx  ecx,al
   1fd73:	lea    esi,[rax+0x20]
   1fd76:	sub    ecx,0x41
   1fd79:	cmp    ecx,0x1a
   1fd7c:	cmovb  eax,esi
   1fd7f:	add    rdx,0x1
   1fd83:	mov    BYTE PTR [rdx-0x1],al
   1fd86:	movzx  eax,BYTE PTR [rdx]
   1fd89:	test   al,al
   1fd8b:	jne    1fd70 <convert_and_copy+0x320>
   1fd8d:	add    rsp,0x18
   1fd91:	pop    rbx
   1fd92:	pop    rbp
   1fd93:	pop    r12
   1fd95:	pop    r13
   1fd97:	pop    r14
   1fd99:	pop    r15
   1fd9b:	ret    
   1fd9c:	nop    DWORD PTR [rax+0x0]
   1fda0:	mov    rdi,QWORD PTR [r12]
   1fda4:	mov    rsi,r15
   1fda7:	call   4b870 <xrealloc>
   1fdac:	mov    r8d,DWORD PTR [rsp+0xc]
   1fdb1:	mov    QWORD PTR [r12],rax
   1fdb5:	mov    rdi,rax
   1fdb8:	jmp    1fb1d <convert_and_copy+0xcd>
   1fdbd:	nop    DWORD PTR [rax]
   1fdc0:	mov    rdi,QWORD PTR [r12]
   1fdc4:	mov    rsi,r14
   1fdc7:	call   4b870 <xrealloc>
   1fdcc:	mov    QWORD PTR [r12],rax
   1fdd0:	mov    rdi,rax
   1fdd3:	jmp    1fcd3 <convert_and_copy+0x283>
   1fdd8:	nop    DWORD PTR [rax+rax*1+0x0]
   1fde0:	mov    rdi,QWORD PTR [r12]
   1fde4:	movsxd rdx,ebx
   1fde7:	jmp    1fb27 <convert_and_copy+0xd7>
   1fdec:	nop    DWORD PTR [rax+0x0]
   1fdf0:	mov    rdi,QWORD PTR [r12]
   1fdf4:	movsxd rax,ebx
   1fdf7:	jmp    1fcdd <convert_and_copy+0x28d>
   1fdfc:	nop    DWORD PTR [rax+0x0]
   1fe00:	mov    rbp,rcx
   1fe03:	mov    eax,0x27
   1fe08:	nop    DWORD PTR [rax+rax*1+0x0]
   1fe10:	mov    BYTE PTR [rdx],al
   1fe12:	add    rdx,0x1
   1fe16:	cmp    r14,rbp
   1fe19:	ja     1fb72 <convert_and_copy+0x122>
   1fe1f:	nop
   1fe20:	mov    rdi,QWORD PTR [r12]
   1fe24:	sub    rdx,rdi
   1fe27:	movsxd rsi,DWORD PTR [r12+0x8]
   1fe2c:	mov    DWORD PTR [r12+0xc],edx
   1fe31:	movsxd rcx,edx
   1fe34:	add    edx,0x1
   1fe37:	movsxd rax,edx
   1fe3a:	cmp    rax,rsi
   1fe3d:	jle    1fe7d <convert_and_copy+0x42d>
   1fe3f:	mov    rbp,rsi
   1fe42:	nop    WORD PTR [rax+rax*1+0x0]
   1fe48:	add    rbp,rbp
   1fe4b:	cmp    rax,rbp
   1fe4e:	jg     1fe48 <convert_and_copy+0x3f8>
   1fe50:	cmp    rsi,rbp
   1fe53:	je     1fe7d <convert_and_copy+0x42d>
   1fe55:	cmp    BYTE PTR [r12+0x10],0x0
   1fe5b:	je     1ff80 <convert_and_copy+0x530>
   1fe61:	mov    rsi,rbp
   1fe64:	call   4b870 <xrealloc>
   1fe69:	mov    QWORD PTR [r12],rax
   1fe6d:	mov    rdi,rax
   1fe70:	movsxd rcx,DWORD PTR [r12+0xc]
   1fe75:	mov    DWORD PTR [r12+0x8],ebp
   1fe7a:	lea    edx,[rcx+0x1]
   1fe7d:	mov    DWORD PTR [r12+0xc],edx
   1fe82:	mov    BYTE PTR [rdi+rcx*1],0x0
   1fe86:	jmp    1fd5b <convert_and_copy+0x30b>
   1fe8b:	nop    DWORD PTR [rax+rax*1+0x0]
   1fe90:	cmp    cl,0x6c
   1fe93:	je     1ff00 <convert_and_copy+0x4b0>
   1fe95:	cmp    cl,0x71
   1fe98:	jne    1ff30 <convert_and_copy+0x4e0>
   1fe9e:	lea    rcx,[rbp+0x5]
   1fea2:	cmp    r14,rcx
   1fea5:	je     1fec4 <convert_and_copy+0x474>
   1fea7:	jbe    1ff30 <convert_and_copy+0x4e0>
   1fead:	movzx  eax,BYTE PTR [rbp+0x5]
   1feb1:	cmp    al,0x5a
   1feb3:	jg     20087 <convert_and_copy+0x637>
   1feb9:	cmp    al,0x40
   1febb:	jg     1ff30 <convert_and_copy+0x4e0>
   1febd:	sub    eax,0x30
   1fec0:	cmp    al,0x9
   1fec2:	jbe    1ff30 <convert_and_copy+0x4e0>
   1fec4:	cmp    BYTE PTR [rbp+0x2],0x75
   1fec8:	jne    1ff30 <convert_and_copy+0x4e0>
   1feca:	cmp    BYTE PTR [rbp+0x3],0x6f
   1fece:	jne    1ff30 <convert_and_copy+0x4e0>
   1fed0:	cmp    BYTE PTR [rbp+0x4],0x74
   1fed4:	jne    1ff30 <convert_and_copy+0x4e0>
   1fed6:	cmp    r14,rcx
   1fed9:	jbe    1fef0 <convert_and_copy+0x4a0>
   1fedb:	cmp    BYTE PTR [rbp+0x5],0x3b
   1fedf:	jne    1fef0 <convert_and_copy+0x4a0>
   1fee1:	add    rbp,0x6
   1fee5:	mov    eax,0x22
   1feea:	jmp    1fe10 <convert_and_copy+0x3c0>
   1feef:	nop
   1fef0:	mov    rbp,rcx
   1fef3:	mov    eax,0x22
   1fef8:	jmp    1fe10 <convert_and_copy+0x3c0>
   1fefd:	nop    DWORD PTR [rax]
   1ff00:	lea    rcx,[rbp+0x3]
   1ff04:	cmp    r14,rcx
   1ff07:	je     201f7 <convert_and_copy+0x7a7>
   1ff0d:	jbe    1ff30 <convert_and_copy+0x4e0>
   1ff0f:	movzx  eax,BYTE PTR [rbp+0x3]
   1ff13:	cmp    al,0x5a
   1ff15:	jg     200a3 <convert_and_copy+0x653>
   1ff1b:	cmp    al,0x40
   1ff1d:	jg     1ff30 <convert_and_copy+0x4e0>
   1ff1f:	sub    eax,0x30
   1ff22:	cmp    al,0x9
   1ff24:	jbe    1ff30 <convert_and_copy+0x4e0>
   1ff26:	cmp    BYTE PTR [rbp+0x2],0x74
   1ff2a:	je     20110 <convert_and_copy+0x6c0>
   1ff30:	mov    BYTE PTR [rdx],0x26
   1ff33:	mov    rbp,rsi
   1ff36:	add    rdx,0x1
   1ff3a:	jmp    1fb69 <convert_and_copy+0x119>
   1ff3f:	nop
   1ff40:	mov    rcx,QWORD PTR [r12]
   1ff44:	jmp    1fd4e <convert_and_copy+0x2fe>
   1ff49:	nop    DWORD PTR [rax+0x0]
   1ff50:	mov    rdi,rbp
   1ff53:	call   4b850 <xmalloc>
   1ff58:	movsxd rdx,DWORD PTR [r12+0x8]
   1ff5d:	mov    rsi,QWORD PTR [r12]
   1ff61:	mov    rdi,rax
   1ff64:	call   cb30 <memcpy@plt>
   1ff69:	mov    BYTE PTR [r12+0x10],0x1
   1ff6f:	mov    QWORD PTR [r12],rax
   1ff73:	mov    rcx,rax
   1ff76:	jmp    1fd40 <convert_and_copy+0x2f0>
   1ff7b:	nop    DWORD PTR [rax+rax*1+0x0]
   1ff80:	mov    rdi,rbp
   1ff83:	call   4b850 <xmalloc>
   1ff88:	movsxd rdx,DWORD PTR [r12+0x8]
   1ff8d:	mov    rsi,QWORD PTR [r12]
   1ff91:	mov    rdi,rax
   1ff94:	call   cb30 <memcpy@plt>
   1ff99:	mov    BYTE PTR [r12+0x10],0x1
   1ff9f:	mov    QWORD PTR [r12],rax
   1ffa3:	mov    rdi,rax
   1ffa6:	jmp    1fe70 <convert_and_copy+0x420>
   1ffab:	nop    DWORD PTR [rax+rax*1+0x0]
   1ffb0:	movsx  ecx,BYTE PTR [rbp+0x2]
   1ffb4:	cmp    cl,0x78
   1ffb7:	je     20138 <convert_and_copy+0x6e8>
   1ffbd:	add    rbp,0x2
   1ffc1:	cmp    r14,rbp
   1ffc4:	jbe    1ff30 <convert_and_copy+0x4e0>
   1ffca:	sub    ecx,0x30
   1ffcd:	xor    r11d,r11d
   1ffd0:	xor    eax,eax
   1ffd2:	cmp    ecx,0x9
   1ffd5:	ja     1fffd <convert_and_copy+0x5ad>
   1ffd7:	lea    eax,[rax+rax*4]
   1ffda:	add    rbp,0x1
   1ffde:	add    r11d,0x1
   1ffe2:	lea    eax,[rcx+rax*2]
   1ffe5:	cmp    eax,0xff
   1ffea:	jg     1fffd <convert_and_copy+0x5ad>
   1ffec:	cmp    r14,rbp
   1ffef:	jbe    1fffd <convert_and_copy+0x5ad>
   1fff1:	movsx  ecx,BYTE PTR [rbp+0x0]
   1fff5:	sub    ecx,0x30
   1fff8:	cmp    ecx,0x9
   1fffb:	jbe    1ffd7 <convert_and_copy+0x587>
   1fffd:	test   r11d,r11d
   20000:	je     1ff30 <convert_and_copy+0x4e0>
   20006:	test   eax,eax
   20008:	je     1ff30 <convert_and_copy+0x4e0>
   2000e:	test   eax,0xffffff80
   20013:	jne    1ff30 <convert_and_copy+0x4e0>
   20019:	cmp    r14,rbp
   2001c:	jbe    1fe10 <convert_and_copy+0x3c0>
   20022:	xor    ecx,ecx
   20024:	cmp    BYTE PTR [rbp+0x0],0x3b
   20028:	sete   cl
   2002b:	add    rbp,rcx
   2002e:	jmp    1fe10 <convert_and_copy+0x3c0>
   20033:	nop    DWORD PTR [rax+rax*1+0x0]
   20038:	lea    rcx,[rbp+0x3]
   2003c:	cmp    r14,rcx
   2003f:	je     201e0 <convert_and_copy+0x790>
   20045:	jbe    1ff30 <convert_and_copy+0x4e0>
   2004b:	movzx  eax,BYTE PTR [rbp+0x3]
   2004f:	cmp    al,0x5a
   20051:	jg     20097 <convert_and_copy+0x647>
   20053:	cmp    al,0x40
   20055:	jg     1ff30 <convert_and_copy+0x4e0>
   2005b:	sub    eax,0x30
   2005e:	cmp    al,0x9
   20060:	jbe    1ff30 <convert_and_copy+0x4e0>
   20066:	cmp    BYTE PTR [rbp+0x2],0x74
   2006a:	jne    1ff30 <convert_and_copy+0x4e0>
   20070:	cmp    BYTE PTR [rbp+0x3],0x3b
   20074:	je     201a8 <convert_and_copy+0x758>
   2007a:	mov    rbp,rcx
   2007d:	mov    eax,0x3e
   20082:	jmp    1fe10 <convert_and_copy+0x3c0>
   20087:	sub    eax,0x61
   2008a:	cmp    al,0x19
   2008c:	ja     1fec4 <convert_and_copy+0x474>
   20092:	jmp    1ff30 <convert_and_copy+0x4e0>
   20097:	sub    eax,0x61
   2009a:	cmp    al,0x19
   2009c:	ja     20066 <convert_and_copy+0x616>
   2009e:	jmp    1ff30 <convert_and_copy+0x4e0>
   200a3:	sub    eax,0x61
   200a6:	cmp    al,0x19
   200a8:	ja     1ff26 <convert_and_copy+0x4d6>
   200ae:	jmp    1ff30 <convert_and_copy+0x4e0>
   200b3:	sub    eax,0x61
   200b6:	cmp    al,0x19
   200b8:	ja     1fbf0 <convert_and_copy+0x1a0>
   200be:	jmp    1ff30 <convert_and_copy+0x4e0>
   200c3:	nop    DWORD PTR [rax+rax*1+0x0]
   200c8:	movzx  ecx,BYTE PTR [rbp+0x4]
   200cc:	cmp    cl,0x5a
   200cf:	jg     20127 <convert_and_copy+0x6d7>
   200d1:	cmp    cl,0x40
   200d4:	jg     1fbbf <convert_and_copy+0x16f>
   200da:	sub    ecx,0x30
   200dd:	cmp    cl,0x9
   200e0:	jbe    1fbbf <convert_and_copy+0x16f>
   200e6:	cmp    BYTE PTR [rbp+0x2],0x6d
   200ea:	jne    1fbbf <convert_and_copy+0x16f>
   200f0:	cmp    BYTE PTR [rbp+0x3],0x70
   200f4:	je     201c4 <convert_and_copy+0x774>
   200fa:	lea    rcx,[rbp+0x5]
   200fe:	cmp    r14,rcx
   20101:	jne    1fbc8 <convert_and_copy+0x178>
   20107:	jmp    1ff30 <convert_and_copy+0x4e0>
   2010c:	nop    DWORD PTR [rax+0x0]
   20110:	cmp    BYTE PTR [rbp+0x3],0x3b
   20114:	je     201b6 <convert_and_copy+0x766>
   2011a:	mov    rbp,rcx
   2011d:	mov    eax,0x3c
   20122:	jmp    1fe10 <convert_and_copy+0x3c0>
   20127:	sub    ecx,0x61
   2012a:	cmp    cl,0x19
   2012d:	ja     200e6 <convert_and_copy+0x696>
   2012f:	jmp    1fbbf <convert_and_copy+0x16f>
   20134:	nop    DWORD PTR [rax+0x0]
   20138:	add    rbp,0x3
   2013c:	xor    eax,eax
   2013e:	xor    r11d,r11d
   20141:	cmp    r14,rbp
   20144:	jbe    1ff30 <convert_and_copy+0x4e0>
   2014a:	movzx  r15d,BYTE PTR [rbp+0x0]
   2014f:	lea    ecx,[r15-0x30]
   20153:	cmp    cl,0x36
   20156:	ja     1fffd <convert_and_copy+0x5ad>
   2015c:	mov    rdi,r10
   2015f:	shl    rdi,cl
   20162:	test   rdi,r9
   20165:	je     1fffd <convert_and_copy+0x5ad>
   2016b:	shl    eax,0x4
   2016e:	cmp    r15b,0x39
   20172:	jle    20183 <convert_and_copy+0x733>
   20174:	lea    ecx,[r15-0x37]
   20178:	lea    edi,[r15-0x57]
   2017c:	cmp    r15b,0x46
   20180:	cmova  ecx,edi
   20183:	movzx  ecx,cl
   20186:	add    rbp,0x1
   2018a:	add    r11d,0x1
   2018e:	add    eax,ecx
   20190:	cmp    eax,0xff
   20195:	jg     1fffd <convert_and_copy+0x5ad>
   2019b:	cmp    r14,rbp
   2019e:	ja     2014a <convert_and_copy+0x6fa>
   201a0:	jmp    1fffd <convert_and_copy+0x5ad>
   201a5:	nop    DWORD PTR [rax]
   201a8:	add    rbp,0x4
   201ac:	mov    eax,0x3e
   201b1:	jmp    1fe10 <convert_and_copy+0x3c0>
   201b6:	add    rbp,0x4
   201ba:	mov    eax,0x3c
   201bf:	jmp    1fe10 <convert_and_copy+0x3c0>
   201c4:	cmp    r14,rdi
   201c7:	jbe    201cf <convert_and_copy+0x77f>
   201c9:	cmp    BYTE PTR [rbp+0x4],0x3b
   201cd:	je     201d7 <convert_and_copy+0x787>
   201cf:	mov    rbp,rdi
   201d2:	jmp    1fe10 <convert_and_copy+0x3c0>
   201d7:	add    rbp,0x5
   201db:	jmp    1fe10 <convert_and_copy+0x3c0>
   201e0:	cmp    BYTE PTR [rbp+0x2],0x74
   201e4:	jne    1ff30 <convert_and_copy+0x4e0>
   201ea:	mov    rbp,r14
   201ed:	mov    eax,0x3e
   201f2:	jmp    1fe10 <convert_and_copy+0x3c0>
   201f7:	cmp    BYTE PTR [rbp+0x2],0x74
   201fb:	jne    1ff30 <convert_and_copy+0x4e0>
   20201:	mov    rbp,r14
   20204:	mov    eax,0x3c
   20209:	jmp    1fe10 <convert_and_copy+0x3c0>
   2020e:	xchg   ax,ax

0000000000020210 <name_allowed>:
   20210:	push   r13
   20212:	sub    rdx,rsi
   20215:	push   r12
   20217:	push   rbp
   20218:	push   rbx
   20219:	sub    rsp,0x118
   20220:	mov    rax,QWORD PTR fs:0x28
   20229:	mov    QWORD PTR [rsp+0x108],rax
   20231:	xor    eax,eax
   20233:	test   rdi,rdi
   20236:	je     202d8 <name_allowed+0xc8>
   2023c:	mov    rbp,rdi
   2023f:	mov    r12,rsi
   20242:	mov    rbx,rdx
   20245:	cmp    rdx,0xff
   2024c:	ja     20298 <name_allowed+0x88>
   2024e:	mov    r8,rsp
   20251:	mov    rdi,r8
   20254:	call   cb30 <memcpy@plt>
   20259:	mov    rdi,rbp
   2025c:	mov    BYTE PTR [rsp+rbx*1],0x0
   20260:	mov    rsi,rax
   20263:	call   1da70 <hash_table_get>
   20268:	test   rax,rax
   2026b:	setne  r12b
   2026f:	mov    rax,QWORD PTR [rsp+0x108]
   20277:	xor    rax,QWORD PTR fs:0x28
   20280:	jne    202e0 <name_allowed+0xd0>
   20282:	add    rsp,0x118
   20289:	mov    eax,r12d
   2028c:	pop    rbx
   2028d:	pop    rbp
   2028e:	pop    r12
   20290:	pop    r13
   20292:	ret    
   20293:	nop    DWORD PTR [rax+rax*1+0x0]
   20298:	lea    rdi,[rdx+0x1]
   2029c:	call   4b850 <xmalloc>
   202a1:	mov    rdx,rbx
   202a4:	mov    rsi,r12
   202a7:	mov    r13,rax
   202aa:	mov    rdi,rax
   202ad:	call   cb30 <memcpy@plt>
   202b2:	mov    rdi,rbp
   202b5:	mov    rsi,r13
   202b8:	mov    BYTE PTR [r13+rbx*1+0x0],0x0
   202be:	call   1da70 <hash_table_get>
   202c3:	mov    rdi,r13
   202c6:	test   rax,rax
   202c9:	setne  r12b
   202cd:	call   4bdc0 <rpl_free>
   202d2:	jmp    2026f <name_allowed+0x5f>
   202d4:	nop    DWORD PTR [rax+0x0]
   202d8:	mov    r12d,0x1
   202de:	jmp    2026f <name_allowed+0x5f>
   202e0:	call   c7b0 <__stack_chk_fail@plt>
   202e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000202f0 <tagstack_pop>:
   202f0:	push   r12
   202f2:	mov    r12,rdi
   202f5:	push   rbp
   202f6:	sub    rsp,0x18
   202fa:	mov    rdi,QWORD PTR [rdi]
   202fd:	test   rdi,rdi
   20300:	je     20339 <tagstack_pop+0x49>
   20302:	mov    rbp,rdx
   20305:	cmp    QWORD PTR [rsi],rdx
   20308:	je     20348 <tagstack_pop+0x58>
   2030a:	cmp    rdi,rdx
   2030d:	je     20370 <tagstack_pop+0x80>
   2030f:	mov    rax,QWORD PTR [rbp+0x18]
   20313:	mov    QWORD PTR [rsi],rax
   20316:	test   rax,rax
   20319:	je     20328 <tagstack_pop+0x38>
   2031b:	mov    QWORD PTR [rax+0x20],0x0
   20323:	nop    DWORD PTR [rax+rax*1+0x0]
   20328:	mov    rdi,rbp
   2032b:	mov    rbp,QWORD PTR [rbp+0x20]
   2032f:	call   4bdc0 <rpl_free>
   20334:	test   rbp,rbp
   20337:	jne    20328 <tagstack_pop+0x38>
   20339:	add    rsp,0x18
   2033d:	pop    rbp
   2033e:	pop    r12
   20340:	ret    
   20341:	nop    DWORD PTR [rax+0x0]
   20348:	cmp    rdi,rdx
   2034b:	je     20390 <tagstack_pop+0xa0>
   2034d:	mov    rax,QWORD PTR [rdx+0x18]
   20351:	mov    rdi,rdx
   20354:	mov    QWORD PTR [rax+0x20],0x0
   2035c:	mov    QWORD PTR [rsi],rax
   2035f:	add    rsp,0x18
   20363:	pop    rbp
   20364:	pop    r12
   20366:	jmp    4bdc0 <rpl_free>
   2036b:	nop    DWORD PTR [rax+rax*1+0x0]
   20370:	mov    QWORD PTR [r12],0x0
   20378:	mov    rax,QWORD PTR [rbp+0x18]
   2037c:	mov    QWORD PTR [rsi],rax
   2037f:	test   rax,rax
   20382:	jne    2031b <tagstack_pop+0x2b>
   20384:	jmp    20328 <tagstack_pop+0x38>
   20386:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20390:	mov    QWORD PTR [rsp+0x8],rsi
   20395:	call   4bdc0 <rpl_free>
   2039a:	mov    rsi,QWORD PTR [rsp+0x8]
   2039f:	mov    QWORD PTR [rsi],0x0
   203a6:	mov    QWORD PTR [r12],0x0
   203ae:	jmp    20339 <tagstack_pop+0x49>

00000000000203b0 <map_html_tags>:
   203b0:	endbr64 
   203b4:	push   r15
   203b6:	push   r14
   203b8:	push   r13
   203ba:	push   r12
   203bc:	push   rbp
   203bd:	push   rbx
   203be:	sub    rsp,0x388
   203c5:	mov    rax,QWORD PTR [rsp+0x3c0]
   203cd:	mov    QWORD PTR [rsp+0x40],rdx
   203d2:	mov    QWORD PTR [rsp+0x48],rcx
   203d7:	mov    DWORD PTR [rsp+0xc],r8d
   203dc:	mov    QWORD PTR [rsp+0x28],r9
   203e1:	mov    QWORD PTR [rsp+0x30],rax
   203e6:	mov    rax,QWORD PTR fs:0x28
   203ef:	mov    QWORD PTR [rsp+0x378],rax
   203f7:	xor    eax,eax
   203f9:	mov    QWORD PTR [rsp+0xb0],0x0
   20405:	mov    QWORD PTR [rsp+0xb8],0x0
   20411:	test   esi,esi
   20413:	je     20600 <map_html_tags+0x250>
   20419:	and    r8d,0x2
   2041d:	mov    BYTE PTR [rsp+0x10],0x0
   20422:	movsxd rsi,esi
   20425:	mov    rbp,rdi
   20428:	lea    rax,[rsp+0x270]
   20430:	mov    DWORD PTR [rsp+0x7c],r8d
   20435:	lea    r15,[rdi+rsi*1]
   20439:	mov    QWORD PTR [rsp+0xc0],rax
   20441:	mov    QWORD PTR [rsp+0xd8],rax
   20449:	lea    rax,[rsp+0x130]
   20451:	mov    QWORD PTR [rsp+0x38],rax
   20456:	lea    rax,[rsp+0xb8]
   2045e:	mov    QWORD PTR [rsp+0x20],rax
   20463:	lea    rax,[rsp+0xb0]
   2046b:	mov    DWORD PTR [rsp+0xc8],0x100
   20476:	mov    BYTE PTR [rsp+0xd0],0x0
   2047e:	mov    DWORD PTR [rsp+0xe0],0x100
   20489:	mov    DWORD PTR [rsp+0x60],0x8
   20491:	mov    QWORD PTR [rsp+0x18],rax
   20496:	mov    rdx,r15
   20499:	mov    esi,0x3c
   2049e:	mov    rdi,rbp
   204a1:	mov    DWORD PTR [rsp+0xcc],0x0
   204ac:	sub    rdx,rbp
   204af:	call   bf70 <memchr@plt>
   204b4:	mov    r11,rax
   204b7:	test   rax,rax
   204ba:	je     20590 <map_html_tags+0x1e0>
   204c0:	lea    r14,[rax+0x1]
   204c4:	cmp    r15,r14
   204c7:	jbe    20590 <map_html_tags+0x1e0>
   204cd:	movzx  edx,BYTE PTR [rax+0x1]
   204d1:	cmp    dl,0x21
   204d4:	je     20630 <map_html_tags+0x280>
   204da:	mov    DWORD PTR [rsp],0x0
   204e1:	mov    r13,r14
   204e4:	cmp    dl,0x2f
   204e7:	je     20a90 <map_html_tags+0x6e0>
   204ed:	mov    rbp,r13
   204f0:	jmp    20509 <map_html_tags+0x159>
   204f2:	nop    WORD PTR [rax+rax*1+0x0]
   204f8:	add    rbp,0x1
   204fc:	cmp    r15,rbp
   204ff:	jbe    20590 <map_html_tags+0x1e0>
   20505:	movzx  edx,BYTE PTR [rbp+0x0]
   20509:	lea    eax,[rdx-0x21]
   2050c:	lea    ecx,[rdx-0x3c]
   2050f:	cmp    al,0x5d
   20511:	setbe  al
   20514:	cmp    cl,0x2
   20517:	seta   cl
   2051a:	and    eax,ecx
   2051c:	cmp    dl,0x2f
   2051f:	setne  cl
   20522:	and    al,cl
   20524:	jne    204f8 <map_html_tags+0x148>
   20526:	mov    r10d,eax
   20529:	cmp    r13,rbp
   2052c:	je     20496 <map_html_tags+0xe6>
   20532:	mov    rbx,rbp
   20535:	cmp    dl,0xd
   20538:	jg     20560 <map_html_tags+0x1b0>
   2053a:	cmp    dl,0x8
   2053d:	jg     20565 <map_html_tags+0x1b5>
   2053f:	mov    ecx,DWORD PTR [rsp]
   20542:	test   ecx,ecx
   20544:	je     206d0 <map_html_tags+0x320>
   2054a:	and    edx,0xfffffffd
   2054d:	cmp    dl,0x3c
   20550:	je     2072d <map_html_tags+0x37d>
   20556:	mov    rbp,r14
   20559:	jmp    20496 <map_html_tags+0xe6>
   2055e:	xchg   ax,ax
   20560:	cmp    dl,0x20
   20563:	jne    2053f <map_html_tags+0x18f>
   20565:	add    rbx,0x1
   20569:	cmp    r15,rbx
   2056c:	jbe    20590 <map_html_tags+0x1e0>
   2056e:	movzx  edx,BYTE PTR [rbx]
   20571:	jmp    20535 <map_html_tags+0x185>
   20573:	nop    DWORD PTR [rax+rax*1+0x0]
   20578:	cmp    al,0x20
   2057a:	jne    208b8 <map_html_tags+0x508>
   20580:	add    rbx,0x1
   20584:	cmp    r15,rbx
   20587:	jne    208a5 <map_html_tags+0x4f5>
   2058d:	nop    DWORD PTR [rax]
   20590:	cmp    BYTE PTR [rsp+0xd0],0x0
   20598:	je     205a7 <map_html_tags+0x1f7>
   2059a:	mov    rdi,QWORD PTR [rsp+0xc0]
   205a2:	call   4bdc0 <rpl_free>
   205a7:	mov    rax,QWORD PTR [rsp+0xd8]
   205af:	cmp    BYTE PTR [rsp+0x10],0x0
   205b4:	mov    DWORD PTR [rsp+0xcc],0x0
   205bf:	mov    BYTE PTR [rsp+0xd0],0x0
   205c7:	mov    QWORD PTR [rsp+0xc0],rax
   205cf:	mov    eax,DWORD PTR [rsp+0xe0]
   205d6:	mov    DWORD PTR [rsp+0xc8],eax
   205dd:	je     205e9 <map_html_tags+0x239>
   205df:	mov    rdi,QWORD PTR [rsp+0x38]
   205e4:	call   4bdc0 <rpl_free>
   205e9:	mov    rdx,QWORD PTR [rsp+0xb0]
   205f1:	mov    rsi,QWORD PTR [rsp+0x20]
   205f6:	mov    rdi,QWORD PTR [rsp+0x18]
   205fb:	call   202f0 <tagstack_pop>
   20600:	mov    rax,QWORD PTR [rsp+0x378]
   20608:	xor    rax,QWORD PTR fs:0x28
   20611:	jne    21009 <map_html_tags+0xc59>
   20617:	add    rsp,0x388
   2061e:	pop    rbx
   2061f:	pop    rbp
   20620:	pop    r12
   20622:	pop    r13
   20624:	pop    r14
   20626:	pop    r15
   20628:	ret    
   20629:	nop    DWORD PTR [rax+0x0]
   20630:	test   BYTE PTR [rsp+0xc],0x1
   20635:	jne    2064b <map_html_tags+0x29b>
   20637:	lea    rax,[rax+0x4]
   2063b:	cmp    r15,rax
   2063e:	jbe    2064b <map_html_tags+0x29b>
   20640:	cmp    BYTE PTR [r11+0x2],0x2d
   20645:	je     20cd9 <map_html_tags+0x929>
   2064b:	lea    rbp,[r11+0x2]
   2064f:	cmp    r15,rbp
   20652:	je     206c0 <map_html_tags+0x310>
   20654:	lea    rax,[r11+0x3]
   20658:	movzx  ecx,BYTE PTR [r11+0x2]
   2065d:	cmp    r15,rax
   20660:	je     206c0 <map_html_tags+0x310>
   20662:	lea    edx,[rcx-0x9]
   20665:	cmp    dl,0x35
   20668:	ja     20ac0 <map_html_tags+0x710>
   2066e:	xchg   ax,ax
   20670:	lea    rdi,[rip+0x45e11]        # 66488 <primes.6089+0x3a8>
   20677:	movzx  edx,dl
   2067a:	movsxd rdx,DWORD PTR [rdi+rdx*4]
   2067e:	add    rdx,rdi
   20681:	notrack jmp rdx
   20684:	mov    rbp,rax
   20687:	cmp    BYTE PTR [rbp-0x1],0x2d
   2068b:	je     20e4c <map_html_tags+0xa9c>
   20691:	lea    rax,[rbp+0x2]
   20695:	cmp    r15,rax
   20698:	jbe    20556 <map_html_tags+0x1a6>
   2069e:	movzx  edx,BYTE PTR [rbp+0x2]
   206a2:	cmp    dl,0x2d
   206a5:	je     20684 <map_html_tags+0x2d4>
   206a7:	cmp    dl,0x3e
   206aa:	jne    20d12 <map_html_tags+0x962>
   206b0:	cmp    BYTE PTR [rax-0x1],0x2d
   206b4:	jne    20d12 <map_html_tags+0x962>
   206ba:	add    rbp,0x3
   206be:	xchg   ax,ax
   206c0:	cmp    rbp,r15
   206c3:	jne    20496 <map_html_tags+0xe6>
   206c9:	jmp    20590 <map_html_tags+0x1e0>
   206ce:	xchg   ax,ax
   206d0:	mov    edi,0x28
   206d5:	mov    QWORD PTR [rsp+0x58],r11
   206da:	mov    BYTE PTR [rsp+0x50],r10b
   206df:	call   4b850 <xmalloc>
   206e4:	movzx  r10d,BYTE PTR [rsp+0x50]
   206ea:	mov    r11,QWORD PTR [rsp+0x58]
   206ef:	cmp    QWORD PTR [rsp+0xb0],0x0
   206f8:	je     20d2d <map_html_tags+0x97d>
   206fe:	mov    rdx,QWORD PTR [rsp+0xb8]
   20706:	mov    QWORD PTR [rsp+0xb8],rax
   2070e:	mov    QWORD PTR [rdx+0x20],rax
   20712:	mov    QWORD PTR [rax+0x18],rdx
   20716:	mov    QWORD PTR [rax+0x20],0x0
   2071e:	mov    QWORD PTR [rax],r13
   20721:	mov    QWORD PTR [rax+0x8],rbp
   20725:	mov    QWORD PTR [rax+0x10],0x0
   2072d:	mov    rdi,QWORD PTR [rsp+0x28]
   20732:	mov    rdx,rbp
   20735:	mov    rsi,r13
   20738:	mov    QWORD PTR [rsp+0x58],r11
   2073d:	mov    BYTE PTR [rsp+0x50],r10b
   20742:	call   20210 <name_allowed>
   20747:	mov    r11,QWORD PTR [rsp+0x58]
   2074c:	mov    r10d,0x1
   20752:	test   al,al
   20754:	jne    20dc0 <map_html_tags+0xa10>
   2075a:	mov    DWORD PTR [rsp+0x70],0x0
   20762:	mov    r8,r14
   20765:	mov    r9,rbp
   20768:	mov    r14,r13
   2076b:	movzx  eax,BYTE PTR [rbx]
   2076e:	cmp    al,0xd
   20770:	jg     2087f <map_html_tags+0x4cf>
   20776:	cmp    al,0x8
   20778:	jg     20a58 <map_html_tags+0x6a8>
   2077e:	mov    edx,eax
   20780:	and    edx,0xfffffffd
   20783:	cmp    dl,0x3c
   20786:	je     20ffe <map_html_tags+0xc4e>
   2078c:	mov    r12,rbx
   2078f:	jmp    207ae <map_html_tags+0x3fe>
   20791:	nop    DWORD PTR [rax+0x0]
   20798:	cmp    al,0x2f
   2079a:	je     207c4 <map_html_tags+0x414>
   2079c:	add    r12,0x1
   207a0:	cmp    r15,r12
   207a3:	jbe    20590 <map_html_tags+0x1e0>
   207a9:	movzx  eax,BYTE PTR [r12]
   207ae:	lea    edx,[rax-0x21]
   207b1:	cmp    dl,0x5d
   207b4:	lea    edx,[rax-0x3c]
   207b7:	setbe  cl
   207ba:	cmp    dl,0x2
   207bd:	seta   dl
   207c0:	test   cl,dl
   207c2:	jne    20798 <map_html_tags+0x3e8>
   207c4:	cmp    rbx,r12
   207c7:	je     20e90 <map_html_tags+0xae0>
   207cd:	mov    rbp,r12
   207d0:	cmp    al,0xd
   207d2:	jg     20998 <map_html_tags+0x5e8>
   207d8:	cmp    al,0x8
   207da:	jg     20a70 <map_html_tags+0x6c0>
   207e0:	mov    edx,eax
   207e2:	and    edx,0xfffffffd
   207e5:	cmp    dl,0x3c
   207e8:	je     207f2 <map_html_tags+0x442>
   207ea:	cmp    al,0x2f
   207ec:	jne    20e90 <map_html_tags+0xae0>
   207f2:	mov    QWORD PTR [rsp+0x68],r12
   207f7:	mov    r13,r12
   207fa:	mov    QWORD PTR [rsp+0x50],rbx
   207ff:	mov    QWORD PTR [rsp+0x58],rbx
   20804:	mov    DWORD PTR [rsp+0x78],0x1
   2080c:	test   r10b,r10b
   2080f:	jne    20871 <map_html_tags+0x4c1>
   20811:	mov    rdi,QWORD PTR [rsp+0x30]
   20816:	mov    rdx,r12
   20819:	mov    rsi,rbx
   2081c:	mov    QWORD PTR [rsp+0x98],r11
   20824:	mov    QWORD PTR [rsp+0x90],r9
   2082c:	mov    BYTE PTR [rsp+0x88],r10b
   20834:	mov    QWORD PTR [rsp+0x80],r8
   2083c:	call   20210 <name_allowed>
   20841:	mov    r8,QWORD PTR [rsp+0x80]
   20849:	movzx  r10d,BYTE PTR [rsp+0x88]
   20852:	test   al,al
   20854:	mov    BYTE PTR [rsp+0xa0],al
   2085b:	mov    r9,QWORD PTR [rsp+0x90]
   20863:	mov    r11,QWORD PTR [rsp+0x98]
   2086b:	jne    20b30 <map_html_tags+0x780>
   20871:	mov    rbx,rbp
   20874:	movzx  eax,BYTE PTR [rbx]
   20877:	cmp    al,0xd
   20879:	jle    20776 <map_html_tags+0x3c6>
   2087f:	cmp    al,0x20
   20881:	je     20a58 <map_html_tags+0x6a8>
   20887:	cmp    al,0x2f
   20889:	jne    2077e <map_html_tags+0x3ce>
   2088f:	add    rbx,0x1
   20893:	mov    r13,r14
   20896:	mov    rbp,r9
   20899:	mov    r14,r8
   2089c:	cmp    r15,rbx
   2089f:	jbe    20590 <map_html_tags+0x1e0>
   208a5:	movzx  eax,BYTE PTR [rbx]
   208a8:	cmp    al,0xd
   208aa:	jg     20578 <map_html_tags+0x1c8>
   208b0:	cmp    al,0x8
   208b2:	jg     20580 <map_html_tags+0x1d0>
   208b8:	and    eax,0xfffffffd
   208bb:	cmp    al,0x3c
   208bd:	jne    20556 <map_html_tags+0x1a6>
   208c3:	mov    edx,DWORD PTR [rsp]
   208c6:	lea    r14,[rbx+0x1]
   208ca:	test   edx,edx
   208cc:	jne    208e4 <map_html_tags+0x534>
   208ce:	mov    rax,QWORD PTR [rsp+0xb8]
   208d6:	test   rax,rax
   208d9:	je     208e4 <map_html_tags+0x534>
   208db:	cmp    QWORD PTR [rax],r13
   208de:	jne    208e4 <map_html_tags+0x534>
   208e0:	mov    QWORD PTR [rax+0x10],r14
   208e4:	test   r10b,r10b
   208e7:	je     20e98 <map_html_tags+0xae8>
   208ed:	cmp    r15,r14
   208f0:	ja     20556 <map_html_tags+0x1a6>
   208f6:	jmp    20590 <map_html_tags+0x1e0>
   208fb:	nop    DWORD PTR [rax+rax*1+0x0]
   20900:	cmp    rax,r15
   20903:	je     206c0 <map_html_tags+0x310>
   20909:	lea    rcx,[rax+0x1]
   2090d:	movzx  edx,BYTE PTR [rax]
   20910:	cmp    r15,rcx
   20913:	je     206c0 <map_html_tags+0x310>
   20919:	cmp    dl,0x2d
   2091c:	jne    206c0 <map_html_tags+0x310>
   20922:	lea    rdx,[rax+0x2]
   20926:	movzx  eax,BYTE PTR [rax+0x1]
   2092a:	cmp    r15,rdx
   2092d:	jne    2094b <map_html_tags+0x59b>
   2092f:	jmp    206c0 <map_html_tags+0x310>
   20934:	nop    DWORD PTR [rax+0x0]
   20938:	lea    rcx,[rdx+0x1]
   2093c:	movzx  eax,BYTE PTR [rdx]
   2093f:	cmp    r15,rcx
   20942:	je     206c0 <map_html_tags+0x310>
   20948:	mov    rdx,rcx
   2094b:	cmp    al,0x2d
   2094d:	jne    20938 <map_html_tags+0x588>
   2094f:	cmp    r15,rdx
   20952:	je     206c0 <map_html_tags+0x310>
   20958:	lea    rcx,[rdx+0x1]
   2095c:	movzx  eax,BYTE PTR [rdx]
   2095f:	cmp    r15,rcx
   20962:	je     206c0 <map_html_tags+0x310>
   20968:	cmp    al,0x2d
   2096a:	jne    20948 <map_html_tags+0x598>
   2096c:	lea    rax,[rdx+0x2]
   20970:	movzx  edx,BYTE PTR [rdx+0x1]
   20974:	cmp    r15,rax
   20977:	je     206c0 <map_html_tags+0x310>
   2097d:	mov    ecx,edx
   2097f:	nop
   20980:	lea    edx,[rcx-0x9]
   20983:	cmp    dl,0x35
   20986:	jbe    20670 <map_html_tags+0x2c0>
   2098c:	jmp    20ac0 <map_html_tags+0x710>
   20991:	nop    DWORD PTR [rax+0x0]
   20998:	cmp    al,0x20
   2099a:	je     20a70 <map_html_tags+0x6c0>
   209a0:	lea    edx,[rax-0x21]
   209a3:	cmp    dl,0x5d
   209a6:	ja     209b4 <map_html_tags+0x604>
   209a8:	lea    edx,[rax-0x3c]
   209ab:	cmp    dl,0x2
   209ae:	ja     207f2 <map_html_tags+0x442>
   209b4:	mov    edx,eax
   209b6:	and    edx,0xfffffffd
   209b9:	cmp    dl,0x3c
   209bc:	sete   cl
   209bf:	cmp    al,0x2f
   209c1:	sete   dl
   209c4:	or     cl,dl
   209c6:	jne    207f2 <map_html_tags+0x442>
   209cc:	cmp    al,0x3d
   209ce:	jne    20e90 <map_html_tags+0xae0>
   209d4:	lea    rax,[rbp+0x1]
   209d8:	cmp    r15,rax
   209db:	jbe    20590 <map_html_tags+0x1e0>
   209e1:	movzx  edx,BYTE PTR [rax]
   209e4:	cmp    dl,0xd
   209e7:	jg     21010 <map_html_tags+0xc60>
   209ed:	cmp    dl,0x8
   209f0:	jg     21080 <map_html_tags+0xcd0>
   209f6:	mov    QWORD PTR [rsp+0x50],rax
   209fb:	mov    rbp,rax
   209fe:	cmp    dl,0xd
   20a01:	jg     20a26 <map_html_tags+0x676>
   20a03:	cmp    dl,0x8
   20a06:	jg     20a2b <map_html_tags+0x67b>
   20a08:	and    edx,0xfffffffd
   20a0b:	cmp    dl,0x3c
   20a0e:	je     20a2b <map_html_tags+0x67b>
   20a10:	add    rbp,0x1
   20a14:	cmp    r15,rbp
   20a17:	jbe    20590 <map_html_tags+0x1e0>
   20a1d:	movzx  edx,BYTE PTR [rbp+0x0]
   20a21:	cmp    dl,0xd
   20a24:	jle    20a03 <map_html_tags+0x653>
   20a26:	cmp    dl,0x20
   20a29:	jne    20a08 <map_html_tags+0x658>
   20a2b:	mov    rax,QWORD PTR [rsp+0x50]
   20a30:	cmp    rax,rbp
   20a33:	je     20e90 <map_html_tags+0xae0>
   20a39:	mov    QWORD PTR [rsp+0x68],rbp
   20a3e:	mov    r13,rbp
   20a41:	mov    QWORD PTR [rsp+0x58],rax
   20a46:	mov    DWORD PTR [rsp+0x78],0x2
   20a4e:	jmp    2080c <map_html_tags+0x45c>
   20a53:	nop    DWORD PTR [rax+rax*1+0x0]
   20a58:	add    rbx,0x1
   20a5c:	cmp    r15,rbx
   20a5f:	ja     2076b <map_html_tags+0x3bb>
   20a65:	jmp    20590 <map_html_tags+0x1e0>
   20a6a:	nop    WORD PTR [rax+rax*1+0x0]
   20a70:	add    rbp,0x1
   20a74:	cmp    r15,rbp
   20a77:	jbe    20590 <map_html_tags+0x1e0>
   20a7d:	movzx  eax,BYTE PTR [rbp+0x0]
   20a81:	jmp    207d0 <map_html_tags+0x420>
   20a86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20a90:	lea    r13,[rax+0x2]
   20a94:	cmp    r15,r13
   20a97:	jbe    20590 <map_html_tags+0x1e0>
   20a9d:	mov    DWORD PTR [rsp],0x1
   20aa4:	movzx  edx,BYTE PTR [rax+0x2]
   20aa8:	jmp    204ed <map_html_tags+0x13d>
   20aad:	cmp    rax,r15
   20ab0:	je     206c0 <map_html_tags+0x310>
   20ab6:	mov    ecx,0x2f
   20abb:	nop    DWORD PTR [rax+rax*1+0x0]
   20ac0:	cmp    cl,0x2f
   20ac3:	setne  sil
   20ac7:	cmp    cl,0x3d
   20aca:	setne  dl
   20acd:	test   sil,dl
   20ad0:	je     206c0 <map_html_tags+0x310>
   20ad6:	lea    edx,[rcx-0x21]
   20ad9:	cmp    dl,0x5d
   20adc:	ja     206c0 <map_html_tags+0x310>
   20ae2:	cmp    r15,rax
   20ae5:	je     206c0 <map_html_tags+0x310>
   20aeb:	mov    edx,ecx
   20aed:	cmp    dl,0x2d
   20af0:	je     20900 <map_html_tags+0x550>
   20af6:	lea    ecx,[rdx-0x21]
   20af9:	cmp    cl,0x5d
   20afc:	ja     20db0 <map_html_tags+0xa00>
   20b02:	cmp    dl,0x3d
   20b05:	je     20db0 <map_html_tags+0xa00>
   20b0b:	mov    ecx,edx
   20b0d:	and    ecx,0xfffffffd
   20b10:	cmp    cl,0x3c
   20b13:	je     20db0 <map_html_tags+0xa00>
   20b19:	cmp    dl,0x2f
   20b1c:	je     20aad <map_html_tags+0x6fd>
   20b1e:	add    rax,0x1
   20b22:	movzx  edx,BYTE PTR [rax-0x1]
   20b26:	cmp    r15,rax
   20b29:	jne    20aed <map_html_tags+0x73d>
   20b2b:	jmp    206c0 <map_html_tags+0x310>
   20b30:	mov    eax,DWORD PTR [rsp+0x70]
   20b34:	movsxd rdx,DWORD PTR [rsp+0x60]
   20b39:	add    eax,0x1
   20b3c:	mov    DWORD PTR [rsp+0x80],eax
   20b43:	cdqe   
   20b45:	cmp    rax,rdx
   20b48:	jle    20c03 <map_html_tags+0x853>
   20b4e:	mov    rcx,rdx
   20b51:	nop    DWORD PTR [rax+0x0]
   20b58:	add    rcx,rcx
   20b5b:	cmp    rax,rcx
   20b5e:	jg     20b58 <map_html_tags+0x7a8>
   20b60:	cmp    rdx,rcx
   20b63:	je     20c03 <map_html_tags+0x853>
   20b69:	lea    rsi,[rcx+rcx*4]
   20b6d:	shl    rsi,0x3
   20b71:	cmp    BYTE PTR [rsp+0x10],0x0
   20b76:	jne    20de8 <map_html_tags+0xa38>
   20b7c:	mov    rdi,rsi
   20b7f:	mov    QWORD PTR [rsp+0xa8],r11
   20b87:	mov    QWORD PTR [rsp+0x98],r9
   20b8f:	mov    BYTE PTR [rsp+0x90],r10b
   20b97:	mov    QWORD PTR [rsp+0x88],r8
   20b9f:	mov    QWORD PTR [rsp+0x10],rcx
   20ba4:	mov    QWORD PTR [rsp+0x60],rdx
   20ba9:	call   4b850 <xmalloc>
   20bae:	mov    rdx,QWORD PTR [rsp+0x60]
   20bb3:	mov    rsi,QWORD PTR [rsp+0x38]
   20bb8:	mov    rdi,rax
   20bbb:	lea    rdx,[rdx+rdx*4]
   20bbf:	shl    rdx,0x3
   20bc3:	call   cb30 <memcpy@plt>
   20bc8:	mov    r11,QWORD PTR [rsp+0xa8]
   20bd0:	mov    rcx,QWORD PTR [rsp+0x10]
   20bd5:	mov    QWORD PTR [rsp+0x38],rax
   20bda:	mov    r9,QWORD PTR [rsp+0x98]
   20be2:	movzx  r10d,BYTE PTR [rsp+0x90]
   20beb:	mov    r8,QWORD PTR [rsp+0x88]
   20bf3:	movzx  eax,BYTE PTR [rsp+0xa0]
   20bfb:	mov    DWORD PTR [rsp+0x60],ecx
   20bff:	mov    BYTE PTR [rsp+0x10],al
   20c03:	movsxd rax,DWORD PTR [rsp+0x70]
   20c08:	mov    rdi,QWORD PTR [rsp+0x38]
   20c0d:	mov    rsi,rbx
   20c10:	mov    ecx,0x1
   20c15:	mov    edx,DWORD PTR [rsp+0xcc]
   20c1c:	mov    QWORD PTR [rsp+0xa8],r11
   20c24:	mov    rbx,rbp
   20c27:	lea    rax,[rax+rax*4]
   20c2b:	mov    QWORD PTR [rsp+0xa0],r9
   20c33:	lea    rax,[rdi+rax*8]
   20c37:	lea    rdi,[rsp+0xc0]
   20c3f:	mov    BYTE PTR [rsp+0x98],r10b
   20c47:	mov    DWORD PTR [rax+0x1c],edx
   20c4a:	mov    rdx,r12
   20c4d:	mov    QWORD PTR [rsp+0x90],r8
   20c55:	mov    QWORD PTR [rsp+0x70],rax
   20c5a:	mov    QWORD PTR [rsp+0x88],rdi
   20c62:	call   1fa50 <convert_and_copy>
   20c67:	mov    edx,DWORD PTR [rsp+0xcc]
   20c6e:	mov    rax,QWORD PTR [rsp+0x70]
   20c73:	mov    rdi,QWORD PTR [rsp+0x88]
   20c7b:	mov    ecx,DWORD PTR [rsp+0x78]
   20c7f:	mov    DWORD PTR [rax+0x20],edx
   20c82:	mov    rsi,QWORD PTR [rsp+0x58]
   20c87:	mov    rdx,r13
   20c8a:	call   1fa50 <convert_and_copy>
   20c8f:	mov    rdi,QWORD PTR [rsp+0x50]
   20c94:	mov    rdx,QWORD PTR [rsp+0x68]
   20c99:	mov    rax,QWORD PTR [rsp+0x70]
   20c9e:	mov    r8,QWORD PTR [rsp+0x90]
   20ca6:	sub    rdx,rdi
   20ca9:	mov    r9,QWORD PTR [rsp+0xa0]
   20cb1:	movzx  r10d,BYTE PTR [rsp+0x98]
   20cba:	mov    QWORD PTR [rax+0x10],rdi
   20cbe:	mov    r11,QWORD PTR [rsp+0xa8]
   20cc6:	mov    DWORD PTR [rax+0x18],edx
   20cc9:	mov    eax,DWORD PTR [rsp+0x80]
   20cd0:	mov    DWORD PTR [rsp+0x70],eax
   20cd4:	jmp    20874 <map_html_tags+0x4c4>
   20cd9:	cmp    BYTE PTR [r11+0x3],0x2d
   20cde:	jne    2064b <map_html_tags+0x29b>
   20ce4:	lea    rbp,[r11+0x6]
   20ce8:	lea    rax,[r11+0x3]
   20cec:	cmp    r15,rbp
   20cef:	ja     20d1f <map_html_tags+0x96f>
   20cf1:	jmp    20556 <map_html_tags+0x1a6>
   20cf6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   20d00:	cmp    dl,0x3e
   20d03:	jne    20d0f <map_html_tags+0x95f>
   20d05:	cmp    BYTE PTR [rax+0x2],0x2d
   20d09:	je     20e78 <map_html_tags+0xac8>
   20d0f:	mov    rax,rbp
   20d12:	lea    rbp,[rax+0x3]
   20d16:	cmp    r15,rbp
   20d19:	jbe    20556 <map_html_tags+0x1a6>
   20d1f:	movzx  edx,BYTE PTR [rax+0x3]
   20d23:	cmp    dl,0x2d
   20d26:	jne    20d00 <map_html_tags+0x950>
   20d28:	jmp    20687 <map_html_tags+0x2d7>
   20d2d:	mov    QWORD PTR [rsp+0xb8],rax
   20d35:	mov    QWORD PTR [rsp+0xb0],rax
   20d3d:	mov    QWORD PTR [rax+0x20],0x0
   20d45:	mov    QWORD PTR [rax+0x18],0x0
   20d4d:	jmp    2071e <map_html_tags+0x36e>
   20d52:	lea    rdx,[rax+0x1]
   20d56:	movzx  ecx,BYTE PTR [rax]
   20d59:	cmp    r15,rdx
   20d5c:	je     206c0 <map_html_tags+0x310>
   20d62:	mov    rax,rdx
   20d65:	jmp    20662 <map_html_tags+0x2b2>
   20d6a:	cmp    rax,r15
   20d6d:	je     206c0 <map_html_tags+0x310>
   20d73:	lea    rdx,[rax+0x1]
   20d77:	movzx  esi,BYTE PTR [rax]
   20d7a:	cmp    r15,rdx
   20d7d:	je     206c0 <map_html_tags+0x310>
   20d83:	lea    rax,[rdx+0x1]
   20d87:	movzx  edx,BYTE PTR [rdx]
   20d8a:	cmp    cl,sil
   20d8d:	je     20db0 <map_html_tags+0xa00>
   20d8f:	cmp    rax,r15
   20d92:	je     206c0 <map_html_tags+0x310>
   20d98:	mov    esi,edx
   20d9a:	mov    rdx,rax
   20d9d:	lea    rax,[rdx+0x1]
   20da1:	movzx  edx,BYTE PTR [rdx]
   20da4:	cmp    cl,sil
   20da7:	jne    20d8f <map_html_tags+0x9df>
   20da9:	nop    DWORD PTR [rax+0x0]
   20db0:	cmp    rax,r15
   20db3:	je     206c0 <map_html_tags+0x310>
   20db9:	mov    ecx,edx
   20dbb:	jmp    20980 <map_html_tags+0x5d0>
   20dc0:	lea    rdi,[rsp+0xc0]
   20dc8:	mov    ecx,0x1
   20dcd:	mov    rdx,rbp
   20dd0:	mov    rsi,r13
   20dd3:	call   1fa50 <convert_and_copy>
   20dd8:	movzx  r10d,BYTE PTR [rsp+0x50]
   20dde:	mov    r11,QWORD PTR [rsp+0x58]
   20de3:	jmp    2075a <map_html_tags+0x3aa>
   20de8:	mov    rdi,QWORD PTR [rsp+0x38]
   20ded:	mov    QWORD PTR [rsp+0x98],r11
   20df5:	mov    QWORD PTR [rsp+0x90],r9
   20dfd:	mov    BYTE PTR [rsp+0x88],r10b
   20e05:	mov    QWORD PTR [rsp+0x60],r8
   20e0a:	mov    QWORD PTR [rsp+0x10],rcx
   20e0f:	call   4b870 <xrealloc>
   20e14:	mov    rcx,QWORD PTR [rsp+0x10]
   20e19:	mov    r8,QWORD PTR [rsp+0x60]
   20e1e:	mov    QWORD PTR [rsp+0x38],rax
   20e23:	mov    r9,QWORD PTR [rsp+0x90]
   20e2b:	movzx  r10d,BYTE PTR [rsp+0x88]
   20e34:	mov    r11,QWORD PTR [rsp+0x98]
   20e3c:	jmp    20bf3 <map_html_tags+0x843>
   20e41:	mov    rbp,rax
   20e44:	jmp    206c0 <map_html_tags+0x310>
   20e49:	mov    rbp,rax
   20e4c:	lea    rax,[rbp+0x1]
   20e50:	cmp    r15,rax
   20e53:	je     20556 <map_html_tags+0x1a6>
   20e59:	movzx  edx,BYTE PTR [rbp+0x1]
   20e5d:	cmp    dl,0x2d
   20e60:	je     20e49 <map_html_tags+0xa99>
   20e62:	cmp    dl,0x3e
   20e65:	jne    20d12 <map_html_tags+0x962>
   20e6b:	add    rbp,0x2
   20e6f:	jmp    206c0 <map_html_tags+0x310>
   20e74:	nop    DWORD PTR [rax+0x0]
   20e78:	cmp    BYTE PTR [rax+0x1],0x2d
   20e7c:	jne    20d0f <map_html_tags+0x95f>
   20e82:	lea    rbp,[rax+0x4]
   20e86:	jmp    206c0 <map_html_tags+0x310>
   20e8b:	nop    DWORD PTR [rax+rax*1+0x0]
   20e90:	mov    r14,r8
   20e93:	jmp    20556 <map_html_tags+0x1a6>
   20e98:	mov    eax,DWORD PTR [rsp]
   20e9b:	mov    rcx,QWORD PTR [rsp+0xc0]
   20ea3:	mov    DWORD PTR [rsp+0xf8],eax
   20eaa:	mov    eax,DWORD PTR [rsp+0x70]
   20eae:	mov    QWORD PTR [rsp+0xf0],rcx
   20eb6:	mov    DWORD PTR [rsp+0xfc],eax
   20ebd:	test   eax,eax
   20ebf:	je     20ef8 <map_html_tags+0xb48>
   20ec1:	mov    esi,DWORD PTR [rsp+0x70]
   20ec5:	mov    rdi,QWORD PTR [rsp+0x38]
   20eca:	lea    edx,[rsi-0x1]
   20ecd:	mov    rax,rdi
   20ed0:	lea    rdx,[rdx+rdx*4]
   20ed4:	lea    rsi,[rdi+rdx*8+0x28]
   20ed9:	movsxd rdx,DWORD PTR [rax+0x1c]
   20edd:	add    rax,0x28
   20ee1:	add    rdx,rcx
   20ee4:	mov    QWORD PTR [rax-0x28],rdx
   20ee8:	movsxd rdx,DWORD PTR [rax-0x8]
   20eec:	add    rdx,rcx
   20eef:	mov    QWORD PTR [rax-0x20],rdx
   20ef3:	cmp    rsi,rax
   20ef6:	jne    20ed9 <map_html_tags+0xb29>
   20ef8:	mov    rax,QWORD PTR [rsp+0x38]
   20efd:	mov    QWORD PTR [rsp+0x108],r11
   20f05:	mov    QWORD PTR [rsp+0x110],r14
   20f0d:	mov    QWORD PTR [rsp+0x100],rax
   20f15:	mov    eax,DWORD PTR [rsp]
   20f18:	mov    QWORD PTR [rsp+0x118],0x0
   20f24:	mov    QWORD PTR [rsp+0x120],0x0
   20f30:	test   eax,eax
   20f32:	jne    20f59 <map_html_tags+0xba9>
   20f34:	mov    rsi,QWORD PTR [rsp+0x48]
   20f39:	mov    rax,QWORD PTR [rsp+0x40]
   20f3e:	lea    rdi,[rsp+0xf0]
   20f46:	call   rax
   20f48:	cmp    BYTE PTR [rbx],0x3c
   20f4b:	jne    208ed <map_html_tags+0x53d>
   20f51:	mov    r14,rbx
   20f54:	jmp    20556 <map_html_tags+0x1a6>
   20f59:	mov    r12,QWORD PTR [rsp+0xb8]
   20f61:	sub    rbp,r13
   20f64:	test   r12,r12
   20f67:	je     20f34 <map_html_tags+0xb84>
   20f69:	movsxd rbp,ebp
   20f6c:	mov    QWORD PTR [rsp],r15
   20f70:	mov    r15,r14
   20f73:	mov    r14,rbx
   20f76:	mov    rbx,rbp
   20f79:	jmp    20f8a <map_html_tags+0xbda>
   20f7b:	nop    DWORD PTR [rax+rax*1+0x0]
   20f80:	mov    r12,QWORD PTR [r12+0x18]
   20f85:	test   r12,r12
   20f88:	je     20fef <map_html_tags+0xc3f>
   20f8a:	mov    rdi,QWORD PTR [r12]
   20f8e:	mov    rax,QWORD PTR [r12+0x8]
   20f93:	sub    rax,rdi
   20f96:	cmp    rax,rbp
   20f99:	jne    20f80 <map_html_tags+0xbd0>
   20f9b:	mov    rdx,rbx
   20f9e:	mov    rsi,r13
   20fa1:	mov    QWORD PTR [rsp+0x50],r11
   20fa6:	call   c7a0 <strncasecmp@plt>
   20fab:	mov    r11,QWORD PTR [rsp+0x50]
   20fb0:	test   eax,eax
   20fb2:	jne    20f80 <map_html_tags+0xbd0>
   20fb4:	mov    rax,QWORD PTR [r12+0x10]
   20fb9:	mov    rbx,r14
   20fbc:	mov    r14,r15
   20fbf:	mov    r15,QWORD PTR [rsp]
   20fc3:	test   rax,rax
   20fc6:	je     20fd8 <map_html_tags+0xc28>
   20fc8:	mov    QWORD PTR [rsp+0x118],rax
   20fd0:	mov    QWORD PTR [rsp+0x120],r11
   20fd8:	mov    rsi,QWORD PTR [rsp+0x20]
   20fdd:	mov    rdi,QWORD PTR [rsp+0x18]
   20fe2:	mov    rdx,r12
   20fe5:	call   202f0 <tagstack_pop>
   20fea:	jmp    20f34 <map_html_tags+0xb84>
   20fef:	mov    rbx,r14
   20ff2:	mov    r14,r15
   20ff5:	mov    r15,QWORD PTR [rsp]
   20ff9:	jmp    20f34 <map_html_tags+0xb84>
   20ffe:	mov    r13,r14
   21001:	mov    rbp,r9
   21004:	jmp    208c3 <map_html_tags+0x513>
   21009:	call   c7b0 <__stack_chk_fail@plt>
   2100e:	xchg   ax,ax
   21010:	cmp    dl,0x20
   21013:	je     21080 <map_html_tags+0xcd0>
   21015:	cmp    dl,0x22
   21018:	mov    QWORD PTR [rsp+0x50],rax
   2101d:	sete   sil
   21021:	cmp    dl,0x27
   21024:	sete   al
   21027:	or     sil,al
   2102a:	je     210da <map_html_tags+0xd2a>
   21030:	mov    rax,QWORD PTR [rsp+0x50]
   21035:	add    rax,0x1
   21039:	mov    QWORD PTR [rsp+0x58],rax
   2103e:	cmp    r15,rax
   21041:	jbe    20590 <map_html_tags+0x1e0>
   21047:	mov    r13,rax
   2104a:	jmp    21061 <map_html_tags+0xcb1>
   2104c:	nop    DWORD PTR [rax+0x0]
   21050:	cmp    al,0xa
   21052:	je     21098 <map_html_tags+0xce8>
   21054:	add    r13,0x1
   21058:	cmp    r15,r13
   2105b:	jbe    20590 <map_html_tags+0x1e0>
   21061:	movzx  eax,BYTE PTR [r13+0x0]
   21066:	cmp    dl,al
   21068:	je     210aa <map_html_tags+0xcfa>
   2106a:	test   cl,cl
   2106c:	je     21050 <map_html_tags+0xca0>
   2106e:	and    eax,0xfffffffd
   21071:	cmp    al,0x3c
   21073:	je     210d2 <map_html_tags+0xd22>
   21075:	mov    ecx,esi
   21077:	jmp    21054 <map_html_tags+0xca4>
   21079:	nop    DWORD PTR [rax+0x0]
   21080:	add    rax,0x1
   21084:	cmp    r15,rax
   21087:	jne    209e1 <map_html_tags+0x631>
   2108d:	jmp    20590 <map_html_tags+0x1e0>
   21092:	nop    WORD PTR [rax+rax*1+0x0]
   21098:	mov    rax,QWORD PTR [rsp+0x50]
   2109d:	mov    r13,QWORD PTR [rsp+0x58]
   210a2:	movzx  eax,BYTE PTR [rax+0x1]
   210a6:	cmp    dl,al
   210a8:	jne    2106e <map_html_tags+0xcbe>
   210aa:	lea    rbp,[r13+0x1]
   210ae:	cmp    r15,rbp
   210b1:	jbe    20590 <map_html_tags+0x1e0>
   210b7:	cmp    DWORD PTR [rsp+0x7c],0x1
   210bc:	mov    QWORD PTR [rsp+0x68],rbp
   210c1:	sbb    eax,eax
   210c3:	and    eax,0xfffffffc
   210c6:	add    eax,0x6
   210c9:	mov    DWORD PTR [rsp+0x78],eax
   210cd:	jmp    2080c <map_html_tags+0x45c>
   210d2:	mov    rbp,r13
   210d5:	jmp    20496 <map_html_tags+0xe6>
   210da:	mov    rbp,QWORD PTR [rsp+0x50]
   210df:	jmp    209fe <map_html_tags+0x64e>
   210e4:	nop    WORD PTR cs:[rax+rax*1+0x0]
   210ee:	xchg   ax,ax

00000000000210f0 <find_attr.isra.0>:
   210f0:	test   edi,edi
   210f2:	jle    2114b <find_attr.isra.0+0x5b>
   210f4:	push   r14
   210f6:	mov    r14,rcx
   210f9:	push   r13
   210fb:	mov    r13,rdx
   210fe:	push   r12
   21100:	mov    r12d,edi
   21103:	push   rbp
   21104:	xor    ebp,ebp
   21106:	push   rbx
   21107:	mov    rbx,QWORD PTR [rsi]
   2110a:	jmp    2111c <find_attr.isra.0+0x2c>
   2110c:	nop    DWORD PTR [rax+0x0]
   21110:	add    ebp,0x1
   21113:	add    rbx,0x28
   21117:	cmp    ebp,r12d
   2111a:	je     21140 <find_attr.isra.0+0x50>
   2111c:	mov    rdi,QWORD PTR [rbx]
   2111f:	mov    rsi,r13
   21122:	call   43340 <c_strcasecmp>
   21127:	test   eax,eax
   21129:	jne    21110 <find_attr.isra.0+0x20>
   2112b:	test   r14,r14
   2112e:	je     21133 <find_attr.isra.0+0x43>
   21130:	mov    DWORD PTR [r14],ebp
   21133:	mov    rax,QWORD PTR [rbx+0x8]
   21137:	pop    rbx
   21138:	pop    rbp
   21139:	pop    r12
   2113b:	pop    r13
   2113d:	pop    r14
   2113f:	ret    
   21140:	pop    rbx
   21141:	xor    eax,eax
   21143:	pop    rbp
   21144:	pop    r12
   21146:	pop    r13
   21148:	pop    r14
   2114a:	ret    
   2114b:	xor    eax,eax
   2114d:	ret    
   2114e:	xchg   ax,ax

0000000000021150 <collect_tags_mapper>:
   21150:	endbr64 
   21154:	push   rbp
   21155:	mov    rbp,rsi
   21158:	push   rbx
   21159:	mov    rbx,rdi
   2115c:	sub    rsp,0x18
   21160:	mov    rsi,QWORD PTR [rdi]
   21163:	mov    rdi,QWORD PTR [rip+0x624ce]        # 83638 <interesting_tags>
   2116a:	mov    rax,QWORD PTR fs:0x28
   21173:	mov    QWORD PTR [rsp+0x8],rax
   21178:	xor    eax,eax
   2117a:	call   1da70 <hash_table_get>
   2117f:	test   rax,rax
   21182:	je     2118f <collect_tags_mapper+0x3f>
   21184:	mov    edi,DWORD PTR [rax]
   21186:	mov    rdx,rbp
   21189:	mov    rsi,rbx
   2118c:	call   QWORD PTR [rax+0x10]
   2118f:	mov    edi,DWORD PTR [rbx+0xc]
   21192:	lea    rcx,[rsp+0x4]
   21197:	lea    rsi,[rbx+0x10]
   2119b:	lea    rdx,[rip+0x46cd3]        # 67e75 <primes.6089+0x1d95>
   211a2:	call   210f0 <find_attr.isra.0>
   211a7:	test   rax,rax
   211aa:	je     211ea <collect_tags_mapper+0x9a>
   211ac:	movsxd rax,DWORD PTR [rsp+0x4]
   211b1:	mov    rcx,QWORD PTR [rbp+0x0]
   211b5:	lea    rdx,[rax+rax*4]
   211b9:	mov    rax,QWORD PTR [rbx+0x10]
   211bd:	lea    rdx,[rax+rdx*8]
   211c1:	mov    rax,QWORD PTR [rdx+0x10]
   211c5:	mov    edx,DWORD PTR [rdx+0x18]
   211c8:	sub    rax,rcx
   211cb:	movsxd rdi,eax
   211ce:	mov    esi,eax
   211d0:	movzx  ecx,BYTE PTR [rcx+rdi*1]
   211d4:	cmp    cl,0x27
   211d7:	je     21250 <collect_tags_mapper+0x100>
   211d9:	cmp    cl,0x22
   211dc:	je     21250 <collect_tags_mapper+0x100>
   211de:	test   edx,edx
   211e0:	jle    211ea <collect_tags_mapper+0x9a>
   211e2:	mov    rdi,rbp
   211e5:	call   19320 <get_urls_css>
   211ea:	mov    eax,DWORD PTR [rbx+0x8]
   211ed:	test   eax,eax
   211ef:	je     21204 <collect_tags_mapper+0xb4>
   211f1:	mov    rdi,QWORD PTR [rbx]
   211f4:	lea    rsi,[rip+0x46c7a]        # 67e75 <primes.6089+0x1d95>
   211fb:	call   43340 <c_strcasecmp>
   21200:	test   eax,eax
   21202:	je     21220 <collect_tags_mapper+0xd0>
   21204:	mov    rax,QWORD PTR [rsp+0x8]
   21209:	xor    rax,QWORD PTR fs:0x28
   21212:	jne    2125c <collect_tags_mapper+0x10c>
   21214:	add    rsp,0x18
   21218:	pop    rbx
   21219:	pop    rbp
   2121a:	ret    
   2121b:	nop    DWORD PTR [rax+rax*1+0x0]
   21220:	mov    rsi,QWORD PTR [rbx+0x28]
   21224:	test   rsi,rsi
   21227:	je     21204 <collect_tags_mapper+0xb4>
   21229:	mov    rdx,QWORD PTR [rbx+0x30]
   2122d:	cmp    rsi,rdx
   21230:	ja     21204 <collect_tags_mapper+0xb4>
   21232:	test   rdx,rdx
   21235:	je     21204 <collect_tags_mapper+0xb4>
   21237:	sub    rdx,rsi
   2123a:	mov    rdi,rbp
   2123d:	sub    rsi,QWORD PTR [rbp+0x0]
   21241:	call   19320 <get_urls_css>
   21246:	jmp    21204 <collect_tags_mapper+0xb4>
   21248:	nop    DWORD PTR [rax+rax*1+0x0]
   21250:	sub    edx,0x2
   21253:	lea    esi,[rax+0x1]
   21256:	test   edx,edx
   21258:	jg     211e2 <collect_tags_mapper+0x92>
   2125a:	jmp    211ea <collect_tags_mapper+0x9a>
   2125c:	call   c7b0 <__stack_chk_fail@plt>
   21261:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2126c:	nop    DWORD PTR [rax+0x0]

0000000000021270 <append_url>:
   21270:	endbr64 
   21274:	push   r15
   21276:	push   r14
   21278:	push   r13
   2127a:	push   r12
   2127c:	mov    r12,rdi
   2127f:	push   rbp
   21280:	mov    rbp,rcx
   21283:	push   rbx
   21284:	mov    ebx,esi
   21286:	sub    rsp,0x38
   2128a:	mov    DWORD PTR [rsp+0x14],edx
   2128e:	call   371c0 <url_has_scheme>
   21293:	mov    r15,QWORD PTR [rbp+0x8]
   21297:	mov    BYTE PTR [rsp+0x8],al
   2129b:	test   r15,r15
   2129e:	je     213b0 <append_url+0x140>
   212a4:	call   40010 <iri_new>
   212a9:	mov    rsi,QWORD PTR [rip+0x69120]        # 8a3d0 <opt+0x350>
   212b0:	mov    edx,0x1
   212b5:	mov    r14,rax
   212b8:	mov    rdi,rax
   212bb:	call   40130 <set_uri_encoding>
   212c0:	mov    BYTE PTR [r14+0x18],0x1
   212c5:	mov    rsi,r12
   212c8:	mov    rdi,r15
   212cb:	call   37e80 <uri_merge>
   212d0:	cmp    BYTE PTR [rip+0x68fe4],0x0        # 8a2bb <opt+0x23b>
   212d7:	mov    r11,rax
   212da:	jne    214a8 <append_url+0x238>
   212e0:	xor    ecx,ecx
   212e2:	xor    esi,esi
   212e4:	mov    rdi,r11
   212e7:	mov    rdx,r14
   212ea:	mov    QWORD PTR [rsp+0x18],r11
   212ef:	call   385f0 <url_parse>
   212f4:	mov    r11,QWORD PTR [rsp+0x18]
   212f9:	test   rax,rax
   212fc:	mov    r13,rax
   212ff:	je     21480 <append_url+0x210>
   21305:	mov    rdi,r11
   21308:	call   4bdc0 <rpl_free>
   2130d:	mov    rdi,r14
   21310:	call   400d0 <iri_free>
   21315:	cmp    BYTE PTR [rip+0x68f9f],0x0        # 8a2bb <opt+0x23b>
   2131c:	jne    21560 <append_url+0x2f0>
   21322:	mov    esi,0x30
   21327:	mov    edi,0x1
   2132c:	call   4b9c0 <xcalloc>
   21331:	cmp    BYTE PTR [rsp+0x8],0x0
   21336:	mov    QWORD PTR [rax],r13
   21339:	mov    r15,rax
   2133c:	mov    DWORD PTR [rax+0x1c],ebx
   2133f:	mov    eax,DWORD PTR [rsp+0x14]
   21343:	mov    DWORD PTR [r15+0x20],eax
   21347:	jne    21446 <append_url+0x1d6>
   2134d:	cmp    BYTE PTR [r12],0x2f
   21352:	je     21359 <append_url+0xe9>
   21354:	or     BYTE PTR [r15+0x10],0x2
   21359:	mov    rax,QWORD PTR [rbp+0x28]
   2135d:	xor    ecx,ecx
   2135f:	test   rax,rax
   21362:	jne    21373 <append_url+0x103>
   21364:	jmp    2145a <append_url+0x1ea>
   21369:	nop    DWORD PTR [rax+0x0]
   21370:	mov    rax,rdx
   21373:	cmp    DWORD PTR [rax+0x1c],ebx
   21376:	jge    21468 <append_url+0x1f8>
   2137c:	mov    rdx,QWORD PTR [rax+0x28]
   21380:	mov    rcx,rax
   21383:	test   rdx,rdx
   21386:	jne    21370 <append_url+0x100>
   21388:	mov    QWORD PTR [r15+0x28],0x0
   21390:	mov    QWORD PTR [rax+0x28],r15
   21394:	add    rsp,0x38
   21398:	mov    rax,r15
   2139b:	pop    rbx
   2139c:	pop    rbp
   2139d:	pop    r12
   2139f:	pop    r13
   213a1:	pop    r14
   213a3:	pop    r15
   213a5:	ret    
   213a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   213b0:	mov    r15,QWORD PTR [rbp+0x10]
   213b4:	call   40010 <iri_new>
   213b9:	mov    rsi,QWORD PTR [rip+0x69010]        # 8a3d0 <opt+0x350>
   213c0:	mov    edx,0x1
   213c5:	mov    r14,rax
   213c8:	mov    rdi,rax
   213cb:	call   40130 <set_uri_encoding>
   213d0:	mov    BYTE PTR [r14+0x18],0x1
   213d5:	test   r15,r15
   213d8:	jne    212c5 <append_url+0x55>
   213de:	cmp    BYTE PTR [rip+0x68ed6],0x0        # 8a2bb <opt+0x23b>
   213e5:	jne    2157f <append_url+0x30f>
   213eb:	cmp    BYTE PTR [rsp+0x8],0x0
   213f0:	je     21520 <append_url+0x2b0>
   213f6:	xor    ecx,ecx
   213f8:	mov    rdx,r14
   213fb:	xor    esi,esi
   213fd:	mov    rdi,r12
   21400:	call   385f0 <url_parse>
   21405:	mov    r13,rax
   21408:	test   rax,rax
   2140b:	je     21599 <append_url+0x329>
   21411:	mov    rdi,r14
   21414:	call   400d0 <iri_free>
   21419:	cmp    BYTE PTR [rip+0x68e9b],0x0        # 8a2bb <opt+0x23b>
   21420:	jne    21560 <append_url+0x2f0>
   21426:	mov    esi,0x30
   2142b:	mov    edi,0x1
   21430:	call   4b9c0 <xcalloc>
   21435:	mov    QWORD PTR [rax],r13
   21438:	mov    r15,rax
   2143b:	mov    DWORD PTR [rax+0x1c],ebx
   2143e:	mov    eax,DWORD PTR [rsp+0x14]
   21442:	mov    DWORD PTR [r15+0x20],eax
   21446:	mov    rax,QWORD PTR [rbp+0x28]
   2144a:	or     BYTE PTR [r15+0x10],0x4
   2144f:	xor    ecx,ecx
   21451:	test   rax,rax
   21454:	jne    21373 <append_url+0x103>
   2145a:	mov    QWORD PTR [rbp+0x28],r15
   2145e:	jmp    21394 <append_url+0x124>
   21463:	nop    DWORD PTR [rax+rax*1+0x0]
   21468:	mov    QWORD PTR [r15+0x28],rax
   2146c:	test   rcx,rcx
   2146f:	je     2145a <append_url+0x1ea>
   21471:	mov    rax,rcx
   21474:	jmp    21390 <append_url+0x120>
   21479:	nop    DWORD PTR [rax+0x0]
   21480:	cmp    BYTE PTR [rip+0x68e34],0x0        # 8a2bb <opt+0x23b>
   21487:	jne    215c0 <append_url+0x350>
   2148d:	mov    rdi,r11
   21490:	call   4bdc0 <rpl_free>
   21495:	mov    rdi,r14
   21498:	xor    r15d,r15d
   2149b:	call   400d0 <iri_free>
   214a0:	jmp    21394 <append_url+0x124>
   214a5:	nop    DWORD PTR [rax]
   214a8:	mov    rdx,rax
   214ab:	mov    esi,0x7
   214b0:	mov    edi,0x3
   214b5:	mov    QWORD PTR [rsp+0x28],rax
   214ba:	call   4b180 <quotearg_n_style>
   214bf:	mov    rsi,r12
   214c2:	mov    edi,0x2
   214c7:	mov    QWORD PTR [rsp+0x20],rax
   214cc:	call   4b590 <quote_n>
   214d1:	mov    rsi,r15
   214d4:	mov    edi,0x1
   214d9:	mov    QWORD PTR [rsp+0x18],rax
   214de:	call   4b590 <quote_n>
   214e3:	mov    rdx,QWORD PTR [rbp+0x18]
   214e7:	mov    esi,0x7
   214ec:	xor    edi,edi
   214ee:	mov    r13,rax
   214f1:	call   4b180 <quotearg_n_style>
   214f6:	mov    r8,QWORD PTR [rsp+0x20]
   214fb:	mov    rdx,r13
   214fe:	mov    rcx,QWORD PTR [rsp+0x18]
   21503:	mov    rsi,rax
   21506:	lea    rdi,[rip+0x45071]        # 6657e <primes.6089+0x49e>
   2150d:	xor    eax,eax
   2150f:	call   2e250 <debug_logprintf>
   21514:	mov    r11,QWORD PTR [rsp+0x28]
   21519:	jmp    212e0 <append_url+0x70>
   2151e:	xchg   ax,ax
   21520:	mov    r13,QWORD PTR [rbp+0x18]
   21524:	xor    edi,edi
   21526:	mov    edx,0x5
   2152b:	lea    rsi,[rip+0x451ee]        # 66720 <primes.6089+0x640>
   21532:	call   c780 <dcgettext@plt>
   21537:	mov    rcx,r12
   2153a:	mov    edi,0x1
   2153f:	mov    rsi,rax
   21542:	mov    rdx,r13
   21545:	xor    eax,eax
   21547:	call   2e0a0 <logprintf>
   2154c:	mov    rdi,r14
   2154f:	call   400d0 <iri_free>
   21554:	jmp    21394 <append_url+0x124>
   21559:	nop    DWORD PTR [rax+0x0]
   21560:	mov    rdi,QWORD PTR [r13+0x0]
   21564:	call   4b5b0 <quote>
   21569:	lea    rdi,[rip+0x45027]        # 66597 <primes.6089+0x4b7>
   21570:	mov    rsi,rax
   21573:	xor    eax,eax
   21575:	call   2e250 <debug_logprintf>
   2157a:	jmp    21322 <append_url+0xb2>
   2157f:	mov    rsi,QWORD PTR [rbp+0x18]
   21583:	mov    rdx,r12
   21586:	lea    rdi,[rip+0x4516b]        # 666f8 <primes.6089+0x618>
   2158d:	xor    eax,eax
   2158f:	call   2e250 <debug_logprintf>
   21594:	jmp    213eb <append_url+0x17b>
   21599:	cmp    BYTE PTR [rip+0x68d1b],0x0        # 8a2bb <opt+0x23b>
   215a0:	je     21495 <append_url+0x225>
   215a6:	mov    rsi,QWORD PTR [rbp+0x18]
   215aa:	mov    rdx,r12
   215ad:	lea    rdi,[rip+0x44fac]        # 66560 <primes.6089+0x480>
   215b4:	xor    eax,eax
   215b6:	call   2e250 <debug_logprintf>
   215bb:	jmp    21495 <append_url+0x225>
   215c0:	mov    rsi,QWORD PTR [rbp+0x18]
   215c4:	mov    rdx,r11
   215c7:	lea    rdi,[rip+0x4517a]        # 66748 <primes.6089+0x668>
   215ce:	xor    eax,eax
   215d0:	mov    QWORD PTR [rsp+0x8],r11
   215d5:	call   2e250 <debug_logprintf>
   215da:	mov    r11,QWORD PTR [rsp+0x8]
   215df:	jmp    2148d <append_url+0x21d>
   215e4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   215ef:	nop

00000000000215f0 <tag_handle_meta>:
   215f0:	endbr64 
   215f4:	push   r15
   215f6:	xor    ecx,ecx
   215f8:	push   r14
   215fa:	lea    r14,[rsi+0x10]
   215fe:	push   r13
   21600:	push   r12
   21602:	mov    r12,rdx
   21605:	lea    rdx,[rip+0x4c2a1]        # 6d8ad <eta_str.8886+0xb35>
   2160c:	push   rbp
   2160d:	push   rbx
   2160e:	mov    rbx,rsi
   21611:	sub    rsp,0x18
   21615:	mov    edi,DWORD PTR [rsi+0xc]
   21618:	mov    rsi,r14
   2161b:	mov    rax,QWORD PTR fs:0x28
   21624:	mov    QWORD PTR [rsp+0x8],rax
   21629:	xor    eax,eax
   2162b:	call   210f0 <find_attr.isra.0>
   21630:	mov    edi,DWORD PTR [rbx+0xc]
   21633:	xor    ecx,ecx
   21635:	mov    rsi,r14
   21638:	lea    rdx,[rip+0x44f71]        # 665b0 <primes.6089+0x4d0>
   2163f:	mov    r13,rax
   21642:	call   210f0 <find_attr.isra.0>
   21647:	test   rax,rax
   2164a:	je     2167c <tag_handle_meta+0x8c>
   2164c:	lea    rsi,[rip+0x44f68]        # 665bb <primes.6089+0x4db>
   21653:	mov    rdi,rax
   21656:	mov    rbp,rax
   21659:	call   43340 <c_strcasecmp>
   2165e:	mov    r15d,eax
   21661:	test   eax,eax
   21663:	je     216c0 <tag_handle_meta+0xd0>
   21665:	lea    rsi,[rip+0x44f5f]        # 665cb <primes.6089+0x4eb>
   2166c:	mov    rdi,rbp
   2166f:	call   43340 <c_strcasecmp>
   21674:	test   eax,eax
   21676:	je     21728 <tag_handle_meta+0x138>
   2167c:	test   r13,r13
   2167f:	je     21698 <tag_handle_meta+0xa8>
   21681:	lea    rsi,[rip+0x44f50]        # 665d8 <primes.6089+0x4f8>
   21688:	mov    rdi,r13
   2168b:	call   43340 <c_strcasecmp>
   21690:	test   eax,eax
   21692:	je     21778 <tag_handle_meta+0x188>
   21698:	mov    rax,QWORD PTR [rsp+0x8]
   2169d:	xor    rax,QWORD PTR fs:0x28
   216a6:	jne    21905 <tag_handle_meta+0x315>
   216ac:	add    rsp,0x18
   216b0:	pop    rbx
   216b1:	pop    rbp
   216b2:	pop    r12
   216b4:	pop    r13
   216b6:	pop    r14
   216b8:	pop    r15
   216ba:	ret    
   216bb:	nop    DWORD PTR [rax+rax*1+0x0]
   216c0:	mov    edi,DWORD PTR [rbx+0xc]
   216c3:	lea    rcx,[rsp+0x4]
   216c8:	lea    rdx,[rip+0x44ef4]        # 665c3 <primes.6089+0x4e3>
   216cf:	mov    rsi,r14
   216d2:	call   210f0 <find_attr.isra.0>
   216d7:	test   rax,rax
   216da:	je     21698 <tag_handle_meta+0xa8>
   216dc:	movsx  edx,BYTE PTR [rax]
   216df:	lea    esi,[rdx-0x30]
   216e2:	cmp    esi,0x9
   216e5:	jbe    21708 <tag_handle_meta+0x118>
   216e7:	cmp    dl,0x3b
   216ea:	jne    21698 <tag_handle_meta+0xa8>
   216ec:	movsx  edx,BYTE PTR [rax+0x1]
   216f0:	add    rax,0x1
   216f4:	cmp    dl,0xd
   216f7:	jg     21838 <tag_handle_meta+0x248>
   216fd:	cmp    dl,0x8
   21700:	jle    21698 <tag_handle_meta+0xa8>
   21702:	jmp    216ec <tag_handle_meta+0xfc>
   21704:	nop    DWORD PTR [rax+0x0]
   21708:	lea    ecx,[r15+r15*4]
   2170c:	add    rax,0x1
   21710:	lea    r15d,[rdx+rcx*2-0x30]
   21715:	movsx  edx,BYTE PTR [rax]
   21718:	lea    esi,[rdx-0x30]
   2171b:	cmp    esi,0x9
   2171e:	ja     216e7 <tag_handle_meta+0xf7>
   21720:	jmp    21708 <tag_handle_meta+0x118>
   21722:	nop    WORD PTR [rax+rax*1+0x0]
   21728:	mov    edi,DWORD PTR [rbx+0xc]
   2172b:	xor    ecx,ecx
   2172d:	lea    rdx,[rip+0x44e8f]        # 665c3 <primes.6089+0x4e3>
   21734:	mov    rsi,r14
   21737:	call   210f0 <find_attr.isra.0>
   2173c:	mov    rdi,rax
   2173f:	test   rax,rax
   21742:	je     21698 <tag_handle_meta+0xa8>
   21748:	call   3fc90 <parse_charset>
   2174d:	mov    rbx,rax
   21750:	test   rax,rax
   21753:	je     21698 <tag_handle_meta+0xa8>
   21759:	mov    rdi,QWORD PTR [rip+0x61ec8]        # 83628 <meta_charset>
   21760:	call   4bdc0 <rpl_free>
   21765:	mov    QWORD PTR [rip+0x61ebc],rbx        # 83628 <meta_charset>
   2176c:	jmp    21698 <tag_handle_meta+0xa8>
   21771:	nop    DWORD PTR [rax+0x0]
   21778:	mov    edi,DWORD PTR [rbx+0xc]
   2177b:	xor    ecx,ecx
   2177d:	lea    rdx,[rip+0x44e3f]        # 665c3 <primes.6089+0x4e3>
   21784:	mov    rsi,r14
   21787:	call   210f0 <find_attr.isra.0>
   2178c:	mov    rbp,rax
   2178f:	test   rax,rax
   21792:	je     21698 <tag_handle_meta+0xa8>
   21798:	lea    rsi,[rip+0x39d85]        # 5b524 <_IO_stdin_used+0x524>
   2179f:	mov    rdi,rax
   217a2:	call   43340 <c_strcasecmp>
   217a7:	test   eax,eax
   217a9:	je     218f0 <tag_handle_meta+0x300>
   217af:	cmp    BYTE PTR [rbp+0x0],0x0
   217b3:	lea    r15,[rip+0x44e26]        # 665e0 <primes.6089+0x500>
   217ba:	lea    r14,[rip+0x44e1e]        # 665df <primes.6089+0x4ff>
   217c1:	lea    r13,[rip+0x44e1f]        # 665e7 <primes.6089+0x507>
   217c8:	jne    217f4 <tag_handle_meta+0x204>
   217ca:	jmp    21698 <tag_handle_meta+0xa8>
   217cf:	nop
   217d0:	mov    esi,0x2c
   217d5:	mov    rdi,rbx
   217d8:	call   c6c0 <strchr@plt>
   217dd:	test   rax,rax
   217e0:	je     218e0 <tag_handle_meta+0x2f0>
   217e6:	lea    rbp,[rax+0x1]
   217ea:	cmp    BYTE PTR [rbp+0x0],0x0
   217ee:	je     21698 <tag_handle_meta+0xa8>
   217f4:	mov    rdi,rbp
   217f7:	mov    rsi,r15
   217fa:	call   c690 <strspn@plt>
   217ff:	mov    rsi,r14
   21802:	add    rbp,rax
   21805:	mov    rdi,rbp
   21808:	call   c980 <strcspn@plt>
   2180d:	mov    rsi,r13
   21810:	mov    rdi,rbp
   21813:	mov    rdx,rax
   21816:	lea    rbx,[rbp+rax*1+0x0]
   2181b:	call   433b0 <c_strncasecmp>
   21820:	test   eax,eax
   21822:	jne    2182a <tag_handle_meta+0x23a>
   21824:	mov    BYTE PTR [r12+0x20],0x1
   2182a:	cmp    BYTE PTR [rbx],0x2c
   2182d:	jne    217d0 <tag_handle_meta+0x1e0>
   2182f:	lea    rbp,[rbx+0x1]
   21833:	jmp    217ea <tag_handle_meta+0x1fa>
   21835:	nop    DWORD PTR [rax]
   21838:	cmp    dl,0x20
   2183b:	je     216ec <tag_handle_meta+0xfc>
   21841:	lea    ecx,[rdx-0x61]
   21844:	cmp    ecx,0x19
   21847:	ja     2184c <tag_handle_meta+0x25c>
   21849:	sub    edx,0x20
   2184c:	cmp    edx,0x55
   2184f:	jne    21698 <tag_handle_meta+0xa8>
   21855:	movsx  edx,BYTE PTR [rax+0x1]
   21859:	lea    esi,[rdx-0x61]
   2185c:	lea    ecx,[rdx-0x20]
   2185f:	cmp    esi,0x1a
   21862:	cmovb  edx,ecx
   21865:	cmp    edx,0x52
   21868:	jne    21698 <tag_handle_meta+0xa8>
   2186e:	movsx  edx,BYTE PTR [rax+0x2]
   21872:	lea    esi,[rdx-0x61]
   21875:	lea    ecx,[rdx-0x20]
   21878:	cmp    esi,0x1a
   2187b:	cmovb  edx,ecx
   2187e:	cmp    edx,0x4c
   21881:	jne    21698 <tag_handle_meta+0xa8>
   21887:	cmp    BYTE PTR [rax+0x3],0x3d
   2188b:	jne    21698 <tag_handle_meta+0xa8>
   21891:	lea    rdi,[rax+0x4]
   21895:	movzx  eax,BYTE PTR [rdi]
   21898:	cmp    al,0xd
   2189a:	jg     218fb <tag_handle_meta+0x30b>
   2189c:	cmp    al,0x8
   2189e:	jg     218ff <tag_handle_meta+0x30f>
   218a0:	movsxd rax,DWORD PTR [rsp+0x4]
   218a5:	mov    rcx,r12
   218a8:	lea    rdx,[rax+rax*4]
   218ac:	mov    rax,QWORD PTR [rbx+0x10]
   218b0:	lea    rax,[rax+rdx*8]
   218b4:	mov    edx,DWORD PTR [rax+0x18]
   218b7:	mov    rsi,QWORD PTR [rax+0x10]
   218bb:	sub    rsi,QWORD PTR [r12]
   218bf:	call   21270 <append_url>
   218c4:	test   rax,rax
   218c7:	je     21698 <tag_handle_meta+0xa8>
   218cd:	or     WORD PTR [rax+0x10],0x280
   218d3:	mov    DWORD PTR [rax+0x14],r15d
   218d7:	jmp    21698 <tag_handle_meta+0xa8>
   218dc:	nop    DWORD PTR [rax+0x0]
   218e0:	mov    rdi,rbp
   218e3:	call   c310 <strlen@plt>
   218e8:	add    rbp,rax
   218eb:	jmp    217ea <tag_handle_meta+0x1fa>
   218f0:	mov    BYTE PTR [r12+0x20],0x1
   218f6:	jmp    21698 <tag_handle_meta+0xa8>
   218fb:	cmp    al,0x20
   218fd:	jne    218a0 <tag_handle_meta+0x2b0>
   218ff:	add    rdi,0x1
   21903:	jmp    21895 <tag_handle_meta+0x2a5>
   21905:	call   c7b0 <__stack_chk_fail@plt>
   2190a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000021910 <tag_handle_link>:
   21910:	endbr64 
   21914:	push   r13
   21916:	push   r12
   21918:	mov    r12,rdx
   2191b:	lea    rdx,[rip+0x44cce]        # 665f0 <primes.6089+0x510>
   21922:	push   rbp
   21923:	lea    rbp,[rsi+0x10]
   21927:	push   rbx
   21928:	mov    rbx,rsi
   2192b:	sub    rsp,0x18
   2192f:	mov    edi,DWORD PTR [rsi+0xc]
   21932:	mov    rsi,rbp
   21935:	mov    rax,QWORD PTR fs:0x28
   2193e:	mov    QWORD PTR [rsp+0x8],rax
   21943:	xor    eax,eax
   21945:	lea    rcx,[rsp+0x4]
   2194a:	call   210f0 <find_attr.isra.0>
   2194f:	test   rax,rax
   21952:	je     219d0 <tag_handle_link+0xc0>
   21954:	mov    rdi,rax
   21957:	movsxd rax,DWORD PTR [rsp+0x4]
   2195c:	mov    rcx,r12
   2195f:	lea    rdx,[rax+rax*4]
   21963:	mov    rax,QWORD PTR [rbx+0x10]
   21967:	lea    rax,[rax+rdx*8]
   2196b:	mov    edx,DWORD PTR [rax+0x18]
   2196e:	mov    rsi,QWORD PTR [rax+0x10]
   21972:	sub    rsi,QWORD PTR [r12]
   21976:	call   21270 <append_url>
   2197b:	mov    r12,rax
   2197e:	test   rax,rax
   21981:	je     219d0 <tag_handle_link+0xc0>
   21983:	mov    edi,DWORD PTR [rbx+0xc]
   21986:	xor    ecx,ecx
   21988:	lea    rdx,[rip+0x44c66]        # 665f5 <primes.6089+0x515>
   2198f:	mov    rsi,rbp
   21992:	call   210f0 <find_attr.isra.0>
   21997:	mov    r13,rax
   2199a:	test   rax,rax
   2199d:	je     219d0 <tag_handle_link+0xc0>
   2199f:	lea    rsi,[rip+0x44c53]        # 665f9 <primes.6089+0x519>
   219a6:	mov    rdi,rax
   219a9:	call   43340 <c_strcasecmp>
   219ae:	test   eax,eax
   219b0:	je     219f0 <tag_handle_link+0xe0>
   219b2:	lea    rsi,[rip+0x44c4b]        # 66604 <primes.6089+0x524>
   219b9:	mov    rdi,r13
   219bc:	call   43340 <c_strcasecmp>
   219c1:	test   eax,eax
   219c3:	jne    21a00 <tag_handle_link+0xf0>
   219c5:	or     BYTE PTR [r12+0x10],0x10
   219cb:	nop    DWORD PTR [rax+rax*1+0x0]
   219d0:	mov    rax,QWORD PTR [rsp+0x8]
   219d5:	xor    rax,QWORD PTR fs:0x28
   219de:	jne    21a34 <tag_handle_link+0x124>
   219e0:	add    rsp,0x18
   219e4:	pop    rbx
   219e5:	pop    rbp
   219e6:	pop    r12
   219e8:	pop    r13
   219ea:	ret    
   219eb:	nop    DWORD PTR [rax+rax*1+0x0]
   219f0:	or     WORD PTR [r12+0x10],0x110
   219f8:	jmp    219d0 <tag_handle_link+0xc0>
   219fa:	nop    WORD PTR [rax+rax*1+0x0]
   21a00:	mov    edi,DWORD PTR [rbx+0xc]
   21a03:	xor    ecx,ecx
   21a05:	lea    rdx,[rip+0x44bc7]        # 665d3 <primes.6089+0x4f3>
   21a0c:	mov    rsi,rbp
   21a0f:	call   210f0 <find_attr.isra.0>
   21a14:	mov    rdi,rax
   21a17:	test   rax,rax
   21a1a:	je     21a2c <tag_handle_link+0x11c>
   21a1c:	lea    rsi,[rip+0x44bef]        # 66612 <primes.6089+0x532>
   21a23:	call   43340 <c_strcasecmp>
   21a28:	test   eax,eax
   21a2a:	jne    219d0 <tag_handle_link+0xc0>
   21a2c:	or     BYTE PTR [r12+0x10],0x80
   21a32:	jmp    219d0 <tag_handle_link+0xc0>
   21a34:	call   c7b0 <__stack_chk_fail@plt>
   21a39:	nop    DWORD PTR [rax+0x0]

0000000000021a40 <tag_handle_form>:
   21a40:	endbr64 
   21a44:	push   r12
   21a46:	mov    r12,rdx
   21a49:	lea    rdx,[rip+0x44bcc]        # 6661c <primes.6089+0x53c>
   21a50:	push   rbx
   21a51:	mov    rbx,rsi
   21a54:	add    rsi,0x10
   21a58:	sub    rsp,0x18
   21a5c:	mov    edi,DWORD PTR [rbx+0xc]
   21a5f:	mov    rax,QWORD PTR fs:0x28
   21a68:	mov    QWORD PTR [rsp+0x8],rax
   21a6d:	xor    eax,eax
   21a6f:	lea    rcx,[rsp+0x4]
   21a74:	call   210f0 <find_attr.isra.0>
   21a79:	test   rax,rax
   21a7c:	je     21aae <tag_handle_form+0x6e>
   21a7e:	mov    rdi,rax
   21a81:	movsxd rax,DWORD PTR [rsp+0x4]
   21a86:	mov    rcx,r12
   21a89:	lea    rdx,[rax+rax*4]
   21a8d:	mov    rax,QWORD PTR [rbx+0x10]
   21a91:	lea    rax,[rax+rdx*8]
   21a95:	mov    edx,DWORD PTR [rax+0x18]
   21a98:	mov    rsi,QWORD PTR [rax+0x10]
   21a9c:	sub    rsi,QWORD PTR [r12]
   21aa0:	call   21270 <append_url>
   21aa5:	test   rax,rax
   21aa8:	je     21aae <tag_handle_form+0x6e>
   21aaa:	or     BYTE PTR [rax+0x10],0x1
   21aae:	mov    rax,QWORD PTR [rsp+0x8]
   21ab3:	xor    rax,QWORD PTR fs:0x28
   21abc:	jne    21ac6 <tag_handle_form+0x86>
   21abe:	add    rsp,0x18
   21ac2:	pop    rbx
   21ac3:	pop    r12
   21ac5:	ret    
   21ac6:	call   c7b0 <__stack_chk_fail@plt>
   21acb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000021ad0 <tag_handle_base>:
   21ad0:	endbr64 
   21ad4:	push   r12
   21ad6:	push   rbp
   21ad7:	mov    rbp,rsi
   21ada:	add    rsi,0x10
   21ade:	push   rbx
   21adf:	mov    rbx,rdx
   21ae2:	lea    rdx,[rip+0x44b07]        # 665f0 <primes.6089+0x510>
   21ae9:	sub    rsp,0x10
   21aed:	mov    edi,DWORD PTR [rbp+0xc]
   21af0:	mov    rax,QWORD PTR fs:0x28
   21af9:	mov    QWORD PTR [rsp+0x8],rax
   21afe:	xor    eax,eax
   21b00:	lea    rcx,[rsp+0x4]
   21b05:	call   210f0 <find_attr.isra.0>
   21b0a:	test   rax,rax
   21b0d:	je     21b67 <tag_handle_base+0x97>
   21b0f:	mov    r12,rax
   21b12:	movsxd rax,DWORD PTR [rsp+0x4]
   21b17:	mov    rcx,rbx
   21b1a:	mov    rdi,r12
   21b1d:	lea    rdx,[rax+rax*4]
   21b21:	mov    rax,QWORD PTR [rbp+0x10]
   21b25:	lea    rax,[rax+rdx*8]
   21b29:	mov    edx,DWORD PTR [rax+0x18]
   21b2c:	mov    rsi,QWORD PTR [rax+0x10]
   21b30:	sub    rsi,QWORD PTR [rbx]
   21b33:	call   21270 <append_url>
   21b38:	test   rax,rax
   21b3b:	je     21b67 <tag_handle_base+0x97>
   21b3d:	or     BYTE PTR [rax+0x10],0x9
   21b41:	mov    rdi,QWORD PTR [rbx+0x8]
   21b45:	call   4bdc0 <rpl_free>
   21b4a:	mov    rdi,QWORD PTR [rbx+0x10]
   21b4e:	mov    QWORD PTR [rbx+0x8],0x0
   21b56:	test   rdi,rdi
   21b59:	je     21b80 <tag_handle_base+0xb0>
   21b5b:	mov    rsi,r12
   21b5e:	call   37e80 <uri_merge>
   21b63:	mov    QWORD PTR [rbx+0x8],rax
   21b67:	mov    rax,QWORD PTR [rsp+0x8]
   21b6c:	xor    rax,QWORD PTR fs:0x28
   21b75:	jne    21b8e <tag_handle_base+0xbe>
   21b77:	add    rsp,0x10
   21b7b:	pop    rbx
   21b7c:	pop    rbp
   21b7d:	pop    r12
   21b7f:	ret    
   21b80:	mov    rdi,r12
   21b83:	call   4ba50 <xstrdup>
   21b88:	mov    QWORD PTR [rbx+0x8],rax
   21b8c:	jmp    21b67 <tag_handle_base+0x97>
   21b8e:	call   c7b0 <__stack_chk_fail@plt>
   21b93:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   21b9e:	xchg   ax,ax

0000000000021ba0 <tag_find_urls>:
   21ba0:	endbr64 
   21ba4:	push   r15
   21ba6:	xor    ecx,ecx
   21ba8:	xor    eax,eax
   21baa:	push   r14
   21bac:	mov    r14,rdx
   21baf:	lea    rdx,[rip+0x5afa2]        # 7cb58 <tag_url_attributes+0x18>
   21bb6:	push   r13
   21bb8:	push   r12
   21bba:	mov    r12d,edi
   21bbd:	push   rbp
   21bbe:	mov    rbp,rsi
   21bc1:	push   rbx
   21bc2:	sub    rsp,0x28
   21bc6:	jmp    21be4 <tag_find_urls+0x44>
   21bc8:	nop    DWORD PTR [rax+rax*1+0x0]
   21bd0:	add    rax,0x1
   21bd4:	cmp    rax,0x1a
   21bd8:	je     21ce9 <tag_find_urls+0x149>
   21bde:	mov    ecx,DWORD PTR [rdx]
   21be0:	add    rdx,0x18
   21be4:	cmp    ecx,r12d
   21be7:	jne    21bd0 <tag_find_urls+0x30>
   21be9:	mov    edx,DWORD PTR [rbp+0xc]
   21bec:	test   edx,edx
   21bee:	jle    21cda <tag_find_urls+0x13a>
   21bf4:	cdqe   
   21bf6:	mov    QWORD PTR [rsp],0x0
   21bfe:	lea    rdx,[rax+rax*2]
   21c02:	mov    QWORD PTR [rsp+0x10],rax
   21c07:	lea    rax,[rip+0x5af32]        # 7cb40 <tag_url_attributes>
   21c0e:	lea    rax,[rax+rdx*8]
   21c12:	mov    QWORD PTR [rsp+0x18],rax
   21c17:	nop    WORD PTR [rax+rax*1+0x0]
   21c20:	mov    rax,QWORD PTR [rsp]
   21c24:	lea    rbx,[rax+rax*4]
   21c28:	mov    rax,QWORD PTR [rbp+0x10]
   21c2c:	shl    rbx,0x3
   21c30:	cmp    QWORD PTR [rsp+0x10],0x19
   21c36:	mov    rax,QWORD PTR [rax+rbx*1+0x8]
   21c3b:	mov    QWORD PTR [rsp+0x8],rax
   21c40:	ja     21cc8 <tag_find_urls+0x128>
   21c46:	mov    r15,QWORD PTR [rsp+0x18]
   21c4b:	jmp    21c60 <tag_find_urls+0xc0>
   21c4d:	nop    DWORD PTR [rax]
   21c50:	add    r15,0x18
   21c54:	lea    rax,[rip+0x5b155]        # 7cdb0 <tag_url_attributes+0x270>
   21c5b:	cmp    r15,rax
   21c5e:	je     21cc8 <tag_find_urls+0x128>
   21c60:	cmp    DWORD PTR [r15],r12d
   21c63:	jne    21cc8 <tag_find_urls+0x128>
   21c65:	mov    r13,QWORD PTR [rbp+0x10]
   21c69:	mov    rsi,QWORD PTR [r15+0x8]
   21c6d:	add    r13,rbx
   21c70:	mov    rdi,QWORD PTR [r13+0x0]
   21c74:	call   be10 <strcasecmp@plt>
   21c79:	test   eax,eax
   21c7b:	jne    21c50 <tag_find_urls+0xb0>
   21c7d:	mov    r9d,DWORD PTR [r13+0x18]
   21c81:	mov    rdi,QWORD PTR [rsp+0x8]
   21c86:	mov    rcx,r14
   21c89:	mov    rsi,QWORD PTR [r13+0x10]
   21c8d:	sub    rsi,QWORD PTR [r14]
   21c90:	mov    edx,r9d
   21c93:	call   21270 <append_url>
   21c98:	test   rax,rax
   21c9b:	je     21c50 <tag_find_urls+0xb0>
   21c9d:	mov    edx,DWORD PTR [r15+0x10]
   21ca1:	test   dl,0x1
   21ca4:	je     21caa <tag_find_urls+0x10a>
   21ca6:	or     BYTE PTR [rax+0x10],0x10
   21caa:	and    edx,0x2
   21cad:	je     21c50 <tag_find_urls+0xb0>
   21caf:	or     BYTE PTR [rax+0x10],0x80
   21cb3:	add    r15,0x18
   21cb7:	lea    rax,[rip+0x5b0f2]        # 7cdb0 <tag_url_attributes+0x270>
   21cbe:	cmp    r15,rax
   21cc1:	jne    21c60 <tag_find_urls+0xc0>
   21cc3:	nop    DWORD PTR [rax+rax*1+0x0]
   21cc8:	add    QWORD PTR [rsp],0x1
   21ccd:	mov    rax,QWORD PTR [rsp]
   21cd1:	cmp    DWORD PTR [rbp+0xc],eax
   21cd4:	jg     21c20 <tag_find_urls+0x80>
   21cda:	add    rsp,0x28
   21cde:	pop    rbx
   21cdf:	pop    rbp
   21ce0:	pop    r12
   21ce2:	pop    r13
   21ce4:	pop    r14
   21ce6:	pop    r15
   21ce8:	ret    
   21ce9:	mov    eax,0xffffffff
   21cee:	jmp    21be9 <tag_find_urls+0x49>
   21cf3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   21cfe:	xchg   ax,ax

0000000000021d00 <tag_handle_img>:
   21d00:	endbr64 
   21d04:	push   r15
   21d06:	push   r14
   21d08:	mov    r14,rdx
   21d0b:	push   r13
   21d0d:	push   r12
   21d0f:	push   rbp
   21d10:	push   rbx
   21d11:	mov    rbx,rsi
   21d14:	sub    rsp,0x38
   21d18:	mov    QWORD PTR [rsp+0x18],rdx
   21d1d:	mov    rax,QWORD PTR fs:0x28
   21d26:	mov    QWORD PTR [rsp+0x28],rax
   21d2b:	xor    eax,eax
   21d2d:	call   21ba0 <tag_find_urls>
   21d32:	mov    edi,DWORD PTR [rbx+0xc]
   21d35:	lea    rsi,[rbx+0x10]
   21d39:	lea    rcx,[rsp+0x24]
   21d3e:	lea    rdx,[rip+0x448de]        # 66623 <primes.6089+0x543>
   21d45:	call   210f0 <find_attr.isra.0>
   21d4a:	test   rax,rax
   21d4d:	je     21e20 <tag_handle_img+0x120>
   21d53:	mov    r15,rax
   21d56:	movsxd rax,DWORD PTR [rsp+0x24]
   21d5b:	mov    rdx,QWORD PTR [rbx+0x10]
   21d5f:	mov    r14,QWORD PTR [r14]
   21d62:	mov    rdi,r15
   21d65:	lea    rax,[rax+rax*4]
   21d69:	lea    rax,[rdx+rax*8]
   21d6d:	mov    r13,QWORD PTR [rax+0x10]
   21d71:	sub    r13,r14
   21d74:	mov    DWORD PTR [rsp+0x14],r13d
   21d79:	call   c310 <strlen@plt>
   21d7e:	movsxd rdx,r13d
   21d81:	movzx  edx,BYTE PTR [r14+rdx*1]
   21d86:	mov    ebx,eax
   21d88:	cmp    dl,0x22
   21d8b:	je     21edf <tag_handle_img+0x1df>
   21d91:	cmp    dl,0x27
   21d94:	je     21edf <tag_handle_img+0x1df>
   21d9a:	test   eax,eax
   21d9c:	jle    21e20 <tag_handle_img+0x120>
   21da2:	xor    r13d,r13d
   21da5:	nop    DWORD PTR [rax]
   21da8:	movsxd rdi,r13d
   21dab:	lea    rsi,[rip+0x44878]        # 6662a <primes.6089+0x54a>
   21db2:	add    rdi,r15
   21db5:	call   c690 <strspn@plt>
   21dba:	lea    r14d,[r13+rax*1+0x0]
   21dbf:	cmp    ebx,r14d
   21dc2:	je     21e20 <tag_handle_img+0x120>
   21dc4:	movsxd rdi,r14d
   21dc7:	lea    rsi,[rip+0x44863]        # 66631 <primes.6089+0x551>
   21dce:	mov    r12d,0x1
   21dd4:	lea    rbp,[r15+rdi*1]
   21dd8:	mov    rdi,rbp
   21ddb:	call   c980 <strcspn@plt>
   21de0:	add    eax,r14d
   21de3:	movsxd rdx,eax
   21de6:	lea    rdx,[r15+rdx*1-0x1]
   21deb:	jmp    21dfd <tag_handle_img+0xfd>
   21ded:	nop    DWORD PTR [rax]
   21df0:	sub    rdx,0x1
   21df4:	cmp    BYTE PTR [rdx+0x1],0x2c
   21df8:	jne    21e08 <tag_handle_img+0x108>
   21dfa:	xor    r12d,r12d
   21dfd:	mov    r13d,eax
   21e00:	sub    eax,0x1
   21e03:	cmp    eax,r14d
   21e06:	jg     21df0 <tag_handle_img+0xf0>
   21e08:	cmp    r13d,r14d
   21e0b:	jg     21e48 <tag_handle_img+0x148>
   21e0d:	test   r12b,r12b
   21e10:	jne    21e8e <tag_handle_img+0x18e>
   21e12:	cmp    r13d,ebx
   21e15:	jl     21da8 <tag_handle_img+0xa8>
   21e17:	nop    WORD PTR [rax+rax*1+0x0]
   21e20:	mov    rax,QWORD PTR [rsp+0x28]
   21e25:	xor    rax,QWORD PTR fs:0x28
   21e2e:	jne    21eec <tag_handle_img+0x1ec>
   21e34:	add    rsp,0x38
   21e38:	pop    rbx
   21e39:	pop    rbp
   21e3a:	pop    r12
   21e3c:	pop    r13
   21e3e:	pop    r14
   21e40:	pop    r15
   21e42:	ret    
   21e43:	nop    DWORD PTR [rax+rax*1+0x0]
   21e48:	movsxd rsi,r13d
   21e4b:	mov    rdi,rbp
   21e4e:	add    rsi,r15
   21e51:	call   3b8a0 <strdupdelim>
   21e56:	mov    rcx,QWORD PTR [rsp+0x18]
   21e5b:	mov    edx,r13d
   21e5e:	mov    rdi,rax
   21e61:	mov    eax,DWORD PTR [rsp+0x14]
   21e65:	sub    edx,r14d
   21e68:	mov    QWORD PTR [rsp+0x8],rdi
   21e6d:	lea    esi,[rax+r14*1]
   21e71:	call   21270 <append_url>
   21e76:	mov    rdi,QWORD PTR [rsp+0x8]
   21e7b:	test   rax,rax
   21e7e:	je     21e84 <tag_handle_img+0x184>
   21e80:	or     BYTE PTR [rax+0x10],0x50
   21e84:	call   4bdc0 <rpl_free>
   21e89:	test   r12b,r12b
   21e8c:	je     21e12 <tag_handle_img+0x112>
   21e8e:	cmp    r13d,ebx
   21e91:	jge    21e20 <tag_handle_img+0x120>
   21e93:	movsxd rax,r13d
   21e96:	xor    ecx,ecx
   21e98:	jmp    21eb7 <tag_handle_img+0x1b7>
   21e9a:	nop    WORD PTR [rax+rax*1+0x0]
   21ea0:	cmp    dl,0x29
   21ea3:	jne    21ed0 <tag_handle_img+0x1d0>
   21ea5:	test   cl,cl
   21ea7:	je     21ed0 <tag_handle_img+0x1d0>
   21ea9:	xor    ecx,ecx
   21eab:	add    rax,0x1
   21eaf:	cmp    ebx,eax
   21eb1:	jle    21e20 <tag_handle_img+0x120>
   21eb7:	movzx  edx,BYTE PTR [r15+rax*1]
   21ebc:	mov    r13d,eax
   21ebf:	cmp    dl,0x28
   21ec2:	jne    21ea0 <tag_handle_img+0x1a0>
   21ec4:	mov    ecx,r12d
   21ec7:	jmp    21eab <tag_handle_img+0x1ab>
   21ec9:	nop    DWORD PTR [rax+0x0]
   21ed0:	cmp    dl,0x2c
   21ed3:	jne    21eab <tag_handle_img+0x1ab>
   21ed5:	cmp    cl,0x1
   21ed8:	je     21eab <tag_handle_img+0x1ab>
   21eda:	jmp    21e12 <tag_handle_img+0x112>
   21edf:	lea    ecx,[r13+0x1]
   21ee3:	mov    DWORD PTR [rsp+0x14],ecx
   21ee7:	jmp    21d9a <tag_handle_img+0x9a>
   21eec:	call   c7b0 <__stack_chk_fail@plt>
   21ef1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   21efc:	nop    DWORD PTR [rax+0x0]

0000000000021f00 <get_urls_html_fm>:
   21f00:	endbr64 
   21f04:	push   r15
   21f06:	push   r14
   21f08:	mov    r14,rcx
   21f0b:	push   r13
   21f0d:	mov    r13,rdi
   21f10:	push   r12
   21f12:	mov    r12,r8
   21f15:	push   rbp
   21f16:	push   rbx
   21f17:	mov    rbx,rsi
   21f1a:	sub    rsp,0x48
   21f1e:	mov    rdi,QWORD PTR [rsi]
   21f21:	mov    rax,QWORD PTR fs:0x28
   21f2a:	mov    QWORD PTR [rsp+0x38],rax
   21f2f:	xor    eax,eax
   21f31:	test   rdx,rdx
   21f34:	cmove  rdx,QWORD PTR [rip+0x6830c]        # 8a248 <opt+0x1c8>
   21f3c:	cmp    QWORD PTR [rip+0x616f4],0x0        # 83638 <interesting_tags>
   21f44:	mov    QWORD PTR [rsp],rdi
   21f48:	mov    QWORD PTR [rsp+0x28],0x0
   21f51:	mov    QWORD PTR [rsp+0x8],0x0
   21f5a:	mov    QWORD PTR [rsp+0x10],rdx
   21f5f:	mov    QWORD PTR [rsp+0x18],r13
   21f64:	mov    BYTE PTR [rsp+0x20],0x0
   21f69:	je     22090 <get_urls_html_fm+0x190>
   21f6f:	xor    eax,eax
   21f71:	cmp    BYTE PTR [rip+0x68444],0x0        # 8a3bc <opt+0x33c>
   21f78:	mov    rsi,QWORD PTR [rbx+0x8]
   21f7c:	mov    rcx,rsp
   21f7f:	setne  al
   21f82:	sub    rsp,0x8
   21f86:	push   QWORD PTR [rip+0x616a4]        # 83630 <interesting_attributes>
   21f8c:	xor    r9d,r9d
   21f8f:	lea    r8d,[rax+0x2]
   21f93:	lea    rdx,[rip+0xfffffffffffff1b6]        # 21150 <collect_tags_mapper>
   21f9a:	call   203b0 <map_html_tags>
   21f9f:	pop    rax
   21fa0:	mov    rdi,QWORD PTR [rip+0x61681]        # 83628 <meta_charset>
   21fa7:	pop    rdx
   21fa8:	test   r12,r12
   21fab:	je     21fb5 <get_urls_html_fm+0xb5>
   21fad:	cmp    QWORD PTR [r12+0x8],0x0
   21fb3:	je     22020 <get_urls_html_fm+0x120>
   21fb5:	call   4bdc0 <rpl_free>
   21fba:	cmp    BYTE PTR [rsp+0x20],0x0
   21fbf:	mov    QWORD PTR [rip+0x6165e],0x0        # 83628 <meta_charset>
   21fca:	jne    22040 <get_urls_html_fm+0x140>
   21fcc:	cmp    BYTE PTR [rip+0x682e8],0x0        # 8a2bb <opt+0x23b>
   21fd3:	jne    2206f <get_urls_html_fm+0x16f>
   21fd9:	test   r14,r14
   21fdc:	je     21fe6 <get_urls_html_fm+0xe6>
   21fde:	movzx  eax,BYTE PTR [rsp+0x20]
   21fe3:	mov    BYTE PTR [r14],al
   21fe6:	mov    rdi,QWORD PTR [rsp+0x8]
   21feb:	call   4bdc0 <rpl_free>
   21ff0:	mov    rax,QWORD PTR [rsp+0x28]
   21ff5:	mov    rbx,QWORD PTR [rsp+0x38]
   21ffa:	xor    rbx,QWORD PTR fs:0x28
   22003:	jne    2220a <get_urls_html_fm+0x30a>
   22009:	add    rsp,0x48
   2200d:	pop    rbx
   2200e:	pop    rbp
   2200f:	pop    r12
   22011:	pop    r13
   22013:	pop    r14
   22015:	pop    r15
   22017:	ret    
   22018:	nop    DWORD PTR [rax+rax*1+0x0]
   22020:	test   rdi,rdi
   22023:	je     21fb5 <get_urls_html_fm+0xb5>
   22025:	mov    rsi,rdi
   22028:	mov    rdi,r12
   2202b:	call   401f0 <set_content_encoding>
   22030:	mov    rdi,QWORD PTR [rip+0x615f1]        # 83628 <meta_charset>
   22037:	jmp    21fb5 <get_urls_html_fm+0xb5>
   2203c:	nop    DWORD PTR [rax+0x0]
   22040:	xor    edi,edi
   22042:	mov    edx,0x5
   22047:	lea    rsi,[rip+0x44722]        # 66770 <primes.6089+0x690>
   2204e:	call   c780 <dcgettext@plt>
   22053:	xor    edi,edi
   22055:	mov    rdx,r13
   22058:	mov    rsi,rax
   2205b:	xor    eax,eax
   2205d:	call   2e0a0 <logprintf>
   22062:	cmp    BYTE PTR [rip+0x68252],0x0        # 8a2bb <opt+0x23b>
   22069:	je     21fd9 <get_urls_html_fm+0xd9>
   2206f:	movzx  edx,BYTE PTR [rsp+0x20]
   22074:	mov    rsi,r13
   22077:	lea    rdi,[rip+0x445b9]        # 66637 <primes.6089+0x557>
   2207e:	xor    eax,eax
   22080:	call   2e250 <debug_logprintf>
   22085:	jmp    21fd9 <get_urls_html_fm+0xd9>
   2208a:	nop    WORD PTR [rax+rax*1+0x0]
   22090:	mov    edi,0x19
   22095:	lea    rbp,[rip+0x5cfa4]        # 7f040 <known_tags>
   2209c:	call   1e160 <make_nocase_string_hash_table>
   220a1:	lea    r15,[rbp+0x258]
   220a8:	mov    QWORD PTR [rip+0x61589],rax        # 83638 <interesting_tags>
   220af:	mov    rdi,rax
   220b2:	jmp    220bf <get_urls_html_fm+0x1bf>
   220b4:	nop    DWORD PTR [rax+0x0]
   220b8:	mov    rdi,QWORD PTR [rip+0x61579]        # 83638 <interesting_tags>
   220bf:	mov    rsi,QWORD PTR [rbp+0x8]
   220c3:	mov    rdx,rbp
   220c6:	add    rbp,0x18
   220ca:	call   1dc80 <hash_table_put>
   220cf:	cmp    rbp,r15
   220d2:	jne    220b8 <get_urls_html_fm+0x1b8>
   220d4:	mov    rbp,QWORD PTR [rip+0x68095]        # 8a170 <opt+0xf0>
   220db:	test   rbp,rbp
   220de:	je     22109 <get_urls_html_fm+0x209>
   220e0:	mov    rsi,QWORD PTR [rbp+0x0]
   220e4:	test   rsi,rsi
   220e7:	je     22109 <get_urls_html_fm+0x209>
   220e9:	nop    DWORD PTR [rax+0x0]
   220f0:	mov    rdi,QWORD PTR [rip+0x61541]        # 83638 <interesting_tags>
   220f7:	add    rbp,0x8
   220fb:	call   1dec0 <hash_table_remove>
   22100:	mov    rsi,QWORD PTR [rbp+0x0]
   22104:	test   rsi,rsi
   22107:	jne    220f0 <get_urls_html_fm+0x1f0>
   22109:	cmp    QWORD PTR [rip+0x68057],0x0        # 8a168 <opt+0xe8>
   22111:	je     2216f <get_urls_html_fm+0x26f>
   22113:	xor    edi,edi
   22115:	call   1e160 <make_nocase_string_hash_table>
   2211a:	mov    r15,QWORD PTR [rip+0x68047]        # 8a168 <opt+0xe8>
   22121:	mov    rbp,rax
   22124:	mov    rsi,QWORD PTR [r15]
   22127:	test   rsi,rsi
   2212a:	je     2215c <get_urls_html_fm+0x25c>
   2212c:	nop    DWORD PTR [rax+0x0]
   22130:	mov    rdi,QWORD PTR [rip+0x61501]        # 83638 <interesting_tags>
   22137:	call   1da70 <hash_table_get>
   2213c:	mov    rdx,rax
   2213f:	test   rax,rax
   22142:	je     2214f <get_urls_html_fm+0x24f>
   22144:	mov    rsi,QWORD PTR [r15]
   22147:	mov    rdi,rbp
   2214a:	call   1dc80 <hash_table_put>
   2214f:	mov    rsi,QWORD PTR [r15+0x8]
   22153:	add    r15,0x8
   22157:	test   rsi,rsi
   2215a:	jne    22130 <get_urls_html_fm+0x230>
   2215c:	mov    rdi,QWORD PTR [rip+0x614d5]        # 83638 <interesting_tags>
   22163:	call   1da40 <hash_table_destroy>
   22168:	mov    QWORD PTR [rip+0x614c9],rbp        # 83638 <interesting_tags>
   2216f:	mov    edi,0xa
   22174:	lea    r15,[rip+0x5a98d]        # 7cb08 <additional_attributes+0x8>
   2217b:	lea    rbp,[rip+0x45456]        # 675d8 <primes.6089+0x14f8>
   22182:	call   1e160 <make_nocase_string_hash_table>
   22187:	lea    rsi,[rip+0x44467]        # 665f5 <primes.6089+0x515>
   2218e:	mov    QWORD PTR [rip+0x6149b],rax        # 83630 <interesting_attributes>
   22195:	mov    rdi,rax
   22198:	jmp    221ae <get_urls_html_fm+0x2ae>
   2219a:	nop    WORD PTR [rax+rax*1+0x0]
   221a0:	mov    rdi,QWORD PTR [rip+0x61489]        # 83630 <interesting_attributes>
   221a7:	mov    rsi,QWORD PTR [r15]
   221aa:	add    r15,0x8
   221ae:	mov    rdx,rbp
   221b1:	call   1dc80 <hash_table_put>
   221b6:	lea    rax,[rip+0x5a983]        # 7cb40 <tag_url_attributes>
   221bd:	cmp    r15,rax
   221c0:	jne    221a0 <get_urls_html_fm+0x2a0>
   221c2:	lea    r15,[rip+0x5a997]        # 7cb60 <tag_url_attributes+0x20>
   221c9:	lea    rsi,[rip+0x44420]        # 665f0 <primes.6089+0x510>
   221d0:	lea    rbp,[rip+0x45401]        # 675d8 <primes.6089+0x14f8>
   221d7:	jmp    221e7 <get_urls_html_fm+0x2e7>
   221d9:	nop    DWORD PTR [rax+0x0]
   221e0:	mov    rsi,QWORD PTR [r15]
   221e3:	add    r15,0x18
   221e7:	mov    rdi,QWORD PTR [rip+0x61442]        # 83630 <interesting_attributes>
   221ee:	mov    rdx,rbp
   221f1:	call   1dc80 <hash_table_put>
   221f6:	lea    rax,[rip+0x5abbb]        # 7cdb8 <tag_url_attributes+0x278>
   221fd:	cmp    rax,r15
   22200:	jne    221e0 <get_urls_html_fm+0x2e0>
   22202:	mov    rdi,QWORD PTR [rbx]
   22205:	jmp    21f6f <get_urls_html_fm+0x6f>
   2220a:	call   c7b0 <__stack_chk_fail@plt>
   2220f:	nop

0000000000022210 <get_urls_html>:
   22210:	endbr64 
   22214:	push   r14
   22216:	mov    r14,rsi
   22219:	push   r13
   2221b:	mov    r13,rdx
   2221e:	push   r12
   22220:	mov    r12,rdi
   22223:	push   rbp
   22224:	push   rbx
   22225:	mov    rbx,rcx
   22228:	call   3c810 <wget_read_file>
   2222d:	test   rax,rax
   22230:	je     22290 <get_urls_html+0x80>
   22232:	cmp    BYTE PTR [rip+0x68082],0x0        # 8a2bb <opt+0x23b>
   22239:	mov    rbp,rax
   2223c:	jne    22270 <get_urls_html+0x60>
   2223e:	mov    rdi,r12
   22241:	mov    r8,rbx
   22244:	mov    rcx,r13
   22247:	mov    rdx,r14
   2224a:	mov    rsi,rbp
   2224d:	call   21f00 <get_urls_html_fm>
   22252:	mov    rdi,rbp
   22255:	mov    r12,rax
   22258:	call   3ca20 <wget_read_file_free>
   2225d:	pop    rbx
   2225e:	mov    rax,r12
   22261:	pop    rbp
   22262:	pop    r12
   22264:	pop    r13
   22266:	pop    r14
   22268:	ret    
   22269:	nop    DWORD PTR [rax+0x0]
   22270:	mov    rdi,QWORD PTR [rax+0x8]
   22274:	call   3e8e0 <number_to_static_string>
   22279:	mov    rsi,r12
   2227c:	lea    rdi,[rip+0x436fc]        # 6597f <yy_accept+0x8bf>
   22283:	mov    rdx,rax
   22286:	xor    eax,eax
   22288:	call   2e250 <debug_logprintf>
   2228d:	jmp    2223e <get_urls_html+0x2e>
   2228f:	nop
   22290:	call   c740 <__errno_location@plt>
   22295:	mov    edi,DWORD PTR [rax]
   22297:	call   c540 <strerror@plt>
   2229c:	mov    rdx,r12
   2229f:	mov    edi,0x1
   222a4:	xor    r12d,r12d
   222a7:	mov    rcx,rax
   222aa:	lea    rsi,[rip+0x46594]        # 68845 <primes.6089+0x2765>
   222b1:	xor    eax,eax
   222b3:	call   2e0a0 <logprintf>
   222b8:	jmp    2225d <get_urls_html+0x4d>
   222ba:	nop    WORD PTR [rax+rax*1+0x0]

00000000000222c0 <get_urls_file>:
   222c0:	endbr64 
   222c4:	push   r15
   222c6:	push   r14
   222c8:	push   r13
   222ca:	push   r12
   222cc:	push   rbp
   222cd:	push   rbx
   222ce:	sub    rsp,0x28
   222d2:	mov    QWORD PTR [rsp+0x8],rdi
   222d7:	mov    rax,QWORD PTR fs:0x28
   222e0:	mov    QWORD PTR [rsp+0x18],rax
   222e5:	xor    eax,eax
   222e7:	call   3c810 <wget_read_file>
   222ec:	mov    QWORD PTR [rsp],rax
   222f0:	test   rax,rax
   222f3:	je     2253b <get_urls_file+0x27b>
   222f9:	mov    rax,QWORD PTR [rsp]
   222fd:	cmp    BYTE PTR [rip+0x67fb7],0x0        # 8a2bb <opt+0x23b>
   22304:	mov    rdi,QWORD PTR [rax+0x8]
   22308:	jne    22513 <get_urls_file+0x253>
   2230e:	mov    rax,QWORD PTR [rsp]
   22312:	mov    r12,QWORD PTR [rax]
   22315:	lea    rbp,[r12+rdi*1]
   22319:	cmp    r12,rbp
   2231c:	jae    2250b <get_urls_file+0x24b>
   22322:	xor    r13d,r13d
   22325:	xor    r14d,r14d
   22328:	jmp    223f4 <get_urls_file+0x134>
   2232d:	nop    DWORD PTR [rax]
   22330:	cmp    al,0x8
   22332:	jg     22433 <get_urls_file+0x173>
   22338:	mov    rsi,rbx
   2233b:	cmp    rbx,r12
   2233e:	jbe    22354 <get_urls_file+0x94>
   22340:	movzx  eax,BYTE PTR [rsi-0x1]
   22344:	cmp    al,0xd
   22346:	jg     22480 <get_urls_file+0x1c0>
   2234c:	cmp    al,0x8
   2234e:	jg     22488 <get_urls_file+0x1c8>
   22354:	cmp    r12,rsi
   22357:	je     223ec <get_urls_file+0x12c>
   2235d:	mov    rdi,r12
   22360:	call   3b8a0 <strdupdelim>
   22365:	mov    rdi,QWORD PTR [rip+0x67edc]        # 8a248 <opt+0x1c8>
   2236c:	mov    r15,rax
   2236f:	test   rdi,rdi
   22372:	je     2238a <get_urls_file+0xca>
   22374:	mov    rsi,rax
   22377:	call   37e80 <uri_merge>
   2237c:	mov    rdi,r15
   2237f:	mov    r12,rax
   22382:	call   4bdc0 <rpl_free>
   22387:	mov    r15,r12
   2238a:	mov    rdi,r15
   2238d:	call   372f0 <rewrite_shorthand_url>
   22392:	mov    r12,rax
   22395:	test   rax,rax
   22398:	je     223a5 <get_urls_file+0xe5>
   2239a:	mov    rdi,r15
   2239d:	mov    r15,r12
   223a0:	call   4bdc0 <rpl_free>
   223a5:	lea    rsi,[rsp+0x14]
   223aa:	xor    ecx,ecx
   223ac:	xor    edx,edx
   223ae:	mov    rdi,r15
   223b1:	call   385f0 <url_parse>
   223b6:	mov    r12,rax
   223b9:	test   rax,rax
   223bc:	je     224b0 <get_urls_file+0x1f0>
   223c2:	mov    rdi,r15
   223c5:	call   4bdc0 <rpl_free>
   223ca:	mov    esi,0x30
   223cf:	mov    edi,0x1
   223d4:	call   4b9c0 <xcalloc>
   223d9:	mov    QWORD PTR [rax],r12
   223dc:	test   r14,r14
   223df:	je     224a0 <get_urls_file+0x1e0>
   223e5:	mov    QWORD PTR [r13+0x28],rax
   223e9:	mov    r13,rax
   223ec:	cmp    rbx,rbp
   223ef:	jae    22448 <get_urls_file+0x188>
   223f1:	mov    r12,rbx
   223f4:	mov    rdx,rbp
   223f7:	mov    esi,0xa
   223fc:	mov    rdi,r12
   223ff:	sub    rdx,r12
   22402:	call   bf70 <memchr@plt>
   22407:	lea    rbx,[rax+0x1]
   2240b:	test   rax,rax
   2240e:	cmove  rbx,rbp
   22412:	mov    rsi,rbx
   22415:	cmp    rbx,r12
   22418:	jbe    22354 <get_urls_file+0x94>
   2241e:	movzx  eax,BYTE PTR [r12]
   22423:	cmp    al,0xd
   22425:	jle    22330 <get_urls_file+0x70>
   2242b:	cmp    al,0x20
   2242d:	jne    22338 <get_urls_file+0x78>
   22433:	add    r12,0x1
   22437:	cmp    rbx,r12
   2243a:	jne    2241e <get_urls_file+0x15e>
   2243c:	cmp    rbx,rbp
   2243f:	jb     223f1 <get_urls_file+0x131>
   22441:	nop    DWORD PTR [rax+0x0]
   22448:	mov    rdi,QWORD PTR [rsp]
   2244c:	call   3ca20 <wget_read_file_free>
   22451:	mov    rax,QWORD PTR [rsp+0x18]
   22456:	xor    rax,QWORD PTR fs:0x28
   2245f:	jne    2256a <get_urls_file+0x2aa>
   22465:	add    rsp,0x28
   22469:	mov    rax,r14
   2246c:	pop    rbx
   2246d:	pop    rbp
   2246e:	pop    r12
   22470:	pop    r13
   22472:	pop    r14
   22474:	pop    r15
   22476:	ret    
   22477:	nop    WORD PTR [rax+rax*1+0x0]
   22480:	cmp    al,0x20
   22482:	jne    22354 <get_urls_file+0x94>
   22488:	sub    rsi,0x1
   2248c:	cmp    rsi,r12
   2248f:	jne    22340 <get_urls_file+0x80>
   22495:	jmp    223ec <get_urls_file+0x12c>
   2249a:	nop    WORD PTR [rax+rax*1+0x0]
   224a0:	mov    r14,rax
   224a3:	jmp    223e9 <get_urls_file+0x129>
   224a8:	nop    DWORD PTR [rax+rax*1+0x0]
   224b0:	mov    esi,DWORD PTR [rsp+0x14]
   224b4:	mov    rdi,r15
   224b7:	call   373b0 <url_error>
   224bc:	xor    edi,edi
   224be:	mov    edx,0x5
   224c3:	lea    rsi,[rip+0x44182]        # 6664c <primes.6089+0x56c>
   224ca:	mov    r12,rax
   224cd:	call   c780 <dcgettext@plt>
   224d2:	mov    rdx,QWORD PTR [rsp+0x8]
   224d7:	mov    r8,r12
   224da:	mov    rcx,r15
   224dd:	mov    rsi,rax
   224e0:	mov    edi,0x1
   224e5:	xor    eax,eax
   224e7:	call   2e0a0 <logprintf>
   224ec:	mov    rdi,r15
   224ef:	call   4bdc0 <rpl_free>
   224f4:	mov    rdi,r12
   224f7:	call   4bdc0 <rpl_free>
   224fc:	mov    edi,0x12
   22501:	call   3f7b0 <inform_exit_status>
   22506:	jmp    223ec <get_urls_file+0x12c>
   2250b:	xor    r14d,r14d
   2250e:	jmp    22448 <get_urls_file+0x188>
   22513:	call   3e8e0 <number_to_static_string>
   22518:	mov    rsi,QWORD PTR [rsp+0x8]
   2251d:	lea    rdi,[rip+0x4345b]        # 6597f <yy_accept+0x8bf>
   22524:	mov    rdx,rax
   22527:	xor    eax,eax
   22529:	call   2e250 <debug_logprintf>
   2252e:	mov    rax,QWORD PTR [rsp]
   22532:	mov    rdi,QWORD PTR [rax+0x8]
   22536:	jmp    2230e <get_urls_file+0x4e>
   2253b:	call   c740 <__errno_location@plt>
   22540:	xor    r14d,r14d
   22543:	mov    edi,DWORD PTR [rax]
   22545:	call   c540 <strerror@plt>
   2254a:	mov    rdx,QWORD PTR [rsp+0x8]
   2254f:	mov    edi,0x1
   22554:	lea    rsi,[rip+0x462ea]        # 68845 <primes.6089+0x2765>
   2255b:	mov    rcx,rax
   2255e:	xor    eax,eax
   22560:	call   2e0a0 <logprintf>
   22565:	jmp    22451 <get_urls_file+0x191>
   2256a:	call   c7b0 <__stack_chk_fail@plt>
   2256f:	nop

0000000000022570 <resp_free>:
   22570:	push   rbp
   22571:	push   rbx
   22572:	sub    rsp,0x8
   22576:	mov    rbp,QWORD PTR [rdi]
   22579:	test   rbp,rbp
   2257c:	je     225a1 <resp_free+0x31>
   2257e:	mov    rbx,rdi
   22581:	mov    rdi,QWORD PTR [rbp+0x8]
   22585:	call   4bdc0 <rpl_free>
   2258a:	mov    QWORD PTR [rbp+0x8],0x0
   22592:	mov    rdi,rbp
   22595:	call   4bdc0 <rpl_free>
   2259a:	mov    QWORD PTR [rbx],0x0
   225a1:	add    rsp,0x8
   225a5:	pop    rbx
   225a6:	pop    rbp
   225a7:	ret    
   225a8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000225b0 <set_file_timestamp>:
   225b0:	push   r14
   225b2:	push   r13
   225b4:	push   r12
   225b6:	push   rbp
   225b7:	push   rbx
   225b8:	mov    rbx,rdi
   225bb:	sub    rsp,0x4a0
   225c2:	mov    r13,QWORD PTR [rdi+0x68]
   225c6:	mov    rax,QWORD PTR fs:0x28
   225cf:	mov    QWORD PTR [rsp+0x498],rax
   225d7:	xor    eax,eax
   225d9:	cmp    BYTE PTR [rip+0x67cde],0x0        # 8a2be <opt+0x23e>
   225e0:	mov    r14,rsp
   225e3:	jne    22670 <set_file_timestamp+0xc0>
   225e9:	mov    rdx,r14
   225ec:	mov    rsi,r13
   225ef:	mov    edi,0x1
   225f4:	call   c350 <__xstat@plt>
   225f9:	test   eax,eax
   225fb:	je     22630 <set_file_timestamp+0x80>
   225fd:	mov    rax,QWORD PTR [rsp+0x498]
   22605:	xor    rax,QWORD PTR fs:0x28
   2260e:	jne    2272f <set_file_timestamp+0x17f>
   22614:	add    rsp,0x4a0
   2261b:	mov    eax,0x19
   22620:	pop    rbx
   22621:	pop    rbp
   22622:	pop    r12
   22624:	pop    r13
   22626:	pop    r14
   22628:	ret    
   22629:	nop    DWORD PTR [rax+0x0]
   22630:	xor    edi,edi
   22632:	call   4bdc0 <rpl_free>
   22637:	mov    r12,QWORD PTR [rbx+0x68]
   2263b:	test   r12,r12
   2263e:	je     225fd <set_file_timestamp+0x4d>
   22640:	mov    rdi,r12
   22643:	call   4ba50 <xstrdup>
   22648:	mov    QWORD PTR [rbx+0x78],rax
   2264c:	mov    rax,QWORD PTR [rsp+0x30]
   22651:	mov    BYTE PTR [rbx+0x71],0x1
   22655:	mov    QWORD PTR [rbx+0x80],rax
   2265c:	mov    rax,QWORD PTR [rsp+0x58]
   22661:	mov    QWORD PTR [rbx+0x88],rax
   22668:	jmp    225fd <set_file_timestamp+0x4d>
   2266a:	nop    WORD PTR [rax+rax*1+0x0]
   22670:	mov    rdi,r13
   22673:	call   c310 <strlen@plt>
   22678:	lea    rdi,[rax+0x6]
   2267c:	mov    rbp,rax
   2267f:	cmp    rdi,0x400
   22686:	ja     226d8 <set_file_timestamp+0x128>
   22688:	lea    r12,[rsp+0x90]
   22690:	mov    rdx,rax
   22693:	mov    rsi,r13
   22696:	mov    r14,rsp
   22699:	mov    rdi,r12
   2269c:	add    rbp,r12
   2269f:	call   cb30 <memcpy@plt>
   226a4:	mov    eax,0x67
   226a9:	mov    rdx,r14
   226ac:	mov    rsi,r12
   226af:	mov    DWORD PTR [rbp+0x0],0x69726f2e
   226b6:	mov    edi,0x1
   226bb:	mov    WORD PTR [rbp+0x4],ax
   226bf:	call   c350 <__xstat@plt>
   226c4:	test   eax,eax
   226c6:	je     22640 <set_file_timestamp+0x90>
   226cc:	mov    r13,QWORD PTR [rbx+0x68]
   226d0:	jmp    225e9 <set_file_timestamp+0x39>
   226d5:	nop    DWORD PTR [rax]
   226d8:	call   4b850 <xmalloc>
   226dd:	mov    rsi,QWORD PTR [rbx+0x68]
   226e1:	mov    rdx,rbp
   226e4:	mov    r14,rsp
   226e7:	mov    r13,rax
   226ea:	mov    rdi,rax
   226ed:	mov    r12,rax
   226f0:	call   cb30 <memcpy@plt>
   226f5:	add    rbp,r13
   226f8:	mov    edx,0x67
   226fd:	mov    rsi,r13
   22700:	mov    WORD PTR [rbp+0x4],dx
   22704:	mov    edi,0x1
   22709:	mov    rdx,r14
   2270c:	mov    DWORD PTR [rbp+0x0],0x69726f2e
   22713:	call   c350 <__xstat@plt>
   22718:	test   eax,eax
   2271a:	jne    226cc <set_file_timestamp+0x11c>
   2271c:	cmp    QWORD PTR [rbx+0x68],r13
   22720:	je     22640 <set_file_timestamp+0x90>
   22726:	mov    QWORD PTR [rbx+0x78],r13
   2272a:	jmp    2264c <set_file_timestamp+0x9c>
   2272f:	call   c7b0 <__stack_chk_fail@plt>
   22734:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2273f:	nop

0000000000022740 <request_send>:
   22740:	push   r15
   22742:	push   r14
   22744:	push   r13
   22746:	push   r12
   22748:	mov    r12,rdi
   2274b:	push   rbp
   2274c:	push   rbx
   2274d:	sub    rsp,0x28
   22751:	mov    rdi,QWORD PTR [rdi]
   22754:	mov    DWORD PTR [rsp+0x14],esi
   22758:	mov    QWORD PTR [rsp+0x18],rdx
   2275d:	call   c310 <strlen@plt>
   22762:	mov    rdi,QWORD PTR [r12+0x8]
   22767:	mov    rbx,rax
   2276a:	call   c310 <strlen@plt>
   2276f:	lea    ebx,[rbx+rax*1+0xc]
   22773:	mov    eax,DWORD PTR [r12+0x18]
   22778:	test   eax,eax
   2277a:	jle    227be <request_send+0x7e>
   2277c:	mov    r15,QWORD PTR [r12+0x10]
   22781:	sub    eax,0x1
   22784:	lea    rax,[rax+rax*2]
   22788:	lea    r14,[r15+0x18]
   2278c:	lea    r13,[r14+rax*8]
   22790:	jmp    2279c <request_send+0x5c>
   22792:	nop    WORD PTR [rax+rax*1+0x0]
   22798:	add    r14,0x18
   2279c:	mov    rdi,QWORD PTR [r15]
   2279f:	call   c310 <strlen@plt>
   227a4:	mov    rdi,QWORD PTR [r15+0x8]
   227a8:	mov    r15,r14
   227ab:	mov    rbp,rax
   227ae:	call   c310 <strlen@plt>
   227b3:	lea    ebx,[rbx+rbp*1+0x4]
   227b7:	add    ebx,eax
   227b9:	cmp    r13,r14
   227bc:	jne    22798 <request_send+0x58>
   227be:	lea    edi,[rbx+0x3]
   227c1:	movsxd rdi,edi
   227c4:	call   4b850 <xmalloc>
   227c9:	mov    r14,QWORD PTR [r12]
   227cd:	mov    r15,rax
   227d0:	mov    QWORD PTR [rsp+0x8],rax
   227d5:	mov    rdi,r14
   227d8:	call   c310 <strlen@plt>
   227dd:	mov    rsi,r14
   227e0:	mov    rdi,r15
   227e3:	movsxd rbp,eax
   227e6:	mov    rdx,rbp
   227e9:	call   cb30 <memcpy@plt>
   227ee:	lea    rax,[r15+rbp*1]
   227f2:	mov    r15,QWORD PTR [r12+0x8]
   227f7:	mov    BYTE PTR [rax],0x20
   227fa:	lea    rbp,[rax+0x1]
   227fe:	mov    rdi,r15
   22801:	call   c310 <strlen@plt>
   22806:	mov    rdi,rbp
   22809:	mov    rsi,r15
   2280c:	movsxd r14,eax
   2280f:	mov    rdx,r14
   22812:	add    rbp,r14
   22815:	call   cb30 <memcpy@plt>
   2281a:	mov    edi,0xa0d
   2281f:	mov    BYTE PTR [rbp+0x0],0x20
   22823:	movabs rax,0x312e312f50545448
   2282d:	mov    QWORD PTR [rbp+0x1],rax
   22831:	mov    eax,DWORD PTR [r12+0x18]
   22836:	add    rbp,0xb
   2283a:	mov    WORD PTR [rbp-0x2],di
   2283e:	test   eax,eax
   22840:	jle    228c8 <request_send+0x188>
   22846:	mov    r14,QWORD PTR [r12+0x10]
   2284b:	sub    eax,0x1
   2284e:	lea    rax,[rax+rax*2]
   22852:	lea    r15,[r14+0x18]
   22856:	lea    rax,[r15+rax*8]
   2285a:	mov    QWORD PTR [rsp],rax
   2285e:	jmp    22864 <request_send+0x124>
   22860:	add    r15,0x18
   22864:	mov    r13,QWORD PTR [r14]
   22867:	mov    rdi,r13
   2286a:	call   c310 <strlen@plt>
   2286f:	mov    rsi,r13
   22872:	mov    rdi,rbp
   22875:	movsxd r12,eax
   22878:	mov    rdx,r12
   2287b:	call   cb30 <memcpy@plt>
   22880:	lea    rdx,[rbp+r12*1+0x0]
   22885:	mov    ecx,0x203a
   2288a:	mov    WORD PTR [rdx],cx
   2288d:	mov    r12,QWORD PTR [r14+0x8]
   22891:	lea    rbp,[rdx+0x2]
   22895:	mov    rdi,r12
   22898:	call   c310 <strlen@plt>
   2289d:	mov    rsi,r12
   228a0:	mov    rdi,rbp
   228a3:	movsxd r14,eax
   228a6:	mov    rdx,r14
   228a9:	call   cb30 <memcpy@plt>
   228ae:	lea    rax,[rbp+r14*1+0x0]
   228b3:	mov    esi,0xa0d
   228b8:	mov    r14,r15
   228bb:	mov    WORD PTR [rax],si
   228be:	lea    rbp,[rax+0x2]
   228c2:	cmp    QWORD PTR [rsp],r15
   228c6:	jne    22860 <request_send+0x120>
   228c8:	mov    eax,0xa0d
   228cd:	cmp    BYTE PTR [rip+0x679e7],0x0        # 8a2bb <opt+0x23b>
   228d4:	mov    BYTE PTR [rbp+0x2],0x0
   228d8:	mov    WORD PTR [rbp+0x0],ax
   228dc:	jne    22980 <request_send+0x240>
   228e2:	movsd  xmm0,QWORD PTR [rip+0x38936]        # 5b220 <_IO_stdin_used+0x220>
   228ea:	mov    rsi,QWORD PTR [rsp+0x8]
   228ef:	add    ebx,0x2
   228f2:	mov    edi,DWORD PTR [rsp+0x14]
   228f6:	mov    edx,ebx
   228f8:	call   f2a0 <fd_write>
   228fd:	mov    r12d,eax
   22900:	test   eax,eax
   22902:	js     22950 <request_send+0x210>
   22904:	mov    rcx,QWORD PTR [rsp+0x18]
   22909:	test   rcx,rcx
   2290c:	je     2292b <request_send+0x1eb>
   2290e:	mov    rdi,QWORD PTR [rsp+0x8]
   22913:	movsxd rdx,ebx
   22916:	mov    esi,0x1
   2291b:	call   ca10 <fwrite@plt>
   22920:	cmp    ebx,eax
   22922:	mov    eax,0xfffffffe
   22927:	cmovne r12d,eax
   2292b:	mov    rdi,QWORD PTR [rsp+0x8]
   22930:	call   4bdc0 <rpl_free>
   22935:	add    rsp,0x28
   22939:	mov    eax,r12d
   2293c:	pop    rbx
   2293d:	pop    rbp
   2293e:	pop    r12
   22940:	pop    r13
   22942:	pop    r14
   22944:	pop    r15
   22946:	ret    
   22947:	nop    WORD PTR [rax+rax*1+0x0]
   22950:	mov    edi,DWORD PTR [rsp+0x14]
   22954:	call   f3b0 <fd_errstr>
   22959:	xor    edi,edi
   2295b:	mov    edx,0x5
   22960:	lea    rsi,[rip+0x43e89]        # 667f0 <primes.6089+0x710>
   22967:	mov    r14,rax
   2296a:	call   c780 <dcgettext@plt>
   2296f:	mov    rdx,r14
   22972:	xor    edi,edi
   22974:	mov    rsi,rax
   22977:	xor    eax,eax
   22979:	call   2e0a0 <logprintf>
   2297e:	jmp    2292b <request_send+0x1eb>
   22980:	mov    rsi,QWORD PTR [rsp+0x8]
   22985:	lea    rdi,[rip+0x43e34]        # 667c0 <primes.6089+0x6e0>
   2298c:	xor    eax,eax
   2298e:	call   2e250 <debug_logprintf>
   22993:	jmp    228e2 <request_send+0x1a2>
   22998:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000229a0 <basic_authentication_encode>:
   229a0:	push   r15
   229a2:	mov    r15,rdi
   229a5:	push   r14
   229a7:	push   r13
   229a9:	push   r12
   229ab:	push   rbp
   229ac:	mov    rbp,rsi
   229af:	push   rbx
   229b0:	sub    rsp,0x218
   229b7:	mov    rax,QWORD PTR fs:0x28
   229c0:	mov    QWORD PTR [rsp+0x208],rax
   229c8:	xor    eax,eax
   229ca:	mov    r13,rsp
   229cd:	call   c310 <strlen@plt>
   229d2:	mov    rdi,rbp
   229d5:	mov    r12,r13
   229d8:	mov    rbx,rax
   229db:	call   c310 <strlen@plt>
   229e0:	add    rbx,rax
   229e3:	lea    r14,[rbx+0x1]
   229e7:	cmp    r14,0xff
   229ee:	ja     22b10 <basic_authentication_encode+0x170>
   229f4:	lea    rdx,[rbx+0x3]
   229f8:	movabs rbx,0xaaaaaaaaaaaaaaab
   22a02:	mov    rax,rdx
   22a05:	mul    rbx
   22a08:	shr    rdx,1
   22a0b:	shl    rdx,0x2
   22a0f:	cmp    rdx,0xff
   22a16:	ja     22aa8 <basic_authentication_encode+0x108>
   22a1c:	mov    r9,rbp
   22a1f:	mov    r8,r15
   22a22:	lea    rcx,[rip+0x44917]        # 67340 <primes.6089+0x1260>
   22a29:	mov    rdi,r12
   22a2c:	mov    rdx,0xffffffffffffffff
   22a33:	mov    esi,0x1
   22a38:	lea    rbp,[rsp+0x100]
   22a40:	xor    eax,eax
   22a42:	call   c950 <__sprintf_chk@plt>
   22a47:	mov    rsi,r14
   22a4a:	mov    rdx,rbp
   22a4d:	mov    rdi,r12
   22a50:	call   3ec00 <wget_base64_encode>
   22a55:	xor    edx,edx
   22a57:	mov    rsi,rbp
   22a5a:	xor    eax,eax
   22a5c:	lea    rdi,[rip+0x448e3]        # 67346 <primes.6089+0x1266>
   22a63:	call   3bbd0 <concat_strings>
   22a68:	mov    r14,rax
   22a6b:	cmp    r12,r13
   22a6e:	je     22a78 <basic_authentication_encode+0xd8>
   22a70:	mov    rdi,r12
   22a73:	call   4bdc0 <rpl_free>
   22a78:	mov    rax,QWORD PTR [rsp+0x208]
   22a80:	xor    rax,QWORD PTR fs:0x28
   22a89:	jne    22b21 <basic_authentication_encode+0x181>
   22a8f:	add    rsp,0x218
   22a96:	mov    rax,r14
   22a99:	pop    rbx
   22a9a:	pop    rbp
   22a9b:	pop    r12
   22a9d:	pop    r13
   22a9f:	pop    r14
   22aa1:	pop    r15
   22aa3:	ret    
   22aa4:	nop    DWORD PTR [rax+0x0]
   22aa8:	lea    rdi,[rdx+0x1]
   22aac:	call   4b850 <xmalloc>
   22ab1:	mov    r9,rbp
   22ab4:	mov    r8,r15
   22ab7:	mov    rdi,r12
   22aba:	mov    rbx,rax
   22abd:	lea    rcx,[rip+0x4487c]        # 67340 <primes.6089+0x1260>
   22ac4:	mov    rdx,0xffffffffffffffff
   22acb:	xor    eax,eax
   22acd:	mov    esi,0x1
   22ad2:	call   c950 <__sprintf_chk@plt>
   22ad7:	mov    rdx,rbx
   22ada:	mov    rsi,r14
   22add:	mov    rdi,r12
   22ae0:	call   3ec00 <wget_base64_encode>
   22ae5:	xor    edx,edx
   22ae7:	mov    rsi,rbx
   22aea:	xor    eax,eax
   22aec:	lea    rdi,[rip+0x44853]        # 67346 <primes.6089+0x1266>
   22af3:	call   3bbd0 <concat_strings>
   22af8:	mov    rdi,rbx
   22afb:	mov    r14,rax
   22afe:	call   4bdc0 <rpl_free>
   22b03:	jmp    22a6b <basic_authentication_encode+0xcb>
   22b08:	nop    DWORD PTR [rax+rax*1+0x0]
   22b10:	lea    rdi,[rbx+0x2]
   22b14:	call   4b850 <xmalloc>
   22b19:	mov    r12,rax
   22b1c:	jmp    229f4 <basic_authentication_encode+0x54>
   22b21:	call   c7b0 <__stack_chk_fail@plt>
   22b26:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000022b30 <resp_new>:
   22b30:	push   r15
   22b32:	mov    esi,0x10
   22b37:	push   r14
   22b39:	push   r13
   22b3b:	push   r12
   22b3d:	push   rbp
   22b3e:	mov    rbp,rdi
   22b41:	mov    edi,0x1
   22b46:	push   rbx
   22b47:	sub    rsp,0x28
   22b4b:	call   4b9c0 <xcalloc>
   22b50:	cmp    BYTE PTR [rbp+0x0],0x0
   22b54:	mov    QWORD PTR [rsp+0x18],rax
   22b59:	mov    QWORD PTR [rax],rbp
   22b5c:	je     22cae <resp_new+0x17e>
   22b62:	mov    r13,QWORD PTR [rax+0x8]
   22b66:	mov    r14,rbp
   22b69:	xor    r15d,r15d
   22b6c:	xor    r8d,r8d
   22b6f:	mov    QWORD PTR [rsp+0x8],0x0
   22b78:	mov    r12d,0x10
   22b7e:	xchg   ax,ax
   22b80:	lea    ebx,[r8+0x1]
   22b84:	cmp    ebx,r15d
   22b87:	jle    22bd4 <resp_new+0xa4>
   22b89:	nop    DWORD PTR [rax+0x0]
   22b90:	lea    eax,[r15+r15*1]
   22b94:	mov    r15d,r12d
   22b97:	cmp    eax,0x10
   22b9a:	cmovge r15d,eax
   22b9e:	cmp    ebx,r15d
   22ba1:	jg     22b90 <resp_new+0x60>
   22ba3:	cmp    eax,0xf
   22ba6:	movsxd rsi,eax
   22ba9:	mov    eax,0x10
   22bae:	mov    rdi,r13
   22bb1:	cmovle rsi,rax
   22bb5:	mov    DWORD PTR [rsp+0x14],r8d
   22bba:	shl    rsi,0x3
   22bbe:	call   4b870 <xrealloc>
   22bc3:	mov    r8d,DWORD PTR [rsp+0x14]
   22bc8:	mov    r13,rax
   22bcb:	mov    rax,QWORD PTR [rsp+0x18]
   22bd0:	mov    QWORD PTR [rax+0x8],r13
   22bd4:	mov    rax,QWORD PTR [rsp+0x8]
   22bd9:	mov    QWORD PTR [r13+rax*1+0x0],r14
   22bde:	movzx  eax,BYTE PTR [r14]
   22be2:	test   al,al
   22be4:	je     22c57 <resp_new+0x127>
   22be6:	cmp    al,0xd
   22be8:	je     22c50 <resp_new+0x120>
   22bea:	cmp    al,0xa
   22bec:	je     22c57 <resp_new+0x127>
   22bee:	xchg   ax,ax
   22bf0:	mov    esi,0xa
   22bf5:	mov    rdi,r14
   22bf8:	call   c6c0 <strchr@plt>
   22bfd:	test   rax,rax
   22c00:	je     22c30 <resp_new+0x100>
   22c02:	movzx  esi,BYTE PTR [rax+0x1]
   22c06:	lea    r14,[rax+0x1]
   22c0a:	cmp    sil,0x20
   22c0e:	je     22c16 <resp_new+0xe6>
   22c10:	cmp    sil,0x9
   22c14:	jne    22c3b <resp_new+0x10b>
   22c16:	mov    BYTE PTR [rax],0x20
   22c19:	cmp    rbp,rax
   22c1c:	jae    22bf0 <resp_new+0xc0>
   22c1e:	cmp    BYTE PTR [rax-0x1],0xd
   22c22:	jne    22bf0 <resp_new+0xc0>
   22c24:	mov    BYTE PTR [rax-0x1],0x20
   22c28:	jmp    22bf0 <resp_new+0xc0>
   22c2a:	nop    WORD PTR [rax+rax*1+0x0]
   22c30:	mov    rdi,r14
   22c33:	call   c310 <strlen@plt>
   22c38:	add    r14,rax
   22c3b:	add    QWORD PTR [rsp+0x8],0x8
   22c41:	mov    r8d,ebx
   22c44:	jmp    22b80 <resp_new+0x50>
   22c49:	nop    DWORD PTR [rax+0x0]
   22c50:	cmp    BYTE PTR [r14+0x1],0xa
   22c55:	jne    22bf0 <resp_new+0xc0>
   22c57:	add    r8d,0x2
   22c5b:	cmp    r8d,r15d
   22c5e:	jle    22ca2 <resp_new+0x172>
   22c60:	mov    ecx,0x10
   22c65:	nop    DWORD PTR [rax]
   22c68:	lea    eax,[r15+r15*1]
   22c6c:	mov    r15d,ecx
   22c6f:	cmp    eax,0x10
   22c72:	cmovge r15d,eax
   22c76:	cmp    r8d,r15d
   22c79:	jg     22c68 <resp_new+0x138>
   22c7b:	cmp    eax,0xf
   22c7e:	movsxd rsi,eax
   22c81:	mov    eax,0x10
   22c86:	mov    rdi,r13
   22c89:	cmovle rsi,rax
   22c8d:	shl    rsi,0x3
   22c91:	call   4b870 <xrealloc>
   22c96:	mov    r13,rax
   22c99:	mov    rax,QWORD PTR [rsp+0x18]
   22c9e:	mov    QWORD PTR [rax+0x8],r13
   22ca2:	movsxd rbx,ebx
   22ca5:	mov    QWORD PTR [r13+rbx*8+0x0],0x0
   22cae:	mov    rax,QWORD PTR [rsp+0x18]
   22cb3:	add    rsp,0x28
   22cb7:	pop    rbx
   22cb8:	pop    rbp
   22cb9:	pop    r12
   22cbb:	pop    r13
   22cbd:	pop    r14
   22cbf:	pop    r15
   22cc1:	ret    
   22cc2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   22ccd:	nop    DWORD PTR [rax]

0000000000022cd0 <response_head_terminator>:
   22cd0:	endbr64 
   22cd4:	push   r12
   22cd6:	movsxd r12,edx
   22cd9:	push   rbp
   22cda:	mov    rbp,rsi
   22cdd:	push   rbx
   22cde:	mov    rbx,rdi
   22ce1:	cmp    rdi,rsi
   22ce4:	je     22d70 <response_head_terminator+0xa0>
   22cea:	mov    rdx,rsi
   22ced:	lea    rax,[rsi-0x2]
   22cf1:	sub    rdx,rdi
   22cf4:	cmp    rdx,0x1
   22cf8:	cmovg  rbx,rax
   22cfc:	movsxd rax,r12d
   22cff:	lea    rax,[rbp+rax*1-0x2]
   22d04:	cmp    rax,rbx
   22d07:	ja     22d19 <response_head_terminator+0x49>
   22d09:	jmp    22d4c <response_head_terminator+0x7c>
   22d0b:	nop    DWORD PTR [rax+rax*1+0x0]
   22d10:	add    rbx,0x1
   22d14:	cmp    rax,rbx
   22d17:	je     22d50 <response_head_terminator+0x80>
   22d19:	cmp    BYTE PTR [rbx],0xa
   22d1c:	jne    22d10 <response_head_terminator+0x40>
   22d1e:	movzx  edx,BYTE PTR [rbx+0x1]
   22d22:	cmp    dl,0xd
   22d25:	je     22d40 <response_head_terminator+0x70>
   22d27:	cmp    dl,0xa
   22d2a:	jne    22d10 <response_head_terminator+0x40>
   22d2c:	lea    r8,[rbx+0x2]
   22d30:	pop    rbx
   22d31:	mov    rax,r8
   22d34:	pop    rbp
   22d35:	pop    r12
   22d37:	ret    
   22d38:	nop    DWORD PTR [rax+rax*1+0x0]
   22d40:	cmp    BYTE PTR [rbx+0x2],0xa
   22d44:	jne    22d10 <response_head_terminator+0x40>
   22d46:	lea    r8,[rbx+0x3]
   22d4a:	jmp    22d30 <response_head_terminator+0x60>
   22d4c:	mov    rax,rbx
   22d4f:	nop
   22d50:	xor    r8d,r8d
   22d53:	cmp    r12d,0x1
   22d57:	jle    22d30 <response_head_terminator+0x60>
   22d59:	cmp    BYTE PTR [rax],0xa
   22d5c:	jne    22d30 <response_head_terminator+0x60>
   22d5e:	cmp    BYTE PTR [rax+0x1],0xa
   22d62:	jne    22d30 <response_head_terminator+0x60>
   22d64:	lea    r8,[rax+0x2]
   22d68:	pop    rbx
   22d69:	pop    rbp
   22d6a:	mov    rax,r8
   22d6d:	pop    r12
   22d6f:	ret    
   22d70:	cmp    r12d,0x4
   22d74:	mov    edx,0x4
   22d79:	lea    rsi,[rip+0x4a1e5]        # 6cf65 <eta_str.8886+0x1ed>
   22d80:	cmovle rdx,r12
   22d84:	call   c870 <memcmp@plt>
   22d89:	mov    r8,rbx
   22d8c:	test   eax,eax
   22d8e:	je     22cfc <response_head_terminator+0x2c>
   22d94:	pop    rbx
   22d95:	mov    rax,r8
   22d98:	pop    rbp
   22d99:	pop    r12
   22d9b:	ret    
   22d9c:	nop    DWORD PTR [rax+0x0]

0000000000022da0 <skip_short_body>:
   22da0:	push   r15
   22da2:	push   r14
   22da4:	push   r13
   22da6:	push   r12
   22da8:	push   rbp
   22da9:	push   rbx
   22daa:	sub    rsp,0x228
   22db1:	mov    rax,QWORD PTR fs:0x28
   22dba:	mov    QWORD PTR [rsp+0x218],rax
   22dc2:	xor    eax,eax
   22dc4:	mov    BYTE PTR [rsp+0x210],0x0
   22dcc:	cmp    rsi,0x1000
   22dd3:	jg     22f90 <skip_short_body+0x1f0>
   22dd9:	mov    r14d,edi
   22ddc:	mov    rbx,rsi
   22ddf:	mov    r13d,edx
   22de2:	test   rsi,rsi
   22de5:	jg     22def <skip_short_body+0x4f>
   22de7:	test   dl,dl
   22de9:	je     22f30 <skip_short_body+0x190>
   22def:	xor    r12d,r12d
   22df2:	nop    WORD PTR [rax+rax*1+0x0]
   22df8:	test   r13b,r13b
   22dfb:	jne    22e92 <skip_short_body+0xf2>
   22e01:	cmp    BYTE PTR [rip+0x674b3],0x0        # 8a2bb <opt+0x23b>
   22e08:	jne    22eb4 <skip_short_body+0x114>
   22e0e:	mov    rax,QWORD PTR [rip+0x3840b]        # 5b220 <_IO_stdin_used+0x220>
   22e15:	cmp    rbx,0x200
   22e1c:	mov    edx,0x200
   22e21:	mov    edi,r14d
   22e24:	cmovle rdx,rbx
   22e28:	lea    r15,[rsp+0x10]
   22e2d:	movq   xmm0,rax
   22e32:	mov    rsi,r15
   22e35:	call   f090 <fd_read>
   22e3a:	mov    ebp,eax
   22e3c:	test   eax,eax
   22e3e:	jle    22f68 <skip_short_body+0x1c8>
   22e44:	cdqe   
   22e46:	sub    rbx,rax
   22e49:	test   r13b,r13b
   22e4c:	je     22ed8 <skip_short_body+0x138>
   22e52:	sub    r12,rax
   22e55:	je     22f48 <skip_short_body+0x1a8>
   22e5b:	cmp    BYTE PTR [rip+0x67459],0x0        # 8a2bb <opt+0x23b>
   22e62:	je     22df8 <skip_short_body+0x58>
   22e64:	mov    rdx,r15
   22e67:	mov    esi,ebp
   22e69:	lea    rdi,[rip+0x44519]        # 67389 <primes.6089+0x12a9>
   22e70:	xor    eax,eax
   22e72:	call   2e250 <debug_logprintf>
   22e77:	nop    WORD PTR [rax+rax*1+0x0]
   22e80:	test   rbx,rbx
   22e83:	jg     22df8 <skip_short_body+0x58>
   22e89:	test   r13b,r13b
   22e8c:	je     22f30 <skip_short_body+0x190>
   22e92:	test   r12,r12
   22e95:	je     22ee8 <skip_short_body+0x148>
   22e97:	cmp    r12,0x200
   22e9e:	mov    ebx,0x200
   22ea3:	cmovle rbx,r12
   22ea7:	cmp    BYTE PTR [rip+0x6740d],0x0        # 8a2bb <opt+0x23b>
   22eae:	je     22e0e <skip_short_body+0x6e>
   22eb4:	mov    rdi,rbx
   22eb7:	call   3e8e0 <number_to_static_string>
   22ebc:	lea    rdi,[rip+0x44497]        # 6735a <primes.6089+0x127a>
   22ec3:	mov    rsi,rax
   22ec6:	xor    eax,eax
   22ec8:	call   2e250 <debug_logprintf>
   22ecd:	jmp    22e0e <skip_short_body+0x6e>
   22ed2:	nop    WORD PTR [rax+rax*1+0x0]
   22ed8:	cmp    BYTE PTR [rip+0x673dc],0x0        # 8a2bb <opt+0x23b>
   22edf:	je     22e80 <skip_short_body+0xe0>
   22ee1:	jmp    22e64 <skip_short_body+0xc4>
   22ee3:	nop    DWORD PTR [rax+rax*1+0x0]
   22ee8:	mov    edi,r14d
   22eeb:	call   35060 <fd_read_line>
   22ef0:	mov    rbp,rax
   22ef3:	test   rax,rax
   22ef6:	je     22f30 <skip_short_body+0x190>
   22ef8:	mov    rdi,rax
   22efb:	lea    rsi,[rsp+0x8]
   22f00:	mov    edx,0x10
   22f05:	call   c5a0 <strtol@plt>
   22f0a:	mov    rdi,rbp
   22f0d:	mov    r12,rax
   22f10:	call   4bdc0 <rpl_free>
   22f15:	test   r12,r12
   22f18:	js     22f90 <skip_short_body+0x1f0>
   22f1a:	jne    22e97 <skip_short_body+0xf7>
   22f20:	mov    edi,r14d
   22f23:	call   35060 <fd_read_line>
   22f28:	mov    rdi,rax
   22f2b:	call   4bdc0 <rpl_free>
   22f30:	movzx  r12d,BYTE PTR [rip+0x67383]        # 8a2bb <opt+0x23b>
   22f38:	test   r12b,r12b
   22f3b:	jne    22fbb <skip_short_body+0x21b>
   22f3d:	mov    r12d,0x1
   22f43:	jmp    22f93 <skip_short_body+0x1f3>
   22f45:	nop    DWORD PTR [rax]
   22f48:	mov    edi,r14d
   22f4b:	call   35060 <fd_read_line>
   22f50:	mov    rdi,rax
   22f53:	test   rax,rax
   22f56:	je     22f90 <skip_short_body+0x1f0>
   22f58:	call   4bdc0 <rpl_free>
   22f5d:	jmp    22e5b <skip_short_body+0xbb>
   22f62:	nop    WORD PTR [rax+rax*1+0x0]
   22f68:	cmp    BYTE PTR [rip+0x6734c],0x0        # 8a2bb <opt+0x23b>
   22f6f:	je     22f90 <skip_short_body+0x1f0>
   22f71:	lea    rsi,[rip+0x443d5]        # 6734d <primes.6089+0x126d>
   22f78:	test   eax,eax
   22f7a:	jne    22fcb <skip_short_body+0x22b>
   22f7c:	lea    rdi,[rip+0x443f4]        # 67377 <primes.6089+0x1297>
   22f83:	xor    eax,eax
   22f85:	call   2e250 <debug_logprintf>
   22f8a:	nop    WORD PTR [rax+rax*1+0x0]
   22f90:	xor    r12d,r12d
   22f93:	mov    rax,QWORD PTR [rsp+0x218]
   22f9b:	xor    rax,QWORD PTR fs:0x28
   22fa4:	jne    22fd8 <skip_short_body+0x238>
   22fa6:	add    rsp,0x228
   22fad:	mov    eax,r12d
   22fb0:	pop    rbx
   22fb1:	pop    rbp
   22fb2:	pop    r12
   22fb4:	pop    r13
   22fb6:	pop    r14
   22fb8:	pop    r15
   22fba:	ret    
   22fbb:	lea    rdi,[rip+0x443cc]        # 6738e <primes.6089+0x12ae>
   22fc2:	xor    eax,eax
   22fc4:	call   2e250 <debug_logprintf>
   22fc9:	jmp    22f93 <skip_short_body+0x1f3>
   22fcb:	mov    edi,r14d
   22fce:	call   f3b0 <fd_errstr>
   22fd3:	mov    rsi,rax
   22fd6:	jmp    22f7c <skip_short_body+0x1dc>
   22fd8:	call   c7b0 <__stack_chk_fail@plt>
   22fdd:	nop    DWORD PTR [rax]

0000000000022fe0 <read_response_body>:
   22fe0:	push   r15
   22fe2:	push   r14
   22fe4:	mov    r14,rdx
   22fe7:	push   r13
   22fe9:	mov    r13d,r9d
   22fec:	push   r12
   22fee:	mov    r12,rcx
   22ff1:	push   rbp
   22ff2:	mov    ebp,esi
   22ff4:	push   rbx
   22ff5:	mov    rbx,rdi
   22ff8:	sub    rsp,0x28
   22ffc:	mov    r15,QWORD PTR [rip+0x67185]        # 8a188 <opt+0x108>
   23003:	mov    QWORD PTR [rsp+0x8],r8
   23008:	test   r15,r15
   2300b:	je     23178 <read_response_body+0x198>
   23011:	call   39ba0 <warc_tempfile>
   23016:	mov    r8d,0x35
   2301c:	mov    r15,rax
   2301f:	test   rax,rax
   23022:	je     23160 <read_response_body+0x180>
   23028:	mov    rdi,QWORD PTR [rsp+0x90]
   23030:	call   c310 <strlen@plt>
   23035:	mov    rdi,QWORD PTR [rsp+0x90]
   2303d:	mov    rcx,r15
   23040:	mov    esi,0x1
   23045:	movsxd rdx,eax
   23048:	mov    QWORD PTR [rsp+0x18],rax
   2304d:	call   ca10 <fwrite@plt>
   23052:	mov    r8,QWORD PTR [rsp+0x18]
   23057:	mov    DWORD PTR [rsp+0x14],eax
   2305b:	cmp    r8d,eax
   2305e:	jne    231e0 <read_response_body+0x200>
   23064:	xor    r9d,r9d
   23067:	cmp    r12,0xffffffffffffffff
   2306b:	mov    r8,QWORD PTR [rbx+0x10]
   2306f:	setne  r9b
   23073:	test   r14,r14
   23076:	je     230a4 <read_response_body+0xc4>
   23078:	cmp    BYTE PTR [rip+0x6723a],0x0        # 8a2b9 <opt+0x239>
   2307f:	je     2308a <read_response_body+0xaa>
   23081:	test   r8,r8
   23084:	je     231f8 <read_response_body+0x218>
   2308a:	cmp    QWORD PTR [rsp+0x8],0x0
   23090:	jne    230a4 <read_response_body+0xc4>
   23092:	test   r8,r8
   23095:	mov    eax,r9d
   23098:	setg   dl
   2309b:	or     eax,0x2
   2309e:	test   dl,dl
   230a0:	cmovne r9d,eax
   230a4:	mov    eax,r9d
   230a7:	or     eax,0x4
   230aa:	test   r13b,r13b
   230ad:	cmovne r9d,eax
   230b1:	cmp    DWORD PTR [rbx+0x94],0x1
   230b8:	jne    230be <read_response_body+0xde>
   230ba:	or     r9d,0x8
   230be:	cmp    r12,0xffffffffffffffff
   230c2:	lea    rax,[rbx+0x58]
   230c6:	mov    edx,0x0
   230cb:	push   r15
   230cd:	cmove  r12,rdx
   230d1:	push   r9
   230d3:	mov    rdi,QWORD PTR [rbx+0x68]
   230d7:	lea    r9,[rbx+0x50]
   230db:	push   rax
   230dc:	mov    rdx,r14
   230df:	mov    esi,ebp
   230e1:	push   rbx
   230e2:	mov    rcx,r12
   230e5:	mov    QWORD PTR [rbx],r8
   230e8:	mov    QWORD PTR [rbx+0x50],0x0
   230f0:	call   346b0 <fd_read_body>
   230f5:	add    rsp,0x20
   230f9:	mov    DWORD PTR [rbx+0x18],eax
   230fc:	test   eax,eax
   230fe:	js     23188 <read_response_body+0x1a8>
   23104:	test   r15,r15
   23107:	je     2315a <read_response_body+0x17a>
   23109:	sub    rsp,0x8
   2310d:	push   QWORD PTR [rbx+0x28]
   23110:	mov    r8,r15
   23113:	mov    eax,DWORD PTR [rsp+0x98]
   2311a:	push   rax
   2311b:	push   QWORD PTR [rsp+0x98]
   23122:	movsxd r9,DWORD PTR [rsp+0x34]
   23127:	mov    rcx,QWORD PTR [rsp+0x98]
   2312f:	mov    rdx,QWORD PTR [rsp+0x90]
   23137:	mov    rsi,QWORD PTR [rsp+0x88]
   2313f:	mov    rdi,QWORD PTR [rsp+0x80]
   23147:	call   3aba0 <warc_write_response_record>
   2314c:	add    rsp,0x20
   23150:	mov    r8d,0x34
   23156:	test   al,al
   23158:	je     23160 <read_response_body+0x180>
   2315a:	mov    r8d,0x23
   23160:	add    rsp,0x28
   23164:	mov    eax,r8d
   23167:	pop    rbx
   23168:	pop    rbp
   23169:	pop    r12
   2316b:	pop    r13
   2316d:	pop    r14
   2316f:	pop    r15
   23171:	ret    
   23172:	nop    WORD PTR [rax+rax*1+0x0]
   23178:	mov    DWORD PTR [rsp+0x14],0x0
   23180:	jmp    23064 <read_response_body+0x84>
   23185:	nop    DWORD PTR [rax]
   23188:	test   r15,r15
   2318b:	je     23198 <read_response_body+0x1b8>
   2318d:	mov    rdi,r15
   23190:	call   c8b0 <fclose@plt>
   23195:	mov    eax,DWORD PTR [rbx+0x18]
   23198:	cmp    eax,0xfffffffe
   2319b:	je     23230 <read_response_body+0x250>
   231a1:	mov    r8d,0x36
   231a7:	cmp    eax,0xfffffffd
   231aa:	je     23160 <read_response_body+0x180>
   231ac:	mov    rdi,QWORD PTR [rbx+0x20]
   231b0:	call   4bdc0 <rpl_free>
   231b5:	mov    QWORD PTR [rbx+0x20],0x0
   231bd:	mov    edi,ebp
   231bf:	call   f3b0 <fd_errstr>
   231c4:	mov    rdi,rax
   231c7:	call   4ba50 <xstrdup>
   231cc:	mov    r8d,0x23
   231d2:	mov    QWORD PTR [rbx+0x20],rax
   231d6:	jmp    23160 <read_response_body+0x180>
   231d8:	nop    DWORD PTR [rax+rax*1+0x0]
   231e0:	mov    rdi,r15
   231e3:	call   c8b0 <fclose@plt>
   231e8:	mov    r8d,0x36
   231ee:	jmp    23160 <read_response_body+0x180>
   231f3:	nop    DWORD PTR [rax+rax*1+0x0]
   231f8:	mov    rdi,QWORD PTR [rsp+0x90]
   23200:	mov    DWORD PTR [rsp+0x18],r9d
   23205:	call   c310 <strlen@plt>
   2320a:	mov    rdi,QWORD PTR [rsp+0x90]
   23212:	mov    rcx,r14
   23215:	mov    esi,0x1
   2321a:	mov    rdx,rax
   2321d:	call   ca10 <fwrite@plt>
   23222:	mov    r8,QWORD PTR [rbx+0x10]
   23226:	mov    r9d,DWORD PTR [rsp+0x18]
   2322b:	jmp    2308a <read_response_body+0xaa>
   23230:	mov    r8d,0x15
   23236:	jmp    23160 <read_response_body+0x180>
   2323b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000023240 <release_header>:
   23240:	push   rbx
   23241:	mov    eax,DWORD PTR [rdi+0x10]
   23244:	mov    rbx,rdi
   23247:	cmp    eax,0x2
   2324a:	je     2326f <release_header+0x2f>
   2324c:	cmp    eax,0x3
   2324f:	je     23260 <release_header+0x20>
   23251:	cmp    eax,0x1
   23254:	je     23288 <release_header+0x48>
   23256:	pop    rbx
   23257:	ret    
   23258:	nop    DWORD PTR [rax+rax*1+0x0]
   23260:	mov    rdi,QWORD PTR [rdi]
   23263:	call   4bdc0 <rpl_free>
   23268:	mov    QWORD PTR [rbx],0x0
   2326f:	mov    rdi,QWORD PTR [rbx+0x8]
   23273:	call   4bdc0 <rpl_free>
   23278:	mov    QWORD PTR [rbx+0x8],0x0
   23280:	pop    rbx
   23281:	ret    
   23282:	nop    WORD PTR [rax+rax*1+0x0]
   23288:	mov    rdi,QWORD PTR [rdi]
   2328b:	call   4bdc0 <rpl_free>
   23290:	mov    QWORD PTR [rbx],0x0
   23297:	pop    rbx
   23298:	ret    
   23299:	nop    DWORD PTR [rax+0x0]

00000000000232a0 <request_free>:
   232a0:	push   r12
   232a2:	push   rbp
   232a3:	push   rbx
   232a4:	mov    rbp,QWORD PTR [rdi]
   232a7:	test   rbp,rbp
   232aa:	je     2330b <request_free+0x6b>
   232ac:	mov    r12,rdi
   232af:	mov    rdi,QWORD PTR [rbp+0x8]
   232b3:	call   4bdc0 <rpl_free>
   232b8:	mov    eax,DWORD PTR [rbp+0x18]
   232bb:	mov    QWORD PTR [rbp+0x8],0x0
   232c3:	test   eax,eax
   232c5:	jle    232ea <request_free+0x4a>
   232c7:	xor    ebx,ebx
   232c9:	nop    DWORD PTR [rax+0x0]
   232d0:	mov    rax,QWORD PTR [rbp+0x10]
   232d4:	lea    rdx,[rbx+rbx*2]
   232d8:	add    rbx,0x1
   232dc:	lea    rdi,[rax+rdx*8]
   232e0:	call   23240 <release_header>
   232e5:	cmp    DWORD PTR [rbp+0x18],ebx
   232e8:	jg     232d0 <request_free+0x30>
   232ea:	mov    rdi,QWORD PTR [rbp+0x10]
   232ee:	call   4bdc0 <rpl_free>
   232f3:	mov    QWORD PTR [rbp+0x10],0x0
   232fb:	mov    rdi,rbp
   232fe:	call   4bdc0 <rpl_free>
   23303:	mov    QWORD PTR [r12],0x0
   2330b:	pop    rbx
   2330c:	pop    rbp
   2330d:	pop    r12
   2330f:	ret    

0000000000023310 <invalidate_persistent>:
   23310:	sub    rsp,0x8
   23314:	cmp    BYTE PTR [rip+0x66fa0],0x0        # 8a2bb <opt+0x23b>
   2331b:	mov    edi,DWORD PTR [rip+0x6235f]        # 85680 <pconn>
   23321:	jne    23360 <invalidate_persistent+0x50>
   23323:	mov    BYTE PTR [rip+0x6237e],0x0        # 856a8 <pconn_active>
   2332a:	call   f400 <fd_close>
   2332f:	mov    rdi,QWORD PTR [rip+0x62352]        # 85688 <pconn+0x8>
   23336:	call   4bdc0 <rpl_free>
   2333b:	pxor   xmm0,xmm0
   2333f:	mov    QWORD PTR [rip+0x62356],0x0        # 856a0 <pconn+0x20>
   2334a:	movaps XMMWORD PTR [rip+0x6232f],xmm0        # 85680 <pconn>
   23351:	movaps XMMWORD PTR [rip+0x62338],xmm0        # 85690 <pconn+0x10>
   23358:	add    rsp,0x8
   2335c:	ret    
   2335d:	nop    DWORD PTR [rax]
   23360:	mov    esi,edi
   23362:	xor    eax,eax
   23364:	lea    rdi,[rip+0x434ad]        # 66818 <primes.6089+0x738>
   2336b:	call   2e250 <debug_logprintf>
   23370:	mov    edi,DWORD PTR [rip+0x6230a]        # 85680 <pconn>
   23376:	jmp    23323 <invalidate_persistent+0x13>
   23378:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000023380 <request_set_header.part.0>:
   23380:	push   r15
   23382:	push   r14
   23384:	push   r13
   23386:	push   r12
   23388:	mov    r12,rdi
   2338b:	push   rbp
   2338c:	push   rbx
   2338d:	mov    rbx,rsi
   23390:	sub    rsp,0x18
   23394:	movsxd r13,DWORD PTR [rdi+0x18]
   23398:	mov    r14,QWORD PTR [rdi+0x10]
   2339c:	mov    QWORD PTR [rsp],rdx
   233a0:	mov    DWORD PTR [rsp+0xc],ecx
   233a4:	test   r13d,r13d
   233a7:	jle    23408 <request_set_header.part.0+0x88>
   233a9:	lea    eax,[r13-0x1]
   233ad:	mov    r15,r14
   233b0:	lea    rax,[rax+rax*2]
   233b4:	lea    rbp,[r14+rax*8+0x18]
   233b9:	jmp    233c9 <request_set_header.part.0+0x49>
   233bb:	nop    DWORD PTR [rax+rax*1+0x0]
   233c0:	add    r15,0x18
   233c4:	cmp    r15,rbp
   233c7:	je     23408 <request_set_header.part.0+0x88>
   233c9:	mov    rsi,QWORD PTR [r15]
   233cc:	mov    rdi,rbx
   233cf:	call   43340 <c_strcasecmp>
   233d4:	test   eax,eax
   233d6:	jne    233c0 <request_set_header.part.0+0x40>
   233d8:	mov    rdi,r15
   233db:	call   23240 <release_header>
   233e0:	mov    rax,QWORD PTR [rsp]
   233e4:	mov    QWORD PTR [r15],rbx
   233e7:	mov    QWORD PTR [r15+0x8],rax
   233eb:	mov    eax,DWORD PTR [rsp+0xc]
   233ef:	mov    DWORD PTR [r15+0x10],eax
   233f3:	add    rsp,0x18
   233f7:	pop    rbx
   233f8:	pop    rbp
   233f9:	pop    r12
   233fb:	pop    r13
   233fd:	pop    r14
   233ff:	pop    r15
   23401:	ret    
   23402:	nop    WORD PTR [rax+rax*1+0x0]
   23408:	mov    eax,DWORD PTR [r12+0x1c]
   2340d:	cmp    r13d,eax
   23410:	jge    23448 <request_set_header.part.0+0xc8>
   23412:	lea    eax,[r13+0x1]
   23416:	mov    rdx,QWORD PTR [rsp]
   2341a:	mov    ecx,DWORD PTR [rsp+0xc]
   2341e:	mov    DWORD PTR [r12+0x18],eax
   23423:	lea    rax,[r13+r13*2+0x0]
   23428:	lea    rax,[r14+rax*8]
   2342c:	mov    QWORD PTR [rax],rbx
   2342f:	mov    QWORD PTR [rax+0x8],rdx
   23433:	mov    DWORD PTR [rax+0x10],ecx
   23436:	add    rsp,0x18
   2343a:	pop    rbx
   2343b:	pop    rbp
   2343c:	pop    r12
   2343e:	pop    r13
   23440:	pop    r14
   23442:	pop    r15
   23444:	ret    
   23445:	nop    DWORD PTR [rax]
   23448:	add    eax,eax
   2344a:	mov    rdi,r14
   2344d:	mov    DWORD PTR [r12+0x1c],eax
   23452:	cdqe   
   23454:	lea    rsi,[rax+rax*2]
   23458:	shl    rsi,0x3
   2345c:	call   4b870 <xrealloc>
   23461:	movsxd r13,DWORD PTR [r12+0x18]
   23466:	mov    QWORD PTR [r12+0x10],rax
   2346b:	mov    r14,rax
   2346e:	jmp    23412 <request_set_header.part.0+0x92>

0000000000023470 <ensure_extension.isra.0>:
   23470:	push   r15
   23472:	push   r14
   23474:	push   r13
   23476:	mov    r13,rdx
   23479:	push   r12
   2347b:	mov    r12,rdi
   2347e:	push   rbp
   2347f:	push   rbx
   23480:	mov    rbx,rsi
   23483:	mov    esi,0x2e
   23488:	sub    rsp,0x18
   2348c:	mov    r14,QWORD PTR [rdi]
   2348f:	mov    rax,QWORD PTR fs:0x28
   23498:	mov    QWORD PTR [rsp+0x8],rax
   2349d:	xor    eax,eax
   2349f:	mov    rdi,r14
   234a2:	call   c460 <strrchr@plt>
   234a7:	mov    rdi,rbx
   234aa:	mov    BYTE PTR [rsp],0x0
   234ae:	mov    rbp,rax
   234b1:	call   c310 <strlen@plt>
   234b6:	mov    r15,rax
   234b9:	cmp    eax,0x5
   234bc:	jne    234c8 <ensure_extension.isra.0+0x58>
   234be:	mov    eax,DWORD PTR [rbx]
   234c0:	mov    BYTE PTR [rsp+0x4],0x0
   234c5:	mov    DWORD PTR [rsp],eax
   234c8:	test   rbp,rbp
   234cb:	je     234f3 <ensure_extension.isra.0+0x83>
   234cd:	mov    rsi,rsp
   234d0:	mov    rdi,rbp
   234d3:	call   be10 <strcasecmp@plt>
   234d8:	test   eax,eax
   234da:	je     235b5 <ensure_extension.isra.0+0x145>
   234e0:	mov    rsi,rbx
   234e3:	mov    rdi,rbp
   234e6:	call   be10 <strcasecmp@plt>
   234eb:	test   eax,eax
   234ed:	je     235b5 <ensure_extension.isra.0+0x145>
   234f3:	mov    rdi,r14
   234f6:	call   c310 <strlen@plt>
   234fb:	mov    rdi,r14
   234fe:	lea    esi,[rax+r15*1+0x18]
   23503:	mov    rbp,rax
   23506:	movsxd rsi,esi
   23509:	movsxd rbp,ebp
   2350c:	call   4b870 <xrealloc>
   23511:	mov    rsi,rbx
   23514:	mov    QWORD PTR [r12],rax
   23518:	lea    rdi,[rax+rbp*1]
   2351c:	call   c830 <strcpy@plt>
   23521:	cmp    BYTE PTR [rip+0x66b8a],0x0        # 8a0b2 <opt+0x32>
   23528:	jne    235b0 <ensure_extension.isra.0+0x140>
   2352e:	cmp    BYTE PTR [rip+0x66cab],0x0        # 8a1e0 <opt+0x160>
   23535:	jne    235b0 <ensure_extension.isra.0+0x140>
   23537:	cmp    BYTE PTR [rip+0x66d7e],0x0        # 8a2bc <opt+0x23c>
   2353e:	jne    235b0 <ensure_extension.isra.0+0x140>
   23540:	cmp    BYTE PTR [rip+0x66b61],0x0        # 8a0a8 <opt+0x28>
   23547:	jne    235b0 <ensure_extension.isra.0+0x140>
   23549:	cmp    QWORD PTR [rip+0x66c2f],0x0        # 8a180 <opt+0x100>
   23551:	jne    235b0 <ensure_extension.isra.0+0x140>
   23553:	mov    eax,DWORD PTR [rip+0x66d67]        # 8a2c0 <opt+0x240>
   23559:	test   eax,eax
   2355b:	jg     235b0 <ensure_extension.isra.0+0x140>
   2355d:	mov    rdi,QWORD PTR [r12]
   23561:	xor    esi,esi
   23563:	call   3bed0 <file_exists_p>
   23568:	test   al,al
   2356a:	je     235b0 <ensure_extension.isra.0+0x140>
   2356c:	mov    r14d,0x1
   23572:	lea    r15,[rip+0x43e1e]        # 67397 <primes.6089+0x12b7>
   23579:	mov    rdi,QWORD PTR [r12]
   2357d:	mov    r8d,r14d
   23580:	mov    esi,0x1
   23585:	xor    eax,eax
   23587:	mov    r9,rbx
   2358a:	mov    rcx,r15
   2358d:	mov    rdx,0xffffffffffffffff
   23594:	add    r14d,0x1
   23598:	add    rdi,rbp
   2359b:	call   c950 <__sprintf_chk@plt>
   235a0:	mov    rdi,QWORD PTR [r12]
   235a4:	xor    esi,esi
   235a6:	call   3bed0 <file_exists_p>
   235ab:	test   al,al
   235ad:	jne    23579 <ensure_extension.isra.0+0x109>
   235af:	nop
   235b0:	or     DWORD PTR [r13+0x0],0x20
   235b5:	mov    rax,QWORD PTR [rsp+0x8]
   235ba:	xor    rax,QWORD PTR fs:0x28
   235c3:	jne    235d4 <ensure_extension.isra.0+0x164>
   235c5:	add    rsp,0x18
   235c9:	pop    rbx
   235ca:	pop    rbp
   235cb:	pop    r12
   235cd:	pop    r13
   235cf:	pop    r14
   235d1:	pop    r15
   235d3:	ret    
   235d4:	call   c7b0 <__stack_chk_fail@plt>
   235d9:	nop    DWORD PTR [rax+0x0]

00000000000235e0 <resp_status.isra.0>:
   235e0:	push   r12
   235e2:	push   rbx
   235e3:	mov    rbx,rsi
   235e6:	sub    rsp,0x8
   235ea:	test   rdi,rdi
   235ed:	je     237c0 <resp_status.isra.0+0x1e0>
   235f3:	mov    r8,QWORD PTR [rdi+0x8]
   235f7:	mov    rdx,QWORD PTR [rdi]
   235fa:	test   r8,r8
   235fd:	je     237f0 <resp_status.isra.0+0x210>
   23603:	mov    rax,r8
   23606:	sub    rax,rdx
   23609:	cmp    rax,0x3
   2360d:	jle    237f0 <resp_status.isra.0+0x210>
   23613:	mov    ecx,0x4
   23618:	lea    rdi,[rip+0x49946]        # 6cf65 <eta_str.8886+0x1ed>
   2361f:	mov    rsi,rdx
   23622:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   23624:	seta   al
   23627:	sbb    al,0x0
   23629:	test   al,al
   2362b:	jne    237f0 <resp_status.isra.0+0x210>
   23631:	lea    rdi,[rdx+0x4]
   23635:	cmp    r8,rdi
   23638:	jbe    23662 <resp_status.isra.0+0x82>
   2363a:	movzx  eax,BYTE PTR [rdx+0x4]
   2363e:	cmp    al,0x2f
   23640:	je     23700 <resp_status.isra.0+0x120>
   23646:	cmp    al,0xd
   23648:	jg     2365e <resp_status.isra.0+0x7e>
   2364a:	cmp    al,0x8
   2364c:	jle    23662 <resp_status.isra.0+0x82>
   2364e:	add    rdi,0x1
   23652:	cmp    r8,rdi
   23655:	jbe    23662 <resp_status.isra.0+0x82>
   23657:	movzx  eax,BYTE PTR [rdi]
   2365a:	cmp    al,0xd
   2365c:	jle    2364a <resp_status.isra.0+0x6a>
   2365e:	cmp    al,0x20
   23660:	je     2364e <resp_status.isra.0+0x6e>
   23662:	mov    rax,r8
   23665:	sub    rax,rdi
   23668:	cmp    rax,0x2
   2366c:	jle    237f0 <resp_status.isra.0+0x210>
   23672:	movsx  eax,BYTE PTR [rdi]
   23675:	mov    r12d,0xffffffff
   2367b:	lea    edx,[rax-0x30]
   2367e:	cmp    edx,0x9
   23681:	ja     236ed <resp_status.isra.0+0x10d>
   23683:	movsx  edx,BYTE PTR [rdi+0x1]
   23687:	lea    ecx,[rdx-0x30]
   2368a:	cmp    ecx,0x9
   2368d:	ja     236ed <resp_status.isra.0+0x10d>
   2368f:	movsx  esi,BYTE PTR [rdi+0x2]
   23693:	lea    ecx,[rsi-0x30]
   23696:	cmp    ecx,0x9
   23699:	ja     236ed <resp_status.isra.0+0x10d>
   2369b:	add    rdi,0x3
   2369f:	cmp    r8,rdi
   236a2:	jbe    236cd <resp_status.isra.0+0xed>
   236a4:	movzx  ecx,BYTE PTR [rdi]
   236a7:	cmp    cl,0xd
   236aa:	jg     23740 <resp_status.isra.0+0x160>
   236b0:	cmp    cl,0x8
   236b3:	jg     23749 <resp_status.isra.0+0x169>
   236b9:	cmp    r8,rdi
   236bc:	jbe    236cd <resp_status.isra.0+0xed>
   236be:	movzx  ecx,BYTE PTR [r8-0x1]
   236c3:	cmp    cl,0xd
   236c6:	jg     23730 <resp_status.isra.0+0x150>
   236c8:	cmp    cl,0x8
   236cb:	jg     23735 <resp_status.isra.0+0x155>
   236cd:	sub    eax,0x30
   236d0:	lea    edx,[rdx+rdx*4-0xf0]
   236d7:	imul   eax,eax,0x64
   236da:	lea    eax,[rax+rdx*2]
   236dd:	lea    r12d,[rax+rsi*1-0x30]
   236e2:	mov    rsi,r8
   236e5:	call   3b8a0 <strdupdelim>
   236ea:	mov    QWORD PTR [rbx],rax
   236ed:	add    rsp,0x8
   236f1:	mov    eax,r12d
   236f4:	pop    rbx
   236f5:	pop    r12
   236f7:	ret    
   236f8:	nop    DWORD PTR [rax+rax*1+0x0]
   23700:	lea    rdi,[rdx+0x5]
   23704:	cmp    r8,rdi
   23707:	jbe    23662 <resp_status.isra.0+0x82>
   2370d:	movsx  edx,BYTE PTR [rdi]
   23710:	mov    eax,edx
   23712:	sub    edx,0x30
   23715:	cmp    edx,0x9
   23718:	ja     23760 <resp_status.isra.0+0x180>
   2371a:	add    rdi,0x1
   2371e:	cmp    r8,rdi
   23721:	jne    2370d <resp_status.isra.0+0x12d>
   23723:	mov    rdi,r8
   23726:	jmp    23662 <resp_status.isra.0+0x82>
   2372b:	nop    DWORD PTR [rax+rax*1+0x0]
   23730:	cmp    cl,0x20
   23733:	jne    236cd <resp_status.isra.0+0xed>
   23735:	sub    r8,0x1
   23739:	cmp    r8,rdi
   2373c:	jne    236be <resp_status.isra.0+0xde>
   2373e:	jmp    236cd <resp_status.isra.0+0xed>
   23740:	cmp    cl,0x20
   23743:	jne    236b9 <resp_status.isra.0+0xd9>
   23749:	add    rdi,0x1
   2374d:	cmp    r8,rdi
   23750:	jne    236a4 <resp_status.isra.0+0xc4>
   23756:	mov    rdi,r8
   23759:	jmp    236cd <resp_status.isra.0+0xed>
   2375e:	xchg   ax,ax
   23760:	cmp    r8,rdi
   23763:	jbe    23662 <resp_status.isra.0+0x82>
   23769:	cmp    al,0x2e
   2376b:	je     23780 <resp_status.isra.0+0x1a0>
   2376d:	cmp    r8,rdi
   23770:	ja     23646 <resp_status.isra.0+0x66>
   23776:	jmp    23662 <resp_status.isra.0+0x82>
   2377b:	nop    DWORD PTR [rax+rax*1+0x0]
   23780:	lea    rdx,[rdi+0x1]
   23784:	cmp    r8,rdx
   23787:	jbe    237fb <resp_status.isra.0+0x21b>
   23789:	movzx  eax,BYTE PTR [rdi+0x1]
   2378d:	mov    rdi,rdx
   23790:	movsx  edx,al
   23793:	sub    edx,0x30
   23796:	cmp    edx,0x9
   23799:	ja     2376d <resp_status.isra.0+0x18d>
   2379b:	add    rdi,0x1
   2379f:	cmp    r8,rdi
   237a2:	jbe    23662 <resp_status.isra.0+0x82>
   237a8:	movzx  eax,BYTE PTR [rdi]
   237ab:	movsx  edx,al
   237ae:	sub    edx,0x30
   237b1:	cmp    edx,0x9
   237b4:	jbe    2379b <resp_status.isra.0+0x1bb>
   237b6:	jmp    2376d <resp_status.isra.0+0x18d>
   237b8:	nop    DWORD PTR [rax+rax*1+0x0]
   237c0:	mov    edx,0x5
   237c5:	lea    rsi,[rip+0x43bd1]        # 6739d <primes.6089+0x12bd>
   237cc:	mov    r12d,0xc8
   237d2:	call   c780 <dcgettext@plt>
   237d7:	mov    rdi,rax
   237da:	call   4ba50 <xstrdup>
   237df:	mov    QWORD PTR [rbx],rax
   237e2:	jmp    236ed <resp_status.isra.0+0x10d>
   237e7:	nop    WORD PTR [rax+rax*1+0x0]
   237f0:	mov    r12d,0xffffffff
   237f6:	jmp    236ed <resp_status.isra.0+0x10d>
   237fb:	mov    rdi,rdx
   237fe:	jmp    23662 <resp_status.isra.0+0x82>
   23803:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2380e:	xchg   ax,ax

0000000000023810 <resp_header_locate.isra.0>:
   23810:	push   r15
   23812:	push   r14
   23814:	push   r13
   23816:	push   r12
   23818:	push   rbp
   23819:	push   rbx
   2381a:	sub    rsp,0x28
   2381e:	mov    QWORD PTR [rsp+0x10],rcx
   23823:	mov    QWORD PTR [rsp+0x18],r8
   23828:	test   rdi,rdi
   2382b:	je     23910 <resp_header_locate.isra.0+0x100>
   23831:	cmp    QWORD PTR [rdi+0x8],0x0
   23836:	mov    rbx,rdi
   23839:	je     23910 <resp_header_locate.isra.0+0x100>
   2383f:	mov    r14d,edx
   23842:	mov    rdi,rsi
   23845:	mov    r13,rsi
   23848:	call   c310 <strlen@plt>
   2384d:	test   r14d,r14d
   23850:	mov    r8d,0x1
   23856:	cmovle r14d,r8d
   2385a:	movsxd rsi,r14d
   2385d:	add    rsi,0x1
   23861:	mov    rbp,QWORD PTR [rbx+rsi*8]
   23865:	lea    rdi,[rsi*8+0x0]
   2386d:	test   rbp,rbp
   23870:	je     23910 <resp_header_locate.isra.0+0x100>
   23876:	movsxd rcx,eax
   23879:	lea    rbx,[rbx+rdi*1-0x8]
   2387e:	mov    r15,rcx
   23881:	jmp    23899 <resp_header_locate.isra.0+0x89>
   23883:	nop    DWORD PTR [rax+rax*1+0x0]
   23888:	mov    rbp,QWORD PTR [rbx+0x10]
   2388c:	add    rbx,0x8
   23890:	add    r14d,0x1
   23894:	test   rbp,rbp
   23897:	je     23910 <resp_header_locate.isra.0+0x100>
   23899:	mov    r12,QWORD PTR [rbx]
   2389c:	mov    rax,rbp
   2389f:	sub    rax,r12
   238a2:	cmp    rax,rcx
   238a5:	jle    23888 <resp_header_locate.isra.0+0x78>
   238a7:	cmp    BYTE PTR [r12+r15*1],0x3a
   238ac:	jne    23888 <resp_header_locate.isra.0+0x78>
   238ae:	mov    rdx,r15
   238b1:	mov    rsi,r13
   238b4:	mov    rdi,r12
   238b7:	mov    QWORD PTR [rsp+0x8],rcx
   238bc:	call   433b0 <c_strncasecmp>
   238c1:	mov    rcx,QWORD PTR [rsp+0x8]
   238c6:	test   eax,eax
   238c8:	jne    23888 <resp_header_locate.isra.0+0x78>
   238ca:	lea    rax,[r12+r15*1+0x1]
   238cf:	cmp    rax,rbp
   238d2:	jae    238f4 <resp_header_locate.isra.0+0xe4>
   238d4:	movzx  edx,BYTE PTR [rax]
   238d7:	cmp    dl,0xd
   238da:	jg     23940 <resp_header_locate.isra.0+0x130>
   238dc:	cmp    dl,0x8
   238df:	jg     23945 <resp_header_locate.isra.0+0x135>
   238e1:	cmp    rax,rbp
   238e4:	jae    238f4 <resp_header_locate.isra.0+0xe4>
   238e6:	movzx  edx,BYTE PTR [rbp-0x1]
   238ea:	cmp    dl,0xd
   238ed:	jg     23928 <resp_header_locate.isra.0+0x118>
   238ef:	cmp    dl,0x8
   238f2:	jg     2392d <resp_header_locate.isra.0+0x11d>
   238f4:	mov    rdi,QWORD PTR [rsp+0x10]
   238f9:	mov    QWORD PTR [rdi],rax
   238fc:	mov    rax,QWORD PTR [rsp+0x18]
   23901:	mov    QWORD PTR [rax],rbp
   23904:	jmp    23916 <resp_header_locate.isra.0+0x106>
   23906:	nop    WORD PTR cs:[rax+rax*1+0x0]
   23910:	mov    r14d,0xffffffff
   23916:	add    rsp,0x28
   2391a:	mov    eax,r14d
   2391d:	pop    rbx
   2391e:	pop    rbp
   2391f:	pop    r12
   23921:	pop    r13
   23923:	pop    r14
   23925:	pop    r15
   23927:	ret    
   23928:	cmp    dl,0x20
   2392b:	jne    238f4 <resp_header_locate.isra.0+0xe4>
   2392d:	sub    rbp,0x1
   23931:	cmp    rbp,rax
   23934:	jne    238e6 <resp_header_locate.isra.0+0xd6>
   23936:	jmp    238f4 <resp_header_locate.isra.0+0xe4>
   23938:	nop    DWORD PTR [rax+rax*1+0x0]
   23940:	cmp    dl,0x20
   23943:	jne    238e1 <resp_header_locate.isra.0+0xd1>
   23945:	add    rax,0x1
   23949:	cmp    rax,rbp
   2394c:	jne    238d4 <resp_header_locate.isra.0+0xc4>
   2394e:	jmp    238f4 <resp_header_locate.isra.0+0xe4>

0000000000023950 <resp_header_strdup>:
   23950:	sub    rsp,0x28
   23954:	mov    rdi,QWORD PTR [rdi+0x8]
   23958:	xor    edx,edx
   2395a:	mov    rax,QWORD PTR fs:0x28
   23963:	mov    QWORD PTR [rsp+0x18],rax
   23968:	xor    eax,eax
   2396a:	lea    rcx,[rsp+0x8]
   2396f:	lea    r8,[rsp+0x10]
   23974:	call   23810 <resp_header_locate.isra.0>
   23979:	cmp    eax,0xffffffff
   2397c:	je     239a8 <resp_header_strdup+0x58>
   2397e:	mov    rsi,QWORD PTR [rsp+0x10]
   23983:	mov    rdi,QWORD PTR [rsp+0x8]
   23988:	call   3b8a0 <strdupdelim>
   2398d:	mov    rdx,QWORD PTR [rsp+0x18]
   23992:	xor    rdx,QWORD PTR fs:0x28
   2399b:	jne    239ac <resp_header_strdup+0x5c>
   2399d:	add    rsp,0x28
   239a1:	ret    
   239a2:	nop    WORD PTR [rax+rax*1+0x0]
   239a8:	xor    eax,eax
   239aa:	jmp    2398d <resp_header_strdup+0x3d>
   239ac:	call   c7b0 <__stack_chk_fail@plt>
   239b1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   239bc:	nop    DWORD PTR [rax+0x0]

00000000000239c0 <resp_header_copy>:
   239c0:	push   r12
   239c2:	xor    r12d,r12d
   239c5:	push   rbp
   239c6:	mov    rbp,rdx
   239c9:	xor    edx,edx
   239cb:	push   rbx
   239cc:	mov    ebx,ecx
   239ce:	sub    rsp,0x20
   239d2:	mov    rdi,QWORD PTR [rdi+0x8]
   239d6:	mov    rax,QWORD PTR fs:0x28
   239df:	mov    QWORD PTR [rsp+0x18],rax
   239e4:	xor    eax,eax
   239e6:	lea    rcx,[rsp+0x8]
   239eb:	lea    r8,[rsp+0x10]
   239f0:	call   23810 <resp_header_locate.isra.0>
   239f5:	cmp    eax,0xffffffff
   239f8:	je     23a04 <resp_header_copy+0x44>
   239fa:	mov    r12d,0x1
   23a00:	test   ebx,ebx
   23a02:	jne    23a20 <resp_header_copy+0x60>
   23a04:	mov    rax,QWORD PTR [rsp+0x18]
   23a09:	xor    rax,QWORD PTR fs:0x28
   23a12:	jne    23a4f <resp_header_copy+0x8f>
   23a14:	add    rsp,0x20
   23a18:	mov    eax,r12d
   23a1b:	pop    rbx
   23a1c:	pop    rbp
   23a1d:	pop    r12
   23a1f:	ret    
   23a20:	mov    rsi,QWORD PTR [rsp+0x8]
   23a25:	mov    rax,QWORD PTR [rsp+0x10]
   23a2a:	sub    ebx,0x1
   23a2d:	mov    rdi,rbp
   23a30:	movsxd rbx,ebx
   23a33:	sub    rax,rsi
   23a36:	cmp    rax,rbx
   23a39:	cmovle rbx,rax
   23a3d:	movsxd rbx,ebx
   23a40:	mov    rdx,rbx
   23a43:	call   cb30 <memcpy@plt>
   23a48:	mov    BYTE PTR [rbp+rbx*1+0x0],0x0
   23a4d:	jmp    23a04 <resp_header_copy+0x44>
   23a4f:	call   c7b0 <__stack_chk_fail@plt>
   23a54:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   23a5f:	nop

0000000000023a60 <establish_connection>:
   23a60:	push   r15
   23a62:	push   r14
   23a64:	push   r13
   23a66:	push   r12
   23a68:	mov    r12,r9
   23a6b:	push   rbp
   23a6c:	mov    rbp,rsi
   23a6f:	push   rbx
   23a70:	mov    rbx,rdi
   23a73:	sub    rsp,0x98
   23a7a:	mov    r14,QWORD PTR [rsi]
   23a7d:	mov    rax,QWORD PTR [rsp+0xd0]
   23a85:	mov    QWORD PTR [rsp+0x28],rdx
   23a8a:	mov    QWORD PTR [rsp+0x10],rcx
   23a8f:	mov    r13,QWORD PTR [rsp+0xe0]
   23a97:	mov    QWORD PTR [rsp+0x20],r8
   23a9c:	mov    QWORD PTR [rsp+0x18],rax
   23aa1:	mov    rax,QWORD PTR fs:0x28
   23aaa:	mov    QWORD PTR [rsp+0x88],rax
   23ab2:	xor    eax,eax
   23ab4:	mov    rax,QWORD PTR [r9]
   23ab7:	cmp    BYTE PTR [rsp+0xd8],0x0
   23abf:	mov    QWORD PTR [rsp+0x8],rax
   23ac4:	jne    23bb0 <establish_connection+0x150>
   23aca:	mov    r15d,DWORD PTR [rdi+0x8]
   23ace:	mov    rcx,rdi
   23ad1:	cmp    r15d,0x1
   23ad5:	je     23ade <establish_connection+0x7e>
   23ad7:	mov    r15d,DWORD PTR [r14+0x8]
   23adb:	mov    rcx,r14
   23ade:	cmp    BYTE PTR [rip+0x61bc3],0x0        # 856a8 <pconn_active>
   23ae5:	je     23b30 <establish_connection+0xd0>
   23ae7:	cmp    r15d,0x1
   23aeb:	sete   al
   23aee:	cmp    al,BYTE PTR [rip+0x61ba0]        # 85694 <pconn+0x14>
   23af4:	jne    23b30 <establish_connection+0xd0>
   23af6:	mov    eax,DWORD PTR [rip+0x61b94]        # 85690 <pconn+0x10>
   23afc:	cmp    DWORD PTR [rcx+0x18],eax
   23aff:	jne    23b30 <establish_connection+0xd0>
   23b01:	mov    r8,QWORD PTR [rcx+0x10]
   23b05:	mov    rsi,QWORD PTR [rip+0x61b7c]        # 85688 <pconn+0x8>
   23b0c:	mov    QWORD PTR [rsp+0x38],rcx
   23b11:	mov    rdi,r8
   23b14:	mov    QWORD PTR [rsp+0x30],r8
   23b19:	call   be10 <strcasecmp@plt>
   23b1e:	test   eax,eax
   23b20:	je     23e9d <establish_connection+0x43d>
   23b26:	cmp    r15d,0x1
   23b2a:	jne    23e30 <establish_connection+0x3d0>
   23b30:	mov    esi,DWORD PTR [r14+0x18]
   23b34:	mov    rdi,QWORD PTR [r14+0x10]
   23b38:	call   fa40 <connect_to_host>
   23b3d:	mov    r15d,eax
   23b40:	mov    eax,0x1
   23b45:	cmp    r15d,0xffffff9c
   23b49:	je     23b83 <establish_connection+0x123>
   23b4b:	test   r15d,r15d
   23b4e:	js     23c00 <establish_connection+0x1a0>
   23b54:	cmp    QWORD PTR [rsp+0x10],0x0
   23b5a:	je     23b66 <establish_connection+0x106>
   23b5c:	cmp    DWORD PTR [rbx+0x8],0x1
   23b60:	je     23c20 <establish_connection+0x1c0>
   23b66:	cmp    DWORD PTR [r14+0x8],0x1
   23b6b:	je     23bc0 <establish_connection+0x160>
   23b6d:	mov    rax,QWORD PTR [rsp+0x8]
   23b72:	mov    QWORD PTR [rbp+0x0],r14
   23b76:	mov    QWORD PTR [r12],rax
   23b7a:	mov    eax,0x19
   23b7f:	mov    DWORD PTR [r13+0x0],r15d
   23b83:	mov    rbx,QWORD PTR [rsp+0x88]
   23b8b:	xor    rbx,QWORD PTR fs:0x28
   23b94:	jne    24319 <establish_connection+0x8b9>
   23b9a:	add    rsp,0x98
   23ba1:	pop    rbx
   23ba2:	pop    rbp
   23ba3:	pop    r12
   23ba5:	pop    r13
   23ba7:	pop    r14
   23ba9:	pop    r15
   23bab:	ret    
   23bac:	nop    DWORD PTR [rax+0x0]
   23bb0:	mov    r15d,DWORD PTR [r13+0x0]
   23bb4:	test   r15d,r15d
   23bb7:	js     23b30 <establish_connection+0xd0>
   23bbd:	jmp    23b6d <establish_connection+0x10d>
   23bbf:	nop
   23bc0:	mov    rsi,QWORD PTR [rbx+0x10]
   23bc4:	xor    edx,edx
   23bc6:	mov    edi,r15d
   23bc9:	call   416c0 <ssl_connect_wget>
   23bce:	test   al,al
   23bd0:	je     240e0 <establish_connection+0x680>
   23bd6:	mov    rsi,QWORD PTR [rbx+0x10]
   23bda:	mov    edi,r15d
   23bdd:	call   41a80 <ssl_check_certificate>
   23be2:	test   al,al
   23be4:	je     23ff0 <establish_connection+0x590>
   23bea:	mov    rax,QWORD PTR [rsp+0x18]
   23bef:	mov    BYTE PTR [rax],0x1
   23bf2:	jmp    23b6d <establish_connection+0x10d>
   23bf7:	nop    WORD PTR [rax+rax*1+0x0]
   23c00:	call   c740 <__errno_location@plt>
   23c05:	mov    edi,DWORD PTR [rax]
   23c07:	call   eea0 <retryable_socket_connect_error>
   23c0c:	cmp    al,0x1
   23c0e:	sbb    eax,eax
   23c10:	and    eax,0x2
   23c13:	add    eax,0x3
   23c16:	jmp    23b83 <establish_connection+0x123>
   23c1b:	nop    DWORD PTR [rax+rax*1+0x0]
   23c20:	mov    edx,DWORD PTR [rbx+0x18]
   23c23:	mov    rsi,QWORD PTR [rbx+0x10]
   23c27:	lea    rdi,[rip+0x4222b]        # 65e59 <yy_accept+0xd99>
   23c2e:	xor    eax,eax
   23c30:	call   3ba30 <aprintf>
   23c35:	mov    esi,0x20
   23c3a:	mov    edi,0x1
   23c3f:	mov    QWORD PTR [rsp+0x10],rax
   23c44:	call   4b9c0 <xcalloc>
   23c49:	mov    edi,0xc0
   23c4e:	mov    DWORD PTR [rax+0x1c],0x8
   23c55:	mov    r14,rax
   23c58:	call   4b850 <xmalloc>
   23c5d:	mov    rdx,QWORD PTR [rsp+0x10]
   23c62:	mov    QWORD PTR [rsp+0x68],r14
   23c67:	mov    QWORD PTR [r14+0x10],rax
   23c6b:	lea    rax,[rip+0x4375b]        # 673cd <primes.6089+0x12ed>
   23c72:	mov    QWORD PTR [r14+0x8],rdx
   23c76:	mov    rdx,QWORD PTR [rip+0x6664b]        # 8a2c8 <opt+0x248>
   23c7d:	mov    QWORD PTR [r14],rax
   23c80:	test   rdx,rdx
   23c83:	je     24018 <establish_connection+0x5b8>
   23c89:	cmp    BYTE PTR [rdx],0x0
   23c8c:	jne    24180 <establish_connection+0x720>
   23c92:	mov    rax,QWORD PTR [rsp+0x20]
   23c97:	mov    rdx,QWORD PTR [rax]
   23c9a:	test   rdx,rdx
   23c9d:	je     23cb3 <establish_connection+0x253>
   23c9f:	mov    ecx,0x2
   23ca4:	lea    rsi,[rip+0x4373d]        # 673e8 <primes.6089+0x1308>
   23cab:	mov    rdi,r14
   23cae:	call   23380 <request_set_header.part.0>
   23cb3:	mov    rax,QWORD PTR [rsp+0x20]
   23cb8:	mov    edx,DWORD PTR [rbx+0x18]
   23cbb:	lea    rdi,[rip+0x42197]        # 65e59 <yy_accept+0xd99>
   23cc2:	mov    QWORD PTR [rax],0x0
   23cc9:	mov    rsi,QWORD PTR [rbx+0x10]
   23ccd:	xor    eax,eax
   23ccf:	call   3ba30 <aprintf>
   23cd4:	mov    rdi,QWORD PTR [rsp+0x68]
   23cd9:	mov    rdx,rax
   23cdc:	test   rax,rax
   23cdf:	je     23cf7 <establish_connection+0x297>
   23ce1:	mov    ecx,0x2
   23ce6:	lea    rsi,[rip+0x4370f]        # 673fc <primes.6089+0x131c>
   23ced:	call   23380 <request_set_header.part.0>
   23cf2:	mov    rdi,QWORD PTR [rsp+0x68]
   23cf7:	xor    edx,edx
   23cf9:	mov    esi,r15d
   23cfc:	call   22740 <request_send>
   23d01:	lea    rdi,[rsp+0x68]
   23d06:	mov    r14d,eax
   23d09:	call   232a0 <request_free>
   23d0e:	test   r14d,r14d
   23d11:	js     24128 <establish_connection+0x6c8>
   23d17:	mov    ecx,0x10000
   23d1c:	mov    edx,0x200
   23d21:	lea    rsi,[rip+0xffffffffffffefa8]        # 22cd0 <response_head_terminator>
   23d28:	mov    edi,r15d
   23d2b:	call   344f0 <fd_read_hunk>
   23d30:	mov    r14,rax
   23d33:	test   rax,rax
   23d36:	je     24285 <establish_connection+0x825>
   23d3c:	mov    QWORD PTR [rsp+0x60],0x0
   23d45:	cmp    BYTE PTR [rax],0x0
   23d48:	je     24278 <establish_connection+0x818>
   23d4e:	cmp    BYTE PTR [rip+0x66566],0x0        # 8a2bb <opt+0x23b>
   23d55:	jne    242f4 <establish_connection+0x894>
   23d5b:	mov    rdi,r14
   23d5e:	call   22b30 <resp_new>
   23d63:	lea    rsi,[rsp+0x60]
   23d68:	mov    rdi,QWORD PTR [rax+0x8]
   23d6c:	mov    QWORD PTR [rsp+0x58],rax
   23d71:	call   235e0 <resp_status.isra.0>
   23d76:	test   eax,eax
   23d78:	js     241ca <establish_connection+0x76a>
   23d7e:	mov    DWORD PTR [rsp+0x10],eax
   23d82:	mov    rax,QWORD PTR [rsp+0x28]
   23d87:	mov    rdi,QWORD PTR [rax+0x48]
   23d8b:	call   4bdc0 <rpl_free>
   23d90:	mov    rax,QWORD PTR [rsp+0x28]
   23d95:	mov    rdi,QWORD PTR [rsp+0x60]
   23d9a:	mov    QWORD PTR [rax+0x48],0x0
   23da2:	call   4ba50 <xstrdup>
   23da7:	mov    rdx,QWORD PTR [rsp+0x28]
   23dac:	lea    rdi,[rsp+0x58]
   23db1:	mov    QWORD PTR [rdx+0x48],rax
   23db5:	call   22570 <resp_free>
   23dba:	mov    rdi,r14
   23dbd:	call   4bdc0 <rpl_free>
   23dc2:	mov    ecx,DWORD PTR [rsp+0x10]
   23dc6:	cmp    ecx,0xc8
   23dcc:	je     24257 <establish_connection+0x7f7>
   23dd2:	mov    rsi,QWORD PTR [rsp+0x60]
   23dd7:	lea    r12,[rip+0x435dd]        # 673bb <primes.6089+0x12db>
   23dde:	test   rsi,rsi
   23de1:	je     23df0 <establish_connection+0x390>
   23de3:	mov    edi,0x7
   23de8:	call   4b2b0 <quotearg_style>
   23ded:	mov    r12,rax
   23df0:	mov    edx,0x5
   23df5:	lea    rsi,[rip+0x43649]        # 67445 <primes.6089+0x1365>
   23dfc:	xor    edi,edi
   23dfe:	call   c780 <dcgettext@plt>
   23e03:	mov    rdx,r12
   23e06:	mov    edi,0x1
   23e0b:	mov    rsi,rax
   23e0e:	xor    eax,eax
   23e10:	call   2e0a0 <logprintf>
   23e15:	mov    rdi,QWORD PTR [rsp+0x60]
   23e1a:	call   4bdc0 <rpl_free>
   23e1f:	mov    eax,0x4
   23e24:	jmp    23b83 <establish_connection+0x123>
   23e29:	nop    DWORD PTR [rax+0x0]
   23e30:	mov    edi,DWORD PTR [rip+0x6184a]        # 85680 <pconn>
   23e36:	lea    r15,[rsp+0x70]
   23e3b:	mov    edx,0x1
   23e40:	mov    rsi,r15
   23e43:	call   ecd0 <socket_ip_address>
   23e48:	mov    r8,QWORD PTR [rsp+0x30]
   23e4d:	mov    rcx,QWORD PTR [rsp+0x38]
   23e52:	test   al,al
   23e54:	je     24170 <establish_connection+0x710>
   23e5a:	xor    esi,esi
   23e5c:	mov    rdi,r8
   23e5f:	mov    QWORD PTR [rsp+0x30],rcx
   23e64:	call   1e670 <lookup_host>
   23e69:	mov    rcx,QWORD PTR [rsp+0x30]
   23e6e:	test   rax,rax
   23e71:	mov    rdi,rax
   23e74:	je     2405c <establish_connection+0x5fc>
   23e7a:	mov    rsi,r15
   23e7d:	mov    QWORD PTR [rsp+0x30],rax
   23e82:	call   1e2a0 <address_list_contains>
   23e87:	mov    rdi,QWORD PTR [rsp+0x30]
   23e8c:	mov    r15d,eax
   23e8f:	call   1e410 <address_list_release>
   23e94:	test   r15b,r15b
   23e97:	je     23b30 <establish_connection+0xd0>
   23e9d:	mov    edi,DWORD PTR [rip+0x617dd]        # 85680 <pconn>
   23ea3:	call   ef00 <test_socket_open>
   23ea8:	test   al,al
   23eaa:	je     24170 <establish_connection+0x710>
   23eb0:	mov    edi,DWORD PTR [rip+0x617ca]        # 85680 <pconn>
   23eb6:	mov    esi,0x1
   23ebb:	call   ee00 <socket_family>
   23ec0:	movzx  edx,BYTE PTR [rip+0x617cd]        # 85694 <pconn+0x14>
   23ec7:	mov    rcx,QWORD PTR [rsp+0x18]
   23ecc:	mov    r15d,DWORD PTR [rip+0x617ad]        # 85680 <pconn>
   23ed3:	mov    BYTE PTR [rcx],dl
   23ed5:	cmp    eax,0xa
   23ed8:	je     240a8 <establish_connection+0x648>
   23ede:	mov    ecx,DWORD PTR [rip+0x617ac]        # 85690 <pconn+0x10>
   23ee4:	mov    rsi,QWORD PTR [rip+0x6179d]        # 85688 <pconn+0x8>
   23eeb:	mov    edi,0x7
   23ef0:	mov    DWORD PTR [rsp+0x38],ecx
   23ef4:	call   4b2b0 <quotearg_style>
   23ef9:	mov    edx,0x5
   23efe:	lea    rsi,[rip+0x4296b]        # 66870 <primes.6089+0x790>
   23f05:	mov    QWORD PTR [rsp+0x30],rax
   23f0a:	xor    edi,edi
   23f0c:	call   c780 <dcgettext@plt>
   23f11:	mov    r8,QWORD PTR [rsp+0x30]
   23f16:	mov    ecx,DWORD PTR [rsp+0x38]
   23f1a:	xor    edi,edi
   23f1c:	mov    rsi,rax
   23f1f:	xor    eax,eax
   23f21:	mov    rdx,r8
   23f24:	call   2e0a0 <logprintf>
   23f29:	cmp    BYTE PTR [rip+0x6638b],0x0        # 8a2bb <opt+0x23b>
   23f30:	jne    24150 <establish_connection+0x6f0>
   23f36:	cmp    BYTE PTR [rip+0x61758],0x0        # 85695 <pconn+0x15>
   23f3d:	je     23bb4 <establish_connection+0x154>
   23f43:	mov    rax,QWORD PTR [rsp+0x8]
   23f48:	mov    r10,QWORD PTR [rax+0x10]
   23f4c:	mov    eax,DWORD PTR [rax+0x18]
   23f4f:	test   eax,eax
   23f51:	jle    23bb4 <establish_connection+0x154>
   23f57:	xor    edx,edx
   23f59:	mov    DWORD PTR [rsp+0x30],r15d
   23f5e:	mov    r15d,eax
   23f61:	mov    QWORD PTR [rsp+0x38],rbx
   23f66:	mov    ebx,edx
   23f68:	mov    QWORD PTR [rsp+0x40],rbp
   23f6d:	mov    rbp,r10
   23f70:	jmp    23f88 <establish_connection+0x528>
   23f72:	nop    WORD PTR [rax+rax*1+0x0]
   23f78:	add    ebx,0x1
   23f7b:	add    rbp,0x18
   23f7f:	cmp    r15d,ebx
   23f82:	je     24110 <establish_connection+0x6b0>
   23f88:	mov    rsi,QWORD PTR [rbp+0x0]
   23f8c:	lea    rdi,[rip+0x4345b]        # 673ee <primes.6089+0x130e>
   23f93:	call   43340 <c_strcasecmp>
   23f98:	test   eax,eax
   23f9a:	jne    23f78 <establish_connection+0x518>
   23f9c:	mov    r10,rbp
   23f9f:	mov    DWORD PTR [rsp+0x4c],ebx
   23fa3:	mov    r15d,DWORD PTR [rsp+0x30]
   23fa8:	mov    rdi,r10
   23fab:	mov    QWORD PTR [rsp+0x30],r10
   23fb0:	mov    rbx,QWORD PTR [rsp+0x38]
   23fb5:	mov    rbp,QWORD PTR [rsp+0x40]
   23fba:	call   23240 <release_header>
   23fbf:	mov    rax,QWORD PTR [rsp+0x8]
   23fc4:	mov    edx,DWORD PTR [rsp+0x4c]
   23fc8:	mov    r10,QWORD PTR [rsp+0x30]
   23fcd:	mov    eax,DWORD PTR [rax+0x18]
   23fd0:	lea    ecx,[rax-0x1]
   23fd3:	cmp    ecx,edx
   23fd5:	jg     2419b <establish_connection+0x73b>
   23fdb:	mov    rax,QWORD PTR [rsp+0x8]
   23fe0:	mov    DWORD PTR [rax+0x18],ecx
   23fe3:	jmp    23bb4 <establish_connection+0x154>
   23fe8:	nop    DWORD PTR [rax+rax*1+0x0]
   23ff0:	cmp    BYTE PTR [rip+0x616b1],0x0        # 856a8 <pconn_active>
   23ff7:	je     24006 <establish_connection+0x5a6>
   23ff9:	cmp    DWORD PTR [rip+0x61680],r15d        # 85680 <pconn>
   24000:	je     242e5 <establish_connection+0x885>
   24006:	mov    edi,r15d
   24009:	call   f400 <fd_close>
   2400e:	mov    eax,0x2e
   24013:	jmp    23b83 <establish_connection+0x123>
   24018:	mov    rsi,QWORD PTR [rip+0x5d3a1]        # 813c0 <version_string>
   2401f:	lea    rdi,[rip+0x433af]        # 673d5 <primes.6089+0x12f5>
   24026:	xor    eax,eax
   24028:	call   3ba30 <aprintf>
   2402d:	mov    r14,QWORD PTR [rsp+0x68]
   24032:	mov    rdx,rax
   24035:	test   rax,rax
   24038:	je     23c92 <establish_connection+0x232>
   2403e:	mov    rdi,r14
   24041:	mov    ecx,0x2
   24046:	lea    rsi,[rip+0x43390]        # 673dd <primes.6089+0x12fd>
   2404d:	call   23380 <request_set_header.part.0>
   24052:	mov    r14,QWORD PTR [rsp+0x68]
   24057:	jmp    23c92 <establish_connection+0x232>
   2405c:	mov    rdi,QWORD PTR [rcx+0x10]
   24060:	call   4b5b0 <quote>
   24065:	mov    r13,QWORD PTR [rip+0x663b4]        # 8a420 <exec_name>
   2406c:	mov    edx,0x5
   24071:	xor    edi,edi
   24073:	lea    rsi,[rip+0x37066]        # 5b0e0 <_IO_stdin_used+0xe0>
   2407a:	mov    r12,rax
   2407d:	call   c780 <dcgettext@plt>
   24082:	mov    rcx,r12
   24085:	mov    rdx,r13
   24088:	mov    edi,0x1
   2408d:	mov    rsi,rax
   24090:	xor    eax,eax
   24092:	call   2e0a0 <logprintf>
   24097:	mov    eax,0x1
   2409c:	jmp    23b83 <establish_connection+0x123>
   240a1:	nop    DWORD PTR [rax+0x0]
   240a8:	mov    ecx,DWORD PTR [rip+0x615e2]        # 85690 <pconn+0x10>
   240ae:	mov    rsi,QWORD PTR [rip+0x615d3]        # 85688 <pconn+0x8>
   240b5:	mov    edi,0x7
   240ba:	mov    DWORD PTR [rsp+0x38],ecx
   240be:	call   4b2b0 <quotearg_style>
   240c3:	mov    edx,0x5
   240c8:	lea    rsi,[rip+0x42771]        # 66840 <primes.6089+0x760>
   240cf:	mov    QWORD PTR [rsp+0x30],rax
   240d4:	jmp    23f0a <establish_connection+0x4aa>
   240d9:	nop    DWORD PTR [rax+0x0]
   240e0:	cmp    BYTE PTR [rip+0x615c1],0x0        # 856a8 <pconn_active>
   240e7:	je     240f6 <establish_connection+0x696>
   240e9:	cmp    DWORD PTR [rip+0x61590],r15d        # 85680 <pconn>
   240f0:	je     24269 <establish_connection+0x809>
   240f6:	mov    edi,r15d
   240f9:	call   f400 <fd_close>
   240fe:	mov    eax,0x4
   24103:	jmp    23b83 <establish_connection+0x123>
   24108:	nop    DWORD PTR [rax+rax*1+0x0]
   24110:	mov    r15d,DWORD PTR [rsp+0x30]
   24115:	mov    rbx,QWORD PTR [rsp+0x38]
   2411a:	mov    rbp,QWORD PTR [rsp+0x40]
   2411f:	jmp    23bb4 <establish_connection+0x154>
   24124:	nop    DWORD PTR [rax+0x0]
   24128:	cmp    BYTE PTR [rip+0x61579],0x0        # 856a8 <pconn_active>
   2412f:	je     2413e <establish_connection+0x6de>
   24131:	cmp    DWORD PTR [rip+0x61548],r15d        # 85680 <pconn>
   24138:	je     242d6 <establish_connection+0x876>
   2413e:	mov    edi,r15d
   24141:	call   f400 <fd_close>
   24146:	mov    eax,0x2c
   2414b:	jmp    23b83 <establish_connection+0x123>
   24150:	mov    esi,r15d
   24153:	lea    rdi,[rip+0x43263]        # 673bd <primes.6089+0x12dd>
   2415a:	xor    eax,eax
   2415c:	call   2e250 <debug_logprintf>
   24161:	jmp    23f36 <establish_connection+0x4d6>
   24166:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24170:	call   23310 <invalidate_persistent>
   24175:	jmp    23b30 <establish_connection+0xd0>
   2417a:	nop    WORD PTR [rax+rax*1+0x0]
   24180:	mov    rdi,r14
   24183:	xor    ecx,ecx
   24185:	lea    rsi,[rip+0x43251]        # 673dd <primes.6089+0x12fd>
   2418c:	call   23380 <request_set_header.part.0>
   24191:	mov    r14,QWORD PTR [rsp+0x68]
   24196:	jmp    23c92 <establish_connection+0x232>
   2419b:	sub    eax,edx
   2419d:	lea    rsi,[r10+0x18]
   241a1:	mov    rdi,r10
   241a4:	sub    eax,0x1
   241a7:	cdqe   
   241a9:	lea    rdx,[rax+rax*2]
   241ad:	shl    rdx,0x3
   241b1:	call   c6b0 <memmove@plt>
   241b6:	mov    rax,QWORD PTR [rsp+0x8]
   241bb:	mov    eax,DWORD PTR [rax+0x18]
   241be:	mov    DWORD PTR [rsp+0x30],eax
   241c2:	lea    ecx,[rax-0x1]
   241c5:	jmp    23fdb <establish_connection+0x57b>
   241ca:	xor    edi,edi
   241cc:	mov    DWORD PTR [rsp+0x8],eax
   241d0:	call   cbf0 <time@plt>
   241d5:	mov    rdi,rax
   241d8:	call   3bd30 <datetime_str>
   241dd:	mov    ecx,DWORD PTR [rsp+0x8]
   241e1:	lea    rsi,[rip+0x4a9a4]        # 6eb8c <CSWTCH.5+0x34c>
   241e8:	xor    edi,edi
   241ea:	mov    r12,rax
   241ed:	xor    eax,eax
   241ef:	mov    edx,ecx
   241f1:	call   2e0a0 <logprintf>
   241f6:	mov    edx,0x5
   241fb:	lea    rsi,[rip+0x4321b]        # 6741d <primes.6089+0x133d>
   24202:	xor    edi,edi
   24204:	call   c780 <dcgettext@plt>
   24209:	mov    edi,0x7
   2420e:	mov    rsi,rax
   24211:	call   4b2b0 <quotearg_style>
   24216:	mov    edx,0x5
   2421b:	lea    rsi,[rip+0x43211]        # 67433 <primes.6089+0x1353>
   24222:	xor    edi,edi
   24224:	mov    rbx,rax
   24227:	call   c780 <dcgettext@plt>
   2422c:	mov    ecx,DWORD PTR [rsp+0x8]
   24230:	mov    r8,rbx
   24233:	mov    rdx,r12
   24236:	mov    rsi,rax
   24239:	mov    edi,0x1
   2423e:	xor    eax,eax
   24240:	call   2e0a0 <logprintf>
   24245:	mov    rdi,r14
   24248:	call   4bdc0 <rpl_free>
   2424d:	mov    eax,0x18
   24252:	jmp    23b83 <establish_connection+0x123>
   24257:	mov    rdi,QWORD PTR [rsp+0x60]
   2425c:	mov    r14,rbx
   2425f:	call   4bdc0 <rpl_free>
   24264:	jmp    23b66 <establish_connection+0x106>
   24269:	call   23310 <invalidate_persistent>
   2426e:	mov    eax,0x4
   24273:	jmp    23b83 <establish_connection+0x123>
   24278:	mov    rdi,rax
   2427b:	call   4bdc0 <rpl_free>
   24280:	jmp    23dd2 <establish_connection+0x372>
   24285:	mov    edi,r15d
   24288:	call   f3b0 <fd_errstr>
   2428d:	xor    edi,edi
   2428f:	mov    edx,0x5
   24294:	lea    rsi,[rip+0x425fd]        # 66898 <primes.6089+0x7b8>
   2429b:	mov    r12,rax
   2429e:	call   c780 <dcgettext@plt>
   242a3:	xor    edi,edi
   242a5:	mov    rdx,r12
   242a8:	mov    rsi,rax
   242ab:	xor    eax,eax
   242ad:	call   2e0a0 <logprintf>
   242b2:	cmp    BYTE PTR [rip+0x613ef],0x0        # 856a8 <pconn_active>
   242b9:	je     242c4 <establish_connection+0x864>
   242bb:	cmp    DWORD PTR [rip+0x613be],r15d        # 85680 <pconn>
   242c2:	je     2430a <establish_connection+0x8aa>
   242c4:	mov    edi,r15d
   242c7:	call   f400 <fd_close>
   242cc:	mov    eax,0x18
   242d1:	jmp    23b83 <establish_connection+0x123>
   242d6:	call   23310 <invalidate_persistent>
   242db:	mov    eax,0x2c
   242e0:	jmp    23b83 <establish_connection+0x123>
   242e5:	call   23310 <invalidate_persistent>
   242ea:	mov    eax,0x2e
   242ef:	jmp    23b83 <establish_connection+0x123>
   242f4:	mov    rsi,rax
   242f7:	lea    rdi,[rip+0x43103]        # 67401 <primes.6089+0x1321>
   242fe:	xor    eax,eax
   24300:	call   2e250 <debug_logprintf>
   24305:	jmp    23d5b <establish_connection+0x2fb>
   2430a:	call   23310 <invalidate_persistent>
   2430f:	mov    eax,0x18
   24314:	jmp    23b83 <establish_connection+0x123>
   24319:	call   c7b0 <__stack_chk_fail@plt>
   2431e:	xchg   ax,ax

0000000000024320 <initialize_request>:
   24320:	push   r15
   24322:	push   r14
   24324:	push   r13
   24326:	lea    r13,[rip+0x43133]        # 67460 <primes.6089+0x1380>
   2432d:	push   r12
   2432f:	mov    r12,rdx
   24332:	push   rbp
   24333:	mov    rbp,rsi
   24336:	push   rbx
   24337:	mov    rbx,rdi
   2433a:	sub    rsp,0x88
   24341:	mov    rax,QWORD PTR [rsp+0xc0]
   24349:	mov    QWORD PTR [rsp+0x8],rcx
   2434e:	mov    DWORD PTR [rsp+0x14],r8d
   24353:	mov    r15,QWORD PTR [rsp+0xc8]
   2435b:	mov    QWORD PTR [rsp+0x28],rax
   24360:	mov    rax,QWORD PTR [rsp+0xd8]
   24368:	mov    QWORD PTR [rsp+0x30],r9
   2436d:	mov    r14,QWORD PTR [rsp+0xd0]
   24375:	mov    QWORD PTR [rsp+0x38],rax
   2437a:	mov    rax,QWORD PTR fs:0x28
   24383:	mov    QWORD PTR [rsp+0x78],rax
   24388:	xor    eax,eax
   2438a:	test   BYTE PTR [rdx],0x4
   2438d:	jne    243a4 <initialize_request+0x84>
   2438f:	mov    r13,QWORD PTR [rip+0x66002]        # 8a398 <opt+0x318>
   24396:	lea    rax,[rip+0x430c8]        # 67465 <primes.6089+0x1385>
   2439d:	test   r13,r13
   243a0:	cmove  r13,rax
   243a4:	cmp    QWORD PTR [rsp+0x8],0x0
   243aa:	je     243b6 <initialize_request+0x96>
   243ac:	cmp    DWORD PTR [rbx+0x8],0x1
   243b0:	jne    246f0 <initialize_request+0x3d0>
   243b6:	mov    rdi,rbx
   243b9:	call   37490 <url_full_path>
   243be:	mov    QWORD PTR [rsp+0x20],rax
   243c3:	mov    esi,0x20
   243c8:	mov    edi,0x1
   243cd:	call   4b9c0 <xcalloc>
   243d2:	mov    edi,0xc0
   243d7:	mov    DWORD PTR [rax+0x1c],0x8
   243de:	mov    QWORD PTR [rsp+0x18],rax
   243e3:	call   4b850 <xmalloc>
   243e8:	mov    r8,QWORD PTR [rsp+0x18]
   243ed:	mov    rdx,QWORD PTR [rbp+0x60]
   243f1:	mov    QWORD PTR [r8+0x10],rax
   243f5:	mov    rax,QWORD PTR [rsp+0x20]
   243fa:	mov    QWORD PTR [r8],r13
   243fd:	mov    QWORD PTR [r8+0x8],rax
   24401:	mov    QWORD PTR [rsp+0x40],r8
   24406:	test   rdx,rdx
   24409:	je     2441c <initialize_request+0xfc>
   2440b:	xor    ecx,ecx
   2440d:	lea    rsi,[rip+0x43055]        # 67469 <primes.6089+0x1389>
   24414:	mov    rdi,r8
   24417:	call   23380 <request_set_header.part.0>
   2441c:	mov    eax,DWORD PTR [r12]
   24420:	test   al,0x8
   24422:	jne    24708 <initialize_request+0x3e8>
   24428:	test   al,0x80
   2442a:	jne    24748 <initialize_request+0x428>
   24430:	mov    rdi,QWORD PTR [rbp+0x10]
   24434:	test   rdi,rdi
   24437:	jne    247fd <initialize_request+0x4dd>
   2443d:	mov    rdx,QWORD PTR [rip+0x65e84]        # 8a2c8 <opt+0x248>
   24444:	test   rdx,rdx
   24447:	je     24845 <initialize_request+0x525>
   2444d:	cmp    BYTE PTR [rdx],0x0
   24450:	mov    rdi,QWORD PTR [rsp+0x40]
   24455:	jne    24970 <initialize_request+0x650>
   2445b:	xor    ecx,ecx
   2445d:	lea    rdx,[rip+0x43047]        # 674ab <primes.6089+0x13cb>
   24464:	lea    rsi,[rip+0x43044]        # 674af <primes.6089+0x13cf>
   2446b:	call   23380 <request_set_header.part.0>
   24470:	mov    rdi,QWORD PTR [rsp+0x40]
   24475:	xor    ecx,ecx
   24477:	lea    rdx,[rip+0x43038]        # 674b6 <primes.6089+0x13d6>
   2447e:	lea    rsi,[rip+0x4303a]        # 674bf <primes.6089+0x13df>
   24485:	call   23380 <request_set_header.part.0>
   2448a:	mov    rax,QWORD PTR [rbx+0x50]
   2448e:	test   rax,rax
   24491:	je     24930 <initialize_request+0x610>
   24497:	mov    QWORD PTR [r15],rax
   2449a:	mov    rax,QWORD PTR [rbx+0x58]
   2449e:	test   rax,rax
   244a1:	je     248f0 <initialize_request+0x5d0>
   244a7:	mov    QWORD PTR [r14],rax
   244aa:	cmp    BYTE PTR [rip+0x65d4f],0x0        # 8a200 <opt+0x180>
   244b1:	mov    r12,QWORD PTR [r15]
   244b4:	je     246af <initialize_request+0x38f>
   244ba:	test   r12,r12
   244bd:	je     24698 <initialize_request+0x378>
   244c3:	mov    r13,QWORD PTR [r14]
   244c6:	test   r13,r13
   244c9:	je     24698 <initialize_request+0x378>
   244cf:	cmp    QWORD PTR [rbx+0x50],0x0
   244d4:	movzx  eax,BYTE PTR [rip+0x65eea]        # 8a3c5 <opt+0x345>
   244db:	je     24a10 <initialize_request+0x6f0>
   244e1:	test   al,al
   244e3:	je     2452e <initialize_request+0x20e>
   244e5:	mov    rbp,QWORD PTR [rsp+0x40]
   244ea:	cmp    BYTE PTR [rip+0x65dca],0x0        # 8a2bb <opt+0x23b>
   244f1:	jne    24b88 <initialize_request+0x868>
   244f7:	mov    rsi,r13
   244fa:	mov    rdi,r12
   244fd:	call   229a0 <basic_authentication_encode>
   24502:	mov    rdx,rax
   24505:	test   rax,rax
   24508:	je     24b78 <initialize_request+0x858>
   2450e:	mov    ecx,0x2
   24513:	lea    rsi,[rip+0x42ed4]        # 673ee <primes.6089+0x130e>
   2451a:	mov    rdi,rbp
   2451d:	call   23380 <request_set_header.part.0>
   24522:	mov    eax,0x1
   24527:	mov    rcx,QWORD PTR [rsp+0x30]
   2452c:	mov    BYTE PTR [rcx],al
   2452e:	mov    edi,DWORD PTR [rbx+0x8]
   24531:	mov    r12d,DWORD PTR [rbx+0x18]
   24535:	call   37290 <scheme_default_port>
   2453a:	mov    r13,QWORD PTR [rbx+0x10]
   2453e:	mov    esi,0x3a
   24543:	mov    ebp,eax
   24545:	mov    rdi,r13
   24548:	call   c6c0 <strchr@plt>
   2454d:	mov    edx,DWORD PTR [rbx+0x18]
   24550:	mov    rsi,r13
   24553:	test   rax,rax
   24556:	setne  al
   24559:	xor    ecx,ecx
   2455b:	cmp    r12d,ebp
   2455e:	setne  cl
   24561:	movzx  eax,al
   24564:	lea    rcx,[rax+rcx*2]
   24568:	lea    rax,[rip+0x58971]        # 7cee0 <hfmt.9315>
   2456f:	mov    rdi,QWORD PTR [rax+rcx*8]
   24573:	xor    eax,eax
   24575:	call   3ba30 <aprintf>
   2457a:	mov    rdi,QWORD PTR [rsp+0x40]
   2457f:	mov    rdx,rax
   24582:	test   rax,rax
   24585:	je     2459d <initialize_request+0x27d>
   24587:	mov    ecx,0x2
   2458c:	lea    rsi,[rip+0x42e69]        # 673fc <primes.6089+0x131c>
   24593:	call   23380 <request_set_header.part.0>
   24598:	mov    rdi,QWORD PTR [rsp+0x40]
   2459d:	xor    ecx,ecx
   2459f:	cmp    BYTE PTR [rsp+0x14],0x0
   245a4:	jne    246d0 <initialize_request+0x3b0>
   245aa:	lea    rdx,[rip+0x42f24]        # 674d5 <primes.6089+0x13f5>
   245b1:	lea    rsi,[rip+0x42f2e]        # 674e6 <primes.6089+0x1406>
   245b8:	call   23380 <request_set_header.part.0>
   245bd:	cmp    QWORD PTR [rsp+0x8],0x0
   245c3:	je     245df <initialize_request+0x2bf>
   245c5:	mov    rdi,QWORD PTR [rsp+0x40]
   245ca:	xor    ecx,ecx
   245cc:	lea    rdx,[rip+0x42f02]        # 674d5 <primes.6089+0x13f5>
   245d3:	lea    rsi,[rip+0x42f06]        # 674e0 <primes.6089+0x1400>
   245da:	call   23380 <request_set_header.part.0>
   245df:	mov    r12,QWORD PTR [rip+0x65db2]        # 8a398 <opt+0x318>
   245e6:	mov    rbp,QWORD PTR [rsp+0x40]
   245eb:	test   r12,r12
   245ee:	je     2466c <initialize_request+0x34c>
   245f0:	cmp    QWORD PTR [rip+0x65da8],0x0        # 8a3a0 <opt+0x320>
   245f8:	je     24890 <initialize_request+0x570>
   245fe:	mov    rdi,rbp
   24601:	xor    ecx,ecx
   24603:	lea    rdx,[rip+0x423fe]        # 66a08 <primes.6089+0x928>
   2460a:	lea    rsi,[rip+0x42ee0]        # 674f1 <primes.6089+0x1411>
   24611:	call   23380 <request_set_header.part.0>
   24616:	mov    rbp,QWORD PTR [rip+0x65d83]        # 8a3a0 <opt+0x320>
   2461d:	test   rbp,rbp
   24620:	je     24aa0 <initialize_request+0x780>
   24626:	mov    rdi,rbp
   24629:	call   c310 <strlen@plt>
   2462e:	mov    rdi,rax
   24631:	mov    rax,QWORD PTR [rsp+0x28]
   24636:	mov    QWORD PTR [rax],rdi
   24639:	call   3e8e0 <number_to_static_string>
   2463e:	mov    rdi,rax
   24641:	call   4ba50 <xstrdup>
   24646:	mov    rbp,QWORD PTR [rsp+0x40]
   2464b:	mov    rdx,rax
   2464e:	test   rax,rax
   24651:	je     2466c <initialize_request+0x34c>
   24653:	mov    rdi,rbp
   24656:	mov    ecx,0x2
   2465b:	lea    rsi,[rip+0x42e9c]        # 674fe <primes.6089+0x141e>
   24662:	call   23380 <request_set_header.part.0>
   24667:	mov    rbp,QWORD PTR [rsp+0x40]
   2466c:	mov    rax,QWORD PTR [rsp+0x78]
   24671:	xor    rax,QWORD PTR fs:0x28
   2467a:	jne    24bbc <initialize_request+0x89c>
   24680:	add    rsp,0x88
   24687:	mov    rax,rbp
   2468a:	pop    rbx
   2468b:	pop    rbp
   2468c:	pop    r12
   2468e:	pop    r13
   24690:	pop    r14
   24692:	pop    r15
   24694:	ret    
   24695:	nop    DWORD PTR [rax]
   24698:	mov    rdi,QWORD PTR [rbx+0x10]
   2469c:	xor    r8d,r8d
   2469f:	xor    ecx,ecx
   246a1:	mov    rdx,r14
   246a4:	mov    rsi,r15
   246a7:	call   2f6b0 <search_netrc>
   246ac:	mov    r12,QWORD PTR [r15]
   246af:	test   r12,r12
   246b2:	je     2452e <initialize_request+0x20e>
   246b8:	mov    r13,QWORD PTR [r14]
   246bb:	test   r13,r13
   246be:	je     2452e <initialize_request+0x20e>
   246c4:	jmp    244cf <initialize_request+0x1af>
   246c9:	nop    DWORD PTR [rax+0x0]
   246d0:	lea    rdx,[rip+0x42df8]        # 674cf <primes.6089+0x13ef>
   246d7:	lea    rsi,[rip+0x42e08]        # 674e6 <primes.6089+0x1406>
   246de:	call   23380 <request_set_header.part.0>
   246e3:	jmp    245df <initialize_request+0x2bf>
   246e8:	nop    DWORD PTR [rax+rax*1+0x0]
   246f0:	mov    rdi,QWORD PTR [rbx]
   246f3:	call   4ba50 <xstrdup>
   246f8:	mov    QWORD PTR [rsp+0x20],rax
   246fd:	jmp    243c3 <initialize_request+0xa3>
   24702:	nop    WORD PTR [rax+rax*1+0x0]
   24708:	mov    rdi,QWORD PTR [rsp+0x40]
   2470d:	xor    ecx,ecx
   2470f:	lea    rdx,[rip+0x42d5b]        # 67471 <primes.6089+0x1391>
   24716:	lea    rsi,[rip+0x42d5d]        # 6747a <primes.6089+0x139a>
   2471d:	call   23380 <request_set_header.part.0>
   24722:	mov    rdi,QWORD PTR [rsp+0x40]
   24727:	xor    ecx,ecx
   24729:	lea    rdx,[rip+0x42d41]        # 67471 <primes.6089+0x1391>
   24730:	lea    rsi,[rip+0x42d51]        # 67488 <primes.6089+0x13a8>
   24737:	call   23380 <request_set_header.part.0>
   2473c:	mov    eax,DWORD PTR [r12]
   24740:	test   al,0x80
   24742:	je     24430 <initialize_request+0x110>
   24748:	mov    rax,QWORD PTR [rbp+0x88]
   2474f:	lea    rdi,[rsp+0x48]
   24754:	mov    QWORD PTR [rsp+0x48],rax
   24759:	call   c180 <gmtime@plt>
   2475e:	test   rax,rax
   24761:	je     24990 <initialize_request+0x670>
   24767:	mov    edx,DWORD PTR [rax]
   24769:	movsxd rcx,DWORD PTR [rax+0x18]
   2476d:	lea    r12,[rsp+0x50]
   24772:	lea    r8,[rip+0x421cf]        # 66948 <primes.6089+0x868>
   24779:	mov    rdi,r12
   2477c:	push   rdx
   2477d:	mov    edx,DWORD PTR [rax+0x4]
   24780:	push   rdx
   24781:	mov    edx,DWORD PTR [rax+0x8]
   24784:	push   rdx
   24785:	mov    esi,DWORD PTR [rax+0x14]
   24788:	lea    edx,[rsi+0x76c]
   2478e:	push   rdx
   2478f:	movsxd rsi,DWORD PTR [rax+0x10]
   24793:	lea    rdx,[rip+0x586e6]        # 7ce80 <month.9294>
   2479a:	mov    eax,DWORD PTR [rax+0xc]
   2479d:	push   QWORD PTR [rdx+rsi*8]
   247a0:	mov    edx,0x1
   247a5:	mov    esi,0x20
   247aa:	push   rax
   247ab:	lea    rax,[rip+0x5868e]        # 7ce40 <wkday.9293>
   247b2:	mov    r9,QWORD PTR [rax+rcx*8]
   247b6:	mov    ecx,0x20
   247bb:	xor    eax,eax
   247bd:	call   c9d0 <__snprintf_chk@plt>
   247c2:	add    rsp,0x30
   247c6:	mov    rdi,r12
   247c9:	call   4ba50 <xstrdup>
   247ce:	mov    rdx,rax
   247d1:	test   rax,rax
   247d4:	je     24430 <initialize_request+0x110>
   247da:	mov    rdi,QWORD PTR [rsp+0x40]
   247df:	mov    ecx,0x2
   247e4:	lea    rsi,[rip+0x42ca4]        # 6748f <primes.6089+0x13af>
   247eb:	call   23380 <request_set_header.part.0>
   247f0:	mov    rdi,QWORD PTR [rbp+0x10]
   247f4:	test   rdi,rdi
   247f7:	je     2443d <initialize_request+0x11d>
   247fd:	call   3e8e0 <number_to_static_string>
   24802:	lea    rdi,[rip+0x42c98]        # 674a1 <primes.6089+0x13c1>
   24809:	mov    rsi,rax
   2480c:	xor    eax,eax
   2480e:	call   3ba30 <aprintf>
   24813:	mov    rdx,rax
   24816:	test   rax,rax
   24819:	je     2443d <initialize_request+0x11d>
   2481f:	mov    rdi,QWORD PTR [rsp+0x40]
   24824:	mov    ecx,0x2
   24829:	lea    rsi,[rip+0x42f49]        # 67779 <primes.6089+0x1699>
   24830:	call   23380 <request_set_header.part.0>
   24835:	mov    rdx,QWORD PTR [rip+0x65a8c]        # 8a2c8 <opt+0x248>
   2483c:	test   rdx,rdx
   2483f:	jne    2444d <initialize_request+0x12d>
   24845:	mov    rsi,QWORD PTR [rip+0x5cb74]        # 813c0 <version_string>
   2484c:	lea    rdi,[rip+0x42b82]        # 673d5 <primes.6089+0x12f5>
   24853:	xor    eax,eax
   24855:	call   3ba30 <aprintf>
   2485a:	mov    rdi,QWORD PTR [rsp+0x40]
   2485f:	mov    rdx,rax
   24862:	test   rax,rax
   24865:	je     2445b <initialize_request+0x13b>
   2486b:	mov    ecx,0x2
   24870:	lea    rsi,[rip+0x42b66]        # 673dd <primes.6089+0x12fd>
   24877:	call   23380 <request_set_header.part.0>
   2487c:	mov    rdi,QWORD PTR [rsp+0x40]
   24881:	jmp    2445b <initialize_request+0x13b>
   24886:	nop    WORD PTR cs:[rax+rax*1+0x0]
   24890:	cmp    QWORD PTR [rip+0x65b10],0x0        # 8a3a8 <opt+0x328>
   24898:	jne    245fe <initialize_request+0x2de>
   2489e:	lea    rsi,[rip+0x42c68]        # 6750d <primes.6089+0x142d>
   248a5:	mov    rdi,r12
   248a8:	call   43340 <c_strcasecmp>
   248ad:	test   eax,eax
   248af:	je     248c8 <initialize_request+0x5a8>
   248b1:	lea    rsi,[rip+0x41e00]        # 666b8 <primes.6089+0x5d8>
   248b8:	mov    rdi,r12
   248bb:	call   43340 <c_strcasecmp>
   248c0:	test   eax,eax
   248c2:	jne    24b58 <initialize_request+0x838>
   248c8:	mov    rdi,rbp
   248cb:	xor    ecx,ecx
   248cd:	lea    rdx,[rip+0x4a2f8]        # 6ebcc <CSWTCH.5+0x38c>
   248d4:	lea    rsi,[rip+0x42c23]        # 674fe <primes.6089+0x141e>
   248db:	call   23380 <request_set_header.part.0>
   248e0:	mov    rbp,QWORD PTR [rsp+0x40]
   248e5:	jmp    2466c <initialize_request+0x34c>
   248ea:	nop    WORD PTR [rax+rax*1+0x0]
   248f0:	mov    rax,QWORD PTR [rip+0x658d1]        # 8a1c8 <opt+0x148>
   248f7:	test   rax,rax
   248fa:	je     24b28 <initialize_request+0x808>
   24900:	cmp    QWORD PTR [rip+0x658d0],0x0        # 8a1d8 <opt+0x158>
   24908:	jne    244a7 <initialize_request+0x187>
   2490e:	cmp    BYTE PTR [rip+0x658bb],0x0        # 8a1d0 <opt+0x150>
   24915:	jne    244a7 <initialize_request+0x187>
   2491b:	mov    rdx,QWORD PTR [rip+0x658ee]        # 8a210 <opt+0x190>
   24922:	test   rdx,rdx
   24925:	je     244a7 <initialize_request+0x187>
   2492b:	jmp    24b34 <initialize_request+0x814>
   24930:	mov    rax,QWORD PTR [rip+0x65889]        # 8a1c0 <opt+0x140>
   24937:	test   rax,rax
   2493a:	je     24b40 <initialize_request+0x820>
   24940:	cmp    QWORD PTR [rip+0x65890],0x0        # 8a1d8 <opt+0x158>
   24948:	jne    24497 <initialize_request+0x177>
   2494e:	cmp    BYTE PTR [rip+0x6587b],0x0        # 8a1d0 <opt+0x150>
   24955:	jne    24497 <initialize_request+0x177>
   2495b:	mov    rdx,QWORD PTR [rip+0x658a6]        # 8a208 <opt+0x188>
   24962:	test   rdx,rdx
   24965:	je     24497 <initialize_request+0x177>
   2496b:	jmp    24b4c <initialize_request+0x82c>
   24970:	xor    ecx,ecx
   24972:	lea    rsi,[rip+0x42a64]        # 673dd <primes.6089+0x12fd>
   24979:	call   23380 <request_set_header.part.0>
   2497e:	mov    rdi,QWORD PTR [rsp+0x40]
   24983:	jmp    2445b <initialize_request+0x13b>
   24988:	nop    DWORD PTR [rax+rax*1+0x0]
   24990:	mov    edx,0x5
   24995:	lea    rsi,[rip+0x41f24]        # 668c0 <primes.6089+0x7e0>
   2499c:	xor    edi,edi
   2499e:	call   c780 <dcgettext@plt>
   249a3:	mov    edi,0x1
   249a8:	lea    r12,[rsp+0x50]
   249ad:	mov    rsi,rax
   249b0:	xor    eax,eax
   249b2:	call   2e0a0 <logprintf>
   249b7:	mov    edx,0x5
   249bc:	lea    rsi,[rip+0x41f25]        # 668e8 <primes.6089+0x808>
   249c3:	xor    edi,edi
   249c5:	call   c780 <dcgettext@plt>
   249ca:	xor    edi,edi
   249cc:	mov    rsi,rax
   249cf:	call   2de60 <logputs>
   249d4:	movdqa xmm0,XMMWORD PTR [rip+0x43154]        # 67b30 <primes.6089+0x1a50>
   249dc:	movabs rax,0x303a30303a303020
   249e6:	mov    DWORD PTR [rsp+0x68],0x4d472030
   249ee:	mov    QWORD PTR [rsp+0x60],rax
   249f3:	mov    eax,0x54
   249f8:	mov    WORD PTR [rsp+0x6c],ax
   249fd:	movaps XMMWORD PTR [rsp+0x50],xmm0
   24a02:	jmp    247c6 <initialize_request+0x4a6>
   24a07:	nop    WORD PTR [rax+rax*1+0x0]
   24a10:	mov    rbp,QWORD PTR [rsp+0x40]
   24a15:	mov    r14,QWORD PTR [rbx+0x10]
   24a19:	test   al,al
   24a1b:	jne    244ea <initialize_request+0x1ca>
   24a21:	mov    rdi,QWORD PTR [rip+0x60c88]        # 856b0 <basic_authed_hosts>
   24a28:	test   rdi,rdi
   24a2b:	je     24a68 <initialize_request+0x748>
   24a2d:	mov    rsi,r14
   24a30:	call   1dbf0 <hash_table_contains>
   24a35:	test   eax,eax
   24a37:	je     24a68 <initialize_request+0x748>
   24a39:	cmp    BYTE PTR [rip+0x6587b],0x0        # 8a2bb <opt+0x23b>
   24a40:	je     244f7 <initialize_request+0x1d7>
   24a46:	mov    rdi,r14
   24a49:	call   4b5b0 <quote>
   24a4e:	lea    rdi,[rip+0x41f53]        # 669a8 <primes.6089+0x8c8>
   24a55:	mov    rsi,rax
   24a58:	xor    eax,eax
   24a5a:	call   2e250 <debug_logprintf>
   24a5f:	jmp    244f7 <initialize_request+0x1d7>
   24a64:	nop    DWORD PTR [rax+0x0]
   24a68:	movzx  eax,BYTE PTR [rip+0x6584c]        # 8a2bb <opt+0x23b>
   24a6f:	test   al,al
   24a71:	je     24527 <initialize_request+0x207>
   24a77:	mov    rdi,r14
   24a7a:	call   4b5b0 <quote>
   24a7f:	lea    rdi,[rip+0x41f4a]        # 669d0 <primes.6089+0x8f0>
   24a86:	mov    rsi,rax
   24a89:	xor    eax,eax
   24a8b:	call   2e250 <debug_logprintf>
   24a90:	xor    eax,eax
   24a92:	jmp    24527 <initialize_request+0x207>
   24a97:	nop    WORD PTR [rax+rax*1+0x0]
   24aa0:	mov    rdi,QWORD PTR [rip+0x65901]        # 8a3a8 <opt+0x328>
   24aa7:	call   3bf60 <file_size>
   24aac:	mov    rdi,rax
   24aaf:	mov    rax,QWORD PTR [rsp+0x28]
   24ab4:	mov    QWORD PTR [rax],rdi
   24ab7:	cmp    rdi,0xffffffffffffffff
   24abb:	jne    24639 <initialize_request+0x319>
   24ac1:	call   c740 <__errno_location@plt>
   24ac6:	mov    edi,DWORD PTR [rax]
   24ac8:	call   c540 <strerror@plt>
   24acd:	mov    rdi,QWORD PTR [rip+0x658d4]        # 8a3a8 <opt+0x328>
   24ad4:	mov    r13,rax
   24ad7:	call   4b5b0 <quote>
   24adc:	mov    edx,0x5
   24ae1:	lea    rsi,[rip+0x41f48]        # 66a30 <primes.6089+0x950>
   24ae8:	xor    edi,edi
   24aea:	mov    r12,rax
   24aed:	call   c780 <dcgettext@plt>
   24af2:	mov    rcx,r13
   24af5:	mov    rdx,r12
   24af8:	mov    edi,0x1
   24afd:	mov    rsi,rax
   24b00:	xor    eax,eax
   24b02:	call   2e0a0 <logprintf>
   24b07:	lea    rdi,[rsp+0x40]
   24b0c:	call   232a0 <request_free>
   24b11:	mov    rax,QWORD PTR [rsp+0x38]
   24b16:	mov    DWORD PTR [rax],0x26
   24b1c:	jmp    2466c <initialize_request+0x34c>
   24b21:	nop    DWORD PTR [rax+0x0]
   24b28:	mov    rdx,QWORD PTR [rip+0x656e1]        # 8a210 <opt+0x190>
   24b2f:	test   rdx,rdx
   24b32:	je     24bb0 <initialize_request+0x890>
   24b34:	mov    QWORD PTR [r14],rdx
   24b37:	jmp    244aa <initialize_request+0x18a>
   24b3c:	nop    DWORD PTR [rax+0x0]
   24b40:	mov    rdx,QWORD PTR [rip+0x656c1]        # 8a208 <opt+0x188>
   24b47:	test   rdx,rdx
   24b4a:	je     24ba0 <initialize_request+0x880>
   24b4c:	mov    QWORD PTR [r15],rdx
   24b4f:	jmp    2449a <initialize_request+0x17a>
   24b54:	nop    DWORD PTR [rax+0x0]
   24b58:	lea    rsi,[rip+0x429b3]        # 67512 <primes.6089+0x1432>
   24b5f:	mov    rdi,r12
   24b62:	call   43340 <c_strcasecmp>
   24b67:	test   eax,eax
   24b69:	jne    2466c <initialize_request+0x34c>
   24b6f:	jmp    248c8 <initialize_request+0x5a8>
   24b74:	nop    DWORD PTR [rax+0x0]
   24b78:	mov    eax,0x1
   24b7d:	jmp    24527 <initialize_request+0x207>
   24b82:	nop    WORD PTR [rax+rax*1+0x0]
   24b88:	lea    rdi,[rip+0x41de1]        # 66970 <primes.6089+0x890>
   24b8f:	xor    eax,eax
   24b91:	call   2e250 <debug_logprintf>
   24b96:	jmp    244f7 <initialize_request+0x1d7>
   24b9b:	nop    DWORD PTR [rax+rax*1+0x0]
   24ba0:	mov    QWORD PTR [r15],0x0
   24ba7:	jmp    2449a <initialize_request+0x17a>
   24bac:	nop    DWORD PTR [rax+0x0]
   24bb0:	mov    QWORD PTR [r14],0x0
   24bb7:	jmp    244aa <initialize_request+0x18a>
   24bbc:	call   c7b0 <__stack_chk_fail@plt>
   24bc1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   24bcc:	nop    DWORD PTR [rax+0x0]

0000000000024bd0 <extract_param>:
   24bd0:	endbr64 
   24bd4:	push   r15
   24bd6:	push   r14
   24bd8:	push   r13
   24bda:	push   r12
   24bdc:	mov    r12,r8
   24bdf:	mov    r8d,ecx
   24be2:	push   rbp
   24be3:	mov    rbp,rdx
   24be6:	push   rbx
   24be7:	mov    rbx,rsi
   24bea:	sub    rsp,0x18
   24bee:	mov    rdx,QWORD PTR [rdi]
   24bf1:	test   r12,r12
   24bf4:	je     24bfb <extract_param+0x2b>
   24bf6:	mov    BYTE PTR [r12],0x0
   24bfb:	movzx  eax,BYTE PTR [rdx]
   24bfe:	cmp    al,0xd
   24c00:	jg     24c20 <extract_param+0x50>
   24c02:	cmp    al,0x8
   24c04:	jg     24df8 <extract_param+0x228>
   24c0a:	test   al,al
   24c0c:	jne    24c28 <extract_param+0x58>
   24c0e:	mov    QWORD PTR [rdi],rdx
   24c11:	add    rsp,0x18
   24c15:	pop    rbx
   24c16:	pop    rbp
   24c17:	pop    r12
   24c19:	pop    r13
   24c1b:	pop    r14
   24c1d:	pop    r15
   24c1f:	ret    
   24c20:	cmp    al,0x20
   24c22:	je     24df8 <extract_param+0x228>
   24c28:	mov    QWORD PTR [rbx],rdx
   24c2b:	movzx  esi,BYTE PTR [rdx]
   24c2e:	mov    rax,rdx
   24c31:	test   sil,sil
   24c34:	je     24ede <extract_param+0x30e>
   24c3a:	cmp    sil,0xd
   24c3e:	jg     24cb8 <extract_param+0xe8>
   24c40:	cmp    sil,0x8
   24c44:	jg     24c60 <extract_param+0x90>
   24c46:	cmp    r8b,sil
   24c49:	je     24c60 <extract_param+0x90>
   24c4b:	cmp    sil,0x3d
   24c4f:	je     24c60 <extract_param+0x90>
   24c51:	movzx  esi,BYTE PTR [rax+0x1]
   24c55:	add    rax,0x1
   24c59:	test   sil,sil
   24c5c:	jne    24c3a <extract_param+0x6a>
   24c5e:	xchg   ax,ax
   24c60:	mov    QWORD PTR [rbx+0x8],rax
   24c64:	cmp    rax,rdx
   24c67:	je     24cc7 <extract_param+0xf7>
   24c69:	nop    DWORD PTR [rax+0x0]
   24c70:	movzx  edx,BYTE PTR [rax]
   24c73:	cmp    dl,0xd
   24c76:	jg     24ce0 <extract_param+0x110>
   24c78:	cmp    dl,0x8
   24c7b:	jg     24e08 <extract_param+0x238>
   24c81:	cmp    dl,cl
   24c83:	je     24c89 <extract_param+0xb9>
   24c85:	test   dl,dl
   24c87:	jne    24cc7 <extract_param+0xf7>
   24c89:	pxor   xmm0,xmm0
   24c8d:	xor    edx,edx
   24c8f:	movups XMMWORD PTR [rbp+0x0],xmm0
   24c93:	cmp    BYTE PTR [rax],cl
   24c95:	sete   dl
   24c98:	add    rax,rdx
   24c9b:	mov    QWORD PTR [rdi],rax
   24c9e:	add    rsp,0x18
   24ca2:	mov    eax,0x1
   24ca7:	pop    rbx
   24ca8:	pop    rbp
   24ca9:	pop    r12
   24cab:	pop    r13
   24cad:	pop    r14
   24caf:	pop    r15
   24cb1:	ret    
   24cb2:	nop    WORD PTR [rax+rax*1+0x0]
   24cb8:	cmp    sil,0x20
   24cbc:	jne    24c46 <extract_param+0x76>
   24cbe:	mov    QWORD PTR [rbx+0x8],rax
   24cc2:	cmp    rax,rdx
   24cc5:	jne    24c70 <extract_param+0xa0>
   24cc7:	xor    eax,eax
   24cc9:	add    rsp,0x18
   24ccd:	pop    rbx
   24cce:	pop    rbp
   24ccf:	pop    r12
   24cd1:	pop    r13
   24cd3:	pop    r14
   24cd5:	pop    r15
   24cd7:	ret    
   24cd8:	nop    DWORD PTR [rax+rax*1+0x0]
   24ce0:	cmp    dl,0x20
   24ce3:	je     24e08 <extract_param+0x238>
   24ce9:	cmp    dl,cl
   24ceb:	je     24c89 <extract_param+0xb9>
   24ced:	cmp    dl,0x3d
   24cf0:	jne    24cc7 <extract_param+0xf7>
   24cf2:	movzx  edx,BYTE PTR [rax+0x1]
   24cf6:	add    rax,0x1
   24cfa:	cmp    dl,0xd
   24cfd:	jg     24e18 <extract_param+0x248>
   24d03:	cmp    dl,0x8
   24d06:	jg     24cf2 <extract_param+0x122>
   24d08:	mov    QWORD PTR [rbp+0x0],rax
   24d0c:	movzx  edx,BYTE PTR [rax]
   24d0f:	test   dl,dl
   24d11:	je     24ee9 <extract_param+0x319>
   24d17:	cmp    dl,cl
   24d19:	je     24ee9 <extract_param+0x319>
   24d1f:	mov    rdx,rax
   24d22:	jmp    24d2d <extract_param+0x15d>
   24d24:	nop    DWORD PTR [rax+0x0]
   24d28:	cmp    sil,r8b
   24d2b:	je     24d3a <extract_param+0x16a>
   24d2d:	movzx  esi,BYTE PTR [rdx+0x1]
   24d31:	add    rdx,0x1
   24d35:	test   sil,sil
   24d38:	jne    24d28 <extract_param+0x158>
   24d3a:	mov    QWORD PTR [rbp+0x8],rdx
   24d3e:	cmp    rax,rdx
   24d41:	je     24d5f <extract_param+0x18f>
   24d43:	mov    r8,rdx
   24d46:	movzx  esi,BYTE PTR [r8-0x1]
   24d4b:	cmp    sil,0xd
   24d4f:	jg     24e80 <extract_param+0x2b0>
   24d55:	cmp    sil,0x8
   24d59:	jg     24e8a <extract_param+0x2ba>
   24d5f:	xor    eax,eax
   24d61:	cmp    BYTE PTR [rdx],cl
   24d63:	sete   al
   24d66:	add    rdx,rax
   24d69:	mov    QWORD PTR [rdi],rdx
   24d6c:	mov    r14,QWORD PTR [rbx+0x8]
   24d70:	mov    esi,0x2a
   24d75:	mov    r15,QWORD PTR [rbx]
   24d78:	mov    rdx,r14
   24d7b:	sub    rdx,r15
   24d7e:	mov    rdi,r15
   24d81:	mov    QWORD PTR [rsp+0x8],rdx
   24d86:	call   bf70 <memchr@plt>
   24d8b:	mov    rdx,QWORD PTR [rsp+0x8]
   24d90:	test   rax,rax
   24d93:	mov    r13,rax
   24d96:	je     24dde <extract_param+0x20e>
   24d98:	mov    esi,0x2a
   24d9d:	mov    rdi,r15
   24da0:	call   c570 <memrchr@plt>
   24da5:	cmp    r13,rax
   24da8:	je     24ec8 <extract_param+0x2f8>
   24dae:	mov    QWORD PTR [rbx+0x8],r13
   24db2:	test   r12,r12
   24db5:	je     24dbc <extract_param+0x1ec>
   24db7:	mov    BYTE PTR [r12],0x1
   24dbc:	mov    rdi,QWORD PTR [rbp+0x0]
   24dc0:	mov    rdx,QWORD PTR [rbp+0x8]
   24dc4:	mov    esi,0x27
   24dc9:	sub    rdx,rdi
   24dcc:	call   c570 <memrchr@plt>
   24dd1:	test   rax,rax
   24dd4:	je     24dde <extract_param+0x20e>
   24dd6:	add    rax,0x1
   24dda:	mov    QWORD PTR [rbp+0x0],rax
   24dde:	add    rsp,0x18
   24de2:	mov    eax,0x1
   24de7:	pop    rbx
   24de8:	pop    rbp
   24de9:	pop    r12
   24deb:	pop    r13
   24ded:	pop    r14
   24def:	pop    r15
   24df1:	ret    
   24df2:	nop    WORD PTR [rax+rax*1+0x0]
   24df8:	add    rdx,0x1
   24dfc:	jmp    24bfb <extract_param+0x2b>
   24e01:	nop    DWORD PTR [rax+0x0]
   24e08:	add    rax,0x1
   24e0c:	jmp    24c70 <extract_param+0xa0>
   24e11:	nop    DWORD PTR [rax+0x0]
   24e18:	cmp    dl,0x20
   24e1b:	je     24cf2 <extract_param+0x122>
   24e21:	cmp    dl,0x22
   24e24:	jne    24d08 <extract_param+0x138>
   24e2a:	lea    rsi,[rax+0x1]
   24e2e:	mov    QWORD PTR [rbp+0x0],rsi
   24e32:	movzx  eax,BYTE PTR [rax+0x1]
   24e36:	test   al,al
   24e38:	jne    24e50 <extract_param+0x280>
   24e3a:	jmp    24cc7 <extract_param+0xf7>
   24e3f:	nop
   24e40:	movzx  eax,BYTE PTR [rsi+0x1]
   24e44:	add    rsi,0x1
   24e48:	test   al,al
   24e4a:	je     24cc7 <extract_param+0xf7>
   24e50:	cmp    al,0x22
   24e52:	jne    24e40 <extract_param+0x270>
   24e54:	test   al,al
   24e56:	je     24cc7 <extract_param+0xf7>
   24e5c:	mov    QWORD PTR [rbp+0x8],rsi
   24e60:	lea    rdx,[rsi+0x1]
   24e64:	movzx  eax,BYTE PTR [rdx]
   24e67:	cmp    al,0xd
   24e69:	jg     24eb8 <extract_param+0x2e8>
   24e6b:	cmp    al,0x8
   24e6d:	jg     24ebc <extract_param+0x2ec>
   24e6f:	test   al,al
   24e71:	jne    24ea7 <extract_param+0x2d7>
   24e73:	cmp    cl,0x1
   24e76:	adc    rdx,0x0
   24e7a:	jmp    24d69 <extract_param+0x199>
   24e7f:	nop
   24e80:	cmp    sil,0x20
   24e84:	jne    24d5f <extract_param+0x18f>
   24e8a:	sub    r8,0x1
   24e8e:	mov    QWORD PTR [rbp+0x8],r8
   24e92:	cmp    r8,rax
   24e95:	jne    24d46 <extract_param+0x176>
   24e9b:	jmp    24d5f <extract_param+0x18f>
   24ea0:	movzx  eax,BYTE PTR [rdx]
   24ea3:	test   al,al
   24ea5:	je     24e73 <extract_param+0x2a3>
   24ea7:	add    rdx,0x1
   24eab:	cmp    al,r8b
   24eae:	jne    24ea0 <extract_param+0x2d0>
   24eb0:	jmp    24d69 <extract_param+0x199>
   24eb5:	nop    DWORD PTR [rax]
   24eb8:	cmp    al,0x20
   24eba:	jne    24ea7 <extract_param+0x2d7>
   24ebc:	add    rdx,0x1
   24ec0:	jmp    24e64 <extract_param+0x294>
   24ec2:	nop    WORD PTR [rax+rax*1+0x0]
   24ec8:	sub    r14,0x1
   24ecc:	mov    QWORD PTR [rbx+0x8],r13
   24ed0:	cmp    r13,r14
   24ed3:	jne    24dde <extract_param+0x20e>
   24ed9:	jmp    24db2 <extract_param+0x1e2>
   24ede:	mov    QWORD PTR [rbx+0x8],rdx
   24ee2:	xor    eax,eax
   24ee4:	jmp    24cc9 <extract_param+0xf9>
   24ee9:	mov    QWORD PTR [rbp+0x8],rax
   24eed:	mov    rdx,rax
   24ef0:	jmp    24d5f <extract_param+0x18f>
   24ef5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000024f00 <check_auth>:
   24f00:	push   r15
   24f02:	push   r14
   24f04:	push   r13
   24f06:	push   r12
   24f08:	push   rbp
   24f09:	push   rbx
   24f0a:	mov    rbx,rdx
   24f0d:	sub    rsp,0x348
   24f14:	mov    QWORD PTR [rsp+0x50],rdi
   24f19:	mov    rax,QWORD PTR [rsp+0x388]
   24f21:	mov    QWORD PTR [rsp+0x30],rcx
   24f26:	mov    rdi,QWORD PTR [rsp+0x380]
   24f2e:	mov    rcx,QWORD PTR [rsp+0x390]
   24f36:	mov    QWORD PTR [rsp+0x60],rax
   24f3b:	mov    QWORD PTR [rsp+0x48],rsi
   24f40:	movzx  eax,BYTE PTR [rax]
   24f43:	mov    QWORD PTR [rsp+0x68],rcx
   24f48:	mov    QWORD PTR [rsp+0x70],rdx
   24f4d:	mov    QWORD PTR [rsp+0x78],r8
   24f52:	mov    QWORD PTR [rsp+0x58],r9
   24f57:	mov    QWORD PTR [rsp+0x88],rdi
   24f5f:	mov    rdx,QWORD PTR fs:0x28
   24f68:	mov    QWORD PTR [rsp+0x338],rdx
   24f70:	xor    edx,edx
   24f72:	mov    BYTE PTR [rsp+0x86],al
   24f79:	movzx  eax,BYTE PTR [rcx]
   24f7c:	movzx  ecx,BYTE PTR [r9]
   24f80:	mov    BYTE PTR [rdi],0x0
   24f83:	mov    BYTE PTR [rsp+0x9f],al
   24f8a:	mov    BYTE PTR [rsp+0x85],cl
   24f91:	test   al,al
   24f93:	jne    25243 <check_auth+0x343>
   24f99:	test   rsi,rsi
   24f9c:	setne  dl
   24f9f:	test   rbx,rbx
   24fa2:	setne  al
   24fa5:	and    dl,al
   24fa7:	mov    BYTE PTR [rsp+0x87],dl
   24fae:	je     25243 <check_auth+0x343>
   24fb4:	lea    rax,[rsp+0xb0]
   24fbc:	xor    edx,edx
   24fbe:	mov    QWORD PTR [rsp+0xa0],0x0
   24fca:	xor    r13d,r13d
   24fcd:	mov    QWORD PTR [rsp+0x40],rax
   24fd2:	lea    rax,[rsp+0xa8]
   24fda:	lea    r15,[rip+0x42578]        # 67559 <primes.6089+0x1479>
   24fe1:	mov    QWORD PTR [rsp+0x38],rax
   24fe6:	lea    rax,[rsp+0x230]
   24fee:	lea    r12,[rsp+0xd0]
   24ff6:	mov    QWORD PTR [rsp+0x8],0x0
   24fff:	mov    QWORD PTR [rsp+0x10],0x0
   25008:	mov    QWORD PTR [rsp+0x20],rax
   2500d:	nop    DWORD PTR [rax]
   25010:	mov    rax,QWORD PTR [rsp+0x30]
   25015:	mov    r8,QWORD PTR [rsp+0x40]
   2501a:	lea    rsi,[rip+0x4254e]        # 6756f <primes.6089+0x148f>
   25021:	mov    rcx,QWORD PTR [rsp+0x38]
   25026:	mov    rdi,QWORD PTR [rax+0x8]
   2502a:	call   23810 <resp_header_locate.isra.0>
   2502f:	mov    DWORD PTR [rsp+0x18],eax
   25033:	cmp    eax,0xffffffff
   25036:	je     255e0 <check_auth+0x6e0>
   2503c:	mov    rax,QWORD PTR [rsp+0x20]
   25041:	mov    rbx,QWORD PTR [rsp+0xb0]
   25049:	sub    rbx,QWORD PTR [rsp+0xa8]
   25051:	mov    QWORD PTR [rsp+0x28],rax
   25056:	cmp    r13,rax
   25059:	je     25063 <check_auth+0x163>
   2505b:	mov    rdi,r13
   2505e:	call   4bdc0 <rpl_free>
   25063:	mov    r13,QWORD PTR [rsp+0x20]
   25068:	cmp    rbx,0xff
   2506f:	ja     255aa <check_auth+0x6aa>
   25075:	mov    rsi,QWORD PTR [rsp+0xa8]
   2507d:	mov    rdx,rbx
   25080:	mov    rdi,r13
   25083:	call   cb30 <memcpy@plt>
   25088:	mov    QWORD PTR [rsp+0xa0],r13
   25090:	mov    BYTE PTR [r13+rbx*1+0x0],0x0
   25096:	mov    rbx,r13
   25099:	nop    DWORD PTR [rax+0x0]
   250a0:	movzx  eax,BYTE PTR [rbx]
   250a3:	cmp    al,0xd
   250a5:	jg     252b0 <check_auth+0x3b0>
   250ab:	cmp    al,0x8
   250ad:	jg     252b8 <check_auth+0x3b8>
   250b3:	mov    QWORD PTR [rsp+0xc0],rbx
   250bb:	mov    QWORD PTR [rsp+0xc8],rbx
   250c3:	movzx  eax,BYTE PTR [rbx]
   250c6:	test   al,al
   250c8:	je     2559e <check_auth+0x69e>
   250ce:	mov    rsi,rbx
   250d1:	cmp    al,0xd
   250d3:	jg     252d0 <check_auth+0x3d0>
   250d9:	cmp    al,0x8
   250db:	jg     250f0 <check_auth+0x1f0>
   250dd:	add    rsi,0x1
   250e1:	mov    QWORD PTR [rsp+0xc8],rsi
   250e9:	movzx  eax,BYTE PTR [rsi]
   250ec:	test   al,al
   250ee:	jne    250d1 <check_auth+0x1d1>
   250f0:	cmp    rsi,rbx
   250f3:	je     2559e <check_auth+0x69e>
   250f9:	cmp    BYTE PTR [rip+0x651bb],0x0        # 8a2bb <opt+0x23b>
   25100:	jne    2555a <check_auth+0x65a>
   25106:	mov    rbp,QWORD PTR [rsp+0xc8]
   2510e:	cmp    rbp,rbx
   25111:	jbe    251b0 <check_auth+0x2b0>
   25117:	mov    r14,rbp
   2511a:	sub    r14,rbx
   2511d:	cmp    r14,0x4
   25121:	jbe    251a0 <check_auth+0x2a0>
   25123:	mov    edx,0x5
   25128:	lea    rsi,[rip+0x42409]        # 67538 <primes.6089+0x1458>
   2512f:	mov    rdi,rbx
   25132:	call   433b0 <c_strncasecmp>
   25137:	test   eax,eax
   25139:	jne    254e0 <check_auth+0x5e0>
   2513f:	cmp    r14,0x5
   25143:	je     252f8 <check_auth+0x3f8>
   25149:	movzx  eax,BYTE PTR [rbx+0x5]
   2514d:	cmp    al,0xd
   2514f:	jg     25591 <check_auth+0x691>
   25155:	cmp    al,0x8
   25157:	jg     252f8 <check_auth+0x3f8>
   2515d:	mov    edx,0x6
   25162:	lea    rsi,[rip+0x48b83]        # 6dcec <urlchr_table+0x14c>
   25169:	mov    rdi,rbx
   2516c:	call   433b0 <c_strncasecmp>
   25171:	test   eax,eax
   25173:	jne    254a0 <check_auth+0x5a0>
   25179:	cmp    r14,0x6
   2517d:	je     252f8 <check_auth+0x3f8>
   25183:	movzx  eax,BYTE PTR [rbx+0x6]
   25187:	cmp    al,0xd
   25189:	jg     252ed <check_auth+0x3ed>
   2518f:	cmp    al,0x8
   25191:	jg     252f8 <check_auth+0x3f8>
   25197:	nop    WORD PTR [rax+rax*1+0x0]
   251a0:	cmp    r14,0x3
   251a4:	ja     254a0 <check_auth+0x5a0>
   251aa:	nop    WORD PTR [rax+rax*1+0x0]
   251b0:	cmp    BYTE PTR [rip+0x65104],0x0        # 8a2bb <opt+0x23b>
   251b7:	mov    QWORD PTR [rsp+0xa0],rbp
   251bf:	jne    2557b <check_auth+0x67b>
   251c5:	lea    rbp,[rsp+0xc0]
   251cd:	lea    rbx,[rsp+0xa0]
   251d5:	nop    DWORD PTR [rax]
   251d8:	xor    r8d,r8d
   251db:	mov    ecx,0x2c
   251e0:	mov    rdx,r12
   251e3:	mov    rsi,rbp
   251e6:	mov    rdi,rbx
   251e9:	call   24bd0 <extract_param>
   251ee:	test   al,al
   251f0:	je     252e0 <check_auth+0x3e0>
   251f6:	mov    rdx,QWORD PTR [rsp+0xc0]
   251fe:	test   rdx,rdx
   25201:	je     252e0 <check_auth+0x3e0>
   25207:	mov    r8,QWORD PTR [rsp+0xd0]
   2520f:	test   r8,r8
   25212:	je     252e0 <check_auth+0x3e0>
   25218:	cmp    BYTE PTR [rip+0x6509c],0x0        # 8a2bb <opt+0x23b>
   2521f:	je     251d8 <check_auth+0x2d8>
   25221:	mov    rcx,QWORD PTR [rsp+0xd8]
   25229:	mov    rsi,QWORD PTR [rsp+0xc8]
   25231:	mov    rdi,r15
   25234:	xor    eax,eax
   25236:	sub    rcx,r8
   25239:	sub    rsi,rdx
   2523c:	call   2e250 <debug_logprintf>
   25241:	jmp    251d8 <check_auth+0x2d8>
   25243:	xor    r13d,r13d
   25246:	mov    r12d,0x19
   2524c:	mov    rdi,r13
   2524f:	call   4bdc0 <rpl_free>
   25254:	mov    rax,QWORD PTR [rsp+0x58]
   25259:	movzx  edi,BYTE PTR [rsp+0x85]
   25261:	mov    BYTE PTR [rax],dil
   25264:	mov    rax,QWORD PTR [rsp+0x60]
   25269:	movzx  edi,BYTE PTR [rsp+0x86]
   25271:	mov    BYTE PTR [rax],dil
   25274:	movzx  eax,BYTE PTR [rsp+0x9f]
   2527c:	mov    rdi,QWORD PTR [rsp+0x68]
   25281:	mov    BYTE PTR [rdi],al
   25283:	mov    rax,QWORD PTR [rsp+0x338]
   2528b:	xor    rax,QWORD PTR fs:0x28
   25294:	jne    26297 <check_auth+0x1397>
   2529a:	add    rsp,0x348
   252a1:	mov    eax,r12d
   252a4:	pop    rbx
   252a5:	pop    rbp
   252a6:	pop    r12
   252a8:	pop    r13
   252aa:	pop    r14
   252ac:	pop    r15
   252ae:	ret    
   252af:	nop
   252b0:	cmp    al,0x20
   252b2:	jne    250b3 <check_auth+0x1b3>
   252b8:	add    rbx,0x1
   252bc:	mov    QWORD PTR [rsp+0xa0],rbx
   252c4:	jmp    250a0 <check_auth+0x1a0>
   252c9:	nop    DWORD PTR [rax+0x0]
   252d0:	cmp    al,0x20
   252d2:	je     250f0 <check_auth+0x1f0>
   252d8:	jmp    250dd <check_auth+0x1dd>
   252dd:	nop    DWORD PTR [rax]
   252e0:	mov    rbx,QWORD PTR [rsp+0xa0]
   252e8:	jmp    250a0 <check_auth+0x1a0>
   252ed:	cmp    al,0x20
   252ef:	jne    251a0 <check_auth+0x2a0>
   252f5:	nop    DWORD PTR [rax]
   252f8:	mov    edx,0x4
   252fd:	lea    rsi,[rip+0x4223a]        # 6753e <primes.6089+0x145e>
   25304:	mov    rdi,rbx
   25307:	call   433b0 <c_strncasecmp>
   2530c:	test   eax,eax
   2530e:	je     25370 <check_auth+0x470>
   25310:	cmp    QWORD PTR [rsp+0x10],0x0
   25316:	je     25520 <check_auth+0x620>
   2531c:	cmp    QWORD PTR [rsp+0x8],0x0
   25322:	jne    251b0 <check_auth+0x2b0>
   25328:	mov    edx,0x5
   2532d:	lea    rsi,[rip+0x42204]        # 67538 <primes.6089+0x1458>
   25334:	mov    rdi,rbx
   25337:	call   433b0 <c_strncasecmp>
   2533c:	test   eax,eax
   2533e:	jne    251b0 <check_auth+0x2b0>
   25344:	movzx  eax,BYTE PTR [rbx+0x5]
   25348:	cmp    al,0xd
   2534a:	jg     255c4 <check_auth+0x6c4>
   25350:	cmp    al,0x8
   25352:	jg     255d6 <check_auth+0x6d6>
   25358:	test   al,al
   2535a:	cmovne rbx,QWORD PTR [rsp+0x8]
   25360:	mov    QWORD PTR [rsp+0x8],rbx
   25365:	jmp    251b0 <check_auth+0x2b0>
   2536a:	nop    WORD PTR [rax+rax*1+0x0]
   25370:	movzx  eax,BYTE PTR [rbx+0x4]
   25374:	cmp    al,0xd
   25376:	jg     25480 <check_auth+0x580>
   2537c:	cmp    al,0x8
   2537e:	jg     25488 <check_auth+0x588>
   25384:	test   al,al
   25386:	jne    25310 <check_auth+0x410>
   25388:	mov    rax,QWORD PTR [rsp+0x10]
   2538d:	or     rax,QWORD PTR [rsp+0x8]
   25392:	jne    2568d <check_auth+0x78d>
   25398:	mov    rdi,QWORD PTR [rsp+0x50]
   2539d:	call   37490 <url_full_path>
   253a2:	mov    edi,0x4
   253a7:	mov    rbp,rax
   253aa:	call   4b850 <xmalloc>
   253af:	mov    QWORD PTR [rsp+0x18],rax
   253b4:	mov    DWORD PTR [rax],0x19
   253ba:	mov    QWORD PTR [rsp+0xa0],rbx
   253c2:	xor    edi,edi
   253c4:	mov    edx,0x5
   253c9:	lea    rsi,[rip+0x421b0]        # 67580 <primes.6089+0x14a0>
   253d0:	call   c780 <dcgettext@plt>
   253d5:	mov    rdx,rbx
   253d8:	mov    edi,0x1
   253dd:	mov    rsi,rax
   253e0:	xor    eax,eax
   253e2:	call   2e0a0 <logprintf>
   253e7:	mov    rsi,QWORD PTR [rsp+0xa0]
   253ef:	movsx  eax,BYTE PTR [rsi]
   253f2:	lea    ecx,[rax-0x61]
   253f5:	lea    edx,[rax-0x20]
   253f8:	cmp    ecx,0x1a
   253fb:	cmovb  eax,edx
   253fe:	cmp    eax,0x44
   25401:	je     25749 <check_auth+0x849>
   25407:	cmp    eax,0x4e
   2540a:	jne    25630 <check_auth+0x730>
   25410:	lea    rdi,[rip+0x60281]        # 85698 <pconn+0x18>
   25417:	call   422c0 <ntlm_input>
   2541c:	test   al,al
   2541e:	je     256b2 <check_auth+0x7b2>
   25424:	mov    rdx,QWORD PTR [rsp+0x70]
   25429:	mov    rsi,QWORD PTR [rsp+0x48]
   2542e:	lea    rcx,[rsp+0x9f]
   25436:	lea    rdi,[rip+0x6025b]        # 85698 <pconn+0x18>
   2543d:	call   42470 <ntlm_output>
   25442:	mov    rbx,rax
   25445:	mov    rdi,QWORD PTR [rsp+0x18]
   2544a:	mov    r12d,DWORD PTR [rdi]
   2544d:	call   4bdc0 <rpl_free>
   25452:	mov    rdi,rbp
   25455:	call   4bdc0 <rpl_free>
   2545a:	cmp    r12d,0x19
   2545e:	je     25f13 <check_auth+0x1013>
   25464:	mov    rdi,rbx
   25467:	call   4bdc0 <rpl_free>
   2546c:	lea    rax,[rsp+0x230]
   25474:	mov    QWORD PTR [rsp+0x28],rax
   25479:	jmp    2561e <check_auth+0x71e>
   2547e:	xchg   ax,ax
   25480:	cmp    al,0x20
   25482:	jne    25310 <check_auth+0x410>
   25488:	mov    edx,DWORD PTR [rsp+0x18]
   2548c:	add    edx,0x1
   2548f:	test   rbx,rbx
   25492:	je     25010 <check_auth+0x110>
   25498:	jmp    25388 <check_auth+0x488>
   2549d:	nop    DWORD PTR [rax]
   254a0:	mov    edx,0x4
   254a5:	lea    rsi,[rip+0x42092]        # 6753e <primes.6089+0x145e>
   254ac:	mov    rdi,rbx
   254af:	call   433b0 <c_strncasecmp>
   254b4:	test   eax,eax
   254b6:	jne    251b0 <check_auth+0x2b0>
   254bc:	movzx  eax,BYTE PTR [rbx+0x4]
   254c0:	cmp    r14,0x4
   254c4:	je     25374 <check_auth+0x474>
   254ca:	cmp    al,0xd
   254cc:	jg     2550e <check_auth+0x60e>
   254ce:	cmp    al,0x8
   254d0:	jle    251b0 <check_auth+0x2b0>
   254d6:	jmp    25374 <check_auth+0x474>
   254db:	nop    DWORD PTR [rax+rax*1+0x0]
   254e0:	cmp    r14,0x5
   254e4:	jne    2515d <check_auth+0x25d>
   254ea:	mov    edx,0x4
   254ef:	lea    rsi,[rip+0x42048]        # 6753e <primes.6089+0x145e>
   254f6:	mov    rdi,rbx
   254f9:	call   433b0 <c_strncasecmp>
   254fe:	test   eax,eax
   25500:	jne    251b0 <check_auth+0x2b0>
   25506:	movzx  eax,BYTE PTR [rbx+0x4]
   2550a:	cmp    al,0xd
   2550c:	jle    254ce <check_auth+0x5ce>
   2550e:	cmp    al,0x20
   25510:	je     25488 <check_auth+0x588>
   25516:	jmp    251b0 <check_auth+0x2b0>
   2551b:	nop    DWORD PTR [rax+rax*1+0x0]
   25520:	mov    edx,0x6
   25525:	lea    rsi,[rip+0x487c0]        # 6dcec <urlchr_table+0x14c>
   2552c:	mov    rdi,rbx
   2552f:	call   433b0 <c_strncasecmp>
   25534:	test   eax,eax
   25536:	jne    2531c <check_auth+0x41c>
   2553c:	movzx  eax,BYTE PTR [rbx+0x6]
   25540:	cmp    al,0xd
   25542:	jg     255bb <check_auth+0x6bb>
   25544:	cmp    al,0x8
   25546:	jg     25550 <check_auth+0x650>
   25548:	test   al,al
   2554a:	jne    2531c <check_auth+0x41c>
   25550:	mov    QWORD PTR [rsp+0x10],rbx
   25555:	jmp    251b0 <check_auth+0x2b0>
   2555a:	sub    rsi,rbx
   2555d:	mov    rdx,rbx
   25560:	lea    rdi,[rip+0x41fb7]        # 6751e <primes.6089+0x143e>
   25567:	xor    eax,eax
   25569:	call   2e250 <debug_logprintf>
   2556e:	mov    rbx,QWORD PTR [rsp+0xc0]
   25576:	jmp    25106 <check_auth+0x206>
   2557b:	mov    rsi,rbp
   2557e:	lea    rdi,[rip+0x41fbe]        # 67543 <primes.6089+0x1463>
   25585:	xor    eax,eax
   25587:	call   2e250 <debug_logprintf>
   2558c:	jmp    251c5 <check_auth+0x2c5>
   25591:	cmp    al,0x20
   25593:	jne    2515d <check_auth+0x25d>
   25599:	jmp    252f8 <check_auth+0x3f8>
   2559e:	mov    edx,DWORD PTR [rsp+0x18]
   255a2:	add    edx,0x1
   255a5:	jmp    25010 <check_auth+0x110>
   255aa:	lea    rdi,[rbx+0x1]
   255ae:	call   4b850 <xmalloc>
   255b3:	mov    r13,rax
   255b6:	jmp    25075 <check_auth+0x175>
   255bb:	cmp    al,0x20
   255bd:	je     25550 <check_auth+0x650>
   255bf:	jmp    2531c <check_auth+0x41c>
   255c4:	cmp    al,0x20
   255c6:	cmovne rbx,QWORD PTR [rsp+0x8]
   255cc:	mov    QWORD PTR [rsp+0x8],rbx
   255d1:	jmp    251b0 <check_auth+0x2b0>
   255d6:	mov    QWORD PTR [rsp+0x8],rbx
   255db:	jmp    251b0 <check_auth+0x2b0>
   255e0:	mov    rdi,QWORD PTR [rsp+0x8]
   255e5:	mov    rcx,QWORD PTR [rsp+0x10]
   255ea:	test   rdi,rdi
   255ed:	sete   al
   255f0:	or     rcx,rdi
   255f3:	je     25658 <check_auth+0x758>
   255f5:	cmp    BYTE PTR [rsp+0x86],0x1
   255fd:	jne    25ed4 <check_auth+0xfd4>
   25603:	test   al,al
   25605:	jne    25ed4 <check_auth+0xfd4>
   2560b:	lea    rax,[rsp+0x230]
   25613:	mov    r12d,0x19
   25619:	mov    QWORD PTR [rsp+0x28],rax
   2561e:	cmp    r13,QWORD PTR [rsp+0x28]
   25623:	je     25254 <check_auth+0x354>
   25629:	jmp    2524c <check_auth+0x34c>
   2562e:	xchg   ax,ax
   25630:	cmp    eax,0x42
   25633:	jne    cc76 <check_auth.cold>
   25639:	mov    rsi,QWORD PTR [rsp+0x70]
   2563e:	mov    rdi,QWORD PTR [rsp+0x48]
   25643:	mov    BYTE PTR [rsp+0x9f],0x1
   2564b:	call   229a0 <basic_authentication_encode>
   25650:	mov    rbx,rax
   25653:	jmp    25445 <check_auth+0x545>
   25658:	mov    edx,0x5
   2565d:	lea    rsi,[rip+0x413ec]        # 66a50 <primes.6089+0x970>
   25664:	xor    edi,edi
   25666:	mov    r12d,0x19
   2566c:	call   c780 <dcgettext@plt>
   25671:	mov    edi,0x1
   25676:	mov    rsi,rax
   25679:	call   2de60 <logputs>
   2567e:	lea    rax,[rsp+0x230]
   25686:	mov    QWORD PTR [rsp+0x28],rax
   2568b:	jmp    2561e <check_auth+0x71e>
   2568d:	cmp    BYTE PTR [rsp+0x86],0x1
   25695:	jne    25398 <check_auth+0x498>
   2569b:	cmp    QWORD PTR [rsp+0x8],0x0
   256a1:	je     25398 <check_auth+0x498>
   256a7:	mov    r12d,0x19
   256ad:	jmp    2561e <check_auth+0x71e>
   256b2:	mov    rdi,QWORD PTR [rsp+0x18]
   256b7:	mov    BYTE PTR [rsp+0x9f],0x1
   256bf:	xor    ebx,ebx
   256c1:	mov    r12d,DWORD PTR [rdi]
   256c4:	call   4bdc0 <rpl_free>
   256c9:	mov    rdi,rbp
   256cc:	call   4bdc0 <rpl_free>
   256d1:	cmp    r12d,0x19
   256d5:	jne    25464 <check_auth+0x564>
   256db:	mov    rbx,QWORD PTR [rsp+0xa0]
   256e3:	mov    edx,0x4
   256e8:	lea    rsi,[rip+0x41e4f]        # 6753e <primes.6089+0x145e>
   256ef:	mov    rdi,rbx
   256f2:	call   433b0 <c_strncasecmp>
   256f7:	test   eax,eax
   256f9:	jne    25fa3 <check_auth+0x10a3>
   256ff:	movzx  eax,BYTE PTR [rbx+0x4]
   25703:	cmp    al,0xd
   25705:	jg     25f9b <check_auth+0x109b>
   2570b:	cmp    al,0x8
   2570d:	jg     25717 <check_auth+0x817>
   2570f:	test   al,al
   25711:	jne    25fa3 <check_auth+0x10a3>
   25717:	movzx  eax,BYTE PTR [rsp+0x87]
   2571f:	mov    BYTE PTR [rsp+0x85],al
   25726:	mov    rax,QWORD PTR [rsp+0x88]
   2572e:	mov    r12d,0x19
   25734:	mov    BYTE PTR [rax],0x1
   25737:	lea    rax,[rsp+0x230]
   2573f:	mov    QWORD PTR [rsp+0x28],rax
   25744:	jmp    2561e <check_auth+0x71e>
   25749:	mov    rax,QWORD PTR [rsp+0x78]
   2574e:	add    rsi,0x6
   25752:	mov    BYTE PTR [rsp+0x9f],0x1
   2575a:	pxor   xmm0,xmm0
   2575e:	mov    QWORD PTR [rsp+0xb8],rsi
   25766:	mov    rax,QWORD PTR [rax]
   25769:	movaps XMMWORD PTR [rsp+0x180],xmm0
   25771:	mov    QWORD PTR [rip+0x5dee4],0x0        # 83660 <qop.9666>
   2577c:	mov    QWORD PTR [rsp+0x10],rax
   25781:	lea    rax,[rsp+0xd0]
   25789:	mov    QWORD PTR [rsp+0x28],rax
   2578e:	lea    rax,[rsp+0xc0]
   25796:	mov    QWORD PTR [rsp+0x20],rax
   2579b:	lea    rax,[rsp+0xb8]
   257a3:	mov    QWORD PTR [rip+0x5deaa],0x0        # 83658 <algorithm.9667>
   257ae:	mov    QWORD PTR [rip+0x5de97],0x0        # 83650 <nonce.9665>
   257b9:	mov    QWORD PTR [rip+0x5de84],0x0        # 83648 <opaque.9664>
   257c4:	mov    QWORD PTR [rip+0x5de71],0x0        # 83640 <realm.9663>
   257cf:	mov    QWORD PTR [rsp+0x8],rax
   257d4:	mov    rdx,QWORD PTR [rsp+0x28]
   257d9:	mov    rsi,QWORD PTR [rsp+0x20]
   257de:	xor    r8d,r8d
   257e1:	mov    ecx,0x2c
   257e6:	mov    rdi,QWORD PTR [rsp+0x8]
   257eb:	call   24bd0 <extract_param>
   257f0:	test   al,al
   257f2:	je     2588b <check_auth+0x98b>
   257f8:	mov    r12,QWORD PTR [rsp+0xc0]
   25800:	mov    eax,0x5
   25805:	xor    r14d,r14d
   25808:	mov    rbx,QWORD PTR [rsp+0xc8]
   25810:	lea    r15,[rip+0x41d01]        # 67518 <primes.6089+0x1438>
   25817:	sub    rbx,r12
   2581a:	cmp    rbx,rax
   2581d:	je     25849 <check_auth+0x949>
   2581f:	nop
   25820:	add    r14,0x1
   25824:	cmp    r14,0x5
   25828:	je     257d4 <check_auth+0x8d4>
   2582a:	mov    rax,r14
   2582d:	lea    rdi,[rip+0x575ac]        # 7cde0 <options.9671>
   25834:	shl    rax,0x4
   25838:	mov    r15,QWORD PTR [rdi+rax*1]
   2583c:	mov    rdi,r15
   2583f:	call   c310 <strlen@plt>
   25844:	cmp    rbx,rax
   25847:	jne    25820 <check_auth+0x920>
   25849:	mov    rdx,rbx
   2584c:	mov    rsi,r15
   2584f:	mov    rdi,r12
   25852:	call   c0d0 <strncmp@plt>
   25857:	test   eax,eax
   25859:	jne    25820 <check_auth+0x920>
   2585b:	mov    rcx,r14
   2585e:	lea    rax,[rip+0x5757b]        # 7cde0 <options.9671>
   25865:	mov    rsi,QWORD PTR [rsp+0xd8]
   2586d:	mov    rdi,QWORD PTR [rsp+0xd0]
   25875:	shl    rcx,0x4
   25879:	mov    rbx,QWORD PTR [rax+rcx*1+0x8]
   2587e:	call   3b8a0 <strdupdelim>
   25883:	mov    QWORD PTR [rbx],rax
   25886:	jmp    257d4 <check_auth+0x8d4>
   2588b:	mov    r12,QWORD PTR [rip+0x5ddce]        # 83660 <qop.9666>
   25892:	test   r12,r12
   25895:	je     258b5 <check_auth+0x9b5>
   25897:	mov    ecx,0x5
   2589c:	lea    rdi,[rip+0x41cfa]        # 6759d <primes.6089+0x14bd>
   258a3:	mov    rsi,r12
   258a6:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   258a8:	seta   al
   258ab:	sbb    al,0x0
   258ad:	test   al,al
   258af:	jne    261c6 <check_auth+0x12c6>
   258b5:	mov    r12,QWORD PTR [rip+0x5dd9c]        # 83658 <algorithm.9667>
   258bc:	test   r12,r12
   258bf:	je     258f9 <check_auth+0x9f9>
   258c1:	mov    ecx,0x4
   258c6:	lea    rdi,[rip+0x41cd5]        # 675a2 <primes.6089+0x14c2>
   258cd:	mov    rsi,r12
   258d0:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   258d2:	seta   al
   258d5:	sbb    al,0x0
   258d7:	test   al,al
   258d9:	je     258f9 <check_auth+0x9f9>
   258db:	mov    ecx,0x9
   258e0:	lea    rdi,[rip+0x41cbf]        # 675a6 <primes.6089+0x14c6>
   258e7:	mov    rsi,r12
   258ea:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   258ec:	seta   al
   258ef:	sbb    al,0x0
   258f1:	test   al,al
   258f3:	jne    26207 <check_auth+0x1307>
   258f9:	mov    rdi,QWORD PTR [rip+0x5dd40]        # 83640 <realm.9663>
   25900:	test   rdi,rdi
   25903:	je     25f89 <check_auth+0x1089>
   25909:	cmp    QWORD PTR [rip+0x5dd3f],0x0        # 83650 <nonce.9665>
   25911:	je     25f89 <check_auth+0x1089>
   25917:	test   rbp,rbp
   2591a:	je     25f89 <check_auth+0x1089>
   25920:	cmp    QWORD PTR [rsp+0x10],0x0
   25926:	je     25f89 <check_auth+0x1089>
   2592c:	lea    r12,[rsp+0xe0]
   25934:	lea    r15,[rip+0x41cbe]        # 675f9 <primes.6089+0x1519>
   2593b:	mov    rdi,r12
   2593e:	call   43df0 <md5_init_ctx>
   25943:	mov    rbx,QWORD PTR [rsp+0x48]
   25948:	mov    rdi,rbx
   2594b:	call   c310 <strlen@plt>
   25950:	mov    rdi,rbx
   25953:	mov    rdx,r12
   25956:	mov    rsi,rax
   25959:	call   446e0 <md5_process_bytes>
   2595e:	mov    rdx,r12
   25961:	mov    esi,0x1
   25966:	lea    rdi,[rip+0x35964]        # 5b2d1 <_IO_stdin_used+0x2d1>
   2596d:	call   446e0 <md5_process_bytes>
   25972:	mov    r14,QWORD PTR [rip+0x5dcc7]        # 83640 <realm.9663>
   25979:	mov    rdi,r14
   2597c:	call   c310 <strlen@plt>
   25981:	mov    rdx,r12
   25984:	mov    rdi,r14
   25987:	mov    rsi,rax
   2598a:	call   446e0 <md5_process_bytes>
   2598f:	mov    rdx,r12
   25992:	mov    esi,0x1
   25997:	lea    rdi,[rip+0x35933]        # 5b2d1 <_IO_stdin_used+0x2d1>
   2599e:	call   446e0 <md5_process_bytes>
   259a3:	mov    rbx,QWORD PTR [rsp+0x70]
   259a8:	mov    rdi,rbx
   259ab:	call   c310 <strlen@plt>
   259b0:	mov    rdx,r12
   259b3:	mov    rdi,rbx
   259b6:	lea    rbx,[rsp+0x190]
   259be:	mov    rsi,rax
   259c1:	call   446e0 <md5_process_bytes>
   259c6:	mov    rsi,rbx
   259c9:	mov    rdi,r12
   259cc:	call   445c0 <md5_finish_ctx>
   259d1:	lea    rax,[rsp+0x1a0]
   259d9:	mov    QWORD PTR [rsp+0x8],rax
   259de:	mov    rdx,rax
   259e1:	mov    rax,rbx
   259e4:	movzx  ecx,BYTE PTR [rax]
   259e7:	add    rdx,0x2
   259eb:	add    rax,0x1
   259ef:	mov    esi,ecx
   259f1:	and    ecx,0xf
   259f4:	shr    sil,0x4
   259f8:	movzx  ecx,BYTE PTR [r15+rcx*1]
   259fd:	and    esi,0xf
   25a00:	movzx  esi,BYTE PTR [r15+rsi*1]
   25a05:	mov    BYTE PTR [rdx-0x2],sil
   25a09:	mov    BYTE PTR [rdx-0x1],cl
   25a0c:	cmp    rax,QWORD PTR [rsp+0x8]
   25a11:	jne    259e4 <check_auth+0xae4>
   25a13:	mov    rsi,QWORD PTR [rip+0x5dc3e]        # 83658 <algorithm.9667>
   25a1a:	mov    BYTE PTR [rsp+0x1c0],0x0
   25a22:	lea    r14,[rsp+0x180]
   25a2a:	test   rsi,rsi
   25a2d:	je     25a4a <check_auth+0xb4a>
   25a2f:	mov    ecx,0x9
   25a34:	lea    rdi,[rip+0x41b6b]        # 675a6 <primes.6089+0x14c6>
   25a3b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   25a3d:	seta   al
   25a40:	sbb    al,0x0
   25a42:	test   al,al
   25a44:	je     260a1 <check_auth+0x11a1>
   25a4a:	mov    rdi,r12
   25a4d:	call   43df0 <md5_init_ctx>
   25a52:	mov    rdi,QWORD PTR [rsp+0x10]
   25a57:	call   c310 <strlen@plt>
   25a5c:	mov    rdi,QWORD PTR [rsp+0x10]
   25a61:	mov    rdx,r12
   25a64:	mov    rsi,rax
   25a67:	call   446e0 <md5_process_bytes>
   25a6c:	mov    rdx,r12
   25a6f:	mov    esi,0x1
   25a74:	lea    rdi,[rip+0x35856]        # 5b2d1 <_IO_stdin_used+0x2d1>
   25a7b:	call   446e0 <md5_process_bytes>
   25a80:	mov    rdi,rbp
   25a83:	call   c310 <strlen@plt>
   25a88:	mov    rdx,r12
   25a8b:	mov    rdi,rbp
   25a8e:	mov    rsi,rax
   25a91:	call   446e0 <md5_process_bytes>
   25a96:	mov    rsi,rbx
   25a99:	mov    rdi,r12
   25a9c:	call   445c0 <md5_finish_ctx>
   25aa1:	lea    rax,[rsp+0x1d0]
   25aa9:	mov    QWORD PTR [rsp+0x10],rax
   25aae:	mov    rdx,rax
   25ab1:	mov    rax,rbx
   25ab4:	movzx  ecx,BYTE PTR [rax]
   25ab7:	add    rdx,0x2
   25abb:	add    rax,0x1
   25abf:	mov    esi,ecx
   25ac1:	and    ecx,0xf
   25ac4:	shr    sil,0x4
   25ac8:	movzx  ecx,BYTE PTR [r15+rcx*1]
   25acd:	and    esi,0xf
   25ad0:	movzx  esi,BYTE PTR [r15+rsi*1]
   25ad5:	mov    BYTE PTR [rdx-0x2],sil
   25ad9:	mov    BYTE PTR [rdx-0x1],cl
   25adc:	cmp    rax,QWORD PTR [rsp+0x8]
   25ae1:	jne    25ab4 <check_auth+0xbb4>
   25ae3:	mov    rsi,QWORD PTR [rip+0x5db76]        # 83660 <qop.9666>
   25aea:	mov    BYTE PTR [rsp+0x1f0],0x0
   25af2:	test   rsi,rsi
   25af5:	je     25f4f <check_auth+0x104f>
   25afb:	mov    ecx,0x5
   25b00:	lea    rdi,[rip+0x41a96]        # 6759d <primes.6089+0x14bd>
   25b07:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   25b09:	seta   al
   25b0c:	sbb    al,0x0
   25b0e:	test   al,al
   25b10:	jne    25f4f <check_auth+0x104f>
   25b16:	cmp    BYTE PTR [rsp+0x180],0x0
   25b1e:	je     2606f <check_auth+0x116f>
   25b24:	mov    rdi,r12
   25b27:	call   43df0 <md5_init_ctx>
   25b2c:	mov    rdi,QWORD PTR [rsp+0x8]
   25b31:	mov    rdx,r12
   25b34:	mov    esi,0x20
   25b39:	call   446e0 <md5_process_bytes>
   25b3e:	mov    rdx,r12
   25b41:	mov    esi,0x1
   25b46:	lea    rdi,[rip+0x35784]        # 5b2d1 <_IO_stdin_used+0x2d1>
   25b4d:	call   446e0 <md5_process_bytes>
   25b52:	mov    rdi,QWORD PTR [rip+0x5daf7]        # 83650 <nonce.9665>
   25b59:	mov    QWORD PTR [rsp+0x20],rdi
   25b5e:	call   c310 <strlen@plt>
   25b63:	mov    rdi,QWORD PTR [rsp+0x20]
   25b68:	mov    rdx,r12
   25b6b:	mov    rsi,rax
   25b6e:	call   446e0 <md5_process_bytes>
   25b73:	mov    rdx,r12
   25b76:	mov    esi,0x1
   25b7b:	lea    rdi,[rip+0x3574f]        # 5b2d1 <_IO_stdin_used+0x2d1>
   25b82:	call   446e0 <md5_process_bytes>
   25b87:	mov    rdx,r12
   25b8a:	mov    esi,0x8
   25b8f:	lea    rdi,[rip+0x41a3b]        # 675d1 <primes.6089+0x14f1>
   25b96:	call   446e0 <md5_process_bytes>
   25b9b:	mov    esi,0x1
   25ba0:	mov    rdx,r12
   25ba3:	lea    rdi,[rip+0x35727]        # 5b2d1 <_IO_stdin_used+0x2d1>
   25baa:	call   446e0 <md5_process_bytes>
   25baf:	mov    rsi,r14
   25bb2:	mov    edx,DWORD PTR [rsi]
   25bb4:	add    rsi,0x4
   25bb8:	lea    eax,[rdx-0x1010101]
   25bbe:	not    edx
   25bc0:	and    eax,edx
   25bc2:	and    eax,0x80808080
   25bc7:	je     25bb2 <check_auth+0xcb2>
   25bc9:	mov    edx,eax
   25bcb:	shr    edx,0x10
   25bce:	test   eax,0x8080
   25bd3:	cmove  eax,edx
   25bd6:	lea    rdx,[rsi+0x2]
   25bda:	cmove  rsi,rdx
   25bde:	mov    rdx,r12
   25be1:	mov    edi,eax
   25be3:	add    dil,al
   25be6:	mov    rdi,r14
   25be9:	sbb    rsi,0x3
   25bed:	sub    rsi,r14
   25bf0:	call   446e0 <md5_process_bytes>
   25bf5:	lea    rdi,[rip+0x356d5]        # 5b2d1 <_IO_stdin_used+0x2d1>
   25bfc:	mov    rdx,r12
   25bff:	mov    esi,0x1
   25c04:	call   446e0 <md5_process_bytes>
   25c09:	mov    rdi,QWORD PTR [rip+0x5da50]        # 83660 <qop.9666>
   25c10:	mov    QWORD PTR [rsp+0x20],rdi
   25c15:	call   c310 <strlen@plt>
   25c1a:	mov    rdi,QWORD PTR [rsp+0x20]
   25c1f:	mov    rdx,r12
   25c22:	mov    rsi,rax
   25c25:	call   446e0 <md5_process_bytes>
   25c2a:	mov    rdx,r12
   25c2d:	mov    esi,0x1
   25c32:	lea    rdi,[rip+0x35698]        # 5b2d1 <_IO_stdin_used+0x2d1>
   25c39:	call   446e0 <md5_process_bytes>
   25c3e:	mov    rdi,QWORD PTR [rsp+0x10]
   25c43:	mov    rdx,r12
   25c46:	mov    esi,0x20
   25c4b:	call   446e0 <md5_process_bytes>
   25c50:	mov    rdi,r12
   25c53:	mov    rsi,rbx
   25c56:	lea    r12,[rsp+0x200]
   25c5e:	call   445c0 <md5_finish_ctx>
   25c63:	mov    rax,r12
   25c66:	movzx  edx,BYTE PTR [rbx]
   25c69:	add    rax,0x2
   25c6d:	add    rbx,0x1
   25c71:	mov    ecx,edx
   25c73:	and    edx,0xf
   25c76:	shr    cl,0x4
   25c79:	movzx  edx,BYTE PTR [r15+rdx*1]
   25c7e:	and    ecx,0xf
   25c81:	movzx  ecx,BYTE PTR [r15+rcx*1]
   25c86:	mov    BYTE PTR [rax-0x2],cl
   25c89:	mov    BYTE PTR [rax-0x1],dl
   25c8c:	cmp    rbx,QWORD PTR [rsp+0x8]
   25c91:	jne    25c66 <check_auth+0xd66>
   25c93:	mov    rdi,QWORD PTR [rsp+0x48]
   25c98:	mov    BYTE PTR [rsp+0x220],0x0
   25ca0:	call   c310 <strlen@plt>
   25ca5:	mov    rdi,QWORD PTR [rip+0x5d994]        # 83640 <realm.9663>
   25cac:	mov    QWORD PTR [rsp+0x10],rax
   25cb1:	call   c310 <strlen@plt>
   25cb6:	mov    rdi,QWORD PTR [rip+0x5d993]        # 83650 <nonce.9665>
   25cbd:	mov    QWORD PTR [rsp+0x8],rax
   25cc2:	call   c310 <strlen@plt>
   25cc7:	mov    rdi,rbp
   25cca:	mov    rbx,rax
   25ccd:	call   c310 <strlen@plt>
   25cd2:	mov    rcx,QWORD PTR [rsp+0x10]
   25cd7:	mov    rdx,QWORD PTR [rsp+0x8]
   25cdc:	mov    rdi,QWORD PTR [rip+0x5d965]        # 83648 <opaque.9664>
   25ce3:	mov    r15,rax
   25ce6:	lea    rax,[rcx+rdx*1+0xa0]
   25cee:	xor    ecx,ecx
   25cf0:	add    rbx,rax
   25cf3:	test   rdi,rdi
   25cf6:	je     25d00 <check_auth+0xe00>
   25cf8:	call   c310 <strlen@plt>
   25cfd:	mov    rcx,rax
   25d00:	mov    rdi,QWORD PTR [rip+0x5d951]        # 83658 <algorithm.9667>
   25d07:	add    rbx,r15
   25d0a:	xor    edx,edx
   25d0c:	test   rdi,rdi
   25d0f:	je     25d23 <check_auth+0xe23>
   25d11:	mov    QWORD PTR [rsp+0x8],rcx
   25d16:	call   c310 <strlen@plt>
   25d1b:	mov    rcx,QWORD PTR [rsp+0x8]
   25d20:	mov    rdx,rax
   25d23:	add    rcx,rbx
   25d26:	xor    edi,edi
   25d28:	cmp    QWORD PTR [rip+0x5d930],0x0        # 83660 <qop.9666>
   25d30:	mov    rbx,r14
   25d33:	setne  dil
   25d37:	shl    rdi,0x7
   25d3b:	mov    esi,DWORD PTR [rbx]
   25d3d:	add    rbx,0x4
   25d41:	lea    eax,[rsi-0x1010101]
   25d47:	not    esi
   25d49:	and    eax,esi
   25d4b:	and    eax,0x80808080
   25d50:	je     25d3b <check_auth+0xe3b>
   25d52:	mov    esi,eax
   25d54:	shr    esi,0x10
   25d57:	test   eax,0x8080
   25d5c:	cmove  eax,esi
   25d5f:	lea    rsi,[rbx+0x2]
   25d63:	cmove  rbx,rsi
   25d67:	mov    esi,eax
   25d69:	add    sil,al
   25d6c:	lea    rax,[rdx+rcx*1]
   25d70:	sbb    rbx,0x3
   25d74:	add    rax,rdi
   25d77:	sub    rbx,r14
   25d7a:	lea    r15,[rax+rbx*1]
   25d7e:	mov    rdi,r15
   25d81:	call   4b850 <xmalloc>
   25d86:	mov    rsi,QWORD PTR [rip+0x5d8d3]        # 83660 <qop.9666>
   25d8d:	mov    rbx,rax
   25d90:	test   rsi,rsi
   25d93:	je     26284 <check_auth+0x1384>
   25d99:	mov    ecx,0x5
   25d9e:	lea    rdi,[rip+0x417f8]        # 6759d <primes.6089+0x14bd>
   25da5:	mov    rdx,QWORD PTR [rip+0x5d8a4]        # 83650 <nonce.9665>
   25dac:	mov    rax,QWORD PTR [rip+0x5d88d]        # 83640 <realm.9663>
   25db3:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   25db5:	seta   cl
   25db8:	sbb    cl,0x0
   25dbb:	test   cl,cl
   25dbd:	je     26248 <check_auth+0x1348>
   25dc3:	push   r12
   25dc5:	lea    r8,[rip+0x40d44]        # 66b10 <primes.6089+0xa30>
   25dcc:	mov    rsi,r15
   25dcf:	mov    rdi,rbx
   25dd2:	push   rbp
   25dd3:	mov    rcx,0xffffffffffffffff
   25dda:	push   rdx
   25ddb:	mov    edx,0x1
   25de0:	push   rax
   25de1:	mov    r9,QWORD PTR [rsp+0x68]
   25de6:	xor    eax,eax
   25de8:	call   c9d0 <__snprintf_chk@plt>
   25ded:	add    rsp,0x20
   25df1:	mov    r12d,eax
   25df4:	mov    r9,QWORD PTR [rip+0x5d84d]        # 83648 <opaque.9664>
   25dfb:	test   r9,r9
   25dfe:	je     25e29 <check_auth+0xf29>
   25e00:	movsxd rdi,r12d
   25e03:	mov    rsi,r15
   25e06:	lea    r8,[rip+0x417cd]        # 675da <primes.6089+0x14fa>
   25e0d:	xor    eax,eax
   25e0f:	sub    rsi,rdi
   25e12:	mov    rcx,0xffffffffffffffff
   25e19:	add    rdi,rbx
   25e1c:	mov    edx,0x1
   25e21:	call   c9d0 <__snprintf_chk@plt>
   25e26:	add    r12d,eax
   25e29:	mov    r9,QWORD PTR [rip+0x5d828]        # 83658 <algorithm.9667>
   25e30:	test   r9,r9
   25e33:	je     25e5c <check_auth+0xf5c>
   25e35:	movsxd r12,r12d
   25e38:	mov    rsi,r15
   25e3b:	lea    r8,[rip+0x417a6]        # 675e8 <primes.6089+0x1508>
   25e42:	xor    eax,eax
   25e44:	sub    rsi,r12
   25e47:	lea    rdi,[rbx+r12*1]
   25e4b:	mov    edx,0x1
   25e50:	mov    rcx,0xffffffffffffffff
   25e57:	call   c9d0 <__snprintf_chk@plt>
   25e5c:	mov    rdi,QWORD PTR [rip+0x5d7dd]        # 83640 <realm.9663>
   25e63:	call   4bdc0 <rpl_free>
   25e68:	mov    rdi,QWORD PTR [rip+0x5d7d9]        # 83648 <opaque.9664>
   25e6f:	mov    QWORD PTR [rip+0x5d7c6],0x0        # 83640 <realm.9663>
   25e7a:	call   4bdc0 <rpl_free>
   25e7f:	mov    rdi,QWORD PTR [rip+0x5d7ca]        # 83650 <nonce.9665>
   25e86:	mov    QWORD PTR [rip+0x5d7b7],0x0        # 83648 <opaque.9664>
   25e91:	call   4bdc0 <rpl_free>
   25e96:	mov    rdi,QWORD PTR [rip+0x5d7c3]        # 83660 <qop.9666>
   25e9d:	mov    QWORD PTR [rip+0x5d7a8],0x0        # 83650 <nonce.9665>
   25ea8:	call   4bdc0 <rpl_free>
   25ead:	mov    rdi,QWORD PTR [rip+0x5d7a4]        # 83658 <algorithm.9667>
   25eb4:	mov    QWORD PTR [rip+0x5d7a1],0x0        # 83660 <qop.9666>
   25ebf:	call   4bdc0 <rpl_free>
   25ec4:	mov    QWORD PTR [rip+0x5d789],0x0        # 83658 <algorithm.9667>
   25ecf:	jmp    25445 <check_auth+0x545>
   25ed4:	mov    rdi,QWORD PTR [rsp+0x50]
   25ed9:	call   37490 <url_full_path>
   25ede:	mov    edi,0x4
   25ee3:	mov    rbp,rax
   25ee6:	call   4b850 <xmalloc>
   25eeb:	cmp    QWORD PTR [rsp+0x10],0x0
   25ef1:	mov    QWORD PTR [rsp+0x18],rax
   25ef6:	mov    DWORD PTR [rax],0x19
   25efc:	je     25f3a <check_auth+0x103a>
   25efe:	mov    rax,QWORD PTR [rsp+0x10]
   25f03:	mov    QWORD PTR [rsp+0xa0],rax
   25f0b:	mov    rbx,rax
   25f0e:	jmp    253c2 <check_auth+0x4c2>
   25f13:	test   rbx,rbx
   25f16:	je     256db <check_auth+0x7db>
   25f1c:	mov    rdi,QWORD PTR [rsp+0x78]
   25f21:	mov    ecx,0x2
   25f26:	mov    rdx,rbx
   25f29:	lea    rsi,[rip+0x414be]        # 673ee <primes.6089+0x130e>
   25f30:	call   23380 <request_set_header.part.0>
   25f35:	jmp    256db <check_auth+0x7db>
   25f3a:	mov    rax,QWORD PTR [rsp+0x8]
   25f3f:	mov    QWORD PTR [rsp+0xa0],rax
   25f47:	mov    rbx,rax
   25f4a:	jmp    253c2 <check_auth+0x4c2>
   25f4f:	mov    rdi,r12
   25f52:	call   43df0 <md5_init_ctx>
   25f57:	mov    rdi,QWORD PTR [rsp+0x8]
   25f5c:	mov    rdx,r12
   25f5f:	mov    esi,0x20
   25f64:	call   446e0 <md5_process_bytes>
   25f69:	lea    rdi,[rip+0x35361]        # 5b2d1 <_IO_stdin_used+0x2d1>
   25f70:	mov    rdx,r12
   25f73:	mov    esi,0x1
   25f78:	call   446e0 <md5_process_bytes>
   25f7d:	mov    rdi,QWORD PTR [rip+0x5d6cc]        # 83650 <nonce.9665>
   25f84:	jmp    25c10 <check_auth+0xd10>
   25f89:	mov    rax,QWORD PTR [rsp+0x18]
   25f8e:	xor    ebx,ebx
   25f90:	mov    DWORD PTR [rax],0x32
   25f96:	jmp    25e63 <check_auth+0xf63>
   25f9b:	cmp    al,0x20
   25f9d:	je     25717 <check_auth+0x817>
   25fa3:	mov    rax,QWORD PTR [rsp+0x50]
   25fa8:	cmp    QWORD PTR [rax+0x50],0x0
   25fad:	jne    25726 <check_auth+0x826>
   25fb3:	mov    edx,0x5
   25fb8:	lea    rsi,[rip+0x41579]        # 67538 <primes.6089+0x1458>
   25fbf:	mov    rdi,rbx
   25fc2:	call   433b0 <c_strncasecmp>
   25fc7:	test   eax,eax
   25fc9:	jne    25726 <check_auth+0x826>
   25fcf:	movzx  eax,BYTE PTR [rbx+0x5]
   25fd3:	cmp    al,0xd
   25fd5:	jg     26050 <check_auth+0x1150>
   25fd7:	cmp    al,0x8
   25fd9:	jg     25fe3 <check_auth+0x10e3>
   25fdb:	test   al,al
   25fdd:	jne    25726 <check_auth+0x826>
   25fe3:	mov    rax,QWORD PTR [rsp+0x50]
   25fe8:	mov    rdi,QWORD PTR [rip+0x5f6c1]        # 856b0 <basic_authed_hosts>
   25fef:	mov    rbp,QWORD PTR [rax+0x10]
   25ff3:	test   rdi,rdi
   25ff6:	je     26059 <check_auth+0x1159>
   25ff8:	mov    rsi,rbp
   25ffb:	call   1dbf0 <hash_table_contains>
   26000:	test   eax,eax
   26002:	jne    25726 <check_auth+0x826>
   26008:	mov    rdi,rbp
   2600b:	call   4ba50 <xstrdup>
   26010:	mov    rdi,QWORD PTR [rip+0x5f699]        # 856b0 <basic_authed_hosts>
   26017:	xor    edx,edx
   26019:	mov    rsi,rax
   2601c:	call   1dc80 <hash_table_put>
   26021:	cmp    BYTE PTR [rip+0x64293],0x0        # 8a2bb <opt+0x23b>
   26028:	je     25726 <check_auth+0x826>
   2602e:	mov    rdi,rbp
   26031:	call   4b5b0 <quote>
   26036:	lea    rdi,[rip+0x40b1b]        # 66b58 <primes.6089+0xa78>
   2603d:	mov    rsi,rax
   26040:	xor    eax,eax
   26042:	call   2e250 <debug_logprintf>
   26047:	jmp    25726 <check_auth+0x826>
   2604c:	nop    DWORD PTR [rax+0x0]
   26050:	cmp    al,0x20
   26052:	je     25fe3 <check_auth+0x10e3>
   26054:	jmp    25726 <check_auth+0x826>
   26059:	mov    edi,0x1
   2605e:	call   1e160 <make_nocase_string_hash_table>
   26063:	mov    QWORD PTR [rip+0x5f646],rax        # 856b0 <basic_authed_hosts>
   2606a:	mov    rdi,rax
   2606d:	jmp    25ff8 <check_auth+0x10f8>
   2606f:	mov    edi,0x7fffffff
   26074:	call   3e9d0 <random_number>
   26079:	lea    r8,[rip+0x4154c]        # 675cc <primes.6089+0x14ec>
   26080:	mov    ecx,0x10
   26085:	mov    rdi,r14
   26088:	mov    r9d,eax
   2608b:	mov    edx,0x1
   26090:	mov    esi,0x10
   26095:	xor    eax,eax
   26097:	call   c9d0 <__snprintf_chk@plt>
   2609c:	jmp    25b24 <check_auth+0xc24>
   260a1:	mov    edi,0x7fffffff
   260a6:	call   3e9d0 <random_number>
   260ab:	lea    r8,[rip+0x4151a]        # 675cc <primes.6089+0x14ec>
   260b2:	mov    ecx,0x10
   260b7:	mov    rdi,r14
   260ba:	mov    r9d,eax
   260bd:	mov    edx,0x1
   260c2:	mov    esi,0x10
   260c7:	xor    eax,eax
   260c9:	call   c9d0 <__snprintf_chk@plt>
   260ce:	mov    rdi,r12
   260d1:	call   43df0 <md5_init_ctx>
   260d6:	mov    rdi,QWORD PTR [rsp+0x8]
   260db:	mov    rdx,r12
   260de:	mov    esi,0x20
   260e3:	call   446e0 <md5_process_bytes>
   260e8:	mov    rdx,r12
   260eb:	mov    esi,0x1
   260f0:	lea    rdi,[rip+0x351da]        # 5b2d1 <_IO_stdin_used+0x2d1>
   260f7:	call   446e0 <md5_process_bytes>
   260fc:	mov    rdi,QWORD PTR [rip+0x5d54d]        # 83650 <nonce.9665>
   26103:	mov    QWORD PTR [rsp+0x20],rdi
   26108:	call   c310 <strlen@plt>
   2610d:	mov    rdi,QWORD PTR [rsp+0x20]
   26112:	mov    rdx,r12
   26115:	mov    rsi,rax
   26118:	call   446e0 <md5_process_bytes>
   2611d:	mov    esi,0x1
   26122:	mov    rdx,r12
   26125:	lea    rdi,[rip+0x351a5]        # 5b2d1 <_IO_stdin_used+0x2d1>
   2612c:	call   446e0 <md5_process_bytes>
   26131:	mov    rsi,r14
   26134:	mov    edx,DWORD PTR [rsi]
   26136:	add    rsi,0x4
   2613a:	lea    eax,[rdx-0x1010101]
   26140:	not    edx
   26142:	and    eax,edx
   26144:	and    eax,0x80808080
   26149:	je     26134 <check_auth+0x1234>
   2614b:	mov    edx,eax
   2614d:	shr    edx,0x10
   26150:	test   eax,0x8080
   26155:	cmove  eax,edx
   26158:	lea    rdx,[rsi+0x2]
   2615c:	cmove  rsi,rdx
   26160:	mov    rdx,r12
   26163:	mov    edi,eax
   26165:	add    dil,al
   26168:	mov    rdi,r14
   2616b:	sbb    rsi,0x3
   2616f:	sub    rsi,r14
   26172:	call   446e0 <md5_process_bytes>
   26177:	mov    rsi,rbx
   2617a:	mov    rdi,r12
   2617d:	call   445c0 <md5_finish_ctx>
   26182:	mov    rdx,QWORD PTR [rsp+0x8]
   26187:	mov    rax,rbx
   2618a:	movzx  ecx,BYTE PTR [rax]
   2618d:	add    rdx,0x2
   26191:	add    rax,0x1
   26195:	mov    esi,ecx
   26197:	and    ecx,0xf
   2619a:	shr    sil,0x4
   2619e:	movzx  ecx,BYTE PTR [r15+rcx*1]
   261a3:	and    esi,0xf
   261a6:	movzx  esi,BYTE PTR [r15+rsi*1]
   261ab:	mov    BYTE PTR [rdx-0x2],sil
   261af:	mov    BYTE PTR [rdx-0x1],cl
   261b2:	cmp    rax,QWORD PTR [rsp+0x8]
   261b7:	jne    2618a <check_auth+0x128a>
   261b9:	mov    BYTE PTR [rsp+0x1c0],0x0
   261c1:	jmp    25a4a <check_auth+0xb4a>
   261c6:	mov    edx,0x5
   261cb:	lea    rsi,[rip+0x4089e]        # 66a70 <primes.6089+0x990>
   261d2:	xor    edi,edi
   261d4:	call   c780 <dcgettext@plt>
   261d9:	mov    rdx,r12
   261dc:	mov    edi,0x1
   261e1:	mov    rsi,rax
   261e4:	xor    eax,eax
   261e6:	call   2e0a0 <logprintf>
   261eb:	mov    rdi,QWORD PTR [rip+0x5d46e]        # 83660 <qop.9666>
   261f2:	call   4bdc0 <rpl_free>
   261f7:	mov    QWORD PTR [rip+0x5d45e],0x0        # 83660 <qop.9666>
   26202:	jmp    258f9 <check_auth+0x9f9>
   26207:	mov    edx,0x5
   2620c:	lea    rsi,[rip+0x4139c]        # 675af <primes.6089+0x14cf>
   26213:	xor    edi,edi
   26215:	call   c780 <dcgettext@plt>
   2621a:	mov    rdx,r12
   2621d:	mov    edi,0x1
   26222:	mov    rsi,rax
   26225:	xor    eax,eax
   26227:	call   2e0a0 <logprintf>
   2622c:	mov    rdi,QWORD PTR [rip+0x5d425]        # 83658 <algorithm.9667>
   26233:	call   4bdc0 <rpl_free>
   26238:	mov    QWORD PTR [rip+0x5d415],0x0        # 83658 <algorithm.9667>
   26243:	jmp    258f9 <check_auth+0x9f9>
   26248:	sub    rsp,0x8
   2624c:	lea    r8,[rip+0x4084d]        # 66aa0 <primes.6089+0x9c0>
   26253:	mov    rsi,r15
   26256:	mov    rdi,rbx
   26259:	push   r14
   2625b:	mov    rcx,0xffffffffffffffff
   26262:	push   r12
   26264:	push   rbp
   26265:	push   rdx
   26266:	mov    edx,0x1
   2626b:	push   rax
   2626c:	mov    r9,QWORD PTR [rsp+0x78]
   26271:	xor    eax,eax
   26273:	call   c9d0 <__snprintf_chk@plt>
   26278:	add    rsp,0x30
   2627c:	mov    r12d,eax
   2627f:	jmp    25df4 <check_auth+0xef4>
   26284:	mov    rdx,QWORD PTR [rip+0x5d3c5]        # 83650 <nonce.9665>
   2628b:	mov    rax,QWORD PTR [rip+0x5d3ae]        # 83640 <realm.9663>
   26292:	jmp    25dc3 <check_auth+0xec3>
   26297:	call   c7b0 <__stack_chk_fail@plt>
   2629c:	nop    DWORD PTR [rax+0x0]

00000000000262a0 <http_atotm>:
   262a0:	endbr64 
   262a4:	push   r13
   262a6:	xor    esi,esi
   262a8:	push   r12
   262aa:	push   rbp
   262ab:	push   rbx
   262ac:	mov    rbx,rdi
   262af:	mov    edi,0x2
   262b4:	sub    rsp,0x158
   262bb:	mov    rax,QWORD PTR fs:0x28
   262c4:	mov    QWORD PTR [rsp+0x148],rax
   262cc:	xor    eax,eax
   262ce:	call   ca30 <setlocale@plt>
   262d3:	test   rax,rax
   262d6:	je     262f4 <http_atotm+0x54>
   262d8:	mov    rdi,rax
   262db:	mov    rbp,rax
   262de:	call   c310 <strlen@plt>
   262e3:	lea    rdx,[rax+0x1]
   262e7:	cmp    rdx,0xff
   262ee:	jbe    26418 <http_atotm+0x178>
   262f4:	mov    BYTE PTR [rsp+0x40],0x0
   262f9:	lea    rsi,[rip+0x41967]        # 67c67 <primes.6089+0x1b87>
   26300:	mov    edi,0x2
   26305:	lea    r13,[rip+0x56ab4]        # 7cdc0 <time_formats.9627>
   2630c:	mov    r12,rsp
   2630f:	call   ca30 <setlocale@plt>
   26314:	lea    rbp,[r13+0x20]
   26318:	pxor   xmm0,xmm0
   2631c:	mov    rsi,QWORD PTR [r13+0x0]
   26320:	mov    rdx,r12
   26323:	mov    rdi,rbx
   26326:	mov    QWORD PTR [r12+0x30],0x0
   2632f:	movaps XMMWORD PTR [r12],xmm0
   26334:	movaps XMMWORD PTR [r12+0x10],xmm0
   2633a:	movaps XMMWORD PTR [r12+0x20],xmm0
   26340:	call   c6a0 <strptime@plt>
   26345:	test   rax,rax
   26348:	je     263c1 <http_atotm+0x121>
   2634a:	movzx  edx,BYTE PTR [rax]
   2634d:	cmp    dl,0xd
   26350:	jg     263a0 <http_atotm+0x100>
   26352:	cmp    dl,0x8
   26355:	jg     263f0 <http_atotm+0x150>
   2635b:	test   dl,dl
   2635d:	jne    263aa <http_atotm+0x10a>
   2635f:	mov    rdi,r12
   26362:	call   c4e0 <timegm@plt>
   26367:	cmp    BYTE PTR [rsp+0x40],0x0
   2636c:	mov    r12,rax
   2636f:	jne    263dc <http_atotm+0x13c>
   26371:	nop    DWORD PTR [rax+0x0]
   26378:	mov    rax,QWORD PTR [rsp+0x148]
   26380:	xor    rax,QWORD PTR fs:0x28
   26389:	jne    2642f <http_atotm+0x18f>
   2638f:	add    rsp,0x158
   26396:	mov    rax,r12
   26399:	pop    rbx
   2639a:	pop    rbp
   2639b:	pop    r12
   2639d:	pop    r13
   2639f:	ret    
   263a0:	cmp    dl,0x20
   263a3:	je     263f0 <http_atotm+0x150>
   263a5:	cmp    dl,0x47
   263a8:	je     26400 <http_atotm+0x160>
   263aa:	sub    edx,0x2b
   263ad:	and    edx,0xfd
   263b3:	jne    263c1 <http_atotm+0x121>
   263b5:	movsx  eax,BYTE PTR [rax+0x1]
   263b9:	sub    eax,0x30
   263bc:	cmp    eax,0x9
   263bf:	jbe    2635f <http_atotm+0xbf>
   263c1:	add    r13,0x8
   263c5:	cmp    r13,rbp
   263c8:	jne    26318 <http_atotm+0x78>
   263ce:	cmp    BYTE PTR [rsp+0x40],0x0
   263d3:	mov    r12,0xffffffffffffffff
   263da:	je     26378 <http_atotm+0xd8>
   263dc:	lea    rsi,[rsp+0x40]
   263e1:	mov    edi,0x2
   263e6:	call   ca30 <setlocale@plt>
   263eb:	jmp    26378 <http_atotm+0xd8>
   263ed:	nop    DWORD PTR [rax]
   263f0:	add    rax,0x1
   263f4:	jmp    2634a <http_atotm+0xaa>
   263f9:	nop    DWORD PTR [rax+0x0]
   26400:	cmp    BYTE PTR [rax+0x1],0x4d
   26404:	jne    263c1 <http_atotm+0x121>
   26406:	cmp    BYTE PTR [rax+0x2],0x54
   2640a:	jne    263c1 <http_atotm+0x121>
   2640c:	jmp    2635f <http_atotm+0xbf>
   26411:	nop    DWORD PTR [rax+0x0]
   26418:	lea    rdi,[rsp+0x40]
   2641d:	mov    ecx,0x100
   26422:	mov    rsi,rbp
   26425:	call   c170 <__memcpy_chk@plt>
   2642a:	jmp    262f9 <http_atotm+0x59>
   2642f:	call   c7b0 <__stack_chk_fail@plt>
   26434:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2643f:	nop

0000000000026440 <http_loop>:
   26440:	endbr64 
   26444:	push   r15
   26446:	push   r14
   26448:	mov    r14,rdi
   2644b:	push   r13
   2644d:	push   r12
   2644f:	push   rbp
   26450:	push   rbx
   26451:	mov    rbx,r8
   26454:	sub    rsp,0x958
   2645b:	mov    rax,QWORD PTR [rsp+0x998]
   26463:	mov    QWORD PTR [rsp+0xb8],rsi
   2646b:	mov    QWORD PTR [rsp+0x48],rdx
   26470:	mov    r15,QWORD PTR [rsp+0x990]
   26478:	mov    QWORD PTR [rsp+0x60],rcx
   2647d:	mov    QWORD PTR [rsp+0x8],r9
   26482:	mov    QWORD PTR [rsp+0xc8],rax
   2648a:	mov    rax,QWORD PTR fs:0x28
   26493:	mov    QWORD PTR [rsp+0x948],rax
   2649b:	xor    eax,eax
   2649d:	cmp    QWORD PTR [rip+0x63ce3],0x0        # 8a188 <opt+0x108>
   264a5:	setne  BYTE PTR [rsp+0xdd]
   264ad:	test   rcx,rcx
   264b0:	je     264d6 <http_loop+0x96>
   264b2:	mov    rdi,QWORD PTR [rip+0x63cc7]        # 8a180 <opt+0x100>
   264b9:	test   rdi,rdi
   264bc:	je     264d6 <http_loop+0x96>
   264be:	cmp    BYTE PTR [rdi],0x2d
   264c1:	jne    264c9 <http_loop+0x89>
   264c3:	cmp    BYTE PTR [rdi+0x1],0x0
   264c7:	je     264ce <http_loop+0x8e>
   264c9:	call   4ba50 <xstrdup>
   264ce:	mov    rcx,QWORD PTR [rsp+0x60]
   264d3:	mov    QWORD PTR [rcx],rax
   264d6:	mov    rax,QWORD PTR [rsp+0x48]
   264db:	cmp    BYTE PTR [rip+0x63e86],0x0        # 8a368 <opt+0x2e8>
   264e2:	mov    QWORD PTR [rax],0x0
   264e9:	jne    274f0 <http_loop+0x10b0>
   264ef:	cmp    BYTE PTR [rip+0x63d0b],0x0        # 8a201 <opt+0x181>
   264f6:	jne    27538 <http_loop+0x10f8>
   264fc:	lea    rdi,[rsp+0x1a0]
   26504:	mov    ecx,0x14
   26509:	xor    eax,eax
   2650b:	mov    QWORD PTR [rsp+0x30],rdi
   26510:	rep stos QWORD PTR es:[rdi],rax
   26513:	mov    rdi,QWORD PTR [rip+0x63c66]        # 8a180 <opt+0x100>
   2651a:	mov    QWORD PTR [rsp+0x200],rbx
   26522:	test   rdi,rdi
   26525:	je     26d50 <http_loop+0x910>
   2652b:	call   4ba50 <xstrdup>
   26530:	mov    QWORD PTR [rsp+0x208],rax
   26538:	mov    rdi,rax
   2653b:	xor    esi,esi
   2653d:	call   3bed0 <file_exists_p>
   26542:	test   al,al
   26544:	je     2655d <http_loop+0x11d>
   26546:	cmp    BYTE PTR [rip+0x63b65],0x0        # 8a0b2 <opt+0x32>
   2654d:	je     2655d <http_loop+0x11d>
   2654f:	cmp    QWORD PTR [rip+0x63c29],0x0        # 8a180 <opt+0x100>
   26557:	je     28318 <http_loop+0x1ed8>
   2655d:	mov    rbx,QWORD PTR [rsp+0x8]
   26562:	movzx  eax,BYTE PTR [rip+0x63e5b]        # 8a3c4 <opt+0x344>
   26569:	mov    DWORD PTR [rbx],0x0
   2656f:	movzx  ebx,BYTE PTR [rip+0x63b72]        # 8a0e8 <opt+0x68>
   26576:	mov    BYTE PTR [rsp+0xdc],bl
   2657d:	test   al,al
   2657f:	jne    26c00 <http_loop+0x7c0>
   26585:	mov    BYTE PTR [rsp+0xde],0x1
   2658d:	movzx  ebx,BYTE PTR [rip+0x63d28]        # 8a2bc <opt+0x23c>
   26594:	test   bl,bl
   26596:	je     265e7 <http_loop+0x1a7>
   26598:	cmp    BYTE PTR [rip+0x63d1e],0x0        # 8a2bd <opt+0x23d>
   2659f:	je     265d8 <http_loop+0x198>
   265a1:	cmp    BYTE PTR [rsp+0xdc],0x1
   265a9:	je     265d8 <http_loop+0x198>
   265ab:	cmp    BYTE PTR [rsp+0xde],0x0
   265b3:	je     265d8 <http_loop+0x198>
   265b5:	mov    rdi,QWORD PTR [rsp+0x208]
   265bd:	xor    esi,esi
   265bf:	call   3bed0 <file_exists_p>
   265c4:	test   al,al
   265c6:	jne    28430 <http_loop+0x1ff0>
   265cc:	movzx  eax,BYTE PTR [rip+0x63df1]        # 8a3c4 <opt+0x344>
   265d3:	nop    DWORD PTR [rax+rax*1+0x0]
   265d8:	test   al,al
   265da:	je     27de0 <http_loop+0x19a0>
   265e0:	mov    BYTE PTR [rsp+0xdc],bl
   265e7:	test   r15,r15
   265ea:	mov    rbx,r14
   265ed:	lea    rdx,[rip+0x41032]        # 67626 <primes.6089+0x1546>
   265f4:	mov    QWORD PTR [rsp+0xd0],0xffffffffffffffff
   26600:	lea    rax,[rip+0x4695e]        # 6cf65 <eta_str.8886+0x1ed>
   26607:	mov    BYTE PTR [rsp+0xdf],0x0
   2660f:	cmovne rax,rdx
   26613:	mov    BYTE PTR [rsp+0x47],0x0
   26618:	mov    DWORD PTR [rsp+0x40],0x0
   26620:	mov    QWORD PTR [rsp+0x68],rax
   26625:	lea    rax,[rsp+0x128]
   2662d:	mov    QWORD PTR [rsp+0x38],rax
   26632:	lea    rax,[rsp+0x150]
   2663a:	mov    QWORD PTR [rsp+0x28],rax
   2663f:	lea    rax,[rsp+0x158]
   26647:	mov    QWORD PTR [rsp+0x70],rax
   2664c:	mov    QWORD PTR [rsp+0x10],r15
   26651:	add    DWORD PTR [rsp+0x40],0x1
   26656:	mov    eax,DWORD PTR [rsp+0x40]
   2665a:	mov    edi,eax
   2665c:	call   35c50 <sleep_between_retrievals>
   26661:	xor    edi,edi
   26663:	call   cbf0 <time@plt>
   26668:	mov    rdi,rax
   2666b:	call   3bd30 <datetime_str>
   26670:	cmp    BYTE PTR [rip+0x63a71],0x1        # 8a0e8 <opt+0x68>
   26677:	mov    r12,rax
   2667a:	jne    26687 <http_loop+0x247>
   2667c:	cmp    BYTE PTR [rsp+0x47],0x0
   26681:	je     27d90 <http_loop+0x1950>
   26687:	lea    rax,[rip+0x639f2]        # 8a080 <opt>
   2668e:	mov    ecx,DWORD PTR [rax]
   26690:	test   ecx,ecx
   26692:	jne    27200 <http_loop+0xdc0>
   26698:	mov    rax,QWORD PTR [rsp+0x8]
   2669d:	cmp    BYTE PTR [rsp+0x47],0x0
   266a2:	mov    eax,DWORD PTR [rax]
   266a4:	jne    26d40 <http_loop+0x900>
   266aa:	cmp    BYTE PTR [rsp+0xdc],0x0
   266b2:	je     26d40 <http_loop+0x900>
   266b8:	or     eax,0x4
   266bb:	mov    rcx,QWORD PTR [rsp+0x8]
   266c0:	cmp    BYTE PTR [rsp+0xdd],0x0
   266c8:	mov    DWORD PTR [rcx],eax
   266ca:	je     26d20 <http_loop+0x8e0>
   266d0:	mov    rdx,QWORD PTR [rsp+0x1a0]
   266d8:	mov    QWORD PTR [rsp+0x1b0],rdx
   266e0:	cmp    QWORD PTR [rsp+0x10],0x0
   266e6:	je     26d00 <http_loop+0x8c0>
   266ec:	cmp    DWORD PTR [rsp+0x40],0x1
   266f1:	jle    26d00 <http_loop+0x8c0>
   266f7:	or     eax,0x8
   266fa:	mov    DWORD PTR [rsp+0x50],eax
   266fe:	mov    eax,DWORD PTR [rsp+0x50]
   26702:	mov    rcx,QWORD PTR [rsp+0x8]
   26707:	mov    QWORD PTR [rsp+0x128],0x0
   26713:	mov    DWORD PTR [rsp+0x124],0xffffffff
   2671e:	mov    DWORD PTR [rcx],eax
   26720:	and    eax,0x4
   26723:	cmp    BYTE PTR [rip+0x63af6],0x0        # 8a220 <opt+0x1a0>
   2672a:	mov    DWORD PTR [rsp+0xd8],eax
   26731:	mov    rax,QWORD PTR [rip+0x63a50]        # 8a188 <opt+0x108>
   26738:	mov    BYTE PTR [rsp+0x11f],0x0
   26740:	mov    BYTE PTR [rsp+0x120],0x0
   26748:	mov    BYTE PTR [rsp+0x121],0x0
   26750:	mov    BYTE PTR [rsp+0x122],0x0
   26758:	mov    QWORD PTR [rsp+0x150],0x0
   26764:	mov    QWORD PTR [rsp+0x158],0x0
   26770:	mov    QWORD PTR [rsp+0x20],rax
   26775:	mov    DWORD PTR [rsp+0x18],0x1
   2677d:	je     2678a <http_loop+0x34a>
   2677f:	movzx  eax,BYTE PTR [rip+0x63913]        # 8a099 <opt+0x19>
   26786:	mov    DWORD PTR [rsp+0x18],eax
   2678a:	mov    QWORD PTR [rsp+0x160],0x0
   26796:	cmp    DWORD PTR [rbx+0x8],0x1
   2679a:	je     26e70 <http_loop+0xa30>
   267a0:	mov    rdi,QWORD PTR [rsp+0x1c0]
   267a8:	mov    QWORD PTR [rsp+0x1a0],0x0
   267b4:	mov    QWORD PTR [rsp+0x1a8],0xffffffffffffffff
   267c0:	mov    DWORD PTR [rsp+0x1b8],0xffffffff
   267cb:	call   4bdc0 <rpl_free>
   267d0:	mov    rdi,QWORD PTR [rsp+0x1c8]
   267d8:	mov    QWORD PTR [rsp+0x1c0],0x0
   267e4:	call   4bdc0 <rpl_free>
   267e9:	mov    rdi,QWORD PTR [rsp+0x1d0]
   267f1:	mov    QWORD PTR [rsp+0x1c8],0x0
   267fd:	call   4bdc0 <rpl_free>
   26802:	mov    rdi,QWORD PTR [rsp+0x1d8]
   2680a:	mov    QWORD PTR [rsp+0x1d0],0x0
   26816:	call   4bdc0 <rpl_free>
   2681b:	mov    rdi,QWORD PTR [rsp+0x1e8]
   26823:	mov    QWORD PTR [rsp+0x1d8],0x0
   2682f:	call   4bdc0 <rpl_free>
   26834:	lea    r9,[rsp+0x120]
   2683c:	lea    rax,[rsp+0x190]
   26844:	mov    rdi,rbx
   26847:	mov    QWORD PTR [rsp+0x58],rax
   2684c:	mov    QWORD PTR [rsp+0x1e8],0x0
   26858:	mov    QWORD PTR [rsp+0x230],0x0
   26864:	mov    QWORD PTR [rsp+0x148],rbx
   2686c:	mov    QWORD PTR [rsp+0xa8],r9
   26874:	push   rax
   26875:	lea    rax,[rsp+0x140]
   2687d:	push   rax
   2687e:	lea    rax,[rsp+0x140]
   26886:	push   rax
   26887:	lea    rax,[rsp+0x178]
   2688f:	push   rax
   26890:	mov    r8d,DWORD PTR [rsp+0x38]
   26895:	mov    rcx,QWORD PTR [rsp+0x30]
   2689a:	mov    rdx,QWORD PTR [rsp+0x28]
   2689f:	mov    rsi,QWORD PTR [rsp+0x50]
   268a4:	call   24320 <initialize_request>
   268a9:	mov    QWORD PTR [rsp+0x148],rax
   268b1:	mov    rbp,rax
   268b4:	add    rsp,0x20
   268b8:	test   rax,rax
   268bb:	je     27d78 <http_loop+0x1938>
   268c1:	movzx  eax,BYTE PTR [rsp+0x18]
   268c6:	xor    ebp,ebp
   268c8:	mov    QWORD PTR [rsp+0xa0],0xffffffffffffffff
   268d4:	mov    QWORD PTR [rsp+0x98],0x0
   268e0:	not    eax
   268e2:	and    eax,0x1
   268e5:	mov    BYTE PTR [rsp+0xb0],al
   268ec:	lea    rax,[rsp+0x140]
   268f4:	mov    QWORD PTR [rsp+0x88],rax
   268fc:	lea    rax,[rsp+0x148]
   26904:	mov    QWORD PTR [rsp+0x90],rax
   2690c:	lea    rax,[rsp+0x124]
   26914:	mov    QWORD PTR [rsp+0x80],rax
   2691c:	lea    rax,[rsp+0x122]
   26924:	mov    QWORD PTR [rsp+0x78],rax
   26929:	cmp    BYTE PTR [rip+0x63a38],0x0        # 8a368 <opt+0x2e8>
   26930:	jne    26db8 <http_loop+0x978>
   26936:	mov    r15,QWORD PTR [rip+0x638db]        # 8a218 <opt+0x198>
   2693d:	test   r15,r15
   26940:	jne    26c40 <http_loop+0x800>
   26946:	cmp    QWORD PTR [rsp+0x10],0x0
   2694c:	mov    QWORD PTR [rsp+0x140],0x0
   26958:	je     269be <http_loop+0x57e>
   2695a:	mov    rax,QWORD PTR [rsp+0x10]
   2695f:	mov    rdi,QWORD PTR [rip+0x638fa]        # 8a260 <opt+0x1e0>
   26966:	mov    QWORD PTR [rsp+0x148],rax
   2696e:	test   rdi,rdi
   26971:	je     26d90 <http_loop+0x950>
   26977:	mov    rsi,QWORD PTR [rip+0x638ea]        # 8a268 <opt+0x1e8>
   2697e:	test   rsi,rsi
   26981:	je     26d90 <http_loop+0x950>
   26987:	mov    r12,QWORD PTR [rsp+0x128]
   2698f:	call   229a0 <basic_authentication_encode>
   26994:	cmp    DWORD PTR [rbx+0x8],0x1
   26998:	mov    QWORD PTR [rsp+0x140],rax
   269a0:	mov    rdx,rax
   269a3:	je     269be <http_loop+0x57e>
   269a5:	test   rax,rax
   269a8:	je     269be <http_loop+0x57e>
   269aa:	mov    ecx,0x2
   269af:	lea    rsi,[rip+0x40a32]        # 673e8 <primes.6089+0x1308>
   269b6:	mov    rdi,r12
   269b9:	call   23380 <request_set_header.part.0>
   269be:	sub    rsp,0x8
   269c2:	mov    rdi,rbx
   269c5:	push   QWORD PTR [rsp+0x88]
   269cc:	mov    eax,DWORD PTR [rsp+0x28]
   269d0:	push   rax
   269d1:	push   QWORD PTR [rsp+0x90]
   269d8:	mov    r9,QWORD PTR [rsp+0x58]
   269dd:	mov    r8,QWORD PTR [rsp+0xa8]
   269e5:	mov    rcx,QWORD PTR [rsp+0x30]
   269ea:	mov    rdx,QWORD PTR [rsp+0x50]
   269ef:	mov    rsi,QWORD PTR [rsp+0xb0]
   269f7:	call   23a60 <establish_connection>
   269fc:	add    rsp,0x20
   26a00:	cmp    eax,0x19
   26a03:	jne    28460 <http_loop+0x2020>
   26a09:	cmp    QWORD PTR [rsp+0x20],0x0
   26a0f:	mov    r8d,DWORD PTR [rsp+0x124]
   26a17:	je     26a3e <http_loop+0x5fe>
   26a19:	call   39ba0 <warc_tempfile>
   26a1e:	mov    rbp,rax
   26a21:	test   rax,rax
   26a24:	je     28490 <http_loop+0x2050>
   26a2a:	cmp    QWORD PTR [rsp+0x10],0x0
   26a30:	mov    r8d,DWORD PTR [rsp+0x124]
   26a38:	je     27e00 <http_loop+0x19c0>
   26a3e:	mov    rdi,QWORD PTR [rsp+0x128]
   26a46:	mov    rdx,rbp
   26a49:	mov    esi,r8d
   26a4c:	call   22740 <request_send>
   26a51:	mov    r13d,eax
   26a54:	test   eax,eax
   26a56:	js     27998 <http_loop+0x1558>
   26a5c:	mov    rsi,QWORD PTR [rip+0x6393d]        # 8a3a0 <opt+0x320>
   26a63:	test   rsi,rsi
   26a66:	je     275b0 <http_loop+0x1170>
   26a6c:	cmp    BYTE PTR [rip+0x63848],0x0        # 8a2bb <opt+0x23b>
   26a73:	jne    28380 <http_loop+0x1f40>
   26a79:	mov    rax,QWORD PTR [rip+0x347a0]        # 5b220 <_IO_stdin_used+0x220>
   26a80:	mov    edx,DWORD PTR [rsp+0x160]
   26a87:	mov    edi,DWORD PTR [rsp+0x124]
   26a8e:	movq   xmm0,rax
   26a93:	call   f2a0 <fd_write>
   26a98:	mov    r13d,eax
   26a9b:	test   eax,eax
   26a9d:	js     27998 <http_loop+0x1558>
   26aa3:	test   rbp,rbp
   26aa6:	jne    27950 <http_loop+0x1510>
   26aac:	test   eax,eax
   26aae:	js     27998 <http_loop+0x1558>
   26ab4:	xor    edi,edi
   26ab6:	mov    edx,0x5
   26abb:	lea    rsi,[rip+0x40186]        # 66c48 <primes.6089+0xb68>
   26ac2:	call   c780 <dcgettext@plt>
   26ac7:	mov    rdx,QWORD PTR [rsp+0x68]
   26acc:	xor    edi,edi
   26ace:	mov    rsi,rax
   26ad1:	xor    eax,eax
   26ad3:	call   2e0a0 <logprintf>
   26ad8:	mov    rax,QWORD PTR [rsp+0x8]
   26add:	and    DWORD PTR [rax],0xfffffffd
   26ae0:	cmp    QWORD PTR [rsp+0x20],0x0
   26ae6:	je     26bb1 <http_loop+0x771>
   26aec:	lea    r12,[rsp+0x2f0]
   26af4:	mov    esi,0x15
   26af9:	lea    r13,[rsp+0x310]
   26b01:	mov    rdi,r12
   26b04:	call   399c0 <warc_timestamp>
   26b09:	mov    esi,0x30
   26b0e:	mov    rdi,r13
   26b11:	call   39aa0 <warc_uuid_str>
   26b16:	mov    rdi,QWORD PTR [rbx]
   26b19:	mov    r8,rbp
   26b1c:	mov    rdx,r13
   26b1f:	mov    r9,QWORD PTR [rsp+0xa0]
   26b27:	mov    rcx,QWORD PTR [rsp+0x98]
   26b2f:	mov    rsi,r12
   26b32:	call   3aac0 <warc_write_request_record>
   26b37:	test   al,al
   26b39:	jne    26bb1 <http_loop+0x771>
   26b3b:	jmp    285d0 <http_loop+0x2190>
   26b40:	mov    rdi,r12
   26b43:	call   22b30 <resp_new>
   26b48:	mov    rdi,QWORD PTR [rsp+0x158]
   26b50:	mov    QWORD PTR [rsp+0x150],rax
   26b58:	call   4bdc0 <rpl_free>
   26b5d:	mov    rax,QWORD PTR [rsp+0x150]
   26b65:	mov    rsi,QWORD PTR [rsp+0x70]
   26b6a:	mov    QWORD PTR [rsp+0x158],0x0
   26b76:	mov    rdi,QWORD PTR [rax+0x8]
   26b7a:	call   235e0 <resp_status.isra.0>
   26b7f:	mov    r15d,eax
   26b82:	test   eax,eax
   26b84:	js     26ec0 <http_loop+0xa80>
   26b8a:	lea    eax,[rax-0x64]
   26b8d:	cmp    eax,0x63
   26b90:	ja     27280 <http_loop+0xe40>
   26b96:	mov    rdi,r12
   26b99:	call   4bdc0 <rpl_free>
   26b9e:	mov    rdi,QWORD PTR [rsp+0x28]
   26ba3:	call   22570 <resp_free>
   26ba8:	cmp    BYTE PTR [rip+0x6370c],0x0        # 8a2bb <opt+0x23b>
   26baf:	jne    26c28 <http_loop+0x7e8>
   26bb1:	mov    edi,DWORD PTR [rsp+0x124]
   26bb8:	mov    ecx,0x10000
   26bbd:	mov    edx,0x200
   26bc2:	lea    rsi,[rip+0xffffffffffffc107]        # 22cd0 <response_head_terminator>
   26bc9:	call   344f0 <fd_read_hunk>
   26bce:	mov    r12,rax
   26bd1:	test   rax,rax
   26bd4:	je     26e08 <http_loop+0x9c8>
   26bda:	cmp    BYTE PTR [rip+0x636da],0x0        # 8a2bb <opt+0x23b>
   26be1:	je     26b40 <http_loop+0x700>
   26be7:	mov    rsi,rax
   26bea:	lea    rdi,[rip+0x4007f]        # 66c70 <primes.6089+0xb90>
   26bf1:	xor    eax,eax
   26bf3:	call   2e250 <debug_logprintf>
   26bf8:	jmp    26b40 <http_loop+0x700>
   26bfd:	nop    DWORD PTR [rax]
   26c00:	mov    BYTE PTR [rsp+0xde],al
   26c07:	movzx  eax,BYTE PTR [rip+0x635d2]        # 8a1e0 <opt+0x160>
   26c0e:	test   al,al
   26c10:	je     27570 <http_loop+0x1130>
   26c16:	mov    BYTE PTR [rsp+0xdc],al
   26c1d:	jmp    2658d <http_loop+0x14d>
   26c22:	nop    WORD PTR [rax+rax*1+0x0]
   26c28:	lea    rdi,[rip+0x40a7c]        # 676ab <primes.6089+0x15cb>
   26c2f:	xor    eax,eax
   26c31:	call   2e250 <debug_logprintf>
   26c36:	jmp    26bb1 <http_loop+0x771>
   26c3b:	nop    DWORD PTR [rax+rax*1+0x0]
   26c40:	mov    r14,QWORD PTR [r15]
   26c43:	test   r14,r14
   26c46:	je     26946 <http_loop+0x506>
   26c4c:	mov    r12d,0x8
   26c52:	jmp    26c81 <http_loop+0x841>
   26c54:	nop    DWORD PTR [rax+0x0]
   26c58:	cmp    al,0x8
   26c5a:	jg     26cbe <http_loop+0x87e>
   26c5c:	mov    rdi,r15
   26c5f:	mov    ecx,0x1
   26c64:	call   23380 <request_set_header.part.0>
   26c69:	mov    r15,QWORD PTR [rip+0x635a8]        # 8a218 <opt+0x198>
   26c70:	mov    r14,QWORD PTR [r15+r12*1]
   26c74:	add    r12,0x8
   26c78:	test   r14,r14
   26c7b:	je     26946 <http_loop+0x506>
   26c81:	mov    esi,0x3a
   26c86:	mov    rdi,r14
   26c89:	call   c6c0 <strchr@plt>
   26c8e:	mov    r13,rax
   26c91:	test   rax,rax
   26c94:	je     26c70 <http_loop+0x830>
   26c96:	mov    rsi,rax
   26c99:	mov    rdi,r14
   26c9c:	mov    r15,QWORD PTR [rsp+0x128]
   26ca4:	sub    rsi,r14
   26ca7:	call   4bb00 <xstrndup>
   26cac:	lea    rdx,[r13+0x1]
   26cb0:	mov    rsi,rax
   26cb3:	movzx  eax,BYTE PTR [rdx]
   26cb6:	cmp    al,0xd
   26cb8:	jle    26c58 <http_loop+0x818>
   26cba:	cmp    al,0x20
   26cbc:	jne    26c5c <http_loop+0x81c>
   26cbe:	add    rdx,0x1
   26cc2:	jmp    26cb3 <http_loop+0x873>
   26cc4:	nop    DWORD PTR [rax+0x0]
   26cc8:	cmp    BYTE PTR [rip+0x63511],0x0        # 8a1e0 <opt+0x160>
   26ccf:	je     26cdf <http_loop+0x89f>
   26cd1:	cmp    BYTE PTR [rsp+0xde],0x0
   26cd9:	jne    282c0 <http_loop+0x1e80>
   26cdf:	cmp    DWORD PTR [rsp+0x40],0x1
   26ce4:	jne    27a00 <http_loop+0x15c0>
   26cea:	mov    rax,QWORD PTR [rsp+0x8]
   26cef:	mov    QWORD PTR [rsp+0x1b0],0x0
   26cfb:	mov    eax,DWORD PTR [rax]
   26cfd:	nop    DWORD PTR [rax]
   26d00:	mov    ecx,eax
   26d02:	and    ecx,0xfffffff7
   26d05:	cmp    BYTE PTR [rip+0x63516],0x0        # 8a222 <opt+0x1a2>
   26d0c:	mov    DWORD PTR [rsp+0x50],ecx
   26d10:	jne    266fe <http_loop+0x2be>
   26d16:	jmp    266f7 <http_loop+0x2b7>
   26d1b:	nop    DWORD PTR [rax+rax*1+0x0]
   26d20:	mov    rdx,QWORD PTR [rip+0x634c1]        # 8a1e8 <opt+0x168>
   26d27:	test   rdx,rdx
   26d2a:	js     26cc8 <http_loop+0x888>
   26d2c:	mov    QWORD PTR [rsp+0x1b0],rdx
   26d34:	jmp    266e0 <http_loop+0x2a0>
   26d39:	nop    DWORD PTR [rax+0x0]
   26d40:	and    eax,0xfffffffb
   26d43:	jmp    266bb <http_loop+0x27b>
   26d48:	nop    DWORD PTR [rax+rax*1+0x0]
   26d50:	cmp    BYTE PTR [rip+0x6366d],0x0        # 8a3c4 <opt+0x344>
   26d57:	jne    27580 <http_loop+0x1140>
   26d5d:	mov    rdi,QWORD PTR [rsp+0xb8]
   26d65:	cmp    BYTE PTR [rip+0x6366c],0x0        # 8a3d8 <opt+0x358>
   26d6c:	cmovne rdi,r14
   26d70:	xor    esi,esi
   26d72:	call   37670 <url_file_name>
   26d77:	mov    QWORD PTR [rsp+0x208],rax
   26d7f:	mov    rdi,rax
   26d82:	jmp    2653b <http_loop+0xfb>
   26d87:	nop    WORD PTR [rax+rax*1+0x0]
   26d90:	mov    rax,QWORD PTR [rsp+0x10]
   26d95:	mov    rdi,QWORD PTR [rax+0x50]
   26d99:	mov    rsi,QWORD PTR [rax+0x58]
   26d9d:	test   rdi,rdi
   26da0:	je     269be <http_loop+0x57e>
   26da6:	test   rsi,rsi
   26da9:	je     269be <http_loop+0x57e>
   26daf:	jmp    26987 <http_loop+0x547>
   26db4:	nop    DWORD PTR [rax+0x0]
   26db8:	cmp    DWORD PTR [rbx+0x8],0x1
   26dbc:	mov    edx,DWORD PTR [rbx+0x18]
   26dbf:	sete   r8b
   26dc3:	mov    rcx,QWORD PTR [rbx+0x20]
   26dc7:	mov    rsi,QWORD PTR [rbx+0x10]
   26dcb:	mov    rdi,QWORD PTR [rip+0x5e8e6]        # 856b8 <wget_cookie_jar>
   26dd2:	movzx  r8d,r8b
   26dd6:	call   124e0 <cookie_header>
   26ddb:	mov    rdx,rax
   26dde:	test   rax,rax
   26de1:	je     26936 <http_loop+0x4f6>
   26de7:	mov    rdi,QWORD PTR [rsp+0x128]
   26def:	mov    ecx,0x2
   26df4:	lea    rsi,[rip+0x408e1]        # 676dc <primes.6089+0x15fc>
   26dfb:	call   23380 <request_set_header.part.0>
   26e00:	jmp    26936 <http_loop+0x4f6>
   26e05:	nop    DWORD PTR [rax]
   26e08:	call   c740 <__errno_location@plt>
   26e0d:	mov    edx,DWORD PTR [rax]
   26e0f:	test   edx,edx
   26e11:	jne    27718 <http_loop+0x12d8>
   26e17:	xor    edi,edi
   26e19:	mov    edx,0x5
   26e1e:	lea    rsi,[rip+0x40856]        # 6767b <primes.6089+0x159b>
   26e25:	call   c780 <dcgettext@plt>
   26e2a:	mov    edi,0x1
   26e2f:	mov    rsi,rax
   26e32:	call   2de60 <logputs>
   26e37:	cmp    BYTE PTR [rip+0x5e86a],0x0        # 856a8 <pconn_active>
   26e3e:	mov    edi,DWORD PTR [rsp+0x124]
   26e45:	je     26e53 <http_loop+0xa13>
   26e47:	cmp    DWORD PTR [rip+0x5e833],edi        # 85680 <pconn>
   26e4d:	je     28410 <http_loop+0x1fd0>
   26e53:	call   f400 <fd_close>
   26e58:	mov    DWORD PTR [rsp+0x124],0xffffffff
   26e63:	xor    ebp,ebp
   26e65:	mov    r13d,0x16
   26e6b:	jmp    26f67 <http_loop+0xb27>
   26e70:	call   411d0 <ssl_init>
   26e75:	test   al,al
   26e77:	jne    267a0 <http_loop+0x360>
   26e7d:	mov    edi,0x1
   26e82:	xor    r12d,r12d
   26e85:	mov    r13d,0x2d
   26e8b:	xor    ebp,ebp
   26e8d:	call   372b0 <scheme_disable>
   26e92:	mov    edx,0x5
   26e97:	lea    rsi,[rip+0x3fd7a]        # 66c18 <primes.6089+0xb38>
   26e9e:	xor    edi,edi
   26ea0:	call   c780 <dcgettext@plt>
   26ea5:	mov    edi,0x1
   26eaa:	mov    rsi,rax
   26ead:	xor    eax,eax
   26eaf:	call   2e0a0 <logprintf>
   26eb4:	jmp    26f67 <http_loop+0xb27>
   26eb9:	nop    DWORD PTR [rax+0x0]
   26ec0:	xor    edi,edi
   26ec2:	call   cbf0 <time@plt>
   26ec7:	mov    rdi,rax
   26eca:	call   3bd30 <datetime_str>
   26ecf:	xor    edi,edi
   26ed1:	mov    edx,r15d
   26ed4:	lea    rsi,[rip+0x47cb1]        # 6eb8c <CSWTCH.5+0x34c>
   26edb:	mov    r13,rax
   26ede:	xor    eax,eax
   26ee0:	call   2e0a0 <logprintf>
   26ee5:	mov    edx,0x5
   26eea:	xor    edi,edi
   26eec:	lea    rsi,[rip+0x4052a]        # 6741d <primes.6089+0x133d>
   26ef3:	call   c780 <dcgettext@plt>
   26ef8:	mov    edi,0x7
   26efd:	mov    rsi,rax
   26f00:	call   4b2b0 <quotearg_style>
   26f05:	xor    edi,edi
   26f07:	mov    edx,0x5
   26f0c:	lea    rsi,[rip+0x40520]        # 67433 <primes.6089+0x1353>
   26f13:	mov    rbp,rax
   26f16:	call   c780 <dcgettext@plt>
   26f1b:	mov    edi,0x1
   26f20:	mov    r8,rbp
   26f23:	mov    ecx,r15d
   26f26:	mov    rsi,rax
   26f29:	mov    rdx,r13
   26f2c:	xor    eax,eax
   26f2e:	call   2e0a0 <logprintf>
   26f33:	cmp    BYTE PTR [rip+0x5e76e],0x0        # 856a8 <pconn_active>
   26f3a:	mov    edi,DWORD PTR [rsp+0x124]
   26f41:	je     26f4f <http_loop+0xb0f>
   26f43:	cmp    DWORD PTR [rip+0x5e737],edi        # 85680 <pconn>
   26f49:	je     281a8 <http_loop+0x1d68>
   26f4f:	call   f400 <fd_close>
   26f54:	mov    DWORD PTR [rsp+0x124],0xffffffff
   26f5f:	mov    r13d,0x18
   26f65:	xor    ebp,ebp
   26f67:	mov    rdi,r12
   26f6a:	call   4bdc0 <rpl_free>
   26f6f:	mov    rdi,rbp
   26f72:	call   4bdc0 <rpl_free>
   26f77:	mov    rdi,QWORD PTR [rsp+0x158]
   26f7f:	call   4bdc0 <rpl_free>
   26f84:	mov    rdi,QWORD PTR [rsp+0x28]
   26f89:	mov    QWORD PTR [rsp+0x158],0x0
   26f95:	call   22570 <resp_free>
   26f9a:	mov    rdi,QWORD PTR [rsp+0x38]
   26f9f:	call   232a0 <request_free>
   26fa4:	xor    edi,edi
   26fa6:	call   cbf0 <time@plt>
   26fab:	mov    rdi,rax
   26fae:	call   3bd30 <datetime_str>
   26fb3:	mov    rdi,QWORD PTR [rsp+0x1c8]
   26fbb:	mov    r12,rax
   26fbe:	test   rdi,rdi
   26fc1:	je     26fd0 <http_loop+0xb90>
   26fc3:	call   4ba50 <xstrdup>
   26fc8:	mov    rcx,QWORD PTR [rsp+0x48]
   26fcd:	mov    QWORD PTR [rcx],rax
   26fd0:	cmp    r13d,0x36
   26fd4:	ja     cc80 <http_loop.cold+0x5>
   26fda:	lea    rcx,[rip+0x4097f]        # 67960 <primes.6089+0x1880>
   26fe1:	mov    edx,r13d
   26fe4:	movsxd rax,DWORD PTR [rcx+rdx*4]
   26fe8:	add    rax,rcx
   26feb:	notrack jmp rax
   26fee:	xchg   ax,ax
   26ff0:	test   rdi,rdi
   26ff3:	jne    27c7e <http_loop+0x183e>
   26ff9:	cmp    BYTE PTR [rsp+0xdc],0x0
   27001:	jne    27d0c <http_loop+0x18cc>
   27007:	nop    WORD PTR [rax+rax*1+0x0]
   27010:	cmp    BYTE PTR [rip+0x633c2],0x0        # 8a3d9 <opt+0x359>
   27017:	je     27058 <http_loop+0xc18>
   27019:	cmp    QWORD PTR [rsp+0xd0],0xffffffffffffffff
   27022:	je     27058 <http_loop+0xc18>
   27024:	mov    rax,QWORD PTR [rsp+0x1a8]
   2702c:	cmp    QWORD PTR [rsp+0x1a0],rax
   27034:	je     28a12 <http_loop+0x25d2>
   2703a:	mov    r11d,DWORD PTR [rsp+0x1b8]
   27042:	test   r11d,r11d
   27045:	jne    27058 <http_loop+0xc18>
   27047:	cmp    rax,0xffffffffffffffff
   2704b:	je     28a12 <http_loop+0x25d2>
   27051:	nop    DWORD PTR [rax+0x0]
   27058:	movsd  xmm0,QWORD PTR [rsp+0x1f8]
   27061:	mov    rdi,QWORD PTR [rsp+0x1f0]
   27069:	call   351d0 <retr_rate>
   2706e:	movsd  xmm0,QWORD PTR [rip+0x633d2]        # 8a448 <total_download_time>
   27076:	addsd  xmm0,QWORD PTR [rsp+0x1f8]
   2707f:	mov    r8,QWORD PTR [rsp+0x1a0]
   27087:	mov    rdi,QWORD PTR [rsp+0x1a8]
   2708f:	mov    r13,rax
   27092:	movsd  QWORD PTR [rip+0x633ae],xmm0        # 8a448 <total_download_time>
   2709a:	cmp    r8,rdi
   2709d:	je     29714 <http_loop+0x32d4>
   270a3:	mov    r9d,DWORD PTR [rsp+0x1b8]
   270ab:	test   r9d,r9d
   270ae:	jne    28508 <http_loop+0x20c8>
   270b4:	cmp    rdi,0xffffffffffffffff
   270b8:	je     29dee <http_loop+0x39ae>
   270be:	cmp    r8,rdi
   270c1:	jl     2890c <http_loop+0x24cc>
   270c7:	cmp    r8,QWORD PTR [rsp+0x1b0]
   270cf:	jne    cc7b <http_loop.cold>
   270d5:	nop    DWORD PTR [rax]
   270d8:	mov    r8d,0x19
   270de:	mov    rbx,QWORD PTR [rsp+0x60]
   270e3:	test   rbx,rbx
   270e6:	je     2711d <http_loop+0xcdd>
   270e8:	mov    rdi,QWORD PTR [rbx]
   270eb:	mov    DWORD PTR [rsp+0x8],r8d
   270f0:	call   4bdc0 <rpl_free>
   270f5:	mov    rax,QWORD PTR [rsp+0x208]
   270fd:	mov    r8d,DWORD PTR [rsp+0x8]
   27102:	mov    QWORD PTR [rbx],0x0
   27109:	test   rax,rax
   2710c:	je     2711d <http_loop+0xcdd>
   2710e:	mov    QWORD PTR [rbx],rax
   27111:	mov    QWORD PTR [rsp+0x208],0x0
   2711d:	mov    rdi,QWORD PTR [rsp+0x1c8]
   27125:	mov    DWORD PTR [rsp+0x8],r8d
   2712a:	call   4bdc0 <rpl_free>
   2712f:	mov    rdi,QWORD PTR [rsp+0x1d0]
   27137:	mov    QWORD PTR [rsp+0x1c8],0x0
   27143:	call   4bdc0 <rpl_free>
   27148:	mov    rdi,QWORD PTR [rsp+0x1d8]
   27150:	mov    QWORD PTR [rsp+0x1d0],0x0
   2715c:	call   4bdc0 <rpl_free>
   27161:	mov    rdi,QWORD PTR [rsp+0x1c0]
   27169:	mov    QWORD PTR [rsp+0x1d8],0x0
   27175:	call   4bdc0 <rpl_free>
   2717a:	mov    rdi,QWORD PTR [rsp+0x208]
   27182:	mov    QWORD PTR [rsp+0x1c0],0x0
   2718e:	call   4bdc0 <rpl_free>
   27193:	mov    rdi,QWORD PTR [rsp+0x218]
   2719b:	mov    QWORD PTR [rsp+0x208],0x0
   271a7:	call   4bdc0 <rpl_free>
   271ac:	mov    rdi,QWORD PTR [rsp+0x1e8]
   271b4:	mov    QWORD PTR [rsp+0x218],0x0
   271c0:	call   4bdc0 <rpl_free>
   271c5:	mov    r8d,DWORD PTR [rsp+0x8]
   271ca:	mov    rax,QWORD PTR [rsp+0x948]
   271d2:	xor    rax,QWORD PTR fs:0x28
   271db:	jne    298bd <http_loop+0x347d>
   271e1:	add    rsp,0x958
   271e8:	mov    eax,r8d
   271eb:	pop    rbx
   271ec:	pop    rbp
   271ed:	pop    r12
   271ef:	pop    r13
   271f1:	pop    r14
   271f3:	pop    r15
   271f5:	ret    
   271f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27200:	mov    esi,0x1
   27205:	mov    rdi,rbx
   27208:	call   38230 <url_string>
   2720d:	mov    r14d,DWORD PTR [rsp+0x40]
   27212:	mov    rbp,rax
   27215:	cmp    r14d,0x1
   27219:	je     27db8 <http_loop+0x1978>
   2721f:	mov    edx,0x5
   27224:	lea    rsi,[rip+0x34611]        # 5b83c <_IO_stdin_used+0x83c>
   2722b:	xor    edi,edi
   2722d:	call   c780 <dcgettext@plt>
   27232:	lea    r13,[rsp+0x540]
   2723a:	mov    r8d,r14d
   2723d:	mov    edx,0x100
   27242:	mov    rcx,rax
   27245:	mov    esi,0x1
   2724a:	mov    rdi,r13
   2724d:	xor    eax,eax
   2724f:	call   c950 <__sprintf_chk@plt>
   27254:	mov    r8,rbp
   27257:	mov    rcx,r13
   2725a:	mov    rdx,r12
   2725d:	lea    rsi,[rip+0x403c8]        # 6762c <primes.6089+0x154c>
   27264:	mov    edi,0x1
   27269:	xor    eax,eax
   2726b:	call   2e0a0 <logprintf>
   27270:	mov    rdi,rbp
   27273:	call   4bdc0 <rpl_free>
   27278:	jmp    26698 <http_loop+0x258>
   2727d:	nop    DWORD PTR [rax]
   27280:	mov    rdi,QWORD PTR [rsp+0x1e8]
   27288:	call   4bdc0 <rpl_free>
   2728d:	mov    rdi,QWORD PTR [rsp+0x158]
   27295:	mov    QWORD PTR [rsp+0x1e8],0x0
   272a1:	call   4ba50 <xstrdup>
   272a6:	cmp    BYTE PTR [rip+0x6300b],0x0        # 8a2b8 <opt+0x238>
   272ad:	mov    QWORD PTR [rsp+0x1e8],rax
   272b5:	jne    27f08 <http_loop+0x1ac8>
   272bb:	mov    rsi,QWORD PTR [rsp+0x158]
   272c3:	lea    rcx,[rip+0x4714d]        # 6e417 <urlchr_table+0x877>
   272ca:	test   rsi,rsi
   272cd:	je     272dc <http_loop+0xe9c>
   272cf:	mov    edi,0x7
   272d4:	call   4b2b0 <quotearg_style>
   272d9:	mov    rcx,rax
   272dc:	mov    edx,r15d
   272df:	lea    rsi,[rip+0x405ac]        # 67892 <primes.6089+0x17b2>
   272e6:	xor    edi,edi
   272e8:	xor    eax,eax
   272ea:	call   2e0a0 <logprintf>
   272ef:	mov    r13,QWORD PTR [rsp+0x150]
   272f7:	cmp    BYTE PTR [rip+0x62d9b],0x0        # 8a099 <opt+0x19>
   272fe:	lea    r14,[rsp+0x340]
   27306:	mov    QWORD PTR [rsp+0xe8],0xffffffffffffffff
   27312:	je     280b0 <http_loop+0x1c70>
   27318:	movzx  eax,BYTE PTR [rsp+0xb0]
   27320:	mov    BYTE PTR [rsp+0xc0],al
   27327:	mov    eax,DWORD PTR [rsp+0x18]
   2732b:	test   eax,eax
   2732d:	je     28070 <http_loop+0x1c30>
   27333:	mov    ecx,0x200
   27338:	mov    rdx,r14
   2733b:	lea    rsi,[rip+0x4037c]        # 676be <primes.6089+0x15de>
   27342:	mov    rdi,r13
   27345:	call   239c0 <resp_header_copy>
   2734a:	mov    BYTE PTR [rsp+0xe0],al
   27351:	test   al,al
   27353:	jne    277c0 <http_loop+0x1380>
   27359:	cmp    BYTE PTR [rip+0x63008],0x0        # 8a368 <opt+0x2e8>
   27360:	jne    277e6 <http_loop+0x13a6>
   27366:	cmp    BYTE PTR [rsp+0xc0],0x0
   2736e:	jne    27e30 <http_loop+0x19f0>
   27374:	cmp    r15d,0x191
   2737b:	jne    2865a <http_loop+0x221a>
   27381:	cmp    QWORD PTR [rsp+0x20],0x0
   27387:	je     27900 <http_loop+0x14c0>
   2738d:	mov    rdi,QWORD PTR [rsp+0x150]
   27395:	lea    rsi,[rip+0x40155]        # 674f1 <primes.6089+0x1411>
   2739c:	call   23950 <resp_header_strdup>
   273a1:	sub    rsp,0x8
   273a5:	xor    r8d,r8d
   273a8:	xor    edx,edx
   273aa:	push   r12
   273ac:	mov    r14,rax
   273af:	push   0x191
   273b4:	push   rax
   273b5:	push   QWORD PTR [rsp+0xb8]
   273bc:	lea    rax,[rsp+0x338]
   273c4:	push   rax
   273c5:	lea    rax,[rsp+0x320]
   273cd:	push   rax
   273ce:	push   QWORD PTR [rbx]
   273d0:	mov    rdi,QWORD PTR [rsp+0x70]
   273d5:	movzx  r9d,BYTE PTR [rsp+0x120]
   273de:	mov    rcx,QWORD PTR [rsp+0x128]
   273e6:	mov    esi,DWORD PTR [rsp+0x164]
   273ed:	call   22fe0 <read_response_body>
   273f2:	add    rsp,0x40
   273f6:	mov    rdi,r14
   273f9:	mov    r13d,eax
   273fc:	call   4bdc0 <rpl_free>
   27401:	cmp    r13d,0x23
   27405:	jne    28627 <http_loop+0x21e7>
   2740b:	mov    eax,DWORD PTR [rsp+0x1b8]
   27412:	test   eax,eax
   27414:	js     28627 <http_loop+0x21e7>
   2741a:	cmp    BYTE PTR [rsp+0xc0],0x0
   27422:	jne    27450 <http_loop+0x1010>
   27424:	mov    edi,DWORD PTR [rsp+0x124]
   2742b:	cmp    BYTE PTR [rip+0x5e276],0x0        # 856a8 <pconn_active>
   27432:	je     27440 <http_loop+0x1000>
   27434:	cmp    DWORD PTR [rip+0x5e246],edi        # 85680 <pconn>
   2743a:	je     28400 <http_loop+0x1fc0>
   27440:	call   f400 <fd_close>
   27445:	mov    DWORD PTR [rsp+0x124],0xffffffff
   27450:	sub    rsp,0x8
   27454:	mov    rdi,rbx
   27457:	mov    BYTE PTR [rip+0x5e237],0x0        # 85695 <pconn+0x15>
   2745e:	lea    rax,[rsp+0x127]
   27466:	push   rax
   27467:	push   QWORD PTR [rsp+0xb8]
   2746e:	push   QWORD PTR [rsp+0x70]
   27472:	mov    r8,QWORD PTR [rsp+0x148]
   2747a:	mov    rcx,QWORD PTR [rsp+0x170]
   27482:	mov    rdx,QWORD PTR [rsp+0x158]
   2748a:	mov    rsi,QWORD PTR [rsp+0x150]
   27492:	lea    r9,[rsp+0x141]
   2749a:	call   24f00 <check_auth>
   2749f:	add    rsp,0x20
   274a3:	cmp    eax,0x19
   274a6:	jne    288a6 <http_loop+0x2466>
   274ac:	cmp    BYTE PTR [rsp+0x190],0x0
   274b4:	je     288b0 <http_loop+0x2470>
   274ba:	mov    rdi,QWORD PTR [rsp+0x28]
   274bf:	call   22570 <resp_free>
   274c4:	mov    rdi,QWORD PTR [rsp+0x158]
   274cc:	call   4bdc0 <rpl_free>
   274d1:	mov    rdi,r12
   274d4:	mov    QWORD PTR [rsp+0x158],0x0
   274e0:	call   4bdc0 <rpl_free>
   274e5:	jmp    26929 <http_loop+0x4e9>
   274ea:	nop    WORD PTR [rax+rax*1+0x0]
   274f0:	cmp    QWORD PTR [rip+0x5e1c0],0x0        # 856b8 <wget_cookie_jar>
   274f8:	je     28190 <http_loop+0x1d50>
   274fe:	mov    rsi,QWORD PTR [rip+0x62e6b]        # 8a370 <opt+0x2f0>
   27505:	test   rsi,rsi
   27508:	je     264ef <http_loop+0xaf>
   2750e:	cmp    BYTE PTR [rip+0x5e1ab],0x0        # 856c0 <cookies_loaded_p>
   27515:	jne    264ef <http_loop+0xaf>
   2751b:	mov    rdi,QWORD PTR [rip+0x5e196]        # 856b8 <wget_cookie_jar>
   27522:	call   12b20 <cookie_jar_load>
   27527:	mov    BYTE PTR [rip+0x5e192],0x1        # 856c0 <cookies_loaded_p>
   2752e:	jmp    264ef <http_loop+0xaf>
   27533:	nop    DWORD PTR [rax+rax*1+0x0]
   27538:	mov    rdi,QWORD PTR [r14+0x20]
   2753c:	call   3c770 <has_wildcards_p>
   27541:	test   al,al
   27543:	je     264fc <http_loop+0xbc>
   27549:	xor    edi,edi
   2754b:	mov    edx,0x5
   27550:	lea    rsi,[rip+0x3f629]        # 66b80 <primes.6089+0xaa0>
   27557:	call   c780 <dcgettext@plt>
   2755c:	xor    edi,edi
   2755e:	mov    rsi,rax
   27561:	call   2de60 <logputs>
   27566:	jmp    264fc <http_loop+0xbc>
   2756b:	nop    DWORD PTR [rax+rax*1+0x0]
   27570:	mov    eax,0x1
   27575:	jmp    2658d <http_loop+0x14d>
   2757a:	nop    WORD PTR [rax+rax*1+0x0]
   27580:	mov    rax,QWORD PTR [rsp+0x8]
   27585:	mov    BYTE PTR [rsp+0xde],0x0
   2758d:	mov    DWORD PTR [rax],0x0
   27593:	movzx  eax,BYTE PTR [rip+0x62b4e]        # 8a0e8 <opt+0x68>
   2759a:	mov    BYTE PTR [rsp+0xdc],al
   275a1:	jmp    26c07 <http_loop+0x7c7>
   275a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   275b0:	mov    r12,QWORD PTR [rip+0x62df1]        # 8a3a8 <opt+0x328>
   275b7:	test   r12,r12
   275ba:	je     26ab4 <http_loop+0x674>
   275c0:	mov    r14,QWORD PTR [rsp+0x160]
   275c8:	test   r14,r14
   275cb:	je     26ab4 <http_loop+0x674>
   275d1:	test   rbp,rbp
   275d4:	je     275f5 <http_loop+0x11b5>
   275d6:	mov    rdi,rbp
   275d9:	call   c4f0 <ftello@plt>
   275de:	mov    r14,QWORD PTR [rsp+0x160]
   275e6:	mov    r12,QWORD PTR [rip+0x62dbb]        # 8a3a8 <opt+0x328>
   275ed:	mov    QWORD PTR [rsp+0xa0],rax
   275f5:	mov    eax,DWORD PTR [rsp+0x124]
   275fc:	cmp    BYTE PTR [rip+0x62cb8],0x0        # 8a2bb <opt+0x23b>
   27603:	mov    r15d,eax
   27606:	jne    28890 <http_loop+0x2450>
   2760c:	lea    rsi,[rip+0x3e817]        # 65e2a <yy_accept+0xd6a>
   27613:	mov    rdi,r12
   27616:	call   c0f0 <fopen@plt>
   2761b:	mov    r13,rax
   2761e:	test   rax,rax
   27621:	je     29d77 <http_loop+0x3937>
   27627:	mov    QWORD PTR [rsp+0xc0],rbx
   2762f:	xor    r12d,r12d
   27632:	jmp    276c8 <http_loop+0x1288>
   27637:	nop    WORD PTR [rax+rax*1+0x0]
   27640:	cmp    r14,r12
   27643:	jle    284d0 <http_loop+0x2090>
   27649:	mov    rcx,r13
   2764c:	mov    edx,0x2000
   27651:	mov    esi,0x1
   27656:	lea    rdi,[rip+0x5c023]        # 83680 <chunk.8945>
   2765d:	call   c700 <fread@plt>
   27662:	test   eax,eax
   27664:	je     296e3 <http_loop+0x32a3>
   2766a:	mov    r8,r14
   2766d:	cdqe   
   2766f:	lea    rsi,[rip+0x5c00a]        # 83680 <chunk.8945>
   27676:	mov    edi,r15d
   27679:	sub    r8,r12
   2767c:	cmp    r8,rax
   2767f:	cmovle rax,r8
   27683:	mov    rbx,rax
   27686:	mov    rax,QWORD PTR [rip+0x33b93]        # 5b220 <_IO_stdin_used+0x220>
   2768d:	mov    edx,ebx
   2768f:	movq   xmm0,rax
   27694:	call   f2a0 <fd_write>
   27699:	test   eax,eax
   2769b:	js     284e8 <http_loop+0x20a8>
   276a1:	test   rbp,rbp
   276a4:	je     276c5 <http_loop+0x1285>
   276a6:	mov    rcx,rbp
   276a9:	mov    rdx,rbx
   276ac:	mov    esi,0x1
   276b1:	lea    rdi,[rip+0x5bfc8]        # 83680 <chunk.8945>
   276b8:	call   ca10 <fwrite@plt>
   276bd:	cmp    ebx,eax
   276bf:	jne    2860c <http_loop+0x21cc>
   276c5:	add    r12,rbx
   276c8:	mov    rdi,r13
   276cb:	call   c8a0 <feof@plt>
   276d0:	test   eax,eax
   276d2:	je     27640 <http_loop+0x1200>
   276d8:	mov    rdi,r13
   276db:	mov    rbx,QWORD PTR [rsp+0xc0]
   276e3:	call   c8b0 <fclose@plt>
   276e8:	cmp    r14,r12
   276eb:	jg     296f3 <http_loop+0x32b3>
   276f1:	cmp    BYTE PTR [rip+0x62bc3],0x0        # 8a2bb <opt+0x23b>
   276f8:	je     26ab4 <http_loop+0x674>
   276fe:	lea    rdi,[rip+0x3ff6f]        # 67674 <primes.6089+0x1594>
   27705:	xor    eax,eax
   27707:	call   2e250 <debug_logprintf>
   2770c:	jmp    26ab4 <http_loop+0x674>
   27711:	nop    DWORD PTR [rax+0x0]
   27718:	mov    edi,DWORD PTR [rsp+0x124]
   2771f:	call   f3b0 <fd_errstr>
   27724:	xor    edi,edi
   27726:	mov    edx,0x5
   2772b:	lea    rsi,[rip+0x3ff5c]        # 6768e <primes.6089+0x15ae>
   27732:	mov    r13,rax
   27735:	call   c780 <dcgettext@plt>
   2773a:	mov    edi,0x1
   2773f:	mov    rdx,r13
   27742:	mov    rsi,rax
   27745:	xor    eax,eax
   27747:	call   2e0a0 <logprintf>
   2774c:	cmp    BYTE PTR [rip+0x5df55],0x0        # 856a8 <pconn_active>
   27753:	mov    edi,DWORD PTR [rsp+0x124]
   2775a:	je     27768 <http_loop+0x1328>
   2775c:	cmp    DWORD PTR [rip+0x5df1e],edi        # 85680 <pconn>
   27762:	je     28420 <http_loop+0x1fe0>
   27768:	call   f400 <fd_close>
   2776d:	mov    DWORD PTR [rsp+0x124],0xffffffff
   27778:	xor    ebp,ebp
   2777a:	mov    r13d,0x18
   27780:	jmp    26f67 <http_loop+0xb27>
   27785:	nop    DWORD PTR [rax]
   27788:	mov    esi,DWORD PTR [rip+0x628fa]        # 8a088 <opt+0x8>
   2778e:	mov    edi,DWORD PTR [rsp+0x40]
   27792:	call   35c00 <printwhat>
   27797:	mov    eax,DWORD PTR [rip+0x628eb]        # 8a088 <opt+0x8>
   2779d:	test   eax,eax
   2779f:	je     26651 <http_loop+0x211>
   277a5:	cmp    eax,DWORD PTR [rsp+0x40]
   277a9:	jg     26651 <http_loop+0x211>
   277af:	mov    r8d,0x25
   277b5:	jmp    27a6a <http_loop+0x162a>
   277ba:	nop    WORD PTR [rax+rax*1+0x0]
   277c0:	lea    rsi,[rip+0x3ff09]        # 676d0 <primes.6089+0x15f0>
   277c7:	mov    rdi,r14
   277ca:	call   43340 <c_strcasecmp>
   277cf:	test   eax,eax
   277d1:	sete   BYTE PTR [rsp+0xe0]
   277d9:	cmp    BYTE PTR [rip+0x62b88],0x0        # 8a368 <opt+0x2e8>
   277e0:	je     27366 <http_loop+0xf26>
   277e6:	lea    rax,[rsp+0x180]
   277ee:	lea    rcx,[rsp+0x540]
   277f6:	mov    QWORD PTR [rsp+0xf0],rbp
   277fe:	xor    edx,edx
   27800:	mov    QWORD PTR [rsp+0xf8],r12
   27808:	mov    rbp,rax
   2780b:	mov    r12,rbx
   2780e:	mov    rbx,rcx
   27811:	mov    DWORD PTR [rsp+0x100],r15d
   27819:	mov    QWORD PTR [rsp+0x108],r14
   27821:	jmp    2785e <http_loop+0x141e>
   27823:	nop    DWORD PTR [rax+rax*1+0x0]
   27828:	mov    rdx,r14
   2782b:	mov    rdi,rbx
   2782e:	call   cb30 <memcpy@plt>
   27833:	mov    rcx,QWORD PTR [r12+0x20]
   27838:	mov    r8,rbx
   2783b:	mov    edx,DWORD PTR [r12+0x18]
   27840:	mov    rsi,QWORD PTR [r12+0x10]
   27845:	mov    rdi,QWORD PTR [rip+0x5de6c]        # 856b8 <wget_cookie_jar>
   2784c:	mov    BYTE PTR [rsp+r14*1+0x540],0x0
   27855:	call   11af0 <cookie_handle_set_cookie>
   2785a:	lea    edx,[r15+0x1]
   2785e:	mov    rax,QWORD PTR [rsp+0x150]
   27866:	mov    r8,QWORD PTR [rsp+0x58]
   2786b:	mov    rcx,rbp
   2786e:	lea    rsi,[rip+0x3fe63]        # 676d8 <primes.6089+0x15f8>
   27875:	mov    rdi,QWORD PTR [rax+0x8]
   27879:	call   23810 <resp_header_locate.isra.0>
   2787e:	mov    r15d,eax
   27881:	cmp    eax,0xffffffff
   27884:	je     280e0 <http_loop+0x1ca0>
   2788a:	mov    rsi,QWORD PTR [rsp+0x180]
   27892:	mov    r14,QWORD PTR [rsp+0x190]
   2789a:	sub    r14,rsi
   2789d:	cmp    r14,0x3ff
   278a4:	jbe    27828 <http_loop+0x13e8>
   278a6:	lea    rdi,[r14+0x1]
   278aa:	call   4b850 <xmalloc>
   278af:	mov    rsi,QWORD PTR [rsp+0x180]
   278b7:	mov    rdx,r14
   278ba:	mov    r13,rax
   278bd:	mov    rdi,rax
   278c0:	call   cb30 <memcpy@plt>
   278c5:	mov    BYTE PTR [r13+r14*1+0x0],0x0
   278cb:	mov    rcx,QWORD PTR [r12+0x20]
   278d0:	mov    r8,r13
   278d3:	mov    edx,DWORD PTR [r12+0x18]
   278d8:	mov    rsi,QWORD PTR [r12+0x10]
   278dd:	mov    rdi,QWORD PTR [rip+0x5ddd4]        # 856b8 <wget_cookie_jar>
   278e4:	call   11af0 <cookie_handle_set_cookie>
   278e9:	mov    rdi,r13
   278ec:	call   4bdc0 <rpl_free>
   278f1:	jmp    2785a <http_loop+0x141a>
   278f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27900:	mov    eax,DWORD PTR [rsp+0xd8]
   27907:	mov    edi,DWORD PTR [rsp+0x124]
   2790e:	test   eax,eax
   27910:	jne    2742b <http_loop+0xfeb>
   27916:	cmp    BYTE PTR [rsp+0xc0],0x0
   2791e:	je     2742b <http_loop+0xfeb>
   27924:	movzx  edx,BYTE PTR [rsp+0xe0]
   2792c:	mov    rsi,QWORD PTR [rsp+0xe8]
   27934:	call   22da0 <skip_short_body>
   27939:	test   al,al
   2793b:	jne    27450 <http_loop+0x1010>
   27941:	jmp    27424 <http_loop+0xfe4>
   27946:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27950:	mov    rdi,rbp
   27953:	call   c4f0 <ftello@plt>
   27958:	mov    rdx,QWORD PTR [rsp+0x160]
   27960:	mov    rcx,rbp
   27963:	mov    rdi,QWORD PTR [rip+0x62a36]        # 8a3a0 <opt+0x320>
   2796a:	mov    esi,0x1
   2796f:	mov    QWORD PTR [rsp+0xa0],rax
   27977:	call   ca10 <fwrite@plt>
   2797c:	cdqe   
   2797e:	cmp    rax,QWORD PTR [rsp+0x160]
   27986:	je     26ab4 <http_loop+0x674>
   2798c:	mov    r13d,0xfffffffe
   27992:	nop    WORD PTR [rax+rax*1+0x0]
   27998:	cmp    BYTE PTR [rip+0x5dd09],0x0        # 856a8 <pconn_active>
   2799f:	mov    edi,DWORD PTR [rsp+0x124]
   279a6:	je     279b4 <http_loop+0x1574>
   279a8:	cmp    DWORD PTR [rip+0x5dcd2],edi        # 85680 <pconn>
   279ae:	je     28a08 <http_loop+0x25c8>
   279b4:	call   f400 <fd_close>
   279b9:	mov    DWORD PTR [rsp+0x124],0xffffffff
   279c4:	test   rbp,rbp
   279c7:	je     279d1 <http_loop+0x1591>
   279c9:	mov    rdi,rbp
   279cc:	call   c8b0 <fclose@plt>
   279d1:	xor    r12d,r12d
   279d4:	mov    edx,0x36
   279d9:	cmp    r13d,0xfffffffe
   279dd:	mov    eax,0x2c
   279e2:	cmove  eax,edx
   279e5:	xor    ebp,ebp
   279e7:	mov    r13d,eax
   279ea:	jmp    26f67 <http_loop+0xb27>
   279ef:	nop
   279f0:	mov    r8d,r13d
   279f3:	cmp    r8d,0x19
   279f7:	je     270d8 <http_loop+0xc98>
   279fd:	jmp    27a6a <http_loop+0x162a>
   279ff:	nop
   27a00:	mov    rdx,QWORD PTR [rsp+0x1a0]
   27a08:	mov    rax,QWORD PTR [rsp+0x1b0]
   27a10:	cmp    rdx,rax
   27a13:	jge    28140 <http_loop+0x1d00>
   27a19:	sub    rax,rdx
   27a1c:	mov    QWORD PTR [rsp+0x1b0],rax
   27a24:	mov    rax,QWORD PTR [rsp+0x8]
   27a29:	mov    eax,DWORD PTR [rax]
   27a2b:	jmp    266e0 <http_loop+0x2a0>
   27a30:	lea    rsi,[rip+0x3df98]        # 659cf <yy_accept+0x90f>
   27a37:	xor    edi,edi
   27a39:	mov    DWORD PTR [rsp+0x8],r13d
   27a3e:	call   2de60 <logputs>
   27a43:	mov    edx,0x5
   27a48:	lea    rsi,[rip+0x3f559]        # 66fa8 <primes.6089+0xec8>
   27a4f:	xor    edi,edi
   27a51:	call   c780 <dcgettext@plt>
   27a56:	mov    edi,0x1
   27a5b:	mov    rsi,rax
   27a5e:	xor    eax,eax
   27a60:	call   2e0a0 <logprintf>
   27a65:	mov    r8d,DWORD PTR [rsp+0x8]
   27a6a:	cmp    BYTE PTR [rip+0x62849],0x0        # 8a2ba <opt+0x23a>
   27a71:	je     2711d <http_loop+0xcdd>
   27a77:	jmp    270de <http_loop+0xc9e>
   27a7c:	nop    DWORD PTR [rax+0x0]
   27a80:	lea    rsi,[rip+0x3df48]        # 659cf <yy_accept+0x90f>
   27a87:	xor    edi,edi
   27a89:	mov    DWORD PTR [rsp+0x8],r13d
   27a8e:	call   2de60 <logputs>
   27a93:	call   c740 <__errno_location@plt>
   27a98:	mov    edi,DWORD PTR [rax]
   27a9a:	call   c540 <strerror@plt>
   27a9f:	mov    rdi,QWORD PTR [rsp+0x208]
   27aa7:	mov    r13,rax
   27aaa:	call   4b5b0 <quote>
   27aaf:	mov    edx,0x5
   27ab4:	lea    rsi,[rip+0x3fd63]        # 6781e <primes.6089+0x173e>
   27abb:	mov    r12,rax
   27abe:	xor    edi,edi
   27ac0:	call   c780 <dcgettext@plt>
   27ac5:	mov    rcx,r13
   27ac8:	mov    rdx,r12
   27acb:	mov    edi,0x1
   27ad0:	mov    rsi,rax
   27ad3:	xor    eax,eax
   27ad5:	call   2e0a0 <logprintf>
   27ada:	mov    r8d,DWORD PTR [rsp+0x8]
   27adf:	jmp    27a6a <http_loop+0x162a>
   27ae1:	nop    DWORD PTR [rax+0x0]
   27ae8:	mov    rax,QWORD PTR [rsp+0x48]
   27aed:	mov    r8d,r13d
   27af0:	cmp    QWORD PTR [rax],0x0
   27af4:	jne    279f3 <http_loop+0x15b3>
   27afa:	mov    r12d,DWORD PTR [rsp+0x1e0]
   27b02:	mov    edx,0x5
   27b07:	lea    rsi,[rip+0x3f4ea]        # 66ff8 <primes.6089+0xf18>
   27b0e:	xor    edi,edi
   27b10:	call   c780 <dcgettext@plt>
   27b15:	mov    edi,0x1
   27b1a:	mov    rsi,rax
   27b1d:	mov    edx,r12d
   27b20:	xor    eax,eax
   27b22:	call   2e0a0 <logprintf>
   27b27:	mov    r8d,0x1b
   27b2d:	jmp    27a6a <http_loop+0x162a>
   27b32:	nop    WORD PTR [rax+rax*1+0x0]
   27b38:	mov    DWORD PTR [rsp+0x8],r13d
   27b3d:	mov    edx,0x5
   27b42:	lea    rsi,[rip+0x3f487]        # 66fd0 <primes.6089+0xef0>
   27b49:	jmp    27a4f <http_loop+0x160f>
   27b4e:	xchg   ax,ax
   27b50:	cmp    BYTE PTR [rip+0x62536],0x0        # 8a08d <opt+0xd>
   27b57:	jne    27788 <http_loop+0x1348>
   27b5d:	mov    r8d,r13d
   27b60:	jmp    27a6a <http_loop+0x162a>
   27b65:	nop    DWORD PTR [rax]
   27b68:	lea    rsi,[rip+0x3de60]        # 659cf <yy_accept+0x90f>
   27b6f:	xor    edi,edi
   27b71:	mov    DWORD PTR [rsp+0x8],r13d
   27b76:	call   2de60 <logputs>
   27b7b:	mov    edx,0x5
   27b80:	lea    rsi,[rip+0x3fcb1]        # 67838 <primes.6089+0x1758>
   27b87:	jmp    27a4f <http_loop+0x160f>
   27b8c:	nop    DWORD PTR [rax+0x0]
   27b90:	lea    rsi,[rip+0x3de38]        # 659cf <yy_accept+0x90f>
   27b97:	xor    edi,edi
   27b99:	mov    DWORD PTR [rsp+0x8],r13d
   27b9e:	call   2de60 <logputs>
   27ba3:	mov    edx,0x5
   27ba8:	lea    rsi,[rip+0x3f391]        # 66f40 <primes.6089+0xe60>
   27baf:	jmp    27a4f <http_loop+0x160f>
   27bb4:	nop    DWORD PTR [rax+0x0]
   27bb8:	lea    rsi,[rip+0x3de10]        # 659cf <yy_accept+0x90f>
   27bbf:	xor    edi,edi
   27bc1:	mov    DWORD PTR [rsp+0x8],r13d
   27bc6:	call   2de60 <logputs>
   27bcb:	call   c740 <__errno_location@plt>
   27bd0:	mov    edi,DWORD PTR [rax]
   27bd2:	call   c540 <strerror@plt>
   27bd7:	mov    rdi,QWORD PTR [rsp+0x208]
   27bdf:	mov    r13,rax
   27be2:	call   4b5b0 <quote>
   27be7:	mov    edx,0x5
   27bec:	lea    rsi,[rip+0x3fc61]        # 67854 <primes.6089+0x1774>
   27bf3:	mov    r12,rax
   27bf6:	jmp    27abe <http_loop+0x167e>
   27bfb:	nop    DWORD PTR [rax+rax*1+0x0]
   27c00:	lea    rsi,[rip+0x3ddc8]        # 659cf <yy_accept+0x90f>
   27c07:	xor    edi,edi
   27c09:	mov    DWORD PTR [rsp+0x8],r13d
   27c0e:	call   2de60 <logputs>
   27c13:	mov    edx,0x5
   27c18:	lea    rsi,[rip+0x3f359]        # 66f78 <primes.6089+0xe98>
   27c1f:	jmp    27a4f <http_loop+0x160f>
   27c24:	nop    DWORD PTR [rax+0x0]
   27c28:	mov    rax,QWORD PTR [rsp+0x8]
   27c2d:	mov    eax,DWORD PTR [rax]
   27c2f:	mov    edx,eax
   27c31:	test   al,0x2
   27c33:	je     281b8 <http_loop+0x1d78>
   27c39:	cmp    BYTE PTR [rsp+0x47],0x0
   27c3e:	je     27c60 <http_loop+0x1820>
   27c40:	cmp    BYTE PTR [rip+0x624a1],0x0        # 8a0e8 <opt+0x68>
   27c47:	je     27010 <http_loop+0xbd0>
   27c4d:	cmp    BYTE PTR [rip+0x62446],0x0        # 8a09a <opt+0x1a>
   27c54:	jne    27010 <http_loop+0xbd0>
   27c5a:	nop    WORD PTR [rax+rax*1+0x0]
   27c60:	cmp    BYTE PTR [rip+0x62655],0x0        # 8a2bc <opt+0x23c>
   27c67:	mov    rdi,QWORD PTR [rsp+0x1d0]
   27c6f:	je     26ff0 <http_loop+0xbb0>
   27c75:	test   rdi,rdi
   27c78:	je     290d0 <http_loop+0x2c90>
   27c7e:	call   262a0 <http_atotm>
   27c83:	mov    QWORD PTR [rsp+0xd0],rax
   27c8b:	cmp    rax,0xffffffffffffffff
   27c8f:	je     28a89 <http_loop+0x2649>
   27c95:	mov    rax,QWORD PTR [rsp+0x8]
   27c9a:	movzx  edx,BYTE PTR [rsp+0xdf]
   27ca2:	test   BYTE PTR [rax],0x4
   27ca5:	mov    eax,0x1
   27caa:	cmovne edx,eax
   27cad:	mov    BYTE PTR [rsp+0xdf],dl
   27cb4:	cmp    BYTE PTR [rsp+0xdc],0x0
   27cbc:	je     27010 <http_loop+0xbd0>
   27cc2:	cmp    BYTE PTR [rip+0x625f3],0x0        # 8a2bc <opt+0x23c>
   27cc9:	je     27d05 <http_loop+0x18c5>
   27ccb:	mov    rdi,QWORD PTR [rsp+0x218]
   27cd3:	test   rdi,rdi
   27cd6:	je     27cfd <http_loop+0x18bd>
   27cd8:	mov    rcx,QWORD PTR [rsp+0xd0]
   27ce0:	cmp    QWORD PTR [rsp+0x1d0],0x0
   27ce9:	setne  al
   27cec:	cmp    rcx,0xffffffffffffffff
   27cf0:	setne  dl
   27cf3:	and    al,dl
   27cf5:	mov    ebp,eax
   27cf7:	jne    29151 <http_loop+0x2d11>
   27cfd:	mov    BYTE PTR [rsp+0x211],0x1
   27d05:	mov    rax,QWORD PTR [rsp+0x8]
   27d0a:	mov    edx,DWORD PTR [rax]
   27d0c:	cmp    BYTE PTR [rip+0x623d5],0x0        # 8a0e8 <opt+0x68>
   27d13:	je     27d51 <http_loop+0x1911>
   27d15:	and    edx,0x41
   27d18:	cmp    BYTE PTR [rip+0x6237b],0x0        # 8a09a <opt+0x1a>
   27d1f:	je     29ea4 <http_loop+0x3a64>
   27d25:	test   edx,edx
   27d27:	je     28958 <http_loop+0x2518>
   27d2d:	mov    edx,0x5
   27d32:	lea    rsi,[rip+0x3f437]        # 67170 <primes.6089+0x1090>
   27d39:	xor    edi,edi
   27d3b:	call   c780 <dcgettext@plt>
   27d40:	xor    edi,edi
   27d42:	mov    rsi,rax
   27d45:	call   2de60 <logputs>
   27d4a:	mov    rax,QWORD PTR [rsp+0x8]
   27d4f:	mov    edx,DWORD PTR [rax]
   27d51:	mov    rax,QWORD PTR [rsp+0x8]
   27d56:	and    edx,0xfffffffb
   27d59:	mov    BYTE PTR [rsp+0xde],0x1
   27d61:	mov    BYTE PTR [rsp+0x47],0x1
   27d66:	mov    DWORD PTR [rax],edx
   27d68:	mov    DWORD PTR [rsp+0x40],0x0
   27d70:	jmp    27797 <http_loop+0x1357>
   27d75:	nop    DWORD PTR [rax]
   27d78:	mov    r13d,DWORD PTR [rsp+0x190]
   27d80:	xor    r12d,r12d
   27d83:	jmp    26f67 <http_loop+0xb27>
   27d88:	nop    DWORD PTR [rax+rax*1+0x0]
   27d90:	xor    edi,edi
   27d92:	mov    edx,0x5
   27d97:	lea    rsi,[rip+0x3ee42]        # 66be0 <primes.6089+0xb00>
   27d9e:	call   c780 <dcgettext@plt>
   27da3:	xor    edi,edi
   27da5:	mov    rsi,rax
   27da8:	xor    eax,eax
   27daa:	call   2e0a0 <logprintf>
   27daf:	jmp    26687 <http_loop+0x247>
   27db4:	nop    DWORD PTR [rax+0x0]
   27db8:	mov    rcx,rax
   27dbb:	mov    rdx,r12
   27dbe:	mov    edi,0x1
   27dc3:	xor    eax,eax
   27dc5:	lea    rsi,[rip+0x3f870]        # 6763c <primes.6089+0x155c>
   27dcc:	call   2e0a0 <logprintf>
   27dd1:	jmp    27270 <http_loop+0xe30>
   27dd6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   27de0:	mov    rdi,QWORD PTR [rsp+0x208]
   27de8:	xor    esi,esi
   27dea:	call   3bed0 <file_exists_p>
   27def:	test   al,al
   27df1:	jne    265e0 <http_loop+0x1a0>
   27df7:	jmp    265e7 <http_loop+0x1a7>
   27dfc:	nop    DWORD PTR [rax+0x0]
   27e00:	lea    r12,[rsp+0x240]
   27e08:	mov    edi,r8d
   27e0b:	mov    edx,0x1
   27e10:	mov    rsi,r12
   27e13:	call   ecd0 <socket_ip_address>
   27e18:	mov    QWORD PTR [rsp+0x98],r12
   27e20:	mov    r8d,DWORD PTR [rsp+0x124]
   27e28:	jmp    26a3e <http_loop+0x5fe>
   27e2d:	nop    DWORD PTR [rax]
   27e30:	movzx  eax,BYTE PTR [rsp+0x122]
   27e38:	cmp    BYTE PTR [rip+0x5d869],0x0        # 856a8 <pconn_active>
   27e3f:	mov    r13d,DWORD PTR [rsp+0x124]
   27e47:	mov    BYTE PTR [rsp+0xf0],al
   27e4e:	mov    rax,QWORD PTR [rsp+0x148]
   27e56:	mov    ecx,DWORD PTR [rax+0x18]
   27e59:	mov    rdi,QWORD PTR [rax+0x10]
   27e5d:	lea    rax,[rip+0x5d81c]        # 85680 <pconn>
   27e64:	mov    DWORD PTR [rsp+0xf8],ecx
   27e6b:	je     27ea6 <http_loop+0x1a66>
   27e6d:	lea    rax,[rip+0x5d80c]        # 85680 <pconn>
   27e74:	cmp    r13d,DWORD PTR [rip+0x5d805]        # 85680 <pconn>
   27e7b:	mov    QWORD PTR [rsp+0x108],rdi
   27e83:	mov    QWORD PTR [rsp+0x100],rax
   27e8b:	je     27374 <http_loop+0xf34>
   27e91:	call   23310 <invalidate_persistent>
   27e96:	mov    rdi,QWORD PTR [rsp+0x108]
   27e9e:	mov    rax,QWORD PTR [rsp+0x100]
   27ea6:	mov    BYTE PTR [rip+0x5d7fb],0x1        # 856a8 <pconn_active>
   27ead:	mov    DWORD PTR [rax],r13d
   27eb0:	call   4ba50 <xstrdup>
   27eb5:	cmp    BYTE PTR [rip+0x623ff],0x0        # 8a2bb <opt+0x23b>
   27ebc:	mov    BYTE PTR [rip+0x5d7d2],0x0        # 85695 <pconn+0x15>
   27ec3:	mov    QWORD PTR [rip+0x5d7be],rax        # 85688 <pconn+0x8>
   27eca:	mov    eax,DWORD PTR [rsp+0xf8]
   27ed1:	mov    DWORD PTR [rip+0x5d7b9],eax        # 85690 <pconn+0x10>
   27ed7:	movzx  eax,BYTE PTR [rsp+0xf0]
   27edf:	mov    BYTE PTR [rip+0x5d7af],al        # 85694 <pconn+0x14>
   27ee5:	je     27374 <http_loop+0xf34>
   27eeb:	mov    esi,r13d
   27eee:	lea    rdi,[rip+0x3edab]        # 66ca0 <primes.6089+0xbc0>
   27ef5:	xor    eax,eax
   27ef7:	call   2e250 <debug_logprintf>
   27efc:	jmp    27374 <http_loop+0xf34>
   27f01:	nop    DWORD PTR [rax+0x0]
   27f08:	lea    rsi,[rip+0x3dac0]        # 659cf <yy_accept+0x90f>
   27f0f:	xor    edi,edi
   27f11:	xor    eax,eax
   27f13:	call   2e0a0 <logprintf>
   27f18:	mov    r13,QWORD PTR [rsp+0x150]
   27f20:	mov    rdx,QWORD PTR [r13+0x8]
   27f24:	test   rdx,rdx
   27f27:	je     272f7 <http_loop+0xeb7>
   27f2d:	mov    rax,QWORD PTR [rdx+0x8]
   27f31:	test   rax,rax
   27f34:	je     272f7 <http_loop+0xeb7>
   27f3a:	xor    r8d,r8d
   27f3d:	mov    QWORD PTR [rsp+0xf0],rbx
   27f45:	lea    r14,[rsp+0x540]
   27f4d:	mov    QWORD PTR [rsp+0xc0],rbp
   27f55:	mov    rbx,r8
   27f58:	mov    QWORD PTR [rsp+0xe0],r12
   27f60:	mov    DWORD PTR [rsp+0xe8],r15d
   27f68:	jmp    27fc6 <http_loop+0x1b86>
   27f6a:	nop    WORD PTR [rax+rax*1+0x0]
   27f70:	mov    rdx,rax
   27f73:	mov    rsi,r12
   27f76:	mov    rdi,r14
   27f79:	call   cb30 <memcpy@plt>
   27f7e:	mov    rsi,r14
   27f81:	mov    edi,0x7
   27f86:	mov    BYTE PTR [rsp+rbp*1+0x540],0x0
   27f8e:	call   4b2b0 <quotearg_style>
   27f93:	lea    rdx,[rip+0x3df2a]        # 65ec4 <yy_accept+0xe04>
   27f9a:	mov    edi,0x3
   27f9f:	lea    rsi,[rip+0x3f827]        # 677cd <primes.6089+0x16ed>
   27fa6:	mov    rcx,rax
   27fa9:	xor    eax,eax
   27fab:	call   2e0a0 <logprintf>
   27fb0:	mov    rdx,QWORD PTR [r13+0x8]
   27fb4:	mov    rax,QWORD PTR [rdx+rbx*1+0x10]
   27fb9:	add    rbx,0x8
   27fbd:	test   rax,rax
   27fc0:	je     28110 <http_loop+0x1cd0>
   27fc6:	mov    r12,QWORD PTR [rdx+rbx*1]
   27fca:	cmp    r12,rax
   27fcd:	jae    27fe4 <http_loop+0x1ba4>
   27fcf:	movzx  edx,BYTE PTR [rax-0x1]
   27fd3:	cmp    dl,0xa
   27fd6:	je     28050 <http_loop+0x1c10>
   27fd8:	cmp    dl,0xd
   27fdb:	sete   dl
   27fde:	movzx  edx,dl
   27fe1:	sub    rax,rdx
   27fe4:	sub    rax,r12
   27fe7:	mov    rbp,rax
   27fea:	cmp    rax,0x3ff
   27ff0:	jbe    27f70 <http_loop+0x1b30>
   27ff6:	lea    rdi,[rax+0x1]
   27ffa:	call   4b850 <xmalloc>
   27fff:	mov    rdx,rbp
   28002:	mov    rsi,r12
   28005:	mov    r15,rax
   28008:	mov    rdi,rax
   2800b:	call   cb30 <memcpy@plt>
   28010:	mov    BYTE PTR [r15+rbp*1],0x0
   28015:	mov    rsi,r15
   28018:	mov    edi,0x7
   2801d:	call   4b2b0 <quotearg_style>
   28022:	lea    rdx,[rip+0x3de9b]        # 65ec4 <yy_accept+0xe04>
   28029:	mov    edi,0x3
   2802e:	lea    rsi,[rip+0x3f798]        # 677cd <primes.6089+0x16ed>
   28035:	mov    rcx,rax
   28038:	xor    eax,eax
   2803a:	call   2e0a0 <logprintf>
   2803f:	mov    rdi,r15
   28042:	call   4bdc0 <rpl_free>
   28047:	jmp    27fb0 <http_loop+0x1b70>
   2804c:	nop    DWORD PTR [rax+0x0]
   28050:	lea    rcx,[rax-0x1]
   28054:	cmp    r12,rcx
   28057:	jae    2a50a <http_loop+0x40ca>
   2805d:	movzx  edx,BYTE PTR [rax-0x2]
   28061:	mov    rax,rcx
   28064:	jmp    27fd8 <http_loop+0x1b98>
   28069:	nop    DWORD PTR [rax+0x0]
   28070:	mov    ecx,0x200
   28075:	mov    rdx,r14
   28078:	lea    rsi,[rip+0x3f467]        # 674e6 <primes.6089+0x1406>
   2807f:	mov    rdi,r13
   28082:	call   239c0 <resp_header_copy>
   28087:	test   al,al
   28089:	jne    28158 <http_loop+0x1d18>
   2808f:	movzx  eax,BYTE PTR [rsp+0xb0]
   28097:	mov    r13,QWORD PTR [rsp+0x150]
   2809f:	mov    BYTE PTR [rsp+0xc0],al
   280a6:	jmp    27333 <http_loop+0xef3>
   280ab:	nop    DWORD PTR [rax+rax*1+0x0]
   280b0:	mov    ecx,0x200
   280b5:	mov    rdx,r14
   280b8:	lea    rsi,[rip+0x3f43f]        # 674fe <primes.6089+0x141e>
   280bf:	mov    rdi,r13
   280c2:	call   239c0 <resp_header_copy>
   280c7:	test   al,al
   280c9:	jne    283a0 <http_loop+0x1f60>
   280cf:	mov    r13,QWORD PTR [rsp+0x150]
   280d7:	jmp    27318 <http_loop+0xed8>
   280dc:	nop    DWORD PTR [rax+0x0]
   280e0:	mov    rbx,r12
   280e3:	mov    rbp,QWORD PTR [rsp+0xf0]
   280eb:	mov    r15d,DWORD PTR [rsp+0x100]
   280f3:	mov    r12,QWORD PTR [rsp+0xf8]
   280fb:	mov    r14,QWORD PTR [rsp+0x108]
   28103:	jmp    27366 <http_loop+0xf26>
   28108:	nop    DWORD PTR [rax+rax*1+0x0]
   28110:	mov    rbp,QWORD PTR [rsp+0xc0]
   28118:	mov    r12,QWORD PTR [rsp+0xe0]
   28120:	mov    r15d,DWORD PTR [rsp+0xe8]
   28128:	mov    rbx,QWORD PTR [rsp+0xf0]
   28130:	mov    r13,QWORD PTR [rsp+0x150]
   28138:	jmp    272f7 <http_loop+0xeb7>
   2813d:	nop    DWORD PTR [rax]
   28140:	mov    rax,QWORD PTR [rsp+0x8]
   28145:	mov    QWORD PTR [rsp+0x1b0],rdx
   2814d:	mov    eax,DWORD PTR [rax]
   2814f:	jmp    266e0 <http_loop+0x2a0>
   28154:	nop    DWORD PTR [rax+0x0]
   28158:	lea    rsi,[rip+0x3f370]        # 674cf <primes.6089+0x13ef>
   2815f:	mov    rdi,r14
   28162:	call   43340 <c_strcasecmp>
   28167:	movzx  edx,BYTE PTR [rsp+0xb0]
   2816f:	mov    r13,QWORD PTR [rsp+0x150]
   28177:	test   eax,eax
   28179:	mov    eax,0x0
   2817e:	cmovne eax,edx
   28181:	mov    BYTE PTR [rsp+0xc0],al
   28188:	jmp    27333 <http_loop+0xef3>
   2818d:	nop    DWORD PTR [rax]
   28190:	call   11ac0 <cookie_jar_new>
   28195:	mov    QWORD PTR [rip+0x5d51c],rax        # 856b8 <wget_cookie_jar>
   2819c:	jmp    274fe <http_loop+0x10be>
   281a1:	nop    DWORD PTR [rax+0x0]
   281a8:	call   23310 <invalidate_persistent>
   281ad:	jmp    26f54 <http_loop+0xb14>
   281b2:	nop    WORD PTR [rax+rax*1+0x0]
   281b8:	lea    rdx,[rip+0x61ec1]        # 8a080 <opt>
   281bf:	xor    ebp,ebp
   281c1:	mov    r13d,DWORD PTR [rdx]
   281c4:	test   r13d,r13d
   281c7:	je     28580 <http_loop+0x2140>
   281cd:	test   al,0x4
   281cf:	je     281e6 <http_loop+0x1da6>
   281d1:	mov    eax,DWORD PTR [rsp+0x1e0]
   281d8:	sub    eax,0x1f4
   281dd:	cmp    eax,0x1
   281e0:	jbe    28a77 <http_loop+0x2637>
   281e6:	cmp    BYTE PTR [rip+0x61efb],0x0        # 8a0e8 <opt+0x68>
   281ed:	je     28201 <http_loop+0x1dc1>
   281ef:	mov    rax,QWORD PTR [rsp+0xc8]
   281f7:	cmp    BYTE PTR [rax+0x18],0x0
   281fb:	je     29824 <http_loop+0x33e4>
   28201:	mov    r13,QWORD PTR [rip+0x61e88]        # 8a090 <opt+0x10>
   28208:	mov    r14d,DWORD PTR [rsp+0x1e0]
   28210:	test   r13,r13
   28213:	je     28250 <http_loop+0x1e10>
   28215:	cmp    BYTE PTR [r13+0x0],0x0
   2821a:	je     28250 <http_loop+0x1e10>
   2821c:	xor    esi,esi
   2821e:	mov    edx,0xa
   28223:	mov    rdi,r13
   28226:	call   c5a0 <strtol@plt>
   2822b:	cmp    r14d,eax
   2822e:	je     28470 <http_loop+0x2030>
   28234:	mov    esi,0x2c
   28239:	mov    rdi,r13
   2823c:	call   c6c0 <strchr@plt>
   28241:	test   rax,rax
   28244:	je     28250 <http_loop+0x1e10>
   28246:	cmp    BYTE PTR [rax+0x1],0x0
   2824a:	lea    r13,[rax+0x1]
   2824e:	jne    2821c <http_loop+0x1ddc>
   28250:	mov    rsi,QWORD PTR [rsp+0x1d8]
   28258:	mov    edi,0x7
   2825d:	call   4b2b0 <quotearg_style>
   28262:	mov    r13d,DWORD PTR [rsp+0x1e0]
   2826a:	mov    edx,0x5
   2826f:	xor    edi,edi
   28271:	lea    rsi,[rip+0x3f1bb]        # 67433 <primes.6089+0x1353>
   28278:	mov    rbx,rax
   2827b:	call   c780 <dcgettext@plt>
   28280:	mov    r8,rbx
   28283:	mov    ecx,r13d
   28286:	mov    rdx,r12
   28289:	mov    rsi,rax
   2828c:	mov    edi,0x1
   28291:	xor    eax,eax
   28293:	call   2e0a0 <logprintf>
   28298:	lea    rsi,[rip+0x3d730]        # 659cf <yy_accept+0x90f>
   2829f:	xor    edi,edi
   282a1:	call   2de60 <logputs>
   282a6:	mov    rdi,rbp
   282a9:	call   4bdc0 <rpl_free>
   282ae:	mov    r8d,0x1b
   282b4:	jmp    27a6a <http_loop+0x162a>
   282b9:	nop    DWORD PTR [rax+0x0]
   282c0:	mov    rsi,QWORD PTR [rsp+0x208]
   282c8:	lea    rdx,[rsp+0x260]
   282d0:	mov    edi,0x1
   282d5:	call   c350 <__xstat@plt>
   282da:	test   eax,eax
   282dc:	jne    26cdf <http_loop+0x89f>
   282e2:	mov    eax,DWORD PTR [rsp+0x278]
   282e9:	and    eax,0xf000
   282ee:	cmp    eax,0x8000
   282f3:	jne    26cdf <http_loop+0x89f>
   282f9:	mov    rax,QWORD PTR [rsp+0x290]
   28301:	mov    QWORD PTR [rsp+0x1b0],rax
   28309:	mov    rax,QWORD PTR [rsp+0x8]
   2830e:	mov    eax,DWORD PTR [rax]
   28310:	jmp    266e0 <http_loop+0x2a0>
   28315:	nop    DWORD PTR [rax]
   28318:	mov    rbp,QWORD PTR [rsp+0x208]
   28320:	mov    rdi,rbp
   28323:	call   4b5b0 <quote>
   28328:	xor    edi,edi
   2832a:	mov    edx,0x5
   2832f:	lea    rsi,[rip+0x3e87a]        # 66bb0 <primes.6089+0xad0>
   28336:	mov    r12,rax
   28339:	call   c780 <dcgettext@plt>
   2833e:	xor    edi,edi
   28340:	mov    rdx,r12
   28343:	mov    rsi,rax
   28346:	xor    eax,eax
   28348:	call   2e0a0 <logprintf>
   2834d:	mov    rax,QWORD PTR [rsp+0x8]
   28352:	mov    rdi,rbp
   28355:	or     DWORD PTR [rax],0x2
   28358:	call   3c790 <has_html_suffix_p>
   2835d:	test   al,al
   2835f:	je     270d8 <http_loop+0xc98>
   28365:	mov    rax,QWORD PTR [rsp+0x8]
   2836a:	mov    r8d,0x19
   28370:	or     DWORD PTR [rax],0x1
   28373:	jmp    270de <http_loop+0xc9e>
   28378:	nop    DWORD PTR [rax+rax*1+0x0]
   28380:	lea    rdi,[rip+0x3f2c1]        # 67648 <primes.6089+0x1568>
   28387:	xor    eax,eax
   28389:	call   2e250 <debug_logprintf>
   2838e:	mov    rsi,QWORD PTR [rip+0x6200b]        # 8a3a0 <opt+0x320>
   28395:	jmp    26a79 <http_loop+0x639>
   2839a:	nop    WORD PTR [rax+rax*1+0x0]
   283a0:	call   c740 <__errno_location@plt>
   283a5:	mov    edx,0xa
   283aa:	xor    esi,esi
   283ac:	mov    rdi,r14
   283af:	mov    DWORD PTR [rax],0x0
   283b5:	mov    QWORD PTR [rsp+0xc0],rax
   283bd:	call   c5a0 <strtol@plt>
   283c2:	mov    r13,QWORD PTR [rsp+0x150]
   283ca:	movabs rdx,0x7fffffffffffffff
   283d4:	mov    rcx,QWORD PTR [rsp+0xc0]
   283dc:	cmp    rax,rdx
   283df:	je     285b8 <http_loop+0x2178>
   283e5:	test   rax,rax
   283e8:	mov    rdx,0xffffffffffffffff
   283ef:	cmovns rdx,rax
   283f3:	mov    QWORD PTR [rsp+0xe8],rdx
   283fb:	jmp    27318 <http_loop+0xed8>
   28400:	call   23310 <invalidate_persistent>
   28405:	jmp    27445 <http_loop+0x1005>
   2840a:	nop    WORD PTR [rax+rax*1+0x0]
   28410:	call   23310 <invalidate_persistent>
   28415:	jmp    26e58 <http_loop+0xa18>
   2841a:	nop    WORD PTR [rax+rax*1+0x0]
   28420:	call   23310 <invalidate_persistent>
   28425:	jmp    2776d <http_loop+0x132d>
   2842a:	nop    WORD PTR [rax+rax*1+0x0]
   28430:	mov    rax,QWORD PTR [rsp+0x8]
   28435:	mov    rdi,QWORD PTR [rsp+0x30]
   2843a:	or     DWORD PTR [rax],0x80
   28440:	call   225b0 <set_file_timestamp>
   28445:	mov    r8d,eax
   28448:	cmp    eax,0x19
   2844b:	jne    271ca <http_loop+0xd8a>
   28451:	mov    BYTE PTR [rsp+0xdc],0x0
   28459:	jmp    265e7 <http_loop+0x1a7>
   2845e:	xchg   ax,ax
   28460:	mov    r13d,eax
   28463:	xor    r12d,r12d
   28466:	xor    ebp,ebp
   28468:	jmp    26f67 <http_loop+0xb27>
   2846d:	nop    DWORD PTR [rax]
   28470:	mov    edi,DWORD PTR [rsp+0x40]
   28474:	mov    esi,DWORD PTR [rip+0x61c0e]        # 8a088 <opt+0x8>
   2847a:	call   35c00 <printwhat>
   2847f:	mov    rdi,rbp
   28482:	call   4bdc0 <rpl_free>
   28487:	jmp    27797 <http_loop+0x1357>
   2848c:	nop    DWORD PTR [rax+0x0]
   28490:	cmp    BYTE PTR [rip+0x5d211],0x0        # 856a8 <pconn_active>
   28497:	mov    edi,DWORD PTR [rsp+0x124]
   2849e:	je     284ac <http_loop+0x206c>
   284a0:	cmp    edi,DWORD PTR [rip+0x5d1da]        # 85680 <pconn>
   284a6:	je     29147 <http_loop+0x2d07>
   284ac:	call   f400 <fd_close>
   284b1:	mov    DWORD PTR [rsp+0x124],0xffffffff
   284bc:	xor    r12d,r12d
   284bf:	mov    r13d,0x35
   284c5:	jmp    26f67 <http_loop+0xb27>
   284ca:	nop    WORD PTR [rax+rax*1+0x0]
   284d0:	mov    rdi,r13
   284d3:	mov    rbx,QWORD PTR [rsp+0xc0]
   284db:	call   c8b0 <fclose@plt>
   284e0:	jmp    276f1 <http_loop+0x12b1>
   284e5:	nop    DWORD PTR [rax]
   284e8:	mov    rdi,r13
   284eb:	mov    rbx,QWORD PTR [rsp+0xc0]
   284f3:	mov    r13d,0xffffffff
   284f9:	call   c8b0 <fclose@plt>
   284fe:	jmp    27998 <http_loop+0x1558>
   28503:	nop    DWORD PTR [rax+rax*1+0x0]
   28508:	mov    r15,QWORD PTR [rsp+0x1c0]
   28510:	cmp    rdi,0xffffffffffffffff
   28514:	je     288bd <http_loop+0x247d>
   2851a:	call   3e8e0 <number_to_static_string>
   2851f:	mov    rdi,QWORD PTR [rsp+0x1a0]
   28527:	mov    r14,rax
   2852a:	call   3e8e0 <number_to_static_string>
   2852f:	mov    edx,0x5
   28534:	lea    rsi,[rip+0x3edad]        # 672e8 <primes.6089+0x1208>
   2853b:	xor    edi,edi
   2853d:	mov    rbp,rax
   28540:	call   c780 <dcgettext@plt>
   28545:	sub    rsp,0x8
   28549:	mov    rdx,r12
   2854c:	mov    r9,r14
   2854f:	push   r15
   28551:	mov    rsi,rax
   28554:	mov    r8,rbp
   28557:	xor    eax,eax
   28559:	mov    rcx,r13
   2855c:	xor    edi,edi
   2855e:	call   2e0a0 <logprintf>
   28563:	mov    edi,DWORD PTR [rsp+0x50]
   28567:	mov    esi,DWORD PTR [rip+0x61b1b]        # 8a088 <opt+0x8>
   2856d:	call   35c00 <printwhat>
   28572:	pop    rax
   28573:	pop    rdx
   28574:	mov    BYTE PTR [rsp+0x47],0x1
   28579:	jmp    27797 <http_loop+0x1357>
   2857e:	xchg   ax,ax
   28580:	mov    esi,0x1
   28585:	mov    rdi,rbx
   28588:	call   38230 <url_string>
   2858d:	lea    rsi,[rip+0x3f2d8]        # 6786c <primes.6089+0x178c>
   28594:	mov    edi,0x2
   28599:	mov    rdx,rax
   2859c:	mov    rbp,rax
   2859f:	xor    eax,eax
   285a1:	call   2e0a0 <logprintf>
   285a6:	mov    rax,QWORD PTR [rsp+0x8]
   285ab:	mov    eax,DWORD PTR [rax]
   285ad:	jmp    281cd <http_loop+0x1d8d>
   285b2:	nop    WORD PTR [rax+rax*1+0x0]
   285b8:	cmp    DWORD PTR [rcx],0x22
   285bb:	jne    283e5 <http_loop+0x1fa5>
   285c1:	jmp    27318 <http_loop+0xed8>
   285c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   285d0:	cmp    BYTE PTR [rip+0x5d0d1],0x0        # 856a8 <pconn_active>
   285d7:	mov    edi,DWORD PTR [rsp+0x124]
   285de:	je     285ec <http_loop+0x21ac>
   285e0:	cmp    DWORD PTR [rip+0x5d09a],edi        # 85680 <pconn>
   285e6:	je     291e0 <http_loop+0x2da0>
   285ec:	call   f400 <fd_close>
   285f1:	mov    DWORD PTR [rsp+0x124],0xffffffff
   285fc:	xor    r12d,r12d
   285ff:	mov    r13d,0x34
   28605:	xor    ebp,ebp
   28607:	jmp    26f67 <http_loop+0xb27>
   2860c:	mov    rdi,r13
   2860f:	mov    rbx,QWORD PTR [rsp+0xc0]
   28617:	mov    r13d,0xfffffffe
   2861d:	call   c8b0 <fclose@plt>
   28622:	jmp    27998 <http_loop+0x1558>
   28627:	cmp    BYTE PTR [rip+0x5d07a],0x0        # 856a8 <pconn_active>
   2862e:	mov    edi,DWORD PTR [rsp+0x124]
   28635:	je     28643 <http_loop+0x2203>
   28637:	cmp    DWORD PTR [rip+0x5d043],edi        # 85680 <pconn>
   2863d:	je     293aa <http_loop+0x2f6a>
   28643:	call   f400 <fd_close>
   28648:	mov    DWORD PTR [rsp+0x124],0xffffffff
   28653:	xor    ebp,ebp
   28655:	jmp    26f67 <http_loop+0xb27>
   2865a:	cmp    BYTE PTR [rsp+0x121],0x0
   28662:	je     2866b <http_loop+0x222b>
   28664:	mov    BYTE PTR [rip+0x5d02a],0x1        # 85695 <pconn+0x15>
   2866b:	mov    r13,QWORD PTR [rsp+0x208]
   28673:	test   r13,r13
   28676:	je     290f3 <http_loop+0x2cb3>
   2867c:	cmp    BYTE PTR [rip+0x61c75],0x0        # 8a2f8 <opt+0x278>
   28683:	je     289de <http_loop+0x259e>
   28689:	mov    rsi,r13
   2868c:	lea    rdi,[rip+0x3f241]        # 678d4 <primes.6089+0x17f4>
   28693:	xor    eax,eax
   28695:	mov    BYTE PTR [rsp+0x238],0x1
   2869d:	call   3ba30 <aprintf>
   286a2:	mov    rdi,QWORD PTR [rsp+0x208]
   286aa:	mov    rbp,rax
   286ad:	call   4bdc0 <rpl_free>
   286b2:	mov    QWORD PTR [rsp+0x208],rbp
   286ba:	cmp    BYTE PTR [rsp+0x210],0x0
   286c2:	je     29090 <http_loop+0x2c50>
   286c8:	cmp    BYTE PTR [rip+0x61bed],0x0        # 8a2bc <opt+0x23c>
   286cf:	mov    BYTE PTR [rsp+0x210],0x1
   286d7:	je     286fb <http_loop+0x22bb>
   286d9:	cmp    BYTE PTR [rsp+0x211],0x0
   286e1:	jne    286fb <http_loop+0x22bb>
   286e3:	mov    rdi,QWORD PTR [rsp+0x30]
   286e8:	xor    ebp,ebp
   286ea:	call   225b0 <set_file_timestamp>
   286ef:	mov    r13d,eax
   286f2:	cmp    eax,0x19
   286f5:	jne    26f67 <http_loop+0xb27>
   286fb:	mov    rdi,QWORD PTR [rsp+0x1d8]
   28703:	mov    DWORD PTR [rsp+0x1e0],r15d
   2870b:	call   4bdc0 <rpl_free>
   28710:	mov    rdi,QWORD PTR [rsp+0x158]
   28718:	mov    QWORD PTR [rsp+0x1d8],0x0
   28724:	cmp    BYTE PTR [rdi],0x0
   28727:	jne    29398 <http_loop+0x2f58>
   2872d:	mov    edx,0x5
   28732:	lea    rsi,[rip+0x3efc7]        # 67700 <primes.6089+0x1620>
   28739:	xor    edi,edi
   2873b:	call   c780 <dcgettext@plt>
   28740:	mov    rdi,rax
   28743:	call   4ba50 <xstrdup>
   28748:	mov    QWORD PTR [rsp+0x1d8],rax
   28750:	cmp    BYTE PTR [rip+0x61c91],0x0        # 8a3e8 <opt+0x368>
   28757:	mov    rdi,QWORD PTR [rsp+0x150]
   2875f:	je     28b64 <http_loop+0x2724>
   28765:	cmp    QWORD PTR [rip+0x61c9b],0x0        # 8a408 <hsts_store>
   2876d:	je     28b64 <http_loop+0x2724>
   28773:	lea    rsi,[rip+0x3ef97]        # 67711 <primes.6089+0x1631>
   2877a:	call   23950 <resp_header_strdup>
   2877f:	mov    BYTE PTR [rsp+0x170],0x0
   28787:	mov    QWORD PTR [rsp+0x78],rax
   2878c:	mov    QWORD PTR [rsp+0x178],rax
   28794:	test   rax,rax
   28797:	je     28b52 <http_loop+0x2712>
   2879d:	lea    rax,[rsp+0x180]
   287a5:	lea    rdx,[rsp+0x178]
   287ad:	mov    QWORD PTR [rsp+0x80],r12
   287b5:	xor    ebp,ebp
   287b7:	mov    BYTE PTR [rsp+0x18],0x0
   287bc:	lea    r13,[rsp+0x170]
   287c4:	mov    r12,rax
   287c7:	mov    QWORD PTR [rsp+0x88],rbx
   287cf:	mov    rbx,rdx
   287d2:	mov    QWORD PTR [rsp+0x90],r14
   287da:	mov    r14,QWORD PTR [rsp+0x58]
   287df:	jmp    28817 <http_loop+0x23d7>
   287e1:	mov    BYTE PTR [rsp+0x58],cl
   287e5:	cmp    rax,0x11
   287e9:	jne    2880f <http_loop+0x23cf>
   287eb:	mov    edx,0x11
   287f0:	lea    rsi,[rip+0x3ef34]        # 6772b <primes.6089+0x164b>
   287f7:	call   433b0 <c_strncasecmp>
   287fc:	movzx  ecx,BYTE PTR [rsp+0x58]
   28801:	test   eax,eax
   28803:	movzx  eax,BYTE PTR [rsp+0x18]
   28808:	cmove  eax,ecx
   2880b:	mov    BYTE PTR [rsp+0x18],al
   2880f:	mov    BYTE PTR [rsp+0x170],0x0
   28817:	mov    ecx,0x3b
   2881c:	mov    r8,r13
   2881f:	mov    rdx,r14
   28822:	mov    rsi,r12
   28825:	mov    rdi,rbx
   28828:	call   24bd0 <extract_param>
   2882d:	mov    ecx,eax
   2882f:	test   al,al
   28831:	je     28aab <http_loop+0x266b>
   28837:	mov    rdi,QWORD PTR [rsp+0x180]
   2883f:	mov    rax,QWORD PTR [rsp+0x188]
   28847:	sub    rax,rdi
   2884a:	cmp    rax,0x7
   2884e:	jne    287e1 <http_loop+0x23a1>
   28850:	mov    edx,0x7
   28855:	lea    rsi,[rip+0x32d08]        # 5b564 <_IO_stdin_used+0x564>
   2885c:	call   433b0 <c_strncasecmp>
   28861:	test   eax,eax
   28863:	jne    2880f <http_loop+0x23cf>
   28865:	mov    rdi,rbp
   28868:	call   4bdc0 <rpl_free>
   2886d:	mov    rsi,QWORD PTR [rsp+0x198]
   28875:	mov    rdi,QWORD PTR [rsp+0x190]
   2887d:	call   3b8a0 <strdupdelim>
   28882:	mov    rbp,rax
   28885:	jmp    2880f <http_loop+0x23cf>
   28887:	nop    WORD PTR [rax+rax*1+0x0]
   28890:	mov    rsi,r12
   28893:	lea    rdi,[rip+0x3edbf]        # 67659 <primes.6089+0x1579>
   2889a:	xor    eax,eax
   2889c:	call   2e250 <debug_logprintf>
   288a1:	jmp    2760c <http_loop+0x11cc>
   288a6:	mov    r13d,eax
   288a9:	xor    ebp,ebp
   288ab:	jmp    26f67 <http_loop+0xb27>
   288b0:	mov    r13d,0x2a
   288b6:	xor    ebp,ebp
   288b8:	jmp    26f67 <http_loop+0xb27>
   288bd:	mov    rdi,r8
   288c0:	call   3e8e0 <number_to_static_string>
   288c5:	mov    edx,0x5
   288ca:	lea    rsi,[rip+0x3e9ef]        # 672c0 <primes.6089+0x11e0>
   288d1:	xor    edi,edi
   288d3:	mov    rbp,rax
   288d6:	call   c780 <dcgettext@plt>
   288db:	mov    r9,r15
   288de:	mov    r8,rbp
   288e1:	mov    rcx,r13
   288e4:	mov    rsi,rax
   288e7:	mov    rdx,r12
   288ea:	xor    edi,edi
   288ec:	xor    eax,eax
   288ee:	call   2e0a0 <logprintf>
   288f3:	mov    esi,DWORD PTR [rip+0x6178f]        # 8a088 <opt+0x8>
   288f9:	mov    edi,DWORD PTR [rsp+0x40]
   288fd:	call   35c00 <printwhat>
   28902:	mov    BYTE PTR [rsp+0x47],0x1
   28907:	jmp    27797 <http_loop+0x1357>
   2890c:	mov    rdi,r8
   2890f:	call   3e8e0 <number_to_static_string>
   28914:	mov    edx,0x5
   28919:	lea    rsi,[rip+0x3e970]        # 67290 <primes.6089+0x11b0>
   28920:	xor    edi,edi
   28922:	mov    rbp,rax
   28925:	call   c780 <dcgettext@plt>
   2892a:	mov    r8,rbp
   2892d:	mov    rcx,r13
   28930:	mov    rdx,r12
   28933:	mov    rsi,rax
   28936:	xor    edi,edi
   28938:	xor    eax,eax
   2893a:	call   2e0a0 <logprintf>
   2893f:	mov    esi,DWORD PTR [rip+0x61743]        # 8a088 <opt+0x8>
   28945:	mov    edi,DWORD PTR [rsp+0x40]
   28949:	call   35c00 <printwhat>
   2894e:	mov    BYTE PTR [rsp+0x47],0x1
   28953:	jmp    27797 <http_loop+0x1357>
   28958:	mov    r14,rbx
   2895b:	mov    edx,0x5
   28960:	lea    rsi,[rip+0x3e859]        # 671c0 <primes.6089+0x10e0>
   28967:	xor    edi,edi
   28969:	lea    rbx,[rip+0x45aa7]        # 6e417 <urlchr_table+0x877>
   28970:	call   c780 <dcgettext@plt>
   28975:	xor    edi,edi
   28977:	mov    rsi,rax
   2897a:	xor    eax,eax
   2897c:	call   2e0a0 <logprintf>
   28981:	mov    rsi,QWORD PTR [rsp+0x1e8]
   28989:	test   rsi,rsi
   2898c:	je     2899b <http_loop+0x255b>
   2898e:	mov    edi,0x7
   28993:	call   4b2b0 <quotearg_style>
   28998:	mov    rbx,rax
   2899b:	mov    ebp,DWORD PTR [rsp+0x1e0]
   289a2:	mov    r13,QWORD PTR [r14]
   289a5:	mov    edx,0x5
   289aa:	xor    edi,edi
   289ac:	lea    rsi,[rip+0x3eed4]        # 67887 <primes.6089+0x17a7>
   289b3:	call   c780 <dcgettext@plt>
   289b8:	mov    r8d,ebp
   289bb:	mov    r9,rbx
   289be:	mov    rcx,r13
   289c1:	mov    rsi,rax
   289c4:	mov    rdx,r12
   289c7:	mov    edi,0x2
   289cc:	xor    eax,eax
   289ce:	call   2e0a0 <logprintf>
   289d3:	mov    r8d,0x19
   289d9:	jmp    270de <http_loop+0xc9e>
   289de:	cmp    BYTE PTR [rip+0x61703],0x0        # 8a0e8 <opt+0x68>
   289e5:	jne    28689 <http_loop+0x2249>
   289eb:	mov    rdi,r13
   289ee:	call   3c670 <acceptable>
   289f3:	test   al,al
   289f5:	jne    29707 <http_loop+0x32c7>
   289fb:	mov    r13,QWORD PTR [rsp+0x208]
   28a03:	jmp    28689 <http_loop+0x2249>
   28a08:	call   23310 <invalidate_persistent>
   28a0d:	jmp    279b9 <http_loop+0x1579>
   28a12:	mov    rsi,QWORD PTR [rsp+0x208]
   28a1a:	lea    rdi,[rsp+0x190]
   28a22:	mov    QWORD PTR [rsp+0x190],0x0
   28a2e:	call   36470 <set_local_file>
   28a33:	mov    rdi,QWORD PTR [rsp+0x190]
   28a3b:	test   rdi,rdi
   28a3e:	je     27058 <http_loop+0xc18>
   28a44:	cmp    BYTE PTR [rsp+0xdf],0x0
   28a4c:	je     28a65 <http_loop+0x2625>
   28a4e:	mov    r8,QWORD PTR [rsp+0x1d0]
   28a56:	test   r8,r8
   28a59:	je     28a65 <http_loop+0x2625>
   28a5b:	cmp    BYTE PTR [r8],0x0
   28a5f:	jne    29ec7 <http_loop+0x3a87>
   28a65:	mov    rsi,QWORD PTR [rsp+0xd0]
   28a6d:	call   3bd40 <touch>
   28a72:	jmp    27058 <http_loop+0xc18>
   28a77:	mov    rdi,rbp
   28a7a:	call   4bdc0 <rpl_free>
   28a7f:	mov    BYTE PTR [rsp+0x47],0x1
   28a84:	jmp    27797 <http_loop+0x1357>
   28a89:	xor    edi,edi
   28a8b:	mov    edx,0x5
   28a90:	lea    rsi,[rip+0x3e601]        # 67098 <primes.6089+0xfb8>
   28a97:	call   c780 <dcgettext@plt>
   28a9c:	xor    edi,edi
   28a9e:	mov    rsi,rax
   28aa1:	call   2de60 <logputs>
   28aa6:	jmp    27c95 <http_loop+0x1855>
   28aab:	mov    r12,QWORD PTR [rsp+0x80]
   28ab3:	mov    rbx,QWORD PTR [rsp+0x88]
   28abb:	mov    r14,QWORD PTR [rsp+0x90]
   28ac3:	test   rbp,rbp
   28ac6:	je     2a2ec <http_loop+0x3eac>
   28acc:	xor    esi,esi
   28ace:	mov    edx,0xa
   28ad3:	mov    rdi,rbp
   28ad6:	call   c5a0 <strtol@plt>
   28adb:	cmp    BYTE PTR [rip+0x617d9],0x0        # 8a2bb <opt+0x23b>
   28ae2:	mov    r13,rax
   28ae5:	jne    2a355 <http_loop+0x3f15>
   28aeb:	mov    rdi,rbp
   28aee:	call   4bdc0 <rpl_free>
   28af3:	mov    ecx,DWORD PTR [rbx+0x18]
   28af6:	mov    rdx,QWORD PTR [rbx+0x10]
   28afa:	mov    r8,r13
   28afd:	mov    esi,DWORD PTR [rbx+0x8]
   28b00:	movzx  r9d,BYTE PTR [rsp+0x18]
   28b06:	mov    rdi,QWORD PTR [rip+0x618fb]        # 8a408 <hsts_store>
   28b0d:	call   1f480 <hsts_store_entry>
   28b12:	test   al,al
   28b14:	je     2a301 <http_loop+0x3ec1>
   28b1a:	cmp    BYTE PTR [rip+0x6179a],0x0        # 8a2bb <opt+0x23b>
   28b21:	je     28b52 <http_loop+0x2712>
   28b23:	cmp    BYTE PTR [rsp+0x18],0x0
   28b28:	lea    rax,[rip+0x3eae0]        # 6760f <primes.6089+0x152f>
   28b2f:	mov    edx,DWORD PTR [rbx+0x18]
   28b32:	mov    rcx,r13
   28b35:	lea    r8,[rip+0x3eace]        # 6760a <primes.6089+0x152a>
   28b3c:	mov    rsi,QWORD PTR [rbx+0x10]
   28b40:	lea    rdi,[rip+0x3e239]        # 66d80 <primes.6089+0xca0>
   28b47:	cmove  r8,rax
   28b4b:	xor    eax,eax
   28b4d:	call   2e250 <debug_logprintf>
   28b52:	mov    rdi,QWORD PTR [rsp+0x78]
   28b57:	call   4bdc0 <rpl_free>
   28b5c:	mov    rdi,QWORD PTR [rsp+0x150]
   28b64:	lea    rsi,[rip+0x3e986]        # 674f1 <primes.6089+0x1411>
   28b6b:	call   23950 <resp_header_strdup>
   28b70:	mov    rbp,rax
   28b73:	test   rax,rax
   28b76:	je     28bc2 <http_loop+0x2782>
   28b78:	mov    esi,0x3b
   28b7d:	mov    rdi,rax
   28b80:	call   c6c0 <strchr@plt>
   28b85:	test   rax,rax
   28b88:	je     28bc2 <http_loop+0x2782>
   28b8a:	mov    rdx,rax
   28b8d:	cmp    rbp,rax
   28b90:	jae    28ba8 <http_loop+0x2768>
   28b92:	movzx  ecx,BYTE PTR [rdx-0x1]
   28b96:	cmp    cl,0xd
   28b99:	jg     291c2 <http_loop+0x2d82>
   28b9f:	cmp    cl,0x8
   28ba2:	jg     291cb <http_loop+0x2d8b>
   28ba8:	mov    BYTE PTR [rdx],0x0
   28bab:	cmp    BYTE PTR [rip+0x61814],0x0        # 8a3c6 <opt+0x346>
   28bb2:	je     28bc2 <http_loop+0x2782>
   28bb4:	cmp    QWORD PTR [rip+0x6180c],0x0        # 8a3c8 <opt+0x348>
   28bbc:	je     2a00b <http_loop+0x3bcb>
   28bc2:	mov    rdi,QWORD PTR [rsp+0x1c8]
   28bca:	call   4bdc0 <rpl_free>
   28bcf:	mov    rdi,QWORD PTR [rsp+0x150]
   28bd7:	lea    rsi,[rip+0x3eb5f]        # 6773d <primes.6089+0x165d>
   28bde:	mov    QWORD PTR [rsp+0x1c8],0x0
   28bea:	call   23950 <resp_header_strdup>
   28bef:	mov    rdi,QWORD PTR [rsp+0x1d0]
   28bf7:	mov    QWORD PTR [rsp+0x1c8],rax
   28bff:	call   4bdc0 <rpl_free>
   28c04:	mov    rdi,QWORD PTR [rsp+0x150]
   28c0c:	lea    rsi,[rip+0x3eb33]        # 67746 <primes.6089+0x1666>
   28c13:	mov    QWORD PTR [rsp+0x1d0],0x0
   28c1f:	call   23950 <resp_header_strdup>
   28c24:	mov    QWORD PTR [rsp+0x1d0],rax
   28c2c:	test   rax,rax
   28c2f:	je     298c2 <http_loop+0x3482>
   28c35:	mov    rdi,QWORD PTR [rsp+0x150]
   28c3d:	mov    ecx,0x200
   28c42:	mov    rdx,r14
   28c45:	lea    rsi,[rip+0x3eb25]        # 67771 <primes.6089+0x1691>
   28c4c:	call   239c0 <resp_header_copy>
   28c51:	mov    QWORD PTR [rsp+0x18],0x0
   28c5a:	test   al,al
   28c5c:	jne    293fa <http_loop+0x2fba>
   28c62:	mov    rdi,QWORD PTR [rsp+0x150]
   28c6a:	mov    ecx,0x200
   28c6f:	mov    rdx,r14
   28c72:	lea    rsi,[rip+0x3eb06]        # 6777f <primes.6089+0x169f>
   28c79:	call   239c0 <resp_header_copy>
   28c7e:	test   al,al
   28c80:	je     28ce4 <http_loop+0x28a4>
   28c82:	movzx  edx,BYTE PTR [rsp+0x340]
   28c8a:	mov    DWORD PTR [rsp+0x230],0xffffffff
   28c95:	test   dl,dl
   28c97:	je     28cd9 <http_loop+0x2899>
   28c99:	sub    edx,0x42
   28c9c:	cmp    dl,0x36
   28c9f:	ja     28ccc <http_loop+0x288c>
   28ca1:	lea    rcx,[rip+0x3ed94]        # 67a3c <primes.6089+0x195c>
   28ca8:	movzx  edx,dl
   28cab:	movsxd rax,DWORD PTR [rcx+rdx*4]
   28caf:	add    rax,rcx
   28cb2:	notrack jmp rax
   28cb5:	lea    rsi,[rip+0x3eae9]        # 677a5 <primes.6089+0x16c5>
   28cbc:	mov    rdi,r14
   28cbf:	call   43340 <c_strcasecmp>
   28cc4:	test   eax,eax
   28cc6:	je     28e01 <http_loop+0x29c1>
   28ccc:	cmp    BYTE PTR [rip+0x615e8],0x0        # 8a2bb <opt+0x23b>
   28cd3:	jne    2a616 <http_loop+0x41d6>
   28cd9:	mov    DWORD PTR [rsp+0x230],0x0
   28ce4:	mov    eax,DWORD PTR [rsp+0x50]
   28ce8:	lea    edx,[r15-0xc8]
   28cef:	and    eax,0x80
   28cf4:	cmp    edx,0x63
   28cf7:	ja     291ea <http_loop+0x2daa>
   28cfd:	mov    rdx,QWORD PTR [rsp+0x8]
   28d02:	or     DWORD PTR [rdx],0x2
   28d05:	cmp    r15d,0xcc
   28d0c:	je     29d80 <http_loop+0x3940>
   28d12:	test   eax,eax
   28d14:	setne  al
   28d17:	mov    r14d,eax
   28d1a:	cmp    r15d,0x130
   28d21:	jne    28d2b <http_loop+0x28eb>
   28d23:	test   al,al
   28d25:	jne    2a62c <http_loop+0x41ec>
   28d2b:	mov    rax,QWORD PTR [rsp+0x8]
   28d30:	mov    r13d,DWORD PTR [rax]
   28d33:	test   rbp,rbp
   28d36:	je     2989e <http_loop+0x345e>
   28d3c:	lea    rsi,[rip+0x3d8cf]        # 66612 <primes.6089+0x532>
   28d43:	mov    rdi,rbp
   28d46:	call   43340 <c_strcasecmp>
   28d4b:	test   eax,eax
   28d4d:	je     29c1b <http_loop+0x37db>
   28d53:	lea    rsi,[rip+0x3ea79]        # 677d3 <primes.6089+0x16f3>
   28d5a:	mov    rdi,rbp
   28d5d:	call   43340 <c_strcasecmp>
   28d62:	test   eax,eax
   28d64:	je     29c1b <http_loop+0x37db>
   28d6a:	mov    rax,QWORD PTR [rsp+0x8]
   28d6f:	and    r13d,0xfffffffe
   28d73:	mov    DWORD PTR [rax],r13d
   28d76:	lea    rsi,[rip+0x3ea6c]        # 677e9 <primes.6089+0x1709>
   28d7d:	mov    rdi,rbp
   28d80:	call   43340 <c_strcasecmp>
   28d85:	test   eax,eax
   28d87:	jne    298aa <http_loop+0x346a>
   28d8d:	mov    rax,QWORD PTR [rsp+0x8]
   28d92:	mov    eax,DWORD PTR [rax]
   28d94:	mov    DWORD PTR [rsp+0x50],eax
   28d98:	or     eax,0x40
   28d9b:	mov    rdx,QWORD PTR [rsp+0x8]
   28da0:	cmp    BYTE PTR [rip+0x61552],0x0        # 8a2f9 <opt+0x279>
   28da7:	mov    DWORD PTR [rdx],eax
   28da9:	je     28ed6 <http_loop+0x2a96>
   28daf:	mov    esi,DWORD PTR [rsp+0x230]
   28db6:	lea    eax,[rsi+0x1]
   28db9:	cmp    eax,0x5
   28dbc:	ja     2a42f <http_loop+0x3fef>
   28dc2:	lea    rdx,[rip+0x3ed4f]        # 67b18 <primes.6089+0x1a38>
   28dc9:	movsxd rax,DWORD PTR [rdx+rax*4]
   28dcd:	add    rax,rdx
   28dd0:	notrack jmp rax
   28dd3:	lea    rsi,[rip+0x3e9be]        # 67798 <primes.6089+0x16b8>
   28dda:	mov    rdi,r14
   28ddd:	call   43340 <c_strcasecmp>
   28de2:	test   eax,eax
   28de4:	je     28e6b <http_loop+0x2a2b>
   28dea:	lea    rsi,[rip+0x3e9b2]        # 677a3 <primes.6089+0x16c3>
   28df1:	mov    rdi,r14
   28df4:	call   43340 <c_strcasecmp>
   28df9:	test   eax,eax
   28dfb:	jne    28ccc <http_loop+0x288c>
   28e01:	mov    DWORD PTR [rsp+0x230],0x1
   28e0c:	jmp    28ce4 <http_loop+0x28a4>
   28e11:	lea    rsi,[rip+0x3e69e]        # 674b6 <primes.6089+0x13d6>
   28e18:	mov    rdi,r14
   28e1b:	call   43340 <c_strcasecmp>
   28e20:	test   eax,eax
   28e22:	jne    28ccc <http_loop+0x288c>
   28e28:	jmp    28cd9 <http_loop+0x2899>
   28e2d:	lea    rsi,[rip+0x3e95c]        # 67790 <primes.6089+0x16b0>
   28e34:	mov    rdi,r14
   28e37:	call   43340 <c_strcasecmp>
   28e3c:	test   eax,eax
   28e3e:	jne    28ccc <http_loop+0x288c>
   28e44:	mov    DWORD PTR [rsp+0x230],0x2
   28e4f:	jmp    28ce4 <http_loop+0x28a4>
   28e54:	lea    rsi,[rip+0x3e93f]        # 6779a <primes.6089+0x16ba>
   28e5b:	mov    rdi,r14
   28e5e:	call   43340 <c_strcasecmp>
   28e63:	test   eax,eax
   28e65:	jne    28ccc <http_loop+0x288c>
   28e6b:	mov    DWORD PTR [rsp+0x230],0x3
   28e76:	jmp    28ce4 <http_loop+0x28a4>
   28e7b:	lea    rsi,[rip+0x3e798]        # 6761a <primes.6089+0x153a>
   28e82:	mov    rdi,r14
   28e85:	call   43340 <c_strcasecmp>
   28e8a:	test   eax,eax
   28e8c:	jne    28ccc <http_loop+0x288c>
   28e92:	mov    DWORD PTR [rsp+0x230],0x4
   28e9d:	jmp    28ce4 <http_loop+0x28a4>
   28ea2:	xor    r13d,r13d
   28ea5:	mov    rax,QWORD PTR [rsp+0x8]
   28eaa:	mov    eax,DWORD PTR [rax]
   28eac:	test   al,0x1
   28eae:	jne    2a096 <http_loop+0x3c56>
   28eb4:	test   al,0x40
   28eb6:	jne    2a078 <http_loop+0x3c38>
   28ebc:	test   r13,r13
   28ebf:	je     28ed6 <http_loop+0x2a96>
   28ec1:	mov    rdx,QWORD PTR [rsp+0x8]
   28ec6:	lea    rdi,[rsp+0x208]
   28ece:	mov    rsi,r13
   28ed1:	call   23470 <ensure_extension.isra.0>
   28ed6:	cmp    r15d,0xc8
   28edd:	sete   r13b
   28ee1:	jne    28eec <http_loop+0x2aac>
   28ee3:	test   r14b,r14b
   28ee6:	jne    29f49 <http_loop+0x3b09>
   28eec:	cmp    r15d,0x1a0
   28ef3:	je     2a546 <http_loop+0x4106>
   28ef9:	cmp    BYTE PTR [rip+0x613bc],0x0        # 8a2bc <opt+0x23c>
   28f00:	jne    298e3 <http_loop+0x34a3>
   28f06:	mov    rax,QWORD PTR [rsp+0x1b0]
   28f0e:	test   rax,rax
   28f11:	jle    298e3 <http_loop+0x34a3>
   28f17:	cmp    QWORD PTR [rsp+0x18],0x0
   28f1d:	jne    298ef <http_loop+0x34af>
   28f23:	test   r13b,r13b
   28f26:	je     298e3 <http_loop+0x34a3>
   28f2c:	mov    rdx,QWORD PTR [rsp+0xe8]
   28f34:	test   rdx,rdx
   28f37:	js     28f42 <http_loop+0x2b02>
   28f39:	cmp    rdx,rax
   28f3c:	jle    2a546 <http_loop+0x4106>
   28f42:	cmp    QWORD PTR [rsp+0xe8],0xffffffffffffffff
   28f4b:	je     29f17 <http_loop+0x3ad7>
   28f51:	cmp    DWORD PTR [rsp+0x234],0x1
   28f59:	je     29f17 <http_loop+0x3ad7>
   28f5f:	mov    rax,QWORD PTR [rsp+0xe8]
   28f67:	add    rax,QWORD PTR [rsp+0x18]
   28f6c:	mov    QWORD PTR [rsp+0x1a8],rax
   28f74:	lea    rax,[rip+0x61105]        # 8a080 <opt>
   28f7b:	cmp    DWORD PTR [rax],0x0
   28f7e:	je     29d0d <http_loop+0x38cd>
   28f84:	mov    rax,QWORD PTR [rsp+0x8]
   28f89:	test   BYTE PTR [rax],0x2
   28f8c:	jne    29c2c <http_loop+0x37ec>
   28f92:	cmp    BYTE PTR [rip+0x61321],0x0        # 8a2ba <opt+0x23a>
   28f99:	jne    29d1b <http_loop+0x38db>
   28f9f:	cmp    QWORD PTR [rsp+0x20],0x0
   28fa5:	mov    QWORD PTR [rsp+0x1a0],0x0
   28fb1:	mov    DWORD PTR [rsp+0x1b8],0x0
   28fbc:	mov    QWORD PTR [rsp+0x1b0],0x0
   28fc8:	je     2a396 <http_loop+0x3f56>
   28fce:	push   rax
   28fcf:	xor    r8d,r8d
   28fd2:	xor    edx,edx
   28fd4:	push   r12
   28fd6:	push   r15
   28fd8:	push   rbp
   28fd9:	push   QWORD PTR [rsp+0xb8]
   28fe0:	lea    rax,[rsp+0x338]
   28fe8:	push   rax
   28fe9:	lea    rax,[rsp+0x320]
   28ff1:	push   rax
   28ff2:	push   QWORD PTR [rbx]
   28ff4:	mov    rcx,QWORD PTR [rsp+0x128]
   28ffc:	movzx  r9d,BYTE PTR [rsp+0x120]
   29005:	mov    esi,DWORD PTR [rsp+0x164]
   2900c:	mov    rdi,QWORD PTR [rsp+0x70]
   29011:	call   22fe0 <read_response_body>
   29016:	add    rsp,0x40
   2901a:	mov    r13d,eax
   2901d:	cmp    eax,0x23
   29020:	jne    29617 <http_loop+0x31d7>
   29026:	cmp    DWORD PTR [rsp+0x1b8],0x0
   2902e:	js     29617 <http_loop+0x31d7>
   29034:	cmp    BYTE PTR [rsp+0xc0],0x0
   2903c:	jne    2906a <http_loop+0x2c2a>
   2903e:	cmp    BYTE PTR [rip+0x5c663],0x0        # 856a8 <pconn_active>
   29045:	mov    edi,DWORD PTR [rsp+0x124]
   2904c:	je     2905a <http_loop+0x2c1a>
   2904e:	cmp    DWORD PTR [rip+0x5c62c],edi        # 85680 <pconn>
   29054:	je     2a69d <http_loop+0x425d>
   2905a:	call   f400 <fd_close>
   2905f:	mov    DWORD PTR [rsp+0x124],0xffffffff
   2906a:	cmp    r15d,0x1f8
   29071:	mov    edx,0x17
   29076:	mov    eax,0x23
   2907b:	cmove  eax,edx
   2907e:	mov    r13d,eax
   29081:	jmp    26f67 <http_loop+0xb27>
   29086:	nop    WORD PTR cs:[rax+rax*1+0x0]
   29090:	mov    rdi,QWORD PTR [rsp+0x208]
   29098:	xor    esi,esi
   2909a:	call   3bed0 <file_exists_p>
   2909f:	test   al,al
   290a1:	je     286c8 <http_loop+0x2288>
   290a7:	cmp    BYTE PTR [rip+0x61004],0x0        # 8a0b2 <opt+0x32>
   290ae:	je     29672 <http_loop+0x3232>
   290b4:	mov    rbp,QWORD PTR [rip+0x610c5]        # 8a180 <opt+0x100>
   290bb:	test   rbp,rbp
   290be:	jne    286c8 <http_loop+0x2288>
   290c4:	mov    r13d,0x22
   290ca:	jmp    26f67 <http_loop+0xb27>
   290cf:	nop
   290d0:	mov    edx,0x5
   290d5:	lea    rsi,[rip+0x3df7c]        # 67058 <primes.6089+0xf78>
   290dc:	call   c780 <dcgettext@plt>
   290e1:	mov    edi,0x1
   290e6:	mov    rsi,rax
   290e9:	call   2de60 <logputs>
   290ee:	jmp    27cb4 <http_loop+0x1874>
   290f3:	cmp    BYTE PTR [rip+0x612ca],0x0        # 8a3c4 <opt+0x344>
   290fa:	je     29120 <http_loop+0x2ce0>
   290fc:	mov    rdi,QWORD PTR [rsp+0x150]
   29104:	mov    ecx,0x200
   29109:	mov    rdx,r14
   2910c:	lea    rsi,[rip+0x3e5d0]        # 676e3 <primes.6089+0x1603>
   29113:	call   239c0 <resp_header_copy>
   29118:	test   al,al
   2911a:	jne    29939 <http_loop+0x34f9>
   29120:	xor    esi,esi
   29122:	mov    rdi,rbx
   29125:	call   37670 <url_file_name>
   2912a:	mov    QWORD PTR [rsp+0x208],rax
   29132:	mov    rdi,r13
   29135:	call   4bdc0 <rpl_free>
   2913a:	mov    r13,QWORD PTR [rsp+0x208]
   29142:	jmp    2867c <http_loop+0x223c>
   29147:	call   23310 <invalidate_persistent>
   2914c:	jmp    284b1 <http_loop+0x2071>
   29151:	cmp    QWORD PTR [rsp+0x228],rcx
   29159:	jl     29648 <http_loop+0x3208>
   2915f:	mov    rax,QWORD PTR [rsp+0x1a8]
   29167:	cmp    rax,0xffffffffffffffff
   2916b:	je     2a039 <http_loop+0x3bf9>
   29171:	mov    r8,QWORD PTR [rsp+0x220]
   29179:	cmp    rax,r8
   2917c:	je     2a039 <http_loop+0x3bf9>
   29182:	mov    rdi,r8
   29185:	call   3e8e0 <number_to_static_string>
   2918a:	mov    edx,0x5
   2918f:	lea    rsi,[rip+0x3df7a]        # 67110 <primes.6089+0x1030>
   29196:	xor    edi,edi
   29198:	mov    r13,rax
   2919b:	call   c780 <dcgettext@plt>
   291a0:	mov    rdx,r13
   291a3:	xor    edi,edi
   291a5:	mov    rsi,rax
   291a8:	xor    eax,eax
   291aa:	call   2e0a0 <logprintf>
   291af:	lea    rsi,[rip+0x3c819]        # 659cf <yy_accept+0x90f>
   291b6:	xor    edi,edi
   291b8:	call   2de60 <logputs>
   291bd:	jmp    27cfd <http_loop+0x18bd>
   291c2:	cmp    cl,0x20
   291c5:	jne    28ba8 <http_loop+0x2768>
   291cb:	sub    rdx,0x1
   291cf:	cmp    rbp,rdx
   291d2:	jne    28b92 <http_loop+0x2752>
   291d8:	mov    rdx,rbp
   291db:	jmp    28ba8 <http_loop+0x2768>
   291e0:	call   23310 <invalidate_persistent>
   291e5:	jmp    285f1 <http_loop+0x21b1>
   291ea:	cmp    r15d,0xcc
   291f1:	je     29d80 <http_loop+0x3940>
   291f7:	lea    edx,[r15-0x12d]
   291fe:	cmp    edx,0x2
   29201:	jbe    29210 <http_loop+0x2dd0>
   29203:	cmp    r15d,0x133
   2920a:	jne    2a688 <http_loop+0x4248>
   29210:	mov    rdx,QWORD PTR [rsp+0x1c8]
   29218:	cmp    r15d,0x12c
   2921f:	jne    293b4 <http_loop+0x2f74>
   29225:	test   rdx,rdx
   29228:	je     2a0b4 <http_loop+0x3c74>
   2922e:	xor    edi,edi
   29230:	mov    edx,0x5
   29235:	lea    rsi,[rip+0x3e56e]        # 677aa <primes.6089+0x16ca>
   2923c:	call   c780 <dcgettext@plt>
   29241:	mov    rdi,QWORD PTR [rsp+0x1c8]
   29249:	mov    r13,rax
   2924c:	test   rdi,rdi
   2924f:	je     293c4 <http_loop+0x2f84>
   29255:	call   2dc30 <escnonprint_uri>
   2925a:	mov    r14,rax
   2925d:	xor    edi,edi
   2925f:	mov    edx,0x5
   29264:	lea    rsi,[rip+0x3e558]        # 677c3 <primes.6089+0x16e3>
   2926b:	call   c780 <dcgettext@plt>
   29270:	xor    edi,edi
   29272:	mov    rcx,r13
   29275:	mov    rdx,r14
   29278:	mov    rsi,rax
   2927b:	xor    eax,eax
   2927d:	call   2e0a0 <logprintf>
   29282:	cmp    QWORD PTR [rsp+0x20],0x0
   29288:	mov    QWORD PTR [rsp+0x1a0],0x0
   29294:	mov    DWORD PTR [rsp+0x1b8],0x0
   2929f:	mov    QWORD PTR [rsp+0x1b0],0x0
   292ab:	je     2952b <http_loop+0x30eb>
   292b1:	push   rax
   292b2:	xor    r8d,r8d
   292b5:	xor    edx,edx
   292b7:	push   r12
   292b9:	push   r15
   292bb:	push   rbp
   292bc:	push   QWORD PTR [rsp+0xb8]
   292c3:	lea    rax,[rsp+0x338]
   292cb:	push   rax
   292cc:	lea    rax,[rsp+0x320]
   292d4:	push   rax
   292d5:	push   QWORD PTR [rbx]
   292d7:	mov    rcx,QWORD PTR [rsp+0x128]
   292df:	movzx  r9d,BYTE PTR [rsp+0x120]
   292e8:	mov    esi,DWORD PTR [rsp+0x164]
   292ef:	mov    rdi,QWORD PTR [rsp+0x70]
   292f4:	call   22fe0 <read_response_body>
   292f9:	add    rsp,0x40
   292fd:	mov    r13d,eax
   29300:	cmp    eax,0x23
   29303:	jne    29617 <http_loop+0x31d7>
   29309:	cmp    DWORD PTR [rsp+0x1b8],0x0
   29311:	js     29617 <http_loop+0x31d7>
   29317:	cmp    BYTE PTR [rsp+0xc0],0x0
   2931f:	jne    2934d <http_loop+0x2f0d>
   29321:	cmp    BYTE PTR [rip+0x5c380],0x0        # 856a8 <pconn_active>
   29328:	mov    edi,DWORD PTR [rsp+0x124]
   2932f:	je     2933d <http_loop+0x2efd>
   29331:	cmp    DWORD PTR [rip+0x5c349],edi        # 85680 <pconn>
   29337:	je     2a06e <http_loop+0x3c2e>
   2933d:	call   f400 <fd_close>
   29342:	mov    DWORD PTR [rsp+0x124],0xffffffff
   2934d:	cmp    r15d,0x12e
   29354:	je     29369 <http_loop+0x2f29>
   29356:	jg     293df <http_loop+0x2f9f>
   2935c:	cmp    r15d,0x12d
   29363:	jne    29c10 <http_loop+0x37d0>
   29369:	mov    rdi,QWORD PTR [rip+0x61028]        # 8a398 <opt+0x318>
   29370:	test   rdi,rdi
   29373:	je     29c10 <http_loop+0x37d0>
   29379:	lea    rsi,[rip+0x3e18d]        # 6750d <primes.6089+0x142d>
   29380:	call   43340 <c_strcasecmp>
   29385:	cmp    eax,0x1
   29388:	sbb    r13d,r13d
   2938b:	and    r13d,0xffffffd6
   2938f:	add    r13d,0x30
   29393:	jmp    26f67 <http_loop+0xb27>
   29398:	call   4ba50 <xstrdup>
   2939d:	mov    QWORD PTR [rsp+0x1d8],rax
   293a5:	jmp    28750 <http_loop+0x2310>
   293aa:	call   23310 <invalidate_persistent>
   293af:	jmp    28648 <http_loop+0x2208>
   293b4:	lea    r13,[rip+0x4505c]        # 6e417 <urlchr_table+0x877>
   293bb:	test   rdx,rdx
   293be:	jne    2922e <http_loop+0x2dee>
   293c4:	mov    edx,0x5
   293c9:	lea    rsi,[rip+0x3e3e7]        # 677b7 <primes.6089+0x16d7>
   293d0:	xor    edi,edi
   293d2:	call   c780 <dcgettext@plt>
   293d7:	mov    r14,rax
   293da:	jmp    2925d <http_loop+0x2e1d>
   293df:	sub    r15d,0x133
   293e6:	cmp    r15d,0x2
   293ea:	sbb    r13d,r13d
   293ed:	and    r13d,0x2a
   293f1:	add    r13d,0x6
   293f5:	jmp    26f67 <http_loop+0xb27>
   293fa:	mov    edx,0x5
   293ff:	lea    rsi,[rip+0x3ea50]        # 67e56 <primes.6089+0x1d76>
   29406:	mov    rdi,r14
   29409:	call   c7a0 <strncasecmp@plt>
   2940e:	test   eax,eax
   29410:	jne    2985c <http_loop+0x341c>
   29416:	cmp    BYTE PTR [rsp+0x345],0x3a
   2941e:	lea    rdx,[rsp+0x345]
   29426:	jne    29430 <http_loop+0x2ff0>
   29428:	lea    rdx,[rsp+0x346]
   29430:	movzx  eax,BYTE PTR [rdx]
   29433:	cmp    al,0xd
   29435:	jg     2951a <http_loop+0x30da>
   2943b:	cmp    al,0x8
   2943d:	jg     29522 <http_loop+0x30e2>
   29443:	mov    QWORD PTR [rsp+0x18],0x0
   2944c:	test   al,al
   2944e:	je     28c62 <http_loop+0x2822>
   29454:	mov    QWORD PTR [rsp+0x18],0x0
   2945d:	movsx  eax,BYTE PTR [rdx]
   29460:	sub    eax,0x30
   29463:	cmp    eax,0x9
   29466:	ja     28c62 <http_loop+0x2822>
   2946c:	imul   rcx,QWORD PTR [rsp+0x18],0xa
   29472:	cdqe   
   29474:	mov    rsi,rdx
   29477:	add    rdx,0x1
   2947b:	add    rax,rcx
   2947e:	mov    QWORD PTR [rsp+0x18],rax
   29483:	movsx  eax,BYTE PTR [rdx]
   29486:	mov    ecx,eax
   29488:	sub    eax,0x30
   2948b:	cmp    eax,0x9
   2948e:	jbe    2946c <http_loop+0x302c>
   29490:	cmp    cl,0x2d
   29493:	jne    29c02 <http_loop+0x37c2>
   29499:	movsx  edx,BYTE PTR [rdx+0x1]
   2949d:	sub    edx,0x30
   294a0:	cmp    edx,0x9
   294a3:	ja     29c02 <http_loop+0x37c2>
   294a9:	lea    rax,[rsi+0x2]
   294ad:	xor    edx,edx
   294af:	movsx  ecx,BYTE PTR [rax]
   294b2:	mov    esi,ecx
   294b4:	sub    ecx,0x30
   294b7:	cmp    ecx,0x9
   294ba:	jbe    2a280 <http_loop+0x3e40>
   294c0:	cmp    sil,0x2f
   294c4:	jne    29c02 <http_loop+0x37c2>
   294ca:	movsx  esi,BYTE PTR [rax+0x1]
   294ce:	mov    ecx,esi
   294d0:	sub    esi,0x30
   294d3:	cmp    esi,0x9
   294d6:	jbe    294e1 <http_loop+0x30a1>
   294d8:	cmp    cl,0x2a
   294db:	jne    29c02 <http_loop+0x37c2>
   294e1:	cmp    QWORD PTR [rsp+0x18],rdx
   294e6:	jg     29c02 <http_loop+0x37c2>
   294ec:	cmp    cl,0x2a
   294ef:	je     29888 <http_loop+0x3448>
   294f5:	add    rax,0x1
   294f9:	xor    ecx,ecx
   294fb:	movsx  esi,BYTE PTR [rax]
   294fe:	sub    esi,0x30
   29501:	cmp    esi,0x9
   29504:	ja     29879 <http_loop+0x3439>
   2950a:	imul   rcx,rcx,0xa
   2950e:	movsxd rsi,esi
   29511:	add    rax,0x1
   29515:	add    rcx,rsi
   29518:	jmp    294fb <http_loop+0x30bb>
   2951a:	cmp    al,0x20
   2951c:	jne    29454 <http_loop+0x3014>
   29522:	add    rdx,0x1
   29526:	jmp    29430 <http_loop+0x2ff0>
   2952b:	cmp    DWORD PTR [rsp+0xd8],0x0
   29533:	jne    29321 <http_loop+0x2ee1>
   29539:	cmp    BYTE PTR [rsp+0xc0],0x0
   29541:	je     29321 <http_loop+0x2ee1>
   29547:	movzx  edx,BYTE PTR [rsp+0xe0]
   2954f:	mov    rsi,QWORD PTR [rsp+0xe8]
   29557:	mov    edi,DWORD PTR [rsp+0x124]
   2955e:	call   22da0 <skip_short_body>
   29563:	test   al,al
   29565:	jne    2934d <http_loop+0x2f0d>
   2956b:	jmp    29321 <http_loop+0x2ee1>
   29570:	mov    rdi,QWORD PTR [rsp+0x208]
   29578:	call   374f0 <mkalldirs>
   2957d:	cmp    DWORD PTR [rip+0x60d3c],0x0        # 8a2c0 <opt+0x240>
   29584:	jne    2a73d <http_loop+0x42fd>
   2958a:	cmp    QWORD PTR [rsp+0x1b0],0x0
   29593:	mov    rdi,QWORD PTR [rsp+0x208]
   2959b:	jne    2a729 <http_loop+0x42e9>
   295a1:	cmp    BYTE PTR [rip+0x60b0b],0x0        # 8a0b3 <opt+0x33>
   295a8:	jne    2a6fc <http_loop+0x42bc>
   295ae:	cmp    BYTE PTR [rsp+0x238],0x0
   295b6:	je     2a6e8 <http_loop+0x42a8>
   295bc:	mov    edx,0x180
   295c1:	mov    esi,0x241
   295c6:	xor    eax,eax
   295c8:	call   cb50 <open@plt>
   295cd:	lea    rsi,[rip+0x31cd5]        # 5b2a9 <_IO_stdin_used+0x2a9>
   295d4:	mov    edi,eax
   295d6:	call   c440 <fdopen@plt>
   295db:	mov    r13,rax
   295de:	test   r13,r13
   295e1:	jne    2a11e <http_loop+0x3cde>
   295e7:	call   c740 <__errno_location@plt>
   295ec:	mov    r13d,0x13
   295f2:	mov    edi,DWORD PTR [rax]
   295f4:	call   c540 <strerror@plt>
   295f9:	mov    rdx,QWORD PTR [rsp+0x208]
   29601:	mov    edi,0x1
   29606:	lea    rsi,[rip+0x3f238]        # 68845 <primes.6089+0x2765>
   2960d:	mov    rcx,rax
   29610:	xor    eax,eax
   29612:	call   2e0a0 <logprintf>
   29617:	cmp    BYTE PTR [rip+0x5c08a],0x0        # 856a8 <pconn_active>
   2961e:	mov    edi,DWORD PTR [rsp+0x124]
   29625:	je     29633 <http_loop+0x31f3>
   29627:	cmp    DWORD PTR [rip+0x5c053],edi        # 85680 <pconn>
   2962d:	je     2a242 <http_loop+0x3e02>
   29633:	call   f400 <fd_close>
   29638:	mov    DWORD PTR [rsp+0x124],0xffffffff
   29643:	jmp    26f67 <http_loop+0xb27>
   29648:	mov    edx,0x5
   2964d:	lea    rsi,[rip+0x3daf4]        # 67148 <primes.6089+0x1068>
   29654:	xor    edi,edi
   29656:	call   c780 <dcgettext@plt>
   2965b:	xor    edi,edi
   2965d:	mov    rsi,rax
   29660:	call   2de60 <logputs>
   29665:	mov    BYTE PTR [rsp+0xdd],bpl
   2966d:	jmp    291af <http_loop+0x2d6f>
   29672:	cmp    BYTE PTR [rip+0x60b67],0x0        # 8a1e0 <opt+0x160>
   29679:	jne    286c8 <http_loop+0x2288>
   2967f:	cmp    BYTE PTR [rip+0x60c36],0x0        # 8a2bc <opt+0x23c>
   29686:	jne    286c8 <http_loop+0x2288>
   2968c:	cmp    BYTE PTR [rip+0x60a15],0x0        # 8a0a8 <opt+0x28>
   29693:	jne    286c8 <http_loop+0x2288>
   29699:	cmp    QWORD PTR [rip+0x60adf],0x0        # 8a180 <opt+0x100>
   296a1:	jne    286c8 <http_loop+0x2288>
   296a7:	cmp    DWORD PTR [rip+0x60c12],0x0        # 8a2c0 <opt+0x240>
   296ae:	jg     286c8 <http_loop+0x2288>
   296b4:	mov    rdi,QWORD PTR [rsp+0x208]
   296bc:	call   3e5c0 <unique_name_passthrough>
   296c1:	mov    rdi,QWORD PTR [rsp+0x208]
   296c9:	mov    rbp,rax
   296cc:	cmp    rax,rdi
   296cf:	je     296d6 <http_loop+0x3296>
   296d1:	call   4bdc0 <rpl_free>
   296d6:	mov    QWORD PTR [rsp+0x208],rbp
   296de:	jmp    286c8 <http_loop+0x2288>
   296e3:	mov    rdi,r13
   296e6:	mov    rbx,QWORD PTR [rsp+0xc0]
   296ee:	call   c8b0 <fclose@plt>
   296f3:	call   c740 <__errno_location@plt>
   296f8:	or     r13d,0xffffffff
   296fc:	mov    DWORD PTR [rax],0x16
   29702:	jmp    27998 <http_loop+0x1558>
   29707:	mov    BYTE PTR [rsp+0x238],0x0
   2970f:	jmp    286ba <http_loop+0x227a>
   29714:	mov    rax,QWORD PTR [rsp+0x8]
   29719:	mov    r14,rbx
   2971c:	test   BYTE PTR [rax],0x2
   2971f:	jne    2972e <http_loop+0x32ee>
   29721:	cmp    BYTE PTR [rip+0x60b92],0x0        # 8a2ba <opt+0x23a>
   29728:	je     297e7 <http_loop+0x33a7>
   2972e:	mov    rax,QWORD PTR [rip+0x60a4b]        # 8a180 <opt+0x100>
   29735:	test   rax,rax
   29738:	je     29743 <http_loop+0x3303>
   2973a:	cmp    BYTE PTR [rax],0x2d
   2973d:	je     2a2a8 <http_loop+0x3e68>
   29743:	call   3e8e0 <number_to_static_string>
   29748:	mov    rdi,QWORD PTR [rsp+0x1a0]
   29750:	mov    rbx,rax
   29753:	call   3e8e0 <number_to_static_string>
   29758:	mov    rdi,QWORD PTR [rsp+0x208]
   29760:	mov    rbp,rax
   29763:	call   4b5b0 <quote>
   29768:	lea    rsi,[rip+0x3e148]        # 678b7 <primes.6089+0x17d7>
   2976f:	mov    edx,0x5
   29774:	xor    edi,edi
   29776:	mov    r15,rax
   29779:	call   c780 <dcgettext@plt>
   2977e:	mov    rsi,rax
   29781:	push   r10
   29783:	mov    r9,rbp
   29786:	mov    r8,r15
   29789:	mov    rcx,r13
   2978c:	push   rbx
   2978d:	mov    rdx,r12
   29790:	xor    edi,edi
   29792:	xor    eax,eax
   29794:	call   2e0a0 <logprintf>
   29799:	mov    rdi,QWORD PTR [rsp+0x1b8]
   297a1:	mov    rbp,QWORD PTR [rsp+0x218]
   297a9:	call   3e8e0 <number_to_static_string>
   297ae:	mov    rdi,QWORD PTR [rsp+0x1b0]
   297b6:	mov    rbx,rax
   297b9:	call   3e8e0 <number_to_static_string>
   297be:	mov    r9,rbx
   297c1:	mov    rdx,r12
   297c4:	mov    edi,0x2
   297c9:	mov    r8,rax
   297cc:	mov    eax,DWORD PTR [rsp+0x50]
   297d0:	lea    rsi,[rip+0x3da99]        # 67270 <primes.6089+0x1190>
   297d7:	push   rax
   297d8:	xor    eax,eax
   297da:	push   rbp
   297db:	mov    rcx,QWORD PTR [r14]
   297de:	call   2e0a0 <logprintf>
   297e3:	add    rsp,0x20
   297e7:	mov    rax,QWORD PTR [rsp+0x1f0]
   297ef:	add    QWORD PTR [rip+0x60c3a],rax        # 8a430 <total_downloaded_bytes>
   297f6:	mov    rax,QWORD PTR [rsp+0x8]
   297fb:	add    DWORD PTR [rip+0x5cdbe],0x1        # 865c0 <numurls>
   29802:	mov    rsi,QWORD PTR [rsp+0x208]
   2980a:	test   BYTE PTR [rax],0x20
   2980d:	je     29864 <http_loop+0x3424>
   2980f:	mov    edi,0x2
   29814:	call   10550 <downloaded_file>
   29819:	mov    r8d,0x19
   2981f:	jmp    270de <http_loop+0xc9e>
   29824:	test   rbp,rbp
   29827:	je     2a22d <http_loop+0x3ded>
   2982d:	mov    rdi,rbp
   29830:	call   364f0 <nonexisting_url>
   29835:	xor    edi,edi
   29837:	mov    edx,0x5
   2983c:	lea    rsi,[rip+0x3d7e5]        # 67028 <primes.6089+0xf48>
   29843:	call   c780 <dcgettext@plt>
   29848:	mov    edi,0x1
   2984d:	mov    rsi,rax
   29850:	xor    eax,eax
   29852:	call   2e0a0 <logprintf>
   29857:	jmp    28298 <http_loop+0x1e58>
   2985c:	mov    rdx,r14
   2985f:	jmp    29454 <http_loop+0x3014>
   29864:	mov    edi,0x1
   29869:	call   10550 <downloaded_file>
   2986e:	mov    r8d,0x19
   29874:	jmp    270de <http_loop+0xc9e>
   29879:	cmp    rcx,0xffffffffffffffff
   2987d:	je     29888 <http_loop+0x3448>
   2987f:	cmp    rdx,rcx
   29882:	jge    29c02 <http_loop+0x37c2>
   29888:	sub    rdx,QWORD PTR [rsp+0x18]
   2988d:	lea    rax,[rdx+0x1]
   29891:	mov    QWORD PTR [rsp+0xe8],rax
   29899:	jmp    28c62 <http_loop+0x2822>
   2989e:	mov    rax,QWORD PTR [rsp+0x8]
   298a3:	or     r13d,0x1
   298a7:	mov    DWORD PTR [rax],r13d
   298aa:	mov    rax,QWORD PTR [rsp+0x8]
   298af:	mov    eax,DWORD PTR [rax]
   298b1:	mov    DWORD PTR [rsp+0x50],eax
   298b5:	and    eax,0xffffffbf
   298b8:	jmp    28d9b <http_loop+0x295b>
   298bd:	call   c7b0 <__stack_chk_fail@plt>
   298c2:	mov    rdi,QWORD PTR [rsp+0x150]
   298ca:	lea    rsi,[rip+0x3de83]        # 67754 <primes.6089+0x1674>
   298d1:	call   23950 <resp_header_strdup>
   298d6:	mov    QWORD PTR [rsp+0x1d0],rax
   298de:	jmp    28c35 <http_loop+0x27f5>
   298e3:	cmp    QWORD PTR [rsp+0x18],0x0
   298e9:	je     29f28 <http_loop+0x3ae8>
   298ef:	mov    rax,QWORD PTR [rsp+0x18]
   298f4:	cmp    rax,QWORD PTR [rsp+0x1b0]
   298fc:	je     28f42 <http_loop+0x2b02>
   29902:	cmp    BYTE PTR [rip+0x5bd9f],0x0        # 856a8 <pconn_active>
   29909:	mov    edi,DWORD PTR [rsp+0x124]
   29910:	je     2991e <http_loop+0x34de>
   29912:	cmp    DWORD PTR [rip+0x5bd68],edi        # 85680 <pconn>
   29918:	je     2a6de <http_loop+0x429e>
   2991e:	call   f400 <fd_close>
   29923:	mov    DWORD PTR [rsp+0x124],0xffffffff
   2992e:	mov    r13d,0x27
   29934:	jmp    26f67 <http_loop+0xb27>
   29939:	lea    rsi,[rsp+0x178]
   29941:	lea    rax,[rsp+0x180]
   29949:	mov    QWORD PTR [rsp+0x80],r12
   29951:	mov    rbp,QWORD PTR [rsp+0x58]
   29956:	mov    QWORD PTR [rsp+0x18],rsi
   2995b:	lea    rdx,[rsp+0x123]
   29963:	lea    rcx,[rsp+0x168]
   2996b:	lea    rsi,[rsp+0x170]
   29973:	mov    QWORD PTR [rsp+0x90],r13
   2997b:	mov    r12,rcx
   2997e:	mov    r13,rax
   29981:	mov    QWORD PTR [rsp+0xa0],rbx
   29989:	mov    rbx,rdx
   2998c:	mov    QWORD PTR [rsp+0x168],r14
   29994:	mov    BYTE PTR [rsp+0x123],0x0
   2999c:	mov    QWORD PTR [rsp+0x170],0x0
   299a8:	mov    QWORD PTR [rsp+0x178],0x0
   299b4:	mov    QWORD PTR [rsp+0x78],rsi
   299b9:	mov    DWORD PTR [rsp+0x88],r15d
   299c1:	mov    QWORD PTR [rsp+0xa8],r14
   299c9:	jmp    299d3 <http_loop+0x3593>
   299cb:	mov    BYTE PTR [rsp+0x123],0x0
   299d3:	mov    r8,rbx
   299d6:	mov    ecx,0x3b
   299db:	mov    rdx,rbp
   299de:	mov    rsi,r13
   299e1:	mov    rdi,r12
   299e4:	call   24bd0 <extract_param>
   299e9:	test   al,al
   299eb:	je     29b84 <http_loop+0x3744>
   299f1:	mov    r14,QWORD PTR [rsp+0x188]
   299f9:	mov    rdi,QWORD PTR [rsp+0x180]
   29a01:	mov    rax,r14
   29a04:	sub    rax,rdi
   29a07:	cmp    rax,0x8
   29a0b:	jne    299cb <http_loop+0x358b>
   29a0d:	mov    edx,0x8
   29a12:	lea    rsi,[rip+0x3dcde]        # 676f7 <primes.6089+0x1617>
   29a19:	call   433b0 <c_strncasecmp>
   29a1e:	test   eax,eax
   29a20:	jne    299cb <http_loop+0x358b>
   29a22:	mov    r15,QWORD PTR [rsp+0x190]
   29a2a:	test   r15,r15
   29a2d:	je     299cb <http_loop+0x358b>
   29a2f:	mov    r9,QWORD PTR [rsp+0x198]
   29a37:	mov    esi,0x2f
   29a3c:	mov    rdi,r15
   29a3f:	mov    rdx,r9
   29a42:	mov    QWORD PTR [rsp+0xf8],r9
   29a4a:	sub    rdx,r15
   29a4d:	mov    QWORD PTR [rsp+0xf0],rdx
   29a55:	call   c570 <memrchr@plt>
   29a5a:	mov    rdx,QWORD PTR [rsp+0xf0]
   29a62:	mov    esi,0x5c
   29a67:	mov    rdi,r15
   29a6a:	mov    QWORD PTR [rsp+0xb0],rax
   29a72:	call   c570 <memrchr@plt>
   29a77:	mov    r10,QWORD PTR [rsp+0xb0]
   29a7f:	mov    r9,QWORD PTR [rsp+0xf8]
   29a87:	test   r10,r10
   29a8a:	je     29eee <http_loop+0x3aae>
   29a90:	test   rax,rax
   29a93:	je     29eee <http_loop+0x3aae>
   29a99:	lea    r8,[rax+0x1]
   29a9d:	cmp    r10,rax
   29aa0:	jb     29aa6 <http_loop+0x3666>
   29aa2:	lea    r8,[r10+0x1]
   29aa6:	mov    QWORD PTR [rsp+0x190],r8
   29aae:	mov    r15,r8
   29ab1:	cmp    r9,r15
   29ab4:	je     299cb <http_loop+0x358b>
   29aba:	cmp    BYTE PTR [r14],0x2a
   29abe:	je     2a0eb <http_loop+0x3cab>
   29ac4:	mov    rax,QWORD PTR [rsp+0x178]
   29acc:	mov    r14,QWORD PTR [rsp+0x18]
   29ad1:	test   rax,rax
   29ad4:	je     2a0c7 <http_loop+0x3c87>
   29ada:	mov    r11,QWORD PTR [r14]
   29add:	xor    eax,eax
   29adf:	or     rcx,0xffffffffffffffff
   29ae3:	sub    r9,r15
   29ae6:	movzx  r10d,BYTE PTR [rsp+0x123]
   29aef:	mov    r8,r9
   29af2:	mov    rdi,r11
   29af5:	mov    BYTE PTR [rsp+0xf8],r10b
   29afd:	repnz scas al,BYTE PTR es:[rdi]
   29aff:	mov    rdi,r11
   29b02:	mov    rax,rcx
   29b05:	not    rax
   29b08:	lea    rcx,[rax-0x1]
   29b0c:	add    r8d,ecx
   29b0f:	mov    QWORD PTR [rsp+0xf0],rcx
   29b17:	lea    esi,[r8+0x1]
   29b1b:	mov    DWORD PTR [rsp+0xb0],r8d
   29b23:	movsxd rsi,esi
   29b26:	call   4b870 <xrealloc>
   29b2b:	mov    rcx,QWORD PTR [rsp+0xf0]
   29b33:	mov    rsi,QWORD PTR [rsp+0x190]
   29b3b:	mov    rdx,QWORD PTR [rsp+0x198]
   29b43:	mov    QWORD PTR [r14],rax
   29b46:	mov    r15,rax
   29b49:	movsxd rcx,ecx
   29b4c:	lea    rdi,[rax+rcx*1]
   29b50:	sub    rdx,rsi
   29b53:	call   cb30 <memcpy@plt>
   29b58:	movsxd r8,DWORD PTR [rsp+0xb0]
   29b60:	movzx  r10d,BYTE PTR [rsp+0xf8]
   29b69:	mov    rdi,rax
   29b6c:	mov    BYTE PTR [r15+r8*1],0x0
   29b71:	test   r10b,r10b
   29b74:	je     299cb <http_loop+0x358b>
   29b7a:	call   370f0 <url_unescape>
   29b7f:	jmp    299cb <http_loop+0x358b>
   29b84:	mov    rax,QWORD PTR [rsp+0x170]
   29b8c:	mov    r12,QWORD PTR [rsp+0x80]
   29b94:	mov    r15d,DWORD PTR [rsp+0x88]
   29b9c:	mov    r13,QWORD PTR [rsp+0x90]
   29ba4:	test   rax,rax
   29ba7:	mov    QWORD PTR [rsp+0x18],rax
   29bac:	mov    rbx,QWORD PTR [rsp+0xa0]
   29bb4:	mov    r14,QWORD PTR [rsp+0xa8]
   29bbc:	mov    rbp,QWORD PTR [rsp+0x178]
   29bc4:	je     2a293 <http_loop+0x3e53>
   29bca:	mov    rdi,rbp
   29bcd:	call   4bdc0 <rpl_free>
   29bd2:	mov    rax,QWORD PTR [rsp+0x18]
   29bd7:	mov    rbp,rax
   29bda:	cmp    BYTE PTR [rip+0x606da],0x0        # 8a2bb <opt+0x23b>
   29be1:	jne    2a4f4 <http_loop+0x40b4>
   29be7:	mov    rsi,rbp
   29bea:	mov    rdi,rbx
   29bed:	mov    r13,rbp
   29bf0:	call   37670 <url_file_name>
   29bf5:	mov    QWORD PTR [rsp+0x208],rax
   29bfd:	jmp    29132 <http_loop+0x2cf2>
   29c02:	mov    QWORD PTR [rsp+0x18],0x0
   29c0b:	jmp    28c62 <http_loop+0x2822>
   29c10:	mov    r13d,0x6
   29c16:	jmp    26f67 <http_loop+0xb27>
   29c1b:	mov    rax,QWORD PTR [rsp+0x8]
   29c20:	or     r13d,0x1
   29c24:	mov    DWORD PTR [rax],r13d
   29c27:	jmp    28d76 <http_loop+0x2936>
   29c2c:	mov    edx,0x5
   29c31:	lea    rsi,[rip+0x3dbbf]        # 677f7 <primes.6089+0x1717>
   29c38:	xor    edi,edi
   29c3a:	call   c780 <dcgettext@plt>
   29c3f:	xor    edi,edi
   29c41:	mov    rsi,rax
   29c44:	call   2de60 <logputs>
   29c49:	mov    rax,QWORD PTR [rsp+0xe8]
   29c51:	cmp    rax,0xffffffffffffffff
   29c55:	je     2a464 <http_loop+0x4024>
   29c5b:	add    rax,QWORD PTR [rsp+0x18]
   29c60:	mov    rdi,rax
   29c63:	mov    r13,rax
   29c66:	call   3e8e0 <number_to_static_string>
   29c6b:	xor    edi,edi
   29c6d:	mov    rsi,rax
   29c70:	call   2de60 <logputs>
   29c75:	cmp    r13,0x3ff
   29c7c:	jg     2a4ca <http_loop+0x408a>
   29c82:	cmp    QWORD PTR [rsp+0x18],0x0
   29c88:	je     29ce4 <http_loop+0x38a4>
   29c8a:	mov    r13,QWORD PTR [rsp+0xe8]
   29c92:	cmp    r13,0x3ff
   29c99:	jle    2a493 <http_loop+0x4053>
   29c9f:	mov    edx,0x1
   29ca4:	mov    esi,0xa
   29ca9:	mov    rdi,r13
   29cac:	call   3cf90 <human_readable>
   29cb1:	mov    rdi,r13
   29cb4:	mov    r14,rax
   29cb7:	call   3e8e0 <number_to_static_string>
   29cbc:	mov    edx,0x5
   29cc1:	lea    rsi,[rip+0x31b2b]        # 5b7f3 <_IO_stdin_used+0x7f3>
   29cc8:	xor    edi,edi
   29cca:	mov    r13,rax
   29ccd:	call   c780 <dcgettext@plt>
   29cd2:	mov    rcx,r14
   29cd5:	mov    rdx,r13
   29cd8:	xor    edi,edi
   29cda:	mov    rsi,rax
   29cdd:	xor    eax,eax
   29cdf:	call   2e0a0 <logprintf>
   29ce4:	test   rbp,rbp
   29ce7:	je     2a342 <http_loop+0x3f02>
   29ced:	mov    rsi,rbp
   29cf0:	mov    edi,0x7
   29cf5:	call   4b2b0 <quotearg_style>
   29cfa:	lea    rsi,[rip+0x3d715]        # 67416 <primes.6089+0x1336>
   29d01:	xor    edi,edi
   29d03:	mov    rdx,rax
   29d06:	xor    eax,eax
   29d08:	call   2e0a0 <logprintf>
   29d0d:	mov    rax,QWORD PTR [rsp+0x8]
   29d12:	test   BYTE PTR [rax],0x2
   29d15:	je     28f92 <http_loop+0x2b52>
   29d1b:	cmp    DWORD PTR [rsp+0xd8],0x0
   29d23:	jne    2a24c <http_loop+0x3e0c>
   29d29:	cmp    BYTE PTR [rip+0x603b8],0x0        # 8a0e8 <opt+0x68>
   29d30:	je     2a10e <http_loop+0x3cce>
   29d36:	cmp    BYTE PTR [rip+0x6035d],0x0        # 8a09a <opt+0x1a>
   29d3d:	jne    2a10e <http_loop+0x3cce>
   29d43:	cmp    QWORD PTR [rsp+0x20],0x0
   29d49:	mov    QWORD PTR [rsp+0x1a0],0x0
   29d55:	mov    DWORD PTR [rsp+0x1b8],0x0
   29d60:	mov    QWORD PTR [rsp+0x1b0],0x0
   29d6c:	jne    28fce <http_loop+0x2b8e>
   29d72:	jmp    2903e <http_loop+0x2bfe>
   29d77:	or     r13d,0xffffffff
   29d7b:	jmp    27998 <http_loop+0x1558>
   29d80:	cmp    BYTE PTR [rsp+0xc0],0x0
   29d88:	mov    QWORD PTR [rsp+0x1a0],0x0
   29d94:	mov    r13d,0x23
   29d9a:	mov    DWORD PTR [rsp+0x1b8],0x0
   29da5:	mov    QWORD PTR [rsp+0x1b0],0x0
   29db1:	jne    26f67 <http_loop+0xb27>
   29db7:	cmp    BYTE PTR [rip+0x5b8ea],0x0        # 856a8 <pconn_active>
   29dbe:	mov    edi,DWORD PTR [rsp+0x124]
   29dc5:	je     29dd3 <http_loop+0x3993>
   29dc7:	cmp    DWORD PTR [rip+0x5b8b3],edi        # 85680 <pconn>
   29dcd:	je     2a512 <http_loop+0x40d2>
   29dd3:	call   f400 <fd_close>
   29dd8:	mov    DWORD PTR [rsp+0x124],0xffffffff
   29de3:	mov    r13d,0x23
   29de9:	jmp    26f67 <http_loop+0xb27>
   29dee:	mov    rax,QWORD PTR [rsp+0x8]
   29df3:	mov    r14,rbx
   29df6:	test   BYTE PTR [rax],0x2
   29df9:	jne    29e08 <http_loop+0x39c8>
   29dfb:	cmp    BYTE PTR [rip+0x604b8],0x0        # 8a2ba <opt+0x23a>
   29e02:	je     297e7 <http_loop+0x33a7>
   29e08:	mov    rax,QWORD PTR [rip+0x60371]        # 8a180 <opt+0x100>
   29e0f:	test   rax,rax
   29e12:	je     29e1d <http_loop+0x39dd>
   29e14:	cmp    BYTE PTR [rax],0x2d
   29e17:	je     2a6a7 <http_loop+0x4267>
   29e1d:	mov    rdi,r8
   29e20:	call   3e8e0 <number_to_static_string>
   29e25:	mov    rdi,QWORD PTR [rsp+0x208]
   29e2d:	mov    rbx,rax
   29e30:	call   4b5b0 <quote>
   29e35:	lea    rsi,[rip+0x31cf9]        # 5bb35 <_IO_stdin_used+0xb35>
   29e3c:	mov    edx,0x5
   29e41:	xor    edi,edi
   29e43:	mov    rbp,rax
   29e46:	call   c780 <dcgettext@plt>
   29e4b:	mov    rsi,rax
   29e4e:	mov    rcx,r13
   29e51:	mov    r9,rbx
   29e54:	mov    r8,rbp
   29e57:	mov    rdx,r12
   29e5a:	xor    edi,edi
   29e5c:	xor    eax,eax
   29e5e:	call   2e0a0 <logprintf>
   29e63:	mov    rdi,QWORD PTR [rsp+0x1a0]
   29e6b:	mov    rbx,QWORD PTR [rsp+0x208]
   29e73:	call   3e8e0 <number_to_static_string>
   29e78:	mov    edi,0x2
   29e7d:	mov    r9,rbx
   29e80:	mov    rdx,r12
   29e83:	push   rcx
   29e84:	mov    r8,rax
   29e87:	mov    eax,DWORD PTR [rsp+0x48]
   29e8b:	lea    rsi,[rip+0x3da08]        # 6789a <primes.6089+0x17ba>
   29e92:	mov    rcx,QWORD PTR [r14]
   29e95:	push   rax
   29e96:	xor    eax,eax
   29e98:	call   2e0a0 <logprintf>
   29e9d:	pop    rsi
   29e9e:	pop    rdi
   29e9f:	jmp    297e7 <http_loop+0x33a7>
   29ea4:	test   edx,edx
   29ea6:	mov    r14,rbx
   29ea9:	mov    edx,0x5
   29eae:	lea    rsi,[rip+0x3d353]        # 67208 <primes.6089+0x1128>
   29eb5:	jne    28967 <http_loop+0x2527>
   29ebb:	lea    rsi,[rip+0x3d9af]        # 67871 <primes.6089+0x1791>
   29ec2:	jmp    28967 <http_loop+0x2527>
   29ec7:	mov    rdi,r8
   29eca:	call   262a0 <http_atotm>
   29ecf:	mov    rdi,QWORD PTR [rsp+0x190]
   29ed7:	cmp    rax,0xffffffffffffffff
   29edb:	je     28a65 <http_loop+0x2625>
   29ee1:	mov    QWORD PTR [rsp+0xd0],rax
   29ee9:	jmp    28a65 <http_loop+0x2625>
   29eee:	mov    rdx,r10
   29ef1:	or     rdx,rax
   29ef4:	je     29ab1 <http_loop+0x3671>
   29efa:	test   r10,r10
   29efd:	je     2a67f <http_loop+0x423f>
   29f03:	lea    rax,[r10+0x1]
   29f07:	mov    QWORD PTR [rsp+0x190],rax
   29f0f:	mov    r15,rax
   29f12:	jmp    29ab1 <http_loop+0x3671>
   29f17:	mov    QWORD PTR [rsp+0x1a8],0xffffffffffffffff
   29f23:	jmp    28f74 <http_loop+0x2b34>
   29f28:	cmp    r15d,0xce
   29f2f:	jne    28f42 <http_loop+0x2b02>
   29f35:	cmp    QWORD PTR [rsp+0x1b0],0x0
   29f3e:	je     28f42 <http_loop+0x2b02>
   29f44:	jmp    29902 <http_loop+0x34c2>
   29f49:	mov    rdi,QWORD PTR [rsp+0x1d0]
   29f51:	test   rdi,rdi
   29f54:	je     28ef9 <http_loop+0x2ab9>
   29f5a:	call   262a0 <http_atotm>
   29f5f:	cmp    rax,0xffffffffffffffff
   29f63:	je     28ef9 <http_loop+0x2ab9>
   29f69:	cmp    rax,QWORD PTR [rsp+0x228]
   29f71:	jg     28ef9 <http_loop+0x2ab9>
   29f77:	mov    rax,QWORD PTR [rsp+0xe8]
   29f7f:	cmp    rax,0xffffffffffffffff
   29f83:	je     29f93 <http_loop+0x3b53>
   29f85:	cmp    rax,QWORD PTR [rsp+0x220]
   29f8d:	jne    28ef9 <http_loop+0x2ab9>
   29f93:	mov    rdi,QWORD PTR [rsp+0x208]
   29f9b:	call   4b5b0 <quote>
   29fa0:	xor    edi,edi
   29fa2:	mov    edx,0x5
   29fa7:	lea    rsi,[rip+0x3cee2]        # 66e90 <primes.6089+0xdb0>
   29fae:	mov    r13,rax
   29fb1:	call   c780 <dcgettext@plt>
   29fb6:	xor    edi,edi
   29fb8:	mov    rdx,r13
   29fbb:	mov    rsi,rax
   29fbe:	xor    eax,eax
   29fc0:	call   2e0a0 <logprintf>
   29fc5:	mov    rax,QWORD PTR [rsp+0x8]
   29fca:	or     DWORD PTR [rax],0x2
   29fcd:	cmp    BYTE PTR [rip+0x5b6d4],0x0        # 856a8 <pconn_active>
   29fd4:	je     29fe9 <http_loop+0x3ba9>
   29fd6:	mov    eax,DWORD PTR [rsp+0x124]
   29fdd:	cmp    DWORD PTR [rip+0x5b69d],eax        # 85680 <pconn>
   29fe3:	je     2a5de <http_loop+0x419e>
   29fe9:	mov    edi,DWORD PTR [rsp+0x124]
   29ff0:	call   f400 <fd_close>
   29ff5:	mov    DWORD PTR [rsp+0x124],0xffffffff
   2a000:	mov    r13d,0x22
   2a006:	jmp    26f67 <http_loop+0xb27>
   2a00b:	lea    rdi,[rax+0x1]
   2a00f:	call   3fc90 <parse_charset>
   2a014:	mov    r13,rax
   2a017:	test   rax,rax
   2a01a:	je     2a02c <http_loop+0x3bec>
   2a01c:	mov    rdi,QWORD PTR [rsp+0xc8]
   2a024:	mov    rsi,rax
   2a027:	call   401f0 <set_content_encoding>
   2a02c:	mov    rdi,r13
   2a02f:	call   4bdc0 <rpl_free>
   2a034:	jmp    28bc2 <http_loop+0x2782>
   2a039:	call   4b5b0 <quote>
   2a03e:	mov    edx,0x5
   2a043:	lea    rsi,[rip+0x3d086]        # 670d0 <primes.6089+0xff0>
   2a04a:	xor    edi,edi
   2a04c:	mov    r12,rax
   2a04f:	call   c780 <dcgettext@plt>
   2a054:	mov    rdx,r12
   2a057:	xor    edi,edi
   2a059:	mov    rsi,rax
   2a05c:	xor    eax,eax
   2a05e:	call   2e0a0 <logprintf>
   2a063:	mov    r8d,0x19
   2a069:	jmp    270de <http_loop+0xc9e>
   2a06e:	call   23310 <invalidate_persistent>
   2a073:	jmp    29342 <http_loop+0x2f02>
   2a078:	mov    rdx,QWORD PTR [rsp+0x8]
   2a07d:	lea    rdi,[rsp+0x208]
   2a085:	lea    rsi,[rip+0x3d766]        # 677f2 <primes.6089+0x1712>
   2a08c:	call   23470 <ensure_extension.isra.0>
   2a091:	jmp    28ebc <http_loop+0x2a7c>
   2a096:	mov    rdx,QWORD PTR [rsp+0x8]
   2a09b:	lea    rdi,[rsp+0x208]
   2a0a3:	lea    rsi,[rip+0x31197]        # 5b241 <_IO_stdin_used+0x241>
   2a0aa:	call   23470 <ensure_extension.isra.0>
   2a0af:	jmp    28ebc <http_loop+0x2a7c>
   2a0b4:	mov    rdx,QWORD PTR [rsp+0x8]
   2a0b9:	or     DWORD PTR [rdx],0x2
   2a0bc:	test   eax,eax
   2a0be:	setne  r14b
   2a0c2:	jmp    28d2b <http_loop+0x28eb>
   2a0c7:	mov    rdi,r15
   2a0ca:	mov    rsi,r9
   2a0cd:	call   3b8a0 <strdupdelim>
   2a0d2:	cmp    BYTE PTR [rsp+0x123],0x0
   2a0da:	mov    QWORD PTR [r14],rax
   2a0dd:	mov    rdi,rax
   2a0e0:	je     299cb <http_loop+0x358b>
   2a0e6:	jmp    29b7a <http_loop+0x373a>
   2a0eb:	movsx  eax,BYTE PTR [r14+0x1]
   2a0f0:	sub    eax,0x30
   2a0f3:	cmp    eax,0x9
   2a0f6:	jbe    29ac4 <http_loop+0x3684>
   2a0fc:	mov    rax,QWORD PTR [rsp+0x170]
   2a104:	mov    r14,QWORD PTR [rsp+0x78]
   2a109:	jmp    29ad1 <http_loop+0x3691>
   2a10e:	mov    r13,QWORD PTR [rip+0x6032b]        # 8a440 <output_stream>
   2a115:	test   r13,r13
   2a118:	je     29570 <http_loop+0x3130>
   2a11e:	mov    rdi,QWORD PTR [rsp+0x208]
   2a126:	cmp    BYTE PTR [rdi],0x2d
   2a129:	jne    2a135 <http_loop+0x3cf5>
   2a12b:	cmp    BYTE PTR [rdi+0x1],0x0
   2a12f:	je     2a382 <http_loop+0x3f42>
   2a135:	call   4b5b0 <quote>
   2a13a:	mov    r14,rax
   2a13d:	xor    edi,edi
   2a13f:	mov    edx,0x5
   2a144:	lea    rsi,[rip+0x3d6c4]        # 6780f <primes.6089+0x172f>
   2a14b:	call   c780 <dcgettext@plt>
   2a150:	xor    edi,edi
   2a152:	mov    rdx,r14
   2a155:	mov    rsi,rax
   2a158:	xor    eax,eax
   2a15a:	call   2e0a0 <logprintf>
   2a15f:	cmp    BYTE PTR [rip+0x60052],0x0        # 8a1b8 <opt+0x138>
   2a166:	je     2a184 <http_loop+0x3d44>
   2a168:	mov    rsi,QWORD PTR [rsp+0xb8]
   2a170:	mov    rdx,r13
   2a173:	cmp    rbx,rsi
   2a176:	je     2a53f <http_loop+0x40ff>
   2a17c:	mov    rdi,rbx
   2a17f:	call   3b220 <set_file_metadata>
   2a184:	push   r14
   2a186:	mov    rdx,r13
   2a189:	push   r12
   2a18b:	push   r15
   2a18d:	push   rbp
   2a18e:	push   QWORD PTR [rsp+0xb8]
   2a195:	lea    rax,[rsp+0x338]
   2a19d:	push   rax
   2a19e:	lea    rax,[rsp+0x320]
   2a1a6:	push   rax
   2a1a7:	push   QWORD PTR [rbx]
   2a1a9:	mov    r8,QWORD PTR [rsp+0x58]
   2a1ae:	movzx  r9d,BYTE PTR [rsp+0x120]
   2a1b7:	mov    rcx,QWORD PTR [rsp+0x128]
   2a1bf:	mov    esi,DWORD PTR [rsp+0x164]
   2a1c6:	mov    rdi,QWORD PTR [rsp+0x70]
   2a1cb:	call   22fe0 <read_response_body>
   2a1d0:	add    rsp,0x40
   2a1d4:	cmp    DWORD PTR [rsp+0x1b8],0x0
   2a1dc:	mov    r14d,eax
   2a1df:	js     2a1eb <http_loop+0x3dab>
   2a1e1:	cmp    BYTE PTR [rsp+0xc0],0x0
   2a1e9:	jne    2a217 <http_loop+0x3dd7>
   2a1eb:	cmp    BYTE PTR [rip+0x5b4b6],0x0        # 856a8 <pconn_active>
   2a1f2:	mov    edi,DWORD PTR [rsp+0x124]
   2a1f9:	je     2a207 <http_loop+0x3dc7>
   2a1fb:	cmp    DWORD PTR [rip+0x5b47f],edi        # 85680 <pconn>
   2a201:	je     2a5e8 <http_loop+0x41a8>
   2a207:	call   f400 <fd_close>
   2a20c:	mov    DWORD PTR [rsp+0x124],0xffffffff
   2a217:	cmp    QWORD PTR [rip+0x60221],0x0        # 8a440 <output_stream>
   2a21f:	je     2a51c <http_loop+0x40dc>
   2a225:	mov    r13d,r14d
   2a228:	jmp    26f67 <http_loop+0xb27>
   2a22d:	mov    esi,0x1
   2a232:	mov    rdi,rbx
   2a235:	call   38230 <url_string>
   2a23a:	mov    rbp,rax
   2a23d:	jmp    2982d <http_loop+0x33ed>
   2a242:	call   23310 <invalidate_persistent>
   2a247:	jmp    29638 <http_loop+0x31f8>
   2a24c:	cmp    QWORD PTR [rsp+0x20],0x0
   2a252:	mov    QWORD PTR [rsp+0x1a0],0x0
   2a25e:	mov    DWORD PTR [rsp+0x1b8],0x0
   2a269:	mov    QWORD PTR [rsp+0x1b0],0x0
   2a275:	jne    28fce <http_loop+0x2b8e>
   2a27b:	jmp    29034 <http_loop+0x2bf4>
   2a280:	imul   rdx,rdx,0xa
   2a284:	movsxd rcx,ecx
   2a287:	add    rax,0x1
   2a28b:	add    rdx,rcx
   2a28e:	jmp    294af <http_loop+0x306f>
   2a293:	xor    edi,edi
   2a295:	call   4bdc0 <rpl_free>
   2a29a:	test   rbp,rbp
   2a29d:	je     29120 <http_loop+0x2ce0>
   2a2a3:	jmp    29bda <http_loop+0x379a>
   2a2a8:	cmp    BYTE PTR [rax+0x1],0x0
   2a2ac:	jne    29743 <http_loop+0x3303>
   2a2b2:	call   3e8e0 <number_to_static_string>
   2a2b7:	mov    rdi,QWORD PTR [rsp+0x1a0]
   2a2bf:	lea    r15,[rip+0x44151]        # 6e417 <urlchr_table+0x877>
   2a2c6:	mov    rbx,rax
   2a2c9:	call   3e8e0 <number_to_static_string>
   2a2ce:	lea    rsi,[rip+0x3d043]        # 67318 <primes.6089+0x1238>
   2a2d5:	mov    edx,0x5
   2a2da:	xor    edi,edi
   2a2dc:	mov    rbp,rax
   2a2df:	call   c780 <dcgettext@plt>
   2a2e4:	mov    rsi,rax
   2a2e7:	jmp    29781 <http_loop+0x3341>
   2a2ec:	lea    rsi,[rip+0x3ca55]        # 66d48 <primes.6089+0xc68>
   2a2f3:	xor    edi,edi
   2a2f5:	xor    eax,eax
   2a2f7:	call   2e0a0 <logprintf>
   2a2fc:	jmp    28b52 <http_loop+0x2712>
   2a301:	cmp    BYTE PTR [rip+0x5ffb3],0x0        # 8a2bb <opt+0x23b>
   2a308:	je     28b52 <http_loop+0x2712>
   2a30e:	cmp    BYTE PTR [rsp+0x18],0x0
   2a313:	lea    rax,[rip+0x3d2f5]        # 6760f <primes.6089+0x152f>
   2a31a:	mov    edx,DWORD PTR [rbx+0x18]
   2a31d:	mov    rcx,r13
   2a320:	lea    r8,[rip+0x3d2e3]        # 6760a <primes.6089+0x152a>
   2a327:	mov    rsi,QWORD PTR [rbx+0x10]
   2a32b:	lea    rdi,[rip+0x3ca96]        # 66dc8 <primes.6089+0xce8>
   2a332:	cmove  r8,rax
   2a336:	xor    eax,eax
   2a338:	call   2e250 <debug_logprintf>
   2a33d:	jmp    28b52 <http_loop+0x2712>
   2a342:	lea    rsi,[rip+0x3b686]        # 659cf <yy_accept+0x90f>
   2a349:	xor    edi,edi
   2a34b:	call   2de60 <logputs>
   2a350:	jmp    29d0d <http_loop+0x38cd>
   2a355:	cmp    BYTE PTR [rsp+0x18],0x0
   2a35a:	lea    rax,[rip+0x3d2ae]        # 6760f <primes.6089+0x152f>
   2a361:	mov    rsi,rbp
   2a364:	lea    rdx,[rip+0x3d29f]        # 6760a <primes.6089+0x152a>
   2a36b:	lea    rdi,[rip+0x3c98e]        # 66d00 <primes.6089+0xc20>
   2a372:	cmove  rdx,rax
   2a376:	xor    eax,eax
   2a378:	call   2e250 <debug_logprintf>
   2a37d:	jmp    28aeb <http_loop+0x26ab>
   2a382:	lea    rdi,[rip+0x3d47f]        # 67808 <primes.6089+0x1728>
   2a389:	call   4b5b0 <quote>
   2a38e:	mov    r14,rax
   2a391:	jmp    2a13d <http_loop+0x3cfd>
   2a396:	cmp    DWORD PTR [rsp+0xd8],0x0
   2a39e:	jne    29034 <http_loop+0x2bf4>
   2a3a4:	cmp    BYTE PTR [rip+0x5fd3d],0x0        # 8a0e8 <opt+0x68>
   2a3ab:	jne    2a452 <http_loop+0x4012>
   2a3b1:	cmp    BYTE PTR [rsp+0xc0],0x0
   2a3b9:	je     2903e <http_loop+0x2bfe>
   2a3bf:	movzx  edx,BYTE PTR [rsp+0xe0]
   2a3c7:	mov    rsi,QWORD PTR [rsp+0xe8]
   2a3cf:	mov    edi,DWORD PTR [rsp+0x124]
   2a3d6:	call   22da0 <skip_short_body>
   2a3db:	test   al,al
   2a3dd:	jne    2906a <http_loop+0x2c2a>
   2a3e3:	jmp    2903e <http_loop+0x2bfe>
   2a3e8:	lea    r13,[rip+0x3d22a]        # 67619 <primes.6089+0x1539>
   2a3ef:	mov    rdi,QWORD PTR [rsp+0x208]
   2a3f7:	mov    esi,0x2e
   2a3fc:	call   c460 <strrchr@plt>
   2a401:	test   rax,rax
   2a404:	je     28ea5 <http_loop+0x2a65>
   2a40a:	mov    rsi,r13
   2a40d:	mov    rdi,rax
   2a410:	mov    QWORD PTR [rsp+0x50],rax
   2a415:	call   be10 <strcasecmp@plt>
   2a41a:	test   eax,eax
   2a41c:	jne    28ea5 <http_loop+0x2a65>
   2a422:	mov    rdx,QWORD PTR [rsp+0x50]
   2a427:	mov    BYTE PTR [rdx],0x0
   2a42a:	jmp    28ea5 <http_loop+0x2a65>
   2a42f:	xor    r13d,r13d
   2a432:	cmp    BYTE PTR [rip+0x5fe82],0x0        # 8a2bb <opt+0x23b>
   2a439:	je     28ea5 <http_loop+0x2a65>
   2a43f:	lea    rdi,[rip+0x3ca22]        # 66e68 <primes.6089+0xd88>
   2a446:	xor    eax,eax
   2a448:	call   2e250 <debug_logprintf>
   2a44d:	jmp    28ea5 <http_loop+0x2a65>
   2a452:	cmp    BYTE PTR [rip+0x5fc41],0x0        # 8a09a <opt+0x1a>
   2a459:	jne    2a3b1 <http_loop+0x3f71>
   2a45f:	jmp    2903e <http_loop+0x2bfe>
   2a464:	cmp    BYTE PTR [rip+0x5fc2e],0x0        # 8a099 <opt+0x19>
   2a46b:	mov    edx,0x5
   2a470:	je     2a529 <http_loop+0x40e9>
   2a476:	lea    rsi,[rip+0x3d383]        # 67800 <primes.6089+0x1720>
   2a47d:	xor    edi,edi
   2a47f:	call   c780 <dcgettext@plt>
   2a484:	mov    rsi,rax
   2a487:	xor    edi,edi
   2a489:	call   2de60 <logputs>
   2a48e:	jmp    29ce4 <http_loop+0x38a4>
   2a493:	mov    rdi,QWORD PTR [rsp+0xe8]
   2a49b:	call   3e8e0 <number_to_static_string>
   2a4a0:	xor    edi,edi
   2a4a2:	mov    edx,0x5
   2a4a7:	lea    rsi,[rip+0x31359]        # 5b807 <_IO_stdin_used+0x807>
   2a4ae:	mov    r13,rax
   2a4b1:	call   c780 <dcgettext@plt>
   2a4b6:	mov    rdx,r13
   2a4b9:	xor    edi,edi
   2a4bb:	mov    rsi,rax
   2a4be:	xor    eax,eax
   2a4c0:	call   2e0a0 <logprintf>
   2a4c5:	jmp    29ce4 <http_loop+0x38a4>
   2a4ca:	mov    rdi,r13
   2a4cd:	mov    edx,0x1
   2a4d2:	mov    esi,0xa
   2a4d7:	call   3cf90 <human_readable>
   2a4dc:	lea    rsi,[rip+0x30c93]        # 5b176 <_IO_stdin_used+0x176>
   2a4e3:	xor    edi,edi
   2a4e5:	mov    rdx,rax
   2a4e8:	xor    eax,eax
   2a4ea:	call   2e0a0 <logprintf>
   2a4ef:	jmp    29c82 <http_loop+0x3842>
   2a4f4:	mov    rsi,rbp
   2a4f7:	lea    rdi,[rip+0x3c7d2]        # 66cd0 <primes.6089+0xbf0>
   2a4fe:	xor    eax,eax
   2a500:	call   2e250 <debug_logprintf>
   2a505:	jmp    29be7 <http_loop+0x37a7>
   2a50a:	mov    rax,rcx
   2a50d:	jmp    27fe4 <http_loop+0x1ba4>
   2a512:	call   23310 <invalidate_persistent>
   2a517:	jmp    29dd8 <http_loop+0x3998>
   2a51c:	mov    rdi,r13
   2a51f:	call   c8b0 <fclose@plt>
   2a524:	jmp    2a225 <http_loop+0x3de5>
   2a529:	lea    rsi,[rip+0x3d287]        # 677b7 <primes.6089+0x16d7>
   2a530:	xor    edi,edi
   2a532:	call   c780 <dcgettext@plt>
   2a537:	mov    rsi,rax
   2a53a:	jmp    2a487 <http_loop+0x4047>
   2a53f:	xor    esi,esi
   2a541:	jmp    2a17c <http_loop+0x3d3c>
   2a546:	xor    edi,edi
   2a548:	mov    edx,0x5
   2a54d:	lea    rsi,[rip+0x3c9ac]        # 66f00 <primes.6089+0xe20>
   2a554:	call   c780 <dcgettext@plt>
   2a559:	xor    edi,edi
   2a55b:	mov    rsi,rax
   2a55e:	call   2de60 <logputs>
   2a563:	mov    rax,QWORD PTR [rsp+0xe8]
   2a56b:	mov    DWORD PTR [rsp+0x1b8],0x0
   2a576:	mov    QWORD PTR [rsp+0x1a0],rax
   2a57e:	mov    rax,QWORD PTR [rsp+0x8]
   2a583:	or     DWORD PTR [rax],0x2
   2a586:	cmp    BYTE PTR [rsp+0xc0],0x0
   2a58e:	jne    2a5b2 <http_loop+0x4172>
   2a590:	cmp    BYTE PTR [rip+0x5b111],0x0        # 856a8 <pconn_active>
   2a597:	mov    edi,DWORD PTR [rsp+0x124]
   2a59e:	je     2a5a8 <http_loop+0x4168>
   2a5a0:	cmp    DWORD PTR [rip+0x5b0da],edi        # 85680 <pconn>
   2a5a6:	je     2a5de <http_loop+0x419e>
   2a5a8:	call   f400 <fd_close>
   2a5ad:	jmp    29ff5 <http_loop+0x3bb5>
   2a5b2:	movzx  edx,BYTE PTR [rsp+0xe0]
   2a5ba:	mov    rsi,QWORD PTR [rsp+0xe8]
   2a5c2:	mov    r13d,0x22
   2a5c8:	mov    edi,DWORD PTR [rsp+0x124]
   2a5cf:	call   22da0 <skip_short_body>
   2a5d4:	test   al,al
   2a5d6:	jne    26f67 <http_loop+0xb27>
   2a5dc:	jmp    2a590 <http_loop+0x4150>
   2a5de:	call   23310 <invalidate_persistent>
   2a5e3:	jmp    29ff5 <http_loop+0x3bb5>
   2a5e8:	call   23310 <invalidate_persistent>
   2a5ed:	jmp    2a20c <http_loop+0x3dcc>
   2a5f2:	lea    r13,[rip+0x3d01c]        # 67615 <primes.6089+0x1535>
   2a5f9:	jmp    2a3ef <http_loop+0x3faf>
   2a5fe:	lea    r13,[rip+0x3d01e]        # 67623 <primes.6089+0x1543>
   2a605:	jmp    2a3ef <http_loop+0x3faf>
   2a60a:	lea    r13,[rip+0x3d00c]        # 6761d <primes.6089+0x153d>
   2a611:	jmp    2a3ef <http_loop+0x3faf>
   2a616:	mov    rsi,r14
   2a619:	lea    rdi,[rip+0x3c7e8]        # 66e08 <primes.6089+0xd28>
   2a620:	xor    eax,eax
   2a622:	call   2e250 <debug_logprintf>
   2a627:	jmp    28cd9 <http_loop+0x2899>
   2a62c:	mov    rdi,QWORD PTR [rsp+0x208]
   2a634:	call   4b5b0 <quote>
   2a639:	xor    edi,edi
   2a63b:	mov    edx,0x5
   2a640:	lea    rsi,[rip+0x3c7e9]        # 66e30 <primes.6089+0xd50>
   2a647:	mov    r13,rax
   2a64a:	call   c780 <dcgettext@plt>
   2a64f:	mov    rdx,r13
   2a652:	xor    edi,edi
   2a654:	mov    r13d,0x22
   2a65a:	mov    rsi,rax
   2a65d:	xor    eax,eax
   2a65f:	call   2e0a0 <logprintf>
   2a664:	mov    rax,QWORD PTR [rsp+0x8]
   2a669:	or     DWORD PTR [rax],0x2
   2a66c:	cmp    BYTE PTR [rsp+0xc0],0x0
   2a674:	jne    26f67 <http_loop+0xb27>
   2a67a:	jmp    2a590 <http_loop+0x4150>
   2a67f:	add    rax,0x1
   2a683:	jmp    29f07 <http_loop+0x3ac7>
   2a688:	lea    edx,[r15-0x12c]
   2a68f:	and    edx,0xfffffff7
   2a692:	je     29210 <http_loop+0x2dd0>
   2a698:	jmp    28d12 <http_loop+0x28d2>
   2a69d:	call   23310 <invalidate_persistent>
   2a6a2:	jmp    2905f <http_loop+0x2c1f>
   2a6a7:	cmp    BYTE PTR [rax+0x1],0x0
   2a6ab:	jne    29e1d <http_loop+0x39dd>
   2a6b1:	mov    rdi,r8
   2a6b4:	lea    rbp,[rip+0x43d5c]        # 6e417 <urlchr_table+0x877>
   2a6bb:	call   3e8e0 <number_to_static_string>
   2a6c0:	lea    rsi,[rip+0x31d29]        # 5c3f0 <_IO_stdin_used+0x13f0>
   2a6c7:	mov    edx,0x5
   2a6cc:	xor    edi,edi
   2a6ce:	mov    rbx,rax
   2a6d1:	call   c780 <dcgettext@plt>
   2a6d6:	mov    rsi,rax
   2a6d9:	jmp    29e4e <http_loop+0x3a0e>
   2a6de:	call   23310 <invalidate_persistent>
   2a6e3:	jmp    29923 <http_loop+0x34e3>
   2a6e8:	lea    rsi,[rip+0x30bba]        # 5b2a9 <_IO_stdin_used+0x2a9>
   2a6ef:	call   c0f0 <fopen@plt>
   2a6f4:	mov    r13,rax
   2a6f7:	jmp    295de <http_loop+0x319e>
   2a6fc:	xor    esi,esi
   2a6fe:	call   3bed0 <file_exists_p>
   2a703:	mov    rdi,QWORD PTR [rsp+0x208]
   2a70b:	test   al,al
   2a70d:	je     295ae <http_loop+0x316e>
   2a713:	call   c120 <unlink@plt>
   2a718:	test   eax,eax
   2a71a:	js     2a74f <http_loop+0x430f>
   2a71c:	mov    rdi,QWORD PTR [rsp+0x208]
   2a724:	jmp    295ae <http_loop+0x316e>
   2a729:	lea    rsi,[rip+0x31382]        # 5bab2 <_IO_stdin_used+0xab2>
   2a730:	call   c0f0 <fopen@plt>
   2a735:	mov    r13,rax
   2a738:	jmp    295de <http_loop+0x319e>
   2a73d:	mov    rdi,QWORD PTR [rsp+0x208]
   2a745:	call   36240 <rotate_backups>
   2a74a:	jmp    2958a <http_loop+0x314a>
   2a74f:	call   c740 <__errno_location@plt>
   2a754:	mov    r13d,0x2f
   2a75a:	mov    edi,DWORD PTR [rax]
   2a75c:	call   c540 <strerror@plt>
   2a761:	mov    rdx,QWORD PTR [rsp+0x208]
   2a769:	mov    edi,0x1
   2a76e:	lea    rsi,[rip+0x3e0d0]        # 68845 <primes.6089+0x2765>
   2a775:	mov    rcx,rax
   2a778:	xor    eax,eax
   2a77a:	call   2e0a0 <logprintf>
   2a77f:	jmp    29617 <http_loop+0x31d7>
   2a784:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2a78f:	nop

000000000002a790 <save_cookies>:
   2a790:	endbr64 
   2a794:	mov    rdi,QWORD PTR [rip+0x5af1d]        # 856b8 <wget_cookie_jar>
   2a79b:	test   rdi,rdi
   2a79e:	je     2a7b0 <save_cookies+0x20>
   2a7a0:	mov    rsi,QWORD PTR [rip+0x5fbd1]        # 8a378 <opt+0x2f8>
   2a7a7:	jmp    13180 <cookie_jar_save>
   2a7ac:	nop    DWORD PTR [rax+0x0]
   2a7b0:	ret    
   2a7b1:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2a7bb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002a7c0 <simple_atof>:
   2a7c0:	cmp    rdi,rsi
   2a7c3:	jae    2a8d0 <simple_atof+0x110>
   2a7c9:	movzx  eax,BYTE PTR [rdi]
   2a7cc:	cmp    al,0xd
   2a7ce:	jg     2a8b8 <simple_atof+0xf8>
   2a7d4:	cmp    al,0x8
   2a7d6:	jg     2a8c0 <simple_atof+0x100>
   2a7dc:	xor    r9d,r9d
   2a7df:	cmp    rsi,rdi
   2a7e2:	jbe    2a8d3 <simple_atof+0x113>
   2a7e8:	lea    ecx,[rax-0x2b]
   2a7eb:	and    ecx,0xfd
   2a7f1:	jne    2a8e0 <simple_atof+0x120>
   2a7f7:	cmp    al,0x2d
   2a7f9:	sete   r10b
   2a7fd:	add    rdi,0x1
   2a801:	cmp    rsi,rdi
   2a804:	jbe    2a8d3 <simple_atof+0x113>
   2a80a:	movsd  xmm3,QWORD PTR [rip+0x3dfae]        # 687c0 <primes.6089+0x26e0>
   2a812:	xor    r9d,r9d
   2a815:	xor    r8d,r8d
   2a818:	pxor   xmm1,xmm1
   2a81c:	movsd  xmm2,QWORD PTR [rip+0x30fbc]        # 5b7e0 <_IO_stdin_used+0x7e0>
   2a824:	movapd xmm4,xmm3
   2a828:	jmp    2a854 <simple_atof+0x94>
   2a82a:	nop    WORD PTR [rax+rax*1+0x0]
   2a830:	test   r8b,r8b
   2a833:	jne    2a898 <simple_atof+0xd8>
   2a835:	mulsd  xmm1,xmm4
   2a839:	pxor   xmm0,xmm0
   2a83d:	mov    r9d,0x1
   2a843:	cvtsi2sd xmm0,eax
   2a847:	addsd  xmm1,xmm0
   2a84b:	add    rdi,0x1
   2a84f:	cmp    rsi,rdi
   2a852:	je     2a87a <simple_atof+0xba>
   2a854:	movsx  eax,BYTE PTR [rdi]
   2a857:	mov    ecx,eax
   2a859:	sub    eax,0x30
   2a85c:	cmp    eax,0x9
   2a85f:	jbe    2a830 <simple_atof+0x70>
   2a861:	cmp    cl,0x2e
   2a864:	jne    2a8d0 <simple_atof+0x110>
   2a866:	test   r8b,r8b
   2a869:	jne    2a8d0 <simple_atof+0x110>
   2a86b:	add    rdi,0x1
   2a86f:	mov    r8d,0x1
   2a875:	cmp    rsi,rdi
   2a878:	jne    2a854 <simple_atof+0x94>
   2a87a:	test   r9b,r9b
   2a87d:	je     2a8d3 <simple_atof+0x113>
   2a87f:	test   r10b,r10b
   2a882:	je     2a88c <simple_atof+0xcc>
   2a884:	xorpd  xmm1,XMMWORD PTR [rip+0x3df94]        # 68820 <primes.6089+0x2740>
   2a88c:	movsd  QWORD PTR [rdx],xmm1
   2a890:	mov    eax,r9d
   2a893:	ret    
   2a894:	nop    DWORD PTR [rax+0x0]
   2a898:	mulsd  xmm2,xmm3
   2a89c:	pxor   xmm0,xmm0
   2a8a0:	mov    r9d,r8d
   2a8a3:	cvtsi2sd xmm0,eax
   2a8a7:	divsd  xmm0,xmm2
   2a8ab:	addsd  xmm1,xmm0
   2a8af:	jmp    2a84b <simple_atof+0x8b>
   2a8b1:	nop    DWORD PTR [rax+0x0]
   2a8b8:	cmp    al,0x20
   2a8ba:	jne    2a7dc <simple_atof+0x1c>
   2a8c0:	add    rdi,0x1
   2a8c4:	cmp    rsi,rdi
   2a8c7:	jne    2a7c9 <simple_atof+0x9>
   2a8cd:	nop    DWORD PTR [rax]
   2a8d0:	xor    r9d,r9d
   2a8d3:	mov    eax,r9d
   2a8d6:	ret    
   2a8d7:	nop    WORD PTR [rax+rax*1+0x0]
   2a8e0:	xor    r10d,r10d
   2a8e3:	jmp    2a80a <simple_atof+0x4a>
   2a8e8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002a8f0 <cmd_string>:
   2a8f0:	endbr64 
   2a8f4:	push   rbp
   2a8f5:	mov    rbp,rsi
   2a8f8:	push   rbx
   2a8f9:	mov    rbx,rdx
   2a8fc:	sub    rsp,0x8
   2a900:	mov    rdi,QWORD PTR [rdx]
   2a903:	call   4bdc0 <rpl_free>
   2a908:	mov    QWORD PTR [rbx],0x0
   2a90f:	mov    rdi,rbp
   2a912:	call   4ba50 <xstrdup>
   2a917:	mov    QWORD PTR [rbx],rax
   2a91a:	add    rsp,0x8
   2a91e:	mov    eax,0x1
   2a923:	pop    rbx
   2a924:	pop    rbp
   2a925:	ret    
   2a926:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000002a930 <cmd_file>:
   2a930:	endbr64 
   2a934:	jmp    2a8f0 <cmd_string>
   2a936:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000002a940 <cmd_use_askpass>:
   2a940:	endbr64 
   2a944:	push   rbp
   2a945:	push   rbx
   2a946:	mov    rbx,rdx
   2a949:	sub    rsp,0x8
   2a94d:	test   rsi,rsi
   2a950:	je     2a95a <cmd_use_askpass+0x1a>
   2a952:	cmp    BYTE PTR [rsi],0x0
   2a955:	mov    rbp,rsi
   2a958:	jne    2a9c0 <cmd_use_askpass+0x80>
   2a95a:	lea    rdi,[rip+0x3d1df]        # 67b40 <primes.6089+0x1a60>
   2a961:	call   c720 <getenv@plt>
   2a966:	mov    rbp,rax
   2a969:	test   rax,rax
   2a96c:	je     2a973 <cmd_use_askpass+0x33>
   2a96e:	cmp    BYTE PTR [rax],0x0
   2a971:	jne    2a9c0 <cmd_use_askpass+0x80>
   2a973:	lea    rdi,[rip+0x3d1d3]        # 67b4d <primes.6089+0x1a6d>
   2a97a:	call   c720 <getenv@plt>
   2a97f:	mov    rbp,rax
   2a982:	test   rax,rax
   2a985:	je     2a98c <cmd_use_askpass+0x4c>
   2a987:	cmp    BYTE PTR [rax],0x0
   2a98a:	jne    2a9c0 <cmd_use_askpass+0x80>
   2a98c:	mov    edx,0x5
   2a991:	lea    rsi,[rip+0x3d9e0]        # 68378 <primes.6089+0x2298>
   2a998:	xor    edi,edi
   2a99a:	call   c780 <dcgettext@plt>
   2a99f:	mov    rdi,QWORD PTR [rip+0x58b3a]        # 834e0 <stderr@@GLIBC_2.2.5>
   2a9a6:	mov    esi,0x1
   2a9ab:	mov    rdx,rax
   2a9ae:	xor    eax,eax
   2a9b0:	call   bfd0 <__fprintf_chk@plt>
   2a9b5:	add    rsp,0x8
   2a9b9:	xor    eax,eax
   2a9bb:	pop    rbx
   2a9bc:	pop    rbp
   2a9bd:	ret    
   2a9be:	xchg   ax,ax
   2a9c0:	mov    rdi,QWORD PTR [rbx]
   2a9c3:	call   4bdc0 <rpl_free>
   2a9c8:	mov    QWORD PTR [rbx],0x0
   2a9cf:	mov    rdi,rbp
   2a9d2:	call   4ba50 <xstrdup>
   2a9d7:	mov    QWORD PTR [rbx],rax
   2a9da:	add    rsp,0x8
   2a9de:	mov    eax,0x1
   2a9e3:	pop    rbx
   2a9e4:	pop    rbp
   2a9e5:	ret    
   2a9e6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000002a9f0 <cmd_time>:
   2a9f0:	endbr64 
   2a9f4:	push   r12
   2a9f6:	mov    r12,rdx
   2a9f9:	push   rbp
   2a9fa:	mov    rbp,rsi
   2a9fd:	push   rbx
   2a9fe:	mov    rbx,rdi
   2aa01:	mov    rdi,rsi
   2aa04:	sub    rsp,0x10
   2aa08:	mov    rax,QWORD PTR fs:0x28
   2aa11:	mov    QWORD PTR [rsp+0x8],rax
   2aa16:	xor    eax,eax
   2aa18:	call   c310 <strlen@plt>
   2aa1d:	lea    rsi,[rbp+rax*1+0x0]
   2aa22:	cmp    rbp,rsi
   2aa25:	jae    2aa3b <cmd_time+0x4b>
   2aa27:	movzx  eax,BYTE PTR [rsi-0x1]
   2aa2b:	cmp    al,0xd
   2aa2d:	jg     2ab00 <cmd_time+0x110>
   2aa33:	cmp    al,0x8
   2aa35:	jg     2ab08 <cmd_time+0x118>
   2aa3b:	cmp    rbp,rsi
   2aa3e:	je     2ab18 <cmd_time+0x128>
   2aa44:	movsx  eax,BYTE PTR [rsi-0x1]
   2aa48:	lea    ecx,[rax-0x41]
   2aa4b:	lea    edx,[rax+0x20]
   2aa4e:	cmp    ecx,0x1a
   2aa51:	cmovb  eax,edx
   2aa54:	sub    eax,0x64
   2aa57:	cmp    eax,0x13
   2aa5a:	ja     2aa70 <cmd_time+0x80>
   2aa5c:	lea    rdx,[rip+0x3dd09]        # 6876c <primes.6089+0x268c>
   2aa63:	movsxd rax,DWORD PTR [rdx+rax*4]
   2aa67:	add    rax,rdx
   2aa6a:	notrack jmp rax
   2aa6d:	nop    DWORD PTR [rax]
   2aa70:	movsd  xmm5,QWORD PTR [rip+0x30d68]        # 5b7e0 <_IO_stdin_used+0x7e0>
   2aa78:	cmp    rbp,rsi
   2aa7b:	jae    2aaaa <cmd_time+0xba>
   2aa7d:	movzx  eax,BYTE PTR [rbp+0x0]
   2aa81:	cmp    al,0xd
   2aa83:	jg     2ab80 <cmd_time+0x190>
   2aa89:	cmp    al,0x8
   2aa8b:	jg     2ab88 <cmd_time+0x198>
   2aa91:	cmp    rsi,rbp
   2aa94:	jbe    2aaaa <cmd_time+0xba>
   2aa96:	movzx  eax,BYTE PTR [rsi-0x1]
   2aa9a:	cmp    al,0xd
   2aa9c:	jg     2ab68 <cmd_time+0x178>
   2aaa2:	cmp    al,0x8
   2aaa4:	jg     2ab70 <cmd_time+0x180>
   2aaaa:	cmp    rbp,rsi
   2aaad:	je     2ab18 <cmd_time+0x128>
   2aaaf:	mov    rdx,rsp
   2aab2:	mov    rdi,rbp
   2aab5:	call   2a7c0 <simple_atof>
   2aaba:	test   al,al
   2aabc:	je     2ab18 <cmd_time+0x128>
   2aabe:	movsd  xmm0,QWORD PTR [rsp]
   2aac3:	pxor   xmm1,xmm1
   2aac7:	comisd xmm1,xmm0
   2aacb:	ja     2aba0 <cmd_time+0x1b0>
   2aad1:	mulsd  xmm0,xmm5
   2aad5:	movsd  QWORD PTR [r12],xmm0
   2aadb:	mov    rbx,QWORD PTR [rsp+0x8]
   2aae0:	xor    rbx,QWORD PTR fs:0x28
   2aae9:	jne    2ac39 <cmd_time+0x249>
   2aaef:	add    rsp,0x10
   2aaf3:	pop    rbx
   2aaf4:	pop    rbp
   2aaf5:	pop    r12
   2aaf7:	ret    
   2aaf8:	nop    DWORD PTR [rax+rax*1+0x0]
   2ab00:	cmp    al,0x20
   2ab02:	jne    2aa3b <cmd_time+0x4b>
   2ab08:	sub    rsi,0x1
   2ab0c:	cmp    rbp,rsi
   2ab0f:	jne    2aa27 <cmd_time+0x37>
   2ab15:	nop    DWORD PTR [rax]
   2ab18:	mov    rdi,rbp
   2ab1b:	call   4b5b0 <quote>
   2ab20:	mov    r12,QWORD PTR [rip+0x5f8f9]        # 8a420 <exec_name>
   2ab27:	mov    edx,0x5
   2ab2c:	lea    rsi,[rip+0x3d8ad]        # 683e0 <primes.6089+0x2300>
   2ab33:	mov    rbp,rax
   2ab36:	xor    edi,edi
   2ab38:	call   c780 <dcgettext@plt>
   2ab3d:	mov    r9,rbp
   2ab40:	mov    r8,rbx
   2ab43:	mov    rcx,r12
   2ab46:	mov    rdi,QWORD PTR [rip+0x58993]        # 834e0 <stderr@@GLIBC_2.2.5>
   2ab4d:	mov    rdx,rax
   2ab50:	mov    esi,0x1
   2ab55:	xor    eax,eax
   2ab57:	call   bfd0 <__fprintf_chk@plt>
   2ab5c:	xor    eax,eax
   2ab5e:	jmp    2aadb <cmd_time+0xeb>
   2ab63:	nop    DWORD PTR [rax+rax*1+0x0]
   2ab68:	cmp    al,0x20
   2ab6a:	jne    2aaaa <cmd_time+0xba>
   2ab70:	sub    rsi,0x1
   2ab74:	cmp    rsi,rbp
   2ab77:	jne    2aa96 <cmd_time+0xa6>
   2ab7d:	jmp    2ab18 <cmd_time+0x128>
   2ab7f:	nop
   2ab80:	cmp    al,0x20
   2ab82:	jne    2aa91 <cmd_time+0xa1>
   2ab88:	add    rbp,0x1
   2ab8c:	cmp    rbp,rsi
   2ab8f:	jne    2aa7d <cmd_time+0x8d>
   2ab95:	jmp    2ab18 <cmd_time+0x128>
   2ab97:	nop    WORD PTR [rax+rax*1+0x0]
   2aba0:	mov    rdi,rbp
   2aba3:	call   4b5b0 <quote>
   2aba8:	mov    r12,QWORD PTR [rip+0x5f871]        # 8a420 <exec_name>
   2abaf:	mov    edx,0x5
   2abb4:	lea    rsi,[rip+0x3d845]        # 68400 <primes.6089+0x2320>
   2abbb:	mov    rbp,rax
   2abbe:	jmp    2ab36 <cmd_time+0x146>
   2abc3:	nop    DWORD PTR [rax+rax*1+0x0]
   2abc8:	movsd  xmm5,QWORD PTR [rip+0x3dc00]        # 687d0 <primes.6089+0x26f0>
   2abd0:	sub    rsi,0x1
   2abd4:	jmp    2aa78 <cmd_time+0x88>
   2abd9:	nop    DWORD PTR [rax+0x0]
   2abe0:	movsd  xmm5,QWORD PTR [rip+0x3dbe0]        # 687c8 <primes.6089+0x26e8>
   2abe8:	sub    rsi,0x1
   2abec:	jmp    2aa78 <cmd_time+0x88>
   2abf1:	nop    DWORD PTR [rax+0x0]
   2abf8:	movsd  xmm5,QWORD PTR [rip+0x30be0]        # 5b7e0 <_IO_stdin_used+0x7e0>
   2ac00:	sub    rsi,0x1
   2ac04:	jmp    2aa78 <cmd_time+0x88>
   2ac09:	nop    DWORD PTR [rax+0x0]
   2ac10:	movsd  xmm5,QWORD PTR [rip+0x3dbc8]        # 687e0 <primes.6089+0x2700>
   2ac18:	sub    rsi,0x1
   2ac1c:	jmp    2aa78 <cmd_time+0x88>
   2ac21:	nop    DWORD PTR [rax+0x0]
   2ac28:	movsd  xmm5,QWORD PTR [rip+0x3dba8]        # 687d8 <primes.6089+0x26f8>
   2ac30:	sub    rsi,0x1
   2ac34:	jmp    2aa78 <cmd_time+0x88>
   2ac39:	call   c7b0 <__stack_chk_fail@plt>
   2ac3e:	xchg   ax,ax

000000000002ac40 <cmd_spec_timeout>:
   2ac40:	endbr64 
   2ac44:	sub    rsp,0x18
   2ac48:	mov    rax,QWORD PTR fs:0x28
   2ac51:	mov    QWORD PTR [rsp+0x8],rax
   2ac56:	xor    eax,eax
   2ac58:	mov    rdx,rsp
   2ac5b:	call   2a9f0 <cmd_time>
   2ac60:	test   al,al
   2ac62:	je     2ac81 <cmd_spec_timeout+0x41>
   2ac64:	movsd  xmm0,QWORD PTR [rsp]
   2ac69:	movsd  QWORD PTR [rip+0x5f5ff],xmm0        # 8a270 <opt+0x1f0>
   2ac71:	movsd  QWORD PTR [rip+0x5f607],xmm0        # 8a280 <opt+0x200>
   2ac79:	movsd  QWORD PTR [rip+0x5f5f7],xmm0        # 8a278 <opt+0x1f8>
   2ac81:	mov    rcx,QWORD PTR [rsp+0x8]
   2ac86:	xor    rcx,QWORD PTR fs:0x28
   2ac8f:	jne    2ac96 <cmd_spec_timeout+0x56>
   2ac91:	add    rsp,0x18
   2ac95:	ret    
   2ac96:	call   c7b0 <__stack_chk_fail@plt>
   2ac9b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002aca0 <cmd_directory>:
   2aca0:	endbr64 
   2aca4:	push   r12
   2aca6:	mov    rdi,QWORD PTR [rdx]
   2aca9:	mov    r12,rsi
   2acac:	push   rbp
   2acad:	mov    rbp,rdx
   2acb0:	push   rbx
   2acb1:	call   4bdc0 <rpl_free>
   2acb6:	mov    QWORD PTR [rbp+0x0],0x0
   2acbe:	mov    rdi,r12
   2acc1:	call   4ba50 <xstrdup>
   2acc6:	mov    QWORD PTR [rbp+0x0],rax
   2acca:	mov    rdi,rax
   2accd:	mov    rbx,rax
   2acd0:	call   c310 <strlen@plt>
   2acd5:	add    rax,rbx
   2acd8:	cmp    rax,rbx
   2acdb:	ja     2ace8 <cmd_directory+0x48>
   2acdd:	jmp    2acf1 <cmd_directory+0x51>
   2acdf:	nop
   2ace0:	mov    BYTE PTR [rax],0x0
   2ace3:	cmp    rax,rbx
   2ace6:	je     2acf1 <cmd_directory+0x51>
   2ace8:	sub    rax,0x1
   2acec:	cmp    BYTE PTR [rax],0x2f
   2acef:	je     2ace0 <cmd_directory+0x40>
   2acf1:	pop    rbx
   2acf2:	mov    eax,0x1
   2acf7:	pop    rbp
   2acf8:	pop    r12
   2acfa:	ret    
   2acfb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002ad00 <cmd_string_uppercase>:
   2ad00:	endbr64 
   2ad04:	push   rbp
   2ad05:	mov    rbp,rdx
   2ad08:	push   rbx
   2ad09:	mov    rbx,rsi
   2ad0c:	sub    rsp,0x8
   2ad10:	mov    rdi,QWORD PTR [rdx]
   2ad13:	call   4bdc0 <rpl_free>
   2ad18:	mov    QWORD PTR [rbp+0x0],0x0
   2ad20:	mov    rdi,rbx
   2ad23:	call   c310 <strlen@plt>
   2ad28:	lea    rdi,[rax+0x1]
   2ad2c:	call   4b850 <xmalloc>
   2ad31:	mov    QWORD PTR [rbp+0x0],rax
   2ad35:	movzx  edx,BYTE PTR [rbx]
   2ad38:	test   dl,dl
   2ad3a:	je     2ad61 <cmd_string_uppercase+0x61>
   2ad3c:	nop    DWORD PTR [rax+0x0]
   2ad40:	movsx  ecx,dl
   2ad43:	lea    esi,[rdx-0x20]
   2ad46:	sub    ecx,0x61
   2ad49:	cmp    ecx,0x1a
   2ad4c:	cmovb  edx,esi
   2ad4f:	add    rbx,0x1
   2ad53:	add    rax,0x1
   2ad57:	mov    BYTE PTR [rax-0x1],dl
   2ad5a:	movzx  edx,BYTE PTR [rbx]
   2ad5d:	test   dl,dl
   2ad5f:	jne    2ad40 <cmd_string_uppercase+0x40>
   2ad61:	mov    BYTE PTR [rax],0x0
   2ad64:	add    rsp,0x8
   2ad68:	mov    eax,0x1
   2ad6d:	pop    rbx
   2ad6e:	pop    rbp
   2ad6f:	ret    

000000000002ad70 <command_by_name>:
   2ad70:	push   r14
   2ad72:	lea    rsi,[rip+0x3cde0]        # 67b59 <primes.6089+0x1a79>
   2ad79:	mov    r14d,0xa5
   2ad7f:	mov    edx,0xa5
   2ad84:	push   r13
   2ad86:	xor    r13d,r13d
   2ad89:	push   r12
   2ad8b:	push   rbp
   2ad8c:	lea    rbp,[rip+0x5296d]        # 7d700 <commands>
   2ad93:	push   rbx
   2ad94:	mov    rbx,rdi
   2ad97:	jmp    2adbf <command_by_name+0x4f>
   2ad99:	nop    DWORD PTR [rax+0x0]
   2ada0:	je     2ade0 <command_by_name+0x70>
   2ada2:	lea    r13d,[r12+0x1]
   2ada7:	cmp    r14d,r13d
   2adaa:	jl     2adda <command_by_name+0x6a>
   2adac:	lea    edx,[r14+r13*1]
   2adb0:	mov    eax,edx
   2adb2:	sar    eax,1
   2adb4:	cdqe   
   2adb6:	lea    rax,[rax+rax*2]
   2adba:	mov    rsi,QWORD PTR [rbp+rax*8+0x0]
   2adbf:	sar    edx,1
   2adc1:	mov    rdi,rbx
   2adc4:	mov    r12d,edx
   2adc7:	call   43340 <c_strcasecmp>
   2adcc:	test   eax,eax
   2adce:	jns    2ada0 <command_by_name+0x30>
   2add0:	lea    r14d,[r12-0x1]
   2add5:	cmp    r14d,r13d
   2add8:	jge    2adac <command_by_name+0x3c>
   2adda:	mov    r12d,0xffffffff
   2ade0:	pop    rbx
   2ade1:	mov    eax,r12d
   2ade4:	pop    rbp
   2ade5:	pop    r12
   2ade7:	pop    r13
   2ade9:	pop    r14
   2adeb:	ret    
   2adec:	nop    DWORD PTR [rax+0x0]

000000000002adf0 <parse_line>:
   2adf0:	push   r15
   2adf2:	mov    r15,rdi
   2adf5:	push   r14
   2adf7:	mov    r14,rdx
   2adfa:	push   r13
   2adfc:	mov    r13,rcx
   2adff:	push   r12
   2ae01:	mov    r12,rsi
   2ae04:	push   rbp
   2ae05:	push   rbx
   2ae06:	sub    rsp,0x428
   2ae0d:	mov    rax,QWORD PTR fs:0x28
   2ae16:	mov    QWORD PTR [rsp+0x418],rax
   2ae1e:	xor    eax,eax
   2ae20:	call   c310 <strlen@plt>
   2ae25:	lea    rbp,[r15+rax*1]
   2ae29:	movzx  eax,BYTE PTR [r15]
   2ae2d:	test   al,al
   2ae2f:	je     2b019 <parse_line+0x229>
   2ae35:	cmp    al,0xd
   2ae37:	jg     2b000 <parse_line+0x210>
   2ae3d:	cmp    al,0x8
   2ae3f:	jg     2b008 <parse_line+0x218>
   2ae45:	cmp    al,0x23
   2ae47:	sete   cl
   2ae4a:	cmp    r15,rbp
   2ae4d:	jae    2af05 <parse_line+0x115>
   2ae53:	movzx  eax,BYTE PTR [rbp-0x1]
   2ae57:	cmp    al,0xd
   2ae59:	jg     2aef0 <parse_line+0x100>
   2ae5f:	cmp    al,0x8
   2ae61:	jg     2aef8 <parse_line+0x108>
   2ae67:	mov    eax,0x1
   2ae6c:	test   cl,cl
   2ae6e:	jne    2aebe <parse_line+0xce>
   2ae70:	mov    rbx,r15
   2ae73:	mov    rdx,r15
   2ae76:	cmp    r15,rbp
   2ae79:	jb     2aea1 <parse_line+0xb1>
   2ae7b:	jmp    2af18 <parse_line+0x128>
   2ae80:	cmp    al,0x40
   2ae82:	jg     2ae98 <parse_line+0xa8>
   2ae84:	lea    edx,[rax-0x30]
   2ae87:	cmp    dl,0x9
   2ae8a:	jbe    2ae98 <parse_line+0xa8>
   2ae8c:	cmp    al,0x5f
   2ae8e:	je     2ae98 <parse_line+0xa8>
   2ae90:	cmp    al,0x2d
   2ae92:	jne    2b058 <parse_line+0x268>
   2ae98:	add    rbx,0x1
   2ae9c:	cmp    rbx,rbp
   2ae9f:	je     2aeb9 <parse_line+0xc9>
   2aea1:	movzx  eax,BYTE PTR [rbx]
   2aea4:	cmp    al,0x5a
   2aea6:	jle    2ae80 <parse_line+0x90>
   2aea8:	lea    edx,[rax-0x61]
   2aeab:	cmp    dl,0x19
   2aeae:	ja     2ae8c <parse_line+0x9c>
   2aeb0:	add    rbx,0x1
   2aeb4:	cmp    rbx,rbp
   2aeb7:	jne    2aea1 <parse_line+0xb1>
   2aeb9:	mov    eax,0x2
   2aebe:	mov    rsi,QWORD PTR [rsp+0x418]
   2aec6:	xor    rsi,QWORD PTR fs:0x28
   2aecf:	jne    2b0f9 <parse_line+0x309>
   2aed5:	add    rsp,0x428
   2aedc:	pop    rbx
   2aedd:	pop    rbp
   2aede:	pop    r12
   2aee0:	pop    r13
   2aee2:	pop    r14
   2aee4:	pop    r15
   2aee6:	ret    
   2aee7:	nop    WORD PTR [rax+rax*1+0x0]
   2aef0:	cmp    al,0x20
   2aef2:	jne    2ae67 <parse_line+0x77>
   2aef8:	sub    rbp,0x1
   2aefc:	cmp    rbp,r15
   2aeff:	ja     2ae53 <parse_line+0x63>
   2af05:	mov    rdx,r15
   2af08:	mov    eax,0x1
   2af0d:	mov    rbx,r15
   2af10:	test   cl,cl
   2af12:	jne    2aebe <parse_line+0xce>
   2af14:	nop    DWORD PTR [rax+0x0]
   2af18:	mov    eax,0x2
   2af1d:	cmp    rdx,rbp
   2af20:	je     2aebe <parse_line+0xce>
   2af22:	cmp    BYTE PTR [rdx],0x3d
   2af25:	jne    2aebe <parse_line+0xce>
   2af27:	lea    r8,[rdx+0x1]
   2af2b:	cmp    r8,rbp
   2af2e:	jae    2af44 <parse_line+0x154>
   2af30:	movzx  eax,BYTE PTR [r8]
   2af34:	cmp    al,0xd
   2af36:	jg     2b038 <parse_line+0x248>
   2af3c:	cmp    al,0x8
   2af3e:	jg     2b040 <parse_line+0x250>
   2af44:	mov    rsi,rbx
   2af47:	mov    rdi,r15
   2af4a:	mov    QWORD PTR [rsp+0x8],r8
   2af4f:	sub    rbx,r15
   2af52:	call   3b8a0 <strdupdelim>
   2af57:	mov    r8,QWORD PTR [rsp+0x8]
   2af5c:	mov    rsi,rbp
   2af5f:	mov    QWORD PTR [r12],rax
   2af63:	mov    rdi,r8
   2af66:	call   3b8a0 <strdupdelim>
   2af6b:	mov    QWORD PTR [r14],rax
   2af6e:	cmp    rbx,0x3ff
   2af75:	ja     2b0a0 <parse_line+0x2b0>
   2af7b:	lea    r12,[rsp+0x10]
   2af80:	mov    rdx,rbx
   2af83:	mov    rsi,r15
   2af86:	mov    rdi,r12
   2af89:	mov    rbp,r12
   2af8c:	call   cb30 <memcpy@plt>
   2af91:	mov    BYTE PTR [rsp+rbx*1+0x10],0x0
   2af96:	movzx  eax,BYTE PTR [rsp+0x10]
   2af9b:	test   al,al
   2af9d:	je     2b0db <parse_line+0x2eb>
   2afa3:	mov    rcx,rbp
   2afa6:	mov    rdx,rbp
   2afa9:	nop    DWORD PTR [rax+0x0]
   2afb0:	add    rdx,0x1
   2afb4:	cmp    al,0x5f
   2afb6:	je     2afc2 <parse_line+0x1d2>
   2afb8:	cmp    al,0x2d
   2afba:	je     2afc2 <parse_line+0x1d2>
   2afbc:	mov    BYTE PTR [rcx],al
   2afbe:	add    rcx,0x1
   2afc2:	movzx  eax,BYTE PTR [rdx]
   2afc5:	test   al,al
   2afc7:	jne    2afb0 <parse_line+0x1c0>
   2afc9:	mov    BYTE PTR [rcx],0x0
   2afcc:	mov    rdi,rbp
   2afcf:	call   2ad70 <command_by_name>
   2afd4:	mov    ebx,eax
   2afd6:	cmp    rbp,r12
   2afd9:	je     2afe3 <parse_line+0x1f3>
   2afdb:	mov    rdi,rbp
   2afde:	call   4bdc0 <rpl_free>
   2afe3:	cmp    ebx,0xffffffff
   2afe6:	je     2b0d1 <parse_line+0x2e1>
   2afec:	mov    DWORD PTR [r13+0x0],ebx
   2aff0:	xor    eax,eax
   2aff2:	jmp    2aebe <parse_line+0xce>
   2aff7:	nop    WORD PTR [rax+rax*1+0x0]
   2b000:	cmp    al,0x20
   2b002:	jne    2ae45 <parse_line+0x55>
   2b008:	movzx  eax,BYTE PTR [r15+0x1]
   2b00d:	add    r15,0x1
   2b011:	test   al,al
   2b013:	jne    2ae35 <parse_line+0x45>
   2b019:	mov    ecx,0x1
   2b01e:	cmp    rbp,r15
   2b021:	ja     2ae53 <parse_line+0x63>
   2b027:	mov    eax,0x1
   2b02c:	jmp    2aebe <parse_line+0xce>
   2b031:	nop    DWORD PTR [rax+0x0]
   2b038:	cmp    al,0x20
   2b03a:	jne    2af44 <parse_line+0x154>
   2b040:	add    r8,0x1
   2b044:	cmp    r8,rbp
   2b047:	jne    2af30 <parse_line+0x140>
   2b04d:	jmp    2af44 <parse_line+0x154>
   2b052:	nop    WORD PTR [rax+rax*1+0x0]
   2b058:	mov    rdx,rbx
   2b05b:	cmp    rbx,rbp
   2b05e:	jb     2b078 <parse_line+0x288>
   2b060:	jmp    2af18 <parse_line+0x128>
   2b065:	nop    DWORD PTR [rax]
   2b068:	add    rdx,0x1
   2b06c:	cmp    rdx,rbp
   2b06f:	je     2aeb9 <parse_line+0xc9>
   2b075:	movzx  eax,BYTE PTR [rdx]
   2b078:	cmp    al,0xd
   2b07a:	jg     2b090 <parse_line+0x2a0>
   2b07c:	cmp    al,0x8
   2b07e:	jle    2af18 <parse_line+0x128>
   2b084:	jmp    2b068 <parse_line+0x278>
   2b086:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b090:	cmp    al,0x20
   2b092:	jne    2af18 <parse_line+0x128>
   2b098:	jmp    2b068 <parse_line+0x278>
   2b09a:	nop    WORD PTR [rax+rax*1+0x0]
   2b0a0:	lea    rdi,[rbx+0x1]
   2b0a4:	call   4b850 <xmalloc>
   2b0a9:	mov    rdx,rbx
   2b0ac:	mov    rsi,r15
   2b0af:	mov    rbp,rax
   2b0b2:	mov    rdi,rax
   2b0b5:	call   cb30 <memcpy@plt>
   2b0ba:	mov    BYTE PTR [rbp+rbx*1+0x0],0x0
   2b0bf:	movzx  eax,BYTE PTR [rbp+0x0]
   2b0c3:	test   al,al
   2b0c5:	je     2b0ea <parse_line+0x2fa>
   2b0c7:	lea    r12,[rsp+0x10]
   2b0cc:	jmp    2afa3 <parse_line+0x1b3>
   2b0d1:	mov    eax,0x3
   2b0d6:	jmp    2aebe <parse_line+0xce>
   2b0db:	mov    rdi,r12
   2b0de:	call   2ad70 <command_by_name>
   2b0e3:	mov    ebx,eax
   2b0e5:	jmp    2afe3 <parse_line+0x1f3>
   2b0ea:	mov    rdi,rbp
   2b0ed:	call   2ad70 <command_by_name>
   2b0f2:	mov    ebx,eax
   2b0f4:	jmp    2afdb <parse_line+0x1eb>
   2b0f9:	call   c7b0 <__stack_chk_fail@plt>
   2b0fe:	xchg   ax,ax

000000000002b100 <decode_string>:
   2b100:	push   r13
   2b102:	lea    eax,[rdx-0x1]
   2b105:	mov    r13,rcx
   2b108:	push   r12
   2b10a:	shl    rax,0x4
   2b10e:	push   rbp
   2b10f:	lea    r12,[rsi+rax*1+0x10]
   2b114:	mov    rbp,rdi
   2b117:	push   rbx
   2b118:	mov    rbx,rsi
   2b11b:	sub    rsp,0x8
   2b11f:	nop
   2b120:	mov    rsi,QWORD PTR [rbx]
   2b123:	mov    rdi,rbp
   2b126:	call   43340 <c_strcasecmp>
   2b12b:	test   eax,eax
   2b12d:	je     2b148 <decode_string+0x48>
   2b12f:	add    rbx,0x10
   2b133:	cmp    rbx,r12
   2b136:	jne    2b120 <decode_string+0x20>
   2b138:	add    rsp,0x8
   2b13c:	xor    eax,eax
   2b13e:	pop    rbx
   2b13f:	pop    rbp
   2b140:	pop    r12
   2b142:	pop    r13
   2b144:	ret    
   2b145:	nop    DWORD PTR [rax]
   2b148:	mov    eax,DWORD PTR [rbx+0x8]
   2b14b:	mov    DWORD PTR [r13+0x0],eax
   2b14f:	add    rsp,0x8
   2b153:	mov    eax,0x1
   2b158:	pop    rbx
   2b159:	pop    rbp
   2b15a:	pop    r12
   2b15c:	pop    r13
   2b15e:	ret    
   2b15f:	nop

000000000002b160 <cmd_spec_regex_type>:
   2b160:	endbr64 
   2b164:	push   r13
   2b166:	mov    edx,0x1
   2b16b:	push   r12
   2b16d:	push   rbp
   2b16e:	mov    rbp,rsi
   2b171:	lea    rsi,[rip+0x51df8]        # 7cf70 <choices.9249>
   2b178:	push   rbx
   2b179:	mov    rbx,rdi
   2b17c:	mov    rdi,rbp
   2b17f:	sub    rsp,0x18
   2b183:	mov    rax,QWORD PTR fs:0x28
   2b18c:	mov    QWORD PTR [rsp+0x8],rax
   2b191:	xor    eax,eax
   2b193:	lea    rcx,[rsp+0x4]
   2b198:	mov    DWORD PTR [rsp+0x4],0x0
   2b1a0:	call   2b100 <decode_string>
   2b1a5:	mov    r12d,eax
   2b1a8:	test   al,al
   2b1aa:	je     2b1d8 <cmd_spec_regex_type+0x78>
   2b1ac:	mov    eax,DWORD PTR [rsp+0x4]
   2b1b0:	mov    DWORD PTR [rip+0x5ef82],eax        # 8a138 <opt+0xb8>
   2b1b6:	mov    rax,QWORD PTR [rsp+0x8]
   2b1bb:	xor    rax,QWORD PTR fs:0x28
   2b1c4:	jne    2b21e <cmd_spec_regex_type+0xbe>
   2b1c6:	add    rsp,0x18
   2b1ca:	mov    eax,r12d
   2b1cd:	pop    rbx
   2b1ce:	pop    rbp
   2b1cf:	pop    r12
   2b1d1:	pop    r13
   2b1d3:	ret    
   2b1d4:	nop    DWORD PTR [rax+0x0]
   2b1d8:	mov    rdi,rbp
   2b1db:	call   4b5b0 <quote>
   2b1e0:	mov    r13,QWORD PTR [rip+0x5f239]        # 8a420 <exec_name>
   2b1e7:	xor    edi,edi
   2b1e9:	mov    edx,0x5
   2b1ee:	lea    rsi,[rip+0x3c970]        # 67b65 <primes.6089+0x1a85>
   2b1f5:	mov    rbp,rax
   2b1f8:	call   c780 <dcgettext@plt>
   2b1fd:	mov    r9,rbp
   2b200:	mov    r8,rbx
   2b203:	mov    rcx,r13
   2b206:	mov    rdi,QWORD PTR [rip+0x582d3]        # 834e0 <stderr@@GLIBC_2.2.5>
   2b20d:	mov    rdx,rax
   2b210:	mov    esi,0x1
   2b215:	xor    eax,eax
   2b217:	call   bfd0 <__fprintf_chk@plt>
   2b21c:	jmp    2b1ac <cmd_spec_regex_type+0x4c>
   2b21e:	call   c7b0 <__stack_chk_fail@plt>
   2b223:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2b22e:	xchg   ax,ax

000000000002b230 <cmd_spec_prefer_family>:
   2b230:	endbr64 
   2b234:	push   r13
   2b236:	mov    edx,0x3
   2b23b:	push   r12
   2b23d:	push   rbp
   2b23e:	mov    rbp,rsi
   2b241:	lea    rsi,[rip+0x51cf8]        # 7cf40 <choices.9231>
   2b248:	push   rbx
   2b249:	mov    rbx,rdi
   2b24c:	mov    rdi,rbp
   2b24f:	sub    rsp,0x18
   2b253:	mov    rax,QWORD PTR fs:0x28
   2b25c:	mov    QWORD PTR [rsp+0x8],rax
   2b261:	xor    eax,eax
   2b263:	lea    rcx,[rsp+0x4]
   2b268:	mov    DWORD PTR [rsp+0x4],0x2
   2b270:	call   2b100 <decode_string>
   2b275:	mov    r12d,eax
   2b278:	test   al,al
   2b27a:	je     2b2a8 <cmd_spec_prefer_family+0x78>
   2b27c:	mov    eax,DWORD PTR [rsp+0x4]
   2b280:	mov    DWORD PTR [rip+0x5f13a],eax        # 8a3c0 <opt+0x340>
   2b286:	mov    rax,QWORD PTR [rsp+0x8]
   2b28b:	xor    rax,QWORD PTR fs:0x28
   2b294:	jne    2b2ee <cmd_spec_prefer_family+0xbe>
   2b296:	add    rsp,0x18
   2b29a:	mov    eax,r12d
   2b29d:	pop    rbx
   2b29e:	pop    rbp
   2b29f:	pop    r12
   2b2a1:	pop    r13
   2b2a3:	ret    
   2b2a4:	nop    DWORD PTR [rax+0x0]
   2b2a8:	mov    rdi,rbp
   2b2ab:	call   4b5b0 <quote>
   2b2b0:	mov    r13,QWORD PTR [rip+0x5f169]        # 8a420 <exec_name>
   2b2b7:	xor    edi,edi
   2b2b9:	mov    edx,0x5
   2b2be:	lea    rsi,[rip+0x3c8a0]        # 67b65 <primes.6089+0x1a85>
   2b2c5:	mov    rbp,rax
   2b2c8:	call   c780 <dcgettext@plt>
   2b2cd:	mov    r9,rbp
   2b2d0:	mov    r8,rbx
   2b2d3:	mov    rcx,r13
   2b2d6:	mov    rdi,QWORD PTR [rip+0x58203]        # 834e0 <stderr@@GLIBC_2.2.5>
   2b2dd:	mov    rdx,rax
   2b2e0:	mov    esi,0x1
   2b2e5:	xor    eax,eax
   2b2e7:	call   bfd0 <__fprintf_chk@plt>
   2b2ec:	jmp    2b27c <cmd_spec_prefer_family+0x4c>
   2b2ee:	call   c7b0 <__stack_chk_fail@plt>
   2b2f3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2b2fe:	xchg   ax,ax

000000000002b300 <cmd_spec_report_speed>:
   2b300:	endbr64 
   2b304:	push   r12
   2b306:	push   rbp
   2b307:	mov    rbp,rsi
   2b30a:	lea    rsi,[rip+0x3c86f]        # 67b80 <primes.6089+0x1aa0>
   2b311:	push   rbx
   2b312:	mov    rbx,rdi
   2b315:	mov    rdi,rbp
   2b318:	call   43340 <c_strcasecmp>
   2b31d:	mov    r8d,0x1
   2b323:	test   eax,eax
   2b325:	sete   BYTE PTR [rip+0x5f0af]        # 8a3db <opt+0x35b>
   2b32c:	jne    2b340 <cmd_spec_report_speed+0x40>
   2b32e:	pop    rbx
   2b32f:	mov    eax,r8d
   2b332:	pop    rbp
   2b333:	pop    r12
   2b335:	ret    
   2b336:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2b340:	mov    rdi,rbp
   2b343:	call   4b5b0 <quote>
   2b348:	mov    r12,QWORD PTR [rip+0x5f0d1]        # 8a420 <exec_name>
   2b34f:	mov    edx,0x5
   2b354:	xor    edi,edi
   2b356:	lea    rsi,[rip+0x3c808]        # 67b65 <primes.6089+0x1a85>
   2b35d:	mov    rbp,rax
   2b360:	call   c780 <dcgettext@plt>
   2b365:	mov    r8,rbx
   2b368:	mov    r9,rbp
   2b36b:	mov    rcx,r12
   2b36e:	mov    rdi,QWORD PTR [rip+0x5816b]        # 834e0 <stderr@@GLIBC_2.2.5>
   2b375:	mov    rdx,rax
   2b378:	mov    esi,0x1
   2b37d:	xor    eax,eax
   2b37f:	call   bfd0 <__fprintf_chk@plt>
   2b384:	movzx  r8d,BYTE PTR [rip+0x5f04f]        # 8a3db <opt+0x35b>
   2b38c:	pop    rbx
   2b38d:	pop    rbp
   2b38e:	pop    r12
   2b390:	mov    eax,r8d
   2b393:	ret    
   2b394:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2b39f:	nop

000000000002b3a0 <cmd_spec_restrict_file_names>:
   2b3a0:	endbr64 
   2b3a4:	push   r15
   2b3a6:	mov    r15,rsi
   2b3a9:	push   r14
   2b3ab:	push   r13
   2b3ad:	push   r12
   2b3af:	push   rbp
   2b3b0:	mov    rbp,rdi
   2b3b3:	push   rbx
   2b3b4:	sub    rsp,0x8
   2b3b8:	mov    ebx,DWORD PTR [rip+0x5eff2]        # 8a3b0 <opt+0x330>
   2b3be:	movzx  r14d,BYTE PTR [rip+0x5efee]        # 8a3b4 <opt+0x334>
   2b3c6:	mov    r12d,DWORD PTR [rip+0x5efeb]        # 8a3b8 <opt+0x338>
   2b3cd:	movzx  r13d,BYTE PTR [rip+0x5efe0]        # 8a3b5 <opt+0x335>
   2b3d5:	nop    DWORD PTR [rax]
   2b3d8:	mov    esi,0x2c
   2b3dd:	mov    rdi,r15
   2b3e0:	call   c6c0 <strchr@plt>
   2b3e5:	test   rax,rax
   2b3e8:	je     2b4e8 <cmd_spec_restrict_file_names+0x148>
   2b3ee:	mov    rdx,rax
   2b3f1:	sub    rdx,r15
   2b3f4:	cmp    rdx,0x4
   2b3f8:	je     2b488 <cmd_spec_restrict_file_names+0xe8>
   2b3fe:	cmp    rdx,0x3
   2b402:	je     2b500 <cmd_spec_restrict_file_names+0x160>
   2b408:	cmp    rdx,0x7
   2b40c:	je     2b528 <cmd_spec_restrict_file_names+0x188>
   2b412:	cmp    rdx,0x9
   2b416:	je     2b560 <cmd_spec_restrict_file_names+0x1c0>
   2b41c:	cmp    rdx,0x5
   2b420:	jne    2b42f <cmd_spec_restrict_file_names+0x8f>
   2b422:	cmp    DWORD PTR [r15],0x69637361
   2b429:	je     2b5a8 <cmd_spec_restrict_file_names+0x208>
   2b42f:	mov    rdi,r15
   2b432:	call   4b5b0 <quote>
   2b437:	mov    r12,QWORD PTR [rip+0x5efe2]        # 8a420 <exec_name>
   2b43e:	mov    edx,0x5
   2b443:	xor    edi,edi
   2b445:	lea    rsi,[rip+0x3cfdc]        # 68428 <primes.6089+0x2348>
   2b44c:	mov    rbx,rax
   2b44f:	call   c780 <dcgettext@plt>
   2b454:	mov    r9,rbx
   2b457:	mov    r8,rbp
   2b45a:	mov    rcx,r12
   2b45d:	mov    rdi,QWORD PTR [rip+0x5807c]        # 834e0 <stderr@@GLIBC_2.2.5>
   2b464:	mov    rdx,rax
   2b467:	mov    esi,0x1
   2b46c:	xor    eax,eax
   2b46e:	call   bfd0 <__fprintf_chk@plt>
   2b473:	add    rsp,0x8
   2b477:	xor    eax,eax
   2b479:	pop    rbx
   2b47a:	pop    rbp
   2b47b:	pop    r12
   2b47d:	pop    r13
   2b47f:	pop    r14
   2b481:	pop    r15
   2b483:	ret    
   2b484:	nop    DWORD PTR [rax+0x0]
   2b488:	cmp    DWORD PTR [r15],0x78696e75
   2b48f:	jne    2b42f <cmd_spec_restrict_file_names+0x8f>
   2b491:	xor    ebx,ebx
   2b493:	cmp    BYTE PTR [rax],0x0
   2b496:	je     2b4a6 <cmd_spec_restrict_file_names+0x106>
   2b498:	cmp    BYTE PTR [rax+0x1],0x0
   2b49c:	lea    r15,[rax+0x1]
   2b4a0:	jne    2b3d8 <cmd_spec_restrict_file_names+0x38>
   2b4a6:	mov    BYTE PTR [rip+0x5ef07],r14b        # 8a3b4 <opt+0x334>
   2b4ad:	mov    eax,0x1
   2b4b2:	mov    BYTE PTR [rip+0x5eefc],r13b        # 8a3b5 <opt+0x335>
   2b4b9:	mov    DWORD PTR [rip+0x5eef1],ebx        # 8a3b0 <opt+0x330>
   2b4bf:	mov    DWORD PTR [rip+0x5eef2],r12d        # 8a3b8 <opt+0x338>
   2b4c6:	and    BYTE PTR [rip+0x5eee7],0x1        # 8a3b4 <opt+0x334>
   2b4cd:	and    BYTE PTR [rip+0x5eee1],0x1        # 8a3b5 <opt+0x335>
   2b4d4:	add    rsp,0x8
   2b4d8:	pop    rbx
   2b4d9:	pop    rbp
   2b4da:	pop    r12
   2b4dc:	pop    r13
   2b4de:	pop    r14
   2b4e0:	pop    r15
   2b4e2:	ret    
   2b4e3:	nop    DWORD PTR [rax+rax*1+0x0]
   2b4e8:	mov    rdi,r15
   2b4eb:	call   c310 <strlen@plt>
   2b4f0:	add    rax,r15
   2b4f3:	jmp    2b3ee <cmd_spec_restrict_file_names+0x4e>
   2b4f8:	nop    DWORD PTR [rax+rax*1+0x0]
   2b500:	cmp    WORD PTR [r15],0x6d76
   2b506:	jne    2b42f <cmd_spec_restrict_file_names+0x8f>
   2b50c:	cmp    BYTE PTR [r15+0x2],0x73
   2b511:	jne    2b42f <cmd_spec_restrict_file_names+0x8f>
   2b517:	mov    ebx,0x1
   2b51c:	jmp    2b493 <cmd_spec_restrict_file_names+0xf3>
   2b521:	nop    DWORD PTR [rax+0x0]
   2b528:	cmp    DWORD PTR [r15],0x646e6977
   2b52f:	jne    2b42f <cmd_spec_restrict_file_names+0x8f>
   2b535:	cmp    WORD PTR [r15+0x4],0x776f
   2b53c:	jne    2b42f <cmd_spec_restrict_file_names+0x8f>
   2b542:	cmp    BYTE PTR [r15+0x6],0x73
   2b547:	jne    2b42f <cmd_spec_restrict_file_names+0x8f>
   2b54d:	mov    ebx,0x2
   2b552:	jmp    2b493 <cmd_spec_restrict_file_names+0xf3>
   2b557:	nop    WORD PTR [rax+rax*1+0x0]
   2b560:	movabs rcx,0x7361637265776f6c
   2b56a:	cmp    QWORD PTR [r15],rcx
   2b56d:	je     2b5c0 <cmd_spec_restrict_file_names+0x220>
   2b56f:	movabs rcx,0x7361637265707075
   2b579:	cmp    QWORD PTR [r15],rcx
   2b57c:	je     2b5d8 <cmd_spec_restrict_file_names+0x238>
   2b57e:	movabs rcx,0x6f72746e6f636f6e
   2b588:	cmp    QWORD PTR [r15],rcx
   2b58b:	jne    2b42f <cmd_spec_restrict_file_names+0x8f>
   2b591:	cmp    BYTE PTR [r15+0x8],0x6c
   2b596:	jne    2b42f <cmd_spec_restrict_file_names+0x8f>
   2b59c:	xor    r14d,r14d
   2b59f:	jmp    2b493 <cmd_spec_restrict_file_names+0xf3>
   2b5a4:	nop    DWORD PTR [rax+0x0]
   2b5a8:	cmp    BYTE PTR [r15+0x4],0x69
   2b5ad:	jne    2b42f <cmd_spec_restrict_file_names+0x8f>
   2b5b3:	mov    r13d,0x1
   2b5b9:	jmp    2b493 <cmd_spec_restrict_file_names+0xf3>
   2b5be:	xchg   ax,ax
   2b5c0:	cmp    BYTE PTR [r15+0x8],0x65
   2b5c5:	jne    2b56f <cmd_spec_restrict_file_names+0x1cf>
   2b5c7:	mov    r12d,0x1
   2b5cd:	jmp    2b493 <cmd_spec_restrict_file_names+0xf3>
   2b5d2:	nop    WORD PTR [rax+rax*1+0x0]
   2b5d8:	cmp    BYTE PTR [r15+0x8],0x65
   2b5dd:	jne    2b57e <cmd_spec_restrict_file_names+0x1de>
   2b5df:	mov    r12d,0x2
   2b5e5:	jmp    2b493 <cmd_spec_restrict_file_names+0xf3>
   2b5ea:	nop    WORD PTR [rax+rax*1+0x0]

000000000002b5f0 <parse_bytes_helper>:
   2b5f0:	push   rbp
   2b5f1:	mov    rbp,rdi
   2b5f4:	mov    ecx,0x4
   2b5f9:	lea    rdi,[rip+0x3c5b5]        # 67bb5 <primes.6089+0x1ad5>
   2b600:	push   rbx
   2b601:	mov    rbx,rsi
   2b604:	mov    rsi,rbp
   2b607:	sub    rsp,0x18
   2b60b:	mov    rax,QWORD PTR fs:0x28
   2b614:	mov    QWORD PTR [rsp+0x8],rax
   2b619:	xor    eax,eax
   2b61b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2b61d:	seta   al
   2b620:	sbb    al,0x0
   2b622:	test   al,al
   2b624:	je     2b780 <parse_bytes_helper+0x190>
   2b62a:	mov    rdi,rbp
   2b62d:	call   c310 <strlen@plt>
   2b632:	lea    rsi,[rbp+rax*1+0x0]
   2b637:	cmp    rbp,rsi
   2b63a:	jae    2b650 <parse_bytes_helper+0x60>
   2b63c:	movzx  eax,BYTE PTR [rsi-0x1]
   2b640:	cmp    al,0xd
   2b642:	jg     2b760 <parse_bytes_helper+0x170>
   2b648:	cmp    al,0x8
   2b64a:	jg     2b768 <parse_bytes_helper+0x178>
   2b650:	cmp    rbp,rsi
   2b653:	je     2b720 <parse_bytes_helper+0x130>
   2b659:	movsx  eax,BYTE PTR [rsi-0x1]
   2b65d:	lea    ecx,[rax-0x41]
   2b660:	lea    edx,[rax+0x20]
   2b663:	cmp    ecx,0x1a
   2b666:	cmovb  eax,edx
   2b669:	cmp    eax,0x6d
   2b66c:	je     2b7b8 <parse_bytes_helper+0x1c8>
   2b672:	jg     2b6f0 <parse_bytes_helper+0x100>
   2b674:	cmp    eax,0x67
   2b677:	je     2b790 <parse_bytes_helper+0x1a0>
   2b67d:	cmp    eax,0x6b
   2b680:	jne    2b7a8 <parse_bytes_helper+0x1b8>
   2b686:	movsd  xmm5,QWORD PTR [rip+0x3d16a]        # 687f8 <primes.6089+0x2718>
   2b68e:	sub    rsi,0x1
   2b692:	nop    WORD PTR [rax+rax*1+0x0]
   2b698:	cmp    rbp,rsi
   2b69b:	jae    2b6c2 <parse_bytes_helper+0xd2>
   2b69d:	movzx  eax,BYTE PTR [rbp+0x0]
   2b6a1:	cmp    al,0xd
   2b6a3:	jg     2b710 <parse_bytes_helper+0x120>
   2b6a5:	cmp    al,0x8
   2b6a7:	jg     2b714 <parse_bytes_helper+0x124>
   2b6a9:	cmp    rsi,rbp
   2b6ac:	jbe    2b6c2 <parse_bytes_helper+0xd2>
   2b6ae:	movzx  eax,BYTE PTR [rsi-0x1]
   2b6b2:	cmp    al,0xd
   2b6b4:	jg     2b740 <parse_bytes_helper+0x150>
   2b6ba:	cmp    al,0x8
   2b6bc:	jg     2b748 <parse_bytes_helper+0x158>
   2b6c2:	cmp    rbp,rsi
   2b6c5:	je     2b720 <parse_bytes_helper+0x130>
   2b6c7:	mov    rdx,rsp
   2b6ca:	mov    rdi,rbp
   2b6cd:	call   2a7c0 <simple_atof>
   2b6d2:	test   al,al
   2b6d4:	je     2b720 <parse_bytes_helper+0x130>
   2b6d6:	movsd  xmm0,QWORD PTR [rsp]
   2b6db:	pxor   xmm1,xmm1
   2b6df:	comisd xmm1,xmm0
   2b6e3:	ja     2b720 <parse_bytes_helper+0x130>
   2b6e5:	mulsd  xmm0,xmm5
   2b6e9:	movsd  QWORD PTR [rbx],xmm0
   2b6ed:	jmp    2b722 <parse_bytes_helper+0x132>
   2b6ef:	nop
   2b6f0:	cmp    eax,0x74
   2b6f3:	jne    2b7a8 <parse_bytes_helper+0x1b8>
   2b6f9:	movsd  xmm5,QWORD PTR [rip+0x3d0ff]        # 68800 <primes.6089+0x2720>
   2b701:	sub    rsi,0x1
   2b705:	jmp    2b698 <parse_bytes_helper+0xa8>
   2b707:	nop    WORD PTR [rax+rax*1+0x0]
   2b710:	cmp    al,0x20
   2b712:	jne    2b6a9 <parse_bytes_helper+0xb9>
   2b714:	add    rbp,0x1
   2b718:	cmp    rbp,rsi
   2b71b:	jne    2b69d <parse_bytes_helper+0xad>
   2b71d:	nop    DWORD PTR [rax]
   2b720:	xor    eax,eax
   2b722:	mov    rbx,QWORD PTR [rsp+0x8]
   2b727:	xor    rbx,QWORD PTR fs:0x28
   2b730:	jne    2b7c9 <parse_bytes_helper+0x1d9>
   2b736:	add    rsp,0x18
   2b73a:	pop    rbx
   2b73b:	pop    rbp
   2b73c:	ret    
   2b73d:	nop    DWORD PTR [rax]
   2b740:	cmp    al,0x20
   2b742:	jne    2b6c2 <parse_bytes_helper+0xd2>
   2b748:	sub    rsi,0x1
   2b74c:	cmp    rsi,rbp
   2b74f:	jne    2b6ae <parse_bytes_helper+0xbe>
   2b755:	jmp    2b720 <parse_bytes_helper+0x130>
   2b757:	nop    WORD PTR [rax+rax*1+0x0]
   2b760:	cmp    al,0x20
   2b762:	jne    2b650 <parse_bytes_helper+0x60>
   2b768:	sub    rsi,0x1
   2b76c:	cmp    rbp,rsi
   2b76f:	jne    2b63c <parse_bytes_helper+0x4c>
   2b775:	jmp    2b720 <parse_bytes_helper+0x130>
   2b777:	nop    WORD PTR [rax+rax*1+0x0]
   2b780:	mov    QWORD PTR [rbx],0x0
   2b787:	mov    eax,0x1
   2b78c:	jmp    2b722 <parse_bytes_helper+0x132>
   2b78e:	xchg   ax,ax
   2b790:	movsd  xmm5,QWORD PTR [rip+0x3d058]        # 687f0 <primes.6089+0x2710>
   2b798:	sub    rsi,0x1
   2b79c:	jmp    2b698 <parse_bytes_helper+0xa8>
   2b7a1:	nop    DWORD PTR [rax+0x0]
   2b7a8:	movsd  xmm5,QWORD PTR [rip+0x30030]        # 5b7e0 <_IO_stdin_used+0x7e0>
   2b7b0:	jmp    2b698 <parse_bytes_helper+0xa8>
   2b7b5:	nop    DWORD PTR [rax]
   2b7b8:	movsd  xmm5,QWORD PTR [rip+0x3d028]        # 687e8 <primes.6089+0x2708>
   2b7c0:	sub    rsi,0x1
   2b7c4:	jmp    2b698 <parse_bytes_helper+0xa8>
   2b7c9:	call   c7b0 <__stack_chk_fail@plt>
   2b7ce:	xchg   ax,ax

000000000002b7d0 <cmd_boolean_internal.isra.0>:
   2b7d0:	movsx  eax,BYTE PTR [rdi]
   2b7d3:	lea    ecx,[rax-0x41]
   2b7d6:	lea    edx,[rax+0x20]
   2b7d9:	cmp    ecx,0x1a
   2b7dc:	cmovb  eax,edx
   2b7df:	cmp    eax,0x6f
   2b7e2:	je     2b850 <cmd_boolean_internal.isra.0+0x80>
   2b7e4:	cmp    eax,0x79
   2b7e7:	je     2b800 <cmd_boolean_internal.isra.0+0x30>
   2b7e9:	cmp    eax,0x31
   2b7ec:	jne    2b820 <cmd_boolean_internal.isra.0+0x50>
   2b7ee:	cmp    BYTE PTR [rdi+0x1],0x1
   2b7f2:	sbb    eax,eax
   2b7f4:	and    eax,0x2
   2b7f7:	sub    eax,0x1
   2b7fa:	ret    
   2b7fb:	nop    DWORD PTR [rax+rax*1+0x0]
   2b800:	movsx  edx,BYTE PTR [rdi+0x1]
   2b804:	lea    ecx,[rdx-0x41]
   2b807:	lea    eax,[rdx+0x20]
   2b80a:	cmp    ecx,0x1a
   2b80d:	cmovb  edx,eax
   2b810:	mov    eax,0xffffffff
   2b815:	cmp    edx,0x65
   2b818:	je     2b8a8 <cmd_boolean_internal.isra.0+0xd8>
   2b81e:	ret    
   2b81f:	nop
   2b820:	cmp    eax,0x6e
   2b823:	jne    2b890 <cmd_boolean_internal.isra.0+0xc0>
   2b825:	movsx  edx,BYTE PTR [rdi+0x1]
   2b829:	lea    ecx,[rdx-0x41]
   2b82c:	lea    eax,[rdx+0x20]
   2b82f:	cmp    ecx,0x1a
   2b832:	cmovb  edx,eax
   2b835:	mov    eax,0xffffffff
   2b83a:	cmp    edx,0x6f
   2b83d:	jne    2b81e <cmd_boolean_internal.isra.0+0x4e>
   2b83f:	xor    eax,eax
   2b841:	cmp    BYTE PTR [rdi+0x2],0x0
   2b845:	setne  al
   2b848:	neg    eax
   2b84a:	ret    
   2b84b:	nop    DWORD PTR [rax+rax*1+0x0]
   2b850:	movsx  edx,BYTE PTR [rdi+0x1]
   2b854:	lea    ecx,[rdx-0x41]
   2b857:	lea    eax,[rdx+0x20]
   2b85a:	cmp    ecx,0x1a
   2b85d:	cmovb  edx,eax
   2b860:	cmp    edx,0x6e
   2b863:	je     2b8d0 <cmd_boolean_internal.isra.0+0x100>
   2b865:	mov    eax,0xffffffff
   2b86a:	cmp    edx,0x66
   2b86d:	jne    2b81e <cmd_boolean_internal.isra.0+0x4e>
   2b86f:	movsx  edx,BYTE PTR [rdi+0x2]
   2b873:	lea    esi,[rdx-0x41]
   2b876:	lea    ecx,[rdx+0x20]
   2b879:	cmp    esi,0x1a
   2b87c:	cmovb  edx,ecx
   2b87f:	cmp    edx,0x66
   2b882:	jne    2b81e <cmd_boolean_internal.isra.0+0x4e>
   2b884:	xor    eax,eax
   2b886:	cmp    BYTE PTR [rdi+0x3],0x0
   2b88a:	setne  al
   2b88d:	neg    eax
   2b88f:	ret    
   2b890:	cmp    eax,0x30
   2b893:	jne    2b8dd <cmd_boolean_internal.isra.0+0x10d>
   2b895:	xor    eax,eax
   2b897:	cmp    BYTE PTR [rdi+0x1],0x0
   2b89b:	setne  al
   2b89e:	neg    eax
   2b8a0:	ret    
   2b8a1:	nop    DWORD PTR [rax+0x0]
   2b8a8:	movsx  edx,BYTE PTR [rdi+0x2]
   2b8ac:	lea    esi,[rdx-0x41]
   2b8af:	lea    ecx,[rdx+0x20]
   2b8b2:	cmp    esi,0x1a
   2b8b5:	cmovb  edx,ecx
   2b8b8:	cmp    edx,0x73
   2b8bb:	jne    2b81e <cmd_boolean_internal.isra.0+0x4e>
   2b8c1:	cmp    BYTE PTR [rdi+0x3],0x1
   2b8c5:	sbb    eax,eax
   2b8c7:	and    eax,0x2
   2b8ca:	sub    eax,0x1
   2b8cd:	ret    
   2b8ce:	xchg   ax,ax
   2b8d0:	cmp    BYTE PTR [rdi+0x2],0x1
   2b8d4:	sbb    eax,eax
   2b8d6:	and    eax,0x2
   2b8d9:	sub    eax,0x1
   2b8dc:	ret    
   2b8dd:	or     eax,0xffffffff
   2b8e0:	ret    
   2b8e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2b8ec:	nop    DWORD PTR [rax+0x0]

000000000002b8f0 <cmd_file_once>:
   2b8f0:	endbr64 
   2b8f4:	push   r12
   2b8f6:	push   rbp
   2b8f7:	push   rbx
   2b8f8:	cmp    QWORD PTR [rdx],0x0
   2b8fc:	je     2b940 <cmd_file_once+0x50>
   2b8fe:	mov    r12,QWORD PTR [rip+0x5eb1b]        # 8a420 <exec_name>
   2b905:	mov    rbp,rdi
   2b908:	xor    edi,edi
   2b90a:	mov    edx,0x5
   2b90f:	lea    rsi,[rip+0x3cb7a]        # 68490 <primes.6089+0x23b0>
   2b916:	call   c780 <dcgettext@plt>
   2b91b:	mov    r8,rbp
   2b91e:	mov    rcx,r12
   2b921:	mov    esi,0x1
   2b926:	mov    rdi,QWORD PTR [rip+0x57bb3]        # 834e0 <stderr@@GLIBC_2.2.5>
   2b92d:	mov    rdx,rax
   2b930:	xor    eax,eax
   2b932:	call   bfd0 <__fprintf_chk@plt>
   2b937:	pop    rbx
   2b938:	xor    eax,eax
   2b93a:	pop    rbp
   2b93b:	pop    r12
   2b93d:	ret    
   2b93e:	xchg   ax,ax
   2b940:	mov    rbx,rdx
   2b943:	xor    edi,edi
   2b945:	mov    r12,rsi
   2b948:	call   4bdc0 <rpl_free>
   2b94d:	mov    QWORD PTR [rbx],0x0
   2b954:	mov    rdi,r12
   2b957:	call   4ba50 <xstrdup>
   2b95c:	mov    QWORD PTR [rbx],rax
   2b95f:	mov    eax,0x1
   2b964:	pop    rbx
   2b965:	pop    rbp
   2b966:	pop    r12
   2b968:	ret    
   2b969:	nop    DWORD PTR [rax+0x0]

000000000002b970 <cmd_boolean>:
   2b970:	endbr64 
   2b974:	push   r12
   2b976:	mov    r8,rdx
   2b979:	push   rbp
   2b97a:	push   rbx
   2b97b:	mov    rbx,rdi
   2b97e:	mov    rdi,rsi
   2b981:	call   2b7d0 <cmd_boolean_internal.isra.0>
   2b986:	test   eax,eax
   2b988:	je     2b9f8 <cmd_boolean+0x88>
   2b98a:	cmp    eax,0x1
   2b98d:	je     2b9e0 <cmd_boolean+0x70>
   2b98f:	call   4b5b0 <quote>
   2b994:	mov    r12,QWORD PTR [rip+0x5ea85]        # 8a420 <exec_name>
   2b99b:	mov    edx,0x5
   2b9a0:	xor    edi,edi
   2b9a2:	lea    rsi,[rip+0x3cb07]        # 684b0 <primes.6089+0x23d0>
   2b9a9:	mov    rbp,rax
   2b9ac:	call   c780 <dcgettext@plt>
   2b9b1:	mov    r9,rbp
   2b9b4:	mov    r8,rbx
   2b9b7:	mov    rcx,r12
   2b9ba:	mov    rdi,QWORD PTR [rip+0x57b1f]        # 834e0 <stderr@@GLIBC_2.2.5>
   2b9c1:	mov    rdx,rax
   2b9c4:	mov    esi,0x1
   2b9c9:	xor    eax,eax
   2b9cb:	call   bfd0 <__fprintf_chk@plt>
   2b9d0:	pop    rbx
   2b9d1:	xor    eax,eax
   2b9d3:	pop    rbp
   2b9d4:	pop    r12
   2b9d6:	ret    
   2b9d7:	nop    WORD PTR [rax+rax*1+0x0]
   2b9e0:	mov    eax,0x1
   2b9e5:	mov    BYTE PTR [r8],al
   2b9e8:	mov    eax,0x1
   2b9ed:	pop    rbx
   2b9ee:	pop    rbp
   2b9ef:	pop    r12
   2b9f1:	ret    
   2b9f2:	nop    WORD PTR [rax+rax*1+0x0]
   2b9f8:	xor    eax,eax
   2b9fa:	jmp    2b9e5 <cmd_boolean+0x75>
   2b9fc:	nop    DWORD PTR [rax+0x0]

000000000002ba00 <cmd_spec_verbose>:
   2ba00:	endbr64 
   2ba04:	sub    rsp,0x18
   2ba08:	mov    rax,QWORD PTR fs:0x28
   2ba11:	mov    QWORD PTR [rsp+0x8],rax
   2ba16:	xor    eax,eax
   2ba18:	lea    rdx,[rsp+0x7]
   2ba1d:	call   2b970 <cmd_boolean>
   2ba22:	test   al,al
   2ba24:	je     2ba3b <cmd_spec_verbose+0x3b>
   2ba26:	mov    DWORD PTR [rip+0x5e828],0xffffffff        # 8a258 <opt+0x1d8>
   2ba30:	movzx  edx,BYTE PTR [rsp+0x7]
   2ba35:	mov    DWORD PTR [rip+0x5e645],edx        # 8a080 <opt>
   2ba3b:	mov    rcx,QWORD PTR [rsp+0x8]
   2ba40:	xor    rcx,QWORD PTR fs:0x28
   2ba49:	jne    2ba50 <cmd_spec_verbose+0x50>
   2ba4b:	add    rsp,0x18
   2ba4f:	ret    
   2ba50:	call   c7b0 <__stack_chk_fail@plt>
   2ba55:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000002ba60 <cmd_spec_progressdisp>:
   2ba60:	endbr64 
   2ba64:	sub    rsp,0x18
   2ba68:	mov    rax,QWORD PTR fs:0x28
   2ba71:	mov    QWORD PTR [rsp+0x8],rax
   2ba76:	xor    eax,eax
   2ba78:	lea    rdx,[rsp+0x7]
   2ba7d:	call   2b970 <cmd_boolean>
   2ba82:	test   al,al
   2ba84:	je     2ba91 <cmd_spec_progressdisp+0x31>
   2ba86:	movzx  edx,BYTE PTR [rsp+0x7]
   2ba8b:	mov    DWORD PTR [rip+0x5e7c7],edx        # 8a258 <opt+0x1d8>
   2ba91:	mov    rcx,QWORD PTR [rsp+0x8]
   2ba96:	xor    rcx,QWORD PTR fs:0x28
   2ba9f:	jne    2baa6 <cmd_spec_progressdisp+0x46>
   2baa1:	add    rsp,0x18
   2baa5:	ret    
   2baa6:	call   c7b0 <__stack_chk_fail@plt>
   2baab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002bab0 <cmd_spec_recursive>:
   2bab0:	endbr64 
   2bab4:	sub    rsp,0x8
   2bab8:	lea    rdx,[rip+0x5e5db]        # 8a09a <opt+0x1a>
   2babf:	call   2b970 <cmd_boolean>
   2bac4:	test   al,al
   2bac6:	je     2bae7 <cmd_spec_recursive+0x37>
   2bac8:	movzx  edx,BYTE PTR [rip+0x5e5cb]        # 8a09a <opt+0x1a>
   2bacf:	test   dl,dl
   2bad1:	je     2bae7 <cmd_spec_recursive+0x37>
   2bad3:	movzx  eax,BYTE PTR [rip+0x5e5cf]        # 8a0a9 <opt+0x29>
   2bada:	test   al,al
   2badc:	jne    2bae7 <cmd_spec_recursive+0x37>
   2bade:	mov    BYTE PTR [rip+0x5e5c3],0x1        # 8a0a8 <opt+0x28>
   2bae5:	mov    eax,edx
   2bae7:	add    rsp,0x8
   2baeb:	ret    
   2baec:	nop    DWORD PTR [rax+0x0]

000000000002baf0 <cmd_spec_mirror>:
   2baf0:	endbr64 
   2baf4:	sub    rsp,0x18
   2baf8:	mov    rax,QWORD PTR fs:0x28
   2bb01:	mov    QWORD PTR [rsp+0x8],rax
   2bb06:	xor    eax,eax
   2bb08:	lea    rdx,[rsp+0x7]
   2bb0d:	call   2b970 <cmd_boolean>
   2bb12:	test   al,al
   2bb14:	je     2bb1f <cmd_spec_mirror+0x2f>
   2bb16:	movzx  edx,BYTE PTR [rsp+0x7]
   2bb1b:	test   dl,dl
   2bb1d:	jne    2bb38 <cmd_spec_mirror+0x48>
   2bb1f:	mov    rcx,QWORD PTR [rsp+0x8]
   2bb24:	xor    rcx,QWORD PTR fs:0x28
   2bb2d:	jne    2bb6b <cmd_spec_mirror+0x7b>
   2bb2f:	add    rsp,0x18
   2bb33:	ret    
   2bb34:	nop    DWORD PTR [rax+0x0]
   2bb38:	cmp    BYTE PTR [rip+0x5e56a],0x0        # 8a0a9 <opt+0x29>
   2bb3f:	mov    BYTE PTR [rip+0x5e554],0x1        # 8a09a <opt+0x1a>
   2bb46:	jne    2bb4f <cmd_spec_mirror+0x5f>
   2bb48:	mov    BYTE PTR [rip+0x5e559],0x1        # 8a0a8 <opt+0x28>
   2bb4f:	mov    BYTE PTR [rip+0x5e766],0x1        # 8a2bc <opt+0x23c>
   2bb56:	mov    eax,edx
   2bb58:	mov    DWORD PTR [rip+0x5e542],0xffffffff        # 8a0a4 <opt+0x24>
   2bb62:	mov    BYTE PTR [rip+0x5e771],0x0        # 8a2da <opt+0x25a>
   2bb69:	jmp    2bb1f <cmd_spec_mirror+0x2f>
   2bb6b:	call   c7b0 <__stack_chk_fail@plt>

000000000002bb70 <cmd_spec_htmlify>:
   2bb70:	endbr64 
   2bb74:	sub    rsp,0x8
   2bb78:	lea    rdx,[rip+0x5e75c]        # 8a2db <opt+0x25b>
   2bb7f:	call   2b970 <cmd_boolean>
   2bb84:	test   al,al
   2bb86:	je     2bb98 <cmd_spec_htmlify+0x28>
   2bb88:	cmp    BYTE PTR [rip+0x5e74c],0x0        # 8a2db <opt+0x25b>
   2bb8f:	jne    2bb98 <cmd_spec_htmlify+0x28>
   2bb91:	mov    BYTE PTR [rip+0x5e742],0x0        # 8a2da <opt+0x25a>
   2bb98:	add    rsp,0x8
   2bb9c:	ret    
   2bb9d:	nop    DWORD PTR [rax]

000000000002bba0 <cmd_spec_dirstruct>:
   2bba0:	endbr64 
   2bba4:	sub    rsp,0x8
   2bba8:	lea    rdx,[rip+0x5e4f9]        # 8a0a8 <opt+0x28>
   2bbaf:	call   2b970 <cmd_boolean>
   2bbb4:	test   al,al
   2bbb6:	je     2bbcc <cmd_spec_dirstruct+0x2c>
   2bbb8:	movzx  edx,BYTE PTR [rip+0x5e4e9]        # 8a0a8 <opt+0x28>
   2bbbf:	test   dl,dl
   2bbc1:	je     2bbd8 <cmd_spec_dirstruct+0x38>
   2bbc3:	mov    BYTE PTR [rip+0x5e4df],0x0        # 8a0a9 <opt+0x29>
   2bbca:	mov    eax,edx
   2bbcc:	add    rsp,0x8
   2bbd0:	ret    
   2bbd1:	nop    DWORD PTR [rax+0x0]
   2bbd8:	mov    BYTE PTR [rip+0x5e4ca],0x1        # 8a0a9 <opt+0x29>
   2bbdf:	add    rsp,0x8
   2bbe3:	ret    
   2bbe4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2bbef:	nop

000000000002bbf0 <cmd_cert_type.part.0>:
   2bbf0:	push   r12
   2bbf2:	push   rbp
   2bbf3:	push   rbx
   2bbf4:	mov    rbx,rdi
   2bbf7:	mov    rdi,rsi
   2bbfa:	call   4b5b0 <quote>
   2bbff:	mov    r12,QWORD PTR [rip+0x5e81a]        # 8a420 <exec_name>
   2bc06:	mov    edx,0x5
   2bc0b:	xor    edi,edi
   2bc0d:	lea    rsi,[rip+0x3bf51]        # 67b65 <primes.6089+0x1a85>
   2bc14:	mov    rbp,rax
   2bc17:	call   c780 <dcgettext@plt>
   2bc1c:	mov    r9,rbp
   2bc1f:	mov    r8,rbx
   2bc22:	mov    rcx,r12
   2bc25:	mov    rdi,QWORD PTR [rip+0x578b4]        # 834e0 <stderr@@GLIBC_2.2.5>
   2bc2c:	pop    rbx
   2bc2d:	mov    rdx,rax
   2bc30:	mov    esi,0x1
   2bc35:	pop    rbp
   2bc36:	xor    eax,eax
   2bc38:	pop    r12
   2bc3a:	jmp    bfd0 <__fprintf_chk@plt>
   2bc3f:	nop

000000000002bc40 <cmd_spec_secure_protocol>:
   2bc40:	endbr64 
   2bc44:	push   r13
   2bc46:	mov    rcx,rdx
   2bc49:	mov    r13,rdi
   2bc4c:	mov    edx,0x8
   2bc51:	push   rbp
   2bc52:	mov    rbp,rsi
   2bc55:	lea    rsi,[rip+0x51324]        # 7cf80 <choices.9274>
   2bc5c:	mov    rdi,rbp
   2bc5f:	sub    rsp,0x18
   2bc63:	call   2b100 <decode_string>
   2bc68:	test   al,al
   2bc6a:	je     2bc78 <cmd_spec_secure_protocol+0x38>
   2bc6c:	add    rsp,0x18
   2bc70:	pop    rbp
   2bc71:	pop    r13
   2bc73:	ret    
   2bc74:	nop    DWORD PTR [rax+0x0]
   2bc78:	mov    rsi,rbp
   2bc7b:	mov    rdi,r13
   2bc7e:	mov    BYTE PTR [rsp+0xf],al
   2bc82:	call   2bbf0 <cmd_cert_type.part.0>
   2bc87:	movzx  eax,BYTE PTR [rsp+0xf]
   2bc8c:	add    rsp,0x18
   2bc90:	pop    rbp
   2bc91:	pop    r13
   2bc93:	ret    
   2bc94:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2bc9f:	nop

000000000002bca0 <cmd_cert_type>:
   2bca0:	endbr64 
   2bca4:	push   r13
   2bca6:	mov    rcx,rdx
   2bca9:	mov    r13,rdi
   2bcac:	mov    edx,0x3
   2bcb1:	push   rbp
   2bcb2:	mov    rbp,rsi
   2bcb5:	lea    rsi,[rip+0x51244]        # 7cf00 <choices.9195>
   2bcbc:	mov    rdi,rbp
   2bcbf:	sub    rsp,0x18
   2bcc3:	call   2b100 <decode_string>
   2bcc8:	test   al,al
   2bcca:	je     2bcd8 <cmd_cert_type+0x38>
   2bccc:	add    rsp,0x18
   2bcd0:	pop    rbp
   2bcd1:	pop    r13
   2bcd3:	ret    
   2bcd4:	nop    DWORD PTR [rax+0x0]
   2bcd8:	mov    rsi,rbp
   2bcdb:	mov    rdi,r13
   2bcde:	mov    BYTE PTR [rsp+0xf],al
   2bce2:	call   2bbf0 <cmd_cert_type.part.0>
   2bce7:	movzx  eax,BYTE PTR [rsp+0xf]
   2bcec:	add    rsp,0x18
   2bcf0:	pop    rbp
   2bcf1:	pop    r13
   2bcf3:	ret    
   2bcf4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2bcff:	nop

000000000002bd00 <cmd_check_cert>:
   2bd00:	endbr64 
   2bd04:	push   r12
   2bd06:	mov    r12,rdx
   2bd09:	push   rbp
   2bd0a:	mov    rbp,rsi
   2bd0d:	push   rbx
   2bd0e:	mov    rbx,rdi
   2bd11:	mov    rdi,rsi
   2bd14:	call   2b7d0 <cmd_boolean_internal.isra.0>
   2bd19:	test   eax,eax
   2bd1b:	je     2bd3b <cmd_check_cert+0x3b>
   2bd1d:	cmp    eax,0x1
   2bd20:	je     2bd3b <cmd_check_cert+0x3b>
   2bd22:	lea    rsi,[rip+0x3be90]        # 67bb9 <primes.6089+0x1ad9>
   2bd29:	call   43340 <c_strcasecmp>
   2bd2e:	mov    r8d,eax
   2bd31:	mov    eax,0x2
   2bd36:	test   r8d,r8d
   2bd39:	jne    2bd50 <cmd_check_cert+0x50>
   2bd3b:	mov    DWORD PTR [r12],eax
   2bd3f:	mov    eax,0x1
   2bd44:	pop    rbx
   2bd45:	pop    rbp
   2bd46:	pop    r12
   2bd48:	ret    
   2bd49:	nop    DWORD PTR [rax+0x0]
   2bd50:	mov    rdi,rbp
   2bd53:	call   4b5b0 <quote>
   2bd58:	mov    r12,QWORD PTR [rip+0x5e6c1]        # 8a420 <exec_name>
   2bd5f:	mov    edx,0x5
   2bd64:	xor    edi,edi
   2bd66:	lea    rsi,[rip+0x3c773]        # 684e0 <primes.6089+0x2400>
   2bd6d:	mov    rbp,rax
   2bd70:	call   c780 <dcgettext@plt>
   2bd75:	mov    r9,rbp
   2bd78:	mov    r8,rbx
   2bd7b:	mov    rcx,r12
   2bd7e:	mov    rdi,QWORD PTR [rip+0x5775b]        # 834e0 <stderr@@GLIBC_2.2.5>
   2bd85:	mov    rdx,rax
   2bd88:	mov    esi,0x1
   2bd8d:	xor    eax,eax
   2bd8f:	call   bfd0 <__fprintf_chk@plt>
   2bd94:	xor    eax,eax
   2bd96:	jmp    2bd44 <cmd_check_cert+0x44>
   2bd98:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002bda0 <check_user_specified_header>:
   2bda0:	movzx  edx,BYTE PTR [rdi]
   2bda3:	cmp    dl,0x3a
   2bda6:	setne  al
   2bda9:	test   dl,dl
   2bdab:	setne  cl
   2bdae:	and    al,cl
   2bdb0:	je     2be10 <check_user_specified_header+0x70>
   2bdb2:	mov    rcx,rdi
   2bdb5:	cmp    dl,0xd
   2bdb8:	jg     2be00 <check_user_specified_header+0x60>
   2bdba:	cmp    dl,0x8
   2bdbd:	jg     2be05 <check_user_specified_header+0x65>
   2bdbf:	movzx  edx,BYTE PTR [rcx+0x1]
   2bdc3:	add    rcx,0x1
   2bdc7:	cmp    dl,0x3a
   2bdca:	setne  sil
   2bdce:	test   dl,dl
   2bdd0:	setne  al
   2bdd3:	and    al,sil
   2bdd6:	jne    2bdb5 <check_user_specified_header+0x15>
   2bdd8:	cmp    rdi,rcx
   2bddb:	je     2be10 <check_user_specified_header+0x70>
   2bddd:	test   sil,sil
   2bde0:	jne    2be10 <check_user_specified_header+0x70>
   2bde2:	sub    rsp,0x8
   2bde6:	mov    esi,0xa
   2bdeb:	call   c6c0 <strchr@plt>
   2bdf0:	test   rax,rax
   2bdf3:	sete   al
   2bdf6:	add    rsp,0x8
   2bdfa:	ret    
   2bdfb:	nop    DWORD PTR [rax+rax*1+0x0]
   2be00:	cmp    dl,0x20
   2be03:	jne    2bdbf <check_user_specified_header+0x1f>
   2be05:	xor    eax,eax
   2be07:	ret    
   2be08:	nop    DWORD PTR [rax+rax*1+0x0]
   2be10:	ret    
   2be11:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2be1c:	nop    DWORD PTR [rax+0x0]

000000000002be20 <cmd_spec_warc_header>:
   2be20:	endbr64 
   2be24:	push   r13
   2be26:	push   r12
   2be28:	push   rbp
   2be29:	push   rbx
   2be2a:	sub    rsp,0x8
   2be2e:	cmp    BYTE PTR [rsi],0x0
   2be31:	je     2bec8 <cmd_spec_warc_header+0xa8>
   2be37:	mov    rbx,rdi
   2be3a:	mov    rdi,rsi
   2be3d:	mov    rbp,rsi
   2be40:	call   2bda0 <check_user_specified_header>
   2be45:	mov    r12d,eax
   2be48:	test   al,al
   2be4a:	je     2be70 <cmd_spec_warc_header+0x50>
   2be4c:	mov    rdi,QWORD PTR [rip+0x5e35d]        # 8a1b0 <opt+0x130>
   2be53:	mov    rsi,rbp
   2be56:	call   3cb90 <vec_append>
   2be5b:	mov    QWORD PTR [rip+0x5e34e],rax        # 8a1b0 <opt+0x130>
   2be62:	add    rsp,0x8
   2be66:	mov    eax,r12d
   2be69:	pop    rbx
   2be6a:	pop    rbp
   2be6b:	pop    r12
   2be6d:	pop    r13
   2be6f:	ret    
   2be70:	mov    rdi,rbp
   2be73:	call   4b5b0 <quote>
   2be78:	mov    r13,QWORD PTR [rip+0x5e5a1]        # 8a420 <exec_name>
   2be7f:	mov    edx,0x5
   2be84:	xor    edi,edi
   2be86:	lea    rsi,[rip+0x3c68b]        # 68518 <primes.6089+0x2438>
   2be8d:	mov    rbp,rax
   2be90:	call   c780 <dcgettext@plt>
   2be95:	mov    r9,rbp
   2be98:	mov    r8,rbx
   2be9b:	mov    rcx,r13
   2be9e:	mov    rdi,QWORD PTR [rip+0x5763b]        # 834e0 <stderr@@GLIBC_2.2.5>
   2bea5:	mov    rdx,rax
   2bea8:	mov    esi,0x1
   2bead:	xor    eax,eax
   2beaf:	call   bfd0 <__fprintf_chk@plt>
   2beb4:	add    rsp,0x8
   2beb8:	mov    eax,r12d
   2bebb:	pop    rbx
   2bebc:	pop    rbp
   2bebd:	pop    r12
   2bebf:	pop    r13
   2bec1:	ret    
   2bec2:	nop    WORD PTR [rax+rax*1+0x0]
   2bec8:	mov    rdi,QWORD PTR [rip+0x5e2e1]        # 8a1b0 <opt+0x130>
   2becf:	mov    r12d,0x1
   2bed5:	call   3ca60 <free_vec>
   2beda:	mov    eax,r12d
   2bedd:	mov    QWORD PTR [rip+0x5e2c8],0x0        # 8a1b0 <opt+0x130>
   2bee8:	add    rsp,0x8
   2beec:	pop    rbx
   2beed:	pop    rbp
   2beee:	pop    r12
   2bef0:	pop    r13
   2bef2:	ret    
   2bef3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2befe:	xchg   ax,ax

000000000002bf00 <cmd_spec_header>:
   2bf00:	endbr64 
   2bf04:	push   r13
   2bf06:	push   r12
   2bf08:	push   rbp
   2bf09:	push   rbx
   2bf0a:	sub    rsp,0x8
   2bf0e:	cmp    BYTE PTR [rsi],0x0
   2bf11:	je     2bfa8 <cmd_spec_header+0xa8>
   2bf17:	mov    rbx,rdi
   2bf1a:	mov    rdi,rsi
   2bf1d:	mov    rbp,rsi
   2bf20:	call   2bda0 <check_user_specified_header>
   2bf25:	mov    r12d,eax
   2bf28:	test   al,al
   2bf2a:	je     2bf50 <cmd_spec_header+0x50>
   2bf2c:	mov    rdi,QWORD PTR [rip+0x5e2e5]        # 8a218 <opt+0x198>
   2bf33:	mov    rsi,rbp
   2bf36:	call   3cb90 <vec_append>
   2bf3b:	mov    QWORD PTR [rip+0x5e2d6],rax        # 8a218 <opt+0x198>
   2bf42:	add    rsp,0x8
   2bf46:	mov    eax,r12d
   2bf49:	pop    rbx
   2bf4a:	pop    rbp
   2bf4b:	pop    r12
   2bf4d:	pop    r13
   2bf4f:	ret    
   2bf50:	mov    rdi,rbp
   2bf53:	call   4b5b0 <quote>
   2bf58:	mov    r13,QWORD PTR [rip+0x5e4c1]        # 8a420 <exec_name>
   2bf5f:	mov    edx,0x5
   2bf64:	xor    edi,edi
   2bf66:	lea    rsi,[rip+0x3bc52]        # 67bbf <primes.6089+0x1adf>
   2bf6d:	mov    rbp,rax
   2bf70:	call   c780 <dcgettext@plt>
   2bf75:	mov    r9,rbp
   2bf78:	mov    r8,rbx
   2bf7b:	mov    rcx,r13
   2bf7e:	mov    rdi,QWORD PTR [rip+0x5755b]        # 834e0 <stderr@@GLIBC_2.2.5>
   2bf85:	mov    rdx,rax
   2bf88:	mov    esi,0x1
   2bf8d:	xor    eax,eax
   2bf8f:	call   bfd0 <__fprintf_chk@plt>
   2bf94:	add    rsp,0x8
   2bf98:	mov    eax,r12d
   2bf9b:	pop    rbx
   2bf9c:	pop    rbp
   2bf9d:	pop    r12
   2bf9f:	pop    r13
   2bfa1:	ret    
   2bfa2:	nop    WORD PTR [rax+rax*1+0x0]
   2bfa8:	mov    rdi,QWORD PTR [rip+0x5e269]        # 8a218 <opt+0x198>
   2bfaf:	mov    r12d,0x1
   2bfb5:	call   3ca60 <free_vec>
   2bfba:	mov    eax,r12d
   2bfbd:	mov    QWORD PTR [rip+0x5e250],0x0        # 8a218 <opt+0x198>
   2bfc8:	add    rsp,0x8
   2bfcc:	pop    rbx
   2bfcd:	pop    rbp
   2bfce:	pop    r12
   2bfd0:	pop    r13
   2bfd2:	ret    
   2bfd3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2bfde:	xchg   ax,ax

000000000002bfe0 <cmd_spec_useragent>:
   2bfe0:	endbr64 
   2bfe4:	push   r12
   2bfe6:	push   rbp
   2bfe7:	mov    rbp,rsi
   2bfea:	mov    esi,0xa
   2bfef:	push   rbx
   2bff0:	mov    rbx,rdi
   2bff3:	mov    rdi,rbp
   2bff6:	call   c6c0 <strchr@plt>
   2bffb:	test   rax,rax
   2bffe:	je     2c050 <cmd_spec_useragent+0x70>
   2c000:	mov    rdi,rbp
   2c003:	call   4b5b0 <quote>
   2c008:	mov    r12,QWORD PTR [rip+0x5e411]        # 8a420 <exec_name>
   2c00f:	mov    edx,0x5
   2c014:	xor    edi,edi
   2c016:	lea    rsi,[rip+0x3bb48]        # 67b65 <primes.6089+0x1a85>
   2c01d:	mov    rbp,rax
   2c020:	call   c780 <dcgettext@plt>
   2c025:	mov    r9,rbp
   2c028:	mov    r8,rbx
   2c02b:	mov    rcx,r12
   2c02e:	mov    rdi,QWORD PTR [rip+0x574ab]        # 834e0 <stderr@@GLIBC_2.2.5>
   2c035:	mov    rdx,rax
   2c038:	mov    esi,0x1
   2c03d:	xor    eax,eax
   2c03f:	call   bfd0 <__fprintf_chk@plt>
   2c044:	pop    rbx
   2c045:	xor    eax,eax
   2c047:	pop    rbp
   2c048:	pop    r12
   2c04a:	ret    
   2c04b:	nop    DWORD PTR [rax+rax*1+0x0]
   2c050:	mov    rdi,QWORD PTR [rip+0x5e271]        # 8a2c8 <opt+0x248>
   2c057:	call   4bdc0 <rpl_free>
   2c05c:	mov    rdi,rbp
   2c05f:	mov    QWORD PTR [rip+0x5e25e],0x0        # 8a2c8 <opt+0x248>
   2c06a:	call   4ba50 <xstrdup>
   2c06f:	pop    rbx
   2c070:	pop    rbp
   2c071:	mov    QWORD PTR [rip+0x5e250],rax        # 8a2c8 <opt+0x248>
   2c078:	pop    r12
   2c07a:	mov    eax,0x1
   2c07f:	ret    

000000000002c080 <cmd_bytes.part.0>:
   2c080:	push   r12
   2c082:	push   rbp
   2c083:	push   rbx
   2c084:	mov    rbx,rdi
   2c087:	mov    rdi,rsi
   2c08a:	call   4b5b0 <quote>
   2c08f:	mov    r12,QWORD PTR [rip+0x5e38a]        # 8a420 <exec_name>
   2c096:	mov    edx,0x5
   2c09b:	xor    edi,edi
   2c09d:	lea    rsi,[rip+0x3c49c]        # 68540 <primes.6089+0x2460>
   2c0a4:	mov    rbp,rax
   2c0a7:	call   c780 <dcgettext@plt>
   2c0ac:	mov    r9,rbp
   2c0af:	mov    r8,rbx
   2c0b2:	mov    rcx,r12
   2c0b5:	mov    rdi,QWORD PTR [rip+0x57424]        # 834e0 <stderr@@GLIBC_2.2.5>
   2c0bc:	mov    rdx,rax
   2c0bf:	mov    esi,0x1
   2c0c4:	xor    eax,eax
   2c0c6:	call   bfd0 <__fprintf_chk@plt>
   2c0cb:	pop    rbx
   2c0cc:	xor    eax,eax
   2c0ce:	pop    rbp
   2c0cf:	pop    r12
   2c0d1:	ret    
   2c0d2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2c0dd:	nop    DWORD PTR [rax]

000000000002c0e0 <cmd_bytes_sum>:
   2c0e0:	endbr64 
   2c0e4:	push   r12
   2c0e6:	mov    r12,rdi
   2c0e9:	push   rbp
   2c0ea:	mov    rbp,rsi
   2c0ed:	push   rbx
   2c0ee:	mov    rdi,rbp
   2c0f1:	mov    rbx,rdx
   2c0f4:	sub    rsp,0x10
   2c0f8:	mov    rax,QWORD PTR fs:0x28
   2c101:	mov    QWORD PTR [rsp+0x8],rax
   2c106:	xor    eax,eax
   2c108:	mov    rsi,rsp
   2c10b:	call   2b5f0 <parse_bytes_helper>
   2c110:	test   al,al
   2c112:	je     2c140 <cmd_bytes_sum+0x60>
   2c114:	movsd  xmm0,QWORD PTR [rsp]
   2c119:	movsd  xmm1,QWORD PTR [rip+0x3c6e7]        # 68808 <primes.6089+0x2728>
   2c121:	comisd xmm1,xmm0
   2c125:	ja     2c140 <cmd_bytes_sum+0x60>
   2c127:	comisd xmm0,QWORD PTR [rip+0x3c6e1]        # 68810 <primes.6089+0x2730>
   2c12f:	ja     2c140 <cmd_bytes_sum+0x60>
   2c131:	cvttsd2si rdx,xmm0
   2c136:	mov    QWORD PTR [rbx],rdx
   2c139:	jmp    2c14b <cmd_bytes_sum+0x6b>
   2c13b:	nop    DWORD PTR [rax+rax*1+0x0]
   2c140:	mov    rsi,rbp
   2c143:	mov    rdi,r12
   2c146:	call   2c080 <cmd_bytes.part.0>
   2c14b:	mov    rcx,QWORD PTR [rsp+0x8]
   2c150:	xor    rcx,QWORD PTR fs:0x28
   2c159:	jne    2c164 <cmd_bytes_sum+0x84>
   2c15b:	add    rsp,0x10
   2c15f:	pop    rbx
   2c160:	pop    rbp
   2c161:	pop    r12
   2c163:	ret    
   2c164:	call   c7b0 <__stack_chk_fail@plt>
   2c169:	nop    DWORD PTR [rax+0x0]

000000000002c170 <cmd_bytes>:
   2c170:	endbr64 
   2c174:	push   r12
   2c176:	mov    r12,rdi
   2c179:	push   rbp
   2c17a:	mov    rbp,rsi
   2c17d:	push   rbx
   2c17e:	mov    rdi,rbp
   2c181:	mov    rbx,rdx
   2c184:	sub    rsp,0x10
   2c188:	mov    rax,QWORD PTR fs:0x28
   2c191:	mov    QWORD PTR [rsp+0x8],rax
   2c196:	xor    eax,eax
   2c198:	mov    rsi,rsp
   2c19b:	call   2b5f0 <parse_bytes_helper>
   2c1a0:	test   al,al
   2c1a2:	je     2c1d0 <cmd_bytes+0x60>
   2c1a4:	cvttsd2si rdx,QWORD PTR [rsp]
   2c1aa:	mov    QWORD PTR [rbx],rdx
   2c1ad:	mov    rcx,QWORD PTR [rsp+0x8]
   2c1b2:	xor    rcx,QWORD PTR fs:0x28
   2c1bb:	jne    2c1dd <cmd_bytes+0x6d>
   2c1bd:	add    rsp,0x10
   2c1c1:	pop    rbx
   2c1c2:	pop    rbp
   2c1c3:	pop    r12
   2c1c5:	ret    
   2c1c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2c1d0:	mov    rsi,rbp
   2c1d3:	mov    rdi,r12
   2c1d6:	call   2c080 <cmd_bytes.part.0>
   2c1db:	jmp    2c1ad <cmd_bytes+0x3d>
   2c1dd:	call   c7b0 <__stack_chk_fail@plt>
   2c1e2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2c1ed:	nop    DWORD PTR [rax]

000000000002c1f0 <cmd_spec_progress>:
   2c1f0:	endbr64 
   2c1f4:	push   r13
   2c1f6:	push   r12
   2c1f8:	push   rbp
   2c1f9:	mov    rbp,rsi
   2c1fc:	push   rbx
   2c1fd:	mov    rbx,rdi
   2c200:	mov    rdi,rsi
   2c203:	sub    rsp,0x8
   2c207:	call   317f0 <valid_progress_implementation_p>
   2c20c:	mov    r12d,eax
   2c20f:	test   al,al
   2c211:	je     2c250 <cmd_spec_progress+0x60>
   2c213:	mov    rdi,QWORD PTR [rip+0x5e036]        # 8a250 <opt+0x1d0>
   2c21a:	call   4bdc0 <rpl_free>
   2c21f:	mov    rdi,rbp
   2c222:	mov    QWORD PTR [rip+0x5e023],0x0        # 8a250 <opt+0x1d0>
   2c22d:	call   4ba50 <xstrdup>
   2c232:	mov    QWORD PTR [rip+0x5e017],rax        # 8a250 <opt+0x1d0>
   2c239:	add    rsp,0x8
   2c23d:	mov    eax,r12d
   2c240:	pop    rbx
   2c241:	pop    rbp
   2c242:	pop    r12
   2c244:	pop    r13
   2c246:	ret    
   2c247:	nop    WORD PTR [rax+rax*1+0x0]
   2c250:	mov    rdi,rbp
   2c253:	call   4b5b0 <quote>
   2c258:	mov    r13,QWORD PTR [rip+0x5e1c1]        # 8a420 <exec_name>
   2c25f:	mov    edx,0x5
   2c264:	xor    edi,edi
   2c266:	lea    rsi,[rip+0x3c2f3]        # 68560 <primes.6089+0x2480>
   2c26d:	mov    rbp,rax
   2c270:	call   c780 <dcgettext@plt>
   2c275:	mov    r9,rbp
   2c278:	mov    r8,rbx
   2c27b:	mov    rcx,r13
   2c27e:	mov    rdi,QWORD PTR [rip+0x5725b]        # 834e0 <stderr@@GLIBC_2.2.5>
   2c285:	mov    rdx,rax
   2c288:	mov    esi,0x1
   2c28d:	xor    eax,eax
   2c28f:	call   bfd0 <__fprintf_chk@plt>
   2c294:	add    rsp,0x8
   2c298:	mov    eax,r12d
   2c29b:	pop    rbx
   2c29c:	pop    rbp
   2c29d:	pop    r12
   2c29f:	pop    r13
   2c2a1:	ret    
   2c2a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2c2ad:	nop    DWORD PTR [rax]

000000000002c2b0 <cmd_directory_vector>:
   2c2b0:	endbr64 
   2c2b4:	push   r13
   2c2b6:	push   r12
   2c2b8:	push   rbp
   2c2b9:	mov    rbp,rdx
   2c2bc:	push   rbx
   2c2bd:	sub    rsp,0x8
   2c2c1:	cmp    BYTE PTR [rsi],0x0
   2c2c4:	je     2c330 <cmd_directory_vector+0x80>
   2c2c6:	mov    rdi,rsi
   2c2c9:	call   3b910 <sepstring>
   2c2ce:	mov    r12,rax
   2c2d1:	mov    r13,rax
   2c2d4:	test   rax,rax
   2c2d7:	jne    2c320 <cmd_directory_vector+0x70>
   2c2d9:	mov    rdi,QWORD PTR [rbp+0x0]
   2c2dd:	mov    rsi,r12
   2c2e0:	call   3cac0 <merge_vecs>
   2c2e5:	mov    QWORD PTR [rbp+0x0],rax
   2c2e9:	add    rsp,0x8
   2c2ed:	mov    eax,0x1
   2c2f2:	pop    rbx
   2c2f3:	pop    rbp
   2c2f4:	pop    r12
   2c2f6:	pop    r13
   2c2f8:	ret    
   2c2f9:	nop    DWORD PTR [rax+0x0]
   2c300:	mov    rdi,rbx
   2c303:	call   c310 <strlen@plt>
   2c308:	cmp    eax,0x1
   2c30b:	jle    2c31c <cmd_directory_vector+0x6c>
   2c30d:	cdqe   
   2c30f:	lea    rax,[rbx+rax*1-0x1]
   2c314:	cmp    BYTE PTR [rax],0x2f
   2c317:	jne    2c31c <cmd_directory_vector+0x6c>
   2c319:	mov    BYTE PTR [rax],0x0
   2c31c:	add    r13,0x8
   2c320:	mov    rbx,QWORD PTR [r13+0x0]
   2c324:	test   rbx,rbx
   2c327:	jne    2c300 <cmd_directory_vector+0x50>
   2c329:	jmp    2c2d9 <cmd_directory_vector+0x29>
   2c32b:	nop    DWORD PTR [rax+rax*1+0x0]
   2c330:	mov    rdi,QWORD PTR [rdx]
   2c333:	call   3ca60 <free_vec>
   2c338:	mov    QWORD PTR [rbp+0x0],0x0
   2c340:	add    rsp,0x8
   2c344:	mov    eax,0x1
   2c349:	pop    rbx
   2c34a:	pop    rbp
   2c34b:	pop    r12
   2c34d:	pop    r13
   2c34f:	ret    

000000000002c350 <cmd_vector>:
   2c350:	endbr64 
   2c354:	push   rbx
   2c355:	cmp    BYTE PTR [rsi],0x0
   2c358:	mov    rbx,rdx
   2c35b:	je     2c380 <cmd_vector+0x30>
   2c35d:	mov    rdi,rsi
   2c360:	call   3b910 <sepstring>
   2c365:	mov    rdi,QWORD PTR [rbx]
   2c368:	mov    rsi,rax
   2c36b:	call   3cac0 <merge_vecs>
   2c370:	mov    QWORD PTR [rbx],rax
   2c373:	mov    eax,0x1
   2c378:	pop    rbx
   2c379:	ret    
   2c37a:	nop    WORD PTR [rax+rax*1+0x0]
   2c380:	mov    rdi,QWORD PTR [rdx]
   2c383:	call   3ca60 <free_vec>
   2c388:	mov    QWORD PTR [rbx],0x0
   2c38f:	mov    eax,0x1
   2c394:	pop    rbx
   2c395:	ret    
   2c396:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000002c3a0 <cmd_number>:
   2c3a0:	endbr64 
   2c3a4:	push   r12
   2c3a6:	mov    r12,rdx
   2c3a9:	mov    edx,0xa
   2c3ae:	push   rbp
   2c3af:	mov    rbp,rsi
   2c3b2:	xor    esi,esi
   2c3b4:	push   rbx
   2c3b5:	mov    rbx,rdi
   2c3b8:	mov    rdi,rbp
   2c3bb:	call   c5a0 <strtol@plt>
   2c3c0:	movabs rdx,0x7fffffffffffffff
   2c3ca:	add    rdx,rax
   2c3cd:	cmp    rdx,0xfffffffffffffffd
   2c3d1:	ja     2c3f0 <cmd_number+0x50>
   2c3d3:	cmp    rax,0x7fffffff
   2c3d9:	ja     2c3f0 <cmd_number+0x50>
   2c3db:	mov    DWORD PTR [r12],eax
   2c3df:	mov    eax,0x1
   2c3e4:	pop    rbx
   2c3e5:	pop    rbp
   2c3e6:	pop    r12
   2c3e8:	ret    
   2c3e9:	nop    DWORD PTR [rax+0x0]
   2c3f0:	mov    rdi,rbp
   2c3f3:	call   4b5b0 <quote>
   2c3f8:	mov    r12,QWORD PTR [rip+0x5e021]        # 8a420 <exec_name>
   2c3ff:	mov    edx,0x5
   2c404:	xor    edi,edi
   2c406:	lea    rsi,[rip+0x3b7ce]        # 67bdb <primes.6089+0x1afb>
   2c40d:	mov    rbp,rax
   2c410:	call   c780 <dcgettext@plt>
   2c415:	mov    r9,rbp
   2c418:	mov    r8,rbx
   2c41b:	mov    rcx,r12
   2c41e:	mov    rdi,QWORD PTR [rip+0x570bb]        # 834e0 <stderr@@GLIBC_2.2.5>
   2c425:	mov    rdx,rax
   2c428:	mov    esi,0x1
   2c42d:	xor    eax,eax
   2c42f:	call   bfd0 <__fprintf_chk@plt>
   2c434:	pop    rbx
   2c435:	xor    eax,eax
   2c437:	pop    rbp
   2c438:	pop    r12
   2c43a:	ret    
   2c43b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002c440 <cmd_number_inf>:
   2c440:	endbr64 
   2c444:	push   r13
   2c446:	mov    r13,rdi
   2c449:	push   r12
   2c44b:	mov    r12,rdx
   2c44e:	push   rbp
   2c44f:	mov    rbp,rsi
   2c452:	lea    rsi,[rip+0x3b75c]        # 67bb5 <primes.6089+0x1ad5>
   2c459:	mov    rdi,rbp
   2c45c:	call   43340 <c_strcasecmp>
   2c461:	test   eax,eax
   2c463:	jne    2c480 <cmd_number_inf+0x40>
   2c465:	pop    rbp
   2c466:	mov    DWORD PTR [r12],0x0
   2c46e:	mov    eax,0x1
   2c473:	pop    r12
   2c475:	pop    r13
   2c477:	ret    
   2c478:	nop    DWORD PTR [rax+rax*1+0x0]
   2c480:	mov    rdx,r12
   2c483:	mov    rsi,rbp
   2c486:	mov    rdi,r13
   2c489:	pop    rbp
   2c48a:	pop    r12
   2c48c:	pop    r13
   2c48e:	jmp    2c3a0 <cmd_number>
   2c493:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2c49e:	xchg   ax,ax

000000000002c4a0 <setval_internal.part.0>:
   2c4a0:	push   r13
   2c4a2:	lea    r13,[rip+0x51257]        # 7d700 <commands>
   2c4a9:	push   r12
   2c4ab:	mov    r12,rdx
   2c4ae:	push   rbp
   2c4af:	mov    rbp,rsi
   2c4b2:	push   rbx
   2c4b3:	movsxd rbx,edi
   2c4b6:	sub    rsp,0x8
   2c4ba:	cmp    BYTE PTR [rip+0x5ddfa],0x0        # 8a2bb <opt+0x23b>
   2c4c1:	jne    2c4f0 <setval_internal.part.0+0x50>
   2c4c3:	lea    rax,[rbx+rbx*2]
   2c4c7:	mov    rsi,r12
   2c4ca:	mov    rdi,rbp
   2c4cd:	lea    rax,[r13+rax*8+0x0]
   2c4d2:	mov    rcx,QWORD PTR [rax+0x10]
   2c4d6:	mov    rdx,QWORD PTR [rax+0x8]
   2c4da:	add    rsp,0x8
   2c4de:	pop    rbx
   2c4df:	pop    rbp
   2c4e0:	pop    r12
   2c4e2:	pop    r13
   2c4e4:	jmp    rcx
   2c4e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2c4f0:	lea    rax,[rbx+rbx*2]
   2c4f4:	mov    rcx,rdx
   2c4f7:	lea    rdi,[rip+0x3b6f9]        # 67bf7 <primes.6089+0x1b17>
   2c4fe:	mov    rdx,QWORD PTR [r13+rax*8+0x0]
   2c503:	xor    eax,eax
   2c505:	call   2e250 <debug_logprintf>
   2c50a:	jmp    2c4c3 <setval_internal.part.0+0x23>
   2c50c:	nop    DWORD PTR [rax+0x0]

000000000002c510 <defaults>:
   2c510:	endbr64 
   2c514:	xor    eax,eax
   2c516:	mov    ecx,0x71
   2c51b:	sub    rsp,0x8
   2c51f:	mov    esi,0x101
   2c524:	lea    rdx,[rip+0x5db55]        # 8a080 <opt>
   2c52b:	mov    rdi,rdx
   2c52e:	rep stos QWORD PTR es:[rdi],rax
   2c531:	mov    ecx,0x101
   2c536:	lea    rdi,[rip+0x3b6d1]        # 67c0e <primes.6089+0x1b2e>
   2c53d:	mov    BYTE PTR [rip+0x5de24],0x1        # 8a368 <opt+0x2e8>
   2c544:	mov    DWORD PTR [rip+0x5db32],0xffffffff        # 8a080 <opt>
   2c54e:	mov    DWORD PTR [rip+0x5db30],0x14        # 8a088 <opt+0x8>
   2c558:	mov    DWORD PTR [rip+0x5db42],0x5        # 8a0a4 <opt+0x24>
   2c562:	mov    BYTE PTR [rip+0x5db47],0x1        # 8a0b0 <opt+0x30>
   2c569:	mov    WORD PTR [rip+0x5dc90],cx        # 8a200 <opt+0x180>
   2c570:	mov    BYTE PTR [rip+0x5dd64],0x1        # 8a2db <opt+0x25b>
   2c577:	mov    WORD PTR [rip+0x5dca2],si        # 8a220 <opt+0x1a0>
   2c57e:	call   c720 <getenv@plt>
   2c583:	test   rax,rax
   2c586:	je     2c597 <defaults+0x87>
   2c588:	mov    rdi,rax
   2c58b:	call   3b910 <sepstring>
   2c590:	mov    QWORD PTR [rip+0x5dca9],rax        # 8a240 <opt+0x1c0>
   2c597:	mov    rax,QWORD PTR [rip+0x3c27a]        # 68818 <primes.6089+0x2738>
   2c59e:	mov    edx,0x1
   2c5a3:	mov    DWORD PTR [rip+0x5de13],0x2        # 8a3c0 <opt+0x340>
   2c5ad:	mov    BYTE PTR [rip+0x5dc6e],0x1        # 8a222 <opt+0x1a2>
   2c5b4:	mov    QWORD PTR [rip+0x5dcb5],rax        # 8a270 <opt+0x1f0>
   2c5bb:	movabs rax,0xa00000032
   2c5c5:	mov    QWORD PTR [rip+0x5dd24],rax        # 8a2f0 <opt+0x270>
   2c5cc:	mov    eax,0x1
   2c5d1:	mov    WORD PTR [rip+0x5dddc],ax        # 8a3b4 <opt+0x334>
   2c5d8:	mov    rax,QWORD PTR [rip+0x3c1e1]        # 687c0 <primes.6089+0x26e0>
   2c5df:	mov    BYTE PTR [rip+0x5dcd7],0x1        # 8a2bd <opt+0x23d>
   2c5e6:	mov    BYTE PTR [rip+0x5dcb3],0x1        # 8a2a0 <opt+0x220>
   2c5ed:	mov    BYTE PTR [rip+0x5dce6],0x1        # 8a2da <opt+0x25a>
   2c5f4:	mov    QWORD PTR [rip+0x5dce9],0x400        # 8a2e8 <opt+0x268>
   2c5ff:	mov    BYTE PTR [rip+0x5db5a],0x1        # 8a160 <opt+0xe0>
   2c606:	mov    BYTE PTR [rip+0x5dbf5],0x1        # 8a202 <opt+0x182>
   2c60d:	mov    BYTE PTR [rip+0x5db65],0x1        # 8a179 <opt+0xf9>
   2c614:	mov    DWORD PTR [rip+0x5dcee],0x1        # 8a30c <opt+0x28c>
   2c61e:	mov    DWORD PTR [rip+0x5dd31],0x1        # 8a359 <opt+0x2d9>
   2c628:	mov    DWORD PTR [rip+0x5dd7e],0x0        # 8a3b0 <opt+0x330>
   2c632:	mov    DWORD PTR [rip+0x5dd7c],0x0        # 8a3b8 <opt+0x338>
   2c63c:	mov    DWORD PTR [rip+0x5daf2],0x0        # 8a138 <opt+0xb8>
   2c646:	mov    DWORD PTR [rip+0x5da4c],0x14        # 8a09c <opt+0x1c>
   2c650:	mov    QWORD PTR [rip+0x5dc41],rax        # 8a298 <opt+0x218>
   2c657:	mov    BYTE PTR [rip+0x5dd68],0x1        # 8a3c6 <opt+0x346>
   2c65e:	mov    QWORD PTR [rip+0x5dd67],0x0        # 8a3d0 <opt+0x350>
   2c669:	mov    QWORD PTR [rip+0x5dd54],0x0        # 8a3c8 <opt+0x348>
   2c674:	mov    WORD PTR [rip+0x5dd5e],dx        # 8a3d9 <opt+0x359>
   2c67b:	mov    QWORD PTR [rip+0x5db0a],0x0        # 8a190 <opt+0x110>
   2c686:	mov    QWORD PTR [rip+0x5db07],0x0        # 8a198 <opt+0x118>
   2c691:	mov    QWORD PTR [rip+0x5db04],0x0        # 8a1a0 <opt+0x120>
   2c69c:	mov    DWORD PTR [rip+0x5db02],0x1000100        # 8a1a8 <opt+0x128>
   2c6a6:	mov    QWORD PTR [rip+0x5db37],0xffffffffffffffff        # 8a1e8 <opt+0x168>
   2c6b1:	mov    DWORD PTR [rip+0x5db9d],0xffffffff        # 8a258 <opt+0x1d8>
   2c6bb:	mov    BYTE PTR [rip+0x5db9a],0x0        # 8a25c <opt+0x1dc>
   2c6c2:	mov    BYTE PTR [rip+0x5dd1f],0x1        # 8a3e8 <opt+0x368>
   2c6c9:	mov    BYTE PTR [rip+0x5dae8],0x0        # 8a1b8 <opt+0x138>
   2c6d0:	add    rsp,0x8
   2c6d4:	ret    
   2c6d5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000002c6e0 <home_dir>:
   2c6e0:	endbr64 
   2c6e4:	sub    rsp,0x8
   2c6e8:	mov    rax,QWORD PTR [rip+0x58fe9]        # 856d8 <home.8884>
   2c6ef:	test   rax,rax
   2c6f2:	je     2c730 <home_dir+0x50>
   2c6f4:	mov    rdi,rax
   2c6f7:	call   4ba50 <xstrdup>
   2c6fc:	mov    rdi,QWORD PTR [rip+0x58fc5]        # 856c8 <buf.8883>
   2c703:	mov    QWORD PTR [rip+0x58fc6],rax        # 856d0 <ret.8885>
   2c70a:	call   4bdc0 <rpl_free>
   2c70f:	mov    rax,QWORD PTR [rip+0x58fba]        # 856d0 <ret.8885>
   2c716:	mov    QWORD PTR [rip+0x58fa7],0x0        # 856c8 <buf.8883>
   2c721:	add    rsp,0x8
   2c725:	ret    
   2c726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2c730:	lea    rdi,[rip+0x3b4e0]        # 67c17 <primes.6089+0x1b37>
   2c737:	call   c720 <getenv@plt>
   2c73c:	mov    QWORD PTR [rip+0x58f95],rax        # 856d8 <home.8884>
   2c743:	test   rax,rax
   2c746:	jne    2c6f4 <home_dir+0x14>
   2c748:	call   c850 <getuid@plt>
   2c74d:	mov    edi,eax
   2c74f:	call   c280 <getpwuid@plt>
   2c754:	test   rax,rax
   2c757:	je     2c721 <home_dir+0x41>
   2c759:	mov    rax,QWORD PTR [rax+0x20]
   2c75d:	test   rax,rax
   2c760:	je     2c721 <home_dir+0x41>
   2c762:	mov    QWORD PTR [rip+0x58f6f],rax        # 856d8 <home.8884>
   2c769:	jmp    2c6f4 <home_dir+0x14>
   2c76b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002c770 <wgetrc_env_file_name>:
   2c770:	endbr64 
   2c774:	push   r13
   2c776:	lea    rdi,[rip+0x3b4e5]        # 67c62 <primes.6089+0x1b82>
   2c77d:	push   r12
   2c77f:	push   rbx
   2c780:	sub    rsp,0x20
   2c784:	mov    rax,QWORD PTR fs:0x28
   2c78d:	mov    QWORD PTR [rsp+0x18],rax
   2c792:	xor    eax,eax
   2c794:	call   c720 <getenv@plt>
   2c799:	mov    r12,rax
   2c79c:	test   rax,rax
   2c79f:	je     2c7c0 <wgetrc_env_file_name+0x50>
   2c7a1:	cmp    BYTE PTR [rax],0x0
   2c7a4:	je     2c7e0 <wgetrc_env_file_name+0x70>
   2c7a6:	mov    rsi,rsp
   2c7a9:	mov    rdi,rax
   2c7ac:	call   3bed0 <file_exists_p>
   2c7b1:	test   al,al
   2c7b3:	je     2c7ea <wgetrc_env_file_name+0x7a>
   2c7b5:	mov    rdi,r12
   2c7b8:	call   4ba50 <xstrdup>
   2c7bd:	mov    r12,rax
   2c7c0:	mov    rax,QWORD PTR [rsp+0x18]
   2c7c5:	xor    rax,QWORD PTR fs:0x28
   2c7ce:	jne    2c7e5 <wgetrc_env_file_name+0x75>
   2c7d0:	add    rsp,0x20
   2c7d4:	mov    rax,r12
   2c7d7:	pop    rbx
   2c7d8:	pop    r12
   2c7da:	pop    r13
   2c7dc:	ret    
   2c7dd:	nop    DWORD PTR [rax]
   2c7e0:	xor    r12d,r12d
   2c7e3:	jmp    2c7c0 <wgetrc_env_file_name+0x50>
   2c7e5:	call   c7b0 <__stack_chk_fail@plt>
   2c7ea:	mov    edi,DWORD PTR [rsp]
   2c7ed:	call   c540 <strerror@plt>
   2c7f2:	mov    r13,QWORD PTR [rip+0x5dc27]        # 8a420 <exec_name>
   2c7f9:	mov    edx,0x5
   2c7fe:	xor    edi,edi
   2c800:	lea    rsi,[rip+0x3bd81]        # 68588 <primes.6089+0x24a8>
   2c807:	mov    rbx,rax
   2c80a:	call   c780 <dcgettext@plt>
   2c80f:	mov    r9,rbx
   2c812:	mov    r8,r12
   2c815:	mov    rcx,r13
   2c818:	mov    rdi,QWORD PTR [rip+0x56cc1]        # 834e0 <stderr@@GLIBC_2.2.5>
   2c81f:	mov    rdx,rax
   2c822:	mov    esi,0x1
   2c827:	xor    eax,eax
   2c829:	call   bfd0 <__fprintf_chk@plt>
   2c82e:	mov    edi,0x1
   2c833:	call   c060 <exit@plt>
   2c838:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002c840 <ajoin_dir_file>:
   2c840:	endbr64 
   2c844:	mov    rdx,rsi
   2c847:	xor    eax,eax
   2c849:	mov    rsi,rdi
   2c84c:	lea    rdi,[rip+0x2f3a8]        # 5bbfb <_IO_stdin_used+0xbfb>
   2c853:	jmp    3ba30 <aprintf>
   2c858:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002c860 <wgetrc_user_file_name>:
   2c860:	endbr64 
   2c864:	mov    rsi,QWORD PTR [rip+0x5db8d]        # 8a3f8 <opt+0x378>
   2c86b:	push   r12
   2c86d:	test   rsi,rsi
   2c870:	je     2c8b0 <wgetrc_user_file_name+0x50>
   2c872:	lea    rdx,[rip+0x3b3a3]        # 67c1c <primes.6089+0x1b3c>
   2c879:	lea    rdi,[rip+0x2f37b]        # 5bbfb <_IO_stdin_used+0xbfb>
   2c880:	xor    eax,eax
   2c882:	call   3ba30 <aprintf>
   2c887:	mov    r12,rax
   2c88a:	test   rax,rax
   2c88d:	je     2c8b0 <wgetrc_user_file_name+0x50>
   2c88f:	xor    esi,esi
   2c891:	mov    rdi,rax
   2c894:	call   3bed0 <file_exists_p>
   2c899:	test   al,al
   2c89b:	je     2c8a8 <wgetrc_user_file_name+0x48>
   2c89d:	mov    rax,r12
   2c8a0:	pop    r12
   2c8a2:	ret    
   2c8a3:	nop    DWORD PTR [rax+rax*1+0x0]
   2c8a8:	mov    rdi,r12
   2c8ab:	call   4bdc0 <rpl_free>
   2c8b0:	xor    r12d,r12d
   2c8b3:	mov    rax,r12
   2c8b6:	pop    r12
   2c8b8:	ret    
   2c8b9:	nop    DWORD PTR [rax+0x0]

000000000002c8c0 <wgetrc_file_name>:
   2c8c0:	endbr64 
   2c8c4:	sub    rsp,0x8
   2c8c8:	call   2c770 <wgetrc_env_file_name>
   2c8cd:	test   rax,rax
   2c8d0:	je     2c8d7 <wgetrc_file_name+0x17>
   2c8d2:	cmp    BYTE PTR [rax],0x0
   2c8d5:	jne    2c8e0 <wgetrc_file_name+0x20>
   2c8d7:	add    rsp,0x8
   2c8db:	jmp    2c860 <wgetrc_user_file_name>
   2c8dd:	nop    DWORD PTR [rax]
   2c8e0:	add    rsp,0x8
   2c8e4:	ret    
   2c8e5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000002c8f0 <run_wgetrc>:
   2c8f0:	endbr64 
   2c8f4:	push   r15
   2c8f6:	mov    rdx,rsi
   2c8f9:	lea    rsi,[rip+0x39640]        # 65f40 <yy_accept+0xe80>
   2c900:	push   r14
   2c902:	mov    r14,rdi
   2c905:	push   r13
   2c907:	push   r12
   2c909:	push   rbp
   2c90a:	push   rbx
   2c90b:	sub    rsp,0x58
   2c90f:	mov    rax,QWORD PTR fs:0x28
   2c918:	mov    QWORD PTR [rsp+0x48],rax
   2c91d:	xor    eax,eax
   2c91f:	mov    QWORD PTR [rsp+0x28],0x0
   2c928:	mov    QWORD PTR [rsp+0x30],0x0
   2c931:	call   3c010 <fopen_stat>
   2c936:	test   rax,rax
   2c939:	je     2cc90 <run_wgetrc+0x3a0>
   2c93f:	mov    DWORD PTR [rsp+0x4],0x0
   2c947:	mov    rbp,rax
   2c94a:	mov    ebx,0x1
   2c94f:	lea    r13,[rsp+0x30]
   2c954:	lea    r12,[rsp+0x28]
   2c959:	lea    r15,[rsp+0x24]
   2c95e:	jmp    2ca00 <run_wgetrc+0x110>
   2c963:	nop    DWORD PTR [rax+rax*1+0x0]
   2c968:	test   eax,eax
   2c96a:	jne    2c9e0 <run_wgetrc+0xf0>
   2c96c:	mov    ecx,DWORD PTR [rsp+0x24]
   2c970:	cmp    ecx,0xa5
   2c976:	ja     2cb68 <run_wgetrc+0x278>
   2c97c:	mov    r8,QWORD PTR [rsp+0x40]
   2c981:	mov    rsi,QWORD PTR [rsp+0x38]
   2c986:	mov    edi,ecx
   2c988:	mov    DWORD PTR [rsp+0x8],ecx
   2c98c:	mov    rdx,r8
   2c98f:	mov    QWORD PTR [rsp+0x10],r8
   2c994:	call   2c4a0 <setval_internal.part.0>
   2c999:	movsxd rcx,DWORD PTR [rsp+0x8]
   2c99e:	mov    r8,QWORD PTR [rsp+0x10]
   2c9a3:	lea    rsi,[rip+0x50d56]        # 7d700 <commands>
   2c9aa:	lea    rdx,[rcx+rcx*2]
   2c9ae:	mov    rdx,QWORD PTR [rsi+rdx*8+0x10]
   2c9b3:	lea    rsi,[rip+0xffffffffffffdf76]        # 2a930 <cmd_file>
   2c9ba:	cmp    rdx,rsi
   2c9bd:	je     2cb60 <run_wgetrc+0x270>
   2c9c3:	lea    rdi,[rip+0xffffffffffffe2d6]        # 2aca0 <cmd_directory>
   2c9ca:	cmp    rdx,rdi
   2c9cd:	je     2cb60 <run_wgetrc+0x270>
   2c9d3:	test   al,al
   2c9d5:	je     2cb68 <run_wgetrc+0x278>
   2c9db:	nop    DWORD PTR [rax+rax*1+0x0]
   2c9e0:	mov    rdi,QWORD PTR [rsp+0x38]
   2c9e5:	add    ebx,0x1
   2c9e8:	call   4bdc0 <rpl_free>
   2c9ed:	mov    rdi,QWORD PTR [rsp+0x40]
   2c9f2:	mov    QWORD PTR [rsp+0x38],0x0
   2c9fb:	call   4bdc0 <rpl_free>
   2ca00:	mov    rcx,rbp
   2ca03:	mov    edx,0xa
   2ca08:	mov    rsi,r13
   2ca0b:	mov    rdi,r12
   2ca0e:	call   be90 <__getdelim@plt>
   2ca13:	test   rax,rax
   2ca16:	jle    2cb10 <run_wgetrc+0x220>
   2ca1c:	mov    rdi,QWORD PTR [rsp+0x28]
   2ca21:	lea    rdx,[rsp+0x40]
   2ca26:	lea    rsi,[rsp+0x38]
   2ca2b:	mov    rcx,r15
   2ca2e:	mov    QWORD PTR [rsp+0x38],0x0
   2ca37:	mov    QWORD PTR [rsp+0x40],0x0
   2ca40:	call   2adf0 <parse_line>
   2ca45:	cmp    eax,0x2
   2ca48:	je     2cac0 <run_wgetrc+0x1d0>
   2ca4a:	jbe    2c968 <run_wgetrc+0x78>
   2ca50:	cmp    eax,0x3
   2ca53:	jne    2cce7 <run_wgetrc+0x3f7>
   2ca59:	mov    rdi,QWORD PTR [rsp+0x38]
   2ca5e:	call   4b5b0 <quote>
   2ca63:	mov    rcx,QWORD PTR [rip+0x5d9b6]        # 8a420 <exec_name>
   2ca6a:	mov    edx,0x5
   2ca6f:	xor    edi,edi
   2ca71:	lea    rsi,[rip+0x3bb88]        # 68600 <primes.6089+0x2520>
   2ca78:	mov    QWORD PTR [rsp+0x10],rax
   2ca7d:	mov    QWORD PTR [rsp+0x8],rcx
   2ca82:	call   c780 <dcgettext@plt>
   2ca87:	sub    rsp,0x8
   2ca8b:	mov    r9,r14
   2ca8e:	mov    rdi,QWORD PTR [rip+0x56a4b]        # 834e0 <stderr@@GLIBC_2.2.5>
   2ca95:	push   rbx
   2ca96:	mov    r8,QWORD PTR [rsp+0x20]
   2ca9b:	mov    rdx,rax
   2ca9e:	mov    esi,0x1
   2caa3:	mov    rcx,QWORD PTR [rsp+0x18]
   2caa8:	xor    eax,eax
   2caaa:	call   bfd0 <__fprintf_chk@plt>
   2caaf:	add    DWORD PTR [rsp+0x14],0x1
   2cab4:	pop    rdx
   2cab5:	pop    rcx
   2cab6:	jmp    2c9e0 <run_wgetrc+0xf0>
   2cabb:	nop    DWORD PTR [rax+rax*1+0x0]
   2cac0:	mov    rcx,QWORD PTR [rip+0x5d959]        # 8a420 <exec_name>
   2cac7:	mov    edx,0x5
   2cacc:	lea    rsi,[rip+0x3bb05]        # 685d8 <primes.6089+0x24f8>
   2cad3:	mov    QWORD PTR [rsp+0x8],rcx
   2cad8:	xor    edi,edi
   2cada:	call   c780 <dcgettext@plt>
   2cadf:	mov    rcx,QWORD PTR [rsp+0x8]
   2cae4:	mov    r9d,ebx
   2cae7:	mov    r8,r14
   2caea:	mov    rdi,QWORD PTR [rip+0x569ef]        # 834e0 <stderr@@GLIBC_2.2.5>
   2caf1:	mov    rdx,rax
   2caf4:	mov    esi,0x1
   2caf9:	xor    eax,eax
   2cafb:	call   bfd0 <__fprintf_chk@plt>
   2cb00:	add    DWORD PTR [rsp+0x4],0x1
   2cb05:	jmp    2c9e0 <run_wgetrc+0xf0>
   2cb0a:	nop    WORD PTR [rax+rax*1+0x0]
   2cb10:	mov    rdi,QWORD PTR [rsp+0x28]
   2cb15:	call   4bdc0 <rpl_free>
   2cb1a:	mov    rdi,rbp
   2cb1d:	mov    QWORD PTR [rsp+0x28],0x0
   2cb26:	call   c8b0 <fclose@plt>
   2cb2b:	mov    eax,DWORD PTR [rsp+0x4]
   2cb2f:	test   eax,eax
   2cb31:	sete   al
   2cb34:	mov    rbx,QWORD PTR [rsp+0x48]
   2cb39:	xor    rbx,QWORD PTR fs:0x28
   2cb42:	jne    2cce2 <run_wgetrc+0x3f2>
   2cb48:	add    rsp,0x58
   2cb4c:	pop    rbx
   2cb4d:	pop    rbp
   2cb4e:	pop    r12
   2cb50:	pop    r13
   2cb52:	pop    r14
   2cb54:	pop    r15
   2cb56:	ret    
   2cb57:	nop    WORD PTR [rax+rax*1+0x0]
   2cb60:	test   al,al
   2cb62:	jne    2cb88 <run_wgetrc+0x298>
   2cb64:	nop    DWORD PTR [rax+0x0]
   2cb68:	mov    rcx,QWORD PTR [rip+0x5d8b1]        # 8a420 <exec_name>
   2cb6f:	mov    edx,0x5
   2cb74:	lea    rsi,[rip+0x3b0c3]        # 67c3e <primes.6089+0x1b5e>
   2cb7b:	mov    QWORD PTR [rsp+0x8],rcx
   2cb80:	jmp    2cad8 <run_wgetrc+0x1e8>
   2cb85:	nop    DWORD PTR [rax]
   2cb88:	cmp    BYTE PTR [r8],0x7e
   2cb8c:	jne    2c9e0 <run_wgetrc+0xf0>
   2cb92:	cmp    BYTE PTR [r8+0x1],0x2f
   2cb97:	jne    2c9e0 <run_wgetrc+0xf0>
   2cb9d:	mov    rdi,QWORD PTR [rip+0x5d854]        # 8a3f8 <opt+0x378>
   2cba4:	mov    QWORD PTR [rsp+0x10],r8
   2cba9:	test   rdi,rdi
   2cbac:	je     2c9e0 <run_wgetrc+0xf0>
   2cbb2:	lea    rax,[rcx+rcx*2]
   2cbb6:	lea    rcx,[rip+0x50b43]        # 7d700 <commands>
   2cbbd:	mov    rax,QWORD PTR [rcx+rax*8+0x8]
   2cbc2:	mov    QWORD PTR [rsp+0x8],rax
   2cbc7:	call   4ba50 <xstrdup>
   2cbcc:	mov    rdi,rax
   2cbcf:	mov    QWORD PTR [rsp+0x18],rax
   2cbd4:	call   c310 <strlen@plt>
   2cbd9:	mov    r9,QWORD PTR [rsp+0x18]
   2cbde:	mov    r8,QWORD PTR [rsp+0x10]
   2cbe3:	test   eax,eax
   2cbe5:	mov    rcx,rax
   2cbe8:	je     2cc11 <run_wgetrc+0x321>
   2cbea:	movsxd rdx,eax
   2cbed:	sub    ecx,0x1
   2cbf0:	lea    rax,[r9+rdx*1-0x1]
   2cbf5:	lea    rdx,[r9+rdx*1-0x2]
   2cbfa:	sub    rdx,rcx
   2cbfd:	jmp    2cc0c <run_wgetrc+0x31c>
   2cbff:	nop
   2cc00:	mov    BYTE PTR [rax],0x0
   2cc03:	sub    rax,0x1
   2cc07:	cmp    rdx,rax
   2cc0a:	je     2cc11 <run_wgetrc+0x321>
   2cc0c:	cmp    BYTE PTR [rax],0x2f
   2cc0f:	je     2cc00 <run_wgetrc+0x310>
   2cc11:	mov    rax,QWORD PTR [rsp+0x8]
   2cc16:	mov    QWORD PTR [rsp+0x18],r9
   2cc1b:	mov    QWORD PTR [rsp+0x10],r8
   2cc20:	mov    rdi,QWORD PTR [rax]
   2cc23:	call   4bdc0 <rpl_free>
   2cc28:	mov    rax,QWORD PTR [rsp+0x8]
   2cc2d:	mov    r8,QWORD PTR [rsp+0x10]
   2cc32:	lea    rsi,[rip+0x2ef60]        # 5bb99 <_IO_stdin_used+0xb99>
   2cc39:	mov    QWORD PTR [rax],0x0
   2cc40:	lea    rdi,[r8+0x1]
   2cc44:	call   c690 <strspn@plt>
   2cc49:	mov    r9,QWORD PTR [rsp+0x18]
   2cc4e:	xor    ecx,ecx
   2cc50:	mov    r8,QWORD PTR [rsp+0x10]
   2cc55:	lea    rsi,[rip+0x2ef3d]        # 5bb99 <_IO_stdin_used+0xb99>
   2cc5c:	lea    rdx,[r8+rax*1+0x1]
   2cc61:	mov    rdi,r9
   2cc64:	xor    eax,eax
   2cc66:	mov    QWORD PTR [rsp+0x10],r9
   2cc6b:	call   3bbd0 <concat_strings>
   2cc70:	mov    rcx,QWORD PTR [rsp+0x8]
   2cc75:	mov    r9,QWORD PTR [rsp+0x10]
   2cc7a:	mov    QWORD PTR [rcx],rax
   2cc7d:	mov    rdi,r9
   2cc80:	call   4bdc0 <rpl_free>
   2cc85:	jmp    2c9e0 <run_wgetrc+0xf0>
   2cc8a:	nop    WORD PTR [rax+rax*1+0x0]
   2cc90:	call   c740 <__errno_location@plt>
   2cc95:	mov    edi,DWORD PTR [rax]
   2cc97:	call   c540 <strerror@plt>
   2cc9c:	mov    r12,QWORD PTR [rip+0x5d77d]        # 8a420 <exec_name>
   2cca3:	mov    edx,0x5
   2cca8:	xor    edi,edi
   2ccaa:	lea    rsi,[rip+0x3af73]        # 67c24 <primes.6089+0x1b44>
   2ccb1:	mov    rbx,rax
   2ccb4:	call   c780 <dcgettext@plt>
   2ccb9:	mov    r9,rbx
   2ccbc:	mov    r8,r14
   2ccbf:	mov    rcx,r12
   2ccc2:	mov    rdi,QWORD PTR [rip+0x56817]        # 834e0 <stderr@@GLIBC_2.2.5>
   2ccc9:	mov    rdx,rax
   2cccc:	mov    esi,0x1
   2ccd1:	xor    eax,eax
   2ccd3:	call   bfd0 <__fprintf_chk@plt>
   2ccd8:	mov    eax,0x1
   2ccdd:	jmp    2cb34 <run_wgetrc+0x244>
   2cce2:	call   c7b0 <__stack_chk_fail@plt>
   2cce7:	jmp    cc85 <run_wgetrc.cold>
   2ccec:	nop    DWORD PTR [rax+0x0]

000000000002ccf0 <initialize>:
   2ccf0:	endbr64 
   2ccf4:	push   r12
   2ccf6:	pxor   xmm0,xmm0
   2ccfa:	lea    rdi,[rip+0x3af5a]        # 67c5b <primes.6089+0x1b7b>
   2cd01:	push   rbp
   2cd02:	sub    rsp,0x28
   2cd06:	mov    rax,QWORD PTR fs:0x28
   2cd0f:	mov    QWORD PTR [rsp+0x18],rax
   2cd14:	xor    eax,eax
   2cd16:	mov    rbp,rsp
   2cd19:	movaps XMMWORD PTR [rsp],xmm0
   2cd1d:	mov    QWORD PTR [rsp+0x10],0x0
   2cd26:	call   c720 <getenv@plt>
   2cd2b:	test   rax,rax
   2cd2e:	je     2cd46 <initialize+0x56>
   2cd30:	mov    rsi,rbp
   2cd33:	mov    rdi,rax
   2cd36:	mov    r12,rax
   2cd39:	call   3bed0 <file_exists_p>
   2cd3e:	test   al,al
   2cd40:	jne    2ce20 <initialize+0x130>
   2cd46:	mov    rsi,rbp
   2cd49:	lea    rdi,[rip+0x3af19]        # 67c69 <primes.6089+0x1b89>
   2cd50:	call   3bed0 <file_exists_p>
   2cd55:	test   al,al
   2cd57:	jne    2ce50 <initialize+0x160>
   2cd5d:	call   2c8c0 <wgetrc_file_name>
   2cd62:	mov    QWORD PTR [rip+0x5d697],rax        # 8a400 <opt+0x380>
   2cd69:	mov    r8,rax
   2cd6c:	test   rax,rax
   2cd6f:	je     2cdb5 <initialize+0xc5>
   2cd71:	mov    rsi,rax
   2cd74:	mov    ecx,0x11
   2cd79:	lea    rdi,[rip+0x3aee9]        # 67c69 <primes.6089+0x1b89>
   2cd80:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2cd82:	seta   al
   2cd85:	sbb    al,0x0
   2cd87:	test   al,al
   2cd89:	je     2cdd8 <initialize+0xe8>
   2cd8b:	mov    rsi,rbp
   2cd8e:	mov    rdi,r8
   2cd91:	call   3bed0 <file_exists_p>
   2cd96:	test   al,al
   2cd98:	jne    2cea8 <initialize+0x1b8>
   2cd9e:	mov    rdi,QWORD PTR [rip+0x5d65b]        # 8a400 <opt+0x380>
   2cda5:	call   4bdc0 <rpl_free>
   2cdaa:	mov    QWORD PTR [rip+0x5d64b],0x0        # 8a400 <opt+0x380>
   2cdb5:	xor    eax,eax
   2cdb7:	mov    rdx,QWORD PTR [rsp+0x18]
   2cdbc:	xor    rdx,QWORD PTR fs:0x28
   2cdc5:	jne    2ceda <initialize+0x1ea>
   2cdcb:	add    rsp,0x28
   2cdcf:	pop    rbp
   2cdd0:	pop    r12
   2cdd2:	ret    
   2cdd3:	nop    DWORD PTR [rax+rax*1+0x0]
   2cdd8:	mov    rdi,r8
   2cddb:	call   4b5b0 <quote>
   2cde0:	mov    r12,QWORD PTR [rip+0x5d639]        # 8a420 <exec_name>
   2cde7:	xor    edi,edi
   2cde9:	mov    edx,0x5
   2cdee:	lea    rsi,[rip+0x3b91b]        # 68710 <primes.6089+0x2630>
   2cdf5:	mov    rbp,rax
   2cdf8:	call   c780 <dcgettext@plt>
   2cdfd:	mov    r8,rbp
   2ce00:	mov    rcx,r12
   2ce03:	mov    esi,0x1
   2ce08:	mov    rdi,QWORD PTR [rip+0x566d1]        # 834e0 <stderr@@GLIBC_2.2.5>
   2ce0f:	mov    rdx,rax
   2ce12:	xor    eax,eax
   2ce14:	call   bfd0 <__fprintf_chk@plt>
   2ce19:	jmp    2cd9e <initialize+0xae>
   2ce1b:	nop    DWORD PTR [rax+rax*1+0x0]
   2ce20:	mov    rsi,rbp
   2ce23:	mov    rdi,r12
   2ce26:	call   2c8f0 <run_wgetrc>
   2ce2b:	test   al,al
   2ce2d:	jne    2cd5d <initialize+0x6d>
   2ce33:	mov    edx,0x5
   2ce38:	lea    rsi,[rip+0x3b7f1]        # 68630 <primes.6089+0x2550>
   2ce3f:	xor    edi,edi
   2ce41:	call   c780 <dcgettext@plt>
   2ce46:	mov    rcx,r12
   2ce49:	mov    rdx,rax
   2ce4c:	jmp    2ce84 <initialize+0x194>
   2ce4e:	xchg   ax,ax
   2ce50:	mov    rsi,rbp
   2ce53:	lea    rdi,[rip+0x3ae0f]        # 67c69 <primes.6089+0x1b89>
   2ce5a:	call   2c8f0 <run_wgetrc>
   2ce5f:	test   al,al
   2ce61:	jne    2cd5d <initialize+0x6d>
   2ce67:	mov    edx,0x5
   2ce6c:	lea    rsi,[rip+0x3b835]        # 686a8 <primes.6089+0x25c8>
   2ce73:	xor    edi,edi
   2ce75:	call   c780 <dcgettext@plt>
   2ce7a:	lea    rcx,[rip+0x3ade8]        # 67c69 <primes.6089+0x1b89>
   2ce81:	mov    rdx,rax
   2ce84:	mov    rdi,QWORD PTR [rip+0x56655]        # 834e0 <stderr@@GLIBC_2.2.5>
   2ce8b:	mov    esi,0x1
   2ce90:	xor    eax,eax
   2ce92:	call   bfd0 <__fprintf_chk@plt>
   2ce97:	mov    eax,0x2
   2ce9c:	jmp    2cdb7 <initialize+0xc7>
   2cea1:	nop    DWORD PTR [rax+0x0]
   2cea8:	mov    rdi,QWORD PTR [rip+0x5d551]        # 8a400 <opt+0x380>
   2ceaf:	mov    rsi,rbp
   2ceb2:	call   2c8f0 <run_wgetrc>
   2ceb7:	mov    rdi,QWORD PTR [rip+0x5d542]        # 8a400 <opt+0x380>
   2cebe:	mov    ebp,eax
   2cec0:	call   4bdc0 <rpl_free>
   2cec5:	mov    QWORD PTR [rip+0x5d530],0x0        # 8a400 <opt+0x380>
   2ced0:	test   bpl,bpl
   2ced3:	je     2ce97 <initialize+0x1a7>
   2ced5:	jmp    2cdb5 <initialize+0xc5>
   2ceda:	call   c7b0 <__stack_chk_fail@plt>
   2cedf:	nop

000000000002cee0 <setoptval>:
   2cee0:	endbr64 
   2cee4:	push   r13
   2cee6:	mov    r9,rdx
   2cee9:	mov    ecx,0x1d
   2ceee:	lea    r8,[rip+0x3ad85]        # 67c7a <primes.6089+0x1b9a>
   2cef5:	push   r12
   2cef7:	mov    edx,0x1
   2cefc:	mov    r12,rsi
   2ceff:	mov    esi,0x1d
   2cf04:	push   rbp
   2cf05:	mov    rbp,rdi
   2cf08:	sub    rsp,0x30
   2cf0c:	mov    rax,QWORD PTR fs:0x28
   2cf15:	mov    QWORD PTR [rsp+0x28],rax
   2cf1a:	xor    eax,eax
   2cf1c:	mov    r13,rsp
   2cf1f:	mov    rdi,r13
   2cf22:	call   c9d0 <__snprintf_chk@plt>
   2cf27:	cmp    eax,0x1d
   2cf2a:	ja     2cf70 <setoptval+0x90>
   2cf2c:	mov    rdi,rbp
   2cf2f:	call   2ad70 <command_by_name>
   2cf34:	mov    edi,eax
   2cf36:	cmp    eax,0xa5
   2cf3b:	ja     2cf70 <setoptval+0x90>
   2cf3d:	mov    rdx,r12
   2cf40:	mov    rsi,r13
   2cf43:	call   2c4a0 <setval_internal.part.0>
   2cf48:	test   al,al
   2cf4a:	je     2cf70 <setoptval+0x90>
   2cf4c:	mov    rax,QWORD PTR [rsp+0x28]
   2cf51:	xor    rax,QWORD PTR fs:0x28
   2cf5a:	jne    2cf7a <setoptval+0x9a>
   2cf5c:	add    rsp,0x30
   2cf60:	pop    rbp
   2cf61:	pop    r12
   2cf63:	pop    r13
   2cf65:	ret    
   2cf66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2cf70:	mov    edi,0x2
   2cf75:	call   c060 <exit@plt>
   2cf7a:	call   c7b0 <__stack_chk_fail@plt>
   2cf7f:	nop

000000000002cf80 <run_command>:
   2cf80:	endbr64 
   2cf84:	push   r12
   2cf86:	push   rbp
   2cf87:	mov    rbp,rdi
   2cf8a:	sub    rsp,0x28
   2cf8e:	mov    rax,QWORD PTR fs:0x28
   2cf97:	mov    QWORD PTR [rsp+0x18],rax
   2cf9c:	xor    eax,eax
   2cf9e:	lea    rcx,[rsp+0x4]
   2cfa3:	lea    rdx,[rsp+0x10]
   2cfa8:	lea    rsi,[rsp+0x8]
   2cfad:	call   2adf0 <parse_line>
   2cfb2:	test   eax,eax
   2cfb4:	jne    2d00e <run_command+0x8e>
   2cfb6:	mov    edi,DWORD PTR [rsp+0x4]
   2cfba:	cmp    edi,0xa5
   2cfc0:	ja     2d050 <run_command+0xd0>
   2cfc6:	mov    rdx,QWORD PTR [rsp+0x10]
   2cfcb:	mov    rsi,QWORD PTR [rsp+0x8]
   2cfd0:	call   2c4a0 <setval_internal.part.0>
   2cfd5:	test   al,al
   2cfd7:	je     2d050 <run_command+0xd0>
   2cfd9:	mov    rdi,QWORD PTR [rsp+0x8]
   2cfde:	call   4bdc0 <rpl_free>
   2cfe3:	mov    rdi,QWORD PTR [rsp+0x10]
   2cfe8:	mov    QWORD PTR [rsp+0x8],0x0
   2cff1:	call   4bdc0 <rpl_free>
   2cff6:	mov    rax,QWORD PTR [rsp+0x18]
   2cffb:	xor    rax,QWORD PTR fs:0x28
   2d004:	jne    2d05a <run_command+0xda>
   2d006:	add    rsp,0x28
   2d00a:	pop    rbp
   2d00b:	pop    r12
   2d00d:	ret    
   2d00e:	mov    rdi,rbp
   2d011:	call   4b5b0 <quote>
   2d016:	mov    r12,QWORD PTR [rip+0x5d403]        # 8a420 <exec_name>
   2d01d:	mov    edx,0x5
   2d022:	xor    edi,edi
   2d024:	lea    rsi,[rip+0x3b71d]        # 68748 <primes.6089+0x2668>
   2d02b:	mov    rbp,rax
   2d02e:	call   c780 <dcgettext@plt>
   2d033:	mov    r8,rbp
   2d036:	mov    rcx,r12
   2d039:	mov    esi,0x1
   2d03e:	mov    rdi,QWORD PTR [rip+0x5649b]        # 834e0 <stderr@@GLIBC_2.2.5>
   2d045:	mov    rdx,rax
   2d048:	xor    eax,eax
   2d04a:	call   bfd0 <__fprintf_chk@plt>
   2d04f:	nop
   2d050:	mov    edi,0x2
   2d055:	call   c060 <exit@plt>
   2d05a:	call   c7b0 <__stack_chk_fail@plt>
   2d05f:	nop

000000000002d060 <cleanup>:
   2d060:	endbr64 
   2d064:	mov    eax,DWORD PTR [rip+0x5cff6]        # 8a060 <cleaned_up>
   2d06a:	lea    edx,[rax+0x1]
   2d06d:	mov    DWORD PTR [rip+0x5cfed],edx        # 8a060 <cleaned_up>
   2d073:	test   eax,eax
   2d075:	jne    2d0c0 <cleanup+0x60>
   2d077:	sub    rsp,0x8
   2d07b:	cmp    QWORD PTR [rip+0x5d105],0x0        # 8a188 <opt+0x108>
   2d083:	je     2d08a <cleanup+0x2a>
   2d085:	call   3a8e0 <warc_close>
   2d08a:	call   2db30 <log_close>
   2d08f:	mov    rdi,QWORD PTR [rip+0x5d3aa]        # 8a440 <output_stream>
   2d096:	test   rdi,rdi
   2d099:	je     2d0b9 <cleanup+0x59>
   2d09b:	cmp    rdi,QWORD PTR [rip+0x5643e]        # 834e0 <stderr@@GLIBC_2.2.5>
   2d0a2:	je     2d0b9 <cleanup+0x59>
   2d0a4:	mov    QWORD PTR [rip+0x5d391],0x0        # 8a440 <output_stream>
   2d0af:	call   c8b0 <fclose@plt>
   2d0b4:	cmp    eax,0xffffffff
   2d0b7:	je     2d0c8 <cleanup+0x68>
   2d0b9:	add    rsp,0x8
   2d0bd:	ret    
   2d0be:	xchg   ax,ax
   2d0c0:	ret    
   2d0c1:	nop    DWORD PTR [rax+0x0]
   2d0c8:	mov    edi,0x31
   2d0cd:	add    rsp,0x8
   2d0d1:	jmp    3f7b0 <inform_exit_status>
   2d0d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000002d0e0 <saved_append>:
   2d0e0:	cmp    BYTE PTR [rdi],0x0
   2d0e3:	je     2d398 <saved_append+0x2b8>
   2d0e9:	push   r15
   2d0eb:	push   r14
   2d0ed:	push   r13
   2d0ef:	lea    r13,[rip+0x5864a]        # 85740 <log_lines>
   2d0f6:	push   r12
   2d0f8:	push   rbp
   2d0f9:	mov    rbp,rdi
   2d0fc:	push   rbx
   2d0fd:	sub    rsp,0x18
   2d101:	jmp    2d179 <saved_append+0x99>
   2d103:	nop    DWORD PTR [rax+rax*1+0x0]
   2d108:	cmp    eax,0xffffffff
   2d10b:	jne    2d278 <saved_append+0x198>
   2d111:	mov    DWORD PTR [rip+0x5217d],0x0        # 7f298 <log_line_current>
   2d11b:	mov    r14,r13
   2d11e:	cmp    r12d,0x80
   2d125:	jle    2d250 <saved_append+0x170>
   2d12b:	mov    rsi,rbx
   2d12e:	mov    rdi,rbp
   2d131:	call   3b8a0 <strdupdelim>
   2d136:	mov    QWORD PTR [r14+0x88],rax
   2d13d:	mov    QWORD PTR [r14+0x90],rax
   2d144:	movzx  eax,BYTE PTR [rbx-0x1]
   2d148:	cmp    al,0xa
   2d14a:	setne  BYTE PTR [rip+0x585df]        # 85730 <trailing_line>
   2d151:	jne    2d16d <saved_append+0x8d>
   2d153:	mov    eax,DWORD PTR [rip+0x5213f]        # 7f298 <log_line_current>
   2d159:	mov    edx,0x0
   2d15e:	add    eax,0x1
   2d161:	cmp    eax,0x17
   2d164:	cmovg  eax,edx
   2d167:	mov    DWORD PTR [rip+0x5212b],eax        # 7f298 <log_line_current>
   2d16d:	cmp    BYTE PTR [rbx],0x0
   2d170:	je     2d360 <saved_append+0x280>
   2d176:	mov    rbp,rbx
   2d179:	mov    esi,0xa
   2d17e:	mov    rdi,rbp
   2d181:	call   c6c0 <strchr@plt>
   2d186:	lea    rbx,[rax+0x1]
   2d18a:	test   rax,rax
   2d18d:	je     2d238 <saved_append+0x158>
   2d193:	mov    r12,rbx
   2d196:	sub    r12,rbp
   2d199:	cmp    ebx,ebp
   2d19b:	je     2d16d <saved_append+0x8d>
   2d19d:	cmp    BYTE PTR [rip+0x5858c],0x0        # 85730 <trailing_line>
   2d1a4:	movsxd rax,DWORD PTR [rip+0x520ed]        # 7f298 <log_line_current>
   2d1ab:	je     2d108 <saved_append+0x28>
   2d1b1:	lea    rdx,[rax+rax*8]
   2d1b5:	movsxd r8,r12d
   2d1b8:	lea    rax,[rax+rdx*2]
   2d1bc:	lea    r15,[r13+rax*8+0x0]
   2d1c1:	mov    rdi,QWORD PTR [r15+0x88]
   2d1c8:	test   rdi,rdi
   2d1cb:	je     2d2c0 <saved_append+0x1e0>
   2d1d1:	mov    QWORD PTR [rsp+0x8],r8
   2d1d6:	mov    QWORD PTR [rsp],rdi
   2d1da:	call   c310 <strlen@plt>
   2d1df:	mov    rdi,QWORD PTR [rsp]
   2d1e3:	add    r12d,eax
   2d1e6:	mov    r14,rax
   2d1e9:	lea    esi,[r12+0x1]
   2d1ee:	movsxd r12,r12d
   2d1f1:	movsxd rsi,esi
   2d1f4:	call   4b870 <xrealloc>
   2d1f9:	mov    r8,QWORD PTR [rsp+0x8]
   2d1fe:	movsxd rdi,r14d
   2d201:	mov    rsi,rbp
   2d204:	mov    QWORD PTR [r15+0x88],rax
   2d20b:	add    rdi,rax
   2d20e:	mov    rdx,r8
   2d211:	call   cb30 <memcpy@plt>
   2d216:	mov    rax,QWORD PTR [r15+0x88]
   2d21d:	mov    BYTE PTR [rax+r12*1],0x0
   2d222:	mov    rax,QWORD PTR [r15+0x88]
   2d229:	mov    QWORD PTR [r15+0x90],rax
   2d230:	jmp    2d144 <saved_append+0x64>
   2d235:	nop    DWORD PTR [rax]
   2d238:	mov    rdi,rbp
   2d23b:	call   c310 <strlen@plt>
   2d240:	lea    rbx,[rbp+rax*1+0x0]
   2d245:	jmp    2d193 <saved_append+0xb3>
   2d24a:	nop    WORD PTR [rax+rax*1+0x0]
   2d250:	movsxd r12,r12d
   2d253:	mov    rsi,rbp
   2d256:	mov    rdi,r14
   2d259:	mov    rdx,r12
   2d25c:	call   cb30 <memcpy@plt>
   2d261:	mov    BYTE PTR [r14+r12*1],0x0
   2d266:	mov    QWORD PTR [r14+0x90],r14
   2d26d:	jmp    2d144 <saved_append+0x64>
   2d272:	nop    WORD PTR [rax+rax*1+0x0]
   2d278:	lea    rdx,[rax+rax*8]
   2d27c:	lea    rax,[rax+rdx*2]
   2d280:	lea    r14,[r13+rax*8+0x0]
   2d285:	mov    rdi,QWORD PTR [r14+0x88]
   2d28c:	call   4bdc0 <rpl_free>
   2d291:	movsxd rax,DWORD PTR [rip+0x52000]        # 7f298 <log_line_current>
   2d298:	mov    QWORD PTR [r14+0x88],0x0
   2d2a3:	mov    QWORD PTR [r14+0x90],0x0
   2d2ae:	lea    rdx,[rax+rax*8]
   2d2b2:	lea    rax,[rax+rdx*2]
   2d2b6:	lea    r14,[r13+rax*8+0x0]
   2d2bb:	jmp    2d11e <saved_append+0x3e>
   2d2c0:	mov    rdi,r15
   2d2c3:	mov    edx,DWORD PTR [rdi]
   2d2c5:	add    rdi,0x4
   2d2c9:	lea    eax,[rdx-0x1010101]
   2d2cf:	not    edx
   2d2d1:	and    eax,edx
   2d2d3:	and    eax,0x80808080
   2d2d8:	je     2d2c3 <saved_append+0x1e3>
   2d2da:	mov    edx,eax
   2d2dc:	shr    edx,0x10
   2d2df:	test   eax,0x8080
   2d2e4:	cmove  eax,edx
   2d2e7:	lea    rdx,[rdi+0x2]
   2d2eb:	cmove  rdi,rdx
   2d2ef:	mov    ecx,eax
   2d2f1:	add    cl,al
   2d2f3:	sbb    rdi,0x3
   2d2f7:	sub    rdi,r15
   2d2fa:	add    r12d,edi
   2d2fd:	movsxd r14,edi
   2d300:	cmp    r12d,0x80
   2d307:	jle    2d370 <saved_append+0x290>
   2d309:	lea    edi,[r12+0x1]
   2d30e:	mov    QWORD PTR [rsp+0x8],r8
   2d313:	movsxd r12,r12d
   2d316:	movsxd rdi,edi
   2d319:	call   4b850 <xmalloc>
   2d31e:	mov    rdx,r14
   2d321:	mov    rsi,r15
   2d324:	mov    QWORD PTR [r15+0x88],rax
   2d32b:	mov    rdi,rax
   2d32e:	call   cb30 <memcpy@plt>
   2d333:	mov    r8,QWORD PTR [rsp+0x8]
   2d338:	mov    rsi,rbp
   2d33b:	lea    rdi,[rax+r14*1]
   2d33f:	mov    QWORD PTR [rsp],rax
   2d343:	mov    rdx,r8
   2d346:	call   cb30 <memcpy@plt>
   2d34b:	mov    rcx,QWORD PTR [rsp]
   2d34f:	mov    BYTE PTR [rcx+r12*1],0x0
   2d354:	mov    QWORD PTR [r15+0x90],rcx
   2d35b:	jmp    2d144 <saved_append+0x64>
   2d360:	add    rsp,0x18
   2d364:	pop    rbx
   2d365:	pop    rbp
   2d366:	pop    r12
   2d368:	pop    r13
   2d36a:	pop    r14
   2d36c:	pop    r15
   2d36e:	ret    
   2d36f:	nop
   2d370:	lea    rdi,[r15+r14*1]
   2d374:	mov    rdx,r8
   2d377:	mov    rsi,rbp
   2d37a:	movsxd r12,r12d
   2d37d:	call   cb30 <memcpy@plt>
   2d382:	mov    BYTE PTR [r15+r12*1],0x0
   2d387:	mov    QWORD PTR [r15+0x90],r15
   2d38e:	jmp    2d144 <saved_append+0x64>
   2d393:	nop    DWORD PTR [rax+rax*1+0x0]
   2d398:	ret    
   2d399:	nop    DWORD PTR [rax+0x0]

000000000002d3a0 <escnonprint_internal>:
   2d3a0:	push   r14
   2d3a2:	push   r13
   2d3a4:	mov    r13,rdi
   2d3a7:	push   r12
   2d3a9:	push   rbp
   2d3aa:	push   rbx
   2d3ab:	movsx  eax,BYTE PTR [rdi]
   2d3ae:	test   al,al
   2d3b0:	je     2d558 <escnonprint_internal+0x1b8>
   2d3b6:	mov    r14d,edx
   2d3b9:	mov    ebp,esi
   2d3bb:	mov    rcx,rdi
   2d3be:	xor    ebx,ebx
   2d3c0:	sub    eax,0x20
   2d3c3:	cmp    eax,0x5f
   2d3c6:	sbb    ebx,0xffffffff
   2d3c9:	movsx  eax,BYTE PTR [rcx+0x1]
   2d3cd:	add    rcx,0x1
   2d3d1:	test   al,al
   2d3d3:	jne    2d3c0 <escnonprint_internal+0x20>
   2d3d5:	test   ebx,ebx
   2d3d7:	je     2d558 <escnonprint_internal+0x1b8>
   2d3dd:	movsxd r12,DWORD PTR [rip+0x582fc]        # 856e0 <ringpos.7183>
   2d3e4:	lea    rax,[rip+0x58315]        # 85700 <ring>
   2d3eb:	mov    rdi,r13
   2d3ee:	shl    r12,0x4
   2d3f2:	add    r12,rax
   2d3f5:	call   c310 <strlen@plt>
   2d3fa:	mov    rdi,QWORD PTR [r12]
   2d3fe:	mov    r8,rax
   2d401:	lea    eax,[rbx+rbx*1]
   2d404:	add    ebx,eax
   2d406:	cmp    r14d,0x8
   2d40a:	cmovne ebx,eax
   2d40d:	lea    ebx,[rbx+r8*1+0x1]
   2d412:	test   rdi,rdi
   2d415:	je     2d41e <escnonprint_internal+0x7e>
   2d417:	cmp    DWORD PTR [r12+0x8],ebx
   2d41c:	jge    2d432 <escnonprint_internal+0x92>
   2d41e:	movsxd rsi,ebx
   2d421:	call   4b870 <xrealloc>
   2d426:	mov    DWORD PTR [r12+0x8],ebx
   2d42b:	mov    QWORD PTR [r12],rax
   2d42f:	mov    rdi,rax
   2d432:	cmp    r14d,0x8
   2d436:	jne    2d4e0 <escnonprint_internal+0x140>
   2d43c:	movzx  eax,BYTE PTR [r13+0x0]
   2d441:	lea    rcx,[r13+0x1]
   2d445:	test   al,al
   2d447:	jne    2d462 <escnonprint_internal+0xc2>
   2d449:	jmp    2d4a2 <escnonprint_internal+0x102>
   2d44b:	nop    DWORD PTR [rax+rax*1+0x0]
   2d450:	add    rcx,0x1
   2d454:	mov    BYTE PTR [rdi],al
   2d456:	add    rdi,0x1
   2d45a:	movzx  eax,BYTE PTR [rcx-0x1]
   2d45e:	test   al,al
   2d460:	je     2d4a2 <escnonprint_internal+0x102>
   2d462:	movzx  edx,al
   2d465:	sub    edx,0x20
   2d468:	cmp    edx,0x5e
   2d46b:	jbe    2d450 <escnonprint_internal+0xb0>
   2d46d:	mov    edx,eax
   2d46f:	add    rcx,0x1
   2d473:	mov    BYTE PTR [rdi],bpl
   2d476:	add    rdi,0x4
   2d47a:	shr    dl,0x6
   2d47d:	add    edx,0x30
   2d480:	mov    BYTE PTR [rdi-0x3],dl
   2d483:	mov    edx,eax
   2d485:	and    eax,0x7
   2d488:	shr    dl,0x3
   2d48b:	add    eax,0x30
   2d48e:	and    edx,0x7
   2d491:	mov    BYTE PTR [rdi-0x1],al
   2d494:	add    edx,0x30
   2d497:	mov    BYTE PTR [rdi-0x2],dl
   2d49a:	movzx  eax,BYTE PTR [rcx-0x1]
   2d49e:	test   al,al
   2d4a0:	jne    2d462 <escnonprint_internal+0xc2>
   2d4a2:	mov    eax,DWORD PTR [rip+0x58238]        # 856e0 <ringpos.7183>
   2d4a8:	mov    BYTE PTR [rdi],0x0
   2d4ab:	pop    rbx
   2d4ac:	pop    rbp
   2d4ad:	lea    edx,[rax+0x1]
   2d4b0:	movsxd rax,edx
   2d4b3:	mov    ecx,edx
   2d4b5:	imul   rax,rax,0x55555556
   2d4bc:	sar    ecx,0x1f
   2d4bf:	shr    rax,0x20
   2d4c3:	sub    eax,ecx
   2d4c5:	lea    eax,[rax+rax*2]
   2d4c8:	sub    edx,eax
   2d4ca:	mov    rax,QWORD PTR [r12]
   2d4ce:	pop    r12
   2d4d0:	pop    r13
   2d4d2:	pop    r14
   2d4d4:	mov    DWORD PTR [rip+0x58206],edx        # 856e0 <ringpos.7183>
   2d4da:	ret    
   2d4db:	nop    DWORD PTR [rax+rax*1+0x0]
   2d4e0:	cmp    r14d,0x10
   2d4e4:	jne    cc8a <escnonprint_internal.cold>
   2d4ea:	movzx  eax,BYTE PTR [r13+0x0]
   2d4ef:	lea    rcx,[r13+0x1]
   2d4f3:	lea    rsi,[rip+0x3b336]        # 68830 <primes.6089+0x2750>
   2d4fa:	test   al,al
   2d4fc:	je     2d4a2 <escnonprint_internal+0x102>
   2d4fe:	movzx  edx,al
   2d501:	sub    edx,0x20
   2d504:	cmp    edx,0x5e
   2d507:	jbe    2d54a <escnonprint_internal+0x1aa>
   2d509:	nop    DWORD PTR [rax+0x0]
   2d510:	mov    edx,eax
   2d512:	and    eax,0xf
   2d515:	mov    BYTE PTR [rdi],bpl
   2d518:	add    rdi,0x3
   2d51c:	shr    dl,0x4
   2d51f:	movzx  eax,BYTE PTR [rsi+rax*1]
   2d523:	and    edx,0xf
   2d526:	movzx  edx,BYTE PTR [rsi+rdx*1]
   2d52a:	mov    BYTE PTR [rdi-0x1],al
   2d52d:	mov    BYTE PTR [rdi-0x2],dl
   2d530:	movzx  eax,BYTE PTR [rcx]
   2d533:	add    rcx,0x1
   2d537:	test   al,al
   2d539:	je     2d4a2 <escnonprint_internal+0x102>
   2d53f:	movzx  edx,al
   2d542:	sub    edx,0x20
   2d545:	cmp    edx,0x5e
   2d548:	ja     2d510 <escnonprint_internal+0x170>
   2d54a:	mov    BYTE PTR [rdi],al
   2d54c:	add    rdi,0x1
   2d550:	jmp    2d530 <escnonprint_internal+0x190>
   2d552:	nop    WORD PTR [rax+rax*1+0x0]
   2d558:	pop    rbx
   2d559:	mov    rax,r13
   2d55c:	pop    rbp
   2d55d:	pop    r12
   2d55f:	pop    r13
   2d561:	pop    r14
   2d563:	ret    
   2d564:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2d56f:	nop

000000000002d570 <get_warc_log_fp.part.0>:
   2d570:	xor    eax,eax
   2d572:	cmp    QWORD PTR [rip+0x59036],0x0        # 865b0 <logfp>
   2d57a:	jne    2d583 <get_warc_log_fp.part.0+0x13>
   2d57c:	mov    rax,QWORD PTR [rip+0x55f5d]        # 834e0 <stderr@@GLIBC_2.2.5>
   2d583:	ret    
   2d584:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2d58f:	nop

000000000002d590 <log_dump_context>:
   2d590:	push   r15
   2d592:	push   r14
   2d594:	push   r13
   2d596:	push   r12
   2d598:	push   rbp
   2d599:	push   rbx
   2d59a:	sub    rsp,0x8
   2d59e:	cmp    BYTE PTR [rip+0x58fdd],0x0        # 86582 <inhibit_logging>
   2d5a5:	mov    ebx,DWORD PTR [rip+0x51ced]        # 7f298 <log_line_current>
   2d5ab:	jne    2d6e0 <log_dump_context+0x150>
   2d5b1:	mov    r15,QWORD PTR [rip+0x58ff8]        # 865b0 <logfp>
   2d5b8:	mov    rbp,QWORD PTR [rip+0x58fc9]        # 86588 <warclogfp>
   2d5bf:	test   r15,r15
   2d5c2:	cmove  r15,QWORD PTR [rip+0x55f16]        # 834e0 <stderr@@GLIBC_2.2.5>
   2d5ca:	test   rbp,rbp
   2d5cd:	je     2d6b8 <log_dump_context+0x128>
   2d5d3:	test   r15,r15
   2d5d6:	je     2d6e0 <log_dump_context+0x150>
   2d5dc:	cmp    ebx,0xffffffff
   2d5df:	je     2d6e0 <log_dump_context+0x150>
   2d5e5:	cmp    BYTE PTR [rip+0x58144],0x0        # 85730 <trailing_line>
   2d5ec:	jne    2d6c8 <log_dump_context+0x138>
   2d5f2:	lea    r12,[rip+0x58147]        # 85740 <log_lines>
   2d5f9:	xor    r13d,r13d
   2d5fc:	nop    DWORD PTR [rax+0x0]
   2d600:	movsxd rax,ebx
   2d603:	lea    rdx,[rax+rax*8]
   2d607:	lea    rax,[rax+rdx*2]
   2d60b:	lea    r14,[r12+rax*8]
   2d60f:	mov    rdi,QWORD PTR [r14+0x90]
   2d616:	test   rdi,rdi
   2d619:	je     2d637 <log_dump_context+0xa7>
   2d61b:	mov    rsi,r15
   2d61e:	call   c580 <fputs@plt>
   2d623:	test   rbp,rbp
   2d626:	je     2d637 <log_dump_context+0xa7>
   2d628:	mov    rdi,QWORD PTR [r14+0x90]
   2d62f:	mov    rsi,rbp
   2d632:	call   c580 <fputs@plt>
   2d637:	add    ebx,0x1
   2d63a:	cmp    ebx,0x18
   2d63d:	cmovge ebx,r13d
   2d641:	cmp    DWORD PTR [rip+0x51c51],ebx        # 7f298 <log_line_current>
   2d647:	jne    2d600 <log_dump_context+0x70>
   2d649:	cmp    BYTE PTR [rip+0x580e0],0x0        # 85730 <trailing_line>
   2d650:	je     2d696 <log_dump_context+0x106>
   2d652:	movsxd rbx,ebx
   2d655:	lea    rax,[rbx+rbx*8]
   2d659:	lea    rax,[rbx+rax*2]
   2d65d:	mov    rdi,QWORD PTR [r12+rax*8+0x90]
   2d665:	test   rdi,rdi
   2d668:	je     2d696 <log_dump_context+0x106>
   2d66a:	mov    rsi,r15
   2d66d:	call   c580 <fputs@plt>
   2d672:	test   rbp,rbp
   2d675:	je     2d696 <log_dump_context+0x106>
   2d677:	movsxd rax,DWORD PTR [rip+0x51c1a]        # 7f298 <log_line_current>
   2d67e:	mov    rsi,rbp
   2d681:	lea    rdx,[rax+rax*8]
   2d685:	lea    rax,[rax+rdx*2]
   2d689:	mov    rdi,QWORD PTR [r12+rax*8+0x90]
   2d691:	call   c580 <fputs@plt>
   2d696:	mov    rdi,r15
   2d699:	call   4bd70 <rpl_fflush>
   2d69e:	add    rsp,0x8
   2d6a2:	mov    rdi,rbp
   2d6a5:	pop    rbx
   2d6a6:	pop    rbp
   2d6a7:	pop    r12
   2d6a9:	pop    r13
   2d6ab:	pop    r14
   2d6ad:	pop    r15
   2d6af:	jmp    4bd70 <rpl_fflush>
   2d6b4:	nop    DWORD PTR [rax+0x0]
   2d6b8:	call   2d570 <get_warc_log_fp.part.0>
   2d6bd:	mov    rbp,rax
   2d6c0:	jmp    2d5d3 <log_dump_context+0x43>
   2d6c5:	nop    DWORD PTR [rax]
   2d6c8:	add    ebx,0x1
   2d6cb:	mov    eax,0x0
   2d6d0:	cmp    ebx,0x18
   2d6d3:	cmovge ebx,eax
   2d6d6:	jmp    2d5f2 <log_dump_context+0x62>
   2d6db:	nop    DWORD PTR [rax+rax*1+0x0]
   2d6e0:	add    rsp,0x8
   2d6e4:	pop    rbx
   2d6e5:	pop    rbp
   2d6e6:	pop    r12
   2d6e8:	pop    r13
   2d6ea:	pop    r14
   2d6ec:	pop    r15
   2d6ee:	ret    
   2d6ef:	nop

000000000002d6f0 <log_set_warc_log_fp>:
   2d6f0:	endbr64 
   2d6f4:	mov    QWORD PTR [rip+0x58e8d],rdi        # 86588 <warclogfp>
   2d6fb:	ret    
   2d6fc:	nop    DWORD PTR [rax+0x0]

000000000002d700 <logflush>:
   2d700:	endbr64 
   2d704:	cmp    BYTE PTR [rip+0x58e77],0x0        # 86582 <inhibit_logging>
   2d70b:	jne    2d780 <logflush+0x80>
   2d70d:	mov    rdi,QWORD PTR [rip+0x58e9c]        # 865b0 <logfp>
   2d714:	push   rbp
   2d715:	mov    rbp,QWORD PTR [rip+0x58e6c]        # 86588 <warclogfp>
   2d71c:	test   rdi,rdi
   2d71f:	je     2d748 <logflush+0x48>
   2d721:	test   rbp,rbp
   2d724:	jne    2d72e <logflush+0x2e>
   2d726:	call   2d570 <get_warc_log_fp.part.0>
   2d72b:	mov    rbp,rax
   2d72e:	call   4bd70 <rpl_fflush>
   2d733:	test   rbp,rbp
   2d736:	jne    2d759 <logflush+0x59>
   2d738:	mov    BYTE PTR [rip+0x58e41],0x0        # 86580 <needs_flushing>
   2d73f:	pop    rbp
   2d740:	ret    
   2d741:	nop    DWORD PTR [rax+0x0]
   2d748:	mov    rdi,QWORD PTR [rip+0x55d91]        # 834e0 <stderr@@GLIBC_2.2.5>
   2d74f:	test   rbp,rbp
   2d752:	je     2d770 <logflush+0x70>
   2d754:	test   rdi,rdi
   2d757:	jne    2d72e <logflush+0x2e>
   2d759:	mov    rdi,rbp
   2d75c:	call   4bd70 <rpl_fflush>
   2d761:	mov    BYTE PTR [rip+0x58e18],0x0        # 86580 <needs_flushing>
   2d768:	pop    rbp
   2d769:	ret    
   2d76a:	nop    WORD PTR [rax+rax*1+0x0]
   2d770:	call   2d570 <get_warc_log_fp.part.0>
   2d775:	mov    rbp,rax
   2d778:	test   rdi,rdi
   2d77b:	je     2d733 <logflush+0x33>
   2d77d:	jmp    2d72e <logflush+0x2e>
   2d77f:	nop
   2d780:	mov    BYTE PTR [rip+0x58df9],0x0        # 86580 <needs_flushing>
   2d787:	ret    
   2d788:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002d790 <log_vprintf_internal>:
   2d790:	push   r15
   2d792:	push   r14
   2d794:	push   r13
   2d796:	push   r12
   2d798:	push   rbp
   2d799:	push   rbx
   2d79a:	sub    rsp,0x98
   2d7a1:	movzx  r12d,BYTE PTR [rip+0x58dd9]        # 86582 <inhibit_logging>
   2d7a9:	mov    rax,QWORD PTR fs:0x28
   2d7b2:	mov    QWORD PTR [rsp+0x88],rax
   2d7ba:	xor    eax,eax
   2d7bc:	test   r12b,r12b
   2d7bf:	jne    2d960 <log_vprintf_internal+0x1d0>
   2d7c5:	mov    r14,QWORD PTR [rip+0x58de4]        # 865b0 <logfp>
   2d7cc:	mov    rbx,rdi
   2d7cf:	mov    r8,rsi
   2d7d2:	mov    r9,rdx
   2d7d5:	test   r14,r14
   2d7d8:	je     2d8b0 <log_vprintf_internal+0x120>
   2d7de:	mov    rbp,QWORD PTR [rip+0x58da3]        # 86588 <warclogfp>
   2d7e5:	test   rbp,rbp
   2d7e8:	je     2d8f5 <log_vprintf_internal+0x165>
   2d7ee:	mov    r13d,DWORD PTR [rbx+0xc]
   2d7f2:	test   r13d,r13d
   2d7f5:	je     2d8d8 <log_vprintf_internal+0x148>
   2d7fb:	mov    r15,QWORD PTR [rbx]
   2d7fe:	movsxd rsi,r13d
   2d801:	mov    rcx,0xffffffffffffffff
   2d808:	mov    edx,0x1
   2d80d:	mov    rdi,r15
   2d810:	call   c210 <__vsnprintf_chk@plt>
   2d815:	cmp    eax,0xffffffff
   2d818:	je     2d990 <log_vprintf_internal+0x200>
   2d81e:	cmp    r13d,eax
   2d821:	jle    2d970 <log_vprintf_internal+0x1e0>
   2d827:	cmp    BYTE PTR [rip+0x58d53],0x0        # 86581 <save_context_p>
   2d82e:	jne    2d950 <log_vprintf_internal+0x1c0>
   2d834:	mov    rsi,r14
   2d837:	mov    rdi,r15
   2d83a:	call   c580 <fputs@plt>
   2d83f:	test   rbp,rbp
   2d842:	je     2d84d <log_vprintf_internal+0xbd>
   2d844:	cmp    rbp,r14
   2d847:	jne    2d930 <log_vprintf_internal+0x1a0>
   2d84d:	mov    rdi,QWORD PTR [rbx]
   2d850:	call   4bdc0 <rpl_free>
   2d855:	mov    QWORD PTR [rbx],0x0
   2d85c:	movzx  r12d,BYTE PTR [rip+0x51a38]        # 7f29c <flush_log_p>
   2d864:	test   r12b,r12b
   2d867:	jne    2d940 <log_vprintf_internal+0x1b0>
   2d86d:	mov    BYTE PTR [rip+0x58d0c],0x1        # 86580 <needs_flushing>
   2d874:	mov    r12d,0x1
   2d87a:	mov    rax,QWORD PTR [rsp+0x88]
   2d882:	xor    rax,QWORD PTR fs:0x28
   2d88b:	jne    2d9aa <log_vprintf_internal+0x21a>
   2d891:	add    rsp,0x98
   2d898:	mov    eax,r12d
   2d89b:	pop    rbx
   2d89c:	pop    rbp
   2d89d:	pop    r12
   2d89f:	pop    r13
   2d8a1:	pop    r14
   2d8a3:	pop    r15
   2d8a5:	ret    
   2d8a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   2d8b0:	mov    rbp,QWORD PTR [rip+0x58cd1]        # 86588 <warclogfp>
   2d8b7:	mov    r14,QWORD PTR [rip+0x55c22]        # 834e0 <stderr@@GLIBC_2.2.5>
   2d8be:	test   rbp,rbp
   2d8c1:	je     2d8f0 <log_vprintf_internal+0x160>
   2d8c3:	test   r14,r14
   2d8c6:	je     2d87a <log_vprintf_internal+0xea>
   2d8c8:	mov    r13d,DWORD PTR [rbx+0xc]
   2d8cc:	test   r13d,r13d
   2d8cf:	jne    2d7fb <log_vprintf_internal+0x6b>
   2d8d5:	nop    DWORD PTR [rax]
   2d8d8:	mov    esi,0x80
   2d8dd:	mov    r13d,0x80
   2d8e3:	mov    r15,rsp
   2d8e6:	jmp    2d801 <log_vprintf_internal+0x71>
   2d8eb:	nop    DWORD PTR [rax+rax*1+0x0]
   2d8f0:	test   r14,r14
   2d8f3:	je     2d87a <log_vprintf_internal+0xea>
   2d8f5:	call   2d570 <get_warc_log_fp.part.0>
   2d8fa:	cmp    BYTE PTR [rip+0x58c80],0x1        # 86581 <save_context_p>
   2d901:	mov    rbp,rax
   2d904:	je     2d7ee <log_vprintf_internal+0x5e>
   2d90a:	test   rax,rax
   2d90d:	jne    2d7ee <log_vprintf_internal+0x5e>
   2d913:	mov    rcx,r9
   2d916:	mov    rdx,r8
   2d919:	mov    esi,0x1
   2d91e:	mov    rdi,r14
   2d921:	call   c370 <__vfprintf_chk@plt>
   2d926:	jmp    2d85c <log_vprintf_internal+0xcc>
   2d92b:	nop    DWORD PTR [rax+rax*1+0x0]
   2d930:	mov    rsi,rbp
   2d933:	mov    rdi,r15
   2d936:	call   c580 <fputs@plt>
   2d93b:	jmp    2d84d <log_vprintf_internal+0xbd>
   2d940:	call   2d700 <logflush>
   2d945:	jmp    2d87a <log_vprintf_internal+0xea>
   2d94a:	nop    WORD PTR [rax+rax*1+0x0]
   2d950:	mov    rdi,r15
   2d953:	call   2d0e0 <saved_append>
   2d958:	jmp    2d834 <log_vprintf_internal+0xa4>
   2d95d:	nop    DWORD PTR [rax]
   2d960:	xor    r12d,r12d
   2d963:	jmp    2d87a <log_vprintf_internal+0xea>
   2d968:	nop    DWORD PTR [rax+rax*1+0x0]
   2d970:	lea    ebp,[rax+0x1]
   2d973:	mov    rdi,QWORD PTR [rbx]
   2d976:	movsxd rsi,ebp
   2d979:	call   4b870 <xrealloc>
   2d97e:	mov    DWORD PTR [rbx+0xc],ebp
   2d981:	mov    QWORD PTR [rbx],rax
   2d984:	jmp    2d87a <log_vprintf_internal+0xea>
   2d989:	nop    DWORD PTR [rax+0x0]
   2d990:	add    r13d,r13d
   2d993:	mov    rdi,QWORD PTR [rbx]
   2d996:	movsxd rsi,r13d
   2d999:	call   4b870 <xrealloc>
   2d99e:	mov    DWORD PTR [rbx+0xc],r13d
   2d9a2:	mov    QWORD PTR [rbx],rax
   2d9a5:	jmp    2d87a <log_vprintf_internal+0xea>
   2d9aa:	call   c7b0 <__stack_chk_fail@plt>
   2d9af:	nop

000000000002d9b0 <log_set_flush>:
   2d9b0:	endbr64 
   2d9b4:	cmp    BYTE PTR [rip+0x518e1],dil        # 7f29c <flush_log_p>
   2d9bb:	je     2d9d8 <log_set_flush+0x28>
   2d9bd:	test   dil,dil
   2d9c0:	je     2d9e0 <log_set_flush+0x30>
   2d9c2:	cmp    BYTE PTR [rip+0x58bb7],0x0        # 86580 <needs_flushing>
   2d9c9:	jne    2d9f0 <log_set_flush+0x40>
   2d9cb:	mov    BYTE PTR [rip+0x518ca],0x1        # 7f29c <flush_log_p>
   2d9d2:	ret    
   2d9d3:	nop    DWORD PTR [rax+rax*1+0x0]
   2d9d8:	ret    
   2d9d9:	nop    DWORD PTR [rax+0x0]
   2d9e0:	mov    BYTE PTR [rip+0x518b5],0x0        # 7f29c <flush_log_p>
   2d9e7:	ret    
   2d9e8:	nop    DWORD PTR [rax+rax*1+0x0]
   2d9f0:	sub    rsp,0x8
   2d9f4:	call   2d700 <logflush>
   2d9f9:	mov    BYTE PTR [rip+0x5189c],0x1        # 7f29c <flush_log_p>
   2da00:	add    rsp,0x8
   2da04:	ret    
   2da05:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000002da10 <log_set_save_context>:
   2da10:	endbr64 
   2da14:	movzx  eax,BYTE PTR [rip+0x58b66]        # 86581 <save_context_p>
   2da1b:	mov    BYTE PTR [rip+0x58b5f],dil        # 86581 <save_context_p>
   2da22:	ret    
   2da23:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2da2e:	xchg   ax,ax

000000000002da30 <log_init>:
   2da30:	endbr64 
   2da34:	push   rbx
   2da35:	test   rdi,rdi
   2da38:	je     2dab8 <log_init+0x88>
   2da3a:	cmp    BYTE PTR [rdi],0x2d
   2da3d:	mov    rbx,rdi
   2da40:	je     2da88 <log_init+0x58>
   2da42:	test   sil,sil
   2da45:	lea    rax,[rip+0x3f9c6]        # 6d412 <eta_str.8886+0x69a>
   2da4c:	lea    rsi,[rip+0x38068]        # 65abb <yy_accept+0x9fb>
   2da53:	mov    rdi,rbx
   2da56:	cmove  rsi,rax
   2da5a:	call   c0f0 <fopen@plt>
   2da5f:	mov    QWORD PTR [rip+0x58b3a],rax        # 865a0 <filelogfp>
   2da66:	test   rax,rax
   2da69:	je     2dae6 <log_init+0xb6>
   2da6b:	mov    QWORD PTR [rip+0x58b3e],rax        # 865b0 <logfp>
   2da72:	xor    edi,edi
   2da74:	call   bfe0 <isatty@plt>
   2da79:	pop    rbx
   2da7a:	mov    DWORD PTR [rip+0x58b10],eax        # 86590 <shell_is_interactive>
   2da80:	ret    
   2da81:	nop    DWORD PTR [rax+0x0]
   2da88:	cmp    BYTE PTR [rdi+0x1],0x0
   2da8c:	jne    2da42 <log_init+0x12>
   2da8e:	mov    rax,QWORD PTR [rip+0x55a53]        # 834e8 <stdout@@GLIBC_2.2.5>
   2da95:	xor    edi,edi
   2da97:	mov    QWORD PTR [rip+0x58b0a],rax        # 865a8 <stdlogfp>
   2da9e:	mov    QWORD PTR [rip+0x58b0b],rax        # 865b0 <logfp>
   2daa5:	call   bfe0 <isatty@plt>
   2daaa:	pop    rbx
   2daab:	mov    DWORD PTR [rip+0x58adf],eax        # 86590 <shell_is_interactive>
   2dab1:	ret    
   2dab2:	nop    WORD PTR [rax+rax*1+0x0]
   2dab8:	mov    rdi,QWORD PTR [rip+0x55a21]        # 834e0 <stderr@@GLIBC_2.2.5>
   2dabf:	mov    QWORD PTR [rip+0x58ae2],rdi        # 865a8 <stdlogfp>
   2dac6:	mov    QWORD PTR [rip+0x58ae3],rdi        # 865b0 <logfp>
   2dacd:	call   be80 <fileno@plt>
   2dad2:	mov    edi,eax
   2dad4:	call   bfe0 <isatty@plt>
   2dad9:	test   eax,eax
   2dadb:	je     2da72 <log_init+0x42>
   2dadd:	mov    BYTE PTR [rip+0x58a9d],0x1        # 86581 <save_context_p>
   2dae4:	jmp    2da72 <log_init+0x42>
   2dae6:	call   c740 <__errno_location@plt>
   2daeb:	mov    edi,DWORD PTR [rax]
   2daed:	call   c540 <strerror@plt>
   2daf2:	mov    rdi,QWORD PTR [rip+0x559e7]        # 834e0 <stderr@@GLIBC_2.2.5>
   2daf9:	mov    r8,rbx
   2dafc:	mov    rcx,QWORD PTR [rip+0x5c91d]        # 8a420 <exec_name>
   2db03:	mov    r9,rax
   2db06:	lea    rdx,[rip+0x3ad34]        # 68841 <primes.6089+0x2761>
   2db0d:	mov    esi,0x1
   2db12:	xor    eax,eax
   2db14:	call   bfd0 <__fprintf_chk@plt>
   2db19:	mov    edi,0x1
   2db1e:	call   c060 <exit@plt>
   2db23:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2db2e:	xchg   ax,ax

000000000002db30 <log_close>:
   2db30:	endbr64 
   2db34:	push   rbp
   2db35:	push   rbx
   2db36:	sub    rsp,0x8
   2db3a:	mov    rdi,QWORD PTR [rip+0x58a6f]        # 865b0 <logfp>
   2db41:	test   rdi,rdi
   2db44:	je     2db77 <log_close+0x47>
   2db46:	cmp    rdi,QWORD PTR [rip+0x55993]        # 834e0 <stderr@@GLIBC_2.2.5>
   2db4d:	je     2db77 <log_close+0x47>
   2db4f:	cmp    rdi,QWORD PTR [rip+0x55992]        # 834e8 <stdout@@GLIBC_2.2.5>
   2db56:	je     2db77 <log_close+0x47>
   2db58:	cmp    rdi,QWORD PTR [rip+0x58a49]        # 865a8 <stdlogfp>
   2db5f:	je     2dbe2 <log_close+0xb2>
   2db65:	cmp    rdi,QWORD PTR [rip+0x58a34]        # 865a0 <filelogfp>
   2db6c:	je     2dbfa <log_close+0xca>
   2db72:	call   c8b0 <fclose@plt>
   2db77:	mov    BYTE PTR [rip+0x58a04],0x1        # 86582 <inhibit_logging>
   2db7e:	lea    rbx,[rip+0x57c43]        # 857c8 <log_lines+0x88>
   2db85:	mov    BYTE PTR [rip+0x589f5],0x0        # 86581 <save_context_p>
   2db8c:	lea    rbp,[rbx+0xe40]
   2db93:	mov    QWORD PTR [rip+0x58a12],0x0        # 865b0 <logfp>
   2db9e:	xchg   ax,ax
   2dba0:	mov    rdi,QWORD PTR [rbx]
   2dba3:	add    rbx,0x98
   2dbaa:	call   4bdc0 <rpl_free>
   2dbaf:	mov    QWORD PTR [rbx-0x98],0x0
   2dbba:	mov    QWORD PTR [rbx-0x90],0x0
   2dbc5:	cmp    rbp,rbx
   2dbc8:	jne    2dba0 <log_close+0x70>
   2dbca:	mov    DWORD PTR [rip+0x516c4],0xffffffff        # 7f298 <log_line_current>
   2dbd4:	mov    BYTE PTR [rip+0x57b55],0x0        # 85730 <trailing_line>
   2dbdb:	add    rsp,0x8
   2dbdf:	pop    rbx
   2dbe0:	pop    rbp
   2dbe1:	ret    
   2dbe2:	cmp    rdi,QWORD PTR [rip+0x589b7]        # 865a0 <filelogfp>
   2dbe9:	mov    QWORD PTR [rip+0x589b4],0x0        # 865a8 <stdlogfp>
   2dbf4:	jne    2db72 <log_close+0x42>
   2dbfa:	mov    QWORD PTR [rip+0x5899b],0x0        # 865a0 <filelogfp>
   2dc05:	jmp    2db72 <log_close+0x42>
   2dc0a:	nop    WORD PTR [rax+rax*1+0x0]

000000000002dc10 <escnonprint>:
   2dc10:	endbr64 
   2dc14:	mov    edx,0x8
   2dc19:	mov    esi,0x5c
   2dc1e:	jmp    2d3a0 <escnonprint_internal>
   2dc23:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2dc2e:	xchg   ax,ax

000000000002dc30 <escnonprint_uri>:
   2dc30:	endbr64 
   2dc34:	mov    edx,0x10
   2dc39:	mov    esi,0x25
   2dc3e:	jmp    2d3a0 <escnonprint_internal>
   2dc43:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2dc4e:	xchg   ax,ax

000000000002dc50 <redirect_output>:
   2dc50:	endbr64 
   2dc54:	mov    rax,QWORD PTR [rip+0x58955]        # 865b0 <logfp>
   2dc5b:	test   dil,dil
   2dc5e:	jne    2dc80 <redirect_output+0x30>
   2dc60:	mov    rdx,QWORD PTR [rip+0x58941]        # 865a8 <stdlogfp>
   2dc67:	cmp    rdx,rax
   2dc6a:	je     2dd20 <redirect_output+0xd0>
   2dc70:	mov    QWORD PTR [rip+0x58939],rdx        # 865b0 <logfp>
   2dc77:	jmp    2d590 <log_dump_context>
   2dc7c:	nop    DWORD PTR [rax+0x0]
   2dc80:	mov    rdx,QWORD PTR [rip+0x58919]        # 865a0 <filelogfp>
   2dc87:	cmp    rdx,rax
   2dc8a:	je     2dd20 <redirect_output+0xd0>
   2dc90:	push   r12
   2dc92:	push   rbx
   2dc93:	mov    rbx,rsi
   2dc96:	sub    rsp,0x8
   2dc9a:	test   rsi,rsi
   2dc9d:	je     2dcc3 <redirect_output+0x73>
   2dc9f:	mov    rdi,QWORD PTR [rip+0x5583a]        # 834e0 <stderr@@GLIBC_2.2.5>
   2dca6:	mov    rcx,rsi
   2dca9:	lea    rdx,[rip+0x3aba6]        # 68856 <primes.6089+0x2776>
   2dcb0:	xor    eax,eax
   2dcb2:	mov    esi,0x1
   2dcb7:	call   bfd0 <__fprintf_chk@plt>
   2dcbc:	mov    rdx,QWORD PTR [rip+0x588dd]        # 865a0 <filelogfp>
   2dcc3:	test   rdx,rdx
   2dcc6:	je     2dd28 <redirect_output+0xd8>
   2dcc8:	mov    rdi,QWORD PTR [rip+0x588c9]        # 86598 <logfile>
   2dccf:	call   4b5b0 <quote>
   2dcd4:	mov    edx,0x5
   2dcd9:	lea    rsi,[rip+0x3ab84]        # 68864 <primes.6089+0x2784>
   2dce0:	xor    edi,edi
   2dce2:	mov    r12,rax
   2dce5:	call   c780 <dcgettext@plt>
   2dcea:	mov    rdi,QWORD PTR [rip+0x557ef]        # 834e0 <stderr@@GLIBC_2.2.5>
   2dcf1:	mov    rcx,r12
   2dcf4:	mov    esi,0x1
   2dcf9:	mov    rdx,rax
   2dcfc:	xor    eax,eax
   2dcfe:	call   bfd0 <__fprintf_chk@plt>
   2dd03:	mov    rax,QWORD PTR [rip+0x58896]        # 865a0 <filelogfp>
   2dd0a:	mov    QWORD PTR [rip+0x5889f],rax        # 865b0 <logfp>
   2dd11:	add    rsp,0x8
   2dd15:	pop    rbx
   2dd16:	pop    r12
   2dd18:	jmp    2d590 <log_dump_context>
   2dd1d:	nop    DWORD PTR [rax]
   2dd20:	ret    
   2dd21:	nop    DWORD PTR [rax+0x0]
   2dd28:	lea    rdx,[rip+0x58869]        # 86598 <logfile>
   2dd2f:	xor    esi,esi
   2dd31:	lea    rdi,[rip+0x3ab15]        # 6884d <primes.6089+0x276d>
   2dd38:	call   3e630 <unique_create>
   2dd3d:	mov    QWORD PTR [rip+0x5885c],rax        # 865a0 <filelogfp>
   2dd44:	test   rax,rax
   2dd47:	je     2dd90 <redirect_output+0x140>
   2dd49:	mov    rdi,QWORD PTR [rip+0x58848]        # 86598 <logfile>
   2dd50:	call   4b5b0 <quote>
   2dd55:	mov    edx,0x5
   2dd5a:	lea    rsi,[rip+0x3ab03]        # 68864 <primes.6089+0x2784>
   2dd61:	xor    edi,edi
   2dd63:	mov    r12,rax
   2dd66:	call   c780 <dcgettext@plt>
   2dd6b:	mov    rdi,QWORD PTR [rip+0x5576e]        # 834e0 <stderr@@GLIBC_2.2.5>
   2dd72:	mov    rcx,r12
   2dd75:	mov    esi,0x1
   2dd7a:	mov    rdx,rax
   2dd7d:	xor    eax,eax
   2dd7f:	call   bfd0 <__fprintf_chk@plt>
   2dd84:	mov    QWORD PTR [rip+0x5795d],rbx        # 856e8 <redirect_request_signal_name>
   2dd8b:	jmp    2dd03 <redirect_output+0xb3>
   2dd90:	call   c740 <__errno_location@plt>
   2dd95:	mov    edi,DWORD PTR [rax]
   2dd97:	call   c540 <strerror@plt>
   2dd9c:	mov    r12,QWORD PTR [rip+0x587f5]        # 86598 <logfile>
   2dda3:	mov    edx,0x5
   2dda8:	lea    rsi,[rip+0x3aad1]        # 68880 <primes.6089+0x27a0>
   2ddaf:	mov    rbx,rax
   2ddb2:	lea    rax,[rip+0x3aa94]        # 6884d <primes.6089+0x276d>
   2ddb9:	test   r12,r12
   2ddbc:	cmove  r12,rax
   2ddc0:	xor    edi,edi
   2ddc2:	call   c780 <dcgettext@plt>
   2ddc7:	mov    rdi,QWORD PTR [rip+0x55712]        # 834e0 <stderr@@GLIBC_2.2.5>
   2ddce:	mov    r8,rbx
   2ddd1:	mov    esi,0x1
   2ddd6:	mov    rdx,rax
   2ddd9:	mov    rcx,r12
   2dddc:	xor    eax,eax
   2ddde:	call   bfd0 <__fprintf_chk@plt>
   2dde3:	mov    BYTE PTR [rip+0x58798],0x1        # 86582 <inhibit_logging>
   2ddea:	add    rsp,0x8
   2ddee:	pop    rbx
   2ddef:	pop    r12
   2ddf1:	ret    
   2ddf2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2ddfd:	nop    DWORD PTR [rax]

000000000002de00 <check_redirect_output>:
   2de00:	cmp    QWORD PTR [rip+0x578e0],0x0        # 856e8 <redirect_request_signal_name>
   2de08:	je     2de10 <check_redirect_output+0x10>
   2de0a:	ret    
   2de0b:	nop    DWORD PTR [rax+rax*1+0x0]
   2de10:	mov    eax,DWORD PTR [rip+0x5877a]        # 86590 <shell_is_interactive>
   2de16:	test   eax,eax
   2de18:	je     2de0a <check_redirect_output+0xa>
   2de1a:	cmp    QWORD PTR [rip+0x5c29e],0x0        # 8a0c0 <opt+0x40>
   2de22:	jne    2de0a <check_redirect_output+0xa>
   2de24:	push   rbx
   2de25:	xor    edi,edi
   2de27:	call   caf0 <tcgetpgrp@plt>
   2de2c:	mov    ebx,eax
   2de2e:	cmp    eax,0xffffffff
   2de31:	je     2de45 <check_redirect_output+0x45>
   2de33:	call   bfa0 <getpgrp@plt>
   2de38:	cmp    eax,ebx
   2de3a:	je     2de45 <check_redirect_output+0x45>
   2de3c:	cmp    BYTE PTR [rip+0x5c241],0x0        # 8a084 <opt+0x4>
   2de43:	je     2de4f <check_redirect_output+0x4f>
   2de45:	xor    esi,esi
   2de47:	xor    edi,edi
   2de49:	pop    rbx
   2de4a:	jmp    2dc50 <redirect_output>
   2de4f:	xor    esi,esi
   2de51:	mov    edi,0x1
   2de56:	pop    rbx
   2de57:	jmp    2dc50 <redirect_output>
   2de5c:	nop    DWORD PTR [rax+0x0]

000000000002de60 <logputs>:
   2de60:	endbr64 
   2de64:	push   r14
   2de66:	push   r13
   2de68:	push   r12
   2de6a:	mov    r12,rsi
   2de6d:	push   rbp
   2de6e:	push   rbx
   2de6f:	mov    ebx,edi
   2de71:	call   c740 <__errno_location@plt>
   2de76:	mov    r14d,DWORD PTR [rax]
   2de79:	mov    rbp,rax
   2de7c:	call   2de00 <check_redirect_output>
   2de81:	cmp    ebx,0x4
   2de84:	je     2dfd0 <logputs+0x170>
   2de8a:	cmp    BYTE PTR [rip+0x586f1],0x0        # 86582 <inhibit_logging>
   2de91:	jne    2df14 <logputs+0xb4>
   2de97:	mov    rsi,QWORD PTR [rip+0x58712]        # 865b0 <logfp>
   2de9e:	test   rsi,rsi
   2dea1:	je     2df28 <logputs+0xc8>
   2dea7:	mov    DWORD PTR [rbp+0x0],r14d
   2deab:	mov    r13,QWORD PTR [rip+0x586d6]        # 86588 <warclogfp>
   2deb2:	test   r13,r13
   2deb5:	je     2df48 <logputs+0xe8>
   2debb:	cmp    ebx,0x2
   2debe:	je     2e050 <logputs+0x1f0>
   2dec4:	ja     2dfb0 <logputs+0x150>
   2deca:	test   ebx,ebx
   2decc:	je     2e038 <logputs+0x1d8>
   2ded2:	cmp    BYTE PTR [rip+0x5c1ab],0x0        # 8a084 <opt+0x4>
   2ded9:	jne    2df18 <logputs+0xb8>
   2dedb:	nop    DWORD PTR [rax+rax*1+0x0]
   2dee0:	mov    rdi,r12
   2dee3:	call   c580 <fputs@plt>
   2dee8:	mov    rsi,r13
   2deeb:	mov    rdi,r12
   2deee:	call   c580 <fputs@plt>
   2def3:	cmp    BYTE PTR [rip+0x58687],0x0        # 86581 <save_context_p>
   2defa:	jne    2df8e <logputs+0x12e>
   2df00:	cmp    BYTE PTR [rip+0x51395],0x0        # 7f29c <flush_log_p>
   2df07:	jne    2dfa3 <logputs+0x143>
   2df0d:	mov    BYTE PTR [rip+0x5866c],0x1        # 86580 <needs_flushing>
   2df14:	mov    DWORD PTR [rbp+0x0],r14d
   2df18:	pop    rbx
   2df19:	pop    rbp
   2df1a:	pop    r12
   2df1c:	pop    r13
   2df1e:	pop    r14
   2df20:	ret    
   2df21:	nop    DWORD PTR [rax+0x0]
   2df28:	mov    rsi,QWORD PTR [rip+0x555b1]        # 834e0 <stderr@@GLIBC_2.2.5>
   2df2f:	mov    DWORD PTR [rbp+0x0],r14d
   2df33:	test   rsi,rsi
   2df36:	je     2df18 <logputs+0xb8>
   2df38:	mov    r13,QWORD PTR [rip+0x58649]        # 86588 <warclogfp>
   2df3f:	test   r13,r13
   2df42:	jne    2debb <logputs+0x5b>
   2df48:	call   2d570 <get_warc_log_fp.part.0>
   2df4d:	mov    r13,rax
   2df50:	cmp    ebx,0x2
   2df53:	je     2e070 <logputs+0x210>
   2df59:	ja     2e018 <logputs+0x1b8>
   2df5f:	test   ebx,ebx
   2df61:	je     2e08c <logputs+0x22c>
   2df67:	cmp    BYTE PTR [rip+0x5c116],0x0        # 8a084 <opt+0x4>
   2df6e:	jne    2df18 <logputs+0xb8>
   2df70:	mov    rdi,r12
   2df73:	call   c580 <fputs@plt>
   2df78:	test   r13,r13
   2df7b:	jne    2dee8 <logputs+0x88>
   2df81:	cmp    BYTE PTR [rip+0x585f9],0x0        # 86581 <save_context_p>
   2df88:	je     2df00 <logputs+0xa0>
   2df8e:	mov    rdi,r12
   2df91:	call   2d0e0 <saved_append>
   2df96:	cmp    BYTE PTR [rip+0x512ff],0x0        # 7f29c <flush_log_p>
   2df9d:	je     2df0d <logputs+0xad>
   2dfa3:	call   2d700 <logflush>
   2dfa8:	jmp    2df14 <logputs+0xb4>
   2dfad:	nop    DWORD PTR [rax]
   2dfb0:	cmp    ebx,0x4
   2dfb3:	jne    2dee0 <logputs+0x80>
   2dfb9:	mov    eax,DWORD PTR [rip+0x5c299]        # 8a258 <opt+0x1d8>
   2dfbf:	test   eax,eax
   2dfc1:	jne    2dee0 <logputs+0x80>
   2dfc7:	jmp    2df18 <logputs+0xb8>
   2dfcc:	nop    DWORD PTR [rax+0x0]
   2dfd0:	cmp    DWORD PTR [rip+0x5c281],0x1        # 8a258 <opt+0x1d8>
   2dfd7:	jne    2de8a <logputs+0x2a>
   2dfdd:	mov    rsi,QWORD PTR [rip+0x554fc]        # 834e0 <stderr@@GLIBC_2.2.5>
   2dfe4:	mov    DWORD PTR [rbp+0x0],r14d
   2dfe8:	test   rsi,rsi
   2dfeb:	je     2df18 <logputs+0xb8>
   2dff1:	cmp    BYTE PTR [rip+0x5858a],0x0        # 86582 <inhibit_logging>
   2dff8:	je     2deab <logputs+0x4b>
   2dffe:	mov    ecx,DWORD PTR [rip+0x5c254]        # 8a258 <opt+0x1d8>
   2e004:	test   ecx,ecx
   2e006:	jne    2deeb <logputs+0x8b>
   2e00c:	jmp    2df18 <logputs+0xb8>
   2e011:	nop    DWORD PTR [rax+0x0]
   2e018:	cmp    ebx,0x4
   2e01b:	jne    2df70 <logputs+0x110>
   2e021:	cmp    DWORD PTR [rip+0x5c230],0x0        # 8a258 <opt+0x1d8>
   2e028:	jne    2df70 <logputs+0x110>
   2e02e:	jmp    2df18 <logputs+0xb8>
   2e033:	nop    DWORD PTR [rax+rax*1+0x0]
   2e038:	mov    edx,DWORD PTR [rip+0x5c042]        # 8a080 <opt>
   2e03e:	test   edx,edx
   2e040:	jne    2dee0 <logputs+0x80>
   2e046:	jmp    2df18 <logputs+0xb8>
   2e04b:	nop    DWORD PTR [rax+rax*1+0x0]
   2e050:	movabs rax,0xffffffffff
   2e05a:	test   QWORD PTR [rip+0x5c01f],rax        # 8a080 <opt>
   2e061:	je     2dee0 <logputs+0x80>
   2e067:	jmp    2df18 <logputs+0xb8>
   2e06c:	nop    DWORD PTR [rax+0x0]
   2e070:	movabs rax,0xffffffffff
   2e07a:	test   QWORD PTR [rip+0x5bfff],rax        # 8a080 <opt>
   2e081:	je     2df70 <logputs+0x110>
   2e087:	jmp    2df18 <logputs+0xb8>
   2e08c:	cmp    DWORD PTR [rip+0x5bfed],0x0        # 8a080 <opt>
   2e093:	jne    2df70 <logputs+0x110>
   2e099:	jmp    2df18 <logputs+0xb8>
   2e09e:	xchg   ax,ax

000000000002e0a0 <logprintf>:
   2e0a0:	endbr64 
   2e0a4:	push   r14
   2e0a6:	push   r13
   2e0a8:	push   r12
   2e0aa:	mov    r12d,edi
   2e0ad:	push   rbp
   2e0ae:	push   rbx
   2e0af:	mov    rbx,rsi
   2e0b2:	sub    rsp,0xe0
   2e0b9:	mov    QWORD PTR [rsp+0x40],rdx
   2e0be:	mov    QWORD PTR [rsp+0x48],rcx
   2e0c3:	mov    QWORD PTR [rsp+0x50],r8
   2e0c8:	mov    QWORD PTR [rsp+0x58],r9
   2e0cd:	test   al,al
   2e0cf:	je     2e10b <logprintf+0x6b>
   2e0d1:	movaps XMMWORD PTR [rsp+0x60],xmm0
   2e0d6:	movaps XMMWORD PTR [rsp+0x70],xmm1
   2e0db:	movaps XMMWORD PTR [rsp+0x80],xmm2
   2e0e3:	movaps XMMWORD PTR [rsp+0x90],xmm3
   2e0eb:	movaps XMMWORD PTR [rsp+0xa0],xmm4
   2e0f3:	movaps XMMWORD PTR [rsp+0xb0],xmm5
   2e0fb:	movaps XMMWORD PTR [rsp+0xc0],xmm6
   2e103:	movaps XMMWORD PTR [rsp+0xd0],xmm7
   2e10b:	mov    rax,QWORD PTR fs:0x28
   2e114:	mov    QWORD PTR [rsp+0x28],rax
   2e119:	xor    eax,eax
   2e11b:	call   c740 <__errno_location@plt>
   2e120:	mov    r14d,DWORD PTR [rax]
   2e123:	mov    rbp,rax
   2e126:	call   2de00 <check_redirect_output>
   2e12b:	cmp    BYTE PTR [rip+0x58450],0x0        # 86582 <inhibit_logging>
   2e132:	mov    DWORD PTR [rbp+0x0],r14d
   2e136:	jne    2e1c3 <logprintf+0x123>
   2e13c:	cmp    r12d,0x2
   2e140:	je     2e220 <logprintf+0x180>
   2e146:	ja     2e1e8 <logprintf+0x148>
   2e14c:	test   r12d,r12d
   2e14f:	je     2e208 <logprintf+0x168>
   2e155:	cmp    BYTE PTR [rip+0x5bf28],0x0        # 8a084 <opt+0x4>
   2e15c:	jne    2e1c3 <logprintf+0x123>
   2e15e:	xchg   ax,ax
   2e160:	mov    DWORD PTR [rbp+0x0],0x0
   2e167:	pxor   xmm0,xmm0
   2e16b:	lea    r13,[rsp+0x10]
   2e170:	mov    r12,rsp
   2e173:	movaps XMMWORD PTR [rsp],xmm0
   2e177:	nop    WORD PTR [rax+rax*1+0x0]
   2e180:	lea    rax,[rsp+0x110]
   2e188:	mov    rdx,r13
   2e18b:	mov    rsi,rbx
   2e18e:	mov    rdi,r12
   2e191:	mov    QWORD PTR [rsp+0x18],rax
   2e196:	lea    rax,[rsp+0x30]
   2e19b:	mov    DWORD PTR [rsp+0x10],0x10
   2e1a3:	mov    DWORD PTR [rsp+0x14],0x30
   2e1ab:	mov    QWORD PTR [rsp+0x20],rax
   2e1b0:	call   2d790 <log_vprintf_internal>
   2e1b5:	test   al,al
   2e1b7:	je     2e180 <logprintf+0xe0>
   2e1b9:	cmp    DWORD PTR [rbp+0x0],0x20
   2e1bd:	je     2e239 <logprintf+0x199>
   2e1bf:	mov    DWORD PTR [rbp+0x0],r14d
   2e1c3:	mov    rax,QWORD PTR [rsp+0x28]
   2e1c8:	xor    rax,QWORD PTR fs:0x28
   2e1d1:	jne    2e243 <logprintf+0x1a3>
   2e1d3:	add    rsp,0xe0
   2e1da:	pop    rbx
   2e1db:	pop    rbp
   2e1dc:	pop    r12
   2e1de:	pop    r13
   2e1e0:	pop    r14
   2e1e2:	ret    
   2e1e3:	nop    DWORD PTR [rax+rax*1+0x0]
   2e1e8:	cmp    r12d,0x4
   2e1ec:	jne    2e160 <logprintf+0xc0>
   2e1f2:	mov    edx,DWORD PTR [rip+0x5c060]        # 8a258 <opt+0x1d8>
   2e1f8:	test   edx,edx
   2e1fa:	jne    2e160 <logprintf+0xc0>
   2e200:	jmp    2e1c3 <logprintf+0x123>
   2e202:	nop    WORD PTR [rax+rax*1+0x0]
   2e208:	mov    eax,DWORD PTR [rip+0x5be72]        # 8a080 <opt>
   2e20e:	test   eax,eax
   2e210:	jne    2e160 <logprintf+0xc0>
   2e216:	jmp    2e1c3 <logprintf+0x123>
   2e218:	nop    DWORD PTR [rax+rax*1+0x0]
   2e220:	movabs rax,0xffffffffff
   2e22a:	test   QWORD PTR [rip+0x5be4f],rax        # 8a080 <opt>
   2e231:	je     2e160 <logprintf+0xc0>
   2e237:	jmp    2e1c3 <logprintf+0x123>
   2e239:	mov    edi,0x1
   2e23e:	call   c060 <exit@plt>
   2e243:	call   c7b0 <__stack_chk_fail@plt>
   2e248:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002e250 <debug_logprintf>:
   2e250:	endbr64 
   2e254:	push   r12
   2e256:	push   rbp
   2e257:	push   rbx
   2e258:	mov    rbx,rdi
   2e25b:	sub    rsp,0xe0
   2e262:	mov    QWORD PTR [rsp+0x38],rsi
   2e267:	mov    QWORD PTR [rsp+0x40],rdx
   2e26c:	mov    QWORD PTR [rsp+0x48],rcx
   2e271:	mov    QWORD PTR [rsp+0x50],r8
   2e276:	mov    QWORD PTR [rsp+0x58],r9
   2e27b:	test   al,al
   2e27d:	je     2e2b9 <debug_logprintf+0x69>
   2e27f:	movaps XMMWORD PTR [rsp+0x60],xmm0
   2e284:	movaps XMMWORD PTR [rsp+0x70],xmm1
   2e289:	movaps XMMWORD PTR [rsp+0x80],xmm2
   2e291:	movaps XMMWORD PTR [rsp+0x90],xmm3
   2e299:	movaps XMMWORD PTR [rsp+0xa0],xmm4
   2e2a1:	movaps XMMWORD PTR [rsp+0xb0],xmm5
   2e2a9:	movaps XMMWORD PTR [rsp+0xc0],xmm6
   2e2b1:	movaps XMMWORD PTR [rsp+0xd0],xmm7
   2e2b9:	mov    rax,QWORD PTR fs:0x28
   2e2c2:	mov    QWORD PTR [rsp+0x28],rax
   2e2c7:	xor    eax,eax
   2e2c9:	cmp    BYTE PTR [rip+0x5bfeb],0x0        # 8a2bb <opt+0x23b>
   2e2d0:	jne    2e2f0 <debug_logprintf+0xa0>
   2e2d2:	mov    rax,QWORD PTR [rsp+0x28]
   2e2d7:	xor    rax,QWORD PTR fs:0x28
   2e2e0:	jne    2e34b <debug_logprintf+0xfb>
   2e2e2:	add    rsp,0xe0
   2e2e9:	pop    rbx
   2e2ea:	pop    rbp
   2e2eb:	pop    r12
   2e2ed:	ret    
   2e2ee:	xchg   ax,ax
   2e2f0:	call   2de00 <check_redirect_output>
   2e2f5:	cmp    BYTE PTR [rip+0x58286],0x0        # 86582 <inhibit_logging>
   2e2fc:	jne    2e2d2 <debug_logprintf+0x82>
   2e2fe:	pxor   xmm0,xmm0
   2e302:	lea    r12,[rsp+0x10]
   2e307:	mov    rbp,rsp
   2e30a:	movaps XMMWORD PTR [rsp],xmm0
   2e30e:	xchg   ax,ax
   2e310:	lea    rax,[rsp+0x100]
   2e318:	mov    rdx,r12
   2e31b:	mov    rsi,rbx
   2e31e:	mov    rdi,rbp
   2e321:	mov    QWORD PTR [rsp+0x18],rax
   2e326:	lea    rax,[rsp+0x30]
   2e32b:	mov    DWORD PTR [rsp+0x10],0x8
   2e333:	mov    DWORD PTR [rsp+0x14],0x30
   2e33b:	mov    QWORD PTR [rsp+0x20],rax
   2e340:	call   2d790 <log_vprintf_internal>
   2e345:	test   al,al
   2e347:	je     2e310 <debug_logprintf+0xc0>
   2e349:	jmp    2e2d2 <debug_logprintf+0x82>
   2e34b:	call   c7b0 <__stack_chk_fail@plt>

000000000002e350 <redirect_output_signal>:
   2e350:	endbr64 
   2e354:	push   rbp
   2e355:	lea    rsi,[rip+0x3a540]        # 6889c <primes.6089+0x27bc>
   2e35c:	mov    ebp,edi
   2e35e:	cmp    edi,0x1
   2e361:	je     2e378 <redirect_output_signal+0x28>
   2e363:	cmp    edi,0xa
   2e366:	lea    rsi,[rip+0x3a536]        # 688a3 <primes.6089+0x27c3>
   2e36d:	lea    rax,[rip+0x3a535]        # 688a9 <primes.6089+0x27c9>
   2e374:	cmove  rsi,rax
   2e378:	mov    edi,0x1
   2e37d:	call   2dc50 <redirect_output>
   2e382:	call   31ae0 <progress_schedule_redirect>
   2e387:	mov    edi,ebp
   2e389:	lea    rsi,[rip+0xffffffffffffffc0]        # 2e350 <redirect_output_signal>
   2e390:	pop    rbp
   2e391:	jmp    c680 <signal@plt>
   2e396:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000002e3a0 <print_usage>:
   2e3a0:	push   r12
   2e3a2:	mov    edx,0x5
   2e3a7:	lea    rsi,[rip+0x3a7f2]        # 68ba0 <primes.6089+0x2ac0>
   2e3ae:	push   rbx
   2e3af:	mov    ebx,edi
   2e3b1:	xor    edi,edi
   2e3b3:	sub    rsp,0x8
   2e3b7:	mov    r12,QWORD PTR [rip+0x5c062]        # 8a420 <exec_name>
   2e3be:	call   c780 <dcgettext@plt>
   2e3c3:	test   ebx,ebx
   2e3c5:	mov    esi,0x1
   2e3ca:	mov    rdi,QWORD PTR [rip+0x5510f]        # 834e0 <stderr@@GLIBC_2.2.5>
   2e3d1:	cmove  rdi,QWORD PTR [rip+0x5510f]        # 834e8 <stdout@@GLIBC_2.2.5>
   2e3d9:	add    rsp,0x8
   2e3dd:	mov    rdx,rax
   2e3e0:	xor    eax,eax
   2e3e2:	mov    rcx,r12
   2e3e5:	pop    rbx
   2e3e6:	pop    r12
   2e3e8:	jmp    bfd0 <__fprintf_chk@plt>
   2e3ed:	nop    DWORD PTR [rax]

000000000002e3f0 <print_help>:
   2e3f0:	endbr64 
   2e3f4:	push   r12
   2e3f6:	xor    edi,edi
   2e3f8:	mov    r12,QWORD PTR [rip+0x52fc1]        # 813c0 <version_string>
   2e3ff:	mov    edx,0x5
   2e404:	push   rbp
   2e405:	lea    rsi,[rip+0x3a7b4]        # 68bc0 <primes.6089+0x2ae0>
   2e40c:	push   rbx
   2e40d:	call   c780 <dcgettext@plt>
   2e412:	mov    rdx,r12
   2e415:	mov    edi,0x1
   2e41a:	mov    rsi,rax
   2e41d:	xor    eax,eax
   2e41f:	call   c070 <__printf_chk@plt>
   2e424:	test   eax,eax
   2e426:	js     2e476 <print_help+0x86>
   2e428:	xor    edi,edi
   2e42a:	call   2e3a0 <print_usage>
   2e42f:	test   eax,eax
   2e431:	js     2e476 <print_help+0x86>
   2e433:	lea    rbx,[rip+0x4ebc6]        # 7d000 <help.9125>
   2e43a:	lea    r12,[rbx+0x578]
   2e441:	jmp    2e451 <print_help+0x61>
   2e443:	nop    DWORD PTR [rax+rax*1+0x0]
   2e448:	add    rbx,0x8
   2e44c:	cmp    rbx,r12
   2e44f:	je     2e480 <print_help+0x90>
   2e451:	mov    rsi,QWORD PTR [rbx]
   2e454:	xor    edi,edi
   2e456:	mov    edx,0x5
   2e45b:	mov    rbp,QWORD PTR [rip+0x55086]        # 834e8 <stdout@@GLIBC_2.2.5>
   2e462:	call   c780 <dcgettext@plt>
   2e467:	mov    rsi,rbp
   2e46a:	mov    rdi,rax
   2e46d:	call   c580 <fputs@plt>
   2e472:	test   eax,eax
   2e474:	jns    2e448 <print_help+0x58>
   2e476:	mov    edi,0x3
   2e47b:	call   c060 <exit@plt>
   2e480:	xor    edi,edi
   2e482:	call   c060 <exit@plt>
   2e487:	nop    WORD PTR [rax+rax*1+0x0]

000000000002e490 <secs_to_human_time>:
   2e490:	sub    rsp,0x8
   2e494:	movsd  xmm1,QWORD PTR [rip+0x3e71c]        # 6cbb8 <primes.6089+0x6ad8>
   2e49c:	addsd  xmm1,xmm0
   2e4a0:	cvttsd2si r9d,xmm1
   2e4a5:	movsxd rax,r9d
   2e4a8:	mov    edx,r9d
   2e4ab:	imul   rax,rax,0xffffffffc22e4507
   2e4b2:	sar    edx,0x1f
   2e4b5:	shr    rax,0x20
   2e4b9:	add    eax,r9d
   2e4bc:	sar    eax,0x10
   2e4bf:	sub    eax,edx
   2e4c1:	imul   edx,eax,0x15180
   2e4c7:	sub    r9d,edx
   2e4ca:	movsxd rcx,r9d
   2e4cd:	mov    edx,r9d
   2e4d0:	imul   rcx,rcx,0xffffffff91a2b3c5
   2e4d7:	sar    edx,0x1f
   2e4da:	shr    rcx,0x20
   2e4de:	add    ecx,r9d
   2e4e1:	sar    ecx,0xb
   2e4e4:	sub    ecx,edx
   2e4e6:	imul   edx,ecx,0xe10
   2e4ec:	sub    r9d,edx
   2e4ef:	movsxd rdx,r9d
   2e4f2:	imul   r8,rdx,0xffffffff88888889
   2e4f9:	mov    rdx,r8
   2e4fc:	shr    rdx,0x20
   2e500:	lea    r8d,[r9+rdx*1]
   2e504:	mov    edx,r9d
   2e507:	sar    edx,0x1f
   2e50a:	sar    r8d,0x5
   2e50e:	sub    r8d,edx
   2e511:	imul   edx,r8d,0x3c
   2e515:	sub    r9d,edx
   2e518:	test   eax,eax
   2e51a:	jne    2e57c <secs_to_human_time+0xec>
   2e51c:	test   ecx,ecx
   2e51e:	jne    2e550 <secs_to_human_time+0xc0>
   2e520:	test   r8d,r8d
   2e523:	je     2e58f <secs_to_human_time+0xff>
   2e525:	lea    rcx,[rip+0x3a38d]        # 688b9 <primes.6089+0x27d9>
   2e52c:	mov    edx,0x20
   2e531:	mov    esi,0x1
   2e536:	xor    eax,eax
   2e538:	lea    rdi,[rip+0x580a1]        # 865e0 <buf.9133>
   2e53f:	call   c950 <__sprintf_chk@plt>
   2e544:	lea    rax,[rip+0x58095]        # 865e0 <buf.9133>
   2e54b:	add    rsp,0x8
   2e54f:	ret    
   2e550:	push   rsi
   2e551:	push   r9
   2e553:	mov    r9d,r8d
   2e556:	mov    r8d,ecx
   2e559:	lea    rcx,[rip+0x3a355]        # 688b5 <primes.6089+0x27d5>
   2e560:	mov    edx,0x20
   2e565:	mov    esi,0x1
   2e56a:	lea    rdi,[rip+0x5806f]        # 865e0 <buf.9133>
   2e571:	xor    eax,eax
   2e573:	call   c950 <__sprintf_chk@plt>
   2e578:	pop    rax
   2e579:	pop    rdx
   2e57a:	jmp    2e544 <secs_to_human_time+0xb4>
   2e57c:	push   r9
   2e57e:	mov    r9d,ecx
   2e581:	lea    rcx,[rip+0x3a329]        # 688b1 <primes.6089+0x27d1>
   2e588:	push   r8
   2e58a:	mov    r8d,eax
   2e58d:	jmp    2e560 <secs_to_human_time+0xd0>
   2e58f:	call   3f120 <print_decimal>
   2e594:	mov    edx,0x20
   2e599:	lea    rcx,[rip+0x3e714]        # 6ccb4 <primes.6089+0x6bd4>
   2e5a0:	mov    esi,0x1
   2e5a5:	mov    r8,rax
   2e5a8:	lea    rdi,[rip+0x58031]        # 865e0 <buf.9133>
   2e5af:	xor    eax,eax
   2e5b1:	call   c950 <__sprintf_chk@plt>
   2e5b6:	jmp    2e544 <secs_to_human_time+0xb4>
   2e5b8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002e5c0 <get_hsts_database>:
   2e5c0:	mov    rdi,QWORD PTR [rip+0x5be29]        # 8a3f0 <opt+0x370>
   2e5c7:	test   rdi,rdi
   2e5ca:	jne    2e5e7 <get_hsts_database+0x27>
   2e5cc:	mov    rdi,QWORD PTR [rip+0x5be25]        # 8a3f8 <opt+0x378>
   2e5d3:	test   rdi,rdi
   2e5d6:	je     2e5e4 <get_hsts_database+0x24>
   2e5d8:	lea    rsi,[rip+0x3a2e2]        # 688c1 <primes.6089+0x27e1>
   2e5df:	jmp    2c840 <ajoin_dir_file>
   2e5e4:	xor    eax,eax
   2e5e6:	ret    
   2e5e7:	jmp    4ba50 <xstrdup>
   2e5ec:	nop    DWORD PTR [rax+0x0]

000000000002e5f0 <format_and_print_line.constprop.0>:
   2e5f0:	push   r13
   2e5f2:	mov    r13,rdi
   2e5f5:	mov    rdi,rsi
   2e5f8:	push   r12
   2e5fa:	push   rbp
   2e5fb:	push   rbx
   2e5fc:	sub    rsp,0x8
   2e600:	call   4ba50 <xstrdup>
   2e605:	mov    rdx,r13
   2e608:	mov    edi,0x1
   2e60d:	lea    rsi,[rip+0x3e932]        # 6cf46 <eta_str.8886+0x1ce>
   2e614:	mov    r12,rax
   2e617:	xor    eax,eax
   2e619:	call   c070 <__printf_chk@plt>
   2e61e:	test   eax,eax
   2e620:	js     2e6b7 <format_and_print_line.constprop.0+0xc7>
   2e626:	lea    rsi,[rip+0x37898]        # 65ec5 <yy_accept+0xe05>
   2e62d:	mov    rdi,r12
   2e630:	call   c840 <strtok@plt>
   2e635:	mov    rbp,rax
   2e638:	test   rax,rax
   2e63b:	je     2e6cd <format_and_print_line.constprop.0+0xdd>
   2e641:	xor    ebx,ebx
   2e643:	jmp    2e66b <format_and_print_line.constprop.0+0x7b>
   2e645:	nop    DWORD PTR [rax]
   2e648:	mov    rdi,rbp
   2e64b:	sub    ebx,0x1
   2e64e:	call   c310 <strlen@plt>
   2e653:	lea    rsi,[rip+0x3786b]        # 65ec5 <yy_accept+0xe05>
   2e65a:	xor    edi,edi
   2e65c:	sub    ebx,eax
   2e65e:	call   c840 <strtok@plt>
   2e663:	mov    rbp,rax
   2e666:	test   rax,rax
   2e669:	je     2e6cd <format_and_print_line.constprop.0+0xdd>
   2e66b:	mov    rdi,rbp
   2e66e:	call   c310 <strlen@plt>
   2e673:	cmp    ebx,eax
   2e675:	jg     2e69d <format_and_print_line.constprop.0+0xad>
   2e677:	xor    eax,eax
   2e679:	mov    ecx,0x20
   2e67e:	mov    edx,0x4
   2e683:	mov    edi,0x1
   2e688:	lea    rsi,[rip+0x3a23d]        # 688cc <primes.6089+0x27ec>
   2e68f:	call   c070 <__printf_chk@plt>
   2e694:	test   eax,eax
   2e696:	js     2e6b7 <format_and_print_line.constprop.0+0xc7>
   2e698:	mov    ebx,0x44
   2e69d:	xor    eax,eax
   2e69f:	mov    rdx,rbp
   2e6a2:	mov    edi,0x1
   2e6a7:	lea    rsi,[rip+0x376eb]        # 65d99 <yy_accept+0xcd9>
   2e6ae:	call   c070 <__printf_chk@plt>
   2e6b3:	test   eax,eax
   2e6b5:	jns    2e648 <format_and_print_line.constprop.0+0x58>
   2e6b7:	mov    rdi,r12
   2e6ba:	call   4bdc0 <rpl_free>
   2e6bf:	or     eax,0xffffffff
   2e6c2:	add    rsp,0x8
   2e6c6:	pop    rbx
   2e6c7:	pop    rbp
   2e6c8:	pop    r12
   2e6ca:	pop    r13
   2e6cc:	ret    
   2e6cd:	mov    edi,0x1
   2e6d2:	lea    rsi,[rip+0x372f6]        # 659cf <yy_accept+0x90f>
   2e6d9:	xor    eax,eax
   2e6db:	call   c070 <__printf_chk@plt>
   2e6e0:	mov    rdi,r12
   2e6e3:	test   eax,eax
   2e6e5:	js     2e6f0 <format_and_print_line.constprop.0+0x100>
   2e6e7:	call   4bdc0 <rpl_free>
   2e6ec:	xor    eax,eax
   2e6ee:	jmp    2e6c2 <format_and_print_line.constprop.0+0xd2>
   2e6f0:	call   4bdc0 <rpl_free>
   2e6f5:	or     eax,0xffffffff
   2e6f8:	jmp    2e6c2 <format_and_print_line.constprop.0+0xd2>
   2e6fa:	nop    WORD PTR [rax+rax*1+0x0]

000000000002e700 <print_version>:
   2e700:	endbr64 
   2e704:	push   r15
   2e706:	mov    edx,0x5
   2e70b:	lea    rsi,[rip+0x3a1bf]        # 688d1 <primes.6089+0x27f1>
   2e712:	xor    edi,edi
   2e714:	push   r14
   2e716:	push   r13
   2e718:	xor    r13d,r13d
   2e71b:	push   r12
   2e71d:	push   rbp
   2e71e:	push   rbx
   2e71f:	sub    rsp,0x28
   2e723:	call   c780 <dcgettext@plt>
   2e728:	mov    edx,0x5
   2e72d:	lea    rsi,[rip+0x3a1a6]        # 688da <primes.6089+0x27fa>
   2e734:	xor    edi,edi
   2e736:	mov    r12,rax
   2e739:	call   c780 <dcgettext@plt>
   2e73e:	mov    edx,0x5
   2e743:	lea    rsi,[rip+0x3a199]        # 688e3 <primes.6089+0x2803>
   2e74a:	xor    edi,edi
   2e74c:	mov    QWORD PTR [rsp+0x8],rax
   2e751:	call   c780 <dcgettext@plt>
   2e756:	mov    edx,0x5
   2e75b:	lea    rsi,[rip+0x3a18b]        # 688ed <primes.6089+0x280d>
   2e762:	xor    edi,edi
   2e764:	mov    QWORD PTR [rsp+0x10],rax
   2e769:	call   c780 <dcgettext@plt>
   2e76e:	mov    r15,QWORD PTR [rip+0x52c4b]        # 813c0 <version_string>
   2e775:	mov    edx,0x5
   2e77a:	xor    edi,edi
   2e77c:	lea    rsi,[rip+0x3a171]        # 688f4 <primes.6089+0x2814>
   2e783:	mov    QWORD PTR [rsp+0x18],rax
   2e788:	call   c780 <dcgettext@plt>
   2e78d:	mov    rdx,r15
   2e790:	mov    edi,0x1
   2e795:	lea    rcx,[rip+0x3a173]        # 6890f <primes.6089+0x282f>
   2e79c:	mov    rsi,rax
   2e79f:	xor    eax,eax
   2e7a1:	lea    r15,[rip+0x52b98]        # 81340 <compiled_features>
   2e7a8:	call   c070 <__printf_chk@plt>
   2e7ad:	lea    rbp,[r15-0x8]
   2e7b1:	test   eax,eax
   2e7b3:	js     2e828 <print_version+0x128>
   2e7b5:	movsxd rax,r13d
   2e7b8:	mov    rdx,QWORD PTR [r15+rax*8]
   2e7bc:	test   rdx,rdx
   2e7bf:	je     2e832 <print_version+0x132>
   2e7c1:	lea    ecx,[r13+0x1]
   2e7c5:	mov    ebx,0x48
   2e7ca:	movsxd r14,ecx
   2e7cd:	jmp    2e7de <print_version+0xde>
   2e7cf:	nop
   2e7d0:	add    r14,0x1
   2e7d4:	mov    rdx,QWORD PTR [rbp+r14*8+0x0]
   2e7d9:	test   rdx,rdx
   2e7dc:	je     2e80b <print_version+0x10b>
   2e7de:	xor    eax,eax
   2e7e0:	lea    rsi,[rip+0x375b2]        # 65d99 <yy_accept+0xcd9>
   2e7e7:	mov    edi,0x1
   2e7ec:	call   c070 <__printf_chk@plt>
   2e7f1:	test   eax,eax
   2e7f3:	js     2e828 <print_version+0x128>
   2e7f5:	mov    rdi,QWORD PTR [rbp+r14*8+0x0]
   2e7fa:	mov    r13d,r14d
   2e7fd:	call   c310 <strlen@plt>
   2e802:	add    eax,0x2
   2e805:	sub    ebx,eax
   2e807:	test   ebx,ebx
   2e809:	jg     2e7d0 <print_version+0xd0>
   2e80b:	xor    eax,eax
   2e80d:	lea    rsi,[rip+0x371bb]        # 659cf <yy_accept+0x90f>
   2e814:	mov    edi,0x1
   2e819:	call   c070 <__printf_chk@plt>
   2e81e:	test   eax,eax
   2e820:	jns    2e7b5 <print_version+0xb5>
   2e822:	nop    WORD PTR [rax+rax*1+0x0]
   2e828:	mov    edi,0x3
   2e82d:	call   c060 <exit@plt>
   2e832:	xor    eax,eax
   2e834:	lea    rsi,[rip+0x37194]        # 659cf <yy_accept+0x90f>
   2e83b:	mov    edi,0x1
   2e840:	call   c070 <__printf_chk@plt>
   2e845:	test   eax,eax
   2e847:	js     2e828 <print_version+0x128>
   2e849:	xor    eax,eax
   2e84b:	mov    rdx,r12
   2e84e:	mov    edi,0x1
   2e853:	lea    rsi,[rip+0x2ce01]        # 5b65b <_IO_stdin_used+0x65b>
   2e85a:	call   c070 <__printf_chk@plt>
   2e85f:	test   eax,eax
   2e861:	js     2e828 <print_version+0x128>
   2e863:	call   2c770 <wgetrc_env_file_name>
   2e868:	mov    rbp,rax
   2e86b:	test   rax,rax
   2e86e:	je     2e879 <print_version+0x179>
   2e870:	cmp    BYTE PTR [rax],0x0
   2e873:	jne    2ea1b <print_version+0x31b>
   2e879:	call   2c860 <wgetrc_user_file_name>
   2e87e:	mov    rbp,rax
   2e881:	test   rax,rax
   2e884:	je     2e8bb <print_version+0x1bb>
   2e886:	xor    edi,edi
   2e888:	mov    edx,0x5
   2e88d:	lea    rsi,[rip+0x3a093]        # 68927 <primes.6089+0x2847>
   2e894:	call   c780 <dcgettext@plt>
   2e899:	mov    rdx,rbp
   2e89c:	mov    edi,0x1
   2e8a1:	mov    rsi,rax
   2e8a4:	xor    eax,eax
   2e8a6:	call   c070 <__printf_chk@plt>
   2e8ab:	test   eax,eax
   2e8ad:	js     2e828 <print_version+0x128>
   2e8b3:	mov    rdi,rbp
   2e8b6:	call   4bdc0 <rpl_free>
   2e8bb:	xor    edi,edi
   2e8bd:	mov    edx,0x5
   2e8c2:	lea    rsi,[rip+0x3a06d]        # 68936 <primes.6089+0x2856>
   2e8c9:	call   c780 <dcgettext@plt>
   2e8ce:	lea    rdx,[rip+0x39394]        # 67c69 <primes.6089+0x1b89>
   2e8d5:	mov    edi,0x1
   2e8da:	mov    rsi,rax
   2e8dd:	xor    eax,eax
   2e8df:	call   c070 <__printf_chk@plt>
   2e8e4:	test   eax,eax
   2e8e6:	js     2e828 <print_version+0x128>
   2e8ec:	mov    rdi,QWORD PTR [rsp+0x8]
   2e8f1:	lea    rsi,[rip+0x3a04f]        # 68947 <primes.6089+0x2867>
   2e8f8:	call   2e5f0 <format_and_print_line.constprop.0>
   2e8fd:	test   eax,eax
   2e8ff:	js     2e828 <print_version+0x128>
   2e905:	mov    rsi,QWORD PTR [rip+0x52aac]        # 813b8 <compilation_string>
   2e90c:	test   rsi,rsi
   2e90f:	je     2e923 <print_version+0x223>
   2e911:	mov    rdi,QWORD PTR [rsp+0x10]
   2e916:	call   2e5f0 <format_and_print_line.constprop.0>
   2e91b:	test   eax,eax
   2e91d:	js     2e828 <print_version+0x128>
   2e923:	mov    rsi,QWORD PTR [rip+0x52a86]        # 813b0 <link_string>
   2e92a:	test   rsi,rsi
   2e92d:	je     2e941 <print_version+0x241>
   2e92f:	mov    rdi,QWORD PTR [rsp+0x18]
   2e934:	call   2e5f0 <format_and_print_line.constprop.0>
   2e939:	test   eax,eax
   2e93b:	js     2e828 <print_version+0x128>
   2e941:	xor    eax,eax
   2e943:	lea    rsi,[rip+0x37085]        # 659cf <yy_accept+0x90f>
   2e94a:	mov    edi,0x1
   2e94f:	call   c070 <__printf_chk@plt>
   2e954:	test   eax,eax
   2e956:	js     2e828 <print_version+0x128>
   2e95c:	xor    edi,edi
   2e95e:	mov    edx,0x5
   2e963:	lea    rsi,[rip+0x3a28e]        # 68bf8 <primes.6089+0x2b18>
   2e96a:	call   c780 <dcgettext@plt>
   2e96f:	lea    rdx,[rip+0x39fe4]        # 6895a <primes.6089+0x287a>
   2e976:	mov    edi,0x1
   2e97b:	mov    rsi,rax
   2e97e:	xor    eax,eax
   2e980:	call   c070 <__printf_chk@plt>
   2e985:	test   eax,eax
   2e987:	js     2e828 <print_version+0x128>
   2e98d:	xor    edi,edi
   2e98f:	mov    rbp,QWORD PTR [rip+0x54b52]        # 834e8 <stdout@@GLIBC_2.2.5>
   2e996:	mov    edx,0x5
   2e99b:	lea    rsi,[rip+0x3a28e]        # 68c30 <primes.6089+0x2b50>
   2e9a2:	call   c780 <dcgettext@plt>
   2e9a7:	mov    rdi,rax
   2e9aa:	mov    rsi,rbp
   2e9ad:	call   c580 <fputs@plt>
   2e9b2:	test   eax,eax
   2e9b4:	js     2e828 <print_version+0x128>
   2e9ba:	xor    edi,edi
   2e9bc:	mov    rbp,QWORD PTR [rip+0x54b25]        # 834e8 <stdout@@GLIBC_2.2.5>
   2e9c3:	mov    edx,0x5
   2e9c8:	lea    rsi,[rip+0x3a331]        # 68d00 <primes.6089+0x2c20>
   2e9cf:	call   c780 <dcgettext@plt>
   2e9d4:	mov    rdi,rax
   2e9d7:	mov    rsi,rbp
   2e9da:	call   c580 <fputs@plt>
   2e9df:	test   eax,eax
   2e9e1:	js     2e828 <print_version+0x128>
   2e9e7:	xor    edi,edi
   2e9e9:	mov    rbp,QWORD PTR [rip+0x54af8]        # 834e8 <stdout@@GLIBC_2.2.5>
   2e9f0:	mov    edx,0x5
   2e9f5:	lea    rsi,[rip+0x3a344]        # 68d40 <primes.6089+0x2c60>
   2e9fc:	call   c780 <dcgettext@plt>
   2ea01:	mov    rdi,rax
   2ea04:	mov    rsi,rbp
   2ea07:	call   c580 <fputs@plt>
   2ea0c:	test   eax,eax
   2ea0e:	js     2e828 <print_version+0x128>
   2ea14:	xor    edi,edi
   2ea16:	call   c060 <exit@plt>
   2ea1b:	xor    edi,edi
   2ea1d:	mov    edx,0x5
   2ea22:	lea    rsi,[rip+0x39ef0]        # 68919 <primes.6089+0x2839>
   2ea29:	call   c780 <dcgettext@plt>
   2ea2e:	mov    rdx,rbp
   2ea31:	mov    edi,0x1
   2ea36:	mov    rsi,rax
   2ea39:	xor    eax,eax
   2ea3b:	call   c070 <__printf_chk@plt>
   2ea40:	test   eax,eax
   2ea42:	js     2e828 <print_version+0x128>
   2ea48:	mov    rdi,rbp
   2ea4b:	call   4bdc0 <rpl_free>
   2ea50:	jmp    2e879 <print_version+0x179>
   2ea55:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000002ea60 <run_use_askpass.constprop.0>:
   2ea60:	push   r13
   2ea62:	push   r12
   2ea64:	push   rbp
   2ea65:	push   rbx
   2ea66:	mov    rbx,rdi
   2ea69:	sub    rsp,0x498
   2ea70:	mov    rax,QWORD PTR fs:0x28
   2ea79:	mov    QWORD PTR [rsp+0x488],rax
   2ea81:	xor    eax,eax
   2ea83:	lea    rdi,[rsp+0x8]
   2ea88:	call   c4b0 <pipe@plt>
   2ea8d:	cmp    eax,0xffffffff
   2ea90:	je     2eb8f <run_use_askpass.constprop.0+0x12f>
   2ea96:	lea    r12,[rsp+0x30]
   2ea9b:	mov    rdi,r12
   2ea9e:	call   c3e0 <posix_spawn_file_actions_init@plt>
   2eaa3:	mov    r13d,eax
   2eaa6:	test   eax,eax
   2eaa8:	jne    2ec7d <run_use_askpass.constprop.0+0x21d>
   2eaae:	mov    esi,DWORD PTR [rsp+0xc]
   2eab2:	mov    edx,0x1
   2eab7:	mov    rdi,r12
   2eaba:	call   c9a0 <posix_spawn_file_actions_adddup2@plt>
   2eabf:	mov    r13d,eax
   2eac2:	test   eax,eax
   2eac4:	jne    2ec47 <run_use_askpass.constprop.0+0x1e7>
   2eaca:	xor    ecx,ecx
   2eacc:	lea    rdi,[rsp+0x4]
   2ead1:	lea    r8,[rsp+0x10]
   2ead6:	mov    rdx,r12
   2ead9:	mov    rsi,QWORD PTR [rip+0x5b6f8]        # 8a1d8 <opt+0x158>
   2eae0:	mov    r9,QWORD PTR [rip+0x549b9]        # 834a0 <__environ@@GLIBC_2.2.5>
   2eae7:	lea    r13,[rip+0x57b12]        # 86600 <question.9156>
   2eaee:	mov    QWORD PTR [rsp+0x20],0x0
   2eaf7:	mov    QWORD PTR [rsp+0x18],r13
   2eafc:	mov    QWORD PTR [rsp+0x10],rsi
   2eb01:	call   c7d0 <posix_spawnp@plt>
   2eb06:	test   eax,eax
   2eb08:	jne    2ec19 <run_use_askpass.constprop.0+0x1b9>
   2eb0e:	mov    edi,DWORD PTR [rsp+0xc]
   2eb12:	lea    r12,[rsp+0x80]
   2eb1a:	call   bf10 <close@plt>
   2eb1f:	mov    edi,DWORD PTR [rsp+0x8]
   2eb23:	mov    edx,0x3ff
   2eb28:	mov    rsi,r12
   2eb2b:	call   c0c0 <read@plt>
   2eb30:	mov    rbp,rax
   2eb33:	test   rax,rax
   2eb36:	jle    2ebc7 <run_use_askpass.constprop.0+0x167>
   2eb3c:	lea    rsi,[rip+0x3f300]        # 6de43 <urlchr_table+0x2a3>
   2eb43:	mov    rdi,r12
   2eb46:	mov    BYTE PTR [rsp+rax*1+0x80],0x0
   2eb4e:	call   c0a0 <strpbrk@plt>
   2eb53:	mov    rdi,r12
   2eb56:	mov    rdx,rax
   2eb59:	sub    rdx,r12
   2eb5c:	test   rax,rax
   2eb5f:	cmovne rbp,rdx
   2eb63:	mov    rsi,rbp
   2eb66:	call   4bab0 <xmemdup0>
   2eb6b:	mov    QWORD PTR [rbx],rax
   2eb6e:	mov    rax,QWORD PTR [rsp+0x488]
   2eb76:	xor    rax,QWORD PTR fs:0x28
   2eb7f:	jne    2ebc2 <run_use_askpass.constprop.0+0x162>
   2eb81:	add    rsp,0x498
   2eb88:	pop    rbx
   2eb89:	pop    rbp
   2eb8a:	pop    r12
   2eb8c:	pop    r13
   2eb8e:	ret    
   2eb8f:	mov    edx,0x5
   2eb94:	lea    rsi,[rip+0x39dc4]        # 6895f <primes.6089+0x287f>
   2eb9b:	xor    edi,edi
   2eb9d:	call   c780 <dcgettext@plt>
   2eba2:	mov    rdi,QWORD PTR [rip+0x54937]        # 834e0 <stderr@@GLIBC_2.2.5>
   2eba9:	mov    esi,0x1
   2ebae:	mov    rdx,rax
   2ebb1:	xor    eax,eax
   2ebb3:	call   bfd0 <__fprintf_chk@plt>
   2ebb8:	mov    edi,0x1
   2ebbd:	call   c060 <exit@plt>
   2ebc2:	call   c7b0 <__stack_chk_fail@plt>
   2ebc7:	call   c740 <__errno_location@plt>
   2ebcc:	mov    edi,DWORD PTR [rax]
   2ebce:	call   c540 <strerror@plt>
   2ebd3:	mov    r12,QWORD PTR [rip+0x5b5fe]        # 8a1d8 <opt+0x158>
   2ebda:	mov    edx,0x5
   2ebdf:	xor    edi,edi
   2ebe1:	lea    rsi,[rip+0x3a210]        # 68df8 <primes.6089+0x2d18>
   2ebe8:	mov    rbx,rax
   2ebeb:	call   c780 <dcgettext@plt>
   2ebf0:	mov    r9,rbx
   2ebf3:	mov    r8,r13
   2ebf6:	mov    rcx,r12
   2ebf9:	mov    rdi,QWORD PTR [rip+0x548e0]        # 834e0 <stderr@@GLIBC_2.2.5>
   2ec00:	mov    rdx,rax
   2ec03:	mov    esi,0x1
   2ec08:	xor    eax,eax
   2ec0a:	call   bfd0 <__fprintf_chk@plt>
   2ec0f:	mov    edi,0x1
   2ec14:	call   c060 <exit@plt>
   2ec19:	mov    rdi,QWORD PTR [rip+0x548c0]        # 834e0 <stderr@@GLIBC_2.2.5>
   2ec20:	mov    r8d,eax
   2ec23:	xor    eax,eax
   2ec25:	mov    rcx,QWORD PTR [rip+0x5b5ac]        # 8a1d8 <opt+0x158>
   2ec2c:	lea    rdx,[rip+0x39d40]        # 68973 <primes.6089+0x2893>
   2ec33:	mov    esi,0x1
   2ec38:	call   bfd0 <__fprintf_chk@plt>
   2ec3d:	mov    edi,0x1
   2ec42:	call   c060 <exit@plt>
   2ec47:	mov    edx,0x5
   2ec4c:	lea    rsi,[rip+0x3a16d]        # 68dc0 <primes.6089+0x2ce0>
   2ec53:	xor    edi,edi
   2ec55:	call   c780 <dcgettext@plt>
   2ec5a:	mov    rdi,QWORD PTR [rip+0x5487f]        # 834e0 <stderr@@GLIBC_2.2.5>
   2ec61:	mov    ecx,r13d
   2ec64:	mov    esi,0x1
   2ec69:	mov    rdx,rax
   2ec6c:	xor    eax,eax
   2ec6e:	call   bfd0 <__fprintf_chk@plt>
   2ec73:	mov    edi,0x1
   2ec78:	call   c060 <exit@plt>
   2ec7d:	mov    edx,0x5
   2ec82:	lea    rsi,[rip+0x3a0f7]        # 68d80 <primes.6089+0x2ca0>
   2ec89:	jmp    2ec53 <run_use_askpass.constprop.0+0x1f3>
   2ec8b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002ec90 <maybe_add_to_list>:
   2ec90:	push   r13
   2ec92:	push   r12
   2ec94:	mov    r12,rdi
   2ec97:	push   rbp
   2ec98:	mov    rbp,rsi
   2ec9b:	push   rbx
   2ec9c:	sub    rsp,0x8
   2eca0:	mov    rbx,QWORD PTR [rdi]
   2eca3:	mov    r13,QWORD PTR [rsi]
   2eca6:	test   rbx,rbx
   2eca9:	je     2ece0 <maybe_add_to_list+0x50>
   2ecab:	cmp    QWORD PTR [rbx+0x8],0x0
   2ecb0:	je     2ece8 <maybe_add_to_list+0x58>
   2ecb2:	mov    QWORD PTR [rbx+0x18],r13
   2ecb6:	mov    edi,0x20
   2ecbb:	call   4b850 <xmalloc>
   2ecc0:	pxor   xmm0,xmm0
   2ecc4:	movups XMMWORD PTR [rax],xmm0
   2ecc7:	movups XMMWORD PTR [rax+0x10],xmm0
   2eccb:	mov    QWORD PTR [r12],rax
   2eccf:	mov    QWORD PTR [rbp+0x0],rbx
   2ecd3:	add    rsp,0x8
   2ecd7:	pop    rbx
   2ecd8:	pop    rbp
   2ecd9:	pop    r12
   2ecdb:	pop    r13
   2ecdd:	ret    
   2ecde:	xchg   ax,ax
   2ece0:	mov    rbx,r13
   2ece3:	jmp    2ecb6 <maybe_add_to_list+0x26>
   2ece5:	nop    DWORD PTR [rax]
   2ece8:	mov    rdi,QWORD PTR [rbx]
   2eceb:	call   4bdc0 <rpl_free>
   2ecf0:	mov    QWORD PTR [rbx],0x0
   2ecf7:	mov    rdi,QWORD PTR [rbx+0x8]
   2ecfb:	call   4bdc0 <rpl_free>
   2ed00:	mov    QWORD PTR [rbx+0x8],0x0
   2ed08:	mov    rdi,QWORD PTR [rbx+0x10]
   2ed0c:	call   4bdc0 <rpl_free>
   2ed11:	mov    QWORD PTR [rbx+0x10],0x0
   2ed19:	mov    rax,rbx
   2ed1c:	mov    rbx,r13
   2ed1f:	jmp    2ecc0 <maybe_add_to_list+0x30>
   2ed21:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   2ed2c:	nop    DWORD PTR [rax+0x0]

000000000002ed30 <parse_netrc_fp>:
   2ed30:	push   r15
   2ed32:	push   r14
   2ed34:	xor    r14d,r14d
   2ed37:	push   r13
   2ed39:	push   r12
   2ed3b:	xor    r12d,r12d
   2ed3e:	push   rbp
   2ed3f:	push   rbx
   2ed40:	sub    rsp,0x78
   2ed44:	mov    QWORD PTR [rsp+0x10],rdi
   2ed49:	mov    QWORD PTR [rsp+0x28],rsi
   2ed4e:	mov    rax,QWORD PTR fs:0x28
   2ed57:	mov    QWORD PTR [rsp+0x68],rax
   2ed5c:	xor    eax,eax
   2ed5e:	lea    rax,[rsp+0x58]
   2ed63:	mov    QWORD PTR [rsp+0x48],0x0
   2ed6c:	mov    QWORD PTR [rsp+0x20],rax
   2ed71:	lea    rax,[rsp+0x50]
   2ed76:	mov    QWORD PTR [rsp+0x18],rax
   2ed7b:	lea    rax,[rsp+0x60]
   2ed80:	mov    QWORD PTR [rsp+0x38],rax
   2ed85:	lea    rax,[rsp+0x48]
   2ed8a:	mov    QWORD PTR [rsp+0x50],0x0
   2ed93:	mov    QWORD PTR [rsp+0x58],0x0
   2ed9c:	mov    QWORD PTR [rsp+0x60],0x0
   2eda5:	mov    QWORD PTR [rsp+0x30],rax
   2edaa:	nop    WORD PTR [rax+rax*1+0x0]
   2edb0:	mov    rcx,QWORD PTR [rsp+0x28]
   2edb5:	mov    rsi,QWORD PTR [rsp+0x38]
   2edba:	mov    edx,0xa
   2edbf:	mov    rdi,QWORD PTR [rsp+0x30]
   2edc4:	call   be90 <__getdelim@plt>
   2edc9:	test   rax,rax
   2edcc:	jle    2f4a0 <parse_netrc_fp+0x770>
   2edd2:	mov    rdx,QWORD PTR [rsp+0x48]
   2edd7:	add    r12d,0x1
   2eddb:	movzx  eax,BYTE PTR [rdx]
   2edde:	test   al,al
   2ede0:	je     2f5c0 <parse_netrc_fp+0x890>
   2ede6:	cmp    al,0xd
   2ede8:	jg     2ee00 <parse_netrc_fp+0xd0>
   2edea:	cmp    al,0x8
   2edec:	jg     2ee04 <parse_netrc_fp+0xd4>
   2edee:	cmp    r14d,0x3
   2edf2:	jne    2ee26 <parse_netrc_fp+0xf6>
   2edf4:	nop    DWORD PTR [rax+0x0]
   2edf8:	mov    r14d,0x3
   2edfe:	jmp    2edb0 <parse_netrc_fp+0x80>
   2ee00:	cmp    al,0x20
   2ee02:	jne    2ee20 <parse_netrc_fp+0xf0>
   2ee04:	movzx  eax,BYTE PTR [rdx+0x1]
   2ee08:	add    rdx,0x1
   2ee0c:	test   al,al
   2ee0e:	jne    2ede6 <parse_netrc_fp+0xb6>
   2ee10:	cmp    r14d,0x3
   2ee14:	jne    2ee26 <parse_netrc_fp+0xf6>
   2ee16:	xor    r14d,r14d
   2ee19:	jmp    2ee26 <parse_netrc_fp+0xf6>
   2ee1b:	nop    DWORD PTR [rax+rax*1+0x0]
   2ee20:	cmp    r14d,0x3
   2ee24:	je     2edf8 <parse_netrc_fp+0xc8>
   2ee26:	movzx  eax,BYTE PTR [rdx]
   2ee29:	test   al,al
   2ee2b:	je     2edb0 <parse_netrc_fp+0x80>
   2ee2d:	lea    rbx,[rip+0x3de24]        # 6cc58 <primes.6089+0x6b78>
   2ee34:	mov    rbp,rdx
   2ee37:	cmp    al,0xd
   2ee39:	jg     2f1f3 <parse_netrc_fp+0x4c3>
   2ee3f:	nop
   2ee40:	cmp    al,0x8
   2ee42:	jg     2f1d8 <parse_netrc_fp+0x4a8>
   2ee48:	test   al,al
   2ee4a:	je     2edb0 <parse_netrc_fp+0x80>
   2ee50:	movzx  eax,BYTE PTR [rbp+0x0]
   2ee54:	xor    ecx,ecx
   2ee56:	test   al,al
   2ee58:	je     2f240 <parse_netrc_fp+0x510>
   2ee5e:	mov    r15,rbp
   2ee61:	test   ecx,ecx
   2ee63:	je     2f250 <parse_netrc_fp+0x520>
   2ee69:	cmp    al,0x22
   2ee6b:	je     2f320 <parse_netrc_fp+0x5f0>
   2ee71:	cmp    al,0x5c
   2ee73:	je     2f284 <parse_netrc_fp+0x554>
   2ee79:	nop    DWORD PTR [rax+0x0]
   2ee80:	movzx  eax,BYTE PTR [r15+0x1]
   2ee85:	add    r15,0x1
   2ee89:	test   al,al
   2ee8b:	jne    2ee61 <parse_netrc_fp+0x131>
   2ee8d:	nop    DWORD PTR [rax]
   2ee90:	cmp    r14d,0x7
   2ee94:	ja     2f078 <parse_netrc_fp+0x348>
   2ee9a:	mov    eax,r14d
   2ee9d:	movsxd rax,DWORD PTR [rbx+rax*4]
   2eea1:	add    rax,rbx
   2eea4:	notrack jmp rax
   2eea7:	nop    WORD PTR [rax+rax*1+0x0]
   2eeb0:	cmp    QWORD PTR [rsp+0x50],0x0
   2eeb6:	je     2f410 <parse_netrc_fp+0x6e0>
   2eebc:	mov    rbp,r15
   2eebf:	movzx  eax,BYTE PTR [rbp+0x0]
   2eec3:	test   al,al
   2eec5:	je     2ef7f <parse_netrc_fp+0x24f>
   2eecb:	cmp    al,0xd
   2eecd:	jg     2f310 <parse_netrc_fp+0x5e0>
   2eed3:	xor    ecx,ecx
   2eed5:	xor    r14d,r14d
   2eed8:	cmp    al,0x8
   2eeda:	jle    2ee5e <parse_netrc_fp+0x12e>
   2eedc:	movzx  eax,BYTE PTR [rbp+0x1]
   2eee0:	lea    r13,[rbp+0x1]
   2eee4:	test   al,al
   2eee6:	je     2edb0 <parse_netrc_fp+0x80>
   2eeec:	cmp    al,0xd
   2eeee:	jle    2f3c0 <parse_netrc_fp+0x690>
   2eef4:	cmp    al,0x20
   2eef6:	je     2f428 <parse_netrc_fp+0x6f8>
   2eefc:	cmp    al,0x23
   2eefe:	je     2edb0 <parse_netrc_fp+0x80>
   2ef04:	cmp    al,0x22
   2ef06:	jne    2f695 <parse_netrc_fp+0x965>
   2ef0c:	mov    rbp,r13
   2ef0f:	jmp    2f20f <parse_netrc_fp+0x4df>
   2ef14:	nop    DWORD PTR [rax+0x0]
   2ef18:	cmp    QWORD PTR [rsp+0x50],0x0
   2ef1e:	jne    2eebc <parse_netrc_fp+0x18c>
   2ef20:	mov    r13,rbp
   2ef23:	mov    r14d,0x6
   2ef29:	lea    rdi,[rip+0x3dc90]        # 6cbc0 <primes.6089+0x6ae0>
   2ef30:	mov    rbp,r15
   2ef33:	jmp    2f020 <parse_netrc_fp+0x2f0>
   2ef38:	nop    DWORD PTR [rax+rax*1+0x0]
   2ef40:	mov    rax,QWORD PTR [rsp+0x50]
   2ef45:	test   rax,rax
   2ef48:	je     2f3d0 <parse_netrc_fp+0x6a0>
   2ef4e:	mov    rdi,QWORD PTR [rax+0x10]
   2ef52:	call   4bdc0 <rpl_free>
   2ef57:	mov    r13,QWORD PTR [rsp+0x50]
   2ef5c:	mov    rdi,rbp
   2ef5f:	mov    rbp,r15
   2ef62:	mov    QWORD PTR [r13+0x10],0x0
   2ef6a:	call   4ba50 <xstrdup>
   2ef6f:	mov    QWORD PTR [r13+0x10],rax
   2ef73:	movzx  eax,BYTE PTR [rbp+0x0]
   2ef77:	test   al,al
   2ef79:	jne    2eecb <parse_netrc_fp+0x19b>
   2ef7f:	xor    r14d,r14d
   2ef82:	jmp    2edb0 <parse_netrc_fp+0x80>
   2ef87:	nop    WORD PTR [rax+rax*1+0x0]
   2ef90:	mov    rsi,QWORD PTR [rsp+0x20]
   2ef95:	mov    rdi,QWORD PTR [rsp+0x18]
   2ef9a:	call   2ec90 <maybe_add_to_list>
   2ef9f:	mov    r13,QWORD PTR [rsp+0x50]
   2efa4:	mov    rdi,rbp
   2efa7:	mov    rbp,r15
   2efaa:	call   4ba50 <xstrdup>
   2efaf:	mov    QWORD PTR [r13+0x0],rax
   2efb3:	jmp    2eebf <parse_netrc_fp+0x18f>
   2efb8:	nop    DWORD PTR [rax+rax*1+0x0]
   2efc0:	mov    rax,QWORD PTR [rsp+0x50]
   2efc5:	test   rax,rax
   2efc8:	je     2f3f0 <parse_netrc_fp+0x6c0>
   2efce:	mov    rdi,QWORD PTR [rax+0x8]
   2efd2:	call   4bdc0 <rpl_free>
   2efd7:	mov    r13,QWORD PTR [rsp+0x50]
   2efdc:	mov    rdi,rbp
   2efdf:	mov    rbp,r15
   2efe2:	mov    QWORD PTR [r13+0x8],0x0
   2efea:	call   4ba50 <xstrdup>
   2efef:	mov    QWORD PTR [r13+0x8],rax
   2eff3:	jmp    2eebf <parse_netrc_fp+0x18f>
   2eff8:	nop    DWORD PTR [rax+rax*1+0x0]
   2f000:	cmp    QWORD PTR [rsp+0x50],0x0
   2f006:	jne    2eebc <parse_netrc_fp+0x18c>
   2f00c:	mov    r13,rbp
   2f00f:	mov    r14d,0x1
   2f015:	lea    rdi,[rip+0x3dba9]        # 6cbc5 <primes.6089+0x6ae5>
   2f01c:	mov    rbp,r15
   2f01f:	nop
   2f020:	call   4b5b0 <quote>
   2f025:	mov    edx,0x5
   2f02a:	xor    edi,edi
   2f02c:	lea    rsi,[rip+0x3dbe5]        # 6cc18 <primes.6089+0x6b38>
   2f033:	mov    QWORD PTR [rsp+0x8],rax
   2f038:	mov    r15,QWORD PTR [rip+0x5b3e1]        # 8a420 <exec_name>
   2f03f:	call   c780 <dcgettext@plt>
   2f044:	sub    rsp,0x8
   2f048:	mov    r9d,r12d
   2f04b:	mov    rdi,QWORD PTR [rip+0x5448e]        # 834e0 <stderr@@GLIBC_2.2.5>
   2f052:	mov    r8,QWORD PTR [rsp+0x10]
   2f057:	mov    rdx,rax
   2f05a:	mov    rcx,r15
   2f05d:	mov    esi,0x1
   2f062:	xor    eax,eax
   2f064:	push   r8
   2f066:	mov    r8,QWORD PTR [rsp+0x20]
   2f06b:	call   bfd0 <__fprintf_chk@plt>
   2f070:	pop    rax
   2f071:	pop    rdx
   2f072:	jmp    2f080 <parse_netrc_fp+0x350>
   2f074:	nop    DWORD PTR [rax+0x0]
   2f078:	mov    r13,rbp
   2f07b:	mov    rbp,r15
   2f07e:	xchg   ax,ax
   2f080:	test   r14d,r14d
   2f083:	jne    2eebf <parse_netrc_fp+0x18f>
   2f089:	mov    ecx,0x8
   2f08e:	mov    rsi,r13
   2f091:	lea    rdi,[rip+0x3db2d]        # 6cbc5 <primes.6089+0x6ae5>
   2f098:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f09a:	seta   cl
   2f09d:	sbb    cl,0x0
   2f0a0:	movsx  ecx,cl
   2f0a3:	test   ecx,ecx
   2f0a5:	je     2f2b0 <parse_netrc_fp+0x580>
   2f0ab:	mov    ecx,0x8
   2f0b0:	lea    rdi,[rip+0x3db1c]        # 6cbd3 <primes.6089+0x6af3>
   2f0b7:	mov    rsi,r13
   2f0ba:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f0bc:	seta   cl
   2f0bf:	sbb    cl,0x0
   2f0c2:	movsx  ecx,cl
   2f0c5:	test   ecx,ecx
   2f0c7:	je     2f348 <parse_netrc_fp+0x618>
   2f0cd:	mov    ecx,0x6
   2f0d2:	mov    rsi,r13
   2f0d5:	lea    rdi,[rip+0x38f5f]        # 6803b <primes.6089+0x1f5b>
   2f0dc:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f0de:	seta   cl
   2f0e1:	sbb    cl,0x0
   2f0e4:	movsx  ecx,cl
   2f0e7:	test   ecx,ecx
   2f0e9:	jne    2f150 <parse_netrc_fp+0x420>
   2f0eb:	movzx  eax,BYTE PTR [rbp+0x0]
   2f0ef:	test   al,al
   2f0f1:	je     2f5d2 <parse_netrc_fp+0x8a2>
   2f0f7:	mov    r14d,0x2
   2f0fd:	cmp    al,0xd
   2f0ff:	jg     2f1f3 <parse_netrc_fp+0x4c3>
   2f105:	cmp    al,0x8
   2f107:	jle    2ee5e <parse_netrc_fp+0x12e>
   2f10d:	movzx  ecx,BYTE PTR [rbp+0x1]
   2f111:	lea    r15,[rbp+0x1]
   2f115:	mov    eax,ecx
   2f117:	test   cl,cl
   2f119:	je     2edb0 <parse_netrc_fp+0x80>
   2f11f:	cmp    cl,0xd
   2f122:	jle    2f1c9 <parse_netrc_fp+0x499>
   2f128:	cmp    cl,0x20
   2f12b:	je     2f5dd <parse_netrc_fp+0x8ad>
   2f131:	cmp    cl,0x23
   2f134:	je     2f5d2 <parse_netrc_fp+0x8a2>
   2f13a:	cmp    cl,0x22
   2f13d:	jne    2f69d <parse_netrc_fp+0x96d>
   2f143:	mov    rbp,r15
   2f146:	jmp    2f20f <parse_netrc_fp+0x4df>
   2f14b:	nop    DWORD PTR [rax+rax*1+0x0]
   2f150:	mov    ecx,0x7
   2f155:	lea    rdi,[rip+0x3da7f]        # 6cbdb <primes.6089+0x6afb>
   2f15c:	mov    rsi,r13
   2f15f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f161:	seta   al
   2f164:	sbb    al,0x0
   2f166:	test   al,al
   2f168:	je     2edf8 <parse_netrc_fp+0xc8>
   2f16e:	mov    ecx,0x8
   2f173:	lea    rdi,[rip+0x3da68]        # 6cbe2 <primes.6089+0x6b02>
   2f17a:	mov    rsi,r13
   2f17d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f17f:	seta   cl
   2f182:	sbb    cl,0x0
   2f185:	movsx  ecx,cl
   2f188:	test   ecx,ecx
   2f18a:	jne    2f440 <parse_netrc_fp+0x710>
   2f190:	movzx  eax,BYTE PTR [rbp+0x0]
   2f194:	test   al,al
   2f196:	je     2f67e <parse_netrc_fp+0x94e>
   2f19c:	mov    r14d,0x4
   2f1a2:	cmp    al,0xd
   2f1a4:	jg     2f1f3 <parse_netrc_fp+0x4c3>
   2f1a6:	cmp    al,0x8
   2f1a8:	jle    2ee5e <parse_netrc_fp+0x12e>
   2f1ae:	movzx  ecx,BYTE PTR [rbp+0x1]
   2f1b2:	lea    r15,[rbp+0x1]
   2f1b6:	mov    eax,ecx
   2f1b8:	test   cl,cl
   2f1ba:	je     2f67e <parse_netrc_fp+0x94e>
   2f1c0:	cmp    cl,0xd
   2f1c3:	jg     2f5fb <parse_netrc_fp+0x8cb>
   2f1c9:	mov    rbp,r15
   2f1cc:	cmp    al,0x8
   2f1ce:	jle    2ee48 <parse_netrc_fp+0x118>
   2f1d4:	nop    DWORD PTR [rax+0x0]
   2f1d8:	movzx  eax,BYTE PTR [rbp+0x1]
   2f1dc:	lea    rdx,[rbp+0x1]
   2f1e0:	test   al,al
   2f1e2:	je     2edb0 <parse_netrc_fp+0x80>
   2f1e8:	mov    rbp,rdx
   2f1eb:	cmp    al,0xd
   2f1ed:	jle    2ee40 <parse_netrc_fp+0x110>
   2f1f3:	cmp    al,0x20
   2f1f5:	je     2f1d8 <parse_netrc_fp+0x4a8>
   2f1f7:	cmp    al,0x23
   2f1f9:	je     2edb0 <parse_netrc_fp+0x80>
   2f1ff:	movzx  edx,BYTE PTR [rbp+0x0]
   2f203:	cmp    al,0x22
   2f205:	jne    2f689 <parse_netrc_fp+0x959>
   2f20b:	test   dl,dl
   2f20d:	je     2f240 <parse_netrc_fp+0x510>
   2f20f:	mov    rax,rbp
   2f212:	nop    WORD PTR [rax+rax*1+0x0]
   2f218:	movzx  edx,BYTE PTR [rax+0x1]
   2f21c:	add    rax,0x1
   2f220:	mov    BYTE PTR [rax-0x1],dl
   2f223:	test   dl,dl
   2f225:	jne    2f218 <parse_netrc_fp+0x4e8>
   2f227:	movzx  eax,BYTE PTR [rbp+0x0]
   2f22b:	mov    ecx,0x1
   2f230:	test   al,al
   2f232:	jne    2ee5e <parse_netrc_fp+0x12e>
   2f238:	nop    DWORD PTR [rax+rax*1+0x0]
   2f240:	mov    r15,rbp
   2f243:	jmp    2ee90 <parse_netrc_fp+0x160>
   2f248:	nop    DWORD PTR [rax+rax*1+0x0]
   2f250:	cmp    al,0xd
   2f252:	jg     2f278 <parse_netrc_fp+0x548>
   2f254:	cmp    al,0x8
   2f256:	jle    2ee80 <parse_netrc_fp+0x150>
   2f25c:	movzx  eax,BYTE PTR [r15]
   2f260:	test   al,al
   2f262:	je     2ee90 <parse_netrc_fp+0x160>
   2f268:	mov    BYTE PTR [r15],0x0
   2f26c:	add    r15,0x1
   2f270:	jmp    2ee90 <parse_netrc_fp+0x160>
   2f275:	nop    DWORD PTR [rax]
   2f278:	cmp    al,0x20
   2f27a:	je     2f25c <parse_netrc_fp+0x52c>
   2f27c:	cmp    al,0x5c
   2f27e:	jne    2ee80 <parse_netrc_fp+0x150>
   2f284:	cmp    BYTE PTR [r15],0x0
   2f288:	je     2ee80 <parse_netrc_fp+0x150>
   2f28e:	mov    rax,r15
   2f291:	nop    DWORD PTR [rax+0x0]
   2f298:	movzx  edx,BYTE PTR [rax+0x1]
   2f29c:	add    rax,0x1
   2f2a0:	mov    BYTE PTR [rax-0x1],dl
   2f2a3:	test   dl,dl
   2f2a5:	jne    2f298 <parse_netrc_fp+0x568>
   2f2a7:	jmp    2ee80 <parse_netrc_fp+0x150>
   2f2ac:	nop    DWORD PTR [rax+0x0]
   2f2b0:	movzx  eax,BYTE PTR [rbp+0x0]
   2f2b4:	mov    r14d,0x1
   2f2ba:	test   al,al
   2f2bc:	je     2edb0 <parse_netrc_fp+0x80>
   2f2c2:	cmp    al,0xd
   2f2c4:	jg     2f1f3 <parse_netrc_fp+0x4c3>
   2f2ca:	cmp    al,0x8
   2f2cc:	jle    2ee5e <parse_netrc_fp+0x12e>
   2f2d2:	movzx  eax,BYTE PTR [rbp+0x1]
   2f2d6:	lea    r15,[rbp+0x1]
   2f2da:	test   al,al
   2f2dc:	je     2edb0 <parse_netrc_fp+0x80>
   2f2e2:	cmp    al,0xd
   2f2e4:	jle    2f1c9 <parse_netrc_fp+0x499>
   2f2ea:	cmp    al,0x20
   2f2ec:	je     2f526 <parse_netrc_fp+0x7f6>
   2f2f2:	cmp    al,0x23
   2f2f4:	je     2edb0 <parse_netrc_fp+0x80>
   2f2fa:	cmp    al,0x22
   2f2fc:	je     2f143 <parse_netrc_fp+0x413>
   2f302:	mov    rbp,r15
   2f305:	jmp    2ee54 <parse_netrc_fp+0x124>
   2f30a:	nop    WORD PTR [rax+rax*1+0x0]
   2f310:	xor    r14d,r14d
   2f313:	jmp    2f1f3 <parse_netrc_fp+0x4c3>
   2f318:	nop    DWORD PTR [rax+rax*1+0x0]
   2f320:	cmp    BYTE PTR [r15],0x0
   2f324:	je     2ee90 <parse_netrc_fp+0x160>
   2f32a:	mov    rax,r15
   2f32d:	nop    DWORD PTR [rax]
   2f330:	movzx  edx,BYTE PTR [rax+0x1]
   2f334:	add    rax,0x1
   2f338:	mov    BYTE PTR [rax-0x1],dl
   2f33b:	test   dl,dl
   2f33d:	jne    2f330 <parse_netrc_fp+0x600>
   2f33f:	jmp    2f25c <parse_netrc_fp+0x52c>
   2f344:	nop    DWORD PTR [rax+0x0]
   2f348:	mov    rsi,QWORD PTR [rsp+0x20]
   2f34d:	mov    rdi,QWORD PTR [rsp+0x18]
   2f352:	mov    DWORD PTR [rsp+0x8],ecx
   2f356:	call   2ec90 <maybe_add_to_list>
   2f35b:	movzx  eax,BYTE PTR [rbp+0x0]
   2f35f:	test   al,al
   2f361:	je     2ef7f <parse_netrc_fp+0x24f>
   2f367:	cmp    al,0xd
   2f369:	jg     2f1f3 <parse_netrc_fp+0x4c3>
   2f36f:	cmp    al,0x8
   2f371:	mov    ecx,DWORD PTR [rsp+0x8]
   2f375:	jle    2ee5e <parse_netrc_fp+0x12e>
   2f37b:	movzx  ecx,BYTE PTR [rbp+0x1]
   2f37f:	lea    r13,[rbp+0x1]
   2f383:	mov    eax,ecx
   2f385:	test   cl,cl
   2f387:	je     2edb0 <parse_netrc_fp+0x80>
   2f38d:	cmp    cl,0xd
   2f390:	jle    2f3c0 <parse_netrc_fp+0x690>
   2f392:	cmp    cl,0x20
   2f395:	je     2f428 <parse_netrc_fp+0x6f8>
   2f39b:	cmp    cl,0x23
   2f39e:	je     2edb0 <parse_netrc_fp+0x80>
   2f3a4:	cmp    cl,0x22
   2f3a7:	je     2ef0c <parse_netrc_fp+0x1dc>
   2f3ad:	mov    rbp,r13
   2f3b0:	mov    eax,ecx
   2f3b2:	jmp    2ee54 <parse_netrc_fp+0x124>
   2f3b7:	nop    WORD PTR [rax+rax*1+0x0]
   2f3c0:	mov    rbp,r13
   2f3c3:	jmp    2ee40 <parse_netrc_fp+0x110>
   2f3c8:	nop    DWORD PTR [rax+rax*1+0x0]
   2f3d0:	mov    r13,rbp
   2f3d3:	mov    r14d,0x5
   2f3d9:	lea    rdi,[rip+0x38927]        # 67d07 <primes.6089+0x1c27>
   2f3e0:	mov    rbp,r15
   2f3e3:	jmp    2f020 <parse_netrc_fp+0x2f0>
   2f3e8:	nop    DWORD PTR [rax+rax*1+0x0]
   2f3f0:	mov    r13,rbp
   2f3f3:	mov    r14d,0x2
   2f3f9:	lea    rdi,[rip+0x38c3b]        # 6803b <primes.6089+0x1f5b>
   2f400:	mov    rbp,r15
   2f403:	jmp    2f020 <parse_netrc_fp+0x2f0>
   2f408:	nop    DWORD PTR [rax+rax*1+0x0]
   2f410:	mov    r13,rbp
   2f413:	mov    r14d,0x7
   2f419:	lea    rdi,[rip+0x3d7ad]        # 6cbcd <primes.6089+0x6aed>
   2f420:	mov    rbp,r15
   2f423:	jmp    2f020 <parse_netrc_fp+0x2f0>
   2f428:	mov    rbp,r13
   2f42b:	movzx  eax,BYTE PTR [rbp+0x1]
   2f42f:	lea    rdx,[rbp+0x1]
   2f433:	test   al,al
   2f435:	jne    2f1e8 <parse_netrc_fp+0x4b8>
   2f43b:	jmp    2edb0 <parse_netrc_fp+0x80>
   2f440:	mov    ecx,0x9
   2f445:	lea    rdi,[rip+0x388bb]        # 67d07 <primes.6089+0x1c27>
   2f44c:	mov    rsi,r13
   2f44f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f451:	seta   cl
   2f454:	sbb    cl,0x0
   2f457:	movsx  ecx,cl
   2f45a:	test   ecx,ecx
   2f45c:	jne    2f540 <parse_netrc_fp+0x810>
   2f462:	movzx  eax,BYTE PTR [rbp+0x0]
   2f466:	test   al,al
   2f468:	je     2f490 <parse_netrc_fp+0x760>
   2f46a:	mov    r14d,0x5
   2f470:	cmp    al,0xd
   2f472:	jg     2f1f3 <parse_netrc_fp+0x4c3>
   2f478:	cmp    al,0x8
   2f47a:	jle    2ee5e <parse_netrc_fp+0x12e>
   2f480:	movzx  eax,BYTE PTR [rbp+0x1]
   2f484:	lea    r15,[rbp+0x1]
   2f488:	test   al,al
   2f48a:	jne    2f2e2 <parse_netrc_fp+0x5b2>
   2f490:	mov    r14d,0x5
   2f496:	jmp    2edb0 <parse_netrc_fp+0x80>
   2f49b:	nop    DWORD PTR [rax+rax*1+0x0]
   2f4a0:	mov    rdi,QWORD PTR [rsp+0x48]
   2f4a5:	call   4bdc0 <rpl_free>
   2f4aa:	mov    rsi,QWORD PTR [rsp+0x20]
   2f4af:	mov    rdi,QWORD PTR [rsp+0x18]
   2f4b4:	mov    QWORD PTR [rsp+0x48],0x0
   2f4bd:	call   2ec90 <maybe_add_to_list>
   2f4c2:	mov    rdi,QWORD PTR [rsp+0x50]
   2f4c7:	call   4bdc0 <rpl_free>
   2f4cc:	mov    rax,QWORD PTR [rsp+0x58]
   2f4d1:	mov    QWORD PTR [rsp+0x58],0x0
   2f4da:	mov    QWORD PTR [rsp+0x50],rax
   2f4df:	test   rax,rax
   2f4e2:	je     2f503 <parse_netrc_fp+0x7d3>
   2f4e4:	xor    ecx,ecx
   2f4e6:	jmp    2f4f3 <parse_netrc_fp+0x7c3>
   2f4e8:	nop    DWORD PTR [rax+rax*1+0x0]
   2f4f0:	mov    rax,rdx
   2f4f3:	mov    rdx,QWORD PTR [rax+0x18]
   2f4f7:	mov    QWORD PTR [rax+0x18],rcx
   2f4fb:	mov    rcx,rax
   2f4fe:	test   rdx,rdx
   2f501:	jne    2f4f0 <parse_netrc_fp+0x7c0>
   2f503:	mov    rbx,QWORD PTR [rsp+0x68]
   2f508:	xor    rbx,QWORD PTR fs:0x28
   2f511:	jne    2f690 <parse_netrc_fp+0x960>
   2f517:	add    rsp,0x78
   2f51b:	pop    rbx
   2f51c:	pop    rbp
   2f51d:	pop    r12
   2f51f:	pop    r13
   2f521:	pop    r14
   2f523:	pop    r15
   2f525:	ret    
   2f526:	mov    rbp,r15
   2f529:	movzx  eax,BYTE PTR [rbp+0x1]
   2f52d:	lea    rdx,[rbp+0x1]
   2f531:	test   al,al
   2f533:	jne    2f1e8 <parse_netrc_fp+0x4b8>
   2f539:	jmp    2edb0 <parse_netrc_fp+0x80>
   2f53e:	xchg   ax,ax
   2f540:	mov    ecx,0x5
   2f545:	lea    rdi,[rip+0x3d674]        # 6cbc0 <primes.6089+0x6ae0>
   2f54c:	mov    rsi,r13
   2f54f:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f551:	seta   cl
   2f554:	sbb    cl,0x0
   2f557:	movsx  ecx,cl
   2f55a:	test   ecx,ecx
   2f55c:	je     2f5a0 <parse_netrc_fp+0x870>
   2f55e:	mov    ecx,0x6
   2f563:	lea    rdi,[rip+0x3d663]        # 6cbcd <primes.6089+0x6aed>
   2f56a:	mov    rsi,r13
   2f56d:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   2f56f:	seta   cl
   2f572:	sbb    cl,0x0
   2f575:	movsx  ecx,cl
   2f578:	test   ecx,ecx
   2f57a:	jne    2f618 <parse_netrc_fp+0x8e8>
   2f580:	movzx  eax,BYTE PTR [rbp+0x0]
   2f584:	mov    r14d,0x7
   2f58a:	test   al,al
   2f58c:	jne    2f2c2 <parse_netrc_fp+0x592>
   2f592:	jmp    2edb0 <parse_netrc_fp+0x80>
   2f597:	nop    WORD PTR [rax+rax*1+0x0]
   2f5a0:	movzx  eax,BYTE PTR [rbp+0x0]
   2f5a4:	mov    r14d,0x6
   2f5aa:	test   al,al
   2f5ac:	jne    2f2c2 <parse_netrc_fp+0x592>
   2f5b2:	jmp    2edb0 <parse_netrc_fp+0x80>
   2f5b7:	nop    WORD PTR [rax+rax*1+0x0]
   2f5c0:	cmp    r14d,0x3
   2f5c4:	mov    eax,0x0
   2f5c9:	cmove  r14d,eax
   2f5cd:	jmp    2edb0 <parse_netrc_fp+0x80>
   2f5d2:	mov    r14d,0x2
   2f5d8:	jmp    2edb0 <parse_netrc_fp+0x80>
   2f5dd:	mov    rbp,r15
   2f5e0:	mov    r14d,0x2
   2f5e6:	movzx  eax,BYTE PTR [rbp+0x1]
   2f5ea:	lea    rdx,[rbp+0x1]
   2f5ee:	test   al,al
   2f5f0:	jne    2f1e8 <parse_netrc_fp+0x4b8>
   2f5f6:	jmp    2edb0 <parse_netrc_fp+0x80>
   2f5fb:	cmp    cl,0x20
   2f5fe:	je     2f526 <parse_netrc_fp+0x7f6>
   2f604:	cmp    cl,0x23
   2f607:	jne    2f13a <parse_netrc_fp+0x40a>
   2f60d:	jmp    2edb0 <parse_netrc_fp+0x80>
   2f612:	nop    WORD PTR [rax+rax*1+0x0]
   2f618:	mov    edx,0x5
   2f61d:	lea    rsi,[rip+0x3d5d4]        # 6cbf8 <primes.6089+0x6b18>
   2f624:	xor    edi,edi
   2f626:	mov    r15,QWORD PTR [rip+0x5adf3]        # 8a420 <exec_name>
   2f62d:	call   c780 <dcgettext@plt>
   2f632:	sub    rsp,0x8
   2f636:	mov    esi,0x1
   2f63b:	mov    r9d,r12d
   2f63e:	push   r13
   2f640:	mov    rdi,QWORD PTR [rip+0x53e99]        # 834e0 <stderr@@GLIBC_2.2.5>
   2f647:	mov    rdx,rax
   2f64a:	mov    rcx,r15
   2f64d:	mov    r8,QWORD PTR [rsp+0x20]
   2f652:	xor    eax,eax
   2f654:	call   bfd0 <__fprintf_chk@plt>
   2f659:	movzx  eax,BYTE PTR [rbp+0x0]
   2f65d:	pop    rcx
   2f65e:	pop    rsi
   2f65f:	test   al,al
   2f661:	je     2ef7f <parse_netrc_fp+0x24f>
   2f667:	cmp    al,0xd
   2f669:	jg     2f1f3 <parse_netrc_fp+0x4c3>
   2f66f:	xor    ecx,ecx
   2f671:	cmp    al,0x8
   2f673:	jle    2ee5e <parse_netrc_fp+0x12e>
   2f679:	jmp    2eedc <parse_netrc_fp+0x1ac>
   2f67e:	mov    r14d,0x4
   2f684:	jmp    2edb0 <parse_netrc_fp+0x80>
   2f689:	mov    eax,edx
   2f68b:	jmp    2ee54 <parse_netrc_fp+0x124>
   2f690:	call   c7b0 <__stack_chk_fail@plt>
   2f695:	mov    rbp,r13
   2f698:	jmp    2ee54 <parse_netrc_fp+0x124>
   2f69d:	mov    rbp,r15
   2f6a0:	mov    eax,ecx
   2f6a2:	jmp    2ee54 <parse_netrc_fp+0x124>
   2f6a7:	nop    WORD PTR [rax+rax*1+0x0]

000000000002f6b0 <search_netrc>:
   2f6b0:	endbr64 
   2f6b4:	push   r15
   2f6b6:	push   r14
   2f6b8:	push   r13
   2f6ba:	push   r12
   2f6bc:	push   rbp
   2f6bd:	push   rbx
   2f6be:	sub    rsp,0xb8
   2f6c5:	mov    DWORD PTR [rsp+0xc],ecx
   2f6c9:	mov    rax,QWORD PTR fs:0x28
   2f6d2:	mov    QWORD PTR [rsp+0xa8],rax
   2f6da:	xor    eax,eax
   2f6dc:	cmp    BYTE PTR [rip+0x5ab1d],0x0        # 8a200 <opt+0x180>
   2f6e3:	je     2f714 <search_netrc+0x64>
   2f6e5:	mov    r13,rdx
   2f6e8:	mov    edx,DWORD PTR [rip+0x5a4b2]        # 89ba0 <processed_netrc>
   2f6ee:	mov    rbx,rdi
   2f6f1:	mov    rbp,rsi
   2f6f4:	test   edx,edx
   2f6f6:	je     2f740 <search_netrc+0x90>
   2f6f8:	mov    r12,QWORD PTR [rip+0x5a4a9]        # 89ba8 <netrc_list>
   2f6ff:	test   r12,r12
   2f702:	je     2f714 <search_netrc+0x64>
   2f704:	mov    r15,QWORD PTR [rbp+0x0]
   2f708:	test   r15,r15
   2f70b:	je     2f780 <search_netrc+0xd0>
   2f70d:	cmp    QWORD PTR [r13+0x0],0x0
   2f712:	je     2f780 <search_netrc+0xd0>
   2f714:	mov    rax,QWORD PTR [rsp+0xa8]
   2f71c:	xor    rax,QWORD PTR fs:0x28
   2f725:	jne    2f923 <search_netrc+0x273>
   2f72b:	add    rsp,0xb8
   2f732:	pop    rbx
   2f733:	pop    rbp
   2f734:	pop    r12
   2f736:	pop    r13
   2f738:	pop    r14
   2f73a:	pop    r15
   2f73c:	ret    
   2f73d:	nop    DWORD PTR [rax]
   2f740:	mov    QWORD PTR [rip+0x5a45d],0x0        # 89ba8 <netrc_list>
   2f74b:	mov    DWORD PTR [rip+0x5a44b],0x1        # 89ba0 <processed_netrc>
   2f755:	test   r8,r8
   2f758:	je     2f7e0 <search_netrc+0x130>
   2f75e:	mov    rsi,r8
   2f761:	lea    rdi,[rip+0x3d482]        # 6cbea <primes.6089+0x6b0a>
   2f768:	call   2ed30 <parse_netrc_fp>
   2f76d:	mov    QWORD PTR [rip+0x5a434],rax        # 89ba8 <netrc_list>
   2f774:	mov    r12,rax
   2f777:	jmp    2f6ff <search_netrc+0x4f>
   2f779:	nop    DWORD PTR [rax+0x0]
   2f780:	mov    r14,r12
   2f783:	nop    DWORD PTR [rax+rax*1+0x0]
   2f788:	mov    rdi,QWORD PTR [r14]
   2f78b:	test   rdi,rdi
   2f78e:	je     2f7a0 <search_netrc+0xf0>
   2f790:	mov    rsi,rbx
   2f793:	call   be10 <strcasecmp@plt>
   2f798:	test   eax,eax
   2f79a:	je     2f830 <search_netrc+0x180>
   2f7a0:	mov    r14,QWORD PTR [r14+0x18]
   2f7a4:	test   r14,r14
   2f7a7:	jne    2f788 <search_netrc+0xd8>
   2f7a9:	test   r15,r15
   2f7ac:	jne    2f714 <search_netrc+0x64>
   2f7b2:	mov    eax,DWORD PTR [rsp+0xc]
   2f7b6:	test   eax,eax
   2f7b8:	je     2f714 <search_netrc+0x64>
   2f7be:	xchg   ax,ax
   2f7c0:	cmp    QWORD PTR [r12],0x0
   2f7c5:	je     2f882 <search_netrc+0x1d2>
   2f7cb:	mov    r12,QWORD PTR [r12+0x18]
   2f7d0:	test   r12,r12
   2f7d3:	jne    2f7c0 <search_netrc+0x110>
   2f7d5:	jmp    2f714 <search_netrc+0x64>
   2f7da:	nop    WORD PTR [rax+rax*1+0x0]
   2f7e0:	mov    rsi,QWORD PTR [rip+0x5ac11]        # 8a3f8 <opt+0x378>
   2f7e7:	test   rsi,rsi
   2f7ea:	je     2f714 <search_netrc+0x64>
   2f7f0:	lea    rdx,[rip+0x3d3f3]        # 6cbea <primes.6089+0x6b0a>
   2f7f7:	lea    rdi,[rip+0x2c3fd]        # 5bbfb <_IO_stdin_used+0xbfb>
   2f7fe:	xor    eax,eax
   2f800:	call   3ba30 <aprintf>
   2f805:	lea    rdx,[rsp+0x10]
   2f80a:	mov    edi,0x1
   2f80f:	mov    rsi,rax
   2f812:	mov    r12,rax
   2f815:	call   c350 <__xstat@plt>
   2f81a:	test   eax,eax
   2f81c:	je     2f89d <search_netrc+0x1ed>
   2f81e:	mov    rdi,r12
   2f821:	call   4bdc0 <rpl_free>
   2f826:	jmp    2f6f8 <search_netrc+0x48>
   2f82b:	nop    DWORD PTR [rax+rax*1+0x0]
   2f830:	mov    rdi,QWORD PTR [r14+0x8]
   2f834:	test   r15,r15
   2f837:	je     2f868 <search_netrc+0x1b8>
   2f839:	mov    rsi,r15
   2f83c:	call   be40 <strcmp@plt>
   2f841:	test   eax,eax
   2f843:	jne    2f858 <search_netrc+0x1a8>
   2f845:	mov    rax,QWORD PTR [r14+0x10]
   2f849:	mov    QWORD PTR [r13+0x0],rax
   2f84d:	jmp    2f714 <search_netrc+0x64>
   2f852:	nop    WORD PTR [rax+rax*1+0x0]
   2f858:	mov    QWORD PTR [r13+0x0],0x0
   2f860:	jmp    2f714 <search_netrc+0x64>
   2f865:	nop    DWORD PTR [rax]
   2f868:	mov    QWORD PTR [rbp+0x0],rdi
   2f86c:	mov    rax,QWORD PTR [r14+0x10]
   2f870:	test   rax,rax
   2f873:	je     2f714 <search_netrc+0x64>
   2f879:	mov    QWORD PTR [r13+0x0],rax
   2f87d:	jmp    2f714 <search_netrc+0x64>
   2f882:	mov    rax,QWORD PTR [r12+0x8]
   2f887:	mov    QWORD PTR [rbp+0x0],rax
   2f88b:	cmp    QWORD PTR [r13+0x0],0x0
   2f890:	jne    2f714 <search_netrc+0x64>
   2f896:	mov    rax,QWORD PTR [r12+0x10]
   2f89b:	jmp    2f879 <search_netrc+0x1c9>
   2f89d:	lea    rsi,[rip+0x3669c]        # 65f40 <yy_accept+0xe80>
   2f8a4:	mov    rdi,r12
   2f8a7:	call   c0f0 <fopen@plt>
   2f8ac:	mov    r15,rax
   2f8af:	test   rax,rax
   2f8b2:	je     2f8d6 <search_netrc+0x226>
   2f8b4:	mov    rdi,r12
   2f8b7:	mov    rsi,rax
   2f8ba:	call   2ed30 <parse_netrc_fp>
   2f8bf:	mov    rdi,r15
   2f8c2:	mov    r14,rax
   2f8c5:	call   c8b0 <fclose@plt>
   2f8ca:	mov    QWORD PTR [rip+0x5a2d7],r14        # 89ba8 <netrc_list>
   2f8d1:	jmp    2f81e <search_netrc+0x16e>
   2f8d6:	call   c740 <__errno_location@plt>
   2f8db:	mov    edi,DWORD PTR [rax]
   2f8dd:	call   c540 <strerror@plt>
   2f8e2:	mov    r14,QWORD PTR [rip+0x5ab37]        # 8a420 <exec_name>
   2f8e9:	mov    edx,0x5
   2f8ee:	xor    edi,edi
   2f8f0:	lea    rsi,[rip+0x3832d]        # 67c24 <primes.6089+0x1b44>
   2f8f7:	mov    r15,rax
   2f8fa:	call   c780 <dcgettext@plt>
   2f8ff:	mov    rcx,r14
   2f902:	mov    r9,r15
   2f905:	mov    r8,r12
   2f908:	mov    rdi,QWORD PTR [rip+0x53bd1]        # 834e0 <stderr@@GLIBC_2.2.5>
   2f90f:	mov    rdx,rax
   2f912:	mov    esi,0x1
   2f917:	xor    eax,eax
   2f919:	xor    r14d,r14d
   2f91c:	call   bfd0 <__fprintf_chk@plt>
   2f921:	jmp    2f8ca <search_netrc+0x21a>
   2f923:	call   c7b0 <__stack_chk_fail@plt>
   2f928:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002f930 <dot_update>:
   2f930:	endbr64 
   2f934:	comisd xmm0,QWORD PTR [rip+0x3d454]        # 6cd90 <eta_str.8886+0x18>
   2f93c:	jae    2f960 <dot_update+0x30>
   2f93e:	pxor   xmm1,xmm1
   2f942:	maxsd  xmm1,xmm0
   2f946:	movapd xmm0,xmm1
   2f94a:	test   rsi,rsi
   2f94d:	mov    eax,0x0
   2f952:	movsd  QWORD PTR [rdi+0x18],xmm0
   2f957:	cmovs  rsi,rax
   2f95b:	add    QWORD PTR [rdi+0x10],rsi
   2f95f:	ret    
   2f960:	movsd  xmm0,QWORD PTR [rip+0x3d420]        # 6cd88 <eta_str.8886+0x10>
   2f968:	jmp    2f94a <dot_update+0x1a>
   2f96a:	nop    WORD PTR [rax+rax*1+0x0]

000000000002f970 <eta_to_human_short>:
   2f970:	test   sil,sil
   2f973:	lea    rax,[rip+0x3ea9d]        # 6e417 <urlchr_table+0x877>
   2f97a:	lea    r9,[rip+0x36544]        # 65ec5 <yy_accept+0xe05>
   2f981:	cmovne r9,rax
   2f985:	cmp    DWORD PTR [rip+0x51795],edi        # 81120 <last.8952>
   2f98b:	je     2fa50 <eta_to_human_short+0xe0>
   2f991:	sub    rsp,0x8
   2f995:	mov    r8d,edi
   2f998:	mov    DWORD PTR [rip+0x51782],edi        # 81120 <last.8952>
   2f99e:	lea    rcx,[rip+0x38f18]        # 688bd <primes.6089+0x27dd>
   2f9a5:	cmp    edi,0x63
   2f9a8:	jle    2fa27 <eta_to_human_short+0xb7>
   2f9aa:	cmp    edi,0x176f
   2f9b0:	jle    2fa60 <eta_to_human_short+0xf0>
   2f9b6:	movsxd rax,edi
   2f9b9:	cmp    edi,0x2a2ff
   2f9bf:	jle    2fab8 <eta_to_human_short+0x148>
   2f9c5:	imul   r8,rax,0xffffffffc22e4507
   2f9cc:	mov    edx,edi
   2f9ce:	sar    edx,0x1f
   2f9d1:	shr    r8,0x20
   2f9d5:	add    r8d,edi
   2f9d8:	sar    r8d,0x10
   2f9dc:	sub    r8d,edx
   2f9df:	cmp    edi,0x83d5ff
   2f9e5:	jg     2fa20 <eta_to_human_short+0xb0>
   2f9e7:	imul   rax,rax,0xffffffff91a2b3c5
   2f9ee:	sub    rsp,0x8
   2f9f2:	lea    rcx,[rip+0x3d291]        # 6cc8a <primes.6089+0x6baa>
   2f9f9:	shr    rax,0x20
   2f9fd:	add    edi,eax
   2f9ff:	sar    edi,0xb
   2fa02:	sub    edi,edx
   2fa04:	mov    edx,0xaaaaaaab
   2fa09:	mov    eax,edi
   2fa0b:	imul   rax,rdx
   2fa0f:	shr    rax,0x24
   2fa13:	lea    eax,[rax+rax*2]
   2fa16:	shl    eax,0x3
   2fa19:	sub    edi,eax
   2fa1b:	push   rdi
   2fa1c:	jmp    2fa8f <eta_to_human_short+0x11f>
   2fa1e:	xchg   ax,ax
   2fa20:	lea    rcx,[rip+0x3d26c]        # 6cc93 <primes.6089+0x6bb3>
   2fa27:	mov    edx,0x10
   2fa2c:	mov    esi,0x1
   2fa31:	lea    rdi,[rip+0x5a178]        # 89bb0 <buf.8951>
   2fa38:	xor    eax,eax
   2fa3a:	call   c950 <__sprintf_chk@plt>
   2fa3f:	lea    rax,[rip+0x5a16a]        # 89bb0 <buf.8951>
   2fa46:	add    rsp,0x8
   2fa4a:	ret    
   2fa4b:	nop    DWORD PTR [rax+rax*1+0x0]
   2fa50:	lea    rax,[rip+0x5a159]        # 89bb0 <buf.8951>
   2fa57:	ret    
   2fa58:	nop    DWORD PTR [rax+rax*1+0x0]
   2fa60:	movsxd r8,edi
   2fa63:	mov    eax,edi
   2fa65:	lea    rcx,[rip+0x3d20c]        # 6cc78 <primes.6089+0x6b98>
   2fa6c:	sub    rsp,0x8
   2fa70:	imul   r8,r8,0xffffffff88888889
   2fa77:	sar    eax,0x1f
   2fa7a:	shr    r8,0x20
   2fa7e:	add    r8d,edi
   2fa81:	sar    r8d,0x5
   2fa85:	sub    r8d,eax
   2fa88:	imul   eax,r8d,0x3c
   2fa8c:	sub    edi,eax
   2fa8e:	push   rdi
   2fa8f:	mov    edx,0x10
   2fa94:	mov    esi,0x1
   2fa99:	lea    rdi,[rip+0x5a110]        # 89bb0 <buf.8951>
   2faa0:	xor    eax,eax
   2faa2:	call   c950 <__sprintf_chk@plt>
   2faa7:	pop    rax
   2faa8:	pop    rdx
   2faa9:	lea    rax,[rip+0x5a100]        # 89bb0 <buf.8951>
   2fab0:	add    rsp,0x8
   2fab4:	ret    
   2fab5:	nop    DWORD PTR [rax]
   2fab8:	imul   r8,rax,0xffffffff91a2b3c5
   2fabf:	mov    edx,edi
   2fac1:	mov    ecx,0x88888889
   2fac6:	sub    rsp,0x8
   2faca:	imul   rax,rax,0xffffffff88888889
   2fad1:	sar    edx,0x1f
   2fad4:	shr    r8,0x20
   2fad8:	shr    rax,0x20
   2fadc:	add    r8d,edi
   2fadf:	add    edi,eax
   2fae1:	sar    r8d,0xb
   2fae5:	sar    edi,0x5
   2fae8:	sub    r8d,edx
   2faeb:	sub    edi,edx
   2faed:	mov    eax,edi
   2faef:	imul   rax,rcx
   2faf3:	lea    rcx,[rip+0x3d187]        # 6cc81 <primes.6089+0x6ba1>
   2fafa:	shr    rax,0x25
   2fafe:	imul   eax,eax,0x3c
   2fb01:	sub    edi,eax
   2fb03:	push   rdi
   2fb04:	jmp    2fa8f <eta_to_human_short+0x11f>
   2fb06:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000002fb10 <bar_update>:
   2fb10:	endbr64 
   2fb14:	mov    rdx,rdi
   2fb17:	movsd  QWORD PTR [rdi+0x28],xmm0
   2fb1c:	mov    rdi,QWORD PTR [rdi+0x18]
   2fb20:	movabs rcx,0x7fffffffffffffff
   2fb2a:	mov    rax,QWORD PTR [rdx+0x8]
   2fb2e:	mov    r9,rcx
   2fb31:	lea    r8,[rdi+rax*1]
   2fb35:	sub    rcx,rax
   2fb38:	add    rdi,rsi
   2fb3b:	sub    r9,r8
   2fb3e:	cmp    r9,rsi
   2fb41:	cmovge rcx,rdi
   2fb45:	mov    rdi,QWORD PTR [rdx+0x10]
   2fb49:	mov    QWORD PTR [rdx+0x18],rcx
   2fb4d:	test   rdi,rdi
   2fb50:	jle    2fb5e <bar_update+0x4e>
   2fb52:	add    rcx,rax
   2fb55:	cmp    rdi,rcx
   2fb58:	jl     2fc20 <bar_update+0x110>
   2fb5e:	movapd xmm1,xmm0
   2fb62:	subsd  xmm1,QWORD PTR [rdx+0x1a0]
   2fb6a:	mov    rax,QWORD PTR [rdx+0x1a8]
   2fb71:	movsd  xmm2,QWORD PTR [rip+0x3d21f]        # 6cd98 <eta_str.8886+0x20>
   2fb79:	add    rax,rsi
   2fb7c:	comisd xmm2,xmm1
   2fb80:	mov    QWORD PTR [rdx+0x1a8],rax
   2fb87:	ja     2fc1a <bar_update+0x10a>
   2fb8d:	test   rsi,rsi
   2fb90:	je     2fc30 <bar_update+0x120>
   2fb96:	cmp    BYTE PTR [rdx+0x1b0],0x0
   2fb9d:	je     2fbae <bar_update+0x9e>
   2fb9f:	mov    BYTE PTR [rdx+0x1b0],0x0
   2fba6:	movsd  xmm1,QWORD PTR [rip+0x2bc32]        # 5b7e0 <_IO_stdin_used+0x7e0>
   2fbae:	movsxd rcx,DWORD PTR [rdx+0x48]
   2fbb2:	mov    rdi,QWORD PTR [rdx+0x198]
   2fbb9:	movsd  xmm2,QWORD PTR [rdx+0x190]
   2fbc1:	mov    rsi,rcx
   2fbc4:	lea    rcx,[rdx+rcx*8]
   2fbc8:	sub    rdi,QWORD PTR [rcx+0xf0]
   2fbcf:	subsd  xmm2,QWORD PTR [rcx+0x50]
   2fbd4:	mov    QWORD PTR [rcx+0xf0],rax
   2fbdb:	add    rax,rdi
   2fbde:	movsd  QWORD PTR [rcx+0x50],xmm1
   2fbe3:	cmp    esi,0x13
   2fbe6:	mov    ecx,0x0
   2fbeb:	mov    QWORD PTR [rdx+0x198],rax
   2fbf2:	lea    eax,[rsi+0x1]
   2fbf5:	cmove  eax,ecx
   2fbf8:	addsd  xmm1,xmm2
   2fbfc:	mov    QWORD PTR [rdx+0x1a8],0x0
   2fc07:	movsd  QWORD PTR [rdx+0x1a0],xmm0
   2fc0f:	mov    DWORD PTR [rdx+0x48],eax
   2fc12:	movsd  QWORD PTR [rdx+0x190],xmm1
   2fc1a:	ret    
   2fc1b:	nop    DWORD PTR [rax+rax*1+0x0]
   2fc20:	mov    QWORD PTR [rdx+0x10],rcx
   2fc24:	jmp    2fb5e <bar_update+0x4e>
   2fc29:	nop    DWORD PTR [rax+0x0]
   2fc30:	comisd xmm1,QWORD PTR [rip+0x3d168]        # 6cda0 <eta_str.8886+0x28>
   2fc38:	jb     2fc1a <bar_update+0x10a>
   2fc3a:	lea    rdi,[rdx+0x50]
   2fc3e:	mov    eax,edx
   2fc40:	mov    BYTE PTR [rdx+0x1b0],0x1
   2fc47:	and    rdi,0xfffffffffffffff8
   2fc4b:	mov    QWORD PTR [rdx+0x48],0x0
   2fc53:	mov    QWORD PTR [rdx+0x198],0x0
   2fc5e:	sub    eax,edi
   2fc60:	lea    ecx,[rax+0x1a0]
   2fc66:	mov    rax,rsi
   2fc69:	shr    ecx,0x3
   2fc6c:	rep stos QWORD PTR es:[rdi],rax
   2fc6f:	mov    QWORD PTR [rdx+0x1a8],0x0
   2fc7a:	ret    
   2fc7b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000002fc80 <display_image>:
   2fc80:	push   rbp
   2fc81:	mov    rbp,rdi
   2fc84:	xor    edi,edi
   2fc86:	push   rbx
   2fc87:	sub    rsp,0x8
   2fc8b:	call   2da10 <log_set_save_context>
   2fc90:	lea    rsi,[rip+0x3d000]        # 6cc97 <primes.6089+0x6bb7>
   2fc97:	mov    edi,0x4
   2fc9c:	mov    ebx,eax
   2fc9e:	call   2de60 <logputs>
   2fca3:	mov    rsi,rbp
   2fca6:	mov    edi,0x4
   2fcab:	call   2de60 <logputs>
   2fcb0:	add    rsp,0x8
   2fcb4:	movzx  edi,bl
   2fcb7:	pop    rbx
   2fcb8:	pop    rbp
   2fcb9:	jmp    2da10 <log_set_save_context>
   2fcbe:	xchg   ax,ax

000000000002fcc0 <dot_set_params>:
   2fcc0:	endbr64 
   2fcc4:	push   r12
   2fcc6:	push   rbp
   2fcc7:	sub    rsp,0x8
   2fccb:	mov    rax,QWORD PTR [rip+0x59f0e]        # 89be0 <current_impl>
   2fcd2:	mov    BYTE PTR [rax+0x8],0x0
   2fcd6:	test   rdi,rdi
   2fcd9:	je     2fce3 <dot_set_params+0x23>
   2fcdb:	cmp    BYTE PTR [rdi],0x0
   2fcde:	mov    rbp,rdi
   2fce1:	jne    2fcef <dot_set_params+0x2f>
   2fce3:	mov    rbp,QWORD PTR [rip+0x5a5f6]        # 8a2e0 <opt+0x260>
   2fcea:	test   rbp,rbp
   2fced:	je     2fd31 <dot_set_params+0x71>
   2fcef:	lea    rsi,[rip+0x3cedd]        # 6cbd3 <primes.6089+0x6af3>
   2fcf6:	mov    rdi,rbp
   2fcf9:	call   43340 <c_strcasecmp>
   2fcfe:	test   eax,eax
   2fd00:	je     2fd40 <dot_set_params+0x80>
   2fd02:	lea    rsi,[rip+0x3cf90]        # 6cc99 <primes.6089+0x6bb9>
   2fd09:	mov    rdi,rbp
   2fd0c:	call   43340 <c_strcasecmp>
   2fd11:	test   eax,eax
   2fd13:	jne    2fd68 <dot_set_params+0xa8>
   2fd15:	movabs rax,0x1000000030
   2fd1f:	mov    QWORD PTR [rip+0x5a5be],0x2000        # 8a2e8 <opt+0x268>
   2fd2a:	mov    QWORD PTR [rip+0x5a5bf],rax        # 8a2f0 <opt+0x270>
   2fd31:	add    rsp,0x8
   2fd35:	pop    rbp
   2fd36:	pop    r12
   2fd38:	ret    
   2fd39:	nop    DWORD PTR [rax+0x0]
   2fd40:	movabs rax,0xa00000032
   2fd4a:	mov    QWORD PTR [rip+0x5a593],0x400        # 8a2e8 <opt+0x268>
   2fd55:	mov    QWORD PTR [rip+0x5a594],rax        # 8a2f0 <opt+0x270>
   2fd5c:	add    rsp,0x8
   2fd60:	pop    rbp
   2fd61:	pop    r12
   2fd63:	ret    
   2fd64:	nop    DWORD PTR [rax+0x0]
   2fd68:	lea    rsi,[rip+0x3cf31]        # 6cca0 <primes.6089+0x6bc0>
   2fd6f:	mov    rdi,rbp
   2fd72:	call   43340 <c_strcasecmp>
   2fd77:	test   eax,eax
   2fd79:	je     2fdb0 <dot_set_params+0xf0>
   2fd7b:	lea    rsi,[rip+0x3cf23]        # 6cca5 <primes.6089+0x6bc5>
   2fd82:	mov    rdi,rbp
   2fd85:	call   43340 <c_strcasecmp>
   2fd8a:	test   eax,eax
   2fd8c:	jne    2fdd8 <dot_set_params+0x118>
   2fd8e:	movabs rax,0x800000020
   2fd98:	mov    QWORD PTR [rip+0x5a545],0x100000        # 8a2e8 <opt+0x268>
   2fda3:	mov    QWORD PTR [rip+0x5a546],rax        # 8a2f0 <opt+0x270>
   2fdaa:	jmp    2fd31 <dot_set_params+0x71>
   2fdac:	nop    DWORD PTR [rax+0x0]
   2fdb0:	movabs rax,0x800000030
   2fdba:	mov    QWORD PTR [rip+0x5a523],0x10000        # 8a2e8 <opt+0x268>
   2fdc5:	mov    QWORD PTR [rip+0x5a524],rax        # 8a2f0 <opt+0x270>
   2fdcc:	add    rsp,0x8
   2fdd0:	pop    rbp
   2fdd1:	pop    r12
   2fdd3:	ret    
   2fdd4:	nop    DWORD PTR [rax+0x0]
   2fdd8:	mov    rdi,rbp
   2fddb:	call   4b5b0 <quote>
   2fde0:	mov    edx,0x5
   2fde5:	lea    rsi,[rip+0x3cf4c]        # 6cd38 <primes.6089+0x6c58>
   2fdec:	xor    edi,edi
   2fdee:	mov    r12,rax
   2fdf1:	call   c780 <dcgettext@plt>
   2fdf6:	mov    rdi,QWORD PTR [rip+0x536e3]        # 834e0 <stderr@@GLIBC_2.2.5>
   2fdfd:	add    rsp,0x8
   2fe01:	mov    rcx,r12
   2fe04:	mov    rdx,rax
   2fe07:	pop    rbp
   2fe08:	mov    esi,0x1
   2fe0d:	xor    eax,eax
   2fe0f:	pop    r12
   2fe11:	jmp    bfd0 <__fprintf_chk@plt>
   2fe16:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000002fe20 <print_row_stats>:
   2fe20:	push   r14
   2fe22:	mov    r14,rdx
   2fe25:	push   r13
   2fe27:	push   r12
   2fe29:	push   rbp
   2fe2a:	mov    ebp,esi
   2fe2c:	push   rbx
   2fe2d:	mov    rbx,rdi
   2fe30:	sub    rsp,0x20
   2fe34:	mov    rdx,QWORD PTR [rip+0x5a4ad]        # 8a2e8 <opt+0x268>
   2fe3b:	movsxd r13,DWORD PTR [rip+0x5a4ae]        # 8a2f0 <opt+0x270>
   2fe42:	mov    rcx,QWORD PTR [rdi+0x20]
   2fe46:	movsxd rdi,DWORD PTR [rdi+0x28]
   2fe4a:	movsd  QWORD PTR [rsp+0x8],xmm0
   2fe50:	mov    rax,QWORD PTR fs:0x28
   2fe59:	mov    QWORD PTR [rsp+0x18],rax
   2fe5e:	xor    eax,eax
   2fe60:	imul   r13,rdx
   2fe64:	mov    rax,QWORD PTR [rbx+0x8]
   2fe68:	mov    r12,rcx
   2fe6b:	imul   rdi,rdx
   2fe6f:	imul   r12,r13
   2fe73:	add    r12,rdi
   2fe76:	test   sil,sil
   2fe79:	je     2fea0 <print_row_stats+0x80>
   2fe7b:	mov    rdx,QWORD PTR [rbx+0x10]
   2fe7f:	mov    esi,0x0
   2fe84:	add    r12,rdx
   2fe87:	cmovs  r12,rsi
   2fe8b:	test   rax,rax
   2fe8e:	jne    30088 <print_row_stats+0x268>
   2fe94:	add    rdi,rdx
   2fe97:	jmp    2febc <print_row_stats+0x9c>
   2fe99:	nop    DWORD PTR [rax+0x0]
   2fea0:	test   r12,r12
   2fea3:	mov    edx,0x0
   2fea8:	cmovs  r12,rdx
   2feac:	test   rax,rax
   2feaf:	jne    30040 <print_row_stats+0x220>
   2feb5:	mov    rdi,r14
   2feb8:	imul   rdi,r13
   2febc:	mov    rax,QWORD PTR [rbx]
   2febf:	mov    rsi,rdi
   2fec2:	movsd  xmm0,QWORD PTR [rsp+0x8]
   2fec8:	subsd  xmm0,QWORD PTR [rbx+0x30]
   2fecd:	cqo    
   2fecf:	idiv   r13
   2fed2:	sub    rsi,rdx
   2fed5:	cmp    rax,rcx
   2fed8:	cmove  rdi,rsi
   2fedc:	lea    rsi,[rsp+0x14]
   2fee1:	call   35080 <calc_rate>
   2fee6:	movsxd rax,DWORD PTR [rsp+0x14]
   2feeb:	lea    rdx,[rip+0x3ce7e]        # 6cd70 <names.8745>
   2fef2:	movsx  ecx,BYTE PTR [rdx+rax*1]
   2fef6:	xor    edx,edx
   2fef8:	comisd xmm0,QWORD PTR [rip+0x3cea8]        # 6cda8 <eta_str.8886+0x30>
   2ff00:	jae    2ff12 <print_row_stats+0xf2>
   2ff02:	xor    edx,edx
   2ff04:	ucomisd xmm0,QWORD PTR [rip+0x3cea4]        # 6cdb0 <eta_str.8886+0x38>
   2ff0c:	setb   dl
   2ff0f:	add    edx,0x1
   2ff12:	lea    rsi,[rip+0x3cd91]        # 6ccaa <primes.6089+0x6bca>
   2ff19:	mov    edi,0x4
   2ff1e:	mov    eax,0x1
   2ff23:	call   2e0a0 <logprintf>
   2ff28:	movsd  xmm3,QWORD PTR [rsp+0x8]
   2ff2e:	movsd  QWORD PTR [rbx+0x30],xmm3
   2ff33:	test   bpl,bpl
   2ff36:	jne    2ffc8 <print_row_stats+0x1a8>
   2ff3c:	mov    rax,QWORD PTR [rbx+0x8]
   2ff40:	test   rax,rax
   2ff43:	je     2ffa0 <print_row_stats+0x180>
   2ff45:	cmp    rax,r12
   2ff48:	jg     300e0 <print_row_stats+0x2c0>
   2ff4e:	pxor   xmm2,xmm2
   2ff52:	movapd xmm0,xmm2
   2ff56:	mov    rax,QWORD PTR [rbx]
   2ff59:	movsd  xmm1,QWORD PTR [rip+0x2b87f]        # 5b7e0 <_IO_stdin_used+0x7e0>
   2ff61:	cmp    rax,r12
   2ff64:	jge    2ff72 <print_row_stats+0x152>
   2ff66:	sub    r12,rax
   2ff69:	pxor   xmm1,xmm1
   2ff6d:	cvtsi2sd xmm1,r12
   2ff72:	mulsd  xmm0,QWORD PTR [rsp+0x8]
   2ff78:	divsd  xmm0,xmm1
   2ff7c:	comisd xmm2,xmm0
   2ff80:	ja     300f8 <print_row_stats+0x2d8>
   2ff86:	movsd  xmm1,QWORD PTR [rip+0x3cdfa]        # 6cd88 <eta_str.8886+0x10>
   2ff8e:	comisd xmm1,xmm0
   2ff92:	ja     30124 <print_row_stats+0x304>
   2ff98:	nop    DWORD PTR [rax+rax*1+0x0]
   2ffa0:	mov    rax,QWORD PTR [rsp+0x18]
   2ffa5:	xor    rax,QWORD PTR fs:0x28
   2ffae:	jne    3011f <print_row_stats+0x2ff>
   2ffb4:	add    rsp,0x20
   2ffb8:	pop    rbx
   2ffb9:	pop    rbp
   2ffba:	pop    r12
   2ffbc:	pop    r13
   2ffbe:	pop    r14
   2ffc0:	ret    
   2ffc1:	nop    DWORD PTR [rax+0x0]
   2ffc8:	movsd  xmm4,QWORD PTR [rsp+0x8]
   2ffce:	comisd xmm4,QWORD PTR [rip+0x387ea]        # 687c0 <primes.6089+0x26e0>
   2ffd6:	jb     30010 <print_row_stats+0x1f0>
   2ffd8:	movsd  xmm0,QWORD PTR [rip+0x3cbd8]        # 6cbb8 <primes.6089+0x6ad8>
   2ffe0:	mov    esi,0x1
   2ffe5:	addsd  xmm0,xmm4
   2ffe9:	cvttsd2si edi,xmm0
   2ffed:	call   2f970 <eta_to_human_short>
   2fff2:	lea    rsi,[rip+0x2b23e]        # 5b237 <_IO_stdin_used+0x237>
   2fff9:	mov    edi,0x4
   2fffe:	mov    rdx,rax
   30001:	xor    eax,eax
   30003:	call   2e0a0 <logprintf>
   30008:	jmp    2ffa0 <print_row_stats+0x180>
   3000a:	nop    WORD PTR [rax+rax*1+0x0]
   30010:	movsd  xmm0,QWORD PTR [rsp+0x8]
   30016:	call   3f120 <print_decimal>
   3001b:	lea    rsi,[rip+0x3cc91]        # 6ccb3 <primes.6089+0x6bd3>
   30022:	mov    edi,0x4
   30027:	mov    rdx,rax
   3002a:	xor    eax,eax
   3002c:	call   2e0a0 <logprintf>
   30031:	jmp    2ffa0 <print_row_stats+0x180>
   30036:	nop    WORD PTR cs:[rax+rax*1+0x0]
   30040:	pxor   xmm0,xmm0
   30044:	movsd  xmm1,QWORD PTR [rip+0x3cd6c]        # 6cdb8 <eta_str.8886+0x40>
   3004c:	mov    edi,0x4
   30051:	lea    rsi,[rip+0x3cc60]        # 6ccb8 <primes.6089+0x6bd8>
   30058:	cvtsi2sd xmm0,r12
   3005d:	mulsd  xmm1,xmm0
   30061:	pxor   xmm0,xmm0
   30065:	cvtsi2sd xmm0,rax
   3006a:	xor    eax,eax
   3006c:	divsd  xmm1,xmm0
   30070:	cvttsd2si edx,xmm1
   30074:	call   2e0a0 <logprintf>
   30079:	mov    rcx,QWORD PTR [rbx+0x20]
   3007d:	jmp    2feb5 <print_row_stats+0x95>
   30082:	nop    WORD PTR [rax+rax*1+0x0]
   30088:	pxor   xmm0,xmm0
   3008c:	movsd  xmm1,QWORD PTR [rip+0x3cd24]        # 6cdb8 <eta_str.8886+0x40>
   30094:	mov    edi,0x4
   30099:	lea    rsi,[rip+0x3cc18]        # 6ccb8 <primes.6089+0x6bd8>
   300a0:	cvtsi2sd xmm0,r12
   300a5:	mulsd  xmm1,xmm0
   300a9:	pxor   xmm0,xmm0
   300ad:	cvtsi2sd xmm0,rax
   300b2:	xor    eax,eax
   300b4:	divsd  xmm1,xmm0
   300b8:	cvttsd2si edx,xmm1
   300bc:	call   2e0a0 <logprintf>
   300c1:	movsxd rdi,DWORD PTR [rbx+0x28]
   300c5:	mov    rdx,QWORD PTR [rbx+0x10]
   300c9:	imul   rdi,QWORD PTR [rip+0x5a217]        # 8a2e8 <opt+0x268>
   300d1:	mov    rcx,QWORD PTR [rbx+0x20]
   300d5:	add    rdi,rdx
   300d8:	jmp    2febc <print_row_stats+0x9c>
   300dd:	nop    DWORD PTR [rax]
   300e0:	sub    rax,r12
   300e3:	pxor   xmm0,xmm0
   300e7:	pxor   xmm2,xmm2
   300eb:	cvtsi2sd xmm0,rax
   300f0:	jmp    2ff56 <print_row_stats+0x136>
   300f5:	nop    DWORD PTR [rax]
   300f8:	xor    edi,edi
   300fa:	mov    esi,0x1
   300ff:	call   2f970 <eta_to_human_short>
   30104:	lea    rsi,[rip+0x37351]        # 6745c <primes.6089+0x137c>
   3010b:	mov    edi,0x4
   30110:	mov    rdx,rax
   30113:	xor    eax,eax
   30115:	call   2e0a0 <logprintf>
   3011a:	jmp    2ffa0 <print_row_stats+0x180>
   3011f:	call   c7b0 <__stack_chk_fail@plt>
   30124:	addsd  xmm0,QWORD PTR [rip+0x3ca8c]        # 6cbb8 <primes.6089+0x6ad8>
   3012c:	cvttsd2si edi,xmm0
   30130:	jmp    300fa <print_row_stats+0x2da>
   30132:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3013d:	nop    DWORD PTR [rax]

0000000000030140 <dot_finish>:
   30140:	endbr64 
   30144:	push   r13
   30146:	push   r12
   30148:	mov    r12,rdi
   3014b:	xor    edi,edi
   3014d:	push   rbp
   3014e:	push   rbx
   3014f:	sub    rsp,0x18
   30153:	mov    r13,QWORD PTR [rip+0x5a18e]        # 8a2e8 <opt+0x268>
   3015a:	movsxd rbp,DWORD PTR [rip+0x5a18f]        # 8a2f0 <opt+0x270>
   30161:	movsd  QWORD PTR [rsp+0x8],xmm0
   30167:	call   2d9b0 <log_set_flush>
   3016c:	mov    ebx,DWORD PTR [r12+0x28]
   30171:	test   ebx,ebx
   30173:	je     30240 <dot_finish+0x100>
   30179:	cmp    ebx,DWORD PTR [rip+0x5a171]        # 8a2f0 <opt+0x270>
   3017f:	lea    rbp,[rip+0x35d3f]        # 65ec5 <yy_accept+0xe05>
   30186:	jl     301a8 <dot_finish+0x68>
   30188:	jmp    301c8 <dot_finish+0x88>
   3018a:	nop    WORD PTR [rax+rax*1+0x0]
   30190:	mov    rsi,rbp
   30193:	mov    edi,0x4
   30198:	add    ebx,0x1
   3019b:	call   2de60 <logputs>
   301a0:	cmp    DWORD PTR [rip+0x5a14a],ebx        # 8a2f0 <opt+0x270>
   301a6:	jle    301c8 <dot_finish+0x88>
   301a8:	mov    eax,ebx
   301aa:	cdq    
   301ab:	idiv   DWORD PTR [rip+0x5a143]        # 8a2f4 <opt+0x274>
   301b1:	test   edx,edx
   301b3:	jne    30190 <dot_finish+0x50>
   301b5:	mov    rsi,rbp
   301b8:	mov    edi,0x4
   301bd:	call   2de60 <logputs>
   301c2:	jmp    30190 <dot_finish+0x50>
   301c4:	nop    DWORD PTR [rax+0x0]
   301c8:	movsd  xmm1,QWORD PTR [rsp+0x8]
   301ce:	comisd xmm1,QWORD PTR [rip+0x3cbba]        # 6cd90 <eta_str.8886+0x18>
   301d6:	jb     30228 <dot_finish+0xe8>
   301d8:	movsd  xmm3,QWORD PTR [rip+0x3cba8]        # 6cd88 <eta_str.8886+0x10>
   301e0:	movsd  QWORD PTR [rsp+0x8],xmm3
   301e6:	movsd  xmm0,QWORD PTR [rsp+0x8]
   301ec:	mov    edx,0x1
   301f1:	mov    rdi,r12
   301f4:	mov    esi,0x1
   301f9:	call   2fe20 <print_row_stats>
   301fe:	lea    rsi,[rip+0x357c9]        # 659ce <yy_accept+0x90e>
   30205:	xor    edi,edi
   30207:	call   2de60 <logputs>
   3020c:	xor    edi,edi
   3020e:	call   2d9b0 <log_set_flush>
   30213:	add    rsp,0x18
   30217:	mov    rdi,r12
   3021a:	pop    rbx
   3021b:	pop    rbp
   3021c:	pop    r12
   3021e:	pop    r13
   30220:	jmp    4bdc0 <rpl_free>
   30225:	nop    DWORD PTR [rax]
   30228:	pxor   xmm0,xmm0
   3022c:	maxsd  xmm0,QWORD PTR [rsp+0x8]
   30232:	movsd  QWORD PTR [rsp+0x8],xmm0
   30238:	jmp    301e6 <dot_finish+0xa6>
   3023a:	nop    WORD PTR [rax+rax*1+0x0]
   30240:	imul   rbp,r13
   30244:	imul   rbp,QWORD PTR [r12+0x20]
   3024a:	test   rbp,rbp
   3024d:	lea    rdi,[rbp+0x3ff]
   30254:	cmovns rdi,rbp
   30258:	sar    rdi,0xa
   3025c:	call   3e8e0 <number_to_static_string>
   30261:	lea    rsi,[rip+0x3ca56]        # 6ccbe <primes.6089+0x6bde>
   30268:	mov    edi,0x4
   3026d:	mov    rdx,rax
   30270:	xor    eax,eax
   30272:	call   2e0a0 <logprintf>
   30277:	mov    ebx,DWORD PTR [r12+0x28]
   3027c:	jmp    30179 <dot_finish+0x39>
   30281:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3028c:	nop    DWORD PTR [rax+0x0]

0000000000030290 <dot_draw>:
   30290:	endbr64 
   30294:	push   r15
   30296:	push   r14
   30298:	movabs r14,0x7fffffffffffffff
   302a2:	push   r13
   302a4:	lea    r13,[rip+0x3ca13]        # 6ccbe <primes.6089+0x6bde>
   302ab:	push   r12
   302ad:	push   rbp
   302ae:	push   rbx
   302af:	mov    rbx,rdi
   302b2:	xor    edi,edi
   302b4:	sub    rsp,0x8
   302b8:	mov    rbp,QWORD PTR [rip+0x5a029]        # 8a2e8 <opt+0x268>
   302bf:	movsxd r12,DWORD PTR [rip+0x5a02a]        # 8a2f0 <opt+0x270>
   302c6:	call   2d9b0 <log_set_flush>
   302cb:	imul   r12,rbp
   302cf:	movsxd rbp,ebp
   302d2:	lea    r15,[r12*4+0x0]
   302da:	jmp    30311 <dot_draw+0x81>
   302dc:	nop    DWORD PTR [rax+0x0]
   302e0:	cdq    
   302e1:	idiv   DWORD PTR [rip+0x5a00d]        # 8a2f4 <opt+0x274>
   302e7:	test   edx,edx
   302e9:	je     30367 <dot_draw+0xd7>
   302eb:	lea    rsi,[rip+0x35f6e]        # 66260 <primes.6089+0x180>
   302f2:	mov    edi,0x4
   302f7:	call   2de60 <logputs>
   302fc:	mov    eax,DWORD PTR [rbx+0x28]
   302ff:	add    eax,0x1
   30302:	cmp    eax,DWORD PTR [rip+0x59fe8]        # 8a2f0 <opt+0x270>
   30308:	mov    DWORD PTR [rbx+0x28],eax
   3030b:	jge    303a0 <dot_draw+0x110>
   30311:	mov    rax,QWORD PTR [rbx+0x10]
   30315:	cmp    rax,rbp
   30318:	jl     30380 <dot_draw+0xf0>
   3031a:	sub    rax,rbp
   3031d:	mov    QWORD PTR [rbx+0x10],rax
   30321:	mov    eax,DWORD PTR [rbx+0x28]
   30324:	test   eax,eax
   30326:	jne    302e0 <dot_draw+0x50>
   30328:	mov    rax,QWORD PTR [rbx+0x20]
   3032c:	imul   rax,r12
   30330:	test   rax,rax
   30333:	lea    rdi,[rax+0x3ff]
   3033a:	cmovns rdi,rax
   3033e:	sar    rdi,0xa
   30342:	call   3e8e0 <number_to_static_string>
   30347:	mov    rsi,r13
   3034a:	mov    edi,0x4
   3034f:	mov    rdx,rax
   30352:	xor    eax,eax
   30354:	call   2e0a0 <logprintf>
   30359:	mov    eax,DWORD PTR [rbx+0x28]
   3035c:	cdq    
   3035d:	idiv   DWORD PTR [rip+0x59f91]        # 8a2f4 <opt+0x274>
   30363:	test   edx,edx
   30365:	jne    302eb <dot_draw+0x5b>
   30367:	lea    rsi,[rip+0x35b57]        # 65ec5 <yy_accept+0xe05>
   3036e:	mov    edi,0x4
   30373:	call   2de60 <logputs>
   30378:	jmp    302eb <dot_draw+0x5b>
   3037d:	nop    DWORD PTR [rax]
   30380:	add    rsp,0x8
   30384:	mov    edi,0x1
   30389:	pop    rbx
   3038a:	pop    rbp
   3038b:	pop    r12
   3038d:	pop    r13
   3038f:	pop    r14
   30391:	pop    r15
   30393:	jmp    2d9b0 <log_set_flush>
   30398:	nop    DWORD PTR [rax+rax*1+0x0]
   303a0:	mov    rax,QWORD PTR [rbx+0x10]
   303a4:	mov    DWORD PTR [rbx+0x28],0x0
   303ab:	mov    r8d,0x1
   303b1:	cmp    rax,r15
   303b4:	jl     303c3 <dot_draw+0x133>
   303b6:	cqo    
   303b8:	idiv   r12
   303bb:	mov    QWORD PTR [rbx+0x10],rdx
   303bf:	lea    r8,[rax+0x1]
   303c3:	mov    rdx,QWORD PTR [rbx+0x20]
   303c7:	mov    rax,r14
   303ca:	movsd  xmm0,QWORD PTR [rbx+0x18]
   303cf:	mov    rdi,rbx
   303d2:	sub    rax,rdx
   303d5:	add    rdx,r8
   303d8:	cmp    rax,r8
   303db:	cmovl  rdx,r14
   303df:	xor    esi,esi
   303e1:	mov    QWORD PTR [rbx+0x20],rdx
   303e5:	mov    rdx,r8
   303e8:	call   2fe20 <print_row_stats>
   303ed:	jmp    30311 <dot_draw+0x81>
   303f2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   303fd:	nop    DWORD PTR [rax]

0000000000030400 <dot_create>:
   30400:	endbr64 
   30404:	push   r15
   30406:	mov    edi,0x1
   3040b:	push   r14
   3040d:	push   r13
   3040f:	push   r12
   30411:	push   rbp
   30412:	mov    rbp,rsi
   30415:	mov    esi,0x38
   3041a:	push   rbx
   3041b:	mov    rbx,rdx
   3041e:	sub    rsp,0x38
   30422:	call   4b9c0 <xcalloc>
   30427:	mov    QWORD PTR [rax],rbp
   3042a:	mov    r15,rax
   3042d:	mov    QWORD PTR [rax+0x8],rbx
   30431:	test   rbp,rbp
   30434:	je     30523 <dot_create+0x123>
   3043a:	mov    r9,QWORD PTR [rip+0x59ea7]        # 8a2e8 <opt+0x268>
   30441:	movsxd r13,DWORD PTR [rip+0x59ea8]        # 8a2f0 <opt+0x270>
   30448:	mov    rax,rbp
   3044b:	cqo    
   3044d:	imul   r13,r9
   30451:	mov    r12d,r9d
   30454:	idiv   r13
   30457:	movsxd r10,edx
   3045a:	mov    r14,rdx
   3045d:	mov    ebx,edx
   3045f:	sub    rbp,r10
   30462:	lea    rax,[rbp+0x3ff]
   30469:	cmovns rax,rbp
   3046d:	sar    rax,0xa
   30471:	mov    r11,rax
   30474:	test   rbp,rbp
   30477:	jne    30538 <dot_create+0x138>
   3047d:	mov    rdi,r11
   30480:	mov    QWORD PTR [rsp+0x10],r10
   30485:	mov    QWORD PTR [rsp+0x8],r9
   3048a:	call   3e8e0 <number_to_static_string>
   3048f:	lea    rsi,[rip+0x3c828]        # 6ccbe <primes.6089+0x6bde>
   30496:	mov    edi,0x4
   3049b:	mov    rdx,rax
   3049e:	xor    eax,eax
   304a0:	call   2e0a0 <logprintf>
   304a5:	mov    r9,QWORD PTR [rsp+0x8]
   304aa:	mov    r10,QWORD PTR [rsp+0x10]
   304af:	cmp    r9d,r14d
   304b2:	jg     30513 <dot_create+0x113>
   304b4:	mov    eax,DWORD PTR [r15+0x28]
   304b8:	lea    r14,[rip+0x35a06]        # 65ec5 <yy_accept+0xe05>
   304bf:	jmp    304ec <dot_create+0xec>
   304c1:	nop    DWORD PTR [rax+0x0]
   304c8:	lea    rsi,[rip+0x36160]        # 6662f <primes.6089+0x54f>
   304cf:	mov    edi,0x4
   304d4:	sub    ebx,r12d
   304d7:	call   2de60 <logputs>
   304dc:	mov    eax,DWORD PTR [r15+0x28]
   304e0:	add    eax,0x1
   304e3:	mov    DWORD PTR [r15+0x28],eax
   304e7:	cmp    r12d,ebx
   304ea:	jg     30510 <dot_create+0x110>
   304ec:	cdq    
   304ed:	idiv   DWORD PTR [rip+0x59e01]        # 8a2f4 <opt+0x274>
   304f3:	test   edx,edx
   304f5:	jne    304c8 <dot_create+0xc8>
   304f7:	mov    rsi,r14
   304fa:	mov    edi,0x4
   304ff:	call   2de60 <logputs>
   30504:	jmp    304c8 <dot_create+0xc8>
   30506:	nop    WORD PTR cs:[rax+rax*1+0x0]
   30510:	movsxd r10,ebx
   30513:	mov    rax,rbp
   30516:	mov    QWORD PTR [r15+0x10],r10
   3051a:	cqo    
   3051c:	idiv   r13
   3051f:	mov    QWORD PTR [r15+0x20],rax
   30523:	add    rsp,0x38
   30527:	mov    rax,r15
   3052a:	pop    rbx
   3052b:	pop    rbp
   3052c:	pop    r12
   3052e:	pop    r13
   30530:	pop    r14
   30532:	pop    r15
   30534:	ret    
   30535:	nop    DWORD PTR [rax]
   30538:	mov    rdi,rax
   3053b:	mov    QWORD PTR [rsp+0x28],r10
   30540:	mov    QWORD PTR [rsp+0x20],r9
   30545:	mov    QWORD PTR [rsp+0x8],rax
   3054a:	call   3d070 <numdigit>
   3054f:	mov    r11,QWORD PTR [rsp+0x8]
   30554:	mov    DWORD PTR [rsp+0x1c],eax
   30558:	mov    rdi,r11
   3055b:	mov    QWORD PTR [rsp+0x10],r11
   30560:	call   3e8e0 <number_to_static_string>
   30565:	xor    edi,edi
   30567:	mov    edx,0x5
   3056c:	lea    rsi,[rip+0x3c751]        # 6ccc4 <primes.6089+0x6be4>
   30573:	mov    QWORD PTR [rsp+0x8],rax
   30578:	call   c780 <dcgettext@plt>
   3057d:	mov    ecx,DWORD PTR [rsp+0x1c]
   30581:	mov    edx,0x6
   30586:	mov    r8,QWORD PTR [rsp+0x8]
   3058b:	mov    rsi,rax
   3058e:	mov    edi,0x4
   30593:	cmp    ecx,0x6
   30596:	cmovge edx,ecx
   30599:	lea    rcx,[rip+0x3de77]        # 6e417 <urlchr_table+0x877>
   305a0:	xor    eax,eax
   305a2:	add    edx,0x2
   305a5:	call   2e0a0 <logprintf>
   305aa:	mov    r10,QWORD PTR [rsp+0x28]
   305af:	mov    r9,QWORD PTR [rsp+0x20]
   305b4:	mov    r11,QWORD PTR [rsp+0x10]
   305b9:	jmp    3047d <dot_create+0x7d>
   305be:	xchg   ax,ax

00000000000305c0 <progress_handle_sigwinch>:
   305c0:	endbr64 
   305c4:	lea    rsi,[rip+0xfffffffffffffff5]        # 305c0 <progress_handle_sigwinch>
   305cb:	mov    edi,0x1c
   305d0:	mov    DWORD PTR [rip+0x595f6],0x1        # 89bd0 <received_sigwinch>
   305da:	jmp    c680 <signal@plt>
   305df:	nop

00000000000305e0 <prepare_filename>:
   305e0:	push   r15
   305e2:	mov    r15d,0x1
   305e8:	push   r14
   305ea:	mov    r14,rdi
   305ed:	push   r13
   305ef:	push   r12
   305f1:	push   rbp
   305f2:	push   rbx
   305f3:	sub    rsp,0x68
   305f7:	mov    rax,QWORD PTR fs:0x28
   30600:	mov    QWORD PTR [rsp+0x58],rax
   30605:	xor    eax,eax
   30607:	test   rsi,rsi
   3060a:	je     30660 <prepare_filename+0x80>
   3060c:	mov    rdi,rsi
   3060f:	mov    QWORD PTR [rsp+0x28],rsi
   30614:	mov    QWORD PTR [rsp],rsi
   30618:	call   c310 <strlen@plt>
   3061d:	mov    rsi,QWORD PTR [rsp]
   30621:	mov    BYTE PTR [rsp+0x18],0x0
   30626:	mov    QWORD PTR [rsp+0x1c],0x0
   3062f:	lea    rdx,[rsi+rax*1]
   30633:	lea    rax,[rsp+0x1c]
   30638:	mov    BYTE PTR [rsp+0x24],0x0
   3063d:	mov    QWORD PTR [rsp],rax
   30641:	lea    rax,[rsp+0x3c]
   30646:	mov    QWORD PTR [rsp+0x10],rdx
   3064b:	mov    QWORD PTR [rsp+0x8],rax
   30650:	cmp    rdx,rsi
   30653:	ja     30737 <prepare_filename+0x157>
   30659:	nop    DWORD PTR [rax+0x0]
   30660:	test   r14,r14
   30663:	je     30669 <prepare_filename+0x89>
   30665:	mov    BYTE PTR [r14],0x0
   30669:	mov    rax,QWORD PTR [rsp+0x58]
   3066e:	xor    rax,QWORD PTR fs:0x28
   30677:	jne    308cd <prepare_filename+0x2ed>
   3067d:	add    rsp,0x68
   30681:	mov    rax,r15
   30684:	pop    rbx
   30685:	pop    rbp
   30686:	pop    r12
   30688:	pop    r13
   3068a:	pop    r14
   3068c:	pop    r15
   3068e:	ret    
   3068f:	nop
   30690:	movzx  ecx,BYTE PTR [rsi]
   30693:	lea    rdi,[rip+0x3ef26]        # 6f5c0 <is_basic_table>
   3069a:	mov    eax,ecx
   3069c:	shr    al,0x5
   3069f:	and    eax,0x7
   306a2:	mov    eax,DWORD PTR [rdi+rax*4]
   306a5:	shr    eax,cl
   306a7:	test   al,0x1
   306a9:	je     30848 <prepare_filename+0x268>
   306af:	mov    QWORD PTR [rsp+0x30],0x1
   306b8:	movsx  r13d,BYTE PTR [rsi]
   306bc:	mov    ebx,0x1
   306c1:	mov    BYTE PTR [rsp+0x38],0x1
   306c6:	mov    rbp,QWORD PTR [rsp+0x28]
   306cb:	mov    edi,r13d
   306ce:	mov    DWORD PTR [rsp+0x3c],r13d
   306d3:	mov    BYTE PTR [rsp+0x24],0x1
   306d8:	call   cb60 <iswprint@plt>
   306dd:	test   eax,eax
   306df:	je     307c0 <prepare_filename+0x1e0>
   306e5:	mov    edi,r13d
   306e8:	call   c7f0 <wcwidth@plt>
   306ed:	test   eax,eax
   306ef:	jns    30701 <prepare_filename+0x121>
   306f1:	mov    edi,r13d
   306f4:	call   c600 <iswcntrl@plt>
   306f9:	test   eax,eax
   306fb:	sete   al
   306fe:	movzx  eax,al
   30701:	test   eax,eax
   30703:	je     307c0 <prepare_filename+0x1e0>
   30709:	test   r14,r14
   3070c:	jne    30880 <prepare_filename+0x2a0>
   30712:	mov    rsi,QWORD PTR [rsp+0x28]
   30717:	mov    rdx,QWORD PTR [rsp+0x10]
   3071c:	add    r15,rbx
   3071f:	add    rsi,QWORD PTR [rsp+0x30]
   30724:	mov    BYTE PTR [rsp+0x24],0x0
   30729:	mov    QWORD PTR [rsp+0x28],rsi
   3072e:	cmp    rsi,rdx
   30731:	jae    30660 <prepare_filename+0x80>
   30737:	cmp    BYTE PTR [rsp+0x18],0x0
   3073c:	je     30690 <prepare_filename+0xb0>
   30742:	mov    rcx,QWORD PTR [rsp]
   30746:	mov    rdi,QWORD PTR [rsp+0x8]
   3074b:	sub    rdx,rsi
   3074e:	call   4bee0 <rpl_mbrtowc>
   30753:	mov    QWORD PTR [rsp+0x30],rax
   30758:	mov    rbx,rax
   3075b:	cmp    rax,0xffffffffffffffff
   3075f:	je     30858 <prepare_filename+0x278>
   30765:	mov    rbp,QWORD PTR [rsp+0x28]
   3076a:	mov    r13d,DWORD PTR [rsp+0x3c]
   3076f:	mov    rsi,rbp
   30772:	cmp    rax,0xfffffffffffffffe
   30776:	je     308a8 <prepare_filename+0x2c8>
   3077c:	test   rax,rax
   3077f:	jne    3078f <prepare_filename+0x1af>
   30781:	mov    QWORD PTR [rsp+0x30],0x1
   3078a:	mov    ebx,0x1
   3078f:	mov    rdi,QWORD PTR [rsp]
   30793:	mov    BYTE PTR [rsp+0x38],0x1
   30798:	call   c730 <mbsinit@plt>
   3079d:	test   eax,eax
   3079f:	je     307a6 <prepare_filename+0x1c6>
   307a1:	mov    BYTE PTR [rsp+0x18],0x0
   307a6:	mov    edi,r13d
   307a9:	mov    BYTE PTR [rsp+0x24],0x1
   307ae:	call   cb60 <iswprint@plt>
   307b3:	test   eax,eax
   307b5:	jne    306e5 <prepare_filename+0x105>
   307bb:	nop    DWORD PTR [rax+rax*1+0x0]
   307c0:	xor    eax,eax
   307c2:	jmp    307fa <prepare_filename+0x21a>
   307c4:	nop    DWORD PTR [rax+0x0]
   307c8:	movzx  r8d,BYTE PTR [rbp+rax*1+0x0]
   307ce:	mov    rdi,r14
   307d1:	xor    eax,eax
   307d3:	add    r14,0x3
   307d7:	lea    rcx,[rip+0x3c4fb]        # 6ccd9 <primes.6089+0x6bf9>
   307de:	mov    rdx,0xffffffffffffffff
   307e5:	mov    esi,0x1
   307ea:	mov    r15,r13
   307ed:	call   c950 <__sprintf_chk@plt>
   307f2:	mov    rax,r12
   307f5:	cmp    rbx,rax
   307f8:	jbe    30819 <prepare_filename+0x239>
   307fa:	lea    r13,[r15+0x3]
   307fe:	lea    r12,[rax+0x1]
   30802:	test   r14,r14
   30805:	jne    307c8 <prepare_filename+0x1e8>
   30807:	cmp    r12,rbx
   3080a:	jae    30830 <prepare_filename+0x250>
   3080c:	add    rax,0x2
   30810:	add    r15,0x6
   30814:	cmp    rbx,rax
   30817:	ja     307fa <prepare_filename+0x21a>
   30819:	mov    rsi,QWORD PTR [rsp+0x28]
   3081e:	mov    rdx,QWORD PTR [rsp+0x10]
   30823:	jmp    3071f <prepare_filename+0x13f>
   30828:	nop    DWORD PTR [rax+rax*1+0x0]
   30830:	mov    rsi,QWORD PTR [rsp+0x28]
   30835:	mov    rdx,QWORD PTR [rsp+0x10]
   3083a:	mov    r15,r13
   3083d:	jmp    3071f <prepare_filename+0x13f>
   30842:	nop    WORD PTR [rax+rax*1+0x0]
   30848:	mov    BYTE PTR [rsp+0x18],0x1
   3084d:	jmp    30742 <prepare_filename+0x162>
   30852:	nop    WORD PTR [rax+rax*1+0x0]
   30858:	mov    BYTE PTR [rsp+0x38],0x0
   3085d:	mov    rbp,QWORD PTR [rsp+0x28]
   30862:	mov    ebx,0x1
   30867:	mov    QWORD PTR [rsp+0x30],0x1
   30870:	mov    BYTE PTR [rsp+0x24],0x1
   30875:	jmp    307c0 <prepare_filename+0x1e0>
   3087a:	nop    WORD PTR [rax+rax*1+0x0]
   30880:	xor    eax,eax
   30882:	nop    WORD PTR [rax+rax*1+0x0]
   30888:	movzx  edx,BYTE PTR [rbp+rax*1+0x0]
   3088d:	mov    BYTE PTR [r14+rax*1],dl
   30891:	add    rax,0x1
   30895:	cmp    rbx,rax
   30898:	jne    30888 <prepare_filename+0x2a8>
   3089a:	add    r14,rbx
   3089d:	jmp    30712 <prepare_filename+0x132>
   308a2:	nop    WORD PTR [rax+rax*1+0x0]
   308a8:	mov    rdx,QWORD PTR [rsp+0x10]
   308ad:	mov    BYTE PTR [rsp+0x38],0x0
   308b2:	mov    BYTE PTR [rsp+0x24],0x1
   308b7:	mov    rbx,rdx
   308ba:	sub    rbx,rbp
   308bd:	mov    QWORD PTR [rsp+0x30],rbx
   308c2:	je     3071f <prepare_filename+0x13f>
   308c8:	jmp    307c0 <prepare_filename+0x1e0>
   308cd:	call   c7b0 <__stack_chk_fail@plt>
   308d2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   308dd:	nop    DWORD PTR [rax]

00000000000308e0 <count_cols>:
   308e0:	push   r13
   308e2:	push   r12
   308e4:	xor    r12d,r12d
   308e7:	push   rbp
   308e8:	mov    rbp,rdi
   308eb:	push   rbx
   308ec:	lea    rbx,[rip+0x3eccd]        # 6f5c0 <is_basic_table>
   308f3:	sub    rsp,0x68
   308f7:	mov    rax,QWORD PTR fs:0x28
   30900:	mov    QWORD PTR [rsp+0x58],rax
   30905:	xor    eax,eax
   30907:	mov    QWORD PTR [rsp+0x28],rdi
   3090c:	call   c310 <strlen@plt>
   30911:	mov    BYTE PTR [rsp+0x18],0x0
   30916:	lea    rdx,[rbp+rax*1+0x0]
   3091b:	mov    BYTE PTR [rsp+0x24],0x0
   30920:	mov    QWORD PTR [rsp+0x10],rdx
   30925:	mov    QWORD PTR [rsp+0x1c],0x0
   3092e:	cmp    rdx,rbp
   30931:	ja     309bd <count_cols+0xdd>
   30937:	jmp    30a50 <count_cols+0x170>
   3093c:	nop    DWORD PTR [rax+0x0]
   30940:	movzx  ecx,BYTE PTR [rbp+0x0]
   30944:	mov    eax,ecx
   30946:	shr    al,0x5
   30949:	and    eax,0x7
   3094c:	mov    eax,DWORD PTR [rbx+rax*4]
   3094f:	shr    eax,cl
   30951:	test   al,0x1
   30953:	je     30a28 <count_cols+0x148>
   30959:	mov    QWORD PTR [rsp+0x30],0x1
   30962:	movsx  ebp,BYTE PTR [rbp+0x0]
   30966:	mov    BYTE PTR [rsp+0x38],0x1
   3096b:	mov    DWORD PTR [rsp+0x3c],ebp
   3096f:	mov    BYTE PTR [rsp+0x24],0x1
   30974:	mov    edi,ebp
   30976:	call   c7f0 <wcwidth@plt>
   3097b:	mov    rdx,QWORD PTR [rsp+0x10]
   30980:	test   eax,eax
   30982:	jns    3099d <count_cols+0xbd>
   30984:	mov    edi,ebp
   30986:	mov    QWORD PTR [rsp+0x8],rdx
   3098b:	call   c600 <iswcntrl@plt>
   30990:	mov    rdx,QWORD PTR [rsp+0x8]
   30995:	test   eax,eax
   30997:	sete   al
   3099a:	movzx  eax,al
   3099d:	mov    rbp,QWORD PTR [rsp+0x30]
   309a2:	add    rbp,QWORD PTR [rsp+0x28]
   309a7:	mov    BYTE PTR [rsp+0x24],0x0
   309ac:	add    r12d,eax
   309af:	mov    QWORD PTR [rsp+0x28],rbp
   309b4:	cmp    rbp,rdx
   309b7:	jae    30a50 <count_cols+0x170>
   309bd:	cmp    BYTE PTR [rsp+0x18],0x0
   309c2:	je     30940 <count_cols+0x60>
   309c8:	lea    r13,[rsp+0x1c]
   309cd:	sub    rdx,rbp
   309d0:	lea    rdi,[rsp+0x3c]
   309d5:	mov    rsi,rbp
   309d8:	mov    rcx,r13
   309db:	call   4bee0 <rpl_mbrtowc>
   309e0:	mov    QWORD PTR [rsp+0x30],rax
   309e5:	cmp    rax,0xffffffffffffffff
   309e9:	je     30a30 <count_cols+0x150>
   309eb:	mov    ebp,DWORD PTR [rsp+0x3c]
   309ef:	cmp    rax,0xfffffffffffffffe
   309f3:	je     30a70 <count_cols+0x190>
   309f5:	test   rax,rax
   309f8:	jne    30a03 <count_cols+0x123>
   309fa:	mov    QWORD PTR [rsp+0x30],0x1
   30a03:	mov    rdi,r13
   30a06:	mov    BYTE PTR [rsp+0x38],0x1
   30a0b:	call   c730 <mbsinit@plt>
   30a10:	test   eax,eax
   30a12:	je     30a19 <count_cols+0x139>
   30a14:	mov    BYTE PTR [rsp+0x18],0x0
   30a19:	mov    BYTE PTR [rsp+0x24],0x1
   30a1e:	jmp    30974 <count_cols+0x94>
   30a23:	nop    DWORD PTR [rax+rax*1+0x0]
   30a28:	mov    BYTE PTR [rsp+0x18],0x1
   30a2d:	jmp    309c8 <count_cols+0xe8>
   30a2f:	nop
   30a30:	mov    BYTE PTR [rsp+0x38],0x0
   30a35:	mov    rdx,QWORD PTR [rsp+0x10]
   30a3a:	mov    eax,0x1
   30a3f:	mov    QWORD PTR [rsp+0x30],0x1
   30a48:	jmp    3099d <count_cols+0xbd>
   30a4d:	nop    DWORD PTR [rax]
   30a50:	mov    rax,QWORD PTR [rsp+0x58]
   30a55:	xor    rax,QWORD PTR fs:0x28
   30a5e:	jne    30a91 <count_cols+0x1b1>
   30a60:	add    rsp,0x68
   30a64:	mov    eax,r12d
   30a67:	pop    rbx
   30a68:	pop    rbp
   30a69:	pop    r12
   30a6b:	pop    r13
   30a6d:	ret    
   30a6e:	xchg   ax,ax
   30a70:	mov    rdx,QWORD PTR [rsp+0x10]
   30a75:	mov    BYTE PTR [rsp+0x38],0x0
   30a7a:	mov    rax,rdx
   30a7d:	sub    rax,QWORD PTR [rsp+0x28]
   30a82:	mov    QWORD PTR [rsp+0x30],rax
   30a87:	mov    eax,0x1
   30a8c:	jmp    3099d <count_cols+0xbd>
   30a91:	call   c7b0 <__stack_chk_fail@plt>
   30a96:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000030aa0 <cols_to_bytes>:
   30aa0:	push   r15
   30aa2:	xor    r15d,r15d
   30aa5:	push   r14
   30aa7:	push   r13
   30aa9:	push   r12
   30aab:	xor    r12d,r12d
   30aae:	push   rbp
   30aaf:	mov    rbp,rdi
   30ab2:	push   rbx
   30ab3:	mov    ebx,esi
   30ab5:	sub    rsp,0x68
   30ab9:	mov    QWORD PTR [rsp+0x8],rdx
   30abe:	mov    rax,QWORD PTR fs:0x28
   30ac7:	mov    QWORD PTR [rsp+0x58],rax
   30acc:	xor    eax,eax
   30ace:	mov    QWORD PTR [rsp+0x28],rdi
   30ad3:	call   c310 <strlen@plt>
   30ad8:	mov    BYTE PTR [rsp+0x18],0x0
   30add:	lea    rdx,[rbp+rax*1+0x0]
   30ae2:	mov    BYTE PTR [rsp+0x24],0x0
   30ae7:	mov    QWORD PTR [rsp+0x10],rdx
   30aec:	mov    QWORD PTR [rsp+0x1c],0x0
   30af5:	test   ebx,ebx
   30af7:	jg     30ba0 <cols_to_bytes+0x100>
   30afd:	jmp    30be7 <cols_to_bytes+0x147>
   30b02:	nop    WORD PTR [rax+rax*1+0x0]
   30b08:	cmp    BYTE PTR [rsp+0x18],0x0
   30b0d:	jne    30c1d <cols_to_bytes+0x17d>
   30b13:	movzx  ecx,BYTE PTR [rbp+0x0]
   30b17:	lea    rsi,[rip+0x3eaa2]        # 6f5c0 <is_basic_table>
   30b1e:	mov    eax,ecx
   30b20:	shr    al,0x5
   30b23:	and    eax,0x7
   30b26:	mov    eax,DWORD PTR [rsi+rax*4]
   30b29:	shr    eax,cl
   30b2b:	test   al,0x1
   30b2d:	je     30c18 <cols_to_bytes+0x178>
   30b33:	mov    QWORD PTR [rsp+0x30],0x1
   30b3c:	movsx  r14d,BYTE PTR [rbp+0x0]
   30b41:	mov    ebp,0x1
   30b46:	mov    BYTE PTR [rsp+0x38],0x1
   30b4b:	mov    DWORD PTR [rsp+0x3c],r14d
   30b50:	mov    BYTE PTR [rsp+0x24],0x1
   30b55:	mov    edi,r14d
   30b58:	mov    r13d,0x1
   30b5e:	call   c7f0 <wcwidth@plt>
   30b63:	test   eax,eax
   30b65:	jns    30b77 <cols_to_bytes+0xd7>
   30b67:	mov    edi,r14d
   30b6a:	call   c600 <iswcntrl@plt>
   30b6f:	test   eax,eax
   30b71:	sete   al
   30b74:	movzx  eax,al
   30b77:	add    r15d,eax
   30b7a:	cmp    ebx,r15d
   30b7d:	jl     30bd6 <cols_to_bytes+0x136>
   30b7f:	add    r12d,ebp
   30b82:	mov    rbp,QWORD PTR [rsp+0x30]
   30b87:	add    rbp,QWORD PTR [rsp+0x28]
   30b8c:	mov    BYTE PTR [rsp+0x24],0x0
   30b91:	mov    QWORD PTR [rsp+0x28],rbp
   30b96:	cmp    ebx,r15d
   30b99:	jle    30be7 <cols_to_bytes+0x147>
   30b9b:	mov    rdx,QWORD PTR [rsp+0x10]
   30ba0:	cmp    rbp,rdx
   30ba3:	jae    30be7 <cols_to_bytes+0x147>
   30ba5:	movzx  r13d,BYTE PTR [rsp+0x24]
   30bab:	test   r13b,r13b
   30bae:	je     30b08 <cols_to_bytes+0x68>
   30bb4:	movzx  r13d,BYTE PTR [rsp+0x38]
   30bba:	mov    rbp,QWORD PTR [rsp+0x30]
   30bbf:	mov    r14d,DWORD PTR [rsp+0x3c]
   30bc4:	test   r13b,r13b
   30bc7:	jne    30b55 <cols_to_bytes+0xb5>
   30bc9:	mov    eax,0x1
   30bce:	add    r15d,eax
   30bd1:	cmp    ebx,r15d
   30bd4:	jge    30b7f <cols_to_bytes+0xdf>
   30bd6:	mov    eax,0x1
   30bdb:	test   r13b,r13b
   30bde:	jne    30ce0 <cols_to_bytes+0x240>
   30be4:	sub    r15d,eax
   30be7:	mov    rax,QWORD PTR [rsp+0x8]
   30bec:	mov    DWORD PTR [rax],r15d
   30bef:	mov    rax,QWORD PTR [rsp+0x58]
   30bf4:	xor    rax,QWORD PTR fs:0x28
   30bfd:	jne    30d05 <cols_to_bytes+0x265>
   30c03:	add    rsp,0x68
   30c07:	mov    eax,r12d
   30c0a:	pop    rbx
   30c0b:	pop    rbp
   30c0c:	pop    r12
   30c0e:	pop    r13
   30c10:	pop    r14
   30c12:	pop    r15
   30c14:	ret    
   30c15:	nop    DWORD PTR [rax]
   30c18:	mov    BYTE PTR [rsp+0x18],0x1
   30c1d:	lea    r9,[rsp+0x1c]
   30c22:	sub    rdx,rbp
   30c25:	lea    rdi,[rsp+0x3c]
   30c2a:	mov    rsi,rbp
   30c2d:	mov    rcx,r9
   30c30:	mov    QWORD PTR [rsp],r9
   30c34:	call   4bee0 <rpl_mbrtowc>
   30c39:	mov    r9,QWORD PTR [rsp]
   30c3d:	cmp    rax,0xffffffffffffffff
   30c41:	mov    QWORD PTR [rsp+0x30],rax
   30c46:	mov    rbp,rax
   30c49:	je     30c90 <cols_to_bytes+0x1f0>
   30c4b:	mov    r14d,DWORD PTR [rsp+0x3c]
   30c50:	cmp    rax,0xfffffffffffffffe
   30c54:	je     30cb8 <cols_to_bytes+0x218>
   30c56:	test   rax,rax
   30c59:	jne    30c69 <cols_to_bytes+0x1c9>
   30c5b:	mov    QWORD PTR [rsp+0x30],0x1
   30c64:	mov    ebp,0x1
   30c69:	mov    rdi,r9
   30c6c:	mov    BYTE PTR [rsp+0x38],0x1
   30c71:	call   c730 <mbsinit@plt>
   30c76:	test   eax,eax
   30c78:	je     30c7f <cols_to_bytes+0x1df>
   30c7a:	mov    BYTE PTR [rsp+0x18],0x0
   30c7f:	mov    BYTE PTR [rsp+0x24],0x1
   30c84:	jmp    30b55 <cols_to_bytes+0xb5>
   30c89:	nop    DWORD PTR [rax+0x0]
   30c90:	mov    BYTE PTR [rsp+0x38],0x0
   30c95:	mov    r14d,DWORD PTR [rsp+0x3c]
   30c9a:	mov    ebp,0x1
   30c9f:	mov    QWORD PTR [rsp+0x30],0x1
   30ca8:	mov    BYTE PTR [rsp+0x24],0x1
   30cad:	jmp    30bc9 <cols_to_bytes+0x129>
   30cb2:	nop    WORD PTR [rax+rax*1+0x0]
   30cb8:	mov    rbp,QWORD PTR [rsp+0x10]
   30cbd:	sub    rbp,QWORD PTR [rsp+0x28]
   30cc2:	mov    BYTE PTR [rsp+0x38],0x0
   30cc7:	mov    eax,0x1
   30ccc:	mov    QWORD PTR [rsp+0x30],rbp
   30cd1:	mov    BYTE PTR [rsp+0x24],0x1
   30cd6:	jmp    30b77 <cols_to_bytes+0xd7>
   30cdb:	nop    DWORD PTR [rax+rax*1+0x0]
   30ce0:	mov    edi,r14d
   30ce3:	call   c7f0 <wcwidth@plt>
   30ce8:	test   eax,eax
   30cea:	jns    30be4 <cols_to_bytes+0x144>
   30cf0:	mov    edi,r14d
   30cf3:	call   c600 <iswcntrl@plt>
   30cf8:	test   eax,eax
   30cfa:	sete   al
   30cfd:	movzx  eax,al
   30d00:	jmp    30be4 <cols_to_bytes+0x144>
   30d05:	call   c7b0 <__stack_chk_fail@plt>
   30d0a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000030d10 <create_image>:
   30d10:	push   r15
   30d12:	push   r14
   30d14:	push   r13
   30d16:	push   r12
   30d18:	push   rbp
   30d19:	push   rbx
   30d1a:	mov    rbx,rdi
   30d1d:	sub    rsp,0x48
   30d21:	mov    r14d,DWORD PTR [rdi+0x30]
   30d25:	mov    r12,QWORD PTR [rdi+0x18]
   30d29:	mov    DWORD PTR [rsp+0x28],esi
   30d2d:	movsd  QWORD PTR [rsp+0x8],xmm0
   30d33:	lea    ebp,[r14+0x3]
   30d37:	mov    rax,QWORD PTR fs:0x28
   30d40:	mov    QWORD PTR [rsp+0x38],rax
   30d45:	xor    eax,eax
   30d47:	test   r14d,r14d
   30d4a:	cmovns ebp,r14d
   30d4e:	add    r12,QWORD PTR [rdi+0x8]
   30d52:	sar    ebp,0x2
   30d55:	mov    r13d,ebp
   30d58:	mov    rbp,QWORD PTR [rdi+0x38]
   30d5c:	mov    rdi,QWORD PTR [rdi]
   30d5f:	call   308e0 <count_cols>
   30d64:	mov    r15d,DWORD PTR [rbx+0x30]
   30d68:	movsd  xmm3,QWORD PTR [rsp+0x8]
   30d6e:	mov    ecx,eax
   30d70:	lea    eax,[r13+0x28]
   30d74:	sub    r15d,eax
   30d77:	mov    eax,0x0
   30d7c:	cmp    r15d,0x4
   30d80:	cmovle r15d,eax
   30d84:	comisd xmm3,QWORD PTR [rip+0x3c004]        # 6cd90 <eta_str.8886+0x18>
   30d8c:	jae    310f8 <create_image+0x3e8>
   30d92:	pxor   xmm5,xmm5
   30d96:	movsd  QWORD PTR [rsp+0x10],xmm5
   30d9c:	maxsd  xmm5,xmm3
   30da0:	movsd  QWORD PTR [rsp+0x8],xmm5
   30da6:	cmp    r13d,ecx
   30da9:	jg     31119 <create_image+0x409>
   30daf:	lea    eax,[r13+0x5]
   30db3:	cmp    eax,ecx
   30db5:	jl     31180 <create_image+0x470>
   30dbb:	mov    r10d,r13d
   30dbe:	xor    esi,esi
   30dc0:	xor    r14d,r14d
   30dc3:	mov    rdi,QWORD PTR [rbx]
   30dc6:	lea    rdx,[rsp+0x34]
   30dcb:	mov    DWORD PTR [rsp+0x2c],r10d
   30dd0:	mov    QWORD PTR [rsp+0x20],rdx
   30dd5:	call   30aa0 <cols_to_bytes>
   30dda:	mov    r10d,DWORD PTR [rsp+0x2c]
   30ddf:	mov    rdx,QWORD PTR [rsp+0x20]
   30de4:	movsxd r9,eax
   30de7:	mov    esi,r10d
   30dea:	mov    rdi,r9
   30ded:	add    rdi,QWORD PTR [rbx]
   30df0:	mov    QWORD PTR [rsp+0x18],r9
   30df5:	call   30aa0 <cols_to_bytes>
   30dfa:	mov    r9,QWORD PTR [rsp+0x18]
   30dff:	mov    rsi,QWORD PTR [rbx]
   30e02:	mov    rdi,rbp
   30e05:	movsxd rcx,eax
   30e08:	add    rsi,r9
   30e0b:	mov    rdx,rcx
   30e0e:	mov    QWORD PTR [rsp+0x18],rcx
   30e13:	call   cb30 <memcpy@plt>
   30e18:	mov    rcx,QWORD PTR [rsp+0x18]
   30e1d:	add    r14d,DWORD PTR [rsp+0x34]
   30e22:	mov    esi,0x20
   30e27:	add    rcx,rbp
   30e2a:	mov    ebp,r13d
   30e2d:	sub    ebp,r14d
   30e30:	mov    rdi,rcx
   30e33:	lea    edx,[rbp+0x1]
   30e36:	movsxd rbp,ebp
   30e39:	movsxd rdx,edx
   30e3c:	call   bed0 <memset@plt>
   30e41:	lea    rbp,[rax+rbp*1+0x1]
   30e46:	mov    rax,QWORD PTR [rbx+0x10]
   30e4a:	test   rax,rax
   30e4d:	jle    31166 <create_image+0x456>
   30e53:	pxor   xmm0,xmm0
   30e57:	mov    esi,0x1
   30e5c:	mov    rdi,rbp
   30e5f:	movsd  xmm1,QWORD PTR [rip+0x3bf51]        # 6cdb8 <eta_str.8886+0x40>
   30e67:	cvtsi2sd xmm0,r12
   30e6c:	lea    rcx,[rip+0x3be45]        # 6ccb8 <primes.6089+0x6bd8>
   30e73:	mov    rdx,0xffffffffffffffff
   30e7a:	mulsd  xmm1,xmm0
   30e7e:	pxor   xmm0,xmm0
   30e82:	cvtsi2sd xmm0,rax
   30e87:	xor    eax,eax
   30e89:	divsd  xmm1,xmm0
   30e8d:	cvttsd2si r8d,xmm1
   30e92:	call   c950 <__sprintf_chk@plt>
   30e97:	movsxd r14,eax
   30e9a:	add    r14,rbp
   30e9d:	test   r15d,r15d
   30ea0:	je     30f39 <create_image+0x229>
   30ea6:	mov    rax,QWORD PTR [rbx+0x10]
   30eaa:	lea    r8,[r14+0x1]
   30eae:	test   rax,rax
   30eb1:	jg     31350 <create_image+0x640>
   30eb7:	mov    eax,DWORD PTR [rbx+0x40]
   30eba:	lea    ecx,[r15+r15*1-0x6]
   30ebf:	cdq    
   30ec0:	idiv   ecx
   30ec2:	lea    eax,[r15-0x2]
   30ec6:	lea    edi,[rdx+0x1]
   30ec9:	cmp    eax,edx
   30ecb:	jle    31430 <create_image+0x720>
   30ed1:	lea    eax,[r15-0x1]
   30ed5:	mov    BYTE PTR [r14],0x5b
   30ed9:	xor    ecx,ecx
   30edb:	lea    r11d,[rdi+0x1]
   30edf:	lea    rbp,[rax+0x1]
   30ee3:	mov    r10d,0x20
   30ee9:	mov    r9d,0x3e
   30eef:	jmp    30f1b <create_image+0x20b>
   30ef1:	nop    DWORD PTR [rax+0x0]
   30ef8:	cmp    edi,ecx
   30efa:	je     31420 <create_image+0x710>
   30f00:	cmp    r11d,ecx
   30f03:	mov    esi,r9d
   30f06:	cmovne esi,r10d
   30f0a:	mov    BYTE PTR [r14+rcx*1+0x1],sil
   30f0f:	lea    rsi,[rcx+0x1]
   30f13:	cmp    rax,rcx
   30f16:	je     30f2e <create_image+0x21e>
   30f18:	mov    rcx,rsi
   30f1b:	cmp    edx,ecx
   30f1d:	jne    30ef8 <create_image+0x1e8>
   30f1f:	mov    BYTE PTR [r14+rcx*1+0x1],0x3c
   30f25:	lea    rsi,[rcx+0x1]
   30f29:	cmp    rax,rcx
   30f2c:	jne    30f18 <create_image+0x208>
   30f2e:	add    r8,rbp
   30f31:	mov    BYTE PTR [r8],0x5d
   30f35:	lea    r14,[r8+0x1]
   30f39:	add    DWORD PTR [rbx+0x40],0x1
   30f3d:	mov    edx,0x2
   30f42:	mov    esi,0x3e8
   30f47:	mov    rdi,r12
   30f4a:	call   3cf90 <human_readable>
   30f4f:	mov    rdi,rax
   30f52:	mov    r15,rax
   30f55:	call   308e0 <count_cols>
   30f5a:	mov    r8d,eax
   30f5d:	mov    eax,0x8
   30f62:	sub    eax,r8d
   30f65:	test   eax,eax
   30f67:	jle    30f7f <create_image+0x26f>
   30f69:	movsxd rbp,eax
   30f6c:	mov    rdi,r14
   30f6f:	mov    esi,0x20
   30f74:	mov    rdx,rbp
   30f77:	add    r14,rbp
   30f7a:	call   bed0 <memset@plt>
   30f7f:	xor    eax,eax
   30f81:	mov    rdx,r15
   30f84:	lea    rsi,[rip+0x3bfbb]        # 6cf46 <eta_str.8886+0x1ce>
   30f8b:	mov    rdi,r14
   30f8e:	call   c400 <sprintf@plt>
   30f93:	movsd  xmm0,QWORD PTR [rbx+0x190]
   30f9b:	movsxd rbp,eax
   30f9e:	add    rbp,r14
   30fa1:	comisd xmm0,QWORD PTR [rsp+0x10]
   30fa7:	jbe    30fb9 <create_image+0x2a9>
   30fa9:	mov    rdi,QWORD PTR [rbx+0x198]
   30fb0:	test   rdi,rdi
   30fb3:	jne    31200 <create_image+0x4f0>
   30fb9:	movabs rax,0x424b2d2e2d2d2020
   30fc3:	mov    edx,0x732f
   30fc8:	add    rbp,0xa
   30fcc:	mov    QWORD PTR [rbp-0xa],rax
   30fd0:	mov    WORD PTR [rbp-0x2],dx
   30fd4:	cmp    BYTE PTR [rsp+0x28],0x0
   30fd9:	jne    31298 <create_image+0x588>
   30fdf:	mov    rax,QWORD PTR [rbx+0x10]
   30fe3:	test   rax,rax
   30fe6:	jle    310a0 <create_image+0x390>
   30fec:	mov    rdx,QWORD PTR [rbx+0x18]
   30ff0:	test   rdx,rdx
   30ff3:	jle    313f0 <create_image+0x6e0>
   30ff9:	movsd  xmm7,QWORD PTR [rsp+0x8]
   30fff:	comisd xmm7,QWORD PTR [rip+0x3bdb9]        # 6cdc0 <eta_str.8886+0x48>
   31007:	jbe    313f0 <create_image+0x6e0>
   3100d:	cmp    rax,r12
   31010:	je     31020 <create_image+0x310>
   31012:	mov    edi,DWORD PTR [rbx+0x1c0]
   31018:	test   edi,edi
   3101a:	jne    314c8 <create_image+0x7b8>
   31020:	sub    rax,r12
   31023:	pxor   xmm0,xmm0
   31027:	movsd  xmm2,QWORD PTR [rsp+0x8]
   3102d:	pxor   xmm1,xmm1
   31031:	cvtsi2sd xmm0,rax
   31036:	cvtsi2sd xmm1,rdx
   3103b:	mulsd  xmm0,xmm2
   3103f:	divsd  xmm0,xmm1
   31043:	comisd xmm0,QWORD PTR [rip+0x3bd3d]        # 6cd88 <eta_str.8886+0x10>
   3104b:	jae    313f0 <create_image+0x6e0>
   31051:	addsd  xmm0,QWORD PTR [rip+0x3bb5f]        # 6cbb8 <primes.6089+0x6ad8>
   31059:	movsd  QWORD PTR [rbx+0x1b8],xmm2
   31061:	cvttsd2si edi,xmm0
   31065:	mov    DWORD PTR [rbx+0x1c0],edi
   3106b:	xor    esi,esi
   3106d:	call   2f970 <eta_to_human_short>
   31072:	mov    rcx,QWORD PTR [rip+0x58b4f]        # 89bc8 <eta_trans.8887>
   31079:	mov    r8,rax
   3107c:	test   rcx,rcx
   3107f:	je     314e7 <create_image+0x7d7>
   31085:	mov    rdi,rbp
   31088:	mov    rdx,0xffffffffffffffff
   3108f:	mov    esi,0x1
   31094:	xor    eax,eax
   31096:	call   c950 <__sprintf_chk@plt>
   3109b:	cdqe   
   3109d:	add    rbp,rax
   310a0:	mov    BYTE PTR [rbp+0x0],0x0
   310a4:	mov    rdi,QWORD PTR [rbx+0x38]
   310a8:	mov    r12d,DWORD PTR [rbx+0x30]
   310ac:	call   308e0 <count_cols>
   310b1:	sub    r12d,eax
   310b4:	test   r12d,r12d
   310b7:	jle    310d1 <create_image+0x3c1>
   310b9:	movsxd rbx,r12d
   310bc:	mov    esi,0x20
   310c1:	mov    rdi,rbp
   310c4:	mov    rdx,rbx
   310c7:	call   bed0 <memset@plt>
   310cc:	mov    BYTE PTR [rbp+rbx*1+0x0],0x0
   310d1:	mov    rax,QWORD PTR [rsp+0x38]
   310d6:	xor    rax,QWORD PTR fs:0x28
   310df:	jne    31537 <create_image+0x827>
   310e5:	add    rsp,0x48
   310e9:	pop    rbx
   310ea:	pop    rbp
   310eb:	pop    r12
   310ed:	pop    r13
   310ef:	pop    r14
   310f1:	pop    r15
   310f3:	ret    
   310f4:	nop    DWORD PTR [rax+0x0]
   310f8:	movsd  xmm6,QWORD PTR [rip+0x3bc88]        # 6cd88 <eta_str.8886+0x10>
   31100:	pxor   xmm7,xmm7
   31104:	movsd  QWORD PTR [rsp+0x10],xmm7
   3110a:	movsd  QWORD PTR [rsp+0x8],xmm6
   31110:	cmp    r13d,ecx
   31113:	jle    30daf <create_image+0x9f>
   31119:	mov    rdx,QWORD PTR [rbx]
   3111c:	mov    rdi,rbp
   3111f:	lea    rsi,[rip+0x3be20]        # 6cf46 <eta_str.8886+0x1ce>
   31126:	xor    eax,eax
   31128:	mov    DWORD PTR [rsp+0x18],ecx
   3112c:	call   c400 <sprintf@plt>
   31131:	mov    ecx,DWORD PTR [rsp+0x18]
   31135:	mov    esi,0x20
   3113a:	movsxd r14,eax
   3113d:	add    r14,rbp
   31140:	mov    ebp,r13d
   31143:	sub    ebp,ecx
   31145:	mov    rdi,r14
   31148:	add    ebp,0x1
   3114b:	movsxd rbp,ebp
   3114e:	mov    rdx,rbp
   31151:	add    rbp,r14
   31154:	call   bed0 <memset@plt>
   31159:	mov    rax,QWORD PTR [rbx+0x10]
   3115d:	test   rax,rax
   31160:	jg     30e53 <create_image+0x143>
   31166:	mov    DWORD PTR [rbp+0x0],0x20202020
   3116d:	lea    r14,[rbp+0x4]
   31171:	jmp    30e9d <create_image+0x18d>
   31176:	nop    WORD PTR cs:[rax+rax*1+0x0]
   31180:	cmp    BYTE PTR [rip+0x590d5],0x0        # 8a25c <opt+0x1dc>
   31187:	jne    30dbb <create_image+0xab>
   3118d:	cmp    BYTE PTR [rsp+0x28],0x0
   31192:	jne    30dbb <create_image+0xab>
   31198:	mov    edx,DWORD PTR [rbx+0x40]
   3119b:	lea    eax,[r14+0x7]
   3119f:	lea    edi,[r13+rcx*1+0x0]
   311a4:	mov    r10d,r13d
   311a7:	add    edx,ecx
   311a9:	test   r14d,r14d
   311ac:	cmovns eax,r14d
   311b0:	xor    r14d,r14d
   311b3:	sar    eax,0x3
   311b6:	lea    eax,[rdx+rax*1]
   311b9:	cdq    
   311ba:	idiv   edi
   311bc:	mov    esi,edx
   311be:	cmp    ecx,edx
   311c0:	jge    30dc3 <create_image+0xb3>
   311c6:	sub    esi,ecx
   311c8:	mov    r14d,r13d
   311cb:	mov    rdi,rbp
   311ce:	sub    r14d,esi
   311d1:	mov    DWORD PTR [rsp+0x20],esi
   311d5:	mov    esi,0x20
   311da:	movsxd rdx,r14d
   311dd:	mov    QWORD PTR [rsp+0x18],rdx
   311e2:	call   bed0 <memset@plt>
   311e7:	mov    rdx,QWORD PTR [rsp+0x18]
   311ec:	mov    r10d,DWORD PTR [rsp+0x20]
   311f1:	xor    esi,esi
   311f3:	add    rbp,rdx
   311f6:	jmp    30dc3 <create_image+0xb3>
   311fb:	nop    DWORD PTR [rax+rax*1+0x0]
   31200:	movsd  xmm1,QWORD PTR [rsp+0x8]
   31206:	subsd  xmm1,QWORD PTR [rbx+0x1a0]
   3120e:	lea    rsi,[rsp+0x34]
   31213:	mov    DWORD PTR [rsp+0x34],0x0
   3121b:	add    rdi,QWORD PTR [rbx+0x1a8]
   31222:	addsd  xmm0,xmm1
   31226:	call   35080 <calc_rate>
   3122b:	cmp    BYTE PTR [rip+0x591a9],0x0        # 8a3db <opt+0x35b>
   31232:	movsxd rdx,DWORD PTR [rsp+0x34]
   31237:	je     31480 <create_image+0x770>
   3123d:	lea    rax,[rip+0x4c33c]        # 7d580 <short_units_bits.8922>
   31244:	mov    r9,QWORD PTR [rax+rdx*8]
   31248:	xor    r8d,r8d
   3124b:	comisd xmm0,QWORD PTR [rip+0x3bb55]        # 6cda8 <eta_str.8886+0x30>
   31253:	jae    31268 <create_image+0x558>
   31255:	xor    r8d,r8d
   31258:	ucomisd xmm0,QWORD PTR [rip+0x3bb50]        # 6cdb0 <eta_str.8886+0x38>
   31260:	setb   r8b
   31264:	add    r8d,0x1
   31268:	mov    rdi,rbp
   3126b:	mov    esi,0x1
   31270:	mov    eax,0x1
   31275:	mov    rdx,0xffffffffffffffff
   3127c:	lea    rcx,[rip+0x3ba5d]        # 6cce0 <primes.6089+0x6c00>
   31283:	call   c950 <__sprintf_chk@plt>
   31288:	cdqe   
   3128a:	add    rbp,rax
   3128d:	cmp    BYTE PTR [rsp+0x28],0x0
   31292:	je     30fdf <create_image+0x2cf>
   31298:	mov    edx,0x5
   3129d:	xor    edi,edi
   3129f:	lea    rsi,[rip+0x3ba44]        # 6ccea <primes.6089+0x6c0a>
   312a6:	call   c780 <dcgettext@plt>
   312ab:	mov    rdi,rbp
   312ae:	mov    rsi,rax
   312b1:	call   bf80 <stpcpy@plt>
   312b6:	mov    rdi,rbp
   312b9:	sub    rax,rbp
   312bc:	mov    r12,rax
   312bf:	call   308e0 <count_cols>
   312c4:	mov    r13d,r12d
   312c7:	movsxd r12,r12d
   312ca:	movsd  xmm6,QWORD PTR [rsp+0x8]
   312d0:	sub    r13d,eax
   312d3:	add    r12,rbp
   312d6:	mov    r14d,eax
   312d9:	comisd xmm6,QWORD PTR [rip+0x374df]        # 687c0 <primes.6089+0x26e0>
   312e1:	jae    31448 <create_image+0x738>
   312e7:	movsd  xmm0,QWORD PTR [rsp+0x8]
   312ed:	call   3f120 <print_decimal>
   312f2:	lea    rcx,[rip+0x3b9bb]        # 6ccb4 <primes.6089+0x6bd4>
   312f9:	mov    esi,0x1
   312fe:	mov    rdi,r12
   31301:	mov    r8,rax
   31304:	mov    rdx,0xffffffffffffffff
   3130b:	xor    eax,eax
   3130d:	call   c950 <__sprintf_chk@plt>
   31312:	add    eax,r14d
   31315:	add    r13d,eax
   31318:	movsxd r13,r13d
   3131b:	add    rbp,r13
   3131e:	cmp    eax,0xe
   31321:	jg     310a0 <create_image+0x390>
   31327:	mov    r12d,0xf
   3132d:	mov    rdi,rbp
   31330:	mov    esi,0x20
   31335:	sub    r12d,eax
   31338:	movsxd r12,r12d
   3133b:	mov    rdx,r12
   3133e:	add    rbp,r12
   31341:	call   bed0 <memset@plt>
   31346:	jmp    310a0 <create_image+0x390>
   3134b:	nop    DWORD PTR [rax+rax*1+0x0]
   31350:	pxor   xmm1,xmm1
   31354:	pxor   xmm0,xmm0
   31358:	pxor   xmm2,xmm2
   3135c:	mov    rdi,r8
   3135f:	cvtsi2sd xmm1,rax
   31364:	mov    esi,0x2b
   31369:	cvtsi2sd xmm0,QWORD PTR [rbx+0x8]
   3136f:	mov    BYTE PTR [r14],0x5b
   31373:	cvtsi2sd xmm2,r15d
   31378:	divsd  xmm0,xmm1
   3137c:	mulsd  xmm0,xmm2
   31380:	cvttsd2si r9d,xmm0
   31385:	pxor   xmm0,xmm0
   31389:	cvtsi2sd xmm0,r12
   3138e:	movsxd r14,r9d
   31391:	mov    DWORD PTR [rsp+0x18],r9d
   31396:	divsd  xmm0,xmm1
   3139a:	mov    rdx,r14
   3139d:	mulsd  xmm0,xmm2
   313a1:	cvttsd2si ebp,xmm0
   313a5:	call   bed0 <memset@plt>
   313aa:	mov    r9d,DWORD PTR [rsp+0x18]
   313af:	mov    r8,rax
   313b2:	lea    rcx,[rax+r14*1]
   313b6:	sub    ebp,r9d
   313b9:	test   ebp,ebp
   313bb:	jg     31490 <create_image+0x780>
   313c1:	mov    rax,rcx
   313c4:	movsxd r15,r15d
   313c7:	mov    rdi,rcx
   313ca:	mov    esi,0x20
   313cf:	sub    rax,r8
   313d2:	sub    r15,rax
   313d5:	mov    rdx,r15
   313d8:	call   bed0 <memset@plt>
   313dd:	mov    rcx,rax
   313e0:	add    rcx,r15
   313e3:	mov    BYTE PTR [rcx],0x5d
   313e6:	lea    r14,[rcx+0x1]
   313ea:	jmp    30f39 <create_image+0x229>
   313ef:	nop
   313f0:	movabs rax,0x2020202020202020
   313fa:	mov    DWORD PTR [rbp+0x8],0x20202020
   31401:	add    rbp,0xf
   31405:	mov    QWORD PTR [rbp-0xf],rax
   31409:	mov    eax,0x2020
   3140e:	mov    WORD PTR [rbp-0x3],ax
   31412:	mov    BYTE PTR [rbp-0x1],0x20
   31416:	jmp    310a0 <create_image+0x390>
   3141b:	nop    DWORD PTR [rax+rax*1+0x0]
   31420:	mov    BYTE PTR [r14+rcx*1+0x1],0x3d
   31426:	jmp    30f0f <create_image+0x1ff>
   3142b:	nop    DWORD PTR [rax+rax*1+0x0]
   31430:	sub    edx,r15d
   31433:	mov    edi,r15d
   31436:	add    edx,0x5
   31439:	sub    edi,edx
   3143b:	lea    edx,[rdi-0x1]
   3143e:	jmp    30ed1 <create_image+0x1c1>
   31443:	nop    DWORD PTR [rax+rax*1+0x0]
   31448:	addsd  xmm6,QWORD PTR [rip+0x3b768]        # 6cbb8 <primes.6089+0x6ad8>
   31450:	xor    esi,esi
   31452:	cvttsd2si edi,xmm6
   31456:	call   2f970 <eta_to_human_short>
   3145b:	lea    rsi,[rip+0x3bae4]        # 6cf46 <eta_str.8886+0x1ce>
   31462:	mov    rdi,r12
   31465:	mov    rdx,rax
   31468:	xor    eax,eax
   3146a:	call   c400 <sprintf@plt>
   3146f:	add    eax,r14d
   31472:	jmp    31315 <create_image+0x605>
   31477:	nop    WORD PTR [rax+rax*1+0x0]
   31480:	lea    rax,[rip+0x4c139]        # 7d5c0 <short_units.8921>
   31487:	mov    r9,QWORD PTR [rax+rdx*8]
   3148b:	jmp    31248 <create_image+0x538>
   31490:	lea    edx,[rbp-0x1]
   31493:	mov    rdi,rcx
   31496:	mov    esi,0x3d
   3149b:	movsxd rbp,ebp
   3149e:	movsxd rdx,edx
   314a1:	mov    QWORD PTR [rsp+0x18],rax
   314a6:	call   bed0 <memset@plt>
   314ab:	mov    r8,QWORD PTR [rsp+0x18]
   314b0:	mov    rcx,rax
   314b3:	lea    rax,[rax+rbp*1-0x1]
   314b8:	mov    BYTE PTR [rax],0x3e
   314bb:	add    rcx,rbp
   314be:	jmp    313c1 <create_image+0x6b1>
   314c3:	nop    DWORD PTR [rax+rax*1+0x0]
   314c8:	subsd  xmm7,QWORD PTR [rbx+0x1b8]
   314d0:	movsd  xmm1,QWORD PTR [rip+0x3b8f0]        # 6cdc8 <eta_str.8886+0x50>
   314d8:	comisd xmm1,xmm7
   314dc:	ja     3106b <create_image+0x35b>
   314e2:	jmp    31020 <create_image+0x310>
   314e7:	mov    edx,0x5
   314ec:	lea    rsi,[rip+0x3b885]        # 6cd78 <eta_str.8886>
   314f3:	xor    edi,edi
   314f5:	mov    QWORD PTR [rsp+0x8],rax
   314fa:	call   c780 <dcgettext@plt>
   314ff:	mov    r13,rax
   31502:	mov    rdi,rax
   31505:	mov    QWORD PTR [rip+0x586bc],rax        # 89bc8 <eta_trans.8887>
   3150c:	call   c310 <strlen@plt>
   31511:	mov    rdi,r13
   31514:	mov    r12,rax
   31517:	call   308e0 <count_cols>
   3151c:	mov    rcx,QWORD PTR [rip+0x586a5]        # 89bc8 <eta_trans.8887>
   31523:	mov    r8,QWORD PTR [rsp+0x8]
   31528:	sub    r12d,eax
   3152b:	mov    DWORD PTR [rip+0x5868e],r12d        # 89bc0 <bytes_cols_diff.8888>
   31532:	jmp    31085 <create_image+0x375>
   31537:	call   c7b0 <__stack_chk_fail@plt>
   3153c:	nop    DWORD PTR [rax+0x0]

0000000000031540 <bar_finish>:
   31540:	endbr64 
   31544:	push   rbp
   31545:	mov    rdx,QWORD PTR [rdi+0x10]
   31549:	mov    rbp,rdi
   3154c:	test   rdx,rdx
   3154f:	jle    31562 <bar_finish+0x22>
   31551:	mov    rax,QWORD PTR [rdi+0x8]
   31555:	add    rax,QWORD PTR [rdi+0x18]
   31559:	cmp    rdx,rax
   3155c:	jge    31562 <bar_finish+0x22>
   3155e:	mov    QWORD PTR [rdi+0x10],rax
   31562:	mov    esi,0x1
   31567:	mov    rdi,rbp
   3156a:	call   30d10 <create_image>
   3156f:	mov    rdi,QWORD PTR [rbp+0x38]
   31573:	call   2fc80 <display_image>
   31578:	lea    rsi,[rip+0x34450]        # 659cf <yy_accept+0x90f>
   3157f:	xor    edi,edi
   31581:	call   2de60 <logputs>
   31586:	lea    rsi,[rip+0x34442]        # 659cf <yy_accept+0x90f>
   3158d:	mov    edi,0x4
   31592:	call   2de60 <logputs>
   31597:	mov    rdi,QWORD PTR [rbp+0x0]
   3159b:	call   4bdc0 <rpl_free>
   315a0:	mov    QWORD PTR [rbp+0x0],0x0
   315a8:	mov    rdi,QWORD PTR [rbp+0x38]
   315ac:	call   4bdc0 <rpl_free>
   315b1:	mov    QWORD PTR [rbp+0x38],0x0
   315b9:	mov    rdi,rbp
   315bc:	pop    rbp
   315bd:	jmp    4bdc0 <rpl_free>
   315c2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   315cd:	nop    DWORD PTR [rax]

00000000000315d0 <bar_draw>:
   315d0:	endbr64 
   315d4:	push   rbp
   315d5:	push   rbx
   315d6:	mov    rbx,rdi
   315d9:	sub    rsp,0x8
   315dd:	mov    eax,DWORD PTR [rip+0x585ed]        # 89bd0 <received_sigwinch>
   315e3:	test   eax,eax
   315e5:	jne    31610 <bar_draw+0x40>
   315e7:	movsd  xmm0,QWORD PTR [rbx+0x28]
   315ec:	movsd  xmm2,QWORD PTR [rip+0x3b7dc]        # 6cdd0 <eta_str.8886+0x58>
   315f4:	movapd xmm1,xmm0
   315f8:	subsd  xmm1,QWORD PTR [rbx+0x20]
   315fd:	comisd xmm2,xmm1
   31601:	jbe    3165b <bar_draw+0x8b>
   31603:	add    rsp,0x8
   31607:	pop    rbx
   31608:	pop    rbp
   31609:	ret    
   3160a:	nop    WORD PTR [rax+rax*1+0x0]
   31610:	mov    ebp,DWORD PTR [rip+0x585be]        # 89bd4 <screen_width>
   31616:	call   3e950 <determine_screen_width>
   3161b:	test   eax,eax
   3161d:	je     31680 <bar_draw+0xb0>
   3161f:	cmp    eax,0x32
   31622:	jle    316a8 <bar_draw+0xd8>
   31628:	mov    DWORD PTR [rip+0x585a6],eax        # 89bd4 <screen_width>
   3162e:	cmp    ebp,eax
   31630:	je     31693 <bar_draw+0xc3>
   31632:	lea    edx,[rax-0x1]
   31635:	lea    esi,[rax+rax*1+0x62]
   31639:	mov    rdi,QWORD PTR [rbx+0x38]
   3163d:	mov    DWORD PTR [rbx+0x30],edx
   31640:	movsxd rsi,esi
   31643:	call   4b870 <xrealloc>
   31648:	movsd  xmm0,QWORD PTR [rbx+0x28]
   3164d:	mov    DWORD PTR [rip+0x58579],0x0        # 89bd0 <received_sigwinch>
   31657:	mov    QWORD PTR [rbx+0x38],rax
   3165b:	mov    rdi,rbx
   3165e:	xor    esi,esi
   31660:	call   30d10 <create_image>
   31665:	mov    rdi,QWORD PTR [rbx+0x38]
   31669:	call   2fc80 <display_image>
   3166e:	movsd  xmm0,QWORD PTR [rbx+0x28]
   31673:	movsd  QWORD PTR [rbx+0x20],xmm0
   31678:	add    rsp,0x8
   3167c:	pop    rbx
   3167d:	pop    rbp
   3167e:	ret    
   3167f:	nop
   31680:	mov    DWORD PTR [rip+0x5854a],0x50        # 89bd4 <screen_width>
   3168a:	mov    eax,0x50
   3168f:	cmp    ebp,eax
   31691:	jne    31632 <bar_draw+0x62>
   31693:	mov    DWORD PTR [rip+0x58533],0x0        # 89bd0 <received_sigwinch>
   3169d:	jmp    315e7 <bar_draw+0x17>
   316a2:	nop    WORD PTR [rax+rax*1+0x0]
   316a8:	mov    DWORD PTR [rip+0x58522],0x33        # 89bd4 <screen_width>
   316b2:	mov    eax,0x33
   316b7:	jmp    3162e <bar_draw+0x5e>
   316bc:	nop    DWORD PTR [rax+0x0]

00000000000316c0 <bar_create>:
   316c0:	endbr64 
   316c4:	push   r13
   316c6:	mov    r13,rdx
   316c9:	push   r12
   316cb:	push   rbp
   316cc:	mov    rbp,rdi
   316cf:	mov    edi,0x1
   316d4:	push   rbx
   316d5:	mov    rbx,rsi
   316d8:	mov    esi,0x1c8
   316dd:	sub    rsp,0x8
   316e1:	call   4b9c0 <xcalloc>
   316e6:	cmp    rbx,r13
   316e9:	mov    rsi,rbp
   316ec:	mov    QWORD PTR [rax+0x8],rbx
   316f0:	cmovl  rbx,r13
   316f4:	xor    edi,edi
   316f6:	mov    r12,rax
   316f9:	mov    QWORD PTR [rax+0x10],rbx
   316fd:	call   305e0 <prepare_filename>
   31702:	mov    rdi,rax
   31705:	call   4b850 <xmalloc>
   3170a:	mov    rsi,rbp
   3170d:	mov    rdi,rax
   31710:	mov    QWORD PTR [r12],rax
   31714:	call   305e0 <prepare_filename>
   31719:	mov    eax,DWORD PTR [rip+0x584b5]        # 89bd4 <screen_width>
   3171f:	test   eax,eax
   31721:	je     31780 <bar_create+0xc0>
   31723:	mov    edx,DWORD PTR [rip+0x584a7]        # 89bd0 <received_sigwinch>
   31729:	test   edx,edx
   3172b:	jne    31780 <bar_create+0xc0>
   3172d:	lea    edi,[rax+rax*1+0x62]
   31731:	lea    edx,[rax-0x1]
   31734:	movsxd rdi,edi
   31737:	mov    esi,0x1
   3173c:	mov    DWORD PTR [r12+0x30],edx
   31741:	call   4b9c0 <xcalloc>
   31746:	lea    rsi,[rip+0x34282]        # 659cf <yy_accept+0x90f>
   3174d:	xor    edi,edi
   3174f:	mov    QWORD PTR [r12+0x38],rax
   31754:	call   2de60 <logputs>
   31759:	mov    rdi,r12
   3175c:	xor    esi,esi
   3175e:	pxor   xmm0,xmm0
   31762:	call   30d10 <create_image>
   31767:	mov    rdi,QWORD PTR [r12+0x38]
   3176c:	call   2fc80 <display_image>
   31771:	add    rsp,0x8
   31775:	mov    rax,r12
   31778:	pop    rbx
   31779:	pop    rbp
   3177a:	pop    r12
   3177c:	pop    r13
   3177e:	ret    
   3177f:	nop
   31780:	call   3e950 <determine_screen_width>
   31785:	test   eax,eax
   31787:	jne    317b0 <bar_create+0xf0>
   31789:	mov    DWORD PTR [rip+0x58441],0x50        # 89bd4 <screen_width>
   31793:	mov    edi,0x102
   31798:	mov    edx,0x4f
   3179d:	mov    DWORD PTR [rip+0x58429],0x0        # 89bd0 <received_sigwinch>
   317a7:	jmp    31737 <bar_create+0x77>
   317a9:	nop    DWORD PTR [rax+0x0]
   317b0:	cmp    eax,0x32
   317b3:	jg     317d0 <bar_create+0x110>
   317b5:	mov    DWORD PTR [rip+0x58415],0x33        # 89bd4 <screen_width>
   317bf:	mov    edi,0xc8
   317c4:	mov    edx,0x32
   317c9:	jmp    3179d <bar_create+0xdd>
   317cb:	nop    DWORD PTR [rax+rax*1+0x0]
   317d0:	lea    edi,[rax+rax*1+0x62]
   317d4:	mov    DWORD PTR [rip+0x583fa],eax        # 89bd4 <screen_width>
   317da:	lea    edx,[rax-0x1]
   317dd:	movsxd rdi,edi
   317e0:	jmp    3179d <bar_create+0xdd>
   317e2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   317ed:	nop    DWORD PTR [rax]

00000000000317f0 <valid_progress_implementation_p>:
   317f0:	endbr64 
   317f4:	push   r12
   317f6:	mov    esi,0x3a
   317fb:	push   rbp
   317fc:	mov    rbp,rdi
   317ff:	sub    rsp,0x8
   31803:	call   c6c0 <strchr@plt>
   31808:	test   rax,rax
   3180b:	je     31850 <valid_progress_implementation_p+0x60>
   3180d:	mov    r12,rax
   31810:	sub    r12,rbp
   31813:	mov    rdi,QWORD PTR [rip+0x4f926]        # 81140 <implementations>
   3181a:	mov    rdx,r12
   3181d:	mov    rsi,rbp
   31820:	call   c0d0 <strncmp@plt>
   31825:	test   eax,eax
   31827:	je     31860 <valid_progress_implementation_p+0x70>
   31829:	mov    rdi,QWORD PTR [rip+0x4f948]        # 81178 <implementations+0x38>
   31830:	mov    rdx,r12
   31833:	mov    rsi,rbp
   31836:	call   c0d0 <strncmp@plt>
   3183b:	test   eax,eax
   3183d:	sete   al
   31840:	add    rsp,0x8
   31844:	pop    rbp
   31845:	pop    r12
   31847:	ret    
   31848:	nop    DWORD PTR [rax+rax*1+0x0]
   31850:	mov    rdi,rbp
   31853:	call   c310 <strlen@plt>
   31858:	mov    r12,rax
   3185b:	jmp    31813 <valid_progress_implementation_p+0x23>
   3185d:	nop    DWORD PTR [rax]
   31860:	mov    eax,0x1
   31865:	jmp    31840 <valid_progress_implementation_p+0x50>
   31867:	nop    WORD PTR [rax+rax*1+0x0]

0000000000031870 <set_progress_implementation>:
   31870:	endbr64 
   31874:	push   r14
   31876:	push   r13
   31878:	lea    r13,[rip+0x4f8c1]        # 81140 <implementations>
   3187f:	push   r12
   31881:	mov    r12,QWORD PTR [rip+0x4f8b8]        # 81140 <implementations>
   31888:	push   rbp
   31889:	push   rbx
   3188a:	test   rdi,rdi
   3188d:	je     31940 <set_progress_implementation+0xd0>
   31893:	mov    esi,0x3a
   31898:	mov    rbp,rdi
   3189b:	call   c6c0 <strchr@plt>
   318a0:	mov    rbx,rax
   318a3:	test   rax,rax
   318a6:	je     319b7 <set_progress_implementation+0x147>
   318ac:	mov    r14,rax
   318af:	mov    rsi,rbp
   318b2:	mov    rdi,r12
   318b5:	sub    r14,rbp
   318b8:	mov    rdx,r14
   318bb:	call   c0d0 <strncmp@plt>
   318c0:	test   eax,eax
   318c2:	je     31910 <set_progress_implementation+0xa0>
   318c4:	mov    rdi,QWORD PTR [rip+0x4f8ad]        # 81178 <implementations+0x38>
   318cb:	mov    rdx,r14
   318ce:	mov    rsi,rbp
   318d1:	call   c0d0 <strncmp@plt>
   318d6:	test   eax,eax
   318d8:	jne    319d6 <set_progress_implementation+0x166>
   318de:	lea    rax,[rip+0x4f893]        # 81178 <implementations+0x38>
   318e5:	mov    DWORD PTR [rip+0x582ed],0x0        # 89bdc <current_impl_locked>
   318ef:	mov    QWORD PTR [rip+0x582ea],rax        # 89be0 <current_impl>
   318f6:	lea    rdi,[rbx+0x1]
   318fa:	mov    rax,QWORD PTR [rax+0x30]
   318fe:	test   rax,rax
   31901:	je     31930 <set_progress_implementation+0xc0>
   31903:	pop    rbx
   31904:	pop    rbp
   31905:	pop    r12
   31907:	pop    r13
   31909:	pop    r14
   3190b:	jmp    rax
   3190d:	nop    DWORD PTR [rax]
   31910:	mov    QWORD PTR [rip+0x582c9],r13        # 89be0 <current_impl>
   31917:	mov    rax,r13
   3191a:	mov    DWORD PTR [rip+0x582b8],0x0        # 89bdc <current_impl_locked>
   31924:	jmp    318f6 <set_progress_implementation+0x86>
   31926:	nop    WORD PTR cs:[rax+rax*1+0x0]
   31930:	pop    rbx
   31931:	pop    rbp
   31932:	pop    r12
   31934:	pop    r13
   31936:	pop    r14
   31938:	ret    
   31939:	nop    DWORD PTR [rax+0x0]
   31940:	mov    r14d,0x3
   31946:	lea    rbp,[rip+0x3b3a5]        # 6ccf2 <primes.6089+0x6c12>
   3194d:	mov    rdx,r14
   31950:	mov    rsi,rbp
   31953:	mov    rdi,r12
   31956:	call   c0d0 <strncmp@plt>
   3195b:	test   eax,eax
   3195d:	je     31998 <set_progress_implementation+0x128>
   3195f:	mov    rdi,QWORD PTR [rip+0x4f812]        # 81178 <implementations+0x38>
   31966:	mov    rdx,r14
   31969:	mov    rsi,rbp
   3196c:	call   c0d0 <strncmp@plt>
   31971:	test   eax,eax
   31973:	jne    319d1 <set_progress_implementation+0x161>
   31975:	lea    rax,[rip+0x4f7fc]        # 81178 <implementations+0x38>
   3197c:	xor    edi,edi
   3197e:	mov    DWORD PTR [rip+0x58254],0x0        # 89bdc <current_impl_locked>
   31988:	mov    QWORD PTR [rip+0x58251],rax        # 89be0 <current_impl>
   3198f:	jmp    318fa <set_progress_implementation+0x8a>
   31994:	nop    DWORD PTR [rax+0x0]
   31998:	mov    QWORD PTR [rip+0x58241],r13        # 89be0 <current_impl>
   3199f:	lea    rax,[rip+0x4f79a]        # 81140 <implementations>
   319a6:	xor    edi,edi
   319a8:	mov    DWORD PTR [rip+0x5822a],0x0        # 89bdc <current_impl_locked>
   319b2:	jmp    318fa <set_progress_implementation+0x8a>
   319b7:	xor    eax,eax
   319b9:	or     rcx,0xffffffffffffffff
   319bd:	mov    rdi,rbp
   319c0:	repnz scas al,BYTE PTR es:[rdi]
   319c2:	mov    rax,rcx
   319c5:	not    rax
   319c8:	lea    r14,[rax-0x1]
   319cc:	jmp    3194d <set_progress_implementation+0xdd>
   319d1:	jmp    cc8f <set_progress_implementation.cold>
   319d6:	jmp    cc8f <set_progress_implementation.cold>
   319db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000319e0 <bar_set_params>:
   319e0:	endbr64 
   319e4:	push   rbp
   319e5:	push   rbx
   319e6:	sub    rsp,0x8
   319ea:	mov    rax,QWORD PTR [rip+0x581ef]        # 89be0 <current_impl>
   319f1:	mov    BYTE PTR [rax+0x8],0x1
   319f5:	test   rdi,rdi
   319f8:	je     31a42 <bar_set_params+0x62>
   319fa:	cmp    BYTE PTR [rdi],0x0
   319fd:	mov    r8,rdi
   31a00:	je     31a42 <bar_set_params+0x62>
   31a02:	lea    rbx,[rip+0x3b1c4]        # 6cbcd <primes.6089+0x6aed>
   31a09:	lea    rbp,[rip+0x3b2e6]        # 6ccf6 <primes.6089+0x6c16>
   31a10:	mov    ecx,0x5
   31a15:	mov    rsi,r8
   31a18:	mov    rdi,rbx
   31a1b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   31a1d:	seta   al
   31a20:	sbb    al,0x0
   31a22:	test   al,al
   31a24:	jne    31a80 <bar_set_params+0xa0>
   31a26:	mov    DWORD PTR [rip+0x581ac],0x1        # 89bdc <current_impl_locked>
   31a30:	mov    esi,0x3a
   31a35:	mov    rdi,r8
   31a38:	call   c1d0 <strchrnul@plt>
   31a3d:	cmp    BYTE PTR [rax],0x0
   31a40:	jne    31a70 <bar_set_params+0x90>
   31a42:	cmp    QWORD PTR [rip+0x58676],0x0        # 8a0c0 <opt+0x40>
   31a4a:	je     31aa0 <bar_set_params+0xc0>
   31a4c:	cmp    DWORD PTR [rip+0x58805],0x1        # 8a258 <opt+0x1d8>
   31a53:	je     31aa0 <bar_set_params+0xc0>
   31a55:	mov    eax,DWORD PTR [rip+0x58181]        # 89bdc <current_impl_locked>
   31a5b:	test   eax,eax
   31a5d:	je     31ac1 <bar_set_params+0xe1>
   31a5f:	add    rsp,0x8
   31a63:	pop    rbx
   31a64:	pop    rbp
   31a65:	ret    
   31a66:	nop    WORD PTR cs:[rax+rax*1+0x0]
   31a70:	cmp    BYTE PTR [rax+0x1],0x0
   31a74:	lea    r8,[rax+0x1]
   31a78:	jne    31a10 <bar_set_params+0x30>
   31a7a:	jmp    31a42 <bar_set_params+0x62>
   31a7c:	nop    DWORD PTR [rax+0x0]
   31a80:	mov    ecx,0x8
   31a85:	mov    rsi,r8
   31a88:	mov    rdi,rbp
   31a8b:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   31a8d:	seta   al
   31a90:	sbb    al,0x0
   31a92:	test   al,al
   31a94:	jne    31a30 <bar_set_params+0x50>
   31a96:	mov    BYTE PTR [rip+0x587bf],0x1        # 8a25c <opt+0x1dc>
   31a9d:	jmp    31a30 <bar_set_params+0x50>
   31a9f:	nop
   31aa0:	mov    rdi,QWORD PTR [rip+0x51a39]        # 834e0 <stderr@@GLIBC_2.2.5>
   31aa7:	call   be80 <fileno@plt>
   31aac:	mov    edi,eax
   31aae:	call   bfe0 <isatty@plt>
   31ab3:	test   eax,eax
   31ab5:	jne    31a5f <bar_set_params+0x7f>
   31ab7:	mov    eax,DWORD PTR [rip+0x5811f]        # 89bdc <current_impl_locked>
   31abd:	test   eax,eax
   31abf:	jne    31a5f <bar_set_params+0x7f>
   31ac1:	add    rsp,0x8
   31ac5:	lea    rdi,[rip+0x36f2e]        # 689fa <primes.6089+0x291a>
   31acc:	pop    rbx
   31acd:	pop    rbp
   31ace:	jmp    31870 <set_progress_implementation>
   31ad3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   31ade:	xchg   ax,ax

0000000000031ae0 <progress_schedule_redirect>:
   31ae0:	endbr64 
   31ae4:	mov    DWORD PTR [rip+0x580ea],0x1        # 89bd8 <output_redirected>
   31aee:	ret    
   31aef:	nop

0000000000031af0 <progress_create>:
   31af0:	endbr64 
   31af4:	push   rbp
   31af5:	mov    rbp,rdi
   31af8:	sub    rsp,0x10
   31afc:	mov    ecx,DWORD PTR [rip+0x580d6]        # 89bd8 <output_redirected>
   31b02:	test   ecx,ecx
   31b04:	je     31b1a <progress_create+0x2a>
   31b06:	mov    eax,DWORD PTR [rip+0x580d0]        # 89bdc <current_impl_locked>
   31b0c:	test   eax,eax
   31b0e:	je     31b30 <progress_create+0x40>
   31b10:	mov    DWORD PTR [rip+0x580be],0x0        # 89bd8 <output_redirected>
   31b1a:	mov    rax,QWORD PTR [rip+0x580bf]        # 89be0 <current_impl>
   31b21:	mov    rdi,rbp
   31b24:	mov    rax,QWORD PTR [rax+0x10]
   31b28:	add    rsp,0x10
   31b2c:	pop    rbp
   31b2d:	jmp    rax
   31b2f:	nop
   31b30:	lea    rdi,[rip+0x36ec3]        # 689fa <primes.6089+0x291a>
   31b37:	mov    QWORD PTR [rsp+0x8],rdx
   31b3c:	mov    QWORD PTR [rsp],rsi
   31b40:	call   31870 <set_progress_implementation>
   31b45:	mov    rdx,QWORD PTR [rsp+0x8]
   31b4a:	mov    rsi,QWORD PTR [rsp]
   31b4e:	jmp    31b10 <progress_create+0x20>

0000000000031b50 <progress_interactive_p>:
   31b50:	endbr64 
   31b54:	mov    rax,QWORD PTR [rip+0x58085]        # 89be0 <current_impl>
   31b5b:	movzx  eax,BYTE PTR [rax+0x8]
   31b5f:	ret    

0000000000031b60 <progress_update>:
   31b60:	endbr64 
   31b64:	comisd xmm0,QWORD PTR [rip+0x3b224]        # 6cd90 <eta_str.8886+0x18>
   31b6c:	push   rbp
   31b6d:	mov    rbp,rdi
   31b70:	jae    31bb0 <progress_update+0x50>
   31b72:	pxor   xmm1,xmm1
   31b76:	maxsd  xmm1,xmm0
   31b7a:	movapd xmm0,xmm1
   31b7e:	test   rsi,rsi
   31b81:	mov    eax,0x0
   31b86:	mov    rdi,rbp
   31b89:	cmovs  rsi,rax
   31b8d:	mov    rax,QWORD PTR [rip+0x5804c]        # 89be0 <current_impl>
   31b94:	call   QWORD PTR [rax+0x18]
   31b97:	mov    rax,QWORD PTR [rip+0x58042]        # 89be0 <current_impl>
   31b9e:	mov    rdi,rbp
   31ba1:	pop    rbp
   31ba2:	mov    rax,QWORD PTR [rax+0x20]
   31ba6:	jmp    rax
   31ba8:	nop    DWORD PTR [rax+rax*1+0x0]
   31bb0:	movsd  xmm0,QWORD PTR [rip+0x3b1d0]        # 6cd88 <eta_str.8886+0x10>
   31bb8:	jmp    31b7e <progress_update+0x1e>
   31bba:	nop    WORD PTR [rax+rax*1+0x0]

0000000000031bc0 <progress_finish>:
   31bc0:	endbr64 
   31bc4:	comisd xmm0,QWORD PTR [rip+0x3b1c4]        # 6cd90 <eta_str.8886+0x18>
   31bcc:	jae    31be8 <progress_finish+0x28>
   31bce:	pxor   xmm1,xmm1
   31bd2:	mov    rax,QWORD PTR [rip+0x58007]        # 89be0 <current_impl>
   31bd9:	maxsd  xmm1,xmm0
   31bdd:	movapd xmm0,xmm1
   31be1:	jmp    QWORD PTR [rax+0x28]
   31be4:	nop    DWORD PTR [rax+0x0]
   31be8:	mov    rax,QWORD PTR [rip+0x57ff1]        # 89be0 <current_impl>
   31bef:	movsd  xmm0,QWORD PTR [rip+0x3b191]        # 6cd88 <eta_str.8886+0x10>
   31bf7:	jmp    QWORD PTR [rax+0x28]
   31bfa:	nop    WORD PTR [rax+rax*1+0x0]

0000000000031c00 <ptimer_new>:
   31c00:	endbr64 
   31c04:	push   r13
   31c06:	mov    edi,0x1
   31c0b:	mov    esi,0x20
   31c10:	push   r12
   31c12:	push   rbp
   31c13:	sub    rsp,0x20
   31c17:	mov    rax,QWORD PTR fs:0x28
   31c20:	mov    QWORD PTR [rsp+0x18],rax
   31c25:	xor    eax,eax
   31c27:	call   4b9c0 <xcalloc>
   31c2c:	cmp    BYTE PTR [rip+0x57fb5],0x0        # 89be8 <init_done.7082>
   31c33:	mov    edi,DWORD PTR [rip+0x57fbf]        # 89bf8 <posix_clock_id>
   31c39:	mov    r12,rax
   31c3c:	je     31c80 <ptimer_new+0x80>
   31c3e:	mov    rsi,r12
   31c41:	call   bfb0 <clock_gettime@plt>
   31c46:	mov    QWORD PTR [r12+0x10],0x0
   31c4f:	mov    QWORD PTR [r12+0x18],0x0
   31c58:	mov    rax,QWORD PTR [rsp+0x18]
   31c5d:	xor    rax,QWORD PTR fs:0x28
   31c66:	jne    31d6b <ptimer_new+0x16b>
   31c6c:	add    rsp,0x20
   31c70:	mov    rax,r12
   31c73:	pop    rbp
   31c74:	pop    r12
   31c76:	pop    r13
   31c78:	ret    
   31c79:	nop    DWORD PTR [rax+0x0]
   31c80:	mov    edi,0x95
   31c85:	mov    BYTE PTR [rip+0x57f5c],0x1        # 89be8 <init_done.7082>
   31c8c:	mov    rbp,rsp
   31c8f:	call   c1b0 <sysconf@plt>
   31c94:	test   rax,rax
   31c97:	js     31d08 <ptimer_new+0x108>
   31c99:	mov    edi,0x1
   31c9e:	mov    rsi,rbp
   31ca1:	call   c630 <clock_getres@plt>
   31ca6:	mov    edi,0x1
   31cab:	test   eax,eax
   31cad:	js     31d08 <ptimer_new+0x108>
   31caf:	pxor   xmm1,xmm1
   31cb3:	pxor   xmm0,xmm0
   31cb7:	mov    DWORD PTR [rip+0x57f3b],edi        # 89bf8 <posix_clock_id>
   31cbd:	cvtsi2sd xmm1,QWORD PTR [rsp]
   31cc3:	cvtsi2sd xmm0,QWORD PTR [rsp+0x8]
   31cca:	divsd  xmm0,QWORD PTR [rip+0x3b13e]        # 6ce10 <eta_str.8886+0x98>
   31cd2:	addsd  xmm0,xmm1
   31cd6:	ucomisd xmm0,QWORD PTR [rip+0x2954a]        # 5b228 <_IO_stdin_used+0x228>
   31cde:	jp     31cf8 <ptimer_new+0xf8>
   31ce0:	jne    31cf8 <ptimer_new+0xf8>
   31ce2:	mov    rax,QWORD PTR [rip+0x3b11f]        # 6ce08 <eta_str.8886+0x90>
   31ce9:	mov    QWORD PTR [rip+0x57f00],rax        # 89bf0 <posix_clock_resolution>
   31cf0:	jmp    31c3e <ptimer_new+0x3e>
   31cf5:	nop    DWORD PTR [rax]
   31cf8:	movsd  QWORD PTR [rip+0x57ef0],xmm0        # 89bf0 <posix_clock_resolution>
   31d00:	jmp    31c3e <ptimer_new+0x3e>
   31d05:	nop    DWORD PTR [rax]
   31d08:	xor    edi,edi
   31d0a:	mov    rsi,rbp
   31d0d:	call   c630 <clock_getres@plt>
   31d12:	xor    edi,edi
   31d14:	test   eax,eax
   31d16:	jns    31caf <ptimer_new+0xaf>
   31d18:	call   c740 <__errno_location@plt>
   31d1d:	mov    edi,DWORD PTR [rax]
   31d1f:	call   c540 <strerror@plt>
   31d24:	mov    edx,0x5
   31d29:	lea    rsi,[rip+0x3b0a8]        # 6cdd8 <eta_str.8886+0x60>
   31d30:	xor    edi,edi
   31d32:	mov    r13,rax
   31d35:	call   c780 <dcgettext@plt>
   31d3a:	mov    edi,0x1
   31d3f:	mov    rdx,r13
   31d42:	mov    rsi,rax
   31d45:	xor    eax,eax
   31d47:	call   2e0a0 <logprintf>
   31d4c:	mov    rax,QWORD PTR [rip+0x3b0b5]        # 6ce08 <eta_str.8886+0x90>
   31d53:	xor    edi,edi
   31d55:	mov    DWORD PTR [rip+0x57e99],0x0        # 89bf8 <posix_clock_id>
   31d5f:	mov    QWORD PTR [rip+0x57e8a],rax        # 89bf0 <posix_clock_resolution>
   31d66:	jmp    31c3e <ptimer_new+0x3e>
   31d6b:	call   c7b0 <__stack_chk_fail@plt>

0000000000031d70 <ptimer_destroy>:
   31d70:	endbr64 
   31d74:	jmp    4bdc0 <rpl_free>
   31d79:	nop    DWORD PTR [rax+0x0]

0000000000031d80 <ptimer_reset>:
   31d80:	endbr64 
   31d84:	push   rbx
   31d85:	mov    rsi,rdi
   31d88:	mov    rbx,rdi
   31d8b:	mov    edi,DWORD PTR [rip+0x57e67]        # 89bf8 <posix_clock_id>
   31d91:	call   bfb0 <clock_gettime@plt>
   31d96:	mov    QWORD PTR [rbx+0x10],0x0
   31d9e:	mov    QWORD PTR [rbx+0x18],0x0
   31da6:	pop    rbx
   31da7:	ret    
   31da8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000031db0 <ptimer_measure>:
   31db0:	endbr64 
   31db4:	push   rbx
   31db5:	mov    rbx,rdi
   31db8:	sub    rsp,0x20
   31dbc:	mov    edi,DWORD PTR [rip+0x57e36]        # 89bf8 <posix_clock_id>
   31dc2:	mov    rax,QWORD PTR fs:0x28
   31dcb:	mov    QWORD PTR [rsp+0x18],rax
   31dd0:	xor    eax,eax
   31dd2:	mov    rsi,rsp
   31dd5:	call   bfb0 <clock_gettime@plt>
   31dda:	mov    rax,QWORD PTR [rsp+0x8]
   31ddf:	pxor   xmm0,xmm0
   31de3:	sub    rax,QWORD PTR [rbx+0x8]
   31de7:	cvtsi2sd xmm0,rax
   31dec:	pxor   xmm1,xmm1
   31df0:	mov    rax,QWORD PTR [rsp]
   31df4:	sub    rax,QWORD PTR [rbx]
   31df7:	cvtsi2sd xmm1,rax
   31dfc:	divsd  xmm0,QWORD PTR [rip+0x3b00c]        # 6ce10 <eta_str.8886+0x98>
   31e04:	addsd  xmm0,xmm1
   31e08:	addsd  xmm0,QWORD PTR [rbx+0x18]
   31e0d:	movsd  xmm1,QWORD PTR [rbx+0x10]
   31e12:	comisd xmm1,xmm0
   31e16:	jbe    31e29 <ptimer_measure+0x79>
   31e18:	movdqa xmm2,XMMWORD PTR [rsp]
   31e1d:	movsd  QWORD PTR [rbx+0x18],xmm1
   31e22:	movapd xmm0,xmm1
   31e26:	movups XMMWORD PTR [rbx],xmm2
   31e29:	movsd  QWORD PTR [rbx+0x10],xmm0
   31e2e:	mov    rax,QWORD PTR [rsp+0x18]
   31e33:	xor    rax,QWORD PTR fs:0x28
   31e3c:	jne    31e44 <ptimer_measure+0x94>
   31e3e:	add    rsp,0x20
   31e42:	pop    rbx
   31e43:	ret    
   31e44:	call   c7b0 <__stack_chk_fail@plt>
   31e49:	nop    DWORD PTR [rax+0x0]

0000000000031e50 <ptimer_read>:
   31e50:	endbr64 
   31e54:	movsd  xmm0,QWORD PTR [rdi+0x10]
   31e59:	ret    
   31e5a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000031e60 <ptimer_resolution>:
   31e60:	endbr64 
   31e64:	movsd  xmm0,QWORD PTR [rip+0x57d84]        # 89bf0 <posix_clock_resolution>
   31e6c:	ret    
   31e6d:	nop    DWORD PTR [rax]

0000000000031e70 <url_dequeue>:
   31e70:	push   r12
   31e72:	push   rbp
   31e73:	push   rbx
   31e74:	mov    rbp,QWORD PTR [rdi]
   31e77:	test   rbp,rbp
   31e7a:	je     31ef0 <url_dequeue+0x80>
   31e7c:	mov    rax,QWORD PTR [rbp+0x28]
   31e80:	mov    rbx,rdi
   31e83:	mov    QWORD PTR [rdi],rax
   31e86:	test   rax,rax
   31e89:	je     31ee0 <url_dequeue+0x70>
   31e8b:	mov    rax,QWORD PTR [rbp+0x18]
   31e8f:	mov    QWORD PTR [rsi],rax
   31e92:	mov    rax,QWORD PTR [rbp+0x0]
   31e96:	mov    QWORD PTR [rdx],rax
   31e99:	mov    rax,QWORD PTR [rbp+0x8]
   31e9d:	mov    QWORD PTR [rcx],rax
   31ea0:	mov    eax,DWORD PTR [rbp+0x10]
   31ea3:	mov    DWORD PTR [r8],eax
   31ea6:	movzx  eax,BYTE PTR [rbp+0x14]
   31eaa:	mov    BYTE PTR [r9],al
   31ead:	mov    rax,QWORD PTR [rsp+0x20]
   31eb2:	movzx  edx,BYTE PTR [rbp+0x20]
   31eb6:	mov    BYTE PTR [rax],dl
   31eb8:	sub    DWORD PTR [rbx+0x10],0x1
   31ebc:	cmp    BYTE PTR [rip+0x583f8],0x0        # 8a2bb <opt+0x23b>
   31ec3:	jne    31f00 <url_dequeue+0x90>
   31ec5:	mov    rdi,rbp
   31ec8:	call   4bdc0 <rpl_free>
   31ecd:	pop    rbx
   31ece:	mov    eax,0x1
   31ed3:	pop    rbp
   31ed4:	pop    r12
   31ed6:	ret    
   31ed7:	nop    WORD PTR [rax+rax*1+0x0]
   31ee0:	mov    QWORD PTR [rdi+0x8],0x0
   31ee8:	jmp    31e8b <url_dequeue+0x1b>
   31eea:	nop    WORD PTR [rax+rax*1+0x0]
   31ef0:	pop    rbx
   31ef1:	xor    eax,eax
   31ef3:	pop    rbp
   31ef4:	pop    r12
   31ef6:	ret    
   31ef7:	nop    WORD PTR [rax+rax*1+0x0]
   31f00:	mov    rdx,QWORD PTR [rbp+0x0]
   31f04:	xor    edi,edi
   31f06:	mov    r12d,DWORD PTR [rbp+0x10]
   31f0a:	mov    esi,0x7
   31f0f:	call   4b180 <quotearg_n_style>
   31f14:	mov    edx,r12d
   31f17:	lea    rdi,[rip+0x3aefa]        # 6ce18 <eta_str.8886+0xa0>
   31f1e:	mov    rsi,rax
   31f21:	xor    eax,eax
   31f23:	call   2e250 <debug_logprintf>
   31f28:	cmp    BYTE PTR [rip+0x5838c],0x0        # 8a2bb <opt+0x23b>
   31f2f:	je     31ec5 <url_dequeue+0x55>
   31f31:	mov    edx,DWORD PTR [rbx+0x14]
   31f34:	mov    esi,DWORD PTR [rbx+0x10]
   31f37:	lea    rdi,[rip+0x3aef4]        # 6ce32 <eta_str.8886+0xba>
   31f3e:	xor    eax,eax
   31f40:	call   2e250 <debug_logprintf>
   31f45:	jmp    31ec5 <url_dequeue+0x55>
   31f4a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000031f50 <url_enqueue>:
   31f50:	push   r15
   31f52:	mov    r15d,r9d
   31f55:	push   r14
   31f57:	mov    r14d,r8d
   31f5a:	push   r13
   31f5c:	mov    r13,rsi
   31f5f:	push   r12
   31f61:	mov    r12,rdx
   31f64:	push   rbp
   31f65:	mov    rbp,rdi
   31f68:	mov    edi,0x30
   31f6d:	push   rbx
   31f6e:	sub    rsp,0x18
   31f72:	mov    edx,DWORD PTR [rsp+0x50]
   31f76:	mov    QWORD PTR [rsp+0x8],rcx
   31f7b:	mov    DWORD PTR [rsp+0x4],edx
   31f7f:	call   4b850 <xmalloc>
   31f84:	mov    rcx,QWORD PTR [rsp+0x8]
   31f89:	mov    edx,DWORD PTR [rsp+0x4]
   31f8d:	mov    QWORD PTR [rax+0x18],r13
   31f91:	mov    rbx,rax
   31f94:	mov    QWORD PTR [rax],r12
   31f97:	mov    QWORD PTR [rax+0x8],rcx
   31f9b:	mov    DWORD PTR [rax+0x10],r14d
   31f9f:	mov    BYTE PTR [rax+0x14],r15b
   31fa3:	mov    BYTE PTR [rax+0x20],dl
   31fa6:	mov    QWORD PTR [rax+0x28],0x0
   31fae:	mov    eax,DWORD PTR [rbp+0x10]
   31fb1:	add    eax,0x1
   31fb4:	mov    DWORD PTR [rbp+0x10],eax
   31fb7:	cmp    eax,DWORD PTR [rbp+0x14]
   31fba:	jle    31fbf <url_enqueue+0x6f>
   31fbc:	mov    DWORD PTR [rbp+0x14],eax
   31fbf:	cmp    BYTE PTR [rip+0x582f5],0x0        # 8a2bb <opt+0x23b>
   31fc6:	jne    32008 <url_enqueue+0xb8>
   31fc8:	mov    rax,QWORD PTR [rbp+0x8]
   31fcc:	test   rax,rax
   31fcf:	je     31fd5 <url_enqueue+0x85>
   31fd1:	mov    QWORD PTR [rax+0x28],rbx
   31fd5:	cmp    QWORD PTR [rbp+0x0],0x0
   31fda:	mov    QWORD PTR [rbp+0x8],rbx
   31fde:	je     31ff0 <url_enqueue+0xa0>
   31fe0:	add    rsp,0x18
   31fe4:	pop    rbx
   31fe5:	pop    rbp
   31fe6:	pop    r12
   31fe8:	pop    r13
   31fea:	pop    r14
   31fec:	pop    r15
   31fee:	ret    
   31fef:	nop
   31ff0:	mov    QWORD PTR [rbp+0x0],rbx
   31ff4:	add    rsp,0x18
   31ff8:	pop    rbx
   31ff9:	pop    rbp
   31ffa:	pop    r12
   31ffc:	pop    r13
   31ffe:	pop    r14
   32000:	pop    r15
   32002:	ret    
   32003:	nop    DWORD PTR [rax+rax*1+0x0]
   32008:	xor    edi,edi
   3200a:	mov    rdx,r12
   3200d:	mov    esi,0x7
   32012:	call   4b180 <quotearg_n_style>
   32017:	mov    edx,r14d
   3201a:	lea    rdi,[rip+0x3ae34]        # 6ce55 <eta_str.8886+0xdd>
   32021:	mov    rsi,rax
   32024:	xor    eax,eax
   32026:	call   2e250 <debug_logprintf>
   3202b:	cmp    BYTE PTR [rip+0x58289],0x0        # 8a2bb <opt+0x23b>
   32032:	je     31fc8 <url_enqueue+0x78>
   32034:	mov    edx,DWORD PTR [rbp+0x14]
   32037:	mov    esi,DWORD PTR [rbp+0x10]
   3203a:	xor    eax,eax
   3203c:	lea    rdi,[rip+0x3adef]        # 6ce32 <eta_str.8886+0xba>
   32043:	call   2e250 <debug_logprintf>
   32048:	test   r13,r13
   3204b:	je     31fc8 <url_enqueue+0x78>
   32051:	cmp    BYTE PTR [rip+0x58263],0x0        # 8a2bb <opt+0x23b>
   32058:	je     31fc8 <url_enqueue+0x78>
   3205e:	mov    rsi,QWORD PTR [r13+0x0]
   32062:	lea    r13,[rip+0x3ade7]        # 6ce50 <eta_str.8886+0xd8>
   32069:	test   rsi,rsi
   3206c:	je     3207b <url_enqueue+0x12b>
   3206e:	mov    edi,0x1
   32073:	call   4b590 <quote_n>
   32078:	mov    r13,rax
   3207b:	mov    rsi,r12
   3207e:	xor    edi,edi
   32080:	call   4b590 <quote_n>
   32085:	mov    rdx,r13
   32088:	lea    rdi,[rip+0x3ade0]        # 6ce6f <eta_str.8886+0xf7>
   3208f:	mov    rsi,rax
   32092:	xor    eax,eax
   32094:	call   2e250 <debug_logprintf>
   32099:	jmp    31fc8 <url_enqueue+0x78>
   3209e:	xchg   ax,ax

00000000000320a0 <blacklist_add>:
   320a0:	push   r12
   320a2:	mov    r12,rdi
   320a5:	mov    rdi,rsi
   320a8:	push   rbp
   320a9:	sub    rsp,0x8
   320ad:	call   4ba50 <xstrdup>
   320b2:	mov    rbp,rax
   320b5:	mov    rdi,rax
   320b8:	call   370f0 <url_unescape>
   320bd:	mov    rdi,r12
   320c0:	mov    rsi,rbp
   320c3:	call   3cc20 <string_set_add>
   320c8:	add    rsp,0x8
   320cc:	mov    rdi,rbp
   320cf:	pop    rbp
   320d0:	pop    r12
   320d2:	jmp    4bdc0 <rpl_free>
   320d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000320e0 <download_child>:
   320e0:	push   r15
   320e2:	push   r14
   320e4:	push   r13
   320e6:	push   r12
   320e8:	push   rbp
   320e9:	mov    rbp,r8
   320ec:	push   rbx
   320ed:	mov    rbx,rdi
   320f0:	sub    rsp,0x38
   320f4:	mov    r12,QWORD PTR [rdi]
   320f7:	mov    QWORD PTR [rsp],rsi
   320fb:	mov    DWORD PTR [rsp+0x14],edx
   320ff:	mov    r15,QWORD PTR [r12]
   32103:	mov    QWORD PTR [rsp+0x8],rcx
   32108:	mov    QWORD PTR [rsp+0x18],r9
   3210d:	mov    rax,QWORD PTR fs:0x28
   32116:	mov    QWORD PTR [rsp+0x28],rax
   3211b:	xor    eax,eax
   3211d:	cmp    BYTE PTR [rip+0x58197],0x0        # 8a2bb <opt+0x23b>
   32124:	jne    324b8 <download_child+0x3d8>
   3212a:	mov    rdi,r15
   3212d:	call   4ba50 <xstrdup>
   32132:	mov    r13,rax
   32135:	mov    rdi,rax
   32138:	call   370f0 <url_unescape>
   3213d:	mov    rdi,rbp
   32140:	mov    rsi,r13
   32143:	call   3cc70 <string_set_contains>
   32148:	mov    rdi,r13
   3214b:	mov    r14d,eax
   3214e:	call   4bdc0 <rpl_free>
   32153:	test   r14d,r14d
   32156:	jne    322d0 <download_child+0x1f0>
   3215c:	cmp    BYTE PTR [rip+0x581f5],0x0        # 8a358 <opt+0x2d8>
   32163:	mov    edi,DWORD PTR [r12+0x8]
   32168:	je     321b0 <download_child+0xd0>
   3216a:	cmp    edi,0x1
   3216d:	je     321b0 <download_child+0xd0>
   3216f:	cmp    BYTE PTR [rip+0x58145],0x0        # 8a2bb <opt+0x23b>
   32176:	mov    r13d,0x2
   3217c:	jne    325c0 <download_child+0x4e0>
   32182:	nop    WORD PTR [rax+rax*1+0x0]
   32188:	mov    rax,QWORD PTR [rsp+0x28]
   3218d:	xor    rax,QWORD PTR fs:0x28
   32196:	jne    326e1 <download_child+0x601>
   3219c:	add    rsp,0x38
   321a0:	mov    eax,r13d
   321a3:	pop    rbx
   321a4:	pop    rbp
   321a5:	pop    r12
   321a7:	pop    r13
   321a9:	pop    r14
   321ab:	pop    r15
   321ad:	ret    
   321ae:	xchg   ax,ax
   321b0:	xor    esi,esi
   321b2:	call   39240 <schemes_are_similar_p>
   321b7:	mov    r13d,eax
   321ba:	test   al,al
   321bc:	jne    32300 <download_child+0x220>
   321c2:	mov    eax,DWORD PTR [r12+0x8]
   321c7:	sub    eax,0x2
   321ca:	cmp    eax,0x1
   321cd:	ja     32340 <download_child+0x260>
   321d3:	cmp    BYTE PTR [rip+0x57f9e],0x0        # 8a178 <opt+0xf8>
   321da:	je     32340 <download_child+0x260>
   321e0:	mov    rdi,r12
   321e3:	call   1edb0 <accept_domain>
   321e8:	test   al,al
   321ea:	je     32370 <download_child+0x290>
   321f0:	cmp    BYTE PTR [rip+0x57eaa],0x0        # 8a0a1 <opt+0x21>
   321f7:	jne    324e8 <download_child+0x408>
   321fd:	cmp    QWORD PTR [rip+0x57f03],0x0        # 8a108 <opt+0x88>
   32205:	je     324d0 <download_child+0x3f0>
   3220b:	mov    rdi,QWORD PTR [r12+0x40]
   32210:	call   3c4e0 <accdir>
   32215:	test   al,al
   32217:	je     32590 <download_child+0x4b0>
   3221d:	mov    rdi,r15
   32220:	call   3c480 <accept_url>
   32225:	test   al,al
   32227:	je     325d8 <download_child+0x4f8>
   3222d:	mov    rdi,QWORD PTR [r12+0x48]
   32232:	cmp    BYTE PTR [rdi],0x0
   32235:	je     32398 <download_child+0x2b8>
   3223b:	call   3c790 <has_html_suffix_p>
   32240:	test   al,al
   32242:	je     3226d <download_child+0x18d>
   32244:	mov    eax,DWORD PTR [rip+0x57e5a]        # 8a0a4 <opt+0x24>
   3224a:	cmp    eax,0xffffffff
   3224d:	je     32398 <download_child+0x2b8>
   32253:	sub    eax,0x1
   32256:	cmp    eax,DWORD PTR [rsp+0x14]
   3225a:	jg     32398 <download_child+0x2b8>
   32260:	cmp    BYTE PTR [rip+0x58093],0x0        # 8a2fa <opt+0x27a>
   32267:	jne    32398 <download_child+0x2b8>
   3226d:	mov    rdi,QWORD PTR [r12+0x48]
   32272:	call   3c670 <acceptable>
   32277:	test   al,al
   32279:	jne    32398 <download_child+0x2b8>
   3227f:	cmp    BYTE PTR [rip+0x58035],0x0        # 8a2bb <opt+0x23b>
   32286:	mov    r13d,0x9
   3228c:	je     32188 <download_child+0xa8>
   32292:	mov    rdx,QWORD PTR [r12+0x48]
   32297:	mov    rsi,r15
   3229a:	lea    rdi,[rip+0x3ae6f]        # 6d110 <eta_str.8886+0x398>
   322a1:	call   2e250 <debug_logprintf>
   322a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   322b0:	cmp    BYTE PTR [rip+0x58004],0x0        # 8a2bb <opt+0x23b>
   322b7:	je     32188 <download_child+0xa8>
   322bd:	lea    rdi,[rip+0x3ac15]        # 6ced9 <eta_str.8886+0x161>
   322c4:	xor    eax,eax
   322c6:	call   2e250 <debug_logprintf>
   322cb:	jmp    32188 <download_child+0xa8>
   322d0:	cmp    BYTE PTR [rip+0x57e11],0x0        # 8a0e8 <opt+0x68>
   322d7:	jne    32488 <download_child+0x3a8>
   322dd:	cmp    BYTE PTR [rip+0x57fd7],0x0        # 8a2bb <opt+0x23b>
   322e4:	mov    r13d,0x1
   322ea:	je     32188 <download_child+0xa8>
   322f0:	lea    rdi,[rip+0x3ab93]        # 6ce8a <eta_str.8886+0x112>
   322f7:	xor    eax,eax
   322f9:	call   2e250 <debug_logprintf>
   322fe:	jmp    322b0 <download_child+0x1d0>
   32300:	cmp    BYTE PTR [rip+0x57d99],0x0        # 8a0a0 <opt+0x20>
   32307:	je     321e0 <download_child+0x100>
   3230d:	test   BYTE PTR [rbx+0x10],0x2
   32311:	jne    321e0 <download_child+0x100>
   32317:	cmp    BYTE PTR [rip+0x57f9d],0x0        # 8a2bb <opt+0x23b>
   3231e:	mov    r13d,0x4
   32324:	je     32188 <download_child+0xa8>
   3232a:	lea    rdi,[rip+0x3ad4f]        # 6d080 <eta_str.8886+0x308>
   32331:	xor    eax,eax
   32333:	call   2e250 <debug_logprintf>
   32338:	jmp    322b0 <download_child+0x1d0>
   3233d:	nop    DWORD PTR [rax]
   32340:	cmp    BYTE PTR [rip+0x57f74],0x0        # 8a2bb <opt+0x23b>
   32347:	mov    r13d,0x3
   3234d:	je     32188 <download_child+0xa8>
   32353:	lea    rdi,[rip+0x3acfe]        # 6d058 <eta_str.8886+0x2e0>
   3235a:	xor    eax,eax
   3235c:	call   2e250 <debug_logprintf>
   32361:	jmp    322b0 <download_child+0x1d0>
   32366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32370:	cmp    BYTE PTR [rip+0x57f44],0x0        # 8a2bb <opt+0x23b>
   32377:	mov    r13d,0x5
   3237d:	je     32188 <download_child+0xa8>
   32383:	lea    rdi,[rip+0x3ab1c]        # 6cea6 <eta_str.8886+0x12e>
   3238a:	call   2e250 <debug_logprintf>
   3238f:	jmp    322b0 <download_child+0x1d0>
   32394:	nop    DWORD PTR [rax+0x0]
   32398:	mov    rbx,QWORD PTR [rsp]
   3239c:	mov    edi,DWORD PTR [r12+0x8]
   323a1:	mov    esi,DWORD PTR [rbx+0x8]
   323a4:	call   39240 <schemes_are_similar_p>
   323a9:	test   al,al
   323ab:	je     32400 <download_child+0x320>
   323ad:	cmp    BYTE PTR [rip+0x57ce7],0x0        # 8a09b <opt+0x1b>
   323b4:	jne    32400 <download_child+0x320>
   323b6:	mov    r14,QWORD PTR [r12+0x10]
   323bb:	mov    rbx,QWORD PTR [rbx+0x10]
   323bf:	mov    rsi,r14
   323c2:	mov    rdi,rbx
   323c5:	call   be10 <strcasecmp@plt>
   323ca:	test   eax,eax
   323cc:	je     32400 <download_child+0x320>
   323ce:	cmp    BYTE PTR [rip+0x57ee6],0x0        # 8a2bb <opt+0x23b>
   323d5:	mov    r13d,0xa
   323db:	je     32188 <download_child+0xa8>
   323e1:	mov    rdx,rbx
   323e4:	mov    rsi,r14
   323e7:	lea    rdi,[rip+0x3ad4a]        # 6d138 <eta_str.8886+0x3c0>
   323ee:	xor    eax,eax
   323f0:	call   2e250 <debug_logprintf>
   323f5:	jmp    322b0 <download_child+0x1d0>
   323fa:	nop    WORD PTR [rax+rax*1+0x0]
   32400:	cmp    BYTE PTR [rip+0x57e99],0x0        # 8a2a0 <opt+0x220>
   32407:	je     32460 <download_child+0x380>
   32409:	test   r13b,r13b
   3240c:	je     32460 <download_child+0x380>
   3240e:	mov    esi,DWORD PTR [r12+0x18]
   32413:	mov    rdi,QWORD PTR [r12+0x10]
   32418:	call   340f0 <res_get_specs>
   3241d:	mov    r13,rax
   32420:	test   rax,rax
   32423:	je     3263a <download_child+0x55a>
   32429:	mov    rsi,QWORD PTR [r12+0x20]
   3242e:	mov    rdi,r13
   32431:	call   33c90 <res_match_path>
   32436:	test   al,al
   32438:	jne    32460 <download_child+0x380>
   3243a:	cmp    BYTE PTR [rip+0x57e7a],0x0        # 8a2bb <opt+0x23b>
   32441:	jne    326e6 <download_child+0x606>
   32447:	mov    rsi,r15
   3244a:	mov    rdi,rbp
   3244d:	mov    r13d,0xb
   32453:	call   320a0 <blacklist_add>
   32458:	jmp    322b0 <download_child+0x1d0>
   3245d:	nop    DWORD PTR [rax]
   32460:	xor    r13d,r13d
   32463:	cmp    BYTE PTR [rip+0x57e51],0x0        # 8a2bb <opt+0x23b>
   3246a:	je     32188 <download_child+0xa8>
   32470:	lea    rdi,[rip+0x3aa4d]        # 6cec4 <eta_str.8886+0x14c>
   32477:	xor    eax,eax
   32479:	call   2e250 <debug_logprintf>
   3247e:	jmp    32188 <download_child+0xa8>
   32483:	nop    DWORD PTR [rax+rax*1+0x0]
   32488:	mov    rdi,QWORD PTR [rsp]
   3248c:	mov    esi,0x1
   32491:	call   38230 <url_string>
   32496:	cmp    BYTE PTR [rip+0x57e1e],0x0        # 8a2bb <opt+0x23b>
   3249d:	mov    rbp,rax
   324a0:	jne    32600 <download_child+0x520>
   324a6:	mov    rdi,rbp
   324a9:	call   4bdc0 <rpl_free>
   324ae:	jmp    322dd <download_child+0x1fd>
   324b3:	nop    DWORD PTR [rax+rax*1+0x0]
   324b8:	mov    rsi,r15
   324bb:	lea    rdi,[rip+0x3ab26]        # 6cfe8 <eta_str.8886+0x270>
   324c2:	call   2e250 <debug_logprintf>
   324c7:	jmp    3212a <download_child+0x4a>
   324cc:	nop    DWORD PTR [rax+0x0]
   324d0:	cmp    QWORD PTR [rip+0x57c28],0x0        # 8a100 <opt+0x80>
   324d8:	jne    3220b <download_child+0x12b>
   324de:	jmp    3221d <download_child+0x13d>
   324e3:	nop    DWORD PTR [rax+rax*1+0x0]
   324e8:	mov    r14,QWORD PTR [rsp+0x8]
   324ed:	mov    edi,DWORD PTR [r12+0x8]
   324f2:	mov    esi,DWORD PTR [r14+0x8]
   324f6:	call   39240 <schemes_are_similar_p>
   324fb:	test   al,al
   324fd:	je     321fd <download_child+0x11d>
   32503:	mov    rsi,QWORD PTR [r14+0x10]
   32507:	mov    rdi,QWORD PTR [r12+0x10]
   3250c:	call   be10 <strcasecmp@plt>
   32511:	test   eax,eax
   32513:	jne    321fd <download_child+0x11d>
   32519:	mov    eax,DWORD PTR [r14+0x8]
   3251d:	cmp    DWORD PTR [r12+0x8],eax
   32522:	je     32622 <download_child+0x542>
   32528:	cmp    BYTE PTR [rip+0x57dcb],0x0        # 8a2fa <opt+0x27a>
   3252f:	je     3253b <download_child+0x45b>
   32531:	test   BYTE PTR [rbx+0x10],0x10
   32535:	jne    321fd <download_child+0x11d>
   3253b:	mov    rax,QWORD PTR [rsp+0x8]
   32540:	mov    rsi,QWORD PTR [r12+0x40]
   32545:	mov    rdi,QWORD PTR [rax+0x40]
   32549:	call   3c4c0 <subdir_p>
   3254e:	test   al,al
   32550:	jne    321fd <download_child+0x11d>
   32556:	cmp    BYTE PTR [rip+0x57d5e],0x0        # 8a2bb <opt+0x23b>
   3255d:	mov    r13d,0x6
   32563:	je     32188 <download_child+0xa8>
   32569:	mov    rax,QWORD PTR [rsp+0x8]
   3256e:	mov    rsi,QWORD PTR [r12+0x40]
   32573:	lea    rdi,[rip+0x3ab36]        # 6d0b0 <eta_str.8886+0x338>
   3257a:	mov    rdx,QWORD PTR [rax+0x40]
   3257e:	xor    eax,eax
   32580:	call   2e250 <debug_logprintf>
   32585:	jmp    322b0 <download_child+0x1d0>
   3258a:	nop    WORD PTR [rax+rax*1+0x0]
   32590:	cmp    BYTE PTR [rip+0x57d24],0x0        # 8a2bb <opt+0x23b>
   32597:	mov    r13d,0x7
   3259d:	je     32188 <download_child+0xa8>
   325a3:	mov    rdx,QWORD PTR [r12+0x40]
   325a8:	mov    rsi,r15
   325ab:	lea    rdi,[rip+0x3ab36]        # 6d0e8 <eta_str.8886+0x370>
   325b2:	call   2e250 <debug_logprintf>
   325b7:	jmp    322b0 <download_child+0x1d0>
   325bc:	nop    DWORD PTR [rax+0x0]
   325c0:	lea    rdi,[rip+0x3aa71]        # 6d038 <eta_str.8886+0x2c0>
   325c7:	xor    eax,eax
   325c9:	call   2e250 <debug_logprintf>
   325ce:	jmp    322b0 <download_child+0x1d0>
   325d3:	nop    DWORD PTR [rax+rax*1+0x0]
   325d8:	cmp    BYTE PTR [rip+0x57cdc],0x0        # 8a2bb <opt+0x23b>
   325df:	mov    r13d,0x8
   325e5:	je     32188 <download_child+0xa8>
   325eb:	mov    rsi,r15
   325ee:	lea    rdi,[rip+0x29e8b]        # 5c480 <_IO_stdin_used+0x1480>
   325f5:	call   2e250 <debug_logprintf>
   325fa:	jmp    322b0 <download_child+0x1d0>
   325ff:	nop
   32600:	mov    rax,QWORD PTR [rsp]
   32604:	mov    rdi,QWORD PTR [rax]
   32607:	call   4b5b0 <quote>
   3260c:	lea    rdi,[rip+0x3a9fd]        # 6d010 <eta_str.8886+0x298>
   32613:	mov    rsi,rax
   32616:	xor    eax,eax
   32618:	call   2e250 <debug_logprintf>
   3261d:	jmp    324a6 <download_child+0x3c6>
   32622:	mov    rax,QWORD PTR [rsp+0x8]
   32627:	mov    eax,DWORD PTR [rax+0x18]
   3262a:	cmp    DWORD PTR [r12+0x18],eax
   3262f:	jne    321fd <download_child+0x11d>
   32635:	jmp    32528 <download_child+0x448>
   3263a:	mov    rdx,QWORD PTR [rsp+0x18]
   3263f:	lea    rsi,[rsp+0x20]
   32644:	mov    rdi,r15
   32647:	call   341b0 <res_retrieve_file>
   3264c:	test   al,al
   3264e:	je     326ce <download_child+0x5ee>
   32650:	mov    rdi,QWORD PTR [rsp+0x20]
   32655:	call   33c10 <res_parse_from_file>
   3265a:	cmp    BYTE PTR [rip+0x57c97],0x0        # 8a2f8 <opt+0x278>
   32661:	mov    r13,rax
   32664:	jne    3266f <download_child+0x58f>
   32666:	cmp    BYTE PTR [rip+0x57a7b],0x0        # 8a0e8 <opt+0x68>
   3266d:	je     326a4 <download_child+0x5c4>
   3266f:	xor    edi,edi
   32671:	mov    r14,QWORD PTR [rsp+0x20]
   32676:	mov    edx,0x5
   3267b:	lea    rsi,[rip+0x29499]        # 5bb1b <_IO_stdin_used+0xb1b>
   32682:	call   c780 <dcgettext@plt>
   32687:	xor    edi,edi
   32689:	mov    rsi,rax
   3268c:	mov    rdx,r14
   3268f:	xor    eax,eax
   32691:	call   2e0a0 <logprintf>
   32696:	mov    rdi,QWORD PTR [rsp+0x20]
   3269b:	call   c120 <unlink@plt>
   326a0:	test   eax,eax
   326a2:	jne    326fa <download_child+0x61a>
   326a4:	mov    rdi,QWORD PTR [rsp+0x20]
   326a9:	call   4bdc0 <rpl_free>
   326ae:	mov    QWORD PTR [rsp+0x20],0x0
   326b7:	mov    esi,DWORD PTR [r12+0x18]
   326bc:	mov    rdi,QWORD PTR [r12+0x10]
   326c1:	mov    rdx,r13
   326c4:	call   33f30 <res_register_specs>
   326c9:	jmp    32429 <download_child+0x349>
   326ce:	xor    esi,esi
   326d0:	lea    rdi,[rip+0x3bd40]        # 6e417 <urlchr_table+0x877>
   326d7:	call   336b0 <res_parse>
   326dc:	mov    r13,rax
   326df:	jmp    326b7 <download_child+0x5d7>
   326e1:	call   c7b0 <__stack_chk_fail@plt>
   326e6:	mov    rsi,r15
   326e9:	lea    rdi,[rip+0x3aa88]        # 6d178 <eta_str.8886+0x400>
   326f0:	call   2e250 <debug_logprintf>
   326f5:	jmp    32447 <download_child+0x367>
   326fa:	call   c740 <__errno_location@plt>
   326ff:	mov    edi,DWORD PTR [rax]
   32701:	call   c540 <strerror@plt>
   32706:	lea    rsi,[rip+0x2941c]        # 5bb29 <_IO_stdin_used+0xb29>
   3270d:	mov    edi,0x1
   32712:	mov    rdx,rax
   32715:	xor    eax,eax
   32717:	call   2e0a0 <logprintf>
   3271c:	jmp    326a4 <download_child+0x5c4>
   3271e:	xchg   ax,ax

0000000000032720 <write_reject_log_url.part.0>:
   32720:	push   r12
   32722:	mov    r12,rdi
   32725:	push   rbp
   32726:	push   rbx
   32727:	mov    rdi,QWORD PTR [rsi]
   3272a:	mov    rbx,rsi
   3272d:	call   37110 <url_escape>
   32732:	lea    r8,[rip+0x3a7e1]        # 6cf1a <eta_str.8886+0x1a2>
   32739:	mov    rbp,rax
   3273c:	mov    eax,DWORD PTR [rbx+0x8]
   3273f:	cmp    eax,0x2
   32742:	je     3275a <write_reject_log_url.part.0+0x3a>
   32744:	ja     327c0 <write_reject_log_url.part.0+0xa0>
   32746:	test   eax,eax
   32748:	lea    r8,[rip+0x3a7b2]        # 6cf01 <eta_str.8886+0x189>
   3274f:	lea    rax,[rip+0x3a7b8]        # 6cf0e <eta_str.8886+0x196>
   32756:	cmove  r8,rax
   3275a:	mov    rcx,QWORD PTR [rbx+0x38]
   3275e:	mov    rdx,QWORD PTR [rbx+0x30]
   32762:	mov    rdi,r12
   32765:	lea    rsi,[rip+0x3bcab]        # 6e417 <urlchr_table+0x877>
   3276c:	mov    rax,QWORD PTR [rbx+0x28]
   32770:	mov    r9,QWORD PTR [rbx+0x10]
   32774:	test   rcx,rcx
   32777:	cmove  rcx,rsi
   3277b:	test   rdx,rdx
   3277e:	cmove  rdx,rsi
   32782:	test   rax,rax
   32785:	cmove  rax,rsi
   32789:	sub    rsp,0x8
   3278d:	mov    esi,0x1
   32792:	push   rcx
   32793:	mov    rcx,rbp
   32796:	push   rdx
   32797:	lea    rdx,[rip+0x3a793]        # 6cf31 <eta_str.8886+0x1b9>
   3279e:	push   rax
   3279f:	mov    eax,DWORD PTR [rbx+0x18]
   327a2:	push   QWORD PTR [rbx+0x20]
   327a5:	push   rax
   327a6:	xor    eax,eax
   327a8:	call   bfd0 <__fprintf_chk@plt>
   327ad:	add    rsp,0x30
   327b1:	mov    rdi,rbp
   327b4:	pop    rbx
   327b5:	pop    rbp
   327b6:	pop    r12
   327b8:	jmp    4bdc0 <rpl_free>
   327bd:	nop    DWORD PTR [rax]
   327c0:	cmp    eax,0x3
   327c3:	lea    r8,[rip+0x3a728]        # 6cef2 <eta_str.8886+0x17a>
   327ca:	lea    rax,[rip+0x3a754]        # 6cf25 <eta_str.8886+0x1ad>
   327d1:	cmove  r8,rax
   327d5:	jmp    3275a <write_reject_log_url.part.0+0x3a>
   327d7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000327e0 <write_reject_log_reason>:
   327e0:	test   rdi,rdi
   327e3:	je     328e0 <write_reject_log_reason+0x100>
   327e9:	push   r13
   327eb:	mov    r13,rdx
   327ee:	push   r12
   327f0:	mov    r12,rcx
   327f3:	push   rbp
   327f4:	mov    rbp,rdi
   327f7:	cmp    esi,0xb
   327fa:	ja     328e1 <write_reject_log_reason+0x101>
   32800:	lea    rdx,[rip+0x3abad]        # 6d3b4 <eta_str.8886+0x63c>
   32807:	mov    esi,esi
   32809:	movsxd rax,DWORD PTR [rdx+rsi*4]
   3280d:	add    rax,rdx
   32810:	notrack jmp rax
   32813:	lea    rcx,[rip+0x3a786]        # 6cfa0 <eta_str.8886+0x228>
   3281a:	lea    rdx,[rip+0x3a789]        # 6cfaa <eta_str.8886+0x232>
   32821:	mov    rdi,rbp
   32824:	mov    esi,0x1
   32829:	xor    eax,eax
   3282b:	call   bfd0 <__fprintf_chk@plt>
   32830:	mov    rsi,r13
   32833:	mov    rdi,rbp
   32836:	call   32720 <write_reject_log_url.part.0>
   3283b:	mov    rsi,rbp
   3283e:	mov    edi,0x9
   32843:	call   c2c0 <fputc@plt>
   32848:	mov    rsi,r12
   3284b:	mov    rdi,rbp
   3284e:	call   32720 <write_reject_log_url.part.0>
   32853:	mov    rsi,rbp
   32856:	mov    edi,0xa
   3285b:	pop    rbp
   3285c:	pop    r12
   3285e:	pop    r13
   32860:	jmp    c2c0 <fputc@plt>
   32865:	lea    rcx,[rip+0x3a6e5]        # 6cf51 <eta_str.8886+0x1d9>
   3286c:	jmp    3281a <write_reject_log_reason+0x3a>
   3286e:	lea    rcx,[rip+0x3a718]        # 6cf8d <eta_str.8886+0x215>
   32875:	jmp    3281a <write_reject_log_reason+0x3a>
   32877:	lea    rcx,[rip+0x3a71b]        # 6cf99 <eta_str.8886+0x221>
   3287e:	jmp    3281a <write_reject_log_reason+0x3a>
   32880:	lea    rcx,[rip+0x3a6d2]        # 6cf59 <eta_str.8886+0x1e1>
   32887:	jmp    3281a <write_reject_log_reason+0x3a>
   32889:	lea    rcx,[rip+0x3a6d2]        # 6cf62 <eta_str.8886+0x1ea>
   32890:	jmp    3281a <write_reject_log_reason+0x3a>
   32892:	lea    rcx,[rip+0x3a6d1]        # 6cf6a <eta_str.8886+0x1f2>
   32899:	jmp    3281a <write_reject_log_reason+0x3a>
   3289e:	lea    rcx,[rip+0x3a6ce]        # 6cf73 <eta_str.8886+0x1fb>
   328a5:	jmp    3281a <write_reject_log_reason+0x3a>
   328aa:	lea    rcx,[rip+0x3a6c9]        # 6cf7a <eta_str.8886+0x202>
   328b1:	jmp    3281a <write_reject_log_reason+0x3a>
   328b6:	lea    rcx,[rip+0x3a6e8]        # 6cfa5 <eta_str.8886+0x22d>
   328bd:	jmp    3281a <write_reject_log_reason+0x3a>
   328c2:	lea    rcx,[rip+0x3a6b8]        # 6cf81 <eta_str.8886+0x209>
   328c9:	jmp    3281a <write_reject_log_reason+0x3a>
   328ce:	lea    rcx,[rip+0x3a6b2]        # 6cf87 <eta_str.8886+0x20f>
   328d5:	jmp    3281a <write_reject_log_reason+0x3a>
   328da:	nop    WORD PTR [rax+rax*1+0x0]
   328e0:	ret    
   328e1:	lea    rcx,[rip+0x3a661]        # 6cf49 <eta_str.8886+0x1d1>
   328e8:	jmp    3281a <write_reject_log_reason+0x3a>
   328ed:	nop    DWORD PTR [rax]

00000000000328f0 <retrieve_tree>:
   328f0:	endbr64 
   328f4:	push   r15
   328f6:	push   r14
   328f8:	push   r13
   328fa:	push   r12
   328fc:	push   rbp
   328fd:	push   rbx
   328fe:	mov    rbx,rsi
   32901:	sub    rsp,0xc8
   32908:	mov    QWORD PTR [rsp+0x20],rdi
   3290d:	mov    rax,QWORD PTR fs:0x28
   32916:	mov    QWORD PTR [rsp+0xb8],rax
   3291e:	xor    eax,eax
   32920:	call   40010 <iri_new>
   32925:	mov    QWORD PTR [rsp+0x90],rax
   3292d:	test   rbx,rbx
   32930:	je     335c8 <retrieve_tree+0xcd8>
   32936:	mov    rdi,QWORD PTR [rbx]
   32939:	test   rdi,rdi
   3293c:	je     3294e <retrieve_tree+0x5e>
   3293e:	call   4ba50 <xstrdup>
   32943:	mov    rdi,rax
   32946:	mov    rax,QWORD PTR [rsp+0x90]
   3294e:	mov    QWORD PTR [rax],rdi
   32951:	mov    rdi,QWORD PTR [rbx+0x8]
   32955:	test   rdi,rdi
   32958:	je     3296a <retrieve_tree+0x7a>
   3295a:	call   4ba50 <xstrdup>
   3295f:	mov    rdi,rax
   32962:	mov    rax,QWORD PTR [rsp+0x90]
   3296a:	movzx  edx,BYTE PTR [rbx+0x18]
   3296e:	mov    QWORD PTR [rax+0x8],rdi
   32972:	mov    BYTE PTR [rax+0x18],dl
   32975:	mov    esi,0x18
   3297a:	mov    edi,0x1
   3297f:	call   4b9c0 <xcalloc>
   32984:	xor    edi,edi
   32986:	mov    r13,rax
   32989:	call   1e140 <make_string_hash_table>
   3298e:	mov    rbx,QWORD PTR [rsp+0x20]
   32993:	mov    QWORD PTR [rsp+0x38],rax
   32998:	mov    r15,rax
   3299b:	mov    rdi,QWORD PTR [rbx]
   3299e:	call   4ba50 <xstrdup>
   329a3:	sub    rsp,0x8
   329a7:	xor    r8d,r8d
   329aa:	xor    ecx,ecx
   329ac:	push   0x0
   329ae:	mov    rsi,QWORD PTR [rsp+0xa0]
   329b6:	mov    rdx,rax
   329b9:	mov    rdi,r13
   329bc:	mov    r9d,0x1
   329c2:	call   31f50 <url_enqueue>
   329c7:	mov    rsi,QWORD PTR [rbx]
   329ca:	mov    rdi,r15
   329cd:	call   320a0 <blacklist_add>
   329d2:	mov    rax,QWORD PTR [rip+0x57a07]        # 8a3e0 <opt+0x360>
   329d9:	mov    QWORD PTR [rsp+0x50],rax
   329de:	pop    r11
   329e0:	pop    rbx
   329e1:	test   rax,rax
   329e4:	je     32a1c <retrieve_tree+0x12c>
   329e6:	lea    rsi,[rip+0x3aa25]        # 6d412 <eta_str.8886+0x69a>
   329ed:	mov    rdi,rax
   329f0:	call   c0f0 <fopen@plt>
   329f5:	mov    QWORD PTR [rsp+0x40],rax
   329fa:	test   rax,rax
   329fd:	je     33570 <retrieve_tree+0xc80>
   32a03:	mov    rcx,rax
   32a06:	mov    edx,0x87
   32a0b:	mov    esi,0x1
   32a10:	lea    rdi,[rip+0x3a799]        # 6d1b0 <eta_str.8886+0x438>
   32a17:	call   ca10 <fwrite@plt>
   32a1c:	lea    rax,[rsp+0x8c]
   32a24:	mov    DWORD PTR [rsp+0x4],0x19
   32a2c:	lea    r14,[rsp+0xa0]
   32a34:	mov    QWORD PTR [rsp+0x8],rax
   32a39:	lea    rax,[rsp+0x88]
   32a41:	lea    r15,[rsp+0x98]
   32a49:	mov    QWORD PTR [rsp+0x28],rax
   32a4e:	lea    rax,[rsp+0xb0]
   32a56:	mov    QWORD PTR [rsp+0x18],rax
   32a5b:	lea    rax,[rsp+0xa8]
   32a63:	mov    QWORD PTR [rsp+0x30],rax
   32a68:	nop    DWORD PTR [rax+rax*1+0x0]
   32a70:	mov    rax,QWORD PTR [rip+0x57839]        # 8a2b0 <opt+0x230>
   32a77:	mov    QWORD PTR [rsp+0xa8],0x0
   32a83:	test   rax,rax
   32a86:	je     32a95 <retrieve_tree+0x1a5>
   32a88:	cmp    rax,QWORD PTR [rip+0x579a1]        # 8a430 <total_downloaded_bytes>
   32a8f:	jl     33240 <retrieve_tree+0x950>
   32a95:	cmp    DWORD PTR [rsp+0x4],0x15
   32a9a:	je     33240 <retrieve_tree+0x950>
   32aa0:	lea    rsi,[rsp+0x90]
   32aa8:	sub    rsp,0x8
   32aac:	mov    rcx,r14
   32aaf:	mov    rdx,r15
   32ab2:	lea    rax,[rsp+0x8b]
   32aba:	mov    rdi,r13
   32abd:	push   rax
   32abe:	lea    r9,[rsp+0x92]
   32ac6:	lea    r8,[rsp+0x94]
   32ace:	call   31e70 <url_dequeue>
   32ad3:	pop    r9
   32ad5:	pop    r10
   32ad7:	mov    ebx,eax
   32ad9:	test   al,al
   32adb:	je     33240 <retrieve_tree+0x950>
   32ae1:	mov    r8,QWORD PTR [rip+0x57548]        # 8a030 <dl_url_file_map>
   32ae8:	mov    rdi,QWORD PTR [rsp+0x98]
   32af0:	test   r8,r8
   32af3:	je     32b10 <retrieve_tree+0x220>
   32af5:	mov    rsi,rdi
   32af8:	mov    rdi,r8
   32afb:	call   1dbf0 <hash_table_contains>
   32b00:	test   eax,eax
   32b02:	jne    32fb8 <retrieve_tree+0x6c8>
   32b08:	mov    rdi,QWORD PTR [rsp+0x98]
   32b10:	mov    rdx,QWORD PTR [rsp+0x90]
   32b18:	mov    rsi,QWORD PTR [rsp+0x8]
   32b1d:	mov    ecx,0x1
   32b22:	mov    DWORD PTR [rsp+0x88],0x0
   32b2d:	mov    QWORD PTR [rsp+0xb0],0x0
   32b39:	call   385f0 <url_parse>
   32b3e:	mov    rbp,rax
   32b41:	test   rax,rax
   32b44:	je     33050 <retrieve_tree+0x760>
   32b4a:	sub    rsp,0x8
   32b4e:	mov    rdi,rax
   32b51:	push   0x1
   32b53:	push   QWORD PTR [rsp+0xa0]
   32b5a:	push   0x0
   32b5c:	mov    r9,QWORD PTR [rsp+0x48]
   32b61:	mov    r8,QWORD PTR [rsp+0xc0]
   32b69:	mov    rcx,QWORD PTR [rsp+0x38]
   32b6e:	mov    rdx,QWORD PTR [rsp+0x50]
   32b73:	mov    rsi,QWORD PTR [rsp+0xb8]
   32b7b:	call   35290 <retrieve_url>
   32b80:	movzx  r12d,BYTE PTR [rsp+0xa2]
   32b89:	mov    DWORD PTR [rsp+0x24],eax
   32b8d:	add    rsp,0x20
   32b91:	mov    r10,QWORD PTR [rsp+0xb0]
   32b99:	test   r12b,r12b
   32b9c:	jne    32f40 <retrieve_tree+0x650>
   32ba2:	cmp    QWORD PTR [rsp+0xa8],0x0
   32bab:	je     32bb8 <retrieve_tree+0x2c8>
   32bad:	cmp    DWORD PTR [rsp+0x4],0x19
   32bb2:	je     33330 <retrieve_tree+0xa40>
   32bb8:	mov    BYTE PTR [rsp+0x10],0x0
   32bbd:	test   r10,r10
   32bc0:	je     334b0 <retrieve_tree+0xbc0>
   32bc6:	mov    rdi,QWORD PTR [rsp+0x98]
   32bce:	call   4bdc0 <rpl_free>
   32bd3:	mov    rax,QWORD PTR [rsp+0xb0]
   32bdb:	mov    QWORD PTR [rsp+0x98],rax
   32be3:	mov    rdi,rbp
   32be6:	call   374d0 <url_free>
   32beb:	test   r12b,r12b
   32bee:	je     32e10 <retrieve_tree+0x520>
   32bf4:	mov    edx,DWORD PTR [rip+0x574aa]        # 8a0a4 <opt+0x24>
   32bfa:	mov    esi,DWORD PTR [rsp+0x84]
   32c01:	cmp    edx,0xffffffff
   32c04:	setne  bpl
   32c08:	cmp    edx,esi
   32c0a:	setle  al
   32c0d:	and    bpl,al
   32c10:	jne    33168 <retrieve_tree+0x878>
   32c16:	cmp    BYTE PTR [rsp+0x10],0x0
   32c1b:	mov    BYTE PTR [rsp+0xb0],0x0
   32c23:	je     33108 <retrieve_tree+0x818>
   32c29:	mov    rsi,QWORD PTR [rsp+0x98]
   32c31:	mov    rdi,QWORD PTR [rsp+0xa8]
   32c39:	call   19580 <get_urls_css_file>
   32c3e:	mov    QWORD PTR [rsp+0x10],rax
   32c43:	cmp    BYTE PTR [rip+0x57656],0x0        # 8a2a0 <opt+0x220>
   32c4a:	je     32c5a <retrieve_tree+0x36a>
   32c4c:	cmp    BYTE PTR [rsp+0xb0],0x0
   32c54:	jne    32e06 <retrieve_tree+0x516>
   32c5a:	cmp    QWORD PTR [rsp+0x10],0x0
   32c60:	je     32e10 <retrieve_tree+0x520>
   32c66:	mov    rdx,QWORD PTR [rsp+0x90]
   32c6e:	mov    rdi,QWORD PTR [rsp+0x98]
   32c76:	mov    ecx,0x1
   32c7b:	xor    esi,esi
   32c7d:	call   385f0 <url_parse>
   32c82:	mov    r12,rax
   32c85:	test   rax,rax
   32c88:	je     32a70 <retrieve_tree+0x180>
   32c8e:	cmp    QWORD PTR [rax+0x50],0x0
   32c93:	je     33510 <retrieve_tree+0xc20>
   32c99:	mov    esi,0x2
   32c9e:	mov    rdi,rax
   32ca1:	call   38230 <url_string>
   32ca6:	mov    DWORD PTR [rsp+0x7c],0x1
   32cae:	mov    QWORD PTR [rsp+0x60],rax
   32cb3:	mov    rbx,QWORD PTR [rsp+0x10]
   32cb8:	mov    QWORD PTR [rsp+0x70],r14
   32cbd:	mov    QWORD PTR [rsp+0x68],r15
   32cc2:	mov    r14,rbx
   32cc5:	mov    rbx,QWORD PTR [rsp+0x38]
   32cca:	jmp    32db2 <retrieve_tree+0x4c2>
   32ccf:	nop
   32cd0:	test   bpl,bpl
   32cd3:	je     32cdd <retrieve_tree+0x3ed>
   32cd5:	test   al,0x10
   32cd7:	je     331b0 <retrieve_tree+0x8c0>
   32cdd:	mov    rcx,QWORD PTR [rsp+0x20]
   32ce2:	mov    rsi,r12
   32ce5:	mov    r8,rbx
   32ce8:	mov    rdi,r14
   32ceb:	mov    r9,QWORD PTR [rsp+0x90]
   32cf3:	mov    edx,DWORD PTR [rsp+0x84]
   32cfa:	call   320e0 <download_child>
   32cff:	mov    esi,eax
   32d01:	test   eax,eax
   32d03:	jne    32fa0 <retrieve_tree+0x6b0>
   32d09:	call   40010 <iri_new>
   32d0e:	xor    edx,edx
   32d10:	mov    r11,rax
   32d13:	mov    rax,QWORD PTR [rsp+0x90]
   32d1b:	mov    rdi,r11
   32d1e:	mov    QWORD PTR [rsp+0x58],r11
   32d23:	mov    rsi,QWORD PTR [rax+0x8]
   32d27:	call   40130 <set_uri_encoding>
   32d2c:	movsx  r9d,BYTE PTR [r14+0x10]
   32d31:	mov    rdi,QWORD PTR [rsp+0x60]
   32d36:	mov    eax,DWORD PTR [rsp+0x84]
   32d3d:	movzx  r15d,BYTE PTR [r14+0x11]
   32d42:	shr    r9d,0x1f
   32d46:	lea    r8d,[rax+0x1]
   32d4a:	mov    DWORD PTR [rsp+0x78],r9d
   32d4f:	and    r15d,0x1
   32d53:	mov    DWORD PTR [rsp+0x50],r8d
   32d58:	call   4ba50 <xstrdup>
   32d5d:	mov    QWORD PTR [rsp+0x48],rax
   32d62:	mov    rax,QWORD PTR [r14]
   32d65:	mov    rdi,QWORD PTR [rax]
   32d68:	call   4ba50 <xstrdup>
   32d6d:	sub    rsp,0x8
   32d71:	mov    rdi,r13
   32d74:	push   r15
   32d76:	mov    r11,QWORD PTR [rsp+0x68]
   32d7b:	mov    rdx,rax
   32d7e:	mov    r9d,DWORD PTR [rsp+0x88]
   32d86:	mov    r8d,DWORD PTR [rsp+0x60]
   32d8b:	mov    rcx,QWORD PTR [rsp+0x58]
   32d90:	mov    rsi,r11
   32d93:	call   31f50 <url_enqueue>
   32d98:	mov    rax,QWORD PTR [r14]
   32d9b:	mov    rdi,rbx
   32d9e:	mov    rsi,QWORD PTR [rax]
   32da1:	call   320a0 <blacklist_add>
   32da6:	pop    rdi
   32da7:	pop    r8
   32da9:	mov    r14,QWORD PTR [r14+0x28]
   32dad:	test   r14,r14
   32db0:	je     32de8 <retrieve_tree+0x4f8>
   32db2:	movzx  eax,BYTE PTR [r14+0x10]
   32db7:	test   al,0x1
   32db9:	je     32cd0 <retrieve_tree+0x3e0>
   32dbf:	cmp    BYTE PTR [rip+0x574f5],0x0        # 8a2bb <opt+0x23b>
   32dc6:	je     32da9 <retrieve_tree+0x4b9>
   32dc8:	mov    rax,QWORD PTR [r14]
   32dcb:	lea    rdi,[rip+0x3a526]        # 6d2f8 <eta_str.8886+0x580>
   32dd2:	mov    rsi,QWORD PTR [rax]
   32dd5:	xor    eax,eax
   32dd7:	call   2e250 <debug_logprintf>
   32ddc:	mov    r14,QWORD PTR [r14+0x28]
   32de0:	test   r14,r14
   32de3:	jne    32db2 <retrieve_tree+0x4c2>
   32de5:	nop    DWORD PTR [rax]
   32de8:	mov    esi,DWORD PTR [rsp+0x7c]
   32dec:	mov    r15,QWORD PTR [rsp+0x68]
   32df1:	mov    r14,QWORD PTR [rsp+0x70]
   32df6:	test   esi,esi
   32df8:	jne    334f8 <retrieve_tree+0xc08>
   32dfe:	mov    rdi,r12
   32e01:	call   374d0 <url_free>
   32e06:	mov    rdi,QWORD PTR [rsp+0x10]
   32e0b:	call   35d40 <free_urlpos>
   32e10:	mov    r12,QWORD PTR [rsp+0xa8]
   32e18:	test   r12,r12
   32e1b:	je     32ea7 <retrieve_tree+0x5b7>
   32e21:	cmp    BYTE PTR [rip+0x574d0],0x0        # 8a2f8 <opt+0x278>
   32e28:	jne    32f08 <retrieve_tree+0x618>
   32e2e:	cmp    BYTE PTR [rip+0x572b3],0x0        # 8a0e8 <opt+0x68>
   32e35:	je     33200 <retrieve_tree+0x910>
   32e3b:	cmp    BYTE PTR [rip+0x57479],0x0        # 8a2bb <opt+0x23b>
   32e42:	jne    33530 <retrieve_tree+0xc40>
   32e48:	cmp    BYTE PTR [rip+0x57299],0x0        # 8a0e8 <opt+0x68>
   32e4f:	je     331e0 <retrieve_tree+0x8f0>
   32e55:	lea    rsi,[rip+0x28cbf]        # 5bb1b <_IO_stdin_used+0xb1b>
   32e5c:	mov    edx,0x5
   32e61:	xor    edi,edi
   32e63:	call   c780 <dcgettext@plt>
   32e68:	mov    rsi,rax
   32e6b:	xor    edi,edi
   32e6d:	xor    eax,eax
   32e6f:	mov    rdx,r12
   32e72:	call   2e0a0 <logprintf>
   32e77:	mov    rdi,QWORD PTR [rsp+0xa8]
   32e7f:	call   c120 <unlink@plt>
   32e84:	test   eax,eax
   32e86:	jne    33138 <retrieve_tree+0x848>
   32e8c:	xor    edi,edi
   32e8e:	lea    rsi,[rip+0x32b3a]        # 659cf <yy_accept+0x90f>
   32e95:	call   2de60 <logputs>
   32e9a:	mov    rdi,QWORD PTR [rsp+0xa8]
   32ea2:	call   103c0 <register_delete_file>
   32ea7:	mov    rdi,QWORD PTR [rsp+0x98]
   32eaf:	call   4bdc0 <rpl_free>
   32eb4:	mov    rdi,QWORD PTR [rsp+0xa0]
   32ebc:	mov    QWORD PTR [rsp+0x98],0x0
   32ec8:	call   4bdc0 <rpl_free>
   32ecd:	mov    rdi,QWORD PTR [rsp+0xa8]
   32ed5:	mov    QWORD PTR [rsp+0xa0],0x0
   32ee1:	call   4bdc0 <rpl_free>
   32ee6:	mov    rdi,QWORD PTR [rsp+0x90]
   32eee:	mov    QWORD PTR [rsp+0xa8],0x0
   32efa:	call   400d0 <iri_free>
   32eff:	jmp    32a70 <retrieve_tree+0x180>
   32f04:	nop    DWORD PTR [rax+0x0]
   32f08:	cmp    BYTE PTR [rip+0x573ac],0x0        # 8a2bb <opt+0x23b>
   32f0f:	je     32e55 <retrieve_tree+0x565>
   32f15:	lea    rsi,[rip+0x3a0af]        # 6cfcb <eta_str.8886+0x253>
   32f1c:	xor    eax,eax
   32f1e:	lea    rdi,[rip+0x3a42b]        # 6d350 <eta_str.8886+0x5d8>
   32f25:	call   2e250 <debug_logprintf>
   32f2a:	mov    r12,QWORD PTR [rsp+0xa8]
   32f32:	movzx  eax,BYTE PTR [rip+0x573bf]        # 8a2f8 <opt+0x278>
   32f39:	jmp    3322c <retrieve_tree+0x93c>
   32f3e:	xchg   ax,ax
   32f40:	cmp    QWORD PTR [rsp+0xa8],0x0
   32f49:	je     32f56 <retrieve_tree+0x666>
   32f4b:	cmp    DWORD PTR [rsp+0x4],0x19
   32f50:	je     33498 <retrieve_tree+0xba8>
   32f56:	mov    BYTE PTR [rsp+0x10],0x0
   32f5b:	xor    r12d,r12d
   32f5e:	test   r10,r10
   32f61:	jne    32bc6 <retrieve_tree+0x2d6>
   32f67:	mov    rdi,QWORD PTR [rsp+0x98]
   32f6f:	call   4bdc0 <rpl_free>
   32f74:	mov    QWORD PTR [rsp+0x98],0x0
   32f80:	mov    rdi,QWORD PTR [rbp+0x0]
   32f84:	call   4ba50 <xstrdup>
   32f89:	mov    QWORD PTR [rsp+0x98],rax
   32f91:	jmp    32be3 <retrieve_tree+0x2f3>
   32f96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   32fa0:	mov    rdx,QWORD PTR [r14]
   32fa3:	mov    rdi,QWORD PTR [rsp+0x40]
   32fa8:	mov    rcx,r12
   32fab:	call   327e0 <write_reject_log_reason>
   32fb0:	jmp    32da9 <retrieve_tree+0x4b9>
   32fb5:	nop    DWORD PTR [rax]
   32fb8:	mov    rsi,QWORD PTR [rsp+0x98]
   32fc0:	mov    rdi,QWORD PTR [rip+0x57069]        # 8a030 <dl_url_file_map>
   32fc7:	call   1da70 <hash_table_get>
   32fcc:	mov    rdi,rax
   32fcf:	call   4ba50 <xstrdup>
   32fd4:	cmp    BYTE PTR [rip+0x572e0],0x0        # 8a2bb <opt+0x23b>
   32fdb:	mov    QWORD PTR [rsp+0xa8],rax
   32fe3:	mov    r12,rax
   32fe6:	jne    33540 <retrieve_tree+0xc50>
   32fec:	cmp    BYTE PTR [rsp+0x83],0x0
   32ff4:	je     330b0 <retrieve_tree+0x7c0>
   32ffa:	mov    rdi,QWORD PTR [rip+0x5701f]        # 8a020 <downloaded_css_set>
   33001:	test   rdi,rdi
   33004:	je     330b0 <retrieve_tree+0x7c0>
   3300a:	mov    rsi,r12
   3300d:	call   3cc70 <string_set_contains>
   33012:	test   eax,eax
   33014:	je     330a8 <retrieve_tree+0x7b8>
   3301a:	mov    edx,DWORD PTR [rip+0x57084]        # 8a0a4 <opt+0x24>
   33020:	mov    esi,DWORD PTR [rsp+0x84]
   33027:	cmp    edx,esi
   33029:	setle  bpl
   3302d:	cmp    edx,0xffffffff
   33030:	setne  al
   33033:	and    bpl,al
   33036:	jne    335e1 <retrieve_tree+0xcf1>
   3303c:	mov    BYTE PTR [rsp+0xb0],0x0
   33044:	jmp    32c29 <retrieve_tree+0x339>
   33049:	nop    DWORD PTR [rax+0x0]
   33050:	mov    esi,DWORD PTR [rsp+0x8c]
   33057:	mov    rdi,QWORD PTR [rsp+0x98]
   3305f:	call   373b0 <url_error>
   33064:	mov    rdx,QWORD PTR [rsp+0x98]
   3306c:	mov    edi,0x1
   33071:	lea    rsi,[rip+0x359f0]        # 68a68 <primes.6089+0x2988>
   33078:	mov    rcx,rax
   3307b:	mov    rbp,rax
   3307e:	xor    eax,eax
   33080:	call   2e0a0 <logprintf>
   33085:	mov    rdi,rbp
   33088:	call   4bdc0 <rpl_free>
   3308d:	mov    edi,0x12
   33092:	call   3f7b0 <inform_exit_status>
   33097:	mov    r12,QWORD PTR [rsp+0xa8]
   3309f:	jmp    32e18 <retrieve_tree+0x528>
   330a4:	nop    DWORD PTR [rax+0x0]
   330a8:	mov    r12,QWORD PTR [rsp+0xa8]
   330b0:	cmp    BYTE PTR [rsp+0x82],0x0
   330b8:	je     32e18 <retrieve_tree+0x528>
   330be:	mov    rdi,QWORD PTR [rip+0x56f63]        # 8a028 <downloaded_html_set>
   330c5:	test   rdi,rdi
   330c8:	je     32e18 <retrieve_tree+0x528>
   330ce:	mov    rsi,r12
   330d1:	call   3cc70 <string_set_contains>
   330d6:	test   eax,eax
   330d8:	je     32e10 <retrieve_tree+0x520>
   330de:	mov    edx,DWORD PTR [rip+0x56fc0]        # 8a0a4 <opt+0x24>
   330e4:	mov    esi,DWORD PTR [rsp+0x84]
   330eb:	cmp    edx,esi
   330ed:	setle  bpl
   330f1:	cmp    edx,0xffffffff
   330f4:	setne  al
   330f7:	and    bpl,al
   330fa:	jne    3315f <retrieve_tree+0x86f>
   330fc:	mov    BYTE PTR [rsp+0xb0],0x0
   33104:	nop    DWORD PTR [rax+0x0]
   33108:	mov    rcx,QWORD PTR [rsp+0x90]
   33110:	mov    rdx,QWORD PTR [rsp+0x18]
   33115:	mov    rsi,QWORD PTR [rsp+0x98]
   3311d:	mov    rdi,QWORD PTR [rsp+0xa8]
   33125:	call   22210 <get_urls_html>
   3312a:	mov    QWORD PTR [rsp+0x10],rax
   3312f:	jmp    32c43 <retrieve_tree+0x353>
   33134:	nop    DWORD PTR [rax+0x0]
   33138:	call   c740 <__errno_location@plt>
   3313d:	mov    edi,DWORD PTR [rax]
   3313f:	call   c540 <strerror@plt>
   33144:	lea    rsi,[rip+0x289de]        # 5bb29 <_IO_stdin_used+0xb29>
   3314b:	mov    edi,0x1
   33150:	mov    rdx,rax
   33153:	xor    eax,eax
   33155:	call   2e0a0 <logprintf>
   3315a:	jmp    32e8c <retrieve_tree+0x59c>
   3315f:	mov    BYTE PTR [rsp+0x10],0x0
   33164:	nop    DWORD PTR [rax+0x0]
   33168:	movzx  ebp,BYTE PTR [rip+0x5718b]        # 8a2fa <opt+0x27a>
   3316f:	test   bpl,bpl
   33172:	je     33187 <retrieve_tree+0x897>
   33174:	cmp    esi,edx
   33176:	je     32c16 <retrieve_tree+0x326>
   3317c:	lea    eax,[rdx+0x1]
   3317f:	cmp    eax,esi
   33181:	je     32c16 <retrieve_tree+0x326>
   33187:	cmp    BYTE PTR [rip+0x5712d],0x0        # 8a2bb <opt+0x23b>
   3318e:	je     32e10 <retrieve_tree+0x520>
   33194:	lea    rdi,[rip+0x3a12d]        # 6d2c8 <eta_str.8886+0x550>
   3319b:	xor    eax,eax
   3319d:	call   2e250 <debug_logprintf>
   331a2:	mov    r12,QWORD PTR [rsp+0xa8]
   331aa:	jmp    32e18 <retrieve_tree+0x528>
   331af:	nop
   331b0:	cmp    BYTE PTR [rip+0x57104],0x0        # 8a2bb <opt+0x23b>
   331b7:	je     32da9 <retrieve_tree+0x4b9>
   331bd:	mov    rax,QWORD PTR [r14]
   331c0:	lea    rdi,[rip+0x3a159]        # 6d320 <eta_str.8886+0x5a8>
   331c7:	mov    rsi,QWORD PTR [rax]
   331ca:	xor    eax,eax
   331cc:	call   2e250 <debug_logprintf>
   331d1:	jmp    32da9 <retrieve_tree+0x4b9>
   331d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   331e0:	lea    rsi,[rip+0x3a1a1]        # 6d388 <eta_str.8886+0x610>
   331e7:	mov    edx,0x5
   331ec:	xor    edi,edi
   331ee:	call   c780 <dcgettext@plt>
   331f3:	mov    rsi,rax
   331f6:	jmp    32e6b <retrieve_tree+0x57b>
   331fb:	nop    DWORD PTR [rax+rax*1+0x0]
   33200:	mov    rdi,r12
   33203:	call   3c670 <acceptable>
   33208:	test   al,al
   3320a:	jne    32ea7 <retrieve_tree+0x5b7>
   33210:	cmp    BYTE PTR [rip+0x570a4],0x0        # 8a2bb <opt+0x23b>
   33217:	movzx  eax,BYTE PTR [rip+0x570da]        # 8a2f8 <opt+0x278>
   3321e:	jne    3359e <retrieve_tree+0xcae>
   33224:	mov    r12,QWORD PTR [rsp+0xa8]
   3322c:	test   al,al
   3322e:	je     32e48 <retrieve_tree+0x558>
   33234:	jmp    32e55 <retrieve_tree+0x565>
   33239:	nop    DWORD PTR [rax+0x0]
   33240:	mov    rdi,QWORD PTR [rsp+0x40]
   33245:	test   rdi,rdi
   33248:	je     334e0 <retrieve_tree+0xbf0>
   3324e:	call   c8b0 <fclose@plt>
   33253:	mov    rbx,QWORD PTR [rsp+0x28]
   33258:	mov    rbp,QWORD PTR [rsp+0x30]
   3325d:	mov    r12,QWORD PTR [rsp+0x18]
   33262:	jmp    332a7 <retrieve_tree+0x9b7>
   33264:	nop    DWORD PTR [rax+0x0]
   33268:	mov    rdi,QWORD PTR [rsp+0xb0]
   33270:	call   400d0 <iri_free>
   33275:	mov    rdi,QWORD PTR [rsp+0xa0]
   3327d:	call   4bdc0 <rpl_free>
   33282:	mov    rdi,QWORD PTR [rsp+0xa8]
   3328a:	mov    QWORD PTR [rsp+0xa0],0x0
   33296:	call   4bdc0 <rpl_free>
   3329b:	mov    QWORD PTR [rsp+0xa8],0x0
   332a7:	sub    rsp,0x8
   332ab:	mov    rcx,rbp
   332ae:	mov    rdx,r14
   332b1:	mov    r9,rbx
   332b4:	push   QWORD PTR [rsp+0x10]
   332b8:	mov    r8,r15
   332bb:	mov    rsi,r12
   332be:	mov    rdi,r13
   332c1:	call   31e70 <url_dequeue>
   332c6:	pop    rdx
   332c7:	pop    rcx
   332c8:	test   al,al
   332ca:	jne    33268 <retrieve_tree+0x978>
   332cc:	mov    rdi,r13
   332cf:	call   4bdc0 <rpl_free>
   332d4:	mov    rdi,QWORD PTR [rsp+0x38]
   332d9:	call   3ccf0 <string_set_free>
   332de:	mov    rax,QWORD PTR [rip+0x56fcb]        # 8a2b0 <opt+0x230>
   332e5:	test   rax,rax
   332e8:	jne    334c0 <retrieve_tree+0xbd0>
   332ee:	mov    ebx,DWORD PTR [rsp+0x4]
   332f2:	mov    eax,0x19
   332f7:	cmp    ebx,0x15
   332fa:	cmove  eax,ebx
   332fd:	mov    DWORD PTR [rsp+0x4],eax
   33301:	mov    rax,QWORD PTR [rsp+0xb8]
   33309:	xor    rax,QWORD PTR fs:0x28
   33312:	jne    3360b <retrieve_tree+0xd1b>
   33318:	mov    eax,DWORD PTR [rsp+0x4]
   3331c:	add    rsp,0xc8
   33323:	pop    rbx
   33324:	pop    rbp
   33325:	pop    r12
   33327:	pop    r13
   33329:	pop    r14
   3332b:	pop    r15
   3332d:	ret    
   3332e:	xchg   ax,ax
   33330:	mov    eax,DWORD PTR [rsp+0x88]
   33337:	test   al,0x2
   33339:	je     3335a <retrieve_tree+0xa6a>
   3333b:	test   al,0x40
   3333d:	je     33350 <retrieve_tree+0xa60>
   3333f:	mov    BYTE PTR [rsp+0x10],bl
   33343:	mov    r12d,ebx
   33346:	test   r10,r10
   33349:	jne    33371 <retrieve_tree+0xa81>
   3334b:	jmp    32f67 <retrieve_tree+0x677>
   33350:	cmp    BYTE PTR [rsp+0x83],0x0
   33358:	jne    3333f <retrieve_tree+0xa4f>
   3335a:	test   r10,r10
   3335d:	je     334b0 <retrieve_tree+0xbc0>
   33363:	mov    BYTE PTR [rsp+0x10],0x0
   33368:	test   r12b,r12b
   3336b:	je     32bc6 <retrieve_tree+0x2d6>
   33371:	mov    r9,QWORD PTR [rsp+0x90]
   33379:	mov    rdi,r10
   3337c:	xor    ecx,ecx
   3337e:	xor    edx,edx
   33380:	mov    r11d,DWORD PTR [rsp+0x84]
   33388:	xor    esi,esi
   3338a:	mov    QWORD PTR [rsp+0x50],r10
   3338f:	mov    QWORD PTR [rsp+0x58],r9
   33394:	mov    DWORD PTR [rsp+0x78],r11d
   33399:	call   385f0 <url_parse>
   3339e:	mov    esi,0x30
   333a3:	mov    edi,0x1
   333a8:	mov    QWORD PTR [rsp+0x48],rax
   333ad:	call   4b9c0 <xcalloc>
   333b2:	mov    r11d,DWORD PTR [rsp+0x78]
   333b7:	mov    r8,QWORD PTR [rsp+0x38]
   333bc:	mov    rsi,rbp
   333bf:	mov    r12,rax
   333c2:	mov    rax,QWORD PTR [rsp+0x48]
   333c7:	mov    r9,QWORD PTR [rsp+0x58]
   333cc:	mov    rcx,QWORD PTR [rsp+0x20]
   333d1:	mov    edx,r11d
   333d4:	mov    rdi,r12
   333d7:	mov    QWORD PTR [r12],rax
   333db:	call   320e0 <download_child>
   333e0:	mov    r10,QWORD PTR [rsp+0x50]
   333e5:	test   eax,eax
   333e7:	mov    r8d,eax
   333ea:	je     33458 <retrieve_tree+0xb68>
   333ec:	lea    eax,[rax-0x7]
   333ef:	movzx  edx,BYTE PTR [rip+0x56ec5]        # 8a2bb <opt+0x23b>
   333f6:	cmp    eax,0x1
   333f9:	jbe    33440 <retrieve_tree+0xb50>
   333fb:	test   dl,dl
   333fd:	jne    335eb <retrieve_tree+0xcfb>
   33403:	mov    rdi,QWORD PTR [rsp+0x48]
   33408:	mov    DWORD PTR [rsp+0x50],r8d
   3340d:	call   374d0 <url_free>
   33412:	mov    rdi,r12
   33415:	xor    r12d,r12d
   33418:	call   4bdc0 <rpl_free>
   3341d:	mov    r8d,DWORD PTR [rsp+0x50]
   33422:	mov    rcx,QWORD PTR [rsp+0x20]
   33427:	mov    rdx,rbp
   3342a:	mov    rdi,QWORD PTR [rsp+0x40]
   3342f:	mov    esi,r8d
   33432:	call   327e0 <write_reject_log_reason>
   33437:	jmp    32bc6 <retrieve_tree+0x2d6>
   3343c:	nop    DWORD PTR [rax+0x0]
   33440:	test   dl,dl
   33442:	je     33458 <retrieve_tree+0xb68>
   33444:	lea    rdi,[rip+0x39e1d]        # 6d268 <eta_str.8886+0x4f0>
   3344b:	xor    eax,eax
   3344d:	call   2e250 <debug_logprintf>
   33452:	nop    WORD PTR [rax+rax*1+0x0]
   33458:	mov    rax,QWORD PTR [r12]
   3345c:	mov    rdi,QWORD PTR [rsp+0x38]
   33461:	mov    rsi,QWORD PTR [rax]
   33464:	call   320a0 <blacklist_add>
   33469:	mov    rdi,QWORD PTR [rsp+0x48]
   3346e:	call   374d0 <url_free>
   33473:	mov    rdi,r12
   33476:	mov    r12d,ebx
   33479:	call   4bdc0 <rpl_free>
   3347e:	mov    rsi,QWORD PTR [rsp+0x98]
   33486:	mov    rdi,QWORD PTR [rsp+0x38]
   3348b:	call   320a0 <blacklist_add>
   33490:	jmp    32bc6 <retrieve_tree+0x2d6>
   33495:	nop    DWORD PTR [rax]
   33498:	mov    eax,DWORD PTR [rsp+0x88]
   3349f:	mov    edx,eax
   334a1:	and    edx,0x3
   334a4:	cmp    edx,0x3
   334a7:	sete   r12b
   334ab:	jmp    33337 <retrieve_tree+0xa47>
   334b0:	mov    BYTE PTR [rsp+0x10],0x0
   334b5:	jmp    32f67 <retrieve_tree+0x677>
   334ba:	nop    WORD PTR [rax+rax*1+0x0]
   334c0:	cmp    rax,QWORD PTR [rip+0x56f69]        # 8a430 <total_downloaded_bytes>
   334c7:	jge    332ee <retrieve_tree+0x9fe>
   334cd:	mov    DWORD PTR [rsp+0x4],0x2b
   334d5:	jmp    33301 <retrieve_tree+0xa11>
   334da:	nop    WORD PTR [rax+rax*1+0x0]
   334e0:	mov    rbx,QWORD PTR [rsp+0x28]
   334e5:	mov    rbp,QWORD PTR [rsp+0x30]
   334ea:	mov    r12,QWORD PTR [rsp+0x18]
   334ef:	jmp    332a7 <retrieve_tree+0x9b7>
   334f4:	nop    DWORD PTR [rax+0x0]
   334f8:	mov    rdi,QWORD PTR [rsp+0x60]
   334fd:	call   4bdc0 <rpl_free>
   33502:	jmp    32dfe <retrieve_tree+0x50e>
   33507:	nop    WORD PTR [rax+rax*1+0x0]
   33510:	mov    rax,QWORD PTR [rsp+0x98]
   33518:	mov    DWORD PTR [rsp+0x7c],0x0
   33520:	mov    QWORD PTR [rsp+0x60],rax
   33525:	jmp    32cb3 <retrieve_tree+0x3c3>
   3352a:	nop    WORD PTR [rax+rax*1+0x0]
   33530:	lea    rsi,[rip+0x39aa3]        # 6cfda <eta_str.8886+0x262>
   33537:	jmp    32f1c <retrieve_tree+0x62c>
   3353c:	nop    DWORD PTR [rax+0x0]
   33540:	mov    rsi,QWORD PTR [rsp+0x98]
   33548:	mov    rdx,rax
   3354b:	xor    eax,eax
   3354d:	lea    rdi,[rip+0x39ce4]        # 6d238 <eta_str.8886+0x4c0>
   33554:	call   2e250 <debug_logprintf>
   33559:	mov    r12,QWORD PTR [rsp+0xa8]
   33561:	jmp    32fec <retrieve_tree+0x6fc>
   33566:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33570:	call   c740 <__errno_location@plt>
   33575:	mov    edi,DWORD PTR [rax]
   33577:	call   c540 <strerror@plt>
   3357c:	mov    rdx,QWORD PTR [rip+0x56e5d]        # 8a3e0 <opt+0x360>
   33583:	mov    edi,0x1
   33588:	lea    rsi,[rip+0x352b6]        # 68845 <primes.6089+0x2765>
   3358f:	mov    rcx,rax
   33592:	xor    eax,eax
   33594:	call   2e0a0 <logprintf>
   33599:	jmp    32a1c <retrieve_tree+0x12c>
   3359e:	test   al,al
   335a0:	jne    32f15 <retrieve_tree+0x625>
   335a6:	cmp    BYTE PTR [rip+0x56b3b],0x0        # 8a0e8 <opt+0x68>
   335ad:	lea    rsi,[rip+0x399fa]        # 6cfae <eta_str.8886+0x236>
   335b4:	lea    rax,[rip+0x39a1f]        # 6cfda <eta_str.8886+0x262>
   335bb:	cmovne rsi,rax
   335bf:	jmp    32f1c <retrieve_tree+0x62c>
   335c4:	nop    DWORD PTR [rax+0x0]
   335c8:	mov    rsi,QWORD PTR [rip+0x56e01]        # 8a3d0 <opt+0x350>
   335cf:	mov    edx,0x1
   335d4:	mov    rdi,rax
   335d7:	call   40130 <set_uri_encoding>
   335dc:	jmp    32975 <retrieve_tree+0x85>
   335e1:	mov    BYTE PTR [rsp+0x10],bpl
   335e6:	jmp    33168 <retrieve_tree+0x878>
   335eb:	mov    rsi,r10
   335ee:	lea    rdi,[rip+0x39cab]        # 6d2a0 <eta_str.8886+0x528>
   335f5:	xor    eax,eax
   335f7:	mov    DWORD PTR [rsp+0x50],r8d
   335fc:	call   2e250 <debug_logprintf>
   33601:	mov    r8d,DWORD PTR [rsp+0x50]
   33606:	jmp    33403 <retrieve_tree+0xb13>
   3360b:	call   c7b0 <__stack_chk_fail@plt>

0000000000033610 <add_path>:
   33610:	push   r13
   33612:	push   r12
   33614:	mov    r12d,ecx
   33617:	push   rbp
   33618:	mov    ebp,r8d
   3361b:	push   rbx
   3361c:	mov    rbx,rdi
   3361f:	mov    rdi,rsi
   33622:	mov    rsi,rdx
   33625:	sub    rsp,0x8
   33629:	cmp    rdi,rdx
   3362c:	jae    33639 <add_path+0x29>
   3362e:	xor    eax,eax
   33630:	cmp    BYTE PTR [rdi],0x2f
   33633:	sete   al
   33636:	add    rdi,rax
   33639:	call   3b8a0 <strdupdelim>
   3363e:	mov    r13,rax
   33641:	mov    eax,DWORD PTR [rbx]
   33643:	lea    edx,[rax+0x1]
   33646:	mov    eax,DWORD PTR [rbx+0x4]
   33649:	mov    DWORD PTR [rbx],edx
   3364b:	cmp    edx,eax
   3364d:	jg     33678 <add_path+0x68>
   3364f:	mov    rax,QWORD PTR [rbx+0x8]
   33653:	movsxd rdx,edx
   33656:	shl    rdx,0x4
   3365a:	lea    rax,[rax+rdx*1-0x10]
   3365f:	mov    QWORD PTR [rax],r13
   33662:	mov    BYTE PTR [rax+0x8],r12b
   33666:	mov    BYTE PTR [rax+0x9],bpl
   3366a:	add    rsp,0x8
   3366e:	pop    rbx
   3366f:	pop    rbp
   33670:	pop    r12
   33672:	pop    r13
   33674:	ret    
   33675:	nop    DWORD PTR [rax]
   33678:	test   eax,eax
   3367a:	je     336a0 <add_path+0x90>
   3367c:	add    eax,eax
   3367e:	movsxd rsi,eax
   33681:	shl    rsi,0x4
   33685:	mov    DWORD PTR [rbx+0x4],eax
   33688:	mov    rdi,QWORD PTR [rbx+0x8]
   3368c:	call   4b870 <xrealloc>
   33691:	mov    edx,DWORD PTR [rbx]
   33693:	mov    QWORD PTR [rbx+0x8],rax
   33697:	jmp    33653 <add_path+0x43>
   33699:	nop    DWORD PTR [rax+0x0]
   336a0:	mov    esi,0x10
   336a5:	mov    eax,0x1
   336aa:	jmp    33685 <add_path+0x75>
   336ac:	nop    DWORD PTR [rax+0x0]

00000000000336b0 <res_parse>:
   336b0:	endbr64 
   336b4:	push   r15
   336b6:	push   r14
   336b8:	mov    r14,rdi
   336bb:	push   r13
   336bd:	push   r12
   336bf:	push   rbp
   336c0:	push   rbx
   336c1:	movsxd rbx,esi
   336c4:	mov    esi,0x10
   336c9:	add    rbx,rdi
   336cc:	mov    edi,0x1
   336d1:	sub    rsp,0x28
   336d5:	call   4b9c0 <xcalloc>
   336da:	mov    r12,rax
   336dd:	cmp    r14,rbx
   336e0:	je     33b82 <res_parse+0x4d2>
   336e6:	mov    BYTE PTR [rsp+0xf],0x0
   336eb:	xor    r13d,r13d
   336ee:	mov    ebp,0x1
   336f3:	mov    BYTE PTR [rsp+0xe],0x0
   336f8:	mov    DWORD PTR [rsp+0x8],0x0
   33700:	mov    rdx,rbx
   33703:	mov    esi,0xa
   33708:	mov    rdi,r14
   3370b:	sub    rdx,r14
   3370e:	call   bf70 <memchr@plt>
   33713:	test   rax,rax
   33716:	je     33990 <res_parse+0x2e0>
   3371c:	lea    r15,[rax+0x1]
   33720:	cmp    r15,r14
   33723:	jbe    337f9 <res_parse+0x149>
   33729:	movzx  eax,BYTE PTR [r14]
   3372d:	cmp    al,0xd
   3372f:	jg     33810 <res_parse+0x160>
   33735:	cmp    al,0x8
   33737:	jg     33818 <res_parse+0x168>
   3373d:	cmp    r14,r15
   33740:	jae    337f9 <res_parse+0x149>
   33746:	cmp    al,0x23
   33748:	je     337f9 <res_parse+0x149>
   3374e:	mov    rdx,r14
   33751:	jmp    33766 <res_parse+0xb6>
   33753:	nop    DWORD PTR [rax+rax*1+0x0]
   33758:	cmp    cl,0x8
   3375b:	jg     33779 <res_parse+0xc9>
   3375d:	add    rdx,0x1
   33761:	cmp    rdx,r15
   33764:	je     33783 <res_parse+0xd3>
   33766:	cmp    rdx,r14
   33769:	je     33779 <res_parse+0xc9>
   3376b:	movzx  ecx,BYTE PTR [rdx-0x1]
   3376f:	cmp    cl,0xd
   33772:	jle    33758 <res_parse+0xa8>
   33774:	cmp    cl,0x20
   33777:	jne    3375d <res_parse+0xad>
   33779:	cmp    BYTE PTR [rdx],0x23
   3377c:	jne    3375d <res_parse+0xad>
   3377e:	cmp    rdx,r14
   33781:	jbe    337ec <res_parse+0x13c>
   33783:	movzx  ecx,BYTE PTR [rdx-0x1]
   33787:	cmp    cl,0xd
   3378a:	jg     33930 <res_parse+0x280>
   33790:	cmp    cl,0x8
   33793:	jg     33939 <res_parse+0x289>
   33799:	cmp    rdx,r14
   3379c:	jbe    337ec <res_parse+0x13c>
   3379e:	mov    rcx,r14
   337a1:	jmp    337c5 <res_parse+0x115>
   337a3:	nop    DWORD PTR [rax+rax*1+0x0]
   337a8:	cmp    al,0x40
   337aa:	jg     337b9 <res_parse+0x109>
   337ac:	lea    esi,[rax-0x30]
   337af:	cmp    sil,0x9
   337b3:	jbe    337b9 <res_parse+0x109>
   337b5:	cmp    al,0x2d
   337b7:	jne    337d2 <res_parse+0x122>
   337b9:	add    rcx,0x1
   337bd:	cmp    rcx,rdx
   337c0:	je     337ec <res_parse+0x13c>
   337c2:	movzx  eax,BYTE PTR [rcx]
   337c5:	cmp    al,0x5a
   337c7:	jle    337a8 <res_parse+0xf8>
   337c9:	lea    esi,[rax-0x61]
   337cc:	cmp    sil,0x19
   337d0:	jbe    337b9 <res_parse+0x109>
   337d2:	cmp    rcx,rdx
   337d5:	jae    337ec <res_parse+0x13c>
   337d7:	mov    r10,rcx
   337da:	nop    WORD PTR [rax+rax*1+0x0]
   337e0:	cmp    al,0xd
   337e2:	jg     33860 <res_parse+0x1b0>
   337e4:	cmp    al,0x8
   337e6:	jg     33970 <res_parse+0x2c0>
   337ec:	cmp    BYTE PTR [rip+0x56ac8],0x0        # 8a2bb <opt+0x23b>
   337f3:	jne    33953 <res_parse+0x2a3>
   337f9:	add    ebp,0x1
   337fc:	cmp    r15,rbx
   337ff:	je     33830 <res_parse+0x180>
   33801:	mov    r14,r15
   33804:	jmp    33700 <res_parse+0x50>
   33809:	nop    DWORD PTR [rax+0x0]
   33810:	cmp    al,0x20
   33812:	jne    3373d <res_parse+0x8d>
   33818:	add    r14,0x1
   3381c:	cmp    r14,r15
   3381f:	jb     33729 <res_parse+0x79>
   33825:	add    ebp,0x1
   33828:	cmp    r15,rbx
   3382b:	jne    33801 <res_parse+0x151>
   3382d:	nop    DWORD PTR [rax]
   33830:	mov    edx,DWORD PTR [r12]
   33834:	test   r13b,r13b
   33837:	jne    33a10 <res_parse+0x360>
   3383d:	cmp    DWORD PTR [r12+0x4],edx
   33842:	jg     339c7 <res_parse+0x317>
   33848:	add    rsp,0x28
   3384c:	mov    rax,r12
   3384f:	pop    rbx
   33850:	pop    rbp
   33851:	pop    r12
   33853:	pop    r13
   33855:	pop    r14
   33857:	pop    r15
   33859:	ret    
   3385a:	nop    WORD PTR [rax+rax*1+0x0]
   33860:	cmp    al,0x20
   33862:	je     33970 <res_parse+0x2c0>
   33868:	cmp    rcx,r14
   3386b:	sete   dil
   3386f:	cmp    r10,rdx
   33872:	setae  sil
   33876:	or     dil,sil
   33879:	jne    337ec <res_parse+0x13c>
   3387f:	cmp    al,0x3a
   33881:	jne    337ec <res_parse+0x13c>
   33887:	add    r10,0x1
   3388b:	cmp    r10,rdx
   3388e:	jae    339bd <res_parse+0x30d>
   33894:	movzx  eax,BYTE PTR [r10]
   33898:	cmp    al,0xd
   3389a:	jg     339a8 <res_parse+0x2f8>
   338a0:	cmp    al,0x8
   338a2:	jg     339b0 <res_parse+0x300>
   338a8:	cmp    r10,rdx
   338ab:	cmovae rdx,r10
   338af:	mov    QWORD PTR [rsp+0x10],rdx
   338b4:	sub    rcx,r14
   338b7:	mov    QWORD PTR [rsp+0x18],r10
   338bc:	cmp    rcx,0xa
   338c0:	je     33ace <res_parse+0x41e>
   338c6:	cmp    rcx,0x5
   338ca:	je     33b36 <res_parse+0x486>
   338d0:	cmp    rcx,0x8
   338d4:	jne    339eb <res_parse+0x33b>
   338da:	mov    edx,0x8
   338df:	lea    rsi,[rip+0x39b25]        # 6d40b <eta_str.8886+0x693>
   338e6:	mov    rdi,r14
   338e9:	call   433b0 <c_strncasecmp>
   338ee:	test   eax,eax
   338f0:	jne    339eb <res_parse+0x33b>
   338f6:	cmp    BYTE PTR [rsp+0xe],0x0
   338fb:	je     33920 <res_parse+0x270>
   338fd:	mov    r10,QWORD PTR [rsp+0x18]
   33902:	mov    rdx,QWORD PTR [rsp+0x10]
   33907:	xor    ecx,ecx
   33909:	mov    rdi,r12
   3390c:	movzx  r8d,BYTE PTR [rsp+0xf]
   33912:	cmp    r10,rdx
   33915:	mov    rsi,r10
   33918:	sete   cl
   3391b:	call   33610 <add_path>
   33920:	add    DWORD PTR [rsp+0x8],0x1
   33925:	jmp    337f9 <res_parse+0x149>
   3392a:	nop    WORD PTR [rax+rax*1+0x0]
   33930:	cmp    cl,0x20
   33933:	jne    33799 <res_parse+0xe9>
   33939:	sub    rdx,0x1
   3393d:	cmp    rdx,r14
   33940:	jne    33783 <res_parse+0xd3>
   33946:	cmp    BYTE PTR [rip+0x5696e],0x0        # 8a2bb <opt+0x23b>
   3394d:	je     337f9 <res_parse+0x149>
   33953:	mov    esi,ebp
   33955:	lea    rdi,[rip+0x39a88]        # 6d3e4 <eta_str.8886+0x66c>
   3395c:	xor    eax,eax
   3395e:	call   2e250 <debug_logprintf>
   33963:	jmp    337f9 <res_parse+0x149>
   33968:	nop    DWORD PTR [rax+rax*1+0x0]
   33970:	add    r10,0x1
   33974:	cmp    r10,rdx
   33977:	je     337ec <res_parse+0x13c>
   3397d:	movzx  eax,BYTE PTR [r10]
   33981:	jmp    337e0 <res_parse+0x130>
   33986:	nop    WORD PTR cs:[rax+rax*1+0x0]
   33990:	cmp    rbx,r14
   33993:	jbe    33830 <res_parse+0x180>
   33999:	mov    r15,rbx
   3399c:	jmp    33729 <res_parse+0x79>
   339a1:	nop    DWORD PTR [rax+0x0]
   339a8:	cmp    al,0x20
   339aa:	jne    338a8 <res_parse+0x1f8>
   339b0:	add    r10,0x1
   339b4:	cmp    r10,rdx
   339b7:	jne    33894 <res_parse+0x1e4>
   339bd:	mov    QWORD PTR [rsp+0x10],r10
   339c2:	jmp    338b4 <res_parse+0x204>
   339c7:	movsxd rsi,edx
   339ca:	mov    rdi,QWORD PTR [r12+0x8]
   339cf:	shl    rsi,0x4
   339d3:	call   4b870 <xrealloc>
   339d8:	mov    QWORD PTR [r12+0x8],rax
   339dd:	mov    eax,DWORD PTR [r12]
   339e1:	mov    DWORD PTR [r12+0x4],eax
   339e6:	jmp    33848 <res_parse+0x198>
   339eb:	cmp    BYTE PTR [rip+0x568c9],0x0        # 8a2bb <opt+0x23b>
   339f2:	je     337f9 <res_parse+0x149>
   339f8:	mov    esi,ebp
   339fa:	lea    rdi,[rip+0x39a47]        # 6d448 <eta_str.8886+0x6d0>
   33a01:	xor    eax,eax
   33a03:	call   2e250 <debug_logprintf>
   33a08:	jmp    337f9 <res_parse+0x149>
   33a0d:	nop    DWORD PTR [rax]
   33a10:	test   edx,edx
   33a12:	jle    33b89 <res_parse+0x4d9>
   33a18:	mov    rcx,QWORD PTR [r12+0x8]
   33a1d:	sub    edx,0x1
   33a20:	xor    ebp,ebp
   33a22:	shl    rdx,0x4
   33a26:	lea    rax,[rcx+0x9]
   33a2a:	lea    rdx,[rcx+rdx*1+0x19]
   33a2f:	nop
   33a30:	cmp    BYTE PTR [rax],0x1
   33a33:	sbb    ebp,0xffffffff
   33a36:	add    rax,0x10
   33a3a:	cmp    rdx,rax
   33a3d:	jne    33a30 <res_parse+0x380>
   33a3f:	movsxd rdi,ebp
   33a42:	shl    rdi,0x4
   33a46:	call   4b850 <xmalloc>
   33a4b:	mov    rdi,QWORD PTR [r12+0x8]
   33a50:	mov    r15,rax
   33a53:	mov    eax,DWORD PTR [r12]
   33a57:	test   eax,eax
   33a59:	jle    33ab6 <res_parse+0x406>
   33a5b:	xor    ebx,ebx
   33a5d:	xor    r14d,r14d
   33a60:	jmp    33a86 <res_parse+0x3d6>
   33a62:	nop    WORD PTR [rax+rax*1+0x0]
   33a68:	movsxd rcx,r14d
   33a6b:	movdqu xmm0,XMMWORD PTR [rdx]
   33a6f:	add    r14d,0x1
   33a73:	add    rbx,0x1
   33a77:	shl    rcx,0x4
   33a7b:	movups XMMWORD PTR [r15+rcx*1],xmm0
   33a80:	cmp    DWORD PTR [r12],ebx
   33a84:	jle    33ab6 <res_parse+0x406>
   33a86:	mov    r13,rbx
   33a89:	shl    r13,0x4
   33a8d:	lea    rdx,[rdi+r13*1]
   33a91:	cmp    BYTE PTR [rdx+0x9],0x0
   33a95:	jne    33a68 <res_parse+0x3b8>
   33a97:	mov    rdi,QWORD PTR [rdx]
   33a9a:	add    rbx,0x1
   33a9e:	call   4bdc0 <rpl_free>
   33aa3:	mov    rdi,QWORD PTR [r12+0x8]
   33aa8:	mov    QWORD PTR [rdi+r13*1],0x0
   33ab0:	cmp    DWORD PTR [r12],ebx
   33ab4:	jg     33a86 <res_parse+0x3d6>
   33ab6:	call   4bdc0 <rpl_free>
   33abb:	mov    QWORD PTR [r12+0x8],r15
   33ac0:	mov    DWORD PTR [r12],ebp
   33ac4:	mov    DWORD PTR [r12+0x4],ebp
   33ac9:	jmp    33848 <res_parse+0x198>
   33ace:	mov    edx,0xa
   33ad3:	lea    rsi,[rip+0x39926]        # 6d400 <eta_str.8886+0x688>
   33ada:	mov    rdi,r14
   33add:	call   433b0 <c_strncasecmp>
   33ae2:	test   eax,eax
   33ae4:	jne    339eb <res_parse+0x33b>
   33aea:	mov    edx,DWORD PTR [rsp+0x8]
   33aee:	movzx  r14d,BYTE PTR [rsp+0xe]
   33af4:	mov    r10,QWORD PTR [rsp+0x18]
   33af9:	test   edx,edx
   33afb:	setne  al
   33afe:	xor    r14d,0x1
   33b02:	or     al,r14b
   33b05:	mov    BYTE PTR [rsp+0xe],al
   33b09:	jne    33b92 <res_parse+0x4e2>
   33b0f:	movzx  eax,BYTE PTR [rsp+0xf]
   33b14:	mov    r14d,0x1
   33b1a:	mov    DWORD PTR [rsp+0x8],0x0
   33b22:	test   al,al
   33b24:	cmovne r14d,eax
   33b28:	cmovne r13d,eax
   33b2c:	mov    BYTE PTR [rsp+0xe],r14b
   33b31:	jmp    337f9 <res_parse+0x149>
   33b36:	mov    edx,0x5
   33b3b:	lea    rsi,[rip+0x398cc]        # 6d40e <eta_str.8886+0x696>
   33b42:	mov    rdi,r14
   33b45:	call   433b0 <c_strncasecmp>
   33b4a:	test   eax,eax
   33b4c:	jne    339eb <res_parse+0x33b>
   33b52:	cmp    BYTE PTR [rsp+0xe],0x0
   33b57:	mov    r10,QWORD PTR [rsp+0x18]
   33b5c:	je     33920 <res_parse+0x270>
   33b62:	mov    rdx,QWORD PTR [rsp+0x10]
   33b67:	mov    ecx,0x1
   33b6c:	mov    rsi,r10
   33b6f:	mov    rdi,r12
   33b72:	movzx  r8d,BYTE PTR [rsp+0xf]
   33b78:	call   33610 <add_path>
   33b7d:	jmp    33920 <res_parse+0x270>
   33b82:	mov    edx,DWORD PTR [rax]
   33b84:	jmp    3383d <res_parse+0x18d>
   33b89:	xor    edi,edi
   33b8b:	xor    ebp,ebp
   33b8d:	jmp    33a46 <res_parse+0x396>
   33b92:	mov    rax,QWORD PTR [rsp+0x10]
   33b97:	sub    rax,r10
   33b9a:	cmp    eax,0x1
   33b9d:	je     33bbb <res_parse+0x50b>
   33b9f:	cmp    eax,0x4
   33ba2:	je     33bd6 <res_parse+0x526>
   33ba4:	mov    BYTE PTR [rsp+0xf],0x0
   33ba9:	mov    BYTE PTR [rsp+0xe],0x0
   33bae:	mov    DWORD PTR [rsp+0x8],0x0
   33bb6:	jmp    337f9 <res_parse+0x149>
   33bbb:	cmp    BYTE PTR [r10],0x2a
   33bbf:	mov    BYTE PTR [rsp+0xf],0x0
   33bc4:	mov    DWORD PTR [rsp+0x8],0x0
   33bcc:	sete   BYTE PTR [rsp+0xe]
   33bd1:	jmp    337f9 <res_parse+0x149>
   33bd6:	mov    edx,0x4
   33bdb:	lea    rsi,[rip+0x34da8]        # 6898a <primes.6089+0x28aa>
   33be2:	mov    rdi,r10
   33be5:	call   433b0 <c_strncasecmp>
   33bea:	mov    DWORD PTR [rsp+0x8],eax
   33bee:	test   eax,eax
   33bf0:	jne    33ba4 <res_parse+0x4f4>
   33bf2:	movzx  r13d,BYTE PTR [rsp+0xe]
   33bf8:	mov    BYTE PTR [rsp+0xf],r13b
   33bfd:	jmp    337f9 <res_parse+0x149>
   33c02:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   33c0d:	nop    DWORD PTR [rax]

0000000000033c10 <res_parse_from_file>:
   33c10:	endbr64 
   33c14:	push   r13
   33c16:	push   r12
   33c18:	mov    r12,rdi
   33c1b:	push   rbp
   33c1c:	call   3c810 <wget_read_file>
   33c21:	test   rax,rax
   33c24:	je     33c50 <res_parse_from_file+0x40>
   33c26:	mov    rdi,QWORD PTR [rax]
   33c29:	mov    esi,DWORD PTR [rax+0x8]
   33c2c:	mov    rbp,rax
   33c2f:	call   336b0 <res_parse>
   33c34:	mov    rdi,rbp
   33c37:	mov    r12,rax
   33c3a:	call   3ca20 <wget_read_file_free>
   33c3f:	mov    rax,r12
   33c42:	pop    rbp
   33c43:	pop    r12
   33c45:	pop    r13
   33c47:	ret    
   33c48:	nop    DWORD PTR [rax+rax*1+0x0]
   33c50:	call   c740 <__errno_location@plt>
   33c55:	mov    edi,DWORD PTR [rax]
   33c57:	call   c540 <strerror@plt>
   33c5c:	mov    edx,0x5
   33c61:	lea    rsi,[rip+0x397ac]        # 6d414 <eta_str.8886+0x69c>
   33c68:	xor    edi,edi
   33c6a:	mov    r13,rax
   33c6d:	call   c780 <dcgettext@plt>
   33c72:	mov    rdx,r12
   33c75:	mov    rcx,r13
   33c78:	mov    edi,0x1
   33c7d:	mov    rsi,rax
   33c80:	xor    eax,eax
   33c82:	xor    r12d,r12d
   33c85:	call   2e0a0 <logprintf>
   33c8a:	jmp    33c3f <res_parse_from_file+0x2f>
   33c8c:	nop    DWORD PTR [rax+0x0]

0000000000033c90 <res_match_path>:
   33c90:	endbr64 
   33c94:	push   r15
   33c96:	push   r14
   33c98:	push   r13
   33c9a:	push   r12
   33c9c:	push   rbp
   33c9d:	push   rbx
   33c9e:	sub    rsp,0x18
   33ca2:	test   rdi,rdi
   33ca5:	je     33e2a <res_match_path+0x19a>
   33cab:	mov    eax,DWORD PTR [rdi]
   33cad:	test   eax,eax
   33caf:	jle    33e2a <res_match_path+0x19a>
   33cb5:	mov    rbx,QWORD PTR [rdi+0x8]
   33cb9:	sub    eax,0x1
   33cbc:	movzx  r14d,BYTE PTR [rsi]
   33cc0:	mov    edx,0x1
   33cc5:	movabs r11,0x7e0000007e03ff
   33ccf:	shl    rax,0x4
   33cd3:	lea    rax,[rbx+rax*1+0x10]
   33cd8:	mov    QWORD PTR [rsp+0x8],rax
   33cdd:	nop    DWORD PTR [rax]
   33ce0:	mov    r13,QWORD PTR [rbx]
   33ce3:	movzx  eax,BYTE PTR [r13+0x0]
   33ce8:	test   al,al
   33cea:	je     33d2f <res_match_path+0x9f>
   33cec:	mov    edi,r14d
   33cef:	mov    r9,rsi
   33cf2:	mov    r10,r13
   33cf5:	test   dil,dil
   33cf8:	je     33e1b <res_match_path+0x18b>
   33cfe:	cmp    al,0x25
   33d00:	je     33df8 <res_match_path+0x168>
   33d06:	cmp    dil,0x25
   33d0a:	je     33d58 <res_match_path+0xc8>
   33d0c:	cmp    al,dil
   33d0f:	jne    33e1b <res_match_path+0x18b>
   33d15:	mov    rax,r10
   33d18:	mov    rcx,r9
   33d1b:	add    r10,0x1
   33d1f:	add    r9,0x1
   33d23:	movzx  eax,BYTE PTR [rax+0x1]
   33d27:	movzx  edi,BYTE PTR [rcx+0x1]
   33d2b:	test   al,al
   33d2d:	jne    33cf5 <res_match_path+0x65>
   33d2f:	cmp    BYTE PTR [rip+0x56585],0x0        # 8a2bb <opt+0x23b>
   33d36:	movzx  r12d,BYTE PTR [rbx+0x8]
   33d3b:	jne    33ee0 <res_match_path+0x250>
   33d41:	add    rsp,0x18
   33d45:	mov    eax,r12d
   33d48:	pop    rbx
   33d49:	pop    rbp
   33d4a:	pop    r12
   33d4c:	pop    r13
   33d4e:	pop    r14
   33d50:	pop    r15
   33d52:	ret    
   33d53:	mov    eax,0x25
   33d58:	movzx  r12d,BYTE PTR [r9+0x1]
   33d5d:	lea    r8d,[r12-0x30]
   33d62:	cmp    r8b,0x36
   33d66:	ja     33e90 <res_match_path+0x200>
   33d6c:	mov    ecx,r8d
   33d6f:	mov    rdi,rdx
   33d72:	shl    rdi,cl
   33d75:	mov    rcx,rdi
   33d78:	mov    edi,0x25
   33d7d:	test   rcx,r11
   33d80:	je     33d0c <res_match_path+0x7c>
   33d82:	movzx  ebp,BYTE PTR [r9+0x2]
   33d87:	lea    ecx,[rbp-0x30]
   33d8a:	cmp    cl,0x36
   33d8d:	ja     33e90 <res_match_path+0x200>
   33d93:	mov    r15,rdx
   33d96:	mov    edi,0x25
   33d9b:	shl    r15,cl
   33d9e:	test   r15,r11
   33da1:	je     33d0c <res_match_path+0x7c>
   33da7:	cmp    r12b,0x39
   33dab:	jle    33dbf <res_match_path+0x12f>
   33dad:	lea    edi,[r12-0x37]
   33db2:	lea    r8d,[r12-0x57]
   33db7:	cmp    r12b,0x46
   33dbb:	cmovbe r8d,edi
   33dbf:	shl    r8d,0x4
   33dc3:	cmp    bpl,0x39
   33dc7:	jle    33dd6 <res_match_path+0x146>
   33dc9:	lea    ecx,[rbp-0x37]
   33dcc:	lea    edi,[rbp-0x57]
   33dcf:	cmp    bpl,0x46
   33dd3:	cmova  ecx,edi
   33dd6:	add    ecx,r8d
   33dd9:	mov    edi,0x25
   33dde:	cmp    cl,0x2f
   33de1:	je     33d0c <res_match_path+0x7c>
   33de7:	mov    edi,ecx
   33de9:	add    r9,0x2
   33ded:	jmp    33d0c <res_match_path+0x7c>
   33df2:	nop    WORD PTR [rax+rax*1+0x0]
   33df8:	movzx  ebp,BYTE PTR [r10+0x1]
   33dfd:	lea    eax,[rbp-0x30]
   33e00:	cmp    al,0x36
   33e02:	ja     33e11 <res_match_path+0x181>
   33e04:	mov    r15,rdx
   33e07:	mov    ecx,eax
   33e09:	shl    r15,cl
   33e0c:	test   r15,r11
   33e0f:	jne    33e35 <res_match_path+0x1a5>
   33e11:	cmp    dil,0x25
   33e15:	je     33d53 <res_match_path+0xc3>
   33e1b:	add    rbx,0x10
   33e1f:	cmp    QWORD PTR [rsp+0x8],rbx
   33e24:	jne    33ce0 <res_match_path+0x50>
   33e2a:	mov    r12d,0x1
   33e30:	jmp    33d41 <res_match_path+0xb1>
   33e35:	movzx  r8d,BYTE PTR [r10+0x2]
   33e3a:	lea    ecx,[r8-0x30]
   33e3e:	cmp    cl,0x36
   33e41:	ja     33e11 <res_match_path+0x181>
   33e43:	mov    r12,rdx
   33e46:	shl    r12,cl
   33e49:	test   r12,r11
   33e4c:	je     33e11 <res_match_path+0x181>
   33e4e:	cmp    bpl,0x39
   33e52:	jle    33e63 <res_match_path+0x1d3>
   33e54:	lea    eax,[rbp-0x37]
   33e57:	lea    r12d,[rbp-0x57]
   33e5b:	cmp    bpl,0x46
   33e5f:	cmova  eax,r12d
   33e63:	shl    eax,0x4
   33e66:	cmp    r8b,0x39
   33e6a:	jle    33e7b <res_match_path+0x1eb>
   33e6c:	lea    ecx,[r8-0x37]
   33e70:	lea    ebp,[r8-0x57]
   33e74:	cmp    r8b,0x46
   33e78:	cmova  ecx,ebp
   33e7b:	add    eax,ecx
   33e7d:	cmp    al,0x2f
   33e7f:	je     33ea0 <res_match_path+0x210>
   33e81:	add    r10,0x2
   33e85:	jmp    33d06 <res_match_path+0x76>
   33e8a:	nop    WORD PTR [rax+rax*1+0x0]
   33e90:	mov    edi,0x25
   33e95:	jmp    33d0c <res_match_path+0x7c>
   33e9a:	nop    WORD PTR [rax+rax*1+0x0]
   33ea0:	cmp    dil,0x25
   33ea4:	jne    33e1b <res_match_path+0x18b>
   33eaa:	movzx  r12d,BYTE PTR [r9+0x1]
   33eaf:	lea    r8d,[r12-0x30]
   33eb4:	cmp    r8b,0x36
   33eb8:	ja     33d15 <res_match_path+0x85>
   33ebe:	mov    rax,rdx
   33ec1:	mov    ecx,r8d
   33ec4:	shl    rax,cl
   33ec7:	test   rax,r11
   33eca:	je     33d15 <res_match_path+0x85>
   33ed0:	mov    eax,0x25
   33ed5:	jmp    33d82 <res_match_path+0xf2>
   33eda:	nop    WORD PTR [rax+rax*1+0x0]
   33ee0:	mov    rdi,r13
   33ee3:	mov    QWORD PTR [rsp+0x8],rsi
   33ee8:	call   4b5b0 <quote>
   33eed:	test   r12b,r12b
   33ef0:	lea    r8,[rip+0x39531]        # 6d428 <eta_str.8886+0x6b0>
   33ef7:	mov    rsi,QWORD PTR [rsp+0x8]
   33efc:	mov    rcx,rax
   33eff:	lea    rax,[rip+0x3952b]        # 6d431 <eta_str.8886+0x6b9>
   33f06:	lea    rdi,[rip+0x39563]        # 6d470 <eta_str.8886+0x6f8>
   33f0d:	cmove  r8,rax
   33f11:	mov    rdx,rsi
   33f14:	xor    eax,eax
   33f16:	mov    rsi,r8
   33f19:	call   2e250 <debug_logprintf>
   33f1e:	jmp    33d41 <res_match_path+0xb1>
   33f23:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   33f2e:	xchg   ax,ax

0000000000033f30 <res_register_specs>:
   33f30:	endbr64 
   33f34:	push   r14
   33f36:	mov    r9,rdi
   33f39:	mov    ecx,0x100
   33f3e:	mov    r14,rdx
   33f41:	push   r13
   33f43:	mov    edx,0x1
   33f48:	mov    r13d,esi
   33f4b:	lea    r8,[rip+0x31f07]        # 65e59 <yy_accept+0xd99>
   33f52:	push   r12
   33f54:	mov    r12,rdi
   33f57:	push   rbp
   33f58:	push   rbx
   33f59:	sub    rsp,0x120
   33f60:	mov    rax,QWORD PTR fs:0x28
   33f69:	mov    QWORD PTR [rsp+0x118],rax
   33f71:	xor    eax,eax
   33f73:	lea    rbx,[rsp+0x10]
   33f78:	sub    rsp,0x8
   33f7c:	push   rsi
   33f7d:	mov    rdi,rbx
   33f80:	mov    esi,0x100
   33f85:	mov    rbp,rbx
   33f88:	call   c9d0 <__snprintf_chk@plt>
   33f8d:	pop    rdx
   33f8e:	pop    rcx
   33f8f:	cmp    eax,0xff
   33f94:	ja     34090 <res_register_specs+0x160>
   33f9a:	mov    rdi,QWORD PTR [rip+0x55c5f]        # 89c00 <registered_specs>
   33fa1:	test   rdi,rdi
   33fa4:	je     340b7 <res_register_specs+0x187>
   33faa:	mov    rcx,rsp
   33fad:	lea    rdx,[rsp+0x8]
   33fb2:	mov    rsi,rbp
   33fb5:	call   1db10 <hash_table_get_pair>
   33fba:	test   eax,eax
   33fbc:	je     34070 <res_register_specs+0x140>
   33fc2:	cmp    rbp,rbx
   33fc5:	je     33fcf <res_register_specs+0x9f>
   33fc7:	mov    rdi,rbp
   33fca:	call   4bdc0 <rpl_free>
   33fcf:	mov    r12,QWORD PTR [rsp]
   33fd3:	test   r12,r12
   33fd6:	je     3402d <res_register_specs+0xfd>
   33fd8:	mov    eax,DWORD PTR [r12]
   33fdc:	mov    rdi,QWORD PTR [r12+0x8]
   33fe1:	test   eax,eax
   33fe3:	jle    34017 <res_register_specs+0xe7>
   33fe5:	xor    ebp,ebp
   33fe7:	nop    WORD PTR [rax+rax*1+0x0]
   33ff0:	mov    rbx,rbp
   33ff3:	add    rbp,0x1
   33ff7:	shl    rbx,0x4
   33ffb:	mov    rdi,QWORD PTR [rdi+rbx*1]
   33fff:	call   4bdc0 <rpl_free>
   34004:	mov    rdi,QWORD PTR [r12+0x8]
   34009:	mov    QWORD PTR [rdi+rbx*1],0x0
   34011:	cmp    DWORD PTR [r12],ebp
   34015:	jg     33ff0 <res_register_specs+0xc0>
   34017:	call   4bdc0 <rpl_free>
   3401c:	mov    rdi,r12
   3401f:	mov    QWORD PTR [r12+0x8],0x0
   34028:	call   4bdc0 <rpl_free>
   3402d:	mov    rsi,QWORD PTR [rsp+0x8]
   34032:	mov    rdi,QWORD PTR [rip+0x55bc7]        # 89c00 <registered_specs>
   34039:	mov    rdx,r14
   3403c:	call   1dc80 <hash_table_put>
   34041:	mov    rax,QWORD PTR [rsp+0x118]
   34049:	xor    rax,QWORD PTR fs:0x28
   34052:	jne    340dd <res_register_specs+0x1ad>
   34058:	add    rsp,0x120
   3405f:	pop    rbx
   34060:	pop    rbp
   34061:	pop    r12
   34063:	pop    r13
   34065:	pop    r14
   34067:	ret    
   34068:	nop    DWORD PTR [rax+rax*1+0x0]
   34070:	cmp    rbp,rbx
   34073:	je     340d0 <res_register_specs+0x1a0>
   34075:	mov    rdi,QWORD PTR [rip+0x55b84]        # 89c00 <registered_specs>
   3407c:	mov    rdx,r14
   3407f:	mov    rsi,rbp
   34082:	call   1dc80 <hash_table_put>
   34087:	jmp    34041 <res_register_specs+0x111>
   34089:	nop    DWORD PTR [rax+0x0]
   34090:	lea    rdi,[rip+0x31dc2]        # 65e59 <yy_accept+0xd99>
   34097:	mov    edx,r13d
   3409a:	mov    rsi,r12
   3409d:	xor    eax,eax
   3409f:	call   3ba30 <aprintf>
   340a4:	mov    rdi,QWORD PTR [rip+0x55b55]        # 89c00 <registered_specs>
   340ab:	mov    rbp,rax
   340ae:	test   rdi,rdi
   340b1:	jne    33faa <res_register_specs+0x7a>
   340b7:	call   1e160 <make_nocase_string_hash_table>
   340bc:	mov    QWORD PTR [rip+0x55b3d],rax        # 89c00 <registered_specs>
   340c3:	mov    rdi,rax
   340c6:	jmp    33faa <res_register_specs+0x7a>
   340cb:	nop    DWORD PTR [rax+rax*1+0x0]
   340d0:	mov    rdi,rbp
   340d3:	call   4ba50 <xstrdup>
   340d8:	mov    rbp,rax
   340db:	jmp    34075 <res_register_specs+0x145>
   340dd:	call   c7b0 <__stack_chk_fail@plt>
   340e2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   340ed:	nop    DWORD PTR [rax]

00000000000340f0 <res_get_specs>:
   340f0:	endbr64 
   340f4:	push   r12
   340f6:	push   rbp
   340f7:	push   rbx
   340f8:	sub    rsp,0x110
   340ff:	mov    rax,QWORD PTR fs:0x28
   34108:	mov    QWORD PTR [rsp+0x108],rax
   34110:	xor    eax,eax
   34112:	mov    rax,QWORD PTR [rip+0x55ae7]        # 89c00 <registered_specs>
   34119:	test   rax,rax
   3411c:	je     34167 <res_get_specs+0x77>
   3411e:	mov    rbx,rsp
   34121:	sub    rsp,0x8
   34125:	mov    r9,rdi
   34128:	mov    ecx,0x100
   3412d:	push   rsi
   3412e:	mov    edx,0x1
   34133:	mov    rbp,rdi
   34136:	mov    r12d,esi
   34139:	lea    r8,[rip+0x31d19]        # 65e59 <yy_accept+0xd99>
   34140:	mov    esi,0x100
   34145:	mov    rdi,rbx
   34148:	xor    eax,eax
   3414a:	call   c9d0 <__snprintf_chk@plt>
   3414f:	pop    rdx
   34150:	mov    rsi,rbx
   34153:	pop    rcx
   34154:	cmp    eax,0xff
   34159:	ja     34190 <res_get_specs+0xa0>
   3415b:	mov    rdi,QWORD PTR [rip+0x55a9e]        # 89c00 <registered_specs>
   34162:	call   1da70 <hash_table_get>
   34167:	mov    rcx,QWORD PTR [rsp+0x108]
   3416f:	xor    rcx,QWORD PTR fs:0x28
   34178:	jne    341a9 <res_get_specs+0xb9>
   3417a:	add    rsp,0x110
   34181:	pop    rbx
   34182:	pop    rbp
   34183:	pop    r12
   34185:	ret    
   34186:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34190:	mov    rsi,rbp
   34193:	mov    edx,r12d
   34196:	lea    rdi,[rip+0x31cbc]        # 65e59 <yy_accept+0xd99>
   3419d:	xor    eax,eax
   3419f:	call   3ba30 <aprintf>
   341a4:	mov    rsi,rax
   341a7:	jmp    3415b <res_get_specs+0x6b>
   341a9:	call   c7b0 <__stack_chk_fail@plt>
   341ae:	xchg   ax,ax

00000000000341b0 <res_retrieve_file>:
   341b0:	endbr64 
   341b4:	push   r15
   341b6:	push   r14
   341b8:	push   r13
   341ba:	mov    r13,rdx
   341bd:	push   r12
   341bf:	mov    r12,rdi
   341c2:	push   rbp
   341c3:	push   rbx
   341c4:	mov    rbx,rsi
   341c7:	sub    rsp,0x28
   341cb:	mov    rax,QWORD PTR fs:0x28
   341d4:	mov    QWORD PTR [rsp+0x18],rax
   341d9:	xor    eax,eax
   341db:	call   40010 <iri_new>
   341e0:	mov    rdi,r12
   341e3:	lea    rsi,[rip+0x39251]        # 6d43b <eta_str.8886+0x6c3>
   341ea:	mov    rbp,rax
   341ed:	call   37e80 <uri_merge>
   341f2:	mov    rsi,QWORD PTR [r13+0x0]
   341f6:	xor    edx,edx
   341f8:	mov    rdi,rbp
   341fb:	mov    r12,rax
   341fe:	movzx  r15d,BYTE PTR [rip+0x560b6]        # 8a2bc <opt+0x23c>
   34206:	movzx  r14d,BYTE PTR [rip+0x55eda]        # 8a0e8 <opt+0x68>
   3420e:	call   40130 <set_uri_encoding>
   34213:	mov    BYTE PTR [rbp+0x18],0x0
   34217:	mov    edx,0x5
   3421c:	xor    edi,edi
   3421e:	lea    rsi,[rip+0x3926b]        # 6d490 <eta_str.8886+0x718>
   34225:	call   c780 <dcgettext@plt>
   3422a:	xor    edi,edi
   3422c:	mov    rsi,rax
   3422f:	call   2de60 <logputs>
   34234:	lea    rsi,[rsp+0x14]
   34239:	mov    rdx,rbp
   3423c:	mov    rdi,r12
   3423f:	mov    QWORD PTR [rbx],0x0
   34246:	mov    ecx,0x1
   3424b:	mov    BYTE PTR [rip+0x5606a],0x0        # 8a2bc <opt+0x23c>
   34252:	mov    BYTE PTR [rip+0x55e8f],0x0        # 8a0e8 <opt+0x68>
   34259:	call   385f0 <url_parse>
   3425e:	test   rax,rax
   34261:	je     342f0 <res_retrieve_file+0x140>
   34267:	sub    rsp,0x8
   3426b:	mov    rsi,r12
   3426e:	xor    r9d,r9d
   34271:	xor    r8d,r8d
   34274:	push   0x0
   34276:	xor    ecx,ecx
   34278:	mov    rdx,rbx
   3427b:	mov    rdi,rax
   3427e:	push   rbp
   3427f:	push   0x0
   34281:	mov    QWORD PTR [rsp+0x28],rax
   34286:	call   35290 <retrieve_url>
   3428b:	mov    rdi,QWORD PTR [rsp+0x28]
   34290:	add    rsp,0x20
   34294:	mov    r13d,eax
   34297:	call   374d0 <url_free>
   3429c:	mov    rdi,r12
   3429f:	mov    BYTE PTR [rip+0x56016],r15b        # 8a2bc <opt+0x23c>
   342a6:	mov    r12d,0x1
   342ac:	mov    BYTE PTR [rip+0x55e35],r14b        # 8a0e8 <opt+0x68>
   342b3:	call   4bdc0 <rpl_free>
   342b8:	mov    rdi,rbp
   342bb:	call   400d0 <iri_free>
   342c0:	cmp    r13d,0x19
   342c4:	jne    3433e <res_retrieve_file+0x18e>
   342c6:	mov    rax,QWORD PTR [rsp+0x18]
   342cb:	xor    rax,QWORD PTR fs:0x28
   342d4:	jne    3435e <res_retrieve_file+0x1ae>
   342da:	add    rsp,0x28
   342de:	mov    eax,r12d
   342e1:	pop    rbx
   342e2:	pop    rbp
   342e3:	pop    r12
   342e5:	pop    r13
   342e7:	pop    r14
   342e9:	pop    r15
   342eb:	ret    
   342ec:	nop    DWORD PTR [rax+0x0]
   342f0:	mov    esi,DWORD PTR [rsp+0x14]
   342f4:	mov    rdi,r12
   342f7:	call   373b0 <url_error>
   342fc:	mov    rdx,r12
   342ff:	mov    edi,0x1
   34304:	lea    rsi,[rip+0x3475d]        # 68a68 <primes.6089+0x2988>
   3430b:	mov    rcx,rax
   3430e:	mov    r13,rax
   34311:	xor    eax,eax
   34313:	call   2e0a0 <logprintf>
   34318:	mov    rdi,r13
   3431b:	call   4bdc0 <rpl_free>
   34320:	mov    rdi,r12
   34323:	mov    BYTE PTR [rip+0x55f92],r15b        # 8a2bc <opt+0x23c>
   3432a:	mov    BYTE PTR [rip+0x55db7],r14b        # 8a0e8 <opt+0x68>
   34331:	call   4bdc0 <rpl_free>
   34336:	mov    rdi,rbp
   34339:	call   400d0 <iri_free>
   3433e:	mov    rdi,QWORD PTR [rbx]
   34341:	xor    r12d,r12d
   34344:	test   rdi,rdi
   34347:	je     342c6 <res_retrieve_file+0x116>
   3434d:	call   4bdc0 <rpl_free>
   34352:	mov    QWORD PTR [rbx],0x0
   34359:	jmp    342c6 <res_retrieve_file+0x116>
   3435e:	call   c7b0 <__stack_chk_fail@plt>
   34363:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3436e:	xchg   ax,ax

0000000000034370 <is_robots_txt_url>:
   34370:	endbr64 
   34374:	push   r12
   34376:	lea    rsi,[rip+0x390be]        # 6d43b <eta_str.8886+0x6c3>
   3437d:	mov    r12,rdi
   34380:	push   rbp
   34381:	sub    rsp,0x8
   34385:	call   37e80 <uri_merge>
   3438a:	mov    rdi,r12
   3438d:	mov    rbp,rax
   34390:	mov    rsi,rax
   34393:	call   39270 <are_urls_equal>
   34398:	mov    rdi,rbp
   3439b:	mov    r12d,eax
   3439e:	call   4bdc0 <rpl_free>
   343a3:	add    rsp,0x8
   343a7:	mov    eax,r12d
   343aa:	pop    rbp
   343ab:	pop    r12
   343ad:	ret    
   343ae:	xchg   ax,ax

00000000000343b0 <line_terminator>:
   343b0:	endbr64 
   343b4:	sub    rsp,0x8
   343b8:	mov    rdi,rsi
   343bb:	movsxd rdx,edx
   343be:	mov    esi,0xa
   343c3:	call   bf70 <memchr@plt>
   343c8:	cmp    rax,0x1
   343cc:	sbb    rax,0xffffffffffffffff
   343d0:	add    rsp,0x8
   343d4:	ret    
   343d5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000343e0 <getproxy.isra.0>:
   343e0:	cmp    BYTE PTR [rip+0x55e3a],0x0        # 8a221 <opt+0x1a1>
   343e7:	je     344d0 <getproxy.isra.0+0xf0>
   343ed:	push   rbp
   343ee:	push   rbx
   343ef:	mov    rbx,rdi
   343f2:	sub    rsp,0x8
   343f6:	mov    rdi,QWORD PTR [rip+0x55e43]        # 8a240 <opt+0x1c0>
   343fd:	test   rdi,rdi
   34400:	je     34412 <getproxy.isra.0+0x32>
   34402:	mov    rsi,QWORD PTR [rsi]
   34405:	call   1ec90 <sufmatch>
   3440a:	test   al,al
   3440c:	jne    344a0 <getproxy.isra.0+0xc0>
   34412:	mov    eax,DWORD PTR [rbx]
   34414:	cmp    eax,0x2
   34417:	je     34480 <getproxy.isra.0+0xa0>
   34419:	ja     34440 <getproxy.isra.0+0x60>
   3441b:	test   eax,eax
   3441d:	je     344b0 <getproxy.isra.0+0xd0>
   34423:	mov    rbp,QWORD PTR [rip+0x55e0e]        # 8a238 <opt+0x1b8>
   3442a:	test   rbp,rbp
   3442d:	jne    34455 <getproxy.isra.0+0x75>
   3442f:	lea    rdi,[rip+0x39090]        # 6d4c6 <eta_str.8886+0x74e>
   34436:	call   c720 <getenv@plt>
   3443b:	mov    rbp,rax
   3443e:	jmp    3449b <getproxy.isra.0+0xbb>
   34440:	cmp    eax,0x3
   34443:	jne    344a0 <getproxy.isra.0+0xc0>
   34445:	mov    rbp,QWORD PTR [rip+0x55de4]        # 8a230 <opt+0x1b0>
   3444c:	test   rbp,rbp
   3444f:	je     344d8 <getproxy.isra.0+0xf8>
   34455:	cmp    BYTE PTR [rbp+0x0],0x0
   34459:	je     344a0 <getproxy.isra.0+0xc0>
   3445b:	mov    rdi,rbp
   3445e:	call   372f0 <rewrite_shorthand_url>
   34463:	test   rax,rax
   34466:	jne    344a2 <getproxy.isra.0+0xc2>
   34468:	add    rsp,0x8
   3446c:	mov    rdi,rbp
   3446f:	pop    rbx
   34470:	pop    rbp
   34471:	jmp    c760 <strdup@plt>
   34476:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34480:	mov    rbp,QWORD PTR [rip+0x55da9]        # 8a230 <opt+0x1b0>
   34487:	test   rbp,rbp
   3448a:	jne    34455 <getproxy.isra.0+0x75>
   3448c:	lea    rdi,[rip+0x3904a]        # 6d4dd <eta_str.8886+0x765>
   34493:	call   c720 <getenv@plt>
   34498:	mov    rbp,rax
   3449b:	test   rbp,rbp
   3449e:	jne    34455 <getproxy.isra.0+0x75>
   344a0:	xor    eax,eax
   344a2:	add    rsp,0x8
   344a6:	pop    rbx
   344a7:	pop    rbp
   344a8:	ret    
   344a9:	nop    DWORD PTR [rax+0x0]
   344b0:	mov    rbp,QWORD PTR [rip+0x55d71]        # 8a228 <opt+0x1a8>
   344b7:	test   rbp,rbp
   344ba:	jne    34455 <getproxy.isra.0+0x75>
   344bc:	lea    rdi,[rip+0x38ff8]        # 6d4bb <eta_str.8886+0x743>
   344c3:	call   c720 <getenv@plt>
   344c8:	mov    rbp,rax
   344cb:	jmp    3449b <getproxy.isra.0+0xbb>
   344cd:	nop    DWORD PTR [rax]
   344d0:	xor    eax,eax
   344d2:	ret    
   344d3:	nop    DWORD PTR [rax+rax*1+0x0]
   344d8:	lea    rdi,[rip+0x38ff3]        # 6d4d2 <eta_str.8886+0x75a>
   344df:	call   c720 <getenv@plt>
   344e4:	mov    rbp,rax
   344e7:	jmp    3449b <getproxy.isra.0+0xbb>
   344e9:	nop    DWORD PTR [rax+0x0]

00000000000344f0 <fd_read_hunk>:
   344f0:	endbr64 
   344f4:	push   r15
   344f6:	push   r14
   344f8:	push   r13
   344fa:	xor    r13d,r13d
   344fd:	push   r12
   344ff:	xor    r12d,r12d
   34502:	push   rbp
   34503:	push   rbx
   34504:	mov    rbx,rdx
   34507:	sub    rsp,0x28
   3450b:	mov    DWORD PTR [rsp+0x4],edi
   3450f:	mov    rdi,rdx
   34512:	mov    QWORD PTR [rsp+0x10],rsi
   34517:	mov    QWORD PTR [rsp+0x18],rcx
   3451c:	call   4b850 <xmalloc>
   34521:	mov    rbp,rax
   34524:	nop    DWORD PTR [rax+0x0]
   34528:	mov    rax,QWORD PTR [rip+0x26cf1]        # 5b220 <_IO_stdin_used+0x220>
   3452f:	mov    edi,DWORD PTR [rsp+0x4]
   34533:	lea    r15,[rbp+r13*1+0x0]
   34538:	lea    edx,[rbx-0x1]
   3453b:	sub    edx,r12d
   3453e:	mov    rsi,r15
   34541:	movq   xmm0,rax
   34546:	call   f190 <fd_peek>
   3454b:	mov    r14d,eax
   3454e:	test   eax,eax
   34550:	js     34680 <fd_read_hunk+0x190>
   34556:	mov    edx,eax
   34558:	mov    rsi,r15
   3455b:	mov    rax,QWORD PTR [rsp+0x10]
   34560:	mov    rdi,rbp
   34563:	call   rax
   34565:	mov    r8,rax
   34568:	test   rax,rax
   3456b:	je     3458d <fd_read_hunk+0x9d>
   3456d:	mov    rdx,rax
   34570:	sub    rdx,r15
   34573:	mov    r14d,edx
   34576:	test   edx,edx
   34578:	je     34690 <fd_read_hunk+0x1a0>
   3457e:	add    edx,r12d
   34581:	movsxd rax,edx
   34584:	cmp    rax,rbx
   34587:	jge    34620 <fd_read_hunk+0x130>
   3458d:	mov    edi,DWORD PTR [rsp+0x4]
   34591:	pxor   xmm0,xmm0
   34595:	mov    edx,r14d
   34598:	mov    rsi,r15
   3459b:	mov    QWORD PTR [rsp+0x8],r8
   345a0:	call   f090 <fd_read>
   345a5:	mov    r8,QWORD PTR [rsp+0x8]
   345aa:	test   eax,eax
   345ac:	js     34680 <fd_read_hunk+0x190>
   345b2:	add    r12d,eax
   345b5:	movsxd r13,r12d
   345b8:	mov    BYTE PTR [rbp+r13*1+0x0],0x0
   345be:	test   eax,eax
   345c0:	je     34650 <fd_read_hunk+0x160>
   345c6:	test   r8,r8
   345c9:	je     345d4 <fd_read_hunk+0xe4>
   345cb:	cmp    r14d,eax
   345ce:	je     3466a <fd_read_hunk+0x17a>
   345d4:	lea    rax,[rbx-0x1]
   345d8:	cmp    r13,rax
   345db:	jne    34528 <fd_read_hunk+0x38>
   345e1:	mov    rcx,QWORD PTR [rsp+0x18]
   345e6:	test   rcx,rcx
   345e9:	setne  al
   345ec:	cmp    rbx,rcx
   345ef:	jl     345f9 <fd_read_hunk+0x109>
   345f1:	test   al,al
   345f3:	jne    34696 <fd_read_hunk+0x1a6>
   345f9:	mov    rcx,QWORD PTR [rsp+0x18]
   345fe:	add    rbx,rbx
   34601:	cmp    rcx,rbx
   34604:	jge    3460c <fd_read_hunk+0x11c>
   34606:	test   al,al
   34608:	cmovne rbx,rcx
   3460c:	mov    rdi,rbp
   3460f:	mov    rsi,rbx
   34612:	call   4b870 <xrealloc>
   34617:	mov    rbp,rax
   3461a:	jmp    34528 <fd_read_hunk+0x38>
   3461f:	nop
   34620:	add    edx,0x1
   34623:	mov    rdi,rbp
   34626:	mov    QWORD PTR [rsp+0x8],r8
   3462b:	movsxd rbx,edx
   3462e:	mov    rsi,rbx
   34631:	call   4b870 <xrealloc>
   34636:	mov    r8,QWORD PTR [rsp+0x8]
   3463b:	mov    rbp,rax
   3463e:	lea    r15,[rax+r13*1]
   34642:	jmp    3458d <fd_read_hunk+0x9d>
   34647:	nop    WORD PTR [rax+rax*1+0x0]
   34650:	test   r12d,r12d
   34653:	jne    3466a <fd_read_hunk+0x17a>
   34655:	mov    rdi,rbp
   34658:	xor    ebp,ebp
   3465a:	call   4bdc0 <rpl_free>
   3465f:	call   c740 <__errno_location@plt>
   34664:	mov    DWORD PTR [rax],0x0
   3466a:	add    rsp,0x28
   3466e:	mov    rax,rbp
   34671:	pop    rbx
   34672:	pop    rbp
   34673:	pop    r12
   34675:	pop    r13
   34677:	pop    r14
   34679:	pop    r15
   3467b:	ret    
   3467c:	nop    DWORD PTR [rax+0x0]
   34680:	mov    rdi,rbp
   34683:	xor    ebp,ebp
   34685:	call   4bdc0 <rpl_free>
   3468a:	jmp    3466a <fd_read_hunk+0x17a>
   3468c:	nop    DWORD PTR [rax+0x0]
   34690:	mov    BYTE PTR [r15],0x0
   34694:	jmp    3466a <fd_read_hunk+0x17a>
   34696:	mov    rdi,rbp
   34699:	xor    ebp,ebp
   3469b:	call   4bdc0 <rpl_free>
   346a0:	call   c740 <__errno_location@plt>
   346a5:	mov    DWORD PTR [rax],0xc
   346ab:	jmp    3466a <fd_read_hunk+0x17a>
   346ad:	nop    DWORD PTR [rax]

00000000000346b0 <fd_read_body>:
   346b0:	endbr64 
   346b4:	push   r15
   346b6:	push   r14
   346b8:	mov    r14d,esi
   346bb:	push   r13
   346bd:	push   r12
   346bf:	push   rbp
   346c0:	mov    rbp,rdi
   346c3:	mov    edi,0x2000
   346c8:	push   rbx
   346c9:	sub    rsp,0x98
   346d0:	mov    rax,QWORD PTR [rsp+0xd0]
   346d8:	mov    QWORD PTR [rsp+0x30],rdx
   346dd:	mov    QWORD PTR [rsp+0x18],rcx
   346e2:	mov    ebx,DWORD PTR [rsp+0xe0]
   346e9:	mov    QWORD PTR [rsp+0x78],rax
   346ee:	mov    rax,QWORD PTR [rsp+0xd8]
   346f6:	mov    QWORD PTR [rsp+0x38],r8
   346fb:	mov    QWORD PTR [rsp+0x48],rax
   34700:	mov    rax,QWORD PTR [rsp+0xe8]
   34708:	mov    QWORD PTR [rsp+0x70],r9
   3470d:	mov    QWORD PTR [rsp+0x20],rax
   34712:	mov    rax,QWORD PTR fs:0x28
   3471b:	mov    QWORD PTR [rsp+0x88],rax
   34723:	xor    eax,eax
   34725:	call   4b850 <xmalloc>
   3472a:	mov    r15,rax
   3472d:	mov    eax,ebx
   3472f:	and    eax,0x1
   34732:	mov    DWORD PTR [rsp+0x50],eax
   34736:	mov    eax,ebx
   34738:	and    eax,0x4
   3473b:	and    ebx,0x2
   3473e:	mov    DWORD PTR [rsp+0x28],eax
   34742:	jne    34770 <fd_read_body+0xc0>
   34744:	mov    edi,DWORD PTR [rip+0x55b0e]        # 8a258 <opt+0x1d8>
   3474a:	test   edi,edi
   3474c:	je     349a0 <fd_read_body+0x2f0>
   34752:	mov    r12,QWORD PTR [rsp+0x38]
   34757:	mov    r13,QWORD PTR [rsp+0x18]
   3475c:	mov    QWORD PTR [rsp+0x38],0x0
   34765:	add    r13,r12
   34768:	jmp    34786 <fd_read_body+0xd6>
   3476a:	nop    WORD PTR [rax+rax*1+0x0]
   34770:	mov    esi,DWORD PTR [rip+0x55ae2]        # 8a258 <opt+0x1d8>
   34776:	test   esi,esi
   34778:	je     34968 <fd_read_body+0x2b8>
   3477e:	mov    r13,QWORD PTR [rsp+0x18]
   34783:	xor    r12d,r12d
   34786:	mov    rdi,QWORD PTR [rip+0x5592b]        # 8a0b8 <opt+0x38>
   3478d:	test   rdi,rdi
   34790:	je     3479c <fd_read_body+0xec>
   34792:	call   c310 <strlen@plt>
   34797:	lea    rbp,[rbp+rax*1+0x1]
   3479c:	mov    rdx,r13
   3479f:	mov    rsi,r12
   347a2:	mov    rdi,rbp
   347a5:	call   31af0 <progress_create>
   347aa:	mov    rdi,rax
   347ad:	mov    r13,rax
   347b0:	call   31b50 <progress_interactive_p>
   347b5:	cmp    QWORD PTR [rip+0x55aeb],0x0        # 8a2a8 <opt+0x228>
   347bd:	mov    BYTE PTR [rsp+0x56],al
   347c1:	jne    34f8d <fd_read_body+0x8dd>
   347c7:	test   r13,r13
   347ca:	je     3497b <fd_read_body+0x2cb>
   347d0:	call   31c00 <ptimer_new>
   347d5:	mov    rbp,rax
   347d8:	mov    rax,QWORD PTR [rip+0x55ac9]        # 8a2a8 <opt+0x228>
   347df:	test   rax,rax
   347e2:	je     347f0 <fd_read_body+0x140>
   347e4:	cmp    rax,0x1fff
   347ea:	jle    34fb0 <fd_read_body+0x900>
   347f0:	mov    DWORD PTR [rsp+0x2c],0x2000
   347f8:	movzx  eax,BYTE PTR [rsp+0x50]
   347fd:	xor    eax,0x1
   34800:	cmp    QWORD PTR [rsp+0x18],0x0
   34806:	mov    BYTE PTR [rsp+0x57],al
   3480a:	jg     34814 <fd_read_body+0x164>
   3480c:	test   al,al
   3480e:	je     35024 <fd_read_body+0x974>
   34814:	mov    QWORD PTR [rsp+0x68],0x0
   3481d:	mov    QWORD PTR [rsp+0x10],0x0
   34826:	mov    QWORD PTR [rsp+0x8],0x0
   3482f:	mov    QWORD PTR [rsp+0x40],0x0
   34838:	nop    DWORD PTR [rax+rax*1+0x0]
   34840:	mov    ecx,DWORD PTR [rsp+0x28]
   34844:	movsd  xmm0,QWORD PTR [rip+0x55a24]        # 8a270 <opt+0x1f0>
   3484c:	test   ecx,ecx
   3484e:	je     34b56 <fd_read_body+0x4a6>
   34854:	cmp    QWORD PTR [rsp+0x10],0x0
   3485a:	je     34d00 <fd_read_body+0x650>
   34860:	movsxd r12,DWORD PTR [rsp+0x2c]
   34865:	mov    rax,QWORD PTR [rsp+0x10]
   3486a:	cmp    r12,rax
   3486d:	cmovg  r12,rax
   34871:	cmp    BYTE PTR [rsp+0x56],0x0
   34876:	je     349d0 <fd_read_body+0x320>
   3487c:	call   c740 <__errno_location@plt>
   34881:	pxor   xmm4,xmm4
   34885:	ucomisd xmm4,QWORD PTR [rip+0x559e3]        # 8a270 <opt+0x1f0>
   3488d:	mov    DWORD PTR [rax],0x0
   34893:	mov    rbx,rax
   34896:	jp     34c80 <fd_read_body+0x5d0>
   3489c:	movsd  xmm0,QWORD PTR [rip+0x38e8c]        # 6d730 <eta_str.8886+0x9b8>
   348a4:	jne    34c80 <fd_read_body+0x5d0>
   348aa:	mov    edx,r12d
   348ad:	mov    rsi,r15
   348b0:	mov    edi,r14d
   348b3:	call   f090 <fd_read>
   348b8:	mov    r12d,eax
   348bb:	test   eax,eax
   348bd:	jns    349e1 <fd_read_body+0x331>
   348c3:	cmp    DWORD PTR [rbx],0x6e
   348c6:	je     34ce0 <fd_read_body+0x630>
   348cc:	mov    r12d,0xffffffff
   348d2:	test   r13,r13
   348d5:	je     348e7 <fd_read_body+0x237>
   348d7:	mov    rdi,rbp
   348da:	call   31e50 <ptimer_read>
   348df:	mov    rdi,r13
   348e2:	call   31bc0 <progress_finish>
   348e7:	test   rbp,rbp
   348ea:	je     3490a <fd_read_body+0x25a>
   348ec:	mov    rbx,QWORD PTR [rsp+0x48]
   348f1:	test   rbx,rbx
   348f4:	je     34902 <fd_read_body+0x252>
   348f6:	mov    rdi,rbp
   348f9:	call   31e50 <ptimer_read>
   348fe:	movsd  QWORD PTR [rbx],xmm0
   34902:	mov    rdi,rbp
   34905:	call   31d70 <ptimer_destroy>
   3490a:	mov    rax,QWORD PTR [rsp+0x70]
   3490f:	test   rax,rax
   34912:	je     3491c <fd_read_body+0x26c>
   34914:	mov    rdx,QWORD PTR [rsp+0x8]
   34919:	add    QWORD PTR [rax],rdx
   3491c:	mov    rax,QWORD PTR [rsp+0x78]
   34921:	test   rax,rax
   34924:	je     3492e <fd_read_body+0x27e>
   34926:	mov    rdx,QWORD PTR [rsp+0x68]
   3492b:	add    QWORD PTR [rax],rdx
   3492e:	mov    rdi,r15
   34931:	call   4bdc0 <rpl_free>
   34936:	mov    rax,QWORD PTR [rsp+0x88]
   3493e:	xor    rax,QWORD PTR fs:0x28
   34947:	jne    35049 <fd_read_body+0x999>
   3494d:	add    rsp,0x98
   34954:	mov    eax,r12d
   34957:	pop    rbx
   34958:	pop    rbp
   34959:	pop    r12
   3495b:	pop    r13
   3495d:	pop    r14
   3495f:	pop    r15
   34961:	ret    
   34962:	nop    WORD PTR [rax+rax*1+0x0]
   34968:	cmp    QWORD PTR [rip+0x55938],0x0        # 8a2a8 <opt+0x228>
   34970:	mov    BYTE PTR [rsp+0x56],0x0
   34975:	jne    34f8a <fd_read_body+0x8da>
   3497b:	xor    r13d,r13d
   3497e:	cmp    QWORD PTR [rsp+0x48],0x0
   34984:	jne    347d0 <fd_read_body+0x120>
   3498a:	mov    DWORD PTR [rsp+0x2c],0x2000
   34992:	mov    r13,QWORD PTR [rsp+0x48]
   34997:	xor    ebp,ebp
   34999:	jmp    347f8 <fd_read_body+0x148>
   3499e:	xchg   ax,ax
   349a0:	mov    rax,QWORD PTR [rip+0x55901]        # 8a2a8 <opt+0x228>
   349a7:	mov    QWORD PTR [rsp+0x38],rax
   349ac:	test   rax,rax
   349af:	jne    3500e <fd_read_body+0x95e>
   349b5:	xor    r13d,r13d
   349b8:	cmp    QWORD PTR [rsp+0x48],0x0
   349be:	mov    BYTE PTR [rsp+0x56],0x0
   349c3:	jne    347d0 <fd_read_body+0x120>
   349c9:	jmp    3498a <fd_read_body+0x2da>
   349cb:	nop    DWORD PTR [rax+rax*1+0x0]
   349d0:	mov    edx,r12d
   349d3:	mov    rsi,r15
   349d6:	mov    edi,r14d
   349d9:	call   f090 <fd_read>
   349de:	mov    r12d,eax
   349e1:	test   r12d,r12d
   349e4:	jle    3504e <fd_read_body+0x99e>
   349ea:	test   r13,r13
   349ed:	jne    349fd <fd_read_body+0x34d>
   349ef:	mov    rax,QWORD PTR [rsp+0x48]
   349f4:	or     rax,QWORD PTR [rip+0x558ad]        # 8a2a8 <opt+0x228>
   349fb:	je     34a13 <fd_read_body+0x363>
   349fd:	mov    rdi,rbp
   34a00:	call   31db0 <ptimer_measure>
   34a05:	mov    rdi,rbp
   34a08:	call   31e50 <ptimer_read>
   34a0d:	movsd  QWORD PTR [rsp+0x40],xmm0
   34a13:	mov    rax,QWORD PTR [rsp+0x20]
   34a18:	movsxd rbx,r12d
   34a1b:	add    QWORD PTR [rsp+0x8],rbx
   34a20:	or     rax,QWORD PTR [rsp+0x30]
   34a25:	je     34af2 <fd_read_body+0x442>
   34a2b:	cmp    QWORD PTR [rsp+0x38],rbx
   34a30:	jg     34e00 <fd_read_body+0x750>
   34a36:	mov    rax,QWORD PTR [rsp+0x38]
   34a3b:	test   rax,rax
   34a3e:	je     34e10 <fd_read_body+0x760>
   34a44:	mov    edx,r12d
   34a47:	sub    edx,eax
   34a49:	je     34ae9 <fd_read_body+0x439>
   34a4f:	add    rax,r15
   34a52:	mov    rcx,QWORD PTR [rsp+0x30]
   34a57:	mov    rdi,rax
   34a5a:	movsxd rax,edx
   34a5d:	mov    QWORD PTR [rsp+0x38],rax
   34a62:	test   rcx,rcx
   34a65:	je     34e29 <fd_read_body+0x779>
   34a6b:	movsxd rdx,edx
   34a6e:	mov    esi,0x1
   34a73:	mov    QWORD PTR [rsp+0x58],rdi
   34a78:	mov    QWORD PTR [rsp+0x60],rdx
   34a7d:	call   ca10 <fwrite@plt>
   34a82:	cmp    QWORD PTR [rsp+0x20],0x0
   34a88:	mov    rdi,QWORD PTR [rsp+0x58]
   34a8d:	mov    rdx,QWORD PTR [rsp+0x60]
   34a92:	je     34ed0 <fd_read_body+0x820>
   34a98:	mov    rcx,QWORD PTR [rsp+0x20]
   34a9d:	mov    esi,0x1
   34aa2:	call   ca10 <fwrite@plt>
   34aa7:	mov    rdi,QWORD PTR [rsp+0x30]
   34aac:	mov    rdx,QWORD PTR [rsp+0x38]
   34ab1:	add    QWORD PTR [rsp+0x68],rdx
   34ab6:	call   4bd70 <rpl_fflush>
   34abb:	mov    rdi,QWORD PTR [rsp+0x20]
   34ac0:	call   4bd70 <rpl_fflush>
   34ac5:	mov    rdi,QWORD PTR [rsp+0x30]
   34aca:	call   c330 <ferror@plt>
   34acf:	test   eax,eax
   34ad1:	jne    34f02 <fd_read_body+0x852>
   34ad7:	mov    rdi,QWORD PTR [rsp+0x20]
   34adc:	call   c330 <ferror@plt>
   34ae1:	test   eax,eax
   34ae3:	jne    3503e <fd_read_body+0x98e>
   34ae9:	mov    QWORD PTR [rsp+0x38],0x0
   34af2:	mov    eax,DWORD PTR [rsp+0x28]
   34af6:	test   eax,eax
   34af8:	je     34b05 <fd_read_body+0x455>
   34afa:	sub    QWORD PTR [rsp+0x10],rbx
   34aff:	je     34f10 <fd_read_body+0x860>
   34b05:	cmp    QWORD PTR [rip+0x5579b],0x0        # 8a2a8 <opt+0x228>
   34b0d:	jne    34b88 <fd_read_body+0x4d8>
   34b0f:	test   r13,r13
   34b12:	je     34b27 <fd_read_body+0x477>
   34b14:	mov    rdi,rbp
   34b17:	call   31e50 <ptimer_read>
   34b1c:	movsxd rsi,r12d
   34b1f:	mov    rdi,r13
   34b22:	call   31b60 <progress_update>
   34b27:	mov    rcx,QWORD PTR [rsp+0x8]
   34b2c:	cmp    QWORD PTR [rsp+0x18],rcx
   34b31:	jg     34840 <fd_read_body+0x190>
   34b37:	cmp    BYTE PTR [rsp+0x57],0x0
   34b3c:	je     348d2 <fd_read_body+0x222>
   34b42:	mov    ecx,DWORD PTR [rsp+0x28]
   34b46:	movsd  xmm0,QWORD PTR [rip+0x55722]        # 8a270 <opt+0x1f0>
   34b4e:	test   ecx,ecx
   34b50:	jne    34854 <fd_read_body+0x1a4>
   34b56:	mov    eax,DWORD PTR [rsp+0x2c]
   34b5a:	mov    edx,DWORD PTR [rsp+0x50]
   34b5e:	mov    r12d,eax
   34b61:	test   edx,edx
   34b63:	je     34871 <fd_read_body+0x1c1>
   34b69:	movsxd rdx,eax
   34b6c:	mov    r12,QWORD PTR [rsp+0x18]
   34b71:	sub    r12,QWORD PTR [rsp+0x8]
   34b76:	cmp    r12,rdx
   34b79:	cmovg  r12,rdx
   34b7d:	jmp    34871 <fd_read_body+0x1c1>
   34b82:	nop    WORD PTR [rax+rax*1+0x0]
   34b88:	mov    rdi,rbp
   34b8b:	call   31e50 <ptimer_read>
   34b90:	movsxd rdi,r12d
   34b93:	pxor   xmm1,xmm1
   34b97:	add    rdi,QWORD PTR [rip+0x55092]        # 89c30 <limit_data>
   34b9e:	movapd xmm3,xmm0
   34ba2:	pxor   xmm0,xmm0
   34ba6:	subsd  xmm3,QWORD PTR [rip+0x5508a]        # 89c38 <limit_data+0x8>
   34bae:	mov    QWORD PTR [rip+0x5507b],rdi        # 89c30 <limit_data>
   34bb5:	cvtsi2sd xmm0,rdi
   34bba:	cvtsi2sd xmm1,QWORD PTR [rip+0x556e5]        # 8a2a8 <opt+0x228>
   34bc3:	divsd  xmm0,xmm1
   34bc7:	comisd xmm0,xmm3
   34bcb:	jbe    34c5d <fd_read_body+0x5ad>
   34bd1:	subsd  xmm0,xmm3
   34bd5:	movsd  xmm1,QWORD PTR [rip+0x55063]        # 89c40 <limit_data+0x10>
   34bdd:	movsd  xmm6,QWORD PTR [rip+0x381eb]        # 6cdd0 <eta_str.8886+0x58>
   34be5:	movzx  eax,BYTE PTR [rip+0x556cf]        # 8a2bb <opt+0x23b>
   34bec:	movapd xmm2,xmm0
   34bf0:	addsd  xmm2,xmm1
   34bf4:	comisd xmm6,xmm2
   34bf8:	ja     34e60 <fd_read_body+0x7b0>
   34bfe:	test   al,al
   34c00:	jne    34fc0 <fd_read_body+0x910>
   34c06:	mov    rdi,rbp
   34c09:	movsd  QWORD PTR [rsp+0x60],xmm2
   34c0f:	call   31e50 <ptimer_read>
   34c14:	movsd  xmm2,QWORD PTR [rsp+0x60]
   34c1a:	movsd  QWORD PTR [rsp+0x58],xmm0
   34c20:	movapd xmm0,xmm2
   34c24:	call   3ebb0 <xsleep>
   34c29:	mov    rdi,rbp
   34c2c:	call   31db0 <ptimer_measure>
   34c31:	subsd  xmm0,QWORD PTR [rsp+0x58]
   34c37:	movsd  xmm2,QWORD PTR [rsp+0x60]
   34c3d:	subsd  xmm2,xmm0
   34c41:	comisd xmm2,QWORD PTR [rip+0x37f6f]        # 6cbb8 <primes.6089+0x6ad8>
   34c49:	jbe    34eb0 <fd_read_body+0x800>
   34c4f:	mov    rax,QWORD PTR [rip+0x37f62]        # 6cbb8 <primes.6089+0x6ad8>
   34c56:	mov    QWORD PTR [rip+0x54fe3],rax        # 89c40 <limit_data+0x10>
   34c5d:	mov    QWORD PTR [rip+0x54fc8],0x0        # 89c30 <limit_data>
   34c68:	mov    rdi,rbp
   34c6b:	call   31e50 <ptimer_read>
   34c70:	movsd  QWORD PTR [rip+0x54fc0],xmm0        # 89c38 <limit_data+0x8>
   34c78:	jmp    34b0f <fd_read_body+0x45f>
   34c7d:	nop    DWORD PTR [rax]
   34c80:	mov    rdi,rbp
   34c83:	call   31e50 <ptimer_read>
   34c88:	movsd  xmm2,QWORD PTR [rip+0x555e0]        # 8a270 <opt+0x1f0>
   34c90:	movapd xmm1,xmm0
   34c94:	subsd  xmm1,QWORD PTR [rsp+0x40]
   34c9a:	movsd  xmm0,QWORD PTR [rip+0x38a8e]        # 6d730 <eta_str.8886+0x9b8>
   34ca2:	movapd xmm3,xmm1
   34ca6:	addsd  xmm3,xmm0
   34caa:	comisd xmm3,xmm2
   34cae:	jbe    348aa <fd_read_body+0x1fa>
   34cb4:	subsd  xmm2,xmm1
   34cb8:	pxor   xmm7,xmm7
   34cbc:	comisd xmm7,xmm2
   34cc0:	movapd xmm0,xmm2
   34cc4:	jb     348aa <fd_read_body+0x1fa>
   34cca:	mov    DWORD PTR [rbx],0x6e
   34cd0:	mov    r12d,0xffffffff
   34cd6:	jmp    348d2 <fd_read_body+0x222>
   34cdb:	nop    DWORD PTR [rax+rax*1+0x0]
   34ce0:	test   r13,r13
   34ce3:	je     34f70 <fd_read_body+0x8c0>
   34ce9:	mov    rdi,rbp
   34cec:	xor    r12d,r12d
   34cef:	call   31db0 <ptimer_measure>
   34cf4:	jmp    34b05 <fd_read_body+0x455>
   34cf9:	nop    DWORD PTR [rax+0x0]
   34d00:	mov    ecx,0x1000
   34d05:	mov    edx,0x80
   34d0a:	lea    rsi,[rip+0xfffffffffffff69f]        # 343b0 <line_terminator>
   34d11:	mov    edi,r14d
   34d14:	movsd  QWORD PTR [rsp+0x10],xmm0
   34d1a:	call   344f0 <fd_read_hunk>
   34d1f:	mov    r12,rax
   34d22:	test   rax,rax
   34d25:	je     348cc <fd_read_body+0x21c>
   34d2b:	mov    rbx,QWORD PTR [rsp+0x20]
   34d30:	movsd  xmm0,QWORD PTR [rsp+0x10]
   34d36:	test   rbx,rbx
   34d39:	je     34d5c <fd_read_body+0x6ac>
   34d3b:	mov    rdi,rax
   34d3e:	call   c310 <strlen@plt>
   34d43:	mov    rcx,rbx
   34d46:	mov    esi,0x1
   34d4b:	mov    rdi,r12
   34d4e:	mov    rdx,rax
   34d51:	call   ca10 <fwrite@plt>
   34d56:	movsd  xmm0,QWORD PTR [rsp+0x10]
   34d5c:	mov    rdi,r12
   34d5f:	lea    rsi,[rsp+0x80]
   34d67:	mov    edx,0x10
   34d6c:	movsd  QWORD PTR [rsp+0x58],xmm0
   34d72:	call   c5a0 <strtol@plt>
   34d77:	mov    rdi,r12
   34d7a:	mov    rbx,rax
   34d7d:	mov    QWORD PTR [rsp+0x10],rax
   34d82:	call   4bdc0 <rpl_free>
   34d87:	test   rbx,rbx
   34d8a:	js     348cc <fd_read_body+0x21c>
   34d90:	movsd  xmm0,QWORD PTR [rsp+0x58]
   34d96:	jne    34860 <fd_read_body+0x1b0>
   34d9c:	mov    ecx,0x1000
   34da1:	mov    edx,0x80
   34da6:	lea    rsi,[rip+0xfffffffffffff603]        # 343b0 <line_terminator>
   34dad:	mov    edi,r14d
   34db0:	call   344f0 <fd_read_hunk>
   34db5:	mov    r12,rax
   34db8:	test   rax,rax
   34dbb:	je     348cc <fd_read_body+0x21c>
   34dc1:	mov    rbx,QWORD PTR [rsp+0x20]
   34dc6:	test   rbx,rbx
   34dc9:	je     34de6 <fd_read_body+0x736>
   34dcb:	mov    rdi,rax
   34dce:	call   c310 <strlen@plt>
   34dd3:	mov    rcx,rbx
   34dd6:	mov    esi,0x1
   34ddb:	mov    rdi,r12
   34dde:	mov    rdx,rax
   34de1:	call   ca10 <fwrite@plt>
   34de6:	mov    rdi,r12
   34de9:	xor    r12d,r12d
   34dec:	call   4bdc0 <rpl_free>
   34df1:	jmp    348d2 <fd_read_body+0x222>
   34df6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   34e00:	sub    QWORD PTR [rsp+0x38],rbx
   34e05:	jmp    34af2 <fd_read_body+0x442>
   34e0a:	nop    WORD PTR [rax+rax*1+0x0]
   34e10:	mov    rcx,QWORD PTR [rsp+0x30]
   34e15:	mov    QWORD PTR [rsp+0x38],rbx
   34e1a:	mov    edx,r12d
   34e1d:	mov    rdi,r15
   34e20:	test   rcx,rcx
   34e23:	jne    34a6b <fd_read_body+0x3bb>
   34e29:	mov    rax,QWORD PTR [rsp+0x20]
   34e2e:	test   rax,rax
   34e31:	je     34ed0 <fd_read_body+0x820>
   34e37:	movsxd rdx,edx
   34e3a:	mov    rcx,rax
   34e3d:	mov    esi,0x1
   34e42:	call   ca10 <fwrite@plt>
   34e47:	mov    rdi,QWORD PTR [rsp+0x20]
   34e4c:	mov    rsi,QWORD PTR [rsp+0x38]
   34e51:	add    QWORD PTR [rsp+0x68],rsi
   34e56:	call   4bd70 <rpl_fflush>
   34e5b:	jmp    34ad7 <fd_read_body+0x427>
   34e60:	test   al,al
   34e62:	je     34b0f <fd_read_body+0x45f>
   34e68:	movsd  QWORD PTR [rsp+0x60],xmm2
   34e6e:	movsd  QWORD PTR [rsp+0x58],xmm3
   34e74:	call   3e8e0 <number_to_static_string>
   34e79:	movsd  xmm2,QWORD PTR [rsp+0x60]
   34e7f:	mulsd  xmm2,QWORD PTR [rip+0x388b1]        # 6d738 <eta_str.8886+0x9c0>
   34e87:	lea    rdi,[rip+0x386ba]        # 6d548 <eta_str.8886+0x7d0>
   34e8e:	movsd  xmm3,QWORD PTR [rsp+0x58]
   34e94:	mov    rsi,rax
   34e97:	mov    eax,0x2
   34e9c:	movapd xmm1,xmm3
   34ea0:	movapd xmm0,xmm2
   34ea4:	call   2e250 <debug_logprintf>
   34ea9:	jmp    34b0f <fd_read_body+0x45f>
   34eae:	xchg   ax,ax
   34eb0:	movsd  xmm0,QWORD PTR [rip+0x38888]        # 6d740 <eta_str.8886+0x9c8>
   34eb8:	maxsd  xmm0,xmm2
   34ebc:	movsd  QWORD PTR [rip+0x54d7c],xmm0        # 89c40 <limit_data+0x10>
   34ec4:	jmp    34c5d <fd_read_body+0x5ad>
   34ec9:	nop    DWORD PTR [rax+0x0]
   34ed0:	mov    rax,QWORD PTR [rsp+0x30]
   34ed5:	mov    rdx,QWORD PTR [rsp+0x38]
   34eda:	add    QWORD PTR [rsp+0x68],rdx
   34edf:	test   rax,rax
   34ee2:	je     34ae9 <fd_read_body+0x439>
   34ee8:	mov    rdi,rax
   34eeb:	call   4bd70 <rpl_fflush>
   34ef0:	mov    rdi,QWORD PTR [rsp+0x30]
   34ef5:	call   c330 <ferror@plt>
   34efa:	test   eax,eax
   34efc:	je     34ae9 <fd_read_body+0x439>
   34f02:	mov    r12d,0xfffffffe
   34f08:	jmp    348d2 <fd_read_body+0x222>
   34f0d:	nop    DWORD PTR [rax]
   34f10:	mov    ecx,0x1000
   34f15:	mov    edx,0x80
   34f1a:	lea    rsi,[rip+0xfffffffffffff48f]        # 343b0 <line_terminator>
   34f21:	mov    edi,r14d
   34f24:	call   344f0 <fd_read_hunk>
   34f29:	mov    rbx,rax
   34f2c:	test   rax,rax
   34f2f:	je     348cc <fd_read_body+0x21c>
   34f35:	cmp    QWORD PTR [rsp+0x20],0x0
   34f3b:	je     34f5a <fd_read_body+0x8aa>
   34f3d:	mov    rdi,rax
   34f40:	call   c310 <strlen@plt>
   34f45:	mov    rcx,QWORD PTR [rsp+0x20]
   34f4a:	mov    esi,0x1
   34f4f:	mov    rdi,rbx
   34f52:	mov    rdx,rax
   34f55:	call   ca10 <fwrite@plt>
   34f5a:	mov    rdi,rbx
   34f5d:	call   4bdc0 <rpl_free>
   34f62:	jmp    34b05 <fd_read_body+0x455>
   34f67:	nop    WORD PTR [rax+rax*1+0x0]
   34f70:	mov    rax,QWORD PTR [rsp+0x48]
   34f75:	or     rax,QWORD PTR [rip+0x5532c]        # 8a2a8 <opt+0x228>
   34f7c:	jne    34ce9 <fd_read_body+0x639>
   34f82:	xor    r12d,r12d
   34f85:	jmp    34b27 <fd_read_body+0x477>
   34f8a:	xor    r13d,r13d
   34f8d:	mov    QWORD PTR [rip+0x54ca8],0x0        # 89c40 <limit_data+0x10>
   34f98:	pxor   xmm0,xmm0
   34f9c:	movaps XMMWORD PTR [rip+0x54c8d],xmm0        # 89c30 <limit_data>
   34fa3:	jmp    347d0 <fd_read_body+0x120>
   34fa8:	nop    DWORD PTR [rax+rax*1+0x0]
   34fb0:	mov    DWORD PTR [rsp+0x2c],eax
   34fb4:	jmp    347f8 <fd_read_body+0x148>
   34fb9:	nop    DWORD PTR [rax+0x0]
   34fc0:	movsd  QWORD PTR [rsp+0x60],xmm2
   34fc6:	movsd  QWORD PTR [rsp+0x58],xmm1
   34fcc:	call   3e8e0 <number_to_static_string>
   34fd1:	movsd  xmm2,QWORD PTR [rsp+0x60]
   34fd7:	movsd  xmm0,QWORD PTR [rip+0x38759]        # 6d738 <eta_str.8886+0x9c0>
   34fdf:	lea    rdi,[rip+0x3858a]        # 6d570 <eta_str.8886+0x7f8>
   34fe6:	movsd  xmm1,QWORD PTR [rsp+0x58]
   34fec:	mov    rsi,rax
   34fef:	mov    eax,0x2
   34ff4:	mulsd  xmm0,xmm2
   34ff8:	movsd  QWORD PTR [rsp+0x58],xmm2
   34ffe:	call   2e250 <debug_logprintf>
   35003:	movsd  xmm2,QWORD PTR [rsp+0x58]
   35009:	jmp    34c06 <fd_read_body+0x556>
   3500e:	mov    QWORD PTR [rsp+0x38],0x0
   35017:	xor    r13d,r13d
   3501a:	mov    BYTE PTR [rsp+0x56],0x0
   3501f:	jmp    34f8d <fd_read_body+0x8dd>
   35024:	mov    QWORD PTR [rsp+0x68],0x0
   3502d:	xor    r12d,r12d
   35030:	mov    QWORD PTR [rsp+0x8],0x0
   35039:	jmp    348d2 <fd_read_body+0x222>
   3503e:	mov    r12d,0xfffffffd
   35044:	jmp    348d2 <fd_read_body+0x222>
   35049:	call   c7b0 <__stack_chk_fail@plt>
   3504e:	mov    eax,0xffffffff
   35053:	cmovs  r12d,eax
   35057:	jmp    348d2 <fd_read_body+0x222>
   3505c:	nop    DWORD PTR [rax+0x0]

0000000000035060 <fd_read_line>:
   35060:	endbr64 
   35064:	mov    ecx,0x1000
   35069:	mov    edx,0x80
   3506e:	lea    rsi,[rip+0xfffffffffffff33b]        # 343b0 <line_terminator>
   35075:	jmp    344f0 <fd_read_hunk>
   3507a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000035080 <calc_rate>:
   35080:	endbr64 
   35084:	push   rbp
   35085:	movapd xmm1,xmm0
   35089:	mov    rbp,rdi
   3508c:	push   rbx
   3508d:	mov    rbx,rsi
   35090:	sub    rsp,0x18
   35094:	cmp    BYTE PTR [rip+0x55340],0x0        # 8a3db <opt+0x35b>
   3509b:	movsd  xmm2,QWORD PTR [rip+0x33755]        # 687f8 <primes.6089+0x2718>
   350a3:	je     350ad <calc_rate+0x2d>
   350a5:	movsd  xmm2,QWORD PTR [rip+0x3868b]        # 6d738 <eta_str.8886+0x9c0>
   350ad:	pxor   xmm4,xmm4
   350b1:	ucomisd xmm1,xmm4
   350b5:	jnp    35148 <calc_rate+0xc8>
   350bb:	mov    rdi,rbp
   350be:	movsd  QWORD PTR [rsp+0x8],xmm1
   350c4:	movsd  QWORD PTR [rsp],xmm2
   350c9:	call   3e930 <convert_to_bits>
   350ce:	pxor   xmm0,xmm0
   350d2:	movsd  xmm1,QWORD PTR [rsp+0x8]
   350d8:	movsd  xmm2,QWORD PTR [rsp]
   350dd:	cvtsi2sd xmm0,rax
   350e2:	divsd  xmm0,xmm1
   350e6:	comisd xmm2,xmm0
   350ea:	jbe    35100 <calc_rate+0x80>
   350ec:	mov    DWORD PTR [rbx],0x0
   350f2:	add    rsp,0x18
   350f6:	pop    rbx
   350f7:	pop    rbp
   350f8:	ret    
   350f9:	nop    DWORD PTR [rax+0x0]
   35100:	movapd xmm1,xmm2
   35104:	mulsd  xmm1,xmm2
   35108:	comisd xmm1,xmm0
   3510c:	jbe    35120 <calc_rate+0xa0>
   3510e:	mov    DWORD PTR [rbx],0x1
   35114:	divsd  xmm0,xmm2
   35118:	add    rsp,0x18
   3511c:	pop    rbx
   3511d:	pop    rbp
   3511e:	ret    
   3511f:	nop
   35120:	movapd xmm3,xmm1
   35124:	mulsd  xmm3,xmm2
   35128:	comisd xmm3,xmm0
   3512c:	ja     35190 <calc_rate+0x110>
   3512e:	mulsd  xmm2,xmm3
   35132:	comisd xmm2,xmm0
   35136:	jbe    351a8 <calc_rate+0x128>
   35138:	divsd  xmm0,xmm3
   3513c:	mov    DWORD PTR [rbx],0x3
   35142:	jmp    350f2 <calc_rate+0x72>
   35144:	nop    DWORD PTR [rax+0x0]
   35148:	jne    350bb <calc_rate+0x3b>
   3514e:	movsd  QWORD PTR [rsp],xmm2
   35153:	call   31e60 <ptimer_resolution>
   35158:	pxor   xmm5,xmm5
   3515c:	movsd  xmm2,QWORD PTR [rsp]
   35161:	movsd  xmm1,QWORD PTR [rip+0x37a4f]        # 6cbb8 <primes.6089+0x6ad8>
   35169:	mulsd  xmm1,xmm0
   3516d:	ucomisd xmm1,xmm5
   35171:	jp     350bb <calc_rate+0x3b>
   35177:	jne    350bb <calc_rate+0x3b>
   3517d:	pxor   xmm0,xmm0
   35181:	jmp    350e6 <calc_rate+0x66>
   35186:	nop    WORD PTR cs:[rax+rax*1+0x0]
   35190:	mov    DWORD PTR [rbx],0x2
   35196:	divsd  xmm0,xmm1
   3519a:	add    rsp,0x18
   3519e:	pop    rbx
   3519f:	pop    rbp
   351a0:	ret    
   351a1:	nop    DWORD PTR [rax+0x0]
   351a8:	divsd  xmm0,xmm2
   351ac:	movsd  xmm1,QWORD PTR [rip+0x38594]        # 6d748 <eta_str.8886+0x9d0>
   351b4:	mov    DWORD PTR [rbx],0x4
   351ba:	minsd  xmm1,xmm0
   351be:	movapd xmm0,xmm1
   351c2:	jmp    350f2 <calc_rate+0x72>
   351c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000351d0 <retr_rate>:
   351d0:	endbr64 
   351d4:	sub    rsp,0x18
   351d8:	mov    rax,QWORD PTR fs:0x28
   351e1:	mov    QWORD PTR [rsp+0x8],rax
   351e6:	xor    eax,eax
   351e8:	lea    rsi,[rsp+0x4]
   351ed:	call   35080 <calc_rate>
   351f2:	cmp    BYTE PTR [rip+0x551e2],0x0        # 8a3db <opt+0x35b>
   351f9:	movsxd rdx,DWORD PTR [rsp+0x4]
   351fe:	jne    35278 <retr_rate+0xa8>
   35200:	lea    rax,[rip+0x48419]        # 7d620 <rate_names.8732>
   35207:	mov    rax,QWORD PTR [rax+rdx*8]
   3520b:	xor    r9d,r9d
   3520e:	comisd xmm0,QWORD PTR [rip+0x37b92]        # 6cda8 <eta_str.8886+0x30>
   35216:	jae    3522b <retr_rate+0x5b>
   35218:	xor    r9d,r9d
   3521b:	ucomisd xmm0,QWORD PTR [rip+0x37b8d]        # 6cdb0 <eta_str.8886+0x38>
   35223:	setb   r9b
   35227:	add    r9d,0x1
   3522b:	sub    rsp,0x8
   3522f:	mov    edx,0x1
   35234:	mov    ecx,0x14
   35239:	mov    esi,0x14
   3523e:	push   rax
   3523f:	lea    r8,[rip+0x382a1]        # 6d4e7 <eta_str.8886+0x76f>
   35246:	lea    rdi,[rip+0x549c3]        # 89c10 <res.8731>
   3524d:	mov    eax,0x1
   35252:	call   c9d0 <__snprintf_chk@plt>
   35257:	pop    rax
   35258:	pop    rdx
   35259:	mov    rax,QWORD PTR [rsp+0x8]
   3525e:	xor    rax,QWORD PTR fs:0x28
   35267:	jne    35285 <retr_rate+0xb5>
   35269:	lea    rax,[rip+0x549a0]        # 89c10 <res.8731>
   35270:	add    rsp,0x18
   35274:	ret    
   35275:	nop    DWORD PTR [rax]
   35278:	lea    rax,[rip+0x48381]        # 7d600 <rate_names_bits.8733>
   3527f:	mov    rax,QWORD PTR [rax+rdx*8]
   35283:	jmp    3520b <retr_rate+0x3b>
   35285:	call   c7b0 <__stack_chk_fail@plt>
   3528a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000035290 <retrieve_url>:
   35290:	endbr64 
   35294:	push   r15
   35296:	push   r14
   35298:	push   r13
   3529a:	push   r12
   3529c:	push   rbp
   3529d:	push   rbx
   3529e:	sub    rsp,0x88
   352a5:	mov    eax,DWORD PTR [rsp+0xd0]
   352ac:	mov    QWORD PTR [rsp+0x8],rdi
   352b1:	mov    QWORD PTR [rsp+0x28],rsi
   352b6:	mov    rbx,QWORD PTR [rsp+0xc8]
   352be:	mov    DWORD PTR [rsp+0x5c],eax
   352c2:	movzx  eax,BYTE PTR [rsp+0xc0]
   352ca:	mov    QWORD PTR [rsp+0x48],rdx
   352cf:	mov    QWORD PTR [rsp+0x50],rcx
   352d4:	mov    QWORD PTR [rsp+0x20],r8
   352d9:	mov    QWORD PTR [rsp+0x10],r9
   352de:	mov    BYTE PTR [rsp+0x5b],al
   352e2:	mov    rax,QWORD PTR fs:0x28
   352eb:	mov    QWORD PTR [rsp+0x78],rax
   352f0:	xor    eax,eax
   352f2:	mov    QWORD PTR [rsp+0x70],0x0
   352fb:	test   r9,r9
   352fe:	je     35800 <retrieve_url+0x570>
   35304:	mov    rdi,QWORD PTR [rsp+0x28]
   35309:	call   4ba50 <xstrdup>
   3530e:	mov    r13,rax
   35311:	mov    rax,QWORD PTR [rsp+0x50]
   35316:	test   rax,rax
   35319:	je     35322 <retrieve_url+0x92>
   3531b:	mov    QWORD PTR [rax],0x0
   35322:	mov    rax,QWORD PTR [rsp+0x48]
   35327:	test   rax,rax
   3532a:	je     35333 <retrieve_url+0xa3>
   3532c:	mov    QWORD PTR [rax],0x0
   35333:	endbr64 
   35337:	mov    rax,QWORD PTR [rsp+0x20]
   3533c:	mov    BYTE PTR [rsp+0x59],0x0
   35341:	mov    QWORD PTR [rsp+0x40],0x0
   3534a:	mov    rbp,QWORD PTR [rsp+0x8]
   3534f:	test   rax,rax
   35352:	cmove  rax,QWORD PTR [rip+0x54f76]        # 8a2d0 <opt+0x250>
   3535a:	mov    QWORD PTR [rsp+0x38],0x0
   35363:	mov    QWORD PTR [rsp+0x30],0x0
   3536c:	mov    QWORD PTR [rsp+0x20],rax
   35371:	mov    DWORD PTR [rsp+0x18],0x0
   35379:	mov    BYTE PTR [rsp+0x5a],0x0
   3537e:	xchg   ax,ax
   35380:	mov    QWORD PTR [rsp+0x68],0x0
   35389:	mov    rdi,QWORD PTR [rsp+0x70]
   3538e:	call   4bdc0 <rpl_free>
   35393:	lea    rsi,[rbp+0x10]
   35397:	lea    rdi,[rbp+0x8]
   3539b:	mov    QWORD PTR [rsp+0x70],0x0
   353a4:	call   343e0 <getproxy.isra.0>
   353a9:	mov    r14,rax
   353ac:	test   rax,rax
   353af:	je     356d0 <retrieve_url+0x440>
   353b5:	call   40010 <iri_new>
   353ba:	mov    rsi,QWORD PTR [rip+0x5500f]        # 8a3d0 <opt+0x350>
   353c1:	mov    edx,0x1
   353c6:	mov    r12,rax
   353c9:	mov    rdi,rax
   353cc:	call   40130 <set_uri_encoding>
   353d1:	lea    rsi,[rsp+0x64]
   353d6:	mov    rdx,r12
   353d9:	mov    rdi,r14
   353dc:	mov    BYTE PTR [r12+0x18],0x0
   353e2:	mov    ecx,0x1
   353e7:	call   385f0 <url_parse>
   353ec:	mov    r15,rax
   353ef:	test   rax,rax
   353f2:	je     35950 <retrieve_url+0x6c0>
   353f8:	mov    eax,DWORD PTR [rax+0x8]
   353fb:	test   eax,eax
   353fd:	je     35408 <retrieve_url+0x178>
   353ff:	cmp    eax,DWORD PTR [rbp+0x8]
   35402:	jne    35b4b <retrieve_url+0x8bb>
   35408:	mov    rdi,r12
   3540b:	call   400d0 <iri_free>
   35410:	mov    rdi,r14
   35413:	call   4bdc0 <rpl_free>
   35418:	mov    eax,DWORD PTR [rbp+0x8]
   3541b:	cmp    eax,0x1
   3541e:	jbe    354fb <retrieve_url+0x26b>
   35424:	mov    edx,DWORD PTR [r15+0x8]
   35428:	test   edx,edx
   3542a:	je     354fb <retrieve_url+0x26b>
   35430:	sub    eax,0x2
   35433:	cmp    eax,0x1
   35436:	jbe    357e0 <retrieve_url+0x550>
   3543c:	mov    rdi,r15
   3543f:	call   374d0 <url_free>
   35444:	xor    r12d,r12d
   35447:	mov    rdi,QWORD PTR [rsp+0x68]
   3544c:	call   4bdc0 <rpl_free>
   35451:	mov    rax,QWORD PTR [rsp+0x10]
   35456:	mov    QWORD PTR [rsp+0x68],0x0
   3545f:	mov    eax,DWORD PTR [rax]
   35461:	mov    DWORD PTR [rsp+0x1c],eax
   35465:	and    eax,0x2
   35468:	jne    35820 <retrieve_url+0x590>
   3546e:	movzx  r14d,BYTE PTR [rbx+0x18]
   35473:	test   r14b,r14b
   35476:	je     35820 <retrieve_url+0x590>
   3547c:	mov    BYTE PTR [rbx+0x18],0x0
   35480:	cmp    rbp,QWORD PTR [rsp+0x8]
   35485:	je     3548f <retrieve_url+0x1ff>
   35487:	mov    rdi,rbp
   3548a:	call   374d0 <url_free>
   3548f:	mov    rdi,QWORD PTR [rsp+0x28]
   35494:	mov    ecx,0x1
   35499:	mov    rdx,rbx
   3549c:	xor    esi,esi
   3549e:	call   385f0 <url_parse>
   354a3:	mov    rbp,rax
   354a6:	test   rax,rax
   354a9:	je     35ad9 <retrieve_url+0x849>
   354af:	mov    rax,QWORD PTR [rsp+0x8]
   354b4:	mov    rdi,QWORD PTR [rbp+0x0]
   354b8:	mov    rsi,QWORD PTR [rax]
   354bb:	call   be40 <strcmp@plt>
   354c0:	movzx  edx,BYTE PTR [rip+0x54df4]        # 8a2bb <opt+0x23b>
   354c7:	test   eax,eax
   354c9:	je     35b14 <retrieve_url+0x884>
   354cf:	test   dl,dl
   354d1:	jne    357c0 <retrieve_url+0x530>
   354d7:	mov    rdi,r13
   354da:	call   4bdc0 <rpl_free>
   354df:	mov    rdi,QWORD PTR [rbp+0x0]
   354e3:	call   4ba50 <xstrdup>
   354e8:	mov    BYTE PTR [rsp+0x5a],r14b
   354ed:	mov    r13,rax
   354f0:	jmp    35380 <retrieve_url+0xf0>
   354f5:	nop    DWORD PTR [rax]
   354f8:	xor    r15d,r15d
   354fb:	cmp    BYTE PTR [rip+0x54ee6],0x0        # 8a3e8 <opt+0x368>
   35502:	je     35520 <retrieve_url+0x290>
   35504:	mov    rdi,QWORD PTR [rip+0x54efd]        # 8a408 <hsts_store>
   3550b:	test   rdi,rdi
   3550e:	je     35520 <retrieve_url+0x290>
   35510:	mov    rsi,rbp
   35513:	call   1f350 <hsts_match>
   35518:	test   al,al
   3551a:	jne    357a8 <retrieve_url+0x518>
   35520:	lea    rcx,[rsp+0x70]
   35525:	lea    rdx,[rsp+0x68]
   3552a:	push   rbx
   3552b:	mov    rdi,rbp
   3552e:	push   r15
   35530:	mov    r9,QWORD PTR [rsp+0x20]
   35535:	mov    r8,QWORD PTR [rsp+0x30]
   3553a:	mov    rsi,QWORD PTR [rsp+0x18]
   3553f:	call   26440 <http_loop>
   35544:	pop    r14
   35546:	mov    r12d,eax
   35549:	pop    rax
   3554a:	cmp    r12d,0x30
   3554e:	sete   r14b
   35552:	cmp    r12d,0x6
   35556:	sete   al
   35559:	or     r14d,eax
   3555c:	test   r15,r15
   3555f:	je     35569 <retrieve_url+0x2d9>
   35561:	mov    rdi,r15
   35564:	call   374d0 <url_free>
   35569:	test   r14b,r14b
   3556c:	je     35447 <retrieve_url+0x1b7>
   35572:	mov    rdi,QWORD PTR [rsp+0x70]
   35577:	call   4bdc0 <rpl_free>
   3557c:	mov    rsi,QWORD PTR [rsp+0x68]
   35581:	lea    rax,[rip+0x38e8f]        # 6e417 <urlchr_table+0x877>
   35588:	mov    rdi,r13
   3558b:	mov    QWORD PTR [rsp+0x70],0x0
   35594:	test   rsi,rsi
   35597:	cmove  rsi,rax
   3559b:	call   37e80 <uri_merge>
   355a0:	mov    rdi,QWORD PTR [rsp+0x68]
   355a5:	mov    r14,rax
   355a8:	call   4bdc0 <rpl_free>
   355ad:	movzx  eax,BYTE PTR [rip+0x54e12]        # 8a3c6 <opt+0x346>
   355b4:	mov    QWORD PTR [rsp+0x68],r14
   355b9:	mov    rsi,QWORD PTR [rip+0x54e08]        # 8a3c8 <opt+0x348>
   355c0:	mov    BYTE PTR [rbx+0x18],al
   355c3:	test   rsi,rsi
   355c6:	je     355d5 <retrieve_url+0x345>
   355c8:	mov    edx,0x1
   355cd:	mov    rdi,rbx
   355d0:	call   40130 <set_uri_encoding>
   355d5:	xor    esi,esi
   355d7:	mov    rdi,rbx
   355da:	call   401f0 <set_content_encoding>
   355df:	mov    rdi,QWORD PTR [rbx+0x10]
   355e3:	call   4bdc0 <rpl_free>
   355e8:	mov    QWORD PTR [rbx+0x10],0x0
   355f0:	mov    rdi,QWORD PTR [rsp+0x68]
   355f5:	mov    rdx,rbx
   355f8:	lea    rsi,[rsp+0x64]
   355fd:	mov    ecx,0x1
   35602:	call   385f0 <url_parse>
   35607:	mov    r14,rax
   3560a:	test   rax,rax
   3560d:	je     359ec <retrieve_url+0x75c>
   35613:	mov    rdi,QWORD PTR [rsp+0x68]
   35618:	call   4bdc0 <rpl_free>
   3561d:	mov    rdi,QWORD PTR [r14]
   35620:	mov    QWORD PTR [rsp+0x68],0x0
   35629:	call   4ba50 <xstrdup>
   3562e:	add    DWORD PTR [rsp+0x18],0x1
   35633:	mov    r8d,DWORD PTR [rip+0x54a62]        # 8a09c <opt+0x1c>
   3563a:	mov    QWORD PTR [rsp+0x68],rax
   3563f:	mov    eax,DWORD PTR [rsp+0x18]
   35643:	cmp    r8d,eax
   35646:	jl     35a62 <retrieve_url+0x7d2>
   3564c:	mov    rdi,r13
   3564f:	call   4bdc0 <rpl_free>
   35654:	mov    r13,QWORD PTR [rsp+0x68]
   35659:	cmp    rbp,QWORD PTR [rsp+0x8]
   3565e:	je     35668 <retrieve_url+0x3d8>
   35660:	mov    rdi,rbp
   35663:	call   374d0 <url_free>
   35668:	movzx  edx,BYTE PTR [rsp+0x59]
   3566d:	cmp    r12d,0x30
   35671:	mov    rbp,r14
   35674:	setne  al
   35677:	xor    edx,0x1
   3567a:	and    al,dl
   3567c:	je     35380 <retrieve_url+0xf0>
   35682:	mov    rcx,QWORD PTR [rip+0x54d17]        # 8a3a0 <opt+0x320>
   35689:	mov    BYTE PTR [rsp+0x59],al
   3568d:	mov    QWORD PTR [rip+0x54d08],0x0        # 8a3a0 <opt+0x320>
   35698:	mov    QWORD PTR [rsp+0x30],rcx
   3569d:	mov    rcx,QWORD PTR [rip+0x54d04]        # 8a3a8 <opt+0x328>
   356a4:	mov    QWORD PTR [rip+0x54cf9],0x0        # 8a3a8 <opt+0x328>
   356af:	mov    QWORD PTR [rsp+0x40],rcx
   356b4:	mov    rcx,QWORD PTR [rip+0x54cdd]        # 8a398 <opt+0x318>
   356bb:	mov    QWORD PTR [rip+0x54cd2],0x0        # 8a398 <opt+0x318>
   356c6:	mov    QWORD PTR [rsp+0x38],rcx
   356cb:	jmp    35380 <retrieve_url+0xf0>
   356d0:	mov    eax,DWORD PTR [rbp+0x8]
   356d3:	cmp    eax,0x1
   356d6:	jbe    354f8 <retrieve_url+0x268>
   356dc:	sub    eax,0x2
   356df:	cmp    eax,0x1
   356e2:	ja     35444 <retrieve_url+0x1b4>
   356e8:	mov    r11d,DWORD PTR [rsp+0x18]
   356ed:	movzx  r9d,BYTE PTR [rsp+0x5b]
   356f3:	test   r11d,r11d
   356f6:	je     35770 <retrieve_url+0x4e0>
   356f8:	lea    rdx,[rsp+0x70]
   356fd:	sub    rsp,0x8
   35701:	mov    rdi,rbp
   35704:	mov    r8,r14
   35707:	push   0x0
   35709:	mov    rcx,QWORD PTR [rsp+0x20]
   3570e:	mov    rsi,QWORD PTR [rsp+0x18]
   35713:	call   17a60 <ftp_loop>
   35718:	mov    rdi,QWORD PTR [rsp+0x80]
   35720:	mov    r12d,eax
   35723:	pop    rax
   35724:	pop    rdx
   35725:	test   rdi,rdi
   35728:	je     357f0 <retrieve_url+0x560>
   3572e:	mov    eax,DWORD PTR [rbp+0x8]
   35731:	mov    BYTE PTR [rsp+0x5b],0x0
   35736:	mov    r15,r14
   35739:	sub    eax,0x2
   3573c:	cmp    eax,0x1
   3573f:	ja     3554a <retrieve_url+0x2ba>
   35745:	call   3c790 <has_html_suffix_p>
   3574a:	mov    BYTE PTR [rsp+0x5b],al
   3574e:	test   al,al
   35750:	je     3554a <retrieve_url+0x2ba>
   35756:	mov    rax,QWORD PTR [rsp+0x10]
   3575b:	mov    BYTE PTR [rsp+0x5b],0x0
   35760:	or     DWORD PTR [rax],0x1
   35763:	jmp    3554a <retrieve_url+0x2ba>
   35768:	nop    DWORD PTR [rax+rax*1+0x0]
   35770:	movzx  eax,BYTE PTR [rip+0x54a8a]        # 8a201 <opt+0x181>
   35777:	mov    r8,r14
   3577a:	mov    rdi,rbp
   3577d:	mov    r15,r14
   35780:	lea    rdx,[rsp+0x70]
   35785:	sub    rsp,0x8
   35789:	push   rax
   3578a:	mov    rcx,QWORD PTR [rsp+0x20]
   3578f:	mov    rsi,QWORD PTR [rsp+0x18]
   35794:	call   17a60 <ftp_loop>
   35799:	pop    rcx
   3579a:	pop    rsi
   3579b:	mov    r12d,eax
   3579e:	jmp    3554a <retrieve_url+0x2ba>
   357a3:	nop    DWORD PTR [rax+rax*1+0x0]
   357a8:	lea    rsi,[rip+0x37e41]        # 6d5f0 <eta_str.8886+0x878>
   357af:	xor    edi,edi
   357b1:	xor    eax,eax
   357b3:	call   2e0a0 <logprintf>
   357b8:	jmp    35520 <retrieve_url+0x290>
   357bd:	nop    DWORD PTR [rax]
   357c0:	mov    rdi,r13
   357c3:	call   4b5b0 <quote>
   357c8:	lea    rdi,[rip+0x37e51]        # 6d620 <eta_str.8886+0x8a8>
   357cf:	mov    rsi,rax
   357d2:	xor    eax,eax
   357d4:	call   2e250 <debug_logprintf>
   357d9:	jmp    354d7 <retrieve_url+0x247>
   357de:	xchg   ax,ax
   357e0:	mov    r14,r15
   357e3:	jmp    356e8 <retrieve_url+0x458>
   357e8:	nop    DWORD PTR [rax+rax*1+0x0]
   357f0:	mov    BYTE PTR [rsp+0x5b],0x0
   357f5:	mov    r15,r14
   357f8:	jmp    3554a <retrieve_url+0x2ba>
   357fd:	nop    DWORD PTR [rax]
   35800:	lea    rax,[rsp+0x60]
   35805:	mov    DWORD PTR [rsp+0x60],0x0
   3580d:	mov    QWORD PTR [rsp+0x10],rax
   35812:	jmp    35304 <retrieve_url+0x74>
   35817:	nop    WORD PTR [rax+rax*1+0x0]
   35820:	mov    r9d,DWORD PTR [rsp+0x18]
   35825:	mov    rsi,QWORD PTR [rsp+0x70]
   3582a:	test   r9d,r9d
   3582d:	mov    rdi,rsi
   35830:	setne  bl
   35833:	test   rsi,rsi
   35836:	je     35889 <retrieve_url+0x5f9>
   35838:	test   rbp,rbp
   3583b:	je     35889 <retrieve_url+0x5f9>
   3583d:	test   eax,eax
   3583f:	jne    3584d <retrieve_url+0x5bd>
   35841:	cmp    BYTE PTR [rip+0x54a72],0x0        # 8a2ba <opt+0x23a>
   35848:	mov    rdi,rsi
   3584b:	je     35889 <retrieve_url+0x5f9>
   3584d:	mov    rdi,QWORD PTR [rbp+0x0]
   35851:	call   10070 <register_download>
   35856:	cmp    BYTE PTR [rip+0x5488b],0x1        # 8a0e8 <opt+0x68>
   3585d:	je     35867 <retrieve_url+0x5d7>
   3585f:	test   bl,bl
   35861:	jne    35ba9 <retrieve_url+0x919>
   35867:	mov    rax,QWORD PTR [rsp+0x10]
   3586c:	mov    rdi,QWORD PTR [rsp+0x70]
   35871:	mov    eax,DWORD PTR [rax]
   35873:	test   al,0x1
   35875:	jne    35b93 <retrieve_url+0x903>
   3587b:	test   al,0x40
   3587d:	je     35889 <retrieve_url+0x5f9>
   3587f:	call   10500 <register_css>
   35884:	mov    rdi,QWORD PTR [rsp+0x70]
   35889:	mov    rax,QWORD PTR [rsp+0x48]
   3588e:	test   rax,rax
   35891:	je     35b80 <retrieve_url+0x8f0>
   35897:	mov    QWORD PTR [rax],rdi
   3589a:	cmp    QWORD PTR [rsp+0x8],rbp
   3589f:	je     358a9 <retrieve_url+0x619>
   358a1:	mov    rdi,rbp
   358a4:	call   374d0 <url_free>
   358a9:	cmp    BYTE PTR [rsp+0x5a],0x0
   358ae:	mov    rax,QWORD PTR [rsp+0x50]
   358b3:	jne    35940 <retrieve_url+0x6b0>
   358b9:	test   bl,bl
   358bb:	jne    35940 <retrieve_url+0x6b0>
   358c1:	test   rax,rax
   358c4:	je     358cd <retrieve_url+0x63d>
   358c6:	mov    QWORD PTR [rax],0x0
   358cd:	mov    rdi,r13
   358d0:	call   4bdc0 <rpl_free>
   358d5:	cmp    BYTE PTR [rsp+0x59],0x0
   358da:	je     35900 <retrieve_url+0x670>
   358dc:	mov    rax,QWORD PTR [rsp+0x30]
   358e1:	mov    QWORD PTR [rip+0x54ab8],rax        # 8a3a0 <opt+0x320>
   358e8:	mov    rax,QWORD PTR [rsp+0x40]
   358ed:	mov    QWORD PTR [rip+0x54ab4],rax        # 8a3a8 <opt+0x328>
   358f4:	mov    rax,QWORD PTR [rsp+0x38]
   358f9:	mov    QWORD PTR [rip+0x54a98],rax        # 8a398 <opt+0x318>
   35900:	cmp    BYTE PTR [rsp+0x5c],0x0
   35905:	jne    35930 <retrieve_url+0x6a0>
   35907:	mov    rax,QWORD PTR [rsp+0x78]
   3590c:	xor    rax,QWORD PTR fs:0x28
   35915:	jne    35bf2 <retrieve_url+0x962>
   3591b:	add    rsp,0x88
   35922:	mov    eax,r12d
   35925:	pop    rbx
   35926:	pop    rbp
   35927:	pop    r12
   35929:	pop    r13
   3592b:	pop    r14
   3592d:	pop    r15
   3592f:	ret    
   35930:	mov    edi,r12d
   35933:	call   3f7b0 <inform_exit_status>
   35938:	jmp    35907 <retrieve_url+0x677>
   3593a:	nop    WORD PTR [rax+rax*1+0x0]
   35940:	test   rax,rax
   35943:	je     358cd <retrieve_url+0x63d>
   35945:	mov    QWORD PTR [rax],r13
   35948:	jmp    358d5 <retrieve_url+0x645>
   3594a:	nop    WORD PTR [rax+rax*1+0x0]
   35950:	mov    esi,DWORD PTR [rsp+0x64]
   35954:	mov    rdi,r14
   35957:	call   373b0 <url_error>
   3595c:	mov    edx,0x5
   35961:	lea    rsi,[rip+0x37c38]        # 6d5a0 <eta_str.8886+0x828>
   35968:	xor    edi,edi
   3596a:	mov    r15,rax
   3596d:	call   c780 <dcgettext@plt>
   35972:	mov    rcx,r15
   35975:	mov    rdx,r14
   35978:	mov    edi,0x1
   3597d:	mov    rsi,rax
   35980:	xor    eax,eax
   35982:	call   2e0a0 <logprintf>
   35987:	mov    rdi,r13
   3598a:	call   4bdc0 <rpl_free>
   3598f:	mov    rdi,r15
   35992:	call   4bdc0 <rpl_free>
   35997:	mov    rdi,r14
   3599a:	call   4bdc0 <rpl_free>
   3599f:	mov    rdi,r12
   359a2:	call   400d0 <iri_free>
   359a7:	cmp    BYTE PTR [rsp+0x59],0x0
   359ac:	je     359d2 <retrieve_url+0x742>
   359ae:	mov    rax,QWORD PTR [rsp+0x30]
   359b3:	mov    QWORD PTR [rip+0x549e6],rax        # 8a3a0 <opt+0x320>
   359ba:	mov    rax,QWORD PTR [rsp+0x40]
   359bf:	mov    QWORD PTR [rip+0x549e2],rax        # 8a3a8 <opt+0x328>
   359c6:	mov    rax,QWORD PTR [rsp+0x38]
   359cb:	mov    QWORD PTR [rip+0x549c6],rax        # 8a398 <opt+0x318>
   359d2:	cmp    rbp,QWORD PTR [rsp+0x8]
   359d7:	je     359e1 <retrieve_url+0x751>
   359d9:	mov    rdi,rbp
   359dc:	call   374d0 <url_free>
   359e1:	mov    r12d,0x29
   359e7:	jmp    35900 <retrieve_url+0x670>
   359ec:	mov    esi,DWORD PTR [rsp+0x64]
   359f0:	mov    rdi,QWORD PTR [rsp+0x68]
   359f5:	call   373b0 <url_error>
   359fa:	mov    rdi,QWORD PTR [rsp+0x68]
   359ff:	mov    r14,rax
   35a02:	call   2dc30 <escnonprint_uri>
   35a07:	mov    rcx,r14
   35a0a:	mov    edi,0x1
   35a0f:	lea    rsi,[rip+0x33052]        # 68a68 <primes.6089+0x2988>
   35a16:	mov    rdx,rax
   35a19:	xor    eax,eax
   35a1b:	call   2e0a0 <logprintf>
   35a20:	cmp    rbp,QWORD PTR [rsp+0x8]
   35a25:	je     35a2f <retrieve_url+0x79f>
   35a27:	mov    rdi,rbp
   35a2a:	call   374d0 <url_free>
   35a2f:	mov    rdi,r13
   35a32:	call   4bdc0 <rpl_free>
   35a37:	mov    rdi,QWORD PTR [rsp+0x68]
   35a3c:	call   4bdc0 <rpl_free>
   35a41:	mov    rdi,r14
   35a44:	mov    QWORD PTR [rsp+0x68],0x0
   35a4d:	call   4bdc0 <rpl_free>
   35a52:	cmp    BYTE PTR [rsp+0x59],0x0
   35a57:	je     35900 <retrieve_url+0x670>
   35a5d:	jmp    358dc <retrieve_url+0x64c>
   35a62:	xor    edi,edi
   35a64:	mov    edx,0x5
   35a69:	mov    DWORD PTR [rsp+0x18],r8d
   35a6e:	lea    rsi,[rip+0x37a7a]        # 6d4ef <eta_str.8886+0x777>
   35a75:	call   c780 <dcgettext@plt>
   35a7a:	mov    r8d,DWORD PTR [rsp+0x18]
   35a7f:	mov    edi,0x1
   35a84:	mov    rsi,rax
   35a87:	xor    eax,eax
   35a89:	mov    edx,r8d
   35a8c:	call   2e0a0 <logprintf>
   35a91:	mov    rdi,r14
   35a94:	call   374d0 <url_free>
   35a99:	cmp    rbp,QWORD PTR [rsp+0x8]
   35a9e:	je     35aa8 <retrieve_url+0x818>
   35aa0:	mov    rdi,rbp
   35aa3:	call   374d0 <url_free>
   35aa8:	mov    rdi,r13
   35aab:	mov    r12d,0x1b
   35ab1:	call   4bdc0 <rpl_free>
   35ab6:	mov    rdi,QWORD PTR [rsp+0x68]
   35abb:	call   4bdc0 <rpl_free>
   35ac0:	cmp    BYTE PTR [rsp+0x59],0x0
   35ac5:	mov    QWORD PTR [rsp+0x68],0x0
   35ace:	je     35900 <retrieve_url+0x670>
   35ad4:	jmp    358dc <retrieve_url+0x64c>
   35ad9:	mov    r10d,DWORD PTR [rsp+0x18]
   35ade:	test   r10d,r10d
   35ae1:	setne  bl
   35ae4:	cmp    BYTE PTR [rip+0x547d0],0x0        # 8a2bb <opt+0x23b>
   35aeb:	je     35884 <retrieve_url+0x5f4>
   35af1:	mov    rdi,r13
   35af4:	call   4b5b0 <quote>
   35af9:	lea    rdi,[rip+0x37b70]        # 6d670 <eta_str.8886+0x8f8>
   35b00:	mov    rsi,rax
   35b03:	xor    eax,eax
   35b05:	call   2e250 <debug_logprintf>
   35b0a:	mov    rdi,QWORD PTR [rsp+0x70]
   35b0f:	jmp    35889 <retrieve_url+0x5f9>
   35b14:	test   dl,dl
   35b16:	jne    35bd4 <retrieve_url+0x944>
   35b1c:	mov    r8d,DWORD PTR [rsp+0x18]
   35b21:	mov    rsi,QWORD PTR [rsp+0x70]
   35b26:	test   r8d,r8d
   35b29:	mov    rdi,rsi
   35b2c:	setne  bl
   35b2f:	test   rsi,rsi
   35b32:	je     35889 <retrieve_url+0x5f9>
   35b38:	mov    rax,QWORD PTR [rsp+0x10]
   35b3d:	mov    eax,DWORD PTR [rax]
   35b3f:	mov    DWORD PTR [rsp+0x18],eax
   35b43:	and    eax,0x2
   35b46:	jmp    3583d <retrieve_url+0x5ad>
   35b4b:	mov    edx,0x5
   35b50:	lea    rsi,[rip+0x37a71]        # 6d5c8 <eta_str.8886+0x850>
   35b57:	xor    edi,edi
   35b59:	call   c780 <dcgettext@plt>
   35b5e:	mov    rdx,r14
   35b61:	mov    edi,0x1
   35b66:	mov    rsi,rax
   35b69:	xor    eax,eax
   35b6b:	call   2e0a0 <logprintf>
   35b70:	mov    rdi,r15
   35b73:	call   374d0 <url_free>
   35b78:	mov    rdi,r13
   35b7b:	jmp    35992 <retrieve_url+0x702>
   35b80:	call   4bdc0 <rpl_free>
   35b85:	mov    QWORD PTR [rsp+0x70],0x0
   35b8e:	jmp    3589a <retrieve_url+0x60a>
   35b93:	call   104b0 <register_html>
   35b98:	mov    rax,QWORD PTR [rsp+0x10]
   35b9d:	mov    rdi,QWORD PTR [rsp+0x70]
   35ba2:	mov    eax,DWORD PTR [rax]
   35ba4:	jmp    3587b <retrieve_url+0x5eb>
   35ba9:	mov    r14,QWORD PTR [rbp+0x0]
   35bad:	mov    rdi,QWORD PTR [rsp+0x28]
   35bb2:	mov    rsi,r14
   35bb5:	call   be40 <strcmp@plt>
   35bba:	test   eax,eax
   35bbc:	je     35867 <retrieve_url+0x5d7>
   35bc2:	mov    rdi,QWORD PTR [rsp+0x28]
   35bc7:	mov    rsi,r14
   35bca:	call   10300 <register_redirection>
   35bcf:	jmp    35867 <retrieve_url+0x5d7>
   35bd4:	mov    rdi,r13
   35bd7:	call   4b5b0 <quote>
   35bdc:	lea    rdi,[rip+0x37a65]        # 6d648 <eta_str.8886+0x8d0>
   35be3:	mov    rsi,rax
   35be6:	xor    eax,eax
   35be8:	call   2e250 <debug_logprintf>
   35bed:	jmp    35b1c <retrieve_url+0x88c>
   35bf2:	call   c7b0 <__stack_chk_fail@plt>
   35bf7:	nop    WORD PTR [rax+rax*1+0x0]

0000000000035c00 <printwhat>:
   35c00:	endbr64 
   35c04:	sub    rsp,0x8
   35c08:	mov    edx,0x5
   35c0d:	cmp    edi,esi
   35c0f:	je     35c30 <printwhat+0x30>
   35c11:	lea    rsi,[rip+0x378ff]        # 6d517 <eta_str.8886+0x79f>
   35c18:	xor    edi,edi
   35c1a:	call   c780 <dcgettext@plt>
   35c1f:	xor    edi,edi
   35c21:	add    rsp,0x8
   35c25:	mov    rsi,rax
   35c28:	jmp    2de60 <logputs>
   35c2d:	nop    DWORD PTR [rax]
   35c30:	lea    rsi,[rip+0x378d3]        # 6d50a <eta_str.8886+0x792>
   35c37:	xor    edi,edi
   35c39:	call   c780 <dcgettext@plt>
   35c3e:	xor    edi,edi
   35c40:	add    rsp,0x8
   35c44:	mov    rsi,rax
   35c47:	jmp    2de60 <logputs>
   35c4c:	nop    DWORD PTR [rax+0x0]

0000000000035c50 <sleep_between_retrievals>:
   35c50:	endbr64 
   35c54:	cmp    BYTE PTR [rip+0x4b556],0x0        # 811b1 <first_retrieval.8817>
   35c5b:	jne    35cb8 <sleep_between_retrievals+0x68>
   35c5d:	movsd  xmm1,QWORD PTR [rip+0x54633]        # 8a298 <opt+0x218>
   35c65:	cmp    edi,0x1
   35c68:	pxor   xmm0,xmm0
   35c6c:	mov    edx,0x1
   35c71:	setg   cl
   35c74:	ucomisd xmm1,xmm0
   35c78:	setp   al
   35c7b:	cmovne eax,edx
   35c7e:	test   al,al
   35c80:	je     35c86 <sleep_between_retrievals+0x36>
   35c82:	test   cl,cl
   35c84:	jne    35cc0 <sleep_between_retrievals+0x70>
   35c86:	movsd  xmm1,QWORD PTR [rip+0x54602]        # 8a290 <opt+0x210>
   35c8e:	ucomisd xmm1,xmm0
   35c92:	jp     35c96 <sleep_between_retrievals+0x46>
   35c94:	je     35cb0 <sleep_between_retrievals+0x60>
   35c96:	cmp    BYTE PTR [rip+0x545eb],0x1        # 8a288 <opt+0x208>
   35c9d:	jne    35ca3 <sleep_between_retrievals+0x53>
   35c9f:	test   cl,cl
   35ca1:	je     35ce0 <sleep_between_retrievals+0x90>
   35ca3:	movapd xmm0,xmm1
   35ca7:	jmp    3ebb0 <xsleep>
   35cac:	nop    DWORD PTR [rax+0x0]
   35cb0:	ret    
   35cb1:	nop    DWORD PTR [rax+0x0]
   35cb8:	mov    BYTE PTR [rip+0x4b4f2],0x0        # 811b1 <first_retrieval.8817>
   35cbf:	ret    
   35cc0:	pxor   xmm0,xmm0
   35cc4:	cvtsi2sd xmm0,edi
   35cc8:	comisd xmm1,xmm0
   35ccc:	jb     35ca3 <sleep_between_retrievals+0x53>
   35cce:	sub    edi,0x1
   35cd1:	pxor   xmm0,xmm0
   35cd5:	cvtsi2sd xmm0,edi
   35cd9:	jmp    3ebb0 <xsleep>
   35cde:	xchg   ax,ax
   35ce0:	sub    rsp,0x18
   35ce4:	call   3ea30 <random_float>
   35ce9:	cmp    BYTE PTR [rip+0x545cb],0x0        # 8a2bb <opt+0x23b>
   35cf0:	movapd xmm1,xmm0
   35cf4:	addsd  xmm1,QWORD PTR [rip+0x36ebc]        # 6cbb8 <primes.6089+0x6ad8>
   35cfc:	movsd  xmm0,QWORD PTR [rip+0x5458c]        # 8a290 <opt+0x210>
   35d04:	mulsd  xmm1,xmm0
   35d08:	jne    35d17 <sleep_between_retrievals+0xc7>
   35d0a:	movapd xmm0,xmm1
   35d0e:	add    rsp,0x18
   35d12:	jmp    3ebb0 <xsleep>
   35d17:	lea    rdi,[rip+0x3797a]        # 6d698 <eta_str.8886+0x920>
   35d1e:	mov    eax,0x2
   35d23:	movsd  QWORD PTR [rsp+0x8],xmm1
   35d29:	call   2e250 <debug_logprintf>
   35d2e:	movsd  xmm1,QWORD PTR [rsp+0x8]
   35d34:	jmp    35d0a <sleep_between_retrievals+0xba>
   35d36:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000035d40 <free_urlpos>:
   35d40:	endbr64 
   35d44:	test   rdi,rdi
   35d47:	je     35d98 <free_urlpos+0x58>
   35d49:	push   rbp
   35d4a:	push   rbx
   35d4b:	mov    rbx,rdi
   35d4e:	sub    rsp,0x8
   35d52:	nop    WORD PTR [rax+rax*1+0x0]
   35d58:	mov    rbp,rbx
   35d5b:	mov    rbx,QWORD PTR [rbx+0x28]
   35d5f:	mov    rdi,QWORD PTR [rbp+0x0]
   35d63:	test   rdi,rdi
   35d66:	je     35d6d <free_urlpos+0x2d>
   35d68:	call   374d0 <url_free>
   35d6d:	mov    rdi,QWORD PTR [rbp+0x8]
   35d71:	call   4bdc0 <rpl_free>
   35d76:	mov    QWORD PTR [rbp+0x8],0x0
   35d7e:	mov    rdi,rbp
   35d81:	call   4bdc0 <rpl_free>
   35d86:	test   rbx,rbx
   35d89:	jne    35d58 <free_urlpos+0x18>
   35d8b:	add    rsp,0x8
   35d8f:	pop    rbx
   35d90:	pop    rbp
   35d91:	ret    
   35d92:	nop    WORD PTR [rax+rax*1+0x0]
   35d98:	ret    
   35d99:	nop    DWORD PTR [rax+0x0]

0000000000035da0 <retrieve_from_file>:
   35da0:	endbr64 
   35da4:	push   r15
   35da6:	push   r14
   35da8:	push   r13
   35daa:	mov    r13,rdx
   35dad:	push   r12
   35daf:	mov    r12d,esi
   35db2:	push   rbp
   35db3:	mov    rbp,rdi
   35db6:	push   rbx
   35db7:	sub    rsp,0x58
   35dbb:	mov    rax,QWORD PTR fs:0x28
   35dc4:	mov    QWORD PTR [rsp+0x48],rax
   35dc9:	xor    eax,eax
   35dcb:	call   40010 <iri_new>
   35dd0:	mov    DWORD PTR [r13+0x0],0x0
   35dd8:	mov    edx,0x1
   35ddd:	mov    rsi,QWORD PTR [rip+0x545ec]        # 8a3d0 <opt+0x350>
   35de4:	mov    QWORD PTR [rsp+0x30],0x0
   35ded:	mov    rdi,rax
   35df0:	mov    r15,rax
   35df3:	call   40130 <set_uri_encoding>
   35df8:	mov    rsi,QWORD PTR [rip+0x545d1]        # 8a3d0 <opt+0x350>
   35dff:	mov    rdi,r15
   35e02:	call   401f0 <set_content_encoding>
   35e07:	mov    rdi,rbp
   35e0a:	call   37270 <url_valid_scheme>
   35e0f:	test   al,al
   35e11:	jne    360b0 <retrieve_from_file+0x310>
   35e17:	test   r12b,r12b
   35e1a:	jne    35fd8 <retrieve_from_file+0x238>
   35e20:	mov    rdi,rbp
   35e23:	call   222c0 <get_urls_file>
   35e28:	mov    QWORD PTR [rsp+0x18],rax
   35e2d:	mov    rdi,QWORD PTR [rsp+0x30]
   35e32:	call   4bdc0 <rpl_free>
   35e37:	mov    rax,QWORD PTR [rsp+0x18]
   35e3c:	mov    QWORD PTR [rsp+0x30],0x0
   35e45:	test   rax,rax
   35e48:	je     361e2 <retrieve_from_file+0x442>
   35e4e:	mov    rbx,rax
   35e51:	lea    rax,[rsp+0x2c]
   35e56:	mov    DWORD PTR [rsp],0x19
   35e5d:	mov    QWORD PTR [rsp+0x10],rax
   35e62:	jmp    35f1a <retrieve_from_file+0x17a>
   35e67:	nop    WORD PTR [rax+rax*1+0x0]
   35e70:	cmp    BYTE PTR [rip+0x54483],0x0        # 8a2fa <opt+0x27a>
   35e77:	jne    35f9b <retrieve_from_file+0x1fb>
   35e7d:	test   r12,r12
   35e80:	mov    rsi,QWORD PTR [rdi]
   35e83:	lea    rcx,[rsp+0x40]
   35e88:	lea    rdx,[rsp+0x38]
   35e8d:	cmovne rdi,r12
   35e91:	sub    rsp,0x8
   35e95:	xor    r8d,r8d
   35e98:	push   0x1
   35e9a:	push   rbp
   35e9b:	push   rax
   35e9c:	mov    r9,QWORD PTR [rsp+0x30]
   35ea1:	call   35290 <retrieve_url>
   35ea6:	mov    DWORD PTR [rsp+0x20],eax
   35eaa:	add    rsp,0x20
   35eae:	mov    rdi,r14
   35eb1:	call   4bdc0 <rpl_free>
   35eb6:	test   r12,r12
   35eb9:	je     35ec3 <retrieve_from_file+0x123>
   35ebb:	mov    rdi,r12
   35ebe:	call   374d0 <url_free>
   35ec3:	mov    rdi,QWORD PTR [rsp+0x38]
   35ec8:	test   rdi,rdi
   35ecb:	je     35eda <retrieve_from_file+0x13a>
   35ecd:	cmp    BYTE PTR [rip+0x54424],0x0        # 8a2f8 <opt+0x278>
   35ed4:	jne    36010 <retrieve_from_file+0x270>
   35eda:	mov    rdi,QWORD PTR [rsp+0x40]
   35edf:	call   4bdc0 <rpl_free>
   35ee4:	mov    rdi,QWORD PTR [rsp+0x38]
   35ee9:	mov    QWORD PTR [rsp+0x40],0x0
   35ef2:	call   4bdc0 <rpl_free>
   35ef7:	mov    rdi,rbp
   35efa:	mov    QWORD PTR [rsp+0x38],0x0
   35f03:	call   400d0 <iri_free>
   35f08:	mov    rbx,QWORD PTR [rbx+0x28]
   35f0c:	add    DWORD PTR [r13+0x0],0x1
   35f11:	test   rbx,rbx
   35f14:	je     36077 <retrieve_from_file+0x2d7>
   35f1a:	mov    rdi,r15
   35f1d:	mov    DWORD PTR [rsp+0x2c],0x0
   35f25:	mov    QWORD PTR [rsp+0x38],0x0
   35f2e:	mov    QWORD PTR [rsp+0x40],0x0
   35f37:	call   40060 <iri_dup>
   35f3c:	mov    rbp,rax
   35f3f:	test   BYTE PTR [rbx+0x10],0x1
   35f43:	jne    35f08 <retrieve_from_file+0x168>
   35f45:	mov    rax,QWORD PTR [rip+0x54364]        # 8a2b0 <opt+0x230>
   35f4c:	test   rax,rax
   35f4f:	je     35f5e <retrieve_from_file+0x1be>
   35f51:	cmp    rax,QWORD PTR [rip+0x544d8]        # 8a430 <total_downloaded_bytes>
   35f58:	jl     36070 <retrieve_from_file+0x2d0>
   35f5e:	mov    rax,QWORD PTR [rbx]
   35f61:	mov    ecx,0x1
   35f66:	mov    rdx,rbp
   35f69:	xor    esi,esi
   35f6b:	mov    rdi,QWORD PTR [rax]
   35f6e:	call   385f0 <url_parse>
   35f73:	mov    rdi,QWORD PTR [rbx]
   35f76:	mov    r12,rax
   35f79:	lea    rsi,[rdi+0x10]
   35f7d:	add    rdi,0x8
   35f81:	call   343e0 <getproxy.isra.0>
   35f86:	mov    rdi,QWORD PTR [rbx]
   35f89:	mov    r14,rax
   35f8c:	movzx  eax,BYTE PTR [rip+0x54107]        # 8a09a <opt+0x1a>
   35f93:	test   al,al
   35f95:	je     35e70 <retrieve_from_file+0xd0>
   35f9b:	mov    edx,DWORD PTR [rdi+0x8]
   35f9e:	movzx  ecx,BYTE PTR [rip+0x541d3]        # 8a178 <opt+0xf8>
   35fa5:	sub    edx,0x2
   35fa8:	cmp    edx,0x1
   35fab:	jbe    35ff8 <retrieve_from_file+0x258>
   35fad:	test   r12,r12
   35fb0:	mov    rsi,rbp
   35fb3:	mov    BYTE PTR [rsp+0x8],cl
   35fb7:	cmovne rdi,r12
   35fbb:	call   328f0 <retrieve_tree>
   35fc0:	movzx  ecx,BYTE PTR [rsp+0x8]
   35fc5:	mov    DWORD PTR [rsp],eax
   35fc8:	mov    BYTE PTR [rip+0x541aa],cl        # 8a178 <opt+0xf8>
   35fce:	jmp    35eae <retrieve_from_file+0x10e>
   35fd3:	nop    DWORD PTR [rax+rax*1+0x0]
   35fd8:	mov    rcx,r15
   35fdb:	xor    edx,edx
   35fdd:	xor    esi,esi
   35fdf:	mov    rdi,rbp
   35fe2:	call   22210 <get_urls_html>
   35fe7:	mov    QWORD PTR [rsp+0x18],rax
   35fec:	jmp    35e2d <retrieve_from_file+0x8d>
   35ff1:	nop    DWORD PTR [rax+0x0]
   35ff8:	test   r14,r14
   35ffb:	je     35e7d <retrieve_from_file+0xdd>
   36001:	mov    BYTE PTR [rip+0x54170],0x1        # 8a178 <opt+0xf8>
   36008:	jmp    35fad <retrieve_from_file+0x20d>
   3600a:	nop    WORD PTR [rax+rax*1+0x0]
   36010:	xor    esi,esi
   36012:	call   3bed0 <file_exists_p>
   36017:	test   al,al
   36019:	je     35eda <retrieve_from_file+0x13a>
   3601f:	cmp    BYTE PTR [rip+0x54295],0x0        # 8a2bb <opt+0x23b>
   36026:	jne    361b3 <retrieve_from_file+0x413>
   3602c:	xor    edi,edi
   3602e:	mov    r12,QWORD PTR [rsp+0x38]
   36033:	mov    edx,0x5
   36038:	lea    rsi,[rip+0x25adc]        # 5bb1b <_IO_stdin_used+0xb1b>
   3603f:	call   c780 <dcgettext@plt>
   36044:	xor    edi,edi
   36046:	mov    rsi,rax
   36049:	mov    rdx,r12
   3604c:	xor    eax,eax
   3604e:	call   2e0a0 <logprintf>
   36053:	mov    rdi,QWORD PTR [rsp+0x38]
   36058:	call   c120 <unlink@plt>
   3605d:	test   eax,eax
   3605f:	jne    36180 <retrieve_from_file+0x3e0>
   36065:	and    DWORD PTR [rsp+0x2c],0xfffffffd
   3606a:	jmp    35eda <retrieve_from_file+0x13a>
   3606f:	nop
   36070:	mov    DWORD PTR [rsp],0x2b
   36077:	mov    rdi,QWORD PTR [rsp+0x18]
   3607c:	call   35d40 <free_urlpos>
   36081:	mov    rdi,r15
   36084:	call   400d0 <iri_free>
   36089:	mov    rax,QWORD PTR [rsp+0x48]
   3608e:	xor    rax,QWORD PTR fs:0x28
   36097:	jne    36232 <retrieve_from_file+0x492>
   3609d:	mov    eax,DWORD PTR [rsp]
   360a0:	add    rsp,0x58
   360a4:	pop    rbx
   360a5:	pop    rbp
   360a6:	pop    r12
   360a8:	pop    r13
   360aa:	pop    r14
   360ac:	pop    r15
   360ae:	ret    
   360af:	nop
   360b0:	lea    rsi,[rsp+0x40]
   360b5:	mov    ecx,0x1
   360ba:	mov    rdx,r15
   360bd:	mov    rdi,rbp
   360c0:	mov    ebx,eax
   360c2:	call   385f0 <url_parse>
   360c7:	mov    r10,rax
   360ca:	test   rax,rax
   360cd:	je     361ee <retrieve_from_file+0x44e>
   360d3:	cmp    QWORD PTR [rip+0x5416d],0x0        # 8a248 <opt+0x1c8>
   360db:	je     361c6 <retrieve_from_file+0x426>
   360e1:	lea    rdx,[rsp+0x30]
   360e6:	sub    rsp,0x8
   360ea:	xor    r8d,r8d
   360ed:	xor    ecx,ecx
   360ef:	push   0x1
   360f1:	mov    rdi,r10
   360f4:	mov    rsi,rbp
   360f7:	push   r15
   360f9:	push   0x0
   360fb:	lea    r9,[rsp+0x58]
   36100:	mov    QWORD PTR [rsp+0x28],r10
   36105:	call   35290 <retrieve_url>
   3610a:	mov    DWORD PTR [rsp+0x20],eax
   3610e:	mov    r10,QWORD PTR [rsp+0x28]
   36113:	add    rsp,0x20
   36117:	mov    r14d,eax
   3611a:	mov    rdi,r10
   3611d:	call   374d0 <url_free>
   36122:	cmp    QWORD PTR [rsp+0x30],0x0
   36128:	je     36089 <retrieve_from_file+0x2e9>
   3612e:	cmp    r14d,0x19
   36132:	jne    36089 <retrieve_from_file+0x2e9>
   36138:	test   BYTE PTR [rsp+0x38],0x1
   3613d:	mov    rsi,QWORD PTR [r15+0x8]
   36141:	cmovne r12d,ebx
   36145:	cmp    rsi,QWORD PTR [rip+0x54284]        # 8a3d0 <opt+0x350>
   3614c:	je     36158 <retrieve_from_file+0x3b8>
   3614e:	xor    edx,edx
   36150:	mov    rdi,r15
   36153:	call   40130 <set_uri_encoding>
   36158:	movzx  eax,BYTE PTR [rip+0x54267]        # 8a3c6 <opt+0x346>
   3615f:	mov    rdi,QWORD PTR [r15+0x10]
   36163:	mov    BYTE PTR [r15+0x18],al
   36167:	call   4bdc0 <rpl_free>
   3616c:	mov    QWORD PTR [r15+0x10],0x0
   36174:	mov    rbp,QWORD PTR [rsp+0x30]
   36179:	jmp    35e17 <retrieve_from_file+0x77>
   3617e:	xchg   ax,ax
   36180:	call   c740 <__errno_location@plt>
   36185:	mov    edi,DWORD PTR [rax]
   36187:	mov    r12,rax
   3618a:	call   c540 <strerror@plt>
   3618f:	mov    ecx,DWORD PTR [r12]
   36193:	mov    rdx,QWORD PTR [rsp+0x38]
   36198:	lea    rsi,[rip+0x37384]        # 6d523 <eta_str.8886+0x7ab>
   3619f:	mov    r8,rax
   361a2:	mov    edi,0x1
   361a7:	xor    eax,eax
   361a9:	call   2e0a0 <logprintf>
   361ae:	jmp    36065 <retrieve_from_file+0x2c5>
   361b3:	lea    rdi,[rip+0x3750e]        # 6d6c8 <eta_str.8886+0x950>
   361ba:	xor    eax,eax
   361bc:	call   2e250 <debug_logprintf>
   361c1:	jmp    3602c <retrieve_from_file+0x28c>
   361c6:	mov    rdi,rbp
   361c9:	mov    QWORD PTR [rsp],rax
   361cd:	call   4ba50 <xstrdup>
   361d2:	mov    r10,QWORD PTR [rsp]
   361d6:	mov    QWORD PTR [rip+0x5406b],rax        # 8a248 <opt+0x1c8>
   361dd:	jmp    360e1 <retrieve_from_file+0x341>
   361e2:	mov    DWORD PTR [rsp],0x19
   361e9:	jmp    36077 <retrieve_from_file+0x2d7>
   361ee:	mov    esi,DWORD PTR [rsp+0x40]
   361f2:	mov    rdi,rbp
   361f5:	call   373b0 <url_error>
   361fa:	mov    rdx,rbp
   361fd:	mov    edi,0x1
   36202:	lea    rsi,[rip+0x3285f]        # 68a68 <primes.6089+0x2988>
   36209:	mov    rcx,rax
   3620c:	mov    r12,rax
   3620f:	xor    eax,eax
   36211:	call   2e0a0 <logprintf>
   36216:	mov    rdi,r12
   36219:	call   4bdc0 <rpl_free>
   3621e:	mov    rdi,r15
   36221:	call   400d0 <iri_free>
   36226:	mov    DWORD PTR [rsp],0x12
   3622d:	jmp    36089 <retrieve_from_file+0x2e9>
   36232:	call   c7b0 <__stack_chk_fail@plt>
   36237:	nop    WORD PTR [rax+rax*1+0x0]

0000000000036240 <rotate_backups>:
   36240:	endbr64 
   36244:	push   r15
   36246:	mov    rsi,rdi
   36249:	push   r14
   3624b:	push   r13
   3624d:	mov    r13,rdi
   36250:	mov    edi,0x1
   36255:	push   r12
   36257:	push   rbp
   36258:	push   rbx
   36259:	sub    rsp,0x8a8
   36260:	mov    rax,QWORD PTR fs:0x28
   36269:	mov    QWORD PTR [rsp+0x898],rax
   36271:	xor    eax,eax
   36273:	mov    rdx,rsp
   36276:	call   c350 <__xstat@plt>
   3627b:	test   eax,eax
   3627d:	jne    36293 <rotate_backups+0x53>
   3627f:	mov    eax,DWORD PTR [rsp+0x18]
   36283:	and    eax,0xf000
   36288:	cmp    eax,0x8000
   3628d:	jne    363f1 <rotate_backups+0x1b1>
   36293:	mov    ebp,DWORD PTR [rip+0x54027]        # 8a2c0 <opt+0x240>
   36299:	lea    r12,[rsp+0x490]
   362a1:	lea    r15,[rip+0x2ffb8]        # 66260 <primes.6089+0x180>
   362a8:	lea    r14,[rsp+0x90]
   362b0:	cmp    ebp,0x1
   362b3:	jg     36300 <rotate_backups+0xc0>
   362b5:	jmp    36388 <rotate_backups+0x148>
   362ba:	nop    WORD PTR [rax+rax*1+0x0]
   362c0:	call   c740 <__errno_location@plt>
   362c5:	mov    edi,0x24
   362ca:	mov    DWORD PTR [rax],0x24
   362d0:	mov    rbx,rax
   362d3:	call   c540 <strerror@plt>
   362d8:	mov    r8d,DWORD PTR [rbx]
   362db:	mov    rcx,r12
   362de:	mov    rdx,r14
   362e1:	mov    r9,rax
   362e4:	lea    rsi,[rip+0x3741d]        # 6d708 <eta_str.8886+0x990>
   362eb:	mov    edi,0x1
   362f0:	xor    eax,eax
   362f2:	call   2e0a0 <logprintf>
   362f7:	cmp    ebp,0x1
   362fa:	je     36388 <rotate_backups+0x148>
   36300:	push   rbp
   36301:	mov    esi,0x400
   36306:	mov    rdi,r12
   36309:	mov    r9,r13
   3630c:	push   r15
   3630e:	lea    r8,[rip+0x3722c]        # 6d541 <eta_str.8886+0x7c9>
   36315:	mov    ecx,0x400
   3631a:	xor    eax,eax
   3631c:	mov    edx,0x1
   36321:	sub    ebp,0x1
   36324:	call   c9d0 <__snprintf_chk@plt>
   36329:	pop    rsi
   3632a:	pop    rdi
   3632b:	cmp    eax,0x3ff
   36330:	ja     362c0 <rotate_backups+0x80>
   36332:	push   rbp
   36333:	mov    ecx,0x400
   36338:	mov    edx,0x1
   3633d:	mov    r9,r13
   36340:	push   r15
   36342:	lea    r8,[rip+0x371f8]        # 6d541 <eta_str.8886+0x7c9>
   36349:	mov    esi,0x400
   3634e:	xor    eax,eax
   36350:	mov    rdi,r14
   36353:	call   c9d0 <__snprintf_chk@plt>
   36358:	pop    rdx
   36359:	pop    rcx
   3635a:	cmp    eax,0x3ff
   3635f:	ja     362c0 <rotate_backups+0x80>
   36365:	mov    rsi,r12
   36368:	mov    rdi,r14
   3636b:	call   cbb0 <rename@plt>
   36370:	test   eax,eax
   36372:	je     362f7 <rotate_backups+0xb7>
   36374:	call   c740 <__errno_location@plt>
   36379:	mov    edi,DWORD PTR [rax]
   3637b:	mov    rbx,rax
   3637e:	jmp    362d3 <rotate_backups+0x93>
   36383:	nop    DWORD PTR [rax+rax*1+0x0]
   36388:	push   0x1
   3638a:	mov    r9,r13
   3638d:	lea    r8,[rip+0x371ad]        # 6d541 <eta_str.8886+0x7c9>
   36394:	mov    rdi,r12
   36397:	push   r15
   36399:	mov    ecx,0x400
   3639e:	mov    edx,0x1
   363a3:	xor    eax,eax
   363a5:	mov    esi,0x400
   363aa:	call   c9d0 <__snprintf_chk@plt>
   363af:	pop    r8
   363b1:	pop    r9
   363b3:	cmp    eax,0x3ff
   363b8:	jbe    36420 <rotate_backups+0x1e0>
   363ba:	call   c740 <__errno_location@plt>
   363bf:	mov    edi,0x24
   363c4:	mov    DWORD PTR [rax],0x24
   363ca:	mov    rbx,rax
   363cd:	call   c540 <strerror@plt>
   363d2:	mov    r8d,DWORD PTR [rbx]
   363d5:	mov    rcx,r12
   363d8:	mov    rdx,r13
   363db:	mov    r9,rax
   363de:	lea    rsi,[rip+0x37323]        # 6d708 <eta_str.8886+0x990>
   363e5:	mov    edi,0x1
   363ea:	xor    eax,eax
   363ec:	call   2e0a0 <logprintf>
   363f1:	mov    rax,QWORD PTR [rsp+0x898]
   363f9:	xor    rax,QWORD PTR fs:0x28
   36402:	jne    3643b <rotate_backups+0x1fb>
   36404:	add    rsp,0x8a8
   3640b:	pop    rbx
   3640c:	pop    rbp
   3640d:	pop    r12
   3640f:	pop    r13
   36411:	pop    r14
   36413:	pop    r15
   36415:	ret    
   36416:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36420:	mov    rsi,r12
   36423:	mov    rdi,r13
   36426:	call   cbb0 <rename@plt>
   3642b:	test   eax,eax
   3642d:	je     363f1 <rotate_backups+0x1b1>
   3642f:	call   c740 <__errno_location@plt>
   36434:	mov    edi,DWORD PTR [rax]
   36436:	mov    rbx,rax
   36439:	jmp    363cd <rotate_backups+0x18d>
   3643b:	call   c7b0 <__stack_chk_fail@plt>

0000000000036440 <url_uses_proxy>:
   36440:	endbr64 
   36444:	push   r12
   36446:	xor    r12d,r12d
   36449:	test   rdi,rdi
   3644c:	je     3646a <url_uses_proxy+0x2a>
   3644e:	lea    rsi,[rdi+0x10]
   36452:	add    rdi,0x8
   36456:	call   343e0 <getproxy.isra.0>
   3645b:	test   rax,rax
   3645e:	mov    rdi,rax
   36461:	setne  r12b
   36465:	call   4bdc0 <rpl_free>
   3646a:	mov    eax,r12d
   3646d:	pop    r12
   3646f:	ret    

0000000000036470 <set_local_file>:
   36470:	endbr64 
   36474:	mov    rax,QWORD PTR [rip+0x53d05]        # 8a180 <opt+0x100>
   3647b:	test   rax,rax
   3647e:	je     36490 <set_local_file+0x20>
   36480:	cmp    BYTE PTR [rip+0x53fb1],0x0        # 8a438 <output_stream_regular>
   36487:	je     36493 <set_local_file+0x23>
   36489:	mov    QWORD PTR [rdi],rax
   3648c:	ret    
   3648d:	nop    DWORD PTR [rax]
   36490:	mov    QWORD PTR [rdi],rsi
   36493:	ret    
   36494:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3649f:	nop

00000000000364a0 <input_file_url>:
   364a0:	endbr64 
   364a4:	test   rdi,rdi
   364a7:	je     364e0 <input_file_url+0x40>
   364a9:	sub    rsp,0x8
   364ad:	call   371c0 <url_has_scheme>
   364b2:	test   al,al
   364b4:	je     364d0 <input_file_url+0x30>
   364b6:	movzx  eax,BYTE PTR [rip+0x4acf3]        # 811b0 <first.8867>
   364bd:	test   al,al
   364bf:	je     364d0 <input_file_url+0x30>
   364c1:	mov    BYTE PTR [rip+0x4ace8],0x0        # 811b0 <first.8867>
   364c8:	add    rsp,0x8
   364cc:	ret    
   364cd:	nop    DWORD PTR [rax]
   364d0:	xor    eax,eax
   364d2:	add    rsp,0x8
   364d6:	ret    
   364d7:	nop    WORD PTR [rax+rax*1+0x0]
   364e0:	xor    eax,eax
   364e2:	ret    
   364e3:	nop    WORD PTR cs:[rax+rax*1+0x0]
   364ed:	nop    DWORD PTR [rax]

00000000000364f0 <nonexisting_url>:
   364f0:	endbr64 
   364f4:	push   rbp
   364f5:	mov    rbp,rdi
   364f8:	call   34370 <is_robots_txt_url>
   364fd:	test   al,al
   364ff:	jne    36520 <nonexisting_url+0x30>
   36501:	mov    rdi,QWORD PTR [rip+0x53740]        # 89c48 <nonexisting_urls_set>
   36508:	test   rdi,rdi
   3650b:	je     36528 <nonexisting_url+0x38>
   3650d:	mov    rsi,rbp
   36510:	pop    rbp
   36511:	jmp    3cc20 <string_set_add>
   36516:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36520:	pop    rbp
   36521:	ret    
   36522:	nop    WORD PTR [rax+rax*1+0x0]
   36528:	call   1e140 <make_string_hash_table>
   3652d:	mov    rsi,rbp
   36530:	pop    rbp
   36531:	mov    rdi,rax
   36534:	mov    QWORD PTR [rip+0x5370d],rax        # 89c48 <nonexisting_urls_set>
   3653b:	jmp    3cc20 <string_set_add>

0000000000036540 <print_broken_links>:
   36540:	endbr64 
   36544:	push   r12
   36546:	push   rbp
   36547:	push   rbx
   36548:	sub    rsp,0x30
   3654c:	mov    rdi,QWORD PTR [rip+0x536f5]        # 89c48 <nonexisting_urls_set>
   36553:	mov    rax,QWORD PTR fs:0x28
   3655c:	mov    QWORD PTR [rsp+0x28],rax
   36561:	xor    eax,eax
   36563:	test   rdi,rdi
   36566:	je     36620 <print_broken_links+0xe0>
   3656c:	call   1e130 <hash_table_count>
   36571:	mov    r8d,0x5
   36577:	xor    edi,edi
   36579:	mov    rbx,rsp
   3657c:	movsxd rcx,eax
   3657f:	lea    rdx,[rip+0x371e3]        # 6d769 <eta_str.8886+0x9f1>
   36586:	lea    rsi,[rip+0x371f5]        # 6d782 <eta_str.8886+0xa0a>
   3658d:	mov    r12,rcx
   36590:	lea    rbp,[rip+0x250c4]        # 5b65b <_IO_stdin_used+0x65b>
   36597:	call   bf00 <dcngettext@plt>
   3659c:	mov    edx,r12d
   3659f:	mov    edi,0x1
   365a4:	mov    rsi,rax
   365a7:	xor    eax,eax
   365a9:	call   2e0a0 <logprintf>
   365ae:	mov    rdi,QWORD PTR [rip+0x53693]        # 89c48 <nonexisting_urls_set>
   365b5:	mov    rsi,rbx
   365b8:	call   1e0c0 <hash_table_iterate>
   365bd:	jmp    365e5 <print_broken_links+0xa5>
   365bf:	nop
   365c0:	mov    r12,QWORD PTR [rsp]
   365c4:	mov    edx,0x5
   365c9:	mov    rsi,rbp
   365cc:	xor    edi,edi
   365ce:	call   c780 <dcgettext@plt>
   365d3:	mov    edi,0x1
   365d8:	mov    rsi,rax
   365db:	mov    rdx,r12
   365de:	xor    eax,eax
   365e0:	call   2e0a0 <logprintf>
   365e5:	mov    rdi,rbx
   365e8:	call   1e0e0 <hash_table_iter_next>
   365ed:	test   eax,eax
   365ef:	jne    365c0 <print_broken_links+0x80>
   365f1:	lea    rsi,[rip+0x2f3d7]        # 659cf <yy_accept+0x90f>
   365f8:	mov    edi,0x1
   365fd:	call   2de60 <logputs>
   36602:	mov    rax,QWORD PTR [rsp+0x28]
   36607:	xor    rax,QWORD PTR fs:0x28
   36610:	jne    36642 <print_broken_links+0x102>
   36612:	add    rsp,0x30
   36616:	pop    rbx
   36617:	pop    rbp
   36618:	pop    r12
   3661a:	ret    
   3661b:	nop    DWORD PTR [rax+rax*1+0x0]
   36620:	mov    edx,0x5
   36625:	lea    rsi,[rip+0x37124]        # 6d750 <eta_str.8886+0x9d8>
   3662c:	call   c780 <dcgettext@plt>
   36631:	mov    edi,0x1
   36636:	mov    rsi,rax
   36639:	xor    eax,eax
   3663b:	call   2e0a0 <logprintf>
   36640:	jmp    36602 <print_broken_links+0xc2>
   36642:	call   c7b0 <__stack_chk_fail@plt>
   36647:	nop    WORD PTR [rax+rax*1+0x0]

0000000000036650 <full_path_length>:
   36650:	push   r12
   36652:	xor    r12d,r12d
   36655:	push   rbx
   36656:	mov    rbx,rdi
   36659:	sub    rsp,0x8
   3665d:	mov    rdi,QWORD PTR [rdi+0x20]
   36661:	test   rdi,rdi
   36664:	je     3666f <full_path_length+0x1f>
   36666:	call   c310 <strlen@plt>
   3666b:	lea    r12d,[rax+0x1]
   3666f:	mov    rdi,QWORD PTR [rbx+0x28]
   36673:	test   rdi,rdi
   36676:	je     36682 <full_path_length+0x32>
   36678:	call   c310 <strlen@plt>
   3667d:	lea    r12d,[r12+rax*1+0x1]
   36682:	mov    rdi,QWORD PTR [rbx+0x30]
   36686:	test   rdi,rdi
   36689:	je     36695 <full_path_length+0x45>
   3668b:	call   c310 <strlen@plt>
   36690:	lea    r12d,[r12+rax*1+0x1]
   36695:	add    rsp,0x8
   36699:	mov    eax,r12d
   3669c:	pop    rbx
   3669d:	pop    r12
   3669f:	ret    

00000000000366a0 <full_path_write>:
   366a0:	push   r12
   366a2:	push   rbp
   366a3:	mov    rbp,rdi
   366a6:	push   rbx
   366a7:	mov    r12,QWORD PTR [rdi+0x20]
   366ab:	mov    rbx,rsi
   366ae:	test   r12,r12
   366b1:	je     366d6 <full_path_write+0x36>
   366b3:	mov    rdi,r12
   366b6:	call   c310 <strlen@plt>
   366bb:	mov    BYTE PTR [rbx],0x2f
   366be:	lea    rcx,[rbx+0x1]
   366c2:	mov    rsi,r12
   366c5:	movsxd rbx,eax
   366c8:	mov    rdi,rcx
   366cb:	mov    rdx,rbx
   366ce:	call   cb30 <memcpy@plt>
   366d3:	add    rbx,rax
   366d6:	mov    r12,QWORD PTR [rbp+0x28]
   366da:	test   r12,r12
   366dd:	je     36702 <full_path_write+0x62>
   366df:	mov    rdi,r12
   366e2:	call   c310 <strlen@plt>
   366e7:	mov    BYTE PTR [rbx],0x3b
   366ea:	lea    rcx,[rbx+0x1]
   366ee:	mov    rsi,r12
   366f1:	movsxd rbx,eax
   366f4:	mov    rdi,rcx
   366f7:	mov    rdx,rbx
   366fa:	call   cb30 <memcpy@plt>
   366ff:	add    rbx,rax
   36702:	mov    rbp,QWORD PTR [rbp+0x30]
   36706:	test   rbp,rbp
   36709:	je     36730 <full_path_write+0x90>
   3670b:	mov    rdi,rbp
   3670e:	call   c310 <strlen@plt>
   36713:	mov    BYTE PTR [rbx],0x3f
   36716:	lea    rdi,[rbx+0x1]
   3671a:	mov    rsi,rbp
   3671d:	pop    rbx
   3671e:	movsxd rdx,eax
   36721:	pop    rbp
   36722:	pop    r12
   36724:	jmp    cb30 <memcpy@plt>
   36729:	nop    DWORD PTR [rax+0x0]
   36730:	pop    rbx
   36731:	pop    rbp
   36732:	pop    r12
   36734:	ret    
   36735:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000036740 <append_null>:
   36740:	push   rbx
   36741:	movsxd rsi,DWORD PTR [rdi+0xc]
   36745:	mov    rbx,rdi
   36748:	mov    edx,DWORD PTR [rdi+0x8]
   3674b:	mov    rdi,QWORD PTR [rdi]
   3674e:	cmp    esi,edx
   36750:	jl     36791 <append_null+0x51>
   36752:	mov    r8d,0x10
   36758:	nop    DWORD PTR [rax+rax*1+0x0]
   36760:	lea    ecx,[rdx+rdx*1]
   36763:	mov    edx,r8d
   36766:	cmp    ecx,0x10
   36769:	cmovge edx,ecx
   3676c:	cmp    esi,edx
   3676e:	jge    36760 <append_null+0x20>
   36770:	movsxd rsi,ecx
   36773:	cmp    ecx,0xf
   36776:	mov    eax,0x10
   3677b:	mov    DWORD PTR [rbx+0x8],edx
   3677e:	cmovle rsi,rax
   36782:	call   4b870 <xrealloc>
   36787:	movsxd rsi,DWORD PTR [rbx+0xc]
   3678b:	mov    QWORD PTR [rbx],rax
   3678e:	mov    rdi,rax
   36791:	mov    BYTE PTR [rdi+rsi*1],0x0
   36795:	pop    rbx
   36796:	ret    
   36797:	nop    WORD PTR [rax+rax*1+0x0]

00000000000367a0 <append_char>:
   367a0:	push   rbp
   367a1:	mov    rbp,rsi
   367a4:	push   rbx
   367a5:	sub    rsp,0x8
   367a9:	test   dil,dil
   367ac:	je     36801 <append_char+0x61>
   367ae:	movsxd rsi,DWORD PTR [rsi+0xc]
   367b2:	mov    edx,DWORD PTR [rbp+0x8]
   367b5:	mov    ebx,edi
   367b7:	mov    rdi,QWORD PTR [rbp+0x0]
   367bb:	cmp    esi,edx
   367bd:	jl     367fa <append_char+0x5a>
   367bf:	mov    r8d,0x10
   367c5:	nop    DWORD PTR [rax]
   367c8:	lea    ecx,[rdx+rdx*1]
   367cb:	mov    edx,r8d
   367ce:	cmp    ecx,0x10
   367d1:	cmovge edx,ecx
   367d4:	cmp    esi,edx
   367d6:	jge    367c8 <append_char+0x28>
   367d8:	movsxd rsi,ecx
   367db:	cmp    ecx,0xf
   367de:	mov    eax,0x10
   367e3:	mov    DWORD PTR [rbp+0x8],edx
   367e6:	cmovle rsi,rax
   367ea:	call   4b870 <xrealloc>
   367ef:	movsxd rsi,DWORD PTR [rbp+0xc]
   367f3:	mov    QWORD PTR [rbp+0x0],rax
   367f7:	mov    rdi,rax
   367fa:	mov    BYTE PTR [rdi+rsi*1],bl
   367fd:	add    DWORD PTR [rbp+0xc],0x1
   36801:	add    rsp,0x8
   36805:	mov    rdi,rbp
   36808:	pop    rbx
   36809:	pop    rbp
   3680a:	jmp    36740 <append_null>
   3680f:	nop

0000000000036810 <append_string>:
   36810:	push   r12
   36812:	mov    r12,rdi
   36815:	push   rbp
   36816:	mov    rbp,rsi
   36819:	push   rbx
   3681a:	call   c310 <strlen@plt>
   3681f:	test   eax,eax
   36821:	je     36883 <append_string+0x73>
   36823:	mov    rbx,rax
   36826:	movsxd rax,DWORD PTR [rbp+0xc]
   3682a:	mov    edx,DWORD PTR [rbp+0x8]
   3682d:	mov    rdi,QWORD PTR [rbp+0x0]
   36831:	lea    esi,[rax+rbx*1]
   36834:	cmp    esi,edx
   36836:	jle    36872 <append_string+0x62>
   36838:	mov    r8d,0x10
   3683e:	xchg   ax,ax
   36840:	lea    ecx,[rdx+rdx*1]
   36843:	mov    edx,r8d
   36846:	cmp    ecx,0x10
   36849:	cmovge edx,ecx
   3684c:	cmp    esi,edx
   3684e:	jg     36840 <append_string+0x30>
   36850:	movsxd rsi,ecx
   36853:	cmp    ecx,0xf
   36856:	mov    eax,0x10
   3685b:	mov    DWORD PTR [rbp+0x8],edx
   3685e:	cmovle rsi,rax
   36862:	call   4b870 <xrealloc>
   36867:	mov    QWORD PTR [rbp+0x0],rax
   3686b:	mov    rdi,rax
   3686e:	movsxd rax,DWORD PTR [rbp+0xc]
   36872:	add    rdi,rax
   36875:	movsxd rdx,ebx
   36878:	mov    rsi,r12
   3687b:	call   cb30 <memcpy@plt>
   36880:	add    DWORD PTR [rbp+0xc],ebx
   36883:	pop    rbx
   36884:	mov    rdi,rbp
   36887:	pop    rbp
   36888:	pop    r12
   3688a:	jmp    36740 <append_null>
   3688f:	nop

0000000000036890 <url_escape_1>:
   36890:	push   r12
   36892:	push   rbp
   36893:	mov    rbp,rdi
   36896:	push   rbx
   36897:	movzx  eax,BYTE PTR [rdi]
   3689a:	test   al,al
   3689c:	je     36948 <url_escape_1+0xb8>
   368a2:	mov    rcx,rdi
   368a5:	mov    ebx,esi
   368a7:	lea    r12,[rip+0x372f2]        # 6dba0 <urlchr_table>
   368ae:	xor    edi,edi
   368b0:	movzx  eax,al
   368b3:	lea    r8d,[rdi+0x2]
   368b7:	test   BYTE PTR [r12+rax*1],bl
   368bb:	cmovne edi,r8d
   368bf:	movzx  eax,BYTE PTR [rcx+0x1]
   368c3:	add    rcx,0x1
   368c7:	test   al,al
   368c9:	jne    368b0 <url_escape_1+0x20>
   368cb:	test   edi,edi
   368cd:	je     36948 <url_escape_1+0xb8>
   368cf:	sub    rcx,rbp
   368d2:	lea    edi,[rdi+rcx*1+0x1]
   368d6:	movsxd rdi,edi
   368d9:	call   4b850 <xmalloc>
   368de:	movzx  edx,BYTE PTR [rbp+0x0]
   368e2:	mov    rcx,rax
   368e5:	test   dl,dl
   368e7:	je     3693d <url_escape_1+0xad>
   368e9:	lea    rdi,[rip+0x31f40]        # 68830 <primes.6089+0x2750>
   368f0:	jmp    36922 <url_escape_1+0x92>
   368f2:	nop    WORD PTR [rax+rax*1+0x0]
   368f8:	mov    esi,edx
   368fa:	and    edx,0xf
   368fd:	mov    BYTE PTR [rcx],0x25
   36900:	add    rcx,0x3
   36904:	movzx  edx,BYTE PTR [rdi+rdx*1]
   36908:	shr    sil,0x4
   3690c:	and    esi,0xf
   3690f:	mov    BYTE PTR [rcx-0x1],dl
   36912:	movzx  esi,BYTE PTR [rdi+rsi*1]
   36916:	movzx  edx,BYTE PTR [rbp+0x0]
   3691a:	mov    BYTE PTR [rcx-0x2],sil
   3691e:	test   dl,dl
   36920:	je     3693d <url_escape_1+0xad>
   36922:	movzx  esi,dl
   36925:	add    rbp,0x1
   36929:	test   BYTE PTR [r12+rsi*1],bl
   3692d:	jne    368f8 <url_escape_1+0x68>
   3692f:	mov    BYTE PTR [rcx],dl
   36931:	movzx  edx,BYTE PTR [rbp+0x0]
   36935:	add    rcx,0x1
   36939:	test   dl,dl
   3693b:	jne    36922 <url_escape_1+0x92>
   3693d:	mov    BYTE PTR [rcx],0x0
   36940:	pop    rbx
   36941:	pop    rbp
   36942:	pop    r12
   36944:	ret    
   36945:	nop    DWORD PTR [rax]
   36948:	mov    rax,rbp
   3694b:	test   dl,dl
   3694d:	jne    36940 <url_escape_1+0xb0>
   3694f:	pop    rbx
   36950:	mov    rdi,rbp
   36953:	pop    rbp
   36954:	pop    r12
   36956:	jmp    4ba50 <xstrdup>
   3695b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000036960 <url_free.part.0>:
   36960:	push   rbp
   36961:	mov    rbp,rdi
   36964:	mov    rdi,QWORD PTR [rdi+0x10]
   36968:	call   4bdc0 <rpl_free>
   3696d:	mov    QWORD PTR [rbp+0x10],0x0
   36975:	mov    rdi,QWORD PTR [rbp+0x20]
   36979:	call   4bdc0 <rpl_free>
   3697e:	mov    QWORD PTR [rbp+0x20],0x0
   36986:	mov    rdi,QWORD PTR [rbp+0x0]
   3698a:	call   4bdc0 <rpl_free>
   3698f:	mov    QWORD PTR [rbp+0x0],0x0
   36997:	mov    rdi,QWORD PTR [rbp+0x28]
   3699b:	call   4bdc0 <rpl_free>
   369a0:	mov    QWORD PTR [rbp+0x28],0x0
   369a8:	mov    rdi,QWORD PTR [rbp+0x30]
   369ac:	call   4bdc0 <rpl_free>
   369b1:	mov    QWORD PTR [rbp+0x30],0x0
   369b9:	mov    rdi,QWORD PTR [rbp+0x38]
   369bd:	call   4bdc0 <rpl_free>
   369c2:	mov    QWORD PTR [rbp+0x38],0x0
   369ca:	mov    rdi,QWORD PTR [rbp+0x50]
   369ce:	call   4bdc0 <rpl_free>
   369d3:	mov    QWORD PTR [rbp+0x50],0x0
   369db:	mov    rdi,QWORD PTR [rbp+0x58]
   369df:	call   4bdc0 <rpl_free>
   369e4:	mov    QWORD PTR [rbp+0x58],0x0
   369ec:	mov    rdi,QWORD PTR [rbp+0x40]
   369f0:	call   4bdc0 <rpl_free>
   369f5:	mov    QWORD PTR [rbp+0x40],0x0
   369fd:	mov    rdi,QWORD PTR [rbp+0x48]
   36a01:	call   4bdc0 <rpl_free>
   36a06:	mov    QWORD PTR [rbp+0x48],0x0
   36a0e:	mov    rdi,rbp
   36a11:	pop    rbp
   36a12:	jmp    4bdc0 <rpl_free>
   36a17:	nop    WORD PTR [rax+rax*1+0x0]

0000000000036a20 <url_unescape_1>:
   36a20:	movzx  eax,BYTE PTR [rdi]
   36a23:	test   al,al
   36a25:	je     36b20 <url_unescape_1+0x100>
   36a2b:	push   r12
   36a2d:	mov    r8,rdi
   36a30:	mov    r10d,0x1
   36a36:	movabs r9,0x7e0000007e03ff
   36a40:	push   rbp
   36a41:	push   rbx
   36a42:	lea    rbx,[rip+0x37157]        # 6dba0 <urlchr_table>
   36a49:	jmp    36a61 <url_unescape_1+0x41>
   36a4b:	mov    BYTE PTR [r8],al
   36a4e:	movzx  eax,BYTE PTR [rdi+0x1]
   36a52:	lea    rdx,[rdi+0x1]
   36a56:	add    r8,0x1
   36a5a:	test   al,al
   36a5c:	je     36ad8 <url_unescape_1+0xb8>
   36a5e:	mov    rdi,rdx
   36a61:	cmp    al,0x25
   36a63:	jne    36a4b <url_unescape_1+0x2b>
   36a65:	movzx  r12d,BYTE PTR [rdi+0x1]
   36a6a:	test   r12b,r12b
   36a6d:	je     36a4b <url_unescape_1+0x2b>
   36a6f:	movzx  ebp,BYTE PTR [rdi+0x2]
   36a73:	test   bpl,bpl
   36a76:	je     36a4b <url_unescape_1+0x2b>
   36a78:	lea    edx,[r12-0x30]
   36a7d:	cmp    dl,0x36
   36a80:	ja     36a4b <url_unescape_1+0x2b>
   36a82:	mov    r11,r10
   36a85:	mov    ecx,edx
   36a87:	shl    r11,cl
   36a8a:	test   r11,r9
   36a8d:	je     36a4b <url_unescape_1+0x2b>
   36a8f:	lea    ecx,[rbp-0x30]
   36a92:	cmp    cl,0x36
   36a95:	ja     36a4b <url_unescape_1+0x2b>
   36a97:	mov    r11,r10
   36a9a:	shl    r11,cl
   36a9d:	test   r11,r9
   36aa0:	je     36a4b <url_unescape_1+0x2b>
   36aa2:	cmp    r12b,0x39
   36aa6:	ja     36b00 <url_unescape_1+0xe0>
   36aa8:	shl    edx,0x4
   36aab:	cmp    bpl,0x39
   36aaf:	ja     36ae8 <url_unescape_1+0xc8>
   36ab1:	add    edx,ecx
   36ab3:	movzx  ecx,dl
   36ab6:	movzx  r11d,BYTE PTR [rbx+rcx*1]
   36abb:	and    r11d,esi
   36abe:	mov    ecx,r11d
   36ac1:	and    ecx,0x1
   36ac4:	jne    36a4b <url_unescape_1+0x2b>
   36ac6:	test   dl,dl
   36ac8:	je     36a4b <url_unescape_1+0x2b>
   36aca:	add    rdi,0x2
   36ace:	mov    eax,edx
   36ad0:	jmp    36a4b <url_unescape_1+0x2b>
   36ad5:	nop    DWORD PTR [rax]
   36ad8:	mov    BYTE PTR [r8],0x0
   36adc:	pop    rbx
   36add:	pop    rbp
   36ade:	pop    r12
   36ae0:	ret    
   36ae1:	nop    DWORD PTR [rax+0x0]
   36ae8:	lea    r11d,[rbp-0x37]
   36aec:	lea    ecx,[rbp-0x57]
   36aef:	cmp    bpl,0x46
   36af3:	cmovbe ecx,r11d
   36af7:	jmp    36ab1 <url_unescape_1+0x91>
   36af9:	nop    DWORD PTR [rax+0x0]
   36b00:	cmp    r12b,0x46
   36b04:	lea    r11d,[r12-0x37]
   36b09:	lea    edx,[r12-0x57]
   36b0e:	cmovbe edx,r11d
   36b12:	shl    edx,0x4
   36b15:	cmp    bpl,0x39
   36b19:	jbe    36ab1 <url_unescape_1+0x91>
   36b1b:	jmp    36ae8 <url_unescape_1+0xc8>
   36b1d:	nop    DWORD PTR [rax]
   36b20:	mov    BYTE PTR [rdi],0x0
   36b23:	ret    
   36b24:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   36b2f:	nop

0000000000036b30 <append_uri_pathel.constprop.0>:
   36b30:	push   r15
   36b32:	mov    r15,rdi
   36b35:	push   r14
   36b37:	push   r13
   36b39:	mov    r13d,0x1
   36b3f:	push   r12
   36b41:	mov    r12,rdx
   36b44:	push   rbp
   36b45:	push   rbx
   36b46:	sub    rsp,0x428
   36b4d:	mov    rax,QWORD PTR fs:0x28
   36b56:	mov    QWORD PTR [rsp+0x418],rax
   36b5e:	xor    eax,eax
   36b60:	mov    eax,DWORD PTR [rip+0x5384a]        # 8a3b0 <opt+0x330>
   36b66:	test   eax,eax
   36b68:	je     36b79 <append_uri_pathel.constprop.0+0x49>
   36b6a:	xor    r13d,r13d
   36b6d:	cmp    eax,0x1
   36b70:	setne  r13b
   36b74:	lea    r13d,[r13+r13*1+0x2]
   36b79:	cmp    BYTE PTR [rip+0x53834],0x0        # 8a3b4 <opt+0x334>
   36b80:	jne    36d70 <append_uri_pathel.constprop.0+0x240>
   36b86:	sub    rsi,r15
   36b89:	lea    rbx,[rsp+0x10]
   36b8e:	mov    rbp,rsi
   36b91:	mov    r14,rbx
   36b94:	cmp    rsi,0x3ff
   36b9b:	ja     36e88 <append_uri_pathel.constprop.0+0x358>
   36ba1:	mov    rdx,rbp
   36ba4:	mov    rsi,r15
   36ba7:	mov    rdi,r14
   36baa:	call   cb30 <memcpy@plt>
   36baf:	mov    BYTE PTR [r14+rbp*1],0x0
   36bb4:	xor    esi,esi
   36bb6:	mov    rdi,r14
   36bb9:	call   36a20 <url_unescape_1>
   36bbe:	mov    rdi,r14
   36bc1:	call   c310 <strlen@plt>
   36bc6:	lea    r15,[r14+rax*1]
   36bca:	cmp    rax,0x2
   36bce:	je     36df0 <append_uri_pathel.constprop.0+0x2c0>
   36bd4:	mov    r8d,eax
   36bd7:	cmp    r14,r15
   36bda:	jae    36e20 <append_uri_pathel.constprop.0+0x2f0>
   36be0:	movzx  edx,BYTE PTR [r14]
   36be4:	mov    rbp,r14
   36be7:	movzx  esi,BYTE PTR [rip+0x537c7]        # 8a3b5 <opt+0x335>
   36bee:	mov    rax,rbp
   36bf1:	xor    ecx,ecx
   36bf3:	lea    rdi,[rip+0x36ea6]        # 6daa0 <filechr_table>
   36bfa:	jmp    36c13 <append_uri_pathel.constprop.0+0xe3>
   36bfc:	nop    DWORD PTR [rax+0x0]
   36c00:	test   dl,dl
   36c02:	jns    36c18 <append_uri_pathel.constprop.0+0xe8>
   36c04:	add    rax,0x1
   36c08:	add    ecx,0x1
   36c0b:	cmp    rax,r15
   36c0e:	jae    36c2a <append_uri_pathel.constprop.0+0xfa>
   36c10:	movzx  edx,BYTE PTR [rax]
   36c13:	test   sil,sil
   36c16:	jne    36c00 <append_uri_pathel.constprop.0+0xd0>
   36c18:	movzx  edx,BYTE PTR [rdi+rdx*1]
   36c1c:	test   edx,r13d
   36c1f:	jne    36c04 <append_uri_pathel.constprop.0+0xd4>
   36c21:	add    rax,0x1
   36c25:	cmp    rax,r15
   36c28:	jb     36c10 <append_uri_pathel.constprop.0+0xe0>
   36c2a:	mov    esi,DWORD PTR [r12+0xc]
   36c2f:	lea    r8d,[r8+rcx*2]
   36c33:	mov    edx,DWORD PTR [r12+0x8]
   36c38:	mov    rdi,QWORD PTR [r12]
   36c3c:	lea    r10d,[r8+rsi*1]
   36c40:	cmp    r10d,edx
   36c43:	jle    36c9b <append_uri_pathel.constprop.0+0x16b>
   36c45:	mov    esi,0x10
   36c4a:	nop    WORD PTR [rax+rax*1+0x0]
   36c50:	lea    r9d,[rdx+rdx*1]
   36c54:	mov    edx,esi
   36c56:	cmp    r9d,0x10
   36c5a:	cmovge edx,r9d
   36c5e:	cmp    r10d,edx
   36c61:	jg     36c50 <append_uri_pathel.constprop.0+0x120>
   36c63:	movsxd rsi,r9d
   36c66:	cmp    r9d,0xf
   36c6a:	mov    eax,0x10
   36c6f:	mov    DWORD PTR [rsp+0xc],ecx
   36c73:	mov    DWORD PTR [r12+0x8],edx
   36c78:	cmovle rsi,rax
   36c7c:	mov    DWORD PTR [rsp+0x8],r8d
   36c81:	call   4b870 <xrealloc>
   36c86:	mov    esi,DWORD PTR [r12+0xc]
   36c8b:	mov    ecx,DWORD PTR [rsp+0xc]
   36c8f:	mov    QWORD PTR [r12],rax
   36c93:	mov    r8d,DWORD PTR [rsp+0x8]
   36c98:	mov    rdi,rax
   36c9b:	movsxd rax,esi
   36c9e:	add    rdi,rax
   36ca1:	test   ecx,ecx
   36ca3:	je     36e50 <append_uri_pathel.constprop.0+0x320>
   36ca9:	cmp    r15,rbp
   36cac:	jbe    36d1a <append_uri_pathel.constprop.0+0x1ea>
   36cae:	lea    rcx,[rip+0x31b7b]        # 68830 <primes.6089+0x2750>
   36cb5:	lea    rsi,[rip+0x36de4]        # 6daa0 <filechr_table>
   36cbc:	jmp    36ced <append_uri_pathel.constprop.0+0x1bd>
   36cbe:	xchg   ax,ax
   36cc0:	test   al,al
   36cc2:	jns    36cfa <append_uri_pathel.constprop.0+0x1ca>
   36cc4:	mov    edx,eax
   36cc6:	and    eax,0xf
   36cc9:	add    rbp,0x1
   36ccd:	mov    BYTE PTR [rdi],0x25
   36cd0:	shr    dl,0x4
   36cd3:	movzx  eax,BYTE PTR [rcx+rax*1]
   36cd7:	add    rdi,0x3
   36cdb:	and    edx,0xf
   36cde:	movzx  edx,BYTE PTR [rcx+rdx*1]
   36ce2:	mov    BYTE PTR [rdi-0x1],al
   36ce5:	mov    BYTE PTR [rdi-0x2],dl
   36ce8:	cmp    r15,rbp
   36ceb:	je     36d15 <append_uri_pathel.constprop.0+0x1e5>
   36ced:	cmp    BYTE PTR [rip+0x536c1],0x0        # 8a3b5 <opt+0x335>
   36cf4:	movzx  eax,BYTE PTR [rbp+0x0]
   36cf8:	jne    36cc0 <append_uri_pathel.constprop.0+0x190>
   36cfa:	movzx  edx,al
   36cfd:	movzx  edx,BYTE PTR [rsi+rdx*1]
   36d01:	test   edx,r13d
   36d04:	jne    36cc4 <append_uri_pathel.constprop.0+0x194>
   36d06:	add    rbp,0x1
   36d0a:	mov    BYTE PTR [rdi],al
   36d0c:	add    rdi,0x1
   36d10:	cmp    r15,rbp
   36d13:	jne    36ced <append_uri_pathel.constprop.0+0x1bd>
   36d15:	mov    esi,DWORD PTR [r12+0xc]
   36d1a:	mov    edi,DWORD PTR [rip+0x53698]        # 8a3b8 <opt+0x338>
   36d20:	lea    eax,[rdi-0x1]
   36d23:	cmp    eax,0x1
   36d26:	jbe    36d80 <append_uri_pathel.constprop.0+0x250>
   36d28:	add    r8d,esi
   36d2b:	mov    rdi,r12
   36d2e:	mov    DWORD PTR [r12+0xc],r8d
   36d33:	call   36740 <append_null>
   36d38:	cmp    r14,rbx
   36d3b:	je     36d45 <append_uri_pathel.constprop.0+0x215>
   36d3d:	mov    rdi,r14
   36d40:	call   4bdc0 <rpl_free>
   36d45:	mov    rax,QWORD PTR [rsp+0x418]
   36d4d:	xor    rax,QWORD PTR fs:0x28
   36d56:	jne    36e99 <append_uri_pathel.constprop.0+0x369>
   36d5c:	add    rsp,0x428
   36d63:	pop    rbx
   36d64:	pop    rbp
   36d65:	pop    r12
   36d67:	pop    r13
   36d69:	pop    r14
   36d6b:	pop    r15
   36d6d:	ret    
   36d6e:	xchg   ax,ax
   36d70:	or     r13d,0x8
   36d74:	jmp    36b86 <append_uri_pathel.constprop.0+0x56>
   36d79:	nop    DWORD PTR [rax+0x0]
   36d80:	mov    rax,QWORD PTR [r12]
   36d84:	movsxd rcx,esi
   36d87:	movsxd r9,r8d
   36d8a:	lea    rdx,[rax+rcx*1]
   36d8e:	add    rcx,r9
   36d91:	add    rax,rcx
   36d94:	cmp    rdx,rax
   36d97:	jb     36dd0 <append_uri_pathel.constprop.0+0x2a0>
   36d99:	jmp    36d28 <append_uri_pathel.constprop.0+0x1f8>
   36d9b:	nop    DWORD PTR [rax+rax*1+0x0]
   36da0:	sub    ecx,0x61
   36da3:	lea    esi,[rax-0x20]
   36da6:	cmp    ecx,0x1a
   36da9:	cmovb  eax,esi
   36dac:	mov    BYTE PTR [rdx],al
   36dae:	movsxd rax,DWORD PTR [r12+0xc]
   36db3:	add    rdx,0x1
   36db7:	mov    rsi,rax
   36dba:	add    rax,r9
   36dbd:	add    rax,QWORD PTR [r12]
   36dc1:	cmp    rdx,rax
   36dc4:	jae    36d28 <append_uri_pathel.constprop.0+0x1f8>
   36dca:	mov    edi,DWORD PTR [rip+0x535e8]        # 8a3b8 <opt+0x338>
   36dd0:	movsx  ecx,BYTE PTR [rdx]
   36dd3:	mov    eax,ecx
   36dd5:	cmp    edi,0x1
   36dd8:	jne    36da0 <append_uri_pathel.constprop.0+0x270>
   36dda:	sub    ecx,0x41
   36ddd:	lea    esi,[rax+0x20]
   36de0:	cmp    ecx,0x1a
   36de3:	cmovb  eax,esi
   36de6:	mov    BYTE PTR [rdx],al
   36de8:	jmp    36dae <append_uri_pathel.constprop.0+0x27e>
   36dea:	nop    WORD PTR [rax+rax*1+0x0]
   36df0:	cmp    BYTE PTR [r14],0x2e
   36df4:	jne    36bd4 <append_uri_pathel.constprop.0+0xa4>
   36dfa:	cmp    BYTE PTR [r14+0x1],0x2e
   36dff:	jne    36bd4 <append_uri_pathel.constprop.0+0xa4>
   36e05:	lea    r15,[rip+0x36994]        # 6d7a0 <eta_str.8886+0xa28>
   36e0c:	mov    edx,0x25
   36e11:	mov    r8d,0x6
   36e17:	lea    rbp,[r15-0x6]
   36e1b:	jmp    36be7 <append_uri_pathel.constprop.0+0xb7>
   36e20:	movsxd rsi,DWORD PTR [r12+0xc]
   36e25:	mov    edx,DWORD PTR [r12+0x8]
   36e2a:	mov    rbp,r14
   36e2d:	xor    ecx,ecx
   36e2f:	mov    rdi,QWORD PTR [r12]
   36e33:	lea    r10d,[rsi+rax*1]
   36e37:	cmp    r10d,edx
   36e3a:	jg     36c45 <append_uri_pathel.constprop.0+0x115>
   36e40:	add    rdi,rsi
   36e43:	mov    rbp,r14
   36e46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   36e50:	movsxd rdx,r8d
   36e53:	mov    rsi,rbp
   36e56:	mov    DWORD PTR [rsp+0x8],r8d
   36e5b:	call   cb30 <memcpy@plt>
   36e60:	mov    edi,DWORD PTR [rip+0x53552]        # 8a3b8 <opt+0x338>
   36e66:	mov    esi,DWORD PTR [r12+0xc]
   36e6b:	mov    r8d,DWORD PTR [rsp+0x8]
   36e70:	lea    eax,[rdi-0x1]
   36e73:	cmp    eax,0x1
   36e76:	ja     36d28 <append_uri_pathel.constprop.0+0x1f8>
   36e7c:	jmp    36d80 <append_uri_pathel.constprop.0+0x250>
   36e81:	nop    DWORD PTR [rax+0x0]
   36e88:	lea    rdi,[rsi+0x1]
   36e8c:	call   4b850 <xmalloc>
   36e91:	mov    r14,rax
   36e94:	jmp    36ba1 <append_uri_pathel.constprop.0+0x71>
   36e99:	call   c7b0 <__stack_chk_fail@plt>
   36e9e:	xchg   ax,ax

0000000000036ea0 <getchar_from_escaped_string.part.0>:
   36ea0:	movzx  r9d,BYTE PTR [rdi+0x1]
   36ea5:	lea    eax,[r9-0x30]
   36ea9:	cmp    al,0x36
   36eab:	ja     36ebd <getchar_from_escaped_string.part.0+0x1d>
   36ead:	movabs r8,0x7e0000007e03ff
   36eb7:	bt     r8,rax
   36ebb:	jb     36ec6 <getchar_from_escaped_string.part.0+0x26>
   36ebd:	mov    BYTE PTR [rsi],0x25
   36ec0:	mov    eax,0x1
   36ec5:	ret    
   36ec6:	movzx  edi,BYTE PTR [rdi+0x2]
   36eca:	lea    ecx,[rdi-0x30]
   36ecd:	cmp    cl,0x36
   36ed0:	ja     36ebd <getchar_from_escaped_string.part.0+0x1d>
   36ed2:	mov    edx,0x1
   36ed7:	shl    rdx,cl
   36eda:	test   rdx,r8
   36edd:	je     36ebd <getchar_from_escaped_string.part.0+0x1d>
   36edf:	cmp    r9b,0x39
   36ee3:	jg     36f18 <getchar_from_escaped_string.part.0+0x78>
   36ee5:	shl    eax,0x4
   36ee8:	cmp    dil,0x39
   36eec:	jle    36efb <getchar_from_escaped_string.part.0+0x5b>
   36eee:	lea    edx,[rdi-0x37]
   36ef1:	lea    ecx,[rdi-0x57]
   36ef4:	cmp    dil,0x46
   36ef8:	cmovbe ecx,edx
   36efb:	add    ecx,eax
   36efd:	lea    rdx,[rip+0x36c9c]        # 6dba0 <urlchr_table>
   36f04:	mov    eax,0x3
   36f09:	mov    BYTE PTR [rsi],cl
   36f0b:	movzx  ecx,cl
   36f0e:	test   BYTE PTR [rdx+rcx*1],0x1
   36f12:	jne    36ebd <getchar_from_escaped_string.part.0+0x1d>
   36f14:	ret    
   36f15:	nop    DWORD PTR [rax]
   36f18:	lea    edx,[r9-0x37]
   36f1c:	lea    eax,[r9-0x57]
   36f20:	cmp    r9b,0x46
   36f24:	cmovbe eax,edx
   36f27:	jmp    36ee5 <getchar_from_escaped_string.part.0+0x45>
   36f29:	nop    DWORD PTR [rax+0x0]

0000000000036f30 <reencode_escapes>:
   36f30:	push   r12
   36f32:	mov    r12,rdi
   36f35:	push   rbx
   36f36:	sub    rsp,0x8
   36f3a:	movzx  eax,BYTE PTR [rdi]
   36f3d:	test   al,al
   36f3f:	je     3708c <reencode_escapes+0x15c>
   36f45:	mov    rsi,rdi
   36f48:	xor    r9d,r9d
   36f4b:	lea    r10,[rip+0x36c4e]        # 6dba0 <urlchr_table>
   36f52:	mov    r8d,0x1
   36f58:	movabs rdi,0x7e0000007e03ff
   36f62:	jmp    36f7d <reencode_escapes+0x4d>
   36f64:	nop    DWORD PTR [rax+0x0]
   36f68:	movzx  edx,BYTE PTR [r10+rdx*1]
   36f6d:	and    edx,0x3
   36f70:	cmp    dl,0x2
   36f73:	je     36fa0 <reencode_escapes+0x70>
   36f75:	add    rsi,0x1
   36f79:	test   al,al
   36f7b:	je     36fac <reencode_escapes+0x7c>
   36f7d:	movzx  edx,al
   36f80:	movzx  eax,BYTE PTR [rsi+0x1]
   36f84:	cmp    dl,0x25
   36f87:	jne    36f68 <reencode_escapes+0x38>
   36f89:	lea    ecx,[rax-0x30]
   36f8c:	cmp    cl,0x36
   36f8f:	ja     36fa0 <reencode_escapes+0x70>
   36f91:	mov    rdx,r8
   36f94:	shl    rdx,cl
   36f97:	test   rdx,rdi
   36f9a:	jne    37097 <reencode_escapes+0x167>
   36fa0:	add    r9d,0x1
   36fa4:	add    rsi,0x1
   36fa8:	test   al,al
   36faa:	jne    36f7d <reencode_escapes+0x4d>
   36fac:	test   r9d,r9d
   36faf:	je     3708c <reencode_escapes+0x15c>
   36fb5:	sub    rsi,r12
   36fb8:	lea    edi,[rsi+r9*2+0x1]
   36fbd:	movsxd rdi,edi
   36fc0:	call   4b850 <xmalloc>
   36fc5:	movzx  edx,BYTE PTR [r12]
   36fca:	test   dl,dl
   36fcc:	je     370eb <reencode_escapes+0x1bb>
   36fd2:	add    r12,0x1
   36fd6:	mov    r10,rax
   36fd9:	lea    rdi,[rip+0x31850]        # 68830 <primes.6089+0x2750>
   36fe0:	mov    r8d,0x1
   36fe6:	lea    r11,[rip+0x36bb3]        # 6dba0 <urlchr_table>
   36fed:	movabs rsi,0x7e0000007e03ff
   36ff7:	jmp    37027 <reencode_escapes+0xf7>
   36ff9:	nop    DWORD PTR [rax+0x0]
   37000:	movzx  ecx,dl
   37003:	mov    r9d,edx
   37006:	movzx  ecx,BYTE PTR [r11+rcx*1]
   3700b:	and    ecx,0x3
   3700e:	cmp    cl,0x2
   37011:	je     37051 <reencode_escapes+0x121>
   37013:	mov    BYTE PTR [r10],dl
   37016:	movzx  edx,BYTE PTR [r12]
   3701b:	add    r10,0x1
   3701f:	add    r12,0x1
   37023:	test   dl,dl
   37025:	je     37085 <reencode_escapes+0x155>
   37027:	cmp    dl,0x25
   3702a:	jne    37000 <reencode_escapes+0xd0>
   3702c:	movzx  ebx,BYTE PTR [r12]
   37031:	lea    ecx,[rbx-0x30]
   37034:	cmp    cl,0x36
   37037:	ja     370e0 <reencode_escapes+0x1b0>
   3703d:	mov    r9,r8
   37040:	shl    r9,cl
   37043:	mov    rcx,r9
   37046:	mov    r9d,0x25
   3704c:	test   rcx,rsi
   3704f:	jne    370bb <reencode_escapes+0x18b>
   37051:	mov    edx,r9d
   37054:	and    r9d,0xf
   37058:	mov    BYTE PTR [r10],0x25
   3705c:	add    r12,0x1
   37060:	shr    dl,0x4
   37063:	add    r10,0x3
   37067:	and    edx,0xf
   3706a:	movzx  edx,BYTE PTR [rdi+rdx*1]
   3706e:	mov    BYTE PTR [r10-0x2],dl
   37072:	movzx  edx,BYTE PTR [rdi+r9*1]
   37077:	mov    BYTE PTR [r10-0x1],dl
   3707b:	movzx  edx,BYTE PTR [r12-0x1]
   37081:	test   dl,dl
   37083:	jne    37027 <reencode_escapes+0xf7>
   37085:	mov    BYTE PTR [r10],0x0
   37089:	mov    r12,rax
   3708c:	add    rsp,0x8
   37090:	mov    rax,r12
   37093:	pop    rbx
   37094:	pop    r12
   37096:	ret    
   37097:	movzx  ebx,BYTE PTR [rsi+0x2]
   3709b:	lea    ecx,[rbx-0x30]
   3709e:	cmp    cl,0x36
   370a1:	ja     36fa0 <reencode_escapes+0x70>
   370a7:	mov    rdx,r8
   370aa:	shl    rdx,cl
   370ad:	test   rdx,rdi
   370b0:	je     36fa0 <reencode_escapes+0x70>
   370b6:	jmp    36f75 <reencode_escapes+0x45>
   370bb:	movzx  ebx,BYTE PTR [r12+0x1]
   370c1:	lea    ecx,[rbx-0x30]
   370c4:	cmp    cl,0x36
   370c7:	ja     37051 <reencode_escapes+0x121>
   370c9:	mov    rbx,r8
   370cc:	shl    rbx,cl
   370cf:	test   rbx,rsi
   370d2:	je     37051 <reencode_escapes+0x121>
   370d8:	jmp    37013 <reencode_escapes+0xe3>
   370dd:	nop    DWORD PTR [rax]
   370e0:	mov    r9d,0x25
   370e6:	jmp    37051 <reencode_escapes+0x121>
   370eb:	mov    r10,rax
   370ee:	jmp    37085 <reencode_escapes+0x155>

00000000000370f0 <url_unescape>:
   370f0:	endbr64 
   370f4:	xor    esi,esi
   370f6:	jmp    36a20 <url_unescape_1>
   370fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000037100 <url_unescape_except_reserved>:
   37100:	endbr64 
   37104:	mov    esi,0x1
   37109:	jmp    36a20 <url_unescape_1>
   3710e:	xchg   ax,ax

0000000000037110 <url_escape>:
   37110:	endbr64 
   37114:	xor    edx,edx
   37116:	mov    esi,0x2
   3711b:	jmp    36890 <url_escape_1>

0000000000037120 <url_escape_unsafe_and_reserved>:
   37120:	endbr64 
   37124:	xor    edx,edx
   37126:	mov    esi,0x3
   3712b:	jmp    36890 <url_escape_1>

0000000000037130 <url_scheme>:
   37130:	endbr64 
   37134:	push   r14
   37136:	push   r13
   37138:	push   r12
   3713a:	push   rbp
   3713b:	mov    rbp,QWORD PTR [rip+0x4a086]        # 811c8 <supported_schemes+0x8>
   37142:	push   rbx
   37143:	test   rbp,rbp
   37146:	je     371b0 <url_scheme+0x80>
   37148:	lea    r13,[rip+0x4a071]        # 811c0 <supported_schemes>
   3714f:	mov    r12,rdi
   37152:	xor    ebx,ebx
   37154:	mov    r14,r13
   37157:	jmp    37170 <url_scheme+0x40>
   37159:	nop    DWORD PTR [rax+0x0]
   37160:	mov    rbp,QWORD PTR [r14+0x20]
   37164:	add    r14,0x18
   37168:	add    ebx,0x1
   3716b:	test   rbp,rbp
   3716e:	je     371b0 <url_scheme+0x80>
   37170:	mov    rdi,rbp
   37173:	call   c310 <strlen@plt>
   37178:	mov    rsi,rbp
   3717b:	mov    rdi,r12
   3717e:	mov    rdx,rax
   37181:	call   433b0 <c_strncasecmp>
   37186:	test   eax,eax
   37188:	jne    37160 <url_scheme+0x30>
   3718a:	movsxd rax,ebx
   3718d:	lea    rax,[rax+rax*2]
   37191:	test   BYTE PTR [r13+rax*8+0x14],0x1
   37197:	mov    eax,0x4
   3719c:	cmove  eax,ebx
   3719f:	pop    rbx
   371a0:	pop    rbp
   371a1:	pop    r12
   371a3:	pop    r13
   371a5:	pop    r14
   371a7:	ret    
   371a8:	nop    DWORD PTR [rax+rax*1+0x0]
   371b0:	pop    rbx
   371b1:	mov    eax,0x4
   371b6:	pop    rbp
   371b7:	pop    r12
   371b9:	pop    r13
   371bb:	pop    r14
   371bd:	ret    
   371be:	xchg   ax,ax

00000000000371c0 <url_has_scheme>:
   371c0:	endbr64 
   371c4:	movzx  eax,BYTE PTR [rdi]
   371c7:	xor    r8d,r8d
   371ca:	test   al,al
   371cc:	je     37241 <url_has_scheme+0x81>
   371ce:	cmp    al,0x5a
   371d0:	jg     37248 <url_has_scheme+0x88>
   371d2:	cmp    al,0x40
   371d4:	jg     371f0 <url_has_scheme+0x30>
   371d6:	lea    edx,[rax-0x30]
   371d9:	cmp    dl,0x9
   371dc:	jbe    371f0 <url_has_scheme+0x30>
   371de:	sub    eax,0x2b
   371e1:	xor    r8d,r8d
   371e4:	test   al,0xfd
   371e6:	jne    37241 <url_has_scheme+0x81>
   371e8:	nop    DWORD PTR [rax+rax*1+0x0]
   371f0:	movzx  eax,BYTE PTR [rdi+0x1]
   371f4:	lea    rdx,[rdi+0x1]
   371f8:	test   al,al
   371fa:	jne    37224 <url_has_scheme+0x64>
   371fc:	jmp    37260 <url_has_scheme+0xa0>
   371fe:	xchg   ax,ax
   37200:	cmp    al,0x40
   37202:	jg     37218 <url_has_scheme+0x58>
   37204:	lea    ecx,[rax-0x30]
   37207:	cmp    cl,0x9
   3720a:	jbe    37218 <url_has_scheme+0x58>
   3720c:	lea    ecx,[rax-0x2b]
   3720f:	and    cl,0xfd
   37212:	jne    3723b <url_has_scheme+0x7b>
   37214:	nop    DWORD PTR [rax+0x0]
   37218:	movzx  eax,BYTE PTR [rdx+0x1]
   3721c:	add    rdx,0x1
   37220:	test   al,al
   37222:	je     37260 <url_has_scheme+0xa0>
   37224:	cmp    al,0x5a
   37226:	jle    37200 <url_has_scheme+0x40>
   37228:	lea    ecx,[rax-0x61]
   3722b:	cmp    cl,0x19
   3722e:	jbe    37218 <url_has_scheme+0x58>
   37230:	lea    ecx,[rax-0x2b]
   37233:	and    ecx,0xfd
   37239:	je     37218 <url_has_scheme+0x58>
   3723b:	cmp    al,0x3a
   3723d:	sete   r8b
   37241:	mov    eax,r8d
   37244:	ret    
   37245:	nop    DWORD PTR [rax]
   37248:	lea    edx,[rax-0x61]
   3724b:	cmp    dl,0x19
   3724e:	jbe    371f0 <url_has_scheme+0x30>
   37250:	sub    eax,0x2b
   37253:	xor    r8d,r8d
   37256:	test   al,0xfd
   37258:	je     371f0 <url_has_scheme+0x30>
   3725a:	jmp    37241 <url_has_scheme+0x81>
   3725c:	nop    DWORD PTR [rax+0x0]
   37260:	xor    r8d,r8d
   37263:	mov    eax,r8d
   37266:	ret    
   37267:	nop    WORD PTR [rax+rax*1+0x0]

0000000000037270 <url_valid_scheme>:
   37270:	endbr64 
   37274:	sub    rsp,0x8
   37278:	call   37130 <url_scheme>
   3727d:	cmp    eax,0x4
   37280:	setne  al
   37283:	add    rsp,0x8
   37287:	ret    
   37288:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000037290 <scheme_default_port>:
   37290:	endbr64 
   37294:	mov    edi,edi
   37296:	lea    rax,[rip+0x49f23]        # 811c0 <supported_schemes>
   3729d:	lea    rdx,[rdi+rdi*2]
   372a1:	mov    eax,DWORD PTR [rax+rdx*8+0x10]
   372a5:	ret    
   372a6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000372b0 <scheme_disable>:
   372b0:	endbr64 
   372b4:	mov    edi,edi
   372b6:	lea    rax,[rip+0x49f03]        # 811c0 <supported_schemes>
   372bd:	lea    rdx,[rdi+rdi*2]
   372c1:	or     DWORD PTR [rax+rdx*8+0x14],0x1
   372c6:	ret    
   372c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000372d0 <scheme_leading_string>:
   372d0:	endbr64 
   372d4:	mov    edi,edi
   372d6:	lea    rax,[rip+0x49ee3]        # 811c0 <supported_schemes>
   372dd:	lea    rdx,[rdi+rdi*2]
   372e1:	mov    rax,QWORD PTR [rax+rdx*8+0x8]
   372e6:	ret    
   372e7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000372f0 <rewrite_shorthand_url>:
   372f0:	endbr64 
   372f4:	push   rbp
   372f5:	mov    rbp,rdi
   372f8:	push   rbx
   372f9:	sub    rsp,0x8
   372fd:	call   37130 <url_scheme>
   37302:	cmp    eax,0x4
   37305:	jne    37350 <rewrite_shorthand_url+0x60>
   37307:	lea    rsi,[rip+0x36493]        # 6d7a1 <eta_str.8886+0xa29>
   3730e:	mov    rdi,rbp
   37311:	call   c0a0 <strpbrk@plt>
   37316:	mov    rbx,rax
   37319:	cmp    rbp,rax
   3731c:	je     37350 <rewrite_shorthand_url+0x60>
   3731e:	test   rax,rax
   37321:	je     37328 <rewrite_shorthand_url+0x38>
   37323:	cmp    BYTE PTR [rax],0x3a
   37326:	je     37360 <rewrite_shorthand_url+0x70>
   37328:	add    rsp,0x8
   3732c:	mov    rsi,rbp
   3732f:	lea    rdi,[rip+0x36482]        # 6d7b8 <eta_str.8886+0xa40>
   37336:	xor    eax,eax
   37338:	pop    rbx
   37339:	pop    rbp
   3733a:	jmp    3ba30 <aprintf>
   3733f:	nop
   37340:	cmp    BYTE PTR [rax+0x2],0x2f
   37344:	jne    37366 <rewrite_shorthand_url+0x76>
   37346:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37350:	xor    eax,eax
   37352:	add    rsp,0x8
   37356:	pop    rbx
   37357:	pop    rbp
   37358:	ret    
   37359:	nop    DWORD PTR [rax+0x0]
   37360:	cmp    BYTE PTR [rax+0x1],0x2f
   37364:	je     37340 <rewrite_shorthand_url+0x50>
   37366:	lea    rdi,[rbx+0x1]
   3736a:	lea    rsi,[rip+0x36433]        # 6d7a4 <eta_str.8886+0xa2c>
   37371:	call   c690 <strspn@plt>
   37376:	test   eax,eax
   37378:	je     3738b <rewrite_shorthand_url+0x9b>
   3737a:	add    eax,0x1
   3737d:	cdqe   
   3737f:	movzx  eax,BYTE PTR [rbx+rax*1]
   37383:	cmp    al,0x2f
   37385:	je     37328 <rewrite_shorthand_url+0x38>
   37387:	test   al,al
   37389:	je     37328 <rewrite_shorthand_url+0x38>
   3738b:	xor    eax,eax
   3738d:	mov    rsi,rbp
   37390:	lea    rdi,[rip+0x36418]        # 6d7af <eta_str.8886+0xa37>
   37397:	call   3ba30 <aprintf>
   3739c:	test   rax,rax
   3739f:	je     37352 <rewrite_shorthand_url+0x62>
   373a1:	sub    rbx,rbp
   373a4:	mov    BYTE PTR [rax+rbx*1+0x6],0x2f
   373a9:	jmp    37352 <rewrite_shorthand_url+0x62>
   373ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000373b0 <url_error>:
   373b0:	endbr64 
   373b4:	push   r12
   373b6:	push   rbp
   373b7:	sub    rsp,0x8
   373bb:	cmp    esi,0x1
   373be:	je     373f0 <url_error+0x40>
   373c0:	lea    rax,[rip+0x46279]        # 7d640 <parse_errors>
   373c7:	movsxd rsi,esi
   373ca:	xor    edi,edi
   373cc:	mov    edx,0x5
   373d1:	mov    rsi,QWORD PTR [rax+rsi*8]
   373d5:	call   c780 <dcgettext@plt>
   373da:	add    rsp,0x8
   373de:	pop    rbp
   373df:	mov    rdi,rax
   373e2:	pop    r12
   373e4:	jmp    4ba50 <xstrdup>
   373e9:	nop    DWORD PTR [rax+0x0]
   373f0:	call   4ba50 <xstrdup>
   373f5:	mov    esi,0x3a
   373fa:	mov    rdi,rax
   373fd:	mov    rbp,rax
   37400:	call   c6c0 <strchr@plt>
   37405:	test   rax,rax
   37408:	je     3740d <url_error+0x5d>
   3740a:	mov    BYTE PTR [rax],0x0
   3740d:	lea    rsi,[rip+0x37476]        # 6e88a <CSWTCH.5+0x4a>
   37414:	mov    rdi,rbp
   37417:	call   43340 <c_strcasecmp>
   3741c:	test   eax,eax
   3741e:	je     37468 <url_error+0xb8>
   37420:	mov    rdi,rbp
   37423:	call   4b5b0 <quote>
   37428:	mov    edx,0x5
   3742d:	lea    rsi,[rip+0x363ac]        # 6d7e0 <eta_str.8886+0xa68>
   37434:	xor    edi,edi
   37436:	mov    r12,rax
   37439:	call   c780 <dcgettext@plt>
   3743e:	mov    rsi,r12
   37441:	mov    rdi,rax
   37444:	xor    eax,eax
   37446:	call   3ba30 <aprintf>
   3744b:	mov    r12,rax
   3744e:	mov    rdi,rbp
   37451:	call   4bdc0 <rpl_free>
   37456:	add    rsp,0x8
   3745a:	mov    rax,r12
   3745d:	pop    rbp
   3745e:	pop    r12
   37460:	ret    
   37461:	nop    DWORD PTR [rax+0x0]
   37468:	mov    edx,0x5
   3746d:	lea    rsi,[rip+0x3634e]        # 6d7c2 <eta_str.8886+0xa4a>
   37474:	xor    edi,edi
   37476:	call   c780 <dcgettext@plt>
   3747b:	mov    rdi,rax
   3747e:	xor    eax,eax
   37480:	call   3ba30 <aprintf>
   37485:	mov    r12,rax
   37488:	jmp    3744e <url_error+0x9e>
   3748a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000037490 <url_full_path>:
   37490:	endbr64 
   37494:	push   r12
   37496:	push   rbp
   37497:	mov    rbp,rdi
   3749a:	push   rbx
   3749b:	call   36650 <full_path_length>
   374a0:	movsxd rbx,eax
   374a3:	lea    edi,[rbx+0x1]
   374a6:	movsxd rdi,edi
   374a9:	call   4b850 <xmalloc>
   374ae:	mov    rdi,rbp
   374b1:	mov    r12,rax
   374b4:	mov    rsi,rax
   374b7:	call   366a0 <full_path_write>
   374bc:	mov    BYTE PTR [r12+rbx*1],0x0
   374c1:	mov    rax,r12
   374c4:	pop    rbx
   374c5:	pop    rbp
   374c6:	pop    r12
   374c8:	ret    
   374c9:	nop    DWORD PTR [rax+0x0]

00000000000374d0 <url_free>:
   374d0:	endbr64 
   374d4:	test   rdi,rdi
   374d7:	je     374e0 <url_free+0x10>
   374d9:	jmp    36960 <url_free.part.0>
   374de:	xchg   ax,ax
   374e0:	ret    
   374e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   374ec:	nop    DWORD PTR [rax+0x0]

00000000000374f0 <mkalldirs>:
   374f0:	endbr64 
   374f4:	push   r12
   374f6:	mov    esi,0x2f
   374fb:	push   rbp
   374fc:	mov    rbp,rdi
   374ff:	sub    rsp,0xa8
   37506:	mov    rax,QWORD PTR fs:0x28
   3750f:	mov    QWORD PTR [rsp+0x98],rax
   37517:	xor    eax,eax
   37519:	call   c460 <strrchr@plt>
   3751e:	test   rax,rax
   37521:	je     375f0 <mkalldirs+0x100>
   37527:	mov    rsi,rax
   3752a:	cmp    rbp,rax
   3752d:	je     375f3 <mkalldirs+0x103>
   37533:	mov    rdi,rbp
   37536:	call   3b8a0 <strdupdelim>
   3753b:	mov    rdx,rsp
   3753e:	mov    edi,0x1
   37543:	mov    rsi,rax
   37546:	mov    rbp,rax
   37549:	call   c350 <__xstat@plt>
   3754e:	mov    r12d,eax
   37551:	test   eax,eax
   37553:	jne    37582 <mkalldirs+0x92>
   37555:	mov    eax,DWORD PTR [rsp+0x18]
   37559:	and    eax,0xf000
   3755e:	cmp    eax,0x4000
   37563:	je     37591 <mkalldirs+0xa1>
   37565:	cmp    BYTE PTR [rip+0x52d4f],0x0        # 8a2bb <opt+0x23b>
   3756c:	jne    37648 <mkalldirs+0x158>
   37572:	mov    rdi,rbp
   37575:	call   c120 <unlink@plt>
   3757a:	test   eax,eax
   3757c:	jne    37600 <mkalldirs+0x110>
   37582:	mov    rdi,rbp
   37585:	call   3c2c0 <make_directory>
   3758a:	mov    r12d,eax
   3758d:	test   eax,eax
   3758f:	jne    375c0 <mkalldirs+0xd0>
   37591:	mov    rdi,rbp
   37594:	call   4bdc0 <rpl_free>
   37599:	mov    rax,QWORD PTR [rsp+0x98]
   375a1:	xor    rax,QWORD PTR fs:0x28
   375aa:	jne    3765e <mkalldirs+0x16e>
   375b0:	add    rsp,0xa8
   375b7:	mov    eax,r12d
   375ba:	pop    rbp
   375bb:	pop    r12
   375bd:	ret    
   375be:	xchg   ax,ax
   375c0:	call   c740 <__errno_location@plt>
   375c5:	mov    edi,DWORD PTR [rax]
   375c7:	call   c540 <strerror@plt>
   375cc:	mov    rdx,rbp
   375cf:	mov    edi,0x1
   375d4:	lea    rsi,[rip+0x3126a]        # 68845 <primes.6089+0x2765>
   375db:	mov    rcx,rax
   375de:	xor    eax,eax
   375e0:	call   2e0a0 <logprintf>
   375e5:	jmp    37591 <mkalldirs+0xa1>
   375e7:	nop    WORD PTR [rax+rax*1+0x0]
   375f0:	mov    rsi,rbp
   375f3:	xor    r12d,r12d
   375f6:	cmp    BYTE PTR [rsi],0x2f
   375f9:	jne    37599 <mkalldirs+0xa9>
   375fb:	jmp    37533 <mkalldirs+0x43>
   37600:	call   c740 <__errno_location@plt>
   37605:	mov    edi,DWORD PTR [rax]
   37607:	mov    r12,rax
   3760a:	call   c540 <strerror@plt>
   3760f:	mov    ecx,DWORD PTR [r12]
   37613:	mov    rdx,rbp
   37616:	lea    rsi,[rip+0x361d9]        # 6d7f6 <eta_str.8886+0xa7e>
   3761d:	mov    r8,rax
   37620:	mov    edi,0x1
   37625:	xor    eax,eax
   37627:	call   2e0a0 <logprintf>
   3762c:	mov    rdi,rbp
   3762f:	call   3c2c0 <make_directory>
   37634:	mov    r12d,eax
   37637:	test   eax,eax
   37639:	je     37591 <mkalldirs+0xa1>
   3763f:	jmp    375c0 <mkalldirs+0xd0>
   37644:	nop    DWORD PTR [rax+0x0]
   37648:	mov    rsi,rbp
   3764b:	lea    rdi,[rip+0x362c6]        # 6d918 <eta_str.8886+0xba0>
   37652:	xor    eax,eax
   37654:	call   2e250 <debug_logprintf>
   37659:	jmp    37572 <mkalldirs+0x82>
   3765e:	call   c7b0 <__stack_chk_fail@plt>
   37663:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3766e:	xchg   ax,ax

0000000000037670 <url_file_name>:
   37670:	endbr64 
   37674:	push   r15
   37676:	push   r14
   37678:	push   r13
   3767a:	push   r12
   3767c:	push   rbp
   3767d:	mov    rbp,rsi
   37680:	push   rbx
   37681:	mov    rbx,rdi
   37684:	sub    rsp,0xb8
   3768b:	mov    r12,QWORD PTR [rip+0x52a4e]        # 8a0e0 <opt+0x60>
   37692:	mov    rdi,QWORD PTR [rip+0x52a1f]        # 8a0b8 <opt+0x38>
   37699:	mov    rax,QWORD PTR fs:0x28
   376a2:	mov    QWORD PTR [rsp+0xa8],rax
   376aa:	xor    eax,eax
   376ac:	lea    rax,[rip+0x23b89]        # 5b23c <_IO_stdin_used+0x23c>
   376b3:	mov    QWORD PTR [rsp+0x70],0x0
   376bc:	mov    QWORD PTR [rsp+0x78],0x0
   376c5:	test   r12,r12
   376c8:	mov    QWORD PTR [rsp+0x80],0x0
   376d4:	cmove  r12,rax
   376d8:	lea    rax,[rsp+0x70]
   376dd:	mov    QWORD PTR [rsp+0x88],0x0
   376e9:	mov    QWORD PTR [rsp+0x10],rax
   376ee:	test   rdi,rdi
   376f1:	je     376fb <url_file_name+0x8b>
   376f3:	mov    rsi,rax
   376f6:	call   36810 <append_string>
   376fb:	cmp    BYTE PTR [rip+0x529a6],0x0        # 8a0a8 <opt+0x28>
   37702:	lea    r13,[rsp+0x80]
   3770a:	je     377c4 <url_file_name+0x154>
   37710:	cmp    BYTE PTR [rip+0x5299a],0x0        # 8a0b1 <opt+0x31>
   37717:	je     37744 <url_file_name+0xd4>
   37719:	mov    r8d,DWORD PTR [rsp+0x8c]
   37721:	test   r8d,r8d
   37724:	jne    37d20 <url_file_name+0x6b0>
   3772a:	mov    eax,DWORD PTR [rbx+0x8]
   3772d:	mov    rsi,r13
   37730:	lea    rdx,[rax+rax*2]
   37734:	lea    rax,[rip+0x49a85]        # 811c0 <supported_schemes>
   3773b:	mov    rdi,QWORD PTR [rax+rdx*8]
   3773f:	call   36810 <append_string>
   37744:	cmp    BYTE PTR [rip+0x52965],0x0        # 8a0b0 <opt+0x30>
   3774b:	jne    379c8 <url_file_name+0x358>
   37751:	mov    r14,QWORD PTR [rbx+0x20]
   37755:	mov    eax,DWORD PTR [rip+0x52951]        # 8a0ac <opt+0x2c>
   3775b:	mov    QWORD PTR [rsp],rbp
   3775f:	mov    rbp,r14
   37762:	mov    r14d,eax
   37765:	jmp    37786 <url_file_name+0x116>
   37767:	nop    WORD PTR [rax+rax*1+0x0]
   37770:	mov    rdx,r13
   37773:	mov    rsi,r15
   37776:	mov    rdi,rbp
   37779:	call   36b30 <append_uri_pathel.constprop.0>
   3777e:	lea    rbp,[r15+0x1]
   37782:	sub    r14d,0x1
   37786:	mov    esi,0x2f
   3778b:	mov    rdi,rbp
   3778e:	call   c6c0 <strchr@plt>
   37793:	mov    r15,rax
   37796:	test   rax,rax
   37799:	je     377c0 <url_file_name+0x150>
   3779b:	cmp    rbp,r15
   3779e:	je     3777e <url_file_name+0x10e>
   377a0:	test   r14d,r14d
   377a3:	jg     3777e <url_file_name+0x10e>
   377a5:	mov    esi,DWORD PTR [rsp+0x8c]
   377ac:	test   esi,esi
   377ae:	je     37770 <url_file_name+0x100>
   377b0:	mov    rsi,r13
   377b3:	mov    edi,0x2f
   377b8:	call   367a0 <append_char>
   377bd:	jmp    37770 <url_file_name+0x100>
   377bf:	nop
   377c0:	mov    rbp,QWORD PTR [rsp]
   377c4:	test   rbp,rbp
   377c7:	je     37a60 <url_file_name+0x3f0>
   377cd:	mov    rdi,rbp
   377d0:	call   c310 <strlen@plt>
   377d5:	mov    rdi,rbp
   377d8:	lea    rsi,[rbp+rax*1+0x0]
   377dd:	call   3b8a0 <strdupdelim>
   377e2:	mov    r12,rax
   377e5:	mov    ecx,DWORD PTR [rsp+0x8c]
   377ec:	test   ecx,ecx
   377ee:	jne    37ab4 <url_file_name+0x444>
   377f4:	mov    rdi,r12
   377f7:	call   c310 <strlen@plt>
   377fc:	mov    rdx,r13
   377ff:	mov    rdi,r12
   37802:	lea    rsi,[r12+rax*1]
   37806:	call   36b30 <append_uri_pathel.constprop.0>
   3780b:	xor    edi,edi
   3780d:	mov    rsi,r13
   37810:	call   367a0 <append_char>
   37815:	mov    rax,QWORD PTR [rsp+0x80]
   3781d:	mov    rcx,QWORD PTR [rip+0x52ba4]        # 8a3c8 <opt+0x348>
   37824:	mov    rdx,QWORD PTR [rip+0x52ba5]        # 8a3d0 <opt+0x350>
   3782b:	mov    QWORD PTR [rsp+0x50],rax
   37830:	test   rcx,rcx
   37833:	lea    rax,[rip+0x35fda]        # 6d814 <eta_str.8886+0xa9c>
   3783a:	cmovne rax,rcx
   3783e:	mov    QWORD PTR [rsp+0x8],rdx
   37843:	mov    QWORD PTR [rsp+0x18],rax
   37848:	test   rdx,rdx
   3784b:	je     37da0 <url_file_name+0x730>
   37851:	mov    rsi,QWORD PTR [rsp+0x18]
   37856:	mov    rdi,QWORD PTR [rsp+0x8]
   3785b:	call   c270 <iconv_open@plt>
   37860:	mov    r14,rax
   37863:	cmp    rax,0xffffffffffffffff
   37867:	je     37d50 <url_file_name+0x6e0>
   3786d:	mov    r15,QWORD PTR [rsp+0x50]
   37872:	mov    rdi,r15
   37875:	call   c310 <strlen@plt>
   3787a:	lea    rbx,[rax+rax*1]
   3787e:	mov    QWORD PTR [rsp+0x58],rax
   37883:	lea    rdi,[rbx+0x1]
   37887:	mov    QWORD PTR [rsp+0x60],rbx
   3788c:	call   4b850 <xmalloc>
   37891:	mov    QWORD PTR [rsp+0x68],rax
   37896:	mov    rbp,rax
   37899:	call   c740 <__errno_location@plt>
   3789e:	lea    rdx,[rsp+0x58]
   378a3:	lea    rcx,[rsp+0x68]
   378a8:	mov    QWORD PTR [rsp+0x38],r12
   378ad:	mov    QWORD PTR [rsp],rax
   378b1:	lea    rax,[rsp+0x60]
   378b6:	mov    r12,rcx
   378b9:	mov    QWORD PTR [rsp+0x30],rdx
   378be:	lea    rdx,[rsp+0x50]
   378c3:	mov    QWORD PTR [rsp+0x48],r13
   378c8:	mov    r13,rax
   378cb:	mov    QWORD PTR [rsp+0x20],0x0
   378d4:	mov    QWORD PTR [rsp+0x28],rdx
   378d9:	mov    QWORD PTR [rsp+0x40],r15
   378de:	jmp    3793c <url_file_name+0x2cc>
   378e0:	mov    rax,QWORD PTR [rsp]
   378e4:	mov    r8d,DWORD PTR [rax]
   378e7:	cmp    r8d,0x16
   378eb:	je     37ad0 <url_file_name+0x460>
   378f1:	cmp    r8d,0x54
   378f5:	je     37ad0 <url_file_name+0x460>
   378fb:	test   r8d,r8d
   378fe:	je     37c78 <url_file_name+0x608>
   37904:	cmp    r8d,0x7
   37908:	jne    37ca0 <url_file_name+0x630>
   3790e:	mov    rax,QWORD PTR [rsp+0x58]
   37913:	mov    rdi,rbp
   37916:	lea    r15,[rbx+rax*2]
   3791a:	lea    rsi,[r15+0x1]
   3791e:	mov    QWORD PTR [rsp+0x60],r15
   37923:	call   4b870 <xrealloc>
   37928:	mov    QWORD PTR [rsp+0x20],rbx
   3792d:	mov    rbp,rax
   37930:	lea    rax,[rax+rbx*1]
   37934:	mov    rbx,r15
   37937:	mov    QWORD PTR [rsp+0x68],rax
   3793c:	mov    rax,QWORD PTR [rsp]
   37940:	mov    rdx,QWORD PTR [rsp+0x30]
   37945:	mov    r8,r13
   37948:	mov    rcx,r12
   3794b:	mov    rsi,QWORD PTR [rsp+0x28]
   37950:	mov    rdi,r14
   37953:	mov    DWORD PTR [rax],0x0
   37959:	call   c4d0 <iconv@plt>
   3795e:	test   rax,rax
   37961:	jne    378e0 <url_file_name+0x270>
   37967:	xor    edx,edx
   37969:	xor    esi,esi
   3796b:	mov    r8,r13
   3796e:	mov    rcx,r12
   37971:	mov    rdi,r14
   37974:	call   c4d0 <iconv@plt>
   37979:	test   rax,rax
   3797c:	jne    378e0 <url_file_name+0x270>
   37982:	sub    rbx,QWORD PTR [rsp+0x60]
   37987:	sub    rbx,QWORD PTR [rsp+0x20]
   3798c:	mov    rdi,r14
   3798f:	mov    r12,QWORD PTR [rsp+0x38]
   37994:	mov    r15,QWORD PTR [rsp+0x40]
   37999:	mov    BYTE PTR [rbp+rbx*1+0x0],0x0
   3799e:	mov    r13,QWORD PTR [rsp+0x48]
   379a3:	call   cba0 <iconv_close@plt>
   379a8:	cmp    BYTE PTR [rip+0x5290c],0x0        # 8a2bb <opt+0x23b>
   379af:	jne    37e50 <url_file_name+0x7e0>
   379b5:	mov    rdi,r15
   379b8:	mov    r15,rbp
   379bb:	call   4bdc0 <rpl_free>
   379c0:	jmp    37b24 <url_file_name+0x4b4>
   379c5:	nop    DWORD PTR [rax]
   379c8:	mov    edi,DWORD PTR [rsp+0x8c]
   379cf:	test   edi,edi
   379d1:	jne    37d38 <url_file_name+0x6c8>
   379d7:	mov    rdi,QWORD PTR [rbx+0x10]
   379db:	cmp    BYTE PTR [rdi],0x2e
   379de:	jne    37d10 <url_file_name+0x6a0>
   379e4:	cmp    BYTE PTR [rdi+0x1],0x2e
   379e8:	jne    37d10 <url_file_name+0x6a0>
   379ee:	cmp    BYTE PTR [rdi+0x2],0x0
   379f2:	jne    37d10 <url_file_name+0x6a0>
   379f8:	mov    rsi,r13
   379fb:	lea    rdi,[rip+0x35d98]        # 6d79a <eta_str.8886+0xa22>
   37a02:	call   36810 <append_string>
   37a07:	mov    eax,DWORD PTR [rbx+0x8]
   37a0a:	movsxd rsi,DWORD PTR [rbx+0x18]
   37a0e:	lea    rdx,[rax+rax*2]
   37a12:	lea    rax,[rip+0x497a7]        # 811c0 <supported_schemes>
   37a19:	cmp    esi,DWORD PTR [rax+rdx*8+0x10]
   37a1d:	je     37751 <url_file_name+0xe1>
   37a23:	lea    r14,[rsp+0x90]
   37a2b:	mov    rdi,r14
   37a2e:	call   3d0c0 <number_to_string>
   37a33:	cmp    DWORD PTR [rip+0x52976],0x2        # 8a3b0 <opt+0x330>
   37a3a:	mov    eax,0x2b
   37a3f:	mov    rsi,r13
   37a42:	mov    edi,0x3a
   37a47:	cmove  edi,eax
   37a4a:	call   367a0 <append_char>
   37a4f:	mov    rsi,r13
   37a52:	mov    rdi,r14
   37a55:	call   36810 <append_string>
   37a5a:	jmp    37751 <url_file_name+0xe1>
   37a5f:	nop
   37a60:	mov    rax,QWORD PTR [rbx+0x48]
   37a64:	mov    rdx,QWORD PTR [rbx+0x30]
   37a68:	cmp    BYTE PTR [rax],0x0
   37a6b:	cmovne r12,rax
   37a6f:	test   rdx,rdx
   37a72:	je     37e10 <url_file_name+0x7a0>
   37a78:	mov    eax,DWORD PTR [rip+0x52932]        # 8a3b0 <opt+0x330>
   37a7e:	lea    rsi,[rip+0x2f936]        # 673bb <primes.6089+0x12db>
   37a85:	mov    rdi,r12
   37a88:	sub    eax,0x1
   37a8b:	cmp    eax,0x1
   37a8e:	lea    rax,[rip+0x23dd7]        # 5b86c <_IO_stdin_used+0x86c>
   37a95:	cmovbe rsi,rax
   37a99:	xor    ecx,ecx
   37a9b:	xor    eax,eax
   37a9d:	call   3bbd0 <concat_strings>
   37aa2:	mov    ecx,DWORD PTR [rsp+0x8c]
   37aa9:	mov    r12,rax
   37aac:	test   ecx,ecx
   37aae:	je     377f4 <url_file_name+0x184>
   37ab4:	mov    rsi,r13
   37ab7:	mov    edi,0x2f
   37abc:	call   367a0 <append_char>
   37ac1:	jmp    377f4 <url_file_name+0x184>
   37ac6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   37ad0:	mov    r12,QWORD PTR [rsp+0x38]
   37ad5:	mov    r15,QWORD PTR [rsp+0x40]
   37ada:	mov    r13,QWORD PTR [rsp+0x48]
   37adf:	test   r8d,r8d
   37ae2:	je     37c87 <url_file_name+0x617>
   37ae8:	mov    edx,0x5
   37aed:	lea    rsi,[rip+0x35eb4]        # 6d9a8 <eta_str.8886+0xc30>
   37af4:	xor    edi,edi
   37af6:	call   c780 <dcgettext@plt>
   37afb:	xor    edi,edi
   37afd:	mov    rsi,rax
   37b00:	xor    eax,eax
   37b02:	call   2e0a0 <logprintf>
   37b07:	mov    rdi,rbp
   37b0a:	call   4bdc0 <rpl_free>
   37b0f:	cmp    BYTE PTR [rip+0x527a5],0x0        # 8a2bb <opt+0x23b>
   37b16:	jne    37e30 <url_file_name+0x7c0>
   37b1c:	mov    rdi,r14
   37b1f:	call   cba0 <iconv_close@plt>
   37b24:	mov    rsi,r13
   37b27:	mov    rdi,r15
   37b2a:	mov    QWORD PTR [rsp+0x80],0x0
   37b36:	mov    QWORD PTR [rsp+0x88],0x0
   37b42:	call   36810 <append_string>
   37b47:	mov    rdi,r15
   37b4a:	call   4bdc0 <rpl_free>
   37b4f:	mov    esi,DWORD PTR [rsp+0x7c]
   37b53:	mov    rdi,QWORD PTR [rsp+0x70]
   37b58:	mov    edx,0x3
   37b5d:	call   3f1e0 <get_max_length>
   37b62:	mov    rbp,rax
   37b65:	mov    rbx,rax
   37b68:	sub    rbp,0x13
   37b6c:	je     37b84 <url_file_name+0x514>
   37b6e:	mov    rdi,QWORD PTR [rsp+0x80]
   37b76:	call   c310 <strlen@plt>
   37b7b:	cmp    rax,rbp
   37b7e:	ja     37db8 <url_file_name+0x748>
   37b84:	mov    rdi,r12
   37b87:	call   4bdc0 <rpl_free>
   37b8c:	mov    edx,DWORD PTR [rsp+0x7c]
   37b90:	test   edx,edx
   37b92:	jne    37c30 <url_file_name+0x5c0>
   37b98:	mov    rsi,QWORD PTR [rsp+0x10]
   37b9d:	mov    rdi,QWORD PTR [rsp+0x80]
   37ba5:	call   36810 <append_string>
   37baa:	mov    rdi,QWORD PTR [rsp+0x80]
   37bb2:	mov    r12,QWORD PTR [rsp+0x70]
   37bb7:	call   4bdc0 <rpl_free>
   37bbc:	cmp    BYTE PTR [rip+0x524ef],0x0        # 8a0b2 <opt+0x32>
   37bc3:	mov    QWORD PTR [rsp+0x80],0x0
   37bcf:	jne    37bf0 <url_file_name+0x580>
   37bd1:	cmp    BYTE PTR [rip+0x52608],0x0        # 8a1e0 <opt+0x160>
   37bd8:	jne    37bf0 <url_file_name+0x580>
   37bda:	cmp    BYTE PTR [rip+0x526db],0x0        # 8a2bc <opt+0x23c>
   37be1:	je     37ce0 <url_file_name+0x670>
   37be7:	nop    WORD PTR [rax+rax*1+0x0]
   37bf0:	xor    esi,esi
   37bf2:	mov    rdi,r12
   37bf5:	call   3bed0 <file_exists_p>
   37bfa:	test   al,al
   37bfc:	jne    37c48 <url_file_name+0x5d8>
   37bfe:	mov    rax,QWORD PTR [rsp+0xa8]
   37c06:	xor    rax,QWORD PTR fs:0x28
   37c0f:	jne    37e73 <url_file_name+0x803>
   37c15:	add    rsp,0xb8
   37c1c:	mov    rax,r12
   37c1f:	pop    rbx
   37c20:	pop    rbp
   37c21:	pop    r12
   37c23:	pop    r13
   37c25:	pop    r14
   37c27:	pop    r15
   37c29:	ret    
   37c2a:	nop    WORD PTR [rax+rax*1+0x0]
   37c30:	mov    rsi,QWORD PTR [rsp+0x10]
   37c35:	mov    edi,0x2f
   37c3a:	call   367a0 <append_char>
   37c3f:	jmp    37b98 <url_file_name+0x528>
   37c44:	nop    DWORD PTR [rax+0x0]
   37c48:	mov    rdi,r12
   37c4b:	call   3bef0 <file_non_directory_p>
   37c50:	test   al,al
   37c52:	jne    37bfe <url_file_name+0x58e>
   37c54:	mov    rdi,r12
   37c57:	call   3e5c0 <unique_name_passthrough>
   37c5c:	mov    rbx,rax
   37c5f:	cmp    r12,rax
   37c62:	je     37bfe <url_file_name+0x58e>
   37c64:	mov    rdi,r12
   37c67:	mov    r12,rbx
   37c6a:	call   4bdc0 <rpl_free>
   37c6f:	jmp    37bfe <url_file_name+0x58e>
   37c71:	nop    DWORD PTR [rax+0x0]
   37c78:	mov    r12,QWORD PTR [rsp+0x38]
   37c7d:	mov    r15,QWORD PTR [rsp+0x40]
   37c82:	mov    r13,QWORD PTR [rsp+0x48]
   37c87:	mov    edx,0x5
   37c8c:	lea    rsi,[rip+0x35d4d]        # 6d9e0 <eta_str.8886+0xc68>
   37c93:	jmp    37af4 <url_file_name+0x484>
   37c98:	nop    DWORD PTR [rax+rax*1+0x0]
   37ca0:	xor    edi,edi
   37ca2:	mov    edx,0x5
   37ca7:	mov    DWORD PTR [rsp],r8d
   37cab:	mov    r12,QWORD PTR [rsp+0x38]
   37cb0:	lea    rsi,[rip+0x35b63]        # 6d81a <eta_str.8886+0xaa2>
   37cb7:	mov    r15,QWORD PTR [rsp+0x40]
   37cbc:	mov    r13,QWORD PTR [rsp+0x48]
   37cc1:	call   c780 <dcgettext@plt>
   37cc6:	mov    r8d,DWORD PTR [rsp]
   37cca:	xor    edi,edi
   37ccc:	mov    rsi,rax
   37ccf:	xor    eax,eax
   37cd1:	mov    edx,r8d
   37cd4:	call   2e0a0 <logprintf>
   37cd9:	jmp    37b07 <url_file_name+0x497>
   37cde:	xchg   ax,ax
   37ce0:	cmp    BYTE PTR [rip+0x523c1],0x0        # 8a0a8 <opt+0x28>
   37ce7:	jne    37bf0 <url_file_name+0x580>
   37ced:	cmp    QWORD PTR [rip+0x5248b],0x0        # 8a180 <opt+0x100>
   37cf5:	jne    37bf0 <url_file_name+0x580>
   37cfb:	mov    eax,DWORD PTR [rip+0x525bf]        # 8a2c0 <opt+0x240>
   37d01:	test   eax,eax
   37d03:	jg     37bf0 <url_file_name+0x580>
   37d09:	jmp    37c54 <url_file_name+0x5e4>
   37d0e:	xchg   ax,ax
   37d10:	mov    rsi,r13
   37d13:	call   36810 <append_string>
   37d18:	jmp    37a07 <url_file_name+0x397>
   37d1d:	nop    DWORD PTR [rax]
   37d20:	mov    rsi,r13
   37d23:	mov    edi,0x2f
   37d28:	call   367a0 <append_char>
   37d2d:	jmp    3772a <url_file_name+0xba>
   37d32:	nop    WORD PTR [rax+rax*1+0x0]
   37d38:	mov    rsi,r13
   37d3b:	mov    edi,0x2f
   37d40:	call   367a0 <append_char>
   37d45:	jmp    379d7 <url_file_name+0x367>
   37d4a:	nop    WORD PTR [rax+rax*1+0x0]
   37d50:	mov    rdi,QWORD PTR [rsp+0x8]
   37d55:	call   4b5b0 <quote>
   37d5a:	mov    rdi,QWORD PTR [rsp+0x18]
   37d5f:	mov    r15,rax
   37d62:	call   4b5b0 <quote>
   37d67:	mov    edx,0x5
   37d6c:	lea    rsi,[rip+0x35bd5]        # 6d948 <eta_str.8886+0xbd0>
   37d73:	xor    edi,edi
   37d75:	mov    r14,rax
   37d78:	call   c780 <dcgettext@plt>
   37d7d:	mov    rcx,r15
   37d80:	mov    rdx,r14
   37d83:	xor    edi,edi
   37d85:	mov    rsi,rax
   37d88:	xor    eax,eax
   37d8a:	call   2e0a0 <logprintf>
   37d8f:	mov    r15,QWORD PTR [rsp+0x50]
   37d94:	jmp    37b24 <url_file_name+0x4b4>
   37d99:	nop    DWORD PTR [rax+0x0]
   37da0:	mov    edi,0xe
   37da5:	call   bfc0 <nl_langinfo@plt>
   37daa:	mov    QWORD PTR [rsp+0x8],rax
   37daf:	jmp    37851 <url_file_name+0x1e1>
   37db4:	nop    DWORD PTR [rax+0x0]
   37db8:	mov    rdx,rax
   37dbb:	lea    rsi,[rip+0x35c86]        # 6da48 <eta_str.8886+0xcd0>
   37dc2:	xor    eax,eax
   37dc4:	mov    edi,0x1
   37dc9:	call   2e0a0 <logprintf>
   37dce:	xor    eax,eax
   37dd0:	mov    edi,0x1
   37dd5:	lea    rsi,[rip+0x35a52]        # 6d82e <eta_str.8886+0xab6>
   37ddc:	call   2e0a0 <logprintf>
   37de1:	mov    rax,QWORD PTR [rsp+0x80]
   37de9:	mov    edi,0x1
   37dee:	lea    rsi,[rip+0x35a4f]        # 6d844 <eta_str.8886+0xacc>
   37df5:	mov    BYTE PTR [rax+rbx*1-0x13],0x0
   37dfa:	mov    rdx,QWORD PTR [rsp+0x80]
   37e02:	xor    eax,eax
   37e04:	call   2e0a0 <logprintf>
   37e09:	jmp    37b84 <url_file_name+0x514>
   37e0e:	xchg   ax,ax
   37e10:	mov    rdi,r12
   37e13:	call   c310 <strlen@plt>
   37e18:	mov    rdi,r12
   37e1b:	lea    rsi,[r12+rax*1]
   37e1f:	call   3b8a0 <strdupdelim>
   37e24:	mov    r12,rax
   37e27:	jmp    377e5 <url_file_name+0x175>
   37e2c:	nop    DWORD PTR [rax+0x0]
   37e30:	mov    rcx,QWORD PTR [rsp+0x8]
   37e35:	mov    rdx,QWORD PTR [rsp+0x18]
   37e3a:	mov    rsi,r15
   37e3d:	xor    eax,eax
   37e3f:	lea    rdi,[rip+0x35bca]        # 6da10 <eta_str.8886+0xc98>
   37e46:	call   2e250 <debug_logprintf>
   37e4b:	jmp    37b1c <url_file_name+0x4ac>
   37e50:	mov    r8,QWORD PTR [rsp+0x8]
   37e55:	mov    rdx,QWORD PTR [rsp+0x18]
   37e5a:	mov    rcx,rbp
   37e5d:	mov    rsi,r15
   37e60:	lea    rdi,[rip+0x35b11]        # 6d978 <eta_str.8886+0xc00>
   37e67:	xor    eax,eax
   37e69:	call   2e250 <debug_logprintf>
   37e6e:	jmp    379b5 <url_file_name+0x345>
   37e73:	call   c7b0 <__stack_chk_fail@plt>
   37e78:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000037e80 <uri_merge>:
   37e80:	endbr64 
   37e84:	push   r15
   37e86:	push   r14
   37e88:	push   r13
   37e8a:	push   r12
   37e8c:	mov    r12,rsi
   37e8f:	push   rbp
   37e90:	mov    rbp,rdi
   37e93:	mov    rdi,rsi
   37e96:	push   rbx
   37e97:	sub    rsp,0x18
   37e9b:	call   371c0 <url_has_scheme>
   37ea0:	test   al,al
   37ea2:	jne    37fdb <uri_merge+0x15b>
   37ea8:	mov    rdi,rbp
   37eab:	mov    r14d,eax
   37eae:	call   37130 <url_scheme>
   37eb3:	mov    edx,0x0
   37eb8:	cmp    eax,0x4
   37ebb:	cmove  eax,edx
   37ebe:	mov    eax,eax
   37ec0:	lea    rdx,[rax+rax*2]
   37ec4:	lea    rax,[rip+0x492f5]        # 811c0 <supported_schemes>
   37ecb:	mov    edx,DWORD PTR [rax+rdx*8+0x14]
   37ecf:	lea    rax,[rip+0x492e4]        # 811ba <seps.8661+0x2>
   37ed6:	test   dl,0x2
   37ed9:	je     37ee6 <uri_merge+0x66>
   37edb:	mov    BYTE PTR [rip+0x492d8],0x3b        # 811ba <seps.8661+0x2>
   37ee2:	add    rax,0x1
   37ee6:	test   dl,0x4
   37ee9:	je     37ef2 <uri_merge+0x72>
   37eeb:	mov    BYTE PTR [rax],0x3f
   37eee:	add    rax,0x1
   37ef2:	and    edx,0x8
   37ef5:	je     37efe <uri_merge+0x7e>
   37ef7:	mov    BYTE PTR [rax],0x23
   37efa:	add    rax,0x1
   37efe:	mov    BYTE PTR [rax],0x0
   37f01:	lea    rsi,[rip+0x492b2]        # 811ba <seps.8661+0x2>
   37f08:	mov    rdi,rbp
   37f0b:	call   c0a0 <strpbrk@plt>
   37f10:	mov    rbx,rax
   37f13:	test   rax,rax
   37f16:	je     37ff0 <uri_merge+0x170>
   37f1c:	mov    rdi,r12
   37f1f:	call   c310 <strlen@plt>
   37f24:	mov    r13,rax
   37f27:	movzx  eax,BYTE PTR [r12]
   37f2c:	test   al,al
   37f2e:	je     37fd8 <uri_merge+0x158>
   37f34:	movsxd r15,r13d
   37f37:	cmp    al,0x3f
   37f39:	je     38008 <uri_merge+0x188>
   37f3f:	cmp    al,0x23
   37f41:	je     38120 <uri_merge+0x2a0>
   37f47:	mov    rdx,rbx
   37f4a:	mov    esi,0x2f
   37f4f:	mov    rdi,rbp
   37f52:	sub    rdx,rbp
   37f55:	cmp    al,0x2f
   37f57:	je     38060 <uri_merge+0x1e0>
   37f5d:	call   c570 <memrchr@plt>
   37f62:	test   rax,rax
   37f65:	je     38160 <uri_merge+0x2e0>
   37f6b:	lea    rdx,[rbp+0x2]
   37f6f:	cmp    rax,rdx
   37f72:	jb     37f7e <uri_merge+0xfe>
   37f74:	cmp    BYTE PTR [rax-0x2],0x3a
   37f78:	je     38190 <uri_merge+0x310>
   37f7e:	lea    rbx,[rax+0x1]
   37f82:	sub    rbx,rbp
   37f85:	add    r13d,ebx
   37f88:	lea    edi,[r13+0x1]
   37f8c:	movsxd r13,r13d
   37f8f:	movsxd rdi,edi
   37f92:	call   4b850 <xmalloc>
   37f97:	mov    r14,rax
   37f9a:	test   ebx,ebx
   37f9c:	je     38172 <uri_merge+0x2f2>
   37fa2:	movsxd rbx,ebx
   37fa5:	mov    rdi,rax
   37fa8:	mov    rsi,rbp
   37fab:	mov    rdx,rbx
   37fae:	call   cb30 <memcpy@plt>
   37fb3:	lea    rdi,[r14+rbx*1]
   37fb7:	nop    WORD PTR [rax+rax*1+0x0]
   37fc0:	mov    rdx,r15
   37fc3:	mov    rsi,r12
   37fc6:	call   cb30 <memcpy@plt>
   37fcb:	mov    BYTE PTR [r14+r13*1],0x0
   37fd0:	jmp    38045 <uri_merge+0x1c5>
   37fd2:	nop    WORD PTR [rax+rax*1+0x0]
   37fd8:	mov    rdi,rbp
   37fdb:	add    rsp,0x18
   37fdf:	pop    rbx
   37fe0:	pop    rbp
   37fe1:	pop    r12
   37fe3:	pop    r13
   37fe5:	pop    r14
   37fe7:	pop    r15
   37fe9:	jmp    4ba50 <xstrdup>
   37fee:	xchg   ax,ax
   37ff0:	mov    rdi,rbp
   37ff3:	call   c310 <strlen@plt>
   37ff8:	lea    rbx,[rbp+rax*1+0x0]
   37ffd:	jmp    37f1c <uri_merge+0x9c>
   38002:	nop    WORD PTR [rax+rax*1+0x0]
   38008:	sub    rbx,rbp
   3800b:	add    r13d,ebx
   3800e:	movsxd rbx,ebx
   38011:	lea    edi,[r13+0x1]
   38015:	movsxd r13,r13d
   38018:	movsxd rdi,edi
   3801b:	call   4b850 <xmalloc>
   38020:	mov    rdx,rbx
   38023:	mov    rsi,rbp
   38026:	mov    r14,rax
   38029:	mov    rdi,rax
   3802c:	call   cb30 <memcpy@plt>
   38031:	lea    rdi,[r14+rbx*1]
   38035:	mov    rdx,r15
   38038:	mov    rsi,r12
   3803b:	call   cb30 <memcpy@plt>
   38040:	mov    BYTE PTR [r14+r13*1],0x0
   38045:	add    rsp,0x18
   38049:	mov    rax,r14
   3804c:	pop    rbx
   3804d:	pop    rbp
   3804e:	pop    r12
   38050:	pop    r13
   38052:	pop    r14
   38054:	pop    r15
   38056:	ret    
   38057:	nop    WORD PTR [rax+rax*1+0x0]
   38060:	call   bf70 <memchr@plt>
   38065:	cmp    BYTE PTR [r12+0x1],0x2f
   3806b:	jne    3809c <uri_merge+0x21c>
   3806d:	jmp    38148 <uri_merge+0x2c8>
   38072:	nop    WORD PTR [rax+rax*1+0x0]
   38078:	cmp    BYTE PTR [rax+0x1],0x2f
   3807c:	jne    38160 <uri_merge+0x2e0>
   38082:	lea    rdi,[rax+0x2]
   38086:	mov    rdx,rbx
   38089:	mov    esi,0x2f
   3808e:	sub    rdx,rdi
   38091:	call   bf70 <memchr@plt>
   38096:	movzx  r14d,BYTE PTR [rsp+0x8]
   3809c:	test   rax,rax
   3809f:	mov    edx,r14d
   380a2:	setne  cl
   380a5:	xor    edx,0x1
   380a8:	mov    esi,ecx
   380aa:	and    sil,dl
   380ad:	mov    BYTE PTR [rsp+0x8],sil
   380b2:	jne    38078 <uri_merge+0x1f8>
   380b4:	test   rax,rax
   380b7:	sete   sil
   380bb:	test   dl,dl
   380bd:	je     38207 <uri_merge+0x387>
   380c3:	test   sil,sil
   380c6:	jne    38160 <uri_merge+0x2e0>
   380cc:	test   cl,cl
   380ce:	je     38200 <uri_merge+0x380>
   380d4:	test   r14b,r14b
   380d7:	je     38200 <uri_merge+0x380>
   380dd:	sub    rax,rbp
   380e0:	mov    rbx,rax
   380e3:	add    r13d,ebx
   380e6:	lea    edi,[r13+0x1]
   380ea:	movsxd r13,r13d
   380ed:	movsxd rdi,edi
   380f0:	call   4b850 <xmalloc>
   380f5:	movsxd rdx,ebx
   380f8:	mov    r14,rax
   380fb:	test   ebx,ebx
   380fd:	je     38172 <uri_merge+0x2f2>
   380ff:	mov    rdi,rax
   38102:	mov    rsi,rbp
   38105:	mov    QWORD PTR [rsp+0x8],rdx
   3810a:	call   cb30 <memcpy@plt>
   3810f:	mov    rdx,QWORD PTR [rsp+0x8]
   38114:	lea    rdi,[r14+rdx*1]
   38118:	jmp    37fc0 <uri_merge+0x140>
   3811d:	nop    DWORD PTR [rax]
   38120:	mov    esi,0x23
   38125:	mov    rdi,rbp
   38128:	call   c6c0 <strchr@plt>
   3812d:	test   rax,rax
   38130:	je     381f0 <uri_merge+0x370>
   38136:	sub    rax,rbp
   38139:	mov    rbx,rax
   3813c:	jmp    3800b <uri_merge+0x18b>
   38141:	nop    DWORD PTR [rax+0x0]
   38148:	test   rax,rax
   3814b:	je     38160 <uri_merge+0x2e0>
   3814d:	mov    rbx,rax
   38150:	sub    rbx,rbp
   38153:	cmp    BYTE PTR [rax+0x1],0x2f
   38157:	je     380e3 <uri_merge+0x263>
   38159:	nop    DWORD PTR [rax+0x0]
   38160:	lea    edi,[r13+0x1]
   38164:	mov    r13,r15
   38167:	movsxd rdi,edi
   3816a:	call   4b850 <xmalloc>
   3816f:	mov    r14,rax
   38172:	mov    rdi,r14
   38175:	mov    rdx,r15
   38178:	mov    rsi,r12
   3817b:	call   cb30 <memcpy@plt>
   38180:	mov    BYTE PTR [r14+r13*1],0x0
   38185:	jmp    38045 <uri_merge+0x1c5>
   3818a:	nop    WORD PTR [rax+rax*1+0x0]
   38190:	cmp    BYTE PTR [rax-0x1],0x2f
   38194:	jne    37f7e <uri_merge+0xfe>
   3819a:	add    rbx,0x1
   3819e:	sub    rbx,rbp
   381a1:	add    r13d,ebx
   381a4:	lea    edi,[r13+0x1]
   381a8:	movsxd r13,r13d
   381ab:	movsxd rdi,edi
   381ae:	call   4b850 <xmalloc>
   381b3:	mov    r14,rax
   381b6:	test   ebx,ebx
   381b8:	jne    381d2 <uri_merge+0x352>
   381ba:	mov    rdi,rax
   381bd:	mov    rbx,0xffffffffffffffff
   381c4:	nop    DWORD PTR [rax+0x0]
   381c8:	mov    BYTE PTR [r14+rbx*1],0x2f
   381cd:	jmp    37fc0 <uri_merge+0x140>
   381d2:	movsxd rbx,ebx
   381d5:	mov    rdi,rax
   381d8:	mov    rsi,rbp
   381db:	mov    rdx,rbx
   381de:	call   cb30 <memcpy@plt>
   381e3:	lea    rdi,[r14+rbx*1]
   381e7:	sub    rbx,0x1
   381eb:	jmp    381c8 <uri_merge+0x348>
   381ed:	nop    DWORD PTR [rax]
   381f0:	mov    rdi,rbp
   381f3:	call   c310 <strlen@plt>
   381f8:	add    rax,rbp
   381fb:	jmp    38136 <uri_merge+0x2b6>
   38200:	xor    eax,eax
   38202:	jmp    380dd <uri_merge+0x25d>
   38207:	test   sil,sil
   3820a:	je     380cc <uri_merge+0x24c>
   38210:	test   r14b,r14b
   38213:	je     380cc <uri_merge+0x24c>
   38219:	mov    rax,rbx
   3821c:	jmp    380dd <uri_merge+0x25d>
   38221:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3822c:	nop    DWORD PTR [rax+0x0]

0000000000038230 <url_string>:
   38230:	endbr64 
   38234:	push   r15
   38236:	push   r14
   38238:	push   r13
   3823a:	push   r12
   3823c:	push   rbp
   3823d:	mov    ebp,esi
   3823f:	push   rbx
   38240:	mov    rbx,rdi
   38243:	sub    rsp,0x28
   38247:	mov    eax,DWORD PTR [rdi+0x8]
   3824a:	lea    rdx,[rax+rax*2]
   3824e:	lea    rax,[rip+0x48f6b]        # 811c0 <supported_schemes>
   38255:	lea    rax,[rax+rdx*8]
   38259:	mov    ecx,DWORD PTR [rax+0x10]
   3825c:	mov    r15,QWORD PTR [rax+0x8]
   38260:	mov    DWORD PTR [rsp+0x10],ecx
   38264:	call   36650 <full_path_length>
   38269:	mov    rdi,QWORD PTR [rbx+0x50]
   3826d:	cmp    ebp,0x2
   38270:	setne  dl
   38273:	mov    DWORD PTR [rsp+0x14],eax
   38277:	test   rdi,rdi
   3827a:	setne  al
   3827d:	xor    r14d,r14d
   38280:	xor    r12d,r12d
   38283:	and    dl,al
   38285:	mov    BYTE PTR [rsp+0x7],dl
   38289:	jne    38510 <url_string+0x2e0>
   3828f:	mov    rdi,QWORD PTR [rbx+0x10]
   38293:	mov    edx,0x1
   38298:	mov    esi,0x2
   3829d:	call   36890 <url_escape_1>
   382a2:	mov    rbp,rax
   382a5:	cmp    QWORD PTR [rbx+0x10],rax
   382a9:	je     382f3 <url_string+0xc3>
   382ab:	movzx  eax,BYTE PTR [rax]
   382ae:	mov    rcx,rbp
   382b1:	test   al,al
   382b3:	je     382f0 <url_string+0xc0>
   382b5:	mov    rdx,rbp
   382b8:	jmp    382d5 <url_string+0xa5>
   382ba:	nop    WORD PTR [rax+rax*1+0x0]
   382c0:	mov    BYTE PTR [rcx],al
   382c2:	movzx  eax,BYTE PTR [rdx+0x1]
   382c6:	lea    rsi,[rdx+0x1]
   382ca:	add    rcx,0x1
   382ce:	test   al,al
   382d0:	je     382f0 <url_string+0xc0>
   382d2:	mov    rdx,rsi
   382d5:	cmp    al,0x25
   382d7:	jne    382c0 <url_string+0x90>
   382d9:	cmp    BYTE PTR [rdx+0x1],0x33
   382dd:	jne    382c0 <url_string+0x90>
   382df:	cmp    BYTE PTR [rdx+0x2],0x41
   382e3:	jne    382c0 <url_string+0x90>
   382e5:	add    rdx,0x2
   382e9:	mov    eax,0x3a
   382ee:	jmp    382c0 <url_string+0x90>
   382f0:	mov    BYTE PTR [rcx],0x0
   382f3:	mov    esi,0x3a
   382f8:	mov    rdi,rbp
   382fb:	call   c6c0 <strchr@plt>
   38300:	mov    rdi,r15
   38303:	mov    QWORD PTR [rsp+0x8],rax
   38308:	call   c310 <strlen@plt>
   3830d:	mov    rdi,rbp
   38310:	mov    r13,rax
   38313:	call   c310 <strlen@plt>
   38318:	xor    edx,edx
   3831a:	cmp    QWORD PTR [rsp+0x8],0x0
   38320:	movsxd rdi,DWORD PTR [rbx+0x18]
   38324:	mov    r8,rax
   38327:	mov    eax,DWORD PTR [rsp+0x14]
   3832b:	setne  dl
   3832e:	lea    eax,[rax+r13*1+0x1]
   38333:	add    eax,r8d
   38336:	lea    r13d,[rax+rdx*2]
   3833a:	cmp    edi,DWORD PTR [rsp+0x10]
   3833e:	je     3834a <url_string+0x11a>
   38340:	call   3d070 <numdigit>
   38345:	lea    r13d,[r13+rax*1+0x1]
   3834a:	test   r12,r12
   3834d:	je     38558 <url_string+0x328>
   38353:	mov    rdi,r12
   38356:	call   c310 <strlen@plt>
   3835b:	lea    r13d,[r13+rax*1+0x1]
   38360:	test   r14,r14
   38363:	je     384b8 <url_string+0x288>
   38369:	mov    rdi,r14
   3836c:	call   c310 <strlen@plt>
   38371:	lea    edi,[r13+rax*1+0x1]
   38376:	movsxd rdi,edi
   38379:	call   4b850 <xmalloc>
   3837e:	mov    rdi,r15
   38381:	mov    r13,rax
   38384:	call   c310 <strlen@plt>
   38389:	mov    rsi,r15
   3838c:	mov    rdi,r13
   3838f:	movsxd rdx,eax
   38392:	mov    QWORD PTR [rsp+0x18],rdx
   38397:	call   cb30 <memcpy@plt>
   3839c:	mov    rdx,QWORD PTR [rsp+0x18]
   383a1:	mov    rdi,r12
   383a4:	lea    r15,[r13+rdx*1+0x0]
   383a9:	call   c310 <strlen@plt>
   383ae:	mov    rsi,r12
   383b1:	mov    rdi,r15
   383b4:	movsxd rdx,eax
   383b7:	mov    QWORD PTR [rsp+0x18],rdx
   383bc:	call   cb30 <memcpy@plt>
   383c1:	mov    rdx,QWORD PTR [rsp+0x18]
   383c6:	mov    rdi,r14
   383c9:	lea    rax,[r15+rdx*1]
   383cd:	mov    BYTE PTR [rax],0x3a
   383d0:	lea    r15,[rax+0x1]
   383d4:	call   c310 <strlen@plt>
   383d9:	mov    rdi,r15
   383dc:	mov    rsi,r14
   383df:	movsxd rdx,eax
   383e2:	mov    QWORD PTR [rsp+0x18],rdx
   383e7:	call   cb30 <memcpy@plt>
   383ec:	mov    rdx,QWORD PTR [rsp+0x18]
   383f1:	add    r15,rdx
   383f4:	cmp    QWORD PTR [rsp+0x8],0x0
   383fa:	mov    BYTE PTR [r15],0x40
   383fe:	lea    rcx,[r15+0x1]
   38402:	je     38595 <url_string+0x365>
   38408:	mov    BYTE PTR [rcx],0x5b
   3840b:	mov    rdi,rbp
   3840e:	lea    r15,[rcx+0x1]
   38412:	call   c310 <strlen@plt>
   38417:	mov    rdi,r15
   3841a:	mov    rsi,rbp
   3841d:	movsxd rdx,eax
   38420:	mov    QWORD PTR [rsp+0x8],rdx
   38425:	call   cb30 <memcpy@plt>
   3842a:	mov    rdx,QWORD PTR [rsp+0x8]
   3842f:	lea    rax,[r15+rdx*1]
   38433:	mov    BYTE PTR [rax],0x5d
   38436:	lea    r15,[rax+0x1]
   3843a:	movsxd rsi,DWORD PTR [rbx+0x18]
   3843e:	cmp    esi,DWORD PTR [rsp+0x10]
   38442:	je     38454 <url_string+0x224>
   38444:	mov    BYTE PTR [r15],0x3a
   38448:	lea    rdi,[r15+0x1]
   3844c:	call   3d0c0 <number_to_string>
   38451:	mov    r15,rax
   38454:	mov    rsi,r15
   38457:	mov    rdi,rbx
   3845a:	call   366a0 <full_path_write>
   3845f:	movsxd rax,DWORD PTR [rsp+0x14]
   38464:	mov    BYTE PTR [r15+rax*1],0x0
   38469:	test   r12,r12
   3846c:	je     3847c <url_string+0x24c>
   3846e:	cmp    QWORD PTR [rbx+0x50],r12
   38472:	je     3847c <url_string+0x24c>
   38474:	mov    rdi,r12
   38477:	call   4bdc0 <rpl_free>
   3847c:	cmp    BYTE PTR [rsp+0x7],0x0
   38481:	je     38491 <url_string+0x261>
   38483:	cmp    QWORD PTR [rbx+0x58],r14
   38487:	je     38491 <url_string+0x261>
   38489:	mov    rdi,r14
   3848c:	call   4bdc0 <rpl_free>
   38491:	cmp    QWORD PTR [rbx+0x10],rbp
   38495:	je     3849f <url_string+0x26f>
   38497:	mov    rdi,rbp
   3849a:	call   4bdc0 <rpl_free>
   3849f:	add    rsp,0x28
   384a3:	mov    rax,r13
   384a6:	pop    rbx
   384a7:	pop    rbp
   384a8:	pop    r12
   384aa:	pop    r13
   384ac:	pop    r14
   384ae:	pop    r15
   384b0:	ret    
   384b1:	nop    DWORD PTR [rax+0x0]
   384b8:	movsxd rdi,r13d
   384bb:	call   4b850 <xmalloc>
   384c0:	mov    rdi,r15
   384c3:	mov    r13,rax
   384c6:	call   c310 <strlen@plt>
   384cb:	mov    rsi,r15
   384ce:	mov    rdi,r13
   384d1:	movsxd rdx,eax
   384d4:	mov    QWORD PTR [rsp+0x18],rdx
   384d9:	call   cb30 <memcpy@plt>
   384de:	mov    rdx,QWORD PTR [rsp+0x18]
   384e3:	mov    rdi,r12
   384e6:	lea    r15,[r13+rdx*1+0x0]
   384eb:	call   c310 <strlen@plt>
   384f0:	mov    rdi,r15
   384f3:	mov    rsi,r12
   384f6:	movsxd rdx,eax
   384f9:	mov    QWORD PTR [rsp+0x18],rdx
   384fe:	call   cb30 <memcpy@plt>
   38503:	mov    rdx,QWORD PTR [rsp+0x18]
   38508:	add    r15,rdx
   3850b:	jmp    383f4 <url_string+0x1c4>
   38510:	mov    edx,0x1
   38515:	mov    esi,0x2
   3851a:	call   36890 <url_escape_1>
   3851f:	mov    r14,QWORD PTR [rbx+0x58]
   38523:	mov    BYTE PTR [rsp+0x7],0x0
   38528:	mov    r12,rax
   3852b:	test   r14,r14
   3852e:	je     3828f <url_string+0x5f>
   38534:	test   ebp,ebp
   38536:	sete   BYTE PTR [rsp+0x7]
   3853b:	movzx  r13d,BYTE PTR [rsp+0x7]
   38541:	cmp    ebp,0x1
   38544:	jne    385c0 <url_string+0x390>
   38546:	lea    r14,[rip+0x35308]        # 6d855 <eta_str.8886+0xadd>
   3854d:	jmp    3828f <url_string+0x5f>
   38552:	nop    WORD PTR [rax+rax*1+0x0]
   38558:	movsxd rdi,r13d
   3855b:	call   4b850 <xmalloc>
   38560:	mov    rdi,r15
   38563:	mov    r13,rax
   38566:	call   c310 <strlen@plt>
   3856b:	mov    rsi,r15
   3856e:	mov    rdi,r13
   38571:	movsxd rcx,eax
   38574:	mov    rdx,rcx
   38577:	mov    QWORD PTR [rsp+0x18],rcx
   3857c:	call   cb30 <memcpy@plt>
   38581:	mov    rcx,QWORD PTR [rsp+0x18]
   38586:	add    rcx,r13
   38589:	cmp    QWORD PTR [rsp+0x8],0x0
   3858f:	jne    38408 <url_string+0x1d8>
   38595:	mov    rdi,rbp
   38598:	mov    QWORD PTR [rsp+0x8],rcx
   3859d:	call   c310 <strlen@plt>
   385a2:	mov    rcx,QWORD PTR [rsp+0x8]
   385a7:	mov    rsi,rbp
   385aa:	movsxd r15,eax
   385ad:	mov    rdx,r15
   385b0:	mov    rdi,rcx
   385b3:	call   cb30 <memcpy@plt>
   385b8:	add    r15,rax
   385bb:	jmp    3843a <url_string+0x20a>
   385c0:	mov    rdi,r14
   385c3:	mov    edx,0x1
   385c8:	mov    esi,0x2
   385cd:	call   36890 <url_escape_1>
   385d2:	test   rax,rax
   385d5:	mov    r14,rax
   385d8:	setne  al
   385db:	and    r13d,eax
   385de:	mov    BYTE PTR [rsp+0x7],r13b
   385e3:	jmp    3828f <url_string+0x5f>
   385e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000385f0 <url_parse>:
   385f0:	endbr64 
   385f4:	push   r15
   385f6:	mov    r15,rdx
   385f9:	push   r14
   385fb:	push   r13
   385fd:	push   r12
   385ff:	mov    r12d,ecx
   38602:	push   rbp
   38603:	mov    rbp,rdi
   38606:	push   rbx
   38607:	sub    rsp,0x98
   3860e:	mov    QWORD PTR [rsp+0x20],rsi
   38613:	mov    rax,QWORD PTR fs:0x28
   3861c:	mov    QWORD PTR [rsp+0x88],rax
   38624:	xor    eax,eax
   38626:	call   37130 <url_scheme>
   3862b:	mov    DWORD PTR [rsp+0x30],eax
   3862f:	cmp    eax,0x4
   38632:	je     38f10 <url_parse+0x920>
   38638:	test   r15,r15
   3863b:	je     38648 <url_parse+0x58>
   3863d:	cmp    BYTE PTR [r15+0x18],0x0
   38642:	jne    38a20 <url_parse+0x430>
   38648:	mov    QWORD PTR [rsp+0x8],rbp
   3864d:	test   r12b,r12b
   38650:	jne    38ce0 <url_parse+0x6f0>
   38656:	mov    ebx,DWORD PTR [rsp+0x30]
   3865a:	lea    r13,[rip+0x48b5f]        # 811c0 <supported_schemes>
   38661:	lea    rax,[rbx+rbx*2]
   38665:	mov    rdi,QWORD PTR [r13+rax*8+0x8]
   3866a:	call   c310 <strlen@plt>
   3866f:	mov    rsi,QWORD PTR [rsp+0x8]
   38674:	lea    r12,[rsi+rax*1]
   38678:	lea    rsi,[rip+0x351e1]        # 6d860 <eta_str.8886+0xae8>
   3867f:	mov    rdi,r12
   38682:	call   c0a0 <strpbrk@plt>
   38687:	test   rax,rax
   3868a:	je     38e98 <url_parse+0x8a8>
   38690:	lea    rcx,[rax+0x1]
   38694:	cmp    BYTE PTR [rax],0x40
   38697:	cmovne rcx,r12
   3869b:	mov    r14,rcx
   3869e:	lea    rax,[rbx+rbx*2]
   386a2:	mov    edx,DWORD PTR [r13+rax*8+0x14]
   386a7:	lea    rax,[rip+0x48b0c]        # 811ba <seps.8661+0x2>
   386ae:	test   dl,0x2
   386b1:	je     386be <url_parse+0xce>
   386b3:	mov    BYTE PTR [rip+0x48b00],0x3b        # 811ba <seps.8661+0x2>
   386ba:	add    rax,0x1
   386be:	test   dl,0x4
   386c1:	je     386ca <url_parse+0xda>
   386c3:	mov    BYTE PTR [rax],0x3f
   386c6:	add    rax,0x1
   386ca:	and    edx,0x8
   386cd:	jne    38948 <url_parse+0x358>
   386d3:	mov    BYTE PTR [rax],0x0
   386d6:	cmp    BYTE PTR [r14],0x5b
   386da:	je     3895c <url_parse+0x36c>
   386e0:	lea    rsi,[rip+0x48ad1]        # 811b8 <seps.8661>
   386e7:	mov    rdi,r14
   386ea:	call   c0a0 <strpbrk@plt>
   386ef:	mov    QWORD PTR [rsp+0x10],r14
   386f4:	mov    QWORD PTR [rsp+0x18],rax
   386f9:	mov    rdx,rax
   386fc:	test   rax,rax
   386ff:	je     38d70 <url_parse+0x780>
   38705:	mov    rsi,QWORD PTR [rsp+0x18]
   3870a:	cmp    QWORD PTR [rsp+0x10],rsi
   3870f:	je     389c8 <url_parse+0x3d8>
   38715:	lea    rax,[rbx+rbx*2]
   38719:	mov    eax,DWORD PTR [r13+rax*8+0x10]
   3871e:	mov    DWORD PTR [rsp+0x34],eax
   38722:	movzx  eax,BYTE PTR [rdx]
   38725:	cmp    al,0x3a
   38727:	je     38cf8 <url_parse+0x708>
   3872d:	mov    QWORD PTR [rsp+0x38],0x0
   38736:	mov    QWORD PTR [rsp+0x28],0x0
   3873f:	cmp    al,0x2f
   38741:	je     38ea0 <url_parse+0x8b0>
   38747:	lea    rax,[rbx+rbx*2]
   3874b:	lea    r8,[rip+0x48a69]        # 811bb <seps.8661+0x3>
   38752:	mov    QWORD PTR [rsp+0x60],0x0
   3875b:	mov    QWORD PTR [rsp+0x40],0x0
   38764:	mov    r13d,DWORD PTR [r13+rax*8+0x14]
   38769:	test   r13b,0x2
   3876d:	je     3877f <url_parse+0x18f>
   3876f:	cmp    BYTE PTR [rdx],0x3b
   38772:	lea    r8,[rip+0x48a43]        # 811bc <seps.8661+0x4>
   38779:	je     38d90 <url_parse+0x7a0>
   3877f:	mov    QWORD PTR [rsp+0x68],0x0
   38788:	mov    QWORD PTR [rsp+0x48],0x0
   38791:	test   r13b,0x4
   38795:	je     387a4 <url_parse+0x1b4>
   38797:	cmp    BYTE PTR [rdx],0x3f
   3879a:	je     38e20 <url_parse+0x830>
   387a0:	add    r8,0x1
   387a4:	mov    QWORD PTR [rsp+0x70],0x0
   387ad:	and    r13d,0x8
   387b1:	mov    QWORD PTR [rsp+0x50],0x0
   387ba:	je     387c5 <url_parse+0x1d5>
   387bc:	cmp    BYTE PTR [rdx],0x23
   387bf:	je     38de0 <url_parse+0x7f0>
   387c5:	cmp    r12,r14
   387c8:	je     38ef0 <url_parse+0x900>
   387ce:	lea    r13,[r14-0x1]
   387d2:	cmp    r13,r12
   387d5:	je     38f30 <url_parse+0x940>
   387db:	mov    rdx,r13
   387de:	mov    esi,0x3a
   387e3:	mov    rdi,r12
   387e6:	sub    rdx,r12
   387e9:	call   bf70 <memchr@plt>
   387ee:	mov    rdx,rax
   387f1:	cmp    r12,rax
   387f4:	je     38f30 <url_parse+0x940>
   387fa:	test   rax,rax
   387fd:	je     3882f <url_parse+0x23f>
   387ff:	mov    rsi,r13
   38802:	lea    rdi,[rax+0x1]
   38806:	mov    QWORD PTR [rsp+0x78],rax
   3880b:	call   3b8a0 <strdupdelim>
   38810:	xor    esi,esi
   38812:	mov    rdi,rax
   38815:	mov    QWORD PTR [rsp+0x58],rax
   3881a:	call   36a20 <url_unescape_1>
   3881f:	mov    rdx,QWORD PTR [rsp+0x78]
   38824:	mov    rax,QWORD PTR [rsp+0x58]
   38829:	mov    r13,rdx
   3882c:	mov    rdx,rax
   3882f:	mov    rdi,r12
   38832:	mov    rsi,r13
   38835:	mov    QWORD PTR [rsp+0x58],rdx
   3883a:	call   3b8a0 <strdupdelim>
   3883f:	xor    esi,esi
   38841:	mov    rdi,rax
   38844:	mov    r12,rax
   38847:	call   36a20 <url_unescape_1>
   3884c:	mov    rdx,QWORD PTR [rsp+0x58]
   38851:	mov    esi,0x60
   38856:	mov    edi,0x1
   3885b:	mov    QWORD PTR [rsp+0x58],rdx
   38860:	call   4b9c0 <xcalloc>
   38865:	mov    ebx,DWORD PTR [rsp+0x30]
   38869:	mov    rsi,QWORD PTR [rsp+0x18]
   3886e:	mov    rdi,QWORD PTR [rsp+0x10]
   38873:	mov    r13,rax
   38876:	mov    DWORD PTR [rax+0x8],ebx
   38879:	call   3b8a0 <strdupdelim>
   3887e:	mov    rdx,QWORD PTR [rsp+0x58]
   38883:	mov    QWORD PTR [r13+0x50],r12
   38887:	mov    rsi,QWORD PTR [rsp+0x38]
   3888c:	mov    rdi,QWORD PTR [rsp+0x28]
   38891:	mov    QWORD PTR [r13+0x10],rax
   38895:	mov    eax,DWORD PTR [rsp+0x34]
   38899:	mov    QWORD PTR [r13+0x58],rdx
   3889d:	mov    DWORD PTR [r13+0x18],eax
   388a1:	call   3b8a0 <strdupdelim>
   388a6:	mov    QWORD PTR [r13+0x20],rax
   388aa:	mov    rdi,rax
   388ad:	mov    r12,rax
   388b0:	call   c310 <strlen@plt>
   388b5:	add    rax,r12
   388b8:	cmp    r12,rax
   388bb:	jae    38f90 <url_parse+0x9a0>
   388c1:	mov    rdi,r12
   388c4:	mov    rdx,r12
   388c7:	sub    ebx,0x2
   388ca:	nop    WORD PTR [rax+rax*1+0x0]
   388d0:	movzx  ecx,BYTE PTR [rdx]
   388d3:	cmp    cl,0x2e
   388d6:	je     38aa0 <url_parse+0x4b0>
   388dc:	cmp    rdx,r12
   388df:	je     38b10 <url_parse+0x520>
   388e5:	cmp    rdx,rax
   388e8:	jb     38909 <url_parse+0x319>
   388ea:	jmp    38af0 <url_parse+0x500>
   388ef:	nop
   388f0:	add    rdx,0x1
   388f4:	add    r12,0x1
   388f8:	mov    BYTE PTR [r12-0x1],cl
   388fd:	cmp    rax,rdx
   38900:	je     38af8 <url_parse+0x508>
   38906:	movzx  ecx,BYTE PTR [rdx]
   38909:	cmp    cl,0x2f
   3890c:	jne    388f0 <url_parse+0x300>
   3890e:	cmp    rax,rdx
   38911:	jbe    39046 <url_parse+0xa56>
   38917:	mov    BYTE PTR [r12],0x2f
   3891c:	add    rdx,0x1
   38920:	add    r12,0x1
   38924:	cmp    rdx,rax
   38927:	jb     388d0 <url_parse+0x2e0>
   38929:	cmp    r12,rdx
   3892c:	setne  bl
   3892f:	cmp    rdx,r12
   38932:	je     38b5a <url_parse+0x56a>
   38938:	mov    BYTE PTR [r12],0x0
   3893d:	jmp    38b5a <url_parse+0x56a>
   38942:	nop    WORD PTR [rax+rax*1+0x0]
   38948:	mov    BYTE PTR [rax],0x23
   3894b:	add    rax,0x1
   3894f:	mov    BYTE PTR [rax],0x0
   38952:	cmp    BYTE PTR [r14],0x5b
   38956:	jne    386e0 <url_parse+0xf0>
   3895c:	lea    rax,[r14+0x1]
   38960:	mov    esi,0x5d
   38965:	mov    rdi,rax
   38968:	mov    QWORD PTR [rsp+0x10],rax
   3896d:	call   c6c0 <strchr@plt>
   38972:	test   rax,rax
   38975:	je     38f68 <url_parse+0x978>
   3897b:	mov    rdi,QWORD PTR [rsp+0x10]
   38980:	mov    rsi,rax
   38983:	mov    QWORD PTR [rsp+0x18],rax
   38988:	call   1e500 <is_valid_ipv6_address>
   3898d:	test   al,al
   3898f:	je     38e70 <url_parse+0x880>
   38995:	mov    rax,QWORD PTR [rsp+0x18]
   3899a:	lea    rdi,[rip+0x48817]        # 811b8 <seps.8661>
   389a1:	movsx  esi,BYTE PTR [rax+0x1]
   389a5:	lea    rdx,[rax+0x1]
   389a9:	mov    QWORD PTR [rsp+0x28],rdx
   389ae:	call   c6c0 <strchr@plt>
   389b3:	mov    rdx,QWORD PTR [rsp+0x28]
   389b8:	test   rax,rax
   389bb:	jne    38705 <url_parse+0x115>
   389c1:	nop    DWORD PTR [rax+0x0]
   389c8:	mov    ebx,0x3
   389cd:	mov    rax,QWORD PTR [rsp+0x8]
   389d2:	test   rax,rax
   389d5:	je     389e4 <url_parse+0x3f4>
   389d7:	cmp    rax,rbp
   389da:	je     389e4 <url_parse+0x3f4>
   389dc:	mov    rdi,rax
   389df:	call   4bdc0 <rpl_free>
   389e4:	mov    rax,QWORD PTR [rsp+0x20]
   389e9:	xor    r13d,r13d
   389ec:	test   rax,rax
   389ef:	je     389f3 <url_parse+0x403>
   389f1:	mov    DWORD PTR [rax],ebx
   389f3:	mov    rax,QWORD PTR [rsp+0x88]
   389fb:	xor    rax,QWORD PTR fs:0x28
   38a04:	jne    39041 <url_parse+0xa51>
   38a0a:	add    rsp,0x98
   38a11:	mov    rax,r13
   38a14:	pop    rbx
   38a15:	pop    rbp
   38a16:	pop    r12
   38a18:	pop    r13
   38a1a:	pop    r14
   38a1c:	pop    r15
   38a1e:	ret    
   38a1f:	nop
   38a20:	mov    rsi,QWORD PTR [r15+0x10]
   38a24:	mov    rdi,r15
   38a27:	lea    rdx,[rsp+0x80]
   38a2f:	mov    QWORD PTR [rsp+0x80],0x0
   38a3b:	test   rsi,rsi
   38a3e:	cmove  rsi,rbp
   38a42:	call   3fe10 <remote_to_utf8>
   38a47:	mov    BYTE PTR [r15+0x18],al
   38a4b:	test   al,al
   38a4d:	je     38648 <url_parse+0x58>
   38a53:	mov    rdi,QWORD PTR [r15+0x10]
   38a57:	call   4bdc0 <rpl_free>
   38a5c:	mov    QWORD PTR [r15+0x10],0x0
   38a64:	mov    rdi,rbp
   38a67:	call   4ba50 <xstrdup>
   38a6c:	mov    rdi,QWORD PTR [rsp+0x80]
   38a74:	mov    QWORD PTR [r15+0x10],rax
   38a78:	call   36f30 <reencode_escapes>
   38a7d:	mov    rdi,QWORD PTR [rsp+0x80]
   38a85:	mov    QWORD PTR [rsp+0x8],rax
   38a8a:	cmp    rdi,rax
   38a8d:	je     38656 <url_parse+0x66>
   38a93:	call   4bdc0 <rpl_free>
   38a98:	jmp    38656 <url_parse+0x66>
   38a9d:	nop    DWORD PTR [rax]
   38aa0:	movzx  esi,BYTE PTR [rdx+0x1]
   38aa4:	cmp    sil,0x2f
   38aa8:	je     38b48 <url_parse+0x558>
   38aae:	test   sil,sil
   38ab1:	je     38b48 <url_parse+0x558>
   38ab7:	cmp    sil,0x2e
   38abb:	jne    388dc <url_parse+0x2ec>
   38ac1:	movzx  esi,BYTE PTR [rdx+0x2]
   38ac5:	cmp    sil,0x2f
   38ac9:	je     38ad4 <url_parse+0x4e4>
   38acb:	test   sil,sil
   38ace:	jne    388dc <url_parse+0x2ec>
   38ad4:	cmp    r12,rdi
   38ad7:	ja     38fa0 <url_parse+0x9b0>
   38add:	cmp    ebx,0x1
   38ae0:	jbe    38ffe <url_parse+0xa0e>
   38ae6:	add    rdx,0x3
   38aea:	jmp    38924 <url_parse+0x334>
   38aef:	nop
   38af0:	mov    rax,rdx
   38af3:	nop    DWORD PTR [rax+rax*1+0x0]
   38af8:	cmp    r12,rax
   38afb:	setne  bl
   38afe:	mov    rdx,rax
   38b01:	jmp    3892f <url_parse+0x33f>
   38b06:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38b10:	cmp    rax,rdx
   38b13:	ja     38b29 <url_parse+0x539>
   38b15:	jmp    38b58 <url_parse+0x568>
   38b17:	nop    WORD PTR [rax+rax*1+0x0]
   38b20:	add    r12,0x1
   38b24:	cmp    rax,r12
   38b27:	je     38b58 <url_parse+0x568>
   38b29:	cmp    BYTE PTR [r12],0x2f
   38b2e:	jne    38b20 <url_parse+0x530>
   38b30:	cmp    rax,r12
   38b33:	jbe    38b58 <url_parse+0x568>
   38b35:	lea    rdx,[r12+0x1]
   38b3a:	mov    r12,rdx
   38b3d:	jmp    38924 <url_parse+0x334>
   38b42:	nop    WORD PTR [rax+rax*1+0x0]
   38b48:	add    rdx,0x2
   38b4c:	jmp    38924 <url_parse+0x334>
   38b51:	nop    DWORD PTR [rax+0x0]
   38b58:	xor    ebx,ebx
   38b5a:	mov    r12,QWORD PTR [r13+0x20]
   38b5e:	mov    esi,0x2f
   38b63:	mov    rdi,r12
   38b66:	call   c460 <strrchr@plt>
   38b6b:	mov    r14,rax
   38b6e:	test   rax,rax
   38b71:	je     38f40 <url_parse+0x950>
   38b77:	mov    rsi,rax
   38b7a:	mov    rdi,r12
   38b7d:	call   3b8a0 <strdupdelim>
   38b82:	lea    rdi,[r14+0x1]
   38b86:	mov    QWORD PTR [r13+0x40],rax
   38b8a:	call   4ba50 <xstrdup>
   38b8f:	mov    QWORD PTR [r13+0x48],rax
   38b93:	mov    rdi,QWORD PTR [r13+0x40]
   38b97:	xor    esi,esi
   38b99:	xor    r14d,r14d
   38b9c:	call   36a20 <url_unescape_1>
   38ba1:	mov    rdi,QWORD PTR [r13+0x48]
   38ba5:	xor    esi,esi
   38ba7:	call   36a20 <url_unescape_1>
   38bac:	mov    r12,QWORD PTR [r13+0x10]
   38bb0:	movzx  eax,BYTE PTR [r12]
   38bb5:	test   al,al
   38bb7:	je     38bea <url_parse+0x5fa>
   38bb9:	nop    DWORD PTR [rax+0x0]
   38bc0:	movsx  edx,al
   38bc3:	sub    edx,0x41
   38bc6:	cmp    edx,0x19
   38bc9:	ja     38bd8 <url_parse+0x5e8>
   38bcb:	add    eax,0x20
   38bce:	mov    r14d,0x1
   38bd4:	mov    BYTE PTR [r12],al
   38bd8:	movzx  eax,BYTE PTR [r12+0x1]
   38bde:	add    r12,0x1
   38be2:	test   al,al
   38be4:	jne    38bc0 <url_parse+0x5d0>
   38be6:	mov    r12,QWORD PTR [r13+0x10]
   38bea:	mov    esi,0x25
   38bef:	mov    rdi,r12
   38bf2:	call   c6c0 <strchr@plt>
   38bf7:	test   rax,rax
   38bfa:	je     38c50 <url_parse+0x660>
   38bfc:	xor    esi,esi
   38bfe:	mov    rdi,r12
   38c01:	call   36a20 <url_unescape_1>
   38c06:	mov    rsi,QWORD PTR [r13+0x10]
   38c0a:	movzx  eax,BYTE PTR [rsi]
   38c0d:	test   al,al
   38c0f:	je     38c30 <url_parse+0x640>
   38c11:	mov    rdx,rsi
   38c14:	cmp    al,0x1f
   38c16:	jg     38e80 <url_parse+0x890>
   38c1c:	test   al,al
   38c1e:	jg     38e88 <url_parse+0x898>
   38c24:	movzx  eax,BYTE PTR [rdx+0x1]
   38c28:	add    rdx,0x1
   38c2c:	test   al,al
   38c2e:	jne    38c14 <url_parse+0x624>
   38c30:	test   r15,r15
   38c33:	setne  r14b
   38c37:	and    r14b,BYTE PTR [rip+0x51788]        # 8a3c6 <opt+0x346>
   38c3e:	jne    39008 <url_parse+0xa18>
   38c44:	mov    r14d,0x1
   38c4a:	nop    WORD PTR [rax+rax*1+0x0]
   38c50:	mov    rax,QWORD PTR [rsp+0x40]
   38c55:	test   rax,rax
   38c58:	je     38c6b <url_parse+0x67b>
   38c5a:	mov    rsi,QWORD PTR [rsp+0x60]
   38c5f:	mov    rdi,rax
   38c62:	call   3b8a0 <strdupdelim>
   38c67:	mov    QWORD PTR [r13+0x28],rax
   38c6b:	mov    rax,QWORD PTR [rsp+0x48]
   38c70:	test   rax,rax
   38c73:	je     38c86 <url_parse+0x696>
   38c75:	mov    rsi,QWORD PTR [rsp+0x68]
   38c7a:	mov    rdi,rax
   38c7d:	call   3b8a0 <strdupdelim>
   38c82:	mov    QWORD PTR [r13+0x30],rax
   38c86:	mov    rax,QWORD PTR [rsp+0x50]
   38c8b:	test   rax,rax
   38c8e:	je     38ca1 <url_parse+0x6b1>
   38c90:	mov    rsi,QWORD PTR [rsp+0x70]
   38c95:	mov    rdi,rax
   38c98:	call   3b8a0 <strdupdelim>
   38c9d:	mov    QWORD PTR [r13+0x38],rax
   38ca1:	cmp    BYTE PTR [rip+0x5171e],0x0        # 8a3c6 <opt+0x346>
   38ca8:	jne    38cb9 <url_parse+0x6c9>
   38caa:	test   bl,bl
   38cac:	jne    38cb9 <url_parse+0x6c9>
   38cae:	cmp    QWORD PTR [r13+0x38],0x0
   38cb3:	je     38fd0 <url_parse+0x9e0>
   38cb9:	mov    rdi,r13
   38cbc:	xor    esi,esi
   38cbe:	call   38230 <url_string>
   38cc3:	mov    rdi,QWORD PTR [rsp+0x8]
   38cc8:	mov    QWORD PTR [r13+0x0],rax
   38ccc:	cmp    rdi,rbp
   38ccf:	je     389f3 <url_parse+0x403>
   38cd5:	call   4bdc0 <rpl_free>
   38cda:	jmp    389f3 <url_parse+0x403>
   38cdf:	nop
   38ce0:	mov    rdi,rbp
   38ce3:	call   36f30 <reencode_escapes>
   38ce8:	mov    QWORD PTR [rsp+0x8],rax
   38ced:	jmp    38656 <url_parse+0x66>
   38cf2:	nop    WORD PTR [rax+rax*1+0x0]
   38cf8:	lea    rdi,[rdx+0x1]
   38cfc:	lea    rsi,[rip+0x484b6]        # 811b9 <seps.8661+0x1>
   38d03:	mov    QWORD PTR [rsp+0x28],rdi
   38d08:	call   c0a0 <strpbrk@plt>
   38d0d:	mov    rdi,QWORD PTR [rsp+0x28]
   38d12:	test   rax,rax
   38d15:	mov    rdx,rax
   38d18:	je     38f78 <url_parse+0x988>
   38d1e:	cmp    rdi,rdx
   38d21:	je     38d60 <url_parse+0x770>
   38d23:	mov    DWORD PTR [rsp+0x34],0x0
   38d2b:	jae    38d60 <url_parse+0x770>
   38d2d:	xor    ecx,ecx
   38d2f:	movsx  eax,BYTE PTR [rdi]
   38d32:	sub    eax,0x30
   38d35:	cmp    eax,0x9
   38d38:	ja     38f00 <url_parse+0x910>
   38d3e:	lea    ecx,[rcx+rcx*4]
   38d41:	lea    ecx,[rax+rcx*2]
   38d44:	cmp    ecx,0xffff
   38d4a:	jg     38f00 <url_parse+0x910>
   38d50:	add    rdi,0x1
   38d54:	cmp    rdi,rdx
   38d57:	jne    38d2f <url_parse+0x73f>
   38d59:	mov    DWORD PTR [rsp+0x34],ecx
   38d5d:	nop    DWORD PTR [rax]
   38d60:	movzx  eax,BYTE PTR [rdx]
   38d63:	jmp    3872d <url_parse+0x13d>
   38d68:	nop    DWORD PTR [rax+rax*1+0x0]
   38d70:	mov    rdi,r14
   38d73:	call   c310 <strlen@plt>
   38d78:	mov    QWORD PTR [rsp+0x10],r14
   38d7d:	lea    rdx,[r14+rax*1]
   38d81:	mov    QWORD PTR [rsp+0x18],rdx
   38d86:	jmp    38705 <url_parse+0x115>
   38d8b:	nop    DWORD PTR [rax+rax*1+0x0]
   38d90:	lea    rax,[rdx+0x1]
   38d94:	lea    rsi,[r8-0x1]
   38d98:	mov    QWORD PTR [rsp+0x48],r8
   38d9d:	mov    rdi,rax
   38da0:	mov    QWORD PTR [rsp+0x40],rax
   38da5:	call   c0a0 <strpbrk@plt>
   38daa:	mov    r8,QWORD PTR [rsp+0x48]
   38daf:	test   rax,rax
   38db2:	mov    QWORD PTR [rsp+0x60],rax
   38db7:	mov    rdx,rax
   38dba:	jne    3877f <url_parse+0x18f>
   38dc0:	mov    rbx,QWORD PTR [rsp+0x40]
   38dc5:	mov    rdi,rbx
   38dc8:	call   c310 <strlen@plt>
   38dcd:	mov    r8,QWORD PTR [rsp+0x48]
   38dd2:	lea    rdx,[rbx+rax*1]
   38dd6:	mov    QWORD PTR [rsp+0x60],rdx
   38ddb:	jmp    3877f <url_parse+0x18f>
   38de0:	lea    rax,[rdx+0x1]
   38de4:	mov    rsi,r8
   38de7:	mov    rdi,rax
   38dea:	mov    QWORD PTR [rsp+0x50],rax
   38def:	call   c0a0 <strpbrk@plt>
   38df4:	mov    QWORD PTR [rsp+0x70],rax
   38df9:	test   rax,rax
   38dfc:	jne    387c5 <url_parse+0x1d5>
   38e02:	mov    rbx,QWORD PTR [rsp+0x50]
   38e07:	mov    rdi,rbx
   38e0a:	call   c310 <strlen@plt>
   38e0f:	add    rax,rbx
   38e12:	mov    QWORD PTR [rsp+0x70],rax
   38e17:	jmp    387c5 <url_parse+0x1d5>
   38e1c:	nop    DWORD PTR [rax+0x0]
   38e20:	lea    rdi,[rdx+0x1]
   38e24:	mov    rsi,r8
   38e27:	mov    QWORD PTR [rsp+0x50],r8
   38e2c:	mov    QWORD PTR [rsp+0x48],rdi
   38e31:	call   c0a0 <strpbrk@plt>
   38e36:	mov    r8,QWORD PTR [rsp+0x50]
   38e3b:	test   rax,rax
   38e3e:	mov    QWORD PTR [rsp+0x68],rax
   38e43:	mov    rdx,rax
   38e46:	jne    387a0 <url_parse+0x1b0>
   38e4c:	mov    rbx,QWORD PTR [rsp+0x48]
   38e51:	mov    rdi,rbx
   38e54:	call   c310 <strlen@plt>
   38e59:	mov    r8,QWORD PTR [rsp+0x50]
   38e5e:	lea    rdx,[rbx+rax*1]
   38e62:	mov    QWORD PTR [rsp+0x68],rdx
   38e67:	jmp    387a0 <url_parse+0x1b0>
   38e6c:	nop    DWORD PTR [rax+0x0]
   38e70:	mov    ebx,0x8
   38e75:	jmp    389cd <url_parse+0x3dd>
   38e7a:	nop    WORD PTR [rax+rax*1+0x0]
   38e80:	cmp    al,0x7f
   38e82:	jne    38c24 <url_parse+0x634>
   38e88:	mov    rdi,r13
   38e8b:	call   36960 <url_free.part.0>
   38e90:	jmp    389c8 <url_parse+0x3d8>
   38e95:	nop    DWORD PTR [rax]
   38e98:	mov    r14,r12
   38e9b:	jmp    3869e <url_parse+0xae>
   38ea0:	lea    rax,[rdx+0x1]
   38ea4:	lea    rsi,[rip+0x4830f]        # 811ba <seps.8661+0x2>
   38eab:	mov    rdi,rax
   38eae:	mov    QWORD PTR [rsp+0x28],rax
   38eb3:	call   c0a0 <strpbrk@plt>
   38eb8:	mov    QWORD PTR [rsp+0x38],rax
   38ebd:	mov    rdx,rax
   38ec0:	test   rax,rax
   38ec3:	jne    38747 <url_parse+0x157>
   38ec9:	mov    rdi,QWORD PTR [rsp+0x28]
   38ece:	call   c310 <strlen@plt>
   38ed3:	mov    rsi,QWORD PTR [rsp+0x28]
   38ed8:	lea    rdx,[rsi+rax*1]
   38edc:	mov    QWORD PTR [rsp+0x38],rdx
   38ee1:	jmp    38747 <url_parse+0x157>
   38ee6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   38ef0:	xor    edx,edx
   38ef2:	xor    r12d,r12d
   38ef5:	jmp    38851 <url_parse+0x261>
   38efa:	nop    WORD PTR [rax+rax*1+0x0]
   38f00:	mov    ebx,0x4
   38f05:	jmp    389cd <url_parse+0x3dd>
   38f0a:	nop    WORD PTR [rax+rax*1+0x0]
   38f10:	mov    rdi,rbp
   38f13:	xor    ebx,ebx
   38f15:	call   371c0 <url_has_scheme>
   38f1a:	test   al,al
   38f1c:	sete   bl
   38f1f:	add    ebx,0x1
   38f22:	jmp    389e4 <url_parse+0x3f4>
   38f27:	nop    WORD PTR [rax+rax*1+0x0]
   38f30:	mov    ebx,0x5
   38f35:	jmp    389cd <url_parse+0x3dd>
   38f3a:	nop    WORD PTR [rax+rax*1+0x0]
   38f40:	lea    rdi,[rip+0x354d0]        # 6e417 <urlchr_table+0x877>
   38f47:	call   4ba50 <xstrdup>
   38f4c:	mov    rdi,r12
   38f4f:	mov    QWORD PTR [r13+0x40],rax
   38f53:	call   4ba50 <xstrdup>
   38f58:	mov    QWORD PTR [r13+0x48],rax
   38f5c:	jmp    38b93 <url_parse+0x5a3>
   38f61:	nop    DWORD PTR [rax+0x0]
   38f68:	mov    ebx,0x6
   38f6d:	jmp    389cd <url_parse+0x3dd>
   38f72:	nop    WORD PTR [rax+rax*1+0x0]
   38f78:	call   c310 <strlen@plt>
   38f7d:	mov    rdi,QWORD PTR [rsp+0x28]
   38f82:	lea    rdx,[rdi+rax*1]
   38f86:	jmp    38d1e <url_parse+0x72e>
   38f8b:	nop    DWORD PTR [rax+rax*1+0x0]
   38f90:	xor    ebx,ebx
   38f92:	jmp    38b5e <url_parse+0x56e>
   38f97:	nop    WORD PTR [rax+rax*1+0x0]
   38fa0:	sub    r12,0x1
   38fa4:	cmp    r12,rdi
   38fa7:	ja     38fbd <url_parse+0x9cd>
   38fa9:	jmp    38ae6 <url_parse+0x4f6>
   38fae:	xchg   ax,ax
   38fb0:	sub    r12,0x1
   38fb4:	cmp    r12,rdi
   38fb7:	je     38ae6 <url_parse+0x4f6>
   38fbd:	cmp    BYTE PTR [r12-0x1],0x2f
   38fc3:	jne    38fb0 <url_parse+0x9c0>
   38fc5:	jmp    38ae6 <url_parse+0x4f6>
   38fca:	nop    WORD PTR [rax+rax*1+0x0]
   38fd0:	mov    rbx,QWORD PTR [rsp+0x38]
   38fd5:	cmp    QWORD PTR [rsp+0x28],rbx
   38fda:	je     38cb9 <url_parse+0x6c9>
   38fe0:	test   r14b,r14b
   38fe3:	jne    38cb9 <url_parse+0x6c9>
   38fe9:	cmp    QWORD PTR [rsp+0x8],rbp
   38fee:	je     3902e <url_parse+0xa3e>
   38ff0:	mov    rax,QWORD PTR [rsp+0x8]
   38ff5:	mov    QWORD PTR [r13+0x0],rax
   38ff9:	jmp    389f3 <url_parse+0x403>
   38ffe:	lea    rdi,[r12+0x3]
   39003:	jmp    388dc <url_parse+0x2ec>
   39008:	mov    rdi,r15
   3900b:	call   3fee0 <idn_encode>
   39010:	mov    r12,rax
   39013:	test   rax,rax
   39016:	je     38c44 <url_parse+0x654>
   3901c:	mov    rdi,QWORD PTR [r13+0x10]
   39020:	call   4bdc0 <rpl_free>
   39025:	mov    QWORD PTR [r13+0x10],r12
   39029:	jmp    38c50 <url_parse+0x660>
   3902e:	mov    rdi,QWORD PTR [rsp+0x8]
   39033:	call   4ba50 <xstrdup>
   39038:	mov    QWORD PTR [r13+0x0],rax
   3903c:	jmp    389f3 <url_parse+0x403>
   39041:	call   c7b0 <__stack_chk_fail@plt>
   39046:	cmp    rdx,r12
   39049:	mov    rax,rdx
   3904c:	setne  bl
   3904f:	jmp    38afe <url_parse+0x50e>
   39054:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3905f:	nop

0000000000039060 <sync_path>:
   39060:	push   r15
   39062:	push   r14
   39064:	push   r13
   39066:	push   r12
   39068:	push   rbp
   39069:	push   rbx
   3906a:	mov    rbx,rdi
   3906d:	sub    rsp,0x8
   39071:	mov    rdi,QWORD PTR [rdi+0x20]
   39075:	call   4bdc0 <rpl_free>
   3907a:	mov    r12,QWORD PTR [rbx+0x40]
   3907e:	mov    edx,0x1
   39083:	mov    QWORD PTR [rbx+0x20],0x0
   3908b:	mov    esi,0x3
   39090:	mov    rdi,r12
   39093:	call   36890 <url_escape_1>
   39098:	mov    rbp,rax
   3909b:	cmp    r12,rax
   3909e:	je     390eb <sync_path+0x8b>
   390a0:	movzx  edx,BYTE PTR [rax]
   390a3:	mov    rcx,rax
   390a6:	test   dl,dl
   390a8:	jne    390c5 <sync_path+0x65>
   390aa:	jmp    390e8 <sync_path+0x88>
   390ac:	nop    DWORD PTR [rax+0x0]
   390b0:	mov    BYTE PTR [rcx],dl
   390b2:	movzx  edx,BYTE PTR [rax+0x1]
   390b6:	lea    rsi,[rax+0x1]
   390ba:	add    rcx,0x1
   390be:	test   dl,dl
   390c0:	je     390e8 <sync_path+0x88>
   390c2:	mov    rax,rsi
   390c5:	cmp    dl,0x25
   390c8:	jne    390b0 <sync_path+0x50>
   390ca:	cmp    BYTE PTR [rax+0x1],0x32
   390ce:	jne    390b0 <sync_path+0x50>
   390d0:	cmp    BYTE PTR [rax+0x2],0x46
   390d4:	jne    390b0 <sync_path+0x50>
   390d6:	add    rax,0x2
   390da:	mov    edx,0x2f
   390df:	jmp    390b0 <sync_path+0x50>
   390e1:	nop    DWORD PTR [rax+0x0]
   390e8:	mov    BYTE PTR [rcx],0x0
   390eb:	mov    rdi,QWORD PTR [rbx+0x48]
   390ef:	mov    edx,0x1
   390f4:	mov    esi,0x3
   390f9:	call   36890 <url_escape_1>
   390fe:	cmp    BYTE PTR [rbp+0x0],0x0
   39102:	mov    r12,rax
   39105:	jne    39160 <sync_path+0x100>
   39107:	mov    rdi,rax
   3910a:	call   4ba50 <xstrdup>
   3910f:	mov    r13,rax
   39112:	mov    QWORD PTR [rbx+0x20],r13
   39116:	cmp    QWORD PTR [rbx+0x40],rbp
   3911a:	je     39124 <sync_path+0xc4>
   3911c:	mov    rdi,rbp
   3911f:	call   4bdc0 <rpl_free>
   39124:	cmp    QWORD PTR [rbx+0x48],r12
   39128:	je     39132 <sync_path+0xd2>
   3912a:	mov    rdi,r12
   3912d:	call   4bdc0 <rpl_free>
   39132:	mov    rdi,QWORD PTR [rbx]
   39135:	call   4bdc0 <rpl_free>
   3913a:	mov    QWORD PTR [rbx],0x0
   39141:	mov    rdi,rbx
   39144:	xor    esi,esi
   39146:	call   38230 <url_string>
   3914b:	mov    QWORD PTR [rbx],rax
   3914e:	add    rsp,0x8
   39152:	pop    rbx
   39153:	pop    rbp
   39154:	pop    r12
   39156:	pop    r13
   39158:	pop    r14
   3915a:	pop    r15
   3915c:	ret    
   3915d:	nop    DWORD PTR [rax]
   39160:	mov    rdi,rbp
   39163:	call   c310 <strlen@plt>
   39168:	mov    rdi,r12
   3916b:	mov    r14,rax
   3916e:	call   c310 <strlen@plt>
   39173:	lea    edi,[r14+rax*1+0x2]
   39178:	mov    r15,rax
   3917b:	movsxd r14,r14d
   3917e:	movsxd rdi,edi
   39181:	movsxd r15,r15d
   39184:	call   4b850 <xmalloc>
   39189:	mov    rdx,r14
   3918c:	mov    rsi,rbp
   3918f:	mov    r13,rax
   39192:	mov    rdi,rax
   39195:	call   cb30 <memcpy@plt>
   3919a:	add    r14,r13
   3919d:	mov    rdx,r15
   391a0:	mov    rsi,r12
   391a3:	mov    BYTE PTR [r14],0x2f
   391a7:	lea    rdi,[r14+0x1]
   391ab:	call   cb30 <memcpy@plt>
   391b0:	mov    BYTE PTR [r14+r15*1+0x1],0x0
   391b6:	jmp    39112 <sync_path+0xb2>
   391bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000391c0 <url_set_dir>:
   391c0:	endbr64 
   391c4:	push   r12
   391c6:	mov    r12,rsi
   391c9:	push   rbp
   391ca:	mov    rbp,rdi
   391cd:	sub    rsp,0x8
   391d1:	mov    rdi,QWORD PTR [rdi+0x40]
   391d5:	call   4bdc0 <rpl_free>
   391da:	mov    QWORD PTR [rbp+0x40],0x0
   391e2:	mov    rdi,r12
   391e5:	call   4ba50 <xstrdup>
   391ea:	mov    rdi,rbp
   391ed:	mov    QWORD PTR [rbp+0x40],rax
   391f1:	add    rsp,0x8
   391f5:	pop    rbp
   391f6:	pop    r12
   391f8:	jmp    39060 <sync_path>
   391fd:	nop    DWORD PTR [rax]

0000000000039200 <url_set_file>:
   39200:	endbr64 
   39204:	push   r12
   39206:	mov    r12,rsi
   39209:	push   rbp
   3920a:	mov    rbp,rdi
   3920d:	sub    rsp,0x8
   39211:	mov    rdi,QWORD PTR [rdi+0x48]
   39215:	call   4bdc0 <rpl_free>
   3921a:	mov    QWORD PTR [rbp+0x48],0x0
   39222:	mov    rdi,r12
   39225:	call   4ba50 <xstrdup>
   3922a:	mov    rdi,rbp
   3922d:	mov    QWORD PTR [rbp+0x48],rax
   39231:	add    rsp,0x8
   39235:	pop    rbp
   39236:	pop    r12
   39238:	jmp    39060 <sync_path>
   3923d:	nop    DWORD PTR [rax]

0000000000039240 <schemes_are_similar_p>:
   39240:	endbr64 
   39244:	mov    eax,0x1
   39249:	cmp    edi,esi
   3924b:	je     39269 <schemes_are_similar_p+0x29>
   3924d:	test   edi,edi
   3924f:	sete   al
   39252:	cmp    esi,0x1
   39255:	sete   dl
   39258:	and    al,dl
   3925a:	jne    39269 <schemes_are_similar_p+0x29>
   3925c:	cmp    edi,0x1
   3925f:	sete   al
   39262:	test   esi,esi
   39264:	sete   dl
   39267:	and    eax,edx
   39269:	ret    
   3926a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000039270 <are_urls_equal>:
   39270:	endbr64 
   39274:	push   rbx
   39275:	mov    r11,rsi
   39278:	mov    rbx,rdi
   3927b:	sub    rsp,0x10
   3927f:	mov    rax,QWORD PTR fs:0x28
   39288:	mov    QWORD PTR [rsp+0x8],rax
   3928d:	xor    eax,eax
   3928f:	movzx  eax,BYTE PTR [rdi]
   39292:	test   al,al
   39294:	jne    392e8 <are_urls_equal+0x78>
   39296:	jmp    39350 <are_urls_equal+0xe0>
   3929b:	nop    DWORD PTR [rax+rax*1+0x0]
   392a0:	mov    BYTE PTR [rsp+0x6],al
   392a4:	mov    r10d,0x1
   392aa:	cmp    dl,0x25
   392ad:	je     39312 <are_urls_equal+0xa2>
   392af:	mov    BYTE PTR [rsp+0x7],dl
   392b3:	mov    eax,0x1
   392b8:	movsx  ecx,BYTE PTR [rsp+0x6]
   392bd:	lea    edi,[rcx-0x41]
   392c0:	lea    esi,[rcx+0x20]
   392c3:	cmp    edi,0x1a
   392c6:	lea    edi,[rdx-0x41]
   392c9:	cmovb  ecx,esi
   392cc:	lea    esi,[rdx+0x20]
   392cf:	cmp    edi,0x1a
   392d2:	cmovb  edx,esi
   392d5:	cmp    edx,ecx
   392d7:	jne    39330 <are_urls_equal+0xc0>
   392d9:	cdqe   
   392db:	add    rbx,r10
   392de:	add    r11,rax
   392e1:	movzx  eax,BYTE PTR [rbx]
   392e4:	test   al,al
   392e6:	je     39350 <are_urls_equal+0xe0>
   392e8:	movsx  edx,BYTE PTR [r11]
   392ec:	test   dl,dl
   392ee:	je     39360 <are_urls_equal+0xf0>
   392f0:	cmp    al,0x25
   392f2:	jne    392a0 <are_urls_equal+0x30>
   392f4:	lea    rsi,[rsp+0x6]
   392f9:	mov    rdi,rbx
   392fc:	call   36ea0 <getchar_from_escaped_string.part.0>
   39301:	movsxd r10,eax
   39304:	test   r10d,r10d
   39307:	je     39330 <are_urls_equal+0xc0>
   39309:	movsx  edx,BYTE PTR [r11]
   3930d:	cmp    dl,0x25
   39310:	jne    392af <are_urls_equal+0x3f>
   39312:	lea    rsi,[rsp+0x7]
   39317:	mov    rdi,r11
   3931a:	call   36ea0 <getchar_from_escaped_string.part.0>
   3931f:	test   eax,eax
   39321:	je     39330 <are_urls_equal+0xc0>
   39323:	movsx  edx,BYTE PTR [rsp+0x7]
   39328:	jmp    392b8 <are_urls_equal+0x48>
   3932a:	nop    WORD PTR [rax+rax*1+0x0]
   39330:	cmp    BYTE PTR [rbx],0x0
   39333:	je     39350 <are_urls_equal+0xe0>
   39335:	xor    eax,eax
   39337:	mov    rbx,QWORD PTR [rsp+0x8]
   3933c:	xor    rbx,QWORD PTR fs:0x28
   39345:	jne    39367 <are_urls_equal+0xf7>
   39347:	add    rsp,0x10
   3934b:	pop    rbx
   3934c:	ret    
   3934d:	nop    DWORD PTR [rax]
   39350:	cmp    BYTE PTR [r11],0x0
   39354:	jne    39335 <are_urls_equal+0xc5>
   39356:	mov    eax,0x1
   3935b:	jmp    39337 <are_urls_equal+0xc7>
   3935d:	nop    DWORD PTR [rax]
   39360:	cmp    BYTE PTR [rbx],0x0
   39363:	jne    39335 <are_urls_equal+0xc5>
   39365:	jmp    39356 <are_urls_equal+0xe6>
   39367:	call   c7b0 <__stack_chk_fail@plt>
   3936c:	nop    DWORD PTR [rax+0x0]

0000000000039370 <warc_hash_sha1_digest>:
   39370:	endbr64 
   39374:	mov    rax,QWORD PTR [rdi]
   39377:	ret    
   39378:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000039380 <warc_cmp_sha1_digest>:
   39380:	endbr64 
   39384:	mov    rax,QWORD PTR [rdi]
   39387:	mov    rdx,QWORD PTR [rdi+0x8]
   3938b:	xor    rax,QWORD PTR [rsi]
   3938e:	xor    rdx,QWORD PTR [rsi+0x8]
   39392:	or     rdx,rax
   39395:	jne    3939f <warc_cmp_sha1_digest+0x1f>
   39397:	mov    eax,DWORD PTR [rsi+0x10]
   3939a:	cmp    DWORD PTR [rdi+0x10],eax
   3939d:	je     393b0 <warc_cmp_sha1_digest+0x30>
   3939f:	mov    eax,0x1
   393a4:	xor    eax,0x1
   393a7:	ret    
   393a8:	nop    DWORD PTR [rax+rax*1+0x0]
   393b0:	xor    eax,eax
   393b2:	xor    eax,0x1
   393b5:	ret    
   393b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000393c0 <warc_write_end_record>:
   393c0:	sub    rsp,0x8
   393c4:	mov    rcx,QWORD PTR [rip+0x508f5]        # 89cc0 <warc_current_file>
   393cb:	mov    edx,0x4
   393d0:	mov    esi,0x1
   393d5:	lea    rdi,[rip+0x348c4]        # 6dca0 <urlchr_table+0x100>
   393dc:	call   ca10 <fwrite@plt>
   393e1:	mov    r8,rax
   393e4:	movzx  eax,BYTE PTR [rip+0x508cd]        # 89cb8 <warc_write_ok>
   393eb:	cmp    r8,0x4
   393ef:	je     393fa <warc_write_end_record+0x3a>
   393f1:	mov    BYTE PTR [rip+0x508c0],0x0        # 89cb8 <warc_write_ok>
   393f8:	xor    eax,eax
   393fa:	add    rsp,0x8
   393fe:	ret    
   393ff:	nop

0000000000039400 <warc_sha1_stream_with_payload>:
   39400:	push   r15
   39402:	push   r14
   39404:	push   r13
   39406:	push   r12
   39408:	push   rbp
   39409:	mov    rbp,rdi
   3940c:	mov    edi,0x8048
   39411:	push   rbx
   39412:	mov    rbx,rcx
   39415:	sub    rsp,0x188
   3941c:	mov    QWORD PTR [rsp+0x18],rsi
   39421:	mov    QWORD PTR [rsp+0x28],rdx
   39426:	mov    QWORD PTR [rsp+0x8],rcx
   3942b:	mov    rax,QWORD PTR fs:0x28
   39434:	mov    QWORD PTR [rsp+0x178],rax
   3943c:	xor    eax,eax
   3943e:	call   4b850 <xmalloc>
   39443:	lea    rdi,[rsp+0x30]
   39448:	mov    QWORD PTR [rsp+0x10],rdi
   3944d:	mov    r12,rax
   39450:	call   44bc0 <sha1_init_ctx>
   39455:	test   rbx,rbx
   39458:	js     3946a <warc_sha1_stream_with_payload+0x6a>
   3945a:	lea    r14,[rsp+0xd0]
   39462:	mov    rdi,r14
   39465:	call   44bc0 <sha1_init_ctx>
   3946a:	mov    rax,QWORD PTR [rsp+0x8]
   3946f:	xor    ebx,ebx
   39471:	not    rax
   39474:	shr    rax,0x3f
   39478:	mov    QWORD PTR [rsp+0x20],rax
   3947d:	xor    r13d,r13d
   39480:	jmp    394a1 <warc_sha1_stream_with_payload+0xa1>
   39482:	nop    WORD PTR [rax+rax*1+0x0]
   39488:	mov    rdi,rbp
   3948b:	test   rax,rax
   3948e:	je     39530 <warc_sha1_stream_with_payload+0x130>
   39494:	call   c8a0 <feof@plt>
   39499:	test   eax,eax
   3949b:	jne    39543 <warc_sha1_stream_with_payload+0x143>
   394a1:	mov    edx,0x8000
   394a6:	lea    rdi,[r12+r13*1]
   394aa:	mov    rcx,rbp
   394ad:	mov    r15,r13
   394b0:	sub    rdx,r13
   394b3:	mov    esi,0x1
   394b8:	mov    r14,rbx
   394bb:	call   c700 <fread@plt>
   394c0:	add    r13,rax
   394c3:	add    rbx,rax
   394c6:	cmp    r13,0x8000
   394cd:	jne    39488 <warc_sha1_stream_with_payload+0x88>
   394cf:	mov    rdx,QWORD PTR [rsp+0x10]
   394d4:	mov    esi,0x8000
   394d9:	mov    rdi,r12
   394dc:	call   44c30 <sha1_process_block>
   394e1:	cmp    BYTE PTR [rsp+0x20],0x0
   394e6:	je     3947d <warc_sha1_stream_with_payload+0x7d>
   394e8:	mov    rcx,QWORD PTR [rsp+0x8]
   394ed:	cmp    rcx,rbx
   394f0:	jge    3947d <warc_sha1_stream_with_payload+0x7d>
   394f2:	lea    rax,[rbx-0x8000]
   394f9:	lea    r14,[rsp+0xd0]
   39501:	mov    rsi,r13
   39504:	sub    rcx,rax
   39507:	mov    rdx,r14
   3950a:	mov    rax,rcx
   3950d:	mov    ecx,0x0
   39512:	cmovs  rax,rcx
   39516:	sub    rsi,rax
   39519:	lea    rdi,[r12+rax*1]
   3951d:	call   46060 <sha1_process_bytes>
   39522:	jmp    3947d <warc_sha1_stream_with_payload+0x7d>
   39527:	nop    WORD PTR [rax+rax*1+0x0]
   39530:	call   c330 <ferror@plt>
   39535:	mov    r15,r13
   39538:	mov    r14,rbx
   3953b:	test   eax,eax
   3953d:	jne    39620 <warc_sha1_stream_with_payload+0x220>
   39543:	test   r13,r13
   39546:	jg     395a0 <warc_sha1_stream_with_payload+0x1a0>
   39548:	mov    rsi,QWORD PTR [rsp+0x18]
   3954d:	mov    rdi,QWORD PTR [rsp+0x10]
   39552:	call   45f30 <sha1_finish_ctx>
   39557:	cmp    QWORD PTR [rsp+0x8],0x0
   3955d:	jns    39600 <warc_sha1_stream_with_payload+0x200>
   39563:	mov    rdi,r12
   39566:	call   4bdc0 <rpl_free>
   3956b:	xor    eax,eax
   3956d:	mov    rcx,QWORD PTR [rsp+0x178]
   39575:	xor    rcx,QWORD PTR fs:0x28
   3957e:	jne    39632 <warc_sha1_stream_with_payload+0x232>
   39584:	add    rsp,0x188
   3958b:	pop    rbx
   3958c:	pop    rbp
   3958d:	pop    r12
   3958f:	pop    r13
   39591:	pop    r14
   39593:	pop    r15
   39595:	ret    
   39596:	nop    WORD PTR cs:[rax+rax*1+0x0]
   395a0:	mov    rbp,QWORD PTR [rsp+0x10]
   395a5:	mov    rsi,r13
   395a8:	mov    rdi,r12
   395ab:	mov    rdx,rbp
   395ae:	call   46060 <sha1_process_bytes>
   395b3:	mov    rax,QWORD PTR [rsp+0x8]
   395b8:	test   rax,rax
   395bb:	js     39548 <warc_sha1_stream_with_payload+0x148>
   395bd:	cmp    rax,rbx
   395c0:	jge    39548 <warc_sha1_stream_with_payload+0x148>
   395c2:	sub    r14,r15
   395c5:	mov    rsi,r13
   395c8:	sub    rax,r14
   395cb:	lea    r14,[rsp+0xd0]
   395d3:	mov    rcx,rax
   395d6:	mov    eax,0x0
   395db:	mov    rdx,r14
   395de:	cmovns rax,rcx
   395e2:	sub    rsi,rax
   395e5:	lea    rdi,[r12+rax*1]
   395e9:	call   46060 <sha1_process_bytes>
   395ee:	mov    rsi,QWORD PTR [rsp+0x18]
   395f3:	mov    rdi,rbp
   395f6:	call   45f30 <sha1_finish_ctx>
   395fb:	jmp    39608 <warc_sha1_stream_with_payload+0x208>
   395fd:	nop    DWORD PTR [rax]
   39600:	lea    r14,[rsp+0xd0]
   39608:	mov    rsi,QWORD PTR [rsp+0x28]
   3960d:	mov    rdi,r14
   39610:	call   45f30 <sha1_finish_ctx>
   39615:	jmp    39563 <warc_sha1_stream_with_payload+0x163>
   3961a:	nop    WORD PTR [rax+rax*1+0x0]
   39620:	mov    rdi,r12
   39623:	call   4bdc0 <rpl_free>
   39628:	mov    eax,0x1
   3962d:	jmp    3956d <warc_sha1_stream_with_payload+0x16d>
   39632:	call   c7b0 <__stack_chk_fail@plt>
   39637:	nop    WORD PTR [rax+rax*1+0x0]

0000000000039640 <warc_write_string.part.0>:
   39640:	push   rbp
   39641:	mov    rbp,rdi
   39644:	push   rbx
   39645:	sub    rsp,0x8
   39649:	call   c310 <strlen@plt>
   3964e:	mov    rcx,QWORD PTR [rip+0x5066b]        # 89cc0 <warc_current_file>
   39655:	mov    esi,0x1
   3965a:	mov    rdi,rbp
   3965d:	mov    rdx,rax
   39660:	mov    rbx,rax
   39663:	call   ca10 <fwrite@plt>
   39668:	cmp    rbx,rax
   3966b:	je     39680 <warc_write_string.part.0+0x40>
   3966d:	mov    BYTE PTR [rip+0x50644],0x0        # 89cb8 <warc_write_ok>
   39674:	add    rsp,0x8
   39678:	xor    eax,eax
   3967a:	pop    rbx
   3967b:	pop    rbp
   3967c:	ret    
   3967d:	nop    DWORD PTR [rax]
   39680:	movzx  eax,BYTE PTR [rip+0x50631]        # 89cb8 <warc_write_ok>
   39687:	add    rsp,0x8
   3968b:	pop    rbx
   3968c:	pop    rbp
   3968d:	ret    
   3968e:	xchg   ax,ax

0000000000039690 <warc_write_header>:
   39690:	movzx  eax,BYTE PTR [rip+0x50621]        # 89cb8 <warc_write_ok>
   39697:	test   rsi,rsi
   3969a:	je     396a8 <warc_write_header+0x18>
   3969c:	test   al,al
   3969e:	jne    396b0 <warc_write_header+0x20>
   396a0:	xor    eax,eax
   396a2:	ret    
   396a3:	nop    DWORD PTR [rax+rax*1+0x0]
   396a8:	ret    
   396a9:	nop    DWORD PTR [rax+0x0]
   396b0:	push   rbp
   396b1:	mov    rbp,rsi
   396b4:	call   39640 <warc_write_string.part.0>
   396b9:	cmp    BYTE PTR [rip+0x505f8],0x0        # 89cb8 <warc_write_ok>
   396c0:	je     396ff <warc_write_header+0x6f>
   396c2:	lea    rdi,[rip+0x2f3d4]        # 68a9d <primes.6089+0x29bd>
   396c9:	call   39640 <warc_write_string.part.0>
   396ce:	cmp    BYTE PTR [rip+0x505e3],0x0        # 89cb8 <warc_write_ok>
   396d5:	je     396ff <warc_write_header+0x6f>
   396d7:	mov    rdi,rbp
   396da:	call   39640 <warc_write_string.part.0>
   396df:	movzx  eax,BYTE PTR [rip+0x505d2]        # 89cb8 <warc_write_ok>
   396e6:	test   al,al
   396e8:	je     396fd <warc_write_header+0x6d>
   396ea:	lea    rdi,[rip+0x34752]        # 6de43 <urlchr_table+0x2a3>
   396f1:	call   39640 <warc_write_string.part.0>
   396f6:	movzx  eax,BYTE PTR [rip+0x505bb]        # 89cb8 <warc_write_ok>
   396fd:	pop    rbp
   396fe:	ret    
   396ff:	xor    eax,eax
   39701:	pop    rbp
   39702:	ret    
   39703:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3970e:	xchg   ax,ax

0000000000039710 <warc_write_block_from_file>:
   39710:	push   r12
   39712:	push   rbp
   39713:	push   rbx
   39714:	sub    rsp,0x1000
   3971b:	or     QWORD PTR [rsp],0x0
   39720:	sub    rsp,0x1000
   39727:	or     QWORD PTR [rsp],0x0
   3972c:	sub    rsp,0x30
   39730:	mov    edx,0x2
   39735:	xor    esi,esi
   39737:	mov    rax,QWORD PTR fs:0x28
   39740:	mov    QWORD PTR [rsp+0x2028],rax
   39748:	xor    eax,eax
   3974a:	mov    r12,rdi
   3974d:	mov    rbp,rsp
   39750:	call   4be00 <rpl_fseeko>
   39755:	mov    rdi,r12
   39758:	call   c4f0 <ftello@plt>
   3975d:	mov    rdi,rbp
   39760:	mov    rsi,rax
   39763:	call   3d0c0 <number_to_string>
   39768:	mov    rsi,rbp
   3976b:	lea    rdi,[rip+0x2dd8c]        # 674fe <primes.6089+0x141e>
   39772:	call   39690 <warc_write_header>
   39777:	cmp    BYTE PTR [rip+0x5053a],0x0        # 89cb8 <warc_write_ok>
   3977e:	je     3978c <warc_write_block_from_file+0x7c>
   39780:	lea    rdi,[rip+0x346bc]        # 6de43 <urlchr_table+0x2a3>
   39787:	call   39640 <warc_write_string.part.0>
   3978c:	xor    edx,edx
   3978e:	xor    esi,esi
   39790:	mov    rdi,r12
   39793:	call   4be00 <rpl_fseeko>
   39798:	test   eax,eax
   3979a:	jne    39818 <warc_write_block_from_file+0x108>
   3979c:	movzx  eax,BYTE PTR [rip+0x50515]        # 89cb8 <warc_write_ok>
   397a3:	lea    rbp,[rsp+0x20]
   397a8:	jmp    397f0 <warc_write_block_from_file+0xe0>
   397aa:	nop    WORD PTR [rax+rax*1+0x0]
   397b0:	mov    rcx,r12
   397b3:	mov    edx,0x2000
   397b8:	mov    esi,0x1
   397bd:	mov    rdi,rbp
   397c0:	call   c700 <fread@plt>
   397c5:	mov    rbx,rax
   397c8:	test   rax,rax
   397cb:	je     39828 <warc_write_block_from_file+0x118>
   397cd:	mov    rcx,QWORD PTR [rip+0x504ec]        # 89cc0 <warc_current_file>
   397d4:	mov    rdx,rbx
   397d7:	mov    esi,0x1
   397dc:	mov    rdi,rbp
   397df:	call   ca10 <fwrite@plt>
   397e4:	cmp    rbx,rax
   397e7:	ja     39838 <warc_write_block_from_file+0x128>
   397e9:	movzx  eax,BYTE PTR [rip+0x504c8]        # 89cb8 <warc_write_ok>
   397f0:	test   al,al
   397f2:	jne    397b0 <warc_write_block_from_file+0xa0>
   397f4:	mov    rcx,QWORD PTR [rsp+0x2028]
   397fc:	xor    rcx,QWORD PTR fs:0x28
   39805:	jne    39843 <warc_write_block_from_file+0x133>
   39807:	add    rsp,0x2030
   3980e:	pop    rbx
   3980f:	pop    rbp
   39810:	pop    r12
   39812:	ret    
   39813:	nop    DWORD PTR [rax+rax*1+0x0]
   39818:	mov    BYTE PTR [rip+0x50499],0x0        # 89cb8 <warc_write_ok>
   3981f:	xor    eax,eax
   39821:	jmp    397a3 <warc_write_block_from_file+0x93>
   39823:	nop    DWORD PTR [rax+rax*1+0x0]
   39828:	movzx  eax,BYTE PTR [rip+0x50489]        # 89cb8 <warc_write_ok>
   3982f:	jmp    397f4 <warc_write_block_from_file+0xe4>
   39831:	nop    DWORD PTR [rax+0x0]
   39838:	mov    BYTE PTR [rip+0x50479],0x0        # 89cb8 <warc_write_ok>
   3983f:	xor    eax,eax
   39841:	jmp    397f4 <warc_write_block_from_file+0xe4>
   39843:	call   c7b0 <__stack_chk_fail@plt>
   39848:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000039850 <warc_write_ip_header.part.0>:
   39850:	sub    rsp,0x8
   39854:	call   1e490 <print_address>
   39859:	lea    rdi,[rip+0x34445]        # 6dca5 <urlchr_table+0x105>
   39860:	add    rsp,0x8
   39864:	mov    rsi,rax
   39867:	jmp    39690 <warc_write_header>
   3986c:	nop    DWORD PTR [rax+0x0]

0000000000039870 <warc_write_header_uri.constprop.0>:
   39870:	movzx  eax,BYTE PTR [rip+0x50441]        # 89cb8 <warc_write_ok>
   39877:	test   rdi,rdi
   3987a:	je     39888 <warc_write_header_uri.constprop.0+0x18>
   3987c:	test   al,al
   3987e:	jne    39890 <warc_write_header_uri.constprop.0+0x20>
   39880:	xor    eax,eax
   39882:	ret    
   39883:	nop    DWORD PTR [rax+rax*1+0x0]
   39888:	ret    
   39889:	nop    DWORD PTR [rax+0x0]
   39890:	push   rbp
   39891:	mov    rbp,rdi
   39894:	lea    rdi,[rip+0x3441a]        # 6dcb5 <urlchr_table+0x115>
   3989b:	call   39640 <warc_write_string.part.0>
   398a0:	cmp    BYTE PTR [rip+0x50411],0x0        # 89cb8 <warc_write_ok>
   398a7:	je     398e6 <warc_write_header_uri.constprop.0+0x76>
   398a9:	lea    rdi,[rip+0x34415]        # 6dcc5 <urlchr_table+0x125>
   398b0:	call   39640 <warc_write_string.part.0>
   398b5:	cmp    BYTE PTR [rip+0x503fc],0x0        # 89cb8 <warc_write_ok>
   398bc:	je     398e6 <warc_write_header_uri.constprop.0+0x76>
   398be:	mov    rdi,rbp
   398c1:	call   39640 <warc_write_string.part.0>
   398c6:	movzx  eax,BYTE PTR [rip+0x503eb]        # 89cb8 <warc_write_ok>
   398cd:	test   al,al
   398cf:	je     398e4 <warc_write_header_uri.constprop.0+0x74>
   398d1:	lea    rdi,[rip+0x343f1]        # 6dcc9 <urlchr_table+0x129>
   398d8:	call   39640 <warc_write_string.part.0>
   398dd:	movzx  eax,BYTE PTR [rip+0x503d4]        # 89cb8 <warc_write_ok>
   398e4:	pop    rbp
   398e5:	ret    
   398e6:	xor    eax,eax
   398e8:	pop    rbp
   398e9:	ret    
   398ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000000398f0 <warc_base32_sha1_digest.part.0.constprop.0>:
   398f0:	mov    DWORD PTR [rsi],0x31616873
   398f6:	lea    rdx,[rsi+0x5]
   398fa:	mov    ecx,0x21
   398ff:	mov    BYTE PTR [rsi+0x4],0x3a
   39903:	mov    esi,0x14
   39908:	jmp    42c90 <base32_encode>
   3990d:	nop    DWORD PTR [rax]

0000000000039910 <warc_write_digest_headers.part.0>:
   39910:	push   r13
   39912:	push   r12
   39914:	push   rbp
   39915:	mov    rbp,rdi
   39918:	push   rbx
   39919:	mov    rbx,rsi
   3991c:	sub    rsp,0x78
   39920:	mov    rax,QWORD PTR fs:0x28
   39929:	mov    QWORD PTR [rsp+0x68],rax
   3992e:	xor    eax,eax
   39930:	lea    r13,[rsp+0x20]
   39935:	mov    r12,rsp
   39938:	call   c560 <rewind@plt>
   3993d:	mov    rcx,rbx
   39940:	mov    rdx,r13
   39943:	mov    rsi,r12
   39946:	mov    rdi,rbp
   39949:	call   39400 <warc_sha1_stream_with_payload>
   3994e:	test   eax,eax
   39950:	je     39970 <warc_write_digest_headers.part.0+0x60>
   39952:	mov    rax,QWORD PTR [rsp+0x68]
   39957:	xor    rax,QWORD PTR fs:0x28
   39960:	jne    399b0 <warc_write_digest_headers.part.0+0xa0>
   39962:	add    rsp,0x78
   39966:	pop    rbx
   39967:	pop    rbp
   39968:	pop    r12
   3996a:	pop    r13
   3996c:	ret    
   3996d:	nop    DWORD PTR [rax]
   39970:	lea    rbp,[rsp+0x40]
   39975:	mov    rdi,r12
   39978:	mov    rsi,rbp
   3997b:	call   398f0 <warc_base32_sha1_digest.part.0.constprop.0>
   39980:	mov    rsi,rbp
   39983:	lea    rdi,[rip+0x34343]        # 6dccd <urlchr_table+0x12d>
   3998a:	call   39690 <warc_write_header>
   3998f:	test   rbx,rbx
   39992:	js     39952 <warc_write_digest_headers.part.0+0x42>
   39994:	mov    rsi,rbp
   39997:	mov    rdi,r13
   3999a:	call   398f0 <warc_base32_sha1_digest.part.0.constprop.0>
   3999f:	mov    rsi,rbp
   399a2:	lea    rdi,[rip+0x34336]        # 6dcdf <urlchr_table+0x13f>
   399a9:	call   39690 <warc_write_header>
   399ae:	jmp    39952 <warc_write_digest_headers.part.0+0x42>
   399b0:	call   c7b0 <__stack_chk_fail@plt>
   399b5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000399c0 <warc_timestamp>:
   399c0:	endbr64 
   399c4:	push   r12
   399c6:	mov    r12,rdi
   399c9:	xor    edi,edi
   399cb:	push   rbx
   399cc:	mov    rbx,rsi
   399cf:	sub    rsp,0x18
   399d3:	mov    rax,QWORD PTR fs:0x28
   399dc:	mov    QWORD PTR [rsp+0x8],rax
   399e1:	xor    eax,eax
   399e3:	call   cbf0 <time@plt>
   399e8:	mov    rdi,rsp
   399eb:	mov    QWORD PTR [rsp],rax
   399ef:	call   c180 <gmtime@plt>
   399f4:	lea    rdx,[rip+0x342f8]        # 6dcf3 <urlchr_table+0x153>
   399fb:	mov    rsi,rbx
   399fe:	mov    rdi,r12
   39a01:	mov    rcx,rax
   39a04:	call   cae0 <strftime@plt>
   39a09:	test   rbx,rbx
   39a0c:	je     39a13 <warc_timestamp+0x53>
   39a0e:	test   rax,rax
   39a11:	je     39a30 <warc_timestamp+0x70>
   39a13:	mov    rax,QWORD PTR [rsp+0x8]
   39a18:	xor    rax,QWORD PTR fs:0x28
   39a21:	jne    39a37 <warc_timestamp+0x77>
   39a23:	add    rsp,0x18
   39a27:	mov    rax,r12
   39a2a:	pop    rbx
   39a2b:	pop    r12
   39a2d:	ret    
   39a2e:	xchg   ax,ax
   39a30:	mov    BYTE PTR [r12],0x0
   39a35:	jmp    39a13 <warc_timestamp+0x53>
   39a37:	call   c7b0 <__stack_chk_fail@plt>
   39a3c:	nop    DWORD PTR [rax+0x0]

0000000000039a40 <warc_write_date_header>:
   39a40:	sub    rsp,0x28
   39a44:	mov    rsi,rdi
   39a47:	mov    rax,QWORD PTR fs:0x28
   39a50:	mov    QWORD PTR [rsp+0x18],rax
   39a55:	xor    eax,eax
   39a57:	test   rdi,rdi
   39a5a:	je     39a80 <warc_write_date_header+0x40>
   39a5c:	lea    rdi,[rip+0x342a3]        # 6dd06 <urlchr_table+0x166>
   39a63:	call   39690 <warc_write_header>
   39a68:	mov    rdx,QWORD PTR [rsp+0x18]
   39a6d:	xor    rdx,QWORD PTR fs:0x28
   39a76:	jne    39a92 <warc_write_date_header+0x52>
   39a78:	add    rsp,0x28
   39a7c:	ret    
   39a7d:	nop    DWORD PTR [rax]
   39a80:	mov    esi,0x15
   39a85:	mov    rdi,rsp
   39a88:	call   399c0 <warc_timestamp>
   39a8d:	mov    rsi,rax
   39a90:	jmp    39a5c <warc_write_date_header+0x1c>
   39a92:	call   c7b0 <__stack_chk_fail@plt>
   39a97:	nop    WORD PTR [rax+rax*1+0x0]

0000000000039aa0 <warc_uuid_str>:
   39aa0:	endbr64 
   39aa4:	push   r13
   39aa6:	mov    r13,rsi
   39aa9:	push   r12
   39aab:	mov    r12,rdi
   39aae:	push   rbp
   39aaf:	push   rbx
   39ab0:	sub    rsp,0x28
   39ab4:	mov    rax,QWORD PTR fs:0x28
   39abd:	mov    QWORD PTR [rsp+0x18],rax
   39ac2:	xor    eax,eax
   39ac4:	mov    rbx,rsp
   39ac7:	lea    rbp,[rsp+0x10]
   39acc:	nop    DWORD PTR [rax+0x0]
   39ad0:	mov    edi,0xff
   39ad5:	add    rbx,0x1
   39ad9:	call   3e9d0 <random_number>
   39ade:	mov    BYTE PTR [rbx-0x1],al
   39ae1:	cmp    rbx,rbp
   39ae4:	jne    39ad0 <warc_uuid_str+0x30>
   39ae6:	sub    rsp,0x8
   39aea:	mov    edx,0x1
   39aef:	mov    rsi,r13
   39af2:	mov    rdi,r12
   39af5:	movzx  eax,BYTE PTR [rsp+0x17]
   39afa:	lea    r8,[rip+0x3441f]        # 6df20 <urlchr_table+0x380>
   39b01:	mov    rcx,0xffffffffffffffff
   39b08:	push   rax
   39b09:	movzx  eax,BYTE PTR [rsp+0x1e]
   39b0e:	push   rax
   39b0f:	movzx  eax,BYTE PTR [rsp+0x25]
   39b14:	push   rax
   39b15:	movzx  eax,BYTE PTR [rsp+0x2c]
   39b1a:	push   rax
   39b1b:	movzx  eax,BYTE PTR [rsp+0x33]
   39b20:	push   rax
   39b21:	movzx  eax,BYTE PTR [rsp+0x3a]
   39b26:	push   rax
   39b27:	movzx  eax,BYTE PTR [rsp+0x41]
   39b2c:	push   rax
   39b2d:	movzx  eax,BYTE PTR [rsp+0x48]
   39b32:	and    eax,0x3f
   39b35:	or     al,0x80
   39b37:	push   rax
   39b38:	movzx  eax,BYTE PTR [rsp+0x4f]
   39b3d:	push   rax
   39b3e:	movzx  eax,BYTE PTR [rsp+0x56]
   39b43:	and    eax,0xf
   39b46:	or     eax,0x40
   39b49:	push   rax
   39b4a:	movzx  eax,BYTE PTR [rsp+0x5d]
   39b4f:	push   rax
   39b50:	movzx  eax,BYTE PTR [rsp+0x64]
   39b55:	push   rax
   39b56:	movzx  eax,BYTE PTR [rsp+0x6b]
   39b5b:	push   rax
   39b5c:	movzx  eax,BYTE PTR [rsp+0x72]
   39b61:	push   rax
   39b62:	movzx  eax,BYTE PTR [rsp+0x79]
   39b67:	push   rax
   39b68:	xor    eax,eax
   39b6a:	movzx  r9d,BYTE PTR [rsp+0x80]
   39b73:	call   c9d0 <__snprintf_chk@plt>
   39b78:	sub    rsp,0xffffffffffffff80
   39b7c:	mov    rax,QWORD PTR [rsp+0x18]
   39b81:	xor    rax,QWORD PTR fs:0x28
   39b8a:	jne    39b97 <warc_uuid_str+0xf7>
   39b8c:	add    rsp,0x28
   39b90:	pop    rbx
   39b91:	pop    rbp
   39b92:	pop    r12
   39b94:	pop    r13
   39b96:	ret    
   39b97:	call   c7b0 <__stack_chk_fail@plt>
   39b9c:	nop    DWORD PTR [rax+0x0]

0000000000039ba0 <warc_tempfile>:
   39ba0:	endbr64 
   39ba4:	push   r12
   39ba6:	mov    r8d,0x1
   39bac:	mov    esi,0x64
   39bb1:	lea    rcx,[rip+0x2edd2]        # 6898a <primes.6089+0x28aa>
   39bb8:	push   rbp
   39bb9:	sub    rsp,0x78
   39bbd:	mov    rdx,QWORD PTR [rip+0x505cc]        # 8a190 <opt+0x110>
   39bc4:	mov    rax,QWORD PTR fs:0x28
   39bcd:	mov    QWORD PTR [rsp+0x68],rax
   39bd2:	xor    eax,eax
   39bd4:	mov    r12,rsp
   39bd7:	mov    rdi,r12
   39bda:	call   4b640 <path_search>
   39bdf:	cmp    eax,0xffffffff
   39be2:	je     39c40 <warc_tempfile+0xa0>
   39be4:	xor    esi,esi
   39be6:	mov    rdi,r12
   39be9:	call   c640 <mkostemp@plt>
   39bee:	mov    ebp,eax
   39bf0:	test   eax,eax
   39bf2:	js     39c40 <warc_tempfile+0xa0>
   39bf4:	mov    rdi,r12
   39bf7:	call   c120 <unlink@plt>
   39bfc:	test   eax,eax
   39bfe:	js     39c30 <warc_tempfile+0x90>
   39c00:	lea    rsi,[rip+0x34109]        # 6dd10 <urlchr_table+0x170>
   39c07:	mov    edi,ebp
   39c09:	call   c440 <fdopen@plt>
   39c0e:	mov    rdx,QWORD PTR [rsp+0x68]
   39c13:	xor    rdx,QWORD PTR fs:0x28
   39c1c:	jne    39c44 <warc_tempfile+0xa4>
   39c1e:	add    rsp,0x78
   39c22:	pop    rbp
   39c23:	pop    r12
   39c25:	ret    
   39c26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   39c30:	mov    edi,ebp
   39c32:	call   bf10 <close@plt>
   39c37:	nop    WORD PTR [rax+rax*1+0x0]
   39c40:	xor    eax,eax
   39c42:	jmp    39c0e <warc_tempfile+0x6e>
   39c44:	call   c7b0 <__stack_chk_fail@plt>
   39c49:	nop    DWORD PTR [rax+0x0]

0000000000039c50 <warc_start_new_file>:
   39c50:	push   r12
   39c52:	push   rbp
   39c53:	push   rbx
   39c54:	sub    rsp,0x20
   39c58:	mov    rax,QWORD PTR fs:0x28
   39c61:	mov    QWORD PTR [rsp+0x18],rax
   39c66:	xor    eax,eax
   39c68:	cmp    QWORD PTR [rip+0x50518],0x0        # 8a188 <opt+0x108>
   39c70:	je     39fc8 <warc_start_new_file+0x378>
   39c76:	mov    ebx,edi
   39c78:	mov    rdi,QWORD PTR [rip+0x50041]        # 89cc0 <warc_current_file>
   39c7f:	test   rdi,rdi
   39c82:	je     39c89 <warc_start_new_file+0x39>
   39c84:	call   c8b0 <fclose@plt>
   39c89:	mov    rdi,QWORD PTR [rip+0x4ffe0]        # 89c70 <warc_current_filename>
   39c90:	mov    BYTE PTR [rip+0x4ffe9],0x0        # 89c80 <warc_current_warcinfo_uuid_str>
   39c97:	call   4bdc0 <rpl_free>
   39c9c:	mov    rdi,QWORD PTR [rip+0x504e5]        # 8a188 <opt+0x108>
   39ca3:	add    DWORD PTR [rip+0x4ffbe],0x1        # 89c68 <warc_current_file_number>
   39caa:	mov    QWORD PTR [rip+0x4ffbb],0x0        # 89c70 <warc_current_filename>
   39cb5:	call   c310 <strlen@plt>
   39cba:	lea    edi,[rax+0xf]
   39cbd:	movsxd rdi,edi
   39cc0:	call   4b850 <xmalloc>
   39cc5:	mov    r8,QWORD PTR [rip+0x504bc]        # 8a188 <opt+0x108>
   39ccc:	lea    r9,[rip+0x3404d]        # 6dd20 <urlchr_table+0x180>
   39cd3:	lea    rcx,[rip+0x3404b]        # 6dd25 <urlchr_table+0x185>
   39cda:	mov    QWORD PTR [rip+0x4ff8f],rax        # 89c70 <warc_current_filename>
   39ce1:	mov    rbp,rax
   39ce4:	test   bl,bl
   39ce6:	jne    39ffe <warc_start_new_file+0x3ae>
   39cec:	cmp    QWORD PTR [rip+0x504ac],0x0        # 8a1a0 <opt+0x120>
   39cf4:	mov    r8,QWORD PTR [rip+0x5048d]        # 8a188 <opt+0x108>
   39cfb:	jle    39ff0 <warc_start_new_file+0x3a0>
   39d01:	sub    rsp,0x8
   39d05:	lea    rax,[rip+0x34014]        # 6dd20 <urlchr_table+0x180>
   39d0c:	mov    r9d,DWORD PTR [rip+0x4ff55]        # 89c68 <warc_current_file_number>
   39d13:	mov    rdx,0xffffffffffffffff
   39d1a:	push   rax
   39d1b:	lea    rcx,[rip+0x3400e]        # 6dd30 <urlchr_table+0x190>
   39d22:	mov    esi,0x1
   39d27:	mov    rdi,rbp
   39d2a:	xor    eax,eax
   39d2c:	call   c950 <__sprintf_chk@plt>
   39d31:	pop    rax
   39d32:	pop    rdx
   39d33:	mov    rdi,rbp
   39d36:	call   4b5b0 <quote>
   39d3b:	mov    edx,0x5
   39d40:	lea    rsi,[rip+0x33ffa]        # 6dd41 <urlchr_table+0x1a1>
   39d47:	xor    edi,edi
   39d49:	mov    r12,rax
   39d4c:	call   c780 <dcgettext@plt>
   39d51:	mov    rdx,r12
   39d54:	xor    edi,edi
   39d56:	mov    rsi,rax
   39d59:	xor    eax,eax
   39d5b:	call   2e0a0 <logprintf>
   39d60:	lea    rsi,[rip+0x33fa9]        # 6dd10 <urlchr_table+0x170>
   39d67:	mov    rdi,rbp
   39d6a:	call   c0f0 <fopen@plt>
   39d6f:	mov    QWORD PTR [rip+0x4ff4a],rax        # 89cc0 <warc_current_file>
   39d76:	test   rax,rax
   39d79:	je     39f98 <warc_start_new_file+0x348>
   39d7f:	mov    esi,0x30
   39d84:	lea    rdi,[rip+0x4fef5]        # 89c80 <warc_current_warcinfo_uuid_str>
   39d8b:	mov    r12,rsp
   39d8e:	call   39aa0 <warc_uuid_str>
   39d93:	mov    esi,0x16
   39d98:	mov    rdi,r12
   39d9b:	call   399c0 <warc_timestamp>
   39da0:	mov    rdi,rbp
   39da3:	call   497d0 <base_name>
   39da8:	cmp    BYTE PTR [rip+0x4ff09],0x0        # 89cb8 <warc_write_ok>
   39daf:	mov    rbp,rax
   39db2:	je     39db9 <warc_start_new_file+0x169>
   39db4:	call   3a070 <warc_write_start_record.part.0>
   39db9:	lea    rsi,[rip+0x33fb6]        # 6dd76 <urlchr_table+0x1d6>
   39dc0:	lea    rdi,[rip+0x33fb8]        # 6dd7f <urlchr_table+0x1df>
   39dc7:	call   39690 <warc_write_header>
   39dcc:	lea    rsi,[rip+0x33fb6]        # 6dd89 <urlchr_table+0x1e9>
   39dd3:	lea    rdi,[rip+0x2d717]        # 674f1 <primes.6089+0x1411>
   39dda:	call   39690 <warc_write_header>
   39ddf:	mov    rsi,r12
   39de2:	lea    rdi,[rip+0x33f1d]        # 6dd06 <urlchr_table+0x166>
   39de9:	call   39690 <warc_write_header>
   39dee:	lea    rsi,[rip+0x4fe8b]        # 89c80 <warc_current_warcinfo_uuid_str>
   39df5:	lea    rdi,[rip+0x33fa5]        # 6dda1 <urlchr_table+0x201>
   39dfc:	call   39690 <warc_write_header>
   39e01:	mov    rsi,rbp
   39e04:	lea    rdi,[rip+0x33fa5]        # 6ddb0 <urlchr_table+0x210>
   39e0b:	call   39690 <warc_write_header>
   39e10:	mov    rdi,rbp
   39e13:	call   4bdc0 <rpl_free>
   39e18:	call   39ba0 <warc_tempfile>
   39e1d:	mov    rbp,rax
   39e20:	test   rax,rax
   39e23:	je     39fc8 <warc_start_new_file+0x378>
   39e29:	mov    rcx,QWORD PTR [rip+0x47590]        # 813c0 <version_string>
   39e30:	mov    rdi,rax
   39e33:	xor    eax,eax
   39e35:	lea    r8,[rip+0x2ead3]        # 6890f <primes.6089+0x282f>
   39e3c:	lea    rdx,[rip+0x33f7b]        # 6ddbe <urlchr_table+0x21e>
   39e43:	mov    esi,0x1
   39e48:	call   bfd0 <__fprintf_chk@plt>
   39e4d:	mov    rcx,rbp
   39e50:	mov    edx,0x1e
   39e55:	mov    esi,0x1
   39e5a:	lea    rdi,[rip+0x3410f]        # 6df70 <urlchr_table+0x3d0>
   39e61:	call   ca10 <fwrite@plt>
   39e66:	mov    rcx,rbp
   39e69:	mov    edx,0x4f
   39e6e:	mov    esi,0x1
   39e73:	lea    rdi,[rip+0x34116]        # 6df90 <urlchr_table+0x3f0>
   39e7a:	call   ca10 <fwrite@plt>
   39e7f:	cmp    BYTE PTR [rip+0x5041a],0x0        # 8a2a0 <opt+0x220>
   39e86:	mov    rdi,rbp
   39e89:	lea    rax,[rip+0x33e8c]        # 6dd1c <urlchr_table+0x17c>
   39e90:	lea    rcx,[rip+0x33e7d]        # 6dd14 <urlchr_table+0x174>
   39e97:	lea    rdx,[rip+0x33f39]        # 6ddd7 <urlchr_table+0x237>
   39e9e:	mov    esi,0x1
   39ea3:	cmove  rcx,rax
   39ea7:	xor    eax,eax
   39ea9:	call   bfd0 <__fprintf_chk@plt>
   39eae:	mov    esi,0x1
   39eb3:	mov    rdi,rbp
   39eb6:	xor    eax,eax
   39eb8:	mov    rcx,QWORD PTR [rip+0x501a9]        # 8a068 <program_argstring>
   39ebf:	lea    rdx,[rip+0x33f1e]        # 6dde4 <urlchr_table+0x244>
   39ec6:	call   bfd0 <__fprintf_chk@plt>
   39ecb:	mov    rax,QWORD PTR [rip+0x502de]        # 8a1b0 <opt+0x130>
   39ed2:	test   rax,rax
   39ed5:	je     39f16 <warc_start_new_file+0x2c6>
   39ed7:	mov    rcx,QWORD PTR [rax]
   39eda:	test   rcx,rcx
   39edd:	je     39f16 <warc_start_new_file+0x2c6>
   39edf:	mov    ebx,0x8
   39ee4:	lea    r12,[rip+0x33f09]        # 6ddf4 <urlchr_table+0x254>
   39eeb:	nop    DWORD PTR [rax+rax*1+0x0]
   39ef0:	mov    rdx,r12
   39ef3:	mov    esi,0x1
   39ef8:	mov    rdi,rbp
   39efb:	xor    eax,eax
   39efd:	call   bfd0 <__fprintf_chk@plt>
   39f02:	mov    rax,QWORD PTR [rip+0x502a7]        # 8a1b0 <opt+0x130>
   39f09:	mov    rcx,QWORD PTR [rax+rbx*1]
   39f0d:	add    rbx,0x8
   39f11:	test   rcx,rcx
   39f14:	jne    39ef0 <warc_start_new_file+0x2a0>
   39f16:	mov    rcx,rbp
   39f19:	mov    edx,0x2
   39f1e:	mov    esi,0x1
   39f23:	lea    rdi,[rip+0x33f19]        # 6de43 <urlchr_table+0x2a3>
   39f2a:	call   ca10 <fwrite@plt>
   39f2f:	cmp    BYTE PTR [rip+0x50273],0x0        # 8a1a9 <opt+0x129>
   39f36:	jne    3a020 <warc_start_new_file+0x3d0>
   39f3c:	mov    rdi,rbp
   39f3f:	call   39710 <warc_write_block_from_file>
   39f44:	call   393c0 <warc_write_end_record>
   39f49:	cmp    BYTE PTR [rip+0x4fd68],0x0        # 89cb8 <warc_write_ok>
   39f50:	je     3a038 <warc_start_new_file+0x3e8>
   39f56:	mov    rdi,rbp
   39f59:	call   c8b0 <fclose@plt>
   39f5e:	movzx  r12d,BYTE PTR [rip+0x4fd52]        # 89cb8 <warc_write_ok>
   39f66:	test   r12b,r12b
   39f69:	je     39fc8 <warc_start_new_file+0x378>
   39f6b:	mov    rdi,QWORD PTR [rip+0x4fd56]        # 89cc8 <warc_manifest_fp>
   39f72:	test   rdi,rdi
   39f75:	je     39fcb <warc_start_new_file+0x37b>
   39f77:	lea    rcx,[rip+0x4fd02]        # 89c80 <warc_current_warcinfo_uuid_str>
   39f7e:	lea    rdx,[rip+0x216d6]        # 5b65b <_IO_stdin_used+0x65b>
   39f85:	mov    esi,0x1
   39f8a:	xor    eax,eax
   39f8c:	call   bfd0 <__fprintf_chk@plt>
   39f91:	jmp    39fcb <warc_start_new_file+0x37b>
   39f93:	nop    DWORD PTR [rax+rax*1+0x0]
   39f98:	mov    rdi,rbp
   39f9b:	call   4b5b0 <quote>
   39fa0:	mov    edx,0x5
   39fa5:	lea    rsi,[rip+0x33dad]        # 6dd59 <urlchr_table+0x1b9>
   39fac:	xor    edi,edi
   39fae:	mov    r12,rax
   39fb1:	call   c780 <dcgettext@plt>
   39fb6:	mov    rdx,r12
   39fb9:	mov    edi,0x1
   39fbe:	mov    rsi,rax
   39fc1:	xor    eax,eax
   39fc3:	call   2e0a0 <logprintf>
   39fc8:	xor    r12d,r12d
   39fcb:	mov    rax,QWORD PTR [rsp+0x18]
   39fd0:	xor    rax,QWORD PTR fs:0x28
   39fd9:	jne    3a05f <warc_start_new_file+0x40f>
   39fdf:	add    rsp,0x20
   39fe3:	mov    eax,r12d
   39fe6:	pop    rbx
   39fe7:	pop    rbp
   39fe8:	pop    r12
   39fea:	ret    
   39feb:	nop    DWORD PTR [rax+rax*1+0x0]
   39ff0:	lea    r9,[rip+0x33d29]        # 6dd20 <urlchr_table+0x180>
   39ff7:	lea    rcx,[rip+0x33d3d]        # 6dd3b <urlchr_table+0x19b>
   39ffe:	mov    rdx,0xffffffffffffffff
   3a005:	mov    esi,0x1
   3a00a:	mov    rdi,rbp
   3a00d:	xor    eax,eax
   3a00f:	call   c950 <__sprintf_chk@plt>
   3a014:	jmp    39d33 <warc_start_new_file+0xe3>
   3a019:	nop    DWORD PTR [rax+0x0]
   3a020:	mov    rsi,0xffffffffffffffff
   3a027:	mov    rdi,rbp
   3a02a:	call   39910 <warc_write_digest_headers.part.0>
   3a02f:	jmp    39f3c <warc_start_new_file+0x2ec>
   3a034:	nop    DWORD PTR [rax+0x0]
   3a038:	xor    edi,edi
   3a03a:	mov    edx,0x5
   3a03f:	lea    rsi,[rip+0x33f9a]        # 6dfe0 <urlchr_table+0x440>
   3a046:	call   c780 <dcgettext@plt>
   3a04b:	mov    edi,0x1
   3a050:	mov    rsi,rax
   3a053:	xor    eax,eax
   3a055:	call   2e0a0 <logprintf>
   3a05a:	jmp    39f56 <warc_start_new_file+0x306>
   3a05f:	call   c7b0 <__stack_chk_fail@plt>
   3a064:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3a06f:	nop

000000000003a070 <warc_write_start_record.part.0>:
   3a070:	sub    rsp,0x8
   3a074:	mov    rdi,QWORD PTR [rip+0x4fc45]        # 89cc0 <warc_current_file>
   3a07b:	call   4bd70 <rpl_fflush>
   3a080:	cmp    QWORD PTR [rip+0x50118],0x0        # 8a1a0 <opt+0x120>
   3a088:	jg     3a0b0 <warc_write_start_record.part.0+0x40>
   3a08a:	movzx  eax,BYTE PTR [rip+0x4fc27]        # 89cb8 <warc_write_ok>
   3a091:	test   al,al
   3a093:	je     3a0a8 <warc_write_start_record.part.0+0x38>
   3a095:	lea    rdi,[rip+0x33d5d]        # 6ddf9 <urlchr_table+0x259>
   3a09c:	call   39640 <warc_write_string.part.0>
   3a0a1:	movzx  eax,BYTE PTR [rip+0x4fc10]        # 89cb8 <warc_write_ok>
   3a0a8:	add    rsp,0x8
   3a0ac:	ret    
   3a0ad:	nop    DWORD PTR [rax]
   3a0b0:	mov    rdi,QWORD PTR [rip+0x4fc09]        # 89cc0 <warc_current_file>
   3a0b7:	call   c4f0 <ftello@plt>
   3a0bc:	cmp    rax,QWORD PTR [rip+0x500dd]        # 8a1a0 <opt+0x120>
   3a0c3:	jl     3a08a <warc_write_start_record.part.0+0x1a>
   3a0c5:	xor    edi,edi
   3a0c7:	call   39c50 <warc_start_new_file>
   3a0cc:	jmp    3a08a <warc_write_start_record.part.0+0x1a>
   3a0ce:	xchg   ax,ax

000000000003a0d0 <warc_write_record>:
   3a0d0:	push   r15
   3a0d2:	mov    r10,rdi
   3a0d5:	mov    r15,r8
   3a0d8:	push   r14
   3a0da:	mov    r14,rdx
   3a0dd:	push   r13
   3a0df:	push   r12
   3a0e1:	mov    r12,r9
   3a0e4:	push   rbp
   3a0e5:	mov    rbp,rsi
   3a0e8:	push   rbx
   3a0e9:	sub    rsp,0x58
   3a0ed:	mov    QWORD PTR [rsp],rcx
   3a0f1:	mov    r13,QWORD PTR [rsp+0x90]
   3a0f9:	mov    rbx,QWORD PTR [rsp+0x98]
   3a101:	mov    rax,QWORD PTR fs:0x28
   3a10a:	mov    QWORD PTR [rsp+0x48],rax
   3a10f:	xor    eax,eax
   3a111:	test   rsi,rsi
   3a114:	je     3a210 <warc_write_record+0x140>
   3a11a:	test   r13,r13
   3a11d:	lea    rax,[rip+0x33ce0]        # 6de04 <urlchr_table+0x264>
   3a124:	cmove  r13,rax
   3a128:	cmp    BYTE PTR [rip+0x4fb89],0x0        # 89cb8 <warc_write_ok>
   3a12f:	je     3a140 <warc_write_record+0x70>
   3a131:	mov    QWORD PTR [rsp+0x8],r10
   3a136:	call   3a070 <warc_write_start_record.part.0>
   3a13b:	mov    r10,QWORD PTR [rsp+0x8]
   3a140:	mov    rsi,r10
   3a143:	lea    rdi,[rip+0x33c35]        # 6dd7f <urlchr_table+0x1df>
   3a14a:	call   39690 <warc_write_header>
   3a14f:	mov    rsi,rbp
   3a152:	lea    rdi,[rip+0x33c48]        # 6dda1 <urlchr_table+0x201>
   3a159:	call   39690 <warc_write_header>
   3a15e:	lea    rsi,[rip+0x4fb1b]        # 89c80 <warc_current_warcinfo_uuid_str>
   3a165:	lea    rdi,[rip+0x33cb1]        # 6de1d <urlchr_table+0x27d>
   3a16c:	call   39690 <warc_write_header>
   3a171:	mov    rsi,r15
   3a174:	lea    rdi,[rip+0x33cb3]        # 6de2e <urlchr_table+0x28e>
   3a17b:	call   39690 <warc_write_header>
   3a180:	mov    rdi,r14
   3a183:	call   39870 <warc_write_header_uri.constprop.0>
   3a188:	mov    rdi,QWORD PTR [rsp]
   3a18c:	call   39a40 <warc_write_date_header>
   3a191:	test   r12,r12
   3a194:	je     3a19e <warc_write_record+0xce>
   3a196:	mov    rdi,r12
   3a199:	call   39850 <warc_write_ip_header.part.0>
   3a19e:	cmp    BYTE PTR [rip+0x50004],0x0        # 8a1a9 <opt+0x129>
   3a1a5:	jne    3a1f8 <warc_write_record+0x128>
   3a1a7:	mov    rsi,r13
   3a1aa:	lea    rdi,[rip+0x2d340]        # 674f1 <primes.6089+0x1411>
   3a1b1:	call   39690 <warc_write_header>
   3a1b6:	mov    rdi,rbx
   3a1b9:	call   39710 <warc_write_block_from_file>
   3a1be:	call   393c0 <warc_write_end_record>
   3a1c3:	mov    rdi,rbx
   3a1c6:	call   c8b0 <fclose@plt>
   3a1cb:	movzx  eax,BYTE PTR [rip+0x4fae6]        # 89cb8 <warc_write_ok>
   3a1d2:	mov    rdx,QWORD PTR [rsp+0x48]
   3a1d7:	xor    rdx,QWORD PTR fs:0x28
   3a1e0:	jne    3a231 <warc_write_record+0x161>
   3a1e2:	add    rsp,0x58
   3a1e6:	pop    rbx
   3a1e7:	pop    rbp
   3a1e8:	pop    r12
   3a1ea:	pop    r13
   3a1ec:	pop    r14
   3a1ee:	pop    r15
   3a1f0:	ret    
   3a1f1:	nop    DWORD PTR [rax+0x0]
   3a1f8:	mov    rsi,QWORD PTR [rsp+0xa0]
   3a200:	mov    rdi,rbx
   3a203:	call   39910 <warc_write_digest_headers.part.0>
   3a208:	jmp    3a1a7 <warc_write_record+0xd7>
   3a20a:	nop    WORD PTR [rax+rax*1+0x0]
   3a210:	lea    rbp,[rsp+0x10]
   3a215:	mov    QWORD PTR [rsp+0x8],rdi
   3a21a:	mov    esi,0x30
   3a21f:	mov    rdi,rbp
   3a222:	call   39aa0 <warc_uuid_str>
   3a227:	mov    r10,QWORD PTR [rsp+0x8]
   3a22c:	jmp    3a11a <warc_write_record+0x4a>
   3a231:	call   c7b0 <__stack_chk_fail@plt>
   3a236:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000003a240 <warc_init>:
   3a240:	endbr64 
   3a244:	push   r15
   3a246:	push   r14
   3a248:	push   r13
   3a24a:	push   r12
   3a24c:	push   rbp
   3a24d:	push   rbx
   3a24e:	sub    rsp,0x98
   3a255:	mov    rax,QWORD PTR fs:0x28
   3a25e:	mov    QWORD PTR [rsp+0x88],rax
   3a266:	xor    eax,eax
   3a268:	cmp    QWORD PTR [rip+0x4ff18],0x0        # 8a188 <opt+0x108>
   3a270:	mov    BYTE PTR [rip+0x4fa41],0x1        # 89cb8 <warc_write_ok>
   3a277:	je     3a3ec <warc_init+0x1ac>
   3a27d:	mov    rdi,QWORD PTR [rip+0x4ff14]        # 8a198 <opt+0x118>
   3a284:	test   rdi,rdi
   3a287:	je     3a38f <warc_init+0x14f>
   3a28d:	mov    QWORD PTR [rsp+0x48],0x0
   3a296:	lea    rsi,[rip+0x2bca3]        # 65f40 <yy_accept+0xe80>
   3a29d:	mov    QWORD PTR [rsp+0x50],0x0
   3a2a6:	call   c0f0 <fopen@plt>
   3a2ab:	mov    rbp,rax
   3a2ae:	test   rax,rax
   3a2b1:	je     3a570 <warc_init+0x330>
   3a2b7:	lea    r15,[rsp+0x50]
   3a2bc:	lea    r14,[rsp+0x48]
   3a2c1:	mov    rcx,rax
   3a2c4:	mov    edx,0xa
   3a2c9:	mov    rsi,r15
   3a2cc:	mov    rdi,r14
   3a2cf:	call   be90 <__getdelim@plt>
   3a2d4:	cmp    rax,0xffffffffffffffff
   3a2d8:	jne    3a498 <warc_init+0x258>
   3a2de:	mov    edx,0x5
   3a2e3:	lea    rsi,[rip+0x33e5e]        # 6e148 <urlchr_table+0x5a8>
   3a2ea:	xor    edi,edi
   3a2ec:	call   c780 <dcgettext@plt>
   3a2f1:	mov    edi,0x1
   3a2f6:	mov    rsi,rax
   3a2f9:	xor    eax,eax
   3a2fb:	call   2e0a0 <logprintf>
   3a300:	mov    DWORD PTR [rsp+0x8],0xffffffff
   3a308:	xor    edi,edi
   3a30a:	mov    edx,0x5
   3a30f:	lea    rsi,[rip+0x33cfa]        # 6e010 <urlchr_table+0x470>
   3a316:	call   c780 <dcgettext@plt>
   3a31b:	mov    edi,0x1
   3a320:	mov    rsi,rax
   3a323:	xor    eax,eax
   3a325:	call   2e0a0 <logprintf>
   3a32a:	jmp    3a369 <warc_init+0x129>
   3a32c:	nop    DWORD PTR [rax+0x0]
   3a330:	mov    DWORD PTR [rsp+0x8],0xffffffff
   3a338:	mov    DWORD PTR [rsp+0xc],0xffffffff
   3a340:	xor    edi,edi
   3a342:	mov    edx,0x5
   3a347:	lea    rsi,[rip+0x33dfa]        # 6e148 <urlchr_table+0x5a8>
   3a34e:	call   c780 <dcgettext@plt>
   3a353:	mov    edi,0x1
   3a358:	mov    rsi,rax
   3a35b:	xor    eax,eax
   3a35d:	call   2e0a0 <logprintf>
   3a362:	cmp    DWORD PTR [rsp+0xc],0xffffffff
   3a367:	je     3a308 <warc_init+0xc8>
   3a369:	cmp    DWORD PTR [rsp+0x8],0xffffffff
   3a36e:	je     3a690 <warc_init+0x450>
   3a374:	mov    rdi,QWORD PTR [rsp+0x48]
   3a379:	call   4bdc0 <rpl_free>
   3a37e:	mov    rdi,rbp
   3a381:	mov    QWORD PTR [rsp+0x48],0x0
   3a38a:	call   c8b0 <fclose@plt>
   3a38f:	call   39ba0 <warc_tempfile>
   3a394:	mov    QWORD PTR [rip+0x4f92d],rax        # 89cc8 <warc_manifest_fp>
   3a39b:	test   rax,rax
   3a39e:	je     3a8ab <warc_init+0x66b>
   3a3a4:	cmp    BYTE PTR [rip+0x4fe00],0x0        # 8a1ab <opt+0x12b>
   3a3ab:	je     3a3ca <warc_init+0x18a>
   3a3ad:	call   39ba0 <warc_tempfile>
   3a3b2:	mov    QWORD PTR [rip+0x4f917],rax        # 89cd0 <warc_log_fp>
   3a3b9:	mov    rdi,rax
   3a3bc:	test   rax,rax
   3a3bf:	je     3a542 <warc_init+0x302>
   3a3c5:	call   2d6f0 <log_set_warc_log_fp>
   3a3ca:	mov    DWORD PTR [rip+0x4f894],0xffffffff        # 89c68 <warc_current_file_number>
   3a3d4:	xor    edi,edi
   3a3d6:	call   39c50 <warc_start_new_file>
   3a3db:	test   al,al
   3a3dd:	je     3a8be <warc_init+0x67e>
   3a3e3:	cmp    BYTE PTR [rip+0x4fdc0],0x0        # 8a1aa <opt+0x12a>
   3a3ea:	jne    3a418 <warc_init+0x1d8>
   3a3ec:	mov    rax,QWORD PTR [rsp+0x88]
   3a3f4:	xor    rax,QWORD PTR fs:0x28
   3a3fd:	jne    3a8a6 <warc_init+0x666>
   3a403:	add    rsp,0x98
   3a40a:	pop    rbx
   3a40b:	pop    rbp
   3a40c:	pop    r12
   3a40e:	pop    r13
   3a410:	pop    r14
   3a412:	pop    r15
   3a414:	ret    
   3a415:	nop    DWORD PTR [rax]
   3a418:	mov    rsi,QWORD PTR [rip+0x4fd69]        # 8a188 <opt+0x108>
   3a41f:	lea    rdi,[rip+0x33a3f]        # 6de65 <urlchr_table+0x2c5>
   3a426:	xor    eax,eax
   3a428:	call   3ba30 <aprintf>
   3a42d:	lea    rsi,[rip+0x2bf2a]        # 6635e <primes.6089+0x27e>
   3a434:	mov    rbp,rax
   3a437:	mov    rdi,rax
   3a43a:	call   c0f0 <fopen@plt>
   3a43f:	mov    rdi,rbp
   3a442:	mov    QWORD PTR [rip+0x4f867],rax        # 89cb0 <warc_current_cdx_file>
   3a449:	call   4bdc0 <rpl_free>
   3a44e:	mov    rcx,QWORD PTR [rip+0x4f85b]        # 89cb0 <warc_current_cdx_file>
   3a455:	mov    edx,0x5
   3a45a:	xor    edi,edi
   3a45c:	lea    rsi,[rip+0x33cbd]        # 6e120 <urlchr_table+0x580>
   3a463:	test   rcx,rcx
   3a466:	je     3a550 <warc_init+0x310>
   3a46c:	mov    edx,0x1b
   3a471:	mov    esi,0x1
   3a476:	lea    rdi,[rip+0x339ef]        # 6de6c <urlchr_table+0x2cc>
   3a47d:	call   ca10 <fwrite@plt>
   3a482:	mov    rdi,QWORD PTR [rip+0x4f827]        # 89cb0 <warc_current_cdx_file>
   3a489:	call   4bd70 <rpl_fflush>
   3a48e:	jmp    3a3ec <warc_init+0x1ac>
   3a493:	nop    DWORD PTR [rax+rax*1+0x0]
   3a498:	lea    rax,[rsp+0x80]
   3a4a0:	mov    rdi,QWORD PTR [rsp+0x48]
   3a4a5:	lea    rsi,[rip+0x33995]        # 6de41 <urlchr_table+0x2a1>
   3a4ac:	mov    rdx,rax
   3a4af:	mov    QWORD PTR [rsp+0x28],rax
   3a4b4:	call   c4a0 <strtok_r@plt>
   3a4b9:	mov    rsi,rax
   3a4bc:	test   rax,rax
   3a4bf:	je     3a330 <warc_init+0xf0>
   3a4c5:	mov    ecx,0x4
   3a4ca:	lea    rdi,[rip+0x33975]        # 6de46 <urlchr_table+0x2a6>
   3a4d1:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3a4d3:	seta   al
   3a4d6:	sbb    al,0x0
   3a4d8:	test   al,al
   3a4da:	jne    3a330 <warc_init+0xf0>
   3a4e0:	xor    r13d,r13d
   3a4e3:	mov    QWORD PTR [rsp+0x10],rbp
   3a4e8:	mov    r12d,0xffffffff
   3a4ee:	lea    rbx,[rip+0x3394c]        # 6de41 <urlchr_table+0x2a1>
   3a4f5:	mov    DWORD PTR [rsp+0x8],0xffffffff
   3a4fd:	mov    ebp,r13d
   3a500:	mov    r13,QWORD PTR [rsp+0x28]
   3a505:	mov    DWORD PTR [rsp+0xc],0xffffffff
   3a50d:	nop    DWORD PTR [rax]
   3a510:	xor    edi,edi
   3a512:	mov    rdx,r13
   3a515:	mov    rsi,rbx
   3a518:	call   c4a0 <strtok_r@plt>
   3a51d:	test   rax,rax
   3a520:	je     3a5d0 <warc_init+0x390>
   3a526:	movzx  eax,BYTE PTR [rax]
   3a529:	lea    edx,[rbp+0x1]
   3a52c:	cmp    al,0x6b
   3a52e:	je     3a5c0 <warc_init+0x380>
   3a534:	cmp    al,0x75
   3a536:	je     3a5b0 <warc_init+0x370>
   3a538:	cmp    al,0x61
   3a53a:	cmove  r12d,ebp
   3a53e:	mov    ebp,edx
   3a540:	jmp    3a510 <warc_init+0x2d0>
   3a542:	mov    edx,0x5
   3a547:	lea    rsi,[rip+0x33ba2]        # 6e0f0 <urlchr_table+0x550>
   3a54e:	xchg   ax,ax
   3a550:	call   c780 <dcgettext@plt>
   3a555:	mov    edi,0x1
   3a55a:	mov    rsi,rax
   3a55d:	xor    eax,eax
   3a55f:	call   2e0a0 <logprintf>
   3a564:	mov    edi,0x1
   3a569:	call   c060 <exit@plt>
   3a56e:	xchg   ax,ax
   3a570:	mov    rdi,QWORD PTR [rip+0x4fc21]        # 8a198 <opt+0x118>
   3a577:	call   4b5b0 <quote>
   3a57c:	mov    edx,0x5
   3a581:	lea    rsi,[rip+0x33b08]        # 6e090 <urlchr_table+0x4f0>
   3a588:	xor    edi,edi
   3a58a:	mov    r12,rax
   3a58d:	call   c780 <dcgettext@plt>
   3a592:	mov    edi,0x1
   3a597:	mov    rdx,r12
   3a59a:	mov    rsi,rax
   3a59d:	xor    eax,eax
   3a59f:	call   2e0a0 <logprintf>
   3a5a4:	mov    edi,0x1
   3a5a9:	call   c060 <exit@plt>
   3a5ae:	xchg   ax,ax
   3a5b0:	mov    DWORD PTR [rsp+0x8],ebp
   3a5b4:	mov    ebp,edx
   3a5b6:	jmp    3a510 <warc_init+0x2d0>
   3a5bb:	nop    DWORD PTR [rax+rax*1+0x0]
   3a5c0:	mov    DWORD PTR [rsp+0xc],ebp
   3a5c4:	mov    ebp,edx
   3a5c6:	jmp    3a510 <warc_init+0x2d0>
   3a5cb:	nop    DWORD PTR [rax+rax*1+0x0]
   3a5d0:	mov    rbp,QWORD PTR [rsp+0x10]
   3a5d5:	mov    DWORD PTR [rsp+0x10],r12d
   3a5da:	cmp    r12d,0xffffffff
   3a5de:	je     3a340 <warc_init+0x100>
   3a5e4:	cmp    DWORD PTR [rsp+0xc],0xffffffff
   3a5e9:	je     3a308 <warc_init+0xc8>
   3a5ef:	cmp    DWORD PTR [rsp+0x8],0xffffffff
   3a5f4:	je     3a690 <warc_init+0x450>
   3a5fa:	lea    rdx,[rip+0xffffffffffffed7f]        # 39380 <warc_cmp_sha1_digest>
   3a601:	mov    edi,0x3e8
   3a606:	lea    r13,[rsp+0x70]
   3a60b:	lea    rsi,[rip+0xffffffffffffed5e]        # 39370 <warc_hash_sha1_digest>
   3a612:	call   1d940 <hash_table_new>
   3a617:	mov    QWORD PTR [rip+0x4f642],rax        # 89c60 <warc_cdx_dedup_table>
   3a61e:	lea    rax,[rsp+0x58]
   3a623:	mov    QWORD PTR [rsp+0x18],rax
   3a628:	lea    rax,[rsp+0x78]
   3a62d:	mov    QWORD PTR [rsp+0x30],rax
   3a632:	mov    rcx,rbp
   3a635:	mov    edx,0xa
   3a63a:	mov    rsi,r15
   3a63d:	mov    rdi,r14
   3a640:	call   be90 <__getdelim@plt>
   3a645:	cmp    rax,0xffffffffffffffff
   3a649:	jne    3a6c0 <warc_init+0x480>
   3a64b:	mov    rdi,QWORD PTR [rip+0x4f60e]        # 89c60 <warc_cdx_dedup_table>
   3a652:	call   1e130 <hash_table_count>
   3a657:	xor    edi,edi
   3a659:	mov    r8d,0x5
   3a65f:	lea    rdx,[rip+0x33822]        # 6de88 <urlchr_table+0x2e8>
   3a666:	movsxd rcx,eax
   3a669:	lea    rsi,[rip+0x33836]        # 6dea6 <urlchr_table+0x306>
   3a670:	mov    r12,rcx
   3a673:	call   bf00 <dcngettext@plt>
   3a678:	mov    edx,r12d
   3a67b:	xor    edi,edi
   3a67d:	mov    rsi,rax
   3a680:	xor    eax,eax
   3a682:	call   2e0a0 <logprintf>
   3a687:	jmp    3a374 <warc_init+0x134>
   3a68c:	nop    DWORD PTR [rax+0x0]
   3a690:	xor    edi,edi
   3a692:	mov    edx,0x5
   3a697:	lea    rsi,[rip+0x339b2]        # 6e050 <urlchr_table+0x4b0>
   3a69e:	call   c780 <dcgettext@plt>
   3a6a3:	mov    edi,0x1
   3a6a8:	mov    rsi,rax
   3a6ab:	xor    eax,eax
   3a6ad:	call   2e0a0 <logprintf>
   3a6b2:	jmp    3a374 <warc_init+0x134>
   3a6b7:	nop    WORD PTR [rax+rax*1+0x0]
   3a6c0:	mov    rdi,QWORD PTR [rsp+0x48]
   3a6c5:	mov    rdx,r13
   3a6c8:	lea    rsi,[rip+0x33772]        # 6de41 <urlchr_table+0x2a1>
   3a6cf:	mov    QWORD PTR [rsp+0x58],0x0
   3a6d8:	mov    QWORD PTR [rsp+0x60],0x0
   3a6e1:	mov    QWORD PTR [rsp+0x68],0x0
   3a6ea:	call   c4a0 <strtok_r@plt>
   3a6ef:	mov    r9,rax
   3a6f2:	test   rax,rax
   3a6f5:	je     3a818 <warc_init+0x5d8>
   3a6fb:	xor    r12d,r12d
   3a6fe:	mov    rdi,rax
   3a701:	mov    ebx,r12d
   3a704:	jmp    3a737 <warc_init+0x4f7>
   3a706:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3a710:	lea    r12,[rsp+0x68]
   3a715:	cmp    ebx,DWORD PTR [rsp+0x8]
   3a719:	je     3a748 <warc_init+0x508>
   3a71b:	xor    edi,edi
   3a71d:	mov    rdx,r13
   3a720:	lea    rsi,[rip+0x3371a]        # 6de41 <urlchr_table+0x2a1>
   3a727:	add    ebx,0x1
   3a72a:	call   c4a0 <strtok_r@plt>
   3a72f:	mov    rdi,rax
   3a732:	test   rax,rax
   3a735:	je     3a760 <warc_init+0x520>
   3a737:	cmp    ebx,DWORD PTR [rsp+0x10]
   3a73b:	je     3a758 <warc_init+0x518>
   3a73d:	cmp    ebx,DWORD PTR [rsp+0xc]
   3a741:	jne    3a710 <warc_init+0x4d0>
   3a743:	lea    r12,[rsp+0x60]
   3a748:	call   c760 <strdup@plt>
   3a74d:	mov    QWORD PTR [r12],rax
   3a751:	jmp    3a71b <warc_init+0x4db>
   3a753:	nop    DWORD PTR [rax+rax*1+0x0]
   3a758:	mov    r12,QWORD PTR [rsp+0x18]
   3a75d:	jmp    3a748 <warc_init+0x508>
   3a75f:	nop
   3a760:	mov    r9,QWORD PTR [rsp+0x58]
   3a765:	mov    r10,QWORD PTR [rsp+0x60]
   3a76a:	mov    r12,QWORD PTR [rsp+0x68]
   3a76f:	test   r9,r9
   3a772:	je     3a820 <warc_init+0x5e0>
   3a778:	test   r10,r10
   3a77b:	je     3a820 <warc_init+0x5e0>
   3a781:	test   r12,r12
   3a784:	je     3a820 <warc_init+0x5e0>
   3a78a:	mov    rdi,r10
   3a78d:	mov    QWORD PTR [rsp+0x38],r9
   3a792:	mov    QWORD PTR [rsp+0x20],r10
   3a797:	call   c310 <strlen@plt>
   3a79c:	mov    r10,QWORD PTR [rsp+0x20]
   3a7a1:	mov    r8,QWORD PTR [rsp+0x30]
   3a7a6:	xor    edi,edi
   3a7a8:	mov    rcx,QWORD PTR [rsp+0x28]
   3a7ad:	mov    rdx,rax
   3a7b0:	mov    rsi,r10
   3a7b3:	call   43280 <base32_decode_alloc_ctx>
   3a7b8:	mov    r10,QWORD PTR [rsp+0x20]
   3a7bd:	mov    rdi,r10
   3a7c0:	call   4bdc0 <rpl_free>
   3a7c5:	mov    r9,QWORD PTR [rsp+0x38]
   3a7ca:	cmp    QWORD PTR [rsp+0x80],0x0
   3a7d3:	mov    QWORD PTR [rsp+0x60],0x0
   3a7dc:	je     3a7e6 <warc_init+0x5a6>
   3a7de:	cmp    QWORD PTR [rsp+0x78],0x14
   3a7e4:	je     3a850 <warc_init+0x610>
   3a7e6:	mov    rdi,r9
   3a7e9:	call   4bdc0 <rpl_free>
   3a7ee:	mov    rdi,QWORD PTR [rsp+0x80]
   3a7f6:	call   4bdc0 <rpl_free>
   3a7fb:	mov    rdi,r12
   3a7fe:	mov    QWORD PTR [rsp+0x80],0x0
   3a80a:	call   4bdc0 <rpl_free>
   3a80f:	jmp    3a632 <warc_init+0x3f2>
   3a814:	nop    DWORD PTR [rax+0x0]
   3a818:	xor    r12d,r12d
   3a81b:	xor    r10d,r10d
   3a81e:	xchg   ax,ax
   3a820:	mov    rdi,r10
   3a823:	mov    QWORD PTR [rsp+0x20],r9
   3a828:	call   4bdc0 <rpl_free>
   3a82d:	mov    r9,QWORD PTR [rsp+0x20]
   3a832:	mov    rdi,r9
   3a835:	call   4bdc0 <rpl_free>
   3a83a:	mov    rdi,r12
   3a83d:	call   4bdc0 <rpl_free>
   3a842:	jmp    3a632 <warc_init+0x3f2>
   3a847:	nop    WORD PTR [rax+rax*1+0x0]
   3a850:	mov    edi,0x28
   3a855:	mov    QWORD PTR [rsp+0x20],r9
   3a85a:	call   4b850 <xmalloc>
   3a85f:	mov    r9,QWORD PTR [rsp+0x20]
   3a864:	mov    rdi,QWORD PTR [rip+0x4f3f5]        # 89c60 <warc_cdx_dedup_table>
   3a86b:	mov    QWORD PTR [rax+0x8],r12
   3a86f:	mov    rdx,rax
   3a872:	lea    rsi,[rax+0x10]
   3a876:	mov    QWORD PTR [rax],r9
   3a879:	mov    rax,QWORD PTR [rsp+0x80]
   3a881:	movdqu xmm0,XMMWORD PTR [rax]
   3a885:	movups XMMWORD PTR [rdx+0x10],xmm0
   3a889:	mov    eax,DWORD PTR [rax+0x10]
   3a88c:	mov    DWORD PTR [rsi+0x10],eax
   3a88f:	call   1dc80 <hash_table_put>
   3a894:	mov    rdi,QWORD PTR [rsp+0x80]
   3a89c:	call   4bdc0 <rpl_free>
   3a8a1:	jmp    3a632 <warc_init+0x3f2>
   3a8a6:	call   c7b0 <__stack_chk_fail@plt>
   3a8ab:	mov    edx,0x5
   3a8b0:	lea    rsi,[rip+0x33809]        # 6e0c0 <urlchr_table+0x520>
   3a8b7:	xor    edi,edi
   3a8b9:	jmp    3a550 <warc_init+0x310>
   3a8be:	mov    edx,0x5
   3a8c3:	lea    rsi,[rip+0x33580]        # 6de4a <urlchr_table+0x2aa>
   3a8ca:	xor    edi,edi
   3a8cc:	jmp    3a550 <warc_init+0x310>
   3a8d1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3a8dc:	nop    DWORD PTR [rax+0x0]

000000000003a8e0 <warc_close>:
   3a8e0:	endbr64 
   3a8e4:	push   r12
   3a8e6:	push   rbp
   3a8e7:	push   rbx
   3a8e8:	sub    rsp,0x40
   3a8ec:	mov    rax,QWORD PTR fs:0x28
   3a8f5:	mov    QWORD PTR [rsp+0x38],rax
   3a8fa:	xor    eax,eax
   3a8fc:	cmp    QWORD PTR [rip+0x4f3bc],0x0        # 89cc0 <warc_current_file>
   3a904:	je     3aa31 <warc_close+0x151>
   3a90a:	cmp    QWORD PTR [rip+0x4f88e],0x0        # 8a1a0 <opt+0x120>
   3a912:	jg     3aa80 <warc_close+0x1a0>
   3a918:	mov    rbp,rsp
   3a91b:	mov    esi,0x30
   3a920:	lea    r12,[rip+0x335a5]        # 6decc <urlchr_table+0x32c>
   3a927:	mov    rdi,rbp
   3a92a:	call   39aa0 <warc_uuid_str>
   3a92f:	mov    rdi,QWORD PTR [rip+0x4f392]        # 89cc8 <warc_manifest_fp>
   3a936:	call   4bd70 <rpl_fflush>
   3a93b:	sub    rsp,0x8
   3a93f:	xor    r9d,r9d
   3a942:	xor    r8d,r8d
   3a945:	push   0xffffffffffffffff
   3a947:	xor    ecx,ecx
   3a949:	lea    rdx,[rip+0x33838]        # 6e188 <urlchr_table+0x5e8>
   3a950:	mov    rsi,rbp
   3a953:	push   QWORD PTR [rip+0x4f36f]        # 89cc8 <warc_manifest_fp>
   3a959:	lea    rdi,[rip+0x33563]        # 6dec3 <urlchr_table+0x323>
   3a960:	push   r12
   3a962:	call   3a0d0 <warc_write_record>
   3a967:	add    rsp,0x20
   3a96b:	call   39ba0 <warc_tempfile>
   3a970:	mov    rbx,rax
   3a973:	test   rax,rax
   3a976:	je     3aa94 <warc_close+0x1b4>
   3a97c:	mov    rdi,rax
   3a97f:	call   4bd70 <rpl_fflush>
   3a984:	mov    esi,0x1
   3a989:	mov    rdi,rbx
   3a98c:	xor    eax,eax
   3a98e:	mov    rcx,QWORD PTR [rip+0x4f6d3]        # 8a068 <program_argstring>
   3a995:	lea    rdx,[rip+0x20cbf]        # 5b65b <_IO_stdin_used+0x65b>
   3a99c:	call   bfd0 <__fprintf_chk@plt>
   3a9a1:	sub    rsp,0x8
   3a9a5:	xor    r9d,r9d
   3a9a8:	mov    r8,rbp
   3a9ab:	push   0xffffffffffffffff
   3a9ad:	xor    ecx,ecx
   3a9af:	lea    rdx,[rip+0x33832]        # 6e1e8 <urlchr_table+0x648>
   3a9b6:	xor    esi,esi
   3a9b8:	push   rbx
   3a9b9:	lea    rdi,[rip+0x33517]        # 6ded7 <urlchr_table+0x337>
   3a9c0:	push   r12
   3a9c2:	call   3a0d0 <warc_write_record>
   3a9c7:	mov    rax,QWORD PTR [rip+0x4f302]        # 89cd0 <warc_log_fp>
   3a9ce:	add    rsp,0x20
   3a9d2:	test   rax,rax
   3a9d5:	je     3aa13 <warc_close+0x133>
   3a9d7:	sub    rsp,0x8
   3a9db:	lea    rdi,[rip+0x334f5]        # 6ded7 <urlchr_table+0x337>
   3a9e2:	xor    r9d,r9d
   3a9e5:	xor    ecx,ecx
   3a9e7:	push   0xffffffffffffffff
   3a9e9:	mov    r8,rbp
   3a9ec:	lea    rdx,[rip+0x33835]        # 6e228 <urlchr_table+0x688>
   3a9f3:	xor    esi,esi
   3a9f5:	push   rax
   3a9f6:	push   r12
   3a9f8:	call   3a0d0 <warc_write_record>
   3a9fd:	add    rsp,0x20
   3aa01:	xor    edi,edi
   3aa03:	mov    QWORD PTR [rip+0x4f2c2],0x0        # 89cd0 <warc_log_fp>
   3aa0e:	call   2d6f0 <log_set_warc_log_fp>
   3aa13:	mov    rdi,QWORD PTR [rip+0x4f2a6]        # 89cc0 <warc_current_file>
   3aa1a:	mov    BYTE PTR [rip+0x4f25f],0x0        # 89c80 <warc_current_warcinfo_uuid_str>
   3aa21:	call   c8b0 <fclose@plt>
   3aa26:	mov    QWORD PTR [rip+0x4f28f],0x0        # 89cc0 <warc_current_file>
   3aa31:	mov    rdi,QWORD PTR [rip+0x4f278]        # 89cb0 <warc_current_cdx_file>
   3aa38:	test   rdi,rdi
   3aa3b:	je     3aa4d <warc_close+0x16d>
   3aa3d:	call   c8b0 <fclose@plt>
   3aa42:	mov    QWORD PTR [rip+0x4f263],0x0        # 89cb0 <warc_current_cdx_file>
   3aa4d:	mov    rdi,QWORD PTR [rip+0x4f27c]        # 89cd0 <warc_log_fp>
   3aa54:	test   rdi,rdi
   3aa57:	je     3aa65 <warc_close+0x185>
   3aa59:	call   c8b0 <fclose@plt>
   3aa5e:	xor    edi,edi
   3aa60:	call   2d6f0 <log_set_warc_log_fp>
   3aa65:	mov    rax,QWORD PTR [rsp+0x38]
   3aa6a:	xor    rax,QWORD PTR fs:0x28
   3aa73:	jne    3aa8f <warc_close+0x1af>
   3aa75:	add    rsp,0x40
   3aa79:	pop    rbx
   3aa7a:	pop    rbp
   3aa7b:	pop    r12
   3aa7d:	ret    
   3aa7e:	xchg   ax,ax
   3aa80:	mov    edi,0x1
   3aa85:	call   39c50 <warc_start_new_file>
   3aa8a:	jmp    3a918 <warc_close+0x38>
   3aa8f:	call   c7b0 <__stack_chk_fail@plt>
   3aa94:	mov    edx,0x5
   3aa99:	lea    rsi,[rip+0x33720]        # 6e1c0 <urlchr_table+0x620>
   3aaa0:	xor    edi,edi
   3aaa2:	call   c780 <dcgettext@plt>
   3aaa7:	mov    edi,0x1
   3aaac:	mov    rsi,rax
   3aaaf:	xor    eax,eax
   3aab1:	call   2e0a0 <logprintf>
   3aab6:	mov    edi,0x1
   3aabb:	call   c060 <exit@plt>

000000000003aac0 <warc_write_request_record>:
   3aac0:	endbr64 
   3aac4:	push   r15
   3aac6:	mov    r15,rdi
   3aac9:	push   r14
   3aacb:	mov    r14,rsi
   3aace:	push   r13
   3aad0:	mov    r13,rdx
   3aad3:	push   r12
   3aad5:	mov    r12,rcx
   3aad8:	push   rbp
   3aad9:	mov    rbp,r8
   3aadc:	push   rbx
   3aadd:	mov    rbx,r9
   3aae0:	sub    rsp,0x8
   3aae4:	cmp    BYTE PTR [rip+0x4f1cd],0x0        # 89cb8 <warc_write_ok>
   3aaeb:	je     3aaf2 <warc_write_request_record+0x32>
   3aaed:	call   3a070 <warc_write_start_record.part.0>
   3aaf2:	lea    rsi,[rip+0x333e7]        # 6dee0 <urlchr_table+0x340>
   3aaf9:	lea    rdi,[rip+0x3327f]        # 6dd7f <urlchr_table+0x1df>
   3ab00:	call   39690 <warc_write_header>
   3ab05:	mov    rdi,r15
   3ab08:	call   39870 <warc_write_header_uri.constprop.0>
   3ab0d:	lea    rsi,[rip+0x33744]        # 6e258 <urlchr_table+0x6b8>
   3ab14:	lea    rdi,[rip+0x2c9d6]        # 674f1 <primes.6089+0x1411>
   3ab1b:	call   39690 <warc_write_header>
   3ab20:	mov    rdi,r14
   3ab23:	call   39a40 <warc_write_date_header>
   3ab28:	mov    rsi,r13
   3ab2b:	lea    rdi,[rip+0x3326f]        # 6dda1 <urlchr_table+0x201>
   3ab32:	call   39690 <warc_write_header>
   3ab37:	test   r12,r12
   3ab3a:	je     3ab44 <warc_write_request_record+0x84>
   3ab3c:	mov    rdi,r12
   3ab3f:	call   39850 <warc_write_ip_header.part.0>
   3ab44:	lea    rsi,[rip+0x4f135]        # 89c80 <warc_current_warcinfo_uuid_str>
   3ab4b:	lea    rdi,[rip+0x332cb]        # 6de1d <urlchr_table+0x27d>
   3ab52:	call   39690 <warc_write_header>
   3ab57:	cmp    BYTE PTR [rip+0x4f64b],0x0        # 8a1a9 <opt+0x129>
   3ab5e:	jne    3ab90 <warc_write_request_record+0xd0>
   3ab60:	mov    rdi,rbp
   3ab63:	call   39710 <warc_write_block_from_file>
   3ab68:	call   393c0 <warc_write_end_record>
   3ab6d:	mov    rdi,rbp
   3ab70:	call   c8b0 <fclose@plt>
   3ab75:	movzx  eax,BYTE PTR [rip+0x4f13c]        # 89cb8 <warc_write_ok>
   3ab7c:	add    rsp,0x8
   3ab80:	pop    rbx
   3ab81:	pop    rbp
   3ab82:	pop    r12
   3ab84:	pop    r13
   3ab86:	pop    r14
   3ab88:	pop    r15
   3ab8a:	ret    
   3ab8b:	nop    DWORD PTR [rax+rax*1+0x0]
   3ab90:	mov    rsi,rbx
   3ab93:	mov    rdi,rbp
   3ab96:	call   39910 <warc_write_digest_headers.part.0>
   3ab9b:	jmp    3ab60 <warc_write_request_record+0xa0>
   3ab9d:	nop    DWORD PTR [rax]

000000000003aba0 <warc_write_response_record>:
   3aba0:	endbr64 
   3aba4:	push   r15
   3aba6:	push   r14
   3aba8:	push   r13
   3abaa:	mov    r13,rdi
   3abad:	push   r12
   3abaf:	mov    r12,rsi
   3abb2:	push   rbp
   3abb3:	mov    rbp,r8
   3abb6:	push   rbx
   3abb7:	sub    rsp,0x148
   3abbe:	mov    rax,QWORD PTR [rsp+0x180]
   3abc6:	mov    QWORD PTR [rsp],rdx
   3abca:	mov    QWORD PTR [rsp+0x8],rcx
   3abcf:	mov    QWORD PTR [rsp+0x10],rax
   3abd4:	mov    rax,QWORD PTR [rsp+0x190]
   3abdc:	mov    QWORD PTR [rsp+0x18],rax
   3abe1:	mov    rax,QWORD PTR fs:0x28
   3abea:	mov    QWORD PTR [rsp+0x138],rax
   3abf2:	xor    eax,eax
   3abf4:	cmp    BYTE PTR [rip+0x4f5ae],0x0        # 8a1a9 <opt+0x129>
   3abfb:	jne    3ad40 <warc_write_response_record+0x1a0>
   3ac01:	lea    r15,[rsp+0xa0]
   3ac09:	lea    rbx,[rsp+0xd0]
   3ac11:	lea    r14,[rsp+0x100]
   3ac19:	mov    esi,0x30
   3ac1e:	mov    rdi,r14
   3ac21:	call   39aa0 <warc_uuid_str>
   3ac26:	mov    rdi,QWORD PTR [rip+0x4f093]        # 89cc0 <warc_current_file>
   3ac2d:	xor    esi,esi
   3ac2f:	mov    edx,0x2
   3ac34:	call   4be00 <rpl_fseeko>
   3ac39:	mov    rdi,QWORD PTR [rip+0x4f080]        # 89cc0 <warc_current_file>
   3ac40:	call   c4f0 <ftello@plt>
   3ac45:	cmp    BYTE PTR [rip+0x4f06c],0x0        # 89cb8 <warc_write_ok>
   3ac4c:	mov    QWORD PTR [rsp+0x20],rax
   3ac51:	jne    3b080 <warc_write_response_record+0x4e0>
   3ac57:	lea    rsi,[rip+0x2d606]        # 68264 <primes.6089+0x2184>
   3ac5e:	lea    rdi,[rip+0x3311a]        # 6dd7f <urlchr_table+0x1df>
   3ac65:	call   39690 <warc_write_header>
   3ac6a:	mov    rsi,r14
   3ac6d:	lea    rdi,[rip+0x3312d]        # 6dda1 <urlchr_table+0x201>
   3ac74:	call   39690 <warc_write_header>
   3ac79:	lea    rsi,[rip+0x4f000]        # 89c80 <warc_current_warcinfo_uuid_str>
   3ac80:	lea    rdi,[rip+0x33196]        # 6de1d <urlchr_table+0x27d>
   3ac87:	call   39690 <warc_write_header>
   3ac8c:	mov    rsi,QWORD PTR [rsp]
   3ac90:	lea    rdi,[rip+0x33197]        # 6de2e <urlchr_table+0x28e>
   3ac97:	call   39690 <warc_write_header>
   3ac9c:	mov    rdi,r13
   3ac9f:	call   39870 <warc_write_header_uri.constprop.0>
   3aca4:	mov    rdi,r12
   3aca7:	call   39a40 <warc_write_date_header>
   3acac:	mov    rax,QWORD PTR [rsp+0x8]
   3acb1:	test   rax,rax
   3acb4:	je     3acbe <warc_write_response_record+0x11e>
   3acb6:	mov    rdi,rax
   3acb9:	call   39850 <warc_write_ip_header.part.0>
   3acbe:	mov    rsi,rbx
   3acc1:	lea    rdi,[rip+0x33005]        # 6dccd <urlchr_table+0x12d>
   3acc8:	call   39690 <warc_write_header>
   3accd:	mov    rsi,r15
   3acd0:	lea    rdi,[rip+0x33008]        # 6dcdf <urlchr_table+0x13f>
   3acd7:	call   39690 <warc_write_header>
   3acdc:	lea    rsi,[rip+0x33625]        # 6e308 <urlchr_table+0x768>
   3ace3:	lea    rdi,[rip+0x2c807]        # 674f1 <primes.6089+0x1411>
   3acea:	call   39690 <warc_write_header>
   3acef:	mov    rdi,rbp
   3acf2:	call   39710 <warc_write_block_from_file>
   3acf7:	call   393c0 <warc_write_end_record>
   3acfc:	mov    rdi,rbp
   3acff:	call   c8b0 <fclose@plt>
   3ad04:	movzx  eax,BYTE PTR [rip+0x4efad]        # 89cb8 <warc_write_ok>
   3ad0b:	test   al,al
   3ad0d:	jne    3af68 <warc_write_response_record+0x3c8>
   3ad13:	mov    rbx,QWORD PTR [rsp+0x138]
   3ad1b:	xor    rbx,QWORD PTR fs:0x28
   3ad24:	jne    3b0fa <warc_write_response_record+0x55a>
   3ad2a:	add    rsp,0x148
   3ad31:	pop    rbx
   3ad32:	pop    rbp
   3ad33:	pop    r12
   3ad35:	pop    r13
   3ad37:	pop    r14
   3ad39:	pop    r15
   3ad3b:	ret    
   3ad3c:	nop    DWORD PTR [rax+0x0]
   3ad40:	mov    rdi,r8
   3ad43:	mov    r14,r9
   3ad46:	lea    r15,[rsp+0xa0]
   3ad4e:	call   c560 <rewind@plt>
   3ad53:	lea    rax,[rsp+0x40]
   3ad58:	mov    rcx,r14
   3ad5b:	mov    rdi,rbp
   3ad5e:	lea    rdx,[rsp+0x60]
   3ad63:	mov    rsi,rax
   3ad66:	mov    QWORD PTR [rsp+0x28],rax
   3ad6b:	lea    rbx,[rsp+0xd0]
   3ad73:	mov    QWORD PTR [rsp+0x20],rdx
   3ad78:	call   39400 <warc_sha1_stream_with_payload>
   3ad7d:	test   eax,eax
   3ad7f:	jne    3ac11 <warc_write_response_record+0x71>
   3ad85:	mov    rdi,QWORD PTR [rip+0x4eed4]        # 89c60 <warc_cdx_dedup_table>
   3ad8c:	test   rdi,rdi
   3ad8f:	je     3b090 <warc_write_response_record+0x4f0>
   3ad95:	mov    rsi,QWORD PTR [rsp+0x20]
   3ad9a:	call   1da70 <hash_table_get>
   3ad9f:	mov    rbx,rax
   3ada2:	test   rax,rax
   3ada5:	je     3b090 <warc_write_response_record+0x4f0>
   3adab:	mov    rdi,QWORD PTR [rax]
   3adae:	mov    rsi,r13
   3adb1:	call   be40 <strcmp@plt>
   3adb6:	test   eax,eax
   3adb8:	jne    3b090 <warc_write_response_record+0x4f0>
   3adbe:	xor    edi,edi
   3adc0:	lea    rsi,[rip+0x334b9]        # 6e280 <urlchr_table+0x6e0>
   3adc7:	mov    edx,0x5
   3adcc:	call   c780 <dcgettext@plt>
   3add1:	xor    edi,edi
   3add3:	mov    rsi,rax
   3add6:	xor    eax,eax
   3add8:	call   2e0a0 <logprintf>
   3addd:	test   r14,r14
   3ade0:	jle    3ae03 <warc_write_response_record+0x263>
   3ade2:	mov    rdi,rbp
   3ade5:	call   be80 <fileno@plt>
   3adea:	mov    rsi,r14
   3aded:	mov    edi,eax
   3adef:	call   c990 <ftruncate@plt>
   3adf4:	mov    r8d,eax
   3adf7:	xor    eax,eax
   3adf9:	cmp    r8d,0xffffffff
   3adfd:	je     3ad13 <warc_write_response_record+0x173>
   3ae03:	mov    rdi,QWORD PTR [rsp+0x20]
   3ae08:	lea    r15,[rsp+0xa0]
   3ae10:	lea    r14,[rsp+0x100]
   3ae18:	mov    rsi,r15
   3ae1b:	call   398f0 <warc_base32_sha1_digest.part.0.constprop.0>
   3ae20:	mov    rax,QWORD PTR [rbx+0x8]
   3ae24:	mov    esi,0x30
   3ae29:	mov    rdi,r14
   3ae2c:	lea    rbx,[rsp+0xd0]
   3ae34:	mov    QWORD PTR [rsp+0x10],rax
   3ae39:	call   39aa0 <warc_uuid_str>
   3ae3e:	lea    r8,[rsp+0x80]
   3ae46:	mov    rdi,rbp
   3ae49:	mov    rsi,r8
   3ae4c:	mov    QWORD PTR [rsp+0x18],r8
   3ae51:	call   46400 <sha1_stream>
   3ae56:	mov    r8,QWORD PTR [rsp+0x18]
   3ae5b:	mov    rsi,rbx
   3ae5e:	mov    rdi,r8
   3ae61:	call   398f0 <warc_base32_sha1_digest.part.0.constprop.0>
   3ae66:	cmp    BYTE PTR [rip+0x4ee4b],0x0        # 89cb8 <warc_write_ok>
   3ae6d:	jne    3b0c0 <warc_write_response_record+0x520>
   3ae73:	lea    rsi,[rip+0x3306e]        # 6dee8 <urlchr_table+0x348>
   3ae7a:	lea    rdi,[rip+0x32efe]        # 6dd7f <urlchr_table+0x1df>
   3ae81:	call   39690 <warc_write_header>
   3ae86:	mov    rsi,r14
   3ae89:	lea    rdi,[rip+0x32f11]        # 6dda1 <urlchr_table+0x201>
   3ae90:	call   39690 <warc_write_header>
   3ae95:	lea    rsi,[rip+0x4ede4]        # 89c80 <warc_current_warcinfo_uuid_str>
   3ae9c:	lea    rdi,[rip+0x32f7a]        # 6de1d <urlchr_table+0x27d>
   3aea3:	call   39690 <warc_write_header>
   3aea8:	mov    rsi,QWORD PTR [rsp]
   3aeac:	lea    rdi,[rip+0x32f7b]        # 6de2e <urlchr_table+0x28e>
   3aeb3:	call   39690 <warc_write_header>
   3aeb8:	mov    rsi,QWORD PTR [rsp+0x10]
   3aebd:	lea    rdi,[rip+0x3302c]        # 6def0 <urlchr_table+0x350>
   3aec4:	call   39690 <warc_write_header>
   3aec9:	lea    rsi,[rip+0x333f0]        # 6e2c0 <urlchr_table+0x720>
   3aed0:	lea    rdi,[rip+0x33028]        # 6deff <urlchr_table+0x35f>
   3aed7:	call   39690 <warc_write_header>
   3aedc:	lea    rsi,[rip+0x2d0e0]        # 67fc3 <primes.6089+0x1ee3>
   3aee3:	lea    rdi,[rip+0x33022]        # 6df0c <urlchr_table+0x36c>
   3aeea:	call   39690 <warc_write_header>
   3aeef:	mov    rdi,r13
   3aef2:	call   39870 <warc_write_header_uri.constprop.0>
   3aef7:	mov    rdi,r12
   3aefa:	call   39a40 <warc_write_date_header>
   3aeff:	mov    rax,QWORD PTR [rsp+0x8]
   3af04:	test   rax,rax
   3af07:	je     3af11 <warc_write_response_record+0x371>
   3af09:	mov    rdi,rax
   3af0c:	call   39850 <warc_write_ip_header.part.0>
   3af11:	lea    rsi,[rip+0x333f0]        # 6e308 <urlchr_table+0x768>
   3af18:	lea    rdi,[rip+0x2c5d2]        # 674f1 <primes.6089+0x1411>
   3af1f:	call   39690 <warc_write_header>
   3af24:	mov    rsi,rbx
   3af27:	lea    rdi,[rip+0x32d9f]        # 6dccd <urlchr_table+0x12d>
   3af2e:	call   39690 <warc_write_header>
   3af33:	mov    rsi,r15
   3af36:	lea    rdi,[rip+0x32da2]        # 6dcdf <urlchr_table+0x13f>
   3af3d:	call   39690 <warc_write_header>
   3af42:	mov    rdi,rbp
   3af45:	call   39710 <warc_write_block_from_file>
   3af4a:	call   393c0 <warc_write_end_record>
   3af4f:	mov    rdi,rbp
   3af52:	call   c8b0 <fclose@plt>
   3af57:	movzx  eax,BYTE PTR [rip+0x4ed5a]        # 89cb8 <warc_write_ok>
   3af5e:	jmp    3ad13 <warc_write_response_record+0x173>
   3af63:	nop    DWORD PTR [rax+rax*1+0x0]
   3af68:	cmp    BYTE PTR [rip+0x4f23b],0x0        # 8a1aa <opt+0x12a>
   3af6f:	je     3ad13 <warc_write_response_record+0x173>
   3af75:	mov    eax,DWORD PTR [r12]
   3af79:	mov    rcx,QWORD PTR [rsp+0x10]
   3af7e:	mov    BYTE PTR [rsp+0x3f],0x0
   3af83:	mov    DWORD PTR [rsp+0x31],eax
   3af87:	movzx  eax,WORD PTR [r12+0x5]
   3af8d:	mov    WORD PTR [rsp+0x35],ax
   3af92:	movzx  eax,WORD PTR [r12+0x8]
   3af98:	mov    WORD PTR [rsp+0x37],ax
   3af9d:	movzx  eax,WORD PTR [r12+0xb]
   3afa3:	mov    WORD PTR [rsp+0x39],ax
   3afa8:	movzx  eax,WORD PTR [r12+0xe]
   3afae:	mov    WORD PTR [rsp+0x3b],ax
   3afb3:	movzx  eax,WORD PTR [r12+0x11]
   3afb9:	mov    WORD PTR [rsp+0x3d],ax
   3afbe:	test   rcx,rcx
   3afc1:	je     3b0d0 <warc_write_response_record+0x530>
   3afc7:	cmp    BYTE PTR [rcx],0x0
   3afca:	lea    rax,[rip+0x334d4]        # 6e4a5 <urlchr_table+0x905>
   3afd1:	cmovne rax,rcx
   3afd5:	mov    QWORD PTR [rsp+0x10],rax
   3afda:	mov    rax,QWORD PTR [rsp+0x18]
   3afdf:	test   rax,rax
   3afe2:	je     3afed <warc_write_response_record+0x44d>
   3afe4:	cmp    BYTE PTR [rax],0x0
   3afe7:	jne    3b0e8 <warc_write_response_record+0x548>
   3afed:	lea    rdi,[rip+0x334b1]        # 6e4a5 <urlchr_table+0x905>
   3aff4:	call   c760 <strdup@plt>
   3aff9:	mov    rbp,rax
   3affc:	mov    rsi,QWORD PTR [rsp+0x20]
   3b001:	lea    rbx,[rsp+0x80]
   3b009:	mov    rdi,rbx
   3b00c:	call   3d0c0 <number_to_string>
   3b011:	sub    rsp,0x8
   3b015:	mov    r9,r13
   3b018:	mov    rcx,r13
   3b01b:	push   r14
   3b01d:	mov    rdi,QWORD PTR [rip+0x4ec8c]        # 89cb0 <warc_current_cdx_file>
   3b024:	mov    esi,0x1
   3b029:	lea    rdx,[rip+0x33300]        # 6e330 <urlchr_table+0x790>
   3b030:	push   QWORD PTR [rip+0x4ec3a]        # 89c70 <warc_current_filename>
   3b036:	push   rbx
   3b037:	push   rbp
   3b038:	lea    rax,[rsp+0xcd]
   3b040:	push   rax
   3b041:	mov    eax,DWORD PTR [rsp+0x1b8]
   3b048:	push   rax
   3b049:	xor    eax,eax
   3b04b:	push   QWORD PTR [rsp+0x48]
   3b04f:	lea    r8,[rsp+0x71]
   3b054:	call   bfd0 <__fprintf_chk@plt>
   3b059:	mov    rdi,QWORD PTR [rip+0x4ec50]        # 89cb0 <warc_current_cdx_file>
   3b060:	add    rsp,0x40
   3b064:	call   4bd70 <rpl_fflush>
   3b069:	mov    rdi,rbp
   3b06c:	call   4bdc0 <rpl_free>
   3b071:	movzx  eax,BYTE PTR [rip+0x4ec40]        # 89cb8 <warc_write_ok>
   3b078:	jmp    3ad13 <warc_write_response_record+0x173>
   3b07d:	nop    DWORD PTR [rax]
   3b080:	call   3a070 <warc_write_start_record.part.0>
   3b085:	jmp    3ac57 <warc_write_response_record+0xb7>
   3b08a:	nop    WORD PTR [rax+rax*1+0x0]
   3b090:	mov    rdi,QWORD PTR [rsp+0x28]
   3b095:	lea    rbx,[rsp+0xd0]
   3b09d:	lea    r15,[rsp+0xa0]
   3b0a5:	mov    rsi,rbx
   3b0a8:	call   398f0 <warc_base32_sha1_digest.part.0.constprop.0>
   3b0ad:	mov    rdi,QWORD PTR [rsp+0x20]
   3b0b2:	mov    rsi,r15
   3b0b5:	call   398f0 <warc_base32_sha1_digest.part.0.constprop.0>
   3b0ba:	jmp    3ac11 <warc_write_response_record+0x71>
   3b0bf:	nop
   3b0c0:	call   3a070 <warc_write_start_record.part.0>
   3b0c5:	jmp    3ae73 <warc_write_response_record+0x2d3>
   3b0ca:	nop    WORD PTR [rax+rax*1+0x0]
   3b0d0:	lea    rax,[rip+0x333ce]        # 6e4a5 <urlchr_table+0x905>
   3b0d7:	mov    QWORD PTR [rsp+0x10],rax
   3b0dc:	jmp    3afda <warc_write_response_record+0x43a>
   3b0e1:	nop    DWORD PTR [rax+0x0]
   3b0e8:	mov    rdi,QWORD PTR [rsp+0x18]
   3b0ed:	call   37110 <url_escape>
   3b0f2:	mov    rbp,rax
   3b0f5:	jmp    3affc <warc_write_response_record+0x45c>
   3b0fa:	call   c7b0 <__stack_chk_fail@plt>
   3b0ff:	nop

000000000003b100 <warc_write_resource_record>:
   3b100:	endbr64 
   3b104:	push   r12
   3b106:	sub    rsp,0x8
   3b10a:	push   QWORD PTR [rsp+0x20]
   3b10e:	push   QWORD PTR [rsp+0x20]
   3b112:	push   r9
   3b114:	mov    r9,r8
   3b117:	mov    r8,rcx
   3b11a:	mov    rcx,rdx
   3b11d:	mov    rdx,rsi
   3b120:	mov    rsi,rdi
   3b123:	lea    rdi,[rip+0x32dad]        # 6ded7 <urlchr_table+0x337>
   3b12a:	call   3a0d0 <warc_write_record>
   3b12f:	add    rsp,0x20
   3b133:	pop    r12
   3b135:	ret    
   3b136:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000003b140 <warc_write_metadata_record>:
   3b140:	endbr64 
   3b144:	push   r12
   3b146:	sub    rsp,0x8
   3b14a:	push   QWORD PTR [rsp+0x20]
   3b14e:	push   QWORD PTR [rsp+0x20]
   3b152:	push   r9
   3b154:	mov    r9,r8
   3b157:	mov    r8,rcx
   3b15a:	mov    rcx,rdx
   3b15d:	mov    rdx,rsi
   3b160:	mov    rsi,rdi
   3b163:	lea    rdi,[rip+0x32d59]        # 6dec3 <urlchr_table+0x323>
   3b16a:	call   3a0d0 <warc_write_record>
   3b16f:	add    rsp,0x20
   3b173:	pop    r12
   3b175:	ret    
   3b176:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000003b180 <write_xattr_metadata>:
   3b180:	push   r14
   3b182:	push   r13
   3b184:	push   r12
   3b186:	push   rbp
   3b187:	sub    rsp,0x8
   3b18b:	test   rsi,rsi
   3b18e:	je     3b210 <write_xattr_metadata+0x90>
   3b194:	mov    rbp,rdx
   3b197:	test   rdx,rdx
   3b19a:	je     3b210 <write_xattr_metadata+0x90>
   3b19c:	mov    r13,rdi
   3b19f:	mov    rdi,rsi
   3b1a2:	mov    r12,rsi
   3b1a5:	call   c310 <strlen@plt>
   3b1aa:	mov    rdi,rbp
   3b1ad:	mov    r14,rax
   3b1b0:	call   be80 <fileno@plt>
   3b1b5:	xor    r8d,r8d
   3b1b8:	mov    rdx,r12
   3b1bb:	mov    rcx,r14
   3b1be:	mov    edi,eax
   3b1c0:	mov    rsi,r13
   3b1c3:	mov    r12d,0x0
   3b1c9:	call   c810 <fsetxattr@plt>
   3b1ce:	test   eax,eax
   3b1d0:	cmovle r12d,eax
   3b1d4:	js     3b1e8 <write_xattr_metadata+0x68>
   3b1d6:	add    rsp,0x8
   3b1da:	mov    eax,r12d
   3b1dd:	pop    rbp
   3b1de:	pop    r12
   3b1e0:	pop    r13
   3b1e2:	pop    r14
   3b1e4:	ret    
   3b1e5:	nop    DWORD PTR [rax]
   3b1e8:	cmp    BYTE PTR [rip+0x4f0cc],0x0        # 8a2bb <opt+0x23b>
   3b1ef:	je     3b1d6 <write_xattr_metadata+0x56>
   3b1f1:	mov    rdi,r13
   3b1f4:	call   4b5b0 <quote>
   3b1f9:	lea    rdi,[rip+0x33151]        # 6e351 <urlchr_table+0x7b1>
   3b200:	mov    rsi,rax
   3b203:	xor    eax,eax
   3b205:	call   2e250 <debug_logprintf>
   3b20a:	jmp    3b1d6 <write_xattr_metadata+0x56>
   3b20c:	nop    DWORD PTR [rax+0x0]
   3b210:	mov    r12d,0xffffffff
   3b216:	jmp    3b1d6 <write_xattr_metadata+0x56>
   3b218:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003b220 <set_file_metadata>:
   3b220:	endbr64 
   3b224:	push   r13
   3b226:	push   r12
   3b228:	push   rbp
   3b229:	push   rbx
   3b22a:	sub    rsp,0x78
   3b22e:	mov    rax,QWORD PTR fs:0x28
   3b237:	mov    QWORD PTR [rsp+0x68],rax
   3b23c:	xor    eax,eax
   3b23e:	test   rdi,rdi
   3b241:	je     3b310 <set_file_metadata+0xf0>
   3b247:	mov    r13,rdx
   3b24a:	test   rdx,rdx
   3b24d:	je     3b310 <set_file_metadata+0xf0>
   3b253:	mov    rbx,rsi
   3b256:	mov    esi,0x2
   3b25b:	call   38230 <url_string>
   3b260:	mov    rdi,rax
   3b263:	mov    rbp,rax
   3b266:	call   2dc30 <escnonprint_uri>
   3b26b:	lea    rdi,[rip+0x330f8]        # 6e36a <urlchr_table+0x7ca>
   3b272:	mov    rdx,r13
   3b275:	mov    rsi,rax
   3b278:	call   3b180 <write_xattr_metadata>
   3b27d:	mov    rdi,rbp
   3b280:	mov    r12d,eax
   3b283:	call   4bdc0 <rpl_free>
   3b288:	test   r12d,r12d
   3b28b:	jne    3b292 <set_file_metadata+0x72>
   3b28d:	test   rbx,rbx
   3b290:	jne    3b2b0 <set_file_metadata+0x90>
   3b292:	mov    rax,QWORD PTR [rsp+0x68]
   3b297:	xor    rax,QWORD PTR fs:0x28
   3b2a0:	jne    3b31b <set_file_metadata+0xfb>
   3b2a2:	add    rsp,0x78
   3b2a6:	mov    eax,r12d
   3b2a9:	pop    rbx
   3b2aa:	pop    rbp
   3b2ab:	pop    r12
   3b2ad:	pop    r13
   3b2af:	ret    
   3b2b0:	mov    r8,rsp
   3b2b3:	xor    eax,eax
   3b2b5:	mov    ecx,0xc
   3b2ba:	xor    esi,esi
   3b2bc:	mov    rdi,r8
   3b2bf:	rep stos QWORD PTR es:[rdi],rax
   3b2c2:	mov    eax,DWORD PTR [rbx+0x8]
   3b2c5:	mov    rdi,r8
   3b2c8:	mov    DWORD PTR [rsp+0x8],eax
   3b2cc:	mov    rax,QWORD PTR [rbx+0x10]
   3b2d0:	mov    QWORD PTR [rsp+0x10],rax
   3b2d5:	mov    eax,DWORD PTR [rbx+0x18]
   3b2d8:	mov    DWORD PTR [rsp+0x18],eax
   3b2dc:	call   38230 <url_string>
   3b2e1:	mov    rdi,rax
   3b2e4:	mov    rbp,rax
   3b2e7:	call   2dc30 <escnonprint_uri>
   3b2ec:	mov    rdx,r13
   3b2ef:	lea    rdi,[rip+0x33088]        # 6e37e <urlchr_table+0x7de>
   3b2f6:	mov    rsi,rax
   3b2f9:	call   3b180 <write_xattr_metadata>
   3b2fe:	mov    rdi,rbp
   3b301:	mov    r12d,eax
   3b304:	call   4bdc0 <rpl_free>
   3b309:	jmp    3b292 <set_file_metadata+0x72>
   3b30b:	nop    DWORD PTR [rax+rax*1+0x0]
   3b310:	mov    r12d,0xffffffff
   3b316:	jmp    3b292 <set_file_metadata+0x72>
   3b31b:	call   c7b0 <__stack_chk_fail@plt>

000000000003b320 <mergesort_internal>:
   3b320:	push   r15
   3b322:	push   r14
   3b324:	push   r13
   3b326:	push   r12
   3b328:	push   rbp
   3b329:	push   rbx
   3b32a:	sub    rsp,0x48
   3b32e:	mov    QWORD PTR [rsp],rdi
   3b332:	mov    QWORD PTR [rsp+0x28],rsi
   3b337:	mov    QWORD PTR [rsp+0x8],r8
   3b33c:	mov    QWORD PTR [rsp+0x10],r9
   3b341:	cmp    rcx,r8
   3b344:	jb     3b358 <mergesort_internal+0x38>
   3b346:	add    rsp,0x48
   3b34a:	pop    rbx
   3b34b:	pop    rbp
   3b34c:	pop    r12
   3b34e:	pop    r13
   3b350:	pop    r14
   3b352:	pop    r15
   3b354:	ret    
   3b355:	nop    DWORD PTR [rax]
   3b358:	lea    rax,[rcx+r8*1]
   3b35c:	mov    r14,r8
   3b35f:	mov    r12,rdx
   3b362:	mov    rbp,rcx
   3b365:	shr    rax,1
   3b368:	mov    r13,rsi
   3b36b:	mov    r15,rax
   3b36e:	mov    r8,rax
   3b371:	mov    QWORD PTR [rsp+0x20],rax
   3b376:	call   3b320 <mergesort_internal>
   3b37b:	lea    rbx,[r15+0x1]
   3b37f:	mov    rdi,QWORD PTR [rsp]
   3b383:	mov    r8,r14
   3b386:	mov    r9,QWORD PTR [rsp+0x10]
   3b38b:	mov    rcx,rbx
   3b38e:	mov    rdx,r12
   3b391:	mov    rsi,r13
   3b394:	mov    QWORD PTR [rsp+0x30],rbx
   3b399:	call   3b320 <mergesort_internal>
   3b39e:	cmp    rbx,r14
   3b3a1:	ja     3b560 <mergesort_internal+0x240>
   3b3a7:	cmp    rbp,r15
   3b3aa:	ja     3b560 <mergesort_internal+0x240>
   3b3b0:	mov    r14,rbp
   3b3b3:	mov    QWORD PTR [rsp+0x18],rbp
   3b3b8:	imul   r14,r12
   3b3bc:	mov    QWORD PTR [rsp+0x38],rbp
   3b3c1:	add    r14,r13
   3b3c4:	mov    r13,rbp
   3b3c7:	jmp    3b3f9 <mergesort_internal+0xd9>
   3b3c9:	nop    DWORD PTR [rax+0x0]
   3b3d0:	mov    rdi,r14
   3b3d3:	mov    rdx,r12
   3b3d6:	mov    rsi,rbp
   3b3d9:	add    rbx,0x1
   3b3dd:	call   cb30 <memcpy@plt>
   3b3e2:	add    r14,r12
   3b3e5:	add    QWORD PTR [rsp+0x18],0x1
   3b3eb:	cmp    r13,QWORD PTR [rsp+0x20]
   3b3f0:	ja     3b446 <mergesort_internal+0x126>
   3b3f2:	cmp    rbx,QWORD PTR [rsp+0x8]
   3b3f7:	ja     3b446 <mergesort_internal+0x126>
   3b3f9:	mov    rsi,r12
   3b3fc:	mov    r8,r12
   3b3ff:	mov    rax,QWORD PTR [rsp]
   3b403:	imul   rsi,rbx
   3b407:	imul   r8,r13
   3b40b:	lea    rbp,[rax+rsi*1]
   3b40f:	lea    r15,[rax+r8*1]
   3b413:	mov    rsi,rbp
   3b416:	mov    rax,QWORD PTR [rsp+0x10]
   3b41b:	mov    rdi,r15
   3b41e:	call   rax
   3b420:	test   eax,eax
   3b422:	jg     3b3d0 <mergesort_internal+0xb0>
   3b424:	mov    rdi,r14
   3b427:	mov    rdx,r12
   3b42a:	mov    rsi,r15
   3b42d:	add    r13,0x1
   3b431:	call   cb30 <memcpy@plt>
   3b436:	add    r14,r12
   3b439:	add    QWORD PTR [rsp+0x18],0x1
   3b43f:	cmp    r13,QWORD PTR [rsp+0x20]
   3b444:	jbe    3b3f2 <mergesort_internal+0xd2>
   3b446:	mov    rbp,QWORD PTR [rsp+0x38]
   3b44b:	mov    rax,QWORD PTR [rsp+0x20]
   3b450:	cmp    rax,r13
   3b453:	jb     3b4c7 <mergesort_internal+0x1a7>
   3b455:	mov    rcx,QWORD PTR [rsp+0x18]
   3b45a:	mov    r15,r12
   3b45d:	mov    QWORD PTR [rsp+0x10],rbx
   3b462:	mov    r14,r13
   3b465:	imul   r15,r13
   3b469:	add    r15,QWORD PTR [rsp]
   3b46d:	mov    QWORD PTR [rsp+0x20],rbp
   3b472:	mov    rbx,rax
   3b475:	imul   rcx,r12
   3b479:	mov    rbp,r15
   3b47c:	add    rcx,QWORD PTR [rsp+0x28]
   3b481:	nop    DWORD PTR [rax+0x0]
   3b488:	mov    rsi,rbp
   3b48b:	mov    rdi,rcx
   3b48e:	mov    rdx,r12
   3b491:	mov    r15,r14
   3b494:	call   cb30 <memcpy@plt>
   3b499:	add    r14,0x1
   3b49d:	add    rbp,r12
   3b4a0:	mov    rcx,rax
   3b4a3:	add    rcx,r12
   3b4a6:	cmp    rbx,r15
   3b4a9:	jne    3b488 <mergesort_internal+0x168>
   3b4ab:	mov    rax,QWORD PTR [rsp+0x30]
   3b4b0:	add    rax,QWORD PTR [rsp+0x18]
   3b4b5:	sub    rax,r13
   3b4b8:	mov    rbx,QWORD PTR [rsp+0x10]
   3b4bd:	mov    rbp,QWORD PTR [rsp+0x20]
   3b4c2:	mov    QWORD PTR [rsp+0x18],rax
   3b4c7:	cmp    QWORD PTR [rsp+0x8],rbx
   3b4cc:	jb     3b510 <mergesort_internal+0x1f0>
   3b4ce:	mov    rcx,QWORD PTR [rsp+0x18]
   3b4d3:	mov    r13,r12
   3b4d6:	mov    r14,QWORD PTR [rsp+0x8]
   3b4db:	imul   r13,rbx
   3b4df:	add    r13,QWORD PTR [rsp]
   3b4e3:	imul   rcx,r12
   3b4e7:	add    rcx,QWORD PTR [rsp+0x28]
   3b4ec:	nop    DWORD PTR [rax+0x0]
   3b4f0:	mov    rsi,r13
   3b4f3:	mov    rdi,rcx
   3b4f6:	mov    rdx,r12
   3b4f9:	add    rbx,0x1
   3b4fd:	call   cb30 <memcpy@plt>
   3b502:	add    r13,r12
   3b505:	mov    rcx,rax
   3b508:	add    rcx,r12
   3b50b:	cmp    r14,rbx
   3b50e:	jae    3b4f0 <mergesort_internal+0x1d0>
   3b510:	mov    rbx,rbp
   3b513:	mov    rdi,QWORD PTR [rsp]
   3b517:	mov    r13,QWORD PTR [rsp+0x8]
   3b51c:	imul   rbx,r12
   3b520:	add    rdi,rbx
   3b523:	add    rbx,QWORD PTR [rsp+0x28]
   3b528:	nop    DWORD PTR [rax+rax*1+0x0]
   3b530:	mov    rsi,rbx
   3b533:	mov    rdx,r12
   3b536:	add    rbp,0x1
   3b53a:	add    rbx,r12
   3b53d:	call   cb30 <memcpy@plt>
   3b542:	mov    rdi,rax
   3b545:	add    rdi,r12
   3b548:	cmp    r13,rbp
   3b54b:	jae    3b530 <mergesort_internal+0x210>
   3b54d:	add    rsp,0x48
   3b551:	pop    rbx
   3b552:	pop    rbp
   3b553:	pop    r12
   3b555:	pop    r13
   3b557:	pop    r14
   3b559:	pop    r15
   3b55b:	ret    
   3b55c:	nop    DWORD PTR [rax+0x0]
   3b560:	mov    QWORD PTR [rsp+0x18],rbp
   3b565:	mov    rbx,QWORD PTR [rsp+0x30]
   3b56a:	mov    r13,rbp
   3b56d:	jmp    3b44b <mergesort_internal+0x12b>
   3b572:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3b57d:	nop    DWORD PTR [rax]

000000000003b580 <fmttime>:
   3b580:	push   r12
   3b582:	mov    r12,rsi
   3b585:	sub    rsp,0x10
   3b589:	mov    QWORD PTR [rsp+0x8],rdi
   3b58e:	lea    rdi,[rsp+0x8]
   3b593:	call   caa0 <localtime@plt>
   3b598:	test   rax,rax
   3b59b:	je     cc94 <fmttime.cold>
   3b5a1:	mov    rcx,rax
   3b5a4:	mov    rdx,r12
   3b5a7:	mov    esi,0x20
   3b5ac:	lea    rdi,[rip+0x4e80d]        # 89dc0 <output.8177>
   3b5b3:	call   cae0 <strftime@plt>
   3b5b8:	test   rax,rax
   3b5bb:	je     cc94 <fmttime.cold>
   3b5c1:	add    rsp,0x10
   3b5c5:	lea    rax,[rip+0x4e7f4]        # 89dc0 <output.8177>
   3b5cc:	pop    r12
   3b5ce:	ret    
   3b5cf:	nop

000000000003b5d0 <fnmatch_nocase>:
   3b5d0:	endbr64 
   3b5d4:	or     edx,0x10
   3b5d7:	jmp    be20 <fnmatch@plt>
   3b5dc:	nop    DWORD PTR [rax+0x0]

000000000003b5e0 <abort_run_with_timeout>:
   3b5e0:	endbr64 
   3b5e4:	push   rax
   3b5e5:	pop    rax
   3b5e6:	mov    esi,0xffffffff
   3b5eb:	lea    rdi,[rip+0x4e7ee]        # 89de0 <run_with_timeout_env>
   3b5f2:	sub    rsp,0x8
   3b5f6:	call   bf20 <__longjmp_chk@plt>
   3b5fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003b600 <file_exists_p.part.0>:
   3b600:	push   r12
   3b602:	mov    r12,rdi
   3b605:	push   rbp
   3b606:	mov    rbp,rsi
   3b609:	push   rbx
   3b60a:	sub    rsp,0xa0
   3b611:	mov    rax,QWORD PTR fs:0x28
   3b61a:	mov    QWORD PTR [rsp+0x98],rax
   3b622:	xor    eax,eax
   3b624:	call   c740 <__errno_location@plt>
   3b629:	mov    rdx,rsp
   3b62c:	mov    rsi,r12
   3b62f:	mov    edi,0x1
   3b634:	mov    DWORD PTR [rax],0x0
   3b63a:	mov    rbx,rax
   3b63d:	call   c350 <__xstat@plt>
   3b642:	test   eax,eax
   3b644:	jne    3b65a <file_exists_p.part.0+0x5a>
   3b646:	mov    eax,DWORD PTR [rsp+0x18]
   3b64a:	mov    edx,eax
   3b64c:	and    edx,0xf000
   3b652:	cmp    edx,0x8000
   3b658:	je     3b698 <file_exists_p.part.0+0x98>
   3b65a:	test   rbp,rbp
   3b65d:	je     3b66e <file_exists_p.part.0+0x6e>
   3b65f:	mov    eax,DWORD PTR [rbx]
   3b661:	mov    edx,0xd
   3b666:	test   eax,eax
   3b668:	cmove  eax,edx
   3b66b:	mov    DWORD PTR [rbp+0x0],eax
   3b66e:	mov    DWORD PTR [rbx],0x0
   3b674:	xor    eax,eax
   3b676:	mov    rcx,QWORD PTR [rsp+0x98]
   3b67e:	xor    rcx,QWORD PTR fs:0x28
   3b687:	jne    3b6fb <file_exists_p.part.0+0xfb>
   3b689:	add    rsp,0xa0
   3b690:	pop    rbx
   3b691:	pop    rbp
   3b692:	pop    r12
   3b694:	ret    
   3b695:	nop    DWORD PTR [rax]
   3b698:	test   ah,0x1
   3b69b:	jne    3b6d0 <file_exists_p.part.0+0xd0>
   3b69d:	test   al,0x20
   3b69f:	jne    3b6e8 <file_exists_p.part.0+0xe8>
   3b6a1:	test   al,0x4
   3b6a3:	je     3b65a <file_exists_p.part.0+0x5a>
   3b6a5:	test   rbp,rbp
   3b6a8:	je     3b6c2 <file_exists_p.part.0+0xc2>
   3b6aa:	mov    rax,QWORD PTR [rsp+0x8]
   3b6af:	mov    DWORD PTR [rbp+0x0],0x0
   3b6b6:	mov    QWORD PTR [rbp+0x8],rax
   3b6ba:	mov    rax,QWORD PTR [rsp]
   3b6be:	mov    QWORD PTR [rbp+0x10],rax
   3b6c2:	mov    eax,0x1
   3b6c7:	jmp    3b676 <file_exists_p.part.0+0x76>
   3b6c9:	nop    DWORD PTR [rax+0x0]
   3b6d0:	call   c850 <getuid@plt>
   3b6d5:	mov    r8d,eax
   3b6d8:	mov    eax,DWORD PTR [rsp+0x18]
   3b6dc:	cmp    r8d,DWORD PTR [rsp+0x1c]
   3b6e1:	jne    3b69d <file_exists_p.part.0+0x9d>
   3b6e3:	jmp    3b6a5 <file_exists_p.part.0+0xa5>
   3b6e5:	nop    DWORD PTR [rax]
   3b6e8:	mov    edi,DWORD PTR [rsp+0x20]
   3b6ec:	call   ca60 <group_member@plt>
   3b6f1:	test   eax,eax
   3b6f3:	jne    3b6a5 <file_exists_p.part.0+0xa5>
   3b6f5:	mov    eax,DWORD PTR [rsp+0x18]
   3b6f9:	jmp    3b6a1 <file_exists_p.part.0+0xa1>
   3b6fb:	call   c7b0 <__stack_chk_fail@plt>

000000000003b700 <subdir_p.part.0>:
   3b700:	cmp    BYTE PTR [rip+0x4ea09],0x0        # 8a110 <opt+0x90>
   3b707:	movsx  eax,BYTE PTR [rdi]
   3b70a:	je     3b727 <subdir_p.part.0+0x27>
   3b70c:	jmp    3b773 <subdir_p.part.0+0x73>
   3b70e:	xchg   ax,ax
   3b710:	movzx  edx,BYTE PTR [rsi]
   3b713:	test   dl,dl
   3b715:	je     3b780 <subdir_p.part.0+0x80>
   3b717:	cmp    dl,al
   3b719:	jne    3b780 <subdir_p.part.0+0x80>
   3b71b:	movzx  eax,BYTE PTR [rdi+0x1]
   3b71f:	add    rdi,0x1
   3b723:	add    rsi,0x1
   3b727:	test   al,al
   3b729:	jne    3b710 <subdir_p.part.0+0x10>
   3b72b:	movzx  edx,BYTE PTR [rsi]
   3b72e:	test   dl,dl
   3b730:	sete   al
   3b733:	cmp    dl,0x2f
   3b736:	sete   dl
   3b739:	or     eax,edx
   3b73b:	ret    
   3b73c:	nop    DWORD PTR [rax+0x0]
   3b740:	movsx  edx,BYTE PTR [rsi]
   3b743:	test   dl,dl
   3b745:	je     3b790 <subdir_p.part.0+0x90>
   3b747:	lea    r8d,[rax-0x41]
   3b74b:	lea    ecx,[rax+0x20]
   3b74e:	cmp    r8d,0x1a
   3b752:	lea    r8d,[rdx-0x41]
   3b756:	cmovb  eax,ecx
   3b759:	lea    ecx,[rdx+0x20]
   3b75c:	cmp    r8d,0x1a
   3b760:	cmovb  edx,ecx
   3b763:	cmp    edx,eax
   3b765:	jne    3b780 <subdir_p.part.0+0x80>
   3b767:	movsx  eax,BYTE PTR [rdi+0x1]
   3b76b:	add    rdi,0x1
   3b76f:	add    rsi,0x1
   3b773:	test   al,al
   3b775:	jne    3b740 <subdir_p.part.0+0x40>
   3b777:	jmp    3b72b <subdir_p.part.0+0x2b>
   3b779:	nop    DWORD PTR [rax+0x0]
   3b780:	xor    eax,eax
   3b782:	cmp    BYTE PTR [rdi],0x0
   3b785:	je     3b72b <subdir_p.part.0+0x2b>
   3b787:	ret    
   3b788:	nop    DWORD PTR [rax+rax*1+0x0]
   3b790:	cmp    BYTE PTR [rdi],0x0
   3b793:	sete   al
   3b796:	ret    
   3b797:	nop    WORD PTR [rax+rax*1+0x0]

000000000003b7a0 <dir_matches_p>:
   3b7a0:	cmp    BYTE PTR [rip+0x4e969],0x0        # 8a110 <opt+0x90>
   3b7a7:	push   r14
   3b7a9:	lea    r14,[rip+0xfffffffffffffe20]        # 3b5d0 <fnmatch_nocase>
   3b7b0:	push   r13
   3b7b2:	push   r12
   3b7b4:	mov    r12,rsi
   3b7b7:	push   rbp
   3b7b8:	push   rbx
   3b7b9:	mov    rbx,rdi
   3b7bc:	jne    3b7c5 <dir_matches_p+0x25>
   3b7be:	mov    r14,QWORD PTR [rip+0x43813]        # 7efd8 <fnmatch@GLIBC_2.2.5>
   3b7c5:	mov    rdi,QWORD PTR [rbx]
   3b7c8:	test   rdi,rdi
   3b7cb:	je     3b833 <dir_matches_p+0x93>
   3b7cd:	lea    r13,[rip+0x32bc0]        # 6e394 <urlchr_table+0x7f4>
   3b7d4:	jmp    3b7ff <dir_matches_p+0x5f>
   3b7d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b7e0:	mov    edx,0x1
   3b7e5:	mov    rsi,r12
   3b7e8:	mov    rdi,rbp
   3b7eb:	call   r14
   3b7ee:	test   eax,eax
   3b7f0:	je     3b830 <dir_matches_p+0x90>
   3b7f2:	mov    rdi,QWORD PTR [rbx+0x8]
   3b7f6:	add    rbx,0x8
   3b7fa:	test   rdi,rdi
   3b7fd:	je     3b833 <dir_matches_p+0x93>
   3b7ff:	xor    ebp,ebp
   3b801:	cmp    BYTE PTR [rdi],0x2f
   3b804:	mov    rsi,r13
   3b807:	sete   bpl
   3b80b:	add    rbp,rdi
   3b80e:	mov    rdi,rbp
   3b811:	call   c0a0 <strpbrk@plt>
   3b816:	test   rax,rax
   3b819:	jne    3b7e0 <dir_matches_p+0x40>
   3b81b:	cmp    BYTE PTR [rbp+0x0],0x0
   3b81f:	je     3b830 <dir_matches_p+0x90>
   3b821:	mov    rsi,r12
   3b824:	mov    rdi,rbp
   3b827:	call   3b700 <subdir_p.part.0>
   3b82c:	test   al,al
   3b82e:	je     3b7f2 <dir_matches_p+0x52>
   3b830:	mov    rdi,QWORD PTR [rbx]
   3b833:	test   rdi,rdi
   3b836:	pop    rbx
   3b837:	pop    rbp
   3b838:	setne  al
   3b83b:	pop    r12
   3b83d:	pop    r13
   3b83f:	pop    r14
   3b841:	ret    
   3b842:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3b84d:	nop    DWORD PTR [rax]

000000000003b850 <xstrdup_lower>:
   3b850:	endbr64 
   3b854:	sub    rsp,0x8
   3b858:	call   4ba50 <xstrdup>
   3b85d:	movzx  edx,BYTE PTR [rax]
   3b860:	test   dl,dl
   3b862:	je     3b88d <xstrdup_lower+0x3d>
   3b864:	mov    rcx,rax
   3b867:	nop    WORD PTR [rax+rax*1+0x0]
   3b870:	movsx  esi,dl
   3b873:	lea    edi,[rdx+0x20]
   3b876:	sub    esi,0x41
   3b879:	cmp    esi,0x1a
   3b87c:	cmovb  edx,edi
   3b87f:	add    rcx,0x1
   3b883:	mov    BYTE PTR [rcx-0x1],dl
   3b886:	movzx  edx,BYTE PTR [rcx]
   3b889:	test   dl,dl
   3b88b:	jne    3b870 <xstrdup_lower+0x20>
   3b88d:	add    rsp,0x8
   3b891:	ret    
   3b892:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3b89d:	nop    DWORD PTR [rax]

000000000003b8a0 <strdupdelim>:
   3b8a0:	endbr64 
   3b8a4:	test   rdi,rdi
   3b8a7:	je     3b8f8 <strdupdelim+0x58>
   3b8a9:	push   rbp
   3b8aa:	mov    rbp,rdi
   3b8ad:	push   rbx
   3b8ae:	sub    rsp,0x8
   3b8b2:	cmp    rdi,rsi
   3b8b5:	ja     3b8e0 <strdupdelim+0x40>
   3b8b7:	mov    rbx,rsi
   3b8ba:	sub    rbx,rdi
   3b8bd:	lea    rdi,[rbx+0x1]
   3b8c1:	call   4b850 <xmalloc>
   3b8c6:	mov    rdx,rbx
   3b8c9:	mov    rsi,rbp
   3b8cc:	mov    rdi,rax
   3b8cf:	call   cb30 <memcpy@plt>
   3b8d4:	mov    BYTE PTR [rax+rbx*1],0x0
   3b8d8:	add    rsp,0x8
   3b8dc:	pop    rbx
   3b8dd:	pop    rbp
   3b8de:	ret    
   3b8df:	nop
   3b8e0:	add    rsp,0x8
   3b8e4:	lea    rdi,[rip+0x32b2c]        # 6e417 <urlchr_table+0x877>
   3b8eb:	pop    rbx
   3b8ec:	pop    rbp
   3b8ed:	jmp    4ba50 <xstrdup>
   3b8f2:	nop    WORD PTR [rax+rax*1+0x0]
   3b8f8:	lea    rdi,[rip+0x32b18]        # 6e417 <urlchr_table+0x877>
   3b8ff:	jmp    4ba50 <xstrdup>
   3b904:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3b90f:	nop

000000000003b910 <sepstring>:
   3b910:	endbr64 
   3b914:	push   r15
   3b916:	push   r14
   3b918:	push   r13
   3b91a:	push   r12
   3b91c:	push   rbp
   3b91d:	push   rbx
   3b91e:	sub    rsp,0x18
   3b922:	test   rdi,rdi
   3b925:	je     3ba20 <sepstring+0x110>
   3b92b:	movzx  eax,BYTE PTR [rdi]
   3b92e:	mov    r12,rdi
   3b931:	test   al,al
   3b933:	je     3ba20 <sepstring+0x110>
   3b939:	mov    r14,rdi
   3b93c:	xor    edx,edx
   3b93e:	xor    r8d,r8d
   3b941:	xor    r15d,r15d
   3b944:	nop    DWORD PTR [rax+0x0]
   3b948:	lea    ebp,[rdx+0x2]
   3b94b:	lea    r13,[r12+0x1]
   3b950:	movsxd rbp,ebp
   3b953:	shl    rbp,0x3
   3b957:	lea    rbx,[rbp-0x10]
   3b95b:	cmp    al,0x2c
   3b95d:	je     3b9b0 <sepstring+0xa0>
   3b95f:	movzx  eax,BYTE PTR [r12+0x1]
   3b965:	mov    r12,r13
   3b968:	test   al,al
   3b96a:	jne    3b948 <sepstring+0x38>
   3b96c:	mov    rdi,r8
   3b96f:	mov    rsi,rbp
   3b972:	call   4b870 <xrealloc>
   3b977:	mov    rsi,r13
   3b97a:	mov    rdi,r14
   3b97d:	mov    r12,rax
   3b980:	add    rbx,rax
   3b983:	call   3b8a0 <strdupdelim>
   3b988:	mov    QWORD PTR [rbx],rax
   3b98b:	mov    QWORD PTR [r12+r15*8+0x8],0x0
   3b994:	add    rsp,0x18
   3b998:	mov    rax,r12
   3b99b:	pop    rbx
   3b99c:	pop    rbp
   3b99d:	pop    r12
   3b99f:	pop    r13
   3b9a1:	pop    r14
   3b9a3:	pop    r15
   3b9a5:	ret    
   3b9a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3b9b0:	mov    rdi,r8
   3b9b3:	mov    rsi,rbp
   3b9b6:	mov    DWORD PTR [rsp+0xc],edx
   3b9ba:	call   4b870 <xrealloc>
   3b9bf:	mov    rsi,r12
   3b9c2:	mov    rdi,r14
   3b9c5:	add    rbx,rax
   3b9c8:	mov    QWORD PTR [rsp],rax
   3b9cc:	call   3b8a0 <strdupdelim>
   3b9d1:	mov    r8,QWORD PTR [rsp]
   3b9d5:	mov    edx,DWORD PTR [rsp+0xc]
   3b9d9:	mov    QWORD PTR [rbx],rax
   3b9dc:	lea    rbx,[rbp-0x8]
   3b9e0:	mov    QWORD PTR [r8+rbp*1-0x8],0x0
   3b9e9:	add    edx,0x1
   3b9ec:	movsxd r15,edx
   3b9ef:	movzx  eax,BYTE PTR [r13+0x0]
   3b9f4:	cmp    al,0xd
   3b9f6:	jg     3ba10 <sepstring+0x100>
   3b9f8:	cmp    al,0x8
   3b9fa:	jg     3ba14 <sepstring+0x104>
   3b9fc:	add    rbp,0x8
   3ba00:	mov    r14,r13
   3ba03:	mov    r12,r13
   3ba06:	jmp    3b968 <sepstring+0x58>
   3ba0b:	nop    DWORD PTR [rax+rax*1+0x0]
   3ba10:	cmp    al,0x20
   3ba12:	jne    3b9fc <sepstring+0xec>
   3ba14:	add    r13,0x1
   3ba18:	jmp    3b9ef <sepstring+0xdf>
   3ba1a:	nop    WORD PTR [rax+rax*1+0x0]
   3ba20:	xor    r12d,r12d
   3ba23:	jmp    3b994 <sepstring+0x84>
   3ba28:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003ba30 <aprintf>:
   3ba30:	endbr64 
   3ba34:	push   r12
   3ba36:	mov    r10,rdi
   3ba39:	sub    rsp,0xe0
   3ba40:	mov    QWORD PTR [rsp+0x38],rsi
   3ba45:	mov    QWORD PTR [rsp+0x40],rdx
   3ba4a:	mov    QWORD PTR [rsp+0x48],rcx
   3ba4f:	mov    QWORD PTR [rsp+0x50],r8
   3ba54:	mov    QWORD PTR [rsp+0x58],r9
   3ba59:	test   al,al
   3ba5b:	je     3ba97 <aprintf+0x67>
   3ba5d:	movaps XMMWORD PTR [rsp+0x60],xmm0
   3ba62:	movaps XMMWORD PTR [rsp+0x70],xmm1
   3ba67:	movaps XMMWORD PTR [rsp+0x80],xmm2
   3ba6f:	movaps XMMWORD PTR [rsp+0x90],xmm3
   3ba77:	movaps XMMWORD PTR [rsp+0xa0],xmm4
   3ba7f:	movaps XMMWORD PTR [rsp+0xb0],xmm5
   3ba87:	movaps XMMWORD PTR [rsp+0xc0],xmm6
   3ba8f:	movaps XMMWORD PTR [rsp+0xd0],xmm7
   3ba97:	mov    rax,QWORD PTR fs:0x28
   3baa0:	mov    QWORD PTR [rsp+0x28],rax
   3baa5:	xor    eax,eax
   3baa7:	lea    rcx,[rsp+0x10]
   3baac:	lea    rdi,[rsp+0x8]
   3bab1:	mov    rdx,r10
   3bab4:	lea    rax,[rsp+0xf0]
   3babc:	mov    esi,0x1
   3bac1:	mov    DWORD PTR [rsp+0x10],0x8
   3bac9:	mov    QWORD PTR [rsp+0x18],rax
   3bace:	lea    rax,[rsp+0x30]
   3bad3:	mov    DWORD PTR [rsp+0x14],0x30
   3badb:	mov    QWORD PTR [rsp+0x20],rax
   3bae0:	call   cb70 <__vasprintf_chk@plt>
   3bae5:	mov    r8d,eax
   3bae8:	mov    rax,QWORD PTR [rsp+0x8]
   3baed:	test   r8d,r8d
   3baf0:	js     3bb10 <aprintf+0xe0>
   3baf2:	mov    rdx,QWORD PTR [rsp+0x28]
   3baf7:	xor    rdx,QWORD PTR fs:0x28
   3bb00:	jne    3bb1e <aprintf+0xee>
   3bb02:	add    rsp,0xe0
   3bb09:	pop    r12
   3bb0b:	ret    
   3bb0c:	nop    DWORD PTR [rax+0x0]
   3bb10:	call   c740 <__errno_location@plt>
   3bb15:	cmp    DWORD PTR [rax],0xc
   3bb18:	je     3bb23 <aprintf+0xf3>
   3bb1a:	xor    eax,eax
   3bb1c:	jmp    3baf2 <aprintf+0xc2>
   3bb1e:	call   c7b0 <__stack_chk_fail@plt>
   3bb23:	xor    edi,edi
   3bb25:	call   2da10 <log_set_save_context>
   3bb2a:	mov    r12,QWORD PTR [rip+0x4e8ef]        # 8a420 <exec_name>
   3bb31:	mov    edx,0x5
   3bb36:	xor    edi,edi
   3bb38:	lea    rsi,[rip+0x32969]        # 6e4a8 <urlchr_table+0x908>
   3bb3f:	call   c780 <dcgettext@plt>
   3bb44:	mov    edi,0x3
   3bb49:	lea    rcx,[rip+0x32849]        # 6e399 <urlchr_table+0x7f9>
   3bb50:	mov    rdx,r12
   3bb53:	mov    rsi,rax
   3bb56:	xor    eax,eax
   3bb58:	call   2e0a0 <logprintf>
   3bb5d:	mov    edi,0x1
   3bb62:	call   c060 <exit@plt>
   3bb67:	nop    WORD PTR [rax+rax*1+0x0]

000000000003bb70 <strlcpy>:
   3bb70:	endbr64 
   3bb74:	mov    rax,rsi
   3bb77:	test   rdx,rdx
   3bb7a:	je     3bbb0 <strlcpy+0x40>
   3bb7c:	lea    rcx,[rdi+rdx*1-0x1]
   3bb81:	mov    rdx,rsi
   3bb84:	jmp    3bb9f <strlcpy+0x2f>
   3bb86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3bb90:	movzx  eax,BYTE PTR [rdx-0x1]
   3bb94:	add    rdi,0x1
   3bb98:	mov    BYTE PTR [rdi-0x1],al
   3bb9b:	test   al,al
   3bb9d:	je     3bbc8 <strlcpy+0x58>
   3bb9f:	mov    rax,rdx
   3bba2:	lea    rdx,[rdx+0x1]
   3bba6:	cmp    rdi,rcx
   3bba9:	jne    3bb90 <strlcpy+0x20>
   3bbab:	mov    BYTE PTR [rdi],0x0
   3bbae:	xchg   ax,ax
   3bbb0:	add    rax,0x1
   3bbb4:	cmp    BYTE PTR [rax-0x1],0x0
   3bbb8:	jne    3bbb0 <strlcpy+0x40>
   3bbba:	sub    rax,rsi
   3bbbd:	sub    rax,0x1
   3bbc1:	ret    
   3bbc2:	nop    WORD PTR [rax+rax*1+0x0]
   3bbc8:	sub    rdx,rsi
   3bbcb:	lea    rax,[rdx-0x1]
   3bbcf:	ret    

000000000003bbd0 <concat_strings>:
   3bbd0:	endbr64 
   3bbd4:	push   r12
   3bbd6:	push   rbp
   3bbd7:	push   rbx
   3bbd8:	sub    rsp,0x50
   3bbdc:	mov    QWORD PTR [rsp+0x28],rsi
   3bbe1:	mov    QWORD PTR [rsp+0x30],rdx
   3bbe6:	mov    QWORD PTR [rsp+0x38],rcx
   3bbeb:	mov    QWORD PTR [rsp+0x40],r8
   3bbf0:	mov    QWORD PTR [rsp+0x48],r9
   3bbf5:	mov    rax,QWORD PTR fs:0x28
   3bbfe:	mov    QWORD PTR [rsp+0x18],rax
   3bc03:	xor    eax,eax
   3bc05:	test   rdi,rdi
   3bc08:	je     3bd08 <concat_strings+0x138>
   3bc0e:	lea    rax,[rsp+0x70]
   3bc13:	mov    DWORD PTR [rsp],0x8
   3bc1a:	mov    rbp,rdi
   3bc1d:	xor    ebx,ebx
   3bc1f:	mov    QWORD PTR [rsp+0x8],rax
   3bc24:	lea    rax,[rsp+0x20]
   3bc29:	mov    QWORD PTR [rsp+0x10],rax
   3bc2e:	mov    r12,rax
   3bc31:	jmp    3bc4b <concat_strings+0x7b>
   3bc33:	nop    DWORD PTR [rax+rax*1+0x0]
   3bc38:	mov    edx,eax
   3bc3a:	add    eax,0x8
   3bc3d:	add    rdx,r12
   3bc40:	mov    DWORD PTR [rsp],eax
   3bc43:	mov    rdi,QWORD PTR [rdx]
   3bc46:	test   rdi,rdi
   3bc49:	je     3bc71 <concat_strings+0xa1>
   3bc4b:	call   c310 <strlen@plt>
   3bc50:	add    rbx,rax
   3bc53:	mov    eax,DWORD PTR [rsp]
   3bc56:	cmp    eax,0x2f
   3bc59:	jbe    3bc38 <concat_strings+0x68>
   3bc5b:	mov    rdx,QWORD PTR [rsp+0x8]
   3bc60:	mov    rdi,QWORD PTR [rdx]
   3bc63:	lea    rax,[rdx+0x8]
   3bc67:	mov    QWORD PTR [rsp+0x8],rax
   3bc6c:	test   rdi,rdi
   3bc6f:	jne    3bc4b <concat_strings+0x7b>
   3bc71:	add    rbx,0x1
   3bc75:	mov    rdi,rbx
   3bc78:	call   4b850 <xmalloc>
   3bc7d:	mov    DWORD PTR [rsp],0x8
   3bc84:	xor    r8d,r8d
   3bc87:	mov    r9,rax
   3bc8a:	lea    rax,[rsp+0x70]
   3bc8f:	mov    QWORD PTR [rsp+0x8],rax
   3bc94:	lea    rax,[rsp+0x20]
   3bc99:	mov    QWORD PTR [rsp+0x10],rax
   3bc9e:	jmp    3bcb5 <concat_strings+0xe5>
   3bca0:	mov    edx,eax
   3bca2:	add    rdx,QWORD PTR [rsp+0x10]
   3bca7:	add    eax,0x8
   3bcaa:	mov    rbp,QWORD PTR [rdx]
   3bcad:	mov    DWORD PTR [rsp],eax
   3bcb0:	test   rbp,rbp
   3bcb3:	je     3bce8 <concat_strings+0x118>
   3bcb5:	mov    rdx,rbx
   3bcb8:	lea    rdi,[r9+r8*1]
   3bcbc:	mov    rsi,rbp
   3bcbf:	sub    rdx,r8
   3bcc2:	call   3bb70 <strlcpy>
   3bcc7:	add    r8,rax
   3bcca:	mov    eax,DWORD PTR [rsp]
   3bccd:	cmp    eax,0x2f
   3bcd0:	jbe    3bca0 <concat_strings+0xd0>
   3bcd2:	mov    rdx,QWORD PTR [rsp+0x8]
   3bcd7:	mov    rbp,QWORD PTR [rdx]
   3bcda:	lea    rax,[rdx+0x8]
   3bcde:	mov    QWORD PTR [rsp+0x8],rax
   3bce3:	test   rbp,rbp
   3bce6:	jne    3bcb5 <concat_strings+0xe5>
   3bce8:	mov    rax,QWORD PTR [rsp+0x18]
   3bced:	xor    rax,QWORD PTR fs:0x28
   3bcf6:	jne    3bd0d <concat_strings+0x13d>
   3bcf8:	add    rsp,0x50
   3bcfc:	mov    rax,r9
   3bcff:	pop    rbx
   3bd00:	pop    rbp
   3bd01:	pop    r12
   3bd03:	ret    
   3bd04:	nop    DWORD PTR [rax+0x0]
   3bd08:	xor    r9d,r9d
   3bd0b:	jmp    3bce8 <concat_strings+0x118>
   3bd0d:	call   c7b0 <__stack_chk_fail@plt>
   3bd12:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3bd1d:	nop    DWORD PTR [rax]

000000000003bd20 <time_str>:
   3bd20:	endbr64 
   3bd24:	lea    rsi,[rip+0x2a0c2]        # 65ded <yy_accept+0xd2d>
   3bd2b:	jmp    3b580 <fmttime>

000000000003bd30 <datetime_str>:
   3bd30:	endbr64 
   3bd34:	lea    rsi,[rip+0x32666]        # 6e3a1 <urlchr_table+0x801>
   3bd3b:	jmp    3b580 <fmttime>

000000000003bd40 <touch>:
   3bd40:	endbr64 
   3bd44:	push   r12
   3bd46:	mov    r12,rdi
   3bd49:	xor    edi,edi
   3bd4b:	sub    rsp,0x20
   3bd4f:	mov    rax,QWORD PTR fs:0x28
   3bd58:	mov    QWORD PTR [rsp+0x18],rax
   3bd5d:	xor    eax,eax
   3bd5f:	mov    QWORD PTR [rsp+0x8],rsi
   3bd64:	call   cbf0 <time@plt>
   3bd69:	mov    rsi,rsp
   3bd6c:	mov    rdi,r12
   3bd6f:	mov    QWORD PTR [rsp],rax
   3bd73:	call   bf30 <utime@plt>
   3bd78:	cmp    eax,0xffffffff
   3bd7b:	je     3bd98 <touch+0x58>
   3bd7d:	mov    rax,QWORD PTR [rsp+0x18]
   3bd82:	xor    rax,QWORD PTR fs:0x28
   3bd8b:	jne    3bdbf <touch+0x7f>
   3bd8d:	add    rsp,0x20
   3bd91:	pop    r12
   3bd93:	ret    
   3bd94:	nop    DWORD PTR [rax+0x0]
   3bd98:	call   c740 <__errno_location@plt>
   3bd9d:	mov    edi,DWORD PTR [rax]
   3bd9f:	call   c540 <strerror@plt>
   3bda4:	mov    rdx,r12
   3bda7:	mov    edi,0x1
   3bdac:	lea    rsi,[rip+0x32600]        # 6e3b3 <urlchr_table+0x813>
   3bdb3:	mov    rcx,rax
   3bdb6:	xor    eax,eax
   3bdb8:	call   2e0a0 <logprintf>
   3bdbd:	jmp    3bd7d <touch+0x3d>
   3bdbf:	call   c7b0 <__stack_chk_fail@plt>
   3bdc4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3bdcf:	nop

000000000003bdd0 <remove_link>:
   3bdd0:	endbr64 
   3bdd4:	push   r14
   3bdd6:	mov    rsi,rdi
   3bdd9:	push   r13
   3bddb:	push   r12
   3bddd:	xor    r12d,r12d
   3bde0:	push   rbp
   3bde1:	mov    rbp,rdi
   3bde4:	mov    edi,0x1
   3bde9:	sub    rsp,0xa8
   3bdf0:	mov    rax,QWORD PTR fs:0x28
   3bdf9:	mov    QWORD PTR [rsp+0x98],rax
   3be01:	xor    eax,eax
   3be03:	mov    rdx,rsp
   3be06:	call   c8f0 <__lxstat@plt>
   3be0b:	test   eax,eax
   3be0d:	jne    3be22 <remove_link+0x52>
   3be0f:	mov    r12d,eax
   3be12:	mov    eax,DWORD PTR [rsp+0x18]
   3be16:	and    eax,0xf000
   3be1b:	cmp    eax,0xa000
   3be20:	je     3be50 <remove_link+0x80>
   3be22:	mov    rax,QWORD PTR [rsp+0x98]
   3be2a:	xor    rax,QWORD PTR fs:0x28
   3be33:	jne    3bec3 <remove_link+0xf3>
   3be39:	add    rsp,0xa8
   3be40:	mov    eax,r12d
   3be43:	pop    rbp
   3be44:	pop    r12
   3be46:	pop    r13
   3be48:	pop    r14
   3be4a:	ret    
   3be4b:	nop    DWORD PTR [rax+rax*1+0x0]
   3be50:	cmp    BYTE PTR [rip+0x4e464],0x0        # 8a2bb <opt+0x23b>
   3be57:	jne    3beb0 <remove_link+0xe0>
   3be59:	mov    rdi,rbp
   3be5c:	call   c120 <unlink@plt>
   3be61:	mov    r12d,eax
   3be64:	test   eax,eax
   3be66:	je     3be22 <remove_link+0x52>
   3be68:	call   c740 <__errno_location@plt>
   3be6d:	mov    edi,DWORD PTR [rax]
   3be6f:	call   c540 <strerror@plt>
   3be74:	mov    rdi,rbp
   3be77:	mov    r14,rax
   3be7a:	call   4b5b0 <quote>
   3be7f:	xor    edi,edi
   3be81:	mov    edx,0x5
   3be86:	lea    rsi,[rip+0x3265b]        # 6e4e8 <urlchr_table+0x948>
   3be8d:	mov    r13,rax
   3be90:	call   c780 <dcgettext@plt>
   3be95:	mov    rcx,r14
   3be98:	mov    rdx,r13
   3be9b:	xor    edi,edi
   3be9d:	mov    rsi,rax
   3bea0:	xor    eax,eax
   3bea2:	call   2e0a0 <logprintf>
   3bea7:	jmp    3be22 <remove_link+0x52>
   3beac:	nop    DWORD PTR [rax+0x0]
   3beb0:	mov    rsi,rbp
   3beb3:	lea    rdi,[rip+0x32508]        # 6e3c2 <urlchr_table+0x822>
   3beba:	xor    eax,eax
   3bebc:	call   2e250 <debug_logprintf>
   3bec1:	jmp    3be59 <remove_link+0x89>
   3bec3:	call   c7b0 <__stack_chk_fail@plt>
   3bec8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003bed0 <file_exists_p>:
   3bed0:	endbr64 
   3bed4:	test   rdi,rdi
   3bed7:	je     3bee0 <file_exists_p+0x10>
   3bed9:	jmp    3b600 <file_exists_p.part.0>
   3bede:	xchg   ax,ax
   3bee0:	xor    eax,eax
   3bee2:	ret    
   3bee3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3beee:	xchg   ax,ax

000000000003bef0 <file_non_directory_p>:
   3bef0:	endbr64 
   3bef4:	sub    rsp,0xa8
   3befb:	mov    rsi,rdi
   3befe:	mov    edi,0x1
   3bf03:	mov    rax,QWORD PTR fs:0x28
   3bf0c:	mov    QWORD PTR [rsp+0x98],rax
   3bf14:	xor    eax,eax
   3bf16:	mov    rdx,rsp
   3bf19:	call   c8f0 <__lxstat@plt>
   3bf1e:	mov    r8d,eax
   3bf21:	xor    eax,eax
   3bf23:	test   r8d,r8d
   3bf26:	jne    3bf39 <file_non_directory_p+0x49>
   3bf28:	mov    eax,DWORD PTR [rsp+0x18]
   3bf2c:	and    eax,0xf000
   3bf31:	cmp    eax,0x4000
   3bf36:	setne  al
   3bf39:	mov    rcx,QWORD PTR [rsp+0x98]
   3bf41:	xor    rcx,QWORD PTR fs:0x28
   3bf4a:	jne    3bf54 <file_non_directory_p+0x64>
   3bf4c:	add    rsp,0xa8
   3bf53:	ret    
   3bf54:	call   c7b0 <__stack_chk_fail@plt>
   3bf59:	nop    DWORD PTR [rax+0x0]

000000000003bf60 <file_size>:
   3bf60:	endbr64 
   3bf64:	push   r12
   3bf66:	lea    rsi,[rip+0x29ebd]        # 65e2a <yy_accept+0xd6a>
   3bf6d:	push   rbp
   3bf6e:	sub    rsp,0x8
   3bf72:	call   c0f0 <fopen@plt>
   3bf77:	test   rax,rax
   3bf7a:	je     3bfac <file_size+0x4c>
   3bf7c:	mov    rbp,rax
   3bf7f:	mov    edx,0x2
   3bf84:	xor    esi,esi
   3bf86:	mov    rdi,rax
   3bf89:	call   4be00 <rpl_fseeko>
   3bf8e:	mov    rdi,rbp
   3bf91:	call   c4f0 <ftello@plt>
   3bf96:	mov    rdi,rbp
   3bf99:	mov    r12,rax
   3bf9c:	call   c8b0 <fclose@plt>
   3bfa1:	add    rsp,0x8
   3bfa5:	mov    rax,r12
   3bfa8:	pop    rbp
   3bfa9:	pop    r12
   3bfab:	ret    
   3bfac:	mov    r12,0xffffffffffffffff
   3bfb3:	jmp    3bfa1 <file_size+0x41>
   3bfb5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000003bfc0 <fopen_excl>:
   3bfc0:	endbr64 
   3bfc4:	push   rbx
   3bfc5:	xor    eax,eax
   3bfc7:	mov    ebx,esi
   3bfc9:	mov    edx,0x1b6
   3bfce:	mov    esi,0xc1
   3bfd3:	call   cb50 <open@plt>
   3bfd8:	test   eax,eax
   3bfda:	js     3c000 <fopen_excl+0x40>
   3bfdc:	test   ebx,ebx
   3bfde:	mov    edi,eax
   3bfe0:	lea    rsi,[rip+0x1f2c2]        # 5b2a9 <_IO_stdin_used+0x2a9>
   3bfe7:	pop    rbx
   3bfe8:	lea    rax,[rip+0x31423]        # 6d412 <eta_str.8886+0x69a>
   3bfef:	cmove  rsi,rax
   3bff3:	jmp    c440 <fdopen@plt>
   3bff8:	nop    DWORD PTR [rax+rax*1+0x0]
   3c000:	xor    eax,eax
   3c002:	pop    rbx
   3c003:	ret    
   3c004:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3c00f:	nop

000000000003c010 <fopen_stat>:
   3c010:	endbr64 
   3c014:	push   r13
   3c016:	mov    r13,rdi
   3c019:	push   r12
   3c01b:	push   rbx
   3c01c:	mov    rbx,rdx
   3c01f:	sub    rsp,0xa0
   3c026:	mov    rax,QWORD PTR fs:0x28
   3c02f:	mov    QWORD PTR [rsp+0x98],rax
   3c037:	xor    eax,eax
   3c039:	call   c0f0 <fopen@plt>
   3c03e:	mov    r12,rax
   3c041:	test   rax,rax
   3c044:	je     3c120 <fopen_stat+0x110>
   3c04a:	mov    rdi,rax
   3c04d:	call   be80 <fileno@plt>
   3c052:	mov    esi,eax
   3c054:	test   eax,eax
   3c056:	js     3c108 <fopen_stat+0xf8>
   3c05c:	mov    rdx,rsp
   3c05f:	xor    eax,eax
   3c061:	mov    ecx,0x12
   3c066:	mov    rdi,rdx
   3c069:	rep stos QWORD PTR es:[rdi],rax
   3c06c:	mov    edi,0x1
   3c071:	call   c710 <__fxstat@plt>
   3c076:	mov    edx,0x5
   3c07b:	lea    rsi,[rip+0x3248e]        # 6e510 <urlchr_table+0x970>
   3c082:	cmp    eax,0xffffffff
   3c085:	je     3c0dc <fopen_stat+0xcc>
   3c087:	test   rbx,rbx
   3c08a:	je     3c0a1 <fopen_stat+0x91>
   3c08c:	mov    rax,QWORD PTR [rbx+0x10]
   3c090:	cmp    QWORD PTR [rsp],rax
   3c094:	jne    3c0d0 <fopen_stat+0xc0>
   3c096:	mov    rax,QWORD PTR [rbx+0x8]
   3c09a:	cmp    QWORD PTR [rsp+0x8],rax
   3c09f:	jne    3c0d0 <fopen_stat+0xc0>
   3c0a1:	mov    rax,QWORD PTR [rsp+0x98]
   3c0a9:	xor    rax,QWORD PTR fs:0x28
   3c0b2:	jne    3c14a <fopen_stat+0x13a>
   3c0b8:	add    rsp,0xa0
   3c0bf:	mov    rax,r12
   3c0c2:	pop    rbx
   3c0c3:	pop    r12
   3c0c5:	pop    r13
   3c0c7:	ret    
   3c0c8:	nop    DWORD PTR [rax+rax*1+0x0]
   3c0d0:	mov    edx,0x5
   3c0d5:	lea    rsi,[rip+0x32464]        # 6e540 <urlchr_table+0x9a0>
   3c0dc:	xor    edi,edi
   3c0de:	call   c780 <dcgettext@plt>
   3c0e3:	mov    rdx,r13
   3c0e6:	mov    edi,0x1
   3c0eb:	mov    rsi,rax
   3c0ee:	xor    eax,eax
   3c0f0:	call   2e0a0 <logprintf>
   3c0f5:	mov    rdi,r12
   3c0f8:	xor    r12d,r12d
   3c0fb:	call   c8b0 <fclose@plt>
   3c100:	jmp    3c0a1 <fopen_stat+0x91>
   3c102:	nop    WORD PTR [rax+rax*1+0x0]
   3c108:	mov    edx,0x5
   3c10d:	lea    rsi,[rip+0x322e0]        # 6e3f4 <urlchr_table+0x854>
   3c114:	jmp    3c0dc <fopen_stat+0xcc>
   3c116:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3c120:	xor    edi,edi
   3c122:	mov    edx,0x5
   3c127:	lea    rsi,[rip+0x322ad]        # 6e3db <urlchr_table+0x83b>
   3c12e:	call   c780 <dcgettext@plt>
   3c133:	mov    rdx,r13
   3c136:	mov    edi,0x1
   3c13b:	mov    rsi,rax
   3c13e:	xor    eax,eax
   3c140:	call   2e0a0 <logprintf>
   3c145:	jmp    3c0a1 <fopen_stat+0x91>
   3c14a:	call   c7b0 <__stack_chk_fail@plt>
   3c14f:	nop

000000000003c150 <open_stat>:
   3c150:	endbr64 
   3c154:	push   r14
   3c156:	push   r13
   3c158:	mov    r13,rdi
   3c15b:	push   r12
   3c15d:	push   rbx
   3c15e:	mov    rbx,rcx
   3c161:	sub    rsp,0xa8
   3c168:	mov    rax,QWORD PTR fs:0x28
   3c171:	mov    QWORD PTR [rsp+0x98],rax
   3c179:	xor    eax,eax
   3c17b:	call   cb50 <open@plt>
   3c180:	test   eax,eax
   3c182:	js     3c22d <open_stat+0xdd>
   3c188:	mov    rdx,rsp
   3c18b:	mov    r12d,eax
   3c18e:	mov    ecx,0x12
   3c193:	xor    eax,eax
   3c195:	mov    rdi,rdx
   3c198:	mov    esi,r12d
   3c19b:	rep stos QWORD PTR es:[rdi],rax
   3c19e:	mov    edi,0x1
   3c1a3:	call   c710 <__fxstat@plt>
   3c1a8:	cmp    eax,0xffffffff
   3c1ab:	je     3c26f <open_stat+0x11f>
   3c1b1:	test   rbx,rbx
   3c1b4:	je     3c1cb <open_stat+0x7b>
   3c1b6:	mov    rax,QWORD PTR [rbx+0x10]
   3c1ba:	cmp    QWORD PTR [rsp],rax
   3c1be:	jne    3c1f8 <open_stat+0xa8>
   3c1c0:	mov    rax,QWORD PTR [rbx+0x8]
   3c1c4:	cmp    QWORD PTR [rsp+0x8],rax
   3c1c9:	jne    3c1f8 <open_stat+0xa8>
   3c1cb:	mov    rax,QWORD PTR [rsp+0x98]
   3c1d3:	xor    rax,QWORD PTR fs:0x28
   3c1dc:	jne    3c2b9 <open_stat+0x169>
   3c1e2:	add    rsp,0xa8
   3c1e9:	mov    eax,r12d
   3c1ec:	pop    rbx
   3c1ed:	pop    r12
   3c1ef:	pop    r13
   3c1f1:	pop    r14
   3c1f3:	ret    
   3c1f4:	nop    DWORD PTR [rax+0x0]
   3c1f8:	mov    edx,0x5
   3c1fd:	lea    rsi,[rip+0x323cc]        # 6e5d0 <urlchr_table+0xa30>
   3c204:	xor    edi,edi
   3c206:	call   c780 <dcgettext@plt>
   3c20b:	mov    rdx,r13
   3c20e:	mov    edi,0x1
   3c213:	mov    rsi,rax
   3c216:	xor    eax,eax
   3c218:	call   2e0a0 <logprintf>
   3c21d:	mov    edi,r12d
   3c220:	mov    r12d,0xffffffff
   3c226:	call   bf10 <close@plt>
   3c22b:	jmp    3c1cb <open_stat+0x7b>
   3c22d:	call   c740 <__errno_location@plt>
   3c232:	mov    edi,DWORD PTR [rax]
   3c234:	call   c540 <strerror@plt>
   3c239:	mov    edx,0x5
   3c23e:	lea    rsi,[rip+0x3233b]        # 6e580 <urlchr_table+0x9e0>
   3c245:	xor    edi,edi
   3c247:	mov    r12,rax
   3c24a:	call   c780 <dcgettext@plt>
   3c24f:	mov    rcx,r12
   3c252:	mov    rdx,r13
   3c255:	mov    edi,0x1
   3c25a:	mov    rsi,rax
   3c25d:	xor    eax,eax
   3c25f:	mov    r12d,0xffffffff
   3c265:	call   2e0a0 <logprintf>
   3c26a:	jmp    3c1cb <open_stat+0x7b>
   3c26f:	call   c740 <__errno_location@plt>
   3c274:	mov    edi,DWORD PTR [rax]
   3c276:	call   c540 <strerror@plt>
   3c27b:	mov    edx,0x5
   3c280:	lea    rsi,[rip+0x32321]        # 6e5a8 <urlchr_table+0xa08>
   3c287:	xor    edi,edi
   3c289:	mov    r14,rax
   3c28c:	call   c780 <dcgettext@plt>
   3c291:	mov    rcx,r14
   3c294:	mov    rdx,r13
   3c297:	mov    edi,0x1
   3c29c:	mov    rsi,rax
   3c29f:	xor    eax,eax
   3c2a1:	call   2e0a0 <logprintf>
   3c2a6:	mov    edi,r12d
   3c2a9:	mov    r12d,0xffffffff
   3c2af:	call   bf10 <close@plt>
   3c2b4:	jmp    3c1cb <open_stat+0x7b>
   3c2b9:	call   c7b0 <__stack_chk_fail@plt>
   3c2be:	xchg   ax,ax

000000000003c2c0 <make_directory>:
   3c2c0:	endbr64 
   3c2c4:	push   r13
   3c2c6:	push   r12
   3c2c8:	push   rbp
   3c2c9:	mov    rbp,rdi
   3c2cc:	push   rbx
   3c2cd:	sub    rsp,0x418
   3c2d4:	mov    rax,QWORD PTR fs:0x28
   3c2dd:	mov    QWORD PTR [rsp+0x408],rax
   3c2e5:	xor    eax,eax
   3c2e7:	call   c310 <strlen@plt>
   3c2ec:	cmp    rax,0x3ff
   3c2f2:	ja     3c3a0 <make_directory+0xe0>
   3c2f8:	mov    r12,rsp
   3c2fb:	mov    rsi,rbp
   3c2fe:	lea    rdx,[rax+0x1]
   3c302:	mov    ecx,0x400
   3c307:	mov    rdi,r12
   3c30a:	mov    rbp,r12
   3c30d:	call   c170 <__memcpy_chk@plt>
   3c312:	xor    ebx,ebx
   3c314:	cmp    BYTE PTR [rbp+0x0],0x2f
   3c318:	sete   bl
   3c31b:	add    rbx,rbp
   3c31e:	movzx  eax,BYTE PTR [rbx]
   3c321:	test   al,al
   3c323:	je     3c335 <make_directory+0x75>
   3c325:	cmp    al,0x2f
   3c327:	je     3c380 <make_directory+0xc0>
   3c329:	movzx  eax,BYTE PTR [rbx+0x1]
   3c32d:	add    rbx,0x1
   3c331:	test   al,al
   3c333:	jne    3c325 <make_directory+0x65>
   3c335:	xor    esi,esi
   3c337:	mov    rdi,rbp
   3c33a:	xor    r13d,r13d
   3c33d:	call   3b600 <file_exists_p.part.0>
   3c342:	test   al,al
   3c344:	je     3c3d0 <make_directory+0x110>
   3c34a:	cmp    rbp,r12
   3c34d:	je     3c357 <make_directory+0x97>
   3c34f:	mov    rdi,rbp
   3c352:	call   4bdc0 <rpl_free>
   3c357:	mov    rax,QWORD PTR [rsp+0x408]
   3c35f:	xor    rax,QWORD PTR fs:0x28
   3c368:	jne    3c3e5 <make_directory+0x125>
   3c36a:	add    rsp,0x418
   3c371:	mov    eax,r13d
   3c374:	pop    rbx
   3c375:	pop    rbp
   3c376:	pop    r12
   3c378:	pop    r13
   3c37a:	ret    
   3c37b:	nop    DWORD PTR [rax+rax*1+0x0]
   3c380:	test   al,al
   3c382:	je     3c335 <make_directory+0x75>
   3c384:	mov    BYTE PTR [rbx],0x0
   3c387:	xor    esi,esi
   3c389:	mov    rdi,rbp
   3c38c:	call   3b600 <file_exists_p.part.0>
   3c391:	test   al,al
   3c393:	je     3c3b8 <make_directory+0xf8>
   3c395:	mov    BYTE PTR [rbx],0x2f
   3c398:	jmp    3c329 <make_directory+0x69>
   3c39a:	nop    WORD PTR [rax+rax*1+0x0]
   3c3a0:	mov    rdi,rbp
   3c3a3:	mov    r12,rsp
   3c3a6:	call   4ba50 <xstrdup>
   3c3ab:	mov    rbp,rax
   3c3ae:	jmp    3c312 <make_directory+0x52>
   3c3b3:	nop    DWORD PTR [rax+rax*1+0x0]
   3c3b8:	mov    esi,0x1ff
   3c3bd:	mov    rdi,rbp
   3c3c0:	call   cbe0 <mkdir@plt>
   3c3c5:	mov    BYTE PTR [rbx],0x2f
   3c3c8:	jmp    3c329 <make_directory+0x69>
   3c3cd:	nop    DWORD PTR [rax]
   3c3d0:	mov    esi,0x1ff
   3c3d5:	mov    rdi,rbp
   3c3d8:	call   cbe0 <mkdir@plt>
   3c3dd:	mov    r13d,eax
   3c3e0:	jmp    3c34a <make_directory+0x8a>
   3c3e5:	call   c7b0 <__stack_chk_fail@plt>
   3c3ea:	nop    WORD PTR [rax+rax*1+0x0]

000000000003c3f0 <file_merge>:
   3c3f0:	endbr64 
   3c3f4:	push   r13
   3c3f6:	mov    r13,rsi
   3c3f9:	mov    esi,0x2f
   3c3fe:	push   r12
   3c400:	push   rbp
   3c401:	mov    rbp,rdi
   3c404:	push   rbx
   3c405:	sub    rsp,0x8
   3c409:	call   c460 <strrchr@plt>
   3c40e:	test   rax,rax
   3c411:	je     3c460 <file_merge+0x70>
   3c413:	mov    rdi,r13
   3c416:	mov    rbx,rax
   3c419:	call   c310 <strlen@plt>
   3c41e:	sub    rbx,rbp
   3c421:	lea    rdi,[rbx+rax*1+0x2]
   3c426:	call   4b850 <xmalloc>
   3c42b:	mov    rdx,rbx
   3c42e:	mov    rsi,rbp
   3c431:	mov    r12,rax
   3c434:	mov    rdi,rax
   3c437:	call   cb30 <memcpy@plt>
   3c43c:	lea    rdi,[r12+rbx*1+0x1]
   3c441:	mov    rsi,r13
   3c444:	mov    BYTE PTR [r12+rbx*1],0x2f
   3c449:	call   c830 <strcpy@plt>
   3c44e:	add    rsp,0x8
   3c452:	mov    rax,r12
   3c455:	pop    rbx
   3c456:	pop    rbp
   3c457:	pop    r12
   3c459:	pop    r13
   3c45b:	ret    
   3c45c:	nop    DWORD PTR [rax+0x0]
   3c460:	add    rsp,0x8
   3c464:	mov    rdi,r13
   3c467:	pop    rbx
   3c468:	pop    rbp
   3c469:	pop    r12
   3c46b:	pop    r13
   3c46d:	jmp    4ba50 <xstrdup>
   3c472:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3c47d:	nop    DWORD PTR [rax]

000000000003c480 <accept_url>:
   3c480:	endbr64 
   3c484:	push   rbp
   3c485:	mov    rbp,rdi
   3c488:	mov    rdi,QWORD PTR [rip+0x4dc99]        # 8a128 <opt+0xa8>
   3c48f:	test   rdi,rdi
   3c492:	je     3c4a1 <accept_url+0x21>
   3c494:	mov    rsi,rbp
   3c497:	call   QWORD PTR [rip+0x4dcab]        # 8a148 <opt+0xc8>
   3c49d:	test   al,al
   3c49f:	je     3c4be <accept_url+0x3e>
   3c4a1:	mov    rdi,QWORD PTR [rip+0x4dc88]        # 8a130 <opt+0xb0>
   3c4a8:	mov    eax,0x1
   3c4ad:	test   rdi,rdi
   3c4b0:	je     3c4be <accept_url+0x3e>
   3c4b2:	mov    rsi,rbp
   3c4b5:	call   QWORD PTR [rip+0x4dc8d]        # 8a148 <opt+0xc8>
   3c4bb:	xor    eax,0x1
   3c4be:	pop    rbp
   3c4bf:	ret    

000000000003c4c0 <subdir_p>:
   3c4c0:	endbr64 
   3c4c4:	cmp    BYTE PTR [rdi],0x0
   3c4c7:	je     3c4d0 <subdir_p+0x10>
   3c4c9:	jmp    3b700 <subdir_p.part.0>
   3c4ce:	xchg   ax,ax
   3c4d0:	mov    eax,0x1
   3c4d5:	ret    
   3c4d6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000003c4e0 <accdir>:
   3c4e0:	endbr64 
   3c4e4:	push   rbp
   3c4e5:	xor    eax,eax
   3c4e7:	mov    rbp,rdi
   3c4ea:	cmp    BYTE PTR [rdi],0x2f
   3c4ed:	mov    rdi,QWORD PTR [rip+0x4dc14]        # 8a108 <opt+0x88>
   3c4f4:	sete   al
   3c4f7:	add    rbp,rax
   3c4fa:	test   rdi,rdi
   3c4fd:	je     3c50b <accdir+0x2b>
   3c4ff:	mov    rsi,rbp
   3c502:	call   3b7a0 <dir_matches_p>
   3c507:	test   al,al
   3c509:	je     3c527 <accdir+0x47>
   3c50b:	mov    rdi,QWORD PTR [rip+0x4dbee]        # 8a100 <opt+0x80>
   3c512:	mov    eax,0x1
   3c517:	test   rdi,rdi
   3c51a:	je     3c527 <accdir+0x47>
   3c51c:	mov    rsi,rbp
   3c51f:	call   3b7a0 <dir_matches_p>
   3c524:	xor    eax,0x1
   3c527:	pop    rbp
   3c528:	ret    
   3c529:	nop    DWORD PTR [rax+0x0]

000000000003c530 <match_tail>:
   3c530:	endbr64 
   3c534:	push   r13
   3c536:	mov    r13,rsi
   3c539:	push   r12
   3c53b:	mov    r12d,edx
   3c53e:	push   rbp
   3c53f:	mov    rbp,rdi
   3c542:	push   rbx
   3c543:	sub    rsp,0x8
   3c547:	call   c310 <strlen@plt>
   3c54c:	mov    rdi,r13
   3c54f:	mov    rbx,rax
   3c552:	call   c310 <strlen@plt>
   3c557:	xor    r8d,r8d
   3c55a:	sub    ebx,eax
   3c55c:	js     3c579 <match_tail+0x49>
   3c55e:	movsxd rbx,ebx
   3c561:	mov    rsi,r13
   3c564:	lea    rdi,[rbp+rbx*1+0x0]
   3c569:	test   r12b,r12b
   3c56c:	jne    3c590 <match_tail+0x60>
   3c56e:	call   be40 <strcmp@plt>
   3c573:	test   eax,eax
   3c575:	sete   r8b
   3c579:	add    rsp,0x8
   3c57d:	mov    eax,r8d
   3c580:	pop    rbx
   3c581:	pop    rbp
   3c582:	pop    r12
   3c584:	pop    r13
   3c586:	ret    
   3c587:	nop    WORD PTR [rax+rax*1+0x0]
   3c590:	call   be10 <strcasecmp@plt>
   3c595:	test   eax,eax
   3c597:	sete   r8b
   3c59b:	add    rsp,0x8
   3c59f:	pop    rbx
   3c5a0:	mov    eax,r8d
   3c5a3:	pop    rbp
   3c5a4:	pop    r12
   3c5a6:	pop    r13
   3c5a8:	ret    
   3c5a9:	nop    DWORD PTR [rax+0x0]

000000000003c5b0 <in_acclist.constprop.0>:
   3c5b0:	push   r13
   3c5b2:	mov    r13,rsi
   3c5b5:	push   r12
   3c5b7:	lea    r12,[rip+0x31dd6]        # 6e394 <urlchr_table+0x7f4>
   3c5be:	push   rbp
   3c5bf:	push   rbx
   3c5c0:	mov    rbx,rdi
   3c5c3:	sub    rsp,0x8
   3c5c7:	mov    rbp,QWORD PTR [rdi]
   3c5ca:	test   rbp,rbp
   3c5cd:	jne    3c5f9 <in_acclist.constprop.0+0x49>
   3c5cf:	jmp    3c654 <in_acclist.constprop.0+0xa4>
   3c5d4:	nop    DWORD PTR [rax+0x0]
   3c5d8:	mov    edx,0x10
   3c5dd:	mov    rsi,r13
   3c5e0:	mov    rdi,rbp
   3c5e3:	call   be20 <fnmatch@plt>
   3c5e8:	test   eax,eax
   3c5ea:	je     3c625 <in_acclist.constprop.0+0x75>
   3c5ec:	mov    rbp,QWORD PTR [rbx+0x8]
   3c5f0:	add    rbx,0x8
   3c5f4:	test   rbp,rbp
   3c5f7:	je     3c654 <in_acclist.constprop.0+0xa4>
   3c5f9:	mov    rsi,r12
   3c5fc:	mov    rdi,rbp
   3c5ff:	call   c0a0 <strpbrk@plt>
   3c604:	movzx  edx,BYTE PTR [rip+0x4db05]        # 8a110 <opt+0x90>
   3c60b:	test   rax,rax
   3c60e:	je     3c638 <in_acclist.constprop.0+0x88>
   3c610:	test   dl,dl
   3c612:	jne    3c5d8 <in_acclist.constprop.0+0x28>
   3c614:	xor    edx,edx
   3c616:	mov    rsi,r13
   3c619:	mov    rdi,rbp
   3c61c:	call   be20 <fnmatch@plt>
   3c621:	test   eax,eax
   3c623:	jne    3c5ec <in_acclist.constprop.0+0x3c>
   3c625:	add    rsp,0x8
   3c629:	mov    eax,0x1
   3c62e:	pop    rbx
   3c62f:	pop    rbp
   3c630:	pop    r12
   3c632:	pop    r13
   3c634:	ret    
   3c635:	nop    DWORD PTR [rax]
   3c638:	mov    rsi,rbp
   3c63b:	mov    rdi,r13
   3c63e:	call   3c530 <match_tail>
   3c643:	test   al,al
   3c645:	jne    3c625 <in_acclist.constprop.0+0x75>
   3c647:	mov    rbp,QWORD PTR [rbx+0x8]
   3c64b:	add    rbx,0x8
   3c64f:	test   rbp,rbp
   3c652:	jne    3c5f9 <in_acclist.constprop.0+0x49>
   3c654:	add    rsp,0x8
   3c658:	xor    eax,eax
   3c65a:	pop    rbx
   3c65b:	pop    rbp
   3c65c:	pop    r12
   3c65e:	pop    r13
   3c660:	ret    
   3c661:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3c66c:	nop    DWORD PTR [rax+0x0]

000000000003c670 <acceptable>:
   3c670:	endbr64 
   3c674:	mov    rsi,QWORD PTR [rip+0x4db05]        # 8a180 <opt+0x100>
   3c67b:	push   rbp
   3c67c:	mov    rbp,rdi
   3c67f:	test   rsi,rsi
   3c682:	je     3c68d <acceptable+0x1d>
   3c684:	call   be40 <strcmp@plt>
   3c689:	test   eax,eax
   3c68b:	je     3c6d0 <acceptable+0x60>
   3c68d:	mov    rdi,rbp
   3c690:	mov    esi,0x2f
   3c695:	call   c460 <strrchr@plt>
   3c69a:	mov    rdi,QWORD PTR [rip+0x4da4f]        # 8a0f0 <opt+0x70>
   3c6a1:	mov    r8,QWORD PTR [rip+0x4da50]        # 8a0f8 <opt+0x78>
   3c6a8:	lea    rdx,[rax+0x1]
   3c6ac:	test   rax,rax
   3c6af:	cmovne rbp,rdx
   3c6b3:	test   rdi,rdi
   3c6b6:	je     3c6e0 <acceptable+0x70>
   3c6b8:	mov    rsi,rbp
   3c6bb:	test   r8,r8
   3c6be:	je     3c700 <acceptable+0x90>
   3c6c0:	call   3c5b0 <in_acclist.constprop.0>
   3c6c5:	test   al,al
   3c6c7:	jne    3c710 <acceptable+0xa0>
   3c6c9:	pop    rbp
   3c6ca:	ret    
   3c6cb:	nop    DWORD PTR [rax+rax*1+0x0]
   3c6d0:	mov    eax,0x1
   3c6d5:	pop    rbp
   3c6d6:	ret    
   3c6d7:	nop    WORD PTR [rax+rax*1+0x0]
   3c6e0:	mov    eax,0x1
   3c6e5:	test   r8,r8
   3c6e8:	je     3c6c9 <acceptable+0x59>
   3c6ea:	mov    rsi,rbp
   3c6ed:	mov    rdi,r8
   3c6f0:	call   3c5b0 <in_acclist.constprop.0>
   3c6f5:	pop    rbp
   3c6f6:	xor    eax,0x1
   3c6f9:	ret    
   3c6fa:	nop    WORD PTR [rax+rax*1+0x0]
   3c700:	pop    rbp
   3c701:	jmp    3c5b0 <in_acclist.constprop.0>
   3c706:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3c710:	mov    rdi,QWORD PTR [rip+0x4d9e1]        # 8a0f8 <opt+0x78>
   3c717:	mov    rsi,rbp
   3c71a:	call   3c5b0 <in_acclist.constprop.0>
   3c71f:	pop    rbp
   3c720:	xor    eax,0x1
   3c723:	ret    
   3c724:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3c72f:	nop

000000000003c730 <suffix>:
   3c730:	endbr64 
   3c734:	push   r12
   3c736:	mov    esi,0x2e
   3c73b:	call   c460 <strrchr@plt>
   3c740:	mov    r12,rax
   3c743:	test   rax,rax
   3c746:	je     3c765 <suffix+0x35>
   3c748:	add    r12,0x1
   3c74c:	mov    esi,0x2f
   3c751:	mov    rdi,r12
   3c754:	call   c6c0 <strchr@plt>
   3c759:	test   rax,rax
   3c75c:	mov    eax,0x0
   3c761:	cmovne r12,rax
   3c765:	mov    rax,r12
   3c768:	pop    r12
   3c76a:	ret    
   3c76b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003c770 <has_wildcards_p>:
   3c770:	endbr64 
   3c774:	sub    rsp,0x8
   3c778:	lea    rsi,[rip+0x31c15]        # 6e394 <urlchr_table+0x7f4>
   3c77f:	call   c0a0 <strpbrk@plt>
   3c784:	test   rax,rax
   3c787:	setne  al
   3c78a:	add    rsp,0x8
   3c78e:	ret    
   3c78f:	nop

000000000003c790 <has_html_suffix_p>:
   3c790:	endbr64 
   3c794:	push   r12
   3c796:	push   rbx
   3c797:	sub    rsp,0x8
   3c79b:	call   3c730 <suffix>
   3c7a0:	test   rax,rax
   3c7a3:	je     3c800 <has_html_suffix_p+0x70>
   3c7a5:	lea    rsi,[rip+0x1ea96]        # 5b242 <_IO_stdin_used+0x242>
   3c7ac:	mov    rdi,rax
   3c7af:	mov    rbx,rax
   3c7b2:	mov    r12d,0x1
   3c7b8:	call   43340 <c_strcasecmp>
   3c7bd:	test   eax,eax
   3c7bf:	je     3c7f2 <has_html_suffix_p+0x62>
   3c7c1:	lea    rsi,[rip+0x31c4a]        # 6e412 <urlchr_table+0x872>
   3c7c8:	mov    rdi,rbx
   3c7cb:	call   43340 <c_strcasecmp>
   3c7d0:	test   eax,eax
   3c7d2:	je     3c7f2 <has_html_suffix_p+0x62>
   3c7d4:	xor    r12d,r12d
   3c7d7:	cmp    BYTE PTR [rbx],0x0
   3c7da:	je     3c7f2 <has_html_suffix_p+0x62>
   3c7dc:	lea    rdi,[rbx+0x1]
   3c7e0:	lea    rsi,[rip+0x1ea5b]        # 5b242 <_IO_stdin_used+0x242>
   3c7e7:	call   43340 <c_strcasecmp>
   3c7ec:	test   eax,eax
   3c7ee:	sete   r12b
   3c7f2:	add    rsp,0x8
   3c7f6:	mov    eax,r12d
   3c7f9:	pop    rbx
   3c7fa:	pop    r12
   3c7fc:	ret    
   3c7fd:	nop    DWORD PTR [rax]
   3c800:	xor    r12d,r12d
   3c803:	add    rsp,0x8
   3c807:	mov    eax,r12d
   3c80a:	pop    rbx
   3c80b:	pop    r12
   3c80d:	ret    
   3c80e:	xchg   ax,ax

000000000003c810 <wget_read_file>:
   3c810:	endbr64 
   3c814:	push   r13
   3c816:	push   r12
   3c818:	push   rbp
   3c819:	push   rbx
   3c81a:	sub    rsp,0xa8
   3c821:	mov    rax,QWORD PTR fs:0x28
   3c82a:	mov    QWORD PTR [rsp+0x98],rax
   3c832:	xor    eax,eax
   3c834:	cmp    BYTE PTR [rdi],0x2d
   3c837:	jne    3c843 <wget_read_file+0x33>
   3c839:	cmp    BYTE PTR [rdi+0x1],0x0
   3c83d:	je     3c9a0 <wget_read_file+0x190>
   3c843:	xor    esi,esi
   3c845:	xor    eax,eax
   3c847:	xor    ebx,ebx
   3c849:	call   cb50 <open@plt>
   3c84e:	mov    ebp,eax
   3c850:	xor    r12d,r12d
   3c853:	test   ebp,ebp
   3c855:	js     3c8b3 <wget_read_file+0xa3>
   3c857:	mov    edi,0x18
   3c85c:	call   4b850 <xmalloc>
   3c861:	mov    rdx,rsp
   3c864:	mov    esi,ebp
   3c866:	mov    edi,0x1
   3c86b:	mov    r12,rax
   3c86e:	call   c710 <__fxstat@plt>
   3c873:	test   eax,eax
   3c875:	js     3c8e0 <wget_read_file+0xd0>
   3c877:	mov    rsi,QWORD PTR [rsp+0x30]
   3c87c:	xor    r9d,r9d
   3c87f:	mov    r8d,ebp
   3c882:	mov    ecx,0x2
   3c887:	mov    edx,0x3
   3c88c:	xor    edi,edi
   3c88e:	mov    QWORD PTR [r12+0x8],rsi
   3c893:	call   cb80 <mmap@plt>
   3c898:	mov    QWORD PTR [r12],rax
   3c89c:	cmp    rax,0xffffffffffffffff
   3c8a0:	je     3c8e0 <wget_read_file+0xd0>
   3c8a2:	test   bl,bl
   3c8a4:	je     3c9c0 <wget_read_file+0x1b0>
   3c8aa:	mov    DWORD PTR [r12+0x10],0x1
   3c8b3:	mov    rax,QWORD PTR [rsp+0x98]
   3c8bb:	xor    rax,QWORD PTR fs:0x28
   3c8c4:	jne    3ca0e <wget_read_file+0x1fe>
   3c8ca:	add    rsp,0xa8
   3c8d1:	mov    rax,r12
   3c8d4:	pop    rbx
   3c8d5:	pop    rbp
   3c8d6:	pop    r12
   3c8d8:	pop    r13
   3c8da:	ret    
   3c8db:	nop    DWORD PTR [rax+rax*1+0x0]
   3c8e0:	mov    QWORD PTR [r12+0x8],0x0
   3c8e9:	mov    edi,0x200
   3c8ee:	mov    r13d,0x200
   3c8f4:	call   4b850 <xmalloc>
   3c8f9:	mov    rsi,QWORD PTR [r12+0x8]
   3c8fe:	mov    QWORD PTR [r12],rax
   3c902:	mov    rdi,rax
   3c905:	jmp    3c936 <wget_read_file+0x126>
   3c907:	nop    WORD PTR [rax+rax*1+0x0]
   3c910:	mov    rdx,r13
   3c913:	sub    rdx,rsi
   3c916:	add    rsi,rdi
   3c919:	mov    edi,ebp
   3c91b:	call   c0c0 <read@plt>
   3c920:	test   rax,rax
   3c923:	jle    3c960 <wget_read_file+0x150>
   3c925:	add    rax,QWORD PTR [r12+0x8]
   3c92a:	mov    rdi,QWORD PTR [r12]
   3c92e:	mov    QWORD PTR [r12+0x8],rax
   3c933:	mov    rsi,rax
   3c936:	mov    rax,r13
   3c939:	sar    rax,1
   3c93c:	cmp    rax,rsi
   3c93f:	jge    3c910 <wget_read_file+0x100>
   3c941:	add    r13,r13
   3c944:	mov    rsi,r13
   3c947:	call   4b870 <xrealloc>
   3c94c:	mov    rsi,QWORD PTR [r12+0x8]
   3c951:	mov    QWORD PTR [r12],rax
   3c955:	mov    rdi,rax
   3c958:	jmp    3c910 <wget_read_file+0x100>
   3c95a:	nop    WORD PTR [rax+rax*1+0x0]
   3c960:	jne    3c9e0 <wget_read_file+0x1d0>
   3c962:	test   bl,bl
   3c964:	je     3c9d0 <wget_read_file+0x1c0>
   3c966:	mov    rsi,QWORD PTR [r12+0x8]
   3c96b:	cmp    rsi,r13
   3c96e:	jge    3c988 <wget_read_file+0x178>
   3c970:	test   rsi,rsi
   3c973:	je     3c988 <wget_read_file+0x178>
   3c975:	mov    rdi,QWORD PTR [r12]
   3c979:	call   4b870 <xrealloc>
   3c97e:	mov    QWORD PTR [r12],rax
   3c982:	nop    WORD PTR [rax+rax*1+0x0]
   3c988:	mov    DWORD PTR [r12+0x10],0x0
   3c991:	jmp    3c8b3 <wget_read_file+0xa3>
   3c996:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3c9a0:	mov    rdi,QWORD PTR [rip+0x46b29]        # 834d0 <stdin@@GLIBC_2.2.5>
   3c9a7:	mov    ebx,0x1
   3c9ac:	call   be80 <fileno@plt>
   3c9b1:	mov    ebp,eax
   3c9b3:	jmp    3c850 <wget_read_file+0x40>
   3c9b8:	nop    DWORD PTR [rax+rax*1+0x0]
   3c9c0:	mov    edi,ebp
   3c9c2:	call   bf10 <close@plt>
   3c9c7:	jmp    3c8aa <wget_read_file+0x9a>
   3c9cc:	nop    DWORD PTR [rax+0x0]
   3c9d0:	mov    edi,ebp
   3c9d2:	call   bf10 <close@plt>
   3c9d7:	jmp    3c966 <wget_read_file+0x156>
   3c9d9:	nop    DWORD PTR [rax+0x0]
   3c9e0:	test   bl,bl
   3c9e2:	je     3ca05 <wget_read_file+0x1f5>
   3c9e4:	mov    rdi,QWORD PTR [r12]
   3c9e8:	call   4bdc0 <rpl_free>
   3c9ed:	mov    QWORD PTR [r12],0x0
   3c9f5:	mov    rdi,r12
   3c9f8:	xor    r12d,r12d
   3c9fb:	call   4bdc0 <rpl_free>
   3ca00:	jmp    3c8b3 <wget_read_file+0xa3>
   3ca05:	mov    edi,ebp
   3ca07:	call   bf10 <close@plt>
   3ca0c:	jmp    3c9e4 <wget_read_file+0x1d4>
   3ca0e:	call   c7b0 <__stack_chk_fail@plt>
   3ca13:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3ca1e:	xchg   ax,ax

000000000003ca20 <wget_read_file_free>:
   3ca20:	endbr64 
   3ca24:	push   rbp
   3ca25:	mov    rbp,rdi
   3ca28:	mov    rdi,QWORD PTR [rdi]
   3ca2b:	mov    eax,DWORD PTR [rbp+0x10]
   3ca2e:	test   eax,eax
   3ca30:	je     3ca48 <wget_read_file_free+0x28>
   3ca32:	mov    rsi,QWORD PTR [rbp+0x8]
   3ca36:	call   c890 <munmap@plt>
   3ca3b:	mov    rdi,rbp
   3ca3e:	pop    rbp
   3ca3f:	jmp    4bdc0 <rpl_free>
   3ca44:	nop    DWORD PTR [rax+0x0]
   3ca48:	call   4bdc0 <rpl_free>
   3ca4d:	mov    QWORD PTR [rbp+0x0],0x0
   3ca55:	mov    rdi,rbp
   3ca58:	pop    rbp
   3ca59:	jmp    4bdc0 <rpl_free>
   3ca5e:	xchg   ax,ax

000000000003ca60 <free_vec>:
   3ca60:	endbr64 
   3ca64:	test   rdi,rdi
   3ca67:	je     3cab0 <free_vec+0x50>
   3ca69:	push   rbp
   3ca6a:	mov    rbp,rdi
   3ca6d:	push   rbx
   3ca6e:	sub    rsp,0x8
   3ca72:	mov    rdi,QWORD PTR [rdi]
   3ca75:	test   rdi,rdi
   3ca78:	je     3ca99 <free_vec+0x39>
   3ca7a:	mov    rbx,rbp
   3ca7d:	nop    DWORD PTR [rax]
   3ca80:	call   4bdc0 <rpl_free>
   3ca85:	add    rbx,0x8
   3ca89:	mov    QWORD PTR [rbx-0x8],0x0
   3ca91:	mov    rdi,QWORD PTR [rbx]
   3ca94:	test   rdi,rdi
   3ca97:	jne    3ca80 <free_vec+0x20>
   3ca99:	add    rsp,0x8
   3ca9d:	mov    rdi,rbp
   3caa0:	pop    rbx
   3caa1:	pop    rbp
   3caa2:	jmp    4bdc0 <rpl_free>
   3caa7:	nop    WORD PTR [rax+rax*1+0x0]
   3cab0:	ret    
   3cab1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3cabc:	nop    DWORD PTR [rax+0x0]

000000000003cac0 <merge_vecs>:
   3cac0:	endbr64 
   3cac4:	push   r14
   3cac6:	push   r13
   3cac8:	mov    r13,rsi
   3cacb:	push   r12
   3cacd:	push   rbx
   3cace:	sub    rsp,0x8
   3cad2:	test   rdi,rdi
   3cad5:	je     3cb78 <merge_vecs+0xb8>
   3cadb:	mov    r12,rdi
   3cade:	test   rsi,rsi
   3cae1:	je     3cb64 <merge_vecs+0xa4>
   3cae7:	cmp    QWORD PTR [rsi],0x0
   3caeb:	je     3cb5c <merge_vecs+0x9c>
   3caed:	xor    ecx,ecx
   3caef:	xor    r14d,r14d
   3caf2:	cmp    QWORD PTR [rdi],0x0
   3caf6:	mov    eax,0x1
   3cafb:	je     3cb16 <merge_vecs+0x56>
   3cafd:	nop    DWORD PTR [rax]
   3cb00:	mov    ecx,eax
   3cb02:	lea    r14,[rax*8+0x0]
   3cb0a:	add    rax,0x1
   3cb0e:	cmp    QWORD PTR [r12+rax*8-0x8],0x0
   3cb14:	jne    3cb00 <merge_vecs+0x40>
   3cb16:	lea    rdx,[r13+0x8]
   3cb1a:	xor    eax,eax
   3cb1c:	nop    DWORD PTR [rax+0x0]
   3cb20:	add    rdx,0x8
   3cb24:	mov    ebx,eax
   3cb26:	add    eax,0x1
   3cb29:	cmp    QWORD PTR [rdx-0x8],0x0
   3cb2e:	jne    3cb20 <merge_vecs+0x60>
   3cb30:	lea    esi,[rax+rcx*1+0x1]
   3cb34:	mov    rdi,r12
   3cb37:	movsxd rsi,esi
   3cb3a:	shl    rsi,0x3
   3cb3e:	call   4b870 <xrealloc>
   3cb43:	lea    edx,[rbx+0x2]
   3cb46:	mov    rsi,r13
   3cb49:	movsxd rdx,edx
   3cb4c:	lea    rdi,[rax+r14*1]
   3cb50:	mov    r12,rax
   3cb53:	shl    rdx,0x3
   3cb57:	call   cb30 <memcpy@plt>
   3cb5c:	mov    rdi,r13
   3cb5f:	call   4bdc0 <rpl_free>
   3cb64:	add    rsp,0x8
   3cb68:	mov    rax,r12
   3cb6b:	pop    rbx
   3cb6c:	pop    r12
   3cb6e:	pop    r13
   3cb70:	pop    r14
   3cb72:	ret    
   3cb73:	nop    DWORD PTR [rax+rax*1+0x0]
   3cb78:	add    rsp,0x8
   3cb7c:	mov    r12,rsi
   3cb7f:	pop    rbx
   3cb80:	mov    rax,r12
   3cb83:	pop    r12
   3cb85:	pop    r13
   3cb87:	pop    r14
   3cb89:	ret    
   3cb8a:	nop    WORD PTR [rax+rax*1+0x0]

000000000003cb90 <vec_append>:
   3cb90:	endbr64 
   3cb94:	push   r13
   3cb96:	mov    r13,rsi
   3cb99:	push   r12
   3cb9b:	push   rbp
   3cb9c:	push   rbx
   3cb9d:	sub    rsp,0x8
   3cba1:	test   rdi,rdi
   3cba4:	je     3cc08 <vec_append+0x78>
   3cba6:	cmp    QWORD PTR [rdi],0x0
   3cbaa:	je     3cc08 <vec_append+0x78>
   3cbac:	mov    eax,0x1
   3cbb1:	nop    DWORD PTR [rax+0x0]
   3cbb8:	mov    edx,eax
   3cbba:	add    rax,0x1
   3cbbe:	cmp    QWORD PTR [rdi+rax*8-0x8],0x0
   3cbc4:	jne    3cbb8 <vec_append+0x28>
   3cbc6:	lea    esi,[rdx+0x2]
   3cbc9:	movsxd rsi,esi
   3cbcc:	shl    rsi,0x3
   3cbd0:	lea    rbp,[rsi-0x8]
   3cbd4:	lea    rbx,[rsi-0x10]
   3cbd8:	call   4b870 <xrealloc>
   3cbdd:	mov    rdi,r13
   3cbe0:	mov    r12,rax
   3cbe3:	add    rbx,rax
   3cbe6:	call   4ba50 <xstrdup>
   3cbeb:	mov    QWORD PTR [rbx],rax
   3cbee:	mov    rax,r12
   3cbf1:	mov    QWORD PTR [r12+rbp*1],0x0
   3cbf9:	add    rsp,0x8
   3cbfd:	pop    rbx
   3cbfe:	pop    rbp
   3cbff:	pop    r12
   3cc01:	pop    r13
   3cc03:	ret    
   3cc04:	nop    DWORD PTR [rax+0x0]
   3cc08:	xor    ebx,ebx
   3cc0a:	mov    ebp,0x8
   3cc0f:	mov    esi,0x10
   3cc14:	jmp    3cbd8 <vec_append+0x48>
   3cc16:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000003cc20 <string_set_add>:
   3cc20:	endbr64 
   3cc24:	push   r12
   3cc26:	mov    r12,rsi
   3cc29:	push   rbp
   3cc2a:	mov    rbp,rdi
   3cc2d:	sub    rsp,0x8
   3cc31:	call   1dbf0 <hash_table_contains>
   3cc36:	test   eax,eax
   3cc38:	je     3cc48 <string_set_add+0x28>
   3cc3a:	add    rsp,0x8
   3cc3e:	pop    rbp
   3cc3f:	pop    r12
   3cc41:	ret    
   3cc42:	nop    WORD PTR [rax+rax*1+0x0]
   3cc48:	mov    rdi,r12
   3cc4b:	call   4ba50 <xstrdup>
   3cc50:	add    rsp,0x8
   3cc54:	mov    rdi,rbp
   3cc57:	lea    rdx,[rip+0x2a97a]        # 675d8 <primes.6089+0x14f8>
   3cc5e:	pop    rbp
   3cc5f:	mov    rsi,rax
   3cc62:	pop    r12
   3cc64:	jmp    1dc80 <hash_table_put>
   3cc69:	nop    DWORD PTR [rax+0x0]

000000000003cc70 <string_set_contains>:
   3cc70:	endbr64 
   3cc74:	jmp    1dbf0 <hash_table_contains>
   3cc79:	nop    DWORD PTR [rax+0x0]

000000000003cc80 <string_set_to_array>:
   3cc80:	endbr64 
   3cc84:	push   rbp
   3cc85:	push   rbx
   3cc86:	mov    rbx,rsi
   3cc89:	sub    rsp,0x38
   3cc8d:	mov    rax,QWORD PTR fs:0x28
   3cc96:	mov    QWORD PTR [rsp+0x28],rax
   3cc9b:	xor    eax,eax
   3cc9d:	mov    rbp,rsp
   3cca0:	mov    rsi,rbp
   3cca3:	call   1e0c0 <hash_table_iterate>
   3cca8:	jmp    3ccbc <string_set_to_array+0x3c>
   3ccaa:	nop    WORD PTR [rax+rax*1+0x0]
   3ccb0:	mov    rax,QWORD PTR [rsp]
   3ccb4:	add    rbx,0x8
   3ccb8:	mov    QWORD PTR [rbx-0x8],rax
   3ccbc:	mov    rdi,rbp
   3ccbf:	call   1e0e0 <hash_table_iter_next>
   3ccc4:	test   eax,eax
   3ccc6:	jne    3ccb0 <string_set_to_array+0x30>
   3ccc8:	mov    rax,QWORD PTR [rsp+0x28]
   3cccd:	xor    rax,QWORD PTR fs:0x28
   3ccd6:	jne    3ccdf <string_set_to_array+0x5f>
   3ccd8:	add    rsp,0x38
   3ccdc:	pop    rbx
   3ccdd:	pop    rbp
   3ccde:	ret    
   3ccdf:	call   c7b0 <__stack_chk_fail@plt>
   3cce4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3ccef:	nop

000000000003ccf0 <string_set_free>:
   3ccf0:	endbr64 
   3ccf4:	push   rbp
   3ccf5:	mov    rbp,rdi
   3ccf8:	push   rbx
   3ccf9:	sub    rsp,0x38
   3ccfd:	mov    rax,QWORD PTR fs:0x28
   3cd06:	mov    QWORD PTR [rsp+0x28],rax
   3cd0b:	xor    eax,eax
   3cd0d:	mov    rbx,rsp
   3cd10:	mov    rsi,rbx
   3cd13:	call   1e0c0 <hash_table_iterate>
   3cd18:	jmp    3cd31 <string_set_free+0x41>
   3cd1a:	nop    WORD PTR [rax+rax*1+0x0]
   3cd20:	mov    rdi,QWORD PTR [rsp]
   3cd24:	call   4bdc0 <rpl_free>
   3cd29:	mov    QWORD PTR [rsp],0x0
   3cd31:	mov    rdi,rbx
   3cd34:	call   1e0e0 <hash_table_iter_next>
   3cd39:	test   eax,eax
   3cd3b:	jne    3cd20 <string_set_free+0x30>
   3cd3d:	mov    rdi,rbp
   3cd40:	call   1da40 <hash_table_destroy>
   3cd45:	mov    rax,QWORD PTR [rsp+0x28]
   3cd4a:	xor    rax,QWORD PTR fs:0x28
   3cd53:	jne    3cd5c <string_set_free+0x6c>
   3cd55:	add    rsp,0x38
   3cd59:	pop    rbx
   3cd5a:	pop    rbp
   3cd5b:	ret    
   3cd5c:	call   c7b0 <__stack_chk_fail@plt>
   3cd61:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3cd6c:	nop    DWORD PTR [rax+0x0]

000000000003cd70 <free_keys_and_values>:
   3cd70:	endbr64 
   3cd74:	push   rbx
   3cd75:	sub    rsp,0x30
   3cd79:	mov    rax,QWORD PTR fs:0x28
   3cd82:	mov    QWORD PTR [rsp+0x28],rax
   3cd87:	xor    eax,eax
   3cd89:	mov    rbx,rsp
   3cd8c:	mov    rsi,rbx
   3cd8f:	call   1e0c0 <hash_table_iterate>
   3cd94:	jmp    3cdc4 <free_keys_and_values+0x54>
   3cd96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3cda0:	mov    rdi,QWORD PTR [rsp]
   3cda4:	call   4bdc0 <rpl_free>
   3cda9:	mov    rdi,QWORD PTR [rsp+0x8]
   3cdae:	mov    QWORD PTR [rsp],0x0
   3cdb6:	call   4bdc0 <rpl_free>
   3cdbb:	mov    QWORD PTR [rsp+0x8],0x0
   3cdc4:	mov    rdi,rbx
   3cdc7:	call   1e0e0 <hash_table_iter_next>
   3cdcc:	test   eax,eax
   3cdce:	jne    3cda0 <free_keys_and_values+0x30>
   3cdd0:	mov    rax,QWORD PTR [rsp+0x28]
   3cdd5:	xor    rax,QWORD PTR fs:0x28
   3cdde:	jne    3cde6 <free_keys_and_values+0x76>
   3cde0:	add    rsp,0x30
   3cde4:	pop    rbx
   3cde5:	ret    
   3cde6:	call   c7b0 <__stack_chk_fail@plt>
   3cdeb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003cdf0 <with_thousand_seps>:
   3cdf0:	endbr64 
   3cdf4:	push   r15
   3cdf6:	push   r14
   3cdf8:	push   r13
   3cdfa:	push   r12
   3cdfc:	push   rbp
   3cdfd:	push   rbx
   3cdfe:	sub    rsp,0x18
   3ce02:	cmp    BYTE PTR [rip+0x4cf5f],0x0        # 89d68 <initialized.8430>
   3ce09:	mov    QWORD PTR [rsp+0x8],rdi
   3ce0e:	je     3cf30 <with_thousand_seps+0x140>
   3ce14:	mov    rbp,QWORD PTR [rip+0x4cf45]        # 89d60 <cached_sep.8428>
   3ce1b:	mov    rbx,QWORD PTR [rip+0x4cf36]        # 89d58 <cached_grouping.8429>
   3ce22:	mov    rdi,rbp
   3ce25:	lea    r15,[rbx+0x1]
   3ce29:	movabs r12,0xcccccccccccccccd
   3ce33:	call   c310 <strlen@plt>
   3ce38:	mov    rdi,QWORD PTR [rsp+0x8]
   3ce3d:	movsx  r13d,BYTE PTR [rbx]
   3ce41:	lea    r9,[rip+0x4cf66]        # 89dae <outbuf.8435+0x2e>
   3ce48:	mov    r14d,eax
   3ce4b:	mov    BYTE PTR [rip+0x4cf5d],0x0        # 89daf <outbuf.8435+0x2f>
   3ce52:	mov    rax,rdi
   3ce55:	sar    rax,0x3f
   3ce59:	xor    rdi,rax
   3ce5c:	mov    rcx,rdi
   3ce5f:	sub    rcx,rax
   3ce62:	mov    rax,rcx
   3ce65:	mul    r12
   3ce68:	mov    rbx,rdx
   3ce6b:	shr    rbx,0x3
   3ce6f:	lea    rax,[rbx+rbx*4]
   3ce73:	add    rax,rax
   3ce76:	sub    rcx,rax
   3ce79:	add    ecx,0x30
   3ce7c:	mov    BYTE PTR [rip+0x4cf2c],cl        # 89dae <outbuf.8435+0x2e>
   3ce82:	lea    rcx,[r9+0x1]
   3ce86:	test   rbx,rbx
   3ce89:	je     3cf08 <with_thousand_seps+0x118>
   3ce8b:	xor    esi,esi
   3ce8d:	jmp    3ceb9 <with_thousand_seps+0xc9>
   3ce8f:	nop
   3ce90:	mov    rcx,r9
   3ce93:	mov    rax,rbx
   3ce96:	lea    r9,[rcx-0x1]
   3ce9a:	mul    r12
   3ce9d:	shr    rdx,0x3
   3cea1:	lea    rax,[rdx+rdx*4]
   3cea5:	add    rax,rax
   3cea8:	sub    rbx,rax
   3ceab:	add    ebx,0x30
   3ceae:	mov    BYTE PTR [rcx-0x1],bl
   3ceb1:	mov    rbx,rdx
   3ceb4:	test   rdx,rdx
   3ceb7:	je     3cf08 <with_thousand_seps+0x118>
   3ceb9:	add    esi,0x1
   3cebc:	cmp    esi,r13d
   3cebf:	jne    3ce90 <with_thousand_seps+0xa0>
   3cec1:	cmp    r14d,0x1
   3cec5:	jne    3cee8 <with_thousand_seps+0xf8>
   3cec7:	movzx  eax,BYTE PTR [rbp+0x0]
   3cecb:	sub    rcx,0x2
   3cecf:	mov    BYTE PTR [rcx],al
   3ced1:	movzx  eax,BYTE PTR [r15]
   3ced5:	xor    esi,esi
   3ced7:	test   al,al
   3ced9:	je     3ce93 <with_thousand_seps+0xa3>
   3cedb:	add    r15,0x1
   3cedf:	movsx  r13d,al
   3cee3:	jmp    3ce93 <with_thousand_seps+0xa3>
   3cee5:	nop    DWORD PTR [rax]
   3cee8:	movsxd rdx,r14d
   3ceeb:	mov    rcx,r9
   3ceee:	mov    rsi,rbp
   3cef1:	sub    rcx,rdx
   3cef4:	mov    rdi,rcx
   3cef7:	call   cb30 <memcpy@plt>
   3cefc:	mov    rcx,rax
   3ceff:	jmp    3ced1 <with_thousand_seps+0xe1>
   3cf01:	nop    DWORD PTR [rax+0x0]
   3cf08:	cmp    QWORD PTR [rsp+0x8],0x0
   3cf0e:	jns    3cf19 <with_thousand_seps+0x129>
   3cf10:	mov    BYTE PTR [r9-0x1],0x2d
   3cf15:	lea    r9,[rcx-0x2]
   3cf19:	add    rsp,0x18
   3cf1d:	mov    rax,r9
   3cf20:	pop    rbx
   3cf21:	pop    rbp
   3cf22:	pop    r12
   3cf24:	pop    r13
   3cf26:	pop    r14
   3cf28:	pop    r15
   3cf2a:	ret    
   3cf2b:	nop    DWORD PTR [rax+rax*1+0x0]
   3cf30:	call   c820 <localeconv@plt>
   3cf35:	mov    rbp,QWORD PTR [rax+0x8]
   3cf39:	mov    rbx,QWORD PTR [rax+0x10]
   3cf3d:	cmp    BYTE PTR [rbp+0x0],0x0
   3cf41:	mov    QWORD PTR [rip+0x4ce18],rbp        # 89d60 <cached_sep.8428>
   3cf48:	mov    QWORD PTR [rip+0x4ce09],rbx        # 89d58 <cached_grouping.8429>
   3cf4f:	jne    3cf81 <with_thousand_seps+0x191>
   3cf51:	mov    rax,QWORD PTR [rax]
   3cf54:	lea    r8,[rip+0x296d4]        # 6662f <primes.6089+0x54f>
   3cf5b:	lea    rbx,[rip+0x314b4]        # 6e416 <urlchr_table+0x876>
   3cf62:	mov    QWORD PTR [rip+0x4cdef],rbx        # 89d58 <cached_grouping.8429>
   3cf69:	cmp    BYTE PTR [rax],0x2c
   3cf6c:	lea    rax,[rip+0x292ed]        # 66260 <primes.6089+0x180>
   3cf73:	cmovne rax,r8
   3cf77:	mov    QWORD PTR [rip+0x4cde2],rax        # 89d60 <cached_sep.8428>
   3cf7e:	mov    rbp,rax
   3cf81:	mov    BYTE PTR [rip+0x4cde0],0x1        # 89d68 <initialized.8430>
   3cf88:	jmp    3ce22 <with_thousand_seps+0x32>
   3cf8d:	nop    DWORD PTR [rax]

000000000003cf90 <human_readable>:
   3cf90:	endbr64 
   3cf94:	sub    rsp,0x8
   3cf98:	xor    eax,eax
   3cf9a:	cmp    rdi,0x3ff
   3cfa1:	jg     3cfbe <human_readable+0x2e>
   3cfa3:	jmp    3d038 <human_readable+0xa8>
   3cfa8:	nop    DWORD PTR [rax+rax*1+0x0]
   3cfb0:	cmp    rax,0x5
   3cfb4:	je     3cfc7 <human_readable+0x37>
   3cfb6:	sar    rdi,0xa
   3cfba:	add    rax,0x1
   3cfbe:	cmp    rdi,0xfffff
   3cfc5:	jg     3cfb0 <human_readable+0x20>
   3cfc7:	pxor   xmm0,xmm0
   3cfcb:	pxor   xmm1,xmm1
   3cfcf:	lea    rcx,[rip+0x3184a]        # 6e820 <powers.8451>
   3cfd6:	cvtsi2sd xmm0,rdi
   3cfdb:	mulsd  xmm0,QWORD PTR [rip+0x31845]        # 6e828 <powers.8451+0x8>
   3cfe3:	movsx  eax,BYTE PTR [rcx+rax*1]
   3cfe7:	mov    ecx,0x0
   3cfec:	cvtsi2sd xmm1,esi
   3cff0:	lea    r8,[rip+0x31421]        # 6e418 <urlchr_table+0x878>
   3cff7:	mov    esi,0x8
   3cffc:	lea    rdi,[rip+0x4cd4d]        # 89d50 <buf.8452>
   3d003:	comisd xmm1,xmm0
   3d007:	cmovbe edx,ecx
   3d00a:	sub    rsp,0x8
   3d00e:	mov    ecx,0x8
   3d013:	push   rax
   3d014:	mov    eax,0x1
   3d019:	mov    r9d,edx
   3d01c:	mov    edx,0x1
   3d021:	call   c9d0 <__snprintf_chk@plt>
   3d026:	pop    rax
   3d027:	pop    rdx
   3d028:	lea    rax,[rip+0x4cd21]        # 89d50 <buf.8452>
   3d02f:	add    rsp,0x8
   3d033:	ret    
   3d034:	nop    DWORD PTR [rax+0x0]
   3d038:	mov    r9d,edi
   3d03b:	mov    ecx,0x8
   3d040:	mov    edx,0x1
   3d045:	mov    esi,0x8
   3d04a:	lea    r8,[rip+0x289c3]        # 65a14 <yy_accept+0x954>
   3d051:	lea    rdi,[rip+0x4ccf8]        # 89d50 <buf.8452>
   3d058:	call   c9d0 <__snprintf_chk@plt>
   3d05d:	lea    rax,[rip+0x4ccec]        # 89d50 <buf.8452>
   3d064:	add    rsp,0x8
   3d068:	ret    
   3d069:	nop    DWORD PTR [rax+0x0]

000000000003d070 <numdigit>:
   3d070:	endbr64 
   3d074:	movabs rsi,0x6666666666666667
   3d07e:	mov    rax,rdi
   3d081:	mov    r8,rdi
   3d084:	sar    rdi,0x3f
   3d088:	imul   rsi
   3d08b:	shr    r8,0x3f
   3d08f:	add    r8d,0x1
   3d093:	mov    rcx,rdx
   3d096:	sar    rcx,0x2
   3d09a:	sub    rcx,rdi
   3d09d:	je     3d0ba <numdigit+0x4a>
   3d09f:	nop
   3d0a0:	mov    rax,rcx
   3d0a3:	sar    rcx,0x3f
   3d0a7:	add    r8d,0x1
   3d0ab:	imul   rsi
   3d0ae:	sar    rdx,0x2
   3d0b2:	sub    rdx,rcx
   3d0b5:	mov    rcx,rdx
   3d0b8:	jne    3d0a0 <numdigit+0x30>
   3d0ba:	mov    eax,r8d
   3d0bd:	ret    
   3d0be:	xchg   ax,ax

000000000003d0c0 <number_to_string>:
   3d0c0:	endbr64 
   3d0c4:	test   rsi,rsi
   3d0c7:	js     3d120 <number_to_string+0x60>
   3d0c9:	cmp    rsi,0x9
   3d0cd:	jg     3d0e0 <number_to_string+0x20>
   3d0cf:	add    esi,0x30
   3d0d2:	lea    rax,[rdi+0x1]
   3d0d6:	mov    BYTE PTR [rdi],sil
   3d0d9:	mov    BYTE PTR [rax],0x0
   3d0dc:	ret    
   3d0dd:	nop    DWORD PTR [rax]
   3d0e0:	cmp    rsi,0x63
   3d0e4:	jg     3d140 <number_to_string+0x80>
   3d0e6:	movabs rdx,0xcccccccccccccccd
   3d0f0:	mov    rax,rsi
   3d0f3:	mul    rdx
   3d0f6:	shr    rdx,0x3
   3d0fa:	lea    eax,[rdx+0x30]
   3d0fd:	lea    rdx,[rdx+rdx*4]
   3d101:	add    rdx,rdx
   3d104:	mov    BYTE PTR [rdi],al
   3d106:	lea    rax,[rdi+0x2]
   3d10a:	sub    rsi,rdx
   3d10d:	add    esi,0x30
   3d110:	mov    BYTE PTR [rdi+0x1],sil
   3d114:	mov    BYTE PTR [rax],0x0
   3d117:	ret    
   3d118:	nop    DWORD PTR [rax+rax*1+0x0]
   3d120:	movabs rax,0x8000000000000000
   3d12a:	cmp    rsi,rax
   3d12d:	je     3d250 <number_to_string+0x190>
   3d133:	mov    BYTE PTR [rdi],0x2d
   3d136:	neg    rsi
   3d139:	add    rdi,0x1
   3d13d:	jmp    3d0c9 <number_to_string+0x9>
   3d13f:	nop
   3d140:	cmp    rsi,0x3e7
   3d147:	jg     3d1b0 <number_to_string+0xf0>
   3d149:	movabs rcx,0x28f5c28f5c28f5c3
   3d153:	mov    rdx,rsi
   3d156:	shr    rdx,0x2
   3d15a:	mov    rax,rdx
   3d15d:	mul    rcx
   3d160:	shr    rdx,0x2
   3d164:	lea    eax,[rdx+0x30]
   3d167:	mov    BYTE PTR [rdi],al
   3d169:	lea    rax,[rdx+rdx*4]
   3d16d:	movabs rdx,0xcccccccccccccccd
   3d177:	lea    rax,[rax+rax*4]
   3d17b:	shl    rax,0x2
   3d17f:	sub    rsi,rax
   3d182:	mov    rax,rsi
   3d185:	mul    rdx
   3d188:	shr    rdx,0x3
   3d18c:	lea    eax,[rdx+0x30]
   3d18f:	lea    rdx,[rdx+rdx*4]
   3d193:	add    rdx,rdx
   3d196:	mov    BYTE PTR [rdi+0x1],al
   3d199:	lea    rax,[rdi+0x3]
   3d19d:	sub    rsi,rdx
   3d1a0:	add    esi,0x30
   3d1a3:	mov    BYTE PTR [rdi+0x2],sil
   3d1a7:	mov    BYTE PTR [rax],0x0
   3d1aa:	ret    
   3d1ab:	nop    DWORD PTR [rax+rax*1+0x0]
   3d1b0:	cmp    rsi,0x270f
   3d1b7:	jg     3d568 <number_to_string+0x4a8>
   3d1bd:	movabs rcx,0x20c49ba5e353f7cf
   3d1c7:	mov    rdx,rsi
   3d1ca:	shr    rdx,0x3
   3d1ce:	mov    rax,rdx
   3d1d1:	mul    rcx
   3d1d4:	movabs rcx,0x28f5c28f5c28f5c3
   3d1de:	shr    rdx,0x4
   3d1e2:	lea    eax,[rdx+0x30]
   3d1e5:	imul   rdx,rdx,0x3e8
   3d1ec:	mov    BYTE PTR [rdi],al
   3d1ee:	sub    rsi,rdx
   3d1f1:	mov    rdx,rsi
   3d1f4:	shr    rdx,0x2
   3d1f8:	mov    rax,rdx
   3d1fb:	mul    rcx
   3d1fe:	shr    rdx,0x2
   3d202:	lea    eax,[rdx+0x30]
   3d205:	mov    BYTE PTR [rdi+0x1],al
   3d208:	lea    rax,[rdx+rdx*4]
   3d20c:	movabs rdx,0xcccccccccccccccd
   3d216:	lea    rax,[rax+rax*4]
   3d21a:	shl    rax,0x2
   3d21e:	sub    rsi,rax
   3d221:	mov    rax,rsi
   3d224:	mul    rdx
   3d227:	shr    rdx,0x3
   3d22b:	lea    eax,[rdx+0x30]
   3d22e:	lea    rdx,[rdx+rdx*4]
   3d232:	add    rdx,rdx
   3d235:	mov    BYTE PTR [rdi+0x2],al
   3d238:	lea    rax,[rdi+0x4]
   3d23c:	sub    rsi,rdx
   3d23f:	add    esi,0x30
   3d242:	mov    BYTE PTR [rdi+0x3],sil
   3d246:	jmp    3d0d9 <number_to_string+0x19>
   3d24b:	nop    DWORD PTR [rax+rax*1+0x0]
   3d250:	mov    BYTE PTR [rdi],0x2d
   3d253:	lea    r8,[rdi+0x1]
   3d257:	movabs rsi,0xccccccccccccccc
   3d261:	mov    edi,0x38
   3d266:	movabs rcx,0x5c3bd5191b53
   3d270:	mov    rdx,rsi
   3d273:	shr    rdx,0x11
   3d277:	mov    rax,rdx
   3d27a:	mul    rcx
   3d27d:	shr    rdx,0x16
   3d281:	lea    eax,[rdx+0x30]
   3d284:	mov    BYTE PTR [r8],al
   3d287:	movabs rax,0x16345785d8a0000
   3d291:	imul   rdx,rax
   3d295:	sub    rsi,rdx
   3d298:	movabs rdx,0x39a5652fb1137857
   3d2a2:	mov    rax,rsi
   3d2a5:	mov    rcx,rsi
   3d2a8:	movabs rsi,0x24075f3dceac3
   3d2b2:	mul    rdx
   3d2b5:	shr    rdx,0x33
   3d2b9:	lea    eax,[rdx+0x30]
   3d2bc:	mov    BYTE PTR [r8+0x1],al
   3d2c0:	movabs rax,0x2386f26fc10000
   3d2ca:	imul   rdx,rax
   3d2ce:	sub    rcx,rdx
   3d2d1:	mov    rdx,rcx
   3d2d4:	shr    rdx,0xf
   3d2d8:	mov    rax,rdx
   3d2db:	mul    rsi
   3d2de:	movabs rsi,0x44b82fa09b5a53
   3d2e8:	shr    rdx,0x14
   3d2ec:	lea    eax,[rdx+0x30]
   3d2ef:	mov    BYTE PTR [r8+0x2],al
   3d2f3:	movabs rax,0x38d7ea4c68000
   3d2fd:	imul   rdx,rax
   3d301:	sub    rcx,rdx
   3d304:	movabs rdx,0xb424dc35095cd81
   3d30e:	mov    rax,rcx
   3d311:	mul    rdx
   3d314:	shr    rdx,0x2a
   3d318:	lea    eax,[rdx+0x30]
   3d31b:	mov    BYTE PTR [r8+0x3],al
   3d31f:	movabs rax,0x5af3107a4000
   3d329:	imul   rdx,rax
   3d32d:	sub    rcx,rdx
   3d330:	movabs rdx,0x384b84d092ed0385
   3d33a:	mov    rax,rcx
   3d33d:	mul    rdx
   3d340:	shr    rdx,0x29
   3d344:	lea    eax,[rdx+0x30]
   3d347:	mov    BYTE PTR [r8+0x4],al
   3d34b:	movabs rax,0x9184e72a000
   3d355:	imul   rdx,rax
   3d359:	sub    rcx,rdx
   3d35c:	movabs rdx,0x232f33025bd42233
   3d366:	mov    rax,rcx
   3d369:	mul    rdx
   3d36c:	shr    rdx,0x25
   3d370:	lea    eax,[rdx+0x30]
   3d373:	mov    BYTE PTR [r8+0x5],al
   3d377:	movabs rax,0xe8d4a51000
   3d381:	imul   rdx,rax
   3d385:	sub    rcx,rdx
   3d388:	movabs rdx,0xafebff0bcb24aaff
   3d392:	mov    rax,rcx
   3d395:	mul    rdx
   3d398:	shr    rdx,0x24
   3d39c:	lea    eax,[rdx+0x30]
   3d39f:	mov    BYTE PTR [r8+0x6],al
   3d3a3:	movabs rax,0x174876e800
   3d3ad:	imul   rdx,rax
   3d3b1:	sub    rcx,rdx
   3d3b4:	movabs rdx,0xdbe6fecebdedd5bf
   3d3be:	mov    rax,rcx
   3d3c1:	mul    rdx
   3d3c4:	shr    rdx,0x21
   3d3c8:	lea    eax,[rdx+0x30]
   3d3cb:	mov    BYTE PTR [r8+0x7],al
   3d3cf:	movabs rax,0x2540be400
   3d3d9:	imul   rdx,rax
   3d3dd:	sub    rcx,rdx
   3d3e0:	mov    rdx,rcx
   3d3e3:	shr    rdx,0x9
   3d3e7:	mov    rax,rdx
   3d3ea:	mul    rsi
   3d3ed:	movabs rsi,0xa7c5ac471b47843
   3d3f7:	shr    rdx,0xb
   3d3fb:	lea    eax,[rdx+0x30]
   3d3fe:	imul   rdx,rdx,0x3b9aca00
   3d405:	mov    BYTE PTR [r8+0x8],al
   3d409:	sub    rcx,rdx
   3d40c:	movabs rdx,0xabcc77118461cefd
   3d416:	mov    rax,rcx
   3d419:	mul    rdx
   3d41c:	shr    rdx,0x1a
   3d420:	lea    eax,[rdx+0x30]
   3d423:	imul   rdx,rdx,0x5f5e100
   3d42a:	mov    BYTE PTR [r8+0x9],al
   3d42e:	sub    rcx,rdx
   3d431:	movabs rdx,0xd6bf94d5e57a42bd
   3d43b:	mov    rax,rcx
   3d43e:	mul    rdx
   3d441:	shr    rdx,0x17
   3d445:	lea    eax,[rdx+0x30]
   3d448:	imul   rdx,rdx,0x989680
   3d44f:	mov    BYTE PTR [r8+0xa],al
   3d453:	sub    rcx,rdx
   3d456:	movabs rdx,0x431bde82d7b634db
   3d460:	mov    rax,rcx
   3d463:	mul    rdx
   3d466:	shr    rdx,0x12
   3d46a:	lea    eax,[rdx+0x30]
   3d46d:	imul   rdx,rdx,0xf4240
   3d474:	mov    BYTE PTR [r8+0xb],al
   3d478:	sub    rcx,rdx
   3d47b:	mov    rdx,rcx
   3d47e:	shr    rdx,0x5
   3d482:	mov    rax,rdx
   3d485:	mul    rsi
   3d488:	movabs rsi,0x20c49ba5e353f7cf
   3d492:	shr    rdx,0x7
   3d496:	lea    eax,[rdx+0x30]
   3d499:	imul   rdx,rdx,0x186a0
   3d4a0:	mov    BYTE PTR [r8+0xc],al
   3d4a4:	sub    rcx,rdx
   3d4a7:	movabs rdx,0x346dc5d63886594b
   3d4b1:	mov    rax,rcx
   3d4b4:	mul    rdx
   3d4b7:	shr    rdx,0xb
   3d4bb:	lea    eax,[rdx+0x30]
   3d4be:	imul   rdx,rdx,0x2710
   3d4c5:	mov    BYTE PTR [r8+0xd],al
   3d4c9:	sub    rcx,rdx
   3d4cc:	mov    rdx,rcx
   3d4cf:	shr    rdx,0x3
   3d4d3:	mov    rax,rdx
   3d4d6:	mul    rsi
   3d4d9:	movabs rsi,0x28f5c28f5c28f5c3
   3d4e3:	shr    rdx,0x4
   3d4e7:	lea    eax,[rdx+0x30]
   3d4ea:	imul   rdx,rdx,0x3e8
   3d4f1:	mov    BYTE PTR [r8+0xe],al
   3d4f5:	sub    rcx,rdx
   3d4f8:	mov    rdx,rcx
   3d4fb:	shr    rdx,0x2
   3d4ff:	mov    rax,rdx
   3d502:	mul    rsi
   3d505:	shr    rdx,0x2
   3d509:	lea    eax,[rdx+0x30]
   3d50c:	mov    BYTE PTR [r8+0xf],al
   3d510:	lea    rax,[rdx+rdx*4]
   3d514:	movabs rdx,0xcccccccccccccccd
   3d51e:	lea    rax,[rax+rax*4]
   3d522:	shl    rax,0x2
   3d526:	sub    rcx,rax
   3d529:	mov    rax,rcx
   3d52c:	mul    rdx
   3d52f:	shr    rdx,0x3
   3d533:	lea    eax,[rdx+0x30]
   3d536:	lea    rdx,[rdx+rdx*4]
   3d53a:	add    rdx,rdx
   3d53d:	mov    BYTE PTR [r8+0x10],al
   3d541:	lea    rax,[r8+0x12]
   3d545:	sub    rcx,rdx
   3d548:	add    ecx,0x30
   3d54b:	mov    BYTE PTR [r8+0x11],cl
   3d54f:	test   edi,edi
   3d551:	je     3d0d9 <number_to_string+0x19>
   3d557:	lea    rax,[r8+0x13]
   3d55b:	mov    BYTE PTR [r8+0x12],dil
   3d55f:	mov    BYTE PTR [rax],0x0
   3d562:	ret    
   3d563:	nop    DWORD PTR [rax+rax*1+0x0]
   3d568:	cmp    rsi,0x1869f
   3d56f:	jg     3d630 <number_to_string+0x570>
   3d575:	movabs rdx,0x346dc5d63886594b
   3d57f:	mov    rax,rsi
   3d582:	movabs rcx,0x20c49ba5e353f7cf
   3d58c:	mul    rdx
   3d58f:	shr    rdx,0xb
   3d593:	lea    eax,[rdx+0x30]
   3d596:	imul   rdx,rdx,0x2710
   3d59d:	mov    BYTE PTR [rdi],al
   3d59f:	sub    rsi,rdx
   3d5a2:	mov    rdx,rsi
   3d5a5:	shr    rdx,0x3
   3d5a9:	mov    rax,rdx
   3d5ac:	mul    rcx
   3d5af:	movabs rcx,0x28f5c28f5c28f5c3
   3d5b9:	shr    rdx,0x4
   3d5bd:	lea    eax,[rdx+0x30]
   3d5c0:	imul   rdx,rdx,0x3e8
   3d5c7:	mov    BYTE PTR [rdi+0x1],al
   3d5ca:	sub    rsi,rdx
   3d5cd:	mov    rdx,rsi
   3d5d0:	shr    rdx,0x2
   3d5d4:	mov    rax,rdx
   3d5d7:	mul    rcx
   3d5da:	shr    rdx,0x2
   3d5de:	lea    eax,[rdx+0x30]
   3d5e1:	mov    BYTE PTR [rdi+0x2],al
   3d5e4:	lea    rax,[rdx+rdx*4]
   3d5e8:	movabs rdx,0xcccccccccccccccd
   3d5f2:	lea    rax,[rax+rax*4]
   3d5f6:	shl    rax,0x2
   3d5fa:	sub    rsi,rax
   3d5fd:	mov    rax,rsi
   3d600:	mul    rdx
   3d603:	shr    rdx,0x3
   3d607:	lea    eax,[rdx+0x30]
   3d60a:	lea    rdx,[rdx+rdx*4]
   3d60e:	add    rdx,rdx
   3d611:	mov    BYTE PTR [rdi+0x3],al
   3d614:	lea    rax,[rdi+0x5]
   3d618:	sub    rsi,rdx
   3d61b:	add    esi,0x30
   3d61e:	mov    BYTE PTR [rdi+0x4],sil
   3d622:	jmp    3d0d9 <number_to_string+0x19>
   3d627:	nop    WORD PTR [rax+rax*1+0x0]
   3d630:	cmp    rsi,0xf423f
   3d637:	jg     3d720 <number_to_string+0x660>
   3d63d:	movabs rcx,0xa7c5ac471b47843
   3d647:	mov    rdx,rsi
   3d64a:	shr    rdx,0x5
   3d64e:	mov    rax,rdx
   3d651:	mul    rcx
   3d654:	shr    rdx,0x7
   3d658:	lea    eax,[rdx+0x30]
   3d65b:	imul   rdx,rdx,0x186a0
   3d662:	mov    BYTE PTR [rdi],al
   3d664:	sub    rsi,rdx
   3d667:	movabs rdx,0x346dc5d63886594b
   3d671:	mov    rax,rsi
   3d674:	mov    rcx,rsi
   3d677:	movabs rsi,0x20c49ba5e353f7cf
   3d681:	mul    rdx
   3d684:	shr    rdx,0xb
   3d688:	lea    eax,[rdx+0x30]
   3d68b:	imul   rdx,rdx,0x2710
   3d692:	mov    BYTE PTR [rdi+0x1],al
   3d695:	sub    rcx,rdx
   3d698:	mov    rdx,rcx
   3d69b:	shr    rdx,0x3
   3d69f:	mov    rax,rdx
   3d6a2:	mul    rsi
   3d6a5:	movabs rsi,0x28f5c28f5c28f5c3
   3d6af:	shr    rdx,0x4
   3d6b3:	lea    eax,[rdx+0x30]
   3d6b6:	imul   rdx,rdx,0x3e8
   3d6bd:	mov    BYTE PTR [rdi+0x2],al
   3d6c0:	sub    rcx,rdx
   3d6c3:	mov    rdx,rcx
   3d6c6:	shr    rdx,0x2
   3d6ca:	mov    rax,rdx
   3d6cd:	mul    rsi
   3d6d0:	shr    rdx,0x2
   3d6d4:	lea    eax,[rdx+0x30]
   3d6d7:	mov    BYTE PTR [rdi+0x3],al
   3d6da:	lea    rax,[rdx+rdx*4]
   3d6de:	movabs rdx,0xcccccccccccccccd
   3d6e8:	lea    rax,[rax+rax*4]
   3d6ec:	shl    rax,0x2
   3d6f0:	sub    rcx,rax
   3d6f3:	mov    rax,rcx
   3d6f6:	mul    rdx
   3d6f9:	shr    rdx,0x3
   3d6fd:	lea    eax,[rdx+0x30]
   3d700:	lea    rdx,[rdx+rdx*4]
   3d704:	add    rdx,rdx
   3d707:	mov    BYTE PTR [rdi+0x4],al
   3d70a:	lea    rax,[rdi+0x6]
   3d70e:	sub    rcx,rdx
   3d711:	lea    edx,[rcx+0x30]
   3d714:	mov    BYTE PTR [rdi+0x5],dl
   3d717:	jmp    3d0d9 <number_to_string+0x19>
   3d71c:	nop    DWORD PTR [rax+0x0]
   3d720:	cmp    rsi,0x98967f
   3d727:	jg     3d830 <number_to_string+0x770>
   3d72d:	movabs rdx,0x431bde82d7b634db
   3d737:	mov    rax,rsi
   3d73a:	mul    rdx
   3d73d:	shr    rdx,0x12
   3d741:	lea    eax,[rdx+0x30]
   3d744:	imul   rdx,rdx,0xf4240
   3d74b:	mov    BYTE PTR [rdi],al
   3d74d:	sub    rsi,rdx
   3d750:	mov    rdx,rsi
   3d753:	mov    rcx,rsi
   3d756:	movabs rsi,0xa7c5ac471b47843
   3d760:	shr    rdx,0x5
   3d764:	mov    rax,rdx
   3d767:	mul    rsi
   3d76a:	movabs rsi,0x20c49ba5e353f7cf
   3d774:	shr    rdx,0x7
   3d778:	lea    eax,[rdx+0x30]
   3d77b:	imul   rdx,rdx,0x186a0
   3d782:	mov    BYTE PTR [rdi+0x1],al
   3d785:	sub    rcx,rdx
   3d788:	movabs rdx,0x346dc5d63886594b
   3d792:	mov    rax,rcx
   3d795:	mul    rdx
   3d798:	shr    rdx,0xb
   3d79c:	lea    eax,[rdx+0x30]
   3d79f:	imul   rdx,rdx,0x2710
   3d7a6:	mov    BYTE PTR [rdi+0x2],al
   3d7a9:	sub    rcx,rdx
   3d7ac:	mov    rdx,rcx
   3d7af:	shr    rdx,0x3
   3d7b3:	mov    rax,rdx
   3d7b6:	mul    rsi
   3d7b9:	movabs rsi,0x28f5c28f5c28f5c3
   3d7c3:	shr    rdx,0x4
   3d7c7:	lea    eax,[rdx+0x30]
   3d7ca:	imul   rdx,rdx,0x3e8
   3d7d1:	mov    BYTE PTR [rdi+0x3],al
   3d7d4:	sub    rcx,rdx
   3d7d7:	mov    rdx,rcx
   3d7da:	shr    rdx,0x2
   3d7de:	mov    rax,rdx
   3d7e1:	mul    rsi
   3d7e4:	shr    rdx,0x2
   3d7e8:	lea    eax,[rdx+0x30]
   3d7eb:	mov    BYTE PTR [rdi+0x4],al
   3d7ee:	lea    rax,[rdx+rdx*4]
   3d7f2:	movabs rdx,0xcccccccccccccccd
   3d7fc:	lea    rax,[rax+rax*4]
   3d800:	shl    rax,0x2
   3d804:	sub    rcx,rax
   3d807:	mov    rax,rcx
   3d80a:	mul    rdx
   3d80d:	shr    rdx,0x3
   3d811:	lea    eax,[rdx+0x30]
   3d814:	lea    rdx,[rdx+rdx*4]
   3d818:	add    rdx,rdx
   3d81b:	mov    BYTE PTR [rdi+0x5],al
   3d81e:	lea    rax,[rdi+0x7]
   3d822:	sub    rcx,rdx
   3d825:	lea    edx,[rcx+0x30]
   3d828:	mov    BYTE PTR [rdi+0x6],dl
   3d82b:	jmp    3d0d9 <number_to_string+0x19>
   3d830:	cmp    rsi,0x5f5e0ff
   3d837:	jg     3d964 <number_to_string+0x8a4>
   3d83d:	movabs rdx,0xd6bf94d5e57a42bd
   3d847:	mov    rax,rsi
   3d84a:	mul    rdx
   3d84d:	shr    rdx,0x17
   3d851:	lea    eax,[rdx+0x30]
   3d854:	imul   rdx,rdx,0x989680
   3d85b:	mov    BYTE PTR [rdi],al
   3d85d:	sub    rsi,rdx
   3d860:	movabs rdx,0x431bde82d7b634db
   3d86a:	mov    rax,rsi
   3d86d:	mov    rcx,rsi
   3d870:	movabs rsi,0xa7c5ac471b47843
   3d87a:	mul    rdx
   3d87d:	shr    rdx,0x12
   3d881:	lea    eax,[rdx+0x30]
   3d884:	imul   rdx,rdx,0xf4240
   3d88b:	mov    BYTE PTR [rdi+0x1],al
   3d88e:	sub    rcx,rdx
   3d891:	mov    rdx,rcx
   3d894:	shr    rdx,0x5
   3d898:	mov    rax,rdx
   3d89b:	mul    rsi
   3d89e:	movabs rsi,0x20c49ba5e353f7cf
   3d8a8:	shr    rdx,0x7
   3d8ac:	lea    eax,[rdx+0x30]
   3d8af:	imul   rdx,rdx,0x186a0
   3d8b6:	mov    BYTE PTR [rdi+0x2],al
   3d8b9:	sub    rcx,rdx
   3d8bc:	movabs rdx,0x346dc5d63886594b
   3d8c6:	mov    rax,rcx
   3d8c9:	mul    rdx
   3d8cc:	shr    rdx,0xb
   3d8d0:	lea    eax,[rdx+0x30]
   3d8d3:	imul   rdx,rdx,0x2710
   3d8da:	mov    BYTE PTR [rdi+0x3],al
   3d8dd:	sub    rcx,rdx
   3d8e0:	mov    rdx,rcx
   3d8e3:	shr    rdx,0x3
   3d8e7:	mov    rax,rdx
   3d8ea:	mul    rsi
   3d8ed:	movabs rsi,0x28f5c28f5c28f5c3
   3d8f7:	shr    rdx,0x4
   3d8fb:	lea    eax,[rdx+0x30]
   3d8fe:	imul   rdx,rdx,0x3e8
   3d905:	mov    BYTE PTR [rdi+0x4],al
   3d908:	sub    rcx,rdx
   3d90b:	mov    rdx,rcx
   3d90e:	shr    rdx,0x2
   3d912:	mov    rax,rdx
   3d915:	mul    rsi
   3d918:	shr    rdx,0x2
   3d91c:	lea    eax,[rdx+0x30]
   3d91f:	mov    BYTE PTR [rdi+0x5],al
   3d922:	lea    rax,[rdx+rdx*4]
   3d926:	movabs rdx,0xcccccccccccccccd
   3d930:	lea    rax,[rax+rax*4]
   3d934:	shl    rax,0x2
   3d938:	sub    rcx,rax
   3d93b:	mov    rax,rcx
   3d93e:	mul    rdx
   3d941:	shr    rdx,0x3
   3d945:	lea    eax,[rdx+0x30]
   3d948:	lea    rdx,[rdx+rdx*4]
   3d94c:	add    rdx,rdx
   3d94f:	mov    BYTE PTR [rdi+0x6],al
   3d952:	lea    rax,[rdi+0x8]
   3d956:	sub    rcx,rdx
   3d959:	lea    edx,[rcx+0x30]
   3d95c:	mov    BYTE PTR [rdi+0x7],dl
   3d95f:	jmp    3d0d9 <number_to_string+0x19>
   3d964:	cmp    rsi,0x3b9ac9ff
   3d96b:	jg     3dabc <number_to_string+0x9fc>
   3d971:	movabs rdx,0xabcc77118461cefd
   3d97b:	mov    rax,rsi
   3d97e:	mul    rdx
   3d981:	shr    rdx,0x1a
   3d985:	lea    eax,[rdx+0x30]
   3d988:	imul   rdx,rdx,0x5f5e100
   3d98f:	mov    BYTE PTR [rdi],al
   3d991:	sub    rsi,rdx
   3d994:	movabs rdx,0xd6bf94d5e57a42bd
   3d99e:	mov    rax,rsi
   3d9a1:	mov    rcx,rsi
   3d9a4:	movabs rsi,0xa7c5ac471b47843
   3d9ae:	mul    rdx
   3d9b1:	shr    rdx,0x17
   3d9b5:	lea    eax,[rdx+0x30]
   3d9b8:	imul   rdx,rdx,0x989680
   3d9bf:	mov    BYTE PTR [rdi+0x1],al
   3d9c2:	sub    rcx,rdx
   3d9c5:	movabs rdx,0x431bde82d7b634db
   3d9cf:	mov    rax,rcx
   3d9d2:	mul    rdx
   3d9d5:	shr    rdx,0x12
   3d9d9:	lea    eax,[rdx+0x30]
   3d9dc:	imul   rdx,rdx,0xf4240
   3d9e3:	mov    BYTE PTR [rdi+0x2],al
   3d9e6:	sub    rcx,rdx
   3d9e9:	mov    rdx,rcx
   3d9ec:	shr    rdx,0x5
   3d9f0:	mov    rax,rdx
   3d9f3:	mul    rsi
   3d9f6:	movabs rsi,0x20c49ba5e353f7cf
   3da00:	shr    rdx,0x7
   3da04:	lea    eax,[rdx+0x30]
   3da07:	imul   rdx,rdx,0x186a0
   3da0e:	mov    BYTE PTR [rdi+0x3],al
   3da11:	sub    rcx,rdx
   3da14:	movabs rdx,0x346dc5d63886594b
   3da1e:	mov    rax,rcx
   3da21:	mul    rdx
   3da24:	shr    rdx,0xb
   3da28:	lea    eax,[rdx+0x30]
   3da2b:	imul   rdx,rdx,0x2710
   3da32:	mov    BYTE PTR [rdi+0x4],al
   3da35:	sub    rcx,rdx
   3da38:	mov    rdx,rcx
   3da3b:	shr    rdx,0x3
   3da3f:	mov    rax,rdx
   3da42:	mul    rsi
   3da45:	movabs rsi,0x28f5c28f5c28f5c3
   3da4f:	shr    rdx,0x4
   3da53:	lea    eax,[rdx+0x30]
   3da56:	imul   rdx,rdx,0x3e8
   3da5d:	mov    BYTE PTR [rdi+0x5],al
   3da60:	sub    rcx,rdx
   3da63:	mov    rdx,rcx
   3da66:	shr    rdx,0x2
   3da6a:	mov    rax,rdx
   3da6d:	mul    rsi
   3da70:	shr    rdx,0x2
   3da74:	lea    eax,[rdx+0x30]
   3da77:	mov    BYTE PTR [rdi+0x6],al
   3da7a:	lea    rax,[rdx+rdx*4]
   3da7e:	movabs rdx,0xcccccccccccccccd
   3da88:	lea    rax,[rax+rax*4]
   3da8c:	shl    rax,0x2
   3da90:	sub    rcx,rax
   3da93:	mov    rax,rcx
   3da96:	mul    rdx
   3da99:	shr    rdx,0x3
   3da9d:	lea    eax,[rdx+0x30]
   3daa0:	lea    rdx,[rdx+rdx*4]
   3daa4:	add    rdx,rdx
   3daa7:	mov    BYTE PTR [rdi+0x7],al
   3daaa:	lea    rax,[rdi+0x9]
   3daae:	sub    rcx,rdx
   3dab1:	lea    edx,[rcx+0x30]
   3dab4:	mov    BYTE PTR [rdi+0x8],dl
   3dab7:	jmp    3d0d9 <number_to_string+0x19>
   3dabc:	movabs rax,0x2540be3ff
   3dac6:	cmp    rsi,rax
   3dac9:	jg     3db88 <number_to_string+0xac8>
   3dacf:	mov    rax,rsi
   3dad2:	mov    ecx,0x3b9aca00
   3dad7:	cqo    
   3dad9:	idiv   rcx
   3dadc:	mov    ecx,0x5f5e100
   3dae1:	add    eax,0x30
   3dae4:	mov    BYTE PTR [rdi],al
   3dae6:	mov    rax,rdx
   3dae9:	cqo    
   3daeb:	idiv   rcx
   3daee:	mov    ecx,0x989680
   3daf3:	add    eax,0x30
   3daf6:	mov    BYTE PTR [rdi+0x1],al
   3daf9:	mov    rax,rdx
   3dafc:	cqo    
   3dafe:	idiv   rcx
   3db01:	mov    ecx,0xf4240
   3db06:	add    eax,0x30
   3db09:	mov    BYTE PTR [rdi+0x2],al
   3db0c:	mov    rax,rdx
   3db0f:	cqo    
   3db11:	idiv   rcx
   3db14:	mov    ecx,0x186a0
   3db19:	add    eax,0x30
   3db1c:	mov    BYTE PTR [rdi+0x3],al
   3db1f:	mov    rax,rdx
   3db22:	cqo    
   3db24:	idiv   rcx
   3db27:	mov    ecx,0x2710
   3db2c:	add    eax,0x30
   3db2f:	mov    BYTE PTR [rdi+0x4],al
   3db32:	mov    rax,rdx
   3db35:	cqo    
   3db37:	idiv   rcx
   3db3a:	mov    ecx,0x3e8
   3db3f:	add    eax,0x30
   3db42:	mov    BYTE PTR [rdi+0x5],al
   3db45:	mov    rax,rdx
   3db48:	cqo    
   3db4a:	idiv   rcx
   3db4d:	mov    ecx,0x64
   3db52:	add    eax,0x30
   3db55:	mov    BYTE PTR [rdi+0x6],al
   3db58:	mov    rax,rdx
   3db5b:	cqo    
   3db5d:	idiv   rcx
   3db60:	mov    ecx,0xa
   3db65:	add    eax,0x30
   3db68:	mov    BYTE PTR [rdi+0x7],al
   3db6b:	mov    rax,rdx
   3db6e:	cqo    
   3db70:	idiv   rcx
   3db73:	add    eax,0x30
   3db76:	add    edx,0x30
   3db79:	mov    BYTE PTR [rdi+0x8],al
   3db7c:	lea    rax,[rdi+0xa]
   3db80:	mov    BYTE PTR [rdi+0x9],dl
   3db83:	jmp    3d0d9 <number_to_string+0x19>
   3db88:	movabs rax,0x174876e7ff
   3db92:	cmp    rsi,rax
   3db95:	jg     3dc6b <number_to_string+0xbab>
   3db9b:	mov    rax,rsi
   3db9e:	mov    ecx,0x9502f9
   3dba3:	shl    rcx,0xa
   3dba7:	cqo    
   3dba9:	idiv   rcx
   3dbac:	mov    ecx,0x3b9aca00
   3dbb1:	add    eax,0x30
   3dbb4:	mov    BYTE PTR [rdi],al
   3dbb6:	mov    rax,rdx
   3dbb9:	cqo    
   3dbbb:	idiv   rcx
   3dbbe:	mov    ecx,0x5f5e100
   3dbc3:	add    eax,0x30
   3dbc6:	mov    BYTE PTR [rdi+0x1],al
   3dbc9:	mov    rax,rdx
   3dbcc:	cqo    
   3dbce:	idiv   rcx
   3dbd1:	mov    ecx,0x989680
   3dbd6:	add    eax,0x30
   3dbd9:	mov    BYTE PTR [rdi+0x2],al
   3dbdc:	mov    rax,rdx
   3dbdf:	cqo    
   3dbe1:	idiv   rcx
   3dbe4:	mov    ecx,0xf4240
   3dbe9:	add    eax,0x30
   3dbec:	mov    BYTE PTR [rdi+0x3],al
   3dbef:	mov    rax,rdx
   3dbf2:	cqo    
   3dbf4:	idiv   rcx
   3dbf7:	mov    ecx,0x186a0
   3dbfc:	add    eax,0x30
   3dbff:	mov    BYTE PTR [rdi+0x4],al
   3dc02:	mov    rax,rdx
   3dc05:	cqo    
   3dc07:	idiv   rcx
   3dc0a:	mov    ecx,0x2710
   3dc0f:	add    eax,0x30
   3dc12:	mov    BYTE PTR [rdi+0x5],al
   3dc15:	mov    rax,rdx
   3dc18:	cqo    
   3dc1a:	idiv   rcx
   3dc1d:	mov    ecx,0x3e8
   3dc22:	add    eax,0x30
   3dc25:	mov    BYTE PTR [rdi+0x6],al
   3dc28:	mov    rax,rdx
   3dc2b:	cqo    
   3dc2d:	idiv   rcx
   3dc30:	mov    ecx,0x64
   3dc35:	add    eax,0x30
   3dc38:	mov    BYTE PTR [rdi+0x7],al
   3dc3b:	mov    rax,rdx
   3dc3e:	cqo    
   3dc40:	idiv   rcx
   3dc43:	mov    ecx,0xa
   3dc48:	add    eax,0x30
   3dc4b:	mov    BYTE PTR [rdi+0x8],al
   3dc4e:	mov    rax,rdx
   3dc51:	cqo    
   3dc53:	idiv   rcx
   3dc56:	add    eax,0x30
   3dc59:	add    edx,0x30
   3dc5c:	mov    BYTE PTR [rdi+0x9],al
   3dc5f:	lea    rax,[rdi+0xb]
   3dc63:	mov    BYTE PTR [rdi+0xa],dl
   3dc66:	jmp    3d0d9 <number_to_string+0x19>
   3dc6b:	movabs rax,0xe8d4a50fff
   3dc75:	cmp    rsi,rax
   3dc78:	jg     3dd65 <number_to_string+0xca5>
   3dc7e:	mov    rax,rsi
   3dc81:	mov    ecx,0x2e90edd
   3dc86:	shl    rcx,0xb
   3dc8a:	cqo    
   3dc8c:	idiv   rcx
   3dc8f:	mov    ecx,0x9502f9
   3dc94:	shl    rcx,0xa
   3dc98:	add    eax,0x30
   3dc9b:	mov    BYTE PTR [rdi],al
   3dc9d:	mov    rax,rdx
   3dca0:	cqo    
   3dca2:	idiv   rcx
   3dca5:	mov    ecx,0x3b9aca00
   3dcaa:	add    eax,0x30
   3dcad:	mov    BYTE PTR [rdi+0x1],al
   3dcb0:	mov    rax,rdx
   3dcb3:	cqo    
   3dcb5:	idiv   rcx
   3dcb8:	mov    ecx,0x5f5e100
   3dcbd:	add    eax,0x30
   3dcc0:	mov    BYTE PTR [rdi+0x2],al
   3dcc3:	mov    rax,rdx
   3dcc6:	cqo    
   3dcc8:	idiv   rcx
   3dccb:	mov    ecx,0x989680
   3dcd0:	add    eax,0x30
   3dcd3:	mov    BYTE PTR [rdi+0x3],al
   3dcd6:	mov    rax,rdx
   3dcd9:	cqo    
   3dcdb:	idiv   rcx
   3dcde:	mov    ecx,0xf4240
   3dce3:	add    eax,0x30
   3dce6:	mov    BYTE PTR [rdi+0x4],al
   3dce9:	mov    rax,rdx
   3dcec:	cqo    
   3dcee:	idiv   rcx
   3dcf1:	mov    ecx,0x186a0
   3dcf6:	add    eax,0x30
   3dcf9:	mov    BYTE PTR [rdi+0x5],al
   3dcfc:	mov    rax,rdx
   3dcff:	cqo    
   3dd01:	idiv   rcx
   3dd04:	mov    ecx,0x2710
   3dd09:	add    eax,0x30
   3dd0c:	mov    BYTE PTR [rdi+0x6],al
   3dd0f:	mov    rax,rdx
   3dd12:	cqo    
   3dd14:	idiv   rcx
   3dd17:	mov    ecx,0x3e8
   3dd1c:	add    eax,0x30
   3dd1f:	mov    BYTE PTR [rdi+0x7],al
   3dd22:	mov    rax,rdx
   3dd25:	cqo    
   3dd27:	idiv   rcx
   3dd2a:	mov    ecx,0x64
   3dd2f:	add    eax,0x30
   3dd32:	mov    BYTE PTR [rdi+0x8],al
   3dd35:	mov    rax,rdx
   3dd38:	cqo    
   3dd3a:	idiv   rcx
   3dd3d:	mov    ecx,0xa
   3dd42:	add    eax,0x30
   3dd45:	mov    BYTE PTR [rdi+0x9],al
   3dd48:	mov    rax,rdx
   3dd4b:	cqo    
   3dd4d:	idiv   rcx
   3dd50:	add    eax,0x30
   3dd53:	add    edx,0x30
   3dd56:	mov    BYTE PTR [rdi+0xa],al
   3dd59:	lea    rax,[rdi+0xc]
   3dd5d:	mov    BYTE PTR [rdi+0xb],dl
   3dd60:	jmp    3d0d9 <number_to_string+0x19>
   3dd65:	movabs rax,0x9184e729fff
   3dd6f:	cmp    rsi,rax
   3dd72:	jg     3de76 <number_to_string+0xdb6>
   3dd78:	mov    rax,rsi
   3dd7b:	mov    ecx,0xe8d4a51
   3dd80:	shl    rcx,0xc
   3dd84:	cqo    
   3dd86:	idiv   rcx
   3dd89:	mov    ecx,0x2e90edd
   3dd8e:	shl    rcx,0xb
   3dd92:	add    eax,0x30
   3dd95:	mov    BYTE PTR [rdi],al
   3dd97:	mov    rax,rdx
   3dd9a:	cqo    
   3dd9c:	idiv   rcx
   3dd9f:	mov    ecx,0x9502f9
   3dda4:	shl    rcx,0xa
   3dda8:	add    eax,0x30
   3ddab:	mov    BYTE PTR [rdi+0x1],al
   3ddae:	mov    rax,rdx
   3ddb1:	cqo    
   3ddb3:	idiv   rcx
   3ddb6:	mov    ecx,0x3b9aca00
   3ddbb:	add    eax,0x30
   3ddbe:	mov    BYTE PTR [rdi+0x2],al
   3ddc1:	mov    rax,rdx
   3ddc4:	cqo    
   3ddc6:	idiv   rcx
   3ddc9:	mov    ecx,0x5f5e100
   3ddce:	add    eax,0x30
   3ddd1:	mov    BYTE PTR [rdi+0x3],al
   3ddd4:	mov    rax,rdx
   3ddd7:	cqo    
   3ddd9:	idiv   rcx
   3dddc:	mov    ecx,0x989680
   3dde1:	add    eax,0x30
   3dde4:	mov    BYTE PTR [rdi+0x4],al
   3dde7:	mov    rax,rdx
   3ddea:	cqo    
   3ddec:	idiv   rcx
   3ddef:	mov    ecx,0xf4240
   3ddf4:	add    eax,0x30
   3ddf7:	mov    BYTE PTR [rdi+0x5],al
   3ddfa:	mov    rax,rdx
   3ddfd:	cqo    
   3ddff:	idiv   rcx
   3de02:	mov    ecx,0x186a0
   3de07:	add    eax,0x30
   3de0a:	mov    BYTE PTR [rdi+0x6],al
   3de0d:	mov    rax,rdx
   3de10:	cqo    
   3de12:	idiv   rcx
   3de15:	mov    ecx,0x2710
   3de1a:	add    eax,0x30
   3de1d:	mov    BYTE PTR [rdi+0x7],al
   3de20:	mov    rax,rdx
   3de23:	cqo    
   3de25:	idiv   rcx
   3de28:	mov    ecx,0x3e8
   3de2d:	add    eax,0x30
   3de30:	mov    BYTE PTR [rdi+0x8],al
   3de33:	mov    rax,rdx
   3de36:	cqo    
   3de38:	idiv   rcx
   3de3b:	mov    ecx,0x64
   3de40:	add    eax,0x30
   3de43:	mov    BYTE PTR [rdi+0x9],al
   3de46:	mov    rax,rdx
   3de49:	cqo    
   3de4b:	idiv   rcx
   3de4e:	mov    ecx,0xa
   3de53:	add    eax,0x30
   3de56:	mov    BYTE PTR [rdi+0xa],al
   3de59:	mov    rax,rdx
   3de5c:	cqo    
   3de5e:	idiv   rcx
   3de61:	add    eax,0x30
   3de64:	add    edx,0x30
   3de67:	mov    BYTE PTR [rdi+0xb],al
   3de6a:	lea    rax,[rdi+0xd]
   3de6e:	mov    BYTE PTR [rdi+0xc],dl
   3de71:	jmp    3d0d9 <number_to_string+0x19>
   3de76:	movabs rax,0x5af3107a3fff
   3de80:	cmp    rsi,rax
   3de83:	jg     3df9e <number_to_string+0xede>
   3de89:	mov    rax,rsi
   3de8c:	mov    ecx,0x48c27395
   3de91:	shl    rcx,0xd
   3de95:	cqo    
   3de97:	idiv   rcx
   3de9a:	mov    ecx,0xe8d4a51
   3de9f:	shl    rcx,0xc
   3dea3:	add    eax,0x30
   3dea6:	mov    BYTE PTR [rdi],al
   3dea8:	mov    rax,rdx
   3deab:	cqo    
   3dead:	idiv   rcx
   3deb0:	mov    ecx,0x2e90edd
   3deb5:	shl    rcx,0xb
   3deb9:	add    eax,0x30
   3debc:	mov    BYTE PTR [rdi+0x1],al
   3debf:	mov    rax,rdx
   3dec2:	cqo    
   3dec4:	idiv   rcx
   3dec7:	mov    ecx,0x9502f9
   3decc:	shl    rcx,0xa
   3ded0:	add    eax,0x30
   3ded3:	mov    BYTE PTR [rdi+0x2],al
   3ded6:	mov    rax,rdx
   3ded9:	cqo    
   3dedb:	idiv   rcx
   3dede:	mov    ecx,0x3b9aca00
   3dee3:	add    eax,0x30
   3dee6:	mov    BYTE PTR [rdi+0x3],al
   3dee9:	mov    rax,rdx
   3deec:	cqo    
   3deee:	idiv   rcx
   3def1:	mov    ecx,0x5f5e100
   3def6:	add    eax,0x30
   3def9:	mov    BYTE PTR [rdi+0x4],al
   3defc:	mov    rax,rdx
   3deff:	cqo    
   3df01:	idiv   rcx
   3df04:	mov    ecx,0x989680
   3df09:	add    eax,0x30
   3df0c:	mov    BYTE PTR [rdi+0x5],al
   3df0f:	mov    rax,rdx
   3df12:	cqo    
   3df14:	idiv   rcx
   3df17:	mov    ecx,0xf4240
   3df1c:	add    eax,0x30
   3df1f:	mov    BYTE PTR [rdi+0x6],al
   3df22:	mov    rax,rdx
   3df25:	cqo    
   3df27:	idiv   rcx
   3df2a:	mov    ecx,0x186a0
   3df2f:	add    eax,0x30
   3df32:	mov    BYTE PTR [rdi+0x7],al
   3df35:	mov    rax,rdx
   3df38:	cqo    
   3df3a:	idiv   rcx
   3df3d:	mov    ecx,0x2710
   3df42:	add    eax,0x30
   3df45:	mov    BYTE PTR [rdi+0x8],al
   3df48:	mov    rax,rdx
   3df4b:	cqo    
   3df4d:	idiv   rcx
   3df50:	mov    ecx,0x3e8
   3df55:	add    eax,0x30
   3df58:	mov    BYTE PTR [rdi+0x9],al
   3df5b:	mov    rax,rdx
   3df5e:	cqo    
   3df60:	idiv   rcx
   3df63:	mov    ecx,0x64
   3df68:	add    eax,0x30
   3df6b:	mov    BYTE PTR [rdi+0xa],al
   3df6e:	mov    rax,rdx
   3df71:	cqo    
   3df73:	idiv   rcx
   3df76:	mov    ecx,0xa
   3df7b:	add    eax,0x30
   3df7e:	mov    BYTE PTR [rdi+0xb],al
   3df81:	mov    rax,rdx
   3df84:	cqo    
   3df86:	idiv   rcx
   3df89:	add    eax,0x30
   3df8c:	add    edx,0x30
   3df8f:	mov    BYTE PTR [rdi+0xc],al
   3df92:	lea    rax,[rdi+0xe]
   3df96:	mov    BYTE PTR [rdi+0xd],dl
   3df99:	jmp    3d0d9 <number_to_string+0x19>
   3df9e:	movabs rax,0x38d7ea4c67fff
   3dfa8:	cmp    rsi,rax
   3dfab:	jg     3e0de <number_to_string+0x101e>
   3dfb1:	movabs rcx,0x5af3107a4000
   3dfbb:	mov    rax,rsi
   3dfbe:	cqo    
   3dfc0:	idiv   rcx
   3dfc3:	mov    ecx,0x48c27395
   3dfc8:	shl    rcx,0xd
   3dfcc:	add    eax,0x30
   3dfcf:	mov    BYTE PTR [rdi],al
   3dfd1:	mov    rax,rdx
   3dfd4:	cqo    
   3dfd6:	idiv   rcx
   3dfd9:	mov    ecx,0xe8d4a51
   3dfde:	shl    rcx,0xc
   3dfe2:	add    eax,0x30
   3dfe5:	mov    BYTE PTR [rdi+0x1],al
   3dfe8:	mov    rax,rdx
   3dfeb:	cqo    
   3dfed:	idiv   rcx
   3dff0:	mov    ecx,0x2e90edd
   3dff5:	shl    rcx,0xb
   3dff9:	add    eax,0x30
   3dffc:	mov    BYTE PTR [rdi+0x2],al
   3dfff:	mov    rax,rdx
   3e002:	cqo    
   3e004:	idiv   rcx
   3e007:	mov    ecx,0x9502f9
   3e00c:	shl    rcx,0xa
   3e010:	add    eax,0x30
   3e013:	mov    BYTE PTR [rdi+0x3],al
   3e016:	mov    rax,rdx
   3e019:	cqo    
   3e01b:	idiv   rcx
   3e01e:	mov    ecx,0x3b9aca00
   3e023:	add    eax,0x30
   3e026:	mov    BYTE PTR [rdi+0x4],al
   3e029:	mov    rax,rdx
   3e02c:	cqo    
   3e02e:	idiv   rcx
   3e031:	mov    ecx,0x5f5e100
   3e036:	add    eax,0x30
   3e039:	mov    BYTE PTR [rdi+0x5],al
   3e03c:	mov    rax,rdx
   3e03f:	cqo    
   3e041:	idiv   rcx
   3e044:	mov    ecx,0x989680
   3e049:	add    eax,0x30
   3e04c:	mov    BYTE PTR [rdi+0x6],al
   3e04f:	mov    rax,rdx
   3e052:	cqo    
   3e054:	idiv   rcx
   3e057:	mov    ecx,0xf4240
   3e05c:	add    eax,0x30
   3e05f:	mov    BYTE PTR [rdi+0x7],al
   3e062:	mov    rax,rdx
   3e065:	cqo    
   3e067:	idiv   rcx
   3e06a:	mov    ecx,0x186a0
   3e06f:	add    eax,0x30
   3e072:	mov    BYTE PTR [rdi+0x8],al
   3e075:	mov    rax,rdx
   3e078:	cqo    
   3e07a:	idiv   rcx
   3e07d:	mov    ecx,0x2710
   3e082:	add    eax,0x30
   3e085:	mov    BYTE PTR [rdi+0x9],al
   3e088:	mov    rax,rdx
   3e08b:	cqo    
   3e08d:	idiv   rcx
   3e090:	mov    ecx,0x3e8
   3e095:	add    eax,0x30
   3e098:	mov    BYTE PTR [rdi+0xa],al
   3e09b:	mov    rax,rdx
   3e09e:	cqo    
   3e0a0:	idiv   rcx
   3e0a3:	mov    ecx,0x64
   3e0a8:	add    eax,0x30
   3e0ab:	mov    BYTE PTR [rdi+0xb],al
   3e0ae:	mov    rax,rdx
   3e0b1:	cqo    
   3e0b3:	idiv   rcx
   3e0b6:	mov    ecx,0xa
   3e0bb:	add    eax,0x30
   3e0be:	mov    BYTE PTR [rdi+0xc],al
   3e0c1:	mov    rax,rdx
   3e0c4:	cqo    
   3e0c6:	idiv   rcx
   3e0c9:	add    eax,0x30
   3e0cc:	add    edx,0x30
   3e0cf:	mov    BYTE PTR [rdi+0xd],al
   3e0d2:	lea    rax,[rdi+0xf]
   3e0d6:	mov    BYTE PTR [rdi+0xe],dl
   3e0d9:	jmp    3d0d9 <number_to_string+0x19>
   3e0de:	movabs rax,0x2386f26fc0ffff
   3e0e8:	cmp    rsi,rax
   3e0eb:	jg     3e236 <number_to_string+0x1176>
   3e0f1:	movabs rcx,0x38d7ea4c68000
   3e0fb:	mov    rax,rsi
   3e0fe:	cqo    
   3e100:	idiv   rcx
   3e103:	movabs rcx,0x5af3107a4000
   3e10d:	add    eax,0x30
   3e110:	mov    BYTE PTR [rdi],al
   3e112:	mov    rax,rdx
   3e115:	cqo    
   3e117:	idiv   rcx
   3e11a:	mov    ecx,0x48c27395
   3e11f:	shl    rcx,0xd
   3e123:	add    eax,0x30
   3e126:	mov    BYTE PTR [rdi+0x1],al
   3e129:	mov    rax,rdx
   3e12c:	cqo    
   3e12e:	idiv   rcx
   3e131:	mov    ecx,0xe8d4a51
   3e136:	shl    rcx,0xc
   3e13a:	add    eax,0x30
   3e13d:	mov    BYTE PTR [rdi+0x2],al
   3e140:	mov    rax,rdx
   3e143:	cqo    
   3e145:	idiv   rcx
   3e148:	mov    ecx,0x2e90edd
   3e14d:	shl    rcx,0xb
   3e151:	add    eax,0x30
   3e154:	mov    BYTE PTR [rdi+0x3],al
   3e157:	mov    rax,rdx
   3e15a:	cqo    
   3e15c:	idiv   rcx
   3e15f:	mov    ecx,0x9502f9
   3e164:	shl    rcx,0xa
   3e168:	add    eax,0x30
   3e16b:	mov    BYTE PTR [rdi+0x4],al
   3e16e:	mov    rax,rdx
   3e171:	cqo    
   3e173:	idiv   rcx
   3e176:	mov    ecx,0x3b9aca00
   3e17b:	add    eax,0x30
   3e17e:	mov    BYTE PTR [rdi+0x5],al
   3e181:	mov    rax,rdx
   3e184:	cqo    
   3e186:	idiv   rcx
   3e189:	mov    ecx,0x5f5e100
   3e18e:	add    eax,0x30
   3e191:	mov    BYTE PTR [rdi+0x6],al
   3e194:	mov    rax,rdx
   3e197:	cqo    
   3e199:	idiv   rcx
   3e19c:	mov    ecx,0x989680
   3e1a1:	add    eax,0x30
   3e1a4:	mov    BYTE PTR [rdi+0x7],al
   3e1a7:	mov    rax,rdx
   3e1aa:	cqo    
   3e1ac:	idiv   rcx
   3e1af:	mov    ecx,0xf4240
   3e1b4:	add    eax,0x30
   3e1b7:	mov    BYTE PTR [rdi+0x8],al
   3e1ba:	mov    rax,rdx
   3e1bd:	cqo    
   3e1bf:	idiv   rcx
   3e1c2:	mov    ecx,0x186a0
   3e1c7:	add    eax,0x30
   3e1ca:	mov    BYTE PTR [rdi+0x9],al
   3e1cd:	mov    rax,rdx
   3e1d0:	cqo    
   3e1d2:	idiv   rcx
   3e1d5:	mov    ecx,0x2710
   3e1da:	add    eax,0x30
   3e1dd:	mov    BYTE PTR [rdi+0xa],al
   3e1e0:	mov    rax,rdx
   3e1e3:	cqo    
   3e1e5:	idiv   rcx
   3e1e8:	mov    ecx,0x3e8
   3e1ed:	add    eax,0x30
   3e1f0:	mov    BYTE PTR [rdi+0xb],al
   3e1f3:	mov    rax,rdx
   3e1f6:	cqo    
   3e1f8:	idiv   rcx
   3e1fb:	mov    ecx,0x64
   3e200:	add    eax,0x30
   3e203:	mov    BYTE PTR [rdi+0xc],al
   3e206:	mov    rax,rdx
   3e209:	cqo    
   3e20b:	idiv   rcx
   3e20e:	mov    ecx,0xa
   3e213:	add    eax,0x30
   3e216:	mov    BYTE PTR [rdi+0xd],al
   3e219:	mov    rax,rdx
   3e21c:	cqo    
   3e21e:	idiv   rcx
   3e221:	add    eax,0x30
   3e224:	add    edx,0x30
   3e227:	mov    BYTE PTR [rdi+0xe],al
   3e22a:	lea    rax,[rdi+0x10]
   3e22e:	mov    BYTE PTR [rdi+0xf],dl
   3e231:	jmp    3d0d9 <number_to_string+0x19>
   3e236:	movabs rax,0x16345785d89ffff
   3e240:	cmp    rsi,rax
   3e243:	jg     3e3a6 <number_to_string+0x12e6>
   3e249:	movabs rcx,0x2386f26fc10000
   3e253:	mov    rax,rsi
   3e256:	cqo    
   3e258:	idiv   rcx
   3e25b:	movabs rcx,0x38d7ea4c68000
   3e265:	add    eax,0x30
   3e268:	mov    BYTE PTR [rdi],al
   3e26a:	mov    rax,rdx
   3e26d:	cqo    
   3e26f:	idiv   rcx
   3e272:	movabs rcx,0x5af3107a4000
   3e27c:	add    eax,0x30
   3e27f:	mov    BYTE PTR [rdi+0x1],al
   3e282:	mov    rax,rdx
   3e285:	cqo    
   3e287:	idiv   rcx
   3e28a:	mov    ecx,0x48c27395
   3e28f:	shl    rcx,0xd
   3e293:	add    eax,0x30
   3e296:	mov    BYTE PTR [rdi+0x2],al
   3e299:	mov    rax,rdx
   3e29c:	cqo    
   3e29e:	idiv   rcx
   3e2a1:	mov    ecx,0xe8d4a51
   3e2a6:	shl    rcx,0xc
   3e2aa:	add    eax,0x30
   3e2ad:	mov    BYTE PTR [rdi+0x3],al
   3e2b0:	mov    rax,rdx
   3e2b3:	cqo    
   3e2b5:	idiv   rcx
   3e2b8:	mov    ecx,0x2e90edd
   3e2bd:	shl    rcx,0xb
   3e2c1:	add    eax,0x30
   3e2c4:	mov    BYTE PTR [rdi+0x4],al
   3e2c7:	mov    rax,rdx
   3e2ca:	cqo    
   3e2cc:	idiv   rcx
   3e2cf:	mov    ecx,0x9502f9
   3e2d4:	shl    rcx,0xa
   3e2d8:	add    eax,0x30
   3e2db:	mov    BYTE PTR [rdi+0x5],al
   3e2de:	mov    rax,rdx
   3e2e1:	cqo    
   3e2e3:	idiv   rcx
   3e2e6:	mov    ecx,0x3b9aca00
   3e2eb:	add    eax,0x30
   3e2ee:	mov    BYTE PTR [rdi+0x6],al
   3e2f1:	mov    rax,rdx
   3e2f4:	cqo    
   3e2f6:	idiv   rcx
   3e2f9:	mov    ecx,0x5f5e100
   3e2fe:	add    eax,0x30
   3e301:	mov    BYTE PTR [rdi+0x7],al
   3e304:	mov    rax,rdx
   3e307:	cqo    
   3e309:	idiv   rcx
   3e30c:	mov    ecx,0x989680
   3e311:	add    eax,0x30
   3e314:	mov    BYTE PTR [rdi+0x8],al
   3e317:	mov    rax,rdx
   3e31a:	cqo    
   3e31c:	idiv   rcx
   3e31f:	mov    ecx,0xf4240
   3e324:	add    eax,0x30
   3e327:	mov    BYTE PTR [rdi+0x9],al
   3e32a:	mov    rax,rdx
   3e32d:	cqo    
   3e32f:	idiv   rcx
   3e332:	mov    ecx,0x186a0
   3e337:	add    eax,0x30
   3e33a:	mov    BYTE PTR [rdi+0xa],al
   3e33d:	mov    rax,rdx
   3e340:	cqo    
   3e342:	idiv   rcx
   3e345:	mov    ecx,0x2710
   3e34a:	add    eax,0x30
   3e34d:	mov    BYTE PTR [rdi+0xb],al
   3e350:	mov    rax,rdx
   3e353:	cqo    
   3e355:	idiv   rcx
   3e358:	mov    ecx,0x3e8
   3e35d:	add    eax,0x30
   3e360:	mov    BYTE PTR [rdi+0xc],al
   3e363:	mov    rax,rdx
   3e366:	cqo    
   3e368:	idiv   rcx
   3e36b:	mov    ecx,0x64
   3e370:	add    eax,0x30
   3e373:	mov    BYTE PTR [rdi+0xd],al
   3e376:	mov    rax,rdx
   3e379:	cqo    
   3e37b:	idiv   rcx
   3e37e:	mov    ecx,0xa
   3e383:	add    eax,0x30
   3e386:	mov    BYTE PTR [rdi+0xe],al
   3e389:	mov    rax,rdx
   3e38c:	cqo    
   3e38e:	idiv   rcx
   3e391:	add    eax,0x30
   3e394:	add    edx,0x30
   3e397:	mov    BYTE PTR [rdi+0xf],al
   3e39a:	lea    rax,[rdi+0x11]
   3e39e:	mov    BYTE PTR [rdi+0x10],dl
   3e3a1:	jmp    3d0d9 <number_to_string+0x19>
   3e3a6:	movabs rax,0xde0b6b3a763ffff
   3e3b0:	cmp    rsi,rax
   3e3b3:	jle    3e546 <number_to_string+0x1486>
   3e3b9:	movabs rcx,0xde0b6b3a7640000
   3e3c3:	mov    rax,rsi
   3e3c6:	cqo    
   3e3c8:	idiv   rcx
   3e3cb:	movabs rcx,0x16345785d8a0000
   3e3d5:	add    eax,0x30
   3e3d8:	mov    BYTE PTR [rdi],al
   3e3da:	mov    rax,rdx
   3e3dd:	cqo    
   3e3df:	idiv   rcx
   3e3e2:	movabs rcx,0x2386f26fc10000
   3e3ec:	add    eax,0x30
   3e3ef:	mov    BYTE PTR [rdi+0x1],al
   3e3f2:	mov    rax,rdx
   3e3f5:	cqo    
   3e3f7:	idiv   rcx
   3e3fa:	movabs rcx,0x38d7ea4c68000
   3e404:	add    eax,0x30
   3e407:	mov    BYTE PTR [rdi+0x2],al
   3e40a:	mov    rax,rdx
   3e40d:	cqo    
   3e40f:	idiv   rcx
   3e412:	movabs rcx,0x5af3107a4000
   3e41c:	add    eax,0x30
   3e41f:	mov    BYTE PTR [rdi+0x3],al
   3e422:	mov    rax,rdx
   3e425:	cqo    
   3e427:	idiv   rcx
   3e42a:	mov    ecx,0x48c27395
   3e42f:	shl    rcx,0xd
   3e433:	add    eax,0x30
   3e436:	mov    BYTE PTR [rdi+0x4],al
   3e439:	mov    rax,rdx
   3e43c:	cqo    
   3e43e:	idiv   rcx
   3e441:	mov    ecx,0xe8d4a51
   3e446:	shl    rcx,0xc
   3e44a:	add    eax,0x30
   3e44d:	mov    BYTE PTR [rdi+0x5],al
   3e450:	mov    rax,rdx
   3e453:	cqo    
   3e455:	idiv   rcx
   3e458:	mov    ecx,0x2e90edd
   3e45d:	shl    rcx,0xb
   3e461:	add    eax,0x30
   3e464:	mov    BYTE PTR [rdi+0x6],al
   3e467:	mov    rax,rdx
   3e46a:	cqo    
   3e46c:	idiv   rcx
   3e46f:	mov    ecx,0x9502f9
   3e474:	shl    rcx,0xa
   3e478:	add    eax,0x30
   3e47b:	mov    BYTE PTR [rdi+0x7],al
   3e47e:	mov    rax,rdx
   3e481:	cqo    
   3e483:	idiv   rcx
   3e486:	mov    ecx,0x3b9aca00
   3e48b:	add    eax,0x30
   3e48e:	mov    BYTE PTR [rdi+0x8],al
   3e491:	mov    rax,rdx
   3e494:	cqo    
   3e496:	idiv   rcx
   3e499:	mov    ecx,0x5f5e100
   3e49e:	add    eax,0x30
   3e4a1:	mov    BYTE PTR [rdi+0x9],al
   3e4a4:	mov    rax,rdx
   3e4a7:	cqo    
   3e4a9:	idiv   rcx
   3e4ac:	mov    ecx,0x989680
   3e4b1:	add    eax,0x30
   3e4b4:	mov    BYTE PTR [rdi+0xa],al
   3e4b7:	mov    rax,rdx
   3e4ba:	cqo    
   3e4bc:	idiv   rcx
   3e4bf:	mov    ecx,0xf4240
   3e4c4:	add    eax,0x30
   3e4c7:	mov    BYTE PTR [rdi+0xb],al
   3e4ca:	mov    rax,rdx
   3e4cd:	cqo    
   3e4cf:	idiv   rcx
   3e4d2:	mov    ecx,0x186a0
   3e4d7:	add    eax,0x30
   3e4da:	mov    BYTE PTR [rdi+0xc],al
   3e4dd:	mov    rax,rdx
   3e4e0:	cqo    
   3e4e2:	idiv   rcx
   3e4e5:	mov    ecx,0x2710
   3e4ea:	add    eax,0x30
   3e4ed:	mov    BYTE PTR [rdi+0xd],al
   3e4f0:	mov    rax,rdx
   3e4f3:	cqo    
   3e4f5:	idiv   rcx
   3e4f8:	mov    ecx,0x3e8
   3e4fd:	add    eax,0x30
   3e500:	mov    BYTE PTR [rdi+0xe],al
   3e503:	mov    rax,rdx
   3e506:	cqo    
   3e508:	idiv   rcx
   3e50b:	mov    ecx,0x64
   3e510:	add    eax,0x30
   3e513:	mov    BYTE PTR [rdi+0xf],al
   3e516:	mov    rax,rdx
   3e519:	cqo    
   3e51b:	idiv   rcx
   3e51e:	mov    ecx,0xa
   3e523:	add    eax,0x30
   3e526:	mov    BYTE PTR [rdi+0x10],al
   3e529:	mov    rax,rdx
   3e52c:	cqo    
   3e52e:	idiv   rcx
   3e531:	add    eax,0x30
   3e534:	add    edx,0x30
   3e537:	mov    BYTE PTR [rdi+0x11],al
   3e53a:	lea    rax,[rdi+0x13]
   3e53e:	mov    BYTE PTR [rdi+0x12],dl
   3e541:	jmp    3d0d9 <number_to_string+0x19>
   3e546:	mov    r8,rdi
   3e549:	xor    edi,edi
   3e54b:	jmp    3d266 <number_to_string+0x1a6>

000000000003e550 <unique_name_1>:
   3e550:	push   r12
   3e552:	push   rbp
   3e553:	mov    rbp,rdi
   3e556:	push   rbx
   3e557:	call   c310 <strlen@plt>
   3e55c:	lea    edi,[rax+0x19]
   3e55f:	mov    rbx,rax
   3e562:	movsxd rdi,edi
   3e565:	call   4b850 <xmalloc>
   3e56a:	movsxd rdx,ebx
   3e56d:	mov    rsi,rbp
   3e570:	lea    rbx,[rax+rdx*1]
   3e574:	mov    rdi,rax
   3e577:	mov    r12,rax
   3e57a:	call   cb30 <memcpy@plt>
   3e57f:	lea    rbp,[rbx+0x1]
   3e583:	mov    BYTE PTR [rbx],0x2e
   3e586:	mov    ebx,0x1
   3e58b:	nop    DWORD PTR [rax+rax*1+0x0]
   3e590:	mov    rsi,rbx
   3e593:	mov    rdi,rbp
   3e596:	call   3d0c0 <number_to_string>
   3e59b:	xor    esi,esi
   3e59d:	mov    rdi,r12
   3e5a0:	call   3b600 <file_exists_p.part.0>
   3e5a5:	cmp    ebx,0xf423e
   3e5ab:	setne  dl
   3e5ae:	add    rbx,0x1
   3e5b2:	test   dl,al
   3e5b4:	jne    3e590 <unique_name_1+0x40>
   3e5b6:	mov    rax,r12
   3e5b9:	pop    rbx
   3e5ba:	pop    rbp
   3e5bb:	pop    r12
   3e5bd:	ret    
   3e5be:	xchg   ax,ax

000000000003e5c0 <unique_name_passthrough>:
   3e5c0:	endbr64 
   3e5c4:	push   r12
   3e5c6:	mov    r12,rdi
   3e5c9:	test   rdi,rdi
   3e5cc:	je     3e5d9 <unique_name_passthrough+0x19>
   3e5ce:	xor    esi,esi
   3e5d0:	call   3b600 <file_exists_p.part.0>
   3e5d5:	test   al,al
   3e5d7:	jne    3e5e0 <unique_name_passthrough+0x20>
   3e5d9:	mov    rax,r12
   3e5dc:	pop    r12
   3e5de:	ret    
   3e5df:	nop
   3e5e0:	mov    rdi,r12
   3e5e3:	pop    r12
   3e5e5:	jmp    3e550 <unique_name_1>
   3e5ea:	nop    WORD PTR [rax+rax*1+0x0]

000000000003e5f0 <unique_name>:
   3e5f0:	endbr64 
   3e5f4:	push   rbp
   3e5f5:	mov    rbp,rdi
   3e5f8:	test   rdi,rdi
   3e5fb:	je     3e608 <unique_name+0x18>
   3e5fd:	xor    esi,esi
   3e5ff:	call   3b600 <file_exists_p.part.0>
   3e604:	test   al,al
   3e606:	jne    3e618 <unique_name+0x28>
   3e608:	mov    rdi,rbp
   3e60b:	pop    rbp
   3e60c:	jmp    4ba50 <xstrdup>
   3e611:	nop    DWORD PTR [rax+0x0]
   3e618:	mov    rdi,rbp
   3e61b:	pop    rbp
   3e61c:	jmp    3e550 <unique_name_1>
   3e621:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3e62c:	nop    DWORD PTR [rax+0x0]

000000000003e630 <unique_create>:
   3e630:	endbr64 
   3e634:	push   r14
   3e636:	mov    r14d,esi
   3e639:	push   r13
   3e63b:	mov    r13,rdx
   3e63e:	movzx  r14d,r14b
   3e642:	push   r12
   3e644:	push   rbp
   3e645:	push   rbx
   3e646:	mov    rbx,rdi
   3e649:	call   3e5f0 <unique_name>
   3e64e:	mov    rbp,rax
   3e651:	jmp    3e675 <unique_create+0x45>
   3e653:	nop    DWORD PTR [rax+rax*1+0x0]
   3e658:	call   c740 <__errno_location@plt>
   3e65d:	cmp    DWORD PTR [rax],0x11
   3e660:	jne    3e6a0 <unique_create+0x70>
   3e662:	mov    rdi,rbp
   3e665:	call   4bdc0 <rpl_free>
   3e66a:	mov    rdi,rbx
   3e66d:	call   3e5f0 <unique_name>
   3e672:	mov    rbp,rax
   3e675:	mov    esi,r14d
   3e678:	mov    rdi,rbp
   3e67b:	call   3bfc0 <fopen_excl>
   3e680:	mov    r12,rax
   3e683:	test   rax,rax
   3e686:	je     3e658 <unique_create+0x28>
   3e688:	test   r13,r13
   3e68b:	je     3e6dc <unique_create+0xac>
   3e68d:	mov    QWORD PTR [r13+0x0],rbp
   3e691:	mov    rax,r12
   3e694:	pop    rbx
   3e695:	pop    rbp
   3e696:	pop    r12
   3e698:	pop    r13
   3e69a:	pop    r14
   3e69c:	ret    
   3e69d:	nop    DWORD PTR [rax]
   3e6a0:	test   r13,r13
   3e6a3:	jne    3e6c0 <unique_create+0x90>
   3e6a5:	mov    r12,r13
   3e6a8:	mov    rdi,rbp
   3e6ab:	call   4bdc0 <rpl_free>
   3e6b0:	pop    rbx
   3e6b1:	mov    rax,r12
   3e6b4:	pop    rbp
   3e6b5:	pop    r12
   3e6b7:	pop    r13
   3e6b9:	pop    r14
   3e6bb:	ret    
   3e6bc:	nop    DWORD PTR [rax+0x0]
   3e6c0:	mov    QWORD PTR [r13+0x0],0x0
   3e6c8:	mov    rdi,rbp
   3e6cb:	call   4bdc0 <rpl_free>
   3e6d0:	pop    rbx
   3e6d1:	mov    rax,r12
   3e6d4:	pop    rbp
   3e6d5:	pop    r12
   3e6d7:	pop    r13
   3e6d9:	pop    r14
   3e6db:	ret    
   3e6dc:	mov    r13,rax
   3e6df:	jmp    3e6a5 <unique_create+0x75>
   3e6e1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3e6ec:	nop    DWORD PTR [rax+0x0]

000000000003e6f0 <fork_to_background>:
   3e6f0:	endbr64 
   3e6f4:	push   r13
   3e6f6:	push   r12
   3e6f8:	sub    rsp,0x8
   3e6fc:	cmp    QWORD PTR [rip+0x4b9bc],0x0        # 8a0c0 <opt+0x40>
   3e704:	je     3e7d8 <fork_to_background+0xe8>
   3e70a:	xor    r13d,r13d
   3e70d:	call   c9e0 <fork@plt>
   3e712:	mov    r12d,eax
   3e715:	test   eax,eax
   3e717:	js     3e8be <fork_to_background+0x1ce>
   3e71d:	jne    3e7a0 <fork_to_background+0xb0>
   3e723:	call   bef0 <setsid@plt>
   3e728:	mov    rdx,QWORD PTR [rip+0x44da1]        # 834d0 <stdin@@GLIBC_2.2.5>
   3e72f:	lea    rsi,[rip+0x2780a]        # 65f40 <yy_accept+0xe80>
   3e736:	lea    rdi,[rip+0x2fce7]        # 6e424 <urlchr_table+0x884>
   3e73d:	call   c8c0 <freopen@plt>
   3e742:	test   rax,rax
   3e745:	je     3e8a0 <fork_to_background+0x1b0>
   3e74b:	mov    rdx,QWORD PTR [rip+0x44d96]        # 834e8 <stdout@@GLIBC_2.2.5>
   3e752:	lea    rsi,[rip+0x2ecb9]        # 6d412 <eta_str.8886+0x69a>
   3e759:	lea    rdi,[rip+0x2fcc4]        # 6e424 <urlchr_table+0x884>
   3e760:	call   c8c0 <freopen@plt>
   3e765:	test   rax,rax
   3e768:	je     3e880 <fork_to_background+0x190>
   3e76e:	mov    rdx,QWORD PTR [rip+0x44d6b]        # 834e0 <stderr@@GLIBC_2.2.5>
   3e775:	lea    rsi,[rip+0x2ec96]        # 6d412 <eta_str.8886+0x69a>
   3e77c:	lea    rdi,[rip+0x2fca1]        # 6e424 <urlchr_table+0x884>
   3e783:	call   c8c0 <freopen@plt>
   3e788:	test   rax,rax
   3e78b:	je     3e860 <fork_to_background+0x170>
   3e791:	add    rsp,0x8
   3e795:	mov    eax,r13d
   3e798:	pop    r12
   3e79a:	pop    r13
   3e79c:	ret    
   3e79d:	nop    DWORD PTR [rax]
   3e7a0:	xor    edi,edi
   3e7a2:	mov    edx,0x5
   3e7a7:	lea    rsi,[rip+0x2fe72]        # 6e620 <urlchr_table+0xa80>
   3e7ae:	call   c780 <dcgettext@plt>
   3e7b3:	mov    edx,r12d
   3e7b6:	mov    edi,0x1
   3e7bb:	mov    rsi,rax
   3e7be:	xor    eax,eax
   3e7c0:	call   c070 <__printf_chk@plt>
   3e7c5:	test   r13b,r13b
   3e7c8:	jne    3e820 <fork_to_background+0x130>
   3e7ca:	xor    edi,edi
   3e7cc:	call   c060 <exit@plt>
   3e7d1:	nop    DWORD PTR [rax+0x0]
   3e7d8:	cmp    BYTE PTR [rip+0x4b8a5],0x0        # 8a084 <opt+0x4>
   3e7df:	je     3e7ee <fork_to_background+0xfe>
   3e7e1:	cmp    BYTE PTR [rip+0x4bad0],0x0        # 8a2b8 <opt+0x238>
   3e7e8:	je     3e70a <fork_to_background+0x1a>
   3e7ee:	lea    rdi,[rip+0x2a058]        # 6884d <primes.6089+0x276d>
   3e7f5:	lea    rdx,[rip+0x4b8c4]        # 8a0c0 <opt+0x40>
   3e7fc:	xor    esi,esi
   3e7fe:	call   3e630 <unique_create>
   3e803:	mov    rdi,rax
   3e806:	test   rax,rax
   3e809:	je     3e70a <fork_to_background+0x1a>
   3e80f:	call   c8b0 <fclose@plt>
   3e814:	mov    r13d,0x1
   3e81a:	jmp    3e70d <fork_to_background+0x1d>
   3e81f:	nop
   3e820:	mov    rdi,QWORD PTR [rip+0x4b899]        # 8a0c0 <opt+0x40>
   3e827:	call   4b5b0 <quote>
   3e82c:	xor    edi,edi
   3e82e:	mov    edx,0x5
   3e833:	lea    rsi,[rip+0x2fe0e]        # 6e648 <urlchr_table+0xaa8>
   3e83a:	mov    r12,rax
   3e83d:	call   c780 <dcgettext@plt>
   3e842:	mov    rdx,r12
   3e845:	mov    edi,0x1
   3e84a:	mov    rsi,rax
   3e84d:	xor    eax,eax
   3e84f:	call   c070 <__printf_chk@plt>
   3e854:	jmp    3e7ca <fork_to_background+0xda>
   3e859:	nop    DWORD PTR [rax+0x0]
   3e860:	cmp    BYTE PTR [rip+0x4ba54],0x0        # 8a2bb <opt+0x23b>
   3e867:	je     3e791 <fork_to_background+0xa1>
   3e86d:	lea    rdi,[rip+0x2fe4c]        # 6e6c0 <urlchr_table+0xb20>
   3e874:	call   2e250 <debug_logprintf>
   3e879:	jmp    3e791 <fork_to_background+0xa1>
   3e87e:	xchg   ax,ax
   3e880:	cmp    BYTE PTR [rip+0x4ba34],0x0        # 8a2bb <opt+0x23b>
   3e887:	je     3e76e <fork_to_background+0x7e>
   3e88d:	lea    rdi,[rip+0x2fdfc]        # 6e690 <urlchr_table+0xaf0>
   3e894:	call   2e250 <debug_logprintf>
   3e899:	jmp    3e76e <fork_to_background+0x7e>
   3e89e:	xchg   ax,ax
   3e8a0:	cmp    BYTE PTR [rip+0x4ba14],0x0        # 8a2bb <opt+0x23b>
   3e8a7:	je     3e74b <fork_to_background+0x5b>
   3e8ad:	lea    rdi,[rip+0x2fdb4]        # 6e668 <urlchr_table+0xac8>
   3e8b4:	call   2e250 <debug_logprintf>
   3e8b9:	jmp    3e74b <fork_to_background+0x5b>
   3e8be:	lea    rdi,[rip+0x2fb5a]        # 6e41f <urlchr_table+0x87f>
   3e8c5:	call   ca50 <perror@plt>
   3e8ca:	mov    edi,0x1
   3e8cf:	call   c060 <exit@plt>
   3e8d4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3e8df:	nop

000000000003e8e0 <number_to_static_string>:
   3e8e0:	endbr64 
   3e8e4:	movsxd rax,DWORD PTR [rip+0x4b45d]        # 89d48 <ringpos.8477>
   3e8eb:	mov    rsi,rdi
   3e8ee:	mov    r9,rax
   3e8f1:	lea    rdx,[rax+rax*2]
   3e8f5:	lea    rax,[rip+0x4b404]        # 89d00 <ring.8476>
   3e8fc:	lea    r10,[rax+rdx*8]
   3e900:	mov    rdi,r10
   3e903:	call   3d0c0 <number_to_string>
   3e908:	lea    eax,[r9+0x1]
   3e90c:	movsxd rdx,eax
   3e90f:	mov    ecx,eax
   3e911:	imul   rdx,rdx,0x55555556
   3e918:	sar    ecx,0x1f
   3e91b:	shr    rdx,0x20
   3e91f:	sub    edx,ecx
   3e921:	lea    edx,[rdx+rdx*2]
   3e924:	sub    eax,edx
   3e926:	mov    DWORD PTR [rip+0x4b41c],eax        # 89d48 <ringpos.8477>
   3e92c:	mov    rax,r10
   3e92f:	ret    

000000000003e930 <convert_to_bits>:
   3e930:	endbr64 
   3e934:	cmp    BYTE PTR [rip+0x4baa0],0x0        # 8a3db <opt+0x35b>
   3e93b:	mov    rax,rdi
   3e93e:	jne    3e948 <convert_to_bits+0x18>
   3e940:	ret    
   3e941:	nop    DWORD PTR [rax+0x0]
   3e948:	shl    rax,0x3
   3e94c:	ret    
   3e94d:	nop    DWORD PTR [rax]

000000000003e950 <determine_screen_width>:
   3e950:	endbr64 
   3e954:	sub    rsp,0x18
   3e958:	mov    rax,QWORD PTR fs:0x28
   3e961:	mov    QWORD PTR [rsp+0x8],rax
   3e966:	xor    eax,eax
   3e968:	cmp    QWORD PTR [rip+0x4b750],0x0        # 8a0c0 <opt+0x40>
   3e970:	je     3e998 <determine_screen_width+0x48>
   3e972:	cmp    DWORD PTR [rip+0x4b8df],0x1        # 8a258 <opt+0x1d8>
   3e979:	je     3e998 <determine_screen_width+0x48>
   3e97b:	xor    eax,eax
   3e97d:	mov    rcx,QWORD PTR [rsp+0x8]
   3e982:	xor    rcx,QWORD PTR fs:0x28
   3e98b:	jne    3e9c0 <determine_screen_width+0x70>
   3e98d:	add    rsp,0x18
   3e991:	ret    
   3e992:	nop    WORD PTR [rax+rax*1+0x0]
   3e998:	mov    rdi,QWORD PTR [rip+0x44b41]        # 834e0 <stderr@@GLIBC_2.2.5>
   3e99f:	call   be80 <fileno@plt>
   3e9a4:	mov    rdx,rsp
   3e9a7:	mov    esi,0x5413
   3e9ac:	mov    edi,eax
   3e9ae:	xor    eax,eax
   3e9b0:	call   4be80 <rpl_ioctl>
   3e9b5:	test   eax,eax
   3e9b7:	js     3e97b <determine_screen_width+0x2b>
   3e9b9:	movzx  eax,WORD PTR [rsp+0x2]
   3e9be:	jmp    3e97d <determine_screen_width+0x2d>
   3e9c0:	call   c7b0 <__stack_chk_fail@plt>
   3e9c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000003e9d0 <random_number>:
   3e9d0:	endbr64 
   3e9d4:	push   rbp
   3e9d5:	push   rbx
   3e9d6:	mov    ebx,edi
   3e9d8:	sub    rsp,0x8
   3e9dc:	mov    eax,DWORD PTR [rip+0x4b4c6]        # 89ea8 <rnd_seeded>
   3e9e2:	test   eax,eax
   3e9e4:	je     3ea00 <random_number+0x30>
   3e9e6:	call   c8d0 <random@plt>
   3e9eb:	movsxd rdi,ebx
   3e9ee:	add    rsp,0x8
   3e9f2:	cqo    
   3e9f4:	pop    rbx
   3e9f5:	pop    rbp
   3e9f6:	idiv   rdi
   3e9f9:	mov    eax,edx
   3e9fb:	ret    
   3e9fc:	nop    DWORD PTR [rax+0x0]
   3ea00:	xor    edi,edi
   3ea02:	call   cbf0 <time@plt>
   3ea07:	mov    rbp,rax
   3ea0a:	call   c1e0 <getpid@plt>
   3ea0f:	xor    eax,ebp
   3ea11:	mov    edi,eax
   3ea13:	call   c1c0 <srandom@plt>
   3ea18:	mov    DWORD PTR [rip+0x4b486],0x1        # 89ea8 <rnd_seeded>
   3ea22:	jmp    3e9e6 <random_number+0x16>
   3ea24:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3ea2f:	nop

000000000003ea30 <random_float>:
   3ea30:	endbr64 
   3ea34:	sub    rsp,0x8
   3ea38:	mov    edi,0x7fffffff
   3ea3d:	call   3e9d0 <random_number>
   3ea42:	pxor   xmm0,xmm0
   3ea46:	cvtsi2sd xmm0,eax
   3ea4a:	divsd  xmm0,QWORD PTR [rip+0x2e33e]        # 6cd90 <eta_str.8886+0x18>
   3ea52:	add    rsp,0x8
   3ea56:	ret    
   3ea57:	nop    WORD PTR [rax+rax*1+0x0]

000000000003ea60 <run_with_timeout>:
   3ea60:	endbr64 
   3ea64:	push   r12
   3ea66:	push   rbp
   3ea67:	push   rbx
   3ea68:	sub    rsp,0x50
   3ea6c:	mov    QWORD PTR [rsp+0x10],rdi
   3ea71:	mov    QWORD PTR [rsp+0x18],rsi
   3ea76:	movsd  QWORD PTR [rsp+0x8],xmm0
   3ea7c:	mov    rcx,QWORD PTR fs:0x28
   3ea85:	mov    QWORD PTR [rsp+0x48],rcx
   3ea8a:	xor    ecx,ecx
   3ea8c:	ucomisd xmm0,QWORD PTR [rip+0x1c794]        # 5b228 <_IO_stdin_used+0x228>
   3ea94:	jp     3eac0 <run_with_timeout+0x60>
   3ea96:	jne    3eac0 <run_with_timeout+0x60>
   3ea98:	mov    rax,rdi
   3ea9b:	mov    rdi,rsi
   3ea9e:	call   rax
   3eaa0:	xor    eax,eax
   3eaa2:	mov    rbx,QWORD PTR [rsp+0x48]
   3eaa7:	xor    rbx,QWORD PTR fs:0x28
   3eab0:	jne    3eba6 <run_with_timeout+0x146>
   3eab6:	add    rsp,0x50
   3eaba:	pop    rbx
   3eabb:	pop    rbp
   3eabc:	pop    r12
   3eabe:	ret    
   3eabf:	nop
   3eac0:	mov    esi,0x1
   3eac5:	lea    rdi,[rip+0x4b314]        # 89de0 <run_with_timeout_env>
   3eacc:	call   ca70 <__sigsetjmp@plt>
   3ead1:	endbr64 
   3ead5:	test   eax,eax
   3ead7:	jne    3eb90 <run_with_timeout+0x130>
   3eadd:	lea    rsi,[rip+0xffffffffffffcafc]        # 3b5e0 <abort_run_with_timeout>
   3eae4:	mov    edi,0xe
   3eae9:	lea    rbp,[rsp+0x20]
   3eaee:	call   c680 <signal@plt>
   3eaf3:	pxor   xmm0,xmm0
   3eaf7:	pxor   xmm1,xmm1
   3eafb:	mov    rsi,rbp
   3eafe:	movsd  xmm2,QWORD PTR [rsp+0x8]
   3eb04:	movaps XMMWORD PTR [rsp+0x20],xmm1
   3eb09:	cvttsd2si rdx,xmm2
   3eb0e:	cvtsi2sd xmm0,rdx
   3eb13:	mov    QWORD PTR [rsp+0x30],rdx
   3eb18:	subsd  xmm2,xmm0
   3eb1c:	movsd  xmm0,QWORD PTR [rip+0x1c6f4]        # 5b218 <_IO_stdin_used+0x218>
   3eb24:	mulsd  xmm0,xmm2
   3eb28:	cvttsd2si rax,xmm0
   3eb2d:	or     rdx,rax
   3eb30:	mov    edx,0x1
   3eb35:	cmove  rax,rdx
   3eb39:	xor    edx,edx
   3eb3b:	xor    edi,edi
   3eb3d:	mov    QWORD PTR [rsp+0x38],rax
   3eb42:	call   c110 <setitimer@plt>
   3eb47:	mov    rdi,QWORD PTR [rsp+0x18]
   3eb4c:	mov    rax,QWORD PTR [rsp+0x10]
   3eb51:	call   rax
   3eb53:	call   c740 <__errno_location@plt>
   3eb58:	pxor   xmm1,xmm1
   3eb5c:	xor    edx,edx
   3eb5e:	mov    rsi,rbp
   3eb61:	mov    r12d,DWORD PTR [rax]
   3eb64:	xor    edi,edi
   3eb66:	mov    rbx,rax
   3eb69:	movaps XMMWORD PTR [rsp+0x20],xmm1
   3eb6e:	movaps XMMWORD PTR [rsp+0x30],xmm1
   3eb73:	call   c110 <setitimer@plt>
   3eb78:	xor    esi,esi
   3eb7a:	mov    edi,0xe
   3eb7f:	call   c680 <signal@plt>
   3eb84:	mov    DWORD PTR [rbx],r12d
   3eb87:	xor    eax,eax
   3eb89:	jmp    3eaa2 <run_with_timeout+0x42>
   3eb8e:	xchg   ax,ax
   3eb90:	xor    esi,esi
   3eb92:	mov    edi,0xe
   3eb97:	call   c680 <signal@plt>
   3eb9c:	mov    eax,0x1
   3eba1:	jmp    3eaa2 <run_with_timeout+0x42>
   3eba6:	call   c7b0 <__stack_chk_fail@plt>
   3ebab:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003ebb0 <xsleep>:
   3ebb0:	endbr64 
   3ebb4:	push   rbx
   3ebb5:	sub    rsp,0x10
   3ebb9:	comisd xmm0,QWORD PTR [rip+0x1cc1f]        # 5b7e0 <_IO_stdin_used+0x7e0>
   3ebc1:	jb     3ebe8 <xsleep+0x38>
   3ebc3:	cvttsd2si rbx,xmm0
   3ebc8:	movsd  QWORD PTR [rsp+0x8],xmm0
   3ebce:	mov    edi,ebx
   3ebd0:	call   c4c0 <sleep@plt>
   3ebd5:	pxor   xmm1,xmm1
   3ebd9:	movsd  xmm0,QWORD PTR [rsp+0x8]
   3ebdf:	cvtsi2sd xmm1,rbx
   3ebe4:	subsd  xmm0,xmm1
   3ebe8:	mulsd  xmm0,QWORD PTR [rip+0x1c628]        # 5b218 <_IO_stdin_used+0x218>
   3ebf0:	add    rsp,0x10
   3ebf4:	pop    rbx
   3ebf5:	cvttsd2si rdi,xmm0
   3ebfa:	jmp    c530 <usleep@plt>
   3ebff:	nop

000000000003ec00 <wget_base64_encode>:
   3ec00:	endbr64 
   3ec04:	lea    r9,[rdi+rsi*1-0x2]
   3ec09:	mov    r8,rdx
   3ec0c:	mov    rcx,rdx
   3ec0f:	cmp    rdi,r9
   3ec12:	jae    3ec8b <wget_base64_encode+0x8b>
   3ec14:	lea    rdx,[rip+0x2fbc5]        # 6e7e0 <tbl.8521>
   3ec1b:	nop    DWORD PTR [rax+rax*1+0x0]
   3ec20:	movzx  eax,BYTE PTR [rdi]
   3ec23:	add    rcx,0x4
   3ec27:	add    rdi,0x3
   3ec2b:	shr    al,0x2
   3ec2e:	and    eax,0x3f
   3ec31:	movzx  eax,BYTE PTR [rdx+rax*1]
   3ec35:	mov    BYTE PTR [rcx-0x4],al
   3ec38:	movzx  eax,BYTE PTR [rdi-0x3]
   3ec3c:	movzx  r10d,BYTE PTR [rdi-0x2]
   3ec41:	shl    eax,0x4
   3ec44:	shr    r10b,0x4
   3ec48:	and    eax,0x30
   3ec4b:	add    rax,r10
   3ec4e:	and    eax,0x7f
   3ec51:	movzx  eax,BYTE PTR [rdx+rax*1]
   3ec55:	mov    BYTE PTR [rcx-0x3],al
   3ec58:	movzx  eax,BYTE PTR [rdi-0x2]
   3ec5c:	movzx  r10d,BYTE PTR [rdi-0x1]
   3ec61:	shl    eax,0x2
   3ec64:	and    eax,0x3c
   3ec67:	shr    r10b,0x6
   3ec6b:	add    rax,r10
   3ec6e:	and    eax,0x7f
   3ec71:	movzx  eax,BYTE PTR [rdx+rax*1]
   3ec75:	mov    BYTE PTR [rcx-0x2],al
   3ec78:	movzx  eax,BYTE PTR [rdi-0x1]
   3ec7c:	and    eax,0x3f
   3ec7f:	movzx  eax,BYTE PTR [rdx+rax*1]
   3ec83:	mov    BYTE PTR [rcx-0x1],al
   3ec86:	cmp    r9,rdi
   3ec89:	ja     3ec20 <wget_base64_encode+0x20>
   3ec8b:	movabs rdx,0xaaaaaaaaaaaaaaab
   3ec95:	mov    rax,rsi
   3ec98:	mul    rdx
   3ec9b:	mov    rax,rdx
   3ec9e:	and    rdx,0xfffffffffffffffe
   3eca2:	shr    rax,1
   3eca5:	add    rdx,rax
   3eca8:	mov    rax,rsi
   3ecab:	sub    rax,rdx
   3ecae:	cmp    rax,0x1
   3ecb2:	je     3ed18 <wget_base64_encode+0x118>
   3ecb4:	cmp    rax,0x2
   3ecb8:	jne    3ed08 <wget_base64_encode+0x108>
   3ecba:	movzx  eax,BYTE PTR [rdi]
   3ecbd:	lea    rdx,[rip+0x2fb1c]        # 6e7e0 <tbl.8521>
   3ecc4:	add    rcx,0x4
   3ecc8:	shr    al,0x2
   3eccb:	and    eax,0x3f
   3ecce:	movzx  eax,BYTE PTR [rdx+rax*1]
   3ecd2:	mov    BYTE PTR [rcx-0x4],al
   3ecd5:	movzx  eax,BYTE PTR [rdi]
   3ecd8:	movzx  esi,BYTE PTR [rdi+0x1]
   3ecdc:	shl    eax,0x4
   3ecdf:	and    eax,0x30
   3ece2:	shr    sil,0x4
   3ece6:	add    rax,rsi
   3ece9:	and    eax,0x7f
   3ecec:	movzx  eax,BYTE PTR [rdx+rax*1]
   3ecf0:	mov    BYTE PTR [rcx-0x3],al
   3ecf3:	movzx  eax,BYTE PTR [rdi+0x1]
   3ecf7:	mov    BYTE PTR [rcx-0x1],0x3d
   3ecfb:	shl    eax,0x2
   3ecfe:	and    eax,0x3c
   3ed01:	movzx  eax,BYTE PTR [rdx+rax*1]
   3ed05:	mov    BYTE PTR [rcx-0x2],al
   3ed08:	mov    rax,rcx
   3ed0b:	mov    BYTE PTR [rcx],0x0
   3ed0e:	sub    rax,r8
   3ed11:	ret    
   3ed12:	nop    WORD PTR [rax+rax*1+0x0]
   3ed18:	movzx  eax,BYTE PTR [rdi]
   3ed1b:	lea    rdx,[rip+0x2fabe]        # 6e7e0 <tbl.8521>
   3ed22:	add    rcx,0x4
   3ed26:	shr    al,0x2
   3ed29:	and    eax,0x3f
   3ed2c:	movzx  eax,BYTE PTR [rdx+rax*1]
   3ed30:	mov    BYTE PTR [rcx-0x4],al
   3ed33:	movzx  eax,BYTE PTR [rdi]
   3ed36:	shl    eax,0x4
   3ed39:	and    eax,0x30
   3ed3c:	movzx  eax,BYTE PTR [rdx+rax*1]
   3ed40:	mov    BYTE PTR [rcx-0x3],al
   3ed43:	mov    eax,0x3d3d
   3ed48:	mov    WORD PTR [rcx-0x2],ax
   3ed4c:	mov    rax,rcx
   3ed4f:	sub    rax,r8
   3ed52:	mov    BYTE PTR [rcx],0x0
   3ed55:	ret    
   3ed56:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000003ed60 <wget_base64_decode>:
   3ed60:	endbr64 
   3ed64:	xor    r9d,r9d
   3ed67:	lea    r8,[rip+0x2f9f2]        # 6e760 <base64_char_to_value.8536>
   3ed6e:	xchg   ax,ax
   3ed70:	movzx  eax,BYTE PTR [rdi]
   3ed73:	add    rdi,0x1
   3ed77:	cmp    al,0xd
   3ed79:	jg     3ed90 <wget_base64_decode+0x30>
   3ed7b:	cmp    al,0x8
   3ed7d:	jg     3ed70 <wget_base64_decode+0x10>
   3ed7f:	test   al,al
   3ed81:	jne    3ed94 <wget_base64_decode+0x34>
   3ed83:	mov    rax,r9
   3ed86:	ret    
   3ed87:	nop    WORD PTR [rax+rax*1+0x0]
   3ed90:	cmp    al,0x20
   3ed92:	je     3ed70 <wget_base64_decode+0x10>
   3ed94:	cmp    al,0x3d
   3ed96:	je     3edbe <wget_base64_decode+0x5e>
   3ed98:	test   al,al
   3ed9a:	js     3edbe <wget_base64_decode+0x5e>
   3ed9c:	movsx  ecx,BYTE PTR [r8+rax*1]
   3eda1:	test   cl,cl
   3eda3:	js     3edbe <wget_base64_decode+0x5e>
   3eda5:	shl    ecx,0x12
   3eda8:	mov    r10d,ecx
   3edab:	movzx  eax,BYTE PTR [rdi]
   3edae:	add    rdi,0x1
   3edb2:	cmp    al,0xd
   3edb4:	jg     3edd0 <wget_base64_decode+0x70>
   3edb6:	cmp    al,0x8
   3edb8:	jg     3edab <wget_base64_decode+0x4b>
   3edba:	test   al,al
   3edbc:	jg     3edd8 <wget_base64_decode+0x78>
   3edbe:	mov    r9,0xffffffffffffffff
   3edc5:	mov    rax,r9
   3edc8:	ret    
   3edc9:	nop    DWORD PTR [rax+0x0]
   3edd0:	cmp    al,0x20
   3edd2:	je     3edab <wget_base64_decode+0x4b>
   3edd4:	cmp    al,0x3d
   3edd6:	je     3edbe <wget_base64_decode+0x5e>
   3edd8:	movzx  eax,BYTE PTR [r8+rax*1]
   3eddd:	test   al,al
   3eddf:	js     3edbe <wget_base64_decode+0x5e>
   3ede1:	movsx  ecx,al
   3ede4:	shl    ecx,0xc
   3ede7:	or     ecx,r10d
   3edea:	test   rdx,rdx
   3eded:	je     3ee08 <wget_base64_decode+0xa8>
   3edef:	movsxd rax,ecx
   3edf2:	sub    rdx,0x1
   3edf6:	add    rsi,0x1
   3edfa:	shr    rax,0x10
   3edfe:	mov    BYTE PTR [rsi-0x1],al
   3ee01:	nop    DWORD PTR [rax+0x0]
   3ee08:	movzx  eax,BYTE PTR [rdi]
   3ee0b:	add    rdi,0x1
   3ee0f:	cmp    al,0xd
   3ee11:	jg     3ee30 <wget_base64_decode+0xd0>
   3ee13:	cmp    al,0x8
   3ee15:	jg     3ee08 <wget_base64_decode+0xa8>
   3ee17:	test   al,al
   3ee19:	je     3edbe <wget_base64_decode+0x5e>
   3ee1b:	js     3edbe <wget_base64_decode+0x5e>
   3ee1d:	movzx  r10d,al
   3ee21:	movsx  r10d,BYTE PTR [r8+r10*1]
   3ee26:	test   r10b,r10b
   3ee29:	jns    3ee42 <wget_base64_decode+0xe2>
   3ee2b:	jmp    3edbe <wget_base64_decode+0x5e>
   3ee2d:	nop    DWORD PTR [rax]
   3ee30:	cmp    al,0x20
   3ee32:	je     3ee08 <wget_base64_decode+0xa8>
   3ee34:	movzx  r10d,al
   3ee38:	movsx  r10d,BYTE PTR [r8+r10*1]
   3ee3d:	test   r10b,r10b
   3ee40:	js     3ee98 <wget_base64_decode+0x138>
   3ee42:	cmp    al,0x3d
   3ee44:	je     3eea0 <wget_base64_decode+0x140>
   3ee46:	shl    r10d,0x6
   3ee4a:	or     ecx,r10d
   3ee4d:	movsxd rcx,ecx
   3ee50:	test   rdx,rdx
   3ee53:	je     3ee70 <wget_base64_decode+0x110>
   3ee55:	mov    rax,rcx
   3ee58:	sub    rdx,0x1
   3ee5c:	add    rsi,0x1
   3ee60:	shr    rax,0x8
   3ee64:	mov    BYTE PTR [rsi-0x1],al
   3ee67:	nop    WORD PTR [rax+rax*1+0x0]
   3ee70:	movzx  r10d,BYTE PTR [rdi]
   3ee74:	add    rdi,0x1
   3ee78:	cmp    r10b,0xd
   3ee7c:	jg     3eec0 <wget_base64_decode+0x160>
   3ee7e:	cmp    r10b,0x8
   3ee82:	jg     3ee70 <wget_base64_decode+0x110>
   3ee84:	test   r10b,r10b
   3ee87:	je     3edbe <wget_base64_decode+0x5e>
   3ee8d:	js     3edbe <wget_base64_decode+0x5e>
   3ee93:	jmp    3eecc <wget_base64_decode+0x16c>
   3ee95:	nop    DWORD PTR [rax]
   3ee98:	cmp    al,0x3d
   3ee9a:	jne    3edbe <wget_base64_decode+0x5e>
   3eea0:	movzx  eax,BYTE PTR [rdi]
   3eea3:	add    rdi,0x1
   3eea7:	cmp    al,0xd
   3eea9:	jg     3eef8 <wget_base64_decode+0x198>
   3eeab:	cmp    al,0x8
   3eead:	jg     3eea0 <wget_base64_decode+0x140>
   3eeaf:	mov    r9,0xffffffffffffffff
   3eeb6:	jmp    3edc5 <wget_base64_decode+0x65>
   3eebb:	nop    DWORD PTR [rax+rax*1+0x0]
   3eec0:	cmp    r10b,0x20
   3eec4:	je     3ee70 <wget_base64_decode+0x110>
   3eec6:	cmp    r10b,0x3d
   3eeca:	je     3ef10 <wget_base64_decode+0x1b0>
   3eecc:	movsx  rax,BYTE PTR [r8+r10*1]
   3eed1:	test   al,al
   3eed3:	js     3edbe <wget_base64_decode+0x5e>
   3eed9:	test   rdx,rdx
   3eedc:	je     3eeec <wget_base64_decode+0x18c>
   3eede:	or     rcx,rax
   3eee1:	sub    rdx,0x1
   3eee5:	add    rsi,0x1
   3eee9:	mov    BYTE PTR [rsi-0x1],cl
   3eeec:	add    r9,0x3
   3eef0:	jmp    3ed70 <wget_base64_decode+0x10>
   3eef5:	nop    DWORD PTR [rax]
   3eef8:	cmp    al,0x20
   3eefa:	je     3eea0 <wget_base64_decode+0x140>
   3eefc:	cmp    al,0x3d
   3eefe:	jne    3edbe <wget_base64_decode+0x5e>
   3ef04:	add    r9,0x1
   3ef08:	jmp    3ed70 <wget_base64_decode+0x10>
   3ef0d:	nop    DWORD PTR [rax]
   3ef10:	add    r9,0x2
   3ef14:	jmp    3ed70 <wget_base64_decode+0x10>
   3ef19:	nop    DWORD PTR [rax+0x0]

000000000003ef20 <compile_posix_regex>:
   3ef20:	endbr64 
   3ef24:	push   r15
   3ef26:	push   r14
   3ef28:	push   r13
   3ef2a:	mov    r13,rdi
   3ef2d:	mov    edi,0x40
   3ef32:	push   r12
   3ef34:	push   rbp
   3ef35:	call   4b850 <xmalloc>
   3ef3a:	mov    edx,0x9
   3ef3f:	mov    rsi,r13
   3ef42:	mov    rdi,rax
   3ef45:	mov    r12,rax
   3ef48:	call   5a080 <rpl_regcomp>
   3ef4d:	test   eax,eax
   3ef4f:	jne    3ef60 <compile_posix_regex+0x40>
   3ef51:	pop    rbp
   3ef52:	mov    rax,r12
   3ef55:	pop    r12
   3ef57:	pop    r13
   3ef59:	pop    r14
   3ef5b:	pop    r15
   3ef5d:	ret    
   3ef5e:	xchg   ax,ax
   3ef60:	mov    rsi,r12
   3ef63:	xor    ecx,ecx
   3ef65:	xor    edx,edx
   3ef67:	mov    edi,eax
   3ef69:	mov    ebp,eax
   3ef6b:	call   5a1a0 <rpl_regerror>
   3ef70:	mov    rdi,rax
   3ef73:	mov    r15,rax
   3ef76:	call   4b850 <xmalloc>
   3ef7b:	mov    rcx,r15
   3ef7e:	mov    rsi,r12
   3ef81:	mov    edi,ebp
   3ef83:	mov    rdx,rax
   3ef86:	mov    r14,rax
   3ef89:	call   5a1a0 <rpl_regerror>
   3ef8e:	mov    rdi,r13
   3ef91:	call   4b5b0 <quote>
   3ef96:	mov    edx,0x5
   3ef9b:	lea    rsi,[rip+0x2f74e]        # 6e6f0 <urlchr_table+0xb50>
   3efa2:	xor    edi,edi
   3efa4:	mov    r13,rax
   3efa7:	call   c780 <dcgettext@plt>
   3efac:	mov    r8,r14
   3efaf:	mov    rcx,r13
   3efb2:	mov    esi,0x1
   3efb7:	mov    rdi,QWORD PTR [rip+0x44522]        # 834e0 <stderr@@GLIBC_2.2.5>
   3efbe:	mov    rdx,rax
   3efc1:	xor    eax,eax
   3efc3:	call   bfd0 <__fprintf_chk@plt>
   3efc8:	mov    rdi,r14
   3efcb:	call   4bdc0 <rpl_free>
   3efd0:	mov    rdi,r12
   3efd3:	xor    r12d,r12d
   3efd6:	call   4bdc0 <rpl_free>
   3efdb:	jmp    3ef51 <compile_posix_regex+0x31>

000000000003efe0 <match_posix_regex>:
   3efe0:	endbr64 
   3efe4:	push   r14
   3efe6:	xor    r8d,r8d
   3efe9:	xor    ecx,ecx
   3efeb:	xor    edx,edx
   3efed:	push   r13
   3efef:	push   r12
   3eff1:	push   rbp
   3eff2:	mov    rbp,rsi
   3eff5:	sub    rsp,0x8
   3eff9:	call   5a280 <rpl_regexec>
   3effe:	mov    r12d,eax
   3f001:	xor    eax,eax
   3f003:	cmp    r12d,0x1
   3f007:	je     3f013 <match_posix_regex+0x33>
   3f009:	mov    eax,0x1
   3f00e:	test   r12d,r12d
   3f011:	jne    3f020 <match_posix_regex+0x40>
   3f013:	add    rsp,0x8
   3f017:	pop    rbp
   3f018:	pop    r12
   3f01a:	pop    r13
   3f01c:	pop    r14
   3f01e:	ret    
   3f01f:	nop
   3f020:	mov    rsi,QWORD PTR [rip+0x4b101]        # 8a128 <opt+0xa8>
   3f027:	xor    ecx,ecx
   3f029:	xor    edx,edx
   3f02b:	mov    edi,r12d
   3f02e:	call   5a1a0 <rpl_regerror>
   3f033:	mov    rdi,rax
   3f036:	mov    r14,rax
   3f039:	call   4b850 <xmalloc>
   3f03e:	mov    rsi,QWORD PTR [rip+0x4b0e3]        # 8a128 <opt+0xa8>
   3f045:	mov    rcx,r14
   3f048:	mov    edi,r12d
   3f04b:	mov    rdx,rax
   3f04e:	mov    r13,rax
   3f051:	call   5a1a0 <rpl_regerror>
   3f056:	mov    rdi,rbp
   3f059:	call   4b5b0 <quote>
   3f05e:	mov    edx,0x5
   3f063:	lea    rsi,[rip+0x2f3c4]        # 6e42e <urlchr_table+0x88e>
   3f06a:	xor    edi,edi
   3f06c:	mov    r14,rax
   3f06f:	call   c780 <dcgettext@plt>
   3f074:	mov    ecx,r12d
   3f077:	mov    rdx,r14
   3f07a:	xor    edi,edi
   3f07c:	mov    rsi,rax
   3f07f:	xor    eax,eax
   3f081:	call   2e0a0 <logprintf>
   3f086:	mov    rdi,r13
   3f089:	call   4bdc0 <rpl_free>
   3f08e:	add    rsp,0x8
   3f092:	xor    eax,eax
   3f094:	pop    rbp
   3f095:	pop    r12
   3f097:	pop    r13
   3f099:	pop    r14
   3f09b:	ret    
   3f09c:	nop    DWORD PTR [rax+0x0]

000000000003f0a0 <stable_sort>:
   3f0a0:	endbr64 
   3f0a4:	cmp    rsi,0x1
   3f0a8:	jbe    3f110 <stable_sort+0x70>
   3f0aa:	push   r14
   3f0ac:	push   r13
   3f0ae:	push   r12
   3f0b0:	mov    r12,rdx
   3f0b3:	push   rbp
   3f0b4:	push   rbx
   3f0b5:	cmp    rdx,0x1
   3f0b9:	ja     3f0c8 <stable_sort+0x28>
   3f0bb:	pop    rbx
   3f0bc:	pop    rbp
   3f0bd:	pop    r12
   3f0bf:	pop    r13
   3f0c1:	pop    r14
   3f0c3:	ret    
   3f0c4:	nop    DWORD PTR [rax+0x0]
   3f0c8:	mov    r13,rdi
   3f0cb:	mov    rdi,rsi
   3f0ce:	mov    rbx,rsi
   3f0d1:	mov    rbp,rcx
   3f0d4:	imul   rdi,rdx
   3f0d8:	call   4b850 <xmalloc>
   3f0dd:	mov    rdi,r13
   3f0e0:	mov    r9,rbp
   3f0e3:	lea    r8,[rbx-0x1]
   3f0e7:	mov    r14,rax
   3f0ea:	mov    rdx,r12
   3f0ed:	xor    ecx,ecx
   3f0ef:	mov    rsi,rax
   3f0f2:	call   3b320 <mergesort_internal>
   3f0f7:	pop    rbx
   3f0f8:	mov    rdi,r14
   3f0fb:	pop    rbp
   3f0fc:	pop    r12
   3f0fe:	pop    r13
   3f100:	pop    r14
   3f102:	jmp    4bdc0 <rpl_free>
   3f107:	nop    WORD PTR [rax+rax*1+0x0]
   3f110:	ret    
   3f111:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3f11c:	nop    DWORD PTR [rax+0x0]

000000000003f120 <print_decimal>:
   3f120:	endbr64 
   3f124:	sub    rsp,0x8
   3f128:	comisd xmm0,QWORD PTR [rip+0x1c0f8]        # 5b228 <_IO_stdin_used+0x228>
   3f130:	movapd xmm1,xmm0
   3f134:	jae    3f13e <print_decimal+0x1e>
   3f136:	xorpd  xmm1,XMMWORD PTR [rip+0x296e2]        # 68820 <primes.6089+0x2740>
   3f13e:	comisd xmm1,QWORD PTR [rip+0x2f6ea]        # 6e830 <powers.8451+0x10>
   3f146:	lea    r8,[rip+0x2f2fe]        # 6e44b <urlchr_table+0x8ab>
   3f14d:	jae    3f17b <print_decimal+0x5b>
   3f14f:	comisd xmm1,QWORD PTR [rip+0x2e5d9]        # 6d730 <eta_str.8886+0x9b8>
   3f157:	jae    3f1b0 <print_decimal+0x90>
   3f159:	comisd xmm1,QWORD PTR [rip+0x2dca7]        # 6ce08 <eta_str.8886+0x90>
   3f161:	lea    r8,[rip+0x2f2ed]        # 6e455 <urlchr_table+0x8b5>
   3f168:	jae    3f17b <print_decimal+0x5b>
   3f16a:	comisd xmm1,QWORD PTR [rip+0x2f6c6]        # 6e838 <powers.8451+0x18>
   3f172:	lea    r8,[rip+0x2f2e1]        # 6e45a <urlchr_table+0x8ba>
   3f179:	jb     3f1c0 <print_decimal+0xa0>
   3f17b:	mov    ecx,0x20
   3f180:	mov    edx,0x1
   3f185:	mov    esi,0x20
   3f18a:	mov    eax,0x1
   3f18f:	lea    rdi,[rip+0x4ab4a]        # 89ce0 <buf.8607>
   3f196:	call   c9d0 <__snprintf_chk@plt>
   3f19b:	lea    rax,[rip+0x4ab3e]        # 89ce0 <buf.8607>
   3f1a2:	add    rsp,0x8
   3f1a6:	ret    
   3f1a7:	nop    WORD PTR [rax+rax*1+0x0]
   3f1b0:	lea    r8,[rip+0x2f299]        # 6e450 <urlchr_table+0x8b0>
   3f1b7:	jmp    3f17b <print_decimal+0x5b>
   3f1b9:	nop    DWORD PTR [rax+0x0]
   3f1c0:	mov    eax,0x30
   3f1c5:	mov    WORD PTR [rip+0x4ab14],ax        # 89ce0 <buf.8607>
   3f1cc:	lea    rax,[rip+0x4ab0d]        # 89ce0 <buf.8607>
   3f1d3:	add    rsp,0x8
   3f1d7:	ret    
   3f1d8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000003f1e0 <get_max_length>:
   3f1e0:	endbr64 
   3f1e4:	push   r13
   3f1e6:	push   r12
   3f1e8:	push   rbp
   3f1e9:	push   rbx
   3f1ea:	mov    ebx,edx
   3f1ec:	sub    rsp,0x18
   3f1f0:	test   rdi,rdi
   3f1f3:	je     3f2a0 <get_max_length+0xc0>
   3f1f9:	movsxd rsi,esi
   3f1fc:	add    rsi,rdi
   3f1ff:	call   3b8a0 <strdupdelim>
   3f204:	mov    rbp,rax
   3f207:	call   c740 <__errno_location@plt>
   3f20c:	lea    r13,[rip+0x2704d]        # 66260 <primes.6089+0x180>
   3f213:	mov    r12,rax
   3f216:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3f220:	mov    DWORD PTR [r12],0x0
   3f228:	mov    rdi,r13
   3f22b:	cmp    BYTE PTR [rbp+0x0],0x0
   3f22f:	mov    esi,ebx
   3f231:	cmovne rdi,rbp
   3f235:	call   cb00 <pathconf@plt>
   3f23a:	test   rax,rax
   3f23d:	jns    3f2d8 <get_max_length+0xf8>
   3f243:	cmp    DWORD PTR [r12],0x2
   3f248:	jne    3f2b8 <get_max_length+0xd8>
   3f24a:	cmp    BYTE PTR [rbp+0x0],0x0
   3f24e:	je     3f2b8 <get_max_length+0xd8>
   3f250:	cmp    BYTE PTR [rbp+0x0],0x2f
   3f254:	jne    3f25c <get_max_length+0x7c>
   3f256:	cmp    BYTE PTR [rbp+0x1],0x0
   3f25a:	je     3f2b8 <get_max_length+0xd8>
   3f25c:	mov    esi,0x2f
   3f261:	mov    rdi,rbp
   3f264:	call   c460 <strrchr@plt>
   3f269:	cmp    rbp,rax
   3f26c:	je     3f280 <get_max_length+0xa0>
   3f26e:	test   rax,rax
   3f271:	je     3f290 <get_max_length+0xb0>
   3f273:	mov    BYTE PTR [rax],0x0
   3f276:	jmp    3f220 <get_max_length+0x40>
   3f278:	nop    DWORD PTR [rax+rax*1+0x0]
   3f280:	mov    BYTE PTR [rbp+0x1],0x0
   3f284:	jmp    3f220 <get_max_length+0x40>
   3f286:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3f290:	mov    BYTE PTR [rbp+0x0],0x0
   3f294:	jmp    3f220 <get_max_length+0x40>
   3f296:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3f2a0:	lea    rdi,[rip+0x2f170]        # 6e417 <urlchr_table+0x877>
   3f2a7:	call   c760 <strdup@plt>
   3f2ac:	mov    rbp,rax
   3f2af:	jmp    3f207 <get_max_length+0x27>
   3f2b4:	nop    DWORD PTR [rax+0x0]
   3f2b8:	mov    rdi,rbp
   3f2bb:	call   4bdc0 <rpl_free>
   3f2c0:	mov    eax,DWORD PTR [r12]
   3f2c4:	test   eax,eax
   3f2c6:	jne    3f2f5 <get_max_length+0x115>
   3f2c8:	add    rsp,0x18
   3f2cc:	xor    eax,eax
   3f2ce:	pop    rbx
   3f2cf:	pop    rbp
   3f2d0:	pop    r12
   3f2d2:	pop    r13
   3f2d4:	ret    
   3f2d5:	nop    DWORD PTR [rax]
   3f2d8:	mov    rdi,rbp
   3f2db:	mov    QWORD PTR [rsp+0x8],rax
   3f2e0:	call   4bdc0 <rpl_free>
   3f2e5:	mov    rax,QWORD PTR [rsp+0x8]
   3f2ea:	add    rsp,0x18
   3f2ee:	pop    rbx
   3f2ef:	pop    rbp
   3f2f0:	pop    r12
   3f2f2:	pop    r13
   3f2f4:	ret    
   3f2f5:	lea    rdi,[rip+0x2f163]        # 6e45f <urlchr_table+0x8bf>
   3f2fc:	call   ca50 <perror@plt>
   3f301:	xor    eax,eax
   3f303:	jmp    3f2ea <get_max_length+0x10a>
   3f305:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000003f310 <wg_hex_to_string>:
   3f310:	endbr64 
   3f314:	push   r13
   3f316:	push   r12
   3f318:	push   rbp
   3f319:	push   rbx
   3f31a:	mov    rbx,rdi
   3f31d:	sub    rsp,0x8
   3f321:	test   rdx,rdx
   3f324:	je     3f363 <wg_hex_to_string+0x53>
   3f326:	mov    rbp,rsi
   3f329:	lea    r13,[rdi+rdx*2]
   3f32d:	lea    r12,[rip+0x2d9a7]        # 6ccdb <primes.6089+0x6bfb>
   3f334:	nop    DWORD PTR [rax+0x0]
   3f338:	movzx  r8d,BYTE PTR [rbp+0x0]
   3f33d:	mov    rdi,rbx
   3f340:	mov    rcx,r12
   3f343:	mov    esi,0x1
   3f348:	mov    rdx,0xffffffffffffffff
   3f34f:	xor    eax,eax
   3f351:	add    rbx,0x2
   3f355:	add    rbp,0x1
   3f359:	call   c950 <__sprintf_chk@plt>
   3f35e:	cmp    rbx,r13
   3f361:	jne    3f338 <wg_hex_to_string+0x28>
   3f363:	mov    BYTE PTR [rbx],0x0
   3f366:	add    rsp,0x8
   3f36a:	pop    rbx
   3f36b:	pop    rbp
   3f36c:	pop    r12
   3f36e:	pop    r13
   3f370:	ret    
   3f371:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3f37c:	nop    DWORD PTR [rax+0x0]

000000000003f380 <wg_pin_peer_pubkey>:
   3f380:	endbr64 
   3f384:	push   r15
   3f386:	push   r14
   3f388:	push   r13
   3f38a:	push   r12
   3f38c:	push   rbp
   3f38d:	push   rbx
   3f38e:	sub    rsp,0x28
   3f392:	test   rdi,rdi
   3f395:	je     3f740 <wg_pin_peer_pubkey+0x3c0>
   3f39b:	test   rsi,rsi
   3f39e:	mov    r15,rsi
   3f3a1:	mov    rbp,rdx
   3f3a4:	sete   r12b
   3f3a8:	test   rdx,rdx
   3f3ab:	sete   al
   3f3ae:	or     r12b,al
   3f3b1:	jne    3f430 <wg_pin_peer_pubkey+0xb0>
   3f3b3:	mov    r14,rdi
   3f3b6:	mov    ecx,0x8
   3f3bb:	lea    rdi,[rip+0x2f0a7]        # 6e469 <urlchr_table+0x8c9>
   3f3c2:	mov    rsi,r14
   3f3c5:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   3f3c7:	seta   al
   3f3ca:	sbb    al,0x0
   3f3cc:	test   al,al
   3f3ce:	je     3f438 <wg_pin_peer_pubkey+0xb8>
   3f3d0:	mov    rdi,r14
   3f3d3:	call   3c810 <wget_read_file>
   3f3d8:	mov    r13,rax
   3f3db:	test   rax,rax
   3f3de:	je     3f430 <wg_pin_peer_pubkey+0xb0>
   3f3e0:	mov    r14,QWORD PTR [rax+0x8]
   3f3e4:	cmp    r14,0x100000
   3f3eb:	seta   dl
   3f3ee:	cmp    r14,rbp
   3f3f1:	setb   al
   3f3f4:	xor    ebx,ebx
   3f3f6:	xor    r9d,r9d
   3f3f9:	or     dl,al
   3f3fb:	je     3f528 <wg_pin_peer_pubkey+0x1a8>
   3f401:	mov    rdi,r9
   3f404:	call   4bdc0 <rpl_free>
   3f409:	mov    rdi,rbx
   3f40c:	call   4bdc0 <rpl_free>
   3f411:	mov    rdi,r13
   3f414:	call   3ca20 <wget_read_file_free>
   3f419:	add    rsp,0x28
   3f41d:	mov    eax,r12d
   3f420:	pop    rbx
   3f421:	pop    rbp
   3f422:	pop    r12
   3f424:	pop    r13
   3f426:	pop    r14
   3f428:	pop    r15
   3f42a:	ret    
   3f42b:	nop    DWORD PTR [rax+rax*1+0x0]
   3f430:	xor    r12d,r12d
   3f433:	jmp    3f419 <wg_pin_peer_pubkey+0x99>
   3f435:	nop    DWORD PTR [rax]
   3f438:	mov    edi,0x20
   3f43d:	call   4b850 <xmalloc>
   3f442:	mov    rsi,rbp
   3f445:	mov    rdi,r15
   3f448:	mov    rdx,rax
   3f44b:	mov    r13,rax
   3f44e:	call   494f0 <sha256_buffer>
   3f453:	mov    edi,0x20
   3f458:	call   4b850 <xmalloc>
   3f45d:	mov    rdi,r14
   3f460:	mov    rbp,rax
   3f463:	call   c310 <strlen@plt>
   3f468:	lea    rbx,[rax+0x1]
   3f46c:	mov    rdi,rbx
   3f46f:	call   4b850 <xmalloc>
   3f474:	mov    rdx,rbx
   3f477:	mov    rsi,r14
   3f47a:	lea    r14,[rip+0x2efe7]        # 6e468 <urlchr_table+0x8c8>
   3f481:	mov    rdi,rax
   3f484:	mov    QWORD PTR [rsp+0x10],rax
   3f489:	mov    rbx,rax
   3f48c:	call   cb30 <memcpy@plt>
   3f491:	nop    DWORD PTR [rax+0x0]
   3f498:	mov    rsi,r14
   3f49b:	mov    rdi,rbx
   3f49e:	call   c550 <strstr@plt>
   3f4a3:	mov    r15,rax
   3f4a6:	test   rax,rax
   3f4a9:	je     3f4ae <wg_pin_peer_pubkey+0x12e>
   3f4ab:	mov    BYTE PTR [rax],0x0
   3f4ae:	add    rbx,0x8
   3f4b2:	mov    edx,0x20
   3f4b7:	mov    rsi,rbp
   3f4ba:	mov    rdi,rbx
   3f4bd:	call   3ed60 <wget_base64_decode>
   3f4c2:	cmp    rax,0x20
   3f4c6:	jne    3f6c0 <wg_pin_peer_pubkey+0x340>
   3f4cc:	mov    rax,QWORD PTR [r13+0x0]
   3f4d0:	mov    rdx,QWORD PTR [r13+0x8]
   3f4d4:	xor    rax,QWORD PTR [rbp+0x0]
   3f4d8:	xor    rdx,QWORD PTR [rbp+0x8]
   3f4dc:	or     rdx,rax
   3f4df:	jne    3f70f <wg_pin_peer_pubkey+0x38f>
   3f4e5:	mov    rax,QWORD PTR [r13+0x10]
   3f4e9:	mov    rdx,QWORD PTR [r13+0x18]
   3f4ed:	xor    rax,QWORD PTR [rbp+0x10]
   3f4f1:	xor    rdx,QWORD PTR [rbp+0x18]
   3f4f5:	or     rdx,rax
   3f4f8:	jne    3f70f <wg_pin_peer_pubkey+0x38f>
   3f4fe:	mov    r12d,0x1
   3f504:	mov    rdi,r13
   3f507:	call   4bdc0 <rpl_free>
   3f50c:	mov    rdi,rbp
   3f50f:	call   4bdc0 <rpl_free>
   3f514:	mov    rdi,QWORD PTR [rsp+0x10]
   3f519:	call   4bdc0 <rpl_free>
   3f51e:	jmp    3f419 <wg_pin_peer_pubkey+0x99>
   3f523:	nop    DWORD PTR [rax+rax*1+0x0]
   3f528:	cmp    r14,rbp
   3f52b:	je     3f768 <wg_pin_peer_pubkey+0x3e8>
   3f531:	lea    rdi,[r14+0x1]
   3f535:	call   4b850 <xmalloc>
   3f53a:	mov    rsi,QWORD PTR [r13+0x0]
   3f53e:	mov    rdx,r14
   3f541:	mov    rdi,rax
   3f544:	call   cb30 <memcpy@plt>
   3f549:	lea    rsi,[rip+0x2ef22]        # 6e472 <urlchr_table+0x8d2>
   3f550:	mov    BYTE PTR [rax+r14*1],0x0
   3f555:	mov    rdi,rax
   3f558:	mov    QWORD PTR [rsp+0x8],rax
   3f55d:	call   c550 <strstr@plt>
   3f562:	mov    r9,QWORD PTR [rsp+0x8]
   3f567:	test   rax,rax
   3f56a:	mov    rbx,rax
   3f56d:	je     3f401 <wg_pin_peer_pubkey+0x81>
   3f573:	mov    r14,rax
   3f576:	sub    r14,r9
   3f579:	jne    3f750 <wg_pin_peer_pubkey+0x3d0>
   3f57f:	lea    rbx,[r14+0x1a]
   3f583:	lea    rsi,[rip+0x2ef03]        # 6e48d <urlchr_table+0x8ed>
   3f58a:	mov    QWORD PTR [rsp+0x8],r9
   3f58f:	xor    r12d,r12d
   3f592:	lea    r14,[r9+rbx*1]
   3f596:	mov    QWORD PTR [rsp+0x10],rbx
   3f59b:	mov    rdi,r14
   3f59e:	call   c550 <strstr@plt>
   3f5a3:	mov    r9,QWORD PTR [rsp+0x8]
   3f5a8:	test   rax,rax
   3f5ab:	mov    rbx,rax
   3f5ae:	je     3f401 <wg_pin_peer_pubkey+0x81>
   3f5b4:	mov    r8,rax
   3f5b7:	mov    rbx,QWORD PTR [rsp+0x10]
   3f5bc:	mov    QWORD PTR [rsp+0x18],r9
   3f5c1:	sub    r8,r9
   3f5c4:	mov    rax,r8
   3f5c7:	mov    QWORD PTR [rsp+0x8],r8
   3f5cc:	sub    rax,rbx
   3f5cf:	lea    rdi,[rax+0x1]
   3f5d3:	call   4b850 <xmalloc>
   3f5d8:	mov    r8,QWORD PTR [rsp+0x8]
   3f5dd:	mov    r9,QWORD PTR [rsp+0x18]
   3f5e2:	mov    r12,rax
   3f5e5:	cmp    rbx,r8
   3f5e8:	jae    3f798 <wg_pin_peer_pubkey+0x418>
   3f5ee:	mov    rbx,r14
   3f5f1:	lea    rdi,[r9+r8*1]
   3f5f5:	xor    edx,edx
   3f5f7:	mov    rsi,rax
   3f5fa:	nop    WORD PTR [rax+rax*1+0x0]
   3f600:	movzx  eax,BYTE PTR [rbx]
   3f603:	mov    rcx,rsi
   3f606:	cmp    al,0xa
   3f608:	je     3f61b <wg_pin_peer_pubkey+0x29b>
   3f60a:	cmp    al,0xd
   3f60c:	je     3f61b <wg_pin_peer_pubkey+0x29b>
   3f60e:	add    rdx,0x1
   3f612:	mov    BYTE PTR [rsi],al
   3f614:	lea    rsi,[r12+rdx*1]
   3f618:	mov    rcx,rsi
   3f61b:	add    rbx,0x1
   3f61f:	cmp    rdi,rbx
   3f622:	jne    3f600 <wg_pin_peer_pubkey+0x280>
   3f624:	movabs rsi,0xaaaaaaaaaaaaaaab
   3f62e:	add    rdx,0x2
   3f632:	mov    rax,rdx
   3f635:	mul    rsi
   3f638:	shr    rdx,1
   3f63b:	lea    r14,[rdx*4+0x0]
   3f643:	mov    BYTE PTR [rcx],0x0
   3f646:	mov    rdi,r14
   3f649:	mov    QWORD PTR [rsp+0x8],r9
   3f64e:	call   4b850 <xmalloc>
   3f653:	mov    rdx,r14
   3f656:	mov    rdi,r12
   3f659:	mov    rsi,rax
   3f65c:	mov    rbx,rax
   3f65f:	call   3ed60 <wget_base64_decode>
   3f664:	mov    r9,QWORD PTR [rsp+0x8]
   3f669:	test   rax,rax
   3f66c:	mov    r14,rax
   3f66f:	js     3f779 <wg_pin_peer_pubkey+0x3f9>
   3f675:	mov    rdi,r12
   3f678:	mov    QWORD PTR [rsp+0x8],r9
   3f67d:	call   4bdc0 <rpl_free>
   3f682:	test   r14,r14
   3f685:	mov    r9,QWORD PTR [rsp+0x8]
   3f68a:	setne  r12b
   3f68e:	cmp    rbp,r14
   3f691:	sete   al
   3f694:	and    r12b,al
   3f697:	je     3f401 <wg_pin_peer_pubkey+0x81>
   3f69d:	mov    rdx,rbp
   3f6a0:	mov    rsi,rbx
   3f6a3:	mov    rdi,r15
   3f6a6:	call   c870 <memcmp@plt>
   3f6ab:	mov    r9,QWORD PTR [rsp+0x8]
   3f6b0:	test   eax,eax
   3f6b2:	sete   r12b
   3f6b6:	jmp    3f401 <wg_pin_peer_pubkey+0x81>
   3f6bb:	nop    DWORD PTR [rax+rax*1+0x0]
   3f6c0:	mov    rdi,rbx
   3f6c3:	call   4b5b0 <quote>
   3f6c8:	mov    rdi,rbx
   3f6cb:	mov    QWORD PTR [rsp+0x8],rax
   3f6d0:	call   c310 <strlen@plt>
   3f6d5:	xor    edi,edi
   3f6d7:	mov    edx,0x5
   3f6dc:	lea    rsi,[rip+0x2f035]        # 6e718 <urlchr_table+0xb78>
   3f6e3:	mov    rbx,rax
   3f6e6:	call   c780 <dcgettext@plt>
   3f6eb:	mov    r8,QWORD PTR [rsp+0x8]
   3f6f0:	mov    ecx,0x20
   3f6f5:	mov    rsi,rax
   3f6f8:	lea    eax,[rbx+rbx*2]
   3f6fb:	test   eax,eax
   3f6fd:	lea    edx,[rax+0x3]
   3f700:	cmovns edx,eax
   3f703:	xor    edi,edi
   3f705:	xor    eax,eax
   3f707:	sar    edx,0x2
   3f70a:	call   2e0a0 <logprintf>
   3f70f:	test   r15,r15
   3f712:	je     3f504 <wg_pin_peer_pubkey+0x184>
   3f718:	mov    BYTE PTR [r15],0x3b
   3f71c:	lea    rsi,[rip+0x2ed46]        # 6e469 <urlchr_table+0x8c9>
   3f723:	mov    rdi,r15
   3f726:	call   c550 <strstr@plt>
   3f72b:	mov    rbx,rax
   3f72e:	test   rax,rax
   3f731:	jne    3f498 <wg_pin_peer_pubkey+0x118>
   3f737:	jmp    3f504 <wg_pin_peer_pubkey+0x184>
   3f73c:	nop    DWORD PTR [rax+0x0]
   3f740:	mov    r12d,0x1
   3f746:	jmp    3f419 <wg_pin_peer_pubkey+0x99>
   3f74b:	nop    DWORD PTR [rax+rax*1+0x0]
   3f750:	cmp    BYTE PTR [rax-0x1],0xa
   3f754:	je     3f57f <wg_pin_peer_pubkey+0x1ff>
   3f75a:	xor    ebx,ebx
   3f75c:	jmp    3f401 <wg_pin_peer_pubkey+0x81>
   3f761:	nop    DWORD PTR [rax+0x0]
   3f768:	mov    QWORD PTR [rsp+0x8],r9
   3f76d:	mov    rsi,QWORD PTR [r13+0x0]
   3f771:	mov    rdx,r14
   3f774:	jmp    3f6a3 <wg_pin_peer_pubkey+0x323>
   3f779:	mov    rdi,rbx
   3f77c:	xor    ebx,ebx
   3f77e:	call   4bdc0 <rpl_free>
   3f783:	mov    rdi,r12
   3f786:	xor    r12d,r12d
   3f789:	call   4bdc0 <rpl_free>
   3f78e:	mov    r9,QWORD PTR [rsp+0x8]
   3f793:	jmp    3f401 <wg_pin_peer_pubkey+0x81>
   3f798:	mov    rcx,rax
   3f79b:	xor    r14d,r14d
   3f79e:	jmp    3f643 <wg_pin_peer_pubkey+0x2c3>
   3f7a3:	nop    WORD PTR cs:[rax+rax*1+0x0]
   3f7ad:	nop    DWORD PTR [rax]

000000000003f7b0 <inform_exit_status>:
   3f7b0:	endbr64 
   3f7b4:	cmp    edi,0x32
   3f7b7:	ja     3f7e0 <inform_exit_status+0x30>
   3f7b9:	mov    edi,edi
   3f7bb:	lea    rax,[rip+0x2f07e]        # 6e840 <CSWTCH.5>
   3f7c2:	movsx  eax,BYTE PTR [rax+rdi*1]
   3f7c6:	test   eax,eax
   3f7c8:	je     3f7de <inform_exit_status+0x2e>
   3f7ca:	mov    edx,DWORD PTR [rip+0x4a6dc]        # 89eac <final_exit_status>
   3f7d0:	test   edx,edx
   3f7d2:	je     3f7d8 <inform_exit_status+0x28>
   3f7d4:	cmp    edx,eax
   3f7d6:	jle    3f7de <inform_exit_status+0x2e>
   3f7d8:	mov    DWORD PTR [rip+0x4a6ce],eax        # 89eac <final_exit_status>
   3f7de:	ret    
   3f7df:	nop
   3f7e0:	mov    edx,DWORD PTR [rip+0x4a6c6]        # 89eac <final_exit_status>
   3f7e6:	mov    eax,0x9
   3f7eb:	test   edx,edx
   3f7ed:	jne    3f7d4 <inform_exit_status+0x24>
   3f7ef:	jmp    3f7d8 <inform_exit_status+0x28>
   3f7f1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3f7fc:	nop    DWORD PTR [rax+0x0]

000000000003f800 <get_exit_status>:
   3f800:	endbr64 
   3f804:	mov    eax,DWORD PTR [rip+0x4a6a2]        # 89eac <final_exit_status>
   3f80a:	mov    edx,0x1
   3f80f:	cmp    eax,0x9
   3f812:	cmove  eax,edx
   3f815:	ret    
   3f816:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000003f820 <do_conversion.constprop.0>:
   3f820:	push   r15
   3f822:	push   r14
   3f824:	push   r13
   3f826:	push   r12
   3f828:	push   rbp
   3f829:	push   rbx
   3f82a:	mov    rbx,rcx
   3f82d:	sub    rsp,0x68
   3f831:	mov    QWORD PTR [rsp+0x30],rdi
   3f836:	mov    QWORD PTR [rsp+0x20],rsi
   3f83b:	mov    rsi,rdi
   3f83e:	lea    rdi,[rip+0x2dfcf]        # 6d814 <eta_str.8886+0xa9c>
   3f845:	mov    QWORD PTR [rsp+0x38],rdx
   3f84a:	mov    rax,QWORD PTR fs:0x28
   3f853:	mov    QWORD PTR [rsp+0x58],rax
   3f858:	xor    eax,eax
   3f85a:	call   c270 <iconv_open@plt>
   3f85f:	cmp    rax,0xffffffffffffffff
   3f863:	je     3fae0 <do_conversion.constprop.0+0x2c0>
   3f869:	mov    rsi,QWORD PTR [rsp+0x38]
   3f86e:	mov    rdi,QWORD PTR [rsp+0x20]
   3f873:	mov    r13,rax
   3f876:	lea    r14,[rsp+0x48]
   3f87b:	lea    r15,[rsp+0x38]
   3f880:	call   4bb00 <xstrndup>
   3f885:	mov    rdi,rax
   3f888:	mov    QWORD PTR [rsp+0x28],rax
   3f88d:	mov    QWORD PTR [rsp+0x50],rax
   3f892:	call   37100 <url_unescape_except_reserved>
   3f897:	mov    rdi,QWORD PTR [rsp+0x50]
   3f89c:	call   c310 <strlen@plt>
   3f8a1:	lea    r12,[rax+rax*1]
   3f8a5:	mov    QWORD PTR [rsp+0x38],rax
   3f8aa:	lea    rdi,[r12+0x1]
   3f8af:	mov    QWORD PTR [rsp+0x48],r12
   3f8b4:	call   4b850 <xmalloc>
   3f8b9:	mov    DWORD PTR [rsp+0xc],0x0
   3f8c1:	mov    QWORD PTR [rbx],rax
   3f8c4:	mov    rbp,rax
   3f8c7:	lea    rax,[rsp+0x50]
   3f8cc:	mov    QWORD PTR [rsp+0x18],0x0
   3f8d5:	mov    QWORD PTR [rsp],rax
   3f8d9:	nop    DWORD PTR [rax+0x0]
   3f8e0:	mov    rsi,QWORD PTR [rsp]
   3f8e4:	mov    r8,r14
   3f8e7:	mov    rcx,rbx
   3f8ea:	mov    rdx,r15
   3f8ed:	mov    rdi,r13
   3f8f0:	call   c4d0 <iconv@plt>
   3f8f5:	cmp    rax,0xffffffffffffffff
   3f8f9:	je     3f917 <do_conversion.constprop.0+0xf7>
   3f8fb:	xor    edx,edx
   3f8fd:	xor    esi,esi
   3f8ff:	mov    r8,r14
   3f902:	mov    rcx,rbx
   3f905:	mov    rdi,r13
   3f908:	call   c4d0 <iconv@plt>
   3f90d:	cmp    rax,0xffffffffffffffff
   3f911:	jne    3f9f8 <do_conversion.constprop.0+0x1d8>
   3f917:	call   c740 <__errno_location@plt>
   3f91c:	mov    r8d,DWORD PTR [rax]
   3f91f:	cmp    r8d,0x16
   3f923:	sete   dl
   3f926:	cmp    r8d,0x54
   3f92a:	sete   al
   3f92d:	or     dl,al
   3f92f:	je     3f970 <do_conversion.constprop.0+0x150>
   3f931:	mov    eax,DWORD PTR [rsp+0xc]
   3f935:	test   eax,eax
   3f937:	je     3f9d0 <do_conversion.constprop.0+0x1b0>
   3f93d:	mov    rdx,QWORD PTR [rsp+0x50]
   3f942:	mov    rax,QWORD PTR [rbx]
   3f945:	add    DWORD PTR [rsp+0xc],0x1
   3f94a:	movzx  edx,BYTE PTR [rdx]
   3f94d:	mov    BYTE PTR [rax],dl
   3f94f:	add    QWORD PTR [rsp+0x50],0x1
   3f955:	sub    QWORD PTR [rsp+0x38],0x1
   3f95b:	add    QWORD PTR [rbx],0x1
   3f95f:	sub    QWORD PTR [rsp+0x48],0x1
   3f965:	jmp    3f8e0 <do_conversion.constprop.0+0xc0>
   3f96a:	nop    WORD PTR [rax+rax*1+0x0]
   3f970:	cmp    r8d,0x7
   3f974:	jne    3fa60 <do_conversion.constprop.0+0x240>
   3f97a:	mov    rax,QWORD PTR [rsp+0x38]
   3f97f:	mov    rdi,rbp
   3f982:	lea    rdx,[r12+rax*2]
   3f986:	lea    rsi,[rdx+0x1]
   3f98a:	mov    QWORD PTR [rsp+0x10],rdx
   3f98f:	call   4b870 <xrealloc>
   3f994:	mov    rcx,QWORD PTR [rsp+0x48]
   3f999:	mov    rdx,QWORD PTR [rsp+0x10]
   3f99e:	mov    QWORD PTR [rsp+0x18],r12
   3f9a3:	mov    rbp,rax
   3f9a6:	mov    rax,r12
   3f9a9:	sub    rax,rcx
   3f9ac:	mov    r12,rdx
   3f9af:	add    rax,rbp
   3f9b2:	mov    QWORD PTR [rbx],rax
   3f9b5:	mov    rax,QWORD PTR [rsp+0x38]
   3f9ba:	lea    rax,[rcx+rax*2]
   3f9be:	mov    QWORD PTR [rsp+0x48],rax
   3f9c3:	jmp    3f8e0 <do_conversion.constprop.0+0xc0>
   3f9c8:	nop    DWORD PTR [rax+rax*1+0x0]
   3f9d0:	xor    edi,edi
   3f9d2:	mov    edx,0x5
   3f9d7:	lea    rsi,[rip+0x2dfca]        # 6d9a8 <eta_str.8886+0xc30>
   3f9de:	call   c780 <dcgettext@plt>
   3f9e3:	xor    edi,edi
   3f9e5:	mov    rsi,rax
   3f9e8:	xor    eax,eax
   3f9ea:	call   2e0a0 <logprintf>
   3f9ef:	jmp    3f93d <do_conversion.constprop.0+0x11d>
   3f9f4:	nop    DWORD PTR [rax+0x0]
   3f9f8:	sub    r12,QWORD PTR [rsp+0x48]
   3f9fd:	sub    r12,QWORD PTR [rsp+0x18]
   3fa02:	mov    QWORD PTR [rbx],rbp
   3fa05:	mov    BYTE PTR [rbp+r12*1+0x0],0x0
   3fa0b:	mov    rdi,QWORD PTR [rsp+0x28]
   3fa10:	call   4bdc0 <rpl_free>
   3fa15:	mov    rdi,r13
   3fa18:	call   cba0 <iconv_close@plt>
   3fa1d:	movzx  r12d,BYTE PTR [rip+0x4a896]        # 8a2bb <opt+0x23b>
   3fa25:	test   r12b,r12b
   3fa28:	jne    3fb30 <do_conversion.constprop.0+0x310>
   3fa2e:	mov    r12d,0x1
   3fa34:	mov    rax,QWORD PTR [rsp+0x58]
   3fa39:	xor    rax,QWORD PTR fs:0x28
   3fa42:	jne    3fbd2 <do_conversion.constprop.0+0x3b2>
   3fa48:	add    rsp,0x68
   3fa4c:	mov    eax,r12d
   3fa4f:	pop    rbx
   3fa50:	pop    rbp
   3fa51:	pop    r12
   3fa53:	pop    r13
   3fa55:	pop    r14
   3fa57:	pop    r15
   3fa59:	ret    
   3fa5a:	nop    WORD PTR [rax+rax*1+0x0]
   3fa60:	mov    edx,0x5
   3fa65:	lea    rsi,[rip+0x2ddae]        # 6d81a <eta_str.8886+0xaa2>
   3fa6c:	xor    edi,edi
   3fa6e:	mov    DWORD PTR [rsp],r8d
   3fa72:	call   c780 <dcgettext@plt>
   3fa77:	mov    r8d,DWORD PTR [rsp]
   3fa7b:	xor    edi,edi
   3fa7d:	mov    rsi,rax
   3fa80:	xor    eax,eax
   3fa82:	mov    edx,r8d
   3fa85:	call   2e0a0 <logprintf>
   3fa8a:	mov    rdi,QWORD PTR [rsp+0x28]
   3fa8f:	call   4bdc0 <rpl_free>
   3fa94:	mov    rdi,r13
   3fa97:	call   cba0 <iconv_close@plt>
   3fa9c:	movzx  r12d,BYTE PTR [rip+0x4a817]        # 8a2bb <opt+0x23b>
   3faa4:	test   r12b,r12b
   3faa7:	je     3fa34 <do_conversion.constprop.0+0x214>
   3faa9:	mov    rdi,QWORD PTR [rsp+0x20]
   3faae:	mov    esi,0x40
   3fab3:	call   c6c0 <strchr@plt>
   3fab8:	test   rax,rax
   3fabb:	je     3fb91 <do_conversion.constprop.0+0x371>
   3fac1:	lea    rdi,[rip+0x2eeb0]        # 6e978 <CSWTCH.5+0x138>
   3fac8:	xor    eax,eax
   3faca:	xor    r12d,r12d
   3facd:	call   2e250 <debug_logprintf>
   3fad2:	jmp    3fa34 <do_conversion.constprop.0+0x214>
   3fad7:	nop    WORD PTR [rax+rax*1+0x0]
   3fae0:	lea    rdi,[rip+0x2dd2d]        # 6d814 <eta_str.8886+0xa9c>
   3fae7:	call   4b5b0 <quote>
   3faec:	mov    rdi,QWORD PTR [rsp+0x30]
   3faf1:	mov    r13,rax
   3faf4:	call   4b5b0 <quote>
   3faf9:	mov    edx,0x5
   3fafe:	lea    rsi,[rip+0x2de43]        # 6d948 <eta_str.8886+0xbd0>
   3fb05:	xor    edi,edi
   3fb07:	mov    r12,rax
   3fb0a:	call   c780 <dcgettext@plt>
   3fb0f:	mov    rdx,r12
   3fb12:	mov    rcx,r13
   3fb15:	xor    edi,edi
   3fb17:	mov    rsi,rax
   3fb1a:	xor    eax,eax
   3fb1c:	xor    r12d,r12d
   3fb1f:	call   2e0a0 <logprintf>
   3fb24:	mov    QWORD PTR [rbx],0x0
   3fb2b:	jmp    3fa34 <do_conversion.constprop.0+0x214>
   3fb30:	mov    rdi,QWORD PTR [rsp+0x20]
   3fb35:	mov    esi,0x40
   3fb3a:	call   c6c0 <strchr@plt>
   3fb3f:	test   rax,rax
   3fb42:	je     3fb57 <do_conversion.constprop.0+0x337>
   3fb44:	lea    rdi,[rip+0x2ee2d]        # 6e978 <CSWTCH.5+0x138>
   3fb4b:	xor    eax,eax
   3fb4d:	call   2e250 <debug_logprintf>
   3fb52:	jmp    3fa34 <do_conversion.constprop.0+0x214>
   3fb57:	mov    r13,QWORD PTR [rbx]
   3fb5a:	mov    esi,0x40
   3fb5f:	mov    rdi,r13
   3fb62:	call   c6c0 <strchr@plt>
   3fb67:	test   rax,rax
   3fb6a:	jne    3fb44 <do_conversion.constprop.0+0x324>
   3fb6c:	mov    rdx,QWORD PTR [rsp+0x30]
   3fb71:	mov    rsi,QWORD PTR [rsp+0x20]
   3fb76:	mov    rcx,r13
   3fb79:	lea    r8,[rip+0x2dc94]        # 6d814 <eta_str.8886+0xa9c>
   3fb80:	lea    rdi,[rip+0x2edc9]        # 6e950 <CSWTCH.5+0x110>
   3fb87:	call   2e250 <debug_logprintf>
   3fb8c:	jmp    3fa34 <do_conversion.constprop.0+0x214>
   3fb91:	mov    r12,QWORD PTR [rbx]
   3fb94:	mov    esi,0x40
   3fb99:	mov    rdi,r12
   3fb9c:	call   c6c0 <strchr@plt>
   3fba1:	test   rax,rax
   3fba4:	jne    3fac1 <do_conversion.constprop.0+0x2a1>
   3fbaa:	mov    rdx,QWORD PTR [rsp+0x30]
   3fbaf:	mov    rsi,QWORD PTR [rsp+0x20]
   3fbb4:	mov    rcx,r12
   3fbb7:	lea    r8,[rip+0x2dc56]        # 6d814 <eta_str.8886+0xa9c>
   3fbbe:	lea    rdi,[rip+0x2ed8b]        # 6e950 <CSWTCH.5+0x110>
   3fbc5:	xor    r12d,r12d
   3fbc8:	call   2e250 <debug_logprintf>
   3fbcd:	jmp    3fa34 <do_conversion.constprop.0+0x214>
   3fbd2:	call   c7b0 <__stack_chk_fail@plt>
   3fbd7:	nop    WORD PTR [rax+rax*1+0x0]

000000000003fbe0 <find_locale>:
   3fbe0:	endbr64 
   3fbe4:	sub    rsp,0x8
   3fbe8:	mov    edi,0xe
   3fbed:	call   bfc0 <nl_langinfo@plt>
   3fbf2:	test   rax,rax
   3fbf5:	je     3fbff <find_locale+0x1f>
   3fbf7:	cmp    BYTE PTR [rax],0x0
   3fbfa:	mov    rdi,rax
   3fbfd:	jne    3fc10 <find_locale+0x30>
   3fbff:	lea    rdi,[rip+0x2eccd]        # 6e8d3 <CSWTCH.5+0x93>
   3fc06:	add    rsp,0x8
   3fc0a:	jmp    4ba50 <xstrdup>
   3fc0f:	nop
   3fc10:	add    rsp,0x8
   3fc14:	jmp    4ba50 <xstrdup>
   3fc19:	nop    DWORD PTR [rax+0x0]

000000000003fc20 <check_encoding_name>:
   3fc20:	endbr64 
   3fc24:	movzx  eax,BYTE PTR [rdi]
   3fc27:	test   al,al
   3fc29:	je     3fc4a <check_encoding_name+0x2a>
   3fc2b:	mov    rcx,rdi
   3fc2e:	movsx  edx,al
   3fc31:	cmp    edx,0x7f
   3fc34:	ja     3fc54 <check_encoding_name+0x34>
   3fc36:	cmp    al,0xd
   3fc38:	jg     3fc50 <check_encoding_name+0x30>
   3fc3a:	cmp    al,0x8
   3fc3c:	jg     3fc54 <check_encoding_name+0x34>
   3fc3e:	movzx  eax,BYTE PTR [rcx+0x1]
   3fc42:	add    rcx,0x1
   3fc46:	test   al,al
   3fc48:	jne    3fc2e <check_encoding_name+0xe>
   3fc4a:	mov    eax,0x1
   3fc4f:	ret    
   3fc50:	cmp    al,0x20
   3fc52:	jne    3fc3e <check_encoding_name+0x1e>
   3fc54:	push   r12
   3fc56:	call   4b5b0 <quote>
   3fc5b:	mov    edx,0x5
   3fc60:	lea    rsi,[rip+0x2ec72]        # 6e8d9 <CSWTCH.5+0x99>
   3fc67:	xor    edi,edi
   3fc69:	mov    r12,rax
   3fc6c:	call   c780 <dcgettext@plt>
   3fc71:	mov    rdx,r12
   3fc74:	xor    edi,edi
   3fc76:	mov    rsi,rax
   3fc79:	xor    eax,eax
   3fc7b:	call   2e0a0 <logprintf>
   3fc80:	xor    eax,eax
   3fc82:	pop    r12
   3fc84:	ret    
   3fc85:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000003fc90 <parse_charset>:
   3fc90:	endbr64 
   3fc94:	push   r12
   3fc96:	test   rdi,rdi
   3fc99:	je     3fd08 <parse_charset+0x78>
   3fc9b:	cmp    BYTE PTR [rdi],0x0
   3fc9e:	je     3fd08 <parse_charset+0x78>
   3fca0:	lea    rsi,[rip+0x2ec4b]        # 6e8f2 <CSWTCH.5+0xb2>
   3fca7:	call   439e0 <c_strcasestr>
   3fcac:	test   rax,rax
   3fcaf:	je     3fd08 <parse_charset+0x78>
   3fcb1:	lea    rdi,[rax+0x8]
   3fcb5:	movzx  eax,BYTE PTR [rax+0x8]
   3fcb9:	mov    rsi,rdi
   3fcbc:	test   al,al
   3fcbe:	je     3fcd8 <parse_charset+0x48>
   3fcc0:	cmp    al,0xd
   3fcc2:	jg     3fcf8 <parse_charset+0x68>
   3fcc4:	cmp    al,0x8
   3fcc6:	jg     3fcd8 <parse_charset+0x48>
   3fcc8:	movzx  eax,BYTE PTR [rsi+0x1]
   3fccc:	add    rsi,0x1
   3fcd0:	test   al,al
   3fcd2:	jne    3fcc0 <parse_charset+0x30>
   3fcd4:	nop    DWORD PTR [rax+0x0]
   3fcd8:	call   3b8a0 <strdupdelim>
   3fcdd:	mov    rdi,rax
   3fce0:	mov    r12,rax
   3fce3:	call   3fc20 <check_encoding_name>
   3fce8:	test   al,al
   3fcea:	je     3fd00 <parse_charset+0x70>
   3fcec:	mov    rax,r12
   3fcef:	pop    r12
   3fcf1:	ret    
   3fcf2:	nop    WORD PTR [rax+rax*1+0x0]
   3fcf8:	cmp    al,0x20
   3fcfa:	je     3fcd8 <parse_charset+0x48>
   3fcfc:	jmp    3fcc8 <parse_charset+0x38>
   3fcfe:	xchg   ax,ax
   3fd00:	mov    rdi,r12
   3fd03:	call   4bdc0 <rpl_free>
   3fd08:	xor    r12d,r12d
   3fd0b:	mov    rax,r12
   3fd0e:	pop    r12
   3fd10:	ret    
   3fd11:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   3fd1c:	nop    DWORD PTR [rax+0x0]

000000000003fd20 <locale_to_utf8>:
   3fd20:	endbr64 
   3fd24:	push   rbp
   3fd25:	push   rbx
   3fd26:	mov    rbx,rdi
   3fd29:	sub    rsp,0x18
   3fd2d:	mov    rbp,QWORD PTR [rip+0x4a69c]        # 8a3d0 <opt+0x350>
   3fd34:	mov    rax,QWORD PTR fs:0x28
   3fd3d:	mov    QWORD PTR [rsp+0x8],rax
   3fd42:	xor    eax,eax
   3fd44:	test   rbp,rbp
   3fd47:	je     3fdb8 <locale_to_utf8+0x98>
   3fd49:	lea    rsi,[rip+0x2ebab]        # 6e8fb <CSWTCH.5+0xbb>
   3fd50:	mov    rdi,rbp
   3fd53:	call   43340 <c_strcasecmp>
   3fd58:	test   eax,eax
   3fd5a:	jne    3fd80 <locale_to_utf8+0x60>
   3fd5c:	mov    rax,rbx
   3fd5f:	mov    rcx,QWORD PTR [rsp+0x8]
   3fd64:	xor    rcx,QWORD PTR fs:0x28
   3fd6d:	jne    3fdf4 <locale_to_utf8+0xd4>
   3fd73:	add    rsp,0x18
   3fd77:	pop    rbx
   3fd78:	pop    rbp
   3fd79:	ret    
   3fd7a:	nop    WORD PTR [rax+rax*1+0x0]
   3fd80:	mov    rdi,rbx
   3fd83:	call   c310 <strlen@plt>
   3fd88:	mov    rcx,rsp
   3fd8b:	mov    rsi,rbx
   3fd8e:	mov    rdi,rbp
   3fd91:	mov    rdx,rax
   3fd94:	call   3f820 <do_conversion.constprop.0>
   3fd99:	test   al,al
   3fd9b:	je     3fda8 <locale_to_utf8+0x88>
   3fd9d:	mov    rax,QWORD PTR [rsp]
   3fda1:	jmp    3fd5f <locale_to_utf8+0x3f>
   3fda3:	nop    DWORD PTR [rax+rax*1+0x0]
   3fda8:	mov    rdi,QWORD PTR [rsp]
   3fdac:	call   4bdc0 <rpl_free>
   3fdb1:	jmp    3fd5c <locale_to_utf8+0x3c>
   3fdb3:	nop    DWORD PTR [rax+rax*1+0x0]
   3fdb8:	mov    edx,0x5
   3fdbd:	lea    rsi,[rip+0x2ebec]        # 6e9b0 <CSWTCH.5+0x170>
   3fdc4:	xor    edi,edi
   3fdc6:	call   c780 <dcgettext@plt>
   3fdcb:	xor    edi,edi
   3fdcd:	mov    rsi,rax
   3fdd0:	xor    eax,eax
   3fdd2:	call   2e0a0 <logprintf>
   3fdd7:	call   3fbe0 <find_locale>
   3fddc:	mov    QWORD PTR [rip+0x4a5ed],rax        # 8a3d0 <opt+0x350>
   3fde3:	mov    rbp,rax
   3fde6:	test   rax,rax
   3fde9:	je     3fd5c <locale_to_utf8+0x3c>
   3fdef:	jmp    3fd49 <locale_to_utf8+0x29>
   3fdf4:	call   c7b0 <__stack_chk_fail@plt>
   3fdf9:	nop    DWORD PTR [rax+0x0]

000000000003fe00 <idn_decode>:
   3fe00:	endbr64 
   3fe04:	jmp    4ba50 <xstrdup>
   3fe09:	nop    DWORD PTR [rax+0x0]

000000000003fe10 <remote_to_utf8>:
   3fe10:	endbr64 
   3fe14:	push   r13
   3fe16:	push   r12
   3fe18:	push   rbp
   3fe19:	push   rbx
   3fe1a:	sub    rsp,0x8
   3fe1e:	mov    r12,QWORD PTR [rdi]
   3fe21:	test   r12,r12
   3fe24:	je     3fe80 <remote_to_utf8+0x70>
   3fe26:	mov    rbp,rsi
   3fe29:	mov    rdi,r12
   3fe2c:	lea    rsi,[rip+0x2d9e1]        # 6d814 <eta_str.8886+0xa9c>
   3fe33:	mov    rbx,rdx
   3fe36:	call   43340 <c_strcasecmp>
   3fe3b:	test   eax,eax
   3fe3d:	jne    3fe98 <remote_to_utf8+0x88>
   3fe3f:	movzx  eax,BYTE PTR [rbp+0x0]
   3fe43:	test   al,al
   3fe45:	je     3fe80 <remote_to_utf8+0x70>
   3fe47:	mov    rdx,rbp
   3fe4a:	jmp    3fe5c <remote_to_utf8+0x4c>
   3fe4c:	nop    DWORD PTR [rax+0x0]
   3fe50:	movzx  eax,BYTE PTR [rdx+0x1]
   3fe54:	add    rdx,0x1
   3fe58:	test   al,al
   3fe5a:	je     3fe80 <remote_to_utf8+0x70>
   3fe5c:	test   al,al
   3fe5e:	jns    3fe50 <remote_to_utf8+0x40>
   3fe60:	mov    rdi,rbp
   3fe63:	mov    r12d,0x1
   3fe69:	call   c760 <strdup@plt>
   3fe6e:	mov    QWORD PTR [rbx],rax
   3fe71:	add    rsp,0x8
   3fe75:	mov    eax,r12d
   3fe78:	pop    rbx
   3fe79:	pop    rbp
   3fe7a:	pop    r12
   3fe7c:	pop    r13
   3fe7e:	ret    
   3fe7f:	nop
   3fe80:	add    rsp,0x8
   3fe84:	xor    r12d,r12d
   3fe87:	pop    rbx
   3fe88:	mov    eax,r12d
   3fe8b:	pop    rbp
   3fe8c:	pop    r12
   3fe8e:	pop    r13
   3fe90:	ret    
   3fe91:	nop    DWORD PTR [rax+0x0]
   3fe98:	mov    rdi,rbp
   3fe9b:	call   c310 <strlen@plt>
   3fea0:	mov    rdi,r12
   3fea3:	mov    rcx,rbx
   3fea6:	mov    rsi,rbp
   3fea9:	mov    rdx,rax
   3feac:	call   3f820 <do_conversion.constprop.0>
   3feb1:	mov    r13,QWORD PTR [rbx]
   3feb4:	mov    r12d,eax
   3feb7:	test   r13,r13
   3feba:	je     3fe71 <remote_to_utf8+0x61>
   3febc:	mov    rsi,r13
   3febf:	mov    rdi,rbp
   3fec2:	call   be40 <strcmp@plt>
   3fec7:	test   eax,eax
   3fec9:	jne    3fe71 <remote_to_utf8+0x61>
   3fecb:	mov    rdi,r13
   3fece:	xor    r12d,r12d
   3fed1:	call   4bdc0 <rpl_free>
   3fed6:	mov    QWORD PTR [rbx],0x0
   3fedd:	jmp    3fe71 <remote_to_utf8+0x61>
   3fedf:	nop

000000000003fee0 <idn_encode>:
   3fee0:	endbr64 
   3fee4:	push   r13
   3fee6:	push   r12
   3fee8:	push   rbp
   3fee9:	mov    rbp,rsi
   3feec:	sub    rsp,0x30
   3fef0:	mov    rax,QWORD PTR fs:0x28
   3fef9:	mov    QWORD PTR [rsp+0x28],rax
   3fefe:	xor    eax,eax
   3ff00:	cmp    BYTE PTR [rdi+0x18],0x0
   3ff04:	mov    QWORD PTR [rsp+0x20],0x0
   3ff0d:	jne    3ff26 <idn_encode+0x46>
   3ff0f:	lea    rdx,[rsp+0x20]
   3ff14:	call   3fe10 <remote_to_utf8>
   3ff19:	test   al,al
   3ff1b:	je     3fff8 <idn_encode+0x118>
   3ff21:	mov    rbp,QWORD PTR [rsp+0x20]
   3ff26:	lea    r12,[rsp+0x18]
   3ff2b:	mov    edx,0x8
   3ff30:	mov    rdi,rbp
   3ff33:	mov    rsi,r12
   3ff36:	call   c9f0 <idn2_lookup_u8@plt>
   3ff3b:	test   eax,eax
   3ff3d:	jne    3ff98 <idn_encode+0xb8>
   3ff3f:	mov    rdi,QWORD PTR [rsp+0x20]
   3ff44:	call   4bdc0 <rpl_free>
   3ff49:	mov    rax,QWORD PTR [rsp+0x18]
   3ff4e:	mov    QWORD PTR [rsp+0x20],0x0
   3ff57:	test   rax,rax
   3ff5a:	je     3ff78 <idn_encode+0x98>
   3ff5c:	mov    rdi,rax
   3ff5f:	call   4ba50 <xstrdup>
   3ff64:	mov    rdi,QWORD PTR [rsp+0x18]
   3ff69:	mov    QWORD PTR [rsp+0x8],rax
   3ff6e:	call   c910 <idn2_free@plt>
   3ff73:	mov    rax,QWORD PTR [rsp+0x8]
   3ff78:	mov    rcx,QWORD PTR [rsp+0x28]
   3ff7d:	xor    rcx,QWORD PTR fs:0x28
   3ff86:	jne    3ffff <idn_encode+0x11f>
   3ff88:	add    rsp,0x30
   3ff8c:	pop    rbp
   3ff8d:	pop    r12
   3ff8f:	pop    r13
   3ff91:	ret    
   3ff92:	nop    WORD PTR [rax+rax*1+0x0]
   3ff98:	mov    rsi,r12
   3ff9b:	mov    edx,0x4
   3ffa0:	mov    rdi,rbp
   3ffa3:	call   c9f0 <idn2_lookup_u8@plt>
   3ffa8:	mov    r12d,eax
   3ffab:	test   eax,eax
   3ffad:	je     3ff3f <idn_encode+0x5f>
   3ffaf:	mov    edi,eax
   3ffb1:	call   c2a0 <idn2_strerror@plt>
   3ffb6:	mov    rdi,rax
   3ffb9:	call   4b5b0 <quote>
   3ffbe:	mov    edx,0x5
   3ffc3:	lea    rsi,[rip+0x2e937]        # 6e901 <CSWTCH.5+0xc1>
   3ffca:	xor    edi,edi
   3ffcc:	mov    r13,rax
   3ffcf:	call   c780 <dcgettext@plt>
   3ffd4:	mov    rcx,r13
   3ffd7:	mov    edx,r12d
   3ffda:	xor    edi,edi
   3ffdc:	mov    rsi,rax
   3ffdf:	xor    eax,eax
   3ffe1:	call   2e0a0 <logprintf>
   3ffe6:	mov    rdi,QWORD PTR [rsp+0x20]
   3ffeb:	call   4bdc0 <rpl_free>
   3fff0:	xor    eax,eax
   3fff2:	jmp    3ff78 <idn_encode+0x98>
   3fff4:	nop    DWORD PTR [rax+0x0]
   3fff8:	xor    eax,eax
   3fffa:	jmp    3ff78 <idn_encode+0x98>
   3ffff:	call   c7b0 <__stack_chk_fail@plt>
   40004:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4000f:	nop

0000000000040010 <iri_new>:
   40010:	endbr64 
   40014:	push   r12
   40016:	mov    edi,0x20
   4001b:	call   4b850 <xmalloc>
   40020:	mov    rdi,QWORD PTR [rip+0x4a3a1]        # 8a3c8 <opt+0x348>
   40027:	mov    r12,rax
   4002a:	test   rdi,rdi
   4002d:	je     40037 <iri_new+0x27>
   4002f:	call   4ba50 <xstrdup>
   40034:	mov    rdi,rax
   40037:	movzx  eax,BYTE PTR [rip+0x4a388]        # 8a3c6 <opt+0x346>
   4003e:	mov    QWORD PTR [r12],rdi
   40042:	mov    QWORD PTR [r12+0x8],0x0
   4004b:	mov    BYTE PTR [r12+0x18],al
   40050:	mov    rax,r12
   40053:	mov    QWORD PTR [r12+0x10],0x0
   4005c:	pop    r12
   4005e:	ret    
   4005f:	nop

0000000000040060 <iri_dup>:
   40060:	endbr64 
   40064:	push   r12
   40066:	push   rbx
   40067:	mov    rbx,rdi
   4006a:	mov    edi,0x20
   4006f:	sub    rsp,0x8
   40073:	call   4b850 <xmalloc>
   40078:	mov    rdi,QWORD PTR [rbx]
   4007b:	mov    r12,rax
   4007e:	test   rdi,rdi
   40081:	je     4008b <iri_dup+0x2b>
   40083:	call   4ba50 <xstrdup>
   40088:	mov    rdi,rax
   4008b:	mov    QWORD PTR [r12],rdi
   4008f:	mov    rdi,QWORD PTR [rbx+0x8]
   40093:	test   rdi,rdi
   40096:	je     400a0 <iri_dup+0x40>
   40098:	call   4ba50 <xstrdup>
   4009d:	mov    rdi,rax
   400a0:	mov    QWORD PTR [r12+0x8],rdi
   400a5:	mov    rdi,QWORD PTR [rbx+0x10]
   400a9:	test   rdi,rdi
   400ac:	je     400b6 <iri_dup+0x56>
   400ae:	call   4ba50 <xstrdup>
   400b3:	mov    rdi,rax
   400b6:	movzx  eax,BYTE PTR [rbx+0x18]
   400ba:	mov    QWORD PTR [r12+0x10],rdi
   400bf:	mov    BYTE PTR [r12+0x18],al
   400c4:	add    rsp,0x8
   400c8:	mov    rax,r12
   400cb:	pop    rbx
   400cc:	pop    r12
   400ce:	ret    
   400cf:	nop

00000000000400d0 <iri_free>:
   400d0:	endbr64 
   400d4:	test   rdi,rdi
   400d7:	je     40120 <iri_free+0x50>
   400d9:	push   rbp
   400da:	mov    rbp,rdi
   400dd:	mov    rdi,QWORD PTR [rdi]
   400e0:	call   4bdc0 <rpl_free>
   400e5:	mov    QWORD PTR [rbp+0x0],0x0
   400ed:	mov    rdi,QWORD PTR [rbp+0x8]
   400f1:	call   4bdc0 <rpl_free>
   400f6:	mov    QWORD PTR [rbp+0x8],0x0
   400fe:	mov    rdi,QWORD PTR [rbp+0x10]
   40102:	call   4bdc0 <rpl_free>
   40107:	mov    QWORD PTR [rbp+0x10],0x0
   4010f:	mov    rdi,rbp
   40112:	pop    rbp
   40113:	jmp    4bdc0 <rpl_free>
   40118:	nop    DWORD PTR [rax+rax*1+0x0]
   40120:	ret    
   40121:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4012c:	nop    DWORD PTR [rax+0x0]

0000000000040130 <set_uri_encoding>:
   40130:	endbr64 
   40134:	push   r12
   40136:	push   rbp
   40137:	mov    rbp,rsi
   4013a:	push   rbx
   4013b:	mov    rbx,rdi
   4013e:	sub    rsp,0x10
   40142:	cmp    BYTE PTR [rip+0x4a172],0x0        # 8a2bb <opt+0x23b>
   40149:	jne    401b0 <set_uri_encoding+0x80>
   4014b:	test   dl,dl
   4014d:	jne    40168 <set_uri_encoding+0x38>
   4014f:	cmp    QWORD PTR [rip+0x4a271],0x0        # 8a3c8 <opt+0x348>
   40157:	je     40168 <set_uri_encoding+0x38>
   40159:	add    rsp,0x10
   4015d:	pop    rbx
   4015e:	pop    rbp
   4015f:	pop    r12
   40161:	ret    
   40162:	nop    WORD PTR [rax+rax*1+0x0]
   40168:	mov    r12,QWORD PTR [rbx]
   4016b:	test   r12,r12
   4016e:	je     40193 <set_uri_encoding+0x63>
   40170:	test   rbp,rbp
   40173:	je     40184 <set_uri_encoding+0x54>
   40175:	mov    rsi,rbp
   40178:	mov    rdi,r12
   4017b:	call   43340 <c_strcasecmp>
   40180:	test   eax,eax
   40182:	je     40159 <set_uri_encoding+0x29>
   40184:	mov    rdi,r12
   40187:	call   4bdc0 <rpl_free>
   4018c:	mov    QWORD PTR [rbx],0x0
   40193:	test   rbp,rbp
   40196:	je     401a3 <set_uri_encoding+0x73>
   40198:	mov    rdi,rbp
   4019b:	call   4ba50 <xstrdup>
   401a0:	mov    rbp,rax
   401a3:	mov    QWORD PTR [rbx],rbp
   401a6:	add    rsp,0x10
   401aa:	pop    rbx
   401ab:	pop    rbp
   401ac:	pop    r12
   401ae:	ret    
   401af:	nop
   401b0:	lea    rsi,[rip+0x2cc99]        # 6ce50 <eta_str.8886+0xd8>
   401b7:	test   rbp,rbp
   401ba:	je     401cf <set_uri_encoding+0x9f>
   401bc:	mov    rdi,rbp
   401bf:	mov    DWORD PTR [rsp+0xc],edx
   401c3:	call   4b5b0 <quote>
   401c8:	mov    edx,DWORD PTR [rsp+0xc]
   401cc:	mov    rsi,rax
   401cf:	lea    rdi,[rip+0x2e747]        # 6e91d <CSWTCH.5+0xdd>
   401d6:	xor    eax,eax
   401d8:	mov    DWORD PTR [rsp+0xc],edx
   401dc:	call   2e250 <debug_logprintf>
   401e1:	mov    edx,DWORD PTR [rsp+0xc]
   401e5:	jmp    4014b <set_uri_encoding+0x1b>
   401ea:	nop    WORD PTR [rax+rax*1+0x0]

00000000000401f0 <set_content_encoding>:
   401f0:	endbr64 
   401f4:	cmp    BYTE PTR [rip+0x4a0c0],0x0        # 8a2bb <opt+0x23b>
   401fb:	push   r12
   401fd:	push   rbp
   401fe:	mov    rbp,rsi
   40201:	push   rbx
   40202:	mov    rbx,rdi
   40205:	jne    40270 <set_content_encoding+0x80>
   40207:	cmp    QWORD PTR [rip+0x4a1b9],0x0        # 8a3c8 <opt+0x348>
   4020f:	je     40220 <set_content_encoding+0x30>
   40211:	pop    rbx
   40212:	pop    rbp
   40213:	pop    r12
   40215:	ret    
   40216:	nop    WORD PTR cs:[rax+rax*1+0x0]
   40220:	mov    r12,QWORD PTR [rbx+0x8]
   40224:	test   r12,r12
   40227:	je     4024d <set_content_encoding+0x5d>
   40229:	test   rbp,rbp
   4022c:	je     4023d <set_content_encoding+0x4d>
   4022e:	mov    rsi,rbp
   40231:	mov    rdi,r12
   40234:	call   43340 <c_strcasecmp>
   40239:	test   eax,eax
   4023b:	je     40211 <set_content_encoding+0x21>
   4023d:	mov    rdi,r12
   40240:	call   4bdc0 <rpl_free>
   40245:	mov    QWORD PTR [rbx+0x8],0x0
   4024d:	test   rbp,rbp
   40250:	je     4025d <set_content_encoding+0x6d>
   40252:	mov    rdi,rbp
   40255:	call   4ba50 <xstrdup>
   4025a:	mov    rbp,rax
   4025d:	mov    QWORD PTR [rbx+0x8],rbp
   40261:	pop    rbx
   40262:	pop    rbp
   40263:	pop    r12
   40265:	ret    
   40266:	nop    WORD PTR cs:[rax+rax*1+0x0]
   40270:	lea    rsi,[rip+0x2cbd9]        # 6ce50 <eta_str.8886+0xd8>
   40277:	test   rbp,rbp
   4027a:	je     40287 <set_content_encoding+0x97>
   4027c:	mov    rdi,rbp
   4027f:	call   4b5b0 <quote>
   40284:	mov    rsi,rax
   40287:	lea    rdi,[rip+0x2e6a2]        # 6e930 <CSWTCH.5+0xf0>
   4028e:	xor    eax,eax
   40290:	call   2e250 <debug_logprintf>
   40295:	jmp    40207 <set_content_encoding+0x17>
   4029a:	nop    WORD PTR [rax+rax*1+0x0]

00000000000402a0 <skey_response>:
   402a0:	endbr64 
   402a4:	push   r14
   402a6:	mov    r14,rsi
   402a9:	push   r13
   402ab:	mov    r13d,edi
   402ae:	push   r12
   402b0:	mov    r12,rdx
   402b3:	push   rbp
   402b4:	push   rbx
   402b5:	sub    rsp,0xd0
   402bc:	mov    rax,QWORD PTR fs:0x28
   402c5:	mov    QWORD PTR [rsp+0xc8],rax
   402cd:	xor    eax,eax
   402cf:	lea    rbp,[rsp+0x10]
   402d4:	mov    rdi,rbp
   402d7:	call   43df0 <md5_init_ctx>
   402dc:	mov    rdi,r14
   402df:	call   c310 <strlen@plt>
   402e4:	mov    rdx,rbp
   402e7:	mov    rdi,r14
   402ea:	mov    r14,rsp
   402ed:	mov    rsi,rax
   402f0:	call   446e0 <md5_process_bytes>
   402f5:	mov    rdi,r12
   402f8:	call   c310 <strlen@plt>
   402fd:	mov    rdx,rbp
   40300:	mov    rdi,r12
   40303:	mov    rsi,rax
   40306:	call   446e0 <md5_process_bytes>
   4030b:	mov    rsi,r14
   4030e:	mov    rdi,rbp
   40311:	call   445c0 <md5_finish_ctx>
   40316:	mov    rax,QWORD PTR [rsp+0x8]
   4031b:	xor    QWORD PTR [rsp],rax
   4031f:	mov    rbx,QWORD PTR [rsp]
   40323:	mov    QWORD PTR [rsp+0xb6],rbx
   4032b:	test   r13d,r13d
   4032e:	jle    40382 <skey_response+0xe2>
   40330:	lea    r12d,[r13-0x1]
   40334:	lea    r13,[rsp+0xb6]
   4033c:	nop    DWORD PTR [rax+0x0]
   40340:	mov    rdi,rbp
   40343:	sub    r12d,0x1
   40347:	call   43df0 <md5_init_ctx>
   4034c:	mov    rdx,rbp
   4034f:	mov    esi,0x8
   40354:	mov    rdi,r13
   40357:	call   446e0 <md5_process_bytes>
   4035c:	mov    rsi,r14
   4035f:	mov    rdi,rbp
   40362:	call   445c0 <md5_finish_ctx>
   40367:	mov    rax,QWORD PTR [rsp+0x8]
   4036c:	xor    QWORD PTR [rsp],rax
   40370:	mov    rbx,QWORD PTR [rsp]
   40374:	mov    QWORD PTR [rsp+0xb6],rbx
   4037c:	cmp    r12d,0xffffffff
   40380:	jne    40340 <skey_response+0xa0>
   40382:	xor    eax,eax
   40384:	mov    QWORD PTR [rsp+0xbe],rbx
   4038c:	xor    edi,edi
   4038e:	xor    esi,esi
   40390:	mov    WORD PTR [rsp+0xc6],ax
   40398:	mov    r8d,0x18
   4039e:	xchg   ax,ax
   403a0:	mov    edx,esi
   403a2:	sar    edx,0x3
   403a5:	movsxd rdx,edx
   403a8:	movzx  eax,BYTE PTR [rsp+rdx*1+0xbe]
   403b0:	movzx  ecx,BYTE PTR [rsp+rdx*1+0xbf]
   403b8:	movzx  edx,BYTE PTR [rsp+rdx*1+0xc0]
   403c0:	shl    eax,0x8
   403c3:	or     eax,ecx
   403c5:	mov    ecx,r8d
   403c8:	shl    eax,0x8
   403cb:	or     eax,edx
   403cd:	mov    edx,esi
   403cf:	add    esi,0x2
   403d2:	and    edx,0x7
   403d5:	add    edx,0x2
   403d8:	sub    ecx,edx
   403da:	shr    eax,cl
   403dc:	and    eax,0x3
   403df:	add    edi,eax
   403e1:	cmp    esi,0x40
   403e4:	jne    403a0 <skey_response+0x100>
   403e6:	movzx  eax,bl
   403e9:	movzx  edx,bh
   403ec:	lea    rsi,[rip+0x40fed]        # 813e0 <Wp>
   403f3:	mov    rcx,rbx
   403f6:	shl    eax,0x8
   403f9:	shl    edi,0x6
   403fc:	mov    r8d,0x1
   40402:	or     eax,edx
   40404:	shr    rcx,0x10
   40408:	mov    BYTE PTR [rsp+0xc6],dil
   40410:	shr    eax,0x5
   40413:	movzx  ecx,cl
   40416:	mov    eax,DWORD PTR [rsi+rax*4]
   40419:	movsx  ebp,ah
   4041c:	mov    DWORD PTR [rip+0x49a8e],eax        # 89eb0 <english.7141>
   40422:	test   bpl,bpl
   40425:	je     4044d <skey_response+0x1ad>
   40427:	mov    r9d,eax
   4042a:	mov    r8d,0x2
   40430:	shl    r9d,0x8
   40434:	sar    r9d,0x18
   40438:	test   r9b,r9b
   4043b:	je     4044d <skey_response+0x1ad>
   4043d:	sar    eax,0x18
   40440:	xor    r8d,r8d
   40443:	test   al,al
   40445:	setne  r8b
   40449:	add    r8,0x3
   4044d:	shl    edx,0x8
   40450:	lea    rax,[rip+0x49a59]        # 89eb0 <english.7141>
   40457:	mov    r9d,ebx
   4045a:	or     edx,ecx
   4045c:	add    rax,r8
   4045f:	shr    r9d,0x18
   40463:	shr    edx,0x2
   40466:	mov    BYTE PTR [rax],0x20
   40469:	and    edx,0x7ff
   4046f:	mov    edx,DWORD PTR [rsi+rdx*4]
   40472:	mov    DWORD PTR [rax+0x1],edx
   40475:	cmp    BYTE PTR [rax+0x2],0x0
   40479:	mov    edx,0x2
   4047e:	je     40498 <skey_response+0x1f8>
   40480:	cmp    BYTE PTR [rax+0x3],0x0
   40484:	mov    edx,0x3
   40489:	je     40498 <skey_response+0x1f8>
   4048b:	xor    edx,edx
   4048d:	cmp    BYTE PTR [rax+0x4],0x0
   40491:	setne  dl
   40494:	add    rdx,0x4
   40498:	mov    r8,rbx
   4049b:	shl    ecx,0x8
   4049e:	add    rax,rdx
   404a1:	mov    edx,0x2
   404a6:	shr    r8,0x20
   404aa:	or     ecx,r9d
   404ad:	mov    BYTE PTR [rax],0x20
   404b0:	shl    ecx,0x8
   404b3:	movzx  r8d,r8b
   404b7:	or     ecx,r8d
   404ba:	shr    ecx,0x7
   404bd:	and    ecx,0x7ff
   404c3:	mov    ecx,DWORD PTR [rsi+rcx*4]
   404c6:	mov    DWORD PTR [rax+0x1],ecx
   404c9:	and    ch,0xff
   404cc:	je     404e6 <skey_response+0x246>
   404ce:	cmp    BYTE PTR [rax+0x3],0x0
   404d2:	mov    edx,0x3
   404d7:	je     404e6 <skey_response+0x246>
   404d9:	xor    edx,edx
   404db:	cmp    BYTE PTR [rax+0x4],0x0
   404df:	setne  dl
   404e2:	add    rdx,0x4
   404e6:	mov    rcx,rbx
   404e9:	shl    r8d,0x8
   404ed:	add    rax,rdx
   404f0:	mov    rdx,rbx
   404f3:	shr    rcx,0x28
   404f7:	shr    rdx,0x30
   404fb:	mov    BYTE PTR [rax],0x20
   404fe:	movzx  ecx,cl
   40501:	movzx  edx,dl
   40504:	or     r8d,ecx
   40507:	shr    r8d,0x4
   4050b:	and    r8d,0x7ff
   40512:	mov    r9d,DWORD PTR [rsi+r8*4]
   40516:	mov    r8d,0x2
   4051c:	mov    DWORD PTR [rax+0x1],r9d
   40520:	and    r9d,0xff00
   40527:	je     40544 <skey_response+0x2a4>
   40529:	cmp    BYTE PTR [rax+0x3],0x0
   4052d:	mov    r8d,0x3
   40533:	je     40544 <skey_response+0x2a4>
   40535:	xor    r8d,r8d
   40538:	cmp    BYTE PTR [rax+0x4],0x0
   4053c:	setne  r8b
   40540:	add    r8,0x4
   40544:	shl    ecx,0x8
   40547:	add    rax,r8
   4054a:	shr    rbx,0x38
   4054e:	or     ecx,edx
   40550:	mov    BYTE PTR [rax],0x20
   40553:	shr    ecx,1
   40555:	and    ecx,0x7ff
   4055b:	mov    r8d,DWORD PTR [rsi+rcx*4]
   4055f:	mov    ecx,0x2
   40564:	mov    DWORD PTR [rax+0x1],r8d
   40568:	and    r8d,0xff00
   4056f:	jne    405d0 <skey_response+0x330>
   40571:	shl    edx,0x8
   40574:	movzx  edi,dil
   40578:	add    rax,rcx
   4057b:	or     edx,ebx
   4057d:	mov    BYTE PTR [rax],0x20
   40580:	shl    edx,0x8
   40583:	mov    BYTE PTR [rax+0x5],0x0
   40587:	or     edx,edi
   40589:	shr    edx,0x6
   4058c:	and    edx,0x7ff
   40592:	cmp    BYTE PTR [rip+0x49d22],0x0        # 8a2bb <opt+0x23b>
   40599:	mov    edx,DWORD PTR [rsi+rdx*4]
   4059c:	mov    DWORD PTR [rax+0x1],edx
   4059f:	jne    405f0 <skey_response+0x350>
   405a1:	mov    rax,QWORD PTR [rsp+0xc8]
   405a9:	xor    rax,QWORD PTR fs:0x28
   405b2:	jne    4060f <skey_response+0x36f>
   405b4:	add    rsp,0xd0
   405bb:	lea    rax,[rip+0x498ee]        # 89eb0 <english.7141>
   405c2:	pop    rbx
   405c3:	pop    rbp
   405c4:	pop    r12
   405c6:	pop    r13
   405c8:	pop    r14
   405ca:	ret    
   405cb:	nop    DWORD PTR [rax+rax*1+0x0]
   405d0:	cmp    BYTE PTR [rax+0x3],0x0
   405d4:	mov    ecx,0x3
   405d9:	je     40571 <skey_response+0x2d1>
   405db:	xor    ecx,ecx
   405dd:	cmp    BYTE PTR [rax+0x4],0x0
   405e1:	setne  cl
   405e4:	add    rcx,0x4
   405e8:	jmp    40571 <skey_response+0x2d1>
   405ea:	nop    WORD PTR [rax+rax*1+0x0]
   405f0:	lea    rdi,[rip+0x498b9]        # 89eb0 <english.7141>
   405f7:	call   4b5b0 <quote>
   405fc:	lea    rdi,[rip+0x2e50a]        # 6eb0d <CSWTCH.5+0x2cd>
   40603:	mov    rsi,rax
   40606:	xor    eax,eax
   40608:	call   2e250 <debug_logprintf>
   4060d:	jmp    405a1 <skey_response+0x301>
   4060f:	call   c7b0 <__stack_chk_fail@plt>
   40614:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4061e:	xchg   ax,ax

0000000000040620 <wgnutls_close>:
   40620:	endbr64 
   40624:	push   r12
   40626:	mov    r12d,edi
   40629:	push   rbp
   4062a:	mov    rbp,rsi
   4062d:	sub    rsp,0x8
   40631:	mov    rax,QWORD PTR [rsi+0x8]
   40635:	test   rax,rax
   40638:	je     4064d <wgnutls_close+0x2d>
   4063a:	mov    rdi,QWORD PTR [rax]
   4063d:	call   QWORD PTR [rip+0x42e65]        # 834a8 <gnutls_free@@GNUTLS_3_4>
   40643:	mov    rdi,QWORD PTR [rbp+0x8]
   40647:	call   QWORD PTR [rip+0x42e5b]        # 834a8 <gnutls_free@@GNUTLS_3_4>
   4064d:	mov    rdi,QWORD PTR [rbp+0x0]
   40651:	call   c490 <gnutls_deinit@plt>
   40656:	mov    rdi,rbp
   40659:	call   4bdc0 <rpl_free>
   4065e:	add    rsp,0x8
   40662:	mov    edi,r12d
   40665:	pop    rbp
   40666:	pop    r12
   40668:	jmp    bf10 <close@plt>
   4066d:	nop    DWORD PTR [rax]

0000000000040670 <wgnutls_errstr>:
   40670:	endbr64 
   40674:	push   rbp
   40675:	mov    ebp,DWORD PTR [rsi+0x10]
   40678:	test   ebp,ebp
   4067a:	jg     406b0 <wgnutls_errstr+0x40>
   4067c:	cmp    ebp,0xffffffe4
   4067f:	sete   dl
   40682:	cmp    ebp,0xffffffdb
   40685:	sete   al
   40688:	or     dl,al
   4068a:	jne    40694 <wgnutls_errstr+0x24>
   4068c:	cmp    ebp,0xfffffe58
   40692:	jne    4069e <wgnutls_errstr+0x2e>
   40694:	call   c740 <__errno_location@plt>
   40699:	cmp    DWORD PTR [rax],0x6e
   4069c:	je     406b0 <wgnutls_errstr+0x40>
   4069e:	mov    edi,ebp
   406a0:	pop    rbp
   406a1:	jmp    c790 <gnutls_strerror@plt>
   406a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   406b0:	xor    eax,eax
   406b2:	pop    rbp
   406b3:	ret    
   406b4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   406bf:	nop

00000000000406c0 <_do_reauth>:
   406c0:	push   r15
   406c2:	push   r14
   406c4:	mov    r14,rdx
   406c7:	push   r13
   406c9:	push   r12
   406cb:	mov    r12,rdi
   406ce:	push   rbp
   406cf:	push   rbx
   406d0:	sub    rsp,0x28
   406d4:	mov    DWORD PTR [rsp+0x14],esi
   406d8:	test   rdx,rdx
   406db:	je     40860 <_do_reauth+0x1a0>
   406e1:	movsd  xmm6,QWORD PTR [rdx+0x8]
   406e6:	mov    BYTE PTR [rsp+0x1b],0x0
   406eb:	pxor   xmm7,xmm7
   406ef:	mov    DWORD PTR [rsp+0x1c],0x0
   406f7:	movsd  QWORD PTR [rsp],xmm6
   406fc:	movsd  QWORD PTR [rsp+0x8],xmm7
   40702:	mov    r13d,0x1
   40708:	jmp    4072e <_do_reauth+0x6e>
   4070a:	nop    WORD PTR [rax+rax*1+0x0]
   40710:	test   eax,eax
   40712:	js     40808 <_do_reauth+0x148>
   40718:	je     407e8 <_do_reauth+0x128>
   4071e:	mov    edi,r15d
   40721:	call   c000 <gnutls_error_is_fatal@plt>
   40726:	test   eax,eax
   40728:	jne    407e8 <_do_reauth+0x128>
   4072e:	xor    esi,esi
   40730:	mov    rdi,r12
   40733:	call   cc20 <gnutls_reauth@plt>
   40738:	movsd  xmm2,QWORD PTR [rsp]
   4073d:	movsd  xmm3,QWORD PTR [rsp+0x8]
   40743:	mov    r15d,eax
   40746:	ucomisd xmm2,xmm3
   4074a:	setp   bl
   4074d:	cmovne ebx,r13d
   40751:	cmp    eax,0xffffffe4
   40754:	sete   bpl
   40758:	and    bpl,bl
   4075b:	je     40710 <_do_reauth+0x50>
   4075d:	mov    rdi,r12
   40760:	call   c260 <gnutls_record_get_direction@plt>
   40765:	xor    esi,esi
   40767:	movsd  xmm0,QWORD PTR [rsp]
   4076c:	mov    edi,DWORD PTR [rsp+0x14]
   40770:	test   eax,eax
   40772:	setne  sil
   40776:	add    esi,0x1
   40779:	call   eef0 <select_fd>
   4077e:	test   eax,eax
   40780:	jle    408c7 <_do_reauth+0x207>
   40786:	test   r14,r14
   40789:	je     40830 <_do_reauth+0x170>
   4078f:	movsd  xmm1,QWORD PTR [r14]
   40794:	mov    rdi,QWORD PTR [r14+0x10]
   40798:	movsd  QWORD PTR [rsp],xmm1
   4079d:	call   31db0 <ptimer_measure>
   407a2:	movsd  xmm1,QWORD PTR [rsp]
   407a7:	movsd  xmm5,QWORD PTR [rsp+0x8]
   407ad:	subsd  xmm1,xmm0
   407b1:	comisd xmm5,xmm1
   407b5:	movsd  QWORD PTR [rsp],xmm1
   407ba:	movsd  QWORD PTR [r14+0x8],xmm1
   407c0:	jae    408ce <_do_reauth+0x20e>
   407c6:	ucomisd xmm1,xmm5
   407ca:	mov    edi,r15d
   407cd:	setp   bl
   407d0:	cmovne ebx,r13d
   407d4:	call   c000 <gnutls_error_is_fatal@plt>
   407d9:	test   eax,eax
   407db:	je     4072e <_do_reauth+0x6e>
   407e1:	nop    DWORD PTR [rax+0x0]
   407e8:	test   bl,bl
   407ea:	je     407f3 <_do_reauth+0x133>
   407ec:	cmp    BYTE PTR [rsp+0x1b],0x0
   407f1:	jne    40840 <_do_reauth+0x180>
   407f3:	add    rsp,0x28
   407f7:	mov    eax,r15d
   407fa:	pop    rbx
   407fb:	pop    rbp
   407fc:	pop    r12
   407fe:	pop    r13
   40800:	pop    r14
   40802:	pop    r15
   40804:	ret    
   40805:	nop    DWORD PTR [rax]
   40808:	mov    edi,eax
   4080a:	call   c790 <gnutls_strerror@plt>
   4080f:	lea    rsi,[rip+0x2e30a]        # 6eb20 <CSWTCH.5+0x2e0>
   40816:	mov    edi,0x1
   4081b:	mov    rdx,rax
   4081e:	xor    eax,eax
   40820:	call   2e0a0 <logprintf>
   40825:	jmp    4071e <_do_reauth+0x5e>
   4082a:	nop    WORD PTR [rax+rax*1+0x0]
   40830:	mov    ebx,ebp
   40832:	jmp    4071e <_do_reauth+0x5e>
   40837:	nop    WORD PTR [rax+rax*1+0x0]
   40840:	mov    edx,DWORD PTR [rsp+0x1c]
   40844:	mov    edi,DWORD PTR [rsp+0x14]
   40848:	xor    eax,eax
   4084a:	mov    esi,0x4
   4084f:	call   4bb20 <rpl_fcntl>
   40854:	test   eax,eax
   40856:	jns    407f3 <_do_reauth+0x133>
   40858:	mov    r15d,0xffffffff
   4085e:	jmp    407f3 <_do_reauth+0x133>
   40860:	movsd  xmm6,QWORD PTR [rip+0x49a08]        # 8a270 <opt+0x1f0>
   40868:	pxor   xmm7,xmm7
   4086c:	movsd  QWORD PTR [rsp+0x8],xmm7
   40872:	ucomisd xmm6,xmm7
   40876:	movsd  QWORD PTR [rsp],xmm6
   4087b:	jp     40883 <_do_reauth+0x1c3>
   4087d:	je     40908 <_do_reauth+0x248>
   40883:	mov    ebx,DWORD PTR [rsp+0x14]
   40887:	xor    edx,edx
   40889:	mov    esi,0x3
   4088e:	xor    eax,eax
   40890:	mov    edi,ebx
   40892:	call   4bb20 <rpl_fcntl>
   40897:	mov    DWORD PTR [rsp+0x1c],eax
   4089b:	mov    r15d,eax
   4089e:	test   eax,eax
   408a0:	js     407f3 <_do_reauth+0x133>
   408a6:	or     ah,0x8
   408a9:	mov    esi,0x4
   408ae:	mov    edi,ebx
   408b0:	mov    edx,eax
   408b2:	xor    eax,eax
   408b4:	call   4bb20 <rpl_fcntl>
   408b9:	test   eax,eax
   408bb:	jne    40858 <_do_reauth+0x198>
   408bd:	mov    BYTE PTR [rsp+0x1b],0x1
   408c2:	jmp    40702 <_do_reauth+0x42>
   408c7:	jne    408e3 <_do_reauth+0x223>
   408c9:	test   r14,r14
   408cc:	je     408f0 <_do_reauth+0x230>
   408ce:	mov    DWORD PTR [r14+0x18],0x1
   408d6:	mov    ebx,ebp
   408d8:	mov    r15d,0xfffffe58
   408de:	jmp    407e8 <_do_reauth+0x128>
   408e3:	mov    ebx,ebp
   408e5:	mov    r15d,0xffffffe4
   408eb:	jmp    407e8 <_do_reauth+0x128>
   408f0:	call   c740 <__errno_location@plt>
   408f5:	mov    ebx,ebp
   408f7:	mov    r15d,0xffffffff
   408fd:	mov    DWORD PTR [rax],0x6e
   40903:	jmp    407e8 <_do_reauth+0x128>
   40908:	mov    BYTE PTR [rsp+0x1b],0x1
   4090d:	mov    DWORD PTR [rsp+0x1c],0x0
   40915:	jmp    40702 <_do_reauth+0x42>
   4091a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000040920 <_sni_hostname>:
   40920:	push   rbp
   40921:	mov    rbp,rdi
   40924:	push   rbx
   40925:	sub    rsp,0x8
   40929:	call   c310 <strlen@plt>
   4092e:	mov    rdi,rbp
   40931:	mov    rbx,rax
   40934:	lea    rsi,[rax+0x1]
   40938:	call   4ba10 <xmemdup>
   4093d:	test   rbx,rbx
   40940:	je     40964 <_sni_hostname+0x44>
   40942:	lea    rdx,[rax+rbx*1-0x1]
   40947:	jmp    4095f <_sni_hostname+0x3f>
   40949:	nop    DWORD PTR [rax+0x0]
   40950:	mov    BYTE PTR [rdx],0x0
   40953:	lea    rcx,[rdx-0x1]
   40957:	cmp    rdx,rax
   4095a:	je     40964 <_sni_hostname+0x44>
   4095c:	mov    rdx,rcx
   4095f:	cmp    BYTE PTR [rdx],0x2e
   40962:	je     40950 <_sni_hostname+0x30>
   40964:	add    rsp,0x8
   40968:	pop    rbx
   40969:	pop    rbp
   4096a:	ret    
   4096b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000040970 <_do_handshake>:
   40970:	push   r15
   40972:	push   r14
   40974:	push   r13
   40976:	mov    r13,rdx
   40979:	push   r12
   4097b:	mov    r12,rdi
   4097e:	push   rbp
   4097f:	push   rbx
   40980:	sub    rsp,0x28
   40984:	mov    DWORD PTR [rsp+0x14],esi
   40988:	test   rdx,rdx
   4098b:	je     40b60 <_do_handshake+0x1f0>
   40991:	movsd  xmm6,QWORD PTR [rdx+0x8]
   40996:	pxor   xmm7,xmm7
   4099a:	mov    BYTE PTR [rsp+0x1b],0x0
   4099f:	mov    DWORD PTR [rsp+0x1c],0x0
   409a7:	movsd  QWORD PTR [rsp],xmm6
   409ac:	movsd  QWORD PTR [rsp+0x8],xmm7
   409b2:	jmp    409d6 <_do_handshake+0x66>
   409b4:	nop    DWORD PTR [rax+0x0]
   409b8:	test   eax,eax
   409ba:	js     40ab8 <_do_handshake+0x148>
   409c0:	je     40a90 <_do_handshake+0x120>
   409c6:	mov    edi,r15d
   409c9:	call   c000 <gnutls_error_is_fatal@plt>
   409ce:	test   eax,eax
   409d0:	jne    40a90 <_do_handshake+0x120>
   409d6:	mov    rdi,r12
   409d9:	mov    r14d,0x1
   409df:	call   c010 <gnutls_handshake@plt>
   409e4:	movsd  xmm2,QWORD PTR [rsp]
   409e9:	movsd  xmm3,QWORD PTR [rsp+0x8]
   409ef:	mov    r15d,eax
   409f2:	ucomisd xmm2,xmm3
   409f6:	setp   bl
   409f9:	cmovne ebx,r14d
   409fd:	cmp    eax,0xffffffe4
   40a00:	sete   bpl
   40a04:	and    bpl,bl
   40a07:	je     409b8 <_do_handshake+0x48>
   40a09:	mov    rdi,r12
   40a0c:	call   c260 <gnutls_record_get_direction@plt>
   40a11:	xor    esi,esi
   40a13:	movsd  xmm0,QWORD PTR [rsp]
   40a18:	mov    edi,DWORD PTR [rsp+0x14]
   40a1c:	test   eax,eax
   40a1e:	setne  sil
   40a22:	add    esi,0x1
   40a25:	call   eef0 <select_fd>
   40a2a:	test   eax,eax
   40a2c:	jle    40bc7 <_do_handshake+0x257>
   40a32:	test   r13,r13
   40a35:	je     40b20 <_do_handshake+0x1b0>
   40a3b:	movsd  xmm1,QWORD PTR [r13+0x0]
   40a41:	mov    rdi,QWORD PTR [r13+0x10]
   40a45:	movsd  QWORD PTR [rsp],xmm1
   40a4a:	call   31db0 <ptimer_measure>
   40a4f:	movsd  xmm1,QWORD PTR [rsp]
   40a54:	movsd  xmm5,QWORD PTR [rsp+0x8]
   40a5a:	subsd  xmm1,xmm0
   40a5e:	comisd xmm5,xmm1
   40a62:	movsd  QWORD PTR [rsp],xmm1
   40a67:	movsd  QWORD PTR [r13+0x8],xmm1
   40a6d:	jae    40bce <_do_handshake+0x25e>
   40a73:	ucomisd xmm1,xmm5
   40a77:	mov    edi,r15d
   40a7a:	setp   bl
   40a7d:	cmovne ebx,r14d
   40a81:	call   c000 <gnutls_error_is_fatal@plt>
   40a86:	test   eax,eax
   40a88:	je     409d6 <_do_handshake+0x66>
   40a8e:	xchg   ax,ax
   40a90:	test   bl,bl
   40a92:	je     40a9f <_do_handshake+0x12f>
   40a94:	cmp    BYTE PTR [rsp+0x1b],0x0
   40a99:	jne    40b30 <_do_handshake+0x1c0>
   40a9f:	add    rsp,0x28
   40aa3:	mov    eax,r15d
   40aa6:	pop    rbx
   40aa7:	pop    rbp
   40aa8:	pop    r12
   40aaa:	pop    r13
   40aac:	pop    r14
   40aae:	pop    r15
   40ab0:	ret    
   40ab1:	nop    DWORD PTR [rax+0x0]
   40ab8:	mov    edi,eax
   40aba:	call   c790 <gnutls_strerror@plt>
   40abf:	lea    rsi,[rip+0x2e05a]        # 6eb20 <CSWTCH.5+0x2e0>
   40ac6:	mov    edi,0x1
   40acb:	mov    rdx,rax
   40ace:	xor    eax,eax
   40ad0:	call   2e0a0 <logprintf>
   40ad5:	mov    eax,r15d
   40ad8:	and    eax,0xfffffffb
   40adb:	cmp    eax,0xfffffff0
   40ade:	jne    409c6 <_do_handshake+0x56>
   40ae4:	mov    rdi,r12
   40ae7:	call   c0b0 <gnutls_alert_get@plt>
   40aec:	mov    edi,eax
   40aee:	mov    ebp,eax
   40af0:	call   c190 <gnutls_alert_get_name@plt>
   40af5:	mov    edx,ebp
   40af7:	mov    edi,0x1
   40afc:	lea    rsi,[rip+0x2e12d]        # 6ec30 <CSWTCH.5+0x3f0>
   40b03:	test   rax,rax
   40b06:	mov    rcx,rax
   40b09:	lea    rax,[rip+0x2e01c]        # 6eb2c <CSWTCH.5+0x2ec>
   40b10:	cmove  rcx,rax
   40b14:	xor    eax,eax
   40b16:	call   2e0a0 <logprintf>
   40b1b:	jmp    409c6 <_do_handshake+0x56>
   40b20:	mov    ebx,ebp
   40b22:	jmp    409c6 <_do_handshake+0x56>
   40b27:	nop    WORD PTR [rax+rax*1+0x0]
   40b30:	mov    edx,DWORD PTR [rsp+0x1c]
   40b34:	mov    edi,DWORD PTR [rsp+0x14]
   40b38:	xor    eax,eax
   40b3a:	mov    esi,0x4
   40b3f:	call   4bb20 <rpl_fcntl>
   40b44:	test   eax,eax
   40b46:	jns    40a9f <_do_handshake+0x12f>
   40b4c:	mov    r15d,0xffffffff
   40b52:	jmp    40a9f <_do_handshake+0x12f>
   40b57:	nop    WORD PTR [rax+rax*1+0x0]
   40b60:	movsd  xmm6,QWORD PTR [rip+0x49708]        # 8a270 <opt+0x1f0>
   40b68:	pxor   xmm7,xmm7
   40b6c:	movsd  QWORD PTR [rsp+0x8],xmm7
   40b72:	ucomisd xmm6,xmm7
   40b76:	movsd  QWORD PTR [rsp],xmm6
   40b7b:	jp     40b83 <_do_handshake+0x213>
   40b7d:	je     40c08 <_do_handshake+0x298>
   40b83:	mov    ebx,DWORD PTR [rsp+0x14]
   40b87:	xor    edx,edx
   40b89:	mov    esi,0x3
   40b8e:	xor    eax,eax
   40b90:	mov    edi,ebx
   40b92:	call   4bb20 <rpl_fcntl>
   40b97:	mov    DWORD PTR [rsp+0x1c],eax
   40b9b:	mov    r15d,eax
   40b9e:	test   eax,eax
   40ba0:	js     40a9f <_do_handshake+0x12f>
   40ba6:	or     ah,0x8
   40ba9:	mov    esi,0x4
   40bae:	mov    edi,ebx
   40bb0:	mov    edx,eax
   40bb2:	xor    eax,eax
   40bb4:	call   4bb20 <rpl_fcntl>
   40bb9:	test   eax,eax
   40bbb:	jne    40b4c <_do_handshake+0x1dc>
   40bbd:	mov    BYTE PTR [rsp+0x1b],0x1
   40bc2:	jmp    409d6 <_do_handshake+0x66>
   40bc7:	jne    40be3 <_do_handshake+0x273>
   40bc9:	test   r13,r13
   40bcc:	je     40bf0 <_do_handshake+0x280>
   40bce:	mov    DWORD PTR [r13+0x18],0x1
   40bd6:	mov    ebx,ebp
   40bd8:	mov    r15d,0xffffffdb
   40bde:	jmp    40a90 <_do_handshake+0x120>
   40be3:	mov    ebx,ebp
   40be5:	mov    r15d,0xffffffe4
   40beb:	jmp    40a90 <_do_handshake+0x120>
   40bf0:	call   c740 <__errno_location@plt>
   40bf5:	mov    ebx,ebp
   40bf7:	mov    r15d,0xffffffff
   40bfd:	mov    DWORD PTR [rax],0x6e
   40c03:	jmp    40a90 <_do_handshake+0x120>
   40c08:	mov    BYTE PTR [rsp+0x1b],0x1
   40c0d:	mov    DWORD PTR [rsp+0x1c],0x0
   40c15:	jmp    409d6 <_do_handshake+0x66>
   40c1a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000040c20 <wgnutls_read_timeout>:
   40c20:	push   r15
   40c22:	push   r14
   40c24:	mov    r14d,edx
   40c27:	push   r13
   40c29:	mov    r13d,edi
   40c2c:	push   r12
   40c2e:	push   rbp
   40c2f:	mov    rbp,rsi
   40c32:	push   rbx
   40c33:	mov    rbx,rcx
   40c36:	sub    rsp,0x58
   40c3a:	mov    rdi,QWORD PTR [rcx]
   40c3d:	movsd  QWORD PTR [rsp+0x8],xmm0
   40c43:	mov    rax,QWORD PTR fs:0x28
   40c4c:	mov    QWORD PTR [rsp+0x48],rax
   40c51:	xor    eax,eax
   40c53:	call   c480 <gnutls_record_check_pending@plt>
   40c58:	movsd  xmm0,QWORD PTR [rsp+0x8]
   40c5e:	ucomisd xmm0,QWORD PTR [rip+0x1a5ba]        # 5b220 <_IO_stdin_used+0x220>
   40c66:	mov    DWORD PTR [rsp+0x1c],eax
   40c6a:	jp     40c76 <wgnutls_read_timeout+0x56>
   40c6c:	jne    40c76 <wgnutls_read_timeout+0x56>
   40c6e:	movsd  xmm0,QWORD PTR [rip+0x495fa]        # 8a270 <opt+0x1f0>
   40c76:	mov    QWORD PTR [rsp+0x28],0x0
   40c7f:	mov    QWORD PTR [rsp+0x30],0x0
   40c88:	mov    DWORD PTR [rsp+0x38],0x0
   40c90:	movsd  QWORD PTR [rsp+0x20],xmm0
   40c96:	test   eax,eax
   40c98:	jne    40ebd <wgnutls_read_timeout+0x29d>
   40c9e:	pxor   xmm3,xmm3
   40ca2:	ucomisd xmm0,xmm3
   40ca6:	jp     40e60 <wgnutls_read_timeout+0x240>
   40cac:	jne    40e60 <wgnutls_read_timeout+0x240>
   40cb2:	lea    rax,[rsp+0x20]
   40cb7:	mov    r15d,DWORD PTR [rbx+0x10]
   40cbb:	mov    QWORD PTR [rsp+0x10],rax
   40cc0:	cmp    r15d,0xffffffdb
   40cc4:	je     40d70 <wgnutls_read_timeout+0x150>
   40cca:	cmp    r15d,0xfffffe58
   40cd1:	je     40e20 <wgnutls_read_timeout+0x200>
   40cd7:	movsxd r12,r14d
   40cda:	nop    WORD PTR [rax+rax*1+0x0]
   40ce0:	mov    rdi,QWORD PTR [rbx]
   40ce3:	mov    rdx,r12
   40ce6:	mov    rsi,rbp
   40ce9:	call   bf60 <gnutls_record_recv@plt>
   40cee:	mov    r15d,eax
   40cf1:	cmp    eax,0xffffffe4
   40cf4:	je     40da0 <wgnutls_read_timeout+0x180>
   40cfa:	cmp    eax,0xffffffcc
   40cfd:	je     40ce0 <wgnutls_read_timeout+0xc0>
   40cff:	cmp    eax,0xffffffdb
   40d02:	je     40d70 <wgnutls_read_timeout+0x150>
   40d04:	cmp    eax,0xfffffe58
   40d09:	je     40cc0 <wgnutls_read_timeout+0xa0>
   40d0b:	mov    rdi,QWORD PTR [rsp+0x30]
   40d10:	test   rdi,rdi
   40d13:	je     40d48 <wgnutls_read_timeout+0x128>
   40d15:	call   31d70 <ptimer_destroy>
   40d1a:	mov    edx,DWORD PTR [rsp+0x1c]
   40d1e:	xor    eax,eax
   40d20:	mov    esi,0x4
   40d25:	mov    edi,r13d
   40d28:	call   4bb20 <rpl_fcntl>
   40d2d:	test   eax,eax
   40d2f:	js     40f20 <wgnutls_read_timeout+0x300>
   40d35:	mov    eax,DWORD PTR [rsp+0x38]
   40d39:	test   eax,eax
   40d3b:	jne    40eda <wgnutls_read_timeout+0x2ba>
   40d41:	nop    DWORD PTR [rax+0x0]
   40d48:	mov    rax,QWORD PTR [rsp+0x48]
   40d4d:	xor    rax,QWORD PTR fs:0x28
   40d56:	jne    40f2b <wgnutls_read_timeout+0x30b>
   40d5c:	add    rsp,0x58
   40d60:	mov    eax,r15d
   40d63:	pop    rbx
   40d64:	pop    rbp
   40d65:	pop    r12
   40d67:	pop    r13
   40d69:	pop    r14
   40d6b:	pop    r15
   40d6d:	ret    
   40d6e:	xchg   ax,ax
   40d70:	cmp    BYTE PTR [rip+0x49544],0x0        # 8a2bb <opt+0x23b>
   40d77:	jne    40efd <wgnutls_read_timeout+0x2dd>
   40d7d:	mov    rdx,QWORD PTR [rsp+0x10]
   40d82:	mov    rdi,QWORD PTR [rbx]
   40d85:	mov    esi,r13d
   40d88:	call   40970 <_do_handshake>
   40d8d:	mov    r15d,eax
   40d90:	test   eax,eax
   40d92:	je     40cd7 <wgnutls_read_timeout+0xb7>
   40d98:	jmp    40d0b <wgnutls_read_timeout+0xeb>
   40d9d:	nop    DWORD PTR [rax]
   40da0:	cmp    QWORD PTR [rsp+0x30],0x0
   40da6:	je     40ce0 <wgnutls_read_timeout+0xc0>
   40dac:	movsd  xmm0,QWORD PTR [rsp+0x28]
   40db2:	mov    esi,0x1
   40db7:	mov    edi,r13d
   40dba:	call   eef0 <select_fd>
   40dbf:	test   eax,eax
   40dc1:	jle    40e50 <wgnutls_read_timeout+0x230>
   40dc7:	movsd  xmm1,QWORD PTR [rsp+0x20]
   40dcd:	mov    rdi,QWORD PTR [rsp+0x30]
   40dd2:	movsd  QWORD PTR [rsp+0x8],xmm1
   40dd8:	call   31db0 <ptimer_measure>
   40ddd:	movsd  xmm1,QWORD PTR [rsp+0x8]
   40de3:	pxor   xmm2,xmm2
   40de7:	subsd  xmm1,xmm0
   40deb:	comisd xmm2,xmm1
   40def:	movsd  QWORD PTR [rsp+0x28],xmm1
   40df5:	jb     40ce0 <wgnutls_read_timeout+0xc0>
   40dfb:	mov    DWORD PTR [rsp+0x38],0x1
   40e03:	mov    rdi,QWORD PTR [rsp+0x30]
   40e08:	test   rdi,rdi
   40e0b:	jne    40d15 <wgnutls_read_timeout+0xf5>
   40e11:	jmp    40d48 <wgnutls_read_timeout+0x128>
   40e16:	nop    WORD PTR cs:[rax+rax*1+0x0]
   40e20:	cmp    BYTE PTR [rip+0x49494],0x0        # 8a2bb <opt+0x23b>
   40e27:	jne    40eea <wgnutls_read_timeout+0x2ca>
   40e2d:	mov    rdx,QWORD PTR [rsp+0x10]
   40e32:	mov    rdi,QWORD PTR [rbx]
   40e35:	mov    esi,r13d
   40e38:	call   406c0 <_do_reauth>
   40e3d:	mov    r15d,eax
   40e40:	test   eax,eax
   40e42:	je     40cd7 <wgnutls_read_timeout+0xb7>
   40e48:	jmp    40d0b <wgnutls_read_timeout+0xeb>
   40e4d:	nop    DWORD PTR [rax]
   40e50:	jne    40d0b <wgnutls_read_timeout+0xeb>
   40e56:	mov    DWORD PTR [rsp+0x38],0x1
   40e5e:	jmp    40e03 <wgnutls_read_timeout+0x1e3>
   40e60:	xor    edx,edx
   40e62:	mov    esi,0x3
   40e67:	mov    edi,r13d
   40e6a:	xor    eax,eax
   40e6c:	call   4bb20 <rpl_fcntl>
   40e71:	mov    r15d,eax
   40e74:	test   eax,eax
   40e76:	js     40d48 <wgnutls_read_timeout+0x128>
   40e7c:	mov    edx,eax
   40e7e:	mov    esi,0x4
   40e83:	xor    eax,eax
   40e85:	mov    edi,r13d
   40e88:	or     dh,0x8
   40e8b:	call   4bb20 <rpl_fcntl>
   40e90:	test   eax,eax
   40e92:	jne    40f20 <wgnutls_read_timeout+0x300>
   40e98:	call   31c00 <ptimer_new>
   40e9d:	mov    QWORD PTR [rsp+0x30],rax
   40ea2:	test   rax,rax
   40ea5:	je     40f10 <wgnutls_read_timeout+0x2f0>
   40ea7:	movsd  xmm0,QWORD PTR [rsp+0x20]
   40ead:	mov    DWORD PTR [rsp+0x1c],r15d
   40eb2:	movsd  QWORD PTR [rsp+0x28],xmm0
   40eb8:	jmp    40cb2 <wgnutls_read_timeout+0x92>
   40ebd:	cmp    eax,r14d
   40ec0:	mov    rdi,QWORD PTR [rbx]
   40ec3:	mov    rsi,rbp
   40ec6:	cmovg  eax,r14d
   40eca:	movsxd rdx,eax
   40ecd:	call   bf60 <gnutls_record_recv@plt>
   40ed2:	mov    r15d,eax
   40ed5:	jmp    40d48 <wgnutls_read_timeout+0x128>
   40eda:	call   c740 <__errno_location@plt>
   40edf:	mov    DWORD PTR [rax],0x6e
   40ee5:	jmp    40d48 <wgnutls_read_timeout+0x128>
   40eea:	lea    rdi,[rip+0x2dd8f]        # 6ec80 <CSWTCH.5+0x440>
   40ef1:	xor    eax,eax
   40ef3:	call   2e250 <debug_logprintf>
   40ef8:	jmp    40e2d <wgnutls_read_timeout+0x20d>
   40efd:	lea    rdi,[rip+0x2dd54]        # 6ec58 <CSWTCH.5+0x418>
   40f04:	xor    eax,eax
   40f06:	call   2e250 <debug_logprintf>
   40f0b:	jmp    40d7d <wgnutls_read_timeout+0x15d>
   40f10:	mov    DWORD PTR [rsp+0x1c],r15d
   40f15:	mov    r15d,0xffffffff
   40f1b:	jmp    40d1a <wgnutls_read_timeout+0xfa>
   40f20:	mov    r15d,0xffffffff
   40f26:	jmp    40d48 <wgnutls_read_timeout+0x128>
   40f2b:	call   c7b0 <__stack_chk_fail@plt>

0000000000040f30 <wgnutls_peek>:
   40f30:	endbr64 
   40f34:	mov    eax,DWORD PTR [rcx+0x214]
   40f3a:	push   r14
   40f3c:	mov    r8d,edi
   40f3f:	mov    rdi,rsi
   40f42:	push   r13
   40f44:	cmp    eax,edx
   40f46:	push   r12
   40f48:	mov    r12d,edx
   40f4b:	push   rbp
   40f4c:	cmovle r12d,eax
   40f50:	push   rbx
   40f51:	mov    rbx,rcx
   40f54:	test   eax,eax
   40f56:	jne    40fc0 <wgnutls_peek+0x90>
   40f58:	cmp    edx,0x200
   40f5e:	mov    eax,0x200
   40f63:	cmovg  edx,eax
   40f66:	cmp    r12d,edx
   40f69:	jl     40f80 <wgnutls_peek+0x50>
   40f6b:	pop    rbx
   40f6c:	mov    eax,r12d
   40f6f:	pop    rbp
   40f70:	pop    r12
   40f72:	pop    r13
   40f74:	pop    r14
   40f76:	ret    
   40f77:	nop    WORD PTR [rax+rax*1+0x0]
   40f80:	movsxd r14,r12d
   40f83:	sub    edx,r12d
   40f86:	mov    edi,r8d
   40f89:	lea    rbp,[rsi+r14*1]
   40f8d:	mov    rsi,rbp
   40f90:	call   40c20 <wgnutls_read_timeout>
   40f95:	mov    DWORD PTR [rbx+0x10],eax
   40f98:	mov    r13d,eax
   40f9b:	test   eax,eax
   40f9d:	js     40fe0 <wgnutls_peek+0xb0>
   40f9f:	add    r12d,eax
   40fa2:	test   eax,eax
   40fa4:	je     40f6b <wgnutls_peek+0x3b>
   40fa6:	lea    rdi,[rbx+r14*1+0x14]
   40fab:	movsxd rdx,eax
   40fae:	mov    rsi,rbp
   40fb1:	call   cb30 <memcpy@plt>
   40fb6:	add    DWORD PTR [rbx+0x214],r13d
   40fbd:	jmp    40f6b <wgnutls_peek+0x3b>
   40fbf:	nop
   40fc0:	movsxd rdx,r12d
   40fc3:	lea    rsi,[rcx+0x14]
   40fc7:	call   cb30 <memcpy@plt>
   40fcc:	pop    rbx
   40fcd:	mov    eax,r12d
   40fd0:	pop    rbp
   40fd1:	pop    r12
   40fd3:	pop    r13
   40fd5:	pop    r14
   40fd7:	ret    
   40fd8:	nop    DWORD PTR [rax+rax*1+0x0]
   40fe0:	test   r12d,r12d
   40fe3:	pop    rbx
   40fe4:	pop    rbp
   40fe5:	cmove  r12d,eax
   40fe9:	mov    eax,r12d
   40fec:	pop    r12
   40fee:	pop    r13
   40ff0:	pop    r14
   40ff2:	ret    
   40ff3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   40ffe:	xchg   ax,ax

0000000000041000 <wgnutls_write>:
   41000:	endbr64 
   41004:	push   r13
   41006:	mov    r13d,edi
   41009:	push   r12
   4100b:	mov    r12,rsi
   4100e:	push   rbp
   4100f:	movsxd rbp,edx
   41012:	push   rbx
   41013:	mov    rbx,rcx
   41016:	sub    rsp,0x8
   4101a:	mov    eax,DWORD PTR [rcx+0x10]
   4101d:	cmp    eax,0xffffffdb
   41020:	je     41080 <wgnutls_write+0x80>
   41022:	cmp    eax,0xfffffe58
   41027:	je     41060 <wgnutls_write+0x60>
   41029:	nop    DWORD PTR [rax+0x0]
   41030:	mov    rdi,QWORD PTR [rbx]
   41033:	mov    rdx,rbp
   41036:	mov    rsi,r12
   41039:	call   c770 <gnutls_record_send@plt>
   4103e:	mov    r8d,eax
   41041:	cmp    eax,0xffffffcc
   41044:	je     41030 <wgnutls_write+0x30>
   41046:	cmp    eax,0xffffffe4
   41049:	je     41030 <wgnutls_write+0x30>
   4104b:	mov    DWORD PTR [rbx+0x10],r8d
   4104f:	add    rsp,0x8
   41053:	mov    eax,r8d
   41056:	pop    rbx
   41057:	pop    rbp
   41058:	pop    r12
   4105a:	pop    r13
   4105c:	ret    
   4105d:	nop    DWORD PTR [rax]
   41060:	cmp    BYTE PTR [rip+0x49254],0x0        # 8a2bb <opt+0x23b>
   41067:	jne    410af <wgnutls_write+0xaf>
   41069:	mov    rdi,QWORD PTR [rbx]
   4106c:	xor    edx,edx
   4106e:	mov    esi,r13d
   41071:	call   406c0 <_do_reauth>
   41076:	mov    r8d,eax
   41079:	test   eax,eax
   4107b:	je     41030 <wgnutls_write+0x30>
   4107d:	jmp    4104b <wgnutls_write+0x4b>
   4107f:	nop
   41080:	cmp    BYTE PTR [rip+0x49234],0x0        # 8a2bb <opt+0x23b>
   41087:	jne    4109f <wgnutls_write+0x9f>
   41089:	mov    rdi,QWORD PTR [rbx]
   4108c:	xor    edx,edx
   4108e:	mov    esi,r13d
   41091:	call   40970 <_do_handshake>
   41096:	mov    r8d,eax
   41099:	test   eax,eax
   4109b:	je     41030 <wgnutls_write+0x30>
   4109d:	jmp    4104b <wgnutls_write+0x4b>
   4109f:	lea    rdi,[rip+0x2dc0a]        # 6ecb0 <CSWTCH.5+0x470>
   410a6:	xor    eax,eax
   410a8:	call   2e250 <debug_logprintf>
   410ad:	jmp    41089 <wgnutls_write+0x89>
   410af:	lea    rdi,[rip+0x2dc22]        # 6ecd8 <CSWTCH.5+0x498>
   410b6:	xor    eax,eax
   410b8:	call   2e250 <debug_logprintf>
   410bd:	jmp    41069 <wgnutls_write+0x69>
   410bf:	nop

00000000000410c0 <wgnutls_poll>:
   410c0:	endbr64 
   410c4:	push   r13
   410c6:	mov    r13d,esi
   410c9:	push   r12
   410cb:	mov    r12d,edi
   410ce:	sub    rsp,0x18
   410d2:	and    r13d,0x1
   410d6:	je     41116 <wgnutls_poll+0x56>
   410d8:	mov    eax,DWORD PTR [rdx+0x214]
   410de:	mov    DWORD PTR [rsp+0xc],esi
   410e2:	movsd  QWORD PTR [rsp],xmm0
   410e7:	test   eax,eax
   410e9:	je     41100 <wgnutls_poll+0x40>
   410eb:	add    rsp,0x18
   410ef:	mov    eax,r13d
   410f2:	pop    r12
   410f4:	pop    r13
   410f6:	ret    
   410f7:	nop    WORD PTR [rax+rax*1+0x0]
   41100:	mov    rdi,QWORD PTR [rdx]
   41103:	call   c480 <gnutls_record_check_pending@plt>
   41108:	movsd  xmm0,QWORD PTR [rsp]
   4110d:	mov    esi,DWORD PTR [rsp+0xc]
   41111:	test   rax,rax
   41114:	jne    410eb <wgnutls_poll+0x2b>
   41116:	ucomisd xmm0,QWORD PTR [rip+0x1a102]        # 5b220 <_IO_stdin_used+0x220>
   4111e:	jp     4112a <wgnutls_poll+0x6a>
   41120:	jne    4112a <wgnutls_poll+0x6a>
   41122:	movsd  xmm0,QWORD PTR [rip+0x49146]        # 8a270 <opt+0x1f0>
   4112a:	add    rsp,0x18
   4112e:	mov    edi,r12d
   41131:	pop    r12
   41133:	pop    r13
   41135:	jmp    eef0 <select_fd>
   4113a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000041140 <wgnutls_read>:
   41140:	endbr64 
   41144:	push   r13
   41146:	mov    r8,rsi
   41149:	push   r12
   4114b:	push   rbp
   4114c:	push   rbx
   4114d:	mov    rbx,rcx
   41150:	sub    rsp,0x8
   41154:	mov    eax,DWORD PTR [rcx+0x214]
   4115a:	test   eax,eax
   4115c:	jne    41180 <wgnutls_read+0x40>
   4115e:	call   40c20 <wgnutls_read_timeout>
   41163:	mov    DWORD PTR [rbx+0x10],eax
   41166:	mov    r12d,eax
   41169:	add    rsp,0x8
   4116d:	mov    eax,r12d
   41170:	pop    rbx
   41171:	pop    rbp
   41172:	pop    r12
   41174:	pop    r13
   41176:	ret    
   41177:	nop    WORD PTR [rax+rax*1+0x0]
   41180:	cmp    eax,edx
   41182:	lea    r13,[rcx+0x14]
   41186:	mov    rdi,r8
   41189:	cmovle edx,eax
   4118c:	mov    rsi,r13
   4118f:	movsxd rbp,edx
   41192:	mov    rdx,rbp
   41195:	mov    r12,rbp
   41198:	call   cb30 <memcpy@plt>
   4119d:	mov    edx,DWORD PTR [rbx+0x214]
   411a3:	sub    edx,ebp
   411a5:	mov    DWORD PTR [rbx+0x214],edx
   411ab:	je     41169 <wgnutls_read+0x29>
   411ad:	lea    rsi,[r13+rbp*1+0x0]
   411b2:	mov    rdi,r13
   411b5:	movsxd rdx,edx
   411b8:	call   c6b0 <memmove@plt>
   411bd:	add    rsp,0x8
   411c1:	mov    eax,r12d
   411c4:	pop    rbx
   411c5:	pop    rbp
   411c6:	pop    r12
   411c8:	pop    r13
   411ca:	ret    
   411cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000411d0 <ssl_init>:
   411d0:	endbr64 
   411d4:	push   r15
   411d6:	push   r14
   411d8:	push   r13
   411da:	push   r12
   411dc:	push   rbp
   411dd:	push   rbx
   411de:	sub    rsp,0x4a8
   411e5:	movzx  r12d,BYTE PTR [rip+0x48ce3]        # 89ed0 <ssl_initialized.13867>
   411ed:	mov    rax,QWORD PTR fs:0x28
   411f6:	mov    QWORD PTR [rsp+0x498],rax
   411fe:	xor    eax,eax
   41200:	test   r12b,r12b
   41203:	je     41238 <ssl_init+0x68>
   41205:	mov    rax,QWORD PTR [rsp+0x498]
   4120d:	xor    rax,QWORD PTR fs:0x28
   41216:	jne    41686 <ssl_init+0x4b6>
   4121c:	add    rsp,0x4a8
   41223:	mov    eax,r12d
   41226:	pop    rbx
   41227:	pop    rbp
   41228:	pop    r12
   4122a:	pop    r13
   4122c:	pop    r14
   4122e:	pop    r15
   41230:	ret    
   41231:	nop    DWORD PTR [rax+0x0]
   41238:	call   c160 <gnutls_global_init@plt>
   4123d:	lea    rdi,[rip+0x48c94]        # 89ed8 <credentials>
   41244:	call   c410 <gnutls_certificate_allocate_credentials@plt>
   41249:	mov    rdi,QWORD PTR [rip+0x48c88]        # 89ed8 <credentials>
   41250:	xor    esi,esi
   41252:	call   c670 <gnutls_certificate_set_verify_flags@plt>
   41257:	mov    rbx,QWORD PTR [rip+0x490ca]        # 8a328 <opt+0x2a8>
   4125e:	test   rbx,rbx
   41261:	je     415d0 <ssl_init+0x400>
   41267:	mov    rdi,rbx
   4126a:	call   c340 <opendir@plt>
   4126f:	mov    rbp,rax
   41272:	test   rax,rax
   41275:	je     41490 <ssl_init+0x2c0>
   4127b:	xor    edx,edx
   4127d:	xor    esi,esi
   4127f:	mov    edi,0xc4
   41284:	xor    r15d,r15d
   41287:	call   1d940 <hash_table_new>
   4128c:	lea    r13,[rsp+0x90]
   41294:	mov    r14,rax
   41297:	nop    WORD PTR [rax+rax*1+0x0]
   412a0:	mov    rdi,rbp
   412a3:	call   c3f0 <readdir@plt>
   412a8:	test   rax,rax
   412ab:	je     41350 <ssl_init+0x180>
   412b1:	sub    rsp,0x8
   412b5:	add    rax,0x13
   412b9:	mov    ecx,0x400
   412be:	mov    r9,rbx
   412c1:	push   rax
   412c2:	mov    edx,0x1
   412c7:	lea    r8,[rip+0x1a92d]        # 5bbfb <_IO_stdin_used+0xbfb>
   412ce:	mov    rdi,r13
   412d1:	mov    esi,0x400
   412d6:	xor    eax,eax
   412d8:	call   c9d0 <__snprintf_chk@plt>
   412dd:	pop    rdx
   412de:	pop    rcx
   412df:	cmp    eax,0x3ff
   412e4:	ja     412a0 <ssl_init+0xd0>
   412e6:	mov    rdx,rsp
   412e9:	mov    rsi,r13
   412ec:	mov    edi,0x1
   412f1:	call   c350 <__xstat@plt>
   412f6:	test   eax,eax
   412f8:	jne    412a0 <ssl_init+0xd0>
   412fa:	mov    eax,DWORD PTR [rsp+0x18]
   412fe:	and    eax,0xf000
   41303:	cmp    eax,0x8000
   41308:	jne    412a0 <ssl_init+0xd0>
   4130a:	mov    rsi,QWORD PTR [rsp+0x8]
   4130f:	mov    rdi,r14
   41312:	call   1dbf0 <hash_table_contains>
   41317:	test   eax,eax
   41319:	jne    412a0 <ssl_init+0xd0>
   4131b:	mov    rsi,QWORD PTR [rsp+0x8]
   41320:	xor    edx,edx
   41322:	mov    rdi,r14
   41325:	call   1dc80 <hash_table_put>
   4132a:	mov    rdi,QWORD PTR [rip+0x48ba7]        # 89ed8 <credentials>
   41331:	mov    edx,0x1
   41336:	mov    rsi,r13
   41339:	call   c6d0 <gnutls_certificate_set_x509_trust_file@plt>
   4133e:	test   eax,eax
   41340:	jle    41648 <ssl_init+0x478>
   41346:	add    r15d,eax
   41349:	jmp    412a0 <ssl_init+0xd0>
   4134e:	xchg   ax,ax
   41350:	mov    rdi,r14
   41353:	call   1da40 <hash_table_destroy>
   41358:	mov    rdi,rbp
   4135b:	call   c940 <closedir@plt>
   41360:	mov    rsi,QWORD PTR [rip+0x48fc9]        # 8a330 <opt+0x2b0>
   41367:	test   rsi,rsi
   4136a:	je     413b4 <ssl_init+0x1e4>
   4136c:	mov    rdi,QWORD PTR [rip+0x48b65]        # 89ed8 <credentials>
   41373:	mov    edx,0x1
   41378:	call   c6d0 <gnutls_certificate_set_x509_trust_file@plt>
   4137d:	mov    r13d,eax
   41380:	test   eax,eax
   41382:	jle    414e0 <ssl_init+0x310>
   41388:	mov    r13,QWORD PTR [rip+0x48fa1]        # 8a330 <opt+0x2b0>
   4138f:	mov    edx,0x5
   41394:	lea    rsi,[rip+0x2d7aa]        # 6eb45 <CSWTCH.5+0x305>
   4139b:	xor    edi,edi
   4139d:	add    r15d,eax
   413a0:	call   c780 <dcgettext@plt>
   413a5:	mov    rdx,r13
   413a8:	xor    edi,edi
   413aa:	mov    rsi,rax
   413ad:	xor    eax,eax
   413af:	call   2e0a0 <logprintf>
   413b4:	mov    rsi,QWORD PTR [rip+0x48f7d]        # 8a338 <opt+0x2b8>
   413bb:	test   rsi,rsi
   413be:	je     41405 <ssl_init+0x235>
   413c0:	mov    rdi,QWORD PTR [rip+0x48b11]        # 89ed8 <credentials>
   413c7:	mov    edx,0x1
   413cc:	call   c5f0 <gnutls_certificate_set_x509_crl_file@plt>
   413d1:	mov    r13d,eax
   413d4:	test   eax,eax
   413d6:	jle    41558 <ssl_init+0x388>
   413dc:	mov    r12,QWORD PTR [rip+0x48f55]        # 8a338 <opt+0x2b8>
   413e3:	mov    edx,0x5
   413e8:	lea    rsi,[rip+0x2d772]        # 6eb61 <CSWTCH.5+0x321>
   413ef:	xor    edi,edi
   413f1:	call   c780 <dcgettext@plt>
   413f6:	xor    edi,edi
   413f8:	mov    rsi,rax
   413fb:	mov    rdx,r12
   413fe:	xor    eax,eax
   41400:	call   2e0a0 <logprintf>
   41405:	cmp    BYTE PTR [rip+0x48eaf],0x0        # 8a2bb <opt+0x23b>
   4140c:	jne    41670 <ssl_init+0x4a0>
   41412:	mov    r8,QWORD PTR [rip+0x48ef7]        # 8a310 <opt+0x290>
   41419:	mov    rdi,QWORD PTR [rip+0x48ef8]        # 8a318 <opt+0x298>
   41420:	test   r8,r8
   41423:	je     41590 <ssl_init+0x3c0>
   41429:	mov    eax,DWORD PTR [rip+0x48ef1]        # 8a320 <opt+0x2a0>
   4142f:	test   rdi,rdi
   41432:	je     41608 <ssl_init+0x438>
   41438:	cmp    DWORD PTR [rip+0x48ee6],eax        # 8a324 <opt+0x2a4>
   4143e:	jne    41518 <ssl_init+0x348>
   41444:	mov    ecx,0x1
   41449:	test   eax,eax
   4144b:	jne    41480 <ssl_init+0x2b0>
   4144d:	mov    rdx,QWORD PTR [rip+0x48ec4]        # 8a318 <opt+0x298>
   41454:	mov    rsi,QWORD PTR [rip+0x48eb5]        # 8a310 <opt+0x290>
   4145b:	mov    rdi,QWORD PTR [rip+0x48a76]        # 89ed8 <credentials>
   41462:	call   c920 <gnutls_certificate_set_x509_key_file@plt>
   41467:	mov    BYTE PTR [rip+0x48a62],0x1        # 89ed0 <ssl_initialized.13867>
   4146e:	mov    r12d,0x1
   41474:	jmp    41205 <ssl_init+0x35>
   41479:	nop    DWORD PTR [rax+0x0]
   41480:	cmp    eax,0x1
   41483:	jne    cc99 <ssl_init.cold>
   41489:	xor    ecx,ecx
   4148b:	jmp    4144d <ssl_init+0x27d>
   4148d:	nop    DWORD PTR [rax]
   41490:	mov    r13,QWORD PTR [rip+0x48e91]        # 8a328 <opt+0x2a8>
   41497:	xor    r15d,r15d
   4149a:	test   r13,r13
   4149d:	je     41360 <ssl_init+0x190>
   414a3:	cmp    BYTE PTR [r13+0x0],0x0
   414a8:	je     41360 <ssl_init+0x190>
   414ae:	xor    edi,edi
   414b0:	mov    edx,0x5
   414b5:	lea    rsi,[rip+0x2d84c]        # 6ed08 <CSWTCH.5+0x4c8>
   414bc:	call   c780 <dcgettext@plt>
   414c1:	mov    rdx,r13
   414c4:	mov    edi,0x1
   414c9:	mov    rsi,rax
   414cc:	xor    eax,eax
   414ce:	call   2e0a0 <logprintf>
   414d3:	jmp    41360 <ssl_init+0x190>
   414d8:	nop    DWORD PTR [rax+rax*1+0x0]
   414e0:	mov    r14,QWORD PTR [rip+0x48e49]        # 8a330 <opt+0x2b0>
   414e7:	xor    edi,edi
   414e9:	mov    edx,0x5
   414ee:	lea    rsi,[rip+0x2d863]        # 6ed58 <CSWTCH.5+0x518>
   414f5:	call   c780 <dcgettext@plt>
   414fa:	mov    ecx,r13d
   414fd:	mov    edi,0x1
   41502:	mov    rsi,rax
   41505:	mov    rdx,r14
   41508:	xor    eax,eax
   4150a:	call   2e0a0 <logprintf>
   4150f:	jmp    413b4 <ssl_init+0x1e4>
   41514:	nop    DWORD PTR [rax+0x0]
   41518:	mov    edx,0x5
   4151d:	lea    rsi,[rip+0x2d88c]        # 6edb0 <CSWTCH.5+0x570>
   41524:	xor    edi,edi
   41526:	call   c780 <dcgettext@plt>
   4152b:	mov    edi,0x1
   41530:	mov    rsi,rax
   41533:	xor    eax,eax
   41535:	call   2e0a0 <logprintf>
   4153a:	mov    eax,DWORD PTR [rip+0x48de4]        # 8a324 <opt+0x2a4>
   41540:	mov    ecx,0x1
   41545:	test   eax,eax
   41547:	je     4144d <ssl_init+0x27d>
   4154d:	jmp    41480 <ssl_init+0x2b0>
   41552:	nop    WORD PTR [rax+rax*1+0x0]
   41558:	mov    r14,QWORD PTR [rip+0x48dd9]        # 8a338 <opt+0x2b8>
   4155f:	xor    edi,edi
   41561:	mov    edx,0x5
   41566:	lea    rsi,[rip+0x2d813]        # 6ed80 <CSWTCH.5+0x540>
   4156d:	call   c780 <dcgettext@plt>
   41572:	mov    ecx,r13d
   41575:	mov    edi,0x1
   4157a:	mov    rsi,rax
   4157d:	mov    rdx,r14
   41580:	xor    eax,eax
   41582:	call   2e0a0 <logprintf>
   41587:	jmp    41205 <ssl_init+0x35>
   4158c:	nop    DWORD PTR [rax+0x0]
   41590:	test   rdi,rdi
   41593:	je     41467 <ssl_init+0x297>
   41599:	call   4ba50 <xstrdup>
   4159e:	mov    edx,DWORD PTR [rip+0x48d80]        # 8a324 <opt+0x2a4>
   415a4:	mov    QWORD PTR [rip+0x48d65],rax        # 8a310 <opt+0x290>
   415ab:	mov    DWORD PTR [rip+0x48d6f],edx        # 8a320 <opt+0x2a0>
   415b1:	test   rax,rax
   415b4:	je     41467 <ssl_init+0x297>
   415ba:	cmp    QWORD PTR [rip+0x48d56],0x0        # 8a318 <opt+0x298>
   415c2:	mov    eax,edx
   415c4:	jne    41444 <ssl_init+0x274>
   415ca:	jmp    41467 <ssl_init+0x297>
   415cf:	nop
   415d0:	mov    rdi,QWORD PTR [rip+0x48901]        # 89ed8 <credentials>
   415d7:	call   beb0 <gnutls_certificate_set_x509_system_trust@plt>
   415dc:	mov    r15d,eax
   415df:	test   eax,eax
   415e1:	jg     41360 <ssl_init+0x190>
   415e7:	mov    rbx,QWORD PTR [rip+0x48d3a]        # 8a328 <opt+0x2a8>
   415ee:	test   rbx,rbx
   415f1:	jne    41267 <ssl_init+0x97>
   415f7:	lea    rbx,[rip+0x2d538]        # 6eb36 <CSWTCH.5+0x2f6>
   415fe:	jmp    41267 <ssl_init+0x97>
   41603:	nop    DWORD PTR [rax+rax*1+0x0]
   41608:	mov    rdi,r8
   4160b:	call   4ba50 <xstrdup>
   41610:	cmp    QWORD PTR [rip+0x48cf8],0x0        # 8a310 <opt+0x290>
   41618:	mov    QWORD PTR [rip+0x48cf9],rax        # 8a318 <opt+0x298>
   4161f:	mov    rdx,rax
   41622:	mov    rdi,rax
   41625:	mov    eax,DWORD PTR [rip+0x48cf5]        # 8a320 <opt+0x2a0>
   4162b:	mov    DWORD PTR [rip+0x48cf3],eax        # 8a324 <opt+0x2a4>
   41631:	je     41590 <ssl_init+0x3c0>
   41637:	test   rdx,rdx
   4163a:	je     41467 <ssl_init+0x297>
   41640:	jmp    41438 <ssl_init+0x268>
   41645:	nop    DWORD PTR [rax]
   41648:	cmp    BYTE PTR [rip+0x48c6c],0x0        # 8a2bb <opt+0x23b>
   4164f:	je     412a0 <ssl_init+0xd0>
   41655:	mov    edx,eax
   41657:	mov    rsi,r13
   4165a:	lea    rdi,[rip+0x2d6cf]        # 6ed30 <CSWTCH.5+0x4f0>
   41661:	xor    eax,eax
   41663:	call   2e250 <debug_logprintf>
   41668:	jmp    412a0 <ssl_init+0xd0>
   4166d:	nop    DWORD PTR [rax]
   41670:	mov    esi,r15d
   41673:	lea    rdi,[rip+0x2d4fd]        # 6eb77 <CSWTCH.5+0x337>
   4167a:	xor    eax,eax
   4167c:	call   2e250 <debug_logprintf>
   41681:	jmp    41412 <ssl_init+0x242>
   41686:	call   c7b0 <__stack_chk_fail@plt>
   4168b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000041690 <ssl_cleanup>:
   41690:	endbr64 
   41694:	mov    rdi,QWORD PTR [rip+0x4883d]        # 89ed8 <credentials>
   4169b:	test   rdi,rdi
   4169e:	je     416b8 <ssl_cleanup+0x28>
   416a0:	sub    rsp,0x8
   416a4:	call   c7c0 <gnutls_certificate_free_credentials@plt>
   416a9:	add    rsp,0x8
   416ad:	jmp    c230 <gnutls_global_deinit@plt>
   416b2:	nop    WORD PTR [rax+rax*1+0x0]
   416b8:	jmp    c230 <gnutls_global_deinit@plt>
   416bd:	nop    DWORD PTR [rax]

00000000000416c0 <ssl_connect_wget>:
   416c0:	endbr64 
   416c4:	push   r13
   416c6:	push   r12
   416c8:	mov    r12,rsi
   416cb:	mov    esi,0x4002
   416d0:	push   rbp
   416d1:	mov    ebp,edi
   416d3:	push   rbx
   416d4:	mov    rbx,rdx
   416d7:	sub    rsp,0x28
   416db:	mov    rax,QWORD PTR fs:0x28
   416e4:	mov    QWORD PTR [rsp+0x18],rax
   416e9:	xor    eax,eax
   416eb:	lea    rdi,[rsp+0x10]
   416f0:	call   c320 <gnutls_init@plt>
   416f5:	mov    rdi,r12
   416f8:	call   1edf0 <is_valid_ip_address>
   416fd:	test   al,al
   416ff:	je     41860 <ssl_connect_wget+0x1a0>
   41705:	mov    rdx,QWORD PTR [rip+0x487cc]        # 89ed8 <credentials>
   4170c:	mov    rdi,QWORD PTR [rsp+0x10]
   41711:	mov    esi,0x1
   41716:	call   be50 <gnutls_credentials_set@plt>
   4171b:	mov    rdi,QWORD PTR [rsp+0x10]
   41720:	movsxd rsi,ebp
   41723:	call   cac0 <gnutls_transport_set_ptr@plt>
   41728:	mov    rsi,QWORD PTR [rip+0x48c31]        # 8a360 <opt+0x2e0>
   4172f:	test   rsi,rsi
   41732:	je     41898 <ssl_connect_wget+0x1d8>
   41738:	mov    rdi,QWORD PTR [rsp+0x10]
   4173d:	xor    edx,edx
   4173f:	call   c5e0 <gnutls_priority_set_direct@plt>
   41744:	test   eax,eax
   41746:	js     418e0 <ssl_connect_wget+0x220>
   4174c:	test   rbx,rbx
   4174f:	je     4179b <ssl_connect_wget+0xdb>
   41751:	mov    edi,DWORD PTR [rbx]
   41753:	call   f060 <fd_transport_context>
   41758:	mov    rdi,QWORD PTR [rsp+0x10]
   4175d:	mov    rbx,rax
   41760:	call   c3d0 <gnutls_session_is_resumed@plt>
   41765:	test   eax,eax
   41767:	jne    418c0 <ssl_connect_wget+0x200>
   4176d:	mov    rdi,QWORD PTR [rsp+0x10]
   41772:	test   rbx,rbx
   41775:	je     41857 <ssl_connect_wget+0x197>
   4177b:	mov    rax,QWORD PTR [rbx+0x8]
   4177f:	test   rax,rax
   41782:	je     41857 <ssl_connect_wget+0x197>
   41788:	mov    edx,DWORD PTR [rax+0x8]
   4178b:	mov    rsi,QWORD PTR [rax]
   4178e:	call   c970 <gnutls_session_set_data@plt>
   41793:	test   eax,eax
   41795:	jne    41828 <ssl_connect_wget+0x168>
   4179b:	mov    rdi,QWORD PTR [rsp+0x10]
   417a0:	xor    edx,edx
   417a2:	mov    esi,ebp
   417a4:	call   40970 <_do_handshake>
   417a9:	test   eax,eax
   417ab:	js     41852 <ssl_connect_wget+0x192>
   417b1:	mov    esi,0x218
   417b6:	mov    edi,0x1
   417bb:	call   4b9c0 <xcalloc>
   417c0:	mov    esi,0x10
   417c5:	mov    edi,0x1
   417ca:	mov    r12,rax
   417cd:	call   4b9c0 <xcalloc>
   417d2:	mov    rdi,QWORD PTR [rsp+0x10]
   417d7:	mov    QWORD PTR [r12+0x8],rax
   417dc:	mov    rsi,rax
   417df:	mov    QWORD PTR [r12],rdi
   417e3:	call   c130 <gnutls_session_get_data2@plt>
   417e8:	test   eax,eax
   417ea:	jne    41910 <ssl_connect_wget+0x250>
   417f0:	mov    rdx,r12
   417f3:	lea    rsi,[rip+0x41be6]        # 833e0 <wgnutls_transport>
   417fa:	mov    edi,ebp
   417fc:	call   eff0 <fd_register_transport>
   41801:	mov    eax,0x1
   41806:	mov    rcx,QWORD PTR [rsp+0x18]
   4180b:	xor    rcx,QWORD PTR fs:0x28
   41814:	jne    41a2d <ssl_connect_wget+0x36d>
   4181a:	add    rsp,0x28
   4181e:	pop    rbx
   4181f:	pop    rbp
   41820:	pop    r12
   41822:	pop    r13
   41824:	ret    
   41825:	nop    DWORD PTR [rax]
   41828:	mov    rdi,QWORD PTR [rbx+0x8]
   4182c:	test   rdi,rdi
   4182f:	je     41852 <ssl_connect_wget+0x192>
   41831:	mov    r8,QWORD PTR [rdi]
   41834:	mov    rax,QWORD PTR [rip+0x41c6d]        # 834a8 <gnutls_free@@GNUTLS_3_4>
   4183b:	test   r8,r8
   4183e:	je     41850 <ssl_connect_wget+0x190>
   41840:	mov    rdi,r8
   41843:	call   rax
   41845:	mov    rax,QWORD PTR [rip+0x41c5c]        # 834a8 <gnutls_free@@GNUTLS_3_4>
   4184c:	mov    rdi,QWORD PTR [rbx+0x8]
   41850:	call   rax
   41852:	mov    rdi,QWORD PTR [rsp+0x10]
   41857:	call   c490 <gnutls_deinit@plt>
   4185c:	xor    eax,eax
   4185e:	jmp    41806 <ssl_connect_wget+0x146>
   41860:	mov    rdi,r12
   41863:	call   40920 <_sni_hostname>
   41868:	mov    rdi,rax
   4186b:	mov    r12,rax
   4186e:	call   c310 <strlen@plt>
   41873:	mov    rdi,QWORD PTR [rsp+0x10]
   41878:	mov    rdx,r12
   4187b:	mov    esi,0x1
   41880:	mov    rcx,rax
   41883:	call   c8e0 <gnutls_server_name_set@plt>
   41888:	mov    rdi,r12
   4188b:	call   4bdc0 <rpl_free>
   41890:	jmp    41705 <ssl_connect_wget+0x45>
   41895:	nop    DWORD PTR [rax]
   41898:	mov    r12d,DWORD PTR [rip+0x48a69]        # 8a308 <opt+0x288>
   4189f:	mov    r13,QWORD PTR [rsp+0x10]
   418a4:	cmp    r12d,0x7
   418a8:	ja     41a32 <ssl_connect_wget+0x372>
   418ae:	lea    rdx,[rip+0x2d93f]        # 6f1f4 <CSWTCH.5+0x9b4>
   418b5:	movsxd rax,DWORD PTR [rdx+r12*4]
   418b9:	add    rax,rdx
   418bc:	notrack jmp rax
   418bf:	nop
   418c0:	lea    rsi,[rip+0x2d639]        # 6ef00 <CSWTCH.5+0x6c0>
   418c7:	mov    edi,0x3
   418cc:	call   2de60 <logputs>
   418d1:	jmp    4179b <ssl_connect_wget+0xdb>
   418d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   418e0:	mov    edi,eax
   418e2:	call   c790 <gnutls_strerror@plt>
   418e7:	lea    rsi,[rip+0x2d232]        # 6eb20 <CSWTCH.5+0x2e0>
   418ee:	mov    edi,0x1
   418f3:	mov    rdx,rax
   418f6:	xor    eax,eax
   418f8:	call   2e0a0 <logprintf>
   418fd:	mov    rdi,QWORD PTR [rsp+0x10]
   41902:	call   c490 <gnutls_deinit@plt>
   41907:	xor    eax,eax
   41909:	jmp    41806 <ssl_connect_wget+0x146>
   4190e:	xchg   ax,ax
   41910:	mov    rdi,QWORD PTR [r12+0x8]
   41915:	call   4bdc0 <rpl_free>
   4191a:	mov    edx,ebp
   4191c:	lea    rsi,[rip+0x2d615]        # 6ef38 <CSWTCH.5+0x6f8>
   41923:	xor    eax,eax
   41925:	mov    QWORD PTR [r12+0x8],0x0
   4192e:	mov    edi,0x1
   41933:	call   2e0a0 <logprintf>
   41938:	jmp    417f0 <ssl_connect_wget+0x130>
   4193d:	nop    DWORD PTR [rax]
   41940:	xor    edx,edx
   41942:	lea    rsi,[rip+0x2d4af]        # 6edf8 <CSWTCH.5+0x5b8>
   41949:	mov    rdi,r13
   4194c:	call   c5e0 <gnutls_priority_set_direct@plt>
   41951:	jmp    41744 <ssl_connect_wget+0x84>
   41956:	nop    WORD PTR cs:[rax+rax*1+0x0]
   41960:	xor    edx,edx
   41962:	lea    rsi,[rip+0x2d227]        # 6eb90 <CSWTCH.5+0x350>
   41969:	mov    rdi,r13
   4196c:	call   c5e0 <gnutls_priority_set_direct@plt>
   41971:	jmp    41744 <ssl_connect_wget+0x84>
   41976:	nop    WORD PTR cs:[rax+rax*1+0x0]
   41980:	xor    edx,edx
   41982:	lea    rsi,[rip+0x2d497]        # 6ee20 <CSWTCH.5+0x5e0>
   41989:	mov    rdi,r13
   4198c:	call   c5e0 <gnutls_priority_set_direct@plt>
   41991:	jmp    41744 <ssl_connect_wget+0x84>
   41996:	nop    WORD PTR cs:[rax+rax*1+0x0]
   419a0:	xor    edx,edx
   419a2:	lea    rsi,[rip+0x2d49f]        # 6ee48 <CSWTCH.5+0x608>
   419a9:	mov    rdi,r13
   419ac:	call   c5e0 <gnutls_priority_set_direct@plt>
   419b1:	jmp    41744 <ssl_connect_wget+0x84>
   419b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   419c0:	xor    edx,edx
   419c2:	lea    rsi,[rip+0x2d4af]        # 6ee78 <CSWTCH.5+0x638>
   419c9:	mov    rdi,r13
   419cc:	call   c5e0 <gnutls_priority_set_direct@plt>
   419d1:	jmp    41744 <ssl_connect_wget+0x84>
   419d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   419e0:	xor    edx,edx
   419e2:	lea    rsi,[rip+0x2d1bb]        # 6eba4 <CSWTCH.5+0x364>
   419e9:	mov    rdi,r13
   419ec:	call   c5e0 <gnutls_priority_set_direct@plt>
   419f1:	test   eax,eax
   419f3:	je     4174c <ssl_connect_wget+0x8c>
   419f9:	xor    edx,edx
   419fb:	lea    rsi,[rip+0x2d1b3]        # 6ebb5 <CSWTCH.5+0x375>
   41a02:	mov    rdi,r13
   41a05:	call   c5e0 <gnutls_priority_set_direct@plt>
   41a0a:	jmp    41744 <ssl_connect_wget+0x84>
   41a0f:	nop
   41a10:	mov    rdi,r13
   41a13:	call   c930 <gnutls_set_default_priority@plt>
   41a18:	mov    rdi,r13
   41a1b:	mov    DWORD PTR [rsp+0xc],eax
   41a1f:	call   c240 <gnutls_session_enable_compatibility_mode@plt>
   41a24:	mov    eax,DWORD PTR [rsp+0xc]
   41a28:	jmp    41744 <ssl_connect_wget+0x84>
   41a2d:	call   c7b0 <__stack_chk_fail@plt>
   41a32:	mov    edx,0x5
   41a37:	lea    rsi,[rip+0x2d482]        # 6eec0 <CSWTCH.5+0x680>
   41a3e:	xor    edi,edi
   41a40:	call   c780 <dcgettext@plt>
   41a45:	mov    edx,r12d
   41a48:	mov    edi,0x1
   41a4d:	mov    rsi,rax
   41a50:	xor    eax,eax
   41a52:	call   2e0a0 <logprintf>
   41a57:	mov    edx,0x5
   41a5c:	lea    rsi,[rip+0x24835]        # 66298 <primes.6089+0x1b8>
   41a63:	xor    edi,edi
   41a65:	call   c780 <dcgettext@plt>
   41a6a:	mov    edi,0x1
   41a6f:	mov    rsi,rax
   41a72:	xor    eax,eax
   41a74:	call   2e0a0 <logprintf>
   41a79:	call   bf50 <abort@plt>
   41a7e:	xchg   ax,ax

0000000000041a80 <ssl_check_certificate>:
   41a80:	endbr64 
   41a84:	push   r15
   41a86:	push   r14
   41a88:	push   r13
   41a8a:	push   r12
   41a8c:	push   rbp
   41a8d:	mov    rbp,rsi
   41a90:	push   rbx
   41a91:	sub    rsp,0x38
   41a95:	mov    rax,QWORD PTR fs:0x28
   41a9e:	mov    QWORD PTR [rsp+0x28],rax
   41aa3:	xor    eax,eax
   41aa5:	call   f060 <fd_transport_context>
   41aaa:	mov    edx,0x5
   41aaf:	mov    rbx,rax
   41ab2:	mov    eax,DWORD PTR [rip+0x48854]        # 8a30c <opt+0x28c>
   41ab8:	test   eax,eax
   41aba:	je     41bb0 <ssl_check_certificate+0x130>
   41ac0:	lea    rsi,[rip+0x2d107]        # 6ebce <CSWTCH.5+0x38e>
   41ac7:	xor    edi,edi
   41ac9:	call   c780 <dcgettext@plt>
   41ace:	mov    r13,rax
   41ad1:	mov    r14,QWORD PTR [rip+0x48868]        # 8a340 <opt+0x2c0>
   41ad8:	cmp    DWORD PTR [rip+0x4882d],0x2        # 8a30c <opt+0x28c>
   41adf:	sete   r12b
   41ae3:	test   r14,r14
   41ae6:	sete   al
   41ae9:	and    r12b,al
   41aec:	jne    41b88 <ssl_check_certificate+0x108>
   41af2:	mov    rdi,QWORD PTR [rbx]
   41af5:	mov    rsi,rsp
   41af8:	call   c290 <gnutls_certificate_verify_peers2@plt>
   41afd:	test   eax,eax
   41aff:	js     41fd0 <ssl_check_certificate+0x550>
   41b05:	mov    eax,DWORD PTR [rsp]
   41b08:	mov    r15d,0x1
   41b0e:	test   al,0x2
   41b10:	jne    41f00 <ssl_check_certificate+0x480>
   41b16:	test   al,0x40
   41b18:	jne    41ec0 <ssl_check_certificate+0x440>
   41b1e:	test   al,0x20
   41b20:	jne    41e80 <ssl_check_certificate+0x400>
   41b26:	test   al,0x80
   41b28:	jne    41e40 <ssl_check_certificate+0x3c0>
   41b2e:	test   ah,0x1
   41b31:	jne    41e00 <ssl_check_certificate+0x380>
   41b37:	test   ah,0x2
   41b3a:	jne    41dc0 <ssl_check_certificate+0x340>
   41b40:	test   ah,0x4
   41b43:	jne    41d80 <ssl_check_certificate+0x300>
   41b49:	mov    rdi,QWORD PTR [rbx]
   41b4c:	call   c150 <gnutls_certificate_type_get@plt>
   41b51:	cmp    eax,0x1
   41b54:	je     41bd0 <ssl_check_certificate+0x150>
   41b56:	xor    edi,edi
   41b58:	lea    rsi,[rip+0x2d0b0]        # 6ec0f <CSWTCH.5+0x3cf>
   41b5f:	mov    edx,0x5
   41b64:	call   c780 <dcgettext@plt>
   41b69:	mov    edi,0x1
   41b6e:	mov    rsi,rax
   41b71:	xor    eax,eax
   41b73:	call   2e0a0 <logprintf>
   41b78:	test   r14,r14
   41b7b:	jne    41b88 <ssl_check_certificate+0x108>
   41b7d:	cmp    DWORD PTR [rip+0x48788],0x1        # 8a30c <opt+0x28c>
   41b84:	setne  r12b
   41b88:	mov    rax,QWORD PTR [rsp+0x28]
   41b8d:	xor    rax,QWORD PTR fs:0x28
   41b96:	jne    42137 <ssl_check_certificate+0x6b7>
   41b9c:	add    rsp,0x38
   41ba0:	mov    eax,r12d
   41ba3:	pop    rbx
   41ba4:	pop    rbp
   41ba5:	pop    r12
   41ba7:	pop    r13
   41ba9:	pop    r14
   41bab:	pop    r15
   41bad:	ret    
   41bae:	xchg   ax,ax
   41bb0:	lea    rsi,[rip+0x2d01d]        # 6ebd4 <CSWTCH.5+0x394>
   41bb7:	xor    edi,edi
   41bb9:	call   c780 <dcgettext@plt>
   41bbe:	mov    r13,rax
   41bc1:	jmp    41ad1 <ssl_check_certificate+0x51>
   41bc6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   41bd0:	xor    edi,edi
   41bd2:	call   cbf0 <time@plt>
   41bd7:	lea    rdi,[rsp+0x8]
   41bdc:	mov    r13,rax
   41bdf:	call   c620 <gnutls_x509_crt_init@plt>
   41be4:	test   eax,eax
   41be6:	js     41f40 <ssl_check_certificate+0x4c0>
   41bec:	mov    rdi,QWORD PTR [rbx]
   41bef:	lea    rsi,[rsp+0x4]
   41bf4:	call   c520 <gnutls_certificate_get_peers@plt>
   41bf9:	mov    rsi,rax
   41bfc:	test   rax,rax
   41bff:	je     42110 <ssl_check_certificate+0x690>
   41c05:	mov    rdi,QWORD PTR [rsp+0x8]
   41c0a:	xor    edx,edx
   41c0c:	call   bf90 <gnutls_x509_crt_import@plt>
   41c11:	test   eax,eax
   41c13:	js     42020 <ssl_check_certificate+0x5a0>
   41c19:	mov    rdi,QWORD PTR [rsp+0x8]
   41c1e:	call   c200 <gnutls_x509_crt_get_activation_time@plt>
   41c23:	cmp    rax,r13
   41c26:	jg     420a0 <ssl_check_certificate+0x620>
   41c2c:	mov    rdi,QWORD PTR [rsp+0x8]
   41c31:	call   c470 <gnutls_x509_crt_get_expiration_time@plt>
   41c36:	cmp    rax,r13
   41c39:	jle    42070 <ssl_check_certificate+0x5f0>
   41c3f:	mov    rdi,rbp
   41c42:	call   40920 <_sni_hostname>
   41c47:	mov    rdi,QWORD PTR [rsp+0x8]
   41c4c:	mov    rsi,rax
   41c4f:	mov    rbp,rax
   41c52:	call   c800 <gnutls_x509_crt_check_hostname@plt>
   41c57:	test   eax,eax
   41c59:	je     420d0 <ssl_check_certificate+0x650>
   41c5f:	mov    rdi,rbp
   41c62:	call   4bdc0 <rpl_free>
   41c67:	mov    r13,QWORD PTR [rip+0x486d2]        # 8a340 <opt+0x2c0>
   41c6e:	mov    rbp,QWORD PTR [rsp+0x8]
   41c73:	mov    QWORD PTR [rsp+0x10],0x0
   41c7c:	mov    QWORD PTR [rsp+0x18],0x0
   41c85:	mov    QWORD PTR [rsp+0x20],0x0
   41c8e:	test   r13,r13
   41c91:	je     41d60 <ssl_check_certificate+0x2e0>
   41c97:	test   rbp,rbp
   41c9a:	je     41f99 <ssl_check_certificate+0x519>
   41ca0:	lea    rdi,[rsp+0x20]
   41ca5:	call   c7e0 <gnutls_pubkey_init@plt>
   41caa:	mov    rdi,QWORD PTR [rsp+0x20]
   41caf:	xor    edx,edx
   41cb1:	mov    rsi,rbp
   41cb4:	call   c1f0 <gnutls_pubkey_import_x509@plt>
   41cb9:	test   eax,eax
   41cbb:	js     41f80 <ssl_check_certificate+0x500>
   41cc1:	mov    rdi,QWORD PTR [rsp+0x20]
   41cc6:	xor    edx,edx
   41cc8:	xor    esi,esi
   41cca:	lea    rcx,[rsp+0x10]
   41ccf:	call   c500 <gnutls_pubkey_export@plt>
   41cd4:	cmp    eax,0xffffffcd
   41cd7:	jne    41f80 <ssl_check_certificate+0x500>
   41cdd:	mov    rdi,QWORD PTR [rsp+0x10]
   41ce2:	test   rdi,rdi
   41ce5:	je     41f80 <ssl_check_certificate+0x500>
   41ceb:	call   4b850 <xmalloc>
   41cf0:	mov    rdi,QWORD PTR [rsp+0x20]
   41cf5:	xor    esi,esi
   41cf7:	lea    rcx,[rsp+0x18]
   41cfc:	mov    rbp,rax
   41cff:	mov    rax,QWORD PTR [rsp+0x10]
   41d04:	mov    rdx,rbp
   41d07:	mov    QWORD PTR [rsp+0x18],rax
   41d0c:	call   c500 <gnutls_pubkey_export@plt>
   41d11:	test   eax,eax
   41d13:	js     41f82 <ssl_check_certificate+0x502>
   41d19:	mov    rdx,QWORD PTR [rsp+0x10]
   41d1e:	cmp    rdx,QWORD PTR [rsp+0x18]
   41d23:	jne    41f82 <ssl_check_certificate+0x502>
   41d29:	mov    rdi,r13
   41d2c:	mov    rsi,rbp
   41d2f:	call   3f380 <wg_pin_peer_pubkey>
   41d34:	mov    rdi,QWORD PTR [rsp+0x20]
   41d39:	mov    ebx,eax
   41d3b:	test   rdi,rdi
   41d3e:	jne    4213c <ssl_check_certificate+0x6bc>
   41d44:	mov    rdi,rbp
   41d47:	call   4bdc0 <rpl_free>
   41d4c:	test   bl,bl
   41d4e:	je     41f99 <ssl_check_certificate+0x519>
   41d54:	mov    rbp,QWORD PTR [rsp+0x8]
   41d59:	nop    DWORD PTR [rax+0x0]
   41d60:	mov    rdi,rbp
   41d63:	call   cad0 <gnutls_x509_crt_deinit@plt>
   41d68:	cmp    DWORD PTR [rip+0x4859d],0x1        # 8a30c <opt+0x28c>
   41d6f:	setne  r12b
   41d73:	or     r12d,r15d
   41d76:	jmp    41b88 <ssl_check_certificate+0x108>
   41d7b:	nop    DWORD PTR [rax+rax*1+0x0]
   41d80:	mov    rdi,rbp
   41d83:	call   4b5b0 <quote>
   41d88:	mov    edx,0x5
   41d8d:	lea    rsi,[rip+0x2d34c]        # 6f0e0 <CSWTCH.5+0x8a0>
   41d94:	xor    edi,edi
   41d96:	mov    r15,rax
   41d99:	call   c780 <dcgettext@plt>
   41d9e:	mov    rcx,r15
   41da1:	mov    rdx,r13
   41da4:	mov    edi,0x1
   41da9:	mov    rsi,rax
   41dac:	xor    eax,eax
   41dae:	xor    r15d,r15d
   41db1:	call   2e0a0 <logprintf>
   41db6:	jmp    41b49 <ssl_check_certificate+0xc9>
   41dbb:	nop    DWORD PTR [rax+rax*1+0x0]
   41dc0:	mov    rdi,rbp
   41dc3:	call   4b5b0 <quote>
   41dc8:	mov    edx,0x5
   41dcd:	lea    rsi,[rip+0x2d2d4]        # 6f0a8 <CSWTCH.5+0x868>
   41dd4:	xor    edi,edi
   41dd6:	mov    r15,rax
   41dd9:	call   c780 <dcgettext@plt>
   41dde:	mov    rcx,r15
   41de1:	mov    rdx,r13
   41de4:	mov    edi,0x1
   41de9:	mov    rsi,rax
   41dec:	xor    eax,eax
   41dee:	xor    r15d,r15d
   41df1:	call   2e0a0 <logprintf>
   41df6:	mov    eax,DWORD PTR [rsp]
   41df9:	jmp    41b40 <ssl_check_certificate+0xc0>
   41dfe:	xchg   ax,ax
   41e00:	mov    rdi,rbp
   41e03:	call   4b5b0 <quote>
   41e08:	mov    edx,0x5
   41e0d:	lea    rsi,[rip+0x2d24c]        # 6f060 <CSWTCH.5+0x820>
   41e14:	xor    edi,edi
   41e16:	mov    r15,rax
   41e19:	call   c780 <dcgettext@plt>
   41e1e:	mov    rcx,r15
   41e21:	mov    rdx,r13
   41e24:	mov    edi,0x1
   41e29:	mov    rsi,rax
   41e2c:	xor    eax,eax
   41e2e:	xor    r15d,r15d
   41e31:	call   2e0a0 <logprintf>
   41e36:	mov    eax,DWORD PTR [rsp]
   41e39:	jmp    41b37 <ssl_check_certificate+0xb7>
   41e3e:	xchg   ax,ax
   41e40:	mov    rdi,rbp
   41e43:	call   4b5b0 <quote>
   41e48:	mov    edx,0x5
   41e4d:	lea    rsi,[rip+0x2d1dc]        # 6f030 <CSWTCH.5+0x7f0>
   41e54:	xor    edi,edi
   41e56:	mov    r15,rax
   41e59:	call   c780 <dcgettext@plt>
   41e5e:	mov    rcx,r15
   41e61:	mov    rdx,r13
   41e64:	mov    edi,0x1
   41e69:	mov    rsi,rax
   41e6c:	xor    eax,eax
   41e6e:	xor    r15d,r15d
   41e71:	call   2e0a0 <logprintf>
   41e76:	mov    eax,DWORD PTR [rsp]
   41e79:	jmp    41b2e <ssl_check_certificate+0xae>
   41e7e:	xchg   ax,ax
   41e80:	mov    rdi,rbp
   41e83:	call   4b5b0 <quote>
   41e88:	mov    edx,0x5
   41e8d:	lea    rsi,[rip+0x2d16c]        # 6f000 <CSWTCH.5+0x7c0>
   41e94:	xor    edi,edi
   41e96:	mov    r15,rax
   41e99:	call   c780 <dcgettext@plt>
   41e9e:	mov    rcx,r15
   41ea1:	mov    rdx,r13
   41ea4:	mov    edi,0x1
   41ea9:	mov    rsi,rax
   41eac:	xor    eax,eax
   41eae:	xor    r15d,r15d
   41eb1:	call   2e0a0 <logprintf>
   41eb6:	mov    eax,DWORD PTR [rsp]
   41eb9:	jmp    41b26 <ssl_check_certificate+0xa6>
   41ebe:	xchg   ax,ax
   41ec0:	mov    rdi,rbp
   41ec3:	call   4b5b0 <quote>
   41ec8:	mov    edx,0x5
   41ecd:	lea    rsi,[rip+0x2d0f4]        # 6efc8 <CSWTCH.5+0x788>
   41ed4:	xor    edi,edi
   41ed6:	mov    r15,rax
   41ed9:	call   c780 <dcgettext@plt>
   41ede:	mov    rcx,r15
   41ee1:	mov    rdx,r13
   41ee4:	mov    edi,0x1
   41ee9:	mov    rsi,rax
   41eec:	xor    eax,eax
   41eee:	xor    r15d,r15d
   41ef1:	call   2e0a0 <logprintf>
   41ef6:	mov    eax,DWORD PTR [rsp]
   41ef9:	jmp    41b1e <ssl_check_certificate+0x9e>
   41efe:	xchg   ax,ax
   41f00:	mov    rdi,rbp
   41f03:	call   4b5b0 <quote>
   41f08:	mov    edx,0x5
   41f0d:	lea    rsi,[rip+0x2d084]        # 6ef98 <CSWTCH.5+0x758>
   41f14:	xor    edi,edi
   41f16:	mov    r15,rax
   41f19:	call   c780 <dcgettext@plt>
   41f1e:	mov    rcx,r15
   41f21:	mov    rdx,r13
   41f24:	mov    edi,0x1
   41f29:	mov    rsi,rax
   41f2c:	xor    eax,eax
   41f2e:	xor    r15d,r15d
   41f31:	call   2e0a0 <logprintf>
   41f36:	mov    eax,DWORD PTR [rsp]
   41f39:	jmp    41b16 <ssl_check_certificate+0x96>
   41f3e:	xchg   ax,ax
   41f40:	mov    edi,eax
   41f42:	call   c790 <gnutls_strerror@plt>
   41f47:	xor    edi,edi
   41f49:	mov    edx,0x5
   41f4e:	lea    rsi,[rip+0x2d1b3]        # 6f108 <CSWTCH.5+0x8c8>
   41f55:	mov    r13,rax
   41f58:	call   c780 <dcgettext@plt>
   41f5d:	mov    rdx,r13
   41f60:	mov    edi,0x1
   41f65:	mov    rsi,rax
   41f68:	xor    eax,eax
   41f6a:	call   2e0a0 <logprintf>
   41f6f:	test   r14,r14
   41f72:	jne    41b88 <ssl_check_certificate+0x108>
   41f78:	jmp    41b7d <ssl_check_certificate+0xfd>
   41f7d:	nop    DWORD PTR [rax]
   41f80:	xor    ebp,ebp
   41f82:	mov    rdi,QWORD PTR [rsp+0x20]
   41f87:	test   rdi,rdi
   41f8a:	je     41f91 <ssl_check_certificate+0x511>
   41f8c:	call   bff0 <gnutls_pubkey_deinit@plt>
   41f91:	mov    rdi,rbp
   41f94:	call   4bdc0 <rpl_free>
   41f99:	mov    edx,0x5
   41f9e:	xor    edi,edi
   41fa0:	lea    rsi,[rip+0x2d219]        # 6f1c0 <CSWTCH.5+0x980>
   41fa7:	call   c780 <dcgettext@plt>
   41fac:	mov    edi,0x3
   41fb1:	mov    rsi,rax
   41fb4:	xor    eax,eax
   41fb6:	call   2e0a0 <logprintf>
   41fbb:	mov    rdi,QWORD PTR [rsp+0x8]
   41fc0:	call   cad0 <gnutls_x509_crt_deinit@plt>
   41fc5:	jmp    41b88 <ssl_check_certificate+0x108>
   41fca:	nop    WORD PTR [rax+rax*1+0x0]
   41fd0:	mov    rsi,rbp
   41fd3:	mov    edi,0x7
   41fd8:	call   4b2b0 <quotearg_style>
   41fdd:	xor    edi,edi
   41fdf:	mov    edx,0x5
   41fe4:	lea    rsi,[rip+0x2cf85]        # 6ef70 <CSWTCH.5+0x730>
   41feb:	mov    r15,rax
   41fee:	call   c780 <dcgettext@plt>
   41ff3:	mov    rcx,r15
   41ff6:	mov    rdx,r13
   41ff9:	mov    edi,0x1
   41ffe:	mov    rsi,rax
   42001:	xor    eax,eax
   42003:	call   2e0a0 <logprintf>
   42008:	test   r14,r14
   4200b:	jne    41b88 <ssl_check_certificate+0x108>
   42011:	jmp    41b7d <ssl_check_certificate+0xfd>
   42016:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42020:	mov    edi,eax
   42022:	call   c790 <gnutls_strerror@plt>
   42027:	mov    edx,0x5
   4202c:	lea    rsi,[rip+0x2d105]        # 6f138 <CSWTCH.5+0x8f8>
   42033:	xor    edi,edi
   42035:	mov    r13,rax
   42038:	call   c780 <dcgettext@plt>
   4203d:	mov    rdx,r13
   42040:	mov    edi,0x1
   42045:	mov    rsi,rax
   42048:	xor    eax,eax
   4204a:	call   2e0a0 <logprintf>
   4204f:	mov    rdi,QWORD PTR [rsp+0x8]
   42054:	call   cad0 <gnutls_x509_crt_deinit@plt>
   42059:	test   r14,r14
   4205c:	jne    41b88 <ssl_check_certificate+0x108>
   42062:	xor    r15d,r15d
   42065:	jmp    41d68 <ssl_check_certificate+0x2e8>
   4206a:	nop    WORD PTR [rax+rax*1+0x0]
   42070:	mov    edx,0x5
   42075:	lea    rsi,[rip+0x2cb76]        # 6ebf2 <CSWTCH.5+0x3b2>
   4207c:	xor    edi,edi
   4207e:	xor    r15d,r15d
   42081:	call   c780 <dcgettext@plt>
   42086:	mov    edi,0x1
   4208b:	mov    rsi,rax
   4208e:	xor    eax,eax
   42090:	call   2e0a0 <logprintf>
   42095:	jmp    41c3f <ssl_check_certificate+0x1bf>
   4209a:	nop    WORD PTR [rax+rax*1+0x0]
   420a0:	mov    edx,0x5
   420a5:	lea    rsi,[rip+0x2d0ac]        # 6f158 <CSWTCH.5+0x918>
   420ac:	xor    edi,edi
   420ae:	xor    r15d,r15d
   420b1:	call   c780 <dcgettext@plt>
   420b6:	mov    edi,0x1
   420bb:	mov    rsi,rax
   420be:	xor    eax,eax
   420c0:	call   2e0a0 <logprintf>
   420c5:	jmp    41c2c <ssl_check_certificate+0x1ac>
   420ca:	nop    WORD PTR [rax+rax*1+0x0]
   420d0:	mov    rdi,rbp
   420d3:	xor    r15d,r15d
   420d6:	call   4b5b0 <quote>
   420db:	mov    edx,0x5
   420e0:	lea    rsi,[rip+0x2d0a1]        # 6f188 <CSWTCH.5+0x948>
   420e7:	xor    edi,edi
   420e9:	mov    r13,rax
   420ec:	call   c780 <dcgettext@plt>
   420f1:	mov    rdx,r13
   420f4:	mov    edi,0x1
   420f9:	mov    rsi,rax
   420fc:	xor    eax,eax
   420fe:	call   2e0a0 <logprintf>
   42103:	jmp    41c5f <ssl_check_certificate+0x1df>
   42108:	nop    DWORD PTR [rax+rax*1+0x0]
   42110:	xor    edi,edi
   42112:	mov    edx,0x5
   42117:	lea    rsi,[rip+0x2cabe]        # 6ebdc <CSWTCH.5+0x39c>
   4211e:	call   c780 <dcgettext@plt>
   42123:	mov    edi,0x1
   42128:	mov    rsi,rax
   4212b:	xor    eax,eax
   4212d:	call   2e0a0 <logprintf>
   42132:	jmp    4204f <ssl_check_certificate+0x5cf>
   42137:	call   c7b0 <__stack_chk_fail@plt>
   4213c:	call   bff0 <gnutls_pubkey_deinit@plt>
   42141:	jmp    41d44 <ssl_check_certificate+0x2c4>
   42146:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000042150 <setup_des_key>:
   42150:	sub    rsp,0x18
   42154:	movzx  edx,BYTE PTR [rdi+0x1]
   42158:	mov    r8,rsi
   4215b:	mov    rax,QWORD PTR fs:0x28
   42164:	mov    QWORD PTR [rsp+0x8],rax
   42169:	xor    eax,eax
   4216b:	movzx  eax,BYTE PTR [rdi]
   4216e:	mov    rsi,rsp
   42171:	mov    ecx,edx
   42173:	shl    edx,0x6
   42176:	shr    cl,1
   42178:	mov    BYTE PTR [rsp],al
   4217b:	shl    eax,0x7
   4217e:	or     eax,ecx
   42180:	mov    BYTE PTR [rsp+0x1],al
   42184:	movzx  eax,BYTE PTR [rdi+0x2]
   42188:	mov    ecx,eax
   4218a:	shl    eax,0x5
   4218d:	shr    cl,0x2
   42190:	or     edx,ecx
   42192:	mov    BYTE PTR [rsp+0x2],dl
   42196:	movzx  edx,BYTE PTR [rdi+0x3]
   4219a:	mov    ecx,edx
   4219c:	shl    edx,0x4
   4219f:	shr    cl,0x3
   421a2:	or     eax,ecx
   421a4:	mov    BYTE PTR [rsp+0x3],al
   421a8:	movzx  eax,BYTE PTR [rdi+0x4]
   421ac:	mov    ecx,eax
   421ae:	shl    eax,0x3
   421b1:	shr    cl,0x4
   421b4:	or     edx,ecx
   421b6:	mov    BYTE PTR [rsp+0x4],dl
   421ba:	movzx  edx,BYTE PTR [rdi+0x5]
   421be:	mov    ecx,edx
   421c0:	shl    edx,0x2
   421c3:	shr    cl,0x5
   421c6:	or     eax,ecx
   421c8:	mov    BYTE PTR [rsp+0x5],al
   421cc:	movzx  eax,BYTE PTR [rdi+0x6]
   421d0:	mov    rdi,r8
   421d3:	mov    ecx,eax
   421d5:	add    eax,eax
   421d7:	shr    cl,0x6
   421da:	mov    BYTE PTR [rsp+0x7],al
   421de:	or     edx,ecx
   421e0:	mov    BYTE PTR [rsp+0x6],dl
   421e4:	call   ca40 <nettle_des_set_key@plt>
   421e9:	mov    rax,QWORD PTR [rsp+0x8]
   421ee:	xor    rax,QWORD PTR fs:0x28
   421f7:	jne    421fe <setup_des_key+0xae>
   421f9:	add    rsp,0x18
   421fd:	ret    
   421fe:	call   c7b0 <__stack_chk_fail@plt>
   42203:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4220e:	xchg   ax,ax

0000000000042210 <calc_resp>:
   42210:	push   r13
   42212:	mov    r13,rsi
   42215:	push   r12
   42217:	push   rbp
   42218:	mov    rbp,rdi
   4221b:	push   rbx
   4221c:	mov    rbx,rdx
   4221f:	sub    rsp,0x98
   42226:	mov    rax,QWORD PTR fs:0x28
   4222f:	mov    QWORD PTR [rsp+0x88],rax
   42237:	xor    eax,eax
   42239:	mov    r12,rsp
   4223c:	mov    rsi,r12
   4223f:	call   42150 <setup_des_key>
   42244:	mov    rcx,r13
   42247:	mov    rdx,rbx
   4224a:	mov    esi,0x8
   4224f:	mov    rdi,r12
   42252:	call   c250 <nettle_des_encrypt@plt>
   42257:	lea    rdi,[rbp+0x7]
   4225b:	mov    rsi,r12
   4225e:	call   42150 <setup_des_key>
   42263:	lea    rdx,[rbx+0x8]
   42267:	mov    rcx,r13
   4226a:	mov    rdi,r12
   4226d:	mov    esi,0x8
   42272:	call   c250 <nettle_des_encrypt@plt>
   42277:	lea    rdi,[rbp+0xe]
   4227b:	mov    rsi,r12
   4227e:	call   42150 <setup_des_key>
   42283:	lea    rdx,[rbx+0x10]
   42287:	mov    rcx,r13
   4228a:	mov    rdi,r12
   4228d:	mov    esi,0x8
   42292:	call   c250 <nettle_des_encrypt@plt>
   42297:	mov    rax,QWORD PTR [rsp+0x88]
   4229f:	xor    rax,QWORD PTR fs:0x28
   422a8:	jne    422b8 <calc_resp+0xa8>
   422aa:	add    rsp,0x98
   422b1:	pop    rbx
   422b2:	pop    rbp
   422b3:	pop    r12
   422b5:	pop    r13
   422b7:	ret    
   422b8:	call   c7b0 <__stack_chk_fail@plt>
   422bd:	nop    DWORD PTR [rax]

00000000000422c0 <ntlm_input>:
   422c0:	endbr64 
   422c4:	push   rbp
   422c5:	mov    rax,rsi
   422c8:	push   rbx
   422c9:	mov    rbx,rdi
   422cc:	lea    rdi,[rip+0x2526b]        # 6753e <primes.6089+0x145e>
   422d3:	sub    rsp,0x48
   422d7:	mov    rcx,QWORD PTR fs:0x28
   422e0:	mov    QWORD PTR [rsp+0x38],rcx
   422e5:	xor    ecx,ecx
   422e7:	mov    ecx,0x4
   422ec:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   422ee:	seta   dl
   422f1:	sbb    dl,0x0
   422f4:	xor    r8d,r8d
   422f7:	test   dl,dl
   422f9:	jne    42347 <ntlm_input+0x87>
   422fb:	lea    rbp,[rax+0x4]
   422ff:	movzx  eax,BYTE PTR [rax+0x4]
   42303:	test   al,al
   42305:	je     42378 <ntlm_input+0xb8>
   42307:	cmp    al,0xd
   42309:	jg     42368 <ntlm_input+0xa8>
   4230b:	cmp    al,0x8
   4230d:	jg     4236c <ntlm_input+0xac>
   4230f:	cmp    BYTE PTR [rip+0x47fa5],0x0        # 8a2bb <opt+0x23b>
   42316:	jne    42428 <ntlm_input+0x168>
   4231c:	mov    rsi,rsp
   4231f:	mov    edx,0x30
   42324:	mov    rdi,rbp
   42327:	call   3ed60 <wget_base64_decode>
   4232c:	test   rax,rax
   4232f:	js     42400 <ntlm_input+0x140>
   42335:	mov    DWORD PTR [rbx],0x2
   4233b:	cmp    rax,0x2f
   4233f:	jg     423b0 <ntlm_input+0xf0>
   42341:	mov    r8d,0x1
   42347:	mov    rax,QWORD PTR [rsp+0x38]
   4234c:	xor    rax,QWORD PTR fs:0x28
   42355:	jne    42463 <ntlm_input+0x1a3>
   4235b:	add    rsp,0x48
   4235f:	mov    eax,r8d
   42362:	pop    rbx
   42363:	pop    rbp
   42364:	ret    
   42365:	nop    DWORD PTR [rax]
   42368:	cmp    al,0x20
   4236a:	jne    4230f <ntlm_input+0x4f>
   4236c:	movzx  eax,BYTE PTR [rbp+0x1]
   42370:	add    rbp,0x1
   42374:	test   al,al
   42376:	jne    42307 <ntlm_input+0x47>
   42378:	mov    eax,DWORD PTR [rbx]
   4237a:	movzx  r8d,BYTE PTR [rip+0x47f39]        # 8a2bb <opt+0x23b>
   42382:	cmp    eax,0x4
   42385:	je     423c0 <ntlm_input+0x100>
   42387:	cmp    eax,0x3
   4238a:	je     42410 <ntlm_input+0x150>
   42390:	test   eax,eax
   42392:	jne    423e0 <ntlm_input+0x120>
   42394:	test   r8b,r8b
   42397:	jne    42440 <ntlm_input+0x180>
   4239d:	mov    DWORD PTR [rbx],0x1
   423a3:	mov    r8d,0x1
   423a9:	jmp    42347 <ntlm_input+0x87>
   423ab:	nop    DWORD PTR [rax+rax*1+0x0]
   423b0:	mov    rax,QWORD PTR [rsp+0x18]
   423b5:	mov    QWORD PTR [rbx+0x4],rax
   423b9:	jmp    42341 <ntlm_input+0x81>
   423bb:	nop    DWORD PTR [rax+rax*1+0x0]
   423c0:	test   r8b,r8b
   423c3:	je     4239d <ntlm_input+0xdd>
   423c5:	lea    rdi,[rip+0x2ce48]        # 6f214 <CSWTCH.5+0x9d4>
   423cc:	xor    eax,eax
   423ce:	call   2e250 <debug_logprintf>
   423d3:	movzx  r8d,BYTE PTR [rip+0x47ee0]        # 8a2bb <opt+0x23b>
   423db:	jmp    42394 <ntlm_input+0xd4>
   423dd:	nop    DWORD PTR [rax]
   423e0:	test   r8b,r8b
   423e3:	je     42347 <ntlm_input+0x87>
   423e9:	lea    rdi,[rip+0x2ce80]        # 6f270 <CSWTCH.5+0xa30>
   423f0:	xor    eax,eax
   423f2:	call   2e250 <debug_logprintf>
   423f7:	nop    WORD PTR [rax+rax*1+0x0]
   42400:	xor    r8d,r8d
   42403:	jmp    42347 <ntlm_input+0x87>
   42408:	nop    DWORD PTR [rax+rax*1+0x0]
   42410:	test   r8b,r8b
   42413:	jne    42453 <ntlm_input+0x193>
   42415:	mov    DWORD PTR [rbx],0x0
   4241b:	xor    r8d,r8d
   4241e:	jmp    42347 <ntlm_input+0x87>
   42423:	nop    DWORD PTR [rax+rax*1+0x0]
   42428:	lea    rdi,[rip+0x2ce19]        # 6f248 <CSWTCH.5+0xa08>
   4242f:	xor    eax,eax
   42431:	call   2e250 <debug_logprintf>
   42436:	jmp    4231c <ntlm_input+0x5c>
   4243b:	nop    DWORD PTR [rax+rax*1+0x0]
   42440:	lea    rdi,[rip+0x2ce49]        # 6f290 <CSWTCH.5+0xa50>
   42447:	xor    eax,eax
   42449:	call   2e250 <debug_logprintf>
   4244e:	jmp    4239d <ntlm_input+0xdd>
   42453:	lea    rdi,[rip+0x2cdd0]        # 6f22a <CSWTCH.5+0x9ea>
   4245a:	xor    eax,eax
   4245c:	call   2e250 <debug_logprintf>
   42461:	jmp    42415 <ntlm_input+0x155>
   42463:	call   c7b0 <__stack_chk_fail@plt>
   42468:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000042470 <ntlm_output>:
   42470:	endbr64 
   42474:	push   r15
   42476:	push   r14
   42478:	push   r13
   4247a:	mov    r13,rdx
   4247d:	push   r12
   4247f:	push   rbp
   42480:	mov    rbp,rsi
   42483:	push   rbx
   42484:	mov    rbx,rcx
   42487:	sub    rsp,0x278
   4248e:	mov    rax,QWORD PTR fs:0x28
   42497:	mov    QWORD PTR [rsp+0x268],rax
   4249f:	xor    eax,eax
   424a1:	lea    rax,[rip+0x2bf6f]        # 6e417 <urlchr_table+0x877>
   424a8:	test   rsi,rsi
   424ab:	mov    BYTE PTR [rcx],0x0
   424ae:	cmove  rbp,rax
   424b2:	test   rdx,rdx
   424b5:	cmove  r13,rax
   424b9:	mov    eax,DWORD PTR [rdi]
   424bb:	cmp    eax,0x3
   424be:	je     429b0 <ntlm_output+0x540>
   424c4:	ja     42900 <ntlm_output+0x490>
   424ca:	cmp    eax,0x2
   424cd:	jne    42908 <ntlm_output+0x498>
   424d3:	cmp    BYTE PTR [rip+0x47de1],0x0        # 8a2bb <opt+0x23b>
   424da:	mov    r12,rdi
   424dd:	jne    42a80 <ntlm_output+0x610>
   424e3:	mov    esi,0x5c
   424e8:	mov    rdi,rbp
   424eb:	call   c6c0 <strchr@plt>
   424f0:	test   rax,rax
   424f3:	je     429c0 <ntlm_output+0x550>
   424f9:	mov    rcx,rax
   424fc:	add    rax,0x1
   42500:	sub    rcx,rbp
   42503:	mov    QWORD PTR [rsp+0x10],rax
   42508:	lea    rsi,[rcx+0x40]
   4250c:	mov    QWORD PTR [rsp+0x8],rcx
   42511:	mov    rax,rsi
   42514:	mov    QWORD PTR [rsp+0x18],rsi
   42519:	shr    rax,0x8
   4251d:	movsx  eax,al
   42520:	mov    DWORD PTR [rsp+0x2c],eax
   42524:	movsx  eax,sil
   42528:	mov    DWORD PTR [rsp+0x30],eax
   4252c:	mov    rax,rcx
   4252f:	shr    rax,0x8
   42533:	movsx  eax,al
   42536:	mov    DWORD PTR [rsp+0x34],eax
   4253a:	movsx  eax,cl
   4253d:	mov    DWORD PTR [rsp+0x40],eax
   42541:	mov    rdi,QWORD PTR [rsp+0x10]
   42546:	call   c310 <strlen@plt>
   4254b:	mov    rdi,r13
   4254e:	mov    QWORD PTR [rsp+0x20],rax
   42553:	lea    rax,[r12+0x4]
   42558:	mov    QWORD PTR [rsp],rax
   4255c:	call   c310 <strlen@plt>
   42561:	mov    r9d,0xe
   42567:	lea    rdi,[rsp+0xd2]
   4256f:	cmp    rax,0xe
   42573:	mov    rdx,rax
   42576:	cmovbe r9,rax
   4257a:	test   rax,rax
   4257d:	je     425c8 <ntlm_output+0x158>
   4257f:	xor    ecx,ecx
   42581:	lea    rdi,[rsp+0xd2]
   42589:	nop    DWORD PTR [rax+0x0]
   42590:	movsx  edx,BYTE PTR [r13+rcx*1+0x0]
   42596:	lea    r8d,[rdx-0x61]
   4259a:	lea    esi,[rdx-0x20]
   4259d:	cmp    r8d,0x1a
   425a1:	cmovb  edx,esi
   425a4:	mov    BYTE PTR [rdi+rcx*1],dl
   425a7:	add    rcx,0x1
   425ab:	cmp    r9,rcx
   425ae:	ja     42590 <ntlm_output+0x120>
   425b0:	test   rax,rax
   425b3:	mov    edx,0x1
   425b8:	cmovne rdx,r9
   425bc:	cmp    rdx,0xe
   425c0:	je     425d6 <ntlm_output+0x166>
   425c2:	nop    WORD PTR [rax+rax*1+0x0]
   425c8:	mov    BYTE PTR [rdi+rdx*1],0x0
   425cc:	add    rdx,0x1
   425d0:	cmp    rdx,0xe
   425d4:	jne    425c8 <ntlm_output+0x158>
   425d6:	lea    r15,[rsp+0x50]
   425db:	lea    r14,[rsp+0xe0]
   425e3:	mov    rsi,r15
   425e6:	call   42150 <setup_des_key>
   425eb:	mov    rdx,r14
   425ee:	mov    esi,0x8
   425f3:	mov    rdi,r15
   425f6:	lea    rcx,[rip+0x2cdcb]        # 6f3c8 <magic.6172>
   425fd:	call   c250 <nettle_des_encrypt@plt>
   42602:	lea    rdi,[rsp+0xd9]
   4260a:	mov    rsi,r15
   4260d:	call   42150 <setup_des_key>
   42612:	lea    rcx,[rip+0x2cdaf]        # 6f3c8 <magic.6172>
   42619:	mov    esi,0x8
   4261e:	mov    rdi,r15
   42621:	lea    rdx,[rsp+0xe8]
   42629:	call   c250 <nettle_des_encrypt@plt>
   4262e:	mov    rsi,QWORD PTR [rsp]
   42632:	mov    rdi,r14
   42635:	lea    rdx,[rsp+0x120]
   4263d:	mov    BYTE PTR [rsp+0xf4],0x0
   42645:	lea    r14,[rsp+0x160]
   4264d:	mov    DWORD PTR [rsp+0xf0],0x0
   42658:	call   42210 <calc_resp>
   4265d:	mov    rdi,r13
   42660:	call   c310 <strlen@plt>
   42665:	mov    esi,0x20
   4266a:	cmp    rax,0x20
   4266e:	cmovbe rsi,rax
   42672:	xor    edx,edx
   42674:	test   rax,rax
   42677:	je     42699 <ntlm_output+0x229>
   42679:	nop    DWORD PTR [rax+0x0]
   42680:	movzx  eax,BYTE PTR [r13+rdx*1+0x0]
   42686:	mov    BYTE PTR [r14+rdx*2+0x1],0x0
   4268c:	mov    BYTE PTR [r14+rdx*2],al
   42690:	add    rdx,0x1
   42694:	cmp    rsi,rdx
   42697:	ja     42680 <ntlm_output+0x210>
   42699:	mov    rdi,r15
   4269c:	mov    QWORD PTR [rsp+0x38],rsi
   426a1:	call   bea0 <nettle_md4_init@plt>
   426a6:	mov    rsi,QWORD PTR [rsp+0x38]
   426ab:	mov    rdi,r15
   426ae:	mov    rdx,r14
   426b1:	add    esi,esi
   426b3:	call   c140 <nettle_md4_update@plt>
   426b8:	lea    r8,[rsp+0x100]
   426c0:	mov    rdi,r15
   426c3:	mov    esi,0x10
   426c8:	mov    rdx,r8
   426cb:	mov    QWORD PTR [rsp+0x38],r8
   426d0:	call   c220 <nettle_md4_digest@plt>
   426d5:	mov    r8,QWORD PTR [rsp+0x38]
   426da:	mov    rsi,QWORD PTR [rsp]
   426de:	lea    rdx,[rsp+0x140]
   426e6:	mov    DWORD PTR [rsp+0x110],0x0
   426f1:	mov    rdi,r8
   426f4:	mov    BYTE PTR [rsp+0x114],0x0
   426fc:	call   42210 <calc_resp>
   42701:	mov    r15,QWORD PTR [rsp+0x20]
   42706:	mov    r11,QWORD PTR [rsp+0x18]
   4270b:	xor    r9d,r9d
   4270e:	sub    rsp,0x8
   42712:	lea    r8,[rip+0x2cc37]        # 6f350 <CSWTCH.5+0xb10>
   42719:	add    r11,r15
   4271c:	mov    rcx,r15
   4271f:	movsx  edx,r15b
   42723:	lea    r13,[r11+0x18]
   42727:	mov    rax,r11
   4272a:	movsx  esi,r11b
   4272e:	mov    BYTE PTR [rsp+0x4f],r11b
   42733:	shr    rax,0x8
   42737:	mov    rdi,r13
   4273a:	mov    QWORD PTR [rsp+0x8],r11
   4273f:	shr    rcx,0x8
   42743:	shr    rdi,0x8
   42747:	mov    BYTE PTR [rsp+0x40],al
   4274b:	movsx  eax,al
   4274e:	movsx  ecx,cl
   42751:	mov    QWORD PTR [rsp+0x50],rdi
   42756:	push   0x0
   42758:	push   0x0
   4275a:	push   0x0
   4275c:	push   0x0
   4275e:	push   0x0
   42760:	push   0x0
   42762:	push   0x0
   42764:	push   0x0
   42766:	push   0x0
   42768:	push   0x0
   4276a:	push   rax
   4276b:	push   rsi
   4276c:	push   0x0
   4276e:	push   0x0
   42770:	push   0x0
   42772:	push   0x0
   42774:	push   0x0
   42776:	push   0x0
   42778:	mov    r10d,DWORD PTR [rsp+0xc4]
   42780:	push   r10
   42782:	mov    r10d,DWORD PTR [rsp+0xd0]
   4278a:	push   r10
   4278c:	push   rcx
   4278d:	push   rdx
   4278e:	push   rcx
   4278f:	push   rdx
   42790:	push   0x0
   42792:	push   0x0
   42794:	push   0x0
   42796:	push   0x40
   42798:	mov    ecx,DWORD PTR [rsp+0x11c]
   4279f:	push   rcx
   427a0:	mov    edx,DWORD PTR [rsp+0x130]
   427a7:	push   rdx
   427a8:	push   rcx
   427a9:	mov    ecx,0x100
   427ae:	push   rdx
   427af:	movsx  edx,dil
   427b3:	mov    rdi,r14
   427b6:	push   0x0
   427b8:	push   0x0
   427ba:	push   rdx
   427bb:	movsx  edx,r13b
   427bf:	push   rdx
   427c0:	mov    edx,0x1
   427c5:	push   0x0
   427c7:	push   0x18
   427c9:	push   0x0
   427cb:	push   0x18
   427cd:	push   0x0
   427cf:	push   0x0
   427d1:	push   rax
   427d2:	xor    eax,eax
   427d4:	push   rsi
   427d5:	mov    esi,0x100
   427da:	push   0x0
   427dc:	push   0x18
   427de:	push   0x0
   427e0:	push   0x18
   427e2:	push   0x0
   427e4:	push   0x0
   427e6:	push   0x0
   427e8:	call   c9d0 <__snprintf_chk@plt>
   427ed:	xor    eax,eax
   427ef:	mov    WORD PTR [rsp+0x33e],ax
   427f7:	mov    rax,QWORD PTR [rsp+0x1a8]
   427ff:	add    rsp,0x1a0
   42806:	mov    r11,QWORD PTR [rsp]
   4280a:	lea    rax,[rax+r15*1+0x40]
   4280f:	xor    r15d,r15d
   42812:	cmp    rax,0xff
   42818:	ja     428d0 <ntlm_output+0x460>
   4281e:	mov    rdx,QWORD PTR [rsp+0x8]
   42823:	mov    ecx,0xc0
   42828:	mov    rsi,rbp
   4282b:	mov    QWORD PTR [rsp],r11
   4282f:	lea    rdi,[rsp+0x1a0]
   42837:	call   c170 <__memcpy_chk@plt>
   4283c:	mov    rdi,QWORD PTR [rsp+0x18]
   42841:	mov    rdx,QWORD PTR [rsp+0x20]
   42846:	mov    rsi,QWORD PTR [rsp+0x10]
   4284b:	add    rdi,r14
   4284e:	call   cb30 <memcpy@plt>
   42853:	mov    r11,QWORD PTR [rsp]
   42857:	cmp    r11,0xe7
   4285e:	jbe    42a20 <ntlm_output+0x5b0>
   42864:	movzx  eax,BYTE PTR [rsp+0x47]
   42869:	lea    rdx,[r11+0x2]
   4286d:	mov    QWORD PTR [rsp],r11
   42871:	movabs rcx,0xaaaaaaaaaaaaaaab
   4287b:	mov    BYTE PTR [rsp+0x198],al
   42882:	movzx  eax,BYTE PTR [rsp+0x38]
   42887:	mov    BYTE PTR [rsp+0x199],al
   4288e:	mov    rax,rdx
   42891:	mul    rcx
   42894:	shr    rdx,1
   42897:	lea    rdi,[rdx*4+0x6]
   4289f:	call   4b850 <xmalloc>
   428a4:	mov    r11,QWORD PTR [rsp]
   428a8:	mov    rdi,r14
   428ab:	mov    DWORD PTR [rax],0x4d4c544e
   428b1:	lea    rdx,[rax+0x5]
   428b5:	mov    r15,rax
   428b8:	mov    BYTE PTR [rax+0x4],0x20
   428bc:	mov    rsi,r11
   428bf:	call   3ec00 <wget_base64_encode>
   428c4:	mov    DWORD PTR [r12],0x3
   428cc:	mov    BYTE PTR [rbx],0x1
   428cf:	nop
   428d0:	mov    rax,QWORD PTR [rsp+0x268]
   428d8:	xor    rax,QWORD PTR fs:0x28
   428e1:	jne    42aab <ntlm_output+0x63b>
   428e7:	add    rsp,0x278
   428ee:	mov    rax,r15
   428f1:	pop    rbx
   428f2:	pop    rbp
   428f3:	pop    r12
   428f5:	pop    r13
   428f7:	pop    r14
   428f9:	pop    r15
   428fb:	ret    
   428fc:	nop    DWORD PTR [rax+0x0]
   42900:	xor    r15d,r15d
   42903:	cmp    eax,0x4
   42906:	jne    428d0 <ntlm_output+0x460>
   42908:	cmp    BYTE PTR [rip+0x479ac],0x0        # 8a2bb <opt+0x23b>
   4290f:	jne    42a98 <ntlm_output+0x628>
   42915:	lea    rbp,[rsp+0x160]
   4291d:	sub    rsp,0x8
   42921:	lea    rax,[rip+0x2baef]        # 6e417 <urlchr_table+0x877>
   42928:	xor    r9d,r9d
   4292b:	push   rax
   4292c:	lea    r8,[rip+0x2c9b5]        # 6f2e8 <CSWTCH.5+0xaa8>
   42933:	mov    ecx,0x100
   42938:	mov    rdi,rbp
   4293b:	push   rax
   4293c:	mov    edx,0x1
   42941:	mov    esi,0x100
   42946:	xor    eax,eax
   42948:	push   0x0
   4294a:	push   0x0
   4294c:	push   0x0
   4294e:	push   0x20
   42950:	push   0x0
   42952:	push   0x0
   42954:	push   0x0
   42956:	push   0x0
   42958:	push   0x0
   4295a:	push   0x0
   4295c:	push   0x0
   4295e:	push   0x20
   42960:	push   0x0
   42962:	push   0x0
   42964:	push   0x0
   42966:	push   0x0
   42968:	push   0x0
   4296a:	push   0x0
   4296c:	push   0x2
   4296e:	push   0x2
   42970:	push   0x0
   42972:	push   0x0
   42974:	push   0x0
   42976:	call   c9d0 <__snprintf_chk@plt>
   4297b:	add    rsp,0xd0
   42982:	mov    edi,0x32
   42987:	call   4b850 <xmalloc>
   4298c:	mov    esi,0x20
   42991:	mov    rdi,rbp
   42994:	mov    DWORD PTR [rax],0x4d4c544e
   4299a:	lea    rdx,[rax+0x5]
   4299e:	mov    r15,rax
   429a1:	mov    BYTE PTR [rax+0x4],0x20
   429a5:	call   3ec00 <wget_base64_encode>
   429aa:	jmp    428d0 <ntlm_output+0x460>
   429af:	nop
   429b0:	mov    BYTE PTR [rcx],0x1
   429b3:	xor    r15d,r15d
   429b6:	jmp    428d0 <ntlm_output+0x460>
   429bb:	nop    DWORD PTR [rax+rax*1+0x0]
   429c0:	mov    esi,0x2f
   429c5:	mov    rdi,rbp
   429c8:	call   c6c0 <strchr@plt>
   429cd:	test   rax,rax
   429d0:	jne    424f9 <ntlm_output+0x89>
   429d6:	mov    QWORD PTR [rsp+0x10],rbp
   429db:	lea    rbp,[rip+0x2ba35]        # 6e417 <urlchr_table+0x877>
   429e2:	mov    QWORD PTR [rsp+0x18],0x40
   429eb:	mov    DWORD PTR [rsp+0x40],0x0
   429f3:	mov    DWORD PTR [rsp+0x34],0x0
   429fb:	mov    DWORD PTR [rsp+0x30],0x40
   42a03:	mov    DWORD PTR [rsp+0x2c],0x0
   42a0b:	mov    QWORD PTR [rsp+0x8],0x0
   42a14:	jmp    42541 <ntlm_output+0xd1>
   42a19:	nop    DWORD PTR [rax+0x0]
   42a20:	movdqa xmm0,XMMWORD PTR [rsp+0x120]
   42a29:	mov    rax,QWORD PTR [rsp+0x130]
   42a31:	movups XMMWORD PTR [rsp+r11*1+0x160],xmm0
   42a3a:	mov    QWORD PTR [rsp+r11*1+0x170],rax
   42a42:	cmp    r13,0xe7
   42a49:	ja     42ab0 <ntlm_output+0x640>
   42a4b:	movdqa xmm1,XMMWORD PTR [rsp+0x140]
   42a54:	add    r11,0x30
   42a58:	mov    BYTE PTR [rsp+0x38],0x0
   42a5d:	mov    rax,QWORD PTR [rsp+0x150]
   42a65:	mov    BYTE PTR [rsp+0x47],r11b
   42a6a:	movups XMMWORD PTR [rsp+r13*1+0x160],xmm1
   42a73:	mov    QWORD PTR [rsp+r13*1+0x170],rax
   42a7b:	jmp    42864 <ntlm_output+0x3f4>
   42a80:	lea    rdi,[rip+0x2c8a1]        # 6f328 <CSWTCH.5+0xae8>
   42a87:	xor    eax,eax
   42a89:	call   2e250 <debug_logprintf>
   42a8e:	jmp    424e3 <ntlm_output+0x73>
   42a93:	nop    DWORD PTR [rax+rax*1+0x0]
   42a98:	lea    rdi,[rip+0x2c821]        # 6f2c0 <CSWTCH.5+0xa80>
   42a9f:	xor    eax,eax
   42aa1:	call   2e250 <debug_logprintf>
   42aa6:	jmp    42915 <ntlm_output+0x4a5>
   42aab:	call   c7b0 <__stack_chk_fail@plt>
   42ab0:	movzx  eax,BYTE PTR [rsp+0x48]
   42ab5:	mov    BYTE PTR [rsp+0x47],r13b
   42aba:	mov    r11,r13
   42abd:	mov    BYTE PTR [rsp+0x38],al
   42ac1:	jmp    42864 <ntlm_output+0x3f4>
   42ac6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000042ad0 <decode_8>:
   42ad0:	xor    r8d,r8d
   42ad3:	cmp    rsi,0x7
   42ad7:	jbe    42c29 <decode_8+0x159>
   42add:	movzx  esi,BYTE PTR [rdi]
   42ae0:	lea    rax,[rip+0x2c919]        # 6f400 <b32>
   42ae7:	movzx  esi,BYTE PTR [rax+rsi*1]
   42aeb:	test   sil,sil
   42aee:	js     42c29 <decode_8+0x159>
   42af4:	movzx  r9d,BYTE PTR [rdi+0x1]
   42af9:	movzx  r9d,BYTE PTR [rax+r9*1]
   42afe:	test   r9b,r9b
   42b01:	js     42c29 <decode_8+0x159>
   42b07:	cmp    QWORD PTR [rcx],0x0
   42b0b:	mov    r8,QWORD PTR [rdx]
   42b0e:	jne    42c50 <decode_8+0x180>
   42b14:	movzx  esi,BYTE PTR [rdi+0x2]
   42b18:	cmp    sil,0x3d
   42b1c:	je     42c30 <decode_8+0x160>
   42b22:	movzx  esi,BYTE PTR [rax+rsi*1]
   42b26:	test   sil,sil
   42b29:	js     42c3c <decode_8+0x16c>
   42b2f:	movzx  r10d,BYTE PTR [rdi+0x3]
   42b34:	movzx  r10d,BYTE PTR [rax+r10*1]
   42b39:	test   r10b,r10b
   42b3c:	js     42c3c <decode_8+0x16c>
   42b42:	cmp    QWORD PTR [rcx],0x0
   42b46:	je     42b67 <decode_8+0x97>
   42b48:	add    esi,esi
   42b4a:	shl    r9d,0x6
   42b4e:	add    r8,0x1
   42b52:	or     r9d,esi
   42b55:	mov    esi,r10d
   42b58:	sar    sil,0x4
   42b5c:	or     r9d,esi
   42b5f:	mov    BYTE PTR [r8-0x1],r9b
   42b63:	sub    QWORD PTR [rcx],0x1
   42b67:	movzx  esi,BYTE PTR [rdi+0x4]
   42b6b:	cmp    sil,0x3d
   42b6f:	je     42c70 <decode_8+0x1a0>
   42b75:	movzx  r9d,BYTE PTR [rax+rsi*1]
   42b7a:	test   r9b,r9b
   42b7d:	js     42c3c <decode_8+0x16c>
   42b83:	cmp    QWORD PTR [rcx],0x0
   42b87:	je     42ba2 <decode_8+0xd2>
   42b89:	mov    esi,r9d
   42b8c:	shl    r10d,0x4
   42b90:	add    r8,0x1
   42b94:	sar    sil,1
   42b97:	or     r10d,esi
   42b9a:	mov    BYTE PTR [r8-0x1],r10b
   42b9e:	sub    QWORD PTR [rcx],0x1
   42ba2:	movzx  esi,BYTE PTR [rdi+0x5]
   42ba6:	cmp    sil,0x3d
   42baa:	je     42c76 <decode_8+0x1a6>
   42bb0:	movzx  esi,BYTE PTR [rax+rsi*1]
   42bb4:	test   sil,sil
   42bb7:	js     42c3c <decode_8+0x16c>
   42bbd:	movzx  r10d,BYTE PTR [rdi+0x6]
   42bc2:	movzx  r10d,BYTE PTR [rax+r10*1]
   42bc7:	test   r10b,r10b
   42bca:	js     42c3c <decode_8+0x16c>
   42bcc:	cmp    QWORD PTR [rcx],0x0
   42bd0:	je     42bf2 <decode_8+0x122>
   42bd2:	shl    esi,0x2
   42bd5:	shl    r9d,0x7
   42bd9:	add    r8,0x1
   42bdd:	or     r9d,esi
   42be0:	mov    esi,r10d
   42be3:	sar    sil,0x3
   42be7:	or     r9d,esi
   42bea:	mov    BYTE PTR [r8-0x1],r9b
   42bee:	sub    QWORD PTR [rcx],0x1
   42bf2:	movzx  esi,BYTE PTR [rdi+0x7]
   42bf6:	cmp    sil,0x3d
   42bfa:	je     42c20 <decode_8+0x150>
   42bfc:	movzx  eax,BYTE PTR [rax+rsi*1]
   42c00:	test   al,al
   42c02:	js     42c3c <decode_8+0x16c>
   42c04:	cmp    QWORD PTR [rcx],0x0
   42c08:	je     42c20 <decode_8+0x150>
   42c0a:	shl    r10d,0x5
   42c0e:	add    r8,0x1
   42c12:	or     r10d,eax
   42c15:	mov    BYTE PTR [r8-0x1],r10b
   42c19:	sub    QWORD PTR [rcx],0x1
   42c1d:	nop    DWORD PTR [rax]
   42c20:	mov    QWORD PTR [rdx],r8
   42c23:	mov    r8d,0x1
   42c29:	mov    eax,r8d
   42c2c:	ret    
   42c2d:	nop    DWORD PTR [rax]
   42c30:	cmp    BYTE PTR [rdi+0x3],0x3d
   42c34:	jne    42c3c <decode_8+0x16c>
   42c36:	cmp    BYTE PTR [rdi+0x4],0x3d
   42c3a:	je     42c70 <decode_8+0x1a0>
   42c3c:	mov    QWORD PTR [rdx],r8
   42c3f:	xor    r8d,r8d
   42c42:	mov    eax,r8d
   42c45:	ret    
   42c46:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42c50:	mov    r10d,r9d
   42c53:	shl    esi,0x3
   42c56:	add    r8,0x1
   42c5a:	sar    r10b,0x2
   42c5e:	or     esi,r10d
   42c61:	mov    BYTE PTR [r8-0x1],sil
   42c65:	sub    QWORD PTR [rcx],0x1
   42c69:	jmp    42b14 <decode_8+0x44>
   42c6e:	xchg   ax,ax
   42c70:	cmp    BYTE PTR [rdi+0x5],0x3d
   42c74:	jne    42c3c <decode_8+0x16c>
   42c76:	cmp    BYTE PTR [rdi+0x6],0x3d
   42c7a:	jne    42c3c <decode_8+0x16c>
   42c7c:	cmp    BYTE PTR [rdi+0x7],0x3d
   42c80:	je     42c20 <decode_8+0x150>
   42c82:	jmp    42c3c <decode_8+0x16c>
   42c84:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   42c8f:	nop

0000000000042c90 <base32_encode>:
   42c90:	endbr64 
   42c94:	test   rcx,rcx
   42c97:	je     42f18 <base32_encode+0x288>
   42c9d:	test   rsi,rsi
   42ca0:	je     42f10 <base32_encode+0x280>
   42ca6:	movzx  r8d,BYTE PTR [rdi]
   42caa:	lea    r9,[rip+0x2c72f]        # 6f3e0 <b32str.3167>
   42cb1:	mov    eax,r8d
   42cb4:	shr    al,0x3
   42cb7:	and    eax,0x1f
   42cba:	movzx  eax,BYTE PTR [r9+rax*1]
   42cbf:	mov    BYTE PTR [rdx],al
   42cc1:	cmp    rcx,0x1
   42cc5:	je     42f18 <base32_encode+0x288>
   42ccb:	mov    rax,rdx
   42cce:	push   r15
   42cd0:	lea    r11,[rsi-0x1]
   42cd4:	lea    r10,[rsi-0x2]
   42cd8:	push   r14
   42cda:	xor    edx,edx
   42cdc:	push   r13
   42cde:	lea    r13,[rax+rcx*1]
   42ce2:	push   r12
   42ce4:	lea    r12,[rsi-0x5]
   42ce8:	push   rbp
   42ce9:	lea    rbp,[rsi-0x4]
   42ced:	push   rbx
   42cee:	lea    rbx,[rsi-0x3]
   42cf2:	jmp    42e49 <base32_encode+0x1b9>
   42cf7:	nop    WORD PTR [rax+rax*1+0x0]
   42d00:	movzx  esi,BYTE PTR [rdi+rdx*1+0x1]
   42d05:	mov    r14d,esi
   42d08:	shr    r14b,0x6
   42d0c:	add    r8d,r14d
   42d0f:	and    r8d,0x1f
   42d13:	movzx  r8d,BYTE PTR [r9+r8*1]
   42d18:	mov    BYTE PTR [rax+0x1],r8b
   42d1c:	cmp    rcx,0x2
   42d20:	je     42eab <base32_encode+0x21b>
   42d26:	mov    r8d,esi
   42d29:	shr    r8b,1
   42d2c:	and    r8d,0x1f
   42d30:	movzx  r8d,BYTE PTR [r9+r8*1]
   42d35:	mov    BYTE PTR [rax+0x2],r8b
   42d39:	cmp    rcx,0x3
   42d3d:	je     42eab <base32_encode+0x21b>
   42d43:	shl    esi,0x4
   42d46:	cmp    r10,rdx
   42d49:	je     42ec0 <base32_encode+0x230>
   42d4f:	movzx  r14d,BYTE PTR [rdi+rdx*1+0x2]
   42d55:	mov    r8d,r14d
   42d58:	shr    r8b,0x4
   42d5c:	add    esi,r8d
   42d5f:	mov    r8,r13
   42d62:	and    esi,0x1f
   42d65:	sub    r8,rax
   42d68:	movzx  esi,BYTE PTR [r9+rsi*1]
   42d6d:	mov    BYTE PTR [rax+0x3],sil
   42d71:	cmp    r8,0x4
   42d75:	je     42eab <base32_encode+0x21b>
   42d7b:	add    r14d,r14d
   42d7e:	cmp    rbx,rdx
   42d81:	je     42ee0 <base32_encode+0x250>
   42d87:	movzx  esi,BYTE PTR [rdi+rdx*1+0x3]
   42d8c:	mov    r15d,esi
   42d8f:	shr    r15b,0x7
   42d93:	add    r14d,r15d
   42d96:	and    r14d,0x1f
   42d9a:	movzx  r14d,BYTE PTR [r9+r14*1]
   42d9f:	mov    BYTE PTR [rax+0x4],r14b
   42da3:	cmp    r8,0x5
   42da7:	je     42eab <base32_encode+0x21b>
   42dad:	mov    r14d,esi
   42db0:	shr    r14b,0x2
   42db4:	and    r14d,0x1f
   42db8:	movzx  r14d,BYTE PTR [r9+r14*1]
   42dbd:	mov    BYTE PTR [rax+0x5],r14b
   42dc1:	cmp    rcx,0x6
   42dc5:	je     42eab <base32_encode+0x21b>
   42dcb:	shl    esi,0x3
   42dce:	cmp    rbp,rdx
   42dd1:	je     42ef8 <base32_encode+0x268>
   42dd7:	movzx  r14d,BYTE PTR [rdi+rdx*1+0x4]
   42ddd:	mov    r15d,r14d
   42de0:	shr    r15b,0x5
   42de4:	add    esi,r15d
   42de7:	and    esi,0x1f
   42dea:	movzx  esi,BYTE PTR [r9+rsi*1]
   42def:	mov    BYTE PTR [rax+0x6],sil
   42df3:	cmp    r8,0x7
   42df7:	je     42eab <base32_encode+0x21b>
   42dfd:	and    r14d,0x1f
   42e01:	add    rax,0x8
   42e05:	movzx  esi,BYTE PTR [r9+r14*1]
   42e0a:	mov    r14,rcx
   42e0d:	mov    BYTE PTR [rax-0x1],sil
   42e11:	sub    r14,0x8
   42e15:	je     42eab <base32_encode+0x21b>
   42e1b:	cmp    r12,rdx
   42e1e:	je     42f19 <base32_encode+0x289>
   42e24:	movzx  r8d,BYTE PTR [rdi+rdx*1+0x5]
   42e2a:	add    rdx,0x5
   42e2e:	mov    esi,r8d
   42e31:	shr    sil,0x3
   42e35:	and    esi,0x1f
   42e38:	movzx  esi,BYTE PTR [r9+rsi*1]
   42e3d:	mov    BYTE PTR [rax],sil
   42e40:	cmp    rcx,0x9
   42e44:	je     42eab <base32_encode+0x21b>
   42e46:	mov    rcx,r14
   42e49:	shl    r8d,0x2
   42e4d:	cmp    r11,rdx
   42e50:	jne    42d00 <base32_encode+0x70>
   42e56:	and    r8d,0x1c
   42e5a:	movzx  edx,BYTE PTR [r9+r8*1]
   42e5f:	mov    BYTE PTR [rax+0x1],dl
   42e62:	cmp    rcx,0x2
   42e66:	je     42eab <base32_encode+0x21b>
   42e68:	mov    BYTE PTR [rax+0x2],0x3d
   42e6c:	cmp    rcx,0x3
   42e70:	je     42eab <base32_encode+0x21b>
   42e72:	mov    BYTE PTR [rax+0x3],0x3d
   42e76:	cmp    rcx,0x4
   42e7a:	je     42eab <base32_encode+0x21b>
   42e7c:	mov    BYTE PTR [rax+0x4],0x3d
   42e80:	cmp    rcx,0x5
   42e84:	je     42eab <base32_encode+0x21b>
   42e86:	mov    BYTE PTR [rax+0x5],0x3d
   42e8a:	cmp    rcx,0x6
   42e8e:	je     42eab <base32_encode+0x21b>
   42e90:	mov    BYTE PTR [rax+0x6],0x3d
   42e94:	cmp    rcx,0x7
   42e98:	je     42eab <base32_encode+0x21b>
   42e9a:	mov    BYTE PTR [rax+0x7],0x3d
   42e9e:	lea    rdx,[rax+0x8]
   42ea2:	cmp    rcx,0x8
   42ea6:	je     42eab <base32_encode+0x21b>
   42ea8:	mov    BYTE PTR [rdx],0x0
   42eab:	pop    rbx
   42eac:	pop    rbp
   42ead:	pop    r12
   42eaf:	pop    r13
   42eb1:	pop    r14
   42eb3:	pop    r15
   42eb5:	ret    
   42eb6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   42ec0:	and    esi,0x1f
   42ec3:	movsxd rsi,esi
   42ec6:	movzx  edx,BYTE PTR [r9+rsi*1]
   42ecb:	mov    BYTE PTR [rax+0x3],dl
   42ece:	cmp    rcx,0x4
   42ed2:	jne    42e7c <base32_encode+0x1ec>
   42ed4:	pop    rbx
   42ed5:	pop    rbp
   42ed6:	pop    r12
   42ed8:	pop    r13
   42eda:	pop    r14
   42edc:	pop    r15
   42ede:	ret    
   42edf:	nop
   42ee0:	and    r14d,0x1e
   42ee4:	movzx  edx,BYTE PTR [r9+r14*1]
   42ee9:	mov    BYTE PTR [rax+0x4],dl
   42eec:	cmp    rcx,0x5
   42ef0:	je     42eab <base32_encode+0x21b>
   42ef2:	jmp    42e86 <base32_encode+0x1f6>
   42ef4:	nop    DWORD PTR [rax+0x0]
   42ef8:	and    esi,0x18
   42efb:	movzx  edx,BYTE PTR [r9+rsi*1]
   42f00:	mov    BYTE PTR [rax+0x6],dl
   42f03:	cmp    rcx,0x7
   42f07:	je     42eab <base32_encode+0x21b>
   42f09:	jmp    42e9a <base32_encode+0x20a>
   42f0b:	nop    DWORD PTR [rax+rax*1+0x0]
   42f10:	test   rcx,rcx
   42f13:	je     42f18 <base32_encode+0x288>
   42f15:	mov    BYTE PTR [rdx],0x0
   42f18:	ret    
   42f19:	mov    rdx,rax
   42f1c:	jmp    42ea8 <base32_encode+0x218>
   42f1e:	xchg   ax,ax

0000000000042f20 <base32_encode_alloc>:
   42f20:	endbr64 
   42f24:	push   r14
   42f26:	push   r13
   42f28:	push   r12
   42f2a:	movabs r12,0xcccccccccccccccd
   42f34:	push   rbp
   42f35:	push   rbx
   42f36:	mov    rbx,rdx
   42f39:	lea    rdx,[rsi+0x4]
   42f3d:	mov    rax,rdx
   42f40:	mul    r12
   42f43:	shr    rdx,0x2
   42f47:	lea    r12,[rdx*8+0x0]
   42f4f:	lea    r14,[r12+0x1]
   42f54:	cmp    rsi,r14
   42f57:	jbe    42f70 <base32_encode_alloc+0x50>
   42f59:	mov    QWORD PTR [rbx],0x0
   42f60:	xor    r12d,r12d
   42f63:	pop    rbx
   42f64:	mov    rax,r12
   42f67:	pop    rbp
   42f68:	pop    r12
   42f6a:	pop    r13
   42f6c:	pop    r14
   42f6e:	ret    
   42f6f:	nop
   42f70:	mov    r13,rdi
   42f73:	mov    rdi,r14
   42f76:	mov    rbp,rsi
   42f79:	call   c0e0 <malloc@plt>
   42f7e:	mov    QWORD PTR [rbx],rax
   42f81:	mov    rdx,rax
   42f84:	test   rax,rax
   42f87:	je     42fa3 <base32_encode_alloc+0x83>
   42f89:	mov    rcx,r14
   42f8c:	mov    rsi,rbp
   42f8f:	mov    rdi,r13
   42f92:	call   42c90 <base32_encode>
   42f97:	pop    rbx
   42f98:	mov    rax,r12
   42f9b:	pop    rbp
   42f9c:	pop    r12
   42f9e:	pop    r13
   42fa0:	pop    r14
   42fa2:	ret    
   42fa3:	mov    r12,r14
   42fa6:	jmp    42f63 <base32_encode_alloc+0x43>
   42fa8:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000042fb0 <isbase32>:
   42fb0:	endbr64 
   42fb4:	movzx  edi,dil
   42fb8:	lea    rax,[rip+0x2c441]        # 6f400 <b32>
   42fbf:	movzx  eax,BYTE PTR [rax+rdi*1]
   42fc3:	not    eax
   42fc5:	shr    al,0x7
   42fc8:	ret    
   42fc9:	nop    DWORD PTR [rax+0x0]

0000000000042fd0 <base32_decode_ctx_init>:
   42fd0:	endbr64 
   42fd4:	mov    DWORD PTR [rdi],0x0
   42fda:	ret    
   42fdb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000042fe0 <base32_decode_ctx>:
   42fe0:	endbr64 
   42fe4:	push   r15
   42fe6:	mov    r15,rdi
   42fe9:	push   r14
   42feb:	push   r13
   42fed:	push   r12
   42fef:	push   rbp
   42ff0:	push   rbx
   42ff1:	mov    rbx,rsi
   42ff4:	mov    rsi,rdx
   42ff7:	sub    rsp,0x38
   42ffb:	mov    r14,QWORD PTR [r8]
   42ffe:	mov    QWORD PTR [rsp+0x18],rcx
   43003:	mov    QWORD PTR [rsp+0x10],r8
   43008:	mov    rdi,QWORD PTR fs:0x28
   43011:	mov    QWORD PTR [rsp+0x28],rdi
   43016:	xor    edi,edi
   43018:	test   r15,r15
   4301b:	mov    QWORD PTR [rsp+0x20],r14
   43020:	setne  BYTE PTR [rsp+0xf]
   43025:	je     43238 <base32_decode_ctx+0x258>
   4302b:	mov    eax,DWORD PTR [r15]
   4302e:	test   rdx,rdx
   43031:	setne  r12b
   43035:	test   eax,eax
   43037:	sete   r13b
   4303b:	and    r13d,r12d
   4303e:	mov    BYTE PTR [rsp+0xe],r13b
   43043:	lea    rbp,[rsp+0x20]
   43048:	jmp    43092 <base32_decode_ctx+0xb2>
   4304a:	nop    WORD PTR [rax+rax*1+0x0]
   43050:	cmp    BYTE PTR [rbx],0xa
   43053:	je     43200 <base32_decode_ctx+0x220>
   43059:	sub    rdx,r14
   4305c:	mov    QWORD PTR [rsp+0x20],r14
   43061:	lea    r14,[rbx+rsi*1]
   43065:	add    QWORD PTR [rsp+0x18],rdx
   4306a:	test   r15,r15
   4306d:	jne    430cd <base32_decode_ctx+0xed>
   4306f:	mov    rdi,rbx
   43072:	lea    rdx,[rsp+0x18]
   43077:	mov    rcx,rbp
   4307a:	call   42ad0 <decode_8>
   4307f:	test   al,al
   43081:	je     43255 <base32_decode_ctx+0x275>
   43087:	mov    rsi,r14
   4308a:	mov    r14,QWORD PTR [rsp+0x20]
   4308f:	sub    rsi,rbx
   43092:	cmp    BYTE PTR [rsp+0xe],0x0
   43097:	mov    rdx,r14
   4309a:	jne    43180 <base32_decode_ctx+0x1a0>
   430a0:	test   rsi,rsi
   430a3:	sete   al
   430a6:	and    al,r12b
   430a9:	jne    43150 <base32_decode_ctx+0x170>
   430af:	test   rsi,rsi
   430b2:	jne    43050 <base32_decode_ctx+0x70>
   430b4:	sub    rdx,r14
   430b7:	mov    QWORD PTR [rsp+0x20],r14
   430bc:	add    QWORD PTR [rsp+0x18],rdx
   430c1:	test   r15,r15
   430c4:	je     43248 <base32_decode_ctx+0x268>
   430ca:	mov    r14,rbx
   430cd:	mov    eax,DWORD PTR [r15]
   430d0:	cmp    eax,0x8
   430d3:	je     431c0 <base32_decode_ctx+0x1e0>
   430d9:	test   eax,eax
   430db:	je     431c7 <base32_decode_ctx+0x1e7>
   430e1:	cmp    rbx,r14
   430e4:	jae    43117 <base32_decode_ctx+0x137>
   430e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   430f0:	movzx  ecx,BYTE PTR [rbx]
   430f3:	add    rbx,0x1
   430f7:	cmp    cl,0xa
   430fa:	je     43112 <base32_decode_ctx+0x132>
   430fc:	lea    edx,[rax+0x1]
   430ff:	mov    DWORD PTR [r15],edx
   43102:	mov    BYTE PTR [r15+rax*1+0x4],cl
   43107:	cmp    edx,0x8
   4310a:	je     431f0 <base32_decode_ctx+0x210>
   43110:	mov    eax,edx
   43112:	cmp    rbx,r14
   43115:	jne    430f0 <base32_decode_ctx+0x110>
   43117:	mov    esi,eax
   43119:	lea    rdi,[r15+0x4]
   4311d:	test   rsi,rsi
   43120:	je     43140 <base32_decode_ctx+0x160>
   43122:	cmp    rsi,0x7
   43126:	ja     43072 <base32_decode_ctx+0x92>
   4312c:	cmp    BYTE PTR [rsp+0xf],0x0
   43131:	je     43072 <base32_decode_ctx+0x92>
   43137:	test   r12b,r12b
   4313a:	je     43072 <base32_decode_ctx+0x92>
   43140:	mov    rdx,QWORD PTR [rsp+0x20]
   43145:	mov    eax,0x1
   4314a:	nop    WORD PTR [rax+rax*1+0x0]
   43150:	mov    rdi,QWORD PTR [rsp+0x10]
   43155:	sub    QWORD PTR [rdi],rdx
   43158:	mov    rdi,QWORD PTR [rsp+0x28]
   4315d:	xor    rdi,QWORD PTR fs:0x28
   43166:	jne    43270 <base32_decode_ctx+0x290>
   4316c:	add    rsp,0x38
   43170:	pop    rbx
   43171:	pop    rbp
   43172:	pop    r12
   43174:	pop    r13
   43176:	pop    r14
   43178:	pop    r15
   4317a:	ret    
   4317b:	nop    DWORD PTR [rax+rax*1+0x0]
   43180:	lea    r11,[rbx+rsi*1]
   43184:	lea    rdx,[rsp+0x18]
   43189:	jmp    43199 <base32_decode_ctx+0x1b9>
   4318b:	nop    DWORD PTR [rax+rax*1+0x0]
   43190:	mov    r14,QWORD PTR [rsp+0x20]
   43195:	add    rbx,0x8
   43199:	mov    r13,r11
   4319c:	mov    rcx,rbp
   4319f:	mov    rdi,rbx
   431a2:	sub    r13,rbx
   431a5:	mov    rsi,r13
   431a8:	call   42ad0 <decode_8>
   431ad:	test   al,al
   431af:	jne    43190 <base32_decode_ctx+0x1b0>
   431b1:	mov    rdx,QWORD PTR [rsp+0x20]
   431b6:	mov    rsi,r13
   431b9:	jmp    430a0 <base32_decode_ctx+0xc0>
   431be:	xchg   ax,ax
   431c0:	mov    DWORD PTR [r15],0x0
   431c7:	cmp    rsi,0x7
   431cb:	jle    431e4 <base32_decode_ctx+0x204>
   431cd:	mov    edx,0x8
   431d2:	mov    esi,0xa
   431d7:	mov    rdi,rbx
   431da:	call   bf70 <memchr@plt>
   431df:	test   rax,rax
   431e2:	je     4325f <base32_decode_ctx+0x27f>
   431e4:	mov    eax,DWORD PTR [r15]
   431e7:	jmp    430e1 <base32_decode_ctx+0x101>
   431ec:	nop    DWORD PTR [rax+0x0]
   431f0:	mov    eax,0x8
   431f5:	jmp    43117 <base32_decode_ctx+0x137>
   431fa:	nop    WORD PTR [rax+rax*1+0x0]
   43200:	test   r15,r15
   43203:	je     43218 <base32_decode_ctx+0x238>
   43205:	add    rbx,0x1
   43209:	sub    rsi,0x1
   4320d:	mov    r14,rdx
   43210:	jmp    43092 <base32_decode_ctx+0xb2>
   43215:	nop    DWORD PTR [rax]
   43218:	sub    rdx,r14
   4321b:	mov    QWORD PTR [rsp+0x20],r14
   43220:	mov    rdi,rbx
   43223:	lea    r14,[rbx+rsi*1]
   43227:	add    QWORD PTR [rsp+0x18],rdx
   4322c:	jmp    43122 <base32_decode_ctx+0x142>
   43231:	nop    DWORD PTR [rax+0x0]
   43238:	mov    BYTE PTR [rsp+0xe],0x1
   4323d:	mov    r12d,0x1
   43243:	jmp    43043 <base32_decode_ctx+0x63>
   43248:	mov    rdx,r14
   4324b:	mov    eax,0x1
   43250:	jmp    43150 <base32_decode_ctx+0x170>
   43255:	mov    rdx,QWORD PTR [rsp+0x20]
   4325a:	jmp    43150 <base32_decode_ctx+0x170>
   4325f:	mov    rdi,rbx
   43262:	mov    esi,0x8
   43267:	add    rbx,0x8
   4326b:	jmp    43072 <base32_decode_ctx+0x92>
   43270:	call   c7b0 <__stack_chk_fail@plt>
   43275:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000043280 <base32_decode_alloc_ctx>:
   43280:	endbr64 
   43284:	push   r14
   43286:	mov    r14,rsi
   43289:	push   r13
   4328b:	mov    r13,rdi
   4328e:	push   r12
   43290:	mov    r12,rdx
   43293:	push   rbp
   43294:	mov    rbp,r8
   43297:	push   rbx
   43298:	mov    rbx,rcx
   4329b:	sub    rsp,0x20
   4329f:	mov    rax,QWORD PTR fs:0x28
   432a8:	mov    QWORD PTR [rsp+0x18],rax
   432ad:	xor    eax,eax
   432af:	mov    rax,rdx
   432b2:	shr    rax,0x3
   432b6:	lea    rdi,[rax+rax*4+0x5]
   432bb:	mov    QWORD PTR [rsp+0x10],rdi
   432c0:	call   c0e0 <malloc@plt>
   432c5:	mov    QWORD PTR [rbx],rax
   432c8:	test   rax,rax
   432cb:	je     43318 <base32_decode_alloc_ctx+0x98>
   432cd:	mov    rcx,rax
   432d0:	lea    r8,[rsp+0x10]
   432d5:	mov    rdx,r12
   432d8:	mov    rsi,r14
   432db:	mov    rdi,r13
   432de:	call   42fe0 <base32_decode_ctx>
   432e3:	test   al,al
   432e5:	je     43320 <base32_decode_alloc_ctx+0xa0>
   432e7:	test   rbp,rbp
   432ea:	je     43318 <base32_decode_alloc_ctx+0x98>
   432ec:	mov    rdx,QWORD PTR [rsp+0x10]
   432f1:	mov    QWORD PTR [rbp+0x0],rdx
   432f5:	mov    rbx,QWORD PTR [rsp+0x18]
   432fa:	xor    rbx,QWORD PTR fs:0x28
   43303:	jne    4333a <base32_decode_alloc_ctx+0xba>
   43305:	add    rsp,0x20
   43309:	pop    rbx
   4330a:	pop    rbp
   4330b:	pop    r12
   4330d:	pop    r13
   4330f:	pop    r14
   43311:	ret    
   43312:	nop    WORD PTR [rax+rax*1+0x0]
   43318:	mov    eax,0x1
   4331d:	jmp    432f5 <base32_decode_alloc_ctx+0x75>
   4331f:	nop
   43320:	mov    rdi,QWORD PTR [rbx]
   43323:	mov    BYTE PTR [rsp+0xf],al
   43327:	call   4bdc0 <rpl_free>
   4332c:	mov    QWORD PTR [rbx],0x0
   43333:	movzx  eax,BYTE PTR [rsp+0xf]
   43338:	jmp    432f5 <base32_decode_alloc_ctx+0x75>
   4333a:	call   c7b0 <__stack_chk_fail@plt>
   4333f:	nop

0000000000043340 <c_strcasecmp>:
   43340:	endbr64 
   43344:	cmp    rdi,rsi
   43347:	je     433a0 <c_strcasecmp+0x60>
   43349:	push   rbx
   4334a:	xor    edx,edx
   4334c:	jmp    43371 <c_strcasecmp+0x31>
   4334e:	xchg   ax,ax
   43350:	add    eax,0x20
   43353:	add    r8d,0x20
   43357:	cmp    r10d,0x19
   4335b:	ja     43368 <c_strcasecmp+0x28>
   4335d:	lea    ebx,[r9+0x20]
   43361:	add    ecx,0x20
   43364:	test   eax,eax
   43366:	je     4339b <c_strcasecmp+0x5b>
   43368:	add    rdx,0x1
   4336c:	cmp    r8b,cl
   4336f:	jne    4339b <c_strcasecmp+0x5b>
   43371:	movzx  eax,BYTE PTR [rdi+rdx*1]
   43375:	movzx  r9d,BYTE PTR [rsi+rdx*1]
   4337a:	lea    r11d,[rax-0x41]
   4337e:	mov    r8d,eax
   43381:	mov    ecx,r9d
   43384:	mov    ebx,r9d
   43387:	lea    r10d,[r9-0x41]
   4338b:	cmp    r11d,0x19
   4338f:	jbe    43350 <c_strcasecmp+0x10>
   43391:	cmp    r10d,0x19
   43395:	jbe    4335d <c_strcasecmp+0x1d>
   43397:	test   eax,eax
   43399:	jne    43368 <c_strcasecmp+0x28>
   4339b:	sub    eax,ebx
   4339d:	pop    rbx
   4339e:	ret    
   4339f:	nop
   433a0:	xor    eax,eax
   433a2:	ret    
   433a3:	nop    WORD PTR cs:[rax+rax*1+0x0]
   433ad:	nop    DWORD PTR [rax]

00000000000433b0 <c_strncasecmp>:
   433b0:	endbr64 
   433b4:	cmp    rdi,rsi
   433b7:	je     43418 <c_strncasecmp+0x68>
   433b9:	test   rdx,rdx
   433bc:	je     43418 <c_strncasecmp+0x68>
   433be:	lea    r10,[rdx-0x1]
   433c2:	xor    edx,edx
   433c4:	jmp    433dd <c_strncasecmp+0x2d>
   433c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   433d0:	test   eax,eax
   433d2:	je     43411 <c_strncasecmp+0x61>
   433d4:	add    rdx,0x1
   433d8:	cmp    r8b,cl
   433db:	jne    43411 <c_strncasecmp+0x61>
   433dd:	movzx  eax,BYTE PTR [rdi+rdx*1]
   433e1:	lea    ecx,[rax-0x41]
   433e4:	mov    r8d,eax
   433e7:	cmp    ecx,0x19
   433ea:	ja     433f3 <c_strncasecmp+0x43>
   433ec:	add    eax,0x20
   433ef:	add    r8d,0x20
   433f3:	movzx  r9d,BYTE PTR [rsi+rdx*1]
   433f8:	lea    r11d,[r9-0x41]
   433fc:	mov    ecx,r9d
   433ff:	cmp    r11d,0x19
   43403:	ja     4340c <c_strncasecmp+0x5c>
   43405:	add    r9d,0x20
   43409:	add    ecx,0x20
   4340c:	cmp    rdx,r10
   4340f:	jne    433d0 <c_strncasecmp+0x20>
   43411:	sub    eax,r9d
   43414:	ret    
   43415:	nop    DWORD PTR [rax]
   43418:	xor    eax,eax
   4341a:	ret    
   4341b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000043420 <critical_factorization.part.0>:
   43420:	push   r13
   43422:	push   r12
   43424:	push   rbp
   43425:	push   rbx
   43426:	cmp    rsi,0x1
   4342a:	jbe    435b0 <critical_factorization.part.0+0x190>
   43430:	xor    ebx,ebx
   43432:	mov    r12d,0x1
   43438:	mov    r11d,0x1
   4343e:	mov    rax,0xffffffffffffffff
   43445:	mov    r9d,0x1
   4344b:	jmp    43468 <critical_factorization.part.0+0x48>
   4344d:	nop    DWORD PTR [rax]
   43450:	mov    r12,r9
   43453:	mov    rbx,r9
   43456:	mov    r11d,0x1
   4345c:	sub    r12,rax
   4345f:	lea    r9,[rbx+r11*1]
   43463:	cmp    r9,rsi
   43466:	jae    434bf <critical_factorization.part.0+0x9f>
   43468:	movzx  ecx,BYTE PTR [rdi+r9*1]
   4346d:	mov    r8d,ecx
   43470:	sub    ecx,0x41
   43473:	cmp    ecx,0x1a
   43476:	lea    r10d,[r8+0x20]
   4347a:	lea    rcx,[rdi+rax*1]
   4347e:	cmovb  r8d,r10d
   43482:	movzx  r10d,BYTE PTR [rcx+r11*1]
   43487:	mov    ecx,r10d
   4348a:	sub    r10d,0x41
   4348e:	lea    ebp,[rcx+0x20]
   43491:	cmp    r10d,0x1a
   43495:	cmovb  ecx,ebp
   43498:	cmp    r8b,cl
   4349b:	jb     43450 <critical_factorization.part.0+0x30>
   4349d:	je     43570 <critical_factorization.part.0+0x150>
   434a3:	mov    rax,rbx
   434a6:	mov    r11d,0x1
   434ac:	add    rbx,0x1
   434b0:	mov    r12d,0x1
   434b6:	lea    r9,[rbx+r11*1]
   434ba:	cmp    r9,rsi
   434bd:	jb     43468 <critical_factorization.part.0+0x48>
   434bf:	mov    QWORD PTR [rdx],r12
   434c2:	xor    ebx,ebx
   434c4:	mov    ebp,0x1
   434c9:	mov    r11d,0x1
   434cf:	mov    r12,0xffffffffffffffff
   434d6:	mov    r9d,0x1
   434dc:	jmp    434f8 <critical_factorization.part.0+0xd8>
   434de:	xchg   ax,ax
   434e0:	mov    rbp,r9
   434e3:	mov    rbx,r9
   434e6:	mov    r11d,0x1
   434ec:	sub    rbp,r12
   434ef:	lea    r9,[rbx+r11*1]
   434f3:	cmp    rsi,r9
   434f6:	jbe    4354c <critical_factorization.part.0+0x12c>
   434f8:	movzx  ecx,BYTE PTR [rdi+r9*1]
   434fd:	mov    r8d,ecx
   43500:	sub    ecx,0x41
   43503:	cmp    ecx,0x1a
   43506:	lea    r10d,[r8+0x20]
   4350a:	lea    rcx,[rdi+r12*1]
   4350e:	cmovb  r8d,r10d
   43512:	movzx  r10d,BYTE PTR [rcx+r11*1]
   43517:	mov    ecx,r10d
   4351a:	sub    r10d,0x41
   4351e:	lea    r13d,[rcx+0x20]
   43522:	cmp    r10d,0x1a
   43526:	cmovb  ecx,r13d
   4352a:	cmp    r8b,cl
   4352d:	ja     434e0 <critical_factorization.part.0+0xc0>
   4352f:	je     43580 <critical_factorization.part.0+0x160>
   43531:	mov    r12,rbx
   43534:	mov    r11d,0x1
   4353a:	add    rbx,0x1
   4353e:	mov    ebp,0x1
   43543:	lea    r9,[rbx+r11*1]
   43547:	cmp    rsi,r9
   4354a:	ja     434f8 <critical_factorization.part.0+0xd8>
   4354c:	add    r12,0x1
   43550:	add    rax,0x1
   43554:	cmp    r12,rax
   43557:	jb     4355f <critical_factorization.part.0+0x13f>
   43559:	mov    QWORD PTR [rdx],rbp
   4355c:	mov    rax,r12
   4355f:	pop    rbx
   43560:	pop    rbp
   43561:	pop    r12
   43563:	pop    r13
   43565:	ret    
   43566:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43570:	cmp    r12,r11
   43573:	je     43590 <critical_factorization.part.0+0x170>
   43575:	add    r11,0x1
   43579:	jmp    4345f <critical_factorization.part.0+0x3f>
   4357e:	xchg   ax,ax
   43580:	cmp    rbp,r11
   43583:	je     435a0 <critical_factorization.part.0+0x180>
   43585:	add    r11,0x1
   43589:	jmp    434ef <critical_factorization.part.0+0xcf>
   4358e:	xchg   ax,ax
   43590:	add    rbx,r12
   43593:	mov    r11d,0x1
   43599:	jmp    4345f <critical_factorization.part.0+0x3f>
   4359e:	xchg   ax,ax
   435a0:	add    rbx,rbp
   435a3:	mov    r11d,0x1
   435a9:	jmp    434ef <critical_factorization.part.0+0xcf>
   435ae:	xchg   ax,ax
   435b0:	xor    r12d,r12d
   435b3:	mov    ebp,0x1
   435b8:	jmp    43559 <critical_factorization.part.0+0x139>
   435ba:	nop    WORD PTR [rax+rax*1+0x0]

00000000000435c0 <two_way_long_needle>:
   435c0:	push   r15
   435c2:	push   r14
   435c4:	push   r13
   435c6:	mov    r13,rdx
   435c9:	push   r12
   435cb:	mov    r12,rsi
   435ce:	push   rbp
   435cf:	mov    rbp,rdi
   435d2:	push   rbx
   435d3:	mov    rbx,rcx
   435d6:	sub    rsp,0x858
   435dd:	mov    rax,QWORD PTR fs:0x28
   435e6:	mov    QWORD PTR [rsp+0x848],rax
   435ee:	xor    eax,eax
   435f0:	cmp    rcx,0x2
   435f4:	jbe    43998 <two_way_long_needle+0x3d8>
   435fa:	lea    rdx,[rsp+0x38]
   435ff:	mov    rsi,rcx
   43602:	mov    rdi,r13
   43605:	call   43420 <critical_factorization.part.0>
   4360a:	mov    QWORD PTR [rsp],rax
   4360e:	mov    rax,QWORD PTR [rsp+0x38]
   43613:	mov    QWORD PTR [rsp+0x10],rax
   43618:	lea    rax,[rsp+0x40]
   4361d:	lea    rdx,[rsp+0x840]
   43625:	nop    DWORD PTR [rax]
   43628:	mov    QWORD PTR [rax],rbx
   4362b:	add    rax,0x8
   4362f:	cmp    rdx,rax
   43632:	jne    43628 <two_way_long_needle+0x68>
   43634:	mov    rax,QWORD PTR [rsp+0x10]
   43639:	lea    r9,[r13+rax*1+0x0]
   4363e:	test   rbx,rbx
   43641:	je     4378d <two_way_long_needle+0x1cd>
   43647:	lea    rcx,[rbx-0x1]
   4364b:	lea    r10,[rbx+r13*1]
   4364f:	mov    rdx,r13
   43652:	lea    rdi,[r13+rcx*1+0x0]
   43657:	nop    WORD PTR [rax+rax*1+0x0]
   43660:	movzx  eax,BYTE PTR [rdx]
   43663:	lea    r8d,[rax-0x41]
   43667:	lea    esi,[rax+0x20]
   4366a:	cmp    r8d,0x1a
   4366e:	cmovb  eax,esi
   43671:	mov    rsi,rdi
   43674:	sub    rsi,rdx
   43677:	add    rdx,0x1
   4367b:	cdqe   
   4367d:	mov    QWORD PTR [rsp+rax*8+0x40],rsi
   43682:	cmp    r10,rdx
   43685:	jne    43660 <two_way_long_needle+0xa0>
   43687:	mov    rdx,QWORD PTR [rsp]
   4368b:	mov    rsi,r9
   4368e:	mov    rdi,r13
   43691:	mov    QWORD PTR [rsp+0x8],rcx
   43696:	call   433b0 <c_strncasecmp>
   4369b:	test   eax,eax
   4369d:	je     43827 <two_way_long_needle+0x267>
   436a3:	mov    rdi,QWORD PTR [rsp]
   436a7:	mov    rax,rbx
   436aa:	lea    r14,[rbx-0x1]
   436ae:	sub    rax,rdi
   436b1:	cmp    rax,rdi
   436b4:	cmovb  rax,rdi
   436b8:	xor    r15d,r15d
   436bb:	add    rax,0x1
   436bf:	mov    QWORD PTR [rsp+0x10],rax
   436c4:	mov    eax,0x1
   436c9:	sub    rax,rdi
   436cc:	mov    rdi,r12
   436cf:	mov    r12,rbp
   436d2:	mov    rbp,rbx
   436d5:	mov    QWORD PTR [rsp+0x8],rax
   436da:	mov    rbx,r14
   436dd:	mov    r14,r13
   436e0:	jmp    436ee <two_way_long_needle+0x12e>
   436e2:	nop    WORD PTR [rax+rax*1+0x0]
   436e8:	add    r15,rax
   436eb:	mov    rdi,r13
   436ee:	lea    r13,[r15+rbp*1]
   436f2:	xor    esi,esi
   436f4:	mov    rdx,r13
   436f7:	sub    rdx,rdi
   436fa:	add    rdi,r12
   436fd:	call   bf70 <memchr@plt>
   43702:	test   rax,rax
   43705:	jne    437a4 <two_way_long_needle+0x1e4>
   4370b:	test   r13,r13
   4370e:	je     437a4 <two_way_long_needle+0x1e4>
   43714:	movzx  eax,BYTE PTR [r12+r13*1-0x1]
   4371a:	lea    ecx,[rax-0x41]
   4371d:	lea    edx,[rax+0x20]
   43720:	cmp    ecx,0x1a
   43723:	cmovb  eax,edx
   43726:	cdqe   
   43728:	mov    rax,QWORD PTR [rsp+rax*8+0x40]
   4372d:	test   rax,rax
   43730:	jne    436e8 <two_way_long_needle+0x128>
   43732:	mov    rax,QWORD PTR [rsp]
   43736:	lea    rdi,[r12+r15*1]
   4373a:	mov    rcx,rax
   4373d:	cmp    rbx,rax
   43740:	ja     43759 <two_way_long_needle+0x199>
   43742:	jmp    437d0 <two_way_long_needle+0x210>
   43747:	nop    WORD PTR [rax+rax*1+0x0]
   43750:	add    rcx,0x1
   43754:	cmp    rbx,rcx
   43757:	jbe    437d0 <two_way_long_needle+0x210>
   43759:	movzx  eax,BYTE PTR [r14+rcx*1]
   4375e:	lea    esi,[rax-0x41]
   43761:	lea    edx,[rax+0x20]
   43764:	cmp    esi,0x1a
   43767:	cmovb  eax,edx
   4376a:	movzx  edx,BYTE PTR [rdi+rcx*1]
   4376e:	lea    r10d,[rdx-0x41]
   43772:	lea    esi,[rdx+0x20]
   43775:	cmp    r10d,0x1a
   43779:	cmovb  edx,esi
   4377c:	cmp    edx,eax
   4377e:	je     43750 <two_way_long_needle+0x190>
   43780:	add    r15,QWORD PTR [rsp+0x8]
   43785:	add    r15,rcx
   43788:	jmp    436eb <two_way_long_needle+0x12b>
   4378d:	mov    rdx,QWORD PTR [rsp]
   43791:	mov    rsi,r9
   43794:	mov    rdi,r13
   43797:	call   433b0 <c_strncasecmp>
   4379c:	test   eax,eax
   4379e:	jne    436a3 <two_way_long_needle+0xe3>
   437a4:	xor    eax,eax
   437a6:	mov    rbx,QWORD PTR [rsp+0x848]
   437ae:	xor    rbx,QWORD PTR fs:0x28
   437b7:	jne    439cd <two_way_long_needle+0x40d>
   437bd:	add    rsp,0x858
   437c4:	pop    rbx
   437c5:	pop    rbp
   437c6:	pop    r12
   437c8:	pop    r13
   437ca:	pop    r14
   437cc:	pop    r15
   437ce:	ret    
   437cf:	nop
   437d0:	mov    rax,QWORD PTR [rsp]
   437d4:	lea    rcx,[rax-0x1]
   437d8:	test   rax,rax
   437db:	jne    437f6 <two_way_long_needle+0x236>
   437dd:	jmp    439c5 <two_way_long_needle+0x405>
   437e2:	nop    WORD PTR [rax+rax*1+0x0]
   437e8:	sub    rcx,0x1
   437ec:	cmp    rcx,0xffffffffffffffff
   437f0:	je     439c5 <two_way_long_needle+0x405>
   437f6:	movzx  eax,BYTE PTR [r14+rcx*1]
   437fb:	lea    esi,[rax-0x41]
   437fe:	lea    edx,[rax+0x20]
   43801:	cmp    esi,0x1a
   43804:	cmovb  eax,edx
   43807:	movzx  edx,BYTE PTR [rdi+rcx*1]
   4380b:	lea    r10d,[rdx-0x41]
   4380f:	lea    esi,[rdx+0x20]
   43812:	cmp    r10d,0x1a
   43816:	cmovb  edx,esi
   43819:	cmp    edx,eax
   4381b:	je     437e8 <two_way_long_needle+0x228>
   4381d:	add    r15,QWORD PTR [rsp+0x10]
   43822:	jmp    436eb <two_way_long_needle+0x12b>
   43827:	mov    rdi,QWORD PTR [rsp]
   4382b:	mov    eax,0x1
   43830:	xor    r9d,r9d
   43833:	xor    r15d,r15d
   43836:	mov    rcx,QWORD PTR [rsp+0x8]
   4383b:	mov    QWORD PTR [rsp+0x8],rbx
   43840:	sub    rax,rdi
   43843:	mov    QWORD PTR [rsp+0x20],rax
   43848:	lea    rax,[rdi-0x1]
   4384c:	mov    rdi,r12
   4384f:	mov    r12,rcx
   43852:	mov    QWORD PTR [rsp+0x28],rax
   43857:	mov    rax,rbx
   4385a:	sub    rax,QWORD PTR [rsp+0x10]
   4385f:	mov    rbx,rbp
   43862:	mov    QWORD PTR [rsp+0x18],rax
   43867:	mov    rbp,r9
   4386a:	jmp    43888 <two_way_long_needle+0x2c8>
   4386c:	nop    DWORD PTR [rax+0x0]
   43870:	cmp    rax,QWORD PTR [rsp+0x10]
   43875:	jae    43880 <two_way_long_needle+0x2c0>
   43877:	test   rbp,rbp
   4387a:	cmovne rax,QWORD PTR [rsp+0x18]
   43880:	add    r15,rax
   43883:	xor    ebp,ebp
   43885:	mov    rdi,r14
   43888:	mov    rax,QWORD PTR [rsp+0x8]
   4388d:	xor    esi,esi
   4388f:	lea    r14,[r15+rax*1]
   43893:	mov    rdx,r14
   43896:	sub    rdx,rdi
   43899:	add    rdi,rbx
   4389c:	call   bf70 <memchr@plt>
   438a1:	test   rax,rax
   438a4:	jne    437a4 <two_way_long_needle+0x1e4>
   438aa:	test   r14,r14
   438ad:	je     437a4 <two_way_long_needle+0x1e4>
   438b3:	movzx  eax,BYTE PTR [rbx+r14*1-0x1]
   438b9:	lea    esi,[rax-0x41]
   438bc:	lea    edx,[rax+0x20]
   438bf:	cmp    esi,0x1a
   438c2:	cmovb  eax,edx
   438c5:	cdqe   
   438c7:	mov    rax,QWORD PTR [rsp+rax*8+0x40]
   438cc:	test   rax,rax
   438cf:	jne    43870 <two_way_long_needle+0x2b0>
   438d1:	mov    rax,QWORD PTR [rsp]
   438d5:	lea    rdi,[rbx+r15*1]
   438d9:	cmp    rbp,rax
   438dc:	mov    rsi,rax
   438df:	cmovae rsi,rbp
   438e3:	cmp    rsi,r12
   438e6:	jb     438f9 <two_way_long_needle+0x339>
   438e8:	jmp    43930 <two_way_long_needle+0x370>
   438ea:	nop    WORD PTR [rax+rax*1+0x0]
   438f0:	add    rsi,0x1
   438f4:	cmp    rsi,r12
   438f7:	je     43930 <two_way_long_needle+0x370>
   438f9:	movzx  eax,BYTE PTR [r13+rsi*1+0x0]
   438ff:	lea    ecx,[rax-0x41]
   43902:	lea    edx,[rax+0x20]
   43905:	cmp    ecx,0x1a
   43908:	cmovb  eax,edx
   4390b:	movzx  edx,BYTE PTR [rdi+rsi*1]
   4390f:	lea    r8d,[rdx-0x41]
   43913:	lea    ecx,[rdx+0x20]
   43916:	cmp    r8d,0x1a
   4391a:	cmovb  edx,ecx
   4391d:	cmp    edx,eax
   4391f:	je     438f0 <two_way_long_needle+0x330>
   43921:	add    r15,QWORD PTR [rsp+0x20]
   43926:	xor    ebp,ebp
   43928:	add    r15,rsi
   4392b:	jmp    43885 <two_way_long_needle+0x2c5>
   43930:	mov    rsi,QWORD PTR [rsp+0x28]
   43935:	mov    r11,QWORD PTR [rsp]
   43939:	lea    rdi,[rbx+r15*1]
   4393d:	cmp    rbp,QWORD PTR [rsp]
   43941:	jb     43954 <two_way_long_needle+0x394>
   43943:	jmp    43980 <two_way_long_needle+0x3c0>
   43945:	nop    DWORD PTR [rax]
   43948:	lea    rax,[rsi-0x1]
   4394c:	cmp    rbp,rsi
   4394f:	je     439b7 <two_way_long_needle+0x3f7>
   43951:	mov    rsi,rax
   43954:	movzx  eax,BYTE PTR [r13+rsi*1+0x0]
   4395a:	lea    r11,[rsi+0x1]
   4395e:	lea    ecx,[rax-0x41]
   43961:	lea    edx,[rax+0x20]
   43964:	cmp    ecx,0x1a
   43967:	cmovb  eax,edx
   4396a:	movzx  edx,BYTE PTR [rdi+rsi*1]
   4396e:	lea    r8d,[rdx-0x41]
   43972:	lea    ecx,[rdx+0x20]
   43975:	cmp    r8d,0x1a
   43979:	cmovb  edx,ecx
   4397c:	cmp    edx,eax
   4397e:	je     43948 <two_way_long_needle+0x388>
   43980:	lea    r9,[rbp+0x1]
   43984:	cmp    r9,r11
   43987:	ja     439bc <two_way_long_needle+0x3fc>
   43989:	mov    rbp,QWORD PTR [rsp+0x18]
   4398e:	add    r15,QWORD PTR [rsp+0x10]
   43993:	jmp    43885 <two_way_long_needle+0x2c5>
   43998:	mov    QWORD PTR [rsp+0x38],0x1
   439a1:	lea    rax,[rcx-0x1]
   439a5:	mov    QWORD PTR [rsp],rax
   439a9:	mov    QWORD PTR [rsp+0x10],0x1
   439b2:	jmp    43618 <two_way_long_needle+0x58>
   439b7:	mov    r11,rbp
   439ba:	jmp    43980 <two_way_long_needle+0x3c0>
   439bc:	lea    rax,[rbx+r15*1]
   439c0:	jmp    437a6 <two_way_long_needle+0x1e6>
   439c5:	mov    rax,rdi
   439c8:	jmp    437a6 <two_way_long_needle+0x1e6>
   439cd:	call   c7b0 <__stack_chk_fail@plt>
   439d2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   439dd:	nop    DWORD PTR [rax]

00000000000439e0 <c_strcasestr>:
   439e0:	endbr64 
   439e4:	push   r15
   439e6:	mov    r8,rdi
   439e9:	push   r14
   439eb:	push   r13
   439ed:	push   r12
   439ef:	push   rbp
   439f0:	push   rbx
   439f1:	sub    rsp,0x48
   439f5:	movzx  edx,BYTE PTR [rsi]
   439f8:	mov    rax,QWORD PTR fs:0x28
   43a01:	mov    QWORD PTR [rsp+0x38],rax
   43a06:	xor    eax,eax
   43a08:	movzx  eax,BYTE PTR [rdi]
   43a0b:	test   al,al
   43a0d:	je     43db4 <c_strcasestr+0x3d4>
   43a13:	mov    r13,rsi
   43a16:	mov    r12,rsi
   43a19:	mov    rcx,rdi
   43a1c:	mov    esi,0x1
   43a21:	jmp    43a5f <c_strcasestr+0x7f>
   43a23:	nop    DWORD PTR [rax+rax*1+0x0]
   43a28:	lea    r9d,[rax-0x41]
   43a2c:	add    rcx,0x1
   43a30:	lea    edi,[rax+0x20]
   43a33:	cmp    r9d,0x1a
   43a37:	lea    r9d,[rdx-0x41]
   43a3b:	cmovb  eax,edi
   43a3e:	add    r12,0x1
   43a42:	lea    edi,[rdx+0x20]
   43a45:	cmp    r9d,0x1a
   43a49:	cmovb  edx,edi
   43a4c:	cmp    edx,eax
   43a4e:	sete   al
   43a51:	and    esi,eax
   43a53:	movzx  eax,BYTE PTR [rcx]
   43a56:	test   al,al
   43a58:	je     43ac0 <c_strcasestr+0xe0>
   43a5a:	movzx  edx,BYTE PTR [r12]
   43a5f:	test   dl,dl
   43a61:	jne    43a28 <c_strcasestr+0x48>
   43a63:	mov    rax,r8
   43a66:	test   sil,sil
   43a69:	jne    43a93 <c_strcasestr+0xb3>
   43a6b:	sub    r12,r13
   43a6e:	lea    rax,[r8+0x1]
   43a72:	mov    QWORD PTR [rsp],rax
   43a76:	lea    rbp,[r12-0x1]
   43a7b:	cmp    r12,0x1f
   43a7f:	jbe    43ad0 <c_strcasestr+0xf0>
   43a81:	mov    rdi,QWORD PTR [rsp]
   43a85:	mov    rcx,r12
   43a88:	mov    rdx,r13
   43a8b:	mov    rsi,rbp
   43a8e:	call   435c0 <two_way_long_needle>
   43a93:	mov    rbx,QWORD PTR [rsp+0x38]
   43a98:	xor    rbx,QWORD PTR fs:0x28
   43aa1:	jne    43ddc <c_strcasestr+0x3fc>
   43aa7:	add    rsp,0x48
   43aab:	pop    rbx
   43aac:	pop    rbp
   43aad:	pop    r12
   43aaf:	pop    r13
   43ab1:	pop    r14
   43ab3:	pop    r15
   43ab5:	ret    
   43ab6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43ac0:	xor    eax,eax
   43ac2:	cmp    BYTE PTR [r12],0x0
   43ac7:	je     43a63 <c_strcasestr+0x83>
   43ac9:	jmp    43a93 <c_strcasestr+0xb3>
   43acb:	nop    DWORD PTR [rax+rax*1+0x0]
   43ad0:	cmp    r12,0x2
   43ad4:	jbe    43d9a <c_strcasestr+0x3ba>
   43ada:	lea    rdx,[rsp+0x30]
   43adf:	mov    rsi,r12
   43ae2:	mov    rdi,r13
   43ae5:	mov    QWORD PTR [rsp+0x8],r8
   43aea:	call   43420 <critical_factorization.part.0>
   43aef:	mov    r8,QWORD PTR [rsp+0x8]
   43af4:	mov    r14,rax
   43af7:	mov    rax,QWORD PTR [rsp+0x30]
   43afc:	mov    QWORD PTR [rsp+0x18],rax
   43b01:	mov    rax,QWORD PTR [rsp+0x18]
   43b06:	mov    rdx,r14
   43b09:	mov    rdi,r13
   43b0c:	mov    QWORD PTR [rsp+0x8],r8
   43b11:	lea    rsi,[r13+rax*1+0x0]
   43b16:	call   433b0 <c_strncasecmp>
   43b1b:	mov    r8,QWORD PTR [rsp+0x8]
   43b20:	test   eax,eax
   43b22:	jne    43c85 <c_strcasestr+0x2a5>
   43b28:	mov    eax,0x1
   43b2d:	mov    QWORD PTR [rsp+0x8],r8
   43b32:	xor    r15d,r15d
   43b35:	mov    rdi,rbp
   43b38:	sub    rax,r14
   43b3b:	mov    rbp,r15
   43b3e:	mov    QWORD PTR [rsp+0x10],rax
   43b43:	lea    rax,[r14-0x1]
   43b47:	mov    QWORD PTR [rsp+0x20],rax
   43b4c:	mov    rax,r12
   43b4f:	sub    rax,QWORD PTR [rsp+0x18]
   43b54:	mov    QWORD PTR [rsp+0x28],rax
   43b59:	nop    DWORD PTR [rax+0x0]
   43b60:	lea    rbx,[r12+rbp*1]
   43b64:	xor    esi,esi
   43b66:	mov    rdx,rbx
   43b69:	sub    rdx,rdi
   43b6c:	add    rdi,QWORD PTR [rsp]
   43b70:	call   bf70 <memchr@plt>
   43b75:	test   rbx,rbx
   43b78:	je     43c78 <c_strcasestr+0x298>
   43b7e:	test   rax,rax
   43b81:	jne    43c78 <c_strcasestr+0x298>
   43b87:	cmp    r14,r15
   43b8a:	mov    rcx,r15
   43b8d:	mov    rax,QWORD PTR [rsp+0x8]
   43b92:	cmovae rcx,r14
   43b96:	lea    rsi,[rax+rbp*1]
   43b9a:	cmp    r12,rcx
   43b9d:	ja     43bb1 <c_strcasestr+0x1d1>
   43b9f:	jmp    43c00 <c_strcasestr+0x220>
   43ba1:	nop    DWORD PTR [rax+0x0]
   43ba8:	add    rcx,0x1
   43bac:	cmp    r12,rcx
   43baf:	je     43c00 <c_strcasestr+0x220>
   43bb1:	movzx  eax,BYTE PTR [r13+rcx*1+0x0]
   43bb7:	lea    edi,[rax-0x41]
   43bba:	lea    edx,[rax+0x20]
   43bbd:	cmp    edi,0x1a
   43bc0:	cmovb  eax,edx
   43bc3:	movzx  edx,BYTE PTR [rcx+rsi*1+0x1]
   43bc8:	lea    r8d,[rdx-0x41]
   43bcc:	lea    edi,[rdx+0x20]
   43bcf:	cmp    r8d,0x1a
   43bd3:	cmovb  edx,edi
   43bd6:	cmp    edx,eax
   43bd8:	je     43ba8 <c_strcasestr+0x1c8>
   43bda:	cmp    r12,rcx
   43bdd:	jbe    43c00 <c_strcasestr+0x220>
   43bdf:	mov    rax,QWORD PTR [rsp+0x10]
   43be4:	xor    r15d,r15d
   43be7:	lea    r8,[rax+rbp*1]
   43beb:	lea    rbp,[rcx+r8*1]
   43bef:	mov    rdi,rbx
   43bf2:	jmp    43b60 <c_strcasestr+0x180>
   43bf7:	nop    WORD PTR [rax+rax*1+0x0]
   43c00:	mov    rax,QWORD PTR [rsp+0x8]
   43c05:	mov    rcx,QWORD PTR [rsp+0x20]
   43c0a:	mov    r11,r14
   43c0d:	lea    rsi,[rax+rbp*1]
   43c11:	cmp    r14,r15
   43c14:	ja     43c2c <c_strcasestr+0x24c>
   43c16:	jmp    43c59 <c_strcasestr+0x279>
   43c18:	nop    DWORD PTR [rax+rax*1+0x0]
   43c20:	lea    rax,[rcx-0x1]
   43c24:	cmp    r15,rcx
   43c27:	je     43c80 <c_strcasestr+0x2a0>
   43c29:	mov    rcx,rax
   43c2c:	movzx  eax,BYTE PTR [r13+rcx*1+0x0]
   43c32:	lea    r11,[rcx+0x1]
   43c36:	lea    edi,[rax-0x41]
   43c39:	lea    edx,[rax+0x20]
   43c3c:	cmp    edi,0x1a
   43c3f:	cmovb  eax,edx
   43c42:	movzx  edx,BYTE PTR [rcx+rsi*1+0x1]
   43c47:	lea    r8d,[rdx-0x41]
   43c4b:	lea    edi,[rdx+0x20]
   43c4e:	cmp    r8d,0x1a
   43c52:	cmovb  edx,edi
   43c55:	cmp    edx,eax
   43c57:	je     43c20 <c_strcasestr+0x240>
   43c59:	add    r15,0x1
   43c5d:	cmp    r15,r11
   43c60:	ja     43dc4 <c_strcasestr+0x3e4>
   43c66:	mov    r15,QWORD PTR [rsp+0x28]
   43c6b:	add    rbp,QWORD PTR [rsp+0x18]
   43c70:	jmp    43bef <c_strcasestr+0x20f>
   43c75:	nop    DWORD PTR [rax]
   43c78:	xor    eax,eax
   43c7a:	jmp    43a93 <c_strcasestr+0xb3>
   43c7f:	nop
   43c80:	mov    r11,r15
   43c83:	jmp    43c59 <c_strcasestr+0x279>
   43c85:	mov    rax,r12
   43c88:	mov    ebx,0x1
   43c8d:	mov    rdi,rbp
   43c90:	sub    rax,r14
   43c93:	cmp    rax,r14
   43c96:	cmovb  rax,r14
   43c9a:	xor    r15d,r15d
   43c9d:	sub    rbx,r14
   43ca0:	mov    rcx,r15
   43ca3:	mov    QWORD PTR [rsp+0x8],rbx
   43ca8:	mov    r15,r12
   43cab:	mov    rbx,r8
   43cae:	add    rax,0x1
   43cb2:	mov    r12,rcx
   43cb5:	mov    QWORD PTR [rsp+0x10],rax
   43cba:	mov    rax,r13
   43cbd:	mov    r13,r14
   43cc0:	mov    r14,rax
   43cc3:	nop    DWORD PTR [rax+rax*1+0x0]
   43cc8:	lea    rbp,[r15+r12*1]
   43ccc:	xor    esi,esi
   43cce:	mov    rdx,rbp
   43cd1:	sub    rdx,rdi
   43cd4:	add    rdi,QWORD PTR [rsp]
   43cd8:	call   bf70 <memchr@plt>
   43cdd:	test   rbp,rbp
   43ce0:	je     43c78 <c_strcasestr+0x298>
   43ce2:	test   rax,rax
   43ce5:	jne    43c78 <c_strcasestr+0x298>
   43ce7:	mov    rsi,r13
   43cea:	lea    r11,[rbx+r12*1]
   43cee:	cmp    r15,r13
   43cf1:	ja     43d01 <c_strcasestr+0x321>
   43cf3:	jmp    43d48 <c_strcasestr+0x368>
   43cf5:	nop    DWORD PTR [rax]
   43cf8:	add    rsi,0x1
   43cfc:	cmp    r15,rsi
   43cff:	jbe    43d48 <c_strcasestr+0x368>
   43d01:	movzx  eax,BYTE PTR [r14+rsi*1]
   43d06:	lea    edi,[rax-0x41]
   43d09:	lea    edx,[rax+0x20]
   43d0c:	cmp    edi,0x1a
   43d0f:	cmovb  eax,edx
   43d12:	movzx  edx,BYTE PTR [rsi+r11*1+0x1]
   43d18:	lea    r10d,[rdx-0x41]
   43d1c:	lea    edi,[rdx+0x20]
   43d1f:	cmp    r10d,0x1a
   43d23:	cmovb  edx,edi
   43d26:	cmp    edx,eax
   43d28:	je     43cf8 <c_strcasestr+0x318>
   43d2a:	cmp    r15,rsi
   43d2d:	jbe    43d48 <c_strcasestr+0x368>
   43d2f:	mov    rax,QWORD PTR [rsp+0x8]
   43d34:	lea    rcx,[rax+r12*1]
   43d38:	lea    r12,[rcx+rsi*1]
   43d3c:	mov    rdi,rbp
   43d3f:	jmp    43cc8 <c_strcasestr+0x2e8>
   43d41:	nop    DWORD PTR [rax+0x0]
   43d48:	lea    rsi,[r13-0x1]
   43d4c:	test   r13,r13
   43d4f:	je     43dd0 <c_strcasestr+0x3f0>
   43d51:	lea    r11,[rbx+r12*1]
   43d55:	jmp    43d6a <c_strcasestr+0x38a>
   43d57:	nop    WORD PTR [rax+rax*1+0x0]
   43d60:	sub    rsi,0x1
   43d64:	cmp    rsi,0xffffffffffffffff
   43d68:	je     43dd0 <c_strcasestr+0x3f0>
   43d6a:	movzx  eax,BYTE PTR [r14+rsi*1]
   43d6f:	lea    edi,[rax-0x41]
   43d72:	lea    edx,[rax+0x20]
   43d75:	cmp    edi,0x1a
   43d78:	cmovb  eax,edx
   43d7b:	movzx  edx,BYTE PTR [rsi+r11*1+0x1]
   43d81:	lea    r10d,[rdx-0x41]
   43d85:	lea    edi,[rdx+0x20]
   43d88:	cmp    r10d,0x1a
   43d8c:	cmovb  edx,edi
   43d8f:	cmp    edx,eax
   43d91:	je     43d60 <c_strcasestr+0x380>
   43d93:	add    r12,QWORD PTR [rsp+0x10]
   43d98:	jmp    43d3c <c_strcasestr+0x35c>
   43d9a:	mov    QWORD PTR [rsp+0x30],0x1
   43da3:	mov    r14,rbp
   43da6:	mov    QWORD PTR [rsp+0x18],0x1
   43daf:	jmp    43b01 <c_strcasestr+0x121>
   43db4:	test   dl,dl
   43db6:	mov    eax,0x0
   43dbb:	cmove  rax,rdi
   43dbf:	jmp    43a93 <c_strcasestr+0xb3>
   43dc4:	mov    rax,QWORD PTR [rsp]
   43dc8:	add    rax,rbp
   43dcb:	jmp    43a93 <c_strcasestr+0xb3>
   43dd0:	mov    rax,QWORD PTR [rsp]
   43dd4:	add    rax,r12
   43dd7:	jmp    43a93 <c_strcasestr+0xb3>
   43ddc:	call   c7b0 <__stack_chk_fail@plt>
   43de1:	nop    WORD PTR cs:[rax+rax*1+0x0]
   43deb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000043df0 <md5_init_ctx>:
   43df0:	endbr64 
   43df4:	movabs rax,0xefcdab8967452301
   43dfe:	mov    QWORD PTR [rdi+0x10],0x0
   43e06:	mov    QWORD PTR [rdi],rax
   43e09:	movabs rax,0x1032547698badcfe
   43e13:	mov    QWORD PTR [rdi+0x8],rax
   43e17:	mov    DWORD PTR [rdi+0x18],0x0
   43e1e:	ret    
   43e1f:	nop

0000000000043e20 <md5_read_ctx>:
   43e20:	endbr64 
   43e24:	mov    edx,DWORD PTR [rdi]
   43e26:	mov    rax,rsi
   43e29:	mov    DWORD PTR [rsi],edx
   43e2b:	mov    edx,DWORD PTR [rdi+0x4]
   43e2e:	mov    DWORD PTR [rsi+0x4],edx
   43e31:	mov    edx,DWORD PTR [rdi+0x8]
   43e34:	mov    DWORD PTR [rsi+0x8],edx
   43e37:	mov    edx,DWORD PTR [rdi+0xc]
   43e3a:	mov    DWORD PTR [rsi+0xc],edx
   43e3d:	ret    
   43e3e:	xchg   ax,ax

0000000000043e40 <md5_process_block>:
   43e40:	endbr64 
   43e44:	mov    rax,rsi
   43e47:	push   r15
   43e49:	and    rax,0xfffffffffffffffc
   43e4d:	push   r14
   43e4f:	push   r13
   43e51:	push   r12
   43e53:	push   rbp
   43e54:	push   rbx
   43e55:	mov    rbx,rdi
   43e58:	mov    rdi,rdx
   43e5b:	mov    r11d,DWORD PTR [rdx+0x4]
   43e5f:	lea    rcx,[rbx+rax*1]
   43e63:	mov    eax,DWORD PTR [rdx]
   43e65:	mov    r10d,DWORD PTR [rdx+0x8]
   43e69:	mov    DWORD PTR [rsp-0x18],eax
   43e6d:	mov    eax,DWORD PTR [rdx+0xc]
   43e70:	mov    QWORD PTR [rsp-0x8],rdx
   43e75:	mov    edx,esi
   43e77:	mov    DWORD PTR [rsp-0x20],eax
   43e7b:	xor    eax,eax
   43e7d:	add    edx,DWORD PTR [rdi+0x10]
   43e80:	setb   al
   43e83:	shr    rsi,0x20
   43e87:	add    esi,DWORD PTR [rdi+0x14]
   43e8a:	mov    QWORD PTR [rsp-0x10],rcx
   43e8f:	add    esi,eax
   43e91:	mov    DWORD PTR [rdi+0x10],edx
   43e94:	mov    DWORD PTR [rdi+0x14],esi
   43e97:	cmp    rbx,rcx
   43e9a:	jae    44592 <md5_process_block+0x752>
   43ea0:	mov    r15d,r10d
   43ea3:	nop    DWORD PTR [rax+rax*1+0x0]
   43ea8:	mov    r14d,DWORD PTR [rbx]
   43eab:	mov    edi,DWORD PTR [rsp-0x20]
   43eaf:	mov    eax,DWORD PTR [rsp-0x18]
   43eb3:	mov    esi,DWORD PTR [rbx+0x4]
   43eb6:	mov    r8d,DWORD PTR [rbx+0xc]
   43eba:	mov    r10d,DWORD PTR [rbx+0x14]
   43ebe:	lea    edx,[r14+rax*1-0x28955b88]
   43ec6:	mov    eax,edi
   43ec8:	lea    ecx,[rsi+rdi*1-0x173848aa]
   43ecf:	mov    DWORD PTR [rsp-0x44],esi
   43ed3:	xor    eax,r15d
   43ed6:	mov    ebp,DWORD PTR [rbx+0x18]
   43ed9:	mov    r13d,DWORD PTR [rbx+0x1c]
   43edd:	mov    DWORD PTR [rsp-0x34],r10d
   43ee2:	and    eax,r11d
   43ee5:	mov    r12d,DWORD PTR [rbx+0x24]
   43ee9:	mov    DWORD PTR [rsp-0x3c],r8d
   43eee:	xor    eax,edi
   43ef0:	lea    edi,[r8+r11*1-0x3e423112]
   43ef8:	mov    r8d,DWORD PTR [rbx+0x2c]
   43efc:	add    eax,edx
   43efe:	mov    edx,r11d
   43f01:	mov    DWORD PTR [rsp-0x2c],r12d
   43f06:	rol    eax,0x7
   43f09:	xor    edx,r15d
   43f0c:	mov    DWORD PTR [rsp-0x24],r8d
   43f11:	add    eax,r11d
   43f14:	and    edx,eax
   43f16:	mov    r9d,eax
   43f19:	xor    edx,r15d
   43f1c:	xor    r9d,r11d
   43f1f:	add    edx,ecx
   43f21:	mov    ecx,DWORD PTR [rbx+0x8]
   43f24:	rol    edx,0xc
   43f27:	add    edx,eax
   43f29:	lea    esi,[rcx+r15*1+0x242070db]
   43f31:	mov    DWORD PTR [rsp-0x40],ecx
   43f35:	mov    ecx,r9d
   43f38:	and    ecx,edx
   43f3a:	mov    r9d,eax
   43f3d:	xor    ecx,r11d
   43f40:	xor    r9d,edx
   43f43:	add    ecx,esi
   43f45:	mov    esi,r9d
   43f48:	mov    r9d,DWORD PTR [rbx+0x10]
   43f4c:	ror    ecx,0xf
   43f4f:	add    ecx,edx
   43f51:	mov    DWORD PTR [rsp-0x38],r9d
   43f56:	and    esi,ecx
   43f58:	xor    esi,eax
   43f5a:	add    esi,edi
   43f5c:	lea    edi,[r9+rax*1-0xa83f051]
   43f64:	mov    eax,edx
   43f66:	mov    r9d,DWORD PTR [rbx+0x3c]
   43f6a:	ror    esi,0xa
   43f6d:	xor    eax,ecx
   43f6f:	add    esi,ecx
   43f71:	and    eax,esi
   43f73:	xor    eax,edx
   43f75:	add    eax,edi
   43f77:	lea    edi,[r10+rdx*1+0x4787c62a]
   43f7f:	mov    edx,ecx
   43f81:	mov    r10d,ebp
   43f84:	rol    eax,0x7
   43f87:	xor    edx,esi
   43f89:	mov    DWORD PTR [rsp-0x1c],r10d
   43f8e:	add    eax,esi
   43f90:	and    edx,eax
   43f92:	xor    edx,ecx
   43f94:	add    edx,edi
   43f96:	lea    edi,[rbp+rcx*1-0x57cfb9ed]
   43f9d:	mov    ebp,esi
   43f9f:	xor    ebp,eax
   43fa1:	rol    edx,0xc
   43fa4:	add    edx,eax
   43fa6:	mov    ecx,ebp
   43fa8:	mov    ebp,eax
   43faa:	and    ecx,edx
   43fac:	xor    ebp,edx
   43fae:	xor    ecx,esi
   43fb0:	add    ecx,edi
   43fb2:	lea    edi,[r13+rsi*1-0x2b96aff]
   43fba:	mov    esi,ebp
   43fbc:	mov    ebp,DWORD PTR [rbx+0x20]
   43fbf:	ror    ecx,0xf
   43fc2:	add    ecx,edx
   43fc4:	mov    DWORD PTR [rsp-0x30],ebp
   43fc8:	and    esi,ecx
   43fca:	xor    esi,eax
   43fcc:	add    esi,edi
   43fce:	lea    edi,[rbp+rax*1+0x698098d8]
   43fd5:	mov    eax,edx
   43fd7:	mov    ebp,DWORD PTR [rbx+0x30]
   43fda:	ror    esi,0xa
   43fdd:	xor    eax,ecx
   43fdf:	add    esi,ecx
   43fe1:	and    eax,esi
   43fe3:	xor    eax,edx
   43fe5:	add    eax,edi
   43fe7:	lea    edi,[r12+rdx*1-0x74bb0851]
   43fef:	mov    edx,ecx
   43ff1:	mov    r12d,DWORD PTR [rbx+0x38]
   43ff5:	rol    eax,0x7
   43ff8:	xor    edx,esi
   43ffa:	add    eax,esi
   43ffc:	and    edx,eax
   43ffe:	xor    edx,ecx
   44000:	add    edx,edi
   44002:	mov    edi,DWORD PTR [rbx+0x28]
   44005:	rol    edx,0xc
   44008:	mov    DWORD PTR [rsp-0x28],edi
   4400c:	lea    edi,[rdi+rcx*1-0xa44f]
   44013:	mov    ecx,esi
   44015:	add    edx,eax
   44017:	xor    ecx,eax
   44019:	and    ecx,edx
   4401b:	xor    ecx,esi
   4401d:	add    ecx,edi
   4401f:	lea    edi,[r8+rsi*1-0x76a32842]
   44027:	mov    esi,eax
   44029:	mov    r8d,DWORD PTR [rbx+0x34]
   4402d:	ror    ecx,0xf
   44030:	xor    esi,edx
   44032:	add    rbx,0x40
   44036:	add    ecx,edx
   44038:	and    esi,ecx
   4403a:	xor    esi,eax
   4403c:	add    esi,edi
   4403e:	lea    edi,[rbp+rax*1+0x6b901122]
   44045:	mov    eax,edx
   44047:	ror    esi,0xa
   4404a:	xor    eax,ecx
   4404c:	add    esi,ecx
   4404e:	and    eax,esi
   44050:	xor    eax,edx
   44052:	add    eax,edi
   44054:	lea    edi,[r8+rdx*1-0x2678e6d]
   4405c:	mov    edx,ecx
   4405e:	rol    eax,0x7
   44061:	xor    edx,esi
   44063:	add    eax,esi
   44065:	and    edx,eax
   44067:	xor    edx,ecx
   44069:	add    edx,edi
   4406b:	lea    edi,[r12+rcx*1-0x5986bc72]
   44073:	mov    ecx,esi
   44075:	rol    edx,0xc
   44078:	xor    ecx,eax
   4407a:	add    edx,eax
   4407c:	and    ecx,edx
   4407e:	xor    ecx,esi
   44080:	add    ecx,edi
   44082:	lea    edi,[r9+rsi*1+0x49b40821]
   4408a:	mov    esi,eax
   4408c:	ror    ecx,0xf
   4408f:	xor    esi,edx
   44091:	add    ecx,edx
   44093:	and    esi,ecx
   44095:	xor    esi,eax
   44097:	add    esi,edi
   44099:	mov    edi,DWORD PTR [rsp-0x44]
   4409d:	ror    esi,0xa
   440a0:	add    esi,ecx
   440a2:	lea    edi,[rdi+rax*1-0x9e1da9e]
   440a9:	mov    eax,ecx
   440ab:	xor    eax,esi
   440ad:	and    eax,edx
   440af:	xor    eax,ecx
   440b1:	add    eax,edi
   440b3:	lea    edi,[r10+rdx*1-0x3fbf4cc0]
   440bb:	mov    edx,esi
   440bd:	rol    eax,0x5
   440c0:	add    eax,esi
   440c2:	xor    edx,eax
   440c4:	and    edx,ecx
   440c6:	xor    edx,esi
   440c8:	add    edx,edi
   440ca:	mov    edi,DWORD PTR [rsp-0x24]
   440ce:	rol    edx,0x9
   440d1:	add    edx,eax
   440d3:	lea    edi,[rdi+rcx*1+0x265e5a51]
   440da:	mov    ecx,eax
   440dc:	xor    ecx,edx
   440de:	and    ecx,esi
   440e0:	xor    ecx,eax
   440e2:	add    ecx,edi
   440e4:	lea    edi,[r14+rsi*1-0x16493856]
   440ec:	mov    esi,edx
   440ee:	rol    ecx,0xe
   440f1:	add    ecx,edx
   440f3:	xor    esi,ecx
   440f5:	and    esi,eax
   440f7:	xor    esi,edx
   440f9:	add    esi,edi
   440fb:	mov    edi,DWORD PTR [rsp-0x34]
   440ff:	ror    esi,0xc
   44102:	add    esi,ecx
   44104:	lea    edi,[rdi+rax*1-0x29d0efa3]
   4410b:	mov    eax,ecx
   4410d:	xor    eax,esi
   4410f:	and    eax,edx
   44111:	xor    eax,ecx
   44113:	add    eax,edi
   44115:	mov    edi,DWORD PTR [rsp-0x28]
   44119:	rol    eax,0x5
   4411c:	add    eax,esi
   4411e:	lea    edi,[rdi+rdx*1+0x2441453]
   44125:	mov    edx,esi
   44127:	xor    edx,eax
   44129:	and    edx,ecx
   4412b:	xor    edx,esi
   4412d:	add    edx,edi
   4412f:	lea    edi,[r9+rcx*1-0x275e197f]
   44137:	mov    ecx,eax
   44139:	rol    edx,0x9
   4413c:	add    edx,eax
   4413e:	xor    ecx,edx
   44140:	and    ecx,esi
   44142:	xor    ecx,eax
   44144:	add    ecx,edi
   44146:	mov    edi,DWORD PTR [rsp-0x38]
   4414a:	mov    r10d,DWORD PTR [rsp-0x2c]
   4414f:	rol    ecx,0xe
   44152:	add    ecx,edx
   44154:	lea    edi,[rdi+rsi*1-0x182c0438]
   4415b:	mov    esi,edx
   4415d:	xor    esi,ecx
   4415f:	and    esi,eax
   44161:	xor    esi,edx
   44163:	add    esi,edi
   44165:	lea    edi,[r10+rax*1+0x21e1cde6]
   4416d:	mov    eax,ecx
   4416f:	mov    r10d,DWORD PTR [rsp-0x30]
   44174:	ror    esi,0xc
   44177:	add    esi,ecx
   44179:	xor    eax,esi
   4417b:	and    eax,edx
   4417d:	xor    eax,ecx
   4417f:	add    eax,edi
   44181:	lea    edi,[r12+rdx*1-0x3cc8f82a]
   44189:	mov    edx,esi
   4418b:	rol    eax,0x5
   4418e:	add    eax,esi
   44190:	xor    edx,eax
   44192:	and    edx,ecx
   44194:	xor    edx,esi
   44196:	add    edx,edi
   44198:	mov    edi,DWORD PTR [rsp-0x3c]
   4419c:	rol    edx,0x9
   4419f:	add    edx,eax
   441a1:	lea    edi,[rdi+rcx*1-0xb2af279]
   441a8:	mov    ecx,eax
   441aa:	xor    ecx,edx
   441ac:	and    ecx,esi
   441ae:	lea    esi,[r10+rsi*1+0x455a14ed]
   441b6:	mov    r10d,edx
   441b9:	xor    ecx,eax
   441bb:	add    ecx,edi
   441bd:	rol    ecx,0xe
   441c0:	add    ecx,edx
   441c2:	xor    r10d,ecx
   441c5:	mov    edi,r10d
   441c8:	and    edi,eax
   441ca:	xor    edi,edx
   441cc:	add    edi,esi
   441ce:	lea    esi,[r8+rax*1-0x561c16fb]
   441d6:	mov    eax,ecx
   441d8:	ror    edi,0xc
   441db:	add    edi,ecx
   441dd:	xor    eax,edi
   441df:	lea    r10d,[rbp+rdi*1-0x72d5b376]
   441e7:	and    eax,edx
   441e9:	mov    DWORD PTR [rsp-0x14],r10d
   441ee:	xor    eax,ecx
   441f0:	add    eax,esi
   441f2:	mov    esi,DWORD PTR [rsp-0x40]
   441f6:	rol    eax,0x5
   441f9:	add    eax,edi
   441fb:	lea    esi,[rsi+rdx*1-0x3105c08]
   44202:	mov    edx,edi
   44204:	xor    edx,eax
   44206:	and    edx,ecx
   44208:	lea    ecx,[r13+rcx*1+0x676f02d9]
   44210:	xor    edx,edi
   44212:	add    edx,esi
   44214:	mov    esi,eax
   44216:	rol    edx,0x9
   44219:	add    edx,eax
   4421b:	xor    esi,edx
   4421d:	and    esi,edi
   4421f:	xor    esi,eax
   44221:	add    esi,ecx
   44223:	mov    ecx,edx
   44225:	rol    esi,0xe
   44228:	add    esi,edx
   4422a:	xor    ecx,esi
   4422c:	mov    r10d,ecx
   4422f:	and    r10d,eax
   44232:	mov    edi,r10d
   44235:	mov    r10d,DWORD PTR [rsp-0x34]
   4423a:	xor    edi,edx
   4423c:	add    edi,DWORD PTR [rsp-0x14]
   44240:	ror    edi,0xc
   44243:	lea    eax,[r10+rax*1-0x5c6be]
   4424b:	add    edi,esi
   4424d:	xor    ecx,edi
   4424f:	add    ecx,eax
   44251:	mov    eax,DWORD PTR [rsp-0x30]
   44255:	rol    ecx,0x4
   44258:	lea    eax,[rax+rdx*1-0x788e097f]
   4425f:	mov    edx,esi
   44261:	add    ecx,edi
   44263:	xor    edx,edi
   44265:	xor    edx,ecx
   44267:	add    edx,eax
   44269:	mov    eax,DWORD PTR [rsp-0x24]
   4426d:	rol    edx,0xb
   44270:	lea    eax,[rax+rsi*1+0x6d9d6122]
   44277:	mov    esi,edi
   44279:	add    edx,ecx
   4427b:	xor    esi,ecx
   4427d:	lea    edi,[r12+rdi*1-0x21ac7f4]
   44285:	xor    esi,edx
   44287:	add    esi,eax
   44289:	mov    eax,ecx
   4428b:	rol    esi,0x10
   4428e:	xor    eax,edx
   44290:	add    esi,edx
   44292:	xor    eax,esi
   44294:	mov    r10d,esi
   44297:	add    eax,edi
   44299:	mov    edi,DWORD PTR [rsp-0x44]
   4429d:	ror    eax,0x9
   442a0:	lea    edi,[rdi+rcx*1-0x5b4115bc]
   442a7:	mov    ecx,edx
   442a9:	add    eax,esi
   442ab:	xor    ecx,esi
   442ad:	xor    r10d,eax
   442b0:	lea    esi,[r13+rsi*1-0x944b4a0]
   442b8:	xor    ecx,eax
   442ba:	add    ecx,edi
   442bc:	mov    edi,DWORD PTR [rsp-0x38]
   442c0:	rol    ecx,0x4
   442c3:	add    ecx,eax
   442c5:	lea    edx,[rdi+rdx*1+0x4bdecfa9]
   442cc:	mov    edi,r10d
   442cf:	xor    edi,ecx
   442d1:	add    edi,edx
   442d3:	mov    edx,eax
   442d5:	rol    edi,0xb
   442d8:	xor    edx,ecx
   442da:	add    edi,ecx
   442dc:	xor    edx,edi
   442de:	add    edx,esi
   442e0:	mov    esi,DWORD PTR [rsp-0x28]
   442e4:	rol    edx,0x10
   442e7:	lea    eax,[rsi+rax*1-0x41404390]
   442ee:	mov    esi,ecx
   442f0:	add    edx,edi
   442f2:	xor    esi,edi
   442f4:	xor    esi,edx
   442f6:	add    esi,eax
   442f8:	lea    eax,[r8+rcx*1+0x289b7ec6]
   44300:	mov    ecx,edi
   44302:	ror    esi,0x9
   44305:	xor    ecx,edx
   44307:	lea    edi,[r14+rdi*1-0x155ed806]
   4430f:	add    esi,edx
   44311:	xor    ecx,esi
   44313:	mov    r10d,esi
   44316:	add    ecx,eax
   44318:	mov    eax,edx
   4431a:	rol    ecx,0x4
   4431d:	xor    eax,esi
   4431f:	add    ecx,esi
   44321:	xor    eax,ecx
   44323:	xor    r10d,ecx
   44326:	add    eax,edi
   44328:	mov    edi,DWORD PTR [rsp-0x3c]
   4432c:	rol    eax,0xb
   4432f:	add    eax,ecx
   44331:	lea    edx,[rdi+rdx*1-0x2b10cf7b]
   44338:	mov    edi,r10d
   4433b:	xor    edi,eax
   4433d:	add    edi,edx
   4433f:	mov    edx,DWORD PTR [rsp-0x1c]
   44343:	rol    edi,0x10
   44346:	lea    edx,[rdx+rsi*1+0x4881d05]
   4434d:	mov    esi,ecx
   4434f:	add    edi,eax
   44351:	xor    esi,eax
   44353:	xor    esi,edi
   44355:	add    esi,edx
   44357:	mov    edx,DWORD PTR [rsp-0x2c]
   4435b:	ror    esi,0x9
   4435e:	lea    ecx,[rdx+rcx*1-0x262b2fc7]
   44365:	mov    edx,eax
   44367:	add    esi,edi
   44369:	xor    edx,edi
   4436b:	lea    eax,[rbp+rax*1-0x1924661b]
   44372:	mov    r10d,esi
   44375:	xor    edx,esi
   44377:	add    edx,ecx
   44379:	mov    ecx,edi
   4437b:	rol    edx,0x4
   4437e:	add    edx,esi
   44380:	xor    ecx,esi
   44382:	xor    ecx,edx
   44384:	xor    r10d,edx
   44387:	add    ecx,eax
   44389:	lea    eax,[r9+rdi*1+0x1fa27cf8]
   44391:	mov    edi,r10d
   44394:	mov    r10d,DWORD PTR [rsp-0x34]
   44399:	rol    ecx,0xb
   4439c:	add    ecx,edx
   4439e:	xor    edi,ecx
   443a0:	add    edi,eax
   443a2:	mov    eax,DWORD PTR [rsp-0x40]
   443a6:	rol    edi,0x10
   443a9:	lea    esi,[rax+rsi*1-0x3b53a99b]
   443b0:	mov    eax,edx
   443b2:	add    edi,ecx
   443b4:	xor    eax,ecx
   443b6:	xor    eax,edi
   443b8:	add    eax,esi
   443ba:	lea    esi,[r14+rdx*1-0xbd6ddbc]
   443c2:	mov    edx,ecx
   443c4:	mov    r14d,DWORD PTR [rsp-0x44]
   443c9:	ror    eax,0x9
   443cc:	not    edx
   443ce:	add    eax,edi
   443d0:	or     edx,eax
   443d2:	xor    edx,edi
   443d4:	add    edx,esi
   443d6:	lea    esi,[r13+rcx*1+0x432aff97]
   443de:	mov    r13d,edi
   443e1:	rol    edx,0x6
   443e4:	not    r13d
   443e7:	lea    edi,[r12+rdi*1-0x546bdc59]
   443ef:	add    edx,eax
   443f1:	mov    ecx,r13d
   443f4:	or     ecx,edx
   443f6:	mov    r13d,edx
   443f9:	xor    ecx,eax
   443fb:	not    r13d
   443fe:	add    ecx,esi
   44400:	mov    esi,eax
   44402:	rol    ecx,0xa
   44405:	not    esi
   44407:	add    ecx,edx
   44409:	or     esi,ecx
   4440b:	mov    r12d,ecx
   4440e:	xor    esi,edx
   44410:	not    r12d
   44413:	add    esi,edi
   44415:	lea    edi,[r10+rax*1-0x36c5fc7]
   4441d:	mov    eax,r13d
   44420:	mov    r10d,DWORD PTR [rsp-0x1c]
   44425:	rol    esi,0xf
   44428:	add    esi,ecx
   4442a:	or     eax,esi
   4442c:	xor    eax,ecx
   4442e:	add    eax,edi
   44430:	lea    edi,[rbp+rdx*1+0x655b59c3]
   44437:	mov    edx,r12d
   4443a:	mov    ebp,DWORD PTR [rsp-0x3c]
   4443e:	ror    eax,0xb
   44441:	add    eax,esi
   44443:	or     edx,eax
   44445:	xor    edx,esi
   44447:	add    edx,edi
   44449:	lea    edi,[rbp+rcx*1-0x70f3336e]
   44450:	mov    ebp,esi
   44452:	rol    edx,0x6
   44455:	not    ebp
   44457:	add    edx,eax
   44459:	mov    ecx,ebp
   4445b:	or     ecx,edx
   4445d:	mov    ebp,edx
   4445f:	xor    ecx,eax
   44461:	not    ebp
   44463:	add    ecx,edi
   44465:	mov    edi,DWORD PTR [rsp-0x28]
   44469:	rol    ecx,0xa
   4446c:	lea    edi,[rdi+rsi*1-0x100b83]
   44473:	mov    esi,eax
   44475:	add    ecx,edx
   44477:	not    esi
   44479:	or     esi,ecx
   4447b:	xor    esi,edx
   4447d:	add    esi,edi
   4447f:	lea    edi,[r14+rax*1-0x7a7ba22f]
   44487:	mov    eax,ebp
   44489:	mov    r14d,DWORD PTR [rsp-0x30]
   4448e:	rol    esi,0xf
   44491:	mov    ebp,ecx
   44493:	add    esi,ecx
   44495:	not    ebp
   44497:	or     eax,esi
   44499:	xor    eax,ecx
   4449b:	add    eax,edi
   4449d:	lea    edi,[r14+rdx*1+0x6fa87e4f]
   444a5:	mov    edx,ebp
   444a7:	mov    ebp,esi
   444a9:	ror    eax,0xb
   444ac:	not    ebp
   444ae:	mov    r14d,DWORD PTR [rsp-0x24]
   444b3:	add    eax,esi
   444b5:	or     edx,eax
   444b7:	xor    edx,esi
   444b9:	add    edx,edi
   444bb:	lea    edi,[r9+rcx*1-0x1d31920]
   444c3:	mov    ecx,ebp
   444c5:	mov    r9d,DWORD PTR [rsp-0x38]
   444ca:	rol    edx,0x6
   444cd:	add    edx,eax
   444cf:	or     ecx,edx
   444d1:	xor    ecx,eax
   444d3:	add    ecx,edi
   444d5:	lea    edi,[r10+rsi*1-0x5cfebcec]
   444dd:	mov    esi,eax
   444df:	mov    r10d,DWORD PTR [rsp-0x2c]
   444e4:	rol    ecx,0xa
   444e7:	not    esi
   444e9:	lea    eax,[r8+rax*1+0x4e0811a1]
   444f1:	mov    r8d,edx
   444f4:	add    ecx,edx
   444f6:	not    r8d
   444f9:	or     esi,ecx
   444fb:	xor    esi,edx
   444fd:	lea    edx,[r9+rdx*1-0x8ac817e]
   44505:	mov    r9d,ecx
   44508:	add    esi,edi
   4450a:	mov    edi,r8d
   4450d:	not    r9d
   44510:	rol    esi,0xf
   44513:	add    esi,ecx
   44515:	or     edi,esi
   44517:	xor    edi,ecx
   44519:	lea    ecx,[r14+rcx*1-0x42c50dcb]
   44521:	add    edi,eax
   44523:	mov    eax,r9d
   44526:	ror    edi,0xb
   44529:	add    edi,esi
   4452b:	or     eax,edi
   4452d:	xor    eax,esi
   4452f:	add    eax,edx
   44531:	mov    edx,esi
   44533:	rol    eax,0x6
   44536:	not    edx
   44538:	add    eax,edi
   4453a:	or     edx,eax
   4453c:	xor    edx,edi
   4453e:	add    edx,ecx
   44540:	mov    ecx,DWORD PTR [rsp-0x40]
   44544:	rol    edx,0xa
   44547:	lea    esi,[rcx+rsi*1+0x2ad7d2bb]
   4454e:	mov    ecx,edi
   44550:	add    edx,eax
   44552:	not    ecx
   44554:	lea    edi,[r10+rdi*1-0x14792c6f]
   4455c:	or     ecx,edx
   4455e:	xor    ecx,eax
   44560:	add    ecx,esi
   44562:	mov    esi,eax
   44564:	rol    ecx,0xf
   44567:	not    esi
   44569:	add    ecx,edx
   4456b:	or     esi,ecx
   4456d:	xor    esi,edx
   4456f:	add    esi,edi
   44571:	ror    esi,0xb
   44574:	add    esi,ecx
   44576:	add    DWORD PTR [rsp-0x18],eax
   4457a:	add    r15d,ecx
   4457d:	add    DWORD PTR [rsp-0x20],edx
   44581:	add    r11d,esi
   44584:	cmp    QWORD PTR [rsp-0x10],rbx
   44589:	ja     43ea8 <md5_process_block+0x68>
   4458f:	mov    r10d,r15d
   44592:	mov    rax,QWORD PTR [rsp-0x8]
   44597:	mov    ebx,DWORD PTR [rsp-0x18]
   4459b:	mov    DWORD PTR [rax],ebx
   4459d:	mov    ebx,DWORD PTR [rsp-0x20]
   445a1:	mov    DWORD PTR [rax+0x4],r11d
   445a5:	mov    DWORD PTR [rax+0x8],r10d
   445a9:	mov    DWORD PTR [rax+0xc],ebx
   445ac:	pop    rbx
   445ad:	pop    rbp
   445ae:	pop    r12
   445b0:	pop    r13
   445b2:	pop    r14
   445b4:	pop    r15
   445b6:	ret    
   445b7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000445c0 <md5_finish_ctx>:
   445c0:	endbr64 
   445c4:	push   r12
   445c6:	mov    r12,rsi
   445c9:	push   rbp
   445ca:	mov    eax,DWORD PTR [rdi+0x18]
   445cd:	mov    rbp,rdi
   445d0:	mov    edx,DWORD PTR [rbp+0x14]
   445d3:	cmp    eax,0x38
   445d6:	mov    edi,eax
   445d8:	sbb    r8,r8
   445db:	and    r8,0xffffffffffffffc0
   445df:	sub    r8,0xffffffffffffff80
   445e3:	cmp    eax,0x38
   445e6:	sbb    rcx,rcx
   445e9:	and    rcx,0xffffffffffffffc0
   445ed:	add    rcx,0x78
   445f1:	cmp    eax,0x38
   445f4:	sbb    rsi,rsi
   445f7:	and    rsi,0xfffffffffffffff0
   445fb:	add    rsi,0x1f
   445ff:	cmp    eax,0x38
   44602:	sbb    r9,r9
   44605:	and    r9,0xfffffffffffffff0
   44609:	add    r9,0x1e
   4460d:	add    edi,DWORD PTR [rbp+0x10]
   44610:	mov    DWORD PTR [rbp+0x10],edi
   44613:	jae    4461b <md5_finish_ctx+0x5b>
   44615:	add    edx,0x1
   44618:	mov    DWORD PTR [rbp+0x14],edx
   4461b:	lea    r10d,[rdi*8+0x0]
   44623:	shl    edx,0x3
   44626:	shr    edi,0x1d
   44629:	sub    rcx,rax
   4462c:	mov    DWORD PTR [rbp+r9*4+0x1c],r10d
   44631:	or     edx,edi
   44633:	lea    r9,[rbp+0x1c]
   44637:	mov    DWORD PTR [rbp+rsi*4+0x1c],edx
   4463b:	lea    rdx,[r9+rax*1]
   4463f:	lea    rsi,[rip+0x2aeba]        # 6f500 <fillbuf>
   44646:	cmp    rcx,0x8
   4464a:	jae    44670 <md5_finish_ctx+0xb0>
   4464c:	test   cl,0x4
   4464f:	jne    446c0 <md5_finish_ctx+0x100>
   44651:	test   rcx,rcx
   44654:	je     4469c <md5_finish_ctx+0xdc>
   44656:	movzx  eax,BYTE PTR [rip+0x2aea3]        # 6f500 <fillbuf>
   4465d:	mov    BYTE PTR [rdx],al
   4465f:	test   cl,0x2
   44662:	je     4469c <md5_finish_ctx+0xdc>
   44664:	movzx  eax,WORD PTR [rsi+rcx*1-0x2]
   44669:	mov    WORD PTR [rdx+rcx*1-0x2],ax
   4466e:	jmp    4469c <md5_finish_ctx+0xdc>
   44670:	mov    rax,QWORD PTR [rip+0x2ae89]        # 6f500 <fillbuf>
   44677:	lea    rdi,[rdx+0x8]
   4467b:	and    rdi,0xfffffffffffffff8
   4467f:	mov    QWORD PTR [rdx],rax
   44682:	mov    rax,QWORD PTR [rsi+rcx*1-0x8]
   44687:	mov    QWORD PTR [rdx+rcx*1-0x8],rax
   4468c:	sub    rdx,rdi
   4468f:	add    rcx,rdx
   44692:	sub    rsi,rdx
   44695:	shr    rcx,0x3
   44699:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   4469c:	mov    rdx,rbp
   4469f:	mov    rsi,r8
   446a2:	mov    rdi,r9
   446a5:	call   43e40 <md5_process_block>
   446aa:	mov    rsi,r12
   446ad:	mov    rdi,rbp
   446b0:	pop    rbp
   446b1:	pop    r12
   446b3:	jmp    43e20 <md5_read_ctx>
   446b8:	nop    DWORD PTR [rax+rax*1+0x0]
   446c0:	mov    eax,DWORD PTR [rip+0x2ae3a]        # 6f500 <fillbuf>
   446c6:	mov    DWORD PTR [rdx],eax
   446c8:	mov    eax,DWORD PTR [rsi+rcx*1-0x4]
   446cc:	mov    DWORD PTR [rdx+rcx*1-0x4],eax
   446d0:	jmp    4469c <md5_finish_ctx+0xdc>
   446d2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   446dd:	nop    DWORD PTR [rax]

00000000000446e0 <md5_process_bytes>:
   446e0:	endbr64 
   446e4:	push   r15
   446e6:	push   r14
   446e8:	mov    r14,rdx
   446eb:	push   r13
   446ed:	push   r12
   446ef:	push   rbp
   446f0:	mov    rbp,rsi
   446f3:	push   rbx
   446f4:	mov    rbx,rdi
   446f7:	sub    rsp,0x8
   446fb:	mov    eax,DWORD PTR [rdx+0x18]
   446fe:	test   eax,eax
   44700:	jne    44840 <md5_process_bytes+0x160>
   44706:	cmp    rbp,0x3f
   4470a:	jbe    44823 <md5_process_bytes+0x143>
   44710:	test   bl,0x3
   44713:	je     44808 <md5_process_bytes+0x128>
   44719:	lea    r12,[r14+0x1c]
   4471d:	cmp    rbp,0x40
   44721:	je     449a8 <md5_process_bytes+0x2c8>
   44727:	lea    rax,[rbp-0x41]
   4472b:	shr    rax,0x6
   4472f:	mov    r15,rax
   44732:	lea    rax,[rax+0x1]
   44736:	shl    rax,0x6
   4473a:	lea    r13,[rbx+rax*1]
   4473e:	xchg   ax,ax
   44740:	movdqu xmm0,XMMWORD PTR [rbx]
   44744:	mov    rdx,r14
   44747:	mov    esi,0x40
   4474c:	mov    rdi,r12
   4474f:	add    rbx,0x40
   44753:	movups XMMWORD PTR [r12],xmm0
   44758:	movdqu xmm1,XMMWORD PTR [rbx-0x30]
   4475d:	movups XMMWORD PTR [r12+0x10],xmm1
   44763:	movdqu xmm2,XMMWORD PTR [rbx-0x20]
   44768:	movups XMMWORD PTR [r12+0x20],xmm2
   4476e:	movdqu xmm3,XMMWORD PTR [rbx-0x10]
   44773:	movups XMMWORD PTR [r12+0x30],xmm3
   44779:	call   43e40 <md5_process_block>
   4477e:	cmp    rbx,r13
   44781:	jne    44740 <md5_process_bytes+0x60>
   44783:	mov    rax,r15
   44786:	neg    rax
   44789:	shl    rax,0x6
   4478d:	lea    rbp,[rbp+rax*1-0x40]
   44792:	mov    esi,DWORD PTR [r14+0x18]
   44796:	lea    rcx,[r12+rsi*1]
   4479a:	cmp    ebp,0x8
   4479d:	jae    44888 <md5_process_bytes+0x1a8>
   447a3:	test   bpl,0x4
   447a7:	jne    449b0 <md5_process_bytes+0x2d0>
   447ad:	test   ebp,ebp
   447af:	je     447c2 <md5_process_bytes+0xe2>
   447b1:	movzx  eax,BYTE PTR [r13+0x0]
   447b6:	mov    BYTE PTR [rcx],al
   447b8:	test   bpl,0x2
   447bc:	jne    449c6 <md5_process_bytes+0x2e6>
   447c2:	add    rbp,rsi
   447c5:	cmp    rbp,0x3f
   447c9:	jbe    447ee <md5_process_bytes+0x10e>
   447cb:	mov    rdx,r14
   447ce:	mov    esi,0x40
   447d3:	mov    rdi,r12
   447d6:	sub    rbp,0x40
   447da:	call   43e40 <md5_process_block>
   447df:	lea    rsi,[r14+0x5c]
   447e3:	mov    rdx,rbp
   447e6:	mov    rdi,r12
   447e9:	call   cb30 <memcpy@plt>
   447ee:	mov    DWORD PTR [r14+0x18],ebp
   447f2:	add    rsp,0x8
   447f6:	pop    rbx
   447f7:	pop    rbp
   447f8:	pop    r12
   447fa:	pop    r13
   447fc:	pop    r14
   447fe:	pop    r15
   44800:	ret    
   44801:	nop    DWORD PTR [rax+0x0]
   44808:	mov    r12,rbp
   4480b:	mov    rdi,rbx
   4480e:	mov    rdx,r14
   44811:	and    ebp,0x3f
   44814:	and    r12,0xffffffffffffffc0
   44818:	mov    rsi,r12
   4481b:	add    rbx,r12
   4481e:	call   43e40 <md5_process_block>
   44823:	test   rbp,rbp
   44826:	jne    449d8 <md5_process_bytes+0x2f8>
   4482c:	add    rsp,0x8
   44830:	pop    rbx
   44831:	pop    rbp
   44832:	pop    r12
   44834:	pop    r13
   44836:	pop    r14
   44838:	pop    r15
   4483a:	ret    
   4483b:	nop    DWORD PTR [rax+rax*1+0x0]
   44840:	mov    r12d,eax
   44843:	mov    eax,0x80
   44848:	lea    r15,[rdx+0x1c]
   4484c:	sub    rax,r12
   4484f:	lea    rdi,[r15+r12*1]
   44853:	cmp    rax,rsi
   44856:	cmova  rax,rsi
   4485a:	mov    rsi,rbx
   4485d:	mov    rdx,rax
   44860:	mov    r13,rax
   44863:	call   cb30 <memcpy@plt>
   44868:	mov    esi,DWORD PTR [r14+0x18]
   4486c:	add    esi,r13d
   4486f:	mov    DWORD PTR [r14+0x18],esi
   44873:	cmp    esi,0x40
   44876:	ja     448e0 <md5_process_bytes+0x200>
   44878:	add    rbx,r13
   4487b:	sub    rbp,r13
   4487e:	jmp    44706 <md5_process_bytes+0x26>
   44883:	nop    DWORD PTR [rax+rax*1+0x0]
   44888:	mov    rax,QWORD PTR [r13+0x0]
   4488c:	lea    r8,[rcx+0x8]
   44890:	and    r8,0xfffffffffffffff8
   44894:	mov    QWORD PTR [rcx],rax
   44897:	mov    eax,ebp
   44899:	mov    rdx,QWORD PTR [r13+rax*1-0x8]
   4489e:	mov    QWORD PTR [rcx+rax*1-0x8],rdx
   448a3:	sub    rcx,r8
   448a6:	mov    rax,r13
   448a9:	mov    rdx,rcx
   448ac:	sub    rax,rcx
   448af:	add    edx,ebp
   448b1:	and    edx,0xfffffff8
   448b4:	cmp    edx,0x8
   448b7:	jb     447c2 <md5_process_bytes+0xe2>
   448bd:	and    edx,0xfffffff8
   448c0:	xor    ecx,ecx
   448c2:	mov    edi,ecx
   448c4:	add    ecx,0x8
   448c7:	mov    r9,QWORD PTR [rax+rdi*1]
   448cb:	mov    QWORD PTR [r8+rdi*1],r9
   448cf:	cmp    ecx,edx
   448d1:	jb     448c2 <md5_process_bytes+0x1e2>
   448d3:	jmp    447c2 <md5_process_bytes+0xe2>
   448d8:	nop    DWORD PTR [rax+rax*1+0x0]
   448e0:	mov    rdx,r14
   448e3:	and    esi,0xffffffc0
   448e6:	mov    rdi,r15
   448e9:	call   43e40 <md5_process_block>
   448ee:	mov    ecx,DWORD PTR [r14+0x18]
   448f2:	lea    rax,[r12+r13*1]
   448f6:	and    rax,0xffffffffffffffc0
   448fa:	mov    edx,ecx
   448fc:	add    rax,r15
   448ff:	and    edx,0x3f
   44902:	mov    DWORD PTR [r14+0x18],edx
   44906:	cmp    edx,0x8
   44909:	jae    44940 <md5_process_bytes+0x260>
   4490b:	test   cl,0x4
   4490e:	jne    4498f <md5_process_bytes+0x2af>
   44910:	test   edx,edx
   44912:	je     44878 <md5_process_bytes+0x198>
   44918:	movzx  esi,BYTE PTR [rax]
   4491b:	and    ecx,0x2
   4491e:	mov    BYTE PTR [r14+0x1c],sil
   44922:	je     44878 <md5_process_bytes+0x198>
   44928:	movzx  eax,WORD PTR [rax+rdx*1-0x2]
   4492d:	mov    WORD PTR [r15+rdx*1-0x2],ax
   44933:	jmp    44878 <md5_process_bytes+0x198>
   44938:	nop    DWORD PTR [rax+rax*1+0x0]
   44940:	mov    rcx,QWORD PTR [rax]
   44943:	mov    QWORD PTR [r14+0x1c],rcx
   44947:	mov    ecx,edx
   44949:	mov    rsi,QWORD PTR [rax+rcx*1-0x8]
   4494e:	mov    QWORD PTR [r15+rcx*1-0x8],rsi
   44953:	lea    rsi,[r14+0x24]
   44957:	and    rsi,0xfffffffffffffff8
   4495b:	sub    r15,rsi
   4495e:	sub    rax,r15
   44961:	add    r15d,edx
   44964:	and    r15d,0xfffffff8
   44968:	cmp    r15d,0x8
   4496c:	jb     44878 <md5_process_bytes+0x198>
   44972:	and    r15d,0xfffffff8
   44976:	xor    edx,edx
   44978:	mov    ecx,edx
   4497a:	add    edx,0x8
   4497d:	mov    rdi,QWORD PTR [rax+rcx*1]
   44981:	mov    QWORD PTR [rsi+rcx*1],rdi
   44985:	cmp    edx,r15d
   44988:	jb     44978 <md5_process_bytes+0x298>
   4498a:	jmp    44878 <md5_process_bytes+0x198>
   4498f:	mov    ecx,DWORD PTR [rax]
   44991:	mov    DWORD PTR [r14+0x1c],ecx
   44995:	mov    eax,DWORD PTR [rax+rdx*1-0x4]
   44999:	mov    DWORD PTR [r15+rdx*1-0x4],eax
   4499e:	jmp    44878 <md5_process_bytes+0x198>
   449a3:	nop    DWORD PTR [rax+rax*1+0x0]
   449a8:	mov    r13,rbx
   449ab:	jmp    44792 <md5_process_bytes+0xb2>
   449b0:	mov    eax,DWORD PTR [r13+0x0]
   449b4:	mov    DWORD PTR [rcx],eax
   449b6:	mov    eax,ebp
   449b8:	mov    edx,DWORD PTR [r13+rax*1-0x4]
   449bd:	mov    DWORD PTR [rcx+rax*1-0x4],edx
   449c1:	jmp    447c2 <md5_process_bytes+0xe2>
   449c6:	mov    eax,ebp
   449c8:	movzx  edx,WORD PTR [r13+rax*1-0x2]
   449ce:	mov    WORD PTR [rcx+rax*1-0x2],dx
   449d3:	jmp    447c2 <md5_process_bytes+0xe2>
   449d8:	lea    r12,[r14+0x1c]
   449dc:	mov    r13,rbx
   449df:	jmp    44792 <md5_process_bytes+0xb2>
   449e4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   449ef:	nop

00000000000449f0 <md5_buffer>:
   449f0:	endbr64 
   449f4:	push   r12
   449f6:	push   rbp
   449f7:	mov    rbp,rdx
   449fa:	sub    rsp,0xb8
   44a01:	mov    rax,QWORD PTR fs:0x28
   44a0a:	mov    QWORD PTR [rsp+0xa8],rax
   44a12:	xor    eax,eax
   44a14:	mov    r12,rsp
   44a17:	mov    DWORD PTR [rsp+0x18],0x0
   44a1f:	movabs rax,0xefcdab8967452301
   44a29:	mov    QWORD PTR [rsp],rax
   44a2d:	mov    rdx,r12
   44a30:	movabs rax,0x1032547698badcfe
   44a3a:	mov    QWORD PTR [rsp+0x8],rax
   44a3f:	mov    QWORD PTR [rsp+0x10],0x0
   44a48:	call   446e0 <md5_process_bytes>
   44a4d:	mov    rsi,rbp
   44a50:	mov    rdi,r12
   44a53:	call   445c0 <md5_finish_ctx>
   44a58:	mov    rcx,QWORD PTR [rsp+0xa8]
   44a60:	xor    rcx,QWORD PTR fs:0x28
   44a69:	jne    44a76 <md5_buffer+0x86>
   44a6b:	add    rsp,0xb8
   44a72:	pop    rbp
   44a73:	pop    r12
   44a75:	ret    
   44a76:	call   c7b0 <__stack_chk_fail@plt>
   44a7b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000044a80 <md5_stream>:
   44a80:	endbr64 
   44a84:	push   r15
   44a86:	push   r14
   44a88:	mov    r14,rdi
   44a8b:	mov    edi,0x8048
   44a90:	push   r13
   44a92:	mov    r13,rsi
   44a95:	push   r12
   44a97:	push   rbp
   44a98:	push   rbx
   44a99:	sub    rsp,0xb8
   44aa0:	mov    rax,QWORD PTR fs:0x28
   44aa9:	mov    QWORD PTR [rsp+0xa8],rax
   44ab1:	xor    eax,eax
   44ab3:	call   c0e0 <malloc@plt>
   44ab8:	test   rax,rax
   44abb:	je     44bb5 <md5_stream+0x135>
   44ac1:	mov    r12,rax
   44ac4:	mov    DWORD PTR [rsp+0x18],0x0
   44acc:	mov    ebx,0x8000
   44ad1:	movabs rax,0xefcdab8967452301
   44adb:	mov    QWORD PTR [rsp],rax
   44adf:	movabs rax,0x1032547698badcfe
   44ae9:	mov    QWORD PTR [rsp+0x8],rax
   44aee:	mov    QWORD PTR [rsp+0x10],0x0
   44af7:	xor    ebp,ebp
   44af9:	jmp    44b28 <md5_stream+0xa8>
   44afb:	nop    DWORD PTR [rax+rax*1+0x0]
   44b00:	mov    rdx,rbx
   44b03:	lea    rdi,[r12+rbp*1]
   44b07:	mov    rcx,r14
   44b0a:	mov    esi,0x1
   44b0f:	sub    rdx,rbp
   44b12:	call   c2f0 <fread_unlocked@plt>
   44b17:	add    rbp,rax
   44b1a:	cmp    rbp,0x8000
   44b21:	je     44b70 <md5_stream+0xf0>
   44b23:	test   rax,rax
   44b26:	je     44b88 <md5_stream+0x108>
   44b28:	test   BYTE PTR [r14],0x10
   44b2c:	je     44b00 <md5_stream+0x80>
   44b2e:	mov    r15,rsp
   44b31:	test   rbp,rbp
   44b34:	jne    44ba0 <md5_stream+0x120>
   44b36:	mov    rsi,r13
   44b39:	mov    rdi,r15
   44b3c:	call   445c0 <md5_finish_ctx>
   44b41:	mov    rdi,r12
   44b44:	call   4bdc0 <rpl_free>
   44b49:	xor    eax,eax
   44b4b:	mov    rcx,QWORD PTR [rsp+0xa8]
   44b53:	xor    rcx,QWORD PTR fs:0x28
   44b5c:	jne    44bb0 <md5_stream+0x130>
   44b5e:	add    rsp,0xb8
   44b65:	pop    rbx
   44b66:	pop    rbp
   44b67:	pop    r12
   44b69:	pop    r13
   44b6b:	pop    r14
   44b6d:	pop    r15
   44b6f:	ret    
   44b70:	mov    r15,rsp
   44b73:	mov    esi,0x8000
   44b78:	mov    rdi,r12
   44b7b:	mov    rdx,r15
   44b7e:	call   43e40 <md5_process_block>
   44b83:	jmp    44af7 <md5_stream+0x77>
   44b88:	test   BYTE PTR [r14],0x20
   44b8c:	je     44b2e <md5_stream+0xae>
   44b8e:	mov    rdi,r12
   44b91:	call   4bdc0 <rpl_free>
   44b96:	mov    eax,0x1
   44b9b:	jmp    44b4b <md5_stream+0xcb>
   44b9d:	nop    DWORD PTR [rax]
   44ba0:	mov    rdx,r15
   44ba3:	mov    rsi,rbp
   44ba6:	mov    rdi,r12
   44ba9:	call   446e0 <md5_process_bytes>
   44bae:	jmp    44b36 <md5_stream+0xb6>
   44bb0:	call   c7b0 <__stack_chk_fail@plt>
   44bb5:	mov    eax,0x1
   44bba:	jmp    44b4b <md5_stream+0xcb>
   44bbc:	nop    DWORD PTR [rax+0x0]

0000000000044bc0 <sha1_init_ctx>:
   44bc0:	endbr64 
   44bc4:	movabs rax,0xefcdab8967452301
   44bce:	mov    QWORD PTR [rdi+0x18],0x0
   44bd6:	mov    QWORD PTR [rdi],rax
   44bd9:	movabs rax,0x1032547698badcfe
   44be3:	mov    QWORD PTR [rdi+0x8],rax
   44be7:	mov    eax,0xc3d2e1f0
   44bec:	mov    QWORD PTR [rdi+0x10],rax
   44bf0:	ret    
   44bf1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   44bfc:	nop    DWORD PTR [rax+0x0]

0000000000044c00 <sha1_read_ctx>:
   44c00:	endbr64 
   44c04:	mov    edx,DWORD PTR [rdi]
   44c06:	mov    rax,rsi
   44c09:	bswap  edx
   44c0b:	mov    DWORD PTR [rsi],edx
   44c0d:	mov    edx,DWORD PTR [rdi+0x4]
   44c10:	bswap  edx
   44c12:	mov    DWORD PTR [rsi+0x4],edx
   44c15:	mov    edx,DWORD PTR [rdi+0x8]
   44c18:	bswap  edx
   44c1a:	mov    DWORD PTR [rsi+0x8],edx
   44c1d:	mov    edx,DWORD PTR [rdi+0xc]
   44c20:	bswap  edx
   44c22:	mov    DWORD PTR [rsi+0xc],edx
   44c25:	mov    edx,DWORD PTR [rdi+0x10]
   44c28:	bswap  edx
   44c2a:	mov    DWORD PTR [rsi+0x10],edx
   44c2d:	ret    
   44c2e:	xchg   ax,ax

0000000000044c30 <sha1_process_block>:
   44c30:	endbr64 
   44c34:	push   r15
   44c36:	mov    rcx,rdi
   44c39:	push   r14
   44c3b:	push   r13
   44c3d:	push   r12
   44c3f:	push   rbp
   44c40:	push   rbx
   44c41:	mov    rbx,rdx
   44c44:	sub    rsp,0xb8
   44c4b:	mov    QWORD PTR [rsp+0x50],rdx
   44c50:	mov    rax,QWORD PTR fs:0x28
   44c59:	mov    QWORD PTR [rsp+0xa8],rax
   44c61:	xor    eax,eax
   44c63:	mov    rax,rsi
   44c66:	and    rax,0xfffffffffffffffc
   44c6a:	add    rax,rdi
   44c6d:	mov    QWORD PTR [rsp+0x48],rax
   44c72:	mov    rdi,rax
   44c75:	mov    eax,DWORD PTR [rdx]
   44c77:	mov    DWORD PTR [rsp+0x2c],eax
   44c7b:	mov    eax,DWORD PTR [rdx+0x4]
   44c7e:	mov    DWORD PTR [rsp+0x4],eax
   44c82:	mov    eax,DWORD PTR [rdx+0x8]
   44c85:	mov    DWORD PTR [rsp+0x8],eax
   44c89:	mov    eax,DWORD PTR [rdx+0xc]
   44c8c:	mov    DWORD PTR [rsp+0xc],eax
   44c90:	mov    eax,DWORD PTR [rdx+0x10]
   44c93:	mov    DWORD PTR [rsp+0x30],eax
   44c97:	mov    eax,esi
   44c99:	add    eax,DWORD PTR [rdx+0x14]
   44c9c:	mov    DWORD PTR [rbx+0x14],eax
   44c9f:	mov    eax,DWORD PTR [rbx+0x18]
   44ca2:	setb   dl
   44ca5:	shr    rsi,0x20
   44ca9:	movzx  edx,dl
   44cac:	add    eax,esi
   44cae:	add    eax,edx
   44cb0:	mov    DWORD PTR [rbx+0x18],eax
   44cb3:	lea    rax,[rsp+0x60]
   44cb8:	mov    QWORD PTR [rsp+0x58],rax
   44cbd:	cmp    rcx,rdi
   44cc0:	jae    45efb <sha1_process_block+0x12cb>
   44cc6:	mov    rax,rcx
   44cc9:	nop    DWORD PTR [rax+0x0]
   44cd0:	mov    rsi,QWORD PTR [rsp+0x58]
   44cd5:	xor    edx,edx
   44cd7:	nop    WORD PTR [rax+rax*1+0x0]
   44ce0:	mov    ecx,DWORD PTR [rax+rdx*1]
   44ce3:	bswap  ecx
   44ce5:	mov    DWORD PTR [rsi+rdx*1],ecx
   44ce8:	add    rdx,0x4
   44cec:	cmp    rdx,0x40
   44cf0:	jne    44ce0 <sha1_process_block+0xb0>
   44cf2:	mov    r11d,DWORD PTR [rsp+0x60]
   44cf7:	mov    ebx,DWORD PTR [rsp+0x30]
   44cfb:	add    rax,0x40
   44cff:	mov    esi,DWORD PTR [rsp+0x8]
   44d03:	mov    edi,DWORD PTR [rsp+0xc]
   44d07:	lea    r9d,[r11+rbx*1+0x5a827999]
   44d0f:	mov    ebx,DWORD PTR [rsp+0x2c]
   44d13:	mov    ecx,DWORD PTR [rsp+0x4]
   44d17:	mov    r8d,esi
   44d1a:	mov    r10d,DWORD PTR [rsp+0x64]
   44d1f:	mov    ebp,DWORD PTR [rsp+0x6c]
   44d23:	mov    edx,ebx
   44d25:	mov    r13d,DWORD PTR [rsp+0x70]
   44d2a:	rol    edx,0x5
   44d2d:	add    edx,r9d
   44d30:	mov    r9d,esi
   44d33:	xor    r9d,edi
   44d36:	and    r9d,ecx
   44d39:	ror    ecx,0x2
   44d3c:	xor    r8d,ecx
   44d3f:	xor    r9d,edi
   44d42:	mov    r14d,ecx
   44d45:	and    r8d,ebx
   44d48:	add    r9d,edx
   44d4b:	lea    edx,[r10+rdi*1+0x5a827999]
   44d53:	xor    r8d,esi
   44d56:	add    edx,r8d
   44d59:	mov    r8d,r9d
   44d5c:	rol    r8d,0x5
   44d60:	add    r8d,edx
   44d63:	mov    edx,ebx
   44d65:	mov    ebx,DWORD PTR [rsp+0x68]
   44d69:	ror    edx,0x2
   44d6c:	xor    r14d,edx
   44d6f:	lea    esi,[rbx+rsi*1+0x5a827999]
   44d76:	mov    edi,r14d
   44d79:	mov    r14d,r8d
   44d7c:	and    edi,r9d
   44d7f:	rol    r14d,0x5
   44d83:	xor    edi,ecx
   44d85:	ror    r9d,0x2
   44d89:	lea    ecx,[rbp+rcx*1+0x5a827999]
   44d90:	add    edi,esi
   44d92:	add    edi,r14d
   44d95:	mov    r14d,edx
   44d98:	xor    r14d,r9d
   44d9b:	mov    esi,r14d
   44d9e:	mov    r14d,edi
   44da1:	and    esi,r8d
   44da4:	rol    r14d,0x5
   44da8:	xor    esi,edx
   44daa:	ror    r8d,0x2
   44dae:	lea    edx,[r13+rdx*1+0x5a827999]
   44db6:	add    esi,ecx
   44db8:	mov    r15d,r8d
   44dbb:	add    esi,r14d
   44dbe:	mov    r14d,r9d
   44dc1:	xor    r14d,r8d
   44dc4:	mov    ecx,r14d
   44dc7:	mov    r14d,esi
   44dca:	and    ecx,edi
   44dcc:	xor    ecx,r9d
   44dcf:	add    ecx,edx
   44dd1:	ror    edi,0x2
   44dd4:	xor    r15d,edi
   44dd7:	rol    r14d,0x5
   44ddb:	add    ecx,r14d
   44dde:	mov    edx,r15d
   44de1:	mov    r14d,DWORD PTR [rsp+0x74]
   44de6:	mov    r15d,DWORD PTR [rsp+0x78]
   44deb:	and    edx,esi
   44ded:	ror    esi,0x2
   44df0:	xor    edx,r8d
   44df3:	lea    r9d,[r14+r9*1+0x5a827999]
   44dfb:	lea    r8d,[r15+r8*1+0x5a827999]
   44e03:	mov    r15d,DWORD PTR [rsp+0x7c]
   44e08:	add    edx,r9d
   44e0b:	mov    r9d,ecx
   44e0e:	rol    r9d,0x5
   44e12:	add    edx,r9d
   44e15:	mov    r9d,edi
   44e18:	xor    r9d,esi
   44e1b:	and    r9d,ecx
   44e1e:	ror    ecx,0x2
   44e21:	xor    r9d,edi
   44e24:	lea    edi,[r15+rdi*1+0x5a827999]
   44e2c:	add    r9d,r8d
   44e2f:	mov    r8d,edx
   44e32:	rol    r8d,0x5
   44e36:	add    r9d,r8d
   44e39:	mov    r8d,esi
   44e3c:	xor    r8d,ecx
   44e3f:	mov    r15d,r9d
   44e42:	and    r8d,edx
   44e45:	rol    r15d,0x5
   44e49:	xor    r8d,esi
   44e4c:	ror    edx,0x2
   44e4f:	add    r8d,edi
   44e52:	add    r8d,r15d
   44e55:	mov    r15d,ecx
   44e58:	xor    r15d,edx
   44e5b:	mov    edi,r15d
   44e5e:	mov    r15d,DWORD PTR [rsp+0x80]
   44e66:	and    edi,r9d
   44e69:	ror    r9d,0x2
   44e6d:	xor    edi,ecx
   44e6f:	lea    esi,[r15+rsi*1+0x5a827999]
   44e77:	mov    r15d,r8d
   44e7a:	add    edi,esi
   44e7c:	rol    r15d,0x5
   44e80:	add    edi,r15d
   44e83:	mov    r15d,edx
   44e86:	xor    r15d,r9d
   44e89:	mov    esi,r15d
   44e8c:	mov    r15d,DWORD PTR [rsp+0x84]
   44e94:	and    esi,r8d
   44e97:	ror    r8d,0x2
   44e9b:	xor    esi,edx
   44e9d:	lea    ecx,[r15+rcx*1+0x5a827999]
   44ea5:	mov    r15d,edi
   44ea8:	add    esi,ecx
   44eaa:	rol    r15d,0x5
   44eae:	add    esi,r15d
   44eb1:	mov    r15d,r9d
   44eb4:	xor    r15d,r8d
   44eb7:	mov    ecx,r15d
   44eba:	mov    r15d,DWORD PTR [rsp+0x88]
   44ec2:	and    ecx,edi
   44ec4:	ror    edi,0x2
   44ec7:	xor    ecx,r9d
   44eca:	lea    edx,[r15+rdx*1+0x5a827999]
   44ed2:	mov    r15d,esi
   44ed5:	add    ecx,edx
   44ed7:	rol    r15d,0x5
   44edb:	add    ecx,r15d
   44ede:	mov    r15d,r8d
   44ee1:	xor    r15d,edi
   44ee4:	mov    edx,r15d
   44ee7:	mov    r15d,DWORD PTR [rsp+0x8c]
   44eef:	and    edx,esi
   44ef1:	ror    esi,0x2
   44ef4:	xor    edx,r8d
   44ef7:	lea    r9d,[r15+r9*1+0x5a827999]
   44eff:	mov    r15d,DWORD PTR [rsp+0x90]
   44f07:	add    edx,r9d
   44f0a:	mov    r9d,ecx
   44f0d:	rol    r9d,0x5
   44f11:	lea    r8d,[r15+r8*1+0x5a827999]
   44f19:	mov    r15d,DWORD PTR [rsp+0x94]
   44f21:	add    edx,r9d
   44f24:	mov    r9d,edi
   44f27:	xor    r9d,esi
   44f2a:	and    r9d,ecx
   44f2d:	ror    ecx,0x2
   44f30:	xor    r9d,edi
   44f33:	lea    edi,[r15+rdi*1+0x5a827999]
   44f3b:	add    r9d,r8d
   44f3e:	mov    r8d,edx
   44f41:	rol    r8d,0x5
   44f45:	add    r9d,r8d
   44f48:	mov    r8d,esi
   44f4b:	xor    r8d,ecx
   44f4e:	mov    r15d,r9d
   44f51:	and    r8d,edx
   44f54:	xor    r8d,esi
   44f57:	add    r8d,edi
   44f5a:	rol    r15d,0x5
   44f5e:	xor    r11d,ebx
   44f61:	xor    r10d,ebp
   44f64:	add    r8d,r15d
   44f67:	ror    edx,0x2
   44f6a:	mov    r15d,ecx
   44f6d:	xor    r11d,DWORD PTR [rsp+0x80]
   44f75:	xor    r15d,edx
   44f78:	xor    r11d,DWORD PTR [rsp+0x94]
   44f80:	xor    r10d,DWORD PTR [rsp+0x84]
   44f88:	mov    edi,r15d
   44f8b:	mov    r15d,DWORD PTR [rsp+0x98]
   44f93:	xor    r10d,DWORD PTR [rsp+0x98]
   44f9b:	and    edi,r9d
   44f9e:	ror    r9d,0x2
   44fa2:	xor    edi,ecx
   44fa4:	lea    esi,[r15+rsi*1+0x5a827999]
   44fac:	mov    r15d,r8d
   44faf:	rol    r10d,1
   44fb2:	add    edi,esi
   44fb4:	rol    r15d,0x5
   44fb8:	add    edi,r15d
   44fbb:	mov    r15d,edx
   44fbe:	xor    r15d,r9d
   44fc1:	mov    esi,r15d
   44fc4:	mov    r15d,DWORD PTR [rsp+0x9c]
   44fcc:	and    esi,r8d
   44fcf:	ror    r8d,0x2
   44fd3:	xor    esi,edx
   44fd5:	lea    ecx,[r15+rcx*1+0x5a827999]
   44fdd:	mov    r15d,edi
   44fe0:	add    esi,ecx
   44fe2:	rol    r15d,0x5
   44fe6:	add    esi,r15d
   44fe9:	mov    r15d,r11d
   44fec:	mov    r11d,r9d
   44fef:	xor    r11d,r8d
   44ff2:	rol    r15d,1
   44ff5:	mov    ecx,r11d
   44ff8:	lea    edx,[r15+rdx*1+0x5a827999]
   45000:	mov    r11d,esi
   45003:	mov    DWORD PTR [rsp+0x1c],r15d
   45008:	and    ecx,edi
   4500a:	rol    r11d,0x5
   4500e:	xor    ecx,r9d
   45011:	ror    edi,0x2
   45014:	lea    r9d,[r10+r9*1+0x5a827999]
   4501c:	add    ecx,edx
   4501e:	mov    r12d,edi
   45021:	add    ecx,r11d
   45024:	mov    r11d,r8d
   45027:	xor    r11d,edi
   4502a:	mov    edx,r11d
   4502d:	and    edx,esi
   4502f:	ror    esi,0x2
   45032:	xor    edx,r8d
   45035:	xor    r12d,esi
   45038:	add    edx,r9d
   4503b:	mov    r9d,ecx
   4503e:	and    r12d,ecx
   45041:	ror    ecx,0x2
   45044:	rol    r9d,0x5
   45048:	xor    r12d,edi
   4504b:	add    edx,r9d
   4504e:	mov    r9d,ebx
   45051:	xor    r9d,r13d
   45054:	xor    r9d,DWORD PTR [rsp+0x88]
   4505c:	xor    r13d,DWORD PTR [rsp+0x78]
   45061:	xor    r9d,DWORD PTR [rsp+0x9c]
   45069:	rol    r9d,1
   4506c:	lea    r8d,[r9+r8*1+0x5a827999]
   45074:	add    r12d,r8d
   45077:	mov    r8d,edx
   4507a:	rol    r8d,0x5
   4507e:	add    r12d,r8d
   45081:	mov    r8d,ebp
   45084:	xor    r8d,r14d
   45087:	xor    r8d,DWORD PTR [rsp+0x8c]
   4508f:	mov    r11d,r12d
   45092:	xor    r8d,r15d
   45095:	mov    r15d,esi
   45098:	rol    r11d,0x5
   4509c:	xor    r15d,ecx
   4509f:	rol    r8d,1
   450a2:	mov    ebx,r15d
   450a5:	lea    edi,[r8+rdi*1+0x5a827999]
   450ad:	mov    r15d,ecx
   450b0:	and    ebx,edx
   450b2:	ror    edx,0x2
   450b5:	xor    ebx,esi
   450b7:	mov    ebp,edx
   450b9:	add    ebx,edi
   450bb:	mov    edi,DWORD PTR [rsp+0x90]
   450c2:	add    ebx,r11d
   450c5:	xor    edi,r13d
   450c8:	xor    edi,r10d
   450cb:	rol    edi,1
   450cd:	xor    r15d,edx
   450d0:	xor    r14d,DWORD PTR [rsp+0x7c]
   450d5:	xor    r15d,r12d
   450d8:	lea    esi,[rdi+rsi*1+0x6ed9eba1]
   450df:	ror    r12d,0x2
   450e3:	add    esi,r15d
   450e6:	mov    r15d,ebx
   450e9:	xor    ebp,r12d
   450ec:	rol    r15d,0x5
   450f0:	xor    ebp,ebx
   450f2:	ror    ebx,0x2
   450f5:	add    r15d,esi
   450f8:	mov    esi,DWORD PTR [rsp+0x94]
   450ff:	mov    r11d,DWORD PTR [rsp+0x7c]
   45104:	mov    r13d,ebx
   45107:	xor    r11d,DWORD PTR [rsp+0x84]
   4510f:	xor    esi,r14d
   45112:	mov    r14d,DWORD PTR [rsp+0x78]
   45117:	xor    r14d,DWORD PTR [rsp+0x80]
   4511f:	xor    esi,r9d
   45122:	rol    esi,1
   45124:	lea    ecx,[rsi+rcx*1+0x6ed9eba1]
   4512b:	add    ecx,ebp
   4512d:	mov    ebp,r15d
   45130:	rol    ebp,0x5
   45133:	add    ebp,ecx
   45135:	mov    ecx,DWORD PTR [rsp+0x98]
   4513c:	xor    ecx,r14d
   4513f:	mov    r14d,r12d
   45142:	xor    ecx,r8d
   45145:	xor    r14d,ebx
   45148:	rol    ecx,1
   4514a:	xor    r14d,r15d
   4514d:	ror    r15d,0x2
   45151:	lea    edx,[rcx+rdx*1+0x6ed9eba1]
   45158:	xor    r13d,r15d
   4515b:	add    edx,r14d
   4515e:	mov    r14d,ebp
   45161:	rol    r14d,0x5
   45165:	add    r14d,edx
   45168:	mov    edx,DWORD PTR [rsp+0x9c]
   4516f:	xor    edx,r11d
   45172:	xor    edx,edi
   45174:	rol    edx,1
   45176:	xor    r13d,ebp
   45179:	ror    ebp,0x2
   4517c:	lea    r12d,[rdx+r12*1+0x6ed9eba1]
   45184:	add    r12d,r13d
   45187:	mov    r13d,r14d
   4518a:	rol    r13d,0x5
   4518e:	add    r13d,r12d
   45191:	mov    r12d,DWORD PTR [rsp+0x80]
   45199:	xor    r12d,DWORD PTR [rsp+0x88]
   451a1:	xor    r12d,DWORD PTR [rsp+0x1c]
   451a6:	xor    r12d,esi
   451a9:	rol    r12d,1
   451ac:	mov    r11d,r12d
   451af:	mov    r12d,r15d
   451b2:	xor    r12d,ebp
   451b5:	lea    ebx,[r11+rbx*1+0x6ed9eba1]
   451bd:	mov    DWORD PTR [rsp+0x20],r11d
   451c2:	mov    r11d,DWORD PTR [rsp+0x84]
   451ca:	xor    r12d,r14d
   451cd:	xor    r11d,DWORD PTR [rsp+0x8c]
   451d5:	ror    r14d,0x2
   451d9:	add    ebx,r12d
   451dc:	mov    r12d,r13d
   451df:	rol    r12d,0x5
   451e3:	add    r12d,ebx
   451e6:	mov    ebx,r11d
   451e9:	xor    ebx,r10d
   451ec:	xor    ebx,ecx
   451ee:	rol    ebx,1
   451f0:	mov    r11d,ebx
   451f3:	mov    ebx,ebp
   451f5:	xor    ebx,r14d
   451f8:	lea    r15d,[r11+r15*1+0x6ed9eba1]
   45200:	mov    DWORD PTR [rsp+0x24],r11d
   45205:	xor    ebx,r13d
   45208:	ror    r13d,0x2
   4520c:	add    ebx,r15d
   4520f:	mov    r15d,r12d
   45212:	rol    r15d,0x5
   45216:	add    r15d,ebx
   45219:	mov    ebx,DWORD PTR [rsp+0x88]
   45220:	xor    ebx,DWORD PTR [rsp+0x90]
   45227:	xor    ebx,r9d
   4522a:	xor    ebx,edx
   4522c:	rol    ebx,1
   4522e:	mov    r11d,ebx
   45231:	mov    ebx,r14d
   45234:	xor    ebx,r13d
   45237:	lea    ebp,[r11+rbp*1+0x6ed9eba1]
   4523f:	mov    DWORD PTR [rsp],r11d
   45243:	xor    ebx,r12d
   45246:	add    ebx,ebp
   45248:	mov    ebp,r15d
   4524b:	rol    ebp,0x5
   4524e:	ror    r12d,0x2
   45252:	add    ebx,ebp
   45254:	mov    ebp,DWORD PTR [rsp+0x8c]
   4525b:	xor    ebp,DWORD PTR [rsp+0x94]
   45262:	xor    ebp,r8d
   45265:	xor    ebp,DWORD PTR [rsp+0x20]
   45269:	rol    ebp,1
   4526b:	mov    r11d,ebp
   4526e:	mov    ebp,r13d
   45271:	xor    ebp,r12d
   45274:	lea    r14d,[r11+r14*1+0x6ed9eba1]
   4527c:	mov    DWORD PTR [rsp+0x10],r11d
   45281:	xor    ebp,r15d
   45284:	ror    r15d,0x2
   45288:	add    ebp,r14d
   4528b:	mov    r14d,ebx
   4528e:	rol    r14d,0x5
   45292:	add    r14d,ebp
   45295:	mov    ebp,DWORD PTR [rsp+0x90]
   4529c:	xor    ebp,DWORD PTR [rsp+0x98]
   452a3:	xor    ebp,edi
   452a5:	xor    ebp,DWORD PTR [rsp+0x24]
   452a9:	rol    ebp,1
   452ab:	mov    r11d,ebp
   452ae:	mov    ebp,r12d
   452b1:	xor    ebp,r15d
   452b4:	lea    r13d,[r11+r13*1+0x6ed9eba1]
   452bc:	mov    DWORD PTR [rsp+0x14],r11d
   452c1:	xor    ebp,ebx
   452c3:	ror    ebx,0x2
   452c6:	add    ebp,r13d
   452c9:	mov    r13d,r14d
   452cc:	rol    r13d,0x5
   452d0:	add    r13d,ebp
   452d3:	mov    ebp,DWORD PTR [rsp+0x94]
   452da:	xor    ebp,DWORD PTR [rsp+0x9c]
   452e1:	xor    ebp,esi
   452e3:	xor    ebp,DWORD PTR [rsp]
   452e6:	rol    ebp,1
   452e8:	mov    r11d,ebp
   452eb:	mov    ebp,r15d
   452ee:	xor    ebp,ebx
   452f0:	lea    r12d,[r11+r12*1+0x6ed9eba1]
   452f8:	mov    DWORD PTR [rsp+0x34],r11d
   452fd:	xor    ebp,r14d
   45300:	add    ebp,r12d
   45303:	mov    r12d,r13d
   45306:	rol    r12d,0x5
   4530a:	add    r12d,ebp
   4530d:	ror    r14d,0x2
   45311:	mov    ebp,DWORD PTR [rsp+0x1c]
   45315:	xor    ebp,DWORD PTR [rsp+0x98]
   4531c:	xor    ebp,ecx
   4531e:	xor    ebp,DWORD PTR [rsp+0x10]
   45322:	rol    ebp,1
   45324:	mov    r11d,ebp
   45327:	mov    ebp,ebx
   45329:	xor    ebp,r14d
   4532c:	lea    r15d,[r11+r15*1+0x6ed9eba1]
   45334:	mov    DWORD PTR [rsp+0x18],r11d
   45339:	xor    ebp,r13d
   4533c:	ror    r13d,0x2
   45340:	add    ebp,r15d
   45343:	mov    r15d,r12d
   45346:	rol    r15d,0x5
   4534a:	add    ebp,r15d
   4534d:	mov    r15d,DWORD PTR [rsp+0x9c]
   45355:	xor    r15d,r10d
   45358:	xor    r10d,r8d
   4535b:	xor    r15d,edx
   4535e:	xor    r15d,DWORD PTR [rsp+0x14]
   45363:	rol    r15d,1
   45366:	mov    r11d,r15d
   45369:	mov    r15d,r14d
   4536c:	xor    r15d,r13d
   4536f:	mov    DWORD PTR [rsp+0x38],r11d
   45374:	lea    ebx,[r11+rbx*1+0x6ed9eba1]
   4537c:	mov    r11d,DWORD PTR [rsp+0x1c]
   45381:	xor    r15d,r12d
   45384:	ror    r12d,0x2
   45388:	add    ebx,r15d
   4538b:	mov    r15d,ebp
   4538e:	xor    r11d,r9d
   45391:	xor    r11d,DWORD PTR [rsp+0x20]
   45396:	rol    r15d,0x5
   4539a:	xor    r11d,DWORD PTR [rsp+0x34]
   4539f:	add    ebx,r15d
   453a2:	mov    r15d,r11d
   453a5:	mov    r11d,r13d
   453a8:	rol    r15d,1
   453ab:	xor    r11d,r12d
   453ae:	xor    r11d,ebp
   453b1:	lea    r14d,[r15+r14*1+0x6ed9eba1]
   453b9:	ror    ebp,0x2
   453bc:	add    r11d,r14d
   453bf:	mov    r14d,ebx
   453c2:	rol    r14d,0x5
   453c6:	add    r11d,r14d
   453c9:	xor    r10d,DWORD PTR [rsp+0x24]
   453ce:	xor    r10d,DWORD PTR [rsp+0x18]
   453d3:	xor    r9d,edi
   453d6:	rol    r10d,1
   453d9:	xor    r9d,DWORD PTR [rsp]
   453dd:	xor    r9d,DWORD PTR [rsp+0x38]
   453e2:	xor    r8d,esi
   453e5:	mov    r14d,r10d
   453e8:	mov    r10d,r12d
   453eb:	rol    r9d,1
   453ee:	xor    r8d,DWORD PTR [rsp+0x10]
   453f3:	xor    r10d,ebp
   453f6:	lea    r13d,[r14+r13*1+0x6ed9eba1]
   453fe:	xor    r8d,r15d
   45401:	xor    edi,ecx
   45403:	xor    r10d,ebx
   45406:	ror    ebx,0x2
   45409:	xor    edi,DWORD PTR [rsp+0x14]
   4540d:	add    r10d,r13d
   45410:	mov    r13d,r11d
   45413:	rol    r8d,1
   45416:	xor    edi,r14d
   45419:	rol    r13d,0x5
   4541d:	add    r10d,r13d
   45420:	mov    r13d,r9d
   45423:	mov    r9d,ebp
   45426:	xor    r9d,ebx
   45429:	lea    r12d,[r13+r12*1+0x6ed9eba1]
   45431:	xor    r9d,r11d
   45434:	ror    r11d,0x2
   45438:	add    r9d,r12d
   4543b:	mov    r12d,r10d
   4543e:	rol    r12d,0x5
   45442:	add    r9d,r12d
   45445:	mov    r12d,r8d
   45448:	mov    r8d,ebx
   4544b:	xor    r8d,r11d
   4544e:	lea    ebp,[r12+rbp*1+0x6ed9eba1]
   45456:	xor    r8d,r10d
   45459:	ror    r10d,0x2
   4545d:	add    r8d,ebp
   45460:	mov    ebp,r9d
   45463:	rol    ebp,0x5
   45466:	add    r8d,ebp
   45469:	rol    edi,1
   4546b:	xor    esi,edx
   4546d:	xor    esi,DWORD PTR [rsp+0x34]
   45471:	mov    ebp,edi
   45473:	mov    edi,r11d
   45476:	xor    esi,r13d
   45479:	xor    edi,r10d
   4547c:	lea    ebx,[rbp+rbx*1+0x6ed9eba1]
   45483:	mov    DWORD PTR [rsp+0x1c],ebp
   45487:	xor    edi,r9d
   4548a:	ror    r9d,0x2
   4548e:	add    edi,ebx
   45490:	mov    ebx,r8d
   45493:	rol    ebx,0x5
   45496:	add    edi,ebx
   45498:	mov    ebx,esi
   4549a:	mov    esi,r10d
   4549d:	rol    ebx,1
   4549f:	xor    esi,r9d
   454a2:	mov    ebp,edi
   454a4:	xor    esi,r8d
   454a7:	lea    r11d,[rbx+r11*1+0x6ed9eba1]
   454af:	rol    ebp,0x5
   454b2:	mov    DWORD PTR [rsp+0x3c],ebx
   454b6:	add    esi,r11d
   454b9:	mov    r11d,DWORD PTR [rsp+0x20]
   454be:	ror    r8d,0x2
   454c2:	add    esi,ebp
   454c4:	xor    ecx,r11d
   454c7:	xor    ecx,DWORD PTR [rsp+0x18]
   454cb:	xor    ecx,r12d
   454ce:	rol    ecx,1
   454d0:	mov    ebp,ecx
   454d2:	mov    ecx,r9d
   454d5:	mov    DWORD PTR [rsp+0x20],ebp
   454d9:	xor    ecx,r8d
   454dc:	lea    r10d,[rbp+r10*1+0x6ed9eba1]
   454e4:	mov    ebp,DWORD PTR [rsp+0x24]
   454e8:	xor    ecx,edi
   454ea:	ror    edi,0x2
   454ed:	add    ecx,r10d
   454f0:	xor    edx,ebp
   454f2:	mov    r10d,esi
   454f5:	xor    edx,DWORD PTR [rsp+0x38]
   454f9:	xor    edx,DWORD PTR [rsp+0x1c]
   454fd:	rol    r10d,0x5
   45501:	rol    edx,1
   45503:	add    ecx,r10d
   45506:	mov    r10d,edx
   45509:	mov    edx,r8d
   4550c:	xor    edx,edi
   4550e:	lea    r9d,[r10+r9*1+0x6ed9eba1]
   45516:	mov    DWORD PTR [rsp+0x24],r10d
   4551b:	xor    edx,esi
   4551d:	ror    esi,0x2
   45520:	xor    ebp,DWORD PTR [rsp+0x10]
   45524:	add    edx,r9d
   45527:	mov    r9d,ecx
   4552a:	rol    r9d,0x5
   4552e:	add    r9d,edx
   45531:	mov    edx,DWORD PTR [rsp]
   45534:	mov    r10d,r9d
   45537:	xor    edx,r11d
   4553a:	mov    r11d,r9d
   4553d:	xor    edx,r15d
   45540:	rol    r11d,0x5
   45544:	xor    edx,ebx
   45546:	mov    ebx,ebp
   45548:	mov    ebp,r9d
   4554b:	ror    r9d,0x2
   4554f:	rol    edx,1
   45551:	xor    ebx,r14d
   45554:	xor    ebx,DWORD PTR [rsp+0x20]
   45558:	lea    r8d,[rdx+r8*1-0x70e44324]
   45560:	mov    DWORD PTR [rsp+0x28],edx
   45564:	add    r8d,r11d
   45567:	mov    r11d,ecx
   4556a:	or     r11d,esi
   4556d:	mov    edx,r11d
   45570:	mov    r11d,ecx
   45573:	ror    ecx,0x2
   45576:	and    r11d,esi
   45579:	and    edx,edi
   4557b:	and    ebp,ecx
   4557d:	or     r10d,ecx
   45580:	or     edx,r11d
   45583:	mov    r11d,ebx
   45586:	and    r10d,esi
   45589:	mov    ebx,DWORD PTR [rsp]
   4558c:	add    r8d,edx
   4558f:	rol    r11d,1
   45592:	mov    edx,ebp
   45594:	xor    ebx,DWORD PTR [rsp+0x14]
   45598:	or     edx,r10d
   4559b:	lea    edi,[r11+rdi*1-0x70e44324]
   455a3:	xor    ebx,r13d
   455a6:	xor    ebx,DWORD PTR [rsp+0x24]
   455aa:	add    edx,edi
   455ac:	mov    edi,r8d
   455af:	mov    r10d,r8d
   455b2:	rol    edi,0x5
   455b5:	add    edi,edx
   455b7:	rol    ebx,1
   455b9:	and    r10d,r9d
   455bc:	mov    ebp,edi
   455be:	lea    esi,[rbx+rsi*1-0x70e44324]
   455c5:	mov    DWORD PTR [rsp+0x40],ebx
   455c9:	mov    ebx,DWORD PTR [rsp+0x34]
   455cd:	rol    ebp,0x5
   455d0:	add    esi,ebp
   455d2:	mov    ebp,r8d
   455d5:	ror    r8d,0x2
   455d9:	or     ebp,r9d
   455dc:	mov    edx,ebp
   455de:	mov    ebp,DWORD PTR [rsp+0x10]
   455e2:	and    edx,ecx
   455e4:	or     edx,r10d
   455e7:	xor    ebp,ebx
   455e9:	mov    r10d,edi
   455ec:	add    esi,edx
   455ee:	xor    ebp,r12d
   455f1:	or     r10d,r8d
   455f4:	xor    ebp,DWORD PTR [rsp+0x28]
   455f8:	mov    edx,edi
   455fa:	rol    ebp,1
   455fc:	and    r10d,r9d
   455ff:	and    edx,r8d
   45602:	lea    ecx,[rbp+rcx*1-0x70e44324]
   45609:	mov    DWORD PTR [rsp],ebp
   4560c:	ror    edi,0x2
   4560f:	or     edx,r10d
   45612:	mov    ebp,DWORD PTR [rsp+0x14]
   45616:	xor    ebp,DWORD PTR [rsp+0x18]
   4561a:	add    edx,ecx
   4561c:	mov    ecx,esi
   4561e:	xor    ebp,DWORD PTR [rsp+0x1c]
   45622:	rol    ecx,0x5
   45625:	xor    ebp,r11d
   45628:	add    ecx,edx
   4562a:	rol    ebp,1
   4562c:	mov    r10d,ecx
   4562f:	lea    r9d,[rbp+r9*1-0x70e44324]
   45637:	mov    DWORD PTR [rsp+0x14],ebp
   4563b:	mov    ebp,ebx
   4563d:	rol    r10d,0x5
   45641:	mov    ebx,DWORD PTR [rsp+0x38]
   45645:	add    r9d,r10d
   45648:	mov    r10d,esi
   4564b:	or     r10d,edi
   4564e:	mov    edx,r10d
   45651:	mov    r10d,esi
   45654:	and    r10d,edi
   45657:	and    edx,r8d
   4565a:	or     edx,r10d
   4565d:	add    r9d,edx
   45660:	ror    esi,0x2
   45663:	xor    ebp,ebx
   45665:	xor    ebp,DWORD PTR [rsp+0x3c]
   45669:	xor    ebp,DWORD PTR [rsp+0x40]
   4566d:	mov    edx,ecx
   4566f:	mov    r10d,ebp
   45672:	and    edx,esi
   45674:	rol    r10d,1
   45677:	mov    ebp,r10d
   4567a:	mov    r10d,ecx
   4567d:	ror    ecx,0x2
   45680:	or     r10d,esi
   45683:	lea    r8d,[rbp+r8*1-0x70e44324]
   4568b:	mov    DWORD PTR [rsp+0x34],ebp
   4568f:	mov    ebp,DWORD PTR [rsp+0x18]
   45693:	and    r10d,edi
   45696:	or     edx,r10d
   45699:	xor    ebp,r15d
   4569c:	xor    ebp,DWORD PTR [rsp+0x20]
   456a0:	xor    ebp,DWORD PTR [rsp]
   456a3:	add    edx,r8d
   456a6:	mov    r8d,r9d
   456a9:	rol    ebp,1
   456ab:	rol    r8d,0x5
   456af:	lea    edi,[rbp+rdi*1-0x70e44324]
   456b6:	add    r8d,edx
   456b9:	mov    r10d,r8d
   456bc:	rol    r10d,0x5
   456c0:	add    edi,r10d
   456c3:	mov    r10d,r9d
   456c6:	or     r10d,ecx
   456c9:	mov    edx,r10d
   456cc:	mov    r10d,r9d
   456cf:	ror    r9d,0x2
   456d3:	and    r10d,ecx
   456d6:	and    edx,esi
   456d8:	or     edx,r10d
   456db:	mov    r10d,r8d
   456de:	add    edi,edx
   456e0:	mov    edx,ebx
   456e2:	or     r10d,r9d
   456e5:	xor    edx,r14d
   456e8:	xor    edx,DWORD PTR [rsp+0x24]
   456ec:	xor    edx,DWORD PTR [rsp+0x14]
   456f0:	and    r10d,ecx
   456f3:	mov    ebx,edx
   456f5:	mov    edx,r8d
   456f8:	rol    ebx,1
   456fa:	and    edx,r9d
   456fd:	or     edx,r10d
   45700:	lea    esi,[rbx+rsi*1-0x70e44324]
   45707:	xor    r15d,r13d
   4570a:	xor    r14d,r12d
   4570d:	add    edx,esi
   4570f:	mov    esi,edi
   45711:	xor    r15d,DWORD PTR [rsp+0x28]
   45716:	xor    r15d,DWORD PTR [rsp+0x34]
   4571b:	rol    esi,0x5
   4571e:	rol    r15d,1
   45721:	mov    DWORD PTR [rsp+0x38],ebx
   45725:	add    esi,edx
   45727:	lea    ecx,[r15+rcx*1-0x70e44324]
   4572f:	ror    r8d,0x2
   45733:	mov    r10d,esi
   45736:	rol    r10d,0x5
   4573a:	add    ecx,r10d
   4573d:	mov    r10d,edi
   45740:	or     r10d,r8d
   45743:	mov    edx,r10d
   45746:	mov    r10d,edi
   45749:	ror    edi,0x2
   4574c:	and    r10d,r8d
   4574f:	and    edx,r9d
   45752:	or     edx,r10d
   45755:	mov    r10d,r14d
   45758:	xor    r10d,r11d
   4575b:	add    ecx,edx
   4575d:	mov    edx,esi
   4575f:	xor    r10d,ebp
   45762:	and    edx,edi
   45764:	mov    r14d,r10d
   45767:	mov    r10d,esi
   4576a:	ror    esi,0x2
   4576d:	rol    r14d,1
   45770:	or     r10d,edi
   45773:	and    r10d,r8d
   45776:	lea    ebx,[r14+r9*1-0x70e44324]
   4577e:	mov    r9d,ecx
   45781:	or     edx,r10d
   45784:	rol    r9d,0x5
   45788:	add    edx,ebx
   4578a:	mov    ebx,r9d
   4578d:	mov    r9d,DWORD PTR [rsp+0x1c]
   45792:	add    ebx,edx
   45794:	xor    r9d,r13d
   45797:	xor    r9d,DWORD PTR [rsp+0x40]
   4579c:	xor    r9d,DWORD PTR [rsp+0x38]
   457a1:	mov    r10d,ebx
   457a4:	rol    r9d,1
   457a7:	mov    r13d,r9d
   457aa:	lea    r8d,[r9+r8*1-0x70e44324]
   457b2:	mov    r9d,ebx
   457b5:	rol    r9d,0x5
   457b9:	add    r8d,r9d
   457bc:	mov    r9d,ecx
   457bf:	or     r9d,esi
   457c2:	mov    edx,r9d
   457c5:	mov    r9d,ecx
   457c8:	ror    ecx,0x2
   457cb:	and    r9d,esi
   457ce:	and    edx,edi
   457d0:	and    r10d,ecx
   457d3:	or     edx,r9d
   457d6:	lea    r9d,[rdx+r8*1]
   457da:	mov    r8d,DWORD PTR [rsp+0x3c]
   457df:	mov    edx,r10d
   457e2:	xor    r8d,r12d
   457e5:	xor    r8d,DWORD PTR [rsp]
   457e9:	xor    r8d,r15d
   457ec:	rol    r8d,1
   457ef:	mov    r12d,r8d
   457f2:	mov    r8d,ebx
   457f5:	ror    ebx,0x2
   457f8:	or     r8d,ecx
   457fb:	lea    r10d,[r12+rdi*1-0x70e44324]
   45803:	mov    edi,DWORD PTR [rsp+0x1c]
   45807:	xor    edi,DWORD PTR [rsp+0x20]
   4580b:	and    r8d,esi
   4580e:	xor    edi,DWORD PTR [rsp+0x14]
   45812:	or     edx,r8d
   45815:	mov    r8d,r9d
   45818:	xor    edi,r14d
   4581b:	rol    r8d,0x5
   4581f:	add    edx,r10d
   45822:	rol    edi,1
   45824:	mov    r10d,r8d
   45827:	lea    esi,[rdi+rsi*1-0x70e44324]
   4582e:	mov    DWORD PTR [rsp+0x44],edi
   45832:	add    r10d,edx
   45835:	mov    r8d,r10d
   45838:	rol    r8d,0x5
   4583c:	add    esi,r8d
   4583f:	mov    r8d,r9d
   45842:	or     r8d,ebx
   45845:	mov    edx,r8d
   45848:	mov    r8d,r9d
   4584b:	ror    r9d,0x2
   4584f:	and    r8d,ebx
   45852:	and    edx,ecx
   45854:	or     edx,r8d
   45857:	lea    edi,[rdx+rsi*1]
   4585a:	mov    esi,DWORD PTR [rsp+0x34]
   4585e:	mov    edx,DWORD PTR [rsp+0x3c]
   45862:	xor    edx,DWORD PTR [rsp+0x24]
   45866:	xor    esi,edx
   45868:	mov    edx,r10d
   4586b:	xor    esi,r13d
   4586e:	and    edx,r9d
   45871:	rol    esi,1
   45873:	mov    r8d,esi
   45876:	mov    esi,r10d
   45879:	ror    r10d,0x2
   4587d:	or     esi,r9d
   45880:	mov    DWORD PTR [rsp+0x1c],r8d
   45885:	lea    r8d,[r8+rcx*1-0x70e44324]
   4588d:	mov    ecx,edi
   4588f:	and    esi,ebx
   45891:	rol    ecx,0x5
   45894:	or     edx,esi
   45896:	add    edx,r8d
   45899:	mov    r8d,ecx
   4589c:	mov    ecx,DWORD PTR [rsp+0x20]
   458a0:	xor    ecx,DWORD PTR [rsp+0x28]
   458a4:	xor    ecx,ebp
   458a6:	add    r8d,edx
   458a9:	xor    ecx,r12d
   458ac:	mov    esi,r8d
   458af:	rol    ecx,1
   458b1:	rol    esi,0x5
   458b4:	mov    DWORD PTR [rsp+0x3c],ecx
   458b8:	lea    ecx,[rcx+rbx*1-0x70e44324]
   458bf:	add    ecx,esi
   458c1:	mov    esi,edi
   458c3:	or     esi,r10d
   458c6:	mov    edx,esi
   458c8:	mov    esi,edi
   458ca:	ror    edi,0x2
   458cd:	and    esi,r10d
   458d0:	and    edx,r9d
   458d3:	or     edx,esi
   458d5:	mov    esi,r8d
   458d8:	add    ecx,edx
   458da:	mov    edx,DWORD PTR [rsp+0x24]
   458de:	or     esi,edi
   458e0:	and    esi,r10d
   458e3:	xor    edx,r11d
   458e6:	xor    edx,DWORD PTR [rsp+0x38]
   458ea:	xor    edx,DWORD PTR [rsp+0x44]
   458ee:	rol    edx,1
   458f0:	mov    ebx,edx
   458f2:	mov    edx,r8d
   458f5:	and    edx,edi
   458f7:	lea    r9d,[rbx+r9*1-0x70e44324]
   458ff:	mov    DWORD PTR [rsp+0x24],ebx
   45903:	mov    ebx,DWORD PTR [rsp+0x40]
   45907:	or     edx,esi
   45909:	add    edx,r9d
   4590c:	mov    r9d,ecx
   4590f:	rol    r9d,0x5
   45913:	ror    r8d,0x2
   45917:	xor    r11d,DWORD PTR [rsp]
   4591b:	add    r9d,edx
   4591e:	mov    edx,DWORD PTR [rsp+0x28]
   45922:	xor    r11d,r14d
   45925:	xor    r11d,DWORD PTR [rsp+0x3c]
   4592a:	rol    r11d,1
   4592d:	xor    edx,ebx
   4592f:	mov    DWORD PTR [rsp+0x10],r11d
   45934:	xor    edx,r15d
   45937:	xor    edx,DWORD PTR [rsp+0x1c]
   4593b:	rol    edx,1
   4593d:	lea    esi,[rdx+r10*1-0x70e44324]
   45945:	mov    r10d,r9d
   45948:	mov    DWORD PTR [rsp+0x28],edx
   4594c:	rol    r10d,0x5
   45950:	add    esi,r10d
   45953:	mov    r10d,ecx
   45956:	or     r10d,r8d
   45959:	mov    edx,r10d
   4595c:	mov    r10d,ecx
   4595f:	ror    ecx,0x2
   45962:	and    r10d,r8d
   45965:	and    edx,edi
   45967:	lea    edi,[r11+rdi*1-0x70e44324]
   4596f:	mov    r11d,DWORD PTR [rsp+0x14]
   45974:	or     edx,r10d
   45977:	lea    r10d,[rdx+rsi*1]
   4597b:	mov    esi,r9d
   4597e:	mov    edx,r9d
   45981:	xor    ebx,r11d
   45984:	or     esi,ecx
   45986:	and    edx,ecx
   45988:	xor    ebx,r13d
   4598b:	xor    ebx,DWORD PTR [rsp+0x24]
   4598f:	rol    ebx,1
   45991:	and    esi,r8d
   45994:	ror    r9d,0x2
   45998:	or     edx,esi
   4599a:	lea    esi,[rbx+r8*1-0x70e44324]
   459a2:	mov    DWORD PTR [rsp+0x14],ebx
   459a6:	mov    ebx,DWORD PTR [rsp+0x34]
   459aa:	add    edx,edi
   459ac:	mov    edi,r10d
   459af:	rol    edi,0x5
   459b2:	add    edi,edx
   459b4:	mov    r8d,edi
   459b7:	rol    r8d,0x5
   459bb:	add    esi,r8d
   459be:	mov    r8d,r10d
   459c1:	or     r8d,r9d
   459c4:	xor    r11d,ebp
   459c7:	xor    r11d,DWORD PTR [rsp+0x44]
   459cc:	xor    r11d,DWORD PTR [rsp+0x10]
   459d1:	mov    edx,r8d
   459d4:	mov    r8d,r10d
   459d7:	ror    r10d,0x2
   459db:	and    r8d,r9d
   459de:	and    edx,ecx
   459e0:	rol    r11d,1
   459e3:	or     edx,r8d
   459e6:	mov    DWORD PTR [rsp+0x18],r11d
   459eb:	lea    r8d,[rdx+rsi*1]
   459ef:	mov    edx,DWORD PTR [rsp]
   459f2:	mov    esi,edi
   459f4:	or     esi,r10d
   459f7:	xor    edx,ebx
   459f9:	and    esi,r9d
   459fc:	lea    r9d,[r11+r9*1-0x359d3e2a]
   45a04:	mov    r11d,DWORD PTR [rsp+0x38]
   45a09:	xor    edx,r12d
   45a0c:	xor    edx,DWORD PTR [rsp+0x28]
   45a10:	rol    edx,1
   45a12:	mov    DWORD PTR [rsp],edx
   45a15:	mov    edx,edi
   45a17:	ror    edi,0x2
   45a1a:	and    edx,r10d
   45a1d:	or     edx,esi
   45a1f:	mov    esi,DWORD PTR [rsp]
   45a22:	lea    ecx,[rsi+rcx*1-0x70e44324]
   45a29:	mov    esi,r10d
   45a2c:	add    edx,ecx
   45a2e:	mov    ecx,r8d
   45a31:	xor    esi,edi
   45a33:	rol    ecx,0x5
   45a36:	add    ecx,edx
   45a38:	mov    edx,esi
   45a3a:	xor    edx,r8d
   45a3d:	ror    r8d,0x2
   45a41:	add    edx,r9d
   45a44:	mov    r9d,ecx
   45a47:	mov    esi,r8d
   45a4a:	rol    r9d,0x5
   45a4e:	add    r9d,edx
   45a51:	mov    edx,ebx
   45a53:	mov    ebx,DWORD PTR [rsp+0x1c]
   45a57:	xor    edx,r11d
   45a5a:	xor    edx,ebx
   45a5c:	xor    edx,DWORD PTR [rsp+0x14]
   45a60:	mov    r8d,edx
   45a63:	rol    r8d,1
   45a66:	mov    edx,r8d
   45a69:	mov    r8d,edi
   45a6c:	mov    DWORD PTR [rsp+0x1c],edx
   45a70:	xor    r8d,esi
   45a73:	lea    edx,[rdx+r10*1-0x359d3e2a]
   45a7b:	mov    r10d,r9d
   45a7e:	xor    r8d,ecx
   45a81:	rol    r10d,0x5
   45a85:	xor    ebp,r15d
   45a88:	xor    ebp,DWORD PTR [rsp+0x3c]
   45a8c:	add    edx,r8d
   45a8f:	mov    r8d,r10d
   45a92:	mov    r10d,ecx
   45a95:	mov    ecx,esi
   45a97:	ror    r10d,0x2
   45a9b:	xor    ebp,DWORD PTR [rsp]
   45a9e:	add    r8d,edx
   45aa1:	xor    r15d,r13d
   45aa4:	xor    ecx,r10d
   45aa7:	rol    ebp,1
   45aa9:	mov    edx,ecx
   45aab:	lea    edi,[rbp+rdi*1-0x359d3e2a]
   45ab2:	mov    DWORD PTR [rsp+0x20],ebp
   45ab6:	xor    edx,r9d
   45ab9:	ror    r9d,0x2
   45abd:	add    edx,edi
   45abf:	mov    edi,r8d
   45ac2:	rol    edi,0x5
   45ac5:	add    edi,edx
   45ac7:	mov    edx,r11d
   45aca:	mov    r11d,r10d
   45acd:	xor    edx,r14d
   45ad0:	xor    edx,DWORD PTR [rsp+0x24]
   45ad4:	xor    edx,DWORD PTR [rsp+0x18]
   45ad8:	xor    r11d,r9d
   45adb:	mov    ecx,edx
   45add:	mov    edx,r11d
   45ae0:	xor    r15d,DWORD PTR [rsp+0x28]
   45ae5:	xor    r15d,DWORD PTR [rsp+0x1c]
   45aea:	rol    ecx,1
   45aec:	xor    edx,r8d
   45aef:	ror    r8d,0x2
   45af3:	lea    esi,[rcx+rsi*1-0x359d3e2a]
   45afa:	mov    r11d,ecx
   45afd:	mov    ecx,r9d
   45b00:	rol    r15d,1
   45b03:	add    edx,esi
   45b05:	mov    esi,edi
   45b07:	xor    ecx,r8d
   45b0a:	mov    ebp,r15d
   45b0d:	rol    esi,0x5
   45b10:	xor    ecx,edi
   45b12:	mov    DWORD PTR [rsp+0x60],r15d
   45b17:	add    esi,edx
   45b19:	lea    edx,[r15+r10*1-0x359d3e2a]
   45b21:	mov    r10d,r14d
   45b24:	mov    r14d,DWORD PTR [rsp+0x44]
   45b29:	mov    r15d,esi
   45b2c:	add    edx,ecx
   45b2e:	mov    DWORD PTR [rsp+0x34],r11d
   45b33:	rol    r15d,0x5
   45b37:	xor    r10d,r12d
   45b3a:	xor    r10d,DWORD PTR [rsp+0x10]
   45b3f:	ror    edi,0x2
   45b42:	xor    r10d,DWORD PTR [rsp+0x20]
   45b47:	mov    ecx,r15d
   45b4a:	mov    DWORD PTR [rsp+0x38],ebp
   45b4e:	rol    r10d,1
   45b51:	add    ecx,edx
   45b53:	mov    r15d,r10d
   45b56:	mov    DWORD PTR [rsp+0x64],r10d
   45b5b:	mov    r10d,r8d
   45b5e:	xor    r10d,edi
   45b61:	lea    r9d,[r15+r9*1-0x359d3e2a]
   45b69:	mov    edx,r10d
   45b6c:	mov    r10d,edi
   45b6f:	xor    edx,esi
   45b71:	ror    esi,0x2
   45b74:	add    edx,r9d
   45b77:	mov    r9d,ecx
   45b7a:	xor    r10d,esi
   45b7d:	rol    r9d,0x5
   45b81:	xor    r10d,ecx
   45b84:	ror    ecx,0x2
   45b87:	add    edx,r9d
   45b8a:	mov    r9d,r13d
   45b8d:	mov    r13d,esi
   45b90:	xor    r9d,r14d
   45b93:	xor    r9d,DWORD PTR [rsp+0x14]
   45b98:	xor    r13d,ecx
   45b9b:	xor    r9d,r11d
   45b9e:	mov    r11d,r13d
   45ba1:	rol    r9d,1
   45ba4:	xor    r11d,edx
   45ba7:	lea    r8d,[r9+r8*1-0x359d3e2a]
   45baf:	mov    DWORD PTR [rsp+0x68],r9d
   45bb4:	add    r8d,r10d
   45bb7:	mov    r10d,edx
   45bba:	rol    r10d,0x5
   45bbe:	add    r10d,r8d
   45bc1:	mov    r8d,r12d
   45bc4:	mov    r12d,DWORD PTR [rsp+0x24]
   45bc9:	xor    r8d,ebx
   45bcc:	xor    r8d,DWORD PTR [rsp]
   45bd0:	mov    r13d,r10d
   45bd3:	xor    r8d,ebp
   45bd6:	rol    r13d,0x5
   45bda:	mov    ebp,DWORD PTR [rsp+0x3c]
   45bde:	mov    DWORD PTR [rsp+0x3c],r15d
   45be3:	rol    r8d,1
   45be6:	lea    edi,[r8+rdi*1-0x359d3e2a]
   45bee:	mov    DWORD PTR [rsp+0x6c],r8d
   45bf3:	add    edi,r11d
   45bf6:	mov    r11d,r13d
   45bf9:	add    r11d,edi
   45bfc:	mov    edi,r14d
   45bff:	ror    edx,0x2
   45c02:	mov    r14d,ecx
   45c05:	xor    edi,ebp
   45c07:	xor    edi,DWORD PTR [rsp+0x18]
   45c0b:	xor    r14d,edx
   45c0e:	xor    ebx,r12d
   45c11:	xor    edi,r15d
   45c14:	mov    r15d,r14d
   45c17:	mov    r14d,r11d
   45c1a:	rol    edi,1
   45c1c:	xor    r15d,r10d
   45c1f:	rol    r14d,0x5
   45c23:	lea    esi,[rdi+rsi*1-0x359d3e2a]
   45c2a:	ror    r10d,0x2
   45c2e:	mov    DWORD PTR [rsp+0x70],edi
   45c32:	add    esi,r15d
   45c35:	mov    r15d,r14d
   45c38:	mov    r14d,edx
   45c3b:	mov    r13d,r10d
   45c3e:	add    r15d,esi
   45c41:	mov    esi,DWORD PTR [rsp+0x1c]
   45c45:	xor    r14d,r10d
   45c48:	xor    r14d,r11d
   45c4b:	ror    r11d,0x2
   45c4f:	xor    esi,ebx
   45c51:	xor    r13d,r11d
   45c54:	mov    ebx,DWORD PTR [rsp+0x38]
   45c58:	xor    esi,r9d
   45c5b:	xor    r13d,r15d
   45c5e:	rol    esi,1
   45c60:	lea    ecx,[rsi+rcx*1-0x359d3e2a]
   45c67:	mov    DWORD PTR [rsp+0x74],esi
   45c6b:	add    ecx,r14d
   45c6e:	mov    r14d,r15d
   45c71:	ror    r15d,0x2
   45c75:	rol    r14d,0x5
   45c79:	add    r14d,ecx
   45c7c:	mov    ecx,ebp
   45c7e:	mov    ebp,DWORD PTR [rsp+0x28]
   45c82:	xor    ecx,ebp
   45c84:	xor    ecx,DWORD PTR [rsp+0x20]
   45c88:	xor    ecx,r8d
   45c8b:	rol    ecx,1
   45c8d:	lea    edx,[rcx+rdx*1-0x359d3e2a]
   45c94:	mov    DWORD PTR [rsp+0x78],ecx
   45c98:	add    edx,r13d
   45c9b:	mov    r13d,r14d
   45c9e:	rol    r13d,0x5
   45ca2:	add    r13d,edx
   45ca5:	mov    edx,DWORD PTR [rsp+0x10]
   45ca9:	xor    edx,r12d
   45cac:	xor    edx,DWORD PTR [rsp+0x34]
   45cb0:	mov    r12d,r11d
   45cb3:	xor    ebp,DWORD PTR [rsp+0x14]
   45cb7:	xor    edx,edi
   45cb9:	xor    r12d,r15d
   45cbc:	xor    ebx,ebp
   45cbe:	rol    edx,1
   45cc0:	xor    r12d,r14d
   45cc3:	xor    ebx,esi
   45cc5:	ror    r14d,0x2
   45cc9:	lea    r10d,[rdx+r10*1-0x359d3e2a]
   45cd1:	rol    ebx,1
   45cd3:	mov    DWORD PTR [rsp+0x7c],edx
   45cd7:	mov    ebp,r14d
   45cda:	add    r10d,r12d
   45cdd:	mov    r12d,r13d
   45ce0:	lea    r11d,[rbx+r11*1-0x359d3e2a]
   45ce8:	mov    DWORD PTR [rsp+0x80],ebx
   45cef:	rol    r12d,0x5
   45cf3:	add    r12d,r10d
   45cf6:	mov    r10d,r15d
   45cf9:	xor    r10d,r14d
   45cfc:	xor    r10d,r13d
   45cff:	ror    r13d,0x2
   45d03:	add    r10d,r11d
   45d06:	mov    r11d,r12d
   45d09:	xor    ebp,r13d
   45d0c:	rol    r11d,0x5
   45d10:	xor    ebp,r12d
   45d13:	ror    r12d,0x2
   45d17:	add    r10d,r11d
   45d1a:	mov    r11d,DWORD PTR [rsp+0x10]
   45d1f:	xor    r11d,DWORD PTR [rsp]
   45d23:	xor    r11d,DWORD PTR [rsp+0x3c]
   45d28:	xor    r11d,ecx
   45d2b:	rol    r11d,1
   45d2e:	lea    r15d,[r11+r15*1-0x359d3e2a]
   45d36:	mov    DWORD PTR [rsp+0x84],r11d
   45d3e:	add    ebp,r15d
   45d41:	mov    r15d,r10d
   45d44:	rol    r15d,0x5
   45d48:	add    ebp,r15d
   45d4b:	mov    r15d,DWORD PTR [rsp+0x14]
   45d50:	xor    r15d,DWORD PTR [rsp+0x18]
   45d55:	xor    r9d,r15d
   45d58:	mov    r15d,r13d
   45d5b:	xor    r9d,edx
   45d5e:	rol    r9d,1
   45d61:	xor    r15d,r12d
   45d64:	xor    r15d,r10d
   45d67:	lea    r14d,[r9+r14*1-0x359d3e2a]
   45d6f:	mov    DWORD PTR [rsp+0x88],r9d
   45d77:	add    r14d,r15d
   45d7a:	mov    r15d,ebp
   45d7d:	rol    r15d,0x5
   45d81:	add    r14d,r15d
   45d84:	mov    r15d,r10d
   45d87:	mov    r10d,DWORD PTR [rsp]
   45d8b:	xor    r10d,DWORD PTR [rsp+0x1c]
   45d90:	xor    r8d,r10d
   45d93:	ror    r15d,0x2
   45d97:	xor    ebx,r8d
   45d9a:	mov    r8d,r12d
   45d9d:	rol    ebx,1
   45d9f:	xor    r8d,r15d
   45da2:	lea    r10d,[rbx+r13*1-0x359d3e2a]
   45daa:	xor    r8d,ebp
   45dad:	mov    r13d,DWORD PTR [rsp+0x18]
   45db2:	xor    r13d,DWORD PTR [rsp+0x20]
   45db7:	add    r8d,r10d
   45dba:	mov    r10d,r14d
   45dbd:	xor    edi,r13d
   45dc0:	ror    ebp,0x2
   45dc3:	rol    r10d,0x5
   45dc7:	xor    r11d,edi
   45dca:	mov    DWORD PTR [rsp+0x8c],ebx
   45dd1:	add    r8d,r10d
   45dd4:	mov    r10d,r15d
   45dd7:	rol    r11d,1
   45dda:	xor    r10d,ebp
   45ddd:	lea    edi,[r11+r12*1-0x359d3e2a]
   45de5:	mov    r13d,r8d
   45de8:	mov    DWORD PTR [rsp+0x90],r11d
   45df0:	xor    r10d,r14d
   45df3:	rol    r13d,0x5
   45df7:	add    r10d,edi
   45dfa:	mov    edi,DWORD PTR [rsp+0x1c]
   45dfe:	ror    r14d,0x2
   45e02:	add    r10d,r13d
   45e05:	mov    r13d,DWORD PTR [rsp+0x34]
   45e0a:	xor    edi,r13d
   45e0d:	xor    esi,edi
   45e0f:	xor    r9d,esi
   45e12:	mov    esi,ebp
   45e14:	rol    r9d,1
   45e17:	xor    esi,r14d
   45e1a:	xor    esi,r8d
   45e1d:	lea    edi,[r9+r15*1-0x359d3e2a]
   45e25:	ror    r8d,0x2
   45e29:	mov    DWORD PTR [rsp+0x94],r9d
   45e31:	mov    r9d,r10d
   45e34:	add    esi,edi
   45e36:	mov    edi,DWORD PTR [rsp+0x20]
   45e3a:	xor    edi,DWORD PTR [rsp+0x38]
   45e3e:	rol    r9d,0x5
   45e42:	xor    ecx,edi
   45e44:	add    esi,r9d
   45e47:	mov    r9d,r14d
   45e4a:	xor    ebx,ecx
   45e4c:	xor    r9d,r8d
   45e4f:	rol    ebx,1
   45e51:	mov    ecx,r9d
   45e54:	lea    edi,[rbx+rbp*1-0x359d3e2a]
   45e5b:	mov    r9d,esi
   45e5e:	mov    DWORD PTR [rsp+0x98],ebx
   45e65:	xor    ecx,r10d
   45e68:	ror    r10d,0x2
   45e6c:	add    ecx,edi
   45e6e:	mov    edi,DWORD PTR [rsp+0x3c]
   45e72:	rol    r9d,0x5
   45e76:	add    ecx,r9d
   45e79:	add    DWORD PTR [rsp+0x4],ecx
   45e7d:	xor    edi,r13d
   45e80:	xor    edx,edi
   45e82:	mov    edi,DWORD PTR [rsp+0x2c]
   45e86:	xor    edx,r11d
   45e89:	rol    edx,1
   45e8b:	mov    DWORD PTR [rsp+0x9c],edx
   45e92:	lea    edx,[rdx+rdi*1-0x359d3e2a]
   45e99:	add    r14d,edx
   45e9c:	mov    edx,r8d
   45e9f:	xor    edx,r10d
   45ea2:	xor    edx,esi
   45ea4:	ror    esi,0x2
   45ea7:	add    DWORD PTR [rsp+0x8],esi
   45eab:	mov    esi,DWORD PTR [rsp+0x8]
   45eaf:	add    r14d,edx
   45eb2:	mov    edx,ecx
   45eb4:	mov    ecx,DWORD PTR [rsp+0x4]
   45eb8:	rol    edx,0x5
   45ebb:	add    r14d,edx
   45ebe:	mov    DWORD PTR [rsp+0x2c],r14d
   45ec3:	mov    r11d,r14d
   45ec6:	mov    r14,QWORD PTR [rsp+0x50]
   45ecb:	mov    DWORD PTR [r14],r11d
   45ece:	mov    DWORD PTR [r14+0x4],ecx
   45ed2:	mov    DWORD PTR [r14+0x8],esi
   45ed6:	add    DWORD PTR [rsp+0xc],r10d
   45edb:	mov    edi,DWORD PTR [rsp+0xc]
   45edf:	add    DWORD PTR [rsp+0x30],r8d
   45ee4:	mov    ebx,DWORD PTR [rsp+0x30]
   45ee8:	mov    DWORD PTR [r14+0xc],edi
   45eec:	mov    DWORD PTR [r14+0x10],ebx
   45ef0:	cmp    QWORD PTR [rsp+0x48],rax
   45ef5:	ja     44cd0 <sha1_process_block+0xa0>
   45efb:	mov    rax,QWORD PTR [rsp+0xa8]
   45f03:	xor    rax,QWORD PTR fs:0x28
   45f0c:	jne    45f20 <sha1_process_block+0x12f0>
   45f0e:	add    rsp,0xb8
   45f15:	pop    rbx
   45f16:	pop    rbp
   45f17:	pop    r12
   45f19:	pop    r13
   45f1b:	pop    r14
   45f1d:	pop    r15
   45f1f:	ret    
   45f20:	call   c7b0 <__stack_chk_fail@plt>
   45f25:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000045f30 <sha1_finish_ctx>:
   45f30:	endbr64 
   45f34:	push   r12
   45f36:	mov    r12,rdi
   45f39:	push   rbp
   45f3a:	mov    rbp,rsi
   45f3d:	sub    rsp,0x8
   45f41:	mov    eax,DWORD PTR [rdi+0x1c]
   45f44:	mov    edx,DWORD PTR [r12+0x18]
   45f49:	cmp    eax,0x38
   45f4c:	mov    esi,eax
   45f4e:	sbb    r8,r8
   45f51:	and    r8,0xffffffffffffffc0
   45f55:	sub    r8,0xffffffffffffff80
   45f59:	cmp    eax,0x38
   45f5c:	sbb    rcx,rcx
   45f5f:	and    rcx,0xffffffffffffffc0
   45f63:	add    rcx,0x78
   45f67:	cmp    eax,0x38
   45f6a:	sbb    rdi,rdi
   45f6d:	and    rdi,0xfffffffffffffff0
   45f71:	add    rdi,0x1f
   45f75:	cmp    eax,0x38
   45f78:	sbb    r9,r9
   45f7b:	and    r9,0xfffffffffffffff0
   45f7f:	add    r9,0x1e
   45f83:	add    esi,DWORD PTR [r12+0x14]
   45f88:	mov    DWORD PTR [r12+0x14],esi
   45f8d:	jae    45f97 <sha1_finish_ctx+0x67>
   45f8f:	add    edx,0x1
   45f92:	mov    DWORD PTR [r12+0x18],edx
   45f97:	mov    r10d,esi
   45f9a:	shl    edx,0x3
   45f9d:	sub    rcx,rax
   45fa0:	shr    r10d,0x1d
   45fa4:	shl    esi,0x3
   45fa7:	or     edx,r10d
   45faa:	bswap  esi
   45fac:	bswap  edx
   45fae:	mov    DWORD PTR [r12+r9*4+0x20],edx
   45fb3:	lea    r9,[r12+0x20]
   45fb8:	mov    DWORD PTR [r12+rdi*4+0x20],esi
   45fbd:	lea    rdx,[r9+rax*1]
   45fc1:	lea    rsi,[rip+0x29578]        # 6f540 <fillbuf>
   45fc8:	cmp    rcx,0x8
   45fcc:	jae    45ff8 <sha1_finish_ctx+0xc8>
   45fce:	test   cl,0x4
   45fd1:	jne    46048 <sha1_finish_ctx+0x118>
   45fd3:	test   rcx,rcx
   45fd6:	je     46024 <sha1_finish_ctx+0xf4>
   45fd8:	movzx  eax,BYTE PTR [rip+0x29561]        # 6f540 <fillbuf>
   45fdf:	mov    BYTE PTR [rdx],al
   45fe1:	test   cl,0x2
   45fe4:	je     46024 <sha1_finish_ctx+0xf4>
   45fe6:	movzx  eax,WORD PTR [rsi+rcx*1-0x2]
   45feb:	mov    WORD PTR [rdx+rcx*1-0x2],ax
   45ff0:	jmp    46024 <sha1_finish_ctx+0xf4>
   45ff2:	nop    WORD PTR [rax+rax*1+0x0]
   45ff8:	mov    rax,QWORD PTR [rip+0x29541]        # 6f540 <fillbuf>
   45fff:	lea    rdi,[rdx+0x8]
   46003:	and    rdi,0xfffffffffffffff8
   46007:	mov    QWORD PTR [rdx],rax
   4600a:	mov    rax,QWORD PTR [rsi+rcx*1-0x8]
   4600f:	mov    QWORD PTR [rdx+rcx*1-0x8],rax
   46014:	sub    rdx,rdi
   46017:	add    rcx,rdx
   4601a:	sub    rsi,rdx
   4601d:	shr    rcx,0x3
   46021:	rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]
   46024:	mov    rdx,r12
   46027:	mov    rsi,r8
   4602a:	mov    rdi,r9
   4602d:	call   44c30 <sha1_process_block>
   46032:	add    rsp,0x8
   46036:	mov    rsi,rbp
   46039:	mov    rdi,r12
   4603c:	pop    rbp
   4603d:	pop    r12
   4603f:	jmp    44c00 <sha1_read_ctx>
   46044:	nop    DWORD PTR [rax+0x0]
   46048:	mov    eax,DWORD PTR [rip+0x294f2]        # 6f540 <fillbuf>
   4604e:	mov    DWORD PTR [rdx],eax
   46050:	mov    eax,DWORD PTR [rsi+rcx*1-0x4]
   46054:	mov    DWORD PTR [rdx+rcx*1-0x4],eax
   46058:	jmp    46024 <sha1_finish_ctx+0xf4>
   4605a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000046060 <sha1_process_bytes>:
   46060:	endbr64 
   46064:	push   r15
   46066:	push   r14
   46068:	mov    r14,rdx
   4606b:	push   r13
   4606d:	push   r12
   4606f:	push   rbp
   46070:	mov    rbp,rsi
   46073:	push   rbx
   46074:	mov    rbx,rdi
   46077:	sub    rsp,0x8
   4607b:	mov    eax,DWORD PTR [rdx+0x1c]
   4607e:	test   eax,eax
   46080:	jne    461c0 <sha1_process_bytes+0x160>
   46086:	cmp    rbp,0x3f
   4608a:	jbe    461a3 <sha1_process_bytes+0x143>
   46090:	test   bl,0x3
   46093:	je     46188 <sha1_process_bytes+0x128>
   46099:	lea    r12,[r14+0x20]
   4609d:	cmp    rbp,0x40
   460a1:	je     46328 <sha1_process_bytes+0x2c8>
   460a7:	lea    rax,[rbp-0x41]
   460ab:	shr    rax,0x6
   460af:	mov    r15,rax
   460b2:	lea    rax,[rax+0x1]
   460b6:	shl    rax,0x6
   460ba:	lea    r13,[rbx+rax*1]
   460be:	xchg   ax,ax
   460c0:	movdqu xmm0,XMMWORD PTR [rbx]
   460c4:	mov    rdx,r14
   460c7:	mov    esi,0x40
   460cc:	mov    rdi,r12
   460cf:	add    rbx,0x40
   460d3:	movups XMMWORD PTR [r12],xmm0
   460d8:	movdqu xmm1,XMMWORD PTR [rbx-0x30]
   460dd:	movups XMMWORD PTR [r12+0x10],xmm1
   460e3:	movdqu xmm2,XMMWORD PTR [rbx-0x20]
   460e8:	movups XMMWORD PTR [r12+0x20],xmm2
   460ee:	movdqu xmm3,XMMWORD PTR [rbx-0x10]
   460f3:	movups XMMWORD PTR [r12+0x30],xmm3
   460f9:	call   44c30 <sha1_process_block>
   460fe:	cmp    rbx,r13
   46101:	jne    460c0 <sha1_process_bytes+0x60>
   46103:	mov    rax,r15
   46106:	neg    rax
   46109:	shl    rax,0x6
   4610d:	lea    rbp,[rbp+rax*1-0x40]
   46112:	mov    esi,DWORD PTR [r14+0x1c]
   46116:	lea    rcx,[r12+rsi*1]
   4611a:	cmp    ebp,0x8
   4611d:	jae    46208 <sha1_process_bytes+0x1a8>
   46123:	test   bpl,0x4
   46127:	jne    46330 <sha1_process_bytes+0x2d0>
   4612d:	test   ebp,ebp
   4612f:	je     46142 <sha1_process_bytes+0xe2>
   46131:	movzx  eax,BYTE PTR [r13+0x0]
   46136:	mov    BYTE PTR [rcx],al
   46138:	test   bpl,0x2
   4613c:	jne    46346 <sha1_process_bytes+0x2e6>
   46142:	add    rbp,rsi
   46145:	cmp    rbp,0x3f
   46149:	jbe    4616e <sha1_process_bytes+0x10e>
   4614b:	mov    rdx,r14
   4614e:	mov    esi,0x40
   46153:	mov    rdi,r12
   46156:	sub    rbp,0x40
   4615a:	call   44c30 <sha1_process_block>
   4615f:	lea    rsi,[r14+0x60]
   46163:	mov    rdx,rbp
   46166:	mov    rdi,r12
   46169:	call   cb30 <memcpy@plt>
   4616e:	mov    DWORD PTR [r14+0x1c],ebp
   46172:	add    rsp,0x8
   46176:	pop    rbx
   46177:	pop    rbp
   46178:	pop    r12
   4617a:	pop    r13
   4617c:	pop    r14
   4617e:	pop    r15
   46180:	ret    
   46181:	nop    DWORD PTR [rax+0x0]
   46188:	mov    r12,rbp
   4618b:	mov    rdi,rbx
   4618e:	mov    rdx,r14
   46191:	and    ebp,0x3f
   46194:	and    r12,0xffffffffffffffc0
   46198:	mov    rsi,r12
   4619b:	add    rbx,r12
   4619e:	call   44c30 <sha1_process_block>
   461a3:	test   rbp,rbp
   461a6:	jne    46358 <sha1_process_bytes+0x2f8>
   461ac:	add    rsp,0x8
   461b0:	pop    rbx
   461b1:	pop    rbp
   461b2:	pop    r12
   461b4:	pop    r13
   461b6:	pop    r14
   461b8:	pop    r15
   461ba:	ret    
   461bb:	nop    DWORD PTR [rax+rax*1+0x0]
   461c0:	mov    r12d,eax
   461c3:	mov    eax,0x80
   461c8:	lea    r15,[rdx+0x20]
   461cc:	sub    rax,r12
   461cf:	lea    rdi,[r15+r12*1]
   461d3:	cmp    rax,rsi
   461d6:	cmova  rax,rsi
   461da:	mov    rsi,rbx
   461dd:	mov    rdx,rax
   461e0:	mov    r13,rax
   461e3:	call   cb30 <memcpy@plt>
   461e8:	mov    esi,DWORD PTR [r14+0x1c]
   461ec:	add    esi,r13d
   461ef:	mov    DWORD PTR [r14+0x1c],esi
   461f3:	cmp    esi,0x40
   461f6:	ja     46260 <sha1_process_bytes+0x200>
   461f8:	add    rbx,r13
   461fb:	sub    rbp,r13
   461fe:	jmp    46086 <sha1_process_bytes+0x26>
   46203:	nop    DWORD PTR [rax+rax*1+0x0]
   46208:	mov    rax,QWORD PTR [r13+0x0]
   4620c:	lea    r8,[rcx+0x8]
   46210:	and    r8,0xfffffffffffffff8
   46214:	mov    QWORD PTR [rcx],rax
   46217:	mov    eax,ebp
   46219:	mov    rdx,QWORD PTR [r13+rax*1-0x8]
   4621e:	mov    QWORD PTR [rcx+rax*1-0x8],rdx
   46223:	sub    rcx,r8
   46226:	mov    rax,r13
   46229:	mov    rdx,rcx
   4622c:	sub    rax,rcx
   4622f:	add    edx,ebp
   46231:	and    edx,0xfffffff8
   46234:	cmp    edx,0x8
   46237:	jb     46142 <sha1_process_bytes+0xe2>
   4623d:	and    edx,0xfffffff8
   46240:	xor    ecx,ecx
   46242:	mov    edi,ecx
   46244:	add    ecx,0x8
   46247:	mov    r9,QWORD PTR [rax+rdi*1]
   4624b:	mov    QWORD PTR [r8+rdi*1],r9
   4624f:	cmp    ecx,edx
   46251:	jb     46242 <sha1_process_bytes+0x1e2>
   46253:	jmp    46142 <sha1_process_bytes+0xe2>
   46258:	nop    DWORD PTR [rax+rax*1+0x0]
   46260:	mov    rdx,r14
   46263:	and    esi,0xffffffc0
   46266:	mov    rdi,r15
   46269:	call   44c30 <sha1_process_block>
   4626e:	mov    ecx,DWORD PTR [r14+0x1c]
   46272:	lea    rax,[r12+r13*1]
   46276:	and    rax,0xffffffffffffffc0
   4627a:	mov    edx,ecx
   4627c:	add    rax,r15
   4627f:	and    edx,0x3f
   46282:	mov    DWORD PTR [r14+0x1c],edx
   46286:	cmp    edx,0x8
   46289:	jae    462c0 <sha1_process_bytes+0x260>
   4628b:	test   cl,0x4
   4628e:	jne    4630f <sha1_process_bytes+0x2af>
   46290:	test   edx,edx
   46292:	je     461f8 <sha1_process_bytes+0x198>
   46298:	movzx  esi,BYTE PTR [rax]
   4629b:	and    ecx,0x2
   4629e:	mov    BYTE PTR [r14+0x20],sil
   462a2:	je     461f8 <sha1_process_bytes+0x198>
   462a8:	movzx  eax,WORD PTR [rax+rdx*1-0x2]
   462ad:	mov    WORD PTR [r15+rdx*1-0x2],ax
   462b3:	jmp    461f8 <sha1_process_bytes+0x198>
   462b8:	nop    DWORD PTR [rax+rax*1+0x0]
   462c0:	mov    rcx,QWORD PTR [rax]
   462c3:	mov    QWORD PTR [r14+0x20],rcx
   462c7:	mov    ecx,edx
   462c9:	mov    rsi,QWORD PTR [rax+rcx*1-0x8]
   462ce:	mov    QWORD PTR [r15+rcx*1-0x8],rsi
   462d3:	lea    rsi,[r14+0x28]
   462d7:	and    rsi,0xfffffffffffffff8
   462db:	sub    r15,rsi
   462de:	sub    rax,r15
   462e1:	add    r15d,edx
   462e4:	and    r15d,0xfffffff8
   462e8:	cmp    r15d,0x8
   462ec:	jb     461f8 <sha1_process_bytes+0x198>
   462f2:	and    r15d,0xfffffff8
   462f6:	xor    edx,edx
   462f8:	mov    ecx,edx
   462fa:	add    edx,0x8
   462fd:	mov    rdi,QWORD PTR [rax+rcx*1]
   46301:	mov    QWORD PTR [rsi+rcx*1],rdi
   46305:	cmp    edx,r15d
   46308:	jb     462f8 <sha1_process_bytes+0x298>
   4630a:	jmp    461f8 <sha1_process_bytes+0x198>
   4630f:	mov    ecx,DWORD PTR [rax]
   46311:	mov    DWORD PTR [r14+0x20],ecx
   46315:	mov    eax,DWORD PTR [rax+rdx*1-0x4]
   46319:	mov    DWORD PTR [r15+rdx*1-0x4],eax
   4631e:	jmp    461f8 <sha1_process_bytes+0x198>
   46323:	nop    DWORD PTR [rax+rax*1+0x0]
   46328:	mov    r13,rbx
   4632b:	jmp    46112 <sha1_process_bytes+0xb2>
   46330:	mov    eax,DWORD PTR [r13+0x0]
   46334:	mov    DWORD PTR [rcx],eax
   46336:	mov    eax,ebp
   46338:	mov    edx,DWORD PTR [r13+rax*1-0x4]
   4633d:	mov    DWORD PTR [rcx+rax*1-0x4],edx
   46341:	jmp    46142 <sha1_process_bytes+0xe2>
   46346:	mov    eax,ebp
   46348:	movzx  edx,WORD PTR [r13+rax*1-0x2]
   4634e:	mov    WORD PTR [rcx+rax*1-0x2],dx
   46353:	jmp    46142 <sha1_process_bytes+0xe2>
   46358:	lea    r12,[r14+0x20]
   4635c:	mov    r13,rbx
   4635f:	jmp    46112 <sha1_process_bytes+0xb2>
   46364:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4636f:	nop

0000000000046370 <sha1_buffer>:
   46370:	endbr64 
   46374:	push   r12
   46376:	push   rbp
   46377:	mov    rbp,rdx
   4637a:	sub    rsp,0xb8
   46381:	mov    rax,QWORD PTR fs:0x28
   4638a:	mov    QWORD PTR [rsp+0xa8],rax
   46392:	xor    eax,eax
   46394:	mov    r12,rsp
   46397:	movabs rax,0xefcdab8967452301
   463a1:	mov    QWORD PTR [rsp+0x18],0x0
   463aa:	mov    QWORD PTR [rsp],rax
   463ae:	mov    rdx,r12
   463b1:	movabs rax,0x1032547698badcfe
   463bb:	mov    QWORD PTR [rsp+0x8],rax
   463c0:	mov    eax,0xc3d2e1f0
   463c5:	mov    QWORD PTR [rsp+0x10],rax
   463ca:	call   46060 <sha1_process_bytes>
   463cf:	mov    rsi,rbp
   463d2:	mov    rdi,r12
   463d5:	call   45f30 <sha1_finish_ctx>
   463da:	mov    rcx,QWORD PTR [rsp+0xa8]
   463e2:	xor    rcx,QWORD PTR fs:0x28
   463eb:	jne    463f8 <sha1_buffer+0x88>
   463ed:	add    rsp,0xb8
   463f4:	pop    rbp
   463f5:	pop    r12
   463f7:	ret    
   463f8:	call   c7b0 <__stack_chk_fail@plt>
   463fd:	nop    DWORD PTR [rax]

0000000000046400 <sha1_stream>:
   46400:	endbr64 
   46404:	push   r15
   46406:	push   r14
   46408:	mov    r14,rdi
   4640b:	mov    edi,0x8048
   46410:	push   r13
   46412:	mov    r13,rsi
   46415:	push   r12
   46417:	push   rbp
   46418:	push   rbx
   46419:	sub    rsp,0xb8
   46420:	mov    rax,QWORD PTR fs:0x28
   46429:	mov    QWORD PTR [rsp+0xa8],rax
   46431:	xor    eax,eax
   46433:	call   c0e0 <malloc@plt>
   46438:	test   rax,rax
   4643b:	je     46535 <sha1_stream+0x135>
   46441:	mov    r12,rax
   46444:	mov    ebx,0x8000
   46449:	movabs rax,0xefcdab8967452301
   46453:	mov    QWORD PTR [rsp+0x18],0x0
   4645c:	mov    QWORD PTR [rsp],rax
   46460:	movabs rax,0x1032547698badcfe
   4646a:	mov    QWORD PTR [rsp+0x8],rax
   4646f:	mov    eax,0xc3d2e1f0
   46474:	mov    QWORD PTR [rsp+0x10],rax
   46479:	xor    ebp,ebp
   4647b:	jmp    464a8 <sha1_stream+0xa8>
   4647d:	nop    DWORD PTR [rax]
   46480:	mov    rdx,rbx
   46483:	lea    rdi,[r12+rbp*1]
   46487:	mov    rcx,r14
   4648a:	mov    esi,0x1
   4648f:	sub    rdx,rbp
   46492:	call   c2f0 <fread_unlocked@plt>
   46497:	add    rbp,rax
   4649a:	cmp    rbp,0x8000
   464a1:	je     464f0 <sha1_stream+0xf0>
   464a3:	test   rax,rax
   464a6:	je     46508 <sha1_stream+0x108>
   464a8:	test   BYTE PTR [r14],0x10
   464ac:	je     46480 <sha1_stream+0x80>
   464ae:	mov    r15,rsp
   464b1:	test   rbp,rbp
   464b4:	jne    46520 <sha1_stream+0x120>
   464b6:	mov    rsi,r13
   464b9:	mov    rdi,r15
   464bc:	call   45f30 <sha1_finish_ctx>
   464c1:	mov    rdi,r12
   464c4:	call   4bdc0 <rpl_free>
   464c9:	xor    eax,eax
   464cb:	mov    rcx,QWORD PTR [rsp+0xa8]
   464d3:	xor    rcx,QWORD PTR fs:0x28
   464dc:	jne    46530 <sha1_stream+0x130>
   464de:	add    rsp,0xb8
   464e5:	pop    rbx
   464e6:	pop    rbp
   464e7:	pop    r12
   464e9:	pop    r13
   464eb:	pop    r14
   464ed:	pop    r15
   464ef:	ret    
   464f0:	mov    r15,rsp
   464f3:	mov    esi,0x8000
   464f8:	mov    rdi,r12
   464fb:	mov    rdx,r15
   464fe:	call   44c30 <sha1_process_block>
   46503:	jmp    46479 <sha1_stream+0x79>
   46508:	test   BYTE PTR [r14],0x20
   4650c:	je     464ae <sha1_stream+0xae>
   4650e:	mov    rdi,r12
   46511:	call   4bdc0 <rpl_free>
   46516:	mov    eax,0x1
   4651b:	jmp    464cb <sha1_stream+0xcb>
   4651d:	nop    DWORD PTR [rax]
   46520:	mov    rdx,r15
   46523:	mov    rsi,rbp
   46526:	mov    rdi,r12
   46529:	call   46060 <sha1_process_bytes>
   4652e:	jmp    464b6 <sha1_stream+0xb6>
   46530:	call   c7b0 <__stack_chk_fail@plt>
   46535:	mov    eax,0x1
   4653a:	jmp    464cb <sha1_stream+0xcb>
   4653c:	nop    DWORD PTR [rax+0x0]

0000000000046540 <sha256_init_ctx>:
   46540:	endbr64 
   46544:	movabs rax,0xbb67ae856a09e667
   4654e:	mov    QWORD PTR [rdi+0x20],0x0
   46556:	mov    QWORD PTR [rdi],rax
   46559:	movabs rax,0xa54ff53a3c6ef372
   46563:	mov    QWORD PTR [rdi+0x8],rax
   46567:	movabs rax,0x9b05688c510e527f
   46571:	mov    QWORD PTR [rdi+0x10],rax
   46575:	movabs rax,0x5be0cd191f83d9ab
   4657f:	mov    QWORD PTR [rdi+0x18],rax
   46583:	mov    QWORD PTR [rdi+0x28],0x0
   4658b:	ret    
   4658c:	nop    DWORD PTR [rax+0x0]

0000000000046590 <sha224_init_ctx>:
   46590:	endbr64 
   46594:	movabs rax,0x367cd507c1059ed8
   4659e:	mov    QWORD PTR [rdi+0x20],0x0
   465a6:	mov    QWORD PTR [rdi],rax
   465a9:	movabs rax,0xf70e59393070dd17
   465b3:	mov    QWORD PTR [rdi+0x8],rax
   465b7:	movabs rax,0x68581511ffc00b31
   465c1:	mov    QWORD PTR [rdi+0x10],rax
   465c5:	movabs rax,0xbefa4fa464f98fa7
   465cf:	mov    QWORD PTR [rdi+0x18],rax
   465d3:	mov    QWORD PTR [rdi+0x28],0x0
   465db:	ret    
   465dc:	nop    DWORD PTR [rax+0x0]

00000000000465e0 <sha256_read_ctx>:
   465e0:	endbr64 
   465e4:	mov    rax,rsi
   465e7:	xor    edx,edx
   465e9:	nop    DWORD PTR [rax+0x0]
   465f0:	mov    ecx,DWORD PTR [rdi+rdx*1]
   465f3:	bswap  ecx
   465f5:	mov    DWORD PTR [rax+rdx*1],ecx
   465f8:	add    rdx,0x4
   465fc:	cmp    rdx,0x20
   46600:	jne    465f0 <sha256_read_ctx+0x10>
   46602:	ret    
   46603:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4660e:	xchg   ax,ax

0000000000046610 <sha224_read_ctx>:
   46610:	endbr64 
   46614:	mov    rax,rsi
   46617:	xor    edx,edx
   46619:	nop    DWORD PTR [rax+0x0]
   46620:	mov    ecx,DWORD PTR [rdi+rdx*1]
   46623:	bswap  ecx
   46625:	mov    DWORD PTR [rax+rdx*1],ecx
   46628:	add    rdx,0x4
   4662c:	cmp    rdx,0x1c
   46630:	jne    46620 <sha224_read_ctx+0x10>
   46632:	ret    
   46633:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4663e:	xchg   ax,ax

0000000000046640 <sha256_process_block>:
   46640:	endbr64 
   46644:	push   r15
   46646:	mov    rcx,rdi
   46649:	push   r14
   4664b:	push   r13
   4664d:	push   r12
   4664f:	push   rbp
   46650:	push   rbx
   46651:	mov    rbx,rdx
   46654:	sub    rsp,0xe8
   4665b:	mov    QWORD PTR [rsp+0x68],rdi
   46660:	mov    QWORD PTR [rsp+0x80],rdx
   46668:	mov    rax,QWORD PTR fs:0x28
   46671:	mov    QWORD PTR [rsp+0xd8],rax
   46679:	xor    eax,eax
   4667b:	mov    rax,rsi
   4667e:	and    rax,0xfffffffffffffffc
   46682:	add    rax,rdi
   46685:	mov    QWORD PTR [rsp+0x78],rax
   4668a:	mov    rdi,rax
   4668d:	mov    eax,DWORD PTR [rdx]
   4668f:	mov    DWORD PTR [rsp+0x60],eax
   46693:	mov    eax,DWORD PTR [rdx+0x4]
   46696:	mov    DWORD PTR [rsp+0x34],eax
   4669a:	mov    eax,DWORD PTR [rdx+0x8]
   4669d:	mov    DWORD PTR [rsp+0x38],eax
   466a1:	mov    eax,DWORD PTR [rdx+0xc]
   466a4:	mov    DWORD PTR [rsp+0x64],eax
   466a8:	mov    eax,DWORD PTR [rdx+0x10]
   466ab:	mov    DWORD PTR [rsp+0x3c],eax
   466af:	mov    eax,DWORD PTR [rdx+0x14]
   466b2:	mov    DWORD PTR [rsp+0x40],eax
   466b6:	mov    eax,DWORD PTR [rdx+0x18]
   466b9:	mov    DWORD PTR [rsp+0x44],eax
   466bd:	mov    eax,DWORD PTR [rdx+0x1c]
   466c0:	mov    DWORD PTR [rsp+0x70],eax
   466c4:	mov    eax,esi
   466c6:	add    eax,DWORD PTR [rdx+0x20]
   466c9:	mov    DWORD PTR [rbx+0x20],eax
   466cc:	mov    eax,DWORD PTR [rbx+0x24]
   466cf:	setb   dl
   466d2:	shr    rsi,0x20
   466d6:	movzx  edx,dl
   466d9:	add    eax,esi
   466db:	add    eax,edx
   466dd:	mov    DWORD PTR [rbx+0x24],eax
   466e0:	lea    rax,[rsp+0x90]
   466e8:	mov    QWORD PTR [rsp+0x88],rax
   466f0:	cmp    rcx,rdi
   466f3:	jae    49098 <sha256_process_block+0x2a58>
   466f9:	nop    DWORD PTR [rax+0x0]
   46700:	mov    rcx,QWORD PTR [rsp+0x68]
   46705:	mov    rsi,QWORD PTR [rsp+0x88]
   4670d:	xor    eax,eax
   4670f:	nop
   46710:	mov    edx,DWORD PTR [rcx+rax*1]
   46713:	bswap  edx
   46715:	mov    DWORD PTR [rsi+rax*1],edx
   46718:	add    rax,0x4
   4671c:	cmp    rax,0x40
   46720:	jne    46710 <sha256_process_block+0xd0>
   46722:	mov    r13d,DWORD PTR [rsp+0x3c]
   46727:	mov    r15d,DWORD PTR [rsp+0x90]
   4672f:	mov    ebx,DWORD PTR [rsp+0x70]
   46733:	mov    r11d,DWORD PTR [rsp+0x40]
   46738:	mov    eax,r13d
   4673b:	mov    ecx,r13d
   4673e:	mov    r14d,DWORD PTR [rsp+0x60]
   46743:	mov    r8d,DWORD PTR [rsp+0x34]
   46748:	ror    ecx,0xb
   4674b:	ror    eax,0x6
   4674e:	mov    edx,r11d
   46751:	mov    r10d,DWORD PTR [rsp+0x38]
   46756:	xor    eax,ecx
   46758:	mov    ecx,r13d
   4675b:	mov    esi,r14d
   4675e:	mov    edi,DWORD PTR [rsp+0x64]
   46762:	rol    ecx,0x7
   46765:	and    esi,r8d
   46768:	mov    r12d,DWORD PTR [rsp+0x94]
   46770:	add    QWORD PTR [rsp+0x68],0x40
   46776:	xor    eax,ecx
   46778:	lea    ecx,[r15+rbx*1+0x428a2f98]
   46780:	mov    ebx,DWORD PTR [rsp+0x44]
   46784:	add    ecx,eax
   46786:	xor    edx,ebx
   46788:	and    edx,r13d
   4678b:	xor    edx,ebx
   4678d:	lea    eax,[rcx+rdx*1]
   46790:	mov    edx,r14d
   46793:	mov    ecx,r14d
   46796:	ror    edx,0x2
   46799:	ror    ecx,0xd
   4679c:	add    edi,eax
   4679e:	xor    ecx,edx
   467a0:	mov    edx,r14d
   467a3:	mov    ebp,edi
   467a5:	rol    edx,0xa
   467a8:	ror    ebp,0xb
   467ab:	xor    ecx,edx
   467ad:	mov    edx,r14d
   467b0:	or     edx,r8d
   467b3:	and    edx,r10d
   467b6:	or     edx,esi
   467b8:	lea    esi,[r12+rbx*1+0x71374491]
   467c0:	add    edx,ecx
   467c2:	mov    ecx,r13d
   467c5:	xor    ecx,r11d
   467c8:	add    edx,eax
   467ca:	mov    eax,ebp
   467cc:	and    ecx,edi
   467ce:	mov    ebp,edx
   467d0:	xor    ecx,r11d
   467d3:	add    esi,ecx
   467d5:	mov    ecx,edi
   467d7:	ror    ecx,0x6
   467da:	xor    eax,ecx
   467dc:	mov    ecx,edi
   467de:	rol    ecx,0x7
   467e1:	xor    ecx,eax
   467e3:	add    ecx,esi
   467e5:	mov    esi,edx
   467e7:	ror    esi,0x2
   467ea:	rol    ebp,0xa
   467ed:	lea    ebx,[rcx+r10*1]
   467f1:	mov    r10d,r14d
   467f4:	mov    eax,esi
   467f6:	mov    esi,edx
   467f8:	mov    r9d,ebx
   467fb:	ror    esi,0xd
   467fe:	ror    r9d,0xb
   46802:	xor    esi,eax
   46804:	mov    eax,r14d
   46807:	or     eax,edx
   46809:	xor    esi,ebp
   4680b:	mov    ebp,r8d
   4680e:	and    eax,r8d
   46811:	mov    r8d,r14d
   46814:	mov    r14d,DWORD PTR [rsp+0x98]
   4681c:	and    r8d,edx
   4681f:	or     eax,r8d
   46822:	add    eax,esi
   46824:	lea    esi,[r14+r11*1-0x4a3f0431]
   4682c:	mov    r11d,r9d
   4682f:	add    eax,ecx
   46831:	mov    ecx,r13d
   46834:	xor    ecx,edi
   46836:	mov    r9d,eax
   46839:	and    ecx,ebx
   4683b:	rol    r9d,0xa
   4683f:	xor    ecx,r13d
   46842:	add    esi,ecx
   46844:	mov    ecx,ebx
   46846:	ror    ecx,0x6
   46849:	xor    r11d,ecx
   4684c:	mov    ecx,ebx
   4684e:	rol    ecx,0x7
   46851:	xor    ecx,r11d
   46854:	add    ecx,esi
   46856:	mov    esi,eax
   46858:	ror    esi,0x2
   4685b:	lea    r8d,[rcx+rbp*1]
   4685f:	mov    ebp,r10d
   46862:	mov    r11d,esi
   46865:	mov    esi,eax
   46867:	ror    esi,0xd
   4686a:	xor    esi,r11d
   4686d:	xor    esi,r9d
   46870:	mov    r9d,edx
   46873:	or     r9d,eax
   46876:	mov    r11d,r9d
   46879:	mov    r9d,edx
   4687c:	and    r9d,eax
   4687f:	and    r11d,r10d
   46882:	or     r11d,r9d
   46885:	mov    r9d,r8d
   46888:	add    r11d,esi
   4688b:	mov    esi,DWORD PTR [rsp+0x9c]
   46892:	add    r11d,ecx
   46895:	mov    ecx,edi
   46897:	xor    ecx,ebx
   46899:	lea    esi,[rsi+r13*1-0x164a245b]
   468a1:	ror    r9d,0xb
   468a5:	mov    r13d,eax
   468a8:	and    ecx,r8d
   468ab:	mov    r10d,r9d
   468ae:	and    r13d,r11d
   468b1:	xor    ecx,edi
   468b3:	add    esi,ecx
   468b5:	mov    ecx,r8d
   468b8:	ror    ecx,0x6
   468bb:	xor    r10d,ecx
   468be:	mov    ecx,r8d
   468c1:	rol    ecx,0x7
   468c4:	xor    ecx,r10d
   468c7:	add    ecx,esi
   468c9:	mov    esi,r11d
   468cc:	ror    esi,0x2
   468cf:	lea    r9d,[rcx+rbp*1]
   468d3:	mov    r10d,esi
   468d6:	mov    esi,r11d
   468d9:	ror    esi,0xd
   468dc:	xor    esi,r10d
   468df:	mov    r10d,r11d
   468e2:	rol    r10d,0xa
   468e6:	xor    esi,r10d
   468e9:	mov    r10d,eax
   468ec:	or     r10d,r11d
   468ef:	and    r10d,edx
   468f2:	or     r10d,r13d
   468f5:	mov    r13d,r11d
   468f8:	add    r10d,esi
   468fb:	mov    esi,DWORD PTR [rsp+0xa0]
   46902:	add    r10d,ecx
   46905:	mov    ecx,ebx
   46907:	xor    ecx,r8d
   4690a:	lea    edi,[rsi+rdi*1+0x3956c25b]
   46911:	mov    esi,r9d
   46914:	and    ecx,r9d
   46917:	ror    esi,0xb
   4691a:	xor    ecx,ebx
   4691c:	add    edi,ecx
   4691e:	mov    ecx,r9d
   46921:	ror    ecx,0x6
   46924:	xor    esi,ecx
   46926:	mov    ecx,r9d
   46929:	rol    ecx,0x7
   4692c:	xor    ecx,esi
   4692e:	mov    esi,r10d
   46931:	add    ecx,edi
   46933:	ror    esi,0x2
   46936:	lea    edi,[rdx+rcx*1]
   46939:	mov    edx,r10d
   4693c:	ror    edx,0xd
   4693f:	and    r13d,r10d
   46942:	xor    edx,esi
   46944:	mov    esi,r10d
   46947:	rol    esi,0xa
   4694a:	xor    edx,esi
   4694c:	mov    esi,r11d
   4694f:	or     esi,r10d
   46952:	and    esi,eax
   46954:	or     esi,r13d
   46957:	add    esi,edx
   46959:	mov    edx,r8d
   4695c:	add    esi,ecx
   4695e:	xor    edx,r9d
   46961:	mov    ecx,DWORD PTR [rsp+0xa4]
   46968:	and    edx,edi
   4696a:	mov    r13d,esi
   4696d:	xor    edx,r8d
   46970:	lea    ecx,[rcx+rbx*1+0x59f111f1]
   46977:	rol    r13d,0xa
   4697b:	add    ecx,edx
   4697d:	mov    edx,edi
   4697f:	ror    edx,0x6
   46982:	mov    ebx,edx
   46984:	mov    edx,edi
   46986:	ror    edx,0xb
   46989:	xor    edx,ebx
   4698b:	mov    ebx,edi
   4698d:	rol    ebx,0x7
   46990:	xor    edx,ebx
   46992:	add    edx,ecx
   46994:	mov    ecx,esi
   46996:	ror    ecx,0x2
   46999:	lea    ebx,[rax+rdx*1]
   4699c:	mov    eax,ecx
   4699e:	mov    ecx,esi
   469a0:	ror    ecx,0xd
   469a3:	xor    ecx,eax
   469a5:	xor    ecx,r13d
   469a8:	mov    r13d,r10d
   469ab:	or     r13d,esi
   469ae:	mov    eax,r13d
   469b1:	mov    r13d,r10d
   469b4:	and    r13d,esi
   469b7:	and    eax,r11d
   469ba:	or     eax,r13d
   469bd:	mov    r13d,esi
   469c0:	add    eax,ecx
   469c2:	mov    ecx,DWORD PTR [rsp+0xa8]
   469c9:	add    eax,edx
   469cb:	mov    edx,r9d
   469ce:	xor    edx,edi
   469d0:	lea    r8d,[rcx+r8*1-0x6dc07d5c]
   469d8:	mov    ecx,ebx
   469da:	and    edx,ebx
   469dc:	ror    ecx,0xb
   469df:	and    r13d,eax
   469e2:	xor    edx,r9d
   469e5:	add    r8d,edx
   469e8:	mov    edx,ebx
   469ea:	ror    edx,0x6
   469ed:	xor    ecx,edx
   469ef:	mov    edx,ebx
   469f1:	rol    edx,0x7
   469f4:	xor    edx,ecx
   469f6:	mov    ecx,eax
   469f8:	add    edx,r8d
   469fb:	mov    r8d,eax
   469fe:	ror    ecx,0x2
   46a01:	ror    r8d,0xd
   46a05:	add    r11d,edx
   46a08:	xor    r8d,ecx
   46a0b:	mov    ecx,eax
   46a0d:	rol    ecx,0xa
   46a10:	xor    r8d,ecx
   46a13:	mov    ecx,esi
   46a15:	or     ecx,eax
   46a17:	and    ecx,r10d
   46a1a:	or     ecx,r13d
   46a1d:	mov    r13d,eax
   46a20:	add    ecx,r8d
   46a23:	mov    r8d,edi
   46a26:	add    ecx,edx
   46a28:	xor    r8d,ebx
   46a2b:	mov    edx,DWORD PTR [rsp+0xac]
   46a32:	and    r8d,r11d
   46a35:	xor    r8d,edi
   46a38:	lea    r9d,[rdx+r9*1-0x54e3a12b]
   46a40:	mov    edx,r11d
   46a43:	add    r9d,r8d
   46a46:	mov    r8d,r11d
   46a49:	ror    edx,0xb
   46a4c:	ror    r8d,0x6
   46a50:	xor    edx,r8d
   46a53:	mov    r8d,r11d
   46a56:	rol    r8d,0x7
   46a5a:	xor    r8d,edx
   46a5d:	mov    edx,ecx
   46a5f:	add    r8d,r9d
   46a62:	mov    r9d,ecx
   46a65:	add    r10d,r8d
   46a68:	ror    edx,0x2
   46a6b:	and    r13d,ecx
   46a6e:	ror    r9d,0xd
   46a72:	xor    r9d,edx
   46a75:	mov    edx,ecx
   46a77:	rol    edx,0xa
   46a7a:	xor    r9d,edx
   46a7d:	mov    edx,eax
   46a7f:	or     edx,ecx
   46a81:	and    edx,esi
   46a83:	or     edx,r13d
   46a86:	mov    r13d,ecx
   46a89:	add    edx,r9d
   46a8c:	mov    r9d,DWORD PTR [rsp+0xb0]
   46a94:	add    edx,r8d
   46a97:	mov    r8d,ebx
   46a9a:	xor    r8d,r11d
   46a9d:	lea    edi,[r9+rdi*1-0x27f85568]
   46aa5:	mov    r9d,r10d
   46aa8:	and    r13d,edx
   46aab:	and    r8d,r10d
   46aae:	ror    r9d,0x6
   46ab2:	xor    r8d,ebx
   46ab5:	add    r8d,edi
   46ab8:	mov    edi,r9d
   46abb:	mov    r9d,r10d
   46abe:	ror    r9d,0xb
   46ac2:	xor    r9d,edi
   46ac5:	mov    edi,r10d
   46ac8:	rol    edi,0x7
   46acb:	xor    edi,r9d
   46ace:	mov    r9d,edx
   46ad1:	add    edi,r8d
   46ad4:	mov    r8d,edx
   46ad7:	ror    r9d,0x2
   46adb:	ror    r8d,0xd
   46adf:	add    esi,edi
   46ae1:	xor    r8d,r9d
   46ae4:	mov    r9d,edx
   46ae7:	rol    r9d,0xa
   46aeb:	xor    r8d,r9d
   46aee:	mov    r9d,ecx
   46af1:	or     r9d,edx
   46af4:	and    r9d,eax
   46af7:	or     r9d,r13d
   46afa:	mov    r13d,edx
   46afd:	add    r9d,r8d
   46b00:	mov    r8d,r11d
   46b03:	add    r9d,edi
   46b06:	xor    r8d,r10d
   46b09:	mov    edi,r8d
   46b0c:	mov    r8d,DWORD PTR [rsp+0xb4]
   46b14:	and    r13d,r9d
   46b17:	and    edi,esi
   46b19:	lea    ebx,[r8+rbx*1+0x12835b01]
   46b21:	mov    r8d,esi
   46b24:	xor    edi,r11d
   46b27:	ror    r8d,0x6
   46b2b:	add    ebx,edi
   46b2d:	mov    edi,r8d
   46b30:	mov    r8d,esi
   46b33:	ror    r8d,0xb
   46b37:	xor    r8d,edi
   46b3a:	mov    edi,esi
   46b3c:	rol    edi,0x7
   46b3f:	xor    edi,r8d
   46b42:	mov    r8d,r9d
   46b45:	add    edi,ebx
   46b47:	mov    ebx,r9d
   46b4a:	ror    r8d,0x2
   46b4e:	ror    ebx,0xd
   46b51:	add    eax,edi
   46b53:	xor    ebx,r8d
   46b56:	mov    r8d,r9d
   46b59:	rol    r8d,0xa
   46b5d:	xor    ebx,r8d
   46b60:	mov    r8d,edx
   46b63:	or     r8d,r9d
   46b66:	and    r8d,ecx
   46b69:	or     r8d,r13d
   46b6c:	mov    r13d,r9d
   46b6f:	add    r8d,ebx
   46b72:	mov    ebx,r10d
   46b75:	xor    ebx,esi
   46b77:	add    r8d,edi
   46b7a:	mov    edi,ebx
   46b7c:	mov    ebx,DWORD PTR [rsp+0xb8]
   46b83:	and    edi,eax
   46b85:	lea    r11d,[rbx+r11*1+0x243185be]
   46b8d:	mov    ebx,eax
   46b8f:	xor    edi,r10d
   46b92:	ror    ebx,0x6
   46b95:	add    r11d,edi
   46b98:	mov    edi,ebx
   46b9a:	mov    ebx,eax
   46b9c:	ror    ebx,0xb
   46b9f:	xor    ebx,edi
   46ba1:	mov    edi,eax
   46ba3:	rol    edi,0x7
   46ba6:	xor    edi,ebx
   46ba8:	mov    ebx,r8d
   46bab:	add    edi,r11d
   46bae:	mov    r11d,r8d
   46bb1:	ror    ebx,0x2
   46bb4:	and    r13d,r8d
   46bb7:	ror    r11d,0xd
   46bbb:	add    ecx,edi
   46bbd:	xor    r11d,ebx
   46bc0:	mov    ebx,r8d
   46bc3:	rol    ebx,0xa
   46bc6:	xor    r11d,ebx
   46bc9:	mov    ebx,r9d
   46bcc:	or     ebx,r8d
   46bcf:	and    ebx,edx
   46bd1:	or     ebx,r13d
   46bd4:	mov    r13d,r8d
   46bd7:	add    ebx,r11d
   46bda:	mov    r11d,DWORD PTR [rsp+0xbc]
   46be2:	add    ebx,edi
   46be4:	mov    edi,esi
   46be6:	xor    edi,eax
   46be8:	lea    r10d,[r11+r10*1+0x550c7dc3]
   46bf0:	mov    r11d,ecx
   46bf3:	and    r13d,ebx
   46bf6:	and    edi,ecx
   46bf8:	ror    r11d,0xb
   46bfc:	xor    edi,esi
   46bfe:	add    r10d,edi
   46c01:	mov    edi,ecx
   46c03:	ror    edi,0x6
   46c06:	xor    r11d,edi
   46c09:	mov    edi,ecx
   46c0b:	rol    edi,0x7
   46c0e:	xor    edi,r11d
   46c11:	add    edi,r10d
   46c14:	mov    r10d,ebx
   46c17:	ror    r10d,0x2
   46c1b:	add    edx,edi
   46c1d:	mov    r11d,r10d
   46c20:	mov    r10d,ebx
   46c23:	ror    r10d,0xd
   46c27:	xor    r10d,r11d
   46c2a:	mov    r11d,ebx
   46c2d:	rol    r11d,0xa
   46c31:	xor    r10d,r11d
   46c34:	mov    r11d,r8d
   46c37:	or     r11d,ebx
   46c3a:	and    r11d,r9d
   46c3d:	or     r11d,r13d
   46c40:	mov    r13d,ebx
   46c43:	add    r11d,r10d
   46c46:	mov    r10d,eax
   46c49:	xor    r10d,ecx
   46c4c:	add    r11d,edi
   46c4f:	mov    edi,r10d
   46c52:	mov    r10d,DWORD PTR [rsp+0xc0]
   46c5a:	and    r13d,r11d
   46c5d:	and    edi,edx
   46c5f:	lea    r10d,[r10+rsi*1+0x72be5d74]
   46c67:	mov    esi,edx
   46c69:	xor    edi,eax
   46c6b:	ror    esi,0x6
   46c6e:	add    r10d,edi
   46c71:	mov    edi,esi
   46c73:	mov    esi,edx
   46c75:	ror    esi,0xb
   46c78:	xor    esi,edi
   46c7a:	mov    edi,edx
   46c7c:	rol    edi,0x7
   46c7f:	xor    edi,esi
   46c81:	mov    esi,r11d
   46c84:	add    edi,r10d
   46c87:	mov    r10d,r11d
   46c8a:	ror    esi,0x2
   46c8d:	ror    r10d,0xd
   46c91:	add    r9d,edi
   46c94:	xor    r10d,esi
   46c97:	mov    esi,r11d
   46c9a:	rol    esi,0xa
   46c9d:	xor    r10d,esi
   46ca0:	mov    esi,ebx
   46ca2:	or     esi,r11d
   46ca5:	and    esi,r8d
   46ca8:	or     esi,r13d
   46cab:	mov    r13d,DWORD PTR [rsp+0xc4]
   46cb3:	add    esi,r10d
   46cb6:	mov    r10d,ecx
   46cb9:	add    esi,edi
   46cbb:	xor    r10d,edx
   46cbe:	lea    eax,[r13+rax*1-0x7f214e02]
   46cc6:	mov    edi,r9d
   46cc9:	mov    r13d,r9d
   46ccc:	and    r10d,r9d
   46ccf:	ror    edi,0xb
   46cd2:	ror    r13d,0x6
   46cd6:	xor    r10d,ecx
   46cd9:	xor    edi,r13d
   46cdc:	mov    r13d,r9d
   46cdf:	add    r10d,eax
   46ce2:	rol    r13d,0x7
   46ce6:	mov    eax,r13d
   46ce9:	mov    r13d,r11d
   46cec:	xor    eax,edi
   46cee:	and    r13d,esi
   46cf1:	add    eax,r10d
   46cf4:	mov    r10d,esi
   46cf7:	ror    r10d,0x2
   46cfb:	add    r8d,eax
   46cfe:	mov    edi,r10d
   46d01:	mov    r10d,esi
   46d04:	ror    r10d,0xd
   46d08:	xor    r10d,edi
   46d0b:	mov    edi,esi
   46d0d:	rol    edi,0xa
   46d10:	xor    r10d,edi
   46d13:	mov    edi,r11d
   46d16:	or     edi,esi
   46d18:	and    edi,ebx
   46d1a:	or     edi,r13d
   46d1d:	add    edi,r10d
   46d20:	mov    r10d,edx
   46d23:	xor    r10d,r9d
   46d26:	add    edi,eax
   46d28:	mov    eax,r10d
   46d2b:	mov    r10d,DWORD PTR [rsp+0xc8]
   46d33:	and    eax,r8d
   46d36:	lea    ecx,[r10+rcx*1-0x6423f959]
   46d3e:	mov    r10d,r8d
   46d41:	xor    eax,edx
   46d43:	ror    r10d,0x6
   46d47:	add    ecx,eax
   46d49:	mov    eax,r10d
   46d4c:	mov    r10d,r8d
   46d4f:	ror    r10d,0xb
   46d53:	mov    r13d,r10d
   46d56:	mov    r10d,r8d
   46d59:	rol    r10d,0x7
   46d5d:	xor    r13d,eax
   46d60:	mov    eax,r10d
   46d63:	mov    r10d,edi
   46d66:	xor    eax,r13d
   46d69:	rol    r10d,0xa
   46d6d:	add    eax,ecx
   46d6f:	mov    ecx,edi
   46d71:	ror    ecx,0x2
   46d74:	add    ebx,eax
   46d76:	mov    r13d,ecx
   46d79:	mov    ecx,edi
   46d7b:	ror    ecx,0xd
   46d7e:	xor    ecx,r13d
   46d81:	xor    ecx,r10d
   46d84:	mov    r10d,esi
   46d87:	or     r10d,edi
   46d8a:	mov    r13d,r10d
   46d8d:	mov    r10d,esi
   46d90:	and    r13d,r11d
   46d93:	and    r10d,edi
   46d96:	or     r13d,r10d
   46d99:	mov    r10d,ebx
   46d9c:	add    r13d,ecx
   46d9f:	mov    ecx,r9d
   46da2:	rol    r10d,0x7
   46da6:	xor    ecx,r8d
   46da9:	add    r13d,eax
   46dac:	mov    eax,ecx
   46dae:	mov    ecx,DWORD PTR [rsp+0xcc]
   46db5:	and    eax,ebx
   46db7:	lea    edx,[rcx+rdx*1-0x3e640e8c]
   46dbe:	mov    ecx,ebx
   46dc0:	xor    eax,r9d
   46dc3:	ror    ecx,0x6
   46dc6:	add    edx,eax
   46dc8:	mov    eax,ecx
   46dca:	mov    ecx,ebx
   46dcc:	ror    ecx,0xb
   46dcf:	xor    ecx,eax
   46dd1:	mov    eax,r10d
   46dd4:	mov    r10d,edi
   46dd7:	xor    eax,ecx
   46dd9:	mov    ecx,r13d
   46ddc:	and    r10d,r13d
   46ddf:	add    eax,edx
   46de1:	mov    edx,r13d
   46de4:	ror    ecx,0x2
   46de7:	ror    edx,0xd
   46dea:	add    r11d,eax
   46ded:	xor    edx,ecx
   46def:	mov    ecx,r13d
   46df2:	rol    ecx,0xa
   46df5:	xor    edx,ecx
   46df7:	mov    ecx,edi
   46df9:	or     ecx,r13d
   46dfc:	and    ecx,esi
   46dfe:	or     ecx,r10d
   46e01:	add    ecx,edx
   46e03:	mov    edx,DWORD PTR [rsp+0xc8]
   46e0a:	add    ecx,eax
   46e0c:	rol    edx,0xf
   46e0f:	mov    r10d,edx
   46e12:	mov    edx,DWORD PTR [rsp+0xc8]
   46e19:	rol    edx,0xd
   46e1c:	mov    eax,edx
   46e1e:	mov    edx,DWORD PTR [rsp+0xc8]
   46e25:	xor    eax,r10d
   46e28:	shr    edx,0xa
   46e2b:	mov    r10d,edx
   46e2e:	mov    edx,DWORD PTR [rsp+0xb4]
   46e35:	xor    r10d,eax
   46e38:	add    edx,r15d
   46e3b:	mov    r15d,r12d
   46e3e:	lea    eax,[r10+rdx*1]
   46e42:	rol    r15d,0xe
   46e46:	mov    edx,r12d
   46e49:	ror    edx,0x7
   46e4c:	mov    r10d,r15d
   46e4f:	mov    r15d,r11d
   46e52:	xor    r10d,edx
   46e55:	mov    edx,r12d
   46e58:	rol    r15d,0x7
   46e5c:	shr    edx,0x3
   46e5f:	xor    r10d,edx
   46e62:	mov    edx,r8d
   46e65:	xor    edx,ebx
   46e67:	add    r10d,eax
   46e6a:	mov    eax,edx
   46e6c:	mov    edx,r11d
   46e6f:	lea    r9d,[r9+r10*1-0x1b64963f]
   46e77:	and    eax,r11d
   46e7a:	ror    edx,0x6
   46e7d:	xor    eax,r8d
   46e80:	add    r9d,eax
   46e83:	mov    eax,edx
   46e85:	mov    edx,r11d
   46e88:	ror    edx,0xb
   46e8b:	xor    edx,eax
   46e8d:	mov    eax,r15d
   46e90:	mov    r15d,r13d
   46e93:	xor    eax,edx
   46e95:	mov    edx,ecx
   46e97:	and    r15d,ecx
   46e9a:	add    eax,r9d
   46e9d:	mov    r9d,ecx
   46ea0:	ror    edx,0x2
   46ea3:	ror    r9d,0xd
   46ea7:	add    esi,eax
   46ea9:	xor    r9d,edx
   46eac:	mov    edx,ecx
   46eae:	rol    edx,0xa
   46eb1:	xor    r9d,edx
   46eb4:	mov    edx,r13d
   46eb7:	or     edx,ecx
   46eb9:	and    edx,edi
   46ebb:	or     edx,r15d
   46ebe:	mov    r15d,DWORD PTR [rsp+0xcc]
   46ec6:	add    edx,r9d
   46ec9:	mov    r9d,DWORD PTR [rsp+0xcc]
   46ed1:	rol    r15d,0xd
   46ed5:	add    edx,eax
   46ed7:	rol    r9d,0xf
   46edb:	mov    eax,r15d
   46ede:	mov    r15d,r14d
   46ee1:	xor    eax,r9d
   46ee4:	mov    r9d,DWORD PTR [rsp+0xcc]
   46eec:	shr    r9d,0xa
   46ef0:	add    r12d,DWORD PTR [rsp+0xb8]
   46ef8:	ror    r15d,0x7
   46efc:	xor    r9d,eax
   46eff:	lea    eax,[r9+r12*1]
   46f03:	mov    r9d,r14d
   46f06:	mov    r12d,esi
   46f09:	rol    r9d,0xe
   46f0d:	ror    r12d,0xb
   46f11:	xor    r9d,r15d
   46f14:	mov    r15d,r14d
   46f17:	shr    r15d,0x3
   46f1b:	xor    r9d,r15d
   46f1e:	mov    r15d,ebx
   46f21:	xor    r15d,r11d
   46f24:	add    r9d,eax
   46f27:	mov    eax,r15d
   46f2a:	mov    r15d,esi
   46f2d:	lea    r8d,[r8+r9*1-0x1041b87a]
   46f35:	ror    r15d,0x6
   46f39:	and    eax,esi
   46f3b:	xor    r12d,r15d
   46f3e:	mov    r15d,esi
   46f41:	xor    eax,ebx
   46f43:	rol    r15d,0x7
   46f47:	add    r8d,eax
   46f4a:	mov    eax,r15d
   46f4d:	mov    r15d,ecx
   46f50:	xor    eax,r12d
   46f53:	mov    r12d,edx
   46f56:	and    r15d,edx
   46f59:	add    eax,r8d
   46f5c:	mov    r8d,edx
   46f5f:	ror    r12d,0x2
   46f63:	ror    r8d,0xd
   46f67:	add    edi,eax
   46f69:	xor    r8d,r12d
   46f6c:	mov    r12d,edx
   46f6f:	rol    r12d,0xa
   46f73:	xor    r8d,r12d
   46f76:	mov    r12d,ecx
   46f79:	or     r12d,edx
   46f7c:	and    r12d,r13d
   46f7f:	or     r12d,r15d
   46f82:	mov    r15d,r10d
   46f85:	add    r12d,r8d
   46f88:	mov    r8d,r10d
   46f8b:	rol    r15d,0xf
   46f8f:	add    r12d,eax
   46f92:	rol    r8d,0xd
   46f96:	add    r14d,DWORD PTR [rsp+0xbc]
   46f9e:	xor    r8d,r15d
   46fa1:	mov    r15d,r10d
   46fa4:	shr    r15d,0xa
   46fa8:	mov    ebp,r15d
   46fab:	mov    r15d,DWORD PTR [rsp+0x9c]
   46fb3:	xor    ebp,r8d
   46fb6:	mov    r8d,DWORD PTR [rsp+0x9c]
   46fbe:	ror    r15d,0x7
   46fc2:	rol    r8d,0xe
   46fc6:	mov    eax,r15d
   46fc9:	mov    r15d,r11d
   46fcc:	xor    eax,r8d
   46fcf:	mov    r8d,DWORD PTR [rsp+0x9c]
   46fd7:	xor    r15d,esi
   46fda:	shr    r8d,0x3
   46fde:	xor    r8d,eax
   46fe1:	mov    eax,r15d
   46fe4:	mov    r15d,edi
   46fe7:	add    r8d,r14d
   46fea:	and    eax,edi
   46fec:	ror    r15d,0x6
   46ff0:	mov    r14d,edx
   46ff3:	add    r8d,ebp
   46ff6:	xor    eax,r11d
   46ff9:	and    r14d,r12d
   46ffc:	lea    ebx,[rbx+r8*1+0xfc19dc6]
   47004:	add    ebx,eax
   47006:	mov    eax,r15d
   47009:	mov    r15d,edi
   4700c:	ror    r15d,0xb
   47010:	mov    ebp,r15d
   47013:	mov    r15d,edi
   47016:	rol    r15d,0x7
   4701a:	xor    ebp,eax
   4701c:	mov    eax,r15d
   4701f:	mov    r15d,r12d
   47022:	ror    r15d,0x2
   47026:	xor    eax,ebp
   47028:	mov    ebp,r15d
   4702b:	mov    r15d,r12d
   4702e:	add    eax,ebx
   47030:	ror    r15d,0xd
   47034:	add    r13d,eax
   47037:	mov    ebx,r15d
   4703a:	mov    r15d,r12d
   4703d:	xor    ebx,ebp
   4703f:	rol    r15d,0xa
   47043:	xor    ebx,r15d
   47046:	mov    r15d,edx
   47049:	or     r15d,r12d
   4704c:	mov    ebp,r15d
   4704f:	mov    r15d,r9d
   47052:	and    ebp,ecx
   47054:	or     ebp,r14d
   47057:	mov    r14d,r9d
   4705a:	add    ebp,ebx
   4705c:	rol    r15d,0xf
   47060:	add    ebp,eax
   47062:	mov    eax,r15d
   47065:	mov    r15d,r9d
   47068:	shr    r14d,0xa
   4706c:	rol    r15d,0xd
   47070:	xor    r15d,eax
   47073:	xor    r15d,r14d
   47076:	mov    r14d,DWORD PTR [rsp+0xa0]
   4707e:	ror    r14d,0x7
   47082:	mov    eax,r14d
   47085:	mov    r14d,DWORD PTR [rsp+0xa0]
   4708d:	rol    r14d,0xe
   47091:	xor    eax,r14d
   47094:	mov    r14d,DWORD PTR [rsp+0xa0]
   4709c:	shr    r14d,0x3
   470a0:	mov    ebx,r14d
   470a3:	mov    r14d,DWORD PTR [rsp+0x9c]
   470ab:	add    r14d,DWORD PTR [rsp+0xc0]
   470b3:	xor    ebx,eax
   470b5:	mov    eax,r14d
   470b8:	mov    r14d,esi
   470bb:	add    eax,ebx
   470bd:	xor    r14d,edi
   470c0:	add    r15d,eax
   470c3:	mov    eax,r14d
   470c6:	mov    r14d,r13d
   470c9:	and    eax,r13d
   470cc:	ror    r14d,0x6
   470d0:	lea    r11d,[r11+r15*1+0x240ca1cc]
   470d8:	xor    eax,esi
   470da:	add    r11d,eax
   470dd:	mov    eax,r14d
   470e0:	mov    r14d,r13d
   470e3:	ror    r14d,0xb
   470e7:	mov    ebx,r14d
   470ea:	mov    r14d,r13d
   470ed:	rol    r14d,0x7
   470f1:	xor    ebx,eax
   470f3:	mov    eax,r14d
   470f6:	mov    r14d,ebp
   470f9:	ror    r14d,0x2
   470fd:	xor    eax,ebx
   470ff:	mov    ebx,r14d
   47102:	mov    r14d,ebp
   47105:	add    eax,r11d
   47108:	ror    r14d,0xd
   4710c:	add    ecx,eax
   4710e:	mov    r11d,r14d
   47111:	mov    r14d,ebp
   47114:	xor    r11d,ebx
   47117:	rol    r14d,0xa
   4711b:	xor    r11d,r14d
   4711e:	mov    r14d,r12d
   47121:	or     r14d,ebp
   47124:	mov    ebx,r14d
   47127:	mov    r14d,r12d
   4712a:	and    ebx,edx
   4712c:	and    r14d,ebp
   4712f:	or     ebx,r14d
   47132:	mov    r14d,r8d
   47135:	add    ebx,r11d
   47138:	rol    r14d,0xf
   4713c:	add    ebx,eax
   4713e:	mov    eax,r14d
   47141:	mov    r14d,r8d
   47144:	rol    r14d,0xd
   47148:	mov    r11d,r14d
   4714b:	mov    r14d,r8d
   4714e:	xor    r11d,eax
   47151:	shr    r14d,0xa
   47155:	xor    r11d,r14d
   47158:	mov    r14d,DWORD PTR [rsp+0xa4]
   47160:	ror    r14d,0x7
   47164:	mov    eax,r14d
   47167:	mov    r14d,DWORD PTR [rsp+0xa4]
   4716f:	rol    r14d,0xe
   47173:	xor    eax,r14d
   47176:	mov    r14d,DWORD PTR [rsp+0xa4]
   4717e:	shr    r14d,0x3
   47182:	xor    r14d,eax
   47185:	mov    eax,DWORD PTR [rsp+0xa0]
   4718c:	add    eax,DWORD PTR [rsp+0xc4]
   47193:	add    eax,r14d
   47196:	lea    r14d,[rax+r11*1]
   4719a:	mov    r11d,edi
   4719d:	xor    r11d,r13d
   471a0:	lea    esi,[rsi+r14*1+0x2de92c6f]
   471a8:	mov    DWORD PTR [rsp+0xc],r14d
   471ad:	mov    r14d,ecx
   471b0:	mov    eax,r11d
   471b3:	mov    r11d,ecx
   471b6:	rol    r14d,0x7
   471ba:	and    eax,ecx
   471bc:	ror    r11d,0x6
   471c0:	xor    eax,edi
   471c2:	add    esi,eax
   471c4:	mov    eax,r11d
   471c7:	mov    r11d,ecx
   471ca:	ror    r11d,0xb
   471ce:	xor    r11d,eax
   471d1:	mov    eax,r14d
   471d4:	mov    r14d,ebp
   471d7:	xor    eax,r11d
   471da:	add    eax,esi
   471dc:	mov    esi,ebx
   471de:	ror    esi,0x2
   471e1:	add    edx,eax
   471e3:	mov    r11d,esi
   471e6:	mov    esi,ebx
   471e8:	ror    esi,0xd
   471eb:	xor    esi,r11d
   471ee:	mov    r11d,ebx
   471f1:	rol    r11d,0xa
   471f5:	xor    esi,r11d
   471f8:	mov    r11d,ebp
   471fb:	and    r14d,ebx
   471fe:	or     r11d,ebx
   47201:	and    r11d,r12d
   47204:	or     r11d,r14d
   47207:	mov    r14d,r15d
   4720a:	add    r11d,esi
   4720d:	mov    esi,r15d
   47210:	shr    r14d,0xa
   47214:	rol    esi,0xf
   47217:	add    r11d,eax
   4721a:	mov    eax,esi
   4721c:	mov    esi,r15d
   4721f:	rol    esi,0xd
   47222:	xor    esi,eax
   47224:	xor    esi,r14d
   47227:	mov    r14d,DWORD PTR [rsp+0xa8]
   4722f:	ror    r14d,0x7
   47233:	mov    eax,r14d
   47236:	mov    r14d,DWORD PTR [rsp+0xa8]
   4723e:	rol    r14d,0xe
   47242:	xor    eax,r14d
   47245:	mov    r14d,DWORD PTR [rsp+0xa8]
   4724d:	shr    r14d,0x3
   47251:	xor    r14d,eax
   47254:	mov    eax,DWORD PTR [rsp+0xa4]
   4725b:	add    eax,DWORD PTR [rsp+0xc8]
   47262:	add    eax,r14d
   47265:	mov    r14d,edx
   47268:	add    eax,esi
   4726a:	mov    esi,r13d
   4726d:	ror    r14d,0xb
   47271:	xor    esi,ecx
   47273:	lea    edi,[rdi+rax*1+0x4a7484aa]
   4727a:	mov    DWORD PTR [rsp+0x10],eax
   4727e:	mov    eax,r14d
   47281:	and    esi,edx
   47283:	mov    r14d,r11d
   47286:	xor    esi,r13d
   47289:	add    edi,esi
   4728b:	mov    esi,edx
   4728d:	ror    esi,0x6
   47290:	xor    eax,esi
   47292:	mov    esi,edx
   47294:	rol    esi,0x7
   47297:	xor    esi,eax
   47299:	add    esi,edi
   4729b:	mov    edi,r11d
   4729e:	ror    edi,0x2
   472a1:	add    r12d,esi
   472a4:	mov    eax,edi
   472a6:	mov    edi,r11d
   472a9:	ror    edi,0xd
   472ac:	rol    r14d,0xa
   472b0:	xor    edi,eax
   472b2:	xor    edi,r14d
   472b5:	mov    r14d,ebx
   472b8:	or     r14d,r11d
   472bb:	mov    eax,r14d
   472be:	mov    r14d,ebx
   472c1:	and    r14d,r11d
   472c4:	and    eax,ebp
   472c6:	or     eax,r14d
   472c9:	mov    r14d,DWORD PTR [rsp+0xc]
   472ce:	add    eax,edi
   472d0:	add    eax,esi
   472d2:	mov    edi,r14d
   472d5:	mov    esi,r14d
   472d8:	rol    esi,0xf
   472db:	rol    edi,0xd
   472de:	xor    edi,esi
   472e0:	mov    esi,r14d
   472e3:	mov    r14d,DWORD PTR [rsp+0xac]
   472eb:	shr    esi,0xa
   472ee:	xor    edi,esi
   472f0:	mov    esi,DWORD PTR [rsp+0xac]
   472f7:	rol    r14d,0xe
   472fb:	ror    esi,0x7
   472fe:	xor    esi,r14d
   47301:	mov    r14d,DWORD PTR [rsp+0xac]
   47309:	shr    r14d,0x3
   4730d:	xor    r14d,esi
   47310:	mov    esi,DWORD PTR [rsp+0xa8]
   47317:	add    esi,DWORD PTR [rsp+0xcc]
   4731e:	add    esi,r14d
   47321:	mov    r14d,r11d
   47324:	add    edi,esi
   47326:	mov    esi,ecx
   47328:	xor    esi,edx
   4732a:	lea    r13d,[r13+rdi*1+0x5cb0a9dc]
   47332:	mov    DWORD PTR [rsp+0x18],edi
   47336:	mov    edi,r12d
   47339:	and    esi,r12d
   4733c:	ror    edi,0xb
   4733f:	xor    esi,ecx
   47341:	add    r13d,esi
   47344:	mov    esi,r12d
   47347:	ror    esi,0x6
   4734a:	xor    edi,esi
   4734c:	mov    esi,r12d
   4734f:	rol    esi,0x7
   47352:	xor    esi,edi
   47354:	add    esi,r13d
   47357:	mov    r13d,eax
   4735a:	and    r14d,eax
   4735d:	ror    r13d,0x2
   47361:	add    ebp,esi
   47363:	mov    edi,r13d
   47366:	mov    r13d,eax
   47369:	ror    r13d,0xd
   4736d:	xor    r13d,edi
   47370:	mov    edi,eax
   47372:	rol    edi,0xa
   47375:	xor    r13d,edi
   47378:	mov    edi,r11d
   4737b:	or     edi,eax
   4737d:	and    edi,ebx
   4737f:	or     edi,r14d
   47382:	mov    r14d,DWORD PTR [rsp+0x10]
   47387:	add    edi,r13d
   4738a:	add    edi,esi
   4738c:	mov    r13d,r14d
   4738f:	mov    esi,r14d
   47392:	rol    esi,0xf
   47395:	rol    r13d,0xd
   47399:	xor    r13d,esi
   4739c:	mov    esi,r14d
   4739f:	shr    esi,0xa
   473a2:	xor    r13d,esi
   473a5:	mov    esi,DWORD PTR [rsp+0xb0]
   473ac:	ror    esi,0x7
   473af:	mov    r14d,esi
   473b2:	mov    esi,DWORD PTR [rsp+0xb0]
   473b9:	rol    esi,0xe
   473bc:	xor    esi,r14d
   473bf:	mov    r14d,DWORD PTR [rsp+0xb0]
   473c7:	shr    r14d,0x3
   473cb:	xor    esi,r14d
   473ce:	add    esi,DWORD PTR [rsp+0xac]
   473d5:	mov    r14d,eax
   473d8:	add    esi,r10d
   473db:	add    esi,r13d
   473de:	mov    r13d,edx
   473e1:	xor    r13d,r12d
   473e4:	lea    ecx,[rcx+rsi*1+0x76f988da]
   473eb:	mov    DWORD PTR [rsp+0x1c],esi
   473ef:	mov    esi,ebp
   473f1:	and    r13d,ebp
   473f4:	ror    esi,0xb
   473f7:	xor    r13d,edx
   473fa:	add    r13d,ecx
   473fd:	mov    ecx,ebp
   473ff:	ror    ecx,0x6
   47402:	xor    esi,ecx
   47404:	mov    ecx,ebp
   47406:	and    r14d,edi
   47409:	rol    ecx,0x7
   4740c:	xor    ecx,esi
   4740e:	mov    esi,edi
   47410:	add    ecx,r13d
   47413:	mov    r13d,edi
   47416:	ror    esi,0x2
   47419:	ror    r13d,0xd
   4741d:	add    ebx,ecx
   4741f:	xor    r13d,esi
   47422:	mov    esi,edi
   47424:	rol    esi,0xa
   47427:	xor    r13d,esi
   4742a:	mov    esi,eax
   4742c:	or     esi,edi
   4742e:	and    esi,r11d
   47431:	or     esi,r14d
   47434:	mov    r14d,DWORD PTR [rsp+0x18]
   47439:	add    esi,r13d
   4743c:	add    esi,ecx
   4743e:	mov    r13d,r14d
   47441:	mov    ecx,r14d
   47444:	rol    ecx,0xf
   47447:	rol    r13d,0xd
   4744b:	xor    r13d,ecx
   4744e:	mov    ecx,r14d
   47451:	shr    ecx,0xa
   47454:	xor    r13d,ecx
   47457:	mov    ecx,DWORD PTR [rsp+0xb4]
   4745e:	ror    ecx,0x7
   47461:	mov    r14d,ecx
   47464:	mov    ecx,DWORD PTR [rsp+0xb4]
   4746b:	rol    ecx,0xe
   4746e:	xor    ecx,r14d
   47471:	mov    r14d,DWORD PTR [rsp+0xb4]
   47479:	shr    r14d,0x3
   4747d:	xor    ecx,r14d
   47480:	add    ecx,DWORD PTR [rsp+0xb0]
   47487:	mov    r14d,edi
   4748a:	add    ecx,r9d
   4748d:	add    ecx,r13d
   47490:	mov    r13d,r12d
   47493:	xor    r13d,ebp
   47496:	lea    edx,[rdx+rcx*1-0x67c1aeae]
   4749d:	mov    DWORD PTR [rsp+0x14],ecx
   474a1:	mov    ecx,ebx
   474a3:	and    r13d,ebx
   474a6:	xor    r13d,r12d
   474a9:	add    r13d,edx
   474ac:	mov    edx,ebx
   474ae:	ror    ecx,0xb
   474b1:	and    r14d,esi
   474b4:	ror    edx,0x6
   474b7:	xor    ecx,edx
   474b9:	mov    edx,ebx
   474bb:	rol    edx,0x7
   474be:	xor    edx,ecx
   474c0:	mov    ecx,esi
   474c2:	add    edx,r13d
   474c5:	mov    r13d,esi
   474c8:	ror    ecx,0x2
   474cb:	ror    r13d,0xd
   474cf:	add    r11d,edx
   474d2:	xor    r13d,ecx
   474d5:	mov    ecx,esi
   474d7:	rol    ecx,0xa
   474da:	xor    r13d,ecx
   474dd:	mov    ecx,edi
   474df:	or     ecx,esi
   474e1:	and    ecx,eax
   474e3:	or     ecx,r14d
   474e6:	mov    r14d,DWORD PTR [rsp+0x1c]
   474eb:	add    ecx,r13d
   474ee:	add    ecx,edx
   474f0:	mov    r13d,r14d
   474f3:	mov    edx,r14d
   474f6:	rol    edx,0xf
   474f9:	rol    r13d,0xd
   474fd:	xor    r13d,edx
   47500:	mov    edx,r14d
   47503:	shr    edx,0xa
   47506:	xor    r13d,edx
   47509:	mov    edx,DWORD PTR [rsp+0xb8]
   47510:	ror    edx,0x7
   47513:	mov    r14d,edx
   47516:	mov    edx,DWORD PTR [rsp+0xb8]
   4751d:	rol    edx,0xe
   47520:	xor    edx,r14d
   47523:	mov    r14d,DWORD PTR [rsp+0xb8]
   4752b:	shr    r14d,0x3
   4752f:	xor    edx,r14d
   47532:	add    edx,DWORD PTR [rsp+0xb4]
   47539:	mov    r14d,esi
   4753c:	add    edx,r8d
   4753f:	add    edx,r13d
   47542:	mov    r13d,ebp
   47545:	xor    r13d,ebx
   47548:	mov    DWORD PTR [rsp+0x24],edx
   4754c:	lea    r12d,[r12+rdx*1-0x57ce3993]
   47554:	mov    edx,r11d
   47557:	and    r13d,r11d
   4755a:	ror    edx,0x6
   4755d:	and    r14d,ecx
   47560:	xor    r13d,ebp
   47563:	add    r12d,r13d
   47566:	mov    r13d,edx
   47569:	mov    edx,r11d
   4756c:	ror    edx,0xb
   4756f:	xor    edx,r13d
   47572:	mov    r13d,r11d
   47575:	rol    r13d,0x7
   47579:	xor    r13d,edx
   4757c:	mov    edx,ecx
   4757e:	add    r13d,r12d
   47581:	ror    edx,0x2
   47584:	lea    r12d,[rax+r13*1]
   47588:	mov    eax,ecx
   4758a:	ror    eax,0xd
   4758d:	xor    eax,edx
   4758f:	mov    edx,ecx
   47591:	rol    edx,0xa
   47594:	xor    eax,edx
   47596:	mov    edx,esi
   47598:	or     edx,ecx
   4759a:	and    edx,edi
   4759c:	or     edx,r14d
   4759f:	mov    r14d,DWORD PTR [rsp+0x14]
   475a4:	add    edx,eax
   475a6:	add    edx,r13d
   475a9:	mov    eax,r14d
   475ac:	mov    r13d,r14d
   475af:	rol    eax,0xf
   475b2:	rol    r13d,0xd
   475b6:	xor    r13d,eax
   475b9:	mov    eax,r14d
   475bc:	shr    eax,0xa
   475bf:	xor    r13d,eax
   475c2:	mov    eax,DWORD PTR [rsp+0xbc]
   475c9:	ror    eax,0x7
   475cc:	mov    r14d,eax
   475cf:	mov    eax,DWORD PTR [rsp+0xbc]
   475d6:	rol    eax,0xe
   475d9:	xor    eax,r14d
   475dc:	mov    r14d,DWORD PTR [rsp+0xbc]
   475e4:	shr    r14d,0x3
   475e8:	xor    eax,r14d
   475eb:	add    eax,DWORD PTR [rsp+0xb8]
   475f2:	mov    r14d,ecx
   475f5:	add    eax,r15d
   475f8:	and    r14d,edx
   475fb:	add    eax,r13d
   475fe:	mov    r13d,ebx
   47601:	xor    r13d,r11d
   47604:	lea    ebp,[rbp+rax*1-0x4ffcd838]
   4760b:	mov    DWORD PTR [rsp+0x28],eax
   4760f:	mov    eax,r12d
   47612:	and    r13d,r12d
   47615:	ror    eax,0xb
   47618:	xor    r13d,ebx
   4761b:	add    ebp,r13d
   4761e:	mov    r13d,r12d
   47621:	ror    r13d,0x6
   47625:	xor    eax,r13d
   47628:	mov    r13d,r12d
   4762b:	rol    r13d,0x7
   4762f:	xor    r13d,eax
   47632:	add    r13d,ebp
   47635:	lea    ebp,[rdi+r13*1]
   47639:	mov    edi,edx
   4763b:	ror    edi,0x2
   4763e:	mov    eax,edi
   47640:	mov    edi,edx
   47642:	ror    edi,0xd
   47645:	xor    edi,eax
   47647:	mov    eax,edx
   47649:	rol    eax,0xa
   4764c:	xor    edi,eax
   4764e:	mov    eax,ecx
   47650:	or     eax,edx
   47652:	and    eax,esi
   47654:	or     eax,r14d
   47657:	mov    r14d,DWORD PTR [rsp+0x24]
   4765c:	add    eax,edi
   4765e:	add    eax,r13d
   47661:	mov    edi,r14d
   47664:	mov    r13d,r14d
   47667:	rol    edi,0xf
   4766a:	rol    r13d,0xd
   4766e:	xor    r13d,edi
   47671:	mov    edi,r14d
   47674:	shr    edi,0xa
   47677:	xor    r13d,edi
   4767a:	mov    edi,DWORD PTR [rsp+0xc0]
   47681:	ror    edi,0x7
   47684:	mov    r14d,edi
   47687:	mov    edi,DWORD PTR [rsp+0xc0]
   4768e:	rol    edi,0xe
   47691:	xor    edi,r14d
   47694:	mov    r14d,DWORD PTR [rsp+0xc0]
   4769c:	shr    r14d,0x3
   476a0:	xor    edi,r14d
   476a3:	add    edi,DWORD PTR [rsp+0xbc]
   476aa:	add    edi,DWORD PTR [rsp+0xc]
   476ae:	mov    r14d,edx
   476b1:	add    edi,r13d
   476b4:	mov    r13d,r11d
   476b7:	and    r14d,eax
   476ba:	xor    r13d,r12d
   476bd:	lea    ebx,[rbx+rdi*1-0x40a68039]
   476c4:	mov    DWORD PTR [rsp+0x2c],edi
   476c8:	mov    edi,ebp
   476ca:	and    r13d,ebp
   476cd:	ror    edi,0xb
   476d0:	xor    r13d,r11d
   476d3:	add    ebx,r13d
   476d6:	mov    r13d,ebp
   476d9:	ror    r13d,0x6
   476dd:	xor    edi,r13d
   476e0:	mov    r13d,ebp
   476e3:	rol    r13d,0x7
   476e7:	xor    r13d,edi
   476ea:	add    r13d,ebx
   476ed:	lea    ebx,[rsi+r13*1]
   476f1:	mov    esi,eax
   476f3:	ror    esi,0x2
   476f6:	mov    edi,esi
   476f8:	mov    esi,eax
   476fa:	ror    esi,0xd
   476fd:	xor    esi,edi
   476ff:	mov    edi,eax
   47701:	rol    edi,0xa
   47704:	xor    esi,edi
   47706:	mov    edi,edx
   47708:	or     edi,eax
   4770a:	and    edi,ecx
   4770c:	or     edi,r14d
   4770f:	mov    r14d,DWORD PTR [rsp+0x28]
   47714:	add    edi,esi
   47716:	add    edi,r13d
   47719:	mov    esi,r14d
   4771c:	mov    r13d,r14d
   4771f:	rol    esi,0xf
   47722:	rol    r13d,0xd
   47726:	xor    r13d,esi
   47729:	mov    esi,r14d
   4772c:	shr    esi,0xa
   4772f:	xor    r13d,esi
   47732:	mov    esi,DWORD PTR [rsp+0xc4]
   47739:	ror    esi,0x7
   4773c:	mov    r14d,esi
   4773f:	mov    esi,DWORD PTR [rsp+0xc4]
   47746:	rol    esi,0xe
   47749:	xor    esi,r14d
   4774c:	mov    r14d,DWORD PTR [rsp+0xc4]
   47754:	shr    r14d,0x3
   47758:	xor    esi,r14d
   4775b:	add    esi,DWORD PTR [rsp+0xc0]
   47762:	add    esi,DWORD PTR [rsp+0x10]
   47766:	mov    r14d,eax
   47769:	add    esi,r13d
   4776c:	mov    r13d,r12d
   4776f:	and    r14d,edi
   47772:	xor    r13d,ebp
   47775:	mov    DWORD PTR [rsp+0x30],esi
   47779:	lea    r11d,[r11+rsi*1-0x391ff40d]
   47781:	mov    esi,ebx
   47783:	and    r13d,ebx
   47786:	ror    esi,0x6
   47789:	xor    r13d,r12d
   4778c:	add    r11d,r13d
   4778f:	mov    r13d,esi
   47792:	mov    esi,ebx
   47794:	ror    esi,0xb
   47797:	xor    esi,r13d
   4779a:	mov    r13d,ebx
   4779d:	rol    r13d,0x7
   477a1:	xor    r13d,esi
   477a4:	add    r13d,r11d
   477a7:	lea    r11d,[rcx+r13*1]
   477ab:	mov    ecx,edi
   477ad:	ror    ecx,0x2
   477b0:	mov    esi,ecx
   477b2:	mov    ecx,edi
   477b4:	ror    ecx,0xd
   477b7:	xor    ecx,esi
   477b9:	mov    esi,edi
   477bb:	rol    esi,0xa
   477be:	xor    ecx,esi
   477c0:	mov    esi,eax
   477c2:	or     esi,edi
   477c4:	and    esi,edx
   477c6:	or     esi,r14d
   477c9:	mov    r14d,DWORD PTR [rsp+0x2c]
   477ce:	add    esi,ecx
   477d0:	add    esi,r13d
   477d3:	mov    ecx,r14d
   477d6:	mov    r13d,r14d
   477d9:	rol    ecx,0xf
   477dc:	rol    r13d,0xd
   477e0:	xor    r13d,ecx
   477e3:	mov    ecx,r14d
   477e6:	shr    ecx,0xa
   477e9:	xor    r13d,ecx
   477ec:	mov    ecx,DWORD PTR [rsp+0xc8]
   477f3:	ror    ecx,0x7
   477f6:	mov    r14d,ecx
   477f9:	mov    ecx,DWORD PTR [rsp+0xc8]
   47800:	rol    ecx,0xe
   47803:	xor    ecx,r14d
   47806:	mov    r14d,DWORD PTR [rsp+0xc8]
   4780e:	shr    r14d,0x3
   47812:	xor    ecx,r14d
   47815:	add    ecx,DWORD PTR [rsp+0xc4]
   4781c:	add    ecx,DWORD PTR [rsp+0x18]
   47820:	mov    r14d,edi
   47823:	add    ecx,r13d
   47826:	mov    r13d,ebp
   47829:	and    r14d,esi
   4782c:	xor    r13d,ebx
   4782f:	mov    DWORD PTR [rsp+0x48],ecx
   47833:	lea    r12d,[r12+rcx*1-0x2a586eb9]
   4783b:	mov    ecx,r11d
   4783e:	and    r13d,r11d
   47841:	ror    ecx,0x6
   47844:	xor    r13d,ebp
   47847:	add    r12d,r13d
   4784a:	mov    r13d,ecx
   4784d:	mov    ecx,r11d
   47850:	ror    ecx,0xb
   47853:	xor    ecx,r13d
   47856:	mov    r13d,r11d
   47859:	rol    r13d,0x7
   4785d:	xor    r13d,ecx
   47860:	add    r13d,r12d
   47863:	lea    r12d,[rdx+r13*1]
   47867:	mov    edx,esi
   47869:	ror    edx,0x2
   4786c:	mov    ecx,edx
   4786e:	mov    edx,esi
   47870:	ror    edx,0xd
   47873:	xor    edx,ecx
   47875:	mov    ecx,esi
   47877:	rol    ecx,0xa
   4787a:	xor    edx,ecx
   4787c:	mov    ecx,edi
   4787e:	or     ecx,esi
   47880:	and    ecx,eax
   47882:	or     ecx,r14d
   47885:	mov    r14d,DWORD PTR [rsp+0x30]
   4788a:	add    ecx,edx
   4788c:	add    ecx,r13d
   4788f:	mov    edx,r14d
   47892:	mov    r13d,r14d
   47895:	rol    edx,0xf
   47898:	rol    r13d,0xd
   4789c:	xor    r13d,edx
   4789f:	mov    edx,r14d
   478a2:	shr    edx,0xa
   478a5:	xor    r13d,edx
   478a8:	mov    edx,DWORD PTR [rsp+0xcc]
   478af:	ror    edx,0x7
   478b2:	mov    r14d,edx
   478b5:	mov    edx,DWORD PTR [rsp+0xcc]
   478bc:	rol    edx,0xe
   478bf:	xor    edx,r14d
   478c2:	mov    r14d,DWORD PTR [rsp+0xcc]
   478ca:	shr    r14d,0x3
   478ce:	xor    edx,r14d
   478d1:	add    edx,DWORD PTR [rsp+0xc8]
   478d8:	add    edx,DWORD PTR [rsp+0x1c]
   478dc:	mov    r14d,esi
   478df:	add    edx,r13d
   478e2:	mov    r13d,ebx
   478e5:	and    r14d,ecx
   478e8:	xor    r13d,r11d
   478eb:	mov    DWORD PTR [rsp+0x4c],edx
   478ef:	lea    ebp,[rbp+rdx*1+0x6ca6351]
   478f6:	mov    edx,r12d
   478f9:	and    r13d,r12d
   478fc:	ror    edx,0x6
   478ff:	xor    r13d,ebx
   47902:	add    r13d,ebp
   47905:	mov    ebp,edx
   47907:	mov    edx,r12d
   4790a:	ror    edx,0xb
   4790d:	xor    edx,ebp
   4790f:	mov    ebp,r12d
   47912:	rol    ebp,0x7
   47915:	xor    ebp,edx
   47917:	mov    edx,ecx
   47919:	add    ebp,r13d
   4791c:	ror    edx,0x2
   4791f:	lea    r13d,[rax+rbp*1]
   47923:	mov    eax,ecx
   47925:	ror    eax,0xd
   47928:	xor    eax,edx
   4792a:	mov    edx,ecx
   4792c:	rol    edx,0xa
   4792f:	xor    eax,edx
   47931:	mov    edx,esi
   47933:	or     edx,ecx
   47935:	and    edx,edi
   47937:	or     edx,r14d
   4793a:	mov    r14d,DWORD PTR [rsp+0x48]
   4793f:	add    edx,eax
   47941:	add    edx,ebp
   47943:	mov    eax,r14d
   47946:	mov    ebp,r14d
   47949:	rol    eax,0xf
   4794c:	rol    ebp,0xd
   4794f:	xor    ebp,eax
   47951:	mov    eax,r14d
   47954:	shr    eax,0xa
   47957:	xor    ebp,eax
   47959:	mov    eax,r10d
   4795c:	ror    eax,0x7
   4795f:	mov    r14d,eax
   47962:	mov    eax,r10d
   47965:	rol    eax,0xe
   47968:	xor    eax,r14d
   4796b:	mov    r14d,r10d
   4796e:	shr    r14d,0x3
   47972:	xor    eax,r14d
   47975:	add    eax,DWORD PTR [rsp+0xcc]
   4797c:	add    eax,DWORD PTR [rsp+0x14]
   47980:	mov    r14d,ecx
   47983:	add    eax,ebp
   47985:	mov    ebp,r11d
   47988:	and    r14d,edx
   4798b:	xor    ebp,r12d
   4798e:	lea    ebx,[rbx+rax*1+0x14292967]
   47995:	mov    DWORD PTR [rsp+0x50],eax
   47999:	mov    eax,r13d
   4799c:	and    ebp,r13d
   4799f:	ror    eax,0xb
   479a2:	xor    ebp,r11d
   479a5:	add    ebp,ebx
   479a7:	mov    ebx,r13d
   479aa:	ror    ebx,0x6
   479ad:	xor    eax,ebx
   479af:	mov    ebx,r13d
   479b2:	rol    ebx,0x7
   479b5:	xor    ebx,eax
   479b7:	mov    eax,edx
   479b9:	add    ebx,ebp
   479bb:	mov    ebp,edx
   479bd:	ror    eax,0x2
   479c0:	ror    ebp,0xd
   479c3:	add    edi,ebx
   479c5:	xor    ebp,eax
   479c7:	mov    eax,edx
   479c9:	rol    eax,0xa
   479cc:	xor    ebp,eax
   479ce:	mov    eax,ecx
   479d0:	or     eax,edx
   479d2:	and    eax,esi
   479d4:	or     eax,r14d
   479d7:	mov    r14d,DWORD PTR [rsp+0x4c]
   479dc:	add    eax,ebp
   479de:	add    eax,ebx
   479e0:	mov    ebp,r14d
   479e3:	mov    ebx,r14d
   479e6:	rol    ebx,0xf
   479e9:	rol    ebp,0xd
   479ec:	xor    ebp,ebx
   479ee:	mov    ebx,r14d
   479f1:	shr    ebx,0xa
   479f4:	xor    ebp,ebx
   479f6:	mov    ebx,r9d
   479f9:	ror    ebx,0x7
   479fc:	mov    r14d,ebx
   479ff:	mov    ebx,r9d
   47a02:	rol    ebx,0xe
   47a05:	xor    ebx,r14d
   47a08:	mov    r14d,r9d
   47a0b:	shr    r14d,0x3
   47a0f:	xor    ebx,r14d
   47a12:	add    r10d,ebx
   47a15:	mov    ebx,r12d
   47a18:	add    r10d,DWORD PTR [rsp+0x24]
   47a1d:	add    r10d,ebp
   47a20:	xor    ebx,r13d
   47a23:	mov    ebp,edx
   47a25:	mov    r14d,r10d
   47a28:	and    ebx,edi
   47a2a:	lea    r11d,[r11+r10*1+0x27b70a85]
   47a32:	mov    r10d,edi
   47a35:	xor    ebx,r12d
   47a38:	ror    r10d,0x6
   47a3c:	mov    DWORD PTR [rsp+0x74],r14d
   47a41:	add    ebx,r11d
   47a44:	mov    r11d,r10d
   47a47:	mov    r10d,edi
   47a4a:	ror    r10d,0xb
   47a4e:	xor    r10d,r11d
   47a51:	mov    r11d,edi
   47a54:	rol    r11d,0x7
   47a58:	xor    r11d,r10d
   47a5b:	mov    r10d,eax
   47a5e:	add    r11d,ebx
   47a61:	mov    ebx,eax
   47a63:	ror    r10d,0x2
   47a67:	ror    ebx,0xd
   47a6a:	add    esi,r11d
   47a6d:	xor    ebx,r10d
   47a70:	mov    r10d,eax
   47a73:	rol    r10d,0xa
   47a77:	xor    ebx,r10d
   47a7a:	mov    r10d,edx
   47a7d:	or     r10d,eax
   47a80:	and    r10d,ecx
   47a83:	and    ebp,eax
   47a85:	or     r10d,ebp
   47a88:	mov    ebp,DWORD PTR [rsp+0x50]
   47a8c:	add    r10d,ebx
   47a8f:	add    r10d,r11d
   47a92:	mov    ebx,ebp
   47a94:	mov    r11d,ebp
   47a97:	rol    r11d,0xf
   47a9b:	rol    ebx,0xd
   47a9e:	xor    ebx,r11d
   47aa1:	mov    r11d,ebp
   47aa4:	shr    r11d,0xa
   47aa8:	xor    ebx,r11d
   47aab:	mov    r11d,r8d
   47aae:	ror    r11d,0x7
   47ab2:	mov    ebp,r11d
   47ab5:	mov    r11d,r8d
   47ab8:	rol    r11d,0xe
   47abc:	xor    r11d,ebp
   47abf:	mov    ebp,r8d
   47ac2:	shr    ebp,0x3
   47ac5:	xor    r11d,ebp
   47ac8:	add    r9d,r11d
   47acb:	mov    r11d,r13d
   47ace:	add    r9d,DWORD PTR [rsp+0x28]
   47ad3:	add    r9d,ebx
   47ad6:	xor    r11d,edi
   47ad9:	and    r11d,esi
   47adc:	lea    ebx,[r12+r9*1+0x2e1b2138]
   47ae4:	mov    r12d,esi
   47ae7:	mov    DWORD PTR [rsp+0x54],r9d
   47aec:	xor    r11d,r13d
   47aef:	ror    r12d,0x6
   47af3:	add    ebx,r11d
   47af6:	mov    r11d,r12d
   47af9:	mov    r12d,esi
   47afc:	ror    r12d,0xb
   47b00:	mov    r9d,r12d
   47b03:	mov    r12d,esi
   47b06:	rol    r12d,0x7
   47b0a:	xor    r9d,r11d
   47b0d:	mov    r11d,r12d
   47b10:	mov    r12d,r10d
   47b13:	ror    r12d,0x2
   47b17:	xor    r11d,r9d
   47b1a:	mov    r9d,r12d
   47b1d:	mov    r12d,r10d
   47b20:	add    r11d,ebx
   47b23:	ror    r12d,0xd
   47b27:	add    ecx,r11d
   47b2a:	mov    ebx,r12d
   47b2d:	mov    r12d,r10d
   47b30:	xor    ebx,r9d
   47b33:	rol    r12d,0xa
   47b37:	xor    ebx,r12d
   47b3a:	mov    r12d,eax
   47b3d:	or     r12d,r10d
   47b40:	mov    r9d,r12d
   47b43:	mov    r12d,eax
   47b46:	and    r12d,r10d
   47b49:	and    r9d,edx
   47b4c:	or     r9d,r12d
   47b4f:	mov    r12d,r14d
   47b52:	add    r9d,ebx
   47b55:	mov    ebx,r14d
   47b58:	shr    r12d,0xa
   47b5c:	add    r9d,r11d
   47b5f:	mov    r11d,r14d
   47b62:	rol    ebx,0xd
   47b65:	mov    r14d,DWORD PTR [rsp+0xc]
   47b6a:	rol    r11d,0xf
   47b6e:	xor    ebx,r11d
   47b71:	xor    ebx,r12d
   47b74:	mov    r12d,r15d
   47b77:	ror    r12d,0x7
   47b7b:	mov    ebp,r12d
   47b7e:	mov    r12d,r15d
   47b81:	rol    r12d,0xe
   47b85:	mov    r11d,r12d
   47b88:	mov    r12d,r15d
   47b8b:	xor    r11d,ebp
   47b8e:	shr    r12d,0x3
   47b92:	xor    r11d,r12d
   47b95:	mov    r12d,edi
   47b98:	xor    r12d,esi
   47b9b:	add    r8d,r11d
   47b9e:	add    r8d,DWORD PTR [rsp+0x2c]
   47ba3:	add    r8d,ebx
   47ba6:	mov    r11d,r12d
   47ba9:	mov    r12d,r14d
   47bac:	and    r11d,ecx
   47baf:	lea    ebx,[r13+r8*1+0x4d2c6dfc]
   47bb7:	mov    DWORD PTR [rsp+0x20],r8d
   47bbc:	mov    r8d,ecx
   47bbf:	xor    r11d,edi
   47bc2:	ror    r8d,0x6
   47bc6:	mov    r13d,ecx
   47bc9:	add    ebx,r11d
   47bcc:	mov    r11d,r8d
   47bcf:	mov    r8d,ecx
   47bd2:	rol    r13d,0x7
   47bd6:	ror    r8d,0xb
   47bda:	xor    r8d,r11d
   47bdd:	mov    r11d,r13d
   47be0:	mov    r13d,r10d
   47be3:	xor    r11d,r8d
   47be6:	mov    r8d,r9d
   47be9:	add    r11d,ebx
   47bec:	ror    r8d,0x2
   47bf0:	lea    ebx,[rdx+r11*1]
   47bf4:	mov    edx,r9d
   47bf7:	ror    edx,0xd
   47bfa:	and    r13d,r9d
   47bfd:	shr    r12d,0x3
   47c01:	xor    edx,r8d
   47c04:	mov    r8d,r9d
   47c07:	rol    r8d,0xa
   47c0b:	xor    edx,r8d
   47c0e:	mov    r8d,r10d
   47c11:	or     r8d,r9d
   47c14:	and    r8d,eax
   47c17:	or     r8d,r13d
   47c1a:	mov    r13d,DWORD PTR [rsp+0x54]
   47c1f:	add    r8d,edx
   47c22:	add    r8d,r11d
   47c25:	mov    edx,r13d
   47c28:	mov    r11d,r13d
   47c2b:	rol    r11d,0xf
   47c2f:	rol    edx,0xd
   47c32:	xor    edx,r11d
   47c35:	mov    r11d,r13d
   47c38:	mov    r13d,ebx
   47c3b:	shr    r11d,0xa
   47c3f:	ror    r13d,0xb
   47c43:	xor    edx,r11d
   47c46:	mov    r11d,r14d
   47c49:	ror    r11d,0x7
   47c4d:	mov    ebp,r11d
   47c50:	mov    r11d,r14d
   47c53:	rol    r11d,0xe
   47c57:	xor    r11d,ebp
   47c5a:	mov    ebp,r13d
   47c5d:	mov    r13d,r8d
   47c60:	xor    r11d,r12d
   47c63:	add    r11d,r15d
   47c66:	add    r11d,DWORD PTR [rsp+0x30]
   47c6b:	lea    r15d,[rdx+r11*1]
   47c6f:	mov    edx,esi
   47c71:	xor    edx,ecx
   47c73:	lea    edi,[rdi+r15*1+0x53380d13]
   47c7b:	and    edx,ebx
   47c7d:	xor    edx,esi
   47c7f:	add    edi,edx
   47c81:	mov    edx,ebx
   47c83:	ror    edx,0x6
   47c86:	xor    ebp,edx
   47c88:	mov    edx,ebx
   47c8a:	rol    edx,0x7
   47c8d:	xor    edx,ebp
   47c8f:	add    edx,edi
   47c91:	ror    r13d,0x2
   47c95:	mov    edi,DWORD PTR [rsp+0x20]
   47c99:	mov    ebp,r13d
   47c9c:	mov    r13d,r8d
   47c9f:	lea    r12d,[rax+rdx*1]
   47ca3:	ror    r13d,0xd
   47ca7:	mov    eax,r13d
   47caa:	mov    r13d,r8d
   47cad:	xor    eax,ebp
   47caf:	rol    r13d,0xa
   47cb3:	xor    eax,r13d
   47cb6:	mov    r13d,r9d
   47cb9:	or     r13d,r8d
   47cbc:	mov    ebp,r13d
   47cbf:	mov    r13d,r9d
   47cc2:	and    r13d,r8d
   47cc5:	and    ebp,r10d
   47cc8:	or     ebp,r13d
   47ccb:	mov    r13d,DWORD PTR [rsp+0x10]
   47cd0:	add    ebp,eax
   47cd2:	mov    eax,edi
   47cd4:	add    ebp,edx
   47cd6:	mov    edx,edi
   47cd8:	rol    eax,0xd
   47cdb:	rol    edx,0xf
   47cde:	xor    eax,edx
   47ce0:	mov    edx,edi
   47ce2:	mov    edi,r13d
   47ce5:	shr    edx,0xa
   47ce8:	ror    edi,0x7
   47ceb:	xor    eax,edx
   47ced:	mov    edx,r13d
   47cf0:	rol    edx,0xe
   47cf3:	xor    edx,edi
   47cf5:	mov    edi,r13d
   47cf8:	shr    edi,0x3
   47cfb:	xor    edx,edi
   47cfd:	mov    edi,DWORD PTR [rsp+0x18]
   47d01:	add    edx,r14d
   47d04:	add    edx,DWORD PTR [rsp+0x48]
   47d08:	add    eax,edx
   47d0a:	mov    r14d,eax
   47d0d:	mov    eax,ecx
   47d0f:	xor    eax,ebx
   47d11:	lea    edx,[rsi+r14*1+0x650a7354]
   47d19:	mov    esi,r12d
   47d1c:	mov    DWORD PTR [rsp+0x58],r14d
   47d21:	and    eax,r12d
   47d24:	ror    esi,0x6
   47d27:	xor    eax,ecx
   47d29:	add    edx,eax
   47d2b:	mov    eax,esi
   47d2d:	mov    esi,r12d
   47d30:	ror    esi,0xb
   47d33:	mov    r11d,esi
   47d36:	mov    esi,r12d
   47d39:	rol    esi,0x7
   47d3c:	xor    r11d,eax
   47d3f:	mov    eax,esi
   47d41:	mov    esi,ebp
   47d43:	xor    eax,r11d
   47d46:	ror    esi,0x2
   47d49:	mov    r11d,esi
   47d4c:	mov    esi,ebp
   47d4e:	add    eax,edx
   47d50:	ror    esi,0xd
   47d53:	add    r10d,eax
   47d56:	mov    edx,esi
   47d58:	mov    esi,ebp
   47d5a:	xor    edx,r11d
   47d5d:	rol    esi,0xa
   47d60:	xor    edx,esi
   47d62:	mov    esi,r8d
   47d65:	or     esi,ebp
   47d67:	mov    r11d,esi
   47d6a:	mov    esi,r8d
   47d6d:	and    esi,ebp
   47d6f:	and    r11d,r9d
   47d72:	or     r11d,esi
   47d75:	mov    esi,r15d
   47d78:	add    r11d,edx
   47d7b:	rol    esi,0xf
   47d7e:	add    r11d,eax
   47d81:	mov    eax,esi
   47d83:	mov    esi,r15d
   47d86:	rol    esi,0xd
   47d89:	mov    edx,esi
   47d8b:	mov    esi,r15d
   47d8e:	xor    edx,eax
   47d90:	shr    esi,0xa
   47d93:	mov    eax,edi
   47d95:	xor    edx,esi
   47d97:	mov    esi,edi
   47d99:	rol    eax,0xe
   47d9c:	ror    esi,0x7
   47d9f:	xor    eax,esi
   47da1:	mov    esi,edi
   47da3:	shr    esi,0x3
   47da6:	xor    eax,esi
   47da8:	mov    esi,r10d
   47dab:	add    eax,r13d
   47dae:	add    eax,DWORD PTR [rsp+0x4c]
   47db2:	add    eax,edx
   47db4:	mov    edx,ebx
   47db6:	xor    edx,r12d
   47db9:	lea    ecx,[rcx+rax*1+0x766a0abb]
   47dc0:	mov    r13d,eax
   47dc3:	and    edx,r10d
   47dc6:	xor    edx,ebx
   47dc8:	add    ecx,edx
   47dca:	mov    edx,r10d
   47dcd:	ror    edx,0x6
   47dd0:	ror    esi,0xb
   47dd3:	mov    eax,esi
   47dd5:	mov    esi,r11d
   47dd8:	xor    eax,edx
   47dda:	mov    edx,r10d
   47ddd:	rol    esi,0xa
   47de0:	rol    edx,0x7
   47de3:	xor    edx,eax
   47de5:	add    edx,ecx
   47de7:	mov    ecx,r11d
   47dea:	ror    ecx,0x2
   47ded:	add    r9d,edx
   47df0:	mov    eax,ecx
   47df2:	mov    ecx,r11d
   47df5:	ror    ecx,0xd
   47df8:	xor    ecx,eax
   47dfa:	xor    ecx,esi
   47dfc:	mov    esi,ebp
   47dfe:	or     esi,r11d
   47e01:	mov    eax,esi
   47e03:	mov    esi,ebp
   47e05:	and    esi,r11d
   47e08:	and    eax,r8d
   47e0b:	or     eax,esi
   47e0d:	add    eax,ecx
   47e0f:	mov    ecx,r14d
   47e12:	add    eax,edx
   47e14:	mov    edx,r14d
   47e17:	rol    ecx,0xf
   47e1a:	rol    edx,0xd
   47e1d:	xor    edx,ecx
   47e1f:	mov    ecx,r14d
   47e22:	mov    r14d,DWORD PTR [rsp+0x1c]
   47e27:	shr    ecx,0xa
   47e2a:	xor    edx,ecx
   47e2c:	mov    esi,r14d
   47e2f:	mov    ecx,r14d
   47e32:	ror    ecx,0x7
   47e35:	rol    esi,0xe
   47e38:	xor    esi,ecx
   47e3a:	mov    ecx,r14d
   47e3d:	shr    ecx,0x3
   47e40:	xor    esi,ecx
   47e42:	add    esi,edi
   47e44:	add    esi,DWORD PTR [rsp+0x50]
   47e48:	add    esi,edx
   47e4a:	mov    edx,r12d
   47e4d:	xor    edx,r10d
   47e50:	mov    DWORD PTR [rsp+0xc],esi
   47e54:	lea    ecx,[rbx+rsi*1-0x7e3d36d2]
   47e5b:	mov    esi,r9d
   47e5e:	and    edx,r9d
   47e61:	mov    ebx,DWORD PTR [rsp+0x14]
   47e65:	xor    edx,r12d
   47e68:	ror    esi,0xb
   47e6b:	add    ecx,edx
   47e6d:	mov    edx,r9d
   47e70:	mov    edi,esi
   47e72:	mov    esi,eax
   47e74:	ror    edx,0x6
   47e77:	ror    esi,0x2
   47e7a:	xor    edi,edx
   47e7c:	mov    edx,r9d
   47e7f:	rol    edx,0x7
   47e82:	xor    edx,edi
   47e84:	mov    edi,esi
   47e86:	mov    esi,eax
   47e88:	ror    esi,0xd
   47e8b:	add    edx,ecx
   47e8d:	mov    ecx,esi
   47e8f:	mov    esi,eax
   47e91:	add    r8d,edx
   47e94:	xor    ecx,edi
   47e96:	rol    esi,0xa
   47e99:	xor    ecx,esi
   47e9b:	mov    esi,r11d
   47e9e:	or     esi,eax
   47ea0:	mov    edi,esi
   47ea2:	mov    esi,r11d
   47ea5:	and    esi,eax
   47ea7:	and    edi,ebp
   47ea9:	or     edi,esi
   47eab:	mov    esi,r13d
   47eae:	add    edi,ecx
   47eb0:	mov    ecx,r13d
   47eb3:	mov    DWORD PTR [rsp+0x5c],esi
   47eb7:	add    edi,edx
   47eb9:	rol    ecx,0xd
   47ebc:	mov    edx,r13d
   47ebf:	rol    edx,0xf
   47ec2:	mov    r13d,ecx
   47ec5:	xor    r13d,edx
   47ec8:	mov    edx,esi
   47eca:	mov    esi,ebx
   47ecc:	shr    edx,0xa
   47ecf:	rol    esi,0xe
   47ed2:	xor    r13d,edx
   47ed5:	mov    edx,ebx
   47ed7:	ror    edx,0x7
   47eda:	xor    esi,edx
   47edc:	mov    edx,ebx
   47ede:	shr    edx,0x3
   47ee1:	xor    esi,edx
   47ee3:	mov    edx,r10d
   47ee6:	add    esi,r14d
   47ee9:	add    esi,DWORD PTR [rsp+0x74]
   47eed:	mov    r14d,DWORD PTR [rsp+0x24]
   47ef2:	add    esi,r13d
   47ef5:	xor    edx,r9d
   47ef8:	mov    r13d,eax
   47efb:	and    edx,r8d
   47efe:	lea    ecx,[r12+rsi*1-0x6d8dd37b]
   47f06:	mov    DWORD PTR [rsp+0x10],esi
   47f0a:	mov    esi,r8d
   47f0d:	xor    edx,r10d
   47f10:	ror    esi,0xb
   47f13:	and    r13d,edi
   47f16:	mov    r12d,r14d
   47f19:	add    ecx,edx
   47f1b:	mov    edx,r8d
   47f1e:	shr    r12d,0x3
   47f22:	ror    edx,0x6
   47f25:	xor    esi,edx
   47f27:	mov    edx,r8d
   47f2a:	rol    edx,0x7
   47f2d:	xor    edx,esi
   47f2f:	mov    esi,edi
   47f31:	add    edx,ecx
   47f33:	mov    ecx,edi
   47f35:	ror    esi,0x2
   47f38:	ror    ecx,0xd
   47f3b:	add    ebp,edx
   47f3d:	xor    ecx,esi
   47f3f:	mov    esi,edi
   47f41:	rol    esi,0xa
   47f44:	xor    ecx,esi
   47f46:	mov    esi,eax
   47f48:	or     esi,edi
   47f4a:	and    esi,r11d
   47f4d:	or     esi,r13d
   47f50:	add    esi,ecx
   47f52:	mov    ecx,DWORD PTR [rsp+0xc]
   47f56:	add    esi,edx
   47f58:	mov    edx,ecx
   47f5a:	rol    edx,0xf
   47f5d:	mov    r13d,edx
   47f60:	mov    edx,ecx
   47f62:	shr    ecx,0xa
   47f65:	rol    edx,0xd
   47f68:	xor    edx,r13d
   47f6b:	mov    r13d,edi
   47f6e:	xor    edx,ecx
   47f70:	mov    ecx,r14d
   47f73:	ror    ecx,0x7
   47f76:	mov    ebx,ecx
   47f78:	mov    ecx,r14d
   47f7b:	rol    ecx,0xe
   47f7e:	xor    ecx,ebx
   47f80:	xor    ecx,r12d
   47f83:	add    ecx,DWORD PTR [rsp+0x14]
   47f87:	add    ecx,DWORD PTR [rsp+0x54]
   47f8b:	and    r13d,esi
   47f8e:	add    edx,ecx
   47f90:	mov    ebx,edx
   47f92:	mov    edx,r9d
   47f95:	xor    edx,r8d
   47f98:	lea    ecx,[r10+rbx*1-0x5d40175f]
   47fa0:	mov    r10d,ebp
   47fa3:	mov    DWORD PTR [rsp+0x14],ebx
   47fa7:	and    edx,ebp
   47fa9:	ror    r10d,0xb
   47fad:	xor    edx,r9d
   47fb0:	add    ecx,edx
   47fb2:	mov    edx,ebp
   47fb4:	ror    edx,0x6
   47fb7:	xor    r10d,edx
   47fba:	mov    edx,ebp
   47fbc:	rol    edx,0x7
   47fbf:	xor    edx,r10d
   47fc2:	mov    r10d,esi
   47fc5:	add    edx,ecx
   47fc7:	mov    ecx,esi
   47fc9:	ror    r10d,0x2
   47fcd:	ror    ecx,0xd
   47fd0:	add    r11d,edx
   47fd3:	xor    ecx,r10d
   47fd6:	mov    r10d,esi
   47fd9:	rol    r10d,0xa
   47fdd:	xor    ecx,r10d
   47fe0:	mov    r10d,edi
   47fe3:	or     r10d,esi
   47fe6:	and    r10d,eax
   47fe9:	or     r10d,r13d
   47fec:	mov    r13d,DWORD PTR [rsp+0x10]
   47ff1:	add    r10d,ecx
   47ff4:	mov    ebx,r13d
   47ff7:	add    r10d,edx
   47ffa:	mov    edx,r13d
   47ffd:	rol    ebx,0xd
   48000:	rol    edx,0xf
   48003:	mov    r12d,ebx
   48006:	xor    r12d,edx
   48009:	mov    edx,r13d
   4800c:	mov    r13d,DWORD PTR [rsp+0x28]
   48011:	shr    edx,0xa
   48014:	xor    r12d,edx
   48017:	mov    ecx,r13d
   4801a:	mov    edx,r13d
   4801d:	ror    ecx,0x7
   48020:	rol    edx,0xe
   48023:	xor    edx,ecx
   48025:	mov    ecx,r13d
   48028:	shr    ecx,0x3
   4802b:	xor    edx,ecx
   4802d:	mov    ecx,r8d
   48030:	add    edx,r14d
   48033:	xor    ecx,ebp
   48035:	add    edx,DWORD PTR [rsp+0x20]
   48039:	mov    r14d,DWORD PTR [rsp+0x2c]
   4803e:	add    edx,r12d
   48041:	and    ecx,r11d
   48044:	xor    ecx,r8d
   48047:	lea    r9d,[r9+rdx*1-0x57e599b5]
   4804f:	mov    DWORD PTR [rsp+0x18],edx
   48053:	mov    edx,r11d
   48056:	add    r9d,ecx
   48059:	mov    ecx,r11d
   4805c:	ror    edx,0xb
   4805f:	ror    ecx,0x6
   48062:	xor    edx,ecx
   48064:	mov    ecx,r11d
   48067:	rol    ecx,0x7
   4806a:	xor    ecx,edx
   4806c:	add    ecx,r9d
   4806f:	mov    r9d,r10d
   48072:	ror    r9d,0x2
   48076:	lea    ebx,[rax+rcx*1]
   48079:	mov    edx,r9d
   4807c:	mov    r9d,r10d
   4807f:	ror    r9d,0xd
   48083:	mov    eax,r9d
   48086:	mov    r9d,r10d
   48089:	xor    eax,edx
   4808b:	rol    r9d,0xa
   4808f:	xor    eax,r9d
   48092:	mov    r9d,esi
   48095:	or     r9d,r10d
   48098:	mov    edx,r9d
   4809b:	mov    r9d,esi
   4809e:	and    r9d,r10d
   480a1:	and    edx,edi
   480a3:	or     edx,r9d
   480a6:	mov    r9d,DWORD PTR [rsp+0x14]
   480ab:	add    edx,eax
   480ad:	add    edx,ecx
   480af:	mov    ecx,r9d
   480b2:	mov    eax,r9d
   480b5:	rol    ecx,0xd
   480b8:	rol    eax,0xf
   480bb:	mov    r12d,ecx
   480be:	mov    ecx,r14d
   480c1:	xor    r12d,eax
   480c4:	mov    eax,r9d
   480c7:	mov    r9d,ebp
   480ca:	shr    eax,0xa
   480cd:	xor    r12d,eax
   480d0:	mov    eax,r14d
   480d3:	ror    ecx,0x7
   480d6:	xor    r9d,r11d
   480d9:	rol    eax,0xe
   480dc:	xor    eax,ecx
   480de:	mov    ecx,r14d
   480e1:	shr    ecx,0x3
   480e4:	xor    eax,ecx
   480e6:	mov    ecx,r9d
   480e9:	mov    r9d,ebx
   480ec:	add    eax,r13d
   480ef:	and    ecx,ebx
   480f1:	ror    r9d,0x6
   480f5:	add    eax,r15d
   480f8:	xor    ecx,ebp
   480fa:	add    eax,r12d
   480fd:	mov    r12d,DWORD PTR [rsp+0x30]
   48102:	mov    r13d,eax
   48105:	lea    eax,[r8+rax*1-0x3db47490]
   4810d:	mov    r8d,ebx
   48110:	add    eax,ecx
   48112:	mov    ecx,r9d
   48115:	mov    r9d,ebx
   48118:	rol    r8d,0x7
   4811c:	ror    r9d,0xb
   48120:	mov    DWORD PTR [rsp+0x30],r13d
   48125:	xor    r9d,ecx
   48128:	mov    ecx,r8d
   4812b:	mov    r8d,edx
   4812e:	xor    ecx,r9d
   48131:	ror    r8d,0xd
   48135:	mov    r9d,edx
   48138:	add    ecx,eax
   4813a:	ror    r9d,0x2
   4813e:	lea    eax,[rdi+rcx*1]
   48141:	mov    edi,r8d
   48144:	mov    r8d,r10d
   48147:	xor    edi,r9d
   4814a:	mov    r9d,edx
   4814d:	and    r8d,edx
   48150:	rol    r9d,0xa
   48154:	xor    edi,r9d
   48157:	mov    r9d,r10d
   4815a:	or     r9d,edx
   4815d:	and    r9d,esi
   48160:	or     r9d,r8d
   48163:	mov    r8d,DWORD PTR [rsp+0x18]
   48168:	add    r9d,edi
   4816b:	mov    edi,r8d
   4816e:	add    r9d,ecx
   48171:	rol    edi,0xf
   48174:	mov    ecx,edi
   48176:	mov    edi,r8d
   48179:	rol    r8d,0xd
   4817d:	xor    r8d,ecx
   48180:	shr    edi,0xa
   48183:	mov    ecx,r12d
   48186:	xor    r8d,edi
   48189:	mov    edi,r12d
   4818c:	ror    ecx,0x7
   4818f:	rol    edi,0xe
   48192:	xor    edi,ecx
   48194:	mov    ecx,r12d
   48197:	shr    ecx,0x3
   4819a:	xor    edi,ecx
   4819c:	add    edi,r14d
   4819f:	mov    r14d,r11d
   481a2:	add    edi,DWORD PTR [rsp+0x58]
   481a6:	xor    r14d,ebx
   481a9:	add    r8d,edi
   481ac:	mov    ecx,r14d
   481af:	mov    r14d,eax
   481b2:	lea    edi,[rbp+r8*1-0x3893ae5d]
   481ba:	mov    ebp,r13d
   481bd:	and    ecx,eax
   481bf:	ror    r14d,0xb
   481c3:	mov    DWORD PTR [rsp+0x1c],r8d
   481c8:	mov    r8d,eax
   481cb:	xor    ecx,r11d
   481ce:	ror    r8d,0x6
   481d2:	add    edi,ecx
   481d4:	mov    ecx,r14d
   481d7:	mov    r14d,r9d
   481da:	xor    ecx,r8d
   481dd:	mov    r8d,eax
   481e0:	ror    r14d,0xd
   481e4:	rol    r8d,0x7
   481e8:	xor    ecx,r8d
   481eb:	add    ecx,edi
   481ed:	mov    edi,r14d
   481f0:	mov    r14d,edx
   481f3:	lea    r8d,[rsi+rcx*1]
   481f7:	mov    esi,r9d
   481fa:	and    r14d,r9d
   481fd:	ror    esi,0x2
   48200:	xor    edi,esi
   48202:	mov    esi,r9d
   48205:	rol    esi,0xa
   48208:	xor    edi,esi
   4820a:	mov    esi,edx
   4820c:	or     esi,r9d
   4820f:	and    esi,r10d
   48212:	or     esi,r14d
   48215:	mov    r14d,DWORD PTR [rsp+0x48]
   4821a:	add    esi,edi
   4821c:	mov    edi,r13d
   4821f:	add    esi,ecx
   48221:	rol    edi,0xf
   48224:	mov    ecx,edi
   48226:	mov    edi,r13d
   48229:	shr    ebp,0xa
   4822c:	mov    r13d,r8d
   4822f:	rol    edi,0xd
   48232:	rol    r13d,0x7
   48236:	xor    edi,ecx
   48238:	mov    ecx,r14d
   4823b:	ror    ecx,0x7
   4823e:	xor    edi,ebp
   48240:	mov    ebp,ecx
   48242:	mov    ecx,r14d
   48245:	rol    ecx,0xe
   48248:	xor    ecx,ebp
   4824a:	mov    ebp,r14d
   4824d:	shr    ebp,0x3
   48250:	xor    ecx,ebp
   48252:	add    ecx,r12d
   48255:	add    ecx,DWORD PTR [rsp+0x5c]
   48259:	add    edi,ecx
   4825b:	mov    ecx,ebx
   4825d:	xor    ecx,eax
   4825f:	mov    r12d,edi
   48262:	mov    edi,ecx
   48264:	mov    ecx,r8d
   48267:	lea    r11d,[r11+r12*1-0x2e6d17e7]
   4826f:	mov    DWORD PTR [rsp+0x24],r12d
   48274:	and    edi,r8d
   48277:	ror    ecx,0x6
   4827a:	mov    r12d,DWORD PTR [rsp+0x1c]
   4827f:	xor    edi,ebx
   48281:	add    r11d,edi
   48284:	mov    edi,ecx
   48286:	mov    ecx,r8d
   48289:	ror    ecx,0xb
   4828c:	xor    ecx,edi
   4828e:	mov    edi,r13d
   48291:	mov    r13d,esi
   48294:	xor    edi,ecx
   48296:	ror    r13d,0xd
   4829a:	mov    ecx,esi
   4829c:	add    edi,r11d
   4829f:	ror    ecx,0x2
   482a2:	mov    r11d,r13d
   482a5:	mov    r13d,r9d
   482a8:	xor    r11d,ecx
   482ab:	mov    ecx,esi
   482ad:	and    r13d,esi
   482b0:	add    r10d,edi
   482b3:	rol    ecx,0xa
   482b6:	xor    r11d,ecx
   482b9:	mov    ecx,r9d
   482bc:	or     ecx,esi
   482be:	and    ecx,edx
   482c0:	or     ecx,r13d
   482c3:	add    ecx,r11d
   482c6:	mov    r11d,r12d
   482c9:	add    ecx,edi
   482cb:	mov    edi,r12d
   482ce:	rol    r11d,0xd
   482d2:	rol    edi,0xf
   482d5:	xor    r11d,edi
   482d8:	mov    edi,r12d
   482db:	mov    r12d,DWORD PTR [rsp+0x4c]
   482e0:	shr    edi,0xa
   482e3:	xor    r11d,edi
   482e6:	mov    edi,r12d
   482e9:	ror    edi,0x7
   482ec:	mov    ebp,edi
   482ee:	mov    edi,r12d
   482f1:	rol    edi,0xe
   482f4:	xor    edi,ebp
   482f6:	mov    ebp,r12d
   482f9:	shr    ebp,0x3
   482fc:	xor    edi,ebp
   482fe:	mov    ebp,DWORD PTR [rsp+0x50]
   48302:	add    edi,r14d
   48305:	mov    r14d,eax
   48308:	add    edi,DWORD PTR [rsp+0xc]
   4830c:	xor    r14d,r8d
   4830f:	add    r11d,edi
   48312:	mov    edi,r14d
   48315:	mov    r14d,r10d
   48318:	mov    DWORD PTR [rsp+0x28],r11d
   4831d:	lea    r11d,[rbx+r11*1-0x2966f9dc]
   48325:	and    edi,r10d
   48328:	ror    r14d,0x6
   4832c:	xor    edi,eax
   4832e:	add    r11d,edi
   48331:	mov    edi,r14d
   48334:	mov    r14d,r10d
   48337:	ror    r14d,0xb
   4833b:	mov    r13d,r14d
   4833e:	mov    r14d,r10d
   48341:	rol    r14d,0x7
   48345:	xor    r13d,edi
   48348:	mov    edi,r14d
   4834b:	mov    r14d,ecx
   4834e:	ror    r14d,0x2
   48352:	xor    edi,r13d
   48355:	mov    r13d,r14d
   48358:	mov    r14d,ecx
   4835b:	add    edi,r11d
   4835e:	ror    r14d,0xd
   48362:	add    edx,edi
   48364:	mov    r11d,r14d
   48367:	mov    r14d,ecx
   4836a:	xor    r11d,r13d
   4836d:	rol    r14d,0xa
   48371:	xor    r11d,r14d
   48374:	mov    r14d,esi
   48377:	or     r14d,ecx
   4837a:	mov    r13d,r14d
   4837d:	mov    r14d,esi
   48380:	and    r14d,ecx
   48383:	and    r13d,r9d
   48386:	or     r13d,r14d
   48389:	mov    r14d,DWORD PTR [rsp+0x24]
   4838e:	add    r13d,r11d
   48391:	mov    ebx,r14d
   48394:	mov    r11d,r14d
   48397:	add    r13d,edi
   4839a:	mov    edi,ebp
   4839c:	rol    ebx,0xf
   4839f:	rol    r11d,0xd
   483a3:	rol    edi,0xe
   483a6:	xor    r11d,ebx
   483a9:	mov    ebx,ebp
   483ab:	shr    r14d,0xa
   483af:	ror    ebx,0x7
   483b2:	xor    r11d,r14d
   483b5:	mov    r14d,r8d
   483b8:	xor    edi,ebx
   483ba:	mov    ebx,ebp
   483bc:	xor    r14d,r10d
   483bf:	shr    ebx,0x3
   483c2:	xor    edi,ebx
   483c4:	add    edi,r12d
   483c7:	add    edi,DWORD PTR [rsp+0x10]
   483cb:	mov    r12d,edx
   483ce:	lea    ebx,[r11+rdi*1]
   483d2:	mov    edi,r14d
   483d5:	mov    r14d,edx
   483d8:	rol    r12d,0x7
   483dc:	and    edi,edx
   483de:	lea    eax,[rax+rbx*1-0xbf1ca7b]
   483e5:	ror    r14d,0x6
   483e9:	mov    DWORD PTR [rsp+0x2c],ebx
   483ed:	xor    edi,r8d
   483f0:	mov    ebx,DWORD PTR [rsp+0x28]
   483f4:	add    edi,eax
   483f6:	mov    eax,r14d
   483f9:	mov    r14d,edx
   483fc:	ror    r14d,0xb
   48400:	xor    r14d,eax
   48403:	mov    eax,r12d
   48406:	mov    r12d,ecx
   48409:	xor    eax,r14d
   4840c:	mov    r14d,r13d
   4840f:	add    eax,edi
   48411:	ror    r14d,0x2
   48415:	lea    edi,[r9+rax*1]
   48419:	mov    r9d,r13d
   4841c:	ror    r9d,0xd
   48420:	xor    r9d,r14d
   48423:	mov    r14d,r13d
   48426:	rol    r14d,0xa
   4842a:	xor    r9d,r14d
   4842d:	mov    r14d,ecx
   48430:	and    r12d,r13d
   48433:	or     r14d,r13d
   48436:	and    r14d,esi
   48439:	or     r14d,r12d
   4843c:	mov    r12d,DWORD PTR [rsp+0x74]
   48441:	add    r14d,r9d
   48444:	mov    r9d,ebx
   48447:	add    r14d,eax
   4844a:	mov    eax,ebx
   4844c:	rol    r9d,0xd
   48450:	mov    r11d,r12d
   48453:	rol    eax,0xf
   48456:	ror    r11d,0x7
   4845a:	xor    r9d,eax
   4845d:	mov    eax,ebx
   4845f:	mov    ebx,DWORD PTR [rsp+0x54]
   48463:	shr    eax,0xa
   48466:	xor    r9d,eax
   48469:	mov    eax,r12d
   4846c:	rol    eax,0xe
   4846f:	xor    eax,r11d
   48472:	mov    r11d,r12d
   48475:	shr    r11d,0x3
   48479:	xor    eax,r11d
   4847c:	mov    r11d,r13d
   4847f:	add    eax,ebp
   48481:	add    eax,DWORD PTR [rsp+0x14]
   48485:	add    eax,r9d
   48488:	mov    r9d,r10d
   4848b:	xor    r9d,edx
   4848e:	lea    r8d,[r8+rax*1+0x106aa070]
   48496:	mov    ebp,eax
   48498:	mov    eax,edi
   4849a:	and    r9d,edi
   4849d:	ror    eax,0xb
   484a0:	mov    DWORD PTR [rsp+0x4c],ebp
   484a4:	xor    r9d,r10d
   484a7:	add    r9d,r8d
   484aa:	mov    r8d,edi
   484ad:	ror    r8d,0x6
   484b1:	xor    eax,r8d
   484b4:	mov    r8d,edi
   484b7:	rol    r8d,0x7
   484bb:	xor    r8d,eax
   484be:	add    r8d,r9d
   484c1:	mov    r9d,r14d
   484c4:	ror    r9d,0x2
   484c8:	add    esi,r8d
   484cb:	mov    eax,r9d
   484ce:	mov    r9d,r14d
   484d1:	ror    r9d,0xd
   484d5:	and    r11d,r14d
   484d8:	xor    r9d,eax
   484db:	mov    eax,r14d
   484de:	rol    eax,0xa
   484e1:	xor    r9d,eax
   484e4:	mov    eax,r13d
   484e7:	or     eax,r14d
   484ea:	and    eax,ecx
   484ec:	or     eax,r11d
   484ef:	mov    r11d,DWORD PTR [rsp+0x2c]
   484f4:	add    eax,r9d
   484f7:	add    eax,r8d
   484fa:	mov    r9d,r11d
   484fd:	mov    r8d,r11d
   48500:	rol    r8d,0xf
   48504:	rol    r9d,0xd
   48508:	xor    r9d,r8d
   4850b:	mov    r8d,r11d
   4850e:	mov    r11d,ebx
   48511:	shr    r8d,0xa
   48515:	ror    r11d,0x7
   48519:	xor    r9d,r8d
   4851c:	mov    r8d,ebx
   4851f:	rol    r8d,0xe
   48523:	xor    r8d,r11d
   48526:	mov    r11d,ebx
   48529:	shr    r11d,0x3
   4852d:	xor    r8d,r11d
   48530:	mov    r11d,DWORD PTR [rsp+0x20]
   48535:	add    r8d,r12d
   48538:	add    r8d,DWORD PTR [rsp+0x18]
   4853d:	mov    r12d,r14d
   48540:	add    r9d,r8d
   48543:	mov    r8d,edx
   48546:	xor    r8d,edi
   48549:	mov    DWORD PTR [rsp+0x48],r9d
   4854e:	and    r8d,esi
   48551:	mov    DWORD PTR [rsp+0x90],r9d
   48559:	lea    r9d,[r10+r9*1+0x19a4c116]
   48561:	mov    r10d,esi
   48564:	xor    r8d,edx
   48567:	ror    r10d,0xb
   4856b:	add    r9d,r8d
   4856e:	mov    r8d,esi
   48571:	ror    r8d,0x6
   48575:	xor    r10d,r8d
   48578:	mov    r8d,esi
   4857b:	rol    r8d,0x7
   4857f:	xor    r8d,r10d
   48582:	mov    r10d,eax
   48585:	add    r8d,r9d
   48588:	mov    r9d,eax
   4858b:	ror    r10d,0x2
   4858f:	and    r12d,eax
   48592:	ror    r9d,0xd
   48596:	add    ecx,r8d
   48599:	xor    r9d,r10d
   4859c:	mov    r10d,eax
   4859f:	rol    r10d,0xa
   485a3:	xor    r9d,r10d
   485a6:	mov    r10d,r14d
   485a9:	or     r10d,eax
   485ac:	and    r10d,r13d
   485af:	or     r10d,r12d
   485b2:	mov    r12d,ebp
   485b5:	add    r10d,r9d
   485b8:	rol    r12d,0xd
   485bc:	mov    r9d,r11d
   485bf:	add    r10d,r8d
   485c2:	mov    r8d,ebp
   485c5:	rol    r9d,0xe
   485c9:	rol    r8d,0xf
   485cd:	xor    r12d,r8d
   485d0:	mov    r8d,ebp
   485d3:	shr    r8d,0xa
   485d7:	xor    r12d,r8d
   485da:	mov    r8d,r11d
   485dd:	ror    r8d,0x7
   485e1:	xor    r9d,r8d
   485e4:	mov    r8d,r11d
   485e7:	mov    r11d,r10d
   485ea:	shr    r8d,0x3
   485ee:	xor    r9d,r8d
   485f1:	mov    r8d,edi
   485f4:	add    r9d,ebx
   485f7:	xor    r8d,esi
   485fa:	add    r9d,DWORD PTR [rsp+0x30]
   485ff:	mov    ebx,eax
   48601:	add    r12d,r9d
   48604:	and    r8d,ecx
   48607:	mov    r9d,ecx
   4860a:	xor    r8d,edi
   4860d:	lea    edx,[rdx+r12*1+0x1e376c08]
   48615:	ror    r9d,0xb
   48619:	mov    DWORD PTR [rsp+0x94],r12d
   48621:	add    r8d,edx
   48624:	mov    edx,ecx
   48626:	ror    edx,0x6
   48629:	xor    r9d,edx
   4862c:	mov    edx,ecx
   4862e:	and    ebx,r10d
   48631:	rol    edx,0x7
   48634:	xor    edx,r9d
   48637:	mov    r9d,r10d
   4863a:	add    edx,r8d
   4863d:	mov    r8d,r10d
   48640:	ror    r9d,0x2
   48644:	ror    r8d,0xd
   48648:	add    r13d,edx
   4864b:	xor    r8d,r9d
   4864e:	mov    r9d,r10d
   48651:	rol    r9d,0xa
   48655:	xor    r8d,r9d
   48658:	mov    r9d,eax
   4865b:	or     r9d,r10d
   4865e:	and    r9d,r14d
   48661:	or     r9d,ebx
   48664:	mov    ebx,DWORD PTR [rsp+0x48]
   48668:	add    r9d,r8d
   4866b:	mov    r8d,ebx
   4866e:	add    r9d,edx
   48671:	mov    edx,ebx
   48673:	rol    r8d,0xd
   48677:	rol    edx,0xf
   4867a:	mov    ebp,r8d
   4867d:	mov    r8d,r15d
   48680:	xor    ebp,edx
   48682:	mov    edx,ebx
   48684:	rol    r8d,0xe
   48688:	shr    edx,0xa
   4868b:	xor    ebp,edx
   4868d:	mov    edx,r15d
   48690:	ror    edx,0x7
   48693:	xor    r8d,edx
   48696:	mov    edx,r15d
   48699:	shr    edx,0x3
   4869c:	xor    r8d,edx
   4869f:	mov    edx,esi
   486a1:	add    r8d,DWORD PTR [rsp+0x20]
   486a6:	add    r8d,DWORD PTR [rsp+0x1c]
   486ab:	xor    edx,ecx
   486ad:	add    ebp,r8d
   486b0:	mov    r8d,r13d
   486b3:	and    edx,r13d
   486b6:	lea    edi,[rdi+rbp*1+0x2748774c]
   486bd:	mov    DWORD PTR [rsp+0x98],ebp
   486c4:	xor    edx,esi
   486c6:	add    edi,edx
   486c8:	mov    edx,r13d
   486cb:	ror    r8d,0xb
   486cf:	and    r11d,r9d
   486d2:	ror    edx,0x6
   486d5:	xor    r8d,edx
   486d8:	mov    edx,r13d
   486db:	rol    edx,0x7
   486de:	xor    edx,r8d
   486e1:	mov    r8d,r9d
   486e4:	add    edx,edi
   486e6:	mov    edi,r9d
   486e9:	ror    r8d,0x2
   486ed:	ror    edi,0xd
   486f0:	add    r14d,edx
   486f3:	xor    edi,r8d
   486f6:	mov    r8d,r9d
   486f9:	rol    r8d,0xa
   486fd:	xor    edi,r8d
   48700:	mov    r8d,r10d
   48703:	or     r8d,r9d
   48706:	and    r8d,eax
   48709:	or     r8d,r11d
   4870c:	mov    r11d,DWORD PTR [rsp+0x58]
   48711:	add    r8d,edi
   48714:	mov    edi,r12d
   48717:	add    r8d,edx
   4871a:	rol    edi,0xd
   4871d:	mov    edx,r12d
   48720:	rol    edx,0xf
   48723:	mov    ebx,edi
   48725:	mov    edi,r11d
   48728:	xor    ebx,edx
   4872a:	mov    edx,r12d
   4872d:	ror    edi,0x7
   48730:	shr    edx,0xa
   48733:	xor    ebx,edx
   48735:	mov    edx,r11d
   48738:	rol    edx,0xe
   4873b:	xor    edx,edi
   4873d:	mov    edi,r11d
   48740:	shr    edi,0x3
   48743:	xor    edx,edi
   48745:	add    edx,r15d
   48748:	mov    r15d,ecx
   4874b:	add    edx,DWORD PTR [rsp+0x24]
   4874f:	add    ebx,edx
   48751:	xor    r15d,r13d
   48754:	mov    edx,r15d
   48757:	mov    r15d,r14d
   4875a:	lea    esi,[rsi+rbx*1+0x34b0bcb5]
   48761:	mov    DWORD PTR [rsp+0x9c],ebx
   48768:	and    edx,r14d
   4876b:	ror    r15d,0x6
   4876f:	xor    edx,ecx
   48771:	add    esi,edx
   48773:	mov    edx,r15d
   48776:	mov    r15d,r14d
   48779:	ror    r15d,0xb
   4877d:	mov    edi,r15d
   48780:	mov    r15d,r14d
   48783:	rol    r15d,0x7
   48787:	xor    edi,edx
   48789:	mov    edx,r15d
   4878c:	mov    r15d,r8d
   4878f:	xor    edx,edi
   48791:	rol    r15d,0xa
   48795:	add    edx,esi
   48797:	mov    esi,r8d
   4879a:	ror    esi,0x2
   4879d:	add    eax,edx
   4879f:	mov    edi,esi
   487a1:	mov    esi,r8d
   487a4:	ror    esi,0xd
   487a7:	xor    esi,edi
   487a9:	xor    esi,r15d
   487ac:	mov    r15d,r9d
   487af:	or     r15d,r8d
   487b2:	mov    edi,r15d
   487b5:	mov    r15d,r9d
   487b8:	and    r15d,r8d
   487bb:	and    edi,r10d
   487be:	or     edi,r15d
   487c1:	mov    r15d,DWORD PTR [rsp+0x5c]
   487c6:	add    edi,esi
   487c8:	mov    esi,ebp
   487ca:	rol    esi,0xf
   487cd:	add    edi,edx
   487cf:	mov    edx,esi
   487d1:	mov    esi,ebp
   487d3:	rol    esi,0xd
   487d6:	mov    r11d,esi
   487d9:	mov    esi,ebp
   487db:	xor    r11d,edx
   487de:	shr    esi,0xa
   487e1:	mov    edx,r15d
   487e4:	xor    r11d,esi
   487e7:	mov    esi,r15d
   487ea:	rol    edx,0xe
   487ed:	ror    esi,0x7
   487f0:	xor    edx,esi
   487f2:	mov    esi,r15d
   487f5:	mov    r15d,eax
   487f8:	shr    esi,0x3
   487fb:	xor    edx,esi
   487fd:	mov    esi,r13d
   48800:	add    edx,DWORD PTR [rsp+0x58]
   48804:	add    edx,DWORD PTR [rsp+0x28]
   48808:	xor    esi,r14d
   4880b:	add    r11d,edx
   4880e:	rol    r15d,0x7
   48812:	mov    edx,esi
   48814:	mov    esi,eax
   48816:	lea    ecx,[rcx+r11*1+0x391c0cb3]
   4881e:	mov    DWORD PTR [rsp+0xa0],r11d
   48826:	and    edx,eax
   48828:	ror    esi,0x6
   4882b:	xor    edx,r13d
   4882e:	add    ecx,edx
   48830:	mov    edx,esi
   48832:	mov    esi,eax
   48834:	ror    esi,0xb
   48837:	xor    esi,edx
   48839:	mov    edx,r15d
   4883c:	mov    r15d,r8d
   4883f:	xor    edx,esi
   48841:	mov    esi,edi
   48843:	and    r15d,edi
   48846:	add    edx,ecx
   48848:	mov    ecx,edi
   4884a:	ror    esi,0x2
   4884d:	ror    ecx,0xd
   48850:	add    r10d,edx
   48853:	xor    ecx,esi
   48855:	mov    esi,edi
   48857:	rol    esi,0xa
   4885a:	xor    ecx,esi
   4885c:	mov    esi,r8d
   4885f:	or     esi,edi
   48861:	and    esi,r9d
   48864:	or     esi,r15d
   48867:	mov    r15d,ebx
   4886a:	add    esi,ecx
   4886c:	mov    ecx,ebx
   4886e:	shr    r15d,0xa
   48872:	rol    ecx,0xf
   48875:	add    esi,edx
   48877:	mov    edx,ecx
   48879:	mov    ecx,ebx
   4887b:	rol    ecx,0xd
   4887e:	xor    ecx,edx
   48880:	mov    edx,DWORD PTR [rsp+0xc]
   48884:	xor    ecx,r15d
   48887:	mov    r15d,edx
   4888a:	rol    edx,0xe
   4888d:	ror    r15d,0x7
   48891:	xor    edx,r15d
   48894:	mov    r15d,DWORD PTR [rsp+0xc]
   48899:	shr    r15d,0x3
   4889d:	xor    edx,r15d
   488a0:	add    edx,DWORD PTR [rsp+0x5c]
   488a4:	add    edx,DWORD PTR [rsp+0x2c]
   488a8:	mov    r15d,esi
   488ab:	add    ecx,edx
   488ad:	mov    edx,r14d
   488b0:	ror    r15d,0xd
   488b4:	xor    edx,eax
   488b6:	mov    DWORD PTR [rsp+0x20],ecx
   488ba:	lea    r13d,[r13+rcx*1+0x4ed8aa4a]
   488c2:	and    edx,r10d
   488c5:	mov    DWORD PTR [rsp+0xa4],ecx
   488cc:	mov    ecx,r10d
   488cf:	xor    edx,r14d
   488d2:	ror    ecx,0x6
   488d5:	add    r13d,edx
   488d8:	mov    edx,ecx
   488da:	mov    ecx,r10d
   488dd:	ror    ecx,0xb
   488e0:	xor    ecx,edx
   488e2:	mov    edx,r10d
   488e5:	rol    edx,0x7
   488e8:	xor    edx,ecx
   488ea:	mov    ecx,esi
   488ec:	add    edx,r13d
   488ef:	ror    ecx,0x2
   488f2:	mov    r13d,r15d
   488f5:	mov    r15d,edi
   488f8:	xor    r13d,ecx
   488fb:	mov    ecx,esi
   488fd:	and    r15d,esi
   48900:	add    r9d,edx
   48903:	rol    ecx,0xa
   48906:	xor    r13d,ecx
   48909:	mov    ecx,edi
   4890b:	or     ecx,esi
   4890d:	and    ecx,r8d
   48910:	or     ecx,r15d
   48913:	mov    r15d,r11d
   48916:	add    ecx,r13d
   48919:	rol    r15d,0xd
   4891d:	add    ecx,edx
   4891f:	mov    edx,r11d
   48922:	mov    r13d,r15d
   48925:	rol    edx,0xf
   48928:	xor    r13d,edx
   4892b:	mov    edx,r11d
   4892e:	shr    edx,0xa
   48931:	xor    r13d,edx
   48934:	mov    edx,DWORD PTR [rsp+0x10]
   48938:	mov    r15d,edx
   4893b:	rol    edx,0xe
   4893e:	ror    r15d,0x7
   48942:	xor    edx,r15d
   48945:	mov    r15d,DWORD PTR [rsp+0x10]
   4894a:	shr    r15d,0x3
   4894e:	xor    edx,r15d
   48951:	add    edx,DWORD PTR [rsp+0xc]
   48955:	add    edx,DWORD PTR [rsp+0x4c]
   48959:	mov    r15d,esi
   4895c:	add    edx,r13d
   4895f:	mov    r13d,eax
   48962:	and    r15d,ecx
   48965:	xor    r13d,r10d
   48968:	mov    DWORD PTR [rsp+0xc],edx
   4896c:	lea    r14d,[r14+rdx*1+0x5b9cca4f]
   48974:	and    r13d,r9d
   48977:	mov    DWORD PTR [rsp+0xa8],edx
   4897e:	mov    edx,r9d
   48981:	xor    r13d,eax
   48984:	ror    edx,0x6
   48987:	add    r14d,r13d
   4898a:	mov    r13d,edx
   4898d:	mov    edx,r9d
   48990:	ror    edx,0xb
   48993:	xor    edx,r13d
   48996:	mov    r13d,r9d
   48999:	rol    r13d,0x7
   4899d:	xor    r13d,edx
   489a0:	mov    edx,ecx
   489a2:	add    r13d,r14d
   489a5:	mov    r14d,ecx
   489a8:	ror    edx,0x2
   489ab:	ror    r14d,0xd
   489af:	add    r8d,r13d
   489b2:	xor    r14d,edx
   489b5:	mov    edx,ecx
   489b7:	rol    edx,0xa
   489ba:	xor    r14d,edx
   489bd:	mov    edx,esi
   489bf:	or     edx,ecx
   489c1:	and    edx,edi
   489c3:	or     edx,r15d
   489c6:	mov    r15d,DWORD PTR [rsp+0x20]
   489cb:	add    edx,r14d
   489ce:	mov    r14d,r15d
   489d1:	add    edx,r13d
   489d4:	rol    r14d,0xf
   489d8:	mov    r13d,r14d
   489db:	mov    r14d,r15d
   489de:	rol    r14d,0xd
   489e2:	shr    r15d,0xa
   489e6:	xor    r14d,r13d
   489e9:	mov    r13d,DWORD PTR [rsp+0x14]
   489ee:	xor    r14d,r15d
   489f1:	mov    r15d,r13d
   489f4:	rol    r13d,0xe
   489f8:	ror    r15d,0x7
   489fc:	xor    r13d,r15d
   489ff:	mov    r15d,DWORD PTR [rsp+0x14]
   48a04:	shr    r15d,0x3
   48a08:	xor    r13d,r15d
   48a0b:	add    r13d,DWORD PTR [rsp+0x10]
   48a10:	add    r13d,DWORD PTR [rsp+0x48]
   48a15:	add    r13d,r14d
   48a18:	mov    r15d,r13d
   48a1b:	mov    DWORD PTR [rsp+0xac],r13d
   48a23:	mov    r13d,r10d
   48a26:	xor    r13d,r9d
   48a29:	lea    r14d,[rax+r15*1+0x682e6ff3]
   48a31:	mov    eax,r8d
   48a34:	mov    DWORD PTR [rsp+0x10],r15d
   48a39:	and    r13d,r8d
   48a3c:	ror    eax,0xb
   48a3f:	mov    r15d,edx
   48a42:	xor    r13d,r10d
   48a45:	ror    r15d,0xd
   48a49:	add    r14d,r13d
   48a4c:	mov    r13d,r8d
   48a4f:	ror    r13d,0x6
   48a53:	xor    eax,r13d
   48a56:	mov    r13d,r8d
   48a59:	rol    r13d,0x7
   48a5d:	xor    r13d,eax
   48a60:	mov    eax,edx
   48a62:	add    r13d,r14d
   48a65:	ror    eax,0x2
   48a68:	mov    r14d,r15d
   48a6b:	mov    r15d,ecx
   48a6e:	xor    r14d,eax
   48a71:	mov    eax,edx
   48a73:	and    r15d,edx
   48a76:	add    edi,r13d
   48a79:	rol    eax,0xa
   48a7c:	xor    r14d,eax
   48a7f:	mov    eax,ecx
   48a81:	or     eax,edx
   48a83:	and    eax,esi
   48a85:	or     eax,r15d
   48a88:	mov    r15d,DWORD PTR [rsp+0xc]
   48a8d:	add    eax,r14d
   48a90:	add    eax,r13d
   48a93:	mov    r14d,r15d
   48a96:	mov    r13d,r15d
   48a99:	rol    r13d,0xf
   48a9d:	rol    r14d,0xd
   48aa1:	xor    r14d,r13d
   48aa4:	mov    r13d,r15d
   48aa7:	shr    r13d,0xa
   48aab:	xor    r14d,r13d
   48aae:	mov    r13d,DWORD PTR [rsp+0x18]
   48ab3:	mov    r15d,r13d
   48ab6:	rol    r13d,0xe
   48aba:	ror    r15d,0x7
   48abe:	xor    r13d,r15d
   48ac1:	mov    r15d,DWORD PTR [rsp+0x18]
   48ac6:	shr    r15d,0x3
   48aca:	xor    r13d,r15d
   48acd:	add    r13d,DWORD PTR [rsp+0x14]
   48ad2:	add    r12d,r13d
   48ad5:	lea    r15d,[r14+r12*1]
   48ad9:	mov    r12d,r9d
   48adc:	mov    r14d,edx
   48adf:	xor    r12d,r8d
   48ae2:	lea    r13d,[r10+r15*1+0x748f82ee]
   48aea:	mov    r10d,edi
   48aed:	mov    DWORD PTR [rsp+0xb0],r15d
   48af5:	and    r12d,edi
   48af8:	ror    r10d,0xb
   48afc:	xor    r12d,r9d
   48aff:	add    r13d,r12d
   48b02:	mov    r12d,edi
   48b05:	ror    r12d,0x6
   48b09:	xor    r10d,r12d
   48b0c:	mov    r12d,edi
   48b0f:	rol    r12d,0x7
   48b13:	xor    r12d,r10d
   48b16:	mov    r10d,eax
   48b19:	add    r12d,r13d
   48b1c:	mov    r13d,eax
   48b1f:	ror    r10d,0x2
   48b23:	ror    r13d,0xd
   48b27:	add    esi,r12d
   48b2a:	xor    r13d,r10d
   48b2d:	mov    r10d,eax
   48b30:	rol    r10d,0xa
   48b34:	xor    r13d,r10d
   48b37:	mov    r10d,edx
   48b3a:	or     r10d,eax
   48b3d:	and    r10d,ecx
   48b40:	and    r14d,eax
   48b43:	or     r10d,r14d
   48b46:	mov    r14d,DWORD PTR [rsp+0x10]
   48b4b:	add    r10d,r13d
   48b4e:	add    r10d,r12d
   48b51:	mov    r13d,r14d
   48b54:	mov    r12d,r14d
   48b57:	rol    r12d,0xf
   48b5b:	rol    r13d,0xd
   48b5f:	xor    r13d,r12d
   48b62:	mov    r12d,r14d
   48b65:	shr    r12d,0xa
   48b69:	xor    r13d,r12d
   48b6c:	mov    r12d,DWORD PTR [rsp+0x30]
   48b71:	mov    r14d,r12d
   48b74:	rol    r12d,0xe
   48b78:	ror    r14d,0x7
   48b7c:	xor    r12d,r14d
   48b7f:	mov    r14d,DWORD PTR [rsp+0x30]
   48b84:	shr    r14d,0x3
   48b88:	xor    r12d,r14d
   48b8b:	add    r12d,DWORD PTR [rsp+0x18]
   48b90:	mov    r14d,eax
   48b93:	add    ebp,r12d
   48b96:	mov    r12d,r8d
   48b99:	add    ebp,r13d
   48b9c:	xor    r12d,edi
   48b9f:	and    r12d,esi
   48ba2:	lea    r13d,[r9+rbp*1+0x78a5636f]
   48baa:	mov    r9d,esi
   48bad:	mov    DWORD PTR [rsp+0xb4],ebp
   48bb4:	xor    r12d,r8d
   48bb7:	ror    r9d,0x6
   48bbb:	add    r13d,r12d
   48bbe:	mov    r12d,r9d
   48bc1:	mov    r9d,esi
   48bc4:	ror    r9d,0xb
   48bc8:	xor    r9d,r12d
   48bcb:	mov    r12d,esi
   48bce:	rol    r12d,0x7
   48bd2:	xor    r12d,r9d
   48bd5:	mov    r9d,r10d
   48bd8:	add    r12d,r13d
   48bdb:	mov    r13d,r10d
   48bde:	ror    r9d,0x2
   48be2:	ror    r13d,0xd
   48be6:	add    ecx,r12d
   48be9:	xor    r13d,r9d
   48bec:	mov    r9d,r10d
   48bef:	rol    r9d,0xa
   48bf3:	xor    r13d,r9d
   48bf6:	mov    r9d,eax
   48bf9:	and    r14d,r10d
   48bfc:	or     r9d,r10d
   48bff:	and    r9d,edx
   48c02:	or     r9d,r14d
   48c05:	add    r9d,r13d
   48c08:	mov    r13d,r15d
   48c0b:	add    r9d,r12d
   48c0e:	mov    r12d,r15d
   48c11:	rol    r13d,0xd
   48c15:	rol    r12d,0xf
   48c19:	xor    r13d,r12d
   48c1c:	mov    r12d,r15d
   48c1f:	shr    r12d,0xa
   48c23:	xor    r13d,r12d
   48c26:	mov    r12d,DWORD PTR [rsp+0x1c]
   48c2b:	mov    r14d,r12d
   48c2e:	rol    r12d,0xe
   48c32:	ror    r14d,0x7
   48c36:	xor    r12d,r14d
   48c39:	mov    r14d,DWORD PTR [rsp+0x1c]
   48c3e:	shr    r14d,0x3
   48c42:	xor    r12d,r14d
   48c45:	add    r12d,DWORD PTR [rsp+0x30]
   48c4a:	mov    r14d,r10d
   48c4d:	add    ebx,r12d
   48c50:	mov    r12d,edi
   48c53:	xor    r12d,esi
   48c56:	add    ebx,r13d
   48c59:	and    r12d,ecx
   48c5c:	lea    r8d,[r8+rbx*1-0x7b3787ec]
   48c64:	mov    DWORD PTR [rsp+0xb8],ebx
   48c6b:	xor    r12d,edi
   48c6e:	add    r8d,r12d
   48c71:	mov    r12d,ecx
   48c74:	ror    r12d,0x6
   48c78:	mov    r13d,r12d
   48c7b:	mov    r12d,ecx
   48c7e:	ror    r12d,0xb
   48c82:	xor    r12d,r13d
   48c85:	mov    r13d,ecx
   48c88:	rol    r13d,0x7
   48c8c:	xor    r12d,r13d
   48c8f:	add    r12d,r8d
   48c92:	mov    r8d,r9d
   48c95:	ror    r8d,0x2
   48c99:	add    edx,r12d
   48c9c:	mov    r13d,r8d
   48c9f:	mov    r8d,r9d
   48ca2:	ror    r8d,0xd
   48ca6:	and    r14d,r9d
   48ca9:	xor    r8d,r13d
   48cac:	mov    r13d,r9d
   48caf:	rol    r13d,0xa
   48cb3:	xor    r8d,r13d
   48cb6:	mov    r13d,r10d
   48cb9:	or     r13d,r9d
   48cbc:	and    r13d,eax
   48cbf:	or     r13d,r14d
   48cc2:	add    r13d,r8d
   48cc5:	mov    r8d,ebp
   48cc8:	rol    r8d,0xf
   48ccc:	add    r12d,r13d
   48ccf:	mov    r13d,r8d
   48cd2:	mov    r8d,ebp
   48cd5:	shr    ebp,0xa
   48cd8:	rol    r8d,0xd
   48cdc:	xor    r8d,r13d
   48cdf:	xor    ebp,r8d
   48ce2:	mov    r8d,DWORD PTR [rsp+0x24]
   48ce7:	mov    r14d,r8d
   48cea:	ror    r14d,0x7
   48cee:	mov    r13d,r14d
   48cf1:	mov    r14d,r8d
   48cf4:	rol    r8d,0xe
   48cf8:	xor    r8d,r13d
   48cfb:	shr    r14d,0x3
   48cff:	mov    r13d,edx
   48d02:	xor    r8d,r14d
   48d05:	add    r8d,DWORD PTR [rsp+0x1c]
   48d0a:	rol    r13d,0x7
   48d0e:	mov    r14d,DWORD PTR [rsp+0x28]
   48d13:	add    r11d,r8d
   48d16:	mov    r8d,esi
   48d19:	xor    r8d,ecx
   48d1c:	add    r11d,ebp
   48d1f:	and    r8d,edx
   48d22:	lea    edi,[rdi+r11*1-0x7338fdf8]
   48d2a:	mov    DWORD PTR [rsp+0xbc],r11d
   48d32:	xor    r8d,esi
   48d35:	add    edi,r8d
   48d38:	mov    r8d,edx
   48d3b:	ror    r8d,0x6
   48d3f:	mov    ebp,r8d
   48d42:	mov    r8d,edx
   48d45:	ror    r8d,0xb
   48d49:	xor    r8d,ebp
   48d4c:	xor    r8d,r13d
   48d4f:	mov    r13d,r12d
   48d52:	add    r8d,edi
   48d55:	mov    edi,r12d
   48d58:	rol    r13d,0xa
   48d5c:	ror    edi,0x2
   48d5f:	add    eax,r8d
   48d62:	mov    ebp,edi
   48d64:	mov    edi,r12d
   48d67:	ror    edi,0xd
   48d6a:	xor    edi,ebp
   48d6c:	xor    edi,r13d
   48d6f:	mov    r13d,r9d
   48d72:	or     r13d,r12d
   48d75:	mov    ebp,r13d
   48d78:	mov    r13d,r9d
   48d7b:	and    r13d,r12d
   48d7e:	and    ebp,r10d
   48d81:	or     ebp,r13d
   48d84:	mov    r13d,eax
   48d87:	add    ebp,edi
   48d89:	mov    edi,ebx
   48d8b:	rol    edi,0xf
   48d8e:	add    r8d,ebp
   48d91:	mov    ebp,edi
   48d93:	mov    edi,ebx
   48d95:	shr    ebx,0xa
   48d98:	rol    edi,0xd
   48d9b:	xor    edi,ebp
   48d9d:	mov    ebp,r14d
   48da0:	xor    ebx,edi
   48da2:	mov    edi,r14d
   48da5:	rol    ebp,0xe
   48da8:	ror    edi,0x7
   48dab:	xor    ebp,edi
   48dad:	mov    edi,r14d
   48db0:	mov    r14d,DWORD PTR [rsp+0x24]
   48db5:	shr    edi,0x3
   48db8:	xor    ebp,edi
   48dba:	lea    edi,[rbp+r14*1+0x0]
   48dbf:	add    edi,DWORD PTR [rsp+0x20]
   48dc3:	mov    r14d,DWORD PTR [rsp+0x2c]
   48dc8:	add    edi,ebx
   48dca:	mov    ebx,ecx
   48dcc:	xor    ebx,edx
   48dce:	lea    esi,[rsi+rdi*1-0x6f410006]
   48dd5:	mov    DWORD PTR [rsp+0xc0],edi
   48ddc:	and    ebx,eax
   48dde:	xor    ebx,ecx
   48de0:	add    esi,ebx
   48de2:	mov    ebx,eax
   48de4:	ror    ebx,0x6
   48de7:	mov    ebp,ebx
   48de9:	mov    ebx,eax
   48deb:	ror    ebx,0xb
   48dee:	xor    ebx,ebp
   48df0:	rol    r13d,0x7
   48df4:	xor    ebx,r13d
   48df7:	mov    r13d,r8d
   48dfa:	add    ebx,esi
   48dfc:	mov    esi,r8d
   48dff:	rol    r13d,0xa
   48e03:	ror    esi,0x2
   48e06:	add    r10d,ebx
   48e09:	mov    ebp,esi
   48e0b:	mov    esi,r8d
   48e0e:	ror    esi,0xd
   48e11:	xor    esi,ebp
   48e13:	xor    esi,r13d
   48e16:	mov    r13d,r12d
   48e19:	or     r13d,r8d
   48e1c:	mov    ebp,r13d
   48e1f:	mov    r13d,r12d
   48e22:	and    r13d,r8d
   48e25:	and    ebp,r9d
   48e28:	or     ebp,r13d
   48e2b:	mov    r13d,r10d
   48e2e:	add    ebp,esi
   48e30:	mov    esi,r11d
   48e33:	rol    esi,0xf
   48e36:	add    ebx,ebp
   48e38:	mov    ebp,esi
   48e3a:	mov    esi,r11d
   48e3d:	shr    r11d,0xa
   48e41:	rol    esi,0xd
   48e44:	xor    esi,ebp
   48e46:	mov    ebp,r14d
   48e49:	xor    r11d,esi
   48e4c:	mov    esi,r14d
   48e4f:	rol    ebp,0xe
   48e52:	ror    esi,0x7
   48e55:	xor    ebp,esi
   48e57:	mov    esi,r14d
   48e5a:	mov    r14d,DWORD PTR [rsp+0x28]
   48e5f:	shr    esi,0x3
   48e62:	xor    ebp,esi
   48e64:	lea    esi,[rbp+r14*1+0x0]
   48e69:	add    esi,DWORD PTR [rsp+0xc]
   48e6d:	add    esi,r11d
   48e70:	mov    r11d,edx
   48e73:	xor    r11d,eax
   48e76:	lea    ecx,[rcx+rsi*1-0x5baf9315]
   48e7d:	mov    DWORD PTR [rsp+0xc4],esi
   48e84:	and    r11d,r10d
   48e87:	xor    r11d,edx
   48e8a:	add    ecx,r11d
   48e8d:	mov    r11d,r10d
   48e90:	ror    r11d,0x6
   48e94:	mov    ebp,r11d
   48e97:	mov    r11d,r10d
   48e9a:	ror    r11d,0xb
   48e9e:	rol    r13d,0x7
   48ea2:	xor    r11d,ebp
   48ea5:	xor    r11d,r13d
   48ea8:	mov    r13d,ebx
   48eab:	add    r11d,ecx
   48eae:	mov    ecx,ebx
   48eb0:	rol    r13d,0xa
   48eb4:	ror    ecx,0x2
   48eb7:	add    r9d,r11d
   48eba:	mov    ebp,ecx
   48ebc:	mov    ecx,ebx
   48ebe:	ror    ecx,0xd
   48ec1:	xor    ecx,ebp
   48ec3:	xor    ecx,r13d
   48ec6:	mov    r13d,r8d
   48ec9:	or     r13d,ebx
   48ecc:	mov    ebp,r13d
   48ecf:	mov    r13d,r8d
   48ed2:	and    ebp,r12d
   48ed5:	and    r13d,ebx
   48ed8:	or     ebp,r13d
   48edb:	mov    r13d,DWORD PTR [rsp+0x4c]
   48ee0:	add    ebp,ecx
   48ee2:	mov    ecx,edi
   48ee4:	rol    ecx,0xf
   48ee7:	add    r11d,ebp
   48eea:	mov    r14d,r13d
   48eed:	mov    ebp,ecx
   48eef:	mov    ecx,edi
   48ef1:	shr    edi,0xa
   48ef4:	rol    ecx,0xd
   48ef7:	shr    r14d,0x3
   48efb:	xor    ecx,ebp
   48efd:	mov    ebp,r13d
   48f00:	xor    edi,ecx
   48f02:	mov    ecx,r13d
   48f05:	ror    ebp,0x7
   48f08:	rol    ecx,0xe
   48f0b:	xor    ecx,ebp
   48f0d:	xor    ecx,r14d
   48f10:	add    ecx,DWORD PTR [rsp+0x2c]
   48f14:	add    ecx,DWORD PTR [rsp+0x10]
   48f18:	mov    r14d,r9d
   48f1b:	add    edi,ecx
   48f1d:	mov    ecx,eax
   48f1f:	xor    ecx,r10d
   48f22:	lea    edx,[rdx+rdi*1-0x41065c09]
   48f29:	mov    DWORD PTR [rsp+0xc8],edi
   48f30:	and    ecx,r9d
   48f33:	xor    ecx,eax
   48f35:	rol    r14d,0x7
   48f39:	add    edx,ecx
   48f3b:	mov    ecx,r9d
   48f3e:	ror    ecx,0x6
   48f41:	mov    edi,ecx
   48f43:	mov    ecx,r9d
   48f46:	ror    ecx,0xb
   48f49:	xor    ecx,edi
   48f4b:	xor    ecx,r14d
   48f4e:	mov    r14d,r11d
   48f51:	add    ecx,edx
   48f53:	mov    edx,r11d
   48f56:	rol    r14d,0xa
   48f5a:	ror    edx,0x2
   48f5d:	add    r12d,ecx
   48f60:	mov    edi,edx
   48f62:	mov    edx,r11d
   48f65:	ror    edx,0xd
   48f68:	xor    edx,edi
   48f6a:	xor    edx,r14d
   48f6d:	mov    r14d,ebx
   48f70:	or     r14d,r11d
   48f73:	mov    edi,r14d
   48f76:	mov    r14d,ebx
   48f79:	and    r14d,r11d
   48f7c:	and    edi,r8d
   48f7f:	or     edi,r14d
   48f82:	mov    r14d,DWORD PTR [rsp+0x48]
   48f87:	add    edi,edx
   48f89:	mov    edx,esi
   48f8b:	rol    edx,0xf
   48f8e:	add    ecx,edi
   48f90:	mov    edi,edx
   48f92:	mov    edx,esi
   48f94:	shr    esi,0xa
   48f97:	rol    edx,0xd
   48f9a:	xor    edx,edi
   48f9c:	mov    edi,r14d
   48f9f:	xor    esi,edx
   48fa1:	mov    edx,r14d
   48fa4:	rol    edi,0xe
   48fa7:	ror    edx,0x7
   48faa:	xor    edi,edx
   48fac:	mov    edx,r14d
   48faf:	shr    edx,0x3
   48fb2:	xor    edi,edx
   48fb4:	mov    edx,r10d
   48fb7:	add    edi,r13d
   48fba:	add    edi,r15d
   48fbd:	mov    r15d,r12d
   48fc0:	add    esi,edi
   48fc2:	xor    edx,r9d
   48fc5:	ror    r15d,0xb
   48fc9:	add    DWORD PTR [rsp+0x38],r11d
   48fce:	and    edx,r12d
   48fd1:	lea    eax,[rax+rsi*1-0x398e870e]
   48fd8:	mov    edi,DWORD PTR [rsp+0x38]
   48fdc:	add    DWORD PTR [rsp+0x34],ecx
   48fe0:	mov    DWORD PTR [rsp+0xcc],esi
   48fe7:	xor    edx,r10d
   48fea:	mov    esi,r12d
   48fed:	mov    ebp,DWORD PTR [rsp+0x34]
   48ff1:	add    edx,eax
   48ff3:	ror    esi,0x6
   48ff6:	mov    eax,r15d
   48ff9:	mov    r15d,r11d
   48ffc:	xor    eax,esi
   48ffe:	mov    esi,r12d
   49001:	and    r15d,ecx
   49004:	add    DWORD PTR [rsp+0x64],ebx
   49008:	rol    esi,0x7
   4900b:	xor    eax,esi
   4900d:	mov    esi,ecx
   4900f:	add    eax,edx
   49011:	mov    edx,ecx
   49013:	ror    esi,0x2
   49016:	ror    edx,0xd
   49019:	add    r8d,eax
   4901c:	xor    edx,esi
   4901e:	mov    esi,ecx
   49020:	rol    esi,0xa
   49023:	xor    edx,esi
   49025:	mov    esi,r11d
   49028:	or     esi,ecx
   4902a:	and    esi,ebx
   4902c:	or     esi,r15d
   4902f:	add    esi,edx
   49031:	add    esi,DWORD PTR [rsp+0x60]
   49035:	add    esi,eax
   49037:	mov    DWORD PTR [rsp+0x60],esi
   4903b:	mov    edx,esi
   4903d:	mov    rsi,QWORD PTR [rsp+0x80]
   49045:	mov    DWORD PTR [rsi+0x8],edi
   49048:	mov    edi,DWORD PTR [rsp+0x64]
   4904c:	mov    DWORD PTR [rsi],edx
   4904e:	mov    DWORD PTR [rsi+0x4],ebp
   49051:	mov    DWORD PTR [rsi+0xc],edi
   49054:	add    DWORD PTR [rsp+0x44],r9d
   49059:	mov    eax,DWORD PTR [rsp+0x44]
   4905d:	add    DWORD PTR [rsp+0x3c],r8d
   49062:	mov    r13d,DWORD PTR [rsp+0x3c]
   49067:	add    DWORD PTR [rsp+0x40],r12d
   4906c:	mov    r11d,DWORD PTR [rsp+0x40]
   49071:	add    DWORD PTR [rsp+0x70],r10d
   49076:	mov    DWORD PTR [rsi+0x18],eax
   49079:	mov    eax,DWORD PTR [rsp+0x70]
   4907d:	mov    DWORD PTR [rsi+0x10],r13d
   49081:	mov    DWORD PTR [rsi+0x1c],eax
   49084:	mov    rax,QWORD PTR [rsp+0x68]
   49089:	mov    DWORD PTR [rsi+0x14],r11d
   4908d:	cmp    QWORD PTR [rsp+0x78],rax
   49092:	ja     46700 <sha256_process_block+0xc0>
   49098:	mov    rax,QWORD PTR [rsp+0xd8]
   490a0:	xor    rax,QWORD PTR fs:0x28
   490a9:	jne    490bd <sha256_process_block+0x2a7d>
   490ab:	add    rsp,0xe8
   490b2:	pop    rbx
   490b3:	pop    rbp
   490b4:	pop    r12
   490b6:	pop    r13
   490b8:	pop    r14
   490ba:	pop    r15
   490bc:	ret    
   490bd:	call   c7b0 <__stack_chk_fail@plt>
   490c2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   490cd:	nop    DWORD PTR [rax]

00000000000490d0 <sha256_conclude_ctx>:
   490d0:	push   r13
   490d2:	push   r12
   490d4:	mov    r12,rdi
   490d7:	mov    esi,DWORD PTR [r12+0x20]
   490dc:	mov    eax,DWORD PTR [r12+0x24]
   490e1:	push   rbp
   490e2:	mov    rcx,QWORD PTR [rdi+0x28]
   490e6:	cmp    rcx,0x38
   490ea:	sbb    rbp,rbp
   490ed:	and    rbp,0xffffffffffffffc0
   490f1:	sub    rbp,0xffffffffffffff80
   490f5:	cmp    rcx,0x38
   490f9:	sbb    rdx,rdx
   490fc:	and    rdx,0xffffffffffffffc0
   49100:	add    rdx,0x78
   49104:	cmp    rcx,0x38
   49108:	sbb    rdi,rdi
   4910b:	and    rdi,0xfffffffffffffff0
   4910f:	add    rdi,0x1f
   49113:	cmp    rcx,0x38
   49117:	sbb    r8,r8
   4911a:	add    esi,ecx
   4911c:	and    r8,0xfffffffffffffff0
   49120:	mov    r9d,esi
   49123:	mov    DWORD PTR [r12+0x20],esi
   49128:	add    r8,0x1e
   4912c:	cmp    r9,rcx
   4912f:	jae    49139 <sha256_conclude_ctx+0x69>
   49131:	add    eax,0x1
   49134:	mov    DWORD PTR [r12+0x24],eax
   49139:	mov    r9d,esi
   4913c:	shl    eax,0x3
   4913f:	lea    r13,[r12+0x30]
   49144:	sub    rdx,rcx
   49147:	shr    r9d,0x1d
   4914b:	shl    esi,0x3
   4914e:	or     eax,r9d
   49151:	bswap  esi
   49153:	bswap  eax
   49155:	mov    DWORD PTR [r12+r8*4+0x30],eax
   4915a:	mov    DWORD PTR [r12+rdi*4+0x30],esi
   4915f:	lea    rdi,[r13+rcx*1+0x0]
   49164:	lea    rsi,[rip+0x26415]        # 6f580 <fillbuf>
   4916b:	call   cb30 <memcpy@plt>
   49170:	mov    rdx,r12
   49173:	mov    rsi,rbp
   49176:	mov    rdi,r13
   49179:	pop    rbp
   4917a:	pop    r12
   4917c:	pop    r13
   4917e:	jmp    46640 <sha256_process_block>
   49183:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4918e:	xchg   ax,ax

0000000000049190 <sha256_finish_ctx>:
   49190:	endbr64 
   49194:	push   r12
   49196:	mov    r12,rsi
   49199:	push   rbp
   4919a:	mov    rbp,rdi
   4919d:	sub    rsp,0x8
   491a1:	call   490d0 <sha256_conclude_ctx>
   491a6:	add    rsp,0x8
   491aa:	mov    rsi,r12
   491ad:	mov    rdi,rbp
   491b0:	pop    rbp
   491b1:	pop    r12
   491b3:	jmp    465e0 <sha256_read_ctx>
   491b8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000491c0 <sha224_finish_ctx>:
   491c0:	endbr64 
   491c4:	push   r12
   491c6:	mov    r12,rsi
   491c9:	push   rbp
   491ca:	mov    rbp,rdi
   491cd:	sub    rsp,0x8
   491d1:	call   490d0 <sha256_conclude_ctx>
   491d6:	add    rsp,0x8
   491da:	mov    rsi,r12
   491dd:	mov    rdi,rbp
   491e0:	pop    rbp
   491e1:	pop    r12
   491e3:	jmp    46610 <sha224_read_ctx>
   491e8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000491f0 <sha256_process_bytes>:
   491f0:	endbr64 
   491f4:	push   r15
   491f6:	push   r14
   491f8:	push   r13
   491fa:	mov    r13,rsi
   491fd:	push   r12
   491ff:	mov    r12,rdx
   49202:	push   rbp
   49203:	push   rbx
   49204:	mov    rbx,rdi
   49207:	sub    rsp,0x8
   4920b:	mov    rbp,QWORD PTR [rdx+0x28]
   4920f:	test   rbp,rbp
   49212:	jne    49348 <sha256_process_bytes+0x158>
   49218:	cmp    r13,0x3f
   4921c:	jbe    4932c <sha256_process_bytes+0x13c>
   49222:	test   bl,0x3
   49225:	je     49310 <sha256_process_bytes+0x120>
   4922b:	lea    rbp,[r12+0x30]
   49230:	cmp    r13,0x40
   49234:	je     494a8 <sha256_process_bytes+0x2b8>
   4923a:	lea    r15,[r13-0x41]
   4923e:	shr    r15,0x6
   49242:	lea    r14,[r15+0x1]
   49246:	shl    r14,0x6
   4924a:	add    r14,rbx
   4924d:	nop    DWORD PTR [rax]
   49250:	movdqu xmm0,XMMWORD PTR [rbx]
   49254:	mov    rdx,r12
   49257:	mov    esi,0x40
   4925c:	mov    rdi,rbp
   4925f:	add    rbx,0x40
   49263:	movups XMMWORD PTR [rbp+0x0],xmm0
   49267:	movdqu xmm1,XMMWORD PTR [rbx-0x30]
   4926c:	movups XMMWORD PTR [rbp+0x10],xmm1
   49270:	movdqu xmm2,XMMWORD PTR [rbx-0x20]
   49275:	movups XMMWORD PTR [rbp+0x20],xmm2
   49279:	movdqu xmm3,XMMWORD PTR [rbx-0x10]
   4927e:	movups XMMWORD PTR [rbp+0x30],xmm3
   49282:	call   46640 <sha256_process_block>
   49287:	cmp    rbx,r14
   4928a:	jne    49250 <sha256_process_bytes+0x60>
   4928c:	neg    r15
   4928f:	shl    r15,0x6
   49293:	lea    r13,[r13+r15*1-0x40]
   49298:	mov    rsi,QWORD PTR [r12+0x28]
   4929d:	mov    eax,r13d
   492a0:	lea    rcx,[rbp+rsi*1+0x0]
   492a5:	cmp    r13d,0x8
   492a9:	jae    49390 <sha256_process_bytes+0x1a0>
   492af:	test   r13b,0x4
   492b3:	jne    494b0 <sha256_process_bytes+0x2c0>
   492b9:	test   r13d,r13d
   492bc:	je     492cc <sha256_process_bytes+0xdc>
   492be:	movzx  edx,BYTE PTR [r14]
   492c2:	mov    BYTE PTR [rcx],dl
   492c4:	test   al,0x2
   492c6:	jne    494c6 <sha256_process_bytes+0x2d6>
   492cc:	add    r13,rsi
   492cf:	cmp    r13,0x3f
   492d3:	jbe    492f9 <sha256_process_bytes+0x109>
   492d5:	mov    rdx,r12
   492d8:	mov    esi,0x40
   492dd:	mov    rdi,rbp
   492e0:	sub    r13,0x40
   492e4:	call   46640 <sha256_process_block>
   492e9:	lea    rsi,[r12+0x70]
   492ee:	mov    rdx,r13
   492f1:	mov    rdi,rbp
   492f4:	call   cb30 <memcpy@plt>
   492f9:	mov    QWORD PTR [r12+0x28],r13
   492fe:	add    rsp,0x8
   49302:	pop    rbx
   49303:	pop    rbp
   49304:	pop    r12
   49306:	pop    r13
   49308:	pop    r14
   4930a:	pop    r15
   4930c:	ret    
   4930d:	nop    DWORD PTR [rax]
   49310:	mov    rbp,r13
   49313:	mov    rdi,rbx
   49316:	mov    rdx,r12
   49319:	and    r13d,0x3f
   4931d:	and    rbp,0xffffffffffffffc0
   49321:	mov    rsi,rbp
   49324:	add    rbx,rbp
   49327:	call   46640 <sha256_process_block>
   4932c:	test   r13,r13
   4932f:	jne    494d9 <sha256_process_bytes+0x2e9>
   49335:	add    rsp,0x8
   49339:	pop    rbx
   4933a:	pop    rbp
   4933b:	pop    r12
   4933d:	pop    r13
   4933f:	pop    r14
   49341:	pop    r15
   49343:	ret    
   49344:	nop    DWORD PTR [rax+0x0]
   49348:	mov    r14d,0x80
   4934e:	lea    r15,[rdx+0x30]
   49352:	sub    r14,rbp
   49355:	lea    rdi,[r15+rbp*1]
   49359:	cmp    r14,rsi
   4935c:	cmova  r14,rsi
   49360:	mov    rsi,rbx
   49363:	mov    rdx,r14
   49366:	call   cb30 <memcpy@plt>
   4936b:	mov    rsi,QWORD PTR [r12+0x28]
   49370:	add    rsi,r14
   49373:	mov    QWORD PTR [r12+0x28],rsi
   49378:	cmp    rsi,0x40
   4937c:	ja     493e0 <sha256_process_bytes+0x1f0>
   4937e:	add    rbx,r14
   49381:	sub    r13,r14
   49384:	jmp    49218 <sha256_process_bytes+0x28>
   49389:	nop    DWORD PTR [rax+0x0]
   49390:	mov    rax,QWORD PTR [r14]
   49393:	lea    rdi,[rcx+0x8]
   49397:	and    rdi,0xfffffffffffffff8
   4939b:	mov    QWORD PTR [rcx],rax
   4939e:	mov    eax,r13d
   493a1:	mov    rdx,QWORD PTR [r14+rax*1-0x8]
   493a6:	mov    QWORD PTR [rcx+rax*1-0x8],rdx
   493ab:	sub    rcx,rdi
   493ae:	lea    eax,[r13+rcx*1+0x0]
   493b3:	sub    r14,rcx
   493b6:	and    eax,0xfffffff8
   493b9:	cmp    eax,0x8
   493bc:	jb     492cc <sha256_process_bytes+0xdc>
   493c2:	and    eax,0xfffffff8
   493c5:	xor    edx,edx
   493c7:	mov    ecx,edx
   493c9:	add    edx,0x8
   493cc:	mov    r8,QWORD PTR [r14+rcx*1]
   493d0:	mov    QWORD PTR [rdi+rcx*1],r8
   493d4:	cmp    edx,eax
   493d6:	jb     493c7 <sha256_process_bytes+0x1d7>
   493d8:	jmp    492cc <sha256_process_bytes+0xdc>
   493dd:	nop    DWORD PTR [rax]
   493e0:	mov    rdx,r12
   493e3:	and    rsi,0xffffffffffffffc0
   493e7:	mov    rdi,r15
   493ea:	add    rbp,r14
   493ed:	call   46640 <sha256_process_block>
   493f2:	mov    rdx,QWORD PTR [r12+0x28]
   493f7:	and    rbp,0xffffffffffffffc0
   493fb:	lea    rax,[r15+rbp*1]
   493ff:	and    edx,0x3f
   49402:	mov    QWORD PTR [r12+0x28],rdx
   49407:	cmp    edx,0x8
   4940a:	jae    49440 <sha256_process_bytes+0x250>
   4940c:	test   dl,0x4
   4940f:	jne    4948f <sha256_process_bytes+0x29f>
   49411:	test   edx,edx
   49413:	je     4937e <sha256_process_bytes+0x18e>
   49419:	movzx  ecx,BYTE PTR [rax]
   4941c:	mov    BYTE PTR [r12+0x30],cl
   49421:	test   dl,0x2
   49424:	je     4937e <sha256_process_bytes+0x18e>
   4942a:	movzx  eax,WORD PTR [rdx+rax*1-0x2]
   4942f:	mov    WORD PTR [r15+rdx*1-0x2],ax
   49435:	jmp    4937e <sha256_process_bytes+0x18e>
   4943a:	nop    WORD PTR [rax+rax*1+0x0]
   49440:	mov    rcx,QWORD PTR [rax]
   49443:	lea    rsi,[r12+0x38]
   49448:	and    rsi,0xfffffffffffffff8
   4944c:	mov    QWORD PTR [r12+0x30],rcx
   49451:	mov    rcx,QWORD PTR [rdx+rax*1-0x8]
   49456:	mov    QWORD PTR [r15+rdx*1-0x8],rcx
   4945b:	sub    r15,rsi
   4945e:	sub    rax,r15
   49461:	add    r15d,edx
   49464:	and    r15d,0xfffffff8
   49468:	cmp    r15d,0x8
   4946c:	jb     4937e <sha256_process_bytes+0x18e>
   49472:	and    r15d,0xfffffff8
   49476:	xor    edx,edx
   49478:	mov    ecx,edx
   4947a:	add    edx,0x8
   4947d:	mov    rdi,QWORD PTR [rax+rcx*1]
   49481:	mov    QWORD PTR [rsi+rcx*1],rdi
   49485:	cmp    edx,r15d
   49488:	jb     49478 <sha256_process_bytes+0x288>
   4948a:	jmp    4937e <sha256_process_bytes+0x18e>
   4948f:	mov    ecx,DWORD PTR [rax]
   49491:	mov    DWORD PTR [r12+0x30],ecx
   49496:	mov    eax,DWORD PTR [rdx+rax*1-0x4]
   4949a:	mov    DWORD PTR [r15+rdx*1-0x4],eax
   4949f:	jmp    4937e <sha256_process_bytes+0x18e>
   494a4:	nop    DWORD PTR [rax+0x0]
   494a8:	mov    r14,rbx
   494ab:	jmp    49298 <sha256_process_bytes+0xa8>
   494b0:	mov    edx,DWORD PTR [r14]
   494b3:	mov    DWORD PTR [rcx],edx
   494b5:	mov    edx,r13d
   494b8:	mov    eax,DWORD PTR [r14+rdx*1-0x4]
   494bd:	mov    DWORD PTR [rcx+rdx*1-0x4],eax
   494c1:	jmp    492cc <sha256_process_bytes+0xdc>
   494c6:	mov    edx,r13d
   494c9:	movzx  eax,WORD PTR [r14+rdx*1-0x2]
   494cf:	mov    WORD PTR [rcx+rdx*1-0x2],ax
   494d4:	jmp    492cc <sha256_process_bytes+0xdc>
   494d9:	lea    rbp,[r12+0x30]
   494de:	mov    r14,rbx
   494e1:	jmp    49298 <sha256_process_bytes+0xa8>
   494e6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000494f0 <sha256_buffer>:
   494f0:	endbr64 
   494f4:	push   r12
   494f6:	mov    r12,rdx
   494f9:	push   rbp
   494fa:	sub    rsp,0xc8
   49501:	mov    rax,QWORD PTR fs:0x28
   4950a:	mov    QWORD PTR [rsp+0xb8],rax
   49512:	xor    eax,eax
   49514:	mov    rbp,rsp
   49517:	movabs rax,0xbb67ae856a09e667
   49521:	mov    QWORD PTR [rsp+0x20],0x0
   4952a:	mov    QWORD PTR [rsp],rax
   4952e:	mov    rdx,rbp
   49531:	movabs rax,0xa54ff53a3c6ef372
   4953b:	mov    QWORD PTR [rsp+0x8],rax
   49540:	movabs rax,0x9b05688c510e527f
   4954a:	mov    QWORD PTR [rsp+0x10],rax
   4954f:	movabs rax,0x5be0cd191f83d9ab
   49559:	mov    QWORD PTR [rsp+0x18],rax
   4955e:	mov    QWORD PTR [rsp+0x28],0x0
   49567:	call   491f0 <sha256_process_bytes>
   4956c:	mov    rdi,rbp
   4956f:	call   490d0 <sha256_conclude_ctx>
   49574:	mov    rsi,r12
   49577:	mov    rdi,rbp
   4957a:	call   465e0 <sha256_read_ctx>
   4957f:	mov    rcx,QWORD PTR [rsp+0xb8]
   49587:	xor    rcx,QWORD PTR fs:0x28
   49590:	jne    4959d <sha256_buffer+0xad>
   49592:	add    rsp,0xc8
   49599:	pop    rbp
   4959a:	pop    r12
   4959c:	ret    
   4959d:	call   c7b0 <__stack_chk_fail@plt>
   495a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   495ad:	nop    DWORD PTR [rax]

00000000000495b0 <sha224_buffer>:
   495b0:	endbr64 
   495b4:	push   r12
   495b6:	mov    r12,rdx
   495b9:	push   rbp
   495ba:	sub    rsp,0xc8
   495c1:	mov    rax,QWORD PTR fs:0x28
   495ca:	mov    QWORD PTR [rsp+0xb8],rax
   495d2:	xor    eax,eax
   495d4:	mov    rbp,rsp
   495d7:	movabs rax,0x367cd507c1059ed8
   495e1:	mov    QWORD PTR [rsp+0x20],0x0
   495ea:	mov    QWORD PTR [rsp],rax
   495ee:	mov    rdx,rbp
   495f1:	movabs rax,0xf70e59393070dd17
   495fb:	mov    QWORD PTR [rsp+0x8],rax
   49600:	movabs rax,0x68581511ffc00b31
   4960a:	mov    QWORD PTR [rsp+0x10],rax
   4960f:	movabs rax,0xbefa4fa464f98fa7
   49619:	mov    QWORD PTR [rsp+0x18],rax
   4961e:	mov    QWORD PTR [rsp+0x28],0x0
   49627:	call   491f0 <sha256_process_bytes>
   4962c:	mov    rdi,rbp
   4962f:	call   490d0 <sha256_conclude_ctx>
   49634:	mov    rsi,r12
   49637:	mov    rdi,rbp
   4963a:	call   46610 <sha224_read_ctx>
   4963f:	mov    rcx,QWORD PTR [rsp+0xb8]
   49647:	xor    rcx,QWORD PTR fs:0x28
   49650:	jne    4965d <sha224_buffer+0xad>
   49652:	add    rsp,0xc8
   49659:	pop    rbp
   4965a:	pop    r12
   4965c:	ret    
   4965d:	call   c7b0 <__stack_chk_fail@plt>
   49662:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4966d:	nop    DWORD PTR [rax]

0000000000049670 <shaxxx_stream.isra.0>:
   49670:	push   r15
   49672:	push   r14
   49674:	mov    r14,rsi
   49677:	push   r13
   49679:	mov    r13,rdi
   4967c:	mov    edi,0x8048
   49681:	push   r12
   49683:	push   rbp
   49684:	push   rbx
   49685:	mov    rbx,rdx
   49688:	sub    rsp,0xd8
   4968f:	mov    QWORD PTR [rsp+0x8],rcx
   49694:	mov    rax,QWORD PTR fs:0x28
   4969d:	mov    QWORD PTR [rsp+0xc8],rax
   496a5:	xor    eax,eax
   496a7:	call   c0e0 <malloc@plt>
   496ac:	test   rax,rax
   496af:	je     49785 <shaxxx_stream.isra.0+0x115>
   496b5:	lea    r15,[rsp+0x10]
   496ba:	mov    r12,rax
   496bd:	mov    rdi,r15
   496c0:	call   rbx
   496c2:	mov    ebx,0x8000
   496c7:	xor    ebp,ebp
   496c9:	jmp    496f8 <shaxxx_stream.isra.0+0x88>
   496cb:	nop    DWORD PTR [rax+rax*1+0x0]
   496d0:	mov    rdx,rbx
   496d3:	lea    rdi,[r12+rbp*1]
   496d7:	mov    rcx,r13
   496da:	mov    esi,0x1
   496df:	sub    rdx,rbp
   496e2:	call   c2f0 <fread_unlocked@plt>
   496e7:	add    rbp,rax
   496ea:	cmp    rbp,0x8000
   496f1:	je     49740 <shaxxx_stream.isra.0+0xd0>
   496f3:	test   rax,rax
   496f6:	je     49755 <shaxxx_stream.isra.0+0xe5>
   496f8:	test   BYTE PTR [r13+0x0],0x10
   496fd:	je     496d0 <shaxxx_stream.isra.0+0x60>
   496ff:	test   rbp,rbp
   49702:	jne    49770 <shaxxx_stream.isra.0+0x100>
   49704:	mov    rsi,r14
   49707:	mov    rdi,r15
   4970a:	mov    rax,QWORD PTR [rsp+0x8]
   4970f:	call   rax
   49711:	mov    rdi,r12
   49714:	call   4bdc0 <rpl_free>
   49719:	xor    eax,eax
   4971b:	mov    rcx,QWORD PTR [rsp+0xc8]
   49723:	xor    rcx,QWORD PTR fs:0x28
   4972c:	jne    49780 <shaxxx_stream.isra.0+0x110>
   4972e:	add    rsp,0xd8
   49735:	pop    rbx
   49736:	pop    rbp
   49737:	pop    r12
   49739:	pop    r13
   4973b:	pop    r14
   4973d:	pop    r15
   4973f:	ret    
   49740:	mov    rdx,r15
   49743:	mov    esi,0x8000
   49748:	mov    rdi,r12
   4974b:	call   46640 <sha256_process_block>
   49750:	jmp    496c7 <shaxxx_stream.isra.0+0x57>
   49755:	test   BYTE PTR [r13+0x0],0x20
   4975a:	je     496ff <shaxxx_stream.isra.0+0x8f>
   4975c:	mov    rdi,r12
   4975f:	call   4bdc0 <rpl_free>
   49764:	mov    eax,0x1
   49769:	jmp    4971b <shaxxx_stream.isra.0+0xab>
   4976b:	nop    DWORD PTR [rax+rax*1+0x0]
   49770:	mov    rdx,r15
   49773:	mov    rsi,rbp
   49776:	mov    rdi,r12
   49779:	call   491f0 <sha256_process_bytes>
   4977e:	jmp    49704 <shaxxx_stream.isra.0+0x94>
   49780:	call   c7b0 <__stack_chk_fail@plt>
   49785:	mov    eax,0x1
   4978a:	jmp    4971b <shaxxx_stream.isra.0+0xab>
   4978c:	nop    DWORD PTR [rax+0x0]

0000000000049790 <sha256_stream>:
   49790:	endbr64 
   49794:	lea    rcx,[rip+0xfffffffffffff9f5]        # 49190 <sha256_finish_ctx>
   4979b:	lea    rdx,[rip+0xffffffffffffcd9e]        # 46540 <sha256_init_ctx>
   497a2:	jmp    49670 <shaxxx_stream.isra.0>
   497a7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000497b0 <sha224_stream>:
   497b0:	endbr64 
   497b4:	lea    rcx,[rip+0xfffffffffffffa05]        # 491c0 <sha224_finish_ctx>
   497bb:	lea    rdx,[rip+0xffffffffffffcdce]        # 46590 <sha224_init_ctx>
   497c2:	jmp    49670 <shaxxx_stream.isra.0>
   497c7:	nop    WORD PTR [rax+rax*1+0x0]

00000000000497d0 <base_name>:
   497d0:	endbr64 
   497d4:	push   r12
   497d6:	mov    r12,rdi
   497d9:	push   rbp
   497da:	sub    rsp,0x8
   497de:	call   5a3f0 <last_component>
   497e3:	cmp    BYTE PTR [rax],0x0
   497e6:	je     49818 <base_name+0x48>
   497e8:	mov    rdi,rax
   497eb:	mov    rbp,rax
   497ee:	call   5a450 <base_len>
   497f3:	mov    rdi,rbp
   497f6:	mov    rsi,rax
   497f9:	xor    eax,eax
   497fb:	cmp    BYTE PTR [rbp+rsi*1+0x0],0x2f
   49800:	sete   al
   49803:	add    rsp,0x8
   49807:	pop    rbp
   49808:	add    rsi,rax
   4980b:	pop    r12
   4980d:	jmp    4bb00 <xstrndup>
   49812:	nop    WORD PTR [rax+rax*1+0x0]
   49818:	mov    rdi,r12
   4981b:	call   5a450 <base_len>
   49820:	add    rsp,0x8
   49824:	mov    rdi,r12
   49827:	pop    rbp
   49828:	mov    rsi,rax
   4982b:	pop    r12
   4982d:	jmp    4bb00 <xstrndup>
   49832:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4983c:	nop    DWORD PTR [rax+0x0]

0000000000049840 <mb_width_aux>:
   49840:	endbr64 
   49844:	push   rbp
   49845:	mov    ebp,edi
   49847:	call   c7f0 <wcwidth@plt>
   4984c:	test   eax,eax
   4984e:	js     49858 <mb_width_aux+0x18>
   49850:	pop    rbp
   49851:	ret    
   49852:	nop    WORD PTR [rax+rax*1+0x0]
   49858:	mov    edi,ebp
   4985a:	call   c600 <iswcntrl@plt>
   4985f:	pop    rbp
   49860:	test   eax,eax
   49862:	sete   al
   49865:	movzx  eax,al
   49868:	ret    
   49869:	nop    DWORD PTR [rax+0x0]

0000000000049870 <mb_copy>:
   49870:	endbr64 
   49874:	push   rbp
   49875:	mov    rbp,rdi
   49878:	push   rbx
   49879:	mov    rbx,rsi
   4987c:	lea    rax,[rbx+0x18]
   49880:	sub    rsp,0x8
   49884:	mov    rsi,QWORD PTR [rsi]
   49887:	mov    rdx,QWORD PTR [rbx+0x8]
   4988b:	cmp    rsi,rax
   4988e:	je     498b0 <mb_copy+0x40>
   49890:	mov    QWORD PTR [rdi],rsi
   49893:	movzx  eax,BYTE PTR [rbx+0x10]
   49897:	mov    QWORD PTR [rbp+0x8],rdx
   4989b:	mov    BYTE PTR [rbp+0x10],al
   4989e:	test   al,al
   498a0:	je     498a8 <mb_copy+0x38>
   498a2:	mov    eax,DWORD PTR [rbx+0x14]
   498a5:	mov    DWORD PTR [rbp+0x14],eax
   498a8:	add    rsp,0x8
   498ac:	pop    rbx
   498ad:	pop    rbp
   498ae:	ret    
   498af:	nop
   498b0:	lea    rcx,[rdi+0x18]
   498b4:	mov    rdi,rcx
   498b7:	call   cb30 <memcpy@plt>
   498bc:	mov    rdx,QWORD PTR [rbx+0x8]
   498c0:	mov    QWORD PTR [rbp+0x0],rax
   498c4:	jmp    49893 <mb_copy+0x23>
   498c6:	nop    WORD PTR cs:[rax+rax*1+0x0]

00000000000498d0 <is_basic>:
   498d0:	endbr64 
   498d4:	mov    eax,edi
   498d6:	lea    rdx,[rip+0x25ce3]        # 6f5c0 <is_basic_table>
   498dd:	mov    ecx,edi
   498df:	shr    al,0x5
   498e2:	and    eax,0x7
   498e5:	mov    eax,DWORD PTR [rdx+rax*4]
   498e8:	shr    eax,cl
   498ea:	and    eax,0x1
   498ed:	ret    
   498ee:	xchg   ax,ax

00000000000498f0 <gettext_quote.part.0>:
   498f0:	push   rbp
   498f1:	mov    rbp,rdi
   498f4:	push   rbx
   498f5:	mov    ebx,esi
   498f7:	sub    rsp,0x8
   498fb:	call   5a500 <locale_charset>
   49900:	movzx  edx,BYTE PTR [rax]
   49903:	and    edx,0xffffffdf
   49906:	cmp    dl,0x55
   49909:	jne    49958 <gettext_quote.part.0+0x68>
   4990b:	movzx  edx,BYTE PTR [rax+0x1]
   4990f:	and    edx,0xffffffdf
   49912:	cmp    dl,0x54
   49915:	jne    49975 <gettext_quote.part.0+0x85>
   49917:	movzx  edx,BYTE PTR [rax+0x2]
   4991b:	and    edx,0xffffffdf
   4991e:	cmp    dl,0x46
   49921:	jne    49975 <gettext_quote.part.0+0x85>
   49923:	cmp    BYTE PTR [rax+0x3],0x2d
   49927:	jne    49975 <gettext_quote.part.0+0x85>
   49929:	cmp    BYTE PTR [rax+0x4],0x38
   4992d:	jne    49975 <gettext_quote.part.0+0x85>
   4992f:	cmp    BYTE PTR [rax+0x5],0x0
   49933:	jne    49975 <gettext_quote.part.0+0x85>
   49935:	cmp    BYTE PTR [rbp+0x0],0x60
   49939:	lea    rax,[rip+0x25cab]        # 6f5eb <is_basic_table+0x2b>
   49940:	lea    rdx,[rip+0x25c99]        # 6f5e0 <is_basic_table+0x20>
   49947:	cmovne rax,rdx
   4994b:	add    rsp,0x8
   4994f:	pop    rbx
   49950:	pop    rbp
   49951:	ret    
   49952:	nop    WORD PTR [rax+rax*1+0x0]
   49958:	cmp    dl,0x47
   4995b:	jne    49975 <gettext_quote.part.0+0x85>
   4995d:	movzx  edx,BYTE PTR [rax+0x1]
   49961:	and    edx,0xffffffdf
   49964:	cmp    dl,0x42
   49967:	jne    49975 <gettext_quote.part.0+0x85>
   49969:	cmp    BYTE PTR [rax+0x2],0x31
   4996d:	jne    49975 <gettext_quote.part.0+0x85>
   4996f:	cmp    BYTE PTR [rax+0x3],0x38
   49973:	je     49998 <gettext_quote.part.0+0xa8>
   49975:	cmp    ebx,0x9
   49978:	lea    rax,[rip+0x1dc67]        # 675e6 <primes.6089+0x1506>
   4997f:	lea    rdx,[rip+0x25c69]        # 6f5ef <is_basic_table+0x2f>
   49986:	cmovne rax,rdx
   4998a:	add    rsp,0x8
   4998e:	pop    rbx
   4998f:	pop    rbp
   49990:	ret    
   49991:	nop    DWORD PTR [rax+0x0]
   49998:	cmp    BYTE PTR [rax+0x4],0x30
   4999c:	jne    49975 <gettext_quote.part.0+0x85>
   4999e:	cmp    BYTE PTR [rax+0x5],0x33
   499a2:	jne    49975 <gettext_quote.part.0+0x85>
   499a4:	cmp    BYTE PTR [rax+0x6],0x30
   499a8:	jne    49975 <gettext_quote.part.0+0x85>
   499aa:	cmp    BYTE PTR [rax+0x7],0x0
   499ae:	jne    49975 <gettext_quote.part.0+0x85>
   499b0:	cmp    BYTE PTR [rbp+0x0],0x60
   499b4:	lea    rax,[rip+0x25c29]        # 6f5e4 <is_basic_table+0x24>
   499bb:	lea    rdx,[rip+0x25c26]        # 6f5e8 <is_basic_table+0x28>
   499c2:	cmovne rax,rdx
   499c6:	add    rsp,0x8
   499ca:	pop    rbx
   499cb:	pop    rbp
   499cc:	ret    
   499cd:	nop    DWORD PTR [rax]

00000000000499d0 <quotearg_buffer_restyled>:
   499d0:	push   r15
   499d2:	mov    r15,rdi
   499d5:	push   r14
   499d7:	mov    r14,rsi
   499da:	push   r13
   499dc:	push   r12
   499de:	push   rbp
   499df:	push   rbx
   499e0:	mov    ebx,r9d
   499e3:	sub    rsp,0xb8
   499ea:	mov    rax,QWORD PTR [rsp+0xf0]
   499f2:	mov    QWORD PTR [rsp+0x18],rdx
   499f7:	mov    QWORD PTR [rsp+0x10],rcx
   499fc:	mov    QWORD PTR [rsp+0x28],rax
   49a01:	mov    rax,QWORD PTR [rsp+0xf8]
   49a09:	mov    DWORD PTR [rsp+0x8],r8d
   49a0e:	mov    QWORD PTR [rsp+0x78],rax
   49a13:	mov    rax,QWORD PTR [rsp+0x100]
   49a1b:	mov    DWORD PTR [rsp+0x64],r9d
   49a20:	mov    QWORD PTR [rsp+0x70],rax
   49a25:	mov    rax,QWORD PTR fs:0x28
   49a2e:	mov    QWORD PTR [rsp+0xa8],rax
   49a36:	xor    eax,eax
   49a38:	call   c360 <__ctype_get_mb_cur_max@plt>
   49a3d:	mov    r10d,DWORD PTR [rsp+0x8]
   49a42:	and    ebx,0x2
   49a45:	mov    QWORD PTR [rsp+0x68],rax
   49a4a:	setne  BYTE PTR [rsp+0x63]
   49a4f:	cmp    r10d,0xa
   49a53:	ja     cc9e <quotearg_buffer_restyled.cold>
   49a59:	lea    rcx,[rip+0x25be0]        # 6f640 <is_basic_table+0x80>
   49a60:	mov    edx,r10d
   49a63:	mov    r11,QWORD PTR [rsp+0x10]
   49a68:	movsxd rax,DWORD PTR [rcx+rdx*4]
   49a6c:	add    rax,rcx
   49a6f:	notrack jmp rax
   49a72:	nop    WORD PTR [rax+rax*1+0x0]
   49a78:	cmp    r10d,0xa
   49a7c:	je     49b0a <quotearg_buffer_restyled+0x13a>
   49a82:	lea    rdi,[rip+0x1ef06]        # 6898f <primes.6089+0x28af>
   49a89:	mov    edx,0x5
   49a8e:	mov    DWORD PTR [rsp+0x10],r10d
   49a93:	lea    rsi,[rip+0x25b57]        # 6f5f1 <is_basic_table+0x31>
   49a9a:	mov    QWORD PTR [rsp+0x8],r11
   49a9f:	call   c780 <dcgettext@plt>
   49aa4:	mov    r11,QWORD PTR [rsp+0x8]
   49aa9:	mov    r10d,DWORD PTR [rsp+0x10]
   49aae:	mov    rdi,rax
   49ab1:	mov    QWORD PTR [rsp+0x78],rax
   49ab6:	lea    rax,[rip+0x25b34]        # 6f5f1 <is_basic_table+0x31>
   49abd:	cmp    rdi,rax
   49ac0:	je     4ab3c <quotearg_buffer_restyled+0x116c>
   49ac6:	lea    rdi,[rip+0x1eec2]        # 6898f <primes.6089+0x28af>
   49acd:	mov    edx,0x5
   49ad2:	mov    DWORD PTR [rsp+0x10],r10d
   49ad7:	lea    rsi,[rip+0x25b11]        # 6f5ef <is_basic_table+0x2f>
   49ade:	mov    QWORD PTR [rsp+0x8],r11
   49ae3:	call   c780 <dcgettext@plt>
   49ae8:	mov    r11,QWORD PTR [rsp+0x8]
   49aed:	mov    r10d,DWORD PTR [rsp+0x10]
   49af2:	mov    rdi,rax
   49af5:	mov    QWORD PTR [rsp+0x70],rax
   49afa:	lea    rax,[rip+0x25aee]        # 6f5ef <is_basic_table+0x2f>
   49b01:	cmp    rdi,rax
   49b04:	je     4ab16 <quotearg_buffer_restyled+0x1146>
   49b0a:	xor    r12d,r12d
   49b0d:	test   ebx,ebx
   49b0f:	je     4a93a <quotearg_buffer_restyled+0xf6a>
   49b15:	mov    rbx,QWORD PTR [rsp+0x70]
   49b1a:	mov    DWORD PTR [rsp+0x38],r10d
   49b1f:	xor    r13d,r13d
   49b22:	mov    QWORD PTR [rsp+0x30],r11
   49b27:	mov    rdi,rbx
   49b2a:	call   c310 <strlen@plt>
   49b2f:	mov    QWORD PTR [rsp+0x50],rbx
   49b34:	mov    r11,QWORD PTR [rsp+0x30]
   49b39:	mov    QWORD PTR [rsp+0x20],rax
   49b3e:	mov    r10d,DWORD PTR [rsp+0x38]
   49b43:	mov    BYTE PTR [rsp+0x8],0x1
   49b48:	mov    BYTE PTR [rsp+0x84],0x0
   49b50:	mov    QWORD PTR [rsp+0x58],0x0
   49b59:	mov    BYTE PTR [rsp+0x10],0x1
   49b5e:	xchg   ax,ax
   49b60:	xor    ebx,ebx
   49b62:	mov    r8d,r13d
   49b65:	nop    DWORD PTR [rax]
   49b68:	cmp    r11,rbx
   49b6b:	setne  r13b
   49b6f:	cmp    r11,0xffffffffffffffff
   49b73:	jne    49b82 <quotearg_buffer_restyled+0x1b2>
   49b75:	mov    rax,QWORD PTR [rsp+0x18]
   49b7a:	cmp    BYTE PTR [rax+rbx*1],0x0
   49b7e:	setne  r13b
   49b82:	test   r13b,r13b
   49b85:	je     4a408 <quotearg_buffer_restyled+0xa38>
   49b8b:	cmp    r10d,0x2
   49b8f:	mov    rdi,QWORD PTR [rsp+0x18]
   49b94:	setne  al
   49b97:	and    al,BYTE PTR [rsp+0x10]
   49b9b:	lea    rbp,[rdi+rbx*1]
   49b9f:	mov    r9d,eax
   49ba2:	je     4a260 <quotearg_buffer_restyled+0x890>
   49ba8:	mov    rax,QWORD PTR [rsp+0x20]
   49bad:	test   rax,rax
   49bb0:	je     4a3b0 <quotearg_buffer_restyled+0x9e0>
   49bb6:	lea    rdx,[rbx+rax*1]
   49bba:	cmp    r11,0xffffffffffffffff
   49bbe:	jne    49bf8 <quotearg_buffer_restyled+0x228>
   49bc0:	cmp    rax,0x1
   49bc4:	jbe    49bf8 <quotearg_buffer_restyled+0x228>
   49bc6:	mov    DWORD PTR [rsp+0x48],r10d
   49bcb:	mov    BYTE PTR [rsp+0x40],r8b
   49bd0:	mov    BYTE PTR [rsp+0x38],r9b
   49bd5:	mov    QWORD PTR [rsp+0x30],rdx
   49bda:	call   c310 <strlen@plt>
   49bdf:	mov    r10d,DWORD PTR [rsp+0x48]
   49be4:	movzx  r8d,BYTE PTR [rsp+0x40]
   49bea:	movzx  r9d,BYTE PTR [rsp+0x38]
   49bf0:	mov    rdx,QWORD PTR [rsp+0x30]
   49bf5:	mov    r11,rax
   49bf8:	cmp    rdx,r11
   49bfb:	ja     4a3b0 <quotearg_buffer_restyled+0x9e0>
   49c01:	mov    rdx,QWORD PTR [rsp+0x20]
   49c06:	mov    rsi,QWORD PTR [rsp+0x50]
   49c0b:	mov    rdi,rbp
   49c0e:	mov    DWORD PTR [rsp+0x48],r10d
   49c13:	mov    QWORD PTR [rsp+0x40],r11
   49c18:	mov    BYTE PTR [rsp+0x38],r8b
   49c1d:	mov    BYTE PTR [rsp+0x30],r9b
   49c22:	call   c870 <memcmp@plt>
   49c27:	movzx  r9d,BYTE PTR [rsp+0x30]
   49c2d:	movzx  r8d,BYTE PTR [rsp+0x38]
   49c33:	test   eax,eax
   49c35:	mov    r11,QWORD PTR [rsp+0x40]
   49c3a:	mov    r10d,DWORD PTR [rsp+0x48]
   49c3f:	jne    4a3b0 <quotearg_buffer_restyled+0x9e0>
   49c45:	cmp    BYTE PTR [rsp+0x63],0x0
   49c4a:	jne    4a04e <quotearg_buffer_restyled+0x67e>
   49c50:	movzx  ebp,BYTE PTR [rbp+0x0]
   49c54:	cmp    bpl,0x7e
   49c58:	ja     49d83 <quotearg_buffer_restyled+0x3b3>
   49c5e:	lea    rcx,[rip+0x25a07]        # 6f66c <is_basic_table+0xac>
   49c65:	movzx  edx,bpl
   49c69:	movsxd rax,DWORD PTR [rcx+rdx*4]
   49c6d:	add    rax,rcx
   49c70:	notrack jmp rax
   49c73:	nop    DWORD PTR [rax+rax*1+0x0]
   49c78:	mov    eax,r9d
   49c7b:	nop    DWORD PTR [rax+rax*1+0x0]
   49c80:	mov    r13d,r9d
   49c83:	mov    r9d,eax
   49c86:	xor    eax,eax
   49c88:	nop    DWORD PTR [rax+rax*1+0x0]
   49c90:	mov    rsi,QWORD PTR [rsp+0x28]
   49c95:	test   rsi,rsi
   49c98:	je     49cae <quotearg_buffer_restyled+0x2de>
   49c9a:	mov    edx,ebp
   49c9c:	mov    ecx,ebp
   49c9e:	shr    dl,0x5
   49ca1:	movzx  edx,dl
   49ca4:	mov    edx,DWORD PTR [rsi+rdx*4]
   49ca7:	shr    edx,cl
   49ca9:	and    edx,0x1
   49cac:	jne    49cb7 <quotearg_buffer_restyled+0x2e7>
   49cae:	test   r9b,r9b
   49cb1:	je     49d71 <quotearg_buffer_restyled+0x3a1>
   49cb7:	cmp    r10d,0x2
   49cbb:	sete   dl
   49cbe:	cmp    BYTE PTR [rsp+0x63],0x0
   49cc3:	mov    eax,edx
   49cc5:	jne    4a1b0 <quotearg_buffer_restyled+0x7e0>
   49ccb:	mov    eax,r8d
   49cce:	xor    eax,0x1
   49cd1:	and    al,dl
   49cd3:	je     49d06 <quotearg_buffer_restyled+0x336>
   49cd5:	cmp    r14,r12
   49cd8:	jbe    49cdf <quotearg_buffer_restyled+0x30f>
   49cda:	mov    BYTE PTR [r15+r12*1],0x27
   49cdf:	lea    rdx,[r12+0x1]
   49ce4:	cmp    r14,rdx
   49ce7:	jbe    49cef <quotearg_buffer_restyled+0x31f>
   49ce9:	mov    BYTE PTR [r15+r12*1+0x1],0x24
   49cef:	lea    rdx,[r12+0x2]
   49cf4:	cmp    r14,rdx
   49cf7:	jbe    49cff <quotearg_buffer_restyled+0x32f>
   49cf9:	mov    BYTE PTR [r15+r12*1+0x2],0x27
   49cff:	add    r12,0x3
   49d03:	mov    r8d,eax
   49d06:	cmp    r14,r12
   49d09:	jbe    49d10 <quotearg_buffer_restyled+0x340>
   49d0b:	mov    BYTE PTR [r15+r12*1],0x5c
   49d10:	add    r12,0x1
   49d14:	add    rbx,0x1
   49d18:	cmp    r12,r14
   49d1b:	jae    49d21 <quotearg_buffer_restyled+0x351>
   49d1d:	mov    BYTE PTR [r15+r12*1],bpl
   49d21:	movzx  edi,BYTE PTR [rsp+0x8]
   49d26:	add    r12,0x1
   49d2a:	mov    eax,0x0
   49d2f:	test   r13b,r13b
   49d32:	cmove  edi,eax
   49d35:	mov    BYTE PTR [rsp+0x8],dil
   49d3a:	jmp    49b68 <quotearg_buffer_restyled+0x198>
   49d3f:	nop
   49d40:	xor    r9d,r9d
   49d43:	xor    eax,eax
   49d45:	xor    r13d,r13d
   49d48:	movzx  edx,BYTE PTR [rsp+0x10]
   49d4d:	xor    edx,0x1
   49d50:	or     al,dl
   49d52:	je     49c90 <quotearg_buffer_restyled+0x2c0>
   49d58:	xor    eax,eax
   49d5a:	cmp    BYTE PTR [rsp+0x63],0x0
   49d5f:	jne    49c90 <quotearg_buffer_restyled+0x2c0>
   49d65:	nop    DWORD PTR [rax]
   49d68:	test   r9b,r9b
   49d6b:	jne    49cb7 <quotearg_buffer_restyled+0x2e7>
   49d71:	xor    eax,0x1
   49d74:	add    rbx,0x1
   49d78:	and    eax,r8d
   49d7b:	jmp    4a2d0 <quotearg_buffer_restyled+0x900>
   49d80:	xor    r9d,r9d
   49d83:	cmp    QWORD PTR [rsp+0x68],0x1
   49d89:	jne    4a4e8 <quotearg_buffer_restyled+0xb18>
   49d8f:	mov    DWORD PTR [rsp+0x48],r10d
   49d94:	mov    QWORD PTR [rsp+0x40],r11
   49d99:	mov    BYTE PTR [rsp+0x38],r8b
   49d9e:	mov    BYTE PTR [rsp+0x30],r9b
   49da3:	call   c3b0 <__ctype_b_loc@plt>
   49da8:	movzx  r9d,BYTE PTR [rsp+0x30]
   49dae:	movzx  r8d,BYTE PTR [rsp+0x38]
   49db4:	mov    edi,0x1
   49db9:	mov    r13,rax
   49dbc:	movzx  eax,bpl
   49dc0:	mov    r11,QWORD PTR [rsp+0x40]
   49dc5:	mov    r10d,DWORD PTR [rsp+0x48]
   49dca:	mov    rdx,QWORD PTR [r13+0x0]
   49dce:	movzx  eax,WORD PTR [rdx+rax*2]
   49dd2:	and    ax,0x4000
   49dd6:	setne  r13b
   49dda:	sete   dl
   49ddd:	and    dl,BYTE PTR [rsp+0x10]
   49de1:	test   dl,dl
   49de3:	jne    4a8a1 <quotearg_buffer_restyled+0xed1>
   49de9:	nop    DWORD PTR [rax+0x0]
   49df0:	cmp    r10d,0x2
   49df4:	sete   al
   49df7:	jmp    49d48 <quotearg_buffer_restyled+0x378>
   49dfc:	mov    BYTE PTR [rsp+0x8],0x1
   49e01:	xor    r13d,r13d
   49e04:	mov    BYTE PTR [rsp+0x84],0x0
   49e0c:	mov    QWORD PTR [rsp+0x58],0x0
   49e15:	mov    BYTE PTR [rsp+0x63],0x1
   49e1a:	mov    BYTE PTR [rsp+0x10],0x0
   49e1f:	lea    rax,[rip+0x257c9]        # 6f5ef <is_basic_table+0x2f>
   49e26:	xor    r12d,r12d
   49e29:	mov    r10d,0x2
   49e2f:	mov    QWORD PTR [rsp+0x20],0x1
   49e38:	mov    QWORD PTR [rsp+0x50],rax
   49e3d:	jmp    49b60 <quotearg_buffer_restyled+0x190>
   49e42:	test   ebx,ebx
   49e44:	jne    4aa93 <quotearg_buffer_restyled+0x10c3>
   49e4a:	test   r14,r14
   49e4d:	je     4a8d5 <quotearg_buffer_restyled+0xf05>
   49e53:	mov    BYTE PTR [r15],0x22
   49e57:	xor    r13d,r13d
   49e5a:	mov    BYTE PTR [rsp+0x8],0x1
   49e5f:	mov    BYTE PTR [rsp+0x84],0x0
   49e67:	mov    QWORD PTR [rsp+0x58],0x0
   49e70:	lea    rax,[rip+0x1d76f]        # 675e6 <primes.6089+0x1506>
   49e77:	mov    BYTE PTR [rsp+0x63],0x0
   49e7c:	mov    r12d,0x1
   49e82:	mov    BYTE PTR [rsp+0x10],0x1
   49e87:	mov    QWORD PTR [rsp+0x20],0x1
   49e90:	mov    QWORD PTR [rsp+0x50],rax
   49e95:	jmp    49b60 <quotearg_buffer_restyled+0x190>
   49e9a:	test   ebx,ebx
   49e9c:	jne    49dfc <quotearg_buffer_restyled+0x42c>
   49ea2:	mov    BYTE PTR [rsp+0x10],0x1
   49ea7:	test   r14,r14
   49eaa:	jne    4abd1 <quotearg_buffer_restyled+0x1201>
   49eb0:	mov    QWORD PTR [rsp+0x58],0x0
   49eb9:	xor    r13d,r13d
   49ebc:	mov    BYTE PTR [rsp+0x8],0x1
   49ec1:	mov    BYTE PTR [rsp+0x84],0x0
   49ec9:	lea    rax,[rip+0x2571f]        # 6f5ef <is_basic_table+0x2f>
   49ed0:	mov    BYTE PTR [rsp+0x63],0x0
   49ed5:	mov    r12d,0x1
   49edb:	mov    r10d,0x2
   49ee1:	mov    QWORD PTR [rsp+0x20],0x1
   49eea:	mov    QWORD PTR [rsp+0x50],rax
   49eef:	jmp    49b60 <quotearg_buffer_restyled+0x190>
   49ef4:	lea    rax,[rip+0x1d6eb]        # 675e6 <primes.6089+0x1506>
   49efb:	xor    r13d,r13d
   49efe:	xor    r12d,r12d
   49f01:	mov    BYTE PTR [rsp+0x8],0x1
   49f06:	mov    BYTE PTR [rsp+0x84],0x0
   49f0e:	mov    r10d,0x5
   49f14:	mov    QWORD PTR [rsp+0x58],0x0
   49f1d:	mov    BYTE PTR [rsp+0x63],0x1
   49f22:	mov    BYTE PTR [rsp+0x10],0x1
   49f27:	mov    QWORD PTR [rsp+0x20],0x1
   49f30:	mov    QWORD PTR [rsp+0x50],rax
   49f35:	jmp    49b60 <quotearg_buffer_restyled+0x190>
   49f3a:	mov    BYTE PTR [rsp+0x8],0x1
   49f3f:	xor    r13d,r13d
   49f42:	xor    r12d,r12d
   49f45:	mov    BYTE PTR [rsp+0x84],0x0
   49f4d:	mov    QWORD PTR [rsp+0x58],0x0
   49f56:	mov    BYTE PTR [rsp+0x63],0x0
   49f5b:	mov    BYTE PTR [rsp+0x10],0x1
   49f60:	mov    QWORD PTR [rsp+0x20],0x0
   49f69:	mov    QWORD PTR [rsp+0x50],0x0
   49f72:	jmp    49b60 <quotearg_buffer_restyled+0x190>
   49f77:	mov    BYTE PTR [rsp+0x8],0x1
   49f7c:	xor    r13d,r13d
   49f7f:	xor    r12d,r12d
   49f82:	mov    BYTE PTR [rsp+0x84],0x0
   49f8a:	mov    QWORD PTR [rsp+0x58],0x0
   49f93:	mov    BYTE PTR [rsp+0x63],0x0
   49f98:	mov    BYTE PTR [rsp+0x10],0x0
   49f9d:	mov    QWORD PTR [rsp+0x20],0x0
   49fa6:	mov    QWORD PTR [rsp+0x50],0x0
   49faf:	jmp    49b60 <quotearg_buffer_restyled+0x190>
   49fb4:	mov    BYTE PTR [rsp+0x8],0x1
   49fb9:	xor    r13d,r13d
   49fbc:	mov    BYTE PTR [rsp+0x84],0x0
   49fc4:	mov    QWORD PTR [rsp+0x58],0x0
   49fcd:	mov    BYTE PTR [rsp+0x63],0x1
   49fd2:	mov    BYTE PTR [rsp+0x10],0x1
   49fd7:	jmp    49e1f <quotearg_buffer_restyled+0x44f>
   49fdc:	test   ebx,ebx
   49fde:	jne    4abee <quotearg_buffer_restyled+0x121e>
   49fe4:	mov    BYTE PTR [rsp+0x10],0x0
   49fe9:	jmp    49ea7 <quotearg_buffer_restyled+0x4d7>
   49fee:	xchg   ax,ax
   49ff0:	xor    r9d,r9d
   49ff3:	cmp    r11,0x1
   49ff7:	setne  dl
   49ffa:	cmp    r11,0xffffffffffffffff
   49ffe:	jne    4a00c <quotearg_buffer_restyled+0x63c>
   4a000:	mov    rax,QWORD PTR [rsp+0x18]
   4a005:	cmp    BYTE PTR [rax+0x1],0x0
   4a009:	setne  dl
   4a00c:	cmp    r10d,0x2
   4a010:	sete   al
   4a013:	test   dl,dl
   4a015:	jne    49d45 <quotearg_buffer_restyled+0x375>
   4a01b:	test   rbx,rbx
   4a01e:	jne    49d45 <quotearg_buffer_restyled+0x375>
   4a024:	cmp    BYTE PTR [rsp+0x63],0x0
   4a029:	je     49d48 <quotearg_buffer_restyled+0x378>
   4a02f:	test   al,al
   4a031:	je     49d48 <quotearg_buffer_restyled+0x378>
   4a037:	mov    r10d,0x2
   4a03d:	nop    DWORD PTR [rax]
   4a040:	cmp    BYTE PTR [rsp+0x10],0x0
   4a045:	mov    eax,0x4
   4a04a:	cmovne r10d,eax
   4a04e:	sub    rsp,0x8
   4a052:	mov    r8d,r10d
   4a055:	mov    rcx,r11
   4a058:	push   QWORD PTR [rsp+0x78]
   4a05c:	mov    rsi,r14
   4a05f:	mov    rdi,r15
   4a062:	push   QWORD PTR [rsp+0x88]
   4a069:	push   0x0
   4a06b:	mov    r9d,DWORD PTR [rsp+0x84]
   4a073:	mov    rdx,QWORD PTR [rsp+0x38]
   4a078:	and    r9d,0xfffffffd
   4a07c:	call   499d0 <quotearg_buffer_restyled>
   4a081:	add    rsp,0x20
   4a085:	mov    r12,rax
   4a088:	mov    rax,QWORD PTR [rsp+0xa8]
   4a090:	xor    rax,QWORD PTR fs:0x28
   4a099:	jne    4abcc <quotearg_buffer_restyled+0x11fc>
   4a09f:	add    rsp,0xb8
   4a0a6:	mov    rax,r12
   4a0a9:	pop    rbx
   4a0aa:	pop    rbp
   4a0ab:	pop    r12
   4a0ad:	pop    r13
   4a0af:	pop    r14
   4a0b1:	pop    r15
   4a0b3:	ret    
   4a0b4:	xor    r9d,r9d
   4a0b7:	cmp    r10d,0x2
   4a0bb:	je     4a4c8 <quotearg_buffer_restyled+0xaf8>
   4a0c1:	cmp    r10d,0x5
   4a0c5:	jne    4a0f0 <quotearg_buffer_restyled+0x720>
   4a0c7:	test   BYTE PTR [rsp+0x64],0x4
   4a0cc:	je     4a0f0 <quotearg_buffer_restyled+0x720>
   4a0ce:	lea    rax,[rbx+0x2]
   4a0d2:	cmp    rax,r11
   4a0d5:	jae    4a0f0 <quotearg_buffer_restyled+0x720>
   4a0d7:	mov    rdi,QWORD PTR [rsp+0x18]
   4a0dc:	cmp    BYTE PTR [rdi+rbx*1+0x1],0x3f
   4a0e1:	je     4a9ad <quotearg_buffer_restyled+0xfdd>
   4a0e7:	nop    WORD PTR [rax+rax*1+0x0]
   4a0f0:	xor    eax,eax
   4a0f2:	xor    r13d,r13d
   4a0f5:	mov    ebp,0x3f
   4a0fa:	jmp    49d48 <quotearg_buffer_restyled+0x378>
   4a0ff:	xor    r9d,r9d
   4a102:	cmp    r10d,0x2
   4a106:	je     4a480 <quotearg_buffer_restyled+0xab0>
   4a10c:	mov    BYTE PTR [rsp+0x84],r13b
   4a114:	xor    eax,eax
   4a116:	mov    ebp,0x27
   4a11b:	jmp    49d48 <quotearg_buffer_restyled+0x378>
   4a120:	xor    r9d,r9d
   4a123:	nop    DWORD PTR [rax+rax*1+0x0]
   4a128:	movzx  ecx,BYTE PTR [rsp+0x63]
   4a12d:	test   BYTE PTR [rsp+0x10],cl
   4a131:	je     4a13f <quotearg_buffer_restyled+0x76f>
   4a133:	cmp    QWORD PTR [rsp+0x20],0x0
   4a139:	jne    4a2b8 <quotearg_buffer_restyled+0x8e8>
   4a13f:	mov    ebp,0x5c
   4a144:	mov    edx,0x5c
   4a149:	nop    DWORD PTR [rax+0x0]
   4a150:	cmp    BYTE PTR [rsp+0x10],0x0
   4a155:	jne    4abe7 <quotearg_buffer_restyled+0x1217>
   4a15b:	xor    r13d,r13d
   4a15e:	xor    eax,eax
   4a160:	cmp    BYTE PTR [rsp+0x63],0x0
   4a165:	jne    49c90 <quotearg_buffer_restyled+0x2c0>
   4a16b:	jmp    49d68 <quotearg_buffer_restyled+0x398>
   4a170:	mov    ebp,0x61
   4a175:	cmp    r10d,0x2
   4a179:	sete   al
   4a17c:	cmp    BYTE PTR [rsp+0x63],0x0
   4a181:	jne    4a1b0 <quotearg_buffer_restyled+0x7e0>
   4a183:	xor    r13d,r13d
   4a186:	jmp    49d06 <quotearg_buffer_restyled+0x336>
   4a18b:	mov    ebp,0x72
   4a190:	xor    r13d,r13d
   4a193:	cmp    r10d,0x2
   4a197:	sete   dl
   4a19a:	cmp    BYTE PTR [rsp+0x63],0x0
   4a19f:	mov    eax,edx
   4a1a1:	je     49ccb <quotearg_buffer_restyled+0x2fb>
   4a1a7:	nop    WORD PTR [rax+rax*1+0x0]
   4a1b0:	and    BYTE PTR [rsp+0x10],al
   4a1b4:	jmp    4a040 <quotearg_buffer_restyled+0x670>
   4a1b9:	mov    ebp,0x66
   4a1be:	jmp    4a175 <quotearg_buffer_restyled+0x7a5>
   4a1c0:	mov    ebp,0x6e
   4a1c5:	jmp    4a190 <quotearg_buffer_restyled+0x7c0>
   4a1c7:	mov    ebp,0x62
   4a1cc:	jmp    4a175 <quotearg_buffer_restyled+0x7a5>
   4a1ce:	cmp    BYTE PTR [rsp+0x63],0x0
   4a1d3:	jne    4ab62 <quotearg_buffer_restyled+0x1192>
   4a1d9:	xor    r9d,r9d
   4a1dc:	cmp    r10d,0x2
   4a1e0:	mov    eax,r8d
   4a1e3:	sete   dl
   4a1e6:	xor    eax,0x1
   4a1e9:	and    al,dl
   4a1eb:	je     4a800 <quotearg_buffer_restyled+0xe30>
   4a1f1:	cmp    r14,r12
   4a1f4:	jbe    4a1fb <quotearg_buffer_restyled+0x82b>
   4a1f6:	mov    BYTE PTR [r15+r12*1],0x27
   4a1fb:	lea    rcx,[r12+0x1]
   4a200:	cmp    r14,rcx
   4a203:	jbe    4a20b <quotearg_buffer_restyled+0x83b>
   4a205:	mov    BYTE PTR [r15+r12*1+0x1],0x24
   4a20b:	lea    rcx,[r12+0x2]
   4a210:	cmp    r14,rcx
   4a213:	jbe    4a21b <quotearg_buffer_restyled+0x84b>
   4a215:	mov    BYTE PTR [r15+r12*1+0x2],0x27
   4a21b:	lea    rcx,[r12+0x3]
   4a220:	cmp    r14,rcx
   4a223:	ja     4a80b <quotearg_buffer_restyled+0xe3b>
   4a229:	add    r12,0x4
   4a22d:	mov    r8d,eax
   4a230:	xor    r13d,r13d
   4a233:	mov    ebp,0x30
   4a238:	jmp    49cae <quotearg_buffer_restyled+0x2de>
   4a23d:	xor    r9d,r9d
   4a240:	mov    ebp,0x9
   4a245:	mov    edx,0x74
   4a24a:	jmp    4a150 <quotearg_buffer_restyled+0x780>
   4a24f:	mov    ebp,0x76
   4a254:	jmp    4a190 <quotearg_buffer_restyled+0x7c0>
   4a259:	nop    DWORD PTR [rax+0x0]
   4a260:	movzx  ebp,BYTE PTR [rbp+0x0]
   4a264:	cmp    bpl,0x7e
   4a268:	ja     49d83 <quotearg_buffer_restyled+0x3b3>
   4a26e:	lea    rcx,[rip+0x255f3]        # 6f868 <is_basic_table+0x2a8>
   4a275:	movzx  edx,bpl
   4a279:	movsxd rax,DWORD PTR [rcx+rdx*4]
   4a27d:	add    rax,rcx
   4a280:	notrack jmp rax
   4a283:	nop    DWORD PTR [rax+rax*1+0x0]
   4a288:	cmp    r10d,0x2
   4a28c:	sete   al
   4a28f:	xor    r13d,r13d
   4a292:	jmp    4a024 <quotearg_buffer_restyled+0x654>
   4a297:	cmp    r10d,0x2
   4a29b:	sete   al
   4a29e:	jmp    4a01b <quotearg_buffer_restyled+0x64b>
   4a2a3:	cmp    r10d,0x2
   4a2a7:	jne    4a128 <quotearg_buffer_restyled+0x758>
   4a2ad:	cmp    BYTE PTR [rsp+0x63],0x0
   4a2b2:	jne    4a040 <quotearg_buffer_restyled+0x670>
   4a2b8:	add    rbx,0x1
   4a2bc:	mov    eax,r8d
   4a2bf:	xor    r13d,r13d
   4a2c2:	mov    ebp,0x5c
   4a2c7:	nop    WORD PTR [rax+rax*1+0x0]
   4a2d0:	test   al,al
   4a2d2:	je     49d18 <quotearg_buffer_restyled+0x348>
   4a2d8:	cmp    r14,r12
   4a2db:	jbe    4a2e2 <quotearg_buffer_restyled+0x912>
   4a2dd:	mov    BYTE PTR [r15+r12*1],0x27
   4a2e2:	lea    rax,[r12+0x1]
   4a2e7:	cmp    r14,rax
   4a2ea:	jbe    4a2f2 <quotearg_buffer_restyled+0x922>
   4a2ec:	mov    BYTE PTR [r15+r12*1+0x1],0x27
   4a2f2:	add    r12,0x2
   4a2f6:	xor    r8d,r8d
   4a2f9:	jmp    49d18 <quotearg_buffer_restyled+0x348>
   4a2fe:	cmp    r10d,0x2
   4a302:	mov    ebp,0x20
   4a307:	sete   al
   4a30a:	jmp    4a024 <quotearg_buffer_restyled+0x654>
   4a30f:	mov    ebp,0xc
   4a314:	mov    edx,0x66
   4a319:	jmp    4a150 <quotearg_buffer_restyled+0x780>
   4a31e:	mov    ebp,0x9
   4a323:	mov    edx,0x74
   4a328:	cmp    r10d,0x2
   4a32c:	sete   al
   4a32f:	and    al,BYTE PTR [rsp+0x63]
   4a333:	mov    r9d,eax
   4a336:	je     4a150 <quotearg_buffer_restyled+0x780>
   4a33c:	jmp    4a037 <quotearg_buffer_restyled+0x667>
   4a341:	mov    ebp,0x8
   4a346:	mov    edx,0x62
   4a34b:	jmp    4a150 <quotearg_buffer_restyled+0x780>
   4a350:	cmp    BYTE PTR [rsp+0x10],0x0
   4a355:	jne    4a1ce <quotearg_buffer_restyled+0x7fe>
   4a35b:	xor    r9d,r9d
   4a35e:	xor    ebp,ebp
   4a360:	test   BYTE PTR [rsp+0x64],0x1
   4a365:	je     4a15b <quotearg_buffer_restyled+0x78b>
   4a36b:	add    rbx,0x1
   4a36f:	jmp    49b68 <quotearg_buffer_restyled+0x198>
   4a374:	mov    ebp,0xd
   4a379:	mov    edx,0x72
   4a37e:	jmp    4a328 <quotearg_buffer_restyled+0x958>
   4a380:	mov    ebp,0xb
   4a385:	mov    edx,0x76
   4a38a:	jmp    4a150 <quotearg_buffer_restyled+0x780>
   4a38f:	mov    ebp,0xa
   4a394:	mov    edx,0x6e
   4a399:	jmp    4a328 <quotearg_buffer_restyled+0x958>
   4a39b:	mov    ebp,0x7
   4a3a0:	mov    edx,0x61
   4a3a5:	jmp    4a150 <quotearg_buffer_restyled+0x780>
   4a3aa:	nop    WORD PTR [rax+rax*1+0x0]
   4a3b0:	movzx  ebp,BYTE PTR [rbp+0x0]
   4a3b4:	cmp    bpl,0x7e
   4a3b8:	ja     49d80 <quotearg_buffer_restyled+0x3b0>
   4a3be:	lea    rcx,[rip+0x2569f]        # 6fa64 <is_basic_table+0x4a4>
   4a3c5:	movzx  edx,bpl
   4a3c9:	movsxd rax,DWORD PTR [rcx+rdx*4]
   4a3cd:	add    rax,rcx
   4a3d0:	notrack jmp rax
   4a3d3:	nop    DWORD PTR [rax+rax*1+0x0]
   4a3d8:	xor    eax,eax
   4a3da:	jmp    49c80 <quotearg_buffer_restyled+0x2b0>
   4a3df:	xor    eax,eax
   4a3e1:	test   rbx,rbx
   4a3e4:	jne    4a7f0 <quotearg_buffer_restyled+0xe20>
   4a3ea:	mov    r13d,r9d
   4a3ed:	mov    r9d,eax
   4a3f0:	xor    eax,eax
   4a3f2:	jmp    49d48 <quotearg_buffer_restyled+0x378>
   4a3f7:	xor    eax,eax
   4a3f9:	mov    ebp,0x20
   4a3fe:	jmp    49c80 <quotearg_buffer_restyled+0x2b0>
   4a403:	nop    DWORD PTR [rax+rax*1+0x0]
   4a408:	cmp    r10d,0x2
   4a40c:	mov    r13d,r8d
   4a40f:	sete   dl
   4a412:	test   r12,r12
   4a415:	jne    4a421 <quotearg_buffer_restyled+0xa51>
   4a417:	test   BYTE PTR [rsp+0x63],dl
   4a41b:	jne    4a037 <quotearg_buffer_restyled+0x667>
   4a421:	movzx  eax,BYTE PTR [rsp+0x63]
   4a426:	xor    eax,0x1
   4a429:	and    dl,al
   4a42b:	je     4aad3 <quotearg_buffer_restyled+0x1103>
   4a431:	cmp    BYTE PTR [rsp+0x84],0x0
   4a439:	je     4aad5 <quotearg_buffer_restyled+0x1105>
   4a43f:	cmp    BYTE PTR [rsp+0x8],0x0
   4a444:	jne    4ab7d <quotearg_buffer_restyled+0x11ad>
   4a44a:	test   r14,r14
   4a44d:	sete   al
   4a450:	cmp    QWORD PTR [rsp+0x58],0x0
   4a456:	setne  dl
   4a459:	and    al,dl
   4a45b:	je     4ab70 <quotearg_buffer_restyled+0x11a0>
   4a461:	mov    rdx,QWORD PTR [rsp+0x58]
   4a466:	mov    r14,QWORD PTR [rsp+0x58]
   4a46b:	mov    BYTE PTR [r15],0x27
   4a46f:	mov    BYTE PTR [rsp+0x84],al
   4a476:	mov    QWORD PTR [rsp+0x58],rdx
   4a47b:	jmp    49ec9 <quotearg_buffer_restyled+0x4f9>
   4a480:	cmp    BYTE PTR [rsp+0x63],0x0
   4a485:	jne    4a040 <quotearg_buffer_restyled+0x670>
   4a48b:	test   r14,r14
   4a48e:	je     4a866 <quotearg_buffer_restyled+0xe96>
   4a494:	xor    edx,edx
   4a496:	cmp    QWORD PTR [rsp+0x58],0x0
   4a49c:	jne    4a866 <quotearg_buffer_restyled+0xe96>
   4a4a2:	mov    QWORD PTR [rsp+0x58],r14
   4a4a7:	add    r12,0x3
   4a4ab:	xor    eax,eax
   4a4ad:	xor    r8d,r8d
   4a4b0:	mov    BYTE PTR [rsp+0x84],r13b
   4a4b8:	mov    r14,rdx
   4a4bb:	mov    ebp,0x27
   4a4c0:	jmp    49cae <quotearg_buffer_restyled+0x2de>
   4a4c5:	nop    DWORD PTR [rax]
   4a4c8:	cmp    BYTE PTR [rsp+0x63],0x0
   4a4cd:	jne    4a040 <quotearg_buffer_restyled+0x670>
   4a4d3:	xor    r13d,r13d
   4a4d6:	xor    eax,eax
   4a4d8:	mov    ebp,0x3f
   4a4dd:	jmp    49cae <quotearg_buffer_restyled+0x2de>
   4a4e2:	nop    WORD PTR [rax+rax*1+0x0]
   4a4e8:	lea    rax,[rsp+0xa0]
   4a4f0:	mov    QWORD PTR [rsp+0xa0],0x0
   4a4fc:	mov    QWORD PTR [rsp+0x38],rax
   4a501:	cmp    r11,0xffffffffffffffff
   4a505:	jne    4a534 <quotearg_buffer_restyled+0xb64>
   4a507:	mov    rdi,QWORD PTR [rsp+0x18]
   4a50c:	mov    DWORD PTR [rsp+0x48],r10d
   4a511:	mov    BYTE PTR [rsp+0x40],r8b
   4a516:	mov    BYTE PTR [rsp+0x30],r9b
   4a51b:	call   c310 <strlen@plt>
   4a520:	mov    r10d,DWORD PTR [rsp+0x48]
   4a525:	movzx  r8d,BYTE PTR [rsp+0x40]
   4a52b:	movzx  r9d,BYTE PTR [rsp+0x30]
   4a531:	mov    r11,rax
   4a534:	lea    rax,[rsp+0x9c]
   4a53c:	mov    BYTE PTR [rsp+0x30],r13b
   4a541:	xor    edi,edi
   4a543:	mov    QWORD PTR [rsp+0x48],rax
   4a548:	mov    BYTE PTR [rsp+0x85],r8b
   4a550:	mov    BYTE PTR [rsp+0x87],r9b
   4a558:	mov    DWORD PTR [rsp+0x80],r10d
   4a560:	mov    QWORD PTR [rsp+0x88],r12
   4a568:	mov    r12,QWORD PTR [rsp+0x38]
   4a56d:	mov    QWORD PTR [rsp+0x40],rbx
   4a572:	mov    rbx,r11
   4a575:	mov    BYTE PTR [rsp+0x86],bpl
   4a57d:	mov    rbp,rdi
   4a580:	mov    rax,QWORD PTR [rsp+0x40]
   4a585:	mov    rdi,QWORD PTR [rsp+0x48]
   4a58a:	mov    rdx,rbx
   4a58d:	mov    rcx,r12
   4a590:	lea    r13,[rax+rbp*1]
   4a594:	mov    rax,QWORD PTR [rsp+0x18]
   4a599:	sub    rdx,r13
   4a59c:	lea    rsi,[rax+r13*1]
   4a5a0:	call   4bee0 <rpl_mbrtowc>
   4a5a5:	mov    rdx,rax
   4a5a8:	test   rax,rax
   4a5ab:	je     4a613 <quotearg_buffer_restyled+0xc43>
   4a5ad:	cmp    rax,0xffffffffffffffff
   4a5b1:	je     4a96b <quotearg_buffer_restyled+0xf9b>
   4a5b7:	cmp    rax,0xfffffffffffffffe
   4a5bb:	je     4aa27 <quotearg_buffer_restyled+0x1057>
   4a5c1:	cmp    DWORD PTR [rsp+0x80],0x2
   4a5c9:	jne    4a5d6 <quotearg_buffer_restyled+0xc06>
   4a5cb:	cmp    BYTE PTR [rsp+0x63],0x0
   4a5d0:	jne    4a790 <quotearg_buffer_restyled+0xdc0>
   4a5d6:	mov    edi,DWORD PTR [rsp+0x9c]
   4a5dd:	mov    QWORD PTR [rsp+0x38],rdx
   4a5e2:	call   cb60 <iswprint@plt>
   4a5e7:	movzx  edi,BYTE PTR [rsp+0x30]
   4a5ec:	mov    rdx,QWORD PTR [rsp+0x38]
   4a5f1:	test   eax,eax
   4a5f3:	mov    eax,0x0
   4a5f8:	cmove  edi,eax
   4a5fb:	add    rbp,rdx
   4a5fe:	mov    BYTE PTR [rsp+0x30],dil
   4a603:	mov    rdi,r12
   4a606:	call   c730 <mbsinit@plt>
   4a60b:	test   eax,eax
   4a60d:	je     4a580 <quotearg_buffer_restyled+0xbb0>
   4a613:	movzx  r13d,BYTE PTR [rsp+0x30]
   4a619:	mov    rdi,rbp
   4a61c:	mov    r11,rbx
   4a61f:	movzx  r8d,BYTE PTR [rsp+0x85]
   4a628:	movzx  ebp,BYTE PTR [rsp+0x86]
   4a630:	mov    r12,QWORD PTR [rsp+0x88]
   4a638:	mov    edx,r13d
   4a63b:	mov    rbx,QWORD PTR [rsp+0x40]
   4a640:	movzx  r9d,BYTE PTR [rsp+0x87]
   4a649:	mov    r10d,DWORD PTR [rsp+0x80]
   4a651:	xor    edx,0x1
   4a654:	and    dl,BYTE PTR [rsp+0x10]
   4a658:	cmp    rdi,0x1
   4a65c:	jbe    49de1 <quotearg_buffer_restyled+0x411>
   4a662:	mov    rcx,rdi
   4a665:	mov    BYTE PTR [rsp+0x30],r13b
   4a66a:	mov    rdi,QWORD PTR [rsp+0x18]
   4a66f:	xor    esi,esi
   4a671:	movzx  r13d,BYTE PTR [rsp+0x63]
   4a677:	add    rcx,rbx
   4a67a:	jmp    4a731 <quotearg_buffer_restyled+0xd61>
   4a67f:	nop
   4a680:	cmp    r10d,0x2
   4a684:	sete   al
   4a687:	test   r13b,r13b
   4a68a:	jne    4a8b9 <quotearg_buffer_restyled+0xee9>
   4a690:	mov    esi,r8d
   4a693:	xor    esi,0x1
   4a696:	and    al,sil
   4a699:	je     4a6cc <quotearg_buffer_restyled+0xcfc>
   4a69b:	cmp    r14,r12
   4a69e:	jbe    4a6a5 <quotearg_buffer_restyled+0xcd5>
   4a6a0:	mov    BYTE PTR [r15+r12*1],0x27
   4a6a5:	lea    rsi,[r12+0x1]
   4a6aa:	cmp    r14,rsi
   4a6ad:	jbe    4a6b5 <quotearg_buffer_restyled+0xce5>
   4a6af:	mov    BYTE PTR [r15+r12*1+0x1],0x24
   4a6b5:	lea    rsi,[r12+0x2]
   4a6ba:	cmp    r14,rsi
   4a6bd:	jbe    4a6c5 <quotearg_buffer_restyled+0xcf5>
   4a6bf:	mov    BYTE PTR [r15+r12*1+0x2],0x27
   4a6c5:	add    r12,0x3
   4a6c9:	mov    r8d,eax
   4a6cc:	cmp    r14,r12
   4a6cf:	jbe    4a6d6 <quotearg_buffer_restyled+0xd06>
   4a6d1:	mov    BYTE PTR [r15+r12*1],0x5c
   4a6d6:	lea    rax,[r12+0x1]
   4a6db:	cmp    r14,rax
   4a6de:	jbe    4a6ed <quotearg_buffer_restyled+0xd1d>
   4a6e0:	mov    eax,ebp
   4a6e2:	shr    al,0x6
   4a6e5:	add    eax,0x30
   4a6e8:	mov    BYTE PTR [r15+r12*1+0x1],al
   4a6ed:	lea    rax,[r12+0x2]
   4a6f2:	cmp    r14,rax
   4a6f5:	jbe    4a707 <quotearg_buffer_restyled+0xd37>
   4a6f7:	mov    eax,ebp
   4a6f9:	shr    al,0x3
   4a6fc:	and    eax,0x7
   4a6ff:	add    eax,0x30
   4a702:	mov    BYTE PTR [r15+r12*1+0x2],al
   4a707:	and    ebp,0x7
   4a70a:	add    rbx,0x1
   4a70e:	add    r12,0x3
   4a712:	add    ebp,0x30
   4a715:	cmp    rbx,rcx
   4a718:	jae    4a8c2 <quotearg_buffer_restyled+0xef2>
   4a71e:	mov    esi,edx
   4a720:	cmp    r14,r12
   4a723:	jbe    4a729 <quotearg_buffer_restyled+0xd59>
   4a725:	mov    BYTE PTR [r15+r12*1],bpl
   4a729:	movzx  ebp,BYTE PTR [rdi+rbx*1]
   4a72d:	add    r12,0x1
   4a731:	test   dl,dl
   4a733:	jne    4a680 <quotearg_buffer_restyled+0xcb0>
   4a739:	mov    eax,esi
   4a73b:	xor    eax,0x1
   4a73e:	and    eax,r8d
   4a741:	test   r9b,r9b
   4a744:	je     4a754 <quotearg_buffer_restyled+0xd84>
   4a746:	cmp    r14,r12
   4a749:	jbe    4a750 <quotearg_buffer_restyled+0xd80>
   4a74b:	mov    BYTE PTR [r15+r12*1],0x5c
   4a750:	add    r12,0x1
   4a754:	add    rbx,0x1
   4a758:	cmp    rbx,rcx
   4a75b:	jae    4a8ae <quotearg_buffer_restyled+0xede>
   4a761:	test   al,al
   4a763:	je     4a8cd <quotearg_buffer_restyled+0xefd>
   4a769:	cmp    r14,r12
   4a76c:	jbe    4a773 <quotearg_buffer_restyled+0xda3>
   4a76e:	mov    BYTE PTR [r15+r12*1],0x27
   4a773:	lea    rax,[r12+0x1]
   4a778:	cmp    r14,rax
   4a77b:	jbe    4a783 <quotearg_buffer_restyled+0xdb3>
   4a77d:	mov    BYTE PTR [r15+r12*1+0x1],0x27
   4a783:	add    r12,0x2
   4a787:	xor    r9d,r9d
   4a78a:	xor    r8d,r8d
   4a78d:	jmp    4a720 <quotearg_buffer_restyled+0xd50>
   4a78f:	nop
   4a790:	cmp    rax,0x1
   4a794:	je     4a5d6 <quotearg_buffer_restyled+0xc06>
   4a79a:	mov    rax,QWORD PTR [rsp+0x18]
   4a79f:	lea    rsi,[rax+r13*1+0x1]
   4a7a4:	add    rax,rdx
   4a7a7:	lea    r8,[rax+r13*1]
   4a7ab:	jmp    4a7ba <quotearg_buffer_restyled+0xdea>
   4a7ad:	add    rsi,0x1
   4a7b1:	cmp    r8,rsi
   4a7b4:	je     4a5d6 <quotearg_buffer_restyled+0xc06>
   4a7ba:	movzx  eax,BYTE PTR [rsi]
   4a7bd:	lea    ecx,[rax-0x5b]
   4a7c0:	cmp    cl,0x21
   4a7c3:	ja     4a7ad <quotearg_buffer_restyled+0xddd>
   4a7c5:	mov    eax,0x1
   4a7ca:	shl    rax,cl
   4a7cd:	movabs rcx,0x20000002b
   4a7d7:	test   rax,rcx
   4a7da:	je     4a7ad <quotearg_buffer_restyled+0xddd>
   4a7dc:	mov    r11,rbx
   4a7df:	mov    r10d,0x2
   4a7e5:	jmp    4a040 <quotearg_buffer_restyled+0x670>
   4a7ea:	nop    WORD PTR [rax+rax*1+0x0]
   4a7f0:	mov    r9d,eax
   4a7f3:	xor    r13d,r13d
   4a7f6:	xor    eax,eax
   4a7f8:	jmp    49c90 <quotearg_buffer_restyled+0x2c0>
   4a7fd:	nop    DWORD PTR [rax]
   4a800:	mov    rcx,r12
   4a803:	cmp    r14,r12
   4a806:	jbe    4a813 <quotearg_buffer_restyled+0xe43>
   4a808:	mov    eax,r8d
   4a80b:	mov    BYTE PTR [r15+rcx*1],0x5c
   4a810:	mov    r8d,eax
   4a813:	lea    r12,[rcx+0x1]
   4a817:	cmp    r10d,0x2
   4a81b:	je     4a8f3 <quotearg_buffer_restyled+0xf23>
   4a821:	lea    rax,[rbx+0x1]
   4a825:	mov    ebp,0x30
   4a82a:	cmp    rax,r11
   4a82d:	jae    4a848 <quotearg_buffer_restyled+0xe78>
   4a82f:	mov    rax,QWORD PTR [rsp+0x18]
   4a834:	movzx  eax,BYTE PTR [rax+rbx*1+0x1]
   4a839:	mov    BYTE PTR [rsp+0x30],al
   4a83d:	sub    eax,0x30
   4a840:	cmp    al,0x9
   4a842:	jbe    4a903 <quotearg_buffer_restyled+0xf33>
   4a848:	movzx  eax,BYTE PTR [rsp+0x10]
   4a84d:	xor    eax,0x1
   4a850:	or     al,dl
   4a852:	mov    eax,r13d
   4a855:	mov    r13d,0x0
   4a85b:	je     49c90 <quotearg_buffer_restyled+0x2c0>
   4a861:	jmp    49cae <quotearg_buffer_restyled+0x2de>
   4a866:	cmp    r14,r12
   4a869:	jbe    4a870 <quotearg_buffer_restyled+0xea0>
   4a86b:	mov    BYTE PTR [r15+r12*1],0x27
   4a870:	lea    rax,[r12+0x1]
   4a875:	cmp    r14,rax
   4a878:	jbe    4a880 <quotearg_buffer_restyled+0xeb0>
   4a87a:	mov    BYTE PTR [r15+r12*1+0x1],0x5c
   4a880:	lea    rax,[r12+0x2]
   4a885:	cmp    r14,rax
   4a888:	jbe    4abbf <quotearg_buffer_restyled+0x11ef>
   4a88e:	mov    rdx,r14
   4a891:	mov    BYTE PTR [r15+r12*1+0x2],0x27
   4a897:	mov    r14,QWORD PTR [rsp+0x58]
   4a89c:	jmp    4a4a2 <quotearg_buffer_restyled+0xad2>
   4a8a1:	movzx  edx,BYTE PTR [rsp+0x10]
   4a8a6:	xor    r13d,r13d
   4a8a9:	jmp    4a662 <quotearg_buffer_restyled+0xc92>
   4a8ae:	movzx  r13d,BYTE PTR [rsp+0x30]
   4a8b4:	jmp    4a2d0 <quotearg_buffer_restyled+0x900>
   4a8b9:	mov    BYTE PTR [rsp+0x10],al
   4a8bd:	jmp    4a040 <quotearg_buffer_restyled+0x670>
   4a8c2:	movzx  r13d,BYTE PTR [rsp+0x30]
   4a8c8:	jmp    49d18 <quotearg_buffer_restyled+0x348>
   4a8cd:	xor    r9d,r9d
   4a8d0:	jmp    4a720 <quotearg_buffer_restyled+0xd50>
   4a8d5:	mov    QWORD PTR [rsp+0x58],0x0
   4a8de:	xor    r13d,r13d
   4a8e1:	mov    BYTE PTR [rsp+0x8],0x1
   4a8e6:	mov    BYTE PTR [rsp+0x84],0x0
   4a8ee:	jmp    49e70 <quotearg_buffer_restyled+0x4a0>
   4a8f3:	mov    eax,r13d
   4a8f6:	mov    ebp,0x30
   4a8fb:	xor    r13d,r13d
   4a8fe:	jmp    49cae <quotearg_buffer_restyled+0x2de>
   4a903:	cmp    r14,r12
   4a906:	jbe    4a90d <quotearg_buffer_restyled+0xf3d>
   4a908:	mov    BYTE PTR [r15+r12*1],0x30
   4a90d:	lea    rax,[rcx+0x2]
   4a911:	cmp    r14,rax
   4a914:	jbe    4a91c <quotearg_buffer_restyled+0xf4c>
   4a916:	mov    BYTE PTR [r15+rcx*1+0x2],0x30
   4a91c:	lea    r12,[rcx+0x3]
   4a920:	mov    ebp,0x30
   4a925:	jmp    4a848 <quotearg_buffer_restyled+0xe78>
   4a92a:	mov    eax,r9d
   4a92d:	jmp    4a3e1 <quotearg_buffer_restyled+0xa11>
   4a932:	mov    eax,r9d
   4a935:	jmp    4a3f9 <quotearg_buffer_restyled+0xa29>
   4a93a:	mov    rdx,QWORD PTR [rsp+0x78]
   4a93f:	movzx  eax,BYTE PTR [rdx]
   4a942:	test   al,al
   4a944:	je     49b15 <quotearg_buffer_restyled+0x145>
   4a94a:	nop    WORD PTR [rax+rax*1+0x0]
   4a950:	cmp    r14,r12
   4a953:	jbe    4a959 <quotearg_buffer_restyled+0xf89>
   4a955:	mov    BYTE PTR [r15+r12*1],al
   4a959:	add    r12,0x1
   4a95d:	movzx  eax,BYTE PTR [rdx+r12*1]
   4a962:	test   al,al
   4a964:	jne    4a950 <quotearg_buffer_restyled+0xf80>
   4a966:	jmp    49b15 <quotearg_buffer_restyled+0x145>
   4a96b:	mov    rdi,rbp
   4a96e:	mov    r11,rbx
   4a971:	movzx  edx,BYTE PTR [rsp+0x10]
   4a976:	mov    rbx,QWORD PTR [rsp+0x40]
   4a97b:	movzx  r8d,BYTE PTR [rsp+0x85]
   4a984:	movzx  ebp,BYTE PTR [rsp+0x86]
   4a98c:	xor    r13d,r13d
   4a98f:	mov    r12,QWORD PTR [rsp+0x88]
   4a997:	mov    r10d,DWORD PTR [rsp+0x80]
   4a99f:	movzx  r9d,BYTE PTR [rsp+0x87]
   4a9a8:	jmp    4a658 <quotearg_buffer_restyled+0xc88>
   4a9ad:	movzx  ebp,BYTE PTR [rdi+rax*1]
   4a9b1:	lea    edx,[rbp-0x21]
   4a9b4:	cmp    dl,0x1d
   4a9b7:	ja     4a0f0 <quotearg_buffer_restyled+0x720>
   4a9bd:	lea    rdi,[rip+0x2529c]        # 6fc60 <is_basic_table+0x6a0>
   4a9c4:	movzx  edx,dl
   4a9c7:	movsxd rdx,DWORD PTR [rdi+rdx*4]
   4a9cb:	add    rdx,rdi
   4a9ce:	notrack jmp rdx
   4a9d1:	cmp    BYTE PTR [rsp+0x63],0x0
   4a9d6:	jne    4a04e <quotearg_buffer_restyled+0x67e>
   4a9dc:	cmp    r14,r12
   4a9df:	jbe    4a9e6 <quotearg_buffer_restyled+0x1016>
   4a9e1:	mov    BYTE PTR [r15+r12*1],0x3f
   4a9e6:	lea    rdx,[r12+0x1]
   4a9eb:	cmp    r14,rdx
   4a9ee:	jbe    4a9f6 <quotearg_buffer_restyled+0x1026>
   4a9f0:	mov    BYTE PTR [r15+r12*1+0x1],0x22
   4a9f6:	lea    rdx,[r12+0x2]
   4a9fb:	cmp    r14,rdx
   4a9fe:	jbe    4aa06 <quotearg_buffer_restyled+0x1036>
   4aa00:	mov    BYTE PTR [r15+r12*1+0x2],0x22
   4aa06:	lea    rdx,[r12+0x3]
   4aa0b:	cmp    r14,rdx
   4aa0e:	jbe    4aa16 <quotearg_buffer_restyled+0x1046>
   4aa10:	mov    BYTE PTR [r15+r12*1+0x3],0x3f
   4aa16:	add    r12,0x4
   4aa1a:	xor    edx,edx
   4aa1c:	xor    r13d,r13d
   4aa1f:	mov    rbx,rax
   4aa22:	jmp    4a848 <quotearg_buffer_restyled+0xe78>
   4aa27:	mov    rdi,rbp
   4aa2a:	mov    r11,rbx
   4aa2d:	mov    rcx,QWORD PTR [rsp+0x18]
   4aa32:	mov    rbx,QWORD PTR [rsp+0x40]
   4aa37:	movzx  r8d,BYTE PTR [rsp+0x85]
   4aa40:	mov    rax,r13
   4aa43:	mov    rdx,rdi
   4aa46:	movzx  ebp,BYTE PTR [rsp+0x86]
   4aa4e:	mov    r12,QWORD PTR [rsp+0x88]
   4aa56:	mov    r10d,DWORD PTR [rsp+0x80]
   4aa5e:	movzx  r9d,BYTE PTR [rsp+0x87]
   4aa67:	cmp    r13,r11
   4aa6a:	jb     4aa7d <quotearg_buffer_restyled+0x10ad>
   4aa6c:	jmp    4aa86 <quotearg_buffer_restyled+0x10b6>
   4aa6e:	xchg   ax,ax
   4aa70:	add    rdx,0x1
   4aa74:	lea    rax,[rbx+rdx*1]
   4aa78:	cmp    r11,rax
   4aa7b:	jbe    4aa83 <quotearg_buffer_restyled+0x10b3>
   4aa7d:	cmp    BYTE PTR [rcx+rax*1],0x0
   4aa81:	jne    4aa70 <quotearg_buffer_restyled+0x10a0>
   4aa83:	mov    rdi,rdx
   4aa86:	movzx  edx,BYTE PTR [rsp+0x10]
   4aa8b:	xor    r13d,r13d
   4aa8e:	jmp    4a658 <quotearg_buffer_restyled+0xc88>
   4aa93:	lea    rax,[rip+0x1cb4c]        # 675e6 <primes.6089+0x1506>
   4aa9a:	xor    r13d,r13d
   4aa9d:	xor    r12d,r12d
   4aaa0:	mov    BYTE PTR [rsp+0x8],0x1
   4aaa5:	mov    BYTE PTR [rsp+0x84],0x0
   4aaad:	mov    QWORD PTR [rsp+0x58],0x0
   4aab6:	mov    BYTE PTR [rsp+0x63],0x1
   4aabb:	mov    BYTE PTR [rsp+0x10],0x1
   4aac0:	mov    QWORD PTR [rsp+0x20],0x1
   4aac9:	mov    QWORD PTR [rsp+0x50],rax
   4aace:	jmp    49b60 <quotearg_buffer_restyled+0x190>
   4aad3:	mov    edx,eax
   4aad5:	mov    rax,QWORD PTR [rsp+0x50]
   4aada:	test   rax,rax
   4aadd:	je     4ab03 <quotearg_buffer_restyled+0x1133>
   4aadf:	test   dl,dl
   4aae1:	je     4ab03 <quotearg_buffer_restyled+0x1133>
   4aae3:	movzx  edx,BYTE PTR [rax]
   4aae6:	test   dl,dl
   4aae8:	je     4ab03 <quotearg_buffer_restyled+0x1133>
   4aaea:	sub    rax,r12
   4aaed:	cmp    r14,r12
   4aaf0:	jbe    4aaf6 <quotearg_buffer_restyled+0x1126>
   4aaf2:	mov    BYTE PTR [r15+r12*1],dl
   4aaf6:	add    r12,0x1
   4aafa:	movzx  edx,BYTE PTR [rax+r12*1]
   4aaff:	test   dl,dl
   4ab01:	jne    4aaed <quotearg_buffer_restyled+0x111d>
   4ab03:	cmp    r14,r12
   4ab06:	jbe    4a088 <quotearg_buffer_restyled+0x6b8>
   4ab0c:	mov    BYTE PTR [r15+r12*1],0x0
   4ab11:	jmp    4a088 <quotearg_buffer_restyled+0x6b8>
   4ab16:	mov    esi,r10d
   4ab19:	mov    QWORD PTR [rsp+0x10],r11
   4ab1e:	mov    DWORD PTR [rsp+0x8],r10d
   4ab23:	call   498f0 <gettext_quote.part.0>
   4ab28:	mov    r11,QWORD PTR [rsp+0x10]
   4ab2d:	mov    r10d,DWORD PTR [rsp+0x8]
   4ab32:	mov    QWORD PTR [rsp+0x70],rax
   4ab37:	jmp    49b0a <quotearg_buffer_restyled+0x13a>
   4ab3c:	mov    esi,r10d
   4ab3f:	mov    QWORD PTR [rsp+0x10],r11
   4ab44:	mov    DWORD PTR [rsp+0x8],r10d
   4ab49:	call   498f0 <gettext_quote.part.0>
   4ab4e:	mov    r11,QWORD PTR [rsp+0x10]
   4ab53:	mov    r10d,DWORD PTR [rsp+0x8]
   4ab58:	mov    QWORD PTR [rsp+0x78],rax
   4ab5d:	jmp    49ac6 <quotearg_buffer_restyled+0xf6>
   4ab62:	cmp    r10d,0x2
   4ab66:	sete   BYTE PTR [rsp+0x10]
   4ab6b:	jmp    4a040 <quotearg_buffer_restyled+0x670>
   4ab70:	movzx  edx,BYTE PTR [rsp+0x84]
   4ab78:	jmp    4aad5 <quotearg_buffer_restyled+0x1105>
   4ab7d:	sub    rsp,0x8
   4ab81:	mov    r8d,0x5
   4ab87:	mov    rcx,r11
   4ab8a:	mov    rdi,r15
   4ab8d:	push   QWORD PTR [rsp+0x78]
   4ab91:	push   QWORD PTR [rsp+0x88]
   4ab98:	push   QWORD PTR [rsp+0x40]
   4ab9c:	mov    r9d,DWORD PTR [rsp+0x84]
   4aba4:	mov    rdx,QWORD PTR [rsp+0x38]
   4aba9:	mov    rsi,QWORD PTR [rsp+0x78]
   4abae:	call   499d0 <quotearg_buffer_restyled>
   4abb3:	add    rsp,0x20
   4abb7:	mov    r12,rax
   4abba:	jmp    4a088 <quotearg_buffer_restyled+0x6b8>
   4abbf:	mov    rdx,r14
   4abc2:	mov    r14,QWORD PTR [rsp+0x58]
   4abc7:	jmp    4a4a2 <quotearg_buffer_restyled+0xad2>
   4abcc:	call   c7b0 <__stack_chk_fail@plt>
   4abd1:	mov    QWORD PTR [rsp+0x58],r14
   4abd6:	xor    edx,edx
   4abd8:	xor    r13d,r13d
   4abdb:	xor    eax,eax
   4abdd:	mov    BYTE PTR [rsp+0x8],0x1
   4abe2:	jmp    4a466 <quotearg_buffer_restyled+0xa96>
   4abe7:	mov    ebp,edx
   4abe9:	jmp    4a190 <quotearg_buffer_restyled+0x7c0>
   4abee:	lea    rax,[rip+0x249fa]        # 6f5ef <is_basic_table+0x2f>
   4abf5:	xor    r13d,r13d
   4abf8:	xor    r12d,r12d
   4abfb:	mov    BYTE PTR [rsp+0x8],0x1
   4ac00:	mov    BYTE PTR [rsp+0x84],0x0
   4ac08:	mov    QWORD PTR [rsp+0x58],0x0
   4ac11:	mov    BYTE PTR [rsp+0x63],0x1
   4ac16:	mov    BYTE PTR [rsp+0x10],0x0
   4ac1b:	mov    QWORD PTR [rsp+0x20],0x1
   4ac24:	mov    QWORD PTR [rsp+0x50],rax
   4ac29:	jmp    49b60 <quotearg_buffer_restyled+0x190>
   4ac2e:	xchg   ax,ax

000000000004ac30 <quotearg_n_options>:
   4ac30:	push   r15
   4ac32:	push   r14
   4ac34:	push   r13
   4ac36:	mov    r13,rdx
   4ac39:	push   r12
   4ac3b:	mov    r12,rsi
   4ac3e:	push   rbp
   4ac3f:	mov    rbp,rcx
   4ac42:	push   rbx
   4ac43:	movsxd rbx,edi
   4ac46:	sub    rsp,0x28
   4ac4a:	call   c740 <__errno_location@plt>
   4ac4f:	mov    r15,QWORD PTR [rip+0x3880a]        # 83460 <slotvec>
   4ac56:	mov    QWORD PTR [rsp],rax
   4ac5a:	mov    eax,DWORD PTR [rax]
   4ac5c:	mov    DWORD PTR [rsp+0xc],eax
   4ac60:	test   ebx,ebx
   4ac62:	js     cca3 <quotearg_n_options.cold>
   4ac68:	cmp    DWORD PTR [rip+0x387ea],ebx        # 83458 <nslots>
   4ac6e:	jg     4acd1 <quotearg_n_options+0xa1>
   4ac70:	cmp    ebx,0x7fffffff
   4ac76:	je     4adc9 <quotearg_n_options+0x199>
   4ac7c:	lea    r14d,[rbx+0x1]
   4ac80:	lea    rax,[rip+0x387e9]        # 83470 <slotvec0>
   4ac87:	movsxd rsi,r14d
   4ac8a:	shl    rsi,0x4
   4ac8e:	cmp    r15,rax
   4ac91:	je     4ada8 <quotearg_n_options+0x178>
   4ac97:	mov    rdi,r15
   4ac9a:	call   4b870 <xrealloc>
   4ac9f:	mov    QWORD PTR [rip+0x387ba],rax        # 83460 <slotvec>
   4aca6:	mov    r15,rax
   4aca9:	movsxd rdi,DWORD PTR [rip+0x387a8]        # 83458 <nslots>
   4acb0:	mov    edx,r14d
   4acb3:	xor    esi,esi
   4acb5:	sub    edx,edi
   4acb7:	shl    rdi,0x4
   4acbb:	movsxd rdx,edx
   4acbe:	add    rdi,r15
   4acc1:	shl    rdx,0x4
   4acc5:	call   bed0 <memset@plt>
   4acca:	mov    DWORD PTR [rip+0x38787],r14d        # 83458 <nslots>
   4acd1:	lea    rax,[rbp+0x8]
   4acd5:	shl    rbx,0x4
   4acd9:	sub    rsp,0x8
   4acdd:	mov    r14d,DWORD PTR [rbp+0x4]
   4ace1:	add    rbx,r15
   4ace4:	mov    QWORD PTR [rsp+0x20],rax
   4ace9:	mov    r8d,DWORD PTR [rbp+0x0]
   4aced:	mov    rcx,r13
   4acf0:	mov    rsi,QWORD PTR [rbx]
   4acf3:	mov    r15,QWORD PTR [rbx+0x8]
   4acf7:	push   QWORD PTR [rbp+0x30]
   4acfa:	or     r14d,0x1
   4acfe:	push   QWORD PTR [rbp+0x28]
   4ad01:	mov    r9d,r14d
   4ad04:	mov    rdx,r12
   4ad07:	push   rax
   4ad08:	mov    rdi,r15
   4ad0b:	mov    QWORD PTR [rsp+0x30],rsi
   4ad10:	call   499d0 <quotearg_buffer_restyled>
   4ad15:	mov    rsi,QWORD PTR [rsp+0x30]
   4ad1a:	add    rsp,0x20
   4ad1e:	cmp    rsi,rax
   4ad21:	ja     4ad88 <quotearg_n_options+0x158>
   4ad23:	lea    rsi,[rax+0x1]
   4ad27:	lea    rax,[rip+0x3f1b2]        # 89ee0 <slot0>
   4ad2e:	mov    QWORD PTR [rbx],rsi
   4ad31:	cmp    r15,rax
   4ad34:	je     4ad48 <quotearg_n_options+0x118>
   4ad36:	mov    rdi,r15
   4ad39:	mov    QWORD PTR [rsp+0x10],rsi
   4ad3e:	call   4bdc0 <rpl_free>
   4ad43:	mov    rsi,QWORD PTR [rsp+0x10]
   4ad48:	mov    rdi,rsi
   4ad4b:	mov    QWORD PTR [rsp+0x10],rsi
   4ad50:	call   4b850 <xmalloc>
   4ad55:	sub    rsp,0x8
   4ad59:	mov    r8d,DWORD PTR [rbp+0x0]
   4ad5d:	mov    r9d,r14d
   4ad60:	mov    QWORD PTR [rbx+0x8],rax
   4ad64:	mov    rcx,r13
   4ad67:	mov    rdx,r12
   4ad6a:	mov    rdi,rax
   4ad6d:	push   QWORD PTR [rbp+0x30]
   4ad70:	mov    r15,rax
   4ad73:	push   QWORD PTR [rbp+0x28]
   4ad76:	push   QWORD PTR [rsp+0x30]
   4ad7a:	mov    rsi,QWORD PTR [rsp+0x30]
   4ad7f:	call   499d0 <quotearg_buffer_restyled>
   4ad84:	add    rsp,0x20
   4ad88:	mov    rax,QWORD PTR [rsp]
   4ad8c:	mov    ecx,DWORD PTR [rsp+0xc]
   4ad90:	mov    DWORD PTR [rax],ecx
   4ad92:	add    rsp,0x28
   4ad96:	mov    rax,r15
   4ad99:	pop    rbx
   4ad9a:	pop    rbp
   4ad9b:	pop    r12
   4ad9d:	pop    r13
   4ad9f:	pop    r14
   4ada1:	pop    r15
   4ada3:	ret    
   4ada4:	nop    DWORD PTR [rax+0x0]
   4ada8:	xor    edi,edi
   4adaa:	call   4b870 <xrealloc>
   4adaf:	movdqa xmm0,XMMWORD PTR [rip+0x386b9]        # 83470 <slotvec0>
   4adb7:	mov    QWORD PTR [rip+0x386a2],rax        # 83460 <slotvec>
   4adbe:	mov    r15,rax
   4adc1:	movups XMMWORD PTR [rax],xmm0
   4adc4:	jmp    4aca9 <quotearg_n_options+0x79>
   4adc9:	call   4ba70 <xalloc_die>
   4adce:	xchg   ax,ax

000000000004add0 <clone_quoting_options>:
   4add0:	endbr64 
   4add4:	push   r12
   4add6:	push   rbp
   4add7:	mov    rbp,rdi
   4adda:	push   rbx
   4addb:	call   c740 <__errno_location@plt>
   4ade0:	test   rbp,rbp
   4ade3:	mov    esi,0x38
   4ade8:	mov    r12d,DWORD PTR [rax]
   4adeb:	mov    rbx,rax
   4adee:	lea    rax,[rip+0x3f1eb]        # 89fe0 <default_quoting_options>
   4adf5:	cmove  rbp,rax
   4adf9:	mov    rdi,rbp
   4adfc:	call   4ba10 <xmemdup>
   4ae01:	mov    DWORD PTR [rbx],r12d
   4ae04:	pop    rbx
   4ae05:	pop    rbp
   4ae06:	pop    r12
   4ae08:	ret    
   4ae09:	nop    DWORD PTR [rax+0x0]

000000000004ae10 <get_quoting_style>:
   4ae10:	endbr64 
   4ae14:	test   rdi,rdi
   4ae17:	lea    rax,[rip+0x3f1c2]        # 89fe0 <default_quoting_options>
   4ae1e:	cmove  rdi,rax
   4ae22:	mov    eax,DWORD PTR [rdi]
   4ae24:	ret    
   4ae25:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000004ae30 <set_quoting_style>:
   4ae30:	endbr64 
   4ae34:	test   rdi,rdi
   4ae37:	lea    rax,[rip+0x3f1a2]        # 89fe0 <default_quoting_options>
   4ae3e:	cmove  rdi,rax
   4ae42:	mov    DWORD PTR [rdi],esi
   4ae44:	ret    
   4ae45:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000004ae50 <set_char_quoting>:
   4ae50:	endbr64 
   4ae54:	test   rdi,rdi
   4ae57:	lea    rax,[rip+0x3f182]        # 89fe0 <default_quoting_options>
   4ae5e:	mov    ecx,esi
   4ae60:	cmove  rdi,rax
   4ae64:	mov    eax,esi
   4ae66:	and    ecx,0x1f
   4ae69:	shr    al,0x5
   4ae6c:	movzx  eax,al
   4ae6f:	lea    rsi,[rdi+rax*4+0x8]
   4ae74:	mov    edi,DWORD PTR [rsi]
   4ae76:	mov    eax,edi
   4ae78:	shr    eax,cl
   4ae7a:	xor    edx,eax
   4ae7c:	and    eax,0x1
   4ae7f:	and    edx,0x1
   4ae82:	shl    edx,cl
   4ae84:	xor    edx,edi
   4ae86:	mov    DWORD PTR [rsi],edx
   4ae88:	ret    
   4ae89:	nop    DWORD PTR [rax+0x0]

000000000004ae90 <set_quoting_flags>:
   4ae90:	endbr64 
   4ae94:	test   rdi,rdi
   4ae97:	lea    rax,[rip+0x3f142]        # 89fe0 <default_quoting_options>
   4ae9e:	cmove  rdi,rax
   4aea2:	mov    eax,DWORD PTR [rdi+0x4]
   4aea5:	mov    DWORD PTR [rdi+0x4],esi
   4aea8:	ret    
   4aea9:	nop    DWORD PTR [rax+0x0]

000000000004aeb0 <set_custom_quoting>:
   4aeb0:	endbr64 
   4aeb4:	sub    rsp,0x8
   4aeb8:	lea    rax,[rip+0x3f121]        # 89fe0 <default_quoting_options>
   4aebf:	test   rdi,rdi
   4aec2:	cmove  rdi,rax
   4aec6:	mov    DWORD PTR [rdi],0xa
   4aecc:	test   rsi,rsi
   4aecf:	je     cca8 <set_custom_quoting.cold>
   4aed5:	test   rdx,rdx
   4aed8:	je     cca8 <set_custom_quoting.cold>
   4aede:	mov    QWORD PTR [rdi+0x28],rsi
   4aee2:	mov    QWORD PTR [rdi+0x30],rdx
   4aee6:	add    rsp,0x8
   4aeea:	ret    
   4aeeb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004aef0 <quotearg_buffer>:
   4aef0:	endbr64 
   4aef4:	push   r15
   4aef6:	lea    rax,[rip+0x3f0e3]        # 89fe0 <default_quoting_options>
   4aefd:	push   r14
   4aeff:	mov    r14,rdx
   4af02:	push   r13
   4af04:	mov    r13,rsi
   4af07:	push   r12
   4af09:	mov    r12,rdi
   4af0c:	push   rbp
   4af0d:	push   rbx
   4af0e:	mov    rbx,r8
   4af11:	sub    rsp,0x18
   4af15:	test   r8,r8
   4af18:	cmove  rbx,rax
   4af1c:	mov    QWORD PTR [rsp+0x8],rcx
   4af21:	call   c740 <__errno_location@plt>
   4af26:	sub    rsp,0x8
   4af2a:	mov    rdx,r14
   4af2d:	mov    rsi,r13
   4af30:	mov    r15d,DWORD PTR [rax]
   4af33:	mov    rbp,rax
   4af36:	lea    rax,[rbx+0x8]
   4af3a:	mov    r9d,DWORD PTR [rbx+0x4]
   4af3e:	push   QWORD PTR [rbx+0x30]
   4af41:	mov    r8d,DWORD PTR [rbx]
   4af44:	mov    rdi,r12
   4af47:	push   QWORD PTR [rbx+0x28]
   4af4a:	push   rax
   4af4b:	mov    rcx,QWORD PTR [rsp+0x28]
   4af50:	call   499d0 <quotearg_buffer_restyled>
   4af55:	mov    DWORD PTR [rbp+0x0],r15d
   4af59:	add    rsp,0x38
   4af5d:	pop    rbx
   4af5e:	pop    rbp
   4af5f:	pop    r12
   4af61:	pop    r13
   4af63:	pop    r14
   4af65:	pop    r15
   4af67:	ret    
   4af68:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004af70 <quotearg_alloc_mem>:
   4af70:	endbr64 
   4af74:	push   r15
   4af76:	lea    rax,[rip+0x3f063]        # 89fe0 <default_quoting_options>
   4af7d:	push   r14
   4af7f:	mov    r14,rsi
   4af82:	push   r13
   4af84:	mov    r13,rdi
   4af87:	push   r12
   4af89:	push   rbp
   4af8a:	mov    rbp,rdx
   4af8d:	push   rbx
   4af8e:	mov    rbx,rcx
   4af91:	sub    rsp,0x28
   4af95:	test   rcx,rcx
   4af98:	cmove  rbx,rax
   4af9c:	call   c740 <__errno_location@plt>
   4afa1:	xor    r9d,r9d
   4afa4:	test   rbp,rbp
   4afa7:	mov    rcx,r14
   4afaa:	mov    r12,rax
   4afad:	mov    eax,DWORD PTR [rax]
   4afaf:	sete   r9b
   4afb3:	lea    r10,[rbx+0x8]
   4afb7:	sub    rsp,0x8
   4afbb:	or     r9d,DWORD PTR [rbx+0x4]
   4afbf:	mov    r8d,DWORD PTR [rbx]
   4afc2:	mov    rdx,r13
   4afc5:	mov    DWORD PTR [rsp+0x18],eax
   4afc9:	xor    esi,esi
   4afcb:	xor    edi,edi
   4afcd:	push   QWORD PTR [rbx+0x30]
   4afd0:	push   QWORD PTR [rbx+0x28]
   4afd3:	push   r10
   4afd5:	mov    QWORD PTR [rsp+0x38],r10
   4afda:	mov    DWORD PTR [rsp+0x34],r9d
   4afdf:	call   499d0 <quotearg_buffer_restyled>
   4afe4:	add    rsp,0x20
   4afe8:	lea    rsi,[rax+0x1]
   4afec:	mov    r15,rax
   4afef:	mov    rdi,rsi
   4aff2:	mov    QWORD PTR [rsp+0x8],rsi
   4aff7:	call   4b850 <xmalloc>
   4affc:	sub    rsp,0x8
   4b000:	push   QWORD PTR [rbx+0x30]
   4b003:	mov    r8d,DWORD PTR [rbx]
   4b006:	push   QWORD PTR [rbx+0x28]
   4b009:	mov    rcx,r14
   4b00c:	mov    rdx,r13
   4b00f:	mov    rdi,rax
   4b012:	mov    r10,QWORD PTR [rsp+0x30]
   4b017:	push   r10
   4b019:	mov    rsi,QWORD PTR [rsp+0x28]
   4b01e:	mov    r9d,DWORD PTR [rsp+0x34]
   4b023:	mov    QWORD PTR [rsp+0x28],rax
   4b028:	call   499d0 <quotearg_buffer_restyled>
   4b02d:	mov    eax,DWORD PTR [rsp+0x30]
   4b031:	add    rsp,0x20
   4b035:	test   rbp,rbp
   4b038:	mov    r11,QWORD PTR [rsp+0x8]
   4b03d:	mov    DWORD PTR [r12],eax
   4b041:	je     4b047 <quotearg_alloc_mem+0xd7>
   4b043:	mov    QWORD PTR [rbp+0x0],r15
   4b047:	add    rsp,0x28
   4b04b:	mov    rax,r11
   4b04e:	pop    rbx
   4b04f:	pop    rbp
   4b050:	pop    r12
   4b052:	pop    r13
   4b054:	pop    r14
   4b056:	pop    r15
   4b058:	ret    
   4b059:	nop    DWORD PTR [rax+0x0]

000000000004b060 <quotearg_alloc>:
   4b060:	endbr64 
   4b064:	mov    rcx,rdx
   4b067:	xor    edx,edx
   4b069:	jmp    4af70 <quotearg_alloc_mem>
   4b06e:	xchg   ax,ax

000000000004b070 <quotearg_free>:
   4b070:	endbr64 
   4b074:	cmp    DWORD PTR [rip+0x383dd],0x1        # 83458 <nslots>
   4b07b:	push   r12
   4b07d:	mov    r12,QWORD PTR [rip+0x383dc]        # 83460 <slotvec>
   4b084:	push   rbp
   4b085:	push   rbx
   4b086:	jle    4b0b0 <quotearg_free+0x40>
   4b088:	lea    rbp,[r12+0x18]
   4b08d:	mov    ebx,0x1
   4b092:	nop    WORD PTR [rax+rax*1+0x0]
   4b098:	mov    rdi,QWORD PTR [rbp+0x0]
   4b09c:	add    ebx,0x1
   4b09f:	add    rbp,0x10
   4b0a3:	call   4bdc0 <rpl_free>
   4b0a8:	cmp    DWORD PTR [rip+0x383aa],ebx        # 83458 <nslots>
   4b0ae:	jg     4b098 <quotearg_free+0x28>
   4b0b0:	mov    rdi,QWORD PTR [r12+0x8]
   4b0b5:	lea    rbx,[rip+0x3ee24]        # 89ee0 <slot0>
   4b0bc:	cmp    rdi,rbx
   4b0bf:	je     4b0d8 <quotearg_free+0x68>
   4b0c1:	call   4bdc0 <rpl_free>
   4b0c6:	mov    QWORD PTR [rip+0x383ab],rbx        # 83478 <slotvec0+0x8>
   4b0cd:	mov    QWORD PTR [rip+0x38398],0x100        # 83470 <slotvec0>
   4b0d8:	lea    rbx,[rip+0x38391]        # 83470 <slotvec0>
   4b0df:	cmp    r12,rbx
   4b0e2:	je     4b0f3 <quotearg_free+0x83>
   4b0e4:	mov    rdi,r12
   4b0e7:	call   4bdc0 <rpl_free>
   4b0ec:	mov    QWORD PTR [rip+0x3836d],rbx        # 83460 <slotvec>
   4b0f3:	mov    DWORD PTR [rip+0x3835b],0x1        # 83458 <nslots>
   4b0fd:	pop    rbx
   4b0fe:	pop    rbp
   4b0ff:	pop    r12
   4b101:	ret    
   4b102:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4b10d:	nop    DWORD PTR [rax]

000000000004b110 <quotearg_n>:
   4b110:	endbr64 
   4b114:	lea    rcx,[rip+0x3eec5]        # 89fe0 <default_quoting_options>
   4b11b:	mov    rdx,0xffffffffffffffff
   4b122:	jmp    4ac30 <quotearg_n_options>
   4b127:	nop    WORD PTR [rax+rax*1+0x0]

000000000004b130 <quotearg_n_mem>:
   4b130:	endbr64 
   4b134:	lea    rcx,[rip+0x3eea5]        # 89fe0 <default_quoting_options>
   4b13b:	jmp    4ac30 <quotearg_n_options>

000000000004b140 <quotearg>:
   4b140:	endbr64 
   4b144:	mov    rsi,rdi
   4b147:	lea    rcx,[rip+0x3ee92]        # 89fe0 <default_quoting_options>
   4b14e:	mov    rdx,0xffffffffffffffff
   4b155:	xor    edi,edi
   4b157:	jmp    4ac30 <quotearg_n_options>
   4b15c:	nop    DWORD PTR [rax+0x0]

000000000004b160 <quotearg_mem>:
   4b160:	endbr64 
   4b164:	mov    rdx,rsi
   4b167:	lea    rcx,[rip+0x3ee72]        # 89fe0 <default_quoting_options>
   4b16e:	mov    rsi,rdi
   4b171:	xor    edi,edi
   4b173:	jmp    4ac30 <quotearg_n_options>
   4b178:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004b180 <quotearg_n_style>:
   4b180:	endbr64 
   4b184:	sub    rsp,0x48
   4b188:	mov    rax,QWORD PTR fs:0x28
   4b191:	mov    QWORD PTR [rsp+0x38],rax
   4b196:	xor    eax,eax
   4b198:	cmp    esi,0xa
   4b19b:	je     ccad <quotearg_n_style.cold>
   4b1a1:	mov    r8,rdx
   4b1a4:	mov    DWORD PTR [rsp],esi
   4b1a7:	mov    rcx,rsp
   4b1aa:	mov    rdx,0xffffffffffffffff
   4b1b1:	mov    rsi,r8
   4b1b4:	mov    DWORD PTR [rsp+0x4],0x0
   4b1bc:	mov    QWORD PTR [rsp+0x8],0x0
   4b1c5:	mov    QWORD PTR [rsp+0x10],0x0
   4b1ce:	mov    QWORD PTR [rsp+0x18],0x0
   4b1d7:	mov    QWORD PTR [rsp+0x20],0x0
   4b1e0:	mov    QWORD PTR [rsp+0x28],0x0
   4b1e9:	mov    QWORD PTR [rsp+0x30],0x0
   4b1f2:	call   4ac30 <quotearg_n_options>
   4b1f7:	mov    rcx,QWORD PTR [rsp+0x38]
   4b1fc:	xor    rcx,QWORD PTR fs:0x28
   4b205:	jne    4b20c <quotearg_n_style+0x8c>
   4b207:	add    rsp,0x48
   4b20b:	ret    
   4b20c:	call   c7b0 <__stack_chk_fail@plt>
   4b211:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4b21c:	nop    DWORD PTR [rax+0x0]

000000000004b220 <quotearg_n_style_mem>:
   4b220:	endbr64 
   4b224:	sub    rsp,0x48
   4b228:	mov    rax,QWORD PTR fs:0x28
   4b231:	mov    QWORD PTR [rsp+0x38],rax
   4b236:	xor    eax,eax
   4b238:	cmp    esi,0xa
   4b23b:	je     ccb2 <quotearg_n_style_mem.cold>
   4b241:	mov    r8,rdx
   4b244:	mov    DWORD PTR [rsp],esi
   4b247:	mov    rdx,rcx
   4b24a:	mov    rcx,rsp
   4b24d:	mov    rsi,r8
   4b250:	mov    DWORD PTR [rsp+0x4],0x0
   4b258:	mov    QWORD PTR [rsp+0x8],0x0
   4b261:	mov    QWORD PTR [rsp+0x10],0x0
   4b26a:	mov    QWORD PTR [rsp+0x18],0x0
   4b273:	mov    QWORD PTR [rsp+0x20],0x0
   4b27c:	mov    QWORD PTR [rsp+0x28],0x0
   4b285:	mov    QWORD PTR [rsp+0x30],0x0
   4b28e:	call   4ac30 <quotearg_n_options>
   4b293:	mov    rdx,QWORD PTR [rsp+0x38]
   4b298:	xor    rdx,QWORD PTR fs:0x28
   4b2a1:	jne    4b2a8 <quotearg_n_style_mem+0x88>
   4b2a3:	add    rsp,0x48
   4b2a7:	ret    
   4b2a8:	call   c7b0 <__stack_chk_fail@plt>
   4b2ad:	nop    DWORD PTR [rax]

000000000004b2b0 <quotearg_style>:
   4b2b0:	endbr64 
   4b2b4:	mov    rdx,rsi
   4b2b7:	mov    esi,edi
   4b2b9:	xor    edi,edi
   4b2bb:	jmp    4b180 <quotearg_n_style>

000000000004b2c0 <quotearg_style_mem>:
   4b2c0:	endbr64 
   4b2c4:	mov    rcx,rdx
   4b2c7:	mov    rdx,rsi
   4b2ca:	mov    esi,edi
   4b2cc:	xor    edi,edi
   4b2ce:	jmp    4b220 <quotearg_n_style_mem>
   4b2d3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4b2de:	xchg   ax,ax

000000000004b2e0 <quotearg_char_mem>:
   4b2e0:	endbr64 
   4b2e4:	sub    rsp,0x48
   4b2e8:	movdqa xmm0,XMMWORD PTR [rip+0x3ecf0]        # 89fe0 <default_quoting_options>
   4b2f0:	movdqa xmm1,XMMWORD PTR [rip+0x3ecf8]        # 89ff0 <default_quoting_options+0x10>
   4b2f8:	mov    ecx,edx
   4b2fa:	mov    rax,QWORD PTR fs:0x28
   4b303:	mov    QWORD PTR [rsp+0x38],rax
   4b308:	xor    eax,eax
   4b30a:	mov    rax,QWORD PTR [rip+0x3ecff]        # 8a010 <default_quoting_options+0x30>
   4b311:	mov    r9,rsi
   4b314:	and    ecx,0x1f
   4b317:	movdqa xmm2,XMMWORD PTR [rip+0x3ece1]        # 8a000 <default_quoting_options+0x20>
   4b31f:	movaps XMMWORD PTR [rsp],xmm0
   4b323:	mov    r10,rsp
   4b326:	mov    QWORD PTR [rsp+0x30],rax
   4b32b:	mov    eax,edx
   4b32d:	shr    al,0x5
   4b330:	movaps XMMWORD PTR [rsp+0x10],xmm1
   4b335:	movzx  eax,al
   4b338:	movaps XMMWORD PTR [rsp+0x20],xmm2
   4b33d:	lea    rdx,[rsp+rax*4+0x8]
   4b342:	mov    esi,DWORD PTR [rdx]
   4b344:	mov    eax,esi
   4b346:	shr    eax,cl
   4b348:	not    eax
   4b34a:	and    eax,0x1
   4b34d:	shl    eax,cl
   4b34f:	mov    rcx,r10
   4b352:	xor    eax,esi
   4b354:	mov    rsi,rdi
   4b357:	xor    edi,edi
   4b359:	mov    DWORD PTR [rdx],eax
   4b35b:	mov    rdx,r9
   4b35e:	call   4ac30 <quotearg_n_options>
   4b363:	mov    rdi,QWORD PTR [rsp+0x38]
   4b368:	xor    rdi,QWORD PTR fs:0x28
   4b371:	jne    4b378 <quotearg_char_mem+0x98>
   4b373:	add    rsp,0x48
   4b377:	ret    
   4b378:	call   c7b0 <__stack_chk_fail@plt>
   4b37d:	nop    DWORD PTR [rax]

000000000004b380 <quotearg_char>:
   4b380:	endbr64 
   4b384:	movsx  edx,sil
   4b388:	mov    rsi,0xffffffffffffffff
   4b38f:	jmp    4b2e0 <quotearg_char_mem>
   4b394:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4b39f:	nop

000000000004b3a0 <quotearg_colon>:
   4b3a0:	endbr64 
   4b3a4:	mov    edx,0x3a
   4b3a9:	mov    rsi,0xffffffffffffffff
   4b3b0:	jmp    4b2e0 <quotearg_char_mem>
   4b3b5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000004b3c0 <quotearg_colon_mem>:
   4b3c0:	endbr64 
   4b3c4:	mov    edx,0x3a
   4b3c9:	jmp    4b2e0 <quotearg_char_mem>
   4b3ce:	xchg   ax,ax

000000000004b3d0 <quotearg_n_style_colon>:
   4b3d0:	endbr64 
   4b3d4:	sub    rsp,0x48
   4b3d8:	mov    rax,QWORD PTR fs:0x28
   4b3e1:	mov    QWORD PTR [rsp+0x38],rax
   4b3e6:	xor    eax,eax
   4b3e8:	cmp    esi,0xa
   4b3eb:	je     ccb7 <quotearg_n_style_colon.cold>
   4b3f1:	mov    r8,rdx
   4b3f4:	mov    DWORD PTR [rsp],esi
   4b3f7:	mov    rcx,rsp
   4b3fa:	mov    rdx,0xffffffffffffffff
   4b401:	movabs rax,0x400000000000000
   4b40b:	mov    rsi,r8
   4b40e:	mov    DWORD PTR [rsp+0x4],0x0
   4b416:	mov    QWORD PTR [rsp+0x8],rax
   4b41b:	mov    QWORD PTR [rsp+0x10],0x0
   4b424:	mov    QWORD PTR [rsp+0x18],0x0
   4b42d:	mov    QWORD PTR [rsp+0x20],0x0
   4b436:	mov    QWORD PTR [rsp+0x28],0x0
   4b43f:	mov    QWORD PTR [rsp+0x30],0x0
   4b448:	call   4ac30 <quotearg_n_options>
   4b44d:	mov    rcx,QWORD PTR [rsp+0x38]
   4b452:	xor    rcx,QWORD PTR fs:0x28
   4b45b:	jne    4b462 <quotearg_n_style_colon+0x92>
   4b45d:	add    rsp,0x48
   4b461:	ret    
   4b462:	call   c7b0 <__stack_chk_fail@plt>
   4b467:	nop    WORD PTR [rax+rax*1+0x0]

000000000004b470 <quotearg_n_custom_mem>:
   4b470:	endbr64 
   4b474:	sub    rsp,0x48
   4b478:	movdqa xmm0,XMMWORD PTR [rip+0x3eb60]        # 89fe0 <default_quoting_options>
   4b480:	movdqa xmm1,XMMWORD PTR [rip+0x3eb68]        # 89ff0 <default_quoting_options+0x10>
   4b488:	mov    rax,QWORD PTR fs:0x28
   4b491:	mov    QWORD PTR [rsp+0x38],rax
   4b496:	xor    eax,eax
   4b498:	movdqa xmm2,XMMWORD PTR [rip+0x3eb60]        # 8a000 <default_quoting_options+0x20>
   4b4a0:	mov    rax,QWORD PTR [rip+0x3eb69]        # 8a010 <default_quoting_options+0x30>
   4b4a7:	movaps XMMWORD PTR [rsp],xmm0
   4b4ab:	mov    QWORD PTR [rsp+0x30],rax
   4b4b0:	mov    DWORD PTR [rsp],0xa
   4b4b7:	movaps XMMWORD PTR [rsp+0x10],xmm1
   4b4bc:	movaps XMMWORD PTR [rsp+0x20],xmm2
   4b4c1:	test   rsi,rsi
   4b4c4:	je     ccbc <quotearg_n_custom_mem.cold>
   4b4ca:	test   rdx,rdx
   4b4cd:	je     ccbc <quotearg_n_custom_mem.cold>
   4b4d3:	mov    r9,rcx
   4b4d6:	mov    QWORD PTR [rsp+0x28],rsi
   4b4db:	mov    rcx,rsp
   4b4de:	mov    QWORD PTR [rsp+0x30],rdx
   4b4e3:	mov    rsi,r9
   4b4e6:	mov    rdx,r8
   4b4e9:	call   4ac30 <quotearg_n_options>
   4b4ee:	mov    rcx,QWORD PTR [rsp+0x38]
   4b4f3:	xor    rcx,QWORD PTR fs:0x28
   4b4fc:	jne    4b503 <quotearg_n_custom_mem+0x93>
   4b4fe:	add    rsp,0x48
   4b502:	ret    
   4b503:	call   c7b0 <__stack_chk_fail@plt>
   4b508:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004b510 <quotearg_n_custom>:
   4b510:	endbr64 
   4b514:	mov    r8,0xffffffffffffffff
   4b51b:	jmp    4b470 <quotearg_n_custom_mem>

000000000004b520 <quotearg_custom>:
   4b520:	endbr64 
   4b524:	mov    rcx,rdx
   4b527:	mov    r8,0xffffffffffffffff
   4b52e:	mov    rdx,rsi
   4b531:	mov    rsi,rdi
   4b534:	xor    edi,edi
   4b536:	jmp    4b470 <quotearg_n_custom_mem>
   4b53b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004b540 <quotearg_custom_mem>:
   4b540:	endbr64 
   4b544:	mov    r8,rcx
   4b547:	mov    rcx,rdx
   4b54a:	mov    rdx,rsi
   4b54d:	mov    rsi,rdi
   4b550:	xor    edi,edi
   4b552:	jmp    4b470 <quotearg_n_custom_mem>
   4b557:	nop    WORD PTR [rax+rax*1+0x0]

000000000004b560 <quote_n_mem>:
   4b560:	endbr64 
   4b564:	lea    rcx,[rip+0x37eb5]        # 83420 <quote_quoting_options>
   4b56b:	jmp    4ac30 <quotearg_n_options>

000000000004b570 <quote_mem>:
   4b570:	endbr64 
   4b574:	mov    rdx,rsi
   4b577:	lea    rcx,[rip+0x37ea2]        # 83420 <quote_quoting_options>
   4b57e:	mov    rsi,rdi
   4b581:	xor    edi,edi
   4b583:	jmp    4ac30 <quotearg_n_options>
   4b588:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004b590 <quote_n>:
   4b590:	endbr64 
   4b594:	lea    rcx,[rip+0x37e85]        # 83420 <quote_quoting_options>
   4b59b:	mov    rdx,0xffffffffffffffff
   4b5a2:	jmp    4ac30 <quotearg_n_options>
   4b5a7:	nop    WORD PTR [rax+rax*1+0x0]

000000000004b5b0 <quote>:
   4b5b0:	endbr64 
   4b5b4:	mov    rsi,rdi
   4b5b7:	lea    rcx,[rip+0x37e62]        # 83420 <quote_quoting_options>
   4b5be:	mov    rdx,0xffffffffffffffff
   4b5c5:	xor    edi,edi
   4b5c7:	jmp    4ac30 <quotearg_n_options>
   4b5cc:	nop    DWORD PTR [rax+0x0]

000000000004b5d0 <direxists>:
   4b5d0:	sub    rsp,0xa8
   4b5d7:	mov    rsi,rdi
   4b5da:	mov    edi,0x1
   4b5df:	mov    rax,QWORD PTR fs:0x28
   4b5e8:	mov    QWORD PTR [rsp+0x98],rax
   4b5f0:	xor    eax,eax
   4b5f2:	mov    rdx,rsp
   4b5f5:	call   c350 <__xstat@plt>
   4b5fa:	mov    r8d,eax
   4b5fd:	xor    eax,eax
   4b5ff:	test   r8d,r8d
   4b602:	jne    4b615 <direxists+0x45>
   4b604:	mov    eax,DWORD PTR [rsp+0x18]
   4b608:	and    eax,0xf000
   4b60d:	cmp    eax,0x4000
   4b612:	sete   al
   4b615:	mov    rcx,QWORD PTR [rsp+0x98]
   4b61d:	xor    rcx,QWORD PTR fs:0x28
   4b626:	jne    4b630 <direxists+0x60>
   4b628:	add    rsp,0xa8
   4b62f:	ret    
   4b630:	call   c7b0 <__stack_chk_fail@plt>
   4b635:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000004b640 <path_search>:
   4b640:	endbr64 
   4b644:	push   r15
   4b646:	push   r14
   4b648:	mov    r14,rdx
   4b64b:	push   r13
   4b64d:	push   r12
   4b64f:	push   rbp
   4b650:	mov    rbp,rdi
   4b653:	push   rbx
   4b654:	mov    ebx,r8d
   4b657:	sub    rsp,0x18
   4b65b:	mov    QWORD PTR [rsp+0x8],rsi
   4b660:	test   rcx,rcx
   4b663:	je     4b671 <path_search+0x31>
   4b665:	cmp    BYTE PTR [rcx],0x0
   4b668:	mov    r13,rcx
   4b66b:	jne    4b710 <path_search+0xd0>
   4b671:	mov    r12d,0x4
   4b677:	lea    r13,[rip+0x23224]        # 6e8a2 <CSWTCH.5+0x62>
   4b67e:	test   bl,bl
   4b680:	jne    4b72e <path_search+0xee>
   4b686:	test   r14,r14
   4b689:	je     4b778 <path_search+0x138>
   4b68f:	mov    rdi,r14
   4b692:	xor    ebx,ebx
   4b694:	call   c310 <strlen@plt>
   4b699:	mov    r15,rax
   4b69c:	xor    eax,eax
   4b69e:	test   r15,r15
   4b6a1:	jne    4b7b0 <path_search+0x170>
   4b6a7:	lea    rax,[r12+rax*1+0x7]
   4b6ac:	add    rax,r15
   4b6af:	cmp    rax,QWORD PTR [rsp+0x8]
   4b6b4:	ja     4b7c0 <path_search+0x180>
   4b6ba:	mov    rdx,r15
   4b6bd:	mov    rsi,r14
   4b6c0:	mov    rdi,rbp
   4b6c3:	xor    ebx,0x1
   4b6c6:	call   cb30 <memcpy@plt>
   4b6cb:	movzx  ecx,bl
   4b6ce:	lea    rdi,[rbp+r15*1+0x0]
   4b6d3:	mov    r9,r13
   4b6d6:	lea    rbx,[rip+0x24637]        # 6fd14 <quoting_style_vals+0x34>
   4b6dd:	mov    r8d,r12d
   4b6e0:	mov    esi,0x1
   4b6e5:	xor    eax,eax
   4b6e7:	add    rcx,rbx
   4b6ea:	mov    rdx,0xffffffffffffffff
   4b6f1:	call   c950 <__sprintf_chk@plt>
   4b6f6:	xor    eax,eax
   4b6f8:	add    rsp,0x18
   4b6fc:	pop    rbx
   4b6fd:	pop    rbp
   4b6fe:	pop    r12
   4b700:	pop    r13
   4b702:	pop    r14
   4b704:	pop    r15
   4b706:	ret    
   4b707:	nop    WORD PTR [rax+rax*1+0x0]
   4b710:	mov    rdi,rcx
   4b713:	mov    r12d,0x5
   4b719:	call   c310 <strlen@plt>
   4b71e:	cmp    rax,0x5
   4b722:	cmovbe r12,rax
   4b726:	test   bl,bl
   4b728:	je     4b686 <path_search+0x46>
   4b72e:	lea    rdi,[rip+0x245d8]        # 6fd0d <quoting_style_vals+0x2d>
   4b735:	call   c300 <secure_getenv@plt>
   4b73a:	mov    rbx,rax
   4b73d:	test   rax,rax
   4b740:	je     4b760 <path_search+0x120>
   4b742:	mov    rdi,rax
   4b745:	call   4b5d0 <direxists>
   4b74a:	test   al,al
   4b74c:	je     4b760 <path_search+0x120>
   4b74e:	mov    r14,rbx
   4b751:	jmp    4b68f <path_search+0x4f>
   4b756:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4b760:	test   r14,r14
   4b763:	je     4b778 <path_search+0x138>
   4b765:	mov    rdi,r14
   4b768:	call   4b5d0 <direxists>
   4b76d:	test   al,al
   4b76f:	jne    4b68f <path_search+0x4f>
   4b775:	nop    DWORD PTR [rax]
   4b778:	lea    rdi,[rip+0x24589]        # 6fd08 <quoting_style_vals+0x28>
   4b77f:	call   4b5d0 <direxists>
   4b784:	test   al,al
   4b786:	je     4b7d5 <path_search+0x195>
   4b788:	mov    eax,0x3
   4b78d:	mov    r15d,0x4
   4b793:	lea    r14,[rip+0x2456e]        # 6fd08 <quoting_style_vals+0x28>
   4b79a:	cmp    BYTE PTR [r14+rax*1],0x2f
   4b79f:	setne  al
   4b7a2:	setne  bl
   4b7a5:	movzx  eax,al
   4b7a8:	jmp    4b6a7 <path_search+0x67>
   4b7ad:	nop    DWORD PTR [rax]
   4b7b0:	lea    rax,[r15-0x1]
   4b7b4:	jmp    4b79a <path_search+0x15a>
   4b7b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4b7c0:	call   c740 <__errno_location@plt>
   4b7c5:	mov    DWORD PTR [rax],0x16
   4b7cb:	mov    eax,0xffffffff
   4b7d0:	jmp    4b6f8 <path_search+0xb8>
   4b7d5:	call   c740 <__errno_location@plt>
   4b7da:	mov    DWORD PTR [rax],0x2
   4b7e0:	mov    eax,0xffffffff
   4b7e5:	jmp    4b6f8 <path_search+0xb8>
   4b7ea:	nop    WORD PTR [rax+rax*1+0x0]

000000000004b7f0 <xnmalloc>:
   4b7f0:	endbr64 
   4b7f4:	mov    rax,rdi
   4b7f7:	sub    rsp,0x8
   4b7fb:	mul    rsi
   4b7fe:	mov    rdi,rax
   4b801:	seto   al
   4b804:	test   rdi,rdi
   4b807:	js     4b820 <xnmalloc+0x30>
   4b809:	movzx  eax,al
   4b80c:	test   rax,rax
   4b80f:	jne    4b820 <xnmalloc+0x30>
   4b811:	call   c0e0 <malloc@plt>
   4b816:	test   rax,rax
   4b819:	je     4b820 <xnmalloc+0x30>
   4b81b:	add    rsp,0x8
   4b81f:	ret    
   4b820:	call   4ba70 <xalloc_die>
   4b825:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000004b830 <xcharalloc>:
   4b830:	endbr64 
   4b834:	sub    rsp,0x8
   4b838:	call   c0e0 <malloc@plt>
   4b83d:	test   rax,rax
   4b840:	je     4b847 <xcharalloc+0x17>
   4b842:	add    rsp,0x8
   4b846:	ret    
   4b847:	call   4ba70 <xalloc_die>
   4b84c:	nop    DWORD PTR [rax+0x0]

000000000004b850 <xmalloc>:
   4b850:	endbr64 
   4b854:	sub    rsp,0x8
   4b858:	call   c0e0 <malloc@plt>
   4b85d:	test   rax,rax
   4b860:	je     4b867 <xmalloc+0x17>
   4b862:	add    rsp,0x8
   4b866:	ret    
   4b867:	call   4ba70 <xalloc_die>
   4b86c:	nop    DWORD PTR [rax+0x0]

000000000004b870 <xrealloc>:
   4b870:	endbr64 
   4b874:	push   rbp
   4b875:	mov    rbp,rsi
   4b878:	push   rbx
   4b879:	mov    rbx,rdi
   4b87c:	sub    rsp,0x8
   4b880:	call   ca20 <realloc@plt>
   4b885:	test   rax,rax
   4b888:	je     4b891 <xrealloc+0x21>
   4b88a:	add    rsp,0x8
   4b88e:	pop    rbx
   4b88f:	pop    rbp
   4b890:	ret    
   4b891:	test   rbp,rbp
   4b894:	jne    4b89b <xrealloc+0x2b>
   4b896:	test   rbx,rbx
   4b899:	jne    4b88a <xrealloc+0x1a>
   4b89b:	call   4ba70 <xalloc_die>

000000000004b8a0 <xnrealloc>:
   4b8a0:	endbr64 
   4b8a4:	mov    rax,rsi
   4b8a7:	mul    rdx
   4b8aa:	mov    rsi,rax
   4b8ad:	seto   al
   4b8b0:	test   rsi,rsi
   4b8b3:	js     4b8bf <xnrealloc+0x1f>
   4b8b5:	movzx  eax,al
   4b8b8:	test   rax,rax
   4b8bb:	jne    4b8bf <xnrealloc+0x1f>
   4b8bd:	jmp    4b870 <xrealloc>
   4b8bf:	push   rax
   4b8c0:	call   4ba70 <xalloc_die>
   4b8c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000004b8d0 <x2nrealloc>:
   4b8d0:	endbr64 
   4b8d4:	mov    r9,rsi
   4b8d7:	mov    r8,rdx
   4b8da:	mov    rsi,QWORD PTR [rsi]
   4b8dd:	test   rdi,rdi
   4b8e0:	je     4b910 <x2nrealloc+0x40>
   4b8e2:	movabs rax,0x5555555555555554
   4b8ec:	xor    edx,edx
   4b8ee:	div    r8
   4b8f1:	cmp    rax,rsi
   4b8f4:	jbe    4b92b <x2nrealloc+0x5b>
   4b8f6:	mov    rax,rsi
   4b8f9:	shr    rax,1
   4b8fc:	lea    rsi,[rax+rsi*1+0x1]
   4b901:	mov    QWORD PTR [r9],rsi
   4b904:	imul   rsi,r8
   4b908:	jmp    4b870 <xrealloc>
   4b90d:	nop    DWORD PTR [rax]
   4b910:	test   rsi,rsi
   4b913:	je     4b938 <x2nrealloc+0x68>
   4b915:	mov    rax,rsi
   4b918:	mul    r8
   4b91b:	seto   dl
   4b91e:	movzx  edx,dl
   4b921:	test   rax,rax
   4b924:	js     4b92b <x2nrealloc+0x5b>
   4b926:	test   rdx,rdx
   4b929:	je     4b901 <x2nrealloc+0x31>
   4b92b:	push   rax
   4b92c:	call   4ba70 <xalloc_die>
   4b931:	nop    DWORD PTR [rax+0x0]
   4b938:	xor    edx,edx
   4b93a:	mov    eax,0x80
   4b93f:	xor    ecx,ecx
   4b941:	div    r8
   4b944:	cmp    r8,0x80
   4b94b:	seta   cl
   4b94e:	lea    rsi,[rcx+rax*1]
   4b952:	jmp    4b915 <x2nrealloc+0x45>
   4b954:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4b95f:	nop

000000000004b960 <x2realloc>:
   4b960:	endbr64 
   4b964:	mov    rax,rsi
   4b967:	mov    rsi,QWORD PTR [rsi]
   4b96a:	test   rdi,rdi
   4b96d:	je     4b998 <x2realloc+0x38>
   4b96f:	movabs rdx,0x5555555555555553
   4b979:	cmp    rsi,rdx
   4b97c:	ja     4b9b2 <x2realloc+0x52>
   4b97e:	mov    rdx,rsi
   4b981:	shr    rdx,1
   4b984:	lea    rsi,[rdx+rsi*1+0x1]
   4b989:	mov    QWORD PTR [rax],rsi
   4b98c:	jmp    4b870 <xrealloc>
   4b991:	nop    DWORD PTR [rax+0x0]
   4b998:	test   rsi,rsi
   4b99b:	jne    4b9b0 <x2realloc+0x50>
   4b99d:	mov    esi,0x80
   4b9a2:	mov    QWORD PTR [rax],rsi
   4b9a5:	jmp    4b870 <xrealloc>
   4b9aa:	nop    WORD PTR [rax+rax*1+0x0]
   4b9b0:	jns    4b989 <x2realloc+0x29>
   4b9b2:	push   rax
   4b9b3:	call   4ba70 <xalloc_die>
   4b9b8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004b9c0 <xcalloc>:
   4b9c0:	endbr64 
   4b9c4:	mov    rax,rdi
   4b9c7:	sub    rsp,0x8
   4b9cb:	mul    rsi
   4b9ce:	seto   dl
   4b9d1:	test   rax,rax
   4b9d4:	js     4b9ed <xcalloc+0x2d>
   4b9d6:	movzx  edx,dl
   4b9d9:	test   rdx,rdx
   4b9dc:	jne    4b9ed <xcalloc+0x2d>
   4b9de:	call   c880 <calloc@plt>
   4b9e3:	test   rax,rax
   4b9e6:	je     4b9ed <xcalloc+0x2d>
   4b9e8:	add    rsp,0x8
   4b9ec:	ret    
   4b9ed:	call   4ba70 <xalloc_die>
   4b9f2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4b9fd:	nop    DWORD PTR [rax]

000000000004ba00 <xzalloc>:
   4ba00:	endbr64 
   4ba04:	mov    esi,0x1
   4ba09:	jmp    4b9c0 <xcalloc>
   4ba0b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004ba10 <xmemdup>:
   4ba10:	endbr64 
   4ba14:	push   r12
   4ba16:	mov    r12,rsi
   4ba19:	push   rbp
   4ba1a:	mov    rbp,rdi
   4ba1d:	mov    rdi,rsi
   4ba20:	sub    rsp,0x8
   4ba24:	call   c0e0 <malloc@plt>
   4ba29:	test   rax,rax
   4ba2c:	je     4ba43 <xmemdup+0x33>
   4ba2e:	add    rsp,0x8
   4ba32:	mov    rdx,r12
   4ba35:	mov    rsi,rbp
   4ba38:	mov    rdi,rax
   4ba3b:	pop    rbp
   4ba3c:	pop    r12
   4ba3e:	jmp    cb30 <memcpy@plt>
   4ba43:	call   4ba70 <xalloc_die>
   4ba48:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004ba50 <xstrdup>:
   4ba50:	endbr64 
   4ba54:	push   rbp
   4ba55:	mov    rbp,rdi
   4ba58:	call   c310 <strlen@plt>
   4ba5d:	mov    rdi,rbp
   4ba60:	pop    rbp
   4ba61:	lea    rsi,[rax+0x1]
   4ba65:	jmp    4ba10 <xmemdup>
   4ba67:	nop    WORD PTR [rax+rax*1+0x0]

000000000004ba70 <xalloc_die>:
   4ba70:	endbr64 
   4ba74:	push   rax
   4ba75:	pop    rax
   4ba76:	mov    edx,0x5
   4ba7b:	lea    rsi,[rip+0x2429e]        # 6fd20 <quoting_style_vals+0x40>
   4ba82:	lea    rdi,[rip+0x1cf06]        # 6898f <primes.6089+0x28af>
   4ba89:	sub    rsp,0x8
   4ba8d:	call   c780 <dcgettext@plt>
   4ba92:	mov    edi,DWORD PTR [rip+0x379e8]        # 83480 <exit_failure>
   4ba98:	lea    rdx,[rip+0x214a7]        # 6cf46 <eta_str.8886+0x1ce>
   4ba9f:	xor    esi,esi
   4baa1:	mov    rcx,rax
   4baa4:	xor    eax,eax
   4baa6:	call   ca90 <error@plt>
   4baab:	call   bf50 <abort@plt>

000000000004bab0 <xmemdup0>:
   4bab0:	endbr64 
   4bab4:	push   rbp
   4bab5:	mov    rbp,rdi
   4bab8:	lea    rdi,[rsi+0x1]
   4babc:	push   rbx
   4babd:	mov    rbx,rsi
   4bac0:	sub    rsp,0x8
   4bac4:	call   4b850 <xmalloc>
   4bac9:	mov    r8,rax
   4bacc:	test   rbx,rbx
   4bacf:	jne    4bae0 <xmemdup0+0x30>
   4bad1:	mov    BYTE PTR [r8+rbx*1],0x0
   4bad6:	add    rsp,0x8
   4bada:	mov    rax,r8
   4badd:	pop    rbx
   4bade:	pop    rbp
   4badf:	ret    
   4bae0:	mov    rdx,rbx
   4bae3:	mov    rsi,rbp
   4bae6:	mov    rdi,rax
   4bae9:	call   cb30 <memcpy@plt>
   4baee:	mov    r8,rax
   4baf1:	mov    BYTE PTR [r8+rbx*1],0x0
   4baf6:	add    rsp,0x8
   4bafa:	mov    rax,r8
   4bafd:	pop    rbx
   4bafe:	pop    rbp
   4baff:	ret    

000000000004bb00 <xstrndup>:
   4bb00:	endbr64 
   4bb04:	sub    rsp,0x8
   4bb08:	call   cbc0 <strndup@plt>
   4bb0d:	test   rax,rax
   4bb10:	je     4bb17 <xstrndup+0x17>
   4bb12:	add    rsp,0x8
   4bb16:	ret    
   4bb17:	call   4ba70 <xalloc_die>
   4bb1c:	nop    DWORD PTR [rax+0x0]

000000000004bb20 <rpl_fcntl>:
   4bb20:	endbr64 
   4bb24:	push   r13
   4bb26:	push   r12
   4bb28:	push   rbp
   4bb29:	sub    rsp,0x60
   4bb2d:	mov    QWORD PTR [rsp+0x40],rdx
   4bb32:	mov    QWORD PTR [rsp+0x48],rcx
   4bb37:	mov    QWORD PTR [rsp+0x50],r8
   4bb3c:	mov    QWORD PTR [rsp+0x58],r9
   4bb41:	mov    rax,QWORD PTR fs:0x28
   4bb4a:	mov    QWORD PTR [rsp+0x28],rax
   4bb4f:	xor    eax,eax
   4bb51:	lea    rax,[rsp+0x80]
   4bb59:	mov    DWORD PTR [rsp+0x10],0x10
   4bb61:	mov    QWORD PTR [rsp+0x18],rax
   4bb66:	lea    rax,[rsp+0x30]
   4bb6b:	mov    QWORD PTR [rsp+0x20],rax
   4bb70:	test   esi,esi
   4bb72:	je     4bbf0 <rpl_fcntl+0xd0>
   4bb74:	cmp    esi,0x406
   4bb7a:	je     4bc28 <rpl_fcntl+0x108>
   4bb80:	cmp    esi,0xb
   4bb83:	jg     4bbb0 <rpl_fcntl+0x90>
   4bb85:	test   esi,esi
   4bb87:	jg     4bbd0 <rpl_fcntl+0xb0>
   4bb89:	mov    eax,DWORD PTR [rsp+0x10]
   4bb8d:	cmp    eax,0x2f
   4bb90:	ja     4bd60 <rpl_fcntl+0x240>
   4bb96:	add    rax,QWORD PTR [rsp+0x20]
   4bb9b:	mov    rdx,QWORD PTR [rax]
   4bb9e:	xor    eax,eax
   4bba0:	call   cb40 <fcntl@plt>
   4bba5:	mov    r12d,eax
   4bba8:	jmp    4bc04 <rpl_fcntl+0xe4>
   4bbaa:	nop    WORD PTR [rax+rax*1+0x0]
   4bbb0:	lea    edx,[rsi-0x400]
   4bbb6:	cmp    edx,0xa
   4bbb9:	ja     4bb89 <rpl_fcntl+0x69>
   4bbbb:	lea    rcx,[rip+0x24172]        # 6fd34 <quoting_style_vals+0x54>
   4bbc2:	movsxd rax,DWORD PTR [rcx+rdx*4]
   4bbc6:	add    rax,rcx
   4bbc9:	notrack jmp rax
   4bbcc:	nop    DWORD PTR [rax+0x0]
   4bbd0:	cmp    esi,0xb
   4bbd3:	ja     4bb89 <rpl_fcntl+0x69>
   4bbd5:	lea    rcx,[rip+0x24184]        # 6fd60 <quoting_style_vals+0x80>
   4bbdc:	mov    edx,esi
   4bbde:	movsxd rax,DWORD PTR [rcx+rdx*4]
   4bbe2:	add    rax,rcx
   4bbe5:	notrack jmp rax
   4bbe8:	nop    DWORD PTR [rax+rax*1+0x0]
   4bbf0:	mov    rax,QWORD PTR [rsp+0x20]
   4bbf5:	xor    esi,esi
   4bbf7:	mov    edx,DWORD PTR [rax+0x10]
   4bbfa:	xor    eax,eax
   4bbfc:	call   cb40 <fcntl@plt>
   4bc01:	mov    r12d,eax
   4bc04:	mov    rax,QWORD PTR [rsp+0x28]
   4bc09:	xor    rax,QWORD PTR fs:0x28
   4bc12:	jne    4bd6a <rpl_fcntl+0x24a>
   4bc18:	add    rsp,0x60
   4bc1c:	mov    eax,r12d
   4bc1f:	pop    rbp
   4bc20:	pop    r12
   4bc22:	pop    r13
   4bc24:	ret    
   4bc25:	nop    DWORD PTR [rax]
   4bc28:	mov    rax,QWORD PTR [rsp+0x20]
   4bc2d:	mov    DWORD PTR [rsp+0x10],0x18
   4bc35:	mov    r13d,DWORD PTR [rax+0x10]
   4bc39:	mov    eax,DWORD PTR [rip+0x3e3d9]        # 8a018 <have_dupfd_cloexec.4066>
   4bc3f:	mov    edx,r13d
   4bc42:	test   eax,eax
   4bc44:	js     4bca0 <rpl_fcntl+0x180>
   4bc46:	mov    esi,0x406
   4bc4b:	xor    eax,eax
   4bc4d:	mov    DWORD PTR [rsp+0xc],edi
   4bc51:	call   cb40 <fcntl@plt>
   4bc56:	mov    r12d,eax
   4bc59:	test   eax,eax
   4bc5b:	js     4bd18 <rpl_fcntl+0x1f8>
   4bc61:	mov    DWORD PTR [rip+0x3e3ad],0x1        # 8a018 <have_dupfd_cloexec.4066>
   4bc6b:	jmp    4bc04 <rpl_fcntl+0xe4>
   4bc6d:	xor    eax,eax
   4bc6f:	call   cb40 <fcntl@plt>
   4bc74:	mov    r12d,eax
   4bc77:	jmp    4bc04 <rpl_fcntl+0xe4>
   4bc79:	mov    eax,DWORD PTR [rsp+0x10]
   4bc7d:	cmp    eax,0x2f
   4bc80:	ja     4bd50 <rpl_fcntl+0x230>
   4bc86:	add    rax,QWORD PTR [rsp+0x20]
   4bc8b:	mov    edx,DWORD PTR [rax]
   4bc8d:	xor    eax,eax
   4bc8f:	call   cb40 <fcntl@plt>
   4bc94:	mov    r12d,eax
   4bc97:	jmp    4bc04 <rpl_fcntl+0xe4>
   4bc9c:	nop    DWORD PTR [rax+0x0]
   4bca0:	xor    esi,esi
   4bca2:	xor    eax,eax
   4bca4:	call   cb40 <fcntl@plt>
   4bca9:	mov    r12d,eax
   4bcac:	test   eax,eax
   4bcae:	js     4bc04 <rpl_fcntl+0xe4>
   4bcb4:	cmp    DWORD PTR [rip+0x3e35d],0xffffffff        # 8a018 <have_dupfd_cloexec.4066>
   4bcbb:	jne    4bc04 <rpl_fcntl+0xe4>
   4bcc1:	xor    eax,eax
   4bcc3:	mov    esi,0x1
   4bcc8:	mov    edi,r12d
   4bccb:	call   cb40 <fcntl@plt>
   4bcd0:	test   eax,eax
   4bcd2:	js     4bcf1 <rpl_fcntl+0x1d1>
   4bcd4:	or     eax,0x1
   4bcd7:	mov    esi,0x2
   4bcdc:	mov    edi,r12d
   4bcdf:	mov    edx,eax
   4bce1:	xor    eax,eax
   4bce3:	call   cb40 <fcntl@plt>
   4bce8:	cmp    eax,0xffffffff
   4bceb:	jne    4bc04 <rpl_fcntl+0xe4>
   4bcf1:	call   c740 <__errno_location@plt>
   4bcf6:	mov    edi,r12d
   4bcf9:	or     r12d,0xffffffff
   4bcfd:	mov    r13d,DWORD PTR [rax]
   4bd00:	mov    rbp,rax
   4bd03:	call   bf10 <close@plt>
   4bd08:	mov    DWORD PTR [rbp+0x0],r13d
   4bd0c:	jmp    4bc04 <rpl_fcntl+0xe4>
   4bd11:	nop    DWORD PTR [rax+0x0]
   4bd18:	call   c740 <__errno_location@plt>
   4bd1d:	mov    edi,DWORD PTR [rsp+0xc]
   4bd21:	cmp    DWORD PTR [rax],0x16
   4bd24:	jne    4bc61 <rpl_fcntl+0x141>
   4bd2a:	mov    edx,r13d
   4bd2d:	xor    esi,esi
   4bd2f:	xor    eax,eax
   4bd31:	call   cb40 <fcntl@plt>
   4bd36:	mov    r12d,eax
   4bd39:	test   eax,eax
   4bd3b:	js     4bc04 <rpl_fcntl+0xe4>
   4bd41:	mov    DWORD PTR [rip+0x3e2cd],0xffffffff        # 8a018 <have_dupfd_cloexec.4066>
   4bd4b:	jmp    4bcc1 <rpl_fcntl+0x1a1>
   4bd50:	mov    rax,QWORD PTR [rsp+0x18]
   4bd55:	jmp    4bc8b <rpl_fcntl+0x16b>
   4bd5a:	nop    WORD PTR [rax+rax*1+0x0]
   4bd60:	mov    rax,QWORD PTR [rsp+0x18]
   4bd65:	jmp    4bb9b <rpl_fcntl+0x7b>
   4bd6a:	call   c7b0 <__stack_chk_fail@plt>
   4bd6f:	nop

000000000004bd70 <rpl_fflush>:
   4bd70:	endbr64 
   4bd74:	push   rbp
   4bd75:	mov    rbp,rdi
   4bd78:	test   rdi,rdi
   4bd7b:	je     4bd8f <rpl_fflush+0x1f>
   4bd7d:	call   c390 <__freading@plt>
   4bd82:	test   eax,eax
   4bd84:	je     4bd8f <rpl_fflush+0x1f>
   4bd86:	test   DWORD PTR [rbp+0x0],0x100
   4bd8d:	jne    4bda0 <rpl_fflush+0x30>
   4bd8f:	mov    rdi,rbp
   4bd92:	pop    rbp
   4bd93:	jmp    cc00 <fflush@plt>
   4bd98:	nop    DWORD PTR [rax+rax*1+0x0]
   4bda0:	mov    rdi,rbp
   4bda3:	mov    edx,0x1
   4bda8:	xor    esi,esi
   4bdaa:	call   4be00 <rpl_fseeko>
   4bdaf:	mov    rdi,rbp
   4bdb2:	pop    rbp
   4bdb3:	jmp    cc00 <fflush@plt>
   4bdb8:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004bdc0 <rpl_free>:
   4bdc0:	endbr64 
   4bdc4:	push   r12
   4bdc6:	push   rbp
   4bdc7:	mov    rbp,rdi
   4bdca:	push   rbx
   4bdcb:	call   c740 <__errno_location@plt>
   4bdd0:	mov    rdi,rbp
   4bdd3:	mov    r12d,DWORD PTR [rax]
   4bdd6:	mov    rbx,rax
   4bdd9:	call   c2e0 <free@plt>
   4bdde:	mov    DWORD PTR [rbx],r12d
   4bde1:	pop    rbx
   4bde2:	pop    rbp
   4bde3:	pop    r12
   4bde5:	ret    
   4bde6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000004bdf0 <rpl_fseek>:
   4bdf0:	endbr64 
   4bdf4:	jmp    4be00 <rpl_fseeko>
   4bdf9:	nop    DWORD PTR [rax+0x0]

000000000004be00 <rpl_fseeko>:
   4be00:	endbr64 
   4be04:	push   rbp
   4be05:	mov    rbp,rdi
   4be08:	sub    rsp,0x10
   4be0c:	mov    rax,QWORD PTR [rdi+0x8]
   4be10:	cmp    QWORD PTR [rdi+0x10],rax
   4be14:	je     4be28 <rpl_fseeko+0x28>
   4be16:	add    rsp,0x10
   4be1a:	mov    rdi,rbp
   4be1d:	pop    rbp
   4be1e:	jmp    c900 <fseeko@plt>
   4be23:	nop    DWORD PTR [rax+rax*1+0x0]
   4be28:	mov    rax,QWORD PTR [rdi+0x20]
   4be2c:	cmp    QWORD PTR [rdi+0x28],rax
   4be30:	jne    4be16 <rpl_fseeko+0x16>
   4be32:	cmp    QWORD PTR [rdi+0x48],0x0
   4be37:	jne    4be16 <rpl_fseeko+0x16>
   4be39:	mov    DWORD PTR [rsp+0xc],edx
   4be3d:	mov    QWORD PTR [rsp],rsi
   4be41:	call   be80 <fileno@plt>
   4be46:	mov    edx,DWORD PTR [rsp+0xc]
   4be4a:	mov    rsi,QWORD PTR [rsp]
   4be4e:	mov    edi,eax
   4be50:	call   c590 <lseek@plt>
   4be55:	cmp    rax,0xffffffffffffffff
   4be59:	je     4be6e <rpl_fseeko+0x6e>
   4be5b:	and    DWORD PTR [rbp+0x0],0xffffffef
   4be5f:	mov    QWORD PTR [rbp+0x90],rax
   4be66:	xor    eax,eax
   4be68:	add    rsp,0x10
   4be6c:	pop    rbp
   4be6d:	ret    
   4be6e:	or     eax,0xffffffff
   4be71:	jmp    4be68 <rpl_fseeko+0x68>
   4be73:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4be7d:	nop    DWORD PTR [rax]

000000000004be80 <rpl_ioctl>:
   4be80:	endbr64 
   4be84:	sub    rsp,0x58
   4be88:	mov    esi,esi
   4be8a:	mov    QWORD PTR [rsp+0x30],rdx
   4be8f:	mov    rax,QWORD PTR fs:0x28
   4be98:	mov    QWORD PTR [rsp+0x18],rax
   4be9d:	xor    eax,eax
   4be9f:	lea    rax,[rsp+0x60]
   4bea4:	mov    DWORD PTR [rsp],0x10
   4beab:	mov    QWORD PTR [rsp+0x8],rax
   4beb0:	lea    rax,[rsp+0x20]
   4beb5:	mov    QWORD PTR [rsp+0x10],rax
   4beba:	xor    eax,eax
   4bebc:	call   bf40 <ioctl@plt>
   4bec1:	mov    rcx,QWORD PTR [rsp+0x18]
   4bec6:	xor    rcx,QWORD PTR fs:0x28
   4becf:	jne    4bed6 <rpl_ioctl+0x56>
   4bed1:	add    rsp,0x58
   4bed5:	ret    
   4bed6:	call   c7b0 <__stack_chk_fail@plt>
   4bedb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004bee0 <rpl_mbrtowc>:
   4bee0:	endbr64 
   4bee4:	push   r13
   4bee6:	mov    r13,rsi
   4bee9:	push   r12
   4beeb:	push   rbp
   4beec:	mov    rbp,rdx
   4beef:	push   rbx
   4bef0:	mov    rbx,rdi
   4bef3:	sub    rsp,0x18
   4bef7:	mov    rax,QWORD PTR fs:0x28
   4bf00:	mov    QWORD PTR [rsp+0x8],rax
   4bf05:	xor    eax,eax
   4bf07:	test   rdi,rdi
   4bf0a:	lea    rax,[rsp+0x4]
   4bf0f:	cmove  rbx,rax
   4bf13:	mov    rdi,rbx
   4bf16:	call   bee0 <mbrtowc@plt>
   4bf1b:	mov    r12,rax
   4bf1e:	cmp    rax,0xfffffffffffffffd
   4bf22:	jbe    4bf29 <rpl_mbrtowc+0x49>
   4bf24:	test   rbp,rbp
   4bf27:	jne    4bf50 <rpl_mbrtowc+0x70>
   4bf29:	mov    rax,QWORD PTR [rsp+0x8]
   4bf2e:	xor    rax,QWORD PTR fs:0x28
   4bf37:	jne    4bf6a <rpl_mbrtowc+0x8a>
   4bf39:	add    rsp,0x18
   4bf3d:	mov    rax,r12
   4bf40:	pop    rbx
   4bf41:	pop    rbp
   4bf42:	pop    r12
   4bf44:	pop    r13
   4bf46:	ret    
   4bf47:	nop    WORD PTR [rax+rax*1+0x0]
   4bf50:	xor    edi,edi
   4bf52:	call   5a480 <hard_locale>
   4bf57:	test   al,al
   4bf59:	jne    4bf29 <rpl_mbrtowc+0x49>
   4bf5b:	movzx  eax,BYTE PTR [r13+0x0]
   4bf60:	mov    r12d,0x1
   4bf66:	mov    DWORD PTR [rbx],eax
   4bf68:	jmp    4bf29 <rpl_mbrtowc+0x49>
   4bf6a:	call   c7b0 <__stack_chk_fail@plt>
   4bf6f:	nop

000000000004bf70 <re_node_set_compare>:
   4bf70:	test   rdi,rdi
   4bf73:	sete   al
   4bf76:	test   rsi,rsi
   4bf79:	sete   dl
   4bf7c:	or     al,dl
   4bf7e:	jne    4bfb0 <re_node_set_compare+0x40>
   4bf80:	mov    rdx,QWORD PTR [rdi+0x8]
   4bf84:	cmp    rdx,QWORD PTR [rsi+0x8]
   4bf88:	je     4bfa2 <re_node_set_compare+0x32>
   4bf8a:	ret    
   4bf8b:	nop    DWORD PTR [rax+rax*1+0x0]
   4bf90:	mov    rcx,QWORD PTR [rsi+0x10]
   4bf94:	mov    r8,QWORD PTR [rdi+0x10]
   4bf98:	mov    rcx,QWORD PTR [rcx+rdx*8]
   4bf9c:	cmp    QWORD PTR [r8+rdx*8],rcx
   4bfa0:	jne    4bf8a <re_node_set_compare+0x1a>
   4bfa2:	sub    rdx,0x1
   4bfa6:	jns    4bf90 <re_node_set_compare+0x20>
   4bfa8:	mov    eax,0x1
   4bfad:	ret    
   4bfae:	xchg   ax,ax
   4bfb0:	xor    eax,eax
   4bfb2:	ret    
   4bfb3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4bfbe:	xchg   ax,ax

000000000004bfc0 <peek_token_bracket>:
   4bfc0:	mov    rax,QWORD PTR [rsi+0x48]
   4bfc4:	cmp    QWORD PTR [rsi+0x68],rax
   4bfc8:	jle    4c050 <peek_token_bracket+0x90>
   4bfce:	mov    r8,QWORD PTR [rsi+0x8]
   4bfd2:	cmp    DWORD PTR [rsi+0x90],0x1
   4bfd9:	movzx  ecx,BYTE PTR [r8+rax*1]
   4bfde:	mov    BYTE PTR [rdi],cl
   4bfe0:	jle    4bff3 <peek_token_bracket+0x33>
   4bfe2:	cmp    rax,QWORD PTR [rsi+0x30]
   4bfe6:	je     4bff3 <peek_token_bracket+0x33>
   4bfe8:	mov    r9,QWORD PTR [rsi+0x10]
   4bfec:	cmp    DWORD PTR [r9+rax*4],0xffffffff
   4bff1:	je     4c027 <peek_token_bracket+0x67>
   4bff3:	cmp    cl,0x5c
   4bff6:	je     4c018 <peek_token_bracket+0x58>
   4bff8:	cmp    cl,0x5b
   4bffb:	je     4c060 <peek_token_bracket+0xa0>
   4bffd:	cmp    cl,0x5d
   4c000:	je     4c090 <peek_token_bracket+0xd0>
   4c006:	cmp    cl,0x5e
   4c009:	jne    4c038 <peek_token_bracket+0x78>
   4c00b:	mov    BYTE PTR [rdi+0x8],0x19
   4c00f:	mov    eax,0x1
   4c014:	ret    
   4c015:	nop    DWORD PTR [rax]
   4c018:	and    edx,0x1
   4c01b:	je     4c027 <peek_token_bracket+0x67>
   4c01d:	lea    rdx,[rax+0x1]
   4c021:	cmp    rdx,QWORD PTR [rsi+0x58]
   4c025:	jl     4c0a0 <peek_token_bracket+0xe0>
   4c027:	mov    BYTE PTR [rdi+0x8],0x1
   4c02b:	mov    eax,0x1
   4c030:	ret    
   4c031:	nop    DWORD PTR [rax+0x0]
   4c038:	cmp    cl,0x2d
   4c03b:	jne    4c027 <peek_token_bracket+0x67>
   4c03d:	mov    BYTE PTR [rdi+0x8],0x16
   4c041:	mov    eax,0x1
   4c046:	ret    
   4c047:	nop    WORD PTR [rax+rax*1+0x0]
   4c050:	mov    BYTE PTR [rdi+0x8],0x2
   4c054:	xor    eax,eax
   4c056:	ret    
   4c057:	nop    WORD PTR [rax+rax*1+0x0]
   4c060:	lea    rcx,[rax+0x1]
   4c064:	cmp    rcx,QWORD PTR [rsi+0x58]
   4c068:	jge    4c07e <peek_token_bracket+0xbe>
   4c06a:	movzx  eax,BYTE PTR [r8+rax*1+0x1]
   4c070:	mov    BYTE PTR [rdi],al
   4c072:	cmp    al,0x3a
   4c074:	je     4c0e0 <peek_token_bracket+0x120>
   4c076:	cmp    al,0x3d
   4c078:	je     4c0d0 <peek_token_bracket+0x110>
   4c07a:	cmp    al,0x2e
   4c07c:	je     4c0c0 <peek_token_bracket+0x100>
   4c07e:	mov    BYTE PTR [rdi+0x8],0x1
   4c082:	mov    eax,0x1
   4c087:	mov    BYTE PTR [rdi],0x5b
   4c08a:	ret    
   4c08b:	nop    DWORD PTR [rax+rax*1+0x0]
   4c090:	mov    BYTE PTR [rdi+0x8],0x15
   4c094:	mov    eax,0x1
   4c099:	ret    
   4c09a:	nop    WORD PTR [rax+rax*1+0x0]
   4c0a0:	mov    QWORD PTR [rsi+0x48],rdx
   4c0a4:	movzx  eax,BYTE PTR [r8+rax*1+0x1]
   4c0aa:	mov    BYTE PTR [rdi+0x8],0x1
   4c0ae:	mov    BYTE PTR [rdi],al
   4c0b0:	mov    eax,0x1
   4c0b5:	ret    
   4c0b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c0c0:	mov    BYTE PTR [rdi+0x8],0x1a
   4c0c4:	mov    eax,0x2
   4c0c9:	ret    
   4c0ca:	nop    WORD PTR [rax+rax*1+0x0]
   4c0d0:	mov    BYTE PTR [rdi+0x8],0x1c
   4c0d4:	mov    eax,0x2
   4c0d9:	ret    
   4c0da:	nop    WORD PTR [rax+rax*1+0x0]
   4c0e0:	and    edx,0x4
   4c0e3:	je     4c07e <peek_token_bracket+0xbe>
   4c0e5:	mov    BYTE PTR [rdi+0x8],0x1e
   4c0e9:	mov    eax,0x2
   4c0ee:	ret    
   4c0ef:	nop

000000000004c0f0 <mark_opt_subexp>:
   4c0f0:	endbr64 
   4c0f4:	cmp    BYTE PTR [rsi+0x30],0x11
   4c0f8:	je     4c100 <mark_opt_subexp+0x10>
   4c0fa:	xor    eax,eax
   4c0fc:	ret    
   4c0fd:	nop    DWORD PTR [rax]
   4c100:	cmp    rdi,QWORD PTR [rsi+0x28]
   4c104:	jne    4c0fa <mark_opt_subexp+0xa>
   4c106:	or     BYTE PTR [rsi+0x32],0x8
   4c10a:	xor    eax,eax
   4c10c:	ret    
   4c10d:	nop    DWORD PTR [rax]

000000000004c110 <check_dst_limits_calc_pos_1>:
   4c110:	push   r15
   4c112:	mov    r15d,esi
   4c115:	push   r14
   4c117:	push   r13
   4c119:	push   r12
   4c11b:	push   rbp
   4c11c:	push   rbx
   4c11d:	sub    rsp,0x58
   4c121:	mov    r14,QWORD PTR [rdi+0x98]
   4c128:	mov    QWORD PTR [rsp+0x10],rcx
   4c12d:	lea    rcx,[rcx+rcx*2]
   4c131:	mov    rax,QWORD PTR [r14+0x30]
   4c135:	lea    r13,[rax+rcx*8]
   4c139:	cmp    QWORD PTR [r13+0x8],0x0
   4c13e:	jle    4c2fb <check_dst_limits_calc_pos_1+0x1eb>
   4c144:	lea    rax,[r8+r8*2]
   4c148:	mov    ecx,edx
   4c14a:	mov    r15,r14
   4c14d:	xor    ebx,ebx
   4c14f:	shl    rax,0x4
   4c153:	mov    r14,rdi
   4c156:	mov    QWORD PTR [rsp+0x38],rax
   4c15b:	mov    eax,0x1
   4c160:	shl    rax,cl
   4c163:	mov    QWORD PTR [rsp+0x28],rax
   4c168:	not    rax
   4c16b:	mov    QWORD PTR [rsp+0x30],rax
   4c170:	mov    eax,esi
   4c172:	and    eax,0x1
   4c175:	mov    DWORD PTR [rsp+0x1c],eax
   4c179:	mov    eax,esi
   4c17b:	and    eax,0x2
   4c17e:	mov    DWORD PTR [rsp+0x18],eax
   4c182:	jmp    4c19b <check_dst_limits_calc_pos_1+0x8b>
   4c184:	nop    DWORD PTR [rax+0x0]
   4c188:	cmp    cl,0x4
   4c18b:	je     4c208 <check_dst_limits_calc_pos_1+0xf8>
   4c18d:	add    rbx,0x1
   4c191:	cmp    QWORD PTR [r13+0x8],rbx
   4c195:	jle    4c2f8 <check_dst_limits_calc_pos_1+0x1e8>
   4c19b:	mov    rax,QWORD PTR [r13+0x10]
   4c19f:	mov    rbp,QWORD PTR [rax+rbx*8]
   4c1a3:	mov    rax,rbp
   4c1a6:	shl    rax,0x4
   4c1aa:	add    rax,QWORD PTR [r15]
   4c1ad:	movzx  ecx,BYTE PTR [rax+0x8]
   4c1b1:	cmp    cl,0x8
   4c1b4:	je     4c1e0 <check_dst_limits_calc_pos_1+0xd0>
   4c1b6:	cmp    cl,0x9
   4c1b9:	jne    4c188 <check_dst_limits_calc_pos_1+0x78>
   4c1bb:	mov    ecx,DWORD PTR [rsp+0x18]
   4c1bf:	test   ecx,ecx
   4c1c1:	je     4c18d <check_dst_limits_calc_pos_1+0x7d>
   4c1c3:	cmp    QWORD PTR [rax],rdx
   4c1c6:	jne    4c18d <check_dst_limits_calc_pos_1+0x7d>
   4c1c8:	add    rsp,0x58
   4c1cc:	xor    eax,eax
   4c1ce:	pop    rbx
   4c1cf:	pop    rbp
   4c1d0:	pop    r12
   4c1d2:	pop    r13
   4c1d4:	pop    r14
   4c1d6:	pop    r15
   4c1d8:	ret    
   4c1d9:	nop    DWORD PTR [rax+0x0]
   4c1e0:	mov    edi,DWORD PTR [rsp+0x1c]
   4c1e4:	test   edi,edi
   4c1e6:	je     4c18d <check_dst_limits_calc_pos_1+0x7d>
   4c1e8:	cmp    QWORD PTR [rax],rdx
   4c1eb:	jne    4c18d <check_dst_limits_calc_pos_1+0x7d>
   4c1ed:	add    rsp,0x58
   4c1f1:	mov    eax,0xffffffff
   4c1f6:	pop    rbx
   4c1f7:	pop    rbp
   4c1f8:	pop    r12
   4c1fa:	pop    r13
   4c1fc:	pop    r14
   4c1fe:	pop    r15
   4c200:	ret    
   4c201:	nop    DWORD PTR [rax+0x0]
   4c208:	cmp    r8,0xffffffffffffffff
   4c20c:	je     4c18d <check_dst_limits_calc_pos_1+0x7d>
   4c212:	lea    rax,[rbp+rbp*2+0x0]
   4c217:	mov    QWORD PTR [rsp+0x40],r13
   4c21c:	mov    r12,QWORD PTR [rsp+0x38]
   4c221:	mov    r13d,esi
   4c224:	shl    rax,0x3
   4c228:	mov    QWORD PTR [rsp+0x48],rbx
   4c22d:	add    r12,QWORD PTR [r14+0xd8]
   4c234:	mov    rbx,r14
   4c237:	mov    QWORD PTR [rsp+0x20],rax
   4c23c:	mov    r14,r15
   4c23f:	mov    r15,rbp
   4c242:	mov    rbp,rdx
   4c245:	nop    DWORD PTR [rax]
   4c248:	cmp    QWORD PTR [r12],r15
   4c24c:	jne    4c2c0 <check_dst_limits_calc_pos_1+0x1b0>
   4c24e:	cmp    rbp,0x3f
   4c252:	jg     4c260 <check_dst_limits_calc_pos_1+0x150>
   4c254:	mov    rax,QWORD PTR [rsp+0x28]
   4c259:	test   QWORD PTR [r12+0x20],rax
   4c25e:	je     4c2c0 <check_dst_limits_calc_pos_1+0x1b0>
   4c260:	mov    rax,QWORD PTR [r14+0x28]
   4c264:	mov    rsi,QWORD PTR [rsp+0x20]
   4c269:	mov    rax,QWORD PTR [rax+rsi*1+0x10]
   4c26e:	mov    rcx,QWORD PTR [rax]
   4c271:	cmp    QWORD PTR [rsp+0x10],rcx
   4c276:	je     4c310 <check_dst_limits_calc_pos_1+0x200>
   4c27c:	mov    rdx,rbp
   4c27f:	mov    esi,r13d
   4c282:	mov    rdi,rbx
   4c285:	mov    QWORD PTR [rsp+0x8],r8
   4c28a:	call   4c110 <check_dst_limits_calc_pos_1>
   4c28f:	mov    r8,QWORD PTR [rsp+0x8]
   4c294:	cmp    eax,0xffffffff
   4c297:	je     4c1ed <check_dst_limits_calc_pos_1+0xdd>
   4c29d:	test   eax,eax
   4c29f:	jne    4c2af <check_dst_limits_calc_pos_1+0x19f>
   4c2a1:	mov    r9d,DWORD PTR [rsp+0x18]
   4c2a6:	test   r9d,r9d
   4c2a9:	jne    4c1c8 <check_dst_limits_calc_pos_1+0xb8>
   4c2af:	cmp    rbp,0x3f
   4c2b3:	jg     4c2c0 <check_dst_limits_calc_pos_1+0x1b0>
   4c2b5:	mov    rax,QWORD PTR [rsp+0x30]
   4c2ba:	and    QWORD PTR [r12+0x20],rax
   4c2bf:	nop
   4c2c0:	add    r12,0x30
   4c2c4:	cmp    BYTE PTR [r12-0x8],0x0
   4c2ca:	jne    4c248 <check_dst_limits_calc_pos_1+0x138>
   4c2d0:	mov    r15,r14
   4c2d3:	mov    esi,r13d
   4c2d6:	mov    r14,rbx
   4c2d9:	mov    r13,QWORD PTR [rsp+0x40]
   4c2de:	mov    rbx,QWORD PTR [rsp+0x48]
   4c2e3:	mov    rdx,rbp
   4c2e6:	add    rbx,0x1
   4c2ea:	cmp    QWORD PTR [r13+0x8],rbx
   4c2ee:	jg     4c19b <check_dst_limits_calc_pos_1+0x8b>
   4c2f4:	nop    DWORD PTR [rax+0x0]
   4c2f8:	mov    r15d,esi
   4c2fb:	add    rsp,0x58
   4c2ff:	mov    eax,r15d
   4c302:	pop    rbx
   4c303:	sar    eax,1
   4c305:	pop    rbp
   4c306:	pop    r12
   4c308:	pop    r13
   4c30a:	pop    r14
   4c30c:	pop    r15
   4c30e:	ret    
   4c30f:	nop
   4c310:	mov    esi,r13d
   4c313:	add    rsp,0x58
   4c317:	and    esi,0x1
   4c31a:	pop    rbx
   4c31b:	pop    rbp
   4c31c:	mov    eax,esi
   4c31e:	pop    r12
   4c320:	pop    r13
   4c322:	neg    eax
   4c324:	pop    r14
   4c326:	pop    r15
   4c328:	ret    
   4c329:	nop    DWORD PTR [rax+0x0]

000000000004c330 <check_dst_limits_calc_pos>:
   4c330:	mov    r10,rsi
   4c333:	mov    rsi,r8
   4c336:	lea    rax,[r10+r10*2]
   4c33a:	shl    rax,0x4
   4c33e:	add    rax,QWORD PTR [rdi+0xd8]
   4c345:	mov    r8,QWORD PTR [rax+0x10]
   4c349:	cmp    r8,rsi
   4c34c:	jg     4c390 <check_dst_limits_calc_pos+0x60>
   4c34e:	mov    rax,QWORD PTR [rax+0x18]
   4c352:	cmp    rax,rsi
   4c355:	jl     4c380 <check_dst_limits_calc_pos+0x50>
   4c357:	xor    r10d,r10d
   4c35a:	cmp    r8,rsi
   4c35d:	sete   r10b
   4c361:	cmp    rax,rsi
   4c364:	je     4c370 <check_dst_limits_calc_pos+0x40>
   4c366:	xor    eax,eax
   4c368:	cmp    r8,rsi
   4c36b:	je     4c374 <check_dst_limits_calc_pos+0x44>
   4c36d:	ret    
   4c36e:	xchg   ax,ax
   4c370:	or     r10d,0x2
   4c374:	mov    r8,r9
   4c377:	mov    esi,r10d
   4c37a:	jmp    4c110 <check_dst_limits_calc_pos_1>
   4c37f:	nop
   4c380:	mov    eax,0x1
   4c385:	ret    
   4c386:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c390:	mov    eax,0xffffffff
   4c395:	ret    
   4c396:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000004c3a0 <postorder>:
   4c3a0:	push   r12
   4c3a2:	mov    r12,rsi
   4c3a5:	push   rbp
   4c3a6:	mov    rbp,rdx
   4c3a9:	push   rbx
   4c3aa:	nop    WORD PTR [rax+rax*1+0x0]
   4c3b0:	mov    rbx,rdi
   4c3b3:	mov    rdi,QWORD PTR [rdi+0x8]
   4c3b7:	test   rdi,rdi
   4c3ba:	jne    4c3b0 <postorder+0x10>
   4c3bc:	mov    rdi,QWORD PTR [rbx+0x10]
   4c3c0:	test   rdi,rdi
   4c3c3:	jne    4c3b0 <postorder+0x10>
   4c3c5:	mov    rsi,rbx
   4c3c8:	mov    rdi,rbp
   4c3cb:	call   r12
   4c3ce:	test   eax,eax
   4c3d0:	jne    4c3fe <postorder+0x5e>
   4c3d2:	nop    WORD PTR [rax+rax*1+0x0]
   4c3d8:	mov    rdx,QWORD PTR [rbx]
   4c3db:	test   rdx,rdx
   4c3de:	je     4c3fe <postorder+0x5e>
   4c3e0:	mov    rdi,QWORD PTR [rdx+0x10]
   4c3e4:	test   rdi,rdi
   4c3e7:	je     4c3ee <postorder+0x4e>
   4c3e9:	cmp    rdi,rbx
   4c3ec:	jne    4c3b0 <postorder+0x10>
   4c3ee:	mov    rbx,rdx
   4c3f1:	mov    rdi,rbp
   4c3f4:	mov    rsi,rbx
   4c3f7:	call   r12
   4c3fa:	test   eax,eax
   4c3fc:	je     4c3d8 <postorder+0x38>
   4c3fe:	pop    rbx
   4c3ff:	pop    rbp
   4c400:	pop    r12
   4c402:	ret    
   4c403:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4c40e:	xchg   ax,ax

000000000004c410 <preorder>:
   4c410:	push   r12
   4c412:	mov    r12,rsi
   4c415:	push   rbp
   4c416:	mov    rbp,rdx
   4c419:	push   rbx
   4c41a:	mov    rbx,rdi
   4c41d:	jmp    4c423 <preorder+0x13>
   4c41f:	nop
   4c420:	mov    rbx,rdx
   4c423:	mov    rsi,rbx
   4c426:	mov    rdi,rbp
   4c429:	call   r12
   4c42c:	test   eax,eax
   4c42e:	jne    4c45c <preorder+0x4c>
   4c430:	mov    rdx,QWORD PTR [rbx+0x8]
   4c434:	test   rdx,rdx
   4c437:	jne    4c420 <preorder+0x10>
   4c439:	jmp    4c443 <preorder+0x33>
   4c43b:	nop    DWORD PTR [rax+rax*1+0x0]
   4c440:	mov    rbx,rcx
   4c443:	mov    rcx,QWORD PTR [rbx+0x10]
   4c447:	test   rcx,rcx
   4c44a:	je     4c451 <preorder+0x41>
   4c44c:	cmp    rcx,rdx
   4c44f:	jne    4c468 <preorder+0x58>
   4c451:	mov    rcx,QWORD PTR [rbx]
   4c454:	mov    rdx,rbx
   4c457:	test   rcx,rcx
   4c45a:	jne    4c440 <preorder+0x30>
   4c45c:	pop    rbx
   4c45d:	pop    rbp
   4c45e:	pop    r12
   4c460:	ret    
   4c461:	nop    DWORD PTR [rax+0x0]
   4c468:	mov    rdx,rcx
   4c46b:	jmp    4c420 <preorder+0x10>
   4c46d:	nop    DWORD PTR [rax]

000000000004c470 <re_string_realloc_buffers>:
   4c470:	push   rbp
   4c471:	mov    rbp,rsi
   4c474:	push   rbx
   4c475:	mov    rbx,rdi
   4c478:	sub    rsp,0x8
   4c47c:	cmp    DWORD PTR [rdi+0x90],0x1
   4c483:	jle    4c4cd <re_string_realloc_buffers+0x5d>
   4c485:	movabs rax,0x1fffffffffffffff
   4c48f:	cmp    rsi,rax
   4c492:	ja     4c500 <re_string_realloc_buffers+0x90>
   4c494:	mov    rdi,QWORD PTR [rdi+0x10]
   4c498:	lea    rsi,[rsi*4+0x0]
   4c4a0:	call   ca20 <realloc@plt>
   4c4a5:	test   rax,rax
   4c4a8:	je     4c500 <re_string_realloc_buffers+0x90>
   4c4aa:	mov    rdi,QWORD PTR [rbx+0x18]
   4c4ae:	mov    QWORD PTR [rbx+0x10],rax
   4c4b2:	test   rdi,rdi
   4c4b5:	je     4c4cd <re_string_realloc_buffers+0x5d>
   4c4b7:	lea    rsi,[rbp*8+0x0]
   4c4bf:	call   ca20 <realloc@plt>
   4c4c4:	test   rax,rax
   4c4c7:	je     4c500 <re_string_realloc_buffers+0x90>
   4c4c9:	mov    QWORD PTR [rbx+0x18],rax
   4c4cd:	cmp    BYTE PTR [rbx+0x8b],0x0
   4c4d4:	jne    4c4e8 <re_string_realloc_buffers+0x78>
   4c4d6:	mov    QWORD PTR [rbx+0x40],rbp
   4c4da:	add    rsp,0x8
   4c4de:	xor    eax,eax
   4c4e0:	pop    rbx
   4c4e1:	pop    rbp
   4c4e2:	ret    
   4c4e3:	nop    DWORD PTR [rax+rax*1+0x0]
   4c4e8:	mov    rdi,QWORD PTR [rbx+0x8]
   4c4ec:	mov    rsi,rbp
   4c4ef:	call   ca20 <realloc@plt>
   4c4f4:	test   rax,rax
   4c4f7:	je     4c500 <re_string_realloc_buffers+0x90>
   4c4f9:	mov    QWORD PTR [rbx+0x8],rax
   4c4fd:	jmp    4c4d6 <re_string_realloc_buffers+0x66>
   4c4ff:	nop
   4c500:	add    rsp,0x8
   4c504:	mov    eax,0xc
   4c509:	pop    rbx
   4c50a:	pop    rbp
   4c50b:	ret    
   4c50c:	nop    DWORD PTR [rax+0x0]

000000000004c510 <re_node_set_insert_last>:
   4c510:	push   rbp
   4c511:	mov    rbp,rsi
   4c514:	push   rbx
   4c515:	mov    rbx,rdi
   4c518:	sub    rsp,0x8
   4c51c:	mov    rsi,QWORD PTR [rdi+0x8]
   4c520:	mov    rdi,QWORD PTR [rdi+0x10]
   4c524:	cmp    QWORD PTR [rbx],rsi
   4c527:	je     4c548 <re_node_set_insert_last+0x38>
   4c529:	lea    rax,[rsi+0x1]
   4c52d:	mov    QWORD PTR [rbx+0x8],rax
   4c531:	mov    eax,0x1
   4c536:	mov    QWORD PTR [rdi+rsi*8],rbp
   4c53a:	add    rsp,0x8
   4c53e:	pop    rbx
   4c53f:	pop    rbp
   4c540:	ret    
   4c541:	nop    DWORD PTR [rax+0x0]
   4c548:	add    rsi,0x1
   4c54c:	lea    rax,[rsi+rsi*1]
   4c550:	shl    rsi,0x4
   4c554:	mov    QWORD PTR [rbx],rax
   4c557:	call   ca20 <realloc@plt>
   4c55c:	mov    rdi,rax
   4c55f:	test   rax,rax
   4c562:	je     4c570 <re_node_set_insert_last+0x60>
   4c564:	mov    QWORD PTR [rbx+0x10],rax
   4c568:	mov    rsi,QWORD PTR [rbx+0x8]
   4c56c:	jmp    4c529 <re_node_set_insert_last+0x19>
   4c56e:	xchg   ax,ax
   4c570:	xor    eax,eax
   4c572:	jmp    4c53a <re_node_set_insert_last+0x2a>
   4c574:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4c57f:	nop

000000000004c580 <re_node_set_insert>:
   4c580:	push   rbp
   4c581:	mov    rbp,rsi
   4c584:	push   rbx
   4c585:	mov    rbx,rdi
   4c588:	sub    rsp,0x8
   4c58c:	mov    rax,QWORD PTR [rdi]
   4c58f:	test   rax,rax
   4c592:	je     4c5b8 <re_node_set_insert+0x38>
   4c594:	mov    rsi,QWORD PTR [rdi+0x8]
   4c598:	mov    rdi,QWORD PTR [rdi+0x10]
   4c59c:	test   rsi,rsi
   4c59f:	jne    4c5f0 <re_node_set_insert+0x70>
   4c5a1:	mov    QWORD PTR [rdi],rbp
   4c5a4:	mov    eax,0x1
   4c5a9:	add    QWORD PTR [rbx+0x8],0x1
   4c5ae:	add    rsp,0x8
   4c5b2:	pop    rbx
   4c5b3:	pop    rbp
   4c5b4:	ret    
   4c5b5:	nop    DWORD PTR [rax]
   4c5b8:	mov    QWORD PTR [rdi],0x1
   4c5bf:	mov    QWORD PTR [rdi+0x8],0x1
   4c5c7:	mov    edi,0x8
   4c5cc:	call   c0e0 <malloc@plt>
   4c5d1:	mov    QWORD PTR [rbx+0x10],rax
   4c5d5:	test   rax,rax
   4c5d8:	je     4c668 <re_node_set_insert+0xe8>
   4c5de:	mov    QWORD PTR [rax],rbp
   4c5e1:	add    rsp,0x8
   4c5e5:	mov    eax,0x1
   4c5ea:	pop    rbx
   4c5eb:	pop    rbp
   4c5ec:	ret    
   4c5ed:	nop    DWORD PTR [rax]
   4c5f0:	cmp    rax,rsi
   4c5f3:	je     4c680 <re_node_set_insert+0x100>
   4c5f9:	lea    rdx,[rsi*8+0x0]
   4c601:	cmp    QWORD PTR [rdi],rbp
   4c604:	jle    4c640 <re_node_set_insert+0xc0>
   4c606:	test   rsi,rsi
   4c609:	jle    4c623 <re_node_set_insert+0xa3>
   4c60b:	add    rdx,rdi
   4c60e:	xchg   ax,ax
   4c610:	mov    rax,QWORD PTR [rdx-0x8]
   4c614:	sub    rdx,0x8
   4c618:	mov    QWORD PTR [rdx+0x8],rax
   4c61c:	cmp    rdx,rdi
   4c61f:	jne    4c610 <re_node_set_insert+0x90>
   4c621:	xor    edx,edx
   4c623:	mov    QWORD PTR [rdi+rdx*1],rbp
   4c627:	mov    eax,0x1
   4c62c:	add    QWORD PTR [rbx+0x8],0x1
   4c631:	jmp    4c5ae <re_node_set_insert+0x2e>
   4c636:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c640:	mov    rax,QWORD PTR [rdi+rdx*1-0x8]
   4c645:	cmp    rbp,rax
   4c648:	jge    4c623 <re_node_set_insert+0xa3>
   4c64a:	nop    WORD PTR [rax+rax*1+0x0]
   4c650:	mov    QWORD PTR [rdi+rdx*1],rax
   4c654:	sub    rdx,0x8
   4c658:	mov    rax,QWORD PTR [rdi+rdx*1-0x8]
   4c65d:	cmp    rax,rbp
   4c660:	jg     4c650 <re_node_set_insert+0xd0>
   4c662:	jmp    4c623 <re_node_set_insert+0xa3>
   4c664:	nop    DWORD PTR [rax+0x0]
   4c668:	mov    QWORD PTR [rbx+0x8],0x0
   4c670:	mov    QWORD PTR [rbx],0x0
   4c677:	jmp    4c5ae <re_node_set_insert+0x2e>
   4c67c:	nop    DWORD PTR [rax+0x0]
   4c680:	lea    rax,[rsi+rsi*1]
   4c684:	shl    rsi,0x4
   4c688:	mov    QWORD PTR [rbx],rax
   4c68b:	call   ca20 <realloc@plt>
   4c690:	mov    rdi,rax
   4c693:	test   rax,rax
   4c696:	je     4c6a5 <re_node_set_insert+0x125>
   4c698:	mov    QWORD PTR [rbx+0x10],rax
   4c69c:	mov    rsi,QWORD PTR [rbx+0x8]
   4c6a0:	jmp    4c5f9 <re_node_set_insert+0x79>
   4c6a5:	xor    eax,eax
   4c6a7:	jmp    4c5ae <re_node_set_insert+0x2e>
   4c6ac:	nop    DWORD PTR [rax+0x0]

000000000004c6b0 <register_state>:
   4c6b0:	push   r15
   4c6b2:	push   r14
   4c6b4:	mov    r14,rdi
   4c6b7:	push   r13
   4c6b9:	lea    r13,[rsi+0x20]
   4c6bd:	push   r12
   4c6bf:	mov    r12,rdx
   4c6c2:	push   rbp
   4c6c3:	mov    rbp,rsi
   4c6c6:	push   rbx
   4c6c7:	sub    rsp,0x8
   4c6cb:	mov    r15,QWORD PTR [rsi+0x10]
   4c6cf:	mov    QWORD PTR [rsi],rdx
   4c6d2:	mov    QWORD PTR [rsi+0x28],0x0
   4c6da:	mov    QWORD PTR [rsi+0x20],r15
   4c6de:	lea    rdi,[r15*8+0x0]
   4c6e6:	call   c0e0 <malloc@plt>
   4c6eb:	mov    QWORD PTR [rbp+0x30],rax
   4c6ef:	test   rax,rax
   4c6f2:	je     4c72e <register_state+0x7e>
   4c6f4:	xor    ebx,ebx
   4c6f6:	test   r15,r15
   4c6f9:	jg     4c70a <register_state+0x5a>
   4c6fb:	jmp    4c748 <register_state+0x98>
   4c6fd:	nop    DWORD PTR [rax]
   4c700:	add    rbx,0x1
   4c704:	cmp    QWORD PTR [rbp+0x10],rbx
   4c708:	jle    4c748 <register_state+0x98>
   4c70a:	mov    rax,QWORD PTR [rbp+0x18]
   4c70e:	mov    rsi,QWORD PTR [rax+rbx*8]
   4c712:	mov    rax,rsi
   4c715:	shl    rax,0x4
   4c719:	add    rax,QWORD PTR [r14]
   4c71c:	test   BYTE PTR [rax+0x8],0x8
   4c720:	jne    4c700 <register_state+0x50>
   4c722:	mov    rdi,r13
   4c725:	call   4c510 <re_node_set_insert_last>
   4c72a:	test   al,al
   4c72c:	jne    4c700 <register_state+0x50>
   4c72e:	add    rsp,0x8
   4c732:	mov    eax,0xc
   4c737:	pop    rbx
   4c738:	pop    rbp
   4c739:	pop    r12
   4c73b:	pop    r13
   4c73d:	pop    r14
   4c73f:	pop    r15
   4c741:	ret    
   4c742:	nop    WORD PTR [rax+rax*1+0x0]
   4c748:	mov    rax,QWORD PTR [r14+0x40]
   4c74c:	and    r12,QWORD PTR [r14+0x88]
   4c753:	lea    rdx,[r12+r12*2]
   4c757:	lea    rbx,[rax+rdx*8]
   4c75b:	mov    rax,QWORD PTR [rbx]
   4c75e:	mov    rdi,QWORD PTR [rbx+0x10]
   4c762:	lea    rsi,[rax+0x1]
   4c766:	cmp    QWORD PTR [rbx+0x8],rax
   4c76a:	jle    4c784 <register_state+0xd4>
   4c76c:	mov    QWORD PTR [rbx],rsi
   4c76f:	mov    QWORD PTR [rdi+rax*8],rbp
   4c773:	add    rsp,0x8
   4c777:	xor    eax,eax
   4c779:	pop    rbx
   4c77a:	pop    rbp
   4c77b:	pop    r12
   4c77d:	pop    r13
   4c77f:	pop    r14
   4c781:	pop    r15
   4c783:	ret    
   4c784:	lea    r12,[rsi+rsi*1]
   4c788:	shl    rsi,0x4
   4c78c:	call   ca20 <realloc@plt>
   4c791:	mov    rdi,rax
   4c794:	test   rax,rax
   4c797:	je     4c72e <register_state+0x7e>
   4c799:	mov    QWORD PTR [rbx+0x10],rax
   4c79d:	mov    rax,QWORD PTR [rbx]
   4c7a0:	mov    QWORD PTR [rbx+0x8],r12
   4c7a4:	lea    rsi,[rax+0x1]
   4c7a8:	jmp    4c76c <register_state+0xbc>
   4c7aa:	nop    WORD PTR [rax+rax*1+0x0]

000000000004c7b0 <build_wcs_buffer>:
   4c7b0:	push   r15
   4c7b2:	push   r14
   4c7b4:	push   r13
   4c7b6:	push   r12
   4c7b8:	push   rbp
   4c7b9:	push   rbx
   4c7ba:	mov    rbx,rdi
   4c7bd:	sub    rsp,0x68
   4c7c1:	mov    r12,QWORD PTR [rdi+0x58]
   4c7c5:	mov    rbp,QWORD PTR [rdi+0x30]
   4c7c9:	mov    rax,QWORD PTR fs:0x28
   4c7d2:	mov    QWORD PTR [rsp+0x58],rax
   4c7d7:	xor    eax,eax
   4c7d9:	cmp    QWORD PTR [rdi+0x40],r12
   4c7dd:	cmovle r12,QWORD PTR [rdi+0x40]
   4c7e2:	cmp    r12,rbp
   4c7e5:	jle    4c888 <build_wcs_buffer+0xd8>
   4c7eb:	lea    r14,[rdi+0x20]
   4c7ef:	lea    r13,[rsp+0xc]
   4c7f4:	nop    DWORD PTR [rax+0x0]
   4c7f8:	mov    rcx,QWORD PTR [rbx+0x78]
   4c7fc:	mov    r8,r12
   4c7ff:	mov    r15,QWORD PTR [rbx+0x20]
   4c803:	sub    r8,rbp
   4c806:	test   rcx,rcx
   4c809:	jne    4c900 <build_wcs_buffer+0x150>
   4c80f:	mov    rsi,QWORD PTR [rbx+0x28]
   4c813:	add    rsi,rbp
   4c816:	add    rsi,QWORD PTR [rbx]
   4c819:	mov    rdx,r8
   4c81c:	mov    rcx,r14
   4c81f:	mov    rdi,r13
   4c822:	call   4bee0 <rpl_mbrtowc>
   4c827:	lea    rdx,[rax-0x1]
   4c82b:	cmp    rdx,0xfffffffffffffffd
   4c82f:	ja     4c8b8 <build_wcs_buffer+0x108>
   4c835:	mov    ecx,DWORD PTR [rsp+0xc]
   4c839:	cmp    rax,0xfffffffffffffffe
   4c83d:	je     4c968 <build_wcs_buffer+0x1b8>
   4c843:	mov    rdx,QWORD PTR [rbx+0x10]
   4c847:	lea    rsi,[rbp+0x1]
   4c84b:	lea    rdi,[rbp*4+0x0]
   4c853:	mov    DWORD PTR [rdx+rbp*4],ecx
   4c856:	add    rbp,rax
   4c859:	cmp    rsi,rbp
   4c85c:	jge    4c8e8 <build_wcs_buffer+0x138>
   4c862:	lea    rax,[rdx+rdi*1+0x4]
   4c867:	lea    rdx,[rdx+rbp*4]
   4c86b:	nop    DWORD PTR [rax+rax*1+0x0]
   4c870:	mov    DWORD PTR [rax],0xffffffff
   4c876:	add    rax,0x4
   4c87a:	cmp    rdx,rax
   4c87d:	jne    4c870 <build_wcs_buffer+0xc0>
   4c87f:	cmp    rbp,r12
   4c882:	jl     4c7f8 <build_wcs_buffer+0x48>
   4c888:	mov    QWORD PTR [rbx+0x30],rbp
   4c88c:	mov    QWORD PTR [rbx+0x38],rbp
   4c890:	mov    rax,QWORD PTR [rsp+0x58]
   4c895:	xor    rax,QWORD PTR fs:0x28
   4c89e:	jne    4c98c <build_wcs_buffer+0x1dc>
   4c8a4:	add    rsp,0x68
   4c8a8:	pop    rbx
   4c8a9:	pop    rbp
   4c8aa:	pop    r12
   4c8ac:	pop    r13
   4c8ae:	pop    r14
   4c8b0:	pop    r15
   4c8b2:	ret    
   4c8b3:	nop    DWORD PTR [rax+rax*1+0x0]
   4c8b8:	mov    rax,QWORD PTR [rbx]
   4c8bb:	mov    rdx,QWORD PTR [rbx+0x78]
   4c8bf:	add    rax,rbp
   4c8c2:	add    rax,QWORD PTR [rbx+0x28]
   4c8c6:	movzx  ecx,BYTE PTR [rax]
   4c8c9:	mov    DWORD PTR [rsp+0xc],ecx
   4c8cd:	test   rdx,rdx
   4c8d0:	jne    4c97f <build_wcs_buffer+0x1cf>
   4c8d6:	mov    QWORD PTR [rbx+0x20],r15
   4c8da:	mov    eax,0x1
   4c8df:	jmp    4c843 <build_wcs_buffer+0x93>
   4c8e4:	nop    DWORD PTR [rax+0x0]
   4c8e8:	mov    rbp,rsi
   4c8eb:	cmp    rbp,r12
   4c8ee:	jl     4c7f8 <build_wcs_buffer+0x48>
   4c8f4:	jmp    4c888 <build_wcs_buffer+0xd8>
   4c8f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4c900:	mov    eax,DWORD PTR [rbx+0x90]
   4c906:	lea    rsi,[rsp+0x10]
   4c90b:	test   eax,eax
   4c90d:	jle    4c819 <build_wcs_buffer+0x69>
   4c913:	xor    eax,eax
   4c915:	lea    rsi,[rsp+0x10]
   4c91a:	jmp    4c931 <build_wcs_buffer+0x181>
   4c91c:	nop    DWORD PTR [rax+0x0]
   4c920:	add    rax,0x1
   4c924:	cmp    r8,rax
   4c927:	je     4c819 <build_wcs_buffer+0x69>
   4c92d:	mov    rcx,QWORD PTR [rbx+0x78]
   4c931:	mov    rdx,QWORD PTR [rbx]
   4c934:	add    rdx,rbp
   4c937:	add    rdx,rax
   4c93a:	add    rdx,QWORD PTR [rbx+0x28]
   4c93e:	movzx  edx,BYTE PTR [rdx]
   4c941:	movzx  edx,BYTE PTR [rcx+rdx*1]
   4c945:	mov    rcx,QWORD PTR [rbx+0x8]
   4c949:	add    rcx,rbp
   4c94c:	mov    BYTE PTR [rcx+rax*1],dl
   4c94f:	mov    BYTE PTR [rsi+rax*1],dl
   4c952:	lea    edx,[rax+0x1]
   4c955:	cmp    DWORD PTR [rbx+0x90],edx
   4c95b:	jg     4c920 <build_wcs_buffer+0x170>
   4c95d:	jmp    4c819 <build_wcs_buffer+0x69>
   4c962:	nop    WORD PTR [rax+rax*1+0x0]
   4c968:	mov    rax,QWORD PTR [rbx+0x58]
   4c96c:	cmp    QWORD PTR [rbx+0x40],rax
   4c970:	jge    4c8b8 <build_wcs_buffer+0x108>
   4c976:	mov    QWORD PTR [rbx+0x20],r15
   4c97a:	jmp    4c888 <build_wcs_buffer+0xd8>
   4c97f:	movzx  ecx,BYTE PTR [rdx+rcx*1]
   4c983:	mov    DWORD PTR [rsp+0xc],ecx
   4c987:	jmp    4c8d6 <build_wcs_buffer+0x126>
   4c98c:	call   c7b0 <__stack_chk_fail@plt>
   4c991:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4c99c:	nop    DWORD PTR [rax+0x0]

000000000004c9a0 <build_wcs_upper_buffer>:
   4c9a0:	push   r15
   4c9a2:	push   r14
   4c9a4:	mov    r14,rdi
   4c9a7:	push   r13
   4c9a9:	push   r12
   4c9ab:	push   rbp
   4c9ac:	push   rbx
   4c9ad:	sub    rsp,0x98
   4c9b4:	mov    rbx,QWORD PTR [rdi+0x58]
   4c9b8:	mov    r15,QWORD PTR [rdi+0x30]
   4c9bc:	mov    rax,QWORD PTR fs:0x28
   4c9c5:	mov    QWORD PTR [rsp+0x88],rax
   4c9cd:	xor    eax,eax
   4c9cf:	cmp    QWORD PTR [rdi+0x40],rbx
   4c9d3:	cmovle rbx,QWORD PTR [rdi+0x40]
   4c9d8:	cmp    BYTE PTR [rdi+0x8a],0x0
   4c9df:	jne    4c9ec <build_wcs_upper_buffer+0x4c>
   4c9e1:	cmp    QWORD PTR [rdi+0x78],0x0
   4c9e6:	je     4cb80 <build_wcs_upper_buffer+0x1e0>
   4c9ec:	mov    r12,QWORD PTR [r14+0x38]
   4c9f0:	cmp    r15,rbx
   4c9f3:	jl     4ca30 <build_wcs_upper_buffer+0x90>
   4c9f5:	mov    QWORD PTR [r14+0x30],r15
   4c9f9:	xor    eax,eax
   4c9fb:	mov    QWORD PTR [r14+0x38],r12
   4c9ff:	mov    rbx,QWORD PTR [rsp+0x88]
   4ca07:	xor    rbx,QWORD PTR fs:0x28
   4ca10:	jne    4d00d <build_wcs_upper_buffer+0x66d>
   4ca16:	add    rsp,0x98
   4ca1d:	pop    rbx
   4ca1e:	pop    rbp
   4ca1f:	pop    r12
   4ca21:	pop    r13
   4ca23:	pop    r14
   4ca25:	pop    r15
   4ca27:	ret    
   4ca28:	nop    DWORD PTR [rax+rax*1+0x0]
   4ca30:	lea    rax,[r14+0x20]
   4ca34:	mov    QWORD PTR [rsp+0x8],rax
   4ca39:	mov    rax,rbx
   4ca3c:	sub    rax,r15
   4ca3f:	mov    QWORD PTR [rsp+0x18],rax
   4ca44:	lea    rax,[rsp+0x34]
   4ca49:	mov    QWORD PTR [rsp+0x20],rax
   4ca4e:	mov    rax,QWORD PTR [r14+0x20]
   4ca52:	mov    rdx,QWORD PTR [r14+0x78]
   4ca56:	mov    QWORD PTR [rsp+0x38],rax
   4ca5b:	test   rdx,rdx
   4ca5e:	jne    4cd8f <build_wcs_upper_buffer+0x3ef>
   4ca64:	mov    rbp,QWORD PTR [r14+0x28]
   4ca68:	add    rbp,r12
   4ca6b:	add    rbp,QWORD PTR [r14]
   4ca6e:	mov    rcx,QWORD PTR [rsp+0x8]
   4ca73:	mov    rdx,QWORD PTR [rsp+0x18]
   4ca78:	mov    rsi,rbp
   4ca7b:	mov    rdi,QWORD PTR [rsp+0x20]
   4ca80:	call   4bee0 <rpl_mbrtowc>
   4ca85:	mov    r13,rax
   4ca88:	lea    rax,[rax-0x1]
   4ca8c:	mov    QWORD PTR [rsp+0x10],rax
   4ca91:	cmp    rax,0xfffffffffffffffc
   4ca95:	ja     4ce11 <build_wcs_upper_buffer+0x471>
   4ca9b:	mov    edx,DWORD PTR [rsp+0x34]
   4ca9f:	mov    edi,edx
   4caa1:	mov    DWORD PTR [rsp+0x8],edx
   4caa5:	call   c450 <towupper@plt>
   4caaa:	mov    edx,DWORD PTR [rsp+0x8]
   4caae:	cmp    edx,eax
   4cab0:	je     4cde8 <build_wcs_upper_buffer+0x448>
   4cab6:	lea    r10,[rsp+0x40]
   4cabb:	lea    rdx,[rsp+0x38]
   4cac0:	mov    esi,eax
   4cac2:	mov    DWORD PTR [rsp+0x18],eax
   4cac6:	mov    rdi,r10
   4cac9:	mov    QWORD PTR [rsp+0x8],r10
   4cace:	mov    QWORD PTR [rsp+0x20],r15
   4cad3:	call   c650 <wcrtomb@plt>
   4cad8:	mov    r10,QWORD PTR [rsp+0x8]
   4cadd:	mov    ecx,DWORD PTR [rsp+0x18]
   4cae1:	cmp    r13,rax
   4cae4:	mov    r8,QWORD PTR [rsp+0x20]
   4cae9:	mov    rdx,rax
   4caec:	jne    4cea8 <build_wcs_upper_buffer+0x508>
   4caf2:	mov    rdi,QWORD PTR [r14+0x8]
   4caf6:	mov    rdx,r13
   4caf9:	mov    rsi,r10
   4cafc:	mov    QWORD PTR [rsp+0x10],r8
   4cb01:	mov    DWORD PTR [rsp+0x8],ecx
   4cb05:	add    rdi,r15
   4cb08:	call   cb30 <memcpy@plt>
   4cb0d:	mov    ecx,DWORD PTR [rsp+0x8]
   4cb11:	mov    r8,QWORD PTR [rsp+0x10]
   4cb16:	cmp    BYTE PTR [r14+0x8c],0x0
   4cb1e:	lea    rax,[r13+r12*1+0x0]
   4cb23:	jne    4ce88 <build_wcs_upper_buffer+0x4e8>
   4cb29:	mov    rdx,QWORD PTR [r14+0x10]
   4cb2d:	add    r15,0x1
   4cb31:	mov    r12,rax
   4cb34:	lea    rax,[r8*4+0x0]
   4cb3c:	mov    DWORD PTR [rdx+r8*4],ecx
   4cb40:	lea    rcx,[r13+r8*1+0x0]
   4cb45:	cmp    r15,rcx
   4cb48:	jge    4c9f0 <build_wcs_upper_buffer+0x50>
   4cb4e:	lea    rax,[rdx+rax*1+0x4]
   4cb53:	lea    rdx,[rdx+rcx*4]
   4cb57:	nop    WORD PTR [rax+rax*1+0x0]
   4cb60:	mov    DWORD PTR [rax],0xffffffff
   4cb66:	add    rax,0x4
   4cb6a:	cmp    rdx,rax
   4cb6d:	jne    4cb60 <build_wcs_upper_buffer+0x1c0>
   4cb6f:	mov    r15,rcx
   4cb72:	jmp    4c9f0 <build_wcs_upper_buffer+0x50>
   4cb77:	nop    WORD PTR [rax+rax*1+0x0]
   4cb80:	cmp    BYTE PTR [rdi+0x8c],0x0
   4cb87:	jne    4c9ec <build_wcs_upper_buffer+0x4c>
   4cb8d:	cmp    r15,rbx
   4cb90:	jge    4ccdb <build_wcs_upper_buffer+0x33b>
   4cb96:	lea    rax,[rdi+0x20]
   4cb9a:	mov    QWORD PTR [rsp+0x8],rax
   4cb9f:	lea    rax,[rsp+0x34]
   4cba4:	mov    QWORD PTR [rsp+0x28],rax
   4cba9:	nop    DWORD PTR [rax+0x0]
   4cbb0:	mov    r12,QWORD PTR [r14]
   4cbb3:	mov    rsi,QWORD PTR [r14+0x28]
   4cbb7:	mov    rbp,r15
   4cbba:	lea    rax,[r12+rsi*1]
   4cbbe:	movzx  eax,BYTE PTR [rax+r15*1]
   4cbc3:	mov    DWORD PTR [rsp+0x10],eax
   4cbc7:	mov    r13d,eax
   4cbca:	test   al,0x80
   4cbcc:	jne    4cbff <build_wcs_upper_buffer+0x25f>
   4cbce:	mov    rdi,QWORD PTR [rsp+0x8]
   4cbd3:	mov    QWORD PTR [rsp+0x18],rsi
   4cbd8:	call   c730 <mbsinit@plt>
   4cbdd:	mov    rsi,QWORD PTR [rsp+0x18]
   4cbe2:	test   eax,eax
   4cbe4:	je     4cbff <build_wcs_upper_buffer+0x25f>
   4cbe6:	mov    edi,DWORD PTR [rsp+0x10]
   4cbea:	call   c450 <towupper@plt>
   4cbef:	mov    rsi,QWORD PTR [rsp+0x18]
   4cbf4:	test   eax,0xffffff80
   4cbf9:	je     4cd10 <build_wcs_upper_buffer+0x370>
   4cbff:	mov    rax,QWORD PTR [r14+0x20]
   4cc03:	mov    rdi,QWORD PTR [rsp+0x28]
   4cc08:	mov    rdx,rbx
   4cc0b:	add    rsi,r15
   4cc0e:	mov    rcx,QWORD PTR [rsp+0x8]
   4cc13:	sub    rdx,r15
   4cc16:	add    rsi,r12
   4cc19:	mov    QWORD PTR [rsp+0x18],rdx
   4cc1e:	mov    QWORD PTR [rsp+0x38],rax
   4cc23:	mov    QWORD PTR [rsp+0x20],rdi
   4cc28:	call   4bee0 <rpl_mbrtowc>
   4cc2d:	mov    r12,rax
   4cc30:	lea    rax,[rax-0x1]
   4cc34:	cmp    rax,0xfffffffffffffffc
   4cc38:	ja     4cd30 <build_wcs_upper_buffer+0x390>
   4cc3e:	mov    edx,DWORD PTR [rsp+0x34]
   4cc42:	mov    edi,edx
   4cc44:	mov    DWORD PTR [rsp+0x10],edx
   4cc48:	call   c450 <towupper@plt>
   4cc4d:	mov    edx,DWORD PTR [rsp+0x10]
   4cc51:	mov    r13d,eax
   4cc54:	cmp    edx,eax
   4cc56:	je     4ccf0 <build_wcs_upper_buffer+0x350>
   4cc5c:	lea    r10,[rsp+0x40]
   4cc61:	lea    rdx,[rsp+0x38]
   4cc66:	mov    esi,eax
   4cc68:	mov    rdi,r10
   4cc6b:	mov    QWORD PTR [rsp+0x10],r10
   4cc70:	call   c650 <wcrtomb@plt>
   4cc75:	cmp    r12,rax
   4cc78:	jne    4cde0 <build_wcs_upper_buffer+0x440>
   4cc7e:	mov    rdi,QWORD PTR [r14+0x8]
   4cc82:	mov    r10,QWORD PTR [rsp+0x10]
   4cc87:	mov    rdx,r12
   4cc8a:	add    rdi,r15
   4cc8d:	mov    rsi,r10
   4cc90:	call   cb30 <memcpy@plt>
   4cc95:	mov    rax,QWORD PTR [r14+0x10]
   4cc99:	lea    rdx,[rbp*4+0x0]
   4cca1:	add    r15,0x1
   4cca5:	mov    DWORD PTR [rax+rbp*4],r13d
   4cca9:	add    rbp,r12
   4ccac:	cmp    r15,rbp
   4ccaf:	jge    4ccd2 <build_wcs_upper_buffer+0x332>
   4ccb1:	lea    rdx,[rax+rdx*1+0x4]
   4ccb6:	lea    rcx,[rax+rbp*4]
   4ccba:	nop    WORD PTR [rax+rax*1+0x0]
   4ccc0:	mov    DWORD PTR [rdx],0xffffffff
   4ccc6:	add    rdx,0x4
   4ccca:	cmp    rcx,rdx
   4cccd:	jne    4ccc0 <build_wcs_upper_buffer+0x320>
   4cccf:	mov    r15,rbp
   4ccd2:	cmp    r15,rbx
   4ccd5:	jl     4cbb0 <build_wcs_upper_buffer+0x210>
   4ccdb:	mov    QWORD PTR [r14+0x30],r15
   4ccdf:	xor    eax,eax
   4cce1:	mov    QWORD PTR [r14+0x38],r15
   4cce5:	jmp    4c9ff <build_wcs_upper_buffer+0x5f>
   4ccea:	nop    WORD PTR [rax+rax*1+0x0]
   4ccf0:	mov    rdi,QWORD PTR [r14+0x8]
   4ccf4:	mov    rsi,QWORD PTR [r14+0x28]
   4ccf8:	mov    rdx,r12
   4ccfb:	add    rsi,r15
   4ccfe:	add    rdi,r15
   4cd01:	add    rsi,QWORD PTR [r14]
   4cd04:	call   cb30 <memcpy@plt>
   4cd09:	jmp    4cc95 <build_wcs_upper_buffer+0x2f5>
   4cd0b:	nop    DWORD PTR [rax+rax*1+0x0]
   4cd10:	mov    rdx,QWORD PTR [r14+0x8]
   4cd14:	mov    BYTE PTR [rdx+r15*1],al
   4cd18:	mov    rdx,QWORD PTR [r14+0x10]
   4cd1c:	mov    DWORD PTR [rdx+r15*4],eax
   4cd20:	add    r15,0x1
   4cd24:	jmp    4ccd2 <build_wcs_upper_buffer+0x332>
   4cd26:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4cd30:	cmp    rax,0xfffffffffffffffd
   4cd34:	je     4cd65 <build_wcs_upper_buffer+0x3c5>
   4cd36:	mov    rax,QWORD PTR [r14+0x8]
   4cd3a:	mov    ecx,DWORD PTR [rsp+0x10]
   4cd3e:	mov    BYTE PTR [rax+r15*1],r13b
   4cd42:	mov    rax,QWORD PTR [r14+0x10]
   4cd46:	add    r15,0x1
   4cd4a:	mov    DWORD PTR [rax+rbp*4],ecx
   4cd4d:	cmp    r12,0xffffffffffffffff
   4cd51:	jne    4ccd2 <build_wcs_upper_buffer+0x332>
   4cd57:	mov    rax,QWORD PTR [rsp+0x38]
   4cd5c:	mov    QWORD PTR [r14+0x20],rax
   4cd60:	jmp    4ccd2 <build_wcs_upper_buffer+0x332>
   4cd65:	mov    rax,QWORD PTR [r14+0x58]
   4cd69:	cmp    QWORD PTR [r14+0x40],rax
   4cd6d:	jl     4cf96 <build_wcs_upper_buffer+0x5f6>
   4cd73:	mov    rax,QWORD PTR [r14+0x8]
   4cd77:	mov    ecx,DWORD PTR [rsp+0x10]
   4cd7b:	mov    BYTE PTR [rax+r15*1],r13b
   4cd7f:	mov    rax,QWORD PTR [r14+0x10]
   4cd83:	add    r15,0x1
   4cd87:	mov    DWORD PTR [rax+rbp*4],ecx
   4cd8a:	jmp    4ccd2 <build_wcs_upper_buffer+0x332>
   4cd8f:	mov    eax,DWORD PTR [r14+0x90]
   4cd96:	test   eax,eax
   4cd98:	jle    4d012 <build_wcs_upper_buffer+0x672>
   4cd9e:	mov    rsi,QWORD PTR [r14+0x28]
   4cda2:	lea    edi,[rax-0x1]
   4cda5:	lea    r10,[rsp+0x40]
   4cdaa:	xor    eax,eax
   4cdac:	add    rsi,r12
   4cdaf:	add    rsi,QWORD PTR [r14]
   4cdb2:	jmp    4cdbf <build_wcs_upper_buffer+0x41f>
   4cdb4:	add    rax,0x1
   4cdb8:	cmp    QWORD PTR [rsp+0x18],rax
   4cdbd:	je     4cdd0 <build_wcs_upper_buffer+0x430>
   4cdbf:	movzx  ecx,BYTE PTR [rsi+rax*1]
   4cdc3:	movzx  ecx,BYTE PTR [rdx+rcx*1]
   4cdc7:	mov    BYTE PTR [r10+rax*1],cl
   4cdcb:	cmp    rdi,rax
   4cdce:	jne    4cdb4 <build_wcs_upper_buffer+0x414>
   4cdd0:	mov    rbp,r10
   4cdd3:	jmp    4ca6e <build_wcs_upper_buffer+0xce>
   4cdd8:	nop    DWORD PTR [rax+rax*1+0x0]
   4cde0:	mov    r12,r15
   4cde3:	jmp    4ca4e <build_wcs_upper_buffer+0xae>
   4cde8:	mov    rdi,QWORD PTR [r14+0x8]
   4cdec:	mov    rdx,r13
   4cdef:	mov    rsi,rbp
   4cdf2:	mov    QWORD PTR [rsp+0x10],r15
   4cdf7:	mov    DWORD PTR [rsp+0x8],eax
   4cdfb:	add    rdi,r15
   4cdfe:	call   cb30 <memcpy@plt>
   4ce03:	mov    r8,QWORD PTR [rsp+0x10]
   4ce08:	mov    ecx,DWORD PTR [rsp+0x8]
   4ce0c:	jmp    4cb16 <build_wcs_upper_buffer+0x176>
   4ce11:	cmp    QWORD PTR [rsp+0x10],0xfffffffffffffffd
   4ce17:	jne    4ce27 <build_wcs_upper_buffer+0x487>
   4ce19:	mov    rax,QWORD PTR [r14+0x58]
   4ce1d:	cmp    QWORD PTR [r14+0x40],rax
   4ce21:	jl     4cf88 <build_wcs_upper_buffer+0x5e8>
   4ce27:	mov    rax,QWORD PTR [r14]
   4ce2a:	mov    rdx,QWORD PTR [r14+0x78]
   4ce2e:	add    rax,r12
   4ce31:	add    rax,QWORD PTR [r14+0x28]
   4ce35:	movzx  eax,BYTE PTR [rax]
   4ce38:	test   rdx,rdx
   4ce3b:	jne    4d029 <build_wcs_upper_buffer+0x689>
   4ce41:	mov    rdx,QWORD PTR [r14+0x8]
   4ce45:	mov    rcx,r15
   4ce48:	mov    BYTE PTR [rdx+r15*1],al
   4ce4c:	cmp    BYTE PTR [r14+0x8c],0x0
   4ce54:	jne    4d01c <build_wcs_upper_buffer+0x67c>
   4ce5a:	mov    rdx,QWORD PTR [r14+0x10]
   4ce5e:	add    r12,0x1
   4ce62:	add    r15,0x1
   4ce66:	mov    DWORD PTR [rdx+rcx*4],eax
   4ce69:	cmp    r13,0xffffffffffffffff
   4ce6d:	jne    4c9f0 <build_wcs_upper_buffer+0x50>
   4ce73:	mov    rax,QWORD PTR [rsp+0x38]
   4ce78:	mov    QWORD PTR [r14+0x20],rax
   4ce7c:	jmp    4c9f0 <build_wcs_upper_buffer+0x50>
   4ce81:	nop    DWORD PTR [rax+0x0]
   4ce88:	mov    rdx,QWORD PTR [r14+0x18]
   4ce8c:	mov    rsi,r15
   4ce8f:	sub    rsi,r12
   4ce92:	lea    rdx,[rdx+rsi*8]
   4ce96:	mov    QWORD PTR [rdx+r12*8],r12
   4ce9a:	add    r12,0x1
   4ce9e:	cmp    rax,r12
   4cea1:	jne    4ce96 <build_wcs_upper_buffer+0x4f6>
   4cea3:	jmp    4cb29 <build_wcs_upper_buffer+0x189>
   4cea8:	cmp    rax,0xffffffffffffffff
   4ceac:	je     4cfe4 <build_wcs_upper_buffer+0x644>
   4ceb2:	lea    rbp,[rax+r15*1]
   4ceb6:	mov    rax,QWORD PTR [r14+0x40]
   4ceba:	cmp    rbp,rax
   4cebd:	ja     4cf88 <build_wcs_upper_buffer+0x5e8>
   4cec3:	cmp    QWORD PTR [r14+0x18],0x0
   4cec8:	je     4cfa4 <build_wcs_upper_buffer+0x604>
   4cece:	cmp    BYTE PTR [r14+0x8c],0x0
   4ced6:	jne    4cef8 <build_wcs_upper_buffer+0x558>
   4ced8:	test   r15,r15
   4cedb:	je     4cef0 <build_wcs_upper_buffer+0x550>
   4cedd:	mov    rsi,QWORD PTR [r14+0x18]
   4cee1:	xor    eax,eax
   4cee3:	mov    QWORD PTR [rsi+rax*8],rax
   4cee7:	add    rax,0x1
   4ceeb:	cmp    rax,r15
   4ceee:	jne    4cee3 <build_wcs_upper_buffer+0x543>
   4cef0:	mov    BYTE PTR [r14+0x8c],0x1
   4cef8:	mov    rdi,QWORD PTR [r14+0x8]
   4cefc:	mov    rsi,r10
   4ceff:	mov    DWORD PTR [rsp+0x18],ecx
   4cf03:	mov    QWORD PTR [rsp+0x8],rdx
   4cf08:	add    rdi,r15
   4cf0b:	call   cb30 <memcpy@plt>
   4cf10:	mov    rax,QWORD PTR [r14+0x10]
   4cf14:	mov    ecx,DWORD PTR [rsp+0x18]
   4cf18:	mov    rdx,QWORD PTR [rsp+0x8]
   4cf1d:	lea    rdi,[rax+r15*4]
   4cf21:	mov    rax,QWORD PTR [r14+0x18]
   4cf25:	mov    DWORD PTR [rdi],ecx
   4cf27:	lea    rsi,[rax+r15*8]
   4cf2b:	mov    eax,0x1
   4cf30:	mov    QWORD PTR [rsi],r12
   4cf33:	cmp    rdx,0x1
   4cf37:	jbe    4cf5c <build_wcs_upper_buffer+0x5bc>
   4cf39:	mov    rcx,QWORD PTR [rsp+0x10]
   4cf3e:	cmp    rax,r13
   4cf41:	cmovb  rcx,rax
   4cf45:	add    rcx,r12
   4cf48:	mov    QWORD PTR [rsi+rax*8],rcx
   4cf4c:	mov    DWORD PTR [rdi+rax*4],0xffffffff
   4cf53:	add    rax,0x1
   4cf57:	cmp    rax,rdx
   4cf5a:	jne    4cf39 <build_wcs_upper_buffer+0x599>
   4cf5c:	mov    rbx,QWORD PTR [r14+0x58]
   4cf60:	sub    rdx,r13
   4cf63:	add    rbx,rdx
   4cf66:	mov    QWORD PTR [r14+0x58],rbx
   4cf6a:	cmp    QWORD PTR [r14+0x60],r12
   4cf6e:	jle    4cf74 <build_wcs_upper_buffer+0x5d4>
   4cf70:	add    QWORD PTR [r14+0x68],rdx
   4cf74:	cmp    QWORD PTR [r14+0x40],rbx
   4cf78:	mov    r15,rbp
   4cf7b:	cmovle rbx,QWORD PTR [r14+0x40]
   4cf80:	add    r12,r13
   4cf83:	jmp    4c9f0 <build_wcs_upper_buffer+0x50>
   4cf88:	mov    rax,QWORD PTR [rsp+0x38]
   4cf8d:	mov    QWORD PTR [r14+0x20],rax
   4cf91:	jmp    4c9f5 <build_wcs_upper_buffer+0x55>
   4cf96:	mov    rax,QWORD PTR [rsp+0x38]
   4cf9b:	mov    QWORD PTR [r14+0x20],rax
   4cf9f:	jmp    4ccdb <build_wcs_upper_buffer+0x33b>
   4cfa4:	lea    rdi,[rax*8+0x0]
   4cfac:	mov    QWORD PTR [rsp+0x20],r10
   4cfb1:	mov    QWORD PTR [rsp+0x18],rdx
   4cfb6:	mov    DWORD PTR [rsp+0x8],ecx
   4cfba:	call   c0e0 <malloc@plt>
   4cfbf:	mov    ecx,DWORD PTR [rsp+0x8]
   4cfc3:	mov    rdx,QWORD PTR [rsp+0x18]
   4cfc8:	test   rax,rax
   4cfcb:	mov    QWORD PTR [r14+0x18],rax
   4cfcf:	mov    r10,QWORD PTR [rsp+0x20]
   4cfd4:	jne    4cece <build_wcs_upper_buffer+0x52e>
   4cfda:	mov    eax,0xc
   4cfdf:	jmp    4c9ff <build_wcs_upper_buffer+0x5f>
   4cfe4:	mov    rdi,QWORD PTR [r14+0x8]
   4cfe8:	mov    rdx,r13
   4cfeb:	mov    rsi,rbp
   4cfee:	mov    QWORD PTR [rsp+0x10],r8
   4cff3:	mov    DWORD PTR [rsp+0x8],ecx
   4cff7:	add    rdi,r15
   4cffa:	call   cb30 <memcpy@plt>
   4cfff:	mov    ecx,DWORD PTR [rsp+0x8]
   4d003:	mov    r8,QWORD PTR [rsp+0x10]
   4d008:	jmp    4cb16 <build_wcs_upper_buffer+0x176>
   4d00d:	call   c7b0 <__stack_chk_fail@plt>
   4d012:	lea    r10,[rsp+0x40]
   4d017:	jmp    4cdd0 <build_wcs_upper_buffer+0x430>
   4d01c:	mov    rdx,QWORD PTR [r14+0x18]
   4d020:	mov    QWORD PTR [rdx+r15*8],r12
   4d024:	jmp    4ce5a <build_wcs_upper_buffer+0x4ba>
   4d029:	movzx  eax,BYTE PTR [rdx+rax*1]
   4d02d:	jmp    4ce41 <build_wcs_upper_buffer+0x4a1>
   4d032:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4d03d:	nop    DWORD PTR [rax]

000000000004d040 <build_upper_buffer>:
   4d040:	push   r12
   4d042:	mov    r12,QWORD PTR [rdi+0x58]
   4d046:	push   rbp
   4d047:	cmp    QWORD PTR [rdi+0x40],r12
   4d04b:	mov    rbp,rdi
   4d04e:	push   rbx
   4d04f:	cmovle r12,QWORD PTR [rdi+0x40]
   4d054:	mov    rbx,QWORD PTR [rdi+0x30]
   4d058:	cmp    r12,rbx
   4d05b:	jle    4d0b0 <build_upper_buffer+0x70>
   4d05d:	call   c2b0 <__ctype_toupper_loc@plt>
   4d062:	nop    WORD PTR [rax+rax*1+0x0]
   4d068:	mov    rdx,QWORD PTR [rbp+0x0]
   4d06c:	mov    rcx,QWORD PTR [rbp+0x78]
   4d070:	add    rdx,rbx
   4d073:	add    rdx,QWORD PTR [rbp+0x28]
   4d077:	movzx  edx,BYTE PTR [rdx]
   4d07a:	test   rcx,rcx
   4d07d:	jne    4d0a8 <build_upper_buffer+0x68>
   4d07f:	mov    rsi,QWORD PTR [rax]
   4d082:	mov    rcx,QWORD PTR [rbp+0x8]
   4d086:	mov    edx,DWORD PTR [rsi+rdx*4]
   4d089:	mov    BYTE PTR [rcx+rbx*1],dl
   4d08c:	add    rbx,0x1
   4d090:	cmp    r12,rbx
   4d093:	jne    4d068 <build_upper_buffer+0x28>
   4d095:	mov    QWORD PTR [rbp+0x30],r12
   4d099:	pop    rbx
   4d09a:	mov    QWORD PTR [rbp+0x38],r12
   4d09e:	pop    rbp
   4d09f:	pop    r12
   4d0a1:	ret    
   4d0a2:	nop    WORD PTR [rax+rax*1+0x0]
   4d0a8:	movzx  edx,BYTE PTR [rcx+rdx*1]
   4d0ac:	jmp    4d07f <build_upper_buffer+0x3f>
   4d0ae:	xchg   ax,ax
   4d0b0:	mov    r12,rbx
   4d0b3:	pop    rbx
   4d0b4:	mov    QWORD PTR [rbp+0x30],r12
   4d0b8:	mov    QWORD PTR [rbp+0x38],r12
   4d0bc:	pop    rbp
   4d0bd:	pop    r12
   4d0bf:	ret    

000000000004d0c0 <extend_buffers>:
   4d0c0:	movabs rdx,0xffffffffffffffe
   4d0ca:	push   r12
   4d0cc:	push   rbp
   4d0cd:	sub    rsp,0x8
   4d0d1:	mov    rax,QWORD PTR [rdi+0x40]
   4d0d5:	cmp    rax,rdx
   4d0d8:	ja     4d210 <extend_buffers+0x150>
   4d0de:	mov    rdx,QWORD PTR [rdi+0x58]
   4d0e2:	add    rax,rax
   4d0e5:	movsxd rsi,esi
   4d0e8:	mov    rbp,rdi
   4d0eb:	cmp    rax,rdx
   4d0ee:	cmovg  rax,rdx
   4d0f2:	cmp    rax,rsi
   4d0f5:	cmovge rsi,rax
   4d0f9:	call   4c470 <re_string_realloc_buffers>
   4d0fe:	mov    r12d,eax
   4d101:	test   eax,eax
   4d103:	jne    4d16b <extend_buffers+0xab>
   4d105:	mov    rdi,QWORD PTR [rbp+0xb8]
   4d10c:	test   rdi,rdi
   4d10f:	je     4d132 <extend_buffers+0x72>
   4d111:	mov    rax,QWORD PTR [rbp+0x40]
   4d115:	lea    rsi,[rax*8+0x8]
   4d11d:	call   ca20 <realloc@plt>
   4d122:	test   rax,rax
   4d125:	je     4d210 <extend_buffers+0x150>
   4d12b:	mov    QWORD PTR [rbp+0xb8],rax
   4d132:	cmp    BYTE PTR [rbp+0x88],0x0
   4d139:	mov    eax,DWORD PTR [rbp+0x90]
   4d13f:	je     4d180 <extend_buffers+0xc0>
   4d141:	mov    rdi,rbp
   4d144:	cmp    eax,0x1
   4d147:	jle    4d1f8 <extend_buffers+0x138>
   4d14d:	add    rsp,0x8
   4d151:	pop    rbp
   4d152:	pop    r12
   4d154:	jmp    4c9a0 <build_wcs_upper_buffer>
   4d159:	nop    DWORD PTR [rax+0x0]
   4d160:	mov    rsi,rax
   4d163:	mov    QWORD PTR [rbp+0x30],rsi
   4d167:	mov    QWORD PTR [rbp+0x38],rsi
   4d16b:	add    rsp,0x8
   4d16f:	mov    eax,r12d
   4d172:	pop    rbp
   4d173:	pop    r12
   4d175:	ret    
   4d176:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4d180:	cmp    eax,0x1
   4d183:	jg     4d1e0 <extend_buffers+0x120>
   4d185:	mov    rcx,QWORD PTR [rbp+0x78]
   4d189:	test   rcx,rcx
   4d18c:	je     4d16b <extend_buffers+0xab>
   4d18e:	mov    rsi,QWORD PTR [rbp+0x58]
   4d192:	mov    rax,QWORD PTR [rbp+0x30]
   4d196:	cmp    QWORD PTR [rbp+0x40],rsi
   4d19a:	cmovle rsi,QWORD PTR [rbp+0x40]
   4d19f:	cmp    rsi,rax
   4d1a2:	jg     4d1b4 <extend_buffers+0xf4>
   4d1a4:	jmp    4d160 <extend_buffers+0xa0>
   4d1a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4d1b0:	mov    rcx,QWORD PTR [rbp+0x78]
   4d1b4:	mov    rdx,QWORD PTR [rbp+0x0]
   4d1b8:	add    rdx,rax
   4d1bb:	add    rdx,QWORD PTR [rbp+0x28]
   4d1bf:	movzx  edx,BYTE PTR [rdx]
   4d1c2:	movzx  ecx,BYTE PTR [rcx+rdx*1]
   4d1c6:	mov    rdx,QWORD PTR [rbp+0x8]
   4d1ca:	mov    BYTE PTR [rdx+rax*1],cl
   4d1cd:	add    rax,0x1
   4d1d1:	cmp    rsi,rax
   4d1d4:	jne    4d1b0 <extend_buffers+0xf0>
   4d1d6:	mov    QWORD PTR [rbp+0x30],rsi
   4d1da:	mov    QWORD PTR [rbp+0x38],rsi
   4d1de:	jmp    4d16b <extend_buffers+0xab>
   4d1e0:	mov    rdi,rbp
   4d1e3:	call   4c7b0 <build_wcs_buffer>
   4d1e8:	add    rsp,0x8
   4d1ec:	mov    eax,r12d
   4d1ef:	pop    rbp
   4d1f0:	pop    r12
   4d1f2:	ret    
   4d1f3:	nop    DWORD PTR [rax+rax*1+0x0]
   4d1f8:	call   4d040 <build_upper_buffer>
   4d1fd:	add    rsp,0x8
   4d201:	mov    eax,r12d
   4d204:	pop    rbp
   4d205:	pop    r12
   4d207:	ret    
   4d208:	nop    DWORD PTR [rax+rax*1+0x0]
   4d210:	mov    r12d,0xc
   4d216:	add    rsp,0x8
   4d21a:	mov    eax,r12d
   4d21d:	pop    rbp
   4d21e:	pop    r12
   4d220:	ret    
   4d221:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4d22c:	nop    DWORD PTR [rax+0x0]

000000000004d230 <clean_state_log_if_needed>:
   4d230:	push   r12
   4d232:	push   rbp
   4d233:	mov    rbp,rsi
   4d236:	push   rbx
   4d237:	mov    rax,QWORD PTR [rdi+0x40]
   4d23b:	mov    rbx,rdi
   4d23e:	mov    r12,QWORD PTR [rdi+0xc0]
   4d245:	cmp    rax,rsi
   4d248:	jg     4d270 <clean_state_log_if_needed+0x40>
   4d24a:	cmp    rax,QWORD PTR [rdi+0x58]
   4d24e:	jge    4d270 <clean_state_log_if_needed+0x40>
   4d250:	lea    esi,[rbp+0x1]
   4d253:	mov    rdi,rbx
   4d256:	call   4d0c0 <extend_buffers>
   4d25b:	test   eax,eax
   4d25d:	jne    4d266 <clean_state_log_if_needed+0x36>
   4d25f:	cmp    r12,rbp
   4d262:	jl     4d290 <clean_state_log_if_needed+0x60>
   4d264:	xor    eax,eax
   4d266:	pop    rbx
   4d267:	pop    rbp
   4d268:	pop    r12
   4d26a:	ret    
   4d26b:	nop    DWORD PTR [rax+rax*1+0x0]
   4d270:	mov    rax,QWORD PTR [rbx+0x30]
   4d274:	cmp    rax,rbp
   4d277:	jg     4d25f <clean_state_log_if_needed+0x2f>
   4d279:	cmp    rax,QWORD PTR [rbx+0x58]
   4d27d:	jge    4d25f <clean_state_log_if_needed+0x2f>
   4d27f:	lea    esi,[rbp+0x1]
   4d282:	mov    rdi,rbx
   4d285:	call   4d0c0 <extend_buffers>
   4d28a:	test   eax,eax
   4d28c:	je     4d25f <clean_state_log_if_needed+0x2f>
   4d28e:	jmp    4d266 <clean_state_log_if_needed+0x36>
   4d290:	mov    rax,QWORD PTR [rbx+0xb8]
   4d297:	mov    rdx,rbp
   4d29a:	xor    esi,esi
   4d29c:	sub    rdx,r12
   4d29f:	shl    rdx,0x3
   4d2a3:	lea    rdi,[rax+r12*8+0x8]
   4d2a8:	call   bed0 <memset@plt>
   4d2ad:	mov    QWORD PTR [rbx+0xc0],rbp
   4d2b4:	jmp    4d264 <clean_state_log_if_needed+0x34>
   4d2b6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000004d2c0 <free_charset>:
   4d2c0:	push   rbp
   4d2c1:	mov    rbp,rdi
   4d2c4:	mov    rdi,QWORD PTR [rdi]
   4d2c7:	call   4bdc0 <rpl_free>
   4d2cc:	mov    rdi,QWORD PTR [rbp+0x8]
   4d2d0:	call   4bdc0 <rpl_free>
   4d2d5:	mov    rdi,QWORD PTR [rbp+0x10]
   4d2d9:	call   4bdc0 <rpl_free>
   4d2de:	mov    rdi,QWORD PTR [rbp+0x18]
   4d2e2:	call   4bdc0 <rpl_free>
   4d2e7:	mov    rdi,rbp
   4d2ea:	pop    rbp
   4d2eb:	jmp    4bdc0 <rpl_free>

000000000004d2f0 <free_token>:
   4d2f0:	mov    eax,DWORD PTR [rdi+0x8]
   4d2f3:	and    eax,0x400ff
   4d2f8:	cmp    eax,0x6
   4d2fb:	je     4d308 <free_token+0x18>
   4d2fd:	cmp    eax,0x3
   4d300:	je     4d310 <free_token+0x20>
   4d302:	ret    
   4d303:	nop    DWORD PTR [rax+rax*1+0x0]
   4d308:	mov    rdi,QWORD PTR [rdi]
   4d30b:	jmp    4d2c0 <free_charset>
   4d30d:	nop    DWORD PTR [rax]
   4d310:	mov    rdi,QWORD PTR [rdi]
   4d313:	jmp    4bdc0 <rpl_free>
   4d318:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004d320 <free_tree>:
   4d320:	endbr64 
   4d324:	sub    rsp,0x8
   4d328:	lea    rdi,[rsi+0x28]
   4d32c:	call   4d2f0 <free_token>
   4d331:	xor    eax,eax
   4d333:	add    rsp,0x8
   4d337:	ret    
   4d338:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004d340 <re_dfa_add_node>:
   4d340:	push   r15
   4d342:	push   r14
   4d344:	push   r13
   4d346:	push   r12
   4d348:	mov    r12,rsi
   4d34b:	push   rbp
   4d34c:	mov    rbp,rdx
   4d34f:	push   rbx
   4d350:	mov    rbx,rdi
   4d353:	sub    rsp,0x18
   4d357:	mov    rsi,QWORD PTR [rdi+0x10]
   4d35b:	mov    r13,QWORD PTR [rdi+0x8]
   4d35f:	cmp    rsi,r13
   4d362:	jae    4d410 <re_dfa_add_node+0xd0>
   4d368:	mov    r14,QWORD PTR [rdi+0x18]
   4d36c:	mov    r13,QWORD PTR [rdi+0x28]
   4d370:	mov    rax,rsi
   4d373:	mov    edx,ebp
   4d375:	and    edx,0xfffc00ff
   4d37b:	shl    rax,0x4
   4d37f:	add    rax,QWORD PTR [rbx]
   4d382:	cmp    bpl,0x6
   4d386:	mov    QWORD PTR [rax+0x8],rbp
   4d38a:	mov    QWORD PTR [rax],r12
   4d38d:	mov    DWORD PTR [rax+0x8],edx
   4d390:	sete   dl
   4d393:	cmp    bpl,0x5
   4d397:	jne    4d3a3 <re_dfa_add_node+0x63>
   4d399:	cmp    DWORD PTR [rbx+0xb4],0x1
   4d3a0:	setg   dl
   4d3a3:	mov    ecx,edx
   4d3a5:	movzx  edx,BYTE PTR [rax+0xa]
   4d3a9:	pxor   xmm0,xmm0
   4d3ad:	shl    ecx,0x4
   4d3b0:	and    edx,0xffffffef
   4d3b3:	or     edx,ecx
   4d3b5:	mov    BYTE PTR [rax+0xa],dl
   4d3b8:	mov    QWORD PTR [r14+rsi*8],0xffffffffffffffff
   4d3c0:	mov    rax,QWORD PTR [rbx+0x10]
   4d3c4:	lea    rax,[rax+rax*2]
   4d3c8:	lea    rax,[r13+rax*8+0x0]
   4d3cd:	mov    QWORD PTR [rax+0x10],0x0
   4d3d5:	movups XMMWORD PTR [rax],xmm0
   4d3d8:	mov    rax,QWORD PTR [rbx+0x10]
   4d3dc:	lea    rdx,[rax+rax*2]
   4d3e0:	mov    rax,QWORD PTR [rbx+0x30]
   4d3e4:	lea    rax,[rax+rdx*8]
   4d3e8:	mov    QWORD PTR [rax+0x10],0x0
   4d3f0:	movups XMMWORD PTR [rax],xmm0
   4d3f3:	mov    rax,QWORD PTR [rbx+0x10]
   4d3f7:	lea    rdx,[rax+0x1]
   4d3fb:	mov    QWORD PTR [rbx+0x10],rdx
   4d3ff:	add    rsp,0x18
   4d403:	pop    rbx
   4d404:	pop    rbp
   4d405:	pop    r12
   4d407:	pop    r13
   4d409:	pop    r14
   4d40b:	pop    r15
   4d40d:	ret    
   4d40e:	xchg   ax,ax
   4d410:	movabs rax,0xaaaaaaaaaaaaaaa
   4d41a:	lea    r15,[r13+r13*1+0x0]
   4d41f:	cmp    r15,rax
   4d422:	ja     4d502 <re_dfa_add_node+0x1c2>
   4d428:	mov    rsi,r13
   4d42b:	mov    rdi,QWORD PTR [rdi]
   4d42e:	shl    rsi,0x5
   4d432:	call   ca20 <realloc@plt>
   4d437:	test   rax,rax
   4d43a:	je     4d502 <re_dfa_add_node+0x1c2>
   4d440:	mov    QWORD PTR [rbx],rax
   4d443:	mov    rdi,QWORD PTR [rbx+0x18]
   4d447:	mov    rsi,r13
   4d44a:	shl    rsi,0x4
   4d44e:	mov    QWORD PTR [rsp],rsi
   4d452:	call   ca20 <realloc@plt>
   4d457:	mov    rdi,QWORD PTR [rbx+0x20]
   4d45b:	mov    rsi,QWORD PTR [rsp]
   4d45f:	mov    r14,rax
   4d462:	call   ca20 <realloc@plt>
   4d467:	mov    rdi,QWORD PTR [rbx+0x28]
   4d46b:	lea    rsi,[r15+r13*1]
   4d46f:	shl    rsi,0x4
   4d473:	mov    QWORD PTR [rsp+0x8],rax
   4d478:	mov    QWORD PTR [rsp],rsi
   4d47c:	call   ca20 <realloc@plt>
   4d481:	mov    rdi,QWORD PTR [rbx+0x30]
   4d485:	mov    rsi,QWORD PTR [rsp]
   4d489:	mov    r13,rax
   4d48c:	call   ca20 <realloc@plt>
   4d491:	test   r14,r14
   4d494:	mov    r8,QWORD PTR [rsp+0x8]
   4d499:	je     4d4d0 <re_dfa_add_node+0x190>
   4d49b:	test   r8,r8
   4d49e:	je     4d4d0 <re_dfa_add_node+0x190>
   4d4a0:	test   r13,r13
   4d4a3:	je     4d4d0 <re_dfa_add_node+0x190>
   4d4a5:	test   rax,rax
   4d4a8:	je     4d4d0 <re_dfa_add_node+0x190>
   4d4aa:	mov    QWORD PTR [rbx+0x18],r14
   4d4ae:	mov    rsi,QWORD PTR [rbx+0x10]
   4d4b2:	mov    QWORD PTR [rbx+0x20],r8
   4d4b6:	mov    QWORD PTR [rbx+0x28],r13
   4d4ba:	mov    QWORD PTR [rbx+0x30],rax
   4d4be:	mov    QWORD PTR [rbx+0x8],r15
   4d4c2:	jmp    4d370 <re_dfa_add_node+0x30>
   4d4c7:	nop    WORD PTR [rax+rax*1+0x0]
   4d4d0:	mov    rdi,r14
   4d4d3:	mov    QWORD PTR [rsp+0x8],rax
   4d4d8:	mov    QWORD PTR [rsp],r8
   4d4dc:	call   4bdc0 <rpl_free>
   4d4e1:	mov    r8,QWORD PTR [rsp]
   4d4e5:	mov    rdi,r8
   4d4e8:	call   4bdc0 <rpl_free>
   4d4ed:	mov    rdi,r13
   4d4f0:	call   4bdc0 <rpl_free>
   4d4f5:	mov    rax,QWORD PTR [rsp+0x8]
   4d4fa:	mov    rdi,rax
   4d4fd:	call   4bdc0 <rpl_free>
   4d502:	mov    rax,0xffffffffffffffff
   4d509:	jmp    4d3ff <re_dfa_add_node+0xbf>
   4d50e:	xchg   ax,ax

000000000004d510 <duplicate_node>:
   4d510:	push   r13
   4d512:	mov    r13,rsi
   4d515:	push   r12
   4d517:	shl    r13,0x4
   4d51b:	mov    r12,rdi
   4d51e:	push   rbp
   4d51f:	mov    rbp,rsi
   4d522:	push   rbx
   4d523:	mov    ebx,edx
   4d525:	sub    rsp,0x8
   4d529:	mov    rax,QWORD PTR [rdi]
   4d52c:	mov    rsi,QWORD PTR [rax+r13*1]
   4d530:	mov    rdx,QWORD PTR [rax+r13*1+0x8]
   4d535:	call   4d340 <re_dfa_add_node>
   4d53a:	cmp    rax,0xffffffffffffffff
   4d53e:	je     4d592 <duplicate_node+0x82>
   4d540:	mov    rdi,QWORD PTR [r12]
   4d544:	mov    rcx,rax
   4d547:	mov    edx,ebx
   4d549:	shl    rcx,0x4
   4d54d:	and    edx,0x3ff
   4d553:	add    rcx,rdi
   4d556:	mov    esi,edx
   4d558:	mov    edx,DWORD PTR [rcx+0x8]
   4d55b:	shl    esi,0x8
   4d55e:	and    edx,0xfffc00ff
   4d564:	or     edx,esi
   4d566:	mov    DWORD PTR [rcx+0x8],edx
   4d569:	or     bx,WORD PTR [rdi+r13*1+0x9]
   4d56f:	and    edx,0xfff800ff
   4d575:	and    ebx,0x3ff
   4d57b:	shl    ebx,0x8
   4d57e:	or     ebx,0x40000
   4d584:	or     ebx,edx
   4d586:	mov    rdx,QWORD PTR [r12+0x20]
   4d58b:	mov    DWORD PTR [rcx+0x8],ebx
   4d58e:	mov    QWORD PTR [rdx+rax*8],rbp
   4d592:	add    rsp,0x8
   4d596:	pop    rbx
   4d597:	pop    rbp
   4d598:	pop    r12
   4d59a:	pop    r13
   4d59c:	ret    
   4d59d:	nop    DWORD PTR [rax]

000000000004d5a0 <duplicate_node_closure>:
   4d5a0:	push   r15
   4d5a2:	mov    r10,rsi
   4d5a5:	push   r14
   4d5a7:	push   r13
   4d5a9:	mov    r13d,r8d
   4d5ac:	push   r12
   4d5ae:	push   rbp
   4d5af:	mov    rbp,rdi
   4d5b2:	push   rbx
   4d5b3:	mov    rbx,rdx
   4d5b6:	sub    rsp,0x18
   4d5ba:	mov    QWORD PTR [rsp+0x8],rcx
   4d5bf:	mov    rdx,QWORD PTR [rbp+0x0]
   4d5c3:	mov    rax,r10
   4d5c6:	mov    rdi,QWORD PTR [rbp+0x28]
   4d5ca:	mov    r14,rbx
   4d5cd:	shl    rax,0x4
   4d5d1:	add    rax,rdx
   4d5d4:	cmp    BYTE PTR [rax+0x8],0x4
   4d5d8:	je     4d740 <duplicate_node_closure+0x1a0>
   4d5de:	lea    r15,[r10+r10*2]
   4d5e2:	shl    r15,0x3
   4d5e6:	lea    rsi,[rdi+r15*1]
   4d5ea:	mov    rcx,QWORD PTR [rsi+0x8]
   4d5ee:	test   rcx,rcx
   4d5f1:	je     4d7f8 <duplicate_node_closure+0x258>
   4d5f7:	lea    r12,[rbx+rbx*2]
   4d5fb:	mov    rsi,QWORD PTR [rsi+0x10]
   4d5ff:	shl    r12,0x3
   4d603:	add    rdi,r12
   4d606:	mov    r14,QWORD PTR [rsi]
   4d609:	mov    QWORD PTR [rdi+0x8],0x0
   4d611:	cmp    rcx,0x1
   4d615:	je     4d6f0 <duplicate_node_closure+0x150>
   4d61b:	mov    rcx,QWORD PTR [rbp+0x10]
   4d61f:	lea    rsi,[rcx-0x1]
   4d623:	mov    rax,rsi
   4d626:	shl    rax,0x4
   4d62a:	add    rax,rdx
   4d62d:	test   BYTE PTR [rax+0xa],0x4
   4d631:	je     4d7a0 <duplicate_node_closure+0x200>
   4d637:	test   rsi,rsi
   4d63a:	jle    4d7a0 <duplicate_node_closure+0x200>
   4d640:	shl    rcx,0x4
   4d644:	sub    rdx,rax
   4d647:	mov    r8,QWORD PTR [rbp+0x20]
   4d64b:	lea    rcx,[rdx+rcx*1-0x20]
   4d650:	jmp    4d672 <duplicate_node_closure+0xd2>
   4d652:	nop    WORD PTR [rax+rax*1+0x0]
   4d658:	add    rax,rcx
   4d65b:	sub    rsi,0x1
   4d65f:	test   BYTE PTR [rax+0xa],0x4
   4d663:	je     4d7a0 <duplicate_node_closure+0x200>
   4d669:	test   rsi,rsi
   4d66c:	jle    4d7a0 <duplicate_node_closure+0x200>
   4d672:	cmp    QWORD PTR [r8+rsi*8],r14
   4d676:	jne    4d658 <duplicate_node_closure+0xb8>
   4d678:	mov    edx,DWORD PTR [rax+0x8]
   4d67b:	shr    edx,0x8
   4d67e:	and    edx,0x3ff
   4d684:	cmp    r13d,edx
   4d687:	jne    4d658 <duplicate_node_closure+0xb8>
   4d689:	call   4c580 <re_node_set_insert>
   4d68e:	test   al,al
   4d690:	je     4d6d5 <duplicate_node_closure+0x135>
   4d692:	mov    rax,QWORD PTR [rbp+0x28]
   4d696:	mov    edx,r13d
   4d699:	mov    rdi,rbp
   4d69c:	mov    rax,QWORD PTR [rax+r15*1+0x10]
   4d6a1:	mov    r10,QWORD PTR [rax+0x8]
   4d6a5:	mov    rsi,r10
   4d6a8:	mov    QWORD PTR [rsp],r10
   4d6ac:	call   4d510 <duplicate_node>
   4d6b1:	mov    rbx,rax
   4d6b4:	cmp    rax,0xffffffffffffffff
   4d6b8:	je     4d6d5 <duplicate_node_closure+0x135>
   4d6ba:	mov    rdi,r12
   4d6bd:	add    rdi,QWORD PTR [rbp+0x28]
   4d6c1:	mov    rsi,rbx
   4d6c4:	call   4c580 <re_node_set_insert>
   4d6c9:	mov    r10,QWORD PTR [rsp]
   4d6cd:	test   al,al
   4d6cf:	jne    4d5bf <duplicate_node_closure+0x1f>
   4d6d5:	mov    eax,0xc
   4d6da:	add    rsp,0x18
   4d6de:	pop    rbx
   4d6df:	pop    rbp
   4d6e0:	pop    r12
   4d6e2:	pop    r13
   4d6e4:	pop    r14
   4d6e6:	pop    r15
   4d6e8:	ret    
   4d6e9:	nop    DWORD PTR [rax+0x0]
   4d6f0:	cmp    r10,QWORD PTR [rsp+0x8]
   4d6f5:	jne    4d700 <duplicate_node_closure+0x160>
   4d6f7:	cmp    r10,rbx
   4d6fa:	jne    4d80b <duplicate_node_closure+0x26b>
   4d700:	mov    eax,DWORD PTR [rax+0x8]
   4d703:	mov    rsi,r14
   4d706:	mov    rdi,rbp
   4d709:	shr    eax,0x8
   4d70c:	and    eax,0x3ff
   4d711:	or     r13d,eax
   4d714:	mov    edx,r13d
   4d717:	call   4d510 <duplicate_node>
   4d71c:	mov    rbx,rax
   4d71f:	cmp    rax,0xffffffffffffffff
   4d723:	je     4d6d5 <duplicate_node_closure+0x135>
   4d725:	mov    rdi,QWORD PTR [rbp+0x28]
   4d729:	mov    rsi,rax
   4d72c:	add    rdi,r12
   4d72f:	call   4c580 <re_node_set_insert>
   4d734:	test   al,al
   4d736:	je     4d6d5 <duplicate_node_closure+0x135>
   4d738:	mov    r10,r14
   4d73b:	jmp    4d5bf <duplicate_node_closure+0x1f>
   4d740:	mov    rax,QWORD PTR [rbp+0x18]
   4d744:	lea    r15,[rbx+rbx*2]
   4d748:	lea    r12,[r10*8+0x0]
   4d750:	mov    edx,r13d
   4d753:	shl    r15,0x3
   4d757:	mov    r10,QWORD PTR [rax+r10*8]
   4d75b:	mov    QWORD PTR [rdi+r15*1+0x8],0x0
   4d764:	mov    rdi,rbp
   4d767:	mov    rsi,r10
   4d76a:	mov    QWORD PTR [rsp],r10
   4d76e:	call   4d510 <duplicate_node>
   4d773:	mov    r10,QWORD PTR [rsp]
   4d777:	cmp    rax,0xffffffffffffffff
   4d77b:	mov    rbx,rax
   4d77e:	je     4d6d5 <duplicate_node_closure+0x135>
   4d784:	mov    rax,QWORD PTR [rbp+0x18]
   4d788:	mov    QWORD PTR [rsp],r10
   4d78c:	mov    rdi,r15
   4d78f:	mov    rdx,QWORD PTR [rax+r12*1]
   4d793:	mov    QWORD PTR [rax+r14*8],rdx
   4d797:	jmp    4d6bd <duplicate_node_closure+0x11d>
   4d79c:	nop    DWORD PTR [rax+0x0]
   4d7a0:	mov    edx,r13d
   4d7a3:	mov    rsi,r14
   4d7a6:	mov    rdi,rbp
   4d7a9:	call   4d510 <duplicate_node>
   4d7ae:	mov    rbx,rax
   4d7b1:	cmp    rax,0xffffffffffffffff
   4d7b5:	je     4d6d5 <duplicate_node_closure+0x135>
   4d7bb:	mov    rdi,QWORD PTR [rbp+0x28]
   4d7bf:	mov    rsi,rbx
   4d7c2:	add    rdi,r12
   4d7c5:	call   4c580 <re_node_set_insert>
   4d7ca:	test   al,al
   4d7cc:	je     4d6d5 <duplicate_node_closure+0x135>
   4d7d2:	mov    rcx,QWORD PTR [rsp+0x8]
   4d7d7:	mov    r8d,r13d
   4d7da:	mov    rdx,rbx
   4d7dd:	mov    rsi,r14
   4d7e0:	mov    rdi,rbp
   4d7e3:	call   4d5a0 <duplicate_node_closure>
   4d7e8:	test   eax,eax
   4d7ea:	je     4d692 <duplicate_node_closure+0xf2>
   4d7f0:	jmp    4d6da <duplicate_node_closure+0x13a>
   4d7f5:	nop    DWORD PTR [rax]
   4d7f8:	mov    rax,QWORD PTR [rbp+0x18]
   4d7fc:	mov    rdx,QWORD PTR [rax+r10*8]
   4d800:	mov    QWORD PTR [rax+rbx*8],rdx
   4d804:	xor    eax,eax
   4d806:	jmp    4d6da <duplicate_node_closure+0x13a>
   4d80b:	mov    rsi,r14
   4d80e:	call   4c580 <re_node_set_insert>
   4d813:	mov    r8d,eax
   4d816:	xor    eax,eax
   4d818:	test   r8b,r8b
   4d81b:	jne    4d6da <duplicate_node_closure+0x13a>
   4d821:	jmp    4d6d5 <duplicate_node_closure+0x135>
   4d826:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000004d830 <free_state>:
   4d830:	push   rbp
   4d831:	mov    rbp,rdi
   4d834:	mov    rdi,QWORD PTR [rdi+0x30]
   4d838:	call   4bdc0 <rpl_free>
   4d83d:	mov    rdi,QWORD PTR [rbp+0x48]
   4d841:	call   4bdc0 <rpl_free>
   4d846:	mov    rax,QWORD PTR [rbp+0x50]
   4d84a:	lea    rdx,[rbp+0x8]
   4d84e:	cmp    rax,rdx
   4d851:	je     4d865 <free_state+0x35>
   4d853:	mov    rdi,QWORD PTR [rax+0x10]
   4d857:	call   4bdc0 <rpl_free>
   4d85c:	mov    rdi,QWORD PTR [rbp+0x50]
   4d860:	call   4bdc0 <rpl_free>
   4d865:	mov    rdi,QWORD PTR [rbp+0x18]
   4d869:	call   4bdc0 <rpl_free>
   4d86e:	mov    rdi,QWORD PTR [rbp+0x60]
   4d872:	call   4bdc0 <rpl_free>
   4d877:	mov    rdi,QWORD PTR [rbp+0x58]
   4d87b:	call   4bdc0 <rpl_free>
   4d880:	mov    rdi,rbp
   4d883:	pop    rbp
   4d884:	jmp    4bdc0 <rpl_free>
   4d889:	nop    DWORD PTR [rax+0x0]

000000000004d890 <re_string_destruct>:
   4d890:	push   rbx
   4d891:	mov    rbx,rdi
   4d894:	mov    rdi,QWORD PTR [rdi+0x10]
   4d898:	call   4bdc0 <rpl_free>
   4d89d:	mov    rdi,QWORD PTR [rbx+0x18]
   4d8a1:	call   4bdc0 <rpl_free>
   4d8a6:	cmp    BYTE PTR [rbx+0x8b],0x0
   4d8ad:	jne    4d8b8 <re_string_destruct+0x28>
   4d8af:	pop    rbx
   4d8b0:	ret    
   4d8b1:	nop    DWORD PTR [rax+0x0]
   4d8b8:	mov    rdi,QWORD PTR [rbx+0x8]
   4d8bc:	pop    rbx
   4d8bd:	jmp    4bdc0 <rpl_free>
   4d8c2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4d8cd:	nop    DWORD PTR [rax]

000000000004d8d0 <free_dfa_content>:
   4d8d0:	push   r13
   4d8d2:	push   r12
   4d8d4:	mov    r12,rdi
   4d8d7:	push   rbp
   4d8d8:	push   rbx
   4d8d9:	sub    rsp,0x8
   4d8dd:	mov    rdi,QWORD PTR [rdi]
   4d8e0:	test   rdi,rdi
   4d8e3:	je     4d916 <free_dfa_content+0x46>
   4d8e5:	cmp    QWORD PTR [r12+0x10],0x0
   4d8eb:	je     4d916 <free_dfa_content+0x46>
   4d8ed:	xor    ebx,ebx
   4d8ef:	jmp    4d8fc <free_dfa_content+0x2c>
   4d8f1:	nop    DWORD PTR [rax+0x0]
   4d8f8:	mov    rdi,QWORD PTR [r12]
   4d8fc:	mov    rax,rbx
   4d8ff:	add    rbx,0x1
   4d903:	shl    rax,0x4
   4d907:	add    rdi,rax
   4d90a:	call   4d2f0 <free_token>
   4d90f:	cmp    QWORD PTR [r12+0x10],rbx
   4d914:	ja     4d8f8 <free_dfa_content+0x28>
   4d916:	mov    rdi,QWORD PTR [r12+0x18]
   4d91b:	xor    ebx,ebx
   4d91d:	call   4bdc0 <rpl_free>
   4d922:	cmp    QWORD PTR [r12+0x10],0x0
   4d928:	je     4d983 <free_dfa_content+0xb3>
   4d92a:	nop    WORD PTR [rax+rax*1+0x0]
   4d930:	mov    rax,QWORD PTR [r12+0x30]
   4d935:	test   rax,rax
   4d938:	je     4d948 <free_dfa_content+0x78>
   4d93a:	lea    rdx,[rbx+rbx*2]
   4d93e:	mov    rdi,QWORD PTR [rax+rdx*8+0x10]
   4d943:	call   4bdc0 <rpl_free>
   4d948:	mov    rax,QWORD PTR [r12+0x38]
   4d94d:	test   rax,rax
   4d950:	je     4d960 <free_dfa_content+0x90>
   4d952:	lea    rdx,[rbx+rbx*2]
   4d956:	mov    rdi,QWORD PTR [rax+rdx*8+0x10]
   4d95b:	call   4bdc0 <rpl_free>
   4d960:	mov    rax,QWORD PTR [r12+0x28]
   4d965:	test   rax,rax
   4d968:	je     4d978 <free_dfa_content+0xa8>
   4d96a:	lea    rdx,[rbx+rbx*2]
   4d96e:	mov    rdi,QWORD PTR [rax+rdx*8+0x10]
   4d973:	call   4bdc0 <rpl_free>
   4d978:	add    rbx,0x1
   4d97c:	cmp    QWORD PTR [r12+0x10],rbx
   4d981:	ja     4d930 <free_dfa_content+0x60>
   4d983:	mov    rdi,QWORD PTR [r12+0x28]
   4d988:	xor    r13d,r13d
   4d98b:	call   4bdc0 <rpl_free>
   4d990:	mov    rdi,QWORD PTR [r12+0x30]
   4d995:	call   4bdc0 <rpl_free>
   4d99a:	mov    rdi,QWORD PTR [r12+0x38]
   4d99f:	call   4bdc0 <rpl_free>
   4d9a4:	mov    rdi,QWORD PTR [r12]
   4d9a8:	call   4bdc0 <rpl_free>
   4d9ad:	mov    rdi,QWORD PTR [r12+0x40]
   4d9b2:	test   rdi,rdi
   4d9b5:	je     4da15 <free_dfa_content+0x145>
   4d9b7:	nop    WORD PTR [rax+rax*1+0x0]
   4d9c0:	lea    rax,[r13+r13*2+0x0]
   4d9c5:	xor    ebx,ebx
   4d9c7:	lea    rbp,[rdi+rax*8]
   4d9cb:	cmp    QWORD PTR [rbp+0x0],0x0
   4d9d0:	jle    4d9ef <free_dfa_content+0x11f>
   4d9d2:	nop    WORD PTR [rax+rax*1+0x0]
   4d9d8:	mov    rax,QWORD PTR [rbp+0x10]
   4d9dc:	mov    rdi,QWORD PTR [rax+rbx*8]
   4d9e0:	add    rbx,0x1
   4d9e4:	call   4d830 <free_state>
   4d9e9:	cmp    QWORD PTR [rbp+0x0],rbx
   4d9ed:	jg     4d9d8 <free_dfa_content+0x108>
   4d9ef:	mov    rdi,QWORD PTR [rbp+0x10]
   4d9f3:	add    r13,0x1
   4d9f7:	call   4bdc0 <rpl_free>
   4d9fc:	cmp    QWORD PTR [r12+0x88],r13
   4da04:	jb     4da10 <free_dfa_content+0x140>
   4da06:	mov    rdi,QWORD PTR [r12+0x40]
   4da0b:	jmp    4d9c0 <free_dfa_content+0xf0>
   4da0d:	nop    DWORD PTR [rax]
   4da10:	mov    rdi,QWORD PTR [r12+0x40]
   4da15:	call   4bdc0 <rpl_free>
   4da1a:	mov    rdi,QWORD PTR [r12+0x78]
   4da1f:	lea    rax,[rip+0x2279a]        # 701c0 <utf8_sb_map>
   4da26:	cmp    rdi,rax
   4da29:	je     4da30 <free_dfa_content+0x160>
   4da2b:	call   4bdc0 <rpl_free>
   4da30:	mov    rdi,QWORD PTR [r12+0xe0]
   4da38:	call   4bdc0 <rpl_free>
   4da3d:	add    rsp,0x8
   4da41:	mov    rdi,r12
   4da44:	pop    rbx
   4da45:	pop    rbp
   4da46:	pop    r12
   4da48:	pop    r13
   4da4a:	jmp    4bdc0 <rpl_free>
   4da4f:	nop

000000000004da50 <match_ctx_clean>:
   4da50:	push   r14
   4da52:	mov    r14,rdi
   4da55:	push   r13
   4da57:	push   r12
   4da59:	push   rbp
   4da5a:	push   rbx
   4da5b:	cmp    QWORD PTR [rdi+0xe8],0x0
   4da63:	jle    4dae9 <match_ctx_clean+0x99>
   4da69:	xor    r13d,r13d
   4da6c:	nop    DWORD PTR [rax+0x0]
   4da70:	mov    rax,QWORD PTR [r14+0xf8]
   4da77:	mov    r12,QWORD PTR [rax+r13*8]
   4da7b:	cmp    QWORD PTR [r12+0x20],0x0
   4da81:	jle    4daad <match_ctx_clean+0x5d>
   4da83:	xor    ebx,ebx
   4da85:	nop    DWORD PTR [rax]
   4da88:	mov    rax,QWORD PTR [r12+0x28]
   4da8d:	mov    rbp,QWORD PTR [rax+rbx*8]
   4da91:	add    rbx,0x1
   4da95:	mov    rdi,QWORD PTR [rbp+0x20]
   4da99:	call   4bdc0 <rpl_free>
   4da9e:	mov    rdi,rbp
   4daa1:	call   4bdc0 <rpl_free>
   4daa6:	cmp    QWORD PTR [r12+0x20],rbx
   4daab:	jg     4da88 <match_ctx_clean+0x38>
   4daad:	mov    rdi,QWORD PTR [r12+0x28]
   4dab2:	call   4bdc0 <rpl_free>
   4dab7:	mov    rax,QWORD PTR [r12+0x10]
   4dabc:	test   rax,rax
   4dabf:	je     4dad4 <match_ctx_clean+0x84>
   4dac1:	mov    rdi,QWORD PTR [rax+0x10]
   4dac5:	call   4bdc0 <rpl_free>
   4daca:	mov    rdi,QWORD PTR [r12+0x10]
   4dacf:	call   4bdc0 <rpl_free>
   4dad4:	mov    rdi,r12
   4dad7:	add    r13,0x1
   4dadb:	call   4bdc0 <rpl_free>
   4dae0:	cmp    QWORD PTR [r14+0xe8],r13
   4dae7:	jg     4da70 <match_ctx_clean+0x20>
   4dae9:	mov    QWORD PTR [r14+0xe8],0x0
   4daf4:	pop    rbx
   4daf5:	mov    QWORD PTR [r14+0xc8],0x0
   4db00:	pop    rbp
   4db01:	pop    r12
   4db03:	pop    r13
   4db05:	pop    r14
   4db07:	ret    
   4db08:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004db10 <re_string_char_size_at.part.0>:
   4db10:	mov    rdx,QWORD PTR [rdi+0x30]
   4db14:	add    rsi,0x1
   4db18:	cmp    rsi,rdx
   4db1b:	jge    4db49 <re_string_char_size_at.part.0+0x39>
   4db1d:	mov    rcx,QWORD PTR [rdi+0x10]
   4db21:	mov    eax,0x1
   4db26:	jmp    4db3c <re_string_char_size_at.part.0+0x2c>
   4db28:	nop    DWORD PTR [rax+rax*1+0x0]
   4db30:	add    rsi,0x1
   4db34:	add    eax,0x1
   4db37:	cmp    rsi,rdx
   4db3a:	je     4db48 <re_string_char_size_at.part.0+0x38>
   4db3c:	cmp    DWORD PTR [rcx+rsi*4],0xffffffff
   4db40:	je     4db30 <re_string_char_size_at.part.0+0x20>
   4db42:	ret    
   4db43:	nop    DWORD PTR [rax+rax*1+0x0]
   4db48:	ret    
   4db49:	mov    eax,0x1
   4db4e:	ret    
   4db4f:	nop

000000000004db50 <re_node_set_contains.isra.0>:
   4db50:	xor    eax,eax
   4db52:	test   rdi,rdi
   4db55:	jle    4db85 <re_node_set_contains.isra.0+0x35>
   4db57:	lea    rcx,[rdi-0x1]
   4db5b:	mov    rdi,QWORD PTR [rsi]
   4db5e:	xor    esi,esi
   4db60:	jmp    4db78 <re_node_set_contains.isra.0+0x28>
   4db62:	nop    WORD PTR [rax+rax*1+0x0]
   4db68:	lea    rax,[rcx+rsi*1]
   4db6c:	shr    rax,1
   4db6f:	cmp    QWORD PTR [rdi+rax*8],rdx
   4db73:	jl     4db90 <re_node_set_contains.isra.0+0x40>
   4db75:	mov    rcx,rax
   4db78:	cmp    rcx,rsi
   4db7b:	ja     4db68 <re_node_set_contains.isra.0+0x18>
   4db7d:	xor    eax,eax
   4db7f:	cmp    rdx,QWORD PTR [rdi+rsi*8]
   4db83:	je     4dba0 <re_node_set_contains.isra.0+0x50>
   4db85:	ret    
   4db86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4db90:	lea    rsi,[rax+0x1]
   4db94:	jmp    4db78 <re_node_set_contains.isra.0+0x28>
   4db96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4dba0:	lea    rax,[rsi+0x1]
   4dba4:	ret    
   4dba5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000004dbb0 <check_arrival_expand_ecl_sub>:
   4dbb0:	push   r15
   4dbb2:	mov    r15,rsi
   4dbb5:	push   r14
   4dbb7:	lea    r14,[rsi+0x10]
   4dbbb:	push   r13
   4dbbd:	mov    r13,rcx
   4dbc0:	push   r12
   4dbc2:	mov    r12d,r8d
   4dbc5:	push   rbp
   4dbc6:	mov    rbp,rdx
   4dbc9:	push   rbx
   4dbca:	mov    rbx,rdi
   4dbcd:	sub    rsp,0x8
   4dbd1:	mov    rdi,QWORD PTR [r15+0x8]
   4dbd5:	mov    rdx,rbp
   4dbd8:	mov    rsi,r14
   4dbdb:	call   4db50 <re_node_set_contains.isra.0>
   4dbe0:	test   rax,rax
   4dbe3:	jne    4dc98 <check_arrival_expand_ecl_sub+0xe8>
   4dbe9:	mov    rax,rbp
   4dbec:	shl    rax,0x4
   4dbf0:	add    rax,QWORD PTR [rbx]
   4dbf3:	movzx  edx,BYTE PTR [rax+0x8]
   4dbf7:	cmp    edx,r12d
   4dbfa:	jne    4dc01 <check_arrival_expand_ecl_sub+0x51>
   4dbfc:	cmp    QWORD PTR [rax],r13
   4dbff:	je     4dc68 <check_arrival_expand_ecl_sub+0xb8>
   4dc01:	mov    rsi,rbp
   4dc04:	mov    rdi,r15
   4dc07:	call   4c580 <re_node_set_insert>
   4dc0c:	test   al,al
   4dc0e:	je     4dc80 <check_arrival_expand_ecl_sub+0xd0>
   4dc10:	mov    rdx,QWORD PTR [rbx+0x28]
   4dc14:	lea    rbp,[rbp+rbp*2+0x0]
   4dc19:	shl    rbp,0x3
   4dc1d:	add    rdx,rbp
   4dc20:	mov    rax,QWORD PTR [rdx+0x8]
   4dc24:	test   rax,rax
   4dc27:	je     4dc98 <check_arrival_expand_ecl_sub+0xe8>
   4dc29:	mov    rdx,QWORD PTR [rdx+0x10]
   4dc2d:	cmp    rax,0x2
   4dc31:	je     4dc40 <check_arrival_expand_ecl_sub+0x90>
   4dc33:	mov    rbp,QWORD PTR [rdx]
   4dc36:	jmp    4dbd1 <check_arrival_expand_ecl_sub+0x21>
   4dc38:	nop    DWORD PTR [rax+rax*1+0x0]
   4dc40:	mov    rdx,QWORD PTR [rdx+0x8]
   4dc44:	mov    r8d,r12d
   4dc47:	mov    rcx,r13
   4dc4a:	mov    rsi,r15
   4dc4d:	mov    rdi,rbx
   4dc50:	call   4dbb0 <check_arrival_expand_ecl_sub>
   4dc55:	test   eax,eax
   4dc57:	jne    4dc85 <check_arrival_expand_ecl_sub+0xd5>
   4dc59:	mov    rax,QWORD PTR [rbx+0x28]
   4dc5d:	mov    rdx,QWORD PTR [rax+rbp*1+0x10]
   4dc62:	jmp    4dc33 <check_arrival_expand_ecl_sub+0x83>
   4dc64:	nop    DWORD PTR [rax+0x0]
   4dc68:	cmp    r12d,0x9
   4dc6c:	jne    4dc98 <check_arrival_expand_ecl_sub+0xe8>
   4dc6e:	mov    rsi,rbp
   4dc71:	mov    rdi,r15
   4dc74:	call   4c580 <re_node_set_insert>
   4dc79:	test   al,al
   4dc7b:	jne    4dc98 <check_arrival_expand_ecl_sub+0xe8>
   4dc7d:	nop    DWORD PTR [rax]
   4dc80:	mov    eax,0xc
   4dc85:	add    rsp,0x8
   4dc89:	pop    rbx
   4dc8a:	pop    rbp
   4dc8b:	pop    r12
   4dc8d:	pop    r13
   4dc8f:	pop    r14
   4dc91:	pop    r15
   4dc93:	ret    
   4dc94:	nop    DWORD PTR [rax+0x0]
   4dc98:	add    rsp,0x8
   4dc9c:	xor    eax,eax
   4dc9e:	pop    rbx
   4dc9f:	pop    rbp
   4dca0:	pop    r12
   4dca2:	pop    r13
   4dca4:	pop    r14
   4dca6:	pop    r15
   4dca8:	ret    
   4dca9:	nop    DWORD PTR [rax+0x0]

000000000004dcb0 <re_node_set_remove_at.isra.0.part.0>:
   4dcb0:	cmp    rdx,QWORD PTR [rdi]
   4dcb3:	jge    4dcd2 <re_node_set_remove_at.isra.0.part.0+0x22>
   4dcb5:	mov    rax,QWORD PTR [rsi]
   4dcb8:	nop    DWORD PTR [rax+rax*1+0x0]
   4dcc0:	mov    rcx,QWORD PTR [rax+rdx*8+0x8]
   4dcc5:	mov    QWORD PTR [rax+rdx*8],rcx
   4dcc9:	add    rdx,0x1
   4dccd:	cmp    rdx,QWORD PTR [rdi]
   4dcd0:	jl     4dcc0 <re_node_set_remove_at.isra.0.part.0+0x10>
   4dcd2:	ret    
   4dcd3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4dcde:	xchg   ax,ax

000000000004dce0 <optimize_subexps>:
   4dce0:	endbr64 
   4dce4:	movzx  eax,BYTE PTR [rsi+0x30]
   4dce8:	cmp    al,0x4
   4dcea:	je     4dd50 <optimize_subexps+0x70>
   4dcec:	cmp    al,0x11
   4dcee:	je     4dcf8 <optimize_subexps+0x18>
   4dcf0:	xor    eax,eax
   4dcf2:	ret    
   4dcf3:	nop    DWORD PTR [rax+rax*1+0x0]
   4dcf8:	mov    rax,QWORD PTR [rsi+0x8]
   4dcfc:	test   rax,rax
   4dcff:	je     4dcf0 <optimize_subexps+0x10>
   4dd01:	cmp    BYTE PTR [rax+0x30],0x11
   4dd05:	jne    4dcf0 <optimize_subexps+0x10>
   4dd07:	mov    rcx,QWORD PTR [rax+0x28]
   4dd0b:	mov    rax,QWORD PTR [rax+0x8]
   4dd0f:	mov    QWORD PTR [rsi+0x8],rax
   4dd13:	test   rax,rax
   4dd16:	je     4dd1b <optimize_subexps+0x3b>
   4dd18:	mov    QWORD PTR [rax],rsi
   4dd1b:	mov    rax,QWORD PTR [rdi+0xe0]
   4dd22:	mov    rdx,QWORD PTR [rsi+0x28]
   4dd26:	mov    rdx,QWORD PTR [rax+rdx*8]
   4dd2a:	mov    QWORD PTR [rax+rcx*8],rdx
   4dd2e:	cmp    rcx,0x3f
   4dd32:	jg     4dcf0 <optimize_subexps+0x10>
   4dd34:	mov    rax,0xfffffffffffffffe
   4dd3b:	rol    rax,cl
   4dd3e:	and    QWORD PTR [rdi+0xa0],rax
   4dd45:	jmp    4dcf0 <optimize_subexps+0x10>
   4dd47:	nop    WORD PTR [rax+rax*1+0x0]
   4dd50:	mov    rax,QWORD PTR [rdi+0xe0]
   4dd57:	test   rax,rax
   4dd5a:	je     4dcf0 <optimize_subexps+0x10>
   4dd5c:	movsxd rdx,DWORD PTR [rsi+0x28]
   4dd60:	mov    rcx,QWORD PTR [rax+rdx*8]
   4dd64:	mov    eax,0x1
   4dd69:	shl    eax,cl
   4dd6b:	mov    QWORD PTR [rsi+0x28],rcx
   4dd6f:	cdqe   
   4dd71:	or     QWORD PTR [rdi+0xa0],rax
   4dd78:	xor    eax,eax
   4dd7a:	ret    
   4dd7b:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004dd80 <calc_next>:
   4dd80:	endbr64 
   4dd84:	movzx  eax,BYTE PTR [rsi+0x30]
   4dd88:	mov    rdx,QWORD PTR [rsi+0x8]
   4dd8c:	cmp    al,0xb
   4dd8e:	je     4ddb8 <calc_next+0x38>
   4dd90:	cmp    al,0x10
   4dd92:	je     4ddc0 <calc_next+0x40>
   4dd94:	test   rdx,rdx
   4dd97:	je     4dda1 <calc_next+0x21>
   4dd99:	mov    rax,QWORD PTR [rsi+0x20]
   4dd9d:	mov    QWORD PTR [rdx+0x20],rax
   4dda1:	mov    rax,QWORD PTR [rsi+0x10]
   4dda5:	test   rax,rax
   4dda8:	je     4ddb2 <calc_next+0x32>
   4ddaa:	mov    rdx,QWORD PTR [rsi+0x20]
   4ddae:	mov    QWORD PTR [rax+0x20],rdx
   4ddb2:	xor    eax,eax
   4ddb4:	ret    
   4ddb5:	nop    DWORD PTR [rax]
   4ddb8:	mov    QWORD PTR [rdx+0x20],rsi
   4ddbc:	xor    eax,eax
   4ddbe:	ret    
   4ddbf:	nop
   4ddc0:	mov    rax,QWORD PTR [rsi+0x10]
   4ddc4:	mov    rcx,QWORD PTR [rax+0x18]
   4ddc8:	mov    QWORD PTR [rdx+0x20],rcx
   4ddcc:	mov    rdx,QWORD PTR [rsi+0x20]
   4ddd0:	mov    QWORD PTR [rax+0x20],rdx
   4ddd4:	xor    eax,eax
   4ddd6:	ret    
   4ddd7:	nop    WORD PTR [rax+rax*1+0x0]

000000000004dde0 <check_dst_limits.isra.0>:
   4dde0:	push   r15
   4dde2:	mov    r10,rcx
   4dde5:	mov    r15,rdx
   4dde8:	xor    r11d,r11d
   4ddeb:	push   r14
   4dded:	push   r13
   4ddef:	mov    r13,rdi
   4ddf2:	push   r12
   4ddf4:	push   rbp
   4ddf5:	mov    rbp,r8
   4ddf8:	push   rbx
   4ddf9:	sub    rsp,0x38
   4ddfd:	mov    rax,QWORD PTR [rdi+0x98]
   4de04:	mov    QWORD PTR [rsp+0x18],rsi
   4de09:	mov    rsi,QWORD PTR [rdi+0xc8]
   4de10:	mov    QWORD PTR [rsp+0x28],r9
   4de15:	mov    r12,QWORD PTR [rsp+0x70]
   4de1a:	mov    QWORD PTR [rsp+0x20],rax
   4de1f:	mov    rdx,rsi
   4de22:	jmp    4de51 <check_dst_limits.isra.0+0x71>
   4de24:	nop    DWORD PTR [rax+0x0]
   4de28:	lea    rax,[rdx+r11*1]
   4de2c:	mov    rcx,rax
   4de2f:	and    rax,0xfffffffffffffffe
   4de33:	sar    rcx,1
   4de36:	add    rax,rcx
   4de39:	shl    rax,0x4
   4de3d:	add    rax,QWORD PTR [r13+0xd8]
   4de44:	cmp    QWORD PTR [rax+0x8],rbp
   4de48:	jl     4df90 <check_dst_limits.isra.0+0x1b0>
   4de4e:	mov    rdx,rcx
   4de51:	cmp    rdx,r11
   4de54:	jg     4de28 <check_dst_limits.isra.0+0x48>
   4de56:	cmp    rsi,r11
   4de59:	jle    4dfc6 <check_dst_limits.isra.0+0x1e6>
   4de5f:	lea    rax,[r11+r11*2]
   4de63:	shl    rax,0x4
   4de67:	add    rax,QWORD PTR [r13+0xd8]
   4de6e:	cmp    rbp,QWORD PTR [rax+0x8]
   4de72:	mov    rax,0xffffffffffffffff
   4de79:	cmovne r11,rax
   4de7d:	mov    rdx,rsi
   4de80:	xor    ebx,ebx
   4de82:	jmp    4deb1 <check_dst_limits.isra.0+0xd1>
   4de84:	nop    DWORD PTR [rax+0x0]
   4de88:	lea    rax,[rdx+rbx*1]
   4de8c:	mov    rcx,rax
   4de8f:	and    rax,0xfffffffffffffffe
   4de93:	sar    rcx,1
   4de96:	add    rax,rcx
   4de99:	shl    rax,0x4
   4de9d:	add    rax,QWORD PTR [r13+0xd8]
   4dea4:	cmp    QWORD PTR [rax+0x8],r12
   4dea8:	jl     4dfa0 <check_dst_limits.isra.0+0x1c0>
   4deae:	mov    rdx,rcx
   4deb1:	cmp    rdx,rbx
   4deb4:	jg     4de88 <check_dst_limits.isra.0+0xa8>
   4deb6:	cmp    rsi,rbx
   4deb9:	jle    4dfd2 <check_dst_limits.isra.0+0x1f2>
   4debf:	lea    rax,[rbx+rbx*2]
   4dec3:	shl    rax,0x4
   4dec7:	add    rax,QWORD PTR [r13+0xd8]
   4dece:	cmp    r12,QWORD PTR [rax+0x8]
   4ded2:	mov    rax,0xffffffffffffffff
   4ded9:	cmovne rbx,rax
   4dedd:	mov    rax,QWORD PTR [rsp+0x18]
   4dee2:	cmp    QWORD PTR [rax],0x0
   4dee6:	jle    4dfc2 <check_dst_limits.isra.0+0x1e2>
   4deec:	mov    QWORD PTR [rsp+0x70],r12
   4def1:	mov    r12,r10
   4def4:	mov    r10,rbp
   4def7:	mov    rbp,rbx
   4defa:	mov    rbx,r11
   4defd:	mov    r11,r13
   4df00:	mov    r13,QWORD PTR [rsp+0x70]
   4df05:	xor    r14d,r14d
   4df08:	mov    rax,QWORD PTR [r15]
   4df0b:	mov    rdi,QWORD PTR [rsp+0x20]
   4df10:	mov    r8,r10
   4df13:	mov    r9,rbx
   4df16:	mov    rcx,r12
   4df19:	mov    QWORD PTR [rsp+0x10],r10
   4df1e:	mov    rsi,QWORD PTR [rax+r14*8]
   4df22:	lea    rax,[rsi+rsi*2]
   4df26:	shl    rax,0x4
   4df2a:	add    rax,QWORD PTR [r11+0xd8]
   4df31:	mov    rax,QWORD PTR [rax]
   4df34:	shl    rax,0x4
   4df38:	add    rax,QWORD PTR [rdi]
   4df3b:	mov    rdi,r11
   4df3e:	mov    rdx,QWORD PTR [rax]
   4df41:	mov    QWORD PTR [rsp+0x8],rdx
   4df46:	call   4c330 <check_dst_limits_calc_pos>
   4df4b:	mov    rcx,QWORD PTR [rsp+0x28]
   4df50:	mov    r9,rbp
   4df53:	mov    r8,r13
   4df56:	mov    DWORD PTR [rsp+0x4],eax
   4df5a:	mov    rax,QWORD PTR [r15]
   4df5d:	mov    rdi,r11
   4df60:	mov    rdx,QWORD PTR [rsp+0x8]
   4df65:	mov    rsi,QWORD PTR [rax+r14*8]
   4df69:	call   4c330 <check_dst_limits_calc_pos>
   4df6e:	cmp    DWORD PTR [rsp+0x4],eax
   4df72:	mov    r10,QWORD PTR [rsp+0x10]
   4df77:	je     4dfb0 <check_dst_limits.isra.0+0x1d0>
   4df79:	mov    eax,0x1
   4df7e:	add    rsp,0x38
   4df82:	pop    rbx
   4df83:	pop    rbp
   4df84:	pop    r12
   4df86:	pop    r13
   4df88:	pop    r14
   4df8a:	pop    r15
   4df8c:	ret    
   4df8d:	nop    DWORD PTR [rax]
   4df90:	lea    r11,[rcx+0x1]
   4df94:	jmp    4de51 <check_dst_limits.isra.0+0x71>
   4df99:	nop    DWORD PTR [rax+0x0]
   4dfa0:	lea    rbx,[rcx+0x1]
   4dfa4:	jmp    4deb1 <check_dst_limits.isra.0+0xd1>
   4dfa9:	nop    DWORD PTR [rax+0x0]
   4dfb0:	mov    rax,QWORD PTR [rsp+0x18]
   4dfb5:	add    r14,0x1
   4dfb9:	cmp    r14,QWORD PTR [rax]
   4dfbc:	jl     4df08 <check_dst_limits.isra.0+0x128>
   4dfc2:	xor    eax,eax
   4dfc4:	jmp    4df7e <check_dst_limits.isra.0+0x19e>
   4dfc6:	mov    r11,0xffffffffffffffff
   4dfcd:	jmp    4de7d <check_dst_limits.isra.0+0x9d>
   4dfd2:	mov    rbx,0xffffffffffffffff
   4dfd9:	jmp    4dedd <check_dst_limits.isra.0+0xfd>
   4dfde:	xchg   ax,ax

000000000004dfe0 <re_node_set_merge>:
   4dfe0:	test   rsi,rsi
   4dfe3:	je     4e1a0 <re_node_set_merge+0x1c0>
   4dfe9:	push   r12
   4dfeb:	mov    r12,rsi
   4dfee:	push   rbp
   4dfef:	push   rbx
   4dff0:	mov    rcx,QWORD PTR [rsi+0x8]
   4dff4:	test   rcx,rcx
   4dff7:	je     4e102 <re_node_set_merge+0x122>
   4dffd:	mov    rax,QWORD PTR [rdi+0x8]
   4e001:	mov    rsi,QWORD PTR [rdi]
   4e004:	mov    rbp,rdi
   4e007:	lea    rdx,[rax+rcx*2]
   4e00b:	cmp    rsi,rdx
   4e00e:	jl     4e140 <re_node_set_merge+0x160>
   4e014:	test   rax,rax
   4e017:	je     4e176 <re_node_set_merge+0x196>
   4e01d:	lea    rbx,[rax+rcx*2]
   4e021:	lea    rdx,[rcx-0x1]
   4e025:	neg    rcx
   4e028:	sub    rax,0x1
   4e02c:	test   rcx,rcx
   4e02f:	jns    4e090 <re_node_set_merge+0xb0>
   4e031:	test   rax,rax
   4e034:	js     4e090 <re_node_set_merge+0xb0>
   4e036:	mov    rdi,QWORD PTR [rbp+0x10]
   4e03a:	mov    r8,QWORD PTR [r12+0x10]
   4e03f:	jmp    4e06a <re_node_set_merge+0x8a>
   4e041:	nop    DWORD PTR [rax+0x0]
   4e048:	jge    4e110 <re_node_set_merge+0x130>
   4e04e:	sub    rbx,0x1
   4e052:	sub    rdx,0x1
   4e056:	mov    QWORD PTR [rdi+rbx*8],rsi
   4e05a:	mov    rcx,rdx
   4e05d:	not    rcx
   4e060:	test   rcx,rcx
   4e063:	jns    4e090 <re_node_set_merge+0xb0>
   4e065:	test   rax,rax
   4e068:	js     4e090 <re_node_set_merge+0xb0>
   4e06a:	mov    rsi,QWORD PTR [r8+rdx*8]
   4e06e:	cmp    QWORD PTR [rdi+rax*8],rsi
   4e072:	jne    4e048 <re_node_set_merge+0x68>
   4e074:	sub    rdx,0x1
   4e078:	sub    rax,0x1
   4e07c:	mov    rcx,rdx
   4e07f:	not    rcx
   4e082:	test   rcx,rcx
   4e085:	js     4e065 <re_node_set_merge+0x85>
   4e087:	nop    WORD PTR [rax+rax*1+0x0]
   4e090:	test   rdx,rdx
   4e093:	js     4e0b2 <re_node_set_merge+0xd2>
   4e095:	add    rdx,0x1
   4e099:	mov    rax,QWORD PTR [rbp+0x10]
   4e09d:	mov    rsi,QWORD PTR [r12+0x10]
   4e0a2:	sub    rbx,rdx
   4e0a5:	shl    rdx,0x3
   4e0a9:	lea    rdi,[rax+rbx*8]
   4e0ad:	call   cb30 <memcpy@plt>
   4e0b2:	mov    rcx,QWORD PTR [rbp+0x8]
   4e0b6:	mov    rax,QWORD PTR [r12+0x8]
   4e0bb:	lea    r8,[rcx+rax*2-0x1]
   4e0c0:	mov    rdx,r8
   4e0c3:	sub    rdx,rbx
   4e0c6:	add    rdx,0x1
   4e0ca:	je     4e102 <re_node_set_merge+0x122>
   4e0cc:	lea    rax,[rcx-0x1]
   4e0d0:	add    rcx,rdx
   4e0d3:	mov    rdi,QWORD PTR [rbp+0x10]
   4e0d7:	mov    QWORD PTR [rbp+0x8],rcx
   4e0db:	nop    DWORD PTR [rax+rax*1+0x0]
   4e0e0:	mov    rsi,QWORD PTR [rdi+r8*8]
   4e0e4:	mov    rcx,QWORD PTR [rdi+rax*8]
   4e0e8:	lea    r9,[rax+rdx*1]
   4e0ec:	lea    r9,[rdi+r9*8]
   4e0f0:	cmp    rsi,rcx
   4e0f3:	jle    4e120 <re_node_set_merge+0x140>
   4e0f5:	mov    QWORD PTR [r9],rsi
   4e0f8:	sub    r8,0x1
   4e0fc:	sub    rdx,0x1
   4e100:	jne    4e0e0 <re_node_set_merge+0x100>
   4e102:	xor    eax,eax
   4e104:	pop    rbx
   4e105:	pop    rbp
   4e106:	pop    r12
   4e108:	ret    
   4e109:	nop    DWORD PTR [rax+0x0]
   4e110:	sub    rax,0x1
   4e114:	jmp    4e060 <re_node_set_merge+0x80>
   4e119:	nop    DWORD PTR [rax+0x0]
   4e120:	mov    QWORD PTR [r9],rcx
   4e123:	sub    rax,0x1
   4e127:	jns    4e0e0 <re_node_set_merge+0x100>
   4e129:	lea    rsi,[rdi+rbx*8]
   4e12d:	shl    rdx,0x3
   4e131:	call   cb30 <memcpy@plt>
   4e136:	pop    rbx
   4e137:	xor    eax,eax
   4e139:	pop    rbp
   4e13a:	pop    r12
   4e13c:	ret    
   4e13d:	nop    DWORD PTR [rax]
   4e140:	add    rcx,rsi
   4e143:	mov    rdi,QWORD PTR [rdi+0x10]
   4e147:	mov    rsi,rcx
   4e14a:	lea    rbx,[rcx+rcx*1]
   4e14e:	shl    rsi,0x4
   4e152:	call   ca20 <realloc@plt>
   4e157:	test   rax,rax
   4e15a:	je     4e1a3 <re_node_set_merge+0x1c3>
   4e15c:	mov    QWORD PTR [rbp+0x10],rax
   4e160:	mov    rax,QWORD PTR [rbp+0x8]
   4e164:	mov    QWORD PTR [rbp+0x0],rbx
   4e168:	mov    rcx,QWORD PTR [r12+0x8]
   4e16d:	test   rax,rax
   4e170:	jne    4e01d <re_node_set_merge+0x3d>
   4e176:	mov    rdi,QWORD PTR [rbp+0x10]
   4e17a:	mov    rsi,QWORD PTR [r12+0x10]
   4e17f:	mov    QWORD PTR [rbp+0x8],rcx
   4e183:	mov    rax,QWORD PTR [r12+0x8]
   4e188:	lea    rdx,[rax*8+0x0]
   4e190:	call   cb30 <memcpy@plt>
   4e195:	jmp    4e102 <re_node_set_merge+0x122>
   4e19a:	nop    WORD PTR [rax+rax*1+0x0]
   4e1a0:	xor    eax,eax
   4e1a2:	ret    
   4e1a3:	mov    eax,0xc
   4e1a8:	jmp    4e104 <re_node_set_merge+0x124>
   4e1ad:	nop    DWORD PTR [rax]

000000000004e1b0 <calc_eclosure_iter>:
   4e1b0:	push   r15
   4e1b2:	push   r14
   4e1b4:	push   r13
   4e1b6:	mov    r13,rsi
   4e1b9:	push   r12
   4e1bb:	push   rbp
   4e1bc:	mov    rbp,rdx
   4e1bf:	push   rbx
   4e1c0:	lea    rbx,[rdx+rdx*2]
   4e1c4:	shl    rbx,0x3
   4e1c8:	sub    rsp,0x68
   4e1cc:	mov    r14,QWORD PTR [rsi+0x28]
   4e1d0:	mov    QWORD PTR [rsp+0x10],rdi
   4e1d5:	mov    DWORD PTR [rsp+0x1c],ecx
   4e1d9:	add    r14,rbx
   4e1dc:	mov    rax,QWORD PTR fs:0x28
   4e1e5:	mov    QWORD PTR [rsp+0x58],rax
   4e1ea:	xor    eax,eax
   4e1ec:	mov    rax,QWORD PTR [r14+0x8]
   4e1f0:	mov    QWORD PTR [rsp+0x28],0x0
   4e1f9:	lea    rdi,[rax+0x1]
   4e1fd:	mov    QWORD PTR [rsp+0x20],rdi
   4e202:	shl    rdi,0x3
   4e206:	call   c0e0 <malloc@plt>
   4e20b:	mov    QWORD PTR [rsp+0x30],rax
   4e210:	test   rax,rax
   4e213:	je     4e440 <calc_eclosure_iter+0x290>
   4e219:	mov    rax,QWORD PTR [r13+0x30]
   4e21d:	mov    rdx,QWORD PTR [r13+0x0]
   4e221:	mov    r15,rbp
   4e224:	shl    r15,0x4
   4e228:	mov    QWORD PTR [rax+rbx*1+0x8],0xffffffffffffffff
   4e231:	lea    rax,[rdx+r15*1]
   4e235:	mov    r8d,DWORD PTR [rax+0x8]
   4e239:	test   r8d,0x3ff00
   4e240:	jne    4e3a0 <calc_eclosure_iter+0x1f0>
   4e246:	test   BYTE PTR [rax+0x8],0x8
   4e24a:	je     4e3f0 <calc_eclosure_iter+0x240>
   4e250:	mov    rsi,QWORD PTR [r13+0x28]
   4e254:	lea    rax,[rsi+rbx*1]
   4e258:	cmp    QWORD PTR [rax+0x8],0x0
   4e25d:	jle    4e3f0 <calc_eclosure_iter+0x240>
   4e263:	mov    BYTE PTR [rsp+0x1b],0x0
   4e268:	xor    r12d,r12d
   4e26b:	lea    r14,[rsp+0x20]
   4e270:	jmp    4e2c4 <calc_eclosure_iter+0x114>
   4e272:	nop    WORD PTR [rax+rax*1+0x0]
   4e278:	movdqu xmm0,XMMWORD PTR [rax]
   4e27c:	lea    r11,[rsp+0x40]
   4e281:	movaps XMMWORD PTR [rsp+0x40],xmm0
   4e286:	mov    rax,QWORD PTR [rax+0x10]
   4e28a:	mov    QWORD PTR [rsp+0x50],rax
   4e28f:	mov    rsi,r11
   4e292:	mov    rdi,r14
   4e295:	call   4dfe0 <re_node_set_merge>
   4e29a:	test   eax,eax
   4e29c:	jne    4e310 <calc_eclosure_iter+0x160>
   4e29e:	mov    rax,QWORD PTR [r13+0x30]
   4e2a2:	cmp    QWORD PTR [rax+r15*1+0x8],0x0
   4e2a8:	je     4e338 <calc_eclosure_iter+0x188>
   4e2ae:	mov    rsi,QWORD PTR [r13+0x28]
   4e2b2:	add    r12,0x1
   4e2b6:	lea    rax,[rsi+rbx*1]
   4e2ba:	cmp    QWORD PTR [rax+0x8],r12
   4e2be:	jle    4e367 <calc_eclosure_iter+0x1b7>
   4e2c4:	mov    rax,QWORD PTR [rax+0x10]
   4e2c8:	mov    rdx,QWORD PTR [rax+r12*8]
   4e2cc:	mov    rax,QWORD PTR [r13+0x30]
   4e2d0:	lea    r8,[rdx+rdx*2]
   4e2d4:	lea    r15,[r8*8+0x0]
   4e2dc:	add    rax,r15
   4e2df:	mov    rcx,QWORD PTR [rax+0x8]
   4e2e3:	cmp    rcx,0xffffffffffffffff
   4e2e7:	je     4e350 <calc_eclosure_iter+0x1a0>
   4e2e9:	test   rcx,rcx
   4e2ec:	jne    4e278 <calc_eclosure_iter+0xc8>
   4e2ee:	lea    r11,[rsp+0x40]
   4e2f3:	mov    rsi,r13
   4e2f6:	mov    rdi,r11
   4e2f9:	mov    QWORD PTR [rsp+0x8],r11
   4e2fe:	call   4e1b0 <calc_eclosure_iter>
   4e303:	mov    r11,QWORD PTR [rsp+0x8]
   4e308:	test   eax,eax
   4e30a:	je     4e28f <calc_eclosure_iter+0xdf>
   4e30c:	nop    DWORD PTR [rax+0x0]
   4e310:	mov    rbx,QWORD PTR [rsp+0x58]
   4e315:	xor    rbx,QWORD PTR fs:0x28
   4e31e:	jne    4e44a <calc_eclosure_iter+0x29a>
   4e324:	add    rsp,0x68
   4e328:	pop    rbx
   4e329:	pop    rbp
   4e32a:	pop    r12
   4e32c:	pop    r13
   4e32e:	pop    r14
   4e330:	pop    r15
   4e332:	ret    
   4e333:	nop    DWORD PTR [rax+rax*1+0x0]
   4e338:	mov    rdi,QWORD PTR [rsp+0x50]
   4e33d:	call   4bdc0 <rpl_free>
   4e342:	mov    BYTE PTR [rsp+0x1b],0x1
   4e347:	jmp    4e2ae <calc_eclosure_iter+0xfe>
   4e34c:	nop    DWORD PTR [rax+0x0]
   4e350:	lea    rax,[rsi+rbx*1]
   4e354:	mov    BYTE PTR [rsp+0x1b],0x1
   4e359:	add    r12,0x1
   4e35d:	cmp    QWORD PTR [rax+0x8],r12
   4e361:	jg     4e2c4 <calc_eclosure_iter+0x114>
   4e367:	lea    rdi,[rsp+0x20]
   4e36c:	mov    rsi,rbp
   4e36f:	call   4c580 <re_node_set_insert>
   4e374:	test   al,al
   4e376:	je     4e440 <calc_eclosure_iter+0x290>
   4e37c:	mov    rax,QWORD PTR [r13+0x30]
   4e380:	cmp    BYTE PTR [rsp+0x1c],0x1
   4e385:	lea    rdx,[rax+rbx*1]
   4e389:	je     4e405 <calc_eclosure_iter+0x255>
   4e38b:	cmp    BYTE PTR [rsp+0x1b],0x0
   4e390:	je     4e405 <calc_eclosure_iter+0x255>
   4e392:	mov    QWORD PTR [rdx+0x8],0x0
   4e39a:	jmp    4e419 <calc_eclosure_iter+0x269>
   4e39c:	nop    DWORD PTR [rax+0x0]
   4e3a0:	cmp    QWORD PTR [r14+0x8],0x0
   4e3a5:	je     4e3f0 <calc_eclosure_iter+0x240>
   4e3a7:	mov    rcx,QWORD PTR [r14+0x10]
   4e3ab:	mov    rcx,QWORD PTR [rcx]
   4e3ae:	shl    rcx,0x4
   4e3b2:	test   BYTE PTR [rdx+rcx*1+0xa],0x4
   4e3b7:	jne    4e246 <calc_eclosure_iter+0x96>
   4e3bd:	shr    r8d,0x8
   4e3c1:	mov    rcx,rbp
   4e3c4:	mov    rdx,rbp
   4e3c7:	mov    rsi,rbp
   4e3ca:	and    r8d,0x3ff
   4e3d1:	mov    rdi,r13
   4e3d4:	call   4d5a0 <duplicate_node_closure>
   4e3d9:	test   eax,eax
   4e3db:	jne    4e310 <calc_eclosure_iter+0x160>
   4e3e1:	mov    rax,QWORD PTR [r13+0x0]
   4e3e5:	add    rax,r15
   4e3e8:	jmp    4e246 <calc_eclosure_iter+0x96>
   4e3ed:	nop    DWORD PTR [rax]
   4e3f0:	lea    rdi,[rsp+0x20]
   4e3f5:	mov    rsi,rbp
   4e3f8:	call   4c580 <re_node_set_insert>
   4e3fd:	test   al,al
   4e3ff:	je     4e440 <calc_eclosure_iter+0x290>
   4e401:	mov    rax,QWORD PTR [r13+0x30]
   4e405:	movdqa xmm2,XMMWORD PTR [rsp+0x20]
   4e40b:	movups XMMWORD PTR [rax+rbx*1],xmm2
   4e40f:	mov    rdx,QWORD PTR [rsp+0x30]
   4e414:	mov    QWORD PTR [rax+rbx*1+0x10],rdx
   4e419:	mov    rbx,QWORD PTR [rsp+0x10]
   4e41e:	mov    rax,QWORD PTR [rsp+0x30]
   4e423:	movdqa xmm1,XMMWORD PTR [rsp+0x20]
   4e429:	mov    QWORD PTR [rbx+0x10],rax
   4e42d:	xor    eax,eax
   4e42f:	movaps XMMWORD PTR [rbx],xmm1
   4e432:	jmp    4e310 <calc_eclosure_iter+0x160>
   4e437:	nop    WORD PTR [rax+rax*1+0x0]
   4e440:	mov    eax,0xc
   4e445:	jmp    4e310 <calc_eclosure_iter+0x160>
   4e44a:	call   c7b0 <__stack_chk_fail@plt>
   4e44f:	nop

000000000004e450 <check_arrival_expand_ecl>:
   4e450:	push   r15
   4e452:	mov    r15d,ecx
   4e455:	push   r14
   4e457:	mov    r14,rsi
   4e45a:	push   r13
   4e45c:	mov    r13,rdi
   4e45f:	push   r12
   4e461:	push   rbp
   4e462:	push   rbx
   4e463:	mov    rbx,rdx
   4e466:	sub    rsp,0x38
   4e46a:	mov    rbp,QWORD PTR [rsi+0x8]
   4e46e:	mov    rax,QWORD PTR fs:0x28
   4e477:	mov    QWORD PTR [rsp+0x28],rax
   4e47c:	xor    eax,eax
   4e47e:	mov    QWORD PTR [rsp+0x18],0x0
   4e487:	lea    rdi,[rbp*8+0x0]
   4e48f:	mov    QWORD PTR [rsp+0x10],rbp
   4e494:	call   c0e0 <malloc@plt>
   4e499:	mov    QWORD PTR [rsp+0x20],rax
   4e49e:	test   rax,rax
   4e4a1:	je     4e5a0 <check_arrival_expand_ecl+0x150>
   4e4a7:	test   rbp,rbp
   4e4aa:	jle    4e53e <check_arrival_expand_ecl+0xee>
   4e4b0:	xor    r12d,r12d
   4e4b3:	lea    rbp,[rsp+0x10]
   4e4b8:	nop    DWORD PTR [rax+rax*1+0x0]
   4e4c0:	mov    rax,QWORD PTR [r14+0x10]
   4e4c4:	mov    r9,QWORD PTR [rax+r12*8]
   4e4c8:	mov    rax,QWORD PTR [r13+0x30]
   4e4cc:	lea    rdx,[r9+r9*2]
   4e4d0:	lea    r10,[rax+rdx*8]
   4e4d4:	mov    rsi,QWORD PTR [r10+0x8]
   4e4d8:	test   rsi,rsi
   4e4db:	jle    4e560 <check_arrival_expand_ecl+0x110>
   4e4e1:	mov    r8,QWORD PTR [r10+0x10]
   4e4e5:	mov    rdi,QWORD PTR [r13+0x0]
   4e4e9:	xor    edx,edx
   4e4eb:	jmp    4e4f9 <check_arrival_expand_ecl+0xa9>
   4e4ed:	nop    DWORD PTR [rax]
   4e4f0:	add    rdx,0x1
   4e4f4:	cmp    rsi,rdx
   4e4f7:	je     4e560 <check_arrival_expand_ecl+0x110>
   4e4f9:	mov    rcx,QWORD PTR [r8+rdx*8]
   4e4fd:	mov    rax,rcx
   4e500:	shl    rax,0x4
   4e504:	add    rax,rdi
   4e507:	movzx  r11d,BYTE PTR [rax+0x8]
   4e50c:	cmp    r15d,r11d
   4e50f:	jne    4e4f0 <check_arrival_expand_ecl+0xa0>
   4e511:	cmp    rbx,QWORD PTR [rax]
   4e514:	jne    4e4f0 <check_arrival_expand_ecl+0xa0>
   4e516:	cmp    rcx,0xffffffffffffffff
   4e51a:	je     4e560 <check_arrival_expand_ecl+0x110>
   4e51c:	mov    r8d,r15d
   4e51f:	mov    rcx,rbx
   4e522:	mov    rdx,r9
   4e525:	mov    rsi,rbp
   4e528:	mov    rdi,r13
   4e52b:	call   4dbb0 <check_arrival_expand_ecl_sub>
   4e530:	test   eax,eax
   4e532:	jne    4e56f <check_arrival_expand_ecl+0x11f>
   4e534:	add    r12,0x1
   4e538:	cmp    QWORD PTR [r14+0x8],r12
   4e53c:	jg     4e4c0 <check_arrival_expand_ecl+0x70>
   4e53e:	mov    rdi,QWORD PTR [r14+0x10]
   4e542:	call   4bdc0 <rpl_free>
   4e547:	mov    rax,QWORD PTR [rsp+0x20]
   4e54c:	movdqa xmm0,XMMWORD PTR [rsp+0x10]
   4e552:	mov    QWORD PTR [r14+0x10],rax
   4e556:	xor    eax,eax
   4e558:	movaps XMMWORD PTR [r14],xmm0
   4e55c:	jmp    4e581 <check_arrival_expand_ecl+0x131>
   4e55e:	xchg   ax,ax
   4e560:	mov    rsi,r10
   4e563:	mov    rdi,rbp
   4e566:	call   4dfe0 <re_node_set_merge>
   4e56b:	test   eax,eax
   4e56d:	je     4e534 <check_arrival_expand_ecl+0xe4>
   4e56f:	mov    rdi,QWORD PTR [rsp+0x20]
   4e574:	mov    DWORD PTR [rsp+0xc],eax
   4e578:	call   4bdc0 <rpl_free>
   4e57d:	mov    eax,DWORD PTR [rsp+0xc]
   4e581:	mov    rbx,QWORD PTR [rsp+0x28]
   4e586:	xor    rbx,QWORD PTR fs:0x28
   4e58f:	jne    4e5a7 <check_arrival_expand_ecl+0x157>
   4e591:	add    rsp,0x38
   4e595:	pop    rbx
   4e596:	pop    rbp
   4e597:	pop    r12
   4e599:	pop    r13
   4e59b:	pop    r14
   4e59d:	pop    r15
   4e59f:	ret    
   4e5a0:	mov    eax,0xc
   4e5a5:	jmp    4e581 <check_arrival_expand_ecl+0x131>
   4e5a7:	call   c7b0 <__stack_chk_fail@plt>
   4e5ac:	nop    DWORD PTR [rax+0x0]

000000000004e5b0 <re_node_set_add_intersect>:
   4e5b0:	push   r13
   4e5b2:	xor    eax,eax
   4e5b4:	push   r12
   4e5b6:	push   rbp
   4e5b7:	mov    rbp,rsi
   4e5ba:	push   rbx
   4e5bb:	sub    rsp,0x8
   4e5bf:	mov    rsi,QWORD PTR [rsi+0x8]
   4e5c3:	test   rsi,rsi
   4e5c6:	je     4e694 <re_node_set_add_intersect+0xe4>
   4e5cc:	mov    r8,QWORD PTR [rdx+0x8]
   4e5d0:	mov    r12,rdx
   4e5d3:	test   r8,r8
   4e5d6:	je     4e694 <re_node_set_add_intersect+0xe4>
   4e5dc:	mov    rax,QWORD PTR [rdi+0x8]
   4e5e0:	mov    r13,QWORD PTR [rdi]
   4e5e3:	lea    rdx,[rsi+r8*1]
   4e5e7:	mov    rbx,rdi
   4e5ea:	mov    rdi,QWORD PTR [rdi+0x10]
   4e5ee:	lea    rcx,[rdx+rax*1]
   4e5f2:	cmp    rcx,r13
   4e5f5:	jg     4e70d <re_node_set_add_intersect+0x15d>
   4e5fb:	lea    r10,[rax+rsi*1]
   4e5ff:	mov    r11,QWORD PTR [rbp+0x10]
   4e603:	sub    rsi,0x1
   4e607:	sub    rax,0x1
   4e60b:	mov    rdx,QWORD PTR [r12+0x10]
   4e610:	add    r10,r8
   4e613:	sub    r8,0x1
   4e617:	mov    rcx,QWORD PTR [r11+rsi*8]
   4e61b:	mov    r9,QWORD PTR [rdx+r8*8]
   4e61f:	nop
   4e620:	cmp    rcx,r9
   4e623:	je     4e63a <re_node_set_add_intersect+0x8a>
   4e625:	jge    4e6a0 <re_node_set_add_intersect+0xf0>
   4e627:	sub    r8,0x1
   4e62b:	js     4e6b0 <re_node_set_add_intersect+0x100>
   4e631:	mov    r9,QWORD PTR [rdx+r8*8]
   4e635:	cmp    rcx,r9
   4e638:	jne    4e625 <re_node_set_add_intersect+0x75>
   4e63a:	test   rax,rax
   4e63d:	jns    4e652 <re_node_set_add_intersect+0xa2>
   4e63f:	jmp    4e65a <re_node_set_add_intersect+0xaa>
   4e641:	nop    DWORD PTR [rax+0x0]
   4e648:	sub    rax,0x1
   4e64c:	cmp    rax,0xffffffffffffffff
   4e650:	je     4e65a <re_node_set_add_intersect+0xaa>
   4e652:	cmp    QWORD PTR [rdi+rax*8],rcx
   4e656:	jg     4e648 <re_node_set_add_intersect+0x98>
   4e658:	je     4e662 <re_node_set_add_intersect+0xb2>
   4e65a:	sub    r10,0x1
   4e65e:	mov    QWORD PTR [rdi+r10*8],rcx
   4e662:	sub    rsi,0x1
   4e666:	js     4e6b0 <re_node_set_add_intersect+0x100>
   4e668:	sub    r8,0x1
   4e66c:	js     4e6b0 <re_node_set_add_intersect+0x100>
   4e66e:	mov    rcx,QWORD PTR [r11+rsi*8]
   4e672:	jmp    4e631 <re_node_set_add_intersect+0x81>
   4e674:	nop    DWORD PTR [rax+0x0]
   4e678:	sub    rax,0x1
   4e67c:	mov    QWORD PTR [r9],rcx
   4e67f:	cmp    rax,0xffffffffffffffff
   4e683:	jne    4e6e0 <re_node_set_add_intersect+0x130>
   4e685:	shl    rdx,0x3
   4e689:	lea    rsi,[rdi+r10*8]
   4e68d:	call   cb30 <memcpy@plt>
   4e692:	xor    eax,eax
   4e694:	add    rsp,0x8
   4e698:	pop    rbx
   4e699:	pop    rbp
   4e69a:	pop    r12
   4e69c:	pop    r13
   4e69e:	ret    
   4e69f:	nop
   4e6a0:	sub    rsi,0x1
   4e6a4:	js     4e6b0 <re_node_set_add_intersect+0x100>
   4e6a6:	mov    rcx,QWORD PTR [r11+rsi*8]
   4e6aa:	jmp    4e620 <re_node_set_add_intersect+0x70>
   4e6af:	nop
   4e6b0:	mov    rcx,QWORD PTR [rbx+0x8]
   4e6b4:	mov    rdx,QWORD PTR [rbp+0x8]
   4e6b8:	add    rdx,rcx
   4e6bb:	add    rdx,QWORD PTR [r12+0x8]
   4e6c0:	lea    rax,[rcx-0x1]
   4e6c4:	lea    r8,[rdx-0x1]
   4e6c8:	sub    rdx,r10
   4e6cb:	add    rcx,rdx
   4e6ce:	mov    QWORD PTR [rbx+0x8],rcx
   4e6d2:	test   rdx,rdx
   4e6d5:	jle    4e685 <re_node_set_add_intersect+0xd5>
   4e6d7:	test   rax,rax
   4e6da:	js     4e685 <re_node_set_add_intersect+0xd5>
   4e6dc:	nop    DWORD PTR [rax+0x0]
   4e6e0:	mov    rsi,QWORD PTR [rdi+r8*8]
   4e6e4:	mov    rcx,QWORD PTR [rdi+rax*8]
   4e6e8:	lea    r9,[rax+rdx*1]
   4e6ec:	lea    r9,[rdi+r9*8]
   4e6f0:	cmp    rsi,rcx
   4e6f3:	jle    4e678 <re_node_set_add_intersect+0xc8>
   4e6f9:	mov    QWORD PTR [r9],rsi
   4e6fc:	sub    r8,0x1
   4e700:	sub    rdx,0x1
   4e704:	jne    4e6e0 <re_node_set_add_intersect+0x130>
   4e706:	xor    edx,edx
   4e708:	jmp    4e689 <re_node_set_add_intersect+0xd9>
   4e70d:	add    r13,rdx
   4e710:	lea    rsi,[r13*8+0x0]
   4e718:	call   ca20 <realloc@plt>
   4e71d:	mov    rdi,rax
   4e720:	test   rax,rax
   4e723:	je     4e73e <re_node_set_add_intersect+0x18e>
   4e725:	mov    rsi,QWORD PTR [rbp+0x8]
   4e729:	mov    r8,QWORD PTR [r12+0x8]
   4e72e:	mov    QWORD PTR [rbx+0x10],rax
   4e732:	mov    QWORD PTR [rbx],r13
   4e735:	mov    rax,QWORD PTR [rbx+0x8]
   4e739:	jmp    4e5fb <re_node_set_add_intersect+0x4b>
   4e73e:	mov    eax,0xc
   4e743:	jmp    4e694 <re_node_set_add_intersect+0xe4>
   4e748:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004e750 <create_token_tree.isra.0>:
   4e750:	push   r14
   4e752:	mov    r14,rdi
   4e755:	push   r12
   4e757:	mov    r12,rsi
   4e75a:	push   rbp
   4e75b:	mov    rbp,rdx
   4e75e:	push   rbx
   4e75f:	mov    rbx,rcx
   4e762:	sub    rsp,0x18
   4e766:	mov    edi,DWORD PTR [rsi]
   4e768:	cmp    edi,0xf
   4e76b:	je     4e7e8 <create_token_tree.isra.0+0x98>
   4e76d:	movsxd rsi,edi
   4e770:	mov    rdx,QWORD PTR [r14]
   4e773:	lea    ecx,[rdi+0x1]
   4e776:	mov    rax,rsi
   4e779:	shl    rax,0x6
   4e77d:	add    rax,0x8
   4e781:	shl    rsi,0x6
   4e785:	mov    DWORD PTR [r12],ecx
   4e789:	add    rax,rdx
   4e78c:	lea    rdi,[rdx+rsi*1]
   4e790:	mov    QWORD PTR [rdi+0x8],0x0
   4e798:	mov    QWORD PTR [rdi+0x10],rbp
   4e79c:	mov    QWORD PTR [rdi+0x18],rbx
   4e7a0:	movdqu xmm0,XMMWORD PTR [r8]
   4e7a5:	movups XMMWORD PTR [rdi+0x30],xmm0
   4e7a9:	and    BYTE PTR [rdx+rsi*1+0x3a],0xf3
   4e7ae:	mov    QWORD PTR [rdi+0x20],0x0
   4e7b6:	mov    QWORD PTR [rdi+0x28],0x0
   4e7be:	mov    QWORD PTR [rdi+0x40],0xffffffffffffffff
   4e7c6:	test   rbp,rbp
   4e7c9:	je     4e7cf <create_token_tree.isra.0+0x7f>
   4e7cb:	mov    QWORD PTR [rbp+0x0],rax
   4e7cf:	test   rbx,rbx
   4e7d2:	je     4e7d7 <create_token_tree.isra.0+0x87>
   4e7d4:	mov    QWORD PTR [rbx],rax
   4e7d7:	add    rsp,0x18
   4e7db:	pop    rbx
   4e7dc:	pop    rbp
   4e7dd:	pop    r12
   4e7df:	pop    r14
   4e7e1:	ret    
   4e7e2:	nop    WORD PTR [rax+rax*1+0x0]
   4e7e8:	mov    edi,0x3c8
   4e7ed:	mov    QWORD PTR [rsp+0x8],r8
   4e7f2:	call   c0e0 <malloc@plt>
   4e7f7:	mov    rdx,rax
   4e7fa:	test   rax,rax
   4e7fd:	je     4e81e <create_token_tree.isra.0+0xce>
   4e7ff:	mov    rax,QWORD PTR [r14]
   4e802:	mov    r8,QWORD PTR [rsp+0x8]
   4e807:	mov    QWORD PTR [r14],rdx
   4e80a:	mov    ecx,0x1
   4e80f:	xor    esi,esi
   4e811:	mov    QWORD PTR [rdx],rax
   4e814:	mov    eax,0x8
   4e819:	jmp    4e781 <create_token_tree.isra.0+0x31>
   4e81e:	xor    eax,eax
   4e820:	jmp    4e7d7 <create_token_tree.isra.0+0x87>
   4e822:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4e82d:	nop    DWORD PTR [rax]

000000000004e830 <duplicate_tree>:
   4e830:	push   r14
   4e832:	push   r13
   4e834:	lea    r13,[rsi+0x70]
   4e838:	push   r12
   4e83a:	lea    r12,[rsi+0x80]
   4e841:	push   rbp
   4e842:	push   rbx
   4e843:	mov    rbx,rdi
   4e846:	sub    rsp,0x10
   4e84a:	mov    rbp,QWORD PTR [rdi]
   4e84d:	mov    rax,QWORD PTR fs:0x28
   4e856:	mov    QWORD PTR [rsp+0x8],rax
   4e85b:	xor    eax,eax
   4e85d:	mov    r14,rsp
   4e860:	jmp    4e86f <duplicate_tree+0x3f>
   4e862:	nop    WORD PTR [rax+rax*1+0x0]
   4e868:	lea    r14,[rbp+0x8]
   4e86c:	mov    rbx,rax
   4e86f:	lea    r8,[rbx+0x28]
   4e873:	xor    ecx,ecx
   4e875:	xor    edx,edx
   4e877:	mov    rsi,r12
   4e87a:	mov    rdi,r13
   4e87d:	call   4e750 <create_token_tree.isra.0>
   4e882:	mov    QWORD PTR [r14],rax
   4e885:	test   rax,rax
   4e888:	je     4e8c4 <duplicate_tree+0x94>
   4e88a:	mov    QWORD PTR [rax],rbp
   4e88d:	mov    rbp,QWORD PTR [r14]
   4e890:	or     BYTE PTR [rbp+0x32],0x4
   4e894:	mov    rax,QWORD PTR [rbx+0x8]
   4e898:	test   rax,rax
   4e89b:	jne    4e868 <duplicate_tree+0x38>
   4e89d:	jmp    4e8a3 <duplicate_tree+0x73>
   4e89f:	nop
   4e8a0:	mov    rbx,rdx
   4e8a3:	mov    rdx,QWORD PTR [rbx+0x10]
   4e8a7:	test   rdx,rdx
   4e8aa:	je     4e8b1 <duplicate_tree+0x81>
   4e8ac:	cmp    rdx,rax
   4e8af:	jne    4e8e8 <duplicate_tree+0xb8>
   4e8b1:	mov    rdx,QWORD PTR [rbx]
   4e8b4:	mov    rbp,QWORD PTR [rbp+0x0]
   4e8b8:	mov    rax,rbx
   4e8bb:	test   rdx,rdx
   4e8be:	jne    4e8a0 <duplicate_tree+0x70>
   4e8c0:	mov    rax,QWORD PTR [rsp]
   4e8c4:	mov    rcx,QWORD PTR [rsp+0x8]
   4e8c9:	xor    rcx,QWORD PTR fs:0x28
   4e8d2:	jne    4e8f4 <duplicate_tree+0xc4>
   4e8d4:	add    rsp,0x10
   4e8d8:	pop    rbx
   4e8d9:	pop    rbp
   4e8da:	pop    r12
   4e8dc:	pop    r13
   4e8de:	pop    r14
   4e8e0:	ret    
   4e8e1:	nop    DWORD PTR [rax+0x0]
   4e8e8:	lea    r14,[rbp+0x10]
   4e8ec:	mov    rbx,rdx
   4e8ef:	jmp    4e86f <duplicate_tree+0x3f>
   4e8f4:	call   c7b0 <__stack_chk_fail@plt>
   4e8f9:	nop    DWORD PTR [rax+0x0]

000000000004e900 <lower_subexp>:
   4e900:	push   r15
   4e902:	push   r14
   4e904:	push   r13
   4e906:	push   r12
   4e908:	push   rbp
   4e909:	push   rbx
   4e90a:	mov    rbx,rdx
   4e90d:	sub    rsp,0x38
   4e911:	mov    rbp,QWORD PTR [rsi]
   4e914:	mov    r12,QWORD PTR [rdx+0x8]
   4e918:	mov    QWORD PTR [rsp+0x8],rdi
   4e91d:	mov    rax,QWORD PTR fs:0x28
   4e926:	mov    QWORD PTR [rsp+0x28],rax
   4e92b:	xor    eax,eax
   4e92d:	test   BYTE PTR [rsi+0x38],0x10
   4e931:	je     4eaf0 <lower_subexp+0x1f0>
   4e937:	test   r12,r12
   4e93a:	je     4ea88 <lower_subexp+0x188>
   4e940:	mov    rax,QWORD PTR [rdx+0x28]
   4e944:	cmp    rax,0x3f
   4e948:	jg     4ea5e <lower_subexp+0x15e>
   4e94e:	mov    rdx,QWORD PTR [rbp+0xa0]
   4e955:	bt     rdx,rax
   4e959:	jae    4ea5e <lower_subexp+0x15e>
   4e95f:	lea    r14,[rbp+0x70]
   4e963:	sub    rbp,0xffffffffffffff80
   4e967:	pxor   xmm0,xmm0
   4e96b:	xor    ecx,ecx
   4e96d:	lea    r8,[rsp+0x10]
   4e972:	xor    edx,edx
   4e974:	mov    rsi,rbp
   4e977:	mov    rdi,r14
   4e97a:	movaps XMMWORD PTR [rsp+0x10],xmm0
   4e97f:	mov    QWORD PTR [rsp],r8
   4e983:	mov    BYTE PTR [rsp+0x18],0x8
   4e988:	call   4e750 <create_token_tree.isra.0>
   4e98d:	mov    r8,QWORD PTR [rsp]
   4e991:	pxor   xmm0,xmm0
   4e995:	xor    ecx,ecx
   4e997:	xor    edx,edx
   4e999:	mov    rsi,rbp
   4e99c:	mov    rdi,r14
   4e99f:	movaps XMMWORD PTR [rsp+0x10],xmm0
   4e9a4:	mov    r13,rax
   4e9a7:	mov    BYTE PTR [rsp+0x18],0x9
   4e9ac:	call   4e750 <create_token_tree.isra.0>
   4e9b1:	mov    r8,QWORD PTR [rsp]
   4e9b5:	mov    r15,rax
   4e9b8:	pxor   xmm0,xmm0
   4e9bc:	mov    rcx,r15
   4e9bf:	mov    rdx,r12
   4e9c2:	mov    rsi,rbp
   4e9c5:	mov    rdi,r14
   4e9c8:	mov    QWORD PTR [rsp],r8
   4e9cc:	movaps XMMWORD PTR [rsp+0x10],xmm0
   4e9d1:	mov    BYTE PTR [rsp+0x18],0x10
   4e9d6:	call   4e750 <create_token_tree.isra.0>
   4e9db:	mov    r8,QWORD PTR [rsp]
   4e9df:	mov    rcx,rax
   4e9e2:	pxor   xmm0,xmm0
   4e9e6:	mov    rdx,r13
   4e9e9:	mov    rsi,rbp
   4e9ec:	mov    rdi,r14
   4e9ef:	movaps XMMWORD PTR [rsp+0x10],xmm0
   4e9f4:	mov    QWORD PTR [rsp],rcx
   4e9f8:	mov    BYTE PTR [rsp+0x18],0x10
   4e9fd:	call   4e750 <create_token_tree.isra.0>
   4ea02:	mov    r12,rax
   4ea05:	test   rax,rax
   4ea08:	je     4eb60 <lower_subexp+0x260>
   4ea0e:	mov    rcx,QWORD PTR [rsp]
   4ea12:	test   rcx,rcx
   4ea15:	je     4eb60 <lower_subexp+0x260>
   4ea1b:	test   r13,r13
   4ea1e:	je     4eb60 <lower_subexp+0x260>
   4ea24:	test   r15,r15
   4ea27:	je     4eb60 <lower_subexp+0x260>
   4ea2d:	mov    rax,QWORD PTR [rbx+0x28]
   4ea31:	mov    QWORD PTR [r15+0x28],rax
   4ea35:	mov    QWORD PTR [r13+0x28],rax
   4ea39:	movzx  eax,BYTE PTR [rbx+0x32]
   4ea3d:	movzx  edx,BYTE PTR [r15+0x32]
   4ea42:	and    eax,0x8
   4ea45:	mov    ecx,eax
   4ea47:	and    edx,0xfffffff7
   4ea4a:	or     edx,ecx
   4ea4c:	mov    BYTE PTR [r15+0x32],dl
   4ea50:	movzx  eax,BYTE PTR [r13+0x32]
   4ea55:	and    eax,0xfffffff7
   4ea58:	or     eax,ecx
   4ea5a:	mov    BYTE PTR [r13+0x32],al
   4ea5e:	mov    rax,QWORD PTR [rsp+0x28]
   4ea63:	xor    rax,QWORD PTR fs:0x28
   4ea6c:	jne    4eb73 <lower_subexp+0x273>
   4ea72:	add    rsp,0x38
   4ea76:	mov    rax,r12
   4ea79:	pop    rbx
   4ea7a:	pop    rbp
   4ea7b:	pop    r12
   4ea7d:	pop    r13
   4ea7f:	pop    r14
   4ea81:	pop    r15
   4ea83:	ret    
   4ea84:	nop    DWORD PTR [rax+0x0]
   4ea88:	lea    r14,[rbp+0x70]
   4ea8c:	sub    rbp,0xffffffffffffff80
   4ea90:	pxor   xmm0,xmm0
   4ea94:	xor    ecx,ecx
   4ea96:	lea    r8,[rsp+0x10]
   4ea9b:	xor    edx,edx
   4ea9d:	mov    rsi,rbp
   4eaa0:	mov    rdi,r14
   4eaa3:	movaps XMMWORD PTR [rsp+0x10],xmm0
   4eaa8:	mov    QWORD PTR [rsp],r8
   4eaac:	mov    BYTE PTR [rsp+0x18],0x8
   4eab1:	call   4e750 <create_token_tree.isra.0>
   4eab6:	mov    r8,QWORD PTR [rsp]
   4eaba:	pxor   xmm0,xmm0
   4eabe:	xor    ecx,ecx
   4eac0:	xor    edx,edx
   4eac2:	mov    rsi,rbp
   4eac5:	mov    rdi,r14
   4eac8:	movaps XMMWORD PTR [rsp+0x10],xmm0
   4eacd:	mov    r13,rax
   4ead0:	mov    BYTE PTR [rsp+0x18],0x9
   4ead5:	call   4e750 <create_token_tree.isra.0>
   4eada:	mov    r8,QWORD PTR [rsp]
   4eade:	mov    rcx,rax
   4eae1:	mov    r15,rax
   4eae4:	jmp    4e9e2 <lower_subexp+0xe2>
   4eae9:	nop    DWORD PTR [rax+0x0]
   4eaf0:	lea    r14,[rbp+0x70]
   4eaf4:	sub    rbp,0xffffffffffffff80
   4eaf8:	pxor   xmm0,xmm0
   4eafc:	xor    ecx,ecx
   4eafe:	lea    r8,[rsp+0x10]
   4eb03:	xor    edx,edx
   4eb05:	mov    rsi,rbp
   4eb08:	mov    rdi,r14
   4eb0b:	movaps XMMWORD PTR [rsp+0x10],xmm0
   4eb10:	mov    QWORD PTR [rsp],r8
   4eb14:	mov    BYTE PTR [rsp+0x18],0x8
   4eb19:	call   4e750 <create_token_tree.isra.0>
   4eb1e:	mov    r8,QWORD PTR [rsp]
   4eb22:	xor    ecx,ecx
   4eb24:	pxor   xmm0,xmm0
   4eb28:	xor    edx,edx
   4eb2a:	mov    rsi,rbp
   4eb2d:	mov    rdi,r14
   4eb30:	movaps XMMWORD PTR [rsp+0x10],xmm0
   4eb35:	mov    r13,rax
   4eb38:	mov    BYTE PTR [rsp+0x18],0x9
   4eb3d:	call   4e750 <create_token_tree.isra.0>
   4eb42:	test   r12,r12
   4eb45:	mov    r8,QWORD PTR [rsp]
   4eb49:	mov    r15,rax
   4eb4c:	mov    rcx,rax
   4eb4f:	jne    4e9b8 <lower_subexp+0xb8>
   4eb55:	jmp    4e9e2 <lower_subexp+0xe2>
   4eb5a:	nop    WORD PTR [rax+rax*1+0x0]
   4eb60:	mov    rax,QWORD PTR [rsp+0x8]
   4eb65:	xor    r12d,r12d
   4eb68:	mov    DWORD PTR [rax],0xc
   4eb6e:	jmp    4ea5e <lower_subexp+0x15e>
   4eb73:	call   c7b0 <__stack_chk_fail@plt>
   4eb78:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004eb80 <lower_subexps>:
   4eb80:	endbr64 
   4eb84:	push   rbp
   4eb85:	mov    rbp,rdi
   4eb88:	push   rbx
   4eb89:	mov    rbx,rsi
   4eb8c:	sub    rsp,0x18
   4eb90:	mov    rdx,QWORD PTR [rsi+0x8]
   4eb94:	mov    rax,QWORD PTR fs:0x28
   4eb9d:	mov    QWORD PTR [rsp+0x8],rax
   4eba2:	xor    eax,eax
   4eba4:	mov    DWORD PTR [rsp+0x4],0x0
   4ebac:	test   rdx,rdx
   4ebaf:	je     4ebb7 <lower_subexps+0x37>
   4ebb1:	cmp    BYTE PTR [rdx+0x30],0x11
   4ebb5:	je     4ebe8 <lower_subexps+0x68>
   4ebb7:	mov    rdx,QWORD PTR [rbx+0x10]
   4ebbb:	test   rdx,rdx
   4ebbe:	je     4ebc6 <lower_subexps+0x46>
   4ebc0:	cmp    BYTE PTR [rdx+0x30],0x11
   4ebc4:	je     4ec08 <lower_subexps+0x88>
   4ebc6:	mov    rcx,QWORD PTR [rsp+0x8]
   4ebcb:	xor    rcx,QWORD PTR fs:0x28
   4ebd4:	mov    eax,DWORD PTR [rsp+0x4]
   4ebd8:	jne    4ec23 <lower_subexps+0xa3>
   4ebda:	add    rsp,0x18
   4ebde:	pop    rbx
   4ebdf:	pop    rbp
   4ebe0:	ret    
   4ebe1:	nop    DWORD PTR [rax+0x0]
   4ebe8:	lea    rdi,[rsp+0x4]
   4ebed:	mov    rsi,rbp
   4ebf0:	call   4e900 <lower_subexp>
   4ebf5:	mov    QWORD PTR [rbx+0x8],rax
   4ebf9:	test   rax,rax
   4ebfc:	je     4ebb7 <lower_subexps+0x37>
   4ebfe:	mov    QWORD PTR [rax],rbx
   4ec01:	jmp    4ebb7 <lower_subexps+0x37>
   4ec03:	nop    DWORD PTR [rax+rax*1+0x0]
   4ec08:	lea    rdi,[rsp+0x4]
   4ec0d:	mov    rsi,rbp
   4ec10:	call   4e900 <lower_subexp>
   4ec15:	mov    QWORD PTR [rbx+0x10],rax
   4ec19:	test   rax,rax
   4ec1c:	je     4ebc6 <lower_subexps+0x46>
   4ec1e:	mov    QWORD PTR [rax],rbx
   4ec21:	jmp    4ebc6 <lower_subexps+0x46>
   4ec23:	call   c7b0 <__stack_chk_fail@plt>
   4ec28:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004ec30 <re_node_set_init_copy>:
   4ec30:	push   r12
   4ec32:	push   rbp
   4ec33:	push   rbx
   4ec34:	mov    rdx,QWORD PTR [rsi+0x8]
   4ec38:	mov    rbx,rdi
   4ec3b:	mov    QWORD PTR [rdi+0x8],rdx
   4ec3f:	test   rdx,rdx
   4ec42:	jle    4ec80 <re_node_set_init_copy+0x50>
   4ec44:	mov    QWORD PTR [rdi],rdx
   4ec47:	lea    r12,[rdx*8+0x0]
   4ec4f:	mov    rbp,rsi
   4ec52:	mov    rdi,r12
   4ec55:	call   c0e0 <malloc@plt>
   4ec5a:	mov    QWORD PTR [rbx+0x10],rax
   4ec5e:	mov    rdi,rax
   4ec61:	test   rax,rax
   4ec64:	je     4eca0 <re_node_set_init_copy+0x70>
   4ec66:	mov    rsi,QWORD PTR [rbp+0x10]
   4ec6a:	mov    rdx,r12
   4ec6d:	call   cb30 <memcpy@plt>
   4ec72:	xor    eax,eax
   4ec74:	pop    rbx
   4ec75:	pop    rbp
   4ec76:	pop    r12
   4ec78:	ret    
   4ec79:	nop    DWORD PTR [rax+0x0]
   4ec80:	pxor   xmm0,xmm0
   4ec84:	mov    QWORD PTR [rdi+0x10],0x0
   4ec8c:	xor    eax,eax
   4ec8e:	movups XMMWORD PTR [rdi],xmm0
   4ec91:	pop    rbx
   4ec92:	pop    rbp
   4ec93:	pop    r12
   4ec95:	ret    
   4ec96:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4eca0:	mov    QWORD PTR [rbx+0x8],0x0
   4eca8:	mov    eax,0xc
   4ecad:	mov    QWORD PTR [rbx],0x0
   4ecb4:	jmp    4ec74 <re_node_set_init_copy+0x44>
   4ecb6:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000004ecc0 <re_node_set_init_union>:
   4ecc0:	push   r14
   4ecc2:	push   r13
   4ecc4:	mov    r13,rdi
   4ecc7:	push   rbp
   4ecc8:	push   rbx
   4ecc9:	sub    rsp,0x18
   4eccd:	test   rsi,rsi
   4ecd0:	je     4ed85 <re_node_set_init_union+0xc5>
   4ecd6:	mov    rbx,QWORD PTR [rsi+0x8]
   4ecda:	test   rdx,rdx
   4ecdd:	je     4ed80 <re_node_set_init_union+0xc0>
   4ece3:	test   rbx,rbx
   4ece6:	jle    4ed85 <re_node_set_init_union+0xc5>
   4ecec:	mov    r14,QWORD PTR [rdx+0x8]
   4ecf0:	mov    QWORD PTR [rsp],rdx
   4ecf4:	test   r14,r14
   4ecf7:	jle    4edb3 <re_node_set_init_union+0xf3>
   4ecfd:	lea    rdi,[rbx+r14*1]
   4ed01:	mov    QWORD PTR [rsp+0x8],rsi
   4ed06:	mov    QWORD PTR [r13+0x0],rdi
   4ed0a:	shl    rdi,0x3
   4ed0e:	call   c0e0 <malloc@plt>
   4ed13:	mov    rsi,QWORD PTR [rsp+0x8]
   4ed18:	mov    rdx,QWORD PTR [rsp]
   4ed1c:	test   rax,rax
   4ed1f:	mov    QWORD PTR [r13+0x10],rax
   4ed23:	je     4ee20 <re_node_set_init_union+0x160>
   4ed29:	mov    r8,QWORD PTR [rdx+0x10]
   4ed2d:	mov    r9,QWORD PTR [rsi+0x10]
   4ed31:	xor    ebp,ebp
   4ed33:	xor    edx,edx
   4ed35:	xor    ecx,ecx
   4ed37:	jmp    4ed62 <re_node_set_init_union+0xa2>
   4ed39:	nop    DWORD PTR [rax+0x0]
   4ed40:	sete   dil
   4ed44:	mov    QWORD PTR [rax+rbp*8-0x8],rsi
   4ed49:	add    rcx,0x1
   4ed4d:	movzx  edi,dil
   4ed51:	add    rdx,rdi
   4ed54:	cmp    rbx,rcx
   4ed57:	jle    4edc8 <re_node_set_init_union+0x108>
   4ed59:	cmp    r14,rdx
   4ed5c:	jle    4ee00 <re_node_set_init_union+0x140>
   4ed62:	mov    rsi,QWORD PTR [r9+rcx*8]
   4ed66:	mov    rdi,QWORD PTR [r8+rdx*8]
   4ed6a:	add    rbp,0x1
   4ed6e:	cmp    rsi,rdi
   4ed71:	jle    4ed40 <re_node_set_init_union+0x80>
   4ed73:	mov    QWORD PTR [rax+rbp*8-0x8],rdi
   4ed78:	add    rdx,0x1
   4ed7c:	jmp    4ed54 <re_node_set_init_union+0x94>
   4ed7e:	xchg   ax,ax
   4ed80:	test   rbx,rbx
   4ed83:	jg     4edb3 <re_node_set_init_union+0xf3>
   4ed85:	test   rdx,rdx
   4ed88:	je     4ed91 <re_node_set_init_union+0xd1>
   4ed8a:	cmp    QWORD PTR [rdx+0x8],0x0
   4ed8f:	jg     4edb0 <re_node_set_init_union+0xf0>
   4ed91:	mov    QWORD PTR [r13+0x10],0x0
   4ed99:	pxor   xmm0,xmm0
   4ed9d:	xor    eax,eax
   4ed9f:	movaps XMMWORD PTR [r13+0x0],xmm0
   4eda4:	add    rsp,0x18
   4eda8:	pop    rbx
   4eda9:	pop    rbp
   4edaa:	pop    r13
   4edac:	pop    r14
   4edae:	ret    
   4edaf:	nop
   4edb0:	mov    rsi,rdx
   4edb3:	add    rsp,0x18
   4edb7:	mov    rdi,r13
   4edba:	pop    rbx
   4edbb:	pop    rbp
   4edbc:	pop    r13
   4edbe:	pop    r14
   4edc0:	jmp    4ec30 <re_node_set_init_copy>
   4edc5:	nop    DWORD PTR [rax]
   4edc8:	cmp    r14,rdx
   4edcb:	jg     4ede0 <re_node_set_init_union+0x120>
   4edcd:	mov    QWORD PTR [r13+0x8],rbp
   4edd1:	add    rsp,0x18
   4edd5:	xor    eax,eax
   4edd7:	pop    rbx
   4edd8:	pop    rbp
   4edd9:	pop    r13
   4eddb:	pop    r14
   4eddd:	ret    
   4edde:	xchg   ax,ax
   4ede0:	sub    r14,rdx
   4ede3:	lea    rdi,[rax+rbp*8]
   4ede7:	lea    rsi,[r8+rdx*8]
   4edeb:	lea    r9,[r14*8+0x0]
   4edf3:	add    rbp,r14
   4edf6:	mov    rdx,r9
   4edf9:	call   cb30 <memcpy@plt>
   4edfe:	jmp    4edcd <re_node_set_init_union+0x10d>
   4ee00:	sub    rbx,rcx
   4ee03:	lea    rdi,[rax+rbp*8]
   4ee07:	lea    rsi,[r9+rcx*8]
   4ee0b:	lea    rdx,[rbx*8+0x0]
   4ee13:	add    rbp,rbx
   4ee16:	call   cb30 <memcpy@plt>
   4ee1b:	jmp    4edcd <re_node_set_init_union+0x10d>
   4ee1d:	nop    DWORD PTR [rax]
   4ee20:	mov    eax,0xc
   4ee25:	jmp    4eda4 <re_node_set_init_union+0xe4>
   4ee2a:	nop    WORD PTR [rax+rax*1+0x0]

000000000004ee30 <re_acquire_state_context>:
   4ee30:	push   r15
   4ee32:	mov    r15,rdx
   4ee35:	push   r14
   4ee37:	push   r13
   4ee39:	push   r12
   4ee3b:	push   rbp
   4ee3c:	push   rbx
   4ee3d:	sub    rsp,0x28
   4ee41:	mov    rdx,QWORD PTR [rdx+0x8]
   4ee45:	mov    QWORD PTR [rsp+0x10],rdi
   4ee4a:	test   rdx,rdx
   4ee4d:	je     4f128 <re_acquire_state_context+0x2f8>
   4ee53:	mov    r8d,ecx
   4ee56:	mov    r13,rsi
   4ee59:	mov    r14d,ecx
   4ee5c:	lea    rbx,[r8+rdx*1]
   4ee60:	jle    4ee7c <re_acquire_state_context+0x4c>
   4ee62:	mov    rax,QWORD PTR [r15+0x10]
   4ee66:	lea    rdx,[rax+rdx*8]
   4ee6a:	nop    WORD PTR [rax+rax*1+0x0]
   4ee70:	add    rbx,QWORD PTR [rax]
   4ee73:	add    rax,0x8
   4ee77:	cmp    rdx,rax
   4ee7a:	jne    4ee70 <re_acquire_state_context+0x40>
   4ee7c:	mov    rax,QWORD PTR [r13+0x88]
   4ee83:	and    rax,rbx
   4ee86:	lea    rdx,[rax+rax*2]
   4ee8a:	mov    rax,QWORD PTR [r13+0x40]
   4ee8e:	lea    rax,[rax+rdx*8]
   4ee92:	mov    r11,QWORD PTR [rax]
   4ee95:	test   r11,r11
   4ee98:	jle    4eef8 <re_acquire_state_context+0xc8>
   4ee9a:	mov    rbp,QWORD PTR [rax+0x10]
   4ee9e:	xor    r10d,r10d
   4eea1:	mov    r9d,r14d
   4eea4:	jmp    4eeb9 <re_acquire_state_context+0x89>
   4eea6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   4eeb0:	add    r10,0x1
   4eeb4:	cmp    r10,r11
   4eeb7:	je     4eef8 <re_acquire_state_context+0xc8>
   4eeb9:	mov    r12,QWORD PTR [rbp+r10*8+0x0]
   4eebe:	cmp    QWORD PTR [r12],rbx
   4eec2:	jne    4eeb0 <re_acquire_state_context+0x80>
   4eec4:	movzx  eax,BYTE PTR [r12+0x68]
   4eeca:	and    eax,0xf
   4eecd:	cmp    eax,r9d
   4eed0:	jne    4eeb0 <re_acquire_state_context+0x80>
   4eed2:	mov    rdi,QWORD PTR [r12+0x50]
   4eed7:	mov    rsi,r15
   4eeda:	call   4bf70 <re_node_set_compare>
   4eedf:	test   al,al
   4eee1:	je     4eeb0 <re_acquire_state_context+0x80>
   4eee3:	add    rsp,0x28
   4eee7:	mov    rax,r12
   4eeea:	pop    rbx
   4eeeb:	pop    rbp
   4eeec:	pop    r12
   4eeee:	pop    r13
   4eef0:	pop    r14
   4eef2:	pop    r15
   4eef4:	ret    
   4eef5:	nop    DWORD PTR [rax]
   4eef8:	mov    esi,0x1
   4eefd:	mov    edi,0x70
   4ef02:	call   c880 <calloc@plt>
   4ef07:	mov    r12,rax
   4ef0a:	test   rax,rax
   4ef0d:	je     4f091 <re_acquire_state_context+0x261>
   4ef13:	lea    rbp,[rax+0x8]
   4ef17:	mov    rsi,r15
   4ef1a:	mov    rdi,rbp
   4ef1d:	call   4ec30 <re_node_set_init_copy>
   4ef22:	test   eax,eax
   4ef24:	jne    4f136 <re_acquire_state_context+0x306>
   4ef2a:	movzx  eax,BYTE PTR [r12+0x68]
   4ef30:	mov    edx,r14d
   4ef33:	mov    QWORD PTR [r12+0x50],rbp
   4ef38:	mov    ecx,r14d
   4ef3b:	and    edx,0xf
   4ef3e:	and    eax,0xfffffff0
   4ef41:	or     eax,edx
   4ef43:	cmp    QWORD PTR [r15+0x8],0x0
   4ef48:	mov    BYTE PTR [r12+0x68],al
   4ef4d:	jle    4f073 <re_acquire_state_context+0x243>
   4ef53:	lea    rax,[r12+0x18]
   4ef58:	xor    r14d,r14d
   4ef5b:	mov    QWORD PTR [rsp+0x18],rbx
   4ef60:	xor    r10d,r10d
   4ef63:	mov    QWORD PTR [rsp],rax
   4ef67:	mov    rbx,r13
   4ef6a:	mov    r13,r14
   4ef6d:	mov    r14,rbp
   4ef70:	mov    ebp,ecx
   4ef72:	nop    WORD PTR [rax+rax*1+0x0]
   4ef78:	mov    rax,QWORD PTR [r15+0x10]
   4ef7c:	mov    rax,QWORD PTR [rax+r13*8]
   4ef80:	shl    rax,0x4
   4ef84:	add    rax,QWORD PTR [rbx]
   4ef87:	mov    edx,DWORD PTR [rax+0x8]
   4ef8a:	movzx  edi,BYTE PTR [rax+0x8]
   4ef8e:	shr    edx,0x8
   4ef91:	mov    r8d,edx
   4ef94:	and    edx,0x3ff
   4ef9a:	and    r8w,0x3ff
   4efa0:	cmp    edi,0x1
   4efa3:	jne    4efad <re_acquire_state_context+0x17d>
   4efa5:	test   edx,edx
   4efa7:	je     4f05d <re_acquire_state_context+0x22d>
   4efad:	movzx  esi,BYTE PTR [r12+0x68]
   4efb3:	movzx  eax,BYTE PTR [rax+0xa]
   4efb7:	mov    r11d,esi
   4efba:	shr    al,0x4
   4efbd:	and    esi,0xffffffdf
   4efc0:	shr    r11b,0x5
   4efc4:	or     eax,r11d
   4efc7:	and    eax,0x1
   4efca:	shl    eax,0x5
   4efcd:	or     eax,esi
   4efcf:	mov    BYTE PTR [r12+0x68],al
   4efd4:	cmp    edi,0x2
   4efd7:	je     4f0a8 <re_acquire_state_context+0x278>
   4efdd:	cmp    edi,0x4
   4efe0:	jne    4efea <re_acquire_state_context+0x1ba>
   4efe2:	or     eax,0x40
   4efe5:	mov    BYTE PTR [r12+0x68],al
   4efea:	test   edx,edx
   4efec:	je     4f05d <re_acquire_state_context+0x22d>
   4efee:	cmp    r14,QWORD PTR [r12+0x50]
   4eff3:	je     4f0d8 <re_acquire_state_context+0x2a8>
   4eff9:	test   r8b,0x1
   4effd:	je     4f0b8 <re_acquire_state_context+0x288>
   4f003:	test   bpl,0x1
   4f007:	je     4f030 <re_acquire_state_context+0x200>
   4f009:	test   r8b,0x2
   4f00d:	jne    4f030 <re_acquire_state_context+0x200>
   4f00f:	test   r8b,0x10
   4f013:	je     4f01b <re_acquire_state_context+0x1eb>
   4f015:	test   bpl,0x2
   4f019:	je     4f030 <re_acquire_state_context+0x200>
   4f01b:	and    r8d,0x40
   4f01f:	je     4f05d <re_acquire_state_context+0x22d>
   4f021:	test   bpl,0x4
   4f025:	jne    4f05d <re_acquire_state_context+0x22d>
   4f027:	nop    WORD PTR [rax+rax*1+0x0]
   4f030:	mov    rdx,r13
   4f033:	sub    rdx,r10
   4f036:	js     4f059 <re_acquire_state_context+0x229>
   4f038:	mov    rax,QWORD PTR [r12+0x10]
   4f03d:	cmp    rdx,rax
   4f040:	jge    4f059 <re_acquire_state_context+0x229>
   4f042:	sub    rax,0x1
   4f046:	mov    rsi,QWORD PTR [rsp]
   4f04a:	lea    rdi,[r12+0x10]
   4f04f:	mov    QWORD PTR [r12+0x10],rax
   4f054:	call   4dcb0 <re_node_set_remove_at.isra.0.part.0>
   4f059:	add    r10,0x1
   4f05d:	add    r13,0x1
   4f061:	cmp    r13,QWORD PTR [r15+0x8]
   4f065:	jl     4ef78 <re_acquire_state_context+0x148>
   4f06b:	mov    r13,rbx
   4f06e:	mov    rbx,QWORD PTR [rsp+0x18]
   4f073:	mov    rdx,rbx
   4f076:	mov    rsi,r12
   4f079:	mov    rdi,r13
   4f07c:	call   4c6b0 <register_state>
   4f081:	test   eax,eax
   4f083:	je     4eee3 <re_acquire_state_context+0xb3>
   4f089:	mov    rdi,r12
   4f08c:	call   4d830 <free_state>
   4f091:	mov    rax,QWORD PTR [rsp+0x10]
   4f096:	xor    r12d,r12d
   4f099:	mov    DWORD PTR [rax],0xc
   4f09f:	jmp    4eee3 <re_acquire_state_context+0xb3>
   4f0a4:	nop    DWORD PTR [rax+0x0]
   4f0a8:	or     eax,0x10
   4f0ab:	mov    BYTE PTR [r12+0x68],al
   4f0b0:	jmp    4efea <re_acquire_state_context+0x1ba>
   4f0b5:	nop    DWORD PTR [rax]
   4f0b8:	test   r8b,0x2
   4f0bc:	je     4f00f <re_acquire_state_context+0x1df>
   4f0c2:	test   bpl,0x1
   4f0c6:	je     4f00f <re_acquire_state_context+0x1df>
   4f0cc:	jmp    4f030 <re_acquire_state_context+0x200>
   4f0d1:	nop    DWORD PTR [rax+0x0]
   4f0d8:	mov    edi,0x18
   4f0dd:	mov    DWORD PTR [rsp+0xc],r8d
   4f0e2:	call   c0e0 <malloc@plt>
   4f0e7:	mov    r8d,DWORD PTR [rsp+0xc]
   4f0ec:	test   rax,rax
   4f0ef:	mov    rdi,rax
   4f0f2:	je     4f089 <re_acquire_state_context+0x259>
   4f0f4:	mov    QWORD PTR [r12+0x50],rax
   4f0f9:	mov    rsi,r15
   4f0fc:	mov    DWORD PTR [rsp+0xc],r8d
   4f101:	call   4ec30 <re_node_set_init_copy>
   4f106:	mov    r8d,DWORD PTR [rsp+0xc]
   4f10b:	test   eax,eax
   4f10d:	jne    4f089 <re_acquire_state_context+0x259>
   4f113:	or     BYTE PTR [r12+0x68],0x80
   4f119:	xor    r10d,r10d
   4f11c:	jmp    4eff9 <re_acquire_state_context+0x1c9>
   4f121:	nop    DWORD PTR [rax+0x0]
   4f128:	mov    DWORD PTR [rdi],0x0
   4f12e:	xor    r12d,r12d
   4f131:	jmp    4eee3 <re_acquire_state_context+0xb3>
   4f136:	mov    rdi,r12
   4f139:	call   4bdc0 <rpl_free>
   4f13e:	jmp    4f091 <re_acquire_state_context+0x261>
   4f143:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4f14e:	xchg   ax,ax

000000000004f150 <re_acquire_state>:
   4f150:	push   r15
   4f152:	push   r14
   4f154:	push   r13
   4f156:	push   r12
   4f158:	push   rbp
   4f159:	push   rbx
   4f15a:	mov    rbx,rdi
   4f15d:	sub    rsp,0x8
   4f161:	mov    r13,QWORD PTR [rdx+0x8]
   4f165:	test   r13,r13
   4f168:	je     4f333 <re_acquire_state+0x1e3>
   4f16e:	mov    rbp,rsi
   4f171:	mov    r14,rdx
   4f174:	jle    4f18c <re_acquire_state+0x3c>
   4f176:	mov    rax,QWORD PTR [rdx+0x10]
   4f17a:	lea    rdx,[rax+r13*8]
   4f17e:	xchg   ax,ax
   4f180:	add    r13,QWORD PTR [rax]
   4f183:	add    rax,0x8
   4f187:	cmp    rdx,rax
   4f18a:	jne    4f180 <re_acquire_state+0x30>
   4f18c:	mov    rax,QWORD PTR [rbp+0x88]
   4f193:	and    rax,r13
   4f196:	lea    rdx,[rax+rax*2]
   4f19a:	mov    rax,QWORD PTR [rbp+0x40]
   4f19e:	lea    rax,[rax+rdx*8]
   4f1a2:	mov    r10,QWORD PTR [rax]
   4f1a5:	test   r10,r10
   4f1a8:	jle    4f1e0 <re_acquire_state+0x90>
   4f1aa:	mov    r11,QWORD PTR [rax+0x10]
   4f1ae:	xor    r9d,r9d
   4f1b1:	nop    DWORD PTR [rax+0x0]
   4f1b8:	mov    r12,QWORD PTR [r11+r9*8]
   4f1bc:	cmp    QWORD PTR [r12],r13
   4f1c0:	jne    4f1d7 <re_acquire_state+0x87>
   4f1c2:	lea    rdi,[r12+0x8]
   4f1c7:	mov    rsi,r14
   4f1ca:	call   4bf70 <re_node_set_compare>
   4f1cf:	test   al,al
   4f1d1:	jne    4f2e3 <re_acquire_state+0x193>
   4f1d7:	add    r9,0x1
   4f1db:	cmp    r9,r10
   4f1de:	jne    4f1b8 <re_acquire_state+0x68>
   4f1e0:	mov    esi,0x1
   4f1e5:	mov    edi,0x70
   4f1ea:	call   c880 <calloc@plt>
   4f1ef:	mov    r12,rax
   4f1f2:	test   rax,rax
   4f1f5:	je     4f328 <re_acquire_state+0x1d8>
   4f1fb:	lea    r15,[rax+0x8]
   4f1ff:	mov    rsi,r14
   4f202:	mov    rdi,r15
   4f205:	call   4ec30 <re_node_set_init_copy>
   4f20a:	test   eax,eax
   4f20c:	jne    4f320 <re_acquire_state+0x1d0>
   4f212:	mov    rax,QWORD PTR [r14+0x8]
   4f216:	mov    QWORD PTR [r12+0x50],r15
   4f21b:	test   rax,rax
   4f21e:	jle    4f2d1 <re_acquire_state+0x181>
   4f224:	mov    rsi,QWORD PTR [r14+0x10]
   4f228:	mov    r9,QWORD PTR [rbp+0x0]
   4f22c:	lea    r8,[rsi+rax*8]
   4f230:	jmp    4f282 <re_acquire_state+0x132>
   4f232:	nop    WORD PTR [rax+rax*1+0x0]
   4f238:	movzx  ecx,BYTE PTR [r12+0x68]
   4f23e:	movzx  edx,BYTE PTR [rax+0xa]
   4f242:	mov    r10d,ecx
   4f245:	shr    dl,0x4
   4f248:	and    ecx,0xffffffdf
   4f24b:	shr    r10b,0x5
   4f24f:	or     edx,r10d
   4f252:	and    edx,0x1
   4f255:	shl    edx,0x5
   4f258:	or     edx,ecx
   4f25a:	mov    BYTE PTR [r12+0x68],dl
   4f25f:	cmp    edi,0x2
   4f262:	je     4f2f8 <re_acquire_state+0x1a8>
   4f268:	cmp    edi,0x4
   4f26b:	jne    4f308 <re_acquire_state+0x1b8>
   4f271:	or     edx,0x40
   4f274:	mov    BYTE PTR [r12+0x68],dl
   4f279:	add    rsi,0x8
   4f27d:	cmp    r8,rsi
   4f280:	je     4f2d1 <re_acquire_state+0x181>
   4f282:	mov    rax,QWORD PTR [rsi]
   4f285:	shl    rax,0x4
   4f289:	add    rax,r9
   4f28c:	movzx  edi,BYTE PTR [rax+0x8]
   4f290:	cmp    edi,0x1
   4f293:	jne    4f238 <re_acquire_state+0xe8>
   4f295:	test   DWORD PTR [rax+0x8],0x3ff00
   4f29c:	je     4f279 <re_acquire_state+0x129>
   4f29e:	movzx  edx,BYTE PTR [r12+0x68]
   4f2a4:	movzx  eax,BYTE PTR [rax+0xa]
   4f2a8:	mov    ecx,edx
   4f2aa:	shr    al,0x4
   4f2ad:	and    edx,0xffffffdf
   4f2b0:	shr    cl,0x5
   4f2b3:	or     eax,ecx
   4f2b5:	and    eax,0x1
   4f2b8:	shl    eax,0x5
   4f2bb:	or     eax,edx
   4f2bd:	mov    BYTE PTR [r12+0x68],al
   4f2c2:	add    rsi,0x8
   4f2c6:	or     BYTE PTR [r12+0x68],0x80
   4f2cc:	cmp    r8,rsi
   4f2cf:	jne    4f282 <re_acquire_state+0x132>
   4f2d1:	mov    rdx,r13
   4f2d4:	mov    rsi,r12
   4f2d7:	mov    rdi,rbp
   4f2da:	call   4c6b0 <register_state>
   4f2df:	test   eax,eax
   4f2e1:	jne    4f33e <re_acquire_state+0x1ee>
   4f2e3:	add    rsp,0x8
   4f2e7:	mov    rax,r12
   4f2ea:	pop    rbx
   4f2eb:	pop    rbp
   4f2ec:	pop    r12
   4f2ee:	pop    r13
   4f2f0:	pop    r14
   4f2f2:	pop    r15
   4f2f4:	ret    
   4f2f5:	nop    DWORD PTR [rax]
   4f2f8:	or     edx,0x10
   4f2fb:	mov    BYTE PTR [r12+0x68],dl
   4f300:	jmp    4f279 <re_acquire_state+0x129>
   4f305:	nop    DWORD PTR [rax]
   4f308:	cmp    edi,0xc
   4f30b:	je     4f2c2 <re_acquire_state+0x172>
   4f30d:	test   DWORD PTR [rax+0x8],0x3ff00
   4f314:	je     4f279 <re_acquire_state+0x129>
   4f31a:	jmp    4f2c2 <re_acquire_state+0x172>
   4f31c:	nop    DWORD PTR [rax+0x0]
   4f320:	mov    rdi,r12
   4f323:	call   4bdc0 <rpl_free>
   4f328:	mov    DWORD PTR [rbx],0xc
   4f32e:	xor    r12d,r12d
   4f331:	jmp    4f2e3 <re_acquire_state+0x193>
   4f333:	mov    DWORD PTR [rdi],0x0
   4f339:	xor    r12d,r12d
   4f33c:	jmp    4f2e3 <re_acquire_state+0x193>
   4f33e:	mov    rdi,r12
   4f341:	call   4d830 <free_state>
   4f346:	jmp    4f328 <re_acquire_state+0x1d8>
   4f348:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004f350 <merge_state_array>:
   4f350:	push   r15
   4f352:	push   r14
   4f354:	push   r13
   4f356:	push   r12
   4f358:	push   rbp
   4f359:	push   rbx
   4f35a:	sub    rsp,0x38
   4f35e:	mov    rax,QWORD PTR fs:0x28
   4f367:	mov    QWORD PTR [rsp+0x28],rax
   4f36c:	xor    eax,eax
   4f36e:	test   rcx,rcx
   4f371:	jle    4f3fa <merge_state_array+0xaa>
   4f377:	mov    r15,rdi
   4f37a:	mov    rbp,rsi
   4f37d:	mov    r13,rdx
   4f380:	mov    r12,rcx
   4f383:	xor    ebx,ebx
   4f385:	lea    r14,[rsp+0x10]
   4f38a:	jmp    4f3dd <merge_state_array+0x8d>
   4f38c:	nop    DWORD PTR [rax+0x0]
   4f390:	test   rdx,rdx
   4f393:	je     4f3d4 <merge_state_array+0x84>
   4f395:	add    rdx,0x8
   4f399:	add    rsi,0x8
   4f39d:	mov    rdi,r14
   4f3a0:	call   4ecc0 <re_node_set_init_union>
   4f3a5:	mov    DWORD PTR [rsp+0xc],eax
   4f3a9:	test   eax,eax
   4f3ab:	jne    4f3fc <merge_state_array+0xac>
   4f3ad:	lea    rdi,[rsp+0xc]
   4f3b2:	mov    rdx,r14
   4f3b5:	mov    rsi,r15
   4f3b8:	call   4f150 <re_acquire_state>
   4f3bd:	mov    rdi,QWORD PTR [rsp+0x20]
   4f3c2:	mov    QWORD PTR [rbp+rbx*8+0x0],rax
   4f3c7:	call   4bdc0 <rpl_free>
   4f3cc:	mov    eax,DWORD PTR [rsp+0xc]
   4f3d0:	test   eax,eax
   4f3d2:	jne    4f3fc <merge_state_array+0xac>
   4f3d4:	add    rbx,0x1
   4f3d8:	cmp    r12,rbx
   4f3db:	je     4f3fa <merge_state_array+0xaa>
   4f3dd:	mov    rsi,QWORD PTR [rbp+rbx*8+0x0]
   4f3e2:	mov    rdx,QWORD PTR [r13+rbx*8+0x0]
   4f3e7:	test   rsi,rsi
   4f3ea:	jne    4f390 <merge_state_array+0x40>
   4f3ec:	mov    QWORD PTR [rbp+rbx*8+0x0],rdx
   4f3f1:	add    rbx,0x1
   4f3f5:	cmp    r12,rbx
   4f3f8:	jne    4f3dd <merge_state_array+0x8d>
   4f3fa:	xor    eax,eax
   4f3fc:	mov    rcx,QWORD PTR [rsp+0x28]
   4f401:	xor    rcx,QWORD PTR fs:0x28
   4f40a:	jne    4f41b <merge_state_array+0xcb>
   4f40c:	add    rsp,0x38
   4f410:	pop    rbx
   4f411:	pop    rbp
   4f412:	pop    r12
   4f414:	pop    r13
   4f416:	pop    r14
   4f418:	pop    r15
   4f41a:	ret    
   4f41b:	call   c7b0 <__stack_chk_fail@plt>

000000000004f420 <expand_bkref_cache>:
   4f420:	push   r15
   4f422:	push   r14
   4f424:	push   r13
   4f426:	push   r12
   4f428:	push   rbp
   4f429:	mov    rbp,rdi
   4f42c:	push   rbx
   4f42d:	mov    rbx,rdx
   4f430:	sub    rsp,0x78
   4f434:	mov    r13,QWORD PTR [rdi+0x98]
   4f43b:	mov    rdi,QWORD PTR [rdi+0xc8]
   4f442:	mov    QWORD PTR [rsp],rsi
   4f446:	xor    esi,esi
   4f448:	mov    QWORD PTR [rsp+0x30],rcx
   4f44d:	mov    rdx,rdi
   4f450:	mov    DWORD PTR [rsp+0x3c],r8d
   4f455:	mov    rax,QWORD PTR fs:0x28
   4f45e:	mov    QWORD PTR [rsp+0x68],rax
   4f463:	xor    eax,eax
   4f465:	jmp    4f499 <expand_bkref_cache+0x79>
   4f467:	nop    WORD PTR [rax+rax*1+0x0]
   4f470:	lea    rax,[rdx+rsi*1]
   4f474:	mov    rcx,rax
   4f477:	and    rax,0xfffffffffffffffe
   4f47b:	sar    rcx,1
   4f47e:	add    rax,rcx
   4f481:	shl    rax,0x4
   4f485:	add    rax,QWORD PTR [rbp+0xd8]
   4f48c:	cmp    rbx,QWORD PTR [rax+0x8]
   4f490:	jg     4f700 <expand_bkref_cache+0x2e0>
   4f496:	mov    rdx,rcx
   4f499:	cmp    rdx,rsi
   4f49c:	jg     4f470 <expand_bkref_cache+0x50>
   4f49e:	cmp    rdi,rsi
   4f4a1:	jle    4f740 <expand_bkref_cache+0x320>
   4f4a7:	lea    rax,[rsi+rsi*2]
   4f4ab:	mov    r15,QWORD PTR [rbp+0xd8]
   4f4b2:	shl    rax,0x4
   4f4b6:	mov    QWORD PTR [rsp+0x28],rax
   4f4bb:	cmp    rbx,QWORD PTR [r15+rax*1+0x8]
   4f4c0:	jne    4f740 <expand_bkref_cache+0x320>
   4f4c6:	mov    rax,QWORD PTR [rsp]
   4f4ca:	lea    r12,[rax+0x10]
   4f4ce:	lea    rax,[rsp+0x4c]
   4f4d3:	mov    QWORD PTR [rsp+0x20],rax
   4f4d8:	add    r15,QWORD PTR [rsp+0x28]
   4f4dd:	jmp    4f5cf <expand_bkref_cache+0x1af>
   4f4e2:	nop    WORD PTR [rax+rax*1+0x0]
   4f4e8:	mov    rax,QWORD PTR [r13+0x18]
   4f4ec:	mov    r11,QWORD PTR [rbp+0xb8]
   4f4f3:	mov    r10,QWORD PTR [rax+rdx*8]
   4f4f7:	lea    rax,[r14*8+0x0]
   4f4ff:	add    r11,rax
   4f502:	mov    QWORD PTR [rsp+0x8],rax
   4f507:	mov    r9,QWORD PTR [r11]
   4f50a:	test   r9,r9
   4f50d:	je     4f6b0 <expand_bkref_cache+0x290>
   4f513:	mov    rdi,QWORD PTR [r9+0x10]
   4f517:	lea    rsi,[r9+0x18]
   4f51b:	mov    rdx,r10
   4f51e:	mov    QWORD PTR [rsp+0x10],r10
   4f523:	call   4db50 <re_node_set_contains.isra.0>
   4f528:	test   rax,rax
   4f52b:	jne    4f5c0 <expand_bkref_cache+0x1a0>
   4f531:	lea    rdx,[rsp+0x50]
   4f536:	lea    rsi,[r9+0x8]
   4f53a:	mov    rdi,rdx
   4f53d:	mov    QWORD PTR [rsp+0x18],rdx
   4f542:	call   4ec30 <re_node_set_init_copy>
   4f547:	mov    rdx,QWORD PTR [rsp+0x18]
   4f54c:	mov    r10,QWORD PTR [rsp+0x10]
   4f551:	mov    DWORD PTR [rsp+0x4c],eax
   4f555:	mov    rdi,rdx
   4f558:	mov    rsi,r10
   4f55b:	mov    QWORD PTR [rsp+0x10],rdx
   4f560:	call   4c580 <re_node_set_insert>
   4f565:	mov    edx,DWORD PTR [rsp+0x4c]
   4f569:	test   edx,edx
   4f56b:	jne    4f748 <expand_bkref_cache+0x328>
   4f571:	cmp    al,0x1
   4f573:	jne    4f748 <expand_bkref_cache+0x328>
   4f579:	mov    rdx,QWORD PTR [rsp+0x10]
   4f57e:	mov    r11,QWORD PTR [rsp+0x8]
   4f583:	add    r11,QWORD PTR [rbp+0xb8]
   4f58a:	mov    rdi,QWORD PTR [rsp+0x20]
   4f58f:	mov    rsi,r13
   4f592:	mov    QWORD PTR [rsp+0x8],r11
   4f597:	call   4f150 <re_acquire_state>
   4f59c:	mov    r11,QWORD PTR [rsp+0x8]
   4f5a1:	mov    rdi,QWORD PTR [rsp+0x60]
   4f5a6:	mov    QWORD PTR [r11],rax
   4f5a9:	call   4bdc0 <rpl_free>
   4f5ae:	mov    rax,QWORD PTR [rbp+0xb8]
   4f5b5:	cmp    QWORD PTR [rax+r14*8],0x0
   4f5ba:	je     4f710 <expand_bkref_cache+0x2f0>
   4f5c0:	add    r15,0x30
   4f5c4:	cmp    BYTE PTR [r15-0x8],0x0
   4f5c9:	je     4f740 <expand_bkref_cache+0x320>
   4f5cf:	mov    rax,QWORD PTR [rsp]
   4f5d3:	mov    rdx,QWORD PTR [r15]
   4f5d6:	mov    rsi,r12
   4f5d9:	mov    r9,QWORD PTR [rax+0x8]
   4f5dd:	mov    rdi,r9
   4f5e0:	call   4db50 <re_node_set_contains.isra.0>
   4f5e5:	test   rax,rax
   4f5e8:	je     4f5c0 <expand_bkref_cache+0x1a0>
   4f5ea:	mov    r8,QWORD PTR [r15+0x18]
   4f5ee:	add    r8,rbx
   4f5f1:	mov    r14,r8
   4f5f4:	sub    r14,QWORD PTR [r15+0x10]
   4f5f8:	cmp    rbx,r14
   4f5fb:	jne    4f4e8 <expand_bkref_cache+0xc8>
   4f601:	mov    rcx,QWORD PTR [r13+0x28]
   4f605:	lea    rax,[rdx+rdx*2]
   4f609:	mov    rsi,r12
   4f60c:	mov    rdi,r9
   4f60f:	lea    rax,[rcx+rax*8]
   4f613:	mov    rax,QWORD PTR [rax+0x10]
   4f617:	mov    r14,QWORD PTR [rax]
   4f61a:	mov    rdx,r14
   4f61d:	call   4db50 <re_node_set_contains.isra.0>
   4f622:	test   rax,rax
   4f625:	jne    4f5c0 <expand_bkref_cache+0x1a0>
   4f627:	mov    QWORD PTR [rsp+0x50],0x1
   4f630:	mov    edi,0x8
   4f635:	mov    QWORD PTR [rsp+0x58],0x1
   4f63e:	call   c0e0 <malloc@plt>
   4f643:	mov    QWORD PTR [rsp+0x60],rax
   4f648:	test   rax,rax
   4f64b:	je     4f771 <expand_bkref_cache+0x351>
   4f651:	mov    QWORD PTR [rax],r14
   4f654:	xor    eax,eax
   4f656:	mov    rdx,QWORD PTR [rsp+0x30]
   4f65b:	mov    ecx,DWORD PTR [rsp+0x3c]
   4f65f:	mov    rdi,r13
   4f662:	mov    DWORD PTR [rsp+0x4c],eax
   4f666:	lea    r15,[rsp+0x50]
   4f66b:	mov    rsi,r15
   4f66e:	call   4e450 <check_arrival_expand_ecl>
   4f673:	mov    rdi,QWORD PTR [rsp]
   4f677:	mov    rsi,r15
   4f67a:	mov    r14d,eax
   4f67d:	call   4dfe0 <re_node_set_merge>
   4f682:	mov    rdi,QWORD PTR [rsp+0x60]
   4f687:	mov    r15d,eax
   4f68a:	call   4bdc0 <rpl_free>
   4f68f:	mov    eax,DWORD PTR [rsp+0x4c]
   4f693:	mov    edx,r14d
   4f696:	or     edx,r15d
   4f699:	or     edx,eax
   4f69b:	jne    4f761 <expand_bkref_cache+0x341>
   4f6a1:	mov    r15,QWORD PTR [rbp+0xd8]
   4f6a8:	jmp    4f4d8 <expand_bkref_cache+0xb8>
   4f6ad:	nop    DWORD PTR [rax]
   4f6b0:	mov    edi,0x8
   4f6b5:	mov    QWORD PTR [rsp+0x10],r11
   4f6ba:	mov    QWORD PTR [rsp+0x8],r10
   4f6bf:	mov    QWORD PTR [rsp+0x50],0x1
   4f6c8:	mov    QWORD PTR [rsp+0x58],0x1
   4f6d1:	call   c0e0 <malloc@plt>
   4f6d6:	mov    QWORD PTR [rsp+0x60],rax
   4f6db:	test   rax,rax
   4f6de:	je     4f75a <expand_bkref_cache+0x33a>
   4f6e0:	mov    r10,QWORD PTR [rsp+0x8]
   4f6e5:	mov    r11,QWORD PTR [rsp+0x10]
   4f6ea:	lea    rdx,[rsp+0x50]
   4f6ef:	mov    DWORD PTR [rsp+0x4c],0x0
   4f6f7:	mov    QWORD PTR [rax],r10
   4f6fa:	jmp    4f58a <expand_bkref_cache+0x16a>
   4f6ff:	nop
   4f700:	lea    rsi,[rcx+0x1]
   4f704:	jmp    4f499 <expand_bkref_cache+0x79>
   4f709:	nop    DWORD PTR [rax+0x0]
   4f710:	mov    eax,DWORD PTR [rsp+0x4c]
   4f714:	test   eax,eax
   4f716:	je     4f5c0 <expand_bkref_cache+0x1a0>
   4f71c:	nop    DWORD PTR [rax+0x0]
   4f720:	mov    rbx,QWORD PTR [rsp+0x68]
   4f725:	xor    rbx,QWORD PTR fs:0x28
   4f72e:	jne    4f78d <expand_bkref_cache+0x36d>
   4f730:	add    rsp,0x78
   4f734:	pop    rbx
   4f735:	pop    rbp
   4f736:	pop    r12
   4f738:	pop    r13
   4f73a:	pop    r14
   4f73c:	pop    r15
   4f73e:	ret    
   4f73f:	nop
   4f740:	xor    eax,eax
   4f742:	jmp    4f720 <expand_bkref_cache+0x300>
   4f744:	nop    DWORD PTR [rax+0x0]
   4f748:	mov    rdi,QWORD PTR [rsp+0x60]
   4f74d:	call   4bdc0 <rpl_free>
   4f752:	mov    eax,DWORD PTR [rsp+0x4c]
   4f756:	test   eax,eax
   4f758:	jne    4f720 <expand_bkref_cache+0x300>
   4f75a:	mov    eax,0xc
   4f75f:	jmp    4f720 <expand_bkref_cache+0x300>
   4f761:	test   eax,eax
   4f763:	jne    4f720 <expand_bkref_cache+0x300>
   4f765:	test   r14d,r14d
   4f768:	mov    eax,r15d
   4f76b:	cmovne eax,r14d
   4f76f:	jmp    4f720 <expand_bkref_cache+0x300>
   4f771:	mov    QWORD PTR [rsp+0x58],0x0
   4f77a:	mov    eax,0xc
   4f77f:	mov    QWORD PTR [rsp+0x50],0x0
   4f788:	jmp    4f656 <expand_bkref_cache+0x236>
   4f78d:	call   c7b0 <__stack_chk_fail@plt>
   4f792:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   4f79d:	nop    DWORD PTR [rax]

000000000004f7a0 <calc_first>:
   4f7a0:	endbr64 
   4f7a4:	push   rbp
   4f7a5:	push   rbx
   4f7a6:	mov    rbx,rsi
   4f7a9:	sub    rsp,0x8
   4f7ad:	cmp    BYTE PTR [rsi+0x30],0x10
   4f7b1:	jne    4f7d8 <calc_first+0x38>
   4f7b3:	mov    rax,QWORD PTR [rsi+0x8]
   4f7b7:	xor    r8d,r8d
   4f7ba:	mov    rdx,QWORD PTR [rax+0x18]
   4f7be:	mov    rax,QWORD PTR [rax+0x38]
   4f7c2:	mov    QWORD PTR [rsi+0x18],rdx
   4f7c6:	mov    QWORD PTR [rsi+0x38],rax
   4f7ca:	add    rsp,0x8
   4f7ce:	mov    eax,r8d
   4f7d1:	pop    rbx
   4f7d2:	pop    rbp
   4f7d3:	ret    
   4f7d4:	nop    DWORD PTR [rax+0x0]
   4f7d8:	mov    QWORD PTR [rbx+0x18],rsi
   4f7dc:	mov    rdx,QWORD PTR [rbx+0x30]
   4f7e0:	mov    rbp,rdi
   4f7e3:	mov    rsi,QWORD PTR [rsi+0x28]
   4f7e7:	call   4d340 <re_dfa_add_node>
   4f7ec:	mov    QWORD PTR [rbx+0x38],rax
   4f7f0:	cmp    rax,0xffffffffffffffff
   4f7f4:	je     4f830 <calc_first+0x90>
   4f7f6:	xor    r8d,r8d
   4f7f9:	cmp    BYTE PTR [rbx+0x30],0xc
   4f7fd:	jne    4f7ca <calc_first+0x2a>
   4f7ff:	mov    edx,DWORD PTR [rbx+0x28]
   4f802:	shl    rax,0x4
   4f806:	add    rax,QWORD PTR [rbp+0x0]
   4f80a:	and    edx,0x3ff
   4f810:	mov    ecx,edx
   4f812:	mov    edx,DWORD PTR [rax+0x8]
   4f815:	shl    ecx,0x8
   4f818:	and    edx,0xfffc00ff
   4f81e:	or     edx,ecx
   4f820:	mov    DWORD PTR [rax+0x8],edx
   4f823:	add    rsp,0x8
   4f827:	mov    eax,r8d
   4f82a:	pop    rbx
   4f82b:	pop    rbp
   4f82c:	ret    
   4f82d:	nop    DWORD PTR [rax]
   4f830:	mov    r8d,0xc
   4f836:	jmp    4f7ca <calc_first+0x2a>
   4f838:	nop    DWORD PTR [rax+rax*1+0x0]

000000000004f840 <sub_epsilon_src_nodes>:
   4f840:	push   r15
   4f842:	pxor   xmm0,xmm0
   4f846:	push   r14
   4f848:	push   r13
   4f84a:	mov    r13,rdx
   4f84d:	lea    rdx,[rsi+rsi*2]
   4f851:	push   r12
   4f853:	push   rbp
   4f854:	push   rbx
   4f855:	sub    rsp,0x38
   4f859:	mov    QWORD PTR [rsp+0x8],rcx
   4f85e:	mov    rax,QWORD PTR fs:0x28
   4f867:	mov    QWORD PTR [rsp+0x28],rax
   4f86c:	xor    eax,eax
   4f86e:	mov    rax,QWORD PTR [rdi+0x38]
   4f872:	movaps XMMWORD PTR [rsp+0x10],xmm0
   4f877:	mov    QWORD PTR [rsp+0x20],0x0
   4f880:	lea    r15,[rax+rdx*8]
   4f884:	mov    r8,QWORD PTR [r15+0x8]
   4f888:	test   r8,r8
   4f88b:	jle    4fa34 <sub_epsilon_src_nodes+0x1f4>
   4f891:	mov    rbp,rdi
   4f894:	mov    r12,rsi
   4f897:	lea    r14,[r15+0x10]
   4f89b:	xor    ebx,ebx
   4f89d:	jmp    4f8f5 <sub_epsilon_src_nodes+0xb5>
   4f89f:	nop
   4f8a0:	test   rax,rax
   4f8a3:	jne    4f960 <sub_epsilon_src_nodes+0x120>
   4f8a9:	mov    rdi,QWORD PTR [r13+0x8]
   4f8ad:	lea    rsi,[r13+0x10]
   4f8b1:	call   4db50 <re_node_set_contains.isra.0>
   4f8b6:	test   rax,rax
   4f8b9:	je     4f960 <sub_epsilon_src_nodes+0x120>
   4f8bf:	mov    rdx,QWORD PTR [rbp+0x38]
   4f8c3:	mov    rsi,QWORD PTR [rsp+0x8]
   4f8c8:	lea    rdi,[rsp+0x10]
   4f8cd:	add    rdx,r9
   4f8d0:	call   4e5b0 <re_node_set_add_intersect>
   4f8d5:	test   eax,eax
   4f8d7:	jne    4fa20 <sub_epsilon_src_nodes+0x1e0>
   4f8dd:	mov    r8,QWORD PTR [r15+0x8]
   4f8e1:	nop    DWORD PTR [rax+0x0]
   4f8e8:	add    rbx,0x1
   4f8ec:	cmp    r8,rbx
   4f8ef:	jle    4f980 <sub_epsilon_src_nodes+0x140>
   4f8f5:	mov    rax,QWORD PTR [r15+0x10]
   4f8f9:	mov    rax,QWORD PTR [rax+rbx*8]
   4f8fd:	cmp    r12,rax
   4f900:	je     4f8e8 <sub_epsilon_src_nodes+0xa8>
   4f902:	mov    rdx,rax
   4f905:	shl    rdx,0x4
   4f909:	add    rdx,QWORD PTR [rbp+0x0]
   4f90d:	test   BYTE PTR [rdx+0x8],0x8
   4f911:	je     4f8e8 <sub_epsilon_src_nodes+0xa8>
   4f913:	lea    r9,[rax+rax*2]
   4f917:	mov    r11,QWORD PTR [rbp+0x28]
   4f91b:	mov    rsi,r14
   4f91e:	mov    rdi,r8
   4f921:	shl    r9,0x3
   4f925:	add    r11,r9
   4f928:	mov    r10,QWORD PTR [r11+0x10]
   4f92c:	mov    rdx,QWORD PTR [r10]
   4f92f:	call   4db50 <re_node_set_contains.isra.0>
   4f934:	cmp    QWORD PTR [r11+0x8],0x1
   4f939:	jg     4f8a0 <sub_epsilon_src_nodes+0x60>
   4f93f:	test   rax,rax
   4f942:	jne    4f8e8 <sub_epsilon_src_nodes+0xa8>
   4f944:	mov    rdi,QWORD PTR [r13+0x8]
   4f948:	lea    rsi,[r13+0x10]
   4f94c:	call   4db50 <re_node_set_contains.isra.0>
   4f951:	test   rax,rax
   4f954:	je     4f8e8 <sub_epsilon_src_nodes+0xa8>
   4f956:	jmp    4f8bf <sub_epsilon_src_nodes+0x7f>
   4f95b:	nop    DWORD PTR [rax+rax*1+0x0]
   4f960:	mov    rdx,QWORD PTR [r10+0x8]
   4f964:	test   rdx,rdx
   4f967:	jle    4f8e8 <sub_epsilon_src_nodes+0xa8>
   4f96d:	mov    rsi,r14
   4f970:	mov    rdi,r8
   4f973:	call   4db50 <re_node_set_contains.isra.0>
   4f978:	jmp    4f93f <sub_epsilon_src_nodes+0xff>
   4f97a:	nop    WORD PTR [rax+rax*1+0x0]
   4f980:	xor    r9d,r9d
   4f983:	lea    r10,[rsp+0x20]
   4f988:	lea    r11,[r13+0x10]
   4f98c:	test   r8,r8
   4f98f:	jle    4f9ed <sub_epsilon_src_nodes+0x1ad>
   4f991:	nop    DWORD PTR [rax+0x0]
   4f998:	mov    rax,QWORD PTR [r15+0x10]
   4f99c:	mov    rdi,QWORD PTR [rsp+0x18]
   4f9a1:	mov    rsi,r10
   4f9a4:	mov    rdx,QWORD PTR [rax+r9*8]
   4f9a8:	call   4db50 <re_node_set_contains.isra.0>
   4f9ad:	test   rax,rax
   4f9b0:	jne    4f9e3 <sub_epsilon_src_nodes+0x1a3>
   4f9b2:	mov    r8,QWORD PTR [r13+0x8]
   4f9b6:	mov    rsi,r11
   4f9b9:	mov    rdi,r8
   4f9bc:	call   4db50 <re_node_set_contains.isra.0>
   4f9c1:	sub    rax,0x1
   4f9c5:	mov    rdx,rax
   4f9c8:	js     4f9e3 <sub_epsilon_src_nodes+0x1a3>
   4f9ca:	cmp    rax,r8
   4f9cd:	jge    4f9e3 <sub_epsilon_src_nodes+0x1a3>
   4f9cf:	sub    r8,0x1
   4f9d3:	lea    rdi,[r13+0x8]
   4f9d7:	mov    rsi,r11
   4f9da:	mov    QWORD PTR [r13+0x8],r8
   4f9de:	call   4dcb0 <re_node_set_remove_at.isra.0.part.0>
   4f9e3:	add    r9,0x1
   4f9e7:	cmp    QWORD PTR [r15+0x8],r9
   4f9eb:	jg     4f998 <sub_epsilon_src_nodes+0x158>
   4f9ed:	mov    rdi,QWORD PTR [rsp+0x20]
   4f9f2:	call   4bdc0 <rpl_free>
   4f9f7:	xor    eax,eax
   4f9f9:	mov    rcx,QWORD PTR [rsp+0x28]
   4f9fe:	xor    rcx,QWORD PTR fs:0x28
   4fa07:	jne    4fa38 <sub_epsilon_src_nodes+0x1f8>
   4fa09:	add    rsp,0x38
   4fa0d:	pop    rbx
   4fa0e:	pop    rbp
   4fa0f:	pop    r12
   4fa11:	pop    r13
   4fa13:	pop    r14
   4fa15:	pop    r15
   4fa17:	ret    
   4fa18:	nop    DWORD PTR [rax+rax*1+0x0]
   4fa20:	mov    rdi,QWORD PTR [rsp+0x20]
   4fa25:	mov    DWORD PTR [rsp+0x8],eax
   4fa29:	call   4bdc0 <rpl_free>
   4fa2e:	mov    eax,DWORD PTR [rsp+0x8]
   4fa32:	jmp    4f9f9 <sub_epsilon_src_nodes+0x1b9>
   4fa34:	xor    edi,edi
   4fa36:	jmp    4f9f2 <sub_epsilon_src_nodes+0x1b2>
   4fa38:	call   c7b0 <__stack_chk_fail@plt>
   4fa3d:	nop    DWORD PTR [rax]

000000000004fa40 <build_trtable>:
   4fa40:	push   r15
   4fa42:	push   r14
   4fa44:	push   r13
   4fa46:	push   r12
   4fa48:	mov    r12,rdi
   4fa4b:	mov    edi,0x3800
   4fa50:	push   rbp
   4fa51:	push   rbx
   4fa52:	sub    rsp,0xf8
   4fa59:	mov    QWORD PTR [rsp+0x48],rsi
   4fa5e:	mov    rax,QWORD PTR fs:0x28
   4fa67:	mov    QWORD PTR [rsp+0xe8],rax
   4fa6f:	xor    eax,eax
   4fa71:	call   c0e0 <malloc@plt>
   4fa76:	mov    QWORD PTR [rsp+0x20],rax
   4fa7b:	test   rax,rax
   4fa7e:	je     4fe10 <build_trtable+0x3d0>
   4fa84:	mov    r9,QWORD PTR [rsp+0x48]
   4fa89:	mov    rax,QWORD PTR [rsp+0x20]
   4fa8e:	pxor   xmm0,xmm0
   4fa92:	movaps XMMWORD PTR [rsp+0x80],xmm0
   4fa9a:	add    rax,0x1800
   4faa0:	cmp    QWORD PTR [r9+0x10],0x0
   4faa5:	mov    QWORD PTR [r9+0x58],0x0
   4faad:	mov    QWORD PTR [rsp+0x8],rax
   4fab2:	mov    QWORD PTR [r9+0x60],0x0
   4faba:	movaps XMMWORD PTR [rsp+0x90],xmm0
   4fac2:	jle    504ba <build_trtable+0xa7a>
   4fac8:	xor    r8d,r8d
   4facb:	xor    ebp,ebp
   4facd:	mov    QWORD PTR [rsp+0x18],r8
   4fad2:	mov    r8,r12
   4fad5:	mov    rbx,QWORD PTR [rsp+0x18]
   4fada:	lea    rax,[rbx*8+0x0]
   4fae2:	mov    QWORD PTR [rsp+0x28],rax
   4fae7:	mov    rax,QWORD PTR [r9+0x18]
   4faeb:	mov    r15,QWORD PTR [rax+rbx*8]
   4faef:	shl    r15,0x4
   4faf3:	add    r15,QWORD PTR [r8]
   4faf6:	mov    eax,DWORD PTR [r15+0x8]
   4fafa:	movzx  r12d,BYTE PTR [r15+0x8]
   4faff:	shr    eax,0x8
   4fb02:	and    ax,0x3ff
   4fb06:	cmp    r12d,0x1
   4fb0a:	je     4fe40 <build_trtable+0x400>
   4fb10:	cmp    r12d,0x3
   4fb14:	je     50328 <build_trtable+0x8e8>
   4fb1a:	cmp    r12d,0x5
   4fb1e:	je     50198 <build_trtable+0x758>
   4fb24:	cmp    r12d,0x7
   4fb28:	je     502f0 <build_trtable+0x8b0>
   4fb2e:	add    QWORD PTR [rsp+0x18],0x1
   4fb34:	mov    rax,QWORD PTR [rsp+0x18]
   4fb39:	cmp    rax,QWORD PTR [r9+0x10]
   4fb3d:	jl     4fad5 <build_trtable+0x95>
   4fb3f:	mov    r12,r8
   4fb42:	test   rbp,rbp
   4fb45:	jle    505d9 <build_trtable+0xb99>
   4fb4b:	mov    QWORD PTR [rsp+0x68],0x0
   4fb54:	lea    rbx,[rbp+0x1]
   4fb58:	mov    QWORD PTR [rsp+0x60],rbx
   4fb5d:	shl    rbx,0x3
   4fb61:	mov    rdi,rbx
   4fb64:	call   c0e0 <malloc@plt>
   4fb69:	mov    QWORD PTR [rsp+0x70],rax
   4fb6e:	mov    r13,rax
   4fb71:	test   rax,rax
   4fb74:	je     50370 <build_trtable+0x930>
   4fb7a:	lea    rax,[rbp+rbp*2+0x0]
   4fb7f:	mov    DWORD PTR [rsp+0x5c],0x0
   4fb87:	shl    rax,0x3
   4fb8b:	mov    rdi,rax
   4fb8e:	mov    QWORD PTR [rsp+0x40],rax
   4fb93:	call   c0e0 <malloc@plt>
   4fb98:	mov    QWORD PTR [rsp+0x10],rax
   4fb9d:	test   rax,rax
   4fba0:	je     50380 <build_trtable+0x940>
   4fba6:	mov    rax,QWORD PTR [rsp+0x10]
   4fbab:	sub    rbx,0x8
   4fbaf:	pxor   xmm0,xmm0
   4fbb3:	xor    r15d,r15d
   4fbb6:	mov    BYTE PTR [rsp+0x38],0x0
   4fbbb:	add    rax,rbx
   4fbbe:	movaps XMMWORD PTR [rsp+0xc0],xmm0
   4fbc6:	add    rbx,rax
   4fbc9:	mov    QWORD PTR [rsp+0x28],rax
   4fbce:	mov    rax,QWORD PTR [rsp+0x20]
   4fbd3:	mov    QWORD PTR [rsp+0x30],rbx
   4fbd8:	lea    rbx,[rsp+0x60]
   4fbdd:	lea    r14,[rax+0x8]
   4fbe1:	lea    rax,[rsp+0x5c]
   4fbe6:	movaps XMMWORD PTR [rsp+0xd0],xmm0
   4fbee:	mov    QWORD PTR [rsp+0x18],rax
   4fbf3:	mov    r13,r14
   4fbf6:	mov    r14,r12
   4fbf9:	mov    QWORD PTR [rsp+0x68],0x0
   4fc02:	xor    r12d,r12d
   4fc05:	cmp    QWORD PTR [r13+0x0],0x0
   4fc0a:	jle    4fc50 <build_trtable+0x210>
   4fc0c:	nop    DWORD PTR [rax+0x0]
   4fc10:	mov    rax,QWORD PTR [r13+0x8]
   4fc14:	mov    rdx,QWORD PTR [rax+r12*8]
   4fc18:	mov    rax,QWORD PTR [r14+0x18]
   4fc1c:	mov    rax,QWORD PTR [rax+rdx*8]
   4fc20:	cmp    rax,0xffffffffffffffff
   4fc24:	je     4fc46 <build_trtable+0x206>
   4fc26:	lea    rdx,[rax+rax*2]
   4fc2a:	mov    rax,QWORD PTR [r14+0x30]
   4fc2e:	mov    rdi,rbx
   4fc31:	lea    rsi,[rax+rdx*8]
   4fc35:	call   4dfe0 <re_node_set_merge>
   4fc3a:	mov    DWORD PTR [rsp+0x5c],eax
   4fc3e:	test   eax,eax
   4fc40:	jne    50440 <build_trtable+0xa00>
   4fc46:	add    r12,0x1
   4fc4a:	cmp    QWORD PTR [r13+0x0],r12
   4fc4e:	jg     4fc10 <build_trtable+0x1d0>
   4fc50:	mov    rdi,QWORD PTR [rsp+0x18]
   4fc55:	xor    ecx,ecx
   4fc57:	mov    rdx,rbx
   4fc5a:	mov    rsi,r14
   4fc5d:	call   4ee30 <re_acquire_state_context>
   4fc62:	mov    rdi,QWORD PTR [rsp+0x10]
   4fc67:	mov    QWORD PTR [rdi+r15*8],rax
   4fc6b:	test   rax,rax
   4fc6e:	je     50454 <build_trtable+0xa14>
   4fc74:	cmp    BYTE PTR [rax+0x68],0x0
   4fc78:	js     503c0 <build_trtable+0x980>
   4fc7e:	mov    rdi,QWORD PTR [rsp+0x28]
   4fc83:	mov    QWORD PTR [rdi+r15*8],rax
   4fc87:	mov    rax,QWORD PTR [rsp+0x10]
   4fc8c:	mov    rdi,QWORD PTR [rsp+0x30]
   4fc91:	mov    rax,QWORD PTR [rax+r15*8]
   4fc95:	mov    QWORD PTR [rdi+r15*8],rax
   4fc99:	lea    r9,[rsp+0xc0]
   4fca1:	mov    rdx,r15
   4fca4:	lea    rsi,[rsp+0xe0]
   4fcac:	shl    rdx,0x5
   4fcb0:	mov    rax,r9
   4fcb3:	add    rdx,QWORD PTR [rsp+0x8]
   4fcb8:	mov    rcx,QWORD PTR [rdx]
   4fcbb:	or     QWORD PTR [rax],rcx
   4fcbe:	add    rax,0x8
   4fcc2:	add    rdx,0x8
   4fcc6:	cmp    rsi,rax
   4fcc9:	jne    4fcb8 <build_trtable+0x278>
   4fccb:	add    r15,0x1
   4fccf:	add    r13,0x18
   4fcd3:	cmp    r15,rbp
   4fcd6:	jne    4fbf9 <build_trtable+0x1b9>
   4fcdc:	cmp    BYTE PTR [rsp+0x38],0x0
   4fce1:	mov    QWORD PTR [rsp+0x8],r9
   4fce6:	mov    r12,r14
   4fce9:	jne    50520 <build_trtable+0xae0>
   4fcef:	mov    esi,0x100
   4fcf4:	mov    edi,0x8
   4fcf9:	call   c880 <calloc@plt>
   4fcfe:	mov    rbx,rax
   4fd01:	mov    rax,QWORD PTR [rsp+0x48]
   4fd06:	mov    QWORD PTR [rax+0x58],rbx
   4fd0a:	test   rbx,rbx
   4fd0d:	je     50440 <build_trtable+0xa00>
   4fd13:	mov    r10,QWORD PTR [rsp+0x20]
   4fd18:	mov    r13,QWORD PTR [rsp+0x10]
   4fd1d:	xor    r11d,r11d
   4fd20:	mov    r14,QWORD PTR [rsp+0x28]
   4fd25:	mov    r9,QWORD PTR [rsp+0x8]
   4fd2a:	lea    r8,[r10+0x1820]
   4fd31:	mov    rsi,r11
   4fd34:	mov    rax,QWORD PTR [r9+r11*1]
   4fd38:	mov    edx,0x1
   4fd3d:	shl    rsi,0x6
   4fd41:	add    rsi,rbx
   4fd44:	test   rax,rax
   4fd47:	je     4fd64 <build_trtable+0x324>
   4fd49:	nop    DWORD PTR [rax+0x0]
   4fd50:	test   al,0x1
   4fd52:	jne    50468 <build_trtable+0xa28>
   4fd58:	add    rdx,rdx
   4fd5b:	add    rsi,0x8
   4fd5f:	shr    rax,1
   4fd62:	jne    4fd50 <build_trtable+0x310>
   4fd64:	add    r11,0x8
   4fd68:	cmp    r11,0x20
   4fd6c:	jne    4fd31 <build_trtable+0x2f1>
   4fd6e:	test   BYTE PTR [rsp+0xc1],0x4
   4fd76:	je     4fd9d <build_trtable+0x35d>
   4fd78:	mov    rcx,QWORD PTR [rsp+0x20]
   4fd7d:	xor    eax,eax
   4fd7f:	mov    rdx,rax
   4fd82:	shl    rdx,0x5
   4fd86:	test   BYTE PTR [rcx+rdx*1+0x1801],0x4
   4fd8e:	jne    504fc <build_trtable+0xabc>
   4fd94:	add    rax,0x1
   4fd98:	cmp    rax,rbp
   4fd9b:	jne    4fd7f <build_trtable+0x33f>
   4fd9d:	mov    rdi,QWORD PTR [rsp+0x10]
   4fda2:	call   4bdc0 <rpl_free>
   4fda7:	mov    rdi,QWORD PTR [rsp+0x70]
   4fdac:	call   4bdc0 <rpl_free>
   4fdb1:	mov    rax,QWORD PTR [rsp+0x20]
   4fdb6:	mov    rbx,QWORD PTR [rsp+0x40]
   4fdbb:	lea    rbp,[rax+0x10]
   4fdbf:	add    rbx,rbp
   4fdc2:	nop    WORD PTR [rax+rax*1+0x0]
   4fdc8:	mov    rdi,QWORD PTR [rbp+0x0]
   4fdcc:	add    rbp,0x18
   4fdd0:	call   4bdc0 <rpl_free>
   4fdd5:	cmp    rbx,rbp
   4fdd8:	jne    4fdc8 <build_trtable+0x388>
   4fdda:	mov    rdi,QWORD PTR [rsp+0x20]
   4fddf:	call   4bdc0 <rpl_free>
   4fde4:	mov    eax,0x1
   4fde9:	jmp    4fe12 <build_trtable+0x3d2>
   4fdeb:	mov    QWORD PTR [r14+0x8],0x0
   4fdf3:	mov    QWORD PTR [r14],0x0
   4fdfa:	test   rbp,rbp
   4fdfd:	jne    5015b <build_trtable+0x71b>
   4fe03:	mov    rdi,QWORD PTR [rsp+0x20]
   4fe08:	call   4bdc0 <rpl_free>
   4fe0d:	nop    DWORD PTR [rax]
   4fe10:	xor    eax,eax
   4fe12:	mov    rbx,QWORD PTR [rsp+0xe8]
   4fe1a:	xor    rbx,QWORD PTR fs:0x28
   4fe23:	jne    505f1 <build_trtable+0xbb1>
   4fe29:	add    rsp,0xf8
   4fe30:	pop    rbx
   4fe31:	pop    rbp
   4fe32:	pop    r12
   4fe34:	pop    r13
   4fe36:	pop    r14
   4fe38:	pop    r15
   4fe3a:	ret    
   4fe3b:	nop    DWORD PTR [rax+rax*1+0x0]
   4fe40:	movzx  ecx,BYTE PTR [r15]
   4fe44:	lea    r13,[rsp+0x80]
   4fe4c:	mov    edi,0x1
   4fe51:	mov    rdx,rcx
   4fe54:	shl    rdi,cl
   4fe57:	shr    rdx,0x3
   4fe5b:	and    edx,0x18
   4fe5e:	or     QWORD PTR [r13+rdx*1+0x0],rdi
   4fe63:	test   ax,ax
   4fe66:	je     4ff28 <build_trtable+0x4e8>
   4fe6c:	test   al,0x20
   4fe6e:	jne    50208 <build_trtable+0x7c8>
   4fe74:	test   al,0x80
   4fe76:	jne    5013e <build_trtable+0x6fe>
   4fe7c:	test   al,0x4
   4fe7e:	je     4fecf <build_trtable+0x48f>
   4fe80:	cmp    r12d,0x1
   4fe84:	je     502d0 <build_trtable+0x890>
   4fe8a:	cmp    DWORD PTR [r8+0xb4],0x1
   4fe92:	jle    50298 <build_trtable+0x858>
   4fe98:	mov    rdi,QWORD PTR [r8+0x78]
   4fe9c:	xor    esi,esi
   4fe9e:	xor    ecx,ecx
   4fea0:	mov    rdx,QWORD PTR [rdi+rcx*8]
   4fea4:	not    rdx
   4fea7:	or     rdx,QWORD PTR [r8+rcx*8+0xb8]
   4feaf:	and    rdx,QWORD PTR [r13+rcx*8+0x0]
   4feb4:	mov    QWORD PTR [r13+rcx*8+0x0],rdx
   4feb9:	add    rcx,0x1
   4febd:	or     rsi,rdx
   4fec0:	cmp    rcx,0x4
   4fec4:	jne    4fea0 <build_trtable+0x460>
   4fec6:	test   rsi,rsi
   4fec9:	je     4fb2e <build_trtable+0xee>
   4fecf:	test   al,0x8
   4fed1:	je     4ff28 <build_trtable+0x4e8>
   4fed3:	cmp    r12d,0x1
   4fed7:	je     50360 <build_trtable+0x920>
   4fedd:	cmp    DWORD PTR [r8+0xb4],0x1
   4fee5:	jle    50260 <build_trtable+0x820>
   4feeb:	mov    rsi,QWORD PTR [r8+0x78]
   4feef:	xor    ecx,ecx
   4fef1:	xor    edx,edx
   4fef3:	mov    rax,QWORD PTR [r8+rdx*8+0xb8]
   4fefb:	and    rax,QWORD PTR [rsi+rdx*8]
   4feff:	not    rax
   4ff02:	and    rax,QWORD PTR [r13+rdx*8+0x0]
   4ff07:	mov    QWORD PTR [r13+rdx*8+0x0],rax
   4ff0c:	add    rdx,0x1
   4ff10:	or     rcx,rax
   4ff13:	cmp    rdx,0x4
   4ff17:	jne    4fef3 <build_trtable+0x4b3>
   4ff19:	test   rcx,rcx
   4ff1c:	je     4fb2e <build_trtable+0xee>
   4ff22:	nop    WORD PTR [rax+rax*1+0x0]
   4ff28:	mov    r14,QWORD PTR [rsp+0x8]
   4ff2d:	xor    ebx,ebx
   4ff2f:	test   rbp,rbp
   4ff32:	jle    500b4 <build_trtable+0x674>
   4ff38:	mov    DWORD PTR [rsp+0x10],r12d
   4ff3d:	mov    r12,rbp
   4ff40:	mov    rbp,r14
   4ff43:	mov    r14,r13
   4ff46:	mov    QWORD PTR [rsp+0x40],r8
   4ff4b:	mov    r13,rbx
   4ff4e:	mov    QWORD PTR [rsp+0x30],r9
   4ff53:	jmp    4ff87 <build_trtable+0x547>
   4ff55:	nop    DWORD PTR [rax]
   4ff58:	movzx  ecx,BYTE PTR [r15]
   4ff5c:	mov    rax,rcx
   4ff5f:	shr    rax,0x3
   4ff63:	and    eax,0x18
   4ff66:	add    rax,QWORD PTR [rsp+0x8]
   4ff6b:	mov    rax,QWORD PTR [rax+rdx*1]
   4ff6f:	shr    rax,cl
   4ff72:	test   al,0x1
   4ff74:	jne    4ff95 <build_trtable+0x555>
   4ff76:	add    r13,0x1
   4ff7a:	add    rbp,0x20
   4ff7e:	cmp    r13,r12
   4ff81:	jge    500a1 <build_trtable+0x661>
   4ff87:	mov    rdx,r13
   4ff8a:	shl    rdx,0x5
   4ff8e:	cmp    DWORD PTR [rsp+0x10],0x1
   4ff93:	je     4ff58 <build_trtable+0x518>
   4ff95:	xor    ecx,ecx
   4ff97:	xor    eax,eax
   4ff99:	lea    rsi,[rsp+0xa0]
   4ffa1:	mov    rdx,QWORD PTR [r14+rax*8]
   4ffa5:	and    rdx,QWORD PTR [rbp+rax*8+0x0]
   4ffaa:	mov    QWORD PTR [rsi+rax*8],rdx
   4ffae:	add    rax,0x1
   4ffb2:	or     rcx,rdx
   4ffb5:	cmp    rax,0x4
   4ffb9:	jne    4ffa1 <build_trtable+0x561>
   4ffbb:	test   rcx,rcx
   4ffbe:	je     4ff76 <build_trtable+0x536>
   4ffc0:	xor    ebx,ebx
   4ffc2:	xor    edi,edi
   4ffc4:	lea    r11,[rsp+0xc0]
   4ffcc:	xor    edx,edx
   4ffce:	mov    rsi,QWORD PTR [r14+rdx*8]
   4ffd2:	mov    rax,QWORD PTR [rbp+rdx*8+0x0]
   4ffd7:	mov    rcx,rsi
   4ffda:	not    rcx
   4ffdd:	and    rcx,rax
   4ffe0:	not    rax
   4ffe3:	and    rax,rsi
   4ffe6:	mov    QWORD PTR [r11+rdx*8],rcx
   4ffea:	or     rdi,rcx
   4ffed:	mov    QWORD PTR [r14+rdx*8],rax
   4fff1:	add    rdx,0x1
   4fff5:	or     rbx,rax
   4fff8:	cmp    rdx,0x4
   4fffc:	jne    4ffce <build_trtable+0x58e>
   4fffe:	mov    rsi,QWORD PTR [rsp+0x20]
   50003:	lea    rax,[r13+r13*2+0x0]
   50008:	lea    r11,[rsi+rax*8]
   5000c:	test   rdi,rdi
   5000f:	je     50076 <build_trtable+0x636>
   50011:	movdqa xmm1,XMMWORD PTR [rsp+0xc0]
   5001a:	mov    rax,r12
   5001d:	mov    QWORD PTR [rsp+0x38],r11
   50022:	shl    rax,0x5
   50026:	add    rax,QWORD PTR [rsp+0x8]
   5002b:	movups XMMWORD PTR [rax],xmm1
   5002e:	movdqa xmm2,XMMWORD PTR [rsp+0xd0]
   50037:	movups XMMWORD PTR [rax+0x10],xmm2
   5003b:	lea    rax,[r12+r12*2]
   5003f:	movdqa xmm3,XMMWORD PTR [rsp+0xa0]
   50048:	lea    rdi,[rsi+rax*8]
   5004c:	mov    rsi,r11
   5004f:	movups XMMWORD PTR [rbp+0x0],xmm3
   50053:	movdqa xmm4,XMMWORD PTR [rsp+0xb0]
   5005c:	movups XMMWORD PTR [rbp+0x10],xmm4
   50060:	call   4ec30 <re_node_set_init_copy>
   50065:	test   eax,eax
   50067:	jne    50158 <build_trtable+0x718>
   5006d:	mov    r11,QWORD PTR [rsp+0x38]
   50072:	add    r12,0x1
   50076:	mov    rax,QWORD PTR [rsp+0x30]
   5007b:	mov    rdi,QWORD PTR [rsp+0x28]
   50080:	mov    rax,QWORD PTR [rax+0x18]
   50084:	mov    rsi,QWORD PTR [rax+rdi*1]
   50088:	mov    rdi,r11
   5008b:	call   4c580 <re_node_set_insert>
   50090:	test   al,al
   50092:	je     50158 <build_trtable+0x718>
   50098:	test   rbx,rbx
   5009b:	jne    4ff76 <build_trtable+0x536>
   500a1:	mov    r8,QWORD PTR [rsp+0x40]
   500a6:	mov    r9,QWORD PTR [rsp+0x30]
   500ab:	mov    rbx,r13
   500ae:	mov    rbp,r12
   500b1:	mov    r13,r14
   500b4:	cmp    rbp,rbx
   500b7:	jne    4fb2e <build_trtable+0xee>
   500bd:	mov    rax,rbp
   500c0:	mov    rbx,QWORD PTR [rsp+0x28]
   500c5:	mov    rdi,QWORD PTR [rsp+0x20]
   500ca:	mov    QWORD PTR [rsp+0x30],r8
   500cf:	movdqa xmm5,XMMWORD PTR [rsp+0x80]
   500d8:	shl    rax,0x5
   500dc:	add    rax,QWORD PTR [rsp+0x8]
   500e1:	mov    QWORD PTR [rsp+0x10],r9
   500e6:	movups XMMWORD PTR [rax],xmm5
   500e9:	movdqa xmm6,XMMWORD PTR [rsp+0x90]
   500f2:	movups XMMWORD PTR [rax+0x10],xmm6
   500f6:	mov    rax,QWORD PTR [r9+0x18]
   500fa:	mov    rbx,QWORD PTR [rax+rbx*1]
   500fe:	lea    rax,[rbp+rbp*2+0x0]
   50103:	lea    r14,[rdi+rax*8]
   50107:	mov    edi,0x8
   5010c:	mov    QWORD PTR [r14],0x1
   50113:	mov    QWORD PTR [r14+0x8],0x1
   5011b:	call   c0e0 <malloc@plt>
   50120:	mov    r9,QWORD PTR [rsp+0x10]
   50125:	mov    r8,QWORD PTR [rsp+0x30]
   5012a:	test   rax,rax
   5012d:	mov    QWORD PTR [r14+0x10],rax
   50131:	je     4fdeb <build_trtable+0x3ab>
   50137:	mov    QWORD PTR [rax],rbx
   5013a:	add    rbp,0x1
   5013e:	pxor   xmm0,xmm0
   50142:	movaps XMMWORD PTR [r13+0x0],xmm0
   50147:	movaps XMMWORD PTR [r13+0x10],xmm0
   5014c:	jmp    4fb2e <build_trtable+0xee>
   50151:	nop    DWORD PTR [rax+0x0]
   50158:	mov    rbp,r12
   5015b:	mov    rax,QWORD PTR [rsp+0x20]
   50160:	xor    ebx,ebx
   50162:	lea    r12,[rax+0x10]
   50166:	nop    WORD PTR cs:[rax+rax*1+0x0]
   50170:	mov    rdi,QWORD PTR [r12]
   50174:	add    rbx,0x1
   50178:	add    r12,0x18
   5017c:	call   4bdc0 <rpl_free>
   50181:	cmp    rbx,rbp
   50184:	jl     50170 <build_trtable+0x730>
   50186:	mov    rdi,QWORD PTR [rsp+0x20]
   5018b:	call   4bdc0 <rpl_free>
   50190:	jmp    4fe10 <build_trtable+0x3d0>
   50195:	nop    DWORD PTR [rax]
   50198:	cmp    DWORD PTR [r8+0xb4],0x1
   501a0:	lea    r13,[rsp+0x80]
   501a8:	jle    50240 <build_trtable+0x800>
   501ae:	mov    rcx,QWORD PTR [r8+0x78]
   501b2:	mov    rdx,r13
   501b5:	lea    rsi,[rsp+0xa0]
   501bd:	mov    rdi,QWORD PTR [rcx]
   501c0:	or     QWORD PTR [rdx],rdi
   501c3:	add    rdx,0x8
   501c7:	add    rcx,0x8
   501cb:	cmp    rsi,rdx
   501ce:	jne    501bd <build_trtable+0x77d>
   501d0:	mov    rdx,QWORD PTR [r8+0xd8]
   501d7:	test   dl,0x40
   501da:	jne    501e8 <build_trtable+0x7a8>
   501dc:	and    QWORD PTR [rsp+0x80],0xfffffffffffffbff
   501e8:	and    edx,0x80
   501ee:	je     4fe63 <build_trtable+0x423>
   501f4:	and    QWORD PTR [rsp+0x80],0xfffffffffffffffe
   501fd:	jmp    4fe63 <build_trtable+0x423>
   50202:	nop    WORD PTR [rax+rax*1+0x0]
   50208:	mov    rdx,QWORD PTR [rsp+0x80]
   50210:	pxor   xmm0,xmm0
   50214:	movaps XMMWORD PTR [r13+0x0],xmm0
   50219:	movaps XMMWORD PTR [r13+0x10],xmm0
   5021e:	and    dh,0x4
   50221:	je     4fb2e <build_trtable+0xee>
   50227:	mov    QWORD PTR [rsp+0x80],0x400
   50233:	jmp    4fe74 <build_trtable+0x434>
   50238:	nop    DWORD PTR [rax+rax*1+0x0]
   50240:	pcmpeqd xmm0,xmm0
   50244:	movaps XMMWORD PTR [rsp+0x80],xmm0
   5024c:	movaps XMMWORD PTR [rsp+0x90],xmm0
   50254:	jmp    501d0 <build_trtable+0x790>
   50259:	nop    DWORD PTR [rax+0x0]
   50260:	xor    ecx,ecx
   50262:	xor    edx,edx
   50264:	mov    rax,QWORD PTR [r8+rdx*8+0xb8]
   5026c:	not    rax
   5026f:	and    rax,QWORD PTR [r13+rdx*8+0x0]
   50274:	mov    QWORD PTR [r13+rdx*8+0x0],rax
   50279:	add    rdx,0x1
   5027d:	or     rcx,rax
   50280:	cmp    rdx,0x4
   50284:	jne    50264 <build_trtable+0x824>
   50286:	test   rcx,rcx
   50289:	je     4fb2e <build_trtable+0xee>
   5028f:	jmp    4ff28 <build_trtable+0x4e8>
   50294:	nop    DWORD PTR [rax+0x0]
   50298:	xor    esi,esi
   5029a:	xor    edx,edx
   5029c:	mov    rcx,QWORD PTR [r13+rdx*8+0x0]
   502a1:	and    rcx,QWORD PTR [r8+rdx*8+0xb8]
   502a9:	mov    QWORD PTR [r13+rdx*8+0x0],rcx
   502ae:	add    rdx,0x1
   502b2:	or     rsi,rcx
   502b5:	cmp    rdx,0x4
   502b9:	jne    5029c <build_trtable+0x85c>
   502bb:	test   rsi,rsi
   502be:	jne    4fecf <build_trtable+0x48f>
   502c4:	jmp    4fb2e <build_trtable+0xee>
   502c9:	nop    DWORD PTR [rax+0x0]
   502d0:	test   BYTE PTR [r15+0xa],0x40
   502d5:	je     5013e <build_trtable+0x6fe>
   502db:	cmp    DWORD PTR [r8+0xb4],0x1
   502e3:	jg     4fe98 <build_trtable+0x458>
   502e9:	jmp    50298 <build_trtable+0x858>
   502eb:	nop    DWORD PTR [rax+rax*1+0x0]
   502f0:	mov    rdx,QWORD PTR [r8+0xd8]
   502f7:	pcmpeqd xmm0,xmm0
   502fb:	lea    r13,[rsp+0x80]
   50303:	movaps XMMWORD PTR [rsp+0x80],xmm0
   5030b:	test   dl,0x40
   5030e:	jne    501e8 <build_trtable+0x7a8>
   50314:	mov    QWORD PTR [rsp+0x80],0xfffffffffffffbff
   50320:	jmp    501e8 <build_trtable+0x7a8>
   50325:	nop    DWORD PTR [rax]
   50328:	lea    r13,[rsp+0x80]
   50330:	mov    rcx,QWORD PTR [r15]
   50333:	lea    rsi,[rsp+0xa0]
   5033b:	mov    rdx,r13
   5033e:	mov    rdi,QWORD PTR [rcx]
   50341:	or     QWORD PTR [rdx],rdi
   50344:	add    rdx,0x8
   50348:	add    rcx,0x8
   5034c:	cmp    rsi,rdx
   5034f:	jne    5033e <build_trtable+0x8fe>
   50351:	jmp    4fe63 <build_trtable+0x423>
   50356:	nop    WORD PTR cs:[rax+rax*1+0x0]
   50360:	test   BYTE PTR [r15+0xa],0x40
   50365:	je     4fedd <build_trtable+0x49d>
   5036b:	jmp    5013e <build_trtable+0x6fe>
   50370:	mov    DWORD PTR [rsp+0x5c],0xc
   50378:	nop    DWORD PTR [rax+rax*1+0x0]
   50380:	mov    rdi,r13
   50383:	call   4bdc0 <rpl_free>
   50388:	mov    rax,QWORD PTR [rsp+0x20]
   5038d:	lea    rbx,[rax+0x10]
   50391:	lea    rax,[rbp+rbp*2+0x0]
   50396:	lea    rbp,[rbx+rax*8]
   5039a:	nop    WORD PTR [rax+rax*1+0x0]
   503a0:	mov    rdi,QWORD PTR [rbx]
   503a3:	add    rbx,0x18
   503a7:	call   4bdc0 <rpl_free>
   503ac:	cmp    rbp,rbx
   503af:	jne    503a0 <build_trtable+0x960>
   503b1:	mov    rdi,QWORD PTR [rsp+0x20]
   503b6:	call   4bdc0 <rpl_free>
   503bb:	jmp    4fe10 <build_trtable+0x3d0>
   503c0:	mov    rdi,QWORD PTR [rsp+0x18]
   503c5:	mov    ecx,0x1
   503ca:	mov    rdx,rbx
   503cd:	mov    rsi,r14
   503d0:	call   4ee30 <re_acquire_state_context>
   503d5:	mov    rdi,QWORD PTR [rsp+0x28]
   503da:	mov    QWORD PTR [rdi+r15*8],rax
   503de:	test   rax,rax
   503e1:	je     504e7 <build_trtable+0xaa7>
   503e7:	mov    rdi,QWORD PTR [rsp+0x10]
   503ec:	cmp    rax,QWORD PTR [rdi+r15*8]
   503f0:	je     5040c <build_trtable+0x9cc>
   503f2:	movzx  edi,BYTE PTR [rsp+0x38]
   503f7:	cmp    DWORD PTR [r14+0xb4],0x2
   503ff:	mov    eax,0x1
   50404:	cmovge edi,eax
   50407:	mov    BYTE PTR [rsp+0x38],dil
   5040c:	mov    rdi,QWORD PTR [rsp+0x18]
   50411:	mov    ecx,0x2
   50416:	mov    rdx,rbx
   50419:	mov    rsi,r14
   5041c:	call   4ee30 <re_acquire_state_context>
   50421:	mov    rdi,QWORD PTR [rsp+0x30]
   50426:	mov    QWORD PTR [rdi+r15*8],rax
   5042a:	test   rax,rax
   5042d:	jne    4fc99 <build_trtable+0x259>
   50433:	mov    eax,DWORD PTR [rsp+0x5c]
   50437:	test   eax,eax
   50439:	je     4fc99 <build_trtable+0x259>
   5043f:	nop
   50440:	mov    rdi,QWORD PTR [rsp+0x10]
   50445:	call   4bdc0 <rpl_free>
   5044a:	mov    r13,QWORD PTR [rsp+0x70]
   5044f:	jmp    50380 <build_trtable+0x940>
   50454:	mov    ecx,DWORD PTR [rsp+0x5c]
   50458:	test   ecx,ecx
   5045a:	je     4fc74 <build_trtable+0x234>
   50460:	jmp    50440 <build_trtable+0xa00>
   50462:	nop    WORD PTR [rax+rax*1+0x0]
   50468:	test   QWORD PTR [r10+r11*1+0x1800],rdx
   50470:	jne    504f8 <build_trtable+0xab8>
   50476:	lea    rcx,[r8+r11*1]
   5047a:	xor    edi,edi
   5047c:	nop    DWORD PTR [rax+0x0]
   50480:	mov    r15,QWORD PTR [rcx]
   50483:	add    rdi,0x1
   50487:	add    rcx,0x20
   5048b:	and    r15,rdx
   5048e:	test   r15,r15
   50491:	je     50480 <build_trtable+0xa40>
   50493:	shl    rdi,0x3
   50497:	test   QWORD PTR [r12+r11*1+0xb8],rdx
   5049f:	je     504ad <build_trtable+0xa6d>
   504a1:	mov    rcx,QWORD PTR [r14+rdi*1]
   504a5:	mov    QWORD PTR [rsi],rcx
   504a8:	jmp    4fd58 <build_trtable+0x318>
   504ad:	mov    rcx,QWORD PTR [r13+rdi*1+0x0]
   504b2:	mov    QWORD PTR [rsi],rcx
   504b5:	jmp    4fd58 <build_trtable+0x318>
   504ba:	mov    rdi,QWORD PTR [rsp+0x20]
   504bf:	call   4bdc0 <rpl_free>
   504c4:	mov    esi,0x100
   504c9:	mov    edi,0x8
   504ce:	call   c880 <calloc@plt>
   504d3:	mov    rbx,QWORD PTR [rsp+0x48]
   504d8:	test   rax,rax
   504db:	mov    QWORD PTR [rbx+0x58],rax
   504df:	setne  al
   504e2:	jmp    4fe12 <build_trtable+0x3d2>
   504e7:	mov    edx,DWORD PTR [rsp+0x5c]
   504eb:	test   edx,edx
   504ed:	je     503e7 <build_trtable+0x9a7>
   504f3:	jmp    50440 <build_trtable+0xa00>
   504f8:	xor    edi,edi
   504fa:	jmp    50497 <build_trtable+0xa57>
   504fc:	mov    rdi,QWORD PTR [rsp+0x30]
   50501:	cmp    BYTE PTR [rsp+0x38],0x0
   50506:	mov    rax,QWORD PTR [rdi+rax*8]
   5050a:	mov    QWORD PTR [rbx+0x50],rax
   5050e:	je     4fd9d <build_trtable+0x35d>
   50514:	mov    QWORD PTR [rbx+0x850],rax
   5051b:	jmp    4fd9d <build_trtable+0x35d>
   50520:	mov    esi,0x200
   50525:	mov    edi,0x8
   5052a:	call   c880 <calloc@plt>
   5052f:	mov    rbx,rax
   50532:	mov    rax,QWORD PTR [rsp+0x48]
   50537:	mov    QWORD PTR [rax+0x60],rbx
   5053b:	test   rbx,rbx
   5053e:	je     50440 <build_trtable+0xa00>
   50544:	mov    rax,QWORD PTR [rsp+0x20]
   50549:	mov    r13,QWORD PTR [rsp+0x10]
   5054e:	xor    r11d,r11d
   50551:	mov    r14,QWORD PTR [rsp+0x28]
   50556:	mov    r9,QWORD PTR [rsp+0x8]
   5055b:	lea    r12,[rax+0x1820]
   50562:	mov    rcx,r11
   50565:	mov    rax,QWORD PTR [r9+r11*8]
   50569:	mov    edx,0x1
   5056e:	shl    rcx,0x9
   50572:	add    rcx,rbx
   50575:	test   rax,rax
   50578:	je     5058a <build_trtable+0xb4a>
   5057a:	test   al,0x1
   5057c:	jne    5059d <build_trtable+0xb5d>
   5057e:	add    rdx,rdx
   50581:	add    rcx,0x8
   50585:	shr    rax,1
   50588:	jne    5057a <build_trtable+0xb3a>
   5058a:	add    r11,0x1
   5058e:	add    r12,0x8
   50592:	cmp    r11,0x4
   50596:	jne    50562 <build_trtable+0xb22>
   50598:	jmp    4fd6e <build_trtable+0x32e>
   5059d:	test   QWORD PTR [r12-0x20],rdx
   505a2:	jne    505d4 <build_trtable+0xb94>
   505a4:	mov    rdi,r12
   505a7:	xor    esi,esi
   505a9:	mov    r8,QWORD PTR [rdi]
   505ac:	add    rsi,0x1
   505b0:	add    rdi,0x20
   505b4:	mov    r10,rsi
   505b7:	and    r8,rdx
   505ba:	test   r8,r8
   505bd:	je     505a9 <build_trtable+0xb69>
   505bf:	mov    rsi,QWORD PTR [r13+r10*8+0x0]
   505c4:	mov    QWORD PTR [rcx],rsi
   505c7:	mov    rsi,QWORD PTR [r14+r10*8]
   505cb:	mov    QWORD PTR [rcx+0x800],rsi
   505d2:	jmp    5057e <build_trtable+0xb3e>
   505d4:	xor    r10d,r10d
   505d7:	jmp    505bf <build_trtable+0xb7f>
   505d9:	mov    rdi,QWORD PTR [rsp+0x20]
   505de:	call   4bdc0 <rpl_free>
   505e3:	test   rbp,rbp
   505e6:	jne    4fe10 <build_trtable+0x3d0>
   505ec:	jmp    504c4 <build_trtable+0xa84>
   505f1:	call   c7b0 <__stack_chk_fail@plt>
   505f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000050600 <free_fail_stack_return.part.0>:
   50600:	push   r12
   50602:	mov    r12,rdi
   50605:	push   rbp
   50606:	push   rbx
   50607:	cmp    QWORD PTR [rdi],0x0
   5060b:	jle    50640 <free_fail_stack_return.part.0+0x40>
   5060d:	xor    ebx,ebx
   5060f:	nop
   50610:	mov    rax,QWORD PTR [r12+0x10]
   50615:	lea    rbp,[rbx+rbx*2]
   50619:	add    rbx,0x1
   5061d:	shl    rbp,0x4
   50621:	mov    rdi,QWORD PTR [rax+rbp*1+0x28]
   50626:	call   4bdc0 <rpl_free>
   5062b:	mov    rax,QWORD PTR [r12+0x10]
   50630:	mov    rdi,QWORD PTR [rax+rbp*1+0x10]
   50635:	call   4bdc0 <rpl_free>
   5063a:	cmp    rbx,QWORD PTR [r12]
   5063e:	jl     50610 <free_fail_stack_return.part.0+0x10>
   50640:	mov    rdi,QWORD PTR [r12+0x10]
   50645:	pop    rbx
   50646:	pop    rbp
   50647:	pop    r12
   50649:	jmp    4bdc0 <rpl_free>
   5064e:	xchg   ax,ax

0000000000050650 <re_string_context_at>:
   50650:	push   rbp
   50651:	mov    rbp,rdi
   50654:	push   rbx
   50655:	sub    rsp,0x8
   50659:	test   rsi,rsi
   5065c:	js     50700 <re_string_context_at+0xb0>
   50662:	cmp    QWORD PTR [rdi+0x58],rsi
   50666:	je     50710 <re_string_context_at+0xc0>
   5066c:	cmp    DWORD PTR [rdi+0x90],0x1
   50673:	jle    506b0 <re_string_context_at+0x60>
   50675:	mov    rax,QWORD PTR [rdi+0x10]
   50679:	jmp    5068a <re_string_context_at+0x3a>
   5067b:	nop    DWORD PTR [rax+rax*1+0x0]
   50680:	sub    rsi,0x1
   50684:	cmp    rsi,0xffffffffffffffff
   50688:	je     50700 <re_string_context_at+0xb0>
   5068a:	mov    ebx,DWORD PTR [rax+rsi*4]
   5068d:	cmp    ebx,0xffffffff
   50690:	je     50680 <re_string_context_at+0x30>
   50692:	cmp    BYTE PTR [rbp+0x8e],0x0
   50699:	jne    50720 <re_string_context_at+0xd0>
   5069f:	xor    eax,eax
   506a1:	cmp    ebx,0xa
   506a4:	je     506e1 <re_string_context_at+0x91>
   506a6:	add    rsp,0x8
   506aa:	pop    rbx
   506ab:	pop    rbp
   506ac:	ret    
   506ad:	nop    DWORD PTR [rax]
   506b0:	mov    rax,QWORD PTR [rdi+0x8]
   506b4:	mov    rdx,QWORD PTR [rdi+0x80]
   506bb:	movzx  eax,BYTE PTR [rax+rsi*1]
   506bf:	mov    rcx,rax
   506c2:	sar    rax,0x6
   506c6:	mov    rax,QWORD PTR [rdx+rax*8]
   506ca:	shr    rax,cl
   506cd:	mov    rdx,rax
   506d0:	mov    eax,0x1
   506d5:	and    edx,0x1
   506d8:	jne    506a6 <re_string_context_at+0x56>
   506da:	xor    eax,eax
   506dc:	cmp    cl,0xa
   506df:	jne    506a6 <re_string_context_at+0x56>
   506e1:	xor    eax,eax
   506e3:	cmp    BYTE PTR [rbp+0x8d],0x0
   506ea:	setne  al
   506ed:	add    rsp,0x8
   506f1:	add    eax,eax
   506f3:	pop    rbx
   506f4:	pop    rbp
   506f5:	ret    
   506f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   50700:	mov    eax,DWORD PTR [rbp+0x70]
   50703:	add    rsp,0x8
   50707:	pop    rbx
   50708:	pop    rbp
   50709:	ret    
   5070a:	nop    WORD PTR [rax+rax*1+0x0]
   50710:	and    edx,0x2
   50713:	cmp    edx,0x1
   50716:	sbb    eax,eax
   50718:	and    eax,0x2
   5071b:	add    eax,0x8
   5071e:	jmp    506a6 <re_string_context_at+0x56>
   50720:	mov    edi,ebx
   50722:	call   c420 <iswalnum@plt>
   50727:	test   eax,eax
   50729:	jne    50734 <re_string_context_at+0xe4>
   5072b:	cmp    ebx,0x5f
   5072e:	jne    5069f <re_string_context_at+0x4f>
   50734:	mov    eax,0x1
   50739:	jmp    506a6 <re_string_context_at+0x56>
   5073e:	xchg   ax,ax

0000000000050740 <check_node_accept>:
   50740:	mov    rax,QWORD PTR [rdi+0x8]
   50744:	mov    r8,rdx
   50747:	movzx  ecx,BYTE PTR [rax+rdx*1]
   5074b:	movzx  eax,BYTE PTR [rsi+0x8]
   5074f:	cmp    al,0x5
   50751:	je     507fd <check_node_accept+0xbd>
   50757:	ja     507f0 <check_node_accept+0xb0>
   5075d:	cmp    al,0x1
   5075f:	je     50848 <check_node_accept+0x108>
   50765:	cmp    al,0x3
   50767:	jne    50873 <check_node_accept+0x133>
   5076d:	mov    rdx,QWORD PTR [rsi]
   50770:	movzx  eax,cl
   50773:	sar    rax,0x6
   50777:	mov    rax,QWORD PTR [rdx+rax*8]
   5077b:	shr    rax,cl
   5077e:	and    eax,0x1
   50781:	je     50840 <check_node_accept+0x100>
   50787:	push   rbx
   50788:	mov    ebx,DWORD PTR [rsi+0x8]
   5078b:	mov    eax,0x1
   50790:	test   ebx,0x3ff00
   50796:	je     507e4 <check_node_accept+0xa4>
   50798:	mov    edx,DWORD PTR [rdi+0xa0]
   5079e:	mov    rsi,r8
   507a1:	shr    ebx,0x8
   507a4:	call   50650 <re_string_context_at>
   507a9:	mov    ecx,ebx
   507ab:	mov    edx,eax
   507ad:	and    cx,0x3ff
   507b2:	test   bl,0x4
   507b5:	jne    50828 <check_node_accept+0xe8>
   507b7:	and    ebx,0x8
   507ba:	je     507c4 <check_node_accept+0x84>
   507bc:	test   al,0x1
   507be:	jne    5086f <check_node_accept+0x12f>
   507c4:	test   cl,0x20
   507c7:	je     507d0 <check_node_accept+0x90>
   507c9:	xor    eax,eax
   507cb:	test   dl,0x2
   507ce:	je     507e4 <check_node_accept+0xa4>
   507d0:	shr    edx,0x3
   507d3:	mov    eax,0x1
   507d8:	and    edx,0x1
   507db:	and    ecx,0x80
   507e1:	cmovne eax,edx
   507e4:	pop    rbx
   507e5:	ret    
   507e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   507f0:	cmp    al,0x7
   507f2:	mov    eax,0x0
   507f7:	jne    50820 <check_node_accept+0xe0>
   507f9:	test   cl,cl
   507fb:	js     5081c <check_node_accept+0xdc>
   507fd:	cmp    cl,0xa
   50800:	je     50858 <check_node_accept+0x118>
   50802:	test   cl,cl
   50804:	jne    50787 <check_node_accept+0x47>
   50806:	mov    rdx,QWORD PTR [rdi+0x98]
   5080d:	xor    eax,eax
   5080f:	test   BYTE PTR [rdx+0xd8],0x80
   50816:	je     50787 <check_node_accept+0x47>
   5081c:	ret    
   5081d:	nop    DWORD PTR [rax]
   50820:	ret    
   50821:	nop    DWORD PTR [rax+0x0]
   50828:	xor    eax,eax
   5082a:	test   dl,0x1
   5082d:	je     507e4 <check_node_accept+0xa4>
   5082f:	and    ebx,0x8
   50832:	je     507c4 <check_node_accept+0x84>
   50834:	pop    rbx
   50835:	ret    
   50836:	nop    WORD PTR cs:[rax+rax*1+0x0]
   50840:	ret    
   50841:	nop    DWORD PTR [rax+0x0]
   50848:	xor    eax,eax
   5084a:	cmp    BYTE PTR [rsi],cl
   5084c:	je     50787 <check_node_accept+0x47>
   50852:	ret    
   50853:	nop    DWORD PTR [rax+rax*1+0x0]
   50858:	mov    rdx,QWORD PTR [rdi+0x98]
   5085f:	xor    eax,eax
   50861:	test   BYTE PTR [rdx+0xd8],0x40
   50868:	jne    50787 <check_node_accept+0x47>
   5086e:	ret    
   5086f:	xor    eax,eax
   50871:	pop    rbx
   50872:	ret    
   50873:	xor    eax,eax
   50875:	ret    
   50876:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000050880 <re_string_reconstruct>:
   50880:	push   r15
   50882:	mov    r8d,edx
   50885:	push   r14
   50887:	push   r13
   50889:	push   r12
   5088b:	mov    r12,rsi
   5088e:	push   rbp
   5088f:	mov    rbp,rsi
   50892:	push   rbx
   50893:	mov    rbx,rdi
   50896:	sub    rsp,0x48
   5089a:	mov    rax,QWORD PTR fs:0x28
   508a3:	mov    QWORD PTR [rsp+0x38],rax
   508a8:	xor    eax,eax
   508aa:	mov    rax,QWORD PTR [rdi+0x28]
   508ae:	sub    rbp,rax
   508b1:	cmp    rax,rsi
   508b4:	jle    5091a <re_string_reconstruct+0x9a>
   508b6:	cmp    DWORD PTR [rdi+0x90],0x1
   508bd:	jle    508c7 <re_string_reconstruct+0x47>
   508bf:	mov    QWORD PTR [rdi+0x20],0x0
   508c7:	mov    rax,QWORD PTR [rbx+0x50]
   508cb:	mov    QWORD PTR [rbx+0x30],0x0
   508d3:	mov    rbp,r12
   508d6:	mov    QWORD PTR [rbx+0x28],0x0
   508de:	mov    QWORD PTR [rbx+0x58],rax
   508e2:	mov    rax,QWORD PTR [rbx+0x60]
   508e6:	mov    QWORD PTR [rbx+0x38],0x0
   508ee:	mov    QWORD PTR [rbx+0x68],rax
   508f2:	mov    eax,r8d
   508f5:	and    eax,0x1
   508f8:	mov    BYTE PTR [rbx+0x8c],0x0
   508ff:	cmp    eax,0x1
   50902:	sbb    eax,eax
   50904:	and    eax,0x2
   50907:	add    eax,0x4
   5090a:	cmp    BYTE PTR [rbx+0x8b],0x0
   50911:	mov    DWORD PTR [rbx+0x70],eax
   50914:	je     509f0 <re_string_reconstruct+0x170>
   5091a:	test   rbp,rbp
   5091d:	je     50a00 <re_string_reconstruct+0x180>
   50923:	mov    rax,QWORD PTR [rbx+0x38]
   50927:	movzx  edx,BYTE PTR [rbx+0x8c]
   5092e:	mov    r13,QWORD PTR [rbx+0x30]
   50932:	cmp    rax,rbp
   50935:	jle    50af0 <re_string_reconstruct+0x270>
   5093b:	test   dl,dl
   5093d:	jne    50bf8 <re_string_reconstruct+0x378>
   50943:	lea    rsi,[rbp-0x1]
   50947:	mov    edx,r8d
   5094a:	mov    rdi,rbx
   5094d:	sub    r13,rbp
   50950:	call   50650 <re_string_context_at>
   50955:	cmp    DWORD PTR [rbx+0x90],0x1
   5095c:	mov    DWORD PTR [rbx+0x70],eax
   5095f:	jg     50a10 <re_string_reconstruct+0x190>
   50965:	cmp    BYTE PTR [rbx+0x8b],0x0
   5096c:	jne    50c40 <re_string_reconstruct+0x3c0>
   50972:	sub    QWORD PTR [rbx+0x38],rbp
   50976:	mov    QWORD PTR [rbx+0x30],r13
   5097a:	mov    rax,QWORD PTR [rbx+0x58]
   5097e:	mov    rcx,QWORD PTR [rbx+0x68]
   50982:	mov    esi,DWORD PTR [rbx+0x90]
   50988:	movzx  edx,BYTE PTR [rbx+0x8b]
   5098f:	sub    rax,rbp
   50992:	sub    rcx,rbp
   50995:	test   dl,dl
   50997:	jne    5099d <re_string_reconstruct+0x11d>
   50999:	add    QWORD PTR [rbx+0x8],rbp
   5099d:	mov    QWORD PTR [rbx+0x28],r12
   509a1:	mov    QWORD PTR [rbx+0x58],rax
   509a5:	mov    QWORD PTR [rbx+0x68],rcx
   509a9:	cmp    esi,0x1
   509ac:	jle    50ad8 <re_string_reconstruct+0x258>
   509b2:	cmp    BYTE PTR [rbx+0x88],0x0
   509b9:	mov    rdi,rbx
   509bc:	jne    50a38 <re_string_reconstruct+0x1b8>
   509be:	call   4c7b0 <build_wcs_buffer>
   509c3:	mov    QWORD PTR [rbx+0x48],0x0
   509cb:	xor    eax,eax
   509cd:	mov    rdi,QWORD PTR [rsp+0x38]
   509d2:	xor    rdi,QWORD PTR fs:0x28
   509db:	jne    51068 <re_string_reconstruct+0x7e8>
   509e1:	add    rsp,0x48
   509e5:	pop    rbx
   509e6:	pop    rbp
   509e7:	pop    r12
   509e9:	pop    r13
   509eb:	pop    r14
   509ed:	pop    r15
   509ef:	ret    
   509f0:	mov    rax,QWORD PTR [rbx]
   509f3:	mov    QWORD PTR [rbx+0x8],rax
   509f7:	test   rbp,rbp
   509fa:	jne    50923 <re_string_reconstruct+0xa3>
   50a00:	mov    esi,DWORD PTR [rbx+0x90]
   50a06:	mov    rax,QWORD PTR [rbx+0x58]
   50a0a:	mov    rcx,QWORD PTR [rbx+0x68]
   50a0e:	jmp    5099d <re_string_reconstruct+0x11d>
   50a10:	mov    rdi,QWORD PTR [rbx+0x10]
   50a14:	lea    rdx,[r13*4+0x0]
   50a1c:	lea    rsi,[rdi+rbp*4]
   50a20:	call   c6b0 <memmove@plt>
   50a25:	mov    r13,QWORD PTR [rbx+0x30]
   50a29:	sub    r13,rbp
   50a2c:	jmp    50965 <re_string_reconstruct+0xe5>
   50a31:	nop    DWORD PTR [rax+0x0]
   50a38:	call   4c9a0 <build_wcs_upper_buffer>
   50a3d:	test   eax,eax
   50a3f:	je     509c3 <re_string_reconstruct+0x143>
   50a45:	jmp    509cd <re_string_reconstruct+0x14d>
   50a4a:	nop    WORD PTR [rax+rax*1+0x0]
   50a50:	mov    rax,QWORD PTR [rbx]
   50a53:	add    rax,rbp
   50a56:	movzx  ecx,BYTE PTR [r9+rax*1-0x1]
   50a5c:	mov    rax,QWORD PTR [rbx+0x78]
   50a60:	mov    QWORD PTR [rbx+0x38],0x0
   50a68:	test   rax,rax
   50a6b:	je     50a71 <re_string_reconstruct+0x1f1>
   50a6d:	movzx  ecx,BYTE PTR [rax+rcx*1]
   50a71:	mov    rdx,QWORD PTR [rbx+0x80]
   50a78:	movzx  eax,cl
   50a7b:	sar    rax,0x6
   50a7f:	mov    rax,QWORD PTR [rdx+rax*8]
   50a83:	mov    edx,0x1
   50a88:	shr    rax,cl
   50a8b:	test   al,0x1
   50a8d:	jne    50aa8 <re_string_reconstruct+0x228>
   50a8f:	xor    edx,edx
   50a91:	cmp    cl,0xa
   50a94:	jne    50aa8 <re_string_reconstruct+0x228>
   50a96:	xor    edx,edx
   50a98:	cmp    BYTE PTR [rbx+0x8d],0x0
   50a9f:	setne  dl
   50aa2:	add    edx,edx
   50aa4:	nop    DWORD PTR [rax+0x0]
   50aa8:	mov    rax,QWORD PTR [rbx+0x58]
   50aac:	mov    rcx,QWORD PTR [rbx+0x68]
   50ab0:	mov    DWORD PTR [rbx+0x70],edx
   50ab3:	sub    rax,rbp
   50ab6:	sub    rcx,rbp
   50ab9:	cmp    BYTE PTR [rbx+0x8b],0x0
   50ac0:	je     50999 <re_string_reconstruct+0x119>
   50ac6:	mov    QWORD PTR [rbx+0x28],r12
   50aca:	mov    QWORD PTR [rbx+0x58],rax
   50ace:	mov    QWORD PTR [rbx+0x68],rcx
   50ad2:	nop    WORD PTR [rax+rax*1+0x0]
   50ad8:	cmp    BYTE PTR [rbx+0x8b],0x0
   50adf:	jne    50e80 <re_string_reconstruct+0x600>
   50ae5:	mov    QWORD PTR [rbx+0x30],rax
   50ae9:	jmp    509c3 <re_string_reconstruct+0x143>
   50aee:	xchg   ax,ax
   50af0:	test   dl,dl
   50af2:	jne    50f6d <re_string_reconstruct+0x6ed>
   50af8:	movsxd rsi,DWORD PTR [rbx+0x90]
   50aff:	mov    r9,QWORD PTR [rbx+0x28]
   50b03:	mov    QWORD PTR [rbx+0x30],0x0
   50b0b:	cmp    esi,0x1
   50b0e:	jle    50a50 <re_string_reconstruct+0x1d0>
   50b14:	cmp    BYTE PTR [rbx+0x89],0x0
   50b1b:	jne    50dc8 <re_string_reconstruct+0x548>
   50b21:	lea    r15,[r9+rax*1]
   50b25:	cmp    r12,r15
   50b28:	jle    50f17 <re_string_reconstruct+0x697>
   50b2e:	lea    rax,[rbx+0x20]
   50b32:	lea    rdi,[rsp+0x24]
   50b37:	mov    QWORD PTR [rsp+0x10],rax
   50b3c:	nop    DWORD PTR [rax+0x0]
   50b40:	mov    r14,QWORD PTR [rbx+0x50]
   50b44:	mov    rsi,QWORD PTR [rbx]
   50b47:	mov    DWORD PTR [rsp+0xc],r8d
   50b4c:	mov    rax,QWORD PTR [rbx+0x20]
   50b50:	mov    rcx,QWORD PTR [rsp+0x10]
   50b55:	mov    QWORD PTR [rsp],rdi
   50b59:	sub    r14,r15
   50b5c:	add    rsi,r15
   50b5f:	mov    rdx,r14
   50b62:	mov    QWORD PTR [rsp+0x18],rax
   50b67:	call   4bee0 <rpl_mbrtowc>
   50b6c:	mov    ecx,DWORD PTR [rsp+0x24]
   50b70:	mov    rdi,QWORD PTR [rsp]
   50b74:	lea    rsi,[rax-0x1]
   50b78:	mov    r8d,DWORD PTR [rsp+0xc]
   50b7d:	cmp    rsi,0xfffffffffffffffc
   50b81:	ja     50f95 <re_string_reconstruct+0x715>
   50b87:	add    r15,rax
   50b8a:	cmp    r12,r15
   50b8d:	jg     50b40 <re_string_reconstruct+0x2c0>
   50b8f:	sub    r15,r12
   50b92:	mov    QWORD PTR [rbx+0x30],r15
   50b96:	mov    r14,r15
   50b99:	cmp    ecx,0xffffffff
   50b9c:	je     50f21 <re_string_reconstruct+0x6a1>
   50ba2:	cmp    BYTE PTR [rbx+0x8e],0x0
   50ba9:	jne    51004 <re_string_reconstruct+0x784>
   50baf:	xor    eax,eax
   50bb1:	cmp    ecx,0xa
   50bb4:	jne    50bc4 <re_string_reconstruct+0x344>
   50bb6:	xor    eax,eax
   50bb8:	cmp    BYTE PTR [rbx+0x8d],0x0
   50bbf:	setne  al
   50bc2:	add    eax,eax
   50bc4:	mov    DWORD PTR [rbx+0x70],eax
   50bc7:	test   r14,r14
   50bca:	jne    50fba <re_string_reconstruct+0x73a>
   50bd0:	movzx  edx,BYTE PTR [rbx+0x8b]
   50bd7:	mov    rax,QWORD PTR [rbx+0x58]
   50bdb:	mov    rcx,QWORD PTR [rbx+0x68]
   50bdf:	mov    QWORD PTR [rbx+0x38],r14
   50be3:	mov    esi,DWORD PTR [rbx+0x90]
   50be9:	sub    rax,rbp
   50bec:	sub    rcx,rbp
   50bef:	jmp    50995 <re_string_reconstruct+0x115>
   50bf4:	nop    DWORD PTR [rax+0x0]
   50bf8:	mov    r15,QWORD PTR [rbx+0x18]
   50bfc:	mov    rcx,r13
   50bff:	xor    esi,esi
   50c01:	jmp    50c17 <re_string_reconstruct+0x397>
   50c03:	nop    DWORD PTR [rax+rax*1+0x0]
   50c08:	jge    50ef0 <re_string_reconstruct+0x670>
   50c0e:	lea    rsi,[rax+0x1]
   50c12:	cmp    rsi,rcx
   50c15:	jge    50c60 <re_string_reconstruct+0x3e0>
   50c17:	lea    rdx,[rsi+rcx*1]
   50c1b:	mov    rax,rdx
   50c1e:	shr    rax,0x3f
   50c22:	add    rax,rdx
   50c25:	sar    rax,1
   50c28:	mov    rdx,QWORD PTR [r15+rax*8]
   50c2c:	mov    r9,rax
   50c2f:	cmp    rdx,rbp
   50c32:	jle    50c08 <re_string_reconstruct+0x388>
   50c34:	mov    rcx,rax
   50c37:	jmp    50c12 <re_string_reconstruct+0x392>
   50c39:	nop    DWORD PTR [rax+0x0]
   50c40:	mov    rdi,QWORD PTR [rbx+0x8]
   50c44:	mov    rdx,r13
   50c47:	lea    rsi,[rdi+rbp*1]
   50c4b:	call   c6b0 <memmove@plt>
   50c50:	mov    r13,QWORD PTR [rbx+0x30]
   50c54:	sub    r13,rbp
   50c57:	jmp    50972 <re_string_reconstruct+0xf2>
   50c5c:	nop    DWORD PTR [rax+0x0]
   50c60:	lea    r14,[rax+0x1]
   50c64:	cmp    rdx,rbp
   50c67:	jge    50e70 <re_string_reconstruct+0x5f0>
   50c6d:	mov    edx,r8d
   50c70:	mov    rsi,r9
   50c73:	mov    rdi,rbx
   50c76:	call   50650 <re_string_context_at>
   50c7b:	mov    DWORD PTR [rbx+0x70],eax
   50c7e:	cmp    rbp,r14
   50c81:	jne    50d00 <re_string_reconstruct+0x480>
   50c83:	cmp    rbp,r13
   50c86:	jge    50d00 <re_string_reconstruct+0x480>
   50c88:	cmp    QWORD PTR [r15+r14*8],rbp
   50c8c:	jne    50d00 <re_string_reconstruct+0x480>
   50c8e:	mov    rdi,QWORD PTR [rbx+0x10]
   50c92:	sub    r13,rbp
   50c95:	lea    rdx,[r13*4+0x0]
   50c9d:	lea    rsi,[rdi+rbp*4]
   50ca1:	call   c6b0 <memmove@plt>
   50ca6:	mov    rdi,QWORD PTR [rbx+0x8]
   50caa:	mov    rdx,QWORD PTR [rbx+0x30]
   50cae:	lea    rsi,[rdi+rbp*1]
   50cb2:	sub    rdx,rbp
   50cb5:	call   c6b0 <memmove@plt>
   50cba:	mov    rax,QWORD PTR [rbx+0x30]
   50cbe:	sub    QWORD PTR [rbx+0x38],rbp
   50cc2:	sub    rax,rbp
   50cc5:	mov    QWORD PTR [rbx+0x30],rax
   50cc9:	test   rax,rax
   50ccc:	jle    5097a <re_string_reconstruct+0xfa>
   50cd2:	mov    rcx,QWORD PTR [rbx+0x18]
   50cd6:	xor    eax,eax
   50cd8:	lea    rsi,[rcx+rbp*8]
   50cdc:	nop    DWORD PTR [rax+0x0]
   50ce0:	mov    rdx,QWORD PTR [rsi+rax*8]
   50ce4:	sub    rdx,rbp
   50ce7:	mov    QWORD PTR [rcx+rax*8],rdx
   50ceb:	add    rax,0x1
   50cef:	cmp    QWORD PTR [rbx+0x30],rax
   50cf3:	jg     50ce0 <re_string_reconstruct+0x460>
   50cf5:	jmp    5097a <re_string_reconstruct+0xfa>
   50cfa:	nop    WORD PTR [rax+rax*1+0x0]
   50d00:	mov    rax,QWORD PTR [rbx+0x50]
   50d04:	mov    rcx,QWORD PTR [rbx+0x60]
   50d08:	mov    BYTE PTR [rbx+0x8c],0x0
   50d0f:	sub    rax,r12
   50d12:	sub    rcx,r12
   50d15:	lea    rdx,[rax+rbp*1]
   50d19:	mov    QWORD PTR [rbx+0x58],rdx
   50d1d:	lea    rdx,[rcx+rbp*1]
   50d21:	mov    QWORD PTR [rbx+0x68],rdx
   50d25:	test   r14,r14
   50d28:	jg     50d36 <re_string_reconstruct+0x4b6>
   50d2a:	jmp    50d3d <re_string_reconstruct+0x4bd>
   50d2c:	nop    DWORD PTR [rax+0x0]
   50d30:	sub    r14,0x1
   50d34:	je     50d3d <re_string_reconstruct+0x4bd>
   50d36:	cmp    QWORD PTR [r15+r14*8-0x8],rbp
   50d3b:	je     50d30 <re_string_reconstruct+0x4b0>
   50d3d:	cmp    r14,r13
   50d40:	jge    50efc <re_string_reconstruct+0x67c>
   50d46:	mov    rdx,QWORD PTR [rbx+0x10]
   50d4a:	jmp    50d5d <re_string_reconstruct+0x4dd>
   50d4c:	nop    DWORD PTR [rax+0x0]
   50d50:	add    r14,0x1
   50d54:	cmp    r14,r13
   50d57:	je     50f08 <re_string_reconstruct+0x688>
   50d5d:	cmp    DWORD PTR [rdx+r14*4],0xffffffff
   50d62:	je     50d50 <re_string_reconstruct+0x4d0>
   50d64:	mov    rdx,QWORD PTR [r15+r14*8]
   50d68:	sub    rdx,rbp
   50d6b:	mov    QWORD PTR [rbx+0x30],rdx
   50d6f:	test   rdx,rdx
   50d72:	je     50daf <re_string_reconstruct+0x52f>
   50d74:	jle    50d8f <re_string_reconstruct+0x50f>
   50d76:	mov    rax,QWORD PTR [rbx+0x10]
   50d7a:	lea    rcx,[rax+rdx*4]
   50d7e:	xchg   ax,ax
   50d80:	mov    DWORD PTR [rax],0xffffffff
   50d86:	add    rax,0x4
   50d8a:	cmp    rcx,rax
   50d8d:	jne    50d80 <re_string_reconstruct+0x500>
   50d8f:	mov    rdi,QWORD PTR [rbx+0x8]
   50d93:	mov    esi,0xff
   50d98:	call   bed0 <memset@plt>
   50d9d:	mov    rax,QWORD PTR [rbx+0x58]
   50da1:	mov    rcx,QWORD PTR [rbx+0x68]
   50da5:	mov    rdx,QWORD PTR [rbx+0x30]
   50da9:	sub    rax,rbp
   50dac:	sub    rcx,rbp
   50daf:	mov    QWORD PTR [rbx+0x38],rdx
   50db3:	mov    esi,DWORD PTR [rbx+0x90]
   50db9:	movzx  edx,BYTE PTR [rbx+0x8b]
   50dc0:	jmp    50995 <re_string_reconstruct+0x115>
   50dc5:	nop    DWORD PTR [rax]
   50dc8:	mov    rcx,QWORD PTR [rbx]
   50dcb:	mov    rdx,rbp
   50dce:	sub    rdx,rsi
   50dd1:	lea    r15,[rcx+r9*1]
   50dd5:	add    rdx,r15
   50dd8:	lea    r14,[r15+rbp*1-0x1]
   50ddd:	cmp    rcx,rdx
   50de0:	cmovb  rcx,rdx
   50de4:	cmp    r14,rcx
   50de7:	jae    50dfd <re_string_reconstruct+0x57d>
   50de9:	jmp    50b21 <re_string_reconstruct+0x2a1>
   50dee:	xchg   ax,ax
   50df0:	sub    r14,0x1
   50df4:	cmp    r14,rcx
   50df7:	jb     50b21 <re_string_reconstruct+0x2a1>
   50dfd:	movzx  edx,BYTE PTR [r14]
   50e01:	and    edx,0xffffffc0
   50e04:	cmp    dl,0x80
   50e07:	je     50df0 <re_string_reconstruct+0x570>
   50e09:	mov    rdx,QWORD PTR [rbx+0x58]
   50e0d:	mov    rcx,QWORD PTR [rbx+0x78]
   50e11:	mov    rsi,r14
   50e14:	add    rdx,r15
   50e17:	sub    rdx,r14
   50e1a:	test   rcx,rcx
   50e1d:	jne    51030 <re_string_reconstruct+0x7b0>
   50e23:	add    r15,rbp
   50e26:	lea    rcx,[rsp+0x28]
   50e2b:	lea    rdi,[rsp+0x24]
   50e30:	mov    DWORD PTR [rsp],r8d
   50e34:	mov    QWORD PTR [rsp+0x28],0x0
   50e3d:	sub    r15,r14
   50e40:	call   4bee0 <rpl_mbrtowc>
   50e45:	mov    r8d,DWORD PTR [rsp]
   50e49:	cmp    rax,r15
   50e4c:	mov    r9,rax
   50e4f:	jb     50e5b <re_string_reconstruct+0x5db>
   50e51:	cmp    r9,0xfffffffffffffffd
   50e55:	jbe    50f38 <re_string_reconstruct+0x6b8>
   50e5b:	mov    r9,QWORD PTR [rbx+0x28]
   50e5f:	mov    rax,QWORD PTR [rbx+0x38]
   50e63:	jmp    50b21 <re_string_reconstruct+0x2a1>
   50e68:	nop    DWORD PTR [rax+rax*1+0x0]
   50e70:	mov    r14,rax
   50e73:	lea    r9,[rax-0x1]
   50e77:	jmp    50c6d <re_string_reconstruct+0x3ed>
   50e7c:	nop    DWORD PTR [rax+0x0]
   50e80:	cmp    BYTE PTR [rbx+0x88],0x0
   50e87:	jne    50f60 <re_string_reconstruct+0x6e0>
   50e8d:	mov    rcx,QWORD PTR [rbx+0x78]
   50e91:	test   rcx,rcx
   50e94:	je     509c3 <re_string_reconstruct+0x143>
   50e9a:	cmp    QWORD PTR [rbx+0x40],rax
   50e9e:	mov    rdx,QWORD PTR [rbx+0x30]
   50ea2:	cmovle rax,QWORD PTR [rbx+0x40]
   50ea7:	cmp    rax,rdx
   50eaa:	jg     50ec0 <re_string_reconstruct+0x640>
   50eac:	jmp    51028 <re_string_reconstruct+0x7a8>
   50eb1:	nop    DWORD PTR [rax+0x0]
   50eb8:	mov    r12,QWORD PTR [rbx+0x28]
   50ebc:	mov    rcx,QWORD PTR [rbx+0x78]
   50ec0:	mov    rsi,QWORD PTR [rbx]
   50ec3:	add    rsi,rdx
   50ec6:	movzx  esi,BYTE PTR [rsi+r12*1]
   50ecb:	movzx  esi,BYTE PTR [rcx+rsi*1]
   50ecf:	mov    rcx,QWORD PTR [rbx+0x8]
   50ed3:	mov    BYTE PTR [rcx+rdx*1],sil
   50ed7:	add    rdx,0x1
   50edb:	cmp    rax,rdx
   50ede:	jne    50eb8 <re_string_reconstruct+0x638>
   50ee0:	mov    QWORD PTR [rbx+0x30],rax
   50ee4:	mov    QWORD PTR [rbx+0x38],rax
   50ee8:	jmp    509c3 <re_string_reconstruct+0x143>
   50eed:	nop    DWORD PTR [rax]
   50ef0:	mov    r14,rax
   50ef3:	sub    r9,0x1
   50ef7:	jmp    50c6d <re_string_reconstruct+0x3ed>
   50efc:	jne    50d64 <re_string_reconstruct+0x4e4>
   50f02:	nop    WORD PTR [rax+rax*1+0x0]
   50f08:	mov    QWORD PTR [rbx+0x30],0x0
   50f10:	xor    edx,edx
   50f12:	jmp    50daf <re_string_reconstruct+0x52f>
   50f17:	sub    r15,r12
   50f1a:	mov    QWORD PTR [rbx+0x30],r15
   50f1e:	mov    r14,r15
   50f21:	lea    rsi,[r13-0x1]
   50f25:	mov    edx,r8d
   50f28:	mov    rdi,rbx
   50f2b:	call   50650 <re_string_context_at>
   50f30:	mov    DWORD PTR [rbx+0x70],eax
   50f33:	jmp    50bc7 <re_string_reconstruct+0x347>
   50f38:	mov    ecx,DWORD PTR [rsp+0x24]
   50f3c:	sub    r9,r15
   50f3f:	mov    QWORD PTR [rbx+0x20],0x0
   50f47:	mov    QWORD PTR [rbx+0x30],r9
   50f4b:	mov    r14,r9
   50f4e:	cmp    ecx,0xffffffff
   50f51:	jne    50ba2 <re_string_reconstruct+0x322>
   50f57:	jmp    50e5b <re_string_reconstruct+0x5db>
   50f5c:	nop    DWORD PTR [rax+0x0]
   50f60:	mov    rdi,rbx
   50f63:	call   4d040 <build_upper_buffer>
   50f68:	jmp    509c3 <re_string_reconstruct+0x143>
   50f6d:	mov    rdx,QWORD PTR [rbx+0x50]
   50f71:	mov    BYTE PTR [rbx+0x8c],0x0
   50f78:	add    rdx,rbp
   50f7b:	sub    rdx,r12
   50f7e:	mov    QWORD PTR [rbx+0x58],rdx
   50f82:	mov    rdx,QWORD PTR [rbx+0x60]
   50f86:	add    rdx,rbp
   50f89:	sub    rdx,r12
   50f8c:	mov    QWORD PTR [rbx+0x68],rdx
   50f90:	jmp    50af8 <re_string_reconstruct+0x278>
   50f95:	test   rax,rax
   50f98:	je     51000 <re_string_reconstruct+0x780>
   50f9a:	test   r14,r14
   50f9d:	je     51000 <re_string_reconstruct+0x780>
   50f9f:	mov    rax,QWORD PTR [rbx]
   50fa2:	movzx  ecx,BYTE PTR [rax+r15*1]
   50fa7:	mov    rax,QWORD PTR [rsp+0x18]
   50fac:	mov    QWORD PTR [rbx+0x20],rax
   50fb0:	mov    eax,0x1
   50fb5:	jmp    50b87 <re_string_reconstruct+0x307>
   50fba:	jle    50fd7 <re_string_reconstruct+0x757>
   50fbc:	mov    rax,QWORD PTR [rbx+0x10]
   50fc0:	lea    rdx,[rax+r14*4]
   50fc4:	nop    DWORD PTR [rax+0x0]
   50fc8:	mov    DWORD PTR [rax],0xffffffff
   50fce:	add    rax,0x4
   50fd2:	cmp    rdx,rax
   50fd5:	jne    50fc8 <re_string_reconstruct+0x748>
   50fd7:	movzx  edx,BYTE PTR [rbx+0x8b]
   50fde:	test   dl,dl
   50fe0:	je     50bd7 <re_string_reconstruct+0x357>
   50fe6:	mov    rdi,QWORD PTR [rbx+0x8]
   50fea:	mov    rdx,r14
   50fed:	mov    esi,0xff
   50ff2:	call   bed0 <memset@plt>
   50ff7:	mov    r14,QWORD PTR [rbx+0x30]
   50ffb:	jmp    50bd0 <re_string_reconstruct+0x350>
   51000:	xor    ecx,ecx
   51002:	jmp    50fa7 <re_string_reconstruct+0x727>
   51004:	mov    edi,ecx
   51006:	mov    DWORD PTR [rsp],ecx
   51009:	call   c420 <iswalnum@plt>
   5100e:	mov    ecx,DWORD PTR [rsp]
   51011:	cmp    ecx,0x5f
   51014:	je     5101e <re_string_reconstruct+0x79e>
   51016:	test   eax,eax
   51018:	je     50baf <re_string_reconstruct+0x32f>
   5101e:	mov    eax,0x1
   51023:	jmp    50bc4 <re_string_reconstruct+0x344>
   51028:	mov    rax,rdx
   5102b:	jmp    50ee0 <re_string_reconstruct+0x660>
   51030:	cmp    rdx,0x6
   51034:	mov    edi,0x6
   51039:	lea    rsi,[rsp+0x32]
   5103e:	cmovle rdi,rdx
   51042:	sub    edi,0x1
   51045:	movsxd rax,edi
   51048:	js     50e23 <re_string_reconstruct+0x5a3>
   5104e:	movzx  edi,BYTE PTR [r14+rax*1]
   51053:	movzx  edi,BYTE PTR [rcx+rdi*1]
   51057:	mov    BYTE PTR [rsi+rax*1],dil
   5105b:	sub    rax,0x1
   5105f:	test   eax,eax
   51061:	jns    5104e <re_string_reconstruct+0x7ce>
   51063:	jmp    50e23 <re_string_reconstruct+0x5a3>
   51068:	call   c7b0 <__stack_chk_fail@plt>
   5106d:	nop    DWORD PTR [rax]

0000000000051070 <check_halt_state_context>:
   51070:	push   rbp
   51071:	mov    rbp,rsi
   51074:	mov    rsi,rdx
   51077:	push   rbx
   51078:	mov    rbx,rdi
   5107b:	sub    rsp,0x8
   5107f:	mov    edx,DWORD PTR [rdi+0xa0]
   51085:	call   50650 <re_string_context_at>
   5108a:	mov    r8,QWORD PTR [rbp+0x10]
   5108e:	test   r8,r8
   51091:	jle    51131 <check_halt_state_context+0xc1>
   51097:	mov    rdx,QWORD PTR [rbx+0x98]
   5109e:	mov    r10,QWORD PTR [rbp+0x18]
   510a2:	mov    ebx,eax
   510a4:	mov    ebp,eax
   510a6:	and    eax,0x1
   510a9:	xor    esi,esi
   510ab:	and    ebp,0x8
   510ae:	and    ebx,0x2
   510b1:	mov    r9,QWORD PTR [rdx]
   510b4:	mov    r11d,eax
   510b7:	nop    WORD PTR [rax+rax*1+0x0]
   510c0:	mov    rax,QWORD PTR [r10+rsi*8]
   510c4:	mov    rdx,rax
   510c7:	shl    rdx,0x4
   510cb:	add    rdx,r9
   510ce:	mov    ecx,DWORD PTR [rdx+0x8]
   510d1:	shr    ecx,0x8
   510d4:	mov    edi,ecx
   510d6:	and    di,0x3ff
   510db:	cmp    BYTE PTR [rdx+0x8],0x2
   510df:	jne    51128 <check_halt_state_context+0xb8>
   510e1:	test   di,di
   510e4:	je     5110b <check_halt_state_context+0x9b>
   510e6:	test   cl,0x4
   510e9:	je     51118 <check_halt_state_context+0xa8>
   510eb:	test   r11d,r11d
   510ee:	je     51128 <check_halt_state_context+0xb8>
   510f0:	and    ecx,0x8
   510f3:	jne    51128 <check_halt_state_context+0xb8>
   510f5:	test   dil,0x20
   510f9:	je     510ff <check_halt_state_context+0x8f>
   510fb:	test   ebx,ebx
   510fd:	je     51128 <check_halt_state_context+0xb8>
   510ff:	and    edi,0x80
   51105:	je     5110b <check_halt_state_context+0x9b>
   51107:	test   ebp,ebp
   51109:	je     51128 <check_halt_state_context+0xb8>
   5110b:	add    rsp,0x8
   5110f:	pop    rbx
   51110:	pop    rbp
   51111:	ret    
   51112:	nop    WORD PTR [rax+rax*1+0x0]
   51118:	and    ecx,0x8
   5111b:	je     510f5 <check_halt_state_context+0x85>
   5111d:	test   r11d,r11d
   51120:	je     510f5 <check_halt_state_context+0x85>
   51122:	nop    WORD PTR [rax+rax*1+0x0]
   51128:	add    rsi,0x1
   5112c:	cmp    rsi,r8
   5112f:	jne    510c0 <check_halt_state_context+0x50>
   51131:	add    rsp,0x8
   51135:	xor    eax,eax
   51137:	pop    rbx
   51138:	pop    rbp
   51139:	ret    
   5113a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000051140 <check_subexp_matching_top.isra.0>:
   51140:	push   r15
   51142:	push   r14
   51144:	push   r13
   51146:	push   r12
   51148:	push   rbp
   51149:	push   rbx
   5114a:	sub    rsp,0x28
   5114e:	cmp    QWORD PTR [rsi],0x0
   51152:	mov    r14,QWORD PTR [rdi+0x98]
   51159:	jle    51220 <check_subexp_matching_top.isra.0+0xe0>
   5115f:	mov    r15,rdi
   51162:	mov    r13,rsi
   51165:	mov    r12,rcx
   51168:	xor    ebx,ebx
   5116a:	jmp    5117e <check_subexp_matching_top.isra.0+0x3e>
   5116c:	nop    DWORD PTR [rax+0x0]
   51170:	add    rbx,0x1
   51174:	cmp    rbx,QWORD PTR [r13+0x0]
   51178:	jge    51220 <check_subexp_matching_top.isra.0+0xe0>
   5117e:	mov    rax,QWORD PTR [rdx]
   51181:	mov    rbp,QWORD PTR [rax+rbx*8]
   51185:	mov    rax,rbp
   51188:	shl    rax,0x4
   5118c:	add    rax,QWORD PTR [r14]
   5118f:	cmp    BYTE PTR [rax+0x8],0x8
   51193:	jne    51170 <check_subexp_matching_top.isra.0+0x30>
   51195:	mov    rax,QWORD PTR [rax]
   51198:	cmp    rax,0x3f
   5119c:	jg     51170 <check_subexp_matching_top.isra.0+0x30>
   5119e:	mov    rcx,QWORD PTR [r14+0xa0]
   511a5:	bt     rcx,rax
   511a9:	jae    51170 <check_subexp_matching_top.isra.0+0x30>
   511ab:	mov    r9,QWORD PTR [r15+0xf8]
   511b2:	mov    rcx,QWORD PTR [r15+0xe8]
   511b9:	cmp    QWORD PTR [r15+0xf0],rcx
   511c0:	je     51238 <check_subexp_matching_top.isra.0+0xf8>
   511c2:	mov    esi,0x30
   511c7:	mov    edi,0x1
   511cc:	mov    QWORD PTR [rsp+0x10],rcx
   511d1:	mov    QWORD PTR [rsp+0x8],r9
   511d6:	mov    QWORD PTR [rsp+0x18],rdx
   511db:	call   c880 <calloc@plt>
   511e0:	mov    r9,QWORD PTR [rsp+0x8]
   511e5:	mov    rcx,QWORD PTR [rsp+0x10]
   511ea:	mov    QWORD PTR [r9+rcx*8],rax
   511ee:	test   rax,rax
   511f1:	je     51231 <check_subexp_matching_top.isra.0+0xf1>
   511f3:	add    rcx,0x1
   511f7:	mov    QWORD PTR [rax],r12
   511fa:	mov    rdx,QWORD PTR [rsp+0x18]
   511ff:	add    rbx,0x1
   51203:	mov    QWORD PTR [rax+0x8],rbp
   51207:	mov    QWORD PTR [r15+0xe8],rcx
   5120e:	cmp    rbx,QWORD PTR [r13+0x0]
   51212:	jl     5117e <check_subexp_matching_top.isra.0+0x3e>
   51218:	nop    DWORD PTR [rax+rax*1+0x0]
   51220:	xor    eax,eax
   51222:	add    rsp,0x28
   51226:	pop    rbx
   51227:	pop    rbp
   51228:	pop    r12
   5122a:	pop    r13
   5122c:	pop    r14
   5122e:	pop    r15
   51230:	ret    
   51231:	mov    eax,0xc
   51236:	jmp    51222 <check_subexp_matching_top.isra.0+0xe2>
   51238:	mov    rsi,rcx
   5123b:	lea    rax,[rcx+rcx*1]
   5123f:	mov    rdi,r9
   51242:	mov    QWORD PTR [rsp+0x8],rdx
   51247:	shl    rsi,0x4
   5124b:	mov    QWORD PTR [rsp+0x10],rax
   51250:	call   ca20 <realloc@plt>
   51255:	mov    rdx,QWORD PTR [rsp+0x8]
   5125a:	test   rax,rax
   5125d:	mov    r9,rax
   51260:	je     51231 <check_subexp_matching_top.isra.0+0xf1>
   51262:	mov    QWORD PTR [r15+0xf8],rax
   51269:	mov    rax,QWORD PTR [rsp+0x10]
   5126e:	mov    rcx,QWORD PTR [r15+0xe8]
   51275:	mov    QWORD PTR [r15+0xf0],rax
   5127c:	jmp    511c2 <check_subexp_matching_top.isra.0+0x82>
   51281:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5128c:	nop    DWORD PTR [rax+0x0]

0000000000051290 <pop_fail_stack.isra.0>:
   51290:	push   r12
   51292:	mov    r12,rsi
   51295:	shl    rcx,0x4
   51299:	push   rbp
   5129a:	mov    rbp,r9
   5129d:	push   rbx
   5129e:	mov    rax,QWORD PTR [rdi]
   512a1:	sub    rax,0x1
   512a5:	mov    QWORD PTR [rdi],rax
   512a8:	lea    rbx,[rax+rax*2]
   512ac:	mov    rax,QWORD PTR [rsi]
   512af:	mov    rdi,r8
   512b2:	shl    rbx,0x4
   512b6:	add    rax,rbx
   512b9:	mov    rsi,QWORD PTR [rax]
   512bc:	mov    QWORD PTR [rdx],rsi
   512bf:	mov    rsi,QWORD PTR [rax+0x10]
   512c3:	mov    rdx,rcx
   512c6:	call   cb30 <memcpy@plt>
   512cb:	mov    rdi,QWORD PTR [rbp+0x10]
   512cf:	call   4bdc0 <rpl_free>
   512d4:	mov    rax,QWORD PTR [r12]
   512d8:	mov    rdi,QWORD PTR [rax+rbx*1+0x10]
   512dd:	call   4bdc0 <rpl_free>
   512e2:	add    rbx,QWORD PTR [r12]
   512e6:	movdqu xmm0,XMMWORD PTR [rbx+0x18]
   512eb:	movaps XMMWORD PTR [rbp+0x0],xmm0
   512ef:	mov    rax,QWORD PTR [rbx+0x28]
   512f3:	mov    QWORD PTR [rbp+0x10],rax
   512f7:	mov    rax,QWORD PTR [rbx+0x8]
   512fb:	pop    rbx
   512fc:	pop    rbp
   512fd:	pop    r12
   512ff:	ret    

0000000000051300 <build_collating_symbol.isra.0>:
   51300:	push   rbp
   51301:	mov    rbp,rdi
   51304:	mov    rdi,rsi
   51307:	push   rbx
   51308:	mov    rbx,rsi
   5130b:	sub    rsp,0x8
   5130f:	call   c310 <strlen@plt>
   51314:	cmp    rax,0x1
   51318:	jne    51340 <build_collating_symbol.isra.0+0x40>
   5131a:	movzx  ecx,BYTE PTR [rbx]
   5131d:	mov    rdx,rcx
   51320:	shl    rax,cl
   51323:	shr    rdx,0x3
   51327:	and    edx,0x18
   5132a:	or     QWORD PTR [rbp+rdx*1+0x0],rax
   5132f:	add    rsp,0x8
   51333:	xor    eax,eax
   51335:	pop    rbx
   51336:	pop    rbp
   51337:	ret    
   51338:	nop    DWORD PTR [rax+rax*1+0x0]
   51340:	add    rsp,0x8
   51344:	mov    eax,0x3
   51349:	pop    rbx
   5134a:	pop    rbp
   5134b:	ret    
   5134c:	nop    DWORD PTR [rax+0x0]

0000000000051350 <build_charclass.isra.0>:
   51350:	push   r15
   51352:	push   r13
   51354:	mov    r13,rcx
   51357:	push   r12
   51359:	mov    r12,r9
   5135c:	push   rbp
   5135d:	mov    rbp,rdi
   51360:	push   rbx
   51361:	mov    rbx,rsi
   51364:	sub    rsp,0x10
   51368:	test   QWORD PTR [rsp+0x40],0x400000
   51371:	je     51398 <build_charclass.isra.0+0x48>
   51373:	mov    ecx,0x6
   51378:	lea    rdi,[rip+0x1ea17]        # 6fd96 <quoting_style_vals+0xb6>
   5137f:	mov    rsi,r9
   51382:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   51384:	seta   al
   51387:	sbb    al,0x0
   51389:	test   al,al
   5138b:	jne    51486 <build_charclass.isra.0+0x136>
   51391:	lea    r12,[rip+0x1e9f8]        # 6fd90 <quoting_style_vals+0xb0>
   51398:	mov    rax,QWORD PTR [r13+0x0]
   5139c:	mov    rdi,QWORD PTR [rdx]
   5139f:	cmp    QWORD PTR [r8],rax
   513a2:	je     514b9 <build_charclass.isra.0+0x169>
   513a8:	lea    rdx,[rax+0x1]
   513ac:	mov    QWORD PTR [r13+0x0],rdx
   513b0:	lea    r13,[rdi+rax*8]
   513b4:	mov    rdi,r12
   513b7:	call   c9b0 <wctype@plt>
   513bc:	mov    ecx,0x6
   513c1:	lea    rdi,[rip+0x1e9da]        # 6fda2 <quoting_style_vals+0xc2>
   513c8:	mov    rsi,r12
   513cb:	mov    QWORD PTR [r13+0x0],rax
   513cf:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   513d1:	seta   al
   513d4:	sbb    al,0x0
   513d6:	test   al,al
   513d8:	je     51448 <build_charclass.isra.0+0xf8>
   513da:	mov    ecx,0x6
   513df:	lea    rdi,[rip+0x1e9c2]        # 6fda8 <quoting_style_vals+0xc8>
   513e6:	mov    rsi,r12
   513e9:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   513eb:	seta   al
   513ee:	sbb    al,0x0
   513f0:	test   al,al
   513f2:	jne    514f8 <build_charclass.isra.0+0x1a8>
   513f8:	call   c3b0 <__ctype_b_loc@plt>
   513fd:	xor    ecx,ecx
   513ff:	mov    edi,0x1
   51404:	mov    rdx,QWORD PTR [rax]
   51407:	test   rbp,rbp
   5140a:	jne    516c0 <build_charclass.isra.0+0x370>
   51410:	test   BYTE PTR [rdx+rcx*2],0x2
   51414:	je     51427 <build_charclass.isra.0+0xd7>
   51416:	mov    rax,rcx
   51419:	mov    rsi,rdi
   5141c:	sar    rax,0x6
   51420:	shl    rsi,cl
   51423:	or     QWORD PTR [rbx+rax*8],rsi
   51427:	add    rcx,0x1
   5142b:	cmp    rcx,0x100
   51432:	jne    51410 <build_charclass.isra.0+0xc0>
   51434:	xor    eax,eax
   51436:	add    rsp,0x10
   5143a:	pop    rbx
   5143b:	pop    rbp
   5143c:	pop    r12
   5143e:	pop    r13
   51440:	pop    r15
   51442:	ret    
   51443:	nop    DWORD PTR [rax+rax*1+0x0]
   51448:	call   c3b0 <__ctype_b_loc@plt>
   5144d:	xor    ecx,ecx
   5144f:	mov    edi,0x1
   51454:	mov    rdx,QWORD PTR [rax]
   51457:	test   rbp,rbp
   5145a:	jne    5168a <build_charclass.isra.0+0x33a>
   51460:	test   BYTE PTR [rdx+rcx*2],0x8
   51464:	je     51477 <build_charclass.isra.0+0x127>
   51466:	mov    rax,rcx
   51469:	mov    rsi,rdi
   5146c:	sar    rax,0x6
   51470:	shl    rsi,cl
   51473:	or     QWORD PTR [rbx+rax*8],rsi
   51477:	add    rcx,0x1
   5147b:	cmp    rcx,0x100
   51482:	jne    51460 <build_charclass.isra.0+0x110>
   51484:	jmp    51434 <build_charclass.isra.0+0xe4>
   51486:	lea    rdi,[rip+0x1e90f]        # 6fd9c <quoting_style_vals+0xbc>
   5148d:	mov    ecx,0x6
   51492:	mov    rsi,r9
   51495:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   51497:	mov    rdi,QWORD PTR [rdx]
   5149a:	seta   al
   5149d:	sbb    al,0x0
   5149f:	test   al,al
   514a1:	lea    rax,[rip+0x1e8e8]        # 6fd90 <quoting_style_vals+0xb0>
   514a8:	cmove  r12,rax
   514ac:	mov    rax,QWORD PTR [r13+0x0]
   514b0:	cmp    QWORD PTR [r8],rax
   514b3:	jne    513a8 <build_charclass.isra.0+0x58>
   514b9:	lea    r15,[rax+rax*1+0x1]
   514be:	mov    QWORD PTR [rsp+0x8],r8
   514c3:	lea    rsi,[r15*8+0x0]
   514cb:	mov    QWORD PTR [rsp],rdx
   514cf:	call   ca20 <realloc@plt>
   514d4:	mov    rdi,rax
   514d7:	test   rax,rax
   514da:	je     517ee <build_charclass.isra.0+0x49e>
   514e0:	mov    rdx,QWORD PTR [rsp]
   514e4:	mov    r8,QWORD PTR [rsp+0x8]
   514e9:	mov    QWORD PTR [rdx],rax
   514ec:	mov    QWORD PTR [r8],r15
   514ef:	mov    rax,QWORD PTR [r13+0x0]
   514f3:	jmp    513a8 <build_charclass.isra.0+0x58>
   514f8:	mov    ecx,0x6
   514fd:	lea    rdi,[rip+0x1e898]        # 6fd9c <quoting_style_vals+0xbc>
   51504:	mov    rsi,r12
   51507:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   51509:	seta   al
   5150c:	sbb    al,0x0
   5150e:	test   al,al
   51510:	je     5157a <build_charclass.isra.0+0x22a>
   51512:	mov    ecx,0x6
   51517:	lea    rdi,[rip+0x1e890]        # 6fdae <quoting_style_vals+0xce>
   5151e:	mov    rsi,r12
   51521:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   51523:	seta   al
   51526:	sbb    al,0x0
   51528:	test   al,al
   5152a:	jne    515c2 <build_charclass.isra.0+0x272>
   51530:	call   c3b0 <__ctype_b_loc@plt>
   51535:	xor    ecx,ecx
   51537:	mov    edi,0x1
   5153c:	mov    rdx,QWORD PTR [rax]
   5153f:	test   rbp,rbp
   51542:	jne    5188a <build_charclass.isra.0+0x53a>
   51548:	nop    DWORD PTR [rax+rax*1+0x0]
   51550:	test   BYTE PTR [rdx+rcx*2+0x1],0x20
   51555:	je     51568 <build_charclass.isra.0+0x218>
   51557:	mov    rax,rcx
   5155a:	mov    rsi,rdi
   5155d:	sar    rax,0x6
   51561:	shl    rsi,cl
   51564:	or     QWORD PTR [rbx+rax*8],rsi
   51568:	add    rcx,0x1
   5156c:	cmp    rcx,0x100
   51573:	jne    51550 <build_charclass.isra.0+0x200>
   51575:	jmp    51434 <build_charclass.isra.0+0xe4>
   5157a:	call   c3b0 <__ctype_b_loc@plt>
   5157f:	xor    ecx,ecx
   51581:	mov    edi,0x1
   51586:	mov    rdx,QWORD PTR [rax]
   51589:	test   rbp,rbp
   5158c:	jne    516f8 <build_charclass.isra.0+0x3a8>
   51592:	nop    WORD PTR [rax+rax*1+0x0]
   51598:	test   BYTE PTR [rdx+rcx*2+0x1],0x2
   5159d:	je     515b0 <build_charclass.isra.0+0x260>
   5159f:	mov    rax,rcx
   515a2:	mov    rsi,rdi
   515a5:	sar    rax,0x6
   515a9:	shl    rsi,cl
   515ac:	or     QWORD PTR [rbx+rax*8],rsi
   515b0:	add    rcx,0x1
   515b4:	cmp    rcx,0x100
   515bb:	jne    51598 <build_charclass.isra.0+0x248>
   515bd:	jmp    51434 <build_charclass.isra.0+0xe4>
   515c2:	mov    ecx,0x6
   515c7:	lea    rdi,[rip+0x1e7c2]        # 6fd90 <quoting_style_vals+0xb0>
   515ce:	mov    rsi,r12
   515d1:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   515d3:	seta   al
   515d6:	sbb    al,0x0
   515d8:	test   al,al
   515da:	je     51642 <build_charclass.isra.0+0x2f2>
   515dc:	mov    ecx,0x6
   515e1:	lea    rdi,[rip+0x1e7e5]        # 6fdcd <quoting_style_vals+0xed>
   515e8:	mov    rsi,r12
   515eb:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   515ed:	seta   al
   515f0:	sbb    al,0x0
   515f2:	test   al,al
   515f4:	jne    51731 <build_charclass.isra.0+0x3e1>
   515fa:	call   c3b0 <__ctype_b_loc@plt>
   515ff:	xor    ecx,ecx
   51601:	mov    edi,0x1
   51606:	mov    rdx,QWORD PTR [rax]
   51609:	test   rbp,rbp
   5160c:	jne    518c1 <build_charclass.isra.0+0x571>
   51612:	nop    WORD PTR [rax+rax*1+0x0]
   51618:	test   BYTE PTR [rdx+rcx*2+0x1],0x8
   5161d:	je     51630 <build_charclass.isra.0+0x2e0>
   5161f:	mov    rax,rcx
   51622:	mov    rsi,rdi
   51625:	sar    rax,0x6
   51629:	shl    rsi,cl
   5162c:	or     QWORD PTR [rbx+rax*8],rsi
   51630:	add    rcx,0x1
   51634:	cmp    rcx,0x100
   5163b:	jne    51618 <build_charclass.isra.0+0x2c8>
   5163d:	jmp    51434 <build_charclass.isra.0+0xe4>
   51642:	call   c3b0 <__ctype_b_loc@plt>
   51647:	xor    ecx,ecx
   51649:	mov    edi,0x1
   5164e:	mov    rdx,QWORD PTR [rax]
   51651:	test   rbp,rbp
   51654:	jne    51857 <build_charclass.isra.0+0x507>
   5165a:	nop    WORD PTR [rax+rax*1+0x0]
   51660:	test   BYTE PTR [rdx+rcx*2+0x1],0x4
   51665:	je     51678 <build_charclass.isra.0+0x328>
   51667:	mov    rax,rcx
   5166a:	mov    rsi,rdi
   5166d:	sar    rax,0x6
   51671:	shl    rsi,cl
   51674:	or     QWORD PTR [rbx+rax*8],rsi
   51678:	add    rcx,0x1
   5167c:	cmp    rcx,0x100
   51683:	jne    51660 <build_charclass.isra.0+0x310>
   51685:	jmp    51434 <build_charclass.isra.0+0xe4>
   5168a:	xor    eax,eax
   5168c:	nop    DWORD PTR [rax+0x0]
   51690:	test   BYTE PTR [rdx+rax*2],0x8
   51694:	je     516af <build_charclass.isra.0+0x35f>
   51696:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   5169b:	mov    r10,rdi
   5169e:	mov    rsi,rcx
   516a1:	shl    r10,cl
   516a4:	shr    rsi,0x3
   516a8:	and    esi,0x18
   516ab:	or     QWORD PTR [rbx+rsi*1],r10
   516af:	add    rax,0x1
   516b3:	cmp    rax,0x100
   516b9:	jne    51690 <build_charclass.isra.0+0x340>
   516bb:	jmp    51434 <build_charclass.isra.0+0xe4>
   516c0:	xor    eax,eax
   516c2:	nop    WORD PTR [rax+rax*1+0x0]
   516c8:	test   BYTE PTR [rdx+rax*2],0x2
   516cc:	je     516e7 <build_charclass.isra.0+0x397>
   516ce:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   516d3:	mov    r11,rdi
   516d6:	mov    rsi,rcx
   516d9:	shl    r11,cl
   516dc:	shr    rsi,0x3
   516e0:	and    esi,0x18
   516e3:	or     QWORD PTR [rbx+rsi*1],r11
   516e7:	add    rax,0x1
   516eb:	cmp    rax,0x100
   516f1:	jne    516c8 <build_charclass.isra.0+0x378>
   516f3:	jmp    51434 <build_charclass.isra.0+0xe4>
   516f8:	xor    eax,eax
   516fa:	nop    WORD PTR [rax+rax*1+0x0]
   51700:	test   BYTE PTR [rdx+rax*2+0x1],0x2
   51705:	je     51720 <build_charclass.isra.0+0x3d0>
   51707:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   5170c:	mov    r15,rdi
   5170f:	mov    rsi,rcx
   51712:	shl    r15,cl
   51715:	shr    rsi,0x3
   51719:	and    esi,0x18
   5171c:	or     QWORD PTR [rbx+rsi*1],r15
   51720:	add    rax,0x1
   51724:	cmp    rax,0x100
   5172a:	jne    51700 <build_charclass.isra.0+0x3b0>
   5172c:	jmp    51434 <build_charclass.isra.0+0xe4>
   51731:	mov    ecx,0x6
   51736:	lea    rdi,[rip+0x1e677]        # 6fdb4 <quoting_style_vals+0xd4>
   5173d:	mov    rsi,r12
   51740:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   51742:	seta   al
   51745:	sbb    al,0x0
   51747:	test   al,al
   51749:	jne    51792 <build_charclass.isra.0+0x442>
   5174b:	call   c3b0 <__ctype_b_loc@plt>
   51750:	xor    ecx,ecx
   51752:	mov    edi,0x1
   51757:	mov    rdx,QWORD PTR [rax]
   5175a:	test   rbp,rbp
   5175d:	jne    51a9e <build_charclass.isra.0+0x74e>
   51763:	nop    DWORD PTR [rax+rax*1+0x0]
   51768:	test   BYTE PTR [rdx+rcx*2+0x1],0x40
   5176d:	je     51780 <build_charclass.isra.0+0x430>
   5176f:	mov    rax,rcx
   51772:	mov    rsi,rdi
   51775:	sar    rax,0x6
   51779:	shl    rsi,cl
   5177c:	or     QWORD PTR [rbx+rax*8],rsi
   51780:	add    rcx,0x1
   51784:	cmp    rcx,0x100
   5178b:	jne    51768 <build_charclass.isra.0+0x418>
   5178d:	jmp    51434 <build_charclass.isra.0+0xe4>
   51792:	mov    ecx,0x6
   51797:	lea    rdi,[rip+0x1e5f8]        # 6fd96 <quoting_style_vals+0xb6>
   5179e:	mov    rsi,r12
   517a1:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   517a3:	seta   al
   517a6:	sbb    al,0x0
   517a8:	test   al,al
   517aa:	jne    517f8 <build_charclass.isra.0+0x4a8>
   517ac:	call   c3b0 <__ctype_b_loc@plt>
   517b1:	xor    ecx,ecx
   517b3:	mov    edi,0x1
   517b8:	mov    rax,QWORD PTR [rax]
   517bb:	test   rbp,rbp
   517be:	jne    51b08 <build_charclass.isra.0+0x7b8>
   517c4:	test   BYTE PTR [rax+rcx*2+0x1],0x1
   517c9:	je     517dc <build_charclass.isra.0+0x48c>
   517cb:	mov    rdx,rcx
   517ce:	mov    rsi,rdi
   517d1:	sar    rdx,0x6
   517d5:	shl    rsi,cl
   517d8:	or     QWORD PTR [rbx+rdx*8],rsi
   517dc:	add    rcx,0x1
   517e0:	cmp    rcx,0x100
   517e7:	jne    517c4 <build_charclass.isra.0+0x474>
   517e9:	jmp    51434 <build_charclass.isra.0+0xe4>
   517ee:	mov    eax,0xc
   517f3:	jmp    51436 <build_charclass.isra.0+0xe6>
   517f8:	mov    ecx,0x6
   517fd:	lea    rdi,[rip+0x1e5b6]        # 6fdba <quoting_style_vals+0xda>
   51804:	mov    rsi,r12
   51807:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   51809:	seta   al
   5180c:	sbb    al,0x0
   5180e:	test   al,al
   51810:	jne    518f4 <build_charclass.isra.0+0x5a4>
   51816:	call   c3b0 <__ctype_b_loc@plt>
   5181b:	xor    ecx,ecx
   5181d:	mov    esi,0x1
   51822:	mov    rdx,QWORD PTR [rax]
   51825:	test   rbp,rbp
   51828:	jne    51ad1 <build_charclass.isra.0+0x781>
   5182e:	test   BYTE PTR [rdx+rcx*2],0x1
   51832:	je     51845 <build_charclass.isra.0+0x4f5>
   51834:	mov    rax,rcx
   51837:	mov    rdi,rsi
   5183a:	sar    rax,0x6
   5183e:	shl    rdi,cl
   51841:	or     QWORD PTR [rbx+rax*8],rdi
   51845:	add    rcx,0x1
   51849:	cmp    rcx,0x100
   51850:	jne    5182e <build_charclass.isra.0+0x4de>
   51852:	jmp    51434 <build_charclass.isra.0+0xe4>
   51857:	xor    eax,eax
   51859:	test   BYTE PTR [rdx+rax*2+0x1],0x4
   5185e:	je     51879 <build_charclass.isra.0+0x529>
   51860:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   51865:	mov    r15,rdi
   51868:	mov    rsi,rcx
   5186b:	shl    r15,cl
   5186e:	shr    rsi,0x3
   51872:	and    esi,0x18
   51875:	or     QWORD PTR [rbx+rsi*1],r15
   51879:	add    rax,0x1
   5187d:	cmp    rax,0x100
   51883:	jne    51859 <build_charclass.isra.0+0x509>
   51885:	jmp    51434 <build_charclass.isra.0+0xe4>
   5188a:	xor    eax,eax
   5188c:	nop    DWORD PTR [rax+0x0]
   51890:	test   BYTE PTR [rdx+rax*2+0x1],0x20
   51895:	je     518b0 <build_charclass.isra.0+0x560>
   51897:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   5189c:	mov    r15,rdi
   5189f:	mov    rsi,rcx
   518a2:	shl    r15,cl
   518a5:	shr    rsi,0x3
   518a9:	and    esi,0x18
   518ac:	or     QWORD PTR [rbx+rsi*1],r15
   518b0:	add    rax,0x1
   518b4:	cmp    rax,0x100
   518ba:	jne    51890 <build_charclass.isra.0+0x540>
   518bc:	jmp    51434 <build_charclass.isra.0+0xe4>
   518c1:	xor    eax,eax
   518c3:	test   BYTE PTR [rdx+rax*2+0x1],0x8
   518c8:	je     518e3 <build_charclass.isra.0+0x593>
   518ca:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   518cf:	mov    r9,rdi
   518d2:	mov    rsi,rcx
   518d5:	shl    r9,cl
   518d8:	shr    rsi,0x3
   518dc:	and    esi,0x18
   518df:	or     QWORD PTR [rbx+rsi*1],r9
   518e3:	add    rax,0x1
   518e7:	cmp    rax,0x100
   518ed:	jne    518c3 <build_charclass.isra.0+0x573>
   518ef:	jmp    51434 <build_charclass.isra.0+0xe4>
   518f4:	mov    ecx,0x6
   518f9:	lea    rdi,[rip+0x1e4c0]        # 6fdc0 <quoting_style_vals+0xe0>
   51900:	mov    rsi,r12
   51903:	repz cmps BYTE PTR ds:[rsi],BYTE PTR es:[rdi]
   51905:	seta   al
   51908:	sbb    al,0x0
   5190a:	test   al,al
   5190c:	jne    51984 <build_charclass.isra.0+0x634>
   5190e:	call   c3b0 <__ctype_b_loc@plt>
   51913:	xor    ecx,ecx
   51915:	mov    edx,0x1
   5191a:	mov    rsi,QWORD PTR [rax]
   5191d:	test   rbp,rbp
   51920:	jne    5194c <build_charclass.isra.0+0x5fc>
   51922:	cmp    WORD PTR [rsi+rcx*2],0x0
   51927:	jns    5193a <build_charclass.isra.0+0x5ea>
   51929:	mov    rax,rcx
   5192c:	mov    rdi,rdx
   5192f:	sar    rax,0x6
   51933:	shl    rdi,cl
   51936:	or     QWORD PTR [rbx+rax*8],rdi
   5193a:	add    rcx,0x1
   5193e:	cmp    rcx,0x100
   51945:	jne    51922 <build_charclass.isra.0+0x5d2>
   51947:	jmp    51434 <build_charclass.isra.0+0xe4>
   5194c:	xor    eax,eax
   5194e:	mov    edi,0x1
   51953:	cmp    WORD PTR [rsi+rax*2],0x0
   51958:	jns    51973 <build_charclass.isra.0+0x623>
   5195a:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   5195f:	mov    r9,rdi
   51962:	mov    rdx,rcx
   51965:	shl    r9,cl
   51968:	shr    rdx,0x3
   5196c:	and    edx,0x18
   5196f:	or     QWORD PTR [rbx+rdx*1],r9
   51973:	add    rax,0x1
   51977:	cmp    rax,0x100
   5197d:	jne    51953 <build_charclass.isra.0+0x603>
   5197f:	jmp    51434 <build_charclass.isra.0+0xe4>
   51984:	lea    rsi,[rip+0x1e43b]        # 6fdc6 <quoting_style_vals+0xe6>
   5198b:	mov    rdi,r12
   5198e:	call   be40 <strcmp@plt>
   51993:	test   eax,eax
   51995:	jne    51a0b <build_charclass.isra.0+0x6bb>
   51997:	call   c3b0 <__ctype_b_loc@plt>
   5199c:	xor    ecx,ecx
   5199e:	mov    edx,0x1
   519a3:	mov    rsi,QWORD PTR [rax]
   519a6:	test   rbp,rbp
   519a9:	jne    519d4 <build_charclass.isra.0+0x684>
   519ab:	test   BYTE PTR [rsi+rcx*2],0x4
   519af:	je     519c2 <build_charclass.isra.0+0x672>
   519b1:	mov    rax,rcx
   519b4:	mov    rdi,rdx
   519b7:	sar    rax,0x6
   519bb:	shl    rdi,cl
   519be:	or     QWORD PTR [rbx+rax*8],rdi
   519c2:	add    rcx,0x1
   519c6:	cmp    rcx,0x100
   519cd:	jne    519ab <build_charclass.isra.0+0x65b>
   519cf:	jmp    51434 <build_charclass.isra.0+0xe4>
   519d4:	xor    eax,eax
   519d6:	mov    edi,0x1
   519db:	test   BYTE PTR [rsi+rax*2],0x4
   519df:	je     519fa <build_charclass.isra.0+0x6aa>
   519e1:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   519e6:	mov    r15,rdi
   519e9:	mov    rdx,rcx
   519ec:	shl    r15,cl
   519ef:	shr    rdx,0x3
   519f3:	and    edx,0x18
   519f6:	or     QWORD PTR [rbx+rdx*1],r15
   519fa:	add    rax,0x1
   519fe:	cmp    rax,0x100
   51a04:	jne    519db <build_charclass.isra.0+0x68b>
   51a06:	jmp    51434 <build_charclass.isra.0+0xe4>
   51a0b:	lea    rsi,[rip+0x1e3ba]        # 6fdcc <quoting_style_vals+0xec>
   51a12:	mov    rdi,r12
   51a15:	call   be40 <strcmp@plt>
   51a1a:	test   eax,eax
   51a1c:	jne    51a94 <build_charclass.isra.0+0x744>
   51a1e:	call   c3b0 <__ctype_b_loc@plt>
   51a23:	xor    ecx,ecx
   51a25:	mov    edx,0x1
   51a2a:	mov    rsi,QWORD PTR [rax]
   51a2d:	test   rbp,rbp
   51a30:	jne    51a5c <build_charclass.isra.0+0x70c>
   51a32:	test   BYTE PTR [rsi+rcx*2+0x1],0x10
   51a37:	je     51a4a <build_charclass.isra.0+0x6fa>
   51a39:	mov    rax,rcx
   51a3c:	mov    rdi,rdx
   51a3f:	sar    rax,0x6
   51a43:	shl    rdi,cl
   51a46:	or     QWORD PTR [rbx+rax*8],rdi
   51a4a:	add    rcx,0x1
   51a4e:	cmp    rcx,0x100
   51a55:	jne    51a32 <build_charclass.isra.0+0x6e2>
   51a57:	jmp    51434 <build_charclass.isra.0+0xe4>
   51a5c:	xor    eax,eax
   51a5e:	mov    edi,0x1
   51a63:	test   BYTE PTR [rsi+rax*2+0x1],0x10
   51a68:	je     51a83 <build_charclass.isra.0+0x733>
   51a6a:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   51a6f:	mov    r9,rdi
   51a72:	mov    rdx,rcx
   51a75:	shl    r9,cl
   51a78:	shr    rdx,0x3
   51a7c:	and    edx,0x18
   51a7f:	or     QWORD PTR [rbx+rdx*1],r9
   51a83:	add    rax,0x1
   51a87:	cmp    rax,0x100
   51a8d:	jne    51a63 <build_charclass.isra.0+0x713>
   51a8f:	jmp    51434 <build_charclass.isra.0+0xe4>
   51a94:	mov    eax,0x4
   51a99:	jmp    51436 <build_charclass.isra.0+0xe6>
   51a9e:	xor    eax,eax
   51aa0:	test   BYTE PTR [rdx+rax*2+0x1],0x40
   51aa5:	je     51ac0 <build_charclass.isra.0+0x770>
   51aa7:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   51aac:	mov    r9,rdi
   51aaf:	mov    rsi,rcx
   51ab2:	shl    r9,cl
   51ab5:	shr    rsi,0x3
   51ab9:	and    esi,0x18
   51abc:	or     QWORD PTR [rbx+rsi*1],r9
   51ac0:	add    rax,0x1
   51ac4:	cmp    rax,0x100
   51aca:	jne    51aa0 <build_charclass.isra.0+0x750>
   51acc:	jmp    51434 <build_charclass.isra.0+0xe4>
   51ad1:	xor    eax,eax
   51ad3:	mov    edi,0x1
   51ad8:	test   BYTE PTR [rdx+rax*2],0x1
   51adc:	je     51af7 <build_charclass.isra.0+0x7a7>
   51ade:	movzx  ecx,BYTE PTR [rbp+rax*1+0x0]
   51ae3:	mov    r15,rdi
   51ae6:	mov    rsi,rcx
   51ae9:	shl    r15,cl
   51aec:	shr    rsi,0x3
   51af0:	and    esi,0x18
   51af3:	or     QWORD PTR [rbx+rsi*1],r15
   51af7:	add    rax,0x1
   51afb:	cmp    rax,0x100
   51b01:	jne    51ad8 <build_charclass.isra.0+0x788>
   51b03:	jmp    51434 <build_charclass.isra.0+0xe4>
   51b08:	xor    edx,edx
   51b0a:	test   BYTE PTR [rax+rdx*2+0x1],0x1
   51b0f:	je     51b2a <build_charclass.isra.0+0x7da>
   51b11:	movzx  ecx,BYTE PTR [rbp+rdx*1+0x0]
   51b16:	mov    r9,rdi
   51b19:	mov    rsi,rcx
   51b1c:	shl    r9,cl
   51b1f:	shr    rsi,0x3
   51b23:	and    esi,0x18
   51b26:	or     QWORD PTR [rbx+rsi*1],r9
   51b2a:	add    rdx,0x1
   51b2e:	cmp    rdx,0x100
   51b35:	jne    51b0a <build_charclass.isra.0+0x7ba>
   51b37:	jmp    51434 <build_charclass.isra.0+0xe4>
   51b3c:	nop    DWORD PTR [rax+0x0]

0000000000051b40 <build_charclass_op>:
   51b40:	push   r15
   51b42:	push   r14
   51b44:	mov    r14,rdx
   51b47:	push   r13
   51b49:	mov    r13,rcx
   51b4c:	push   r12
   51b4e:	mov    r12d,r8d
   51b51:	push   rbp
   51b52:	push   rbx
   51b53:	mov    rbx,rdi
   51b56:	mov    edi,0x20
   51b5b:	sub    rsp,0x58
   51b5f:	mov    QWORD PTR [rsp],rsi
   51b63:	mov    esi,0x1
   51b68:	mov    QWORD PTR [rsp+0x8],r9
   51b6d:	mov    rax,QWORD PTR fs:0x28
   51b76:	mov    QWORD PTR [rsp+0x48],rax
   51b7b:	xor    eax,eax
   51b7d:	mov    QWORD PTR [rsp+0x18],0x0
   51b86:	call   c880 <calloc@plt>
   51b8b:	test   rax,rax
   51b8e:	je     51d58 <build_charclass_op+0x218>
   51b94:	mov    esi,0x1
   51b99:	mov    edi,0x50
   51b9e:	mov    rbp,rax
   51ba1:	call   c880 <calloc@plt>
   51ba6:	mov    r15,rax
   51ba9:	test   rax,rax
   51bac:	je     51d80 <build_charclass_op+0x240>
   51bb2:	sub    rsp,0x8
   51bb6:	movzx  eax,BYTE PTR [rax+0x20]
   51bba:	mov    edx,r12d
   51bbd:	lea    rcx,[r15+0x48]
   51bc1:	push   0x0
   51bc3:	and    edx,0x1
   51bc6:	mov    rdi,QWORD PTR [rsp+0x10]
   51bcb:	mov    r9,r14
   51bce:	and    eax,0xfffffffe
   51bd1:	mov    rsi,rbp
   51bd4:	or     eax,edx
   51bd6:	lea    rdx,[r15+0x18]
   51bda:	lea    r8,[rsp+0x28]
   51bdf:	mov    BYTE PTR [r15+0x20],al
   51be3:	call   51350 <build_charclass.isra.0>
   51be8:	pop    rdx
   51be9:	pop    rcx
   51bea:	test   eax,eax
   51bec:	jne    51da0 <build_charclass_op+0x260>
   51bf2:	movsx  rcx,BYTE PTR [r13+0x0]
   51bf7:	mov    esi,0x1
   51bfc:	test   cl,cl
   51bfe:	je     51c3b <build_charclass_op+0xfb>
   51c00:	test   rcx,rcx
   51c03:	lea    rax,[rcx+0x3f]
   51c07:	mov    rdx,rcx
   51c0a:	cmovns rax,rcx
   51c0e:	sar    rdx,0x3f
   51c12:	add    r13,0x1
   51c16:	shr    rdx,0x3a
   51c1a:	add    rcx,rdx
   51c1d:	sar    rax,0x6
   51c21:	and    ecx,0x3f
   51c24:	sub    rcx,rdx
   51c27:	mov    rdx,rsi
   51c2a:	shl    rdx,cl
   51c2d:	movsx  rcx,BYTE PTR [r13+0x0]
   51c32:	or     QWORD PTR [rbp+rax*8+0x0],rdx
   51c37:	test   cl,cl
   51c39:	jne    51c00 <build_charclass_op+0xc0>
   51c3b:	test   r12b,r12b
   51c3e:	je     51c53 <build_charclass_op+0x113>
   51c40:	mov    rax,rbp
   51c43:	lea    rdx,[rbp+0x20]
   51c47:	not    QWORD PTR [rax]
   51c4a:	add    rax,0x8
   51c4e:	cmp    rdx,rax
   51c51:	jne    51c47 <build_charclass_op+0x107>
   51c53:	cmp    DWORD PTR [rbx+0xb4],0x1
   51c5a:	jle    51c75 <build_charclass_op+0x135>
   51c5c:	mov    rcx,QWORD PTR [rbx+0x78]
   51c60:	xor    eax,eax
   51c62:	mov    rdx,QWORD PTR [rcx+rax*1]
   51c66:	and    QWORD PTR [rbp+rax*1+0x0],rdx
   51c6b:	add    rax,0x8
   51c6f:	cmp    rax,0x20
   51c73:	jne    51c62 <build_charclass_op+0x122>
   51c75:	lea    r13,[rbx+0x70]
   51c79:	lea    r14,[rbx+0x80]
   51c80:	xor    eax,eax
   51c82:	xor    ecx,ecx
   51c84:	lea    r8,[rsp+0x20]
   51c89:	xor    edx,edx
   51c8b:	mov    rsi,r14
   51c8e:	mov    rdi,r13
   51c91:	mov    DWORD PTR [rsp+0x29],0x0
   51c99:	mov    WORD PTR [rsp+0x2d],ax
   51c9e:	mov    BYTE PTR [rsp+0x2f],0x0
   51ca3:	mov    QWORD PTR [rsp+0x20],rbp
   51ca8:	mov    BYTE PTR [rsp+0x28],0x3
   51cad:	mov    QWORD PTR [rsp],r8
   51cb1:	call   4e750 <create_token_tree.isra.0>
   51cb6:	mov    r12,rax
   51cb9:	test   rax,rax
   51cbc:	je     51d48 <build_charclass_op+0x208>
   51cc2:	cmp    DWORD PTR [rbx+0xb4],0x1
   51cc9:	jle    51d70 <build_charclass_op+0x230>
   51ccf:	or     BYTE PTR [rbx+0xb0],0x2
   51cd6:	mov    r8,QWORD PTR [rsp]
   51cda:	xor    ecx,ecx
   51cdc:	xor    edx,edx
   51cde:	mov    rsi,r14
   51ce1:	mov    rdi,r13
   51ce4:	mov    BYTE PTR [rsp+0x28],0x6
   51ce9:	mov    QWORD PTR [rsp+0x20],r15
   51cee:	call   4e750 <create_token_tree.isra.0>
   51cf3:	mov    rcx,rax
   51cf6:	test   rax,rax
   51cf9:	je     51d48 <build_charclass_op+0x208>
   51cfb:	pxor   xmm0,xmm0
   51cff:	mov    rdx,r12
   51d02:	lea    r8,[rsp+0x30]
   51d07:	mov    rsi,r14
   51d0a:	mov    rdi,r13
   51d0d:	movaps XMMWORD PTR [rsp+0x30],xmm0
   51d12:	mov    BYTE PTR [rsp+0x38],0xa
   51d17:	call   4e750 <create_token_tree.isra.0>
   51d1c:	mov    r12,rax
   51d1f:	mov    rax,QWORD PTR [rsp+0x48]
   51d24:	xor    rax,QWORD PTR fs:0x28
   51d2d:	jne    51dc5 <build_charclass_op+0x285>
   51d33:	add    rsp,0x58
   51d37:	mov    rax,r12
   51d3a:	pop    rbx
   51d3b:	pop    rbp
   51d3c:	pop    r12
   51d3e:	pop    r13
   51d40:	pop    r14
   51d42:	pop    r15
   51d44:	ret    
   51d45:	nop    DWORD PTR [rax]
   51d48:	mov    rdi,rbp
   51d4b:	call   4bdc0 <rpl_free>
   51d50:	mov    rdi,r15
   51d53:	call   4d2c0 <free_charset>
   51d58:	mov    rax,QWORD PTR [rsp+0x8]
   51d5d:	xor    r12d,r12d
   51d60:	mov    DWORD PTR [rax],0xc
   51d66:	jmp    51d1f <build_charclass_op+0x1df>
   51d68:	nop    DWORD PTR [rax+rax*1+0x0]
   51d70:	mov    rdi,r15
   51d73:	call   4d2c0 <free_charset>
   51d78:	jmp    51d1f <build_charclass_op+0x1df>
   51d7a:	nop    WORD PTR [rax+rax*1+0x0]
   51d80:	mov    rdi,rbp
   51d83:	xor    r12d,r12d
   51d86:	call   4bdc0 <rpl_free>
   51d8b:	mov    rax,QWORD PTR [rsp+0x8]
   51d90:	mov    DWORD PTR [rax],0xc
   51d96:	jmp    51d1f <build_charclass_op+0x1df>
   51d98:	nop    DWORD PTR [rax+rax*1+0x0]
   51da0:	mov    rdi,rbp
   51da3:	mov    DWORD PTR [rsp],eax
   51da6:	xor    r12d,r12d
   51da9:	call   4bdc0 <rpl_free>
   51dae:	mov    rdi,r15
   51db1:	call   4d2c0 <free_charset>
   51db6:	mov    rbx,QWORD PTR [rsp+0x8]
   51dbb:	mov    eax,DWORD PTR [rsp]
   51dbe:	mov    DWORD PTR [rbx],eax
   51dc0:	jmp    51d1f <build_charclass_op+0x1df>
   51dc5:	call   c7b0 <__stack_chk_fail@plt>
   51dca:	nop    WORD PTR [rax+rax*1+0x0]

0000000000051dd0 <re_compile_fastmap_iter.isra.0>:
   51dd0:	push   r15
   51dd2:	mov    r15,rcx
   51dd5:	push   r14
   51dd7:	push   r13
   51dd9:	push   r12
   51ddb:	xor    r12d,r12d
   51dde:	push   rbp
   51ddf:	push   rbx
   51de0:	sub    rsp,0x168
   51de7:	mov    QWORD PTR [rsp+0x28],rdi
   51dec:	mov    QWORD PTR [rsp+0x30],rsi
   51df1:	mov    QWORD PTR [rsp+0x38],rdx
   51df6:	mov    rax,QWORD PTR fs:0x28
   51dff:	mov    QWORD PTR [rsp+0x158],rax
   51e07:	xor    eax,eax
   51e09:	mov    rax,QWORD PTR [rdi]
   51e0c:	cmp    DWORD PTR [rax+0xb4],0x1
   51e13:	mov    QWORD PTR [rsp+0x10],rax
   51e18:	jne    51e31 <re_compile_fastmap_iter.isra.0+0x61>
   51e1a:	mov    rax,QWORD PTR [rdi+0x18]
   51e1e:	mov    r9,rax
   51e21:	mov    QWORD PTR [rsp+0x8],rax
   51e26:	shr    r9,0x16
   51e2a:	mov    r12d,r9d
   51e2d:	and    r12d,0x1
   51e31:	mov    rax,QWORD PTR [rsp+0x30]
   51e36:	xor    ebx,ebx
   51e38:	lea    rbp,[rsp+0x48]
   51e3d:	cmp    QWORD PTR [rax],0x0
   51e41:	jg     51e88 <re_compile_fastmap_iter.isra.0+0xb8>
   51e43:	jmp    51fdb <re_compile_fastmap_iter.isra.0+0x20b>
   51e48:	nop    DWORD PTR [rax+rax*1+0x0]
   51e50:	cmp    ecx,0x3
   51e53:	je     5214e <re_compile_fastmap_iter.isra.0+0x37e>
   51e59:	cmp    ecx,0x6
   51e5c:	je     52004 <re_compile_fastmap_iter.isra.0+0x234>
   51e62:	and    eax,0xfffffffd
   51e65:	cmp    al,0x5
   51e67:	je     521e7 <re_compile_fastmap_iter.isra.0+0x417>
   51e6d:	cmp    ecx,0x2
   51e70:	je     52268 <re_compile_fastmap_iter.isra.0+0x498>
   51e76:	mov    rax,QWORD PTR [rsp+0x30]
   51e7b:	add    rbx,0x1
   51e7f:	cmp    rbx,QWORD PTR [rax]
   51e82:	jge    51fdb <re_compile_fastmap_iter.isra.0+0x20b>
   51e88:	mov    rax,QWORD PTR [rsp+0x38]
   51e8d:	mov    rax,QWORD PTR [rax]
   51e90:	mov    r14,QWORD PTR [rax+rbx*8]
   51e94:	mov    rax,QWORD PTR [rsp+0x10]
   51e99:	mov    rdx,QWORD PTR [rax]
   51e9c:	mov    rax,r14
   51e9f:	shl    rax,0x4
   51ea3:	lea    rsi,[rdx+rax*1]
   51ea7:	mov    QWORD PTR [rsp+0x20],rax
   51eac:	movzx  ecx,BYTE PTR [rsi+0x8]
   51eb0:	mov    eax,ecx
   51eb2:	cmp    cl,0x1
   51eb5:	jne    51e50 <re_compile_fastmap_iter.isra.0+0x80>
   51eb7:	movzx  edx,BYTE PTR [rsi]
   51eba:	mov    BYTE PTR [r15+rdx*1],0x1
   51ebf:	mov    QWORD PTR [rsp+0x8],rdx
   51ec4:	test   r12d,r12d
   51ec7:	je     51edf <re_compile_fastmap_iter.isra.0+0x10f>
   51ec9:	call   c860 <__ctype_tolower_loc@plt>
   51ece:	mov    rdx,QWORD PTR [rsp+0x8]
   51ed3:	mov    rax,QWORD PTR [rax]
   51ed6:	movsxd rax,DWORD PTR [rax+rdx*4]
   51eda:	mov    BYTE PTR [r15+rax*1],0x1
   51edf:	mov    rax,QWORD PTR [rsp+0x28]
   51ee4:	test   BYTE PTR [rax+0x1a],0x40
   51ee8:	je     51e76 <re_compile_fastmap_iter.isra.0+0xa6>
   51eea:	mov    rax,QWORD PTR [rsp+0x10]
   51eef:	cmp    DWORD PTR [rax+0xb4],0x1
   51ef6:	jle    51e76 <re_compile_fastmap_iter.isra.0+0xa6>
   51efc:	mov    rdx,QWORD PTR [rax]
   51eff:	mov    rcx,rax
   51f02:	mov    rax,QWORD PTR [rsp+0x20]
   51f07:	lea    rsi,[rsp+0x51]
   51f0c:	movzx  eax,BYTE PTR [rdx+rax*1]
   51f10:	mov    BYTE PTR [rsp+0x50],al
   51f14:	lea    rax,[r14+0x1]
   51f18:	cmp    rax,QWORD PTR [rcx+0x10]
   51f1c:	jb     51f49 <re_compile_fastmap_iter.isra.0+0x179>
   51f1e:	jmp    522e5 <re_compile_fastmap_iter.isra.0+0x515>
   51f23:	nop    DWORD PTR [rax+rax*1+0x0]
   51f28:	movzx  edx,BYTE PTR [rdx]
   51f2b:	add    rsi,0x1
   51f2f:	add    rax,0x1
   51f33:	mov    BYTE PTR [rsi-0x1],dl
   51f36:	mov    rdx,QWORD PTR [rsp+0x10]
   51f3b:	cmp    QWORD PTR [rdx+0x10],rax
   51f3f:	jbe    51f64 <re_compile_fastmap_iter.isra.0+0x194>
   51f41:	mov    rcx,QWORD PTR [rsp+0x10]
   51f46:	mov    rdx,QWORD PTR [rcx]
   51f49:	mov    rcx,rax
   51f4c:	shl    rcx,0x4
   51f50:	add    rdx,rcx
   51f53:	mov    ecx,DWORD PTR [rdx+0x8]
   51f56:	and    ecx,0x2000ff
   51f5c:	cmp    ecx,0x200001
   51f62:	je     51f28 <re_compile_fastmap_iter.isra.0+0x158>
   51f64:	lea    rax,[rsp+0x50]
   51f69:	mov    QWORD PTR [rsp+0x8],rax
   51f6e:	sub    rsi,rax
   51f71:	mov    r13,rsi
   51f74:	lea    r14,[rsp+0x44]
   51f79:	mov    rsi,QWORD PTR [rsp+0x8]
   51f7e:	mov    rcx,rbp
   51f81:	mov    rdx,r13
   51f84:	mov    rdi,r14
   51f87:	mov    QWORD PTR [rbp+0x0],0x0
   51f8f:	call   4bee0 <rpl_mbrtowc>
   51f94:	cmp    rax,r13
   51f97:	jne    51e76 <re_compile_fastmap_iter.isra.0+0xa6>
   51f9d:	mov    edi,DWORD PTR [rsp+0x44]
   51fa1:	call   c610 <towlower@plt>
   51fa6:	mov    rdi,QWORD PTR [rsp+0x8]
   51fab:	mov    rdx,rbp
   51fae:	mov    esi,eax
   51fb0:	call   c650 <wcrtomb@plt>
   51fb5:	cmp    rax,0xffffffffffffffff
   51fb9:	je     51e76 <re_compile_fastmap_iter.isra.0+0xa6>
   51fbf:	movzx  eax,BYTE PTR [rsp+0x50]
   51fc4:	add    rbx,0x1
   51fc8:	mov    BYTE PTR [r15+rax*1],0x1
   51fcd:	mov    rax,QWORD PTR [rsp+0x30]
   51fd2:	cmp    rbx,QWORD PTR [rax]
   51fd5:	jl     51e88 <re_compile_fastmap_iter.isra.0+0xb8>
   51fdb:	mov    rax,QWORD PTR [rsp+0x158]
   51fe3:	xor    rax,QWORD PTR fs:0x28
   51fec:	jne    522fa <re_compile_fastmap_iter.isra.0+0x52a>
   51ff2:	add    rsp,0x168
   51ff9:	pop    rbx
   51ffa:	pop    rbp
   51ffb:	pop    r12
   51ffd:	pop    r13
   51fff:	pop    r14
   52001:	pop    r15
   52003:	ret    
   52004:	mov    rax,QWORD PTR [rsp+0x10]
   52009:	mov    r14,QWORD PTR [rsi]
   5200c:	cmp    DWORD PTR [rax+0xb4],0x1
   52013:	jle    52036 <re_compile_fastmap_iter.isra.0+0x266>
   52015:	cmp    QWORD PTR [r14+0x48],0x0
   5201a:	jne    5210b <re_compile_fastmap_iter.isra.0+0x33b>
   52020:	test   BYTE PTR [r14+0x20],0x1
   52025:	jne    5210b <re_compile_fastmap_iter.isra.0+0x33b>
   5202b:	cmp    QWORD PTR [r14+0x40],0x0
   52030:	jne    5210b <re_compile_fastmap_iter.isra.0+0x33b>
   52036:	xor    r13d,r13d
   52039:	lea    rax,[rsp+0x50]
   5203e:	cmp    QWORD PTR [r14+0x28],0x0
   52043:	mov    QWORD PTR [rsp+0x8],rax
   52048:	jg     5205e <re_compile_fastmap_iter.isra.0+0x28e>
   5204a:	jmp    51e76 <re_compile_fastmap_iter.isra.0+0xa6>
   5204f:	nop
   52050:	add    r13,0x1
   52054:	cmp    r13,QWORD PTR [r14+0x28]
   52058:	jge    51e76 <re_compile_fastmap_iter.isra.0+0xa6>
   5205e:	lea    rax,[r13*4+0x0]
   52066:	mov    QWORD PTR [rbp+0x0],0x0
   5206e:	mov    rdi,QWORD PTR [rsp+0x8]
   52073:	mov    rdx,rbp
   52076:	mov    QWORD PTR [rsp+0x18],rax
   5207b:	mov    rax,QWORD PTR [r14]
   5207e:	mov    esi,DWORD PTR [rax+r13*4]
   52082:	call   c650 <wcrtomb@plt>
   52087:	cmp    rax,0xffffffffffffffff
   5208b:	je     520b7 <re_compile_fastmap_iter.isra.0+0x2e7>
   5208d:	movzx  edx,BYTE PTR [rsp+0x50]
   52092:	mov    BYTE PTR [r15+rdx*1],0x1
   52097:	mov    QWORD PTR [rsp+0x18],rdx
   5209c:	test   r12d,r12d
   5209f:	je     520b7 <re_compile_fastmap_iter.isra.0+0x2e7>
   520a1:	call   c860 <__ctype_tolower_loc@plt>
   520a6:	mov    rdx,QWORD PTR [rsp+0x18]
   520ab:	mov    rax,QWORD PTR [rax]
   520ae:	movsxd rax,DWORD PTR [rax+rdx*4]
   520b2:	mov    BYTE PTR [r15+rax*1],0x1
   520b7:	mov    rax,QWORD PTR [rsp+0x28]
   520bc:	test   BYTE PTR [rax+0x1a],0x40
   520c0:	je     52050 <re_compile_fastmap_iter.isra.0+0x280>
   520c2:	mov    rax,QWORD PTR [rsp+0x10]
   520c7:	cmp    DWORD PTR [rax+0xb4],0x1
   520ce:	jle    52050 <re_compile_fastmap_iter.isra.0+0x280>
   520d0:	mov    rax,QWORD PTR [r14]
   520d3:	lea    rdx,[r13*4+0x0]
   520db:	mov    edi,DWORD PTR [rax+rdx*1]
   520de:	call   c610 <towlower@plt>
   520e3:	mov    rdi,QWORD PTR [rsp+0x8]
   520e8:	mov    rdx,rbp
   520eb:	mov    esi,eax
   520ed:	call   c650 <wcrtomb@plt>
   520f2:	cmp    rax,0xffffffffffffffff
   520f6:	je     52050 <re_compile_fastmap_iter.isra.0+0x280>
   520fc:	movzx  eax,BYTE PTR [rsp+0x50]
   52101:	mov    BYTE PTR [r15+rax*1],0x1
   52106:	jmp    52050 <re_compile_fastmap_iter.isra.0+0x280>
   5210b:	mov    BYTE PTR [rsp+0x44],0x0
   52110:	lea    r14,[rsp+0x44]
   52115:	nop    DWORD PTR [rax]
   52118:	xor    edi,edi
   5211a:	mov    rcx,rbp
   5211d:	mov    edx,0x1
   52122:	mov    rsi,r14
   52125:	mov    QWORD PTR [rbp+0x0],0x0
   5212d:	call   4bee0 <rpl_mbrtowc>
   52132:	cmp    rax,0xfffffffffffffffe
   52136:	jne    52142 <re_compile_fastmap_iter.isra.0+0x372>
   52138:	movzx  eax,BYTE PTR [rsp+0x44]
   5213d:	mov    BYTE PTR [r15+rax*1],0x1
   52142:	add    BYTE PTR [rsp+0x44],0x1
   52147:	jne    52118 <re_compile_fastmap_iter.isra.0+0x348>
   52149:	jmp    51e76 <re_compile_fastmap_iter.isra.0+0xa6>
   5214e:	mov    QWORD PTR [rsp+0x18],0x0
   52157:	mov    rax,QWORD PTR [rsp+0x20]
   5215c:	mov    rcx,QWORD PTR [rsp+0x18]
   52161:	xor    r14d,r14d
   52164:	mov    rax,QWORD PTR [rdx+rax*1]
   52168:	lea    r13,[rcx*8+0x0]
   52170:	mov    rsi,QWORD PTR [rax+rcx*1]
   52174:	nop    DWORD PTR [rax+0x0]
   52178:	bt     rsi,r14
   5217c:	jae    521b7 <re_compile_fastmap_iter.isra.0+0x3e7>
   5217e:	mov    BYTE PTR [r15+r13*1],0x1
   52183:	lea    rax,[r15+r13*1]
   52187:	test   r12d,r12d
   5218a:	je     521b7 <re_compile_fastmap_iter.isra.0+0x3e7>
   5218c:	lea    edi,[r13+0x80]
   52193:	cmp    edi,0x17f
   52199:	ja     521b4 <re_compile_fastmap_iter.isra.0+0x3e4>
   5219b:	mov    QWORD PTR [rsp+0x8],rsi
   521a0:	call   c860 <__ctype_tolower_loc@plt>
   521a5:	mov    rsi,QWORD PTR [rsp+0x8]
   521aa:	mov    rax,QWORD PTR [rax]
   521ad:	movsxd rax,DWORD PTR [rax+r13*4]
   521b1:	add    rax,r15
   521b4:	mov    BYTE PTR [rax],0x1
   521b7:	add    r14d,0x1
   521bb:	add    r13,0x1
   521bf:	cmp    r14d,0x40
   521c3:	jne    52178 <re_compile_fastmap_iter.isra.0+0x3a8>
   521c5:	add    QWORD PTR [rsp+0x18],0x8
   521cb:	mov    rax,QWORD PTR [rsp+0x18]
   521d0:	cmp    rax,0x20
   521d4:	je     51e76 <re_compile_fastmap_iter.isra.0+0xa6>
   521da:	mov    rax,QWORD PTR [rsp+0x10]
   521df:	mov    rdx,QWORD PTR [rax]
   521e2:	jmp    52157 <re_compile_fastmap_iter.isra.0+0x387>
   521e7:	movdqa xmm0,XMMWORD PTR [rip+0x1e211]        # 70400 <__re_error_msgid+0x180>
   521ef:	movups XMMWORD PTR [r15],xmm0
   521f3:	movups XMMWORD PTR [r15+0x10],xmm0
   521f8:	movups XMMWORD PTR [r15+0x20],xmm0
   521fd:	movups XMMWORD PTR [r15+0x30],xmm0
   52202:	movups XMMWORD PTR [r15+0x40],xmm0
   52207:	movups XMMWORD PTR [r15+0x50],xmm0
   5220c:	movups XMMWORD PTR [r15+0x60],xmm0
   52211:	movups XMMWORD PTR [r15+0x70],xmm0
   52216:	movups XMMWORD PTR [r15+0x80],xmm0
   5221e:	movups XMMWORD PTR [r15+0x90],xmm0
   52226:	movups XMMWORD PTR [r15+0xa0],xmm0
   5222e:	movups XMMWORD PTR [r15+0xb0],xmm0
   52236:	movups XMMWORD PTR [r15+0xc0],xmm0
   5223e:	movups XMMWORD PTR [r15+0xd0],xmm0
   52246:	movups XMMWORD PTR [r15+0xe0],xmm0
   5224e:	movups XMMWORD PTR [r15+0xf0],xmm0
   52256:	cmp    ecx,0x2
   52259:	jne    51fdb <re_compile_fastmap_iter.isra.0+0x20b>
   5225f:	jmp    522d7 <re_compile_fastmap_iter.isra.0+0x507>
   52261:	nop    DWORD PTR [rax+0x0]
   52268:	movdqa xmm0,XMMWORD PTR [rip+0x1e190]        # 70400 <__re_error_msgid+0x180>
   52270:	movups XMMWORD PTR [r15],xmm0
   52274:	movups XMMWORD PTR [r15+0x10],xmm0
   52279:	movups XMMWORD PTR [r15+0x20],xmm0
   5227e:	movups XMMWORD PTR [r15+0x30],xmm0
   52283:	movups XMMWORD PTR [r15+0x40],xmm0
   52288:	movups XMMWORD PTR [r15+0x50],xmm0
   5228d:	movups XMMWORD PTR [r15+0x60],xmm0
   52292:	movups XMMWORD PTR [r15+0x70],xmm0
   52297:	movups XMMWORD PTR [r15+0x80],xmm0
   5229f:	movups XMMWORD PTR [r15+0x90],xmm0
   522a7:	movups XMMWORD PTR [r15+0xa0],xmm0
   522af:	movups XMMWORD PTR [r15+0xb0],xmm0
   522b7:	movups XMMWORD PTR [r15+0xc0],xmm0
   522bf:	movups XMMWORD PTR [r15+0xd0],xmm0
   522c7:	movups XMMWORD PTR [r15+0xe0],xmm0
   522cf:	movups XMMWORD PTR [r15+0xf0],xmm0
   522d7:	mov    rax,QWORD PTR [rsp+0x28]
   522dc:	or     BYTE PTR [rax+0x38],0x1
   522e0:	jmp    51fdb <re_compile_fastmap_iter.isra.0+0x20b>
   522e5:	lea    rax,[rsp+0x50]
   522ea:	mov    r13d,0x1
   522f0:	mov    QWORD PTR [rsp+0x8],rax
   522f5:	jmp    51f74 <re_compile_fastmap_iter.isra.0+0x1a4>
   522fa:	call   c7b0 <__stack_chk_fail@plt>
   522ff:	nop

0000000000052300 <check_node_accept_bytes.isra.0>:
   52300:	push   r13
   52302:	shl    rdx,0x4
   52306:	mov    r9,rcx
   52309:	push   r12
   5230b:	lea    r10,[rdi+rdx*1]
   5230f:	push   rbp
   52310:	push   rbx
   52311:	sub    rsp,0x8
   52315:	movzx  r11d,BYTE PTR [r10+0x8]
   5231a:	cmp    r11b,0x7
   5231e:	je     523f8 <check_node_accept_bytes.isra.0+0xf8>
   52324:	cmp    DWORD PTR [rcx+0x90],0x1
   5232b:	je     52350 <check_node_accept_bytes.isra.0+0x50>
   5232d:	mov    rbx,rsi
   52330:	mov    rdi,rcx
   52333:	mov    rsi,r8
   52336:	call   4db10 <re_string_char_size_at.part.0>
   5233b:	mov    r12d,eax
   5233e:	cmp    r11b,0x5
   52342:	je     52368 <check_node_accept_bytes.isra.0+0x68>
   52344:	cmp    r11b,0x6
   52348:	jne    52350 <check_node_accept_bytes.isra.0+0x50>
   5234a:	cmp    eax,0x1
   5234d:	jne    52390 <check_node_accept_bytes.isra.0+0x90>
   5234f:	nop
   52350:	xor    r12d,r12d
   52353:	add    rsp,0x8
   52357:	mov    eax,r12d
   5235a:	pop    rbx
   5235b:	pop    rbp
   5235c:	pop    r12
   5235e:	pop    r13
   52360:	ret    
   52361:	nop    DWORD PTR [rax+0x0]
   52368:	cmp    eax,0x1
   5236b:	je     52350 <check_node_accept_bytes.isra.0+0x50>
   5236d:	mov    rax,QWORD PTR [rbx]
   52370:	test   al,0x40
   52372:	jne    5237f <check_node_accept_bytes.isra.0+0x7f>
   52374:	mov    rdx,QWORD PTR [r9+0x8]
   52378:	cmp    BYTE PTR [rdx+r8*1],0xa
   5237d:	je     52350 <check_node_accept_bytes.isra.0+0x50>
   5237f:	test   al,0x80
   52381:	je     52353 <check_node_accept_bytes.isra.0+0x53>
   52383:	mov    rax,QWORD PTR [r9+0x8]
   52387:	cmp    BYTE PTR [rax+r8*1],0x0
   5238c:	je     52350 <check_node_accept_bytes.isra.0+0x50>
   5238e:	jmp    52353 <check_node_accept_bytes.isra.0+0x53>
   52390:	mov    r13,QWORD PTR [r10]
   52393:	mov    rsi,QWORD PTR [r13+0x40]
   52397:	mov    rdx,QWORD PTR [r13+0x28]
   5239b:	test   rsi,rsi
   5239e:	jne    523ad <check_node_accept_bytes.isra.0+0xad>
   523a0:	mov    rax,rdx
   523a3:	or     rax,QWORD PTR [r13+0x48]
   523a7:	je     524fb <check_node_accept_bytes.isra.0+0x1fb>
   523ad:	mov    rax,QWORD PTR [r9+0x10]
   523b1:	mov    ebx,DWORD PTR [rax+r8*4]
   523b5:	test   rdx,rdx
   523b8:	jle    52490 <check_node_accept_bytes.isra.0+0x190>
   523be:	mov    rcx,QWORD PTR [r13+0x0]
   523c2:	xor    eax,eax
   523c4:	jmp    523dd <check_node_accept_bytes.isra.0+0xdd>
   523c6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   523d0:	add    rax,0x1
   523d4:	cmp    rax,rdx
   523d7:	je     52490 <check_node_accept_bytes.isra.0+0x190>
   523dd:	cmp    ebx,DWORD PTR [rcx+rax*4]
   523e0:	jne    523d0 <check_node_accept_bytes.isra.0+0xd0>
   523e2:	test   BYTE PTR [r13+0x20],0x1
   523e7:	jne    52350 <check_node_accept_bytes.isra.0+0x50>
   523ed:	jmp    52353 <check_node_accept_bytes.isra.0+0x53>
   523f2:	nop    WORD PTR [rax+rax*1+0x0]
   523f8:	mov    rax,QWORD PTR [rcx+0x8]
   523fc:	movzx  edx,BYTE PTR [rax+r8*1]
   52401:	cmp    dl,0xc1
   52404:	jbe    52350 <check_node_accept_bytes.isra.0+0x50>
   5240a:	mov    rsi,QWORD PTR [r9+0x58]
   5240e:	lea    rcx,[r8+0x1]
   52412:	cmp    rcx,rsi
   52415:	jge    52350 <check_node_accept_bytes.isra.0+0x50>
   5241b:	movzx  edi,BYTE PTR [rax+r8*1+0x1]
   52421:	cmp    dl,0xdf
   52424:	jbe    5252f <check_node_accept_bytes.isra.0+0x22f>
   5242a:	cmp    dl,0xef
   5242d:	ja     5250b <check_node_accept_bytes.isra.0+0x20b>
   52433:	cmp    dl,0xe0
   52436:	jne    52442 <check_node_accept_bytes.isra.0+0x142>
   52438:	cmp    dil,0x9f
   5243c:	jbe    52350 <check_node_accept_bytes.isra.0+0x50>
   52442:	mov    edi,0x3
   52447:	mov    r12d,0x3
   5244d:	lea    rdx,[r8+rdi*1]
   52451:	cmp    rsi,rdx
   52454:	jl     52350 <check_node_accept_bytes.isra.0+0x50>
   5245a:	lea    rdx,[rax+rcx*1]
   5245e:	add    rax,r8
   52461:	add    rax,rdi
   52464:	jmp    5247d <check_node_accept_bytes.isra.0+0x17d>
   52466:	nop    WORD PTR cs:[rax+rax*1+0x0]
   52470:	add    rdx,0x1
   52474:	cmp    rax,rdx
   52477:	je     52353 <check_node_accept_bytes.isra.0+0x53>
   5247d:	movzx  ebx,BYTE PTR [rdx]
   52480:	lea    ecx,[rbx-0x80]
   52483:	cmp    cl,0x3f
   52486:	jbe    52470 <check_node_accept_bytes.isra.0+0x170>
   52488:	jmp    52350 <check_node_accept_bytes.isra.0+0x50>
   5248d:	nop    DWORD PTR [rax]
   52490:	mov    rax,QWORD PTR [r13+0x48]
   52494:	test   rax,rax
   52497:	jle    524cc <check_node_accept_bytes.isra.0+0x1cc>
   52499:	xor    ebp,ebp
   5249b:	jmp    524aa <check_node_accept_bytes.isra.0+0x1aa>
   5249d:	nop    DWORD PTR [rax]
   524a0:	add    rbp,0x1
   524a4:	cmp    rbp,QWORD PTR [r13+0x48]
   524a8:	jge    524c8 <check_node_accept_bytes.isra.0+0x1c8>
   524aa:	mov    rax,QWORD PTR [r13+0x18]
   524ae:	mov    edi,ebx
   524b0:	mov    rsi,QWORD PTR [rax+rbp*8]
   524b4:	call   c380 <iswctype@plt>
   524b9:	test   eax,eax
   524bb:	je     524a0 <check_node_accept_bytes.isra.0+0x1a0>
   524bd:	jmp    523e2 <check_node_accept_bytes.isra.0+0xe2>
   524c2:	nop    WORD PTR [rax+rax*1+0x0]
   524c8:	mov    rsi,QWORD PTR [r13+0x40]
   524cc:	test   rsi,rsi
   524cf:	jle    524fb <check_node_accept_bytes.isra.0+0x1fb>
   524d1:	mov    rdx,QWORD PTR [r13+0x8]
   524d5:	xor    eax,eax
   524d7:	nop    WORD PTR [rax+rax*1+0x0]
   524e0:	cmp    ebx,DWORD PTR [rdx+rax*4]
   524e3:	jl     524f2 <check_node_accept_bytes.isra.0+0x1f2>
   524e5:	mov    rcx,QWORD PTR [r13+0x10]
   524e9:	cmp    ebx,DWORD PTR [rcx+rax*4]
   524ec:	jle    523e2 <check_node_accept_bytes.isra.0+0xe2>
   524f2:	add    rax,0x1
   524f6:	cmp    rax,rsi
   524f9:	jne    524e0 <check_node_accept_bytes.isra.0+0x1e0>
   524fb:	test   BYTE PTR [r13+0x20],0x1
   52500:	jne    52353 <check_node_accept_bytes.isra.0+0x53>
   52506:	jmp    52350 <check_node_accept_bytes.isra.0+0x50>
   5250b:	cmp    dl,0xf7
   5250e:	ja     52547 <check_node_accept_bytes.isra.0+0x247>
   52510:	cmp    dl,0xf0
   52513:	jne    5251f <check_node_accept_bytes.isra.0+0x21f>
   52515:	cmp    dil,0x8f
   52519:	jbe    52350 <check_node_accept_bytes.isra.0+0x50>
   5251f:	mov    edi,0x4
   52524:	mov    r12d,0x4
   5252a:	jmp    5244d <check_node_accept_bytes.isra.0+0x14d>
   5252f:	add    edi,0xffffff80
   52532:	mov    r12d,0x2
   52538:	cmp    dil,0x3f
   5253c:	jbe    52353 <check_node_accept_bytes.isra.0+0x53>
   52542:	jmp    52350 <check_node_accept_bytes.isra.0+0x50>
   52547:	cmp    dl,0xfb
   5254a:	ja     5256b <check_node_accept_bytes.isra.0+0x26b>
   5254c:	cmp    dl,0xf8
   5254f:	jne    5255b <check_node_accept_bytes.isra.0+0x25b>
   52551:	cmp    dil,0x87
   52555:	jbe    52350 <check_node_accept_bytes.isra.0+0x50>
   5255b:	mov    edi,0x5
   52560:	mov    r12d,0x5
   52566:	jmp    5244d <check_node_accept_bytes.isra.0+0x14d>
   5256b:	cmp    dl,0xfd
   5256e:	ja     52350 <check_node_accept_bytes.isra.0+0x50>
   52574:	cmp    dl,0xfc
   52577:	jne    52583 <check_node_accept_bytes.isra.0+0x283>
   52579:	cmp    dil,0x83
   5257d:	jbe    52350 <check_node_accept_bytes.isra.0+0x50>
   52583:	mov    edi,0x6
   52588:	mov    r12d,0x6
   5258e:	jmp    5244d <check_node_accept_bytes.isra.0+0x14d>
   52593:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5259e:	xchg   ax,ax

00000000000525a0 <check_arrival>:
   525a0:	push   r15
   525a2:	push   r14
   525a4:	push   r13
   525a6:	push   r12
   525a8:	mov    r12,rdi
   525ab:	push   rbp
   525ac:	mov    rbp,rdx
   525af:	push   rbx
   525b0:	mov    rbx,rcx
   525b3:	sub    rsp,0xd8
   525ba:	mov    rdx,QWORD PTR [rdi+0x98]
   525c1:	mov    r13,QWORD PTR [rsi+0x8]
   525c5:	mov    QWORD PTR [rsp+0x60],rsi
   525ca:	mov    QWORD PTR [rsp+0x78],r8
   525cf:	mov    QWORD PTR [rsp+0x48],r9
   525d4:	mov    rax,QWORD PTR fs:0x28
   525dd:	mov    QWORD PTR [rsp+0xc8],rax
   525e5:	xor    eax,eax
   525e7:	mov    rax,rbp
   525ea:	mov    QWORD PTR [rsp+0x40],rdx
   525ef:	mov    DWORD PTR [rsp+0x88],0x0
   525fa:	shl    rax,0x4
   525fe:	add    rax,QWORD PTR [rdx]
   52601:	mov    rax,QWORD PTR [rax]
   52604:	mov    QWORD PTR [rsp+0x50],rax
   52609:	movsxd rax,DWORD PTR [rdi+0xe0]
   52610:	add    rax,r9
   52613:	cmp    rax,r13
   52616:	jge    52c70 <check_arrival+0x6d0>
   5261c:	mov    rcx,QWORD PTR [r12+0xb8]
   52624:	mov    rax,QWORD PTR [rsp+0x60]
   52629:	mov    edx,DWORD PTR [r12+0xa0]
   52631:	mov    r15,QWORD PTR [rax]
   52634:	mov    r13,QWORD PTR [rax+0x10]
   52638:	mov    QWORD PTR [rsp+0x68],rcx
   5263d:	mov    rcx,QWORD PTR [r12+0x48]
   52642:	mov    QWORD PTR [r12+0xb8],r13
   5264a:	mov    QWORD PTR [rsp+0x70],rcx
   5264f:	test   r15,r15
   52652:	je     52bd8 <check_arrival+0x638>
   52658:	mov    QWORD PTR [r12+0x48],r15
   5265d:	lea    rsi,[r15-0x1]
   52661:	mov    rdi,r12
   52664:	call   50650 <re_string_context_at>
   52669:	mov    r9d,eax
   5266c:	cmp    r15,rbx
   5266f:	je     52bec <check_arrival+0x64c>
   52675:	mov    r14,QWORD PTR [r13+r15*8+0x0]
   5267a:	test   r14,r14
   5267d:	je     5268a <check_arrival+0xea>
   5267f:	test   BYTE PTR [r14+0x68],0x40
   52684:	jne    52a70 <check_arrival+0x4d0>
   5268a:	mov    QWORD PTR [rsp+0xa0],0x0
   52696:	pxor   xmm0,xmm0
   5269a:	movaps XMMWORD PTR [rsp+0x90],xmm0
   526a2:	cmp    r15,QWORD PTR [rsp+0x48]
   526a7:	jge    529de <check_arrival+0x43e>
   526ad:	lea    r13,[r15+0x1]
   526b1:	lea    rax,[rsp+0x90]
   526b9:	mov    QWORD PTR [rsp+0x30],0x0
   526c2:	mov    QWORD PTR [rsp+0x18],rax
   526c7:	mov    QWORD PTR [rsp+0x10],r13
   526cc:	mov    rax,QWORD PTR [rsp+0x10]
   526d1:	lea    r15,[rax-0x1]
   526d5:	movsxd rax,DWORD PTR [r12+0xe0]
   526dd:	cmp    QWORD PTR [rsp+0x30],rax
   526e2:	jg     529de <check_arrival+0x43e>
   526e8:	mov    rbx,QWORD PTR [rsp+0x10]
   526ed:	mov    QWORD PTR [rsp+0x98],0x0
   526f9:	lea    rax,[rbx*8+0x0]
   52701:	mov    QWORD PTR [rsp+0x38],rax
   52706:	mov    rax,QWORD PTR [r12+0xb8]
   5270e:	mov    rsi,QWORD PTR [rax+rbx*8]
   52712:	test   rsi,rsi
   52715:	je     52b38 <check_arrival+0x598>
   5271b:	mov    rdi,QWORD PTR [rsp+0x18]
   52720:	add    rsi,0x8
   52724:	call   4dfe0 <re_node_set_merge>
   52729:	mov    DWORD PTR [rsp+0x88],eax
   52730:	test   eax,eax
   52732:	jne    52b68 <check_arrival+0x5c8>
   52738:	test   r14,r14
   5273b:	je     52910 <check_arrival+0x370>
   52741:	lea    rax,[rsp+0xb0]
   52749:	pxor   xmm0,xmm0
   5274d:	cmp    QWORD PTR [r14+0x28],0x0
   52752:	mov    DWORD PTR [rsp+0x8c],0x0
   5275d:	mov    QWORD PTR [rsp+0x28],rax
   52762:	mov    rbp,QWORD PTR [r12+0x98]
   5276a:	mov    QWORD PTR [rsp+0xc0],0x0
   52776:	movaps XMMWORD PTR [rsp+0xb0],xmm0
   5277e:	jle    52d38 <check_arrival+0x798>
   52784:	mov    QWORD PTR [rsp+0x8],0x0
   5278d:	mov    rbx,r14
   52790:	jmp    527e8 <check_arrival+0x248>
   52792:	nop    WORD PTR [rax+rax*1+0x0]
   52798:	mov    rdx,r15
   5279b:	mov    rdi,r12
   5279e:	call   50740 <check_node_accept>
   527a3:	test   al,al
   527a5:	je     527d3 <check_arrival+0x233>
   527a7:	lea    rax,[r13*8+0x0]
   527af:	mov    QWORD PTR [rsp+0x20],rax
   527b4:	mov    rax,QWORD PTR [rbp+0x18]
   527b8:	mov    rcx,QWORD PTR [rsp+0x20]
   527bd:	mov    rdi,QWORD PTR [rsp+0x18]
   527c2:	mov    rsi,QWORD PTR [rax+rcx*1]
   527c6:	call   4c580 <re_node_set_insert>
   527cb:	test   al,al
   527cd:	je     52b50 <check_arrival+0x5b0>
   527d3:	add    QWORD PTR [rsp+0x8],0x1
   527d9:	mov    rax,QWORD PTR [rsp+0x8]
   527de:	cmp    rax,QWORD PTR [rbx+0x28]
   527e2:	jge    52b88 <check_arrival+0x5e8>
   527e8:	mov    rax,QWORD PTR [rbx+0x30]
   527ec:	mov    rcx,QWORD PTR [rsp+0x8]
   527f1:	mov    rdi,QWORD PTR [rbp+0x0]
   527f5:	mov    r13,QWORD PTR [rax+rcx*8]
   527f9:	mov    r14,r13
   527fc:	shl    r14,0x4
   52800:	lea    rsi,[rdi+r14*1]
   52804:	test   BYTE PTR [rsi+0xa],0x10
   52808:	je     52798 <check_arrival+0x1f8>
   5280a:	lea    rsi,[rbp+0xd8]
   52811:	mov    r8,r15
   52814:	mov    rcx,r12
   52817:	mov    rdx,r13
   5281a:	call   52300 <check_node_accept_bytes.isra.0>
   5281f:	cmp    eax,0x1
   52822:	jle    52b20 <check_arrival+0x580>
   52828:	cdqe   
   5282a:	lea    rdx,[r13*8+0x0]
   52832:	lea    r14,[rax+r15*1]
   52836:	mov    rax,QWORD PTR [r12+0xb8]
   5283e:	mov    QWORD PTR [rsp+0x20],rdx
   52843:	mov    rdx,QWORD PTR [rbp+0x18]
   52847:	mov    rsi,QWORD PTR [rax+r14*8]
   5284b:	mov    r8,QWORD PTR [rdx+r13*8]
   5284f:	lea    r13,[r14*8+0x0]
   52857:	mov    QWORD PTR [rsp+0xb8],0x0
   52863:	test   rsi,rsi
   52866:	je     5288b <check_arrival+0x2eb>
   52868:	mov    rdi,QWORD PTR [rsp+0x28]
   5286d:	add    rsi,0x8
   52871:	mov    QWORD PTR [rsp+0x58],r8
   52876:	call   4dfe0 <re_node_set_merge>
   5287b:	mov    r8,QWORD PTR [rsp+0x58]
   52880:	test   eax,eax
   52882:	mov    DWORD PTR [rsp+0x8c],eax
   52889:	jne    528e8 <check_arrival+0x348>
   5288b:	mov    rdi,QWORD PTR [rsp+0x28]
   52890:	mov    rsi,r8
   52893:	call   4c580 <re_node_set_insert>
   52898:	test   al,al
   5289a:	je     52b50 <check_arrival+0x5b0>
   528a0:	mov    rdx,QWORD PTR [rsp+0x28]
   528a5:	lea    rdi,[rsp+0x8c]
   528ad:	mov    rsi,rbp
   528b0:	add    r13,QWORD PTR [r12+0xb8]
   528b8:	call   4f150 <re_acquire_state>
   528bd:	mov    QWORD PTR [r13+0x0],rax
   528c1:	mov    rax,QWORD PTR [r12+0xb8]
   528c9:	cmp    QWORD PTR [rax+r14*8],0x0
   528ce:	jne    527b4 <check_arrival+0x214>
   528d4:	mov    edx,DWORD PTR [rsp+0x8c]
   528db:	test   edx,edx
   528dd:	je     527b4 <check_arrival+0x214>
   528e3:	nop    DWORD PTR [rax+rax*1+0x0]
   528e8:	mov    rdi,QWORD PTR [rsp+0xc0]
   528f0:	call   4bdc0 <rpl_free>
   528f5:	mov    eax,DWORD PTR [rsp+0x8c]
   528fc:	mov    DWORD PTR [rsp+0x88],eax
   52903:	test   eax,eax
   52905:	jne    52b68 <check_arrival+0x5c8>
   5290b:	nop    DWORD PTR [rax+rax*1+0x0]
   52910:	cmp    QWORD PTR [rsp+0x98],0x0
   52919:	mov    rbx,QWORD PTR [rsp+0x10]
   5291e:	je     52978 <check_arrival+0x3d8>
   52920:	mov    ecx,DWORD PTR [rsp+0x110]
   52927:	mov    rdx,QWORD PTR [rsp+0x50]
   5292c:	mov    rsi,QWORD PTR [rsp+0x18]
   52931:	mov    rdi,QWORD PTR [rsp+0x40]
   52936:	call   4e450 <check_arrival_expand_ecl>
   5293b:	mov    DWORD PTR [rsp+0x88],eax
   52942:	test   eax,eax
   52944:	jne    52b68 <check_arrival+0x5c8>
   5294a:	mov    r8d,DWORD PTR [rsp+0x110]
   52952:	mov    rcx,QWORD PTR [rsp+0x50]
   52957:	mov    rdi,r12
   5295a:	mov    rdx,QWORD PTR [rsp+0x10]
   5295f:	mov    rsi,QWORD PTR [rsp+0x18]
   52964:	call   4f420 <expand_bkref_cache>
   52969:	mov    DWORD PTR [rsp+0x88],eax
   52970:	test   eax,eax
   52972:	jne    52b68 <check_arrival+0x5c8>
   52978:	mov    edx,DWORD PTR [r12+0xa0]
   52980:	mov    rsi,r15
   52983:	mov    rdi,r12
   52986:	call   50650 <re_string_context_at>
   5298b:	mov    rdx,QWORD PTR [rsp+0x18]
   52990:	mov    rsi,QWORD PTR [rsp+0x40]
   52995:	lea    rdi,[rsp+0x88]
   5299d:	mov    ecx,eax
   5299f:	call   4ee30 <re_acquire_state_context>
   529a4:	mov    r14,rax
   529a7:	test   rax,rax
   529aa:	je     52ba8 <check_arrival+0x608>
   529b0:	mov    rax,QWORD PTR [r12+0xb8]
   529b8:	mov    rcx,QWORD PTR [rsp+0x38]
   529bd:	mov    QWORD PTR [rsp+0x30],0x0
   529c6:	mov    QWORD PTR [rax+rcx*1],r14
   529ca:	add    QWORD PTR [rsp+0x10],0x1
   529d0:	cmp    rbx,QWORD PTR [rsp+0x48]
   529d5:	jl     526cc <check_arrival+0x12c>
   529db:	mov    r15,rbx
   529de:	mov    rdi,QWORD PTR [rsp+0xa0]
   529e6:	call   4bdc0 <rpl_free>
   529eb:	mov    rax,QWORD PTR [r12+0xb8]
   529f3:	mov    rbx,QWORD PTR [rsp+0x48]
   529f8:	mov    rax,QWORD PTR [rax+rbx*8]
   529fc:	test   rax,rax
   529ff:	je     52d08 <check_arrival+0x768>
   52a05:	mov    rbx,QWORD PTR [rsp+0x60]
   52a0a:	mov    rdx,QWORD PTR [rsp+0x78]
   52a0f:	lea    rsi,[rax+0x18]
   52a13:	mov    QWORD PTR [rbx],r15
   52a16:	mov    rbx,QWORD PTR [rsp+0x68]
   52a1b:	mov    QWORD PTR [r12+0xb8],rbx
   52a23:	mov    rbx,QWORD PTR [rsp+0x70]
   52a28:	mov    QWORD PTR [r12+0x48],rbx
   52a2d:	mov    rdi,QWORD PTR [rax+0x10]
   52a31:	call   4db50 <re_node_set_contains.isra.0>
   52a36:	test   rax,rax
   52a39:	sete   al
   52a3c:	movzx  eax,al
   52a3f:	nop
   52a40:	mov    rbx,QWORD PTR [rsp+0xc8]
   52a48:	xor    rbx,QWORD PTR fs:0x28
   52a51:	jne    52d3f <check_arrival+0x79f>
   52a57:	add    rsp,0xd8
   52a5e:	pop    rbx
   52a5f:	pop    rbp
   52a60:	pop    r12
   52a62:	pop    r13
   52a64:	pop    r14
   52a66:	pop    r15
   52a68:	ret    
   52a69:	nop    DWORD PTR [rax+0x0]
   52a70:	lea    r13,[rsp+0x90]
   52a78:	lea    rsi,[r14+0x8]
   52a7c:	mov    DWORD PTR [rsp+0x8],eax
   52a80:	mov    rdi,r13
   52a83:	call   4ec30 <re_node_set_init_copy>
   52a88:	mov    DWORD PTR [rsp+0x88],eax
   52a8f:	test   eax,eax
   52a91:	jne    52a40 <check_arrival+0x4a0>
   52a93:	test   BYTE PTR [r14+0x68],0x40
   52a98:	mov    r9d,DWORD PTR [rsp+0x8]
   52a9d:	je     526a2 <check_arrival+0x102>
   52aa3:	cmp    QWORD PTR [rsp+0x98],0x0
   52aac:	je     52ae2 <check_arrival+0x542>
   52aae:	mov    rcx,QWORD PTR [rsp+0x50]
   52ab3:	mov    rdx,r15
   52ab6:	mov    rsi,r13
   52ab9:	mov    rdi,r12
   52abc:	mov    r8d,DWORD PTR [rsp+0x110]
   52ac4:	mov    DWORD PTR [rsp+0x8],r9d
   52ac9:	call   4f420 <expand_bkref_cache>
   52ace:	mov    r9d,DWORD PTR [rsp+0x8]
   52ad3:	test   eax,eax
   52ad5:	mov    DWORD PTR [rsp+0x88],eax
   52adc:	jne    52b68 <check_arrival+0x5c8>
   52ae2:	mov    rsi,QWORD PTR [rsp+0x40]
   52ae7:	lea    rdi,[rsp+0x88]
   52aef:	mov    ecx,r9d
   52af2:	mov    rdx,r13
   52af5:	call   4ee30 <re_acquire_state_context>
   52afa:	mov    r14,rax
   52afd:	test   rax,rax
   52b00:	je     52ce0 <check_arrival+0x740>
   52b06:	mov    rax,QWORD PTR [r12+0xb8]
   52b0e:	mov    QWORD PTR [rax+r15*8],r14
   52b12:	jmp    526a2 <check_arrival+0x102>
   52b17:	nop    WORD PTR [rax+rax*1+0x0]
   52b20:	test   eax,eax
   52b22:	jne    527a7 <check_arrival+0x207>
   52b28:	mov    rsi,QWORD PTR [rbp+0x0]
   52b2c:	add    rsi,r14
   52b2f:	jmp    52798 <check_arrival+0x1f8>
   52b34:	nop    DWORD PTR [rax+0x0]
   52b38:	test   r14,r14
   52b3b:	jne    52741 <check_arrival+0x1a1>
   52b41:	mov    rbx,QWORD PTR [rsp+0x10]
   52b46:	jmp    52978 <check_arrival+0x3d8>
   52b4b:	nop    DWORD PTR [rax+rax*1+0x0]
   52b50:	mov    rdi,QWORD PTR [rsp+0xc0]
   52b58:	call   4bdc0 <rpl_free>
   52b5d:	mov    DWORD PTR [rsp+0x88],0xc
   52b68:	mov    rdi,QWORD PTR [rsp+0xa0]
   52b70:	call   4bdc0 <rpl_free>
   52b75:	mov    eax,DWORD PTR [rsp+0x88]
   52b7c:	jmp    52a40 <check_arrival+0x4a0>
   52b81:	nop    DWORD PTR [rax+0x0]
   52b88:	mov    rdi,QWORD PTR [rsp+0xc0]
   52b90:	call   4bdc0 <rpl_free>
   52b95:	mov    DWORD PTR [rsp+0x88],0x0
   52ba0:	jmp    52910 <check_arrival+0x370>
   52ba5:	nop    DWORD PTR [rax]
   52ba8:	mov    eax,DWORD PTR [rsp+0x88]
   52baf:	test   eax,eax
   52bb1:	jne    52b68 <check_arrival+0x5c8>
   52bb3:	mov    rax,QWORD PTR [r12+0xb8]
   52bbb:	mov    rcx,QWORD PTR [rsp+0x38]
   52bc0:	add    QWORD PTR [rsp+0x30],0x1
   52bc6:	mov    QWORD PTR [rax+rcx*1],0x0
   52bce:	jmp    529ca <check_arrival+0x42a>
   52bd3:	nop    DWORD PTR [rax+rax*1+0x0]
   52bd8:	mov    QWORD PTR [r12+0x48],rbx
   52bdd:	lea    rsi,[rbx-0x1]
   52be1:	mov    rdi,r12
   52be4:	call   50650 <re_string_context_at>
   52be9:	mov    r9d,eax
   52bec:	mov    edi,0x8
   52bf1:	mov    DWORD PTR [rsp+0x8],r9d
   52bf6:	mov    QWORD PTR [rsp+0x90],0x1
   52c02:	mov    QWORD PTR [rsp+0x98],0x1
   52c0e:	call   c0e0 <malloc@plt>
   52c13:	mov    QWORD PTR [rsp+0xa0],rax
   52c1b:	test   rax,rax
   52c1e:	je     52cf8 <check_arrival+0x758>
   52c24:	mov    rdx,QWORD PTR [rsp+0x50]
   52c29:	mov    rdi,QWORD PTR [rsp+0x40]
   52c2e:	mov    QWORD PTR [rax],rbp
   52c31:	mov    r15,rbx
   52c34:	mov    ecx,DWORD PTR [rsp+0x110]
   52c3b:	lea    r13,[rsp+0x90]
   52c43:	mov    DWORD PTR [rsp+0x88],0x0
   52c4e:	mov    rsi,r13
   52c51:	call   4e450 <check_arrival_expand_ecl>
   52c56:	mov    r9d,DWORD PTR [rsp+0x8]
   52c5b:	test   eax,eax
   52c5d:	mov    DWORD PTR [rsp+0x88],eax
   52c64:	je     52aa3 <check_arrival+0x503>
   52c6a:	jmp    52b68 <check_arrival+0x5c8>
   52c6f:	nop
   52c70:	lea    r15,[rax+0x1]
   52c74:	movabs rax,0x7fffffffffffffff
   52c7e:	sub    rax,r13
   52c81:	cmp    rax,r15
   52c84:	jl     52cf8 <check_arrival+0x758>
   52c86:	movabs rax,0x1fffffffffffffff
   52c90:	lea    r14,[r13+r15*1+0x0]
   52c95:	cmp    r14,rax
   52c98:	ja     52cf8 <check_arrival+0x758>
   52c9a:	mov    rax,QWORD PTR [rsp+0x60]
   52c9f:	lea    rsi,[r14*8+0x0]
   52ca7:	mov    rdi,QWORD PTR [rax+0x10]
   52cab:	call   ca20 <realloc@plt>
   52cb0:	test   rax,rax
   52cb3:	je     52cf8 <check_arrival+0x758>
   52cb5:	mov    rcx,QWORD PTR [rsp+0x60]
   52cba:	lea    rdx,[r15*8+0x0]
   52cc2:	lea    rdi,[rax+r13*8]
   52cc6:	xor    esi,esi
   52cc8:	mov    QWORD PTR [rcx+0x10],rax
   52ccc:	mov    QWORD PTR [rcx+0x8],r14
   52cd0:	call   bed0 <memset@plt>
   52cd5:	jmp    5261c <check_arrival+0x7c>
   52cda:	nop    WORD PTR [rax+rax*1+0x0]
   52ce0:	mov    ecx,DWORD PTR [rsp+0x88]
   52ce7:	test   ecx,ecx
   52ce9:	je     52b06 <check_arrival+0x566>
   52cef:	jmp    52b68 <check_arrival+0x5c8>
   52cf4:	nop    DWORD PTR [rax+0x0]
   52cf8:	mov    eax,0xc
   52cfd:	jmp    52a40 <check_arrival+0x4a0>
   52d02:	nop    WORD PTR [rax+rax*1+0x0]
   52d08:	mov    rax,QWORD PTR [rsp+0x60]
   52d0d:	mov    QWORD PTR [rax],r15
   52d10:	mov    rax,QWORD PTR [rsp+0x68]
   52d15:	mov    QWORD PTR [r12+0xb8],rax
   52d1d:	mov    rax,QWORD PTR [rsp+0x70]
   52d22:	mov    QWORD PTR [r12+0x48],rax
   52d27:	mov    eax,0x1
   52d2c:	jmp    52a40 <check_arrival+0x4a0>
   52d31:	nop    DWORD PTR [rax+0x0]
   52d38:	xor    edi,edi
   52d3a:	jmp    52b90 <check_arrival+0x5f0>
   52d3f:	call   c7b0 <__stack_chk_fail@plt>
   52d44:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   52d4f:	nop

0000000000052d50 <set_regs>:
   52d50:	push   rbp
   52d51:	mov    rbp,rsp
   52d54:	push   r15
   52d56:	push   r14
   52d58:	push   r13
   52d5a:	mov    r13,rcx
   52d5d:	push   r12
   52d5f:	push   rbx
   52d60:	mov    rbx,rsi
   52d63:	sub    rsp,0xa8
   52d6a:	mov    QWORD PTR [rbp-0x90],rdx
   52d71:	mov    rax,QWORD PTR fs:0x28
   52d7a:	mov    QWORD PTR [rbp-0x38],rax
   52d7e:	xor    eax,eax
   52d80:	mov    rax,QWORD PTR [rdi]
   52d83:	mov    QWORD PTR [rbp-0x50],0x0
   52d8b:	mov    QWORD PTR [rbp-0x48],0x2
   52d93:	mov    QWORD PTR [rbp-0x98],rax
   52d9a:	mov    QWORD PTR [rbp-0x40],0x0
   52da2:	test   r8b,r8b
   52da5:	je     53540 <set_regs+0x7f0>
   52dab:	mov    edi,0x60
   52db0:	call   c0e0 <malloc@plt>
   52db5:	mov    QWORD PTR [rbp-0x40],rax
   52db9:	test   rax,rax
   52dbc:	je     534b4 <set_regs+0x764>
   52dc2:	lea    rax,[rbp-0x50]
   52dc6:	mov    QWORD PTR [rbp-0x88],rax
   52dcd:	mov    rax,QWORD PTR [rbp-0x98]
   52dd4:	pxor   xmm0,xmm0
   52dd8:	mov    QWORD PTR [rbp-0x60],0x0
   52de0:	movaps XMMWORD PTR [rbp-0x70],xmm0
   52de4:	mov    r12,QWORD PTR [rax+0x90]
   52deb:	mov    rax,QWORD PTR [rbp-0x90]
   52df2:	shl    rax,0x4
   52df6:	mov    QWORD PTR [rbp-0xb8],rax
   52dfd:	cmp    rax,0xfbf
   52e03:	ja     53550 <set_regs+0x800>
   52e09:	add    rax,0x10
   52e0d:	mov    rcx,rsp
   52e10:	mov    rdx,rax
   52e13:	and    rdx,0xfffffffffffff000
   52e1a:	sub    rcx,rdx
   52e1d:	mov    rdx,rcx
   52e20:	cmp    rsp,rdx
   52e23:	je     52e3a <set_regs+0xea>
   52e25:	sub    rsp,0x1000
   52e2c:	or     QWORD PTR [rsp+0xff8],0x0
   52e35:	cmp    rsp,rdx
   52e38:	jne    52e25 <set_regs+0xd5>
   52e3a:	and    eax,0xfff
   52e3f:	sub    rsp,rax
   52e42:	test   rax,rax
   52e45:	jne    53589 <set_regs+0x839>
   52e4b:	lea    rax,[rsp+0xf]
   52e50:	mov    BYTE PTR [rbp-0xc1],0x0
   52e57:	and    rax,0xfffffffffffffff0
   52e5b:	mov    QWORD PTR [rbp-0xc0],rax
   52e62:	mov    rdx,QWORD PTR [rbp-0xb8]
   52e69:	mov    rdi,QWORD PTR [rbp-0xc0]
   52e70:	mov    rsi,r13
   52e73:	call   cb30 <memcpy@plt>
   52e78:	mov    rcx,QWORD PTR [r13+0x0]
   52e7c:	lea    rax,[rbp-0x70]
   52e80:	mov    QWORD PTR [rbp-0xb0],rax
   52e87:	mov    QWORD PTR [rbp-0x78],rcx
   52e8b:	jmp    52f73 <set_regs+0x223>
   52e90:	cmp    edx,0x9
   52e93:	je     53120 <set_regs+0x3d0>
   52e99:	cmp    rcx,rax
   52e9c:	jne    52eab <set_regs+0x15b>
   52e9e:	cmp    QWORD PTR [rbx+0xb0],r12
   52ea5:	je     53318 <set_regs+0x5c8>
   52eab:	mov    r10,QWORD PTR [rbx+0x98]
   52eb2:	mov    rdi,QWORD PTR [r10]
   52eb5:	lea    rsi,[rdi+r14*1]
   52eb9:	movzx  eax,BYTE PTR [rsi+0x8]
   52ebd:	test   al,0x8
   52ebf:	jne    52fd8 <set_regs+0x288>
   52ec5:	test   BYTE PTR [rsi+0xa],0x10
   52ec9:	jne    53190 <set_regs+0x440>
   52ecf:	cmp    al,0x4
   52ed1:	je     531d0 <set_regs+0x480>
   52ed7:	mov    rcx,QWORD PTR [rbp-0x78]
   52edb:	mov    rdx,rcx
   52ede:	mov    rdi,rbx
   52ee1:	mov    QWORD PTR [rbp-0xa8],r10
   52ee8:	mov    QWORD PTR [rbp-0xa0],rcx
   52eef:	call   50740 <check_node_accept>
   52ef4:	mov    rcx,QWORD PTR [rbp-0xa0]
   52efb:	mov    r10,QWORD PTR [rbp-0xa8]
   52f02:	test   al,al
   52f04:	je     5327a <set_regs+0x52a>
   52f0a:	mov    rax,QWORD PTR [r10+0x18]
   52f0e:	mov    r12,QWORD PTR [rax+r15*8]
   52f12:	lea    rax,[rcx+0x1]
   52f16:	cmp    QWORD PTR [rbp-0x88],0x0
   52f1e:	mov    QWORD PTR [rbp-0x78],rax
   52f22:	je     52f5e <set_regs+0x20e>
   52f24:	cmp    rax,QWORD PTR [rbx+0xa8]
   52f2b:	jg     53288 <set_regs+0x538>
   52f31:	mov    rdx,QWORD PTR [rbx+0xb8]
   52f38:	mov    rax,QWORD PTR [rdx+rax*8]
   52f3c:	test   rax,rax
   52f3f:	je     53288 <set_regs+0x538>
   52f45:	mov    rdi,QWORD PTR [rax+0x10]
   52f49:	lea    rsi,[rax+0x18]
   52f4d:	mov    rdx,r12
   52f50:	call   4db50 <re_node_set_contains.isra.0>
   52f55:	test   rax,rax
   52f58:	je     53288 <set_regs+0x538>
   52f5e:	mov    QWORD PTR [rbp-0x68],0x0
   52f66:	test   r12,r12
   52f69:	js     53270 <set_regs+0x520>
   52f6f:	mov    rcx,QWORD PTR [rbp-0x78]
   52f73:	mov    rax,QWORD PTR [r13+0x8]
   52f77:	cmp    rax,rcx
   52f7a:	jl     532c8 <set_regs+0x578>
   52f80:	mov    rdi,QWORD PTR [rbp-0x98]
   52f87:	mov    r14,r12
   52f8a:	mov    r15,r12
   52f8d:	shl    r14,0x4
   52f91:	mov    rsi,QWORD PTR [rdi]
   52f94:	add    rsi,r14
   52f97:	movzx  edx,BYTE PTR [rsi+0x8]
   52f9b:	cmp    edx,0x8
   52f9e:	jne    52e90 <set_regs+0x140>
   52fa4:	mov    rdx,QWORD PTR [rsi]
   52fa7:	add    rdx,0x1
   52fab:	cmp    QWORD PTR [rbp-0x90],rdx
   52fb2:	jle    52e99 <set_regs+0x149>
   52fb8:	shl    rdx,0x4
   52fbc:	add    rdx,r13
   52fbf:	mov    QWORD PTR [rdx+0x8],0xffffffffffffffff
   52fc7:	mov    rax,QWORD PTR [r13+0x8]
   52fcb:	mov    QWORD PTR [rdx],rcx
   52fce:	jmp    52e99 <set_regs+0x149>
   52fd3:	nop    DWORD PTR [rax+rax*1+0x0]
   52fd8:	mov    rax,QWORD PTR [rbx+0xb8]
   52fdf:	mov    rdx,QWORD PTR [rbp-0x78]
   52fe3:	mov    rsi,r12
   52fe6:	mov    rdi,QWORD PTR [rbp-0xb0]
   52fed:	mov    r14,QWORD PTR [rax+rdx*8]
   52ff1:	mov    rax,QWORD PTR [r10+0x28]
   52ff5:	lea    rdx,[r12+r12*2]
   52ff9:	lea    r15,[rax+rdx*8]
   52ffd:	call   4c580 <re_node_set_insert>
   53002:	test   al,al
   53004:	je     53490 <set_regs+0x740>
   5300a:	mov    r10,QWORD PTR [r15+0x8]
   5300e:	test   r10,r10
   53011:	jle    5327a <set_regs+0x52a>
   53017:	mov    r15,QWORD PTR [r15+0x10]
   5301b:	mov    r11,QWORD PTR [r14+0x10]
   5301f:	lea    r9,[r14+0x18]
   53023:	xor    r8d,r8d
   53026:	mov    r12,0xffffffffffffffff
   5302d:	jmp    53040 <set_regs+0x2f0>
   5302f:	nop
   53030:	mov    r12,r14
   53033:	add    r8,0x1
   53037:	cmp    r8,r10
   5303a:	je     52f66 <set_regs+0x216>
   53040:	mov    r14,QWORD PTR [r15+r8*8]
   53044:	mov    rsi,r9
   53047:	mov    rdi,r11
   5304a:	mov    rdx,r14
   5304d:	call   4db50 <re_node_set_contains.isra.0>
   53052:	test   rax,rax
   53055:	je     53033 <set_regs+0x2e3>
   53057:	cmp    r12,0xffffffffffffffff
   5305b:	je     53030 <set_regs+0x2e0>
   5305d:	mov    rdi,QWORD PTR [rbp-0x68]
   53061:	lea    rsi,[rbp-0x60]
   53065:	mov    rdx,r12
   53068:	call   4db50 <re_node_set_contains.isra.0>
   5306d:	test   rax,rax
   53070:	jne    53480 <set_regs+0x730>
   53076:	mov    rcx,QWORD PTR [rbp-0x88]
   5307d:	test   rcx,rcx
   53080:	je     52f66 <set_regs+0x216>
   53086:	mov    r15,QWORD PTR [rcx]
   53089:	mov    rdx,QWORD PTR [rbp-0x78]
   5308d:	lea    rax,[r15+0x1]
   53091:	mov    QWORD PTR [rcx],rax
   53094:	cmp    rax,QWORD PTR [rcx+0x8]
   53098:	je     534f8 <set_regs+0x7a8>
   5309e:	mov    rax,QWORD PTR [rcx+0x10]
   530a2:	lea    r15,[r15+r15*2]
   530a6:	shl    r15,0x4
   530aa:	add    r15,rax
   530ad:	mov    QWORD PTR [r15+0x8],r14
   530b1:	mov    r14,QWORD PTR [rbp-0xb8]
   530b8:	mov    QWORD PTR [r15],rdx
   530bb:	mov    rdi,r14
   530be:	call   c0e0 <malloc@plt>
   530c3:	mov    QWORD PTR [r15+0x10],rax
   530c7:	mov    rdi,rax
   530ca:	test   rax,rax
   530cd:	je     530f2 <set_regs+0x3a2>
   530cf:	mov    rsi,r13
   530d2:	mov    rdx,r14
   530d5:	call   cb30 <memcpy@plt>
   530da:	mov    rsi,QWORD PTR [rbp-0xb0]
   530e1:	lea    rdi,[r15+0x18]
   530e5:	call   4ec30 <re_node_set_init_copy>
   530ea:	test   eax,eax
   530ec:	je     52f66 <set_regs+0x216>
   530f2:	mov    rdi,QWORD PTR [rbp-0x60]
   530f6:	call   4bdc0 <rpl_free>
   530fb:	cmp    BYTE PTR [rbp-0xc1],0x0
   53102:	jne    53598 <set_regs+0x848>
   53108:	mov    rdi,QWORD PTR [rbp-0x88]
   5310f:	call   50600 <free_fail_stack_return.part.0>
   53114:	mov    eax,0xc
   53119:	jmp    532f1 <set_regs+0x5a1>
   5311e:	xchg   ax,ax
   53120:	mov    rdi,QWORD PTR [rsi]
   53123:	lea    rdx,[rdi+0x1]
   53127:	cmp    QWORD PTR [rbp-0x90],rdx
   5312e:	jle    52e99 <set_regs+0x149>
   53134:	shl    rdx,0x4
   53138:	lea    rax,[r13+rdx*1+0x0]
   5313d:	cmp    QWORD PTR [rax],rcx
   53140:	jl     534c0 <set_regs+0x770>
   53146:	test   BYTE PTR [rsi+0xa],0x8
   5314a:	je     53470 <set_regs+0x720>
   53150:	mov    rsi,QWORD PTR [rbp-0xc0]
   53157:	cmp    QWORD PTR [rsi+rdx*1],0xffffffffffffffff
   5315c:	je     53470 <set_regs+0x720>
   53162:	mov    rdx,QWORD PTR [rbp-0xb8]
   53169:	mov    rdi,r13
   5316c:	mov    QWORD PTR [rbp-0xa0],rcx
   53173:	call   cb30 <memcpy@plt>
   53178:	mov    rax,QWORD PTR [r13+0x8]
   5317c:	mov    rcx,QWORD PTR [rbp-0xa0]
   53183:	jmp    52e99 <set_regs+0x149>
   53188:	nop    DWORD PTR [rax+rax*1+0x0]
   53190:	mov    r8,QWORD PTR [rbp-0x78]
   53194:	lea    rsi,[r10+0xd8]
   5319b:	mov    rdx,r12
   5319e:	mov    rcx,rbx
   531a1:	mov    QWORD PTR [rbp-0xa0],r10
   531a8:	call   52300 <check_node_accept_bytes.isra.0>
   531ad:	mov    r10,QWORD PTR [rbp-0xa0]
   531b4:	movsxd rdx,eax
   531b7:	test   rdx,rdx
   531ba:	jne    53460 <set_regs+0x710>
   531c0:	mov    rsi,QWORD PTR [r10]
   531c3:	mov    rcx,QWORD PTR [rbp-0x78]
   531c7:	add    rsi,r14
   531ca:	jmp    52edb <set_regs+0x18b>
   531cf:	nop
   531d0:	mov    rax,QWORD PTR [rsi]
   531d3:	add    rax,0x1
   531d7:	cmp    QWORD PTR [rbp-0x90],rax
   531de:	jle    533c0 <set_regs+0x670>
   531e4:	shl    rax,0x4
   531e8:	add    rax,r13
   531eb:	mov    rcx,QWORD PTR [rax+0x8]
   531ef:	mov    rdi,QWORD PTR [rax]
   531f2:	mov    rdx,rcx
   531f5:	sub    rdx,rdi
   531f8:	cmp    QWORD PTR [rbp-0x88],0x0
   53200:	je     53455 <set_regs+0x705>
   53206:	cmp    rdi,0xffffffffffffffff
   5320a:	je     53288 <set_regs+0x538>
   5320c:	cmp    rcx,0xffffffffffffffff
   53210:	je     53288 <set_regs+0x538>
   53212:	test   rdx,rdx
   53215:	je     533ce <set_regs+0x67e>
   5321b:	mov    r15,QWORD PTR [rbp-0x78]
   5321f:	mov    rcx,QWORD PTR [rbx+0x30]
   53223:	mov    QWORD PTR [rbp-0xa8],r10
   5322a:	mov    rax,QWORD PTR [rbx+0x8]
   5322e:	sub    rcx,r15
   53231:	cmp    rdx,rcx
   53234:	jg     53288 <set_regs+0x538>
   53236:	add    rdi,rax
   53239:	lea    rsi,[rax+r15*1]
   5323d:	mov    QWORD PTR [rbp-0xa0],rdx
   53244:	call   c870 <memcmp@plt>
   53249:	mov    rdx,QWORD PTR [rbp-0xa0]
   53250:	mov    r10,QWORD PTR [rbp-0xa8]
   53257:	test   eax,eax
   53259:	jne    53288 <set_regs+0x538>
   5325b:	mov    rax,QWORD PTR [r10+0x18]
   5325f:	mov    r12,QWORD PTR [rax+r12*8]
   53263:	lea    rax,[r15+rdx*1]
   53267:	jmp    52f16 <set_regs+0x1c6>
   5326c:	nop    DWORD PTR [rax+0x0]
   53270:	cmp    r12,0xfffffffffffffffe
   53274:	je     53490 <set_regs+0x740>
   5327a:	cmp    QWORD PTR [rbp-0x88],0x0
   53282:	je     535d2 <set_regs+0x882>
   53288:	mov    rdi,QWORD PTR [rbp-0x88]
   5328f:	mov    rcx,QWORD PTR [rbp-0x90]
   53296:	lea    rdx,[rbp-0x78]
   5329a:	mov    r8,r13
   5329d:	mov    r9,QWORD PTR [rbp-0xb0]
   532a4:	lea    rsi,[rdi+0x10]
   532a8:	call   51290 <pop_fail_stack.isra.0>
   532ad:	mov    rcx,QWORD PTR [rbp-0x78]
   532b1:	mov    r12,rax
   532b4:	mov    rax,QWORD PTR [r13+0x8]
   532b8:	cmp    rax,rcx
   532bb:	jge    52f80 <set_regs+0x230>
   532c1:	nop    DWORD PTR [rax+0x0]
   532c8:	mov    rdi,QWORD PTR [rbp-0x60]
   532cc:	call   4bdc0 <rpl_free>
   532d1:	cmp    BYTE PTR [rbp-0xc1],0x0
   532d8:	jne    53578 <set_regs+0x828>
   532de:	mov    rdi,QWORD PTR [rbp-0x88]
   532e5:	test   rdi,rdi
   532e8:	je     532ef <set_regs+0x59f>
   532ea:	call   50600 <free_fail_stack_return.part.0>
   532ef:	xor    eax,eax
   532f1:	mov    rbx,QWORD PTR [rbp-0x38]
   532f5:	xor    rbx,QWORD PTR fs:0x28
   532fe:	jne    53635 <set_regs+0x8e5>
   53304:	lea    rsp,[rbp-0x28]
   53308:	pop    rbx
   53309:	pop    r12
   5330b:	pop    r13
   5330d:	pop    r14
   5330f:	pop    r15
   53311:	pop    rbp
   53312:	ret    
   53313:	nop    DWORD PTR [rax+rax*1+0x0]
   53318:	cmp    QWORD PTR [rbp-0x88],0x0
   53320:	je     535a9 <set_regs+0x859>
   53326:	mov    rcx,QWORD PTR [rbp-0x90]
   5332d:	mov    rax,r13
   53330:	xor    edx,edx
   53332:	nop    WORD PTR [rax+rax*1+0x0]
   53338:	cmp    QWORD PTR [rax],0x0
   5333c:	js     53345 <set_regs+0x5f5>
   5333e:	cmp    QWORD PTR [rax+0x8],0xffffffffffffffff
   53343:	je     53380 <set_regs+0x630>
   53345:	add    rdx,0x1
   53349:	add    rax,0x10
   5334d:	cmp    rcx,rdx
   53350:	jne    53338 <set_regs+0x5e8>
   53352:	mov    rdi,QWORD PTR [rbp-0x60]
   53356:	call   4bdc0 <rpl_free>
   5335b:	cmp    BYTE PTR [rbp-0xc1],0x0
   53362:	jne    5360a <set_regs+0x8ba>
   53368:	mov    rdi,QWORD PTR [rbp-0x88]
   5336f:	call   50600 <free_fail_stack_return.part.0>
   53374:	xor    eax,eax
   53376:	jmp    532f1 <set_regs+0x5a1>
   5337b:	nop    DWORD PTR [rax+rax*1+0x0]
   53380:	cmp    QWORD PTR [rbp-0x90],rdx
   53387:	je     53352 <set_regs+0x602>
   53389:	mov    rdi,QWORD PTR [rbp-0x88]
   53390:	mov    r9,QWORD PTR [rbp-0xb0]
   53397:	lea    rdx,[rbp-0x78]
   5339b:	mov    r8,r13
   5339e:	mov    rcx,QWORD PTR [rbp-0x90]
   533a5:	lea    rsi,[rdi+0x10]
   533a9:	call   51290 <pop_fail_stack.isra.0>
   533ae:	mov    r14,rax
   533b1:	mov    r12,rax
   533b4:	mov    r15,rax
   533b7:	shl    r14,0x4
   533bb:	jmp    52eab <set_regs+0x15b>
   533c0:	cmp    QWORD PTR [rbp-0x88],0x0
   533c8:	jne    53288 <set_regs+0x538>
   533ce:	mov    rdi,QWORD PTR [rbp-0xb0]
   533d5:	mov    rsi,r12
   533d8:	mov    QWORD PTR [rbp-0xa0],r10
   533df:	call   4c580 <re_node_set_insert>
   533e4:	test   al,al
   533e6:	je     53490 <set_regs+0x740>
   533ec:	mov    r10,QWORD PTR [rbp-0xa0]
   533f3:	lea    rax,[r12+r12*2]
   533f7:	mov    rcx,QWORD PTR [rbp-0x78]
   533fb:	shl    rax,0x3
   533ff:	add    rax,QWORD PTR [r10+0x28]
   53403:	mov    QWORD PTR [rbp-0xa8],r10
   5340a:	mov    rax,QWORD PTR [rax+0x10]
   5340e:	mov    QWORD PTR [rbp-0xa0],rcx
   53415:	mov    r12,QWORD PTR [rax]
   53418:	mov    rax,QWORD PTR [rbx+0xb8]
   5341f:	mov    rax,QWORD PTR [rax+rcx*8]
   53423:	mov    rdx,r12
   53426:	mov    rdi,QWORD PTR [rax+0x10]
   5342a:	lea    rsi,[rax+0x18]
   5342e:	call   4db50 <re_node_set_contains.isra.0>
   53433:	test   rax,rax
   53436:	jne    52f66 <set_regs+0x216>
   5343c:	mov    r10,QWORD PTR [rbp-0xa8]
   53443:	mov    rsi,r14
   53446:	mov    rcx,QWORD PTR [rbp-0xa0]
   5344d:	add    rsi,QWORD PTR [r10]
   53450:	jmp    52edb <set_regs+0x18b>
   53455:	test   rdx,rdx
   53458:	je     533ce <set_regs+0x67e>
   5345e:	xchg   ax,ax
   53460:	mov    r15,QWORD PTR [rbp-0x78]
   53464:	jmp    5325b <set_regs+0x50b>
   53469:	nop    DWORD PTR [rax+0x0]
   53470:	mov    QWORD PTR [rax+0x8],rcx
   53474:	mov    rax,QWORD PTR [r13+0x8]
   53478:	jmp    52e99 <set_regs+0x149>
   5347d:	nop    DWORD PTR [rax]
   53480:	mov    r12,r14
   53483:	jmp    52f66 <set_regs+0x216>
   53488:	nop    DWORD PTR [rax+rax*1+0x0]
   53490:	mov    rdi,QWORD PTR [rbp-0x60]
   53494:	call   4bdc0 <rpl_free>
   53499:	cmp    BYTE PTR [rbp-0xc1],0x0
   534a0:	jne    53598 <set_regs+0x848>
   534a6:	cmp    QWORD PTR [rbp-0x88],0x0
   534ae:	jne    53108 <set_regs+0x3b8>
   534b4:	mov    eax,0xc
   534b9:	jmp    532f1 <set_regs+0x5a1>
   534be:	xchg   ax,ax
   534c0:	mov    QWORD PTR [rax+0x8],rcx
   534c4:	mov    rdx,QWORD PTR [rbp-0xb8]
   534cb:	mov    rsi,r13
   534ce:	mov    rdi,QWORD PTR [rbp-0xc0]
   534d5:	mov    QWORD PTR [rbp-0xa0],rcx
   534dc:	call   cb30 <memcpy@plt>
   534e1:	mov    rax,QWORD PTR [r13+0x8]
   534e5:	mov    rcx,QWORD PTR [rbp-0xa0]
   534ec:	jmp    52e99 <set_regs+0x149>
   534f1:	nop    DWORD PTR [rax+0x0]
   534f8:	lea    rsi,[rax+rax*2]
   534fc:	mov    rax,QWORD PTR [rbp-0x88]
   53503:	mov    QWORD PTR [rbp-0xa0],rdx
   5350a:	shl    rsi,0x5
   5350e:	mov    rdi,QWORD PTR [rax+0x10]
   53512:	call   ca20 <realloc@plt>
   53517:	test   rax,rax
   5351a:	je     530f2 <set_regs+0x3a2>
   53520:	mov    rcx,QWORD PTR [rbp-0x88]
   53527:	mov    rdx,QWORD PTR [rbp-0xa0]
   5352e:	mov    QWORD PTR [rcx+0x10],rax
   53532:	shl    QWORD PTR [rcx+0x8],1
   53536:	jmp    530a2 <set_regs+0x352>
   5353b:	nop    DWORD PTR [rax+rax*1+0x0]
   53540:	mov    QWORD PTR [rbp-0x88],0x0
   5354b:	jmp    52dcd <set_regs+0x7d>
   53550:	mov    rdi,QWORD PTR [rbp-0xb8]
   53557:	call   c0e0 <malloc@plt>
   5355c:	mov    QWORD PTR [rbp-0xc0],rax
   53563:	test   rax,rax
   53566:	je     5361b <set_regs+0x8cb>
   5356c:	mov    BYTE PTR [rbp-0xc1],0x1
   53573:	jmp    52e62 <set_regs+0x112>
   53578:	mov    rdi,QWORD PTR [rbp-0xc0]
   5357f:	call   4bdc0 <rpl_free>
   53584:	jmp    532de <set_regs+0x58e>
   53589:	or     QWORD PTR [rsp+rax*1-0x8],0x0
   5358f:	jmp    52e4b <set_regs+0xfb>
   53594:	nop    DWORD PTR [rax+0x0]
   53598:	mov    rdi,QWORD PTR [rbp-0xc0]
   5359f:	call   4bdc0 <rpl_free>
   535a4:	jmp    534a6 <set_regs+0x756>
   535a9:	mov    rdi,QWORD PTR [rbp-0x60]
   535ad:	call   4bdc0 <rpl_free>
   535b2:	cmp    BYTE PTR [rbp-0xc1],0x0
   535b9:	je     532ef <set_regs+0x59f>
   535bf:	mov    rdi,QWORD PTR [rbp-0xc0]
   535c6:	call   4bdc0 <rpl_free>
   535cb:	xor    eax,eax
   535cd:	jmp    532f1 <set_regs+0x5a1>
   535d2:	mov    rdi,QWORD PTR [rbp-0x60]
   535d6:	call   4bdc0 <rpl_free>
   535db:	cmp    BYTE PTR [rbp-0xc1],0x0
   535e2:	mov    eax,0x1
   535e7:	je     532f1 <set_regs+0x5a1>
   535ed:	mov    rdi,QWORD PTR [rbp-0xc0]
   535f4:	mov    DWORD PTR [rbp-0x88],eax
   535fa:	call   4bdc0 <rpl_free>
   535ff:	mov    eax,DWORD PTR [rbp-0x88]
   53605:	jmp    532f1 <set_regs+0x5a1>
   5360a:	mov    rdi,QWORD PTR [rbp-0xc0]
   53611:	call   4bdc0 <rpl_free>
   53616:	jmp    53368 <set_regs+0x618>
   5361b:	mov    rdi,QWORD PTR [rbp-0x88]
   53622:	test   rdi,rdi
   53625:	je     534b4 <set_regs+0x764>
   5362b:	call   50600 <free_fail_stack_return.part.0>
   53630:	jmp    534b4 <set_regs+0x764>
   53635:	call   c7b0 <__stack_chk_fail@plt>
   5363a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000053640 <get_subexp_sub.isra.0>:
   53640:	push   r15
   53642:	mov    r9,r8
   53645:	push   r14
   53647:	mov    r14,rcx
   5364a:	push   r13
   5364c:	mov    r13,rsi
   5364f:	lea    rsi,[rdx+0x10]
   53653:	push   r12
   53655:	mov    r12,rdx
   53658:	push   rbp
   53659:	mov    rbp,rdi
   5365c:	push   rbx
   5365d:	mov    rbx,r8
   53660:	mov    r8,r14
   53663:	sub    rsp,0x20
   53667:	mov    rcx,QWORD PTR [rdx+0x8]
   5366b:	push   0x8
   5366d:	mov    rdx,QWORD PTR [rdx]
   53670:	call   525a0 <check_arrival>
   53675:	pop    rdx
   53676:	pop    rcx
   53677:	test   eax,eax
   53679:	je     53690 <get_subexp_sub.isra.0+0x50>
   5367b:	add    rsp,0x18
   5367f:	pop    rbx
   53680:	pop    rbp
   53681:	pop    r12
   53683:	pop    r13
   53685:	pop    r14
   53687:	pop    r15
   53689:	ret    
   5368a:	nop    WORD PTR [rax+rax*1+0x0]
   53690:	mov    r15,QWORD PTR [r12+0x8]
   53695:	mov    rax,QWORD PTR [rbp+0xc8]
   5369c:	mov    rdx,QWORD PTR [rbp+0xd0]
   536a3:	mov    rcx,QWORD PTR [r13+0x0]
   536a7:	mov    rdi,QWORD PTR [rbp+0xd8]
   536ae:	mov    rsi,r15
   536b1:	cmp    rax,rdx
   536b4:	jge    53750 <get_subexp_sub.isra.0+0x110>
   536ba:	lea    rdx,[rax+rax*2]
   536be:	shl    rdx,0x4
   536c2:	test   rax,rax
   536c5:	jle    536d2 <get_subexp_sub.isra.0+0x92>
   536c7:	lea    r8,[rdi+rdx*1-0x30]
   536cc:	cmp    rbx,QWORD PTR [r8+0x8]
   536d0:	je     53740 <get_subexp_sub.isra.0+0x100>
   536d2:	add    rdi,rdx
   536d5:	xor    edx,edx
   536d7:	cmp    r15,rcx
   536da:	sete   dl
   536dd:	add    rax,0x1
   536e1:	mov    QWORD PTR [rdi],r14
   536e4:	neg    rdx
   536e7:	mov    QWORD PTR [rdi+0x8],rbx
   536eb:	mov    QWORD PTR [rdi+0x20],rdx
   536ef:	mov    QWORD PTR [rdi+0x10],rcx
   536f3:	mov    QWORD PTR [rdi+0x18],r15
   536f7:	mov    QWORD PTR [rbp+0xc8],rax
   536fe:	mov    rax,r15
   53701:	mov    BYTE PTR [rdi+0x28],0x0
   53705:	movsxd rdx,DWORD PTR [rbp+0xe0]
   5370c:	sub    rax,rcx
   5370f:	cmp    rdx,rax
   53712:	jge    5371e <get_subexp_sub.isra.0+0xde>
   53714:	sub    r15d,ecx
   53717:	mov    DWORD PTR [rbp+0xe0],r15d
   5371e:	add    rsi,rbx
   53721:	sub    rsi,QWORD PTR [r13+0x0]
   53725:	add    rsp,0x18
   53729:	mov    rdi,rbp
   5372c:	pop    rbx
   5372d:	pop    rbp
   5372e:	pop    r12
   53730:	pop    r13
   53732:	pop    r14
   53734:	pop    r15
   53736:	jmp    4d230 <clean_state_log_if_needed>
   5373b:	nop    DWORD PTR [rax+rax*1+0x0]
   53740:	mov    BYTE PTR [r8+0x28],0x1
   53745:	jmp    536d2 <get_subexp_sub.isra.0+0x92>
   53747:	nop    WORD PTR [rax+rax*1+0x0]
   53750:	lea    rsi,[rdx+rdx*2]
   53754:	mov    QWORD PTR [rsp+0x8],rcx
   53759:	shl    rsi,0x5
   5375d:	call   ca20 <realloc@plt>
   53762:	mov    rcx,QWORD PTR [rsp+0x8]
   53767:	test   rax,rax
   5376a:	je     537c8 <get_subexp_sub.isra.0+0x188>
   5376c:	mov    rsi,QWORD PTR [rbp+0xc8]
   53773:	mov    rdx,QWORD PTR [rbp+0xd0]
   5377a:	mov    QWORD PTR [rsp+0x8],rcx
   5377f:	mov    QWORD PTR [rbp+0xd8],rax
   53786:	lea    rdi,[rsi+rsi*2]
   5378a:	lea    rdx,[rdx+rdx*2]
   5378e:	xor    esi,esi
   53790:	shl    rdi,0x4
   53794:	shl    rdx,0x4
   53798:	add    rdi,rax
   5379b:	call   bed0 <memset@plt>
   537a0:	mov    rsi,QWORD PTR [r12+0x8]
   537a5:	mov    rcx,QWORD PTR [rsp+0x8]
   537aa:	shl    QWORD PTR [rbp+0xd0],1
   537b1:	mov    rax,QWORD PTR [rbp+0xc8]
   537b8:	mov    rdi,QWORD PTR [rbp+0xd8]
   537bf:	jmp    536ba <get_subexp_sub.isra.0+0x7a>
   537c4:	nop    DWORD PTR [rax+0x0]
   537c8:	mov    rdi,QWORD PTR [rbp+0xd8]
   537cf:	call   4bdc0 <rpl_free>
   537d4:	mov    eax,0xc
   537d9:	jmp    5367b <get_subexp_sub.isra.0+0x3b>
   537de:	xchg   ax,ax

00000000000537e0 <transit_state_bkref.isra.0>:
   537e0:	push   r15
   537e2:	push   r14
   537e4:	mov    r14,rdi
   537e7:	push   r13
   537e9:	push   r12
   537eb:	push   rbp
   537ec:	push   rbx
   537ed:	sub    rsp,0xa8
   537f4:	mov    r15,QWORD PTR [rdi+0x48]
   537f8:	mov    QWORD PTR [rsp+0x40],rsi
   537fd:	mov    QWORD PTR [rsp+0x38],rdx
   53802:	mov    rax,QWORD PTR fs:0x28
   5380b:	mov    QWORD PTR [rsp+0x98],rax
   53813:	xor    eax,eax
   53815:	mov    rax,QWORD PTR [rdi+0x98]
   5381c:	cmp    QWORD PTR [rsi],0x0
   53820:	mov    QWORD PTR [rsp],0x0
   53828:	mov    QWORD PTR [rsp+0x30],rax
   5382d:	lea    rax,[r15*8+0x0]
   53835:	mov    QWORD PTR [rsp+0x50],rax
   5383a:	jg     53887 <transit_state_bkref.isra.0+0xa7>
   5383c:	jmp    53de0 <transit_state_bkref.isra.0+0x600>
   53841:	nop    DWORD PTR [rax+0x0]
   53848:	test   al,0x1
   5384a:	je     53870 <transit_state_bkref.isra.0+0x90>
   5384c:	and    edx,0x8
   5384f:	jne    53870 <transit_state_bkref.isra.0+0x90>
   53851:	test   cl,0x20
   53854:	je     5385a <transit_state_bkref.isra.0+0x7a>
   53856:	test   al,0x2
   53858:	je     53870 <transit_state_bkref.isra.0+0x90>
   5385a:	and    ecx,0x80
   53860:	je     53900 <transit_state_bkref.isra.0+0x120>
   53866:	test   al,0x8
   53868:	jne    53900 <transit_state_bkref.isra.0+0x120>
   5386e:	xchg   ax,ax
   53870:	mov    rdi,QWORD PTR [rsp+0x40]
   53875:	add    QWORD PTR [rsp],0x1
   5387a:	mov    rax,QWORD PTR [rsp]
   5387e:	cmp    rax,QWORD PTR [rdi]
   53881:	jge    53de0 <transit_state_bkref.isra.0+0x600>
   53887:	mov    rax,QWORD PTR [rsp+0x38]
   5388c:	mov    rdi,QWORD PTR [rsp]
   53890:	mov    rax,QWORD PTR [rax]
   53893:	mov    r13,QWORD PTR [rax+rdi*8]
   53897:	mov    rdi,QWORD PTR [rsp+0x30]
   5389c:	mov    rbp,r13
   5389f:	mov    rax,QWORD PTR [rdi]
   538a2:	shl    rbp,0x4
   538a6:	add    rax,rbp
   538a9:	cmp    BYTE PTR [rax+0x8],0x4
   538ad:	jne    53870 <transit_state_bkref.isra.0+0x90>
   538af:	mov    ebx,DWORD PTR [rax+0x8]
   538b2:	test   ebx,0x3ff00
   538b8:	je     53900 <transit_state_bkref.isra.0+0x120>
   538ba:	mov    edx,DWORD PTR [r14+0xa0]
   538c1:	shr    ebx,0x8
   538c4:	mov    rsi,r15
   538c7:	mov    rdi,r14
   538ca:	call   50650 <re_string_context_at>
   538cf:	mov    ecx,ebx
   538d1:	mov    edx,ebx
   538d3:	and    cx,0x3ff
   538d8:	test   bl,0x4
   538db:	jne    53848 <transit_state_bkref.isra.0+0x68>
   538e1:	and    edx,0x8
   538e4:	je     53851 <transit_state_bkref.isra.0+0x71>
   538ea:	test   al,0x1
   538ec:	je     53851 <transit_state_bkref.isra.0+0x71>
   538f2:	jmp    53870 <transit_state_bkref.isra.0+0x90>
   538f7:	nop    WORD PTR [rax+rax*1+0x0]
   53900:	mov    rbx,QWORD PTR [r14+0xc8]
   53907:	xor    esi,esi
   53909:	mov    rdx,rbx
   5390c:	jmp    53939 <transit_state_bkref.isra.0+0x159>
   5390e:	xchg   ax,ax
   53910:	lea    rax,[rdx+rsi*1]
   53914:	mov    rcx,rax
   53917:	and    rax,0xfffffffffffffffe
   5391b:	sar    rcx,1
   5391e:	add    rax,rcx
   53921:	shl    rax,0x4
   53925:	add    rax,QWORD PTR [r14+0xd8]
   5392c:	cmp    r15,QWORD PTR [rax+0x8]
   53930:	jg     53bc0 <transit_state_bkref.isra.0+0x3e0>
   53936:	mov    rdx,rcx
   53939:	cmp    rdx,rsi
   5393c:	jg     53910 <transit_state_bkref.isra.0+0x130>
   5393e:	cmp    rbx,rsi
   53941:	jle    53bd0 <transit_state_bkref.isra.0+0x3f0>
   53947:	lea    rax,[rsi+rsi*2]
   5394b:	shl    rax,0x4
   5394f:	add    rax,QWORD PTR [r14+0xd8]
   53956:	cmp    r15,QWORD PTR [rax+0x8]
   5395a:	je     53976 <transit_state_bkref.isra.0+0x196>
   5395c:	jmp    53bd0 <transit_state_bkref.isra.0+0x3f0>
   53961:	nop    DWORD PTR [rax+0x0]
   53968:	add    rax,0x30
   5396c:	cmp    BYTE PTR [rax-0x8],0x0
   53970:	je     53bd0 <transit_state_bkref.isra.0+0x3f0>
   53976:	cmp    r13,QWORD PTR [rax]
   53979:	jne    53968 <transit_state_bkref.isra.0+0x188>
   5397b:	lea    rax,[r13*8+0x0]
   53983:	mov    DWORD PTR [rsp+0x7c],0x0
   5398b:	mov    QWORD PTR [rsp+0x58],rax
   53990:	lea    rax,[r13+r13*2+0x0]
   53995:	shl    rax,0x3
   53999:	mov    QWORD PTR [rsp+0x60],rax
   5399e:	cmp    rbx,QWORD PTR [r14+0xc8]
   539a5:	jge    53870 <transit_state_bkref.isra.0+0x90>
   539ab:	mov    rax,r14
   539ae:	mov    r12,QWORD PTR [rsp+0x30]
   539b3:	mov    r14,rbx
   539b6:	mov    rbx,rax
   539b9:	jmp    53af1 <transit_state_bkref.isra.0+0x311>
   539be:	xchg   ax,ax
   539c0:	mov    rcx,QWORD PTR [r12+0x28]
   539c5:	mov    rsi,QWORD PTR [rsp+0x60]
   539ca:	mov    rcx,QWORD PTR [rcx+rsi*1+0x10]
   539cf:	mov    rcx,QWORD PTR [rcx]
   539d2:	lea    rcx,[rcx+rcx*2]
   539d6:	lea    rdi,[rdx+rcx*8]
   539da:	mov    QWORD PTR [rsp+0x10],rdi
   539df:	add    rbp,r15
   539e2:	mov    edx,DWORD PTR [rbx+0xa0]
   539e8:	mov    rdi,rbx
   539eb:	sub    rbp,rax
   539ee:	lea    rsi,[rbp-0x1]
   539f2:	call   50650 <re_string_context_at>
   539f7:	mov    rsi,QWORD PTR [rsp+0x50]
   539fc:	lea    r11,[rbp*8+0x0]
   53a04:	mov    QWORD PTR [rsp+0x8],0x0
   53a0d:	mov    ecx,eax
   53a0f:	mov    rax,QWORD PTR [rbx+0xb8]
   53a16:	lea    r10,[rax+r11*1]
   53a1a:	mov    rax,QWORD PTR [rax+rsi*1]
   53a1e:	mov    rdx,QWORD PTR [r10]
   53a21:	test   rax,rax
   53a24:	je     53a2f <transit_state_bkref.isra.0+0x24f>
   53a26:	mov    rax,QWORD PTR [rax+0x10]
   53a2a:	mov    QWORD PTR [rsp+0x8],rax
   53a2f:	test   rdx,rdx
   53a32:	je     53b50 <transit_state_bkref.isra.0+0x370>
   53a38:	lea    r10,[rsp+0x80]
   53a40:	mov    rsi,QWORD PTR [rdx+0x50]
   53a44:	mov    rdx,QWORD PTR [rsp+0x10]
   53a49:	mov    DWORD PTR [rsp+0x28],ecx
   53a4d:	mov    rdi,r10
   53a50:	mov    QWORD PTR [rsp+0x48],r11
   53a55:	mov    QWORD PTR [rsp+0x20],r10
   53a5a:	call   4ecc0 <re_node_set_init_union>
   53a5f:	mov    r10,QWORD PTR [rsp+0x20]
   53a64:	mov    ecx,DWORD PTR [rsp+0x28]
   53a68:	test   eax,eax
   53a6a:	mov    DWORD PTR [rsp+0x7c],eax
   53a6e:	mov    r11,QWORD PTR [rsp+0x48]
   53a73:	jne    53dc8 <transit_state_bkref.isra.0+0x5e8>
   53a79:	add    r11,QWORD PTR [rbx+0xb8]
   53a80:	mov    rdx,r10
   53a83:	lea    rdi,[rsp+0x7c]
   53a88:	mov    rsi,r12
   53a8b:	mov    QWORD PTR [rsp+0x20],r11
   53a90:	call   4ee30 <re_acquire_state_context>
   53a95:	mov    r11,QWORD PTR [rsp+0x20]
   53a9a:	mov    rdi,QWORD PTR [rsp+0x90]
   53aa2:	mov    QWORD PTR [r11],rax
   53aa5:	call   4bdc0 <rpl_free>
   53aaa:	mov    rdx,QWORD PTR [rbx+0xb8]
   53ab1:	cmp    QWORD PTR [rdx+rbp*8],0x0
   53ab6:	je     53b81 <transit_state_bkref.isra.0+0x3a1>
   53abc:	cmp    QWORD PTR [rsp+0x18],0x0
   53ac2:	jne    53ae0 <transit_state_bkref.isra.0+0x300>
   53ac4:	mov    rax,QWORD PTR [rsp+0x50]
   53ac9:	mov    rsi,QWORD PTR [rsp+0x8]
   53ace:	mov    rax,QWORD PTR [rdx+rax*1]
   53ad2:	cmp    QWORD PTR [rax+0x10],rsi
   53ad6:	jg     53d18 <transit_state_bkref.isra.0+0x538>
   53adc:	nop    DWORD PTR [rax+0x0]
   53ae0:	add    r14,0x1
   53ae4:	cmp    r14,QWORD PTR [rbx+0xc8]
   53aeb:	jge    53d78 <transit_state_bkref.isra.0+0x598>
   53af1:	lea    rax,[r14+r14*2]
   53af5:	shl    rax,0x4
   53af9:	add    rax,QWORD PTR [rbx+0xd8]
   53b00:	cmp    r13,QWORD PTR [rax]
   53b03:	jne    53ae0 <transit_state_bkref.isra.0+0x300>
   53b05:	cmp    r15,QWORD PTR [rax+0x8]
   53b09:	jne    53ae0 <transit_state_bkref.isra.0+0x300>
   53b0b:	mov    rbp,QWORD PTR [rax+0x18]
   53b0f:	mov    rax,QWORD PTR [rax+0x10]
   53b13:	mov    rdx,QWORD PTR [r12+0x30]
   53b18:	mov    rdi,rbp
   53b1b:	sub    rdi,rax
   53b1e:	mov    QWORD PTR [rsp+0x18],rdi
   53b23:	je     539c0 <transit_state_bkref.isra.0+0x1e0>
   53b29:	mov    rcx,QWORD PTR [r12+0x18]
   53b2e:	mov    rsi,QWORD PTR [rsp+0x58]
   53b33:	mov    rcx,QWORD PTR [rcx+rsi*1]
   53b37:	lea    rcx,[rcx+rcx*2]
   53b3b:	lea    rdi,[rdx+rcx*8]
   53b3f:	mov    QWORD PTR [rsp+0x10],rdi
   53b44:	jmp    539df <transit_state_bkref.isra.0+0x1ff>
   53b49:	nop    DWORD PTR [rax+0x0]
   53b50:	mov    rdx,QWORD PTR [rsp+0x10]
   53b55:	lea    rdi,[rsp+0x7c]
   53b5a:	mov    rsi,r12
   53b5d:	mov    QWORD PTR [rsp+0x20],r10
   53b62:	call   4ee30 <re_acquire_state_context>
   53b67:	mov    r10,QWORD PTR [rsp+0x20]
   53b6c:	mov    rdx,QWORD PTR [rbx+0xb8]
   53b73:	mov    QWORD PTR [r10],rax
   53b76:	cmp    QWORD PTR [rdx+rbp*8],0x0
   53b7b:	jne    53abc <transit_state_bkref.isra.0+0x2dc>
   53b81:	mov    eax,DWORD PTR [rsp+0x7c]
   53b85:	test   eax,eax
   53b87:	je     53abc <transit_state_bkref.isra.0+0x2dc>
   53b8d:	nop    DWORD PTR [rax]
   53b90:	mov    rbx,QWORD PTR [rsp+0x98]
   53b98:	xor    rbx,QWORD PTR fs:0x28
   53ba1:	jne    5404b <transit_state_bkref.isra.0+0x86b>
   53ba7:	add    rsp,0xa8
   53bae:	pop    rbx
   53baf:	pop    rbp
   53bb0:	pop    r12
   53bb2:	pop    r13
   53bb4:	pop    r14
   53bb6:	pop    r15
   53bb8:	ret    
   53bb9:	nop    DWORD PTR [rax+0x0]
   53bc0:	lea    rsi,[rcx+0x1]
   53bc4:	jmp    53939 <transit_state_bkref.isra.0+0x159>
   53bc9:	nop    DWORD PTR [rax+0x0]
   53bd0:	mov    rax,QWORD PTR [r14+0x98]
   53bd7:	cmp    QWORD PTR [r14+0xe8],0x0
   53bdf:	mov    rdx,QWORD PTR [rax]
   53be2:	mov    QWORD PTR [rsp+0x60],rax
   53be7:	mov    rax,QWORD PTR [rdx+rbp*1]
   53beb:	mov    QWORD PTR [rsp+0x58],rax
   53bf0:	jle    5397b <transit_state_bkref.isra.0+0x19b>
   53bf6:	mov    QWORD PTR [rsp+0x8],0x0
   53bff:	mov    r10,QWORD PTR [r14+0x8]
   53c03:	mov    QWORD PTR [rsp+0x28],r15
   53c08:	mov    QWORD PTR [rsp+0x48],r13
   53c0d:	mov    QWORD PTR [rsp+0x68],rbx
   53c12:	mov    rax,QWORD PTR [r14+0xf8]
   53c19:	mov    rsi,QWORD PTR [rsp+0x8]
   53c1e:	mov    rdi,QWORD PTR [rsp+0x58]
   53c23:	mov    rbx,QWORD PTR [rax+rsi*8]
   53c27:	mov    rax,QWORD PTR [rbx+0x8]
   53c2b:	shl    rax,0x4
   53c2f:	cmp    rdi,QWORD PTR [rdx+rax*1]
   53c33:	je     53c60 <transit_state_bkref.isra.0+0x480>
   53c35:	add    QWORD PTR [rsp+0x8],0x1
   53c3b:	mov    rax,QWORD PTR [rsp+0x8]
   53c40:	cmp    rax,QWORD PTR [r14+0xe8]
   53c47:	jge    53ff4 <transit_state_bkref.isra.0+0x814>
   53c4d:	mov    rax,QWORD PTR [rsp+0x60]
   53c52:	mov    rdx,QWORD PTR [rax]
   53c55:	jmp    53c12 <transit_state_bkref.isra.0+0x432>
   53c57:	nop    WORD PTR [rax+rax*1+0x0]
   53c60:	cmp    QWORD PTR [rbx+0x20],0x0
   53c65:	mov    r15,QWORD PTR [rbx]
   53c68:	jle    5403e <transit_state_bkref.isra.0+0x85e>
   53c6e:	mov    rbp,QWORD PTR [rsp+0x28]
   53c73:	xor    r12d,r12d
   53c76:	mov    r9,r10
   53c79:	jmp    53c8e <transit_state_bkref.isra.0+0x4ae>
   53c7b:	nop    DWORD PTR [rax+rax*1+0x0]
   53c80:	add    r12,0x1
   53c84:	cmp    r12,QWORD PTR [rbx+0x20]
   53c88:	jge    53de7 <transit_state_bkref.isra.0+0x607>
   53c8e:	mov    rax,QWORD PTR [rbx+0x28]
   53c92:	mov    rcx,r15
   53c95:	mov    r8,rbp
   53c98:	mov    r13,QWORD PTR [rax+r12*8]
   53c9c:	mov    r15,QWORD PTR [r13+0x8]
   53ca0:	mov    rdx,r15
   53ca3:	sub    rdx,rcx
   53ca6:	add    rbp,rdx
   53ca9:	test   rdx,rdx
   53cac:	jle    53ceb <transit_state_bkref.isra.0+0x50b>
   53cae:	cmp    QWORD PTR [r14+0x30],rbp
   53cb2:	jl     53d80 <transit_state_bkref.isra.0+0x5a0>
   53cb8:	lea    rsi,[r9+rcx*1]
   53cbc:	lea    rdi,[r9+r8*1]
   53cc0:	mov    QWORD PTR [rsp+0x20],rcx
   53cc5:	mov    QWORD PTR [rsp+0x18],r8
   53cca:	mov    QWORD PTR [rsp+0x10],r9
   53ccf:	call   c870 <memcmp@plt>
   53cd4:	mov    r9,QWORD PTR [rsp+0x10]
   53cd9:	mov    r8,QWORD PTR [rsp+0x18]
   53cde:	test   eax,eax
   53ce0:	mov    rcx,QWORD PTR [rsp+0x20]
   53ce5:	jne    53fa0 <transit_state_bkref.isra.0+0x7c0>
   53ceb:	mov    r8,QWORD PTR [rsp+0x28]
   53cf0:	mov    rcx,QWORD PTR [rsp+0x48]
   53cf5:	mov    rdx,r13
   53cf8:	mov    rsi,rbx
   53cfb:	mov    rdi,r14
   53cfe:	call   53640 <get_subexp_sub.isra.0>
   53d03:	mov    r9,QWORD PTR [r14+0x8]
   53d07:	cmp    eax,0x1
   53d0a:	jbe    53c80 <transit_state_bkref.isra.0+0x4a0>
   53d10:	jmp    53b90 <transit_state_bkref.isra.0+0x3b0>
   53d15:	nop    DWORD PTR [rax]
   53d18:	mov    rax,QWORD PTR [rsp+0x10]
   53d1d:	mov    rcx,r15
   53d20:	mov    rdi,rbx
   53d23:	lea    rbp,[rax+0x8]
   53d27:	lea    rdx,[rax+0x10]
   53d2b:	mov    rsi,rbp
   53d2e:	mov    QWORD PTR [rsp+0x8],rdx
   53d33:	call   51140 <check_subexp_matching_top.isra.0>
   53d38:	mov    DWORD PTR [rsp+0x7c],eax
   53d3c:	test   eax,eax
   53d3e:	jne    53b90 <transit_state_bkref.isra.0+0x3b0>
   53d44:	mov    rdx,QWORD PTR [rsp+0x8]
   53d49:	mov    rsi,rbp
   53d4c:	mov    rdi,rbx
   53d4f:	call   537e0 <transit_state_bkref.isra.0>
   53d54:	mov    DWORD PTR [rsp+0x7c],eax
   53d58:	test   eax,eax
   53d5a:	jne    53b90 <transit_state_bkref.isra.0+0x3b0>
   53d60:	add    r14,0x1
   53d64:	cmp    r14,QWORD PTR [rbx+0xc8]
   53d6b:	jl     53af1 <transit_state_bkref.isra.0+0x311>
   53d71:	nop    DWORD PTR [rax+0x0]
   53d78:	mov    r14,rbx
   53d7b:	jmp    53870 <transit_state_bkref.isra.0+0x90>
   53d80:	mov    QWORD PTR [rsp+0x10],rdx
   53d85:	cmp    QWORD PTR [r14+0x58],rbp
   53d89:	jl     53fa0 <transit_state_bkref.isra.0+0x7c0>
   53d8f:	mov    rsi,rbp
   53d92:	mov    rdi,r14
   53d95:	mov    QWORD PTR [rsp+0x20],r8
   53d9a:	mov    QWORD PTR [rsp+0x18],rcx
   53d9f:	call   4d230 <clean_state_log_if_needed>
   53da4:	test   eax,eax
   53da6:	jne    53b90 <transit_state_bkref.isra.0+0x3b0>
   53dac:	mov    r9,QWORD PTR [r14+0x8]
   53db0:	mov    rdx,QWORD PTR [rsp+0x10]
   53db5:	mov    r8,QWORD PTR [rsp+0x20]
   53dba:	mov    rcx,QWORD PTR [rsp+0x18]
   53dbf:	jmp    53cb8 <transit_state_bkref.isra.0+0x4d8>
   53dc4:	nop    DWORD PTR [rax+0x0]
   53dc8:	mov    rdi,QWORD PTR [rsp+0x90]
   53dd0:	call   4bdc0 <rpl_free>
   53dd5:	mov    eax,DWORD PTR [rsp+0x7c]
   53dd9:	jmp    53b90 <transit_state_bkref.isra.0+0x3b0>
   53dde:	xchg   ax,ax
   53de0:	xor    eax,eax
   53de2:	jmp    53b90 <transit_state_bkref.isra.0+0x3b0>
   53de7:	mov    r10,r9
   53dea:	lea    r13,[r15+0x1]
   53dee:	mov    r11,rbp
   53df1:	cmp    QWORD PTR [rsp+0x28],r13
   53df6:	jl     53c35 <transit_state_bkref.isra.0+0x455>
   53dfc:	mov    rbp,QWORD PTR [rsp+0x58]
   53e01:	mov    r12,r11
   53e04:	mov    r15,r14
   53e07:	nop    WORD PTR [rax+rax*1+0x0]
   53e10:	mov    rax,r13
   53e13:	sub    rax,QWORD PTR [rbx]
   53e16:	test   rax,rax
   53e19:	jle    53e3d <transit_state_bkref.isra.0+0x65d>
   53e1b:	cmp    QWORD PTR [r15+0x30],r12
   53e1f:	jle    53fd0 <transit_state_bkref.isra.0+0x7f0>
   53e25:	movzx  edi,BYTE PTR [r10+r13*1-0x1]
   53e2b:	lea    rax,[r12+0x1]
   53e30:	cmp    BYTE PTR [r10+r12*1],dil
   53e34:	jne    53f56 <transit_state_bkref.isra.0+0x776>
   53e3a:	mov    r12,rax
   53e3d:	mov    rax,QWORD PTR [r15+0xb8]
   53e44:	mov    rax,QWORD PTR [rax+r13*8]
   53e48:	test   rax,rax
   53e4b:	je     53f47 <transit_state_bkref.isra.0+0x767>
   53e51:	mov    rcx,QWORD PTR [rax+0x10]
   53e55:	test   rcx,rcx
   53e58:	jle    53f47 <transit_state_bkref.isra.0+0x767>
   53e5e:	mov    rdi,QWORD PTR [rax+0x18]
   53e62:	mov    rax,QWORD PTR [rsp+0x60]
   53e67:	xor    edx,edx
   53e69:	mov    rsi,QWORD PTR [rax]
   53e6c:	jmp    53e7d <transit_state_bkref.isra.0+0x69d>
   53e6e:	xchg   ax,ax
   53e70:	add    rdx,0x1
   53e74:	cmp    rcx,rdx
   53e77:	je     53f47 <transit_state_bkref.isra.0+0x767>
   53e7d:	mov    r14,QWORD PTR [rdi+rdx*8]
   53e81:	mov    rax,r14
   53e84:	shl    rax,0x4
   53e88:	add    rax,rsi
   53e8b:	cmp    BYTE PTR [rax+0x8],0x9
   53e8f:	jne    53e70 <transit_state_bkref.isra.0+0x690>
   53e91:	cmp    rbp,QWORD PTR [rax]
   53e94:	jne    53e70 <transit_state_bkref.isra.0+0x690>
   53e96:	cmp    r14,0xffffffffffffffff
   53e9a:	je     53f47 <transit_state_bkref.isra.0+0x767>
   53ea0:	mov    rsi,QWORD PTR [rbx+0x10]
   53ea4:	mov    rcx,QWORD PTR [rbx]
   53ea7:	test   rsi,rsi
   53eaa:	je     53f5e <transit_state_bkref.isra.0+0x77e>
   53eb0:	mov    QWORD PTR [rsp+0x10],r10
   53eb5:	sub    rsp,0x8
   53eb9:	mov    rdx,QWORD PTR [rbx+0x8]
   53ebd:	mov    r9,r13
   53ec0:	push   0x9
   53ec2:	mov    r8,r14
   53ec5:	mov    rdi,r15
   53ec8:	call   525a0 <check_arrival>
   53ecd:	pop    rdx
   53ece:	pop    rcx
   53ecf:	cmp    eax,0x1
   53ed2:	mov    r10,QWORD PTR [rsp+0x10]
   53ed7:	je     53f47 <transit_state_bkref.isra.0+0x767>
   53ed9:	test   eax,eax
   53edb:	jne    53b90 <transit_state_bkref.isra.0+0x3b0>
   53ee1:	mov    rax,QWORD PTR [rbx+0x18]
   53ee5:	cmp    QWORD PTR [rbx+0x20],rax
   53ee9:	je     54008 <transit_state_bkref.isra.0+0x828>
   53eef:	mov    esi,0x28
   53ef4:	mov    edi,0x1
   53ef9:	call   c880 <calloc@plt>
   53efe:	mov    rdx,rax
   53f01:	test   rax,rax
   53f04:	je     53f96 <transit_state_bkref.isra.0+0x7b6>
   53f0a:	mov    rax,QWORD PTR [rbx+0x20]
   53f0e:	mov    rcx,QWORD PTR [rbx+0x28]
   53f12:	mov    rsi,rbx
   53f15:	mov    rdi,r15
   53f18:	mov    r8,QWORD PTR [rsp+0x28]
   53f1d:	mov    QWORD PTR [rcx+rax*8],rdx
   53f21:	add    rax,0x1
   53f25:	mov    rcx,QWORD PTR [rsp+0x48]
   53f2a:	mov    QWORD PTR [rdx],r14
   53f2d:	mov    QWORD PTR [rdx+0x8],r13
   53f31:	mov    QWORD PTR [rbx+0x20],rax
   53f35:	call   53640 <get_subexp_sub.isra.0>
   53f3a:	mov    r10,QWORD PTR [r15+0x8]
   53f3e:	cmp    eax,0x1
   53f41:	ja     53b90 <transit_state_bkref.isra.0+0x3b0>
   53f47:	add    r13,0x1
   53f4b:	cmp    QWORD PTR [rsp+0x28],r13
   53f50:	jge    53e10 <transit_state_bkref.isra.0+0x630>
   53f56:	mov    r14,r15
   53f59:	jmp    53c35 <transit_state_bkref.isra.0+0x455>
   53f5e:	mov    rsi,r13
   53f61:	mov    edi,0x18
   53f66:	mov    QWORD PTR [rsp+0x18],r10
   53f6b:	sub    rsi,rcx
   53f6e:	mov    QWORD PTR [rsp+0x10],rcx
   53f73:	add    rsi,0x1
   53f77:	call   c880 <calloc@plt>
   53f7c:	mov    rcx,QWORD PTR [rsp+0x10]
   53f81:	mov    r10,QWORD PTR [rsp+0x18]
   53f86:	test   rax,rax
   53f89:	mov    QWORD PTR [rbx+0x10],rax
   53f8d:	mov    rsi,rax
   53f90:	jne    53eb0 <transit_state_bkref.isra.0+0x6d0>
   53f96:	mov    eax,0xc
   53f9b:	jmp    53b90 <transit_state_bkref.isra.0+0x3b0>
   53fa0:	mov    r10,r9
   53fa3:	mov    r13,rcx
   53fa6:	mov    r11,r8
   53fa9:	cmp    r12,QWORD PTR [rbx+0x20]
   53fad:	jl     53c35 <transit_state_bkref.isra.0+0x455>
   53fb3:	test   r12,r12
   53fb6:	je     53df1 <transit_state_bkref.isra.0+0x611>
   53fbc:	mov    rbp,r8
   53fbf:	mov    r15,rcx
   53fc2:	jmp    53dea <transit_state_bkref.isra.0+0x60a>
   53fc7:	nop    WORD PTR [rax+rax*1+0x0]
   53fd0:	cmp    QWORD PTR [r15+0x58],r12
   53fd4:	jle    53f56 <transit_state_bkref.isra.0+0x776>
   53fd6:	lea    esi,[r12+0x1]
   53fdb:	mov    rdi,r15
   53fde:	call   4d0c0 <extend_buffers>
   53fe3:	test   eax,eax
   53fe5:	jne    53b90 <transit_state_bkref.isra.0+0x3b0>
   53feb:	mov    r10,QWORD PTR [r15+0x8]
   53fef:	jmp    53e25 <transit_state_bkref.isra.0+0x645>
   53ff4:	mov    r15,QWORD PTR [rsp+0x28]
   53ff9:	mov    r13,QWORD PTR [rsp+0x48]
   53ffe:	mov    rbx,QWORD PTR [rsp+0x68]
   54003:	jmp    5397b <transit_state_bkref.isra.0+0x19b>
   54008:	lea    rdx,[rax+rax*1+0x1]
   5400d:	mov    rdi,QWORD PTR [rbx+0x28]
   54011:	lea    rsi,[rdx*8+0x0]
   54019:	mov    QWORD PTR [rsp+0x10],rdx
   5401e:	call   ca20 <realloc@plt>
   54023:	test   rax,rax
   54026:	je     53f96 <transit_state_bkref.isra.0+0x7b6>
   5402c:	mov    rdx,QWORD PTR [rsp+0x10]
   54031:	mov    QWORD PTR [rbx+0x28],rax
   54035:	mov    QWORD PTR [rbx+0x18],rdx
   54039:	jmp    53eef <transit_state_bkref.isra.0+0x70f>
   5403e:	mov    r11,QWORD PTR [rsp+0x28]
   54043:	mov    r13,r15
   54046:	jmp    53df1 <transit_state_bkref.isra.0+0x611>
   5404b:	call   c7b0 <__stack_chk_fail@plt>

0000000000054050 <merge_state_with_log>:
   54050:	push   r15
   54052:	push   r14
   54054:	push   r13
   54056:	mov    r13,rdi
   54059:	push   r12
   5405b:	push   rbp
   5405c:	push   rbx
   5405d:	mov    rbx,rsi
   54060:	sub    rsp,0x38
   54064:	mov    rbp,QWORD PTR [rsi+0x48]
   54068:	mov    r14,QWORD PTR [rsi+0xb8]
   5406f:	mov    rax,QWORD PTR fs:0x28
   54078:	mov    QWORD PTR [rsp+0x28],rax
   5407d:	xor    eax,eax
   5407f:	mov    r15,QWORD PTR [rsi+0x98]
   54086:	lea    r12,[rbp*8+0x0]
   5408e:	add    r14,r12
   54091:	cmp    QWORD PTR [rsi+0xc0],rbp
   54098:	jge    540e0 <merge_state_with_log+0x90>
   5409a:	mov    QWORD PTR [r14],rdx
   5409d:	mov    r12,rdx
   540a0:	mov    QWORD PTR [rsi+0xc0],rbp
   540a7:	cmp    QWORD PTR [r15+0x98],0x0
   540af:	jne    541d8 <merge_state_with_log+0x188>
   540b5:	mov    rax,QWORD PTR [rsp+0x28]
   540ba:	xor    rax,QWORD PTR fs:0x28
   540c3:	jne    54240 <merge_state_with_log+0x1f0>
   540c9:	add    rsp,0x38
   540cd:	mov    rax,r12
   540d0:	pop    rbx
   540d1:	pop    rbp
   540d2:	pop    r12
   540d4:	pop    r13
   540d6:	pop    r14
   540d8:	pop    r15
   540da:	ret    
   540db:	nop    DWORD PTR [rax+rax*1+0x0]
   540e0:	mov    rax,QWORD PTR [r14]
   540e3:	test   rax,rax
   540e6:	je     541c8 <merge_state_with_log+0x178>
   540ec:	mov    r10,QWORD PTR [rax+0x50]
   540f0:	test   rdx,rdx
   540f3:	je     54180 <merge_state_with_log+0x130>
   540f9:	mov    rax,QWORD PTR [rdx+0x50]
   540fd:	lea    r14,[rsp+0x10]
   54102:	mov    rdx,r10
   54105:	mov    rdi,r14
   54108:	mov    rsi,rax
   5410b:	mov    QWORD PTR [rsp],rax
   5410f:	call   4ecc0 <re_node_set_init_union>
   54114:	mov    DWORD PTR [r13+0x0],eax
   54118:	test   eax,eax
   5411a:	jne    54238 <merge_state_with_log+0x1e8>
   54120:	mov    rax,QWORD PTR [rbx+0x48]
   54124:	mov    edx,DWORD PTR [rbx+0xa0]
   5412a:	mov    rdi,rbx
   5412d:	lea    rsi,[rax-0x1]
   54131:	call   50650 <re_string_context_at>
   54136:	mov    rdx,r14
   54139:	mov    rsi,r15
   5413c:	mov    rdi,r13
   5413f:	mov    r8,QWORD PTR [rbx+0xb8]
   54146:	mov    ecx,eax
   54148:	add    r8,r12
   5414b:	mov    QWORD PTR [rsp+0x8],r8
   54150:	call   4ee30 <re_acquire_state_context>
   54155:	mov    r8,QWORD PTR [rsp+0x8]
   5415a:	cmp    QWORD PTR [rsp],0x0
   5415f:	mov    r12,rax
   54162:	mov    QWORD PTR [r8],rax
   54165:	je     540a7 <merge_state_with_log+0x57>
   5416b:	mov    rdi,QWORD PTR [rsp+0x20]
   54170:	call   4bdc0 <rpl_free>
   54175:	jmp    540a7 <merge_state_with_log+0x57>
   5417a:	nop    WORD PTR [rax+rax*1+0x0]
   54180:	movdqu xmm0,XMMWORD PTR [r10]
   54185:	mov    edx,DWORD PTR [rsi+0xa0]
   5418b:	mov    rdi,rbx
   5418e:	lea    rsi,[rbp-0x1]
   54192:	movaps XMMWORD PTR [rsp+0x10],xmm0
   54197:	mov    rax,QWORD PTR [r10+0x10]
   5419b:	mov    QWORD PTR [rsp+0x20],rax
   541a0:	call   50650 <re_string_context_at>
   541a5:	lea    rdx,[rsp+0x10]
   541aa:	mov    rsi,r15
   541ad:	mov    rdi,r13
   541b0:	mov    ecx,eax
   541b2:	call   4ee30 <re_acquire_state_context>
   541b7:	mov    QWORD PTR [r14],rax
   541ba:	mov    r12,rax
   541bd:	jmp    540a7 <merge_state_with_log+0x57>
   541c2:	nop    WORD PTR [rax+rax*1+0x0]
   541c8:	mov    QWORD PTR [r14],rdx
   541cb:	mov    r12,rdx
   541ce:	jmp    540a7 <merge_state_with_log+0x57>
   541d3:	nop    DWORD PTR [rax+rax*1+0x0]
   541d8:	test   r12,r12
   541db:	je     54238 <merge_state_with_log+0x1e8>
   541dd:	lea    r14,[r12+0x10]
   541e2:	lea    r15,[r12+0x18]
   541e7:	mov    rcx,rbp
   541ea:	mov    rdi,rbx
   541ed:	mov    rdx,r15
   541f0:	mov    rsi,r14
   541f3:	call   51140 <check_subexp_matching_top.isra.0>
   541f8:	mov    DWORD PTR [r13+0x0],eax
   541fc:	test   eax,eax
   541fe:	jne    54238 <merge_state_with_log+0x1e8>
   54200:	test   BYTE PTR [r12+0x68],0x40
   54206:	je     540b5 <merge_state_with_log+0x65>
   5420c:	mov    rdx,r15
   5420f:	mov    rsi,r14
   54212:	mov    rdi,rbx
   54215:	call   537e0 <transit_state_bkref.isra.0>
   5421a:	mov    DWORD PTR [r13+0x0],eax
   5421e:	test   eax,eax
   54220:	jne    54238 <merge_state_with_log+0x1e8>
   54222:	mov    rax,QWORD PTR [rbx+0xb8]
   54229:	mov    r12,QWORD PTR [rax+rbp*8]
   5422d:	jmp    540b5 <merge_state_with_log+0x65>
   54232:	nop    WORD PTR [rax+rax*1+0x0]
   54238:	xor    r12d,r12d
   5423b:	jmp    540b5 <merge_state_with_log+0x65>
   54240:	call   c7b0 <__stack_chk_fail@plt>
   54245:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000054250 <sift_states_backward>:
   54250:	push   r15
   54252:	mov    r15,rsi
   54255:	push   r14
   54257:	push   r13
   54259:	push   r12
   5425b:	push   rbp
   5425c:	mov    rbp,rdi
   5425f:	mov    edi,0x8
   54264:	push   rbx
   54265:	sub    rsp,0x68
   54269:	mov    rbx,QWORD PTR [rsi+0x18]
   5426d:	mov    r12,QWORD PTR [rsi+0x10]
   54271:	mov    rax,QWORD PTR fs:0x28
   5427a:	mov    QWORD PTR [rsp+0x58],rax
   5427f:	xor    eax,eax
   54281:	mov    QWORD PTR [rsp+0x40],0x1
   5428a:	mov    QWORD PTR [rsp+0x48],0x1
   54293:	call   c0e0 <malloc@plt>
   54298:	mov    QWORD PTR [rsp+0x50],rax
   5429d:	test   rax,rax
   542a0:	je     54568 <sift_states_backward+0x318>
   542a6:	mov    QWORD PTR [rax],r12
   542a9:	lea    rcx,[rsp+0x40]
   542ae:	mov    rdx,rbx
   542b1:	mov    rsi,r15
   542b4:	mov    rdi,rbp
   542b7:	mov    QWORD PTR [rsp+0x18],rcx
   542bc:	call   55d30 <update_cur_sifted_state>
   542c1:	test   eax,eax
   542c3:	jne    544f0 <sift_states_backward+0x2a0>
   542c9:	lea    rax,[r15+0x30]
   542cd:	mov    DWORD PTR [rsp+0x14],0x0
   542d5:	mov    QWORD PTR [rsp+0x38],rax
   542da:	test   rbx,rbx
   542dd:	jle    54560 <sift_states_backward+0x310>
   542e3:	mov    rdi,QWORD PTR [r15]
   542e6:	lea    rax,[rbx*8+0x0]
   542ee:	mov    QWORD PTR [rsp+0x8],rax
   542f3:	cmp    QWORD PTR [rdi+rbx*8],0x0
   542f8:	je     54530 <sift_states_backward+0x2e0>
   542fe:	mov    DWORD PTR [rsp+0x14],0x0
   54306:	mov    eax,DWORD PTR [rsp+0x14]
   5430a:	cmp    DWORD PTR [rbp+0xe0],eax
   54310:	jl     54545 <sift_states_backward+0x2f5>
   54316:	mov    rax,QWORD PTR [rbp+0xb8]
   5431d:	mov    rcx,QWORD PTR [rsp+0x8]
   54322:	sub    rbx,0x1
   54326:	mov    QWORD PTR [rsp+0x48],0x0
   5432f:	mov    r13,QWORD PTR [rax+rcx*1-0x8]
   54334:	test   r13,r13
   54337:	je     544d0 <sift_states_backward+0x280>
   5433d:	cmp    QWORD PTR [r13+0x28],0x0
   54342:	mov    r12,QWORD PTR [rbp+0x98]
   54349:	jle    544d0 <sift_states_backward+0x280>
   5434f:	mov    QWORD PTR [rsp],0x0
   54357:	jmp    543fb <sift_states_backward+0x1ab>
   5435c:	nop    DWORD PTR [rax+0x0]
   54360:	mov    rdx,rbx
   54363:	mov    rdi,rbp
   54366:	call   50740 <check_node_accept>
   5436b:	test   al,al
   5436d:	je     543e8 <sift_states_backward+0x198>
   5436f:	mov    rax,QWORD PTR [r15]
   54372:	mov    rcx,QWORD PTR [rsp+0x8]
   54377:	mov    rax,QWORD PTR [rax+rcx*1]
   5437b:	test   rax,rax
   5437e:	je     543e8 <sift_states_backward+0x198>
   54380:	mov    rdx,QWORD PTR [r12+0x18]
   54385:	mov    rdi,QWORD PTR [rax+0x10]
   54389:	lea    rsi,[rax+0x18]
   5438d:	mov    rdx,QWORD PTR [rdx+r14*8]
   54391:	call   4db50 <re_node_set_contains.isra.0>
   54396:	test   rax,rax
   54399:	je     543e8 <sift_states_backward+0x198>
   5439b:	mov    r8d,0x1
   543a1:	cmp    QWORD PTR [r15+0x28],0x0
   543a6:	je     543d3 <sift_states_backward+0x183>
   543a8:	mov    rax,QWORD PTR [r12+0x18]
   543ad:	sub    rsp,0x8
   543b1:	lea    rsi,[r15+0x28]
   543b5:	mov    r9,r14
   543b8:	add    r8,rbx
   543bb:	mov    rdi,rbp
   543be:	mov    rcx,QWORD PTR [rax+r14*8]
   543c2:	push   rbx
   543c3:	mov    rdx,QWORD PTR [rsp+0x48]
   543c8:	call   4dde0 <check_dst_limits.isra.0>
   543cd:	pop    rdx
   543ce:	pop    rcx
   543cf:	test   al,al
   543d1:	jne    543e8 <sift_states_backward+0x198>
   543d3:	mov    rdi,QWORD PTR [rsp+0x18]
   543d8:	mov    rsi,r14
   543db:	call   4c580 <re_node_set_insert>
   543e0:	test   al,al
   543e2:	je     54520 <sift_states_backward+0x2d0>
   543e8:	add    QWORD PTR [rsp],0x1
   543ed:	mov    rax,QWORD PTR [rsp]
   543f1:	cmp    rax,QWORD PTR [r13+0x28]
   543f5:	jge    544d0 <sift_states_backward+0x280>
   543fb:	mov    rax,QWORD PTR [r13+0x30]
   543ff:	mov    rcx,QWORD PTR [rsp]
   54403:	mov    rsi,QWORD PTR [r12]
   54407:	mov    r14,QWORD PTR [rax+rcx*8]
   5440b:	mov    r11,r14
   5440e:	shl    r11,0x4
   54412:	add    rsi,r11
   54415:	test   BYTE PTR [rsi+0xa],0x10
   54419:	je     54360 <sift_states_backward+0x110>
   5441f:	mov    r10,QWORD PTR [rbp+0x98]
   54426:	mov    r8,rbx
   54429:	mov    rcx,rbp
   5442c:	mov    rdx,r14
   5442f:	mov    rax,QWORD PTR [r15+0x18]
   54433:	mov    QWORD PTR [rsp+0x28],r11
   54438:	mov    rdi,QWORD PTR [r10]
   5443b:	lea    rsi,[r10+0xd8]
   54442:	mov    QWORD PTR [rsp+0x30],r10
   54447:	mov    QWORD PTR [rsp+0x20],rax
   5444c:	call   52300 <check_node_accept_bytes.isra.0>
   54451:	mov    r11,QWORD PTR [rsp+0x28]
   54456:	movsxd r8,eax
   54459:	test   r8d,r8d
   5445c:	jle    544b8 <sift_states_backward+0x268>
   5445e:	movsxd rax,r8d
   54461:	add    rax,rbx
   54464:	cmp    QWORD PTR [rsp+0x20],rax
   54469:	jl     543a1 <sift_states_backward+0x151>
   5446f:	mov    rdx,QWORD PTR [r15]
   54472:	mov    r10,QWORD PTR [rsp+0x30]
   54477:	mov    rax,QWORD PTR [rdx+rax*8]
   5447b:	test   rax,rax
   5447e:	je     544be <sift_states_backward+0x26e>
   54480:	mov    rdx,QWORD PTR [r10+0x18]
   54484:	mov    rdi,QWORD PTR [rax+0x10]
   54488:	lea    rsi,[rax+0x18]
   5448c:	mov    QWORD PTR [rsp+0x20],r11
   54491:	mov    rdx,QWORD PTR [rdx+r14*8]
   54495:	call   4db50 <re_node_set_contains.isra.0>
   5449a:	test   rax,rax
   5449d:	jne    543a1 <sift_states_backward+0x151>
   544a3:	mov    r11,QWORD PTR [rsp+0x20]
   544a8:	mov    rsi,QWORD PTR [r12]
   544ac:	add    rsi,r11
   544af:	jmp    54360 <sift_states_backward+0x110>
   544b4:	nop    DWORD PTR [rax+0x0]
   544b8:	jne    543a1 <sift_states_backward+0x151>
   544be:	mov    rsi,QWORD PTR [r12]
   544c2:	add    rsi,r11
   544c5:	jmp    54360 <sift_states_backward+0x110>
   544ca:	nop    WORD PTR [rax+rax*1+0x0]
   544d0:	mov    rcx,QWORD PTR [rsp+0x18]
   544d5:	mov    rdx,rbx
   544d8:	mov    rsi,r15
   544db:	mov    rdi,rbp
   544de:	call   55d30 <update_cur_sifted_state>
   544e3:	test   eax,eax
   544e5:	je     542da <sift_states_backward+0x8a>
   544eb:	nop    DWORD PTR [rax+rax*1+0x0]
   544f0:	mov    rdi,QWORD PTR [rsp+0x50]
   544f5:	mov    DWORD PTR [rsp],eax
   544f8:	call   4bdc0 <rpl_free>
   544fd:	mov    eax,DWORD PTR [rsp]
   54500:	mov    rdx,QWORD PTR [rsp+0x58]
   54505:	xor    rdx,QWORD PTR fs:0x28
   5450e:	jne    5456f <sift_states_backward+0x31f>
   54510:	add    rsp,0x68
   54514:	pop    rbx
   54515:	pop    rbp
   54516:	pop    r12
   54518:	pop    r13
   5451a:	pop    r14
   5451c:	pop    r15
   5451e:	ret    
   5451f:	nop
   54520:	mov    eax,0xc
   54525:	jmp    544f0 <sift_states_backward+0x2a0>
   54527:	nop    WORD PTR [rax+rax*1+0x0]
   54530:	add    DWORD PTR [rsp+0x14],0x1
   54535:	mov    eax,DWORD PTR [rsp+0x14]
   54539:	cmp    DWORD PTR [rbp+0xe0],eax
   5453f:	jge    54316 <sift_states_backward+0xc6>
   54545:	mov    rdx,QWORD PTR [rsp+0x8]
   5454a:	xor    esi,esi
   5454c:	call   bed0 <memset@plt>
   54551:	mov    rdi,QWORD PTR [rsp+0x50]
   54556:	call   4bdc0 <rpl_free>
   5455b:	xor    eax,eax
   5455d:	jmp    54500 <sift_states_backward+0x2b0>
   5455f:	nop
   54560:	xor    eax,eax
   54562:	jmp    544f0 <sift_states_backward+0x2a0>
   54564:	nop    DWORD PTR [rax+0x0]
   54568:	mov    eax,0xc
   5456d:	jmp    54500 <sift_states_backward+0x2b0>
   5456f:	call   c7b0 <__stack_chk_fail@plt>
   54574:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5457f:	nop

0000000000054580 <re_search_internal>:
   54580:	push   r15
   54582:	push   r14
   54584:	push   r13
   54586:	push   r12
   54588:	mov    r12,r9
   5458b:	push   rbp
   5458c:	mov    rbp,r8
   5458f:	push   rbx
   54590:	mov    rbx,rcx
   54593:	mov    ecx,0x20
   54598:	sub    rsp,0x228
   5459f:	mov    rax,QWORD PTR [rsp+0x268]
   545a7:	mov    QWORD PTR [rsp+0x48],rdi
   545ac:	lea    r15,[rsp+0x110]
   545b4:	mov    QWORD PTR [rsp+0x88],rsi
   545bc:	mov    rsi,rdi
   545bf:	mov    QWORD PTR [rsp+0x78],rdx
   545c4:	mov    QWORD PTR [rsp+0xb0],rax
   545cc:	mov    rax,QWORD PTR fs:0x28
   545d5:	mov    QWORD PTR [rsp+0x218],rax
   545dd:	xor    eax,eax
   545df:	mov    rax,QWORD PTR [rdi]
   545e2:	mov    rdi,r15
   545e5:	mov    rdx,rax
   545e8:	mov    QWORD PTR [rsp+0x18],rax
   545ed:	xor    eax,eax
   545ef:	rep stos QWORD PTR es:[rdi],rax
   545f2:	mov    rcx,QWORD PTR [rsi+0x20]
   545f6:	mov    QWORD PTR [rsp+0x1a8],rdx
   545fe:	mov    QWORD PTR [rsp+0x68],rcx
   54603:	test   rcx,rcx
   54606:	je     5462a <re_search_internal+0xaa>
   54608:	movzx  edx,BYTE PTR [rsi+0x38]
   5460c:	test   dl,0x8
   5460f:	je     54b78 <re_search_internal+0x5f8>
   54615:	cmp    rbx,r8
   54618:	je     54b78 <re_search_internal+0x5f8>
   5461e:	and    edx,0x1
   54621:	cmove  rax,rcx
   54625:	mov    QWORD PTR [rsp+0x68],rax
   5462a:	mov    rax,QWORD PTR [rsp+0x48]
   5462f:	mov    QWORD PTR [rsp+0x98],0x0
   5463b:	mov    rax,QWORD PTR [rax+0x30]
   5463f:	cmp    rax,QWORD PTR [rsp+0x260]
   54647:	jae    5466e <re_search_internal+0xee>
   54649:	mov    rcx,QWORD PTR [rsp+0x260]
   54651:	lea    rdx,[rcx-0x1]
   54655:	mov    rsi,rdx
   54658:	sub    rsi,rax
   5465b:	sub    rax,rdx
   5465e:	add    QWORD PTR [rsp+0x260],rax
   54666:	mov    QWORD PTR [rsp+0x98],rsi
   5466e:	mov    rdi,QWORD PTR [rsp+0x48]
   54673:	cmp    QWORD PTR [rdi+0x10],0x0
   54678:	je     55700 <re_search_internal+0x1180>
   5467e:	mov    rsi,QWORD PTR [rsp+0x18]
   54683:	mov    rax,QWORD PTR [rsi+0x48]
   54687:	test   rax,rax
   5468a:	je     55700 <re_search_internal+0x1180>
   54690:	mov    rdx,QWORD PTR [rsi+0x50]
   54694:	test   rdx,rdx
   54697:	je     55700 <re_search_internal+0x1180>
   5469d:	mov    rcx,QWORD PTR [rsi+0x58]
   546a1:	test   rcx,rcx
   546a4:	je     55700 <re_search_internal+0x1180>
   546aa:	cmp    QWORD PTR [rsi+0x60],0x0
   546af:	je     55700 <re_search_internal+0x1180>
   546b5:	cmp    QWORD PTR [rax+0x10],0x0
   546ba:	jne    546f0 <re_search_internal+0x170>
   546bc:	cmp    QWORD PTR [rdx+0x10],0x0
   546c1:	jne    546f0 <re_search_internal+0x170>
   546c3:	cmp    QWORD PTR [rcx+0x10],0x0
   546c8:	je     546d0 <re_search_internal+0x150>
   546ca:	cmp    BYTE PTR [rdi+0x38],0x0
   546ce:	js     546f0 <re_search_internal+0x170>
   546d0:	test   rbx,rbx
   546d3:	je     546e6 <re_search_internal+0x166>
   546d5:	mov    DWORD PTR [rsp+0x54],0x1
   546dd:	test   rbp,rbp
   546e0:	jne    55708 <re_search_internal+0x1188>
   546e6:	xor    ebp,ebp
   546e8:	xor    ebx,ebx
   546ea:	nop    WORD PTR [rax+rax*1+0x0]
   546f0:	cmp    QWORD PTR [rsp+0x260],0x0
   546f9:	mov    DWORD PTR [rsp+0x50],0x1
   54701:	je     54b58 <re_search_internal+0x5d8>
   54707:	mov    rax,QWORD PTR [rsp+0x48]
   5470c:	mov    r11,QWORD PTR [rsp+0x18]
   54711:	mov    rcx,QWORD PTR [rsp+0x78]
   54716:	mov    rdi,QWORD PTR [rax+0x28]
   5471a:	mov    rax,QWORD PTR [rax+0x18]
   5471e:	mov    edx,DWORD PTR [r11+0xb4]
   54725:	mov    QWORD PTR [rsp+0x8],rax
   5472a:	mov    rax,QWORD PTR [r11+0x10]
   5472e:	mov    DWORD PTR [rsp+0x1a0],edx
   54735:	lea    rsi,[rax+0x1]
   54739:	mov    QWORD PTR [rsp+0x10],rax
   5473e:	movsxd rax,edx
   54741:	cmp    rsi,rax
   54744:	mov    QWORD PTR [rsp+0xa0],rdi
   5474c:	cmovl  rsi,rax
   54750:	lea    rax,[rcx+0x1]
   54754:	mov    QWORD PTR [rsp+0x188],rdi
   5475c:	mov    QWORD PTR [rsp+0x168],rcx
   54764:	cmp    rsi,rax
   54767:	mov    QWORD PTR [rsp+0x160],rcx
   5476f:	cmovg  rsi,rax
   54773:	mov    rax,QWORD PTR [rsp+0x88]
   5477b:	mov    QWORD PTR [rsp+0x178],rcx
   54783:	mov    QWORD PTR [rsp+0x170],rcx
   5478b:	mov    QWORD PTR [rsp+0x110],rax
   54793:	mov    rax,QWORD PTR [rsp+0x8]
   54798:	and    eax,0x400000
   5479d:	setne  BYTE PTR [rsp+0x198]
   547a5:	or     rax,rdi
   547a8:	mov    rdi,r15
   547ab:	movzx  eax,BYTE PTR [r11+0xb0]
   547b3:	setne  BYTE PTR [rsp+0x19b]
   547bb:	mov    edx,eax
   547bd:	shr    al,0x3
   547c0:	shr    dl,0x2
   547c3:	and    eax,0x1
   547c6:	and    edx,0x1
   547c9:	mov    BYTE PTR [rsp+0x19a],al
   547d0:	mov    BYTE PTR [rsp+0x199],dl
   547d7:	call   4c470 <re_string_realloc_buffers>
   547dc:	mov    DWORD PTR [rsp+0x54],eax
   547e0:	test   eax,eax
   547e2:	jne    55ac0 <re_search_internal+0x1540>
   547e8:	mov    rsi,QWORD PTR [rsp+0x18]
   547ed:	lea    rax,[rsi+0xb8]
   547f4:	mov    QWORD PTR [rsp+0x190],rax
   547fc:	movzx  eax,BYTE PTR [rsi+0xb0]
   54803:	mov    BYTE PTR [rsp+0x8],al
   54807:	shr    al,0x4
   5480a:	and    eax,0x1
   5480d:	cmp    BYTE PTR [rsp+0x19b],0x0
   54815:	mov    BYTE PTR [rsp+0x19e],al
   5481c:	jne    54841 <re_search_internal+0x2c1>
   5481e:	mov    rcx,QWORD PTR [rsp+0x18]
   54823:	mov    rax,QWORD PTR [rsp+0x88]
   5482b:	cmp    DWORD PTR [rcx+0xb4],0x1
   54832:	mov    QWORD PTR [rsp+0x118],rax
   5483a:	mov    rax,QWORD PTR [rsp+0x78]
   5483f:	jle    54843 <re_search_internal+0x2c3>
   54841:	xor    eax,eax
   54843:	mov    QWORD PTR [rsp+0x140],rax
   5484b:	mov    QWORD PTR [rsp+0x148],rax
   54853:	mov    rax,QWORD PTR [rsp+0x48]
   54858:	mov    QWORD PTR [rsp+0x178],r12
   54860:	movzx  eax,BYTE PTR [rax+0x38]
   54864:	mov    QWORD PTR [rsp+0x170],r12
   5486c:	mov    BYTE PTR [rsp+0x8],al
   54870:	shr    al,0x7
   54873:	mov    BYTE PTR [rsp+0x19d],al
   5487a:	mov    rax,QWORD PTR [rsp+0x18]
   5487f:	mov    r13,QWORD PTR [rax+0x98]
   54886:	mov    eax,DWORD PTR [rsp+0x270]
   5488d:	mov    QWORD PTR [rsp+0x1b8],0xffffffffffffffff
   54899:	lea    r12,[r13+r13*1+0x0]
   5489e:	mov    DWORD PTR [rsp+0x1b0],eax
   548a5:	test   r12,r12
   548a8:	jle    548fb <re_search_internal+0x37b>
   548aa:	movabs rax,0x555555555555555
   548b4:	cmp    r12,rax
   548b7:	jg     5576e <re_search_internal+0x11ee>
   548bd:	lea    rdi,[r12+r13*4]
   548c1:	shl    rdi,0x4
   548c5:	call   c0e0 <malloc@plt>
   548ca:	mov    rdi,r13
   548cd:	shl    rdi,0x4
   548d1:	mov    QWORD PTR [rsp+0x1e8],rax
   548d9:	mov    r14,rax
   548dc:	call   c0e0 <malloc@plt>
   548e1:	mov    QWORD PTR [rsp+0x208],rax
   548e9:	test   rax,rax
   548ec:	je     5576e <re_search_internal+0x11ee>
   548f2:	test   r14,r14
   548f5:	je     5576e <re_search_internal+0x11ee>
   548fb:	cmp    QWORD PTR [rsp+0x260],0x1
   54904:	mov    QWORD PTR [rsp+0x1e0],r12
   5490c:	mov    DWORD PTR [rsp+0x1f0],0x1
   54917:	mov    QWORD PTR [rsp+0x200],r12
   5491f:	jbe    55ad0 <re_search_internal+0x1550>
   54925:	mov    rax,QWORD PTR [rsp+0x150]
   5492d:	movabs rdx,0x1ffffffffffffffe
   54937:	cmp    rax,rdx
   5493a:	ja     5576e <re_search_internal+0x11ee>
   54940:	lea    rdi,[rax*8+0x8]
   54948:	call   c0e0 <malloc@plt>
   5494d:	mov    QWORD PTR [rsp+0x1c8],rax
   54955:	mov    r13,rax
   54958:	test   rax,rax
   5495b:	je     557eb <re_search_internal+0x126b>
   54961:	mov    eax,DWORD PTR [rsp+0x270]
   54968:	mov    QWORD PTR [rsp+0xc8],rbx
   54970:	mov    DWORD PTR [rsp+0x90],0x8
   5497b:	and    eax,0x1
   5497e:	cmp    eax,0x1
   54981:	sbb    eax,eax
   54983:	and    eax,0x2
   54986:	add    eax,0x4
   54989:	mov    DWORD PTR [rsp+0x180],eax
   54990:	xor    eax,eax
   54992:	cmp    rbx,rbp
   54995:	setle  al
   54998:	lea    eax,[rax+rax*1-0x1]
   5499c:	mov    DWORD PTR [rsp+0x94],eax
   549a3:	mov    rax,rbp
   549a6:	cmovle rax,rbx
   549aa:	mov    QWORD PTR [rsp+0x80],rax
   549b2:	mov    rax,rbp
   549b5:	cmovge rax,rbx
   549b9:	cmp    QWORD PTR [rsp+0x68],0x0
   549bf:	mov    QWORD PTR [rsp+0x58],rax
   549c4:	mov    rax,QWORD PTR [rsp+0x18]
   549c9:	mov    eax,DWORD PTR [rax+0xb4]
   549cf:	mov    DWORD PTR [rsp+0xb8],eax
   549d6:	je     54a32 <re_search_internal+0x4b2>
   549d8:	cmp    DWORD PTR [rsp+0xb8],0x1
   549e0:	mov    edx,0x4
   549e5:	je     54a0a <re_search_internal+0x48a>
   549e7:	mov    rax,QWORD PTR [rsp+0x48]
   549ec:	xor    edx,edx
   549ee:	mov    rax,QWORD PTR [rax+0x18]
   549f2:	mov    QWORD PTR [rsp+0x8],rax
   549f7:	and    eax,0x400000
   549fc:	or     rax,QWORD PTR [rsp+0xa0]
   54a04:	sete   dl
   54a07:	shl    edx,0x2
   54a0a:	cmp    rbx,rbp
   54a0d:	mov    eax,0x2
   54a12:	cmovg  eax,DWORD PTR [rsp+0x54]
   54a17:	mov    esi,eax
   54a19:	xor    eax,eax
   54a1b:	cmp    QWORD PTR [rsp+0xa0],0x0
   54a24:	setne  al
   54a27:	or     eax,edx
   54a29:	or     eax,esi
   54a2b:	mov    DWORD PTR [rsp+0x90],eax
   54a32:	cmp    rbx,QWORD PTR [rsp+0x80]
   54a3a:	setl   dl
   54a3d:	cmp    rbx,QWORD PTR [rsp+0x58]
   54a42:	setg   al
   54a45:	or     dl,al
   54a47:	jne    54c18 <re_search_internal+0x698>
   54a4d:	cmp    rbx,rbp
   54a50:	lea    rdx,[rsp+0xc8]
   54a58:	mov    eax,0x0
   54a5d:	cmovle rax,rdx
   54a61:	test   rax,rax
   54a64:	mov    QWORD PTR [rsp+0xa8],rax
   54a6c:	mov    eax,DWORD PTR [rsp+0x90]
   54a73:	setne  BYTE PTR [rsp+0xbf]
   54a7b:	cmp    eax,0x7
   54a7e:	je     5567c <re_search_internal+0x10fc>
   54a84:	cmp    eax,0x8
   54a87:	je     54c46 <re_search_internal+0x6c6>
   54a8d:	cmp    eax,0x5
   54a90:	jg     54b90 <re_search_internal+0x610>
   54a96:	cmp    eax,0x3
   54a99:	jg     557f8 <re_search_internal+0x1278>
   54a9f:	mov    rcx,r15
   54aa2:	mov    rbp,QWORD PTR [rsp+0x68]
   54aa7:	mov    r13d,DWORD PTR [rsp+0x94]
   54aaf:	mov    r14,QWORD PTR [rsp+0x80]
   54ab7:	mov    r12,QWORD PTR [rsp+0x78]
   54abc:	mov    r15,QWORD PTR [rsp+0x58]
   54ac1:	jmp    54b08 <re_search_internal+0x588>
   54ac3:	nop    DWORD PTR [rax+rax*1+0x0]
   54ac8:	mov    rax,rbp
   54acb:	cmp    r12,rbx
   54ace:	jle    54adf <re_search_internal+0x55f>
   54ad0:	mov    rax,QWORD PTR [rsp+0x118]
   54ad8:	movzx  eax,BYTE PTR [rax+rdx*1]
   54adc:	add    rax,rbp
   54adf:	cmp    BYTE PTR [rax],0x0
   54ae2:	jne    55b68 <re_search_internal+0x15e8>
   54ae8:	movsxd rax,r13d
   54aeb:	add    rbx,rax
   54aee:	mov    QWORD PTR [rsp+0xc8],rbx
   54af6:	cmp    rbx,r14
   54af9:	jl     55b70 <re_search_internal+0x15f0>
   54aff:	cmp    rbx,r15
   54b02:	jg     55b70 <re_search_internal+0x15f0>
   54b08:	mov    rdx,rbx
   54b0b:	sub    rdx,QWORD PTR [rsp+0x138]
   54b13:	cmp    QWORD PTR [rsp+0x148],rdx
   54b1b:	ja     54ac8 <re_search_internal+0x548>
   54b1d:	mov    edx,DWORD PTR [rsp+0x270]
   54b24:	mov    rdi,rcx
   54b27:	mov    rsi,rbx
   54b2a:	mov    QWORD PTR [rsp+0x8],rcx
   54b2f:	call   50880 <re_string_reconstruct>
   54b34:	mov    rcx,QWORD PTR [rsp+0x8]
   54b39:	test   eax,eax
   54b3b:	jne    55c80 <re_search_internal+0x1700>
   54b41:	mov    rdx,rbx
   54b44:	sub    rdx,QWORD PTR [rsp+0x138]
   54b4c:	jmp    54ac8 <re_search_internal+0x548>
   54b51:	nop    DWORD PTR [rax+0x0]
   54b58:	mov    rax,QWORD PTR [rsp+0x18]
   54b5d:	cmp    QWORD PTR [rax+0x98],0x0
   54b65:	setne  al
   54b68:	movzx  eax,al
   54b6b:	mov    DWORD PTR [rsp+0x50],eax
   54b6f:	jmp    54707 <re_search_internal+0x187>
   54b74:	nop    DWORD PTR [rax+0x0]
   54b78:	mov    QWORD PTR [rsp+0x68],0x0
   54b81:	jmp    5462a <re_search_internal+0xaa>
   54b86:	nop    WORD PTR cs:[rax+rax*1+0x0]
   54b90:	cmp    DWORD PTR [rsp+0x90],0x6
   54b98:	jne    54a9f <re_search_internal+0x51f>
   54b9e:	xor    ecx,ecx
   54ba0:	mov    rax,rbx
   54ba3:	cmp    QWORD PTR [rsp+0x58],rbx
   54ba8:	jle    54c3f <re_search_internal+0x6bf>
   54bae:	mov    rsi,QWORD PTR [rsp+0x68]
   54bb3:	mov    r8,QWORD PTR [rsp+0x58]
   54bb8:	mov    rdi,QWORD PTR [rsp+0x88]
   54bc0:	movzx  edx,BYTE PTR [rdi+rax*1]
   54bc4:	cmp    BYTE PTR [rsi+rdx*1],0x0
   54bc8:	jne    54c30 <re_search_internal+0x6b0>
   54bca:	add    rax,0x1
   54bce:	mov    ecx,0x1
   54bd3:	cmp    rax,r8
   54bd6:	jne    54bc0 <re_search_internal+0x640>
   54bd8:	mov    rax,QWORD PTR [rsp+0x58]
   54bdd:	mov    rbx,QWORD PTR [rsp+0x58]
   54be2:	mov    QWORD PTR [rsp+0xc8],rax
   54bea:	xor    eax,eax
   54bec:	cmp    rbx,QWORD PTR [rsp+0x78]
   54bf1:	jl     55c23 <re_search_internal+0x16a3>
   54bf7:	mov    rcx,QWORD PTR [rsp+0xa0]
   54bff:	test   rcx,rcx
   54c02:	je     54c08 <re_search_internal+0x688>
   54c04:	movzx  eax,BYTE PTR [rcx+rax*1]
   54c08:	mov    rcx,QWORD PTR [rsp+0x68]
   54c0d:	cmp    BYTE PTR [rcx+rax*1],0x0
   54c11:	jne    54c46 <re_search_internal+0x6c6>
   54c13:	nop    DWORD PTR [rax+rax*1+0x0]
   54c18:	mov    DWORD PTR [rsp+0x54],0x1
   54c20:	mov    r13,QWORD PTR [rsp+0x1c8]
   54c28:	jmp    5577e <re_search_internal+0x11fe>
   54c2d:	nop    DWORD PTR [rax]
   54c30:	test   cl,cl
   54c32:	je     54c46 <re_search_internal+0x6c6>
   54c34:	mov    QWORD PTR [rsp+0xc8],rax
   54c3c:	mov    rbx,rax
   54c3f:	cmp    QWORD PTR [rsp+0x58],rbx
   54c44:	je     54bea <re_search_internal+0x66a>
   54c46:	mov    edx,DWORD PTR [rsp+0x270]
   54c4d:	mov    rsi,rbx
   54c50:	mov    rdi,r15
   54c53:	call   50880 <re_string_reconstruct>
   54c58:	mov    DWORD PTR [rsp+0x54],eax
   54c5c:	test   eax,eax
   54c5e:	jne    55ac0 <re_search_internal+0x1540>
   54c64:	cmp    DWORD PTR [rsp+0xb8],0x1
   54c6c:	je     54c8a <re_search_internal+0x70a>
   54c6e:	cmp    QWORD PTR [rsp+0x140],0x0
   54c77:	je     54c8a <re_search_internal+0x70a>
   54c79:	mov    rax,QWORD PTR [rsp+0x120]
   54c81:	cmp    DWORD PTR [rax],0xffffffff
   54c84:	je     55640 <re_search_internal+0x10c0>
   54c8a:	movzx  eax,BYTE PTR [rsp+0x50]
   54c8f:	mov    rbp,QWORD PTR [rsp+0x1a8]
   54c97:	mov    DWORD PTR [rsp+0x1f0],0x0
   54ca2:	mov    QWORD PTR [rsp+0x1d8],0x0
   54cae:	and    eax,0x1
   54cb1:	mov    rbx,QWORD PTR [rbp+0x48]
   54cb5:	mov    QWORD PTR [rsp+0x1d0],0x0
   54cc1:	mov    BYTE PTR [rsp+0xbe],al
   54cc8:	mov    rax,QWORD PTR [rsp+0x158]
   54cd0:	mov    DWORD PTR [rsp+0xc0],0x0
   54cdb:	cmp    BYTE PTR [rbx+0x68],0x0
   54cdf:	mov    QWORD PTR [rsp+0x10],rax
   54ce4:	jns    54d28 <re_search_internal+0x7a8>
   54ce6:	mov    edx,DWORD PTR [rsp+0x1b0]
   54ced:	lea    rsi,[rax-0x1]
   54cf1:	mov    rdi,r15
   54cf4:	call   50650 <re_string_context_at>
   54cf9:	test   al,0x1
   54cfb:	jne    55b20 <re_search_internal+0x15a0>
   54d01:	test   eax,eax
   54d03:	je     54d28 <re_search_internal+0x7a8>
   54d05:	mov    edx,eax
   54d07:	and    edx,0x6
   54d0a:	cmp    edx,0x6
   54d0d:	je     55c70 <re_search_internal+0x16f0>
   54d13:	test   al,0x2
   54d15:	jne    55bd0 <re_search_internal+0x1650>
   54d1b:	test   al,0x4
   54d1d:	jne    55be0 <re_search_internal+0x1660>
   54d23:	nop    DWORD PTR [rax+rax*1+0x0]
   54d28:	mov    rax,QWORD PTR [rsp+0x1c8]
   54d30:	test   rax,rax
   54d33:	je     54d4c <re_search_internal+0x7cc>
   54d35:	mov    rcx,QWORD PTR [rsp+0x10]
   54d3a:	cmp    QWORD PTR [rbp+0x98],0x0
   54d42:	mov    QWORD PTR [rax+rcx*8],rbx
   54d46:	jne    55c38 <re_search_internal+0x16b8>
   54d4c:	movzx  eax,BYTE PTR [rsp+0xbf]
   54d54:	mov    BYTE PTR [rsp+0xbd],al
   54d5b:	movzx  eax,BYTE PTR [rbx+0x68]
   54d5f:	mov    QWORD PTR [rsp+0x20],0x0
   54d68:	mov    r12,0xffffffffffffffff
   54d6f:	test   al,0x10
   54d71:	jne    55b90 <re_search_internal+0x1610>
   54d77:	mov    rax,QWORD PTR [rsp+0xa8]
   54d7f:	mov    rbp,QWORD PTR [rsp+0x158]
   54d87:	cmp    rbp,QWORD PTR [rsp+0x178]
   54d8f:	mov    QWORD PTR [rsp+0x60],rax
   54d94:	jge    54f2e <re_search_internal+0x9ae>
   54d9a:	lea    rax,[rsp+0xc0]
   54da2:	mov    QWORD PTR [rsp+0x28],r12
   54da7:	mov    QWORD PTR [rsp+0x30],rax
   54dac:	jmp    54e1b <re_search_internal+0x89b>
   54dae:	xchg   ax,ax
   54db0:	cmp    r12,rbx
   54db3:	mov    rbp,QWORD PTR [rsp+0x158]
   54dbb:	sete   al
   54dbe:	and    BYTE PTR [rsp+0xbd],al
   54dc5:	mov    rax,QWORD PTR [rsp+0x8]
   54dca:	cmove  rax,QWORD PTR [rsp+0x10]
   54dd0:	mov    QWORD PTR [rsp+0x10],rax
   54dd5:	movzx  eax,BYTE PTR [r12+0x68]
   54ddb:	test   al,0x10
   54ddd:	je     54e0a <re_search_internal+0x88a>
   54ddf:	test   al,al
   54de1:	js     55260 <re_search_internal+0xce0>
   54de7:	mov    edx,DWORD PTR [rsp+0x50]
   54deb:	test   edx,edx
   54ded:	je     55bc0 <re_search_internal+0x1640>
   54df3:	mov    QWORD PTR [rsp+0x28],rbp
   54df8:	mov    QWORD PTR [rsp+0x20],0x1
   54e01:	mov    QWORD PTR [rsp+0x60],0x0
   54e0a:	cmp    QWORD PTR [rsp+0x178],rbp
   54e12:	jle    55250 <re_search_internal+0xcd0>
   54e18:	mov    rbx,r12
   54e1b:	lea    rax,[rbp+0x1]
   54e1f:	mov    QWORD PTR [rsp+0x8],rax
   54e24:	mov    rdi,rax
   54e27:	mov    rax,QWORD PTR [rsp+0x150]
   54e2f:	cmp    rdi,rax
   54e32:	jge    55280 <re_search_internal+0xd00>
   54e38:	mov    rax,QWORD PTR [rsp+0x140]
   54e40:	cmp    QWORD PTR [rsp+0x8],rax
   54e45:	jge    55590 <re_search_internal+0x1010>
   54e4b:	mov    r8,rbp
   54e4e:	test   BYTE PTR [rbx+0x68],0x20
   54e52:	jne    552c8 <re_search_internal+0xd48>
   54e58:	lea    rax,[r8+0x1]
   54e5c:	mov    QWORD PTR [rsp+0x158],rax
   54e64:	mov    rax,QWORD PTR [rsp+0x118]
   54e6c:	movzx  ebp,BYTE PTR [rax+r8*1]
   54e71:	mov    rax,QWORD PTR [rbx+0x58]
   54e75:	test   rax,rax
   54e78:	je     55550 <re_search_internal+0xfd0>
   54e7e:	mov    r12,QWORD PTR [rax+rbp*8]
   54e82:	cmp    QWORD PTR [rsp+0x1c8],0x0
   54e8b:	je     54ea0 <re_search_internal+0x920>
   54e8d:	mov    rdi,QWORD PTR [rsp+0x30]
   54e92:	mov    rdx,r12
   54e95:	mov    rsi,r15
   54e98:	call   54050 <merge_state_with_log>
   54e9d:	mov    r12,rax
   54ea0:	test   r12,r12
   54ea3:	jne    54db0 <re_search_internal+0x830>
   54ea9:	mov    esi,DWORD PTR [rsp+0xc0]
   54eb0:	mov    r13,QWORD PTR [rsp+0x1c8]
   54eb8:	test   esi,esi
   54eba:	jne    557eb <re_search_internal+0x126b>
   54ec0:	test   r13,r13
   54ec3:	je     55250 <re_search_internal+0xcd0>
   54ec9:	movzx  eax,BYTE PTR [rsp+0xbe]
   54ed1:	xor    eax,0x1
   54ed4:	test   BYTE PTR [rsp+0x20],al
   54ed8:	jne    55250 <re_search_internal+0xcd0>
   54ede:	mov    rbp,QWORD PTR [rsp+0x30]
   54ee3:	mov    rcx,QWORD PTR [rsp+0x1d0]
   54eeb:	mov    rax,QWORD PTR [rsp+0x158]
   54ef3:	xor    edx,edx
   54ef5:	jmp    54f11 <re_search_internal+0x991>
   54ef7:	nop    WORD PTR [rax+rax*1+0x0]
   54f00:	cmp    QWORD PTR [r13+rax*8+0x0],0x0
   54f06:	mov    edx,0x1
   54f0b:	jne    55200 <re_search_internal+0xc80>
   54f11:	mov    rsi,rax
   54f14:	add    rax,0x1
   54f18:	cmp    rcx,rax
   54f1b:	jge    54f00 <re_search_internal+0x980>
   54f1d:	mov    r12,QWORD PTR [rsp+0x28]
   54f22:	test   dl,dl
   54f24:	je     54f2e <re_search_internal+0x9ae>
   54f26:	mov    QWORD PTR [rsp+0x158],rsi
   54f2e:	mov    rax,QWORD PTR [rsp+0x60]
   54f33:	test   rax,rax
   54f36:	je     54f40 <re_search_internal+0x9c0>
   54f38:	mov    rsi,QWORD PTR [rsp+0x10]
   54f3d:	add    QWORD PTR [rax],rsi
   54f40:	cmp    r12,0xffffffffffffffff
   54f44:	je     55630 <re_search_internal+0x10b0>
   54f4a:	cmp    r12,0xfffffffffffffffe
   54f4e:	je     5576e <re_search_internal+0x11ee>
   54f54:	mov    rax,QWORD PTR [rsp+0x48]
   54f59:	mov    QWORD PTR [rsp+0x1b8],r12
   54f61:	test   BYTE PTR [rax+0x38],0x10
   54f65:	jne    54fc0 <re_search_internal+0xa40>
   54f67:	cmp    QWORD PTR [rsp+0x260],0x1
   54f70:	jbe    54fc0 <re_search_internal+0xa40>
   54f72:	mov    rbx,QWORD PTR [rsp+0x1c8]
   54f7a:	mov    rdx,r12
   54f7d:	mov    rdi,r15
   54f80:	mov    rsi,QWORD PTR [rbx+r12*8]
   54f84:	mov    r13,rbx
   54f87:	call   51070 <check_halt_state_context>
   54f8c:	mov    QWORD PTR [rsp+0x1c0],rax
   54f94:	mov    rax,QWORD PTR [rsp+0x18]
   54f99:	test   BYTE PTR [rax+0xb0],0x1
   54fa0:	jne    5589a <re_search_internal+0x131a>
   54fa6:	mov    rax,QWORD PTR [rsp+0x18]
   54fab:	cmp    QWORD PTR [rax+0x98],0x0
   54fb3:	jne    55897 <re_search_internal+0x1317>
   54fb9:	jmp    54fd3 <re_search_internal+0xa53>
   54fbb:	nop    DWORD PTR [rax+rax*1+0x0]
   54fc0:	mov    rax,QWORD PTR [rsp+0x18]
   54fc5:	cmp    QWORD PTR [rax+0x98],0x0
   54fcd:	jne    55878 <re_search_internal+0x12f8>
   54fd3:	cmp    QWORD PTR [rsp+0x260],0x0
   54fdc:	je     55ac0 <re_search_internal+0x1540>
   54fe2:	mov    rdx,QWORD PTR [rsp+0x260]
   54fea:	mov    rsi,QWORD PTR [rsp+0xb0]
   54ff2:	shl    rdx,0x4
   54ff6:	lea    rax,[rsi+0x10]
   54ffa:	add    rdx,rsi
   54ffd:	cmp    QWORD PTR [rsp+0x260],0x1
   55006:	jbe    55cf1 <re_search_internal+0x1771>
   5500c:	nop    DWORD PTR [rax+0x0]
   55010:	mov    QWORD PTR [rax+0x8],0xffffffffffffffff
   55018:	add    rax,0x10
   5501c:	mov    QWORD PTR [rax-0x10],0xffffffffffffffff
   55024:	cmp    rdx,rax
   55027:	jne    55010 <re_search_internal+0xa90>
   55029:	mov    rcx,QWORD PTR [rsp+0xb0]
   55031:	mov    rax,QWORD PTR [rsp+0x1b8]
   55039:	mov    QWORD PTR [rcx+0x8],rax
   5503d:	mov    rax,QWORD PTR [rsp+0x48]
   55042:	mov    QWORD PTR [rcx],0x0
   55049:	test   BYTE PTR [rax+0x38],0x10
   5504d:	jne    55cc3 <re_search_internal+0x1743>
   55053:	cmp    QWORD PTR [rsp+0x260],0x1
   5505c:	je     55cc3 <re_search_internal+0x1743>
   55062:	mov    rax,QWORD PTR [rsp+0x18]
   55067:	xor    r8d,r8d
   5506a:	test   BYTE PTR [rax+0xb0],0x1
   55071:	je     55082 <re_search_internal+0xb02>
   55073:	xor    r8d,r8d
   55076:	cmp    QWORD PTR [rax+0x98],0x0
   5507e:	setg   r8b
   55082:	mov    rbx,QWORD PTR [rsp+0xb0]
   5508a:	mov    rdx,QWORD PTR [rsp+0x260]
   55092:	mov    rsi,r15
   55095:	mov    rdi,QWORD PTR [rsp+0x48]
   5509a:	mov    rcx,rbx
   5509d:	call   52d50 <set_regs>
   550a2:	test   eax,eax
   550a4:	jne    55d18 <re_search_internal+0x1798>
   550aa:	mov    rdx,QWORD PTR [rbx]
   550ad:	movzx  r8d,BYTE PTR [rsp+0x19c]
   550b6:	mov    r9,QWORD PTR [rsp+0x140]
   550be:	xor    ecx,ecx
   550c0:	mov    r11,QWORD PTR [rsp+0x128]
   550c8:	mov    r10,QWORD PTR [rsp+0x148]
   550d0:	mov    rdi,QWORD PTR [rsp+0xc8]
   550d8:	mov    rax,QWORD PTR [rsp+0xb0]
   550e0:	mov    rbx,QWORD PTR [rsp+0x260]
   550e8:	jmp    550f3 <re_search_internal+0xb73>
   550ea:	nop    WORD PTR [rax+rax*1+0x0]
   550f0:	mov    rdx,QWORD PTR [rax]
   550f3:	cmp    rdx,0xffffffffffffffff
   550f7:	je     55113 <re_search_internal+0xb93>
   550f9:	mov    rsi,QWORD PTR [rax+0x8]
   550fd:	test   r8b,r8b
   55100:	jne    55cca <re_search_internal+0x174a>
   55106:	add    rdx,rdi
   55109:	add    rsi,rdi
   5510c:	mov    QWORD PTR [rax],rdx
   5510f:	mov    QWORD PTR [rax+0x8],rsi
   55113:	add    rcx,0x1
   55117:	add    rax,0x10
   5511b:	cmp    rcx,rbx
   5511e:	jne    550f0 <re_search_internal+0xb70>
   55120:	cmp    QWORD PTR [rsp+0x98],0x0
   55129:	jle    55178 <re_search_internal+0xbf8>
   5512b:	mov    rax,QWORD PTR [rsp+0x260]
   55133:	mov    rsi,QWORD PTR [rsp+0xb0]
   5513b:	mov    rdx,QWORD PTR [rsp+0x98]
   55143:	add    rdx,QWORD PTR [rsp+0x260]
   5514b:	shl    rax,0x4
   5514f:	shl    rdx,0x4
   55153:	add    rax,rsi
   55156:	add    rdx,rsi
   55159:	nop    DWORD PTR [rax+0x0]
   55160:	mov    QWORD PTR [rax],0xffffffffffffffff
   55167:	add    rax,0x10
   5516b:	mov    QWORD PTR [rax-0x8],0xffffffffffffffff
   55173:	cmp    rdx,rax
   55176:	jne    55160 <re_search_internal+0xbe0>
   55178:	mov    rax,QWORD PTR [rsp+0x18]
   5517d:	mov    r13,QWORD PTR [rsp+0x1c8]
   55185:	mov    rsi,QWORD PTR [rax+0xe0]
   5518c:	test   rsi,rsi
   5518f:	je     5577e <re_search_internal+0x11fe>
   55195:	cmp    QWORD PTR [rsp+0x260],0x1
   5519e:	jbe    5577e <re_search_internal+0x11fe>
   551a4:	mov    rax,QWORD PTR [rsp+0x260]
   551ac:	mov    rcx,QWORD PTR [rsp+0xb0]
   551b4:	lea    rdi,[rax-0x1]
   551b8:	xor    eax,eax
   551ba:	nop    WORD PTR [rax+rax*1+0x0]
   551c0:	mov    rdx,QWORD PTR [rsi+rax*8]
   551c4:	cmp    rdx,rax
   551c7:	je     551f0 <re_search_internal+0xc70>
   551c9:	shl    rdx,0x4
   551cd:	mov    r8,rax
   551d0:	mov    rdx,QWORD PTR [rdx+rcx*1+0x10]
   551d5:	shl    r8,0x4
   551d9:	mov    QWORD PTR [rcx+r8*1+0x10],rdx
   551de:	mov    rdx,QWORD PTR [rsi+rax*8]
   551e2:	shl    rdx,0x4
   551e6:	mov    rdx,QWORD PTR [rdx+rcx*1+0x18]
   551eb:	mov    QWORD PTR [rcx+r8*1+0x18],rdx
   551f0:	add    rax,0x1
   551f4:	cmp    rax,rdi
   551f7:	jne    551c0 <re_search_internal+0xc40>
   551f9:	jmp    5577e <re_search_internal+0x11fe>
   551fe:	xchg   ax,ax
   55200:	xor    edx,edx
   55202:	mov    rsi,r15
   55205:	mov    rdi,rbp
   55208:	mov    QWORD PTR [rsp+0x158],rax
   55210:	call   54050 <merge_state_with_log>
   55215:	mov    ecx,DWORD PTR [rsp+0xc0]
   5521c:	test   ecx,ecx
   5521e:	jne    55240 <re_search_internal+0xcc0>
   55220:	test   rax,rax
   55223:	jne    55bb8 <re_search_internal+0x1638>
   55229:	mov    r13,QWORD PTR [rsp+0x1c8]
   55231:	jmp    54ee3 <re_search_internal+0x963>
   55236:	nop    WORD PTR cs:[rax+rax*1+0x0]
   55240:	mov    r12,rax
   55243:	test   rax,rax
   55246:	jne    54db0 <re_search_internal+0x830>
   5524c:	nop    DWORD PTR [rax+0x0]
   55250:	mov    r12,QWORD PTR [rsp+0x28]
   55255:	jmp    54f2e <re_search_internal+0x9ae>
   5525a:	nop    WORD PTR [rax+rax*1+0x0]
   55260:	mov    rdx,rbp
   55263:	mov    rsi,r12
   55266:	mov    rdi,r15
   55269:	call   51070 <check_halt_state_context>
   5526e:	test   rax,rax
   55271:	je     54e0a <re_search_internal+0x88a>
   55277:	jmp    54de7 <re_search_internal+0x867>
   5527c:	nop    DWORD PTR [rax+0x0]
   55280:	cmp    rax,QWORD PTR [rsp+0x168]
   55288:	jge    54e38 <re_search_internal+0x8b8>
   5528e:	mov    eax,DWORD PTR [rsp+0x8]
   55292:	mov    rdi,r15
   55295:	lea    esi,[rax+0x1]
   55298:	call   4d0c0 <extend_buffers>
   5529d:	mov    DWORD PTR [rsp+0xc0],eax
   552a4:	test   eax,eax
   552a6:	jne    5576e <re_search_internal+0x11ee>
   552ac:	mov    rbp,QWORD PTR [rsp+0x158]
   552b4:	mov    r8,rbp
   552b7:	test   BYTE PTR [rbx+0x68],0x20
   552bb:	je     54e58 <re_search_internal+0x8d8>
   552c1:	nop    DWORD PTR [rax+0x0]
   552c8:	cmp    QWORD PTR [rbx+0x10],0x0
   552cd:	mov    r12,QWORD PTR [rsp+0x1a8]
   552d5:	jle    55738 <re_search_internal+0x11b8>
   552db:	lea    rax,[r12+0xd8]
   552e3:	xor    r13d,r13d
   552e6:	mov    QWORD PTR [rsp+0x70],rax
   552eb:	jmp    55454 <re_search_internal+0xed4>
   552f0:	test   al,0x1
   552f2:	je     55446 <re_search_internal+0xec6>
   552f8:	and    edx,0x8
   552fb:	jne    55446 <re_search_internal+0xec6>
   55301:	test   cl,0x20
   55304:	je     5530e <re_search_internal+0xd8e>
   55306:	test   al,0x2
   55308:	je     55446 <re_search_internal+0xec6>
   5530e:	and    ecx,0x80
   55314:	je     55320 <re_search_internal+0xda0>
   55316:	test   al,0x8
   55318:	je     55446 <re_search_internal+0xec6>
   5531e:	xchg   ax,ax
   55320:	mov    rsi,QWORD PTR [rsp+0x70]
   55325:	mov    rcx,r15
   55328:	mov    rdx,rbp
   5532b:	mov    rdi,r14
   5532e:	call   52300 <check_node_accept_bytes.isra.0>
   55333:	test   eax,eax
   55335:	je     5543e <re_search_internal+0xebe>
   5533b:	mov    r14,QWORD PTR [rsp+0x158]
   55343:	movsxd r8,eax
   55346:	mov    rdi,r15
   55349:	add    r14,r8
   5534c:	cmp    DWORD PTR [rsp+0x1f0],eax
   55353:	cmovge eax,DWORD PTR [rsp+0x1f0]
   5535b:	mov    rsi,r14
   5535e:	mov    DWORD PTR [rsp+0x1f0],eax
   55365:	call   4d230 <clean_state_log_if_needed>
   5536a:	mov    DWORD PTR [rsp+0xc4],eax
   55371:	test   eax,eax
   55373:	jne    556e0 <re_search_internal+0x1160>
   55379:	mov    rax,QWORD PTR [r12+0x18]
   5537e:	mov    r10,QWORD PTR [rsp+0x1c8]
   55386:	mov    rax,QWORD PTR [rax+rbp*8]
   5538a:	lea    rbp,[r14*8+0x0]
   55392:	add    r10,rbp
   55395:	lea    rdx,[rax+rax*2]
   55399:	mov    rax,QWORD PTR [r12+0x30]
   5539e:	mov    QWORD PTR [rsp+0x38],r10
   553a3:	lea    rdx,[rax+rdx*8]
   553a7:	mov    rax,QWORD PTR [r10]
   553aa:	test   rax,rax
   553ad:	je     554d0 <re_search_internal+0xf50>
   553b3:	lea    r8,[rsp+0xd0]
   553bb:	mov    rsi,QWORD PTR [rax+0x50]
   553bf:	mov    rdi,r8
   553c2:	mov    QWORD PTR [rsp+0x38],r8
   553c7:	call   4ecc0 <re_node_set_init_union>
   553cc:	mov    r8,QWORD PTR [rsp+0x38]
   553d1:	test   eax,eax
   553d3:	mov    DWORD PTR [rsp+0xc4],eax
   553da:	jne    556e0 <re_search_internal+0x1160>
   553e0:	mov    edx,DWORD PTR [rsp+0x1b0]
   553e7:	lea    rsi,[r14-0x1]
   553eb:	mov    rdi,r15
   553ee:	mov    QWORD PTR [rsp+0x38],r8
   553f3:	call   50650 <re_string_context_at>
   553f8:	mov    r8,QWORD PTR [rsp+0x38]
   553fd:	mov    rsi,r12
   55400:	lea    rdi,[rsp+0xc4]
   55408:	mov    ecx,eax
   5540a:	add    rbp,QWORD PTR [rsp+0x1c8]
   55412:	mov    rdx,r8
   55415:	call   4ee30 <re_acquire_state_context>
   5541a:	mov    rdi,QWORD PTR [rsp+0xe0]
   55422:	mov    QWORD PTR [rbp+0x0],rax
   55426:	call   4bdc0 <rpl_free>
   5542b:	mov    rdx,QWORD PTR [rsp+0x1c8]
   55433:	cmp    QWORD PTR [rdx+r14*8],0x0
   55438:	je     55533 <re_search_internal+0xfb3>
   5543e:	mov    r8,QWORD PTR [rsp+0x158]
   55446:	add    r13,0x1
   5544a:	cmp    r13,QWORD PTR [rbx+0x10]
   5544e:	jge    55738 <re_search_internal+0x11b8>
   55454:	mov    rax,QWORD PTR [rbx+0x18]
   55458:	mov    r14,QWORD PTR [r12]
   5545c:	mov    rbp,QWORD PTR [rax+r13*8]
   55460:	mov    rax,rbp
   55463:	shl    rax,0x4
   55467:	add    rax,r14
   5546a:	test   BYTE PTR [rax+0xa],0x10
   5546e:	je     55446 <re_search_internal+0xec6>
   55470:	mov    ecx,DWORD PTR [rax+0x8]
   55473:	test   ecx,0x3ff00
   55479:	mov    DWORD PTR [rsp+0x44],ecx
   5547d:	je     55320 <re_search_internal+0xda0>
   55483:	mov    edx,DWORD PTR [rsp+0x1b0]
   5548a:	mov    rsi,r8
   5548d:	mov    rdi,r15
   55490:	mov    QWORD PTR [rsp+0x38],r8
   55495:	call   50650 <re_string_context_at>
   5549a:	mov    ecx,DWORD PTR [rsp+0x44]
   5549e:	mov    r8,QWORD PTR [rsp+0x38]
   554a3:	shr    ecx,0x8
   554a6:	mov    edx,ecx
   554a8:	and    cx,0x3ff
   554ad:	test   dl,0x4
   554b0:	jne    552f0 <re_search_internal+0xd70>
   554b6:	and    edx,0x8
   554b9:	je     55301 <re_search_internal+0xd81>
   554bf:	test   al,0x1
   554c1:	je     55301 <re_search_internal+0xd81>
   554c7:	jmp    55446 <re_search_internal+0xec6>
   554cc:	nop    DWORD PTR [rax+0x0]
   554d0:	movdqu xmm1,XMMWORD PTR [rdx]
   554d4:	lea    rsi,[r14-0x1]
   554d8:	mov    rdi,r15
   554db:	movaps XMMWORD PTR [rsp+0xd0],xmm1
   554e3:	mov    rax,QWORD PTR [rdx+0x10]
   554e7:	mov    edx,DWORD PTR [rsp+0x1b0]
   554ee:	mov    QWORD PTR [rsp+0xe0],rax
   554f6:	call   50650 <re_string_context_at>
   554fb:	lea    r8,[rsp+0xd0]
   55503:	lea    rdi,[rsp+0xc4]
   5550b:	mov    rsi,r12
   5550e:	mov    rdx,r8
   55511:	mov    ecx,eax
   55513:	call   4ee30 <re_acquire_state_context>
   55518:	mov    r10,QWORD PTR [rsp+0x38]
   5551d:	mov    rdx,QWORD PTR [rsp+0x1c8]
   55525:	mov    QWORD PTR [r10],rax
   55528:	cmp    QWORD PTR [rdx+r14*8],0x0
   5552d:	jne    5543e <re_search_internal+0xebe>
   55533:	mov    eax,DWORD PTR [rsp+0xc4]
   5553a:	test   eax,eax
   5553c:	je     5543e <re_search_internal+0xebe>
   55542:	jmp    556e8 <re_search_internal+0x1168>
   55547:	nop    WORD PTR [rax+rax*1+0x0]
   55550:	mov    r12,QWORD PTR [rbx+0x60]
   55554:	test   r12,r12
   55557:	je     557b0 <re_search_internal+0x1230>
   5555d:	mov    rax,QWORD PTR [rsp+0x158]
   55565:	mov    edx,DWORD PTR [rsp+0x1b0]
   5556c:	mov    rdi,r15
   5556f:	lea    rsi,[rax-0x1]
   55573:	call   50650 <re_string_context_at>
   55578:	test   al,0x1
   5557a:	je     55750 <re_search_internal+0x11d0>
   55580:	mov    r12,QWORD PTR [r12+rbp*8+0x800]
   55588:	jmp    54e82 <re_search_internal+0x902>
   5558d:	nop    DWORD PTR [rax]
   55590:	cmp    rax,QWORD PTR [rsp+0x168]
   55598:	jge    54e4b <re_search_internal+0x8cb>
   5559e:	jmp    5528e <re_search_internal+0xd0e>
   555a3:	nop    DWORD PTR [rax+rax*1+0x0]
   555a8:	mov    rax,QWORD PTR [rsp+0x8]
   555ad:	lea    r13,[rsp+0xd0]
   555b5:	pxor   xmm0,xmm0
   555b9:	mov    rdi,r15
   555bc:	mov    rsi,r13
   555bf:	mov    QWORD PTR [rsp+0xd0],r14
   555c7:	mov    QWORD PTR [rsp+0xd8],0x0
   555d3:	mov    QWORD PTR [rsp+0xe0],rax
   555db:	mov    QWORD PTR [rsp+0xe8],r12
   555e3:	mov    QWORD PTR [rsp+0x100],0x0
   555ef:	movaps XMMWORD PTR [rsp+0xf0],xmm0
   555f7:	call   54250 <sift_states_backward>
   555fc:	mov    rdi,QWORD PTR [rsp+0x100]
   55604:	mov    ebx,eax
   55606:	mov    DWORD PTR [rsp+0x10],eax
   5560a:	call   4bdc0 <rpl_free>
   5560f:	test   ebx,ebx
   55611:	jne    55a3d <re_search_internal+0x14bd>
   55617:	cmp    QWORD PTR [r14],0x0
   5561b:	jne    55a80 <re_search_internal+0x1500>
   55621:	mov    rdi,r14
   55624:	call   4bdc0 <rpl_free>
   55629:	xor    edi,edi
   5562b:	call   4bdc0 <rpl_free>
   55630:	mov    rdi,r15
   55633:	call   4da50 <match_ctx_clean>
   55638:	mov    rbx,QWORD PTR [rsp+0xc8]
   55640:	movsxd rax,DWORD PTR [rsp+0x94]
   55648:	add    rbx,rax
   5564b:	mov    QWORD PTR [rsp+0xc8],rbx
   55653:	cmp    rbx,QWORD PTR [rsp+0x80]
   5565b:	jl     54c18 <re_search_internal+0x698>
   55661:	cmp    rbx,QWORD PTR [rsp+0x58]
   55666:	jg     54c18 <re_search_internal+0x698>
   5566c:	mov    eax,DWORD PTR [rsp+0x90]
   55673:	cmp    eax,0x7
   55676:	jne    54a84 <re_search_internal+0x504>
   5567c:	xor    ecx,ecx
   5567e:	mov    rax,rbx
   55681:	cmp    QWORD PTR [rsp+0x58],rbx
   55686:	jle    54c3f <re_search_internal+0x6bf>
   5568c:	mov    rsi,QWORD PTR [rsp+0x68]
   55691:	mov    rdi,QWORD PTR [rsp+0xa0]
   55699:	mov    r9,QWORD PTR [rsp+0x58]
   5569e:	mov    r8,QWORD PTR [rsp+0x88]
   556a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   556b0:	movzx  edx,BYTE PTR [r8+rax*1]
   556b5:	movzx  edx,BYTE PTR [rdi+rdx*1]
   556b9:	cmp    BYTE PTR [rsi+rdx*1],0x0
   556bd:	jne    54c30 <re_search_internal+0x6b0>
   556c3:	add    rax,0x1
   556c7:	mov    ecx,0x1
   556cc:	cmp    rax,r9
   556cf:	jne    556b0 <re_search_internal+0x1130>
   556d1:	jmp    54bd8 <re_search_internal+0x658>
   556d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   556e0:	mov    rdx,QWORD PTR [rsp+0x1c8]
   556e8:	mov    DWORD PTR [rsp+0xc0],eax
   556ef:	test   rdx,rdx
   556f2:	je     557e8 <re_search_internal+0x1268>
   556f8:	xor    r12d,r12d
   556fb:	jmp    54e8d <re_search_internal+0x90d>
   55700:	mov    DWORD PTR [rsp+0x54],0x1
   55708:	mov    rax,QWORD PTR [rsp+0x218]
   55710:	xor    rax,QWORD PTR fs:0x28
   55719:	jne    55d13 <re_search_internal+0x1793>
   5571f:	mov    eax,DWORD PTR [rsp+0x54]
   55723:	add    rsp,0x228
   5572a:	pop    rbx
   5572b:	pop    rbp
   5572c:	pop    r12
   5572e:	pop    r13
   55730:	pop    r14
   55732:	pop    r15
   55734:	ret    
   55735:	nop    DWORD PTR [rax]
   55738:	mov    DWORD PTR [rsp+0xc0],0x0
   55743:	jmp    54e58 <re_search_internal+0x8d8>
   55748:	nop    DWORD PTR [rax+rax*1+0x0]
   55750:	mov    r12,QWORD PTR [r12+rbp*8]
   55754:	jmp    54e82 <re_search_internal+0x902>
   55759:	nop    DWORD PTR [rax+0x0]
   55760:	xor    edi,edi
   55762:	call   4bdc0 <rpl_free>
   55767:	xor    edi,edi
   55769:	call   4bdc0 <rpl_free>
   5576e:	mov    DWORD PTR [rsp+0x54],0xc
   55776:	mov    r13,QWORD PTR [rsp+0x1c8]
   5577e:	mov    rdi,r13
   55781:	call   4bdc0 <rpl_free>
   55786:	mov    rax,QWORD PTR [rsp+0x18]
   5578b:	cmp    QWORD PTR [rax+0x98],0x0
   55793:	jne    55af0 <re_search_internal+0x1570>
   55799:	mov    rdi,r15
   5579c:	call   4d890 <re_string_destruct>
   557a1:	jmp    55708 <re_search_internal+0x1188>
   557a6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   557b0:	mov    rdi,QWORD PTR [rsp+0x1a8]
   557b8:	mov    rsi,rbx
   557bb:	call   4fa40 <build_trtable>
   557c0:	test   al,al
   557c2:	jne    54e71 <re_search_internal+0x8f1>
   557c8:	cmp    QWORD PTR [rsp+0x1c8],0x0
   557d1:	mov    DWORD PTR [rsp+0xc0],0xc
   557dc:	jne    556f8 <re_search_internal+0x1178>
   557e2:	nop    WORD PTR [rax+rax*1+0x0]
   557e8:	xor    r13d,r13d
   557eb:	mov    DWORD PTR [rsp+0x54],0xc
   557f3:	jmp    5577e <re_search_internal+0x11fe>
   557f5:	nop    DWORD PTR [rax]
   557f8:	cmp    QWORD PTR [rsp+0x80],rbx
   55800:	jg     54c18 <re_search_internal+0x698>
   55806:	mov    rdi,QWORD PTR [rsp+0x68]
   5580b:	mov    r8,QWORD PTR [rsp+0x78]
   55810:	xor    ecx,ecx
   55812:	mov    rax,rbx
   55815:	mov    rsi,QWORD PTR [rsp+0xa0]
   5581d:	mov    r9,QWORD PTR [rsp+0x80]
   55825:	mov    r10,QWORD PTR [rsp+0x88]
   5582d:	jmp    55842 <re_search_internal+0x12c2>
   5582f:	nop
   55830:	sub    rax,0x1
   55834:	mov    ecx,0x1
   55839:	cmp    rax,r9
   5583c:	jl     55b58 <re_search_internal+0x15d8>
   55842:	xor    edx,edx
   55844:	cmp    rax,r8
   55847:	jge    5584e <re_search_internal+0x12ce>
   55849:	movzx  edx,BYTE PTR [r10+rax*1]
   5584e:	test   rsi,rsi
   55851:	je     55857 <re_search_internal+0x12d7>
   55853:	movzx  edx,BYTE PTR [rsi+rdx*1]
   55857:	cmp    BYTE PTR [rdi+rdx*1],0x0
   5585b:	je     55830 <re_search_internal+0x12b0>
   5585d:	test   cl,cl
   5585f:	je     54c46 <re_search_internal+0x6c6>
   55865:	mov    QWORD PTR [rsp+0xc8],rax
   5586d:	mov    rbx,rax
   55870:	jmp    54c46 <re_search_internal+0x6c6>
   55875:	nop    DWORD PTR [rax]
   55878:	mov    rbx,QWORD PTR [rsp+0x1c8]
   55880:	mov    rdx,r12
   55883:	mov    rdi,r15
   55886:	mov    rsi,QWORD PTR [rbx+r12*8]
   5588a:	call   51070 <check_halt_state_context>
   5588f:	mov    QWORD PTR [rsp+0x1c0],rax
   55897:	mov    r13,rbx
   5589a:	mov    rax,QWORD PTR [rsp+0x1a8]
   558a2:	mov    QWORD PTR [rsp+0x20],rax
   558a7:	mov    rax,QWORD PTR [rsp+0x1c0]
   558af:	mov    QWORD PTR [rsp+0x8],rax
   558b4:	movabs rax,0x1ffffffffffffffe
   558be:	cmp    r12,rax
   558c1:	ja     557eb <re_search_internal+0x126b>
   558c7:	lea    rbx,[r12+0x1]
   558cc:	lea    rbp,[rbx*8+0x0]
   558d4:	mov    rdi,rbp
   558d7:	call   c0e0 <malloc@plt>
   558dc:	mov    r14,rax
   558df:	test   rax,rax
   558e2:	je     55760 <re_search_internal+0x11e0>
   558e8:	mov    rax,QWORD PTR [rsp+0x20]
   558ed:	cmp    QWORD PTR [rax+0x98],0x0
   558f5:	je     555a8 <re_search_internal+0x1028>
   558fb:	mov    rdi,rbp
   558fe:	call   c0e0 <malloc@plt>
   55903:	mov    QWORD PTR [rsp+0x28],rax
   55908:	mov    rbp,rax
   5590b:	test   rax,rax
   5590e:	je     55c94 <re_search_internal+0x1714>
   55914:	lea    rax,[rsp+0xf0]
   5591c:	lea    r13,[rsp+0xd0]
   55924:	mov    QWORD PTR [rsp+0x30],rax
   55929:	mov    rax,rbx
   5592c:	mov    rbx,r12
   5592f:	mov    r12,rbp
   55932:	mov    rbp,r13
   55935:	mov    r13,rax
   55938:	lea    rdx,[r13*8+0x0]
   55940:	xor    esi,esi
   55942:	mov    rdi,r12
   55945:	call   bed0 <memset@plt>
   5594a:	mov    rax,QWORD PTR [rsp+0x8]
   5594f:	mov    rsi,rbp
   55952:	mov    rdi,r15
   55955:	mov    QWORD PTR [rsp+0xd0],r14
   5595d:	pxor   xmm0,xmm0
   55961:	mov    QWORD PTR [rsp+0xe0],rax
   55969:	mov    rax,QWORD PTR [rsp+0x30]
   5596e:	mov    QWORD PTR [rsp+0xd8],r12
   55976:	mov    QWORD PTR [rsp+0xe8],rbx
   5597e:	mov    QWORD PTR [rax+0x10],0x0
   55986:	movaps XMMWORD PTR [rax],xmm0
   55989:	call   54250 <sift_states_backward>
   5598e:	mov    rdi,QWORD PTR [rsp+0x100]
   55996:	mov    DWORD PTR [rsp+0x10],eax
   5599a:	call   4bdc0 <rpl_free>
   5599f:	mov    eax,DWORD PTR [rsp+0x10]
   559a3:	test   eax,eax
   559a5:	jne    55a46 <re_search_internal+0x14c6>
   559ab:	cmp    QWORD PTR [r14],0x0
   559af:	jne    55a12 <re_search_internal+0x1492>
   559b1:	cmp    QWORD PTR [r12],0x0
   559b6:	jne    55a12 <re_search_internal+0x1492>
   559b8:	sub    rbx,0x1
   559bc:	cmp    rbx,0xffffffffffffffff
   559c0:	je     559ed <re_search_internal+0x146d>
   559c2:	mov    rax,QWORD PTR [rsp+0x1c8]
   559ca:	nop    WORD PTR [rax+rax*1+0x0]
   559d0:	mov    rsi,QWORD PTR [rax+rbx*8]
   559d4:	test   rsi,rsi
   559d7:	je     559e3 <re_search_internal+0x1463>
   559d9:	test   BYTE PTR [rsi+0x68],0x10
   559dd:	jne    55b38 <re_search_internal+0x15b8>
   559e3:	sub    rbx,0x1
   559e7:	cmp    rbx,0xffffffffffffffff
   559eb:	jne    559d0 <re_search_internal+0x1450>
   559ed:	mov    rdi,r14
   559f0:	call   4bdc0 <rpl_free>
   559f5:	mov    rdi,r12
   559f8:	call   4bdc0 <rpl_free>
   559fd:	mov    rdi,r15
   55a00:	call   4da50 <match_ctx_clean>
   55a05:	mov    rbx,QWORD PTR [rsp+0xc8]
   55a0d:	jmp    55640 <re_search_internal+0x10c0>
   55a12:	mov    rbp,r12
   55a15:	mov    rdi,QWORD PTR [rsp+0x20]
   55a1a:	mov    rcx,r13
   55a1d:	mov    rsi,r14
   55a20:	mov    rdx,rbp
   55a23:	mov    r12,rbx
   55a26:	call   4f350 <merge_state_array>
   55a2b:	mov    rdi,rbp
   55a2e:	mov    ebx,eax
   55a30:	mov    DWORD PTR [rsp+0x10],eax
   55a34:	call   4bdc0 <rpl_free>
   55a39:	test   ebx,ebx
   55a3b:	je     55a80 <re_search_internal+0x1500>
   55a3d:	mov    QWORD PTR [rsp+0x28],0x0
   55a46:	mov    rdi,r14
   55a49:	call   4bdc0 <rpl_free>
   55a4e:	mov    rdi,QWORD PTR [rsp+0x28]
   55a53:	call   4bdc0 <rpl_free>
   55a58:	cmp    DWORD PTR [rsp+0x10],0x1
   55a5d:	je     55630 <re_search_internal+0x10b0>
   55a63:	mov    eax,DWORD PTR [rsp+0x10]
   55a67:	mov    r13,QWORD PTR [rsp+0x1c8]
   55a6f:	mov    DWORD PTR [rsp+0x54],eax
   55a73:	jmp    5577e <re_search_internal+0x11fe>
   55a78:	nop    DWORD PTR [rax+rax*1+0x0]
   55a80:	mov    rdi,QWORD PTR [rsp+0x1c8]
   55a88:	call   4bdc0 <rpl_free>
   55a8d:	mov    rax,QWORD PTR [rsp+0x8]
   55a92:	xor    edi,edi
   55a94:	mov    QWORD PTR [rsp+0x1c8],r14
   55a9c:	mov    QWORD PTR [rsp+0x1b8],r12
   55aa4:	mov    QWORD PTR [rsp+0x1c0],rax
   55aac:	call   4bdc0 <rpl_free>
   55ab1:	xor    edi,edi
   55ab3:	call   4bdc0 <rpl_free>
   55ab8:	jmp    54fd3 <re_search_internal+0xa53>
   55abd:	nop    DWORD PTR [rax]
   55ac0:	mov    r13,QWORD PTR [rsp+0x1c8]
   55ac8:	jmp    5577e <re_search_internal+0x11fe>
   55acd:	nop    DWORD PTR [rax]
   55ad0:	mov    rax,QWORD PTR [rsp+0x18]
   55ad5:	test   BYTE PTR [rax+0xb0],0x2
   55adc:	jne    54925 <re_search_internal+0x3a5>
   55ae2:	jmp    54961 <re_search_internal+0x3e1>
   55ae7:	nop    WORD PTR [rax+rax*1+0x0]
   55af0:	mov    rdi,r15
   55af3:	call   4da50 <match_ctx_clean>
   55af8:	mov    rdi,QWORD PTR [rsp+0x208]
   55b00:	call   4bdc0 <rpl_free>
   55b05:	mov    rdi,QWORD PTR [rsp+0x1e8]
   55b0d:	call   4bdc0 <rpl_free>
   55b12:	jmp    55799 <re_search_internal+0x1219>
   55b17:	nop    WORD PTR [rax+rax*1+0x0]
   55b20:	mov    rbx,QWORD PTR [rbp+0x50]
   55b24:	test   rbx,rbx
   55b27:	jne    54d28 <re_search_internal+0x7a8>
   55b2d:	jmp    5576e <re_search_internal+0x11ee>
   55b32:	nop    WORD PTR [rax+rax*1+0x0]
   55b38:	mov    rdx,rbx
   55b3b:	mov    rdi,r15
   55b3e:	lea    r13,[rbx+0x1]
   55b42:	call   51070 <check_halt_state_context>
   55b47:	mov    QWORD PTR [rsp+0x8],rax
   55b4c:	jmp    55938 <re_search_internal+0x13b8>
   55b51:	nop    DWORD PTR [rax+0x0]
   55b58:	mov    QWORD PTR [rsp+0xc8],rax
   55b60:	jmp    54c18 <re_search_internal+0x698>
   55b65:	nop    DWORD PTR [rax]
   55b68:	mov    r15,rcx
   55b6b:	jmp    54c46 <re_search_internal+0x6c6>
   55b70:	mov    DWORD PTR [rsp+0x54],0x1
   55b78:	mov    r13,QWORD PTR [rsp+0x1c8]
   55b80:	mov    r15,rcx
   55b83:	jmp    5577e <re_search_internal+0x11fe>
   55b88:	nop    DWORD PTR [rax+rax*1+0x0]
   55b90:	cmp    BYTE PTR [rbx+0x68],0x0
   55b94:	js     55c00 <re_search_internal+0x1680>
   55b96:	mov    edi,DWORD PTR [rsp+0x50]
   55b9a:	mov    r12,QWORD PTR [rsp+0x10]
   55b9f:	mov    QWORD PTR [rsp+0x20],0x1
   55ba8:	test   edi,edi
   55baa:	jne    54d77 <re_search_internal+0x7f7>
   55bb0:	jmp    54f40 <re_search_internal+0x9c0>
   55bb5:	nop    DWORD PTR [rax]
   55bb8:	mov    r12,rax
   55bbb:	jmp    54db0 <re_search_internal+0x830>
   55bc0:	mov    r12,rbp
   55bc3:	jmp    54f40 <re_search_internal+0x9c0>
   55bc8:	nop    DWORD PTR [rax+rax*1+0x0]
   55bd0:	mov    rbx,QWORD PTR [rbp+0x58]
   55bd4:	jmp    55b24 <re_search_internal+0x15a4>
   55bd9:	nop    DWORD PTR [rax+0x0]
   55be0:	mov    rdx,QWORD PTR [rbx+0x50]
   55be4:	lea    rdi,[rsp+0xc0]
   55bec:	mov    ecx,eax
   55bee:	mov    rsi,rbp
   55bf1:	call   4ee30 <re_acquire_state_context>
   55bf6:	mov    rbx,rax
   55bf9:	jmp    55b24 <re_search_internal+0x15a4>
   55bfe:	xchg   ax,ax
   55c00:	mov    rdx,QWORD PTR [rsp+0x10]
   55c05:	mov    rsi,rbx
   55c08:	mov    rdi,r15
   55c0b:	call   51070 <check_halt_state_context>
   55c10:	mov    QWORD PTR [rsp+0x20],rax
   55c15:	test   rax,rax
   55c18:	je     54d77 <re_search_internal+0x7f7>
   55c1e:	jmp    55b96 <re_search_internal+0x1616>
   55c23:	mov    rax,QWORD PTR [rsp+0x88]
   55c2b:	movzx  eax,BYTE PTR [rax+rbx*1]
   55c2f:	jmp    54bf7 <re_search_internal+0x677>
   55c34:	nop    DWORD PTR [rax+0x0]
   55c38:	lea    rbp,[rbx+0x10]
   55c3c:	lea    r12,[rbx+0x18]
   55c40:	xor    ecx,ecx
   55c42:	mov    rdi,r15
   55c45:	mov    rdx,r12
   55c48:	mov    rsi,rbp
   55c4b:	call   51140 <check_subexp_matching_top.isra.0>
   55c50:	mov    DWORD PTR [rsp+0xc0],eax
   55c57:	test   eax,eax
   55c59:	jne    55cbb <re_search_internal+0x173b>
   55c5b:	movzx  eax,BYTE PTR [rbx+0x68]
   55c5f:	test   al,0x40
   55c61:	jne    55c9c <re_search_internal+0x171c>
   55c63:	mov    BYTE PTR [rsp+0xbd],0x0
   55c6b:	jmp    54d5f <re_search_internal+0x7df>
   55c70:	mov    rbx,QWORD PTR [rbp+0x60]
   55c74:	jmp    55b24 <re_search_internal+0x15a4>
   55c79:	nop    DWORD PTR [rax+0x0]
   55c80:	mov    DWORD PTR [rsp+0x54],eax
   55c84:	mov    r13,QWORD PTR [rsp+0x1c8]
   55c8c:	mov    r15,rcx
   55c8f:	jmp    5577e <re_search_internal+0x11fe>
   55c94:	mov    rdi,r14
   55c97:	jmp    55762 <re_search_internal+0x11e2>
   55c9c:	mov    rdx,r12
   55c9f:	mov    rsi,rbp
   55ca2:	mov    rdi,r15
   55ca5:	call   537e0 <transit_state_bkref.isra.0>
   55caa:	mov    DWORD PTR [rsp+0xc0],eax
   55cb1:	test   eax,eax
   55cb3:	jne    55cbb <re_search_internal+0x173b>
   55cb5:	movzx  eax,BYTE PTR [rbx+0x68]
   55cb9:	jmp    55c63 <re_search_internal+0x16e3>
   55cbb:	movsxd r12,eax
   55cbe:	jmp    54f40 <re_search_internal+0x9c0>
   55cc3:	xor    edx,edx
   55cc5:	jmp    550ad <re_search_internal+0xb2d>
   55cca:	cmp    r9,rdx
   55ccd:	je     55ce4 <re_search_internal+0x1764>
   55ccf:	mov    rdx,QWORD PTR [r11+rdx*8]
   55cd3:	mov    QWORD PTR [rax],rdx
   55cd6:	cmp    r9,rsi
   55cd9:	je     55ce9 <re_search_internal+0x1769>
   55cdb:	mov    rsi,QWORD PTR [r11+rsi*8]
   55cdf:	jmp    55106 <re_search_internal+0xb86>
   55ce4:	mov    rdx,r10
   55ce7:	jmp    55cd3 <re_search_internal+0x1753>
   55ce9:	mov    rsi,r10
   55cec:	jmp    55106 <re_search_internal+0xb86>
   55cf1:	mov    rcx,QWORD PTR [rsp+0xb0]
   55cf9:	mov    rax,QWORD PTR [rsp+0x1b8]
   55d01:	xor    edx,edx
   55d03:	mov    QWORD PTR [rcx],0x0
   55d0a:	mov    QWORD PTR [rcx+0x8],rax
   55d0e:	jmp    550ad <re_search_internal+0xb2d>
   55d13:	call   c7b0 <__stack_chk_fail@plt>
   55d18:	mov    DWORD PTR [rsp+0x54],eax
   55d1c:	mov    r13,QWORD PTR [rsp+0x1c8]
   55d24:	jmp    5577e <re_search_internal+0x11fe>
   55d29:	nop    DWORD PTR [rax+0x0]

0000000000055d30 <update_cur_sifted_state>:
   55d30:	push   r15
   55d32:	push   r14
   55d34:	mov    r14,rdx
   55d37:	push   r13
   55d39:	push   r12
   55d3b:	mov    r12,rcx
   55d3e:	push   rbp
   55d3f:	push   rbx
   55d40:	mov    rbx,rsi
   55d43:	sub    rsp,0xa8
   55d4a:	mov    rbp,QWORD PTR [rdi+0x98]
   55d51:	mov    QWORD PTR [rsp],rdi
   55d55:	mov    rax,QWORD PTR fs:0x28
   55d5e:	mov    QWORD PTR [rsp+0x98],rax
   55d66:	xor    eax,eax
   55d68:	lea    rax,[rdx*8+0x0]
   55d70:	mov    rdx,QWORD PTR [r12+0x8]
   55d75:	mov    DWORD PTR [rsp+0x5c],0x0
   55d7d:	mov    QWORD PTR [rsp+0x18],rax
   55d82:	add    rax,QWORD PTR [rdi+0xb8]
   55d89:	mov    rcx,QWORD PTR [rax]
   55d8c:	mov    QWORD PTR [rsp+0x10],rcx
   55d91:	test   rcx,rcx
   55d94:	je     561f8 <update_cur_sifted_state+0x4c8>
   55d9a:	test   rdx,rdx
   55d9d:	jne    55de8 <update_cur_sifted_state+0xb8>
   55d9f:	mov    rdx,QWORD PTR [rsi]
   55da2:	mov    QWORD PTR [rdx+r14*8],0x0
   55daa:	mov    rdx,QWORD PTR [rax]
   55dad:	xor    eax,eax
   55daf:	test   BYTE PTR [rdx+0x68],0x40
   55db3:	jne    55f1a <update_cur_sifted_state+0x1ea>
   55db9:	mov    rbx,QWORD PTR [rsp+0x98]
   55dc1:	xor    rbx,QWORD PTR fs:0x28
   55dca:	jne    5653a <update_cur_sifted_state+0x80a>
   55dd0:	add    rsp,0xa8
   55dd7:	pop    rbx
   55dd8:	pop    rbp
   55dd9:	pop    r12
   55ddb:	pop    r13
   55ddd:	pop    r14
   55ddf:	pop    r15
   55de1:	ret    
   55de2:	nop    WORD PTR [rax+rax*1+0x0]
   55de8:	mov    rdx,r12
   55deb:	lea    rdi,[rsp+0x60]
   55df0:	mov    rsi,rbp
   55df3:	mov    DWORD PTR [rsp+0x60],0x0
   55dfb:	call   4f150 <re_acquire_state>
   55e00:	mov    rdx,rax
   55e03:	mov    eax,DWORD PTR [rsp+0x60]
   55e07:	test   eax,eax
   55e09:	jne    55db9 <update_cur_sifted_state+0x89>
   55e0b:	mov    r13,QWORD PTR [rdx+0x38]
   55e0f:	lea    r15,[rdx+0x38]
   55e13:	test   r13,r13
   55e16:	jne    55ea0 <update_cur_sifted_state+0x170>
   55e1c:	mov    rdi,QWORD PTR [r12+0x8]
   55e21:	mov    QWORD PTR [rdx+0x40],0x0
   55e29:	mov    QWORD PTR [rsp+0x8],rdx
   55e2e:	mov    QWORD PTR [rdx+0x38],rdi
   55e32:	shl    rdi,0x3
   55e36:	call   c0e0 <malloc@plt>
   55e3b:	mov    rdx,QWORD PTR [rsp+0x8]
   55e40:	mov    QWORD PTR [rdx+0x48],rax
   55e44:	test   rax,rax
   55e47:	je     55e90 <update_cur_sifted_state+0x160>
   55e49:	cmp    QWORD PTR [r12+0x8],0x0
   55e4f:	mov    DWORD PTR [rsp+0x60],0x0
   55e57:	jg     55e6b <update_cur_sifted_state+0x13b>
   55e59:	jmp    55ea0 <update_cur_sifted_state+0x170>
   55e5b:	nop    DWORD PTR [rax+rax*1+0x0]
   55e60:	add    r13,0x1
   55e64:	cmp    r13,QWORD PTR [r12+0x8]
   55e69:	jge    55ea0 <update_cur_sifted_state+0x170>
   55e6b:	mov    rax,QWORD PTR [r12+0x10]
   55e70:	mov    rdi,r15
   55e73:	mov    rax,QWORD PTR [rax+r13*8]
   55e77:	lea    rdx,[rax+rax*2]
   55e7b:	mov    rax,QWORD PTR [rbp+0x38]
   55e7f:	lea    rsi,[rax+rdx*8]
   55e83:	call   4dfe0 <re_node_set_merge>
   55e88:	mov    DWORD PTR [rsp+0x60],eax
   55e8c:	test   eax,eax
   55e8e:	je     55e60 <update_cur_sifted_state+0x130>
   55e90:	mov    eax,0xc
   55e95:	jmp    55db9 <update_cur_sifted_state+0x89>
   55e9a:	nop    WORD PTR [rax+rax*1+0x0]
   55ea0:	mov    rax,QWORD PTR [rsp+0x10]
   55ea5:	mov    rdx,r15
   55ea8:	mov    rdi,r12
   55eab:	add    rax,0x8
   55eaf:	mov    rsi,rax
   55eb2:	mov    QWORD PTR [rsp+0x28],rax
   55eb7:	call   4e5b0 <re_node_set_add_intersect>
   55ebc:	mov    DWORD PTR [rsp+0x5c],eax
   55ec0:	test   eax,eax
   55ec2:	jne    55db9 <update_cur_sifted_state+0x89>
   55ec8:	cmp    QWORD PTR [rbx+0x28],0x0
   55ecd:	jne    562c8 <update_cur_sifted_state+0x598>
   55ed3:	lea    rdi,[rsp+0x5c]
   55ed8:	mov    rdx,r12
   55edb:	mov    rsi,rbp
   55ede:	mov    r13,QWORD PTR [rsp+0x18]
   55ee3:	add    r13,QWORD PTR [rbx]
   55ee6:	call   4f150 <re_acquire_state>
   55eeb:	mov    QWORD PTR [r13+0x0],rax
   55eef:	mov    eax,DWORD PTR [rsp+0x5c]
   55ef3:	test   eax,eax
   55ef5:	jne    55db9 <update_cur_sifted_state+0x89>
   55efb:	mov    rcx,QWORD PTR [rsp]
   55eff:	mov    rax,QWORD PTR [rsp+0x18]
   55f04:	add    rax,QWORD PTR [rcx+0xb8]
   55f0b:	mov    rdx,QWORD PTR [rax]
   55f0e:	xor    eax,eax
   55f10:	test   BYTE PTR [rdx+0x68],0x40
   55f14:	je     55db9 <update_cur_sifted_state+0x89>
   55f1a:	mov    rax,QWORD PTR [rsp]
   55f1e:	xor    edi,edi
   55f20:	mov    rsi,QWORD PTR [rax+0xc8]
   55f27:	mov    rdx,rsi
   55f2a:	jmp    55f5d <update_cur_sifted_state+0x22d>
   55f2c:	nop    DWORD PTR [rax+0x0]
   55f30:	lea    rax,[rdx+rdi*1]
   55f34:	mov    r11,QWORD PTR [rsp]
   55f38:	mov    rcx,rax
   55f3b:	and    rax,0xfffffffffffffffe
   55f3f:	sar    rcx,1
   55f42:	add    rax,rcx
   55f45:	shl    rax,0x4
   55f49:	add    rax,QWORD PTR [r11+0xd8]
   55f50:	cmp    r14,QWORD PTR [rax+0x8]
   55f54:	jg     56240 <update_cur_sifted_state+0x510>
   55f5a:	mov    rdx,rcx
   55f5d:	cmp    rdx,rdi
   55f60:	jg     55f30 <update_cur_sifted_state+0x200>
   55f62:	mov    QWORD PTR [rsp+0x40],rdi
   55f67:	cmp    rsi,rdi
   55f6a:	jle    56528 <update_cur_sifted_state+0x7f8>
   55f70:	mov    rax,QWORD PTR [rsp+0x40]
   55f75:	mov    rcx,QWORD PTR [rsp]
   55f79:	lea    rax,[rax+rax*2]
   55f7d:	shl    rax,0x4
   55f81:	mov    QWORD PTR [rsp+0x48],rax
   55f86:	mov    rsi,rax
   55f89:	mov    rax,QWORD PTR [rcx+0xd8]
   55f90:	cmp    r14,QWORD PTR [rax+rsi*1+0x8]
   55f95:	jne    56528 <update_cur_sifted_state+0x7f8>
   55f9b:	mov    rax,QWORD PTR [rsp+0x10]
   55fa0:	mov    r13,QWORD PTR [rcx+0x98]
   55fa7:	mov    QWORD PTR [rsp+0x60],0x0
   55fb0:	cmp    QWORD PTR [rax+0x10],0x0
   55fb5:	jle    56528 <update_cur_sifted_state+0x7f8>
   55fbb:	mov    QWORD PTR [rsp+0x8],0x0
   55fc4:	lea    rax,[rbx+0x30]
   55fc8:	mov    QWORD PTR [rsp+0x38],rax
   55fcd:	jmp    55fee <update_cur_sifted_state+0x2be>
   55fcf:	nop
   55fd0:	cmp    al,0x4
   55fd2:	je     5601f <update_cur_sifted_state+0x2ef>
   55fd4:	mov    rsi,QWORD PTR [rsp+0x10]
   55fd9:	add    QWORD PTR [rsp+0x8],0x1
   55fdf:	mov    rax,QWORD PTR [rsp+0x8]
   55fe4:	cmp    rax,QWORD PTR [rsi+0x10]
   55fe8:	jge    56520 <update_cur_sifted_state+0x7f0>
   55fee:	mov    rax,QWORD PTR [rsp+0x10]
   55ff3:	mov    rcx,QWORD PTR [rsp+0x8]
   55ff8:	mov    rax,QWORD PTR [rax+0x18]
   55ffc:	mov    rbp,QWORD PTR [rax+rcx*8]
   56000:	mov    rax,rbp
   56003:	shl    rax,0x4
   56007:	add    rax,QWORD PTR [r13+0x0]
   5600b:	movzx  eax,BYTE PTR [rax+0x8]
   5600f:	cmp    rbp,QWORD PTR [rbx+0x10]
   56013:	jne    55fd0 <update_cur_sifted_state+0x2a0>
   56015:	cmp    r14,QWORD PTR [rbx+0x18]
   56019:	je     55fd4 <update_cur_sifted_state+0x2a4>
   5601b:	cmp    al,0x4
   5601d:	jne    55fd4 <update_cur_sifted_state+0x2a4>
   5601f:	mov    rax,QWORD PTR [rsp]
   56023:	mov    r15,QWORD PTR [rsp+0x48]
   56028:	mov    r12,QWORD PTR [rsp+0x40]
   5602d:	add    r15,QWORD PTR [rax+0xd8]
   56034:	lea    rax,[rbp+rbp*2+0x0]
   56039:	shl    rax,0x3
   5603d:	mov    QWORD PTR [rsp+0x28],rax
   56042:	lea    rax,[rbp*8+0x0]
   5604a:	mov    QWORD PTR [rsp+0x20],rax
   5604f:	jmp    561c6 <update_cur_sifted_state+0x496>
   56054:	nop    DWORD PTR [rax+0x0]
   56058:	mov    rax,QWORD PTR [r13+0x18]
   5605c:	mov    rcx,QWORD PTR [rsp+0x20]
   56061:	mov    r9,QWORD PTR [rax+rcx*1]
   56065:	cmp    r8,QWORD PTR [rbx+0x18]
   56069:	jg     561b0 <update_cur_sifted_state+0x480>
   5606f:	mov    rax,QWORD PTR [rbx]
   56072:	mov    rax,QWORD PTR [rax+r8*8]
   56076:	test   rax,rax
   56079:	je     561b0 <update_cur_sifted_state+0x480>
   5607f:	mov    rdi,QWORD PTR [rax+0x10]
   56083:	lea    rsi,[rax+0x18]
   56087:	mov    rdx,r9
   5608a:	call   4db50 <re_node_set_contains.isra.0>
   5608f:	test   rax,rax
   56092:	je     561b0 <update_cur_sifted_state+0x480>
   56098:	sub    rsp,0x8
   5609c:	mov    rcx,rbp
   5609f:	lea    rsi,[rbx+0x28]
   560a3:	push   r8
   560a5:	mov    rdx,QWORD PTR [rsp+0x48]
   560aa:	mov    r8,r14
   560ad:	mov    rdi,QWORD PTR [rsp+0x10]
   560b2:	call   4dde0 <check_dst_limits.isra.0>
   560b7:	pop    rdx
   560b8:	pop    rcx
   560b9:	test   al,al
   560bb:	jne    561b0 <update_cur_sifted_state+0x480>
   560c1:	cmp    QWORD PTR [rsp+0x60],0x0
   560c7:	je     56250 <update_cur_sifted_state+0x520>
   560cd:	lea    r15,[rsp+0x80]
   560d5:	lea    r8,[rsp+0x60]
   560da:	mov    rsi,r12
   560dd:	mov    rdi,r15
   560e0:	mov    QWORD PTR [rsp+0x70],rbp
   560e5:	mov    QWORD PTR [rsp+0x30],r8
   560ea:	mov    QWORD PTR [rsp+0x78],r14
   560ef:	call   4c580 <re_node_set_insert>
   560f4:	mov    r8,QWORD PTR [rsp+0x30]
   560f9:	test   al,al
   560fb:	je     56510 <update_cur_sifted_state+0x7e0>
   56101:	mov    rsi,QWORD PTR [rsp+0x18]
   56106:	mov    rax,QWORD PTR [rsp+0x60]
   5610b:	mov    rdi,QWORD PTR [rsp]
   5610f:	mov    r15,QWORD PTR [rax+rsi*1]
   56113:	mov    rsi,r8
   56116:	call   54250 <sift_states_backward>
   5611b:	test   eax,eax
   5611d:	jne    562a0 <update_cur_sifted_state+0x570>
   56123:	mov    rsi,QWORD PTR [rbx+0x8]
   56127:	mov    rdx,QWORD PTR [rsp+0x60]
   5612c:	test   rsi,rsi
   5612f:	je     5614a <update_cur_sifted_state+0x41a>
   56131:	lea    rcx,[r14+0x1]
   56135:	mov    rdi,r13
   56138:	call   4f350 <merge_state_array>
   5613d:	test   eax,eax
   5613f:	jne    562a0 <update_cur_sifted_state+0x570>
   56145:	mov    rdx,QWORD PTR [rsp+0x60]
   5614a:	mov    rax,QWORD PTR [rsp+0x18]
   5614f:	mov    r8,QWORD PTR [rsp+0x88]
   56157:	lea    r9,[rsp+0x90]
   5615f:	mov    rsi,r9
   56162:	mov    QWORD PTR [rdx+rax*1],r15
   56166:	mov    rdi,r8
   56169:	mov    rdx,r12
   5616c:	call   4db50 <re_node_set_contains.isra.0>
   56171:	sub    rax,0x1
   56175:	mov    rdx,rax
   56178:	js     5619b <update_cur_sifted_state+0x46b>
   5617a:	cmp    r8,rax
   5617d:	jle    5619b <update_cur_sifted_state+0x46b>
   5617f:	sub    r8,0x1
   56183:	lea    rdi,[rsp+0x88]
   5618b:	mov    rsi,r9
   5618e:	mov    QWORD PTR [rsp+0x88],r8
   56196:	call   4dcb0 <re_node_set_remove_at.isra.0.part.0>
   5619b:	mov    rax,QWORD PTR [rsp]
   5619f:	lea    r15,[r12+r12*2]
   561a3:	shl    r15,0x4
   561a7:	add    r15,QWORD PTR [rax+0xd8]
   561ae:	xchg   ax,ax
   561b0:	add    r12,0x1
   561b4:	cmp    BYTE PTR [r15+0x28],0x0
   561b9:	lea    rax,[r15+0x30]
   561bd:	je     55fd4 <update_cur_sifted_state+0x2a4>
   561c3:	mov    r15,rax
   561c6:	cmp    rbp,QWORD PTR [r15]
   561c9:	jne    561b0 <update_cur_sifted_state+0x480>
   561cb:	mov    rax,QWORD PTR [r15+0x18]
   561cf:	sub    rax,QWORD PTR [r15+0x10]
   561d3:	lea    r8,[r14+rax*1]
   561d7:	jne    56058 <update_cur_sifted_state+0x328>
   561dd:	mov    rax,QWORD PTR [r13+0x28]
   561e1:	mov    rcx,QWORD PTR [rsp+0x28]
   561e6:	mov    rax,QWORD PTR [rax+rcx*1+0x10]
   561eb:	mov    r9,QWORD PTR [rax]
   561ee:	jmp    56065 <update_cur_sifted_state+0x335>
   561f3:	nop    DWORD PTR [rax+rax*1+0x0]
   561f8:	mov    rax,QWORD PTR [rsp+0x18]
   561fd:	add    rax,QWORD PTR [rsi]
   56200:	mov    rbx,rax
   56203:	test   rdx,rdx
   56206:	jne    56220 <update_cur_sifted_state+0x4f0>
   56208:	mov    QWORD PTR [rax],0x0
   5620f:	xor    eax,eax
   56211:	jmp    55db9 <update_cur_sifted_state+0x89>
   56216:	nop    WORD PTR cs:[rax+rax*1+0x0]
   56220:	lea    rdi,[rsp+0x5c]
   56225:	mov    rdx,r12
   56228:	mov    rsi,rbp
   5622b:	call   4f150 <re_acquire_state>
   56230:	mov    QWORD PTR [rbx],rax
   56233:	mov    eax,DWORD PTR [rsp+0x5c]
   56237:	jmp    55db9 <update_cur_sifted_state+0x89>
   5623c:	nop    DWORD PTR [rax+0x0]
   56240:	lea    rdi,[rcx+0x1]
   56244:	jmp    55f5d <update_cur_sifted_state+0x22d>
   56249:	nop    DWORD PTR [rax+0x0]
   56250:	movdqa xmm0,XMMWORD PTR [rbx]
   56254:	movdqa xmm1,XMMWORD PTR [rbx+0x10]
   56259:	lea    rsi,[rbx+0x20]
   5625d:	lea    r15,[rsp+0x80]
   56265:	movdqa xmm2,XMMWORD PTR [rbx+0x20]
   5626a:	mov    rax,QWORD PTR [rbx+0x30]
   5626e:	mov    rdi,r15
   56271:	movaps XMMWORD PTR [rsp+0x60],xmm0
   56276:	mov    QWORD PTR [rsp+0x90],rax
   5627e:	movaps XMMWORD PTR [rsp+0x70],xmm1
   56283:	movaps XMMWORD PTR [rsp+0x80],xmm2
   5628b:	call   4ec30 <re_node_set_init_copy>
   56290:	test   eax,eax
   56292:	je     560d5 <update_cur_sifted_state+0x3a5>
   56298:	nop    DWORD PTR [rax+rax*1+0x0]
   562a0:	cmp    QWORD PTR [rsp+0x60],0x0
   562a6:	je     55db9 <update_cur_sifted_state+0x89>
   562ac:	mov    rdi,QWORD PTR [rsp+0x90]
   562b4:	mov    DWORD PTR [rsp],eax
   562b7:	call   4bdc0 <rpl_free>
   562bc:	mov    eax,DWORD PTR [rsp]
   562bf:	jmp    55db9 <update_cur_sifted_state+0x89>
   562c4:	nop    DWORD PTR [rax+0x0]
   562c8:	mov    rax,QWORD PTR [rsp]
   562cc:	mov    rax,QWORD PTR [rax+0xd8]
   562d3:	mov    QWORD PTR [rsp+0x20],rax
   562d8:	jle    563be <update_cur_sifted_state+0x68e>
   562de:	mov    QWORD PTR [rsp+0x8],r14
   562e3:	xor    r13d,r13d
   562e6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   562f0:	mov    rax,QWORD PTR [rbx+0x30]
   562f4:	mov    rdi,QWORD PTR [rsp+0x8]
   562f9:	mov    rax,QWORD PTR [rax+r13*8]
   562fd:	lea    rdx,[rax+rax*2]
   56301:	shl    rdx,0x4
   56305:	add    rdx,QWORD PTR [rsp+0x20]
   5630a:	cmp    rdi,QWORD PTR [rdx+0x10]
   5630e:	jle    563ab <update_cur_sifted_state+0x67b>
   56314:	cmp    rdi,QWORD PTR [rdx+0x8]
   56318:	jg     563ab <update_cur_sifted_state+0x67b>
   5631e:	mov    rcx,QWORD PTR [rdx]
   56321:	mov    rax,QWORD PTR [rbp+0x0]
   56325:	mov    rsi,QWORD PTR [r12+0x8]
   5632a:	shl    rcx,0x4
   5632e:	mov    r15,QWORD PTR [rax+rcx*1]
   56332:	cmp    rdi,QWORD PTR [rdx+0x18]
   56336:	je     563d0 <update_cur_sifted_state+0x6a0>
   5633c:	xor    r14d,r14d
   5633f:	test   rsi,rsi
   56342:	jle    563ab <update_cur_sifted_state+0x67b>
   56344:	mov    rsi,r15
   56347:	mov    r15,rbp
   5634a:	mov    rbp,rsi
   5634d:	jmp    5635e <update_cur_sifted_state+0x62e>
   5634f:	nop
   56350:	add    r14,0x1
   56354:	cmp    r14,QWORD PTR [r12+0x8]
   56359:	jge    563a8 <update_cur_sifted_state+0x678>
   5635b:	mov    rax,QWORD PTR [r15]
   5635e:	mov    rdx,QWORD PTR [r12+0x10]
   56363:	mov    rsi,QWORD PTR [rdx+r14*8]
   56367:	mov    rdx,rsi
   5636a:	shl    rdx,0x4
   5636e:	add    rax,rdx
   56371:	movzx  edx,BYTE PTR [rax+0x8]
   56375:	sub    edx,0x8
   56378:	cmp    edx,0x1
   5637b:	ja     56350 <update_cur_sifted_state+0x620>
   5637d:	cmp    rbp,QWORD PTR [rax]
   56380:	jne    56350 <update_cur_sifted_state+0x620>
   56382:	mov    rcx,QWORD PTR [rsp+0x28]
   56387:	mov    rdx,r12
   5638a:	mov    rdi,r15
   5638d:	call   4f840 <sub_epsilon_src_nodes>
   56392:	test   eax,eax
   56394:	jne    55db9 <update_cur_sifted_state+0x89>
   5639a:	add    r14,0x1
   5639e:	cmp    r14,QWORD PTR [r12+0x8]
   563a3:	jl     5635b <update_cur_sifted_state+0x62b>
   563a5:	nop    DWORD PTR [rax]
   563a8:	mov    rbp,r15
   563ab:	add    r13,0x1
   563af:	cmp    r13,QWORD PTR [rbx+0x28]
   563b3:	jl     562f0 <update_cur_sifted_state+0x5c0>
   563b9:	mov    r14,QWORD PTR [rsp+0x8]
   563be:	mov    DWORD PTR [rsp+0x5c],0x0
   563c6:	jmp    55ed3 <update_cur_sifted_state+0x1a3>
   563cb:	nop    DWORD PTR [rax+rax*1+0x0]
   563d0:	test   rsi,rsi
   563d3:	jle    563ab <update_cur_sifted_state+0x67b>
   563d5:	mov    r10,QWORD PTR [r12+0x10]
   563da:	mov    r14,0xffffffffffffffff
   563e1:	mov    r9,0xffffffffffffffff
   563e8:	mov    rcx,r10
   563eb:	lea    r11,[r10+rsi*8]
   563ef:	jmp    5640d <update_cur_sifted_state+0x6dd>
   563f1:	nop    DWORD PTR [rax+0x0]
   563f8:	cmp    esi,0x9
   563fb:	jne    56404 <update_cur_sifted_state+0x6d4>
   563fd:	cmp    r15,QWORD PTR [rdx]
   56400:	cmove  r14,rdi
   56404:	add    rcx,0x8
   56408:	cmp    r11,rcx
   5640b:	je     56433 <update_cur_sifted_state+0x703>
   5640d:	mov    rdi,QWORD PTR [rcx]
   56410:	mov    rdx,rdi
   56413:	shl    rdx,0x4
   56417:	add    rdx,rax
   5641a:	movzx  esi,BYTE PTR [rdx+0x8]
   5641e:	cmp    esi,0x8
   56421:	jne    563f8 <update_cur_sifted_state+0x6c8>
   56423:	cmp    r15,QWORD PTR [rdx]
   56426:	cmove  r9,rdi
   5642a:	add    rcx,0x8
   5642e:	cmp    r11,rcx
   56431:	jne    5640d <update_cur_sifted_state+0x6dd>
   56433:	test   r9,r9
   56436:	jns    564d0 <update_cur_sifted_state+0x7a0>
   5643c:	test   r14,r14
   5643f:	js     563ab <update_cur_sifted_state+0x67b>
   56445:	xor    r15d,r15d
   56448:	mov    QWORD PTR [rsp+0x30],rbx
   5644d:	mov    rbx,r15
   56450:	mov    r15,QWORD PTR [rsp+0x28]
   56455:	jmp    56474 <update_cur_sifted_state+0x744>
   56457:	nop    WORD PTR [rax+rax*1+0x0]
   56460:	add    rbx,0x1
   56464:	cmp    QWORD PTR [r12+0x8],rbx
   56469:	jle    56530 <update_cur_sifted_state+0x800>
   5646f:	mov    r10,QWORD PTR [r12+0x10]
   56474:	mov    r10,QWORD PTR [r10+rbx*8]
   56478:	mov    rax,QWORD PTR [rbp+0x38]
   5647c:	mov    rdx,r14
   5647f:	lea    r8,[r10+r10*2]
   56483:	shl    r8,0x3
   56487:	add    rax,r8
   5648a:	mov    rdi,QWORD PTR [rax+0x8]
   5648e:	lea    rsi,[rax+0x10]
   56492:	call   4db50 <re_node_set_contains.isra.0>
   56497:	test   rax,rax
   5649a:	jne    56460 <update_cur_sifted_state+0x730>
   5649c:	add    r8,QWORD PTR [rbp+0x30]
   564a0:	mov    rdi,QWORD PTR [r8+0x8]
   564a4:	lea    rsi,[r8+0x10]
   564a8:	call   4db50 <re_node_set_contains.isra.0>
   564ad:	test   rax,rax
   564b0:	jne    56460 <update_cur_sifted_state+0x730>
   564b2:	mov    rcx,r15
   564b5:	mov    rdx,r12
   564b8:	mov    rsi,r10
   564bb:	mov    rdi,rbp
   564be:	call   4f840 <sub_epsilon_src_nodes>
   564c3:	test   eax,eax
   564c5:	je     56464 <update_cur_sifted_state+0x734>
   564c7:	jmp    55db9 <update_cur_sifted_state+0x89>
   564cc:	nop    DWORD PTR [rax+0x0]
   564d0:	mov    rcx,QWORD PTR [rsp+0x28]
   564d5:	mov    rdx,r12
   564d8:	mov    rsi,r9
   564db:	mov    rdi,rbp
   564de:	call   4f840 <sub_epsilon_src_nodes>
   564e3:	test   eax,eax
   564e5:	jne    55db9 <update_cur_sifted_state+0x89>
   564eb:	test   r14,r14
   564ee:	js     563ab <update_cur_sifted_state+0x67b>
   564f4:	cmp    QWORD PTR [r12+0x8],0x0
   564fa:	jle    563ab <update_cur_sifted_state+0x67b>
   56500:	mov    r10,QWORD PTR [r12+0x10]
   56505:	jmp    56445 <update_cur_sifted_state+0x715>
   5650a:	nop    WORD PTR [rax+rax*1+0x0]
   56510:	mov    eax,0xc
   56515:	jmp    562a0 <update_cur_sifted_state+0x570>
   5651a:	nop    WORD PTR [rax+rax*1+0x0]
   56520:	cmp    QWORD PTR [rsp+0x60],0x0
   56526:	jne    5653f <update_cur_sifted_state+0x80f>
   56528:	xor    eax,eax
   5652a:	jmp    55db9 <update_cur_sifted_state+0x89>
   5652f:	nop
   56530:	mov    rbx,QWORD PTR [rsp+0x30]
   56535:	jmp    563ab <update_cur_sifted_state+0x67b>
   5653a:	call   c7b0 <__stack_chk_fail@plt>
   5653f:	xor    eax,eax
   56541:	jmp    562ac <update_cur_sifted_state+0x57c>
   56546:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000056550 <parse_bracket_element.constprop.0>:
   56550:	push   r14
   56552:	mov    r10,rsi
   56555:	movsxd r11,ecx
   56558:	push   r13
   5655a:	push   r12
   5655c:	push   rbp
   5655d:	mov    rbp,rdx
   56560:	push   rbx
   56561:	mov    rbx,rdi
   56564:	sub    rsp,0x20
   56568:	mov    r12,QWORD PTR [rsi+0x48]
   5656c:	mov    rax,QWORD PTR fs:0x28
   56575:	mov    QWORD PTR [rsp+0x18],rax
   5657a:	xor    eax,eax
   5657c:	cmp    DWORD PTR [rsi+0x90],0x1
   56583:	je     56595 <parse_bracket_element.constprop.0+0x45>
   56585:	mov    rsi,r12
   56588:	mov    rdi,r10
   5658b:	call   4db10 <re_string_char_size_at.part.0>
   56590:	cmp    eax,0x1
   56593:	jg     565f0 <parse_bracket_element.constprop.0+0xa0>
   56595:	movzx  eax,BYTE PTR [rbp+0x8]
   56599:	add    r11,r12
   5659c:	mov    QWORD PTR [r10+0x48],r11
   565a0:	mov    edx,eax
   565a2:	and    edx,0xfffffffb
   565a5:	cmp    dl,0x1a
   565a8:	je     56610 <parse_bracket_element.constprop.0+0xc0>
   565aa:	cmp    al,0x1c
   565ac:	je     56610 <parse_bracket_element.constprop.0+0xc0>
   565ae:	cmp    al,0x16
   565b0:	jne    565bb <parse_bracket_element.constprop.0+0x6b>
   565b2:	test   r9b,r9b
   565b5:	je     56760 <parse_bracket_element.constprop.0+0x210>
   565bb:	movzx  eax,BYTE PTR [rbp+0x0]
   565bf:	mov    DWORD PTR [rbx],0x0
   565c5:	mov    BYTE PTR [rbx+0x8],al
   565c8:	xor    eax,eax
   565ca:	mov    rcx,QWORD PTR [rsp+0x18]
   565cf:	xor    rcx,QWORD PTR fs:0x28
   565d8:	jne    5679d <parse_bracket_element.constprop.0+0x24d>
   565de:	add    rsp,0x20
   565e2:	pop    rbx
   565e3:	pop    rbp
   565e4:	pop    r12
   565e6:	pop    r13
   565e8:	pop    r14
   565ea:	ret    
   565eb:	nop    DWORD PTR [rax+rax*1+0x0]
   565f0:	mov    rdx,QWORD PTR [r10+0x10]
   565f4:	mov    DWORD PTR [rbx],0x1
   565fa:	cdqe   
   565fc:	add    rax,r12
   565ff:	mov    edx,DWORD PTR [rdx+r12*4]
   56603:	mov    DWORD PTR [rbx+0x8],edx
   56606:	mov    QWORD PTR [r10+0x48],rax
   5660a:	xor    eax,eax
   5660c:	jmp    565ca <parse_bracket_element.constprop.0+0x7a>
   5660e:	xchg   ax,ax
   56610:	mov    r12,QWORD PTR [r10+0x68]
   56614:	cmp    r11,r12
   56617:	jge    566c0 <parse_bracket_element.constprop.0+0x170>
   5661d:	movzx  r13d,BYTE PTR [rbp+0x0]
   56622:	xor    r9d,r9d
   56625:	jmp    5664e <parse_bracket_element.constprop.0+0xfe>
   56627:	nop    WORD PTR [rax+rax*1+0x0]
   56630:	mov    rax,QWORD PTR [rbx+0x8]
   56634:	mov    BYTE PTR [rax+r9*1],r8b
   56638:	add    r9,0x1
   5663c:	cmp    r9,0x20
   56640:	je     566c0 <parse_bracket_element.constprop.0+0x170>
   56642:	movzx  eax,BYTE PTR [rbp+0x8]
   56646:	mov    r11,QWORD PTR [r10+0x48]
   5664a:	mov    r12,QWORD PTR [r10+0x68]
   5664e:	movsxd r14,r9d
   56651:	cmp    al,0x1e
   56653:	je     566d0 <parse_bracket_element.constprop.0+0x180>
   56655:	mov    rdx,QWORD PTR [r10+0x8]
   56659:	lea    rax,[r11+0x1]
   5665d:	mov    QWORD PTR [r10+0x48],rax
   56661:	movzx  r8d,BYTE PTR [rdx+r11*1]
   56666:	cmp    r12,rax
   56669:	jle    566c0 <parse_bracket_element.constprop.0+0x170>
   5666b:	cmp    r13b,r8b
   5666e:	jne    56630 <parse_bracket_element.constprop.0+0xe0>
   56670:	mov    rdx,QWORD PTR [r10+0x8]
   56674:	cmp    BYTE PTR [rdx+rax*1],0x5d
   56678:	jne    56630 <parse_bracket_element.constprop.0+0xe0>
   5667a:	add    rax,0x1
   5667e:	mov    QWORD PTR [r10+0x48],rax
   56682:	mov    rax,QWORD PTR [rbx+0x8]
   56686:	mov    BYTE PTR [rax+r14*1],0x0
   5668b:	movzx  edx,BYTE PTR [rbp+0x8]
   5668f:	cmp    dl,0x1c
   56692:	je     56790 <parse_bracket_element.constprop.0+0x240>
   56698:	cmp    dl,0x1e
   5669b:	je     56783 <parse_bracket_element.constprop.0+0x233>
   566a1:	xor    eax,eax
   566a3:	cmp    dl,0x1a
   566a6:	jne    565ca <parse_bracket_element.constprop.0+0x7a>
   566ac:	mov    DWORD PTR [rbx],0x3
   566b2:	jmp    565ca <parse_bracket_element.constprop.0+0x7a>
   566b7:	nop    WORD PTR [rax+rax*1+0x0]
   566c0:	mov    eax,0x7
   566c5:	jmp    565ca <parse_bracket_element.constprop.0+0x7a>
   566ca:	nop    WORD PTR [rax+rax*1+0x0]
   566d0:	cmp    BYTE PTR [r10+0x8b],0x0
   566d8:	je     56655 <parse_bracket_element.constprop.0+0x105>
   566de:	cmp    BYTE PTR [r10+0x8c],0x0
   566e6:	je     56748 <parse_bracket_element.constprop.0+0x1f8>
   566e8:	cmp    r11,QWORD PTR [r10+0x30]
   566ec:	je     566fd <parse_bracket_element.constprop.0+0x1ad>
   566ee:	mov    rax,QWORD PTR [r10+0x10]
   566f2:	cmp    DWORD PTR [rax+r11*4],0xffffffff
   566f7:	je     56655 <parse_bracket_element.constprop.0+0x105>
   566fd:	mov    rax,QWORD PTR [r10+0x18]
   56701:	mov    rax,QWORD PTR [rax+r11*8]
   56705:	add    rax,QWORD PTR [r10]
   56708:	add    rax,QWORD PTR [r10+0x28]
   5670c:	movzx  r8d,BYTE PTR [rax]
   56710:	test   r8b,0x80
   56714:	jne    56655 <parse_bracket_element.constprop.0+0x105>
   5671a:	cmp    DWORD PTR [r10+0x90],0x1
   56722:	mov    eax,0x1
   56727:	je     56736 <parse_bracket_element.constprop.0+0x1e6>
   56729:	mov    rsi,r11
   5672c:	mov    rdi,r10
   5672f:	call   4db10 <re_string_char_size_at.part.0>
   56734:	cdqe   
   56736:	add    rax,r11
   56739:	mov    QWORD PTR [r10+0x48],rax
   5673d:	jmp    56666 <parse_bracket_element.constprop.0+0x116>
   56742:	nop    WORD PTR [rax+rax*1+0x0]
   56748:	lea    rax,[r11+0x1]
   5674c:	add    r11,QWORD PTR [r10]
   5674f:	add    r11,QWORD PTR [r10+0x28]
   56753:	mov    QWORD PTR [r10+0x48],rax
   56757:	movzx  r8d,BYTE PTR [r11]
   5675b:	jmp    56666 <parse_bracket_element.constprop.0+0x116>
   56760:	mov    rdi,rsp
   56763:	mov    rdx,r8
   56766:	mov    rsi,r10
   56769:	call   4bfc0 <peek_token_bracket>
   5676e:	cmp    BYTE PTR [rsp+0x8],0x15
   56773:	mov    eax,0xb
   56778:	je     565bb <parse_bracket_element.constprop.0+0x6b>
   5677e:	jmp    565ca <parse_bracket_element.constprop.0+0x7a>
   56783:	mov    DWORD PTR [rbx],0x4
   56789:	xor    eax,eax
   5678b:	jmp    565ca <parse_bracket_element.constprop.0+0x7a>
   56790:	mov    DWORD PTR [rbx],0x2
   56796:	xor    eax,eax
   56798:	jmp    565ca <parse_bracket_element.constprop.0+0x7a>
   5679d:	call   c7b0 <__stack_chk_fail@plt>
   567a2:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   567ad:	nop    DWORD PTR [rax]

00000000000567b0 <peek_token>:
   567b0:	push   r15
   567b2:	push   r14
   567b4:	push   r13
   567b6:	push   r12
   567b8:	push   rbp
   567b9:	mov    rbp,rdi
   567bc:	push   rbx
   567bd:	sub    rsp,0x38
   567c1:	mov    r14,QWORD PTR [rsi+0x48]
   567c5:	mov    rax,QWORD PTR fs:0x28
   567ce:	mov    QWORD PTR [rsp+0x28],rax
   567d3:	xor    eax,eax
   567d5:	cmp    QWORD PTR [rsi+0x68],r14
   567d9:	jle    56950 <peek_token+0x1a0>
   567df:	mov    r15,QWORD PTR [rsi+0x8]
   567e3:	mov    eax,DWORD PTR [rsi+0x90]
   567e9:	mov    r12,rsi
   567ec:	mov    r13,rdx
   567ef:	movzx  ebx,BYTE PTR [r15+r14*1]
   567f4:	and    BYTE PTR [rdi+0xa],0x9f
   567f8:	mov    BYTE PTR [rdi],bl
   567fa:	cmp    eax,0x1
   567fd:	jle    568c8 <peek_token+0x118>
   56803:	cmp    r14,QWORD PTR [rsi+0x30]
   56807:	je     56818 <peek_token+0x68>
   56809:	mov    rdx,QWORD PTR [rsi+0x10]
   5680d:	cmp    DWORD PTR [rdx+r14*4],0xffffffff
   56812:	je     569e0 <peek_token+0x230>
   56818:	cmp    bl,0x5c
   5681b:	je     56930 <peek_token+0x180>
   56821:	mov    rax,QWORD PTR [r12+0x10]
   56826:	mov    BYTE PTR [rbp+0x8],0x1
   5682a:	mov    edx,DWORD PTR [rax+r14*4]
   5682e:	mov    edi,edx
   56830:	mov    DWORD PTR [rsp+0xc],edx
   56834:	call   c420 <iswalnum@plt>
   56839:	mov    edx,DWORD PTR [rsp+0xc]
   5683d:	test   eax,eax
   5683f:	setne  al
   56842:	cmp    edx,0x5f
   56845:	sete   dl
   56848:	or     eax,edx
   5684a:	shl    eax,0x6
   5684d:	mov    edx,eax
   5684f:	movzx  eax,BYTE PTR [rbp+0xa]
   56853:	and    eax,0xffffffbf
   56856:	or     eax,edx
   56858:	mov    BYTE PTR [rbp+0xa],al
   5685b:	cmp    bl,0x3f
   5685e:	ja     5690b <peek_token+0x15b>
   56864:	cmp    bl,0x9
   56867:	jbe    5689a <peek_token+0xea>
   56869:	sub    ebx,0xa
   5686c:	cmp    bl,0x35
   5686f:	ja     5689a <peek_token+0xea>
   56871:	lea    rdx,[rip+0x19568]        # 6fde0 <quoting_style_vals+0x100>
   56878:	movzx  ebx,bl
   5687b:	movsxd rax,DWORD PTR [rdx+rbx*4]
   5687f:	add    rax,rdx
   56882:	notrack jmp rax
   56885:	cmp    BYTE PTR [r15+r14*1-0x1],0xa
   5688b:	jne    5689a <peek_token+0xea>
   5688d:	test   r13d,0x800
   56894:	jne    56b3d <peek_token+0x38d>
   5689a:	mov    eax,0x1
   5689f:	mov    rcx,QWORD PTR [rsp+0x28]
   568a4:	xor    rcx,QWORD PTR fs:0x28
   568ad:	jne    56e7d <peek_token+0x6cd>
   568b3:	add    rsp,0x38
   568b7:	pop    rbx
   568b8:	pop    rbp
   568b9:	pop    r12
   568bb:	pop    r13
   568bd:	pop    r14
   568bf:	pop    r15
   568c1:	ret    
   568c2:	nop    WORD PTR [rax+rax*1+0x0]
   568c8:	cmp    bl,0x5c
   568cb:	je     56930 <peek_token+0x180>
   568cd:	call   c3b0 <__ctype_b_loc@plt>
   568d2:	mov    r8,rax
   568d5:	movzx  eax,bl
   568d8:	mov    rdx,QWORD PTR [r8]
   568db:	movzx  eax,WORD PTR [rdx+rax*2]
   568df:	shr    ax,0x3
   568e3:	cmp    bl,0x5f
   568e6:	sete   dl
   568e9:	or     eax,edx
   568eb:	mov    edx,DWORD PTR [rbp+0x8]
   568ee:	and    eax,0x1
   568f1:	shl    eax,0x16
   568f4:	and    edx,0xffbfff00
   568fa:	or     eax,0x1
   568fd:	or     eax,edx
   568ff:	mov    DWORD PTR [rbp+0x8],eax
   56902:	cmp    bl,0x3f
   56905:	jbe    56864 <peek_token+0xb4>
   5690b:	sub    ebx,0x5b
   5690e:	cmp    bl,0x22
   56911:	ja     5689a <peek_token+0xea>
   56913:	lea    rdx,[rip+0x1959e]        # 6feb8 <quoting_style_vals+0x1d8>
   5691a:	movzx  ebx,bl
   5691d:	movsxd rax,DWORD PTR [rdx+rbx*4]
   56921:	add    rax,rdx
   56924:	notrack jmp rax
   56927:	nop    WORD PTR [rax+rax*1+0x0]
   56930:	lea    rcx,[r14+0x1]
   56934:	cmp    rcx,QWORD PTR [r12+0x58]
   56939:	jl     56960 <peek_token+0x1b0>
   5693b:	mov    BYTE PTR [rbp+0x8],0x24
   5693f:	mov    eax,0x1
   56944:	jmp    5689f <peek_token+0xef>
   56949:	nop    DWORD PTR [rax+0x0]
   56950:	mov    BYTE PTR [rdi+0x8],0x2
   56954:	jmp    5689f <peek_token+0xef>
   56959:	nop    DWORD PTR [rax+0x0]
   56960:	cmp    BYTE PTR [r12+0x8b],0x0
   56969:	jne    56dee <peek_token+0x63e>
   5696f:	movzx  esi,BYTE PTR [r15+r14*1+0x1]
   56975:	mov    DWORD PTR [rsp+0xc],esi
   56979:	mov    ebx,esi
   5697b:	mov    BYTE PTR [rbp+0x0],bl
   5697e:	mov    BYTE PTR [rbp+0x8],0x1
   56982:	cmp    eax,0x1
   56985:	jle    56b90 <peek_token+0x3e0>
   5698b:	mov    rax,QWORD PTR [r12+0x10]
   56990:	lea    rsi,[rax+rcx*4]
   56994:	mov    r12d,DWORD PTR [rsi]
   56997:	mov    edi,r12d
   5699a:	call   c420 <iswalnum@plt>
   5699f:	test   eax,eax
   569a1:	setne  al
   569a4:	cmp    r12d,0x5f
   569a8:	sete   cl
   569ab:	or     eax,ecx
   569ad:	shl    eax,0x6
   569b0:	mov    ecx,eax
   569b2:	movzx  eax,BYTE PTR [rbp+0xa]
   569b6:	and    eax,0xffffffbf
   569b9:	or     eax,ecx
   569bb:	mov    BYTE PTR [rbp+0xa],al
   569be:	lea    edx,[rbx-0x27]
   569c1:	cmp    dl,0x56
   569c4:	ja     56bc8 <peek_token+0x418>
   569ca:	lea    rcx,[rip+0x19573]        # 6ff44 <quoting_style_vals+0x264>
   569d1:	movzx  edx,dl
   569d4:	movsxd rax,DWORD PTR [rcx+rdx*4]
   569d8:	add    rax,rcx
   569db:	notrack jmp rax
   569de:	xchg   ax,ax
   569e0:	mov    eax,DWORD PTR [rdi+0x8]
   569e3:	and    eax,0xffdfff00
   569e8:	or     eax,0x200001
   569ed:	mov    DWORD PTR [rdi+0x8],eax
   569f0:	mov    eax,0x1
   569f5:	jmp    5689f <peek_token+0xef>
   569fa:	and    r13d,0x1200
   56a01:	mov    eax,0x1
   56a06:	cmp    r13,0x1200
   56a0d:	jne    5689f <peek_token+0xef>
   56a13:	mov    BYTE PTR [rbp+0x8],0x18
   56a17:	jmp    5689f <peek_token+0xef>
   56a1c:	mov    eax,0x1
   56a21:	test   r13d,0x800
   56a28:	je     5689f <peek_token+0xef>
   56a2e:	mov    BYTE PTR [rbp+0x8],0xa
   56a32:	mov    eax,0x1
   56a37:	jmp    5689f <peek_token+0xef>
   56a3c:	test   r13b,0x8
   56a40:	jne    56a80 <peek_token+0x2d0>
   56a42:	add    r14,0x1
   56a46:	cmp    r14,QWORD PTR [r12+0x58]
   56a4b:	je     56a80 <peek_token+0x2d0>
   56a4d:	mov    QWORD PTR [r12+0x48],r14
   56a52:	mov    rdx,r13
   56a55:	lea    rdi,[rsp+0x10]
   56a5a:	mov    rsi,r12
   56a5d:	call   567b0 <peek_token>
   56a62:	movzx  eax,BYTE PTR [rsp+0x18]
   56a67:	sub    QWORD PTR [r12+0x48],0x1
   56a6d:	lea    edx,[rax-0x9]
   56a70:	mov    eax,0x1
   56a75:	cmp    dl,0x1
   56a78:	ja     5689f <peek_token+0xef>
   56a7e:	xchg   ax,ax
   56a80:	mov    BYTE PTR [rbp+0x8],0xc
   56a84:	mov    eax,0x1
   56a89:	mov    DWORD PTR [rbp+0x0],0x20
   56a90:	jmp    5689f <peek_token+0xef>
   56a95:	mov    eax,0x1
   56a9a:	test   r13d,0x2000
   56aa1:	je     5689f <peek_token+0xef>
   56aa7:	mov    BYTE PTR [rbp+0x8],0x8
   56aab:	jmp    5689f <peek_token+0xef>
   56ab0:	mov    eax,0x1
   56ab5:	test   r13d,0x2000
   56abc:	je     5689f <peek_token+0xef>
   56ac2:	mov    BYTE PTR [rbp+0x8],0x9
   56ac6:	jmp    5689f <peek_token+0xef>
   56acb:	mov    BYTE PTR [rbp+0x8],0xb
   56acf:	mov    eax,0x1
   56ad4:	jmp    5689f <peek_token+0xef>
   56ad9:	mov    eax,0x1
   56ade:	test   r13d,0x402
   56ae5:	jne    5689f <peek_token+0xef>
   56aeb:	mov    BYTE PTR [rbp+0x8],0x12
   56aef:	jmp    5689f <peek_token+0xef>
   56af4:	mov    BYTE PTR [rbp+0x8],0x5
   56af8:	mov    eax,0x1
   56afd:	jmp    5689f <peek_token+0xef>
   56b02:	mov    eax,0x1
   56b07:	test   r13d,0x402
   56b0e:	jne    5689f <peek_token+0xef>
   56b14:	mov    BYTE PTR [rbp+0x8],0x13
   56b18:	jmp    5689f <peek_token+0xef>
   56b1d:	mov    BYTE PTR [rbp+0x8],0x14
   56b21:	mov    eax,0x1
   56b26:	jmp    5689f <peek_token+0xef>
   56b2b:	test   r13d,0x800008
   56b32:	jne    56b3d <peek_token+0x38d>
   56b34:	test   r14,r14
   56b37:	jne    56885 <peek_token+0xd5>
   56b3d:	mov    BYTE PTR [rbp+0x8],0xc
   56b41:	mov    eax,0x1
   56b46:	mov    DWORD PTR [rbp+0x0],0x10
   56b4d:	jmp    5689f <peek_token+0xef>
   56b52:	and    r13d,0x1200
   56b59:	mov    eax,0x1
   56b5e:	cmp    r13,0x1200
   56b65:	jne    5689f <peek_token+0xef>
   56b6b:	mov    BYTE PTR [rbp+0x8],0x17
   56b6f:	jmp    5689f <peek_token+0xef>
   56b74:	and    r13d,0x8400
   56b7b:	cmp    r13,0x8000
   56b82:	jne    5689a <peek_token+0xea>
   56b88:	jmp    56a2e <peek_token+0x27e>
   56b8d:	nop    DWORD PTR [rax]
   56b90:	call   c3b0 <__ctype_b_loc@plt>
   56b95:	mov    r8,rax
   56b98:	movzx  eax,bl
   56b9b:	mov    rcx,QWORD PTR [r8]
   56b9e:	movzx  eax,WORD PTR [rcx+rax*2]
   56ba2:	shr    ax,0x3
   56ba6:	and    eax,0x1
   56ba9:	cmp    bl,0x5f
   56bac:	sete   cl
   56baf:	or     eax,ecx
   56bb1:	movzx  ecx,BYTE PTR [rbp+0xa]
   56bb5:	shl    eax,0x6
   56bb8:	and    ecx,0xffffffbf
   56bbb:	or     eax,ecx
   56bbd:	mov    BYTE PTR [rbp+0xa],al
   56bc0:	jmp    569be <peek_token+0x20e>
   56bc5:	nop    DWORD PTR [rax]
   56bc8:	mov    eax,0x2
   56bcd:	jmp    5689f <peek_token+0xef>
   56bd2:	mov    eax,0x2
   56bd7:	test   r13d,0x4000
   56bde:	jne    5689f <peek_token+0xef>
   56be4:	mov    edx,DWORD PTR [rsp+0xc]
   56be8:	mov    BYTE PTR [rbp+0x8],0x4
   56bec:	sub    edx,0x31
   56bef:	movsxd rdx,edx
   56bf2:	mov    QWORD PTR [rbp+0x0],rdx
   56bf6:	jmp    5689f <peek_token+0xef>
   56bfb:	and    r13d,0x1200
   56c02:	mov    eax,0x2
   56c07:	cmp    r13,0x200
   56c0e:	jne    5689f <peek_token+0xef>
   56c14:	jmp    56a13 <peek_token+0x263>
   56c19:	mov    eax,0x2
   56c1e:	test   r13d,0x8400
   56c25:	jne    5689f <peek_token+0xef>
   56c2b:	mov    BYTE PTR [rbp+0x8],0xa
   56c2f:	jmp    5689f <peek_token+0xef>
   56c34:	and    r13d,0x1200
   56c3b:	mov    eax,0x2
   56c40:	cmp    r13,0x200
   56c47:	jne    5689f <peek_token+0xef>
   56c4d:	jmp    56b6b <peek_token+0x3bb>
   56c52:	mov    eax,0x2
   56c57:	test   r13d,0x80000
   56c5e:	jne    5689f <peek_token+0xef>
   56c64:	mov    BYTE PTR [rbp+0x8],0xc
   56c68:	mov    DWORD PTR [rbp+0x0],0x80
   56c6f:	jmp    5689f <peek_token+0xef>
   56c74:	and    r13d,0x402
   56c7b:	mov    eax,0x2
   56c80:	cmp    r13,0x2
   56c84:	jne    5689f <peek_token+0xef>
   56c8a:	jmp    56aeb <peek_token+0x33b>
   56c8f:	mov    eax,0x2
   56c94:	test   r13d,0x80000
   56c9b:	jne    5689f <peek_token+0xef>
   56ca1:	mov    BYTE PTR [rbp+0x8],0xc
   56ca5:	mov    DWORD PTR [rbp+0x0],0x9
   56cac:	jmp    5689f <peek_token+0xef>
   56cb1:	mov    eax,0x2
   56cb6:	test   r13d,0x80000
   56cbd:	jne    5689f <peek_token+0xef>
   56cc3:	mov    BYTE PTR [rbp+0x8],0xc
   56cc7:	mov    DWORD PTR [rbp+0x0],0x6
   56cce:	jmp    5689f <peek_token+0xef>
   56cd3:	mov    eax,0x2
   56cd8:	test   r13d,0x2000
   56cdf:	jne    5689f <peek_token+0xef>
   56ce5:	jmp    56ac2 <peek_token+0x312>
   56cea:	mov    eax,0x2
   56cef:	test   r13d,0x2000
   56cf6:	jne    5689f <peek_token+0xef>
   56cfc:	jmp    56aa7 <peek_token+0x2f7>
   56d01:	mov    eax,0x2
   56d06:	test   r13d,0x80000
   56d0d:	jne    5689f <peek_token+0xef>
   56d13:	mov    BYTE PTR [rbp+0x8],0x20
   56d17:	jmp    5689f <peek_token+0xef>
   56d1c:	mov    eax,0x2
   56d21:	test   r13d,0x80000
   56d28:	jne    5689f <peek_token+0xef>
   56d2e:	mov    BYTE PTR [rbp+0x8],0x22
   56d32:	jmp    5689f <peek_token+0xef>
   56d37:	mov    eax,0x2
   56d3c:	test   r13d,0x80000
   56d43:	jne    5689f <peek_token+0xef>
   56d49:	mov    BYTE PTR [rbp+0x8],0xc
   56d4d:	mov    DWORD PTR [rbp+0x0],0x100
   56d54:	jmp    5689f <peek_token+0xef>
   56d59:	mov    eax,0x2
   56d5e:	test   r13d,0x80000
   56d65:	jne    5689f <peek_token+0xef>
   56d6b:	mov    BYTE PTR [rbp+0x8],0xc
   56d6f:	mov    DWORD PTR [rbp+0x0],0x40
   56d76:	jmp    5689f <peek_token+0xef>
   56d7b:	mov    eax,0x2
   56d80:	test   r13d,0x80000
   56d87:	jne    5689f <peek_token+0xef>
   56d8d:	mov    BYTE PTR [rbp+0x8],0x21
   56d91:	jmp    5689f <peek_token+0xef>
   56d96:	mov    eax,0x2
   56d9b:	test   r13d,0x80000
   56da2:	jne    5689f <peek_token+0xef>
   56da8:	mov    BYTE PTR [rbp+0x8],0x23
   56dac:	jmp    5689f <peek_token+0xef>
   56db1:	mov    eax,0x2
   56db6:	test   r13d,0x80000
   56dbd:	jne    5689f <peek_token+0xef>
   56dc3:	mov    BYTE PTR [rbp+0x8],0xc
   56dc7:	mov    DWORD PTR [rbp+0x0],0x200
   56dce:	jmp    5689f <peek_token+0xef>
   56dd3:	and    r13d,0x402
   56dda:	mov    eax,0x2
   56ddf:	cmp    r13,0x2
   56de3:	jne    5689f <peek_token+0xef>
   56de9:	jmp    56b14 <peek_token+0x364>
   56dee:	cmp    eax,0x1
   56df1:	jle    56e1b <peek_token+0x66b>
   56df3:	mov    rdi,QWORD PTR [r12+0x10]
   56df8:	lea    rdx,[rcx*4+0x0]
   56e00:	lea    rsi,[rdi+rdx*1]
   56e04:	cmp    DWORD PTR [rsi],0xffffffff
   56e07:	je     56e65 <peek_token+0x6b5>
   56e09:	lea    r8,[r14+0x2]
   56e0d:	cmp    QWORD PTR [r12+0x30],r8
   56e12:	je     56e1b <peek_token+0x66b>
   56e14:	cmp    DWORD PTR [rdi+rdx*1+0x4],0xffffffff
   56e19:	je     56e65 <peek_token+0x6b5>
   56e1b:	cmp    BYTE PTR [r12+0x8c],0x0
   56e24:	mov    rdx,QWORD PTR [r12]
   56e28:	mov    rsi,QWORD PTR [r12+0x28]
   56e2d:	je     56e53 <peek_token+0x6a3>
   56e2f:	mov    rdi,QWORD PTR [r12+0x18]
   56e34:	add    rdx,rsi
   56e37:	add    rdx,QWORD PTR [rdi+rcx*8]
   56e3b:	movzx  esi,BYTE PTR [rdx]
   56e3e:	mov    DWORD PTR [rsp+0xc],esi
   56e42:	mov    ebx,esi
   56e44:	test   sil,0x80
   56e48:	je     5697b <peek_token+0x1cb>
   56e4e:	jmp    5696f <peek_token+0x1bf>
   56e53:	add    rdx,rcx
   56e56:	movzx  esi,BYTE PTR [rdx+rsi*1]
   56e5a:	mov    DWORD PTR [rsp+0xc],esi
   56e5e:	mov    ebx,esi
   56e60:	jmp    5697b <peek_token+0x1cb>
   56e65:	movzx  eax,BYTE PTR [r15+r14*1+0x1]
   56e6b:	mov    BYTE PTR [rbp+0x8],0x1
   56e6f:	mov    BYTE PTR [rbp+0x0],al
   56e72:	mov    ebx,eax
   56e74:	mov    DWORD PTR [rsp+0xc],eax
   56e78:	jmp    56994 <peek_token+0x1e4>
   56e7d:	call   c7b0 <__stack_chk_fail@plt>
   56e82:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   56e8d:	nop    DWORD PTR [rax]

0000000000056e90 <fetch_number>:
   56e90:	push   r14
   56e92:	mov    r14,rdi
   56e95:	push   r13
   56e97:	mov    r13,rsi
   56e9a:	push   r12
   56e9c:	mov    r12,0xffffffffffffffff
   56ea3:	push   rbp
   56ea4:	mov    ebp,0x8030
   56ea9:	push   rbx
   56eaa:	mov    rbx,rdx
   56ead:	nop    DWORD PTR [rax]
   56eb0:	mov    rdx,rbx
   56eb3:	mov    rsi,r14
   56eb6:	mov    rdi,r13
   56eb9:	call   567b0 <peek_token>
   56ebe:	movzx  edx,BYTE PTR [r13+0x0]
   56ec3:	cdqe   
   56ec5:	add    QWORD PTR [r14+0x48],rax
   56ec9:	movzx  eax,BYTE PTR [r13+0x8]
   56ece:	cmp    al,0x2
   56ed0:	je     56f20 <fetch_number+0x90>
   56ed2:	cmp    dl,0x2c
   56ed5:	je     56f27 <fetch_number+0x97>
   56ed7:	cmp    al,0x18
   56ed9:	je     56f27 <fetch_number+0x97>
   56edb:	cmp    al,0x1
   56edd:	je     56ef0 <fetch_number+0x60>
   56edf:	mov    r12,0xfffffffffffffffe
   56ee6:	jmp    56eb0 <fetch_number+0x20>
   56ee8:	nop    DWORD PTR [rax+rax*1+0x0]
   56ef0:	lea    eax,[rdx-0x30]
   56ef3:	cmp    al,0x9
   56ef5:	ja     56edf <fetch_number+0x4f>
   56ef7:	cmp    r12,0xfffffffffffffffe
   56efb:	je     56edf <fetch_number+0x4f>
   56efd:	cmp    r12,0xffffffffffffffff
   56f01:	je     56f38 <fetch_number+0xa8>
   56f03:	lea    rax,[r12+r12*4]
   56f07:	lea    r12,[rdx+rax*2]
   56f0b:	cmp    r12,0x8030
   56f12:	cmovg  r12,rbp
   56f16:	sub    r12,0x30
   56f1a:	jmp    56eb0 <fetch_number+0x20>
   56f1c:	nop    DWORD PTR [rax+0x0]
   56f20:	mov    r12,0xfffffffffffffffe
   56f27:	pop    rbx
   56f28:	mov    rax,r12
   56f2b:	pop    rbp
   56f2c:	pop    r12
   56f2e:	pop    r13
   56f30:	pop    r14
   56f32:	ret    
   56f33:	nop    DWORD PTR [rax+rax*1+0x0]
   56f38:	movzx  r12d,dl
   56f3c:	sub    r12d,0x30
   56f40:	movsxd r12,r12d
   56f43:	jmp    56eb0 <fetch_number+0x20>
   56f48:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000056f50 <parse_expression>:
   56f50:	push   r15
   56f52:	mov    r15,rdi
   56f55:	push   r14
   56f57:	push   r13
   56f59:	push   r12
   56f5b:	push   rbp
   56f5c:	mov    rbp,rsi
   56f5f:	push   rbx
   56f60:	sub    rsp,0x118
   56f67:	mov    QWORD PTR [rsp+0x8],rdx
   56f6c:	mov    QWORD PTR [rsp+0x10],rcx
   56f71:	mov    QWORD PTR [rsp+0x40],r9
   56f76:	mov    rax,QWORD PTR fs:0x28
   56f7f:	mov    QWORD PTR [rsp+0x108],rax
   56f87:	xor    eax,eax
   56f89:	mov    rax,QWORD PTR [rsi]
   56f8c:	mov    QWORD PTR [rsp+0x18],rax
   56f91:	movzx  eax,BYTE PTR [rdx+0x8]
   56f95:	lea    rdx,[rip+0x19104]        # 700a0 <quoting_style_vals+0x3c0>
   56f9c:	mov    rcx,rax
   56f9f:	movsxd rax,DWORD PTR [rdx+rax*4]
   56fa3:	add    rax,rdx
   56fa6:	notrack jmp rax
   56fa9:	mov    rbx,QWORD PTR [rsi+0x30]
   56fad:	mov    r14,QWORD PTR [rsp+0x10]
   56fb2:	mov    QWORD PTR [rsp+0x20],r8
   56fb7:	mov    r13,QWORD PTR [rsp+0x8]
   56fbc:	lea    rax,[rbx+0x1]
   56fc0:	mov    rdx,r14
   56fc3:	mov    QWORD PTR [rsi+0x30],rax
   56fc7:	or     rdx,0x800000
   56fce:	mov    rsi,rdi
   56fd1:	mov    rdi,r13
   56fd4:	call   567b0 <peek_token>
   56fd9:	xor    r9d,r9d
   56fdc:	mov    rdx,r13
   56fdf:	cdqe   
   56fe1:	add    QWORD PTR [r15+0x48],rax
   56fe5:	cmp    BYTE PTR [r13+0x8],0x9
   56fea:	je     57baa <parse_expression+0xc5a>
   56ff0:	mov    r13,QWORD PTR [rsp+0x40]
   56ff5:	mov    r8,QWORD PTR [rsp+0x20]
   56ffa:	mov    rcx,r14
   56ffd:	mov    rsi,rbp
   57000:	mov    rdi,r15
   57003:	mov    r9,r13
   57006:	add    r8,0x1
   5700a:	call   58740 <parse_reg_exp>
   5700f:	mov    r11d,DWORD PTR [r13+0x0]
   57013:	mov    r9,rax
   57016:	test   r11d,r11d
   57019:	jne    57050 <parse_expression+0x100>
   5701b:	mov    rax,QWORD PTR [rsp+0x8]
   57020:	cmp    BYTE PTR [rax+0x8],0x9
   57024:	je     57baa <parse_expression+0xc5a>
   5702a:	test   r9,r9
   5702d:	je     57040 <parse_expression+0xf0>
   5702f:	xor    edx,edx
   57031:	lea    rsi,[rip+0xffffffffffff62e8]        # 4d320 <free_tree>
   57038:	mov    rdi,r9
   5703b:	call   4c3a0 <postorder>
   57040:	mov    rax,QWORD PTR [rsp+0x40]
   57045:	mov    DWORD PTR [rax],0x8
   5704b:	nop    DWORD PTR [rax+rax*1+0x0]
   57050:	mov    QWORD PTR [rsp+0x28],0x0
   57059:	nop    DWORD PTR [rax+0x0]
   57060:	mov    rax,QWORD PTR [rsp+0x108]
   57068:	xor    rax,QWORD PTR fs:0x28
   57071:	jne    58578 <parse_expression+0x1628>
   57077:	mov    rax,QWORD PTR [rsp+0x28]
   5707c:	add    rsp,0x118
   57083:	pop    rbx
   57084:	pop    rbp
   57085:	pop    r12
   57087:	pop    r13
   57089:	pop    r14
   5708b:	pop    r15
   5708d:	ret    
   5708e:	test   QWORD PTR [rsp+0x10],0x1000000
   57097:	jne    575e3 <parse_expression+0x693>
   5709d:	mov    rax,QWORD PTR [rsp+0x10]
   570a2:	test   al,0x20
   570a4:	jne    575e3 <parse_expression+0x693>
   570aa:	test   al,0x10
   570ac:	jne    57dda <parse_expression+0xe8a>
   570b2:	cmp    cl,0x9
   570b5:	je     57b82 <parse_expression+0xc32>
   570bb:	mov    r8,QWORD PTR [rsp+0x8]
   570c0:	mov    rax,QWORD PTR [rsp+0x18]
   570c5:	xor    ecx,ecx
   570c7:	xor    edx,edx
   570c9:	mov    BYTE PTR [r8+0x8],0x1
   570ce:	lea    rsi,[rax+0x80]
   570d5:	lea    rdi,[rax+0x70]
   570d9:	call   4e750 <create_token_tree.isra.0>
   570de:	mov    QWORD PTR [rsp+0x28],rax
   570e3:	test   rax,rax
   570e6:	je     57818 <parse_expression+0x8c8>
   570ec:	mov    rbx,QWORD PTR [rsp+0x8]
   570f1:	mov    rdx,QWORD PTR [rsp+0x10]
   570f6:	mov    rsi,r15
   570f9:	mov    rdi,rbx
   570fc:	call   567b0 <peek_token>
   57101:	movsxd r12,eax
   57104:	movzx  eax,BYTE PTR [rbx+0x8]
   57108:	add    r12,QWORD PTR [r15+0x48]
   5710c:	mov    QWORD PTR [r15+0x48],r12
   57110:	cmp    al,0x17
   57112:	ja     57060 <parse_expression+0x110>
   57118:	cmp    al,0x12
   5711a:	mov    edx,0x8c0800
   5711f:	sete   bpl
   57123:	bt     rdx,rax
   57127:	jae    57060 <parse_expression+0x110>
   5712d:	mov    rcx,QWORD PTR [rsp+0x8]
   57132:	mov    QWORD PTR [rsp+0x20],r15
   57137:	movdqa xmm0,XMMWORD PTR [rcx]
   5713b:	cmp    al,0x17
   5713d:	je     57338 <parse_expression+0x3e8>
   57143:	nop    DWORD PTR [rax+rax*1+0x0]
   57148:	mov    r14,QWORD PTR [rsp+0x20]
   5714d:	mov    rdx,QWORD PTR [rsp+0x10]
   57152:	xor    ebx,ebx
   57154:	cmp    al,0x13
   57156:	mov    rdi,QWORD PTR [rsp+0x8]
   5715b:	sete   bl
   5715e:	mov    rsi,r14
   57161:	lea    rbx,[rbx+rbx*1-0x1]
   57166:	call   567b0 <peek_token>
   5716b:	cdqe   
   5716d:	add    QWORD PTR [r14+0x48],rax
   57171:	cmp    QWORD PTR [rsp+0x28],0x0
   57177:	je     57450 <parse_expression+0x500>
   5717d:	mov    r15,QWORD PTR [rsp+0x28]
   57182:	test   bpl,bpl
   57185:	jne    57bfd <parse_expression+0xcad>
   5718b:	mov    QWORD PTR [rsp+0x48],0x0
   57194:	xor    ebp,ebp
   57196:	cmp    BYTE PTR [r15+0x30],0x11
   5719b:	je     57438 <parse_expression+0x4e8>
   571a1:	cmp    rbx,0xffffffffffffffff
   571a5:	pxor   xmm0,xmm0
   571a9:	lea    r12,[rsp+0xb0]
   571b1:	mov    rdx,r15
   571b4:	sete   al
   571b7:	movaps XMMWORD PTR [rsp+0xb0],xmm0
   571bf:	mov    r8,r12
   571c2:	xor    ecx,ecx
   571c4:	add    eax,0xa
   571c7:	mov    BYTE PTR [rsp+0xb8],al
   571ce:	mov    rax,QWORD PTR [rsp+0x18]
   571d3:	lea    r13,[rax+0x70]
   571d7:	lea    r14,[rax+0x80]
   571de:	mov    rsi,r14
   571e1:	mov    rdi,r13
   571e4:	call   4e750 <create_token_tree.isra.0>
   571e9:	mov    rdx,rax
   571ec:	test   rax,rax
   571ef:	je     57408 <parse_expression+0x4b8>
   571f5:	add    rbp,0x2
   571f9:	cmp    rbp,rbx
   571fc:	jg     57293 <parse_expression+0x343>
   57202:	mov    rsi,QWORD PTR [rsp+0x18]
   57207:	mov    rdi,r15
   5720a:	mov    QWORD PTR [rsp+0x30],rdx
   5720f:	call   4e830 <duplicate_tree>
   57214:	mov    rdx,QWORD PTR [rsp+0x30]
   57219:	mov    r8,r12
   5721c:	mov    rsi,r14
   5721f:	pxor   xmm0,xmm0
   57223:	mov    rcx,rax
   57226:	mov    rdi,r13
   57229:	mov    r15,rax
   5722c:	movaps XMMWORD PTR [rsp+0xb0],xmm0
   57234:	mov    BYTE PTR [rsp+0xb8],0x10
   5723c:	call   4e750 <create_token_tree.isra.0>
   57241:	mov    rdx,rax
   57244:	test   r15,r15
   57247:	je     57408 <parse_expression+0x4b8>
   5724d:	test   rax,rax
   57250:	je     57408 <parse_expression+0x4b8>
   57256:	pxor   xmm0,xmm0
   5725a:	mov    r8,r12
   5725d:	xor    ecx,ecx
   5725f:	mov    rsi,r14
   57262:	mov    rdi,r13
   57265:	movaps XMMWORD PTR [rsp+0xb0],xmm0
   5726d:	mov    BYTE PTR [rsp+0xb8],0xa
   57275:	call   4e750 <create_token_tree.isra.0>
   5727a:	mov    rdx,rax
   5727d:	test   rax,rax
   57280:	je     57408 <parse_expression+0x4b8>
   57286:	add    rbp,0x1
   5728a:	cmp    rbp,rbx
   5728d:	jle    57202 <parse_expression+0x2b2>
   57293:	mov    rax,QWORD PTR [rsp+0x48]
   57298:	test   rax,rax
   5729b:	je     575b8 <parse_expression+0x668>
   572a1:	pxor   xmm0,xmm0
   572a5:	mov    rcx,rdx
   572a8:	mov    r8,r12
   572ab:	mov    rdx,rax
   572ae:	mov    rsi,r14
   572b1:	mov    rdi,r13
   572b4:	movaps XMMWORD PTR [rsp+0xb0],xmm0
   572bc:	mov    BYTE PTR [rsp+0xb8],0x10
   572c4:	call   4e750 <create_token_tree.isra.0>
   572c9:	mov    rbx,QWORD PTR [rsp+0x40]
   572ce:	mov    edx,DWORD PTR [rbx]
   572d0:	test   edx,edx
   572d2:	jne    573b9 <parse_expression+0x469>
   572d8:	mov    QWORD PTR [rsp+0x28],rax
   572dd:	mov    rax,QWORD PTR [rsp+0x8]
   572e2:	movzx  eax,BYTE PTR [rax+0x8]
   572e6:	test   QWORD PTR [rsp+0x10],0x1000000
   572ef:	je     57301 <parse_expression+0x3b1>
   572f1:	cmp    al,0xb
   572f3:	je     575c8 <parse_expression+0x678>
   572f9:	cmp    al,0x17
   572fb:	je     575c8 <parse_expression+0x678>
   57301:	cmp    al,0x17
   57303:	ja     57060 <parse_expression+0x110>
   57309:	cmp    al,0x12
   5730b:	mov    edx,0x8c0800
   57310:	sete   bpl
   57314:	bt     rdx,rax
   57318:	jae    57060 <parse_expression+0x110>
   5731e:	mov    rsi,QWORD PTR [rsp+0x20]
   57323:	mov    rcx,QWORD PTR [rsp+0x8]
   57328:	mov    r12,QWORD PTR [rsi+0x48]
   5732c:	movdqa xmm0,XMMWORD PTR [rcx]
   57330:	cmp    al,0x17
   57332:	jne    57148 <parse_expression+0x1f8>
   57338:	mov    rdx,QWORD PTR [rsp+0x10]
   5733d:	mov    rdi,QWORD PTR [rsp+0x20]
   57342:	mov    rsi,rcx
   57345:	movaps XMMWORD PTR [rsp+0x30],xmm0
   5734a:	call   56e90 <fetch_number>
   5734f:	movdqa xmm0,XMMWORD PTR [rsp+0x30]
   57355:	cmp    rax,0xffffffffffffffff
   57359:	mov    rbx,rax
   5735c:	je     57470 <parse_expression+0x520>
   57362:	cmp    rax,0xfffffffffffffffe
   57366:	je     57381 <parse_expression+0x431>
   57368:	mov    rax,QWORD PTR [rsp+0x8]
   5736d:	movzx  eax,BYTE PTR [rax+0x8]
   57371:	cmp    al,0x18
   57373:	je     57550 <parse_expression+0x600>
   57379:	cmp    al,0x1
   5737b:	je     57571 <parse_expression+0x621>
   57381:	test   QWORD PTR [rsp+0x10],0x200000
   5738a:	je     58063 <parse_expression+0x1113>
   57390:	mov    rax,QWORD PTR [rsp+0x20]
   57395:	mov    rbx,QWORD PTR [rsp+0x40]
   5739a:	mov    QWORD PTR [rax+0x48],r12
   5739e:	mov    rax,QWORD PTR [rsp+0x8]
   573a3:	movaps XMMWORD PTR [rax],xmm0
   573a6:	mov    BYTE PTR [rax+0x8],0x1
   573aa:	mov    edx,DWORD PTR [rbx]
   573ac:	mov    rax,QWORD PTR [rsp+0x28]
   573b1:	test   edx,edx
   573b3:	je     572d8 <parse_expression+0x388>
   573b9:	test   rax,rax
   573bc:	jne    572d8 <parse_expression+0x388>
   573c2:	jmp    5759b <parse_expression+0x64b>
   573c7:	nop    WORD PTR [rax+rax*1+0x0]
   573d0:	mov    QWORD PTR [rsp+0x48],rax
   573d5:	mov    r15,rbp
   573d8:	mov    rbx,QWORD PTR [rsp+0x50]
   573dd:	mov    rbp,QWORD PTR [rsp+0x30]
   573e2:	cmp    rbp,rbx
   573e5:	je     575b0 <parse_expression+0x660>
   573eb:	mov    rsi,QWORD PTR [rsp+0x18]
   573f0:	mov    rdi,r15
   573f3:	call   4e830 <duplicate_tree>
   573f8:	mov    r15,rax
   573fb:	test   rax,rax
   573fe:	jne    57196 <parse_expression+0x246>
   57404:	nop    DWORD PTR [rax+0x0]
   57408:	mov    rax,QWORD PTR [rsp+0x40]
   5740d:	mov    DWORD PTR [rax],0xc
   57413:	mov    rdi,QWORD PTR [rsp+0x28]
   57418:	xor    edx,edx
   5741a:	lea    rsi,[rip+0xffffffffffff5eff]        # 4d320 <free_tree>
   57421:	call   4c3a0 <postorder>
   57426:	mov    QWORD PTR [rsp+0x28],0x0
   5742f:	jmp    57060 <parse_expression+0x110>
   57434:	nop    DWORD PTR [rax+0x0]
   57438:	mov    rdx,QWORD PTR [r15+0x28]
   5743c:	lea    rsi,[rip+0xffffffffffff4cad]        # 4c0f0 <mark_opt_subexp>
   57443:	mov    rdi,r15
   57446:	call   4c3a0 <postorder>
   5744b:	jmp    571a1 <parse_expression+0x251>
   57450:	mov    rax,QWORD PTR [rsp+0x40]
   57455:	mov    ecx,DWORD PTR [rax]
   57457:	test   ecx,ecx
   57459:	jne    57050 <parse_expression+0x100>
   5745f:	mov    QWORD PTR [rsp+0x28],0x0
   57468:	jmp    572dd <parse_expression+0x38d>
   5746d:	nop    DWORD PTR [rax]
   57470:	mov    rax,QWORD PTR [rsp+0x8]
   57475:	cmp    BYTE PTR [rax+0x8],0x1
   57479:	jne    57590 <parse_expression+0x640>
   5747f:	mov    rax,QWORD PTR [rsp+0x8]
   57484:	cmp    BYTE PTR [rax],0x2c
   57487:	jne    57590 <parse_expression+0x640>
   5748d:	xor    ebp,ebp
   5748f:	mov    rdx,QWORD PTR [rsp+0x10]
   57494:	mov    rsi,QWORD PTR [rsp+0x8]
   57499:	movaps XMMWORD PTR [rsp+0x30],xmm0
   5749e:	mov    rdi,QWORD PTR [rsp+0x20]
   574a3:	call   56e90 <fetch_number>
   574a8:	movdqa xmm0,XMMWORD PTR [rsp+0x30]
   574ae:	cmp    rax,0xfffffffffffffffe
   574b2:	mov    rbx,rax
   574b5:	je     57381 <parse_expression+0x431>
   574bb:	cmp    rax,0xffffffffffffffff
   574bf:	je     574ca <parse_expression+0x57a>
   574c1:	cmp    rbp,rax
   574c4:	jg     57590 <parse_expression+0x640>
   574ca:	mov    rax,QWORD PTR [rsp+0x8]
   574cf:	cmp    BYTE PTR [rax+0x8],0x18
   574d3:	jne    57590 <parse_expression+0x640>
   574d9:	cmp    rbx,0xffffffffffffffff
   574dd:	jne    57553 <parse_expression+0x603>
   574df:	xor    eax,eax
   574e1:	cmp    rbp,0x7fff
   574e8:	setg   al
   574eb:	test   rax,rax
   574ee:	jne    57564 <parse_expression+0x614>
   574f0:	mov    r14,QWORD PTR [rsp+0x20]
   574f5:	mov    rdi,QWORD PTR [rsp+0x8]
   574fa:	mov    rdx,QWORD PTR [rsp+0x10]
   574ff:	mov    rsi,r14
   57502:	call   567b0 <peek_token>
   57507:	mov    rdi,QWORD PTR [rsp+0x28]
   5750c:	cdqe   
   5750e:	add    QWORD PTR [r14+0x48],rax
   57512:	test   rdi,rdi
   57515:	je     57450 <parse_expression+0x500>
   5751b:	mov    rax,rbx
   5751e:	or     rax,rbp
   57521:	jne    57600 <parse_expression+0x6b0>
   57527:	lea    rsi,[rip+0xffffffffffff5df2]        # 4d320 <free_tree>
   5752e:	xor    edx,edx
   57530:	call   4c3a0 <postorder>
   57535:	mov    rax,QWORD PTR [rsp+0x40]
   5753a:	mov    esi,DWORD PTR [rax]
   5753c:	test   esi,esi
   5753e:	je     5745f <parse_expression+0x50f>
   57544:	jmp    57413 <parse_expression+0x4c3>
   57549:	nop    DWORD PTR [rax+0x0]
   57550:	mov    rbp,rbx
   57553:	xor    eax,eax
   57555:	cmp    rbx,0x7fff
   5755c:	setg   al
   5755f:	test   rax,rax
   57562:	je     574f0 <parse_expression+0x5a0>
   57564:	mov    rax,QWORD PTR [rsp+0x40]
   57569:	mov    DWORD PTR [rax],0xf
   5756f:	jmp    5759b <parse_expression+0x64b>
   57571:	mov    rax,QWORD PTR [rsp+0x8]
   57576:	cmp    BYTE PTR [rax],0x2c
   57579:	je     5855d <parse_expression+0x160d>
   5757f:	test   QWORD PTR [rsp+0x10],0x200000
   57588:	jne    57390 <parse_expression+0x440>
   5758e:	xchg   ax,ax
   57590:	mov    rax,QWORD PTR [rsp+0x40]
   57595:	mov    DWORD PTR [rax],0xa
   5759b:	cmp    QWORD PTR [rsp+0x28],0x0
   575a1:	je     57050 <parse_expression+0x100>
   575a7:	jmp    57413 <parse_expression+0x4c3>
   575ac:	nop    DWORD PTR [rax+0x0]
   575b0:	mov    rdx,QWORD PTR [rsp+0x48]
   575b5:	nop    DWORD PTR [rax]
   575b8:	mov    QWORD PTR [rsp+0x28],rdx
   575bd:	jmp    572dd <parse_expression+0x38d>
   575c2:	nop    WORD PTR [rax+rax*1+0x0]
   575c8:	mov    rax,QWORD PTR [rsp+0x28]
   575cd:	test   rax,rax
   575d0:	je     575e3 <parse_expression+0x693>
   575d2:	xor    edx,edx
   575d4:	lea    rsi,[rip+0xffffffffffff5d45]        # 4d320 <free_tree>
   575db:	mov    rdi,rax
   575de:	call   4c3a0 <postorder>
   575e3:	mov    QWORD PTR [rsp+0x28],0x0
   575ec:	mov    rax,QWORD PTR [rsp+0x40]
   575f1:	mov    DWORD PTR [rax],0xd
   575f7:	jmp    57060 <parse_expression+0x110>
   575fc:	nop    DWORD PTR [rax+0x0]
   57600:	test   rbp,rbp
   57603:	jle    58565 <parse_expression+0x1615>
   57609:	cmp    rbp,0x1
   5760d:	je     5857d <parse_expression+0x162d>
   57613:	mov    rax,QWORD PTR [rsp+0x18]
   57618:	mov    r15,QWORD PTR [rsp+0x28]
   5761d:	mov    QWORD PTR [rsp+0x50],rbx
   57622:	lea    r12,[rsp+0xb0]
   5762a:	mov    QWORD PTR [rsp+0x30],rbp
   5762f:	mov    rbx,r12
   57632:	mov    r13d,0x2
   57638:	lea    rdi,[rax+0x70]
   5763c:	lea    r14,[rax+0x80]
   57643:	mov    rbp,r15
   57646:	mov    r12,rdi
   57649:	jmp    57668 <parse_expression+0x718>
   5764b:	nop    DWORD PTR [rax+rax*1+0x0]
   57650:	test   rax,rax
   57653:	je     57408 <parse_expression+0x4b8>
   57659:	add    r13,0x1
   5765d:	cmp    QWORD PTR [rsp+0x30],r13
   57662:	jl     573d0 <parse_expression+0x480>
   57668:	mov    rsi,QWORD PTR [rsp+0x18]
   5766d:	mov    rdi,rbp
   57670:	call   4e830 <duplicate_tree>
   57675:	pxor   xmm0,xmm0
   57679:	mov    rdx,r15
   5767c:	mov    r8,rbx
   5767f:	mov    rcx,rax
   57682:	mov    rsi,r14
   57685:	mov    rdi,r12
   57688:	mov    rbp,rax
   5768b:	movaps XMMWORD PTR [rsp+0xb0],xmm0
   57693:	mov    BYTE PTR [rsp+0xb8],0x10
   5769b:	call   4e750 <create_token_tree.isra.0>
   576a0:	mov    r15,rax
   576a3:	test   rbp,rbp
   576a6:	jne    57650 <parse_expression+0x700>
   576a8:	jmp    57408 <parse_expression+0x4b8>
   576ad:	cmp    cl,0x21
   576b0:	mov    rbx,QWORD PTR [rsp+0x40]
   576b5:	mov    rsi,QWORD PTR [rdi+0x78]
   576b9:	lea    rcx,[rip+0x18713]        # 6fdd3 <quoting_style_vals+0xf3>
   576c0:	sete   r8b
   576c4:	lea    rdx,[rip+0x186d7]        # 6fda2 <quoting_style_vals+0xc2>
   576cb:	mov    r9,rbx
   576ce:	movzx  r8d,r8b
   576d2:	mov    rdi,QWORD PTR [rsp+0x18]
   576d7:	call   51b40 <build_charclass_op>
   576dc:	mov    edi,DWORD PTR [rbx]
   576de:	mov    QWORD PTR [rsp+0x28],rax
   576e3:	test   edi,edi
   576e5:	je     570ec <parse_expression+0x19c>
   576eb:	test   rax,rax
   576ee:	jne    570ec <parse_expression+0x19c>
   576f4:	jmp    57050 <parse_expression+0x100>
   576f9:	nop    DWORD PTR [rax+0x0]
   57700:	cmp    cl,0x23
   57703:	mov    rbx,QWORD PTR [rsp+0x40]
   57708:	mov    rsi,QWORD PTR [rdi+0x78]
   5770c:	lea    rcx,[rip+0x16d04]        # 6e417 <urlchr_table+0x877>
   57713:	sete   r8b
   57717:	lea    rdx,[rip+0x18690]        # 6fdae <quoting_style_vals+0xce>
   5771e:	mov    r9,rbx
   57721:	movzx  r8d,r8b
   57725:	jmp    576d2 <parse_expression+0x782>
   57727:	mov    rax,QWORD PTR [rsp+0x18]
   5772c:	mov    r8,QWORD PTR [rsp+0x8]
   57731:	xor    ecx,ecx
   57733:	xor    edx,edx
   57735:	lea    rbx,[rax+0x70]
   57739:	lea    rbp,[rax+0x80]
   57740:	mov    rsi,rbp
   57743:	mov    rdi,rbx
   57746:	call   4e750 <create_token_tree.isra.0>
   5774b:	mov    QWORD PTR [rsp+0x28],rax
   57750:	test   rax,rax
   57753:	je     57818 <parse_expression+0x8c8>
   57759:	mov    rax,QWORD PTR [rsp+0x18]
   5775e:	lea    r12,[rsp+0xb0]
   57766:	cmp    DWORD PTR [rax+0xb4],0x1
   5776d:	jle    570ec <parse_expression+0x19c>
   57773:	mov    r14,QWORD PTR [rsp+0x28]
   57778:	mov    r13,QWORD PTR [rsp+0x8]
   5777d:	mov    QWORD PTR [rsp+0x20],r12
   57782:	jmp    57791 <parse_expression+0x841>
   57784:	nop    DWORD PTR [rax+0x0]
   57788:	test   rax,rax
   5778b:	je     57818 <parse_expression+0x8c8>
   57791:	mov    rax,QWORD PTR [r15+0x48]
   57795:	cmp    QWORD PTR [r15+0x68],rax
   57799:	jle    57e31 <parse_expression+0xee1>
   5779f:	cmp    rax,QWORD PTR [r15+0x30]
   577a3:	je     57e31 <parse_expression+0xee1>
   577a9:	mov    rdx,QWORD PTR [r15+0x10]
   577ad:	cmp    DWORD PTR [rdx+rax*4],0xffffffff
   577b1:	jne    57e31 <parse_expression+0xee1>
   577b7:	mov    rdx,QWORD PTR [rsp+0x10]
   577bc:	mov    rsi,r15
   577bf:	mov    rdi,r13
   577c2:	call   567b0 <peek_token>
   577c7:	mov    r8,r13
   577ca:	xor    ecx,ecx
   577cc:	xor    edx,edx
   577ce:	cdqe   
   577d0:	add    QWORD PTR [r15+0x48],rax
   577d4:	mov    rsi,rbp
   577d7:	mov    rdi,rbx
   577da:	call   4e750 <create_token_tree.isra.0>
   577df:	mov    r8,QWORD PTR [rsp+0x20]
   577e4:	mov    rdx,r14
   577e7:	mov    rsi,rbp
   577ea:	pxor   xmm0,xmm0
   577ee:	mov    rcx,rax
   577f1:	mov    rdi,rbx
   577f4:	mov    r12,rax
   577f7:	movaps XMMWORD PTR [rsp+0xb0],xmm0
   577ff:	mov    BYTE PTR [rsp+0xb8],0x10
   57807:	call   4e750 <create_token_tree.isra.0>
   5780c:	mov    r14,rax
   5780f:	test   r12,r12
   57812:	jne    57788 <parse_expression+0x838>
   57818:	mov    rax,QWORD PTR [rsp+0x40]
   5781d:	mov    DWORD PTR [rax],0xc
   57823:	jmp    57050 <parse_expression+0x100>
   57828:	mov    rbx,QWORD PTR [rsp+0x18]
   5782d:	mov    r8,QWORD PTR [rsp+0x8]
   57832:	xor    ecx,ecx
   57834:	xor    edx,edx
   57836:	lea    rsi,[rbx+0x80]
   5783d:	lea    rdi,[rbx+0x70]
   57841:	call   4e750 <create_token_tree.isra.0>
   57846:	mov    QWORD PTR [rsp+0x28],rax
   5784b:	test   rax,rax
   5784e:	je     57818 <parse_expression+0x8c8>
   57850:	cmp    DWORD PTR [rbx+0xb4],0x1
   57857:	jle    570ec <parse_expression+0x19c>
   5785d:	or     BYTE PTR [rbx+0xb0],0x2
   57864:	jmp    570ec <parse_expression+0x19c>
   57869:	mov    rax,QWORD PTR [rsp+0x8]
   5786e:	mov    rbx,QWORD PTR [rsp+0x18]
   57873:	mov    rcx,QWORD PTR [rax]
   57876:	mov    eax,0x1
   5787b:	shl    eax,cl
   5787d:	cdqe   
   5787f:	test   QWORD PTR [rbx+0xa8],rax
   57886:	je     580b2 <parse_expression+0x1162>
   5788c:	mov    rbx,QWORD PTR [rsp+0x18]
   57891:	mov    r8,QWORD PTR [rsp+0x8]
   57896:	xor    ecx,ecx
   57898:	xor    edx,edx
   5789a:	or     QWORD PTR [rbx+0xa0],rax
   578a1:	lea    rsi,[rbx+0x80]
   578a8:	lea    rdi,[rbx+0x70]
   578ac:	call   4e750 <create_token_tree.isra.0>
   578b1:	mov    QWORD PTR [rsp+0x28],rax
   578b6:	test   rax,rax
   578b9:	je     57818 <parse_expression+0x8c8>
   578bf:	add    QWORD PTR [rbx+0x98],0x1
   578c7:	or     BYTE PTR [rbx+0xb0],0x2
   578ce:	jmp    570ec <parse_expression+0x19c>
   578d3:	mov    esi,0x1
   578d8:	mov    edi,0x20
   578dd:	mov    QWORD PTR [rsp+0x88],0x0
   578e9:	call   c880 <calloc@plt>
   578ee:	mov    esi,0x1
   578f3:	mov    edi,0x50
   578f8:	mov    r12,rax
   578fb:	call   c880 <calloc@plt>
   57900:	test   r12,r12
   57903:	sete   dl
   57906:	test   rax,rax
   57909:	mov    r14,rax
   5790c:	sete   al
   5790f:	or     dl,al
   57911:	jne    5809d <parse_expression+0x114d>
   57917:	mov    rdi,QWORD PTR [rsp+0x8]
   5791c:	mov    rdx,QWORD PTR [rsp+0x10]
   57921:	mov    rsi,r15
   57924:	call   4bfc0 <peek_token_bracket>
   57929:	movsxd r13,eax
   5792c:	movzx  eax,BYTE PTR [rdi+0x8]
   57930:	cmp    al,0x2
   57932:	je     58053 <parse_expression+0x1103>
   57938:	mov    BYTE PTR [rsp+0x50],0x0
   5793d:	cmp    al,0x19
   5793f:	je     57d7e <parse_expression+0xe2e>
   57945:	cmp    al,0x15
   57947:	je     57d70 <parse_expression+0xe20>
   5794d:	lea    rax,[rsp+0xc0]
   57955:	lea    rbx,[rsp+0x90]
   5795d:	mov    QWORD PTR [rsp+0x48],0x0
   57966:	mov    rbp,QWORD PTR [rsp+0x8]
   5796b:	mov    QWORD PTR [rsp+0x28],rax
   57970:	mov    rax,QWORD PTR [rsp+0x10]
   57975:	mov    r9d,0x1
   5797b:	mov    QWORD PTR [rsp+0x30],0x0
   57984:	mov    rdi,rax
   57987:	mov    QWORD PTR [rsp+0x20],r14
   5798c:	mov    r14d,r13d
   5798f:	mov    r13,rbx
   57992:	shr    rdi,0x10
   57996:	mov    rbx,rax
   57999:	mov    QWORD PTR [rsp+0x58],rdi
   5799e:	mov    rax,QWORD PTR [rsp+0x28]
   579a3:	and    r9d,0x1
   579a7:	mov    r8,rbx
   579aa:	mov    ecx,r14d
   579ad:	mov    rdx,rbp
   579b0:	mov    rsi,r15
   579b3:	mov    rdi,r13
   579b6:	mov    DWORD PTR [rsp+0x90],0x3
   579c1:	mov    QWORD PTR [rsp+0x98],rax
   579c9:	call   56550 <parse_bracket_element.constprop.0>
   579ce:	test   eax,eax
   579d0:	jne    57e20 <parse_expression+0xed0>
   579d6:	mov    rdx,rbx
   579d9:	mov    rsi,r15
   579dc:	mov    rdi,rbp
   579df:	call   4bfc0 <peek_token_bracket>
   579e4:	mov    r14d,eax
   579e7:	mov    eax,DWORD PTR [rsp+0x90]
   579ee:	lea    edx,[rax-0x2]
   579f1:	and    edx,0xfffffffd
   579f4:	je     57a0c <parse_expression+0xabc>
   579f6:	movzx  edx,BYTE PTR [rbp+0x8]
   579fa:	cmp    dl,0x2
   579fd:	je     57dc5 <parse_expression+0xe75>
   57a03:	cmp    dl,0x16
   57a06:	je     57e63 <parse_expression+0xf13>
   57a0c:	lea    rdi,[rip+0x18721]        # 70134 <quoting_style_vals+0x454>
   57a13:	movsxd rax,DWORD PTR [rdi+rax*4]
   57a17:	add    rax,rdi
   57a1a:	notrack jmp rax
   57a1d:	mov    QWORD PTR [rsp+0x28],0x0
   57a26:	mov    rax,QWORD PTR [rsp+0x40]
   57a2b:	mov    DWORD PTR [rax],0x5
   57a31:	jmp    57060 <parse_expression+0x110>
   57a36:	mov    rax,QWORD PTR [rsp+0x8]
   57a3b:	mov    ebp,DWORD PTR [rax]
   57a3d:	test   ebp,0x30f
   57a43:	je     57aa7 <parse_expression+0xb57>
   57a45:	mov    rax,QWORD PTR [rsp+0x18]
   57a4a:	movzx  eax,BYTE PTR [rax+0xb0]
   57a51:	test   al,0x10
   57a53:	jne    57aa7 <parse_expression+0xb57>
   57a55:	mov    rbx,QWORD PTR [rsp+0x18]
   57a5a:	or     eax,0x10
   57a5d:	mov    BYTE PTR [rbx+0xb0],al
   57a63:	test   al,0x8
   57a65:	jne    582d6 <parse_expression+0x1386>
   57a6b:	movabs rdi,0x3ff000000000000
   57a75:	mov    QWORD PTR [rbx+0xb8],rdi
   57a7c:	movabs rdi,0x7fffffe87fffffe
   57a86:	mov    QWORD PTR [rbx+0xc0],rdi
   57a8d:	test   al,0x4
   57a8f:	je     58254 <parse_expression+0x1304>
   57a95:	mov    rax,QWORD PTR [rsp+0x8]
   57a9a:	pxor   xmm0,xmm0
   57a9e:	movups XMMWORD PTR [rbx+0xc8],xmm0
   57aa5:	mov    ebp,DWORD PTR [rax]
   57aa7:	mov    rax,QWORD PTR [rsp+0x18]
   57aac:	lea    r12,[rax+0x70]
   57ab0:	lea    r13,[rax+0x80]
   57ab7:	lea    eax,[rbp-0x100]
   57abd:	test   eax,0xfffffeff
   57ac2:	jne    57d49 <parse_expression+0xdf9>
   57ac8:	mov    r14,QWORD PTR [rsp+0x8]
   57acd:	cmp    ebp,0x100
   57ad3:	je     57e3b <parse_expression+0xeeb>
   57ad9:	mov    DWORD PTR [r14],0x5
   57ae0:	mov    r8,r14
   57ae3:	xor    ecx,ecx
   57ae5:	xor    edx,edx
   57ae7:	mov    rsi,r13
   57aea:	mov    rdi,r12
   57aed:	call   4e750 <create_token_tree.isra.0>
   57af2:	mov    DWORD PTR [r14],0xa
   57af9:	mov    rbx,rax
   57afc:	mov    r8,QWORD PTR [rsp+0x8]
   57b01:	xor    ecx,ecx
   57b03:	xor    edx,edx
   57b05:	mov    rsi,r13
   57b08:	mov    rdi,r12
   57b0b:	call   4e750 <create_token_tree.isra.0>
   57b10:	pxor   xmm0,xmm0
   57b14:	mov    rdx,rbx
   57b17:	mov    rdi,r12
   57b1a:	lea    r8,[rsp+0xb0]
   57b22:	mov    rcx,rax
   57b25:	mov    rsi,r13
   57b28:	mov    rbp,rax
   57b2b:	movaps XMMWORD PTR [rsp+0xb0],xmm0
   57b33:	mov    BYTE PTR [rsp+0xb8],0xa
   57b3b:	call   4e750 <create_token_tree.isra.0>
   57b40:	test   rbx,rbx
   57b43:	sete   dl
   57b46:	test   rbp,rbp
   57b49:	mov    QWORD PTR [rsp+0x28],rax
   57b4e:	mov    rdi,rax
   57b51:	sete   al
   57b54:	or     dl,al
   57b56:	jne    57818 <parse_expression+0x8c8>
   57b5c:	test   rdi,rdi
   57b5f:	je     57818 <parse_expression+0x8c8>
   57b65:	mov    rdx,QWORD PTR [rsp+0x10]
   57b6a:	mov    rdi,QWORD PTR [rsp+0x8]
   57b6f:	mov    rsi,r15
   57b72:	call   567b0 <peek_token>
   57b77:	cdqe   
   57b79:	add    QWORD PTR [r15+0x48],rax
   57b7d:	jmp    57060 <parse_expression+0x110>
   57b82:	test   QWORD PTR [rsp+0x10],0x20000
   57b8b:	jne    570bb <parse_expression+0x16b>
   57b91:	mov    QWORD PTR [rsp+0x28],0x0
   57b9a:	mov    rax,QWORD PTR [rsp+0x40]
   57b9f:	mov    DWORD PTR [rax],0x10
   57ba5:	jmp    57060 <parse_expression+0x110>
   57baa:	cmp    rbx,0x8
   57bae:	jbe    57c0c <parse_expression+0xcbc>
   57bb0:	mov    rax,QWORD PTR [rsp+0x18]
   57bb5:	pxor   xmm0,xmm0
   57bb9:	xor    ecx,ecx
   57bbb:	mov    rdx,r9
   57bbe:	lea    r8,[rsp+0xb0]
   57bc6:	movaps XMMWORD PTR [rsp+0xb0],xmm0
   57bce:	lea    rsi,[rax+0x80]
   57bd5:	lea    rdi,[rax+0x70]
   57bd9:	mov    BYTE PTR [rsp+0xb8],0x11
   57be1:	call   4e750 <create_token_tree.isra.0>
   57be6:	mov    QWORD PTR [rsp+0x28],rax
   57beb:	test   rax,rax
   57bee:	je     57818 <parse_expression+0x8c8>
   57bf4:	mov    QWORD PTR [rax+0x28],rbx
   57bf8:	jmp    570ec <parse_expression+0x19c>
   57bfd:	mov    QWORD PTR [rsp+0x48],r15
   57c02:	mov    ebp,0x1
   57c07:	jmp    573e2 <parse_expression+0x492>
   57c0c:	mov    rdi,QWORD PTR [rsp+0x18]
   57c11:	mov    eax,0x1
   57c16:	mov    ecx,ebx
   57c18:	shl    eax,cl
   57c1a:	cdqe   
   57c1c:	or     QWORD PTR [rdi+0xa8],rax
   57c23:	jmp    57bb0 <parse_expression+0xc60>
   57c25:	mov    rdi,QWORD PTR [rsp+0x20]
   57c2a:	mov    rax,QWORD PTR [rdi+0x28]
   57c2e:	mov    rdi,QWORD PTR [rdi]
   57c31:	cmp    rax,QWORD PTR [rsp+0x30]
   57c36:	je     5821b <parse_expression+0x12cb>
   57c3c:	mov    rcx,QWORD PTR [rsp+0x20]
   57c41:	lea    rdx,[rax+0x1]
   57c45:	mov    QWORD PTR [rcx+0x28],rdx
   57c49:	mov    edx,DWORD PTR [rsp+0x98]
   57c50:	mov    DWORD PTR [rdi+rax*4],edx
   57c53:	movzx  eax,BYTE PTR [rbp+0x8]
   57c57:	cmp    al,0x2
   57c59:	je     57dc5 <parse_expression+0xe75>
   57c5f:	cmp    al,0x15
   57c61:	je     580cb <parse_expression+0x117b>
   57c67:	xor    r9d,r9d
   57c6a:	jmp    5799e <parse_expression+0xa4e>
   57c6f:	movzx  ecx,BYTE PTR [rsp+0x98]
   57c77:	mov    edx,0x1
   57c7c:	mov    rax,rcx
   57c7f:	shl    rdx,cl
   57c82:	shr    rax,0x3
   57c86:	and    eax,0x18
   57c89:	or     QWORD PTR [r12+rax*1],rdx
   57c8d:	jmp    57c53 <parse_expression+0xd03>
   57c8f:	mov    rax,QWORD PTR [rsp+0x20]
   57c94:	sub    rsp,0x8
   57c98:	mov    rdi,QWORD PTR [r15+0x78]
   57c9c:	mov    rsi,r12
   57c9f:	push   rbx
   57ca0:	mov    r9,QWORD PTR [rsp+0xa8]
   57ca8:	lea    rcx,[rax+0x48]
   57cac:	lea    rdx,[rax+0x18]
   57cb0:	lea    r8,[rsp+0x98]
   57cb8:	call   51350 <build_charclass.isra.0>
   57cbd:	mov    rdi,QWORD PTR [rsp+0x50]
   57cc2:	mov    DWORD PTR [rdi],eax
   57cc4:	pop    r9
   57cc6:	pop    r10
   57cc8:	test   eax,eax
   57cca:	je     57c53 <parse_expression+0xd03>
   57ccc:	mov    r14,QWORD PTR [rsp+0x20]
   57cd1:	mov    rdi,r12
   57cd4:	call   4bdc0 <rpl_free>
   57cd9:	mov    rdi,r14
   57cdc:	call   4d2c0 <free_charset>
   57ce1:	mov    rax,QWORD PTR [rsp+0x40]
   57ce6:	mov    r8d,DWORD PTR [rax]
   57ce9:	test   r8d,r8d
   57cec:	jne    57050 <parse_expression+0x100>
   57cf2:	mov    QWORD PTR [rsp+0x28],0x0
   57cfb:	jmp    570ec <parse_expression+0x19c>
   57d00:	mov    rsi,QWORD PTR [rsp+0x98]
   57d08:	mov    rdi,r12
   57d0b:	call   51300 <build_collating_symbol.isra.0>
   57d10:	mov    rdi,QWORD PTR [rsp+0x40]
   57d15:	mov    DWORD PTR [rdi],eax
   57d17:	test   eax,eax
   57d19:	je     57c53 <parse_expression+0xd03>
   57d1f:	jmp    57ccc <parse_expression+0xd7c>
   57d21:	nop    DWORD PTR [rax+0x0]
   57d28:	mov    rsi,QWORD PTR [rsp+0x98]
   57d30:	mov    rdi,r12
   57d33:	call   51300 <build_collating_symbol.isra.0>
   57d38:	mov    rdi,QWORD PTR [rsp+0x40]
   57d3d:	mov    DWORD PTR [rdi],eax
   57d3f:	test   eax,eax
   57d41:	je     57c53 <parse_expression+0xd03>
   57d47:	jmp    57ccc <parse_expression+0xd7c>
   57d49:	mov    r8,QWORD PTR [rsp+0x8]
   57d4e:	xor    ecx,ecx
   57d50:	xor    edx,edx
   57d52:	mov    rsi,r13
   57d55:	mov    rdi,r12
   57d58:	call   4e750 <create_token_tree.isra.0>
   57d5d:	mov    QWORD PTR [rsp+0x28],rax
   57d62:	test   rax,rax
   57d65:	jne    57b65 <parse_expression+0xc15>
   57d6b:	jmp    57818 <parse_expression+0x8c8>
   57d70:	mov    rax,QWORD PTR [rsp+0x8]
   57d75:	mov    BYTE PTR [rax+0x8],0x1
   57d79:	jmp    5794d <parse_expression+0x9fd>
   57d7e:	or     BYTE PTR [r14+0x20],0x1
   57d83:	test   QWORD PTR [rsp+0x10],0x100
   57d8c:	je     57d96 <parse_expression+0xe46>
   57d8e:	or     QWORD PTR [r12],0x400
   57d96:	add    QWORD PTR [r15+0x48],r13
   57d9a:	mov    rdi,QWORD PTR [rsp+0x8]
   57d9f:	mov    rsi,r15
   57da2:	mov    rdx,QWORD PTR [rsp+0x10]
   57da7:	call   4bfc0 <peek_token_bracket>
   57dac:	mov    r13d,eax
   57daf:	movzx  eax,BYTE PTR [rdi+0x8]
   57db3:	cmp    al,0x2
   57db5:	je     58053 <parse_expression+0x1103>
   57dbb:	mov    BYTE PTR [rsp+0x50],0x1
   57dc0:	jmp    57945 <parse_expression+0x9f5>
   57dc5:	mov    rax,QWORD PTR [rsp+0x40]
   57dca:	mov    r14,QWORD PTR [rsp+0x20]
   57dcf:	mov    DWORD PTR [rax],0x7
   57dd5:	jmp    57cd1 <parse_expression+0xd81>
   57dda:	mov    rbx,QWORD PTR [rsp+0x8]
   57ddf:	mov    rdx,rax
   57de2:	mov    rsi,r15
   57de5:	mov    QWORD PTR [rsp+0x18],r8
   57dea:	mov    r14,rax
   57ded:	mov    rdi,rbx
   57df0:	call   567b0 <peek_token>
   57df5:	mov    r9,QWORD PTR [rsp+0x40]
   57dfa:	mov    rcx,r14
   57dfd:	mov    rdx,rbx
   57e00:	cdqe   
   57e02:	add    QWORD PTR [r15+0x48],rax
   57e06:	mov    r8,QWORD PTR [rsp+0x18]
   57e0b:	mov    rsi,rbp
   57e0e:	mov    rdi,r15
   57e11:	call   56f50 <parse_expression>
   57e16:	mov    QWORD PTR [rsp+0x28],rax
   57e1b:	jmp    57060 <parse_expression+0x110>
   57e20:	mov    rbx,QWORD PTR [rsp+0x40]
   57e25:	mov    r14,QWORD PTR [rsp+0x20]
   57e2a:	mov    DWORD PTR [rbx],eax
   57e2c:	jmp    57cd1 <parse_expression+0xd81>
   57e31:	mov    QWORD PTR [rsp+0x28],r14
   57e36:	jmp    570ec <parse_expression+0x19c>
   57e3b:	mov    DWORD PTR [r14],0x6
   57e42:	mov    r8,r14
   57e45:	xor    ecx,ecx
   57e47:	xor    edx,edx
   57e49:	mov    rsi,r13
   57e4c:	mov    rdi,r12
   57e4f:	call   4e750 <create_token_tree.isra.0>
   57e54:	mov    DWORD PTR [r14],0x9
   57e5b:	mov    rbx,rax
   57e5e:	jmp    57afc <parse_expression+0xbac>
   57e63:	movsxd rax,r14d
   57e66:	add    QWORD PTR [r15+0x48],rax
   57e6a:	lea    r10,[rsp+0xb0]
   57e72:	mov    rdx,rbx
   57e75:	mov    rdi,r10
   57e78:	call   4bfc0 <peek_token_bracket>
   57e7d:	mov    ecx,eax
   57e7f:	movzx  eax,BYTE PTR [rsp+0xb8]
   57e87:	cmp    al,0x2
   57e89:	je     57dc5 <parse_expression+0xe75>
   57e8f:	cmp    al,0x15
   57e91:	je     58082 <parse_expression+0x1132>
   57e97:	lea    rax,[rsp+0xe0]
   57e9f:	mov    r9d,0x1
   57ea5:	mov    r8,rbx
   57ea8:	mov    rdx,r10
   57eab:	lea    rdi,[rsp+0xa0]
   57eb3:	mov    QWORD PTR [rsp+0xa8],rax
   57ebb:	mov    DWORD PTR [rsp+0xa0],0x3
   57ec6:	call   56550 <parse_bracket_element.constprop.0>
   57ecb:	test   eax,eax
   57ecd:	jne    57e20 <parse_expression+0xed0>
   57ed3:	mov    rdx,rbx
   57ed6:	mov    rsi,r15
   57ed9:	mov    rdi,rbp
   57edc:	call   4bfc0 <peek_token_bracket>
   57ee1:	mov    r10d,DWORD PTR [rsp+0x90]
   57ee9:	mov    edx,0x0
   57eee:	mov    r14d,eax
   57ef1:	mov    rax,QWORD PTR [rsp+0x18]
   57ef6:	cmp    DWORD PTR [rax+0xb4],0x2
   57efd:	lea    eax,[r10-0x2]
   57f01:	cmovge rdx,QWORD PTR [rsp+0x20]
   57f07:	and    eax,0xfffffffd
   57f0a:	je     5836e <parse_expression+0x141e>
   57f10:	mov    esi,DWORD PTR [rsp+0xa0]
   57f17:	lea    eax,[rsi-0x2]
   57f1a:	and    eax,0xfffffffd
   57f1d:	je     5836e <parse_expression+0x141e>
   57f23:	cmp    r10d,0x3
   57f27:	sete   r11b
   57f2b:	je     584f8 <parse_expression+0x15a8>
   57f31:	cmp    esi,0x3
   57f34:	je     584bd <parse_expression+0x156d>
   57f3a:	test   r10d,r10d
   57f3d:	jne    583b8 <parse_expression+0x1468>
   57f43:	movzx  r8d,BYTE PTR [rsp+0x98]
   57f4c:	test   r10d,r10d
   57f4f:	sete   al
   57f52:	or     eax,r11d
   57f55:	test   esi,esi
   57f57:	je     583d3 <parse_expression+0x1483>
   57f5d:	cmp    esi,0x3
   57f60:	jne    583c2 <parse_expression+0x1472>
   57f66:	mov    r9,QWORD PTR [rsp+0xa8]
   57f6e:	movzx  r9d,BYTE PTR [r9]
   57f72:	test   al,al
   57f74:	je     58383 <parse_expression+0x1433>
   57f7a:	test   rdx,rdx
   57f7d:	je     5834d <parse_expression+0x13fd>
   57f83:	mov    edi,r8d
   57f86:	mov    QWORD PTR [rsp+0x68],rdx
   57f8b:	mov    DWORD PTR [rsp+0x60],r9d
   57f90:	call   c960 <btowc@plt>
   57f95:	mov    r9d,DWORD PTR [rsp+0x60]
   57f9a:	mov    rdx,QWORD PTR [rsp+0x68]
   57f9f:	mov    r8d,eax
   57fa2:	mov    eax,DWORD PTR [rsp+0xa0]
   57fa9:	test   eax,eax
   57fab:	je     58394 <parse_expression+0x1444>
   57fb1:	cmp    eax,0x3
   57fb4:	je     58394 <parse_expression+0x1444>
   57fba:	mov    r9d,DWORD PTR [rsp+0xa8]
   57fc2:	cmp    r8d,0xffffffff
   57fc6:	je     58406 <parse_expression+0x14b6>
   57fcc:	cmp    r9d,0xffffffff
   57fd0:	je     58406 <parse_expression+0x14b6>
   57fd6:	test   BYTE PTR [rsp+0x58],0x1
   57fdb:	je     57fe6 <parse_expression+0x1096>
   57fdd:	cmp    r9d,r8d
   57fe0:	jb     5836e <parse_expression+0x141e>
   57fe6:	test   rdx,rdx
   57fe9:	je     58012 <parse_expression+0x10c2>
   57feb:	mov    rax,QWORD PTR [rdx+0x40]
   57fef:	mov    r11,QWORD PTR [rdx+0x8]
   57ff3:	cmp    rax,QWORD PTR [rsp+0x48]
   57ff8:	je     58436 <parse_expression+0x14e6>
   57ffe:	mov    rcx,QWORD PTR [rdx+0x10]
   58002:	lea    rsi,[rax+0x1]
   58006:	mov    DWORD PTR [r11+rax*4],r8d
   5800a:	mov    QWORD PTR [rdx+0x40],rsi
   5800e:	mov    DWORD PTR [rcx+rax*4],r9d
   58012:	xor    eax,eax
   58014:	nop    DWORD PTR [rax+0x0]
   58018:	mov    ecx,eax
   5801a:	cmp    r8d,eax
   5801d:	ja     58037 <parse_expression+0x10e7>
   5801f:	cmp    r9d,eax
   58022:	jb     58037 <parse_expression+0x10e7>
   58024:	mov    rdx,rax
   58027:	mov    edi,0x1
   5802c:	sar    rdx,0x6
   58030:	shl    rdi,cl
   58033:	or     QWORD PTR [r12+rdx*8],rdi
   58037:	add    rax,0x1
   5803b:	cmp    rax,0x100
   58041:	jne    58018 <parse_expression+0x10c8>
   58043:	mov    rax,QWORD PTR [rsp+0x40]
   58048:	mov    DWORD PTR [rax],0x0
   5804e:	jmp    57c53 <parse_expression+0xd03>
   58053:	mov    rax,QWORD PTR [rsp+0x40]
   58058:	mov    DWORD PTR [rax],0x2
   5805e:	jmp    57cd1 <parse_expression+0xd81>
   58063:	mov    rax,QWORD PTR [rsp+0x8]
   58068:	cmp    BYTE PTR [rax+0x8],0x2
   5806c:	jne    57590 <parse_expression+0x640>
   58072:	mov    rax,QWORD PTR [rsp+0x40]
   58077:	mov    DWORD PTR [rax],0x9
   5807d:	jmp    5759b <parse_expression+0x64b>
   58082:	mov    eax,r14d
   58085:	neg    eax
   58087:	cdqe   
   58089:	add    QWORD PTR [r15+0x48],rax
   5808d:	mov    eax,DWORD PTR [rsp+0x90]
   58094:	mov    BYTE PTR [rbp+0x8],0x1
   58098:	jmp    57a0c <parse_expression+0xabc>
   5809d:	mov    rdi,r12
   580a0:	call   4bdc0 <rpl_free>
   580a5:	mov    rdi,r14
   580a8:	call   4bdc0 <rpl_free>
   580ad:	jmp    57818 <parse_expression+0x8c8>
   580b2:	mov    QWORD PTR [rsp+0x28],0x0
   580bb:	mov    rax,QWORD PTR [rsp+0x40]
   580c0:	mov    DWORD PTR [rax],0x6
   580c6:	jmp    57060 <parse_expression+0x110>
   580cb:	movsxd r13,r14d
   580ce:	add    QWORD PTR [r15+0x48],r13
   580d2:	cmp    BYTE PTR [rsp+0x50],0x0
   580d7:	mov    r14,QWORD PTR [rsp+0x20]
   580dc:	je     580f2 <parse_expression+0x11a2>
   580de:	mov    rax,r12
   580e1:	lea    rdx,[r12+0x20]
   580e6:	not    QWORD PTR [rax]
   580e9:	add    rax,0x8
   580ed:	cmp    rdx,rax
   580f0:	jne    580e6 <parse_expression+0x1196>
   580f2:	mov    rax,QWORD PTR [rsp+0x18]
   580f7:	mov    edx,DWORD PTR [rax+0xb4]
   580fd:	cmp    edx,0x1
   58100:	jle    5811f <parse_expression+0x11cf>
   58102:	mov    rax,QWORD PTR [rsp+0x18]
   58107:	mov    rcx,QWORD PTR [rax+0x78]
   5810b:	xor    eax,eax
   5810d:	mov    rsi,QWORD PTR [rcx+rax*1]
   58111:	and    QWORD PTR [r12+rax*1],rsi
   58115:	add    rax,0x8
   58119:	cmp    rax,0x20
   5811d:	jne    5810d <parse_expression+0x11bd>
   5811f:	cmp    QWORD PTR [r14+0x28],0x0
   58124:	jne    581a5 <parse_expression+0x1255>
   58126:	cmp    QWORD PTR [r14+0x30],0x0
   5812b:	jne    581a5 <parse_expression+0x1255>
   5812d:	cmp    QWORD PTR [r14+0x38],0x0
   58132:	jne    581a5 <parse_expression+0x1255>
   58134:	cmp    QWORD PTR [r14+0x40],0x0
   58139:	jne    581a5 <parse_expression+0x1255>
   5813b:	sub    edx,0x1
   5813e:	jle    5814e <parse_expression+0x11fe>
   58140:	cmp    QWORD PTR [r14+0x48],0x0
   58145:	jne    581a5 <parse_expression+0x1255>
   58147:	test   BYTE PTR [r14+0x20],0x1
   5814c:	jne    581a5 <parse_expression+0x1255>
   5814e:	mov    rdi,r14
   58151:	call   4d2c0 <free_charset>
   58156:	mov    rax,QWORD PTR [rsp+0x18]
   5815b:	xor    ecx,ecx
   5815d:	xor    edx,edx
   5815f:	lea    r8,[rsp+0xa0]
   58167:	mov    BYTE PTR [rsp+0xa8],0x3
   5816f:	lea    rsi,[rax+0x80]
   58176:	lea    rdi,[rax+0x70]
   5817a:	mov    QWORD PTR [rsp+0xa0],r12
   58182:	call   4e750 <create_token_tree.isra.0>
   58187:	mov    QWORD PTR [rsp+0x28],rax
   5818c:	test   rax,rax
   5818f:	jne    570ec <parse_expression+0x19c>
   58195:	mov    rax,QWORD PTR [rsp+0x40]
   5819a:	mov    DWORD PTR [rax],0xc
   581a0:	jmp    57cd1 <parse_expression+0xd81>
   581a5:	mov    rax,QWORD PTR [rsp+0x18]
   581aa:	lea    rbx,[rsp+0xa0]
   581b2:	xor    edx,edx
   581b4:	xor    ecx,ecx
   581b6:	mov    r8,rbx
   581b9:	or     BYTE PTR [rax+0xb0],0x2
   581c0:	lea    rbp,[rax+0x70]
   581c4:	lea    r13,[rax+0x80]
   581cb:	mov    rdi,rbp
   581ce:	mov    rsi,r13
   581d1:	mov    BYTE PTR [rsp+0xa8],0x6
   581d9:	mov    QWORD PTR [rsp+0xa0],r14
   581e1:	call   4e750 <create_token_tree.isra.0>
   581e6:	lea    rdx,[r12+0x20]
   581eb:	mov    rdi,rax
   581ee:	mov    QWORD PTR [rsp+0x28],rax
   581f3:	mov    rax,r12
   581f6:	test   rdi,rdi
   581f9:	je     58195 <parse_expression+0x1245>
   581fb:	cmp    QWORD PTR [rax],0x0
   581ff:	jne    582e0 <parse_expression+0x1390>
   58205:	add    rax,0x8
   58209:	cmp    rdx,rax
   5820c:	jne    581fb <parse_expression+0x12ab>
   5820e:	mov    rdi,r12
   58211:	call   4bdc0 <rpl_free>
   58216:	jmp    570ec <parse_expression+0x19c>
   5821b:	mov    rax,QWORD PTR [rsp+0x30]
   58220:	lea    rax,[rax+rax*1+0x1]
   58225:	lea    rsi,[rax*4+0x0]
   5822d:	mov    QWORD PTR [rsp+0x30],rax
   58232:	call   ca20 <realloc@plt>
   58237:	mov    rdi,rax
   5823a:	test   rax,rax
   5823d:	je     5841b <parse_expression+0x14cb>
   58243:	mov    rax,QWORD PTR [rsp+0x20]
   58248:	mov    QWORD PTR [rax],rdi
   5824b:	mov    rax,QWORD PTR [rax+0x28]
   5824f:	jmp    57c3c <parse_expression+0xcec>
   58254:	mov    ebx,0x80
   58259:	mov    r12d,0x2
   5825f:	call   c3b0 <__ctype_b_loc@plt>
   58264:	mov    rdi,QWORD PTR [rsp+0x18]
   58269:	lea    r9d,[rbx+0x100]
   58270:	mov    r8,rax
   58273:	movsxd rax,r12d
   58276:	shl    r12d,0x6
   5827a:	mov    rdx,QWORD PTR [r8]
   5827d:	lea    rsi,[rdi+rax*8]
   58281:	movsxd rax,ebx
   58284:	sub    r9d,r12d
   58287:	mov    r8d,0x1
   5828d:	lea    rdi,[rdx+rax*2]
   58291:	xor    eax,eax
   58293:	jmp    582aa <parse_expression+0x135a>
   58295:	nop    DWORD PTR [rax]
   58298:	lea    edx,[rbx+rax*1]
   5829b:	cmp    edx,0x5f
   5829e:	je     582b2 <parse_expression+0x1362>
   582a0:	add    rax,0x1
   582a4:	cmp    rax,0x40
   582a8:	je     582c1 <parse_expression+0x1371>
   582aa:	mov    ecx,eax
   582ac:	test   BYTE PTR [rdi+rax*2],0x8
   582b0:	je     58298 <parse_expression+0x1348>
   582b2:	mov    rdx,r8
   582b5:	shl    rdx,cl
   582b8:	or     QWORD PTR [rsi+0xb8],rdx
   582bf:	jmp    582a0 <parse_expression+0x1350>
   582c1:	add    ebx,0x40
   582c4:	add    rsi,0x8
   582c8:	sub    rdi,0xffffffffffffff80
   582cc:	cmp    r9d,ebx
   582cf:	jne    58291 <parse_expression+0x1341>
   582d1:	jmp    57aa7 <parse_expression+0xb57>
   582d6:	xor    ebx,ebx
   582d8:	xor    r12d,r12d
   582db:	jmp    5825f <parse_expression+0x130f>
   582e0:	xor    edx,edx
   582e2:	mov    r8,rbx
   582e5:	xor    ecx,ecx
   582e7:	mov    rsi,r13
   582ea:	mov    rdi,rbp
   582ed:	mov    BYTE PTR [rsp+0xa8],0x3
   582f5:	mov    QWORD PTR [rsp+0xa0],r12
   582fd:	call   4e750 <create_token_tree.isra.0>
   58302:	mov    rdx,rax
   58305:	test   rax,rax
   58308:	je     58195 <parse_expression+0x1245>
   5830e:	mov    rcx,QWORD PTR [rsp+0x28]
   58313:	pxor   xmm0,xmm0
   58317:	mov    rsi,r13
   5831a:	mov    rdi,rbp
   5831d:	lea    r8,[rsp+0xb0]
   58325:	movaps XMMWORD PTR [rsp+0xb0],xmm0
   5832d:	mov    BYTE PTR [rsp+0xb8],0xa
   58335:	call   4e750 <create_token_tree.isra.0>
   5833a:	mov    QWORD PTR [rsp+0x28],rax
   5833f:	test   rax,rax
   58342:	jne    570ec <parse_expression+0x19c>
   58348:	jmp    58195 <parse_expression+0x1245>
   5834d:	test   esi,esi
   5834f:	je     5835a <parse_expression+0x140a>
   58351:	cmp    esi,0x3
   58354:	jne    57fba <parse_expression+0x106a>
   5835a:	test   BYTE PTR [rsp+0x58],0x1
   5835f:	je     58012 <parse_expression+0x10c2>
   58365:	cmp    r9d,r8d
   58368:	jae    58012 <parse_expression+0x10c2>
   5836e:	mov    rax,QWORD PTR [rsp+0x40]
   58373:	mov    r14,QWORD PTR [rsp+0x20]
   58378:	mov    DWORD PTR [rax],0xb
   5837e:	jmp    57cd1 <parse_expression+0xd81>
   58383:	mov    r8d,DWORD PTR [rsp+0x98]
   5838b:	test   rdx,rdx
   5838e:	je     57fc2 <parse_expression+0x1072>
   58394:	mov    edi,r9d
   58397:	mov    DWORD PTR [rsp+0x68],r8d
   5839c:	mov    QWORD PTR [rsp+0x60],rdx
   583a1:	call   c960 <btowc@plt>
   583a6:	mov    rdx,QWORD PTR [rsp+0x60]
   583ab:	mov    r8d,DWORD PTR [rsp+0x68]
   583b0:	mov    r9d,eax
   583b3:	jmp    57fc2 <parse_expression+0x1072>
   583b8:	mov    eax,r11d
   583bb:	xor    r8d,r8d
   583be:	test   esi,esi
   583c0:	je     583d3 <parse_expression+0x1483>
   583c2:	test   al,al
   583c4:	jne    58425 <parse_expression+0x14d5>
   583c6:	mov    r8d,DWORD PTR [rsp+0x98]
   583ce:	jmp    57fba <parse_expression+0x106a>
   583d3:	movzx  r9d,BYTE PTR [rsp+0xa8]
   583dc:	jmp    57f72 <parse_expression+0x1022>
   583e1:	mov    r9,QWORD PTR [rsp+0xa8]
   583e9:	or     rcx,0xffffffffffffffff
   583ed:	mov    rdi,r9
   583f0:	repnz scas al,BYTE PTR es:[rdi]
   583f2:	mov    rax,rcx
   583f5:	not    rax
   583f8:	sub    rax,0x1
   583fc:	cmp    rax,0x1
   58400:	jbe    58525 <parse_expression+0x15d5>
   58406:	mov    rax,QWORD PTR [rsp+0x40]
   5840b:	mov    r14,QWORD PTR [rsp+0x20]
   58410:	mov    DWORD PTR [rax],0x3
   58416:	jmp    57cd1 <parse_expression+0xd81>
   5841b:	mov    r14,QWORD PTR [rsp+0x20]
   58420:	jmp    58195 <parse_expression+0x1245>
   58425:	test   rdx,rdx
   58428:	je     57fba <parse_expression+0x106a>
   5842e:	xor    r9d,r9d
   58431:	jmp    57f83 <parse_expression+0x1033>
   58436:	mov    rax,QWORD PTR [rsp+0x48]
   5843b:	mov    rdi,r11
   5843e:	mov    DWORD PTR [rsp+0x7c],r8d
   58443:	mov    QWORD PTR [rsp+0x60],rdx
   58448:	add    rax,rax
   5844b:	mov    DWORD PTR [rsp+0x78],r9d
   58450:	add    rax,0x1
   58454:	lea    rsi,[rax*4+0x0]
   5845c:	mov    QWORD PTR [rsp+0x48],rax
   58461:	mov    QWORD PTR [rsp+0x70],rsi
   58466:	call   ca20 <realloc@plt>
   5846b:	mov    rdx,QWORD PTR [rsp+0x60]
   58470:	mov    rsi,QWORD PTR [rsp+0x70]
   58475:	mov    QWORD PTR [rsp+0x68],rax
   5847a:	mov    rdi,QWORD PTR [rdx+0x10]
   5847e:	call   ca20 <realloc@plt>
   58483:	mov    r11,QWORD PTR [rsp+0x68]
   58488:	mov    r10,rax
   5848b:	test   r11,r11
   5848e:	je     5852e <parse_expression+0x15de>
   58494:	test   rax,rax
   58497:	mov    rdx,QWORD PTR [rsp+0x60]
   5849c:	mov    r9d,DWORD PTR [rsp+0x78]
   584a1:	mov    r8d,DWORD PTR [rsp+0x7c]
   584a6:	je     5852e <parse_expression+0x15de>
   584ac:	mov    QWORD PTR [rdx+0x10],rax
   584b0:	mov    rax,QWORD PTR [rdx+0x40]
   584b4:	mov    QWORD PTR [rdx+0x8],r11
   584b8:	jmp    57ffe <parse_expression+0x10ae>
   584bd:	mov    r9,QWORD PTR [rsp+0xa8]
   584c5:	xor    eax,eax
   584c7:	or     rcx,0xffffffffffffffff
   584cb:	mov    rdi,r9
   584ce:	repnz scas al,BYTE PTR es:[rdi]
   584d0:	mov    rax,rcx
   584d3:	not    rax
   584d6:	sub    rax,0x1
   584da:	cmp    rax,0x1
   584de:	ja     58406 <parse_expression+0x14b6>
   584e4:	mov    eax,r11d
   584e7:	xor    r8d,r8d
   584ea:	test   r10d,r10d
   584ed:	jne    57f6e <parse_expression+0x101e>
   584f3:	jmp    57f43 <parse_expression+0xff3>
   584f8:	mov    r8,QWORD PTR [rsp+0x98]
   58500:	xor    eax,eax
   58502:	or     rcx,0xffffffffffffffff
   58506:	mov    rdi,r8
   58509:	repnz scas al,BYTE PTR es:[rdi]
   5850b:	not    rcx
   5850e:	sub    rcx,0x1
   58512:	cmp    rcx,0x1
   58516:	ja     58406 <parse_expression+0x14b6>
   5851c:	cmp    esi,0x3
   5851f:	je     583e1 <parse_expression+0x1491>
   58525:	movzx  r8d,BYTE PTR [r8]
   58529:	jmp    57f4c <parse_expression+0xffc>
   5852e:	mov    rdi,r11
   58531:	mov    r14,QWORD PTR [rsp+0x20]
   58536:	mov    QWORD PTR [rsp+0x20],r10
   5853b:	call   4bdc0 <rpl_free>
   58540:	mov    r10,QWORD PTR [rsp+0x20]
   58545:	mov    rdi,r10
   58548:	call   4bdc0 <rpl_free>
   5854d:	mov    rax,QWORD PTR [rsp+0x40]
   58552:	mov    DWORD PTR [rax],0xc
   58558:	jmp    57cd1 <parse_expression+0xd81>
   5855d:	mov    rbp,rbx
   58560:	jmp    5748f <parse_expression+0x53f>
   58565:	mov    QWORD PTR [rsp+0x48],0x0
   5856e:	mov    r15,QWORD PTR [rsp+0x28]
   58573:	jmp    57196 <parse_expression+0x246>
   58578:	call   c7b0 <__stack_chk_fail@plt>
   5857d:	mov    r15,QWORD PTR [rsp+0x28]
   58582:	mov    QWORD PTR [rsp+0x48],r15
   58587:	jmp    573e2 <parse_expression+0x492>
   5858c:	nop    DWORD PTR [rax+0x0]

0000000000058590 <parse_branch>:
   58590:	push   r15
   58592:	push   r14
   58594:	mov    r14,r9
   58597:	push   r13
   58599:	mov    r13,rcx
   5859c:	push   r12
   5859e:	mov    r12,rdx
   585a1:	push   rbp
   585a2:	mov    rbp,r8
   585a5:	push   rbx
   585a6:	mov    rbx,rsi
   585a9:	sub    rsp,0x58
   585ad:	mov    QWORD PTR [rsp+0x8],rdi
   585b2:	mov    rax,QWORD PTR fs:0x28
   585bb:	mov    QWORD PTR [rsp+0x48],rax
   585c0:	xor    eax,eax
   585c2:	mov    rax,QWORD PTR [rsi]
   585c5:	mov    QWORD PTR [rsp+0x20],rax
   585ca:	call   56f50 <parse_expression>
   585cf:	mov    edx,DWORD PTR [r14]
   585d2:	mov    r15,rax
   585d5:	test   edx,edx
   585d7:	je     585e2 <parse_branch+0x52>
   585d9:	test   rax,rax
   585dc:	je     58714 <parse_branch+0x184>
   585e2:	movzx  eax,BYTE PTR [r12+0x8]
   585e8:	mov    edx,eax
   585ea:	and    edx,0xfffffff7
   585ed:	cmp    dl,0x2
   585f0:	je     586ca <parse_branch+0x13a>
   585f6:	lea    rsi,[rsp+0x30]
   585fb:	test   rbp,rbp
   585fe:	mov    QWORD PTR [rsp+0x28],rsi
   58603:	mov    rsi,r14
   58606:	mov    r14,r12
   58609:	mov    r12,rbp
   5860c:	sete   BYTE PTR [rsp+0x1f]
   58611:	mov    rbp,rbx
   58614:	mov    rbx,rsi
   58617:	jmp    58679 <parse_branch+0xe9>
   58619:	nop    DWORD PTR [rax+0x0]
   58620:	test   rcx,rcx
   58623:	je     586b4 <parse_branch+0x124>
   58629:	mov    rax,QWORD PTR [rsp+0x20]
   5862e:	mov    r8,QWORD PTR [rsp+0x28]
   58633:	pxor   xmm0,xmm0
   58637:	mov    rdx,r15
   5863a:	mov    QWORD PTR [rsp+0x10],rcx
   5863f:	lea    rsi,[rax+0x80]
   58646:	lea    rdi,[rax+0x70]
   5864a:	movaps XMMWORD PTR [rsp+0x30],xmm0
   5864f:	mov    BYTE PTR [rsp+0x38],0x10
   58654:	call   4e750 <create_token_tree.isra.0>
   58659:	mov    rcx,QWORD PTR [rsp+0x10]
   5865e:	test   rax,rax
   58661:	je     586ec <parse_branch+0x15c>
   58667:	mov    r15,rax
   5866a:	movzx  eax,BYTE PTR [r14+0x8]
   5866f:	mov    edx,eax
   58671:	and    edx,0xfffffff7
   58674:	cmp    dl,0x2
   58677:	je     586ca <parse_branch+0x13a>
   58679:	cmp    al,0x9
   5867b:	jne    58684 <parse_branch+0xf4>
   5867d:	cmp    BYTE PTR [rsp+0x1f],0x0
   58682:	je     586ca <parse_branch+0x13a>
   58684:	mov    rdi,QWORD PTR [rsp+0x8]
   58689:	mov    rcx,r13
   5868c:	mov    r9,rbx
   5868f:	mov    r8,r12
   58692:	mov    rdx,r14
   58695:	mov    rsi,rbp
   58698:	call   56f50 <parse_expression>
   5869d:	mov    rcx,rax
   586a0:	mov    eax,DWORD PTR [rbx]
   586a2:	test   eax,eax
   586a4:	je     586ab <parse_branch+0x11b>
   586a6:	test   rcx,rcx
   586a9:	je     58719 <parse_branch+0x189>
   586ab:	test   r15,r15
   586ae:	jne    58620 <parse_branch+0x90>
   586b4:	movzx  eax,BYTE PTR [r14+0x8]
   586b9:	test   r15,r15
   586bc:	cmove  r15,rcx
   586c0:	mov    edx,eax
   586c2:	and    edx,0xfffffff7
   586c5:	cmp    dl,0x2
   586c8:	jne    58679 <parse_branch+0xe9>
   586ca:	mov    rax,QWORD PTR [rsp+0x48]
   586cf:	xor    rax,QWORD PTR fs:0x28
   586d8:	jne    58734 <parse_branch+0x1a4>
   586da:	add    rsp,0x58
   586de:	mov    rax,r15
   586e1:	pop    rbx
   586e2:	pop    rbp
   586e3:	pop    r12
   586e5:	pop    r13
   586e7:	pop    r14
   586e9:	pop    r15
   586eb:	ret    
   586ec:	mov    rdi,rcx
   586ef:	xor    edx,edx
   586f1:	lea    rsi,[rip+0xffffffffffff4c28]        # 4d320 <free_tree>
   586f8:	call   4c3a0 <postorder>
   586fd:	xor    edx,edx
   586ff:	lea    rsi,[rip+0xffffffffffff4c1a]        # 4d320 <free_tree>
   58706:	mov    rdi,r15
   58709:	call   4c3a0 <postorder>
   5870e:	mov    DWORD PTR [rbx],0xc
   58714:	xor    r15d,r15d
   58717:	jmp    586ca <parse_branch+0x13a>
   58719:	test   r15,r15
   5871c:	je     58714 <parse_branch+0x184>
   5871e:	mov    rdi,r15
   58721:	xor    edx,edx
   58723:	lea    rsi,[rip+0xffffffffffff4bf6]        # 4d320 <free_tree>
   5872a:	xor    r15d,r15d
   5872d:	call   4c3a0 <postorder>
   58732:	jmp    586ca <parse_branch+0x13a>
   58734:	call   c7b0 <__stack_chk_fail@plt>
   58739:	nop    DWORD PTR [rax+0x0]

0000000000058740 <parse_reg_exp>:
   58740:	push   r15
   58742:	push   r14
   58744:	push   r13
   58746:	mov    r13,r9
   58749:	push   r12
   5874b:	mov    r12,rdi
   5874e:	push   rbp
   5874f:	mov    rbp,rdx
   58752:	push   rbx
   58753:	sub    rsp,0x58
   58757:	mov    rbx,QWORD PTR [rsi]
   5875a:	mov    QWORD PTR [rsp+0x28],rsi
   5875f:	mov    QWORD PTR [rsp+0x18],rcx
   58764:	mov    QWORD PTR [rsp+0x8],r8
   58769:	mov    rax,QWORD PTR fs:0x28
   58772:	mov    QWORD PTR [rsp+0x48],rax
   58777:	xor    eax,eax
   58779:	mov    rax,QWORD PTR [rbx+0xa8]
   58780:	mov    QWORD PTR [rsp+0x20],rax
   58785:	call   58590 <parse_branch>
   5878a:	mov    edx,DWORD PTR [r13+0x0]
   5878e:	mov    r15,rax
   58791:	test   edx,edx
   58793:	je     5879e <parse_reg_exp+0x5e>
   58795:	test   rax,rax
   58798:	je     588d3 <parse_reg_exp+0x193>
   5879e:	mov    r14,QWORD PTR [rsp+0x18]
   587a3:	or     r14,0x800000
   587aa:	mov    rax,r14
   587ad:	mov    r14,r15
   587b0:	mov    r15,rax
   587b3:	jmp    58853 <parse_reg_exp+0x113>
   587b8:	nop    DWORD PTR [rax+rax*1+0x0]
   587c0:	cmp    al,0x9
   587c2:	jne    587d0 <parse_reg_exp+0x90>
   587c4:	cmp    QWORD PTR [rsp+0x8],0x0
   587ca:	jne    58880 <parse_reg_exp+0x140>
   587d0:	mov    rax,QWORD PTR [rbx+0xa8]
   587d7:	mov    r9,r13
   587da:	mov    rdx,rbp
   587dd:	mov    rdi,r12
   587e0:	mov    rcx,QWORD PTR [rsp+0x18]
   587e5:	mov    r8,QWORD PTR [rsp+0x8]
   587ea:	mov    QWORD PTR [rsp+0x10],rax
   587ef:	mov    rax,QWORD PTR [rsp+0x20]
   587f4:	mov    rsi,QWORD PTR [rsp+0x28]
   587f9:	mov    QWORD PTR [rbx+0xa8],rax
   58800:	call   58590 <parse_branch>
   58805:	mov    rcx,rax
   58808:	mov    eax,DWORD PTR [r13+0x0]
   5880c:	test   eax,eax
   5880e:	je     58819 <parse_reg_exp+0xd9>
   58810:	test   rcx,rcx
   58813:	je     588bd <parse_reg_exp+0x17d>
   58819:	mov    rax,QWORD PTR [rsp+0x10]
   5881e:	or     QWORD PTR [rbx+0xa8],rax
   58825:	pxor   xmm0,xmm0
   58829:	lea    rdi,[rbx+0x70]
   5882d:	lea    r8,[rsp+0x30]
   58832:	mov    rdx,r14
   58835:	lea    rsi,[rbx+0x80]
   5883c:	movaps XMMWORD PTR [rsp+0x30],xmm0
   58841:	mov    BYTE PTR [rsp+0x38],0xa
   58846:	call   4e750 <create_token_tree.isra.0>
   5884b:	mov    r14,rax
   5884e:	test   rax,rax
   58851:	je     58888 <parse_reg_exp+0x148>
   58853:	cmp    BYTE PTR [rbp+0x8],0xa
   58857:	jne    588b8 <parse_reg_exp+0x178>
   58859:	mov    rdx,r15
   5885c:	mov    rsi,r12
   5885f:	mov    rdi,rbp
   58862:	call   567b0 <peek_token>
   58867:	cdqe   
   58869:	add    QWORD PTR [r12+0x48],rax
   5886e:	movzx  eax,BYTE PTR [rbp+0x8]
   58872:	mov    edx,eax
   58874:	and    edx,0xfffffff7
   58877:	cmp    dl,0x2
   5887a:	jne    587c0 <parse_reg_exp+0x80>
   58880:	xor    ecx,ecx
   58882:	jmp    58825 <parse_reg_exp+0xe5>
   58884:	nop    DWORD PTR [rax+0x0]
   58888:	mov    DWORD PTR [r13+0x0],0xc
   58890:	mov    r15,rax
   58893:	mov    rax,QWORD PTR [rsp+0x48]
   58898:	xor    rax,QWORD PTR fs:0x28
   588a1:	jne    588d8 <parse_reg_exp+0x198>
   588a3:	add    rsp,0x58
   588a7:	mov    rax,r15
   588aa:	pop    rbx
   588ab:	pop    rbp
   588ac:	pop    r12
   588ae:	pop    r13
   588b0:	pop    r14
   588b2:	pop    r15
   588b4:	ret    
   588b5:	nop    DWORD PTR [rax]
   588b8:	mov    r15,r14
   588bb:	jmp    58893 <parse_reg_exp+0x153>
   588bd:	test   r14,r14
   588c0:	je     588d3 <parse_reg_exp+0x193>
   588c2:	xor    edx,edx
   588c4:	lea    rsi,[rip+0xffffffffffff4a55]        # 4d320 <free_tree>
   588cb:	mov    rdi,r14
   588ce:	call   4c3a0 <postorder>
   588d3:	xor    r15d,r15d
   588d6:	jmp    58893 <parse_reg_exp+0x153>
   588d8:	call   c7b0 <__stack_chk_fail@plt>
   588dd:	nop    DWORD PTR [rax]

00000000000588e0 <re_compile_internal>:
   588e0:	push   r15
   588e2:	push   r14
   588e4:	mov    r14,rdi
   588e7:	push   r13
   588e9:	mov    r13,rcx
   588ec:	push   r12
   588ee:	mov    r12,rsi
   588f1:	push   rbp
   588f2:	push   rbx
   588f3:	mov    rbx,rdx
   588f6:	sub    rsp,0x128
   588fd:	mov    rbp,QWORD PTR [rdi]
   58900:	mov    rax,QWORD PTR fs:0x28
   58909:	mov    QWORD PTR [rsp+0x118],rax
   58911:	xor    eax,eax
   58913:	and    BYTE PTR [rdi+0x38],0x90
   58917:	cmp    QWORD PTR [rdi+0x8],0xe7
   5891f:	mov    DWORD PTR [rsp+0x4c],0x0
   58927:	mov    QWORD PTR [rdi+0x18],rcx
   5892b:	mov    QWORD PTR [rdi+0x10],0x0
   58933:	mov    QWORD PTR [rdi+0x30],0x0
   5893b:	jbe    59798 <re_compile_internal+0xeb8>
   58941:	lea    rdi,[rbp+0x8]
   58945:	mov    rcx,rbp
   58948:	xor    eax,eax
   5894a:	mov    QWORD PTR [r14+0x10],0xe8
   58952:	and    rdi,0xfffffffffffffff8
   58956:	mov    QWORD PTR [rbp+0x0],0x0
   5895e:	mov    QWORD PTR [rbp+0xe0],0x0
   58969:	sub    rcx,rdi
   5896c:	add    ecx,0xe8
   58972:	shr    ecx,0x3
   58975:	rep stos QWORD PTR es:[rdi],rax
   58978:	movabs rax,0x555555555555554
   58982:	mov    DWORD PTR [rbp+0x80],0xf
   5898c:	cmp    rbx,rax
   5898f:	ja     59188 <re_compile_internal+0x8a8>
   58995:	lea    rax,[rbx+0x1]
   58999:	mov    QWORD PTR [rbp+0x8],rax
   5899d:	mov    rdi,rax
   589a0:	shl    rdi,0x4
   589a4:	mov    QWORD PTR [rsp+0x8],rax
   589a9:	call   c0e0 <malloc@plt>
   589ae:	mov    QWORD PTR [rbp+0x0],rax
   589b2:	test   rbx,rbx
   589b5:	je     597c8 <re_compile_internal+0xee8>
   589bb:	mov    esi,0x1
   589c0:	add    rsi,rsi
   589c3:	cmp    rbx,rsi
   589c6:	jae    589c0 <re_compile_internal+0xe0>
   589c8:	lea    r15,[rsi-0x1]
   589cc:	mov    edi,0x18
   589d1:	call   c880 <calloc@plt>
   589d6:	mov    QWORD PTR [rbp+0x88],r15
   589dd:	mov    QWORD PTR [rbp+0x40],rax
   589e1:	call   c360 <__ctype_get_mb_cur_max@plt>
   589e6:	mov    edi,0xe
   589eb:	mov    DWORD PTR [rbp+0xb4],eax
   589f1:	call   bfc0 <nl_langinfo@plt>
   589f6:	movzx  edx,BYTE PTR [rax]
   589f9:	and    edx,0xffffffdf
   589fc:	cmp    dl,0x55
   589ff:	jne    58a40 <re_compile_internal+0x160>
   58a01:	movzx  edx,BYTE PTR [rax+0x1]
   58a05:	and    edx,0xffffffdf
   58a08:	cmp    dl,0x54
   58a0b:	jne    58a40 <re_compile_internal+0x160>
   58a0d:	movzx  edx,BYTE PTR [rax+0x2]
   58a11:	and    edx,0xffffffdf
   58a14:	cmp    dl,0x46
   58a17:	jne    58a40 <re_compile_internal+0x160>
   58a19:	xor    edx,edx
   58a1b:	cmp    BYTE PTR [rax+0x3],0x2d
   58a1f:	sete   dl
   58a22:	lea    rax,[rax+rdx*1+0x3]
   58a27:	cmp    BYTE PTR [rax],0x38
   58a2a:	jne    58a40 <re_compile_internal+0x160>
   58a2c:	cmp    BYTE PTR [rax+0x1],0x0
   58a30:	jne    58a40 <re_compile_internal+0x160>
   58a32:	or     BYTE PTR [rbp+0xb0],0x4
   58a39:	nop    DWORD PTR [rax+0x0]
   58a40:	movzx  eax,BYTE PTR [rbp+0xb0]
   58a47:	mov    edx,eax
   58a49:	and    edx,0xfffffff7
   58a4c:	cmp    DWORD PTR [rbp+0xb4],0x1
   58a53:	mov    BYTE PTR [rbp+0xb0],dl
   58a59:	jle    58a6e <re_compile_internal+0x18e>
   58a5b:	test   al,0x4
   58a5d:	je     59240 <re_compile_internal+0x960>
   58a63:	lea    rax,[rip+0x17756]        # 701c0 <utf8_sb_map>
   58a6a:	mov    QWORD PTR [rbp+0x78],rax
   58a6e:	cmp    QWORD PTR [rbp+0x0],0x0
   58a73:	je     59188 <re_compile_internal+0x8a8>
   58a79:	cmp    QWORD PTR [rbp+0x40],0x0
   58a7e:	je     59188 <re_compile_internal+0x8a8>
   58a84:	lea    rsi,[rsp+0x88]
   58a8c:	xor    eax,eax
   58a8e:	mov    ecx,0x12
   58a93:	mov    rdx,QWORD PTR [r14+0x28]
   58a97:	mov    rdi,rsi
   58a9a:	mov    esi,DWORD PTR [rbp+0xb4]
   58aa0:	mov    DWORD PTR [rsp+0x4c],0x0
   58aa8:	lea    r15,[rsp+0x80]
   58ab0:	rep stos QWORD PTR es:[rdi],rax
   58ab3:	mov    rax,r13
   58ab6:	mov    QWORD PTR [rsp+0xf8],rdx
   58abe:	and    eax,0x400000
   58ac3:	mov    QWORD PTR [rsp+0x80],r12
   58acb:	mov    QWORD PTR [rsp+0x10],rax
   58ad0:	setne  BYTE PTR [rsp+0x108]
   58ad8:	or     rdx,rax
   58adb:	movzx  eax,BYTE PTR [rbp+0xb0]
   58ae2:	setne  dil
   58ae6:	mov    QWORD PTR [rsp+0xd8],rbx
   58aee:	mov    ecx,eax
   58af0:	shr    al,0x3
   58af3:	mov    QWORD PTR [rsp+0xd0],rbx
   58afb:	shr    cl,0x2
   58afe:	and    eax,0x1
   58b01:	mov    BYTE PTR [rsp+0x10b],dil
   58b09:	and    ecx,0x1
   58b0c:	mov    DWORD PTR [rsp+0x110],esi
   58b13:	mov    BYTE PTR [rsp+0x109],cl
   58b1a:	mov    BYTE PTR [rsp+0x10a],al
   58b21:	mov    QWORD PTR [rsp+0xe8],rbx
   58b29:	mov    QWORD PTR [rsp+0xe0],rbx
   58b31:	test   rbx,rbx
   58b34:	jne    59150 <re_compile_internal+0x870>
   58b3a:	test   dil,dil
   58b3d:	cmovne r12,QWORD PTR [rsp+0x88]
   58b46:	cmp    QWORD PTR [rsp+0x10],0x0
   58b4c:	mov    QWORD PTR [rsp+0x88],r12
   58b54:	je     58bb8 <re_compile_internal+0x2d8>
   58b56:	cmp    esi,0x1
   58b59:	jle    59780 <re_compile_internal+0xea0>
   58b5f:	mov    rdi,r15
   58b62:	call   4c9a0 <build_wcs_upper_buffer>
   58b67:	test   eax,eax
   58b69:	jne    58ba8 <re_compile_internal+0x2c8>
   58b6b:	cmp    rbx,QWORD PTR [rsp+0xb8]
   58b73:	jle    59868 <re_compile_internal+0xf88>
   58b79:	mov    rsi,QWORD PTR [rsp+0xc0]
   58b81:	movsxd rax,DWORD PTR [rbp+0xb4]
   58b88:	add    rax,QWORD PTR [rsp+0xb0]
   58b90:	cmp    rsi,rax
   58b93:	jg     59868 <re_compile_internal+0xf88>
   58b99:	add    rsi,rsi
   58b9c:	mov    rdi,r15
   58b9f:	call   4c470 <re_string_realloc_buffers>
   58ba4:	test   eax,eax
   58ba6:	je     58b5f <re_compile_internal+0x27f>
   58ba8:	mov    DWORD PTR [rsp+0x4c],eax
   58bac:	mov    r12,QWORD PTR [r14]
   58baf:	jmp    591e0 <re_compile_internal+0x900>
   58bb4:	nop    DWORD PTR [rax+0x0]
   58bb8:	cmp    esi,0x1
   58bbb:	jg     59650 <re_compile_internal+0xd70>
   58bc1:	mov    rcx,QWORD PTR [rsp+0xc0]
   58bc9:	test   rdx,rdx
   58bcc:	je     58c2f <re_compile_internal+0x34f>
   58bce:	cmp    QWORD PTR [rsp+0xd8],rcx
   58bd6:	mov    rax,QWORD PTR [rsp+0xb0]
   58bde:	cmovle rcx,QWORD PTR [rsp+0xd8]
   58be7:	cmp    rcx,rax
   58bea:	jg     58c00 <re_compile_internal+0x320>
   58bec:	jmp    599a0 <re_compile_internal+0x10c0>
   58bf1:	nop    DWORD PTR [rax+0x0]
   58bf8:	mov    r12,QWORD PTR [rsp+0x88]
   58c00:	mov    rdx,QWORD PTR [rsp+0x80]
   58c08:	mov    rsi,QWORD PTR [rsp+0xf8]
   58c10:	add    rdx,rax
   58c13:	add    rdx,QWORD PTR [rsp+0xa8]
   58c1b:	movzx  edx,BYTE PTR [rdx]
   58c1e:	movzx  edx,BYTE PTR [rsi+rdx*1]
   58c22:	mov    BYTE PTR [r12+rax*1],dl
   58c26:	add    rax,0x1
   58c2a:	cmp    rcx,rax
   58c2d:	jne    58bf8 <re_compile_internal+0x318>
   58c2f:	mov    QWORD PTR [rsp+0xb0],rcx
   58c37:	mov    QWORD PTR [rsp+0xb8],rcx
   58c3f:	mov    DWORD PTR [rsp+0x4c],0x0
   58c47:	mov    rbx,QWORD PTR [r14]
   58c4a:	lea    r12,[rsp+0x50]
   58c4f:	mov    rdx,r13
   58c52:	mov    rsi,r15
   58c55:	or     rdx,0x800000
   58c5c:	mov    QWORD PTR [r14+0x30],0x0
   58c64:	mov    rdi,r12
   58c67:	mov    QWORD PTR [rbx+0xd8],r13
   58c6e:	mov    QWORD PTR [rsp+0x20],r12
   58c73:	call   567b0 <peek_token>
   58c78:	mov    rcx,r13
   58c7b:	lea    r9,[rsp+0x4c]
   58c80:	xor    r8d,r8d
   58c83:	mov    rdx,r12
   58c86:	mov    rsi,r14
   58c89:	mov    rdi,r15
   58c8c:	cdqe   
   58c8e:	add    QWORD PTR [rsp+0xc8],rax
   58c96:	call   58740 <parse_reg_exp>
   58c9b:	mov    ecx,DWORD PTR [rsp+0x4c]
   58c9f:	mov    r13,rax
   58ca2:	test   ecx,ecx
   58ca4:	jne    59800 <re_compile_internal+0xf20>
   58caa:	lea    rax,[rsp+0x60]
   58caf:	lea    r12,[rbx+0x70]
   58cb3:	pxor   xmm0,xmm0
   58cb7:	xor    ecx,ecx
   58cb9:	lea    rsi,[rbx+0x80]
   58cc0:	xor    edx,edx
   58cc2:	mov    r8,rax
   58cc5:	mov    rdi,r12
   58cc8:	mov    QWORD PTR [rsp+0x18],rsi
   58ccd:	movaps XMMWORD PTR [rsp+0x60],xmm0
   58cd2:	mov    QWORD PTR [rsp+0x8],rax
   58cd7:	mov    BYTE PTR [rsp+0x68],0x2
   58cdc:	call   4e750 <create_token_tree.isra.0>
   58ce1:	test   r13,r13
   58ce4:	mov    rsi,QWORD PTR [rsp+0x18]
   58ce9:	mov    rbx,rax
   58cec:	je     58d18 <re_compile_internal+0x438>
   58cee:	mov    r8,QWORD PTR [rsp+0x8]
   58cf3:	pxor   xmm0,xmm0
   58cf7:	mov    rcx,rbx
   58cfa:	mov    rdx,r13
   58cfd:	mov    rdi,r12
   58d00:	movaps XMMWORD PTR [rsp+0x60],xmm0
   58d05:	mov    BYTE PTR [rsp+0x68],0x10
   58d0a:	call   4e750 <create_token_tree.isra.0>
   58d0f:	mov    r8,rax
   58d12:	mov    rax,rbx
   58d15:	mov    rbx,r8
   58d18:	test   rax,rax
   58d1b:	mov    r12,QWORD PTR [r14]
   58d1e:	sete   dl
   58d21:	test   rbx,rbx
   58d24:	sete   al
   58d27:	or     dl,al
   58d29:	jne    59850 <re_compile_internal+0xf70>
   58d2f:	mov    r13,QWORD PTR [r12+0x8]
   58d34:	mov    QWORD PTR [rbp+0x68],rbx
   58d38:	lea    rdi,[r13*8+0x0]
   58d40:	lea    r13,[r13+r13*2+0x0]
   58d45:	mov    QWORD PTR [rsp+0x18],rdi
   58d4a:	shl    r13,0x3
   58d4e:	call   c0e0 <malloc@plt>
   58d53:	mov    rdi,QWORD PTR [rsp+0x18]
   58d58:	mov    QWORD PTR [r12+0x18],rax
   58d5d:	mov    rbx,rax
   58d60:	call   c0e0 <malloc@plt>
   58d65:	mov    rdi,r13
   58d68:	mov    QWORD PTR [r12+0x20],rax
   58d6d:	mov    QWORD PTR [rsp+0x28],rax
   58d72:	call   c0e0 <malloc@plt>
   58d77:	mov    rdi,r13
   58d7a:	mov    QWORD PTR [r12+0x28],rax
   58d7f:	mov    QWORD PTR [rsp+0x18],rax
   58d84:	call   c0e0 <malloc@plt>
   58d89:	test   rbx,rbx
   58d8c:	mov    rcx,QWORD PTR [rsp+0x18]
   58d91:	mov    rdx,QWORD PTR [rsp+0x28]
   58d96:	mov    QWORD PTR [r12+0x30],rax
   58d9b:	je     591d8 <re_compile_internal+0x8f8>
   58da1:	test   rdx,rdx
   58da4:	je     591d8 <re_compile_internal+0x8f8>
   58daa:	test   rcx,rcx
   58dad:	je     591d8 <re_compile_internal+0x8f8>
   58db3:	test   rax,rax
   58db6:	je     591d8 <re_compile_internal+0x8f8>
   58dbc:	mov    rbx,QWORD PTR [r14+0x30]
   58dc0:	lea    rdi,[rbx*8+0x0]
   58dc8:	call   c0e0 <malloc@plt>
   58dcd:	mov    QWORD PTR [r12+0xe0],rax
   58dd5:	test   rax,rax
   58dd8:	je     58e3b <re_compile_internal+0x55b>
   58dda:	xor    edx,edx
   58ddc:	test   rbx,rbx
   58ddf:	je     58df5 <re_compile_internal+0x515>
   58de1:	nop    DWORD PTR [rax+0x0]
   58de8:	mov    QWORD PTR [rax+rdx*8],rdx
   58dec:	add    rdx,0x1
   58df0:	cmp    rdx,rbx
   58df3:	jne    58de8 <re_compile_internal+0x508>
   58df5:	mov    rdi,QWORD PTR [r12+0x68]
   58dfa:	mov    rdx,r12
   58dfd:	lea    rsi,[rip+0xffffffffffff4edc]        # 4dce0 <optimize_subexps>
   58e04:	call   4c410 <preorder>
   58e09:	mov    rdx,QWORD PTR [r14+0x30]
   58e0d:	test   rdx,rdx
   58e10:	je     597d8 <re_compile_internal+0xef8>
   58e16:	mov    rdi,QWORD PTR [r12+0xe0]
   58e1e:	xor    eax,eax
   58e20:	jmp    58e35 <re_compile_internal+0x555>
   58e22:	nop    WORD PTR [rax+rax*1+0x0]
   58e28:	add    rax,0x1
   58e2c:	cmp    rax,rdx
   58e2f:	je     597e0 <re_compile_internal+0xf00>
   58e35:	cmp    rax,QWORD PTR [rdi+rax*8]
   58e39:	je     58e28 <re_compile_internal+0x548>
   58e3b:	mov    rdi,QWORD PTR [r12+0x68]
   58e40:	mov    rdx,r14
   58e43:	lea    rsi,[rip+0xffffffffffff5d36]        # 4eb80 <lower_subexps>
   58e4a:	call   4c3a0 <postorder>
   58e4f:	test   eax,eax
   58e51:	jne    58ba8 <re_compile_internal+0x2c8>
   58e57:	mov    rdi,QWORD PTR [r12+0x68]
   58e5c:	mov    rdx,r12
   58e5f:	lea    rsi,[rip+0xffffffffffff693a]        # 4f7a0 <calc_first>
   58e66:	call   4c3a0 <postorder>
   58e6b:	test   eax,eax
   58e6d:	jne    58ba8 <re_compile_internal+0x2c8>
   58e73:	mov    rdi,QWORD PTR [r12+0x68]
   58e78:	lea    rsi,[rip+0xffffffffffff4f01]        # 4dd80 <calc_next>
   58e7f:	mov    rdx,r12
   58e82:	call   4c410 <preorder>
   58e87:	mov    QWORD PTR [rsp+0x18],rbp
   58e8c:	mov    r13,QWORD PTR [r12+0x68]
   58e91:	lea    rsi,[rip+0x172b0]        # 70148 <quoting_style_vals+0x468>
   58e98:	mov    QWORD PTR [rsp+0x30],r14
   58e9d:	mov    QWORD PTR [rsp+0x38],r15
   58ea2:	nop    WORD PTR [rax+rax*1+0x0]
   58ea8:	cmp    BYTE PTR [r13+0x30],0x10
   58ead:	mov    rdx,QWORD PTR [r13+0x38]
   58eb1:	ja     58ec8 <re_compile_internal+0x5e8>
   58eb3:	movzx  eax,BYTE PTR [r13+0x30]
   58eb8:	movsxd rax,DWORD PTR [rsi+rax*4]
   58ebc:	add    rax,rsi
   58ebf:	notrack jmp rax
   58ec2:	nop    WORD PTR [rax+rax*1+0x0]
   58ec8:	mov    rax,QWORD PTR [r13+0x20]
   58ecc:	mov    rcx,QWORD PTR [rax+0x38]
   58ed0:	mov    rax,QWORD PTR [r12+0x18]
   58ed5:	mov    QWORD PTR [rax+rdx*8],rcx
   58ed9:	mov    rbx,QWORD PTR [r13+0x8]
   58edd:	test   rbx,rbx
   58ee0:	je     58ef3 <re_compile_internal+0x613>
   58ee2:	mov    r13,rbx
   58ee5:	jmp    58ea8 <re_compile_internal+0x5c8>
   58ee7:	nop    WORD PTR [rax+rax*1+0x0]
   58ef0:	mov    r13,rdx
   58ef3:	mov    rdx,QWORD PTR [r13+0x10]
   58ef7:	test   rdx,rdx
   58efa:	sete   al
   58efd:	cmp    rdx,rbx
   58f00:	sete   cl
   58f03:	or     al,cl
   58f05:	je     59740 <re_compile_internal+0xe60>
   58f0b:	mov    rdx,QWORD PTR [r13+0x0]
   58f0f:	mov    rbx,r13
   58f12:	test   rdx,rdx
   58f15:	jne    58ef0 <re_compile_internal+0x610>
   58f17:	mov    BYTE PTR [rsp+0x28],al
   58f1b:	xor    r13d,r13d
   58f1e:	mov    rbp,QWORD PTR [rsp+0x18]
   58f23:	xor    ebx,ebx
   58f25:	mov    r14,QWORD PTR [rsp+0x30]
   58f2a:	mov    r15,QWORD PTR [rsp+0x38]
   58f2f:	mov    r8d,r13d
   58f32:	mov    r13,r12
   58f35:	nop    DWORD PTR [rax]
   58f38:	cmp    QWORD PTR [r13+0x10],rbx
   58f3c:	je     58f5e <re_compile_internal+0x67e>
   58f3e:	lea    r12,[rbx+rbx*2]
   58f42:	shl    r12,0x3
   58f46:	mov    rax,QWORD PTR [r13+0x30]
   58f4a:	mov    rax,QWORD PTR [rax+r12*1+0x8]
   58f4f:	test   rax,rax
   58f52:	je     58f7d <re_compile_internal+0x69d>
   58f54:	add    rbx,0x1
   58f58:	cmp    QWORD PTR [r13+0x10],rbx
   58f5c:	jne    58f3e <re_compile_internal+0x65e>
   58f5e:	test   r8b,r8b
   58f61:	je     59308 <re_compile_internal+0xa28>
   58f67:	mov    rax,QWORD PTR [r13+0x30]
   58f6b:	xor    r12d,r12d
   58f6e:	xor    r8d,r8d
   58f71:	xor    ebx,ebx
   58f73:	mov    rax,QWORD PTR [rax+r12*1+0x8]
   58f78:	test   rax,rax
   58f7b:	jne    58f54 <re_compile_internal+0x674>
   58f7d:	mov    rdi,QWORD PTR [rsp+0x8]
   58f82:	mov    ecx,0x1
   58f87:	mov    rdx,rbx
   58f8a:	mov    rsi,r13
   58f8d:	mov    BYTE PTR [rsp+0x18],r8b
   58f92:	call   4e1b0 <calc_eclosure_iter>
   58f97:	test   eax,eax
   58f99:	jne    58ba8 <re_compile_internal+0x2c8>
   58f9f:	mov    rax,QWORD PTR [r13+0x30]
   58fa3:	add    rbx,0x1
   58fa7:	movzx  r8d,BYTE PTR [rsp+0x18]
   58fad:	cmp    QWORD PTR [rax+r12*1+0x8],0x0
   58fb3:	jne    58f38 <re_compile_internal+0x658>
   58fb5:	mov    rdi,QWORD PTR [rsp+0x70]
   58fba:	call   4bdc0 <rpl_free>
   58fbf:	cmp    QWORD PTR [r13+0x10],rbx
   58fc3:	je     59640 <re_compile_internal+0xd60>
   58fc9:	lea    r12,[rbx+rbx*2]
   58fcd:	movzx  r8d,BYTE PTR [rsp+0x28]
   58fd3:	shl    r12,0x3
   58fd7:	jmp    58f46 <re_compile_internal+0x666>
   58fdc:	nop    DWORD PTR [rax+0x0]
   58fe0:	mov    rax,QWORD PTR [r13+0x20]
   58fe4:	lea    rdx,[rdx+rdx*2]
   58fe8:	mov    edi,0x8
   58fed:	mov    rbx,QWORD PTR [rax+0x38]
   58ff1:	mov    rax,QWORD PTR [r12+0x28]
   58ff6:	lea    rbp,[rax+rdx*8]
   58ffa:	mov    QWORD PTR [rbp+0x0],0x1
   59002:	mov    QWORD PTR [rbp+0x8],0x1
   5900a:	call   c0e0 <malloc@plt>
   5900f:	lea    rsi,[rip+0x17132]        # 70148 <quoting_style_vals+0x468>
   59016:	test   rax,rax
   59019:	mov    QWORD PTR [rbp+0x10],rax
   5901d:	je     59958 <re_compile_internal+0x1078>
   59023:	mov    QWORD PTR [rax],rbx
   59026:	mov    rbx,QWORD PTR [r13+0x8]
   5902a:	jmp    58edd <re_compile_internal+0x5fd>
   5902f:	nop
   59030:	or     BYTE PTR [r12+0xb0],0x1
   59039:	mov    rbx,QWORD PTR [r13+0x8]
   5903d:	test   rbx,rbx
   59040:	je     59770 <re_compile_internal+0xe90>
   59046:	mov    rax,QWORD PTR [rbx+0x18]
   5904a:	mov    r14,QWORD PTR [rax+0x38]
   5904e:	mov    rax,QWORD PTR [r13+0x10]
   59052:	test   rax,rax
   59055:	je     59760 <re_compile_internal+0xe80>
   5905b:	mov    rax,QWORD PTR [rax+0x18]
   5905f:	mov    r15,QWORD PTR [rax+0x38]
   59063:	mov    rax,QWORD PTR [r12+0x28]
   59068:	lea    rdx,[rdx+rdx*2]
   5906c:	mov    edi,0x10
   59071:	lea    rbp,[rax+rdx*8]
   59075:	mov    QWORD PTR [rbp+0x0],0x2
   5907d:	call   c0e0 <malloc@plt>
   59082:	lea    rsi,[rip+0x170bf]        # 70148 <quoting_style_vals+0x468>
   59089:	test   rax,rax
   5908c:	mov    QWORD PTR [rbp+0x10],rax
   59090:	je     59940 <re_compile_internal+0x1060>
   59096:	cmp    r14,r15
   59099:	je     59750 <re_compile_internal+0xe70>
   5909f:	mov    QWORD PTR [rbp+0x8],0x2
   590a7:	jge    592f8 <re_compile_internal+0xa18>
   590ad:	mov    QWORD PTR [rax],r14
   590b0:	mov    QWORD PTR [rax+0x8],r15
   590b4:	jmp    58edd <re_compile_internal+0x5fd>
   590b9:	nop    DWORD PTR [rax+0x0]
   590c0:	mov    rax,QWORD PTR [r13+0x20]
   590c4:	mov    rbx,QWORD PTR [rax+0x38]
   590c8:	mov    rax,QWORD PTR [r12+0x18]
   590cd:	mov    QWORD PTR [rax+rdx*8],rbx
   590d1:	cmp    BYTE PTR [r13+0x30],0x4
   590d6:	jne    58ed9 <re_compile_internal+0x5f9>
   590dc:	mov    rax,QWORD PTR [r12+0x28]
   590e1:	lea    rdx,[rdx+rdx*2]
   590e5:	mov    edi,0x8
   590ea:	lea    rdx,[rax+rdx*8]
   590ee:	mov    QWORD PTR [rdx],0x1
   590f5:	mov    QWORD PTR [rdx+0x8],0x1
   590fd:	mov    QWORD PTR [rsp+0x28],rdx
   59102:	call   c0e0 <malloc@plt>
   59107:	mov    rdx,QWORD PTR [rsp+0x28]
   5910c:	lea    rsi,[rip+0x17035]        # 70148 <quoting_style_vals+0x468>
   59113:	test   rax,rax
   59116:	mov    QWORD PTR [rdx+0x10],rax
   5911a:	jne    59023 <re_compile_internal+0x743>
   59120:	mov    rbp,QWORD PTR [rsp+0x18]
   59125:	mov    r14,QWORD PTR [rsp+0x30]
   5912a:	mov    eax,0xc
   5912f:	mov    QWORD PTR [rdx+0x8],0x0
   59137:	mov    QWORD PTR [rdx],0x0
   5913e:	mov    r15,QWORD PTR [rsp+0x38]
   59143:	jmp    58ba8 <re_compile_internal+0x2c8>
   59148:	nop    DWORD PTR [rax+rax*1+0x0]
   59150:	mov    rsi,QWORD PTR [rsp+0x8]
   59155:	mov    rdi,r15
   59158:	mov    QWORD PTR [rsp+0x18],rdx
   5915d:	call   4c470 <re_string_realloc_buffers>
   59162:	test   eax,eax
   59164:	jne    58ba8 <re_compile_internal+0x2c8>
   5916a:	movzx  edi,BYTE PTR [rsp+0x10b]
   59172:	mov    esi,DWORD PTR [rbp+0xb4]
   59178:	mov    rdx,QWORD PTR [rsp+0x18]
   5917d:	jmp    58b3a <re_compile_internal+0x25a>
   59182:	nop    WORD PTR [rax+rax*1+0x0]
   59188:	mov    DWORD PTR [rsp+0x4c],0xc
   59190:	mov    rdi,rbp
   59193:	call   4d8d0 <free_dfa_content>
   59198:	mov    QWORD PTR [r14],0x0
   5919f:	mov    eax,DWORD PTR [rsp+0x4c]
   591a3:	mov    QWORD PTR [r14+0x8],0x0
   591ab:	mov    rsi,QWORD PTR [rsp+0x118]
   591b3:	xor    rsi,QWORD PTR fs:0x28
   591bc:	jne    59a06 <re_compile_internal+0x1126>
   591c2:	add    rsp,0x128
   591c9:	pop    rbx
   591ca:	pop    rbp
   591cb:	pop    r12
   591cd:	pop    r13
   591cf:	pop    r14
   591d1:	pop    r15
   591d3:	ret    
   591d4:	nop    DWORD PTR [rax+0x0]
   591d8:	mov    DWORD PTR [rsp+0x4c],0xc
   591e0:	mov    rbx,QWORD PTR [r12+0x70]
   591e5:	test   rbx,rbx
   591e8:	je     59200 <re_compile_internal+0x920>
   591ea:	nop    WORD PTR [rax+rax*1+0x0]
   591f0:	mov    rdi,rbx
   591f3:	mov    rbx,QWORD PTR [rbx]
   591f6:	call   4bdc0 <rpl_free>
   591fb:	test   rbx,rbx
   591fe:	jne    591f0 <re_compile_internal+0x910>
   59200:	mov    QWORD PTR [r12+0x70],0x0
   59209:	mov    rdi,QWORD PTR [r12+0x20]
   5920e:	mov    DWORD PTR [r12+0x80],0xf
   5921a:	mov    QWORD PTR [r12+0x68],0x0
   59223:	call   4bdc0 <rpl_free>
   59228:	mov    rdi,r15
   5922b:	mov    QWORD PTR [r12+0x20],0x0
   59234:	call   4d890 <re_string_destruct>
   59239:	jmp    59190 <re_compile_internal+0x8b0>
   5923e:	xchg   ax,ax
   59240:	mov    esi,0x1
   59245:	mov    edi,0x20
   5924a:	call   c880 <calloc@plt>
   5924f:	mov    QWORD PTR [rbp+0x78],rax
   59253:	test   rax,rax
   59256:	je     59188 <re_compile_internal+0x8a8>
   5925c:	xor    r15d,r15d
   5925f:	mov    QWORD PTR [rsp+0x10],r12
   59264:	mov    QWORD PTR [rsp+0x18],rbx
   59269:	mov    r12,r15
   5926c:	mov    rbx,rbp
   5926f:	lea    r15d,[r12*8+0x0]
   59277:	xor    ebp,ebp
   59279:	jmp    59297 <re_compile_internal+0x9b7>
   5927b:	nop    DWORD PTR [rax+rax*1+0x0]
   59280:	test   edi,edi
   59282:	jne    5928b <re_compile_internal+0x9ab>
   59284:	or     BYTE PTR [rbx+0xb0],0x8
   5928b:	add    ebp,0x1
   5928e:	add    r15d,0x1
   59292:	cmp    ebp,0x40
   59295:	je     592d8 <re_compile_internal+0x9f8>
   59297:	mov    edi,r15d
   5929a:	call   c960 <btowc@plt>
   5929f:	mov    edi,r15d
   592a2:	and    edi,0xffffff80
   592a5:	cmp    eax,0xffffffff
   592a8:	je     59280 <re_compile_internal+0x9a0>
   592aa:	mov    r8,QWORD PTR [rbx+0x78]
   592ae:	mov    esi,0x1
   592b3:	mov    ecx,ebp
   592b5:	shl    rsi,cl
   592b8:	add    r8,r12
   592bb:	or     QWORD PTR [r8],rsi
   592be:	test   edi,edi
   592c0:	jne    5928b <re_compile_internal+0x9ab>
   592c2:	cmp    eax,r15d
   592c5:	jne    59284 <re_compile_internal+0x9a4>
   592c7:	add    ebp,0x1
   592ca:	add    r15d,0x1
   592ce:	cmp    ebp,0x40
   592d1:	jne    59297 <re_compile_internal+0x9b7>
   592d3:	nop    DWORD PTR [rax+rax*1+0x0]
   592d8:	add    r12,0x8
   592dc:	cmp    r12,0x20
   592e0:	jne    5926f <re_compile_internal+0x98f>
   592e2:	mov    rbp,rbx
   592e5:	mov    r12,QWORD PTR [rsp+0x10]
   592ea:	mov    rbx,QWORD PTR [rsp+0x18]
   592ef:	jmp    58a6e <re_compile_internal+0x18e>
   592f4:	nop    DWORD PTR [rax+0x0]
   592f8:	mov    QWORD PTR [rax],r15
   592fb:	mov    QWORD PTR [rax+0x8],r14
   592ff:	jmp    58edd <re_compile_internal+0x5fd>
   59304:	nop    DWORD PTR [rax+0x0]
   59308:	mov    r12,r13
   5930b:	mov    r13d,r8d
   5930e:	test   BYTE PTR [r14+0x38],0x10
   59313:	jne    59330 <re_compile_internal+0xa50>
   59315:	cmp    QWORD PTR [r14+0x30],0x0
   5931a:	je     59330 <re_compile_internal+0xa50>
   5931c:	test   BYTE PTR [r12+0xb0],0x1
   59325:	jne    5933f <re_compile_internal+0xa5f>
   59327:	nop    WORD PTR [rax+rax*1+0x0]
   59330:	cmp    QWORD PTR [r12+0x98],0x0
   59339:	je     59450 <re_compile_internal+0xb70>
   5933f:	lea    rdi,[rbx+rbx*2]
   59343:	shl    rdi,0x3
   59347:	call   c0e0 <malloc@plt>
   5934c:	mov    QWORD PTR [r12+0x38],rax
   59351:	test   rax,rax
   59354:	je     599b0 <re_compile_internal+0x10d0>
   5935a:	xor    ecx,ecx
   5935c:	test   rbx,rbx
   5935f:	jne    59375 <re_compile_internal+0xa95>
   59361:	jmp    59450 <re_compile_internal+0xb70>
   59366:	nop    WORD PTR cs:[rax+rax*1+0x0]
   59370:	mov    rax,QWORD PTR [r12+0x38]
   59375:	lea    rdx,[rcx+rcx*2]
   59379:	pxor   xmm0,xmm0
   5937d:	add    rcx,0x1
   59381:	lea    rax,[rax+rdx*8]
   59385:	mov    QWORD PTR [rax+0x10],0x0
   5938d:	movups XMMWORD PTR [rax],xmm0
   59390:	mov    rax,QWORD PTR [r12+0x10]
   59395:	cmp    rax,rcx
   59398:	ja     59370 <re_compile_internal+0xa90>
   5939a:	test   rax,rax
   5939d:	je     59450 <re_compile_internal+0xb70>
   593a3:	mov    QWORD PTR [rsp+0x28],r14
   593a8:	xor    ebx,ebx
   593aa:	mov    rax,QWORD PTR [r12+0x30]
   593af:	mov    QWORD PTR [rsp+0x18],rbp
   593b4:	mov    rbp,r12
   593b7:	mov    BYTE PTR [rsp+0x30],r13b
   593bc:	mov    r13,rbx
   593bf:	lea    r12,[r13+r13*2+0x0]
   593c4:	xor    ebx,ebx
   593c6:	shl    r12,0x3
   593ca:	lea    rdi,[rax+r12*1]
   593ce:	cmp    QWORD PTR [rdi+0x8],0x0
   593d3:	mov    r14,QWORD PTR [rdi+0x10]
   593d7:	jg     593ef <re_compile_internal+0xb0f>
   593d9:	jmp    59430 <re_compile_internal+0xb50>
   593db:	nop    DWORD PTR [rax+rax*1+0x0]
   593e0:	mov    rax,QWORD PTR [rbp+0x30]
   593e4:	add    rbx,0x1
   593e8:	cmp    rbx,QWORD PTR [rax+r12*1+0x8]
   593ed:	jge    59430 <re_compile_internal+0xb50>
   593ef:	mov    rax,QWORD PTR [r14+rbx*8]
   593f3:	mov    rsi,r13
   593f6:	lea    rdi,[rax+rax*2]
   593fa:	mov    rax,QWORD PTR [rbp+0x38]
   593fe:	lea    rdi,[rax+rdi*8]
   59402:	call   4c510 <re_node_set_insert_last>
   59407:	test   al,al
   59409:	jne    593e0 <re_compile_internal+0xb00>
   5940b:	mov    rbp,QWORD PTR [rsp+0x18]
   59410:	mov    r14,QWORD PTR [rsp+0x28]
   59415:	mov    eax,0xc
   5941a:	mov    r12,QWORD PTR [r14]
   5941d:	mov    DWORD PTR [rsp+0x4c],eax
   59421:	jmp    591e0 <re_compile_internal+0x900>
   59426:	nop    WORD PTR cs:[rax+rax*1+0x0]
   59430:	add    r13,0x1
   59434:	cmp    QWORD PTR [rbp+0x10],r13
   59438:	ja     593bf <re_compile_internal+0xadf>
   5943a:	mov    rbp,QWORD PTR [rsp+0x18]
   5943f:	movzx  r13d,BYTE PTR [rsp+0x30]
   59445:	mov    r14,QWORD PTR [rsp+0x28]
   5944a:	nop    WORD PTR [rax+rax*1+0x0]
   59450:	movzx  eax,BYTE PTR [rbp+0xb0]
   59457:	mov    DWORD PTR [rsp+0x4c],0x0
   5945f:	shr    al,0x2
   59462:	cmp    QWORD PTR [rsp+0x10],0x0
   59468:	sete   dl
   5946b:	and    al,dl
   5946d:	jne    59668 <re_compile_internal+0xd88>
   59473:	mov    rax,QWORD PTR [rbp+0x68]
   59477:	mov    rdi,QWORD PTR [rsp+0x8]
   5947c:	mov    rax,QWORD PTR [rax+0x18]
   59480:	mov    rax,QWORD PTR [rax+0x38]
   59484:	lea    rdx,[rax+rax*2]
   59488:	mov    QWORD PTR [rbp+0x90],rax
   5948f:	mov    rax,QWORD PTR [rbp+0x30]
   59493:	lea    rsi,[rax+rdx*8]
   59497:	call   4ec30 <re_node_set_init_copy>
   5949c:	mov    DWORD PTR [rsp+0x50],eax
   594a0:	mov    ebx,eax
   594a2:	test   eax,eax
   594a4:	jne    595c9 <re_compile_internal+0xce9>
   594aa:	cmp    QWORD PTR [rbp+0x98],0x0
   594b2:	jle    59588 <re_compile_internal+0xca8>
   594b8:	mov    r9,QWORD PTR [rsp+0x68]
   594bd:	test   r9,r9
   594c0:	jle    59588 <re_compile_internal+0xca8>
   594c6:	mov    r12,QWORD PTR [rsp+0x8]
   594cb:	xor    r8d,r8d
   594ce:	lea    r13,[rsp+0x70]
   594d3:	jmp    594e5 <re_compile_internal+0xc05>
   594d5:	nop    DWORD PTR [rax]
   594d8:	add    r8,0x1
   594dc:	cmp    r9,r8
   594df:	jle    59588 <re_compile_internal+0xca8>
   594e5:	mov    rdi,QWORD PTR [rsp+0x70]
   594ea:	mov    r10,QWORD PTR [rbp+0x0]
   594ee:	mov    rsi,QWORD PTR [rdi+r8*8]
   594f2:	mov    rcx,rsi
   594f5:	shl    rcx,0x4
   594f9:	add    rcx,r10
   594fc:	cmp    BYTE PTR [rcx+0x8],0x4
   59500:	jne    594d8 <re_compile_internal+0xbf8>
   59502:	xor    edx,edx
   59504:	jmp    59519 <re_compile_internal+0xc39>
   59506:	nop    WORD PTR cs:[rax+rax*1+0x0]
   59510:	add    rdx,0x1
   59514:	cmp    r9,rdx
   59517:	je     594d8 <re_compile_internal+0xbf8>
   59519:	mov    rax,QWORD PTR [rdi+rdx*8]
   5951d:	shl    rax,0x4
   59521:	add    rax,r10
   59524:	cmp    BYTE PTR [rax+0x8],0x9
   59528:	jne    59510 <re_compile_internal+0xc30>
   5952a:	mov    r11,QWORD PTR [rcx]
   5952d:	cmp    QWORD PTR [rax],r11
   59530:	jne    59510 <re_compile_internal+0xc30>
   59532:	mov    rdx,QWORD PTR [rbp+0x28]
   59536:	lea    rax,[rsi+rsi*2]
   5953a:	mov    rdi,r9
   5953d:	mov    rsi,r13
   59540:	lea    rax,[rdx+rax*8]
   59544:	mov    rax,QWORD PTR [rax+0x10]
   59548:	mov    rdx,QWORD PTR [rax]
   5954b:	call   4db50 <re_node_set_contains.isra.0>
   59550:	test   rax,rax
   59553:	jne    594d8 <re_compile_internal+0xbf8>
   59555:	mov    rax,QWORD PTR [rbp+0x30]
   59559:	lea    rdx,[rdx+rdx*2]
   5955d:	mov    rdi,r12
   59560:	lea    rsi,[rax+rdx*8]
   59564:	call   4dfe0 <re_node_set_merge>
   59569:	test   eax,eax
   5956b:	jne    59988 <re_compile_internal+0x10a8>
   59571:	mov    r9,QWORD PTR [rsp+0x68]
   59576:	mov    r8d,0x1
   5957c:	cmp    r9,r8
   5957f:	jg     594e5 <re_compile_internal+0xc05>
   59585:	nop    DWORD PTR [rax]
   59588:	mov    rdx,QWORD PTR [rsp+0x8]
   5958d:	mov    rdi,QWORD PTR [rsp+0x20]
   59592:	xor    ecx,ecx
   59594:	mov    rsi,rbp
   59597:	call   4ee30 <re_acquire_state_context>
   5959c:	mov    QWORD PTR [rbp+0x48],rax
   595a0:	test   rax,rax
   595a3:	je     59730 <re_compile_internal+0xe50>
   595a9:	cmp    BYTE PTR [rax+0x68],0x0
   595ad:	js     596c0 <re_compile_internal+0xde0>
   595b3:	mov    QWORD PTR [rbp+0x60],rax
   595b7:	mov    QWORD PTR [rbp+0x58],rax
   595bb:	mov    QWORD PTR [rbp+0x50],rax
   595bf:	mov    rdi,QWORD PTR [rsp+0x70]
   595c4:	call   4bdc0 <rpl_free>
   595c9:	mov    r12,QWORD PTR [r14]
   595cc:	mov    DWORD PTR [rsp+0x4c],ebx
   595d0:	mov    rbx,QWORD PTR [r12+0x70]
   595d5:	test   rbx,rbx
   595d8:	je     595f0 <re_compile_internal+0xd10>
   595da:	nop    WORD PTR [rax+rax*1+0x0]
   595e0:	mov    rdi,rbx
   595e3:	mov    rbx,QWORD PTR [rbx]
   595e6:	call   4bdc0 <rpl_free>
   595eb:	test   rbx,rbx
   595ee:	jne    595e0 <re_compile_internal+0xd00>
   595f0:	mov    QWORD PTR [r12+0x70],0x0
   595f9:	mov    rdi,QWORD PTR [r12+0x20]
   595fe:	mov    DWORD PTR [r12+0x80],0xf
   5960a:	mov    QWORD PTR [r12+0x68],0x0
   59613:	call   4bdc0 <rpl_free>
   59618:	mov    rdi,r15
   5961b:	mov    QWORD PTR [r12+0x20],0x0
   59624:	call   4d890 <re_string_destruct>
   59629:	mov    eax,DWORD PTR [rsp+0x4c]
   5962d:	test   eax,eax
   5962f:	je     591ab <re_compile_internal+0x8cb>
   59635:	jmp    59190 <re_compile_internal+0x8b0>
   5963a:	nop    WORD PTR [rax+rax*1+0x0]
   59640:	xor    r8d,r8d
   59643:	xor    ebx,ebx
   59645:	xor    r12d,r12d
   59648:	jmp    58f46 <re_compile_internal+0x666>
   5964d:	nop    DWORD PTR [rax]
   59650:	mov    rdi,r15
   59653:	call   4c7b0 <build_wcs_buffer>
   59658:	mov    DWORD PTR [rsp+0x4c],0x0
   59660:	jmp    58c47 <re_compile_internal+0x367>
   59665:	nop    DWORD PTR [rax]
   59668:	cmp    QWORD PTR [r14+0x28],0x0
   5966d:	jne    59473 <re_compile_internal+0xb93>
   59673:	mov    r10,QWORD PTR [rbp+0x10]
   59677:	test   r10,r10
   5967a:	je     599d0 <re_compile_internal+0x10f0>
   59680:	mov    r11,QWORD PTR [rbp+0x0]
   59684:	xor    ebx,ebx
   59686:	xor    r8d,r8d
   59689:	lea    r9,[rip+0x16afc]        # 7018c <quoting_style_vals+0x4ac>
   59690:	movabs rdx,0x1000000010001
   5969a:	mov    esi,0x1
   5969f:	mov    rdi,r11
   596a2:	cmp    BYTE PTR [rdi+0x8],0xc
   596a6:	ja     ccc1 <re_compile_internal.cold>
   596ac:	movzx  ecx,BYTE PTR [rdi+0x8]
   596b0:	movsxd rcx,DWORD PTR [r9+rcx*4]
   596b4:	add    rcx,r9
   596b7:	notrack jmp rcx
   596ba:	nop    WORD PTR [rax+rax*1+0x0]
   596c0:	mov    r12,QWORD PTR [rsp+0x8]
   596c5:	mov    r13,QWORD PTR [rsp+0x20]
   596ca:	mov    ecx,0x1
   596cf:	mov    rsi,rbp
   596d2:	mov    rdx,r12
   596d5:	mov    rdi,r13
   596d8:	call   4ee30 <re_acquire_state_context>
   596dd:	mov    ecx,0x2
   596e2:	mov    rdx,r12
   596e5:	mov    rsi,rbp
   596e8:	mov    QWORD PTR [rbp+0x50],rax
   596ec:	mov    rdi,r13
   596ef:	call   4ee30 <re_acquire_state_context>
   596f4:	mov    ecx,0x6
   596f9:	mov    rdx,r12
   596fc:	mov    rsi,rbp
   596ff:	mov    QWORD PTR [rbp+0x58],rax
   59703:	mov    rdi,r13
   59706:	call   4ee30 <re_acquire_state_context>
   5970b:	cmp    QWORD PTR [rbp+0x50],0x0
   59710:	mov    QWORD PTR [rbp+0x60],rax
   59714:	je     59730 <re_compile_internal+0xe50>
   59716:	cmp    QWORD PTR [rbp+0x58],0x0
   5971b:	je     59730 <re_compile_internal+0xe50>
   5971d:	test   rax,rax
   59720:	jne    595bf <re_compile_internal+0xcdf>
   59726:	nop    WORD PTR cs:[rax+rax*1+0x0]
   59730:	mov    ebx,DWORD PTR [rsp+0x50]
   59734:	jmp    595c9 <re_compile_internal+0xce9>
   59739:	nop    DWORD PTR [rax+0x0]
   59740:	mov    rbx,rdx
   59743:	jmp    58ee2 <re_compile_internal+0x602>
   59748:	nop    DWORD PTR [rax+rax*1+0x0]
   59750:	mov    QWORD PTR [rbp+0x8],0x1
   59758:	mov    QWORD PTR [rax],r14
   5975b:	jmp    58edd <re_compile_internal+0x5fd>
   59760:	mov    rax,QWORD PTR [r13+0x20]
   59764:	mov    r15,QWORD PTR [rax+0x38]
   59768:	jmp    59063 <re_compile_internal+0x783>
   5976d:	nop    DWORD PTR [rax]
   59770:	mov    rax,QWORD PTR [r13+0x20]
   59774:	mov    r14,QWORD PTR [rax+0x38]
   59778:	jmp    5904e <re_compile_internal+0x76e>
   5977d:	nop    DWORD PTR [rax]
   59780:	mov    rdi,r15
   59783:	call   4d040 <build_upper_buffer>
   59788:	mov    DWORD PTR [rsp+0x4c],0x0
   59790:	jmp    58c47 <re_compile_internal+0x367>
   59795:	nop    DWORD PTR [rax]
   59798:	mov    rdi,rbp
   5979b:	mov    esi,0xe8
   597a0:	call   ca20 <realloc@plt>
   597a5:	mov    rbp,rax
   597a8:	test   rax,rax
   597ab:	je     59a0b <re_compile_internal+0x112b>
   597b1:	mov    QWORD PTR [r14+0x8],0xe8
   597b9:	mov    QWORD PTR [r14],rax
   597bc:	jmp    58941 <re_compile_internal+0x61>
   597c1:	nop    DWORD PTR [rax+0x0]
   597c8:	xor    r15d,r15d
   597cb:	mov    esi,0x1
   597d0:	jmp    589cc <re_compile_internal+0xec>
   597d5:	nop    DWORD PTR [rax]
   597d8:	mov    rdi,QWORD PTR [r12+0xe0]
   597e0:	call   4bdc0 <rpl_free>
   597e5:	mov    QWORD PTR [r12+0xe0],0x0
   597f1:	jmp    58e3b <re_compile_internal+0x55b>
   597f6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   59800:	test   rax,rax
   59803:	je     599c0 <re_compile_internal+0x10e0>
   59809:	lea    rax,[rsp+0x60]
   5980e:	lea    r12,[rbx+0x70]
   59812:	pxor   xmm0,xmm0
   59816:	xor    ecx,ecx
   59818:	lea    rsi,[rbx+0x80]
   5981f:	mov    r8,rax
   59822:	xor    edx,edx
   59824:	mov    rdi,r12
   59827:	mov    QWORD PTR [rsp+0x18],rsi
   5982c:	movaps XMMWORD PTR [rsp+0x60],xmm0
   59831:	mov    QWORD PTR [rsp+0x8],rax
   59836:	mov    BYTE PTR [rsp+0x68],0x2
   5983b:	call   4e750 <create_token_tree.isra.0>
   59840:	mov    rsi,QWORD PTR [rsp+0x18]
   59845:	mov    rbx,rax
   59848:	jmp    58cee <re_compile_internal+0x40e>
   5984d:	nop    DWORD PTR [rax]
   59850:	mov    DWORD PTR [rsp+0x4c],0xc
   59858:	mov    QWORD PTR [rbp+0x68],0x0
   59860:	jmp    591e0 <re_compile_internal+0x900>
   59865:	nop    DWORD PTR [rax]
   59868:	mov    DWORD PTR [rsp+0x4c],0x0
   59870:	jmp    58c47 <re_compile_internal+0x367>
   59875:	nop    DWORD PTR [rax]
   59878:	cmp    BYTE PTR [rdi],0x0
   5987b:	cmovs  r13d,eax
   5987f:	add    r8,0x1
   59883:	add    rdi,0x10
   59887:	cmp    r8,r10
   5988a:	jne    596a2 <re_compile_internal+0xdc2>
   59890:	shl    r8,0x4
   59894:	or     r13b,bl
   59897:	lea    rax,[r8+r11*1]
   5989b:	jne    598bf <re_compile_internal+0xfdf>
   5989d:	jmp    599d0 <re_compile_internal+0x10f0>
   598a2:	nop    WORD PTR [rax+rax*1+0x0]
   598a8:	cmp    dl,0x5
   598ab:	jne    598b2 <re_compile_internal+0xfd2>
   598ad:	mov    BYTE PTR [r11+0x8],0x7
   598b2:	add    r11,0x10
   598b6:	cmp    rax,r11
   598b9:	je     599d2 <re_compile_internal+0x10f2>
   598bf:	movzx  edx,BYTE PTR [r11+0x8]
   598c4:	cmp    dl,0x1
   598c7:	jne    598a8 <re_compile_internal+0xfc8>
   598c9:	cmp    BYTE PTR [r11],0x0
   598cd:	jns    598b2 <re_compile_internal+0xfd2>
   598cf:	and    BYTE PTR [r11+0xa],0xdf
   598d4:	jmp    598b2 <re_compile_internal+0xfd2>
   598d6:	nop    WORD PTR cs:[rax+rax*1+0x0]
   598e0:	mov    ecx,DWORD PTR [rdi]
   598e2:	cmp    ecx,0x40
   598e5:	ja     5998f <re_compile_internal+0x10af>
   598eb:	cmp    ecx,0xf
   598ee:	jbe    59473 <re_compile_internal+0xb93>
   598f4:	sub    ecx,0x10
   598f7:	mov    r12,rsi
   598fa:	shl    r12,cl
   598fd:	test   r12,rdx
   59900:	je     59473 <re_compile_internal+0xb93>
   59906:	jmp    5987f <re_compile_internal+0xf9f>
   5990b:	nop    DWORD PTR [rax+rax*1+0x0]
   59910:	mov    rcx,QWORD PTR [rdi]
   59913:	cmp    QWORD PTR [rcx+0x10],0x0
   59918:	jne    59473 <re_compile_internal+0xb93>
   5991e:	cmp    QWORD PTR [rcx+0x18],0x0
   59923:	je     5987f <re_compile_internal+0xf9f>
   59929:	jmp    59473 <re_compile_internal+0xb93>
   5992e:	xchg   ax,ax
   59930:	mov    ebx,eax
   59932:	jmp    5987f <re_compile_internal+0xf9f>
   59937:	nop    WORD PTR [rax+rax*1+0x0]
   59940:	mov    rbp,QWORD PTR [rsp+0x18]
   59945:	mov    r14,QWORD PTR [rsp+0x30]
   5994a:	mov    r15,QWORD PTR [rsp+0x38]
   5994f:	jmp    59415 <re_compile_internal+0xb35>
   59954:	nop    DWORD PTR [rax+0x0]
   59958:	mov    rbx,rbp
   5995b:	mov    r14,QWORD PTR [rsp+0x30]
   59960:	mov    rbp,QWORD PTR [rsp+0x18]
   59965:	mov    eax,0xc
   5996a:	mov    QWORD PTR [rbx+0x8],0x0
   59972:	mov    r15,QWORD PTR [rsp+0x38]
   59977:	mov    QWORD PTR [rbx],0x0
   5997e:	jmp    58ba8 <re_compile_internal+0x2c8>
   59983:	nop    DWORD PTR [rax+rax*1+0x0]
   59988:	mov    ebx,eax
   5998a:	jmp    595c9 <re_compile_internal+0xce9>
   5998f:	cmp    ecx,0x80
   59995:	je     5987f <re_compile_internal+0xf9f>
   5999b:	jmp    59473 <re_compile_internal+0xb93>
   599a0:	mov    rcx,rax
   599a3:	jmp    58c2f <re_compile_internal+0x34f>
   599a8:	nop    DWORD PTR [rax+rax*1+0x0]
   599b0:	mov    DWORD PTR [rsp+0x4c],0xc
   599b8:	mov    r12,QWORD PTR [r14]
   599bb:	jmp    591e0 <re_compile_internal+0x900>
   599c0:	mov    QWORD PTR [rbp+0x68],0x0
   599c8:	mov    r12,QWORD PTR [r14]
   599cb:	jmp    591e0 <re_compile_internal+0x900>
   599d0:	xor    ebx,ebx
   599d2:	cmp    QWORD PTR [rbp+0x98],0x0
   599da:	movzx  edx,BYTE PTR [rbp+0xb0]
   599e1:	mov    DWORD PTR [rbp+0xb4],0x1
   599eb:	setg   al
   599ee:	or     ebx,eax
   599f0:	and    edx,0xfffffff9
   599f3:	lea    eax,[rbx+rbx*1]
   599f6:	and    eax,0x6
   599f9:	or     eax,edx
   599fb:	mov    BYTE PTR [rbp+0xb0],al
   59a01:	jmp    59473 <re_compile_internal+0xb93>
   59a06:	call   c7b0 <__stack_chk_fail@plt>
   59a0b:	mov    eax,0xc
   59a10:	jmp    591ab <re_compile_internal+0x8cb>
   59a15:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000059a20 <rpl_re_compile_pattern>:
   59a20:	endbr64 
   59a24:	sub    rsp,0x8
   59a28:	mov    rcx,QWORD PTR [rip+0x30a21]        # 8a450 <rpl_re_syntax_options>
   59a2f:	mov    r8,rdi
   59a32:	mov    rdi,rdx
   59a35:	movzx  edx,BYTE PTR [rdx+0x38]
   59a39:	mov    rax,rcx
   59a3c:	shr    rax,0x19
   59a40:	and    edx,0x6f
   59a43:	and    eax,0x1
   59a46:	shl    eax,0x4
   59a49:	or     eax,0xffffff80
   59a4c:	or     eax,edx
   59a4e:	mov    rdx,rsi
   59a51:	mov    rsi,r8
   59a54:	mov    BYTE PTR [rdi+0x38],al
   59a57:	call   588e0 <re_compile_internal>
   59a5c:	test   eax,eax
   59a5e:	je     59a88 <rpl_re_compile_pattern+0x68>
   59a60:	lea    rdx,[rip+0x16779]        # 701e0 <__re_error_msgid_idx>
   59a67:	cdqe   
   59a69:	lea    rsi,[rip+0x16810]        # 70280 <__re_error_msgid>
   59a70:	xor    edi,edi
   59a72:	add    rsi,QWORD PTR [rdx+rax*8]
   59a76:	mov    edx,0x5
   59a7b:	add    rsp,0x8
   59a7f:	jmp    c780 <dcgettext@plt>
   59a84:	nop    DWORD PTR [rax+0x0]
   59a88:	xor    eax,eax
   59a8a:	add    rsp,0x8
   59a8e:	ret    
   59a8f:	nop

0000000000059a90 <rpl_re_set_syntax>:
   59a90:	endbr64 
   59a94:	mov    rax,QWORD PTR [rip+0x309b5]        # 8a450 <rpl_re_syntax_options>
   59a9b:	mov    QWORD PTR [rip+0x309ae],rdi        # 8a450 <rpl_re_syntax_options>
   59aa2:	ret    
   59aa3:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   59aae:	xchg   ax,ax

0000000000059ab0 <rpl_re_compile_fastmap>:
   59ab0:	endbr64 
   59ab4:	push   r12
   59ab6:	xor    eax,eax
   59ab8:	push   rbp
   59ab9:	push   rbx
   59aba:	mov    r12,QWORD PTR [rdi+0x20]
   59abe:	mov    rbx,rdi
   59ac1:	mov    rbp,QWORD PTR [rdi]
   59ac4:	lea    rdi,[r12+0x8]
   59ac9:	mov    rcx,r12
   59acc:	mov    QWORD PTR [r12],0x0
   59ad4:	mov    QWORD PTR [r12+0xf8],0x0
   59ae0:	and    rdi,0xfffffffffffffff8
   59ae4:	sub    rcx,rdi
   59ae7:	add    ecx,0x100
   59aed:	shr    ecx,0x3
   59af0:	rep stos QWORD PTR es:[rdi],rax
   59af3:	mov    rcx,r12
   59af6:	mov    rdi,rbx
   59af9:	mov    rsi,QWORD PTR [rbp+0x48]
   59afd:	lea    rdx,[rsi+0x18]
   59b01:	add    rsi,0x10
   59b05:	call   51dd0 <re_compile_fastmap_iter.isra.0>
   59b0a:	mov    rsi,QWORD PTR [rbp+0x50]
   59b0e:	cmp    QWORD PTR [rbp+0x48],rsi
   59b12:	je     59b2b <rpl_re_compile_fastmap+0x7b>
   59b14:	lea    rdx,[rsi+0x18]
   59b18:	mov    rcx,r12
   59b1b:	add    rsi,0x10
   59b1f:	mov    rdi,rbx
   59b22:	call   51dd0 <re_compile_fastmap_iter.isra.0>
   59b27:	mov    rsi,QWORD PTR [rbp+0x48]
   59b2b:	mov    rax,QWORD PTR [rbp+0x58]
   59b2f:	cmp    rax,rsi
   59b32:	je     59b4b <rpl_re_compile_fastmap+0x9b>
   59b34:	lea    rsi,[rax+0x10]
   59b38:	lea    rdx,[rax+0x18]
   59b3c:	mov    rcx,r12
   59b3f:	mov    rdi,rbx
   59b42:	call   51dd0 <re_compile_fastmap_iter.isra.0>
   59b47:	mov    rsi,QWORD PTR [rbp+0x48]
   59b4b:	mov    rax,QWORD PTR [rbp+0x60]
   59b4f:	cmp    rax,rsi
   59b52:	je     59b67 <rpl_re_compile_fastmap+0xb7>
   59b54:	lea    rdx,[rax+0x18]
   59b58:	lea    rsi,[rax+0x10]
   59b5c:	mov    rcx,r12
   59b5f:	mov    rdi,rbx
   59b62:	call   51dd0 <re_compile_fastmap_iter.isra.0>
   59b67:	or     BYTE PTR [rbx+0x38],0x8
   59b6b:	xor    eax,eax
   59b6d:	pop    rbx
   59b6e:	pop    rbp
   59b6f:	pop    r12
   59b71:	ret    
   59b72:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   59b7d:	nop    DWORD PTR [rax]

0000000000059b80 <re_search_stub>:
   59b80:	push   r15
   59b82:	mov    rax,r8
   59b85:	add    r8,rcx
   59b88:	push   r14
   59b8a:	push   r13
   59b8c:	push   r12
   59b8e:	push   rbp
   59b8f:	push   rbx
   59b90:	mov    rbx,rdi
   59b93:	sub    rsp,0x38
   59b97:	mov    edi,DWORD PTR [rsp+0x78]
   59b9b:	mov    r13,QWORD PTR [rsp+0x70]
   59ba0:	mov    DWORD PTR [rsp+0x4],edi
   59ba4:	test   rcx,rcx
   59ba7:	js     59ea0 <re_search_stub+0x320>
   59bad:	mov    r12,rcx
   59bb0:	cmp    rcx,rdx
   59bb3:	jg     59ea0 <re_search_stub+0x320>
   59bb9:	cmp    r8,rdx
   59bbc:	jg     59e20 <re_search_stub+0x2a0>
   59bc2:	test   rax,rax
   59bc5:	js     59bd0 <re_search_stub+0x50>
   59bc7:	cmp    rcx,r8
   59bca:	jg     59e20 <re_search_stub+0x2a0>
   59bd0:	test   r8,r8
   59bd3:	js     59e80 <re_search_stub+0x300>
   59bd9:	test   rax,rax
   59bdc:	jns    59be7 <re_search_stub+0x67>
   59bde:	cmp    r12,r8
   59be1:	jle    59e80 <re_search_stub+0x300>
   59be7:	movzx  eax,BYTE PTR [rbx+0x38]
   59beb:	mov    r15d,eax
   59bee:	shr    r15b,0x5
   59bf2:	and    r15d,0x3
   59bf6:	cmp    r8,r12
   59bf9:	jle    59c0a <re_search_stub+0x8a>
   59bfb:	cmp    QWORD PTR [rbx+0x20],0x0
   59c00:	je     59c0a <re_search_stub+0x8a>
   59c02:	test   al,0x8
   59c04:	je     59de0 <re_search_stub+0x260>
   59c0a:	test   al,0x10
   59c0c:	jne    59dc0 <re_search_stub+0x240>
   59c12:	test   r13,r13
   59c15:	je     59dc0 <re_search_stub+0x240>
   59c1b:	and    eax,0x6
   59c1e:	mov    rdi,QWORD PTR [rbx+0x30]
   59c22:	cmp    al,0x4
   59c24:	je     59da0 <re_search_stub+0x220>
   59c2a:	lea    rcx,[rdi+0x1]
   59c2e:	mov    r14,rcx
   59c31:	mov    rdi,rcx
   59c34:	shl    rdi,0x4
   59c38:	mov    QWORD PTR [rsp+0x28],r9
   59c3d:	mov    QWORD PTR [rsp+0x20],rdx
   59c42:	mov    QWORD PTR [rsp+0x18],rsi
   59c47:	mov    QWORD PTR [rsp+0x10],r8
   59c4c:	mov    QWORD PTR [rsp+0x8],rcx
   59c51:	call   c0e0 <malloc@plt>
   59c56:	mov    rbp,rax
   59c59:	test   rax,rax
   59c5c:	je     59eb0 <re_search_stub+0x330>
   59c62:	sub    rsp,0x8
   59c66:	mov    rdi,rbx
   59c69:	push   r15
   59c6b:	push   rax
   59c6c:	mov    rcx,QWORD PTR [rsp+0x20]
   59c71:	push   rcx
   59c72:	mov    r9,QWORD PTR [rsp+0x48]
   59c77:	mov    rcx,r12
   59c7a:	mov    r8,QWORD PTR [rsp+0x30]
   59c7f:	mov    rdx,QWORD PTR [rsp+0x40]
   59c84:	mov    rsi,QWORD PTR [rsp+0x38]
   59c89:	call   54580 <re_search_internal>
   59c8e:	add    rsp,0x20
   59c92:	test   eax,eax
   59c94:	je     59cc8 <re_search_stub+0x148>
   59c96:	mov    r12,0xffffffffffffffff
   59c9d:	cmp    eax,0x1
   59ca0:	je     59ca9 <re_search_stub+0x129>
   59ca2:	mov    r12,0xfffffffffffffffe
   59ca9:	mov    rdi,rbp
   59cac:	call   4bdc0 <rpl_free>
   59cb1:	add    rsp,0x38
   59cb5:	mov    rax,r12
   59cb8:	pop    rbx
   59cb9:	pop    rbp
   59cba:	pop    r12
   59cbc:	pop    r13
   59cbe:	pop    r14
   59cc0:	pop    r15
   59cc2:	ret    
   59cc3:	nop    DWORD PTR [rax+rax*1+0x0]
   59cc8:	test   r13,r13
   59ccb:	je     59d7d <re_search_stub+0x1fd>
   59cd1:	movzx  eax,BYTE PTR [rbx+0x38]
   59cd5:	lea    r15,[r14+0x1]
   59cd9:	shr    al,1
   59cdb:	and    eax,0x3
   59cde:	je     59e30 <re_search_stub+0x2b0>
   59ce4:	mov    r12d,0x2
   59cea:	cmp    eax,0x1
   59ced:	je     59ec0 <re_search_stub+0x340>
   59cf3:	test   r14,r14
   59cf6:	jle    59f20 <re_search_stub+0x3a0>
   59cfc:	mov    r8,QWORD PTR [r13+0x8]
   59d00:	mov    rdi,QWORD PTR [r13+0x10]
   59d04:	mov    rdx,r14
   59d07:	xor    eax,eax
   59d09:	lea    rsi,[r14*8+0x0]
   59d11:	nop    DWORD PTR [rax+0x0]
   59d18:	mov    rcx,QWORD PTR [rbp+rax*2+0x0]
   59d1d:	mov    QWORD PTR [r8+rax*1],rcx
   59d21:	mov    rcx,QWORD PTR [rbp+rax*2+0x8]
   59d26:	mov    QWORD PTR [rdi+rax*1],rcx
   59d2a:	add    rax,0x8
   59d2e:	cmp    rax,rsi
   59d31:	jne    59d18 <re_search_stub+0x198>
   59d33:	cmp    QWORD PTR [r13+0x0],rdx
   59d37:	jbe    59d65 <re_search_stub+0x1e5>
   59d39:	mov    rax,QWORD PTR [r13+0x10]
   59d3d:	mov    rcx,QWORD PTR [r13+0x8]
   59d41:	nop    DWORD PTR [rax+0x0]
   59d48:	add    r14,0x1
   59d4c:	mov    QWORD PTR [rax+rdx*8],0xffffffffffffffff
   59d54:	mov    QWORD PTR [rcx+rdx*8],0xffffffffffffffff
   59d5c:	mov    rdx,r14
   59d5f:	cmp    QWORD PTR [r13+0x0],r14
   59d63:	ja     59d48 <re_search_stub+0x1c8>
   59d65:	movzx  eax,BYTE PTR [rbx+0x38]
   59d69:	add    r12d,r12d
   59d6c:	and    eax,0xfffffff9
   59d6f:	or     eax,r12d
   59d72:	mov    BYTE PTR [rbx+0x38],al
   59d75:	test   al,0x6
   59d77:	je     59ca2 <re_search_stub+0x122>
   59d7d:	cmp    BYTE PTR [rsp+0x4],0x0
   59d82:	mov    r12,QWORD PTR [rbp+0x0]
   59d86:	je     59ca9 <re_search_stub+0x129>
   59d8c:	mov    rax,QWORD PTR [rbp+0x8]
   59d90:	sub    rax,r12
   59d93:	mov    r12,rax
   59d96:	jmp    59ca9 <re_search_stub+0x129>
   59d9b:	nop    DWORD PTR [rax+rax*1+0x0]
   59da0:	mov    rcx,QWORD PTR [r13+0x0]
   59da4:	cmp    rcx,rdi
   59da7:	ja     59c2a <re_search_stub+0xaa>
   59dad:	mov    r14,rcx
   59db0:	test   rcx,rcx
   59db3:	jg     59c31 <re_search_stub+0xb1>
   59db9:	nop    DWORD PTR [rax+0x0]
   59dc0:	mov    edi,0x10
   59dc5:	mov    ecx,0x1
   59dca:	mov    r14d,0x1
   59dd0:	xor    r13d,r13d
   59dd3:	jmp    59c38 <re_search_stub+0xb8>
   59dd8:	nop    DWORD PTR [rax+rax*1+0x0]
   59de0:	mov    rdi,rbx
   59de3:	mov    QWORD PTR [rsp+0x20],r9
   59de8:	mov    QWORD PTR [rsp+0x18],rdx
   59ded:	mov    QWORD PTR [rsp+0x10],rsi
   59df2:	mov    QWORD PTR [rsp+0x8],r8
   59df7:	call   59ab0 <rpl_re_compile_fastmap>
   59dfc:	movzx  eax,BYTE PTR [rbx+0x38]
   59e00:	mov    r9,QWORD PTR [rsp+0x20]
   59e05:	mov    rdx,QWORD PTR [rsp+0x18]
   59e0a:	mov    rsi,QWORD PTR [rsp+0x10]
   59e0f:	mov    r8,QWORD PTR [rsp+0x8]
   59e14:	jmp    59c0a <re_search_stub+0x8a>
   59e19:	nop    DWORD PTR [rax+0x0]
   59e20:	mov    r8,rdx
   59e23:	jmp    59be7 <re_search_stub+0x67>
   59e28:	nop    DWORD PTR [rax+rax*1+0x0]
   59e30:	lea    rdi,[r15*8+0x0]
   59e38:	mov    QWORD PTR [rsp+0x8],rdi
   59e3d:	call   c0e0 <malloc@plt>
   59e42:	mov    rdi,QWORD PTR [rsp+0x8]
   59e47:	test   rax,rax
   59e4a:	mov    QWORD PTR [r13+0x8],rax
   59e4e:	mov    r12,rax
   59e51:	je     59f32 <re_search_stub+0x3b2>
   59e57:	call   c0e0 <malloc@plt>
   59e5c:	mov    QWORD PTR [r13+0x10],rax
   59e60:	test   rax,rax
   59e63:	je     59f2a <re_search_stub+0x3aa>
   59e69:	mov    QWORD PTR [r13+0x0],r15
   59e6d:	mov    r12d,0x1
   59e73:	jmp    59cf3 <re_search_stub+0x173>
   59e78:	nop    DWORD PTR [rax+rax*1+0x0]
   59e80:	movzx  eax,BYTE PTR [rbx+0x38]
   59e84:	xor    r8d,r8d
   59e87:	mov    r15d,eax
   59e8a:	shr    r15b,0x5
   59e8e:	and    r15d,0x3
   59e92:	jmp    59c0a <re_search_stub+0x8a>
   59e97:	nop    WORD PTR [rax+rax*1+0x0]
   59ea0:	mov    r12,0xffffffffffffffff
   59ea7:	jmp    59cb1 <re_search_stub+0x131>
   59eac:	nop    DWORD PTR [rax+0x0]
   59eb0:	mov    r12,0xfffffffffffffffe
   59eb7:	jmp    59cb1 <re_search_stub+0x131>
   59ebc:	nop    DWORD PTR [rax+0x0]
   59ec0:	mov    r12d,0x1
   59ec6:	cmp    QWORD PTR [r13+0x0],r15
   59eca:	jae    59cf3 <re_search_stub+0x173>
   59ed0:	mov    rdi,QWORD PTR [r13+0x8]
   59ed4:	lea    rsi,[r15*8+0x0]
   59edc:	mov    QWORD PTR [rsp+0x10],rsi
   59ee1:	call   ca20 <realloc@plt>
   59ee6:	test   rax,rax
   59ee9:	mov    QWORD PTR [rsp+0x8],rax
   59eee:	je     59f32 <re_search_stub+0x3b2>
   59ef0:	mov    rdi,QWORD PTR [r13+0x10]
   59ef4:	mov    rsi,QWORD PTR [rsp+0x10]
   59ef9:	call   ca20 <realloc@plt>
   59efe:	mov    r8,QWORD PTR [rsp+0x8]
   59f03:	test   rax,rax
   59f06:	je     59f3a <re_search_stub+0x3ba>
   59f08:	mov    QWORD PTR [r13+0x8],r8
   59f0c:	mov    QWORD PTR [r13+0x10],rax
   59f10:	mov    QWORD PTR [r13+0x0],r15
   59f14:	jmp    59cf3 <re_search_stub+0x173>
   59f19:	nop    DWORD PTR [rax+0x0]
   59f20:	xor    edx,edx
   59f22:	xor    r14d,r14d
   59f25:	jmp    59d33 <re_search_stub+0x1b3>
   59f2a:	mov    rdi,r12
   59f2d:	call   4bdc0 <rpl_free>
   59f32:	xor    r12d,r12d
   59f35:	jmp    59d65 <re_search_stub+0x1e5>
   59f3a:	mov    rdi,r8
   59f3d:	xor    r12d,r12d
   59f40:	call   4bdc0 <rpl_free>
   59f45:	jmp    59d65 <re_search_stub+0x1e5>
   59f4a:	nop    WORD PTR [rax+rax*1+0x0]

0000000000059f50 <re_search_2_stub>:
   59f50:	push   r15
   59f52:	push   r14
   59f54:	mov    r14,r9
   59f57:	push   r13
   59f59:	mov    r13,rdi
   59f5c:	push   r12
   59f5e:	push   rbp
   59f5f:	mov    rbp,rcx
   59f62:	push   rbx
   59f63:	mov    rbx,rdx
   59f66:	mov    rdx,r8
   59f69:	shr    rdx,0x3f
   59f6d:	mov    edi,edx
   59f6f:	sub    rsp,0x28
   59f73:	mov    r9,QWORD PTR [rsp+0x70]
   59f78:	mov    ecx,DWORD PTR [rsp+0x78]
   59f7c:	mov    rax,r9
   59f7f:	shr    rax,0x3f
   59f83:	or     dil,al
   59f86:	jne    5a058 <re_search_2_stub+0x108>
   59f8c:	test   rbx,rbx
   59f8f:	js     5a058 <re_search_2_stub+0x108>
   59f95:	mov    r10,rbx
   59f98:	mov    r12,r8
   59f9b:	add    r10,r8
   59f9e:	jo     5a058 <re_search_2_stub+0x108>
   59fa4:	test   r8,r8
   59fa7:	je     5a068 <re_search_2_stub+0x118>
   59fad:	mov    QWORD PTR [rsp+0x8],rsi
   59fb2:	xor    r15d,r15d
   59fb5:	test   rbx,rbx
   59fb8:	jne    5a000 <re_search_2_stub+0xb0>
   59fba:	movzx  ecx,cl
   59fbd:	mov    rdx,r10
   59fc0:	mov    rsi,rbp
   59fc3:	mov    rdi,r13
   59fc6:	push   rcx
   59fc7:	mov    rcx,r14
   59fca:	push   QWORD PTR [rsp+0x70]
   59fce:	mov    r8,QWORD PTR [rsp+0x70]
   59fd3:	call   59b80 <re_search_stub>
   59fd8:	mov    rdi,r15
   59fdb:	mov    r12,rax
   59fde:	call   4bdc0 <rpl_free>
   59fe3:	pop    rax
   59fe4:	pop    rdx
   59fe5:	add    rsp,0x28
   59fe9:	mov    rax,r12
   59fec:	pop    rbx
   59fed:	pop    rbp
   59fee:	pop    r12
   59ff0:	pop    r13
   59ff2:	pop    r14
   59ff4:	pop    r15
   59ff6:	ret    
   59ff7:	nop    WORD PTR [rax+rax*1+0x0]
   5a000:	mov    rdi,r10
   5a003:	mov    DWORD PTR [rsp+0x1c],ecx
   5a007:	mov    QWORD PTR [rsp+0x70],r9
   5a00c:	mov    QWORD PTR [rsp+0x10],r10
   5a011:	call   c0e0 <malloc@plt>
   5a016:	mov    r15,rax
   5a019:	test   rax,rax
   5a01c:	je     5a058 <re_search_2_stub+0x108>
   5a01e:	mov    rsi,QWORD PTR [rsp+0x8]
   5a023:	mov    rdx,rbx
   5a026:	mov    rdi,rax
   5a029:	call   cb30 <memcpy@plt>
   5a02e:	mov    rsi,rbp
   5a031:	lea    rdi,[r15+rbx*1]
   5a035:	mov    rdx,r12
   5a038:	call   cb30 <memcpy@plt>
   5a03d:	mov    rbp,r15
   5a040:	mov    r10,QWORD PTR [rsp+0x10]
   5a045:	mov    r9,QWORD PTR [rsp+0x70]
   5a04a:	mov    ecx,DWORD PTR [rsp+0x1c]
   5a04e:	jmp    59fba <re_search_2_stub+0x6a>
   5a053:	nop    DWORD PTR [rax+rax*1+0x0]
   5a058:	mov    r12,0xfffffffffffffffe
   5a05f:	jmp    59fe5 <re_search_2_stub+0x95>
   5a061:	nop    DWORD PTR [rax+0x0]
   5a068:	mov    rbp,rsi
   5a06b:	xor    r15d,r15d
   5a06e:	jmp    59fba <re_search_2_stub+0x6a>
   5a073:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5a07e:	xchg   ax,ax

000000000005a080 <rpl_regcomp>:
   5a080:	endbr64 
   5a084:	mov    eax,edx
   5a086:	push   r14
   5a088:	mov    r14,rsi
   5a08b:	push   r13
   5a08d:	and    eax,0x1
   5a090:	push   r12
   5a092:	cmp    eax,0x1
   5a095:	push   rbp
   5a096:	sbb    r13,r13
   5a099:	mov    rbp,rdi
   5a09c:	push   rbx
   5a09d:	and    r13d,0xfd4fca
   5a0a4:	mov    ebx,edx
   5a0a6:	mov    QWORD PTR [rdi],0x0
   5a0ad:	add    r13,0x3b2fc
   5a0b4:	mov    QWORD PTR [rdi+0x8],0x0
   5a0bc:	mov    QWORD PTR [rdi+0x10],0x0
   5a0c4:	mov    edi,0x100
   5a0c9:	call   c0e0 <malloc@plt>
   5a0ce:	mov    QWORD PTR [rbp+0x20],rax
   5a0d2:	test   rax,rax
   5a0d5:	je     5a188 <rpl_regcomp+0x108>
   5a0db:	mov    r12,rbx
   5a0de:	xor    eax,eax
   5a0e0:	shl    r12,0x15
   5a0e4:	and    r12d,0x400000
   5a0eb:	or     r12,r13
   5a0ee:	test   bl,0x4
   5a0f1:	jne    5a150 <rpl_regcomp+0xd0>
   5a0f3:	shr    ebx,0x3
   5a0f6:	shl    eax,0x7
   5a0f9:	mov    QWORD PTR [rbp+0x28],0x0
   5a101:	mov    rdi,r14
   5a104:	and    ebx,0x1
   5a107:	shl    ebx,0x4
   5a10a:	or     ebx,eax
   5a10c:	movzx  eax,BYTE PTR [rbp+0x38]
   5a110:	and    eax,0x6f
   5a113:	or     ebx,eax
   5a115:	mov    BYTE PTR [rbp+0x38],bl
   5a118:	call   c310 <strlen@plt>
   5a11d:	mov    rcx,r12
   5a120:	mov    rsi,r14
   5a123:	mov    rdi,rbp
   5a126:	mov    rdx,rax
   5a129:	call   588e0 <re_compile_internal>
   5a12e:	mov    r12d,eax
   5a131:	cmp    eax,0x10
   5a134:	je     5a168 <rpl_regcomp+0xe8>
   5a136:	test   eax,eax
   5a138:	jne    5a16e <rpl_regcomp+0xee>
   5a13a:	mov    rdi,rbp
   5a13d:	call   59ab0 <rpl_re_compile_fastmap>
   5a142:	pop    rbx
   5a143:	mov    eax,r12d
   5a146:	pop    rbp
   5a147:	pop    r12
   5a149:	pop    r13
   5a14b:	pop    r14
   5a14d:	ret    
   5a14e:	xchg   ax,ax
   5a150:	and    r12,0xffffffffffffffbf
   5a154:	mov    eax,0x1
   5a159:	or     r12,0x100
   5a160:	jmp    5a0f3 <rpl_regcomp+0x73>
   5a162:	nop    WORD PTR [rax+rax*1+0x0]
   5a168:	mov    r12d,0x8
   5a16e:	mov    rdi,QWORD PTR [rbp+0x20]
   5a172:	call   4bdc0 <rpl_free>
   5a177:	mov    QWORD PTR [rbp+0x20],0x0
   5a17f:	jmp    5a142 <rpl_regcomp+0xc2>
   5a181:	nop    DWORD PTR [rax+0x0]
   5a188:	mov    r12d,0xc
   5a18e:	pop    rbx
   5a18f:	pop    rbp
   5a190:	mov    eax,r12d
   5a193:	pop    r12
   5a195:	pop    r13
   5a197:	pop    r14
   5a199:	ret    
   5a19a:	nop    WORD PTR [rax+rax*1+0x0]

000000000005a1a0 <rpl_regerror>:
   5a1a0:	endbr64 
   5a1a4:	push   r13
   5a1a6:	push   r12
   5a1a8:	push   rbp
   5a1a9:	push   rbx
   5a1aa:	sub    rsp,0x8
   5a1ae:	cmp    edi,0x10
   5a1b1:	ja     ccc6 <rpl_regerror.cold>
   5a1b7:	movsxd rdi,edi
   5a1ba:	lea    rax,[rip+0x1601f]        # 701e0 <__re_error_msgid_idx>
   5a1c1:	mov    r13,rdx
   5a1c4:	mov    rbx,rcx
   5a1c7:	mov    edx,0x5
   5a1cc:	lea    rsi,[rip+0x160ad]        # 70280 <__re_error_msgid>
   5a1d3:	add    rsi,QWORD PTR [rax+rdi*8]
   5a1d7:	xor    edi,edi
   5a1d9:	call   c780 <dcgettext@plt>
   5a1de:	mov    rdi,rax
   5a1e1:	mov    rbp,rax
   5a1e4:	call   c310 <strlen@plt>
   5a1e9:	lea    r12,[rax+0x1]
   5a1ed:	test   rbx,rbx
   5a1f0:	je     5a205 <rpl_regerror+0x65>
   5a1f2:	mov    rdx,r12
   5a1f5:	cmp    r12,rbx
   5a1f8:	ja     5a218 <rpl_regerror+0x78>
   5a1fa:	mov    rsi,rbp
   5a1fd:	mov    rdi,r13
   5a200:	call   cb30 <memcpy@plt>
   5a205:	add    rsp,0x8
   5a209:	mov    rax,r12
   5a20c:	pop    rbx
   5a20d:	pop    rbp
   5a20e:	pop    r12
   5a210:	pop    r13
   5a212:	ret    
   5a213:	nop    DWORD PTR [rax+rax*1+0x0]
   5a218:	mov    BYTE PTR [r13+rbx*1-0x1],0x0
   5a21e:	lea    rdx,[rbx-0x1]
   5a222:	jmp    5a1fa <rpl_regerror+0x5a>
   5a224:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
   5a22f:	nop

000000000005a230 <rpl_regfree>:
   5a230:	endbr64 
   5a234:	push   rbx
   5a235:	mov    rbx,rdi
   5a238:	mov    rdi,QWORD PTR [rdi]
   5a23b:	test   rdi,rdi
   5a23e:	je     5a245 <rpl_regfree+0x15>
   5a240:	call   4d8d0 <free_dfa_content>
   5a245:	mov    QWORD PTR [rbx],0x0
   5a24c:	mov    rdi,QWORD PTR [rbx+0x20]
   5a250:	mov    QWORD PTR [rbx+0x8],0x0
   5a258:	call   4bdc0 <rpl_free>
   5a25d:	mov    QWORD PTR [rbx+0x20],0x0
   5a265:	mov    rdi,QWORD PTR [rbx+0x28]
   5a269:	call   4bdc0 <rpl_free>
   5a26e:	mov    QWORD PTR [rbx+0x28],0x0
   5a276:	pop    rbx
   5a277:	ret    
   5a278:	nop    DWORD PTR [rax+rax*1+0x0]

000000000005a280 <rpl_regexec>:
   5a280:	endbr64 
   5a284:	test   r8d,0xfffffff8
   5a28b:	jne    5a310 <rpl_regexec+0x90>
   5a291:	push   r14
   5a293:	mov    r14,rdx
   5a296:	push   r13
   5a298:	mov    r13,rcx
   5a29b:	push   r12
   5a29d:	mov    r12,rsi
   5a2a0:	push   rbp
   5a2a1:	mov    rbp,rdi
   5a2a4:	push   rbx
   5a2a5:	mov    ebx,r8d
   5a2a8:	test   r8b,0x4
   5a2ac:	jne    5a2f0 <rpl_regexec+0x70>
   5a2ae:	mov    rdi,rsi
   5a2b1:	call   c310 <strlen@plt>
   5a2b6:	xor    ecx,ecx
   5a2b8:	mov    rdx,rax
   5a2bb:	test   BYTE PTR [rbp+0x38],0x10
   5a2bf:	je     5a2fd <rpl_regexec+0x7d>
   5a2c1:	sub    rsp,0x8
   5a2c5:	push   rbx
   5a2c6:	push   0x0
   5a2c8:	push   0x0
   5a2ca:	mov    rsi,r12
   5a2cd:	mov    rdi,rbp
   5a2d0:	mov    r9,rdx
   5a2d3:	mov    r8,rdx
   5a2d6:	call   54580 <re_search_internal>
   5a2db:	add    rsp,0x20
   5a2df:	test   eax,eax
   5a2e1:	pop    rbx
   5a2e2:	pop    rbp
   5a2e3:	setne  al
   5a2e6:	pop    r12
   5a2e8:	pop    r13
   5a2ea:	movzx  eax,al
   5a2ed:	pop    r14
   5a2ef:	ret    
   5a2f0:	mov    rcx,QWORD PTR [rcx]
   5a2f3:	mov    rdx,QWORD PTR [r13+0x8]
   5a2f7:	test   BYTE PTR [rbp+0x38],0x10
   5a2fb:	jne    5a2c1 <rpl_regexec+0x41>
   5a2fd:	sub    rsp,0x8
   5a301:	push   rbx
   5a302:	push   r13
   5a304:	push   r14
   5a306:	jmp    5a2ca <rpl_regexec+0x4a>
   5a308:	nop    DWORD PTR [rax+rax*1+0x0]
   5a310:	mov    eax,0x2
   5a315:	ret    
   5a316:	nop    WORD PTR cs:[rax+rax*1+0x0]

000000000005a320 <rpl_re_match>:
   5a320:	endbr64 
   5a324:	sub    rsp,0x8
   5a328:	mov    r9,rdx
   5a32b:	push   0x1
   5a32d:	push   r8
   5a32f:	xor    r8d,r8d
   5a332:	call   59b80 <re_search_stub>
   5a337:	add    rsp,0x18
   5a33b:	ret    
   5a33c:	nop    DWORD PTR [rax+0x0]

000000000005a340 <rpl_re_search>:
   5a340:	endbr64 
   5a344:	sub    rsp,0x8
   5a348:	push   0x0
   5a34a:	push   r9
   5a34c:	mov    r9,rdx
   5a34f:	call   59b80 <re_search_stub>
   5a354:	add    rsp,0x18
   5a358:	ret    
   5a359:	nop    DWORD PTR [rax+0x0]

000000000005a360 <rpl_re_match_2>:
   5a360:	endbr64 
   5a364:	sub    rsp,0x8
   5a368:	push   0x1
   5a36a:	push   QWORD PTR [rsp+0x20]
   5a36e:	push   QWORD PTR [rsp+0x20]
   5a372:	push   0x0
   5a374:	call   59f50 <re_search_2_stub>
   5a379:	add    rsp,0x28
   5a37d:	ret    
   5a37e:	xchg   ax,ax

000000000005a380 <rpl_re_search_2>:
   5a380:	endbr64 
   5a384:	sub    rsp,0x8
   5a388:	push   0x0
   5a38a:	push   QWORD PTR [rsp+0x28]
   5a38e:	push   QWORD PTR [rsp+0x28]
   5a392:	push   QWORD PTR [rsp+0x28]
   5a396:	call   59f50 <re_search_2_stub>
   5a39b:	add    rsp,0x28
   5a39f:	ret    

000000000005a3a0 <rpl_re_set_registers>:
   5a3a0:	endbr64 
   5a3a4:	test   rdx,rdx
   5a3a7:	je     5a3c8 <rpl_re_set_registers+0x28>
   5a3a9:	movzx  eax,BYTE PTR [rdi+0x38]
   5a3ad:	and    eax,0xfffffff9
   5a3b0:	or     eax,0x2
   5a3b3:	mov    BYTE PTR [rdi+0x38],al
   5a3b6:	mov    QWORD PTR [rsi],rdx
   5a3b9:	mov    QWORD PTR [rsi+0x8],rcx
   5a3bd:	mov    QWORD PTR [rsi+0x10],r8
   5a3c1:	ret    
   5a3c2:	nop    WORD PTR [rax+rax*1+0x0]
   5a3c8:	and    BYTE PTR [rdi+0x38],0xf9
   5a3cc:	mov    QWORD PTR [rsi],0x0
   5a3d3:	mov    QWORD PTR [rsi+0x10],0x0
   5a3db:	mov    QWORD PTR [rsi+0x8],0x0
   5a3e3:	ret    
   5a3e4:	nop    WORD PTR cs:[rax+rax*1+0x0]
   5a3ee:	xchg   ax,ax

000000000005a3f0 <last_component>:
   5a3f0:	endbr64 
   5a3f4:	movzx  edx,BYTE PTR [rdi]
   5a3f7:	mov    rax,rdi
   5a3fa:	cmp    dl,0x2f
   5a3fd:	jne    5a40d <last_component+0x1d>
   5a3ff:	nop
   5a400:	movzx  edx,BYTE PTR [rax+0x1]
   5a404:	add    rax,0x1
   5a408:	cmp    dl,0x2f
   5a40b:	je     5a400 <last_component+0x10>
   5a40d:	test   dl,dl
   5a40f:	je     5a44c <last_component+0x5c>
   5a411:	mov    rcx,rax
   5a414:	xor    esi,esi
   5a416:	jmp    5a436 <last_component+0x46>
   5a418:	nop    DWORD PTR [rax+rax*1+0x0]
   5a420:	test   sil,sil
   5a423:	je     5a42a <last_component+0x3a>
   5a425:	mov    rax,rcx
   5a428:	xor    esi,esi
   5a42a:	movzx  edx,BYTE PTR [rcx+0x1]
   5a42e:	add    rcx,0x1
   5a432:	test   dl,dl
   5a434:	je     5a44c <last_component+0x5c>
   5a436:	cmp    dl,0x2f
   5a439:	jne    5a420 <last_component+0x30>
   5a43b:	movzx  edx,BYTE PTR [rcx+0x1]
   5a43f:	add    rcx,0x1
   5a443:	mov    esi,0x1
   5a448:	test   dl,dl
   5a44a:	jne    5a436 <last_component+0x46>
   5a44c:	ret    
   5a44d:	nop    DWORD PTR [rax]

000000000005a450 <base_len>:
   5a450:	endbr64 
   5a454:	push   rbx
   5a455:	mov    rbx,rdi
   5a458:	call   c310 <strlen@plt>
   5a45d:	cmp    rax,0x1
   5a461:	jbe    5a46e <base_len+0x1e>
   5a463:	cmp    BYTE PTR [rbx+rax*1-0x1],0x2f
   5a468:	lea    rdx,[rax-0x1]
   5a46c:	je     5a470 <base_len+0x20>
   5a46e:	pop    rbx
   5a46f:	ret    
   5a470:	mov    rax,rdx
   5a473:	jmp    5a45d <base_len+0xd>
   5a475:	nop    WORD PTR cs:[rax+rax*1+0x0]
   5a47f:	nop

000000000005a480 <hard_locale>:
   5a480:	endbr64 
   5a484:	sub    rsp,0x118
   5a48b:	mov    edx,0x101
   5a490:	mov    rax,QWORD PTR fs:0x28
   5a499:	mov    QWORD PTR [rsp+0x108],rax
   5a4a1:	xor    eax,eax
   5a4a3:	mov    rsi,rsp
   5a4a6:	call   5a540 <setlocale_null_r>
   5a4ab:	mov    r8d,eax
   5a4ae:	xor    eax,eax
   5a4b0:	test   r8d,r8d
   5a4b3:	jne    5a4ca <hard_locale+0x4a>
   5a4b5:	cmp    WORD PTR [rsp],0x43
   5a4ba:	je     5a4ca <hard_locale+0x4a>
   5a4bc:	cmp    DWORD PTR [rsp],0x49534f50
   5a4c3:	je     5a4e8 <hard_locale+0x68>
   5a4c5:	mov    eax,0x1
   5a4ca:	mov    rcx,QWORD PTR [rsp+0x108]
   5a4d2:	xor    rcx,QWORD PTR fs:0x28
   5a4db:	jne    5a4f4 <hard_locale+0x74>
   5a4dd:	add    rsp,0x118
   5a4e4:	ret    
   5a4e5:	nop    DWORD PTR [rax]
   5a4e8:	xor    eax,eax
   5a4ea:	cmp    WORD PTR [rsp+0x4],0x58
   5a4f0:	jne    5a4c5 <hard_locale+0x45>
   5a4f2:	jmp    5a4ca <hard_locale+0x4a>
   5a4f4:	call   c7b0 <__stack_chk_fail@plt>
   5a4f9:	nop    DWORD PTR [rax+0x0]

000000000005a500 <locale_charset>:
   5a500:	endbr64 
   5a504:	sub    rsp,0x8
   5a508:	mov    edi,0xe
   5a50d:	call   bfc0 <nl_langinfo@plt>
   5a512:	test   rax,rax
   5a515:	je     5a530 <locale_charset+0x30>
   5a517:	cmp    BYTE PTR [rax],0x0
   5a51a:	lea    rdx,[rip+0x143b2]        # 6e8d3 <CSWTCH.5+0x93>
   5a521:	cmove  rax,rdx
   5a525:	add    rsp,0x8
   5a529:	ret    
   5a52a:	nop    WORD PTR [rax+rax*1+0x0]
   5a530:	lea    rax,[rip+0x1439c]        # 6e8d3 <CSWTCH.5+0x93>
   5a537:	add    rsp,0x8
   5a53b:	ret    
   5a53c:	nop    DWORD PTR [rax+0x0]

000000000005a540 <setlocale_null_r>:
   5a540:	endbr64 
   5a544:	push   r13
   5a546:	push   r12
   5a548:	mov    r12,rsi
   5a54b:	xor    esi,esi
   5a54d:	push   rbp
   5a54e:	push   rbx
   5a54f:	mov    rbx,rdx
   5a552:	sub    rsp,0x8
   5a556:	call   ca30 <setlocale@plt>
   5a55b:	test   rax,rax
   5a55e:	je     5a5d8 <setlocale_null_r+0x98>
   5a560:	mov    rdi,rax
   5a563:	mov    rbp,rax
   5a566:	call   c310 <strlen@plt>
   5a56b:	cmp    rbx,rax
   5a56e:	ja     5a590 <setlocale_null_r+0x50>
   5a570:	mov    r13d,0x22
   5a576:	test   rbx,rbx
   5a579:	jne    5a5b0 <setlocale_null_r+0x70>
   5a57b:	add    rsp,0x8
   5a57f:	mov    eax,r13d
   5a582:	pop    rbx
   5a583:	pop    rbp
   5a584:	pop    r12
   5a586:	pop    r13
   5a588:	ret    
   5a589:	nop    DWORD PTR [rax+0x0]
   5a590:	mov    rsi,rbp
   5a593:	mov    rdi,r12
   5a596:	lea    rdx,[rax+0x1]
   5a59a:	xor    r13d,r13d
   5a59d:	call   cb30 <memcpy@plt>
   5a5a2:	add    rsp,0x8
   5a5a6:	mov    eax,r13d
   5a5a9:	pop    rbx
   5a5aa:	pop    rbp
   5a5ab:	pop    r12
   5a5ad:	pop    r13
   5a5af:	ret    
   5a5b0:	lea    rdx,[rbx-0x1]
   5a5b4:	mov    rsi,rbp
   5a5b7:	mov    rdi,r12
   5a5ba:	call   cb30 <memcpy@plt>
   5a5bf:	mov    BYTE PTR [r12+rbx*1-0x1],0x0
   5a5c5:	add    rsp,0x8
   5a5c9:	mov    eax,r13d
   5a5cc:	pop    rbx
   5a5cd:	pop    rbp
   5a5ce:	pop    r12
   5a5d0:	pop    r13
   5a5d2:	ret    
   5a5d3:	nop    DWORD PTR [rax+rax*1+0x0]
   5a5d8:	mov    r13d,0x16
   5a5de:	test   rbx,rbx
   5a5e1:	je     5a57b <setlocale_null_r+0x3b>
   5a5e3:	mov    BYTE PTR [r12],0x0
   5a5e8:	jmp    5a57b <setlocale_null_r+0x3b>
   5a5ea:	nop    WORD PTR [rax+rax*1+0x0]

000000000005a5f0 <setlocale_null>:
   5a5f0:	endbr64 
   5a5f4:	xor    esi,esi
   5a5f6:	jmp    ca30 <setlocale@plt>
   5a5fb:	nop    DWORD PTR [rax+rax*1+0x0]

000000000005a600 <__libc_csu_init>:
   5a600:	endbr64 
   5a604:	push   r15
   5a606:	lea    r15,[rip+0x22443]        # 7ca50 <__frame_dummy_init_array_entry>
   5a60d:	push   r14
   5a60f:	mov    r14,rdx
   5a612:	push   r13
   5a614:	mov    r13,rsi
   5a617:	push   r12
   5a619:	mov    r12d,edi
   5a61c:	push   rbp
   5a61d:	lea    rbp,[rip+0x22434]        # 7ca58 <__do_global_dtors_aux_fini_array_entry>
   5a624:	push   rbx
   5a625:	sub    rbp,r15
   5a628:	sub    rsp,0x8
   5a62c:	call   b000 <_init>
   5a631:	sar    rbp,0x3
   5a635:	je     5a656 <__libc_csu_init+0x56>
   5a637:	xor    ebx,ebx
   5a639:	nop    DWORD PTR [rax+0x0]
   5a640:	mov    rdx,r14
   5a643:	mov    rsi,r13
   5a646:	mov    edi,r12d
   5a649:	call   QWORD PTR [r15+rbx*8]
   5a64d:	add    rbx,0x1
   5a651:	cmp    rbp,rbx
   5a654:	jne    5a640 <__libc_csu_init+0x40>
   5a656:	add    rsp,0x8
   5a65a:	pop    rbx
   5a65b:	pop    rbp
   5a65c:	pop    r12
   5a65e:	pop    r13
   5a660:	pop    r14
   5a662:	pop    r15
   5a664:	ret    
   5a665:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

000000000005a670 <__libc_csu_fini>:
   5a670:	endbr64 
   5a674:	ret    

Disassembly of section .fini:

000000000005a678 <_fini>:
   5a678:	endbr64 
   5a67c:	sub    rsp,0x8
   5a680:	add    rsp,0x8
   5a684:	ret    
