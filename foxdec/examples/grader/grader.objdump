
grader:     file format elf64-x86-64


Disassembly of section .init:

0000000000001000 <_init>:
    1000:	endbr64 
    1004:	sub    rsp,0x8
    1008:	mov    rax,QWORD PTR [rip+0x3fd9]        # 4fe8 <__gmon_start__>
    100f:	test   rax,rax
    1012:	je     1016 <_init+0x16>
    1014:	call   rax
    1016:	add    rsp,0x8
    101a:	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	push   QWORD PTR [rip+0x3f2a]        # 4f50 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	bnd jmp QWORD PTR [rip+0x3f2b]        # 4f58 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	nop    DWORD PTR [rax]
    1030:	endbr64 
    1034:	push   0x0
    1039:	bnd jmp 1020 <.plt>
    103f:	nop
    1040:	endbr64 
    1044:	push   0x1
    1049:	bnd jmp 1020 <.plt>
    104f:	nop
    1050:	endbr64 
    1054:	push   0x2
    1059:	bnd jmp 1020 <.plt>
    105f:	nop
    1060:	endbr64 
    1064:	push   0x3
    1069:	bnd jmp 1020 <.plt>
    106f:	nop
    1070:	endbr64 
    1074:	push   0x4
    1079:	bnd jmp 1020 <.plt>
    107f:	nop
    1080:	endbr64 
    1084:	push   0x5
    1089:	bnd jmp 1020 <.plt>
    108f:	nop
    1090:	endbr64 
    1094:	push   0x6
    1099:	bnd jmp 1020 <.plt>
    109f:	nop
    10a0:	endbr64 
    10a4:	push   0x7
    10a9:	bnd jmp 1020 <.plt>
    10af:	nop
    10b0:	endbr64 
    10b4:	push   0x8
    10b9:	bnd jmp 1020 <.plt>
    10bf:	nop
    10c0:	endbr64 
    10c4:	push   0x9
    10c9:	bnd jmp 1020 <.plt>
    10cf:	nop
    10d0:	endbr64 
    10d4:	push   0xa
    10d9:	bnd jmp 1020 <.plt>
    10df:	nop
    10e0:	endbr64 
    10e4:	push   0xb
    10e9:	bnd jmp 1020 <.plt>
    10ef:	nop
    10f0:	endbr64 
    10f4:	push   0xc
    10f9:	bnd jmp 1020 <.plt>
    10ff:	nop
    1100:	endbr64 
    1104:	push   0xd
    1109:	bnd jmp 1020 <.plt>
    110f:	nop
    1110:	endbr64 
    1114:	push   0xe
    1119:	bnd jmp 1020 <.plt>
    111f:	nop

Disassembly of section .plt.got:

0000000000001120 <__cxa_finalize@plt>:
    1120:	endbr64 
    1124:	bnd jmp QWORD PTR [rip+0x3ecd]        # 4ff8 <__cxa_finalize@GLIBC_2.2.5>
    112b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .plt.sec:

0000000000001130 <free@plt>:
    1130:	endbr64 
    1134:	bnd jmp QWORD PTR [rip+0x3e25]        # 4f60 <free@GLIBC_2.2.5>
    113b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001140 <__errno_location@plt>:
    1140:	endbr64 
    1144:	bnd jmp QWORD PTR [rip+0x3e1d]        # 4f68 <__errno_location@GLIBC_2.2.5>
    114b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001150 <strncpy@plt>:
    1150:	endbr64 
    1154:	bnd jmp QWORD PTR [rip+0x3e15]        # 4f70 <strncpy@GLIBC_2.2.5>
    115b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001160 <puts@plt>:
    1160:	endbr64 
    1164:	bnd jmp QWORD PTR [rip+0x3e0d]        # 4f78 <puts@GLIBC_2.2.5>
    116b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001170 <strtod@plt>:
    1170:	endbr64 
    1174:	bnd jmp QWORD PTR [rip+0x3e05]        # 4f80 <strtod@GLIBC_2.2.5>
    117b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001180 <__stack_chk_fail@plt>:
    1180:	endbr64 
    1184:	bnd jmp QWORD PTR [rip+0x3dfd]        # 4f88 <__stack_chk_fail@GLIBC_2.4>
    118b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001190 <strcmp@plt>:
    1190:	endbr64 
    1194:	bnd jmp QWORD PTR [rip+0x3df5]        # 4f90 <strcmp@GLIBC_2.2.5>
    119b:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011a0 <malloc@plt>:
    11a0:	endbr64 
    11a4:	bnd jmp QWORD PTR [rip+0x3ded]        # 4f98 <malloc@GLIBC_2.2.5>
    11ab:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011b0 <realloc@plt>:
    11b0:	endbr64 
    11b4:	bnd jmp QWORD PTR [rip+0x3de5]        # 4fa0 <realloc@GLIBC_2.2.5>
    11bb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011c0 <__printf_chk@plt>:
    11c0:	endbr64 
    11c4:	bnd jmp QWORD PTR [rip+0x3ddd]        # 4fa8 <__printf_chk@GLIBC_2.3.4>
    11cb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011d0 <fopen@plt>:
    11d0:	endbr64 
    11d4:	bnd jmp QWORD PTR [rip+0x3dd5]        # 4fb0 <fopen@GLIBC_2.2.5>
    11db:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011e0 <__fprintf_chk@plt>:
    11e0:	endbr64 
    11e4:	bnd jmp QWORD PTR [rip+0x3dcd]        # 4fb8 <__fprintf_chk@GLIBC_2.3.4>
    11eb:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000011f0 <strerror@plt>:
    11f0:	endbr64 
    11f4:	bnd jmp QWORD PTR [rip+0x3dc5]        # 4fc0 <strerror@GLIBC_2.2.5>
    11fb:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001200 <getc@plt>:
    1200:	endbr64 
    1204:	bnd jmp QWORD PTR [rip+0x3dbd]        # 4fc8 <getc@GLIBC_2.2.5>
    120b:	nop    DWORD PTR [rax+rax*1+0x0]

0000000000001210 <__sprintf_chk@plt>:
    1210:	endbr64 
    1214:	bnd jmp QWORD PTR [rip+0x3db5]        # 4fd0 <__sprintf_chk@GLIBC_2.3.4>
    121b:	nop    DWORD PTR [rax+rax*1+0x0]

Disassembly of section .text:

0000000000001220 <main>:
    1220:	endbr64 
    1224:	sub    rsp,0x8
    1228:	cmp    edi,0x2
    122b:	jne    1267 <main+0x47>
    122d:	mov    rdi,QWORD PTR [rsi+0x8]
    1231:	call   1380 <fevaluate>
    1236:	mov    rdx,rax
    1239:	test   rax,rax
    123c:	je     1260 <main+0x40>
    123e:	mulss  xmm0,DWORD PTR [rip+0x1dea]        # 3030 <_IO_stdin_used+0x30>
    1246:	mov    edi,0x1
    124b:	mov    eax,0x1
    1250:	lea    rsi,[rip+0x1dc5]        # 301c <_IO_stdin_used+0x1c>
    1257:	cvtss2sd xmm0,xmm0
    125b:	call   11c0 <__printf_chk@plt>
    1260:	xor    eax,eax
    1262:	add    rsp,0x8
    1266:	ret    
    1267:	mov    rcx,QWORD PTR [rsi]
    126a:	mov    rdi,QWORD PTR [rip+0x3daf]        # 5020 <stderr@@GLIBC_2.2.5>
    1271:	mov    esi,0x1
    1276:	xor    eax,eax
    1278:	lea    rdx,[rip+0x1d85]        # 3004 <_IO_stdin_used+0x4>
    127f:	call   11e0 <__fprintf_chk@plt>
    1284:	or     eax,0xffffffff
    1287:	jmp    1262 <main+0x42>
    1289:	nop    DWORD PTR [rax+0x0]

0000000000001290 <_start>:
    1290:	endbr64 
    1294:	xor    ebp,ebp
    1296:	mov    r9,rdx
    1299:	pop    rsi
    129a:	mov    rdx,rsp
    129d:	and    rsp,0xfffffffffffffff0
    12a1:	push   rax
    12a2:	push   rsp
    12a3:	lea    r8,[rip+0x1686]        # 2930 <__libc_csu_fini>
    12aa:	lea    rcx,[rip+0x160f]        # 28c0 <__libc_csu_init>
    12b1:	lea    rdi,[rip+0xffffffffffffff68]        # 1220 <main>
    12b8:	call   QWORD PTR [rip+0x3d22]        # 4fe0 <__libc_start_main@GLIBC_2.2.5>
    12be:	hlt    
    12bf:	nop

00000000000012c0 <deregister_tm_clones>:
    12c0:	lea    rdi,[rip+0x3d49]        # 5010 <__TMC_END__>
    12c7:	lea    rax,[rip+0x3d42]        # 5010 <__TMC_END__>
    12ce:	cmp    rax,rdi
    12d1:	je     12e8 <deregister_tm_clones+0x28>
    12d3:	mov    rax,QWORD PTR [rip+0x3cfe]        # 4fd8 <_ITM_deregisterTMCloneTable>
    12da:	test   rax,rax
    12dd:	je     12e8 <deregister_tm_clones+0x28>
    12df:	jmp    rax
    12e1:	nop    DWORD PTR [rax+0x0]
    12e8:	ret    
    12e9:	nop    DWORD PTR [rax+0x0]

00000000000012f0 <register_tm_clones>:
    12f0:	lea    rdi,[rip+0x3d19]        # 5010 <__TMC_END__>
    12f7:	lea    rsi,[rip+0x3d12]        # 5010 <__TMC_END__>
    12fe:	sub    rsi,rdi
    1301:	mov    rax,rsi
    1304:	shr    rsi,0x3f
    1308:	sar    rax,0x3
    130c:	add    rsi,rax
    130f:	sar    rsi,1
    1312:	je     1328 <register_tm_clones+0x38>
    1314:	mov    rax,QWORD PTR [rip+0x3cd5]        # 4ff0 <_ITM_registerTMCloneTable>
    131b:	test   rax,rax
    131e:	je     1328 <register_tm_clones+0x38>
    1320:	jmp    rax
    1322:	nop    WORD PTR [rax+rax*1+0x0]
    1328:	ret    
    1329:	nop    DWORD PTR [rax+0x0]

0000000000001330 <__do_global_dtors_aux>:
    1330:	endbr64 
    1334:	cmp    BYTE PTR [rip+0x3ced],0x0        # 5028 <completed.8061>
    133b:	jne    1368 <__do_global_dtors_aux+0x38>
    133d:	push   rbp
    133e:	cmp    QWORD PTR [rip+0x3cb2],0x0        # 4ff8 <__cxa_finalize@GLIBC_2.2.5>
    1346:	mov    rbp,rsp
    1349:	je     1357 <__do_global_dtors_aux+0x27>
    134b:	mov    rdi,QWORD PTR [rip+0x3cb6]        # 5008 <__dso_handle>
    1352:	call   1120 <__cxa_finalize@plt>
    1357:	call   12c0 <deregister_tm_clones>
    135c:	mov    BYTE PTR [rip+0x3cc5],0x1        # 5028 <completed.8061>
    1363:	pop    rbp
    1364:	ret    
    1365:	nop    DWORD PTR [rax]
    1368:	ret    
    1369:	nop    DWORD PTR [rax+0x0]

0000000000001370 <frame_dummy>:
    1370:	endbr64 
    1374:	jmp    12f0 <register_tm_clones>
    1379:	nop    DWORD PTR [rax+0x0]

0000000000001380 <fevaluate>:
    1380:	endbr64 
    1384:	push   r13
    1386:	lea    rsi,[rip+0x1caf]        # 303c <_IO_stdin_used+0x3c>
    138d:	push   r12
    138f:	mov    r12,rdi
    1392:	push   rbp
    1393:	push   rbx
    1394:	sub    rsp,0x18
    1398:	call   11d0 <fopen@plt>
    139d:	test   rax,rax
    13a0:	je     14d0 <fevaluate+0x150>
    13a6:	mov    rdi,rax
    13a9:	call   1630 <lex>
    13ae:	mov    rdi,rax
    13b1:	call   24d0 <parse>
    13b6:	mov    edx,DWORD PTR [rax+0x8]
    13b9:	mov    rbx,rax
    13bc:	cmp    edx,0xb
    13bf:	je     1510 <fevaluate+0x190>
    13c5:	pxor   xmm3,xmm3
    13c9:	lea    r13,[rip+0x1c64]        # 3034 <_IO_stdin_used+0x34>
    13d0:	xor    ebp,ebp
    13d2:	movss  DWORD PTR [rsp+0xc],xmm3
    13d8:	lea    r12,[rip+0x1c6f]        # 304e <_IO_stdin_used+0x4e>
    13df:	jmp    144b <fevaluate+0xcb>
    13e1:	nop    DWORD PTR [rax+0x0]
    13e8:	push   QWORD PTR [rbx+0x28]
    13eb:	add    rbx,0x30
    13ef:	add    ebp,0x1
    13f2:	push   QWORD PTR [rbx-0x10]
    13f5:	push   QWORD PTR [rbx-0x18]
    13f8:	push   QWORD PTR [rbx-0x20]
    13fb:	push   QWORD PTR [rbx-0x28]
    13fe:	push   QWORD PTR [rbx-0x30]
    1401:	call   1ad0 <to_string>
    1406:	add    rsp,0x30
    140a:	mov    rsi,r12
    140d:	mov    edi,0x1
    1412:	mov    rdx,rax
    1415:	xor    eax,eax
    1417:	call   11c0 <__printf_chk@plt>
    141c:	push   QWORD PTR [rbx-0x8]
    141f:	push   QWORD PTR [rbx-0x10]
    1422:	push   QWORD PTR [rbx-0x18]
    1425:	push   QWORD PTR [rbx-0x20]
    1428:	push   QWORD PTR [rbx-0x28]
    142b:	push   QWORD PTR [rbx-0x30]
    142e:	call   2600 <evaluate>
    1433:	addss  xmm0,DWORD PTR [rsp+0x3c]
    1439:	mov    edx,DWORD PTR [rbx+0x8]
    143c:	movss  DWORD PTR [rsp+0x3c],xmm0
    1442:	add    rsp,0x30
    1446:	cmp    edx,0xb
    1449:	je     14a0 <fevaluate+0x120>
    144b:	cmp    edx,0x6
    144e:	jne    13e8 <fevaluate+0x68>
    1450:	mov    rax,QWORD PTR [rbx]
    1453:	test   rax,rax
    1456:	je     13e8 <fevaluate+0x68>
    1458:	cmp    DWORD PTR [rax+0x8],0x9
    145c:	jne    13e8 <fevaluate+0x68>
    145e:	mov    rdi,QWORD PTR [rax+0x10]
    1462:	lea    rsi,[rip+0x1be9]        # 3052 <_IO_stdin_used+0x52>
    1469:	call   1190 <strcmp@plt>
    146e:	test   eax,eax
    1470:	jne    13e8 <fevaluate+0x68>
    1476:	mov    rax,QWORD PTR [rbx+0x28]
    147a:	add    rbx,0x30
    147e:	mov    rdi,QWORD PTR [rax+0x10]
    1482:	call   1160 <puts@plt>
    1487:	mov    rax,QWORD PTR [rbx-0x8]
    148b:	mov    edx,DWORD PTR [rbx+0x8]
    148e:	mov    r13,QWORD PTR [rax+0x10]
    1492:	cmp    edx,0xb
    1495:	jne    144b <fevaluate+0xcb>
    1497:	nop    WORD PTR [rax+rax*1+0x0]
    14a0:	pxor   xmm0,xmm0
    14a4:	cvtsi2ss xmm0,ebp
    14a8:	movss  xmm2,DWORD PTR [rsp+0xc]
    14ae:	add    rsp,0x18
    14b2:	mov    rax,r13
    14b5:	pop    rbx
    14b6:	pop    rbp
    14b7:	divss  xmm2,xmm0
    14bb:	pop    r12
    14bd:	pop    r13
    14bf:	movd   edx,xmm2
    14c3:	movd   xmm0,edx
    14c7:	ret    
    14c8:	nop    DWORD PTR [rax+rax*1+0x0]
    14d0:	call   1140 <__errno_location@plt>
    14d5:	mov    edi,DWORD PTR [rax]
    14d7:	call   11f0 <strerror@plt>
    14dc:	mov    rdi,QWORD PTR [rip+0x3b3d]        # 5020 <stderr@@GLIBC_2.2.5>
    14e3:	mov    rcx,r12
    14e6:	lea    rdx,[rip+0x1b51]        # 303e <_IO_stdin_used+0x3e>
    14ed:	mov    r8,rax
    14f0:	mov    esi,0x1
    14f5:	xor    eax,eax
    14f7:	call   11e0 <__fprintf_chk@plt>
    14fc:	add    rsp,0x18
    1500:	xor    edx,edx
    1502:	xor    eax,eax
    1504:	pop    rbx
    1505:	movd   xmm0,edx
    1509:	pop    rbp
    150a:	pop    r12
    150c:	pop    r13
    150e:	ret    
    150f:	nop
    1510:	pxor   xmm0,xmm0
    1514:	lea    r13,[rip+0x1b19]        # 3034 <_IO_stdin_used+0x34>
    151b:	movss  DWORD PTR [rsp+0xc],xmm0
    1521:	jmp    14a8 <fevaluate+0x128>
    1523:	nop    WORD PTR cs:[rax+rax*1+0x0]
    152d:	nop    DWORD PTR [rax]

0000000000001530 <print_token>:
    1530:	endbr64 
    1534:	cmp    DWORD PTR [rdi],0xb
    1537:	ja     1557 <print_token+0x27>
    1539:	mov    eax,DWORD PTR [rdi]
    153b:	lea    rdx,[rip+0x1bae]        # 30f0 <_IO_stdin_used+0xf0>
    1542:	movsxd rax,DWORD PTR [rdx+rax*4]
    1546:	add    rax,rdx
    1549:	notrack jmp rax
    154c:	nop    DWORD PTR [rax+0x0]
    1550:	lea    rdx,[rip+0x1b00]        # 3057 <_IO_stdin_used+0x57>
    1557:	mov    rcx,QWORD PTR [rdi+0x18]
    155b:	mov    r8,QWORD PTR [rdi+0x8]
    155f:	pxor   xmm0,xmm0
    1563:	lea    rsi,[rip+0x1b4f]        # 30b9 <_IO_stdin_used+0xb9>
    156a:	cvtss2sd xmm0,DWORD PTR [rdi+0x10]
    156f:	mov    eax,0x1
    1574:	mov    edi,0x1
    1579:	jmp    11c0 <__printf_chk@plt>
    157e:	xchg   ax,ax
    1580:	lea    rdx,[rip+0x1b27]        # 30ae <_IO_stdin_used+0xae>
    1587:	jmp    1557 <print_token+0x27>
    1589:	nop    DWORD PTR [rax+0x0]
    1590:	lea    rdx,[rip+0x1ac5]        # 305c <_IO_stdin_used+0x5c>
    1597:	jmp    1557 <print_token+0x27>
    1599:	nop    DWORD PTR [rax+0x0]
    15a0:	lea    rdx,[rip+0x1ac1]        # 3068 <_IO_stdin_used+0x68>
    15a7:	jmp    1557 <print_token+0x27>
    15a9:	nop    DWORD PTR [rax+0x0]
    15b0:	lea    rdx,[rip+0x1ab7]        # 306e <_IO_stdin_used+0x6e>
    15b7:	jmp    1557 <print_token+0x27>
    15b9:	nop    DWORD PTR [rax+0x0]
    15c0:	lea    rdx,[rip+0x1aac]        # 3073 <_IO_stdin_used+0x73>
    15c7:	jmp    1557 <print_token+0x27>
    15c9:	nop    DWORD PTR [rax+0x0]
    15d0:	lea    rdx,[rip+0x1aa3]        # 307a <_IO_stdin_used+0x7a>
    15d7:	jmp    1557 <print_token+0x27>
    15dc:	nop    DWORD PTR [rax+0x0]
    15e0:	lea    rdx,[rip+0x1a9c]        # 3083 <_IO_stdin_used+0x83>
    15e7:	jmp    1557 <print_token+0x27>
    15ec:	nop    DWORD PTR [rax+0x0]
    15f0:	lea    rdx,[rip+0x1a93]        # 308a <_IO_stdin_used+0x8a>
    15f7:	jmp    1557 <print_token+0x27>
    15fc:	nop    DWORD PTR [rax+0x0]
    1600:	lea    rdx,[rip+0x1a8a]        # 3091 <_IO_stdin_used+0x91>
    1607:	jmp    1557 <print_token+0x27>
    160c:	nop    DWORD PTR [rax+0x0]
    1610:	lea    rdx,[rip+0x1a83]        # 309a <_IO_stdin_used+0x9a>
    1617:	jmp    1557 <print_token+0x27>
    161c:	nop    DWORD PTR [rax+0x0]
    1620:	lea    rdx,[rip+0x1a7e]        # 30a5 <_IO_stdin_used+0xa5>
    1627:	jmp    1557 <print_token+0x27>
    162c:	nop    DWORD PTR [rax+0x0]

0000000000001630 <lex>:
    1630:	endbr64 
    1634:	push   r15
    1636:	mov    r15,rdi
    1639:	mov    edi,0x1000
    163e:	push   r14
    1640:	push   r13
    1642:	xor    r13d,r13d
    1645:	push   r12
    1647:	lea    r12,[rip+0x1ad2]        # 3120 <_IO_stdin_used+0x120>
    164e:	push   rbp
    164f:	xor    ebp,ebp
    1651:	push   rbx
    1652:	sub    rsp,0x68
    1656:	mov    rax,QWORD PTR fs:0x28
    165f:	mov    QWORD PTR [rsp+0x58],rax
    1664:	xor    eax,eax
    1666:	call   11a0 <malloc@plt>
    166b:	mov    DWORD PTR [rsp+0x30],0xb
    1673:	mov    QWORD PTR [rsp+0x18],rax
    1678:	lea    rax,[rsp+0x30]
    167d:	mov    QWORD PTR [rsp+0x10],0x1
    1686:	mov    QWORD PTR [rsp+0x20],0x80
    168f:	mov    QWORD PTR [rsp+0x8],0x80
    1698:	mov    QWORD PTR [rsp+0x28],rax
    169d:	nop    DWORD PTR [rax]
    16a0:	mov    rdi,r15
    16a3:	call   1200 <getc@plt>
    16a8:	lea    rsi,[rip+0x1a28]        # 30d7 <_IO_stdin_used+0xd7>
    16af:	mov    edi,0x1
    16b4:	mov    ebx,eax
    16b6:	mov    edx,eax
    16b8:	xor    eax,eax
    16ba:	call   11c0 <__printf_chk@plt>
    16bf:	cmp    ebx,0xa
    16c2:	je     17f8 <lex+0x1c8>
    16c8:	lea    eax,[rbx-0x28]
    16cb:	lea    edx,[rbx-0x41]
    16ce:	cmp    eax,0x15
    16d1:	jbe    17c9 <lex+0x199>
    16d7:	cmp    edx,0x39
    16da:	jbe    17c0 <lex+0x190>
    16e0:	cmp    ebx,0xffffffff
    16e3:	jne    16a0 <lex+0x70>
    16e5:	mov    edx,0xb
    16ea:	mov    r14d,0xb
    16f0:	lea    rsi,[rip+0x19e3]        # 30da <_IO_stdin_used+0xda>
    16f7:	mov    edi,0x1
    16fc:	xor    eax,eax
    16fe:	call   11c0 <__printf_chk@plt>
    1703:	mov    eax,DWORD PTR [rsp+0x30]
    1707:	mov    edx,eax
    1709:	cmp    r14d,eax
    170c:	je     182c <lex+0x1fc>
    1712:	cmp    edx,0x7
    1715:	je     1837 <lex+0x207>
    171b:	nop    DWORD PTR [rax+rax*1+0x0]
    1720:	mov    DWORD PTR [rsp+0x40],0x7fc00000
    1728:	cmp    QWORD PTR [rsp+0x8],rbp
    172d:	je     1858 <lex+0x228>
    1733:	mov    r13,rbp
    1736:	shl    r13,0x5
    173a:	cmp    DWORD PTR [rsp+0x30],0xb
    173f:	je     176f <lex+0x13f>
    1741:	mov    rax,QWORD PTR [rsp+0x18]
    1746:	movdqa xmm1,XMMWORD PTR [rsp+0x30]
    174c:	add    rbp,0x1
    1750:	mov    rdi,QWORD PTR [rsp+0x28]
    1755:	movups XMMWORD PTR [rax+r13*1],xmm1
    175a:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
    1760:	movups XMMWORD PTR [rax+r13*1+0x10],xmm2
    1766:	add    r13,0x20
    176a:	call   1530 <print_token>
    176f:	mov    rax,QWORD PTR [rsp+0x10]
    1774:	mov    DWORD PTR [rsp+0x30],r14d
    1779:	mov    QWORD PTR [rsp+0x48],rax
    177e:	cmp    r14d,0xb
    1782:	je     18a8 <lex+0x278>
    1788:	lea    ecx,[r14-0x7]
    178c:	cmp    ecx,0x1
    178f:	jbe    1880 <lex+0x250>
    1795:	mov    edi,0x2
    179a:	mov    r13d,0x1
    17a0:	call   11a0 <malloc@plt>
    17a5:	mov    QWORD PTR [rsp+0x38],rax
    17aa:	mov    BYTE PTR [rax],bl
    17ac:	mov    BYTE PTR [rax+r13*1],0x0
    17b1:	jmp    16a0 <lex+0x70>
    17b6:	nop    WORD PTR cs:[rax+rax*1+0x0]
    17c0:	cmp    eax,0x15
    17c3:	ja     19f3 <lex+0x3c3>
    17c9:	movsxd rax,DWORD PTR [r12+rax*4]
    17cd:	add    rax,r12
    17d0:	notrack jmp rax
    17d3:	mov    edx,0x4
    17d8:	mov    r14d,0x4
    17de:	jmp    16f0 <lex+0xc0>
    17e3:	mov    edx,0x3
    17e8:	mov    r14d,0x3
    17ee:	jmp    16f0 <lex+0xc0>
    17f3:	nop    DWORD PTR [rax+rax*1+0x0]
    17f8:	mov    edx,0xa
    17fd:	lea    rsi,[rip+0x18d6]        # 30da <_IO_stdin_used+0xda>
    1804:	mov    edi,0x1
    1809:	xor    eax,eax
    180b:	add    QWORD PTR [rsp+0x10],0x1
    1811:	call   11c0 <__printf_chk@plt>
    1816:	mov    eax,DWORD PTR [rsp+0x30]
    181a:	mov    r14d,eax
    181d:	cmp    eax,0xa
    1820:	je     1720 <lex+0xf0>
    1826:	mov    r14d,0xa
    182c:	mov    edx,eax
    182e:	cmp    edx,0x7
    1831:	jne    1720 <lex+0xf0>
    1837:	mov    rdi,QWORD PTR [rsp+0x38]
    183c:	xor    esi,esi
    183e:	call   1170 <strtod@plt>
    1843:	cvtsd2ss xmm0,xmm0
    1847:	movss  DWORD PTR [rsp+0x40],xmm0
    184d:	cmp    QWORD PTR [rsp+0x8],rbp
    1852:	jne    1733 <lex+0x103>
    1858:	sub    QWORD PTR [rsp+0x8],0xffffffffffffff80
    185e:	mov    rax,QWORD PTR [rsp+0x8]
    1863:	mov    rdi,QWORD PTR [rsp+0x18]
    1868:	mov    rsi,rax
    186b:	call   11b0 <realloc@plt>
    1870:	mov    QWORD PTR [rsp+0x18],rax
    1875:	jmp    1733 <lex+0x103>
    187a:	nop    WORD PTR [rax+rax*1+0x0]
    1880:	mov    edi,0x80
    1885:	mov    r13d,0x1
    188b:	call   11a0 <malloc@plt>
    1890:	mov    QWORD PTR [rsp+0x20],0x80
    1899:	mov    QWORD PTR [rsp+0x38],rax
    189e:	mov    BYTE PTR [rax],bl
    18a0:	jmp    17ac <lex+0x17c>
    18a5:	nop    DWORD PTR [rax]
    18a8:	mov    QWORD PTR [rsp+0x38],0x0
    18b1:	cmp    QWORD PTR [rsp+0x8],rbp
    18b6:	je     1a58 <lex+0x428>
    18bc:	mov    rax,QWORD PTR [rsp+0x18]
    18c1:	movdqa xmm3,XMMWORD PTR [rsp+0x30]
    18c7:	movups XMMWORD PTR [rax+r13*1],xmm3
    18cc:	movdqa xmm4,XMMWORD PTR [rsp+0x40]
    18d2:	movups XMMWORD PTR [rax+r13*1+0x10],xmm4
    18d8:	mov    rax,QWORD PTR [rsp+0x58]
    18dd:	xor    rax,QWORD PTR fs:0x28
    18e6:	jne    1a7f <lex+0x44f>
    18ec:	mov    rax,QWORD PTR [rsp+0x18]
    18f1:	add    rsp,0x68
    18f5:	pop    rbx
    18f6:	pop    rbp
    18f7:	pop    r12
    18f9:	pop    r13
    18fb:	pop    r14
    18fd:	pop    r15
    18ff:	ret    
    1900:	mov    edx,0x6
    1905:	mov    r14d,0x6
    190b:	jmp    16f0 <lex+0xc0>
    1910:	mov    r14d,DWORD PTR [rsp+0x30]
    1915:	mov    r8d,0x7
    191b:	cmp    r14d,0x7
    191f:	jne    16a0 <lex+0x70>
    1925:	mov    edx,r8d
    1928:	lea    rsi,[rip+0x17ab]        # 30da <_IO_stdin_used+0xda>
    192f:	mov    edi,0x1
    1934:	xor    eax,eax
    1936:	call   11c0 <__printf_chk@plt>
    193b:	mov    edx,DWORD PTR [rsp+0x30]
    193f:	cmp    r14d,edx
    1942:	jne    1712 <lex+0xe2>
    1948:	mov    rdi,QWORD PTR [rsp+0x38]
    194d:	cmp    QWORD PTR [rsp+0x20],r13
    1952:	je     1a18 <lex+0x3e8>
    1958:	mov    BYTE PTR [rdi+r13*1],bl
    195c:	add    r13,0x1
    1960:	mov    rax,QWORD PTR [rsp+0x38]
    1965:	jmp    17ac <lex+0x17c>
    196a:	mov    edx,0x2
    196f:	mov    r14d,0x2
    1975:	jmp    16f0 <lex+0xc0>
    197a:	mov    edx,0x5
    197f:	mov    r14d,0x5
    1985:	jmp    16f0 <lex+0xc0>
    198a:	mov    edx,0x1
    198f:	lea    rsi,[rip+0x1744]        # 30da <_IO_stdin_used+0xda>
    1996:	mov    edi,0x1
    199b:	xor    eax,eax
    199d:	call   11c0 <__printf_chk@plt>
    19a2:	mov    eax,DWORD PTR [rsp+0x30]
    19a6:	mov    r14d,0x1
    19ac:	mov    edx,eax
    19ae:	jmp    182e <lex+0x1fe>
    19b3:	xor    edx,edx
    19b5:	lea    rsi,[rip+0x171e]        # 30da <_IO_stdin_used+0xda>
    19bc:	mov    edi,0x1
    19c1:	xor    eax,eax
    19c3:	call   11c0 <__printf_chk@plt>
    19c8:	mov    r14d,DWORD PTR [rsp+0x30]
    19cd:	mov    eax,r14d
    19d0:	test   r14d,r14d
    19d3:	je     1720 <lex+0xf0>
    19d9:	cmp    r14d,0x9
    19dd:	jne    1a75 <lex+0x445>
    19e3:	mov    DWORD PTR [rsp+0x30],0x8
    19eb:	xor    r14d,r14d
    19ee:	jmp    1720 <lex+0xf0>
    19f3:	lea    eax,[rbx-0x30]
    19f6:	cmp    eax,0x9
    19f9:	jbe    1a40 <lex+0x410>
    19fb:	mov    r8d,0x9
    1a01:	mov    r14d,0x9
    1a07:	cmp    edx,0x39
    1a0a:	jbe    1925 <lex+0x2f5>
    1a10:	jmp    16a0 <lex+0x70>
    1a15:	nop    DWORD PTR [rax]
    1a18:	sub    QWORD PTR [rsp+0x20],0xffffffffffffff80
    1a1e:	mov    rax,QWORD PTR [rsp+0x20]
    1a23:	mov    rsi,rax
    1a26:	call   11b0 <realloc@plt>
    1a2b:	mov    QWORD PTR [rsp+0x38],rax
    1a30:	mov    rdi,rax
    1a33:	jmp    1958 <lex+0x328>
    1a38:	nop    DWORD PTR [rax+rax*1+0x0]
    1a40:	mov    r8d,0x7
    1a46:	mov    r14d,0x7
    1a4c:	jmp    1925 <lex+0x2f5>
    1a51:	nop    DWORD PTR [rax+0x0]
    1a58:	mov    rsi,QWORD PTR [rsp+0x8]
    1a5d:	mov    rdi,QWORD PTR [rsp+0x18]
    1a62:	add    rsi,0x1
    1a66:	call   11b0 <realloc@plt>
    1a6b:	mov    QWORD PTR [rsp+0x18],rax
    1a70:	jmp    18bc <lex+0x28c>
    1a75:	xor    r14d,r14d
    1a78:	mov    edx,eax
    1a7a:	jmp    182e <lex+0x1fe>
    1a7f:	call   1180 <__stack_chk_fail@plt>
    1a84:	nop    WORD PTR cs:[rax+rax*1+0x0]
    1a8e:	xchg   ax,ax

0000000000001a90 <is_new_line>:
    1a90:	endbr64 
    1a94:	mov    rax,QWORD PTR [rsi]
    1a97:	xor    r8d,r8d
    1a9a:	mov    rdx,rax
    1a9d:	shl    rdx,0x5
    1aa1:	cmp    DWORD PTR [rdi+rdx*1],0xa
    1aa5:	je     1ab0 <is_new_line+0x20>
    1aa7:	mov    eax,r8d
    1aaa:	ret    
    1aab:	nop    DWORD PTR [rax+rax*1+0x0]
    1ab0:	add    rax,0x1
    1ab4:	mov    r8d,0x1
    1aba:	mov    QWORD PTR [rsi],rax
    1abd:	mov    eax,r8d
    1ac0:	ret    
    1ac1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    1acc:	nop    DWORD PTR [rax+0x0]

0000000000001ad0 <to_string>:
    1ad0:	endbr64 
    1ad4:	push   r15
    1ad6:	lea    r15,[rip+0x169b]        # 3178 <_IO_stdin_used+0x178>
    1add:	push   r14
    1adf:	push   r13
    1ae1:	push   r12
    1ae3:	push   rbp
    1ae4:	push   rbx
    1ae5:	sub    rsp,0x118
    1aec:	mov    r14,QWORD PTR [rsp+0x150]
    1af4:	mov    ebp,DWORD PTR [rsp+0x158]
    1afb:	mov    rax,QWORD PTR fs:0x28
    1b04:	mov    QWORD PTR [rsp+0x108],rax
    1b0c:	xor    eax,eax
    1b0e:	mov    r12,QWORD PTR [rsp+0x160]
    1b16:	mov    rbx,QWORD PTR [rsp+0x178]
    1b1e:	test   r14,r14
    1b21:	je     1b46 <to_string+0x76>
    1b23:	push   QWORD PTR [r14+0x28]
    1b27:	push   QWORD PTR [r14+0x20]
    1b2b:	push   QWORD PTR [r14+0x18]
    1b2f:	push   QWORD PTR [r14+0x10]
    1b33:	push   QWORD PTR [r14+0x8]
    1b37:	push   QWORD PTR [r14]
    1b3a:	call   1ad0 <to_string>
    1b3f:	add    rsp,0x30
    1b43:	mov    r15,rax
    1b46:	lea    r13,[rip+0x162b]        # 3178 <_IO_stdin_used+0x178>
    1b4d:	test   rbx,rbx
    1b50:	je     1b6f <to_string+0x9f>
    1b52:	push   QWORD PTR [rbx+0x28]
    1b55:	push   QWORD PTR [rbx+0x20]
    1b58:	push   QWORD PTR [rbx+0x18]
    1b5b:	push   QWORD PTR [rbx+0x10]
    1b5e:	push   QWORD PTR [rbx+0x8]
    1b61:	push   QWORD PTR [rbx]
    1b63:	call   1ad0 <to_string>
    1b68:	add    rsp,0x30
    1b6c:	mov    r13,rax
    1b6f:	cmp    ebp,0x7
    1b72:	je     1c60 <to_string+0x190>
    1b78:	cmp    ebp,0x8
    1b7b:	je     1ca0 <to_string+0x1d0>
    1b81:	test   ebp,ebp
    1b83:	je     1c30 <to_string+0x160>
    1b89:	test   r12,r12
    1b8c:	lea    rax,[rip+0x15e5]        # 3178 <_IO_stdin_used+0x178>
    1b93:	mov    rbp,rsp
    1b96:	mov    r8,r15
    1b99:	cmove  r12,rax
    1b9d:	sub    rsp,0x8
    1ba1:	mov    edx,0x100
    1ba6:	xor    eax,eax
    1ba8:	push   r13
    1baa:	lea    rcx,[rip+0x15d3]        # 3184 <_IO_stdin_used+0x184>
    1bb1:	mov    esi,0x1
    1bb6:	mov    rdi,rbp
    1bb9:	mov    r9,r12
    1bbc:	call   1210 <__sprintf_chk@plt>
    1bc1:	mov    r12d,eax
    1bc4:	pop    rax
    1bc5:	pop    rdx
    1bc6:	test   r14,r14
    1bc9:	je     1bd3 <to_string+0x103>
    1bcb:	mov    rdi,r15
    1bce:	call   1130 <free@plt>
    1bd3:	test   rbx,rbx
    1bd6:	je     1be0 <to_string+0x110>
    1bd8:	mov    rdi,r13
    1bdb:	call   1130 <free@plt>
    1be0:	add    r12d,0x1
    1be4:	movsxd r12,r12d
    1be7:	mov    rdi,r12
    1bea:	call   11a0 <malloc@plt>
    1bef:	mov    rdx,r12
    1bf2:	mov    rsi,rbp
    1bf5:	mov    rdi,rax
    1bf8:	call   1150 <strncpy@plt>
    1bfd:	mov    r8,rax
    1c00:	mov    rax,QWORD PTR [rsp+0x108]
    1c08:	xor    rax,QWORD PTR fs:0x28
    1c11:	jne    1ccc <to_string+0x1fc>
    1c17:	add    rsp,0x118
    1c1e:	mov    rax,r8
    1c21:	pop    rbx
    1c22:	pop    rbp
    1c23:	pop    r12
    1c25:	pop    r13
    1c27:	pop    r14
    1c29:	pop    r15
    1c2b:	ret    
    1c2c:	nop    DWORD PTR [rax+0x0]
    1c30:	mov    rbp,rsp
    1c33:	mov    r8,r15
    1c36:	lea    rcx,[rip+0x1542]        # 317f <_IO_stdin_used+0x17f>
    1c3d:	xor    eax,eax
    1c3f:	mov    edx,0x100
    1c44:	mov    esi,0x1
    1c49:	mov    rdi,rbp
    1c4c:	call   1210 <__sprintf_chk@plt>
    1c51:	mov    r12d,eax
    1c54:	jmp    1bc6 <to_string+0xf6>
    1c59:	nop    DWORD PTR [rax+0x0]
    1c60:	mov    rbp,rsp
    1c63:	pxor   xmm0,xmm0
    1c67:	mov    edx,0x100
    1c6c:	mov    esi,0x1
    1c71:	lea    rcx,[rip+0x145c]        # 30d4 <_IO_stdin_used+0xd4>
    1c78:	mov    rdi,rbp
    1c7b:	mov    eax,0x1
    1c80:	cvtss2sd xmm0,DWORD PTR [rsp+0x168]
    1c89:	call   1210 <__sprintf_chk@plt>
    1c8e:	mov    r12d,eax
    1c91:	jmp    1bc6 <to_string+0xf6>
    1c96:	nop    WORD PTR cs:[rax+rax*1+0x0]
    1ca0:	mov    rbp,rsp
    1ca3:	mov    r8,r12
    1ca6:	mov    r9,r15
    1ca9:	mov    edx,0x100
    1cae:	lea    rcx,[rip+0x14c8]        # 317d <_IO_stdin_used+0x17d>
    1cb5:	mov    esi,0x1
    1cba:	mov    rdi,rbp
    1cbd:	xor    eax,eax
    1cbf:	call   1210 <__sprintf_chk@plt>
    1cc4:	mov    r12d,eax
    1cc7:	jmp    1bc6 <to_string+0xf6>
    1ccc:	call   1180 <__stack_chk_fail@plt>
    1cd1:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    1cdc:	nop    DWORD PTR [rax+0x0]

0000000000001ce0 <primary>:
    1ce0:	endbr64 
    1ce4:	push   r13
    1ce6:	push   r12
    1ce8:	mov    r12,rdi
    1ceb:	push   rbp
    1cec:	mov    rbp,rsi
    1cef:	push   rbx
    1cf0:	mov    rbx,rdx
    1cf3:	sub    rsp,0x48
    1cf7:	mov    rax,QWORD PTR fs:0x28
    1d00:	mov    QWORD PTR [rsp+0x38],rax
    1d05:	xor    eax,eax
    1d07:	mov    rax,QWORD PTR [rdx]
    1d0a:	mov    rcx,rax
    1d0d:	shl    rcx,0x5
    1d11:	lea    r13,[rsi+rcx*1]
    1d15:	mov    edx,DWORD PTR [r13+0x0]
    1d19:	lea    esi,[rdx-0x7]
    1d1c:	and    esi,0xfffffffd
    1d1f:	je     1e40 <primary+0x160>
    1d25:	cmp    edx,0x8
    1d28:	je     1d88 <primary+0xa8>
    1d2a:	test   edx,edx
    1d2c:	je     1d97 <primary+0xb7>
    1d2e:	mov    QWORD PTR [r12],0x0
    1d36:	mov    DWORD PTR [r12+0x8],0xb
    1d3f:	mov    QWORD PTR [r12+0x10],0x0
    1d48:	mov    DWORD PTR [r12+0x18],0x0
    1d51:	mov    QWORD PTR [r12+0x20],0x0
    1d5a:	mov    QWORD PTR [r12+0x28],0x0
    1d63:	mov    rax,QWORD PTR [rsp+0x38]
    1d68:	xor    rax,QWORD PTR fs:0x28
    1d71:	jne    1e9f <primary+0x1bf>
    1d77:	add    rsp,0x48
    1d7b:	mov    rax,r12
    1d7e:	pop    rbx
    1d7f:	pop    rbp
    1d80:	pop    r12
    1d82:	pop    r13
    1d84:	ret    
    1d85:	nop    DWORD PTR [rax]
    1d88:	mov    edx,DWORD PTR [rbp+rcx*1+0x20]
    1d8c:	add    rax,0x1
    1d90:	mov    QWORD PTR [rbx],rax
    1d93:	test   edx,edx
    1d95:	jne    1d2e <primary+0x4e>
    1d97:	add    rax,0x1
    1d9b:	mov    rdx,rbx
    1d9e:	mov    rdi,rsp
    1da1:	mov    rsi,rbp
    1da4:	mov    QWORD PTR [rbx],rax
    1da7:	call   20c0 <term>
    1dac:	mov    rax,QWORD PTR [rbx]
    1daf:	mov    rdx,rax
    1db2:	shl    rdx,0x5
    1db6:	mov    edx,DWORD PTR [rbp+rdx*1+0x0]
    1dba:	test   edx,edx
    1dbc:	je     1e80 <primary+0x1a0>
    1dc2:	add    rax,0x1
    1dc6:	mov    QWORD PTR [rbx],rax
    1dc9:	mov    edi,0x30
    1dce:	call   11a0 <malloc@plt>
    1dd3:	movdqa xmm1,XMMWORD PTR [rsp]
    1dd8:	movdqu xmm4,XMMWORD PTR [r13+0x0]
    1dde:	movdqu xmm5,XMMWORD PTR [r13+0x10]
    1de4:	movdqa xmm2,XMMWORD PTR [rsp+0x10]
    1dea:	mov    QWORD PTR [rsp],rax
    1dee:	movdqa xmm3,XMMWORD PTR [rsp+0x20]
    1df4:	movups XMMWORD PTR [rsp+0x8],xmm4
    1df9:	movdqa xmm6,XMMWORD PTR [rsp]
    1dfe:	movups XMMWORD PTR [rsp+0x18],xmm5
    1e03:	movdqa xmm7,XMMWORD PTR [rsp+0x10]
    1e09:	mov    QWORD PTR [rsp+0x28],0x0
    1e12:	movups XMMWORD PTR [rax],xmm1
    1e15:	movdqa xmm1,XMMWORD PTR [rsp+0x20]
    1e1b:	movups XMMWORD PTR [rax+0x10],xmm2
    1e1f:	movups XMMWORD PTR [rax+0x20],xmm3
    1e23:	movups XMMWORD PTR [r12],xmm6
    1e28:	movups XMMWORD PTR [r12+0x10],xmm7
    1e2e:	movups XMMWORD PTR [r12+0x20],xmm1
    1e34:	jmp    1d63 <primary+0x83>
    1e39:	nop    DWORD PTR [rax+0x0]
    1e40:	add    rax,0x1
    1e44:	mov    QWORD PTR [rdi],0x0
    1e4b:	mov    QWORD PTR [rbx],rax
    1e4e:	mov    ecx,DWORD PTR [r13+0x0]
    1e52:	mov    rdx,QWORD PTR [r13+0x8]
    1e56:	movss  xmm0,DWORD PTR [r13+0x10]
    1e5c:	mov    QWORD PTR [rdi+0x28],0x0
    1e64:	mov    rax,QWORD PTR [r13+0x18]
    1e68:	mov    DWORD PTR [rdi+0x8],ecx
    1e6b:	mov    QWORD PTR [rdi+0x10],rdx
    1e6f:	mov    QWORD PTR [rdi+0x20],rax
    1e73:	movss  DWORD PTR [rdi+0x18],xmm0
    1e78:	jmp    1d63 <primary+0x83>
    1e7d:	nop    DWORD PTR [rax]
    1e80:	mov    rdi,QWORD PTR [rip+0x3199]        # 5020 <stderr@@GLIBC_2.2.5>
    1e87:	lea    rdx,[rip+0x1301]        # 318f <_IO_stdin_used+0x18f>
    1e8e:	mov    esi,0x1
    1e93:	xor    eax,eax
    1e95:	call   11e0 <__fprintf_chk@plt>
    1e9a:	jmp    1dc9 <primary+0xe9>
    1e9f:	call   1180 <__stack_chk_fail@plt>
    1ea4:	data16 nop WORD PTR cs:[rax+rax*1+0x0]
    1eaf:	nop

0000000000001eb0 <factor>:
    1eb0:	endbr64 
    1eb4:	push   r15
    1eb6:	push   r14
    1eb8:	push   r13
    1eba:	mov    r13,rdx
    1ebd:	push   r12
    1ebf:	mov    r12,rsi
    1ec2:	push   rbp
    1ec3:	push   rbx
    1ec4:	sub    rsp,0xb8
    1ecb:	mov    QWORD PTR [rsp+0x38],rdi
    1ed0:	lea    rdi,[rsp+0x40]
    1ed5:	mov    rax,QWORD PTR fs:0x28
    1ede:	mov    QWORD PTR [rsp+0xa8],rax
    1ee6:	xor    eax,eax
    1ee8:	call   1ce0 <primary>
    1eed:	mov    rax,QWORD PTR [r13+0x0]
    1ef1:	mov    rbp,QWORD PTR [rsp+0x40]
    1ef6:	mov    r14d,DWORD PTR [rsp+0x48]
    1efb:	mov    r15,QWORD PTR [rsp+0x50]
    1f00:	mov    rsi,rax
    1f03:	movss  xmm0,DWORD PTR [rsp+0x58]
    1f09:	mov    rcx,QWORD PTR [rsp+0x60]
    1f0e:	shl    rsi,0x5
    1f12:	mov    rbx,QWORD PTR [rsp+0x68]
    1f17:	mov    esi,DWORD PTR [r12+rsi*1]
    1f1b:	sub    esi,0x4
    1f1e:	cmp    esi,0x1
    1f21:	ja     2045 <factor+0x195>
    1f27:	lea    rdx,[rsp+0x70]
    1f2c:	mov    QWORD PTR [rsp+0x30],rdx
    1f31:	nop    DWORD PTR [rax+0x0]
    1f38:	add    rax,0x1
    1f3c:	mov    QWORD PTR [rsp+0x10],rcx
    1f41:	mov    rdx,r13
    1f44:	mov    rsi,r12
    1f47:	mov    QWORD PTR [r13+0x0],rax
    1f4b:	shl    rax,0x5
    1f4f:	mov    rdi,QWORD PTR [rsp+0x30]
    1f54:	lea    rax,[r12+rax*1-0x20]
    1f59:	movss  DWORD PTR [rsp+0x28],xmm0
    1f5f:	mov    rcx,QWORD PTR [rax+0x18]
    1f63:	movss  xmm0,DWORD PTR [rax+0x10]
    1f68:	mov    DWORD PTR [rsp+0x2c],r14d
    1f6d:	mov    QWORD PTR [rsp+0x20],r15
    1f72:	mov    r14d,DWORD PTR [rax]
    1f75:	mov    QWORD PTR [rsp+0x8],rcx
    1f7a:	mov    r15,QWORD PTR [rax+0x8]
    1f7e:	movss  DWORD PTR [rsp+0x1c],xmm0
    1f84:	call   1ce0 <primary>
    1f89:	mov    edi,0x30
    1f8e:	mov    QWORD PTR [rsp],rbp
    1f92:	call   11a0 <malloc@plt>
    1f97:	mov    rsi,QWORD PTR [rsp]
    1f9b:	mov    r11d,DWORD PTR [rsp+0x2c]
    1fa0:	mov    QWORD PTR [rsp+0x68],rbx
    1fa5:	mov    r10,QWORD PTR [rsp+0x20]
    1faa:	movss  xmm1,DWORD PTR [rsp+0x28]
    1fb0:	mov    edi,0x30
    1fb5:	mov    rbp,rax
    1fb8:	mov    r9,QWORD PTR [rsp+0x10]
    1fbd:	mov    QWORD PTR [rsp+0x40],rsi
    1fc2:	mov    DWORD PTR [rsp+0x48],r11d
    1fc7:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
    1fcd:	mov    QWORD PTR [rsp+0x50],r10
    1fd2:	mov    QWORD PTR [rsp+0x60],r9
    1fd7:	movdqa xmm4,XMMWORD PTR [rsp+0x60]
    1fdd:	movss  DWORD PTR [rsp+0x58],xmm1
    1fe3:	movdqa xmm3,XMMWORD PTR [rsp+0x50]
    1fe9:	movups XMMWORD PTR [rax],xmm2
    1fec:	movups XMMWORD PTR [rax+0x10],xmm3
    1ff0:	movups XMMWORD PTR [rax+0x20],xmm4
    1ff4:	call   11a0 <malloc@plt>
    1ff9:	movdqa xmm5,XMMWORD PTR [rsp+0x70]
    1fff:	mov    rcx,QWORD PTR [rsp+0x8]
    2004:	movdqa xmm6,XMMWORD PTR [rsp+0x80]
    200d:	mov    rbx,rax
    2010:	movss  xmm0,DWORD PTR [rsp+0x1c]
    2016:	movdqa xmm7,XMMWORD PTR [rsp+0x90]
    201f:	movups XMMWORD PTR [rax],xmm5
    2022:	movups XMMWORD PTR [rax+0x10],xmm6
    2026:	movups XMMWORD PTR [rax+0x20],xmm7
    202a:	mov    rax,QWORD PTR [r13+0x0]
    202e:	mov    rsi,rax
    2031:	shl    rsi,0x5
    2035:	mov    esi,DWORD PTR [r12+rsi*1]
    2039:	sub    esi,0x4
    203c:	cmp    esi,0x1
    203f:	jbe    1f38 <factor+0x88>
    2045:	mov    rax,QWORD PTR [rsp+0x38]
    204a:	mov    QWORD PTR [rsp+0x40],rbp
    204f:	mov    DWORD PTR [rsp+0x48],r14d
    2054:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
    205a:	mov    QWORD PTR [rsp+0x50],r15
    205f:	mov    QWORD PTR [rsp+0x60],rcx
    2064:	mov    QWORD PTR [rsp+0x68],rbx
    2069:	movdqa xmm4,XMMWORD PTR [rsp+0x60]
    206f:	movss  DWORD PTR [rsp+0x58],xmm0
    2075:	movdqa xmm3,XMMWORD PTR [rsp+0x50]
    207b:	movups XMMWORD PTR [rax],xmm2
    207e:	movups XMMWORD PTR [rax+0x10],xmm3
    2082:	movups XMMWORD PTR [rax+0x20],xmm4
    2086:	mov    rax,QWORD PTR [rsp+0xa8]
    208e:	xor    rax,QWORD PTR fs:0x28
    2097:	jne    20b0 <factor+0x200>
    2099:	mov    rax,QWORD PTR [rsp+0x38]
    209e:	add    rsp,0xb8
    20a5:	pop    rbx
    20a6:	pop    rbp
    20a7:	pop    r12
    20a9:	pop    r13
    20ab:	pop    r14
    20ad:	pop    r15
    20af:	ret    
    20b0:	call   1180 <__stack_chk_fail@plt>
    20b5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000020c0 <term>:
    20c0:	endbr64 
    20c4:	push   r15
    20c6:	push   r14
    20c8:	push   r13
    20ca:	mov    r13,rdx
    20cd:	push   r12
    20cf:	mov    r12,rsi
    20d2:	push   rbp
    20d3:	push   rbx
    20d4:	sub    rsp,0xb8
    20db:	mov    QWORD PTR [rsp+0x38],rdi
    20e0:	lea    rdi,[rsp+0x40]
    20e5:	mov    rax,QWORD PTR fs:0x28
    20ee:	mov    QWORD PTR [rsp+0xa8],rax
    20f6:	xor    eax,eax
    20f8:	call   1eb0 <factor>
    20fd:	mov    rax,QWORD PTR [r13+0x0]
    2101:	mov    rbp,QWORD PTR [rsp+0x40]
    2106:	mov    r14d,DWORD PTR [rsp+0x48]
    210b:	mov    r15,QWORD PTR [rsp+0x50]
    2110:	mov    rsi,rax
    2113:	movss  xmm0,DWORD PTR [rsp+0x58]
    2119:	mov    rcx,QWORD PTR [rsp+0x60]
    211e:	shl    rsi,0x5
    2122:	mov    rbx,QWORD PTR [rsp+0x68]
    2127:	mov    esi,DWORD PTR [r12+rsi*1]
    212b:	sub    esi,0x2
    212e:	cmp    esi,0x1
    2131:	ja     2255 <term+0x195>
    2137:	lea    rdx,[rsp+0x70]
    213c:	mov    QWORD PTR [rsp+0x30],rdx
    2141:	nop    DWORD PTR [rax+0x0]
    2148:	add    rax,0x1
    214c:	mov    QWORD PTR [rsp+0x10],rcx
    2151:	mov    rdx,r13
    2154:	mov    rsi,r12
    2157:	mov    QWORD PTR [r13+0x0],rax
    215b:	shl    rax,0x5
    215f:	mov    rdi,QWORD PTR [rsp+0x30]
    2164:	lea    rax,[r12+rax*1-0x20]
    2169:	movss  DWORD PTR [rsp+0x28],xmm0
    216f:	mov    rcx,QWORD PTR [rax+0x18]
    2173:	movss  xmm0,DWORD PTR [rax+0x10]
    2178:	mov    DWORD PTR [rsp+0x2c],r14d
    217d:	mov    QWORD PTR [rsp+0x20],r15
    2182:	mov    r14d,DWORD PTR [rax]
    2185:	mov    QWORD PTR [rsp+0x8],rcx
    218a:	mov    r15,QWORD PTR [rax+0x8]
    218e:	movss  DWORD PTR [rsp+0x1c],xmm0
    2194:	call   1eb0 <factor>
    2199:	mov    edi,0x30
    219e:	mov    QWORD PTR [rsp],rbp
    21a2:	call   11a0 <malloc@plt>
    21a7:	mov    rsi,QWORD PTR [rsp]
    21ab:	mov    r11d,DWORD PTR [rsp+0x2c]
    21b0:	mov    QWORD PTR [rsp+0x68],rbx
    21b5:	mov    r10,QWORD PTR [rsp+0x20]
    21ba:	movss  xmm1,DWORD PTR [rsp+0x28]
    21c0:	mov    edi,0x30
    21c5:	mov    rbp,rax
    21c8:	mov    r9,QWORD PTR [rsp+0x10]
    21cd:	mov    QWORD PTR [rsp+0x40],rsi
    21d2:	mov    DWORD PTR [rsp+0x48],r11d
    21d7:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
    21dd:	mov    QWORD PTR [rsp+0x50],r10
    21e2:	mov    QWORD PTR [rsp+0x60],r9
    21e7:	movdqa xmm4,XMMWORD PTR [rsp+0x60]
    21ed:	movss  DWORD PTR [rsp+0x58],xmm1
    21f3:	movdqa xmm3,XMMWORD PTR [rsp+0x50]
    21f9:	movups XMMWORD PTR [rax],xmm2
    21fc:	movups XMMWORD PTR [rax+0x10],xmm3
    2200:	movups XMMWORD PTR [rax+0x20],xmm4
    2204:	call   11a0 <malloc@plt>
    2209:	movdqa xmm5,XMMWORD PTR [rsp+0x70]
    220f:	mov    rcx,QWORD PTR [rsp+0x8]
    2214:	movdqa xmm6,XMMWORD PTR [rsp+0x80]
    221d:	mov    rbx,rax
    2220:	movss  xmm0,DWORD PTR [rsp+0x1c]
    2226:	movdqa xmm7,XMMWORD PTR [rsp+0x90]
    222f:	movups XMMWORD PTR [rax],xmm5
    2232:	movups XMMWORD PTR [rax+0x10],xmm6
    2236:	movups XMMWORD PTR [rax+0x20],xmm7
    223a:	mov    rax,QWORD PTR [r13+0x0]
    223e:	mov    rsi,rax
    2241:	shl    rsi,0x5
    2245:	mov    esi,DWORD PTR [r12+rsi*1]
    2249:	sub    esi,0x2
    224c:	cmp    esi,0x1
    224f:	jbe    2148 <term+0x88>
    2255:	mov    rax,QWORD PTR [rsp+0x38]
    225a:	mov    QWORD PTR [rsp+0x40],rbp
    225f:	mov    DWORD PTR [rsp+0x48],r14d
    2264:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
    226a:	mov    QWORD PTR [rsp+0x50],r15
    226f:	mov    QWORD PTR [rsp+0x60],rcx
    2274:	mov    QWORD PTR [rsp+0x68],rbx
    2279:	movdqa xmm4,XMMWORD PTR [rsp+0x60]
    227f:	movss  DWORD PTR [rsp+0x58],xmm0
    2285:	movdqa xmm3,XMMWORD PTR [rsp+0x50]
    228b:	movups XMMWORD PTR [rax],xmm2
    228e:	movups XMMWORD PTR [rax+0x10],xmm3
    2292:	movups XMMWORD PTR [rax+0x20],xmm4
    2296:	mov    rax,QWORD PTR [rsp+0xa8]
    229e:	xor    rax,QWORD PTR fs:0x28
    22a7:	jne    22c0 <term+0x200>
    22a9:	mov    rax,QWORD PTR [rsp+0x38]
    22ae:	add    rsp,0xb8
    22b5:	pop    rbx
    22b6:	pop    rbp
    22b7:	pop    r12
    22b9:	pop    r13
    22bb:	pop    r14
    22bd:	pop    r15
    22bf:	ret    
    22c0:	call   1180 <__stack_chk_fail@plt>
    22c5:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

00000000000022d0 <equality>:
    22d0:	endbr64 
    22d4:	push   r15
    22d6:	push   r14
    22d8:	push   r13
    22da:	mov    r13,rdx
    22dd:	push   r12
    22df:	mov    r12,rsi
    22e2:	push   rbp
    22e3:	push   rbx
    22e4:	sub    rsp,0xb8
    22eb:	mov    QWORD PTR [rsp+0x38],rdi
    22f0:	lea    rdi,[rsp+0x40]
    22f5:	mov    rax,QWORD PTR fs:0x28
    22fe:	mov    QWORD PTR [rsp+0xa8],rax
    2306:	xor    eax,eax
    2308:	call   20c0 <term>
    230d:	mov    rax,QWORD PTR [r13+0x0]
    2311:	mov    rbp,QWORD PTR [rsp+0x40]
    2316:	mov    r14d,DWORD PTR [rsp+0x48]
    231b:	mov    r15,QWORD PTR [rsp+0x50]
    2320:	mov    rsi,rax
    2323:	movss  xmm0,DWORD PTR [rsp+0x58]
    2329:	mov    rcx,QWORD PTR [rsp+0x60]
    232e:	shl    rsi,0x5
    2332:	mov    rbx,QWORD PTR [rsp+0x68]
    2337:	cmp    DWORD PTR [r12+rsi*1],0x6
    233c:	jne    2458 <equality+0x188>
    2342:	lea    rdx,[rsp+0x70]
    2347:	mov    QWORD PTR [rsp+0x30],rdx
    234c:	nop    DWORD PTR [rax+0x0]
    2350:	add    rax,0x1
    2354:	mov    QWORD PTR [rsp+0x10],rcx
    2359:	mov    rdx,r13
    235c:	mov    rsi,r12
    235f:	mov    QWORD PTR [r13+0x0],rax
    2363:	shl    rax,0x5
    2367:	mov    rdi,QWORD PTR [rsp+0x30]
    236c:	lea    rax,[r12+rax*1-0x20]
    2371:	movss  DWORD PTR [rsp+0x28],xmm0
    2377:	mov    rcx,QWORD PTR [rax+0x18]
    237b:	movss  xmm0,DWORD PTR [rax+0x10]
    2380:	mov    DWORD PTR [rsp+0x2c],r14d
    2385:	mov    QWORD PTR [rsp+0x20],r15
    238a:	mov    r14d,DWORD PTR [rax]
    238d:	mov    QWORD PTR [rsp+0x8],rcx
    2392:	mov    r15,QWORD PTR [rax+0x8]
    2396:	movss  DWORD PTR [rsp+0x1c],xmm0
    239c:	call   20c0 <term>
    23a1:	mov    edi,0x30
    23a6:	mov    QWORD PTR [rsp],rbp
    23aa:	call   11a0 <malloc@plt>
    23af:	mov    rsi,QWORD PTR [rsp]
    23b3:	mov    r11d,DWORD PTR [rsp+0x2c]
    23b8:	mov    QWORD PTR [rsp+0x68],rbx
    23bd:	mov    r10,QWORD PTR [rsp+0x20]
    23c2:	movss  xmm1,DWORD PTR [rsp+0x28]
    23c8:	mov    edi,0x30
    23cd:	mov    rbp,rax
    23d0:	mov    r9,QWORD PTR [rsp+0x10]
    23d5:	mov    QWORD PTR [rsp+0x40],rsi
    23da:	mov    DWORD PTR [rsp+0x48],r11d
    23df:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
    23e5:	mov    QWORD PTR [rsp+0x50],r10
    23ea:	mov    QWORD PTR [rsp+0x60],r9
    23ef:	movdqa xmm4,XMMWORD PTR [rsp+0x60]
    23f5:	movss  DWORD PTR [rsp+0x58],xmm1
    23fb:	movdqa xmm3,XMMWORD PTR [rsp+0x50]
    2401:	movups XMMWORD PTR [rax],xmm2
    2404:	movups XMMWORD PTR [rax+0x10],xmm3
    2408:	movups XMMWORD PTR [rax+0x20],xmm4
    240c:	call   11a0 <malloc@plt>
    2411:	movdqa xmm5,XMMWORD PTR [rsp+0x70]
    2417:	mov    rcx,QWORD PTR [rsp+0x8]
    241c:	movdqa xmm6,XMMWORD PTR [rsp+0x80]
    2425:	mov    rbx,rax
    2428:	movss  xmm0,DWORD PTR [rsp+0x1c]
    242e:	movdqa xmm7,XMMWORD PTR [rsp+0x90]
    2437:	movups XMMWORD PTR [rax],xmm5
    243a:	movups XMMWORD PTR [rax+0x10],xmm6
    243e:	movups XMMWORD PTR [rax+0x20],xmm7
    2442:	mov    rax,QWORD PTR [r13+0x0]
    2446:	mov    rsi,rax
    2449:	shl    rsi,0x5
    244d:	cmp    DWORD PTR [r12+rsi*1],0x6
    2452:	je     2350 <equality+0x80>
    2458:	mov    rax,QWORD PTR [rsp+0x38]
    245d:	mov    QWORD PTR [rsp+0x40],rbp
    2462:	mov    DWORD PTR [rsp+0x48],r14d
    2467:	movdqa xmm2,XMMWORD PTR [rsp+0x40]
    246d:	mov    QWORD PTR [rsp+0x50],r15
    2472:	mov    QWORD PTR [rsp+0x60],rcx
    2477:	mov    QWORD PTR [rsp+0x68],rbx
    247c:	movdqa xmm4,XMMWORD PTR [rsp+0x60]
    2482:	movss  DWORD PTR [rsp+0x58],xmm0
    2488:	movdqa xmm3,XMMWORD PTR [rsp+0x50]
    248e:	movups XMMWORD PTR [rax],xmm2
    2491:	movups XMMWORD PTR [rax+0x10],xmm3
    2495:	movups XMMWORD PTR [rax+0x20],xmm4
    2499:	mov    rax,QWORD PTR [rsp+0xa8]
    24a1:	xor    rax,QWORD PTR fs:0x28
    24aa:	jne    24c3 <equality+0x1f3>
    24ac:	mov    rax,QWORD PTR [rsp+0x38]
    24b1:	add    rsp,0xb8
    24b8:	pop    rbx
    24b9:	pop    rbp
    24ba:	pop    r12
    24bc:	pop    r13
    24be:	pop    r14
    24c0:	pop    r15
    24c2:	ret    
    24c3:	call   1180 <__stack_chk_fail@plt>
    24c8:	nop    DWORD PTR [rax+rax*1+0x0]

00000000000024d0 <parse>:
    24d0:	endbr64 
    24d4:	push   r15
    24d6:	xor    r15d,r15d
    24d9:	push   r14
    24db:	push   r13
    24dd:	push   r12
    24df:	push   rbp
    24e0:	xor    ebp,ebp
    24e2:	push   rbx
    24e3:	mov    rbx,rdi
    24e6:	mov    edi,0x1800
    24eb:	sub    rsp,0x58
    24ef:	mov    rax,QWORD PTR fs:0x28
    24f8:	mov    QWORD PTR [rsp+0x48],rax
    24fd:	xor    eax,eax
    24ff:	lea    r14,[rsp+0x10]
    2504:	lea    r13,[rsp+0x40]
    2509:	mov    QWORD PTR [rsp+0x40],0x0
    2512:	call   11a0 <malloc@plt>
    2517:	mov    QWORD PTR [rsp],0x80
    251f:	mov    r12,rax
    2522:	lea    rax,[r15+0x1]
    2526:	mov    rdx,r13
    2529:	mov    rsi,rbx
    252c:	mov    rdi,r14
    252f:	mov    QWORD PTR [rsp+0x8],rax
    2534:	call   22d0 <equality>
    2539:	movdqu xmm0,XMMWORD PTR [rsp+0x10]
    253f:	mov    rax,QWORD PTR [rsp+0x40]
    2544:	movups XMMWORD PTR [r12+rbp*1],xmm0
    2549:	movdqu xmm1,XMMWORD PTR [rsp+0x20]
    254f:	mov    rdx,rax
    2552:	shl    rdx,0x5
    2556:	movups XMMWORD PTR [r12+rbp*1+0x10],xmm1
    255c:	movdqu xmm2,XMMWORD PTR [rsp+0x30]
    2562:	movups XMMWORD PTR [r12+rbp*1+0x20],xmm2
    2568:	cmp    DWORD PTR [rbx+rdx*1],0xa
    256c:	je     25a0 <parse+0xd0>
    256e:	lea    rax,[r15+0x1]
    2572:	cmp    QWORD PTR [rsp],rax
    2576:	je     25e0 <parse+0x110>
    2578:	mov    rax,QWORD PTR [rsp+0x48]
    257d:	xor    rax,QWORD PTR fs:0x28
    2586:	jne    25f1 <parse+0x121>
    2588:	add    rsp,0x58
    258c:	mov    rax,r12
    258f:	pop    rbx
    2590:	pop    rbp
    2591:	pop    r12
    2593:	pop    r13
    2595:	pop    r14
    2597:	pop    r15
    2599:	ret    
    259a:	nop    WORD PTR [rax+rax*1+0x0]
    25a0:	add    rax,0x1
    25a4:	mov    rcx,QWORD PTR [rsp+0x8]
    25a9:	mov    QWORD PTR [rsp+0x40],rax
    25ae:	cmp    QWORD PTR [rsp],rcx
    25b2:	jne    25cd <parse+0xfd>
    25b4:	lea    rax,[r15+0x81]
    25bb:	mov    rdi,r12
    25be:	mov    rsi,rax
    25c1:	mov    QWORD PTR [rsp],rax
    25c5:	call   11b0 <realloc@plt>
    25ca:	mov    r12,rax
    25cd:	mov    r15,QWORD PTR [rsp+0x8]
    25d2:	add    rbp,0x30
    25d6:	jmp    2522 <parse+0x52>
    25db:	nop    DWORD PTR [rax+rax*1+0x0]
    25e0:	mov    rdi,r12
    25e3:	lea    rsi,[r15+0x2]
    25e7:	call   11b0 <realloc@plt>
    25ec:	mov    r12,rax
    25ef:	jmp    2578 <parse+0xa8>
    25f1:	call   1180 <__stack_chk_fail@plt>
    25f6:	nop    WORD PTR cs:[rax+rax*1+0x0]

0000000000002600 <evaluate>:
    2600:	endbr64 
    2604:	push   r12
    2606:	push   rbx
    2607:	sub    rsp,0x18
    260b:	mov    rax,QWORD PTR [rsp+0x30]
    2610:	mov    r12,QWORD PTR [rsp+0x40]
    2615:	mov    rbx,QWORD PTR [rsp+0x58]
    261a:	test   rax,rax
    261d:	je     263c <evaluate+0x3c>
    261f:	push   QWORD PTR [rax+0x28]
    2622:	push   QWORD PTR [rax+0x20]
    2625:	push   QWORD PTR [rax+0x18]
    2628:	push   QWORD PTR [rax+0x10]
    262b:	push   QWORD PTR [rax+0x8]
    262e:	push   QWORD PTR [rax]
    2630:	call   2600 <evaluate>
    2635:	add    rsp,0x30
    2639:	movaps xmm1,xmm0
    263c:	test   rbx,rbx
    263f:	je     266d <evaluate+0x6d>
    2641:	movss  DWORD PTR [rsp+0xc],xmm1
    2647:	push   QWORD PTR [rbx+0x28]
    264a:	push   QWORD PTR [rbx+0x20]
    264d:	push   QWORD PTR [rbx+0x18]
    2650:	push   QWORD PTR [rbx+0x10]
    2653:	push   QWORD PTR [rbx+0x8]
    2656:	push   QWORD PTR [rbx]
    2658:	call   2600 <evaluate>
    265d:	movss  DWORD PTR [rsp+0x38],xmm0
    2663:	movss  xmm1,DWORD PTR [rsp+0x3c]
    2669:	add    rsp,0x30
    266d:	cmp    DWORD PTR [rsp+0x38],0x8
    2672:	ja     26a9 <evaluate+0xa9>
    2674:	mov    eax,DWORD PTR [rsp+0x38]
    2678:	lea    rdx,[rip+0xb59]        # 31d8 <_IO_stdin_used+0x1d8>
    267f:	movsxd rax,DWORD PTR [rdx+rax*4]
    2683:	add    rax,rdx
    2686:	notrack jmp rax
    2689:	nop    DWORD PTR [rax+0x0]
    2690:	ucomiss xmm1,DWORD PTR [rsp+0x8]
    2695:	jp     2818 <evaluate+0x218>
    269b:	jne    2818 <evaluate+0x218>
    26a1:	movss  xmm0,DWORD PTR [rip+0xb53]        # 31fc <_IO_stdin_used+0x1fc>
    26a9:	add    rsp,0x18
    26ad:	pop    rbx
    26ae:	pop    r12
    26b0:	ret    
    26b1:	nop    DWORD PTR [rax+0x0]
    26b8:	add    rsp,0x18
    26bc:	movaps xmm0,xmm1
    26bf:	pop    rbx
    26c0:	pop    r12
    26c2:	ret    
    26c3:	nop    DWORD PTR [rax+rax*1+0x0]
    26c8:	subss  xmm1,DWORD PTR [rsp+0x8]
    26ce:	add    rsp,0x18
    26d2:	pop    rbx
    26d3:	pop    r12
    26d5:	movaps xmm0,xmm1
    26d8:	ret    
    26d9:	nop    DWORD PTR [rax+0x0]
    26e0:	movss  xmm0,DWORD PTR [rsp+0x8]
    26e6:	add    rsp,0x18
    26ea:	pop    rbx
    26eb:	pop    r12
    26ed:	addss  xmm0,xmm1
    26f1:	ret    
    26f2:	nop    WORD PTR [rax+rax*1+0x0]
    26f8:	divss  xmm1,DWORD PTR [rsp+0x8]
    26fe:	add    rsp,0x18
    2702:	movaps xmm0,xmm1
    2705:	pop    rbx
    2706:	pop    r12
    2708:	ret    
    2709:	nop    DWORD PTR [rax+0x0]
    2710:	movss  xmm0,DWORD PTR [rsp+0x8]
    2716:	add    rsp,0x18
    271a:	pop    rbx
    271b:	pop    r12
    271d:	mulss  xmm0,xmm1
    2721:	ret    
    2722:	nop    WORD PTR [rax+rax*1+0x0]
    2728:	movss  xmm0,DWORD PTR [rsp+0x48]
    272e:	add    rsp,0x18
    2732:	pop    rbx
    2733:	pop    r12
    2735:	ret    
    2736:	nop    WORD PTR cs:[rax+rax*1+0x0]
    2740:	mov    rsi,r12
    2743:	lea    rdi,[rip+0xa63]        # 31ad <_IO_stdin_used+0x1ad>
    274a:	movss  DWORD PTR [rsp+0x8],xmm1
    2750:	call   1190 <strcmp@plt>
    2755:	movss  xmm1,DWORD PTR [rsp+0x8]
    275b:	test   eax,eax
    275d:	je     2858 <evaluate+0x258>
    2763:	mov    rsi,r12
    2766:	lea    rdi,[rip+0xa44]        # 31b1 <_IO_stdin_used+0x1b1>
    276d:	movss  DWORD PTR [rsp+0x8],xmm1
    2773:	call   1190 <strcmp@plt>
    2778:	test   eax,eax
    277a:	jne    2828 <evaluate+0x228>
    2780:	movss  xmm1,DWORD PTR [rsp+0x8]
    2786:	pxor   xmm4,xmm4
    278a:	movaps xmm0,xmm1
    278d:	mulss  xmm0,xmm1
    2791:	movaps xmm3,xmm0
    2794:	mulss  xmm3,xmm1
    2798:	mulss  xmm0,DWORD PTR [rip+0xa74]        # 3214 <_IO_stdin_used+0x214>
    27a0:	mulss  xmm3,xmm1
    27a4:	cvtss2sd xmm4,xmm0
    27a8:	movsd  xmm0,QWORD PTR [rip+0xa78]        # 3228 <_IO_stdin_used+0x228>
    27b0:	subsd  xmm0,xmm4
    27b4:	movaps xmm2,xmm3
    27b7:	divss  xmm3,DWORD PTR [rip+0xa59]        # 3218 <_IO_stdin_used+0x218>
    27bf:	cvtss2sd xmm3,xmm3
    27c3:	mulss  xmm2,xmm1
    27c7:	addsd  xmm0,xmm3
    27cb:	mulss  xmm2,xmm1
    27cf:	movaps xmm3,xmm2
    27d2:	divss  xmm3,DWORD PTR [rip+0xa42]        # 321c <_IO_stdin_used+0x21c>
    27da:	cvtss2sd xmm3,xmm3
    27de:	subsd  xmm0,xmm3
    27e2:	mulss  xmm2,xmm1
    27e6:	movapd xmm3,xmm0
    27ea:	movaps xmm0,xmm2
    27ed:	mulss  xmm0,xmm1
    27f1:	movaps xmm1,xmm0
    27f4:	pxor   xmm0,xmm0
    27f8:	divss  xmm1,DWORD PTR [rip+0xa20]        # 3220 <_IO_stdin_used+0x220>
    2800:	cvtss2sd xmm0,xmm1
    2804:	addsd  xmm0,xmm3
    2808:	cvtsd2ss xmm0,xmm0
    280c:	jmp    26a9 <evaluate+0xa9>
    2811:	nop    DWORD PTR [rax+0x0]
    2818:	pxor   xmm0,xmm0
    281c:	jmp    26a9 <evaluate+0xa9>
    2821:	nop    DWORD PTR [rax+0x0]
    2828:	mov    rdi,QWORD PTR [rip+0x27f1]        # 5020 <stderr@@GLIBC_2.2.5>
    282f:	mov    rcx,r12
    2832:	mov    esi,0x1
    2837:	xor    eax,eax
    2839:	lea    rdx,[rip+0x978]        # 31b8 <_IO_stdin_used+0x1b8>
    2840:	call   11e0 <__fprintf_chk@plt>
    2845:	movss  xmm0,DWORD PTR [rip+0x9b3]        # 3200 <_IO_stdin_used+0x200>
    284d:	jmp    26a9 <evaluate+0xa9>
    2852:	nop    WORD PTR [rax+rax*1+0x0]
    2858:	movaps xmm0,xmm1
    285b:	movaps xmm4,xmm1
    285e:	mulss  xmm0,xmm1
    2862:	mulss  xmm0,xmm1
    2866:	movaps xmm3,xmm0
    2869:	divss  xmm0,DWORD PTR [rip+0x993]        # 3204 <_IO_stdin_used+0x204>
    2871:	subss  xmm4,xmm0
    2875:	mulss  xmm3,xmm1
    2879:	mulss  xmm3,xmm1
    287d:	movaps xmm2,xmm3
    2880:	divss  xmm3,DWORD PTR [rip+0x980]        # 3208 <_IO_stdin_used+0x208>
    2888:	addss  xmm3,xmm4
    288c:	mulss  xmm2,xmm1
    2890:	mulss  xmm2,xmm1
    2894:	movaps xmm0,xmm2
    2897:	divss  xmm0,DWORD PTR [rip+0x96d]        # 320c <_IO_stdin_used+0x20c>
    289f:	subss  xmm3,xmm0
    28a3:	mulss  xmm2,xmm1
    28a7:	movaps xmm0,xmm2
    28aa:	mulss  xmm0,xmm1
    28ae:	divss  xmm0,DWORD PTR [rip+0x95a]        # 3210 <_IO_stdin_used+0x210>
    28b6:	addss  xmm0,xmm3
    28ba:	jmp    26a9 <evaluate+0xa9>
    28bf:	nop

00000000000028c0 <__libc_csu_init>:
    28c0:	endbr64 
    28c4:	push   r15
    28c6:	lea    r15,[rip+0x247b]        # 4d48 <__frame_dummy_init_array_entry>
    28cd:	push   r14
    28cf:	mov    r14,rdx
    28d2:	push   r13
    28d4:	mov    r13,rsi
    28d7:	push   r12
    28d9:	mov    r12d,edi
    28dc:	push   rbp
    28dd:	lea    rbp,[rip+0x246c]        # 4d50 <__do_global_dtors_aux_fini_array_entry>
    28e4:	push   rbx
    28e5:	sub    rbp,r15
    28e8:	sub    rsp,0x8
    28ec:	call   1000 <_init>
    28f1:	sar    rbp,0x3
    28f5:	je     2916 <__libc_csu_init+0x56>
    28f7:	xor    ebx,ebx
    28f9:	nop    DWORD PTR [rax+0x0]
    2900:	mov    rdx,r14
    2903:	mov    rsi,r13
    2906:	mov    edi,r12d
    2909:	call   QWORD PTR [r15+rbx*8]
    290d:	add    rbx,0x1
    2911:	cmp    rbp,rbx
    2914:	jne    2900 <__libc_csu_init+0x40>
    2916:	add    rsp,0x8
    291a:	pop    rbx
    291b:	pop    rbp
    291c:	pop    r12
    291e:	pop    r13
    2920:	pop    r14
    2922:	pop    r15
    2924:	ret    
    2925:	data16 nop WORD PTR cs:[rax+rax*1+0x0]

0000000000002930 <__libc_csu_fini>:
    2930:	endbr64 
    2934:	ret    

Disassembly of section .fini:

0000000000002938 <_fini>:
    2938:	endbr64 
    293c:	sub    rsp,0x8
    2940:	add    rsp,0x8
    2944:	ret    
